OBJECT Codeunit 28 Error Message Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.04;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      JoinedErr@1001 : TextConst '@@@={Locked};ENU=%1 %2.;NOR=%1 %2.';
      AllowedPostingDateTok@1000 : TextConst '@@@="{MaxLength=30}";ENU=ALLOWED POSTING DATE;NOR=TILLATT BOKFùRINGSDATO';

    [External]
    PROCEDURE Activate@1(VAR ErrorMessageHandler@1000 : Codeunit 29);
    BEGIN
      IF NOT IsActive THEN
        ErrorMessageHandler.Activate(ErrorMessageHandler)
    END;

    LOCAL PROCEDURE AddLink@12(Name@1000 : Code[30]);
    VAR
      NamedForwardLink@1001 : Record 1431;
    BEGIN
      NamedForwardLink.INIT;
      NamedForwardLink.Name := Name;
      IF NamedForwardLink.INSERT THEN;
    END;

    [External]
    PROCEDURE IsActive@5() IsFound : Boolean;
    BEGIN
      OnFindActiveSubscriber(IsFound);
    END;

    [External]
    PROCEDURE Finish@16();
    VAR
      ErrorMessage@1000 : Text[250];
    BEGIN
      IF GetLastError(ErrorMessage) <> 0 THEN BEGIN
        IF GUIALLOWED THEN
          ERROR('');
        ERROR(ErrorMessage);
      END;
      PopContext;
    END;

    [External]
    PROCEDURE ThrowError@22(ContextErrorMessage@1000 : Text;DetailedErrorMessage@1001 : Text);
    BEGIN
      IF NOT IsActive THEN
        ERROR(JoinedErr,ContextErrorMessage,DetailedErrorMessage);
    END;

    [Integration]
    LOCAL PROCEDURE OnFindActiveSubscriber@9(VAR IsFound@1000 : Boolean);
    BEGIN
    END;

    [External]
    PROCEDURE GetFieldNo@13(TableNo@1000 : Integer;FieldName@1001 : Text) : Integer;
    VAR
      Field@1002 : Record 2000000041;
    BEGIN
      Field.SETRANGE(TableNo,TableNo);
      Field.SETRANGE(FieldName,FieldName);
      IF Field.FINDFIRST THEN
        EXIT(Field."No.");
    END;

    [External]
    PROCEDURE FindFirstErrorMessage@15(VAR ErrorMessage@1000 : Text[250]) IsFound : Boolean;
    BEGIN
      OnFindFirstErrorMessage(ErrorMessage,IsFound);
    END;

    [Integration]
    LOCAL PROCEDURE OnFindFirstErrorMessage@18(VAR ErrorMessage@1001 : Text[250];VAR IsFound@1000 : Boolean);
    BEGIN
    END;

    [External]
    PROCEDURE GetLastError@17(VAR ErrorMessage@1000 : Text[250]) ID : Integer;
    BEGIN
      OnGetLastErrorID(ID,ErrorMessage);
    END;

    [External]
    PROCEDURE GetLastErrorID@19() ID : Integer;
    VAR
      ErrorMessage@1000 : Text[250];
    BEGIN
      OnGetLastErrorID(ID,ErrorMessage);
    END;

    [Integration]
    LOCAL PROCEDURE OnGetLastErrorID@11(VAR ID@1000 : Integer;VAR ErrorMessage@1001 : Text[250]);
    BEGIN
    END;

    [External]
    PROCEDURE LogError@10(SourceVariant@1002 : Variant;ErrorMessage@1000 : Text;HelpArticleCode@1003 : Code[30]);
    BEGIN
      LogErrorMessage(0,ErrorMessage,SourceVariant,0,HelpArticleCode);
    END;

    [External]
    PROCEDURE LogContextFieldError@14(ContextFieldNo@1001 : Integer;ErrorMessage@1000 : Text;SourceVariant@1002 : Variant;SourceFieldNo@1004 : Integer;HelpArticleCode@1003 : Code[30]);
    BEGIN
      LogErrorMessage(ContextFieldNo,ErrorMessage,SourceVariant,SourceFieldNo,HelpArticleCode);
    END;

    [External]
    PROCEDURE LogErrorMessage@6(ContextFieldNo@1004 : Integer;ErrorMessage@1000 : Text;SourceVariant@1002 : Variant;SourceFieldNo@1001 : Integer;HelpArticleCode@1003 : Code[30]) IsLogged : Boolean;
    BEGIN
      OnLogError(ContextFieldNo,ErrorMessage,SourceVariant,SourceFieldNo,HelpArticleCode,IsLogged);
      IF NOT IsLogged THEN
        ERROR(ErrorMessage);
    END;

    [External]
    PROCEDURE LogSimpleErrorMessage@23(ErrorMessage@1000 : Text) IsLogged : Boolean;
    BEGIN
      OnLogSimpleError(ErrorMessage,IsLogged);
      IF NOT IsLogged THEN
        ERROR(ErrorMessage);
    END;

    [Integration]
    LOCAL PROCEDURE OnLogError@7(ContextFieldNo@1003 : Integer;ErrorMessage@1000 : Text;SourceVariant@1006 : Variant;SourceFieldNo@1005 : Integer;HelpArticleCode@1004 : Code[30];VAR IsLogged@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnLogSimpleError@24(ErrorMessage@1000 : Text;VAR IsLogged@1001 : Boolean);
    BEGIN
    END;

    [External]
    PROCEDURE PopContext@20() ID : Integer;
    BEGIN
      OnPopContext(ID);
    END;

    [Integration]
    LOCAL PROCEDURE OnPopContext@21(VAR ID@1000 : Integer);
    BEGIN
    END;

    [External]
    PROCEDURE PushContext@3(ContextRecIDVariant@1000 : Variant;ContextFieldNo@1002 : Integer;AdditionalInfo@1001 : Text[250]) ID : Integer;
    BEGIN
      OnPushContext(ContextRecIDVariant,ContextFieldNo,AdditionalInfo,ID);
    END;

    [Integration]
    LOCAL PROCEDURE OnPushContext@8(ContextRecIDVariant@1001 : Variant;ContextFieldNo@1002 : Integer;AdditionalInfo@1000 : Text[250];VAR ID@1003 : Integer);
    BEGIN
    END;

    [External]
    PROCEDURE GetHelpCodeForAllowedPostingDate@4() : Code[30];
    BEGIN
      EXIT(AllowedPostingDateTok);
    END;

    [EventSubscriber(Table,1431,OnLoad)]
    LOCAL PROCEDURE OnLoadHelpArticleCodes@2();
    BEGIN
      AddLink(GetHelpCodeForAllowedPostingDate);
    END;

    BEGIN
    END.
  }
}

