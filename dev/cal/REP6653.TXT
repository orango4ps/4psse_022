OBJECT Report 6653 Combine Return Receipts
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.03,4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Sammelgutschrift fÅr Rekl.;
               ENU=Combine Return Receipts;
               NLD=Retourontvangsten combineren;
               NOR=SlÜ sammen retursedler];
    ApplicationArea=#SalesReturnOrder,#PurchReturnOrder;
    ProcessingOnly=Yes;
    UsageCategory=Tasks;
  }
  DATASET
  {
    { 2495;    ;DataItem;SalesOrderHeader    ;
               DataItemTable=Table36;
               DataItemTableView=SORTING(Document Type,Combine Shipments,Bill-to Customer No.)
                                 WHERE(Document Type=CONST(Return Order),
                                       Combine Shipments=CONST(Yes));
               ReqFilterHeadingML=[DEU=Verkaufsreklamation;
                                   ENU=Sales Return Order;
                                   NLD=Verkoopretourorder;
                                   NOR=Ordreretur;
                                   SVE=Fîrs.returorder];
               OnPreDataItem=BEGIN
                               IF PostingDateReq = 0D THEN
                                 ERROR(Text000);
                               IF DocDateReq = 0D THEN
                                 ERROR(Text001);

                               Window.OPEN(
                                 Text002 +
                                 Text003 +
                                 Text004 +
                                 Text005);

                               OnAfterSalesOrderHeaderOnPreDataItem(SalesOrderHeader);
                             END;

               OnAfterGetRecord=BEGIN
                                  CurrReport.LANGUAGE := Language.GetLanguageID("Language Code");

                                  Window.UPDATE(1,"Bill-to Customer No.");
                                  Window.UPDATE(2,"No.");
                                END;

               OnPostDataItem=BEGIN
                                CurrReport.LANGUAGE := GLOBALLANGUAGE;
                                Window.CLOSE;
                                IF SalesHeader."No." <> '' THEN BEGIN // Not the first time
                                  FinalizeSalesInvHeader;
                                  IF NoOfSalesInvErrors = 0 THEN
                                    MESSAGE(Text010,NoOfSalesInv)
                                  ELSE
                                    MESSAGE(Text007,NoOfSalesInvErrors)
                                END ELSE
                                  MESSAGE(Text008);
                              END;

               ReqFilterFields=Sell-to Customer No.,Bill-to Customer No. }

    { 9963;1   ;DataItem;                    ;
               DataItemTable=Table6660;
               DataItemTableView=SORTING(Return Order No.);
               ReqFilterHeadingML=[DEU=Gebuchte RÅcksendungen;
                                   ENU=Posted Return Receipts;
                                   NLD=Geboekte retourontvangsten;
                                   NOR=Bokfõrte retursedler;
                                   SVE=Bokfîrda returinleveranser];
               OnAfterGetRecord=BEGIN
                                  Window.UPDATE(3,"No.");
                                END;

               ReqFilterFields=Posting Date;
               DataItemLink=Return Order No.=FIELD(No.) }

    { 5391;2   ;DataItem;                    ;
               DataItemTable=Table6661;
               DataItemTableView=SORTING(Document No.,Line No.)
                                 WHERE(Return Qty. Rcd. Not Invd.=FILTER(<>0));
               OnAfterGetRecord=VAR
                                  SalesGetReturnReceipts@1001 : Codeunit 6638;
                                BEGIN
                                  IF "Return Qty. Rcd. Not Invd." <> 0 THEN BEGIN
                                    IF "Bill-to Customer No." <> Cust."No." THEN
                                      Cust.GET("Bill-to Customer No.");
                                    IF Cust.Blocked <> Cust.Blocked::All THEN BEGIN
                                      IF ShouldFinalizeSalesInvHeader(SalesOrderHeader,SalesHeader) THEN BEGIN
                                        IF SalesHeader."No." <> '' THEN
                                          FinalizeSalesInvHeader;
                                        InsertSalesInvHeader;
                                        SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
                                        SalesLine.SETRANGE("Document No.",SalesHeader."No.");
                                        SalesLine."Document Type" := SalesHeader."Document Type";
                                        SalesLine."Document No." := SalesHeader."No.";
                                      END;
                                      ReturnRcptLine := "Return Receipt Line";
                                      //ReturnRcptLine.InsertInvLineFromRetRcptLine(SalesLine); //**4PS.o
                                      ReturnRcptLine.InsertInvLineFromRetRcptLine(SalesLine, FALSE); //**4PS.n M28272
                                      IF Type = Type::"Charge (Item)" THEN
                                        SalesGetReturnReceipts.GetItemChargeAssgnt("Return Receipt Line",SalesLine."Qty. to Invoice");
                                    END ELSE
                                      NoOfSalesInvErrors := NoOfSalesInvErrors + 1;
                                  END;
                                END;

               DataItemLink=Document No.=FIELD(No.) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   IF PostingDateReq = 0D THEN
                     PostingDateReq := WORKDATE;
                   IF DocDateReq = 0D THEN
                     DocDateReq := WORKDATE;
                   SalesSetup.GET;
                   CalcInvDisc := SalesSetup."Calc. Inv. Discount";
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DEU=Optionen;
                             ENU=Options;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 1   ;2   ;Field     ;
                  CaptionML=[DEU=Buchungsdatum;
                             ENU=Posting Date;
                             NLD=Boekingsdatum;
                             NOR=Bokfõringsdato;
                             SVE=Bokfîringsdatum];
                  ToolTipML=[DEU=Gibt das Buchungsdatum fÅr die Gutschrift(en) an, die die Stapelverarbeitung erstellt.;
                             ENU=Specifies the posting date for the credit memo(s) that the batch job creates.;
                             NLD=Hiermee wordt de boekingsdatum opgegeven voor de creditnota's die tijdens batchtaak worden gemaakt.;
                             NOR=Angir bokfõringsdatoen for kreditnotaen(e) som opprettes av kjõrselen.];
                  ApplicationArea=#SalesReturnOrder;
                  SourceExpr=PostingDateReq }

      { 4   ;2   ;Field     ;
                  CaptionML=[DEU=Belegdatum;
                             ENU=Document Date;
                             NLD=Documentdatum;
                             NOR=Bilagsdato;
                             SVE=Dokumentdatum];
                  ToolTipML=[DEU=Gibt das Belegdatum fÅr die Gutschrift(en) an, die die Stapelverarbeitung erstellt. Dieses Feld muss ausgefÅllt werden.;
                             ENU=Specifies the document date for the credit memo(s) that the batch job creates. This field must be filled in.;
                             NLD=Hiermee wordt de documentdatum opgegeven voor de creditnota('s) die tijdens batchverwerking worden gemaakt. Dit veld moet worden ingevuld.;
                             NOR=Angir dokumentdatoen for kreditnotaen(e) som kjõrselen lager. Dette feltet mÜ fylles ut.];
                  ApplicationArea=#SalesReturnOrder;
                  SourceExpr=DocDateReq }

      { 2   ;2   ;Field     ;
                  CaptionML=[DEU=Rechnungsrab. berechnen;
                             ENU=Calc. Inv. Discount;
                             NLD=Factuurkorting berekenen;
                             NOR=Beregn fakturarabatt;
                             SVE=BerÑkna fakturarabatt];
                  ToolTipML=[DEU=Gibt an, ob die Rechnungsrabatte automatisch berechnet werden sollen.;
                             ENU=Specifies if you want the invoice discounts calculated automatically.;
                             NLD=Hiermee wordt opgegeven of u wilt dat de factuurkortingen automatisch worden berekend.;
                             NOR=Angir om du vil at fakturarabatten skal beregnes automatisk.];
                  ApplicationArea=#SalesReturnOrder;
                  SourceExpr=CalcInvDisc;
                  OnValidate=BEGIN
                               SalesSetup.GET;
                               SalesSetup.TESTFIELD("Calc. Inv. Discount",FALSE);
                             END;
                              }

      { 3   ;2   ;Field     ;
                  CaptionML=[DEU=Gutschriften buchen;
                             ENU=Post Credit Memos;
                             NLD=Creditnota's boeken;
                             NOR=Bokfõr kreditnotaer];
                  ToolTipML=[DEU=Gibt an, ob die Gutschriften sofort gebucht werden sollen.;
                             ENU=Specifies if you want to have the credit memos posted immediately.;
                             NLD=Hiermee wordt opgegeven of de creditnota's direct moeten worden geboekt.;
                             NOR=Angir om du vil at kreditnotaene skal bokfõres umiddelbart.];
                  ApplicationArea=#SalesReturnOrder;
                  SourceExpr=PostInv }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'DEU=Geben Sie das Buchungsdatum ein.;ENU=Enter the posting date.;NLD=Voer de boekingdatum opnieuw in.;NOR=Angi bokfõringsdatoen.;SVE=Ange bokfîringsdatum.';
      Text001@1001 : TextConst 'DEU=Geben Sie das Belegdatum ein.;ENU=Enter the document date.;NLD=Geef een documentdatum op.;NOR=Angi bilagsdato.';
      Text002@1002 : TextConst 'DEU=Sammelgutschrift fÅr Reklamationen...\\;ENU=Combining return receipts...\\;NLD=Combineren retourontvangsten...\\;NOR=SlÜr sammen  retursedler...\\';
      Text003@1003 : TextConst 'DEU=Debitorennr.        #1##########\;ENU=Customer No.        #1##########\;NLD=Klantnr.            #1##########\;NOR=Kundenr.            #1##########\';
      Text004@1004 : TextConst 'DEU=Reklamationsnr.     #2##########\;ENU=Return Order No.    #2##########\;NLD=Retourordernr.      #2##########\;NOR=Ordrereturnr.       #2##########\';
      Text005@1005 : TextConst 'DEU=RÅcksendungsnr.     #3##########;ENU=Return Receipt No.  #3##########;NLD=Retourontvangstnr.  #3##########;NOR=Returseddelnr.      #3##########';
      Text007@1006 : TextConst 'DEU=Es wurden nicht alle Gutschriften gebucht. %1 Gutschriften wurden nicht gebucht.;ENU=Not all the credit memos were posted. A total of %1 credit memos were not posted.;NLD=Niet alle creditnota''s werden geboekt. In totaal werden %1 creditnota''s niet geboekt.;NOR=Ikke alle kreditnotaene ble bokfõrt. Til sammen %1 kreditnotaer ble ikke bokfõrt.';
      Text008@1007 : TextConst 'DEU=Keine Lieferungen fÅr Sammelgutschrift vorhanden.;ENU=There is nothing to combine.;NLD=Niets te combineren.;NOR=Det finnes ingenting Ü kombinere.';
      Text010@1008 : TextConst 'DEU=Die RÅcksendungen wurden kombiniert. Anzahl der erstellten Gutschriften: %1.;ENU=The return receipts are now combined and the number of credit memos created is %1.;NLD=De retourontvangsten zijn gecombineerd. Het aantal gemaakte creditnota''s is %1.;NOR=Retursedlene er nÜ samlet, og antall opprettede kreditnotaer er %1.';
      SalesHeader@1010 : Record 36;
      SalesLine@1011 : Record 37;
      ReturnRcptLine@1012 : Record 6661;
      SalesSetup@1013 : Record 311;
      Cust@1018 : Record 18;
      Language@1015 : Record 8;
      SalesCalcDisc@1019 : Codeunit 60;
      SalesPost@1020 : Codeunit 80;
      Window@1021 : Dialog;
      PostingDateReq@1022 : Date;
      DocDateReq@1023 : Date;
      CalcInvDisc@1024 : Boolean;
      PostInv@1025 : Boolean;
      NoOfSalesInvErrors@1027 : Integer;
      NoOfSalesInv@1028 : Integer;

    LOCAL PROCEDURE FinalizeSalesInvHeader@2();
    BEGIN
      WITH SalesHeader DO BEGIN
        IF CalcInvDisc THEN
          SalesCalcDisc.RUN(SalesLine);
        FIND;
        COMMIT;
        CLEAR(SalesCalcDisc);
        CLEAR(SalesPost);
        NoOfSalesInv := NoOfSalesInv + 1;
        IF PostInv THEN BEGIN
          CLEAR(SalesPost);
          IF NOT SalesPost.RUN(SalesHeader) THEN
            NoOfSalesInvErrors := NoOfSalesInvErrors + 1;
        END;
      END;
    END;

    LOCAL PROCEDURE InsertSalesInvHeader@1();
    BEGIN
      WITH SalesHeader DO BEGIN
        INIT;
        "Document Type" := "Document Type"::"Credit Memo";
        "No." := '';
        OnBeforeSalesCrMemoHeaderInsert(SalesHeader,SalesOrderHeader);
        INSERT(TRUE);
        VALIDATE("Sell-to Customer No.",SalesOrderHeader."Bill-to Customer No.");
        IF "Bill-to Customer No." <> "Sell-to Customer No." THEN
          VALIDATE("Bill-to Customer No.",SalesOrderHeader."Bill-to Customer No.");
        VALIDATE("Posting Date",PostingDateReq);
        VALIDATE("Document Date",DocDateReq);
        VALIDATE("Currency Code",SalesOrderHeader."Currency Code");
        "Shortcut Dimension 1 Code" := SalesOrderHeader."Shortcut Dimension 1 Code";
        "Shortcut Dimension 2 Code" := SalesOrderHeader."Shortcut Dimension 2 Code";
        "Dimension Set ID" := SalesOrderHeader."Dimension Set ID";
        OnBeforeSalesCrMemoHeaderModify(SalesHeader,SalesOrderHeader);
        MODIFY;
        COMMIT;
      END;
    END;

    [External]
    PROCEDURE InitializeRequest@4(NewPostingDate@1000 : Date;NewDocumentDate@1001 : Date;NewCalcInvDisc@1002 : Boolean;NewPostCreditMemo@1003 : Boolean);
    BEGIN
      PostingDateReq := NewPostingDate;
      DocDateReq := NewDocumentDate;
      CalcInvDisc := NewCalcInvDisc;
      PostInv := NewPostCreditMemo;
    END;

    LOCAL PROCEDURE ShouldFinalizeSalesInvHeader@12(SalesOrderHeader@1000 : Record 36;SalesHeader@1001 : Record 36) Finalize : Boolean;
    BEGIN
      Finalize :=
        (SalesOrderHeader."Bill-to Customer No." <> SalesHeader."Bill-to Customer No.") OR
        (SalesOrderHeader."Currency Code" <> SalesHeader."Currency Code") OR
        (SalesOrderHeader."Dimension Set ID" <> SalesHeader."Dimension Set ID");

      OnAfterShouldFinalizeSalesInvHeader(SalesOrderHeader,SalesHeader,Finalize);
      EXIT(Finalize);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSalesOrderHeaderOnPreDataItem@3(VAR SalesOrderHeader@1000 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterShouldFinalizeSalesInvHeader@11(VAR SalesOrderHeader@1000 : Record 36;SalesHeader@1001 : Record 36;VAR Finalize@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeSalesCrMemoHeaderInsert@6(VAR SalesHeader@1000 : Record 36;SalesOrderHeader@1001 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeSalesCrMemoHeaderModify@5(VAR SalesHeader@1000 : Record 36;SalesOrderHeader@1001 : Record 36);
    BEGIN
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

