OBJECT Table 11012991 Sales Rental Appointment
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnDelete=BEGIN
               IF "Extra Comment ID" <> '' THEN BEGIN
                 CommentLine.SETRANGE("Table Name",CommentLine."Table Name"::"Sales Appointment");
                 CommentLine.SETRANGE("No.", "Extra Comment ID");
                 CommentLine.DELETEALL;
               END;
             END;

    CaptionML=[ENU=Sales Rental Appointment;
               NOR=Salg, Leieavtale;
               SVE=M”te, uthyrning (f”rs„ljning)];
  }
  FIELDS
  {
    { 5   ;   ;Document Type       ;Option        ;CaptionML=[ENU=Document Type;
                                                              NOR=Dokumenttype;
                                                              SVE=Dokumenttyp];
                                                   OptionCaptionML=[ENU=Quote,Order;
                                                                    NOR=Tilbud,Ordre;
                                                                    SVE=Offert,Order];
                                                   OptionString=Quote,Order;
                                                   Description=As far as used (only Quote and Order) option values must correspond with those in T36;
                                                   Editable=No }
    { 10  ;   ;Document No.        ;Code20        ;TableRelation="Sales Header".No. WHERE (Document Type=FIELD(Document Type));
                                                   CaptionML=[ENU=Document No.;
                                                              NOR=Dokumentnr.;
                                                              SVE=Dokumentnr];
                                                   Editable=No }
    { 20  ;   ;Date                ;Date          ;CaptionML=[ENU=Date;
                                                              NOR=Dato;
                                                              SVE=Datum];
                                                   Editable=No }
    { 30  ;   ;Type                ;Option        ;CaptionML=[ENU=Type;
                                                              NOR=Radtype;
                                                              SVE=Typ];
                                                   OptionCaptionML=[ENU=Arrival,Removal;
                                                                    NOR=Ankomst,Fjerning;
                                                                    SVE=Ankomst,Bortttagning];
                                                   OptionString=Arrival,Removal;
                                                   Editable=No }
    { 40  ;   ;Plant Location Address Code;Code10 ;OnLookup=VAR
                                                              PlantLocationAddressRec@1100485001 : Record 11012590;
                                                            BEGIN
                                                              GetSalesHeader;
                                                              SalesHeader.TESTFIELD("Plant Location Code");

                                                              PlantLocationAddressRec.CHANGECOMPANY(PlantMgtCompRec.GetPlantCompanySalesRental(TRUE));
                                                              PlantLocationAddressRec.FILTERGROUP(10);
                                                              PlantLocationAddressRec.SETRANGE(Location, SalesHeader."Plant Location Code");
                                                              PlantLocationAddressRec.FILTERGROUP(0);
                                                              PAGE.RUNMODAL(PAGE::"Plant Location Addresses",PlantLocationAddressRec);
                                                            END;

                                                   CaptionML=[ENU=Plant Location Address Code;
                                                              NOR=Adressekode, maskinplassering;
                                                              SVE=Adresskod, Maskinsplats];
                                                   Editable=No }
    { 50  ;   ;Fixed Date          ;Boolean       ;CaptionML=[ENU=Fixed Date;
                                                              NOR=Fast dato;
                                                              SVE=Fast datum] }
    { 60  ;   ;Appointment Time    ;Time          ;CaptionML=[ENU=Appointment Time;
                                                              NOR=M›tetid;
                                                              SVE=M”testid] }
    { 70  ;   ;Appointment Code    ;Code10        ;TableRelation="Logistic Appointment";
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Appointment Description");
                                                              END;

                                                   CaptionML=[ENU=Appointment Code;
                                                              NOR=M›tekode;
                                                              SVE=M”teskod] }
    { 80  ;   ;Appointment Description;Text50     ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Logistic Appointment".Description WHERE (Code=FIELD(Appointment Code)));
                                                   CaptionML=[ENU=Appointment Description;
                                                              NOR=M›tebeskrivelse;
                                                              SVE=M”tesbeskrivning];
                                                   Editable=No }
    { 90  ;   ;Comment             ;Text80        ;CaptionML=[ENU=Comment;
                                                              NOR=Kommentar;
                                                              SVE=Kommentar] }
    { 100 ;   ;Sales Line Removed  ;Boolean       ;CaptionML=[ENU=Sales Line Removed;
                                                              NOR=Salgsrad Fjernet;
                                                              SVE=F”rs„ljningsrad borttagen];
                                                   Editable=No }
    { 110 ;   ;Order(s) Processed  ;Boolean       ;CaptionML=[ENU=Order(s) Processed;
                                                              NOR=Ordre Behandlet;
                                                              SVE=Order behandlad(e)];
                                                   Editable=No }
    { 120 ;   ;Extra Comment ID    ;Code20        ;CaptionML=[ENU=Extra Comment ID;
                                                              NOR=Ekstra kommentar-ID;
                                                              SVE=Extra kommentars-ID];
                                                   SQL Data Type=Variant }
    { 130 ;   ;Extra Comment       ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Comment Line" WHERE (Table Name=CONST(Sales Appointment),
                                                                                           No.=FIELD(Extra Comment ID)));
                                                   CaptionML=[ENU=Extra Comment;
                                                              NOR=Ekstra kommentar;
                                                              SVE=Extra kommentar];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Document Type,Document No.,Date,Type,Plant Location Address Code;
                                                   Clustered=Yes }
    {    ;Extra Comment ID                         }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      PlantMgtCompRec@1100485000 : Record 11020586;
      SalesHeader@1100485001 : Record 36;
      CommentLine@1100485002 : Record 97;

    PROCEDURE EmptyLine@5() : Boolean;
    BEGIN
      EXIT(
        (NOT "Fixed Date") AND ("Appointment Time" = 0T) AND
        ("Appointment Code" = '') AND (Comment = '') );
    END;

    LOCAL PROCEDURE GetSalesHeader@1();
    BEGIN
      TESTFIELD("Document No.");
      IF ("Document No." <> SalesHeader."No.") THEN
        SalesHeader.GET("Document Type","Document No.");
    END;

    PROCEDURE CreateAppointmentsAndRunForm@1100485000(ISalesHeadRec@1100485005 : Record 36);
    VAR
      lvSalesRentalAppointmentRec@1100485004 : Record 11012991;
      lvSalesLine@1100485003 : Record 37;
      lvSalesRentalRemovalLine@1100485002 : Record 11012789;
      lvSalesRentalAppointmentsFrm@1100485008 : Page 11071939;
      lvSalesLineRemoved@1100485001 : Boolean;
      lvAppointsAlreadyPresent@1100485000 : Boolean;
      lvPlantOrderIsProcessed@1100485006 : Boolean;
      lvProcessRemovalLines@1100485007 : Boolean;
    BEGIN
      ISalesHeadRec.TESTFIELD("No.");
      IF ISalesHeadRec."Document Type" > ISalesHeadRec."Document Type"::Order THEN
        ISalesHeadRec.FIELDERROR("Document Type");

      lvSalesRentalAppointmentRec.SETRANGE("Document Type", ISalesHeadRec."Document Type");
      lvSalesRentalAppointmentRec.SETRANGE("Document No.", ISalesHeadRec."No.");
      lvAppointsAlreadyPresent := NOT lvSalesRentalAppointmentRec.ISEMPTY;

      //* Create Appointment Lines Arrival
      lvSalesLine.SETRANGE("Document Type", ISalesHeadRec."Document Type");
      lvSalesLine.SETRANGE("Document No.", ISalesHeadRec."No.");
      lvSalesLine.SETFILTER("Arrival Date", '>%1', 0D);
      lvSalesLine.SETFILTER("Relate to", '<>%1', lvSalesLine."Relate to"::Transport);  //* Not extra transport cost
      IF lvSalesLine.FINDSET THEN BEGIN
        REPEAT
          lvPlantOrderIsProcessed :=
            lvSalesLine.PlantOrderIsProcessed(FALSE) OR
            (ISalesHeadRec.Status = ISalesHeadRec.Status::Released);
          IF NOT lvSalesRentalAppointmentRec.GET(
            ISalesHeadRec."Document Type", ISalesHeadRec."No.",
            lvSalesLine."Arrival Date", lvSalesRentalAppointmentRec.Type::Arrival,
            lvSalesLine."Plant Location Address Code")
          THEN BEGIN
            lvSalesRentalAppointmentRec.INIT;
            lvSalesRentalAppointmentRec."Document Type" := ISalesHeadRec."Document Type";
            lvSalesRentalAppointmentRec."Document No." := ISalesHeadRec."No.";
            lvSalesRentalAppointmentRec.Date := lvSalesLine."Arrival Date";
            lvSalesRentalAppointmentRec.Type := lvSalesRentalAppointmentRec.Type::Arrival;
            lvSalesRentalAppointmentRec."Plant Location Address Code" := lvSalesLine."Plant Location Address Code";
            lvSalesRentalAppointmentRec."Order(s) Processed" := lvPlantOrderIsProcessed;
            lvSalesRentalAppointmentRec.INSERT;
          END ELSE
            IF lvSalesRentalAppointmentRec."Order(s) Processed" <> lvPlantOrderIsProcessed THEN BEGIN
              lvSalesRentalAppointmentRec."Order(s) Processed" := lvPlantOrderIsProcessed;
              lvSalesRentalAppointmentRec.MODIFY;
            END;
        UNTIL lvSalesLine.NEXT = 0;
      END;

      //* Create Appointment Lines Removal
      lvProcessRemovalLines := FALSE;
      IF (ISalesHeadRec."Document Type" = ISalesHeadRec."Document Type"::Order) AND
         (ISalesHeadRec."Sales Document Type" = ISalesHeadRec."Sales Document Type"::"Sales Logistics Separated")
      THEN BEGIN
        lvSalesRentalRemovalLine.SETRANGE("Document No.", ISalesHeadRec."No.");
        IF lvSalesRentalRemovalLine.FINDFIRST THEN
          lvProcessRemovalLines := TRUE;
      END;
      IF NOT lvProcessRemovalLines THEN BEGIN
        lvSalesLine.RESET;
        lvSalesLine.SETRANGE("Document Type", ISalesHeadRec."Document Type");
        lvSalesLine.SETRANGE("Document No.", ISalesHeadRec."No.");
        lvSalesLine.SETFILTER("Removal Date", '>%1', 0D);
        IF lvSalesLine.FINDSET THEN BEGIN
          REPEAT
            IF NOT lvSalesRentalAppointmentRec.GET(
              ISalesHeadRec."Document Type", ISalesHeadRec."No.",
              lvSalesLine."Removal Date", lvSalesRentalAppointmentRec.Type::Removal,
              lvSalesLine."Plant Location Address Code")
            THEN BEGIN
              lvSalesRentalAppointmentRec.INIT;
              lvSalesRentalAppointmentRec."Document Type" := ISalesHeadRec."Document Type";
              lvSalesRentalAppointmentRec."Document No." := ISalesHeadRec."No.";
              lvSalesRentalAppointmentRec.Date := lvSalesLine."Removal Date";
              lvSalesRentalAppointmentRec.Type := lvSalesRentalAppointmentRec.Type::Removal;
              lvSalesRentalAppointmentRec."Plant Location Address Code" := lvSalesLine."Plant Location Address Code";
              lvSalesRentalAppointmentRec."Order(s) Processed" := FALSE;
              lvSalesRentalAppointmentRec.INSERT;
            END;
          UNTIL lvSalesLine.NEXT = 0;
        END;
      END ELSE BEGIN
        lvSalesRentalRemovalLine.RESET;
        lvSalesRentalRemovalLine.SETRANGE("Document No.", ISalesHeadRec."No.");
        lvSalesRentalRemovalLine.SETFILTER("Removal Date", '>%1', 0D);
        IF lvSalesRentalRemovalLine.FINDSET THEN BEGIN
          REPEAT
            lvPlantOrderIsProcessed :=
              lvSalesRentalRemovalLine.Status = lvSalesRentalRemovalLine.Status::Processed;
            IF NOT lvSalesRentalAppointmentRec.GET(
              ISalesHeadRec."Document Type", ISalesHeadRec."No.",
              lvSalesRentalRemovalLine."Removal Date", lvSalesRentalAppointmentRec.Type::Removal,
              lvSalesRentalRemovalLine."Plant Location Address Code")
            THEN BEGIN
              lvSalesRentalAppointmentRec.INIT;
              lvSalesRentalAppointmentRec."Document Type" := ISalesHeadRec."Document Type";
              lvSalesRentalAppointmentRec."Document No." := ISalesHeadRec."No.";
              lvSalesRentalAppointmentRec.Date := lvSalesRentalRemovalLine."Removal Date";
              lvSalesRentalAppointmentRec.Type := lvSalesRentalAppointmentRec.Type::Removal;
              lvSalesRentalAppointmentRec."Plant Location Address Code" := lvSalesRentalRemovalLine."Plant Location Address Code";
              lvSalesRentalAppointmentRec."Order(s) Processed" := lvPlantOrderIsProcessed;
              lvSalesRentalAppointmentRec.INSERT;
            END ELSE
              IF lvSalesRentalAppointmentRec."Order(s) Processed" <> lvPlantOrderIsProcessed THEN BEGIN
                lvSalesRentalAppointmentRec."Order(s) Processed" := lvPlantOrderIsProcessed;
                lvSalesRentalAppointmentRec.MODIFY;
              END;
          UNTIL lvSalesRentalRemovalLine.NEXT = 0;
        END;
      END;

      //* Mark orphans
      IF lvAppointsAlreadyPresent THEN BEGIN
        lvSalesRentalAppointmentRec.SETRANGE("Document Type", ISalesHeadRec."Document Type");
        lvSalesRentalAppointmentRec.SETRANGE("Document No.", ISalesHeadRec."No.");
        IF lvSalesRentalAppointmentRec.FINDSET(TRUE, FALSE) THEN BEGIN
          REPEAT
            IF lvSalesRentalAppointmentRec.Type = lvSalesRentalAppointmentRec.Type::Arrival THEN BEGIN
              lvSalesLine.RESET;
              lvSalesLine.SETRANGE("Document Type", ISalesHeadRec."Document Type");
              lvSalesLine.SETRANGE("Document No.", ISalesHeadRec."No.");
              lvSalesLine.SETRANGE("Arrival Date", lvSalesRentalAppointmentRec.Date);
              lvSalesLine.SETRANGE("Plant Location Address Code", lvSalesRentalAppointmentRec."Plant Location Address Code");
              lvSalesLineRemoved := lvSalesLine.ISEMPTY;
              IF lvSalesLineRemoved <> lvSalesRentalAppointmentRec."Sales Line Removed" THEN BEGIN
                lvSalesRentalAppointmentRec."Sales Line Removed" := lvSalesLineRemoved;
                lvSalesRentalAppointmentRec.MODIFY;
              END;
            END ELSE BEGIN
              IF NOT lvProcessRemovalLines THEN BEGIN
                lvSalesLine.RESET;
                lvSalesLine.SETRANGE("Document Type", ISalesHeadRec."Document Type");
                lvSalesLine.SETRANGE("Document No.", ISalesHeadRec."No.");
                lvSalesLine.SETRANGE("Removal Date", lvSalesRentalAppointmentRec.Date);
                lvSalesLine.SETRANGE("Plant Location Address Code", lvSalesRentalAppointmentRec."Plant Location Address Code");
                lvSalesLineRemoved := lvSalesLine.ISEMPTY;
                IF lvSalesLineRemoved <> lvSalesRentalAppointmentRec."Sales Line Removed" THEN BEGIN
                  lvSalesRentalAppointmentRec."Sales Line Removed" := lvSalesLineRemoved;
                  lvSalesRentalAppointmentRec.MODIFY;
                END;
              END ELSE BEGIN
                lvSalesRentalRemovalLine.RESET;
                lvSalesRentalRemovalLine.SETRANGE("Document No.", ISalesHeadRec."No.");
                lvSalesRentalRemovalLine.SETRANGE("Removal Date", lvSalesRentalAppointmentRec.Date);
                lvSalesRentalRemovalLine.SETRANGE(
                  "Plant Location Address Code", lvSalesRentalAppointmentRec."Plant Location Address Code");
                lvSalesLineRemoved := lvSalesRentalRemovalLine.ISEMPTY;
                IF lvSalesLineRemoved <> lvSalesRentalAppointmentRec."Sales Line Removed" THEN BEGIN
                  lvSalesRentalAppointmentRec."Sales Line Removed" := lvSalesLineRemoved;
                  lvSalesRentalAppointmentRec.MODIFY;
                END;
              END;
            END;
          UNTIL lvSalesRentalAppointmentRec.NEXT = 0;
        END;
        //* Delete empty orphans
        lvSalesRentalAppointmentRec.RESET;
        lvSalesRentalAppointmentRec.SETRANGE("Document Type", ISalesHeadRec."Document Type");
        lvSalesRentalAppointmentRec.SETRANGE("Document No.", ISalesHeadRec."No.");
        lvSalesRentalAppointmentRec.SETRANGE("Sales Line Removed", TRUE);
        IF lvSalesRentalAppointmentRec.FINDSET(TRUE, FALSE) THEN BEGIN
          REPEAT
            IF lvSalesRentalAppointmentRec.EmptyLine() THEN
              lvSalesRentalAppointmentRec.DELETE;
          UNTIL lvSalesRentalAppointmentRec.NEXT = 0;
        END;
      END;

      COMMIT;
      CLEAR(lvSalesRentalAppointmentRec);
      lvSalesRentalAppointmentRec.FILTERGROUP(10);
      lvSalesRentalAppointmentRec.SETRANGE("Document Type", ISalesHeadRec."Document Type");
      lvSalesRentalAppointmentRec.SETRANGE("Document No.", ISalesHeadRec."No.");
      lvSalesRentalAppointmentRec.FILTERGROUP(0);
      lvSalesRentalAppointmentsFrm.SETTABLEVIEW(lvSalesRentalAppointmentRec);
      IF ISalesHeadRec."Sales Document Type" = ISalesHeadRec."Sales Document Type"::RentalContract THEN
        lvSalesRentalAppointmentsFrm.SetCalledFromRentalContract();
      lvSalesRentalAppointmentsFrm.RUNMODAL;
    END;

    PROCEDURE ShowExtraComments@1100485001();
    VAR
      lvSalesRentalAppointmentRec@1100485001 : Record 11012991;
      lvCommentLine@1100485000 : Record 97;
      lvFormComment@1100485002 : Page 124;
    BEGIN
      IF ("Extra Comment ID" = '') AND NOT "Order(s) Processed" THEN BEGIN
        lvSalesRentalAppointmentRec.SETCURRENTKEY("Extra Comment ID");
        IF lvSalesRentalAppointmentRec.FINDLAST THEN
          "Extra Comment ID" := INCSTR(lvSalesRentalAppointmentRec."Extra Comment ID");
        IF "Extra Comment ID" = '' THEN
          "Extra Comment ID" := '1';
        MODIFY;
        COMMIT;
      END;

      lvCommentLine.SETRANGE("Table Name", lvCommentLine."Table Name"::"Sales Appointment");
      lvCommentLine.SETRANGE("No.", "Extra Comment ID");
      lvFormComment.SETTABLEVIEW(lvCommentLine);
      lvFormComment.EDITABLE(NOT "Order(s) Processed");
      lvFormComment.RUNMODAL;
      CALCFIELDS("Extra Comment");
    END;

    BEGIN
    END.
  }
}

