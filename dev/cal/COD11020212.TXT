OBJECT Codeunit 11020212 ConversionMgt
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1100525001 : TextConst 'DEU=Start;ENU=Start;NLD=Start;NOR=Start;SVE=Starta';
      Text002@1100525000 : TextConst 'DEU=Stopp;ENU=Stop;NLD=Stop;NOR=Stopp;SVE=Stopp';
      Text003@1100525003 : TextConst 'DEU=Geben Sie %1 ein.;ENU=Fill %1.;NLD=Vul %1;NOR=Fyll ut %1.;SVE=Fyll i %1.';
      Text004@1100525004 : TextConst 'DEU=Geben Sie das Buchungsdatum ein.;ENU=Fill Posting Date.;NLD=Vul boekingsdatum.;NOR=Fyll ut Bokfõringsdato.;SVE=Fyll i bokfîringsdatum.';
      Text005@1100525005 : TextConst 'DEU=Geben Sie das Gegenkonto ein.;ENU=Fill Balance Account.;NLD=Vul tegenrekening.;NOR=Fyll ut balansekonto.;SVE=Fyll i balanskonto.';
      Text103@1100525007 : TextConst 'DEU=Alt %1 %2 nicht gefunden;ENU=Old %1 %2 not found;NLD=Oud %1 %2 niet gevonden;NOR=Gammel %1 %2 ikke funnet.;SVE=Gammal %1 %2 hittades inte.';
      Text105@1100525008 : TextConst 'DEU=Anzahl DatensÑtze eingelesen in %1 Tabelle: %2.;ENU=No. of records inserted in %1 table: %2;NLD=Aantal records ingelezen in %1 tabel: %2.;NOR=Antall poster satt inn i tabellen %1: %2;SVE=Antal poster som har infogats i tabellen %1: %2';
      Text106@1100525009 : TextConst 'DEU=%1 nicht gefunden. Code %2. %3 nicht in %4 %5 eingegeben.;ENU=%1 not found. Code %2. %3 not filled in %4 %5.;NLD=%1 niet gevonden. Code %2. %3 niet ingevuld in %4 %5.;NOR=%1 ikke funnet. Kode %2. %3 er ikke fylt ut i %4 %5.;SVE=%1 hittades inte. Kod %2. %3 Ñr inte ifyllt i %4 %5.';
      Text107@1100525010 : TextConst 'DEU=%1 nicht gefunden. Code %2. Kein %3 fÅr Importdatei Zeile %4 erstellt.;ENU=%1 not found. Code %2. No %3 added for import file line %4.;NLD=%1 niet gevonden. Code %2. Geen %3 aangemaakt voor importbestand regel %4.;NOR=%1 ikke funnet. Kode %2. %3 ble ikke lagt til pÜ importer fil-rad %4.;SVE=%1 hittades inte. Kod %2. %3 har inte lagts till pÜ importfilsrad %4.';
      Text108@1100525011 : TextConst 'DEU=%1 nicht gefunden. Code %2. Kein %3 fÅr %4 %5 erstellt.;ENU=%1 not found. Code %2. No %3 added for %4 %5.;NLD=%1 niet gevonden. Code %2. Geen %3 aangemaakt voor %4 %5.;NOR=%1 ikke funnet. Kode %2. %3  ble ikke lagt til for %4 %5.;SVE=%1 hittades inte. Kod %2. %3 har inte lagts till fîr %4 %5.';

    PROCEDURE MakeCommentCode@1100485008(Cde@1100485001 : Code[10];Desc@1100485002 : Text[30]);
    VAR
      lvCommentCode@1100485000 : Record 11020280;
    BEGIN
      IF NOT lvCommentCode.GET(Cde) THEN BEGIN
        lvCommentCode.INIT;
        lvCommentCode.VALIDATE(Code,Cde);
        lvCommentCode.VALIDATE(Description,Desc);
        lvCommentCode.INSERT(TRUE);
      END;
    END;

    PROCEDURE FillComment@1100485004(TableName@1100485000 : Option;"4PSCode"@1100485005 : Code[20];CommentCode@1100485001 : Code[20];Waarde@1100485004 : Text[80]) : Code[20];
    VAR
      lvCommentLineRec@1100485002 : Record 97;
      lvCheckLastCommentLineRec@1100525000 : Record 97;
    BEGIN
      // Check last line no

      lvCheckLastCommentLineRec.SETRANGE("Table Name",TableName);
      lvCheckLastCommentLineRec.SETRANGE("No.","4PSCode");
      IF lvCheckLastCommentLineRec.FINDLAST THEN

      // Fill old code in comment

      lvCommentLineRec.INIT;
      lvCommentLineRec.VALIDATE("Table Name",TableName);
      lvCommentLineRec.VALIDATE("No.","4PSCode");
      lvCommentLineRec.VALIDATE("Comment Code",CommentCode);
      lvCommentLineRec.VALIDATE("Line No.",lvCheckLastCommentLineRec."Line No." + 10);
      lvCommentLineRec.VALIDATE(Comment,Waarde);
      lvCommentLineRec.INSERT;
    END;

    PROCEDURE FillMRKComment@1100525036(TableName@1100485000 : Option;"4PSCode"@1100485005 : Code[20];CommentCode@1100485001 : Code[20];Waarde@1100485004 : Text[80]) : Code[20];
    VAR
      MRKCommentLine@1100485002 : Record 5061;
      LastMRKCommentLine@1100525000 : Record 5061;
    BEGIN
      // Check last line no

      LastMRKCommentLine.SETRANGE("Table Name",TableName);
      LastMRKCommentLine.SETRANGE("No.","4PSCode");
      IF LastMRKCommentLine.FINDLAST THEN

      // Fill old code in comment

      MRKCommentLine.INIT;
      MRKCommentLine.VALIDATE("Table Name",TableName);
      MRKCommentLine.VALIDATE("No.","4PSCode");
      MRKCommentLine.VALIDATE("Comment Code",CommentCode);
      MRKCommentLine.VALIDATE("Line No.",LastMRKCommentLine."Line No." + 10);
      MRKCommentLine.VALIDATE(Comment,Waarde);
      MRKCommentLine.INSERT;
    END;

    PROCEDURE DetermineNewCode@1100485000(LookupNewCodeBln@1100525000 : Boolean;TableName@1100485000 : Option;CommentCode@1100485001 : Code[20];OldNo@1100485003 : Text[80]) : Code[20];
    VAR
      CommentLine@1100485002 : Record 97;
    BEGIN
      // To find 4PS code by old code.
      IF LookupNewCodeBln THEN BEGIN
        CommentLine.SETCURRENTKEY(Comment);
        CommentLine.SETRANGE("Table Name",TableName);
        CommentLine.SETRANGE("Comment Code",CommentCode);
        CommentLine.SETRANGE(Comment,OldNo);
        IF CommentLine.FINDFIRST THEN
          EXIT(CommentLine."No.")
        ELSE
          EXIT('');
      END ELSE
        EXIT(OldNo);
    END;

    PROCEDURE DetermineNewMRKCode@1100525049(LookupNewCodeBln@1100525000 : Boolean;TableName@1100485000 : Option;CommentCode@1100485001 : Code[20];OldNo@1100485003 : Text[80]) : Code[20];
    VAR
      MRKCommentLineRec@1100485002 : Record 5061;
    BEGIN
      // To find 4PS code by old code.
      IF LookupNewCodeBln THEN BEGIN
        MRKCommentLineRec.SETRANGE("Table Name",TableName);
        MRKCommentLineRec.SETRANGE("Comment Code",CommentCode);
        MRKCommentLineRec.SETRANGE(Comment,OldNo);
        IF MRKCommentLineRec.FINDFIRST THEN
          EXIT(MRKCommentLineRec."No.")
        ELSE
          EXIT('');
      END ELSE
        EXIT(OldNo);
    END;

    PROCEDURE DeleteComments@1100485002(TableName@1100485000 : Option;CommentCode@1100485001 : Code[20]) : Code[20];
    VAR
      lvCommentLineRec@1100485002 : Record 97;
    BEGIN
      // When 'DELETE (TRUE)' IS NOT POSSIBLE, for instance due to status Job/ServiceContract.

      lvCommentLineRec.SETRANGE("Table Name",TableName);
      lvCommentLineRec.SETRANGE("Comment Code",CommentCode);
      IF lvCommentLineRec.FIND('-') THEN
        lvCommentLineRec.DELETEALL;
    END;

    PROCEDURE DeleteContactsCompany@1100525039();
    VAR
      Contact@1100525000 : Record 5050;
    BEGIN
      Contact.SETRANGE(Type,Contact.Type::Company);
      Contact.SETFILTER("Telex No.",'<>%1','');
      IF Contact.FIND('-') THEN
        Contact.DELETEALL(TRUE);
    END;

    PROCEDURE DeleteCustomersAndContacts@1100485001();
    VAR
      lvCustomerRec@1100485000 : Record 18;
      lvBusRelRec@1100485001 : Record 5054;
      lvContactRec@1100485002 : Record 5050;
    BEGIN
      // Delete conversion customer: Contact has to be deleted as well

      lvCustomerRec.SETFILTER("Telex No.",'<>%1','');
      IF lvCustomerRec.FIND('-') THEN
        REPEAT
          lvBusRelRec.SETCURRENTKEY("Link to Table");
          lvBusRelRec.SETRANGE("Link to Table",lvBusRelRec."Link to Table"::Customer);
          lvBusRelRec.SETRANGE("No.",lvCustomerRec."No.");
          IF lvBusRelRec.FIND('-') THEN
            REPEAT
              IF lvContactRec.GET(lvBusRelRec."Contact No.") THEN
                lvContactRec.DELETE(TRUE);
            UNTIL lvBusRelRec.NEXT = 0;
          lvCustomerRec.DELETE(TRUE);
        UNTIL lvCustomerRec.NEXT = 0;
    END;

    PROCEDURE DeleteVendorsAndContacts@1100485010();
    VAR
      lvVendorRec@1100485000 : Record 23;
      lvBusRelRec@1100485001 : Record 5054;
      lvContactRec@1100485002 : Record 5050;
    BEGIN
      // Delete conversion vendor: Contact has to be deleted as well

      lvVendorRec.SETFILTER("Telex No.",'<>%1','');
      IF lvVendorRec.FIND('-') THEN
        REPEAT
          lvBusRelRec.SETCURRENTKEY("Link to Table");
          lvBusRelRec.SETRANGE("Link to Table",lvBusRelRec."Link to Table"::Vendor);
          lvBusRelRec.SETRANGE("No.",lvVendorRec."No.");
          IF lvBusRelRec.FIND('-') THEN
            REPEAT
              IF lvContactRec.GET(lvBusRelRec."Contact No.") THEN
                lvContactRec.DELETE(TRUE);
            UNTIL lvBusRelRec.NEXT = 0;
          lvVendorRec.DELETE(TRUE);
        UNTIL lvVendorRec.NEXT = 0;
    END;

    PROCEDURE DeleteEmployeesAndContacts@1100525002();
    VAR
      lvContactSetupRec@1100525000 : Record 5079;
      lvEmployeeRec@1100525001 : Record 5200;
      lvDelBusinessRelationRec@1100525002 : Record 5054;
      lvDelContactRec@1100525003 : Record 5050;
    BEGIN
      // Delete all employees: Contacts has to be deleted ass well

      lvContactSetupRec.GET;

      IF lvEmployeeRec.FIND('-') THEN
        REPEAT
          IF lvContactSetupRec."Bus. Rel. Code for Employees" <> '' THEN BEGIN
            lvDelBusinessRelationRec.SETCURRENTKEY("Business Relation Code");
            lvDelBusinessRelationRec.SETRANGE("Business Relation Code",lvContactSetupRec."Bus. Rel. Code for Employees");
            IF lvDelBusinessRelationRec.FIND('-') THEN
              REPEAT
                lvDelContactRec.GET(lvDelBusinessRelationRec."Contact No.");
                lvDelContactRec.DELETE(TRUE);
              UNTIL lvDelBusinessRelationRec.NEXT = 0;
          END;
          lvEmployeeRec.DELETE(TRUE);
        UNTIL lvEmployeeRec.NEXT = 0;
    END;

    PROCEDURE "DeleteContact(person)"@1100485009();
    VAR
      lvContactRec@1100485000 : Record 5050;
    BEGIN
      // Delete conversion contact persons

      lvContactRec.SETFILTER("Telex No.",'%1','*');
      lvContactRec.SETRANGE(Type,lvContactRec.Type::Person);
      IF lvContactRec.FIND('-') THEN
        lvContactRec.DELETEALL(TRUE);
    END;

    PROCEDURE DeleteServiceContracts@1100485005();
    VAR
      lvContractRec@1100485000 : Record 11012812;
    BEGIN
      // All contracts will be deleted before conversion

      lvContractRec.DELETEALL;
    END;

    PROCEDURE DeleteServiceLocations@1100485006();
    VAR
      lvDeleteLocationRec@1100485001 : Record 11012801;
    BEGIN
      // All Locations will be deleted before conversion

      lvDeleteLocationRec.DELETEALL;
    END;

    PROCEDURE DeleteAllItemsExcDefaultItem@1100525003();
    VAR
      lvInvSetupRec@1100525001 : Record 313;
      lvItemRec@1100525000 : Record 27;
    BEGIN
      // Delete All items except Default Item
      lvInvSetupRec.GET;

      IF lvInvSetupRec."Default Item" <> '' THEN
        lvItemRec.SETFILTER("No.",'<>%1',lvInvSetupRec."Default Item");
      IF lvItemRec.FINDFIRST THEN
        lvItemRec.DELETEALL(TRUE);
    END;

    PROCEDURE DeleteGenJnlLines@1100525007(lvTempl@1100525001 : Code[20];lvBatch@1100525000 : Code[20]);
    VAR
      lvGenJnlLineRec@1100525002 : Record 81;
    BEGIN
      lvGenJnlLineRec.SETRANGE("Journal Template Name",lvTempl);
      lvGenJnlLineRec.SETRANGE("Journal Batch Name",lvBatch);
      IF lvGenJnlLineRec.FINDFIRST THEN
        lvGenJnlLineRec.DELETEALL;
    END;

    PROCEDURE DeleteItemJnlLines@1100525032(lvTempl@1100525001 : Code[20];lvBatch@1100525000 : Code[20]);
    VAR
      lvItemJnlLineRec@1100525002 : Record 83;
    BEGIN
      lvItemJnlLineRec.SETRANGE("Journal Template Name",lvTempl);
      lvItemJnlLineRec.SETRANGE("Journal Batch Name",lvBatch);
      IF lvItemJnlLineRec.FINDFIRST THEN
        lvItemJnlLineRec.DELETEALL;
    END;

    PROCEDURE DeleteStandardObjects@1210190017();
    VAR
      StandardObject@1100525002 : Record 11020334;
    BEGIN
      IF StandardObject.FINDFIRST THEN
        StandardObject.DELETEALL(TRUE);
    END;

    PROCEDURE GetContactNoFromCustNo@1210190058(CustomerNo@1210190001 : Code[20]) : Code[20];
    VAR
      ContactBusinessRelation@1210190000 : Record 5054;
    BEGIN
      ContactBusinessRelation.SETCURRENTKEY("Link to Table");
      ContactBusinessRelation.SETRANGE("Link to Table",ContactBusinessRelation."Link to Table"::Customer);
      ContactBusinessRelation.SETRANGE("No.",CustomerNo);
      IF ContactBusinessRelation.FINDFIRST THEN
        EXIT(ContactBusinessRelation."Contact No.");
    END;

    PROCEDURE GetContactNoFromVendNo@1210190015(VendorNo@1210190002 : Code[20]) : Code[20];
    VAR
      ContactBusinessRelation@1210190000 : Record 5054;
    BEGIN
      ContactBusinessRelation.SETCURRENTKEY("Link to Table");
      ContactBusinessRelation.SETRANGE("Link to Table",ContactBusinessRelation."Link to Table"::Vendor);
      ContactBusinessRelation.SETRANGE("No.",VendorNo);
      IF ContactBusinessRelation.FINDFIRST THEN
        EXIT(ContactBusinessRelation."Contact No.");
    END;

    PROCEDURE AddContactBusinessRelation@1100525042(ContactNo@1100525001 : Code[20];BusinessRelCde@1100525002 : Code[20];LinkToTableOpt@1100525003 : Option;LinkToNo@1100525004 : Code[20]);
    VAR
      ContactBusinessRelation@1100525000 : Record 5054;
    BEGIN
      ContactBusinessRelation.INIT;
      ContactBusinessRelation."Contact No." := ContactNo;
      ContactBusinessRelation."Business Relation Code" := BusinessRelCde;
      ContactBusinessRelation."Link to Table" := LinkToTableOpt;
      ContactBusinessRelation."No." := LinkToNo;
      ContactBusinessRelation.INSERT(TRUE);
    END;

    PROCEDURE AddContactVisitAdres@1210190024(ContactNo@1100485002 : Code[20];PostalAdress@1100485003 : Text[50];PostalAdress2@1100485008 : Text[50];PostalPostCode@1100485004 : Code[20];PostalCity@1100485005 : Text[30];PostalCountry@1100485006 : Text[10]);
    VAR
      Contact@1100485007 : Record 5050;
    BEGIN
      IF Contact.GET(ContactNo) THEN BEGIN
        Contact.VALIDATE("Visit Address",PostalAdress);
        Contact."Visit Address 2" := PostalAdress2;
        Contact."Visit Address Post Code" := PostalPostCode;
        Contact."Visit Address City" := PostCodePresent(PostalPostCode);
        IF Contact."Visit Address City" = '' THEN
          Contact."Visit Address City" := PostalCity;
        Contact."Visit Address Country/Region" := PostalCountry;
        Contact.MODIFY(TRUE);
      END;
    END;

    PROCEDURE AddVendorBankAccount@1210190014(VendorCde@1210190007 : Code[20];BankAccountCde@1210190006 : Code[20];BankAccountNo@1210190005 : Text[30];BlockedAccountBln@1210190004 : Boolean;BankNameTxt@1210190003 : Text[100];BankCityTxt@1210190002 : Text[30];BankCountryCde@1210190008 : Code[10];IBANNoCde@1210190001 : Code[50];SWIFTNoCde@1210190000 : Code[20]);
    VAR
      VendorBankAccount@1100485005 : Record 288;
    BEGIN
      VendorBankAccount.INIT;
      VendorBankAccount.VALIDATE("Vendor No.",VendorCde);
      VendorBankAccount.VALIDATE(Code,BankAccountCde);
      VendorBankAccount.INSERT(TRUE);
      VendorBankAccount.VALIDATE("Bank Account No.",BankAccountNo);
      VendorBankAccount.VALIDATE("B-Account",BlockedAccountBln);

      IF BankNameTxt <> '' THEN
        VendorBankAccount.VALIDATE(Name,BankNameTxt);
      IF BankCityTxt <> '' THEN
        VendorBankAccount.City := BankCityTxt;
      IF BankCountryCde <> '' THEN
        VendorBankAccount.VALIDATE("Country/Region Code",BankCountryCde);

      IF IBANNoCde <> '' THEN
        VendorBankAccount.VALIDATE(IBAN,IBANNoCde);
      IF SWIFTNoCde <> '' THEN
        VendorBankAccount.VALIDATE("SWIFT Code",SWIFTNoCde);

      VendorBankAccount.MODIFY(TRUE);
    END;

    PROCEDURE AddCustomerBankAccount@1210190034(CustomerCde@1210190007 : Code[20];BankAccountCde@1210190006 : Code[20];BankAccountNo@1210190005 : Text[30];BankNameTxt@1210190003 : Text[100];BankCityTxt@1210190002 : Text[30];BankCountryCde@1210190008 : Code[10];IBANNoCde@1210190001 : Code[50];SWIFTNoCde@1210190000 : Code[20]);
    VAR
      CustomerBankAccount@1100485005 : Record 287;
    BEGIN
      CustomerBankAccount.INIT;
      CustomerBankAccount.VALIDATE("Customer No.",CustomerCde);
      CustomerBankAccount.VALIDATE(Code,BankAccountCde);
      CustomerBankAccount.INSERT(TRUE);
      CustomerBankAccount.VALIDATE("Bank Account No.",BankAccountNo);

      IF BankNameTxt <> '' THEN
        CustomerBankAccount.VALIDATE(Name,BankNameTxt);
      IF BankCityTxt <> '' THEN
        CustomerBankAccount.City := BankCityTxt;
      IF BankCountryCde <> '' THEN
        CustomerBankAccount.VALIDATE("Country/Region Code",BankCountryCde);

      IF IBANNoCde <> '' THEN
        CustomerBankAccount.VALIDATE(IBAN,IBANNoCde);
      IF SWIFTNoCde <> '' THEN
        CustomerBankAccount.VALIDATE("SWIFT Code",SWIFTNoCde);

      CustomerBankAccount.MODIFY(TRUE);
    END;

    PROCEDURE PostCodePresent@1100525000(PostCde@1100525000 : Code[20]) CityName : Text[30];
    VAR
      lvPostCodeRec@1100525001 : Record 225;
    BEGIN
      // Postcodes can not be validated all the time. So: if post code is present in 225: Exit first City !?

      lvPostCodeRec.SETRANGE(Code,PostCde);
      IF lvPostCodeRec.FIND('-') THEN
        EXIT(lvPostCodeRec.City)
      ELSE
        EXIT('');
    END;

    PROCEDURE AddDefaultDim@1100525001("TableNo."@1100525000 : Integer;"No."@1100525004 : Code[40];DimensionCde@1100525001 : Code[20];DimensionValueCde@1100525002 : Code[20]);
    VAR
      lvDefaultDimRec@1100525003 : Record 352;
    BEGIN
      lvDefaultDimRec.INIT;
      lvDefaultDimRec.VALIDATE("Table ID","TableNo.");
      lvDefaultDimRec.VALIDATE("No.","No.");
      lvDefaultDimRec.VALIDATE("Dimension Code",DimensionCde);
      lvDefaultDimRec.VALIDATE("Dimension Value Code",DimensionValueCde);
      lvDefaultDimRec.INSERT(TRUE);
    END;

    PROCEDURE Get2BAVendorWithPrefix@1100525004(VendPrefix@1100525002 : Code[10];OldVendCde@1100525000 : Code[15]) : Code[15];
    VAR
      lv2BAVendorRec@1100525001 : Record 11012304;
    BEGIN
      IF lv2BAVendorRec.GET(STRSUBSTNO('%1%2',VendPrefix,OldVendCde)) THEN
        EXIT(lv2BAVendorRec."Alternative Vendor Code")
      ELSE
        EXIT('');
    END;

    PROCEDURE Get2BAVendorWithoutPrefix@1100525006(VendorCde@1100525000 : Code[15]) : Code[15];
    VAR
      lv2BAVendorRec@1100525001 : Record 11012304;
    BEGIN
      IF lv2BAVendorRec.GET(VendorCde) THEN
        EXIT(lv2BAVendorRec.Code)
      ELSE
        EXIT('');
    END;

    PROCEDURE GenerateGenJnlLine@1100485011(lvTemplate@1100525006 : Code[10];lvBatch@1100525007 : Code[10];lvPostingDate@1100525008 : Date;lvDocumentNo@1100525009 : Code[20];lvBalAccNo@1100525000 : Code[20];VAR vGenJnlLineRec@1100525019 : Record 81);
    BEGIN
      CLEAR(vGenJnlLineRec);
      WITH vGenJnlLineRec DO BEGIN
        "Journal Template Name" := lvTemplate;
        "Journal Batch Name" := lvBatch;
        "Line No." := DetermineGenJnllLineNo(lvTemplate,lvBatch);
        INSERT(TRUE);
        VALIDATE("Posting Date",lvPostingDate);
        VALIDATE("Bal. Account No.",lvBalAccNo);
        VALIDATE("Document No.",lvDocumentNo);
        MODIFY(TRUE);
      END;
    END;

    PROCEDURE UpdateWIPGenJnlLine@1100525020(lvSourceType@1100525006 : 'Project,Service';lvSourceNo@1100525003 : Code[20];lvOldSourceNo@1100525016 : Code[20];lvDocument@1100525004 : Code[20];lvDimension@1100525002 : Code[20];lvDescription@1100525005 : Text[50];lvAmount@1100525001 : Decimal;lvHours@1100525000 : Decimal;VAR vGenJnlLineRec@1100525019 : Record 81);
    VAR
      lvDimValueRec@1100525012 : Record 349;
      lvDimMgt@1100525014 : Codeunit 408;
    BEGIN
      IF lvDimension <> '' THEN BEGIN
        IF lvSourceType = lvSourceType::Project THEN
          lvDimMgt.GetDimValueRec(2,lvDimension,lvDimValueRec, TRUE, lvSourceNo)
        ELSE
          lvDimMgt.GetDimValueRec(2,lvDimension,lvDimValueRec, TRUE, '');

        IF lvDimValueRec."Cost Type" = lvDimValueRec."Cost Type"::Revenue THEN
          lvAmount := lvAmount * -1;
      END;

      WITH vGenJnlLineRec DO BEGIN
        CASE lvSourceType OF
          lvSourceType::Project:
            BEGIN
              IF IsProjectPresent(lvSourceNo) THEN
                VALIDATE("Job No.",lvSourceNo)
              ELSE
                "Description 2" := STRSUBSTNO(Text103,
                                              GetTableCaption(11072003),
                                              lvOldSourceNo);
            END;
          lvSourceType::Service:
            BEGIN
              IF IsServiceOrderPresent(lvSourceNo) THEN
                VALIDATE("Service Order No.",lvSourceNo)
              ELSE
                "Description 2" := STRSUBSTNO(Text103,
                                              GetTableCaption(11012823),
                                              lvOldSourceNo);
            END;
        END;

        VALIDATE("Shortcut Dimension 2 Code", lvDimension);
        VALIDATE(Quantity, lvHours);
        VALIDATE(Amount,lvAmount);

        ClearGJNLPostingFields(vGenJnlLineRec);

        IF lvDocument <> '' THEN
          Description := COPYSTR(STRSUBSTNO('%1: %2',lvDocument,lvDescription),1,50)
        ELSE
          Description := COPYSTR(lvDescription,1,50);

        MODIFY;
      END;
    END;

    PROCEDURE DetermineGenJnllLineNo@1100525045(TemplateCde@1100525001 : Code[10];BatchCde@1100525000 : Code[10]) : Integer;
    VAR
      lvCheckLineNoRec@1100525011 : Record 81;
    BEGIN
      lvCheckLineNoRec.SETRANGE("Journal Template Name", TemplateCde);
      lvCheckLineNoRec.SETRANGE("Journal Batch Name", BatchCde);
      IF lvCheckLineNoRec.FINDLAST THEN;
      EXIT(lvCheckLineNoRec."Line No."+10);
    END;

    PROCEDURE ClearGJNLPostingFields@1100525018(VAR GenJnlLineRec@1100525000 : Record 81);
    BEGIN
      WITH GenJnlLineRec DO BEGIN
        VALIDATE("Gen. Posting Type","Gen. Posting Type"::" ");
        VALIDATE("Gen. Bus. Posting Group",' ');
        VALIDATE("Gen. Prod. Posting Group",' ');
        VALIDATE("VAT Bus. Posting Group",' ');
        VALIDATE("VAT Prod. Posting Group",' ');
        VALIDATE("Bal. Gen. Posting Type","Bal. Gen. Posting Type"::" ");
        VALIDATE("Bal. Gen. Bus. Posting Group",' ');
        VALIDATE("Bal. Gen. Prod. Posting Group",' ');
        VALIDATE("Bal. VAT Bus. Posting Group",' ');
        VALIDATE("Bal. VAT Prod. Posting Group",' ');
      END;
    END;

    PROCEDURE GenerateItemJnlLine@1100525034(lvTemplate@1100525006 : Code[10];lvBatch@1100525007 : Code[10];lvPostingDate@1100525008 : Date;lvDocumentNo@1100525009 : Code[20];VAR vItemJnlLineRec@1100525019 : Record 83);
    BEGIN
      CLEAR(vItemJnlLineRec);
      WITH vItemJnlLineRec DO BEGIN
        "Journal Template Name" := lvTemplate;
        "Journal Batch Name" := lvBatch;
        "Line No." := DetermineItemJnllLineNo(lvTemplate,lvBatch);
        INSERT(TRUE);
        VALIDATE("Posting Date",lvPostingDate);
        VALIDATE("Document No.",lvDocumentNo);
        MODIFY(TRUE);
      END;
    END;

    PROCEDURE DetermineItemJnllLineNo@1100525035(TemplateCde@1100525001 : Code[10];BatchCde@1100525000 : Code[10]) : Integer;
    VAR
      lvCheckLineNoRec@1100525011 : Record 83;
    BEGIN
      lvCheckLineNoRec.SETRANGE("Journal Template Name", TemplateCde);
      lvCheckLineNoRec.SETRANGE("Journal Batch Name", BatchCde);
      IF lvCheckLineNoRec.FINDLAST THEN;
      EXIT(lvCheckLineNoRec."Line No."+10);
    END;

    PROCEDURE DetermineProjectBudgetLineNo@1100525019(ProjCde@1100525001 : Code[20];AdjCde@1100525000 : Code[20];ExtCde@1100525002 : Code[20];OptionCde@1100525003 : Code[20]) : Integer;
    VAR
      lvBudgetLineRec@1100525011 : Record 11012001;
    BEGIN
      lvBudgetLineRec.SETFILTER("Project No.",'%1',ProjCde);
      lvBudgetLineRec.SETFILTER(Adjustment,'%1',AdjCde);
      lvBudgetLineRec.SETFILTER("Extension Contract",'%1',ExtCde);
      lvBudgetLineRec.SETFILTER(Option,'%1',OptionCde);
      IF lvBudgetLineRec.FINDLAST THEN;
      EXIT(lvBudgetLineRec."Line No."+10);
    END;

    PROCEDURE StripData@1100525010(Type@1100525002 : Text[10];ImportTxt@1100525000 : Text[250];Delstr@1100525001 : Text[30]) : Text[250];
    BEGIN
      CASE Type OF
        'StartEnd':EXIT(DELCHR(ImportTxt,'<>',Delstr));
        'Start':EXIT(DELCHR(ImportTxt,'<',Delstr));
        'End':EXIT(DELCHR(ImportTxt,'>',Delstr));
        'All':EXIT(DELCHR(ImportTxt,'=',Delstr));
      END;
    END;

    PROCEDURE IsEmployeePresent@1100525014(EmplCde@1100525000 : Code[20]) : Boolean;
    VAR
      lvEmployeeRec@1100525002 : Record 5200;
    BEGIN
      EXIT(lvEmployeeRec.GET(EmplCde));
    END;

    PROCEDURE IsEmployeeResource@1100529000(EmplCde@1100525000 : Code[20];VAR ResourceNo@1100529000 : Code[20]) : Boolean;
    VAR
      Resource@1100525002 : Record 11229278;
    BEGIN
      //DP00465
      Resource.SETCURRENTKEY(Type, Company, "Source No.");
      Resource.SETRANGE(Type, Resource.Type::Employee);
      Resource.SETRANGE(Company, COMPANYNAME);
      Resource.SETRANGE("Source No.", EmplCde);
      IF Resource.FINDFIRST THEN
        ResourceNo := Resource."No.";
      EXIT(ResourceNo <> '');
    END;

    PROCEDURE IsSalesPurchasePersonPresent@1100525043(SalesPurchasePersonCde@1100525000 : Code[20]) : Boolean;
    VAR
      lvSalespersonPurchaser@1100525002 : Record 13;
    BEGIN
      EXIT(lvSalespersonPurchaser.GET(SalesPurchasePersonCde));
    END;

    PROCEDURE IsContactPresent@1100525040(ContCde@1100525000 : Code[20]) : Boolean;
    VAR
      lvContactRec@1100525002 : Record 5050;
    BEGIN
      EXIT(lvContactRec.GET(ContCde));
    END;

    PROCEDURE IsCustomerPresent@1100525015(CustCde@1100525000 : Code[20]) : Boolean;
    VAR
      lvCustomerRec@1100525002 : Record 18;
    BEGIN
      EXIT(lvCustomerRec.GET(CustCde));
    END;

    PROCEDURE IsTryOutPresent@1100525041(TryOutCde@1100525000 : Code[20]) : Boolean;
    VAR
      lvTryOutRec@1100525002 : Record 11012750;
    BEGIN
      EXIT(lvTryOutRec.GET(TryOutCde));
    END;

    PROCEDURE IsTryOutQuotePresent@1100525048(TryOutQuoteCde@1100525000 : Code[20]) : Boolean;
    VAR
      lvTryOutQuoteRec@1100525002 : Record 11012758;
    BEGIN
      EXIT(lvTryOutQuoteRec.GET(TryOutQuoteCde));
    END;

    PROCEDURE IsVendorPresent@1100525017(VendCde@1100525000 : Code[20]) : Boolean;
    VAR
      lvVendorRec@1100525002 : Record 23;
    BEGIN
      EXIT(lvVendorRec.GET(VendCde));
    END;

    PROCEDURE IsProjectPresent@1100525031(ProjCde@1100525000 : Code[20]) : Boolean;
    VAR
      lvProjectRec@1100525002 : Record 11072003;
    BEGIN
      EXIT(lvProjectRec.GET(ProjCde));
    END;

    PROCEDURE IsProjectPrincipalPresent@1210190010(ProjCde@1100525000 : Code[20];CustCde@1210190000 : Code[20]) : Boolean;
    VAR
      ProjectPrincipal@1100525002 : Record 11012005;
    BEGIN
      EXIT(ProjectPrincipal.GET(ProjCde,CustCde));
    END;

    PROCEDURE IsProjectExtensionContrPresent@1210190011(ProjCde@1100525000 : Code[20];ContractCde@1210190000 : Code[20]) : Boolean;
    VAR
      ExtensionContract@1100525002 : Record 11012004;
    BEGIN
      EXIT(ExtensionContract.GET(ProjCde,ContractCde));
    END;

    PROCEDURE IsProjectPlotPresent@1210190013(ProjCde@1100525000 : Code[20];PlotCde@1210190000 : Code[20]) : Boolean;
    VAR
      Plot@1100525002 : Record 11012500;
    BEGIN
      EXIT(Plot.GET(ProjCde,PlotCde));
    END;

    PROCEDURE IsProjectElementPresent@1100525033(JobCde@1100525001 : Code[20];ElementCde@1100525002 : Code[20]) : Boolean;
    VAR
      lvProjectElementRec@1100525000 : Record 11012010;
    BEGIN
      EXIT(lvProjectElementRec.GET(JobCde,ElementCde));
    END;

    PROCEDURE IsServiceContractPresent@1100525016(ContractCde@1100525000 : Code[20]) : Boolean;
    VAR
      lvServiceContractRec@1100525002 : Record 11012812;
    BEGIN
      EXIT(lvServiceContractRec.GET(ContractCde));
    END;

    PROCEDURE IsServiceLocationPresent@1100525022(LocationCde@1100525000 : Code[20]) : Boolean;
    VAR
      lvServiceLocationRec@1100525002 : Record 11012801;
    BEGIN
      EXIT(lvServiceLocationRec.GET(LocationCde));
    END;

    PROCEDURE IsServiceOrderPresent@1100525029(OrderCde@1100525000 : Code[20]) : Boolean;
    VAR
      lvServiceOrderRec@1100525002 : Record 11012823;
    BEGIN
      EXIT(lvServiceOrderRec.GET(OrderCde));
    END;

    PROCEDURE IsStandardObjectPresent@1100529900(StdObjCde@1100529901 : Code[20]) : Boolean;
    VAR
      StandardObject@1100529900 : Record 11020334;
    BEGIN
      EXIT(StandardObject.GET(StdObjCde));
    END;

    PROCEDURE IsObjectPresent@1100529901(ObjCde@1100529901 : Code[20]) : Boolean;
    VAR
      ServiceObject@1100529900 : Record 11071691;
    BEGIN
      EXIT(ServiceObject.GET(ObjCde));
    END;

    PROCEDURE IsTradeItemPresent@1100525009(VendCde@1100525000 : Code[20];ItemCde@1100525001 : Code[20]) : Boolean;
    VAR
      lvTradeItemRec@1100525002 : Record 11012317;
    BEGIN
      EXIT(lvTradeItemRec.GET(VendCde,ItemCde));
    END;

    PROCEDURE IsItemPresent@1100525011(ItemCde@1100525001 : Code[20]) : Boolean;
    VAR
      lvItemRec@1100525000 : Record 27;
    BEGIN
      EXIT(lvItemRec.GET(ItemCde));
    END;

    PROCEDURE IsContractInServiceorder@1100525030(OrderCde@1100525001 : Code[20]) : Boolean;
    VAR
      lvServiceOrderRec@1100525000 : Record 11012823;
    BEGIN
      lvServiceOrderRec.GET(OrderCde);
      EXIT(lvServiceOrderRec."Service Contract No." <> '')
    END;

    PROCEDURE CreateConComment@1100525012(dpNo@1100525000 : Integer;CommentTxt@1100525001 : Text[250]);
    VAR
      LastCommentLineRec@1100525002 : Record 11020590;
      NewCommentLineRec@1100525003 : Record 11020590;
      Text001@1100525004 : TextConst 'DEU=Start;ENU=Start;NLD=Start;NOR=Start;SVE=Starta';
      Text002@1100525005 : TextConst 'DEU=Stopp;ENU=Stop;NLD=Stop;NOR=Stopp;SVE=Stopp';
    BEGIN
      LastCommentLineRec.SETRANGE("XMLPort No.",dpNo);
      LastCommentLineRec.SETRANGE("Type of Comment",NewCommentLineRec."Type of Comment"::"Import Message");
      IF LastCommentLineRec.FINDLAST THEN;

      NewCommentLineRec.INIT;
      NewCommentLineRec."XMLPort No." := dpNo;
      NewCommentLineRec.VALIDATE("Type of Comment",NewCommentLineRec."Type of Comment"::"Import Message");
      NewCommentLineRec."Line No." := LastCommentLineRec."Line No." + 10;
      CASE CommentTxt OF
        'Start': NewCommentLineRec.Comment := Text001;
        'Stop': NewCommentLineRec.Comment := Text002;
      ELSE
        NewCommentLineRec.Comment := CommentTxt;
      END;
      NewCommentLineRec."Date/Time" := CREATEDATETIME(TODAY,TIME);
      NewCommentLineRec.INSERT;
    END;

    PROCEDURE DeleteConComment@1100525013(dpNo@1100525000 : Integer);
    VAR
      DeleteCommentLineRec@1100525003 : Record 11020590;
    BEGIN
      DeleteCommentLineRec.SETRANGE("XMLPort No.",dpNo);
      DeleteCommentLineRec.SETRANGE("Type of Comment",DeleteCommentLineRec."Type of Comment"::"Import Message");
      IF DeleteCommentLineRec.FINDFIRST THEN
        DeleteCommentLineRec.DELETEALL;
    END;

    PROCEDURE CreateNoOfLinesCommentTxt@1100525025(TableID@1100525001 : Integer;NoOfLines@1100525002 : Integer) : Text[250];
    BEGIN
      EXIT(STRSUBSTNO(Text105,GetTableCaption(TableID),NoOfLines));
    END;

    PROCEDURE CreateFieldNotFilledCommentTxt@1100525026(RelatedTableID@1100525001 : Integer;OldNo@1100525002 : Code[30];FieldCaptionTxt@1100525003 : Text[50];ImportTableID@1100525004 : Integer;ImportKey@1100525005 : Code[50]) : Text[250];
    BEGIN
      // %1[Customer] not found. Old No. %2<OldNo>. %3[Customer No.] not fillen in %4%[Location] %5<New location code>.

      EXIT(STRSUBSTNO(Text106,
        GetTableCaption(RelatedTableID),
        OldNo,
        FieldCaptionTxt,
        GetTableCaption(ImportTableID),
        ImportKey));
    END;

    PROCEDURE CreateNoRecAddedCommentTxt@1100525027(RelatedTableID@1100525001 : Integer;OldNo@1100525002 : Code[30];ImportTableID@1100525004 : Integer;ImpDataTxt@1100525003 : Text[50]) : Text[250];
    BEGIN
      // %1[Location] not found. Old No. %2<OldNo>. No %3[Installation] created for import line %4<importfields>.

      EXIT(STRSUBSTNO(Text107,
        GetTableCaption(RelatedTableID),
        OldNo,
        GetTableCaption(ImportTableID),
        ImpDataTxt));
    END;

    PROCEDURE CreateNoSubRecAddedCommentTxt@1100525037(RelatedTableID@1100525001 : Integer;OldNo@1100525002 : Code[20];SubtableID@1100525005 : Integer;ImportTableID@1100525004 : Integer;ImportKey@1100525003 : Code[30]) : Text[250];
    BEGIN
      // %1[Customer] not found. Old No. %2<OldNo>. No %3[Project principal] created for %4[Project] %5<New Project code>.

      EXIT(STRSUBSTNO(Text108,
        GetTableCaption(RelatedTableID),
        OldNo,
        GetTableCaption(SubtableID),
        GetTableCaption(ImportTableID),
        ImportKey));
    END;

    PROCEDURE CheckTemplateFilled@1100525021(TemplateTableID@1100525004 : Integer;TemplCde@1100525005 : Code[20]);
    BEGIN
      IF TemplCde = '' THEN
        ERROR(STRSUBSTNO(Text003,GetTableCaption(TemplateTableID)));
    END;

    PROCEDURE CheckBatchFilled@1100525044(BatchTableID@1100525004 : Integer;BatchCde@1100525005 : Code[20]);
    BEGIN
      IF BatchCde = '' THEN
        ERROR(STRSUBSTNO(Text003,GetTableCaption(BatchTableID)));
    END;

    PROCEDURE CheckPostingDateFilled@1100525046(PostingDate@1100525005 : Date);
    BEGIN
      IF PostingDate = 0D THEN
        ERROR(Text004);
    END;

    PROCEDURE CheckBalAccountFilled@1100525047(BalAccNo@1100525005 : Code[20]);
    BEGIN
      IF BalAccNo = '' THEN
        ERROR(Text005);
    END;

    PROCEDURE CheckComCde@1100525023(MustCheckBln@1100525000 : Boolean;TableID@1100525002 : Integer;CheckCommCde@1100525001 : Code[10]);
    VAR
      Text01@1100525003 : TextConst 'DEU=Bemerkungscode fÅr Lagerung alte -/ suchen neue %1 muss eingegeben werden.;ENU=Comment Code for storing old /searching new %1 must be filled.;NLD=Commentaarcode voor opslag oude- / zoeken nieuwe %1 moet ingevuld worden.;NOR=Kommentarkode for lagring av gammel /sõk etter ny %1 mÜ fylles ut.;SVE=Kommentarskod fîr lagring av gammal /sîkning av ny %1 mÜste fyllas i.';
    BEGIN
      IF MustCheckBln AND (CheckCommCde = '') THEN BEGIN
        ERROR(Text01,GetTableCaption(TableID));
      END;
    END;

    PROCEDURE GetTableCaption@1100525024(TableID@1100525000 : Integer) : Text[80];
    VAR
      RecRef@1100525001 : RecordRef;
    BEGIN
      RecRef.OPEN(TableID);
      EXIT(RecRef.CAPTION);
    END;

    PROCEDURE CreateContactFeatures@1100525038(TableName@1100525003 : Option;"No."@1100525004 : Code[20];FeatureGroup@1100525000 : Text[50];FeatureCde@1100525001 : Code[20]);
    VAR
      ContactFeatureType@1100525002 : Record 11012753;
    BEGIN
      ContactFeatureType.SETRANGE("Relation Type",TableName);
      ContactFeatureType.SETRANGE(Code,"No.");
      ContactFeatureType.SETRANGE("Feature Group",FeatureGroup);
      IF NOT ContactFeatureType.FINDFIRST THEN
        AddNewContactFeature(TableName,"No.",FeatureGroup,FeatureCde)
      ELSE BEGIN
        IF ContactFeatureType.Feature = '' THEN BEGIN
          ContactFeatureType.VALIDATE(Feature,FeatureCde);
          ContactFeatureType.MODIFY(TRUE);
        END ELSE
          IF ContactFeatureType.Feature <> FeatureCde THEN
            AddNewContactFeature(TableName,"No.",FeatureGroup,FeatureCde);
      END;
    END;

    PROCEDURE AddNewContactFeature@1210190016(TableName@1210190003 : Option;"No."@1210190002 : Code[20];FeatureGroup@1210190001 : Text[50];FeatureCde@1210190000 : Code[20]);
    VAR
      ContactFeatureType@1210190004 : Record 11012753;
    BEGIN
      ContactFeatureType.INIT;
      ContactFeatureType.VALIDATE("Relation Type",TableName);
      ContactFeatureType.VALIDATE(Code,"No.");
      ContactFeatureType.VALIDATE("Feature Group",FeatureGroup);
      ContactFeatureType.VALIDATE("Line No.",DeternmineFeatureLineNo(TableName,"No.",FeatureGroup));
      ContactFeatureType.INSERT(TRUE);
      ContactFeatureType.VALIDATE(Feature,FeatureCde);
      ContactFeatureType.MODIFY(TRUE);
    END;

    PROCEDURE DeternmineFeatureLineNo@1100525051(TableName@1100525003 : Option;"No."@1100525002 : Code[20];FeatureGroup@1100525001 : Text[50]) : Integer;
    VAR
      ContactFeatureType@1100525000 : Record 11012753;
    BEGIN
      ContactFeatureType.SETRANGE("Relation Type",TableName);
      ContactFeatureType.SETRANGE(Code,"No.");
      //ContactFeatureType.SETRANGE("Feature Group",FeatureGroup);
      IF ContactFeatureType.FINDLAST THEN
        EXIT(ContactFeatureType."Line No."+10)
      ELSE
        EXIT(10);
    END;

    PROCEDURE GetFieldNoFromFieldName@1100529903(TableIDInt@1100529900 : Integer;FieldNameTxt@1100529901 : Text[80]) : Integer;
    VAR
      Field@1100529902 : Record 2000000041;
    BEGIN
      Field.SETRANGE(TableNo,TableIDInt);
      Field.SETRANGE(FieldName,FieldNameTxt);
      IF Field.FINDFIRST THEN
        EXIT(Field."No.");
    END;

    PROCEDURE MaintSchemeExist@1100409008(MaintSchemeCde@1100409000 : Code[20]) : Boolean;
    VAR
      MaintenanceScheme@1100409001 : Record 11071745;
    BEGIN
      MaintenanceScheme.SETRANGE(Code,MaintSchemeCde);
      IF MaintenanceScheme.FINDFIRST THEN
        EXIT(TRUE);
    END;

    PROCEDURE ServiceGroupExist@1100409032(ServiceGroupCde@1100409001 : Code[20];CustCde@1100409004 : Code[20]) : Boolean;
    VAR
      ServiceGroup@1100409000 : Record 11012830;
    BEGIN
      ServiceGroup.SETRANGE("No.",ServiceGroupCde);
      IF CustCde <> '' THEN
        ServiceGroup.SETRANGE("Customer No.",CustCde);
      IF ServiceGroup.FINDFIRST THEN
        EXIT(TRUE);
    END;

    PROCEDURE AddServiceGroup@1100409015(ServiceGroupCde@1100409001 : Code[20];CustCde@1100409004 : Code[20];DescriptionTxt@1100409003 : Text[30]);
    VAR
      ServiceGroup@1100409000 : Record 11012830;
    BEGIN
      ServiceGroup.VALIDATE("No.",ServiceGroupCde);
      IF CustCde <> '' THEN
        ServiceGroup.VALIDATE("Customer No.",CustCde);
      ServiceGroup.INSERT(TRUE);
      ServiceGroup.Description := DescriptionTxt;
      ServiceGroup.MODIFY(TRUE);
    END;

    PROCEDURE AddMaintScheme@1100409030(SchemeCde@1100409000 : Code[20];DescriptionTxt@1100409001 : Text[50]);
    VAR
      MaintenanceScheme@1100409002 : Record 11071745;
    BEGIN
      MaintenanceScheme.VALIDATE(Code,SchemeCde);
      MaintenanceScheme.INSERT(TRUE);
      MaintenanceScheme.VALIDATE(Description,DescriptionTxt);
      MaintenanceScheme.MODIFY(TRUE);
    END;

    PROCEDURE AddMaintSchemeVersion@1100409014(TypeOpt@1100409004 : Option;SchemeCde@1100409000 : Code[20];ObjectCde@1100409002 : Code[20];IndexDate@1100409003 : Date);
    VAR
      MaintenanceSchemeVersion@1100409001 : Record 11071743;
    BEGIN
      MaintenanceSchemeVersion.VALIDATE("Line Type",TypeOpt);

      IF ObjectCde <> '' THEN BEGIN
        MaintenanceSchemeVersion.Code := ObjectCde;
        MaintenanceSchemeVersion."Belongs to Scheme" := SchemeCde;
      END ELSE
        MaintenanceSchemeVersion.Code := SchemeCde;

      MaintenanceSchemeVersion."Index Date" := IndexDate;
      IF MaintenanceSchemeVersion.INSERT(TRUE) THEN;
    END;

    PROCEDURE MaintSchemeVersionExist@1100409001(TypeOpt@1100409004 : Option;SchemeCde@1100409000 : Code[20];ObjectCde@1100409002 : Code[20];IndexDate@1100409003 : Date) : Boolean;
    VAR
      MaintenanceSchemeVersion@1100409001 : Record 11071743;
    BEGIN
      MaintenanceSchemeVersion.SETRANGE("Line Type",TypeOpt);

      IF ObjectCde <> '' THEN BEGIN
        MaintenanceSchemeVersion.SETRANGE(Code,ObjectCde);
        MaintenanceSchemeVersion.SETRANGE("Belongs to Scheme",SchemeCde);
      END ELSE
        MaintenanceSchemeVersion.SETRANGE(Code,SchemeCde);

      MaintenanceSchemeVersion.SETRANGE("Index Date",IndexDate);
      IF MaintenanceSchemeVersion.FINDFIRST THEN
        EXIT(TRUE);
    END;

    PROCEDURE AddCustomerCreditLimit@1100409000(CustomerCde@1100409000 : Code[20];LimitAmount@1100409001 : Decimal);
    VAR
      CreditLimitbyDate@1100409002 : Record 11071869;
    BEGIN
      CreditLimitbyDate.INIT;
      CreditLimitbyDate.VALIDATE("Customer No.",CustomerCde);
      CreditLimitbyDate.VALIDATE("Start Date",TODAY);
      CreditLimitbyDate.VALIDATE("Credit Limit (LCY)",LimitAmount);
      CreditLimitbyDate.INSERT(TRUE);
    END;

    PROCEDURE CheckIBAN@1(IBANCode@1000 : Code[100]) : Boolean;
    VAR
      SourceIBANCode@1100409000 : Code[100];
      Modulus97@1001 : Integer;
      I@1002 : Integer;
      IBANisValid@1100525000 : Boolean;
      CompanyInfo@1100525001 : Record 79;
    BEGIN
      IF IBANCode = '' THEN
        EXIT;
      SourceIBANCode := IBANCode; //**4PS.n W055841
      IBANCode := DELCHR(IBANCode);
      Modulus97 := 97;
      IBANisValid := TRUE;
      IF (STRLEN(IBANCode) <= 5) OR (STRLEN(IBANCode) > 34) THEN
        IBANisValid := FALSE;

      CompanyInfo.ConvertIBAN(IBANCode);
      WHILE STRLEN(IBANCode) > 6 DO
        IBANCode := CompanyInfo.CalcModulus(COPYSTR(IBANCode,1,6),Modulus97) + COPYSTR(IBANCode,7);
      EVALUATE(I,IBANCode);
      IF (I MOD Modulus97) <> 1 THEN
        IBANisValid := FALSE;

      EXIT(IBANisValid);
    END;

    BEGIN
    END.
  }
}

