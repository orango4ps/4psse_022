OBJECT Report 11012760 Try-Out Successor Options
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00,4PSSE;
  }
  PROPERTIES
  {
    ProcessingOnly=Yes;
    OnPostReport=BEGIN
                   GenerateEstimate;
                 END;

  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      CaptionML=ENU=Try-Out Successor Options;
    }
    CONTROLS
    {
      { 1100525000;;Container;
                  ContainerType=ContentArea }

      { 1100525001;1;Group  ;
                  CaptionML=[ENU=Copy from;
                             NOR=Kopier fra;
                             SVE=Kopiera fr†n];
                  GroupType=Group }

      { 1100525003;2;Field  ;
                  Name=EstFrom;
                  CaptionML=[ENU=Estimate;
                             NOR=Kalkyle;
                             SVE=Kalkyl];
                  SourceExpr=SrcEstimate."No.";
                  TableRelation=Estimate;
                  OnValidate=BEGIN
                               SrcEstimateValidate;
                             END;

                  OnLookup=BEGIN
                             SrcEstimateLookup;
                           END;
                            }

      { 1100525004;2;Field  ;
                  Name=EstDescFrom;
                  CaptionML=[ENU=Estimate Description;
                             NOR=Kalkylebeskrivelse;
                             SVE=Kalkylbeskrivning];
                  SourceExpr=SrcEstimate.Description;
                  TableRelation=Estimate.Description;
                  Enabled=FALSE;
                  Editable=FALSE }

      { 1100525009;2;Field  ;
                  Name=NormGroupFrom;
                  CaptionML=[ENU=Norm Group;
                             NOR=Normgruppe;
                             SVE=Normgrupp];
                  SourceExpr=SrcEstimate."Norm Group";
                  TableRelation=Sub-Estimate."Norm Group";
                  Enabled=FALSE;
                  Editable=FALSE }

      { 1100525010;2;Field  ;
                  Name=NormGroupSalesFrom;
                  CaptionML=[ENU=Norm Group (Sales);
                             SVE=Kopiera till];
                  SourceExpr=SrcEstimate."Norm Group (Sales)";
                  TableRelation=Sub-Estimate."Norm Group (Sales)";
                  Visible=HideForRAW;
                  Enabled=FALSE;
                  Editable=FALSE }

      { 1100525021;2;Field  ;
                  Name=RateGroupFrom;
                  CaptionML=[ENU=Rate Group;
                             NOR=Kostgruppe;
                             SVE=Kostnadsgrupp];
                  SourceExpr=SrcEstimate."Rate Group";
                  TableRelation=Estimate."Rate Group";
                  Enabled=FALSE;
                  Editable=FALSE }

      { 1100525024;2;Field  ;
                  Name=PurchDiscTermGroup1From;
                  CaptionML=[ENU=Discount Term Group (Customer);
                             NOR=Rabattvilk†rsgruppe (Kunde);
                             SVE=Rabattvillkorsgrupp (kund)];
                  SourceExpr=SrcEstimate."Purch Discount Term Group 1";
                  TableRelation=Estimate."Purch Discount Term Group 1";
                  Enabled=FALSE;
                  Editable=FALSE }

      { 1100525025;2;Field  ;
                  Name=PurchDiscTermGroup2From;
                  CaptionML=[ENU=Discount Term Group (Job);
                             NOR=Rabattvilk†rsgruppe (jobb);
                             SVE=Rabattvillkorsgrupp (jobb)];
                  SourceExpr=SrcEstimate."Purch Discount Term Group 2";
                  TableRelation=Estimate."Purch Discount Term Group 2";
                  Enabled=FALSE;
                  Editable=FALSE }

      { 1100525026;2;Field  ;
                  Name=SalesDiscTermGroup1From;
                  CaptionML=[ENU=Sales Discount Term Group (Customer);
                             NOR=Salg, rabattvilk†rsgruppe (Kunde);
                             SVE=F”rs„ljning, rabattvillkorsgrupp (kund)];
                  SourceExpr=SrcEstimate."Sales Discount Term Group 1";
                  TableRelation=Estimate."Sales Discount Term Group 1";
                  Visible=HideForRAW;
                  Enabled=FALSE;
                  Editable=FALSE }

      { 1100525027;2;Field  ;
                  Name=SalesDiscTermGroup2From;
                  CaptionML=[ENU=Sales Discount Term Group (Job);
                             NOR=Salg, Rabattvilk†rsgruppe (Jobb);
                             SVE=F”rs„ljning, rabattvillkorsgrupp (jobb)];
                  SourceExpr=SrcEstimate."Sales Discount Term Group 2";
                  TableRelation=Estimate."Sales Discount Term Group 2";
                  Visible=HideForRAW;
                  Enabled=FALSE;
                  Editable=FALSE }

      { 1100528501;2;Field  ;
                  Name=CopySumSheet;
                  CaptionML=[ENU=Copy Summary Sheet from;
                             SVE=Kopiera sammandragsark fr†n];
                  OptionCaptionML=[ENU=Original Estimate,Estimate Source,Not applicable;
                                   SVE=Ursprunglig kalkyl,Kalkyl Í k„lla,Ej till„mpligt];
                  Description=C050838;
                  SourceExpr=CopySumSheet;
                  Importance=Additional;
                  Visible=HideForRAW;
                  OnValidate=BEGIN
                               //C050838
                               IF CopySumSheet = CopySumSheet::EstFrom THEN
                                 SrcEstimate.TESTFIELD("No.");
                               SourceSumSheetEditable := (CopySumSheet = CopySumSheet::Source);
                               IF SourceSumSheetEditable = FALSE THEN BEGIN
                                 SourceSumSheet := SourceSumSheet::" ";
                                 GetDefaultSummary(SrcEstimate,Customer,DstEstimate);
                               END;
                             END;
                              }

      { 1100528502;2;Field  ;
                  Name=SourceSumSheet;
                  CaptionML=ENU=Source (Setup);
                  OptionCaptionML=ENU=" ,Estimate Setup,Estimate,Customer";
                  Description=C050838;
                  SourceExpr=SourceSumSheet;
                  Importance=Additional;
                  Visible=HideForRAW;
                  Editable=SourceSumSheetEditable;
                  OnValidate=BEGIN
                               //C050838
                               IF SourceSumSheet = SourceSumSheet::Estimate THEN
                                 SrcEstimate.TESTFIELD("No.");
                               IF SourceSumSheet = SourceSumSheet::" " THEN BEGIN
                                 IF SrcEstimate."No." <> '' THEN
                                   CopySumSheet := CopySumSheet::EstFrom
                                 ELSE
                                   CopySumSheet := CopySumSheet::Empty;
                               END;
                               GetDefaultSummary(SrcEstimate,Customer,DstEstimate);
                             END;
                              }

      { 1100528503;2;Field  ;
                  Name=EstimateSource;
                  CaptionML=[ENU=Estimate Source;
                             SVE=Kalkyl Í k„lla];
                  SourceExpr=EstimateSource;
                  Importance=Additional;
                  Visible=HideForRAW;
                  Editable=FALSE }

      { 1100528504;2;Field  ;
                  Name=SummaryCost;
                  CaptionML=[ENU=Summary Source (Cost);
                             SVE=Summeringsk„lla (kostnad)];
                  SourceExpr=SummaryCost;
                  Importance=Additional;
                  Visible=HideForRAW;
                  Editable=FALSE }

      { 1100528505;2;Field  ;
                  Name=SummarySales;
                  CaptionML=[ENU=Summary Source (Sales);
                             SVE=Summeringsk„lla (f”rs„ljning)];
                  SourceExpr=SummarySales;
                  Importance=Additional;
                  Visible=HideForRAW;
                  Editable=FALSE }

      { 1100525002;1;Group  ;
                  CaptionML=[ENU=Copy to;
                             NOR=Kopier til;
                             SVE=Kopiera till];
                  GroupType=Group }

      { 1100525007;2;Field  ;
                  Name=NoSeries;
                  AssistEdit=Yes;
                  CaptionML=[ENU=No. Series;
                             NOR=Nr-serie;
                             SVE=Nr-serie];
                  SourceExpr=DstEstimate."No. Series";
                  Editable=FALSE;
                  OnAssistEdit=BEGIN
                                 GetNumberSeries(TRUE);
                               END;
                                }

      { 1100525005;2;Field  ;
                  Name=EstTo;
                  CaptionML=[ENU=Estimate;
                             NOR=Kalkyle;
                             SVE=Kalkyl];
                  SourceExpr=DstEstimate."No.";
                  Editable=NewCodeEditable;
                  OnValidate=BEGIN
                               DstEstimateValidate;
                             END;
                              }

      { 1100525006;2;Field  ;
                  Name=EstDescTo;
                  CaptionML=[ENU=Estimate Description;
                             NOR=Kalkylebeskrivelse;
                             SVE=Kalkylbeskrivning];
                  SourceExpr=DstEstimate.Description }

      { 1100525011;2;Field  ;
                  Name=CustTo;
                  CaptionML=[ENU=Customer No.;
                             NOR=Kundenr;
                             SVE=Kundnr];
                  SourceExpr=Customer."No.";
                  TableRelation=Customer.No.;
                  OnValidate=BEGIN
                               CustomerValidate;
                               CheckCustomerContact(0);
                             END;
                              }

      { 1100525012;2;Field  ;
                  Name=CustNameTo;
                  CaptionML=[ENU=Customer Name;
                             NOR=Kundnavn;
                             SVE=Kundnamn];
                  SourceExpr=Customer.Name;
                  TableRelation=Customer.Name;
                  Enabled=false;
                  Editable=false }

      { 1100525013;2;Field  ;
                  Name=RelationTo;
                  CaptionML=[ENU=Contact;
                             NOR=Kontaktperson;
                             SVE=Kontakt];
                  SourceExpr=Relation."No.";
                  TableRelation=Contact.No.;
                  OnValidate=BEGIN
                               CheckCustomerContact(1);
                             END;

                  OnLookup=BEGIN
                             RelationLookup;
                           END;
                            }

      { 1100525014;2;Field  ;
                  Name=RelationNameTo;
                  CaptionML=[ENU=Contact Name;
                             NOR=Kontaktnavn;
                             SVE=Kontaktnamn];
                  SourceExpr=Relation.Name;
                  TableRelation=Contact.Name;
                  Enabled=false;
                  Editable=false }

      { 1100525015;2;Field  ;
                  Name=ContactTo;
                  CaptionML=[ENU=Contact Person;
                             NOR=Kontaktperson;
                             SVE=Kontaktperson];
                  SourceExpr=Contact."No.";
                  TableRelation=Contact.No.;
                  OnLookup=BEGIN
                             ContactLookup;
                           END;
                            }

      { 1100525016;2;Field  ;
                  Name=ContactNameTo;
                  CaptionML=[ENU=Contact Person Name;
                             NOR=Kontaktpersonens navn;
                             SVE=Kontaktpersonens namn];
                  SourceExpr=Contact.Name;
                  TableRelation=Contact.Name;
                  Enabled=false;
                  Editable=false }

      { 1100528901;2;Field  ;
                  Name=EstimateTemplateTo;
                  CaptionML=ENU=Estimate Template Code;
                  SourceExpr=DstEstimate."Estimate Template Code";
                  TableRelation="Estimate Template".Code;
                  OnValidate=BEGIN
                               ValidateTemplateCode(DstEstimate."Estimate Template Code");  //DP02264
                             END;
                              }

      { 1100525017;2;Field  ;
                  Name=NormGroupTo;
                  CaptionML=[ENU=Norm Group;
                             NOR=Normgruppe;
                             SVE=Normgrupp];
                  SourceExpr=DstEstimate."Norm Group";
                  TableRelation="Norm Group".Code;
                  OnValidate=BEGIN
                               SetDstNormGroup(DstEstimate."Norm Group");
                             END;
                              }

      { 1100525019;2;Field  ;
                  CaptionML=ENU=Norm Group Description;
                  SourceExpr=DstNormGroup.Description;
                  TableRelation="Norm Group".Description;
                  Importance=Additional;
                  Enabled=false;
                  Editable=false }

      { 1100525018;2;Field  ;
                  Name=NormGroupSalesTo;
                  CaptionML=[ENU=Norm Group (Sales);
                             SVE=Kopiera till];
                  SourceExpr=DstEstimate."Norm Group (Sales)";
                  TableRelation="Norm Group".Code;
                  Visible=HideForRAW;
                  OnValidate=BEGIN
                               SetDstNormGroupSales(DstEstimate."Norm Group (Sales)");
                             END;
                              }

      { 1100525020;2;Field  ;
                  CaptionML=[ENU=Norm Group (Sales) Description;
                             SVE=Kopiera fr†n];
                  SourceExpr=DstNormGroupSales.Description;
                  TableRelation="Norm Group".Description;
                  Importance=Additional;
                  Visible=HideForRAW;
                  Enabled=false;
                  Editable=false }

      { 1100525022;2;Field  ;
                  Name=RateGroupTo;
                  CaptionML=[ENU=Rate Group;
                             NOR=Kostgruppe;
                             SVE=Kostnadsgrupp];
                  SourceExpr=DstEstimate."Rate Group";
                  TableRelation="Rate Group".No.;
                  Editable=RateGroupEditable;
                  OnValidate=BEGIN
                               SetDstRateGroup(DstEstimate."Rate Group");
                             END;
                              }

      { 1100525023;2;Field  ;
                  CaptionML=ENU=Rate Group Description;
                  SourceExpr=DstRateGroup.Description;
                  TableRelation="Rate Group".Description;
                  Importance=Additional;
                  Enabled=false;
                  Editable=false }

      { 1100528900;2;Field  ;
                  Name=RefDateRate;
                  CaptionML=[ENU=Reference Date Rates;
                             NOR=Referansedato for satser;
                             SVE=Avgiftsreferensdatum];
                  SourceExpr=RefDateRate;
                  OnValidate=BEGIN
                               IF RefDateRate = 0D THEN
                                 RefDateRate := TODAY;  //DP01931
                             END;
                              }

      { 1100525031;2;Field  ;
                  Name=RefDateItem;
                  CaptionML=[ENU=Reference Date Item Prices;
                             NOR=Referansedato for artikkelpriser;
                             SVE=Referensdatum f”r artikelpriser];
                  SourceExpr=RefDateItem }

      { 1100525032;2;Field  ;
                  Name=PurchDiscTermGroup1To;
                  CaptionML=[ENU=Discount Term Group (Customer);
                             NOR=Rabattvilk†rsgruppe (Kunde);
                             SVE=Rabattvillkorsgrupp (kund)];
                  SourceExpr=DstEstimate."Purch Discount Term Group 1";
                  TableRelation="Discount Term Group".Code WHERE (Level=CONST(Customer));
                  OnValidate=BEGIN
                               SetDstPurchDiscountTermGroup1(DstEstimate."Purch Discount Term Group 1");
                             END;
                              }

      { 1100525034;2;Field  ;
                  CaptionML=[ENU=Discount Term Group Description (Customer);
                             NOR=Beskrivelse av Rabattvilk†rsgruppe (kunde)];
                  SourceExpr=DstPurchDiscountTermGroup1.Description;
                  TableRelation="Discount Term Group".Description;
                  Importance=Additional;
                  Enabled=false;
                  Editable=false }

      { 1100525033;2;Field  ;
                  Name=PurchDiscTermGroup2To;
                  CaptionML=[ENU=Discount Term Group (Job);
                             NOR=Rabattvilk†rsgruppe (jobb);
                             SVE=Rabattvillkorsgrupp (jobb)];
                  SourceExpr=DstEstimate."Purch Discount Term Group 2";
                  TableRelation="Discount Term Group".Code WHERE (Level=CONST(Job));
                  OnValidate=BEGIN
                               SetDstPurchDiscountTermGroup2(DstEstimate."Purch Discount Term Group 2");
                             END;
                              }

      { 1100525035;2;Field  ;
                  CaptionML=[ENU=Discount Term Group Description (Job);
                             NOR=Beskrivelse av rabattvilk†rsgruppe (jobb)];
                  SourceExpr=DstPurchDiscountTermGroup2.Description;
                  TableRelation="Discount Term Group".Description;
                  Importance=Additional;
                  Enabled=false;
                  Editable=false }

      { 1100525036;2;Field  ;
                  Name=SalesDiscTermGroup1To;
                  CaptionML=[ENU=Sales Discount Term Group (Customer);
                             NOR=Salg, rabattvilk†rsgruppe (Kunde);
                             SVE=F”rs„ljning, rabattvillkorsgrupp (kund)];
                  SourceExpr=DstEstimate."Sales Discount Term Group 1";
                  TableRelation="Discount Term Group".Code WHERE (Level=CONST(Customer));
                  Visible=HideForRAW;
                  OnValidate=BEGIN
                               SetDstSalesDiscountTermGroup1(DstEstimate."Sales Discount Term Group 1");
                             END;
                              }

      { 1100525038;2;Field  ;
                  CaptionML=ENU=Sales Discount Term Group Description (Customer);
                  SourceExpr=DstSalesDiscountTermGroup1.Description;
                  TableRelation="Discount Term Group".Description;
                  Importance=Additional;
                  Visible=HideForRAW;
                  Enabled=false;
                  Editable=false }

      { 1100525037;2;Field  ;
                  Name=SalesDiscTermGroup2To;
                  CaptionML=[ENU=Sales Discount Term Group (Job);
                             NOR=Salg, Rabattvilk†rsgruppe (Jobb);
                             SVE=F”rs„ljning, rabattvillkorsgrupp (jobb)];
                  SourceExpr=DstEstimate."Sales Discount Term Group 2";
                  TableRelation="Discount Term Group".Code WHERE (Level=CONST(Job));
                  Visible=HideForRAW;
                  OnValidate=BEGIN
                               SetDstSalesDiscountTermGroup2(DstEstimate."Sales Discount Term Group 2");
                             END;
                              }

      { 1100525039;2;Field  ;
                  CaptionML=ENU=Sales Discount Term Group Description (Job);
                  SourceExpr=DstSalesDiscountTermGroup2.Description;
                  TableRelation="Discount Term Group".Description;
                  Importance=Additional;
                  Visible=HideForRAW;
                  Enabled=false;
                  Editable=false }

      { 1100525040;2;Field  ;
                  Name=SurchargeLabor;
                  CaptionML=[ENU=Surcharge % Labor;
                             NOR=Tilleggsgebyrsprosent, arbeidskraft;
                             SVE=Till„ggsavgiftsprocent, arbetskraft];
                  SourceExpr=SurchargeLaborTo }

      { 1100525041;2;Field  ;
                  Name=SurchargeMaterial;
                  CaptionML=[ENU=Surcharge % Material;
                             NOR=Tilleggsgebyrsprosent, Materiale;
                             SVE=Till„ggsavgiftsprocent, material];
                  SourceExpr=SurchargeMaterialTo }

      { 1100525042;2;Field  ;
                  Name=SurchargeSubcontracting;
                  CaptionML=[ENU=Surcharge % Subcontracting;
                             NOR=Tilleggsgebyrsprosent, underentrepen›r;
                             SVE=Till„ggsavgiftsprocent, underentreprenad];
                  SourceExpr=SurchargeSubcontractingTo }

      { 1100525043;2;Field  ;
                  Name=SurchargePlant;
                  CaptionML=[ENU=Surcharge % Plant;
                             NOR=Tilleggsgebyrsprosent, maskin;
                             SVE=Till„ggsavgiftsprocent, Maskin];
                  SourceExpr=SurchargePlantTo }

      { 1100525044;2;Field  ;
                  Name=SurchargeSundry;
                  CaptionML=[ENU=Surcharge % Sundry;
                             NOR=P†slagssatser, diverse;
                             SVE=Till„ggsavgiftsprocent, diverse];
                  SourceExpr=SurchargeSundryTo;
                  Visible=HideForRAW }

      { 1100528508;2;Field  ;
                  CaptionML=[ENU=Estimate Source;
                             SVE=Kalkyl Í k„lla];
                  SourceExpr=DstEstimate."Estimate Source";
                  Importance=Additional;
                  Visible=HideForRAW;
                  Editable=FALSE }

      { 1100528507;2;Field  ;
                  CaptionML=[ENU=Summary Source (Cost);
                             SVE=Summeringsk„lla (kostnad)];
                  SourceExpr=DstEstimate."Summary Source (Cost)";
                  Importance=Additional;
                  Visible=HideForRAW;
                  Editable=FALSE }

      { 1100528506;2;Field  ;
                  CaptionML=[ENU=Summary Source (Sales);
                             SVE=Summeringsk„lla (f”rs„ljning)];
                  SourceExpr=DstEstimate."Summary Source (Sales)";
                  Importance=Additional;
                  Visible=HideForRAW;
                  Editable=FALSE }

      { 1100525051;1;Group  ;
                  CaptionML=[ENU=Apply;
                             NOR=Koble;
                             SVE=Verkst„ll];
                  GroupType=Group }

      { 1100528500;2;Field  ;
                  Name=CopyRates;
                  CaptionML=ENU=Copy Rates;
                  SourceExpr=CopyRates }

      { 1100525046;2;Field  ;
                  Name=CopyPriceAgreement;
                  CaptionML=[ENU=Copy Price Agreement;
                             NOR=Kopier prisavtale;
                             SVE=Kopiera prisavtal];
                  SourceExpr=CopyPriceAgreement }

      { 1100525045;2;Field  ;
                  Name=InitSalesFromCost;
                  CaptionML=ENU=Initialize Sales From Cost;
                  SourceExpr=InitSalesFromCost;
                  Visible=HideForRAW }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      SrcEstimate@1100525000 : Record 11012151;
      DstEstimate@1100525001 : Record 11012151;
      Customer@1100525003 : Record 18;
      Relation@1100525004 : Record 5050;
      Contact@1100525005 : Record 5050;
      DstNormGroup@1100525006 : Record 11012164;
      DstNormGroupSales@1100525007 : Record 11012164;
      DstRateGroup@1100525008 : Record 11012161;
      DstPurchDiscountTermGroup1@1100525012 : Record 11012338;
      DstPurchDiscountTermGroup2@1100525013 : Record 11012338;
      DstSalesDiscountTermGroup1@1100525014 : Record 11012338;
      DstSalesDiscountTermGroup2@1100525015 : Record 11012338;
      CopyPriceAgreement@1100525020 : Boolean;
      InitSalesFromCost@1100525021 : Boolean;
      ActionType@1100525024 : 'Normal,RAW';
      TryoutSuccessor@1100525025 : Record 11012761;
      Text000@1100525026 : TextConst 'ENU=%1 %2 is created;NOR=%1 %2 er opprettet;SVE=%1 %2 har skapats';
      Tryout@1100525010 : Record 11012750;
      TryoutQuote@1100525002 : Record 11012758;
      Text001@1100525011 : TextConst 'ENU=Estimate already exists;NOR=Kalkylen finnes allerede;SVE=Kalkylen finns redan';
      NewCodeEditable@1100525016 : Boolean INDATASET;
      RateGroupEditable@1100528500 : Boolean INDATASET;
      RefDateRate@1100528501 : Date;
      RefDateItem@1100528502 : Date;
      CopyRates@1100528503 : Boolean;
      CopySumSheet@1100528504 : 'EstFrom,Source,Empty';
      SourceSumSheet@1100528505 : ' ,Setup,Estimate,Customer';
      EstimateSource@1100528506 : Code[20];
      SummaryCost@1100528507 : Code[20];
      SummarySales@1100528508 : Code[20];
      SourceSumSheetEditable@1100528509 : Boolean INDATASET;
      HideForRAW@1100528510 : Boolean INDATASET;
      SurchargeLaborTo@1100528904 : Decimal;
      SurchargeMaterialTo@1100528903 : Decimal;
      SurchargeSubcontractingTo@1100528902 : Decimal;
      SurchargePlantTo@1100528901 : Decimal;
      SurchargeSundryTo@1100528900 : Decimal;

    PROCEDURE SetActionType@1100525006(Action@1100525001 : 'Normal,RAW');
    BEGIN
      ActionType := Action;
    END;

    PROCEDURE SetTryOutSuccessorOptions@1100525011(parTryoutSuccessor@1100525000 : Record 11012761);
    VAR
      EstimateSetup@1100525001 : Record 11012150;
    BEGIN
      TryoutSuccessor := parTryoutSuccessor;

      DstEstimate.INIT;
      SetNoAndSeriesDstEstimate;
      DstEstimate."RAW Estimate" := (ActionType = ActionType::RAW);
      HideForRAW := (DstEstimate."RAW Estimate" = FALSE);  //C051513
      InitEstimateSetup;  //C050838
      RefDateRate := TODAY;
      //RefDateItem := TODAY;  //C053710

      EstimateSetup.GET;
      InitSalesFromCost := EstimateSetup."Init Sales From Cost";  //C053828
      RateGroupEditable := (EstimateSetup."Rates Based On" = EstimateSetup."Rates Based On"::"Rate Group");
      //IF Estimate.GET(EstimateSetup."Estimate Source") THEN
      //  SetSrcEstimateAndCopyDestEstimate(Estimate);  //db+wth, 05-11-18 (select Estimate Source manualy; no preference for copy action)

      InitDescriptionFromTryOut;
      CustomerValidate;

      GetDefaultSummary(SrcEstimate,Customer,DstEstimate);  //C050838
    END;

    LOCAL PROCEDURE SetNoAndSeriesDstEstimate@1100525019();
    VAR
      NoSeriesManagement@1100525000 : Codeunit 396;
      MarketingSetup@1100525001 : Record 5079;
    BEGIN
      MarketingSetup.GET;
      IF MarketingSetup."Inherit No. at Successor" THEN BEGIN
        DstEstimate."No. Series" := '';
        IF TryoutSuccessor."Try-out Quote" <> '' THEN
          DstEstimate."No." := TryoutSuccessor."Try-out Quote"
        ELSE
          DstEstimate."No." := TryoutSuccessor."Try-out No.";
        NewCodeEditable := FALSE;
      END ELSE BEGIN
        DstEstimate."No. Series" := GetNumberSeries(FALSE);
        DstEstimate."No." := NoSeriesManagement.GetNextNo(DstEstimate."No. Series", 0D, FALSE);
        NewCodeEditable := NoSeriesManagement.CheckManual(DstEstimate."No. Series");
      END;
    END;

    LOCAL PROCEDURE SetSrcEstimateAndCopyDestEstimate@1100525000(Estimate@1100525000 : Record 11012151);
    BEGIN
      //db, 16-10-18: redesign (use CopyRec instead of AssignFields)
      SrcEstimate := Estimate;
      DstEstimate.COPY(SrcEstimate);
      GetDefaultSurcharges(DstEstimate);  //C058193
      GetDefaultSummary(SrcEstimate,Customer,DstEstimate);  //C050838
      IF DstEstimate."Reference Date (Rate)" = 0D THEN
        RefDateRate := TODAY;
      IF DstEstimate."Reference Date (Sales Price)" = 0D THEN
        DstEstimate."Reference Date (Sales Price)" := TODAY;
      SetNoAndSeriesDstEstimate;
      InitDescriptionFromTryOut;
      CustomerValidate;
    END;

    LOCAL PROCEDURE SetDstContact@1100525005(No@1100525000 : Code[20]);
    BEGIN
      IF Contact.GET(No) THEN BEGIN
        DstEstimate."Contact No." := No;
        DstEstimate."Contact Name" := Contact.Name;
      END ELSE BEGIN
        CLEAR(Contact);
        CLEAR(DstEstimate."Contact No.");
      END;
    END;

    LOCAL PROCEDURE SetDstNormGroup@1100525009(No@1100525000 : Code[20]);
    BEGIN
      IF DstNormGroup.GET(No) THEN
        DstEstimate."Norm Group" := No
      ELSE BEGIN
        CLEAR(DstEstimate."Norm Group");
        CLEAR(DstNormGroup);
      END;
    END;

    LOCAL PROCEDURE SetDstNormGroupSales@1100525010(No@1100525000 : Code[20]);
    BEGIN
      IF DstNormGroupSales.GET(No) THEN
        DstEstimate."Norm Group (Sales)" := No
      ELSE BEGIN
        CLEAR(DstEstimate."Norm Group (Sales)");
        CLEAR(DstNormGroupSales);
      END;
    END;

    LOCAL PROCEDURE SetDstRateGroup@1100525012(No@1100525000 : Code[20]);
    BEGIN
      IF DstRateGroup.GET(No) THEN
        DstEstimate."Rate Group" := No
      ELSE BEGIN
        CLEAR(DstEstimate."Rate Group");
        CLEAR(DstRateGroup);
      END;
    END;

    LOCAL PROCEDURE SetDstPurchDiscountTermGroup1@1100525014(No@1100525000 : Code[20]);
    BEGIN
      IF DstPurchDiscountTermGroup1.GET(DstPurchDiscountTermGroup1.Level::Customer, No) THEN
        DstEstimate."Purch Discount Term Group 1" := No
      ELSE BEGIN
        CLEAR(DstEstimate."Purch Discount Term Group 1");
        CLEAR(DstPurchDiscountTermGroup1);
      END;
    END;

    LOCAL PROCEDURE SetDstPurchDiscountTermGroup2@1100525015(No@1100525000 : Code[20]);
    BEGIN
      IF DstPurchDiscountTermGroup2.GET(DstPurchDiscountTermGroup1.Level::Company, No) THEN
        DstEstimate."Purch Discount Term Group 2" := No
      ELSE BEGIN
        CLEAR(DstEstimate."Purch Discount Term Group 2");
        CLEAR(DstPurchDiscountTermGroup2);
      END;
    END;

    LOCAL PROCEDURE SetDstSalesDiscountTermGroup1@1100525016(No@1100525000 : Code[20]);
    BEGIN
      IF DstSalesDiscountTermGroup1.GET(DstSalesDiscountTermGroup1.Level::Customer, No) THEN
        DstEstimate."Sales Discount Term Group 1" := No
      ELSE BEGIN
        CLEAR(DstEstimate."Sales Discount Term Group 1");
        CLEAR(DstSalesDiscountTermGroup1);
      END;
    END;

    LOCAL PROCEDURE SetDstSalesDiscountTermGroup2@1100525017(No@1100525000 : Code[20]);
    BEGIN
      IF DstSalesDiscountTermGroup2.GET(DstSalesDiscountTermGroup2.Level::Company, No) THEN
        DstEstimate."Sales Discount Term Group 2" := No
      ELSE BEGIN
        CLEAR(DstEstimate."Sales Discount Term Group 2");
        CLEAR(DstSalesDiscountTermGroup2);
      END;
    END;

    LOCAL PROCEDURE SrcEstimateValidate@1100525027();
    VAR
      Estimate@1100525001 : Record 11012151;
    BEGIN
      IF NOT Estimate.GET(SrcEstimate."No.") THEN CLEAR(Estimate);
      IF SrcEstimate."No." = '' THEN BEGIN
        SrcEstimate := Estimate;
        InitEstimateSetup;  //C050838
      END ELSE BEGIN
        //C050838.sn
        CopySumSheet := CopySumSheet::EstFrom;
        SourceSumSheet := SourceSumSheet::Estimate;  //C057754: required for check by GetDefaultSummary
        //C050838.en
        SetSrcEstimateAndCopyDestEstimate(Estimate);
      END;
      IF Customer."No." <> '' THEN
        CustomerValidate;
      SourceSumSheetEditable := (CopySumSheet = CopySumSheet::Source);  //C050838
      GetDefaultSummary(SrcEstimate,Customer,DstEstimate);  //C050838
    END;

    LOCAL PROCEDURE SrcEstimateLookup@1100525022();
    VAR
      Estimate@1100525000 : Record 11012151;
    BEGIN
      Estimate.SETRANGE("RAW Estimate", (ActionType = ActionType::RAW));
      IF PAGE.RUNMODAL(0, Estimate) = ACTION::LookupOK THEN BEGIN
        SrcEstimate."No." := Estimate."No.";
        SrcEstimateValidate;  //C057754
      END;
    END;

    LOCAL PROCEDURE DstEstimateValidate@1100525003();
    VAR
      Estimate@1100525001 : Record 11012151;
    BEGIN
      IF Estimate.GET(DstEstimate."No.") THEN
        ERROR(Text001);
    END;

    LOCAL PROCEDURE CustomerValidate@1100525021();
    VAR
      TryoutLine@1100525000 : Record 11012755;
      ContactType@1100525003 : Record 11012757;
      ContactBusinessRelation@1100525002 : Record 5054;
      CustomerFound@1100525001 : Boolean;
    BEGIN
      IF Customer."No." <> '' THEN BEGIN
        SetDstCustomer(Customer."No.");
        CopyCustomerOptionsToDstEstimate;
      END ELSE BEGIN
        IF TryoutQuote.GET(TryoutSuccessor."Try-out Quote") THEN BEGIN
          IF NOT Relation.GET(TryoutQuote."Contact No.") THEN Relation.INIT;
          IF NOT Contact.GET(TryoutQuote."Contact Person No.") THEN Contact.INIT;
          SetDstCustomer(GetCustomer(TryoutQuote."Contact No."));
          CopyCustomerOptionsToDstEstimate;
        END ELSE BEGIN
          TryoutLine.SETRANGE("Try-out No.",Tryout.Code);
          IF TryoutLine.FINDSET(FALSE,FALSE) THEN BEGIN
            REPEAT
              IF ContactType.GET(TryoutLine."Contact Type") THEN;
              IF ContactType.Principal THEN BEGIN
                ContactBusinessRelation.SETRANGE("Link to Table", ContactBusinessRelation."Link to Table"::Customer);
                ContactBusinessRelation.SETRANGE("Contact No.", TryoutLine."Contact No.");
                IF ContactBusinessRelation.FINDFIRST THEN BEGIN
                  IF NOT CustomerFound THEN BEGIN
                    SetDstCustomer(ContactBusinessRelation."No.");
                    CustomerFound := TRUE;
                  END;
                END;
              END;
            UNTIL TryoutLine.NEXT = 0
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE RelationLookup@1100525026();
    VAR
      Contact2@1100525000 : Record 5050;
    BEGIN
      Relation.RESET;
      Contact2.SETRANGE(Type, Contact2.Type::Company);
      IF PAGE.RUNMODAL(PAGE::"Contact List", Contact2) = ACTION::LookupOK THEN
        Relation := Contact2;
    END;

    LOCAL PROCEDURE ContactLookup@1100525029();
    VAR
      Contact2@1100525000 : Record 5050;
    BEGIN
      Contact.RESET;
      Contact2.SETRANGE("Company No.", Relation."No.");
      Contact2.SETRANGE(Type, Contact2.Type::Person);
      IF PAGE.RUNMODAL(PAGE::"Contact List", Contact2) = ACTION::LookupOK THEN
        Contact := Contact2;
    END;

    LOCAL PROCEDURE GenerateEstimate@1210190000();
    VAR
      CopyEstimateRAW@1100525004 : Codeunit 11125672;
      EstimateRate@1100525005 : Record 11012160;
      EstimateCopyMgt@1100525006 : Codeunit 11012227;
      EstimateUpdateMgt@1100525001 : Codeunit 11012229;
      NoSeriesManagement@1100525003 : Codeunit 396;
      EstimateLine@1100525000 : Record 11072072;
      EstimateNo@1100525007 : Code[20];
      SelectType@1100528500 : Integer;
      EstimateSetup@1100528900 : Record 11012150;
      "***4PSSE.I012***"@1100285000 : Integer;
      ROTInformation@1100285001 : Record 11128101;
      RotInformation2@1100285500 : Record 11128101;
    BEGIN
      IF DstEstimate."No. Series" <> '' THEN BEGIN
        EstimateNo := NoSeriesManagement.GetNextNo(DstEstimate."No. Series", 0D, FALSE);
        IF EstimateNo = DstEstimate."No." THEN BEGIN
          EstimateNo := NoSeriesManagement.GetNextNo(DstEstimate."No. Series", 0D, TRUE);  //update NoSeries
          DstEstimate."No."  := EstimateNo;
        END;
      END;
      DstEstimate."Search Name" := '';
      DstEstimate.VALIDATE(Description);
      DstEstimate.InitRecord;
      InheritDataFromTryOut;  //C060604: assign contract, dim1 before init rates.
      DstEstimate.InitRates;
      //db, 11-02-19: update Estimate/Summary Source cancelled (C050838)
      DstEstimate.INSERT;

      IF SrcEstimate."No." = '' THEN BEGIN
        //C061510: assign surcharges only if no estimate copied
        DstEstimate."Surcharge % Labor" := SurchargeLaborTo;
        DstEstimate."Surcharge % Material" := SurchargeMaterialTo;
        DstEstimate."Surcharge % Subcontracting" := SurchargeSubcontractingTo;
        DstEstimate."Surcharge % Plant" := SurchargePlantTo;
        DstEstimate."Surcharge % Sundry" := SurchargeSundryTo;
      END ELSE BEGIN
        //C053828: do not update SurchargePerc, otherwise check by EstimateCopyMgt fails for update lower levels
      END;
      DstEstimate."Contact No." := Relation."No.";
      DstEstimate."Contact Person No." := Contact."No.";
      DstEstimate."Reference Date (Rate)" := RefDateRate;
      DstEstimate."Reference Date (Item)" := RefDateItem;
      DstEstimate.MODIFY;

      TryoutSuccessor."Estimate No." := DstEstimate."No.";
      TryoutSuccessor.MODIFY;

      IF SrcEstimate."No." <> '' THEN BEGIN
        EstimateRate.SETRANGE("Estimate No.", TryoutSuccessor."Estimate No.");
        EstimateRate.DELETEALL(TRUE);

        IF ActionType = ActionType::RAW THEN BEGIN
          CopyEstimateRAW.CopyEst(SrcEstimate."No.", '', DstEstimate."No.", DstEstimate.Description,
            DstEstimate."Norm Group", DstEstimate."Rate Group", DstEstimate."Customer No.",
            DstEstimate."Reference Date (Item)", DstEstimate."Purch Discount Term Group 1", DstEstimate."Purch Discount Term Group 2",
            FALSE, 0, CopyPriceAgreement)
        END ELSE BEGIN
          EstimateCopyMgt.SetInitSalesFromCost(InitSalesFromCost);
          EstimateCopyMgt.SetTransferComments(TRUE);
          EstimateCopyMgt.SetDiscTermGroupSales(DstEstimate."Sales Discount Term Group 1", DstEstimate."Sales Discount Term Group 2");
          EstimateCopyMgt.SetSurchargePercentage(SurchargeLaborTo, SurchargeMaterialTo,
            SurchargeSubcontractingTo, SurchargePlantTo, SurchargeSundryTo);  //C053828
          //C050838.sn
          SelectType := CopySumSheet;
          IF CopySumSheet = CopySumSheet::Source THEN
            EstimateCopyMgt.SetSummarySource(DstEstimate."Estimate Source",
              DstEstimate."Summary Source (Cost)", DstEstimate."Summary Source (Sales)");
          //C050838.en
          EstimateCopyMgt.CopyEst(SrcEstimate."No.", '', DstEstimate."No.", DstEstimate.Description,
            DstEstimate."Norm Group", DstEstimate."Rate Group", DstEstimate."Customer No.",
            DstEstimate."Reference Date (Rate)", DstEstimate."Reference Date (Item)",  //DP01931
            DstEstimate."Purch Discount Term Group 1", DstEstimate."Purch Discount Term Group 2",
            FALSE, SelectType, TRUE, CopyPriceAgreement, CopyRates);  //C050838
        END;

        IF SrcEstimate."Norm Group" <> DstEstimate."Norm Group" THEN BEGIN
          EstimateLine.SETRANGE("Estimate No.", DstEstimate."No.");
          EstimateUpdateMgt.ReplaceNormGroup(EstimateLine, SrcEstimate."Norm Group", DstEstimate."Norm Group");
        END;

        IF SrcEstimate."Norm Group (Sales)" <> DstEstimate."Norm Group (Sales)" THEN BEGIN
          EstimateLine.SETRANGE("Estimate No.", DstEstimate."No.");
          EstimateUpdateMgt.ReplaceNormGroupSales(EstimateLine, SrcEstimate."Norm Group (Sales)", DstEstimate."Norm Group (Sales)");
        END;

        //C064222.sn
        EstimateSetup.GET;
        IF EstimateSetup."Rates Based On" = EstimateSetup."Rates Based On"::"Rate Group" THEN BEGIN
          IF (SrcEstimate."Rate Group" <> DstEstimate."Rate Group") THEN
            EstimateUpdateMgt.UpdateRate(DstEstimate."No.", SrcEstimate."Rate Group", DstEstimate."Rate Group");
        END ELSE BEGIN
          IF (SrcEstimate."Service Contract No." <> DstEstimate."Service Contract No.") OR
             (SrcEstimate."Customer No." <> DstEstimate."Customer No.") OR
             (SrcEstimate."Global Dimension 1 Code" <> DstEstimate."Global Dimension 1 Code") THEN
            EstimateUpdateMgt.UpdateRate(DstEstimate."No.", '', '');
        END;
        //C064222.en

      // *** 4PSSE.I012 130710 <<
        ROTInformation.RESET;
        ROTInformation.SETRANGE(Type, ROTInformation.Type::"Try-Out Quote");
        ROTInformation.SETRANGE("Document No.", SrcEstimate.Code);
        IF ROTInformation.FINDSET(FALSE) THEN REPEAT
           RotInformation2 := ROTInformation; // New 140205
           RotInformation2.Type := ROTInformation.Type::"Quick Estimate"; // 140205: Changed variable to RotInformation2
           RotInformation2."Document No." := DstEstimate."No.";           // 140205: Changed variable to RotInformation2
           RotInformation2.INSERT;                                        // 140205: Changed variable to RotInformation2
           RotInformation2.CopyExtendedROTInformation(ROTInformation);    // 150320
        UNTIL ROTInformation.NEXT = 0;
      // *** 4PSSE.I012 130710 >>
      END ELSE BEGIN
        DstEstimate.UpdateSalesPricesByEstimateType;  //DP02089
      END;

      COMMIT;
      MESSAGE(Text000, DstEstimate.TABLECAPTION, DstEstimate."No.");
    END;

    LOCAL PROCEDURE GetNumberSeries@1100525008(AllowAssistEdit@1100525002 : Boolean) NoSeries : Code[10];
    VAR
      EstimateSetup@1100525000 : Record 11012150;
      EstimateRAWSetup@1100525001 : Record 11125673;
      NoSeriesManagement@1100525003 : Codeunit 396;
    BEGIN
      CASE ActionType OF
        ActionType::Normal:
          BEGIN
            EstimateSetup.GET;
            EstimateSetup.TESTFIELD("Estimate Nos.");
            NoSeries := EstimateSetup."Estimate Nos.";
          END;
        ActionType::RAW:
          BEGIN
            EstimateRAWSetup.GET;
            EstimateRAWSetup.TESTFIELD("Estimate Nos.");
            NoSeries := EstimateRAWSetup."Estimate Nos.";
          END;
      END;

      IF AllowAssistEdit THEN BEGIN
        NoSeriesManagement.SelectSeries(NoSeries, NoSeries, NoSeries);
        DstEstimate."No. Series" := NoSeries;
        DstEstimate."No." := NoSeriesManagement.GetNextNo(DstEstimate."No. Series", 0D, FALSE);
        NewCodeEditable := NoSeriesManagement.CheckManual(DstEstimate."No. Series");
      END;

      EXIT(NoSeries);
    END;

    LOCAL PROCEDURE InitEstimateSetup@1100528502();
    BEGIN
      //C050838
      DstEstimate.InheritFromEstSetup;  //C051513
      GetDefaultSurcharges(DstEstimate);  //C058193
      IF DstEstimate."RAW Estimate" THEN BEGIN
        DstEstimate.InheritFromRawSetup;
        CopySumSheet := CopySumSheet::Empty;
      END ELSE BEGIN
        CopySumSheet := CopySumSheet::Source;
        SourceSumSheet := SourceSumSheet::Setup;
      END;
      SourceSumSheetEditable := (CopySumSheet = CopySumSheet::Source);
    END;

    LOCAL PROCEDURE GetDefaultSummary@1100528501(SrcEstimate@1100528500 : Record 11012151;Customer@1100528501 : Record 18;VAR DstEstimate@1100528503 : Record 11012151);
    VAR
      EstimateSetup@1100528502 : Record 11012150;
    BEGIN
      //C050838
      EstimateSetup.GET;
      EstimateSource := '';
      SummaryCost := '';
      SummarySales := '';

      CASE SourceSumSheet OF
        SourceSumSheet::Customer:
          BEGIN
            EstimateSource := Customer."Estimate Source";
            SummaryCost := Customer."Summary (Cost)";
            SummarySales := Customer."Summary (Sales)";
          END;
        SourceSumSheet::Estimate:
          BEGIN
            IF SrcEstimate."Estimate Source" = '' THEN BEGIN
              EstimateSource := SrcEstimate."No.";
              SummaryCost := SrcEstimate."Summary (Cost)";
              SummarySales := SrcEstimate."Summary (Sales)";
            END ELSE BEGIN
              EstimateSource := SrcEstimate."Estimate Source";
              SummaryCost := SrcEstimate."Summary Source (Cost)";
              SummarySales := SrcEstimate."Summary Source (Sales)";
            END;
          END;
        SourceSumSheet::Setup:
          BEGIN
            EstimateSource := EstimateSetup."Estimate Source";
            SummaryCost := EstimateSetup."Summary Source (Cost)";
            SummarySales := EstimateSetup."Summary Source (Sales)";
          END;
      END;

      DstEstimate."Estimate Source" := EstimateSource;
      DstEstimate."Summary Source (Cost)" := SummaryCost;
      DstEstimate."Summary Source (Sales)" := SummarySales;
      //IF (CopySumSheet = CopySumSheet::Source) AND (SourceSumSheet <> SourceSumSheet::" ") THEN BEGIN  //db, 06-02-20
      //  DstEstimate."Summary (Cost)" := SummaryCost;
      //  DstEstimate."Summary (Sales)" := SummarySales;
      //END;
    END;

    LOCAL PROCEDURE GetCustomer@1210190003(ContactNo@1210190000 : Code[20]) : Code[20];
    VAR
      ContactBusinessRelation@1210190001 : Record 5054;
    BEGIN
      ContactBusinessRelation.RESET;
      ContactBusinessRelation.SETCURRENTKEY("Contact No.", "Business Relation Code");
      ContactBusinessRelation.SETRANGE("Contact No.", ContactNo);
      ContactBusinessRelation.SETRANGE("Link to Table", ContactBusinessRelation."Link to Table"::Customer);
      IF ContactBusinessRelation.FINDFIRST THEN BEGIN
        EXIT(ContactBusinessRelation."No.");
      END;
    END;

    LOCAL PROCEDURE SetDstCustomer@1100525024(CustomerNo@1100525001 : Code[20]);
    BEGIN
      IF Customer.GET(CustomerNo) THEN BEGIN
        DstEstimate."Customer No." := Customer."No.";
        DstEstimate."Customer Name" := Customer.Name;
        CopyCustomerOptionsToDstEstimate;
      END ELSE BEGIN
        CLEAR(DstEstimate."Customer No.");
        CLEAR(DstEstimate."Customer Name");
      END;
    END;

    LOCAL PROCEDURE CopyCustomerOptionsToDstEstimate@1100525041();
    BEGIN
      IF Customer."No." = '' THEN EXIT;  //C049876

      DstEstimate.InheritFromCustomer;

      //db+wth, 05-11-18: apply default values from Customer if filled; otherwise use default from Setup or Estimate Source
      IF (Customer."Surcharge % Labor (Est)" <> 0) OR (Customer."Surcharge % Material (Est)" <> 0) OR
        (Customer."Surcharge % Subcontr. (Est)" <> 0) OR (Customer."Surcharge % Plant (Est)" <> 0) OR
        (Customer."Surcharge % Sundry (Est)" <> 0) THEN BEGIN
        //C053828.sn
        SurchargeLaborTo := Customer."Surcharge % Labor (Est)";
        SurchargeMaterialTo := Customer."Surcharge % Material (Est)";
        SurchargeSubcontractingTo := Customer."Surcharge % Subcontr. (Est)";
        SurchargePlantTo := Customer."Surcharge % Plant (Est)";
        SurchargeSundryTo := Customer."Surcharge % Sundry (Est)";
        //C053828.en
      END;

      IF Customer."Rate Group" <> '' THEN
        DstEstimate."Rate Group" := Customer."Rate Group";
      IF Customer."Purch Discount Term Group" <> '' THEN
        DstEstimate."Purch Discount Term Group 1" := Customer."Purch Discount Term Group";
      IF Customer."Sales Discount Term Group" <> '' THEN
        DstEstimate."Sales Discount Term Group 1" := Customer."Sales Discount Term Group";
      IF Customer."Reference Date (Item)" <> 0D THEN
        RefDateItem := Customer."Reference Date (Item)";

      GetDefaultSummary(SrcEstimate,Customer,DstEstimate);  //C050838
    END;

    LOCAL PROCEDURE CheckCustomerContact@1100485000(iAction@1100485001 : Integer);
    VAR
      ContactBusinessRelation@1100485000 : Record 5054;
      NumContact@1100485002 : Integer;
      ContactPerson@1100525000 : Record 5050;
    BEGIN
      IF iAction = 0 THEN BEGIN
        ContactBusinessRelation.RESET;
        ContactBusinessRelation.SETCURRENTKEY("Link to Table", "No.");
        ContactBusinessRelation.SETRANGE("Link to Table", ContactBusinessRelation."Link to Table"::Customer);
        ContactBusinessRelation.SETRANGE("No.", Customer."No.");
        IF ContactBusinessRelation.FINDFIRST THEN BEGIN
          ContactBusinessRelation.CALCFIELDS("Contact Name");
          IF NOT Relation.GET(ContactBusinessRelation."Contact No.") THEN Relation.INIT;
        END;
      END;
      IF iAction = 1 THEN BEGIN
        ContactBusinessRelation.RESET;
        ContactBusinessRelation.SETCURRENTKEY("Contact No.", "Business Relation Code");
        ContactBusinessRelation.SETRANGE("Contact No.", Relation."No.");
        ContactBusinessRelation.SETRANGE("Link to Table", ContactBusinessRelation."Link to Table"::Customer);
        IF ContactBusinessRelation.FINDFIRST THEN BEGIN
          ContactBusinessRelation.CALCFIELDS("Contact Name");
          IF NOT Customer.GET(ContactBusinessRelation."No.") THEN Customer.INIT;
        END;
      END;

      ContactPerson.SETRANGE("Company No.", Relation."No.");
      ContactPerson.SETRANGE(Type, ContactPerson.Type::Person);
      NumContact := ContactPerson.COUNT;
      IF NumContact = 1 THEN BEGIN
        ContactPerson.FINDFIRST;
        Contact := ContactPerson;
      END ELSE BEGIN
        Contact.INIT;
      END;
    END;

    LOCAL PROCEDURE InheritDataFromTryOut@1100525002();
    BEGIN
      IF TryoutSuccessor."Try-out Quote" = '' THEN BEGIN
        Tryout.GET(TryoutSuccessor."Try-out No.");
        DstEstimate.Address := Tryout.Address;
        DstEstimate."Address 2" := Tryout."Address 2";
        DstEstimate.City := Tryout.City;
        DstEstimate."Post Code" := Tryout."Post Code";
        DstEstimate.County := Tryout.County;
        DstEstimate."Country/Region Code":= Tryout."Country/Region Code";
        DstEstimate."Territory Code":= Tryout."Territory Code";
        DstEstimate."Starting Date" := Tryout."Expected Starting Date";
        DstEstimate."Ending Date" := Tryout."Expected End Date";
        DstEstimate."Information Note Date" := Tryout."Information Note Date";
        DstEstimate."Information Note Time" := Tryout."Information Note Time";
        IF Tryout."Global Dimension 1 Code" <> '' THEN
          DstEstimate.VALIDATE("Global Dimension 1 Code", Tryout."Global Dimension 1 Code");
        CopyResponsiblePersonsFromTryout(Tryout.Code, DstEstimate."No.");
      END ELSE BEGIN
        TryoutQuote.GET(TryoutSuccessor."Try-out Quote");
        DstEstimate.Address := TryoutQuote.Address;
        DstEstimate."Address 2" := TryoutQuote."Address 2";
        DstEstimate.City := TryoutQuote.City;
        DstEstimate."Post Code" := TryoutQuote."Post Code";
        DstEstimate.County := TryoutQuote.County;
        DstEstimate."Country/Region Code":= TryoutQuote."Country/Region Code";
        DstEstimate."Territory Code":= TryoutQuote."Territory Code";
        DstEstimate.Discipline := TryoutQuote.Discipline;
        DstEstimate."Starting Date" := TryoutQuote."Expected Starting Date";
        DstEstimate."Ending Date" := TryoutQuote."Expected End Date";
        DstEstimate."Register Date" := TryoutQuote."Register Date";
        DstEstimate."Tender Date" := TryoutQuote."Tender Date";
        DstEstimate."Tender No." := TryoutQuote."Tender No.";
        DstEstimate."Information Note Date" := TryoutQuote."Information Note Date";
        DstEstimate."Information Note Time" := TryoutQuote."Information Note Time";
        IF TryoutQuote.Estimator <> '' THEN
          DstEstimate.Estimator := TryoutQuote.Estimator;
        DstEstimate."Expected Est. Completion Date" := TryoutQuote."Register Date";
        DstEstimate."Contact Person No." := TryoutQuote."Contact Person No.";
        IF TryoutQuote."Global Dimension 1 Code" <> '' THEN
          DstEstimate.VALIDATE("Global Dimension 1 Code", TryoutQuote."Global Dimension 1 Code");
        CopyResponsiblePersonsFromTryoutQuote(TryoutQuote.Code, DstEstimate."No.");
      END;

      DstEstimate."Project No." := TryoutSuccessor."Project No.";
      DstEstimate."Service Contract No." := TryoutSuccessor."Service Contract No.";
      DstEstimate."Service Location No." := TryoutSuccessor."Service Location No.";
      DstEstimate."Extension Contract" := TryoutSuccessor."Extension Contract";
    END;

    LOCAL PROCEDURE InitDescriptionFromTryOut@1100528500();
    BEGIN
      IF TryoutSuccessor."Try-out Quote" = '' THEN BEGIN
        Tryout.GET(TryoutSuccessor."Try-out No.");
        DstEstimate.Description := Tryout.Description;
        DstEstimate."Description 2" := Tryout."Description 2";  //C048975
      END ELSE BEGIN
        TryoutQuote.GET(TryoutSuccessor."Try-out Quote");
        DstEstimate.Description := TryoutQuote.Description;
        DstEstimate."Description 2" := TryoutQuote."Description 2";  //C048975
      END;
    END;

    LOCAL PROCEDURE CopyResponsiblePersonsFromTryoutQuote@1100528100(TryoutQuoteNo@1100528101 : Code[20];EstimateNo@1100528100 : Code[20]);
    VAR
      TryoutQuoteResponsPerson@1100528103 : Record 11125867;
      EstimateResponsiblePerson@1100528102 : Record 11012159;
    BEGIN
      TryoutQuoteResponsPerson.SETRANGE("Try-out Quote No.", TryoutQuoteNo);

      IF TryoutQuoteResponsPerson.FINDSET THEN
        REPEAT
          EstimateResponsiblePerson.INIT;
          EstimateResponsiblePerson."Estimate No." := EstimateNo;
          EstimateResponsiblePerson.Responsibility := TryoutQuoteResponsPerson.Responsibility;
          EstimateResponsiblePerson."Employee No." := TryoutQuoteResponsPerson."Employee No.";
          EstimateResponsiblePerson.INSERT(TRUE);
        UNTIL TryoutQuoteResponsPerson.NEXT = 0;
    END;

    LOCAL PROCEDURE CopyResponsiblePersonsFromTryout@1100528504(TryoutNo@1100528101 : Code[20];EstimateNo@1100528100 : Code[20]);
    VAR
      TryoutResponsPerson@1100528103 : Record 11012756;
      EstimateResponsiblePerson@1100528102 : Record 11012159;
    BEGIN
      TryoutResponsPerson.SETRANGE("Try-out", TryoutNo);

      IF TryoutResponsPerson.FINDSET THEN
        REPEAT
          EstimateResponsiblePerson.INIT;
          EstimateResponsiblePerson."Estimate No." := EstimateNo;
          EstimateResponsiblePerson.Responsibility := TryoutResponsPerson.Responsibility;
          EstimateResponsiblePerson."Employee No." := TryoutResponsPerson.Employee;
          EstimateResponsiblePerson.INSERT(TRUE);
        UNTIL TryoutResponsPerson.NEXT = 0;
    END;

    LOCAL PROCEDURE ValidateTemplateCode@1100528900(TemplateCode@1100528900 : Code[20]);
    BEGIN
      //DP02264
      IF TemplateCode <> '' THEN BEGIN
        DstEstimate.FillEstimateFromTemplate;
      END ELSE BEGIN
        IF DstEstimate."Customer No." <> '' THEN BEGIN
          CustomerValidate;
        END ELSE BEGIN
          IF SrcEstimate."No." <> '' THEN
            SrcEstimateValidate
          ELSE
            InitEstimateSetup;
        END;
      END;
    END;

    LOCAL PROCEDURE GetDefaultSurcharges@1100528901(Estimate@1100528900 : Record 11012151);
    BEGIN
      //C058193
      IF NOT Estimate."RAW Estimate" THEN BEGIN
        SurchargeLaborTo := Estimate."Surcharge % Labor";
        SurchargeMaterialTo := Estimate."Surcharge % Material";
        SurchargeSubcontractingTo := Estimate."Surcharge % Subcontracting";
        SurchargePlantTo := Estimate."Surcharge % Plant";
        SurchargeSundryTo := Estimate."Surcharge % Sundry";
      END;
    END;

    BEGIN
    {
      DP01849: GenerateEstimate moved from report 11012758; selection based on page 11012210 (CopyEstimate).

      Priority initial values by OnInsert (Estimate):
      - InheritFromEstSetup;
      - IF Estimate Template Code <> '' THEN
         FillEstimateFromTemplate;
      - InheritFromEstSource
      - InheritFromCustomer;
    }
    END.
  }
  RDLDATA
  {
  }
}

