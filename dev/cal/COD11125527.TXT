OBJECT Codeunit 11125527 Get Order Mgt. (SMF)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1100525003 : TextConst 'DEU=Geben Sie zuerst die Zeile und danach den Textblock ein.;ENU=Before editing text enter the line first;NLD=Voer eerst de regel in en daarna het tekstblok.;NOR=Velg rad f›r du redigerer tekst.;SVE=V„lj rad innan du redigerar text.';
      Text003@1100525001 : TextConst 'DEU=Keine Budgetzeilen von Projekt ''%1'', Einkaufsaktion ''%2'' vorhanden.;ENU=No budget line present of project ''%1'', purchase action ''%2''.;NLD=Geen begrotingsregels aanwezig van project ''%1'', inkoopactie ''%2''.;NOR=Det finnes ingen budsjettrad i prosjektet ''%1'', innkj›pshandling ''%2''.;SVE=Det finns ingen budgetrad i projektet ''%1'', ink”ps†tg„rd ''%2''.';
      Text004@1100525004 : TextConst 'DEU=Bestellung erstellen;ENU=Create Purchase Order;NLD=Aanmaken inkooporder;NOR=Opprette kj›psordre;SVE=Skapa ink”psorder';
      Text005@1100525000 : TextConst 'DEU=Zuerst Zeilen w„hlen.;ENU=First select lines.;NLD=Selecteer eerst regels.;NOR=Velg rader f›rst.;SVE=V„lj f”rst rader.';
      Text006@1100525005 : TextConst 'DEU=Auftrag erstellen?;ENU=Create purchase order?;NLD=Inkooporder aanmaken?';
      Text007@1100525006 : TextConst 'DEU=Einkaufsbestellung erstellen und Eing„nge buchen?;ENU=Create purchase order and post receipts?;NLD=Inkooporder aanmaken en ontvangsten boeken?;SVE=Skapa ink”psorder och bokf”ra inleverans?';

    PROCEDURE SelectProjectBudget@8(IGetOrderNo@1100525000 : Code[20];IProjectNo@1210190000 : Code[20];IPurchAction@11012000 : Code[20]);
    VAR
      lvBudgetRec@11012002 : Record 11012001;
      lvBudgetFrm@11012001 : Page 11012005;
    BEGIN
      WITH lvBudgetRec DO BEGIN
        FILTERGROUP(9);
        SETRANGE("Project No.", IProjectNo);
        SETFILTER("Cost Type", '%1..%2', "Cost Type"::Material, "Cost Type"::Sundry);
        SETRANGE(Supply,FALSE);
        FILTERGROUP(0);
        IF IPurchAction <> '' THEN BEGIN
          SETRANGE("Purchase Action", IPurchAction);
          IF FINDSET(FALSE, FALSE) THEN BEGIN
            REPEAT
              MARK := TRUE;
            UNTIL NEXT = 0;
          END ELSE BEGIN
            MESSAGE(Text003, IProjectNo, IPurchAction);
            EXIT;
          END;
          MARKEDONLY(TRUE); //Also in RTC, because marks are set in this function.
          CreateGetOrderLines(IGetOrderNo, lvBudgetRec);
        END ELSE BEGIN
          lvBudgetFrm.SETRECORD(lvBudgetRec);
          lvBudgetFrm.SETTABLEVIEW(lvBudgetRec);
          lvBudgetFrm.SetSelectionSiteMgtGetOrder(IGetOrderNo);
          lvBudgetFrm.EDITABLE(FALSE);
          lvBudgetFrm.RUNMODAL;
        END;
      END;
    END;

    PROCEDURE SelectPurchaseAction@10(IGetOrderNo@1100525001 : Code[20];IProjectNo@1210190000 : Code[20]);
    VAR
      lvProjPurchActRec@1100525000 : Record 11012026;
    BEGIN
      WITH lvProjPurchActRec DO BEGIN
        FILTERGROUP(9);
        SETFILTER("Project No.", IProjectNo);
        SETFILTER(Status, '>=%1', Status::Approved);
        FILTERGROUP(0);
        IF PAGE.RUNMODAL(PAGE::"Project Purchase Action List", lvProjPurchActRec) = ACTION::LookupOK THEN BEGIN
          IF ("Project No." <> '') AND (Code <> '') THEN
            SelectProjectBudget(IGetOrderNo, "Project No.", Code);
        END;
      END;
    END;

    PROCEDURE CreateGetOrderLines@1100485001(IGetOrderNo@1100525002 : Code[20];VAR IVarBudgetLineRec@1100485000 : Record 11012001);
    VAR
      lvBudgetLineRec@1100485001 : Record 11012001;
      lvGetOrderRec@1100525003 : Record 11125531;
      lvGetOrderLineRec@1100525000 : Record 11125532;
      lvNextLineNo@1100525001 : Integer;
    BEGIN
      lvBudgetLineRec.COPY(IVarBudgetLineRec);
      WITH lvBudgetLineRec DO BEGIN
        IF NOT FINDFIRST THEN BEGIN
          MESSAGE(Text005);
          EXIT;
        END;

        lvGetOrderRec.GET(IGetOrderNo);
        lvGetOrderRec.TESTFIELD("No.");
        lvGetOrderRec.TESTFIELD("Project No.");
        lvGetOrderRec.TESTFIELD(Status, lvGetOrderRec.Status::Open);

        lvGetOrderLineRec.SETRANGE("Get Order No.", IGetOrderNo);
        IF lvGetOrderLineRec.FINDLAST THEN
          lvNextLineNo := lvGetOrderLineRec."Line No." + 10000
        ELSE
          lvNextLineNo := 10000;

        REPEAT
          lvGetOrderLineRec.RESET;
          lvGetOrderLineRec.INIT;
          lvGetOrderLineRec."Get Order No." := IGetOrderNo;
          lvGetOrderLineRec."Line No." := lvNextLineNo;
          lvGetOrderLineRec.InitRecord();
          lvGetOrderLineRec.INSERT(TRUE);
          lvNextLineNo := lvNextLineNo + 10000;

          lvGetOrderLineRec."Extension Contract" := "Extension Contract";
          lvGetOrderLineRec."Plot No." := "Plot No.";
          lvGetOrderLineRec.Element := Element;
          lvGetOrderLineRec."Item No." := "Item No.";
          lvGetOrderLineRec.Manufacturer := Manufacturer;
          lvGetOrderLineRec."Basic Item" := "Basic Item";
          lvGetOrderLineRec."Vendor (Trade Item)" := "Vendor (Trade Item)";
          lvGetOrderLineRec."Trade Item" := "Trade Item";
          lvGetOrderLineRec."Cost Type" := "Cost Type" + 1;
          lvGetOrderLineRec."Cost Object" := "Cost Object";
          lvGetOrderLineRec."Cost Component" := "Cost Component";
          lvGetOrderLineRec.Description := Description;
          lvGetOrderLineRec."Description 2" := "Description 2";
          lvGetOrderLineRec.Quantity := Quantity;
          lvGetOrderLineRec."Unit of Measure" := "Unit of Measure";
          lvGetOrderLineRec."Gross Price" := "Gross Price (LCY)";
          lvGetOrderLineRec."Discount %" := "Discount %";
          lvGetOrderLineRec.VALIDATE(Price, "Price (LCY)");  //* Also Amount is calculated
          lvGetOrderLineRec."Price Agreement" := "Price Agreement";
          lvGetOrderLineRec.CheckPriceAgreement(FALSE);
          lvGetOrderLineRec."Purchase Action" := "Purchase Action";
          lvGetOrderLineRec.VALIDATE("External Text", "External Text");
          lvGetOrderLineRec."Comments for Logistics" := "Comments for Logistics";
          lvGetOrderLineRec.MODIFY(TRUE);
        UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE PostGetOrder@1100525006(VAR GetOrder@1100525000 : Record 11125531);
    VAR
      PurchSetup@1100525002 : Record 312;
      PurchHeader@1100525001 : Record 38;
    BEGIN
      PurchSetup.GET;
      IF PurchSetup."Do Not Post Purch. Orders" THEN BEGIN
        IF NOT CONFIRM(Text006, FALSE) THEN
          EXIT;
      END ELSE
        IF NOT CONFIRM(Text007, FALSE) THEN
          EXIT;

      CreatePurchaseOrder(GetOrder,PurchHeader);
      IF NOT PurchSetup."Do Not Post Purch. Orders" THEN
        PostPurchaseOrder(PurchHeader);
      COMMIT;
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@1100525000(VAR IOGetOrderRec@1100525000 : Record 11125531;VAR PurchHeader@1100525008 : Record 38);
    VAR
      lvSiteMgtSetupRec@1100525005 : Record 11125525;
      lvGetOrderRec@1100525001 : Record 11125531;
      lvGetOrderLineRec@1100525002 : Record 11125532;
      lvPurchOrderLineRec@1100525004 : Record 39;
      Job@1100525010 : Record 11072003;
      lvNoSeriesMgt@1100525006 : Codeunit 396;
      lvWindow@1100525009 : Dialog;
      lvNextLineNo@1100525007 : Integer;
    BEGIN
      lvGetOrderRec.COPY(IOGetOrderRec);
      lvSiteMgtSetupRec.GET;
      lvSiteMgtSetupRec.TESTFIELD("Purchase Order Nos.");

      WITH lvGetOrderRec DO BEGIN
        TESTFIELD("No.");
        TESTFIELD("Project No.");
        TESTFIELD("Vendor No.");
        TESTFIELD(Status, Status::Open);

        lvGetOrderLineRec.SETRANGE("Get Order No.", "No.");
        lvGetOrderLineRec.FINDSET(FALSE,FALSE);  //* //* Must be lines, so not 'IF ...'
        REPEAT
          IF lvGetOrderLineRec."Basic Item" <> '' THEN
            lvGetOrderLineRec.TESTFIELD(Manufacturer);
          IF lvGetOrderLineRec."Trade Item" <> '' THEN
            lvGetOrderLineRec.TESTFIELD("Vendor (Trade Item)");
          IF NOT GetOrderLineIsTextLine(lvGetOrderLineRec) THEN BEGIN
            lvGetOrderLineRec.TESTFIELD("Cost Object");
            lvGetOrderLineRec.TESTFIELD(Quantity);
          END;
          Job.GET("Project No.");
          IF Job."Posting Element Mandatory" THEN
            lvGetOrderLineRec.TESTFIELD(Element);
        UNTIL lvGetOrderLineRec.NEXT = 0;

        lvWindow.OPEN(Text004);
        PurchHeader.INIT;
        PurchHeader."Document Type" := PurchHeader."Document Type"::Order;
        lvNoSeriesMgt.InitSeries(
          lvSiteMgtSetupRec."Purchase Order Nos.",'',WORKDATE,PurchHeader."No.",PurchHeader."No. Series");
        PurchHeader.TESTFIELD("No.");
        PurchHeader.INSERT(TRUE);

        PurchHeader."Posting Date" := "Order Date"; //*C-027566
        PurchHeader."Document Date" := "Order Date";
        PurchHeader.VALIDATE("Buy-from Vendor No.", "Vendor No.");
        PurchHeader.VALIDATE("Job No.", "Project No.");
        PurchHeader.VALIDATE("Order Date", "Order Date");
        PurchHeader.VALIDATE("Your Reference", "No."); //kzwerver, 120112, n, #C-029021
        PurchHeader.VALIDATE(Deliver, Deliver);
        PurchHeader.VALIDATE("Ship-to Location", "Ship To Location");
        PurchHeader."Amounts only" := FALSE;
        PurchHeader."Contract Applicable" := FALSE;
        PurchHeader.MODIFY(TRUE);

        lvGetOrderLineRec.RESET;
        lvGetOrderLineRec.SETRANGE("Get Order No.", "No.");
        IF lvGetOrderLineRec.FINDSET(FALSE,FALSE) THEN BEGIN
          lvPurchOrderLineRec.SetCheckDeliverableQuantity(TRUE);
          lvNextLineNo := 10000;
          REPEAT
            lvPurchOrderLineRec.INIT;
            lvPurchOrderLineRec."Document Type" := PurchHeader."Document Type";
            lvPurchOrderLineRec."Document No." := PurchHeader."No.";
            lvPurchOrderLineRec."Line No." := lvNextLineNo;
            lvPurchOrderLineRec.InitRecord();
            lvPurchOrderLineRec.INSERT(TRUE);
            lvNextLineNo := lvNextLineNo + 10000;

            lvPurchOrderLineRec.VALIDATE("Job No.", "Project No.");
            lvPurchOrderLineRec.VALIDATE("Extension Contract", lvGetOrderLineRec."Extension Contract");
            lvPurchOrderLineRec.VALIDATE("Plot No.", lvGetOrderLineRec."Plot No.");
            lvPurchOrderLineRec.VALIDATE(Element, lvGetOrderLineRec.Element);
            IF GetOrderLineIsTextLine(lvGetOrderLineRec) THEN
              lvPurchOrderLineRec.VALIDATE("Cost Type", lvPurchOrderLineRec."Cost Type"::" ")
            ELSE BEGIN
              lvPurchOrderLineRec.VALIDATE("Cost Type", lvGetOrderLineRec."Cost Type");
              IF lvGetOrderLineRec."Trade Item" <> '' THEN BEGIN
                lvPurchOrderLineRec."Vendor (Trade Item)" := lvGetOrderLineRec."Vendor (Trade Item)";
                lvPurchOrderLineRec.VALIDATE("Trade Item", lvGetOrderLineRec."Trade Item");
              END ELSE BEGIN
                IF lvGetOrderLineRec."Basic Item" <> '' THEN BEGIN
                  lvPurchOrderLineRec.Manufacturer := lvGetOrderLineRec.Manufacturer;
                  lvPurchOrderLineRec.VALIDATE("Basic Item", lvGetOrderLineRec."Basic Item");
                END ELSE BEGIN
                  IF lvGetOrderLineRec."Item No." <> '' THEN
                    lvPurchOrderLineRec.VALIDATE("Item No.", lvGetOrderLineRec."Item No.");
                END;
              END;
              lvPurchOrderLineRec."Subcontracting Activity" :=  lvGetOrderLineRec."Subcontracting Activity";
              lvPurchOrderLineRec.VALIDATE("Shortcut Dimension 2 Code", lvGetOrderLineRec."Cost Object");
              lvPurchOrderLineRec.VALIDATE("Cost Component", lvGetOrderLineRec."Cost Component");
              lvPurchOrderLineRec.VALIDATE(Quantity, lvGetOrderLineRec.Quantity);
              lvPurchOrderLineRec.VALIDATE("Unit of Measure Code", lvGetOrderLineRec."Unit of Measure");
              lvPurchOrderLineRec.VALIDATE("Price Agreement", lvGetOrderLineRec."Price Agreement");
              lvPurchOrderLineRec.VALIDATE("Direct Unit Cost", lvGetOrderLineRec.Price);
              lvPurchOrderLineRec.VALIDATE("Unit Price (LCY)", lvGetOrderLineRec."Gross Price");
              lvPurchOrderLineRec.VALIDATE("Discount % (Item)", lvGetOrderLineRec."Discount %");
              IF lvPurchOrderLineRec."Line Amount" <> lvGetOrderLineRec.Amount THEN
                lvPurchOrderLineRec.VALIDATE("Line Amount", lvGetOrderLineRec.Amount);
              lvPurchOrderLineRec.VALIDATE("Qty. to Receive", lvPurchOrderLineRec.Quantity);  //* Always direct receipt!
            END;
            lvPurchOrderLineRec.Description := lvGetOrderLineRec.Description;
            lvPurchOrderLineRec."Description 2" := lvGetOrderLineRec."Description 2";
            lvPurchOrderLineRec.VALIDATE("Purchase Action", lvGetOrderLineRec."Purchase Action");
            lvPurchOrderLineRec.VALIDATE(Text, lvGetOrderLineRec."External Text");
            lvPurchOrderLineRec.VALIDATE("Comments for Logistics", lvGetOrderLineRec."Comments for Logistics");
            lvPurchOrderLineRec.MODIFY(TRUE);
          UNTIL lvGetOrderLineRec.NEXT = 0;
        END;
        Status := Status::Posted;
        "Posted on" := CURRENTDATETIME;
        "Purchase Order No." := PurchHeader."No.";
        MODIFY;
        lvWindow.CLOSE;
      END;

      IOGetOrderRec := lvGetOrderRec ;
    END;

    PROCEDURE GetOrderLineIsTextLine@1100525001(IGetOrderLineRec@1100525000 : Record 11125532) : Boolean;
    BEGIN
      IF ((IGetOrderLineRec."Item No." + IGetOrderLineRec."Basic Item" + IGetOrderLineRec."Trade Item") = '') AND
         (IGetOrderLineRec."Cost Object" = '') AND
         (IGetOrderLineRec.Quantity = 0) AND
         (IGetOrderLineRec.Price = 0) AND (IGetOrderLineRec."Gross Price" = 0)
      THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE EditText@1210190004(IGetOrderLineRec@1100525000 : Record 11125532);
    VAR
      lvTextFrm@11012001 : Page 11012120;
    BEGIN
      WITH IGetOrderLineRec DO BEGIN
        IF "Line No." = 0 THEN
          ERROR(Text001);

        lvTextFrm.SetSelection(DATABASE::"Get Order Line (SMF)","Get Order No.",'','','','','',"Line No.",0);

        lvTextFrm.RUNMODAL;
      END;
    END;

    PROCEDURE HandleItemLookup@1210190001(VAR GetOrderLineRec@1210190006 : Record 11125532;VAR ZoomType@1210190000 : Integer;IItemCode@1100525001 : Code[20];IVendorCode@1100525000 : Code[20]);
    VAR
      lvItemRec@1100525002 : Record 27;
      lvBasicItemRec@1100525004 : Record 11012316;
      lvTradeItemRec@1100525003 : Record 11012317;
      lvVendorRec@1210190004 : Record 11012304;
      lvItemFrm@1210190003 : Page 31;
      lvBasicItemFrm@1210190002 : Page 11012333;
      lvTradeItemFrm@1210190001 : Page 11012334;
      lvRefDate@1100485002 : Date;
      lvDiscRef1@1100485001 : Code[20];
      lvDiscRef2@1100485000 : Code[20];
      VendorFilter@1100528900 : Text;
    BEGIN
      WITH GetOrderLineRec DO BEGIN
        IF ZoomType = 0 THEN BEGIN
          IF "Basic Item" = '' THEN BEGIN
            lvVendorRec.SETCURRENTKEY(Code);
            lvVendorRec.Code := "Vendor (Trade Item)";
            IF PAGE.RUNMODAL(PAGE::"ETIM Vendor List", lvVendorRec) = ACTION::LookupOK THEN
              VALIDATE("Vendor (Trade Item)", lvVendorRec.Code);
          END ELSE BEGIN
            ZoomType := 3;
          END;
        END;

        IF ZoomType = 1 THEN BEGIN
          CLEAR(lvItemFrm);
          lvItemFrm.LOOKUPMODE(TRUE);
          {
          //* Do not call this function because Multi Copy is not (yet) present for this table.
          lvItemFrm.DetermineInterface(DATABASE::"Get Order Line (SMF)",
            "Get Order No.",Element,"Extension Contract","Plot No.",0,'','',"Line No.",'','');
          }
          IF lvItemRec.GET("Item No.") THEN
            lvItemFrm.SETRECORD(lvItemRec);
          lvItemFrm.SetFromSiteMgtForm; //kzwerver, 110609, n, #RfC ULC

          IF lvItemFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
            lvItemFrm.GETRECORD(lvItemRec);
            VALIDATE("Item No.", lvItemRec."No.");
          END ELSE BEGIN
            IF lvItemFrm.CheckMultiCopy THEN
              ZoomType := -1;
          END;
        END;

        IF ZoomType = 2 THEN BEGIN
          CLEAR(lvBasicItemFrm);
          lvBasicItemFrm.LOOKUPMODE(TRUE);
          {
          //* Do not call this function because Multi Copy is not (yet) present for this table.
          lvBasicItemFrm.SetSelection(DATABASE::"Get Order Line (SMF)",
            "Get Order No.",Element,"Extension Contract","Plot No.",0,'','',"Line No.",'','');
          }

          GetReferenceData(lvRefDate, lvDiscRef1, lvDiscRef2);
          lvBasicItemFrm.SetReference(lvRefDate, lvDiscRef1, lvDiscRef2);

          lvBasicItemRec.InitLookup(lvBasicItemRec, "Basic Item", Manufacturer);
          lvBasicItemFrm.SETRECORD(lvBasicItemRec);
          lvBasicItemFrm.SetFromSiteMgtForm; //kzwerver, 110609, n, #RfC ULC

          IF lvBasicItemFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
            lvBasicItemFrm.GETRECORD(lvBasicItemRec);
            Manufacturer := lvBasicItemRec.Manufacturer;
            VALIDATE("Basic Item", lvBasicItemRec."Product Code");
          END ELSE BEGIN
            IF lvBasicItemFrm.CheckMultiCopy THEN
              ZoomType := -1;
          END;
        END;

        IF ZoomType = 3 THEN BEGIN
          CLEAR(lvTradeItemFrm);
          lvTradeItemFrm.LOOKUPMODE(TRUE);

          //C056483.sn
          IF "Vendor (Trade Item)" <> '' THEN
            VendorFilter := "Vendor (Trade Item)"
          ELSE
            VendorFilter := GetFilterVendor(GetOrderLineRec);
          IF VendorFilter <> '' THEN BEGIN
            lvTradeItemRec.SETFILTER(Vendor, VendorFilter);
            IF lvTradeItemRec.FINDFIRST THEN;
              lvTradeItemFrm.SETTABLEVIEW(lvTradeItemRec);
          END;
          //db, 06-06-19: MultiCopy not yet implemented; function activated for filter on Vendor
          lvTradeItemFrm.SetSelection(DATABASE::"Get Order Line (SMF)",
            "Get Order No.",Element,VendorFilter,"Plot No.",0,"Extension Contract",'',"Line No.",'','',
            "Vendor (Trade Item)","Trade Item",Manufacturer,"Basic Item", IItemCode, IVendorCode);
          //C056483.en

          GetReferenceData(lvRefDate, lvDiscRef1, lvDiscRef2);
          lvTradeItemFrm.SetReference(lvRefDate, lvDiscRef1, lvDiscRef2);

          lvTradeItemRec.InitLookup(lvTradeItemRec, "Basic Item", Manufacturer, "Trade Item", "Vendor (Trade Item)");
          lvTradeItemFrm.SETRECORD(lvTradeItemRec);
          lvTradeItemFrm.SetFromSiteMgtForm;

          IF lvTradeItemFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
            lvTradeItemFrm.GETRECORD(lvTradeItemRec);
            Manufacturer := lvTradeItemRec.Manufacturer;
            "Basic Item" := lvTradeItemRec."Product Code";
            "Vendor (Trade Item)" := lvTradeItemRec.Vendor;
            VALIDATE("Trade Item", lvTradeItemRec."Item Code");
          END ELSE BEGIN
            IF lvTradeItemFrm.CheckMultiCopy THEN
              ZoomType := -1;
          END;
        END;
      END;
    END;

    PROCEDURE PostPurchaseOrder@1100525002(PurchHeader@1100525002 : Record 38);
    VAR
      PurchPostYesNo@1100525000 : Codeunit 91;
    BEGIN
      PurchPostYesNo.SetSelectionOnlyReceipt();
      PurchPostYesNo.SetSkipReplaceDates();  //*C-027566
      PurchPostYesNo.RUN(PurchHeader);
    END;

    PROCEDURE GetFilterVendor@1100528900(GetOrderLineSMF@1100528901 : Record 11125532) VendorFilter@11012000 : Text[250];
    VAR
      VendorRec@11012011 : Record 23;
      VendorRelationRec@1100485000 : Record 11012313;
      InventorySetup@1210190000 : Record 313;
      GetOrderSMF@1100528900 : Record 11125531;
    BEGIN
      //C056483: copy from T39
      WITH GetOrderLineSMF DO BEGIN
        VendorFilter := "Vendor (Trade Item)";
        IF VendorFilter <> '' THEN
          EXIT(VendorFilter);
        //
        InventorySetup.GET;
        IF NOT GetOrderSMF.GET("Get Order No.") THEN GetOrderSMF.INIT;
        IF GetOrderSMF."Vendor No." = '' THEN EXIT('');
        //
        VendorRelationRec.SETCURRENTKEY("Vendor (Purchase)");
        VendorRelationRec.SETRANGE("Vendor (Purchase)", GetOrderSMF."Vendor No.");
        IF InventorySetup."Vendor Filter" = InventorySetup."Vendor Filter"::Hard THEN
          VendorRelationRec.SETRANGE("Display Trade Items", TRUE);
        IF VendorRelationRec.FINDSET THEN BEGIN
          REPEAT
            IF VendorFilter = '' THEN
              VendorFilter := VendorRelationRec.Code
            ELSE
              IF STRLEN(VendorFilter) + STRLEN(VendorRelationRec.Code) < MAXSTRLEN(VendorFilter) THEN
                VendorFilter := VendorFilter + '|' + VendorRelationRec.Code;
          UNTIL VendorRelationRec.NEXT = 0;
        END;
        //
        VendorRec.GET(GetOrderSMF."Vendor No.");
        IF (VendorRec."Main Vendor" <> '') AND (VendorRec."Main Vendor" <> VendorRec."No.") THEN BEGIN
          VendorRelationRec.SETRANGE("Vendor (Purchase)", VendorRec."Main Vendor");
          IF VendorRelationRec.FINDSET THEN BEGIN
            REPEAT
              IF VendorFilter = '' THEN
                VendorFilter := VendorRelationRec.Code
              ELSE
                IF STRLEN(VendorFilter) + STRLEN(VendorRelationRec.Code) < 20 THEN
                  VendorFilter := VendorFilter + '|' + VendorRelationRec.Code;
            UNTIL VendorRelationRec.NEXT = 0;
          END;
        END;
      END;
      EXIT(VendorFilter);
    END;

    BEGIN
    {
      //* 30-06-2009: Most functions are copied from codeunit 11012041 (Advice Order Mgt) and modified for 'Get Order'.
    }
    END.
  }
}

