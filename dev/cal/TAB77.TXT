OBJECT Table 77 Report Selections
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.04,4PS14.00,NAVSE.NO,4PSSE;
  }
  PROPERTIES
  {
    Permissions=TableData 11020512=ri;
    OnInsert=BEGIN
               TESTFIELD("Report ID");
               CheckEmailBodyUsage;
             END;

    OnModify=BEGIN
               TESTFIELD("Report ID");
               CheckEmailBodyUsage;
             END;

    CaptionML=[ENU=Report Selections;
               NOR=Rapportvalg;
               SVE=Rapportval];
  }
  FIELDS
  {
    { 1   ;   ;Usage               ;Option        ;CaptionML=[ENU=Usage;
                                                              NOR=Bruk;
                                                              SVE=F”rbrukning];
                                                   OptionCaptionML=[ENU=S.Quote,S.Order,S.Invoice,S.Cr.Memo,S.Test,P.Quote,P.Order,P.Invoice,P.Cr.Memo,P.Receipt,P.Ret.Shpt.,P.Test,B.Stmt,B.Recon.Test,B.Check,Reminder,Fin.Charge,Rem.Test,F.C.Test,Prod.Order,S.Blanket,P.Blanket,M1,M2,M3,M4,Inv1,Inv2,Inv3,SM.Quote,SM.Order,SM.Invoice,SM.Credit Memo,SM.Contract Quote,SM.Contract,SM.Test,S.Return,P.Return,S.Shipment,S.Ret.Rcpt.,S.Work Order,Invt.Period Test,SM.Shipment,S.Test Prepmt.,P.Test Prepmt.,S.Arch.Quote,S.Arch.Order,P.Arch.Quote,P.Arch.Order,S.Arch.Return,P.Arch.Return,Asm.Order,P.Asm.Order,S.Order Pick Instruction,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,P.V.Remit.,C.Statement,V.Remittance,JQ,S.Invoice Draft,Pro Forma S. Invoice,S.Arch.Blanket,P.Arch.Blanket,Phys.Invt.Order Test,Phys.Invt.Order,P.Phys.Invt.Order,Phys.Invt.Rec.,P.Phys.Invt.Rec.;
                                                                    NOR=S.Quote,S.Order,S.Invoice,S.Cr.Memo,S.Test,P.Quote,P.Order,P.Invoice,P.Cr.Memo,P.Receipt,P.Ret.Shpt.,P.Test,B.Stmt,B.Recon.Test,B.Check,Reminder,Fin.Charge,Rem.Test,F.C.Test,Prod.Order,S.Blanket,P.Blanket,M1,M2,M3,M4,Inv1,Inv2,Inv3,SM.Quote,SM.Order,SM.Invoice,SM.Credit Memo,SM.Contract Quote,SM.Contract,SM.Test,S.Return,P.Return,S.Shipment,S.Ret.Rcpt.,S.Work Order,Invt.Period Test,SM.Shipment,S.Test Prepmt.,P.Test Prepmt.,S.Arch.Quote,S.Arch.Order,P.Arch.Quote,P.Arch.Order,S.Arch.Return,P.Arch.Return,Asm.Order,P.Asm.Order,S.Order Pick Instruction,S.Sales Order Picking List,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,P.V.Remit.,C.Statement,V.Remittance,JQ,S.Invoice Draft,Pro Forma S. Invoice,S.Arch.Blanket,P.Arch.Blanket,Phys.Invt.Order Test,Phys.Invt.Order,P.Phys.Invt.Order,Phys.Invt.Rec.,P.Phys.Invt.Rec.;
                                                                    SVE=S.Quote,S.Order,S.Invoice,S.Cr.Memo,S.Test,P.Quote,P.Order,P.Invoice,P.Cr.Memo,P.Receipt,P.Ret.Shpt.,P.Test,B.Stmt,B.Recon.Test,B.Check,Reminder,Fin.Charge,Rem.Test,F.C.Test,Prod. Order,S.Blanket,P.Blanket,M1,M2,M3,M4,Inv1,Inv2,Inv3,SM.Quote,SM.Order,SM.Invoice,SM.Credit Memo,SM.Contract Quote,SM.Contract,SM.Test,S.Return,P.Return,S.Shipment,S.Ret.Rcpt.,S.Work Order,Invt. Period Test,SM.Shipment,S.Test Prepmt.,P.Test Prepmt.,S.Arch. Quote,S.Arch. Order,P.Arch. Quote,P.Arch. Order,S. Arch. Return Order,P. Arch. Return Order,Asm. Order,P.Assembly Order,S.Order Pick Instruction,,S.Sales Order Picking List,,,,,,Inward Registration,Denied Hour Lines,Changed Hour Consent Lines,,,,,,,,,,,,,,,,,,,,,,P.V.Remit.,C.Statement,V.Remittance,JQ,S.Invoice Draft,Pro Forma S. Invoice,S.Arch.Blanket,P.Arch.Blanket,Phys.Invt.Order Test,Phys.Invt.Order,P.Phys.Invt.Order,Phys.Invt.Rec.,P.Phys.Invt.Rec.];
                                                   OptionString=S.Quote,S.Order,S.Invoice,S.Cr.Memo,S.Test,P.Quote,P.Order,P.Invoice,P.Cr.Memo,P.Receipt,P.Ret.Shpt.,P.Test,B.Stmt,B.Recon.Test,B.Check,Reminder,Fin.Charge,Rem.Test,F.C.Test,Prod.Order,S.Blanket,P.Blanket,M1,M2,M3,M4,Inv1,Inv2,Inv3,SM.Quote,SM.Order,SM.Invoice,SM.Credit Memo,SM.Contract Quote,SM.Contract,SM.Test,S.Return,P.Return,S.Shipment,S.Ret.Rcpt.,S.Work Order,Invt.Period Test,SM.Shipment,S.Test Prepmt.,P.Test Prepmt.,S.Arch.Quote,S.Arch.Order,P.Arch.Quote,P.Arch.Order,S.Arch.Return,P.Arch.Return,Asm.Order,P.Asm     .Order,S.Order Pick Instruction,               ,S.Sales Order Picking List,,,,,,Inward Registration,Denied Hour Lines,Changed Hour Consent Lines,,,,,,,,,,,,,,,,,,,,,P.V.Remit.,C.Statement,V.Remittance,JQ,S.Invoice Draft,Pro Forma S. Invoice,S.Arch.Blanket,P.Arch.Blanket,Phys.Invt.Order Test,Phys.Invt.Order,P.Phys.Invt.Order,Phys.Invt.Rec.,P.Phys.Invt.Rec. }
    { 2   ;   ;Sequence            ;Code10        ;CaptionML=[ENU=Sequence;
                                                              NOR=Rekkef›lge;
                                                              SVE=Nr i skrivark”];
                                                   Numeric=Yes }
    { 3   ;   ;Report ID           ;Integer       ;TableRelation=AllObjWithCaption."Object ID" WHERE (Object Type=CONST(Report));
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Report Caption");
                                                                VALIDATE("Use for Email Body",FALSE);

                                                                Description := COPYSTR("Report Caption",1,MAXSTRLEN(Description)); //**4PS.n
                                                              END;

                                                   CaptionML=[ENU=Report ID;
                                                              NOR=Rapport-ID;
                                                              SVE=Rapport-ID] }
    { 4   ;   ;Report Caption      ;Text250       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObjWithCaption."Object Caption" WHERE (Object Type=CONST(Report),
                                                                                                                Object ID=FIELD(Report ID)));
                                                   CaptionML=[ENU=Report Caption;
                                                              NOR=Rapportoverskrift;
                                                              SVE=Rapportrubrik];
                                                   Editable=No }
    { 7   ;   ;Custom Report Layout Code;Code20   ;TableRelation="Custom Report Layout".Code WHERE (Code=FIELD(Custom Report Layout Code));
                                                   CaptionML=[ENU=Custom Report Layout Code;
                                                              NOR=Kode for egendefinert rapportoppsett;
                                                              SVE=Anpassad rapportlayoutkod];
                                                   Editable=No }
    { 19  ;   ;Use for Email Attachment;Boolean   ;InitValue=Yes;
                                                   OnValidate=BEGIN
                                                                IF NOT "Use for Email Body" THEN
                                                                  VALIDATE("Email Body Layout Code",'');
                                                              END;

                                                   CaptionML=[ENU=Use for Email Attachment;
                                                              NOR=Bruk for e-postvedlegg;
                                                              SVE=Anv„nd till e-postbilaga] }
    { 20  ;   ;Use for Email Body  ;Boolean       ;OnValidate=BEGIN
                                                                IF NOT "Use for Email Body" THEN
                                                                  VALIDATE("Email Body Layout Code",'');
                                                              END;

                                                   CaptionML=[ENU=Use for Email Body;
                                                              NOR=Bruk for br›dtekst i e-post;
                                                              SVE=Anv„nd till br”dtext i e-post] }
    { 21  ;   ;Email Body Layout Code;Code20      ;TableRelation=IF (Email Body Layout Type=CONST(Custom Report Layout)) "Custom Report Layout".Code WHERE (Code=FIELD(Email Body Layout Code),
                                                                                                                                                            Report ID=FIELD(Report ID))
                                                                                                                                                            ELSE IF (Email Body Layout Type=CONST(HTML Layout)) "O365 HTML Template".Code;
                                                   OnValidate=BEGIN
                                                                IF "Email Body Layout Code" <> '' THEN
                                                                  TESTFIELD("Use for Email Body",TRUE);
                                                                CALCFIELDS("Email Body Layout Description");
                                                              END;

                                                   CaptionML=[ENU=Email Body Layout Code;
                                                              NOR=Oppsettskode for br›dtekst i e-post;
                                                              SVE=Layoutkod f”r br”dtext i e-post] }
    { 22  ;   ;Email Body Layout Description;Text250;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup("Custom Report Layout".Description WHERE (Code=FIELD(Email Body Layout Code)));
                                                   OnLookup=VAR
                                                              CustomReportLayout@1001 : Record 9650;
                                                            BEGIN
                                                              IF "Email Body Layout Type" = "Email Body Layout Type"::"Custom Report Layout" THEN
                                                                IF CustomReportLayout.LookupLayoutOK("Report ID") THEN
                                                                  VALIDATE("Email Body Layout Code",CustomReportLayout.Code);
                                                            END;

                                                   CaptionML=[ENU=Email Body Layout Description;
                                                              NOR=Oppsettbeskrivelse for br›dtekst i e-post;
                                                              SVE=Beskrivning av layout p† br”dtext i e-post];
                                                   Editable=No }
    { 25  ;   ;Email Body Layout Type;Option      ;CaptionML=[ENU=Email Body Layout Type;
                                                              NOR=Oppsettstype for br›dtekst i e-post];
                                                   OptionCaptionML=[ENU=Custom Report Layout,HTML Layout;
                                                                    NOR=Egendefinert rapportoppsett,HTML-oppsett];
                                                   OptionString=Custom Report Layout,HTML Layout }
    { 11012000;;Description        ;Text30        ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 11012550;;No Request Form    ;Boolean       ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF (NOT "No Request Form") THEN
                                                                  "Printer Selection" := FALSE
                                                                ELSE BEGIN
                                                                  CASE Usage OF
                                                                    1598, //* Plant Inventory
                                                                    1599: //* Plant Inventory Course
                                                                      FIELDERROR("No Request Form", STRSUBSTNO(Text11012000, FIELDCAPTION(Usage)));
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=No Request Form;
                                                              NOR=Ingen foresp›rselskjemaer;
                                                              SVE=Inget formul„r f”r f”rfr†gan] }
    { 11012560;;Printer Selection  ;Boolean       ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Printer Selection" THEN BEGIN
                                                                  TESTFIELD("No Request Form");
                                                                  CASE Usage OF
                                                                    1551, //* Plant Transport Order
                                                                    1552, //* Plant Posted Transport Order
                                                                    1557: //* Plant Order Picking List
                                                                      ;  //* OK, no action
                                                                    ELSE
                                                                      FIELDERROR("Printer Selection", STRSUBSTNO(Text11012000, FIELDCAPTION(Usage)));
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Printer Selection;
                                                              NOR=Skrivervalg;
                                                              SVE=Skrivarval] }
    { 11012562;;Default Selection  ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Default Selection;
                                                              NOR=Standardvalg;
                                                              SVE=Standardval] }
  }
  KEYS
  {
    {    ;Usage,Sequence                          ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ReportSelection2@1000 : Record 77;
      MustSelectAndEmailBodyOrAttahmentErr@1001 : TextConst '@@@="%1 = Usage, for example Sales Invoice";ENU=You must select an email body or attachment in report selection for %1.;NOR=Du m† velge en br›dtekst i e-post eller et vedlegg i rapportvalget for %1.;SVE=Du m†ste v„lja br”dtext eller bilaga f”r e-post i rapportvalet f”r %1.';
      EmailBodyIsAlreadyDefinedErr@1002 : TextConst '@@@="%1 = Usage, for example Sales Invoice";ENU=An email body is already defined for %1.;NOR=Br›dtekst i e-post er allerede definert for %1.;SVE=En br”dtext f”r e-post har redan definierats f”r %1.';
      CannotBeUsedAsAnEmailBodyErr@1003 : TextConst '@@@="%1 = Report ID,%2 = Type";ENU=Report %1 uses the %2 which cannot be used as an email body.;NOR=Rapporten %1 bruker %2, som ikke kan brukes som br›dtekst i e-post.;SVE=Rapporten %1 anv„nder %2 som inte kan anv„ndas som br”dtext f”r e-post.';
      ReportLayoutSelection@1004 : Record 9651;
      OneRecordWillBeSentQst@1005 : TextConst 'ENU=Only the first of the selected documents can be scheduled in the job queue.\\Do you want to continue?;NOR=Bare det f›rste av de valgte dokumentene kan legges til i jobbk›en.\\Vil du fortsette?';
      AccountNoTok@1006 : TextConst '@@@={Locked};ENU=''%1'';NOR=''%1''';
      MailingJobCategoryTok@1007 : TextConst 'ENU=Sending invoices via email;NOR=Sending av fakturaer via e-post';
      MailingJobCategoryCodeTok@1008 : TextConst '@@@=Must be max. 10 chars and no spacing. (Send Invoice);ENU=SENDINV;NOR=SENDFAKT';
      FileManagement@1009 : Codeunit 419;
      Text11012000@1100485000 : TextConst 'ENU=not allowed for this %1;NOR=tillates ikke for denne %1;SVE=till†ts inte f”r den h„r %1';
      Text11012001@1100525000 : TextConst 'ENU=Cannot open the document because it is empty or cannot be created.';
      Text11012002@1100525001 : TextConst 'ENU=No reports selected.;NOR=Ingen rapporter er valgt.;SVE=Inga rapporter har valts.';
      MailTemplateManagement@1100528300 : Codeunit 11012622;
      DirectPostOrderBeforeMailingAccordingToVendor@1100525002 : Boolean;
      SendQuoteThanksLetter@1100525003 : Boolean;
      SendPurchaseOrderReceipt@1100525007 : Boolean;
      ArchiveOrderAfterMailing@1100525004 : Boolean;
      UseCompanyEMailOfEmployee@1100525008 : Boolean;
      ServiceWorksheetIsSentManually@1100525009 : Boolean;
      ChangeStatusAfterMailing@1100525005 : 'None,Released,Closed';
      SubcontractorTypeOfMail@1100525010 : 'Not Finished,Not Invoiced';
      EMailSubject@1100525006 : Text[50];
      SubcontractorNoOfDays@1100525011 : Integer;
      Text11012003@1100525013 : TextConst 'ENU=No printer present.;NOR=Det finnes ingen skriver.;SVE=Det finns ingen skrivare.';
      Text11012004@1100525012 : TextConst 'ENU=No printer selected.;NOR=Ingen skriver er valgt.;SVE=Ingen skrivare har valts.';
      UseEMailForPurchReceipt@1100529600 : Boolean;

    [External]
    PROCEDURE NewRecord@1();
    BEGIN
      //**4PS.sn C022158
      FILTERGROUP(2);
      IF GETFILTER(Usage) <> '' THEN
        EVALUATE(Usage,GETFILTER(Usage));
      FILTERGROUP(0);
      //**4PS.en C022158

      ReportSelection2.SETRANGE(Usage,Usage);
      IF ReportSelection2.FINDLAST AND (ReportSelection2.Sequence <> '') THEN
        Sequence := INCSTR(ReportSelection2.Sequence)
      ELSE
        Sequence := '1';
    END;

    LOCAL PROCEDURE CheckEmailBodyUsage@19();
    VAR
      ReportSelections@1001 : Record 77;
      ReportLayoutSelection@1000 : Record 9651;
    BEGIN
      IF "Use for Email Body" THEN BEGIN
        ReportSelections.FilterEmailBodyUsage(Usage);
        ReportSelections.SETFILTER(Sequence,'<>%1',Sequence);
        IF NOT ReportSelections.ISEMPTY THEN
          ERROR(EmailBodyIsAlreadyDefinedErr,Usage);

        IF "Email Body Layout Code" = '' THEN
          IF ReportLayoutSelection.GetDefaultType("Report ID") =
             ReportLayoutSelection.Type::"RDLC (built-in)"
          THEN
            ERROR(CannotBeUsedAsAnEmailBodyErr,"Report ID",ReportLayoutSelection.Type);
      END;
    END;

    [External]
    PROCEDURE FilterPrintUsage@2(ReportUsage@1000 : Integer);
    BEGIN
      //RESET; //**4PS.o
      ResetWithoutLosingGlobalVars; //**4PS.n
      SETRANGE(Usage,ReportUsage);
    END;

    [External]
    PROCEDURE FilterEmailUsage@3(ReportUsage@1000 : Integer);
    BEGIN
      //RESET; //**4PS.o
      ResetWithoutLosingGlobalVars; //**4PS.n
      SETRANGE(Usage,ReportUsage);
      SETRANGE("Use for Email Body",TRUE);
    END;

    [External]
    PROCEDURE FilterEmailBodyUsage@13(ReportUsage@1000 : Integer);
    BEGIN
      //RESET; //**4PS.o
      ResetWithoutLosingGlobalVars; //**4PS.n
      SETRANGE(Usage,ReportUsage);
      SETRANGE("Use for Email Body",TRUE);
    END;

    [External]
    PROCEDURE FilterEmailAttachmentUsage@11(ReportUsage@1000 : Integer);
    BEGIN
      //RESET; //**4PS.o
      ResetWithoutLosingGlobalVars; //**4PS.n
      SETRANGE(Usage,ReportUsage);
      SETRANGE("Use for Email Attachment",TRUE);
    END;

    [External]
    PROCEDURE FindPrintUsage@4(ReportUsage@1000 : Integer;CustNo@1002 : Code[20];AllowReportSelPage@1100525000 : Boolean;VAR ReportSelections@1001 : Record 77);
    BEGIN
      //FindPrintUsageInternal(ReportUsage,CustNo,ReportSelections,DATABASE::Customer); //**4PS.o
      FindPrintUsageInternal(ReportUsage,CustNo,ReportSelections,DATABASE::Customer,AllowReportSelPage); //**4PS.n
    END;

    [External]
    PROCEDURE FindPrintUsageVendor@33(ReportUsage@1002 : Integer;VendorNo@1001 : Code[20];AllowReportSelPage@1100525000 : Boolean;VAR ReportSelections@1000 : Record 77);
    BEGIN
      //FindPrintUsageInternal(ReportUsage,VendorNo,ReportSelections,DATABASE::Vendor); //**4PS.o
      FindPrintUsageInternal(ReportUsage,VendorNo,ReportSelections,DATABASE::Vendor,AllowReportSelPage); //**4PS.n
    END;

    LOCAL PROCEDURE FindPrintUsageInternal@44(ReportUsage@1000 : Integer;AccountNo@1002 : Code[20];VAR ReportSelections@1001 : Record 77;TableNo@1003 : Integer;AllowReportSelPage@1100525000 : Boolean);
    BEGIN
      FilterPrintUsage(ReportUsage);
      SETFILTER("Report ID",'<>0');

      //FindReportSelections(ReportSelections,AccountNo,TableNo); //**4PS.o
      FindReportSelections(ReportSelections,AccountNo,TableNo,AllowReportSelPage,TRUE); //**4PS.n
      ReportSelections.FINDSET;
    END;

    [External]
    PROCEDURE FindEmailAttachmentUsage@10(ReportUsage@1000 : Integer;CustNo@1002 : Code[20];AllowReportSelPage@1100525000 : Boolean;ThrowErrorIfNoReportFound@1100525001 : Boolean;VAR ReportSelections@1001 : Record 77) : Boolean;
    BEGIN
      FilterEmailAttachmentUsage(ReportUsage);
      SETFILTER("Report ID",'<>0');
      SETRANGE("Use for Email Attachment",TRUE);

      //FindReportSelections(ReportSelections,CustNo,DATABASE::Customer); //**4PS.o
      FindReportSelections(ReportSelections,CustNo,DATABASE::Customer,AllowReportSelPage,ThrowErrorIfNoReportFound); //**4PS.n
      EXIT(ReportSelections.FINDSET);
    END;

    [External]
    PROCEDURE FindEmailAttachmentUsageVendor@45(ReportUsage@1002 : Integer;VendorNo@1001 : Code[20];AllowReportSelPage@1100525001 : Boolean;ThrowErrorIfNoReportFound@1100525000 : Boolean;VAR ReportSelections@1000 : Record 77) : Boolean;
    BEGIN
      FilterEmailAttachmentUsage(ReportUsage);
      SETFILTER("Report ID",'<>0');
      SETRANGE("Use for Email Attachment",TRUE);

      //FindReportSelections(ReportSelections,VendorNo,DATABASE::Vendor); //**4PS.o
      FindReportSelections(ReportSelections,VendorNo,DATABASE::Vendor,AllowReportSelPage,ThrowErrorIfNoReportFound); //**4PS.n
      EXIT(ReportSelections.FINDSET);
    END;

    [External]
    PROCEDURE FindEmailBodyUsage@5(ReportUsage@1000 : Integer;CustNo@1002 : Code[20];VAR ReportSelections@1001 : Record 77) : Boolean;
    BEGIN
      FilterEmailBodyUsage(ReportUsage);
      SETFILTER("Report ID",'<>0');

      //FindReportSelections(ReportSelections,CustNo,DATABASE::Customer); //**4PS.o
      FindReportSelections(ReportSelections,CustNo,DATABASE::Customer,FALSE,FALSE); //**4PS.n
      EXIT(ReportSelections.FINDSET);
    END;

    [External]
    PROCEDURE FindEmailBodyUsageVendor@42(ReportUsage@1002 : Integer;VendorNo@1001 : Code[20];VAR ReportSelections@1000 : Record 77) : Boolean;
    BEGIN
      FilterEmailBodyUsage(ReportUsage);
      SETFILTER("Report ID",'<>0');

      //FindReportSelections(ReportSelections,VendorNo,DATABASE::Vendor); //**4PS.o
      FindReportSelections(ReportSelections,VendorNo,DATABASE::Vendor,FALSE,FALSE); //**4PS.n
      EXIT(ReportSelections.FINDSET);
    END;

    [External]
    PROCEDURE PrintWithCheck@6(ReportUsage@1000 : Integer;RecordVariant@1001 : Variant;CustomerNoFieldNo@1003 : Integer);
    VAR
      Handled@1002 : Boolean;
    BEGIN
      OnBeforePrintWithCheck(ReportUsage,RecordVariant,CustomerNoFieldNo,Handled);
      IF Handled THEN
        EXIT;

      //PrintWithGUIYesNoWithCheck(ReportUsage,RecordVariant,TRUE,CustomerNoFieldNo); //**4PS.o
      PrintWithGUIYesNoWithCheck(ReportUsage,RecordVariant,TRUE,CustomerNoFieldNo,TRUE); //**4PS.n
    END;

    [External]
    PROCEDURE PrintWithGUIYesNoWithCheck@12(ReportUsage@1000 : Integer;RecordVariant@1001 : Variant;IsGUI@1002 : Boolean;CustomerNoFieldNo@1005 : Integer;AllowReportSelPage@1100525000 : Boolean);
    VAR
      Handled@1003 : Boolean;
    BEGIN
      OnBeforePrintWithGUIYesNoWithCheck(ReportUsage,RecordVariant,IsGUI,CustomerNoFieldNo,Handled);
      IF Handled THEN
        EXIT;

      //PrintDocumentsWithCheckGUIYesNoCommon(ReportUsage,RecordVariant,IsGUI,CustomerNoFieldNo,TRUE,DATABASE::Customer); //**4PS.o
      PrintDocumentsWithCheckGUIYesNoCommon(ReportUsage,RecordVariant,IsGUI,CustomerNoFieldNo,TRUE,DATABASE::Customer,AllowReportSelPage); //**4PS.n
    END;

    [External]
    PROCEDURE PrintWithGUIYesNoWithCheckVendor@66(ReportUsage@1000 : Integer;RecordVariant@1001 : Variant;IsGUI@1002 : Boolean;VendorNoFieldNo@1005 : Integer);
    VAR
      Handled@1003 : Boolean;
    BEGIN
      OnBeforePrintWithGUIYesNoWithCheckVendor(ReportUsage,RecordVariant,IsGUI,VendorNoFieldNo,Handled);
      IF Handled THEN
        EXIT;

      //PrintDocumentsWithCheckGUIYesNoCommon(ReportUsage,RecordVariant,IsGUI,VendorNoFieldNo,TRUE,DATABASE::Vendor); //**4PS.o
      PrintDocumentsWithCheckGUIYesNoCommon(ReportUsage,RecordVariant,IsGUI,VendorNoFieldNo,TRUE,DATABASE::Vendor,FALSE); //**4PS.n
    END;

    [External]
    PROCEDURE Print@7(ReportUsage@1000 : Integer;RecordVariant@1001 : Variant;CustomerNoFieldNo@1003 : Integer);
    VAR
      Handled@1002 : Boolean;
    BEGIN
      OnBeforePrint(ReportUsage,RecordVariant,CustomerNoFieldNo,Handled);
      IF Handled THEN
        EXIT;

      //PrintWithGUIYesNo(ReportUsage,RecordVariant,TRUE,CustomerNoFieldNo); //**4PS.o
      PrintWithGUIYesNo(ReportUsage,RecordVariant,TRUE,TRUE,CustomerNoFieldNo); //**4PS.n
    END;

    [External]
    PROCEDURE PrintWithGUIYesNo@8(ReportUsage@1000 : Integer;RecordVariant@1001 : Variant;IsGUI@1002 : Boolean;AllowReportSelPage@1100525000 : Boolean;CustomerNoFieldNo@1005 : Integer);
    VAR
      Handled@1003 : Boolean;
    BEGIN
      OnBeforePrintWithGUIYesNo(ReportUsage,RecordVariant,IsGUI,CustomerNoFieldNo,Handled);
      IF Handled THEN
        EXIT;

      //PrintDocumentsWithCheckGUIYesNoCommon(ReportUsage,RecordVariant,IsGUI,CustomerNoFieldNo,FALSE,DATABASE::Customer); //**4PS.o
      PrintDocumentsWithCheckGUIYesNoCommon(ReportUsage,RecordVariant,IsGUI,CustomerNoFieldNo,FALSE,DATABASE::Customer,AllowReportSelPage); //**4PS.n
    END;

    [External]
    PROCEDURE PrintWithGUIYesNoVendor@32(ReportUsage@1003 : Integer;RecordVariant@1002 : Variant;IsGUI@1001 : Boolean;AllowReportSelPage@1100525000 : Boolean;VendorNoFieldNo@1005 : Integer);
    VAR
      Handled@1000 : Boolean;
    BEGIN
      OnBeforePrintWithGUIYesNoVendor(ReportUsage,RecordVariant,IsGUI,VendorNoFieldNo,Handled);
      IF Handled THEN
        EXIT;

      //PrintDocumentsWithCheckGUIYesNoCommon(ReportUsage,RecordVariant,IsGUI,VendorNoFieldNo,FALSE,DATABASE::Vendor); //**4PS.o
      PrintDocumentsWithCheckGUIYesNoCommon(ReportUsage,RecordVariant,IsGUI,VendorNoFieldNo,FALSE,DATABASE::Vendor,AllowReportSelPage); //**4PS.n
    END;

    LOCAL PROCEDURE PrintDocumentsWithCheckGUIYesNoCommon@65(ReportUsage@1000 : Integer;RecordVariant@1001 : Variant;IsGUI@1002 : Boolean;AccountNoFieldNo@1005 : Integer;WithCheck@1009 : Boolean;TableNo@1008 : Integer;AllowReportSelPage@1100525000 : Boolean);
    VAR
      TempReportSelections@1004 : TEMPORARY Record 77;
      TempNameValueBuffer@1006 : TEMPORARY Record 823;
      RecRef@1007 : RecordRef;
      RecRefToPrint@1003 : RecordRef;
      RecVarToPrint@1011 : Variant;
      AccountNoFilter@1013 : Text;
      IsHandled@1010 : Boolean;
    BEGIN
      OnBeforeSetReportLayout(RecordVariant);

      RecRef.GETTABLE(RecordVariant);
      GetUniqueAccountNos(TempNameValueBuffer,RecRef,AccountNoFieldNo);

      //SelectTempReportSelectionsToPrint(TempReportSelections,TempNameValueBuffer,WithCheck,ReportUsage,TableNo); //**4PS.o
      SelectTempReportSelectionsToPrint(TempReportSelections,TempNameValueBuffer,WithCheck,ReportUsage,TableNo,AllowReportSelPage); //**4PS.n
      OnPrintDocumentsOnAfterSelectTempReportSelectionsToPrint(
        RecordVariant,TempReportSelections,TempNameValueBuffer,WithCheck,ReportUsage,TableNo);
      IF TempReportSelections.FINDSET THEN
        REPEAT
          IF TempReportSelections."Custom Report Layout Code" <> '' THEN
            ReportLayoutSelection.SetTempLayoutSelected(TempReportSelections."Custom Report Layout Code")
          ELSE
            ReportLayoutSelection.SetTempLayoutSelected('');

          TempNameValueBuffer.FINDSET;
          AccountNoFilter := GetAccountNoFilterForCustomReportLayout(TempReportSelections,TempNameValueBuffer,TableNo);
          GetFilteredRecordRef(RecRefToPrint,RecRef,AccountNoFieldNo,AccountNoFilter);
          RecVarToPrint := RecRefToPrint;

          IsHandled := FALSE;
          OnBeforePrintDocument(TempReportSelections,IsGUI,RecVarToPrint,IsHandled);
          IF NOT IsHandled THEN
            //**4PS.sn
            IF "No Request Form" THEN
              REPORT.RUNMODAL(TempReportSelections."Report ID",FALSE,FALSE,RecVarToPrint)
            ELSE
            //**4PS.en
              REPORT.RUNMODAL(TempReportSelections."Report ID",IsGUI,FALSE,RecVarToPrint);

          OnAfterPrintDocument(TempReportSelections,IsGUI,RecVarToPrint);

          ReportLayoutSelection.SetTempLayoutSelected('');
        UNTIL TempReportSelections.NEXT = 0;
    END;

    LOCAL PROCEDURE GetFilteredRecordRef@88(VAR RecRefToPrint@1000 : RecordRef;RecRefSource@1001 : RecordRef;AccountNoFieldNo@1002 : Integer;AccountNoFilter@1003 : Text);
    VAR
      AccountNoFieldRef@1004 : FieldRef;
      CurrentFilterGroup@1005 : Integer;
    BEGIN
      RecRefToPrint := RecRefSource.DUPLICATE;

      IF (AccountNoFieldNo <> 0) AND (AccountNoFilter <> '') THEN BEGIN
        CurrentFilterGroup := RecRefToPrint.FILTERGROUP;
        RecRefToPrint.FILTERGROUP(10);
        AccountNoFieldRef := RecRefToPrint.FIELD(AccountNoFieldNo);
        AccountNoFieldRef.SETFILTER(AccountNoFilter);
        RecRefToPrint.FILTERGROUP(CurrentFilterGroup);
      END;

      IF RecRefToPrint.FINDSET THEN;
    END;

    LOCAL PROCEDURE GetAccountNoFilterForCustomReportLayout@72(VAR TempReportSelections@1000 : TEMPORARY Record 77;VAR TempNameValueBuffer@1001 : TEMPORARY Record 823;TableNo@1002 : Integer) : Text;
    VAR
      CustomReportSelection@1005 : Record 9657;
      AccountNo@1003 : Code[20];
      AccountNoFilter@1004 : Text;
      AccountHasCustomSelection@1006 : Boolean;
      ReportInvolvedInCustomSelection@1007 : Boolean;
    BEGIN
      CustomReportSelection.SETRANGE("Source Type",TableNo);
      CustomReportSelection.SETRANGE(Usage,TempReportSelections.Usage);
      CustomReportSelection.SETRANGE("Report ID",TempReportSelections."Report ID");

      ReportInvolvedInCustomSelection := NOT CustomReportSelection.ISEMPTY;

      AccountNoFilter := '';

      TempNameValueBuffer.FINDSET;
      REPEAT
        AccountNo := COPYSTR(TempNameValueBuffer.Name,1,MAXSTRLEN(AccountNo));
        CustomReportSelection.SETRANGE("Source No.",AccountNo);

        IF ReportInvolvedInCustomSelection THEN BEGIN
          CustomReportSelection.SETRANGE("Custom Report Layout Code",TempReportSelections."Custom Report Layout Code");

          AccountHasCustomSelection := NOT CustomReportSelection.ISEMPTY;
          IF AccountHasCustomSelection THEN
            AccountNoFilter += STRSUBSTNO(AccountNoTok,AccountNo) + '|';

          CustomReportSelection.SETRANGE("Custom Report Layout Code");
        END ELSE BEGIN
          CustomReportSelection.SETRANGE("Report ID");

          AccountHasCustomSelection := NOT CustomReportSelection.ISEMPTY;
          IF NOT AccountHasCustomSelection THEN
            AccountNoFilter += STRSUBSTNO(AccountNoTok,AccountNo) + '|';

          CustomReportSelection.SETRANGE("Report ID",TempReportSelections."Report ID");
        END;

      UNTIL TempNameValueBuffer.NEXT = 0;

      AccountNoFilter := DELCHR(AccountNoFilter,'>','|');
      EXIT(AccountNoFilter);
    END;

    LOCAL PROCEDURE SelectTempReportSelections@73(VAR TempReportSelections@1003 : TEMPORARY Record 77;AccountNo@1000 : Code[20];WithCheck@1001 : Boolean;ReportUsage@1002 : Option;TableNo@1004 : Integer;AllowReportSelPage@1100525000 : Boolean);
    BEGIN
      IF WithCheck THEN BEGIN
        FilterPrintUsage(ReportUsage);
      //FindReportSelections(TempReportSelections,AccountNo,TableNo); //**4PS.o
        FindReportSelections(TempReportSelections,AccountNo,TableNo,AllowReportSelPage,FALSE); //**4PS.n
        IF NOT TempReportSelections.FINDSET THEN
          FINDSET;
      END ELSE
      //FindPrintUsageInternal(ReportUsage,AccountNo,TempReportSelections,TableNo); //**4PS.o
        FindPrintUsageInternal(ReportUsage,AccountNo,TempReportSelections,TableNo,AllowReportSelPage); //**4PS.n
    END;

    LOCAL PROCEDURE SelectTempReportSelectionsToPrint@76(VAR TempReportSelections@1007 : TEMPORARY Record 77;VAR TempNameValueBuffer@1000 : TEMPORARY Record 823;WithCheck@1003 : Boolean;ReportUsage@1004 : Option;TableNo@1005 : Integer;AllowReportSelPage@1100525000 : Boolean);
    VAR
      TempReportSelectionsAccount@1002 : TEMPORARY Record 77;
      AccountNo@1001 : Code[20];
      LastSequence@1006 : Code[10];
    BEGIN
      IF TempNameValueBuffer.FINDSET THEN
        REPEAT
          AccountNo := COPYSTR(TempNameValueBuffer.Name,1,MAXSTRLEN(AccountNo));
          TempReportSelectionsAccount.RESET;
          TempReportSelectionsAccount.DELETEALL;
          SelectTempReportSelections(TempReportSelectionsAccount,AccountNo,WithCheck,ReportUsage,TableNo,AllowReportSelPage);
          IF TempReportSelectionsAccount.FINDSET THEN
            REPEAT
              LastSequence := GetLastSequenceNo(TempReportSelections,ReportUsage);
              IF NOT HasReportWithUsage(TempReportSelections,ReportUsage,TempReportSelectionsAccount."Report ID") THEN BEGIN
                TempReportSelections := TempReportSelectionsAccount;
                IF LastSequence = '' THEN
                  TempReportSelections.Sequence := '1'
                ELSE
                  TempReportSelections.Sequence := INCSTR(LastSequence);
                TempReportSelections.INSERT;
              END;
            UNTIL TempReportSelectionsAccount.NEXT = 0;
        UNTIL TempNameValueBuffer.NEXT = 0;
    END;

    [Internal]
    PROCEDURE GetHtmlReport@29(VAR DocumentContent@1001 : Text;ReportUsage@1002 : Integer;RecordVariant@1004 : Variant;CustNo@1003 : Code[20]);
    VAR
      TempBodyReportSelections@1000 : TEMPORARY Record 77;
      ServerEmailBodyFilePath@1005 : Text[250];
      IsHandled@1006 : Boolean;
    BEGIN
      OnBeforeGetHtmlReport(DocumentContent,ReportUsage,RecordVariant,CustNo,IsHandled);
      IF IsHandled THEN
        EXIT;

      //FindPrintUsage(ReportUsage,CustNo,TempBodyReportSelections); //**4PS.o
      FindPrintUsage(ReportUsage,CustNo,FALSE,TempBodyReportSelections); //**4PS.n

      ServerEmailBodyFilePath :=
        SaveReportAsHTML(TempBodyReportSelections."Report ID",RecordVariant,TempBodyReportSelections."Custom Report Layout Code");

      DocumentContent := '';
      IF ServerEmailBodyFilePath <> '' THEN
        DocumentContent := FileManagement.GetFileContent(ServerEmailBodyFilePath);
    END;

    [Internal]
    PROCEDURE GetPdfReport@52(VAR ServerEmailBodyFilePath@1001 : Text[250];ReportUsage@1002 : Integer;RecordVariant@1004 : Variant;CustNo@1003 : Code[20]);
    VAR
      TempBodyReportSelections@1000 : TEMPORARY Record 77;
    BEGIN
      ServerEmailBodyFilePath := '';

      //FindPrintUsage(ReportUsage,CustNo,TempBodyReportSelections); //**4PS.o
      FindPrintUsage(ReportUsage,CustNo,FALSE,TempBodyReportSelections); //**4PS.n

      ServerEmailBodyFilePath :=
        SaveReportAsPDF(TempBodyReportSelections."Report ID",RecordVariant,TempBodyReportSelections."Custom Report Layout Code");
    END;

    [Internal]
    PROCEDURE GetEmailBody@20(VAR ServerEmailBodyFilePath@1001 : Text[250];ReportUsage@1002 : Integer;RecordVariant@1004 : Variant;CustNo@1003 : Code[20];VAR CustEmailAddress@1005 : Text[250]) : Boolean;
    BEGIN
      EXIT(GetEmailBodyCustomText(ServerEmailBodyFilePath,ReportUsage,RecordVariant,CustNo,CustEmailAddress,''));
    END;

    [Internal]
    PROCEDURE GetEmailBodyCustomText@327(VAR ServerEmailBodyFilePath@1000 : Text[250];ReportUsage@1001 : Integer;RecordVariant@1002 : Variant;CustNo@1003 : Code[20];VAR CustEmailAddress@1004 : Text[250];EmailBodyText@1005 : Text) : Boolean;
    VAR
      TempBodyReportSelections@1006 : TEMPORARY Record 77;
      O365HTMLTemplMgt@1007 : Codeunit 2114;
      IsHandled@1008 : Boolean;
    BEGIN
      ServerEmailBodyFilePath := '';

      OnBeforeGetEmailBodyCustomer;

      IF CustEmailAddress = '' THEN
        CustEmailAddress := GetEmailAddressIgnoringLayout(ReportUsage,RecordVariant,CustNo);

      IF NOT FindEmailBodyUsage(ReportUsage,CustNo,TempBodyReportSelections) THEN BEGIN
        IsHandled := FALSE;
        OnGetEmailBodyCustomerTextOnAfterNotFindEmailBodyUsage(
          ReportUsage,RecordVariant,CustNo,TempBodyReportSelections,IsHandled);
        IF IsHandled THEN
          EXIT(TRUE);
        EXIT(FALSE);
      END;

      CASE "Email Body Layout Type" OF
        "Email Body Layout Type"::"Custom Report Layout":
          ServerEmailBodyFilePath :=
            SaveReportAsHTML(TempBodyReportSelections."Report ID",RecordVariant,TempBodyReportSelections."Email Body Layout Code");
        "Email Body Layout Type"::"HTML Layout":
          ServerEmailBodyFilePath :=
            O365HTMLTemplMgt.CreateEmailBodyFromReportSelections(Rec,RecordVariant,CustEmailAddress,EmailBodyText);
      END;

      CustEmailAddress := GetEmailAddress(ReportUsage,RecordVariant,CustNo,TempBodyReportSelections);

      OnAfterGetEmailBodyCustomer(CustEmailAddress,ServerEmailBodyFilePath);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetEmailAddressIgnoringLayout@70(ReportUsage@1002 : Integer;RecordVariant@1004 : Variant;CustNo@1003 : Code[20]) : Text[250];
    VAR
      TempBodyReportSelections@1000 : TEMPORARY Record 77;
      EmailAddress@1001 : Text[250];
    BEGIN
      EmailAddress := GetEmailAddress(ReportUsage,RecordVariant,CustNo,TempBodyReportSelections);
      EXIT(EmailAddress);
    END;

    LOCAL PROCEDURE GetEmailAddress@60(ReportUsage@1002 : Integer;RecordVariant@1004 : Variant;CustNo@1003 : Code[20];VAR TempBodyReportSelections@1000 : TEMPORARY Record 77) : Text[250];
    VAR
      DataTypeManagement@1008 : Codeunit 701;
      RecordRef@1007 : RecordRef;
      FieldRef@1009 : FieldRef;
      DocumentNo@1011 : Code[20];
      EmailAddress@1001 : Text[250];
    BEGIN
      RecordRef.GETTABLE(RecordVariant);
      IF NOT RecordRef.ISEMPTY THEN
        IF DataTypeManagement.FindFieldByName(RecordRef,FieldRef,'No.') THEN BEGIN
          DocumentNo := FieldRef.VALUE;
          EmailAddress := GetDocumentEmailAddress(DocumentNo,ReportUsage);
          IF EmailAddress <> '' THEN
            EXIT(EmailAddress);
        END;

      IF NOT TempBodyReportSelections.ISEMPTY THEN BEGIN
        EmailAddress :=
          FindEmailAddressForEmailLayout(TempBodyReportSelections."Email Body Layout Code",CustNo,ReportUsage,DATABASE::Customer);
        IF EmailAddress <> '' THEN
          EXIT(EmailAddress);
      END;

      EmailAddress := GetCustEmailAddress(CustNo,ReportUsage);
      IF EmailAddress <> '' THEN
        EXIT(EmailAddress);

      IF NOT RecordRef.ISEMPTY THEN
        IF IsSalesDocument(RecordRef) THEN
          IF DataTypeManagement.FindFieldByName(RecordRef,FieldRef,'Sell-to E-Mail') THEN BEGIN
            EmailAddress := FieldRef.VALUE;
            IF EmailAddress <> '' THEN
              EXIT(EmailAddress);
          END;

      EXIT(EmailAddress);
    END;

    [Internal]
    PROCEDURE GetEmailBodyVendor@40(VAR ServerEmailBodyFilePath@1004 : Text[250];ReportUsage@1003 : Integer;RecordVariant@1002 : Variant;VendorNo@1001 : Code[20];VAR VendorEmailAddress@1000 : Text[250]) : Boolean;
    VAR
      TempBodyReportSelections@1005 : TEMPORARY Record 77;
      FoundVendorEmailAddress@1007 : Text[250];
      IsHandled@1006 : Boolean;
    BEGIN
      ServerEmailBodyFilePath := '';

      OnBeforeGetEmailBodyVendor;

      VendorEmailAddress := GetVendorEmailAddress(VendorNo,RecordVariant,ReportUsage);

      IF NOT FindEmailBodyUsageVendor(ReportUsage,VendorNo,TempBodyReportSelections) THEN BEGIN
        IsHandled := FALSE;
        OnGetEmailBodyVendorTextOnAfterNotFindEmailBodyUsage(
          ReportUsage,RecordVariant,VendorNo,TempBodyReportSelections,IsHandled);
        IF IsHandled THEN
          EXIT(TRUE);
        EXIT(FALSE);
      END;

      ServerEmailBodyFilePath :=
        SaveReportAsHTML(TempBodyReportSelections."Report ID",RecordVariant,TempBodyReportSelections."Email Body Layout Code");

      FoundVendorEmailAddress :=
        FindEmailAddressForEmailLayout(TempBodyReportSelections."Email Body Layout Code",VendorNo,ReportUsage,DATABASE::Vendor);
      IF FoundVendorEmailAddress <> '' THEN
        VendorEmailAddress := FoundVendorEmailAddress;

      OnAfterGetEmailBodyVendor(VendorEmailAddress,ServerEmailBodyFilePath);

      EXIT(TRUE);
    END;

    [Internal]
    PROCEDURE SendEmailInBackground@30(JobQueueEntry@1000 : Record 472);
    VAR
      RecRef@1005 : RecordRef;
      ReportUsage@1004 : Integer;
      DocNo@1003 : Code[20];
      DocName@1002 : Text[150];
      No@1001 : Code[20];
      ParamString@1006 : Text;
    BEGIN
      // Called from codeunit 260 OnRun trigger - in a background process.
      RecRef.GET(JobQueueEntry."Record ID to Process");
      RecRef.LOCKTABLE;
      RecRef.FIND;
      RecRef.SETRECFILTER;
      ParamString := JobQueueEntry."Parameter String";  // Are set in function SendEmailToCust
      GetJobQueueParameters(ParamString,ReportUsage,DocNo,DocName,No);

      IF ParamString = 'Vendor' THEN
        SendEmailToVendorDirectly(ReportUsage,RecRef,DocNo,DocName,FALSE,No)
      ELSE
        SendEmailToCustDirectly(ReportUsage,RecRef,DocNo,DocName,FALSE,No);
    END;

    [External]
    PROCEDURE GetJobQueueParameters@56(VAR ParameterString@1000 : Text;VAR ReportUsage@1001 : Integer;VAR DocNo@1002 : Code[20];VAR DocName@1003 : Text[150];VAR CustNo@1004 : Code[20]) WasSuccessful : Boolean;
    BEGIN
      WasSuccessful := EVALUATE(ReportUsage,GetNextJobQueueParam(ParameterString));
      WasSuccessful := WasSuccessful AND EVALUATE(DocNo,GetNextJobQueueParam(ParameterString));
      WasSuccessful := WasSuccessful AND EVALUATE(DocName,GetNextJobQueueParam(ParameterString));
      WasSuccessful := WasSuccessful AND EVALUATE(CustNo,GetNextJobQueueParam(ParameterString));
    END;

    LOCAL PROCEDURE GetNextJobQueueParam@31(VAR Parameter@1000 : Text) : Text;
    VAR
      i@1001 : Integer;
      Result@1002 : Text;
    BEGIN
      i := STRPOS(Parameter,'|');
      IF i > 0 THEN
        Result := COPYSTR(Parameter,1,i - 1);
      IF (i + 1) < STRLEN(Parameter) THEN
        Parameter := COPYSTR(Parameter,i + 1);
      EXIT(Result);
    END;

    LOCAL PROCEDURE EnqueueMailingJob@99(RecordIdToProcess@1000 : RecordID;ParameterString@1001 : Text;Description@1002 : Text);
    VAR
      JobQueueEntry@1003 : Record 472;
    BEGIN
      JobQueueEntry.INIT;
      JobQueueEntry."Object Type to Run" := JobQueueEntry."Object Type to Run"::Codeunit;
      JobQueueEntry."Object ID to Run" := CODEUNIT::"Document-Mailing";
      JobQueueEntry."Job Queue Category Code" := GetMailingJobCategory;
      JobQueueEntry."Maximum No. of Attempts to Run" := 3;
      JobQueueEntry."Record ID to Process" := RecordIdToProcess;
      JobQueueEntry."Parameter String" := COPYSTR(ParameterString,1,MAXSTRLEN(JobQueueEntry."Parameter String"));
      JobQueueEntry.Description := COPYSTR(Description,1,MAXSTRLEN(JobQueueEntry.Description));
      CODEUNIT.RUN(CODEUNIT::"Job Queue - Enqueue",JobQueueEntry);
    END;

    LOCAL PROCEDURE GetMailingJobCategory@100() : Code[10];
    VAR
      JobQueueCategory@1000 : Record 471;
      MailingJobCategoryCode@1001 : Code[10];
    BEGIN
      MailingJobCategoryCode := GetMailingJobCategoryCode;
      IF NOT JobQueueCategory.GET(MailingJobCategoryCode) THEN BEGIN
        JobQueueCategory.INIT;
        JobQueueCategory.Code := MailingJobCategoryCode;
        JobQueueCategory.Description := COPYSTR(MailingJobCategoryTok,1,MAXSTRLEN(JobQueueCategory.Description));
        JobQueueCategory.INSERT;
      END;

      EXIT(JobQueueCategory.Code);
    END;

    LOCAL PROCEDURE GetMailingJobCategoryCode@90() : Code[10];
    BEGIN
      EXIT(COPYSTR(MailingJobCategoryCodeTok,1,10));
    END;

    [External]
    PROCEDURE SendEmailToCust@9(ReportUsage@1000 : Integer;RecordVariant@1001 : Variant;DocNo@1006 : Code[20];DocName@1004 : Text[150];ShowDialog@1007 : Boolean;CustNo@1010 : Code[20]);
    VAR
      O365DocumentSentHistory@1011 : Record 2158;
      GraphMail@1009 : Codeunit 405;
      SMTPMail@1002 : Codeunit 400;
      OfficeMgt@1008 : Codeunit 1630;
      RecRef@1005 : RecordRef;
      UpdateDocumentSentHistory@1040 : Boolean;
      Handled@1012 : Boolean;
    BEGIN
      OnBeforeSendEmailToCust(ReportUsage,RecordVariant,DocNo,DocName,ShowDialog,CustNo,Handled);
      IF Handled THEN
        EXIT;

      //**4PS.sn
      SendEmailToCustDirectly(ReportUsage,RecordVariant,DocNo,DocName,ShowDialog,CustNo);
      EXIT; //Functionality of sending e-mails in background is currently not used.
      //**4PS.en

      RecRef.GETTABLE(RecordVariant);

      IF GraphMail.IsEnabled AND GraphMail.HasConfiguration THEN BEGIN
        IF O365DocumentSentHistory.NewInProgressFromRecRef(RecRef) THEN BEGIN
          O365DocumentSentHistory.SetStatusAsFailed;
          UpdateDocumentSentHistory := TRUE;
        END;

        IF SendEmailToCustDirectly(ReportUsage,RecordVariant,DocNo,DocName,ShowDialog,CustNo) AND UpdateDocumentSentHistory THEN
          O365DocumentSentHistory.SetStatusAsSuccessfullyFinished;

        EXIT;
      END;

      IF ShowDialog OR
         (NOT SMTPMail.IsEnabled) OR
         (GetEmailAddressIgnoringLayout(ReportUsage,RecordVariant,CustNo) = '') OR
         OfficeMgt.IsAvailable
      THEN BEGIN
        SendEmailToCustDirectly(ReportUsage,RecordVariant,DocNo,DocName,TRUE,CustNo);
        EXIT;
      END;

      RecRef.GETTABLE(RecordVariant);
      IF RecordsCanBeSent(RecRef) THEN
        EnqueueMailingJob(RecRef.RECORDID,STRSUBSTNO('%1|%2|%3|%4|',ReportUsage,DocNo,DocName,CustNo),DocName);
    END;

    [External]
    PROCEDURE SendEmailToVendor@34(ReportUsage@1005 : Integer;RecordVariant@1004 : Variant;DocNo@1003 : Code[20];DocName@1002 : Text[150];ShowDialog@1001 : Boolean;VendorNo@1000 : Code[20]);
    VAR
      O365DocumentSentHistory@1019 : Record 2158;
      GraphMail@1010 : Codeunit 405;
      SMTPMail@1007 : Codeunit 400;
      OfficeMgt@1009 : Codeunit 1630;
      RecRef@1006 : RecordRef;
      VendorEmail@1011 : Text[250];
      UpdateDocumentSentHistory@1040 : Boolean;
      Handled@1012 : Boolean;
    BEGIN
      OnBeforeSendEmailToVendor(ReportUsage,RecordVariant,DocNo,DocName,ShowDialog,VendorNo,Handled);
      IF Handled THEN
        EXIT;

      //**4PS.sn
      SendEmailToVendorDirectly(ReportUsage,RecordVariant,DocNo,DocName,ShowDialog,VendorNo);
      EXIT; //Functionality of sending e-mails in background is currently not used.
      //**4PS.en

      RecRef.GETTABLE(RecordVariant);

      IF GraphMail.IsEnabled AND GraphMail.HasConfiguration THEN BEGIN
        IF O365DocumentSentHistory.NewInProgressFromRecRef(RecRef) THEN BEGIN
          O365DocumentSentHistory.SetStatusAsFailed;
          UpdateDocumentSentHistory := TRUE;
        END;

        IF SendEmailToVendorDirectly(ReportUsage,RecordVariant,DocNo,DocName,ShowDialog,VendorNo) AND UpdateDocumentSentHistory THEN
          O365DocumentSentHistory.SetStatusAsSuccessfullyFinished;

        EXIT;
      END;

      VendorEmail := GetVendorEmailAddress(VendorNo,RecordVariant,ReportUsage);
      IF ShowDialog OR NOT SMTPMail.IsEnabled OR (VendorEmail = '') OR OfficeMgt.IsAvailable THEN BEGIN
        SendEmailToVendorDirectly(ReportUsage,RecordVariant,DocNo,DocName,TRUE,VendorNo);
        EXIT;
      END;

      EnqueueMailingJob(RecRef.RECORDID,STRSUBSTNO('%1|%2|%3|%4|%5',ReportUsage,DocNo,DocName,VendorNo,'Vendor'),DocName);
    END;

    LOCAL PROCEDURE SendEmailToCustDirectly@28(ReportUsage@1000 : Integer;RecordVariant@1001 : Variant;DocNo@1006 : Code[20];DocName@1004 : Text[150];ShowDialog@1007 : Boolean;CustNo@1010 : Code[20]) : Boolean;
    VAR
      TempAttachReportSelections@1008 : TEMPORARY Record 77;
      CustomReportSelection@1014 : Record 9657;
      EmailParameter@1015 : Record 9510;
      MailManagement@1003 : Codeunit 9520;
      FoundBody@1005 : Boolean;
      FoundAttachment@1011 : Boolean;
      ServerEmailBodyFilePath@1009 : Text[250];
      EmailAddress@1012 : Text[250];
      EmailBodyText@1013 : Text;
    BEGIN
      IF EmailParameter.GetEntryWithReportUsage(DocNo,ReportUsage,EmailParameter."Parameter Type"::Body) THEN
        EmailBodyText := EmailParameter.GetParameterValue;

      OnBeforeSetReportLayout(RecordVariant);
      BINDSUBSCRIPTION(MailManagement);
      FoundBody := GetEmailBodyCustomText(ServerEmailBodyFilePath,ReportUsage,RecordVariant,CustNo,EmailAddress,EmailBodyText);
      UNBINDSUBSCRIPTION(MailManagement);
      //FoundAttachment := FindEmailAttachmentUsage(ReportUsage,CustNo,TempAttachReportSelections); //**4PS.o
      //**4PS.sn
      FoundAttachment := FindEmailAttachmentUsage(ReportUsage,CustNo,ShowDialog,ShowDialog,TempAttachReportSelections);
      //**4PS.en
      CustomReportSelection.SETRANGE("Source Type",DATABASE::Customer);
      CustomReportSelection.SETRANGE("Source No.",CustNo);
      EXIT(SendEmailDirectly(
          ReportUsage,RecordVariant,DocNo,DocName,FoundBody,FoundAttachment,ServerEmailBodyFilePath,EmailAddress,ShowDialog,
          TempAttachReportSelections,CustomReportSelection));
    END;

    LOCAL PROCEDURE SendEmailToVendorDirectly@37(ReportUsage@1005 : Integer;RecordVariant@1004 : Variant;DocNo@1003 : Code[20];DocName@1002 : Text[150];ShowDialog@1001 : Boolean;VendorNo@1000 : Code[20]) : Boolean;
    VAR
      TempAttachReportSelections@1014 : TEMPORARY Record 77;
      CustomReportSelection@1013 : Record 9657;
      MailManagement@1008 : Codeunit 9520;
      FoundBody@1010 : Boolean;
      FoundAttachment@1009 : Boolean;
      ServerEmailBodyFilePath@1007 : Text[250];
      EmailAddress@1006 : Text[250];
    BEGIN
      OnBeforeSetReportLayout(RecordVariant);
      BINDSUBSCRIPTION(MailManagement);
      FoundBody := GetEmailBodyVendor(ServerEmailBodyFilePath,ReportUsage,RecordVariant,VendorNo,EmailAddress);
      UNBINDSUBSCRIPTION(MailManagement);
      //FoundAttachment := FindEmailAttachmentUsageVendor(ReportUsage,VendorNo,TempAttachReportSelections); //**4PS.o
      //**4PS.sn
      FoundAttachment := FindEmailAttachmentUsageVendor(ReportUsage,VendorNo,ShowDialog,ShowDialog,TempAttachReportSelections);
      IF ShowDialog AND RecordVariantIsBlanketOrder(RecordVariant) THEN
        AddReportSelectionsForBlanketOrder(TempAttachReportSelections, TRUE);
      //**4PS.en
      CustomReportSelection.SETRANGE("Source Type",DATABASE::Vendor);
      CustomReportSelection.SETRANGE("Source No.",VendorNo);
      EXIT(SendEmailDirectly(
          ReportUsage,RecordVariant,DocNo,DocName,FoundBody,FoundAttachment,ServerEmailBodyFilePath,EmailAddress,ShowDialog,
          TempAttachReportSelections,CustomReportSelection));
    END;

    LOCAL PROCEDURE SendEmailDirectly@50(ReportUsage@1005 : Integer;RecordVariant@1004 : Variant;DocNo@1003 : Code[20];DocName@1002 : Text[150];FoundBody@1006 : Boolean;FoundAttachment@1007 : Boolean;ServerEmailBodyFilePath@1008 : Text[250];VAR DefaultEmailAddress@1010 : Text[250];ShowDialog@1009 : Boolean;VAR TempAttachReportSelections@1020 : TEMPORARY Record 77;VAR CustomReportSelection@1000 : Record 9657) AllEmailsWereSuccessful : Boolean;
    VAR
      DocumentMailing@1017 : Codeunit 260;
      OfficeAttachmentManager@1016 : Codeunit 1629;
      EmailAddress@1001 : Text[250];
      TempEmailAttachment@1100525000 : TEMPORARY Record 11229294;
      AttachmentFileName@1100525001 : Text[250];
      Dimension1Code@1100525003 : Code[20];
      LanguageCode@1100525002 : Code[10];
      MailTemplateNo@1100525004 : Integer;
    BEGIN
      AllEmailsWereSuccessful := TRUE;

      ShowNoBodyNoAttachmentError(ReportUsage,FoundBody,FoundAttachment);

      IF FoundBody AND NOT FoundAttachment THEN
        AllEmailsWereSuccessful :=
          DocumentMailing.EmailFile('','',ServerEmailBodyFilePath,DocNo,EmailAddress,DocName,NOT ShowDialog,ReportUsage);

      IF FoundAttachment THEN BEGIN
        IF ReportUsage = Usage::JQ THEN BEGIN
          Usage := ReportUsage;
          CustomReportSelection.SETFILTER(Usage,GETFILTER(Usage));
          IF CustomReportSelection.FINDFIRST THEN
            IF CustomReportSelection."Send To Email" <> '' THEN
              DefaultEmailAddress := CustomReportSelection."Send To Email";
        END;
        //**4PS.sn
        DoActionsBeforeSendingEMail(RecordVariant);
        GetEmailParameters(RecordVariant, EmailAddress, MailTemplateNo, Dimension1Code, LanguageCode, AttachmentFileName);
        //**4PS.en

        OnSendEmailDirectlyOnBeforeSendFiles(
          ReportUsage,RecordVariant,DefaultEmailAddress,TempAttachReportSelections,CustomReportSelection);
        WITH TempAttachReportSelections DO BEGIN
          OfficeAttachmentManager.IncrementCount(COUNT - 1);
          REPEAT
            //**4PS.so
            //EmailAddress := COPYSTR(
            //    GetNextEmailAddressFromCustomReportSelection(CustomReportSelection,DefaultEmailAddress,Usage,Sequence),
            //    1,MAXSTRLEN(EmailAddress));
            //ServerAttachmentFilePath := SaveReportAsPDF("Report ID",RecordVariant,"Custom Report Layout Code");
            //AllEmailsWereSuccessful := AllEmailsWereSuccessful AND DocumentMailing.EmailFile(
            //  ServerAttachmentFilePath,
            //  '',
            //  ServerEmailBodyFilePath,
            //  DocNo,
            //  EmailAddress,
            //  DocName,
            //  NOT ShowDialog,
            //  ReportUsage);
            //**4PS.eo
            //**4PS.sn
            DoActionsBeforeSavingReportAsPdf(RecordVariant,TempAttachReportSelections);
            SaveAnyRecordReportAsPdf(RecordVariant, MailTemplateNo, Dimension1Code, "Report ID", TRUE, FALSE, DocNo, DocName, TempEmailAttachment);
            DoActionsAfterSavingReportAsPdf(RecordVariant,TempEmailAttachment,TempAttachReportSelections);
            //**4PS.en
          UNTIL NEXT = 0;
        END;
        //**4PS.sn
        AddRelatedDocumentsForRecordVariant(TempEmailAttachment, RecordVariant);
        AddStandardAttachments(TempEmailAttachment, MailTemplateNo, Dimension1Code, LanguageCode);
        COMMIT;
        DocumentMailing.SetTempEmailAttachments(TempEmailAttachment);
        IF TempEmailAttachment.FINDFIRST THEN;
        IF ServiceOrderEmailQueueMustBeUsed(RecordVariant) THEN
          AllEmailsWereSuccessful := AllEmailsWereSuccessful AND DocumentMailing.SendEmailViaServiceOrderEmailQueue(
            DocNo,GetSendEmailToNameForServiceOrderEMailQueue(RecordVariant),
            EmailAddress, GetServiceOrderEMailQueueDocumentType(RecordVariant), MailTemplateNo, Dimension1Code, LanguageCode,
            RecordVariant, EMailSubject, DocName)
        ELSE
          AllEmailsWereSuccessful := AllEmailsWereSuccessful AND DocumentMailing.EmailFile4PS(
            TempEmailAttachment."Attachment Server File Path", AttachmentFileName,
            ServerEmailBodyFilePath, DocNo, EmailAddress, MailTemplateNo, Dimension1Code, LanguageCode, RecordVariant,
            EMailSubject, DocName, NOT ShowDialog);
        DoActionsAfterSendingEMail(
          RecordVariant, TempEmailAttachment, DocumentMailing.IsSent,
          DocumentMailing.GetServiceOrderEMailQueueEntryNo);
        COMMIT;
        //**4PS.en
      END;

      OnAfterSendEmailDirectly(ReportUsage,RecordVariant,AllEmailsWereSuccessful);
      EXIT(AllEmailsWereSuccessful);
    END;

    [Internal]
    PROCEDURE SendToDisk@17(ReportUsage@1000 : Integer;RecordVariant@1001 : Variant;DocNo@1006 : Code[20];DocName@1007 : Text;CustNo@1004 : Code[20]);
    VAR
      TempReportSelections@1005 : TEMPORARY Record 77;
      ElectronicDocumentFormat@1008 : Record 61;
      FileManagement@1010 : Codeunit 419;
      ServerAttachmentFilePath@1002 : Text[250];
      ClientAttachmentFileName@1009 : Text;
    BEGIN
      OnBeforeSetReportLayout(RecordVariant);
      //FindPrintUsage(ReportUsage,CustNo,TempReportSelections); //**4PS.o
      FindPrintUsage(ReportUsage,CustNo,FALSE,TempReportSelections); //**4PS.n
      WITH TempReportSelections DO
        REPEAT
          ServerAttachmentFilePath := SaveReportAsPDF("Report ID",RecordVariant,"Custom Report Layout Code");
          ClientAttachmentFileName := ElectronicDocumentFormat.GetAttachmentFileName(DocNo,DocName,'pdf');

          FileManagement.DownloadHandler(
            ServerAttachmentFilePath,
            '',
            '',
            FileManagement.GetToFilterText('',ClientAttachmentFileName),
            ClientAttachmentFileName);
        UNTIL NEXT = 0;
    END;

    [Internal]
    PROCEDURE SendToDiskVendor@48(ReportUsage@1004 : Integer;RecordVariant@1003 : Variant;DocNo@1002 : Code[20];DocName@1001 : Text;VendorNo@1000 : Code[20]);
    VAR
      TempReportSelections@1009 : TEMPORARY Record 77;
      ElectronicDocumentFormat@1008 : Record 61;
      FileManagement@1007 : Codeunit 419;
      ServerAttachmentFilePath@1006 : Text[250];
      ClientAttachmentFileName@1005 : Text;
    BEGIN
      OnBeforeSetReportLayout(RecordVariant);
      //FindPrintUsageVendor(ReportUsage,VendorNo,TempReportSelections); //**4PS.o
      FindPrintUsageVendor(ReportUsage,VendorNo,FALSE,TempReportSelections); //**4PS.n
      WITH TempReportSelections DO
        REPEAT
          ServerAttachmentFilePath := SaveReportAsPDF("Report ID",RecordVariant,"Custom Report Layout Code");
          ClientAttachmentFileName := ElectronicDocumentFormat.GetAttachmentFileName(DocNo,DocName,'pdf');

          FileManagement.DownloadHandler(
            ServerAttachmentFilePath,
            '',
            '',
            FileManagement.GetToFilterText('',ClientAttachmentFileName),
            ClientAttachmentFileName);
        UNTIL NEXT = 0;
    END;

    [Internal]
    PROCEDURE SendToZip@18(ReportUsage@1003 : Integer;RecordVariant@1002 : Variant;DocNo@1001 : Code[20];CustNo@1007 : Code[20];VAR FileManagement@1000 : Codeunit 419);
    VAR
      TempReportSelections@1006 : TEMPORARY Record 77;
      ElectronicDocumentFormat@1005 : Record 61;
      ServerAttachmentFilePath@1004 : Text;
    BEGIN
      OnBeforeSetReportLayout(RecordVariant);
      //FindPrintUsage(ReportUsage,CustNo,TempReportSelections); //**4PS.o
      FindPrintUsage(ReportUsage,CustNo,FALSE,TempReportSelections); //**4PS.n
      WITH TempReportSelections DO
        REPEAT
          ServerAttachmentFilePath := SaveReportAsPDF("Report ID",RecordVariant,"Custom Report Layout Code");
          FileManagement.AddFileToZipArchive(
            ServerAttachmentFilePath,
            ElectronicDocumentFormat.GetAttachmentFileName(DocNo,'Invoice','pdf'));
        UNTIL NEXT = 0;
    END;

    [Internal]
    PROCEDURE SendToZipVendor@47(ReportUsage@1004 : Integer;RecordVariant@1003 : Variant;DocNo@1002 : Code[20];VendorNo@1001 : Code[20];VAR FileManagement@1000 : Codeunit 419);
    VAR
      TempReportSelections@1007 : TEMPORARY Record 77;
      ElectronicDocumentFormat@1006 : Record 61;
      ServerAttachmentFilePath@1005 : Text;
    BEGIN
      OnBeforeSetReportLayout(RecordVariant);
      //FindPrintUsageVendor(ReportUsage,VendorNo,TempReportSelections); //**4PS.o
      FindPrintUsageVendor(ReportUsage,VendorNo,FALSE,TempReportSelections); //**4PS.n
      WITH TempReportSelections DO
        REPEAT
          ServerAttachmentFilePath := SaveReportAsPDF("Report ID",RecordVariant,"Custom Report Layout Code");
          FileManagement.AddFileToZipArchive(
            ServerAttachmentFilePath,
            ElectronicDocumentFormat.GetAttachmentFileName(DocNo,'Purchase Order','pdf'));
        UNTIL NEXT = 0;
    END;

    [External]
    PROCEDURE GetDocumentEmailAddress@58(DocumentNo@1000 : Code[20];ReportUsage@1004 : Integer) : Text[250];
    VAR
      EmailParameter@1002 : Record 9510;
      ToAddress@1001 : Text;
    BEGIN
      IF EmailParameter.GetEntryWithReportUsage(DocumentNo,ReportUsage,EmailParameter."Parameter Type"::Address) THEN
        ToAddress := EmailParameter.GetParameterValue;
      EXIT(ToAddress);
    END;

    [External]
    PROCEDURE GetCustEmailAddress@16(BillToCustomerNo@1000 : Code[20];ReportUsage@1005 : Option) : Text[250];
    VAR
      Customer@1002 : Record 18;
      Contact@1003 : Record 5050;
      ToAddress@1001 : Text;
      IsHandled@1004 : Boolean;
    BEGIN
      OnBeforeGetCustEmailAddress(BillToCustomerNo,ToAddress,ReportUsage,IsHandled);
      IF IsHandled THEN
        EXIT(ToAddress);

      IF Customer.GET(BillToCustomerNo) THEN
        ToAddress := Customer."E-Mail"
      ELSE
        IF Contact.GET(BillToCustomerNo) THEN
          ToAddress := Contact."E-Mail";
      EXIT(ToAddress);
    END;

    [External]
    PROCEDURE GetVendorEmailAddress@35(BuyFromVendorNo@1000 : Code[20];RecVar@1004 : Variant;ReportUsage@1005 : Option) : Text[250];
    VAR
      Vendor@1002 : Record 23;
      ToAddress@1001 : Text[250];
      IsHandled@1003 : Boolean;
    BEGIN
      OnBeforeGetVendorEmailAddress(BuyFromVendorNo,ToAddress,ReportUsage,IsHandled);
      IF IsHandled THEN
        EXIT(ToAddress);

      ToAddress := GetPurchaseOrderEmailAddress(BuyFromVendorNo,RecVar,ReportUsage);

      IF ToAddress = '' THEN
        IF Vendor.GET(BuyFromVendorNo) THEN
          ToAddress := Vendor."E-Mail";

      EXIT(ToAddress);
    END;

    LOCAL PROCEDURE GetPurchaseOrderEmailAddress@71(BuyFromVendorNo@1002 : Code[20];RecVar@1001 : Variant;ReportUsage@1000 : Option) : Text[250];
    VAR
      PurchaseHeader@1005 : Record 38;
      OrderAddress@1004 : Record 224;
      RecRef@1003 : RecordRef;
    BEGIN
      IF BuyFromVendorNo = '' THEN
        EXIT('');

      IF ReportUsage <> Usage::"P.Order" THEN
        EXIT('');

      RecRef.GETTABLE(RecVar);
      IF RecRef.NUMBER <> DATABASE::"Purchase Header" THEN
        EXIT('');

      PurchaseHeader := RecVar;
      IF PurchaseHeader."Order Address Code" = '' THEN
        EXIT('');

      IF NOT OrderAddress.GET(BuyFromVendorNo,PurchaseHeader."Order Address Code") THEN
        EXIT('');

      EXIT(OrderAddress."E-Mail");
    END;

    LOCAL PROCEDURE SaveReportAsPDF@14(ReportID@1000 : Integer;RecordVariant@1002 : Variant;LayoutCode@1003 : Code[20]) FilePath : Text[250];
    VAR
      ReportLayoutSelection@1004 : Record 9651;
      FileMgt@1001 : Codeunit 419;
      IsHandled@1005 : Boolean;
    BEGIN
      OnBeforeSetReportLayout(RecordVariant);
      FilePath := COPYSTR(FileMgt.ServerTempFileName('pdf'),1,250);

      ReportLayoutSelection.SetTempLayoutSelected(LayoutCode);
      OnBeforeSaveReportAsPDF(ReportID,RecordVariant,LayoutCode,IsHandled);
      IF NOT IsHandled THEN
        REPORT.SAVEASPDF(ReportID,FilePath,RecordVariant);
      ReportLayoutSelection.SetTempLayoutSelected('');

      COMMIT;
    END;

    LOCAL PROCEDURE SaveReportAsHTML@15(ReportID@1003 : Integer;RecordVariant@1002 : Variant;LayoutCode@1004 : Code[20]) FilePath : Text[250];
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      FileMgt@1001 : Codeunit 419;
    BEGIN
      OnBeforeSetReportLayout(RecordVariant);
      FilePath := COPYSTR(FileMgt.ServerTempFileName('html'),1,250);

      ReportLayoutSelection.SetTempLayoutSelected(LayoutCode);
      REPORT.SAVEASHTML(ReportID,FilePath,RecordVariant);
      ReportLayoutSelection.SetTempLayoutSelected('');

      COMMIT;
    END;

    LOCAL PROCEDURE FindReportSelections@38(VAR ReportSelections@1000 : Record 77;AccountNo@1001 : Code[20];TableNo@1003 : Integer;AllowReportSelPage@1100525001 : Boolean;ThrowErrorIfNoReportFound@1100525000 : Boolean) : Boolean;
    VAR
      Handled@1002 : Boolean;
    BEGIN
      OnFindReportSelections(ReportSelections,Handled,Rec);
      IF Handled THEN
        EXIT(TRUE);

      IF CopyCustomReportSectionToReportSelection(AccountNo,ReportSelections,TableNo) THEN
        EXIT(TRUE);

      //EXIT(CopyReportSelectionToReportSelection(ReportSelections)); //**4PS.o
      //**4PS.sn
      IF CopyReportSelectionToReportSelection(ReportSelections) THEN
        SelectReports(AllowReportSelPage,ReportSelections);
      IF ThrowErrorIfNoReportFound THEN
        IF ReportSelections.ISEMPTY THEN
          ERROR(Text11012002);
      EXIT(NOT ReportSelections.ISEMPTY);
      //**4PS.en
    END;

    LOCAL PROCEDURE CopyCustomReportSectionToReportSelection@21(AccountNo@1002 : Code[20];VAR ToReportSelections@1001 : Record 77;TableNo@1003 : Integer) : Boolean;
    VAR
      CustomReportSelection@1000 : Record 9657;
    BEGIN
      GetCustomReportSelectionByUsageFilter(CustomReportSelection,AccountNo,GETFILTER(Usage),TableNo);
      CopyToReportSelection(ToReportSelections,CustomReportSelection);

      IF NOT ToReportSelections.FINDSET THEN
        EXIT(FALSE);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CopyToReportSelection@49(VAR ToReportSelections@1000 : Record 77;VAR CustomReportSelection@1002 : Record 9657);
    BEGIN
      //ToReportSelections.RESET; //**4PS.o
      ToReportSelections.ResetWithoutLosingGlobalVars; //**4PS.n
      ToReportSelections.DELETEALL;
      IF CustomReportSelection.FINDSET THEN
        REPEAT
          ToReportSelections.Usage := CustomReportSelection.Usage;
          ToReportSelections.Sequence := FORMAT(CustomReportSelection.Sequence);
          ToReportSelections."Report ID" := CustomReportSelection."Report ID";
          ToReportSelections."Custom Report Layout Code" := CustomReportSelection."Custom Report Layout Code";
          ToReportSelections."Email Body Layout Code" := CustomReportSelection."Email Body Layout Code";
          ToReportSelections."Use for Email Attachment" := CustomReportSelection."Use for Email Attachment";
          ToReportSelections."Use for Email Body" := CustomReportSelection."Use for Email Body";
          ToReportSelections.INSERT;
        UNTIL CustomReportSelection.NEXT = 0;
    END;

    LOCAL PROCEDURE CopyReportSelectionToReportSelection@22(VAR ToReportSelections@1000 : Record 77) : Boolean;
    BEGIN
      //ToReportSelections.RESET; //**4PS.o
      ToReportSelections.ResetWithoutLosingGlobalVars; //**4PS.n
      ToReportSelections.DELETEALL;
      IF FINDSET THEN
        REPEAT
          ToReportSelections := Rec;
          IF ToReportSelections.INSERT THEN;
        UNTIL NEXT = 0;

      EXIT(ToReportSelections.FINDSET);
    END;

    LOCAL PROCEDURE GetCustomReportSelection@23(VAR CustomReportSelection@1000 : Record 9657;AccountNo@1001 : Code[20];TableNo@1002 : Integer) : Boolean;
    BEGIN
      CustomReportSelection.SETRANGE("Source Type",TableNo);
      CustomReportSelection.SETRANGE("Source No.",AccountNo);
      IF CustomReportSelection.ISEMPTY THEN
        EXIT(FALSE);

      CustomReportSelection.SETFILTER("Use for Email Attachment",GETFILTER("Use for Email Attachment"));
      CustomReportSelection.SETFILTER("Use for Email Body",GETFILTER("Use for Email Body"));

      OnAfterGetCustomReportSelection(CustomReportSelection,AccountNo,TableNo);
    END;

    LOCAL PROCEDURE GetCustomReportSelectionByUsageFilter@24(VAR CustomReportSelection@1002 : Record 9657;AccountNo@1001 : Code[20];ReportUsageFilter@1000 : Text;TableNo@1003 : Integer) : Boolean;
    BEGIN
      CustomReportSelection.SETFILTER(Usage,ReportUsageFilter);
      EXIT(GetCustomReportSelection(CustomReportSelection,AccountNo,TableNo));
    END;

    LOCAL PROCEDURE GetCustomReportSelectionByUsageOption@25(VAR CustomReportSelection@1002 : Record 9657;AccountNo@1001 : Code[20];ReportUsage@1000 : Integer;TableNo@1003 : Integer) : Boolean;
    BEGIN
      CustomReportSelection.SETRANGE(Usage,ReportUsage);
      EXIT(GetCustomReportSelection(CustomReportSelection,AccountNo,TableNo));
    END;

    LOCAL PROCEDURE GetNextEmailAddressFromCustomReportSelection@54(VAR CustomReportSelection@1001 : Record 9657;DefaultEmailAddress@1000 : Text;UsageValue@1002 : Option;SequenceText@1003 : Text) : Text;
    VAR
      SequenceInteger@1004 : Integer;
    BEGIN
      IF EVALUATE(SequenceInteger,SequenceText) THEN BEGIN
        CustomReportSelection.SETRANGE(Usage,UsageValue);
        CustomReportSelection.SETRANGE(Sequence,SequenceInteger);
        IF CustomReportSelection.FINDFIRST THEN
          IF CustomReportSelection."Send To Email" <> '' THEN
            EXIT(CustomReportSelection."Send To Email");
      END;
      EXIT(DefaultEmailAddress);
    END;

    LOCAL PROCEDURE GetUniqueAccountNos@62(VAR TempNameValueBuffer@1001 : TEMPORARY Record 823;RecRef@1002 : RecordRef;AccountNoFieldNo@1004 : Integer);
    VAR
      TempCustomer@1003 : TEMPORARY Record 18;
      AccountNoFieldRef@1005 : FieldRef;
    BEGIN
      IF AccountNoFieldNo <> 0 THEN BEGIN
        AccountNoFieldRef := RecRef.FIELD(AccountNoFieldNo);
        IF RecRef.FINDSET THEN
          REPEAT
            TempNameValueBuffer.ID += 1;
            TempNameValueBuffer.Name := AccountNoFieldRef.VALUE;
            TempCustomer."No." := AccountNoFieldRef.VALUE; // to avoid duplicate No. insertion into Name/Value buffer
            IF TempCustomer.INSERT THEN
              TempNameValueBuffer.INSERT;
          UNTIL RecRef.NEXT = 0;
      END ELSE BEGIN
        TempNameValueBuffer.INIT;
        TempNameValueBuffer.INSERT;
      END;
    END;

    [External]
    PROCEDURE PrintForUsage@26(ReportUsage@1000 : Integer);
    VAR
      Handled@1001 : Boolean;
    BEGIN
      OnBeforePrintForUsage(ReportUsage,Handled);
      IF Handled THEN
        EXIT;

      FilterPrintUsage(ReportUsage);
      IF FINDSET THEN
        REPEAT
          REPORT.RUNMODAL("Report ID",TRUE);
        UNTIL NEXT = 0;
    END;

    LOCAL PROCEDURE FindEmailAddressForEmailLayout@27(LayoutCode@1002 : Code[20];AccountNo@1001 : Code[20];ReportUsage@1000 : Integer;TableNo@1004 : Integer) : Text[200];
    VAR
      CustomReportSelection@1003 : Record 9657;
    BEGIN
      // Search for a potential email address from Custom Report Selections
      GetCustomReportSelectionByUsageOption(CustomReportSelection,AccountNo,ReportUsage,TableNo);
      CustomReportSelection.SETFILTER("Send To Email",'<>%1','');
      CustomReportSelection.SETRANGE("Email Body Layout Code",LayoutCode);
      IF CustomReportSelection.FINDFIRST THEN
        EXIT(CustomReportSelection."Send To Email");

      // Relax the filter and search for an email address
      CustomReportSelection.SETFILTER("Use for Email Body",'');
      CustomReportSelection.SETRANGE("Email Body Layout Code",'');
      IF CustomReportSelection.FINDFIRST THEN
        EXIT(CustomReportSelection."Send To Email");
      EXIT('');
    END;

    LOCAL PROCEDURE ShowNoBodyNoAttachmentError@51(ReportUsage@1000 : Integer;FoundBody@1001 : Boolean;FoundAttachment@1002 : Boolean);
    BEGIN
      IF NOT (FoundBody OR FoundAttachment) THEN BEGIN
        Usage := ReportUsage;
        ERROR(MustSelectAndEmailBodyOrAttahmentErr,Usage);
      END;
    END;

    [External]
    PROCEDURE ReportUsageToDocumentType@53(VAR DocumentType@1001 : Option;ReportUsage@1000 : Integer) : Boolean;
    VAR
      SalesHeader@1002 : Record 36;
    BEGIN
      CASE ReportUsage OF
        Usage::"S.Invoice",Usage::"S.Invoice Draft",Usage::"P.Invoice":
          DocumentType := SalesHeader."Document Type"::Invoice;
        Usage::"S.Quote",Usage::"P.Quote":
          DocumentType := SalesHeader."Document Type"::Quote;
        Usage::"S.Cr.Memo",Usage::"P.Cr.Memo":
          DocumentType := SalesHeader."Document Type"::"Credit Memo";
        Usage::"S.Order",Usage::"P.Order":
          DocumentType := SalesHeader."Document Type"::Order;
        ELSE
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    [Internal]
    PROCEDURE SendEmailInForeground@55(DocRecordID@1007 : RecordID;DocNo@1008 : Code[20];DocName@1009 : Text[150];ReportUsage@1010 : Integer;SourceIsCustomer@1011 : Boolean;SourceNo@1001 : Code[20]) : Boolean;
    VAR
      RecRef@1000 : RecordRef;
    BEGIN
      // Blocks the user until the email is sent; use SendEmailInBackground for normal purposes.

      IF NOT RecRef.GET(DocRecordID) THEN
        EXIT(FALSE);

      RecRef.LOCKTABLE;
      RecRef.FIND;
      RecRef.SETRECFILTER;

      IF SourceIsCustomer THEN
        EXIT(SendEmailToCustDirectly(ReportUsage,RecRef,DocNo,DocName,FALSE,SourceNo));

      EXIT(SendEmailToVendorDirectly(ReportUsage,RecRef,DocNo,DocName,FALSE,SourceNo));
    END;

    LOCAL PROCEDURE RecordsCanBeSent@41(RecRef@1000 : RecordRef) : Boolean;
    VAR
      ConfirmManagement@1001 : Codeunit 27;
    BEGIN
      IF RecRef.COUNT > 1 THEN
        EXIT(ConfirmManagement.ConfirmProcess(OneRecordWillBeSentQst,FALSE));

      EXIT(TRUE);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterGetCustomReportSelection@93(VAR CustomReportSelection@1002 : Record 9657;AccountNo@1001 : Code[20];TableNo@1000 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeGetCustEmailAddress@57(BillToCustomerNo@1000 : Code[20];VAR ToAddress@1001 : Text;ReportUsage@1003 : Option;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeGetHtmlReport@87(VAR DocumentContent@1003 : Text;ReportUsage@1002 : Integer;RecordVariant@1001 : Variant;CustNo@1000 : Code[20];VAR IsHandled@1004 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeGetVendorEmailAddress@59(BuyFromVendorNo@1000 : Code[20];VAR ToAddress@1001 : Text;ReportUsage@1003 : Option;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePrint@77(ReportUsage@1002 : Integer;RecordVariant@1001 : Variant;CustomerNoFieldNo@1000 : Integer;VAR Handled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePrintForUsage@69(VAR ReportUsage@1000 : Integer;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePrintWithCheck@43(ReportUsage@1002 : Integer;RecordVariant@1001 : Variant;CustomerNoFieldNo@1000 : Integer;VAR Handled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePrintWithGUIYesNoWithCheck@64(ReportUsage@1003 : Integer;RecordVariant@1002 : Variant;IsGUI@1001 : Boolean;CustomerNoFieldNo@1000 : Integer;VAR Handled@1004 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePrintWithGUIYesNoWithCheckVendor@74(ReportUsage@1003 : Integer;RecordVariant@1002 : Variant;IsGUI@1001 : Boolean;VendorNoFieldNo@1000 : Integer;VAR Handled@1004 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePrintWithGUIYesNo@79(ReportUsage@1003 : Integer;RecordVariant@1002 : Variant;IsGUI@1001 : Boolean;CustomerNoFieldNo@1000 : Integer;VAR Handled@1004 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePrintWithGUIYesNoVendor@83(ReportUsage@1003 : Integer;RecordVariant@1002 : Variant;IsGUI@1001 : Boolean;VendorNoFieldNo@1000 : Integer;VAR Handled@1004 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeSaveReportAsPDF@78(ReportID@1002 : Integer;RecordVariant@1001 : Variant;LayoutCode@1000 : Code[20];VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration(TRUE)]
    LOCAL PROCEDURE OnBeforeSetReportLayout@61(RecordVariant@1000 : Variant);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeSendEmailToCust@89(ReportUsage@1005 : Integer;RecordVariant@1004 : Variant;DocNo@1003 : Code[20];DocName@1002 : Text[150];ShowDialog@1001 : Boolean;CustNo@1000 : Code[20];VAR Handled@1006 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeSendEmailToVendor@92(ReportUsage@1005 : Integer;RecordVariant@1004 : Variant;DocNo@1003 : Code[20];DocName@1002 : Text[150];ShowDialog@1001 : Boolean;VendorNo@1000 : Code[20];VAR Handled@1006 : Boolean);
    BEGIN
    END;

    [Integration(TRUE)]
    LOCAL PROCEDURE OnFindReportSelections@63(VAR FilterReportSelections@1001 : Record 77;VAR IsHandled@1002 : Boolean;VAR ReturnReportSelections@1000 : Record 77);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeGetEmailBodyCustomer@36();
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterGetEmailBodyCustomer@39(CustomerEmailAddress@1000 : Text[250];ServerEmailBodyFilePath@1001 : Text[250]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeGetEmailBodyVendor@68();
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterGetEmailBodyVendor@67(VendorEmailAddress@1001 : Text[250];ServerEmailBodyFilePath@1000 : Text[250]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSendEmailDirectly@46(ReportUsage@1001 : Integer;RecordVariant@1000 : Variant;VAR AllEmailsWereSuccessful@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterPrintDocument@86(TempReportSelections@1000 : TEMPORARY Record 77;IsGUI@1001 : Boolean;RecVarToPrint@1002 : Variant);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePrintDocument@80(TempReportSelections@1000 : TEMPORARY Record 77;IsGUI@1001 : Boolean;RecVarToPrint@1002 : Variant;VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnGetEmailBodyCustomerTextOnAfterNotFindEmailBodyUsage@81(ReportUsage@1004 : Integer;RecordVariant@1003 : Variant;CustNo@1002 : Code[20];VAR TempBodyReportSelections@1000 : TEMPORARY Record 77;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnGetEmailBodyVendorTextOnAfterNotFindEmailBodyUsage@91(ReportUsage@1004 : Integer;RecordVariant@1003 : Variant;CustNo@1002 : Code[20];VAR TempBodyReportSelections@1000 : TEMPORARY Record 77;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnPrintDocumentsOnAfterSelectTempReportSelectionsToPrint@95(RecordVariant@1002 : Variant;VAR TempReportSelections@1005 : TEMPORARY Record 77;VAR TempNameValueBuffer@1004 : TEMPORARY Record 823;WithCheck@1001 : Boolean;ReportUsage@1003 : Integer;TableNo@1000 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnSendEmailDirectlyOnBeforeSendFiles@97(ReportUsage@1004 : Integer;RecordVariant@1003 : Variant;VAR DefaultEmailAddress@1002 : Text[250];VAR TempAttachReportSelections@1001 : TEMPORARY Record 77;VAR CustomReportSelection@1000 : Record 9657);
    BEGIN
    END;

    LOCAL PROCEDURE GetLastSequenceNo@82(VAR TempReportSelectionsSource@1000 : TEMPORARY Record 77;ReportUsage@1002 : Option) : Code[10];
    VAR
      TempReportSelections@1001 : TEMPORARY Record 77;
    BEGIN
      TempReportSelections.COPY(TempReportSelectionsSource,TRUE);
      TempReportSelections.SETRANGE(Usage,ReportUsage);
      IF TempReportSelections.FINDLAST THEN;
      IF TempReportSelections.Sequence = '' THEN
        TempReportSelections.Sequence := '1';
      EXIT(TempReportSelections.Sequence);
    END;

    LOCAL PROCEDURE IsSalesDocument@75(RecordRef@1000 : RecordRef) : Boolean;
    BEGIN
      IF RecordRef.NUMBER IN
         [DATABASE::"Sales Header",DATABASE::"Sales Shipment Header",
          DATABASE::"Sales Cr.Memo Header",DATABASE::"Sales Invoice Header"]
      THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE HasReportWithUsage@84(VAR TempReportSelectionsSource@1000 : TEMPORARY Record 77;ReportUsage@1002 : Option;ReportID@1003 : Integer) : Boolean;
    VAR
      TempReportSelections@1001 : TEMPORARY Record 77;
    BEGIN
      TempReportSelections.COPY(TempReportSelectionsSource,TRUE);
      TempReportSelections.SETRANGE(Usage,ReportUsage);
      TempReportSelections.SETRANGE("Report ID",ReportID);
      EXIT(TempReportSelections.FINDFIRST);
    END;

    PROCEDURE SaveAnyRecordReportAsPdf@1100528512(RecordVariant@1100528501 : Variant;MailTemplateNo@1100528401 : Integer;ShortcutDimension1Code@1100528400 : Code[20];ReportID2@1005 : Integer;ThrowErrorWhenFileNotExists@1100528402 : Boolean;PDFIsPrinted@1100528403 : Boolean;DocNo@1100527800 : Code[20];DocName@1100527801 : Text[150];VAR TempEmailAttachment@1100528500 : TEMPORARY Record 11229294) FileExists : Boolean;
    VAR
      GenericReport@1100525001 : Record 11071914;
      TempBlob@1100527802 : TEMPORARY Record 99008535;
      RecRef@1100525003 : RecordRef;
      FileManagement@1003 : Codeunit 419;
      PDFFileManagement@1100528502 : Codeunit 11020228;
      ReportID@1100525000 : Integer;
      GenericReportID@1100525002 : Integer;
      OutStream@1100527803 : OutStream;
    BEGIN
      //**4PS
      IF NOT RecordVariant.ISRECORD THEN
        EXIT;

      RecRef.GETTABLE(RecordVariant);
      IF (RecRef.NUMBER = DATABASE::"Sales Invoice Header") OR
         (RecRef.NUMBER = DATABASE::"Sales Cr.Memo Header") OR
         (RecRef.NUMBER = DATABASE::"Sales Header")
      THEN BEGIN
        IF GenericReport.GetCalledGenericReport(ReportID2, GenericReportID) THEN BEGIN
          ReportID := GenericReportID;
          AddFilterForDeterminingDocumentTypeInGenericReport(RecRef, RecordVariant);
        END ELSE
          ReportID := ReportID2;
      END ELSE
        ReportID := ReportID2;
      IF NOT PDFFileManagement.UseOnlinePDFConverter THEN BEGIN
        TempEmailAttachment."Attachment Server File Path" := COPYSTR(FileManagement.ServerTempFileName('pdf'), 1, 250);
        TempEmailAttachment."Delete Server File" := TRUE;
        REPORT.SAVEASPDF(ReportID, TempEmailAttachment."Attachment Server File Path", RecordVariant);
        PDFFileManagement.AddBackground(
          TempEmailAttachment."Attachment Server File Path", MailTemplateNo, ShortcutDimension1Code, PDFIsPrinted);
        FileExists := TRUE;
        IF NOT EXISTS(TempEmailAttachment."Attachment Server File Path") THEN
          IF ThrowErrorWhenFileNotExists THEN
            ERROR(Text11012001)
          ELSE
            FileExists := FALSE;
        FileManagement.BLOBImportFromServerFile(TempBlob, TempEmailAttachment."Attachment Server File Path");
        TempEmailAttachment."Attachment File" := TempBlob.Blob;
      END ELSE BEGIN
        TempEmailAttachment."Attachment File".CREATEOUTSTREAM(OutStream);
        IF REPORT.SAVEAS(ReportID, '', REPORTFORMAT::Pdf, OutStream, RecRef) THEN BEGIN
          //TODO.mg: AddBackground
          FileExists := TRUE;
        END;
      END;
      TempEmailAttachment."Attachment Name" := STRSUBSTNO('%1 %2.pdf', DocName, DocNo);
      TempEmailAttachment.INSERT(TRUE);
    END;

    LOCAL PROCEDURE AddFilterForDeterminingDocumentTypeInGenericReport@1100528401(RecRef@1100528400 : RecordRef;VAR RecordVariant@1100528404 : Variant);
    VAR
      SalesInvoiceHeader@1100528401 : Record 112;
      SalesCrMemoHeader@1100528402 : Record 114;
      SalesHeader@1100528403 : Record 36;
    BEGIN
      //**4PS
      // In this function some filters are added in filtergroup 20.
      // Filtergroup 20 is only used for determining document type in the generic report.
      // Filtergroup 0 cannot be used for this in NAV 2017 and later, because
      // filters on sales header, sales invoice header and sales cr.memo header are all remembered.
      CASE RecRef.NUMBER OF
        DATABASE::"Sales Invoice Header":
          BEGIN
            RecRef.SETTABLE(SalesInvoiceHeader);
            SalesInvoiceHeader.FILTERGROUP(20);
            SalesInvoiceHeader.SETFILTER("No.", '<>%1', '');
            SalesInvoiceHeader.FILTERGROUP(0);
            RecordVariant := SalesInvoiceHeader;
          END;
        DATABASE::"Sales Cr.Memo Header":
          BEGIN
            RecRef.SETTABLE(SalesCrMemoHeader);
            SalesCrMemoHeader.FILTERGROUP(20);
            SalesCrMemoHeader.SETFILTER("No.", '<>%1', '');
            SalesCrMemoHeader.FILTERGROUP(0);
            RecordVariant := SalesCrMemoHeader;
          END;
        DATABASE::"Sales Header":
          BEGIN
            RecRef.SETTABLE(SalesHeader);
            SalesHeader.FILTERGROUP(20);
            SalesHeader.SETRANGE("Document Type", SalesHeader."Document Type");
            SalesHeader.FILTERGROUP(0);
            RecordVariant := SalesHeader;
          END;
      END;
    END;

    LOCAL PROCEDURE AddRelatedDocumentsForRecordVariant@1100525008(VAR TempEmailAttachment@1100525000 : TEMPORARY Record 11229294;RecordVariant@1100525001 : Variant);
    VAR
      ServiceOrder@1100525004 : Record 11012823;
      WorkOrder@1100525005 : Record 11229279;
      ServiceSetup@1100525003 : Record 11012800;
      SalesInvoiceHeader@1100525006 : Record 112;
      SalesCrMemoHeader@1100525007 : Record 114;
      RecRef@1100525002 : RecordRef;
      PDFFileManagement@1100525008 : Codeunit 11020228;
    BEGIN
      //**4PS
      IF NOT RecordVariant.ISRECORD THEN
        EXIT;

      RecRef.GETTABLE(RecordVariant);
      CASE RecRef.NUMBER OF
        DATABASE::"Sales Header":
          AddRelatedDocumentsForSalesHeader(TempEmailAttachment, RecordVariant);
        DATABASE::"Sales Invoice Header":
          BEGIN
            RecRef.SETTABLE(SalesInvoiceHeader);
            SalesInvoiceHeader.AddRelatedDocuments(
              TempEmailAttachment, SalesInvoiceHeader, SalesInvoiceHeader."Combine E-Mail Attachments", TRUE);
            IF SalesInvoiceHeader."Combine E-Mail Attachments" THEN
              PDFFileManagement.MergePDFEmailAttachmentsOnServer(TempEmailAttachment);
          END;
        DATABASE::"Sales Cr.Memo Header":
          BEGIN
            RecRef.SETTABLE(SalesCrMemoHeader);
            SalesCrMemoHeader.AddRelatedDocuments(
              TempEmailAttachment, SalesCrMemoHeader, SalesCrMemoHeader."Combine E-Mail Attachments", TRUE);
            IF SalesCrMemoHeader."Combine E-Mail Attachments" THEN
              PDFFileManagement.MergePDFEmailAttachmentsOnServer(TempEmailAttachment);
          END;
        DATABASE::"Purchase Header":
          IF NOT SendQuoteThanksLetter AND NOT SendPurchaseOrderReceipt THEN
            AddRelatedDocumentsForPurchHeader(TempEmailAttachment, RecordVariant);
        DATABASE::"Service Order":
          BEGIN
            RecRef.SETTABLE(ServiceOrder);
            IF ServiceSetup.GET THEN;
            IF ServiceSetup."Send Automatic E-Mail Using" = ServiceSetup."Send Automatic E-Mail Using"::SMTP THEN
              AddRelatedDocumentsForWorkSheet(TempEmailAttachment,ServiceOrder);
          END;
        DATABASE::"Work Order":
          BEGIN
            RecRef.SETTABLE(WorkOrder);
            IF ServiceSetup.GET THEN;
            IF ServiceSetup."Send Automatic E-Mail Using" = ServiceSetup."Send Automatic E-Mail Using"::SMTP THEN
              AddRelatedDocumentsForWorkOrder(TempEmailAttachment, RecordVariant);
          END;
        DATABASE::"Option Quote Header":
          AddRelatedDocumentsForOptionQuote(TempEmailAttachment, RecordVariant);
        DATABASE::Plot:
          AddRelatedDocumentsForPlot(TempEmailAttachment, RecordVariant);
        DATABASE::"Extension Contract":
          AddRelatedDocumentsForExtensionContract(TempEmailAttachment, RecordVariant);
      END;
    END;

    LOCAL PROCEDURE AddRelatedDocumentsForSalesHeader@1100528519(VAR TempEmailAttachment@1100528504 : TEMPORARY Record 11229294;SalesHeader@1100528500 : Record 36);
    VAR
      DocumentRelation@1100528502 : Record 11012407;
      DocumentProperties@1100528501 : Record 11012746;
    BEGIN
      //**4PS
      CASE SalesHeader."Document Type" OF
        SalesHeader."Document Type"::Quote:
          DocumentProperties.GetDocumentsFromDocumentRelations(DocumentProperties, DocumentRelation."Document Type"::"Sales Quote", SalesHeader."No.", TRUE);
        SalesHeader."Document Type"::Order:
          DocumentProperties.GetDocumentsFromDocumentRelations(DocumentProperties, DocumentRelation."Document Type"::"Sales Order", SalesHeader."No.", TRUE);
        SalesHeader."Document Type"::Invoice:
          DocumentProperties.GetDocumentsFromDocumentRelations(DocumentProperties, DocumentRelation."Document Type"::"Sales Invoice", SalesHeader."No.", TRUE);
        SalesHeader."Document Type"::"Credit Memo":
          DocumentProperties.GetDocumentsFromDocumentRelations(DocumentProperties, DocumentRelation."Document Type"::"Sales Cr.Memo", SalesHeader."No.", TRUE);
      END;

      DocumentProperties.MARKEDONLY(TRUE);
      AddRelatedDocuments(TempEmailAttachment, DocumentProperties, FALSE, FALSE);
    END;

    LOCAL PROCEDURE AddRelatedDocumentsForPurchHeader@1100528420(VAR TempEmailAttachment@1100528504 : TEMPORARY Record 11229294;PurchaseHeader@1100528500 : Record 38);
    VAR
      DocumentRelation@1100528502 : Record 11012407;
      DocumentProperties@1100528501 : Record 11012746;
    BEGIN
      //**4PS
      CASE PurchaseHeader."Document Type" OF
        PurchaseHeader."Document Type"::Quote:
          DocumentProperties.GetDocumentsFromDocumentRelations(DocumentProperties, DocumentRelation."Document Type"::"Purchase Quote", PurchaseHeader."No.", TRUE);
        PurchaseHeader."Document Type"::Order:
          DocumentProperties.GetDocumentsFromDocumentRelations(DocumentProperties, DocumentRelation."Document Type"::"Purchase Order", PurchaseHeader."No.", TRUE);
      END;

      DocumentProperties.MARKEDONLY(TRUE);
      AddRelatedDocuments(TempEmailAttachment, DocumentProperties, FALSE, FALSE);
    END;

    LOCAL PROCEDURE AddRelatedDocumentsForWorkSheet@1100528514(VAR TempEmailAttachment@1100528504 : TEMPORARY Record 11229294;ServiceOrder@1100528500 : Record 11012823);
    VAR
      DocumentRelation@1100529601 : Record 11012407;
      ServiceContract@1100528506 : Record 11012812;
      DocumentProperties@1100528501 : Record 11012746;
    BEGIN
      //**4PS
      IF ServiceContract.GET(ServiceOrder."Service Contract No.") THEN
        DocumentProperties.GetDocumentsFromDocumentRelations(DocumentProperties, DocumentRelation."Document Type"::"Service Contract", ServiceContract."No.", TRUE);
      DocumentProperties.GetDocumentsFromDocumentRelations(DocumentProperties, DocumentRelation."Document Type"::"Service Order", ServiceOrder."No.", TRUE);

      DocumentProperties.MARKEDONLY(TRUE);
      AddRelatedDocuments(TempEmailAttachment, DocumentProperties, FALSE, FALSE);
    END;

    LOCAL PROCEDURE AddRelatedDocumentsForWorkOrder@1100529602(VAR TempEmailAttachment@1100528504 : TEMPORARY Record 11229294;WorkOrder@1100528500 : Record 11229279);
    VAR
      DocumentRelation@1100528502 : Record 11012407;
      DocumentProperties@1100528501 : Record 11012746;
      ServiceContract@1100529602 : Record 11012812;
    BEGIN
      //**4PS
      IF ServiceContract.GET(WorkOrder."Service Contract No.") THEN
        DocumentProperties.GetDocumentsFromDocumentRelations(DocumentProperties, DocumentRelation."Document Type"::"Service Contract", ServiceContract."No.", TRUE);
      DocumentProperties.GetDocumentsFromDocumentRelations(DocumentProperties, DocumentRelation."Document Type"::"Work Order", WorkOrder."No.", TRUE);

      DocumentProperties.MARKEDONLY(TRUE);
      AddRelatedDocuments(TempEmailAttachment, DocumentProperties, FALSE, FALSE);
    END;

    LOCAL PROCEDURE AddRelatedDocumentsForOptionQuote@1100529600(VAR TempEmailAttachment@1100528504 : TEMPORARY Record 11229294;OptionQuoteHeader@1100528500 : Record 11012513);
    VAR
      DocumentRelation@1100528502 : Record 11012407;
      DocumentProperties@1100528501 : Record 11012746;
    BEGIN
      //**4PS
      DocumentProperties.GetDocumentsFromDocumentRelations(DocumentProperties, DocumentRelation."Document Type"::"Option Quote", OptionQuoteHeader."No.", TRUE);
      DocumentProperties.MARKEDONLY(TRUE);
      AddRelatedDocuments(TempEmailAttachment, DocumentProperties, FALSE, FALSE);
    END;

    LOCAL PROCEDURE AddRelatedDocumentsForPlot@1100529601(VAR TempEmailAttachment@1100528504 : TEMPORARY Record 11229294;Plot@1100528500 : Record 11012500);
    VAR
      ProjectDocumentRelation@1100528502 : Record 11071833;
      DocumentProperties@1100528501 : Record 11012746;
    BEGIN
      //**4PS
      DocumentProperties.GetDocumentsFromProjectDocRelations(DocumentProperties, ProjectDocumentRelation."Source Type"::Plot,
                                                              Plot."Project No.", Plot."Plot No.");
      DocumentProperties.MARKEDONLY(TRUE);
      AddRelatedDocuments(TempEmailAttachment, DocumentProperties, FALSE, FALSE);
    END;

    LOCAL PROCEDURE AddRelatedDocumentsForExtensionContract@1100529604(VAR TempEmailAttachment@1100528504 : TEMPORARY Record 11229294;ExtensionContract@1100528500 : Record 11012004);
    VAR
      ProjectDocumentRelation@1100528502 : Record 11071833;
      DocumentProperties@1100528501 : Record 11012746;
    BEGIN
      //**4PS
      DocumentProperties.GetDocumentsFromProjectDocRelations(DocumentProperties, ProjectDocumentRelation."Source Type"::"Extension Contract",
                                                              ExtensionContract."Project No.", ExtensionContract."Contract No.");
      DocumentProperties.MARKEDONLY(TRUE);
      AddRelatedDocuments(TempEmailAttachment, DocumentProperties, FALSE, FALSE);
    END;

    PROCEDURE AddRelatedDocuments@1100528703(VAR TempEmailAttachment@1100528500 : TEMPORARY Record 11229294;VAR DocumentProperties@1100528700 : Record 11012746;OnlyWordDocuments@1100528501 : Boolean;ConvertToPDF@1100528507 : Boolean);
    VAR
      FileManagement@1100528503 : Codeunit 419;
      ClientFileName@1100528502 : Text;
      TargetFileName@1100528701 : Text;
      IsTemporaryFile@1100528703 : Boolean;
    BEGIN
      //**4PS
      IF DocumentProperties.FINDSET THEN BEGIN
        REPEAT
          IF (DocumentProperties.HasStorageURI)THEN BEGIN
            ClientFileName := '';
            IsTemporaryFile := FALSE;
            IF (NOT DocumentProperties."External Document") OR (DocumentProperties."External Document" AND NOT OnlyWordDocuments) THEN
              ClientFileName := DocumentProperties.GetClientFile(IsTemporaryFile);
            IF IsTemporaryFile THEN BEGIN
              TargetFileName := FileManagement.GetUniqueClientFileName(
                FileManagement.GetDirectoryName(ClientFileName) + '\' + FileManagement.GetFileName(DocumentProperties."Document Service URL"));
              ClientFileName := FileManagement.MoveAndRenameClientFile(
                ClientFileName,
                FileManagement.GetFileName(TargetFileName),
                '');
            END;
            IF ClientFileName <> '' THEN
              IF FileManagement.ClientFileExists(ClientFileName) THEN BEGIN
                TempEmailAttachment."Attachment Server File Path" := UploadFileSilent(ClientFileName, ConvertToPDF);
                TempEmailAttachment."Delete Server File" := TRUE;
                TempEmailAttachment."Attachment Name" := FileManagement.GetFileName(ClientFileName);
                TempEmailAttachment."Attachment Client File Path" := ClientFileName;
                TempEmailAttachment."Delete Client File" := IsTemporaryFile;
                TempEmailAttachment.INSERT(TRUE);
              END;
          END;
        UNTIL DocumentProperties.NEXT = 0;
      END;
    END;

    PROCEDURE AddStandardAttachments@1100528201(VAR TempEmailAttachment@1100528200 : TEMPORARY Record 11229294;MailTemplateNo@1100528202 : Integer;ShortcutDimension1Code@1100528201 : Code[20];LanguageCode@1100528500 : Code[10]);
    VAR
      MailTemplateAttachment@1100528203 : Record 11229452;
      FileManagement@1100528204 : Codeunit 419;
      ClientFileName@1100528700 : Text;
      TargetFileName@1100528702 : Text;
      IsTemporaryFile@1100528701 : Boolean;
    BEGIN
      //**4PS
      MailTemplateAttachment.SETRANGE("Mail Template No.", MailTemplateNo);
      MailTemplateAttachment.SETRANGE("Shortcut Dimension 1 Code", ShortcutDimension1Code);
      //MailTemplateAttachment.SETFILTER("Language Code",'%1|%2',LanguageCode,'');
      IF MailTemplateAttachment.ISEMPTY AND (ShortcutDimension1Code <> '') THEN
        MailTemplateAttachment.SETRANGE("Shortcut Dimension 1 Code", '');
      IF MailTemplateAttachment.FINDSET THEN BEGIN
        REPEAT
          ClientFileName := MailTemplateAttachment.GetClientFile(IsTemporaryFile);
          IF IsTemporaryFile THEN BEGIN
            TargetFileName := FileManagement.GetUniqueClientFileName(
              FileManagement.GetDirectoryName(ClientFileName) + '\' + FileManagement.GetFileName(MailTemplateAttachment."Document Service URL"));
            ClientFileName := FileManagement.MoveAndRenameClientFile(
              ClientFileName,
              FileManagement.GetFileName(TargetFileName),
              '');
          END;
          IF ClientFileName <> '' THEN BEGIN
            IF MailTemplateAttachment."Document Service URL" = '' THEN
              TempEmailAttachment.SETRANGE("Attachment Client File Path", ClientFileName)
            ELSE
              TempEmailAttachment.SETRANGE("Document Service URL", MailTemplateAttachment."Document Service URL");
            IF TempEmailAttachment.ISEMPTY THEN BEGIN
              TempEmailAttachment.SETRANGE("Attachment Client File Path");
              TempEmailAttachment.SETRANGE("Document Service URL");
              IF FileManagement.ClientFileExists(ClientFileName) THEN BEGIN
                TempEmailAttachment."Attachment Server File Path" := UploadFileSilent(ClientFileName, FALSE);
                TempEmailAttachment."Delete Server File" := TRUE;
                TempEmailAttachment."Attachment Name" := FileManagement.GetFileName(ClientFileName);
                TempEmailAttachment."Attachment Client File Path" := ClientFileName;
                TempEmailAttachment."Delete Client File" := IsTemporaryFile;
                TempEmailAttachment."Document Service URL" := MailTemplateAttachment."Document Service URL";
                TempEmailAttachment.INSERT(TRUE);
              END;
            END ELSE BEGIN
              TempEmailAttachment.SETRANGE("Attachment Client File Path");
              TempEmailAttachment.SETRANGE("Document Service URL");
              IF IsTemporaryFile THEN
                FileManagement.DeleteClientFile(ClientFileName);
            END;
          END;
        UNTIL MailTemplateAttachment.NEXT = 0;
      END
    END;

    LOCAL PROCEDURE UploadFileSilent@1100528521(ClientFileName@1100528500 : Text[250];ConvertToPDF@1100528501 : Boolean) ServerFileName : Text[250];
    VAR
      PDFFileManagement@1100528502 : Codeunit 11020228;
      FileManagement@1100528504 : Codeunit 419;
    BEGIN
      //**4PS
      IF ConvertToPDF THEN
        ServerFileName := PDFFileManagement.UploadFileSilentAsPDF(ClientFileName)
      ELSE
        ServerFileName := FileManagement.UploadFileSilent(ClientFileName);
    END;

    LOCAL PROCEDURE GetEmailParameters@1100525002(RecordVariant@1100525000 : Variant;VAR EmailAddress@1100525001 : Text[250];VAR MailTemplateNo@1100525006 : Integer;VAR Dimension1Code@1100525007 : Code[20];VAR LanguageCode@1100525008 : Code[10];VAR AttachmentFileName@1100525021 : Text[250]);
    VAR
      SalesHeader@1100525012 : Record 36;
      SalesHeaderExtension@1100525013 : Record 11071868;
      SalesShipmentHeader@1100525003 : Record 110;
      SalesInvoiceHeader@1100525028 : Record 112;
      SalesCrMemoHeader@1100525031 : Record 114;
      PurchaseHeader@1100525014 : Record 38;
      ExtensionContract@1100525015 : Record 11012004;
      Customer@1100525016 : Record 18;
      Contact@1100525017 : Record 5050;
      Job@1100525018 : Record 11072003;
      Plot@1100525019 : Record 11012500;
      Employee@1100525020 : Record 5200;
      ServiceOrder@1100525024 : Record 11012823;
      WorkOrder@1100525025 : Record 11229279;
      Vendor@1100525026 : Record 23;
      OptionQuoteHeader@1100525027 : Record 11012513;
      IssuedFinChargeMemoHeader@1100525029 : Record 304;
      IssuedReminderHeader@1100525030 : Record 297;
      ReturnReceiptHeader@1100525032 : Record 6660;
      PurchRcptHeader@1100527900 : Record 120;
      DatetimeMgt@1100525022 : Codeunit 11020218;
      ServiceWorkOrderStatusMail@1100525023 : Codeunit 11012816;
      RecRef@1100528300 : RecordRef;
    BEGIN
      //**4PS
      IF NOT RecordVariant.ISRECORD THEN
        EXIT;

      RecRef.GETTABLE(RecordVariant);
      CASE RecRef.NUMBER OF
        DATABASE::"Sales Header":
          BEGIN
            RecRef.SETTABLE(SalesHeader);
            SalesHeaderExtension.GetSalesHeadExtension(SalesHeader."Document Type", SalesHeader."No.");
            EmailAddress := SalesHeaderExtension."E-Mail (Order Confirmations)";
            MailTemplateNo := MailTemplateManagement.GetMailTemplateNoFromSalesHeader(SalesHeader);
            Dimension1Code := SalesHeader."Shortcut Dimension 1 Code";
            LanguageCode := SalesHeader."Language Code";
          END;
        DATABASE::"Sales Shipment Header":
          BEGIN
            RecRef.SETTABLE(SalesShipmentHeader);
            EmailAddress := SalesShipmentHeader."E-Mail (Shipments)";
            MailTemplateNo := 36;
            Dimension1Code := SalesShipmentHeader."Shortcut Dimension 1 Code";
            LanguageCode := SalesShipmentHeader."Language Code";
          END;
        DATABASE::"Sales Invoice Header":
          BEGIN
            RecRef.SETTABLE(SalesInvoiceHeader);
            EmailAddress := SalesInvoiceHeader."E-Mail (Invoices)";
            MailTemplateNo := 1;
            Dimension1Code := SalesInvoiceHeader."Shortcut Dimension 1 Code";
            LanguageCode := SalesInvoiceHeader."Language Code";
          END;
        DATABASE::"Sales Cr.Memo Header":
          BEGIN
            RecRef.SETTABLE(SalesCrMemoHeader);
            EmailAddress := SalesCrMemoHeader."E-Mail (Invoices)";
            MailTemplateNo := 2;
            Dimension1Code := SalesCrMemoHeader."Shortcut Dimension 1 Code";
            LanguageCode := SalesCrMemoHeader."Language Code";
          END;
        DATABASE::"Purchase Header":
          BEGIN
            RecRef.SETTABLE(PurchaseHeader);
            IF UseEMailForPurchReceipt THEN
              EmailAddress := PurchaseHeader.GetEMailOrderReceipt;
            IF (NOT UseEMailForPurchReceipt) OR (EmailAddress = '') THEN
              EmailAddress := PurchaseHeader.GetEMailOrder;
            MailTemplateNo := MailTemplateManagement.GetMailTemplateNoFromPurchHeader2(PurchaseHeader,SendQuoteThanksLetter,SendPurchaseOrderReceipt);
            Dimension1Code := PurchaseHeader."Shortcut Dimension 1 Code";
            LanguageCode := PurchaseHeader."Language Code";
          END;
        DATABASE::"Extension Contract":
          BEGIN
            RecRef.SETTABLE(ExtensionContract);
            IF Customer.GET(ExtensionContract.Principal) THEN;
            EmailAddress := Customer."E-Mail";
            MailTemplateNo := 80;
            Dimension1Code := ExtensionContract."Department Code";
            LanguageCode := Customer."Language Code";
          END;
        DATABASE::Plot:
          BEGIN
            RecRef.SETTABLE(Plot);
            IF Job.GET(Plot."Project No.") THEN;
            IF Contact.GET(Plot.Buyer) THEN;
            EmailAddress := Plot."Buyer E-Mail";
            MailTemplateNo := 82;
            Dimension1Code := Job."Global Dimension 1 Code";
            LanguageCode := Contact."Language Code";
          END;
        DATABASE::Employee:
          BEGIN
            RecRef.SETTABLE(Employee);
            IF UseCompanyEMailOfEmployee THEN
              EmailAddress := Employee."Company E-Mail"
            ELSE
              EmailAddress := Employee."E-Mail";
            MailTemplateNo := 110;
            Dimension1Code := Employee."Global Dimension 1 Code";
            AttachmentFileName := STRSUBSTNO('%1-%2.pdf', Employee."No.", DatetimeMgt.GetTimestamp);
          END;
        DATABASE::"Service Order":
          BEGIN
            RecRef.SETTABLE(ServiceOrder);
            IF Customer.GET(ServiceOrder."Customer No.") THEN;
            EmailAddress := ServiceWorkOrderStatusMail.FillMailArray(ServiceOrder,1);
            MailTemplateNo := 22;
            Dimension1Code := ServiceOrder."Global Dimension 1 Code";
            LanguageCode := Customer."Language Code";
          END;
        DATABASE::"Work Order":
          BEGIN
            RecRef.SETTABLE(WorkOrder);
            ServiceOrder.GET(WorkOrder."Source No.");
            IF Customer.GET(ServiceOrder."Customer No.") THEN;
            IF WorkOrder."Resource Type" = WorkOrder."Resource Type"::Subcontractor THEN
              EmailAddress := ServiceWorkOrderStatusMail.FillMailArrayByWorkOrder(WorkOrder, 2)
            ELSE
              EmailAddress := ServiceWorkOrderStatusMail.FillMailArray(ServiceOrder, 1);
            MailTemplateNo := 43;
            Dimension1Code := ServiceOrder."Global Dimension 1 Code";
            LanguageCode := Customer."Language Code";
          END;
        DATABASE::Vendor:
          BEGIN
            RecRef.SETTABLE(Vendor);
            EmailAddress := Vendor."E-Mail for Purch. Order";
            Dimension1Code := Vendor."Global Dimension 1 Code";
            LanguageCode := Vendor."Language Code";
            CASE SubcontractorTypeOfMail OF
              SubcontractorTypeOfMail::"Not Finished":
                MailTemplateNo := 24;
              SubcontractorTypeOfMail::"Not Invoiced":
                MailTemplateNo := 25;
            END;
          END;
        DATABASE::"Option Quote Header":
          BEGIN
            RecRef.SETTABLE(OptionQuoteHeader);
            OptionQuoteHeader.GET(OptionQuoteHeader."No.");
            IF Job.GET(OptionQuoteHeader."Project No.") THEN;
            IF Contact.GET(OptionQuoteHeader.Buyer) THEN;
            EmailAddress := OptionQuoteHeader."Buyer E-Mail";
            MailTemplateNo := 81;
            Dimension1Code := Job."Global Dimension 1 Code";
            LanguageCode := Contact."Language Code";
          END;
        DATABASE::"Issued Fin. Charge Memo Header":
          BEGIN
            RecRef.SETTABLE(IssuedFinChargeMemoHeader);
            IF Customer.GET(IssuedFinChargeMemoHeader."Customer No.") THEN;
            EmailAddress := Customer."E-Mail";
            MailTemplateNo := 0;
            Dimension1Code := IssuedFinChargeMemoHeader."Shortcut Dimension 1 Code";
            LanguageCode := IssuedFinChargeMemoHeader."Language Code";
          END;
        DATABASE::"Issued Reminder Header":
          BEGIN
            RecRef.SETTABLE(IssuedReminderHeader);
            EmailAddress := IssuedReminderHeader."E-Mail (Reminders)";
            MailTemplateNo := 35;
            Dimension1Code := IssuedReminderHeader."Shortcut Dimension 1 Code";
            LanguageCode := IssuedReminderHeader."Language Code";
          END;
        DATABASE::"Return Receipt Header":
          BEGIN
            RecRef.SETTABLE(ReturnReceiptHeader);
            IF (NOT Customer.GET(ReturnReceiptHeader."Sell-to Customer No.")) THEN
              Customer.INIT;
            EmailAddress := Customer."E-Mail";
            MailTemplateNo := 0;
            Dimension1Code := ReturnReceiptHeader."Shortcut Dimension 1 Code";
            LanguageCode := ReturnReceiptHeader."Language Code";
          END;
        DATABASE::"Purch. Rcpt. Header":
          BEGIN
            RecRef.SETTABLE(PurchRcptHeader);
            IF UseEMailForPurchReceipt THEN
              EmailAddress := PurchRcptHeader.GetEMailOrderReceipt;
            IF (NOT UseEMailForPurchReceipt) OR (EmailAddress = '') THEN
              EmailAddress := PurchRcptHeader.GetEMailOrder;
            MailTemplateNo := 70;
            Dimension1Code := PurchRcptHeader."Shortcut Dimension 1 Code";
            LanguageCode := PurchRcptHeader."Language Code";
          END;
      END;
    END;

    LOCAL PROCEDURE DoActionsBeforeSendingEMail@1100525005(VAR RecordVariant@1100525000 : Variant);
    VAR
      PurchaseHeader@1100525001 : Record 38;
      RecRef@1100525002 : RecordRef;
      PurchasePlanManagement@1100525004 : Codeunit 11012242;
      PurchasePlanAction@1100525003 : 'Consent,Print,ICMStatus,Word,Confirm,OrderStatus,QuoteStatus,Manual,E-mail,GS1';
    BEGIN
      //**4PS
      IF NOT RecordVariant.ISRECORD THEN
        EXIT;

      RecRef.GETTABLE(RecordVariant);
      CASE RecRef.NUMBER OF
        DATABASE::"Purchase Header":
          BEGIN
            RecRef.SETTABLE(PurchaseHeader);
            IF (PurchaseHeader."Document Type" = PurchaseHeader."Document Type"::Order) AND
               NOT SendPurchaseOrderReceipt
            THEN BEGIN
              IF DirectPostOrderBeforeMailingAccordingToVendor THEN
                PurchaseHeader.DirectPosting;
              PurchasePlanManagement.FinishPhase(PurchaseHeader, PurchasePlanAction::"E-mail", 1);
              PurchaseHeader.GET(PurchaseHeader."Document Type", PurchaseHeader."No.");
              RecordVariant := PurchaseHeader;
            END;
          END;
      END;
    END;

    LOCAL PROCEDURE DoActionsBeforeSavingReportAsPdf@1100525045(RecordVariant@1100525001 : Variant;ReportSelections@1100525000 : Record 77);
    VAR
      RecRef@1100525003 : RecordRef;
      ReportParameterManagement@1100525008 : Codeunit 11012356;
    BEGIN
      //**4PS
      IF NOT RecordVariant.ISRECORD THEN
        EXIT;

      RecRef.GETTABLE(RecordVariant);
      CASE RecRef.NUMBER OF
        DATABASE::Vendor:
          ReportParameterManagement.StoreReportParameter(
            ReportSelections."Report ID",'NoOfDays',SubcontractorNoOfDays,0);
      END;
    END;

    LOCAL PROCEDURE DoActionsAfterSavingReportAsPdf@1100525017(RecordVariant@1100525001 : Variant;VAR TempEmailAttachment@1100525002 : TEMPORARY Record 11229294;ReportSelections@1100525005 : Record 77);
    VAR
      ServiceSetup@1100525000 : Record 11012800;
      ServiceOrder@1100525004 : Record 11012823;
      WorkOrder@1100525006 : Record 11229279;
      Vendor@1100525007 : Record 23;
      RecRef@1100525003 : RecordRef;
      ReportParameterManagement@1100525008 : Codeunit 11012356;
    BEGIN
      //**4PS
      IF NOT RecordVariant.ISRECORD THEN
        EXIT;

      RecRef.GETTABLE(RecordVariant);
      CASE RecRef.NUMBER OF
        DATABASE::"Service Order":
          BEGIN
            RecRef.SETTABLE(ServiceOrder);
            IF ServiceSetup.GET THEN;
            IF WorksheetMustBeDownloaded(ServiceSetup,ServiceWorksheetIsSentManually) THEN BEGIN
              DownloadServiceDocument(
                TempEmailAttachment,ServiceSetup,ServiceOrder."No.",0,ReportSelections.Sequence);
              IF ServiceSetup."Store Mailed Worksheet" THEN
                MarkAttachmentToBeSavedAsExternalDocuments(TempEmailAttachment);
            END;
          END;
        DATABASE::"Work Order":
          BEGIN
            RecRef.SETTABLE(WorkOrder);
            IF ServiceSetup.GET THEN;
            IF WorksheetMustBeDownloaded(ServiceSetup,ServiceWorksheetIsSentManually) THEN BEGIN
              DownloadServiceDocument(
                TempEmailAttachment,ServiceSetup,WorkOrder."No.",0,ReportSelections.Sequence);
              IF ServiceSetup."Store Mailed Worksheet" THEN
                MarkAttachmentToBeSavedAsExternalDocuments(TempEmailAttachment);
            END;
          END;
        DATABASE::Vendor:
          BEGIN
            RecRef.SETTABLE(Vendor);
            IF ServiceSetup.GET THEN;
            ReportParameterManagement.FlushReportParameters(ReportSelections."Report ID");
            DownloadServiceDocument(
              TempEmailAttachment,ServiceSetup,Vendor."No.",0,ReportSelections.Sequence);
            MarkAttachmentToBeSavedAsExternalDocuments(TempEmailAttachment);
          END;
      END;
    END;

    LOCAL PROCEDURE DoActionsAfterSendingEMail@1100525001(RecordVariant@1100525000 : Variant;VAR TempEmailAttachment@1100525006 : TEMPORARY Record 11229294;IsSent@1100525008 : Boolean;ServiceOrderEMailQueueEntryNo@1100525007 : Integer);
    VAR
      SalesHeader@1100525003 : Record 36;
      SalesShipmentHeader@1100525001 : Record 110;
      SalesInvoiceHeader@1100525011 : Record 112;
      SalesCrMemoHeader@1100525013 : Record 114;
      PurchaseHeader@1100525004 : Record 38;
      ServiceOrder@1100525005 : Record 11012823;
      WorkOrder@1100525009 : Record 11229279;
      Vendor@1100525010 : Record 23;
      IssuedReminderHeader@1100525012 : Record 297;
      RecRef@1100525002 : RecordRef;
    BEGIN
      //**4PS
      IF NOT RecordVariant.ISRECORD THEN
        EXIT;

      RecRef.GETTABLE(RecordVariant);
      CASE RecRef.NUMBER OF
        DATABASE::"Sales Header":
          IF IsSent THEN BEGIN
            RecRef.SETTABLE(SalesHeader);
            SalesHeader.GET(SalesHeader."Document Type", SalesHeader."No.");
            SalesHeader.UpdateEMailSentByAndOn;
          END;
        DATABASE::"Sales Shipment Header":
          IF IsSent THEN BEGIN
            RecRef.SETTABLE(SalesShipmentHeader);
            SalesShipmentHeader.GET(SalesShipmentHeader."No.");
            SalesShipmentHeader.UpdateEMailSentByAndOn;
          END;
        DATABASE::"Sales Invoice Header":
          IF IsSent THEN BEGIN
            RecRef.SETTABLE(SalesInvoiceHeader);
            SalesInvoiceHeader.GET(SalesInvoiceHeader."No.");
            SalesInvoiceHeader.UpdateEMailSentByAndOn;
          END;
        DATABASE::"Sales Cr.Memo Header":
          IF IsSent THEN BEGIN
            RecRef.SETTABLE(SalesCrMemoHeader);
            SalesCrMemoHeader.GET(SalesCrMemoHeader."No.");
            SalesCrMemoHeader.UpdateEMailSentByAndOn;
          END;
        DATABASE::"Purchase Header":
          IF IsSent THEN BEGIN
            RecRef.SETTABLE(PurchaseHeader);
            PurchaseHeader.GET(PurchaseHeader."Document Type", PurchaseHeader."No.");
            IF SendPurchaseOrderReceipt THEN
              PurchaseHeader.UpdateEMailReceiptSentByAndOn
            ELSE
              PurchaseHeader.UpdateEMailSentByAndOn;
            IF ArchiveOrderAfterMailing AND (PurchaseHeader."Document Type" = PurchaseHeader."Document Type"::Order) THEN
              ArchivePurchaseOrder(PurchaseHeader);
            IF ChangeStatusAfterMailing <> ChangeStatusAfterMailing::None THEN
              HandlePurchaseHeaderStatus(ChangeStatusAfterMailing, PurchaseHeader);
          END;
        DATABASE::"Service Order":
          BEGIN //Worksheets must be saved as external document, even if e-mail has not been sent.
            RecRef.SETTABLE(ServiceOrder);
            ServiceOrder.GET(ServiceOrder."No.");
            ServiceOrder.UpdateDateTimeExportWorkSheet;
            SaveWorksheetsAsExternalDocuments(
              TempEmailAttachment, ServiceOrder, ServiceOrderEMailQueueEntryNo);
          END;
        DATABASE::"Work Order":
          BEGIN //Worksheets must be saved as external document, even if e-mail has not been sent.
            RecRef.SETTABLE(WorkOrder);
            WorkOrder.GET(WorkOrder."No.");
            WorkOrder.UpdateDateTimeExportWorkSheet;
            ServiceOrder.GET(WorkOrder."Source No.");
            SaveWorksheetsAsExternalDocuments(
              TempEmailAttachment, ServiceOrder, ServiceOrderEMailQueueEntryNo);
          END;
        DATABASE::Vendor:
          IF IsSent THEN BEGIN
            RecRef.SETTABLE(Vendor);
            SaveSubcontractorServiceOrderListsAsExternalDocuments(
            TempEmailAttachment, Vendor, EMailSubject, ServiceOrderEMailQueueEntryNo);
          END;
        DATABASE::"Issued Reminder Header":
          IF IsSent THEN BEGIN
            RecRef.SETTABLE(IssuedReminderHeader);
            IssuedReminderHeader.GET(IssuedReminderHeader."No.");
            IssuedReminderHeader.UpdateEMailSentByAndOn;
          END;
      END;
    END;

    LOCAL PROCEDURE SelectReports@1100525000(AllowReportSelForm@1100525002 : Boolean;VAR TempReportSelections@1100525000 : TEMPORARY Record 77);
    BEGIN
      //*4PS
      IF TempReportSelections.COUNT = 1 THEN BEGIN
        TempReportSelections.FINDFIRST;
        AllowReportSelForm := NOT TempReportSelections."Default Selection";
      END;
      IF AllowReportSelForm THEN BEGIN
        IF PAGE.RUNMODAL(PAGE::"Selected Reports", TempReportSelections) = ACTION::LookupOK THEN BEGIN
          TempReportSelections.SETRANGE("Report ID", 0); // In case user has added an empty line.
          TempReportSelections.DELETEALL;
          TempReportSelections.SETRANGE("Report ID");
        END ELSE
          TempReportSelections.MODIFYALL(TempReportSelections."Default Selection", FALSE)
      END;
      TempReportSelections.SETRANGE("Default Selection", FALSE);
      TempReportSelections.DELETEALL;
      //TempReportSelections.RESET; //**4PS.o
      TempReportSelections.ResetWithoutLosingGlobalVars; //**4PS.n
    END;

    LOCAL PROCEDURE RecordVariantIsBlanketOrder@1100525004(RecordVariant@1100525000 : Variant) : Boolean;
    VAR
      PurchaseHeader@1100525002 : Record 38;
      RecRef@1100525001 : RecordRef;
    BEGIN
      //**4PS
      IF NOT RecordVariant.ISRECORD THEN
        EXIT(FALSE);

      RecRef.GETTABLE(RecordVariant);
      IF RecRef.NUMBER = DATABASE::"Purchase Header" THEN BEGIN
        RecRef.SETTABLE(PurchaseHeader);
        IF PurchaseHeader."Purchase Order Type" = PurchaseHeader."Purchase Order Type"::"Blanket Order" THEN
          EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE AddReportSelectionsForBlanketOrder@1100525003(VAR TempReportSelections@1100525000 : TEMPORARY Record 77;UseForEmailAttachment@1100525001 : Boolean);
    VAR
      TempReportSelections2@1100525002 : TEMPORARY Record 77;
    BEGIN
      //**4PS
      IF UseForEmailAttachment THEN
        FilterEmailAttachmentUsage(6001)
      ELSE
        FilterPrintUsage(6001);
      IF CopyReportSelectionToReportSelection(TempReportSelections2) THEN
        SelectReports(TRUE, TempReportSelections2);
      IF TempReportSelections2.FINDSET THEN BEGIN
        REPEAT
          TempReportSelections.COPY(TempReportSelections2);
          TempReportSelections.INSERT;
        UNTIL TempReportSelections2.NEXT = 0;
      END;
      IF TempReportSelections.FINDSET THEN;
    END;

    LOCAL PROCEDURE ArchivePurchaseOrder@1100528437(VAR PurchaseHeader@1100528400 : Record 38);
    VAR
      ArchiveManagement@1100528401 : Codeunit 5063;
      SegManagement@1100528403 : Codeunit 5051;
      LogInteraction@1100528402 : Boolean;
    BEGIN
      //**4PS
      LogInteraction := SegManagement.FindInteractTmplCode(13) <> '';
      ArchiveManagement.StorePurchDocument(PurchaseHeader,LogInteraction);
      IF LogInteraction THEN BEGIN
        PurchaseHeader.CALCFIELDS("No. of Archived Versions");
        SegManagement.LogDocument(
          13, PurchaseHeader."No.", PurchaseHeader."Doc. No. Occurrence", PurchaseHeader."No. of Archived Versions",
          DATABASE::Vendor, PurchaseHeader."Buy-from Vendor No.", PurchaseHeader."Purchaser Code", '',
          PurchaseHeader."Posting Description", '');
      END;
    END;

    LOCAL PROCEDURE HandlePurchaseHeaderStatus@1100528438(ChangeStatus@1100528400 : 'None,Released,Closed';VAR PurchaseHeader@1100528401 : Record 38);
    VAR
      ReleasePurchaseDocument@1100528402 : Codeunit 415;
    BEGIN
      //**4PS
      CASE ChangeStatus OF
        ChangeStatus::Released:
          ReleasePurchaseDocument.RUN(PurchaseHeader);
        ChangeStatus::Closed:
          ReleasePurchaseDocument.Close(PurchaseHeader);
      END;
    END;

    LOCAL PROCEDURE WorksheetMustBeDownloaded@1100528520(ServiceSetup@1100528500 : Record 11012800;EMailIsSentManually@1100528502 : Boolean) : Boolean;
    BEGIN
      //**4PS
      IF ServiceSetup."Store Mailed Worksheet" THEN
        EXIT(TRUE);

      IF (ServiceSetup."Send Automatic E-Mail Using" = ServiceSetup."Send Automatic E-Mail Using"::"Service Order E-Mail Queue") AND
         NOT EMailIsSentManually
      THEN
        EXIT(TRUE);
    END;

    PROCEDURE DownloadServiceDocument@1100528515(VAR TempEmailAttachment@1100528500 : TEMPORARY Record 11229294;ServiceSetup@1100528502 : Record 11012800;ServiceDocumentNo@1100528104 : Code[20];MailTemplateNo@1100528503 : Integer;Sequence@1100528501 : Code[10]);
    VAR
      MailTemplate@1100528300 : Record 11229450;
      DatetimeMgt@1100528505 : Codeunit 11020218;
      FileManagement@1100528504 : Codeunit 419;
      ClientFullFileName@1100528400 : Text[250];
    BEGIN
      //**4PS
      IF MailTemplateNo = 0 THEN
        TempEmailAttachment."Attachment Name" := STRSUBSTNO(
          '%1_%2 (%3).pdf', ServiceDocumentNo, Sequence, DatetimeMgt.GetTimestamp)
      ELSE BEGIN
        MailTemplateManagement.GetMailTemplate(MailTemplate, MailTemplateNo, '');
        TempEmailAttachment."Attachment Name" := STRSUBSTNO(
          '%1_%2_%3 (%4).pdf', ServiceDocumentNo, MailTemplate.Description, Sequence, DatetimeMgt.GetTimestamp);
      END;
      ServiceSetup.TESTFIELD("Path Name (Archive)");
      ClientFullFileName := STRSUBSTNO(
        '%1%2',ServiceSetup."Path Name (Archive)",TempEmailAttachment."Attachment Name");
      FileManagement.DownloadToFile(TempEmailAttachment."Attachment Server File Path", ClientFullFileName);
      TempEmailAttachment."Attachment Client File Path" := ClientFullFileName;
      TempEmailAttachment."Delete Client File" := FALSE; // File must not be removed from ServiceSetup."Path Name (Archive)"!
      TempEmailAttachment.MODIFY;
    END;

    LOCAL PROCEDURE MarkAttachmentToBeSavedAsExternalDocuments@1100528417(VAR TempEmailAttachment@1100528400 : TEMPORARY Record 11229294);
    BEGIN
      //**4PS
      TempEmailAttachment."Save As External Documents" := TRUE;
      TempEmailAttachment.MODIFY;
    END;

    LOCAL PROCEDURE SaveWorksheetsAsExternalDocuments@1100528424(VAR TempEmailAttachment@1100528500 : TEMPORARY Record 11229294;ServiceOrder@1100528104 : Record 11012823;ServiceOrderEMailQueueEntryNo@1100528400 : Integer);
    VAR
      ServiceSetup@1100525000 : Record 11012800;
    BEGIN
      //**4PS
      IF ServiceSetup.GET THEN;
      TempEmailAttachment.SETRANGE("Save As External Documents", TRUE);
      IF TempEmailAttachment.FINDSET THEN
        REPEAT
          SaveWorksheetAsExternalDocuments(
            TempEmailAttachment, ServiceSetup, ServiceOrder, ServiceOrderEMailQueueEntryNo);
        UNTIL TempEmailAttachment.NEXT = 0;
      TempEmailAttachment.SETRANGE("Save As External Documents");
    END;

    LOCAL PROCEDURE SaveWorksheetAsExternalDocuments@1100528102(VAR TempEmailAttachment@1100528500 : TEMPORARY Record 11229294;ServiceSetup@1100528501 : Record 11012800;ServiceOrder@1100528104 : Record 11012823;ServiceOrderEMailQueueEntryNo@1100528400 : Integer);
    BEGIN
      //**4PS
      SaveServiceDocumentAsExternalDocuments(
        TempEmailAttachment, ServiceSetup."Store Worksheet as Doc.Type.",
        ServiceSetup."Publish Stored Worksheet SPT", CREATEDATETIME(TODAY, TIME), ServiceOrder,
        ServiceOrder."Customer No.", '', '', ServiceOrderEMailQueueEntryNo);
    END;

    PROCEDURE SaveSOAppointmentLettersAsExternalDocuments@1100528404(ReportUsage@1100525000 : Integer;VAR ServiceOrder@1100528400 : Record 11012823;OnlyMarkedAsResend@1100528405 : Boolean;IExecuteWithin@1100528601 : DateFormula);
    VAR
      ServiceOrder2@1100528408 : Record 11012823;
      ServiceSetup@1100528401 : Record 11012800;
      ServiceOrderExtension@1100528406 : Record 11071727;
      TempReportSelections@1100528403 : TEMPORARY Record 77;
      TempEmailAttachment@1100528404 : TEMPORARY Record 11229294;
      ReportParameterManagement@1100528602 : Codeunit 11012356;
      MailBodyNo@1100528600 : Integer;
    BEGIN
      //**4PS
      IF ServiceSetup.GET THEN;

      FilterPrintUsage(ReportUsage);
      SETFILTER("Report ID",'<>0');
      FindReportSelections(TempReportSelections,'',0,FALSE,FALSE);

      IF TempReportSelections.FINDSET THEN BEGIN
        IF FORMAT(IExecuteWithin) <> '' THEN
          ReportParameterManagement.StoreReportParameter(TempReportSelections."Report ID", 'ExecuteWithin', IExecuteWithin, 0);
        REPEAT
          IF ServiceOrder.FINDSET THEN
            REPEAT
              IF ServiceOrder."Source Type" = ServiceOrder."Source Type"::Contract THEN
                MailBodyNo := 41
              ELSE
                MailBodyNo := 160;
              ServiceOrder2.COPY(ServiceOrder);
              ServiceOrder2.SETRECFILTER;
              SaveAnyRecordReportAsPdf(ServiceOrder2, MailBodyNo, ServiceOrder."Global Dimension 1 Code",
                TempReportSelections."Report ID", TRUE, FALSE, ServiceOrder.TABLECAPTION,ServiceOrder."No.", TempEmailAttachment);
              DownloadServiceDocument(TempEmailAttachment,ServiceSetup,ServiceOrder."No.", 0, TempReportSelections.Sequence);
              MarkAttachmentToBeSavedAsExternalDocuments(TempEmailAttachment);
              SaveSOAppointmentLetterAsExternalDocuments(TempEmailAttachment,ServiceOrder);
              ServiceOrderExtension.GetServOrderExtension(ServiceOrder."No.");
              ServiceOrderExtension."Date Appointm. Confirm. Sent" := 0D; // Needed for next print command
              IF OnlyMarkedAsResend THEN
                ServiceOrderExtension."Resend Appointm. Confirmation" := FALSE;
              ServiceOrderExtension.UpdateServOrderExtension(ServiceOrder."No.");
              COMMIT;
            UNTIL ServiceOrder.NEXT = 0;
        UNTIL TempReportSelections.NEXT = 0;
        ReportParameterManagement.FlushReportParameters(TempReportSelections."Report ID");
      END;

      TempEmailAttachment.DeleteTempEmailAttachmentFiles(TempEmailAttachment); // Because these files are not sent via e-mail.
    END;

    LOCAL PROCEDURE SaveSOAppointmentLetterAsExternalDocuments@1100528405(VAR TempEmailAttachment@1100528500 : TEMPORARY Record 11229294;ServiceOrder@1100528104 : Record 11012823);
    BEGIN
      //**4PS
      SaveServiceDocumentAsExternalDocuments(
        TempEmailAttachment, '', FALSE, 0DT, ServiceOrder, ServiceOrder."Customer No.", '', '', 0);
    END;

    LOCAL PROCEDURE SaveSubcontractorServiceOrderListsAsExternalDocuments@1100528432(VAR TempEmailAttachment@1100528500 : TEMPORARY Record 11229294;Vendor@1100528104 : Record 23;Subject@1100528400 : Text[250];ServiceOrderEMailQueueEntryNo@1100528401 : Integer);
    VAR
      ServiceSetup@1100525000 : Record 11012800;
    BEGIN
      //**4PS
      IF ServiceSetup.GET THEN;
      TempEmailAttachment.SETRANGE("Save As External Documents", TRUE);
      IF TempEmailAttachment.FINDSET THEN
        REPEAT
          SaveSubcontractorServiceOrderListAsExternalDocuments(
            TempEmailAttachment, ServiceSetup, Vendor, Subject, ServiceOrderEMailQueueEntryNo);
        UNTIL TempEmailAttachment.NEXT = 0;
      TempEmailAttachment.SETRANGE("Save As External Documents");
    END;

    LOCAL PROCEDURE SaveSubcontractorServiceOrderListAsExternalDocuments@1100528414(VAR TempEmailAttachment@1100528500 : TEMPORARY Record 11229294;ServiceSetup@1100528501 : Record 11012800;Vendor@1100528104 : Record 23;Subject@1100528400 : Text[250];ServiceOrderEMailQueueEntryNo@1100528401 : Integer);
    BEGIN
      //**4PS
      SaveServiceDocumentAsExternalDocuments(
        TempEmailAttachment, ServiceSetup."Store Worksheet as Doc.Type.",
        ServiceSetup."Publish Stored Worksheet SPT", CREATEDATETIME(TODAY, TIME), Vendor,
        '', Vendor."No.", Subject, ServiceOrderEMailQueueEntryNo);
    END;

    LOCAL PROCEDURE SaveServiceDocumentAsExternalDocuments@1100528402(VAR TempEmailAttachment@1100528500 : TEMPORARY Record 11229294;DocumentType@1100528400 : Code[10];PublishOnServicePortal@1100528401 : Boolean;EMailSentOn@1100528402 : DateTime;SourceVariant@1100528104 : Variant;CustomerNo@1100528403 : Code[20];VendorNo@1100528404 : Code[20];Subject@1100528405 : Text[250];ServiceOrderEMailQueueEntryNo@1100528406 : Integer);
    VAR
      Contact@1100528100 : Record 5050;
      ExternalDocumentManagement@1100528103 : Codeunit 11012403;
      SourceFileName@1100528506 : Text;
      TargetDirectory@1100528702 : Text;
      TargetFileName@1100528701 : Text;
      TargetStorageType@1100525000 : Option;
    BEGIN
      //**4PS
      SourceFileName := TempEmailAttachment."Attachment Client File Path";
      GetContractDSFromConBusRel(CustomerNo, VendorNo, Contact);
      IF Contact.FINDSET THEN BEGIN
        ExternalDocumentManagement.RegisterFileCopyOnly(SourceFileName, DocumentType, TODAY, TargetDirectory, TargetStorageType);
        REPEAT
          SaveServiceDocumentAsExternalDocument(
            TargetDirectory, TargetStorageType, DocumentType, PublishOnServicePortal, EMailSentOn, SourceVariant, Contact, Subject);
        UNTIL Contact.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE SaveServiceDocumentAsExternalDocument@1100528100(StorageFileURI@1100525000 : Text[260];StorageType@1100525001 : Option;DocumentType@1100528400 : Code[10];PublishOnServicePortal@1100528401 : Boolean;EMailSentOn@1100528402 : DateTime;SourceVariant@1100528101 : Variant;Contact@1100528108 : Record 5050;Subject@1100528403 : Text[250]);
    VAR
      RecRef@1100528102 : RecordRef;
      DocumentProperties@1100528104 : Record 11012746;
      DocumentLinkManagement@1100528103 : Codeunit 11012401;
    BEGIN
      //**4PS
      DocumentProperties.INIT;
      DocumentProperties."External Document" := TRUE;
      DocumentProperties.Description := DocumentProperties.Description;
      DocumentProperties."E-Mail Sent On" := EMailSentOn;
      DocumentProperties.INSERT(TRUE);
      IF Contact.IsContactPerson THEN BEGIN
        DocumentProperties.VALIDATE("Contact No.", Contact."Company No.");
        DocumentProperties.VALIDATE("Contact Person No.", Contact."No.");
      END ELSE BEGIN
        DocumentProperties.VALIDATE("Contact No.", Contact."No.");
      END;
      DocumentProperties.ValidateStorageURI(StorageType,StorageFileURI);
      DocumentProperties.VALIDATE("Publish on Service Portal", PublishOnServicePortal);
      DocumentProperties."Document Type" := DocumentType;
      DocumentProperties.Subject := Subject;
      DocumentProperties.MODIFY(TRUE);

      RecRef.GETTABLE(SourceVariant);
      DocumentLinkManagement.CreateOneDocumentLink(DocumentProperties, RecRef.RECORDID);
    END;

    LOCAL PROCEDURE GetContractDSFromConBusRel@1100528518(CustomerNo@1100525002 : Code[20];VendorNo@1100528400 : Code[20];VAR Contact@1100525001 : Record 5050);
    VAR
      ContactBusinessRelation@1100525000 : Record 5054;
    BEGIN
      //**4PS
      Contact.RESET;
      ContactBusinessRelation.SETCURRENTKEY("Link to Table", "No.");
      IF CustomerNo <> '' THEN BEGIN
        ContactBusinessRelation.SETRANGE("Link to Table", ContactBusinessRelation."Link to Table"::Customer);
        ContactBusinessRelation.SETRANGE("No.", CustomerNo);
      END ELSE BEGIN
        ContactBusinessRelation.SETRANGE("Link to Table", ContactBusinessRelation."Link to Table"::Vendor);
        ContactBusinessRelation.SETRANGE("No.", VendorNo);
      END;
      IF ContactBusinessRelation.FINDSET THEN
        REPEAT
          IF Contact.GET(ContactBusinessRelation."Contact No.") THEN
            Contact.MARK(TRUE);
        UNTIL ContactBusinessRelation.NEXT = 0;
      Contact.MARKEDONLY(TRUE);
    END;

    LOCAL PROCEDURE ServiceOrderEmailQueueMustBeUsed@1100525024(RecordVariant@1100525000 : Variant) : Boolean;
    VAR
      ServiceSetup@1100525001 : Record 11012800;
      RecRef@1100525002 : RecordRef;
    BEGIN
      //**4PS
      IF NOT RecordVariant.ISRECORD THEN
        EXIT(FALSE);

      RecRef.GETTABLE(RecordVariant);
      CASE RecRef.NUMBER OF
        DATABASE::"Service Order", DATABASE::"Work Order":
          BEGIN
            IF ServiceSetup.GET THEN;
            IF NOT ServiceWorksheetIsSentManually AND
               (ServiceSetup."Send Automatic E-Mail Using" = ServiceSetup."Send Automatic E-Mail Using"::"Service Order E-Mail Queue")
            THEN
              EXIT(TRUE);
          END;
        DATABASE::Vendor:
          BEGIN
            IF ServiceSetup.GET THEN;
            IF ServiceSetup."Send Automatic E-Mail Using" = ServiceSetup."Send Automatic E-Mail Using"::"Service Order E-Mail Queue" THEN
              EXIT(TRUE);
          END;
      END;
    END;

    LOCAL PROCEDURE GetSendEmailToNameForServiceOrderEMailQueue@1100525015(RecordVariant@1100525000 : Variant) : Text[100];
    VAR
      ServiceOrder@1100525002 : Record 11012823;
      WorkOrder@1100525003 : Record 11229279;
      Vendor@1100525004 : Record 23;
      RecRef@1100525001 : RecordRef;
    BEGIN
      //**4PS
      IF NOT RecordVariant.ISRECORD THEN
        EXIT('');

      RecRef.GETTABLE(RecordVariant);
      CASE RecRef.NUMBER OF
        DATABASE::"Service Order":
          BEGIN
            RecRef.SETTABLE(ServiceOrder);
            ServiceOrder.CALCFIELDS("Customer Name");
            EXIT(ServiceOrder."Customer Name");
          END;
        DATABASE::"Work Order":
          BEGIN
            RecRef.SETTABLE(WorkOrder);
            ServiceOrder.GET(WorkOrder."Source No.");
            ServiceOrder.CALCFIELDS("Customer Name");
            EXIT(ServiceOrder."Customer Name");
          END;
        DATABASE::Vendor:
          BEGIN
            RecRef.SETTABLE(Vendor);
            EXIT(Vendor.Name);
          END;
      END;
    END;

    LOCAL PROCEDURE GetServiceOrderEMailQueueDocumentType@1100525018(RecordVariant@1100525000 : Variant) : Integer;
    VAR
      ServiceOrderEMailQueue@1100525002 : Record 11020337;
      RecRef@1100525001 : RecordRef;
    BEGIN
      //**4PS
      IF NOT RecordVariant.ISRECORD THEN
        EXIT(0);

      RecRef.GETTABLE(RecordVariant);
      CASE RecRef.NUMBER OF
        DATABASE::"Service Order":
          EXIT(ServiceOrderEMailQueue."Document Type"::"Service Order");
        DATABASE::"Work Order":
          EXIT(ServiceOrderEMailQueue."Document Type"::"Work Order");
        DATABASE::Vendor:
          CASE SubcontractorTypeOfMail OF
            SubcontractorTypeOfMail::"Not Finished":
              EXIT(ServiceOrderEMailQueue."Document Type"::"Subcontractor SO's not Finished");
            SubcontractorTypeOfMail::"Not Invoiced":
              EXIT(ServiceOrderEMailQueue."Document Type"::"Subcontractor Invoice not Received");
          END;
      END;
    END;

    PROCEDURE PrintWithPrinterSelection@1100485021(ReportUsage@1100525003 : Integer;RecordVariant@1100525001 : Variant;ListType@1100525006 : Integer);
    VAR
      TempReportSelections@11012001 : TEMPORARY Record 77;
      TempPrinter@1100525005 : TEMPORARY Record 2000000039;
      RecRef@1100525002 : RecordRef;
      FirstReport@1100525000 : Boolean;
      PrinterSelectionDone@1100525004 : Boolean;
    BEGIN
      //**4PS
      FindPrintUsage(ReportUsage,'',TRUE,TempReportSelections);
      RecRef.GETTABLE(RecordVariant);
      FirstReport := TRUE;
      REPEAT
        IF TempReportSelections."No Request Form" AND TempReportSelections."Printer Selection" THEN BEGIN
          IF NOT DoPrinterSelection(TempPrinter,PrinterSelectionDone) THEN
            EXIT;
          IF TempPrinter.FINDSET THEN BEGIN
            REPEAT
              FillPrinterSelection(TempReportSelections."Report ID", TempPrinter.ID);
              REPORT.RUNMODAL(TempReportSelections."Report ID",FALSE,FALSE,RecordVariant);
              IF FirstReport THEN BEGIN
                IF RecRef.FINDSET THEN BEGIN
                  REPEAT
                    UpdatePlantListPrintedOn(ListType,GetOrderNo(RecRef),TempPrinter.ID);
                  UNTIL RecRef.NEXT = 0;
                END;
              END;
            UNTIL TempPrinter.NEXT = 0;
            FirstReport := FALSE;
          END;
        END ELSE
          REPORT.RUNMODAL(TempReportSelections."Report ID",NOT TempReportSelections."No Request Form",FALSE,RecordVariant);
      UNTIL TempReportSelections.NEXT = 0;
    END;

    LOCAL PROCEDURE DoPrinterSelection@1100485023(VAR TempPrinter@1100525001 : TEMPORARY Record 2000000039;VAR PrinterSelectionDone@1100525000 : Boolean) : Boolean;
    VAR
      Printer@1100485001 : Record 2000000039;
      PrintersPage@1100485000 : Page 356;
    BEGIN
      //**4PS
      IF PrinterSelectionDone THEN
        EXIT(TRUE);

      PrinterSelectionDone := TRUE;
      TempPrinter.RESET;
      TempPrinter.DELETEALL;

      IF NOT Printer.FINDSET THEN BEGIN
        MESSAGE(Text11012003);
        EXIT(FALSE);
      END ELSE BEGIN
        IF Printer.NEXT = 0 THEN BEGIN  //* Only 1 printer present
          TempPrinter := Printer;
          TempPrinter.INSERT;
          EXIT(TRUE);
        END;
      END;

      PrintersPage.SetMultiPrinterSelection();
      PrintersPage.LOOKUPMODE(TRUE);
      IF (PrintersPage.RUNMODAL = ACTION::LookupOK) THEN
        PrintersPage.GetSelectedPrinters(TempPrinter);

      TempPrinter.RESET;
      IF TempPrinter.FINDSET THEN
        EXIT(TRUE);

      MESSAGE(Text11012004);
      EXIT(FALSE)
    END;

    LOCAL PROCEDURE FillPrinterSelection@1100485024(ReportID@1100485001 : Integer;PrinterName@1100525001 : Text[250]);
    VAR
      PrinterSelection@1100525000 : Codeunit 11020214;
    BEGIN
      //**4PS
      PrinterSelection.SetPrinter(ReportID, PrinterName);
    END;

    LOCAL PROCEDURE GetOrderNo@1100525014(RecRef@1100525000 : RecordRef) : Code[20];
    VAR
      PlantOrder@1100525003 : Record 11012556;
      PlantTransportOrder@1100525002 : Record 11020505;
      PostedPlantTransportOrder@1100525001 : Record 11020507;
    BEGIN
      //**4PS
      CASE RecRef.NUMBER OF
        DATABASE::"Plant Order":
          BEGIN
            RecRef.SETTABLE(PlantOrder);
            EXIT(PlantOrder."No.");
          END;
        DATABASE::"Plant Transport Order":
          BEGIN
            RecRef.SETTABLE(PlantTransportOrder);
            EXIT(PlantTransportOrder."No.");
          END;
        DATABASE::"Posted Plant Transport Order":
          BEGIN
            RecRef.SETTABLE(PostedPlantTransportOrder);
            EXIT(PostedPlantTransportOrder."No.");
          END;
      END;
    END;

    LOCAL PROCEDURE UpdatePlantListPrintedOn@1100485025(ListType@1100485000 : Option;OrderNo@1100485001 : Code[20];PrinterName@1100525001 : Text[250]);
    VAR
      PrinterByListPlant@1100525000 : Record 11020512;
      NextEntryNo@1100485002 : Integer;
      FPSLicenseManagement@1100527400 : Codeunit 11229289;
    BEGIN
      //**4PS
      WITH PrinterByListPlant DO BEGIN
        IF (OrderNo = '') OR (NOT FPSLicenseManagement.LicenseAndReadPermissionForTable(PrinterByListPlant)) THEN
          EXIT;

        SETRANGE("List Type", ListType);
        SETRANGE("Order No.", OrderNo);
        IF NOT FINDLAST THEN
          "Entry No." := 0;
        NextEntryNo := "Entry No." + 1;

        INIT;
        "List Type" := ListType;
        "Order No." := OrderNo;
        "Entry No." := NextEntryNo;
        "Printer Name" := PrinterName;
        "Print Date" := TODAY;
        "Print Time" := TIME;
        INSERT;
      END;
    END;

    PROCEDURE SetDirectPostOrderBeforeMailingAccordingToVendor@1100525007(DirectPostOrderBeforeMailingAccordingToVendor2@1100525000 : Boolean);
    BEGIN
      //**4PS
      DirectPostOrderBeforeMailingAccordingToVendor := DirectPostOrderBeforeMailingAccordingToVendor2;
    END;

    PROCEDURE SetSendQuoteThanksLetter@1100525010(SendQuoteThanksLetter2@1100525000 : Boolean);
    BEGIN
      //**4PS
      SendQuoteThanksLetter := SendQuoteThanksLetter2;
    END;

    PROCEDURE SetSendPurchaseOrderReceipt@1100525009(SendPurchaseOrderReceipt2@1100525000 : Boolean);
    BEGIN
      //**4PS
      SendPurchaseOrderReceipt := SendPurchaseOrderReceipt2;
    END;

    PROCEDURE SetArchiveOrderAfterMailing@1100525011(ArchiveOrderAfterMailing2@1100525000 : Boolean);
    BEGIN
      //**4PS
      ArchiveOrderAfterMailing := ArchiveOrderAfterMailing2;
    END;

    PROCEDURE SetUseCompanyEMailOfEmployee@1100525013(UseCompanyEMailOfEmployee2@1100525000 : Boolean);
    BEGIN
      //**4PS
      UseCompanyEMailOfEmployee := UseCompanyEMailOfEmployee2;
    END;

    PROCEDURE SetServiceWorksheetIsSentManually@1100525019(ServiceWorksheetIsSentManually2@1100525000 : Boolean);
    BEGIN
      //**4PS
      ServiceWorksheetIsSentManually := ServiceWorksheetIsSentManually2;
    END;

    PROCEDURE SetChangeStatusAfterMailing@1100525012(ChangeStatusAfterMailing2@1100525000 : Integer);
    BEGIN
      //**4PS
      ChangeStatusAfterMailing := ChangeStatusAfterMailing2;
    END;

    PROCEDURE SetSubcontractorTypeOfMail@1100525023(SubcontractorTypeOfMail2@1100525000 : Integer);
    BEGIN
      //**4PS
      SubcontractorTypeOfMail := SubcontractorTypeOfMail2;
    END;

    PROCEDURE SetEMailSubject@1100525016(EMailSubject2@1100525000 : Text[50]);
    BEGIN
      //**4PS
      EMailSubject := EMailSubject2;
    END;

    PROCEDURE SetSubcontractorNoOfDays@1100525041(SubcontractorNoOfDays2@1100525000 : Integer);
    BEGIN
      //**4PS
      SubcontractorNoOfDays := SubcontractorNoOfDays2;
    END;

    PROCEDURE ResetWithoutLosingGlobalVars@1100525006();
    VAR
      DirectPostOrderBeforeMailingAccordingToVendor2@1100525000 : Boolean;
      SendQuoteThanksLetter2@1100525001 : Boolean;
      SendPurchaseOrderReceipt2@1100525005 : Boolean;
      ArchiveOrderAfterMailing2@1100525002 : Boolean;
      UseCompanyEMailOfEmployee2@1100525006 : Boolean;
      ServiceWorksheetIsSentManually2@1100525007 : Boolean;
      ChangeStatusAfterMailing2@1100525003 : Integer;
      SubcontractorTypeOfMail2@1100525008 : Integer;
      EMailsubject2@1100525004 : Text[50];
      SubcontractorNoOfDays2@1100525009 : Integer;
      UseEMailForPurchReceipt2@1100529600 : Boolean;
    BEGIN
      //**4PS
      DirectPostOrderBeforeMailingAccordingToVendor2 := DirectPostOrderBeforeMailingAccordingToVendor;
      SendQuoteThanksLetter2 := SendQuoteThanksLetter;
      SendPurchaseOrderReceipt2 := SendPurchaseOrderReceipt;
      ArchiveOrderAfterMailing2 := ArchiveOrderAfterMailing;
      UseCompanyEMailOfEmployee2 := UseCompanyEMailOfEmployee;
      ServiceWorksheetIsSentManually2 := ServiceWorksheetIsSentManually;
      ChangeStatusAfterMailing2 := ChangeStatusAfterMailing;
      SubcontractorTypeOfMail2 := SubcontractorTypeOfMail;
      EMailsubject2 := EMailSubject;
      SubcontractorNoOfDays2 := SubcontractorNoOfDays;
      UseEMailForPurchReceipt2 := UseEMailForPurchReceipt;
      RESET;
      DirectPostOrderBeforeMailingAccordingToVendor := DirectPostOrderBeforeMailingAccordingToVendor2;
      SendQuoteThanksLetter := SendQuoteThanksLetter2;
      SendPurchaseOrderReceipt := SendPurchaseOrderReceipt2;
      ArchiveOrderAfterMailing := ArchiveOrderAfterMailing2;
      UseCompanyEMailOfEmployee := UseCompanyEMailOfEmployee2;
      ServiceWorksheetIsSentManually := ServiceWorksheetIsSentManually2;
      ChangeStatusAfterMailing := ChangeStatusAfterMailing2;
      SubcontractorTypeOfMail := SubcontractorTypeOfMail2;
      EMailSubject := EMailsubject2;
      SubcontractorNoOfDays := SubcontractorNoOfDays2;
      UseEMailForPurchReceipt := UseEMailForPurchReceipt2;
    END;

    PROCEDURE SetUseEMailForPurchReceipt@1100529603(NewUseEMailForPurchReceipt@1100529600 : Boolean);
    BEGIN
      UseEMailForPurchReceipt := NewUseEMailForPurchReceipt;
    END;

    BEGIN
    {
      4PS
      Option values field Usage expanded.

      Due to limitations options added by 4PS are only added as a number.
      In order to keep overview use and maintain the documentation in this table.

      1000 : Project - Complaints
      1001 : Project - termijnmotivering
      1002 : Project - klachten - projectopdrachten
      1003 : Project - termijnstaat
      1004 : Project - Uren lijst per project
      1005 : Project - Project Inventory List
      1006 : Project - Worksheet Project
      1007 : Project - Worksheet Commission
      1008 : Project - Settlement Sheet
      1009 : Project - Budget
      1010 : Project - Adjustment
      1011 : Project - Extension
      1012 : Project - Option
      1013 : Project - Purchase Action
      1014 : Project - Advice Order
      1015 : Project - Progress
      1016 : Project - Prognosis
      1017 : Project - Plot Number
      1018 : Project - Hours Control
      1019 : Project - Hours List
      1020 : Project - Posted Hours List
      1021 : Project - Option Quote
      1022 : Project - Project Installments
      1023 : Project - Project Control
      1024 : Project - Inventory Delivery
      1025 : Project - Tender Paragraph by Principal
      1026 : Project - Result Forecast
      1027 : Project - Delivery Note
      1028 : Project - Posted Delivery Note
      1029 : Project - Collective List
      1030 : Project - Final Installment Details
      1040 : Project - Work Order
      1050 : Project - Project Element
      //1051 : Project - Material Req. Line (only custom reports, there is no standard report) //31954
      1052 : Project - Job Ledger
      1060 : Project - Project Material Req. Line (C062332: duplicate 1051 disabled)

      1200 : Finance - Payment History Overview
      1201 : Finance - Proposal Overview

      1400 : Unit Prices - Productieverantwoording
      1401 : Unit Prices - Prijslijst

      1550 : Plant - Plant Request
      1551 : Plant - Plant Transport Order
      1552 : Plant - Plant Posted Transport Orde
      1553 : Plant - Transport ritlijst
      1554 : Plant - Plant Transport Ride //DP01220
      1555 : Plant - Dispatch Note
      1556 : Plant - Return Dispatch Note
      1557 : Plant - Order Picking List
      1558 : Plant - Exit Order
      1559 : Plant - Invoice Proposal
      1560 : Plant - Rental Correction
      1561 : Plant - Inspection
      1562 : Plant - Rental Free Order
      1563 : Plant - Plant Quote

      2000 : Marketing & Sales - traject
      2001 : Marketing & Sales - relatie
      2002 : Marketing & Sales - voorlopig werk
      1598 : Plant - Inventory (R11012553)
      1599 : Plant - Inventory Course (R11012573)

      2000 : Marketing & Sales - traject
      2001 : Marketing & Sales - relatie
      2002 : Marketing & Sales - voorlopig werk
      2000 : Marketing & Sales - Try-Out
      2001 : Marketing & Sales - Contact
      2002 : Marketing & Sales - Provisional Work
      2003 : Marketing & Sales - Word Document
      2004 : Marketing & Sales - Incoming Document
      2005 : Marketing & Sales - Segment Label
      2006 : Marketing & Sales - Try-Out Quote Version
      2007 : Marketing & Sales - Try-Out Quote

      3000 : Service - Service Order Work Sheet
      3001 : Service - Service Call
      3002 : Service - Service Location
      3003 : Service - Cost Plus Entry
      3004 : Service - Advice Order
      3005 : Service - Installation Line
      3006 : Service - Service Feature
      3007 : Service - Service Order Status Mail
      3016 : Service - Glazing Service Call
      3018 : Service Unit Price Service Order
      3020 : Collective-List
      3021 : Appointment Letter
      3025 : Survey
      3026 : Survey Location
      3027 : Survey Object
      3028 : Service-Contract (Object)
      3029 : Service-Contract Control
      3030 : Service - Subcontractor not Finished
      3031 : Service - Subcontractor Invoice not Received
      3040 : Service - Work Order
      3041 : Service - Object Filter
      3042 : Service - Installment Overview
      3043 : Service - Collect Installment Overview

      3500 : Estimate - Staartblad
      3501 : Estimate - Estimate
      3502 : Estimate - Sub-Estimate
      3503 : Estimate - Estimate-Part
      3504 : Estimate - Estimate Lines
      3505 : Estimate - Estimate RAW
      3506 : Estimate - Bid Form RAW
      3507 : Estimate - Bid Form Cover Page RAW

      4000 : Item - Inventarisatiedagboek
      4001 : Item - Item Journal
      4005 : Item - Inventory Movement
      4010 : Item - Whse. - Shipment
      4011 : Item - Project Dispatch Note
      4012 : Item - Picking List

      5000 : Sales - Pro Forma Invoice
      5001 : Sales - Pro Forma Credit Memo
      5002 : Sales - Invoice Proposal

      6000 : Purchase - Inkoopvoorstel
      6001 : Purchase - Blanket Scheme
      6002 : Purchase - Reminder
      6003 : Purchase - Unposted Receipts
      6004 : Purchase - Quote Thanks Letter
      6005 : Purchase - WKA Data Request
      6006 : Purchase - Inspection Result
      6007 : Purchase - Requisition  //DP01137
      6008 : Purchase - Vendor Assessment (Projects)
      6009 : Purchase - Vendor Assessment (New)

      7000 : Project Engineering - Uitgegeven kabels
      7001 : Project Engineering - Uitgegeven apparatuur
      7002 : Project Engineering - Uitgegeven extra behoeften
      7003 : Project Engineering - Cable Reels
      7003 : Project Engineering - Identification Plate

      8000 : Site Manager Form - Site Manager Report
      8001 : Site Manager Form - Get Order
      8002 : Site Manager Form - Plant Request, R11125529

      8020 : Hour Accounting Site Manager - Site Mgt. Hour Accounting by Project
      8021 : Hour Accounting Site Manager - Site Mgt. Hour Accounting by Employee
      8022 : Hour Accounting Site Manager - Site Mgt. Hour Accounting by Externals by Company

      8100 : QA Deviation Report
      8120 : QA Accident Report

      8200 : Worksheet Work Order (Request), R11124903
      8230 : Human Resources and Hours - Denied Hour Lines
      8231 : Human Resources and Hours - Changed Hour Consent Lines

      9000 : Shipment Order
      9001 : Posted Shipment Order

      dbeekman, 6/1/2009:
        Field <Default Selection> added. This field marks a report to be selected by default when the report selection window
        appears. In the selection window it can be checked and unchecked.
      SESB.I035.I036 FD Message when dissaproving-correcting hours
         VKO 12.07.2013 Field 1 Usage changed - new options added ("Den. Hour Lines","Chang. Hour Cons. Lines")
      170830 ITERO.DL bioPDF on server
    }
    END.
  }
}

