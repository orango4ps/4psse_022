OBJECT Table 65 Merge Duplicates Line Buffer
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    ReplicateData=No;
    CaptionML=[ENU=Merge Duplicates Line Buffer;
               NOR=Linjebuffer for sammensl†ing av duplikater];
  }
  FIELDS
  {
    { 1   ;   ;Type                ;Option        ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Type;
                                                              NOR=Type;
                                                              SVE=Typ];
                                                   OptionCaptionML=[ENU=,Field,Table;
                                                                    NOR=,Felt,Tabell];
                                                   OptionString=,Field,Table }
    { 2   ;   ;ID                  ;Integer       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=ID;
                                                              NOR=ID;
                                                              SVE=ID] }
    { 3   ;   ;Name                ;Text30        ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Name;
                                                              NOR=Navn;
                                                              SVE=Namn] }
    { 4   ;   ;Duplicate Value     ;Text2048      ;OnValidate=BEGIN
                                                                "Duplicate Value" := COPYSTR("Duplicate Value",1,GetMaxFieldLen);
                                                                ValidateDuplicateValue;
                                                                Modified := "Duplicate Value" <> "Current Value";
                                                              END;

                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Duplicate Value;
                                                              NOR=Duplikatverdi] }
    { 5   ;   ;Current Value       ;Text2048      ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Current Value;
                                                              NOR=Gjeldende verdi] }
    { 6   ;   ;Override            ;Boolean       ;OnValidate=BEGIN
                                                                IF Type = Type::Field THEN
                                                                  TESTFIELD("In Primary Key","In Primary Key"::No);
                                                              END;

                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Override;
                                                              NOR=Overstyr] }
    { 7   ;   ;Duplicate Count     ;Integer       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Duplicate Count;
                                                              NOR=Duplikatantall] }
    { 8   ;   ;Current Count       ;Integer       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Current Count;
                                                              NOR=Gjeldende antall] }
    { 9   ;   ;Table ID            ;Integer       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Table ID;
                                                              NOR=Tabell-ID;
                                                              SVE=Tabell-ID] }
    { 10  ;   ;Table Name          ;Text30        ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Table Name;
                                                              NOR=Tabellnavn;
                                                              SVE=Tabellnamn] }
    { 11  ;   ;In Primary Key      ;Option        ;InitValue=No;
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=In Primary Key;
                                                              NOR=I prim‘rn›kkel];
                                                   OptionCaptionML=[ENU=Yes,No;
                                                                    NOR=Ja,Nei];
                                                   OptionString=Yes,No }
    { 12  ;   ;Conflicts           ;Integer       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Conflicts;
                                                              NOR=Konflikter] }
    { 13  ;   ;Modified            ;Boolean       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Modified;
                                                              NOR=Endret;
                                                              SVE=Žndrad] }
    { 14  ;   ;Data Type           ;Text30        ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Data Type;
                                                              NOR=Datatype;
                                                              SVE=Datatyp];
                                                   Editable=No }
    { 15  ;   ;Can Be Renamed      ;Boolean       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Can Be Renamed;
                                                              NOR=Kan gis nytt navn] }
  }
  KEYS
  {
    {    ;Type,Table ID,ID                        ;Clustered=Yes }
    {    ;In Primary Key                           }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    [External]
    PROCEDURE AddFieldData@1(RecordRef@1001 : ARRAY [2] OF RecordRef;ConflictFieldID@1005 : Integer;Index@1000 : Integer;FoundDuplicateRecord@1002 : Boolean;VAR TempPKInt@1004 : Record 2000000026);
    VAR
      FieldRef@1003 : FieldRef;
    BEGIN
      INIT;
      Type := Type::Field;
      "Table ID" := RecordRef[1].NUMBER;
      FieldRef := RecordRef[1].FIELDINDEX(Index);
      ID := FieldRef.NUMBER;
      "Data Type" := COPYSTR(FORMAT(FieldRef.TYPE),1,MAXSTRLEN("Data Type"));
      IF TempPKInt.GET(ID) THEN
        "In Primary Key" := "In Primary Key"::Yes;
      Name := COPYSTR(FieldRef.CAPTION,1,MAXSTRLEN(Name));
      "Current Value" :=
        COPYSTR(DELCHR(FORMAT(FieldRef.VALUE),'<>',' '),1,MAXSTRLEN("Current Value"));
      IF FoundDuplicateRecord THEN BEGIN
        FieldRef := RecordRef[2].FIELDINDEX(Index);
        "Duplicate Value" :=
          COPYSTR(DELCHR(FORMAT(FieldRef.VALUE),'<>',' '),1,MAXSTRLEN("Duplicate Value"));
      END;
      IF ("Duplicate Value" <> "Current Value") OR ("In Primary Key" = "In Primary Key"::Yes) THEN BEGIN
        IF ConflictFieldID <> 0 THEN
          "Can Be Renamed" :=
            ("In Primary Key" = "In Primary Key"::Yes) AND ("Duplicate Value" = "Current Value") AND
            ("Data Type" IN ['Text','Code']) AND (ConflictFieldID <> ID);
        INSERT;
      END;
    END;

    [External]
    PROCEDURE AddTableData@2(MergeDuplicatesBuffer@1002 : Record 64;TableNo@1000 : Integer;FieldNo@1001 : Integer);
    VAR
      RecordRef@1003 : RecordRef;
    BEGIN
      INIT;
      Type := Type::Table;
      "Table ID" := TableNo;
      ID := FieldNo;
      RecordRef.OPEN("Table ID");
      "In Primary Key" := IsInPrimaryKey(RecordRef,FieldNo);
      CountRecords(MergeDuplicatesBuffer,RecordRef);
      RecordRef.CLOSE;
      IF "Duplicate Count" <> 0 THEN
        INSERT;
    END;

    LOCAL PROCEDURE CountRecords@13(MergeDuplicatesBuffer@1000 : Record 64;RecordRef@1001 : RecordRef);
    VAR
      TableRelationsMetadata@1003 : Record 2000000141;
      FieldRef@1005 : FieldRef;
    BEGIN
      "Table Name" := COPYSTR(RecordRef.CAPTION,1,MAXSTRLEN("Table Name"));
      IF FindConditionalRelation(MergeDuplicatesBuffer."Table ID",TableRelationsMetadata) THEN BEGIN
        FieldRef := RecordRef.FIELD(TableRelationsMetadata."Condition Field No.");
        FieldRef.SETFILTER(TableRelationsMetadata."Condition Value");
      END;
      FieldRef := RecordRef.FIELD(ID);
      Name := COPYSTR(FieldRef.CAPTION,1,MAXSTRLEN(Name));
      FieldRef.SETRANGE(MergeDuplicatesBuffer.Duplicate);
      "Duplicate Count" := RecordRef.COUNT;
      FieldRef.SETRANGE(MergeDuplicatesBuffer.Current);
      "Current Count" := RecordRef.COUNT;
    END;

    LOCAL PROCEDURE FindConditionalRelation@9(RelatedTableID@1001 : Integer;VAR TableRelationsMetadata@1000 : Record 2000000141) : Boolean;
    BEGIN
      TableRelationsMetadata.RESET;
      TableRelationsMetadata.SETRANGE("Table ID","Table ID");
      TableRelationsMetadata.SETRANGE("Field No.",ID);
      TableRelationsMetadata.SETRANGE("Related Table ID",RelatedTableID);
      EXIT(TableRelationsMetadata.FINDFIRST);
    END;

    PROCEDURE FindConflicts@5(OldKey@1002 : Text;NewKey@1003 : Text;VAR TempMergeDuplicatesConflict@1000 : TEMPORARY Record 66) : Integer;
    VAR
      RecordRef@1001 : RecordRef;
      NewRecordRef@1004 : RecordRef;
      FieldRef@1006 : FieldRef;
      NewFieldRef@1005 : FieldRef;
    BEGIN
      TempMergeDuplicatesConflict.RESET;
      TempMergeDuplicatesConflict.SETRANGE("Table ID","Table ID");
      TempMergeDuplicatesConflict.DELETEALL;

      RecordRef.OPEN("Table ID");
      FieldRef := RecordRef.FIELD(ID);
      FieldRef.SETRANGE(OldKey);
      IF RecordRef.FINDSET THEN
        REPEAT
          NewRecordRef.GET(RecordRef.RECORDID);
          NewFieldRef := NewRecordRef.FIELD(ID);
          NewFieldRef.VALUE(NewKey);
          IF NewRecordRef.FIND THEN BEGIN
            TempMergeDuplicatesConflict.INIT;
            TempMergeDuplicatesConflict.VALIDATE("Table ID","Table ID");
            TempMergeDuplicatesConflict.Duplicate := RecordRef.RECORDID;
            TempMergeDuplicatesConflict.Current := NewRecordRef.RECORDID;
            TempMergeDuplicatesConflict."Field ID" := ID;
            TempMergeDuplicatesConflict.INSERT;
          END;
        UNTIL RecordRef.NEXT = 0;
      RecordRef.CLOSE;

      Conflicts := TempMergeDuplicatesConflict.COUNT;
      TempMergeDuplicatesConflict.RESET;
      EXIT(Conflicts);
    END;

    [External]
    PROCEDURE GetPrimaryKeyFields@4(RecRef@1001 : RecordRef;VAR TempPKInt@1000 : TEMPORARY Record 2000000026) : Integer;
    VAR
      FieldRef@1003 : FieldRef;
      KeyRef@1002 : KeyRef;
      KeyFieldIndex@1004 : Integer;
    BEGIN
      TempPKInt.RESET;
      TempPKInt.DELETEALL;
      KeyRef := RecRef.KEYINDEX(1);
      FOR KeyFieldIndex := 1 TO KeyRef.FIELDCOUNT DO BEGIN
        FieldRef := KeyRef.FIELDINDEX(KeyFieldIndex);
        TempPKInt.Number := FieldRef.NUMBER;
        TempPKInt.INSERT;
      END;
      EXIT(TempPKInt.COUNT);
    END;

    LOCAL PROCEDURE IsInPrimaryKey@3(RecordRef@1002 : RecordRef;FieldNo@1000 : Integer) : Integer;
    VAR
      TempPKInt@1001 : TEMPORARY Record 2000000026;
    BEGIN
      GetPrimaryKeyFields(RecordRef,TempPKInt);
      IF TempPKInt.GET(FieldNo) THEN
        EXIT("In Primary Key"::Yes);
      EXIT("In Primary Key"::No);
    END;

    PROCEDURE HasFieldToOverride@6() Result : Boolean;
    VAR
      TempMergeDuplicatesLineBuffer@1000 : TEMPORARY Record 65;
    BEGIN
      TempMergeDuplicatesLineBuffer.COPY(Rec,TRUE);
      TempMergeDuplicatesLineBuffer.SETRANGE(Type,Type::Field);
      TempMergeDuplicatesLineBuffer.SETRANGE(Override,TRUE);
      Result := NOT TempMergeDuplicatesLineBuffer.ISEMPTY;
    END;

    PROCEDURE HasModifiedField@7() Result : Boolean;
    VAR
      TempMergeDuplicatesLineBuffer@1000 : TEMPORARY Record 65;
    BEGIN
      TempMergeDuplicatesLineBuffer.COPY(Rec,TRUE);
      TempMergeDuplicatesLineBuffer.SETRANGE(Type,Type::Field);
      TempMergeDuplicatesLineBuffer.SETRANGE(Modified,TRUE);
      Result := NOT TempMergeDuplicatesLineBuffer.ISEMPTY;
    END;

    LOCAL PROCEDURE GetMaxFieldLen@8() : Integer;
    VAR
      Field@1000 : Record 2000000041;
    BEGIN
      Field.GET("Table ID",ID);
      EXIT(Field.Len);
    END;

    LOCAL PROCEDURE ValidateDuplicateValue@11();
    VAR
      TempMergeDuplicatesLineBuffer@1000 : TEMPORARY Record 65;
      RecRef@1001 : RecordRef;
      FieldRef@1002 : FieldRef;
    BEGIN
      TempMergeDuplicatesLineBuffer.COPY(xRec,TRUE);
      RecRef.OPEN("Table ID");
      TempMergeDuplicatesLineBuffer.RESET;
      IF TempMergeDuplicatesLineBuffer.FINDSET THEN
        REPEAT
          FieldRef := RecRef.FIELD(TempMergeDuplicatesLineBuffer.ID);
          FieldRef.SETFILTER(TempMergeDuplicatesLineBuffer."Duplicate Value");
        UNTIL TempMergeDuplicatesLineBuffer.NEXT = 0;
      IF RecRef.FINDFIRST THEN BEGIN
        FieldRef := RecRef.FIELD(ID);
        FieldRef.VALIDATE("Duplicate Value");
        "Duplicate Value" := FORMAT(FieldRef.VALUE);
      END;
      RecRef.CLOSE;
    END;

    BEGIN
    END.
  }
}

