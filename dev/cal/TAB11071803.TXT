OBJECT Table 11071803 Service Survey
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=VAR
               ServiceSetup@1100528600 : Record 11012800;
               NoSeriesManagement@1100528601 : Codeunit 396;
               EstimateStatus@1100525000 : Record 11020456;
             BEGIN
               ServiceSetup.GET;

               IF "Reference Date" = 0D THEN
                 "Reference Date" := TODAY;
               IF "No." = '' THEN BEGIN
                 ServiceSetup.TESTFIELD("Survey Nos.");
                 NoSeriesManagement.InitSeries(ServiceSetup."Survey Nos.", xRec."No. Series", 0D, "No.", "No. Series");
               END;

               UpdateSurchargesFromStd;
               UpdateSalesSurchargesFromStd;
               CopySummarySheets;

               EstimateStatus.SETRANGE("Default for Service Survey", TRUE);
               IF EstimateStatus.FINDFIRST THEN
                 Status := EstimateStatus.Code;

               DPA_OnInsert;
             END;

    OnDelete=VAR
               ServiceSurveyLocation@1100528600 : Record 11071804;
               ServiceSurveySurcharge@1100528601 : Record 11071808;
               ServSurvSummarySheet@1100528603 : Record 11072241;
               CommentLine@1100528602 : Record 97;
             BEGIN
               ServiceSurveyLocation.SETRANGE("Survey No.", "No.");
               ServiceSurveyLocation.DELETEALL(TRUE);

               ServiceSurveySurcharge.SETRANGE("Survey No.", "No.");
               ServiceSurveySurcharge.DELETEALL(TRUE);

               CommentLine.SETRANGE("Table Name", CommentLine."Table Name"::"Service Survey");
               CommentLine.SETRANGE("No.", "No.");
               CommentLine.DELETEALL(TRUE);

               ServSurvSummarySheet.SETRANGE("Survey No.", "No.");
               ServSurvSummarySheet.DELETEALL(TRUE);
             END;

    CaptionML=[ENU=Service Survey;
               NOR=Servicekartlegging;
               SVE=Servicekartl„ggning];
    LookupPageID=Page11126108;
    DrillDownPageID=Page11126108;
  }
  FIELDS
  {
    { 10  ;   ;No.                 ;Code20        ;OnValidate=VAR
                                                                ServiceSetup@1100528601 : Record 11012800;
                                                                NoSeriesManagement@1100528600 : Codeunit 396;
                                                              BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  ServiceSetup.GET;
                                                                  NoSeriesManagement.TestManual(ServiceSetup."Survey Nos.");
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=No.;
                                                              NOR=Nr;
                                                              SVE=Nr] }
    { 20  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 25  ;   ;Description 2       ;Text50        ;CaptionML=[ENU=Description 2;
                                                              NOR=Beskrivelse 2;
                                                              SVE=Beskrivning 2] }
    { 30  ;   ;Service Package     ;Code10        ;TableRelation="Service Package" WHERE (Select for Maint. Sales Rate=CONST(Yes));
                                                   CaptionML=[ENU=Service Package;
                                                              NOR=Servicepakke;
                                                              SVE=Servicepaket] }
    { 40  ;   ;Input Method        ;Option        ;OnValidate=VAR
                                                                ServSurveyLocStructure@1100528600 : Record 11071805;
                                                              BEGIN
                                                                IF "Input Method" = "Input Method"::Object THEN BEGIN
                                                                  ServSurveyLocStructure.SETRANGE("Survey No.", "No.");
                                                                  ServSurveyLocStructure.SETRANGE("Base Structure", TRUE);
                                                                  IF NOT ServSurveyLocStructure.ISEMPTY THEN
                                                                    ERROR(Text000);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Input Method;
                                                              NOR=Innmatingsmetode;
                                                              SVE=Inmatningsmetod];
                                                   OptionCaptionML=[ENU=Object,Structure;
                                                                    NOR=Objekt,Struktur;
                                                                    SVE=Objekt,Struktur];
                                                   OptionString=Object,Structure }
    { 50  ;   ;Reference Date      ;Date          ;OnValidate=BEGIN
                                                                IF MODIFY THEN
                                                                  UpdatePricesAndRates;
                                                                CalcTotals;
                                                              END;

                                                   CaptionML=[ENU=Reference Date;
                                                              NOR=Referansedato;
                                                              SVE=Referensdatum] }
    { 60  ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              NOR=Nr-serie;
                                                              SVE=Nr-serier];
                                                   Editable=No }
    { 70  ;   ;Customer No.        ;Code20        ;TableRelation=Customer;
                                                   OnValidate=VAR
                                                                ContactBusinessRelation@1100528600 : Record 5054;
                                                                Contact@1100528601 : Record 5050;
                                                              BEGIN
                                                                ContactBusinessRelation.SETCURRENTKEY("Link to Table", "No.");
                                                                ContactBusinessRelation.SETRANGE("Link to Table", ContactBusinessRelation."Link to Table"::Customer);
                                                                ContactBusinessRelation.SETRANGE("No.", "Customer No.");
                                                                IF ContactBusinessRelation.FINDFIRST THEN
                                                                  IF Contact.GET(ContactBusinessRelation."Contact No.") THEN BEGIN
                                                                    Contact.TESTFIELD(Blocked, FALSE);
                                                                    "Contact No. (Company)" := ContactBusinessRelation."Contact No.";
                                                                  END;

                                                                UpdateSalesSurchargesFromStd;
                                                                CalcTotals;
                                                              END;

                                                   CaptionML=[ENU=Customer No.;
                                                              NOR=Kundenr.;
                                                              SVE=Kundnr] }
    { 80  ;   ;Customer Name       ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer.Name WHERE (No.=FIELD(Customer No.)));
                                                   CaptionML=[ENU=Customer Name;
                                                              NOR=Kundnavn;
                                                              SVE=Kundens namn];
                                                   Editable=No }
    { 90  ;   ;Total Cost          ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Serv. Surv. Location Object"."Cost Amount" WHERE (Survey No.=FIELD(No.),
                                                                                                                      Include in Contract=FILTER(<>' ')));
                                                   CaptionML=[ENU=Total Cost;
                                                              NOR=Total kost;
                                                              SVE=Total kostnad];
                                                   Editable=No }
    { 91  ;   ;Total Cost (Material);Decimal      ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Serv. Surv. Location Object"."Total Cost (Material)" WHERE (Survey No.=FIELD(No.),
                                                                                                                                Include in Contract=FILTER(<>' ')));
                                                   CaptionML=ENU=Total Cost (Material);
                                                   Editable=No }
    { 92  ;   ;Total Cost (Labor)  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Serv. Surv. Location Object"."Total Cost (Labor)" WHERE (Survey No.=FIELD(No.),
                                                                                                                             Include in Contract=FILTER(<>' ')));
                                                   CaptionML=ENU=Total Cost (Labor);
                                                   Editable=No }
    { 93  ;   ;Total Cost (Subcontr.);Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Serv. Surv. Location Object"."Total Cost (Subcontr.)" WHERE (Survey No.=FIELD(No.),
                                                                                                                                 Include in Contract=FILTER(<>' ')));
                                                   CaptionML=ENU=Total Cost (Subcontracting);
                                                   Editable=No }
    { 94  ;   ;Total Cost (Plant)  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Serv. Surv. Location Object"."Total Cost (Plant)" WHERE (Survey No.=FIELD(No.),
                                                                                                                             Include in Contract=FILTER(<>' ')));
                                                   CaptionML=ENU=Total Cost (Plant);
                                                   Editable=No }
    { 95  ;   ;Total Cost (Sundry) ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Serv. Surv. Location Object"."Total Cost (Sundry)" WHERE (Survey No.=FIELD(No.),
                                                                                                                              Include in Contract=FILTER(<>' ')));
                                                   CaptionML=ENU=Total Cost (Sundry);
                                                   Editable=No }
    { 96  ;   ;Total Surcharge     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Serv. Surv. Location Object"."Total Surcharge Amount" WHERE (Survey No.=FIELD(No.),
                                                                                                                                 Include in Contract=FILTER(<>' ')));
                                                   CaptionML=[ENU=Total Surcharge;
                                                              NOR=Total tilleggsavgift;
                                                              SVE=Till„ggsavgifter totalt];
                                                   Editable=No }
    { 97  ;   ;Total Sales Surcharge;Decimal      ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Serv. Surv. Location Object"."Total Sales Surch. Amount" WHERE (Survey No.=FIELD(No.),
                                                                                                                                    Include in Contract=FILTER(<>' ')));
                                                   CaptionML=[ENU=Total Sales Surcharge;
                                                              NOR=Totalt salgstilleggsavgift;
                                                              SVE=Totalt f”rs„ljningstill„gg];
                                                   Editable=No }
    { 100 ;   ;Total Net Cost      ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Serv. Surv. Location Object"."Total Cost" WHERE (Survey No.=FIELD(No.),
                                                                                                                     Include in Contract=FILTER(<>' ')));
                                                   CaptionML=ENU=Total Net Cost;
                                                   Editable=No }
    { 110 ;   ;Total Calculated Sales Amount;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Serv. Surv. Location Object"."Calculated Sales Amount" WHERE (Survey No.=FIELD(No.),
                                                                                                                                  Include in Contract=FILTER(<>' ')));
                                                   CaptionML=ENU=Total Calculated Sales Amount;
                                                   Editable=No }
    { 115 ;   ;Total Sales Amount  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Serv. Surv. Location Object"."Sales Amount" WHERE (Survey No.=FIELD(No.),
                                                                                                                       Include in Contract=FILTER(<>' ')));
                                                   CaptionML=[ENU=Total Sales Amount;
                                                              NOR=Totalt salgsbel›p;
                                                              SVE=Totalt f”rs„ljningsbelopp];
                                                   Editable=No }
    { 120 ;   ;Total Service Amount;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Serv. Surv. Location Object"."Service Amount" WHERE (Survey No.=FIELD(No.),
                                                                                                                         Include in Contract=FILTER(<>' ')));
                                                   CaptionML=[ENU=Total Service Amount;
                                                              NOR=Totalt servicebel›p;
                                                              SVE=Totalt servicebelopp];
                                                   Editable=No }
    { 125 ;   ;Total Hours         ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Serv. Surv. Location Object"."Total Hours" WHERE (Survey No.=FIELD(No.),
                                                                                                                      Include in Contract=FILTER(<>' ')));
                                                   CaptionML=[ENU=Total Hours;
                                                              NOR=Timer totalt;
                                                              SVE=Timmar totalt];
                                                   Editable=No }
    { 130 ;   ;Contract Template Code;Code10      ;TableRelation="Service-Contract Template";
                                                   OnValidate=VAR
                                                                ServiceContractTemplate@1100528400 : Record 11071754;
                                                              BEGIN
                                                                IF ServiceContractTemplate.GET("Contract Template Code") THEN BEGIN
                                                                  VALIDATE("Invoice Type", ServiceContractTemplate."Invoice Type");
                                                                  VALIDATE("Service Type", ServiceContractTemplate."Service Type");
                                                                  VALIDATE("Global Dimension 1 Code", ServiceContractTemplate."Global Dimension 1 Code");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Contract Template Code;
                                                              NOR=Kontraktmal, Kode;
                                                              SVE=Kontraktsmallskod] }
    { 150 ;   ;Invoice Type        ;Option        ;OnValidate=BEGIN
                                                                IF xRec."Invoice Type" <> "Invoice Type" THEN
                                                                  IF "Invoice Type" = "Invoice Type"::Dynamic THEN BEGIN
                                                                    "Installment Description" := '';
                                                                    CLEAR("Installment Invoice Interval");
                                                                  END;
                                                              END;

                                                   CaptionML=[ENU=Invoice Type;
                                                              NOR=Fakturatype;
                                                              SVE=Fakturatyp];
                                                   OptionCaptionML=[ENU=Dynamic,Installments;
                                                                    NOR=Dynamisk,Avdrag;
                                                                    SVE=Dynamisk,Betalplaner];
                                                   OptionString=Dynamic,Installments }
    { 170 ;   ;Starting Date       ;Date          ;CaptionML=[ENU=Starting Date;
                                                              NOR=Startdato;
                                                              SVE=Startdatum] }
    { 180 ;   ;Sales Price Based On;Option        ;OnValidate=BEGIN
                                                                //TESTFIELD("Summary Sheet (Cost)", '');
                                                                //TESTFIELD("Summary Sheet (Sales)", '');
                                                                CalcTotals;
                                                              END;

                                                   CaptionML=[ENU=Sales Price Based On;
                                                              NOR=Salgspris basert p†;
                                                              SVE=F”rs„ljningspris baserat p†];
                                                   OptionCaptionML=[ENU=Service Rate,Cost Price + Sales Surcharge;
                                                                    NOR=Servicesats,Kostpris + servicetilleggsavgift;
                                                                    SVE=Serviceavgift,Kostnadspris + F”rs„ljningsavgift];
                                                   OptionString=Service Rate,Cost Price + Sales Surcharge }
    { 190 ;   ;Contact No. (Company);Code20       ;TableRelation=Contact;
                                                   OnValidate=VAR
                                                                ContactBusinessRelation@1100528601 : Record 5054;
                                                                Contact@1100528600 : Record 5050;
                                                              BEGIN
                                                                IF "Contact No. (Company)" <> xRec."Contact No. (Company)" THEN
                                                                  "Contact No. (Person)" := '';

                                                                IF "Contact No. (Company)" <> '' THEN BEGIN
                                                                  Contact.GET("Contact No. (Company)");
                                                                  Contact.TESTFIELD(Blocked, FALSE);
                                                                  IF (Contact.Type = Contact.Type::Person) AND
                                                                     (Contact."Company No." <> '') THEN
                                                                    ERROR(Text001);

                                                                  ContactBusinessRelation.RESET;
                                                                  ContactBusinessRelation.SETCURRENTKEY("Contact No.", "Business Relation Code");
                                                                  ContactBusinessRelation.SETRANGE("Contact No.", "Contact No. (Company)");
                                                                  ContactBusinessRelation.SETRANGE("Link to Table", ContactBusinessRelation."Link to Table"::Customer);
                                                                  IF ContactBusinessRelation.FINDFIRST THEN
                                                                    VALIDATE("Customer No.", ContactBusinessRelation."No.")
                                                                  ELSE
                                                                    VALIDATE("Customer No.", '');
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Contact No. (Company);
                                                              NOR=Kontaktnr (Selskap);
                                                              SVE=Kontaktnr (f”retag)] }
    { 200 ;   ;Contact Name (Company);Text100     ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact.Name WHERE (No.=FIELD("Contact No. (Company)")));
                                                   CaptionML=[ENU=Contact Name (Company);
                                                              NOR=Kontaktnavn (Selskap);
                                                              SVE=Kontaktnamn (f”retag)];
                                                   Editable=No }
    { 210 ;   ;Contact No. (Person);Code20        ;TableRelation=Contact WHERE (Company No.=FIELD("Contact No. (Company)"),
                                                                                Type=CONST(Person),
                                                                                Blocked=CONST(No));
                                                   CaptionML=[ENU=Contact Person;
                                                              NOR=Kontaktperson;
                                                              SVE=Kontaktperson] }
    { 220 ;   ;Contact Name (Person);Text100      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact.Name WHERE (No.=FIELD("Contact No. (Person)")));
                                                   CaptionML=[ENU=Name Contact Person;
                                                              NOR=Navn p† kontaktperson;
                                                              SVE=Kontaktpersonens namn];
                                                   Editable=No }
    { 230 ;   ;Service Type        ;Code20        ;TableRelation="Service Type";
                                                   OnValidate=VAR
                                                                ServiceType@1100409000 : Record 11012814;
                                                              BEGIN
                                                                IF "Service Type" <> xRec."Service Type" THEN BEGIN
                                                                  UpdateSurchargesFromStd;
                                                                  CalcTotals;

                                                                  IF ServiceType.GET("Service Type") THEN
                                                                    IF ServiceType."Department Code" <> '' THEN
                                                                      VALIDATE("Global Dimension 1 Code", ServiceType."Department Code");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Service Type;
                                                              NOR=Servicetype;
                                                              SVE=Servicetyp] }
    { 240 ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1, "Global Dimension 1 Code");

                                                                UpdateSurchargesFromStd;
                                                                UpdateSalesSurchargesFromStd;
                                                              END;

                                                   CaptionML=[ENU=Global Dimension 1 Code;
                                                              NOR=Global dimensjon 1 kode;
                                                              SVE=Global dimension 1 kod];
                                                   CaptionClass='1,1,1' }
    { 250 ;   ;Offered Amount      ;Decimal       ;CaptionML=[ENU=Offered Amount;
                                                              NOR=Tilbudt bel›p;
                                                              SVE=Anbudsbelopp] }
    { 260 ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Comment Line" WHERE (Table Name=CONST(Service Survey),
                                                                                           No.=FIELD(No.)));
                                                   CaptionML=[ENU=Comment;
                                                              NOR=Merknad;
                                                              SVE=Kommentar];
                                                   Editable=No }
    { 270 ;   ;Installment Description;Text50     ;OnValidate=BEGIN
                                                                IF "Installment Description" <> '' THEN
                                                                  TESTFIELD("Invoice Type", "Invoice Type"::Installments);
                                                              END;

                                                   CaptionML=[ENU=Installment Description;
                                                              NOR=Betalingsplan, Beskrivelse;
                                                              SVE=Betalplan, beskrivning] }
    { 280 ;   ;Installment Invoice Interval;DateFormula;
                                                   OnValidate=BEGIN
                                                                IF FORMAT("Installment Invoice Interval") <> '' THEN BEGIN
                                                                  TESTFIELD("Invoice Type", "Invoice Type"::Installments);
                                                                  IF CALCDATE("Installment Invoice Interval", TODAY) <= TODAY THEN
                                                                    FIELDERROR("Installment Invoice Interval");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Installment Invoice Interval }
    { 290 ;   ;Summary Sheet (Sales);Code10       ;TableRelation="Serv. Surv. Summary Sheet".Code WHERE (Summary Kind=CONST(Survey),
                                                                                                         Survey No.=FIELD(No.),
                                                                                                         Summary Type=CONST(Sales));
                                                   OnValidate=BEGIN
                                                                IF "Summary Sheet (Sales)" <> '' THEN
                                                                  TESTFIELD("Sales Price Based On", "Sales Price Based On"::"Cost Price + Sales Surcharge");
                                                                IF xRec."Summary Sheet (Sales)" <> "Summary Sheet (Sales)" THEN
                                                                  VALIDATE("Summary Sheet Seq. No. (Sales)", 0);
                                                              END;

                                                   CaptionML=[ENU=Summary Sheet (Sales);
                                                              SVE=SumSheetSales] }
    { 300 ;   ;Summary Sheet Seq. No. (Sales);Integer;
                                                   TableRelation="Serv. Surv. Summary Sheet"."Seq. No." WHERE (Summary Kind=CONST(Survey),
                                                                                                               Survey No.=FIELD(No.),
                                                                                                               Code=FIELD("Summary Sheet (Sales)"),
                                                                                                               Summary Type=CONST(Sales));
                                                   OnValidate=BEGIN
                                                                SetRecalculateforSurcharge(FALSE);
                                                              END;

                                                   CaptionML=ENU=Summary Sheet Seq. No. (Sales);
                                                   BlankZero=Yes }
    { 302 ;   ;Summary Sheet (Cost);Code10        ;TableRelation="Serv. Surv. Summary Sheet".Code WHERE (Summary Kind=CONST(Survey),
                                                                                                         Survey No.=FIELD(No.),
                                                                                                         Summary Type=CONST(Cost));
                                                   OnValidate=BEGIN
                                                                IF xRec."Summary Sheet (Cost)" <> "Summary Sheet (Cost)" THEN
                                                                  VALIDATE("Summary Sheet Seq. No. (Cost)", 0);
                                                              END;

                                                   CaptionML=[ENU=Summary Sheet (Cost);
                                                              SVE=SumSheetCost] }
    { 305 ;   ;Summary Sheet Seq. No. (Cost);Integer;
                                                   TableRelation="Serv. Surv. Summary Sheet"."Seq. No." WHERE (Summary Kind=CONST(Survey),
                                                                                                               Survey No.=FIELD(No.),
                                                                                                               Code=FIELD("Summary Sheet (Cost)"),
                                                                                                               Summary Type=CONST(Cost));
                                                   OnValidate=BEGIN
                                                                SetRecalculateforSurcharge(FALSE);
                                                              END;

                                                   CaptionML=ENU=Summary Sheet Seq. No. (Cost);
                                                   BlankZero=Yes }
    { 310 ;   ;Total Surcharge (Material);Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Serv. Surv. Location Object"."Total Surch. Amount (Material)" WHERE (Survey No.=FIELD(No.),
                                                                                                                                         Include in Contract=FILTER(<>' ')));
                                                   CaptionML=ENU=Total Surcharge (Material);
                                                   Editable=No }
    { 320 ;   ;Total Surcharge (Labor);Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Serv. Surv. Location Object"."Total Surch. Amount (Labor)" WHERE (Survey No.=FIELD(No.),
                                                                                                                                      Include in Contract=FILTER(<>' ')));
                                                   CaptionML=ENU=Total Surcharge (Labor);
                                                   Editable=No }
    { 330 ;   ;Total Surcharge (Subcontr.);Decimal;FieldClass=FlowField;
                                                   CalcFormula=Sum("Serv. Surv. Location Object"."Total Surch. Amount (Subc.)" WHERE (Survey No.=FIELD(No.),
                                                                                                                                      Include in Contract=FILTER(<>' ')));
                                                   CaptionML=ENU=Total Surcharge (Subcontracting);
                                                   Editable=No }
    { 340 ;   ;Total Surcharge (Plant);Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Serv. Surv. Location Object"."Total Surch. Amount (Plant)" WHERE (Survey No.=FIELD(No.),
                                                                                                                                      Include in Contract=FILTER(<>' ')));
                                                   CaptionML=ENU=Total Surcharge (Plant);
                                                   Editable=No }
    { 350 ;   ;Total Surcharge (Sundry);Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Serv. Surv. Location Object"."Total Surch. Amount (Sundry)" WHERE (Survey No.=FIELD(No.),
                                                                                                                                       Include in Contract=FILTER(<>' ')));
                                                   CaptionML=ENU=Total Surcharge (Sundry);
                                                   Editable=No }
    { 360 ;   ;Total Sales Surcharge (Mat.);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Serv. Surv. Location Object"."Total Sales Surch. Amt. (Mat.)" WHERE (Survey No.=FIELD(No.),
                                                                                                                                         Include in Contract=FILTER(<>' ')));
                                                   CaptionML=ENU=Total Sales Surcharge (Material);
                                                   Editable=No }
    { 370 ;   ;Total Sales Surcharge (Labor);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Serv. Surv. Location Object"."Total Sales Surch. Amt. (Lab.)" WHERE (Survey No.=FIELD(No.),
                                                                                                                                         Include in Contract=FILTER(<>' ')));
                                                   CaptionML=ENU=Total Sales Surcharge (Labor);
                                                   Editable=No }
    { 380 ;   ;Total Sales Surcharge (Subc.);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Serv. Surv. Location Object"."Total Sales Surch. Amt. (Sub.)" WHERE (Survey No.=FIELD(No.),
                                                                                                                                         Include in Contract=FILTER(<>' ')));
                                                   CaptionML=ENU=Total Sales Surcharge (Subcontracting);
                                                   Editable=No }
    { 390 ;   ;Total Sales Surcharge (Plant);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Serv. Surv. Location Object"."Total Sales Surch. Amt. (Plt.)" WHERE (Survey No.=FIELD(No.),
                                                                                                                                         Include in Contract=FILTER(<>' ')));
                                                   CaptionML=ENU=Total Sales Surcharge (Plant);
                                                   Editable=No }
    { 400 ;   ;Total Sales Surcharge (Sundry);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Serv. Surv. Location Object"."Total Sales Surch. Amt. (Sun.)" WHERE (Survey No.=FIELD(No.),
                                                                                                                                         Include in Contract=FILTER(<>' ')));
                                                   CaptionML=ENU=Total Sales Surcharge (Sundry);
                                                   Editable=No }
    { 500 ;   ;Register Date       ;Date          ;CaptionML=[ENU=Register Date;
                                                              NOR=Registrer Dato;
                                                              SVE=Registrera datum];
                                                   Description=DP00978 }
    { 510 ;   ;Estimator           ;Code20        ;TableRelation=Employee.No.;
                                                   CaptionML=[ENU=Estimator;
                                                              NOR=Kalkylat›r;
                                                              SVE=Kalkylator];
                                                   Description=DP00978 }
    { 511 ;   ;Name Estimator      ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Full Name" WHERE (No.=FIELD(Estimator)));
                                                   CaptionML=[ENU=Name Estimator;
                                                              NOR=Navn p† Kalkyleansvarlig;
                                                              SVE=Namn p† kalkylansvarig];
                                                   Description=DP00978;
                                                   Editable=No }
    { 520 ;   ;Status              ;Code10        ;TableRelation="Estimate Status";
                                                   CaptionML=[ENU=Status;
                                                              NOR=Status;
                                                              SVE=Status];
                                                   Description=DP00978 }
    { 530 ;   ;Template Code       ;Code20        ;CaptionML=[ENU=Template Code;
                                                              NOR=Malkode;
                                                              SVE=Mallkod];
                                                   Editable=No }
    { 540 ;   ;Existing Contract No.;Code20       ;TableRelation=Service-Contract WHERE (Contract Form=FILTER(' '|Rental Contract));
                                                   OnValidate=VAR
                                                                ServSurvLocationObject@1100528600 : Record 11071813;
                                                                CopyAllLocationAndObjects@1100528601 : Boolean;
                                                              BEGIN
                                                                IF "Existing Contract No." <> '' THEN BEGIN
                                                                  ServSurvLocationObject.SETRANGE("Survey No.", "No.");
                                                                  IF NOT ServSurvLocationObject.ISEMPTY THEN
                                                                    ERROR(Text005);
                                                                  IF CurrFieldNo = FIELDNO("Existing Contract No.") THEN
                                                                    IF GUIALLOWED THEN
                                                                      CopyAllLocationAndObjects := CONFIRM(Text006);
                                                                  CopyAllNecessaryContractData(CopyAllLocationAndObjects);
                                                                END;
                                                                IF (xRec."Existing Contract No." <> "Existing Contract No.") AND ("Existing Contact Updated on" <> 0DT) THEN
                                                                  "Existing Contact Updated on" := 0DT;
                                                              END;

                                                   CaptionML=ENU=Existing Contract No. }
    { 550 ;   ;Existing Contact Updated on;DateTime;
                                                   CaptionML=ENU=Existing Contact Updated on;
                                                   Editable=No }
    { 560 ;   ;Summary Sheet for Surcharge;Boolean;OnValidate=VAR
                                                                ServiceSurveySurcharge@1100528600 : Record 11071808;
                                                              BEGIN
                                                                IF "Summary Sheet for Surcharge" THEN BEGIN
                                                                  ServiceSurveySurcharge.SETRANGE("Survey No.", "No.");
                                                                  IF NOT ServiceSurveySurcharge.ISEMPTY THEN
                                                                    ERROR(Text008, ServiceSurveySurcharge.TABLECAPTION);
                                                                END;
                                                                SetRecalculateforSurcharge(TRUE);
                                                              END;

                                                   CaptionML=ENU=Summary Sheet for Surcharge }
    { 570 ;   ;Percentage Share Calls;Decimal     ;CaptionML=[ENU=Percentage Share Calls;
                                                              NOR=Prosentandel, samtale;
                                                              SVE=Procentandel samtal] }
    { 580 ;   ;Recalculate for Surcharge;Boolean  ;CaptionML=ENU=Recalculate for Surcharge;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1100528600 : TextConst 'ENU=Base Location Structures already exist;NOR=Basislokasjonsstrukturer finnes allerede;SVE=Basplatsstrukturer finns redan';
      Text001@1100528601 : TextConst 'ENU=Only Relations of Type Company or Person without Company allowed;NOR=Kun relasjoner av typen selskap eller Person uten selskap tillates;SVE=Endast relationer av typen F”retag eller Person utan f”retag till†ts';
      Text002@1100528602 : TextConst 'ENU=Update Objects #1##### of #2#####';
      Text004@1100528604 : TextConst 'ENU=Do you want to create a Service Survey using a Service Survey Template?';
      Text005@1100528605 : TextConst 'ENU=Survey Objects already exist, changing not allowed';
      Text006@1100528606 : TextConst 'ENU=Copy all Locations and Objects from Contract?';
      Text007@1100528607 : TextConst 'ENU=Contract already updated on %1, continue?';
      Text008@1100528603 : TextConst 'ENU=%1 Lines already exist, changing not allowed';
      Text009@1100528608 : TextConst 'ENU=Created via Summary Sheet';
      DPA_Management@1100530700 : Codeunit 11012783;
      FPSLicenseManagement@1100530701 : Codeunit 11229289;

    PROCEDURE AssistEdit@2(OldServiceSurvey@1000 : Record 11071803) : Boolean;
    VAR
      ServiceSurvey@1001 : Record 11071803;
      ServiceSetup@1100528600 : Record 11012800;
      NoSeriesManagement@1100528601 : Codeunit 396;
    BEGIN
      WITH ServiceSurvey DO BEGIN
        ServiceSurvey := Rec;
        ServiceSetup.GET;
        ServiceSetup.TESTFIELD("Survey Nos.");
        IF NoSeriesManagement.SelectSeries(
          ServiceSetup."Survey Nos.", OldServiceSurvey."No. Series", "No. Series")
        THEN BEGIN
          NoSeriesManagement.SetSeries("No.");
          Rec := ServiceSurvey;
          EXIT(TRUE);
        END;
      END;
    END;

    PROCEDURE CalcTotals@1100528600();
    VAR
      ServSurvLocationObject@1100528600 : Record 11071813;
      ServSurvLocObjDetail@1100528601 : Record 11071807;
      ProgressDialog@1100528602 : Dialog;
      RecordCounter@1100528603 : Integer;
    BEGIN
      IF MODIFY THEN;
      ProgressDialog.OPEN(Text002);

      IF "Summary Sheet for Surcharge" THEN BEGIN
        UpdateSurveySurcharges(0);
        UpdateSurveySurcharges(1);
      END;

      ServSurvLocationObject.SETRANGE("Survey No.", "No.");
      IF ServSurvLocationObject.FINDSET(TRUE) THEN BEGIN
        IF (NOT ServSurvLocationObject."Objects Created") OR (ServSurvLocationObject."Existing Service Object No." <> '') THEN BEGIN
          ProgressDialog.UPDATE(2, ServSurvLocationObject.COUNT);
          REPEAT
            RecordCounter += 1;
            ProgressDialog.UPDATE(1, ServSurvLocationObject.COUNT);
            ServSurvLocObjDetail.SETRANGE("Survey No.", ServSurvLocationObject."Survey No.");
            ServSurvLocObjDetail.SETRANGE("Location Code", ServSurvLocationObject."Location Code");
            ServSurvLocObjDetail.SETRANGE("Seq. No.", ServSurvLocationObject."Seq. No.");
            IF ServSurvLocObjDetail.FINDSET(TRUE) THEN
              REPEAT
                ServSurvLocObjDetail.UpdateTotals;
                ServSurvLocObjDetail.MODIFY(TRUE);
              UNTIL ServSurvLocObjDetail.NEXT = 0;
            ServSurvLocationObject.UpdateTotals;
            ServSurvLocationObject.MODIFY(TRUE);
          UNTIL ServSurvLocationObject.NEXT = 0;
        END;
      END;
      ProgressDialog.CLOSE;

      IF NOT "Summary Sheet for Surcharge" THEN
        UpdateCurrentSummarySheets;

      "Recalculate for Surcharge" := FALSE;
    END;

    PROCEDURE GetTryOut@1210190000(IAction@1210190000 : Integer) Result : Text[30];
    VAR
      TryoutSuccessor@1210190001 : Record 11012761;
      FPSLicenseManagement@1100527400 : Codeunit 11229289;
    BEGIN
      IF FPSLicenseManagement.LicenseAndReadPermissionForTable(TryoutSuccessor) THEN
        Result := TryoutSuccessor.GetTryOut('', '', '', '', '', "No.", '', '', IAction);

      EXIT(Result);
    END;

    PROCEDURE ShowTryOut@1210190001(iAction@1210190000 : Integer);
    VAR
      TryoutSuccessor@1210190001 : Record 11012761;
    BEGIN
      TryoutSuccessor.ShowTryOut('', '', '', '', '', "No.", '', '', iAction);
    END;

    PROCEDURE UpdateSurchargesFromStd@1100528601();
    VAR
      ServiceSurchargeVersion@1100528600 : Record 11071783;
      ServiceSurchargeLine@1100528601 : Record 11071784;
      ServiceSurveySurcharge@1100528602 : Record 11071808;
      LineNo@1100528603 : Integer;
    BEGIN
      ServiceSurveySurcharge.SETRANGE("Survey No.", "No.");
      ServiceSurveySurcharge.SETRANGE("Surcharge Type", ServiceSurveySurcharge."Surcharge Type"::Cost);
      ServiceSurveySurcharge.DELETEALL(TRUE);

      ServiceSurchargeVersion.SETRANGE(Type, ServiceSurchargeVersion.Type::Company);
      ServiceSurchargeVersion.SETRANGE(Code, '');
      ServiceSurchargeVersion.SETRANGE("Source Type", ServiceSurchargeVersion."Source Type"::Contract);
      ServiceSurchargeVersion.SETRANGE("Service Type", "Service Type");
      ServiceSurchargeVersion.SETRANGE("Department Code", "Global Dimension 1 Code");
      ServiceSurchargeVersion.SETFILTER("Index Date", '<=%1', "Reference Date");
      ServiceSurchargeVersion.SETRANGE(Expired, FALSE);
      IF "Global Dimension 1 Code" <> '' THEN
        IF ServiceSurchargeVersion.ISEMPTY THEN
          ServiceSurchargeVersion.SETRANGE("Department Code", '');
      IF "Service Type" <> '' THEN
        IF ServiceSurchargeVersion.ISEMPTY THEN
          ServiceSurchargeVersion.SETRANGE("Service Type", '');
      IF ServiceSurchargeVersion.FINDLAST THEN BEGIN
        ServiceSurchargeLine.SETRANGE(Type, ServiceSurchargeVersion.Type);
        ServiceSurchargeLine.SETRANGE(Code, ServiceSurchargeVersion.Code);
        ServiceSurchargeLine.SETRANGE("Source Type", ServiceSurchargeVersion."Source Type");
        ServiceSurchargeLine.SETRANGE("Service Type", ServiceSurchargeVersion."Service Type");
        ServiceSurchargeLine.SETRANGE("Department Code", ServiceSurchargeVersion."Department Code");
        ServiceSurchargeLine.SETRANGE("Index Date", ServiceSurchargeVersion."Index Date");
        IF ServiceSurchargeLine.FINDSET THEN
          REPEAT
            LineNo += 10000;
            ServiceSurveySurcharge.INIT;
            ServiceSurveySurcharge."Survey No." := "No.";
            ServiceSurveySurcharge."Surcharge Type" := ServiceSurveySurcharge."Surcharge Type"::Cost;
            ServiceSurveySurcharge."Service Type" := ServiceSurchargeLine."Service Type";
            ServiceSurveySurcharge."Line No." := LineNo;
            ServiceSurveySurcharge.VALIDATE("Cost Type Filter", ServiceSurchargeLine."Cost Type Filter");
            ServiceSurveySurcharge.VALIDATE("Cost Object Filter", ServiceSurchargeLine."Cost Object Filter");
            ServiceSurveySurcharge.VALIDATE("Cost Object", ServiceSurchargeLine."Cost Object");
            ServiceSurveySurcharge.VALIDATE(Description, ServiceSurchargeLine.Description);
            ServiceSurveySurcharge.VALIDATE("Surcharge Percentage", ServiceSurchargeLine."Surcharge %");
            ServiceSurveySurcharge.INSERT(TRUE);
          UNTIL ServiceSurchargeLine.NEXT = 0;
      END;
    END;

    PROCEDURE UpdateSalesSurchargesFromStd@1100528602();
    VAR
      StdSurvSalesSurchVers@1100528600 : Record 11071916;
      StdSurvSalesSurchLine@1100528601 : Record 11071917;
      ServiceSurveySurcharge@1100528602 : Record 11071808;
    BEGIN
      ServiceSurveySurcharge.SETRANGE("Survey No.", "No.");
      ServiceSurveySurcharge.SETRANGE("Surcharge Type", ServiceSurveySurcharge."Surcharge Type"::Sales);
      ServiceSurveySurcharge.DELETEALL(TRUE);

      StdSurvSalesSurchVers.SETRANGE(Type, StdSurvSalesSurchVers.Type::Customer);
      StdSurvSalesSurchVers.SETRANGE(Code, "Customer No.");
      StdSurvSalesSurchVers.SETRANGE("Department Code", "Global Dimension 1 Code");
      StdSurvSalesSurchVers.SETRANGE(Expired, FALSE);
      StdSurvSalesSurchVers.SETFILTER("Index Date", '<=%1', "Reference Date");
      IF "Global Dimension 1 Code" <> '' THEN
        IF StdSurvSalesSurchVers.ISEMPTY THEN
          StdSurvSalesSurchVers.SETRANGE("Department Code", '');
      IF StdSurvSalesSurchVers.ISEMPTY THEN BEGIN
        StdSurvSalesSurchVers.SETRANGE(Type, StdSurvSalesSurchVers.Type::Company);
        StdSurvSalesSurchVers.SETRANGE(Code, '');
        StdSurvSalesSurchVers.SETRANGE("Department Code", "Global Dimension 1 Code");
        IF "Global Dimension 1 Code" <> '' THEN
          IF StdSurvSalesSurchVers.ISEMPTY THEN
            StdSurvSalesSurchVers.SETRANGE("Department Code", '');
      END;
      IF StdSurvSalesSurchVers.FINDLAST THEN BEGIN
        StdSurvSalesSurchLine.SETRANGE(Type, StdSurvSalesSurchVers.Type);
        StdSurvSalesSurchLine.SETRANGE(Code, StdSurvSalesSurchVers.Code);
        StdSurvSalesSurchLine.SETRANGE("Department Code", StdSurvSalesSurchVers."Department Code");
        StdSurvSalesSurchLine.SETRANGE("Index Date", StdSurvSalesSurchVers."Index Date");
        IF StdSurvSalesSurchLine.FINDSET THEN
          REPEAT
            ServiceSurveySurcharge."Survey No." := "No.";
            ServiceSurveySurcharge."Surcharge Type" := ServiceSurveySurcharge."Surcharge Type"::Sales;
            ServiceSurveySurcharge."Line No." := StdSurvSalesSurchLine."Line No.";
            ServiceSurveySurcharge.Description := StdSurvSalesSurchLine.Description;
            ServiceSurveySurcharge."Surcharge Percentage" := StdSurvSalesSurchLine."Surcharge Percentage";
            ServiceSurveySurcharge."Cost Type Filter" := StdSurvSalesSurchLine."Cost Type Filter";
            ServiceSurveySurcharge.INSERT(TRUE);
          UNTIL StdSurvSalesSurchLine.NEXT = 0;
      END;
    END;

    PROCEDURE GetMarginPerc@1100528603() MarginPerc : Decimal;
    BEGIN
      CALCFIELDS("Total Cost", "Total Sales Amount");
      IF "Total Sales Amount" <> 0 THEN
        MarginPerc := ("Total Sales Amount" - "Total Cost") / "Total Sales Amount" * 100
      ELSE
        MarginPerc := 0;
    END;

    PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    VAR
      DimMgt@1100525000 : Codeunit 408;
      DimValRec@1100525001 : Record 349;
    BEGIN
      IF ShortcutDimCode = '' THEN EXIT;
      DimMgt.ValidateDimValueCode(FieldNumber, ShortcutDimCode);
      DimMgt.GetDimValueRec(FieldNumber, ShortcutDimCode, DimValRec, TRUE,'');
      IF NOT DimMgt.CheckDimValue(DimValRec."Dimension Code", ShortcutDimCode) THEN
        ERROR(DimMgt.GetDimErr);
    END;

    PROCEDURE ShowDetails@1100528616();
    VAR
      ServSurvLocObjDetail@1100528600 : Record 11071807;
    BEGIN
      ServSurvLocObjDetail.SETRANGE("Survey No.", "No.");
      PAGE.RUNMODAL(PAGE::"Service Survey Line Details", ServSurvLocObjDetail);
    END;

    PROCEDURE GetSummaryTotal@1100528605(ISummarySheetCode@1100528603 : Code[10];ISummarySheetSeqnNo@1100528604 : Integer) : Decimal;
    VAR
      ServSurvSummarySheet@1100528600 : Record 11072241;
    BEGIN
      IF ISummarySheetSeqnNo = 0 THEN
        ServSurvSummarySheet.SETCURRENTKEY("Summary Kind", "Survey No.", Code, "Index Date");
      ServSurvSummarySheet.SETRANGE("Summary Kind", ServSurvSummarySheet."Summary Kind"::Survey);
      ServSurvSummarySheet.SETRANGE("Survey No.", "No.");
      ServSurvSummarySheet.SETRANGE(Code, ISummarySheetCode);
      ServSurvSummarySheet.SETRANGE("Seq. No.", ISummarySheetSeqnNo);
      IF ServSurvSummarySheet.FINDLAST THEN
        EXIT(ServSurvSummarySheet.GetSummaryTotal);
    END;

    PROCEDURE GetCurrentSummarySheet@1100528608(ISummaryType@1100528602 : 'Cost,Sales';VAR OServSurvSummarySheet@1100528600 : Record 11072241) : Boolean;
    VAR
      ServSurvSummarySheet@1100528601 : Record 11072241;
    BEGIN
      ServSurvSummarySheet.SETCURRENTKEY("Summary Kind", "Survey No.", Code, "Index Date");
      ServSurvSummarySheet.SETRANGE("Summary Kind", ServSurvSummarySheet."Summary Kind"::Survey);
      ServSurvSummarySheet.SETRANGE("Survey No.", "No.");
      CASE ISummaryType OF
        ISummaryType::Cost:
          BEGIN
            ServSurvSummarySheet.SETRANGE(Code, "Summary Sheet (Cost)");
            ServSurvSummarySheet.SETRANGE("Seq. No.", "Summary Sheet Seq. No. (Cost)");
          END;
        ISummaryType::Sales:
          BEGIN
            ServSurvSummarySheet.SETRANGE(Code, "Summary Sheet (Sales)");
            ServSurvSummarySheet.SETRANGE("Seq. No.", "Summary Sheet Seq. No. (Sales)");
          END;
      END;
      IF ServSurvSummarySheet.FINDLAST THEN BEGIN
        OServSurvSummarySheet := ServSurvSummarySheet;
        EXIT(TRUE);
      END ELSE
        CLEAR(OServSurvSummarySheet);
    END;

    PROCEDURE GetCurrentSummaryTotal@1100528604(ISummaryType@1100528601 : 'Cost,Sales') : Decimal;
    VAR
      ServSurvSummarySheet@1100528600 : Record 11072241;
    BEGIN
      IF GetCurrentSummarySheet(ISummaryType, ServSurvSummarySheet) THEN
        EXIT(ServSurvSummarySheet.GetSummaryTotal);
    END;

    LOCAL PROCEDURE UpdateCurrentSummarySheets@1100528621();
    BEGIN
      UpdateCurrentSummarySheet(0);
      UpdateCurrentSummarySheet(1);
    END;

    LOCAL PROCEDURE UpdateCurrentSummarySheet@1100528609(ISummaryType@1100528601 : 'Cost,Sales');
    VAR
      ServSurvSummarySheet@1100528600 : Record 11072241;
    BEGIN
      IF GetCurrentSummarySheet(ISummaryType, ServSurvSummarySheet) THEN
        ServSurvSummarySheet.ReCalcSummaryLines;
    END;

    PROCEDURE UseServiceSurveyTemplate@1100528606();
    VAR
      ServiceSurveyTemplate@1100528600 : Record 11072289;
    BEGIN
      IF NOT ServiceSurveyTemplate.ISEMPTY THEN
        IF CONFIRM(Text004, TRUE) THEN
          IF PAGE.RUNMODAL(0, ServiceSurveyTemplate) = ACTION::LookupOK THEN BEGIN
            "Template Code" := ServiceSurveyTemplate.Code;
            "Summary Sheet (Cost)" := ServiceSurveyTemplate."Summary Sheet (Cost)";
            "Summary Sheet Seq. No. (Cost)" := ServiceSurveyTemplate."Summary Sheet Seq. No. (Cost)";
            TRANSFERFIELDS(ServiceSurveyTemplate, FALSE);
          END;
    END;

    LOCAL PROCEDURE CopySummarySheets@1100528622();
    VAR
      ServiceSurveyTemplate@1100528600 : Record 11072289;
    BEGIN
      IF "Template Code" <> '' THEN BEGIN
        ServiceSurveyTemplate.GET("Template Code");
        IF ServiceSurveyTemplate."Summary Sheet (Sales)" <> '' THEN
          CopySummarySheet(ServiceSurveyTemplate."Summary Sheet (Sales)", ServiceSurveyTemplate."Summary Sheet Seq. No. (Sales)");
        IF ServiceSurveyTemplate."Summary Sheet (Cost)" <> '' THEN
          CopySummarySheet(ServiceSurveyTemplate."Summary Sheet (Cost)", ServiceSurveyTemplate."Summary Sheet Seq. No. (Cost)");
      END;
    END;

    LOCAL PROCEDURE CopySummarySheet@1100528607(ISummarySheetCode@1100528603 : Code[10];ISummarySheetSeqNo@1100528604 : Integer);
    VAR
      FromServSurvSummarySheet@1100528601 : Record 11072241;
      ServSurvSummarySheet@1100528602 : Record 11072241;
    BEGIN
      IF FromServSurvSummarySheet.GET(FromServSurvSummarySheet."Summary Kind"::Standard, '', ISummarySheetCode, ISummarySheetSeqNo) THEN BEGIN
        ServSurvSummarySheet."Summary Kind" := ServSurvSummarySheet."Summary Kind"::Survey;
        ServSurvSummarySheet.Code := ISummarySheetCode;
        ServSurvSummarySheet."Survey No." := "No.";
        ServSurvSummarySheet."Seq. No." := ISummarySheetSeqNo;
        ServSurvSummarySheet.INSERT(TRUE);
        ServSurvSummarySheet."Summary Type" := FromServSurvSummarySheet."Summary Type";
        ServSurvSummarySheet.CopyFrom(FromServSurvSummarySheet, "Reference Date");
      END;
    END;

    LOCAL PROCEDURE CopyAllNecessaryContractData@1100528611(ICopyAllLocationAndObjects@1100528600 : Boolean);
    BEGIN
      CopyContractData;
      CopyContractSurcharges;
      CopyContractOfferedAmount;
      CopyContractInstallmentData;
      IF ICopyAllLocationAndObjects THEN BEGIN
        CopyContractLocations;
        CopyContractObjects;
      END;
    END;

    LOCAL PROCEDURE CopyContractData@1100528613();
    VAR
      ServiceContract@1100528600 : Record 11012812;
    BEGIN
      IF "Existing Contract No." = '' THEN
        EXIT;
      ServiceContract.GET("Existing Contract No.");
      Description := ServiceContract.Description;
      "Description 2" := ServiceContract."Description 2";
      VALIDATE("Customer No.", ServiceContract."Customer No.");
      "Invoice Type" := ServiceContract."Invoice Type";
      "Starting Date" := ServiceContract."Starting Date";
      "Service Package" := ServiceContract."Service Package";
      "Service Type" := ServiceContract."Service Type";
      "Global Dimension 1 Code" := ServiceContract."Global Dimension 1 Code";
      "Contract Template Code" := ServiceContract."Contract Template Code";
    END;

    LOCAL PROCEDURE CopyContractSurcharges@1100528610();
    VAR
      ServiceSurchargeVersion@1100528601 : Record 11071783;
      ServiceSurchargeLine@1100528600 : Record 11071784;
      ServiceSurveySurcharge@1100528602 : Record 11071808;
    BEGIN
      IF "Existing Contract No." = '' THEN
        EXIT;
      ServiceSurchargeVersion.SETRANGE(Type, ServiceSurchargeVersion.Type::Contract);
      ServiceSurchargeVersion.SETRANGE(Code, "Existing Contract No.");
      ServiceSurchargeVersion.SETRANGE("Source Type", ServiceSurchargeVersion."Source Type"::Contract);
      ServiceSurchargeVersion.SETRANGE("Service Type", '');
      ServiceSurchargeVersion.SETRANGE("Department Code", '');
      ServiceSurchargeVersion.SETFILTER("Index Date", '<=%1', "Reference Date");
      IF ServiceSurchargeVersion.FINDLAST THEN BEGIN
        ServiceSurchargeLine.SETRANGE(Type, ServiceSurchargeVersion.Type);
        ServiceSurchargeLine.SETRANGE(Code, ServiceSurchargeVersion.Code);
        ServiceSurchargeLine.SETRANGE("Source Type", ServiceSurchargeVersion."Source Type");
        ServiceSurchargeLine.SETRANGE("Service Type", ServiceSurchargeVersion."Service Type");
        ServiceSurchargeLine.SETRANGE("Department Code", ServiceSurchargeVersion."Department Code");
        ServiceSurchargeLine.SETRANGE("Index Date", ServiceSurchargeVersion."Index Date");
        IF ServiceSurchargeLine.FINDSET THEN
          ServiceSurveySurcharge.SETRANGE("Survey No.", "No.");
          ServiceSurveySurcharge.SETRANGE("Surcharge Type", ServiceSurveySurcharge."Surcharge Type"::Cost);
          ServiceSurveySurcharge.DELETEALL(TRUE);
          REPEAT
            ServiceSurveySurcharge.INIT;
            ServiceSurveySurcharge."Survey No." := "No.";
            ServiceSurveySurcharge."Surcharge Type" := ServiceSurveySurcharge."Surcharge Type"::Cost;
            ServiceSurveySurcharge."Service Type" := ServiceSurchargeLine."Service Type";
            ServiceSurveySurcharge."Line No." := ServiceSurchargeLine."Line No.";
            ServiceSurveySurcharge."Cost Type Filter" := ServiceSurchargeLine."Cost Type Filter";
            ServiceSurveySurcharge."Cost Object Filter" := ServiceSurchargeLine."Cost Object Filter";
            ServiceSurveySurcharge.VALIDATE("Cost Object", ServiceSurchargeLine."Cost Object");
            ServiceSurveySurcharge.Description := ServiceSurchargeLine.Description;
            ServiceSurveySurcharge."Surcharge Percentage" := ServiceSurchargeLine."Surcharge %";
            ServiceSurveySurcharge.INSERT(TRUE);
          UNTIL ServiceSurchargeLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CopyContractOfferedAmount@1100528612();
    VAR
      ContractAmountsbyDate@1100528600 : Record 11071708;
    BEGIN
      IF "Existing Contract No." = '' THEN
        EXIT;
      ContractAmountsbyDate.SETRANGE(Type, ContractAmountsbyDate.Type::"Service Contract");
      ContractAmountsbyDate.SETRANGE("Service Contract No.", "Existing Contract No.");
      ContractAmountsbyDate.SETRANGE("Service Object No.", '');
      ContractAmountsbyDate.SETRANGE("Installment Line No.", 0);
      ContractAmountsbyDate.SETFILTER("Index Date", '<=%1', "Reference Date");
      IF ContractAmountsbyDate.FINDLAST THEN
        VALIDATE("Offered Amount", ContractAmountsbyDate."Amount (LCY)");
    END;

    LOCAL PROCEDURE CopyContractInstallmentData@1100528614();
    VAR
      ServiceContract@1100528601 : Record 11012812;
      ContractInstallment@1100528600 : Record 11071707;
    BEGIN
      IF "Existing Contract No." = '' THEN
        EXIT;
      ServiceContract.GET("Existing Contract No.");
      IF ServiceContract."Invoice Type" <> ServiceContract."Invoice Type"::Installments THEN
        EXIT;
      ContractInstallment.SETRANGE("Service Contract No.", "Existing Contract No.");
      IF ContractInstallment.FINDFIRST THEN BEGIN
        "Installment Invoice Interval" := ContractInstallment."Invoice Interval";
        "Installment Description" := ContractInstallment.Description;
      END;
    END;

    LOCAL PROCEDURE CopyContractLocations@1100528615();
    VAR
      ContractObject@1100528600 : Record 11071702;
      ServiceSurveyLocation@1100528601 : Record 11071804;
      LocationCode@1100528602 : Code[10];
    BEGIN
      IF "Existing Contract No." = '' THEN
        EXIT;
      ContractObject.SETRANGE("Service Contract No.", "Existing Contract No.");
      ContractObject.SETRANGE("Starting Date", 0D, "Reference Date");
      ContractObject.SETFILTER("Ending Date", '%1|>%2', 0D, "Reference Date");
      IF ContractObject.FINDSET THEN
        REPEAT
          ServiceSurveyLocation.SETRANGE("Survey No.", "No.");
          ServiceSurveyLocation.SETRANGE("Service Location No.", ContractObject."Service Location No.");
          IF ServiceSurveyLocation.ISEMPTY THEN BEGIN
            ServiceSurveyLocation.SETRANGE("Service Location No.");
            IF ServiceSurveyLocation.FINDLAST THEN
              LocationCode := INCSTR(ServiceSurveyLocation."Location Code")
            ELSE
              LocationCode := '001';
            ServiceSurveyLocation.SetAutoConfirmServiceLocationSelection(TRUE);
            ServiceSurveyLocation."Survey No." := "No.";
            ServiceSurveyLocation."Location Code" := LocationCode;
            ServiceSurveyLocation.VALIDATE("Service Location No.", ContractObject."Service Location No.");
            ServiceSurveyLocation."Include in Contract" := TRUE;
            ServiceSurveyLocation.INSERT(TRUE);
          END;
        UNTIL ContractObject.NEXT = 0;
    END;

    LOCAL PROCEDURE CopyContractObjects@1100528617();
    VAR
      ContractObject@1100528600 : Record 11071702;
      ServiceSurveyLocation@1100528603 : Record 11071804;
      ServSurvLocationObject@1100528601 : Record 11071813;
      SeqNo@1100528602 : Integer;
    BEGIN
      IF "Existing Contract No." = '' THEN
        EXIT;
      SeqNo := 1;
      ContractObject.SETRANGE("Service Contract No.", "Existing Contract No.");
      ContractObject.SETRANGE("Starting Date", 0D, "Reference Date");
      ContractObject.SETFILTER("Ending Date", '%1|>%2', 0D, "Reference Date");
      ContractObject.SETRANGE(Blocked, FALSE);
      IF ContractObject.FINDSET THEN
        REPEAT
          ServiceSurveyLocation.SETRANGE("Survey No.", "No.");
          ServiceSurveyLocation.SETRANGE("Service Location No.", ContractObject."Service Location No.");
          ServiceSurveyLocation.FINDFIRST;

          ServSurvLocationObject.INIT;
          ServSurvLocationObject."Survey No." := "No.";
          ServSurvLocationObject."Location Code" := ServiceSurveyLocation."Location Code";
          ServSurvLocationObject."Seq. No." := SeqNo;
          ServSurvLocationObject."Existing Service Object No." := ContractObject."Service Object No."; //C035484
          ServSurvLocationObject.INSERT(TRUE);
          ServSurvLocationObject.VALIDATE("Existing Service Object No.", ContractObject."Service Object No.");
          ServSurvLocationObject."End Date" := ContractObject."Ending Date";
          ServSurvLocationObject.MODIFY(TRUE);

          SeqNo += 1;
        UNTIL ContractObject.NEXT = 0;
    END;

    PROCEDURE UpdateExistingContract@1100528618();
    VAR
      ServSurvLocationObject@1100528600 : Record 11071813;
    BEGIN
      TESTFIELD("Existing Contract No.");
      IF "Existing Contact Updated on" <> 0DT THEN
        IF GUIALLOWED THEN
          IF NOT CONFIRM(Text007, FALSE, "Existing Contact Updated on") THEN
            ERROR('');
      ServSurvLocationObject.SETRANGE("Survey No.", "No.");
      ServSurvLocationObject.AttachSelObjectsToContract(ServSurvLocationObject);
      "Existing Contact Updated on" := CURRENTDATETIME;
      MODIFY(TRUE);
    END;

    PROCEDURE UpdatePricesAndRates@1100528619();
    VAR
      ServSurvObjectAddAct@1100528600 : Record 11071814;
    BEGIN
      ServSurvObjectAddAct.SETRANGE("Survey No.", "No.");
      IF ServSurvObjectAddAct.FINDSET(TRUE) THEN
        REPEAT
          ServSurvObjectAddAct.UpdatePricesAndRates;
          ServSurvObjectAddAct.MODIFY(TRUE);
        UNTIL ServSurvObjectAddAct.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateSurveySurcharges@1100528620(ISummaryType@1100528600 : 'Cost,Sales');
    VAR
      ServSurvSummarySheet@1100528601 : Record 11072241;
      ServSurvCostSummarySheet@1100528606 : Record 11072241;
      ServiceSurveySurcharge@1100528602 : Record 11071808;
      TotalSummarySurcharge@1100528603 : Decimal;
      TotalAmount@1100528604 : Decimal;
    BEGIN
      ServiceSurveySurcharge.SETRANGE("Survey No.", "No.");
      IF ISummaryType = ISummaryType::Sales THEN
        ServiceSurveySurcharge.SETRANGE("Surcharge Type", ISummaryType);
      ServiceSurveySurcharge.DELETEALL(TRUE);

      IF GetCurrentSummarySheet(ISummaryType, ServSurvSummarySheet) THEN BEGIN
        ServSurvSummarySheet.ReCalcSummaryLines;
        TotalSummarySurcharge := ServSurvSummarySheet.GetSummarySurcharge;

        CALCFIELDS("Total Net Cost");
        TotalAmount := "Total Net Cost";

        IF ISummaryType = ISummaryType::Sales THEN BEGIN
          IF GetCurrentSummarySheet(ISummaryType::Cost, ServSurvCostSummarySheet) THEN
            ServSurvCostSummarySheet.ReCalcSummaryLines;
          TotalAmount += ServSurvCostSummarySheet.GetSummarySurcharge;
        END;
        ServiceSurveySurcharge."Survey No." := "No.";
        ServiceSurveySurcharge."Surcharge Type" := ISummaryType;
        ServiceSurveySurcharge."Line No." := 10000;
        ServiceSurveySurcharge.Description := Text009;
        IF TotalAmount <> 0 THEN
          ServiceSurveySurcharge."Surcharge Percentage" := TotalSummarySurcharge / TotalAmount * 100;
        ServiceSurveySurcharge.INSERT; // no trigger
      END;
    END;

    LOCAL PROCEDURE SetRecalculateforSurcharge@1100528623(IForce@1100528600 : Boolean);
    BEGIN
      IF "Summary Sheet for Surcharge" OR IForce THEN
        "Recalculate for Surcharge" := TRUE;
    END;

    PROCEDURE DPA_SetDefaultDpmtFromNoSeries@1100000995(xRecRef@1100525002 : RecordRef);
    BEGIN
      IF NOT DPA_IsActive THEN
        EXIT;

      xRecRef.SETTABLE(xRec);
      DPA_Management.SetDepartmentCodeNoSeries(
        TABLENAME,
        "Global Dimension 1 Code",
        "No. Series",
        xRec."No. Series" );
    END;

    LOCAL PROCEDURE DPA_OnInsert@1100000991();
    VAR
      Dimension1Code@1100528400 : Code[20];
    BEGIN
      IF NOT DPA_IsActive THEN
        EXIT;

      Dimension1Code :=
        DPA_Management.GetNoSeriesDepartmentCode(
          "No. Series",
          xRec."No. Series",
          DATABASE::"Service Location");
      IF Dimension1Code <> '' THEN
        "Global Dimension 1 Code" := Dimension1Code;

      IF "Global Dimension 1 Code" <> '' THEN
        VALIDATE("Global Dimension 1 Code");
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      EXIT(0);
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
      i@1100525004 : Integer;
    BEGIN
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      FOR i := 10 DOWNTO 0 DO BEGIN
        RecRef.FILTERGROUP(i);
        FILTERGROUP(i);
        SETVIEW(RecRef.GETVIEW(FALSE));
      END;

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
    BEGIN
      IF NOT FPSLicenseManagement.LicenseAndReadPermissionForTable(DepartmentAuthorizObject) THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE DPA_FindRecWithDPAFilterAppld@1100530700();
    BEGIN
    END;

    PROCEDURE DPA_ChkDepartmentCodeAllowed@1100000990(IsHardFilter@1100526000 : Boolean);
    VAR
      DimensionManagement@1100526001 : Codeunit 408;
    BEGIN
      DimensionManagement.CheckDepartmAuthWithFilterType(
        DATABASE::"Service Location", "Global Dimension 1 Code", IsHardFilter);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      EXIT(FIELDNO("Global Dimension 1 Code"));
    END;

    PROCEDURE DPA_SetDefaultDepartment@1100000996();
    BEGIN
      IF NOT DPA_IsActive THEN
        EXIT;

      DPA_Management.SetDepartmentCodeUser(TABLENAME, "Global Dimension 1 Code");
    END;

    PROCEDURE DPA_SetFiltersForResource@1100528704(Context@1100525000 : Text[30];ResourceNo@1100525001 : Code[20]) : Boolean;
    VAR
      Resource@1100525002 : Record 11229278;
      UserSetup@1100525003 : Record 91;
    BEGIN
      Resource.SETRANGE("No.", ResourceNo);
      Resource.SETRANGE(Type, Resource.Type::Employee);
      Resource.SETRANGE(Company, COMPANYNAME);
      IF Resource.FINDFIRST THEN BEGIN
        UserSetup.SETRANGE("Employee No.", Resource."Source No.");
        IF UserSetup.FINDFIRST THEN
          DPA_Management.SetUserWSEmployee(UserSetup."User ID");
      END;

      EXIT(DPA_SetFilters(Context));
    END;

    BEGIN
    END.
  }
}

