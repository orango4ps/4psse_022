OBJECT Table 11229430 Generic Proces Queue
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    OnInsert=BEGIN
               "Created By" := USERID;
               "Created on" := CURRENTDATETIME;
             END;

    OnModify=BEGIN
               "Modified By" := USERID;
               "Modified On" := CURRENTDATETIME
             END;

    OnDelete=VAR
               GenProcessQueueParameter@1100528300 : Record 11229431;
             BEGIN
               IF (Status <> Status::Cancelled) AND (Status <> Status::Processed) THEN
                 FIELDERROR(Status);

               GenProcessQueueParameter.SETRANGE("Entry No.", "Entry No.");
               GenProcessQueueParameter.DELETEALL(TRUE);
             END;

    CaptionML=ENU=Generic Process Queue;
    LookupPageID=Page11129894;
    DrillDownPageID=Page11129894;
  }
  FIELDS
  {
    { 10  ;   ;Entry No.           ;BigInteger    ;AutoIncrement=Yes;
                                                   CaptionML=[ENU=Entry No.;
                                                              NOR=L›penr.;
                                                              SVE=L”pnr];
                                                   Editable=No }
    { 100 ;   ;Step Name           ;Text50        ;TableRelation="Generic Process Step"."Step Name";
                                                   CaptionML=ENU=Step Name;
                                                   Editable=No }
    { 101 ;   ;Priority            ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Generic Process Step".Priority WHERE (Step Name=FIELD(Step Name)));
                                                   CaptionML=[ENU=Priority;
                                                              NOR=Prioritet;
                                                              SVE=Prioritet];
                                                   Editable=No }
    { 102 ;   ;Step Type           ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Generic Process Step"."Step Type" WHERE (Step Name=FIELD(Step Name)));
                                                   CaptionML=ENU=Step Type;
                                                   Editable=No }
    { 103 ;   ;Parameters          ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Gen Proces Queue Parameter" WHERE (Entry No.=FIELD(Entry No.)));
                                                   CaptionML=[ENU=Parameters;
                                                              NOR=Parameters;
                                                              SVE=Parameters];
                                                   Editable=No }
    { 110 ;   ;Status              ;Option        ;OnValidate=BEGIN
                                                                IF (xRec.Status = Status::Processed) THEN
                                                                  FIELDERROR(Status);
                                                              END;

                                                   CaptionML=[ENU=Status;
                                                              NOR=Status;
                                                              SVE=Status];
                                                   OptionCaptionML=ENU=Open,Processed,Failed,Cancelled;
                                                   OptionString=Open,Processed,Failed,Cancelled }
    { 120 ;   ;Company Name        ;Text30        ;TableRelation=Company.Name;
                                                   CaptionML=[ENU=Company Name;
                                                              NOR=Navn p† selskap;
                                                              SVE=F”retagsnamn];
                                                   Editable=No }
    { 130 ;   ;Source Record Id    ;RecordID      ;CaptionML=[ENU=Source Record Id;
                                                              SVE=K„llpost-ID];
                                                   Editable=No }
    { 140 ;   ;Step Record Id      ;RecordID      ;CaptionML=[ENU=Step Record Id;
                                                              SVE=Stegpost-ID];
                                                   Editable=No }
    { 150 ;   ;Error Text          ;Text250       ;CaptionML=[ENU=Error;
                                                              NOR=Feil;
                                                              SVE=Fel];
                                                   Editable=No }
    { 160 ;   ;Full Error          ;BLOB          ;CaptionML=ENU=Full Error }
    { 170 ;   ;Try No.             ;Integer       ;CaptionML=ENU=Try No.;
                                                   Editable=No }
    { 200 ;   ;Created on          ;DateTime      ;CaptionML=[ENU=Created on;
                                                              NOR=Opprettet den;
                                                              SVE=Skapades];
                                                   Editable=No }
    { 210 ;   ;Created By          ;Text50        ;CaptionML=[ENU=Created By;
                                                              NOR=Created By;
                                                              SVE=Created By];
                                                   Editable=No }
    { 220 ;   ;Modified On         ;DateTime      ;CaptionML=[ENU=Modified on;
                                                              NOR=Endret den;
                                                              SVE=Žndrad den];
                                                   Editable=No }
    { 230 ;   ;Modified By         ;Text50        ;CaptionML=[ENU=Modified By;
                                                              NOR=Modified By;
                                                              SVE=Modified By];
                                                   Editable=No }
    { 240 ;   ;Queue Message       ;BLOB          ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Queue Message }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
    {    ;Company Name,Status,Step Name,Source Record Id }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      GenericProcessSetup@1100528300 : Record 11229409;
      GenericProcessSetupLoaded@1100528301 : Boolean;
      MustHaveValueErr@1100528303 : TextConst 'ENU=" must have a value."';
      QueueExistsTxt@1100528302 : TextConst 'ENU=A %1 for %2 already exists.';

    PROCEDURE AddParameter@1100528314(TableNo@1100528301 : Integer;FieldNo@1100528302 : Integer;TextValue@1100528306 : Text);
    VAR
      GenProcessQueueParameter@1100528303 : Record 11229431;
    BEGIN
      IF (NOT GenProcessQueueParameter.GET("Entry No.", TableNo, FieldNo)) THEN BEGIN
        GenProcessQueueParameter .INIT;
        GenProcessQueueParameter."Entry No." := "Entry No.";
        GenProcessQueueParameter."Table No" := TableNo;
        GenProcessQueueParameter."Field No" :=FieldNo;
        GenProcessQueueParameter.INSERT(TRUE);
      END;
      GenProcessQueueParameter."Field Value" := COPYSTR(TextValue, 1, MAXSTRLEN(GenProcessQueueParameter."Field Value"));
      GenProcessQueueParameter.MODIFY;
    END;

    PROCEDURE AddProcessQueueEntry@1100528304(StepName@1100528300 : Text;CompName@1100528301 : Text;SourceRecId@1100528302 : RecordID);
    BEGIN
      LoadGenericProcessSetup;
      GenericProcessSetup.TESTFIELD("Default Company");

      INIT;
      "Entry No." := 0;
      "Step Name" := COPYSTR(StepName, 1, MAXSTRLEN("Step Name"));
      "Company Name" := COPYSTR(CompName, 1, MAXSTRLEN("Company Name"));
      IF ("Company Name" = '') THEN
        "Company Name" := GenericProcessSetup."Default Company";
      "Source Record Id" := SourceRecId;
      INSERT(TRUE);
    END;

    PROCEDURE CancelProcessQueueEntry@1100528300();
    BEGIN
      IF (Status <> Status::Processed) THEN BEGIN
        VALIDATE(Status, Status::Cancelled);
        MODIFY(TRUE);
      END;
    END;

    PROCEDURE CheckQueueExists@1100528307(CompName@1100528301 : Text;SourceRecId@1100528302 : RecordID;ShowError@1100528303 : Boolean) : Boolean;
    BEGIN
      SETFILTER(Status, '%1|%2', Status::Open, Status::Failed);
      SETRANGE("Company Name", CompName);
      SETRANGE("Source Record Id", SourceRecId);
      IF (FINDFIRST) THEN BEGIN
        IF (ShowError) THEN
          ERROR(QueueExistsTxt, TABLECAPTION, SourceRecId);
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    PROCEDURE CheckQueueExistsInclStepName@1100528308(StepName@1100528308 : Text;CompName@1100528301 : Text;SourceRecId@1100528302 : RecordID;ShowError@1100528303 : Boolean) : Boolean;
    BEGIN
      SETFILTER(Status, '<>%1&<>%2', Status::Cancelled, Status::Processed);
      SETRANGE("Step Name", StepName);
      SETRANGE("Company Name", CompName);
      SETRANGE("Source Record Id", SourceRecId);
      IF (FINDFIRST) THEN BEGIN
        IF (ShowError) THEN
          ERROR(QueueExistsTxt, TABLECAPTION, SourceRecId);
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    PROCEDURE CheckQueueExistsInclStepNameAndParameter@1100528306(StepName@1100528308 : Text;CompName@1100528301 : Text;SourceRecId@1100528302 : RecordID;TableNo@1100528304 : Integer;FieldNo@1100528305 : Integer;FieldValue@1100528307 : Text;ShowError@1100528303 : Boolean) : Boolean;
    VAR
      GenProcesQueueParameter@1100528306 : Record 11229431;
    BEGIN
      SETFILTER(Status, '<>%1&<>%2', Status::Cancelled, Status::Processed);
      SETRANGE("Step Name", StepName);
      SETRANGE("Company Name", CompName);
      SETRANGE("Source Record Id", SourceRecId);
      IF (NOT FINDSET) THEN
        EXIT(FALSE);

      REPEAT
        GenProcesQueueParameter.SETRANGE("Entry No.", "Entry No.");
        GenProcesQueueParameter.SETRANGE("Table No", TableNo);
        GenProcesQueueParameter.SETRANGE("Field No", FieldNo);
        GenProcesQueueParameter.SETRANGE("Field Value", FieldValue);
        IF (NOT GenProcesQueueParameter.ISEMPTY) THEN BEGIN
          IF (ShowError) THEN
            ERROR(QueueExistsTxt, TABLECAPTION, SourceRecId);
          EXIT(TRUE);
        END;
      UNTIL (NEXT = 0);
      EXIT(FALSE);
    END;

    PROCEDURE CheckQueueExistsInclStepRecId@1100528501(CompName@1100528301 : Text;SourceRecId@1100528302 : RecordID;StepRecId@1100528500 : RecordID;ShowError@1100528303 : Boolean) : Boolean;
    BEGIN
      SETFILTER(Status, '<>%1&<>%2', Status::Cancelled, Status::Processed);
      SETRANGE("Company Name", CompName);
      SETRANGE("Source Record Id", SourceRecId);
      SETRANGE("Step Record Id", StepRecId);
      IF (FINDFIRST) THEN BEGIN
        IF (ShowError) THEN
          ERROR(QueueExistsTxt, TABLECAPTION, SourceRecId);
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    PROCEDURE GetParameter@1100528500(TableNo@1100528301 : Integer;FieldNo@1100528302 : Integer) : Text;
    VAR
      GenProcessQueueParameter@1100528303 : Record 11229431;
    BEGIN
      IF (GenProcessQueueParameter.GET("Entry No.", TableNo, FieldNo)) THEN
        EXIT(GenProcessQueueParameter."Field Value");
      EXIT('');
    END;

    PROCEDURE GetQueueMessage@1100528310(VAR DnXmlDocument@1100528301 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      OStream@1100528300 : OutStream;
    BEGIN
      IF (NOT "Queue Message".HASVALUE) THEN
        FIELDERROR("Queue Message", MustHaveValueErr);

      CALCFIELDS("Queue Message");
      "Queue Message".CREATEOUTSTREAM(OStream);
      DnXmlDocument := DnXmlDocument.XmlDocument();
      DnXmlDocument.Load(OStream);
    END;

    [External]
    PROCEDURE ReopenProcessQueueEntry@1100528309();
    BEGIN
      IF (Status = Status::Cancelled) OR (Status = Status::Processed) THEN BEGIN
        VALIDATE(Status, Status::Open);
        "Try No." := 0;
        MODIFY(TRUE);
      END;
    END;

    PROCEDURE ShowFullError@1100528302();
    VAR
      TempBlob@1100528300 : TEMPORARY Record 99008535;
      TextEditor4PS@1100528301 : Page 11129900;
    BEGIN
      IF (NOT "Full Error".HASVALUE) THEN
        FIELDERROR("Queue Message", MustHaveValueErr);

      CALCFIELDS("Full Error");
      TempBlob.Blob := "Full Error";

      TextEditor4PS.SetText(TempBlob);
      TextEditor4PS.EDITABLE := FALSE;
      TextEditor4PS.RUNMODAL;
    END;

    PROCEDURE ShowQueueMessage@1100528801(Type@1100527800 : 'Text,XML,JSON');
    VAR
      JSONBuffer@1100527803 : TEMPORARY Record 1236;
      TempBlob@1100527801 : TEMPORARY Record 99008535;
      TempXMLBuffer@1100528301 : TEMPORARY Record 1235;
      JSONManagement@1100527804 : Codeunit 5459;
      TextEditor4PS@1100527802 : Page 11129900;
      XMLViewer4PS@1100528300 : Page 11129908;
    BEGIN
      IF (NOT "Queue Message".HASVALUE) THEN
        EXIT;

      CALCFIELDS("Queue Message");
      TempBlob.Blob := "Queue Message";
      CASE Type OF
        Type::XML: BEGIN
          TempXMLBuffer.ReadFromBlob(TempBlob);
          XMLViewer4PS.SetTempTable(TempXMLBuffer);
          XMLViewer4PS.SetShowAttributes(FALSE);
          XMLViewer4PS.RUN;
        END;
      {
          Type::JSON: BEGIN
          JSONBuffer.ReadFromBlob(TempBlob);
          JSONBuffer.
        END;
      }
        ELSE BEGIN
          TextEditor4PS.SetText(TempBlob);
          TextEditor4PS.EDITABLE(FALSE);
          TextEditor4PS.RUNMODAL;
        END;
      END;
    END;

    PROCEDURE ShowRecordIdInformation@1100528303(FieldNoIn@1100528300 : Integer);
    VAR
      RecRef@1100528802 : RecordRef;
      RecId@1100528302 : RecordID;
      RecRefVariant@1100528803 : Variant;
    BEGIN
      CASE FieldNoIn OF
        FIELDNO("Source Record Id"):
          RecId := "Source Record Id";
        FIELDNO("Step Record Id"):
          RecId := "Step Record Id";
      END;

      IF (RecId.TABLENO <= 0) THEN
        EXIT;

      RecRef := RecId.GETRECORD;
      RecRef.SETRECFILTER;
      RecRefVariant := RecRef;
      PAGE.RUNMODAL(0, RecRefVariant);
    END;

    LOCAL PROCEDURE "---Locals---"@1100528301();
    BEGIN
    END;

    LOCAL PROCEDURE LoadGenericProcessSetup@1100528305();
    BEGIN
      IF (GenericProcessSetupLoaded) THEN
        EXIT;
      IF GenericProcessSetup.GET THEN
        GenericProcessSetupLoaded := TRUE;
    END;

    BEGIN
    END.
  }
}

