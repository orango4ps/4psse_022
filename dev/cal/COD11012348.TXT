OBJECT Codeunit 11012348 Excel Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            IF TestMode THEN
              TryDownloadFile;
          END;

  }
  CODE
  {
    VAR
      SpreadsheetDocument@1100529601 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Packaging.SpreadsheetDocument";
      SheetData@1100529602 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.SheetData";
      CalculationChain@1100529609 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.CalculationChain";
      SharedStringTable@1100529607 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.SharedStringTable";
      Text001@1100529605 : TextConst 'DEU=Sie mÅssen einen Dateinamen angeben.;ENU=You must enter a file name.;NLD=U moet een bestandsnaam opgeven.;NOR=Du mÜ angi et filnavn.;SVE=Du mÜste ange ett filnamn.';
      Text002@1100529604 : TextConst 'DEU=Die Datei %1 ist nicht vorhanden.;ENU=The file %1 does not exist.;NLD=Het bestand %1 bestaat niet.;NOR=Filen %1 eksisterer ikke.;SVE=Filen %1 finns inte.';
      Text003@1100529603 : TextConst 'DEU=Die Exceltabelle %1 ist nicht vorhanden.;ENU=The Excel worksheet %1 does not exist.;NLD=Het Excel-werkblad %1 bestaat niet.;SVE=Excel-kalkylbladet %1 finns inte.';
      WorkbookOpened@1100529606 : Boolean;
      TestMode@1100529600 : Boolean;
      TestFilePath@1100529608 : Text;
      ServTmpFilePath@1100529610 : Text;

    PROCEDURE OpenWorkbook@1100529606(ServerFileName@1100529600 : Text;SheetName@1100529602 : Text);
    VAR
      FileManagement@1100529601 : Codeunit 419;
    BEGIN
      ClearVariables;

      IF ServerFileName = '' THEN
        ERROR(Text001);
      IF NOT FileManagement.ServerFileExists(ServerFileName) THEN
        ERROR(Text002, ServerFileName);

      SpreadsheetDocument := SpreadsheetDocument.Open(ServerFileName, TRUE);

      IF NOT GetWorkSheet(SheetName) THEN BEGIN
        CloseDocument(FALSE);
        ERROR(Text003, SheetName);
      END;

      GetAdditionalData;

      WorkbookOpened := TRUE;
    END;

    PROCEDURE ChangeDocType@1100529605(NewFileExtension@1100529600 : Text[10]);
    BEGIN
      IF NewFileExtension = '' THEN
        EXIT;
      CASE NewFileExtension OF
        '.xlsx', '.xls':
          SpreadsheetDocument.ChangeDocumentType(SpreadsheetDocument.DocumentType.Workbook);
        '.xlsm':
          SpreadsheetDocument.ChangeDocumentType(SpreadsheetDocument.DocumentType.MacroEnabledWorkbook);
      END;
    END;

    PROCEDURE CloseWorkbook@1100529622();
    BEGIN
      CloseDocument(TRUE);
    END;

    LOCAL PROCEDURE GetWorkSheet@1100529611(SheetName@1100529600 : Text) : Boolean;
    VAR
      WorkSheetPart@1100529604 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Packaging.WorksheetPart";
      WorkSheetElementList@1100529607 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.OpenXmlElementList";
      WorkBookElements@1100529608 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.OpenXmlElementList";
      Sheets@1100528600 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.Sheets";
      Sheet@1100529603 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.Sheet";
      SheetId@1100528400 : Text;
    BEGIN
      IF ISNULL(SpreadsheetDocument.WorkbookPart) THEN
        EXIT(FALSE);

      IF NOT ISNULL(SpreadsheetDocument.WorkbookPart.Workbook) THEN BEGIN
        WorkBookElements := SpreadsheetDocument.WorkbookPart.Workbook.ChildElements;
        IF GetElementByName(WorkBookElements, 'sheets', Sheets) THEN
          IF NOT ISNULL(Sheets) THEN
            FOREACH Sheet IN Sheets DO
              IF FORMAT(Sheet.Name) = SheetName THEN
                SheetId := FORMAT(Sheet.Id);
      END;
      IF SheetId <> '' THEN BEGIN
        WorkSheetPart := SpreadsheetDocument.WorkbookPart.GetPartById(SheetId);
        WorkSheetElementList := WorkSheetPart.Worksheet.Elements;
        IF GetElementByName(WorkSheetElementList, 'sheetData', SheetData) THEN
          EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE GetAdditionalData@1100529600();
    BEGIN
      IF NOT ISNULL(SpreadsheetDocument.WorkbookPart.CalculationChainPart) THEN
        CalculationChain := SpreadsheetDocument.WorkbookPart.CalculationChainPart.CalculationChain;

      IF NOT ISNULL(SpreadsheetDocument.WorkbookPart.SharedStringTablePart) THEN
        SharedStringTable := SpreadsheetDocument.WorkbookPart.SharedStringTablePart.SharedStringTable;
    END;

    LOCAL PROCEDURE RecalculateFormulas@1100529616();
    VAR
      CalculationProperties@1100529600 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.CalculationProperties";
      WorkBookElements@1100529602 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.OpenXmlElementList";
      BoolValue@1100529606 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.BooleanValue";
    BEGIN
      IF NOT ISNULL(SpreadsheetDocument.WorkbookPart.Workbook) THEN BEGIN
        WorkBookElements := SpreadsheetDocument.WorkbookPart.Workbook.ChildElements;
        IF GetElementByName(WorkBookElements, 'calcPr', CalculationProperties) THEN
          CalculationProperties.ForceFullCalculation(BoolValue.BooleanValue(TRUE));
      END;
    END;

    LOCAL PROCEDURE GetElementByName@1100529609(VAR ElementList@1100529603 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.OpenXmlElementList";ElementName@1100529602 : Text[50];VAR Element@1100529600 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.OpenXmlElement") : Boolean;
    VAR
      ElementLoc@1100529604 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.OpenXmlElement";
      ElementNo@1100529601 : Integer;
    BEGIN
      IF ISNULL(ElementList) THEN
        EXIT(FALSE);

      FOR ElementNo := 1 TO ElementList.Count DO BEGIN
        ElementLoc := ElementList.Item(ElementNo - 1);
        IF ElementLoc.LocalName = ElementName THEN BEGIN
          Element := ElementList.Item(ElementNo - 1);
          EXIT(TRUE);
        END;
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE GetAttributeByName@1100528600(VAR AttributeList@1100529603 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1";AttributeName@1100529602 : Text[50];VAR Attribute@1100529600 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.OpenXmlAttribute") : Boolean;
    VAR
      AttributeLoc@1100529604 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.OpenXmlAttribute";
      AttributeNo@1100529601 : Integer;
    BEGIN
      IF ISNULL(AttributeList) THEN
        EXIT(FALSE);

      FOR AttributeNo := 1 TO AttributeList.Count DO BEGIN
        AttributeLoc := AttributeList.Item(AttributeNo - 1);
        IF AttributeLoc.LocalName = AttributeName THEN BEGIN
          Attribute := AttributeList.Item(AttributeNo - 1);
          EXIT(TRUE);
        END;
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE GetRowByNo@1100529614(VAR RowList@1100529603 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.OpenXmlElementList";VAR Row@1100529602 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.Row";VAR PrevRow@1100529606 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.Row";VAR NextRow@1100529607 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.Row";RowNo@1100529600 : Integer) : Boolean;
    VAR
      RowNoLoc@1100529601 : Integer;
      i@1100529605 : Integer;
    BEGIN
      CLEAR(Row);
      CLEAR(PrevRow);
      CLEAR(NextRow);
      IF ISNULL(RowList) THEN
        EXIT(FALSE);

      FOR i := 1 TO RowList.Count  DO BEGIN
        Row := RowList.Item(i - 1);
        IF EVALUATE(RowNoLoc, FORMAT(Row.RowIndex)) THEN BEGIN
          IF RowNoLoc = RowNo THEN
            EXIT(TRUE);
          IF RowNoLoc > RowNo THEN BEGIN
            IF i = 1 THEN
              NextRow := RowList.Item(i - 1);
            EXIT(FALSE);
          END ELSE
            PrevRow := RowList.Item(i - 1);
        END;
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE GetCellByName@1100529632(VAR CellList@1100529608 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.OpenXmlElementList";VAR Cell@1100529603 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.Cell";VAR PrevCell@1100529609 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.Cell";VAR NextCell@1100529610 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.Cell";RowNoTxt@1100529607 : Text;ColNoTxt@1100529600 : Text) : Boolean;
    VAR
      CellElement@1100529604 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.OpenXmlElement";
      i@1100529605 : Integer;
      CellRef@1100529602 : Text;
      ColNoTxtLoc@1100529611 : Text[10];
    BEGIN
      CLEAR(Cell);
      CLEAR(PrevCell);
      CLEAR(NextCell);
      IF ISNULL(CellList) THEN
        EXIT(FALSE);

      FOR i := 1 TO CellList.Count  DO BEGIN
        CellElement := CellList.Item(i - 1);
        IF CellElement.LocalName = 'c' THEN BEGIN
          Cell := CellList.Item(i - 1);
          CellRef := FORMAT(Cell.CellReference);
          ColNoTxtLoc := COPYSTR(CellRef, 1, (STRLEN(CellRef) - STRLEN(RowNoTxt)));

          IF ColNoTxtLoc = ColNoTxt THEN
            EXIT(TRUE);

          CASE TRUE OF
            STRLEN(ColNoTxtLoc) = STRLEN(ColNoTxt):
              IF ColNoTxtLoc > ColNoTxt THEN BEGIN
                IF i = 1 THEN
                  NextCell := CellList.Item(i - 1);
                EXIT(FALSE);
              END;
            STRLEN(ColNoTxtLoc) > STRLEN(ColNoTxt):
              BEGIN
                IF i = 1 THEN
                  NextCell := CellList.Item(i - 1);
                EXIT(FALSE);
              END;
          END;
          PrevCell := CellList.Item(i - 1);
        END;
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE CloseDocument@1100529617(SaveDoc@1100529600 : Boolean);
    BEGIN
      IF WorkbookOpened THEN BEGIN
        RecalculateFormulas;
        IF SaveDoc THEN
          SpreadsheetDocument.WorkbookPart.Workbook.Save;
        SpreadsheetDocument.Close;
      END;
      ClearVariables;
    END;

    LOCAL PROCEDURE ClearVariables@1100529620();
    BEGIN
      CLEAR(SpreadsheetDocument);
      CLEAR(SheetData);
      CLEAR(CalculationChain);
      CLEAR(SharedStringTable);
      WorkbookOpened := FALSE;
    END;

    PROCEDURE WriteCellData@1100529610(RowNo@1100529600 : Integer;ColNo@1100529601 : Integer;CellTxt@1100529602 : Text;ValueIsText@1100529603 : Boolean);
    VAR
      SheetDataElementList@1100529604 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.OpenXmlElementList";
      Row@1100529606 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.Row";
      PrevRow@1100529605 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.Row";
      NextRow@1100529609 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.Row";
      RowElementList@1100529607 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.OpenXmlElementList";
      Cell@1100529608 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.Cell";
      PrevCell@1100529610 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.Cell";
      NextCell@1100529611 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.Cell";
    BEGIN
      IF NOT WorkbookOpened THEN
        EXIT;
      IF (RowNo <= 0) OR (ColNo <= 0) THEN  //C052869: skip check on (CellTxt = '')
        EXIT;

      SheetDataElementList := SheetData.Elements;
      IF GetRowByNo(SheetDataElementList, Row, PrevRow, NextRow, RowNo) THEN BEGIN
        RowElementList := Row.Elements;
        IF GetCellByName(RowElementList, Cell, PrevCell, NextCell, FORMAT(RowNo), ColNameByNo(ColNo)) THEN BEGIN
          UpdateCellValue(Cell, CellTxt, ValueIsText);
          EXIT;
        END;
        IF NOT ISNULL(NextCell) THEN BEGIN
          AddCellToRow(NextCell, 'InsertBeforeSelf', FORMAT(RowNo), ColNameByNo(ColNo), CellTxt, ValueIsText);
          EXIT;
        END;
        IF NOT ISNULL(PrevCell) THEN BEGIN
          AddCellToRow(PrevCell, 'InsertAfterSelf', FORMAT(RowNo), ColNameByNo(ColNo), CellTxt, ValueIsText);
          EXIT;
        END;
        AddFirstCellToRow(Row, FORMAT(RowNo), ColNameByNo(ColNo), CellTxt, ValueIsText);
        EXIT;
      END;
      IF NOT ISNULL(NextRow) THEN BEGIN
        AddRowToSheet(NextRow, 'InsertBeforeSelf', RowNo, ColNameByNo(ColNo), CellTxt, ValueIsText);
        EXIT;
      END;
      IF NOT ISNULL(PrevRow) THEN BEGIN
        AddRowToSheet(PrevRow, 'InsertAfterSelf', RowNo, ColNameByNo(ColNo), CellTxt, ValueIsText);
        EXIT;
      END;
      AddFirstRowToSheet(RowNo, ColNameByNo(ColNo), CellTxt, ValueIsText);
    END;

    LOCAL PROCEDURE UpdateCellValue@1100529627(VAR Cell@1100529605 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.Cell";CellTxt@1100529613 : Text;ValueIsText@1100529612 : Boolean);
    VAR
      NewCellValue@1100529608 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.CellValue";
      CellAttributeList@1100529617 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1";
      CellAttribute@1100529616 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.OpenXmlAttribute";
      TextNo@1100529600 : Integer;
    BEGIN
      //IF CellTxt = '' THEN EXIT;  //C052869: update Excel if field cleared in Navision

      IF NOT ISNULL(Cell.CellFormula) THEN BEGIN
        UpdateCalculationChain(FORMAT(Cell.CellReference));
        Cell.CellFormula.Remove;
      END;

      CellAttributeList := Cell.GetAttributes;
      IF ValueIsText THEN BEGIN
        IF NOT GetAttributeByName(CellAttributeList, 't', CellAttribute) THEN
          Cell.SetAttribute(CellAttribute.OpenXmlAttribute('t', '', 's'));
        IF UpdateSharedStringTable(CellTxt, TextNo) THEN
          Cell.CellValue := NewCellValue.CellValue(FORMAT(TextNo))
        ELSE
          Cell.CellValue := NewCellValue.CellValue(CellTxt);
      END ELSE BEGIN
        IF GetAttributeByName(CellAttributeList, 't', CellAttribute) THEN
          Cell.RemoveAttribute(CellAttribute.LocalName, CellAttribute.NamespaceUri);
        Cell.CellValue := NewCellValue.CellValue(CellTxt);
      END;
    END;

    LOCAL PROCEDURE AddNewCell@1100529601(VAR NewCell@1100529607 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.Cell";CellRefNoTxt@1100529604 : Text[10];CellTxt@1100529627 : Text;ValueIsText@1100529626 : Boolean);
    VAR
      StringValue@1100529603 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.StringValue";
    BEGIN
      NewCell := NewCell.Cell;
      NewCell.CellReference(StringValue.StringValue(CellRefNoTxt));
      UpdateCellValue(NewCell, CellTxt, ValueIsText);
    END;

    LOCAL PROCEDURE AddCellToRow@1100529631(VAR Cell@1100529607 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.Cell";MethodName@1100529600 : Text[50];RowNoTxt@1100529604 : Text[10];ColNoTxt@1100529605 : Text[10];CellTxt@1100529627 : Text;ValueIsText@1100529626 : Boolean);
    VAR
      NewCell@1100529602 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.Cell";
      Mi@1100529623 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Reflection.MethodInfo";
      Mi_g@1100529624 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Reflection.MethodInfo";
      Parameters@1100529622 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      CellType@1100529625 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Type";
    BEGIN
      AddNewCell(NewCell, ColNoTxt + RowNoTxt, CellTxt, ValueIsText);
      CellType := Cell.GetType;
      Mi := CellType.GetMethod(MethodName);
      Parameters := Parameters.CreateInstance(GETDOTNETTYPE(CellType), 1);
      Parameters.SetValue(GETDOTNETTYPE(Cell), 0);
      Mi_g := Mi.MakeGenericMethod(Parameters);
      Parameters := Parameters.CreateInstance(GETDOTNETTYPE(NewCell), 1);
      Parameters.SetValue(NewCell, 0);
      Mi_g.Invoke(Cell, Parameters);
    END;

    LOCAL PROCEDURE AddFirstCellToRow@1100529602(VAR Row@1100529606 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.Row";RowNoTxt@1100529604 : Text[10];ColNoTxt@1100529605 : Text[10];CellTxt@1100529627 : Text;ValueIsText@1100529626 : Boolean);
    VAR
      NewCell@1100529602 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.Cell";
      Mi@1100529623 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Reflection.MethodInfo";
      Mi_g@1100529624 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Reflection.MethodInfo";
      Parameters@1100529622 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      CellType@1100529601 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Type";
      RowType@1100529600 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Type";
    BEGIN
      AddNewCell(NewCell, ColNoTxt + RowNoTxt, CellTxt, ValueIsText);
      CellType := NewCell.GetType;

      RowType := Row.GetType;
      Mi := RowType.GetMethod('AppendChild');
      Parameters := Parameters.CreateInstance(GETDOTNETTYPE(CellType), 1);
      Parameters.SetValue(GETDOTNETTYPE(NewCell), 0);
      Mi_g := Mi.MakeGenericMethod(Parameters);
      Parameters := Parameters.CreateInstance(GETDOTNETTYPE(NewCell), 1);
      Parameters.SetValue(NewCell, 0);
      Mi_g.Invoke(Row, Parameters);
    END;

    LOCAL PROCEDURE AddNewRow@1100529604(VAR NewRow@1100529611 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.Row";RowNo@1100529618 : Integer;ColNoTxt@1100529617 : Text[10];CellTxt@1100529616 : Text;ValueIsText@1100529615 : Boolean);
    VAR
      DocIntValue@1100529603 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.UInt32Value";
    BEGIN
      NewRow := NewRow.Row;
      DocIntValue := DocIntValue.UInt32Value;
      DocIntValue.Value := RowNo;
      NewRow.RowIndex(DocIntValue);

      AddFirstCellToRow(NewRow, FORMAT(RowNo), ColNoTxt, CellTxt, ValueIsText);
    END;

    LOCAL PROCEDURE AddRowToSheet@1100529637(VAR Row@1100529611 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.Row";MethodName@1100529620 : Text[50];RowNo@1100529618 : Integer;ColNoTxt@1100529617 : Text[10];CellTxt@1100529616 : Text;ValueIsText@1100529615 : Boolean);
    VAR
      NewRow@1100529614 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.Row";
      Mi@1100529610 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Reflection.MethodInfo";
      Mi_g@1100529609 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Reflection.MethodInfo";
      Parameters@1100529608 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      RowType@1100529607 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Type";
    BEGIN
      AddNewRow(NewRow, RowNo, ColNoTxt, CellTxt, ValueIsText);

      RowType := Row.GetType;
      Mi := RowType.GetMethod(MethodName);
      Parameters := Parameters.CreateInstance(GETDOTNETTYPE(RowType), 1);
      Parameters.SetValue(GETDOTNETTYPE(Row), 0);
      Mi_g := Mi.MakeGenericMethod(Parameters);
      Parameters := Parameters.CreateInstance(GETDOTNETTYPE(NewRow), 1);
      Parameters.SetValue(NewRow, 0);
      Mi_g.Invoke(Row, Parameters);
    END;

    LOCAL PROCEDURE AddFirstRowToSheet@1100529619(RowNo@1100529610 : Integer;ColNoTxt@1100529606 : Text[10];CellTxt@1100529605 : Text;ValueIsText@1100529604 : Boolean);
    VAR
      NewRow@1100529609 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.Row";
      Mi@1100529607 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Reflection.MethodInfo";
      Mi_g@1100529603 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Reflection.MethodInfo";
      Parameters@1100529602 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      RowType@1100529601 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Type";
      SheetType@1100529600 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Type";
    BEGIN
      AddNewRow(NewRow, RowNo, ColNoTxt, CellTxt, ValueIsText);
      RowType := NewRow.GetType;
      SheetType := SheetData.GetType;

      Mi := SheetType.GetMethod('AppendChild');
      Parameters := Parameters.CreateInstance(GETDOTNETTYPE(RowType), 1);
      Parameters.SetValue(GETDOTNETTYPE(NewRow), 0);
      Mi_g := Mi.MakeGenericMethod(Parameters);
      Parameters := Parameters.CreateInstance(GETDOTNETTYPE(NewRow), 1);
      Parameters.SetValue(NewRow, 0);
      Mi_g.Invoke(SheetData, Parameters);
    END;

    LOCAL PROCEDURE ColNameByNo@1100529618(ColNo@1100529605 : Integer) ColName : Text[10];
    VAR
      x@1100529604 : Integer;
      i@1100529603 : Integer;
      y@1100529602 : Integer;
      c@1100529601 : Char;
      t@1100529600 : Text[30];
    BEGIN
      ColName := '';
      x := ColNo;
      WHILE x > 26 DO BEGIN
        y := x MOD 26;
        IF y = 0 THEN
          y := 26;
        c := 64 + y;
        i := i + 1;
        t[i] := c;
        x := (x - y) DIV 26;
      END;
      IF x > 0 THEN BEGIN
        c := 64 + x;
        i := i + 1;
        t[i] := c;
      END;
      FOR x := 1 TO i DO
        ColName[x] := t[1 + i - x];
    END;

    LOCAL PROCEDURE UpdateCalculationChain@1100529603(CellRef@1100529600 : Text[20]);
    VAR
      CalculationCellList@1100529603 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.OpenXmlElementList";
      CalculationCellElement@1100529601 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.OpenXmlElement";
      CalculationCell@1100529604 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.CalculationCell";
      i@1100529602 : Integer;
    BEGIN
      IF ISNULL(CalculationChain) THEN
        EXIT;
      CalculationCellList := CalculationChain.ChildElements;
      IF ISNULL(CalculationCellList) THEN
        EXIT;

      FOR i := 1 TO CalculationCellList.Count DO BEGIN
        CalculationCellElement := CalculationCellList.Item(i - 1);
        IF CalculationCellElement.LocalName = 'c' THEN BEGIN
          CalculationCell := CalculationCellList.Item(i - 1);
          IF FORMAT(CalculationCell.CellReference) = CellRef THEN BEGIN
            CalculationCell.Remove;
            EXIT;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateSharedStringTable@1100529608(TextToAdd@1100529604 : Text;VAR TextNo@1100529606 : Integer) : Boolean;
    VAR
      SharedStringTableElementList@1100529603 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.OpenXmlElementList";
      SharedStringTableElement@1100529614 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.OpenXmlElement";
      SharedStringItem@1100529602 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.SharedStringItem";
      Mi@1100529610 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Reflection.MethodInfo";
      Mi_g@1100529609 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Reflection.MethodInfo";
      Parameters@1100529608 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      StringTableType@1100529611 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Type";
      StringItemType@1100529607 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Type";
      i@1100529612 : Integer;
    BEGIN
      IF TextToAdd = '' THEN
        EXIT(FALSE);
      IF ISNULL(SharedStringTable) THEN
        EXIT(FALSE);

      SharedStringTableElementList := SharedStringTable.Elements;
      FOR i := 1 TO SharedStringTableElementList.Count DO BEGIN
        SharedStringTableElement := SharedStringTableElementList.Item(i - 1);
        IF SharedStringTableElement.LocalName = 'si' THEN
          IF FORMAT(SharedStringTableElement.InnerText) = TextToAdd THEN BEGIN
            TextNo := i - 1;
            EXIT(TRUE);
          END;
      END;
      TextNo := i;

      StringTableType := SharedStringTable.GetType;
      SharedStringItem := SharedStringItem.SharedStringItem(
         '<x:si xmlns:x="' +
         SharedStringTable.NamespaceUri +
         '"><x:t>' +
         ConvertTextToXml(TextToAdd) +
         '</x:t></x:si>');
      StringItemType := SharedStringItem.GetType;

      Mi := StringTableType.GetMethod('AppendChild');
      Parameters := Parameters.CreateInstance(GETDOTNETTYPE(StringItemType), 1);
      Parameters.SetValue(GETDOTNETTYPE(SharedStringItem), 0);
      Mi_g := Mi.MakeGenericMethod(Parameters);
      Parameters := Parameters.CreateInstance(GETDOTNETTYPE(SharedStringItem), 1);
      Parameters.SetValue(SharedStringItem, 0);
      Mi_g.Invoke(SharedStringTable, Parameters);
      SharedStringTable.Save;

      EXIT(TRUE);
    END;

    PROCEDURE SetTestMode@1100529612(TestModeNew@1100529600 : Boolean);
    BEGIN
      TestMode := TestModeNew;
    END;

    PROCEDURE SetTestFilePath@1100529607(TestFilePathNew@1100529600 : Text);
    BEGIN
      TestFilePath := TestFilePathNew;
    END;

    PROCEDURE GetServTmpFilePath@1100529613() : Text;
    BEGIN
      EXIT(ServTmpFilePath);
    END;

    LOCAL PROCEDURE TryDownloadFile@1100529615();
    VAR
      DocumentServiceMgt@1100529600 : Codeunit 9510;
    BEGIN
      ServTmpFilePath := '';
      DocumentServiceMgt.SetUseDocumentService4PS(TRUE);
      IF NOT DocumentServiceMgt.CanConnect THEN
        EXIT;
      DocumentServiceMgt.SetDoNotShowError(TRUE);
      IF NOT DocumentServiceMgt.IsServiceUri(TestFilePath) THEN
        EXIT;
      ServTmpFilePath := DocumentServiceMgt.DownloadFileFromCloudToServerSilent(TestFilePath);
    END;

    LOCAL PROCEDURE ConvertTextToXml@1100528307(InputTxt@1100528300 : Text) OutputTxt : Text;
    VAR
      StringFunctions@1100528301 : Codeunit 11012273;
    BEGIN
      OutputTxt := StringFunctions.ReplaceString(InputTxt, '&', '&amp;');
      OutputTxt := StringFunctions.ReplaceString(OutputTxt, '<', '&lt;');
      OutputTxt := StringFunctions.ReplaceString(OutputTxt, '>', '&gt;');
    END;

    BEGIN
    END.
  }
}

