OBJECT Codeunit 11125671 Update Estimate RAW
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text010@1210190003 : TextConst 'DEU=Kalkulationsteil  #1################# @2@@@@@@@@@@@@@;ENU=Estimatepart  #1################# @2@@@@@@@@@@@@@;NLD=Onderdeel      #1################# @2@@@@@@@@@@@@@;NOR=Kalkyledel  #1################# @2@@@@@@@@@@@@@;SVE=Kalkyldel  #1################# @2@@@@@@@@@@@@@';
      Text011@1210190002 : TextConst 'DEU=Besch„ftigt mit #1################# @2@@@@@@@@@@@@@;ENU=Busy with       #1################# @2@@@@@@@@@@@@@;NLD=Bezig met       #1################# @2@@@@@@@@@@@@@;NOR=Opptatt med       #1################# @2@@@@@@@@@@@@@;SVE=Upptagen med    #1################# @2@@@@@@@@@@@@@';
      Text012@1210190001 : TextConst 'DEU=Kalkulationszeilen;ENU=Estimate Lines;NLD=Calculatieregels;NOR=Kalkylerader;SVE=Kalkylrader';
      EstSetup@1210190005 : Record 11012150;
      EstRec@1210190004 : Record 11012151;
      EstimateLineRAW@1210190012 : Record 11125698;
      QuanSheetRec@1210190030 : Record 11012186;
      QuanModelRec@1210190037 : Record 11012197;
      NormRec@1210190014 : Record 11012163;
      RateRec@1210190018 : Record 11012162;
      DateRateRec@1100485005 : Record 11012188;
      DateRateRec2@1100485006 : Record 11012188;
      EstRateRec@1210190013 : Record 11012160;
      BudgetRateRec@1210190017 : Record 11012000;
      PurchLineRec@1210190019 : Record 39;
      PlantTypeRec@1100485004 : Record 11012551;
      Status@1210190010 : Dialog;
      maxrec@1210190009 : Integer;
      currec@1210190008 : Integer;
      TmpEstRec@1100485003 : TEMPORARY Record 11012151;
      TmpEstimateLineRAW@1210190021 : TEMPORARY Record 11125698;
      Text015@1210190034 : TextConst 'DEU=Auszugsbl„tter;ENU=Quantity Sheet;NLD=Uittrekstaten;NOR=Antallspesifikasjon;SVE=Antalsspecifikation';
      TmpQuanSheetRec@1210190032 : TEMPORARY Record 11012186;
      TmpQuanModelRec@1210190038 : TEMPORARY Record 11012197;
      Text022@1210190028 : TextConst 'DEU=Bedingung: Kalkulation kopiert. Kalkulationszeilen reorganisieren?;ENU=Condition: Estimate copied. Reshuffle Estimate Lines ?;NLD=Voorwaarde: calculatie gekopieerd. Reorganiseren calculatieregels ?;NOR=Tilstand: Kalkyle kopiert. Vil du stokke om kalkylerader?;SVE=Villkor: Kalkyl kopierad. Vill du blanda om kalkylrader?';
      TmpRelationRec@1210190025 : TEMPORARY Record 11072075;
      DimMgt@1100485001 : Codeunit 408;
      DimValRec@1100485000 : Record 349;
      Text023@1100528900 : TextConst 'DEU=Kostenartentfernung Beitrag nicht zul„ssig.;ENU=Cost type removal contribution not allowed.;NLD=Kostensoort verwijderingbijdrage niet toegestaan.';

    PROCEDURE DeleteZeroLines@1(VAR lvEstimateLineRAW@1100485003 : Record 11125698;DeleteEmptyPart@1100485002 : Boolean;EmptyRecipe@1100485004 : 'ZeroHeader,ZeroLines';UseLock@1210190001 : Boolean);
    BEGIN
      EstimateLineRAW.COPY(lvEstimateLineRAW);

      CheckLock(UseLock);
      Status.OPEN(Text010);

      EstimateLineRAW.SETRANGE(Quantity, 0);
      IF EstimateLineRAW.FINDSET(TRUE, FALSE) THEN BEGIN
        currec := 0;
        maxrec := EstimateLineRAW.COUNT;
        REPEAT
          Status.UPDATE(1,EstimateLineRAW."Tender Paragraph No.");
          currec := currec + 1;
          IF (EstimateLineRAW.Norm <> 0) OR (EstimateLineRAW."Net Cost Price" <> 0)  THEN BEGIN  //DP01676
            CheckEstFixed(EstimateLineRAW."Estimate No.");
            EstimateLineRAW.DELETE(TRUE);
            Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
          END;
        UNTIL EstimateLineRAW.NEXT = 0;
      END;

      UpdateFromTmp;
      COMMIT;
      Status.CLOSE;
    END;

    PROCEDURE ReshuffleLines@1210190008(CurrEst@1210190000 : Code[20];UseLock@1210190006 : Boolean);
    VAR
      NewEst@1210190004 : Code[20];
      NewEstLine@1210190001 : Integer;
      PrevElem@1210190003 : Text[100];
    BEGIN
      IF NOT CONFIRM(Text022, FALSE) THEN EXIT;

      CheckLock(UseLock);
      Status.OPEN(Text010);

      NewEst := 'CU11012155_RESHUFFLE';
      PrevElem := '~';

      EstimateLineRAW.RESET;
      EstimateLineRAW.SETRANGE("Estimate No.", CurrEst);
      IF EstimateLineRAW.FINDSET(TRUE, FALSE) THEN BEGIN
        currec := 0;
        maxrec := EstimateLineRAW.COUNT;
        REPEAT
          IF PrevElem <> EstimateLineRAW."Estimate No."  + EstimateLineRAW."Tender Paragraph No." THEN BEGIN
            PrevElem := EstimateLineRAW."Estimate No." + EstimateLineRAW."Tender Paragraph No.";
            NewEstLine := 0;
          END;
          NewEstLine := NewEstLine + 10000;
          currec := currec + 1;
          Status.UPDATE(1,EstimateLineRAW."Tender Paragraph No.");
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));

          TmpEstimateLineRAW := EstimateLineRAW;
          TmpEstimateLineRAW."Estimate No." := NewEst;
          TmpEstimateLineRAW."Line No." := NewEstLine;
          TmpEstimateLineRAW.INSERT;
        UNTIL EstimateLineRAW.NEXT = 0;
        EstimateLineRAW.DELETEALL(TRUE);
      END;

      Status.UPDATE(1,Text012);
      IF TmpEstimateLineRAW.FIND('-') THEN BEGIN
        currec := 0;
        maxrec := TmpEstimateLineRAW.COUNT;
        REPEAT
          EstimateLineRAW.COPY(TmpEstimateLineRAW);
          EstimateLineRAW."Estimate No." := CurrEst;
          EstimateLineRAW.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL TmpEstimateLineRAW.NEXT = 0;
      END;

      Status.UPDATE(1,Text015);
      IF TmpQuanSheetRec.FIND('-') THEN BEGIN
        currec := 0;
        maxrec := TmpQuanSheetRec.COUNT;
        REPEAT
          QuanSheetRec.COPY(TmpQuanSheetRec);
          QuanSheetRec."Estimate No." := CurrEst;
          QuanSheetRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL TmpQuanSheetRec.NEXT = 0;
      END;

      Status.UPDATE(1,QuanModelRec.TABLECAPTION);
      IF TmpQuanModelRec.FIND('-') THEN BEGIN
        currec := 0;
        maxrec := TmpQuanModelRec.COUNT;
        REPEAT
          QuanModelRec.COPY(TmpQuanModelRec);
          QuanModelRec."Estimate No." := CurrEst;
          QuanModelRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL TmpQuanModelRec.NEXT = 0;
      END;

      IF CurrEst <> '' THEN
        EstRec.SETFILTER("No.", CurrEst);
      IF EstRec.FINDSET THEN BEGIN
        REPEAT
          EstRec.UpdateLogbook(EstRec."No.");
        UNTIL EstRec.NEXT = 0;
      END;

      COMMIT;
      Status.CLOSE;
    END;

    PROCEDURE ResetAdjustmentFactor@1210190006(CurrEst@1210190000 : Code[20];CurrSubEst@1210190006 : Code[20];CurrPartGrp@1210190008 : Code[20];CurrPart@1210190007 : Code[20];CurrLino@1210190009 : Integer;UseLock@1210190001 : Boolean;UpdateLevel@1210190002 : Integer;IAdjType@1210190011 : Integer);
    BEGIN
      //not implemented for RAW
    END;

    PROCEDURE ReplaceRecipe@1210190011(CurrEst@1210190009 : Code[20];CurrSubEst@1210190008 : Code[20];GrpCode@1210190007 : Code[20];RcpCode@1210190005 : Code[20];ActEstRcp@1100485001 : ' ,Update,Replace');
    BEGIN
      //not implemented for RAW
    END;

    PROCEDURE ReplaceRateCode@1210190000(VAR lvEstimateLineRAW@1100485000 : Record 11125698;OldRateCode@1210190008 : Code[20];NewRateCode@1210190007 : Code[20];UseLock@1210190000 : Boolean);
    BEGIN
      EstimateLineRAW.COPY(lvEstimateLineRAW);

      CheckLock(UseLock);

      Status.OPEN(Text011);
      Status.UPDATE(1,Text012);

      IF OldRateCode <> '' THEN
        EstimateLineRAW.SETFILTER("Rate Code", OldRateCode)
      ELSE
        EstimateLineRAW.SETFILTER("Rate Code", '<>%1', '');
      IF EstimateLineRAW.FINDSET THEN BEGIN
        currec := 0;
        maxrec := EstimateLineRAW.COUNT;
        REPEAT
          CheckEstFixed(EstimateLineRAW."Estimate No.");

          EstimateLineRAW.VALIDATE("Rate Code", NewRateCode);
          TmpEstimateLineRAW.COPY(EstimateLineRAW);
          TmpEstimateLineRAW.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL EstimateLineRAW.NEXT = 0;
      END;

      TmpEstimateLineRAW.SETRANGE("Rate Code");
      UpdateFromTmp;

      IF EstimateLineRAW.GETFILTER("Estimate No.") <> '' THEN
        EstRec.SETFILTER("No.", EstimateLineRAW.GETFILTER("Estimate No."));
      IF EstRec.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          IF (EstRec."Rate Code" = OldRateCode) OR (OldRateCode = '') THEN BEGIN
            EstRec."Rate Code" := NewRateCode;
            EstRec.MODIFY;
          END;
        UNTIL EstRec.NEXT = 0;
      END;

      COMMIT;
      Status.CLOSE;
    END;

    PROCEDURE ReplaceRateGroup@1210190004(CurrEst@1210190006 : Code[20];OldGroupCode@1210190007 : Code[20];NewGroupCode@1210190001 : Code[20];UseLock@1210190000 : Boolean);
    VAR
      lvEstimateLineRAW@1100485000 : Record 11125698;
    BEGIN
      //C053585 (db, 26-03-19: obsolete function)
      CheckLock(UseLock);

      IF CurrEst <> '' THEN
        EstRec.SETFILTER("No.", CurrEst);
      IF EstRec.FINDSET THEN BEGIN
        REPEAT
          EstRec.TESTFIELD(Fixed, FALSE);
        UNTIL EstRec.NEXT = 0;
      END;

      EstSetup.GET;
      IF EstSetup."Rates Based On" = EstSetup."Rates Based On"::"Rate Group" THEN BEGIN
        RateRec.SETRANGE("Rate Group", NewGroupCode);
        IF RateRec.FINDSET THEN BEGIN
          REPEAT
            IF EstRateRec.GET(CurrEst, RateRec."Rate Code") THEN BEGIN
              EstRateRec.Description := RateRec.Description;
              EstRateRec."Cost Rate" := RateRec."Cost Rate";
              EstRateRec."Rate Type" := RateRec."Rate Type";
              EstRateRec."Team Size" := RateRec."Team Size";
              EstRateRec."Cost Object" := RateRec."Cost Object";  //db, 26-03-19 (C053585)
              EstRateRec.MODIFY;
            END ELSE BEGIN
              EstRateRec."Estimate No." := CurrEst;
              EstRateRec."Rate Code" := RateRec."Rate Code";
              EstRateRec.Description := RateRec.Description;
              EstRateRec."Cost Rate" := RateRec."Cost Rate";
              EstRateRec."Rate Type" := RateRec."Rate Type";
              EstRateRec."Team Size" := RateRec."Team Size";
              EstRateRec."Cost Object" := RateRec."Cost Object";  //db, 26-03-19 (C053585)
              EstRateRec.INSERT;
            END;
          UNTIL RateRec.NEXT = 0;
        END;
        DateRateRec.RESET;
        DateRateRec.SETRANGE("Record Type", DateRateRec."Record Type"::Estimate);
        DateRateRec.SETRANGE("Estimate No.", CurrEst);
        DateRateRec.DELETEALL;

        DateRateRec.RESET;
        DateRateRec.SETRANGE("Record Type", DateRateRec."Record Type"::Standard);
        DateRateRec.SETRANGE("Rate Group", NewGroupCode);
        IF DateRateRec.FIND('-') THEN BEGIN
          REPEAT
            DateRateRec2.COPY(DateRateRec);
            DateRateRec2."Record Type" := DateRateRec."Record Type"::Estimate;
            DateRateRec2."Estimate No." := CurrEst;
            DateRateRec2."Rate Group" := '';
            IF DateRateRec2.INSERT THEN;
          UNTIL DateRateRec.NEXT = 0;
        END;
      END ELSE BEGIN
        BudgetRateRec.SETRANGE("Starting Date",0D,TODAY);
        BudgetRateRec.SETFILTER("Ending Date",'%1|>=%2',0D, TODAY);
        IF BudgetRateRec.FINDSET THEN BEGIN
          REPEAT
            IF EstRateRec.GET(CurrEst, BudgetRateRec.Code) THEN BEGIN
              EstRateRec.Description := BudgetRateRec.Description;
              EstRateRec."Cost Rate" := BudgetRateRec.Rate;
              EstRateRec."Rate Type" := EstRateRec."Rate Type"::Hours;
              EstRateRec.MODIFY;
            END ELSE BEGIN
              EstRateRec."Estimate No." := CurrEst;
              EstRateRec."Rate Code" := BudgetRateRec.Code;
              EstRateRec.Description := BudgetRateRec.Description;
              EstRateRec."Cost Rate" := BudgetRateRec.Rate;
              EstRateRec."Rate Type" := RateRec."Rate Type"::Hours;
              EstRateRec.INSERT;
            END;
          UNTIL BudgetRateRec.NEXT = 0;
        END;
      END;

      IF CurrEst <> '' THEN
        EstRateRec.SETFILTER("Estimate No.", CurrEst);
      IF EstRateRec.FINDSET THEN BEGIN
        REPEAT
          IF CurrEst <> '' THEN
            lvEstimateLineRAW.SETFILTER("Estimate No.", CurrEst);
          ReplaceRateCode(lvEstimateLineRAW, EstRateRec."Rate Code", EstRateRec."Rate Code", UseLock);
        UNTIL EstRateRec.NEXT = 0;
      END;

      IF CurrEst <> '' THEN
        EstRec.SETFILTER("No.", CurrEst);
      IF EstRec.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          EstRec."Rate Group" := NewGroupCode;
          EstRec.MODIFY;
        UNTIL EstRec.NEXT = 0;
      END;
    END;

    PROCEDURE ReplaceNormGroup@1210190001(VAR lvEstimateLineRAW@1100485000 : Record 11125698;OldGroupCode@1210190007 : Code[20];NewGroupCode@1210190005 : Code[20];UseLock@1210190000 : Boolean);
    BEGIN
      EstimateLineRAW.COPY(lvEstimateLineRAW);

      CheckLock(UseLock);

      Status.OPEN(Text011);
      Status.UPDATE(1,Text012);

      IF OldGroupCode <> '' THEN
        EstimateLineRAW.SETFILTER("Norm Group", OldGroupCode)
      ELSE
        EstimateLineRAW.SETFILTER("Norm Group", '<>%1', '');
      IF EstimateLineRAW.FINDSET THEN BEGIN
        currec := 0;
        maxrec := EstimateLineRAW.COUNT;
        REPEAT
          CheckEstFixed(EstimateLineRAW."Estimate No.");

          EstimateLineRAW."Norm Group" := NewGroupCode;
          IF NormRec.GET(EstimateLineRAW."Sub Operation Code", EstimateLineRAW."Norm Group") THEN BEGIN
            EstimateLineRAW.Norm := NormRec.Norm;
            EstimateLineRAW.ConvertNorm(FALSE,FALSE);
          END;
          EstimateLineRAW.CalculateTotals;
          TmpEstimateLineRAW.COPY(EstimateLineRAW);
          TmpEstimateLineRAW.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL EstimateLineRAW.NEXT = 0;
      END;

      WITH EstimateLineRAW DO BEGIN
        IF GETFILTER("Estimate No.") <> '' THEN
          EstRec.SETFILTER("No.", GETFILTER("Estimate No."));
        IF OldGroupCode <> '' THEN
          EstRec.SETFILTER("Norm Group", OldGroupCode)
        ELSE
          EstRec.SETFILTER("Norm Group", '<>%1', '');
        EstRec.MODIFYALL("Norm Group", NewGroupCode);
      END;

      TmpEstimateLineRAW.SETRANGE("Norm Group");

      UpdateFromTmp;
      COMMIT;
      Status.CLOSE;
    END;

    PROCEDURE ReplaceItem@4(VAR ConvRec@1100525006 : Record 11012322;VAR lvEstimateLineRAW@1100525000 : Record 11125698;ActEst@1100525011 : Boolean;ActRcp@1100525012 : Boolean;SetRcpFilter@1100525013 : Boolean;ActPrice@1100525008 : Boolean;UseLock@1100525009 : Boolean);
    VAR
      DimValRec@1100525005 : Record 349;
      DimMgt@1100525004 : Codeunit 408;
      ItemTypeOpt@1100525007 : 'Item,Basic Item,Trade Item';
      Status@1100525003 : Dialog;
      maxrec@1100525002 : Integer;
      currec@1100525001 : Integer;
      EstRec@1100525014 : Record 11012151;
    BEGIN
      //db, 07-10-08: M11811
      //- form 11012350: Replace Items
      //- report 11012166: Replace Estimate Data

      EstimateLineRAW.COPY(lvEstimateLineRAW);
      CheckLock(UseLock);
      Status.OPEN(Text011);

      ConvRec.MARKEDONLY(TRUE);
      IF NOT ConvRec.FINDFIRST THEN BEGIN
        ConvRec.MARKEDONLY(FALSE);
        ConvRec.SETRANGE(Select, TRUE);
      END;
      IF ConvRec.FINDSET THEN BEGIN
        REPEAT
          ConvRec.VALIDATE(Select);

          IF ActEst = TRUE THEN BEGIN
            Status.UPDATE(1,Text012);
            IF ConvRec."Trade Item (Old)" <> '' THEN BEGIN
              EstimateLineRAW.SETRANGE("Trade Item", ConvRec."Trade Item (Old)");
              EstimateLineRAW.SETRANGE("Vendor (Trade Item)", ConvRec."Vendor (Old)");
            END ELSE BEGIN
              IF ConvRec."Basic Item (Old)" <> '' THEN BEGIN
                EstimateLineRAW.SETRANGE("Basic Item", ConvRec."Basic Item (Old)");
                EstimateLineRAW.SETRANGE(Manufacturer, ConvRec."Manufacturer (Old)");
              END ELSE BEGIN
                IF ConvRec."Item No. (Old)" <> '' THEN BEGIN
                  EstimateLineRAW.SETRANGE("Item No.", ConvRec."Item No. (Old)");
                END ELSE BEGIN
                  IF ConvRec."Cost Object (Old)" <> '' THEN BEGIN
                    EstimateLineRAW.SETFILTER("Trade Item", '%1', '');
                    EstimateLineRAW.SETFILTER("Vendor (Trade Item)", '%1', '');
                    EstimateLineRAW.SETFILTER("Basic Item", '%1', '');
                    EstimateLineRAW.SETFILTER(Manufacturer, '%1', '');
                    EstimateLineRAW.SETFILTER("Item No.", '%1', '');
                    DimMgt.GetDimValueRec(2, ConvRec."Cost Object (Old)", DimValRec, TRUE, '');
                    EstimateLineRAW.SETRANGE("Cost Object", ConvRec."Cost Object (Old)");  //DP01676
                  END;
                END;
              END;
            END;
            IF EstimateLineRAW.FINDSET(TRUE, FALSE) THEN BEGIN
              currec := 0;
              maxrec := EstimateLineRAW.COUNT;
              REPEAT
                CheckEstFixed(EstimateLineRAW."Estimate No.");
                IF ConvRec."Cost Object (Old)" <> '' THEN BEGIN
                  DimMgt.GetDimValueRec(2, ConvRec."Cost Object (New)", DimValRec, TRUE, '');
                  EstimateLineRAW.VALIDATE("Cost Object", ConvRec."Cost Object (New)");  //DP01676
                END ELSE BEGIN
                  EstimateLineRAW."Item No." := ConvRec."Item No. (New)";
                  EstimateLineRAW."Basic Item" := ConvRec."Basic Item (New)";
                  EstimateLineRAW."Trade Item" := ConvRec."Trade Item (New)";
                  EstimateLineRAW.Manufacturer := ConvRec."Manufacturer (New)";
                  EstimateLineRAW."Vendor (Trade Item)" := ConvRec."Vendor (New)";
                END;
                IF ActPrice = TRUE THEN BEGIN
                  IF ConvRec."Trade Item (New)" <> '' THEN
                    EstimateLineRAW.ValidateItem(ItemTypeOpt::"Trade Item", EstRec, TRUE)
                  ELSE
                    IF ConvRec."Basic Item (New)" <> '' THEN
                      EstimateLineRAW.ValidateItem(ItemTypeOpt::"Basic Item", EstRec, TRUE)
                    ELSE
                      IF ConvRec."Item No. (New)" <> '' THEN
                        EstimateLineRAW.ValidateItem(ItemTypeOpt::Item, EstRec, TRUE)
                      ELSE
                        IF ConvRec."Cost Object (New)" <> '' THEN
                          EstimateLineRAW.CheckCostObject(ConvRec."Cost Object (New)",FALSE);
                END;
                EstimateLineRAW.CalculateTotals;
                EstimateLineRAW.MODIFY;
                currec := currec + 1;
                Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
              UNTIL EstimateLineRAW.NEXT = 0;
            END;
          END;
        UNTIL ConvRec.NEXT = 0;
      END;

      Status.CLOSE;
    END;

    PROCEDURE UpdateRate@1100528500(CurrEst@1210190006 : Code[20];OldGroupCode@1100525001 : Code[20];NewGroupCode@1100525000 : Code[20]);
    VAR
      lvEstLineRec@1100485000 : Record 11125698;
    BEGIN
      //C053585 (db, 26-03-19: skip obselete function ReplaceRateGroup)
      EstSetup.GET;  //C025953

      IF CurrEst <> '' THEN
        EstRec.SETFILTER("No.", CurrEst);
      IF EstRec.FINDSET THEN BEGIN
        REPEAT
          EstRec.TESTFIELD(Fixed, FALSE);
          IF EstSetup."Rates Based On" = EstSetup."Rates Based On"::"Rate Group" THEN BEGIN
            //C025953.sn
            IF OldGroupCode <> NewGroupCode THEN BEGIN
              EstRec."Rate Group" := NewGroupCode;
              EstRec.MODIFY;
            END;
            EstRec.GetRateByRateGroup;
            //C025953.en
          END ELSE BEGIN
            EstRec.GetCostRate;  //DP00381
            EstRec.GetSalesRate;  //DP00381
          END;
        UNTIL EstRec.NEXT = 0;
      END;

      IF CurrEst <> '' THEN
        EstRateRec.SETFILTER("Estimate No.", CurrEst);
      IF EstRateRec.FINDSET THEN BEGIN
        REPEAT
          IF CurrEst <> '' THEN
            lvEstLineRec.SETFILTER("Estimate No.", CurrEst);
          ReplaceRateCode(lvEstLineRec, EstRateRec."Rate Code", EstRateRec."Rate Code",FALSE);
        UNTIL EstRateRec.NEXT = 0;
      END;
    END;

    PROCEDURE UpdateQuotePrice@1100485007(VAR lvEstimateLineRAW@1100485000 : Record 11125698;QuoteFilter@1100485002 : Text[250];UseLock@1100485005 : Boolean);
    VAR
      PurchLineRec@1100485001 : Record 39;
    BEGIN
      EstimateLineRAW.COPY(lvEstimateLineRAW);

      CheckLock(UseLock);

      Status.OPEN(Text011);
      Status.UPDATE(1, PurchLineRec.TABLECAPTION);

      PurchLineRec.SETRANGE("Document Type", PurchLineRec."Document Type"::Quote);
      IF QuoteFilter <> '' THEN
        PurchLineRec.SETFILTER("Document No.", QuoteFilter);
      IF EstimateLineRAW.GETFILTER("Estimate No.") <> '' THEN
        PurchLineRec.SETFILTER("Estimate No.", EstimateLineRAW.GETFILTER("Estimate No."))
      ELSE
        PurchLineRec.SETFILTER("Estimate No.", '<>%1', '');
      PurchLineRec.SETFILTER("Purchase Route Reference", '<>%1', '');
      PurchLineRec.SETRANGE("Quote Selected", TRUE);
      IF PurchLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := PurchLineRec.COUNT;
        REPEAT
          EstimateLineRAW.SETFILTER("Purchase Route Reference", PurchLineRec."Purchase Route Reference");
          IF EstimateLineRAW.FINDSET THEN BEGIN
            REPEAT
              CheckEstFixed(EstimateLineRAW."Estimate No.");
              //DPO01676.sn
              EstimateLineRAW."Price Agreement" := TRUE;
              EstimateLineRAW."Net Cost Price" := PurchLineRec."Direct Unit Cost";
              EstimateLineRAW."Gross Price" := PurchLineRec."Direct Unit Cost";
              EstimateLineRAW."Purchase Discount %" := 0;
              IF PurchLineRec."Cost Type" = PurchLineRec."Cost Type"::Material THEN
                EstimateLineRAW.Vendor := PurchLineRec."Buy-from Vendor No.";
              IF PurchLineRec."Cost Type" = PurchLineRec."Cost Type"::Subcontracting THEN
                EstimateLineRAW.Subcontractor := PurchLineRec."Buy-from Vendor No.";
              //DP01676.en
              EstimateLineRAW.CalculateDiscount;
              EstimateLineRAW.CalculateTotals;
              TmpEstimateLineRAW.COPY(EstimateLineRAW);
              TmpEstimateLineRAW.INSERT;
            UNTIL EstimateLineRAW.NEXT = 0;
          END;

          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL PurchLineRec.NEXT = 0;
      END;

      TmpEstimateLineRAW.SETRANGE("Purchase Route Reference");

      UpdateFromTmp;
      COMMIT;
      Status.CLOSE;
    END;

    PROCEDURE UpdateActualPrice@1210190002(VAR lvEstimateLineRAW@1100485001 : Record 11125698;ActNorm@1210190013 : Boolean;ActPrice@1210190012 : Boolean;ActPlantPrice@1100485002 : Boolean;ActCostObject@1210190011 : Boolean;ActDesc@1210190010 : Boolean;ActSubOper@1210190021 : Boolean;PriceMethod@1210190017 : 'Actualise GP+DP+NP,Actualise GP + Fix DP + Calculate NP,Fix GP + Actualise DP + Calculate NP,Fix GP + Calculate DP + Actualise NP,Calculate GP + Fix DP + Actualise NP';UseLock@1210190003 : Boolean);
    VAR
      ItemTypeOpt@1210190009 : 'Item,Basic Item,Trade Item';
      OldCostObject@1100528900 : Code[20];
      OldCostType@1100528901 : Integer;
      OldCostComponent@1100485000 : Code[20];
      OldDesc@1210190014 : Text[100];
      OldGrossPrice@1210190018 : Decimal;
      OldDiscPerc@1210190019 : Decimal;
      UnitOld@1210190006 : Code[20];
      UnitNew@1210190005 : Code[20];
      SubOperNew@1210190022 : Code[20];
      OldEstimateLineRAW@1210190008 : Record 11125698;
      NewEstimateLineRAW@1210190007 : Record 11125698;
      EstRec@1100525000 : Record 11012151;
      FPSLicenseManagement@1100527400 : Codeunit 11229289;
    BEGIN
      EstimateLineRAW.COPY(lvEstimateLineRAW);

      CheckLock(UseLock);

      Status.OPEN(Text011);
      Status.UPDATE(1,Text012);

      IF EstimateLineRAW.FINDSET THEN BEGIN
        currec := 0;
        maxrec := EstimateLineRAW.COUNT;
        REPEAT
          CheckEstFixed(EstimateLineRAW."Estimate No.");

          OldCostObject := EstimateLineRAW."Cost Object";  //DP01676
          OldCostType := EstimateLineRAW."Cost Type";  //DP01676
          OldDesc := EstimateLineRAW.Description;
          OldCostComponent := EstimateLineRAW."Cost Component";
          OldGrossPrice := EstimateLineRAW."Gross Price";
          OldDiscPerc := EstimateLineRAW."Purchase Discount %";  //DP01676
          IF ActNorm = TRUE THEN BEGIN
            IF ActSubOper = TRUE THEN
              SubOperNew := CheckSubOperation(EstimateLineRAW.Manufacturer, EstimateLineRAW."Vendor (Trade Item)",
                EstimateLineRAW."Item No.", EstimateLineRAW."Basic Item", EstimateLineRAW."Trade Item");
            IF SubOperNew <> '' THEN
              EstimateLineRAW.VALIDATE("Sub Operation Code", SubOperNew)
            ELSE
              EstimateLineRAW.VALIDATE("Sub Operation Code");
            //includes function DetermineNorm (check costobject+description)
          END;
          IF ActPrice = TRUE THEN BEGIN
            OldEstimateLineRAW := EstimateLineRAW;
            IF EstimateLineRAW."Trade Item" <> '' THEN
              EstimateLineRAW.ValidateItem(ItemTypeOpt::"Trade Item", EstRec, FALSE)
            ELSE
              IF EstimateLineRAW."Basic Item" <> '' THEN
                EstimateLineRAW.ValidateItem(ItemTypeOpt::"Basic Item", EstRec, FALSE)
              ELSE
                IF EstimateLineRAW."Item No." <> '' THEN
                  EstimateLineRAW.ValidateItem(ItemTypeOpt::Item, EstRec, FALSE);

            NewEstimateLineRAW := EstimateLineRAW;
            IF NewEstimateLineRAW."Unit of Measure" <> OldEstimateLineRAW."Unit of Measure" THEN BEGIN
              UnitOld := OldEstimateLineRAW."Unit of Measure";
              UnitNew := NewEstimateLineRAW."Unit of Measure";
              NewEstimateLineRAW."Unit of Measure" := UnitOld;
              OldEstimateLineRAW."Unit of Measure" := UnitNew;
              EstimateLineRAW.CheckItemUnitConversion(NewEstimateLineRAW, OldEstimateLineRAW);
              EstimateLineRAW."Unit of Measure" := UnitOld;
              EstimateLineRAW."Net Cost Price":= NewEstimateLineRAW."Net Cost Price";  //DP01676
              EstimateLineRAW."Gross Price":= NewEstimateLineRAW."Gross Price";
            END;
            IF PriceMethod = PriceMethod::"Actualise GP + Fix DP + Calculate NP" THEN BEGIN
              EstimateLineRAW."Purchase Discount %" := OldDiscPerc;  //DP01676
              EstimateLineRAW.CalculateNetPrice;
            END;
            IF PriceMethod = PriceMethod::"Fix GP + Actualise DP + Calculate NP" THEN BEGIN
              EstimateLineRAW."Gross Price" := OldGrossPrice;
              EstimateLineRAW.CalculateNetPrice;
            END;
            IF PriceMethod = PriceMethod::"Fix GP + Calculate DP + Actualise NP" THEN BEGIN
              EstimateLineRAW."Gross Price" := OldGrossPrice;
              EstimateLineRAW.CalculateDiscount;
            END;
            IF PriceMethod = PriceMethod::"Calculate GP + Fix DP + Actualise NP" THEN BEGIN
              EstimateLineRAW."Purchase Discount %" := OldDiscPerc;  //DP01676
              EstimateLineRAW.CalculateGrossPrice;
            END;
          END;
          IF ActPlantPrice = TRUE THEN
            EstimateLineRAW.DeterminePlantPrice;

          IF (ActDesc) AND (EstimateLineRAW."Plant Type" <> '') AND
             (FPSLicenseManagement.LicenseAndReadPermissionForTable(PlantTypeRec)) THEN
          BEGIN
            PlantTypeRec.GET(EstimateLineRAW."Plant Type");
            EstimateLineRAW.Description := PlantTypeRec.Description;
          END;

          IF ActCostObject = FALSE THEN BEGIN
            EstimateLineRAW."Cost Object" := OldCostObject;  //DP01676
            EstimateLineRAW."Cost Type" := OldCostType;  //DP01676
            EstimateLineRAW."Cost Component" := OldCostComponent;
          END;
          IF ActDesc = FALSE THEN
            EstimateLineRAW.Description := OldDesc;
          EstimateLineRAW.CalculateTotals;
          TmpEstimateLineRAW.COPY(EstimateLineRAW);
          TmpEstimateLineRAW.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL EstimateLineRAW.NEXT = 0;
      END;

      UpdateFromTmp;
      COMMIT;
      Status.CLOSE;
    END;

    PROCEDURE UpdatePriceWithPercentage@1210190003(VAR lvEstimateLineRAW@1100485000 : Record 11125698;PercNorm@1210190011 : Decimal;PercItem@1210190010 : Decimal;PercSubc@1210190009 : Decimal;PercEqmt@1210190008 : Decimal;UseLock@1210190002 : Boolean);
    BEGIN
      EstimateLineRAW.COPY(lvEstimateLineRAW);

      CheckLock(UseLock);

      Status.OPEN(Text011);
      Status.UPDATE(1,Text012);

      IF EstimateLineRAW.FINDSET THEN BEGIN
        currec := 0;
        maxrec := EstimateLineRAW.COUNT;
        REPEAT
          CheckEstFixed(EstimateLineRAW."Estimate No.");
          IF PercNorm <> 0 THEN
            EstimateLineRAW.Norm := ROUND(EstimateLineRAW.Norm * (100+PercNorm)/100, 0.00001);
          //DP01676.sn
          IF PercItem <> 0 THEN
            EstimateLineRAW."Net Cost Price" := ROUND(EstimateLineRAW."Net Cost Price" * (100+PercItem)/100, 0.00001);  //DP01676
          IF PercSubc <> 0 THEN
            EstimateLineRAW."Net Cost Price" := ROUND(EstimateLineRAW."Net Cost Price" * (100+PercSubc)/100, 0.00001);
          IF PercEqmt <> 0 THEN
            EstimateLineRAW."Net Cost Price" := ROUND(EstimateLineRAW."Net Cost Price" * (100+PercEqmt)/100, 0.00001);
          IF EstimateLineRAW."Gross Price" <> 0 THEN
              EstimateLineRAW."Purchase Discount %" :=
                ROUND(100 * (EstimateLineRAW."Gross Price" - EstimateLineRAW."Net Cost Price")/(EstimateLineRAW."Gross Price"), 0.00001);
          //DP01676.en
          EstimateLineRAW.CalculateTotals;
          TmpEstimateLineRAW.COPY(EstimateLineRAW);
          TmpEstimateLineRAW.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL EstimateLineRAW.NEXT = 0;
      END;

      UpdateFromTmp;
      COMMIT;
      Status.CLOSE;
    END;

    PROCEDURE UpdateCode@1210190016(CurrEst@1210190001 : Code[20];CurrSubEst@1210190000 : Code[20];CurrPart@1210190003 : Code[20];CurrCode@1210190002 : Code[20];UseLock@1210190004 : Boolean);
    BEGIN
      //not implemented for RAW
    END;

    PROCEDURE UpdateTotals@1100485000(CurrEst@1210190001 : Code[20];CurrSubEst@1210190000 : Code[20];CurrPart@1210190003 : Code[20];UseLock@1210190004 : Boolean);
    BEGIN
      IF CurrEst <> '' THEN
        EstRec.SETFILTER("No.", CurrEst);
      IF EstRec.FINDSET THEN BEGIN
        REPEAT
          EstRec.TESTFIELD(Fixed, FALSE);
        UNTIL EstRec.NEXT = 0;
      END;

      CheckLock(UseLock);
      Status.OPEN(Text011);
      Status.UPDATE(1,Text012);

      EstimateLineRAW.SETRANGE("Estimate No.", CurrEst);
      IF CurrPart <> '' THEN
        EstimateLineRAW.SETFILTER("Tender Paragraph No.", CurrPart);
      IF EstimateLineRAW.FINDSET THEN BEGIN
        currec := 0;
        maxrec := EstimateLineRAW.COUNT;
        REPEAT
          IF EstimateLineRAW."Rate Code" <> '' THEN BEGIN
            EstRateRec.GET(EstimateLineRAW."Estimate No.", EstimateLineRAW."Rate Code");
            EstimateLineRAW.Rate := EstRateRec."Cost Rate";
            EstimateLineRAW."Rate Type" := EstRateRec."Rate Type";
            EstimateLineRAW."Team Size" := EstRateRec."Team Size";
          END;

          //includes update Part Quantity and functions UpdateRecipeTotals, CalculateTotals:
          EstimateLineRAW.VALIDATE(Quantity);
          TmpEstimateLineRAW.COPY(EstimateLineRAW);
          TmpEstimateLineRAW.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL EstimateLineRAW.NEXT = 0;
      END;

      UpdateFromTmp;

      IF CurrEst <> '' THEN
        EstRec.SETFILTER("No.", CurrEst);
      IF EstRec.FINDSET THEN BEGIN
        REPEAT
          EstRec.UpdateLogbook(EstRec."No.");
        UNTIL EstRec.NEXT = 0;
      END;

      COMMIT;
      Status.CLOSE;
    END;

    PROCEDURE UpdateDiscountWithPercentage@1100485004(VAR lvEstimateLineRAW@1100485001 : Record 11125698;PercDiscount@1210190011 : Decimal;DiscMethod@1100485000 : 'Replace,Add,Increase';UseLock@1100485002 : Boolean);
    VAR
      lvPerc@1100525000 : Decimal;
    BEGIN
      EstimateLineRAW.COPY(lvEstimateLineRAW);

      CheckLock(UseLock);

      Status.OPEN(Text011);
      Status.UPDATE(1,Text012);

      IF EstimateLineRAW.FINDSET THEN BEGIN
        currec := 0;
        maxrec := EstimateLineRAW.COUNT;
        REPEAT
          IF EstimateLineRAW."Gross Price" <> 0 THEN BEGIN
            CheckEstFixed(EstimateLineRAW."Estimate No.");
            CASE DiscMethod OF
              DiscMethod::Replace:
                lvPerc := PercDiscount;
              DiscMethod::Add:
                lvPerc := EstimateLineRAW."Purchase Discount %" + PercDiscount;  //DP01676
              DiscMethod::Increase:
                lvPerc := EstimateLineRAW."Purchase Discount %" * (100+PercDiscount)/100;  //DP01676
            END;
            IF lvPerc < 0 THEN lvPerc := 0;
            IF lvPerc > 100 THEN lvPerc := 100;
            EstimateLineRAW.VALIDATE("Purchase Discount %", lvPerc);  //DP01676
          END;

          TmpEstimateLineRAW.COPY(EstimateLineRAW);
          TmpEstimateLineRAW.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL EstimateLineRAW.NEXT = 0;
      END;

      UpdateFromTmp;
      COMMIT;
      Status.CLOSE;
    END;

    PROCEDURE DetermineRemovalContribution@1100485002(lvAction@1100485014 : Integer;CurrEst@1100485011 : Code[20];CurrSubEst@1100485008 : Code[20];CurrPartGrp@1100485007 : Code[20];CurrPart@1100485006 : Code[20];CurrRcpGrp@1100485013 : Code[20];CurrRcp@1100485012 : Code[20]);
    VAR
      lvEstimateLineRAW@1100485003 : Record 11125698;
      lvEstimateLineRAW2@1100485002 : Record 11125698;
      lvItemRec@1100485001 : Record 27;
      lvTradeItemRec@1100485000 : Record 11012317;
      lvCostObject@1100485004 : Code[20];
      lvRemovalContribution@1100485005 : Decimal;
    BEGIN
      IF (lvAction = 0) OR (lvAction = 1) THEN BEGIN
        lvEstimateLineRAW.SETRANGE("Estimate No.", CurrEst);
        IF CurrPart <> '' THEN
          lvEstimateLineRAW.SETFILTER("Tender Paragraph No.", CurrPart);
        lvEstimateLineRAW.SETRANGE("Removal Contribution", TRUE);
        lvEstimateLineRAW.DELETEALL(TRUE);

        lvEstimateLineRAW.SETRANGE("Removal Contribution");
        IF lvEstimateLineRAW.FINDSET THEN BEGIN
          REPEAT
            lvCostObject := '';
            lvRemovalContribution := 0;

            IF lvEstimateLineRAW."Item No." <> '' THEN BEGIN
              lvItemRec.GET(lvEstimateLineRAW."Item No.");
              lvCostObject := lvItemRec."Cost Object (Removal)";
              lvRemovalContribution := lvItemRec."Removal Contribution";
              IF lvRemovalContribution <> 0 THEN
                lvItemRec.TESTFIELD("Cost Object (Removal)");
            END;

           IF lvEstimateLineRAW."Trade Item" <> '' THEN BEGIN
              lvTradeItemRec.GET(lvEstimateLineRAW."Vendor (Trade Item)", lvEstimateLineRAW."Trade Item");
              lvCostObject := lvTradeItemRec."Cost Object (Removal)";
              lvRemovalContribution := lvTradeItemRec."Removal Contribution";
             IF lvRemovalContribution <> 0 THEN
                lvTradeItemRec.TESTFIELD("Cost Object (Removal)");
            END;

            IF lvRemovalContribution <> 0 THEN BEGIN
              lvEstimateLineRAW2.INIT;
              lvEstimateLineRAW2."Estimate No." := lvEstimateLineRAW."Estimate No.";
              lvEstimateLineRAW2.VALIDATE("Tender Paragraph No.", lvEstimateLineRAW."Tender Paragraph No.");
              lvEstimateLineRAW2."Line No." := lvEstimateLineRAW."Line No.";
              REPEAT
                lvEstimateLineRAW2."Line No." := lvEstimateLineRAW2."Line No." + 1;
              UNTIL lvEstimateLineRAW2.INSERT;

              DimMgt.GetDimValueRec(2, lvCostObject, DimValRec, TRUE, '');
              CASE DimValRec."Cost Type" OF
                //DP01676.sn
                DimValRec."Cost Type"::Material,
                DimValRec."Cost Type"::Subcontracting,
                DimValRec."Cost Type"::Plant:
                  BEGIN
                    lvEstimateLineRAW2.VALIDATE("Cost Object", lvCostObject);
                    lvEstimateLineRAW2.VALIDATE("Net Cost Price", lvRemovalContribution);
                  END;
                ELSE
                  ERROR(Text023);
                //DP01676.en
              END;
              lvEstimateLineRAW2.Description := DimValRec.Name;
              lvEstimateLineRAW2."Unit of Measure" := DimValRec."Unit of Measure";
              lvEstimateLineRAW2.VALIDATE(Quantity, lvEstimateLineRAW.Quantity);
              lvEstimateLineRAW2."Removal Contribution" := TRUE;
              lvEstimateLineRAW2.MODIFY(TRUE);
            END;
          UNTIL lvEstimateLineRAW.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE CheckLock@1210190009(UseLock@1210190000 : Boolean);
    BEGIN
      IF UseLock = TRUE THEN BEGIN
        EstRec.LOCKTABLE;
        EstimateLineRAW.LOCKTABLE;
      END;

      TmpEstimateLineRAW.RESET;
      TmpEstimateLineRAW.DELETEALL;

      TmpRelationRec.RESET;
      TmpRelationRec.DELETEALL;
    END;

    PROCEDURE CheckCharge@1210190014(lvEst@1210190002 : Code[20];lvSubEst@1210190003 : Code[20];lvPartGrp@1210190004 : Code[20];lvPart@1210190005 : Code[20];lvEstLine@1210190006 : Integer;lvRcpGrp@1210190007 : Code[20];lvRcp@1210190008 : Code[20];lvRcpLine@1210190009 : Integer;ChrgBln@1210190011 : Boolean;NewEst@1210190012 : Code[20];NewLine@1210190013 : Integer;Desc@1210190000 : Text[100]);
    BEGIN
      //not implemented for RAW
    END;

    PROCEDURE CheckQuanSheet@1210190013(lvEst@1210190002 : Code[20];lvSubEst@1210190003 : Code[20];lvPartGrp@1210190004 : Code[20];lvPart@1210190005 : Code[20];lvEstLine@1210190006 : Integer;lvRcpGrp@1210190007 : Code[20];lvRcp@1210190008 : Code[20];lvRcpLine@1210190009 : Integer;NewEst@1210190012 : Code[20];NewLine@1210190013 : Integer);
    BEGIN
      QuanSheetRec.RESET;
      QuanSheetRec.SETRANGE("Estimate No.", lvEst);
      QuanSheetRec.SETRANGE("Sub-Estimate No.", lvSubEst);
      QuanSheetRec.SETRANGE("Part Group", lvPartGrp);
      QuanSheetRec.SETRANGE(Part, lvPart);
      IF lvRcp = '' THEN BEGIN
        QuanSheetRec.SETRANGE("Estimate Line", lvEstLine);
        QuanSheetRec.SETRANGE("Recipe Line", 0);
        QuanSheetRec.SETFILTER("Recipe Group", '%1', '');
        QuanSheetRec.SETFILTER(Recipe, '%1', '');
      END ELSE BEGIN
        QuanSheetRec.SETRANGE("Estimate Line", lvEstLine);
        QuanSheetRec.SETRANGE("Recipe Group", lvRcpGrp);
        QuanSheetRec.SETRANGE(Recipe, lvRcp);
        QuanSheetRec.SETRANGE("Recipe Line", lvRcpLine);
      END;
      IF QuanSheetRec.FINDSET THEN BEGIN
        REPEAT
          TmpQuanSheetRec := QuanSheetRec;
          TmpQuanSheetRec."Estimate No." := NewEst;
          IF lvRcp = '' THEN BEGIN
            TmpQuanSheetRec."Estimate Line" := NewLine;
          END ELSE BEGIN
            TmpQuanSheetRec."Recipe Line" := NewLine;
            TmpRelationRec.GET(lvEst, lvSubEst, lvPartGrp, lvPart, lvEstLine, '', '', 0);
            TmpQuanSheetRec."Estimate Line" := TmpRelationRec.Quantity;
          END;
          TmpQuanSheetRec.INSERT;
        UNTIL QuanSheetRec.NEXT = 0;
      END;
    END;

    PROCEDURE CheckQuanModel@1210190022(lvEst@1210190002 : Code[20];lvSubEst@1210190003 : Code[20];lvPartGrp@1210190004 : Code[20];lvPart@1210190005 : Code[20];lvEstLine@1210190006 : Integer;lvRcpGrp@1210190007 : Code[20];lvRcp@1210190008 : Code[20];lvRcpLine@1210190009 : Integer;NewEst@1210190012 : Code[20];NewLine@1210190013 : Integer);
    BEGIN
      QuanModelRec.RESET;
      QuanModelRec.SETRANGE("Estimate No.", lvEst);
      QuanModelRec.SETRANGE("Sub-Estimate No.", lvSubEst);
      QuanModelRec.SETRANGE("Part Group", lvPartGrp);
      QuanModelRec.SETRANGE(Part, lvPart);
      QuanModelRec.SETRANGE("Estimate Line", lvEstLine);
      IF QuanModelRec.FINDSET THEN BEGIN
        REPEAT
          TmpQuanModelRec := QuanModelRec;
          TmpQuanModelRec."Estimate No." := NewEst;
          TmpQuanModelRec."Estimate Line" := NewLine;
          TmpQuanModelRec.INSERT;
        UNTIL QuanModelRec.NEXT = 0;
      END;
    END;

    PROCEDURE CheckCode@1210190015(lvEst@1210190002 : Code[20];lvSubEst@1210190003 : Code[20];lvPartGrp@1210190004 : Code[20];lvPart@1210190005 : Code[20];lvEstLine@1210190006 : Integer;lvRcpGrp@1210190007 : Code[20];lvRcp@1210190008 : Code[20];lvRcpLine@1210190009 : Integer;NewEst@1210190012 : Code[20];NewLine@1210190013 : Integer);
    BEGIN
      //not implemented for RAW
    END;

    PROCEDURE CheckSubOperation@1210190017(lvManufacturer@1210190004 : Code[20];lvVendor@1210190005 : Code[20];lvItem@1210190000 : Code[20];lvBasicItem@1210190001 : Code[20];lvTradeItem@1210190002 : Code[20]) : Code[20];
    VAR
      TradeItemRec@1210190008 : Record 11012317;
      BasicItemRec@1210190007 : Record 11012316;
      ItemRec@1210190006 : Record 27;
    BEGIN
      IF lvTradeItem <> '' THEN BEGIN
        IF NOT TradeItemRec.GET(lvVendor, lvTradeItem) THEN TradeItemRec.INIT;
        IF TradeItemRec."Sub Operation Code" <> '' THEN
          EXIT(TradeItemRec."Sub Operation Code");
      END;

      IF lvBasicItem <> '' THEN BEGIN
        IF NOT BasicItemRec.GET(lvManufacturer, lvBasicItem) THEN BasicItemRec.INIT;
        IF BasicItemRec."Sub Operation Code" <> '' THEN
          EXIT(BasicItemRec."Sub Operation Code");
      END;

      IF lvItem <> '' THEN BEGIN
        IF NOT ItemRec.GET(lvItem) THEN ItemRec.INIT;
        IF ItemRec."Sub Operation Code" <> '' THEN
          EXIT(ItemRec."Sub Operation Code");
      END;

      EXIT('');
    END;

    PROCEDURE CheckBackSlash@1210190019(lvDesc@1210190004 : Text[100]);
    VAR
      sep@1210190000 : Integer;
      desc1@1210190001 : Text[100];
      desc2@1210190002 : Text[100];
      lvText000@1210190003 : TextConst 'DEU=Teil %1 der Beschreibung ist l„nger als 50 Zeichen: \%2;ENU=Part %1 of Description exceeds 50 characters: \%2;NLD=Deel %1 van omschrijving is langer dan 50 posities: \%2;NOR=Del %1 av Beskrivelsen overskrider 50 tegn: \%2;SVE=Del %1 av beskrivningen ”verskrider 50 tecken: \%2';
    BEGIN
      sep := STRPOS(lvDesc, '\');
      IF sep <> 0 THEN BEGIN
        desc1 := COPYSTR(lvDesc, 1, sep-1);
        desc2 := COPYSTR(lvDesc, sep+1, STRLEN(lvDesc)-sep);
        IF STRLEN(desc1) > 50 THEN ERROR(lvText000, '1', desc1);
        IF STRLEN(desc2) > 50 THEN ERROR(lvText000, '2', desc2);
      END;
    END;

    LOCAL PROCEDURE UpdateFromTmp@1210190005();
    BEGIN
      Status.UPDATE(1,Text012);
      IF TmpEstimateLineRAW.FIND('-') THEN BEGIN
        currec := 0;
        maxrec := TmpEstimateLineRAW.COUNT;
        REPEAT
          EstimateLineRAW.COPY(TmpEstimateLineRAW);
          EstimateLineRAW.MODIFY;
          IF EstimateLineRAW."Removal Contribution" = TRUE THEN
            DetermineRemovalContribution(1, EstimateLineRAW."Estimate No.", '', '', EstimateLineRAW."Tender Paragraph No.", '', '');
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL TmpEstimateLineRAW.NEXT = 0;
      END;

      IF TmpEstRec.FIND('-') THEN BEGIN
        REPEAT
          EstRec.UpdateLogbook(TmpEstRec."No.");
          TmpEstRec.DELETE;
        UNTIL TmpEstRec.NEXT = 0;
      END;
    END;

    PROCEDURE CheckEstFixed@1100485005(CurrEst@1100485000 : Code[20]);
    BEGIN
      IF CurrEst <> EstRec."No." THEN BEGIN
        EstRec.GET(CurrEst);
        EstRec.TESTFIELD(Fixed, FALSE);
        TmpEstRec := EstRec;
        TmpEstRec.INSERT;
      END;
    END;

    BEGIN
    END.
  }
}

