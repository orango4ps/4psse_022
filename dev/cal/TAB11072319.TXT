OBJECT Table 11072319 PB Install. Collect. Overview
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=VAR
               ServiceSetup@1100528601 : Record 11012800;
               NoSeriesManagement@1100528602 : Codeunit 396;
             BEGIN
               IF "No." = '' THEN BEGIN
                 ServiceSetup.GET;
                 ServiceSetup.TESTFIELD("Collect Install. Overview Nos.");
                 NoSeriesManagement.InitSeries(ServiceSetup."Collect Install. Overview Nos.", xRec."No. Series", 0D, "No.", "No. Series");
               END;
               DetermineSeqNo;
               "Created by" := USERID;
               "Created on" := CURRENTDATETIME;
             END;

    OnModify=BEGIN
               IF xRec.Status = Status THEN
                 TESTFIELD(Status, Status::Open);
             END;

    OnDelete=VAR
               PBInstallmentOverview@1100528600 : Record 11072317;
             BEGIN
               TESTFIELD(Status, Status::Open);
               PBInstallmentOverview.SETRANGE("Install. Collect. Overview No.", "No.");
               PBInstallmentOverview.MODIFYALL("Install. Collect. Overview No.", '');
             END;

    CaptionML=ENU=Price Book Installment Collection Overview;
    LookupPageID=Page11126819;
    DrillDownPageID=Page11126819;
  }
  FIELDS
  {
    { 10  ;   ;No.                 ;Code20        ;OnValidate=VAR
                                                                ServiceSetup@1100528600 : Record 11012800;
                                                                NoSeriesManagement@1100528601 : Codeunit 396;
                                                              BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  ServiceSetup.GET;
                                                                  NoSeriesManagement.TestManual(ServiceSetup."Collect Install. Overview Nos.");
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=No.;
                                                              NOR=Nr;
                                                              SVE=Nr] }
    { 20  ;   ;Price Book Code     ;Code20        ;TableRelation="Service Price Book".Code;
                                                   OnValidate=BEGIN
                                                                DetermineSeqNo;
                                                              END;

                                                   CaptionML=[ENU=Price Book Code;
                                                              SVE=Enhetspriskod] }
    { 30  ;   ;Price Book Index Date;Date         ;TableRelation="Service Price Book"."Index Date" WHERE (Code=FIELD(Price Book Code));
                                                   OnValidate=BEGIN
                                                                DetermineSeqNo;
                                                              END;

                                                   CaptionML=[ENU=Price Book Index Date;
                                                              SVE=Indexdatum f”r enhetspris] }
    { 40  ;   ;Service Contract No.;Code20        ;TableRelation=Service-Contract;
                                                   OnValidate=BEGIN
                                                                TestIfNoLinesExist;
                                                                DetermineSeqNo;
                                                                DetermineCustomerNo;
                                                                DeterminePriceBookInfo;
                                                                DetermineStartingDate;
                                                              END;

                                                   OnLookup=BEGIN
                                                              HandleServiceContractLookup;
                                                            END;

                                                   CaptionML=[ENU=Service Contract No.;
                                                              NOR=Servicekontraktnr;
                                                              SVE=Servicekontraktnr] }
    { 50  ;   ;Service Order No.   ;Code20        ;TableRelation="Service Order";
                                                   OnValidate=VAR
                                                                ServiceOrder@1100528601 : Record 11012823;
                                                                InstallmentOverviewMgtPB@1100528600 : Codeunit 11012887;
                                                              BEGIN
                                                                TestIfNoLinesExist;
                                                                IF "Service Order No." <> '' THEN BEGIN
                                                                  ServiceOrder.GET("Service Order No.");
                                                                  ServiceOrder.TESTFIELD("Settlement Method", ServiceOrder."Settlement Method"::"Installment Overview by Service Order");
                                                                  IF ServiceOrder."Service Contract No." <> '' THEN
                                                                    "Service Contract No." := ServiceOrder."Service Contract No.";
                                                                  IF NOT ServiceOrder."Base Service Order" AND InstallmentOverviewMgtPB.HasBaseServiceOrderSameRequirements(ServiceOrder."No.") THEN
                                                                    ERROR(Text003, ServiceOrder."No.", ServiceOrder."Base Service Order No.");
                                                                END;
                                                                TESTFIELD("Service Contract No.");
                                                                DetermineSeqNo;
                                                                DetermineCustomerNo;
                                                                DeterminePriceBookInfo;
                                                                DetermineStartingDate;
                                                              END;

                                                   OnLookup=BEGIN
                                                              HandleServiceOrderLookup;
                                                            END;

                                                   CaptionML=[ENU=Service Order No.;
                                                              NOR=Serviceordrenr.;
                                                              SVE=Serviceordernr] }
    { 60  ;   ;Seq. No.            ;Integer       ;CaptionML=[ENU=Seq. No.;
                                                              NOR=Sekv. nr;
                                                              SVE=Sekv. nr];
                                                   MinValue=1;
                                                   NotBlank=Yes }
    { 70  ;   ;Status              ;Option        ;OnValidate=BEGIN
                                                                CheckStatus;
                                                              END;

                                                   CaptionML=[ENU=Status;
                                                              NOR=Status;
                                                              SVE=Status];
                                                   OptionCaptionML=ENU=Open,,,Offered,,,Approved,,,,,,Processed;
                                                   OptionString=Open,,,Offered,,,Approved,,,,,,Processed }
    { 80  ;   ;Starting Date       ;Date          ;OnValidate=BEGIN
                                                                TestIfNoLinesExist;
                                                                DetermineEndingDate;
                                                                CheckDates;
                                                              END;

                                                   CaptionML=[ENU=Starting Date;
                                                              NOR=Startdato;
                                                              SVE=Startdatum] }
    { 90  ;   ;Ending Date         ;Date          ;OnValidate=BEGIN
                                                                TestIfNoLinesExist;
                                                                CheckDates;
                                                              END;

                                                   CaptionML=[ENU=Ending Date;
                                                              NOR=Sluttdato;
                                                              SVE=Slutdatum] }
    { 100 ;   ;Created on          ;DateTime      ;CaptionML=[ENU=Created on;
                                                              NOR=Opprettet den;
                                                              SVE=Skapades];
                                                   Editable=No }
    { 110 ;   ;Created by          ;Code50        ;TableRelation=User."User Name";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Created by;
                                                              NOR=Opprettet av;
                                                              SVE=Skapad av];
                                                   Editable=No }
    { 120 ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              NOR=Nr-serie;
                                                              SVE=Nr-serie];
                                                   Editable=No }
    { 130 ;   ;Bill-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=[ENU=Bill-to Customer No.;
                                                              NOR=Faktura til-kundenr.;
                                                              SVE=Faktureringskundnr];
                                                   Editable=No }
    { 140 ;   ;Period              ;DateFormula   ;OnValidate=BEGIN
                                                                TestIfNoLinesExist;
                                                                DetermineEndingDate;
                                                              END;

                                                   CaptionML=[ENU=Period;
                                                              NOR=Periode;
                                                              SVE=Period] }
    { 150 ;   ;Customer No.        ;Code20        ;TableRelation=Customer;
                                                   OnValidate=VAR
                                                                Customer@1100528600 : Record 18;
                                                              BEGIN
                                                                IF "Customer No." = '' THEN
                                                                  VALIDATE("Bill-to Customer No.", '')
                                                                ELSE BEGIN
                                                                  Customer.GET("Customer No.");
                                                                  IF Customer."Bill-to Customer No." <> '' THEN
                                                                    VALIDATE("Bill-to Customer No.", Customer."Bill-to Customer No.");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Customer No.;
                                                              NOR=Kundenr.;
                                                              SVE=Kundnr];
                                                   Editable=No }
    { 160 ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 170 ;   ;Invoiced Price (LCY);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service-Ledger Entry"."Total Revenue (LCY)" WHERE (PB Install. Collect. Over. No.=FIELD(No.)));
                                                   CaptionML=[ENU=Invoiced Price (LCY);
                                                              NOR=Fakturert  pris (NOK);
                                                              SVE=Fakturerat pris (BVA)];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 180 ;   ;Invoiced Price      ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service-Ledger Entry"."Total Revenue" WHERE (PB Install. Collect. Over. No.=FIELD(No.)));
                                                   CaptionML=[ENU=Invoiced Price;
                                                              NOR=Fakturert pris;
                                                              SVE=Fakturerat pris];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 190 ;   ;Invoice in Process (LCY);Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Amount (LCY)" WHERE (Document Type=CONST(Invoice),
                                                                                                      Service Invoice=CONST(Yes),
                                                                                                      PB Install. Collect. Over. No.=FIELD(No.)));
                                                   CaptionML=[ENU=Invoice in Process (LCY);
                                                              NOR=P†g†ende fakturering (NOK);
                                                              SVE=P†g†ende fakturering (BVA)];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 200 ;   ;Invoice in Process  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line".Amount WHERE (Document Type=CONST(Invoice),
                                                                                              Service Invoice=CONST(Yes),
                                                                                              PB Install. Collect. Over. No.=FIELD(No.)));
                                                   CaptionML=[ENU=Invoice in Process;
                                                              NOR=P†g†ende fakturering;
                                                              SVE=P†g†ende fakturering];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 210 ;   ;Credit Memo in Process (LCY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=-Sum("Sales Line"."Amount (LCY)" WHERE (Document Type=CONST(Credit Memo),
                                                                                                       Service Invoice=CONST(Yes),
                                                                                                       PB Install. Collect. Over. No.=FIELD(No.)));
                                                   CaptionML=[ENU=Credit Memo in Process (LCY);
                                                              NOR=Kreditnotaen behandles (NOK);
                                                              SVE=Kreditnotan behandlas (BVA)];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 220 ;   ;Credit Memo in Process;Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Sales Line".Amount WHERE (Document Type=CONST(Credit Memo),
                                                                                               Service Invoice=CONST(Yes),
                                                                                               PB Install. Collect. Over. No.=FIELD(No.)));
                                                   CaptionML=[ENU=Credit Memo in Process;
                                                              NOR=Kreditnotaen behandles;
                                                              SVE=Kreditnotan behandlas];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Price Book Code,Price Book Index Date,Service Contract No.,Service Order No. }
    {    ;Service Contract No.,Service Order No.   }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1100528601 : TextConst 'ENU=must occur before %1;NOR=m† inntreffe f›r %1;SVE=m†ste intr„ffa f”re %1';
      Text001@1100528600 : TextConst 'ENU=Installment Overviews already linked, changing not allowed';
      Text003@1100528603 : TextConst 'ENU=Service Order %1 will be included by invoicing Base Service Order %2';
      Text004@1100528604 : TextConst 'ENU=No Additional Approved Installment Overviews found';
      Text005@1100528605 : TextConst 'ENU=%1 Installment Overview(s) linked';
      Text006@1100528606 : TextConst 'ENU=No Linked Installment Overview available';

    LOCAL PROCEDURE DetermineStartingDate@1100528601();
    VAR
      PBCollectInstallOverview@1100528600 : Record 11072319;
    BEGIN
      PBCollectInstallOverview.SETFILTER("No.", '<>%1', "No.");
      PBCollectInstallOverview.SETRANGE("Price Book Code", "Price Book Code");
      PBCollectInstallOverview.SETRANGE("Price Book Index Date", "Price Book Index Date");
      PBCollectInstallOverview.SETRANGE("Service Order No.", "Service Order No.");
      PBCollectInstallOverview.SETFILTER("Seq. No.", '<%1', "Seq. No.");
      IF PBCollectInstallOverview.FINDLAST THEN
        IF PBCollectInstallOverview."Ending Date" > 0D THEN BEGIN
          VALIDATE("Starting Date", PBCollectInstallOverview."Ending Date" +1);
          IF FORMAT(PBCollectInstallOverview.Period) <> '' THEN
            VALIDATE(Period, PBCollectInstallOverview.Period);
      END;
    END;

    LOCAL PROCEDURE DetermineEndingDate@1100528606();
    BEGIN
      "Ending Date" := 0D;
      IF ("Starting Date" <> 0D) AND (FORMAT(Period) <> '') THEN
        VALIDATE("Ending Date", CALCDATE(Period, "Starting Date") -1);
    END;

    LOCAL PROCEDURE DetermineSeqNo@1100528605();
    VAR
      PBCollectInstallOverview@1100528600 : Record 11072319;
    BEGIN
      PBCollectInstallOverview.SETCURRENTKEY("Price Book Code");
      PBCollectInstallOverview.SETRANGE("Price Book Code", "Price Book Code");
      PBCollectInstallOverview.SETRANGE("Price Book Index Date", "Price Book Index Date");
      PBCollectInstallOverview.SETRANGE("Service Contract No.", "Service Contract No.");
      PBCollectInstallOverview.SETRANGE("Service Order No.", "Service Order No.");
      IF PBCollectInstallOverview.FINDLAST THEN
        "Seq. No." := PBCollectInstallOverview."Seq. No." +1
      ELSE
        "Seq. No." := 1;
    END;

    LOCAL PROCEDURE DetermineCustomerNo@1100528603();
    VAR
      ServiceContract@1100528600 : Record 11012812;
      ServiceOrder@1100528601 : Record 11012823;
    BEGIN
      CASE TRUE OF
        "Service Order No." <> '':
          BEGIN
            IF NOT ServiceOrder.GET("Service Order No.") THEN
              ServiceOrder.INIT;
            VALIDATE("Customer No.", ServiceOrder."Customer No.");
            VALIDATE("Bill-to Customer No.", ServiceOrder."Bill-to Customer No.");
          END;
        "Service Contract No." <> '':
          BEGIN
            IF NOT ServiceContract.GET("Service Contract No.") THEN
              ServiceContract.INIT;
            VALIDATE("Customer No.", ServiceContract."Customer No.");
            VALIDATE("Bill-to Customer No.", ServiceContract."Bill-to Customer No. (CP)");
          END;
      END;
    END;

    LOCAL PROCEDURE DeterminePriceBookInfo@1100528604();
    VAR
      ServiceContract@1100528600 : Record 11012812;
      ServiceOrderExtension@1100528602 : Record 11071727;
    BEGIN
      IF "Price Book Code" <> '' THEN
        EXIT;
      CASE TRUE OF
        "Service Order No." <> '':
          BEGIN
            ServiceOrderExtension.GetServOrderExtension("Service Order No.");
            ServiceOrderExtension.TESTFIELD("Price Book Code");
            VALIDATE("Price Book Code", ServiceOrderExtension."Price Book Code");
            VALIDATE("Price Book Index Date", ServiceOrderExtension."Price Book Index Date");
          END;
        "Service Contract No." <> '':
          BEGIN
            IF NOT ServiceContract.GET("Service Contract No.") THEN
              ServiceContract.INIT;
            ServiceContract.TESTFIELD("Price Book Code");
            VALIDATE("Price Book Code", ServiceContract."Price Book Code");
            VALIDATE("Price Book Index Date", ServiceContract."Price Book Index Date");
          END;
      END;
    END;

    LOCAL PROCEDURE CheckDates@1100528600();
    BEGIN
      IF ("Starting Date" = 0D) OR ("Ending Date" = 0D) THEN
        EXIT;
      IF "Starting Date" > "Ending Date" THEN
        FIELDERROR("Starting Date", STRSUBSTNO(Text000, FIELDCAPTION("Ending Date")));
      IF FORMAT(Period) <> '' THEN
        IF CALCDATE(Period, "Starting Date") -1 <> "Ending Date" THEN
          CLEAR(Period);
    END;

    LOCAL PROCEDURE HandleServiceContractLookup@1100528609();
    VAR
      ServiceContract@1100528601 : Record 11012812;
    BEGIN
      IF "Price Book Code" <> '' THEN BEGIN
        ServiceContract.SETRANGE("Price Book Code", "Price Book Code");
        ServiceContract.SETRANGE("Price Book Index Date", "Price Book Index Date");
      END ELSE BEGIN
        ServiceContract.SETFILTER("Price Book Code", '<>%1', '');
        ServiceContract.SETFILTER("Price Book Index Date", '<>%1', 0D);
      END;
      IF "Service Contract No." <> '' THEN
        ServiceContract.GET("Service Contract No.");
      IF PAGE.RUNMODAL(0, ServiceContract) = ACTION::LookupOK THEN
        VALIDATE("Service Contract No.", ServiceContract."No.");
    END;

    LOCAL PROCEDURE HandleServiceOrderLookup@1100528607();
    VAR
      ServiceOrder@1100528601 : Record 11012823;
      ServiceOrderExtension@1100528600 : Record 11071727;
    BEGIN
      ServiceOrder.SETCURRENTKEY("Service Contract No.");
      ServiceOrder.SETRANGE("Service Contract No.", "Service Contract No.");
      IF ServiceOrder.FINDSET THEN
        REPEAT
          ServiceOrderExtension.GetServOrderExtension(ServiceOrder."No.");
          IF (ServiceOrderExtension."Price Book Code" = "Price Book Code") AND
             (ServiceOrderExtension."Price Book Index Date" = "Price Book Index Date") AND
             (ServiceOrder."Settlement Method" = ServiceOrder."Settlement Method"::"Installment Overview by Service Order")
          THEN
            ServiceOrder.MARK(TRUE);
        UNTIL ServiceOrder.NEXT = 0;
      ServiceOrder.SETRANGE("Service Contract No.");
      ServiceOrder.MARKEDONLY(TRUE);
      ServiceOrder.SETCURRENTKEY("No.");
      IF PAGE.RUNMODAL(0, ServiceOrder) = ACTION::LookupOK THEN
        VALIDATE("Service Order No.", ServiceOrder."No.");
    END;

    PROCEDURE GetTotalSalesAmount@1100528608() : Decimal;
    VAR
      PBInstallmentOverview@1100528601 : Record 11072317;
      TotalSalesAmount@1100528602 : Decimal;
    BEGIN
      PBInstallmentOverview.SETRANGE("Install. Collect. Overview No.", "No.");
      IF PBInstallmentOverview.FINDSET THEN
        REPEAT
          TotalSalesAmount += PBInstallmentOverview.GetTotalSalesAmount;
        UNTIL PBInstallmentOverview.NEXT = 0;
      EXIT(TotalSalesAmount);
    END;

    LOCAL PROCEDURE CheckStatus@1100528610();
    BEGIN
      IF xRec.Status <> Status THEN BEGIN
        CASE Status OF
          Status::Offered,
          Status::Approved:
            BEGIN
              TESTFIELD("Service Contract No.");
              TESTFIELD("Bill-to Customer No.");
              TESTFIELD("Customer No.");
              TestIfAnyInstallmentOverviewsAreLinked;
            END;
          Status::Processed:
            IF CurrFieldNo = FIELDNO(Status) THEN
              FIELDERROR(Status)
            ELSE
              SetStatusLinkedInstallmentOverviewsToProcessed;
        END;
        IF (CurrFieldNo = FIELDNO(Status)) AND (xRec.Status = Status::Processed) AND (Status <> Status::Processed) THEN
          FIELDERROR(Status);
      END;
    END;

    PROCEDURE LinkInstallmentOverviews@1100528602();
    VAR
      PBInstallmentOverview@1100528600 : Record 11072317;
      NoOfInstallmentOverviewsLinked@1100528601 : Integer;
    BEGIN
      PBInstallmentOverview.SETRANGE("Price Book Code", "Price Book Code");
      PBInstallmentOverview.SETRANGE("Price Book Index Date", "Price Book Index Date");
      PBInstallmentOverview.SETRANGE("Service Contract No.", "Service Contract No.");
      PBInstallmentOverview.SETRANGE("Service Order No.", "Service Order No.");
      PBInstallmentOverview.SETRANGE("Customer No.", "Customer No.");
      PBInstallmentOverview.SETRANGE("Bill-to Customer No.", "Bill-to Customer No.");
      PBInstallmentOverview.SETRANGE("Install. Collect. Overview No.", '');
      PBInstallmentOverview.SETRANGE(Status, PBInstallmentOverview.Status::Approved);
      PBInstallmentOverview.SETRANGE("Starting Date", "Starting Date", "Ending Date");
      IF PBInstallmentOverview.FINDSET(TRUE) THEN
        REPEAT
          PBInstallmentOverview."Install. Collect. Overview No." := "No.";
          PBInstallmentOverview.MODIFY;
          NoOfInstallmentOverviewsLinked += 1;
        UNTIL PBInstallmentOverview.NEXT = 0;
      PBInstallmentOverview.SETRANGE("Ending Date", "Starting Date", "Ending Date");
      IF PBInstallmentOverview.FINDSET(TRUE) THEN
        REPEAT
          PBInstallmentOverview."Install. Collect. Overview No." := "No.";
          PBInstallmentOverview.MODIFY;
          NoOfInstallmentOverviewsLinked += 1;
        UNTIL PBInstallmentOverview.NEXT = 0;

      CASE NoOfInstallmentOverviewsLinked OF
        0:
          MESSAGE(Text004);
      ELSE
        MESSAGE(Text005, NoOfInstallmentOverviewsLinked);
      END;
    END;

    PROCEDURE TestIfNoLinesExist@1100528611();
    VAR
      PBInstallmentOverview@1100528600 : Record 11072317;
    BEGIN
      IF "No." = '' THEN
        EXIT;
      PBInstallmentOverview.SETRANGE("Install. Collect. Overview No.", "No.");
      IF PBInstallmentOverview.ISEMPTY THEN
        EXIT;
      ERROR(Text001);
    END;

    LOCAL PROCEDURE SetStatusLinkedInstallmentOverviewsToProcessed@1100528612();
    VAR
      PBInstallmentOverview@1100528601 : Record 11072317;
    BEGIN
      PBInstallmentOverview.SETRANGE("Install. Collect. Overview No.", "No.");
      IF PBInstallmentOverview.FINDSET(TRUE) THEN
        REPEAT
          PBInstallmentOverview.VALIDATE(Status, PBInstallmentOverview.Status::Processed);
          PBInstallmentOverview.MODIFY;
        UNTIL PBInstallmentOverview.NEXT = 0;
    END;

    PROCEDURE GetTotalAmountByType@1100528619(IValueKind@1100528600 : 'Price Book,Extra Declarations,Surcharges,All';IInstallmentOverviewType@1100528601 : 'Previous Overviews,Current,Upto Current Overview') : Decimal;
    VAR
      PBInstallCollectOverview@1100528605 : Record 11072319;
      PBInstallmentOverview@1100528604 : Record 11072317;
      PBInstallmentOverviewLine@1100528603 : Record 11072318;
      Total@1100528602 : Decimal;
    BEGIN
      IF IInstallmentOverviewType = IInstallmentOverviewType::Current THEN
        PBInstallCollectOverview.SETRANGE("No.", "No.")
      ELSE BEGIN
        PBInstallCollectOverview.SETCURRENTKEY("Price Book Code");
        PBInstallCollectOverview.SETRANGE("Price Book Code", "Price Book Code");
        PBInstallCollectOverview.SETRANGE("Price Book Index Date", "Price Book Index Date");
        PBInstallCollectOverview.SETRANGE("Service Contract No.", "Service Contract No.");
        PBInstallCollectOverview.SETRANGE("Service Order No.", "Service Order No.");
        PBInstallCollectOverview.SETRANGE("Customer No.", "Customer No.");
        PBInstallCollectOverview.SETRANGE("Bill-to Customer No.", "Bill-to Customer No.");
        IF IInstallmentOverviewType = IInstallmentOverviewType::"Previous Overviews" THEN
          PBInstallCollectOverview.SETFILTER("Seq. No.", '<%1', "Seq. No.")
        ELSE
          PBInstallCollectOverview.SETRANGE("Seq. No.", 0, "Seq. No.");
      END;
      IF PBInstallCollectOverview.FINDSET THEN
        REPEAT
          PBInstallmentOverview.SETRANGE("Install. Collect. Overview No.", PBInstallCollectOverview."No.");
          IF PBInstallmentOverview.FINDSET THEN
            REPEAT
              PBInstallmentOverviewLine.SETRANGE("Installment Overview No.", PBInstallmentOverview."No.");
              PBInstallmentOverviewLine.SETRANGE("Installm. Over. Seq.No. Filter", 0, PBInstallmentOverview."Seq. No." -1);
              CASE IValueKind OF
                IValueKind::"Price Book":
                  PBInstallmentOverviewLine.SETFILTER("Line Type", '%1|%2|%3',
                    PBInstallmentOverviewLine."Line Type"::Initial,
                    PBInstallmentOverviewLine."Line Type"::Uncoded,
                    PBInstallmentOverviewLine."Line Type"::Administrative);
                IValueKind::"Extra Declarations":
                  PBInstallmentOverviewLine.SETRANGE("Line Type", PBInstallmentOverviewLine."Line Type"::"Extra Declarations");
                IValueKind::Surcharges:
                  PBInstallmentOverviewLine.SETRANGE("Line Type", PBInstallmentOverviewLine."Line Type"::Surcharge);
                IValueKind::All:;
              END;
              PBInstallmentOverviewLine.CALCSUMS("Overview Amount");
              Total += PBInstallmentOverviewLine."Overview Amount";
            UNTIL PBInstallmentOverview.NEXT = 0;
        UNTIL PBInstallCollectOverview.NEXT = 0;
      EXIT(Total);
    END;

    PROCEDURE GetTotalProcessedQuantity@1100528613(IUnitPriceCode@1100528600 : Code[20]) : Decimal;
    VAR
      PBInstallmentOverview@1100528603 : Record 11072317;
      PBInstallmentOverviewLine@1100528602 : Record 11072318;
    BEGIN
      PBInstallmentOverview.SETRANGE("Install. Collect. Overview No.", "No.");
      IF PBInstallmentOverview.FINDLAST THEN
        REPEAT
          IF PBInstallmentOverviewLine.GET(PBInstallmentOverview."No.", IUnitPriceCode) THEN BEGIN
            PBInstallmentOverviewLine.SETFILTER("Installm. Over. Seq.No. Filter", '<%1', PBInstallmentOverview."Seq. No.");
            PBInstallmentOverviewLine.CALCFIELDS("Previous Processed Quantity");
            EXIT(PBInstallmentOverviewLine."Previous Processed Quantity");
          END;
        UNTIL PBInstallmentOverview.NEXT(-1) = 0;
    END;

    PROCEDURE GetAmountinclOverview@1100528614(IUnitPriceCode@1100528600 : Code[20]) : Decimal;
    VAR
      PBInstallmentOverview@1100528603 : Record 11072317;
      PBInstallmentOverviewLine@1100528602 : Record 11072318;
    BEGIN
      PBInstallmentOverview.SETRANGE("Install. Collect. Overview No.", "No.");
      IF PBInstallmentOverview.FINDLAST THEN
        REPEAT
          IF PBInstallmentOverviewLine.GET(PBInstallmentOverview."No.", IUnitPriceCode) THEN BEGIN
            PBInstallmentOverviewLine.SETFILTER("Installm. Over. Seq.No. Filter", '<%1', PBInstallmentOverview."Seq. No.");
            PBInstallmentOverviewLine.CALCFIELDS("Amount incl. Previous Overview");
            EXIT(PBInstallmentOverviewLine."Amount incl. Previous Overview" + PBInstallmentOverviewLine."Overview Amount");
          END;
        UNTIL PBInstallmentOverview.NEXT(-1) = 0;
    END;

    PROCEDURE GetPaidAmount@1100409008() : Decimal;
    VAR
      ServiceLedgerEntry@1100409001 : Record 11012819;
      GenericTempTable@1100409002 : TEMPORARY Record 11020579;
      CustLedgerEntry@1100409003 : Record 21;
      Currency@1100528600 : Record 4;
      PercPaid@1100409004 : Decimal;
      Paid@1100409005 : Decimal;
    BEGIN
      GenericTempTable.DELETEALL;

      ServiceLedgerEntry.SETRANGE("PB Install. Collect. Over. No.", "No.");
      ServiceLedgerEntry.SETRANGE("Revenue Present", TRUE);
      ServiceLedgerEntry.SETFILTER("Document Type", '%1|%2', ServiceLedgerEntry."Document Type"::"Sales Invoice", ServiceLedgerEntry."Document Type"::"Sales Credit Memo");
      IF ServiceLedgerEntry.FINDSET THEN BEGIN
        REPEAT
          IF NOT GenericTempTable.GET(ServiceLedgerEntry."Document No.") THEN BEGIN
            GenericTempTable.INIT;
            GenericTempTable."Key Code1" := ServiceLedgerEntry."Document No.";
            GenericTempTable.Dec1 := ServiceLedgerEntry."Total Revenue (LCY)";
            GenericTempTable.INSERT;
          END ELSE BEGIN
            GenericTempTable.Dec1 += ServiceLedgerEntry."Total Revenue (LCY)";
            GenericTempTable.MODIFY;
          END;
        UNTIL ServiceLedgerEntry.NEXT = 0;
      END;

      Currency.InitRoundingPrecision;
      IF GenericTempTable.FINDFIRST THEN BEGIN
        REPEAT
          CustLedgerEntry.SETCURRENTKEY("Document No.");
          CustLedgerEntry.SETRANGE("Document No.", GenericTempTable."Key Code1");
          CustLedgerEntry.SETFILTER("Document Type", '%1|%2', CustLedgerEntry."Document Type"::Invoice, CustLedgerEntry."Document Type"::"Credit Memo");
          IF CustLedgerEntry.FINDFIRST THEN BEGIN
            CustLedgerEntry.CALCFIELDS("Amount (LCY)", "Remaining Amt. (LCY)");
            IF CustLedgerEntry."Amount (LCY)" <> 0 THEN BEGIN
              PercPaid := (-1 * GenericTempTable.Dec1) / CustLedgerEntry."Amount (LCY)";
              Paid += ROUND((PercPaid * (CustLedgerEntry."Amount (LCY)" - CustLedgerEntry."Remaining Amt. (LCY)")), Currency."Amount Rounding Precision");
            END;
          END;
        UNTIL GenericTempTable.NEXT = 0;
      END;

      EXIT(-Paid);
    END;

    LOCAL PROCEDURE TestIfAnyInstallmentOverviewsAreLinked@1100528615();
    VAR
      PBInstallmentOverview@1100528600 : Record 11072317;
    BEGIN
      PBInstallmentOverview.SETRANGE("Install. Collect. Overview No.", "No.");
      IF PBInstallmentOverview.ISEMPTY THEN
        ERROR(Text006);
    END;

    BEGIN
    END.
  }
}

