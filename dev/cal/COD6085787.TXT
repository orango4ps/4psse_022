OBJECT Codeunit 6085787 DC Workflow Setup
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=DCW19.00.00.5.00;
  }
  PROPERTIES
  {
    EventSubscriberInstance=Static-Automatic;
    OnRun=VAR
            WorkflowSetup@1000 : Codeunit 1502;
          BEGIN
            DeleteExistingTemplates;
            WorkflowSetup.InitWorkflow;
            InitWorkflow;
          END;

  }
  CODE
  {
    VAR
      ApprovalRequestCanceledMsg@1010 : TextConst 'DEU=Die Genehmigungsanforderung fÅr den Datensatz wurde storniert.;ENU=The approval request for the record has been canceled.;NLD=Het goedkeuringsverzoek is geannuleerd.;NOR=Godkjenningsforespõrselen for posten er annullert.;SVE=GodkÑnnandebegÑran fîr posten har avbrutits.';
      DocReleasedTxt@1016 : TextConst 'DEU=Der Beleg wurde freigegeben.;ENU=The document was released.;NLD=Het document is vrijgegeven.';
      DocCaptCategoryDescTxt@1001 : TextConst 'DEU=Continia Document Capture;ENU=Continia Document Capture;NLD=Continia Document Capture';
      InvalidEventCondErr@1011 : TextConst 'DEU=Es sind keine Ereignisbedingungen angegeben.;ENU=No event conditions are specified.;NLD=Er zijn geen gebeurtenisvoorwaarden opgegeven.;NOR=Ingen vilkÜr for hendelse er angitt.;SVE=Inga hÑndelsevillkor har angetts.';
      PendingApprovalsCondnTxt@1013 : TextConst 'DEU="<?xml version=""1.0"" encoding=""utf-8"" standalone=""yes""?><ReportParameters><DataItems><DataItem name=""Approval Entry"">%1</DataItem></DataItems></ReportParameters>";ENU="<?xml version=""1.0"" encoding=""utf-8"" standalone=""yes""?><ReportParameters><DataItems><DataItem name=""Approval Entry"">%1</DataItem></DataItems></ReportParameters>";NLD="<?xml version=""1.0"" encoding=""utf-8"" standalone=""yes""?><ReportParameters><DataItems><DataItem name=""Approval Entry"">%1</DataItem></DataItems></ReportParameters>";NOR="<?xml version=""1.0"" encoding=""utf-8"" standalone=""yes""?><ReportParameters><DataItems><DataItem name=""Approval Entry"">%1</DataItem></DataItems></ReportParameters>";SVE="<?xml version=""1.0"" encoding=""utf-8"" standalone=""yes""?><ReportParameters><DataItems><DataItem name=""Approval Entry"">%1</DataItem></DataItems></ReportParameters>"';
      PurchHeaderTypeCondnTxt@1012 : TextConst
        'DEU="<?xml version=""1.0"" encoding=""utf-8"" standalone=""yes""?><ReportParameters><DataItems><DataItem name=""Purchase Header"">%1</DataItem><DataItem name=""Purchase Line"">%2</DataItem></DataItems></ReportParameters>"',
        'ENU="<?xml version=""1.0"" encoding=""utf-8"" standalone=""yes""?><ReportParameters><DataItems><DataItem name=""Purchase Header"">%1</DataItem><DataItem name=""Purchase Line"">%2</DataItem></DataItems></ReportParameters>"',
        'NLD="<?xml version=""1.0"" encoding=""utf-8"" standalone=""yes""?><ReportParameters><DataItems><DataItem name=""Purchase Header"">%1</DataItem><DataItem name=""Purchase Line"">%2</DataItem></DataItems></ReportParameters>"',
        'NOR="<?xml version=""1.0"" encoding=""utf-8"" standalone=""yes""?><ReportParameters><DataItems><DataItem name=""Purchase Header"">%1</DataItem><DataItem name=""Purchase Line"">%2</DataItem></DataItems></ReportParameters>"',
        'SVE="<?xml version=""1.0"" encoding=""utf-8"" standalone=""yes""?><ReportParameters><DataItems><DataItem name=""Purchase Header"">%1</DataItem><DataItem name=""Purchase Line"">%2</DataItem></DataItems></ReportParameters>"';
      PurchCredMemoApprWorkflowDescTxt@1021 : TextConst 'DEU=Genehmigungsworkflow Einkaufsgutschrift;ENU=Purchase Credit Memo Approval Workflow;NLD=Goedkeuringswerkstroom inkoopcreditnota;NOR=Arbeidsflyt for godkjenning av kjõpskreditnota;SVE=Arbetsflîde fîr godkÑnnande av inkîpskreditnota';
      PurchCredMemoAdvApprWorkflowDescTxt@1020 : TextConst 'DEU=Kaufgutschrift erweiterter Genehmigungs-Workflow;ENU=Purchase Credit Memo Advanced Approval Workflow;NLD=Geavanceerde goedkeuringswerkstroom inkoopcreditnota';
      PurchCredMemoForceApprWorkflowDescTxt@1019 : TextConst 'DEU=Kaufgutschrift Genehmigungs-Workflow erzwingen;ENU=Purchase Credit Memo Force Approval Workflow;NLD=Forceer goedkeuringswerkstroom inkoopcreditnota';
      PurchInvoiceApprWorkflowDescTxt@1002 : TextConst 'DEU=Workflow Einkaufsrechnungsgenehmigung;ENU=Purchase Invoice Approval Workflow;NLD=Goedkeuringswerkstroom inkoopfactuur;NOR=Arbeidsflyt for kjõpsfakturagodkjenning;SVE=Arbetsflîde fîr godkÑnnande av inkîpsfaktura';
      PurchInvoiceAdvApprWorkflowDescTxt@1003 : TextConst 'DEU=Einkaufsrechnung erweiterter Genehmigungs-Workflow;ENU=Purchase Invoice Advanced Approval Workflow;NLD=Geavanceerde goedkeuringswerkstroom inkoopfactuur';
      WorkflowEventHandling@1008 : Codeunit 1520;
      DCWorkflowEventHandling@1014 : Codeunit 6085785;
      DCWorkflowResponseHandling@1015 : Codeunit 6085786;
      WorkflowResponseHandling@1009 : Codeunit 1521;
      BlankDateFormula@1007 : DateFormula;
      PurchInvoiceForceApprWorkflowDescTxt@1017 : TextConst 'DEU=Kaufrechnung Genehmigungs-Workflow erzwingen;ENU=Purchase Invoice Force Approval Workflow;NLD=Forceer goedkeuringswerkstroom inkoopfactuur';

    PROCEDURE InitWorkflow@23();
    BEGIN
      InsertWorkflowCategories();
      InsertWorkflowTemplates();
    END;

    LOCAL PROCEDURE InsertEntryPointEventStep@51(Workflow@1000 : Record 1501;FunctionName@1001 : Code[128]) : Integer;
    VAR
      WorkflowStep@1003 : Record 1502;
    BEGIN
      InsertStep(WorkflowStep,Workflow.Code,WorkflowStep.Type::"Event",FunctionName);
      WorkflowStep.VALIDATE("Entry Point",TRUE);
      WorkflowStep.MODIFY(TRUE);
      EXIT(WorkflowStep.ID);
    END;

    PROCEDURE InsertWorkflowCategories@126();
    BEGIN
      InsertWorkflowCategory('CONTINIADC',DocCaptCategoryDescTxt);
    END;

    LOCAL PROCEDURE InsertWorkflowCategory@118(Code@1000 : Code[20];Description@1001 : Text[100]);
    VAR
      WorkflowCategory@1002 : Record 1508;
    BEGIN
      WorkflowCategory.INIT;
      WorkflowCategory.Code := Code;
      WorkflowCategory.Description := Description;
      IF WorkflowCategory.INSERT THEN;
    END;

    LOCAL PROCEDURE InsertWorkflowTemplates@24();
    VAR
      Workflow@1000 : Record 1501;
    BEGIN
      Workflow.SETRANGE(Template,TRUE);

      IF Workflow.ISEMPTY THEN
        EXIT;

      InsertDCPurchaseCreditMemoApprovalWorkflowTemplate;
      InsertDCPurchaseCreditMemoAdvApprovalWorkflowTemplate;
      InsertDCPurchaseCreditMemoForceApprovalWorkflowTemplate;
      InsertDCPurchaseInvoiceApprovalWorkflowTemplate;
      InsertDCPurchaseInvoiceAdvApprovalWorkflowTemplate;
      InsertDCPurchaseInvoiceForceApprovalWorkflowTemplate;
    END;

    LOCAL PROCEDURE InsertDCPurchaseCreditMemoApprovalWorkflowTemplate@32();
    VAR
      Workflow@1000 : Record 1501;
      PurchaseHeader@1001 : Record 38;
    BEGIN
      IF NOT InsertWorkflowTemplate(Workflow,PurchaseCreditMemoApprovalWorkflowCode,PurchCredMemoApprWorkflowDescTxt,'CONTINIADC') THEN
        EXIT;
      InsertPurchaseInvoiceApprovalWorkflowDetails(Workflow,PurchaseHeader."Document Type"::"Credit Memo");
      MarkWorkflowAsTemplate(Workflow);
    END;

    LOCAL PROCEDURE InsertDCPurchaseCreditMemoAdvApprovalWorkflowTemplate@31();
    VAR
      Workflow@1000 : Record 1501;
      PurchaseHeader@1001 : Record 38;
    BEGIN
      IF NOT InsertWorkflowTemplate(Workflow,PurchaseCreditMemoAdvApprovalWorkflowCode,PurchCredMemoAdvApprWorkflowDescTxt,'CONTINIADC') THEN
        EXIT;
      InsertPurchaseInvoiceAdvApprovalWorkflowDetails(Workflow,PurchaseHeader."Document Type"::"Credit Memo");
      MarkWorkflowAsTemplate(Workflow);
    END;

    LOCAL PROCEDURE InsertDCPurchaseCreditMemoForceApprovalWorkflowTemplate@29();
    VAR
      Workflow@1000 : Record 1501;
      PurchaseHeader@1001 : Record 38;
    BEGIN
      IF NOT InsertWorkflowTemplate(Workflow,'PCMFAW',PurchCredMemoForceApprWorkflowDescTxt,'CONTINIADC') THEN
        EXIT;
      InsertPurchaseForceApprovalWorkflowDetails(Workflow,PurchaseHeader."Document Type"::"Credit Memo");
      MarkWorkflowAsTemplate(Workflow);
    END;

    LOCAL PROCEDURE InsertDCPurchaseInvoiceApprovalWorkflowTemplate@2();
    VAR
      Workflow@1000 : Record 1501;
      PurchaseHeader@1001 : Record 38;
    BEGIN
      IF NOT InsertWorkflowTemplate(Workflow,PurchaseInvoiceApprovalWorkflowCode,PurchInvoiceApprWorkflowDescTxt,'CONTINIADC') THEN
        EXIT;
      InsertPurchaseInvoiceApprovalWorkflowDetails(Workflow,PurchaseHeader."Document Type"::Invoice);
      MarkWorkflowAsTemplate(Workflow);
    END;

    LOCAL PROCEDURE InsertDCPurchaseInvoiceAdvApprovalWorkflowTemplate@3();
    VAR
      Workflow@1000 : Record 1501;
      PurchaseHeader@1001 : Record 38;
    BEGIN
      IF NOT InsertWorkflowTemplate(Workflow,PurchaseInvoiceAdvApprovalWorkflowCode,PurchInvoiceAdvApprWorkflowDescTxt,'CONTINIADC') THEN
        EXIT;
      InsertPurchaseInvoiceAdvApprovalWorkflowDetails(Workflow,PurchaseHeader."Document Type"::Invoice);
      MarkWorkflowAsTemplate(Workflow);
    END;

    LOCAL PROCEDURE InsertDCPurchaseInvoiceForceApprovalWorkflowTemplate@6();
    VAR
      Workflow@1000 : Record 1501;
      PurchaseHeader@1001 : Record 38;
    BEGIN
      IF NOT InsertWorkflowTemplate(Workflow,'PIFAW',PurchInvoiceForceApprWorkflowDescTxt,'CONTINIADC') THEN
        EXIT;
      InsertPurchaseForceApprovalWorkflowDetails(Workflow,PurchaseHeader."Document Type"::Invoice);
      MarkWorkflowAsTemplate(Workflow);
    END;

    PROCEDURE InsertPurchaseDocumentApprovalWorkflow@69(VAR Workflow@1001 : Record 1501;DocumentType@1002 : Option;ApproverType@1004 : Option;LimitType@1005 : Option;WorkflowUserGroupCode@1006 : Code[20];DueDateFormula@1003 : DateFormula);
    VAR
      PurchaseHeader@1000 : Record 38;
      WorkflowStepArgument@1007 : Record 1523;
    BEGIN
      CASE DocumentType OF
        PurchaseHeader."Document Type"::Invoice:
          InsertWorkflow(
            Workflow,GetWorkflowCode(PurchaseInvoiceApprovalWorkflowCode),PurchInvoiceApprWorkflowDescTxt,'CONTINIADC');
        PurchaseHeader."Document Type"::"Credit Memo":
          InsertWorkflow(Workflow,GetWorkflowCode(PurchaseCreditMemoApprovalWorkflowCode),
            PurchCredMemoApprWorkflowDescTxt,'CONTINIADC');
        ELSE
          EXIT;
      END;

      PopulateWorkflowStepArgument(WorkflowStepArgument,ApproverType,LimitType,0,
        WorkflowUserGroupCode,DueDateFormula,TRUE);

      InsertDocApprovalWorkflowSteps(Workflow,
        BuildPurchHeaderTypeConditions(DocumentType,PurchaseHeader.Status::Open),
        WorkflowEventHandling.RunWorkflowOnSendPurchaseDocForApprovalCode,
        BuildPurchHeaderTypeConditions(DocumentType,PurchaseHeader.Status::"Pending Approval"),
        WorkflowEventHandling.RunWorkflowOnCancelPurchaseApprovalRequestCode,
        DCWorkflowEventHandling.RunWorkflowOnSendBackApprovalRequestCode,
        DCWorkflowEventHandling.RunWorkflowOnApproveAndDelegateRequestCode,
        DCWorkflowEventHandling.RunWorkflowOnDelegateWithoutApprovalRequestCode,
        DCWorkflowEventHandling.RunWorkflowOnDelegateAndSendBackRequestCode,
        WorkflowStepArgument,TRUE);
    END;

    PROCEDURE InsertPurchaseDocumentForceApprovalWorkflow@16(VAR Workflow@1001 : Record 1501;DocumentType@1002 : Option);
    VAR
      PurchaseHeader@1000 : Record 38;
      WorkflowStepArgument@1007 : Record 1523;
    BEGIN
      CASE DocumentType OF
        PurchaseHeader."Document Type"::Invoice:
          InsertWorkflow(
            Workflow,GetWorkflowCode('PIFAW'),PurchInvoiceForceApprWorkflowDescTxt,'CONTINIADC');
        PurchaseHeader."Document Type"::"Credit Memo":
          InsertWorkflow(Workflow,GetWorkflowCode('PCMFAW'),
            PurchCredMemoForceApprWorkflowDescTxt,'CONTINIADC');
        ELSE
          EXIT;
      END;

      InsertPurchaseForceApprovalWorkflowDetails(Workflow,DocumentType);
    END;

    PROCEDURE InsertAdvPurchaseDocumentApprovalWorkflow@15(VAR Workflow@1001 : Record 1501;DocumentType@1002 : Option);
    VAR
      PurchaseHeader@1000 : Record 38;
      WorkflowStepArgument@1007 : Record 1523;
    BEGIN
      CASE DocumentType OF
        PurchaseHeader."Document Type"::Invoice:
          InsertWorkflow(
            Workflow,GetWorkflowCode('PIFAW'),PurchInvoiceAdvApprWorkflowDescTxt,'CONTINIADC');
        PurchaseHeader."Document Type"::"Credit Memo":
          InsertWorkflow(Workflow,GetWorkflowCode('PCMFAW'),
            PurchCredMemoAdvApprWorkflowDescTxt,'CONTINIADC');
        ELSE
          EXIT;
      END;

      InsertPurchaseInvoiceAdvApprovalWorkflowDetails(Workflow,DocumentType);
    END;

    LOCAL PROCEDURE InsertWorkflowTemplate@52(VAR Workflow@1003 : Record 1501;WorkflowCode@1001 : Code[17];WorkflowDescription@1002 : Text[100];CategoryCode@1000 : Code[20]) : Boolean;
    BEGIN
      Workflow.INIT;
      Workflow.Code := GetWorkflowTemplateCode(WorkflowCode);
      Workflow.Description := WorkflowDescription;
      Workflow.Category := CategoryCode;
      Workflow.Enabled := FALSE;
      EXIT(Workflow.INSERT);
    END;

    LOCAL PROCEDURE InsertWorkflow@80(VAR Workflow@1003 : Record 1501;WorkflowCode@1001 : Code[20];WorkflowDescription@1002 : Text[100];CategoryCode@1000 : Code[20]);
    BEGIN
      Workflow.INIT;
      Workflow.Code := WorkflowCode;
      Workflow.Description := WorkflowDescription;
      Workflow.Category := CategoryCode;
      Workflow.Enabled := FALSE;
      Workflow.INSERT;
    END;

    LOCAL PROCEDURE InsertPurchaseInvoiceAdvApprovalWorkflowDetails@17(VAR Workflow@1001 : Record 1501;DocumentType@1002 : Integer);
    VAR
      PurchaseHeader@1000 : Record 38;
      WorkflowStepArgument@1003 : Record 1523;
    BEGIN
      InsertAdvDocApprovalWorkflowSteps(Workflow,
        BuildPurchHeaderTypeConditions(DocumentType,PurchaseHeader.Status::Open),
        WorkflowEventHandling.RunWorkflowOnSendPurchaseDocForApprovalCode,
        BuildPurchHeaderTypeConditions(DocumentType,PurchaseHeader.Status::"Pending Approval"),
        WorkflowEventHandling.RunWorkflowOnCancelPurchaseApprovalRequestCode,
        DCWorkflowEventHandling.RunWorkflowOnSendBackApprovalRequestCode,
        DCWorkflowEventHandling.RunWorkflowOnApproveAndDelegateRequestCode,
        DCWorkflowEventHandling.RunWorkflowOnDelegateWithoutApprovalRequestCode,
        DCWorkflowEventHandling.RunWorkflowOnDelegateAndSendBackRequestCode,
        TRUE);
    END;

    LOCAL PROCEDURE InsertPurchaseInvoiceApprovalWorkflowDetails@91(VAR Workflow@1001 : Record 1501;DocumentType@1002 : Integer);
    VAR
      PurchaseHeader@1000 : Record 38;
      WorkflowStepArgument@1003 : Record 1523;
    BEGIN
      PopulateWorkflowStepArgument(WorkflowStepArgument,
        WorkflowStepArgument."Approver Type"::"Salesperson/Purchaser",WorkflowStepArgument."Approver Limit Type"::"Approver Chain",
        0,'',BlankDateFormula,TRUE);

      InsertDocApprovalWorkflowSteps(Workflow,
        BuildPurchHeaderTypeConditions(DocumentType,PurchaseHeader.Status::Open),
        WorkflowEventHandling.RunWorkflowOnSendPurchaseDocForApprovalCode,
        BuildPurchHeaderTypeConditions(DocumentType,PurchaseHeader.Status::"Pending Approval"),
        WorkflowEventHandling.RunWorkflowOnCancelPurchaseApprovalRequestCode,
        DCWorkflowEventHandling.RunWorkflowOnSendBackApprovalRequestCode,
        DCWorkflowEventHandling.RunWorkflowOnApproveAndDelegateRequestCode,
        DCWorkflowEventHandling.RunWorkflowOnDelegateWithoutApprovalRequestCode,
        DCWorkflowEventHandling.RunWorkflowOnDelegateAndSendBackRequestCode,
        WorkflowStepArgument,TRUE);
    END;

    LOCAL PROCEDURE InsertPurchaseForceApprovalWorkflowDetails@8(VAR Workflow@1001 : Record 1501;DocumentType@1002 : Integer);
    VAR
      PurchaseHeader@1000 : Record 38;
      WorkflowStepArgument@1003 : Record 1523;
    BEGIN
      PopulateWorkflowStepArgument(WorkflowStepArgument,
        WorkflowStepArgument."Approver Type"::"Salesperson/Purchaser",WorkflowStepArgument."Approver Limit Type"::"Direct Approver",
        0,'',BlankDateFormula,TRUE);

      InsertForceApprovalWorkflowSteps(Workflow,
        BuildPurchHeaderTypeConditions(DocumentType,PurchaseHeader.Status::Open));
    END;

    PROCEDURE InsertAdvDocApprovalWorkflowSteps@21(Workflow@1003 : Record 1501;DocSendForApprovalConditionString@1006 : Text;DocSendForApprovalEventCode@1001 : Code[128];DocCanceledConditionString@1009 : Text;DocCanceledEventCode@1004 : Code[128];DocSendBackEventCode@1007 : Code[128];DocDelegatedWithApprovalEventCode@1021 : Code[128];DocDelegatedWithoutApprovalEventCode@1024 : Code[128];DocDelegatedAndSendBackEventCode@1027 : Code[128];ShowConfirmationMessage@1019 : Boolean);
    VAR
      WorkflowStepArgument@1000 : Record 1523;
      SentForApprovalEventID@1010 : Integer;
      SetStatusToPendingApprovalResponseID@1002 : Integer;
      CreateApprovalRequestResponseID@1012 : Integer;
      SendApprovalRequestResponseID@1013 : Integer;
      "-- Approve"@1046 : Integer;
      OnRequestApprovedEventID@1016 : Integer;
      OnAfterApproveResponseID2@1048 : Integer;
      SendApprovalRequestResponseID2@1017 : Integer;
      "-- Approval Complete"@1047 : Integer;
      OnAdvApprWFCompleteEventID@1045 : Integer;
      OpenDocumentResponseID@1015 : Integer;
      ShowMessageResponseID@1011 : Integer;
      "-- Reject"@1014 : Integer;
      OnRequestRejectedEventID@1018 : Integer;
      RejectAllApprovalsResponseID@1020 : Integer;
      "-- Send Back"@1030 : Integer;
      OnSendBackEventID@1028 : Integer;
      SendBackResponseID@1029 : Integer;
      OpenApprovalCommentsResponseID@1031 : Integer;
      ReturnToInitialStateID1@1032 : Integer;
      "-- DelegateAndSendBack"@1033 : Integer;
      OnDelegateAndSendBackEventID@1034 : Integer;
      DelegateAndSendBackResponseID@1036 : Integer;
      ReturnToInitialStateID2@1037 : Integer;
      "-- Cancel Request"@1035 : Integer;
      OnRequestCanceledEventID@1022 : Integer;
      CancelAllApprovalsResponseID@1023 : Integer;
      "-- Approve And Delegate"@1038 : Integer;
      OnApproveAndDelegateEventID@1039 : Integer;
      ApproveAndDelegateResponseID@1040 : Integer;
      SendApprovalRequestResponseID4@1041 : Integer;
      ReturnToInitialStateID3@1042 : Integer;
      "-- Delegate Without Approval"@1043 : Integer;
      OnRequestDelegatedEventID@1025 : Integer;
      SentApprovalRequestResponseID3@1026 : Integer;
      ReturnToInitialStateID4@1044 : Integer;
      RestrictRecordUsageResponseID@1005 : Integer;
      AllowRecordUsageResponseID@1008 : Integer;
    BEGIN
      SentForApprovalEventID := InsertEntryPointEventStep(Workflow,DocSendForApprovalEventCode);
      InsertEventArgument(SentForApprovalEventID,DocSendForApprovalConditionString);
        RestrictRecordUsageResponseID := InsertResponseStep(Workflow,WorkflowResponseHandling.RestrictRecordUsageCode,SentForApprovalEventID);
        SetStatusToPendingApprovalResponseID := InsertResponseStep(Workflow,WorkflowResponseHandling.SetStatusToPendingApprovalCode,RestrictRecordUsageResponseID);
        CreateApprovalRequestResponseID := InsertResponseStep(Workflow,DCWorkflowResponseHandling.CreateApprovalRequestDCCode,SetStatusToPendingApprovalResponseID);
        InsertApprovalArgument(CreateApprovalRequestResponseID,
          WorkflowStepArgument."Approver Type"::Approver,WorkflowStepArgument."Approver Limit Type",TRUE,
          WorkflowStepArgument."Workflow User Group Code",WorkflowStepArgument."Due Date Formula",ShowConfirmationMessage);
        SendApprovalRequestResponseID := InsertResponseStep(Workflow,WorkflowResponseHandling.SendApprovalRequestForApprovalCode,CreateApprovalRequestResponseID);
        InsertNotificationArgument(SendApprovalRequestResponseID,'',0,'');

      OnRequestApprovedEventID := InsertEventStep(Workflow,WorkflowEventHandling.RunWorkflowOnApproveApprovalRequestCode,SendApprovalRequestResponseID);
        OnAfterApproveResponseID2 := InsertResponseStep(Workflow,DCWorkflowResponseHandling.OnAfterApproveApprovalRequestCode,OnRequestApprovedEventID);
        InsertApprovalArgument(OnAfterApproveResponseID2,
          WorkflowStepArgument."Approver Type"::"Workflow User Group",WorkflowStepArgument."Approver Limit Type",TRUE,
          WorkflowStepArgument."Workflow User Group Code",WorkflowStepArgument."Due Date Formula",ShowConfirmationMessage);

          OnAdvApprWFCompleteEventID := InsertEventStep(Workflow,DCWorkflowEventHandling.RunWorkflowOnAfterApproveAdvancedAppRequestCode,OnAfterApproveResponseID2);
            InsertEventArgument(OnAdvApprWFCompleteEventID,BuildPendingApprovalsConditions);
            SendApprovalRequestResponseID2 := InsertResponseStep(Workflow,WorkflowResponseHandling.SendApprovalRequestForApprovalCode,OnAdvApprWFCompleteEventID);
            SetNextStep(Workflow,SendApprovalRequestResponseID2,SendApprovalRequestResponseID); // Return to previous step.

          OnAdvApprWFCompleteEventID := InsertEventStep(Workflow,DCWorkflowEventHandling.RunWorkflowOnAfterApproveAdvancedAppRequestCode,OnAfterApproveResponseID2);
            InsertEventArgument(OnAdvApprWFCompleteEventID,BuildNoPendingApprovalsConditions);
            AllowRecordUsageResponseID := InsertResponseStep(Workflow,WorkflowResponseHandling.AllowRecordUsageCode,OnAdvApprWFCompleteEventID);
            OpenDocumentResponseID := InsertResponseStep(Workflow,WorkflowResponseHandling.ReleaseDocumentCode,AllowRecordUsageResponseID);
            ShowMessageResponseID := InsertResponseStep(Workflow,WorkflowResponseHandling.ShowMessageCode,OpenDocumentResponseID);
            InsertMessageArgument(ShowMessageResponseID,DocReleasedTxt);

      OnRequestRejectedEventID := InsertEventStep(Workflow,WorkflowEventHandling.RunWorkflowOnRejectApprovalRequestCode,SendApprovalRequestResponseID);
        RejectAllApprovalsResponseID := InsertResponseStep(Workflow,WorkflowResponseHandling.RejectAllApprovalRequestsCode,OnRequestRejectedEventID);
        InsertNotificationArgument(RejectAllApprovalsResponseID,'',WorkflowStepArgument."Link Target Page",'');
        InsertResponseStep(Workflow,WorkflowResponseHandling.OpenDocumentCode,RejectAllApprovalsResponseID);

      OnSendBackEventID := InsertEventStep(Workflow,DocSendBackEventCode,SendApprovalRequestResponseID);
        SendBackResponseID := InsertResponseStep(Workflow,DCWorkflowResponseHandling.SendBackApprovalRequestDCCode,OnSendBackEventID);
        OpenApprovalCommentsResponseID := InsertResponseStep(Workflow,WorkflowResponseHandling.GetApprovalCommentCode,SendBackResponseID);
        ReturnToInitialStateID1 := InsertResponseStep(Workflow,DCWorkflowResponseHandling.ReturnToInitialStateCode,OpenApprovalCommentsResponseID);

      OnDelegateAndSendBackEventID := InsertEventStep(Workflow,DocDelegatedAndSendBackEventCode,SendApprovalRequestResponseID);
        DelegateAndSendBackResponseID := InsertResponseStep(Workflow,DCWorkflowResponseHandling.DelegateAndSendBackRequestCode,OnDelegateAndSendBackEventID);
        ReturnToInitialStateID2 := InsertResponseStep(Workflow,DCWorkflowResponseHandling.ReturnToInitialStateCode,DelegateAndSendBackResponseID);

      OnRequestCanceledEventID := InsertEventStep(Workflow,DocCanceledEventCode,SendApprovalRequestResponseID);
        InsertEventArgument(OnRequestCanceledEventID,DocCanceledConditionString);
        CancelAllApprovalsResponseID := InsertResponseStep(Workflow,WorkflowResponseHandling.CancelAllApprovalRequestsCode,OnRequestCanceledEventID);
        InsertNotificationArgument(CancelAllApprovalsResponseID,'',WorkflowStepArgument."Link Target Page",'');
        AllowRecordUsageResponseID := InsertResponseStep(Workflow,WorkflowResponseHandling.AllowRecordUsageCode,CancelAllApprovalsResponseID);
        OpenDocumentResponseID := InsertResponseStep(Workflow,WorkflowResponseHandling.OpenDocumentCode,AllowRecordUsageResponseID);
        ShowMessageResponseID := InsertResponseStep(Workflow,WorkflowResponseHandling.ShowMessageCode,OpenDocumentResponseID);
        InsertMessageArgument(ShowMessageResponseID,ApprovalRequestCanceledMsg);

      OnApproveAndDelegateEventID := InsertEventStep(Workflow,DocDelegatedWithApprovalEventCode,SendApprovalRequestResponseID);
        ApproveAndDelegateResponseID := InsertResponseStep(Workflow,DCWorkflowResponseHandling.ApproveAndDelegateRequestCode,OnApproveAndDelegateEventID);
        SendApprovalRequestResponseID4 := InsertResponseStep(Workflow,WorkflowResponseHandling.SendApprovalRequestForApprovalCode,ApproveAndDelegateResponseID);
        ReturnToInitialStateID3 := InsertResponseStep(Workflow,DCWorkflowResponseHandling.ReturnToInitialStateCode,SendApprovalRequestResponseID4);

      OnRequestDelegatedEventID := InsertEventStep(Workflow,DCWorkflowEventHandling.RunWorkflowOnDelegateWithoutApprovalRequestCode,SendApprovalRequestResponseID);
        SentApprovalRequestResponseID3 := InsertResponseStep(Workflow,DCWorkflowResponseHandling.DelegateWithoutApprovalRequestCode,OnRequestDelegatedEventID);
        ReturnToInitialStateID4 := InsertResponseStep(Workflow,DCWorkflowResponseHandling.ReturnToInitialStateCode,SentApprovalRequestResponseID3);
    END;

    PROCEDURE InsertDocApprovalWorkflowSteps@7(Workflow@1003 : Record 1501;DocSendForApprovalConditionString@1006 : Text;DocSendForApprovalEventCode@1001 : Code[128];DocCanceledConditionString@1009 : Text;DocCanceledEventCode@1004 : Code[128];DocSendBackEventCode@1007 : Code[128];DocDelegatedWithApprovalEventCode@1021 : Code[128];DocDelegatedWithoutApprovalEventCode@1024 : Code[128];DocDelegatedAndSendBackEventCode@1027 : Code[128];WorkflowStepArgument@1000 : Record 1523;ShowConfirmationMessage@1019 : Boolean);
    VAR
      SentForApprovalEventID@1010 : Integer;
      SetStatusToPendingApprovalResponseID@1002 : Integer;
      CreateApprovalRequestResponseID@1012 : Integer;
      SendApprovalRequestResponseID@1013 : Integer;
      "-- Pending Approvals : 0"@1045 : Integer;
      OnAllRequestsApprovedEventID@1014 : Integer;
      OnAfterApproveResponseID@1047 : Integer;
      "-- Pending Approvals > 0"@1046 : Integer;
      OnRequestApprovedEventID@1016 : Integer;
      OnAfterApproveResponseID2@1048 : Integer;
      SendApprovalRequestResponseID2@1017 : Integer;
      OnRequestRejectedEventID@1018 : Integer;
      RejectAllApprovalsResponseID@1020 : Integer;
      "-- Send Back"@1030 : Integer;
      OnSendBackEventID@1028 : Integer;
      SendBackResponseID@1029 : Integer;
      OpenApprovalCommentsResponseID@1031 : Integer;
      ReturnToInitialStateID1@1032 : Integer;
      "-- DelegateAndSendBack"@1033 : Integer;
      OnDelegateAndSendBackEventID@1034 : Integer;
      DelegateAndSendBackRepsponseID@1036 : Integer;
      ReturnToInitialStateID2@1037 : Integer;
      "-- Cancel Request"@1035 : Integer;
      OnRequestCanceledEventID@1022 : Integer;
      CancelAllApprovalsResponseID@1023 : Integer;
      "-- Approve And Delegate"@1038 : Integer;
      OnApproveAndDelegateEventID@1039 : Integer;
      ApproveAndDelegateResponseID@1040 : Integer;
      SendApprovalRequestResponseID4@1041 : Integer;
      ReturnToInitialStateID3@1042 : Integer;
      "-- Delegate Without Approval"@1043 : Integer;
      OnRequestDelegatedEventID@1025 : Integer;
      SentApprovalRequestResponseID3@1026 : Integer;
      ReturnToInitialStateID4@1044 : Integer;
      RestrictRecordUsageResponseID@1005 : Integer;
      AllowRecordUsageResponseID@1008 : Integer;
      OpenDocumentResponceID@1011 : Integer;
      ShowMessageResponseID@1015 : Integer;
    BEGIN
      SentForApprovalEventID := InsertEntryPointEventStep(Workflow,DocSendForApprovalEventCode);
      InsertEventArgument(SentForApprovalEventID,DocSendForApprovalConditionString);
        RestrictRecordUsageResponseID := InsertResponseStep(Workflow,WorkflowResponseHandling.RestrictRecordUsageCode,SentForApprovalEventID);
        SetStatusToPendingApprovalResponseID := InsertResponseStep(Workflow,WorkflowResponseHandling.SetStatusToPendingApprovalCode,RestrictRecordUsageResponseID);
        CreateApprovalRequestResponseID := InsertResponseStep(Workflow,DCWorkflowResponseHandling.CreateApprovalRequestDCCode,SetStatusToPendingApprovalResponseID);
        InsertApprovalArgument(CreateApprovalRequestResponseID,
          WorkflowStepArgument."Approver Type",WorkflowStepArgument."Approver Limit Type",FALSE,
          WorkflowStepArgument."Workflow User Group Code",WorkflowStepArgument."Due Date Formula",ShowConfirmationMessage);
        SendApprovalRequestResponseID := InsertResponseStep(Workflow,WorkflowResponseHandling.SendApprovalRequestForApprovalCode,CreateApprovalRequestResponseID);
        InsertNotificationArgument(SendApprovalRequestResponseID,'',0,'');

      OnAllRequestsApprovedEventID := InsertEventStep(Workflow,WorkflowEventHandling.RunWorkflowOnApproveApprovalRequestCode,SendApprovalRequestResponseID);
      InsertEventArgument(OnAllRequestsApprovedEventID,BuildNoPendingApprovalsConditions);
        OnAfterApproveResponseID := InsertResponseStep(Workflow,DCWorkflowResponseHandling.OnAfterApproveApprovalRequestCode,OnAllRequestsApprovedEventID);
        AllowRecordUsageResponseID := InsertResponseStep(Workflow,WorkflowResponseHandling.AllowRecordUsageCode,OnAfterApproveResponseID);
        InsertResponseStep(Workflow,WorkflowResponseHandling.ReleaseDocumentCode,AllowRecordUsageResponseID);

      OnRequestApprovedEventID := InsertEventStep(Workflow,WorkflowEventHandling.RunWorkflowOnApproveApprovalRequestCode,SendApprovalRequestResponseID);
      InsertEventArgument(OnRequestApprovedEventID,BuildPendingApprovalsConditions);
        OnAfterApproveResponseID2 := InsertResponseStep(Workflow,DCWorkflowResponseHandling.OnAfterApproveApprovalRequestCode,OnRequestApprovedEventID);
        SendApprovalRequestResponseID2 := InsertResponseStep(Workflow,WorkflowResponseHandling.SendApprovalRequestForApprovalCode,OnAfterApproveResponseID2);
        SetNextStep(Workflow,SendApprovalRequestResponseID2,SendApprovalRequestResponseID);

      OnRequestRejectedEventID := InsertEventStep(Workflow,WorkflowEventHandling.RunWorkflowOnRejectApprovalRequestCode,SendApprovalRequestResponseID);
        RejectAllApprovalsResponseID := InsertResponseStep(Workflow,WorkflowResponseHandling.RejectAllApprovalRequestsCode,OnRequestRejectedEventID);
        InsertNotificationArgument(RejectAllApprovalsResponseID,'',WorkflowStepArgument."Link Target Page",'');
        InsertResponseStep(Workflow,WorkflowResponseHandling.OpenDocumentCode,RejectAllApprovalsResponseID);

      OnSendBackEventID := InsertEventStep(Workflow,DocSendBackEventCode,SendApprovalRequestResponseID);
        SendBackResponseID := InsertResponseStep(Workflow,DCWorkflowResponseHandling.SendBackApprovalRequestDCCode,OnSendBackEventID);
        OpenApprovalCommentsResponseID := InsertResponseStep(Workflow,WorkflowResponseHandling.GetApprovalCommentCode,SendBackResponseID);
        ReturnToInitialStateID1 := InsertResponseStep(Workflow,DCWorkflowResponseHandling.ReturnToInitialStateCode,OpenApprovalCommentsResponseID);

      OnDelegateAndSendBackEventID := InsertEventStep(Workflow,DocDelegatedAndSendBackEventCode,SendApprovalRequestResponseID);
        DelegateAndSendBackRepsponseID := InsertResponseStep(Workflow,DCWorkflowResponseHandling.DelegateAndSendBackRequestCode,OnDelegateAndSendBackEventID);
        ReturnToInitialStateID2 := InsertResponseStep(Workflow,DCWorkflowResponseHandling.ReturnToInitialStateCode,DelegateAndSendBackRepsponseID);

      OnRequestCanceledEventID := InsertEventStep(Workflow,DocCanceledEventCode,SendApprovalRequestResponseID);
        InsertEventArgument(OnRequestCanceledEventID,DocCanceledConditionString);
        CancelAllApprovalsResponseID := InsertResponseStep(Workflow,WorkflowResponseHandling.CancelAllApprovalRequestsCode,OnRequestCanceledEventID);
        InsertNotificationArgument(CancelAllApprovalsResponseID,'',WorkflowStepArgument."Link Target Page",'');
        AllowRecordUsageResponseID := InsertResponseStep(Workflow,WorkflowResponseHandling.AllowRecordUsageCode,CancelAllApprovalsResponseID);
        OpenDocumentResponceID := InsertResponseStep(Workflow,WorkflowResponseHandling.OpenDocumentCode,AllowRecordUsageResponseID);
        ShowMessageResponseID := InsertResponseStep(Workflow,WorkflowResponseHandling.ShowMessageCode,OpenDocumentResponceID);
        InsertMessageArgument(ShowMessageResponseID,ApprovalRequestCanceledMsg);

      OnApproveAndDelegateEventID := InsertEventStep(Workflow,DocDelegatedWithApprovalEventCode,SendApprovalRequestResponseID);
        ApproveAndDelegateResponseID := InsertResponseStep(Workflow,DCWorkflowResponseHandling.ApproveAndDelegateRequestCode,OnApproveAndDelegateEventID);
        SendApprovalRequestResponseID4 := InsertResponseStep(Workflow,WorkflowResponseHandling.SendApprovalRequestForApprovalCode,ApproveAndDelegateResponseID);
        ReturnToInitialStateID3 := InsertResponseStep(Workflow,DCWorkflowResponseHandling.ReturnToInitialStateCode,SendApprovalRequestResponseID4);

      OnRequestDelegatedEventID := InsertEventStep(Workflow,DCWorkflowEventHandling.RunWorkflowOnDelegateWithoutApprovalRequestCode,SendApprovalRequestResponseID);
        SentApprovalRequestResponseID3 := InsertResponseStep(Workflow,DCWorkflowResponseHandling.DelegateWithoutApprovalRequestCode,OnRequestDelegatedEventID);
        ReturnToInitialStateID4 := InsertResponseStep(Workflow,DCWorkflowResponseHandling.ReturnToInitialStateCode,SentApprovalRequestResponseID3);
    END;

    PROCEDURE InsertForceApprovalWorkflowSteps@9(Workflow@1003 : Record 1501;DocSendForApprovalConditionString@1002 : Text);
    VAR
      ForceApprovalEventID@1000 : Integer;
      ForceApprovalResponseID@1001 : InStream;
    BEGIN
      ForceApprovalEventID := InsertEntryPointEventStep(Workflow,DCWorkflowEventHandling.RunWorkflowOnPurchDocForceApproveApprovalRequestCode);
      InsertEventArgument(ForceApprovalEventID,DocSendForApprovalConditionString);
        InsertResponseStep(Workflow,DCWorkflowResponseHandling.ForceApproveApprovalRequestDCCode,ForceApprovalEventID);
    END;

    LOCAL PROCEDURE InsertApprovalArgument@44(WorkflowStepID@1000 : Integer;ApproverType@1009 : Option;ApproverLimitType@1010 : Option;AdvancedApproval@6085573 : Boolean;WorkflowUserGroupCode@1002 : Code[20];DueDateFormula@1003 : DateFormula;ShowConfirmationMessage@1004 : Boolean);
    VAR
      WorkflowStepArgument@1001 : Record 1523;
    BEGIN
      InsertStepArgument(WorkflowStepArgument,WorkflowStepID);

      WorkflowStepArgument."Approver Type" := ApproverType;
      WorkflowStepArgument."Approver Limit Type" := ApproverLimitType;
      WorkflowStepArgument."Advanced Approval" := AdvancedApproval;
      WorkflowStepArgument."Workflow User Group Code" := WorkflowUserGroupCode;
      WorkflowStepArgument."Due Date Formula" := DueDateFormula;
      WorkflowStepArgument."Show Confirmation Message" := ShowConfirmationMessage;
      WorkflowStepArgument.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE InsertEventStep@12(Workflow@1000 : Record 1501;FunctionName@1001 : Code[128];PreviousStepID@1002 : Integer) : Integer;
    VAR
      WorkflowStep@1003 : Record 1502;
    BEGIN
      InsertStep(WorkflowStep,Workflow.Code,WorkflowStep.Type::"Event",FunctionName);
      WorkflowStep."Sequence No." := GetSequenceNumber(Workflow,PreviousStepID);
      WorkflowStep.VALIDATE("Previous Workflow Step ID",PreviousStepID);
      WorkflowStep.MODIFY(TRUE);
      EXIT(WorkflowStep.ID);
    END;

    LOCAL PROCEDURE InsertEventArgument@41(WorkflowStepID@1000 : Integer;EventConditions@1008 : Text);
    VAR
      WorkflowStep@1001 : Record 1502;
      WorkflowStepArgument@1002 : Record 1523;
    BEGIN
      IF EventConditions = '' THEN
        ERROR(InvalidEventCondErr);

      WorkflowStepArgument.Type := WorkflowStepArgument.Type::"Event";
      WorkflowStepArgument.INSERT(TRUE);
      WorkflowStepArgument.SetEventFilters(EventConditions);

      WorkflowStep.SETRANGE(ID,WorkflowStepID);
      WorkflowStep.FINDFIRST;
      WorkflowStep.Argument := WorkflowStepArgument.ID;
      WorkflowStep.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE InsertNotificationArgument@42(WorkflowStepID@1000 : Integer;NotifUserID@1004 : Code[50];LinkTargetPage@1007 : Integer;CustomLink@1003 : Text[250]);
    VAR
      WorkflowStepArgument@1001 : Record 1523;
    BEGIN
      InsertStepArgument(WorkflowStepArgument,WorkflowStepID);

      WorkflowStepArgument."Notification User ID" := NotifUserID;
      WorkflowStepArgument."Link Target Page" := LinkTargetPage;
      WorkflowStepArgument."Custom Link" := CustomLink;
      WorkflowStepArgument.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE InsertResponseStep@13(Workflow@1001 : Record 1501;FunctionName@1000 : Code[128];PreviousStepID@1002 : Integer) : Integer;
    VAR
      WorkflowStep@1003 : Record 1502;
    BEGIN
      InsertStep(WorkflowStep,Workflow.Code,WorkflowStep.Type::Response,FunctionName);
      WorkflowStep."Sequence No." := GetSequenceNumber(Workflow,PreviousStepID);
      WorkflowStep.VALIDATE("Previous Workflow Step ID",PreviousStepID);
      WorkflowStep.MODIFY(TRUE);
      EXIT(WorkflowStep.ID);
    END;

    LOCAL PROCEDURE InsertStep@30(VAR WorkflowStep@1000 : Record 1502;WorkflowCode@1001 : Code[20];StepType@1003 : Option;FunctionName@1002 : Code[128]);
    BEGIN
      WITH WorkflowStep DO BEGIN
        VALIDATE("Workflow Code",WorkflowCode);
        VALIDATE(Type,StepType);
        VALIDATE("Function Name",FunctionName);
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE InsertStepArgument@19(VAR WorkflowStepArgument@1003 : Record 1523;WorkflowStepID@1000 : Integer);
    VAR
      WorkflowStep@1002 : Record 1502;
    BEGIN
      WorkflowStep.SETRANGE(ID,WorkflowStepID);
      WorkflowStep.FINDFIRST;

      IF WorkflowStepArgument.GET(WorkflowStep.Argument) THEN
        EXIT;

      WorkflowStepArgument.Type := WorkflowStepArgument.Type::Response;
      WorkflowStepArgument.VALIDATE("Response Function Name",WorkflowStep."Function Name");
      WorkflowStepArgument.INSERT(TRUE);

      WorkflowStep.Argument := WorkflowStepArgument.ID;
      WorkflowStep.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE InsertMessageArgument@14(WorkflowStepID@1000 : Integer;Message@1002 : Text[250]);
    VAR
      WorkflowStepArgument@1001 : Record 1523;
    BEGIN
      InsertStepArgument(WorkflowStepArgument,WorkflowStepID);

      WorkflowStepArgument.Message := Message;
      WorkflowStepArgument.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SetNextStep@34(Workflow@1003 : Record 1501;WorkflowStepID@1001 : Integer;NextStepID@1000 : Integer);
    VAR
      WorkflowStep@1002 : Record 1502;
    BEGIN
      WorkflowStep.GET(Workflow.Code,WorkflowStepID);
      WorkflowStep.VALIDATE("Next Workflow Step ID",NextStepID);
      WorkflowStep.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE PopulateWorkflowStepArgument@5(VAR WorkflowStepArgument@1005 : Record 1523;ApproverType@1004 : Option;ApproverLimitType@1003 : Option;ApprovalEntriesPage@1002 : Integer;WorkflowUserGroupCode@1001 : Code[20];DueDateFormula@1000 : DateFormula;ShowConfirmationMessage@1006 : Boolean);
    BEGIN
      WorkflowStepArgument.INIT;
      WorkflowStepArgument.Type := WorkflowStepArgument.Type::Response;
      WorkflowStepArgument."Approver Type" := ApproverType;
      WorkflowStepArgument."Approver Limit Type" := ApproverLimitType;
      WorkflowStepArgument."Workflow User Group Code" := WorkflowUserGroupCode;
      WorkflowStepArgument."Due Date Formula" := DueDateFormula;
      WorkflowStepArgument."Link Target Page" := ApprovalEntriesPage;
      WorkflowStepArgument."Show Confirmation Message" := ShowConfirmationMessage;
    END;

    PROCEDURE BuildPurchHeaderTypeConditions@64(DocumentType@1002 : Option;Status@1003 : Option) : Text;
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
    BEGIN
      PurchaseHeader.SETRANGE("Document Type",DocumentType);
      PurchaseHeader.SETRANGE(Status,Status);
      EXIT(STRSUBSTNO(PurchHeaderTypeCondnTxt,Encode(PurchaseHeader.GETVIEW(FALSE)),Encode(PurchaseLine.GETVIEW(FALSE))));
    END;

    LOCAL PROCEDURE BuildNoPendingApprovalsConditions@56() : Text;
    VAR
      ApprovalEntry@1000 : Record 454;
    BEGIN
      ApprovalEntry.SETRANGE("Pending Approvals",0);
      EXIT(STRSUBSTNO(PendingApprovalsCondnTxt,Encode(ApprovalEntry.GETVIEW(FALSE))));
    END;

    LOCAL PROCEDURE BuildPendingApprovalsConditions@61() : Text;
    VAR
      ApprovalEntry@1000 : Record 454;
    BEGIN
      ApprovalEntry.SETFILTER("Pending Approvals",'>%1',0);
      EXIT(STRSUBSTNO(PendingApprovalsCondnTxt,Encode(ApprovalEntry.GETVIEW(FALSE))));
    END;

    LOCAL PROCEDURE MarkWorkflowAsTemplate@74(VAR Workflow@1000 : Record 1501);
    BEGIN
      Workflow.VALIDATE(Template,TRUE);
      Workflow.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE Encode@93(Text@1001 : Text) : Text;
    VAR
      XMLDOMManagement@1000 : Codeunit 6224;
    BEGIN
      EXIT(XMLDOMManagement.XMLEscape(Text));
    END;

    LOCAL PROCEDURE GetSequenceNumber@22(Workflow@1001 : Record 1501;PreviousStepID@1002 : Integer) : Integer;
    VAR
      WorkflowStep@1000 : Record 1502;
    BEGIN
      WorkflowStep.SETRANGE("Workflow Code",Workflow.Code);
      WorkflowStep.SETRANGE("Previous Workflow Step ID",PreviousStepID);
      IF WorkflowStep.FINDLAST THEN
        EXIT(WorkflowStep."Sequence No." + 1);
    END;

    LOCAL PROCEDURE GetWorkflowCode@55(WorkflowCode@1000 : Text) : Code[20];
    VAR
      Workflow@1001 : Record 1501;
    BEGIN
      EXIT(COPYSTR(FORMAT(Workflow.COUNT + 1) + '-' + WorkflowCode,1,MAXSTRLEN(Workflow.Code)));
    END;

    PROCEDURE GetWorkflowTemplateCode@84(WorkflowCode@1000 : Code[17]) : Code[20];
    BEGIN
      EXIT('DC-' + WorkflowCode);
    END;

    LOCAL PROCEDURE DeleteExistingTemplates@4();
    VAR
      Workflow@1002 : Record 1501;
      WorkflowStep@1001 : Record 1502;
      WorkflowStepArgument@1000 : Record 1523;
    BEGIN
      Workflow.SETRANGE(Template,TRUE);
      Workflow.SETRANGE(Category,'CONTINIADC');
      IF Workflow.FINDSET THEN REPEAT
        WorkflowStep.SETRANGE("Workflow Code",Workflow.Code);
        IF WorkflowStep.FINDSET THEN REPEAT
          WorkflowStepArgument.SETRANGE(ID,WorkflowStep.Argument);
          WorkflowStepArgument.DELETEALL;
        UNTIL WorkflowStep.NEXT = 0;
        WorkflowStep.DELETEALL;
      UNTIL Workflow.NEXT = 0;
      Workflow.DELETEALL;
    END;

    [EventSubscriber(Page,1500,OnOpenPageEvent,"",Skip,Skip)]
    LOCAL PROCEDURE WorkflowsOnOpenPage@1();
    BEGIN
      InitWorkflow;
    END;

    [EventSubscriber(Page,1505,OnOpenPageEvent,"",Skip,Skip)]
    LOCAL PROCEDURE WorkflowTemplatesOnOpenPage@20(VAR Rec@1000 : Record 1500);
    BEGIN
      InitWorkflow;
    END;

    PROCEDURE PurchaseInvoiceApprovalWorkflowCode@6085573() : Code[10];
    BEGIN
      EXIT('PIW');
    END;

    PROCEDURE PurchaseCreditMemoApprovalWorkflowCode@6085574() : Code[10];
    BEGIN
      EXIT('PCMW');
    END;

    PROCEDURE PurchaseInvoiceAdvApprovalWorkflowCode@6085576() : Code[10];
    BEGIN
      EXIT('PIAW');
    END;

    PROCEDURE PurchaseCreditMemoAdvApprovalWorkflowCode@6085575() : Code[10];
    BEGIN
      EXIT('PCMAW');
    END;

    BEGIN
    END.
  }
}

