OBJECT Codeunit 11012875 Import IBIS-Trad XML Service
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ProjSetup@1210190000 : Record 315;
      ServOrder@1210190010 : Record 11012823;
      DimValRec@1210190007 : Record 349;
      AdmiRec@1210190009 : Record 11012390;
      BudgetLine@1210190017 : Record 11012875;
      TmpProjRateRec@1210190019 : TEMPORARY Record 11020231;
      XMLDOMMgt@1100409003 : Codeunit 11020220;
      XMLFormat@1100409002 : Codeunit 11020221;
      DimMgt@1100409001 : Codeunit 408;
      CmtWithQuantities@1100409007 : Boolean;
      ExternalLineNo@1100409015 : Integer;
      LastProcessedExternLineNo@1100409014 : Integer;
      MaxLenBudgDescr@1100409012 : Integer;
      SurchPercQuan@1100409010 : Decimal;
      SurchPercLabor@1100409009 : Decimal;
      SurchPercMaterial@1100409008 : Decimal;
      SurchPercPlant@1100409004 : Decimal;
      SurchPercSubc@1100409000 : Decimal;
      ServOrderNo@1100409005 : Code[20];
      AdmiGenCde@1210190005 : Code[10];
      AdmiLaborCde@1210190004 : Code[10];
      AdmiMatCde@1210190003 : Code[10];
      AdmiPlntCde@1210190002 : Code[10];
      AdmiSubCde@1210190001 : Code[10];
      MeansCde@1210190006 : Code[20];
      TenderCde@1210190008 : Code[20];
      RecordType@1210190014 : Code[3];
      SttCde@1210190028 : Code[5];
      MidID@1210190020 : Text[30];
      MaxDescription@1210190037 : Text[1024];
      Text001@1210190027 : TextConst 'DEU=Zeile nicht codiert fÅr Kostenart %1;ENU=Line not coded for cost type %1;NLD=Regel niet afgecodeerd voor kostensoort %1;NOR=Rad er ikke kodet for kostnadstype %1;SVE=Rad inte kodad fîr kostnadstyp %1';
      Text004@1210190026 : TextConst 'DEU=KostentrÑger %1 nicht vorhanden fÅr Kostenart %2;ENU=Cost Object %1 not present for Cost Type %2;NLD=Kostendrager %1 niet aanwezig voor kostensoort %2;NOR=Costnadsobjekt %1 er ikke tilstede for kostnadstype %2;SVE=Kostnadsobjekt %1 finns inte fîr kostnadstypen %2';
      Text011@1210190023 : TextConst 'DEU=Kostenart %1 stimmt nicht Åberein mit KostentrÑger %2;ENU=Cost type %1 does not match Cost Object %2;NLD=Kostensoort %1 komt niet overeen met Kostendrager %2;NOR=Kostnadstype %1 matcher ikke kostnadsobjekt %2;SVE=Kostnadstypen %1 matchar inte kostnadsobjektet %2';
      Text013@1210190012 : TextConst 'DEU=KostentrÑger %1 ist gesperrt worden;ENU=Cost Object %1 is blocked;NLD=Kostendrager %1 is geblokkeerd;NOR=Kostrnadsobjekt %1 er blokkert;SVE=Kostnadsobjekt %1 Ñr blockerad';
      Text100@1210190018 : TextConst 'DEU=externe Zeilennr. %1;ENU=External Line No. %1;NLD=extern regelnr. %1;NOR=Ekstern rad nr. %1;SVE=Externt radnr %1';
      Text106@1210190051 : TextConst 'DEU=%1 %2 stimmt nicht mit importiertem Betrag %3 Åberein;ENU=%1 %2 does not match imported amount %3;NLD=%1 %2 komt niet overeen met ingelezen bedrag %3';
      Text999@1210190053 : TextConst 'DEU=%1 %2 nicht vorhanden;ENU=%1 %2 not present;NLD=%1 %2 niet aanwezig;NOR=%1 %2 finnes ikke;SVE=%1 %2 finns inte';

    PROCEDURE SetSelections@1(ServiceOrderNo@11012000 : Code[20]);
    BEGIN
      ServOrderNo := ServiceOrderNo;
    END;

    PROCEDURE ProcessFile@1100485001(VAR ITempBlob@1100485002 : TEMPORARY Record 99008535);
    VAR
      XMLDoc@1100485000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      XMLDoc := XMLDoc.XmlDocument;
      XMLDOMMgt.LoadXMLFromBlob(XMLDoc, ITempBlob, TRUE);
      ParseMessage(XMLDoc);
    END;

    LOCAL PROCEDURE ParseMessage@1100485000(XMLDocIn@1100525001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") : Boolean;
    VAR
      RootNode@1100485007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      LineNodeList@1100525003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      LineNode@1100525002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      I@1100525000 : Integer;
    BEGIN
      ProjSetup.GET;
      ServOrder.GET(ServOrderNo);
      MaxLenBudgDescr := MAXSTRLEN(BudgetLine.Description);
      RootNode := XMLDocIn.DocumentElement;

      // Create hour codes
      XMLDOMMgt.FindNodes(RootNode,'ulb',LineNodeList);
      IF NOT ISNULL(LineNodeList) THEN
        FOR I := 0 TO (LineNodeList.Count - 1) DO BEGIN
          LineNode := LineNodeList.Item(I);
          CreateRateTable(LineNode);
        END;

      // Process stu lines
      XMLDOMMgt.FindNodes(RootNode,'stu',LineNodeList);
      IF NOT ISNULL(LineNodeList) THEN
        FOR I := 0 TO (LineNodeList.Count - 1) DO BEGIN
          LineNode := LineNodeList.Item(I);
          ProcessSTULine(LineNode);
        END;

      // Check end total
      XMLDOMMgt.FindNodes(RootNode,'bgr',LineNodeList);
      IF NOT ISNULL(LineNodeList) THEN
        FOR I := 0 TO (LineNodeList.Count - 1) DO BEGIN
          LineNode := LineNodeList.Item(I);
          CheckTotals(LineNode);
        END;
    END;

    LOCAL PROCEDURE ProcessSTULine@1210190008(LineNode@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      ELTElement@1210190001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      KTPElement@1210190003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      CMTElement@1210190004 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      LineID@1210190002 : Code[20];
    BEGIN
      RecordType := XMLDOMMgt.FindNodeText(LineNode,'tpe');
      LineID := XMLDOMMgt.FindNodeText(LineNode, 'rglid');
      XMLFormat.EvaluateInteger(XMLDOMMgt.FindNodeText(LineNode,'rglnr'),ExternalLineNo);

      CASE RecordType OF
        'ELT':
          BEGIN
            XMLDOMMgt.FindNode(LineNode.ParentNode, STRSUBSTNO('elt[eltid="%1"]', LineID), ELTElement);
            SttCde := XMLDOMMgt.FindNodeText(ELTElement,'stt');
            ProcessELTLine(ELTElement);
          END;
        'KTP':
          BEGIN
            XMLDOMMgt.FindNode(LineNode.ParentNode, STRSUBSTNO('ktp[ktpid="%1"]', LineID), KTPElement);
            ProcessKTPLine(KTPElement);
          END;
        'CMT':
          BEGIN
            XMLDOMMgt.FindNode(LineNode.ParentNode, STRSUBSTNO('cmt[cmtid="%1"]', LineID), CMTElement);
            SttCde := XMLDOMMgt.FindNodeText(CMTElement,'stt');
            IF CheckSttCode() THEN
              ProcessCMTLine(CMTElement);
          END
      END;
    END;

    LOCAL PROCEDURE ProcessELTLine@1210190000(LineNode@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    BEGIN
      InitBudgetLine(LineNode);
      BudgetLine."Cost Type" := BudgetLine."Cost Type"::Sundry;
      MaxDescription := XMLDOMMgt.FindNodeText(LineNode,'oms');
      BudgetLine."Unit of Measure" := XMLDOMMgt.FindNodeText(LineNode,'enh');
      BudgetLine.Description := COPYSTR(MaxDescription, 1, MaxLenBudgDescr);
      IF BudgetLine.Description <> '' THEN BEGIN
        CheckUnitOfMeasure(BudgetLine);
        CreateBudgetLine(0,0,0);
      END;

      IF STRLEN(MaxDescription) > MaxLenBudgDescr THEN
        CreateLongDescriptionLines;

      LastProcessedExternLineNo := ExternalLineNo;
    END;

    LOCAL PROCEDURE ProcessCMTLine@1210190007(LineNode@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    BEGIN
      InitBudgetLine(LineNode);
      BudgetLine."Cost Type" := BudgetLine."Cost Type"::Sundry;
      IF CmtWithQuantities THEN BEGIN
        MidID := XMLDOMMgt.FindNodeText(LineNode,'midid');
        MaxDescription := XMLDOMMgt.FindNodeText(LineNode,'../mid[midid="' + MidID + '"]/oms');
        BudgetLine."Unit of Measure" := XMLDOMMgt.FindNodeText(LineNode,'../mid[midid="' + MidID + '"]/enh');
      END ELSE
        MaxDescription := XMLDOMMgt.FindNodeText(LineNode,'txt');

      BudgetLine.Description := COPYSTR(MaxDescription, 1, MaxLenBudgDescr);
      CheckUnitOfMeasure(BudgetLine);

      CreateBudgetLine(0,0,0);
      LastProcessedExternLineNo := ExternalLineNo;

      IF STRLEN(MaxDescription) > MaxLenBudgDescr THEN
        CreateLongDescriptionLines;
    END;

    LOCAL PROCEDURE ProcessKTPLine@1100525001(LineNode@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      BudgetRate@1210190001 : Record 11012000;
      Norm@1100525003 : Decimal;
      Rate@1100525004 : Decimal;
      MaterialPrice@1100525005 : Decimal;
      PlantPrice@1100525006 : Decimal;
      SubcontractingPrice@1100525007 : Decimal;
      RateCode@1210190000 : Code[10];
    BEGIN
      SttCde := XMLDOMMgt.FindNodeText(LineNode,'stt');
      IF NOT CheckSttCode() THEN
        EXIT;

      IF RecordType = 'CMT' THEN BEGIN  // RecordType is changed because of STT
        ProcessCMTLine(LineNode);
        EXIT;
      END;

      MidID := XMLDOMMgt.FindNodeText(LineNode,'midid');

      InitBudgetLine(LineNode);

      XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(LineNode,'../mid[midid="' + MidID + '"]/uurnrm'),Norm);
      MaxDescription := XMLDOMMgt.FindNodeText(LineNode,'../mid[midid="' + MidID + '"]/oms');

      BudgetLine.Description := COPYSTR(MaxDescription, 1, MaxLenBudgDescr);
      CheckUnitOfMeasure(BudgetLine);

      //create labor budget line
      IF Norm <> 0 THEN BEGIN
        RateCode := XMLDOMMgt.FindNodeText(LineNode,'../mid[midid="' + MidID + '"]/ulncde');
        IF TmpProjRateRec.GET(ServOrderNo, RateCode, 0D) THEN
          Rate := TmpProjRateRec."Rate (LCY)"
        ELSE
          Rate := 0;
        IF RateCode <> '' THEN BEGIN
          BudgetRate.SETRANGE(Code, RateCode);
          BudgetRate.SETRANGE("Starting Date", 0D, TODAY);
          BudgetRate.SETFILTER("Ending Date",'%1|>=%2',0D, TODAY);
          IF BudgetRate.ISEMPTY THEN
            StoreMessage(BudgetLine.Description, STRSUBSTNO(Text999, BudgetLine.FIELDCAPTION("Rate Code"), RateCode));
        END;
        Rate := SurchPercLabor * Rate;
        BudgetLine."Cost Type" := BudgetLine."Cost Type"::Labor;
        BudgetLine."Cost Object" := FillCostObject(BudgetLine."Cost Type");
        BudgetLine."Cost Component" := DefaultCostComponent(BudgetLine."Cost Object");  //**31683.n
        IF RateCode <> '' THEN
          BudgetLine."Rate Code" := RateCode;
        CreateBudgetLine(Norm,Rate,0);
      END;
      BudgetLine."Rate Code" := '';

      //create material budget line
      XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(LineNode,'../mid[midid="' + MidID + '"]/enhprsmta'),MaterialPrice);
      IF MaterialPrice <> 0 THEN BEGIN
        MaterialPrice := SurchPercMaterial * MaterialPrice;
        BudgetLine."Cost Type" := BudgetLine."Cost Type"::Material;
        BudgetLine."Cost Object" := FillCostObject(BudgetLine."Cost Type");
        BudgetLine."Cost Component" := DefaultCostComponent(BudgetLine."Cost Object");  //**31683.n
        CreateBudgetLine(0,0,MaterialPrice);
      END;

      //create plant budget line
      XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(LineNode,'../mid[midid="' + MidID + '"]/enhprsmte'),PlantPrice);
      IF PlantPrice <> 0 THEN BEGIN
        PlantPrice := SurchPercPlant * PlantPrice;
        BudgetLine."Cost Type" := BudgetLine."Cost Type"::Plant;
        BudgetLine."Cost Object" := FillCostObject(BudgetLine."Cost Type");
        BudgetLine."Cost Component" := DefaultCostComponent(BudgetLine."Cost Object");  //**31683.n
        CreateBudgetLine(0,0,PlantPrice);
      END;

      //create subcontracting budget line
      XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(LineNode,'../mid[midid="' + MidID + '"]/enhprsoda'),SubcontractingPrice);
      IF SubcontractingPrice <> 0 THEN BEGIN
        SubcontractingPrice := SurchPercSubc *SubcontractingPrice;
        BudgetLine."Cost Type" := BudgetLine."Cost Type"::Subcontracting;
        BudgetLine."Cost Object" := FillCostObject(BudgetLine."Cost Type");
        BudgetLine."Cost Component" := DefaultCostComponent(BudgetLine."Cost Object");  //**31683.n
        CreateBudgetLine(0,0,SubcontractingPrice);
      END;

      //create empty budget line
      IF (Norm = 0) AND (MaterialPrice = 0) AND (SubcontractingPrice = 0) AND (PlantPrice = 0) THEN
        CreateBudgetLine(0,0,0);

      LastProcessedExternLineNo := ExternalLineNo;

      IF STRLEN(MaxDescription) > MaxLenBudgDescr THEN
        CreateLongDescriptionLines;
    END;

    LOCAL PROCEDURE InitBudgetLine@1100525002(LineNode@1100525002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      QuantityHVH@1210190000 : Decimal;
      QuantityMPT@1210190001 : Decimal;
    BEGIN
      WITH BudgetLine DO BEGIN
        INIT;
        "Budget Type" := "Budget Type"::Order;
        "Service Order No." := ServOrderNo;
        "Service Contract No." := ServOrder."Service Contract No.";
        "Time Quantity" := 0;

        AdmiGenCde := XMLDOMMgt.FindNodeText(LineNode,'altcde');
        MeansCde   := XMLDOMMgt.FindNodeText(LineNode,'cclcde');
        TenderCde  := XMLDOMMgt.FindNodeText(LineNode,'bstcde');

        IF (RecordType = 'KTP') OR ((RecordType = 'CMT') AND CmtWithQuantities) THEN BEGIN
          "Unit of Measure" := XMLDOMMgt.FindNodeText(LineNode,'../mid[midid="' + MidID + '"]/enh');
          XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(LineNode,'../mid[midid="' + MidID + '"]/facarb'),SurchPercLabor);
          XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(LineNode,'../mid[midid="' + MidID + '"]/facmta'),SurchPercMaterial);
          XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(LineNode,'../mid[midid="' + MidID + '"]/facmte'),SurchPercPlant);
          XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(LineNode,'../mid[midid="' + MidID + '"]/facoda'),SurchPercSubc);

          XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(LineNode,'fachvh'),SurchPercQuan);
          XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(LineNode,'hvh'),QuantityHVH);
          XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(LineNode,'mpt'),QuantityMPT);
          Quantity := SurchPercQuan * QuantityHVH * QuantityMPT;
          XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(LineNode,'tij'),"Time Quantity");

          AdmiLaborCde := XMLDOMMgt.FindNodeText(LineNode,'bwcarb');
          AdmiMatCde   := XMLDOMMgt.FindNodeText(LineNode,'bwcmta');
          AdmiPlntCde  := XMLDOMMgt.FindNodeText(LineNode,'bwcmte');
          AdmiSubCde   := XMLDOMMgt.FindNodeText(LineNode,'bwcoda');
        END;
      END;
    END;

    LOCAL PROCEDURE FillCostObject@1210190020(VAR CostTypeOpt@1210190000 : Option) lCostObject@1210190001 : Code[20];
    VAR
      lAdmicde@1210190002 : Code[20];
    BEGIN
      CASE ProjSetup."Fill Cost Object with (TRAD)" OF
        ProjSetup."Fill Cost Object with (TRAD)"::"Alternative Code":
          BEGIN
            lAdmicde := AdmiGenCde;
            CheckAdmiSubstituteCostObject(lAdmicde, CostTypeOpt);
            EXIT(GetCostObject(lAdmicde,CostTypeOpt));
          END;
        ProjSetup."Fill Cost Object with (TRAD)"::"Admi Code":
          BEGIN
            CASE CostTypeOpt OF
              DimValRec."Cost Type"::Labor:
                lAdmicde := AdmiLaborCde;
              DimValRec."Cost Type"::Material:
                lAdmicde := AdmiMatCde;
              DimValRec."Cost Type"::Plant:
                lAdmicde := AdmiPlntCde;
              DimValRec."Cost Type"::Subcontracting:
                lAdmicde := AdmiSubCde;
            END;
            CheckAdmiSubstituteCostObject(lAdmicde, CostTypeOpt);
            EXIT(GetCostObject(lAdmicde,CostTypeOpt));
          END;
        ProjSetup."Fill Cost Object with (TRAD)"::"Middel Code":
           EXIT(GetCostObject(MeansCde,CostTypeOpt));
        ProjSetup."Fill Cost Object with (TRAD)"::"Tender Code":
           EXIT(GetCostObject(TenderCde,CostTypeOpt));
      END;
    END;

    LOCAL PROCEDURE GetCostObject@1210190001(ladmicde@1210190000 : Code[20];lCostTypeOpt@1210190001 : Option) Result@1210190002 : Code[20];
    BEGIN
      IF ladmicde = '' THEN BEGIN
        StoreMessage(BudgetLine.Description, STRSUBSTNO(Text001,BudgetLine."Cost Type"));
        EXIT('');
      END ELSE BEGIN
        DimMgt.GetDimValueRec(2, ladmicde, DimValRec, FALSE,'');
        IF DimValRec.Code <> '' THEN BEGIN
          IF DimValRec."Cost Type" = lCostTypeOpt THEN BEGIN
            IF DimValRec.Blocked THEN BEGIN
              StoreMessage(BudgetLine.Description, STRSUBSTNO(Text013,ladmicde));
              EXIT('');
            END;
            EXIT(ladmicde)
          END ELSE BEGIN
            StoreMessage(BudgetLine.Description, STRSUBSTNO(Text011,BudgetLine."Cost Type",ladmicde));
            EXIT('');
          END;
        END ELSE BEGIN
          StoreMessage(BudgetLine.Description, STRSUBSTNO(Text004,ladmicde,BudgetLine."Cost Type"));
          EXIT('');
        END;
      END;
    END;

    LOCAL PROCEDURE CreateRateTable@1210190004(LineNode@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    BEGIN
      TmpProjRateRec.INIT;
      TmpProjRateRec."Project No." := ServOrderNo; //Table is only used as temporary table. So can also be used for import in Service
      TmpProjRateRec."Rate Code" := XMLDOMMgt.FindNodeText(LineNode,'ulncde');
      TmpProjRateRec."Starting Date" := 0D;
      XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(LineNode,'bdr'),TmpProjRateRec."Rate (LCY)");
      TmpProjRateRec.INSERT;
    END;

    LOCAL PROCEDURE CreateBudgetLine@1100525007(INorm@1100525001 : Decimal;IRate@1100525002 : Decimal;IPrice@1100525003 : Decimal);
    BEGIN
      WITH BudgetLine DO BEGIN
        "Line No. External Estimate" := ExternalLineNo;
        Norm := INorm;
        Rate := IRate;
        Price := IPrice;
        Amount := 0;

        CalcTotals;
        "Line No." := GetBudgetLineNo();
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE GetBudgetLineNo@1100409004() : Integer;
    VAR
      BudgetLine2@1100409000 : Record 11012875;
    BEGIN
      BudgetLine2.SETRANGE("Budget Type", BudgetLine."Budget Type");
      BudgetLine2.SETRANGE("Service Order No.", BudgetLine."Service Order No.");
      BudgetLine2.SETRANGE("Service Contract No.", BudgetLine."Service Contract No.");
      BudgetLine2.SETRANGE("Object No.", BudgetLine."Object No.");
      BudgetLine2.SETRANGE("Maintenance Scheme", BudgetLine."Maintenance Scheme");
      IF BudgetLine2.FINDLAST THEN
        EXIT(BudgetLine2."Line No." + 10000);
      EXIT(10000);
    END;

    LOCAL PROCEDURE CreateLongDescriptionLines@1210190005();
    VAR
      Len@1100409000 : Integer;
      Counter@1100409001 : Integer;
    BEGIN
      MaxDescription := DELCHR(MaxDescription, '>');
      Len := STRLEN(MaxDescription);
      FOR Counter := 1 TO 20 DO BEGIN
        IF (Counter * MaxLenBudgDescr + 1) > Len THEN
          EXIT;
        BudgetLine.Description := COPYSTR(MaxDescription, Counter * MaxLenBudgDescr + 1, MaxLenBudgDescr);
        IF BudgetLine.Description <> '' THEN BEGIN
          BudgetLine.Quantity := 0;
          BudgetLine."Unit of Measure" := '';
          BudgetLine."Time Quantity" := 0;
          BudgetLine."Unit of Time" := '';
          CreateBudgetLine(0,0,0);
        END;
      END;
    END;

    LOCAL PROCEDURE DefaultCostComponent@1100525006(lvCostObject@1100485000 : Code[20]) lvCostComponent : Code[20];
    VAR
      lvDimValRec@1100485002 : Record 349;
      DimMgt@1100525000 : Codeunit 408;
    BEGIN
      lvCostComponent := '';
      IF lvCostObject <> '' THEN BEGIN
        DimMgt.GetDimValueRec(2, lvCostObject, lvDimValRec, FALSE, '');
        IF NOT lvDimValRec.Blocked THEN
          lvCostComponent := lvDimValRec."Cost Component";
      END;
    END;

    LOCAL PROCEDURE StoreMessage@5(Desc@11012000 : Text[100];Mess@11012001 : Text[200]);
    VAR
      Errors@1210190000 : Record 11012051;
      NextLineNo@11012002 : Integer;
    BEGIN
      WITH Errors DO BEGIN
        SETRANGE("User ID", USERID);
        SETRANGE("Source Type", "Source Type"::"Import Budget");
        IF FINDLAST THEN
          NextLineNo := "Line No." + 1
        ELSE
          NextLineNo := 1;

        INIT;
        "User ID" := USERID;
        "Source Type" := "Source Type"::"Import Budget";
        "Line No." := NextLineNo;
        "Service Order No." := ServOrderNo;
        "Error message" := Mess;
        IF ExternalLineNo <> 0 THEN
          "Error message" := "Error message" + ' (' + STRSUBSTNO(Text100,ExternalLineNo) + ')';
        Description := Desc;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE CheckAdmiSubstituteCostObject@1100485002(VAR VarAdmicde@1100485000 : Code[20];VAR CostTypeOpt@1100485001 : Option);
    BEGIN
      IF AdmiRec.GET(VarAdmicde) THEN BEGIN
        IF AdmiRec."Admi Related Cost Type" AND (VarAdmicde <> '') THEN BEGIN
          //* Gerelateerde kostensoort niet voor lege admincode (vinkje kan daar niet aan gezet worden)
          //* Als gerelateerde kostensoort aan staat dan is altijd maar 1 van de 5 kostendragers gevuld (bij 1 ksrt).
          IF AdmiRec."Cost Object Labor" <> '' THEN BEGIN
            CostTypeOpt := DimValRec."Cost Type"::Labor;
            VarAdmicde := AdmiRec."Cost Object Labor";
          END;
          IF AdmiRec."Cost Object Material" <> '' THEN BEGIN
            CostTypeOpt := DimValRec."Cost Type"::Material;
            VarAdmicde := AdmiRec."Cost Object Material";
          END;
          IF AdmiRec."Cost Object Plant" <> '' THEN BEGIN
            CostTypeOpt := DimValRec."Cost Type"::Plant;
            VarAdmicde := AdmiRec."Cost Object Plant";
          END;
          IF AdmiRec."Cost Object Subcontracting" <> '' THEN BEGIN
            CostTypeOpt := DimValRec."Cost Type"::Subcontracting;
            VarAdmicde := AdmiRec."Cost Object Subcontracting";
          END;
          IF AdmiRec."Cost Object Sundry" <> '' THEN BEGIN
            CostTypeOpt := DimValRec."Cost Type"::Sundry;
            VarAdmicde := AdmiRec."Cost Object Sundry";
          END;
          EXIT;
        END;

        CASE CostTypeOpt OF
          DimValRec."Cost Type"::Labor:
            IF AdmiRec."Cost Object Labor" <> '' THEN
              VarAdmicde := AdmiRec."Cost Object Labor";
          DimValRec."Cost Type"::Material:
            IF AdmiRec."Cost Object Material" <> '' THEN
              VarAdmicde := AdmiRec."Cost Object Material";
          DimValRec."Cost Type"::Plant:
            IF AdmiRec."Cost Object Plant" <> '' THEN
              VarAdmicde := AdmiRec."Cost Object Plant";
          DimValRec."Cost Type"::Subcontracting:
            IF AdmiRec."Cost Object Subcontracting" <> '' THEN
              VarAdmicde := AdmiRec."Cost Object Subcontracting";
        END;
      END;
    END;

    LOCAL PROCEDURE CheckSttCode@1210190002() : Boolean;
    BEGIN
      SttCde := DELCHR(SttCde, '<>', ' ');
      CmtWithQuantities := FALSE;

      CASE RecordType OF
        'ELT':
          //IF (SttCde IN ['0','3','16']) THEN  //*C-029234   For ELT lines no check on this code anymore
            EXIT(TRUE);
        'KTP':
          BEGIN
            IF (SttCde IN ['0','1','8','9','10','16','17','24','25','32', '33', '40', '41', '48', '49', '56', '57']) THEN
              EXIT(TRUE);
            IF (SttCde IN ['4','6', '68', '132']) THEN BEGIN
              RecordType := 'CMT';
              CmtWithQuantities := TRUE;
              EXIT(TRUE);
            END;
          END;
        'CMT':
          BEGIN
            IF (SttCde IN ['0','1','2','16','17','18']) THEN
              EXIT(TRUE);
            IF (SttCde = '') AND (ExternalLineNo = LastProcessedExternLineNo) THEN
              EXIT(TRUE);
          END;
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE CheckTotals@1210190010(LineNode@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      BudgetLine@1100409000 : Record 11012875;
      TotalHoursXML@1210190006 : Decimal;
      TotalLaborXML@1210190000 : Decimal;
      TotalMaterialXML@1210190001 : Decimal;
      TotalSubcontrXML@1210190002 : Decimal;
      TotalPlantXML@1210190003 : Decimal;
      TotalAmountXML@1210190004 : Decimal;
    BEGIN
      XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(LineNode,'totuur'),TotalHoursXML);
      XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(LineNode,'ntoarb'),TotalLaborXML);
      XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(LineNode,'ntomta'),TotalMaterialXML);
      XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(LineNode,'ntooda'),TotalSubcontrXML);
      XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(LineNode,'ntomte'),TotalPlantXML);
      XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(LineNode,'ntotot'),TotalAmountXML);

      ExternalLineNo := 0; // Because of StoreMessage

      BudgetLine.SETRANGE("Budget Type", BudgetLine."Budget Type"::Order);
      BudgetLine.SETRANGE("Service Order No.", ServOrderNo);
      IF BudgetLine.FINDFIRST THEN BEGIN
        BudgetLine.CALCFIELDS("Total Labor", "Total Material", "Total Subcontracting", "Total Plant", "Total Hours", "Total Amount");
        IF ROUND(ABS(BudgetLine."Total Labor" - TotalLaborXML), 1) > 0 THEN
          StoreMessage(BudgetLine.FIELDCAPTION("Total Labor"),
            STRSUBSTNO(Text106, BudgetLine.FIELDCAPTION("Total Labor"), TotalLaborXML, BudgetLine."Total Labor"));
        IF ROUND(ABS(BudgetLine."Total Material" - TotalMaterialXML), 1) > 0 THEN
          StoreMessage(BudgetLine.FIELDCAPTION("Total Material"),
            STRSUBSTNO(Text106, BudgetLine.FIELDCAPTION("Total Material"), TotalMaterialXML, BudgetLine."Total Material"));
        IF ROUND(ABS(BudgetLine."Total Subcontracting" - TotalSubcontrXML), 1) > 0 THEN
          StoreMessage(BudgetLine.FIELDCAPTION("Total Subcontracting"),
            STRSUBSTNO(Text106, BudgetLine.FIELDCAPTION("Total Subcontracting"), TotalSubcontrXML, BudgetLine."Total Subcontracting"));
        IF ROUND(ABS(BudgetLine."Total Plant" - TotalPlantXML), 1) > 0 THEN
          StoreMessage(BudgetLine.FIELDCAPTION("Total Plant"),
            STRSUBSTNO(Text106, BudgetLine.FIELDCAPTION("Total Plant"), TotalPlantXML, BudgetLine."Total Plant"));
        IF ROUND(ABS(BudgetLine."Total Hours" - TotalHoursXML), 1) > 0 THEN
          StoreMessage(BudgetLine.FIELDCAPTION("Total Hours"),
            STRSUBSTNO(Text106, BudgetLine.FIELDCAPTION("Total Hours"), TotalHoursXML, BudgetLine."Total Hours"));
        IF ROUND(ABS(BudgetLine."Total Amount" - TotalAmountXML), 1) > 0 THEN
          StoreMessage(BudgetLine.FIELDCAPTION("Total Amount"),
            STRSUBSTNO(Text106, BudgetLine.FIELDCAPTION("Total Amount"), TotalAmountXML, BudgetLine."Total Amount"));
      END;
    END;

    LOCAL PROCEDURE CheckUnitOfMeasure@1100528400(BudgetLine@1100528403 : Record 11012875);
    VAR
      UnitOfMeasure@1100528400 : Record 204;
    BEGIN
      IF BudgetLine."Unit of Measure" <> '' THEN
        IF NOT UnitOfMeasure.GET(BudgetLine."Unit of Measure") THEN
          StoreMessage(
            BudgetLine.Description,
            STRSUBSTNO(Text999, BudgetLine.FIELDCAPTION("Unit of Measure"), BudgetLine."Unit of Measure"));
    END;

    BEGIN
    {
      DP00693  Copied from Project (C11012391). Modified for Import TRAD-XML in 'Service Order Budget Lines'.
    }
    END.
  }
}

