OBJECT Page 11129936 Schedule Employees Matrix
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Mitarbeiterplanung;
               ENU=Employees Schedule;
               NLD=Werknemersplanning];
    InsertAllowed=No;
    DeleteAllowed=No;
    LinksAllowed=No;
    SourceTable=Table5200;
    PageType=ListPart;
    SourceTableTemporary=Yes;
    OnAfterGetRecord=VAR
                       MATRIX_CurrentColumnOrdinal@1100528500 : Integer;
                     BEGIN
                       FOR MATRIX_CurrentColumnOrdinal := 1 TO MATRIX_CurrSetLength DO
                         MATRIX_OnAfterGetRecord(MATRIX_CurrentColumnOrdinal);
                     END;

    ActionList=ACTIONS
    {
      { 1100528503;  ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1100528501;1 ;Action    ;
                      CaptionML=[DEU=Mitarbeiter planen;
                                 ENU=Schedule Employee(s);
                                 NLD=Werknemer(s) inplannen];
                      Visible=(ProjectNo <> '');
                      Image=PlanningWorksheet;
                      OnAction=BEGIN
                                 UnscheduleEmployees;
                                 ScheduleEmployees;
                                 CurrPage.UPDATE(FALSE);
                               END;
                                }
      { 1100528502;1 ;Action    ;
                      CaptionML=[DEU=Planung rÅckgÑngig machen;
                                 ENU=Unschedule;
                                 NLD=Uitplannen];
                      Visible=(ProjectNo <> '');
                      Image=Undo;
                      OnAction=BEGIN
                                 UnscheduleEmployees;
                                 CurrPage.UPDATE(FALSE);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1100525000;;Container;
                ContainerType=ContentArea }

    { 1100525001;1;Group  ;
                GroupType=Repeater;
                FreezeColumnID=Disciplines }

    { 1100528504;2;Field  ;
                SourceExpr="No.";
                Editable=FALSE }

    { 1100528500;2;Field  ;
                SourceExpr="Last Name";
                Editable=FALSE }

    { 1100525003;2;Field  ;
                SourceExpr="Full Name";
                Visible=FALSE;
                Editable=FALSE }

    { 1100528507;2;Field  ;
                Name=Disciplines;
                CaptionML=[DEU=Disziplinen;
                           ENU=Disciplines;
                           NLD=Disciplines];
                SourceExpr=GetEmployeeDisciplines }

    { 1100525022;2;Field  ;
                Name=Field1;
                SourceExpr=MATRIX_CellData[1];
                CaptionClass='3,' + MATRIX_CaptionSet[1];
                StyleExpr=StyleTextMatrixCell1;
                OnValidate=BEGIN
                             MATRIX_OnValidate(1);
                           END;

                OnLookup=BEGIN
                           MATRIX_OnLookup(1);
                         END;

                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(1);
                            END;
                             }

    { 1100525021;2;Field  ;
                Name=Field2;
                SourceExpr=MATRIX_CellData[2];
                CaptionClass='3,' + MATRIX_CaptionSet[2];
                StyleExpr=StyleTextMatrixCell2;
                OnValidate=BEGIN
                             MATRIX_OnValidate(2);
                           END;

                OnLookup=BEGIN
                           MATRIX_OnLookup(2);
                         END;

                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(2);
                            END;
                             }

    { 1100525020;2;Field  ;
                Name=Field3;
                SourceExpr=MATRIX_CellData[3];
                CaptionClass='3,' + MATRIX_CaptionSet[3];
                StyleExpr=StyleTextMatrixCell3;
                OnValidate=BEGIN
                             MATRIX_OnValidate(3);
                           END;

                OnLookup=BEGIN
                           MATRIX_OnLookup(3);
                         END;

                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(3);
                            END;
                             }

    { 1100525019;2;Field  ;
                Name=Field4;
                SourceExpr=MATRIX_CellData[4];
                CaptionClass='3,' + MATRIX_CaptionSet[4];
                StyleExpr=StyleTextMatrixCell4;
                OnValidate=BEGIN
                             MATRIX_OnValidate(4);
                           END;

                OnLookup=BEGIN
                           MATRIX_OnLookup(4);
                         END;

                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(4);
                            END;
                             }

    { 1100525018;2;Field  ;
                Name=Field5;
                SourceExpr=MATRIX_CellData[5];
                CaptionClass='3,' + MATRIX_CaptionSet[5];
                StyleExpr=StyleTextMatrixCell5;
                OnValidate=BEGIN
                             MATRIX_OnValidate(5);
                           END;

                OnLookup=BEGIN
                           MATRIX_OnLookup(5);
                         END;

                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(5);
                            END;
                             }

    { 1100525017;2;Field  ;
                Name=Field6;
                SourceExpr=MATRIX_CellData[6];
                CaptionClass='3,' + MATRIX_CaptionSet[6];
                StyleExpr=StyleTextMatrixCell6;
                OnValidate=BEGIN
                             MATRIX_OnValidate(6);
                           END;

                OnLookup=BEGIN
                           MATRIX_OnLookup(6);
                         END;

                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(6);
                            END;
                             }

    { 1100525016;2;Field  ;
                Name=Field7;
                SourceExpr=MATRIX_CellData[7];
                CaptionClass='3,' + MATRIX_CaptionSet[7];
                StyleExpr=StyleTextMatrixCell7;
                OnValidate=BEGIN
                             MATRIX_OnValidate(7);
                           END;

                OnLookup=BEGIN
                           MATRIX_OnLookup(7);
                         END;

                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(7);
                            END;
                             }

    { 1100525015;2;Field  ;
                Name=Field8;
                SourceExpr=MATRIX_CellData[8];
                CaptionClass='3,' + MATRIX_CaptionSet[8];
                StyleExpr=StyleTextMatrixCell8;
                OnValidate=BEGIN
                             MATRIX_OnValidate(8);
                           END;

                OnLookup=BEGIN
                           MATRIX_OnLookup(8);
                         END;

                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(8);
                            END;
                             }

    { 1100525014;2;Field  ;
                Name=Field9;
                SourceExpr=MATRIX_CellData[9];
                CaptionClass='3,' + MATRIX_CaptionSet[9];
                StyleExpr=StyleTextMatrixCell9;
                OnValidate=BEGIN
                             MATRIX_OnValidate(9);
                           END;

                OnLookup=BEGIN
                           MATRIX_OnLookup(9);
                         END;

                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(9);
                            END;
                             }

    { 1100525013;2;Field  ;
                Name=Field10;
                SourceExpr=MATRIX_CellData[10];
                CaptionClass='3,' + MATRIX_CaptionSet[10];
                StyleExpr=StyleTextMatrixCell10;
                OnValidate=BEGIN
                             MATRIX_OnValidate(10);
                           END;

                OnLookup=BEGIN
                           MATRIX_OnLookup(10);
                         END;

                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(10);
                            END;
                             }

    { 1100525012;2;Field  ;
                Name=Field11;
                SourceExpr=MATRIX_CellData[11];
                CaptionClass='3,' + MATRIX_CaptionSet[11];
                StyleExpr=StyleTextMatrixCell11;
                OnValidate=BEGIN
                             MATRIX_OnValidate(11);
                           END;

                OnLookup=BEGIN
                           MATRIX_OnLookup(11);
                         END;

                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(11);
                            END;
                             }

    { 1100525011;2;Field  ;
                Name=Field12;
                SourceExpr=MATRIX_CellData[12];
                CaptionClass='3,' + MATRIX_CaptionSet[12];
                StyleExpr=StyleTextMatrixCell12;
                OnValidate=BEGIN
                             MATRIX_OnValidate(12);
                           END;

                OnLookup=BEGIN
                           MATRIX_OnLookup(12);
                         END;

                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(12);
                            END;
                             }

    { 1100528506;2;Field  ;
                Name=Field13;
                SourceExpr=MATRIX_CellData[13];
                CaptionClass='3,' + MATRIX_CaptionSet[13];
                StyleExpr=StyleTextMatrixCell13;
                OnValidate=BEGIN
                             MATRIX_OnValidate(13);
                           END;

                OnLookup=BEGIN
                           MATRIX_OnLookup(13);
                         END;

                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(13);
                            END;
                             }

    { 1100528505;2;Field  ;
                Name=Field14;
                SourceExpr=MATRIX_CellData[14];
                CaptionClass='3,' + MATRIX_CaptionSet[14];
                StyleExpr=StyleTextMatrixCell14;
                OnValidate=BEGIN
                             MATRIX_OnValidate(14);
                           END;

                OnLookup=BEGIN
                           MATRIX_OnLookup(14);
                         END;

                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(14);
                            END;
                             }

  }
  CODE
  {
    VAR
      ProjectScheduleEmployeeGlobal@1100528504 : Record 11229412;
      ProjectNo@1100528501 : Code[20];
      DisciplineCode@1100528513 : Code[10];
      DisciplineFilter@1100528505 : Code[250];
      TeamFilter@1100528506 : Code[250];
      MATRIX_MatrixRecord@1100525017 : Record 2000000007;
      MATRIX_MatrixRecords@1100525016 : ARRAY [32] OF Record 2000000007;
      MATRIX_CaptionSet@1100525015 : ARRAY [32] OF Text[80];
      MATRIX_CurrSetLength@1100525014 : Integer;
      MATRIX_CellData@1100525013 : ARRAY [32] OF Text[20];
      xMATRIX_CellData@1100528527 : ARRAY [32] OF Text[20];
      MATRIX_PeriodType@1100525012 : 'Day,Week,Month,Quarter,Year';
      StyleTextMatrixCell1@1100528515 : Text INDATASET;
      StyleTextMatrixCell2@1100528516 : Text INDATASET;
      StyleTextMatrixCell3@1100528517 : Text INDATASET;
      StyleTextMatrixCell4@1100528520 : Text INDATASET;
      StyleTextMatrixCell5@1100528519 : Text INDATASET;
      StyleTextMatrixCell6@1100528518 : Text INDATASET;
      StyleTextMatrixCell7@1100528523 : Text INDATASET;
      StyleTextMatrixCell8@1100528522 : Text INDATASET;
      StyleTextMatrixCell9@1100528521 : Text INDATASET;
      StyleTextMatrixCell10@1100528526 : Text INDATASET;
      StyleTextMatrixCell11@1100528525 : Text INDATASET;
      StyleTextMatrixCell12@1100528524 : Text INDATASET;
      MissingDisciplineFilterTxt@1100528514 : TextConst 'DEU=Tragen Sie zuerst eine Disziplin ein;ENU=Fill a Discipline first;NLD=Vul eerst een Discipline';
      StyleTextMatrixCell13@1100528530 : Text INDATASET;
      StyleTextMatrixCell14@1100528529 : Text INDATASET;
      ShowInMatrix@1100528528 : 'Project Nos.,Project Search Names,Planned Hours,Available Hours,Norm Hours,Planned Hours this Project,Planned Hours this Project and Discipline';
      ShowInMatrixTxt@1100528500 : TextConst 'DEU=Eingabe nur gestattet bei ''Zeigen in Matrix'' auf ''Projektnummern'', ''Geplante Stunden dieses Projekt'' und ''Geplante Stunden dieses Projekt und Disziplin'';ENU=Input only allowed for ''Show In Matrix'' on ''Project Nos.'' , ''Planned Hours this Project'' and ''Planned Hours this Project and Discipline'';NLD=Invoer alleen toegestaan bij ''Tonen in matrix'' op ''Projectnrs.'' , ''Geplande uren dit project'' en ''Geplande uren dit project en discipline''';
      ShowInMatrixNoProjectTxt@1100528502 : TextConst 'DEU=Eingabe nur gestattet bei ''Zeigen in matrix'' auf ''Projektnummern''.;ENU=Input only allowed for ''Show In Matrix'' on ''Project Nos.'';NLD=Invoer alleen toegestaan bij ''Tonen in matrix'' op ''Projectnrs.''';
      OnlyChangesAllowedForProjectTxt@1100528503 : TextConst 'DEU=Nur énderungen fÅr Projekt %1 zulÑssig;ENU=Only changes for Project %1 allowed;NLD=Alleen wijzigingen voor project %1 toegestaan';

    PROCEDURE Load@1132(VAR CaptionSet@1005 : ARRAY [32] OF Text[80];VAR MatrixRecords@1006 : ARRAY [32] OF Record 2000000007;CurrSetLength@1007 : Integer;PeriodType@1100528700 : 'Day,Week,Month,Quarter,Year';CurrentProjectNo@1100528701 : Code[20];CurrentDisciplineCode@1100528500 : Code[10];CurrentDisciplineFilter@1100528502 : Code[250];CurrentTeamFilter@1100528503 : Code[250];ShowInEmployeeMatrix@1100528501 : Option;ShowOnlyScheduledEmployees@1100528504 : Boolean);
    BEGIN
      CLEAR(MATRIX_CellData);
      CLEAR(xMATRIX_CellData);
      COPYARRAY(MATRIX_CaptionSet, CaptionSet, 1);
      COPYARRAY(MATRIX_MatrixRecords, MatrixRecords, 1);

      MATRIX_CurrSetLength := CurrSetLength;
      MATRIX_PeriodType := PeriodType;

      ProjectNo := CurrentProjectNo;
      DisciplineCode := CurrentDisciplineCode;
      DisciplineFilter := CurrentDisciplineFilter;
      TeamFilter := CurrentTeamFilter;
      ShowInMatrix := ShowInEmployeeMatrix;

      BuildTempTable(ShowOnlyScheduledEmployees);

      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE MATRIX_OnAfterGetRecord@1135(ColumnNo@1010 : Integer);
    BEGIN
      MATRIX_MatrixRecord := MATRIX_MatrixRecords[ColumnNo];

      MATRIX_CellData[ColumnNo] := ReadCell;
      xMATRIX_CellData[ColumnNo] := MATRIX_CellData[ColumnNo];

      IF MATRIX_CellData[ColumnNo] <> '' THEN
        FormatCell(ColumnNo);
    END;

    LOCAL PROCEDURE MATRIX_OnValidate@1100525001(ColumnNo@1008 : Integer);
    BEGIN
      MATRIX_UpdateCell(ColumnNo);

      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE MATRIX_OnLookup@1100528701(ColumnNo@1100409000 : Integer);
    VAR
      Project@1100528500 : Record 11072003;
    BEGIN
      IF ProjectNo <> '' THEN BEGIN
        IF Project.GET(ProjectNo) THEN;
      END ELSE
        IF (MATRIX_CellData[ColumnNo] <> '') THEN
          IF Project.GET(MATRIX_CellData[ColumnNo]) THEN;

      IF ProjectNo <> '' THEN
        PAGE.RUNMODAL(0,Project)
      ELSE
        IF PAGE.RUNMODAL(0,Project) = ACTION::LookupOK THEN BEGIN
          MATRIX_CellData[ColumnNo] := Project."No.";
          MATRIX_OnValidate(ColumnNo);
        END;
    END;

    LOCAL PROCEDURE MATRIX_OnDrillDown@1100409000(ColumnNo@1100409000 : Integer);
    VAR
      ProjectScheduleEmployee@1100528500 : Record 11229412;
    BEGIN
      MATRIX_MatrixRecord := MATRIX_MatrixRecords[ColumnNo];

      SetProjectScheduleEmployeeFilters(ProjectScheduleEmployee);
      PAGE.RUNMODAL(0,ProjectScheduleEmployee);

      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE MATRIX_OnAssistEdit@1100409001(ColumnNo@1100409000 : Integer);
    BEGIN
    END;

    LOCAL PROCEDURE MATRIX_UpdateCell@1100485007(ColumnNo@1100528701 : Integer);
    VAR
      Project@1100528500 : Record 11072003;
      NoOfHours@1100528502 : Decimal;
    BEGIN
      MATRIX_MatrixRecord := MATRIX_MatrixRecords[ColumnNo];

      IF (MATRIX_CellData[ColumnNo] <> xMATRIX_CellData[ColumnNo]) THEN BEGIN
        IF ProjectNo = '' THEN BEGIN
          IF NOT (ShowInMatrix = ShowInMatrix::"Project Nos.") THEN
            ERROR(ShowInMatrixNoProjectTxt);
        END ELSE
          IF NOT (ShowInMatrix IN [ShowInMatrix::"Planned Hours this Project and Discipline",ShowInMatrix::"Planned Hours this Project",ShowInMatrix::"Project Nos."]) THEN
            ERROR(ShowInMatrixTxt);

        IF ShowInMatrix = ShowInMatrix::"Project Nos." THEN BEGIN
          IF (ProjectNo <> '') AND (MATRIX_CellData[ColumnNo] <> '') THEN
            IF ProjectNo <> MATRIX_CellData[ColumnNo] THEN
              ERROR(OnlyChangesAllowedForProjectTxt,ProjectNo);
          IF (MATRIX_CellData[ColumnNo] <> '') THEN BEGIN
            IF Project.GET(MATRIX_CellData[ColumnNo]) THEN
              ProjectScheduleEmployeeGlobal.UpdateFromScheduleMatrix(Project."No.","No.",DisciplineCode,MATRIX_MatrixRecord."Period Start",MATRIX_MatrixRecord."Period End",FALSE,0);
          END ELSE
            IF ProjectNo = '' THEN BEGIN
              IF Project.GET(xMATRIX_CellData[ColumnNo]) THEN
                ProjectScheduleEmployeeGlobal.UpdateFromScheduleMatrix(Project."No.","No.",DisciplineCode,MATRIX_MatrixRecord."Period Start",MATRIX_MatrixRecord."Period End",TRUE,0);
            END ELSE
              IF Project.GET(ProjectNo) THEN
                ProjectScheduleEmployeeGlobal.UpdateFromScheduleMatrix(Project."No.","No.",DisciplineCode,MATRIX_MatrixRecord."Period Start",MATRIX_MatrixRecord."Period End",TRUE,0);
        END;

        IF ShowInMatrix IN [ShowInMatrix::"Planned Hours this Project and Discipline",ShowInMatrix::"Planned Hours this Project"] THEN BEGIN
          IF EVALUATE(NoOfHours,MATRIX_CellData[ColumnNo]) THEN;
          ProjectScheduleEmployeeGlobal.UpdateFromScheduleMatrix(ProjectNo,"No.",DisciplineCode,MATRIX_MatrixRecord."Period Start",MATRIX_MatrixRecord."Period End",TRUE,0);
          IF NoOfHours <> 0 THEN
            ProjectScheduleEmployeeGlobal.UpdateFromScheduleMatrix(ProjectNo,"No.",DisciplineCode,MATRIX_MatrixRecord."Period Start",MATRIX_MatrixRecord."Period End",FALSE,NoOfHours)
        END;
      END;
    END;

    LOCAL PROCEDURE SetProjectScheduleEmployeeFilters@1100528502(VAR ProjectScheduleEmployee@1100528500 : Record 11229412);
    BEGIN
      ProjectScheduleEmployee.RESET;
      ProjectScheduleEmployee.SETRANGE("Employee No.","No.");
      ProjectScheduleEmployee.SETRANGE("Scheduled Date",MATRIX_MatrixRecord."Period Start",MATRIX_MatrixRecord."Period End");
    END;

    LOCAL PROCEDURE SetProjectCapacityNeedDetailFilters@1100528504(VAR ProjectCapacityNeedDetail@1100528500 : Record 11229349;PeriodStart@1100528501 : Date;PeriodEnd@1100528502 : Date);
    BEGIN
      ProjectCapacityNeedDetail.RESET;
      ProjectCapacityNeedDetail.SETRANGE("Project No.",ProjectNo);
      ProjectCapacityNeedDetail.SETFILTER(Discipline,DisciplineCode);
      ProjectCapacityNeedDetail.SETRANGE("Line Type",ProjectCapacityNeedDetail."Line Type"::Main);
      ProjectCapacityNeedDetail.SETRANGE("Need Date",PeriodStart,PeriodEnd);
    END;

    LOCAL PROCEDURE FormatCell@1100528500(ColumnNo@1100528502 : Integer);
    VAR
      StyleTextMatrixCell@1100528504 : Text;
    BEGIN
      IF CheckUnfavorablePeriod THEN
        StyleTextMatrixCell := 'Unfavorable'
      ELSE
        IF IsEmployeeScheduledOnProjectDiscipline THEN
          StyleTextMatrixCell := 'Favorable'
        ELSE
          StyleTextMatrixCell := 'Standard';

      CASE ColumnNo OF
        1: StyleTextMatrixCell1 := StyleTextMatrixCell;
        2: StyleTextMatrixCell2 := StyleTextMatrixCell;
        3: StyleTextMatrixCell3 := StyleTextMatrixCell;
        4: StyleTextMatrixCell4 := StyleTextMatrixCell;
        5: StyleTextMatrixCell5 := StyleTextMatrixCell;
        6: StyleTextMatrixCell6 := StyleTextMatrixCell;
        7: StyleTextMatrixCell7 := StyleTextMatrixCell;
        8: StyleTextMatrixCell8 := StyleTextMatrixCell;
        9: StyleTextMatrixCell9 := StyleTextMatrixCell;
        10: StyleTextMatrixCell10 := StyleTextMatrixCell;
        11: StyleTextMatrixCell11 := StyleTextMatrixCell;
        12: StyleTextMatrixCell12 := StyleTextMatrixCell;
        13: StyleTextMatrixCell13 := StyleTextMatrixCell;
        14: StyleTextMatrixCell14 := StyleTextMatrixCell;
      END;
    END;

    LOCAL PROCEDURE ReadCell@1100528511() CellValue : Text[20];
    VAR
      TempProject@1100528506 : TEMPORARY Record 11072003;
      EmployeeNormHours@1100528501 : Decimal;
      EmployeeAvailableHours@1100528502 : Decimal;
      CauseOfAbsenceCodes@1100528503 : Code[10];
    BEGIN
      SetProjectScheduleEmployeeFilters(ProjectScheduleEmployeeGlobal);

      CASE ShowInMatrix OF
        ShowInMatrix::"Project Nos.",
        ShowInMatrix::"Project Search Names":
          BEGIN
            CASE ProjectScheduleEmployeeGlobal.COUNT OF
              0: CellValue := '';
              1:
                BEGIN
                  ProjectScheduleEmployeeGlobal.FINDFIRST;
                  CellValue := GetProjectNoOrSearchName(ProjectScheduleEmployeeGlobal."Project No.");
                END;
              ELSE BEGIN
                ProjectScheduleEmployeeGlobal.FINDSET;
                REPEAT
                  TempProject."No." := ProjectScheduleEmployeeGlobal."Project No.";
                  IF TempProject.INSERT THEN;
                UNTIL ProjectScheduleEmployeeGlobal.NEXT = 0;
                IF TempProject.COUNT > 1 THEN
                  CellValue := '[' + FORMAT(TempProject.COUNT) + ']'
                ELSE
                  CellValue := GetProjectNoOrSearchName(ProjectScheduleEmployeeGlobal."Project No.");
              END;
            END;

            CauseOfAbsenceCodes := GetCauseOfAbsenceCodes(MATRIX_MatrixRecord."Period Start",MATRIX_MatrixRecord."Period End");
            IF CauseOfAbsenceCodes <> '' THEN
              IF CellValue = '' THEN
                CellValue := CauseOfAbsenceCodes
              ELSE
                CellValue := COPYSTR(CauseOfAbsenceCodes + ' ' + CellValue,1,MAXSTRLEN(CellValue));
          END;
        ShowInMatrix::"Planned Hours":
          BEGIN
            ProjectScheduleEmployeeGlobal.CALCSUMS("Scheduled Hours");
            IF ProjectScheduleEmployeeGlobal."Scheduled Hours" = 0 THEN
              CellValue := ''
            ELSE
              CellValue := FORMAT(ProjectScheduleEmployeeGlobal."Scheduled Hours");
          END;
        ShowInMatrix::"Available Hours":
          BEGIN
            EmployeeAvailableHours := ProjectScheduleEmployeeGlobal.CalcEmployeeAvailableHours("No.",MATRIX_MatrixRecord."Period Start",MATRIX_MatrixRecord."Period End");
            IF EmployeeAvailableHours = 0 THEN
              CellValue := ''
            ELSE
              CellValue := FORMAT(EmployeeAvailableHours);
          END;
        ShowInMatrix::"Norm Hours":
          BEGIN
            EmployeeNormHours := ProjectScheduleEmployeeGlobal.CalcEmployeeNormHours("No.",MATRIX_MatrixRecord."Period Start",MATRIX_MatrixRecord."Period End",FALSE);
            IF EmployeeNormHours = 0 THEN
              CellValue := ''
            ELSE
              CellValue := FORMAT(EmployeeNormHours);
          END;
        ShowInMatrix::"Planned Hours this Project":
          BEGIN
            ProjectScheduleEmployeeGlobal.SETRANGE("Project No.",ProjectNo);
            ProjectScheduleEmployeeGlobal.CALCSUMS("Scheduled Hours");
            IF ProjectScheduleEmployeeGlobal."Scheduled Hours" = 0 THEN
              CellValue := ''
            ELSE
              CellValue := FORMAT(ProjectScheduleEmployeeGlobal."Scheduled Hours");
          END;
        ShowInMatrix::"Planned Hours this Project and Discipline":
          BEGIN
            ProjectScheduleEmployeeGlobal.SETRANGE("Project No.",ProjectNo);
            ProjectScheduleEmployeeGlobal.SETFILTER(Discipline,DisciplineFilter);
            ProjectScheduleEmployeeGlobal.CALCSUMS("Scheduled Hours");
            IF ProjectScheduleEmployeeGlobal."Scheduled Hours" = 0 THEN
              CellValue := ''
            ELSE
              CellValue := FORMAT(ProjectScheduleEmployeeGlobal."Scheduled Hours");
          END;
      END;
    END;

    LOCAL PROCEDURE BuildTempTable@1100528501(ShowOnlyScheduledEmployees@1100528501 : Boolean);
    VAR
      EmployeeFilters@1100528500 : Record 5200;
      Employee@1100528502 : Record 5200;
      TeamSalesperson@1100528503 : Record 5084;
    BEGIN
      IF NOT Rec.ISTEMPORARY THEN
        ERROR('');

      EmployeeFilters.COPY(Rec);

      RESET;
      DELETEALL;

      Employee.GetTableOfEmployeesWithCertainDiscipline(Rec,DisciplineFilter);

      IF TeamFilter <> '' THEN
        IF FINDSET THEN
          REPEAT
            TeamSalesperson.SETFILTER("Team Code",TeamFilter);
            TeamSalesperson.SETFILTER("Employee No.","No.");
            IF TeamSalesperson.ISEMPTY THEN
              DELETE;
          UNTIL NEXT = 0;

      IF ShowOnlyScheduledEmployees THEN
        IF FINDSET THEN
          REPEAT
            ProjectScheduleEmployeeGlobal.RESET;
            ProjectScheduleEmployeeGlobal.SETRANGE("Employee No.","No.");
            ProjectScheduleEmployeeGlobal.SETRANGE("Project No.",ProjectNo);
            ProjectScheduleEmployeeGlobal.SETFILTER(Discipline,DisciplineFilter);
            IF ProjectScheduleEmployeeGlobal.ISEMPTY THEN
              DELETE;
          UNTIL NEXT = 0;

      COPY(EmployeeFilters);
    END;

    LOCAL PROCEDURE ScheduleEmployees@1100528503();
    VAR
      Employee@1100528500 : TEMPORARY Record 5200;
      ProjectCapacityNeed@1100528513 : Record 11229348;
      ProjectCapacityNeedDetail@1100528505 : Record 11229349;
      ProjectScheduleEmployee@1100528501 : Record 11229412;
      TempDiscipline@1100528512 : TEMPORARY Record 11020204;
      MATRIX_CurrentColumnOrdinal@1100528502 : Integer;
      RequestedHoursProject@1100528506 : Decimal;
      Date@1100528503 : Record 2000000007;
      FirstDayOfWeek@1100528504 : Date;
    BEGIN
      ProjectCapacityNeed.GetTempDisciplines(TempDiscipline,ProjectNo);

      IF NOT TempDiscipline.GET(DisciplineCode) THEN
        ERROR(MissingDisciplineFilterTxt);

      Employee.COPY(Rec,TRUE);
      CurrPage.SETSELECTIONFILTER(Employee);
      IF Employee.FINDSET THEN
        REPEAT
          IF MATRIX_PeriodType = MATRIX_PeriodType::Week THEN BEGIN
            FOR MATRIX_CurrentColumnOrdinal := 1 TO MATRIX_CurrSetLength DO BEGIN
              MATRIX_MatrixRecord := MATRIX_MatrixRecords[MATRIX_CurrentColumnOrdinal];

              SetProjectCapacityNeedDetailFilters(ProjectCapacityNeedDetail,MATRIX_MatrixRecord."Period Start",MATRIX_MatrixRecord."Period End");
              ProjectCapacityNeedDetail.CALCSUMS("Requested Hours");
              RequestedHoursProject := ProjectCapacityNeedDetail."Requested Hours";
              ProjectScheduleEmployee.ScheduleEmployee(ProjectNo,Employee."No.",DisciplineCode,MATRIX_MatrixRecord."Period Start",MATRIX_MatrixRecord."Period End",FALSE,RequestedHoursProject,0);
            END;
          END ELSE BEGIN
            //Convert days to weeks
            FirstDayOfWeek := DWY2DATE(1,DATE2DWY(MATRIX_MatrixRecords[1]."Period Start",2),DATE2DWY(MATRIX_MatrixRecords[1]."Period Start",3));
            Date.SETRANGE("Period Type",Date."Period Type"::Week);
            Date.SETRANGE("Period Start",FirstDayOfWeek,MATRIX_MatrixRecords[MATRIX_CurrSetLength]."Period End");
            IF Date.FINDSET THEN
              REPEAT
                SetProjectCapacityNeedDetailFilters(ProjectCapacityNeedDetail,Date."Period Start",Date."Period End");
                ProjectCapacityNeedDetail.CALCSUMS("Requested Hours");
                RequestedHoursProject := ProjectCapacityNeedDetail."Requested Hours";
                ProjectScheduleEmployee.ScheduleEmployee(ProjectNo,Employee."No.",DisciplineCode,Date."Period Start",Date."Period End",FALSE,RequestedHoursProject,0);
              UNTIL Date.NEXT = 0;
          END;
        UNTIL Employee.NEXT = 0;
    END;

    LOCAL PROCEDURE IsEmployeeScheduledOnProjectDiscipline@1100528506() : Boolean;
    VAR
      ProjectScheduleEmployee@1100528500 : Record 11229412;
    BEGIN
      IF ProjectNo = '' THEN
        EXIT(FALSE);

      ProjectScheduleEmployee.SETRANGE("Project No.",ProjectNo);
      ProjectScheduleEmployee.SETRANGE("Employee No.","No.");
      ProjectScheduleEmployee.SETFILTER(Discipline,DisciplineCode);
      ProjectScheduleEmployee.SETRANGE("Scheduled Date",MATRIX_MatrixRecord."Period Start",MATRIX_MatrixRecord."Period End");
      EXIT(NOT ProjectScheduleEmployee.ISEMPTY);
    END;

    LOCAL PROCEDURE UnscheduleEmployees@1100528509();
    VAR
      Employee@1100528500 : TEMPORARY Record 5200;
      ProjectScheduleEmployee@1100528501 : Record 11229412;
      MATRIX_CurrentColumnOrdinal@1100528502 : Integer;
    BEGIN
      Employee.COPY(Rec,TRUE);
      CurrPage.SETSELECTIONFILTER(Employee);
      IF Employee.FINDSET THEN
        REPEAT
          FOR MATRIX_CurrentColumnOrdinal := 1 TO MATRIX_CurrSetLength DO BEGIN
            MATRIX_MatrixRecord := MATRIX_MatrixRecords[MATRIX_CurrentColumnOrdinal];

            ProjectScheduleEmployee.RESET;
            ProjectScheduleEmployee.SETRANGE("Project No.",ProjectNo);
            ProjectScheduleEmployee.SETRANGE("Employee No.",Employee."No.");
            ProjectScheduleEmployee.SETRANGE("Scheduled Date",MATRIX_MatrixRecord."Period Start",MATRIX_MatrixRecord."Period End");
            ProjectScheduleEmployee.SETFILTER(Discipline,DisciplineFilter);
            ProjectScheduleEmployee.DELETEALL(TRUE);
          END;
        UNTIL Employee.NEXT = 0;
    END;

    LOCAL PROCEDURE ReadEmployeeAbsence@1100528507(EmployeeNo@1100528500 : Code[20];Date@1100528501 : Date;NotPlannableOnly@1100528503 : Boolean) : Code[10];
    VAR
      EmployeeAbsence@1100528502 : Record 5207;
    BEGIN
      EXIT(EmployeeAbsence.ReadEmployeeAbsenceCode(EmployeeNo,Date,NotPlannableOnly));
    END;

    LOCAL PROCEDURE GetCauseOfAbsenceCodes@1100528505(StartDate@1100528502 : Date;EndDate@1100528503 : Date) CauseOfAbsenceCodes : Code[10];
    VAR
      Date@1100528500 : Record 2000000007;
      TempCauseofAbsence@1100528504 : TEMPORARY Record 5206;
      CauseOfAbsenceCode@1100528501 : Code[10];
    BEGIN
      Date.SETRANGE("Period Type",Date."Period Type"::Date);
      Date.SETRANGE("Period Start",StartDate,EndDate);
      IF Date.FINDSET THEN
        REPEAT
          CauseOfAbsenceCode := ReadEmployeeAbsence("No.",Date."Period Start",FALSE);
          IF CauseOfAbsenceCode <> '' THEN BEGIN
            TempCauseofAbsence.Code := CauseOfAbsenceCode;
            IF TempCauseofAbsence.INSERT THEN;
          END;
        UNTIL Date.NEXT = 0;

      IF TempCauseofAbsence.FINDSET THEN
        REPEAT
          IF CauseOfAbsenceCodes = '' THEN
            CauseOfAbsenceCodes := TempCauseofAbsence.Code
          ELSE
            CauseOfAbsenceCodes := COPYSTR(CauseOfAbsenceCodes + ' ' + TempCauseofAbsence.Code,1,MAXSTRLEN(CauseOfAbsenceCodes));
        UNTIL TempCauseofAbsence.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckUnfavorablePeriod@1100528518() : Boolean;
    VAR
      Date@1100528500 : Record 2000000007;
    BEGIN
      IF MATRIX_PeriodType = MATRIX_PeriodType::Week THEN BEGIN
        Date.SETRANGE("Period Type",Date."Period Type"::Date);
        Date.SETRANGE("Period Start",MATRIX_MatrixRecord."Period Start",MATRIX_MatrixRecord."Period End");
        IF Date.FINDSET THEN
          REPEAT
            IF CheckUnfavorablePerDay(Date."Period Start") THEN
              EXIT(TRUE);
          UNTIL Date.NEXT = 0;
      END ELSE
        EXIT(CheckUnfavorablePerDay(MATRIX_MatrixRecord."Period Start"));
    END;

    LOCAL PROCEDURE CheckUnfavorablePerDay@1100528523(CheckDate@1100528503 : Date) : Boolean;
    VAR
      EmployeeNormHours@1100528501 : Decimal;
      CauseOfAbsenceCodes@1100528502 : Code[1024];
    BEGIN
      SetProjectScheduleEmployeeFilters(ProjectScheduleEmployeeGlobal);
      ProjectScheduleEmployeeGlobal.SETRANGE("Scheduled Date",CheckDate,CheckDate);
      ProjectScheduleEmployeeGlobal.CALCSUMS("Scheduled Hours");
      IF ProjectScheduleEmployeeGlobal."Scheduled Hours" > 0 THEN BEGIN
        CauseOfAbsenceCodes := GetCauseOfAbsenceCodes(CheckDate,CheckDate);
        IF CauseOfAbsenceCodes <> '' THEN
          EXIT(TRUE);
        EmployeeNormHours := ProjectScheduleEmployeeGlobal.CalcEmployeeNormHours("No.",CheckDate,CheckDate,FALSE);
        EXIT(ProjectScheduleEmployeeGlobal."Scheduled Hours" > EmployeeNormHours);
      END;
    END;

    LOCAL PROCEDURE GetProjectNoOrSearchName@1100528512(ProjectNo@1100528500 : Code[20]) : Text;
    VAR
      Job@1100528501 : Record 11072003;
    BEGIN
      IF ShowInMatrix = ShowInMatrix::"Project Search Names" THEN BEGIN
        Job.GET(ProjectNo);
        IF Job."Search Description" <> '' THEN
          EXIT(COPYSTR(Job."Search Description",1,20));
      END;

      EXIT(ProjectNo);
    END;

    BEGIN
    END.
  }
}

