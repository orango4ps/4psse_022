OBJECT Page 5845 Inventory - G/L Reconciliation
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Inventory - G/L Reconciliation;
               NOR=Lager - finansavstemming;
               SVE=Avst„mning lager - redovisning];
    ApplicationArea=#Basic,#Suite;
    SaveValues=Yes;
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    LinksAllowed=No;
    SourceTable=Table367;
    DataCaptionExpr='';
    PageType=Card;
    UsageCategory=ReportsAndAnalysis;
    AdditionalSearchTermsML=[ENU=general ledger reconcile inventory;
                             NOR=lageravstemming for finans;
                             SVE=redovisning st„mma av lager];
    OnInit=BEGIN
             ShowEditable := TRUE;
           END;

    OnOpenPage=BEGIN
                 GLSetup.GET;
                 TestWarning;
                 InvtReportHeader.SETFILTER("Item Filter",ItemFilter);
                 InvtReportHeader.SETFILTER("Location Filter",LocationFilter);
                 InvtReportHeader.SETFILTER("Posting Date Filter",DateFilter);
                 InvtReportHeader."Show Warning" := ShowWarning;

                 IF (LineDimCode = '') AND (ColumnDimCode = '') THEN BEGIN
                   LineDimCode := Text004;
                   ColumnDimCode := Text005;
                 END;
                 InvtReportHeader."Line Option" := DimCodeToOption(LineDimCode);
                 InvtReportHeader."Column Option" := DimCodeToOption(ColumnDimCode);
               END;

    OnFindRecord=BEGIN
                   WITH InvtReportHeader DO BEGIN
                     IF "Line Option" = "Line Option"::"Balance Sheet" THEN BEGIN
                       IF (ItemFilter = '') AND (LocationFilter = '') THEN BEGIN
                         IF ShowWarning THEN
                           RowIntegerLine.SETRANGE(Number,1,7)
                         ELSE
                           RowIntegerLine.SETRANGE(Number,1,6)
                       END ELSE
                         RowIntegerLine.SETRANGE(Number,1,4)
                     END ELSE
                       IF "Line Option" = "Line Option"::"Income Statement" THEN
                         IF (ItemFilter = '') AND (LocationFilter = '') THEN BEGIN
                           IF ShowWarning THEN
                             RowIntegerLine.SETRANGE(Number,1,18)
                           ELSE
                             RowIntegerLine.SETRANGE(Number,1,17)
                         END ELSE
                           RowIntegerLine.SETRANGE(Number,1,15);
                     EXIT(FindRec("Line Option",Rec,Which,TRUE));
                   END;
                 END;

    OnNextRecord=BEGIN
                   EXIT(NextRec(InvtReportHeader."Line Option",Rec,Steps,TRUE));
                 END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 19      ;1   ;Action    ;
                      CaptionML=[ENU=&Show Matrix;
                                 NOR=Vi&s matrise;
                                 SVE=Vi&sa matris];
                      ToolTipML=[ENU=View the data overview according to the selected filters and options.;
                                 NOR=Vis den dataoversikten i henhold til de valgte filtrene og alternativene.;
                                 SVE=Visa data”versikten med h„nsyn taget till de valda filtren och alternativen.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Image=ShowMatrix;
                      PromotedCategory=Process;
                      PromotedOnly=Yes;
                      OnAction=VAR
                                 MatrixForm@1157 : Page 9297;
                                 i@1001 : Integer;
                               BEGIN
                                 CLEAR(MatrixForm);
                                 CLEAR(MatrixRecords);
                                 CLEAR(MATRIX_CaptionSet);

                                 WITH InvtReportHeader DO BEGIN
                                   IF "Column Option" = "Line Option"::"Balance Sheet" THEN BEGIN
                                     IF (ItemFilter = '') AND (LocationFilter = '') THEN BEGIN
                                       IF ShowWarning THEN
                                         ColIntegerLine.SETRANGE(Number,1,7)
                                       ELSE
                                         ColIntegerLine.SETRANGE(Number,1,6)
                                     END ELSE
                                       ColIntegerLine.SETRANGE(Number,1,4)
                                   END ELSE
                                     IF "Column Option" = "Line Option"::"Income Statement" THEN
                                       IF (ItemFilter = '') AND (LocationFilter = '') THEN BEGIN
                                         IF ShowWarning THEN
                                           ColIntegerLine.SETRANGE(Number,1,18)
                                         ELSE
                                           ColIntegerLine.SETRANGE(Number,1,17)
                                       END ELSE
                                         ColIntegerLine.SETRANGE(Number,1,15);
                                   i := 1;

                                   IF FindRec("Column Option",MatrixRecords[i],'-',FALSE) THEN BEGIN
                                     MATRIX_CaptionSet[i] := MatrixRecords[i].Name;
                                     i := i + 1;
                                     WHILE NextRec("Column Option",MatrixRecords[i],1,FALSE) <> 0 DO BEGIN
                                       MATRIX_CaptionSet[i] := MatrixRecords[i].Name;
                                       i := i + 1;
                                     END;
                                   END;
                                 END;
                                 IF ShowWarning THEN
                                   MATRIX_CurrentNoOfColumns := i
                                 ELSE
                                   MATRIX_CurrentNoOfColumns := i - 1;

                                 MatrixForm.Load(MATRIX_CaptionSet,MatrixRecords,MATRIX_CurrentNoOfColumns,ShowWarning,
                                   DateFilter,ItemFilter,LocationFilter);
                                 MatrixForm.RUNMODAL;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                CaptionML=[ENU=General;
                           NOR=Generelt;
                           SVE=Allm„nt] }

    { 20  ;2   ;Field     ;
                CaptionML=[ENU=Date Filter;
                           NOR=Datofilter;
                           SVE=Datumfilter];
                ToolTipML=[ENU=Specifies the dates that will be used to filter the amounts in the window.;
                           NOR=Angir datoene som skal brukes til † filtrere bel›pene i vinduet.;
                           SVE=Anger datumen som filtrerar beloppen i f”nstret.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=DateFilter;
                OnValidate=BEGIN
                             InvtReportHeader.SETFILTER("Posting Date Filter",DateFilter);
                             DateFilter := InvtReportHeader.GETFILTER("Posting Date Filter");
                             DateFilterOnAfterValidate;
                           END;
                            }

    { 25  ;2   ;Field     ;
                CaptionML=[ENU=Item Filter;
                           NOR=Varefilter;
                           SVE=Artikelfilter];
                ToolTipML=[ENU=Specifies which items the information is shown for.;
                           NOR=Angir hvilke varer informasjonen vises for.;
                           SVE=Anger vilka artiklar som informationen visas f”r.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ItemFilter;
                OnValidate=BEGIN
                             TestWarning;
                             ItemFilterOnAfterValidate;
                           END;

                OnLookup=VAR
                           Item@1002 : Record 27;
                           ItemList@1003 : Page 31;
                         BEGIN
                           Item.SETRANGE(Type,Item.Type::Inventory);
                           ItemList.SETTABLEVIEW(Item);
                           ItemList.LOOKUPMODE := TRUE;
                           IF ItemList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                             ItemList.GETRECORD(Item);
                             Text := Item."No.";
                             EXIT(TRUE);
                           END;
                           EXIT(FALSE);
                         END;
                          }

    { 14  ;2   ;Field     ;
                CaptionML=[ENU=Location Filter;
                           NOR=Lokasjonsfilter;
                           SVE=Lagerst„llefilter];
                ToolTipML=[ENU=Specifies which item locations the information is shown for.;
                           NOR=Angir hvilke varelokasjoner informasjonen vises for.;
                           SVE=Anger vilka artikellagerst„llen som informationen visas f”r.];
                ApplicationArea=#Location;
                SourceExpr=LocationFilter;
                OnValidate=BEGIN
                             TestWarning;
                             LocationFilterOnAfterValidate;
                           END;

                OnLookup=VAR
                           Location@1002 : Record 14;
                           Locations@1003 : Page 15;
                         BEGIN
                           Locations.SETTABLEVIEW(Location);
                           Locations.LOOKUPMODE := TRUE;
                           IF Locations.RUNMODAL = ACTION::LookupOK THEN BEGIN
                             Locations.GETRECORD(Location);
                             Text := Location.Code;
                             EXIT(TRUE);
                           END;
                           EXIT(FALSE);
                         END;
                          }

    { 4   ;2   ;Field     ;
                Name=Show;
                CaptionML=[ENU=Show Warning;
                           NOR=Vis advarsel;
                           SVE=Visa varning];
                ToolTipML=[ENU=Specifies that a messages will be shown in the Warning field of the grid if there are any discrepancies between the inventory totals and G/L totals. If you choose the Warning field, the program gives you more information on what the warning means.;
                           NOR=Angir at en melding blir vist i feltet Advarsel i rutenettet hvis det er avvik mellom lagertotalene og finanssummene. Hvis du velger feltet Advarsel, f†r du mer informasjon om hva advarselen betyr.;
                           SVE=Anger att meddelanden ska visas i f„ltet Varning i rutn„tet om det finns avvikelser mellan lagersummor och redovisningssummor. Om du v„ljer f„ltet Varning f†r du mer information om vad varningen betyder.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ShowWarning;
                Editable=ShowEditable;
                OnValidate=BEGIN
                             ShowWarningOnAfterValidate;
                           END;
                            }

  }
  CODE
  {
    VAR
      MatrixRecords@1158 : ARRAY [32] OF Record 367;
      GLSetup@1002 : Record 98;
      InvtReportHeader@1028 : Record 5845;
      InvtReportEntry@1001 : TEMPORARY Record 5846;
      RowIntegerLine@1005 : Record 2000000026;
      ColIntegerLine@1032 : Record 2000000026;
      MATRIX_CaptionSet@1004 : ARRAY [32] OF Text[100];
      MATRIX_CurrentNoOfColumns@1003 : Integer;
      LineDimCode@1031 : Text[20];
      ColumnDimCode@1020 : Text[20];
      DateFilter@1011 : Text[30];
      ItemFilter@1015 : Code[250];
      LocationFilter@1013 : Code[250];
      Text004@1029 : TextConst 'ENU=Income Statement;NOR=Resultatregnskap;SVE=Resultatr„kning';
      Text005@1030 : TextConst 'ENU=Balance Sheet;NOR=Balanse;SVE=Balansr„kning';
      ShowWarning@1000 : Boolean;
      ShowEditable@19062405 : Boolean INDATASET;

    LOCAL PROCEDURE DimCodeToOption@21(DimCode@1000 : Text[30]) : Integer;
    BEGIN
      CASE DimCode OF
        '':
          EXIT(-1);
        Text005:
          EXIT(0);
        Text004:
          EXIT(1);
        ELSE
          EXIT(-1);
      END;
    END;

    LOCAL PROCEDURE FindRec@59(DimOption@1000 : 'Balance Sheet,Income Statement';VAR DimCodeBuf@1001 : Record 367;Which@1002 : Text[250];IsRow@1008 : Boolean) : Boolean;
    VAR
      Found@1007 : Boolean;
    BEGIN
      CASE DimOption OF
        DimOption::"Balance Sheet",
        DimOption::"Income Statement":
          IF IsRow THEN BEGIN
            IF EVALUATE(RowIntegerLine.Number,DimCodeBuf.Code) THEN;
            Found := RowIntegerLine.FIND(Which);
            IF Found THEN
              CopyDimValueToBuf(RowIntegerLine,DimCodeBuf,IsRow);
          END ELSE BEGIN
            IF EVALUATE(ColIntegerLine.Number,DimCodeBuf.Code) THEN;
            Found := ColIntegerLine.FIND(Which);
            IF Found THEN
              CopyDimValueToBuf(ColIntegerLine,DimCodeBuf,IsRow);
          END;
      END;
      EXIT(Found);
    END;

    LOCAL PROCEDURE NextRec@60(DimOption@1000 : 'Balance Sheet,Income Statement';VAR DimCodeBuf@1001 : Record 367;Steps@1002 : Integer;IsRow@1008 : Boolean) : Integer;
    VAR
      ResultSteps@1007 : Integer;
    BEGIN
      CASE DimOption OF
        DimOption::"Balance Sheet",
        DimOption::"Income Statement":
          IF IsRow THEN BEGIN
            IF EVALUATE(RowIntegerLine.Number,DimCodeBuf.Code) THEN;
            ResultSteps := RowIntegerLine.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyDimValueToBuf(RowIntegerLine,DimCodeBuf,IsRow);
          END ELSE BEGIN
            IF EVALUATE(ColIntegerLine.Number,DimCodeBuf.Code) THEN;
            ResultSteps := ColIntegerLine.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyDimValueToBuf(ColIntegerLine,DimCodeBuf,IsRow);
          END;
      END;
      EXIT(ResultSteps);
    END;

    LOCAL PROCEDURE CopyDimValueToBuf@9(VAR TheDimValue@1000 : Record 2000000026;VAR TheDimCodeBuf@1001 : Record 367;IsRow@1002 : Boolean);
    BEGIN
      WITH InvtReportEntry DO
        CASE TRUE OF
          ((InvtReportHeader."Line Option" = InvtReportHeader."Line Option"::"Balance Sheet") AND IsRow) OR
          ((InvtReportHeader."Column Option" = InvtReportHeader."Column Option"::"Balance Sheet") AND NOT IsRow):
            CASE TheDimValue.Number OF
              1:
                InsertRow('1',FIELDCAPTION(Inventory),0,FALSE,TheDimCodeBuf);
              2:
                InsertRow('2',FIELDCAPTION("Inventory (Interim)"),0,FALSE,TheDimCodeBuf);
              3:
                InsertRow('3',FIELDCAPTION("WIP Inventory"),0,FALSE,TheDimCodeBuf);
              4:
                InsertRow('4',FIELDCAPTION(Total),0,TRUE,TheDimCodeBuf);
              5:
                InsertRow('5',FIELDCAPTION("G/L Total"),0,TRUE,TheDimCodeBuf);
              6:
                InsertRow('6',FIELDCAPTION(Difference),0,TRUE,TheDimCodeBuf);
              7:
                InsertRow('7',FIELDCAPTION(Warning),0,TRUE,TheDimCodeBuf);
            END;
          ((InvtReportHeader."Line Option" = InvtReportHeader."Line Option"::"Income Statement") AND IsRow) OR
          ((InvtReportHeader."Column Option" = InvtReportHeader."Column Option"::"Income Statement") AND NOT IsRow):
            CASE TheDimValue.Number OF
              1:
                InsertRow('1',FIELDCAPTION("Inventory To WIP"),0,FALSE,TheDimCodeBuf);
              2:
                InsertRow('2',FIELDCAPTION("WIP To Interim"),0,FALSE,TheDimCodeBuf);
              3:
                InsertRow('3',FIELDCAPTION("COGS (Interim)"),0,FALSE,TheDimCodeBuf);
              4:
                InsertRow('4',FIELDCAPTION("Direct Cost Applied"),0,FALSE,TheDimCodeBuf);
              5:
                InsertRow('5',FIELDCAPTION("Overhead Applied"),0,FALSE,TheDimCodeBuf);
              6:
                InsertRow('6',FIELDCAPTION("Inventory Adjmt."),0,FALSE,TheDimCodeBuf);
              7:
                InsertRow('7',FIELDCAPTION("Invt. Accrual (Interim)"),0,FALSE,TheDimCodeBuf);
              8:
                InsertRow('8',FIELDCAPTION(COGS),0,FALSE,TheDimCodeBuf);
              9:
                InsertRow('9',FIELDCAPTION("Purchase Variance"),0,FALSE,TheDimCodeBuf);
              10:
                InsertRow('10',FIELDCAPTION("Material Variance"),0,FALSE,TheDimCodeBuf);
              11:
                InsertRow('11',FIELDCAPTION("Capacity Variance"),0,FALSE,TheDimCodeBuf);
              12:
                InsertRow('12',FIELDCAPTION("Subcontracted Variance"),0,FALSE,TheDimCodeBuf);
              13:
                InsertRow('13',FIELDCAPTION("Capacity Overhead Variance"),0,FALSE,TheDimCodeBuf);
              14:
                InsertRow('14',FIELDCAPTION("Mfg. Overhead Variance"),0,FALSE,TheDimCodeBuf);
              15:
                InsertRow('15',FIELDCAPTION(Total),0,TRUE,TheDimCodeBuf);
              16:
                InsertRow('16',FIELDCAPTION("G/L Total"),0,TRUE,TheDimCodeBuf);
              17:
                InsertRow('17',FIELDCAPTION(Difference),0,TRUE,TheDimCodeBuf);
              18:
                InsertRow('18',FIELDCAPTION(Warning),0,TRUE,TheDimCodeBuf);
            END;
        END
    END;

    LOCAL PROCEDURE InsertRow@1(Code1@1000 : Code[10];Name1@1001 : Text[80];Indentation1@1002 : Integer;Bold1@1003 : Boolean;VAR TheDimCodeBuf@1004 : Record 367);
    BEGIN
      WITH TheDimCodeBuf DO BEGIN
        INIT;
        Code := Code1;
        Name := COPYSTR(Name1,1,MAXSTRLEN(Name));
        Indentation := Indentation1;
        "Show in Bold" := Bold1;
      END;
    END;

    LOCAL PROCEDURE TestWarning@2();
    BEGIN
      ShowEditable := TRUE;
      IF ShowWarning THEN BEGIN
        IF (ItemFilter <> '') OR (LocationFilter <> '') THEN BEGIN
          ShowWarning := FALSE;
          ShowEditable := FALSE;
        END;
      END ELSE
        IF (ItemFilter <> '') OR (LocationFilter <> '') THEN BEGIN
          ShowWarning := FALSE;
          ShowEditable := FALSE;
        END;
    END;

    LOCAL PROCEDURE LocationFilterOnAfterValidate@19070361();
    BEGIN
      InvtReportHeader.SETFILTER("Location Filter",LocationFilter);
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE DateFilterOnAfterValidate@19006009();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE ItemFilterOnAfterValidate@19051257();
    BEGIN
      InvtReportHeader.SETFILTER("Item Filter",ItemFilter);
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE ShowWarningOnAfterValidate@19052425();
    BEGIN
      InvtReportHeader."Show Warning" := ShowWarning;
      CurrPage.UPDATE;
    END;

    BEGIN
    END.
  }
}

