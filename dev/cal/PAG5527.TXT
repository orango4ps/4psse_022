OBJECT Page 5527 Purchase Invoice Entity
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    CaptionML=[@@@={Locked};
               ENU=purchaseInvoices;
               NOR=purchaseInvoices;
               SVE=purchaseInvoices];
    SourceTable=Table5477;
    DelayedInsert=Yes;
    PageType=API;
    ChangeTrackingAllowed=Yes;
    EntitySetName=purchaseInvoices;
    EntityName=purchaseInvoice;
    OnOpenPage=BEGIN
                 CheckPermissions;
               END;

    OnAfterGetRecord=VAR
                       PurchInvAggregator@1000 : Codeunit 5529;
                     BEGIN
                       SetCalculatedFields;
                       IF HasWritePermission THEN
                         PurchInvAggregator.RedistributeInvoiceDiscounts(Rec);
                     END;

    OnNewRecord=BEGIN
                  ClearCalculatedFields;
                END;

    OnInsertRecord=VAR
                     PurchInvAggregator@1000 : Codeunit 5529;
                   BEGIN
                     CheckVendor;
                     ProcessBillingPostalAddress;

                     PurchInvAggregator.PropagateOnInsert(Rec,TempFieldBuffer);
                     UpdateDiscount;

                     SetCalculatedFields;

                     PurchInvAggregator.RedistributeInvoiceDiscounts(Rec);

                     EXIT(FALSE);
                   END;

    OnModifyRecord=VAR
                     PurchInvAggregator@1000 : Codeunit 5529;
                   BEGIN
                     IF xRec.Id <> Id THEN
                       ERROR(CannotChangeIDErr);

                     ProcessBillingPostalAddress;

                     PurchInvAggregator.PropagateOnModify(Rec,TempFieldBuffer);
                     UpdateDiscount;

                     SetCalculatedFields;

                     PurchInvAggregator.RedistributeInvoiceDiscounts(Rec);

                     EXIT(FALSE);
                   END;

    OnDeleteRecord=VAR
                     PurchInvAggregator@1000 : Codeunit 5529;
                   BEGIN
                     PurchInvAggregator.PropagateOnDelete(Rec);

                     EXIT(FALSE);
                   END;

    ODataKeyFields=Id;
  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Name=Group;
                GroupType=Repeater }

    { 3   ;2   ;Field     ;
                Name=id;
                CaptionML=[@@@={Locked};
                           ENU=id;
                           NOR=id;
                           SVE=id];
                ApplicationArea=#All;
                SourceExpr=Id;
                Editable=FALSE;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO(Id));
                           END;
                            }

    { 4   ;2   ;Field     ;
                Name=number;
                CaptionML=[@@@={Locked};
                           ENU=Number;
                           NOR=Number;
                           SVE=Number];
                ApplicationArea=#All;
                SourceExpr="No.";
                Editable=FALSE;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("No."));
                           END;
                            }

    { 5   ;2   ;Field     ;
                Name=invoiceDate;
                CaptionML=[@@@={Locked};
                           ENU=invoiceDate;
                           NOR=invoiceDate;
                           SVE=invoiceDate];
                ApplicationArea=#All;
                SourceExpr="Document Date";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Document Date"));
                             WORKDATE("Document Date"); // TODO: replicate page logic and set other dates appropriately
                           END;
                            }

    { 6   ;2   ;Field     ;
                Name=dueDate;
                CaptionML=[@@@={Locked};
                           ENU=dueDate;
                           NOR=dueDate;
                           SVE=dueDate];
                ApplicationArea=#All;
                SourceExpr="Due Date";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Due Date"));
                           END;
                            }

    { 18  ;2   ;Field     ;
                Name=vendorInvoiceNumber;
                CaptionML=[@@@={Locked};
                           ENU=vendorInvoiceNumber;
                           NOR=vendorInvoiceNumber;
                           SVE=vendorInvoiceNumber];
                ApplicationArea=#All;
                SourceExpr="Vendor Invoice No.";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Vendor Invoice No."));
                           END;
                            }

    { 7   ;2   ;Field     ;
                Name=vendorId;
                CaptionML=[@@@={Locked};
                           ENU=vendorId;
                           NOR=vendorId;
                           SVE=vendorId];
                ApplicationArea=#All;
                SourceExpr="Vendor Id";
                OnValidate=BEGIN
                             Vendor.SETRANGE(Id,"Vendor Id");
                             IF NOT Vendor.FINDFIRST THEN
                               ERROR(CouldNotFindVendorErr);

                             "Buy-from Vendor No." := Vendor."No.";
                             RegisterFieldSet(FIELDNO("Vendor Id"));
                             RegisterFieldSet(FIELDNO("Buy-from Vendor No."));
                           END;
                            }

    { 19  ;2   ;Field     ;
                Name=vendorNumber;
                CaptionML=[@@@={Locked};
                           ENU=vendorNumber;
                           NOR=vendorNumber;
                           SVE=vendorNumber];
                ApplicationArea=#All;
                SourceExpr="Buy-from Vendor No.";
                OnValidate=BEGIN
                             IF Vendor."No." <> '' THEN
                               EXIT;

                             IF NOT Vendor.GET("Buy-from Vendor No.") THEN
                               ERROR(CouldNotFindVendorErr);

                             "Vendor Id" := Vendor.Id;
                             RegisterFieldSet(FIELDNO("Vendor Id"));
                             RegisterFieldSet(FIELDNO("Buy-from Vendor No."));
                           END;
                            }

    { 20  ;2   ;Field     ;
                Name=vendorName;
                CaptionML=[@@@={Locked};
                           ENU=vendorName;
                           NOR=vendorName;
                           SVE=vendorName];
                ApplicationArea=#All;
                SourceExpr="Buy-from Vendor Name" }

    { 21  ;2   ;Field     ;
                Name=buyFromAddress;
                CaptionML=[@@@={Locked};
                           ENU=buyFromAddress;
                           NOR=buyFromAddress;
                           SVE=buyFromAddress];
                ToolTipML=[ENU=Specifies the billing address of the Purchase Invoice.;
                           NOR=Angir fakturaadressen for kj›psfakturaen.;
                           SVE=Anger faktureringsadressen i ink”psfakturan.];
                ApplicationArea=#All;
                SourceExpr=BillingPostalAddressJSONText;
                OnValidate=BEGIN
                             BillingPostalAddressSet := TRUE;
                           END;

                ODataEDMType=POSTALADDRESS }

    { 8   ;2   ;Field     ;
                Name=currencyCode;
                CaptionML=[@@@={Locked};
                           ENU=currencyCode;
                           NOR=currencyCode;
                           SVE=currencyCode];
                ApplicationArea=#All;
                SourceExpr=CurrencyCodeTxt;
                OnValidate=BEGIN
                             "Currency Code" :=
                               GraphMgtGeneralTools.TranslateCurrencyCodeToNAVCurrencyCode(
                                 LCYCurrencyCode,COPYSTR(CurrencyCodeTxt,1,MAXSTRLEN(LCYCurrencyCode)));
                             RegisterFieldSet(FIELDNO("Currency Code"));
                           END;
                            }

    { 22  ;2   ;Field     ;
                Name=pricesIncludeTax;
                CaptionML=[@@@={Locked};
                           ENU=pricesIncludeTax;
                           NOR=pricesIncludeTax;
                           SVE=pricesIncludeTax];
                ApplicationArea=#All;
                SourceExpr="Prices Including VAT";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Prices Including VAT"));
                           END;
                            }

    { 23  ;2   ;Part      ;
                Name=purchaseInvoiceLines;
                CaptionML=[@@@={Locked};
                           ENU=Lines;
                           NOR=Lines;
                           SVE=Lines];
                ApplicationArea=#All;
                SubPageLink=Document Id=FIELD(Id);
                PagePartID=Page5528;
                EntitySetName=purchaseInvoiceLines;
                EntityName=purchaseInvoiceLine;
                PartType=Page }

    { 9   ;2   ;Part      ;
                Name=pdfDocument;
                CaptionML=[@@@={Locked};
                           ENU=PDF Document;
                           NOR=PDF Document;
                           SVE=PDF Document];
                ApplicationArea=#All;
                SubPageLink=Document Id=FIELD(Id);
                PagePartID=Page5529;
                EntitySetName=pdfDocument;
                EntityName=pdfDocument;
                PartType=Page }

    { 12  ;2   ;Field     ;
                Name=discountAmount;
                CaptionML=[@@@={Locked};
                           ENU=discountAmount;
                           NOR=discountAmount;
                           SVE=discountAmount];
                ApplicationArea=#All;
                SourceExpr="Invoice Discount Amount";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Invoice Discount Amount"));
                             InvoiceDiscountAmount := "Invoice Discount Amount";
                             DiscountAmountSet := TRUE;
                           END;
                            }

    { 13  ;2   ;Field     ;
                Name=discountAppliedBeforeTax;
                CaptionML=[@@@={Locked};
                           ENU=discountAppliedBeforeTax;
                           NOR=discountAppliedBeforeTax;
                           SVE=discountAppliedBeforeTax];
                ApplicationArea=#All;
                SourceExpr="Discount Applied Before Tax" }

    { 11  ;2   ;Field     ;
                Name=totalAmountExcludingTax;
                CaptionML=[@@@={Locked};
                           ENU=totalAmountExcludingTax;
                           NOR=totalAmountExcludingTax;
                           SVE=totalAmountExcludingTax];
                ApplicationArea=#All;
                SourceExpr=Amount;
                Editable=FALSE }

    { 14  ;2   ;Field     ;
                Name=totalTaxAmount;
                CaptionML=[@@@={Locked};
                           ENU=totalTaxAmount;
                           NOR=totalTaxAmount;
                           SVE=totalTaxAmount];
                ApplicationArea=#All;
                SourceExpr="Total Tax Amount";
                Editable=FALSE;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Total Tax Amount"));
                           END;
                            }

    { 17  ;2   ;Field     ;
                Name=totalAmountIncludingTax;
                CaptionML=[@@@={Locked};
                           ENU=totalAmountIncludingTax;
                           NOR=totalAmountIncludingTax;
                           SVE=totalAmountIncludingTax];
                ApplicationArea=#All;
                SourceExpr="Amount Including VAT";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Amount Including VAT"));
                           END;
                            }

    { 15  ;2   ;Field     ;
                Name=status;
                CaptionML=[@@@={Locked};
                           ENU=status;
                           NOR=status;
                           SVE=status];
                ApplicationArea=#All;
                SourceExpr=Status;
                Editable=FALSE }

    { 16  ;2   ;Field     ;
                Name=lastModifiedDateTime;
                CaptionML=[@@@={Locked};
                           ENU=lastModifiedDateTime;
                           NOR=lastModifiedDateTime;
                           SVE=lastModifiedDateTime];
                ApplicationArea=#All;
                SourceExpr="Last Modified Date Time" }

  }
  CODE
  {
    VAR
      TempFieldBuffer@1006 : TEMPORARY Record 8450;
      Vendor@1005 : Record 23;
      GraphMgtGeneralTools@1004 : Codeunit 5465;
      LCYCurrencyCode@1003 : Code[10];
      CurrencyCodeTxt@1002 : Text;
      BillingPostalAddressJSONText@1001 : Text;
      BillingPostalAddressSet@1000 : Boolean;
      CannotChangeIDErr@1010 : TextConst '@@@={Locked};ENU=The id cannot be changed.;NOR=The id cannot be changed.;SVE=The id cannot be changed.';
      VendorNotProvidedErr@1009 : TextConst '@@@={Locked};ENU=A vendorNumber or a vendorID must be provided.;NOR=A vendorNumber or a vendorID must be provided.;SVE=A vendorNumber or a vendorID must be provided.';
      CouldNotFindVendorErr@1008 : TextConst '@@@={Locked};ENU=The vendor cannot be found.;NOR=The vendor cannot be found.;SVE=The vendor cannot be found.';
      DraftInvoiceActionErr@1011 : TextConst '@@@={Locked};ENU=The action can be applied to a draft invoice only.;NOR=The action can be applied to a draft invoice only.;SVE=The action can be applied to a draft invoice only.';
      CannotFindInvoiceErr@1007 : TextConst '@@@={Locked};ENU=The invoice cannot be found.;NOR=The invoice cannot be found.;SVE=The invoice cannot be found.';
      DiscountAmountSet@1013 : Boolean;
      InvoiceDiscountAmount@1012 : Decimal;
      HasWritePermission@1014 : Boolean;
      PurchaseInvoicePermissionsErr@1015 : TextConst '@@@={Locked};ENU=You do not have permissions to read Purchase Invoices.;NOR=You do not have permissions to read Purchase Invoices.;SVE=You do not have permissions to read Purchase Invoices.';

    LOCAL PROCEDURE SetCalculatedFields@6();
    VAR
      GraphMgtPurchaseInvoice@1000 : Codeunit 5527;
    BEGIN
      BillingPostalAddressJSONText := GraphMgtPurchaseInvoice.PayToVendorAddressToJSON(Rec);
      CurrencyCodeTxt := GraphMgtGeneralTools.TranslateNAVCurrencyCodeToCurrencyCode(LCYCurrencyCode,"Currency Code");
    END;

    LOCAL PROCEDURE ClearCalculatedFields@10();
    BEGIN
      CLEAR(BillingPostalAddressJSONText);
      CLEAR(InvoiceDiscountAmount);
      CLEAR(DiscountAmountSet);
      TempFieldBuffer.DELETEALL;
    END;

    LOCAL PROCEDURE RegisterFieldSet@11(FieldNo@1000 : Integer);
    VAR
      LastOrderNo@1001 : Integer;
    BEGIN
      LastOrderNo := 1;
      IF TempFieldBuffer.FINDLAST THEN
        LastOrderNo := TempFieldBuffer.Order + 1;

      CLEAR(TempFieldBuffer);
      TempFieldBuffer.Order := LastOrderNo;
      TempFieldBuffer."Table ID" := DATABASE::"Purch. Inv. Entity Aggregate";
      TempFieldBuffer."Field ID" := FieldNo;
      TempFieldBuffer.INSERT;
    END;

    LOCAL PROCEDURE CheckVendor@1();
    VAR
      BlankGUID@1000 : GUID;
    BEGIN
      IF ("Buy-from Vendor No." = '') AND
         ("Vendor Id" = BlankGUID)
      THEN
        ERROR(VendorNotProvidedErr);
    END;

    LOCAL PROCEDURE CheckPermissions@4();
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      PurchaseHeader.SETRANGE("Document Type",PurchaseHeader."Document Type"::Invoice);
      IF NOT PurchaseHeader.READPERMISSION THEN
        ERROR(PurchaseInvoicePermissionsErr);

      HasWritePermission := PurchaseHeader.WRITEPERMISSION;
    END;

    LOCAL PROCEDURE ProcessBillingPostalAddress@5();
    VAR
      GraphMgtPurchaseInvoice@1000 : Codeunit 5527;
    BEGIN
      IF NOT BillingPostalAddressSet THEN
        EXIT;

      GraphMgtPurchaseInvoice.ProcessComplexTypes(Rec,BillingPostalAddressJSONText);

      IF xRec."Buy-from Address" <> "Buy-from Address" THEN
        RegisterFieldSet(FIELDNO("Buy-from Address"));

      IF xRec."Buy-from Address 2" <> "Buy-from Address 2" THEN
        RegisterFieldSet(FIELDNO("Buy-from Address 2"));

      IF xRec."Buy-from City" <> "Buy-from City" THEN
        RegisterFieldSet(FIELDNO("Buy-from City"));

      IF xRec."Buy-from Country/Region Code" <> "Buy-from Country/Region Code" THEN
        RegisterFieldSet(FIELDNO("Buy-from Country/Region Code"));

      IF xRec."Buy-from Post Code" <> "Buy-from Post Code" THEN
        RegisterFieldSet(FIELDNO("Buy-from Post Code"));

      IF xRec."Buy-from County" <> "Buy-from County" THEN
        RegisterFieldSet(FIELDNO("Buy-from County"));
    END;

    LOCAL PROCEDURE UpdateDiscount@3();
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchInvAggregator@1001 : Codeunit 5529;
      PurchCalcDiscByType@1000 : Codeunit 66;
    BEGIN
      IF Posted THEN
        EXIT;

      IF NOT DiscountAmountSet THEN BEGIN
        PurchInvAggregator.RedistributeInvoiceDiscounts(Rec);
        EXIT;
      END;

      PurchaseHeader.GET("Document Type"::Invoice,"No.");
      PurchCalcDiscByType.ApplyInvDiscBasedOnAmt(InvoiceDiscountAmount,PurchaseHeader);
    END;

    LOCAL PROCEDURE GetDraftInvoice@36(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
      IF Posted THEN
        ERROR(DraftInvoiceActionErr);

      PurchaseHeader.SETRANGE(Id,Id);
      IF NOT PurchaseHeader.FINDFIRST THEN
        ERROR(CannotFindInvoiceErr);
    END;

    LOCAL PROCEDURE PostInvoice@20(VAR PurchaseHeader@1001 : Record 38;VAR PurchInvHeader@1000 : Record 122);
    VAR
      LinesInstructionMgt@1005 : Codeunit 1320;
      PreAssignedNo@1006 : Code[20];
    BEGIN
      LinesInstructionMgt.PurchaseCheckAllLinesHaveQuantityAssigned(PurchaseHeader);
      PreAssignedNo := PurchaseHeader."No.";
      PurchaseHeader.SendToPosting(CODEUNIT::"Purch.-Post");
      PurchInvHeader.SETCURRENTKEY("Pre-Assigned No.");
      PurchInvHeader.SETRANGE("Pre-Assigned No.",PreAssignedNo);
      PurchInvHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE SetActionResponse@47(VAR ActionContext@1004 : DotNet "'Microsoft.Dynamics.Nav.Ncl, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Runtime.WebServiceActionContext";InvoiceId@1000 : GUID);
    VAR
      ODataActionManagement@1003 : Codeunit 6711;
    BEGIN
      ODataActionManagement.AddKey(FIELDNO(Id),InvoiceId);
      ODataActionManagement.SetDeleteResponseLocation(ActionContext,PAGE::"Purchase Invoice Entity");
    END;

    [ServiceEnabled]
    [External]
    PROCEDURE Post@18(VAR ActionContext@1000 : DotNet "'Microsoft.Dynamics.Nav.Ncl, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Runtime.WebServiceActionContext");
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchInvHeader@1002 : Record 122;
    BEGIN
      GetDraftInvoice(PurchaseHeader);
      PostInvoice(PurchaseHeader,PurchInvHeader);
      SetActionResponse(ActionContext,PurchInvHeader.Id);
    END;

    BEGIN
    END.
  }
}

