OBJECT Codeunit 915 Assembly Info-Pane Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.03;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Item@1001 : Record 27;
      AvailableToPromise@1005 : Codeunit 5790;

    [External]
    PROCEDURE CalcAvailability@18(VAR AsmLine@1000 : Record 901) : Decimal;
    VAR
      GrossRequirement@1002 : Decimal;
      ScheduledReceipt@1003 : Decimal;
      PeriodType@1006 : 'Day,Week,Month,Quarter,Year';
      LookaheadDateformula@1005 : DateFormula;
    BEGIN
      IF GetItem(AsmLine) THEN BEGIN
        SetItemFilter(Item,AsmLine);

        EXIT(
          AvailableToPromise.QtyAvailabletoPromise(
            Item,
            GrossRequirement,
            ScheduledReceipt,
            CalcAvailabilityDate(AsmLine),
            PeriodType,
            LookaheadDateformula));
      END;
    END;

    LOCAL PROCEDURE CalcAvailabilityDate@27(AsmLine@1000 : Record 901) : Date;
    BEGIN
      IF AsmLine."Due Date" <> 0D THEN
        EXIT(AsmLine."Due Date");

      EXIT(WORKDATE);
    END;

    [External]
    PROCEDURE CalcAvailableInventory@9(VAR AsmLine@1000 : Record 901) : Decimal;
    BEGIN
      IF GetItem(AsmLine) THEN BEGIN
        SetItemFilter(Item,AsmLine);

        EXIT(AvailableToPromise.CalcAvailableInventory(Item));
      END;
    END;

    [External]
    PROCEDURE CalcScheduledReceipt@21(VAR AsmLine@1001 : Record 901) : Decimal;
    BEGIN
      IF GetItem(AsmLine) THEN BEGIN
        SetItemFilter(Item,AsmLine);

        EXIT(AvailableToPromise.CalcScheduledReceipt(Item));
      END;
    END;

    [External]
    PROCEDURE CalcGrossRequirement@23(VAR AsmLine@1001 : Record 901) : Decimal;
    BEGIN
      IF GetItem(AsmLine) THEN BEGIN
        SetItemFilter(Item,AsmLine);

        EXIT(AvailableToPromise.CalcGrossRequirement(Item));
      END;
    END;

    [External]
    PROCEDURE CalcReservedReceipt@25(VAR AsmLine@1001 : Record 901) : Decimal;
    BEGIN
      IF GetItem(AsmLine) THEN BEGIN
        SetItemFilter(Item,AsmLine);

        EXIT(AvailableToPromise.CalcReservedReceipt(Item));
      END;
    END;

    [External]
    PROCEDURE CalcReservedRequirement@26(VAR AsmLine@1000 : Record 901) : Decimal;
    BEGIN
      IF GetItem(AsmLine) THEN BEGIN
        SetItemFilter(Item,AsmLine);

        EXIT(AvailableToPromise.CalcReservedRequirement(Item));
      END;
    END;

    [External]
    PROCEDURE LookupItem@7(AsmLine@1000 : Record 901);
    VAR
      IsHandled@1001 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeLookupItem(AsmLine,IsHandled);
      IF IsHandled THEN
        EXIT;

      AsmLine.TESTFIELD(Type,AsmLine.Type::Item);
      AsmLine.TESTFIELD("No.");
      GetItem(AsmLine);
      PAGE.RUNMODAL(PAGE::"Item Card",Item);
    END;

    LOCAL PROCEDURE GetItem@24(AsmLine@1000 : Record 901) : Boolean;
    BEGIN
      WITH Item DO BEGIN
        IF (AsmLine.Type <> AsmLine.Type::Item) OR (AsmLine."No." = '') THEN
          EXIT(FALSE);

        IF AsmLine."No." <> "No." THEN
          GET(AsmLine."No.");
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE SetItemFilter@4(VAR Item@1000 : Record 27;AsmLine@1001 : Record 901);
    BEGIN
      Item.RESET;
      Item.SETRANGE("Date Filter",0D,CalcAvailabilityDate(AsmLine));
      Item.SETRANGE("Variant Filter",AsmLine."Variant Code");
      Item.SETRANGE("Location Filter",AsmLine."Location Code");
      Item.SETRANGE("Drop Shipment Filter",FALSE);
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeLookupItem@1(AssemblyLine@1000 : Record 901;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

