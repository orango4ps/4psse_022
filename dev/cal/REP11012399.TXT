OBJECT Report 11012399 Create Project Cost Plus (Est)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Projekt Regieeintrag erstellen (Kalkulation);
               ENU=Create Project Cost Plus (Estimate);
               NLD=Project regiemutaties aanmaken (Calculatie);
               NOR=Opprette prosjekt med selvkost (kalkyle);
               SVE=Skapa projekt med sj„lvkostnad (kalkyl)];
    ProcessingOnly=Yes;
  }
  DATASET
  {
    { 4870;    ;DataItem;                    ;
               DataItemTable=Table11012019;
               DataItemTableView=SORTING(Project No.,Principal,Commission No.,Settl.Sheet No.,Line No.);
               OnPreDataItem=BEGIN
                               IF EstimateFilter = '' THEN
                                 ERROR(Text000);
                             END;

               OnAfterGetRecord=BEGIN
                                  CurrReport.BREAK;
                                END;

               ReqFilterFields=Project No.,Principal,Commission No.,Settl.Sheet No. }

    { 5444;    ;DataItem;                    ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=CONST(1));
               OnAfterGetRecord=VAR
                                  Estimate@1100529802 : Record 11012151;
                                  EstimateLine@1100529800 : Record 11072072;
                                  CostType@1100529801 : Integer;
                                  Window@1100529805 : Dialog;
                                  Counter@1100529804 : Integer;
                                  CounterTotal@1100529803 : Integer;
                                BEGIN
                                  Estimate.RESET;
                                  Estimate.SETFILTER("No.", EstimateFilter);
                                  IF Estimate.FINDSET THEN BEGIN
                                    REPEAT
                                      Window.OPEN(STRSUBSTNO(Text001, Estimate. "No.") + Text002);
                                      Surcharge := CalcSurcharge(Estimate);

                                      EstimateLine.RESET;
                                      EstimateLine.SETFILTER("Estimate No.", Estimate."No.");
                                      IF SubEstFilter <> '' THEN
                                        EstimateLine.SETFILTER("Sub-Estimate No.", SubEstFilter);
                                      IF EstPartFilter <> '' THEN
                                        EstimateLine.SETFILTER(Part, EstPartFilter);
                                      IF StatusFilter <> '' THEN
                                        EstimateLine.SETFILTER("Line Status", StatusFilter);
                                      IF EstimateLine.FINDSET THEN BEGIN
                                        CounterTotal := EstimateLine.COUNT;
                                        REPEAT
                                          Counter := Counter + 1;
                                          Window.UPDATE(1, ROUND(Counter / CounterTotal * 10000, 1));
                                          FOR CostType := 1 TO 5 DO BEGIN  //DP00887
                                            IF CostTypeValid(EstimateLine, CostType) THEN
                                              InsertProjectCostPlusEntry(EstimateLine, CostType);
                                          END;
                                        UNTIL EstimateLine.NEXT = 0;
                                      END;
                                      Window.CLOSE;
                                    UNTIL Estimate.NEXT = 0;
                                  END;
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnOpenPage=BEGIN
                   TransferCommentLines := TRUE; // **4PS MVOS M28906
                 END;

    }
    CONTROLS
    {
      { 1100525000;;Container;
                  ContainerType=ContentArea }

      { 1100525001;1;Group  ;
                  CaptionML=[DEU=Optionen;
                             ENU=Options;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ];
                  GroupType=Group }

      { 1100525002;2;Group  ;
                  CaptionML=[DEU=šbertragen von;
                             ENU=Transfer from;
                             NLD=Overzetten van;
                             NOR=Overf›ring fra;
                             SVE=™verf”ring fr†n];
                  GroupType=Group }

      { 1100525003;3;Field  ;
                  Name=Estimate;
                  CaptionML=[DEU=Kalkulation;
                             ENU=Estimate;
                             NLD=Calculatie;
                             NOR=Kalkyle;
                             SVE=Kalkyl];
                  SourceExpr=EstimateFilter;
                  OnValidate=VAR
                               Estimate@1100525000 : Record 11012151;
                             BEGIN
                               IF NOT Estimate.GET(EstimateFilter) THEN
                                 EstimateDescription := ''
                               ELSE
                                 EstimateDescription := Estimate.Description;
                             END;

                  OnLookup=VAR
                             Estimate@1100525000 : Record 11012151;
                           BEGIN
                             Estimate.RESET;
                             //DP00887.sn
                             Estimate.SETRANGE("RAW Estimate", FALSE);
                             //DP00887.en
                             IF PAGE.RUNMODAL(0, Estimate) = ACTION::LookupOK THEN BEGIN
                                EstimateFilter := Estimate."No.";
                                EstimateDescription := Estimate.Description;
                             END;

                             RequestOptionsPage.UPDATE(TRUE);
                           END;
                            }

      { 1100525004;3;Field  ;
                  Name=Sub Estimate;
                  CaptionML=[DEU=Teilkalkulation;
                             ENU=Sub Estimate;
                             NLD=Deelcalculatie;
                             NOR=Delkalkyle;
                             SVE=Delkalkyl];
                  SourceExpr=SubEstFilter;
                  OnValidate=VAR
                               SubEstimate@1100525003 : Record 11072074;
                               Level@1100525002 : Integer;
                               Chapter@1100525001 : Code[20];
                               Paragraph@1100525000 : Code[20];
                             BEGIN
                               IF SubEstFilter <> '' THEN
                                 IF STRPOS(SubEstFilter, '..') = 0 THEN
                                   IF FormatMgt.Numeric(SubEstFilter) THEN
                                     FormatMgt.FormatSubEstimate(SubEstFilter, Chapter, Paragraph, Level, EstimateFilter, FALSE);

                               IF NOT SubEstimate.GET(EstimateFilter, SubEstFilter) THEN
                                 SubEstDescription := ''
                               ELSE
                                 SubEstDescription := SubEstimate.Description;
                             END;

                  OnLookup=VAR
                             SubEstimate@1100525000 : Record 11072074;
                           BEGIN
                             SubEstimate.RESET;
                             SubEstimate.SETRANGE("Estimate No.", EstimateFilter);
                             IF PAGE.RUNMODAL(0, SubEstimate) = ACTION::LookupOK THEN BEGIN
                                SubEstFilter := SubEstimate."Sub-Estimate No.";
                                SubEstDescription := SubEstimate.Description;
                             END;

                             RequestOptionsPage.UPDATE(TRUE);
                           END;
                            }

      { 1100525005;3;Field  ;
                  Name=Part;
                  CaptionML=[DEU=Teil;
                             ENU=Part;
                             NLD=Onderdeel;
                             NOR=Del;
                             SVE=Del];
                  SourceExpr=EstPartFilter;
                  OnValidate=VAR
                               SubEstimatePart@1100525000 : Record 11072073;
                             BEGIN
                               IF EstPartFilter <> '' THEN
                                 IF STRPOS(EstPartFilter, '..') = 0 THEN
                                   IF FormatMgt.Numeric(EstPartFilter) THEN
                                     FormatMgt.FormatElem(EstPartFilter, 1, '');

                               SubEstimatePart.RESET;
                               SubEstimatePart.SETRANGE("Estimate No.", EstimateFilter);
                               IF SubEstFilter <> '' THEN
                                 SubEstimatePart.SETFILTER("Sub-Estimate No.", SubEstFilter);
                               IF EstPartFilter <> '' THEN
                                 SubEstimatePart.SETFILTER(Part, EstPartFilter);
                               IF SubEstimatePart.COUNT > 1 THEN
                                 EstPartDescription := ''
                               ELSE
                                 IF SubEstimatePart.FINDFIRST THEN
                                   EstPartDescription := SubEstimatePart.Description;
                             END;

                  OnLookup=VAR
                             SubEstimatePart@1100525000 : Record 11072073;
                           BEGIN
                             SubEstimatePart.RESET;
                             SubEstimatePart.SETRANGE("Estimate No.", EstimateFilter);
                             IF SubEstFilter <> '' THEN
                               SubEstimatePart.SETFILTER("Sub-Estimate No.", SubEstFilter);
                             IF PAGE.RUNMODAL(0, SubEstimatePart) = ACTION::LookupOK THEN BEGIN
                                SubEstimatePart.CALCFIELDS("Sub-Estimate Description");
                                SubEstFilter := SubEstimatePart."Sub-Estimate No.";
                                SubEstDescription := SubEstimatePart."Sub-Estimate Description";
                                EstPartFilter := SubEstimatePart.Part;
                                EstPartDescription := SubEstimatePart.Description;
                             END;

                             RequestOptionsPage.UPDATE(TRUE);
                           END;
                            }

      { 1100525006;3;Field  ;
                  Name=Status;
                  CaptionML=[DEU=Status;
                             ENU=Status;
                             NLD=Status;
                             NOR=Status;
                             SVE=Status];
                  SourceExpr=StatusFilter;
                  OnValidate=VAR
                               LineStatus@1100525000 : Record 11012158;
                             BEGIN
                               IF NOT LineStatus.GET(StatusFilter) THEN
                                 StatusDescription := ''
                               ELSE
                                 StatusDescription := LineStatus.Description;
                             END;

                  OnLookup=VAR
                             LineStatus@1100525000 : Record 11012158;
                           BEGIN
                             IF PAGE.RUNMODAL(PAGE::"Line Statuses", LineStatus) = ACTION::LookupOK THEN BEGIN
                                StatusFilter := LineStatus.Status;
                                StatusDescription := LineStatus.Description;
                             END;
                             RequestOptionsPage.UPDATE(TRUE);
                           END;
                            }

      { 1100525007;3;Field  ;
                  Name=Transfer Zero Lines;
                  CaptionML=[DEU=šbertragen Nullzeilen;
                             ENU=Transfer Zero Lines;
                             NLD=Overzetten nulregels;
                             NOR=Overf›r nullrader;
                             SVE=™verf”r nollrader];
                  SourceExpr=TransferZeroLines }

      { 1100525008;3;Field  ;
                  Name=Transfer Comment Lines;
                  CaptionML=[DEU=šbertragen Bemerkungen;
                             ENU=Transfer Comment Lines;
                             NLD=Overnemen opmerkingsregels;
                             NOR=Overf›r kommentarrader;
                             SVE=™verf”r kommentarsrader];
                  SourceExpr=TransferCommentLines }

      { 1100525009;3;Field  ;
                  Name=Calculate Settlement Sheet;
                  CaptionML=[DEU=Endbl„tter verrechnen;
                             ENU=Calculate Settlement Sheet;
                             NLD=Staartbladen verrekenen;
                             NOR=Beregn oppgj›rsskjema;
                             SVE=Ber„kna avr„kningsark];
                  SourceExpr=CalcSettlementSheet }

      { 1100525010;3;Field  ;
                  Name=Calculate with Summary Sheet;
                  CaptionML=[DEU=Verrechnen mit Endblatt;
                             ENU=Calculate with Summary Sheet;
                             NLD=Verrekenen met staartblad;
                             NOR=Beregn med sammendragsark;
                             SVE=Ber„kna med sammandragsark];
                  SourceExpr=Summary;
                  Editable=CalcSettlementSheet;
                  OnValidate=VAR
                               SummarySheet@1100525000 : Record 11012172;
                             BEGIN
                               SummarySheet.GET(EstimateFilter, Summary);
                             END;

                  OnLookup=VAR
                             SummarySheet@1100525000 : Record 11012172;
                           BEGIN
                             SummarySheet.RESET;
                             SummarySheet.SETRANGE("Estimate No.", EstimateFilter);
                             IF PAGE.RUNMODAL(PAGE::"Summary Sheet List", SummarySheet) = ACTION::LookupOK THEN
                               Summary := SummarySheet.Summary;
                           END;
                            }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      FormatMgt@1100529808 : Codeunit 11012022;
      EstimateFilter@1100529809 : Code[250];
      SubEstFilter@1100529807 : Code[250];
      EstPartFilter@1100529806 : Code[250];
      StatusFilter@1100529805 : Code[250];
      Summary@1100529811 : Code[10];
      EstimateDescription@1100529813 : Text[50];
      SubEstDescription@1100529804 : Text[50];
      EstPartDescription@1100529803 : Text[50];
      StatusDescription@1100529802 : Text[50];
      CalcSettlementSheet@1100529800 : Boolean INDATASET;
      TransferCommentLines@1100529801 : Boolean;
      Text000@1100529814 : TextConst 'DEU=Kalkulationsnr. ist nicht eingegeben worden!;ENU=Estimate No. is empty!;NLD=Calculatienr. is niet ingevuld!;NOR=Kalkylenr er tomt.;SVE=Kalkylnr „r tomt.';
      TransferZeroLines@1100529810 : Boolean;
      Surcharge@1100529812 : Decimal;
      Text001@1100529819 : TextConst 'DEU=Regieeintr„ge werden aufgrund der Kalkulation %1 erstellt \\;ENU=Creating Cost Plus Entries from Estimate %1 \\;NLD=Regiemutaties worden aangemaakt op basis van Calculatie %1 \\;NOR=Oppretter rapporterte selvkoster fra kalkyle %1 \\;SVE=Skapar redovisade sj„lvkostnader fr†n kalkyl%1 \\';
      Text002@1100529818 : TextConst 'DEU=Prozentsatz fertig     @1@@@@@@@@@@@@@\;ENU=Percentage Finished  @1@@@@@@@@@@@@@\;NLD=Percentage gereed  @1@@@@@@@@@@@@@\;NOR=Prosent ferdig  @1@@@@@@@@@@@@@\;SVE=Procent f„rdigt  @1@@@@@@@@@@@@@\';

    PROCEDURE InsertProjectCostPlusEntry@1100529825(EstimateLine@1100529802 : Record 11072072;CostType@1100529803 : Integer);
    VAR
      ProjectCostPlusEntry@1100529800 : Record 11012019;
      EstimateSetup@1100529804 : Record 11012150;
      LineNo@1100529801 : Integer;
      LineQuan@1100525000 : Decimal;
    BEGIN
      ProjectCostPlusEntry.RESET;
      ProjectCostPlusEntry.SETRANGE("Project No.", "Project Cost Plus Entry".GETFILTER("Project No."));
      ProjectCostPlusEntry.SETRANGE(Principal, "Project Cost Plus Entry".GETFILTER(Principal));
      ProjectCostPlusEntry.SETRANGE("Commission No.", "Project Cost Plus Entry".GETFILTER("Commission No."));
      ProjectCostPlusEntry.SETRANGE("Settl.Sheet No.", "Project Cost Plus Entry".GETFILTER("Settl.Sheet No."));
      IF ProjectCostPlusEntry.FINDLAST THEN
        LineNo := ProjectCostPlusEntry."Line No." + 10000
      ELSE
        LineNo := 10000;

      ProjectCostPlusEntry.INIT;
      ProjectCostPlusEntry.VALIDATE("Project No.", "Project Cost Plus Entry".GETFILTER("Project No."));
      ProjectCostPlusEntry.Principal := "Project Cost Plus Entry".GETFILTER(Principal);
      ProjectCostPlusEntry."Commission No." := "Project Cost Plus Entry".GETFILTER("Commission No.");
      ProjectCostPlusEntry."Settl.Sheet No." := "Project Cost Plus Entry".GETFILTER("Settl.Sheet No.");
      ProjectCostPlusEntry."Line No." := LineNo;
      ProjectCostPlusEntry.INSERT(TRUE);  //DP00887: get currency required for validate FCY-LCY

      ProjectCostPlusEntry.VALIDATE(Element, EstimateLine.Element);
      ProjectCostPlusEntry.VALIDATE(Quantity, EstimateLine.Quantity);
      ProjectCostPlusEntry.VALIDATE("Unit of Measure", EstimateLine."Unit of Measure");

      EstimateSetup.GET();
      //DP00887.sn
      LineQuan := EstimateLine."Time Quantity" * EstimateLine.Quantity;
      IF LineQuan = 0 THEN LineQuan := 1;
      //DP00887.en

      CASE CostType OF
        1 :
          BEGIN
            ProjectCostPlusEntry."Cost Type" := ProjectCostPlusEntry."Cost Type"::Labor;
            IF EstimateLine."Cost Object Labor" <> '' THEN
              ProjectCostPlusEntry.VALIDATE("Cost Object", EstimateLine."Cost Object Labor");
            IF ProjectCostPlusEntry."Cost Object" = '' THEN
              ProjectCostPlusEntry.VALIDATE("Cost Object", EstimateSetup."Absence Value Labor");
            ProjectCostPlusEntry.VALIDATE("Basic Price (LCY)", EstimateLine."Labor Cost Amount"/LineQuan);  //DP00887
          END;
        2 :
          BEGIN
            ProjectCostPlusEntry."Cost Type" := ProjectCostPlusEntry."Cost Type"::Material;
            IF EstimateLine."Trade Item" <> '' THEN BEGIN
              ProjectCostPlusEntry."Vendor (Trade Item)" := EstimateLine."Vendor (Trade Item)";
              ProjectCostPlusEntry.VALIDATE("Trade Item", EstimateLine."Trade Item");
            END ELSE BEGIN
              IF EstimateLine."Basic Item" <> '' THEN BEGIN
               ProjectCostPlusEntry.Manufacturer := EstimateLine.Manufacturer;
               ProjectCostPlusEntry.VALIDATE("Basic Item", EstimateLine."Basic Item");
              END ELSE BEGIN
                IF EstimateLine."Item No." <> '' THEN
                  ProjectCostPlusEntry.VALIDATE("Item No.", EstimateLine."Item No.");
              END;
            END;
            IF EstimateLine."Cost Object Price" <> '' THEN
              ProjectCostPlusEntry.VALIDATE("Cost Object", EstimateLine."Cost Object Price");
            IF ProjectCostPlusEntry."Cost Object" = '' THEN
              ProjectCostPlusEntry.VALIDATE("Cost Object", EstimateSetup."Absence Value Material");
            ProjectCostPlusEntry.VALIDATE("Basic Price (LCY)", EstimateLine."Material Cost Amount"/LineQuan);  //DP00887
          END;
        3 :
          BEGIN
            ProjectCostPlusEntry."Cost Type" := ProjectCostPlusEntry."Cost Type"::Subcontracting;
            IF EstimateLine."Cost Object Price" <> '' THEN
              ProjectCostPlusEntry.VALIDATE("Cost Object", EstimateLine."Cost Object Price");
            IF ProjectCostPlusEntry."Cost Object" = '' THEN
              ProjectCostPlusEntry.VALIDATE("Cost Object", EstimateSetup."Absence Value Subcontracting");
            ProjectCostPlusEntry.VALIDATE("Basic Price (LCY)", EstimateLine."Subcontracting Cost Amount"/LineQuan);  //DP00887
          END;
        4 :
          BEGIN
            ProjectCostPlusEntry."Cost Type" := ProjectCostPlusEntry."Cost Type"::Plant;
            IF EstimateLine."Cost Object Price" <> '' THEN
              ProjectCostPlusEntry.VALIDATE("Cost Object", EstimateLine."Cost Object Price");
            IF ProjectCostPlusEntry."Cost Object" = '' THEN
              ProjectCostPlusEntry.VALIDATE("Cost Object", EstimateSetup."Absence Value Plant");
            ProjectCostPlusEntry.VALIDATE("Basic Price (LCY)", EstimateLine."Plant Cost Amount"/LineQuan);  //DP00887
          END;
        5 :
          BEGIN
            ProjectCostPlusEntry."Cost Type" := ProjectCostPlusEntry."Cost Type"::Sundry;
            IF EstimateLine."Cost Object Price" <> '' THEN
              ProjectCostPlusEntry.VALIDATE("Cost Object", EstimateLine."Cost Object Price");
            IF ProjectCostPlusEntry."Cost Object" = '' THEN
              ProjectCostPlusEntry.VALIDATE("Cost Object", EstimateSetup."Absence Value Sundry Cost");
            ProjectCostPlusEntry.VALIDATE("Basic Price (LCY)", EstimateLine."Sundry Cost Amount"/LineQuan);  //DP00887
          END;
      END;

      IF STRLEN(EstimateLine.Description) > MAXSTRLEN(ProjectCostPlusEntry.Description) THEN BEGIN
        ProjectCostPlusEntry.Description := COPYSTR(EstimateLine.Description, 1, MAXSTRLEN(ProjectCostPlusEntry.Description));
        ProjectCostPlusEntry."Description 2" :=
          COPYSTR(EstimateLine.Description, MAXSTRLEN(ProjectCostPlusEntry.Description) + 1, MAXSTRLEN(ProjectCostPlusEntry.Description));
      END ELSE
        ProjectCostPlusEntry.Description := EstimateLine.Description;

      IF ProjectCostPlusEntry."Cost Type" = ProjectCostPlusEntry."Cost Type"::Subcontracting THEN
        ProjectCostPlusEntry.Vendor := EstimateLine.Subcontractor
      ELSE
        ProjectCostPlusEntry.Vendor := EstimateLine.Vendor;

      ProjectCostPlusEntry."Cost Component" :=
        GetCostComponent(EstimateLine."Cost Component", ProjectCostPlusEntry."Cost Object",
          ProjectCostPlusEntry."Project No.", FALSE);

      //ProjectCostPlusEntry."Sales Discount % (Item)" := EstimateLine."Sales Discount %";   //DP00887

      IF Surcharge <> 0 THEN
        ProjectCostPlusEntry.VALIDATE("Surcharge %", Surcharge);

      ProjectCostPlusEntry.MODIFY(TRUE);  //DP00887

      CopyCommentLines(EstimateLine, ProjectCostPlusEntry);
    END;

    PROCEDURE CopyCommentLines@1100529800(EstimateLine@1100529800 : Record 11072072;ProjectCostPlusEntry@1100529805 : Record 11012019);
    VAR
      CommentLineFrom@1100529801 : Record 11020595;
      CommentLineTo@1100529802 : Record 11020634;
      RecRef@1100529803 : RecordRef;
      LineNo@1100529804 : Integer;
    BEGIN
      IF NOT TransferCommentLines THEN
        EXIT;

      CommentLineFrom.RESET;
      CommentLineFrom.SETRANGE("Table Name", CommentLineFrom."Table Name"::Estimate);
      CommentLineFrom.SETRANGE(Group, '');
      CommentLineFrom.SETRANGE("No.", '');
      CommentLineFrom.SETRANGE("Estimate No.", EstimateLine."Estimate No.");
      CommentLineFrom.SETRANGE("Sub-Estimate No.", EstimateLine."Sub-Estimate No.");
      CommentLineFrom.SETRANGE("Part Group", EstimateLine."Part Group");
      CommentLineFrom.SETRANGE(Part, EstimateLine.Part);
      CommentLineFrom.SETRANGE("Estimate Line No.", EstimateLine."Line No.");
      IF CommentLineFrom.FINDSET THEN BEGIN
        RecRef.GETTABLE(ProjectCostPlusEntry);

        CommentLineTo.RESET;
        CommentLineTo.SETRANGE("Table Name", CommentLineTo."Table Name"::"Settlement Sheet");
        CommentLineTo.SETFILTER("Record ID", FORMAT(RecRef.RECORDID()));
        IF CommentLineTo.FINDLAST THEN
          LineNo := CommentLineTo."Line No." + 10000
        ELSE
          LineNo := 10000;

        REPEAT
          CommentLineTo.INIT;
          CommentLineTo."Table Name" := CommentLineTo."Table Name"::"Settlement Sheet";
          CommentLineTo."Record ID" := RecRef.RECORDID();
          CommentLineTo."Line No." := LineNo;
          CommentLineTo.Date := CommentLineFrom.Date;
          CommentLineTo.Code := CommentLineFrom.Code;
          CommentLineTo.Comment := CommentLineFrom.Comment;
          CommentLineTo."Comment Code" := CommentLineFrom."Comment Code";
          CommentLineTo."Created by" := CommentLineFrom."Created by";
          CommentLineTo."Time Created" := CommentLineFrom."Time Created";
          CommentLineTo."Line Break" := CommentLineFrom."Line Break";
          CommentLineTo.INSERT(TRUE);

          LineNo += 10000;
        UNTIL CommentLineFrom.NEXT = 0;
      END;
    END;

    PROCEDURE CostTypeValid@1210190005(EstimateLine@1100529800 : Record 11072072;CostType@1210190000 : Integer) : Boolean;
    BEGIN
      WITH EstimateLine DO BEGIN
        CASE CostType OF
          1 :
            EXIT(((Norm <> 0) AND
                  ("Cost Type (Hours)" = "Cost Type (Hours)"::Labor)) OR  //DP00887
                 ((Norm = 0) AND
                  ("Cost Object Labor" <> '') AND
                  (TransferZeroLines = TRUE)));
          2 :
            EXIT((("Net Cost Price" <> 0) AND
                  ("Cost Type (Price)" = "Cost Type (Price)"::Material)) OR  //DP00887
                 (("Net Cost Price" = 0) AND
                  ("Cost Object Price" <> '') AND
                  (TransferZeroLines = TRUE)));
          3 :
            EXIT((("Net Cost Price" <> 0) AND
                  ("Cost Type (Price)" = "Cost Type (Price)"::Subcontracting)) OR  //DP00887
                 (("Net Cost Price" = 0) AND
                 ("Cost Object Price" <> '') AND
                 (TransferZeroLines = TRUE)));
          4 :
            EXIT((("Net Cost Price" <> 0) AND
                  ("Cost Type (Price)" = "Cost Type (Price)"::Plant)) OR  //DP00887
                 (("Net Cost Price" = 0) AND
                  ("Cost Object Price" <> '') AND
                  (TransferZeroLines = TRUE)));
          5 :
            EXIT((("Net Cost Price" <> 0) AND
                  ("Cost Type (Price)" = "Cost Type (Price)"::Sundry)) OR  //DP00887
                 (("Net Cost Price" = 0) AND
                  ("Cost Object Price" <> '') AND
                  (TransferZeroLines = TRUE)));
        END;
      END;
    END;

    PROCEDURE GetCostComponent@1100485004(CostComponent@1100485004 : Code[20];CostObject@1100485000 : Code[20];ProjectNo@1100485001 : Code[20];AdditionalCost@1100525002 : Boolean) : Code[20];
    VAR
      DimensionValue@1100485002 : Record 349;
      DimMgt@1100485003 : Codeunit 408;
    BEGIN
      IF CostComponent <> '' THEN
        EXIT(CostComponent);

      IF CostObject <> '' THEN BEGIN
        DimMgt.GetDimValueRec(2, CostObject, DimensionValue, TRUE, ProjectNo);
        IF NOT DimensionValue.Blocked THEN
          EXIT(DimensionValue."Cost Component");
      END;

      EXIT('');
    END;

    PROCEDURE CalcSurcharge@1100529801(Estimate@1100529801 : Record 11012151) : Decimal;
    VAR
      SummarySheet@1100529800 : Record 11012172;
      HourDec@1100525000 : Decimal;
      LaborDec@1100525002 : Decimal;
      ItemDec@1100525003 : Decimal;
      SubcDec@1100525004 : Decimal;
      PlantDec@1100525005 : Decimal;
      SundryDec@1100525006 : Decimal;
      TotalDec@1100525001 : Decimal;
    BEGIN
      IF NOT CalcSettlementSheet THEN
        EXIT(0);

      IF Summary = '' THEN
        Summary := Estimate."Summary Source (Cost)";

      IF SummarySheet.GET(Estimate."No.", Summary) THEN BEGIN
        //DP00887.sn
        SummarySheet.GetTotals(HourDec, LaborDec, ItemDec, SubcDec, PlantDec, SundryDec, TotalDec);
        IF TotalDec <> 0 THEN
          EXIT((SummarySheet.GetSummaryCost(TotalDec) / TotalDec) * 100);
        //DP00887.en
      END;

      EXIT(0);
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

