OBJECT Codeunit 11012863 NEN2767 Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            TestNEN2767Licensed;
          END;

  }
  CODE
  {
    VAR
      Text000@1100528600 : TextConst 'DEU=Es gibt keine Lizenz fÅr Granulat NEN2767;ENU=There is no License for Granule NEN2767;NLD="U heeft geen licentierechten voor granule NEN2767 ";NOR=Det finnes ingen Lisens for Granul NEN2767';
      Text002@1100528602 : TextConst 'DEU=Max. Anzahl Abbildungen bereits erreicht;ENU=Max. No. of Images already reached;NLD=Max. aantal afbeeldingen per element is reeds gereikt;SVE=Max antal bilder har nÜtts';

    PROCEDURE GetConditionScore@1100528600(INEN2767VersionCode@1100528604 : Code[10];IInterest@1100528600 : 'Severe,Serious,Minor';IIntensity@1100528601 : ' ,Initial Stage,Advanced Stage,Final Stage';IScale@1100528602 : ' ,Incidental,Local,Regular,Significant,General') : Integer;
    VAR
      NEN2767ConditionScore@1100528603 : Record 11128778;
    BEGIN
      IF NOT IsNEN2767Licensed THEN
        EXIT;

      IF NEN2767ConditionScore.GET(INEN2767VersionCode, IInterest, IIntensity, IScale) THEN
        EXIT(NEN2767ConditionScore.Score)
      ELSE
        EXIT(NEN2767ConditionScore.Score::"1");
    END;

    PROCEDURE GetObjectConditionScore@1100528603(IServiceObjectNo@1100528600 : Code[20];VAR IOMeasurementDate@1100528601 : Date) Score : Integer;
    VAR
      NEN2767LTMPLine@1100528603 : Record 11128785;
    BEGIN
      IF NOT IsNEN2767Licensed THEN
        EXIT(0);
      IOMeasurementDate := 0D;
      NEN2767LTMPLine.SETRANGE("Location Type", NEN2767LTMPLine."Location Type"::"Service Location");
      NEN2767LTMPLine.SETRANGE("Object No.", IServiceObjectNo);
      NEN2767LTMPLine.SETFILTER(Score, '<>%1', 0);
      IF NEN2767LTMPLine.ISEMPTY THEN
        EXIT(0);
      IF NEN2767LTMPLine.FINDSET THEN
        REPEAT
          NEN2767LTMPLine.CALCFIELDS("Measurement Date");
          IF IOMeasurementDate < NEN2767LTMPLine."Measurement Date" THEN BEGIN
            IOMeasurementDate := NEN2767LTMPLine."Measurement Date";
            Score := NEN2767LTMPLine.Score;
          END;
        UNTIL NEN2767LTMPLine.NEXT = 0;
    END;

    PROCEDURE GetScaleByPercentage@1100528605(IScalePercentage@1100528600 : Decimal) OScale : Integer;
    VAR
      NEN2767ConditionMeasLine@1100528601 : Record 11128777;
    BEGIN
      IF NOT IsNEN2767Licensed THEN
        EXIT;
      CASE TRUE OF
        IScalePercentage = 0:
          OScale := NEN2767ConditionMeasLine.Scale::" ";
        (IScalePercentage > 0) AND (IScalePercentage < 2):
          OScale := NEN2767ConditionMeasLine.Scale::Incidental;
        (IScalePercentage >= 2) AND (IScalePercentage < 10):
          OScale := NEN2767ConditionMeasLine.Scale::"Local";
        (IScalePercentage >= 10) AND (IScalePercentage < 30):
          OScale := NEN2767ConditionMeasLine.Scale::Regular;
        (IScalePercentage >= 30) AND (IScalePercentage <= 70):
          OScale := NEN2767ConditionMeasLine.Scale::Significant;
        IScalePercentage > 70:
          OScale := NEN2767ConditionMeasLine.Scale::General;
      END;
    END;

    PROCEDURE GetScoreByCorrectionFactor@1100528604(ICorrectionFactor@1100528600 : Decimal) OSCale : Integer;
    VAR
      NEN2767ConditionMeasLine@1100528601 : Record 11128777;
    BEGIN
      IF NOT IsNEN2767Licensed THEN
        EXIT(1);
      IF (ICorrectionFactor <= 1.01) THEN
        OSCale := NEN2767ConditionMeasLine.Score::"1";
      IF (ICorrectionFactor > 1.01) AND (ICorrectionFactor <= 1.04) THEN
        OSCale := NEN2767ConditionMeasLine.Score::"2";
      IF (ICorrectionFactor > 1.04) AND (ICorrectionFactor <= 1.15) THEN
        OSCale := NEN2767ConditionMeasLine.Score::"3";
      IF (ICorrectionFactor > 1.15) AND (ICorrectionFactor <= 1.4) THEN
        OSCale := NEN2767ConditionMeasLine.Score::"4";
      IF (ICorrectionFactor > 1.4) AND (ICorrectionFactor <= 1.78) THEN
        OSCale := NEN2767ConditionMeasLine.Score::"5";
      IF (ICorrectionFactor > 1.78) THEN
        OSCale := NEN2767ConditionMeasLine.Score::"6";
    END;

    PROCEDURE GetCorrectionFactorByScore@1100528611(IScore@1100528600 : ',1,2,3,4,5,6') : Decimal;
    BEGIN
      CASE IScore OF
        IScore::"1":
          EXIT(1);
        IScore::"2":
          EXIT(1.02);
        IScore::"3":
          EXIT(1.1);
        IScore::"4":
          EXIT(1.3);
        IScore::"5":
          EXIT(1.7);
        IScore::"6":
          EXIT(2);
      ELSE
        EXIT(1);
      END;
    END;

    PROCEDURE IsNEN2767Licensed@1100528606() : Boolean;
    VAR
      LicensePermission@1100528600 : Record 2000000043;
    BEGIN
      IF LicensePermission.GET(LicensePermission."Object Type"::Table, DATABASE::"NEN2767 Element") THEN
        EXIT(LicensePermission."Execute Permission" <> LicensePermission."Execute Permission"::" ");
    END;

    PROCEDURE TestNEN2767Licensed@1100528610();
    BEGIN
      IF NOT IsNEN2767Licensed THEN
        ERROR(Text000);
    END;

    PROCEDURE GetReplacementValue@1100528608(IServiceObjectNo@1100528600 : Code[20];ISeekDate@1100528601 : Date;VAR OFoundDate@1100528603 : Date) : Decimal;
    VAR
      ObjectReplacementValue@1100528602 : Record 11128779;
    BEGIN
      ObjectReplacementValue.SETRANGE("Service Object No.", IServiceObjectNo);
      ObjectReplacementValue.SETFILTER("Index Date", '..%1', ISeekDate);
      IF ObjectReplacementValue.FINDLAST THEN BEGIN
        OFoundDate := ObjectReplacementValue."Index Date";
        EXIT(ObjectReplacementValue."Replacement Value");
      END;
    END;

    PROCEDURE GetIndexedReplacementValue@1100528601(IServiceObjectNo@1100528601 : Code[20];ISeekDate@1100528600 : Date;IPriceIndexCode@1100528602 : Code[10]) ReplacementValue : Decimal;
    VAR
      LTMPPriceIndexHeader@1100528603 : Record 11128794;
      FoundDate@1100528604 : Date;
    BEGIN
      ReplacementValue := GetReplacementValue(IServiceObjectNo, ISeekDate, FoundDate);
      IF LTMPPriceIndexHeader.GET(IPriceIndexCode) AND (FoundDate <> 0D) THEN
        ReplacementValue := LTMPPriceIndexHeader.GetIndexedAmount(DATE2DMY(FoundDate, 3), ReplacementValue, DATE2DMY(ISeekDate, 3));
    END;

    PROCEDURE ShowReplacementValues@1100528607(IServiceObjectNo@1100528601 : Code[20]);
    VAR
      ObjectReplacementValue@1100528600 : Record 11128779;
    BEGIN
      TestNEN2767Licensed;
      ObjectReplacementValue.SETRANGE("Service Object No.", IServiceObjectNo);
      PAGE.RUNMODAL(0, ObjectReplacementValue);
    END;

    PROCEDURE NormalizeBuildingPartCode@1100528628(IBuildingPartCode@1100528600 : Text) : Code[10];
    VAR
      RegExpManagement@1100528601 : Codeunit 11012262;
    BEGIN
      WITH RegExpManagement DO
        IF RegExpFindMatches(IBuildingPartCode, '^([A-Z])([1-9])$') THEN
          EXIT(GetSubMatchFirstMatch(0) + '0' + GetSubMatchFirstMatch(1))
        ELSE
          EXIT(IBuildingPartCode);
    END;

    PROCEDURE NormalizeDefectCode@1100528635(IDefectCode@1100528601 : Code[10]) : Code[10];
    VAR
      RegExpManagement@1100528600 : Codeunit 11012262;
    BEGIN
      WITH RegExpManagement DO
        IF RegExpFindMatches(IDefectCode, '^([A-Z])([1-9])([A-Z]{2}\d{2})$') THEN
          EXIT(GetSubMatchFirstMatch(0) + '0' + GetSubMatchFirstMatch(1) + GetSubMatchFirstMatch(2))
        ELSE
          EXIT(IDefectCode);
    END;

    PROCEDURE GetInfoFromDefectCode@1100528640(IDefectCode@1100528600 : Code[10];VAR OBuildingPartCode@1100528601 : Code[10];VAR OInterest@1100528604 : Option;VAR ODefectType@1100528602 : Code[10]);
    VAR
      NEN2767Defect@1100528605 : Record 11128773;
      RegExpManagement@1100528603 : Codeunit 11012262;
    BEGIN
      WITH RegExpManagement DO BEGIN
        IDefectCode := NormalizeDefectCode(IDefectCode);
        IF RegExpFindMatches(IDefectCode, '^([A-Z]\d+)([A-Z])([A-Z])\d+$') THEN BEGIN
          OBuildingPartCode := GetSubMatchFirstMatch(0);
          CASE GetSubMatchFirstMatch(1) OF
            'E':
              OInterest := NEN2767Defect.Interest::Severe;
            'S':
              OInterest := NEN2767Defect.Interest::Serious;
            'G':
              OInterest := NEN2767Defect.Interest::Minor;
          END;
          ODefectType := GetSubMatchFirstMatch(2);
        END;
      END;
    END;

    PROCEDURE GetConditionByDegradation@1100528629(ILifeSpan@1100528600 : DateFormula;IAgeInYears@1100528601 : Integer) Score : Integer;
    VAR
      DatetimeMgt@1100528605 : Codeunit 11020218;
      TimesPerYear@1100528606 : Decimal;
      LifeSpanInYears@1100528604 : Integer;
      ScoreDec@1100528602 : Decimal;
      Math@1100528603 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Math";
    BEGIN
      IF FORMAT(ILifeSpan) = '' THEN
        EXIT(1);
      TimesPerYear := DatetimeMgt.ConvertDateFormulaToTimesPerYear(ILifeSpan);
      IF TimesPerYear = 0 THEN
        EXIT(1);
      LifeSpanInYears := ROUND(1 / TimesPerYear);
      IF IAgeInYears >= LifeSpanInYears THEN
        EXIT(6);
      //C = 1 + ´log (1 - t / L)
      ScoreDec := 1 + Math.Log(1 - (IAgeInYears / LifeSpanInYears), 0.5);
      Score := ROUND(ScoreDec, 1, '<');
      IF Score > 6 THEN
        Score := 6;
    END;

    PROCEDURE CopyConditionMeasurement@1100528602(INEN2767LTMPHeader@1100528600 : Record 11128784;IToMeasurementDate@1100528604 : Date;IIncludeScenarios@1100528605 : Boolean);
    VAR
      ToNEN2767LTMPHeader@1100528603 : Record 11128784;
      FromNEN2767LTMPLine@1100528602 : Record 11128785;
      ToNEN2767LTMPLine@1100528601 : Record 11128785;
      FromLTMPScenarioHeader@1100528606 : Record 11128791;
      FromLTMPScenarioLine@1100528607 : Record 11128792;
      ToLTMPScenarioHeader@1100528609 : Record 11128791;
      ToLTMPScenarioLine@1100528608 : Record 11128792;
    BEGIN
      ToNEN2767LTMPHeader := INEN2767LTMPHeader;
      ToNEN2767LTMPHeader."Entry ID" := 0;
      ToNEN2767LTMPHeader."Measurement Date" := IToMeasurementDate;
      IF NOT IIncludeScenarios THEN
        ToNEN2767LTMPHeader.VALIDATE("Scenario No.", '');
      ToNEN2767LTMPHeader.INSERT(TRUE);

      IF IIncludeScenarios THEN BEGIN
        FromLTMPScenarioHeader.SETRANGE("Header Entry ID", INEN2767LTMPHeader."Entry ID");
        IF FromLTMPScenarioHeader.FINDSET THEN
          REPEAT
            ToLTMPScenarioHeader := FromLTMPScenarioHeader;
            ToLTMPScenarioHeader."Header Entry ID" := ToNEN2767LTMPHeader."Entry ID";
            ToLTMPScenarioHeader.INSERT(TRUE);

            FromLTMPScenarioLine.SETRANGE("Header Entry ID", FromLTMPScenarioHeader."Header Entry ID");
            FromLTMPScenarioLine.SETRANGE("Scenario No.", FromLTMPScenarioHeader."Scenario No.");
            FromLTMPScenarioLine.SETRANGE("Version No.", FromLTMPScenarioHeader."Version No.");
            IF FromLTMPScenarioLine.FINDSET THEN
              REPEAT
                ToLTMPScenarioLine := FromLTMPScenarioLine;
                ToLTMPScenarioLine."Header Entry ID" := ToLTMPScenarioHeader."Header Entry ID";
                ToLTMPScenarioLine.Priority := 0;
                ToLTMPScenarioLine.INSERT(TRUE);
              UNTIL FromLTMPScenarioLine.NEXT = 0;
          UNTIL FromLTMPScenarioHeader.NEXT = 0;
      END;

      FromNEN2767LTMPLine.SETRANGE("Header Entry ID", INEN2767LTMPHeader."Entry ID");
      IF FromNEN2767LTMPLine.FINDSET THEN
        REPEAT
          ToNEN2767LTMPLine.INIT;
          ToNEN2767LTMPLine := FromNEN2767LTMPLine;
          ToNEN2767LTMPLine."Header Entry ID" := ToNEN2767LTMPHeader."Entry ID";
          ToNEN2767LTMPLine.VALIDATE("Defect Code", '');
          ToNEN2767LTMPLine.VALIDATE("Defect Position", '');
          ToNEN2767LTMPLine.VALIDATE(Interest, ToNEN2767LTMPLine.Interest::" ");
          ToNEN2767LTMPLine.VALIDATE("No Defects", FALSE);
          ToNEN2767LTMPLine.VALIDATE("Measure Code", '');
          ToNEN2767LTMPLine.VALIDATE("Measure Description", '');
          ToNEN2767LTMPLine.VALIDATE("Cycle (Years) (Needed)", 0);
          ToNEN2767LTMPLine.VALIDATE("Starting Year (Needed)", 0);
          ToNEN2767LTMPLine.VALIDATE("Ending Year (Needed)", 0);
          ToNEN2767LTMPLine.VALIDATE(Ratio, 0);
          ToNEN2767LTMPLine.VALIDATE("Measure Quantity", 0);
          ToNEN2767LTMPLine.VALIDATE(Degradation, FALSE);
          ToNEN2767LTMPLine.Comment := '';
          ToNEN2767LTMPLine.INSERT(TRUE);

          CopyElementPictureToLine(FromNEN2767LTMPLine, ToNEN2767LTMPLine);
        UNTIL FromNEN2767LTMPLine.NEXT = 0;

      ToNEN2767LTMPHeader.Recalculate;
    END;

    PROCEDURE CopyScenario@1100528630(ILTMPScenarioHeader@1100528600 : Record 11128791;ToScenarioNo@1100528604 : Code[10];ToVersionNo@1100528603 : Code[10]);
    VAR
      ToLTMPScenarioHeader@1100528605 : Record 11128791;
      FromLTMPScenarioLine@1100528606 : Record 11128792;
      ToLTMPScenarioLine@1100528601 : Record 11128792;
      FromLTMPPolicyRiskValue@1100528602 : Record 11128789;
      ToLTMPPolicyRiskValue@1100528607 : Record 11128789;
    BEGIN
      ToLTMPScenarioHeader := ILTMPScenarioHeader;
      ToLTMPScenarioHeader."Scenario No." := ToScenarioNo;
      ToLTMPScenarioHeader."Version No." := ToVersionNo;
      ToLTMPScenarioHeader.Final := FALSE;
      ToLTMPScenarioHeader.INSERT(FALSE);

      FromLTMPScenarioLine.SETRANGE("Header Entry ID", ILTMPScenarioHeader."Header Entry ID");
      FromLTMPScenarioLine.SETRANGE("Scenario No.", ILTMPScenarioHeader."Scenario No.");
      FromLTMPScenarioLine.SETRANGE("Version No.", ILTMPScenarioHeader."Version No.");
      IF FromLTMPScenarioLine.FINDSET THEN
        REPEAT
          ToLTMPScenarioLine := FromLTMPScenarioLine;
          ToLTMPScenarioLine."Scenario No." := ToScenarioNo;
          ToLTMPScenarioLine."Version No." := ToVersionNo;
          ToLTMPScenarioLine.INSERT(TRUE);

          FromLTMPPolicyRiskValue.SETRANGE("Header Entry ID", FromLTMPScenarioLine."Header Entry ID");
          FromLTMPPolicyRiskValue.SETRANGE("Scenario No.", FromLTMPScenarioLine."Scenario No.");
          FromLTMPPolicyRiskValue.SETRANGE("Version No.", FromLTMPScenarioLine."Version No.");
          FromLTMPPolicyRiskValue.SETRANGE("Line No.", FromLTMPScenarioLine."Line No.");
          IF FromLTMPPolicyRiskValue.FINDSET THEN
            REPEAT
              ToLTMPPolicyRiskValue := FromLTMPPolicyRiskValue;
              ToLTMPPolicyRiskValue."Scenario No." := ToScenarioNo;
              ToLTMPPolicyRiskValue."Version No." := ToVersionNo;
              ToLTMPPolicyRiskValue.INSERT(TRUE);
            UNTIL FromLTMPPolicyRiskValue.NEXT = 0;
        UNTIL FromLTMPScenarioLine.NEXT = 0;
    END;

    PROCEDURE SelectStructureLineCode@1100528631(INEN2767LTMPHeader@1100528600 : Record 11128784;VAR IOStructureLineCode@1100528602 : Code[20]) : Boolean;
    VAR
      ServiceLocStructureLine@1100528601 : Record 11071720;
      ServiceSurveyStructureLine@1100528603 : Record 11071806;
    BEGIN
      CASE INEN2767LTMPHeader."Location Type" OF
        INEN2767LTMPHeader."Location Type"::"Service Location":
          BEGIN
            ServiceLocStructureLine.SETRANGE("Service Location No.", INEN2767LTMPHeader."Location Code");
            ServiceLocStructureLine.SETRANGE("Structure No.", INEN2767LTMPHeader."Structure No.");
            ServiceLocStructureLine.SETRANGE("Object Line", FALSE);
            IF IOStructureLineCode <> '' THEN BEGIN
              ServiceLocStructureLine.SETRANGE("No.", IOStructureLineCode);
              IF ServiceLocStructureLine.FINDFIRST THEN;
              ServiceLocStructureLine.SETRANGE("No.");
            END;
            IF PAGE.RUNMODAL(PAGE::"Service Loc.Structure Lines", ServiceLocStructureLine) = ACTION::LookupOK THEN BEGIN
              IOStructureLineCode := ServiceLocStructureLine."No.";
              EXIT(TRUE);
            END;
          END;
        INEN2767LTMPHeader."Location Type"::"Survey Location":
          BEGIN
            ServiceSurveyStructureLine.SETRANGE("Survey No.", INEN2767LTMPHeader."Survey No.");
            ServiceSurveyStructureLine.SETRANGE("Location Code", INEN2767LTMPHeader."Location Code");
            ServiceSurveyStructureLine.SETRANGE("Structure No.", INEN2767LTMPHeader."Structure No.");
            ServiceSurveyStructureLine.SETRANGE("Object Line", FALSE);
            IF IOStructureLineCode <> '' THEN BEGIN
              ServiceSurveyStructureLine.SETRANGE(Code, IOStructureLineCode);
              IF ServiceSurveyStructureLine.FINDFIRST THEN;
              ServiceSurveyStructureLine.SETRANGE(Code);
            END;
            IF PAGE.RUNMODAL(PAGE::"Service Survey Line List", ServiceSurveyStructureLine) = ACTION::LookupOK THEN BEGIN
              IOStructureLineCode := ServiceSurveyStructureLine.Code;
              EXIT(TRUE);
            END;
          END;
      END;
    END;

    PROCEDURE SelectStructureLineCodeAndObjectNo@1100528632(INEN2767LTMPHeader@1100528600 : Record 11128784;VAR IOStructureLineCode@1100528602 : Code[20];VAR IOObjectNo@1100528603 : Code[20];VAR IOObjectSeqNo@1100528605 : Integer) : Boolean;
    VAR
      ServiceLocStructureLine@1100528601 : Record 11071720;
      ServiceSurveyStructureLine@1100528604 : Record 11071806;
    BEGIN
      CASE INEN2767LTMPHeader."Location Type" OF
        INEN2767LTMPHeader."Location Type"::"Service Location":
          BEGIN
            ServiceLocStructureLine.SETRANGE("Service Location No.", INEN2767LTMPHeader."Location Code");
            ServiceLocStructureLine.SETRANGE("Structure No.", INEN2767LTMPHeader."Structure No.");
            IF IOStructureLineCode <> '' THEN BEGIN
              ServiceLocStructureLine.SETRANGE("No.", IOStructureLineCode);
              IF ServiceLocStructureLine.FINDSET THEN;
            END;
            IF IOObjectNo <> '' THEN BEGIN
              ServiceLocStructureLine.SETRANGE("Service Object No.", IOObjectNo);
              IF ServiceLocStructureLine.FINDFIRST THEN;
              ServiceLocStructureLine.SETRANGE("Service Object No.");
            END;
            IF PAGE.RUNMODAL(PAGE::"Service Loc.Structure Lines", ServiceLocStructureLine) = ACTION::LookupOK THEN BEGIN
              IOStructureLineCode := ServiceLocStructureLine."No.";
              IOObjectNo := ServiceLocStructureLine."Service Object No.";
              EXIT(TRUE);
            END;
          END;
        INEN2767LTMPHeader."Location Type"::"Survey Location":
          BEGIN
            ServiceSurveyStructureLine.SETRANGE("Survey No.", INEN2767LTMPHeader."Survey No.");
            ServiceSurveyStructureLine.SETRANGE("Location Code", INEN2767LTMPHeader."Location Code");
            ServiceSurveyStructureLine.SETRANGE("Structure No.", INEN2767LTMPHeader."Structure No.");
            IF IOStructureLineCode <> '' THEN BEGIN
              ServiceSurveyStructureLine.SETRANGE(Code, IOStructureLineCode);
              IF ServiceSurveyStructureLine.FINDSET THEN;
            END;
            IF IOObjectNo <> '' THEN BEGIN
              ServiceSurveyStructureLine.SETRANGE("Seq. No.", IOObjectSeqNo);
              IF ServiceSurveyStructureLine.FINDFIRST THEN;
              ServiceSurveyStructureLine.SETRANGE("Seq. No.");
            END;
            IF PAGE.RUNMODAL(PAGE::"Service Survey Line List", ServiceSurveyStructureLine) = ACTION::LookupOK THEN BEGIN
              IOStructureLineCode := ServiceSurveyStructureLine.Code;
              IOObjectSeqNo := ServiceSurveyStructureLine."Seq. No.";
              EXIT(TRUE);
            END;
          END;
      END;
    END;

    PROCEDURE GetScenariosToShow@1100528609(ILocationType@1100528602 : Option;ILocationCode@1100528603 : Code[20];ISurveyNo@1100528604 : Code[20];IChartCode@1100528606 : Code[10];VAR OLTMPScenarioHeader@1100528600 : Record 11128791);
    VAR
      NEN2767LTMPHeader@1100528601 : Record 11128784;
      LTMPScenarioHeader@1100528605 : Record 11128791;
    BEGIN
      OLTMPScenarioHeader.RESET;
      NEN2767LTMPHeader.SETRANGE("Location Type", ILocationType);
      NEN2767LTMPHeader.SETRANGE("Location Code", ILocationCode);
      NEN2767LTMPHeader.SETRANGE("Survey No.", ISurveyNo);
      IF NEN2767LTMPHeader.FINDSET THEN
        REPEAT
          LTMPScenarioHeader.SETRANGE("Header Entry ID", NEN2767LTMPHeader."Entry ID");
          LTMPScenarioHeader.SETRANGE("Chart Code", IChartCode);
          IF LTMPScenarioHeader.FINDSET THEN
            REPEAT
              OLTMPScenarioHeader := LTMPScenarioHeader;
              OLTMPScenarioHeader.MARK(TRUE);
            UNTIL LTMPScenarioHeader.NEXT = 0;
        UNTIL NEN2767LTMPHeader.NEXT = 0;
      OLTMPScenarioHeader.MARKEDONLY(TRUE);
    END;

    PROCEDURE GetSelectedScenarios@1100528612(ILocationType@1100528603 : Option;ILocationCode@1100528602 : Code[20];ISurveyNo@1100528601 : Code[20];VAR OLTMPScenarioHeader@1100528600 : Record 11128791);
    BEGIN
      OLTMPScenarioHeader.RESET;
      OLTMPScenarioHeader.SETRANGE("Location Type", ILocationType);
      OLTMPScenarioHeader.SETRANGE("Location Code", ILocationCode);
      OLTMPScenarioHeader.SETRANGE("Survey No.", ISurveyNo);
    END;

    LOCAL PROCEDURE "-----"@1100528613();
    BEGIN
    END;

    PROCEDURE SelectAndAddElementPicture@1100528616(INEN2767LTMPLine@1100528600 : Record 11128785);
    VAR
      FileManagement@1100528602 : Codeunit 419;
      FileName@1100528603 : Text;
    BEGIN
      FileName := FileManagement.OpenFileDialog('', '', FileManagement.GetPictureFilterText);
      ReplaceElementPictureAsDocument(INEN2767LTMPLine, FileName);
    END;

    PROCEDURE ReplaceElementPictureAsDocument@1100528618(INEN2767LTMPLine@1100528600 : Record 11128785;IFileName@1100528601 : Text);
    BEGIN
      IF IFileName <> '' THEN BEGIN
        RemoveElementPicture(INEN2767LTMPLine);
        AddElementPictureAsDocument(INEN2767LTMPLine, IFileName);
      END;
    END;

    PROCEDURE AddElementPictureAsDocument@1100528614(INEN2767LTMPLine@1100528607 : Record 11128785;IFileName@1100528600 : Text);
    VAR
      ServiceSetup@1100528601 : Record 11012800;
      ExternalDocumentManagement@1100528602 : Codeunit 11012403;
      RecRef@1100528603 : RecordRef;
    BEGIN
      TestMaxNoOfElementPictures(INEN2767LTMPLine);
      ServiceSetup.GET;
      ServiceSetup.TESTFIELD("Object Picture Doc. Type");
      RecRef.GETTABLE(INEN2767LTMPLine);
      ExternalDocumentManagement.AddExternalDocument(RecRef, IFileName, ServiceSetup."Object Picture Doc. Type");
      INEN2767LTMPLine.SyncElementPicture;
    END;

    PROCEDURE RemoveElementPicture@1100528622(INEN2767LTMPLine@1100528602 : Record 11128785);
    VAR
      DocumentProperties@1100528601 : Record 11012746;
      DocumentLink@1100528600 : Record 11012747;
    BEGIN
      GetPictureDocumentProperties(INEN2767LTMPLine, 0, DocumentProperties);
      IF DocumentProperties.FINDSET THEN
        REPEAT
          DocumentLink.SETRANGE("Document No.", DocumentProperties."No.");
          DocumentLink.SETRANGE("Internal Company", DocumentProperties."Internal Company");
          DocumentLink.SETRANGE("Record ID", INEN2767LTMPLine.RECORDID);
          DocumentLink.DELETEALL(TRUE);
        UNTIL DocumentProperties.NEXT = 0;
      INEN2767LTMPLine.SyncElementPicture;
    END;

    LOCAL PROCEDURE TestMaxNoOfElementPictures@1100528619(INEN2767LTMPLine@1100528600 : Record 11128785);
    VAR
      DocumentProperties@1100528603 : Record 11012746;
    BEGIN
      GetPictureDocumentProperties(INEN2767LTMPLine, 0, DocumentProperties);
      IF DocumentProperties.COUNT = 1 THEN
        ERROR(Text002);
    END;

    PROCEDURE SelectAndAddMultipleDefectPictures@1100528620(INEN2767LTMPLine@1100528604 : Record 11128785);
    VAR
      FileManagement@1100528600 : Codeunit 419;
      FileNames@1100528603 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      I@1100528602 : Integer;
    BEGIN
      IF FileManagement.OpenMultiselectFileDialog('', '', FileManagement.GetPictureFilterText, FileNames) THEN
        FOR I := 0 TO FileNames.Length - 1 DO
          AddDefectPictureAsDocument(INEN2767LTMPLine, FileNames.GetValue(I));
    END;

    PROCEDURE AddDefectPictureAsDocument@1100528615(INEN2767LTMPLine@1100528602 : Record 11128785;IFileName@1100528601 : Text);
    VAR
      NEN2767LTMPSetup@1100528600 : Record 11128772;
      ExternalDocumentManagement@1100528603 : Codeunit 11012403;
      RecRef@1100528604 : RecordRef;
    BEGIN
      NEN2767LTMPSetup.GET;
      NEN2767LTMPSetup.TESTFIELD("Element Defect Pic. Doc. Type");
      RecRef.GETTABLE(INEN2767LTMPLine);
      ExternalDocumentManagement.AddExternalDocument(RecRef, IFileName, NEN2767LTMPSetup."Element Defect Pic. Doc. Type");
    END;

    PROCEDURE GetPictureDocumentProperties@1100528621(INEN2767LTMPLine@1100528601 : Record 11128785;IDocumentType@1100528602 : 'Element,Defect';VAR ODocumentProperties@1100528600 : Record 11012746);
    VAR
      ServiceSetup@1100528605 : Record 11012800;
      NEN2767LTMPSetup@1100528606 : Record 11128772;
    BEGIN
      GetDocumentProperties(INEN2767LTMPLine, ODocumentProperties);
      CASE IDocumentType OF
        IDocumentType::Element:
          BEGIN
            ServiceSetup.GET;
            ODocumentProperties.SETRANGE("Document Type", ServiceSetup."Object Picture Doc. Type");
          END;
        IDocumentType::Defect:
          BEGIN
            NEN2767LTMPSetup.GET;
            ODocumentProperties.SETRANGE("Document Type", NEN2767LTMPSetup."Element Defect Pic. Doc. Type");
          END;
      END;
      ODocumentProperties.SetFilterPicturesOnly;
    END;

    PROCEDURE GetDocumentProperties@1100528617(INEN2767LTMPLine@1100528601 : Record 11128785;VAR ODocumentProperties@1100528600 : Record 11012746);
    VAR
      DocumentLinkManagement@1100528604 : Codeunit 11012401;
      RecRef@1100528603 : RecordRef;
    BEGIN
      RecRef.GETTABLE(INEN2767LTMPLine);
      DocumentLinkManagement.GetDocuments(ODocumentProperties, RecRef);
      ODocumentProperties.MARKEDONLY(TRUE);
    END;

    PROCEDURE CopyElementPictureToLine@1100528624(IFromNEN2767LTMPLine@1100528602 : Record 11128785;IToNEN2767LTMPLine@1100528603 : Record 11128785);
    VAR
      DocumentProperties@1100528600 : Record 11012746;
      DocumentLink@1100528601 : Record 11012747;
      ToDocumentLink@1100528605 : Record 11012747;
      NEN2767Management@1100528604 : Codeunit 11012863;
      SeqNo@1100528606 : Integer;
    BEGIN
      NEN2767Management.GetPictureDocumentProperties(IFromNEN2767LTMPLine, 0, DocumentProperties);
      IF DocumentProperties.FINDSET THEN BEGIN
        DocumentLink.SETRANGE("Document No.", DocumentProperties."No.");
        IF DocumentLink.FINDLAST THEN
          SeqNo := DocumentLink."Seq. No.";
        SeqNo += 10000;
        DocumentLink.SETRANGE("Record ID", IFromNEN2767LTMPLine.RECORDID);
        IF DocumentLink.FINDFIRST THEN BEGIN
          ToDocumentLink := DocumentLink;
          ToDocumentLink."Seq. No." := SeqNo;
          ToDocumentLink."Record ID" := IToNEN2767LTMPLine.RECORDID;
          ToDocumentLink.INSERT(TRUE);
        END;
      END;
    END;

    BEGIN
    END.
  }
}

