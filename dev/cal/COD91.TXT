OBJECT Codeunit 91 Purch.-Post (Yes/No)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.04,4PS14.00,4PSSE;
  }
  PROPERTIES
  {
    TableNo=38;
    EventSubscriberInstance=Manual;
    OnRun=VAR
            PurchaseHeader@1000 : Record 38;
          BEGIN
            PurchaseHeader.COPY(Rec); //**4PS.n C038940

            IF NOT FIND THEN
              ERROR(NothingToPostErr);

            //PurchaseHeader.COPY(Rec); //**4PS.o C038940
            Code(PurchaseHeader);
            Rec := PurchaseHeader;
          END;

  }
  CODE
  {
    VAR
      ReceiveInvoiceQst@1000 : TextConst 'ENU=&Receive,&Invoice,Receive and &Register Invoice,Receive &and Invoice;NOR=&Motta,F&akturer,Motta &og fakturer;SVE=&Inleverera,&Fakturera,Inleverera &och fakturera';
      PostConfirmQst@1001 : TextConst '@@@="%1 = Document Type";ENU=Do you want to post the %1?;NOR=Vil du bokf›re %1?;SVE=Vill du bokf”ra %1?';
      ShipInvoiceQst@1002 : TextConst 'ENU=&Ship,&Invoice,Ship &and Invoice;NOR=&Lever,F&akturer,Lever &og fakturer;SVE=&Leverera,&Fakturera,Leverera &och fakturera';
      NothingToPostErr@1007 : TextConst 'ENU=There is nothing to post.;NOR=Det finnes ingenting † bokf›re.;SVE=Det finns inget att bokf”ra.';
      gWorkingDate@1100525003 : Date;
      gSelectionOnlyReceipt@1100525000 : Boolean;
      gSkipReplaceDates@1100525001 : Boolean;
      gFromSiteMgtForm@1100525002 : Boolean;
      Text11012000@1100525004 : TextConst 'ENU=&Receive,&Invoice,Receive and &Register Invoice;NOR=&Motta,F&akturer,Motta &og register fakturer;SVE=&Inleverera,&Fakturera,Inleverera &och registrera faktura';
      Text11012001@1100409000 : TextConst 'ENU=It is only possible to post released Orders;NOR=Det er kun mulig † bokf›re frigitte ordre;SVE=Det „r bara m”jligt att bokf”ra sl„ppta ordrar';
      PostingHasBeenDone@1100528400 : Boolean;

    LOCAL PROCEDURE Code@1(VAR PurchaseHeader@1002 : Record 38);
    VAR
      PurchSetup@1000 : Record 312;
      PurchPostViaJobQueue@1001 : Codeunit 98;
      HideDialog@1003 : Boolean;
      IsHandled@1004 : Boolean;
      DefaultOption@1005 : Integer;
    BEGIN
      HideDialog := FALSE;
      IsHandled := FALSE;
      PostingHasBeenDone := FALSE; //**4PS.n
      DefaultOption := 3;
      OnBeforeConfirmPost(PurchaseHeader,HideDialog,IsHandled,DefaultOption);
      IF  IsHandled THEN
        EXIT;

      IF NOT HideDialog THEN
        IF NOT ConfirmPost(PurchaseHeader,DefaultOption) THEN
          EXIT;

      OnAfterConfirmPost(PurchaseHeader);

      PurchSetup.GET;
      IF PurchSetup."Post with Job Queue" THEN
        PurchPostViaJobQueue.EnqueuePurchDoc(PurchaseHeader)
      ELSE BEGIN
        OnBeforeRunPurchPost(PurchaseHeader);
        CODEUNIT.RUN(CODEUNIT::"Purch.-Post",PurchaseHeader);
      END;

      OnAfterPost(PurchaseHeader);
    END;

    LOCAL PROCEDURE ConfirmPost@4(VAR PurchaseHeader@1001 : Record 38;DefaultOption@1003 : Integer) : Boolean;
    VAR
      ConfirmManagement@1002 : Codeunit 27;
      Selection@1000 : Integer;
      PurchSetup@11012000 : Record 312;
    BEGIN
      IF DefaultOption > 3 THEN
        DefaultOption := 3;
      IF DefaultOption <= 0 THEN
        DefaultOption := 1;

      PurchSetup.GET; //**4PS.n
      WITH PurchaseHeader DO BEGIN
        CASE "Document Type" OF
          "Document Type"::Order:
            BEGIN
              //**4PS.so
              //Selection := STRMENU(ReceiveInvoiceQst,DefaultOption);
              //IF Selection = 0 THEN
              //  EXIT(FALSE);
              //Receive := Selection IN [1,3];
              //Invoice := Selection IN [2,3];
              //**4PS.eo

              //**4PS.sn
              PurchSetup.GET; //4PSSE
              IF ("Purchase Order Type" = "Purchase Order Type"::"Purchase Order") THEN
                IF PurchSetup."Release Purch Orders Required" THEN BEGIN
                  IF Status = Status::Open THEN BEGIN
                    MESSAGE(Text11012001);
                    EXIT(FALSE);
                  END;
                END;

              IF ("Purchase Order Type" = "Purchase Order Type"::"Return Order") OR gSelectionOnlyReceipt THEN
                Selection := 1
              ELSE BEGIN
                PurchSetup.GET;
                IF PurchSetup."Invoice Purchase Orders" THEN BEGIN
                  IF NOT PurchOrderWithPlantAcqOrRent(PurchaseHeader) THEN
                    Selection := STRMENU(ReceiveInvoiceQst,1)
                  ELSE
                    Selection := STRMENU(Text11012000,1);
                END ELSE BEGIN
                  IF NOT CONFIRM(PostConfirmQst,FALSE,"Document Type") THEN
                    EXIT(FALSE)
                  ELSE
                    Selection := 1;
                END;
              END;

              IF Selection = 0 THEN
                EXIT(FALSE);
              Receive := Selection IN [1,3,4];
              Invoice := Selection IN [2,4];

              "Register Invoice" := (Selection = 3);
              IF NOT gSkipReplaceDates THEN
                UpdatePostingAndDocDate(FALSE,gWorkingDate);
              //**4PS.en
            END;
          "Document Type"::"Return Order":
            BEGIN
              Selection := STRMENU(ShipInvoiceQst,DefaultOption);
              IF Selection = 0 THEN
                EXIT(FALSE);
              Ship := Selection IN [1,3];
              Invoice := Selection IN [2,3];
              "Register Invoice" := FALSE //**4PS.n
            END
          ELSE
            IF NOT ConfirmManagement.ConfirmProcess(
                 STRSUBSTNO(PostConfirmQst,LOWERCASE(FORMAT("Document Type"))),TRUE)
            THEN
              EXIT(FALSE);
        END;
        "Print Posted Documents" := FALSE;
        PostingHasBeenDone := TRUE; //**4PS.n
      END;
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE Preview@2(VAR PurchaseHeader@1000 : Record 38);
    VAR
      GenJnlPostPreview@1002 : Codeunit 19;
      PurchPostYesNo@1001 : Codeunit 91;
    BEGIN
      BINDSUBSCRIPTION(PurchPostYesNo);
      GenJnlPostPreview.Preview(PurchPostYesNo,PurchaseHeader);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterPost@5(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterConfirmPost@7(PurchaseHeader@1000 : Record 38);
    BEGIN
    END;

    [EventSubscriber(Codeunit,19,OnRunPreview)]
    LOCAL PROCEDURE OnRunPreview@3(VAR Result@1000 : Boolean;Subscriber@1001 : Variant;RecVar@1002 : Variant);
    VAR
      PurchaseHeader@1003 : Record 38;
      PurchPost@1004 : Codeunit 90;
    BEGIN
      WITH PurchaseHeader DO BEGIN
        COPY(RecVar);
        Ship := "Document Type" = "Document Type"::"Return Order";
        Receive := "Document Type" = "Document Type"::Order;
        Invoice := TRUE;
      END;
      OnRunPreviewOnBeforePurchPostRun(PurchaseHeader);
      PurchPost.SetPreviewMode(TRUE);
      Result := PurchPost.RUN(PurchaseHeader);
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeConfirmPost@6(VAR PurchaseHeader@1000 : Record 38;VAR HideDialog@1001 : Boolean;VAR IsHandled@1002 : Boolean;VAR DefaultOption@1003 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeRunPurchPost@8(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnRunPreviewOnBeforePurchPostRun@9(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
    END;

    PROCEDURE PostReceiptsFromBlanketScheme@1100485001(VAR Rec@1100485000 : Record 38;NewPostingDate@1100485001 : Date;PlotNo@1100525000 : Code[10]);
    VAR
      PurchPost@1100525002 : Codeunit 90;
      PurchHeader@1100525001 : Record 38;
    BEGIN
      //**4PS
      PurchHeader.COPY(Rec);
      WITH PurchHeader DO BEGIN
        PostingHasBeenDone := FALSE;
        TESTFIELD("Document Type", "Document Type"::Order);
        TESTFIELD("Purchase Order Type", "Purchase Order Type"::"Blanket Order");

        Receive := TRUE;
        Invoice := FALSE;
        "Register Invoice" := FALSE;

        IF NOT gSkipReplaceDates THEN
          UpdatePostingAndDocDate(TRUE,NewPostingDate);

        CLEAR(PurchPost);
        PurchPost.SetPlotNoReceipts(PlotNo);
        IF PurchPost.RUN(PurchHeader) THEN
        //Note: PurchPostViaJobQueue not allowed. Post receipts must be done immediately because there can be a
        //      second run for the same order. Then first run must be processed. (see R11020239)
          PostingHasBeenDone := TRUE;
      END;
      Rec := PurchHeader;
    END;

    PROCEDURE SetSelectionOnlyReceipt@1100525000();
    BEGIN
      //**4PS
      gSelectionOnlyReceipt := TRUE;
    END;

    PROCEDURE SetSkipReplaceDates@1100525001();
    BEGIN
      //**4PS
      gSkipReplaceDates := TRUE;
    END;

    PROCEDURE SetSiteMgtForm@1100525002(WorkingDate@1100525000 : Date);
    BEGIN
      //**4PS  C-027632
      gFromSiteMgtForm := TRUE;
      gWorkingDate := WorkingDate;
    END;

    PROCEDURE PurchOrderWithPlantAcqOrRent@1100525003(PurchHeader@1100525001 : Record 38) : Boolean;
    VAR
      PurchOrderLine@1100525000 : Record 39;
    BEGIN
      //**4PS T003489
      PurchOrderLine.SETRANGE("Document Type", PurchHeader."Document Type");
      PurchOrderLine.SETRANGE("Document No.", PurchHeader."No.");
      PurchOrderLine.SETFILTER("Cost Component Plant", '<>%1', '');
      IF PurchOrderLine.FINDSET THEN BEGIN
        REPEAT
          IF PurchOrderLine.CheckPlantAcquisitionOrRent(PurchOrderLine) <> 0 THEN
            EXIT(TRUE);
        UNTIL PurchOrderLine.NEXT = 0;
      END;
      EXIT(FALSE);
    END;

    PROCEDURE GetPostingHasBeenDone@1100528400() : Boolean;
    BEGIN
      //**4PS
      EXIT(PostingHasBeenDone);
    END;

    BEGIN
    END.
  }
}

