OBJECT Table 11229282 Work Order Reference Point
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    OnInsert=BEGIN
               FillModifiedOn();
               UpdateDatesOnWorkOrder(UpdateAction::Insert);
               SendMail;
               VALIDATE("Created by", USERID);
             END;

    OnModify=BEGIN
               UpdateDatesOnWorkOrder(UpdateAction::Modify);
             END;

    CaptionML=ENU=Work Order Reference Point;
  }
  FIELDS
  {
    { 10  ;   ;Work Order No.      ;Code20        ;TableRelation="Work Order";
                                                   CaptionML=[ENU=Work Order No.;
                                                              SVE=Serviceordernr] }
    { 20  ;   ;Date/Time Registrated;DateTime     ;CaptionML=ENU=Date/Time Registrated }
    { 30  ;   ;Date/Time Modified  ;DateTime      ;OnValidate=VAR
                                                                WorkOrder@1100528601 : Record 11229279;
                                                                DocumentReferencePoint@1100528600 : Record 11020296;
                                                              BEGIN
                                                                IF "Date/Time Modified" <> xRec."Date/Time Modified" THEN BEGIN
                                                                  WorkOrder.GET("Work Order No.");
                                                                  WorkOrder.TESTFIELD("Source Company", COMPANYNAME);
                                                                  IF WorkOrder."Source Type" = WorkOrder."Source Type"::ServiceOrder THEN BEGIN
                                                                    IF DocumentReferencePoint.GET(DocumentReferencePoint.Type::ServOrder, WorkOrder."Source No.", "Date/Time Registrated") THEN BEGIN
                                                                      DocumentReferencePoint.VALIDATE("Date-Time (modified)", "Date/Time Modified");
                                                                      DocumentReferencePoint.MODIFY(FALSE);
                                                                      DocumentReferencePoint.FIND('=');
                                                                      DocumentReferencePoint.MODIFY(TRUE); // Work around for updating Actual
                                                                    END;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Date/Time Modified }
    { 40  ;   ;Reference Point     ;Integer       ;TableRelation="Reference Point".No.;
                                                   CaptionML=[ENU=Reference Point;
                                                              NOR=Referansepunkt;
                                                              SVE=Referenspunkt];
                                                   NotBlank=Yes }
    { 41  ;   ;Reference Point Description;Text50 ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Reference Point".Description WHERE (No.=FIELD(Reference Point)));
                                                   CaptionML=[ENU=Reference Point Description;
                                                              NOR=Beskrivelse av Referansepunkt;
                                                              SVE=Beskrivning av referenspunkt];
                                                   Editable=No }
    { 50  ;   ;Field Service Status;Text30        ;TableRelation="Field Service Code".Code WHERE (Type=CONST(Status));
                                                   CaptionML=ENU=Field Service Status }
    { 90  ;   ;Modified by Subcont.Port.Vend.;Code20;
                                                   TableRelation="Subcont.Port. Vendor"."Vendor No.";
                                                   CaptionML=[ENU=Modified by Subcontractor Portal Vendor;
                                                              NOR=Endret av Selger p† underentrepen›rportal;
                                                              SVE=Žndrad av anv. Underent.portal] }
    { 100 ;   ;Modified by Subcont.Port. User;Text30;
                                                   TableRelation="Subcont.Port. User".Login WHERE (Vendor No.=FIELD(Modified by Subcont.Port.Vend.));
                                                   CaptionML=[ENU=Modified by Subcontractor Portal User;
                                                              NOR=Endret av Bruker p† underentrepen›rportal;
                                                              SVE=Žndrad av anv. Underent.portal] }
    { 110 ;   ;Fld Srv Status Reason Desc.;Text50 ;CaptionML=ENU=Field Service Status Reason Description;
                                                   Editable=No }
    { 120 ;   ;Update WO Starting Time;Boolean    ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Reference Point"."Update WO Starting Time" WHERE (No.=FIELD(Reference Point)));
                                                   CaptionML=ENU=Update Work Order Starting Time;
                                                   Editable=No }
    { 130 ;   ;Update WO Ending Time;Boolean      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Reference Point"."Update WO Ending Time" WHERE (No.=FIELD(Reference Point)));
                                                   CaptionML=ENU=Update Work Order Ending Time;
                                                   Editable=No }
    { 140 ;   ;Created by          ;Code50        ;OnValidate=VAR
                                                                UserSetup@1100528600 : Record 91;
                                                              BEGIN
                                                                IF ModifiedByEmployee <> '' THEN
                                                                  "Created by Employee No." := ModifiedByEmployee
                                                                ELSE BEGIN
                                                                  IF "Created by" <> '' THEN
                                                                    IF UserSetup.GET(USERID) THEN
                                                                      "Created by Employee No." := UserSetup."Employee No.";
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Created by;
                                                              NOR=Opprettet av;
                                                              SVE=Skapad av];
                                                   Editable=No }
    { 150 ;   ;Created by Employee No.;Code20     ;TableRelation=Employee;
                                                   CaptionML=[ENU=Created by Employee No.;
                                                              NOR=Opprettet av ansatt nr.;
                                                              SVE=Skapat av anst„lld nr];
                                                   Editable=No }
    { 160 ;   ;Created by Employee (Name);Text100 ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Full Name" WHERE (No.=FIELD(Created by Employee No.)));
                                                   CaptionML=ENU=Created by Employee (Name);
                                                   Editable=No }
    { 170 ;   ;Manually            ;Boolean       ;CaptionML=[ENU=Manually;
                                                              NOR=Manuelt;
                                                              SVE=Manuellt];
                                                   Editable=No }
    { 180 ;   ;Longitude           ;Code20        ;DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Longitude;
                                                              SVE=Longitud] }
    { 190 ;   ;Latitude            ;Code20        ;DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Latitude;
                                                              SVE=Latitud] }
    { 200 ;   ;Geo Status          ;Option        ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Geo Status;
                                                   OptionCaptionML=ENU=Disabled,Registered,Error,Location unavailable,Unauthorized;
                                                   OptionString=Disabled,Registered,Error,LocationUnavailable,Unauthorized }
  }
  KEYS
  {
    {    ;Work Order No.,Date/Time Registrated    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      UpdateAction@1100525000 : 'Insert,Modify,Delete,Rename';
      ModifiedByEmployee@1100528700 : Code[20];

    PROCEDURE FillModifiedOn@1210190000();
    BEGIN
      "Date/Time Modified" := CURRENTDATETIME;
    END;

    LOCAL PROCEDURE UpdateDatesOnWorkOrder@1100528607(IUpdateAction@1100525000 : 'Insert,Modify,Delete,Rename');
    VAR
      ReferencePoint@1100525001 : Record 11020271;
      WorkOrder@1100528601 : Record 11229279;
      DatetimeMgt@1100528605 : Codeunit 11020218;
      StartingDateTime@1100525002 : DateTime;
      EndingDateTime@1100528604 : DateTime;
    BEGIN
      IF NOT ReferencePoint.GET("Reference Point") THEN
        EXIT;
      IF ReferencePoint."Update WO Starting Time" AND NOT StartingDateAlreadyUpdated THEN BEGIN
        CASE IUpdateAction OF
          IUpdateAction::Insert:
            StartingDateTime := "Date/Time Registrated";
        ELSE
          StartingDateTime := "Date/Time Modified";
        END;

        IF NOT WorkOrder.GET("Work Order No.") THEN
          EXIT;
        IF (WorkOrder."Actual Reference Point" <> ReferencePoint."No.") AND (NOT ReferencePoint."N/A for Actual Reference Point") THEN
          WorkOrder."Actual Reference Point" := ReferencePoint."No.";
        WorkOrder.VALIDATE("Ending Date/Time", 0DT);
        WorkOrder.VALIDATE("Starting Date/Time", StartingDateTime);
        IF WorkOrder."Duration Time" <> 0 THEN BEGIN
          EndingDateTime := WorkOrder."Starting Date/Time" + DatetimeMgt.HoursToDuration(WorkOrder."Duration Time");
          WorkOrder.VALIDATE("Ending Date/Time", EndingDateTime);
        END;
        WorkOrder.UpdateModifiedOnAndBy;
        WorkOrder.MODIFY(FALSE); //mg, 19-05-2014: C015401 no trigger due to "Block Modify Service Order"
      END;

      IF ReferencePoint."Update WO Ending Time" AND NOT EndingDateAlreadyUpdated THEN BEGIN
        CASE IUpdateAction OF
          IUpdateAction::Insert:
            EndingDateTime := "Date/Time Registrated";
        ELSE
          EndingDateTime := "Date/Time Modified";
        END;
        IF NOT WorkOrder.GET("Work Order No.") THEN
          EXIT;
        IF (WorkOrder."Starting Date/Time" <> 0DT) AND (WorkOrder."Starting Date/Time" < EndingDateTime) THEN BEGIN
          IF (WorkOrder."Actual Reference Point" <> ReferencePoint."No.") AND (NOT ReferencePoint."N/A for Actual Reference Point") THEN
            WorkOrder."Actual Reference Point" := ReferencePoint."No.";
          WorkOrder.VALIDATE("Ending Date/Time", EndingDateTime);
          WorkOrder.VALIDATE("Duration Time", DatetimeMgt.DurationToHours(WorkOrder."Ending Date/Time" - WorkOrder."Starting Date/Time"));
          WorkOrder."Modified on" := CURRENTDATETIME;
          WorkOrder."Plan during Clock Time" := TRUE;
          WorkOrder.UpdateModifiedOnAndBy;
          WorkOrder.MODIFY(FALSE);
        END;
      END;
    END;

    LOCAL PROCEDURE StartingDateAlreadyUpdated@1100525001() : Boolean;
    VAR
      WorkOrderReferencePoint@1100525000 : Record 11229282;
    BEGIN
      WorkOrderReferencePoint.SETRANGE("Work Order No.", "Work Order No.");
      WorkOrderReferencePoint.SETRANGE("Update WO Starting Time", TRUE);
      WorkOrderReferencePoint.SETFILTER("Date/Time Registrated", '<%1', "Date/Time Registrated");
      EXIT(NOT WorkOrderReferencePoint.ISEMPTY);
    END;

    LOCAL PROCEDURE EndingDateAlreadyUpdated@1100525002() : Boolean;
    VAR
      WorkOrderReferencePoint@1100525000 : Record 11229282;
    BEGIN
      WorkOrderReferencePoint.SETRANGE("Work Order No.", "Work Order No.");
      WorkOrderReferencePoint.SETRANGE("Update WO Ending Time", TRUE);
      WorkOrderReferencePoint.SETFILTER("Date/Time Registrated", '<%1', "Date/Time Registrated");
      EXIT(NOT WorkOrderReferencePoint.ISEMPTY);
    END;

    LOCAL PROCEDURE SendMail@1100525000();
    VAR
      ResourceWOP@1100528601 : Record 11229278;
      WorkOrder@1210190001 : Record 11229279;
      ReferencePoint@1100528600 : Record 11020271;
      ServiceOrderStatusMail@1100525001 : Codeunit 11012816;
    BEGIN
      IF NOT WorkOrder.GET("Work Order No.") THEN
        EXIT;
      IF WorkOrder."Source Type" <> WorkOrder."Source Type"::ServiceOrder THEN
        EXIT;
      IF WorkOrder."Resource No." = '' THEN
        EXIT;
      IF NOT ResourceWOP.GET(WorkOrder."Resource No.") THEN
        EXIT;
      IF ResourceWOP.Type <> ResourceWOP.Type::Subcontractor THEN
        EXIT;
      IF ResourceWOP.Company <> COMPANYNAME THEN
        EXIT;
      IF WorkOrder."Source Company" <> COMPANYNAME THEN
        EXIT;
      IF ReferencePoint.GET("Reference Point") THEN BEGIN
        IF ReferencePoint."Send Mail to Subcontractor" THEN BEGIN
          ServiceOrderStatusMail.SetMailAction(2);
          ServiceOrderStatusMail.WorkOrderMail("Work Order No.");
        END;
      END;
    END;

    PROCEDURE SetModifiedByEmployee@1100528701(Employee@1100528700 : Code[20]);
    BEGIN
      ModifiedByEmployee := Employee;
    END;

    BEGIN
    END.
  }
}

