OBJECT Codeunit 11012198 XML Decode (4PS-Mobile)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      XMLDOMMgt@1100485000 : Codeunit 11020220;
      FormatCU@1100485004 : Codeunit 11020221;

    PROCEDURE WorkOrder@2(XMLNode@1100485001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR VarDebriefRec@1100485002 : Record 11012679) @1000 : Boolean;
    VAR
      lvXMLNodeReturn@1100485000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      WITH VarDebriefRec DO BEGIN
        CLEAR(VarDebriefRec);
        INIT;

        IF XMLDOMMgt.FindNode(XMLNode,'ResourceNo',lvXMLNodeReturn) THEN
          "Resource No. (Employee)" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'WorkOrderNo',lvXMLNodeReturn) THEN
          "Work Order No." := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'OrderKind',lvXMLNodeReturn) THEN
          "Order Kind" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'OrderType',lvXMLNodeReturn) THEN
          "Order Type" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'Problem',lvXMLNodeReturn) THEN
          Problem := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'Cause',lvXMLNodeReturn) THEN
          Cause := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'Solution',lvXMLNodeReturn) THEN
          Solution := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'Signer',lvXMLNodeReturn) THEN
          Signer := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'EmailSigner',lvXMLNodeReturn) THEN
          "E-Mail Signer" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'Signature',lvXMLNodeReturn) THEN
          MakeSignature(VarDebriefRec, lvXMLNodeReturn);
        IF XMLDOMMgt.FindNode(XMLNode,'OrderNoCustomer',lvXMLNodeReturn) THEN
          "Order No. Customer" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'SendReport',lvXMLNodeReturn) THEN
          FormatCU.EvaluateBoolean(lvXMLNodeReturn.InnerText,"Send Report");
        IF XMLDOMMgt.FindNode(XMLNode,'Contact',lvXMLNodeReturn) THEN
          "Contact Name" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'PhoneNo',lvXMLNodeReturn) THEN
          "Phone No." := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'PhoneNo2',lvXMLNodeReturn) THEN
          "Phone No. 2" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'MobilePhoneNo',lvXMLNodeReturn) THEN
          "Mobile Phone No." := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'Email',lvXMLNodeReturn) THEN
          "E-Mail" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'SupRoom',lvXMLNodeReturn) THEN
          "Room (SUP)" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'SupPart',lvXMLNodeReturn) THEN
          "Part (SUP)" := lvXMLNodeReturn.InnerText;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE Acknowledge@1100525002(XMLNode@1100525001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR Type@1100525004 : Text[30];VAR ResourceNo@1100525003 : Code[20];VAR WorkOrderNo@1100525002 : Code[20]) : Boolean;
    VAR
      lvXMLNodeReturn@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      IF XMLDOMMgt.FindNode(XMLNode,'Type',lvXMLNodeReturn) THEN
        Type := lvXMLNodeReturn.InnerText;
      IF XMLDOMMgt.FindNode(XMLNode,'ResourceNo',lvXMLNodeReturn) THEN
        ResourceNo := lvXMLNodeReturn.InnerText;
      IF XMLDOMMgt.FindNode(XMLNode,'WorkOrderNo',lvXMLNodeReturn) THEN
        WorkOrderNo := lvXMLNodeReturn.InnerText;

      EXIT(TRUE);
    END;

    PROCEDURE BudgetLine@1100485000(XMLNode@1100485001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR VarDebriefRec@1100485002 : Record 11012680) @1000 : Boolean;
    VAR
      lvXMLNodeReturn@1100485000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      WITH VarDebriefRec DO BEGIN
        CLEAR(VarDebriefRec);
        INIT;

        IF XMLDOMMgt.FindNode(XMLNode,'WorkOrderNo',lvXMLNodeReturn) THEN
          "Work Order No." := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'ObjectNo',lvXMLNodeReturn) THEN
          "Object No." := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'MaintenanceScheme',lvXMLNodeReturn) THEN
          "Maintenance Scheme" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'LineNo',lvXMLNodeReturn) THEN
          FormatCU.EvaluateInteger(lvXMLNodeReturn.InnerText,"Budget Line No.");
        IF XMLDOMMgt.FindNode(XMLNode,'ResourceNo',lvXMLNodeReturn) THEN
          "Resource No. (Employee)" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'Finished',lvXMLNodeReturn) THEN
          FormatCU.EvaluateBoolean(lvXMLNodeReturn.InnerText,Finished);
        IF XMLDOMMgt.FindNode(XMLNode,'FollowUpJob',lvXMLNodeReturn) THEN
          FormatCU.EvaluateBoolean(lvXMLNodeReturn.InnerText,"Follow-up Job");
      END;

      EXIT(TRUE);
    END;

    PROCEDURE CostPlusEntry@1100485004(XMLNode@1100485001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR VarDebriefRec@1100485002 : Record 11012681) @1000 : Boolean;
    VAR
      lvXMLNodeReturn@1100485000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      WITH VarDebriefRec DO BEGIN
        CLEAR(VarDebriefRec);
        INIT;

        IF XMLDOMMgt.FindNode(XMLNode,'ResourceNo',lvXMLNodeReturn) THEN
          "Resource No. (Employee)" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'WorkOrderNo',lvXMLNodeReturn) THEN
          "Work Order No." := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'CreatedByWorkOrderNo',lvXMLNodeReturn) THEN
          "Created by Work Order No." := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'PostingDate',lvXMLNodeReturn) THEN
          FormatCU.EvaluateDate(lvXMLNodeReturn.InnerText,"Posting Date");
        IF XMLDOMMgt.FindNode(XMLNode,'ItemNo',lvXMLNodeReturn) THEN
          "Item No." := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'TradeItem',lvXMLNodeReturn) THEN
          "Trade Item" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'VendorTradeItem',lvXMLNodeReturn) THEN
          "Vendor (Trade Item)" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'CostObject',lvXMLNodeReturn) THEN
          "Cost Object" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'WageComponent',lvXMLNodeReturn) THEN
          "Wage Component" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'HourLineTemplateCode',lvXMLNodeReturn) THEN
          "Hour Line Template Code" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'Description',lvXMLNodeReturn) THEN
          Description := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'Description2',lvXMLNodeReturn) THEN
          "Description 2" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'Quantity',lvXMLNodeReturn) THEN
          FormatCU.EvaluateDecimal(lvXMLNodeReturn.InnerText,Quantity);
        IF XMLDOMMgt.FindNode(XMLNode,'UnitOfMeasure',lvXMLNodeReturn) THEN
          "Unit of Measure" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'AdditionalCost',lvXMLNodeReturn) THEN
          FormatCU.EvaluateBoolean(lvXMLNodeReturn.InnerText,"Additional Cost");
        IF XMLDOMMgt.FindNode(XMLNode,'Stock',lvXMLNodeReturn) THEN
          FormatCU.EvaluateBoolean(lvXMLNodeReturn.InnerText,Stock);
        IF XMLDOMMgt.FindNode(XMLNode,'LocationCode',lvXMLNodeReturn) THEN
          "Location Code" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'ExtraCost',lvXMLNodeReturn) THEN
          FormatCU.EvaluateBoolean(lvXMLNodeReturn.InnerText,"Extra Cost");
        IF XMLDOMMgt.FindNode(XMLNode,'Amount',lvXMLNodeReturn) THEN
          FormatCU.EvaluateDecimal(lvXMLNodeReturn.InnerText,Amount);
        IF XMLDOMMgt.FindNode(XMLNode,'CPLineNo',lvXMLNodeReturn) THEN
          FormatCU.EvaluateInteger(lvXMLNodeReturn.InnerText,"Cost Plus Line No.");
        IF XMLDOMMgt.FindNode(XMLNode,'ObjectNo',lvXMLNodeReturn) THEN
          "Object No." := lvXMLNodeReturn.InnerText;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE AdviceOrderLine@1100485005(XMLNode@1100485001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR VarDebriefRec@1100485002 : Record 11012682) @1000 : Boolean;
    VAR
      lvXMLNodeReturn@1100485000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      WITH VarDebriefRec DO BEGIN
        CLEAR(VarDebriefRec);
        INIT;

        IF XMLDOMMgt.FindNode(XMLNode,'ResourceNo',lvXMLNodeReturn) THEN
          "Resource No. (Employee)" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'WorkOrderNo',lvXMLNodeReturn) THEN
          "Work Order No." := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'ItemNo',lvXMLNodeReturn) THEN
          "Item No." := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'Description2',lvXMLNodeReturn) THEN BEGIN
          "Description 2" := lvXMLNodeReturn.InnerText;
        END;
        IF XMLDOMMgt.FindNode(XMLNode,'Description',lvXMLNodeReturn) THEN BEGIN
          Description := COPYSTR(lvXMLNodeReturn.InnerText, 1, MAXSTRLEN(Description));
          IF STRLEN(lvXMLNodeReturn.InnerText) > MAXSTRLEN(Description) THEN
            //MOB 2.x has one description field of 100
            "Description 2" := COPYSTR(lvXMLNodeReturn.InnerText,  MAXSTRLEN(Description) + 1, MAXSTRLEN("Description 2"));
        END;
        IF XMLDOMMgt.FindNode(XMLNode,'Quantity',lvXMLNodeReturn) THEN
          FormatCU.EvaluateDecimal(lvXMLNodeReturn.InnerText,Quantity);
        IF XMLDOMMgt.FindNode(XMLNode,'UnitOfMeasure',lvXMLNodeReturn) THEN
          "Unit of Measure" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'TradeItem',lvXMLNodeReturn) THEN
          "Trade Item" := COPYSTR(lvXMLNodeReturn.InnerText, 1, MAXSTRLEN("Trade Item"));
        IF XMLDOMMgt.FindNode(XMLNode,'VendorTradeItem',lvXMLNodeReturn) THEN
          "Vendor (Trade Item)" := COPYSTR(lvXMLNodeReturn.InnerText, 1, MAXSTRLEN("Vendor (Trade Item)"));
        IF XMLDOMMgt.FindNode(XMLNode,'DecentralCreatedGuid',lvXMLNodeReturn) THEN
          "Decentral Created Guid" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'Purchase',lvXMLNodeReturn) THEN
          FormatCU.EvaluateBoolean(lvXMLNodeReturn.InnerText, Purchase);
        IF XMLDOMMgt.FindNode(XMLNode,'VendorNo',lvXMLNodeReturn) THEN
          "Vendor No." := lvXMLNodeReturn.InnerText;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE AdviceOrderLineText@1100525004(XMLNode@1100485001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR DebriefAdvOrdLnTextMob@1100485002 : Record 11229870) @1000 : Boolean;
    VAR
      XMLNode2@1100485000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      WITH DebriefAdvOrdLnTextMob DO BEGIN
        CLEAR(DebriefAdvOrdLnTextMob);
        INIT;

        IF XMLDOMMgt.FindNode(XMLNode, 'ResourceNo', XMLNode2) THEN
          "Resource No. (Employee)" := XMLNode2.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode, 'WorkOrderNo', XMLNode2) THEN
          "Work Order No." := XMLNode2.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode, 'Comment', XMLNode2) THEN
          Comment := XMLNode2.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode, 'DecentralCreatedGuid', XMLNode2) THEN
          "Decentral Created Guid" := XMLNode2.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode, 'LineBreak', XMLNode2) THEN
          FormatCU.EvaluateBoolean(XMLNode2.InnerText, "Line Break");
      END;

      EXIT(TRUE);
    END;

    PROCEDURE CreatePurchaseOrder@1100525003(XMLNode@1100485001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR VarDebriefRec@1100485002 : Record 11125648) @1000 : Boolean;
    VAR
      lvXMLNodeReturn@1100485000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      WITH VarDebriefRec DO BEGIN
        CLEAR(VarDebriefRec);
        INIT;

        IF XMLDOMMgt.FindNode(XMLNode,'ResourceNo',lvXMLNodeReturn) THEN
          "Resource No. (Employee)" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'WorkOrderNo',lvXMLNodeReturn) THEN
          "Work Order No." := lvXMLNodeReturn.InnerText;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE StatusFS@1100485006(XMLNode@1100485001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR VarDebriefRec@1100485002 : Record 11012683) @1000 : Boolean;
    VAR
      lvXMLNodeReturn@1100485000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      WITH VarDebriefRec DO BEGIN
        CLEAR(VarDebriefRec);
        INIT;

        IF XMLDOMMgt.FindNode(XMLNode,'ResourceNo',lvXMLNodeReturn) THEN
          "Resource No. (Employee)" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'WorkOrderNo',lvXMLNodeReturn) THEN
          "Work Order No." := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'ActivityStatusCode',lvXMLNodeReturn) THEN
          "Field Service Status" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'DateTime',lvXMLNodeReturn) THEN
          FormatCU.EvaluateDateTime(lvXMLNodeReturn.InnerText,"Date/Time");
        IF XMLDOMMgt.FindNode(XMLNode,'ReasonDescription',lvXMLNodeReturn) THEN
          "Fld Srv Status Reason Desc." := lvXMLNodeReturn.InnerText;
        IF "Date/Time" = 0DT THEN
          "Date/Time" := CURRENTDATETIME;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE DebriefText@1100485007(XMLNode@1100485001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR VarDebriefRec@1100485002 : Record 11012684;VAR OTextNode@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlText") @1000 : Boolean;
    VAR
      lvXMLNodeReturn@1100485000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      WITH VarDebriefRec DO BEGIN
        CLEAR(VarDebriefRec);
        CLEAR(OTextNode);
        INIT;
        Status := Status::Received;
        "Received on" := CURRENTDATETIME;

        IF XMLDOMMgt.FindNode(XMLNode,'ResourceNo',lvXMLNodeReturn) THEN
          "Resource No. (Employee)" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'WorkOrderNo',lvXMLNodeReturn) THEN
          "Work Order No." := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'Date',lvXMLNodeReturn) THEN
          FormatCU.EvaluateDate(lvXMLNodeReturn.InnerText,Date);
        IF XMLDOMMgt.FindNode(XMLNode,'Rubric',lvXMLNodeReturn) THEN
          "Text Rubric" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'Text',lvXMLNodeReturn) THEN BEGIN
          //OText := lvXMLNodeReturn.text;     //* Niet veld 'Comment' vullen, text kan langer zijn dan 1 tekstregel. De tekst moet
          //OText := DELCHR(OText, '>', ' ');  //* dan gesplitst worden in meerdere regels. Afspraak max. tekstlengte 1024.
          // lvXMLNodeReturn.text blijkt maar 254 aan te kunnen in Navision (Navision kapt strings uit externe componenten af)
          // Daarom nu anders, nu 'onbeperkte' lengte.
          OTextNode := lvXMLNodeReturn.FirstChild;
        END;
        IF XMLDOMMgt.FindNode(XMLNode,'LastTextLineOfRubric',lvXMLNodeReturn) THEN          // dp00563.n
          FormatCU.EvaluateBoolean(lvXMLNodeReturn.InnerText, "Last Text Line of Rubric");  // dp00563.n
      END;

      EXIT(TRUE);
    END;

    PROCEDURE HourAccountingLine@1100485008(XMLNode@1100485001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR VarDebriefRec@1100485002 : Record 11012685) @1000 : Boolean;
    VAR
      lvXMLNodeReturn@1100485000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      WITH VarDebriefRec DO BEGIN
        CLEAR(VarDebriefRec);
        INIT;

        IF XMLDOMMgt.FindNode(XMLNode,'ResourceNo',lvXMLNodeReturn) THEN
          "Resource No. (Employee)" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'WorkOrderNo',lvXMLNodeReturn) THEN
          "Work Order No." := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'ProjectNo',lvXMLNodeReturn) THEN
           "Project No." := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'Date',lvXMLNodeReturn) THEN
          FormatCU.EvaluateDate(lvXMLNodeReturn.InnerText,Date);
        IF XMLDOMMgt.FindNode(XMLNode,'Type',lvXMLNodeReturn) THEN
          IF UPPERCASE(lvXMLNodeReturn.InnerText) = 'INDIRECT' THEN  //* Else the init optionvalue 'Direct'
            Type := Type::Indirect;
        IF XMLDOMMgt.FindNode(XMLNode,'AdditionalCost',lvXMLNodeReturn) THEN
          FormatCU.EvaluateBoolean(lvXMLNodeReturn.InnerText,"Additional Cost (Service)");
        IF XMLDOMMgt.FindNode(XMLNode,'CostObject',lvXMLNodeReturn) THEN
          "Cost Object" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'CostCode',lvXMLNodeReturn) THEN
          "Cost Code" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'WageComponent',lvXMLNodeReturn) THEN
          "Wage Component" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'HourLineTemplateCode',lvXMLNodeReturn) THEN
          "Hour Line Template Code" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'Quantity',lvXMLNodeReturn) THEN
          FormatCU.EvaluateDecimal(lvXMLNodeReturn.InnerText,Quantity);
        IF XMLDOMMgt.FindNode(XMLNode,'Amount',lvXMLNodeReturn) THEN
          FormatCU.EvaluateDecimal(lvXMLNodeReturn.InnerText,Amount);
        IF XMLDOMMgt.FindNode(XMLNode,'Comment',lvXMLNodeReturn) THEN
          Comment := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'TimeFrom',lvXMLNodeReturn) THEN
          IF EVALUATE("Time From", lvXMLNodeReturn.InnerText) THEN;
        IF XMLDOMMgt.FindNode(XMLNode,'TimeUntil',lvXMLNodeReturn) THEN
          IF EVALUATE("Time Until", lvXMLNodeReturn.InnerText) THEN;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE DecentralWorkOrder@1100485001(XMLNode@1100485001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR VarDebriefRec@1100485002 : Record 11012686;VAR DebriefCompany@1100527000 : Text[30]) @1000 : Boolean;
    VAR
      lvXMLNodeReturn@1100485000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      WITH VarDebriefRec DO BEGIN
        CLEAR(VarDebriefRec);
        INIT;
        DebriefCompany := '';

        IF XMLDOMMgt.FindNode(XMLNode,'ResourceNo',lvXMLNodeReturn) THEN
          "Resource No. (Employee)" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'WorkOrderNo',lvXMLNodeReturn) THEN
          "Mobile Work Order No." := lvXMLNodeReturn.InnerText;  //Note: Is tmp workorder number in Mobile for the decentral order
        IF XMLDOMMgt.FindNode(XMLNode,'CompanyName',lvXMLNodeReturn) THEN
          DebriefCompany := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'ServiceLocationCode',lvXMLNodeReturn) THEN
          "Service Location No." := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'CustomerNo',lvXMLNodeReturn) THEN
          "Customer No." := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'Name',lvXMLNodeReturn) THEN
          Name := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'Address',lvXMLNodeReturn) THEN
          Address := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'PostCode',lvXMLNodeReturn) THEN
          "Post Code" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'City',lvXMLNodeReturn) THEN
          City := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'PhoneNo',lvXMLNodeReturn) THEN
          "Phone No." := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'ContactName',lvXMLNodeReturn) THEN
          "Contact Name" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'CallNo',lvXMLNodeReturn) THEN
          "Call No." := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'OrderNoCustomer',lvXMLNodeReturn) THEN
          "Order No. Customer" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'Description',lvXMLNodeReturn) THEN
          Description := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'ProblemText',lvXMLNodeReturn) THEN
          "Problem Text" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'Priority',lvXMLNodeReturn) THEN
          Priority := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'DateTime',lvXMLNodeReturn) THEN
          FormatCU.EvaluateDateTime(lvXMLNodeReturn.InnerText,"Date/Time");
        IF XMLDOMMgt.FindNode(XMLNode,'ContactName',lvXMLNodeReturn) THEN
          "Contact Name" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'ObjectNo',lvXMLNodeReturn) THEN
          "Object No." := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'CallingContact',lvXMLNodeReturn) THEN
          "Calling Contact" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'CallingPhoneNo',lvXMLNodeReturn) THEN
          "Calling Phone No." := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'DepartmentCode',lvXMLNodeReturn) THEN
          "Global Dimension 1 Code" := lvXMLNodeReturn.InnerText;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE PositionLogEntry@1210190000(XMLNode@1210190001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR VarEmplPosLogEntry@1210190000 : Record 11020446;VAR ResourceNo@1100527000 : Code[20]) : Boolean;
    VAR
      lvXMLNodeReturn@1210190002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      WITH VarEmplPosLogEntry DO BEGIN
        CLEAR(VarEmplPosLogEntry);
        INIT;

        IF XMLDOMMgt.FindNode(XMLNode,'ResourceNo',lvXMLNodeReturn) THEN
          ResourceNo := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'ReceivingDate',lvXMLNodeReturn) THEN
          FormatCU.EvaluateDateTime(lvXMLNodeReturn.InnerText,"Receiving Date");
        IF XMLDOMMgt.FindNode(XMLNode,'Latitude',lvXMLNodeReturn) THEN
          FormatCU.EvaluateDecimal(lvXMLNodeReturn.InnerText,Latitude);
        IF XMLDOMMgt.FindNode(XMLNode,'Longitude',lvXMLNodeReturn) THEN
          FormatCU.EvaluateDecimal(lvXMLNodeReturn.InnerText,Longitude);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE OrderInspectionLine@1100528100(XMLNode@1100485001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR VarDebriefRec@1100485002 : Record 11020447) @1000 : Boolean;
    VAR
      lvXMLNodeReturn@1100485000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      WITH VarDebriefRec DO BEGIN
        CLEAR(VarDebriefRec);
        INIT;

        IF XMLDOMMgt.FindNode(XMLNode,'ResourceNo',lvXMLNodeReturn) THEN
          "Resource No. (Employee)" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'WorkOrderNo',lvXMLNodeReturn) THEN
          "Work Order No." := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'ObjectNo',lvXMLNodeReturn) THEN
          "Service Object No." := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'MaintenanceScheme',lvXMLNodeReturn) THEN
          "Maintenance Scheme Code" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'LineNo',lvXMLNodeReturn) THEN
          FormatCU.EvaluateInteger(lvXMLNodeReturn.InnerText, "Serv. Ord. Inspection Line No.");
      // DP00626.sn
        IF XMLDOMMgt.FindNode(XMLNode,'ServiceInspectionListCode',lvXMLNodeReturn) THEN
          Code := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'IndexDate',lvXMLNodeReturn) THEN
          FormatCU.EvaluateDate(lvXMLNodeReturn.InnerText, "Index Date");
        IF XMLDOMMgt.FindNode(XMLNode,'ServiceInspectionLineNo',lvXMLNodeReturn) THEN
          FormatCU.EvaluateInteger(lvXMLNodeReturn.InnerText, "Inspection Line No.");
        IF XMLDOMMgt.FindNode(XMLNode, 'Type', lvXMLNodeReturn) THEN
          FormatCU.EvaluateOption(lvXMLNodeReturn.InnerText, Type);
        IF XMLDOMMgt.FindNode(XMLNode, 'InspectionGroupCode', lvXMLNodeReturn) THEN
          "Inspection Group Code" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode, 'InspectionCode', lvXMLNodeReturn) THEN
          "Inspection Code" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode, 'Description', lvXMLNodeReturn) THEN
          Description := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode, 'FieldType', lvXMLNodeReturn) THEN
          FormatCU.EvaluateOption(lvXMLNodeReturn.InnerText, "Field Type");
        IF XMLDOMMgt.FindNode(XMLNode, 'UnitOfMeasure', lvXMLNodeReturn) THEN
          "Unit Of Measure" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode, 'Mandatory', lvXMLNodeReturn) THEN
          FormatCU.EvaluateBoolean(lvXMLNodeReturn.InnerText, Mandatory);
        IF XMLDOMMgt.FindNode(XMLNode, 'IsAddedByUser', lvXMLNodeReturn) THEN
          FormatCU.EvaluateBoolean(lvXMLNodeReturn.InnerText, "Is Added By User");
      // DP00626.en
        IF XMLDOMMgt.FindNode(XMLNode,'OptionValue',lvXMLNodeReturn) THEN
          OptionValue := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'NumberValue',lvXMLNodeReturn) THEN
          IF NOT FormatCU.EvaluateDecimal(lvXMLNodeReturn.InnerText,NumberValue) THEN
            "NumberValue Is Empty" := TRUE;
        IF XMLDOMMgt.FindNode(XMLNode,'TextValue',lvXMLNodeReturn) THEN
          TextValue := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'DateValue',lvXMLNodeReturn) THEN
          IF NOT FormatCU.EvaluateDate(lvXMLNodeReturn.InnerText,DateValue) THEN
            DateValue := 0D;
        IF XMLDOMMgt.FindNode(XMLNode,'LowerValue',lvXMLNodeReturn) THEN
          FormatCU.EvaluateDecimal(lvXMLNodeReturn.InnerText,"Lower Value");
        IF XMLDOMMgt.FindNode(XMLNode,'UpperValue',lvXMLNodeReturn) THEN
          FormatCU.EvaluateDecimal(lvXMLNodeReturn.InnerText,"Upper Value");
        IF XMLDOMMgt.FindNode(XMLNode,'Comment',lvXMLNodeReturn) THEN
          Comment := lvXMLNodeReturn.InnerText;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE OrderObjectSpecificationLine@1210190002(XMLNode@1100485001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR VarDebriefRec@1100485002 : Record 11020448) @1000 : Boolean;
    VAR
      lvXMLNodeReturn@1100485000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      WITH VarDebriefRec DO BEGIN
        CLEAR(VarDebriefRec);
        INIT;

        IF XMLDOMMgt.FindNode(XMLNode,'ResourceNo',lvXMLNodeReturn) THEN
          "Resource No. (Employee)" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'WorkOrderNo',lvXMLNodeReturn) THEN
          "Work Order No." := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'ObjectNo',lvXMLNodeReturn) THEN
          "Service Object No." := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'SpecificationType',lvXMLNodeReturn) THEN
          FormatCU.EvaluateOption(lvXMLNodeReturn.InnerText, "Specification Type");
        IF XMLDOMMgt.FindNode(XMLNode,'Code',lvXMLNodeReturn) THEN
          Code := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'SpecificationLineNo',lvXMLNodeReturn) THEN
          FormatCU.EvaluateInteger(lvXMLNodeReturn.InnerText, "Specification Line No.");
        IF XMLDOMMgt.FindNode(XMLNode,'OptionValue',lvXMLNodeReturn) THEN
          OptionValue := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'NumberValue',lvXMLNodeReturn) THEN
          IF NOT FormatCU.EvaluateDecimal(lvXMLNodeReturn.InnerText,NumberValue) THEN
            "NumberValue Is Empty" := TRUE;
        IF XMLDOMMgt.FindNode(XMLNode,'TextValue',lvXMLNodeReturn) THEN
          TextValue := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'DateValue',lvXMLNodeReturn) THEN
          IF NOT FormatCU.EvaluateDate(lvXMLNodeReturn.InnerText,DateValue) THEN
            DateValue := 0D;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE WorkOrderText@1210190003(XMLNode@1100485001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR VarDebriefRec@1100485002 : Record 11020449) @1000 : Boolean;
    VAR
      lvXMLNodeReturn@1100485000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      WITH VarDebriefRec DO BEGIN
        CLEAR(VarDebriefRec);
        INIT;

        IF XMLDOMMgt.FindNode(XMLNode,'ResourceNo',lvXMLNodeReturn) THEN
          "Resource No. (Employee)" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'WorkOrderNo',lvXMLNodeReturn) THEN
          "Work Order No." := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'TextType',lvXMLNodeReturn) THEN
          FormatCU.EvaluateInteger(lvXMLNodeReturn.InnerText, "Table Field");
        IF XMLDOMMgt.FindNode(XMLNode,'LineNo',lvXMLNodeReturn) THEN
          FormatCU.EvaluateInteger(lvXMLNodeReturn.InnerText, "Comment Line No.");
        IF XMLDOMMgt.FindNode(XMLNode,'Comment',lvXMLNodeReturn) THEN
          Comment := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'LineBreak',lvXMLNodeReturn) THEN
          FormatCU.EvaluateBoolean(lvXMLNodeReturn.InnerText, "Line Break");
        IF XMLDOMMgt.FindNode(XMLNode,'FirstLine',lvXMLNodeReturn) THEN
          FormatCU.EvaluateBoolean(lvXMLNodeReturn.InnerText, "First Line");
        IF XMLDOMMgt.FindNode(XMLNode,'AddTextToCall',lvXMLNodeReturn) THEN
          FormatCU.EvaluateBoolean(lvXMLNodeReturn.InnerText, "Add Text To Call");
      END;

      EXIT(TRUE);
    END;

    PROCEDURE RestockItem@1100528101(XMLNode@1100485001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR VarDebriefRec@1100485002 : Record 11125645) @1000 : Boolean;
    VAR
      lvXMLNodeReturn@1100485000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      WITH VarDebriefRec DO BEGIN
        CLEAR(VarDebriefRec);
        INIT;

        //Note: No WorkOrderNo for this debrief type
        IF XMLDOMMgt.FindNode(XMLNode,'ResourceNo',lvXMLNodeReturn) THEN
          "Resource No. (Employee)" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'ItemNo',lvXMLNodeReturn) THEN
          "Item No." := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'Description',lvXMLNodeReturn) THEN
          Description := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'Description2',lvXMLNodeReturn) THEN
          "Description 2" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'QuantityOrder',lvXMLNodeReturn) THEN
          FormatCU.EvaluateDecimal(lvXMLNodeReturn.InnerText,Quantity);
        IF XMLDOMMgt.FindNode(XMLNode,'UnitOfMeasureNo',lvXMLNodeReturn) THEN
          "Unit of Measure" := lvXMLNodeReturn.InnerText;
      // C024394.sn
        IF XMLDOMMgt.FindNode(XMLNode,'TradeItem',lvXMLNodeReturn) THEN
          "Trade Item" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'VendorTradeItem',lvXMLNodeReturn) THEN
          "Vendor (Trade Item)" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'DecentralCreatedGuid',lvXMLNodeReturn) THEN
          "Decentral Created Guid" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'Purchase',lvXMLNodeReturn) THEN
          FormatCU.EvaluateBoolean(lvXMLNodeReturn.InnerText, Purchase);
      // C024394.en
        IF XMLDOMMgt.FindNode(XMLNode,'FromLocationCode',lvXMLNodeReturn) THEN
          "From Location Code" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'LocationCode',lvXMLNodeReturn) THEN
          "New Location Code" := lvXMLNodeReturn.InnerText;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE CreateRestockPurchOrder@1100525001(XMLNode@1100525001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR DebriefCreateRestockPO@1100525000 : Record 11229869) : Boolean;
    VAR
      XMLNode2@1100525002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      // C024394
      WITH DebriefCreateRestockPO DO BEGIN
        CLEAR(DebriefCreateRestockPO);
        INIT;

        IF XMLDOMMgt.FindNode(XMLNode, 'ResourceNo', XMLNode2) THEN
          "Resource No. (Employee)" := XMLNode2.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode, 'DecentralCreatedGuid', XMLNode2) THEN
          "Decentral Created Guid" := XMLNode2.InnerText;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE Planning@1100409000(XMLNode@1100485001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR VarDebriefRec@1100485002 : Record 11125646) @1000 : Boolean;
    VAR
      lvXMLNodeReturn@1100485000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      WITH VarDebriefRec DO BEGIN
        CLEAR(VarDebriefRec);
        INIT;

        IF XMLDOMMgt.FindNode(XMLNode,'ResourceNo',lvXMLNodeReturn) THEN
          "Resource No. (Employee)" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'WorkOrderNo',lvXMLNodeReturn) THEN
          "Work Order No." := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode,'StartDate',lvXMLNodeReturn) THEN
          FormatCU.EvaluateDate(lvXMLNodeReturn.InnerText,"Starting Date");
        IF XMLDOMMgt.FindNode(XMLNode,'StartTime',lvXMLNodeReturn) THEN
          FormatCU.EvaluateTime(STRSUBSTNO('%1:00',lvXMLNodeReturn.InnerText),"Starting Time");
      END;

      EXIT(TRUE);
    END;

    PROCEDURE MakeSignature@1100485002(VAR VarDebriefServOrderRec@1100485008 : Record 11012679;VAR InXMLNode@1100485004 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    BEGIN
      //* De digitale handtekening wordt als een gecodeerde textstring (bigtext, want kan meer dan 1024
      //* karakters zijn) aangeleverd. Deze moet geconverteerd worden naar een bmp-file (mbv een DLL),
      //* daarna kan de bmp-file als BLOB ingelezen worden. Idem als bij BDA-PCA in XML-port 11012024.
      //* Meer info over DLL bij Joost Mulder.

      //CREATE(lvBigText2BmpFile_FunctionsDll, FALSE, FileMgt.IsRTC);
      //
      //lvPathTmpFiles := OperatingSystemMgt.ClientEnviron('TEMP');
      //lvLen := STRLEN(lvPathTmpFiles);
      //IF lvLen > 0 THEN BEGIN
      //  IF (COPYSTR(lvPathTmpFiles,lvLen,1) <> '\') THEN
      //    lvPathTmpFiles := lvPathTmpFiles + '\';
      //END;
      //lvFile := lvPathTmpFiles + 'Tmp'+ USERID + '-SODebriefSignature.bmp';
      //
      //IF lvBigText2BmpFile_FunctionsDll.WriteXMLImageFromXmlNode(1.0, lvFile, InXMLNode) THEN BEGIN
      //  FileMgt.BLOBImport4PS(TempBlob, lvFile, FALSE);
      //  VarDebriefServOrderRec.Signature := TempBlob.Blob;
      //END;
      //Base64String.ADDTEXT(InXMLNode.InnerText);
      ConvertFromBase64StringToBlob(VarDebriefServOrderRec,InXMLNode.InnerText);
    END;

    PROCEDURE SUPProduction@1100525000(XMLNode@1100525001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR VarDebriefRec@1100525000 : Record 11125650) : Boolean;
    VAR
      lvXMLNodeReturn@1100525002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      WITH VarDebriefRec DO BEGIN
        CLEAR(VarDebriefRec);
        INIT;

        IF XMLDOMMgt.FindNode(XMLNode, 'ResourceNo', lvXMLNodeReturn) THEN
          "Resource No. (Employee)" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode, 'WorkOrderNo', lvXMLNodeReturn) THEN
          "Work Order No." := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode, 'UnitPriceCode', lvXMLNodeReturn) THEN
          VarDebriefRec."Unit Price Code" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode, 'IndexDate', lvXMLNodeReturn) THEN
          FormatCU.EvaluateDate(lvXMLNodeReturn.InnerText, "Index Date");
        IF XMLDOMMgt.FindNode(XMLNode, 'Description', lvXMLNodeReturn) THEN
          Description := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode, 'Description2', lvXMLNodeReturn) THEN
          "Description 2" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode, 'Description3', lvXMLNodeReturn) THEN
          "Description 3" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode, 'Room', lvXMLNodeReturn) THEN
          Room := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode, 'Part', lvXMLNodeReturn) THEN
          Part := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode, 'RecordingLineNo', lvXMLNodeReturn) THEN
          FormatCU.EvaluateInteger(lvXMLNodeReturn.InnerText, VarDebriefRec."Recording Line No.");
        IF XMLDOMMgt.FindNode(XMLNode, 'ProductionDate', lvXMLNodeReturn) THEN
          FormatCU.EvaluateDate(lvXMLNodeReturn.InnerText, "Production Date");
        IF XMLDOMMgt.FindNode(XMLNode, 'ProductionValue', lvXMLNodeReturn) THEN
          FormatCU.EvaluateDecimal(lvXMLNodeReturn.InnerText, Production);
        IF XMLDOMMgt.FindNode(XMLNode, 'HasBeenAddedByUser', lvXMLNodeReturn) THEN
          FormatCU.EvaluateBoolean(lvXMLNodeReturn.InnerText, "Has Been Added by User");
      END;

      EXIT(TRUE);
    END;

    PROCEDURE ServiceOrderObject@1100528700(XMLNode@1100528701 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR DebriefServiceOrderObject@1100528700 : Record 11125652) : Boolean;
    VAR
      XMLNode2@1100528702 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      WorkOrder@1100525000 : Record 11229279;
      ServiceOrder@1100525001 : Record 11012823;
    BEGIN
      // dp00276
      WITH DebriefServiceOrderObject DO BEGIN
        CLEAR(DebriefServiceOrderObject);
        INIT;

        IF XMLDOMMgt.FindNode(XMLNode, 'ResourceNo', XMLNode2) THEN
          "Resource No. (Employee)" := XMLNode2.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode, 'WorkOrderNo', XMLNode2) THEN
          "Work Order No." := XMLNode2.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode, 'MobileObjectNo', XMLNode2) THEN
          "Mobile Service Object No." := XMLNode2.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode, 'ObjectNo', XMLNode2) THEN
          "Service Object No." := XMLNode2.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode, 'Description', XMLNode2) THEN
          Description := XMLNode2.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode, 'StandardObjectNo', XMLNode2) THEN
          "Standard Object No." := XMLNode2.InnerText;
      // DP00826.sn
        IF XMLDOMMgt.FindNode(XMLNode, 'BrandCode', XMLNode2) THEN
          "Brand Code" := XMLNode2.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode, 'ModelCode', XMLNode2) THEN
          "Model Code" := XMLNode2.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode, 'TypeCode', XMLNode2) THEN
          "Type Code" := XMLNode2.InnerText;
      // DP00826.en
        IF XMLDOMMgt.FindNode(XMLNode, 'Building', XMLNode2) THEN
          Building := XMLNode2.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode, 'Floor', XMLNode2) THEN
          Floor := XMLNode2.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode, 'Room', XMLNode2) THEN
          Room := XMLNode2.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode, 'ObjectCustomer', XMLNode2) THEN
          "Object Customer" := XMLNode2.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode, 'Quantity', XMLNode2) THEN
          FormatCU.EvaluateInteger(XMLNode2.InnerText, Quantity);
        IF XMLDOMMgt.FindNode(XMLNode, 'HasBeenAddedByUser', XMLNode2) THEN
          FormatCU.EvaluateBoolean(XMLNode2.InnerText, "Has Been Added by User");
        IF XMLDOMMgt.FindNode(XMLNode, 'HasBeenModifiedByUser', XMLNode2) THEN
          FormatCU.EvaluateBoolean(XMLNode2.InnerText, "Has Been Modified by User");
        IF XMLDOMMgt.FindNode(XMLNode, 'HasBeenCreatedByUser', XMLNode2) THEN
          FormatCU.EvaluateBoolean(XMLNode2.InnerText, "Has Been Created by User");
        IF XMLDOMMgt.FindNode(XMLNode, 'HasBeenDeletedByUser', XMLNode2) THEN // DP00826
          FormatCU.EvaluateBoolean(XMLNode2.InnerText, "Has Been Deleted by User");
        IF XMLDOMMgt.FindNode(XMLNode, 'HasBeenReplacedByUser', XMLNode2) THEN
          FormatCU.EvaluateBoolean(XMLNode2.InnerText, "Has Been Replaced by User");
        IF WorkOrder.GET("Work Order No.") THEN
          IF WorkOrder."Source Type" = WorkOrder."Source Type"::ServiceOrder THEN BEGIN
            IF (WorkOrder."Source Company" <> '') AND (WorkOrder."Source Company" <> COMPANYNAME) THEN
              ServiceOrder.CHANGECOMPANY(WorkOrder."Source Company");
            IF ServiceOrder.GET(WorkOrder."Source No.") THEN
              "Effective Date Replacement" := ServiceOrder."Order Date";
          END;
        IF XMLDOMMgt.FindNode(XMLNode, 'StandardObjectNoReplacement', XMLNode2) THEN
          "Standard Obj. No. Replacement" := XMLNode2.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode, 'DescriptionReplacement', XMLNode2) THEN
          "Description Replacement" := XMLNode2.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode, 'LastObjectOfMessage', XMLNode2) THEN
          FormatCU.EvaluateBoolean(XMLNode2.InnerText, "Last Object of Message");
      END;

      EXIT(TRUE);
    END;

    PROCEDURE MileageEntry@1100528701(XMLNode@1100528701 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR MileageEntry@1100528700 : Record 11229873) : Boolean;
    VAR
      XMLNode2@1100528704 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      WITH MileageEntry DO BEGIN
        CLEAR(MileageEntry);
        INIT;

        IF XMLDOMMgt.FindNode(XMLNode, 'Date', XMLNode2) THEN
          FormatCU.EvaluateDateTime(XMLNode2.InnerText, Date);
        IF XMLDOMMgt.FindNode(XMLNode, 'FieldServiceCode', XMLNode2) THEN
          FieldServiceCode := XMLNode2.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode, 'WorkOrderNo', XMLNode2) THEN
          WorkOrderNo := XMLNode2.InnerText;
        IF XMLDOMMgt.FindNode(XMLNode, 'Mileage', XMLNode2) THEN
          FormatCU.EvaluateDecimal(XMLNode2.InnerText, Mileage);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE ConvertFromBase64StringToBlob@1100528102(VAR VarDebriefServOrderRec@1100528100 : Record 11012679;Base64String@1100528101 : Text);
    VAR
      Bytes@1100528105 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      Convert@1100528104 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      MemoryStream@1100528103 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
      OStream@1100528102 : OutStream;
    BEGIN
      Bytes := Convert.FromBase64String(Base64String);
      MemoryStream := MemoryStream.MemoryStream(Bytes);
      VarDebriefServOrderRec.Signature.CREATEOUTSTREAM(OStream);
      MemoryStream.WriteTo(OStream);
    END;

    BEGIN
    END.
  }
}

