OBJECT Report 11126173 Export SEPA Payment File
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVFI10.00 (13403);
  }
  PROPERTIES
  {
    CaptionML=ENU=Export SEPA Payment File;
    ProcessingOnly=Yes;
    OnInitReport=VAR
                   SEPARefPmtExported@1090000 : Record 11126182;
                 BEGIN
                   IF NOT FileMgt.CanRunDotNetOnClient THEN
                     ERROR(CannotRunDotNetError);

                   SEPARefPmtExported.RESET;
                   SEPARefPmtExported.SETCURRENTKEY("Payment Date","Vendor No.","Entry No.");
                   SEPARefPmtExported.SETRANGE(Transferred,FALSE);
                   SEPARefPmtExported.SETRANGE("Applied Payments",FALSE);
                   IF SEPARefPmtExported.FINDFIRST THEN BEGIN
                     ReferenceFileSetup.RESET;
                     ReferenceFileSetup.SETRANGE("No.",SEPARefPmtExported."Payment Account");
                     IF ReferenceFileSetup.FINDFIRST THEN BEGIN
                       ReferenceFileSetup.TESTFIELD("Bank Party ID");
                       ReferenceFileSetup.VALIDATE("Bank Party ID");
                       FileName := ReferenceFileSetup."File Name";
                     END;
                   END;
                 END;

    OnPreReport=BEGIN
                  IF FileName = '' THEN
                    ERROR(Text13407);

                  TmpFileNameServer := FileMgt.ServerTempFileName('.tmp');
                  XMLFileNameServer := FileMgt.ServerTempFileName('.xml')
                END;

    OnPostReport=BEGIN
                   FileMgt.DownloadToFile(XMLFileNameServer,FileName);
                   MESSAGE(Text13400,FileName);
                 END;

    UseRequestPage=No;
  }
  DATASET
  {
    { 8081;    ;DataItem;RefPaymentExported  ;
               DataItemTable=Table11126182;
               DataItemTableView=SORTING(Payment Account,Payment Date)
                                 WHERE(Transferred=CONST(No),
                                       Applied Payments=CONST(No),
                                       SEPA Payment=CONST(Yes));
               OnPreDataItem=BEGIN
                               GLSetup.GET;
                               CompanyInfo.GET;
                               PurchSetup.GET;
                               CheckSEPAValidations;
                               IF ISEMPTY THEN
                                 ERROR(Text13403);

                               CurrPaymentAccount := '';
                               CurrPaymentDate := 0D;
                               CLEAR(XMLDomDoc);
                               CLEAR(XMLDomMgt);
                               XMLDomDoc := XMLDomDoc.XmlDocument;

                               ExportHeader;
                               FirstPaymentHeader := TRUE;
                             END;

               OnAfterGetRecord=BEGIN
                                  IF ("Payment Account" <> CurrPaymentAccount) OR ("Payment Date" <> CurrPaymentDate) THEN BEGIN
                                    IF NOT FirstPaymentHeader THEN // Closing element for previous Payment Information (PmtInf)
                                      XMLNodeCurr := XMLNodeCurr.ParentNode;
                                    ExportPaymentHeader;
                                    CurrPaymentAccount := "Payment Account";
                                    CurrPaymentDate := "Payment Date";
                                    FirstPaymentHeader := FALSE;
                                  END;
                                  ExportPaymentInformation;
                                END;

               OnPostDataItem=BEGIN
                                XMLDomDoc.Save(TmpFileNameServer);
                                CLEAR(XMLDomDoc);
                                FormatOutput;
                              END;
                               }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      CompanyInfo@1090000 : Record 79;
      PurchSetup@1090001 : Record 312;
      Vendor@1090002 : Record 23;
      ReferenceFileSetup@1090003 : Record 11126180;
      GLSetup@1090019 : Record 98;
      NoSeriesMgt@1090005 : Codeunit 396;
      FileMgt@1090027 : Codeunit 419;
      XMLDomMgt@1000 : Codeunit 6224;
      XMLDomDoc@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLNodeCurr@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLFileNameServer@1090025 : Text[250];
      TmpFileNameServer@1090017 : Text[250];
      FileName@1090008 : Text[250];
      MessageId@1090009 : Text[20];
      Text13400@1090013 : TextConst 'ENU=Transfer File %1 Created Successfully.';
      Text13403@1090016 : TextConst 'ENU=There is nothing to send.';
      Text13405@1090018 : TextConst 'ENU=Payment Account %1 is not in a Country/Region that allows SEPA Payments.';
      Text13407@1090020 : TextConst 'ENU=Enter the file name.;NOR=Angi filnavnet.;SVE=Ange filnamnet.';
      CurrPaymentAccount@1090011 : Code[20];
      CurrPaymentDate@1090012 : Date;
      ControlSum@1090021 : Decimal;
      FirstPaymentHeader@1090004 : Boolean;
      CannotRunDotNetError@1090006 : TextConst 'ENU=You cannot create a SEPA payment file from the client.';

    LOCAL PROCEDURE ExportHeader@1090009();
    VAR
      XMLRootElement@1090000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      XMLNewChild@1090001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      xmlNameSpace@1090003 : Text;
      xsiNameSpace@1090002 : Text;
      xsdName@1090004 : Text;
    BEGIN
      xsdName := 'pain.001.001.02';
      xmlNameSpace := 'urn:iso:std:iso:20022:tech:xsd:' + xsdName;
      xsiNameSpace := 'http://www.w3.org/2001/XMLSchema-instance';

      XMLDomMgt.LoadXMLDocumentFromText('<?xml version="1.0" encoding="UTF-8"?><Document></Document>',XMLDomDoc);
      XMLRootElement := XMLDomDoc.DocumentElement;
      XMLRootElement.SetAttribute('xmlns',xmlNameSpace);
      XMLRootElement.SetAttribute('xmlns:xsi',xsiNameSpace);
      XMLRootElement.SetAttribute('schemaLocation',xsiNameSpace,xmlNameSpace + ' ' + xsdName + '.xsd');

      XMLNodeCurr := XMLDomDoc.SelectSingleNode('Document');
      XMLDomMgt.AddElement(XMLNodeCurr,xsdName,'','',XMLNewChild);
      XMLNodeCurr := XMLNewChild;
      ExportGroupHeader;
    END;

    LOCAL PROCEDURE ExportGroupHeader@1090001();
    VAR
      RefPaymentExported@1090001 : Record 11126182;
      XMLNewChild@1090000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      XMLDomMgt.AddElement(XMLNodeCurr,'GrpHdr','','',XMLNewChild);
      XMLNodeCurr := XMLNewChild;
      MessageId := NoSeriesMgt.GetNextNo(PurchSetup."Bank Batch Nos.",WORKDATE,TRUE);
      XMLDomMgt.AddElement(XMLNodeCurr,'MsgId',MessageId,'',XMLNewChild);
      XMLDomMgt.AddElement(XMLNodeCurr,'CreDtTm',FORMAT(CURRENTDATETIME,19,9),'',XMLNewChild);
      RefPaymentExported.RESET;
      RefPaymentExported.SETRANGE("SEPA Payment",TRUE);
      RefPaymentExported.SETRANGE(Transferred,FALSE);
      RefPaymentExported.SETRANGE("Applied Payments",FALSE);
      IF RefPaymentExported.FINDFIRST THEN
        XMLDomMgt.AddElement(XMLNodeCurr,'NbOfTxs',FORMAT(RefPaymentExported.COUNT),'',XMLNewChild);
      XMLDomMgt.AddElement(XMLNodeCurr,'CtrlSum',FORMAT(ControlSum,0,'<Precision,2:2><Standard Format,9>'),'',XMLNewChild);
      XMLDomMgt.AddElement(XMLNodeCurr,'Grpg','MIXD','',XMLNewChild);
      XMLDomMgt.AddElement(XMLNodeCurr,'InitgPty','','',XMLNewChild);
      XMLNodeCurr := XMLNewChild;
      XMLDomMgt.AddElement(XMLNodeCurr,'Nm',CompanyInfo.Name,'',XMLNewChild);
      XMLDomMgt.AddElement(XMLNodeCurr,'PstlAdr','','',XMLNewChild);
      XMLNodeCurr := XMLNewChild;

      XMLDomMgt.AddElement(XMLNodeCurr,'AdrLine',GetAddressLine(0,1),'',XMLNewChild);
      XMLDomMgt.AddElement(XMLNodeCurr,'AdrLine',GetAddressLine(0,2),'',XMLNewChild);
      XMLDomMgt.AddElement(XMLNodeCurr,'Ctry',COPYSTR(CompanyInfo."Country/Region Code",1,2),'',XMLNewChild);
      XMLNodeCurr := XMLNodeCurr.ParentNode;
      XMLDomMgt.AddElement(XMLNodeCurr,'Id','','',XMLNewChild);
      XMLNodeCurr := XMLNewChild;
      XMLDomMgt.AddElement(XMLNodeCurr,'OrgId','','',XMLNewChild);
      XMLNodeCurr := XMLNewChild;
      XMLDomMgt.AddElement(XMLNodeCurr,'BkPtyId',ReferenceFileSetup."Bank Party ID",'',XMLNewChild);
      XMLNodeCurr := XMLNodeCurr.ParentNode;
      XMLNodeCurr := XMLNodeCurr.ParentNode;
      XMLNodeCurr := XMLNodeCurr.ParentNode;
      XMLNodeCurr := XMLNodeCurr.ParentNode;
    END;

    LOCAL PROCEDURE ExportPaymentHeader@1090000();
    VAR
      BankAcc@1090003 : Record 270;
      XMLNewChild@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      BankAcc.GET(RefPaymentExported."Payment Account");

      XMLDomMgt.AddElement(XMLNodeCurr,'PmtInf','','',XMLNewChild);
      XMLNodeCurr := XMLNewChild;

      XMLDomMgt.AddElement(XMLNodeCurr,'PmtInfId',MessageId,'',XMLNewChild);
      XMLDomMgt.AddElement(XMLNodeCurr,'PmtMtd','TRF','',XMLNewChild);
      XMLDomMgt.AddElement(XMLNodeCurr,'ReqdExctnDt',FORMAT(RefPaymentExported."Payment Date",0,9),'',XMLNewChild); // r30
      XMLDomMgt.AddElement(XMLNodeCurr,'Dbtr','','',XMLNewChild);
      XMLNodeCurr := XMLNewChild;

      XMLDomMgt.AddElement(XMLNodeCurr,'Nm',CompanyInfo.Name,'',XMLNewChild);
      XMLDomMgt.AddElement(XMLNodeCurr,'PstlAdr','','',XMLNewChild);
      XMLNodeCurr := XMLNewChild;

      XMLDomMgt.AddElement(XMLNodeCurr,'AdrLine',GetAddressLine(0,1),'',XMLNewChild);
      XMLDomMgt.AddElement(XMLNodeCurr,'AdrLine',GetAddressLine(0,2),'',XMLNewChild);
      XMLDomMgt.AddElement(XMLNodeCurr,'Ctry',COPYSTR(CompanyInfo."Country/Region Code",1,2),'',XMLNewChild);
      XMLNodeCurr := XMLNodeCurr.ParentNode;

      XMLDomMgt.AddElement(XMLNodeCurr,'Id','','',XMLNewChild);
      XMLNodeCurr := XMLNewChild;
      XMLDomMgt.AddElement(XMLNodeCurr,'OrgId','','',XMLNewChild);
      XMLNodeCurr := XMLNewChild;
      XMLDomMgt.AddElement(XMLNodeCurr,'BkPtyId',ReferenceFileSetup."Bank Party ID",'',XMLNewChild);
      XMLNodeCurr := XMLNodeCurr.ParentNode;
      XMLNodeCurr := XMLNodeCurr.ParentNode;
      XMLNodeCurr := XMLNodeCurr.ParentNode;

      XMLDomMgt.AddElement(XMLNodeCurr,'DbtrAcct','','',XMLNewChild);
      XMLNodeCurr := XMLNewChild;

      XMLDomMgt.AddElement(XMLNodeCurr,'Id','','',XMLNewChild);
      XMLNodeCurr := XMLNewChild;

      XMLDomMgt.AddElement(XMLNodeCurr,'IBAN',COPYSTR(BankAcc.IBAN,1,34),'',XMLNewChild);
      XMLNodeCurr := XMLNodeCurr.ParentNode;
      XMLNodeCurr := XMLNodeCurr.ParentNode;

      XMLDomMgt.AddElement(XMLNodeCurr,'DbtrAgt','','',XMLNewChild);
      XMLNodeCurr := XMLNewChild;

      XMLDomMgt.AddElement(XMLNodeCurr,'FinInstnId','','',XMLNewChild);
      XMLNodeCurr := XMLNewChild;

      XMLDomMgt.AddElement(XMLNodeCurr,'BIC',COPYSTR(BankAcc."SWIFT Code",1,11),'',XMLNewChild);
      XMLNodeCurr := XMLNodeCurr.ParentNode;
      XMLNodeCurr := XMLNodeCurr.ParentNode;

      XMLDomMgt.AddElement(XMLNodeCurr,'ChrgBr','SLEV','',XMLNewChild);
    END;

    LOCAL PROCEDURE ExportPaymentInformation@1090002();
    VAR
      VendBankAcc@1090001 : Record 288;
      XMLNewChild@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      Vendor.GET(RefPaymentExported."Vendor No.");
      VendBankAcc.GET(RefPaymentExported."Vendor No.",RefPaymentExported."Vendor Account");

      XMLDomMgt.AddElement(XMLNodeCurr,'CdtTrfTxInf','','',XMLNewChild);
      XMLNodeCurr := XMLNewChild;

      XMLDomMgt.AddElement(XMLNodeCurr,'PmtId','','',XMLNewChild);
      XMLNodeCurr := XMLNewChild;

      XMLDomMgt.AddElement(XMLNodeCurr,'EndToEndId',RefPaymentExported."Document No.",'',XMLNewChild);
      XMLNodeCurr := XMLNodeCurr.ParentNode;

      XMLDomMgt.AddElement(XMLNodeCurr,'Amt','','',XMLNewChild);
      XMLNodeCurr := XMLNewChild;
      XMLDomMgt.AddElement(
        XMLNodeCurr,'InstdAmt',FORMAT(RefPaymentExported.Amount,0,'<Precision,2:2><Standard Format,9>'),'',XMLNewChild);
      XMLDomMgt.AddAttribute(XMLNewChild,'Ccy',GetCurrencyCode(RefPaymentExported."Currency Code"));
      XMLNodeCurr := XMLNodeCurr.ParentNode;

      XMLDomMgt.AddElement(XMLNodeCurr,'CdtrAgt','','',XMLNewChild);
      XMLNodeCurr := XMLNewChild;

      XMLDomMgt.AddElement(XMLNodeCurr,'FinInstnId','','',XMLNewChild);
      XMLNodeCurr := XMLNewChild;

      IF VendBankAcc."SWIFT Code" <> '' THEN
        XMLDomMgt.AddElement(XMLNodeCurr,'BIC',COPYSTR(VendBankAcc."SWIFT Code",1,11),'',XMLNewChild)
      ELSE BEGIN
        XMLDomMgt.AddElement(XMLNodeCurr,'CmbndId','','',XMLNewChild);
        XMLNodeCurr := XMLNewChild;
        IF VendBankAcc."Clearing Code" <> '' THEN BEGIN
          XMLDomMgt.AddElement(XMLNodeCurr,'ClrSysMmbId','','',XMLNewChild);
          XMLNodeCurr := XMLNewChild;
          XMLDomMgt.AddElement(XMLNodeCurr,'Id',VendBankAcc."Clearing Code",'',XMLNewChild);
          XMLNodeCurr := XMLNodeCurr.ParentNode;
        END;

        IF VendBankAcc.Name <> '' THEN
          XMLDomMgt.AddElement(XMLNodeCurr,'Nm',VendBankAcc.Name,'',XMLNewChild);

        XMLDomMgt.AddElement(XMLNodeCurr,'PstlAdr','','',XMLNewChild);
        XMLNodeCurr := XMLNewChild;
        IF VendBankAcc.Address <> '' THEN
          XMLDomMgt.AddElement(XMLNodeCurr,'AdrLine',VendBankAcc.Address,'',XMLNewChild);
        IF VendBankAcc.City <> '' THEN
          XMLDomMgt.AddElement(XMLNodeCurr,'AdrLine',VendBankAcc.City,'',XMLNewChild);
        XMLDomMgt.AddElement(XMLNodeCurr,'Ctry',VendBankAcc."Country/Region Code",'',XMLNewChild);

        XMLNodeCurr := XMLNodeCurr.ParentNode;
        XMLNodeCurr := XMLNodeCurr.ParentNode;
      END;

      XMLNodeCurr := XMLNodeCurr.ParentNode;
      XMLNodeCurr := XMLNodeCurr.ParentNode;

      XMLDomMgt.AddElement(XMLNodeCurr,'Cdtr','','',XMLNewChild);
      XMLNodeCurr := XMLNewChild;

      XMLDomMgt.AddElement(XMLNodeCurr,'Nm',RefPaymentExported.Description,'',XMLNewChild);
      XMLDomMgt.AddElement(XMLNodeCurr,'PstlAdr','','',XMLNewChild);
      XMLNodeCurr := XMLNewChild;

      XMLDomMgt.AddElement(XMLNodeCurr,'AdrLine',GetAddressLine(1,1),'',XMLNewChild);
      XMLDomMgt.AddElement(XMLNodeCurr,'AdrLine',GetAddressLine(1,2),'',XMLNewChild);
      XMLDomMgt.AddElement(XMLNodeCurr,'Ctry',COPYSTR(Vendor."Country/Region Code",1,2),'',XMLNewChild);
      XMLNodeCurr := XMLNodeCurr.ParentNode;
      XMLNodeCurr := XMLNodeCurr.ParentNode;

      XMLDomMgt.AddElement(XMLNodeCurr,'CdtrAcct','','',XMLNewChild);
      XMLNodeCurr := XMLNewChild;

      XMLDomMgt.AddElement(XMLNodeCurr,'Id','','',XMLNewChild);
      XMLNodeCurr := XMLNewChild;

      IF VendBankAcc.IBAN <> '' THEN
        XMLDomMgt.AddElement(XMLNodeCurr,'IBAN',COPYSTR(VendBankAcc.IBAN,1,34),'',XMLNewChild)
      ELSE
        XMLDomMgt.AddElement(XMLNodeCurr,'BBAN',COPYSTR(VendBankAcc."Bank Account No.",1,30),'',XMLNewChild);
      XMLNodeCurr := XMLNodeCurr.ParentNode;
      XMLNodeCurr := XMLNodeCurr.ParentNode;

      XMLDomMgt.AddElement(XMLNodeCurr,'RmtInf','','',XMLNewChild);
      XMLNodeCurr := XMLNewChild;
      RefPaymentExported.UpdateRemittanceInfo;
      IF RefPaymentExported."Remittance Information" = RefPaymentExported."Remittance Information"::Structured THEN BEGIN
        XMLDomMgt.AddElement(XMLNodeCurr,'Strd','','',XMLNewChild);
        XMLNodeCurr := XMLNewChild;
        IF NOT RefPaymentExported."Foreign Payment" THEN BEGIN
          XMLDomMgt.AddElement(XMLNodeCurr,'CdtrRefInf','','',XMLNewChild);
          XMLNodeCurr := XMLNewChild;
          XMLDomMgt.AddElement(XMLNodeCurr,'CdtrRefTp','','',XMLNewChild);
          XMLNodeCurr := XMLNewChild;
          XMLDomMgt.AddElement(XMLNodeCurr,'Cd','SCOR','',XMLNewChild);
          XMLNodeCurr := XMLNodeCurr.ParentNode;
          IF RefPaymentExported."Invoice Message" <> '' THEN
            XMLDomMgt.AddElement(XMLNodeCurr,'CdtrRef',AddLeadingZeros(RefPaymentExported."Invoice Message",20,35),'',XMLNewChild);
        END ELSE BEGIN
          XMLDomMgt.AddElement(XMLNodeCurr,'RfrdDocInf','','',XMLNewChild);
          XMLNodeCurr := XMLNewChild;
          XMLDomMgt.AddElement(XMLNodeCurr,'RfrdDocTp','','',XMLNewChild);
          XMLNodeCurr := XMLNewChild;
          XMLDomMgt.AddElement(XMLNodeCurr,'Cd','CINV','',XMLNewChild);
          XMLNodeCurr := XMLNodeCurr.ParentNode;
          IF RefPaymentExported."External Document No." <> '' THEN
            XMLDomMgt.AddElement(XMLNodeCurr,'RfrdDocNb',RefPaymentExported."External Document No.",'',XMLNewChild);
        END;
        XMLNodeCurr := XMLNodeCurr.ParentNode;
        XMLNodeCurr := XMLNodeCurr.ParentNode;
      END ELSE
        IF RefPaymentExported."External Document No." <> '' THEN
          XMLDomMgt.AddElement(XMLNodeCurr,'Ustrd',RefPaymentExported."External Document No.",'',XMLNewChild);
      XMLNodeCurr := XMLNodeCurr.ParentNode;

      RefPaymentExported.Transferred := TRUE;
      RefPaymentExported."Transfer Date" := TODAY;
      RefPaymentExported."Transfer Time" := TIME;
      RefPaymentExported."Batch Code" := MessageId;
      RefPaymentExported."Payment Execution Date" := RefPaymentExported."Payment Date";
      RefPaymentExported."File Name" := FileName;
      RefPaymentExported.MODIFY;
      RefPaymentExported.MarkAffiliatedAsTransferred;

      XMLNodeCurr := XMLNodeCurr.ParentNode;
    END;

    LOCAL PROCEDURE CheckSEPAValidations@1090005();
    VAR
      Country@1090000 : Record 9;
      BankAcc@1090001 : Record 270;
      VendorBankAcc@1090002 : Record 288;
    BEGIN
      WITH RefPaymentExported DO BEGIN
        ControlSum := 0;
        RESET;
        SETCURRENTKEY("Payment Account","Payment Date");
        SETRANGE(Transferred,FALSE);
        SETRANGE("Applied Payments",FALSE);
        SETRANGE("SEPA Payment",TRUE);
        IF FINDSET THEN BEGIN
          REPEAT
            TESTFIELD("Vendor No.");
            TESTFIELD(Description);
            TESTFIELD("Vendor Account");
            TESTFIELD("Document No.");
            TESTFIELD(Amount);
            TESTFIELD("Payment Account");
            TESTFIELD("Payment Date");

            BankAcc.GET("Payment Account");
            BankAcc.TESTFIELD(IBAN);
            BankAcc.TESTFIELD("SWIFT Code");
            IF NOT Country.GET(BankAcc."Country/Region Code") THEN
              BankAcc.FIELDERROR("Country/Region Code");
            IF NOT Country."SEPA Allowed" THEN
              ERROR(Text13405,"Payment Account");

            VendorBankAcc.GET("Vendor No.","Vendor Account");
            IF NOT Country.GET(VendorBankAcc."Country/Region Code") THEN
              VendorBankAcc.FIELDERROR("Country/Region Code");
            IF Country."SEPA Allowed" THEN
              VendorBankAcc.TESTFIELD(IBAN)
            ELSE
              IF VendorBankAcc.IBAN = '' THEN
                VendorBankAcc.TESTFIELD("Bank Account No.");

            ControlSum += Amount;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE FormatOutput@1090008();
    VAR
      File@1090004 : File;
      NewFile@1090000 : File;
      InStream@1090006 : InStream;
      OutStream@1090007 : OutStream;
      Char@1090008 : Char;
      NeedsCRLF@1090010 : Boolean;
    BEGIN
      File.TEXTMODE(TRUE);
      File.OPEN(TmpFileNameServer);
      File.CREATEINSTREAM(InStream);
      NewFile.CREATE(XMLFileNameServer);
      NewFile.CREATEOUTSTREAM(OutStream);
      NeedsCRLF := FALSE;
      REPEAT
        InStream.READ(Char);
        IF AddCRLF(Char,NeedsCRLF) THEN
          OutStream.WRITETEXT;
        OutStream.WRITE(Char);
      UNTIL InStream.EOS;
      File.CLOSE;
      NewFile.CLOSE;
    END;

    PROCEDURE AddCRLF@1090011(Char@1090000 : Char;VAR NeedsCRLF@1090001 : Boolean) : Boolean;
    BEGIN
      CASE Char OF
        60: // '<'
          IF NeedsCRLF THEN BEGIN
            NeedsCRLF := FALSE;
            EXIT(TRUE);
          END;
        62: // '>'
          NeedsCRLF := TRUE;
        0, 32:
          ;
        ELSE
          NeedsCRLF := FALSE;
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE AddLeadingZeros@1090006(Text@1090000 : Text[250];MinLen@1090001 : Integer;MaxLen@1090002 : Integer) : Text[250];
    BEGIN
      IF STRLEN(Text) < MinLen THEN
        Text := PADSTR('',MinLen - STRLEN(Text),'0') + Text;
      EXIT(COPYSTR(Text,1,MaxLen));
    END;

    LOCAL PROCEDURE GetAddressLine@1090013(Type@1090001 : 'Company,Vendor';No@1090000 : Integer) : Text[250];
    BEGIN
      CASE Type OF
        Type::Company:
          IF No = 1 THEN
            EXIT(DELCHR(CompanyInfo.Address,'<>') + ' ' + DELCHR(CompanyInfo."Address 2",'<>'))
          ELSE
            EXIT(DELCHR(CompanyInfo."Post Code",'<>') + ' ' + DELCHR(CompanyInfo.City,'<>'));
        Type::Vendor:
          IF No = 1 THEN
            EXIT(DELCHR(Vendor.Address,'<>') + ' ' + DELCHR(Vendor."Address 2",'<>'))
          ELSE
            EXIT(DELCHR(Vendor."Post Code",'<>') + ' ' + DELCHR(Vendor.City,'<>'));
      END;
    END;

    LOCAL PROCEDURE GetCurrencyCode@1090007(CurrencyCode@1090000 : Code[10]) : Code[10];
    BEGIN
      IF CurrencyCode = '' THEN
        EXIT(GLSetup."LCY Code");
      EXIT(CurrencyCode);
    END;

    EVENT XMLDomDoc@1001::NodeInserting@93(sender@1001 : Variant;e@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT XMLDomDoc@1001::NodeInserted@94(sender@1001 : Variant;e@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT XMLDomDoc@1001::NodeRemoving@95(sender@1001 : Variant;e@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT XMLDomDoc@1001::NodeRemoved@96(sender@1001 : Variant;e@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT XMLDomDoc@1001::NodeChanging@97(sender@1001 : Variant;e@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT XMLDomDoc@1001::NodeChanged@98(sender@1001 : Variant;e@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

