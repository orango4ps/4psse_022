OBJECT Report 99001020 Carry Out Action Msg. - Plan.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.04,4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Ereignismeldung durchf. - Plan.;
               ENU=Carry Out Action Msg. - Plan.;
               NLD=Planningsboodschap uitvoeren - Plan.;
               NOR=Utfõr handlingsmelding - plan.;
               SVE=Skapa order frÜn planering];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  OnBeforePreReport;
                END;

  }
  DATASET
  {
    { 3754;    ;DataItem;                    ;
               DataItemTable=Table246;
               DataItemTableView=SORTING(Worksheet Template Name,Journal Batch Name,Vendor No.,Sell-to Customer No.,Ship-to Code,Order Address Code,Currency Code,Ref. Order Type,Ref. Order Status,Ref. Order No.,Location Code,Transfer-from Code);
               ReqFilterHeadingML=[DEU=Planungszeile;
                                   ENU=Planning Line;
                                   NLD=Planningsregel;
                                   NOR=Planleggingslinje;
                                   SVE=Planeringsrad];
               OnPreDataItem=BEGIN
                               LOCKTABLE;

                               SetReqLineFilters;
                               IF NOT FIND('-') THEN
                                 ERROR(Text000);

                               IF PurchOrderChoice = PurchOrderChoice::"Copy to Req. Wksh" THEN
                                 CheckCopyToWksh(ReqWkshTemp,ReqWksh);
                               IF TransOrderChoice = TransOrderChoice::"Copy to Req. Wksh" THEN
                                 CheckCopyToWksh(TransWkshTemp,TransWkshName);
                               IF ProdOrderChoice = ProdOrderChoice::"Copy to Req. Wksh" THEN
                                 CheckCopyToWksh(ProdWkshTempl,ProdWkshName);

                               Window.OPEN(Text012);
                               CheckPreconditions;
                               CounterTotal := COUNT;
                             END;

               OnAfterGetRecord=BEGIN
                                  WindowUpdate;

                                  IF NOT "Accept Action Message" THEN
                                    CurrReport.SKIP;
                                  LOCKTABLE;

                                  COMMIT;
                                  CASE "Ref. Order Type" OF
                                    "Ref. Order Type"::"Prod. Order":
                                      IF ProdOrderChoice <> ProdOrderChoice::" " THEN
                                        CarryOutActions(2,ProdOrderChoice,ProdWkshTempl,ProdWkshName);
                                    "Ref. Order Type"::Purchase:
                                      IF PurchOrderChoice = PurchOrderChoice::"Copy to Req. Wksh" THEN
                                        CarryOutActions(0,PurchOrderChoice,ReqWkshTemp,ReqWksh);
                                    "Ref. Order Type"::Transfer:
                                      IF TransOrderChoice <> TransOrderChoice::" " THEN BEGIN
                                        CarryOutAction.SetSplitTransferOrders(NOT CombineTransferOrders);
                                        CarryOutActions(1,TransOrderChoice,TransWkshTemp,TransWkshName);
                                      END;
                                    "Ref. Order Type"::Assembly:
                                      IF AsmOrderChoice <> AsmOrderChoice::" " THEN
                                        CarryOutActions(3,AsmOrderChoice,'','');
                                    ELSE
                                      CurrReport.SKIP;
                                  END;
                                  COMMIT;
                                END;

               OnPostDataItem=BEGIN
                                Window.CLOSE;

                                CarryOutAction.PrintTransferOrders;

                                IF PurchOrderChoice IN [PurchOrderChoice::"Make Purch. Orders",
                                                        PurchOrderChoice::"Make Purch. Orders & Print"]
                                THEN BEGIN
                                  SETRANGE("Accept Action Message",TRUE);

                                  IF PurchaseSuggestionExists("Requisition Line") THEN BEGIN
                                    PurchOrderHeader."Order Date" := WORKDATE;
                                    PurchOrderHeader."Posting Date" := WORKDATE;
                                    PurchOrderHeader."Expected Receipt Date" := WORKDATE;

                                    EndOrderDate := WORKDATE;

                                    PrintOrders := (PurchOrderChoice = PurchOrderChoice::"Make Purch. Orders & Print");

                                    CLEAR(ReqWkshMakeOrders);
                                    ReqWkshMakeOrders.SetCreatedDocumentBuffer(TempDocumentEntry);
                                    ReqWkshMakeOrders.Set(PurchOrderHeader,EndOrderDate,PrintOrders);
                                    ReqWkshMakeOrders.SetBasedOnElectronicOrderType(PrintOrders); //**4PS.n
                                    IF NOT NoPlanningResiliency THEN
                                      ReqWkshMakeOrders.SetPlanningResiliency;
                                    ReqWkshMakeOrders.CarryOutBatchAction("Requisition Line");
                                    CounterFailed := CounterFailed + ReqWkshMakeOrders.GetFailedCounter;
                                  END;
                                END;

                                IF ReserveforPlannedProd THEN
                                  MESSAGE(Text010);

                                IF CounterFailed > 0 THEN
                                  IF GETLASTERRORTEXT = '' THEN
                                    MESSAGE(Text013,CounterFailed)
                                  ELSE
                                    MESSAGE(GETLASTERRORTEXT);
                              END;
                               }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnInit=BEGIN
               PurchOrderCopyToReqWksh := FALSE;
               TransOrderCopyToReqWksh := FALSE;
             END;

      OnOpenPage=BEGIN
                   PurchOrderCopyToReqWksh := PurchOrderChoice = PurchOrderChoice::"Copy to Req. Wksh";
                   TransOrderCopyToReqWksh := TransOrderChoice = TransOrderChoice::"Copy to Req. Wksh";
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DEU=Optionen;
                             ENU=Options;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 13  ;2   ;Group     ;
                  CaptionML=[DEU=Fertigungsauftrag;
                             ENU=Production Order;
                             NLD=Productieorder;
                             SVE=Produktionsorder];
                  GroupType=Group }

      { 1   ;3   ;Field     ;
                  Name=ProductionOrder;
                  CaptionML=[DEU=Fertigungsauftrag;
                             ENU=Production Order;
                             NLD=Productieorder;
                             NOR=Produksjonsordre;
                             SVE=Produktionsorder];
                  ToolTipML=[DEU=Gibt an, dass Sie FertigungsauftrÑge fÅr Artikel mit der Beschaffungsmethode fÅr FertigungsauftrÑge erstellen mîchten. Sie kînnen auswÑhlen, ob Sie einen geplanten oder fest geplanten Fertigungsauftrag erstellen mîchten und Sie kînnen die neuen Auftragsbelege ausdrucken lassen.;
                             ENU=Specifies that you want to create production orders for item with the Prod. Order replenishment system. You can select to create either planned or firm planned production order, and you can have the new order documents printed.;
                             NLD=Hiermee wordt opgegeven dat u productieorders wilt maken voor een artikel met de aanvullingsmethode voor productieorders. U kunt selecteren of u een geplande of vast geplande productieorder wilt maken en u kunt de nieuwe orderdocumenten laten afdrukken.;
                             NOR=Angir at du vil opprette produksjonsordrer for varen med vinduet etterfyllingssystemet for produksjonsordre. Du kan velge Ü opprette enten planlagt eller fast planlagt produksjonsordre, og du kan skrive ut de nye ordredokumentene.;
                             SVE=Anger att du vill skapa produktionsorder fîr artikeln med Üteranskaffningssystemet Produktionsorder. Du kan vÑlja att skapa en planerad eller fast planerad produktionsorder och du kan skriva ut de nya orderdokumenten.];
                  OptionCaptionML=[DEU=" ,Geplant,Fest geplant,Fest geplant & drucken";
                                   ENU=" ,Planned,Firm Planned,Firm Planned & Print";
                                   NLD=" ,Gepland,Vast gepland,Vast gepland en afdrukken";
                                   NOR=" ,Planlagt,Fast planlagt,Fast planlagt og skriv ut";
                                   SVE=" ,Planerad,Fast planerad,Fast planerad & Skriv ut"];
                  ApplicationArea=#Planning;
                  SourceExpr=ProdOrderChoice }

      { 17  ;2   ;Group     ;
                  CaptionML=[DEU=Montageauftrag;
                             ENU=Assembly Order;
                             NLD=Assemblageorder;
                             NOR=Stopp og vis fõrste feil;
                             SVE=Stoppa och visa fîrsta felet];
                  GroupType=Group }

      { 14  ;3   ;Field     ;
                  CaptionML=[DEU=Montageauftrag;
                             ENU=Assembly Order;
                             NLD=Assemblageorder;
                             NOR=Monteringsordre;
                             SVE=Monteringsorder];
                  ToolTipML=[DEU=Gibt die MontageauftrÑge an, die fÅr Artikel mit der Beschaffungsmethode Montage erstellt werden.;
                             ENU=Specifies the assembly orders that are created for items with the Assembly replenishment method.;
                             NLD=Hiermee worden de assemblageorders opgegeven die worden gemaakt voor artikelen met de aanvullingsmethode Assemblage.;
                             NOR=Angir monteringsordrene som opprettes for varer med etterfyllingsmetoden Montering.;
                             SVE=Anger de monteringsorder som skapas fîr artiklar med Üteranskaffningsmetoden Montering.];
                  OptionCaptionML=[DEU=" ,MontageauftrÑge erstellen,MontageauftrÑge erstellen und drucken";
                                   ENU=" ,Make Assembly Orders,Make Assembly Orders & Print";
                                   NLD=" ,Assemblageorders maken,Assemblageorders maken en afdrukken";
                                   NOR=" ,Lag monteringsordrer,Lag monteringsordrer og skriv ut";
                                   SVE=" ,Skapa monteringsorder,Skapa monteringsorder och skriv ut"];
                  ApplicationArea=#Assembly;
                  SourceExpr=AsmOrderChoice }

      { 19  ;2   ;Group     ;
                  CaptionML=[DEU=Einkaufsbestellung;
                             ENU=Purchase Order;
                             NLD=Inkooporder;
                             SVE=Inkîpsorder];
                  GroupType=Group }

      { 2   ;3   ;Field     ;
                  Name=PurchaseOrder;
                  CaptionML=[DEU=Einkaufsbestellung;
                             ENU=Purchase Order;
                             NLD=Inkooporder;
                             NOR=Bestilling;
                             SVE=Inkîpsorder];
                  ToolTipML=[DEU=Gibt an, dass Sie EinkaufsauftrÑge fÅr Artikel mit der Beschaffungsmethode fÅr Einkauf erstellen mîchten. Sie kînnen die neuen Auftragsbelege ausdrucken lassen.;
                             ENU=Specifies that you want to create purchase orders for items with the Purchase replenishment method. You can have the new order documents printed.;
                             NLD=Hiermee wordt opgegeven dat u inkooporders voor artikelen wilt maken met de aanvullingsmethode voor inkoop. U kunt de nieuwe orderdocumenten laten afdrukken.;
                             NOR=Angir at du vil opprette bestillinger for varer med metoden Kjõp etterfylling. Du kan skrive ut de nye ordredokumentene.;
                             SVE=Anger att du vill skapa inkîpsorder fîr artiklar med Üteranskaffningsmetoden Inkîp. Du kan skriva ut de nya orderdokumenten.];
                  OptionCaptionML=[DEU=" ,Bestellungen erst.,Bestellungen erst. & drucken,In Best.-Vorschlag kopieren";
                                   ENU=" ,Make Purch. Orders,Make Purch. Orders & Print,Copy to Req. Wksh";
                                   NLD=" ,Inkooporders maken,Inkooporders maken en afdrukken,Kopiâren naar inkoopvoorstel";
                                   NOR=" ,Lag bestilling,Lag bestilling og skriv ut,Overfõr til best.forslag";
                                   SVE=" ,Skapa inkîpsorder,Skapa inkîpsorder & skriv ut,Kopiera till inkîpsfîrslag"];
                  ApplicationArea=#Planning;
                  SourceExpr=PurchOrderChoice;
                  OnValidate=BEGIN
                               PurchOrderCopyToReqWksh := PurchOrderChoice = PurchOrderChoice::"Copy to Req. Wksh";
                             END;
                              }

      { 10  ;3   ;Group     ;
                  CaptionML=[NOR=Best.forslag;
                             SVE=Inkîpsfîrslag];
                  Visible=PurchOrderCopyToReqWksh;
                  GroupType=Group }

      { 11  ;4   ;Field     ;
                  Name=ReqTemp;
                  CaptionML=[DEU=Bestellvorschlagsvorlage;
                             ENU=Req. Wksh. Template;
                             NLD=Inkoopvoorstelsjabloon;
                             NOR=Best.forslagsmal;
                             SVE=Inkîpsfîrslagsmall];
                  ToolTipML=[DEU=Gibt an, dass die PlanungzeilenvorschlÑge fÅr UmlagerungsauftrÑge in diese Bestellvorschlagsvorlagen kopiert werden mÅssen.;
                             ENU=Specifies that you want to copy the planning line proposals for transfer orders to this requisition worksheet template.;
                             NLD=Hiermee wordt opgegeven dat de planningsregelvoorstellen voor transferorders moeten worden gekopieerd naar deze inkoopvoorstelsjabloon.;
                             NOR=Angir at du vil kopiere planleggingslinjeforslagene for overfõringsordrer til denne bestillingsforslagsmalen.;
                             SVE=Anger att du vill kopiera planeringsradfîrslagen fîr îverfîringsorder till denna inkîpsfîrslagsmall.];
                  ApplicationArea=#Planning;
                  SourceExpr=ReqWkshTemp;
                  TableRelation="Req. Wksh. Template";
                  Enabled=True;
                  OnValidate=BEGIN
                               ReqWksh := '';
                             END;

                  OnLookup=BEGIN
                             IF PAGE.RUNMODAL(PAGE::"Req. Worksheet Templates",ReqWkshTmpl) = ACTION::LookupOK THEN BEGIN
                               Text := ReqWkshTmpl.Name;
                               EXIT(TRUE);
                             END;
                             EXIT(FALSE);
                           END;
                            }

      { 12  ;4   ;Field     ;
                  Name=ReqName;
                  CaptionML=[DEU=Bestellvorschlagsname;
                             ENU=Req. Wksh. Name;
                             NLD=Inkoopvoorstelbatch;
                             NOR=Best.forslagsnavn;
                             SVE=Inkîpsfîrslagsnamn];
                  ToolTipML=[DEU=Gibt an, dass die PlanungzeilenvorschlÑge fÅr UmlagerungsauftrÑge in diesen Bestellvorschlagsname kopiert werden mÅssen.;
                             ENU=Specifies that you want to copy the planning line proposals for transfer orders to this requisition worksheet name.;
                             NLD=Hiermee wordt opgegeven dat de planningsregelvoorstellen voor transferorders moeten worden gekopieerd naar deze inkoopvoorstelnaam.;
                             NOR=Angir at du vil kopiere planleggingslinjeforslagene for overfõringsordrer til dette bestillingsforslagsnavnet.;
                             SVE=Anger att du vill kopiera planeringsradfîrslagen fîr îverfîringsorder till detta inkîpsfîrslagsnamn.];
                  ApplicationArea=#Planning;
                  SourceExpr=ReqWksh;
                  TableRelation="Requisition Wksh. Name".Name;
                  Enabled=True;
                  OnLookup=BEGIN
                             ReqWkshName.SETFILTER("Worksheet Template Name",ReqWkshTemp);
                             IF PAGE.RUNMODAL(PAGE::"Req. Wksh. Names",ReqWkshName) = ACTION::LookupOK THEN BEGIN
                               Text := ReqWkshName.Name;
                               EXIT(TRUE);
                             END;
                             EXIT(FALSE);
                           END;
                            }

      { 20  ;2   ;Group     ;
                  CaptionML=[DEU=Umlagerungsauftrag;
                             ENU=Transfer Order;
                             NLD=Transferorder;
                             SVE=ôverfîringsorder];
                  GroupType=Group }

      { 6   ;3   ;Field     ;
                  Name=TransOrderChoice;
                  CaptionML=[DEU=Umlagerungsauftrag;
                             ENU=Transfer Order;
                             NLD=Transferorder;
                             NOR=Overfõringsordre;
                             SVE=ôverfîringsorder];
                  ToolTipML=[DEU=Gibt an, dass die UmlagerungsauftrÑge fÅr Artikel mit der Beschaffungsmethode fÅr Umlagerung auf der Lagerhaltungsdatenkarte erstellt werden mÅssen. Sie kînnen die neuen Auftragsbelege ausdrucken lassen.;
                             ENU=Specifies that you want to create transfer orders for items with the Transfer replenishment method in the SKU card. You can have the new order documents printed.;
                             NLD=Hiermee wordt opgegeven dat transferorders moeten worden gemaakt voor artikelen met de aanvullingsmethode voor transfers op de SKU-kaart. U kunt de nieuwe orderdocumenten laten afdrukken.;
                             NOR=Angir at du vil opprette overfõringsordrer for varer med metoden Overfõr etterfylling pÜ LFE-kortet. Du kan skrive ut de nye ordredokumentene.;
                             SVE=Anger att du vill skapa îverfîringsorder fîr artiklar med Üteranskaffningsmetoden ôverfîring pÜ kortet fîr lagerstÑlleenheten. Du kan skriva ut de nya orderdokumenten.];
                  OptionCaptionML=[DEU=" ,Umlag.-AuftrÑge erstellen,Umlag.-AuftrÑge erstellen & drucken,In Best.-Vorschlag kopieren";
                                   ENU=" ,Make Trans. Orders,Make Trans. Orders & Print,Copy to Req. Wksh";
                                   NLD=" ,Transferorders maken,Transferorders maken en afdrukken,Kopiâren naar inkoopvoorstel";
                                   NOR=" ,Lag overfõringsordrer,Lag overf.ordrer og skriv ut,Overfõr til best.forslag";
                                   SVE=" ,Skapa îverf.order,Skapa îverf.order & skriv ut,Kopiera till inkîpsfîrslag"];
                  ApplicationArea=#Location;
                  SourceExpr=TransOrderChoice;
                  OnValidate=BEGIN
                               TransOrderCopyToReqWksh := TransOrderChoice = TransOrderChoice::"Copy to Req. Wksh";
                             END;
                              }

      { 3   ;3   ;Group     ;
                  CaptionML=[NOR=Best.forslag;
                             SVE=Inkîpsfîrslag];
                  Visible=TransOrderCopyToReqWksh;
                  GroupType=Group }

      { 15  ;4   ;Field     ;
                  Name=TransTemp;
                  CaptionML=[DEU=Bestellvorschlagsvorlage;
                             ENU=Req. Wksh. Template;
                             NLD=Inkoopvoorstelsjabloon;
                             NOR=Best.forslagsmal;
                             SVE=Inkîpsfîrslagsmall];
                  ToolTipML=[DEU=Gibt an, dass die PlanungzeilenvorschlÑge fÅr UmlagerungsauftrÑge in diese Bestellvorschlagsvorlagen kopiert werden mÅssen.;
                             ENU=Specifies that you want to copy the planning line proposals for transfer orders to this requisition worksheet template.;
                             NLD=Hiermee wordt opgegeven dat de planningsregelvoorstellen voor transferorders moeten worden gekopieerd naar deze inkoopvoorstelsjabloon.;
                             NOR=Angir at du vil kopiere planleggingslinjeforslagene for overfõringsordrer til denne bestillingsforslagsmalen.;
                             SVE=Anger att du vill kopiera planeringsradfîrslagen fîr îverfîringsorder till denna inkîpsfîrslagsmall.];
                  ApplicationArea=#Planning;
                  SourceExpr=TransWkshTemp;
                  TableRelation="Req. Wksh. Template";
                  Enabled=true;
                  OnValidate=BEGIN
                               TransWkshName := '';
                             END;

                  OnLookup=BEGIN
                             IF PAGE.RUNMODAL(PAGE::"Req. Worksheet Templates",ReqWkshTmpl) = ACTION::LookupOK THEN BEGIN
                               Text := ReqWkshTmpl.Name;
                               EXIT(TRUE);
                             END;
                             EXIT(FALSE);
                           END;
                            }

      { 16  ;4   ;Field     ;
                  Name=TransName;
                  CaptionML=[DEU=Bestellvorschlagsname;
                             ENU=Req. Wksh. Name;
                             NLD=Inkoopvoorstelbatch;
                             NOR=Best.forslagsnavn;
                             SVE=Inkîpsfîrslagsnamn];
                  ToolTipML=[DEU=Gibt an, dass die PlanungzeilenvorschlÑge fÅr UmlagerungsauftrÑge in diesen Bestellvorschlagsname kopiert werden mÅssen.;
                             ENU=Specifies that you want to copy the planning line proposals for transfer orders to this requisition worksheet name.;
                             NLD=Hiermee wordt opgegeven dat de planningsregelvoorstellen voor transferorders moeten worden gekopieerd naar deze inkoopvoorstelnaam.;
                             NOR=Angir at du vil kopiere planleggingslinjeforslagene for overfõringsordrer til dette bestillingsforslagsnavnet.;
                             SVE=Anger att du vill kopiera planeringsradfîrslagen fîr îverfîringsorder till detta inkîpsfîrslagsnamn.];
                  ApplicationArea=#Planning;
                  SourceExpr=TransWkshName;
                  TableRelation="Requisition Wksh. Name".Name;
                  Enabled=TRUE;
                  OnLookup=BEGIN
                             ReqWkshName.SETFILTER("Worksheet Template Name",TransWkshTemp);
                             IF PAGE.RUNMODAL(PAGE::"Req. Wksh. Names",ReqWkshName) = ACTION::LookupOK THEN BEGIN
                               Text := ReqWkshName.Name;
                               EXIT(TRUE);
                             END;
                             EXIT(FALSE);
                           END;
                            }

      { 8   ;2   ;Field     ;
                  Name=CombineTransferOrders;
                  CaptionML=[DEU=UmlagerungsauftrÑge kombinieren;
                             ENU=Combine Transfer Orders;
                             NLD=Transferorders combineren];
                  ToolTipML=[DEU=Gibt an, ob die Stapelverarbeitung angehalten wird, wenn ein Fehler auftritt.;
                             ENU=Specifies whether to stop as soon as the batch job encounters an error.;
                             NLD=Hiermee wordt opgegeven of de batchverwerking wordt stopgezet zodra er een fout optreedt.];
                  ApplicationArea=#Location;
                  SourceExpr=CombineTransferOrders }

      { 4   ;1   ;Field     ;
                  CaptionML=[DEU=Abbrechen und ersten Fehler anzeigen;
                             ENU=Stop and Show First Error;
                             NLD=Stoppen en eerste fout tonen;
                             SVE=Stoppa och visa fîrsta felet];
                  ToolTipML=[DEU=Gibt an, ob die Stapelverarbeitung angehalten wird, wenn ein Fehler auftritt.;
                             ENU=Specifies whether to stop as soon as the batch job encounters an error.;
                             NLD=Hiermee wordt opgegeven of de batchverwerking wordt stopgezet zodra er een fout optreedt.];
                  ApplicationArea=#Planning;
                  SourceExpr=NoPlanningResiliency }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1029 : TextConst 'DEU=Es liegen keine Planzeilen vor, fÅr die AuftrÑge erstellt werden kînnen.;ENU=There are no planning lines to make orders for.;NLD=Geen planningsregels om orders voor te maken.;NOR=Det finnes ingen planleggingslinjer Ü legge inn ordrer for.;SVE=Det finns inga planeringsrader att skapa order fîr.';
      Text007@1000 : TextConst 'DEU="Diese Vorlage und dieser Vorschlag sind zurzeit aktiv. ";ENU="This template and worksheet are currently active. ";NLD="Dit sjabloon en voorstel zijn momenteel geactiveerd. ";NOR="Malen og forslaget er nÜ aktive. ";SVE="Mallen och fîrslaget Ñr just nu aktiva. "';
      Text008@1001 : TextConst 'DEU=Sie mÅssen einen anderen Vorlagen- oder Vorschlagsnamen angeben, in den kopiert werden soll.;ENU=You must select a different template name or worksheet name to copy to.;NLD=U moet een andere sjabloon- of voorstelnaam selecteren waarnaar u wilt kopiâren.;NOR=Du mÜ velge en annen mal/et annet forslag som du vil overfõre til.;SVE=Du mÜste vÑlja ett annat mallnamn eller ett annat rekvisitionsfîrslag att kopiera till.';
      PurchOrderHeader@1017 : Record 38;
      ReqWkshTmpl@1002 : Record 244;
      ReqWkshName@1003 : Record 245;
      ReqLineFilters@1026 : Record 246;
      TempDocumentEntry@1020 : TEMPORARY Record 265;
      CarryOutAction@1005 : Codeunit 99000813;
      ReqWkshMakeOrders@1018 : Codeunit 333;
      Window@1035 : Dialog;
      ReqWkshTemp@1007 : Code[10];
      ReqWksh@1008 : Code[10];
      TransWkshTemp@1009 : Code[10];
      TransWkshName@1010 : Code[10];
      ProdWkshTempl@1028 : Code[10];
      ProdWkshName@1027 : Code[10];
      CurrReqWkshTemp@1015 : Code[10];
      CurrReqWkshName@1014 : Code[10];
      ProdOrderChoice@1011 : ' ,Planned,Firm Planned,Firm Planned & Print,Copy to Req. Wksh';
      PurchOrderChoice@1012 : ' ,Make Purch. Orders,Make Purch. Orders & Print,Copy to Req. Wksh';
      TransOrderChoice@1013 : ' ,Make Trans. Orders,Make Trans. Orders & Print,Copy to Req. Wksh';
      Text009@1016 : TextConst 'DEU=Sie mÅssen einen Bestellvorschlag auswÑhlen, in den kopiert werden soll;ENU=You must select a worksheet to copy to;NLD=U moet een voorstel selecteren waarnaar u wilt kopiâren.;NOR=Du mÜ velge et forslag som du vil overfõre til;SVE=Du mÜste vÑlja ett fîrslag att kopiera till';
      AsmOrderChoice@1004 : ' ,Make Assembly Orders,Make Assembly Orders & Print';
      PrintOrders@1019 : Boolean;
      CombineTransferOrders@1006 : Boolean;
      ReserveforPlannedProd@1033 : Boolean;
      NoPlanningResiliency@1031 : Boolean;
      Text010@1030 : TextConst 'DEU=Komponenten wurden nicht fÅr AuftrÑge mit Status "Geplant" reserviert.;ENU=Components were not reserved for orders with status Planned.;NLD=Materialen niet gereserveerd voor orders met status Gepland.;NOR=Komponenter ble ikke reservert for ordrer med statusen Planlagt.;SVE=Inga komponenter har reserverats fîr order med status planerad.';
      Text011@1032 : TextConst 'DEU=Sie mÅssen fÅr Zeile %1 und %2 einen Auftrag erstellen, weil sie miteinander verknÅpft sind.;ENU=You must make order for both line %1 and %2 because they are associated.;NLD=U moet een order maken voor zowel regel %1 als %2 omdat deze zijn gekoppeld.;NOR=Du mÜ legge inn ordre bÜde for linje %1 og %2 fordi de er tilknyttet.;SVE=Du mÜste skapa order fîr raderna %1 och %2 eftersom de Ñr kopplade.';
      Text012@1034 : TextConst 'DEU=Aktionen werden ausgefÅhrt  #1########## @2@@@@@@@@@@@@@;ENU=Carrying Out Actions  #1########## @2@@@@@@@@@@@@@;NLD=Acties worden uitgevoerd  #1########## @2@@@@@@@@@@@@@;NOR=Utfõre handlinger  #1########## @2@@@@@@@@@@@@@;SVE=Utfîr ÜtgÑrder        #1########## @2@@@@@@@@@@@@@';
      Counter@1036 : Integer;
      CounterTotal@1037 : Integer;
      CounterFailed@1038 : Integer;
      Text013@1039 : TextConst 'DEU=Es wurden nicht alle Bestellvorschlagszeilen ausgefÅhrt.\Insgesamt %1 Zeilen wurden aufgrund von Fehlern nicht ausgefÅhrt.;ENU=Not all Requisition Lines were carried out.\A total of %1 lines were not carried out because of errors encountered.;NLD=Niet alle inkoopvoorstelregels zijn uitgevoerd.\Er zijn in totaal %1 regels niet uitgevoerd omdat er fouten zijn opgetreden.;NOR=Ikke alle bestillingslinjene ble utfõrt.\Totalt %1 linjer ble ikke utfõrt pÜ grunn av feil som ble oppdaget.;SVE=Alla rekvisitionsrader utfîrdes inte.\Totalt %1 rader utfîrdes inte pÜ grund av intrÑffade fel.';
      EndOrderDate@1022 : Date;
      PurchOrderCopyToReqWksh@1021 : Boolean INDATASET;
      TransOrderCopyToReqWksh@1023 : Boolean INDATASET;

    LOCAL PROCEDURE CarryOutActions@20(SourceType@1004 : 'Purchase,Transfer,Production,Assembly';Choice@1002 : Option;WkshTempl@1001 : Code[10];WkshName@1000 : Code[10]);
    BEGIN
      IF NoPlanningResiliency THEN BEGIN
        CarryOutAction.SetTryParameters(SourceType,Choice,WkshTempl,WkshName);
        CarryOutAction.RUN("Requisition Line");
      END ELSE
        IF NOT CarryOutAction.TryCarryOutAction(SourceType,"Requisition Line",Choice,WkshTempl,WkshName) THEN
          CounterFailed := CounterFailed + 1;
    END;

    [External]
    PROCEDURE SetCreatedDocumentBuffer@12(VAR TempDocumentEntryNew@1000 : TEMPORARY Record 265);
    BEGIN
      TempDocumentEntry.COPY(TempDocumentEntryNew,TRUE);
      CarryOutAction.SetCreatedDocumentBuffer(TempDocumentEntryNew);
    END;

    [External]
    PROCEDURE SetReqWkshLine@1(VAR CurrentReqLine@1000 : Record 246);
    BEGIN
      CurrReqWkshTemp := CurrentReqLine."Worksheet Template Name";
      CurrReqWkshName := CurrentReqLine."Journal Batch Name";
      ReqLineFilters.COPY(CurrentReqLine);
    END;

    [External]
    PROCEDURE SetDemandOrder@3(VAR ReqLine@1005 : Record 246;MfgUserTempl@1000 : Record 5525);
    BEGIN
      SetReqWkshLine(ReqLine);

      InitializeRequest(
        MfgUserTempl."Create Production Order",
        MfgUserTempl."Create Purchase Order",
        MfgUserTempl."Create Transfer Order",
        MfgUserTempl."Create Assembly Order");

      ReqWkshTemp := MfgUserTempl."Purchase Req. Wksh. Template";
      ReqWksh := MfgUserTempl."Purchase Wksh. Name";
      ProdWkshTempl := MfgUserTempl."Prod. Req. Wksh. Template";
      ProdWkshName := MfgUserTempl."Prod. Wksh. Name";
      TransWkshTemp := MfgUserTempl."Transfer Req. Wksh. Template";
      TransWkshName := MfgUserTempl."Transfer Wksh. Name";

      WITH ReqLineFilters DO
        CASE MfgUserTempl."Make Orders" OF
          MfgUserTempl."Make Orders"::"The Active Line":
            BEGIN
              ReqLineFilters := ReqLine;
              SETRECFILTER;
            END;
          MfgUserTempl."Make Orders"::"The Active Order":
            BEGIN
              SETCURRENTKEY(
                "User ID","Demand Type","Demand Subtype","Demand Order No.","Demand Line No.","Demand Ref. No.");
              COPYFILTERS(ReqLine);
              SETRANGE("Demand Type",ReqLine."Demand Type");
              SETRANGE("Demand Subtype",ReqLine."Demand Subtype");
              SETRANGE("Demand Order No.",ReqLine."Demand Order No.");
            END;
          MfgUserTempl."Make Orders"::"All Lines":
            BEGIN
              SETCURRENTKEY(
                "User ID","Worksheet Template Name","Journal Batch Name","Line No.");
              COPY(ReqLine);
            END;
        END;
    END;

    [External]
    PROCEDURE InitializeRequest@2(NewProdOrderChoice@1002 : Option;NewPurchOrderChoice@1001 : Option;NewTransOrderChoice@1000 : Option;NewAsmOrderChoice@1003 : Option);
    BEGIN
      ProdOrderChoice := NewProdOrderChoice;
      PurchOrderChoice := NewPurchOrderChoice;
      TransOrderChoice := NewTransOrderChoice;
      AsmOrderChoice := NewAsmOrderChoice;
    END;

    [External]
    PROCEDURE InitializeRequest2@11(NewProdOrderChoice@1006 : Option;NewPurchOrderChoice@1005 : Option;NewTransOrderChoice@1004 : Option;NewAsmOrderChoice@1007 : Option;NewReqWkshTemp@1002 : Code[10];NewReqWksh@1001 : Code[10];NewTransWkshTemp@1000 : Code[10];NewTransWkshName@1003 : Code[10]);
    BEGIN
      InitializeRequest(NewProdOrderChoice,NewPurchOrderChoice,NewTransOrderChoice,NewAsmOrderChoice);
      ReqWkshTemp := NewReqWkshTemp;
      ReqWksh := NewReqWksh;
      TransWkshTemp := NewTransWkshTemp;
      TransWkshName := NewTransWkshName;
    END;

    LOCAL PROCEDURE SetReqLineFilters@5();
    BEGIN
      WITH "Requisition Line" DO BEGIN
        IF ReqLineFilters.GETFILTERS <> '' THEN
          COPYFILTERS(ReqLineFilters);
        SETRANGE("Worksheet Template Name",CurrReqWkshTemp);
        SETRANGE("Journal Batch Name",CurrReqWkshName);
        SETRANGE(Type,Type::Item);
        SETFILTER("Action Message",'<>%1',"Action Message"::" ");
      END;
      OnAfterSetReqLineFilters("Requisition Line");
    END;

    LOCAL PROCEDURE CheckCopyToWksh@4(ToReqWkshTempl@1000 : Code[10];ToReqWkshName@1001 : Code[10]);
    BEGIN
      IF (ToReqWkshTempl <> '') AND
         (CurrReqWkshTemp = ToReqWkshTempl) AND
         (CurrReqWkshName = ToReqWkshName)
      THEN
        ERROR(Text007 + Text008);

      IF (ToReqWkshTempl = '') OR (ToReqWkshName = '') THEN
        ERROR(Text009);
    END;

    LOCAL PROCEDURE CheckPreconditions@6();
    BEGIN
      WITH "Requisition Line" DO
        REPEAT
          CheckLine;
        UNTIL NEXT = 0;
    END;

    LOCAL PROCEDURE CheckLine@7();
    VAR
      SalesLine@1000 : Record 37;
      ProdOrderComp@1001 : Record 5407;
      ServLine@1006 : Record 5902;
      JobPlanningLine@1007 : Record 11020401;
      AsmLine@1002 : Record 901;
      ReqLine2@1003 : Record 246;
    BEGIN
      WITH "Requisition Line" DO BEGIN
        IF "Planning Line Origin" <> "Planning Line Origin"::"Order Planning" THEN
          EXIT;

        CheckAssociations("Requisition Line");

        IF "Planning Level" > 0 THEN
          EXIT;

        IF "Replenishment System" IN ["Replenishment System"::Purchase,
                                      "Replenishment System"::Transfer]
        THEN
          TESTFIELD("Supply From");

        CASE "Demand Type" OF
          DATABASE::"Sales Line":
            BEGIN
              SalesLine.GET("Demand Subtype","Demand Order No.","Demand Line No.");
              SalesLine.TESTFIELD(Type,SalesLine.Type::Item);
              IF NOT (("Demand Date" = WORKDATE) AND (SalesLine."Shipment Date" IN [0D,WORKDATE])) THEN
                TESTFIELD("Demand Date",SalesLine."Shipment Date");
              TESTFIELD("No.",SalesLine."No.");
              TESTFIELD("Qty. per UOM (Demand)",SalesLine."Qty. per Unit of Measure");
              TESTFIELD("Variant Code",SalesLine."Variant Code");
              TESTFIELD("Location Code",SalesLine."Location Code");
              SalesLine.CALCFIELDS("Reserved Qty. (Base)");
              TESTFIELD(
                "Demand Quantity (Base)",
                -SalesLine.SignedXX(SalesLine."Outstanding Qty. (Base)" - SalesLine."Reserved Qty. (Base)"))
            END;
          DATABASE::"Prod. Order Component":
            BEGIN
              ProdOrderComp.GET("Demand Subtype","Demand Order No.","Demand Line No.","Demand Ref. No.");
              TESTFIELD("No.",ProdOrderComp."Item No.");
              IF NOT (("Demand Date" = WORKDATE) AND (ProdOrderComp."Due Date" IN [0D,WORKDATE])) THEN
                TESTFIELD("Demand Date",ProdOrderComp."Due Date");
              TESTFIELD("Qty. per UOM (Demand)",ProdOrderComp."Qty. per Unit of Measure");
              TESTFIELD("Variant Code",ProdOrderComp."Variant Code");
              TESTFIELD("Location Code",ProdOrderComp."Location Code");
              ProdOrderComp.CALCFIELDS("Reserved Qty. (Base)");
              TESTFIELD(
                "Demand Quantity (Base)",
                ProdOrderComp."Remaining Qty. (Base)" - ProdOrderComp."Reserved Qty. (Base)");
              IF (ProdOrderChoice = ProdOrderChoice::Planned) AND Reserve THEN
                ReserveforPlannedProd := TRUE;
            END;
          DATABASE::"Service Line":
            BEGIN
              ServLine.GET("Demand Subtype","Demand Order No.","Demand Line No.");
              ServLine.TESTFIELD(Type,ServLine.Type::Item);
              IF NOT (("Demand Date" = WORKDATE) AND (ServLine."Needed by Date" IN [0D,WORKDATE])) THEN
                TESTFIELD("Demand Date",ServLine."Needed by Date");
              TESTFIELD("No.",ServLine."No.");
              TESTFIELD("Qty. per UOM (Demand)",ServLine."Qty. per Unit of Measure");
              TESTFIELD("Variant Code",ServLine."Variant Code");
              TESTFIELD("Location Code",ServLine."Location Code");
              ServLine.CALCFIELDS("Reserved Qty. (Base)");
              TESTFIELD(
                "Demand Quantity (Base)",
                -ServLine.SignedXX(ServLine."Outstanding Qty. (Base)" - ServLine."Reserved Qty. (Base)"))
            END;
          DATABASE::"Job Planning Line":
            BEGIN
              JobPlanningLine.SETRANGE("Job Contract Entry No.","Demand Line No.");
              JobPlanningLine.FINDFIRST;
              JobPlanningLine.TESTFIELD(Type,JobPlanningLine.Type::Item);
              JobPlanningLine.TESTFIELD("Job No.");
              JobPlanningLine.TESTFIELD(Status,JobPlanningLine.Status::Order);
              IF NOT (("Demand Date" = WORKDATE) AND (JobPlanningLine."Planning Date" IN [0D,WORKDATE])) THEN
                TESTFIELD("Demand Date",JobPlanningLine."Planning Date");
              TESTFIELD("No.",JobPlanningLine."No.");
              TESTFIELD("Qty. per UOM (Demand)",JobPlanningLine."Qty. per Unit of Measure");
              TESTFIELD("Variant Code",JobPlanningLine."Variant Code");
              TESTFIELD("Location Code",JobPlanningLine."Location Code");
              JobPlanningLine.CALCFIELDS("Reserved Qty. (Base)");
              TESTFIELD(
                "Demand Quantity (Base)",
                JobPlanningLine."Remaining Qty. (Base)" - JobPlanningLine."Reserved Qty. (Base)")
            END;
          DATABASE::"Assembly Line":
            BEGIN
              AsmLine.GET("Demand Subtype","Demand Order No.","Demand Line No.");
              AsmLine.TESTFIELD(Type,AsmLine.Type::Item);
              IF NOT (("Demand Date" = WORKDATE) AND (AsmLine."Due Date" IN [0D,WORKDATE])) THEN
                TESTFIELD("Demand Date",AsmLine."Due Date");
              TESTFIELD("No.",AsmLine."No.");
              TESTFIELD("Qty. per UOM (Demand)",AsmLine."Qty. per Unit of Measure");
              TESTFIELD("Variant Code",AsmLine."Variant Code");
              TESTFIELD("Location Code",AsmLine."Location Code");
              AsmLine.CALCFIELDS("Reserved Qty. (Base)");
              TESTFIELD(
                "Demand Quantity (Base)",
                -AsmLine.SignedXX(AsmLine."Remaining Quantity (Base)" - AsmLine."Reserved Qty. (Base)"))
            END;
        END;

        ReqLine2.SETCURRENTKEY(
          "User ID","Demand Type","Demand Subtype","Demand Order No.","Demand Line No.","Demand Ref. No.");
        ReqLine2.SETFILTER("User ID",'<>%1',USERID);
        ReqLine2.SETRANGE("Demand Type","Demand Type");
        ReqLine2.SETRANGE("Demand Subtype","Demand Subtype");
        ReqLine2.SETRANGE("Demand Order No.","Demand Order No.");
        ReqLine2.SETRANGE("Demand Line No.","Demand Line No.");
        ReqLine2.SETRANGE("Demand Ref. No.","Demand Ref. No.");
        ReqLine2.DELETEALL(TRUE);
      END;
    END;

    LOCAL PROCEDURE CheckAssociations@8(VAR ReqLine@1000 : Record 246);
    VAR
      ReqLine2@1002 : Record 246;
      ReqLine3@1001 : Record 246;
    BEGIN
      WITH ReqLine DO BEGIN
        ReqLine3.COPY(ReqLine);
        ReqLine2 := ReqLine;

        IF ReqLine2."Planning Level" > 0 THEN
          WHILE (ReqLine2.NEXT(-1) <> 0) AND (ReqLine2."Planning Level" > 0) DO;

        REPEAT
          ReqLine3 := ReqLine2;
          IF NOT ReqLine3.FIND THEN
            ERROR(Text011,"Line No.",ReqLine2."Line No.");
        UNTIL (ReqLine2.NEXT = 0) OR (ReqLine2."Planning Level" = 0)
      END;
    END;

    LOCAL PROCEDURE WindowUpdate@9();
    BEGIN
      Counter := Counter + 1;
      Window.UPDATE(1,"Requisition Line"."No.");
      Window.UPDATE(2,ROUND(Counter / CounterTotal * 10000,1));
    END;

    LOCAL PROCEDURE PurchaseSuggestionExists@10(VAR RequisitionLine@1001 : Record 246) : Boolean;
    VAR
      StopLoop@1000 : Boolean;
      PurchaseExists@1002 : Boolean;
    BEGIN
      WITH RequisitionLine DO BEGIN
        IF FINDSET THEN
          REPEAT
            PurchaseExists := "Ref. Order Type" = "Ref. Order Type"::Purchase;
            IF NOT PurchaseExists THEN
              StopLoop := NEXT = 0
            ELSE
              StopLoop := TRUE;
          UNTIL StopLoop;
        IF PurchaseExists THEN
          SETRANGE("Ref. Order Type","Ref. Order Type"::Purchase);
      END;
      EXIT(PurchaseExists);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSetReqLineFilters@14(VAR RequisitionLine@1000 : Record 246);
    BEGIN
    END;

    [Integration(TRUE,TRUE)]
    LOCAL PROCEDURE OnBeforePreReport@13();
    BEGIN
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

