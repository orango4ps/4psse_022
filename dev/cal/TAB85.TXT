OBJECT Table 85 Acc. Schedule Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00,4PS14.00,4PSSE;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               IF xRec."Line No." = 0 THEN
                 IF NOT AccSchedName.GET("Schedule Name") THEN BEGIN
                   AccSchedName.INIT;
                   AccSchedName.Name := "Schedule Name";
                   IF AccSchedName.Name = '' THEN
                     AccSchedName.Description := Text000;
                   AccSchedName.INSERT;
                 END;
             END;

    CaptionML=[ENU=Acc. Schedule Line;
               NOR=Kontoskjemalinje;
               SVE=Kontouppst„llningsrad];
  }
  FIELDS
  {
    { 1   ;   ;Schedule Name       ;Code10        ;TableRelation="Acc. Schedule Name";
                                                   CaptionML=[ENU=Schedule Name;
                                                              NOR=Skjemanavn;
                                                              SVE=Kontouppst„llningsnamn] }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              NOR=Linjenr.;
                                                              SVE=Radnr] }
    { 3   ;   ;Row No.             ;Code10        ;CaptionML=[ENU=Row No.;
                                                              NOR=Radnr.;
                                                              SVE=Rad-nr] }
    { 4   ;   ;Description         ;Text100       ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 5   ;   ;Totaling            ;Text250       ;TableRelation=IF (Totaling Type=CONST(Posting Accounts)) "G/L Account"
                                                                 ELSE IF (Totaling Type=CONST(Total Accounts)) "G/L Account"
                                                                 ELSE IF (Totaling Type=CONST(Cash Flow Entry Accounts)) "Cash Flow Account"
                                                                 ELSE IF (Totaling Type=CONST(Cash Flow Total Accounts)) "Cash Flow Account"
                                                                 ELSE IF (Totaling Type=CONST(Cost Type)) "Cost Type"
                                                                 ELSE IF (Totaling Type=CONST(Cost Type Total)) "Cost Type";
                                                   OnValidate=BEGIN
                                                                CASE "Totaling Type" OF
                                                                  "Totaling Type"::"Posting Accounts","Totaling Type"::"Total Accounts":
                                                                    BEGIN
                                                                      GLAcc.SETFILTER("No.",Totaling);
                                                                      GLAcc.CALCFIELDS(Balance);
                                                                    END;
                                                                  "Totaling Type"::Formula,"Totaling Type"::"Set Base For Percent":
                                                                    BEGIN
                                                                      Totaling := UPPERCASE(Totaling);
                                                                      CheckFormula(Totaling);
                                                                    END;
                                                                  "Totaling Type"::"Cost Type","Totaling Type"::"Cost Type Total":
                                                                    BEGIN
                                                                      CostType.SETFILTER("No.",Totaling);
                                                                      CostType.CALCFIELDS(Balance);
                                                                    END;
                                                                  "Totaling Type"::"Cash Flow Entry Accounts","Totaling Type"::"Cash Flow Total Accounts":
                                                                    BEGIN
                                                                      CFAccount.SETFILTER("No.",Totaling);
                                                                      CFAccount.CALCFIELDS(Amount);
                                                                    END;
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupTotaling;
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Totaling;
                                                              NOR=Sammentelling;
                                                              SVE=Summeringsintervall] }
    { 6   ;   ;Totaling Type       ;Option        ;OnValidate=BEGIN
                                                                VALIDATE(Totaling);
                                                              END;

                                                   CaptionML=[ENU=Totaling Type;
                                                              NOR=Sammentellingstype;
                                                              SVE=Summeringstyp];
                                                   OptionCaptionML=[ENU=Posting Accounts,Total Accounts,Formula,,,Set Base For Percent,Cost Type,Cost Type Total,Cash Flow Entry Accounts,Cash Flow Total Accounts;
                                                                    NOR=Posteringskonti,Totalkonti,Formler,,,Angi grunnlag for prosent,Kosttype,Kosttypesum,Postkonti for kontantstr›m,Totalkonti for kontantstr›m;
                                                                    SVE=Kontobelopp,Summeringsbelopp,Radkodbelopp,,,Ange bas f”r procent,Kostnadstyp,Summa kostnadstyp,Transaktionskonton f”r kassafl”de,Summakonton f”r kassafl”de];
                                                   OptionString=Posting Accounts,Total Accounts,Formula,,,Set Base For Percent,Cost Type,Cost Type Total,Cash Flow Entry Accounts,Cash Flow Total Accounts }
    { 7   ;   ;New Page            ;Boolean       ;CaptionML=[ENU=New Page;
                                                              NOR=Sideskift;
                                                              SVE=Ny sida] }
    { 8   ;   ;Indentation         ;Integer       ;CaptionML=[ENU=Indentation;
                                                              NOR=Innrykking;
                                                              SVE=Indrag] }
    { 11  ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Date Filter;
                                                              NOR=Datofilter;
                                                              SVE=Datumfilter] }
    { 12  ;   ;Dimension 1 Filter  ;Code20        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Dimension 1 Filter;
                                                              NOR=Filter for dimensjon 1;
                                                              SVE=Dimension 1 filter];
                                                   CaptionClass=GetCaptionClass(1) }
    { 13  ;   ;Dimension 2 Filter  ;Code20        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Dimension 2 Filter;
                                                              NOR=Filter for dimensjon 2;
                                                              SVE=Dimension 2 filter];
                                                   CaptionClass=GetCaptionClass(2) }
    { 14  ;   ;G/L Budget Filter   ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation="G/L Budget Name";
                                                   CaptionML=[ENU=G/L Budget Filter;
                                                              NOR=Finansbudsjettfilter;
                                                              SVE=Filter f”r redovisningsbudget] }
    { 15  ;   ;Business Unit Filter;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation="Business Unit";
                                                   CaptionML=[ENU=Business Unit Filter;
                                                              NOR=Konsernfilter;
                                                              SVE=Aff„rsenhetsfilter] }
    { 16  ;   ;Show                ;Option        ;CaptionML=[ENU=Show;
                                                              NOR=Vis;
                                                              SVE=Visa];
                                                   OptionCaptionML=[ENU=Yes,No,If Any Column Not Zero,When Positive Balance,When Negative Balance;
                                                                    NOR=Ja,Nei,Hvis en kolonne ikke er null,Ved positiv saldo,Ved negativ saldo;
                                                                    SVE=Ja,Nej,Om n†gon kolumn inte „r noll,Vid positivt saldo,Vid negativt saldo];
                                                   OptionString=Yes,No,If Any Column Not Zero,When Positive Balance,When Negative Balance }
    { 17  ;   ;Dimension 3 Filter  ;Code20        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Dimension 3 Filter;
                                                              NOR=Filter for dimensjon 3;
                                                              SVE=Dimension 3 filter];
                                                   CaptionClass=GetCaptionClass(3) }
    { 18  ;   ;Dimension 4 Filter  ;Code20        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Dimension 4 Filter;
                                                              NOR=Filter for dimensjon 4;
                                                              SVE=Dimension 4 filter];
                                                   CaptionClass=GetCaptionClass(4) }
    { 19  ;   ;Dimension 1 Totaling;Text250       ;ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   AccessByPermission=TableData 348=R;
                                                   CaptionML=[ENU=Dimension 1 Totaling;
                                                              NOR=Dimensjon 1 - sammentelling;
                                                              SVE=Dimension 1 summering];
                                                   CaptionClass=GetCaptionClass(5) }
    { 20  ;   ;Dimension 2 Totaling;Text250       ;ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   AccessByPermission=TableData 348=R;
                                                   CaptionML=[ENU=Dimension 2 Totaling;
                                                              NOR=Dimensjon 2 - sammentelling;
                                                              SVE=Dimension 2 summering];
                                                   CaptionClass=GetCaptionClass(6) }
    { 21  ;   ;Dimension 3 Totaling;Text250       ;ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   AccessByPermission=TableData 350=R;
                                                   CaptionML=[ENU=Dimension 3 Totaling;
                                                              NOR=Dimensjon 3 - sammentelling;
                                                              SVE=Dimension 3 summering];
                                                   CaptionClass=GetCaptionClass(7) }
    { 22  ;   ;Dimension 4 Totaling;Text250       ;ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   AccessByPermission=TableData 350=R;
                                                   CaptionML=[ENU=Dimension 4 Totaling;
                                                              NOR=Dimensjon 4 - sammentelling;
                                                              SVE=Dimension 4 summering];
                                                   CaptionClass=GetCaptionClass(8) }
    { 23  ;   ;Bold                ;Boolean       ;CaptionML=[ENU=Bold;
                                                              NOR=Fet;
                                                              SVE=Fet] }
    { 24  ;   ;Italic              ;Boolean       ;CaptionML=[ENU=Italic;
                                                              NOR=Kursiv;
                                                              SVE=Kursiv] }
    { 25  ;   ;Underline           ;Boolean       ;OnValidate=BEGIN
                                                                IF "Double Underline" AND Underline THEN BEGIN
                                                                  "Double Underline" := FALSE;
                                                                  MESSAGE(ForceUnderLineMsg,FIELDCAPTION("Double Underline"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Underline;
                                                              NOR=Understrek;
                                                              SVE=Understrykning] }
    { 26  ;   ;Show Opposite Sign  ;Boolean       ;CaptionML=[ENU=Show Opposite Sign;
                                                              NOR=Vis motsatt fortegn;
                                                              SVE=Visa motsatt tecken] }
    { 27  ;   ;Row Type            ;Option        ;CaptionML=[ENU=Row Type;
                                                              NOR=Radtype;
                                                              SVE=Radtyp];
                                                   OptionCaptionML=[ENU=Net Change,Balance at Date,Beginning Balance;
                                                                    NOR=Bevegelse,Saldo per dato,Startsaldo;
                                                                    SVE=Nettof”r„ndring,Saldo t.o.m. datum,Ing†ende saldo];
                                                   OptionString=Net Change,Balance at Date,Beginning Balance }
    { 28  ;   ;Amount Type         ;Option        ;CaptionML=[ENU=Amount Type;
                                                              NOR=Bel›pstype;
                                                              SVE=Beloppstyp];
                                                   OptionCaptionML=[ENU=Net Amount,Debit Amount,Credit Amount;
                                                                    NOR=Nettobel›p,Debetbel›p,Kreditbel›p;
                                                                    SVE=Nettobelopp,Debetbelopp,Kreditbelopp];
                                                   OptionString=Net Amount,Debit Amount,Credit Amount }
    { 30  ;   ;Double Underline    ;Boolean       ;OnValidate=BEGIN
                                                                IF "Double Underline" AND Underline THEN BEGIN
                                                                  Underline := FALSE;
                                                                  MESSAGE(ForceUnderLineMsg,FIELDCAPTION(Underline));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Double Underline;
                                                              NOR=Dobbel understrek;
                                                              SVE=Dubbel understrykning] }
    { 840 ;   ;Cash Flow Forecast Filter;Code20   ;FieldClass=FlowFilter;
                                                   TableRelation="Cash Flow Forecast";
                                                   CaptionML=[ENU=Cash Flow Forecast Filter;
                                                              NOR=Filter for kontantstr›mprognose;
                                                              SVE=Filter f”r kassafl”desprognos] }
    { 1100;   ;Cost Center Filter  ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation="Cost Center";
                                                   CaptionML=[ENU=Cost Center Filter;
                                                              NOR=Kostsenterfilter;
                                                              SVE=Filter f”r kostnadsst„lle] }
    { 1101;   ;Cost Object Filter  ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation="Cost Object";
                                                   CaptionML=[ENU=Cost Object Filter;
                                                              NOR=Kostobjektfilter;
                                                              SVE=Filter f”r kostnadsobjekt] }
    { 1102;   ;Cost Center Totaling;Text80        ;ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Cost Center Totaling;
                                                              NOR=Sammentelling for kostsenter;
                                                              SVE=Summering f”r kostnadsst„lle] }
    { 1103;   ;Cost Object Totaling;Text80        ;ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Cost Object Totaling;
                                                              NOR=Sammentelling for kostobjekt;
                                                              SVE=Summering f”r kostnadsobjekt] }
    { 1104;   ;Cost Budget Filter  ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation="Cost Budget Name";
                                                   CaptionML=[ENU=Cost Budget Filter;
                                                              NOR=Kostbudsjettfilter;
                                                              SVE=Kostnadsbudgetfilter] }
    { 11012010;;Account Type       ;Option        ;InitValue=Both;
                                                   CaptionML=[ENU=Account Type;
                                                              NOR=Kontotype;
                                                              SVE=Kontotyp];
                                                   OptionCaptionML=[ENU=Both,Income Statement,Balance;
                                                                    NOR=Begge,Inntektsoppgave,Balanse;
                                                                    SVE=B†da,Inkomstuppgift,Balans];
                                                   OptionString=Both,Income Statement,Balance }
  }
  KEYS
  {
    {    ;Schedule Name,Line No.                  ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ForceUnderLineMsg@1022 : TextConst '@@@="%1= Field underline ";ENU=%1 will be set to false.;NOR=%1 settes til usant.;SVE=%1 kommer att anges till falskt.';
      Text000@1000 : TextConst 'ENU=Default Schedule;NOR=Standardskjema;SVE=Standarduppst„llning';
      Text001@1001 : TextConst 'ENU=The parenthesis at position %1 is misplaced.;NOR=Parentesen i posisjon %1 er feilplassert.;SVE=Parentesen i position %1 „r felplacerad.';
      Text002@1002 : TextConst 'ENU=You cannot have two consecutive operators. The error occurred at position %1.;NOR=Du kan ikke ha to etterf›lgende operatorer. Feilen oppstod i posisjon %1.;SVE=Du kan inte ha tv† operatorer efter varandra. Felet uppstod i position %1.';
      Text003@1003 : TextConst 'ENU=There is an operand missing after position %1.;NOR=Det er en manglende operator etter posisjon %1.;SVE=Det saknas en operand efter position %1.';
      Text004@1004 : TextConst 'ENU=There are more left parentheses than right parentheses.;NOR=Det er flere venstre parenteser enn h›yre parenteser.;SVE=Det finns fler v„nsterparenteser „n h”gerparenteser.';
      Text005@1005 : TextConst 'ENU=There are more right parentheses than left parentheses.;NOR=Det er flere h›yre parenteser enn venstre parenteser.;SVE=Det finns fler h”gerparenteser „n v„nsterparenteser.';
      Text006@1006 : TextConst 'ENU=1,6,,Dimension 1 Filter;NOR=1,6,,Filter for dimensjon 1;SVE=1,6,,Dimension 1 filter';
      Text007@1007 : TextConst 'ENU=1,6,,Dimension 2 Filter;NOR=1,6,,Filter for dimensjon 2;SVE=1,6,,Dimension 2 filter';
      Text008@1008 : TextConst 'ENU=1,6,,Dimension 3 Filter;NOR=1,6,,Filter for dimensjon 3;SVE=1,6,,Dimension 3 filter';
      Text009@1009 : TextConst 'ENU=1,6,,Dimension 4 Filter;NOR=1,6,,Filter for dimensjon 4;SVE=1,6,,Dimension 4 filter';
      Text010@1010 : TextConst 'ENU=,, Totaling;NOR=,, Sammentelling;SVE=,, Summering';
      Text011@1011 : TextConst 'ENU=1,5,,Dimension 1 Totaling;NOR=1,5,,Dimensjon 1 - sammentelling;SVE=1,5,,Dimension 1 summering';
      Text012@1012 : TextConst 'ENU=1,5,,Dimension 2 Totaling;NOR=1,5,,Dimensjon 2 - sammentelling;SVE=1,5,,Dimension 2 summering';
      Text013@1013 : TextConst 'ENU=1,5,,Dimension 3 Totaling;NOR=1,5,,Dimensjon 3 - sammentelling;SVE=1,5,,Dimension 3 summering';
      Text014@1014 : TextConst 'ENU=1,5,,Dimension 4 Totaling;NOR=1,5,,Dimensjon 4 - sammentelling;SVE=1,5,,Dimension 4 summering';
      AccSchedName@1015 : Record 84;
      GLAcc@1016 : Record 15;
      CFAccount@1841 : Record 841;
      AnalysisView@1017 : Record 363;
      GLSetup@1018 : Record 98;
      CostType@1021 : Record 1103;
      HasGLSetup@1019 : Boolean;
      Text015@1020 : TextConst 'ENU=The %1 refers to %2 %3, which does not exist. The field %4 on table %5 has now been deleted.;NOR=%1 viser til %2 %3, som ikke finnes. Feltet %4 i tabell %5 er n† slettet.;SVE=%1 h„nvisar till %2 %3 som inte finns. F„ltet %4 i tabellen %5 har nu tagits bort.';
      DPA_Management@1100000999 : Codeunit 11012783;

    [External]
    PROCEDURE LookUpDimFilter@57(DimNo@1000 : Integer;VAR Text@1001 : Text) : Boolean;
    VAR
      DimVal@1002 : Record 349;
      DimValList@1003 : Page 560;
    BEGIN
      GetAccSchedSetup;
      CASE DimNo OF
        1:
          DimVal.SETRANGE("Dimension Code",AnalysisView."Dimension 1 Code");
        2:
          DimVal.SETRANGE("Dimension Code",AnalysisView."Dimension 2 Code");
        3:
          DimVal.SETRANGE("Dimension Code",AnalysisView."Dimension 3 Code");
        4:
          DimVal.SETRANGE("Dimension Code",AnalysisView."Dimension 4 Code");
      END;

      DimValList.LOOKUPMODE(TRUE);
      DimValList.SETTABLEVIEW(DimVal);
      IF DimValList.RUNMODAL = ACTION::LookupOK THEN BEGIN
        DimValList.GETRECORD(DimVal);
        Text := DimValList.GetSelectionFilter;
        EXIT(TRUE);
      END;
      EXIT(FALSE)
    END;

    [External]
    PROCEDURE CheckFormula@1(Formula@1000 : Code[250]);
    VAR
      i@1001 : Integer;
      ParenthesesLevel@1002 : Integer;
      HasOperator@1003 : Boolean;
    BEGIN
      ParenthesesLevel := 0;
      FOR i := 1 TO STRLEN(Formula) DO BEGIN
        IF Formula[i] = '(' THEN
          ParenthesesLevel := ParenthesesLevel + 1
        ELSE
          IF Formula[i] = ')' THEN
            ParenthesesLevel := ParenthesesLevel - 1;
        IF ParenthesesLevel < 0 THEN
          ERROR(Text001,i);
        IF Formula[i] IN ['+','-','*','/','^'] THEN BEGIN
          IF HasOperator THEN
            ERROR(Text002,i);

          HasOperator := TRUE;

          IF i = STRLEN(Formula) THEN
            ERROR(Text003,i);

          IF Formula[i + 1] = ')' THEN
            ERROR(Text003,i);
        END ELSE
          HasOperator := FALSE;
      END;
      IF ParenthesesLevel > 0 THEN
        ERROR(Text004);

      IF ParenthesesLevel < 0 THEN
        ERROR(Text005);
    END;

    [External]
    PROCEDURE GetCaptionClass@7(AnalysisViewDimType@1000 : Integer) : Text[250];
    BEGIN
      GetAccSchedSetup;
      CASE AnalysisViewDimType OF
        1:
          BEGIN
            IF AnalysisView."Dimension 1 Code" <> '' THEN
              EXIT('1,6,' + AnalysisView."Dimension 1 Code");

            EXIT(Text006);
          END;
        2:
          BEGIN
            IF AnalysisView."Dimension 2 Code" <> '' THEN
              EXIT('1,6,' + AnalysisView."Dimension 2 Code");

            EXIT(Text007);
          END;
        3:
          BEGIN
            IF AnalysisView."Dimension 3 Code" <> '' THEN
              EXIT('1,6,' + AnalysisView."Dimension 3 Code");

            EXIT(Text008);
          END;
        4:
          BEGIN
            IF AnalysisView."Dimension 4 Code" <> '' THEN
              EXIT('1,6,' + AnalysisView."Dimension 4 Code");

            EXIT(Text009);
          END;
        5:
          BEGIN
            IF AnalysisView."Dimension 1 Code" <> '' THEN
              EXIT('1,5,' + AnalysisView."Dimension 1 Code" + Text010);

            EXIT(Text011);
          END;
        6:
          BEGIN
            IF AnalysisView."Dimension 2 Code" <> '' THEN
              EXIT('1,5,' + AnalysisView."Dimension 2 Code" + Text010);

            EXIT(Text012);
          END;
        7:
          BEGIN
            IF AnalysisView."Dimension 3 Code" <> '' THEN
              EXIT('1,5,' + AnalysisView."Dimension 3 Code" + Text010);

            EXIT(Text013);
          END;
        8:
          BEGIN
            IF AnalysisView."Dimension 4 Code" <> '' THEN
              EXIT('1,5,' + AnalysisView."Dimension 4 Code" + Text010);

            EXIT(Text014);
          END;
      END;
    END;

    LOCAL PROCEDURE GetAccSchedSetup@2();
    BEGIN
      IF "Schedule Name" <> AccSchedName.Name THEN
        AccSchedName.GET("Schedule Name");
      IF AccSchedName."Analysis View Name" <> '' THEN
        IF AccSchedName."Analysis View Name" <> AnalysisView.Code THEN
          IF NOT AnalysisView.GET(AccSchedName."Analysis View Name") THEN BEGIN
            MESSAGE(
              Text015,
              AccSchedName.TABLECAPTION,AnalysisView.TABLECAPTION,AccSchedName."Analysis View Name",
              AccSchedName.FIELDCAPTION("Analysis View Name"),AccSchedName.TABLECAPTION);
            AccSchedName."Analysis View Name" := '';
            AccSchedName.MODIFY;
          END;

      IF AccSchedName."Analysis View Name" = '' THEN BEGIN
        IF NOT HasGLSetup THEN BEGIN
          GLSetup.GET;
          HasGLSetup := TRUE;
        END;
        CLEAR(AnalysisView);
        AnalysisView."Dimension 1 Code" := GLSetup."Global Dimension 1 Code";
        AnalysisView."Dimension 2 Code" := GLSetup."Global Dimension 2 Code";
      END;
    END;

    LOCAL PROCEDURE LookupTotaling@3();
    VAR
      GLAccList@1000 : Page 18;
      CostTypeList@1001 : Page 1124;
      CFAccList@1002 : Page 855;
      IsHandled@1003 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeLookupTotaling(Rec,IsHandled);
      IF IsHandled THEN
        EXIT;

      CASE "Totaling Type" OF
        "Totaling Type"::"Posting Accounts",
        "Totaling Type"::"Total Accounts":
          BEGIN
            GLAccList.LOOKUPMODE(TRUE);
            IF GLAccList.RUNMODAL = ACTION::LookupOK THEN
              VALIDATE(Totaling,GLAccList.GetSelectionFilter);
          END;
        "Totaling Type"::"Cost Type",
        "Totaling Type"::"Cost Type Total":
          BEGIN
            CostTypeList.LOOKUPMODE(TRUE);
            IF CostTypeList.RUNMODAL = ACTION::LookupOK THEN
              VALIDATE(Totaling,CostTypeList.GetSelectionFilter);
          END;
        "Totaling Type"::"Cash Flow Entry Accounts",
        "Totaling Type"::"Cash Flow Total Accounts":
          BEGIN
            CFAccList.LOOKUPMODE(TRUE);
            IF CFAccList.RUNMODAL = ACTION::LookupOK THEN
              VALIDATE(Totaling,CFAccList.GetSelectionFilter);
          END;
      END;

      OnAfterLookupTotaling(Rec);
    END;

    [External]
    PROCEDURE LookupGLBudgetFilter@4(VAR Text@1000 : Text) : Boolean;
    VAR
      GLBudgetNames@1001 : Page 121;
    BEGIN
      GLBudgetNames.LOOKUPMODE(TRUE);
      IF GLBudgetNames.RUNMODAL = ACTION::LookupOK THEN BEGIN
        Text := GLBudgetNames.GetSelectionFilter;
        EXIT(TRUE);
      END;
      EXIT(FALSE)
    END;

    [External]
    PROCEDURE LookupCostBudgetFilter@5(VAR Text@1000 : Text) : Boolean;
    VAR
      CostBudgetNames@1001 : Page 1116;
    BEGIN
      CostBudgetNames.LOOKUPMODE(TRUE);
      IF CostBudgetNames.RUNMODAL = ACTION::LookupOK THEN BEGIN
        Text := CostBudgetNames.GetSelectionFilter;
        EXIT(TRUE);
      END;
      EXIT(FALSE)
    END;

    [External]
    PROCEDURE Indent@6();
    BEGIN
      IF Indentation < 10 THEN
        Indentation += 1;
    END;

    [External]
    PROCEDURE Outdent@10();
    BEGIN
      IF Indentation > 0 THEN
        Indentation -= 1;
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterLookupTotaling@8(VAR AccScheduleLine@1000 : Record 85);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeLookupTotaling@11(VAR AccScheduleLine@1000 : Record 85;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Dimension 1 Filter"));//4PSSE
      EXIT(0);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(0);
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      //**4PS Generated Code - Do Not Change
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
      i@1100525004 : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      FOR i := 10 DOWNTO 0 DO BEGIN
        RecRef.FILTERGROUP(i);
        FILTERGROUP(i);
        SETVIEW(RecRef.GETVIEW(FALSE));
      END;

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
      FPSLicenseManagement@1100527400 : Codeunit 11229289;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT FPSLicenseManagement.LicenseAndReadPermissionForTable(DepartmentAuthorizObject) THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_SetAccSchedule@1100525010(AccScheduleCode@1100525000 : Code[20]);
    BEGIN
      //dbeekman.sn: 23512
      IF NOT DPA_IsActive THEN
        EXIT;
      //dbeekman.en

      DPA_Management.SetAccSchedule(AccScheduleCode, '');
    END;

    BEGIN
    END.
  }
}

