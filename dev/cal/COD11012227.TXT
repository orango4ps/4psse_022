OBJECT Codeunit 11012227 Estimate Copy Mgt
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@11012017 : TextConst 'ENU=Select Copy from Estimate Part;NOR=velg † kopiere fra kalkyledel;SVE=V„lj att kopiera fr†n kalkyldel';
      Text001@11012018 : TextConst 'ENU=Select Copy to Estimate Part;NOR=velg † kopiere til kalkyledel;SVE=V„lj att kopiera till kalkyldel';
      Text006@11012023 : TextConst 'ENU=Select Copy From Estimate;NOR=velg † kopiere fra kalkyle;SVE=V„lj att kopiera fr†n kalkyl';
      Text007@11012024 : TextConst 'ENU=Select Copy from Sub-Estimate;NOR=velg † kopiere fra delkalkyle;SVE=V„lj att kopiera fr†n delkalkyl';
      Text008@11012025 : TextConst 'ENU=Select Copy To Estimate;NOR=velg † kopiere til kalkyle;SVE=V„lj att kopiera till kalkyl';
      Text009@11012026 : TextConst 'ENU=Select Copy To Sub-Estimate;NOR=velg † kopiere til delkalkyle;SVE=V„lj att kopiera till delkalkyl';
      Text010@11012027 : TextConst 'ENU=Estimate from        #1##########\\;NOR=Kalkyle fra        #1##########\\;SVE=Kalkyl fr†n          #1##########\\';
      Text011@11012028 : TextConst 'ENU=Estimate to             #2##########\\;NOR=Kalkyle til             #2##########\\;SVE=Kalkyl till             #2##########\\';
      Text012@11012029 : TextConst 'ENU=Sub-Estimate        #3##########\\;NOR=Delkalkyle        #3##########\\;SVE=Delkalkyl        #3##########\\';
      Text013@11012030 : TextConst 'ENU=Estimate Part        #4##########\\;NOR=Kalkyledel        #4##########\\;SVE=Kalkyldel        #4##########\\';
      Text014@11012031 : TextConst 'ENU=Busy with             #5################ @6@@@@@@@@@@@@@;NOR=Opptatt med             #5################ @6@@@@@@@@@@@@@;SVE=Upptagen med          #5################ @6@@@@@@@@@@@@@';
      Text015@11012032 : TextConst 'ENU=only 3 levels allowed;NOR=kun tre niv†er tillates;SVE=endast tre niv†er till†ts';
      ProjSetup@1100525014 : Record 315;
      EstSetup@1100485013 : Record 11012150;
      EstRec@11012000 : Record 11012151;
      EstOrigRec@1210190030 : Record 11012151;
      EstDestRec@1210190031 : Record 11012151;
      SubEstRec@11012001 : Record 11072074;
      EstPartRec@11012003 : Record 11072073;
      EstLineRec@11012004 : Record 11072072;
      RcpLineRec@11012005 : Record 11072075;
      TextRec@1210190000 : Record 11020595;
      ChrgRec@11012006 : Record 11229771;
      QuanSheetRec@1210190032 : Record 11012186;
      QuanModelRec@1210190038 : Record 11012197;
      SumHeaderRec@1210190010 : Record 11012172;
      SumLineRec@1210190009 : Record 11012171;
      SumExcelRec@1210190008 : Record 11012173;
      EstModelRec@1100485005 : Record 11012196;
      EstCodeRec@1210190034 : Record 11229772;
      EstRateRec@1210190007 : Record 11012160;
      EstRespRec@1210190006 : Record 11012159;
      EstPrincRec@1210190005 : Record 11012170;
      EstCommentRec@1210190004 : Record 97;
      ConfigFeatureRec@1210190003 : Record 11012177;
      ConfigLevelRec@1100485003 : Record 11012191;
      ConfigPartRec@1100485006 : Record 11012176;
      ConfigPartFeatRec@1100485007 : Record 11012178;
      ConfigRowQuanRec@1100485008 : Record 11012192;
      PartTotalRec@1100525011 : Record 11229767;
      LineTotalRec@1100525010 : Record 11072077;
      DateRateRec@1100485014 : Record 11012188;
      ElemRec@1100525000 : Record 11012060;
      EstimateCurrExchangeRate@1100528600 : Record 11229770;
      SalesPricebyEstimate@1100528500 : Record 11229774;
      PlotbySubEstimate@1100528502 : Record 11229775;
      FormatMgt@1210190026 : Codeunit 11012022;
      ActionLvl@1210190027 : Integer;
      CopyType@11012008 : 'Part,SubEst';
      ItemTypeOpt@1210190028 : 'Item,Basic Item,Trade Item';
      Status@11012009 : Dialog;
      StatusBln@11012010 : Boolean;
      LineCount@11012011 : Integer;
      NumLines@11012012 : Integer;
      sp1@11012013 : Integer;
      sp2@11012014 : Integer;
      x@11012015 : Integer;
      lp@11012016 : Integer;
      SubEstLevel@11012033 : Integer;
      SubEstChapter@1210190001 : Code[20];
      SubEstParagraph@1100485001 : Code[20];
      Level@1100485002 : Integer;
      Chapter@11012038 : Code[20];
      Paragraph@11012037 : Code[20];
      TmpEstRec@1210190018 : TEMPORARY Record 11012151;
      TmpSubEstRec@1210190017 : TEMPORARY Record 11072074;
      TmpEstPartRec@1210190022 : TEMPORARY Record 11072073;
      TmpEstPartFrom@1210190036 : TEMPORARY Record 11072073;
      TmpEstLineRec@1210190023 : TEMPORARY Record 11072072;
      TmpRcpLineRec@1210190025 : TEMPORARY Record 11072075;
      TmpTextRec@1210190002 : TEMPORARY Record 11020595;
      TmpChrgRec@1210190024 : TEMPORARY Record 11229771;
      TmpQuanSheetRec@1210190033 : TEMPORARY Record 11012186;
      TmpQuanModelRec@1210190039 : TEMPORARY Record 11012197;
      TmpSumHeaderRec@1210190021 : TEMPORARY Record 11012172;
      TmpSumLineRec@1210190020 : TEMPORARY Record 11012171;
      TmpSumExcelRec@1210190019 : TEMPORARY Record 11012173;
      TmpEstModelRec@1100485012 : TEMPORARY Record 11012196;
      TmpEstCodeRec@1210190035 : TEMPORARY Record 11229772;
      TmpEstRateRec@1210190016 : TEMPORARY Record 11012160;
      TmpEstRespRec@1210190015 : TEMPORARY Record 11012159;
      TmpEstPrincRec@1210190014 : TEMPORARY Record 11012170;
      TmpEstCommentRec@1210190013 : TEMPORARY Record 97;
      TmpConfigFeatureRec@1210190012 : TEMPORARY Record 11012177;
      TmpConfigLevelRec@1100485004 : TEMPORARY Record 11012191;
      TmpConfigPartRec@1100485011 : TEMPORARY Record 11012176;
      TmpConfigPartFeatRec@1100485010 : TEMPORARY Record 11012178;
      TmpConfigRowQuanRec@1100485009 : TEMPORARY Record 11012192;
      TmpDateRateRec@1100485015 : TEMPORARY Record 11012188;
      QuantSheetHeader@1100525006 : Record 11020462;
      QuantRelation@1100525005 : Record 11020463;
      QuantSheetLine@1100525004 : Record 11020464;
      TmpQuantSheetHeader@1100525003 : TEMPORARY Record 11020462;
      TmpQuantRelation@1100525002 : TEMPORARY Record 11020463;
      TmpQuantSheetLine@1100525007 : TEMPORARY Record 11020464;
      TmpPartTotalRec@1100525008 : TEMPORARY Record 11229767;
      TmpLineTotalRec@1100525009 : TEMPORARY Record 11072077;
      TmpEstimateCurrExchangeRate@1100528601 : TEMPORARY Record 11229770;
      TmpSalesPricebyEstimate@1100528501 : TEMPORARY Record 11229774;
      TmpPlotbySubEstimate@1100528503 : TEMPORARY Record 11229775;
      CopyEstModel@1100485000 : Boolean;
      Text016@1100485016 : TextConst 'ENU=The new Summary Sheet No. %1 is %2 Characters too long.;NOR=Det nye Sammendragarksnr. %1 er %2 tegn for langt.;SVE=Det nya sammandragsarksnumret %1 „r %2 tecken f”r l†ngt.';
      CopyFrm@1100525001 : Page 11012239;
      gNormGroupFrom@1210190029 : Code[20];
      gNormGroupTo@1210190011 : Code[20];
      gNormGroupSalesFrom@1100525013 : Code[20];
      gNormGroupSalesTo@1100525012 : Code[20];
      TransferCommentLines@1100529800 : Boolean;
      GenerateSummarySubEst@1100525015 : Boolean;
      gCopyQuantitySheet@1100409000 : Boolean;
      InitSalesFromCost@1100525016 : Boolean;
      UpdateMgt@1100525017 : Codeunit 11012229;
      SalesDiscRef1To@1100525019 : Code[20];
      SalesDiscRef2To@1100525018 : Code[20];
      SurchargeLaborTo@1100525024 : Decimal;
      SurchargeMaterialTo@1100525023 : Decimal;
      SurchargeSubcontractingTo@1100525022 : Decimal;
      SurchargePlantTo@1100525021 : Decimal;
      SurchargeSundryTo@1100525020 : Decimal;
      gEstimateSource@1100528506 : Code[20];
      gSummarySourceCost@1100528505 : Code[20];
      gSummarySourceSales@1100528504 : Code[20];
      ApplySummarySource@1100528507 : Boolean;

    PROCEDURE CopyEst@11(EstFrom@11012000 : Code[20];SubEstFrom@1210190007 : Code[20];EstTo@11012001 : Code[20];EstToTxt@11012002 : Text[50];NormGroupTo@1210190001 : Code[20];RateGroupTo@1210190002 : Code[20];PrincipalTo@1210190003 : Code[20];RefDateRateTo@1100528900 : Date;RefDateItemTo@1100485001 : Date;DiscRef1To@1100485004 : Code[20];DiscRef2To@1100485005 : Code[20];SkipLines@1100485000 : Boolean;SelectType@1100485002 : Integer;CopyEstQuantSheet@1100525008 : Boolean;CopyPriceAgreement@1210190005 : Boolean;CopyRates@1100528500 : Boolean);
    VAR
      lvEstRec@1100525000 : Record 11012151;
      lvSubEstRec@1210190004 : Record 11072074;
      lvSumHeaderRec@1100525001 : Record 11012172;
      lvEstSource@1100485003 : Code[20];
      lvSubEstSource@1210190006 : Code[20];
      lvSheetSource@1100409000 : Code[20];
      lvRespCode@1100525002 : Code[20];
      EstLineRec@1100525003 : Record 11072072;
      SummaryExist@1100525004 : Boolean;
    BEGIN
      StatusBln := FALSE;
      IF NOT StatusBln THEN BEGIN
        OpenDialog;
        Status.UPDATE(1, EstFrom);
        Status.UPDATE(2, EstTo);
        ActionLvl := 1;
      END;

      gCopyQuantitySheet := CopyEstQuantSheet;

      IF EstRec.GET(EstFrom) THEN BEGIN
        TmpEstRec.COPY(EstRec);
        TmpEstRec."No." := EstTo;
        TmpEstRec.Description := EstToTxt;
        TmpEstRec."Search Name" := '';
        TmpEstRec.VALIDATE(Description);
        TmpEstRec."Creation Date" := TODAY;
        TmpEstRec."Created by" := USERID;  //DP01931
        TmpEstRec."Reference Date (Rate)" := RefDateRateTo;  //DP01931
        TmpEstRec."Norm Group" := NormGroupTo;
        TmpEstRec."Rate Group" := RateGroupTo;
        TmpEstRec."Customer No." := PrincipalTo;
        TmpEstRec."Reference Date (Item)" := RefDateItemTo;
        //C017681.sn
        IF DiscRef1To <> '' THEN
          TmpEstRec.VALIDATE("Purch Discount Term Group 1", DiscRef1To);
        IF DiscRef2To <> '' THEN
          TmpEstRec.VALIDATE("Purch Discount Term Group 2", DiscRef2To);
        IF SalesDiscRef1To <> '' THEN
          TmpEstRec.VALIDATE("Sales Discount Term Group 1", SalesDiscRef1To);
        IF SalesDiscRef2To <> '' THEN
          TmpEstRec.VALIDATE("Sales Discount Term Group 2", SalesDiscRef2To);
        //C017681.en
        TmpEstRec.Fixed := FALSE;
        TmpEstRec.Finished := FALSE;
        TmpEstRec.INSERT;
      END;

      EstimateCurrExchangeRate.SETRANGE("Estimate No.", EstFrom);
      IF EstimateCurrExchangeRate.FINDSET THEN BEGIN
        REPEAT
          TmpEstimateCurrExchangeRate.COPY(EstimateCurrExchangeRate);
          TmpEstimateCurrExchangeRate."Estimate No." := EstTo;
          TmpEstimateCurrExchangeRate.INSERT;
        UNTIL EstimateCurrExchangeRate.NEXT = 0;
      END;

      IF (CopyRates = TRUE) OR //C049448
         (EstRec."Reference Date (Rate)" = TmpEstRec."Reference Date (Rate)") THEN BEGIN
        EstRateRec.SETRANGE("Estimate No.", EstFrom);
        IF EstRateRec.FINDSET THEN BEGIN
          REPEAT
            TmpEstRateRec.COPY(EstRateRec);
            TmpEstRateRec."Estimate No." := EstTo;
            TmpEstRateRec.INSERT;
          UNTIL EstRateRec.NEXT = 0;
        END;
        //
        DateRateRec.SETRANGE("Estimate No.", EstFrom);
        IF DateRateRec.FINDSET THEN BEGIN
          REPEAT
            TmpDateRateRec.COPY(DateRateRec);
            TmpDateRateRec."Estimate No." := EstTo;
            TmpDateRateRec.INSERT;
          UNTIL DateRateRec.NEXT = 0;
        END;
      END ELSE BEGIN
        //DP01931.sn
        EstSetup.GET;
        IF (EstSetup."Rates Based On" = EstSetup."Rates Based On"::"Budget Rate") THEN BEGIN
          TmpEstRec.GetCostRate;
          TmpEstRec.GetSalesRate;
        END ELSE BEGIN
          TmpEstRec.GetRateByRateGroup;
        END;
        //DP01931.en
      END;

      //C014012.sn
      ProjSetup.GET;
      lvRespCode := ProjSetup."Responsibility Estimator";
      //C014012.en

      EstRespRec.SETRANGE("Estimate No.", EstFrom);
      IF lvRespCode <> '' THEN
        EstRespRec.SETFILTER(Responsibility, '<>%1', lvRespCode);  //C014012
      IF EstRespRec.FINDSET THEN BEGIN
        REPEAT
          TmpEstRespRec.COPY(EstRespRec);
          TmpEstRespRec."Estimate No." := EstTo;
          TmpEstRespRec.INSERT;
        UNTIL EstRespRec.NEXT = 0;
      END;

      EstPrincRec.SETRANGE("Estimate No.", EstFrom);
      IF EstPrincRec.FINDSET THEN BEGIN
        REPEAT
          TmpEstPrincRec.COPY(EstPrincRec);
          TmpEstPrincRec."Estimate No." := EstTo;
          TmpEstPrincRec.INSERT;
        UNTIL EstPrincRec.NEXT = 0;
      END;

      EstCommentRec.SETRANGE("Table Name", EstCommentRec."Table Name"::Estimate);
      EstCommentRec.SETRANGE("No.", EstFrom);
      IF EstCommentRec.FINDSET THEN BEGIN
        REPEAT
          TmpEstCommentRec.COPY(EstCommentRec);
          TmpEstCommentRec."No." := EstTo;
          TmpEstCommentRec.INSERT;
        UNTIL EstCommentRec.NEXT = 0;
      END;

      ConfigFeatureRec.SETRANGE("Estimate No.", EstFrom);
      IF ConfigFeatureRec.FINDSET THEN BEGIN
        REPEAT
          TmpConfigFeatureRec.COPY(ConfigFeatureRec);
          TmpConfigFeatureRec."Estimate No." := EstTo;
          TmpConfigFeatureRec.INSERT;
        UNTIL ConfigFeatureRec.NEXT = 0;
      END;

      ConfigLevelRec.SETRANGE("Estimate No.", EstFrom);
      IF ConfigLevelRec.FINDSET THEN BEGIN
        REPEAT
          TmpConfigLevelRec.COPY(ConfigLevelRec);
          TmpConfigLevelRec."Estimate No." := EstTo;
          TmpConfigLevelRec.INSERT;
        UNTIL ConfigLevelRec.NEXT = 0;
      END;

      EstModelRec.SETRANGE("Estimate No.", EstFrom);
      IF EstModelRec.FINDSET THEN BEGIN
        REPEAT
          TmpEstModelRec.COPY(EstModelRec);
          TmpEstModelRec."Estimate No." := EstTo;
          TmpEstModelRec.INSERT;
        UNTIL EstModelRec.NEXT = 0;
      END;

      //DP02089.sn
      SalesPricebyEstimate.SETRANGE("Estimate No.", EstFrom);
      IF SalesPricebyEstimate.FINDSET THEN BEGIN
        REPEAT
          TmpSalesPricebyEstimate.COPY(SalesPricebyEstimate);
          TmpSalesPricebyEstimate."Estimate No." := EstTo;
          TmpSalesPricebyEstimate.INSERT;
        UNTIL SalesPricebyEstimate.NEXT = 0;
      END;
      //DP02089.en

      //call 30195
      EstPartRec.SETRANGE("Estimate No.", EstFrom);
      IF EstPartRec.FINDSET THEN BEGIN
        REPEAT
          TmpEstPartFrom.COPY(EstPartRec);
          TmpEstPartFrom."Estimate No." := EstTo;
          TmpEstPartFrom.INSERT;
        UNTIL EstPartRec.NEXT = 0;
      END;
      //
      lvSubEstRec.SETRANGE("Estimate No.", EstFrom);
      lvSubEstRec.SETFILTER("Sub-Estimate No.", SubEstFrom);
      lvSubEstRec.SETRANGE(Level, 0);
      IF lvSubEstRec.FINDSET THEN BEGIN
        REPEAT
          CopySubEst(EstFrom, lvSubEstRec."Sub-Estimate No.", EstTo, lvSubEstRec."Sub-Estimate No.",
                     lvSubEstRec.Description, SkipLines,CopyPriceAgreement);
        UNTIL lvSubEstRec.NEXT = 0;
      END;

      //DP00381.sn
      //SelectType: 0=EstFrom; 1=EstSource; 2=None
      IF SelectType = 0 THEN BEGIN
        lvEstSource := EstFrom;
        lvSubEstSource := SubEstFrom;
        //C015954.sn
        lvSheetSource := '';
        CopySummarySheet(lvEstSource, lvSubEstSource, lvSheetSource, EstTo, '', '', SelectType);
        //C015954.en
        IF EstRec."Estimate Source" = '' THEN
          SummaryExist := CheckSummaryExist(EstRec."No.", EstRec."Summary (Cost)", EstRec."Summary (Sales)")  //C057754
      END;
      IF SelectType = 1 THEN BEGIN
        //C050838.sn
        SummaryExist := FALSE;
        IF ApplySummarySource THEN
          SummaryExist := CheckSummaryExist(gEstimateSource, gSummarySourceCost, gSummarySourceSales)
        ELSE
          IF EstRec."Estimate Source" = '' THEN
            SummaryExist := CheckSummaryExist(EstRec."No.", EstRec."Summary (Cost)", EstRec."Summary (Sales)")  //C057754
        ELSE
          SummaryExist := CheckSummaryExist(EstRec."Estimate Source", EstRec."Summary Source (Cost)", EstRec."Summary Source (Sales)");
        IF NOT SummaryExist THEN BEGIN
          EstSetup.GET;
          SummaryExist := CheckSummaryExist(EstSetup."Estimate Source", EstSetup."Summary Source (Cost)", EstSetup."Summary Source (Sales)");
        END;
        //C050838.en
        lvEstSource := TmpEstRec."Estimate Source";
        lvSubEstSource := '';
        //C015954.sn
        lvSheetSource := TmpEstRec."Summary Source (Cost)";
        IF lvSheetSource <> '' THEN
          CopySummarySheet(lvEstSource, lvSubEstSource, lvSheetSource, EstTo, '', '', SelectType);
        lvSheetSource := TmpEstRec."Summary Source (Sales)";
        IF lvSheetSource <> '' THEN
          CopySummarySheet(lvEstSource, lvSubEstSource, lvSheetSource, EstTo, '', '', SelectType);
        //C015954.en
      END;
      IF SelectType = 2 THEN BEGIN  //C025735
        TmpEstRec."Summary (Cost)" := '';
        TmpEstRec."Summary (Sales)" := '';
        TmpEstRec.MODIFY;
      END;
      //DP00381.en

      UpdateFromTmp;
      IF ActionLvl = 1 THEN BEGIN
        IF InitSalesFromCost THEN BEGIN  //C020959
          EstLineRec.SETRANGE("Estimate No.", EstTo);
          UpdateMgt.InitSalesFromCost(EstLineRec);
        END;
        //C035780+C053828.sn
        lvEstRec.GET(EstTo);
        IF (lvEstRec."Surcharge % Labor" <> SurchargeLaborTo) THEN
          lvEstRec.VALIDATE("Surcharge % Labor", SurchargeLaborTo);
        IF (lvEstRec."Surcharge % Material" <> SurchargeMaterialTo) THEN
          lvEstRec.VALIDATE("Surcharge % Material", SurchargeMaterialTo);
        IF (lvEstRec."Surcharge % Subcontracting" <> SurchargeSubcontractingTo) THEN
          lvEstRec.VALIDATE("Surcharge % Subcontracting", SurchargeSubcontractingTo);
        IF (lvEstRec."Surcharge % Plant" <> SurchargePlantTo) THEN
          lvEstRec.VALIDATE("Surcharge % Plant", SurchargePlantTo);
        IF (lvEstRec."Surcharge % Sundry" <> SurchargeSundryTo) THEN
          lvEstRec.VALIDATE("Surcharge % Sundry", SurchargeSundryTo);
        lvEstRec.MODIFY;
        //C035780+C053828.en
      END;

      //DP00381.sn
      IF GenerateSummarySubEst THEN BEGIN
        lvEstRec.GET(EstTo);
        lvEstSource := EstTo;  //C015954
        lvSheetSource := lvEstRec."Summary Source (Cost)";
        IF lvSheetSource <> '' THEN BEGIN
          lvSubEstRec.RESET;
          lvSubEstRec.SETRANGE("Estimate No.", EstTo);
          lvSubEstRec.SETFILTER("Sub-Estimate No.", lvSubEstSource);
          lvSubEstRec.MODIFYALL("Summary (Cost)" , '');
          CopyFrm.FillDefaultsSource(lvEstSource, lvSubEstSource, lvSheetSource, EstTo, '');  //C015954
          CopyFrm.GenerateSummary;
        END;
        lvSheetSource := lvEstRec."Summary Source (Sales)";
        IF lvSheetSource <> '' THEN BEGIN
          lvSubEstRec.RESET;
          lvSubEstRec.SETRANGE("Estimate No.", EstTo);
          lvSubEstRec.SETFILTER("Sub-Estimate No.", lvSubEstSource);
          lvSubEstRec.MODIFYALL("Summary (Sales)" , '');
          CopyFrm.FillDefaultsSource(lvEstSource, lvSubEstSource, lvSheetSource, EstTo, '');  //C015954
          CopyFrm.GenerateSummary;
        END;
      END;
      //DP00381.en
    END;

    PROCEDURE CopySubEst@1(EstFrom@11012000 : Code[20];SubEstFrom@11012001 : Code[20];EstTo@11012002 : Code[20];SubEstTo@11012003 : Code[20];SubEstToTxt@11012004 : Text[50];SkipLines@1100485000 : Boolean;CopyPriceAgreement@1210190002 : Boolean);
    VAR
      OrigSubEstFrom@1100525002 : Code[20];
      OrigSubEstTo@1100525001 : Code[20];
      OrigSubEstLevel@1100525000 : Integer;
      EstLineRec@1210190001 : Record 11072072;
    BEGIN
      IF NOT StatusBln THEN BEGIN
        OpenDialog;
        Status.UPDATE(1, EstFrom);
        Status.UPDATE(2, EstTo);
        ActionLvl := 2;
      END;

      CopyType := CopyType::SubEst;
      CheckInputData(EstFrom, SubEstFrom, EstTo, SubEstTo);
      FormatMgt.FormatSubEstimate(SubEstTo,SubEstChapter,SubEstParagraph,SubEstLevel,EstTo,TRUE);
      CheckFormat(1);

      EstPartRec.SETRANGE("Estimate No.", EstFrom);

      IF ((SubEstLevel = 1) AND (sp2=0)) OR
         ((SubEstLevel = 2) AND (sp2<>0)) THEN BEGIN
        Status.UPDATE(3, SubEstFrom);
        SubEstRec.GET(EstFrom, SubEstFrom);
        CopySubEstimate(EstTo, SubEstTo, SubEstToTxt,
          SubEstChapter, SubEstParagraph, SubEstLevel,
          SubEstRec.Frequency, SubEstRec."Cumulative Frequency");
        CopySubEstimates(EstFrom, SubEstFrom, EstTo, SubEstTo, SubEstChapter,SubEstParagraph, SkipLines,
          CopyPriceAgreement);
      END ELSE BEGIN
        OrigSubEstFrom := SubEstFrom;
        OrigSubEstTo := SubEstTo;
        OrigSubEstLevel := SubEstLevel;
        SubEstRec.SETRANGE("Estimate No.", EstFrom);
        IF SubEstLevel <> 0 THEN
          SubEstRec.SETRANGE(Paragraph, SubEstFrom)
        ELSE
          SubEstRec.SETRANGE(Chapter, SubEstFrom);
        IF SubEstRec.FINDSET THEN BEGIN
          REPEAT
            Status.UPDATE(3, SubEstRec."Sub-Estimate No.");
            IF SubEstRec.Level > OrigSubEstLevel THEN BEGIN
              SubEstFrom := SubEstRec."Sub-Estimate No.";
              IF OrigSubEstLevel = 0 THEN
                SubEstTo := COPYSTR(OrigSubEstTo, 1, sp1) +  COPYSTR(SubEstRec."Sub-Estimate No.", sp1+1, lp-sp1);
              IF OrigSubEstLevel = 1 THEN
                SubEstTo := COPYSTR(OrigSubEstTo, 1, sp2) + COPYSTR(SubEstRec."Sub-Estimate No.", sp2+1, lp-sp2);
              IF sp1 > 0 THEN
                SubEstChapter := COPYSTR(SubEstTo, 1, sp1) + COPYSTR(SubEstRec.Chapter,sp1+1,STRLEN(SubEstRec.Chapter)-sp1);
              IF sp2 > 0 THEN
                SubEstParagraph := COPYSTR(SubEstTo, 1, sp2) + COPYSTR(SubEstRec.Chapter,sp2+1,STRLEN(SubEstRec.Chapter)-sp2);
              SubEstLevel := SubEstRec.Level;
              SubEstToTxt := SubEstRec.Description;
            END;
            CopySubEstimate(EstTo, SubEstTo, SubEstToTxt,
              SubEstChapter, SubEstParagraph, SubEstLevel,
              SubEstRec.Frequency, SubEstRec."Cumulative Frequency");
            CopySubEstimates(EstFrom, SubEstFrom, EstTo, SubEstTo, SubEstChapter, SubEstParagraph, SkipLines,
              CopyPriceAgreement);
          UNTIL SubEstRec.NEXT = 0;
        END;
      END;

      IF ActionLvl = 2 THEN BEGIN
        UpdateFromTmp;
        //C009772.sn
        IF (gNormGroupFrom <> gNormGroupTo) AND (gNormGroupTo <> '') THEN BEGIN
          EstLineRec.SETRANGE("Estimate No.", EstTo);
          IF sp1 > 0 THEN
            EstLineRec.SETFILTER("Sub-Estimate No.", COPYSTR(SubEstTo, 1, sp1)+'*')
          ELSE
            EstLineRec.SETRANGE("Sub-Estimate No.", SubEstTo);
          UpdateMgt.ReplaceNormGroup(EstLineRec, gNormGroupFrom, gNormGroupTo);
        END;
        IF (gNormGroupSalesFrom <> gNormGroupSalesTo) AND (gNormGroupSalesTo <> '') THEN BEGIN
          EstLineRec.SETRANGE("Estimate No.", EstTo);
          IF sp1 > 0 THEN
            EstLineRec.SETFILTER("Sub-Estimate No.", COPYSTR(SubEstTo, 1, sp1)+'*')
          ELSE
            EstLineRec.SETRANGE("Sub-Estimate No.", SubEstTo);
          UpdateMgt.ReplaceNormGroupSales(EstLineRec, gNormGroupSalesFrom, gNormGroupSalesTo);
        END;
        //C009772.en
        IF InitSalesFromCost THEN BEGIN  //C020959
          EstLineRec.SETRANGE("Estimate No.", EstTo);
          IF sp1 > 0 THEN
            EstLineRec.SETFILTER("Sub-Estimate No.", COPYSTR(SubEstTo, 1, sp1)+'*')
          ELSE
            EstLineRec.SETRANGE("Sub-Estimate No.", SubEstTo);
          UpdateMgt.InitSalesFromCost(EstLineRec);
        END;
      END;
    END;

    PROCEDURE CopyEstPart@2(EstFrom@11012000 : Code[20];SubEstFrom@11012001 : Code[20];EstTo@11012002 : Code[20];SubEstTo@11012003 : Code[20];EstGroupFrom@11012004 : Code[20];EstPartFrom@11012005 : Code[20];EstPartTo@11012006 : Code[20];EstPartToTxt@11012007 : Text[50];EstPartToTxt2@1100409000 : Text[50];SkipLines@1100485000 : Boolean;CopyPriceAgreement@1210190001 : Boolean);
    VAR
      OrigLevel@1210190000 : Integer;
      EstLineRec@1100409001 : Record 11072072;
    BEGIN
      IF NOT StatusBln THEN BEGIN
        OpenDialog;
        Status.UPDATE(1, EstFrom);
        Status.UPDATE(2, EstTo);
        Status.UPDATE(3, SubEstFrom);
        ActionLvl := 3;
      END;

      CopyType := CopyType::Part;
      CheckInputData(EstFrom, SubEstFrom, EstTo, SubEstTo);
      IF EstPartFrom = '' THEN
        ERROR(Text000);
      IF EstPartTo = '' THEN
        ERROR(Text001);

      FormatMgt.FormatSubEstimate(SubEstTo, SubEstChapter, SubEstParagraph, Level, EstTo, FALSE);
      FormatMgt.CreateEstPart(EstFrom, SubEstFrom, EstGroupFrom, EstPartFrom, Chapter, Paragraph, OrigLevel, FALSE);

      EstPartRec.SETRANGE("Estimate No.", EstFrom);
      EstPartRec.SETRANGE("Sub-Estimate No.", SubEstFrom);

      CheckFormat(2);

      CASE OrigLevel OF
         0:BEGIN
             IF EstPartRec.FINDSET THEN BEGIN
               REPEAT
                 EstPartTo := EstPartRec.Part;
                 Status.UPDATE(4,EstPartTo);
                 IF EstPartRec.Level = OrigLevel THEN
                   CopyParts(EstFrom,SubEstFrom,EstTo,SubEstTo,EstGroupFrom,EstPartFrom,EstPartTo,SubEstChapter,
                     EstPartToTxt,EstPartToTxt2,SkipLines,CopyPriceAgreement)  //DP00686
                 ELSE
                   CopyParts(EstFrom,SubEstFrom,EstTo,SubEstTo,EstGroupFrom,EstPartFrom,EstPartTo,SubEstChapter,
                     '','',SkipLines,CopyPriceAgreement);  //DP00686
               UNTIL EstPartRec.NEXT = 0;
             END;
           END;
         1:BEGIN
             IF sp1 = 0 THEN
               EstPartRec.SETRANGE(Part, EstPartFrom)
             ELSE
               EstPartRec.SETRANGE(Chapter, Chapter);
             IF EstPartRec.FINDSET THEN BEGIN
               REPEAT
                 IF sp1 <> 0 THEN
                   EstPartTo := COPYSTR(EstPartTo, 1, sp1) + COPYSTR(EstPartRec.Part, sp1+1, lp-sp1);
                 Status.UPDATE(4,EstPartTo);
                 IF EstPartRec.Level = OrigLevel THEN
                   CopyParts(EstFrom,SubEstFrom,EstTo,SubEstTo,EstGroupFrom,EstPartFrom,EstPartTo,SubEstChapter,
                     EstPartToTxt,EstPartToTxt2,SkipLines,CopyPriceAgreement)  //DP00686
                 ELSE
                   CopyParts(EstFrom,SubEstFrom,EstTo,SubEstTo,EstGroupFrom,EstPartFrom,EstPartTo,SubEstChapter,
                     '','',SkipLines,CopyPriceAgreement);  //DP00686
               UNTIL EstPartRec.NEXT = 0;
             END;
           END;
         2:BEGIN
             IF sp2 = 0 THEN
               EstPartRec.SETRANGE(Part, EstPartFrom)
             ELSE
               EstPartRec.SETRANGE(Paragraph, Paragraph);
             IF EstPartRec.FINDSET THEN BEGIN
               REPEAT
                 IF sp2 <> 0 THEN
                   EstPartTo := COPYSTR(EstPartTo, 1, sp2) + COPYSTR(EstPartRec.Part, sp2+1, lp-sp2);
                 Status.UPDATE(4,EstPartTo);
                 IF EstPartRec.Level = OrigLevel THEN
                   CopyParts(EstFrom,SubEstFrom,EstTo,SubEstTo,EstGroupFrom,EstPartFrom,EstPartTo,SubEstChapter,
                     EstPartToTxt,EstPartToTxt2,SkipLines,CopyPriceAgreement)  //DP00686
                 ELSE
                   CopyParts(EstFrom,SubEstFrom,EstTo,SubEstTo,EstGroupFrom,EstPartFrom,EstPartTo,SubEstChapter,
                     '','',SkipLines,CopyPriceAgreement);  //DP00686
               UNTIL EstPartRec.NEXT = 0;
             END;
           END;
         3:BEGIN
             EstPartRec.SETRANGE(Part, EstPartFrom);
             IF EstPartRec.FINDSET THEN BEGIN
               REPEAT
                 Status.UPDATE(4,EstPartTo);
                 IF EstPartRec.Level = OrigLevel THEN
                   CopyParts(EstFrom,SubEstFrom,EstTo,SubEstTo,EstGroupFrom,EstPartFrom,EstPartTo,SubEstChapter,
                     EstPartToTxt,EstPartToTxt2,SkipLines,CopyPriceAgreement)  //DP00686
                 ELSE
                   CopyParts(EstFrom,SubEstFrom,EstTo,SubEstTo,EstGroupFrom,EstPartFrom,EstPartTo,SubEstChapter,
                     '','',SkipLines,CopyPriceAgreement);  //DP00686
               UNTIL EstPartRec.NEXT = 0;
             END;
           END;
      END;

      IF ActionLvl = 3 THEN BEGIN
        UpdateFromTmp;
        //C009772.sn
        IF (gNormGroupFrom <> gNormGroupTo) AND (gNormGroupTo <> '') THEN BEGIN
          EstLineRec.SETRANGE("Estimate No.", EstTo);
          EstLineRec.SETRANGE("Sub-Estimate No.", SubEstTo);
          EstLineRec.SETRANGE(Part, EstPartTo);
          UpdateMgt.ReplaceNormGroup(EstLineRec, gNormGroupFrom, gNormGroupTo);
        END;
        IF (gNormGroupSalesFrom <> gNormGroupSalesTo) AND (gNormGroupSalesTo <> '') THEN BEGIN
          EstLineRec.SETRANGE("Estimate No.", EstTo);
          EstLineRec.SETRANGE("Sub-Estimate No.", SubEstTo);
          EstLineRec.SETRANGE(Part, EstPartTo);
          UpdateMgt.ReplaceNormGroupSales(EstLineRec, gNormGroupSalesFrom, gNormGroupSalesTo);
        END;
        //C009772.en
        IF InitSalesFromCost THEN BEGIN  //C020959
          EstLineRec.SETRANGE("Estimate No.", EstTo);
          EstLineRec.SETRANGE("Sub-Estimate No.", SubEstTo);
          EstLineRec.SETRANGE(Part, EstPartTo);
          UpdateMgt.InitSalesFromCost(EstLineRec);
        END;
      END;
    END;

    PROCEDURE CopySubEstimate@3(EstTo@11012000 : Code[20];SubEstTo@11012001 : Code[20];SubEstToTxt@11012002 : Text[50];SubEstChapter@1100485001 : Code[20];SubEstParagraph@1100485002 : Code[20];LevelInt@11012004 : Integer;SubFreq@11012005 : Decimal;SubCumFreq@1210190001 : Decimal);
    VAR
      lvSubEstRec@1100485000 : Record 11072074;
    BEGIN
      IF lvSubEstRec.GET(EstTo, SubEstTo) THEN BEGIN
        SubFreq := lvSubEstRec.Frequency;
        SubCumFreq := lvSubEstRec."Cumulative Frequency";
      END ELSE BEGIN
        IF LevelInt = 1 THEN BEGIN
          IF TmpSubEstRec.GET(EstTo, SubEstChapter) THEN
            SubCumFreq := SubFreq * TmpSubEstRec."Cumulative Frequency"
          ELSE
            IF lvSubEstRec.GET(EstTo, SubEstChapter) THEN
              SubCumFreq := SubFreq * lvSubEstRec."Cumulative Frequency";
        END;
        IF LevelInt = 2 THEN BEGIN
          IF TmpSubEstRec.GET(EstTo, SubEstParagraph) THEN
            SubCumFreq := SubFreq * TmpSubEstRec."Cumulative Frequency"
          ELSE
            IF lvSubEstRec.GET(EstTo, SubEstParagraph) THEN
              SubCumFreq := SubFreq * lvSubEstRec."Cumulative Frequency";
        END;
      END;

      TmpSubEstRec.COPY(SubEstRec);
      TmpSubEstRec."Estimate No." := EstTo;
      TmpSubEstRec."Sub-Estimate No." := SubEstTo;
      TmpSubEstRec.Description := SubEstToTxt;
      TmpSubEstRec.Level := LevelInt;
      TmpSubEstRec.Frequency := SubFreq;
      TmpSubEstRec."Cumulative Frequency" := SubCumFreq;
      TmpSubEstRec.Chapter := SubEstChapter;
      TmpSubEstRec.Paragraph := SubEstParagraph;
      IF (ActionLvl = 2) AND (gNormGroupTo <> '') THEN
        TmpSubEstRec."Norm Group" := gNormGroupTo;
      IF (ActionLvl = 2) AND (gNormGroupSalesTo <> '') THEN  //DP00381
        TmpSubEstRec."Norm Group (Sales)" := gNormGroupSalesTo;
      TmpSubEstRec.INSERT;

      //DP02088.sn
      PlotbySubEstimate.SETRANGE("Estimate No.", SubEstRec."Estimate No.");
      PlotbySubEstimate.SETRANGE("Sub-Estimate No.", SubEstRec."Sub-Estimate No.");
      IF PlotbySubEstimate.FINDSET THEN BEGIN
        REPEAT
          TmpPlotbySubEstimate.COPY(PlotbySubEstimate);
          TmpPlotbySubEstimate."Estimate No." := TmpSubEstRec."Estimate No.";
          TmpPlotbySubEstimate."Sub-Estimate No." := TmpSubEstRec."Sub-Estimate No.";
          TmpPlotbySubEstimate.INSERT;
        UNTIL PlotbySubEstimate.NEXT = 0;
      END;
      //DP02088.en
    END;

    PROCEDURE CopyPart@4(EstFrom@11012000 : Code[20];SubEstFrom@11012001 : Code[20];EstTo@11012002 : Code[20];SubEstTo@11012003 : Code[20];EstPartTo@11012004 : Code[20];Chapter@11012005 : Code[20];Paragraph@11012006 : Code[20];EstPartToTxt@11012007 : Text[50];EstPartToTxt2@1100409000 : Text[50]);
    VAR
      lvSubEstRec@1210190000 : Record 11072074;
      lvExcelEstimateMgt@1100485000 : Codeunit 11012231;
    BEGIN
      Status.UPDATE(4,EstPartRec.Part);

      IF TmpSubEstRec.GET(EstTo, SubEstTo) THEN
        lvSubEstRec.COPY(TmpSubEstRec)
      ELSE
        lvSubEstRec.GET(EstTo, SubEstTo);

      TmpEstPartRec.COPY(EstPartRec);
      TmpEstPartRec."Estimate No." := EstTo;
      TmpEstPartRec."Sub-Estimate No." := SubEstTo;
      TmpEstPartRec."Part Group" := lvSubEstRec."Part Group";
      IF CopyType = CopyType::Part THEN BEGIN
        TmpEstPartRec.Part := EstPartTo;
        TmpEstPartRec.Chapter := Chapter;
        TmpEstPartRec.Paragraph := Paragraph;
      END;
      IF EstPartToTxt <> '' THEN
        TmpEstPartRec.Description := EstPartToTxt;
      IF EstPartToTxt2 <> '' THEN
        TmpEstPartRec."Description 2" := EstPartToTxt2;  //DP00686

      TmpEstPartRec."Excel Estimate Template" := EstPartRec."Excel Estimate Template";
      lvExcelEstimateMgt.CopyExcelFile(EstPartRec,TmpEstPartRec);
      IF TmpEstPartRec.INSERT THEN;  //C016787 (2x Part with other group)

      //DP00381.sn
      IF NOT PartTotalRec.GET(EstPartRec."Estimate No.", EstPartRec."Sub-Estimate No.",
        EstPartRec."Part Group", EstPartRec.Part) THEN PartTotalRec.INIT;
      TmpPartTotalRec.COPY(PartTotalRec);
      TmpPartTotalRec."Estimate No." := EstTo;
      TmpPartTotalRec."Sub-Estimate No." := SubEstTo;
      TmpPartTotalRec."Part Group" := lvSubEstRec."Part Group";
      IF CopyType = CopyType::Part THEN BEGIN
        TmpPartTotalRec.Part := EstPartTo;
        TmpPartTotalRec.Chapter := Chapter;
        TmpPartTotalRec.Paragraph := Paragraph;
      END;
      IF TmpPartTotalRec.INSERT THEN;  //C013434
      //DP00381.en
    END;

    PROCEDURE CopyEstLine@5(EstFrom@11012000 : Code[20];SubEstFrom@11012001 : Code[20];EstTo@11012002 : Code[20];SubEstTo@11012003 : Code[20];SubEstChapter@11012004 : Code[20];SubEstParagraph@1100485000 : Code[20];EstPartTo@11012005 : Code[20];Chapter@11012006 : Code[20];Paragraph@11012007 : Code[20];CopyPriceAgreement@1210190000 : Boolean);
    VAR
      lvSubEstRec@1210190002 : Record 11072074;
      UnitOld@1100485004 : Code[20];
      UnitNew@1100485003 : Code[20];
      OldEstLineRec@1100485001 : Record 11072072;
      NewEstLineRec@1100485002 : Record 11072072;
    BEGIN
      LineCount := 0;
      Status.UPDATE(6,0);

      EstOrigRec.GET(EstFrom);
      IF TmpEstRec.GET(EstTo) THEN
        EstDestRec.COPY(TmpEstRec)
      ELSE
        EstDestRec.GET(EstTo);

      IF TmpSubEstRec.GET(EstTo, SubEstTo) THEN
        lvSubEstRec.COPY(TmpSubEstRec)
      ELSE
        lvSubEstRec.GET(EstTo, SubEstTo);

      EstLineRec.SETRANGE("Estimate No.",EstFrom);
      EstLineRec.SETRANGE("Sub-Estimate No.", SubEstFrom);
      IF EstLineRec.FINDSET THEN BEGIN
        Status.UPDATE(5,EstLineRec.TABLECAPTION);
        NumLines := EstLineRec.COUNT;
        REPEAT
          TmpEstLineRec.COPY(EstLineRec);
          TmpEstLineRec.SetTempEstimate(EstDestRec);  //C038554
          TmpEstLineRec.InitEstimateLine(TRUE);
          //C016435.sn
          IF (EstLineRec."Surcharge % Labor" <> 0) OR (EstLineRec."Norm Agreement (Sales)" = TRUE) THEN  //C034809
            TmpEstLineRec."Surcharge % Labor" := EstLineRec."Surcharge % Labor";
          IF (EstLineRec."Surcharge % Price" <> 0) OR (EstLineRec."Price Agreement (Sales)" = TRUE) THEN  //C034809
            TmpEstLineRec."Surcharge % Price" :=  EstLineRec."Surcharge % Price";
          //C016435.en
          TmpEstLineRec."Estimate No." := EstTo;
          TmpEstLineRec."Sub-Estimate No." := SubEstTo;
          TmpEstLineRec."Part Group" := lvSubEstRec."Part Group";
          IF CopyType = CopyType::Part THEN BEGIN
            TmpEstLineRec.Part := EstPartTo;
            TmpEstLineRec.Chapter := Chapter;
            TmpEstLineRec.Paragraph := Paragraph;
          END;
          TmpEstLineRec."Chapter (Sub-Estimate)" := SubEstChapter;
          TmpEstLineRec."Paragraph (Sub-Estimate)" := SubEstParagraph;
          IF NOT TmpEstLineRec."Ignore Part Quantity" THEN
            TmpEstLineRec."Part Quantity" :=
              lvSubEstRec."Cumulative Frequency" *
              GetPartQuantity(TmpEstLineRec."Estimate No.", TmpEstLineRec."Sub-Estimate No.",
                              TmpEstLineRec."Part Group", TmpEstLineRec.Part);
          IF NOT CopyPriceAgreement THEN BEGIN
            TmpEstLineRec."Price Agreement" := FALSE;
            TmpEstLineRec."Price Agreement (Sales)" := FALSE;  //C032335
            TmpEstLineRec."Norm Agreement" := FALSE;
            TmpEstLineRec."Norm Agreement (Sales)" := FALSE;  //C034809
          END;
          IF TmpEstLineRec."Price Agreement" THEN BEGIN
            IF (EstLineRec."Trade Item" <> '') OR (EstLineRec."Basic Item" <> '') OR (EstLineRec."Item No." <> '') THEN
              TmpEstLineRec.CalcItemSalesPriceAndDiscount(EstDestRec);  //C032335
          END ELSE BEGIN
            IF (EstOrigRec."Reference Date (Item)" <> EstDestRec."Reference Date (Item)") OR
               (EstOrigRec."Purch Discount Term Group 1" <> EstDestRec."Purch Discount Term Group 1") OR
               (EstOrigRec."Purch Discount Term Group 2" <> EstDestRec."Purch Discount Term Group 2") OR
               ((TmpEstLineRec."Price Agreement" = FALSE) AND (EstLineRec."Price Agreement" = TRUE))  //C032335
            THEN BEGIN
              OldEstLineRec := TmpEstLineRec;
              IF EstLineRec."Trade Item" <> '' THEN
                TmpEstLineRec.ValidateItem(ItemTypeOpt::"Trade Item", EstDestRec, FALSE)
              ELSE
                IF EstLineRec."Basic Item" <> '' THEN
                  TmpEstLineRec.ValidateItem(ItemTypeOpt::"Basic Item", EstDestRec, FALSE)
                ELSE
                  IF EstLineRec."Item No." <> '' THEN
                    TmpEstLineRec.ValidateItem(ItemTypeOpt::Item, EstDestRec, FALSE);
              NewEstLineRec := TmpEstLineRec;
              IF NewEstLineRec."Unit of Measure" <> OldEstLineRec."Unit of Measure" THEN BEGIN
                UnitOld := OldEstLineRec."Unit of Measure";
                UnitNew := NewEstLineRec."Unit of Measure";
                NewEstLineRec."Unit of Measure" := UnitOld;
                OldEstLineRec."Unit of Measure" := UnitNew;
                NewEstLineRec.SetTempEstimate(EstDestRec);  //C038554
                TmpEstLineRec.CheckItemUnitConversion(NewEstLineRec, OldEstLineRec);
                TmpEstLineRec."Unit of Measure" := UnitOld;
                TmpEstLineRec."Net Cost Price":= NewEstLineRec."Net Cost Price";
                TmpEstLineRec."Gross Price":= NewEstLineRec."Gross Price";
              END;
            END ELSE BEGIN
              //C017681
              IF (EstOrigRec."Sales Discount Term Group 1" <> EstDestRec."Sales Discount Term Group 1") OR
                 (EstOrigRec."Sales Discount Term Group 2" <> EstDestRec."Sales Discount Term Group 2") OR
                 //C028409.sn
                 (EstOrigRec."Customer No." <> EstDestRec."Customer No.") OR
                 (EstOrigRec."Customer Disc. Group" <> EstDestRec."Customer Disc. Group") OR
                 //C028409.en
                 ((TmpEstLineRec."Price Agreement (Sales)" = FALSE) AND (EstLineRec."Price Agreement (Sales)" = TRUE))  //C032335
              THEN BEGIN
                IF (EstLineRec."Trade Item" <> '') OR (EstLineRec."Basic Item" <> '') OR (EstLineRec."Item No." <> '') THEN
                  TmpEstLineRec.CalcItemSalesPriceAndDiscount(EstDestRec);  //C032335
              END;
            END;
          END;

          IF TmpEstLineRec.Recipe = '' THEN BEGIN
            IF EstRateRec.GET(TmpEstLineRec."Estimate No.", TmpEstLineRec."Rate Code") THEN BEGIN
              TmpEstLineRec."Cost Rate" := EstRateRec."Cost Rate";
              TmpEstLineRec."Sales Rate" := EstRateRec."Sales Rate";  //C040556
              TmpEstLineRec."Rate Type" := EstRateRec."Rate Type";
              TmpEstLineRec."Team Size" := EstRateRec."Team Size";
            END;
          END;
          TmpEstLineRec."Original Quantity" := EstLineRec."Original Quantity";
          TmpEstLineRec."Part of Line" := EstLineRec."Part of Line";
          TmpEstLineRec."Level BOM" := EstLineRec."Level BOM";
          TmpEstLineRec."BOM Item No."  := EstLineRec."BOM Item No.";
          TmpEstLineRec.Description := EstLineRec.Description;
          TmpEstLineRec."Cost Object Price" := EstLineRec."Cost Object Price";
          TmpEstLineRec."Cost Component" := EstLineRec."Cost Component";

          TmpEstLineRec.CalculateTotals;
          TmpEstLineRec.INSERT;

          //DP00381.sn
          IF NOT LineTotalRec.GET(EstLineRec."Estimate No.", EstLineRec."Sub-Estimate No.",
            EstLineRec."Part Group", EstLineRec.Part, EstLineRec."Line No.") THEN LineTotalRec.INIT;
          TmpLineTotalRec.COPY(LineTotalRec);
          TmpLineTotalRec."Estimate No." := EstTo;
          TmpLineTotalRec."Sub-Estimate No." := SubEstTo;
          TmpLineTotalRec."Part Group" := lvSubEstRec."Part Group";
          IF CopyType = CopyType::Part THEN BEGIN
            TmpLineTotalRec.Part := EstPartTo;
            TmpLineTotalRec.Chapter := Chapter;
            TmpLineTotalRec.Paragraph := Paragraph;
          END;
          TmpLineTotalRec."Chapter (Sub-Estimate)" := SubEstChapter;
          TmpLineTotalRec."Paragraph (Sub-Estimate)" := SubEstParagraph;
          IF TmpLineTotalRec.INSERT THEN;  //C013434
          //DP00381.en

          Status.UPDATE(6,ROUND(LineCount / NumLines * 10000,1));
          LineCount := LineCount + 1;
        UNTIL EstLineRec.NEXT = 0;
      END;
    END;

    PROCEDURE CopyRecipeLine@6(EstFrom@11012000 : Code[20];SubEstFrom@11012001 : Code[20];EstTo@11012002 : Code[20];SubEstTo@11012003 : Code[20];EstPartTo@11012004 : Code[20];CopyPriceAgreement@1210190000 : Boolean);
    VAR
      lvSubEstRec@1210190002 : Record 11072074;
      UnitOld@1100485003 : Code[20];
      UnitNew@1100485002 : Code[20];
      OldRcpLineRec@1100485001 : Record 11072075;
      NewRcpLineRec@1100485000 : Record 11072075;
    BEGIN
      LineCount := 0;
      Status.UPDATE(6,0);

      EstOrigRec.GET(EstFrom);
      IF TmpEstRec.GET(EstTo) THEN
        EstDestRec.COPY(TmpEstRec)
      ELSE
        EstDestRec.GET(EstTo);

      IF TmpSubEstRec.GET(EstTo, SubEstTo) THEN
        lvSubEstRec.COPY(TmpSubEstRec)
      ELSE
        lvSubEstRec.GET(EstTo, SubEstTo);

      RcpLineRec.SETRANGE("Estimate No.",EstFrom);
      RcpLineRec.SETRANGE("Sub-Estimate No.", SubEstFrom);
      IF RcpLineRec.FINDSET THEN BEGIN
        Status.UPDATE(5,RcpLineRec.TABLECAPTION);
        NumLines := RcpLineRec.COUNT;
        REPEAT
          TmpRcpLineRec.COPY(RcpLineRec);
          TmpRcpLineRec.SetTempEstimate(EstDestRec);  //C038554
          TmpRcpLineRec.InitRecipeLine(TRUE);
          //C016435.sn
          IF (RcpLineRec."Surcharge % Labor" <> 0) OR (RcpLineRec."Norm Agreement (Sales)" = TRUE) THEN  //C038908
            TmpRcpLineRec."Surcharge % Labor" := RcpLineRec."Surcharge % Labor";
          IF (RcpLineRec."Surcharge % Price" <> 0) OR (RcpLineRec."Price Agreement (Sales)" = TRUE) THEN  //C038908
            TmpRcpLineRec."Surcharge % Price" :=  RcpLineRec."Surcharge % Price";
          //C016435.en
          TmpRcpLineRec."Estimate No." := EstTo;
          TmpRcpLineRec."Sub-Estimate No." := SubEstTo;
          TmpRcpLineRec."Part Group" := lvSubEstRec."Part Group";
          IF CopyType = CopyType::Part THEN
            TmpRcpLineRec.Part := EstPartTo;
          IF NOT CopyPriceAgreement THEN BEGIN
            TmpRcpLineRec."Price Agreement" := FALSE;
            TmpRcpLineRec."Price Agreement (Sales)" := FALSE;  //C032335
            TmpRcpLineRec."Norm Agreement" := FALSE;
            TmpRcpLineRec."Norm Agreement (Sales)" := FALSE;  //C034809
          END;
          IF TmpRcpLineRec."Price Agreement" THEN BEGIN
            IF (RcpLineRec."Trade Item" <> '') OR (RcpLineRec."Basic Item" <> '') OR (RcpLineRec."Item No." <> '') THEN
              TmpRcpLineRec.CalcItemSalesPriceAndDiscount(EstDestRec);  //C032335
          END ELSE BEGIN
            IF (EstOrigRec."Reference Date (Item)" <> EstDestRec."Reference Date (Item)") OR
               (EstOrigRec."Purch Discount Term Group 1" <> EstDestRec."Purch Discount Term Group 1") OR
               (EstOrigRec."Purch Discount Term Group 2" <> EstDestRec."Purch Discount Term Group 2") OR
               ((TmpRcpLineRec."Price Agreement" = FALSE) AND (RcpLineRec."Price Agreement" = TRUE))  //C032335
            THEN BEGIN
              OldRcpLineRec := TmpRcpLineRec;
              IF RcpLineRec."Trade Item" <> '' THEN
                TmpRcpLineRec.ValidateItem(ItemTypeOpt::"Trade Item", EstDestRec, FALSE)
              ELSE
                IF RcpLineRec."Basic Item" <> '' THEN
                  TmpRcpLineRec.ValidateItem(ItemTypeOpt::"Basic Item", EstDestRec, FALSE)
                ELSE
                  IF RcpLineRec."Item No." <> '' THEN
                    TmpRcpLineRec.ValidateItem(ItemTypeOpt::Item, EstDestRec, FALSE);
              NewRcpLineRec := TmpRcpLineRec;
              IF NewRcpLineRec."Unit of Measure" <> OldRcpLineRec."Unit of Measure" THEN BEGIN
                UnitOld := OldRcpLineRec."Unit of Measure";
                UnitNew := NewRcpLineRec."Unit of Measure";
                NewRcpLineRec."Unit of Measure" := UnitOld;
                OldRcpLineRec."Unit of Measure" := UnitNew;
                NewRcpLineRec.SetTempEstimate(EstDestRec);  //C038554
                TmpRcpLineRec.CheckItemUnitConversion(NewRcpLineRec, OldRcpLineRec);
                TmpRcpLineRec."Unit of Measure" := UnitOld;
                TmpRcpLineRec."Net Cost Price":= NewRcpLineRec."Net Cost Price";
                TmpRcpLineRec."Gross Price":= NewRcpLineRec."Gross Price";
              END;
            END ELSE BEGIN
              //C017681
              IF (EstOrigRec."Sales Discount Term Group 1" <> EstDestRec."Sales Discount Term Group 1") OR
                 (EstOrigRec."Sales Discount Term Group 2" <> EstDestRec."Sales Discount Term Group 2") OR
                 //C028409.sn
                 (EstOrigRec."Customer No." <> EstDestRec."Customer No.") OR
                 (EstOrigRec."Customer Disc. Group" <> EstDestRec."Customer Disc. Group") OR
                 //C028409.en
                 ((TmpRcpLineRec."Price Agreement (Sales)" = FALSE) AND (RcpLineRec."Price Agreement (Sales)" = TRUE))  //C032335
              THEN BEGIN
                IF (RcpLineRec."Trade Item" <> '') OR (RcpLineRec."Basic Item" <> '') OR (RcpLineRec."Item No." <> '') THEN
                  TmpRcpLineRec.CalcItemSalesPriceAndDiscount(EstDestRec);  //C032335
              END;
            END;
          END;
          IF EstRateRec.GET(TmpRcpLineRec."Estimate No.", TmpRcpLineRec."Rate Code") THEN BEGIN
            TmpRcpLineRec."Cost Rate" := EstRateRec."Cost Rate";
            TmpRcpLineRec."Sales Rate" := EstRateRec."Sales Rate";  //C040556
            TmpRcpLineRec."Rate Type" := EstRateRec."Rate Type";
            TmpRcpLineRec."Team Size" := EstRateRec."Team Size";
          END;
          TmpRcpLineRec.Description := RcpLineRec.Description;
          TmpRcpLineRec."Cost Object Price" := RcpLineRec."Cost Object Price";
          TmpRcpLineRec."Cost Component" := RcpLineRec."Cost Component";

          TmpRcpLineRec.INSERT;
          Status.UPDATE(6,ROUND(LineCount / NumLines * 10000,1));
          LineCount := LineCount + 1;
        UNTIL RcpLineRec.NEXT = 0;
      END;
    END;

    PROCEDURE CopySurcharge@13(EstFrom@11012000 : Code[20];SubEstFrom@11012001 : Code[20];EstTo@11012002 : Code[20];SubEstTo@11012003 : Code[20];EstPartTo@11012004 : Code[20]);
    VAR
      lvSubEstRec@1210190006 : Record 11072074;
    BEGIN
      LineCount := 0;
      Status.UPDATE(6,0);

      EstOrigRec.GET(EstFrom);
      IF TmpEstRec.GET(EstTo) THEN
        EstDestRec.COPY(TmpEstRec)
      ELSE
        EstDestRec.GET(EstTo);

      IF TmpSubEstRec.GET(EstTo, SubEstTo) THEN
        lvSubEstRec.COPY(TmpSubEstRec)
      ELSE
        lvSubEstRec.GET(EstTo, SubEstTo);

      ChrgRec.SETRANGE("Estimate No.", EstFrom);
      ChrgRec.SETRANGE("Sub-Estimate No.", SubEstFrom);
      IF ChrgRec.FINDSET THEN BEGIN
        Status.UPDATE(5,ChrgRec.TABLECAPTION);
        NumLines := ChrgRec.COUNT;
        REPEAT
          TmpChrgRec.COPY(ChrgRec);
          TmpChrgRec."Estimate No." := EstTo;
          TmpChrgRec."Sub-Estimate No." := SubEstTo;
          TmpChrgRec."Part Group"  := lvSubEstRec."Part Group";
          IF CopyType = CopyType::Part THEN
            TmpChrgRec.Part := EstPartTo;
          TmpChrgRec.INSERT;
          Status.UPDATE(6,ROUND(LineCount / NumLines * 10000,1));
          LineCount := LineCount + 1;
        UNTIL ChrgRec.NEXT = 0;
      END;
    END;

    PROCEDURE CopyText@1210190005(EstFrom@11012000 : Code[20];SubEstFrom@11012001 : Code[20];EstTo@11012002 : Code[20];SubEstTo@11012003 : Code[20];EstPartTo@11012004 : Code[20]);
    VAR
      lvSubEstRec@1210190006 : Record 11072074;
    BEGIN
      // **4PS MVOS M28717
      IF NOT TransferCommentLines THEN
        EXIT;

      LineCount := 0;
      Status.UPDATE(6,0);

      EstOrigRec.GET(EstFrom);
      IF TmpEstRec.GET(EstTo) THEN
        EstDestRec.COPY(TmpEstRec)
      ELSE
        EstDestRec.GET(EstTo);

      IF TmpSubEstRec.GET(EstTo, SubEstTo) THEN
        lvSubEstRec.COPY(TmpSubEstRec)
      ELSE
        lvSubEstRec.GET(EstTo, SubEstTo);

      TextRec.SETRANGE("Estimate No.", EstFrom);
      TextRec.SETRANGE("Sub-Estimate No.", SubEstFrom);
      IF TextRec.FINDSET THEN BEGIN
        Status.UPDATE(5,TextRec.TABLECAPTION);
        NumLines := TextRec.COUNT;
        REPEAT
          TmpTextRec.COPY(TextRec);
          TmpTextRec."Estimate No." := EstTo;
          TmpTextRec."Sub-Estimate No." := SubEstTo;
          IF CopyType = CopyType::Part THEN BEGIN
            TmpTextRec."Part Group"  := lvSubEstRec."Part Group";
            TmpTextRec.Part := EstPartTo;
          END;
          TmpTextRec.INSERT;
          Status.UPDATE(6,ROUND(LineCount / NumLines * 10000,1));
          LineCount := LineCount + 1;
        UNTIL TextRec.NEXT = 0;
      END;
    END;

    PROCEDURE CopyQuantitySheet@1210190001(EstFrom@11012000 : Code[20];SubEstFrom@11012001 : Code[20];EstTo@11012002 : Code[20];SubEstTo@11012003 : Code[20];EstPartTo@11012004 : Code[20]);
    VAR
      lvSubEstRec@1210190006 : Record 11072074;
    BEGIN
      LineCount := 0;
      Status.UPDATE(6,0);

      EstOrigRec.GET(EstFrom);
      IF TmpEstRec.GET(EstTo) THEN
        EstDestRec.COPY(TmpEstRec)
      ELSE
        EstDestRec.GET(EstTo);

      IF TmpSubEstRec.GET(EstTo, SubEstTo) THEN
        lvSubEstRec.COPY(TmpSubEstRec)
      ELSE
        lvSubEstRec.GET(EstTo, SubEstTo);

      QuanSheetRec.SETRANGE("Estimate No.", EstFrom);
      QuanSheetRec.SETRANGE("Sub-Estimate No.", SubEstFrom);
      IF QuanSheetRec.FINDSET THEN BEGIN
        Status.UPDATE(5,QuanSheetRec.TABLECAPTION);
        NumLines := QuanSheetRec.COUNT;
        REPEAT
          TmpQuanSheetRec.COPY(QuanSheetRec);
          TmpQuanSheetRec."Estimate No." := EstTo;
          TmpQuanSheetRec."Sub-Estimate No." := SubEstTo;
          IF CopyType = CopyType::Part THEN BEGIN
            TmpQuanSheetRec."Part Group"  := lvSubEstRec."Part Group";
            TmpQuanSheetRec.Part := EstPartTo;
          END;
          TmpQuanSheetRec.INSERT;
          Status.UPDATE(6,ROUND(LineCount / NumLines * 10000,1));
          LineCount := LineCount + 1;
        UNTIL QuanSheetRec.NEXT = 0;
      END;
    END;

    PROCEDURE CopyEstimateQuantitySheet@1100525003(EstFrom@1100525004 : Code[20];SubEstFrom@1100409000 : Code[20];EstTo@1100525002 : Code[20];SubEstTo@1100409001 : Code[20];PartTo@1100409003 : Code[20]);
    VAR
      lvSubEstRec@1100409002 : Record 11072074;
      EstSetup@1100528902 : Record 11012150;
      NoSeriesMgt@1100528901 : Codeunit 396;
      NewSheet@1100528900 : Code[20];
    BEGIN
      //DP00686
      IF NOT gCopyQuantitySheet THEN EXIT;

      LineCount := 0;
      Status.UPDATE(6,0);

      EstOrigRec.GET(EstFrom);
      IF TmpEstRec.GET(EstTo) THEN
        EstDestRec.COPY(TmpEstRec)
      ELSE
        EstDestRec.GET(EstTo);

      IF TmpSubEstRec.GET(EstTo, SubEstTo) THEN
        lvSubEstRec.COPY(TmpSubEstRec)
      ELSE
        lvSubEstRec.GET(EstTo, SubEstTo);

      QuantSheetHeader.SETRANGE("Estimate No.", EstFrom);
      QuantSheetHeader.SETRANGE("Sub-Estimate No.", SubEstFrom);
      IF QuantSheetHeader.FINDSET THEN BEGIN
        Status.UPDATE(5,QuantSheetHeader.TABLECAPTION);
        NumLines := QuantSheetHeader.COUNT;
        REPEAT
          EstSetup.GET;
          NewSheet := NoSeriesMgt.GetNextNo(EstSetup."Quantity Sheet Nos.",0D,TRUE);

          TmpQuantSheetHeader.COPY(QuantSheetHeader);
          TmpQuantSheetHeader."Estimate No." := EstTo;
          TmpQuantSheetHeader."Sub-Estimate No." := SubEstTo;
          IF CopyType = CopyType::Part THEN BEGIN
            TmpQuantSheetHeader."Part Group"  := lvSubEstRec."Part Group";
            TmpQuantSheetHeader.Part := PartTo;
          END;
          TmpQuantSheetHeader.Code := NewSheet;
          TmpQuantSheetHeader.INSERT;
          //
          QuantSheetLine.SETRANGE("Estimate No.", QuantSheetHeader."Estimate No.");
          QuantSheetLine.SETRANGE("Quantity Sheet", QuantSheetHeader.Code);
          IF QuantSheetLine.FINDSET THEN BEGIN
            REPEAT
              TmpQuantSheetLine.COPY(QuantSheetLine);
              TmpQuantSheetLine."Estimate No." := EstTo;
              TmpQuantSheetLine."Quantity Sheet" := NewSheet;
              TmpQuantSheetLine.INSERT;
            UNTIL QuantSheetLine.NEXT = 0;
          END;
          //
          QuantRelation.SETRANGE("Estimate No.", QuantSheetHeader."Estimate No.");
          QuantRelation.SETRANGE("Sub-Estimate No.", QuantSheetHeader."Sub-Estimate No.");
          IF CopyType = CopyType::Part THEN BEGIN  //C056965
            QuantRelation.SETRANGE("Part Group", QuantSheetHeader."Part Group");
            QuantRelation.SETRANGE(Part, QuantSheetHeader.Part);
          END;
          QuantRelation.SETRANGE("Quantity Sheet", QuantSheetHeader.Code);
          IF QuantRelation.FINDSET THEN BEGIN
            REPEAT
              TmpQuantRelation.COPY(QuantRelation);
              TmpQuantRelation."Estimate No." := EstTo;
              TmpQuantRelation."Sub-Estimate No." := SubEstTo;
              IF CopyType = CopyType::Part THEN BEGIN
                TmpQuantRelation."Part Group"  := lvSubEstRec."Part Group";
                TmpQuantRelation.Part := PartTo;
              END;
              TmpQuantRelation."Quantity Sheet" := NewSheet;
              TmpQuantRelation.INSERT;
            UNTIL QuantRelation.NEXT = 0;
          END;
          //
          Status.UPDATE(6,ROUND(LineCount / NumLines * 10000,1));
          LineCount := LineCount + 1;
        UNTIL QuantSheetHeader.NEXT = 0;
      END;

      LineCount := 0;
      Status.UPDATE(6,0);
    END;

    PROCEDURE CopyQuantityModel@1210190004(EstFrom@11012000 : Code[20];SubEstFrom@11012001 : Code[20];EstTo@11012002 : Code[20];SubEstTo@11012003 : Code[20];EstPartTo@11012004 : Code[20]);
    VAR
      lvSubEstRec@1210190006 : Record 11072074;
      EstimateModel@1210190001 : Record 11012196;
      TmpEstimateModel@1210190000 : TEMPORARY Record 11012196;
    BEGIN
      EstOrigRec.GET(EstFrom);
      IF TmpEstRec.GET(EstTo) THEN
        EstDestRec.COPY(TmpEstRec)
      ELSE
        EstDestRec.GET(EstTo);

      IF TmpSubEstRec.GET(EstTo, SubEstTo) THEN
        lvSubEstRec.COPY(TmpSubEstRec)
      ELSE
        lvSubEstRec.GET(EstTo, SubEstTo);

      TmpEstModelRec.SETRANGE("Estimate No.", EstTo);
      IF TmpEstModelRec.FINDSET THEN BEGIN
        REPEAT
          TmpEstimateModel := TmpEstModelRec;
          TmpEstimateModel.INSERT;
        UNTIL TmpEstModelRec.NEXT = 0;
      END ELSE BEGIN
        EstimateModel.SETRANGE("Estimate No.", EstTo);
        IF EstimateModel.FINDSET THEN
          REPEAT
            TmpEstimateModel := EstimateModel;
            TmpEstimateModel.INSERT;
          UNTIL EstimateModel.NEXT = 0;
      END;

      IF TmpEstimateModel.FINDSET THEN BEGIN
        REPEAT
          LineCount := 0;
          Status.UPDATE(6,0);

          QuanModelRec.SETRANGE("Estimate No.", EstFrom);
          QuanModelRec.SETRANGE("Sub-Estimate No.", SubEstFrom);
          QuanModelRec.SETRANGE(Model, TmpEstimateModel.Model);
          IF QuanModelRec.FINDSET THEN BEGIN
            Status.UPDATE(5,QuanModelRec.TABLECAPTION);
            NumLines := QuanModelRec.COUNT;
            REPEAT
              TmpQuanModelRec.COPY(QuanModelRec);
              TmpQuanModelRec."Estimate No." := EstTo;
              TmpQuanModelRec."Sub-Estimate No." := SubEstTo;
              TmpQuanModelRec."Part Group"  := lvSubEstRec."Part Group";
              IF CopyType = CopyType::Part THEN
                TmpQuanModelRec.Part := EstPartTo;
              TmpQuanModelRec.INSERT;
              Status.UPDATE(6,ROUND(LineCount / NumLines * 10000,1));
              LineCount := LineCount + 1;
            UNTIL QuanModelRec.NEXT = 0;
          END;
        UNTIL TmpEstimateModel.NEXT = 0;
      END;
    END;

    PROCEDURE CopyCode@1210190002(EstFrom@11012000 : Code[20];SubEstFrom@11012001 : Code[20];EstTo@11012002 : Code[20];SubEstTo@11012003 : Code[20];EstPartTo@11012004 : Code[20]);
    VAR
      lvSubEstRec@1210190006 : Record 11072074;
    BEGIN
      LineCount := 0;
      Status.UPDATE(6,0);

      EstOrigRec.GET(EstFrom);
      IF TmpEstRec.GET(EstTo) THEN
        EstDestRec.COPY(TmpEstRec)
      ELSE
        EstDestRec.GET(EstTo);

      IF TmpSubEstRec.GET(EstTo, SubEstTo) THEN
        lvSubEstRec.COPY(TmpSubEstRec)
      ELSE
        lvSubEstRec.GET(EstTo, SubEstTo);

      EstCodeRec.SETRANGE("Estimate No.", EstFrom);
      EstCodeRec.SETRANGE("Sub-Estimate No.", SubEstFrom);
      IF EstCodeRec.FINDSET THEN BEGIN
        Status.UPDATE(5,EstCodeRec.TABLECAPTION);
        NumLines := EstCodeRec.COUNT;
        REPEAT
          TmpEstCodeRec.COPY(EstCodeRec);
          TmpEstCodeRec."Estimate No." := EstTo;
          TmpEstCodeRec."Sub-Estimate No." := SubEstTo;
          TmpEstCodeRec."Part Group"  := lvSubEstRec."Part Group";
          IF CopyType = CopyType::Part THEN
            TmpEstCodeRec.Part := EstPartTo;
          TmpEstCodeRec.INSERT;
          Status.UPDATE(6,ROUND(LineCount / NumLines * 10000,1));
          LineCount := LineCount + 1;
        UNTIL EstCodeRec.NEXT = 0;
      END;
    END;

    PROCEDURE CopyConfigData@1100485001(EstFrom@11012000 : Code[20];SubEstFrom@11012001 : Code[20];EstTo@11012002 : Code[20];SubEstTo@11012003 : Code[20];EstPartTo@11012004 : Code[20]);
    VAR
      lvSubEstRec@1210190006 : Record 11072074;
    BEGIN
      LineCount := 0;
      Status.UPDATE(6,0);

      EstOrigRec.GET(EstFrom);
      IF TmpEstRec.GET(EstTo) THEN
        EstDestRec.COPY(TmpEstRec)
      ELSE
        EstDestRec.GET(EstTo);

      IF TmpSubEstRec.GET(EstTo, SubEstTo) THEN
        lvSubEstRec.COPY(TmpSubEstRec)
      ELSE
        lvSubEstRec.GET(EstTo, SubEstTo);

      ConfigPartRec.SETRANGE("Estimate No.", EstFrom);
      ConfigPartRec.SETRANGE("Sub-Estimate No.", SubEstFrom);
      IF ConfigPartRec.FINDSET THEN BEGIN
        Status.UPDATE(5,ConfigPartRec.TABLECAPTION);
        NumLines := ConfigPartRec.COUNT;
        REPEAT
          TmpConfigPartRec.COPY(ConfigPartRec);
          TmpConfigPartRec."Estimate No." := EstTo;
          TmpConfigPartRec."Sub-Estimate No." := SubEstTo;
          TmpConfigPartRec."Part Group"  := lvSubEstRec."Part Group";
          IF CopyType = CopyType::Part THEN
            TmpConfigPartRec."Part (Configurator)":= EstPartTo;
          TmpConfigPartRec.INSERT;
          Status.UPDATE(6,ROUND(LineCount / NumLines * 10000,1));
          LineCount := LineCount + 1;
        UNTIL ConfigPartRec.NEXT = 0;
      END;

      ConfigPartFeatRec.SETRANGE("Estimate No.", EstFrom);
      ConfigPartFeatRec.SETRANGE("Sub-Estimate No.", SubEstFrom);
      IF ConfigPartFeatRec.FINDSET THEN BEGIN
        Status.UPDATE(5,ConfigPartFeatRec.TABLECAPTION);
        NumLines := ConfigPartFeatRec.COUNT;
        REPEAT
          TmpConfigPartFeatRec.COPY(ConfigPartFeatRec);
          TmpConfigPartFeatRec."Estimate No." := EstTo;
          TmpConfigPartFeatRec."Sub-Estimate No." := SubEstTo;
          TmpConfigPartFeatRec."Part Group"  := lvSubEstRec."Part Group";
          IF CopyType = CopyType::Part THEN
            TmpConfigPartFeatRec."Part (Configurator)":= EstPartTo;
          TmpConfigPartFeatRec.INSERT;
          Status.UPDATE(6,ROUND(LineCount / NumLines * 10000,1));
          LineCount := LineCount + 1;
        UNTIL ConfigPartFeatRec.NEXT = 0;
      END;

      ConfigRowQuanRec.SETRANGE("Estimate No.", EstFrom);
      ConfigRowQuanRec.SETRANGE("Sub-Estimate No.", SubEstFrom);
      IF ConfigRowQuanRec.FINDSET THEN BEGIN
        Status.UPDATE(5,ConfigRowQuanRec.TABLECAPTION);
        NumLines := ConfigRowQuanRec.COUNT;
        REPEAT
          TmpConfigRowQuanRec.COPY(ConfigRowQuanRec);
          TmpConfigRowQuanRec."Estimate No." := EstTo;
          TmpConfigRowQuanRec."Sub-Estimate No." := SubEstTo;
          TmpConfigRowQuanRec."Part Group"  := lvSubEstRec."Part Group";
          IF CopyType = CopyType::Part THEN
            TmpConfigRowQuanRec."Part (Configurator)":= EstPartTo;
          TmpConfigRowQuanRec.INSERT;
          Status.UPDATE(6,ROUND(LineCount / NumLines * 10000,1));
          LineCount := LineCount + 1;
        UNTIL ConfigRowQuanRec.NEXT = 0;
      END;
    END;

    PROCEDURE CopyParts@7(EstFrom@11012000 : Code[20];SubEstFrom@11012001 : Code[20];EstTo@11012002 : Code[20];SubEstTo@11012003 : Code[20];EstGroupFrom@11012004 : Code[20];EstPartFrom@11012005 : Code[20];EstPartTo@11012006 : Code[20];SubEstChapter@11012007 : Code[20];EstPartToTxt@11012008 : Text[50];EstPartToTxt2@1100409000 : Text[50];SkipLines@1100485000 : Boolean;CopyPriceAgreement@1210190000 : Boolean);
    VAR
      lvSubEstRec@11012009 : Record 11072074;
    BEGIN
      lvSubEstRec.GET(EstTo, SubEstTo);

      FormatMgt.CreateEstPart(EstTo, SubEstTo, lvSubEstRec."Part Group", EstPartTo, Chapter, Paragraph, Level, TRUE);
      CopyPart(EstFrom, SubEstFrom, EstTo, SubEstTo, EstPartTo, Chapter, Paragraph, EstPartToTxt, EstPartToTxt2);  //DP00686

      IF NOT SkipLines THEN BEGIN
        EstLineRec.SETRANGE(Part, EstPartRec.Part);
        CopyEstLine(EstFrom, SubEstFrom, EstTo, SubEstTo, SubEstChapter, SubEstParagraph, EstPartTo, Chapter, Paragraph,
          CopyPriceAgreement);

        RcpLineRec.SETRANGE(Part, EstPartRec.Part);
        CopyRecipeLine(EstFrom, SubEstFrom, EstTo, SubEstTo, EstPartTo,
          CopyPriceAgreement);

        TextRec.SETRANGE(Part, EstPartRec.Part);
        CopyText(EstFrom, SubEstFrom, EstTo, SubEstTo, EstPartTo);

        ChrgRec.SETRANGE(Part, EstPartRec.Part);
        CopySurcharge(EstFrom, SubEstFrom, EstTo, SubEstTo, EstPartTo);

        QuanSheetRec.SETRANGE(Part, EstPartRec.Part);
        CopyQuantitySheet(EstFrom, SubEstFrom, EstTo, SubEstTo, EstPartTo);

        //DP00686.sn
        QuantSheetHeader.SETRANGE(Part, EstPartRec.Part);
        CopyEstimateQuantitySheet(EstFrom, SubEstFrom, EstTo, SubEstTo, EstPartTo);
        //DP00686.en

        QuanModelRec.SETRANGE(Part, EstPartRec.Part);
        CopyQuantityModel(EstFrom, SubEstFrom, EstTo, SubEstTo, EstPartTo);

        EstCodeRec.SETRANGE(Part, EstPartRec.Part);
        CopyCode(EstFrom, SubEstFrom, EstTo, SubEstTo, EstPartTo);

        ConfigPartRec.SETRANGE("Part (Configurator)", EstPartRec.Part);
        ConfigPartFeatRec.SETRANGE("Part (Configurator)", EstPartRec.Part);
        ConfigRowQuanRec.SETRANGE("Part (Configurator)", EstPartRec.Part);
        CopyConfigData(EstFrom, SubEstFrom, EstTo, SubEstTo, EstPartTo);
      END;
    END;

    PROCEDURE CopySubEstimates@9(EstFrom@11012000 : Code[20];SubEstFrom@11012001 : Code[20];EstTo@11012002 : Code[20];SubEstTo@11012003 : Code[20];SubEstChapter@11012004 : Code[20];SubEstParagraph@1100485000 : Code[20];SkipLines@1100485001 : Boolean;CopyPriceAgreement@1210190000 : Boolean);
    BEGIN
      IF CopyEstModel = TRUE THEN EXIT;

      TmpEstPartFrom.SETRANGE("Estimate No.",EstFrom);
      TmpEstPartFrom.SETRANGE("Sub-Estimate No.",SubEstFrom);
      IF TmpEstPartFrom.FINDSET THEN BEGIN
        REPEAT
          EstPartRec := TmpEstPartFrom;
          CopyPart(EstFrom,SubEstFrom,EstTo,SubEstTo,'','','','','');  //DP00686
        UNTIL TmpEstPartFrom.NEXT =0;
      END ELSE BEGIN
      //
        EstPartRec.SETRANGE("Sub-Estimate No.",SubEstFrom);
        IF EstPartRec.FINDSET THEN BEGIN
          REPEAT
            CopyPart(EstFrom,SubEstFrom,EstTo,SubEstTo,'','','','','');  //DP00686
          UNTIL EstPartRec.NEXT =0;
        END;
      END;

      IF NOT SkipLines THEN BEGIN
        CopyEstLine(EstFrom,SubEstFrom,EstTo,SubEstTo,SubEstChapter,SubEstParagraph,'','','',
          CopyPriceAgreement);
        CopyRecipeLine(EstFrom,SubEstFrom,EstTo,SubEstTo,'',
          CopyPriceAgreement);
        CopyText(EstFrom,SubEstFrom,EstTo,SubEstTo,'');
        CopySurcharge(EstFrom,SubEstFrom,EstTo,SubEstTo,'');
        CopyQuantitySheet(EstFrom,SubEstFrom,EstTo,SubEstTo,'');
        CopyEstimateQuantitySheet(EstFrom,SubEstFrom,EstTo,SubEstTo,'');  //DP00686
        CopyQuantityModel(EstFrom,SubEstFrom,EstTo,SubEstTo,'');
        CopyCode(EstFrom,SubEstFrom,EstTo,SubEstTo,'');
        CopyConfigData(EstFrom,SubEstFrom,EstTo,SubEstTo,'');
      END;
    END;

    PROCEDURE CopyRecipe@10();
    BEGIN
      //wordt op page 1012213 geregeld
    END;

    PROCEDURE CopySummarySheet@15(EstFrom@11012000 : Code[20];SubEstFrom@1210190000 : Code[20];SheetFrom@11012001 : Code[20];EstTo@11012002 : Code[20];PageTo@11012003 : Code[20];PageToTxt@11012004 : Text[50];SelectType@1100485000 : Integer);
    BEGIN
      IF NOT StatusBln THEN BEGIN
        OpenDialog;
        Status.UPDATE(1, EstFrom);
        Status.UPDATE(2, EstTo);
        Status.UPDATE(5, SumHeaderRec.TABLECAPTION);
        Status.UPDATE(6,0);
        ActionLvl := 4;
      END;

      //SelectType disabled; set filter on SumHeaderRec

      SumHeaderRec.SETRANGE("Estimate No.", EstFrom);
      IF SubEstFrom <> '' THEN
        SumHeaderRec.SETFILTER("Sub-Estimate No.", '%1|%2', '', SubEstFrom);
      IF SheetFrom <> '' THEN
        SumHeaderRec.SETFILTER(Summary, '%1', SheetFrom);
      IF SumHeaderRec.FINDSET THEN BEGIN
        REPEAT
          TmpSumHeaderRec.COPY(SumHeaderRec);
          TmpSumHeaderRec."Estimate No." := EstTo;
          IF PageTo <> '' THEN BEGIN
            IF STRLEN(PageTo) > MAXSTRLEN(TmpSumHeaderRec.Summary) THEN
              ERROR(Text016, PageTo, STRLEN(PageTo) - MAXSTRLEN(TmpSumHeaderRec.Summary));
            TmpSumHeaderRec.Summary := PageTo;
          END;
          IF PageToTxt <> '' THEN
            TmpSumHeaderRec.Description := PageToTxt;
          TmpSumHeaderRec."Excel Sheet" := '';
          TmpSumHeaderRec.Fixed := FALSE;
          TmpSumHeaderRec.INSERT;

          SumLineRec.SETRANGE("Estimate No.", SumHeaderRec."Estimate No.");
          SumLineRec.SETFILTER(Summary, SumHeaderRec.Summary);
          IF SumLineRec.FINDSET THEN BEGIN
            REPEAT
              TmpSumLineRec.COPY(SumLineRec);
              TmpSumLineRec."Estimate No." := TmpSumHeaderRec."Estimate No.";
              TmpSumLineRec.Summary := TmpSumHeaderRec.Summary;
              TmpSumLineRec.INSERT;
            UNTIL SumLineRec.NEXT = 0;
          END;

          SumExcelRec.SETRANGE("Estimate No.", SumHeaderRec."Estimate No.");
          SumExcelRec.SETFILTER(Summary, SumHeaderRec.Summary);
          IF SumExcelRec.FINDSET THEN BEGIN
            REPEAT
              TmpSumExcelRec.COPY(SumExcelRec);
              TmpSumExcelRec."Estimate No." := TmpSumHeaderRec."Estimate No.";
              TmpSumExcelRec.Summary := TmpSumHeaderRec.Summary;
              TmpSumExcelRec.INSERT;
            UNTIL SumExcelRec.NEXT = 0;
          END;
        UNTIL SumHeaderRec.NEXT = 0;
      END;

      IF ActionLvl = 4 THEN BEGIN
        UpdateFromTmp;
        Status.CLOSE;  //close window if function called from outside codeunit: check summary present from estimate card
        StatusBln := FALSE;
      END;
    END;

    PROCEDURE CopyModel@1210190003(lvAction@1210190000 : Integer;lvSubEstRec@1210190001 : Record 11072074;lvEstPartRec@1210190002 : Record 11072073);
    BEGIN
      //wordt aangeroepen vanaf page 1012215 tbv initiatie functies CopySubEst(imates) en UpdateFromTmp.

      IF NOT StatusBln THEN
        OpenDialog;

      IF lvAction = DATABASE::"Sub-Estimate" THEN BEGIN
        SubEstRec := lvSubEstRec;
      END;

      IF lvAction = DATABASE::"Estimate Part" THEN BEGIN
        EstPartRec := lvEstPartRec;
        CopyType := CopyType::Part;
      END;
    END;

    PROCEDURE OpenDialog@12();
    BEGIN
      Status.OPEN(
         Text010 +
         Text011 +
         Text012 +
         Text013 +
         Text014);

      StatusBln := TRUE;
    END;

    PROCEDURE CheckInputData@8(EstFrom@11012000 : Code[20];SubEstFrom@11012001 : Code[20];EstTo@11012002 : Code[20];SubEstTo@11012003 : Code[20]);
    BEGIN
      IF EstFrom = '' THEN
        ERROR(Text006);

      IF SubEstFrom = '' THEN
        ERROR(Text007);

      IF EstTo = '' THEN
        ERROR(Text008);

      IF SubEstTo = '' THEN
        ERROR(Text009);
    END;

    PROCEDURE CheckFormat@16(lvAction@1100485000 : Integer);
    VAR
      EstSetupRec@11012000 : Record 11012150;
      lvFrmt@1100485001 : Code[20];
    BEGIN
      x := 0;
      sp1 := 0;
      sp2 := 0;

      EstSetupRec.GET();
      IF lvAction = 1 THEN BEGIN
        EstSetupRec.TESTFIELD("Sub-Estimate Format");
        lp := STRLEN(EstSetupRec."Sub-Estimate Format");
        lvFrmt := EstSetupRec."Sub-Estimate Format";
      END;
      IF lvAction = 2 THEN BEGIN
        EstSetupRec.TESTFIELD("Part Format");
        lp := STRLEN(EstSetupRec."Part Format");
        lvFrmt := EstSetupRec."Part Format";
      END;

      REPEAT
        x := x + 1;
        IF COPYSTR(lvFrmt,x,1) = '.' THEN BEGIN
          IF sp1 = 0 THEN
            sp1 := x
          ELSE
            IF sp2 = 0 THEN
              sp2 :=x
            ELSE
              ERROR(Text015);
        END;
      UNTIL x = lp;
    END;

    PROCEDURE UpdateFromTmp@1210190000();
    VAR
      lvPart@1210190001 : Text[100];
      lvRecipe@1210190000 : Text[100];
      SkipUpdate@1210190002 : Boolean;
      lvSurchLine@1100485000 : Integer;
    BEGIN
      SkipUpdate := FALSE;

      Status.UPDATE(6,0);
      Status.UPDATE(5,TmpEstRec.TABLECAPTION);
      TmpEstRec.RESET;
      IF TmpEstRec.FIND('-') THEN BEGIN
        REPEAT
          EstRec.COPY(TmpEstRec);
          EstRec."Service Location No." := '';
          EstRec."Service Contract No." := '';
          EstRec."Service Order No." := '';  //C046486
          EstRec."Project No." := '' ;
          IF NOT ElemRec.GET(EstRec.Element) THEN
            EstRec.Element := '' ;
          EvaluateProjPlanActCode(EstRec."Project Planning Activity Code");
          IF NOT EstRec.INSERT THEN SkipUpdate := TRUE;
        UNTIL TmpEstRec.NEXT = 0;
      END;

      Status.UPDATE(5,TmpEstimateCurrExchangeRate.TABLECAPTION);
      TmpEstimateCurrExchangeRate.RESET;
      IF TmpEstimateCurrExchangeRate.FIND('-') THEN BEGIN
        REPEAT
          EstimateCurrExchangeRate.COPY(TmpEstimateCurrExchangeRate);
          IF NOT EstimateCurrExchangeRate.INSERT THEN SkipUpdate := TRUE;
        UNTIL TmpEstimateCurrExchangeRate.NEXT = 0;
      END;

      Status.UPDATE(5,TmpEstRateRec.TABLECAPTION);
      TmpEstRateRec.RESET;
      IF TmpEstRateRec.FIND('-') THEN BEGIN
        REPEAT
          EstRateRec.COPY(TmpEstRateRec);
          IF NOT EstRateRec.INSERT THEN SkipUpdate := TRUE;
        UNTIL TmpEstRateRec.NEXT = 0;
      END;

      Status.UPDATE(5,TmpDateRateRec.TABLECAPTION);
      TmpDateRateRec.RESET;
      IF TmpDateRateRec.FIND('-') THEN BEGIN
        REPEAT
          DateRateRec.COPY(TmpDateRateRec);
          IF NOT DateRateRec.INSERT THEN SkipUpdate := TRUE;
        UNTIL TmpDateRateRec.NEXT = 0;
      END;

      Status.UPDATE(5,TmpEstRespRec.TABLECAPTION);
      TmpEstRespRec.RESET;
      IF TmpEstRespRec.FIND('-') THEN BEGIN
        REPEAT
           EstRespRec.COPY(TmpEstRespRec);
           IF NOT EstRespRec.INSERT THEN SkipUpdate := TRUE;
        UNTIL TmpEstRespRec.NEXT = 0;
      END;

      Status.UPDATE(5,TmpEstPrincRec.TABLECAPTION);
      TmpEstPrincRec.RESET;
      IF TmpEstPrincRec.FIND('-') THEN BEGIN
        REPEAT
          EstPrincRec.COPY(TmpEstPrincRec);
          IF NOT EstPrincRec.INSERT THEN SkipUpdate := TRUE;
        UNTIL TmpEstPrincRec.NEXT = 0;
      END;

      Status.UPDATE(5,TmpEstCommentRec.TABLECAPTION);
      TmpEstCommentRec.RESET;
      IF TmpEstCommentRec.FIND('-') THEN BEGIN
        REPEAT
          EstCommentRec.COPY(TmpEstCommentRec);
          IF NOT EstCommentRec.INSERT THEN SkipUpdate := TRUE;
        UNTIL TmpEstCommentRec.NEXT = 0;
      END;

      Status.UPDATE(5,TmpConfigFeatureRec.TABLECAPTION);
      TmpConfigFeatureRec.RESET;
      IF TmpConfigFeatureRec.FIND('-') THEN BEGIN
        REPEAT
          ConfigFeatureRec.COPY(TmpConfigFeatureRec);
          IF NOT ConfigFeatureRec.INSERT THEN SkipUpdate := TRUE;
        UNTIL TmpConfigFeatureRec.NEXT = 0;
      END;

      Status.UPDATE(5,TmpConfigLevelRec.TABLECAPTION);
      TmpConfigLevelRec.RESET;
      IF TmpConfigLevelRec.FIND('-') THEN BEGIN
        REPEAT
          ConfigLevelRec.COPY(TmpConfigLevelRec);
          IF NOT ConfigLevelRec.INSERT THEN SkipUpdate := TRUE;
        UNTIL TmpConfigLevelRec.NEXT = 0;
      END;

      Status.UPDATE(5,TmpConfigPartRec.TABLECAPTION);
      TmpConfigPartRec.RESET;
      IF TmpConfigPartRec.FIND('-') THEN BEGIN
        REPEAT
          ConfigPartRec.COPY(TmpConfigPartRec);
          IF NOT ConfigPartRec.INSERT THEN SkipUpdate := TRUE;
        UNTIL TmpConfigPartRec.NEXT = 0;
      END;

      Status.UPDATE(5,TmpConfigPartFeatRec.TABLECAPTION);
      TmpConfigPartFeatRec.RESET;
      IF TmpConfigPartFeatRec.FIND('-') THEN BEGIN
        REPEAT
          ConfigPartFeatRec.COPY(TmpConfigPartFeatRec);
          IF NOT ConfigPartFeatRec.INSERT THEN SkipUpdate := TRUE;
        UNTIL TmpConfigPartFeatRec.NEXT = 0;
      END;

      Status.UPDATE(5,TmpConfigRowQuanRec.TABLECAPTION);
      TmpConfigRowQuanRec.RESET;
      IF TmpConfigRowQuanRec.FIND('-') THEN BEGIN
        REPEAT
          ConfigRowQuanRec.COPY(TmpConfigRowQuanRec);
          IF NOT ConfigRowQuanRec.INSERT THEN SkipUpdate := TRUE;
        UNTIL TmpConfigRowQuanRec.NEXT = 0;
      END;

      Status.UPDATE(5,TmpEstModelRec.TABLECAPTION);
      TmpEstModelRec.RESET;
      IF TmpEstModelRec.FIND('-') THEN BEGIN
        REPEAT
          EstModelRec.COPY(TmpEstModelRec);
          IF NOT EstModelRec.INSERT THEN SkipUpdate := TRUE;
        UNTIL TmpEstModelRec.NEXT = 0;
      END;

      //DP02089.sn
      Status.UPDATE(5,TmpSalesPricebyEstimate.TABLECAPTION);
      TmpSalesPricebyEstimate.RESET;
      IF TmpSalesPricebyEstimate.FIND('-') THEN BEGIN
        REPEAT
          SalesPricebyEstimate.COPY(TmpSalesPricebyEstimate);
          IF NOT SalesPricebyEstimate.INSERT THEN SkipUpdate := TRUE;
        UNTIL TmpSalesPricebyEstimate.NEXT = 0;
      END;
      //DP02089.en

      Status.UPDATE(5,TmpSubEstRec.TABLECAPTION);
      TmpSubEstRec.RESET;
      IF TmpSubEstRec.FIND('-') THEN BEGIN
        REPEAT
          SubEstRec.COPY(TmpSubEstRec);
          SubEstRec."Service Location No." := '';
          SubEstRec."Service Order No." := '';  //C046486
          SubEstRec."Project No." := '' ;
          IF NOT ElemRec.GET(SubEstRec.Element) THEN
            SubEstRec.Element := '' ;
          EvaluateProjPlanActCode(SubEstRec."Project Planning Activity Code");
          IF NOT SubEstRec.INSERT THEN BEGIN
            SkipUpdate := TRUE;
            IF SubEstRec.GET(TmpSubEstRec."Estimate No.",TmpSubEstRec."Sub-Estimate No.") THEN BEGIN
              SubEstRec.Description := TmpSubEstRec.Description;
              SubEstRec.MODIFY;
            END;
          END;
        UNTIL TmpSubEstRec.NEXT = 0;
      END;

      //DP02088.sn
      Status.UPDATE(5,TmpPlotbySubEstimate.TABLECAPTION);
      TmpPlotbySubEstimate.RESET;
      IF TmpPlotbySubEstimate.FIND('-') THEN BEGIN
        REPEAT
          PlotbySubEstimate.COPY(TmpPlotbySubEstimate);
          IF NOT PlotbySubEstimate.INSERT THEN SkipUpdate := TRUE;
        UNTIL TmpPlotbySubEstimate.NEXT = 0;
      END;
      //DP02088.en

      Status.UPDATE(5,TmpEstPartRec.TABLECAPTION);
      TmpEstPartRec.RESET;
      IF TmpEstPartRec.FIND('-') THEN BEGIN
        REPEAT
          EstPartRec.COPY(TmpEstPartRec);
          EstPartRec."Project No." := '' ;
          IF NOT ElemRec.GET(EstPartRec.Element) THEN
            EstPartRec.Element := '' ;
          EvaluateProjPlanActCode(EstPartRec."Project Planning Activity Code");
          IF NOT EstPartRec.INSERT THEN BEGIN
            SkipUpdate := TRUE;
            IF EstPartRec.GET(
              TmpEstPartRec."Estimate No.",TmpEstPartRec."Sub-Estimate No.", TmpEstPartRec."Part Group",TmpEstPartRec.Part)
            THEN BEGIN
              EstPartRec."Adjustment Factor Hours" := TmpEstPartRec."Adjustment Factor Hours";
              EstPartRec."Adjustment Factor Material" := TmpEstPartRec."Adjustment Factor Material";
              EstPartRec."Adjustment Factor Subcontr." := TmpEstPartRec."Adjustment Factor Subcontr.";
              EstPartRec."Adjustment Factor Plant" := TmpEstPartRec."Adjustment Factor Plant";
              EstPartRec."Adjustment Factor Sundry" := TmpEstPartRec."Adjustment Factor Sundry"; //DP00381
              EstPartRec."Adj. Factor Hours (Sales)" := TmpEstPartRec."Adj. Factor Hours (Sales)";  //DP00555
              EstPartRec.Description := TmpEstPartRec.Description;
              EstPartRec.Quantity := TmpEstPartRec.Quantity;  //disable InitValue=1 if Quantity=0
              EstPartRec."Excel Estimate Template" := TmpEstPartRec."Excel Estimate Template";
              EstPartRec.MODIFY;
            END;
          END;
        UNTIL TmpEstPartRec.NEXT = 0;
      END;

      Status.UPDATE(5,TmpPartTotalRec.TABLECAPTION);  //DP00381
      TmpPartTotalRec.RESET;
      IF TmpPartTotalRec.FIND('-') THEN BEGIN
        REPEAT
          PartTotalRec.COPY(TmpPartTotalRec);
          IF NOT PartTotalRec.INSERT THEN SkipUpdate := TRUE;
        UNTIL TmpPartTotalRec.NEXT = 0;
      END;

      Status.UPDATE(5,TmpEstLineRec.TABLECAPTION);
      TmpEstLineRec.RESET;
      IF TmpEstLineRec.FIND('-') THEN BEGIN
        REPEAT
          EstLineRec.COPY(TmpEstLineRec);
          EstLineRec."Service Order No." := '';  //C046486
          EstLineRec."Project No." := '' ;
          IF NOT ElemRec.GET(EstLineRec.Element) THEN
            EstLineRec.Element := '' ;
          EvaluateProjPlanActCode(EstLineRec."Project Planning Activity Code");
          EstLineRec."Ask for Quote" := FALSE;
          EstLineRec."Purchase Route Reference" := '';
          EstLineRec."Assembly Project No." := '';
          IF NOT EstLineRec.INSERT THEN SkipUpdate := TRUE;
        UNTIL TmpEstLineRec.NEXT = 0;
      END;

      Status.UPDATE(5,TmpLineTotalRec.TABLECAPTION);  //DP00381
      TmpLineTotalRec.RESET;
      IF TmpLineTotalRec.FIND('-') THEN BEGIN
        REPEAT
          LineTotalRec.COPY(TmpLineTotalRec);
          IF NOT LineTotalRec.INSERT THEN SkipUpdate := TRUE;
        UNTIL TmpLineTotalRec.NEXT = 0;
      END;

      Status.UPDATE(5,TmpRcpLineRec.TABLECAPTION);
      TmpRcpLineRec.RESET;
      IF TmpRcpLineRec.FIND('-') THEN BEGIN
        REPEAT
          RcpLineRec.COPY(TmpRcpLineRec);
          RcpLineRec."Project No." := '' ;
          IF NOT ElemRec.GET(RcpLineRec.Element) THEN
            RcpLineRec.Element := '' ;
          EvaluateProjPlanActCode(RcpLineRec."Project Planning Activity Code");
          RcpLineRec."Ask for Quote" := FALSE;
          RcpLineRec."Purchase Route Reference" := '';
          RcpLineRec.CalculateTotals;
          IF NOT RcpLineRec.INSERT THEN SkipUpdate := TRUE;
        UNTIL TmpRcpLineRec.NEXT = 0;
      END;

      Status.UPDATE(5,TmpTextRec.TABLECAPTION);
      TmpTextRec.RESET;
      IF TmpTextRec.FIND ('-') THEN BEGIN
        REPEAT
          TextRec.COPY(TmpTextRec);
          IF NOT TextRec.INSERT THEN SkipUpdate := TRUE;
        UNTIL TmpTextRec.NEXT = 0;
      END;

      Status.UPDATE(5,TmpChrgRec.TABLECAPTION);
      TmpChrgRec.RESET;
      IF TmpChrgRec.FIND ('-') THEN BEGIN
        REPEAT
          ChrgRec.COPY(TmpChrgRec);
          IF NOT ChrgRec.INSERT THEN SkipUpdate := TRUE;
        UNTIL TmpChrgRec.NEXT = 0;
      END;

      Status.UPDATE(5,TmpQuanSheetRec.TABLECAPTION);
      TmpQuanSheetRec.RESET;
      IF TmpQuanSheetRec.FIND ('-') THEN BEGIN
        REPEAT
          QuanSheetRec.COPY(TmpQuanSheetRec);
          IF NOT QuanSheetRec.INSERT THEN SkipUpdate := TRUE;
        UNTIL TmpQuanSheetRec.NEXT = 0;
      END;

      Status.UPDATE(5,TmpQuanModelRec.TABLECAPTION);
      TmpQuanModelRec.RESET;
      IF TmpQuanModelRec.FIND ('-') THEN BEGIN
        REPEAT
          QuanModelRec.COPY(TmpQuanModelRec);
          IF NOT QuanModelRec.INSERT THEN
            SkipUpdate := TRUE
          ELSE BEGIN
            EstLineRec.GET(
              QuanModelRec."Estimate No.", QuanModelRec."Sub-Estimate No.",
              QuanModelRec."Part Group", QuanModelRec.Part, QuanModelRec."Estimate Line");
            EstLineRec.VALIDATE(Quantity, QuanModelRec.DetermineTotalQuan);
            EstLineRec.MODIFY;
            EstLineRec.CheckEstimateCharge;
          END;
        UNTIL TmpQuanModelRec.NEXT = 0;
      END;

      Status.UPDATE(5,TmpEstCodeRec.TABLECAPTION);
      TmpEstCodeRec.RESET;
      IF TmpEstCodeRec.FIND ('-') THEN BEGIN
        REPEAT
          EstCodeRec.COPY(TmpEstCodeRec);
          IF NOT EstCodeRec.INSERT THEN SkipUpdate := TRUE;
        UNTIL TmpEstCodeRec.NEXT = 0;
      END;

      IF (EstOrigRec."Reference Date (Item)" <> EstDestRec."Reference Date (Item)") OR
         (EstOrigRec."Norm Group" <> EstDestRec."Norm Group") OR
         (EstOrigRec."Norm Group (Sales)" <> EstDestRec."Norm Group (Sales)") OR
         (EstOrigRec."Purch Discount Term Group 1" <> EstDestRec."Purch Discount Term Group 1") OR
         (EstOrigRec."Purch Discount Term Group 2" <> EstDestRec."Purch Discount Term Group 2") OR
         (EstOrigRec."Sales Discount Term Group 1" <> EstDestRec."Sales Discount Term Group 1") OR
         (EstOrigRec."Sales Discount Term Group 2" <> EstDestRec."Sales Discount Term Group 2") THEN BEGIN  //C017681
        lvPart := '';
        lvRecipe := '';
        lvSurchLine := 0;
        IF TmpChrgRec.FIND('-') THEN BEGIN
          REPEAT
            ChrgRec.COPY(TmpChrgRec);
            IF ChrgRec."Recipe Line" = 0 THEN BEGIN
              IF (lvPart <> ChrgRec."Part Group" + ChrgRec.Part) OR
                 (lvSurchLine <> ChrgRec."Surcharge Line") THEN
              BEGIN
                lvPart := ChrgRec."Part Group" + ChrgRec.Part;
                lvSurchLine := ChrgRec."Surcharge Line";
                IF EstLineRec.GET(ChrgRec."Estimate No.", ChrgRec."Sub-Estimate No.",
                  ChrgRec."Part Group", ChrgRec.Part, ChrgRec."Surcharge Line") THEN
                  EstLineRec.CheckEstimateCharge
                ELSE
                  ChrgRec.DELETE;  //table-inconsistency
              END;
            END ELSE BEGIN
              IF (lvPart <> ChrgRec."Part Group" + ChrgRec.Part) OR
                 (lvRecipe <> ChrgRec."Recipe Group" + ChrgRec.Recipe) OR
                 (lvSurchLine <> ChrgRec."Surcharge Line") THEN
              BEGIN
                lvPart := ChrgRec."Part Group" + ChrgRec.Part;
                lvRecipe := ChrgRec."Recipe Group" + ChrgRec.Recipe;
                lvSurchLine := ChrgRec."Surcharge Line";
                IF RcpLineRec.GET(ChrgRec."Estimate No.", ChrgRec."Sub-Estimate No.",
                  ChrgRec."Part Group", ChrgRec.Part, ChrgRec."Recipe Line",
                  ChrgRec."Recipe Group", ChrgRec.Recipe, ChrgRec."Surcharge Line") THEN
                  RcpLineRec.CheckRecipeCharge
                ELSE
                  ChrgRec.DELETE;  //table-inconsistency
              END;
            END;
          UNTIL TmpChrgRec.NEXT = 0;
        END;
      END;

      TmpEstLineRec.RESET;
      TmpEstLineRec.SETFILTER(Recipe, '<>%1', '');
      IF TmpEstLineRec.FIND('-') THEN BEGIN
        REPEAT
          RcpLineRec.RESET;
          RcpLineRec.SETRANGE("Estimate No.", TmpEstLineRec."Estimate No.");
          RcpLineRec.SETRANGE("Sub-Estimate No.", TmpEstLineRec."Sub-Estimate No.");
          RcpLineRec.SETRANGE(Part, TmpEstLineRec.Part);
          RcpLineRec.SETRANGE("Part Group", TmpEstLineRec."Part Group");
          RcpLineRec.SETRANGE("Estimate Line", TmpEstLineRec."Line No.");
          IF RcpLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
            RcpLineRec.UpdateEstLines;   //C015798 (force update line total)
          END;
        UNTIL TmpEstLineRec.NEXT = 0;
      END;

      IF ActionLvl = 2 THEN BEGIN
        IF TmpSubEstRec.FIND('-') THEN BEGIN
          IF SubEstRec.GET(TmpSubEstRec."Estimate No.", TmpSubEstRec."Sub-Estimate No.") THEN BEGIN
            SubEstRec.ProcessAdjustmentFactor(0,0);  //DP00555
          END;
        END;
      END;
      IF ActionLvl = 3 THEN BEGIN
        IF TmpEstPartRec.FIND('-') THEN BEGIN
          IF EstPartRec.GET(TmpEstPartRec."Estimate No.", TmpEstPartRec."Sub-Estimate No.",
            TmpEstPartRec."Part Group",TmpEstPartRec.Part) THEN BEGIN
            EstPartRec.ProcessAdjustmentFactor(0,0);  //DP00555
          END;
        END;
      END;

      Status.UPDATE(5,TmpSumHeaderRec.TABLECAPTION);
      TmpSumHeaderRec.RESET;
      IF TmpSumHeaderRec.FIND('-') THEN BEGIN
        REPEAT
          SumHeaderRec.COPY(TmpSumHeaderRec);
          SumHeaderRec."Project No." := '' ;
          IF NOT ElemRec.GET(SumHeaderRec.Element) THEN
            SumHeaderRec.Element := '' ;
          IF NOT SumHeaderRec.INSERT THEN SkipUpdate := TRUE;
        UNTIL TmpSumHeaderRec.NEXT = 0;
      END;

      Status.UPDATE(5,TmpSumLineRec.TABLECAPTION);
      TmpSumLineRec.RESET;
      IF TmpSumLineRec.FIND('-') THEN BEGIN
        REPEAT
          SumLineRec.COPY(TmpSumLineRec);
          IF NOT ElemRec.GET(SumLineRec.Element) THEN
            SumLineRec.Element := '' ;
          IF SumLineRec.Type = SumLineRec.Type::"Text Relation" THEN  //C061017
            SumLineRec.VALIDATE("Field No.");  //**update row description for text relations
          IF NOT SumLineRec.INSERT THEN SkipUpdate := TRUE;
        UNTIL TmpSumLineRec.NEXT = 0;
      END;

      Status.UPDATE(5,TmpSumExcelRec.TABLECAPTION);
      TmpSumExcelRec.RESET;
      IF TmpSumExcelRec.FIND('-') THEN BEGIN
        REPEAT
          SumExcelRec.COPY(TmpSumExcelRec);
          IF NOT SumExcelRec.INSERT THEN SkipUpdate := TRUE;
        UNTIL TmpSumExcelRec.NEXT = 0;
      END;

      Status.UPDATE(5,TmpQuantSheetHeader.TABLECAPTION);
      TmpQuantSheetHeader.RESET;
      IF TmpQuantSheetHeader.FIND('-') THEN BEGIN
        REPEAT
          QuantSheetHeader.COPY(TmpQuantSheetHeader);
          IF NOT QuantSheetHeader.INSERT THEN SkipUpdate := TRUE;
        UNTIL TmpQuantSheetHeader.NEXT = 0;
      END;

      Status.UPDATE(5,TmpQuantSheetLine.TABLECAPTION);
      TmpQuantSheetLine.RESET;
      IF TmpQuantSheetLine.FIND('-') THEN BEGIN
        REPEAT
          QuantSheetLine.COPY(TmpQuantSheetLine);
          IF NOT QuantSheetLine.INSERT THEN SkipUpdate := TRUE;
        UNTIL TmpQuantSheetLine.NEXT = 0;
      END;

      Status.UPDATE(5,TmpQuantRelation.TABLECAPTION);
      TmpQuantRelation.RESET;
      IF TmpQuantRelation.FIND('-') THEN BEGIN
        REPEAT
          QuantRelation.COPY(TmpQuantRelation);
          IF NOT QuantRelation.INSERT THEN SkipUpdate := TRUE;
        UNTIL TmpQuantRelation.NEXT = 0;
      END;
    END;

    PROCEDURE GetPartQuantity@1210190007(lvEst@1210190009 : Code[20];lvSubEst@1210190008 : Code[20];lvPartGroup@1210190006 : Code[20];lvPart@1210190003 : Code[20]) RetPartQuan@1210190000 : Decimal;
    VAR
      lvEstPartRec@1210190001 : Record 11072073;
      lvTmpSaveEstPartRec@1210190004 : TEMPORARY Record 11072073;
      lvCurrLevel@1210190002 : Integer;
    BEGIN
      RetPartQuan := 1;
      lvTmpSaveEstPartRec.COPY(TmpEstPartRec);

      WITH lvEstPartRec DO BEGIN
        IF TmpEstPartRec.GET(lvEst, lvSubEst, lvPartGroup, lvPart) THEN
          COPY(TmpEstPartRec)
        ELSE
          IF NOT lvEstPartRec.GET(lvEst, lvSubEst, lvPartGroup, lvPart) THEN INIT;
        lvCurrLevel := Level;
        RetPartQuan := RetPartQuan * Quantity;
        IF (lvCurrLevel = 3) AND (RetPartQuan <> 0) THEN BEGIN
          lvCurrLevel := lvCurrLevel - 1;
          IF TmpEstPartRec.GET("Estimate No.", "Sub-Estimate No.", "Part Group", Paragraph) THEN BEGIN
            lvCurrLevel := TmpEstPartRec.Level;  //C005805
            COPY(TmpEstPartRec);
          END ELSE BEGIN
            IF NOT GET("Estimate No.", "Sub-Estimate No.", "Part Group", Paragraph) THEN INIT;
          END;
          RetPartQuan := RetPartQuan * Quantity;
        END;
        IF (lvCurrLevel = 2) AND (RetPartQuan <> 0) THEN BEGIN
          lvCurrLevel := lvCurrLevel - 1;
          IF TmpEstPartRec.GET("Estimate No.", "Sub-Estimate No.", "Part Group", Chapter) THEN BEGIN
            lvCurrLevel := TmpEstPartRec.Level;  //C005805
            COPY(TmpEstPartRec);
          END ELSE BEGIN
            IF NOT GET("Estimate No.", "Sub-Estimate No.", "Part Group", Chapter) THEN INIT;
          END;
          RetPartQuan := RetPartQuan * Quantity;
        END;
        IF (lvCurrLevel = 1) AND (RetPartQuan <> 0) THEN BEGIN
          lvCurrLevel := lvCurrLevel - 1;
          TmpEstPartRec.RESET;
          TmpEstPartRec.SETRANGE("Estimate No.", "Estimate No.");
          TmpEstPartRec.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
          TmpEstPartRec.SETRANGE("Part Group", "Part Group");
          TmpEstPartRec.SETRANGE(Level, 0);
          IF TmpEstPartRec.FIND('-') THEN BEGIN
            lvCurrLevel := TmpEstPartRec.Level;  //C005805
            COPY(TmpEstPartRec);
          END ELSE BEGIN
            COPYFILTERS(TmpEstPartRec);
            IF NOT FINDFIRST THEN INIT;
          END;
          RetPartQuan := RetPartQuan * Quantity;
        END;
      END;
      TmpEstPartRec.COPY(lvTmpSaveEstPartRec);  //* Recover
    END;

    PROCEDURE SetSelection@1100485000();
    BEGIN
      CopyEstModel := TRUE;
    END;

    PROCEDURE SetSelectionSubLevel@1210190006(iNormGroupFrom@1210190000 : Code[20];iNormGroupTo@1210190001 : Code[20];iNormGroupSalesFrom@1100525001 : Code[20];iNormGroupSalesTo@1100525000 : Code[20]);
    BEGIN
      gNormGroupFrom := iNormGroupFrom;
      gNormGroupTo := iNormGroupTo;
      //DP00381
      gNormGroupSalesFrom := iNormGroupSalesFrom;
      gNormGroupSalesTo := iNormGroupSalesTo;
    END;

    PROCEDURE SetTransferComments@1100529801(iTransferCommentLines@1100529800 : Boolean);
    BEGIN
      // **4PS MVOS M28717
      TransferCommentLines := iTransferCommentLines;
    END;

    PROCEDURE SetSummarySource@1100528500(iEstimateSource@1100528500 : Code[20];iSummarySourceCost@1100528501 : Code[20];iSummarySourceSales@1100528502 : Code[20]);
    BEGIN
      //C050838
      gEstimateSource := iEstimateSource;
      gSummarySourceCost := iSummarySourceCost;
      gSummarySourceSales := iSummarySourceSales;
      ApplySummarySource := TRUE;
    END;

    PROCEDURE SetGenerateSummary@1100525000(iGenerateSummarySubEst@1100529800 : Boolean);
    BEGIN
      GenerateSummarySubEst := iGenerateSummarySubEst;
    END;

    PROCEDURE SetCopyQuantitySheet@1100409000(iCopyQuantitySheet@1100529800 : Boolean);
    BEGIN
      //DP00686
      gCopyQuantitySheet := iCopyQuantitySheet;
    END;

    PROCEDURE SetInitSalesFromCost@1100525001(iInitSalesFromCost@1100529800 : Boolean);
    BEGIN
      //C020959
      InitSalesFromCost := iInitSalesFromCost;
    END;

    PROCEDURE SetDiscTermGroupSales@1100525002(iDiscRef1To@1210190000 : Code[20];iDiscRef2To@1210190001 : Code[20]);
    BEGIN
      //C017681
      SalesDiscRef1To := iDiscRef1To;
      SalesDiscRef2To := iDiscRef2To;
    END;

    PROCEDURE SetSurchargePercentage@1100525004(SurchargeLabor@1100525004 : Decimal;SurchargeMaterial@1100525003 : Decimal;SurchargeSubcontracting@1100525002 : Decimal;SurchargePlant@1100525001 : Decimal;SurchargeSundry@1100525000 : Decimal);
    BEGIN
      //C035780
      SurchargeLaborTo := SurchargeLabor;
      SurchargeMaterialTo := SurchargeMaterial;
      SurchargeSubcontractingTo := SurchargeSubcontracting;
      SurchargePlantTo := SurchargePlant;
      SurchargeSundryTo := SurchargeSundry;
    END;

    LOCAL PROCEDURE EvaluateProjPlanActCode@1100528400(VAR ProjectPlanningActivityCode@1100528400 : Code[10]);
    VAR
      ProjectPlanningBaseActivity@1100528401 : Record 11012434;
    BEGIN
      IF ProjectPlanningActivityCode = '' THEN
        EXIT;

      IF NOT ProjectPlanningBaseActivity.GET(ProjectPlanningActivityCode) THEN
        ProjectPlanningActivityCode := '';
    END;

    LOCAL PROCEDURE CheckSummaryExist@1100528501(iEstimateSource@1100528502 : Code[20];iSummarySourceCost@1100528501 : Code[20];iSummarySourceSales@1100528500 : Code[20]) SummaryFound : Boolean;
    VAR
      SummarySheetCost@1100528503 : Record 11012172;
      SummarySheetSales@1100528504 : Record 11012172;
    BEGIN
      //C050838: either SummaryCost or SummarySales should exist
      TmpEstRec."Estimate Source" := '';
      TmpEstRec."Summary Source (Cost)" := '';
      TmpEstRec."Summary Source (Sales)" := '';
      IF SummarySheetCost.GET(iEstimateSource, iSummarySourceCost) THEN BEGIN
        SummaryFound := TRUE;
        TmpEstRec."Estimate Source" := iEstimateSource;
        TmpEstRec."Summary Source (Cost)" := iSummarySourceCost;
      END;
      IF SummarySheetSales.GET(iEstimateSource, iSummarySourceSales) THEN BEGIN
        SummaryFound := TRUE;
        TmpEstRec."Estimate Source" := iEstimateSource;
        TmpEstRec."Summary Source (Sales)" := iSummarySourceSales;
      END;
      TmpEstRec.MODIFY;

      EXIT(SummaryFound);
    END;

    BEGIN
    {
      DP01090: check on Estimate Type removed
    }
    END.
  }
}

