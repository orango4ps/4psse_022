OBJECT Codeunit 1213 Pmt. Export Cust. Ledger Check
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW111.00,NAVDK;
  }
  PROPERTIES
  {
    TableNo=21;
    OnRun=BEGIN
            CheckDocumentType(Rec);
            CheckRefundInfo(Rec);
            CheckPaymentMethod(Rec);
            CheckPaymentTypeValidation(Rec);  //NAVDK
            CheckBalAccountType(Rec);
            CheckBankAccount(Rec);
            CheckBalAccountNo(Rec);
            CheckTransferCurrencyCode(Rec);  //NAVDK
            CheckTransferCountryRegionCode(Rec);  //NAVDK
            OnPmtExportCustLedgerCheck(Rec);
          END;

  }
  CODE
  {
    VAR
      RecipientBankAccMissingErr@1000 : TextConst '@@@="%1=Field;%2=Table";ENU=%1 for one or more %2 is not specified.;NOR=%1 er ikke angitt for ‚n eller flere forekomster av %2.;SVE=%1 f”r en eller flera %2 har inte angetts.';
      WrongTransferCurrencyErr@1060000 : TextConst '@@@="%1=Field;%2=Table;%3=Value;%4=Value";ENU=%1 for one or more %2 is incorrect. You can only use %3 or %4.';
      WrongFieldValueErr@1001 : TextConst '@@@="%1=Field;%2=Table;%3=Value";ENU=%1 for one or more %2 is different from %3.;NOR=%1 er forskjellig fra %3 for ‚n eller flere forekomster av %2.;SVE=%1 f”r en eller flera %2 skiljer sig fr†n %3.';
      MissingPmtMethodErr@1002 : TextConst 'ENU=%1 must be used for payments.;NOR=%1 m† brukes ved betaling.;SVE=%1 m†ste anv„ndas f”r betalningar.';

    LOCAL PROCEDURE CheckDocumentType@5(VAR CustLedgEntry@1000 : Record 21);
    VAR
      CustLedgEntry2@1001 : Record 21;
    BEGIN
      CustLedgEntry2.COPY(CustLedgEntry);
      CustLedgEntry2.SETFILTER("Document Type",'<>%1',CustLedgEntry2."Document Type"::Refund);

      IF NOT CustLedgEntry2.ISEMPTY THEN
        ERROR(WrongFieldValueErr,
          CustLedgEntry2.FIELDCAPTION("Document Type"),CustLedgEntry2.TABLECAPTION,CustLedgEntry2."Document Type"::Refund);
    END;

    LOCAL PROCEDURE CheckRefundInfo@1(VAR CustLedgEntry@1000 : Record 21);
    VAR
      CustLedgEntry2@1001 : Record 21;
    BEGIN
      CustLedgEntry2.COPY(CustLedgEntry);
      CustLedgEntry2.SETRANGE("Recipient Bank Account",'');

      IF NOT CustLedgEntry2.ISEMPTY THEN
        ERROR(RecipientBankAccMissingErr,CustLedgEntry2.FIELDCAPTION("Recipient Bank Account"),CustLedgEntry2.TABLECAPTION);
    END;

    LOCAL PROCEDURE CheckPaymentMethod@4(VAR CustLedgEntry@1000 : Record 21);
    VAR
      CustLedgEntry2@1001 : Record 21;
    BEGIN
      CustLedgEntry2.COPY(CustLedgEntry);
      CustLedgEntry2.SETRANGE("Payment Method Code",'');

      IF NOT CustLedgEntry2.ISEMPTY THEN
        ERROR(MissingPmtMethodErr,CustLedgEntry2.FIELDCAPTION("Payment Method Code"));
    END;

    LOCAL PROCEDURE CheckPaymentTypeValidation@1060001(VAR CustLedgEntry@1060000 : Record 21);
    VAR
      CustLedgEntry2@1060001 : Record 21;
      PaymentMethod@1060002 : Record 289;
      PmtExportMgt@1060003 : Codeunit 1210;
    BEGIN
      //NAVDK
      CustLedgEntry2.COPY(CustLedgEntry);
      CustLedgEntry2.SETFILTER("Payment Method Code",'<>%1','');

      IF CustLedgEntry2.FINDSET THEN
        REPEAT
          PaymentMethod.GET(CustLedgEntry2."Payment Method Code");
          PmtExportMgt.CheckCustRefundPaymentTypeValidation(PaymentMethod);
        UNTIL CustLedgEntry2.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckBalAccountType@2(VAR CustLedgEntry@1000 : Record 21);
    VAR
      CustLedgEntry2@1001 : Record 21;
    BEGIN
      CustLedgEntry2.COPY(CustLedgEntry);
      CustLedgEntry2.SETFILTER("Bal. Account Type",'<>%1',CustLedgEntry2."Bal. Account Type"::"Bank Account");

      IF NOT CustLedgEntry2.ISEMPTY THEN
        ERROR(WrongFieldValueErr,CustLedgEntry2.FIELDCAPTION("Bal. Account Type"),
          CustLedgEntry2.TABLECAPTION,CustLedgEntry2."Bal. Account Type"::"Bank Account");
    END;

    LOCAL PROCEDURE CheckBalAccountNo@3(VAR CustLedgEntry@1000 : Record 21);
    VAR
      CustLedgEntry2@1001 : Record 21;
    BEGIN
      CustLedgEntry2.COPY(CustLedgEntry);
      CustLedgEntry2.SETRANGE("Bal. Account Type",CustLedgEntry2."Bal. Account Type"::"Bank Account");
      CustLedgEntry2.SETFILTER("Bal. Account No.",'<>%1',CustLedgEntry."Bal. Account No.");

      IF NOT CustLedgEntry2.ISEMPTY THEN
        ERROR(WrongFieldValueErr,CustLedgEntry2.FIELDCAPTION("Bal. Account No."),
          CustLedgEntry2.TABLECAPTION,CustLedgEntry."Bal. Account No.");
    END;

    LOCAL PROCEDURE CheckTransferCurrencyCode@1060000(VAR CustLedgEntry@1060000 : Record 21);
    VAR
      CustLedgEntry2@1060003 : Record 21;
      EuroCurrency@1060002 : Record 4;
      GeneralLedgerSetup@1060001 : Record 98;
    BEGIN
      //NAVDK
      GeneralLedgerSetup.GET;
      EuroCurrency.SETRANGE("EMU Currency",TRUE);
      EuroCurrency.FINDFIRST;

      CustLedgEntry2.COPY(CustLedgEntry);
      CustLedgEntry2.SETFILTER("Currency Code",'<>%1&<>%2','',EuroCurrency.Code);

      IF NOT CustLedgEntry2.ISEMPTY THEN
        ERROR(WrongTransferCurrencyErr,
          CustLedgEntry2.FIELDCAPTION("Currency Code"),CustLedgEntry2.TABLECAPTION,GeneralLedgerSetup."LCY Code",EuroCurrency.Code);
    END;

    LOCAL PROCEDURE CheckTransferCountryRegionCode@1060005(VAR CustLedgEntry@1060000 : Record 21);
    VAR
      BankAccount@1060004 : Record 270;
      CustBankAcc@1060002 : Record 287;
      CustLedgEntry2@1060001 : Record 21;
      PaymentMethod@1060003 : Record 289;
      PmtExportMgt@1060005 : Codeunit 1210;
    BEGIN
      //NAVDK
      CustLedgEntry2.COPY(CustLedgEntry);
      CustLedgEntry2.SETFILTER("Recipient Bank Account",'<>%1','');
      CustLedgEntry2.SETFILTER("Payment Method Code",'<>%1','');

      IF CustLedgEntry2.FINDSET THEN BEGIN
        REPEAT
          IF CustBankAcc.GET(CustLedgEntry2."Customer No.",CustLedgEntry2."Recipient Bank Account") THEN BEGIN
            PaymentMethod.GET(CustLedgEntry2."Payment Method Code");
            BankAccount.GET(CustLedgEntry2."Bal. Account No.");
            PmtExportMgt.CheckBankTransferCountryRegion(BankAccount."Country/Region Code",CustBankAcc."Country/Region Code",PaymentMethod);
          END;
        UNTIL CustLedgEntry2.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CheckBankAccount@7(VAR CustLedgEntry@1000 : Record 21);
    VAR
      BankAccount@1001 : Record 270;
    BEGIN
      BankAccount.GET(CustLedgEntry."Bal. Account No.");
      BankAccount.TESTFIELD("Payment Export Format");
    END;

    [Integration]
    LOCAL PROCEDURE OnPmtExportCustLedgerCheck@15(VAR CustLedgerEntry@1050 : Record 21);
    BEGIN
    END;

    BEGIN
    END.
  }
}

