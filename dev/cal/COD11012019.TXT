OBJECT Codeunit 11012019 Graphs
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@11012021 : TextConst 'DEU=WIP-Kosten;ENU=Work In Progress Cost;NLD=Onderhanden Werk Kosten;NOR=Kostnad for arbeidskapital;SVE=Kostnad fîr pÜgÜende arbete';
      Text002@11012023 : TextConst 'DEU=Gehaltskosten;ENU=Labor Cost;NLD=Loonkosten;NOR=Arbeidskraftkost;SVE=Arbetskostnad';
      Text005@11012026 : TextConst 'DEU=Materialkosten;ENU=Material Cost;NLD=Materiaalkosten;NOR=Materialekost;SVE=Materialkostnad';
      Text008@11012029 : TextConst 'DEU=Subunternehmenkosten;ENU=Subcontracting Cost;NLD=Onderaannemerskosten;NOR=Underleverandõrkost;SVE=Underentreprenadskostnad';
      Text011@11012032 : TextConst 'DEU=Werkzeugkosten;ENU=Plant Cost;NLD=Materieelkosten;NOR=Maskinkost;SVE=Maskinkostnad';
      Text014@11012035 : TextConst 'DEU=öbrige Kosten;ENU=Sundry Costs;NLD=Overige kosten;NOR=Diversekost;SVE=Diversekostnader';
      Text017@11012038 : TextConst 'DEU=Budget;ENU=Project Budget;NLD=Werkbegroting;NOR=Prosjektbudsjett;SVE=Projektbudget';
      Text018@11012039 : TextConst 'DEU=Budget Projekt %1;ENU=Project Budget %1;NLD=Werkbegroting project %1;NOR=Prosjektbudsjett %1;SVE=Projektbudget %1';
      Text019@11012040 : TextConst 'DEU=Rotating Chart               \\;ENU=Rotating Chart               \\;NLD=Rotating Chart               \\;NOR=Roterende diagram;SVE=Roterande diagram               \\';
      Text020@11012041 : TextConst 'DEU=DrÅcke Abbrechen zum Stoppen #1#####;ENU=Click Cancel to stop. #1#####;NLD=CLick Cancel to stop. #1#####;NOR=Klikk pÜ Avbryt for Ü stoppe. #1#####;SVE=Tryck Avbryt fîr att stopp. #1#####';
      Text022@11012043 : TextConst 'DEU=ProjektÅberwachung;ENU=Project Result;NLD=Projectbewaking;NOR=Prosjektresultat;SVE=Projektresultat';
      Text024@11012045 : TextConst 'DEU=Budget;ENU=Budget;NLD=Begroot;NOR=Budsjett;SVE=Budget';
      Text026@11012047 : TextConst 'DEU=Zugelassen;ENU=Allowed;NLD=Toegestaan;NOR=Tillatt;SVE=TillÜten';
      Text028@11012049 : TextConst 'DEU=Ist-Kosten;ENU=Actual Costs;NLD=Besteed;NOR=Faktiske koster;SVE=Verkliga kostnader';
      Text030@11012051 : TextConst 'DEU=Vertragspreis;ENU=Contract Amount;NLD=Aanneemsom;NOR=Kontraktsbelõp;SVE=Kontraktsbelopp';
      Text031@1100409000 : TextConst 'DEU=Vertragspr. inkl. Sonderleistung;ENU=Contract Amount incl. Extensions and Options;NLD=Aanneemsom incl. meerwerk;NOR=Kontraktsbelõp inkl. ETA og alternativer;SVE=Kontraktsbelopp inkl. éTA och alternativ';
      Text032@11012053 : TextConst 'DEU=ErtrÑge;ENU=Revenues;NLD=Opbrengsten;NOR=Inntekter;SVE=IntÑkter';
      Text040@11012061 : TextConst 'DEU=Diagramm;ENU=Graph;NLD=Grafiek;NOR=Graf;SVE=Diagram';
      Text041@11012062 : TextConst 'DEU=Kostenkontrolle Projekte;ENU=Project Cost Control;NLD=Kostenbewaking projecten;NOR=Prosjektkostkontroll;SVE=Projektkostnadskontroll';
      Text042@11012063 : TextConst 'DEU=Arbeit;ENU=Labor;NLD=Arbeid;NOR=Arbeidskraft;SVE=Arbete';
      Text043@11012064 : TextConst 'DEU=Material;ENU=Material;NLD=Materiaal;NOR=Materialee;SVE=Material';
      Text045@11012066 : TextConst 'DEU=Fremdarbeit;ENU=Subcontracting;NLD=Onderaanneming;NOR=Underentrepenõr;SVE=Underentreprenad';
      Text047@11012068 : TextConst 'DEU=Werkzeug;ENU=Plant;NLD=Materieel;NOR=Maskin;SVE=Maskin';
      Text049@11012070 : TextConst 'DEU=öbriges;ENU=Sundry;NLD=Overig;NOR=Diverse;SVE=Diverse';
      Text052@11012073 : TextConst 'DEU=Summen;ENU=Totals;NLD=Totalen;NOR=Totaler;SVE=Totaler';
      Text068@11012089 : TextConst 'DEU=Kostenkontrolle Projekt:;ENU="Project Cost Control: ";NLD="Kostenbewaking project: ";NOR=Prosjektkostkontroll:;SVE="Projektkostnadskontroll: "';
      Text069@11012090 : TextConst 'DEU=WIP-Kosten Graphik;ENU=WIP Costs Graph;NLD=OHW kosten grafiek;NOR=Arbeidskapital, kostnadsgraf;SVE=PÜgÜende arbeten, graf îver kostnader';
      Text070@11012091 : TextConst 'DEU=WIP-Kosten;ENU=WIP Costs;NLD=OHW kosten;NOR=Arbeidskapital, kostnader;SVE=PÜgÜende arbeten, kostander';
      Text071@11012092 : TextConst 'DEU=Kalkulation Kosten;ENU=Estimate Costs;NLD=Calculatie Kosten;NOR=Kalkylekoster;SVE=Kalkylkostnader';
      Text072@11012093 : TextConst 'DEU=Kalkulation %1;ENU=Estimate %1;NLD=Calculatie %1;NOR=Kalkyle %1;SVE=Uppskattning %1';
      ProjSetUp@11012000 : Record 315;
      ProjRec@11012001 : Record 11072003;
      SubProjRec@11012002 : Record 11072003;
      EstRec@11012003 : Record 11012151;
      TryOutRec@1100485001 : Record 11012750;
      CostControlRec@11012004 : Record 11012046;
      window@11012011 : Dialog;
      i@11012012 : Integer;
      DateFilterTxt@11012013 : Text[30];
      CumulationFilterTxt@11012014 : Text[30];
      ProgressFilterText@11012015 : Text[30];
      DPFilter@11012016 : Text[250];
      AllowedDec@11012017 : Decimal;
      DummyDec@11012018 : Decimal;
      EndDatePeriod@11012019 : Date;
      DetermProgressDate@11012020 : Codeunit 11012014;
      Text073@1210190000 : TextConst 'DEU=Kalkulation;ENU=Estimate;NLD=Calculatie;NOR=Kalkyle;SVE=Kalkyl';
      Text074@1100485000 : TextConst 'DEU=Chance Pipeline Trichter;ENU=Opportunity Pipeline Funnel;NLD=Kans Pijplijn Trechter;NOR=Salgsmulighet, rõrÜpning;SVE=AffÑrsmîjlighet, rîrîppning';
      Text075@1100485002 : TextConst 'DEU=Keinen Datumfilter eingegeben, alle Lead-Generierungen werden im Trichter aufgenommen. Mîchten Sie fortfahren?;ENU=No datefilter, all try outs will be put into funnel, continue ?;NLD=Geen datumfilter ingegeven, alle trajecten worden in trechter opgenomen, doorgaan ?;NOR=Det er ikke noe datofilter, alle tilbud angis i en rõrÜpning. Vil du fortsette?;SVE=Det finns inget datumfilter, alla anbud anges i ett flîde. Vill du fortsÑtta?';

    PROCEDURE "Project Budget"@5(VAR Rec@11012000 : Record 11072003);
    BEGIN
      ProjRec.COPY(Rec);
      RunProjectBudgetGraph;
    END;

    PROCEDURE ProjectControl@1(VAR Rec@11012000 : Record 11072003;endperiodedate@11012001 : Date);
    BEGIN
      ProjRec.COPY(Rec);
      EndDatePeriod := endperiodedate;
      RunProjectGraph;
    END;

    PROCEDURE CostTypeControl@3(VAR Rec@11012000 : Record 11072003);
    BEGIN
      ProjRec.COPY(Rec);
      RunCostCodeGraph;
    END;

    PROCEDURE Estimate@9(VAR Rec@11012000 : Record 11012151);
    BEGIN
      EstRec.COPY(Rec);
      RunEstimateGraph;
    END;

    [External]
    PROCEDURE TryOut@1100485019(VAR Rec@1100485000 : Record 11012750);
    BEGIN
      TryOutRec.COPY(Rec);
      RunOpportunityFunnel;
    END;

    PROCEDURE RunProjectBudgetGraph@6();
    VAR
      XlWrkBk@1100528700 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook" RUNONCLIENT;
      XlChart@1100528705 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Chart" RUNONCLIENT;
      ExcelEnumeration@1100528707 : Codeunit 11012375;
      ExcelAutomation@1100528708 : Codeunit 11012402;
    BEGIN
      ExcelAutomation.InitExcel;
      ExcelAutomation.InitWorkbook(Text000);

      ProjRec.CALCFIELDS("Labor Budget");
      ExcelAutomation.WriteCell(1, 2, Text002);
      ExcelAutomation.WriteCell(1, 3, FORMAT(ProjRec."Labor Budget"));

      ProjRec.CALCFIELDS("Material Budget");
      ExcelAutomation.WriteCell(2, 2, Text005);
      ExcelAutomation.WriteCell(2, 3, FORMAT(ProjRec."Material Budget"));

      ProjRec.CALCFIELDS("Subcontracting Budget");
      ExcelAutomation.WriteCell(3, 2, Text008);
      ExcelAutomation.WriteCell(3, 3, FORMAT(ProjRec."Subcontracting Budget"));

      ProjRec.CALCFIELDS("Plant Budget");
      ExcelAutomation.WriteCell(4, 2, Text011);
      ExcelAutomation.WriteCell(4, 3, FORMAT(ProjRec."Plant Budget"));

      ProjRec.CALCFIELDS("Sundry Budget");
      ExcelAutomation.WriteCell(5, 2, Text014);
      ExcelAutomation.WriteCell(5, 3, FORMAT(ProjRec."Sundry Budget"));

      ExcelAutomation.AutoFit(1, 5);

      ExcelAutomation.AddChart(
        Text017,
        1, 2, 5, 3,
        ExcelEnumeration.XlChartType_xl3DPie,
        7,
        ExcelEnumeration.XlRowCol_xlRows,
        1,
        0,
        FALSE,
        STRSUBSTNO(Text018, ProjRec."No."));

      ExcelAutomation.GetXlWrkBk(XlWrkBk);
      XlWrkBk.Application.Visible := TRUE;

      IF NOT ProjSetUp.GET THEN
        ProjSetUp.INIT;

      IF ProjSetUp."Rotate Graph" THEN BEGIN
        XlChart := XlWrkBk.Charts.Item(XlWrkBk.Charts.Count);
        //Rotate Chart
        window.OPEN(Text019 +
                    Text020);
        FOR i := 1 TO 90 DO BEGIN
          window.UPDATE(1,i);
          XlChart.Rotation := i;
          SLEEP(50);
        END;
        window.CLOSE;
      END;
    END;

    PROCEDURE RunProjectGraph@2();
    VAR
      ExcelEnumeration@1100528700 : Codeunit 11012375;
      ExcelAutomation@1100528709 : Codeunit 11012402;
      PlotBy@1100528708 : Integer;
    BEGIN
      DateFilterTxt     := ProjRec.GETFILTER("Period Filter");
      CumulationFilterTxt := ProjRec.GETFILTER("Cumulation Filter");

      i := 1;

      ExcelAutomation.InitExcel;
      ExcelAutomation.InitWorkbook(Text022);

      ExcelAutomation.WriteCell(2, 1, Text024);
      ExcelAutomation.WriteCell(3, 1, Text026);
      ExcelAutomation.WriteCell(4, 1, Text028);
      ExcelAutomation.WriteCell(5, 1, Text031);
      ExcelAutomation.WriteCell(6, 1, Text032);

      IF ProjRec.FINDSET(FALSE, FALSE) THEN
      REPEAT

        DPFilter := ProjRec."No.";
        IF ProjRec."Single/Main/Sub Project" = ProjRec."Single/Main/Sub Project"::"Main Project" THEN BEGIN
          SubProjRec.SETRANGE("Main Project", ProjRec."No.");
          IF SubProjRec.FINDSET(FALSE, FALSE) THEN BEGIN
            REPEAT
              DPFilter := DPFilter + '|' + SubProjRec."No.";
            UNTIL SubProjRec.NEXT = 0;
          END;
        END;
        ProjRec.SETFILTER("Project Filter", DPFilter);

        i += 1;
        ProjRec.SETFILTER("Period Filter",DateFilterTxt);
        ProjRec.SETFILTER("Cumulation Filter",CumulationFilterTxt);
        DetermProgressDate.DetermineDate(ProjRec,FALSE);
        ProjRec.CALCFIELDS(
          Budget,"Actual Costs",Revenues,"Project Contract Amount",
          "Extension Contract Amount","Options Contract Amount");
        ProjRec.CalcAllowedPrevAllowAndPurch(
          AllowedDec,DummyDec,DummyDec,DummyDec, FALSE,
          DummyDec, DummyDec, DummyDec, DummyDec, DummyDec);
        ExcelAutomation.WriteCell(1, i, ProjRec.Description);
        ExcelAutomation.WriteCell(2, i, FORMAT(ProjRec.Budget));
        ExcelAutomation.WriteCell(3, i, FORMAT(AllowedDec));
        ExcelAutomation.WriteCell(4, i, FORMAT(ProjRec."Actual Costs"));
        ExcelAutomation.WriteCell(5, i, FORMAT(
          ProjRec."Project Contract Amount" + ProjRec."Extension Contract Amount" + ProjRec."Options Contract Amount"));
        ExcelAutomation.WriteCell(6, i, FORMAT(ProjRec.Revenues));
      UNTIL ProjRec.NEXT = 0;

      ExcelAutomation.AutoFit(1, 6);

      //Oplossing voor fout in office2007 bij i=2 (1 project), JBF methode, jth 6-11-2007
      IF i = 2 THEN
        PlotBy := ExcelEnumeration.XlRowCol_xlRows
      ELSE
        PlotBy := ExcelEnumeration.XlRowCol_xlColumns;

      ExcelAutomation.AddChart(
        Text040,
        1, 1, 6, i,
        ExcelEnumeration.XlChartType_xl3DColumn,
        7,
        PlotBy,
        1,
        1,
        TRUE,
        FORMAT(Text041));

      ExcelAutomation.GiveUserControl;
    END;

    PROCEDURE RunCostCodeGraph@4();
    VAR
      ExcelEnumeration@1100528700 : Codeunit 11012375;
      ExcelAutomation@1100528701 : Codeunit 11012402;
    BEGIN
      ExcelAutomation.InitExcel;
      ExcelAutomation.InitWorkbook(Text022);

      ExcelAutomation.WriteCell(2, 1, Text024);
      ExcelAutomation.WriteCell(3, 1, Text026);
      ExcelAutomation.WriteCell(4, 1, Text028);

      ExcelAutomation.WriteCell(1, 2, Text042);
      ExcelAutomation.WriteCell(1, 3, Text043);
      ExcelAutomation.WriteCell(1, 4, Text045);
      ExcelAutomation.WriteCell(1, 5, Text047);
      ExcelAutomation.WriteCell(1, 6, Text049);
      ExcelAutomation.WriteCell(1, 7, Text030);
      ExcelAutomation.WriteCell(1, 8, Text052);

      CostControlRec.SETRANGE("Project No.", ProjRec."No.");
      IF ProjRec."Single/Main/Sub Project" <> ProjRec."Single/Main/Sub Project"::"Main Project" THEN BEGIN
          CostControlRec.SETFILTER("Project Filter", ProjRec."No.");
      END ELSE BEGIN
          CostControlRec.SETFILTER("Project Filter", '');
      END;

      DateFilterTxt := ProjRec.GETFILTER("Period Filter");
      ProgressFilterText := ProjRec.GETFILTER("Progress Filter");
      CumulationFilterTxt := ProjRec.GETFILTER("Cumulation Filter");

      CostControlRec.SETFILTER("Period Filter",DateFilterTxt);
      CostControlRec.SETFILTER("Progress Filter",ProgressFilterText);
      CostControlRec.SETFILTER("Cumulation Filter",CumulationFilterTxt);

      IF CostControlRec.FINDSET(FALSE, FALSE) THEN BEGIN
       REPEAT
         CostControlRec.CalculateAllowedAndPurchase(
           AllowedDec, DummyDec, DummyDec, DummyDec,
           DummyDec, DummyDec, DummyDec, DummyDec,DummyDec);
         CASE CostControlRec."Cost Type" OF
           CostControlRec."Cost Type"::Labor:
               BEGIN
                 CostControlRec.CALCFIELDS(Budget,"Actual Costs");
                 ExcelAutomation.WriteCell(2, 2, FORMAT(CostControlRec.Budget));
                 ExcelAutomation.WriteCell(3, 2, FORMAT(AllowedDec));
                 ExcelAutomation.WriteCell(4, 2, FORMAT(CostControlRec."Actual Costs"));
               END;
           CostControlRec."Cost Type"::Material:
               BEGIN
                 CostControlRec.CALCFIELDS(Budget,"Actual Costs");
                 ExcelAutomation.WriteCell(2, 3, FORMAT(CostControlRec.Budget));
                 ExcelAutomation.WriteCell(3, 3, FORMAT(AllowedDec));
                 ExcelAutomation.WriteCell(4, 3, FORMAT(CostControlRec."Actual Costs"));
               END;
           CostControlRec."Cost Type"::Subcontracting:
               BEGIN
                 CostControlRec.CALCFIELDS(Budget,"Actual Costs");
                 ExcelAutomation.WriteCell(2, 4, FORMAT(CostControlRec.Budget));
                 ExcelAutomation.WriteCell(3, 4, FORMAT(AllowedDec));
                 ExcelAutomation.WriteCell(4, 4, FORMAT(CostControlRec."Actual Costs"));
               END;
           CostControlRec."Cost Type"::Plant:
               BEGIN
                 CostControlRec.CALCFIELDS(Budget,"Actual Costs");
                 ExcelAutomation.WriteCell(2, 5, FORMAT(CostControlRec.Budget));
                 ExcelAutomation.WriteCell(3, 5, FORMAT(AllowedDec));
                 ExcelAutomation.WriteCell(4, 5, FORMAT(CostControlRec."Actual Costs"));
               END;
           CostControlRec."Cost Type"::Sundry:
               BEGIN
                 CostControlRec.CALCFIELDS(Budget,"Actual Costs");
                 ExcelAutomation.WriteCell(2, 6, FORMAT(CostControlRec.Budget));
                 ExcelAutomation.WriteCell(3, 6, FORMAT(AllowedDec));
                 ExcelAutomation.WriteCell(4, 6, FORMAT(CostControlRec."Actual Costs"));
               END;
          END;
        UNTIL CostControlRec.NEXT = 0;
      END;

      ProjRec.CALCFIELDS("Contract Amount",Revenues);
      ExcelAutomation.WriteCell(2, 7, FORMAT(ProjRec."Contract Amount"));
      ExcelAutomation.WriteCell(4, 7, FORMAT(ProjRec.Revenues));

      ProjRec.CALCFIELDS(Budget,"Actual Costs");
      ProjRec.CalcAllowedPrevAllowAndPurch(
        AllowedDec,DummyDec,DummyDec,DummyDec, FALSE,
        DummyDec, DummyDec, DummyDec, DummyDec,DummyDec);

      ExcelAutomation.WriteCell(2, 8, FORMAT(ProjRec.Budget));
      ExcelAutomation.WriteCell(3, 8, FORMAT(AllowedDec));
      ExcelAutomation.WriteCell(4, 8, FORMAT(ProjRec."Actual Costs"));

      ExcelAutomation.AutoFit(1, 4);

      ExcelAutomation.AddChart(
        Text040,
        1, 1, 4, 8,
        ExcelEnumeration.XlChartType_xl3DColumn,
        7,
        ExcelEnumeration.XlRowCol_xlColumns,
        1,
        1,
        TRUE,
        FORMAT(Text068) + ProjRec."No." + ' ' + ProjRec.Description);

      ExcelAutomation.GiveUserControl;
    END;

    PROCEDURE RunProjectWIPGraph@7();
    VAR
      GLEntry@11012000 : Record 17;
      XlWrkBk@1100528706 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook" RUNONCLIENT;
      XlChart@1100528703 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Chart" RUNONCLIENT;
      ExcelEnumeration@1100528700 : Codeunit 11012375;
      ExcelAutomation@1100528701 : Codeunit 11012402;
    BEGIN
      //this is the former codeunit 11012001 (WIP Excel) which has no function call !!!!
      //contains hardcoded Ledger Accounts!

      GLEntry.SETCURRENTKEY("G/L Account No.","Posting Date");
      GLEntry.SETFILTER("G/L Account No.",'0261..0265');

      ExcelAutomation.InitExcel;
      ExcelAutomation.InitWorkbook(Text000);

      GLEntry.SETRANGE("G/L Account No.", '0261');
      GLEntry.CALCSUMS(Amount);
      ExcelAutomation.WriteCell(1, 2, Text002);
      ExcelAutomation.WriteCell(1, 3, FORMAT(GLEntry.Amount));

      GLEntry.SETRANGE("G/L Account No.", '0262');
      GLEntry.CALCSUMS(Amount);
      ExcelAutomation.WriteCell(2, 2, Text005);
      ExcelAutomation.WriteCell(2, 3, FORMAT(GLEntry.Amount));

      GLEntry.SETRANGE("G/L Account No.", '0263');
      GLEntry.CALCSUMS(Amount);
      ExcelAutomation.WriteCell(3, 2, Text008);
      ExcelAutomation.WriteCell(3, 3, FORMAT(GLEntry.Amount));

      GLEntry.SETRANGE("G/L Account No.", '0264');
      GLEntry.CALCSUMS(Amount);
      ExcelAutomation.WriteCell(4, 2, Text011);
      ExcelAutomation.WriteCell(4, 3, FORMAT(GLEntry.Amount));

      GLEntry.SETRANGE("G/L Account No.", '0265');
      GLEntry.CALCSUMS(Amount);
      ExcelAutomation.WriteCell(5, 2, Text014);
      ExcelAutomation.WriteCell(5, 3, FORMAT(GLEntry.Amount));

      ExcelAutomation.AutoFit(1, 5);

      ExcelAutomation.AddChart(
        Text069,
        1, 2, 5, 3,
        ExcelEnumeration.XlChartType_xl3DPie,
        7,
        ExcelEnumeration.XlRowCol_xlRows,
        1,
        0,
        FALSE,
        FORMAT(Text070));

      ExcelAutomation.GetXlWrkBk(XlWrkBk);
      XlWrkBk.Application.Visible := TRUE;

      IF NOT ProjSetUp.GET THEN
        ProjSetUp.INIT;
      IF ProjSetUp."Rotate Graph" THEN BEGIN
        XlChart := XlWrkBk.Charts.Item(XlWrkBk.Charts.Count);
        //Rotate Chart
        window.OPEN(Text019 +
                    Text020);
        FOR i := 1 TO 90 DO BEGIN
          window.UPDATE(1,i);
          XlChart.Rotation := i;
          SLEEP(50);
        END;
        window.CLOSE;
      END;
    END;

    PROCEDURE RunEstimateGraph@10();
    VAR
      XlWrkBk@1100528706 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook" RUNONCLIENT;
      XlChart@1100528703 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Chart" RUNONCLIENT;
      ExcelEnumeration@1100528700 : Codeunit 11012375;
      ExcelAutomation@1100528701 : Codeunit 11012402;
    BEGIN
      ExcelAutomation.InitExcel;
      ExcelAutomation.InitWorkbook(Text071);

      EstRec.CALCFIELDS("Labor Cost Amount");
      ExcelAutomation.WriteCell(1, 2, Text002);
      ExcelAutomation.WriteCell(1, 3, FORMAT(EstRec."Labor Cost Amount"));

      EstRec.CALCFIELDS("Material Cost Amount");
      ExcelAutomation.WriteCell(2, 2, Text005);
      ExcelAutomation.WriteCell(2, 3, FORMAT(EstRec."Material Cost Amount"));

      EstRec.CALCFIELDS("Subcontracting Cost Amount");
      ExcelAutomation.WriteCell(3, 2, Text008);
      ExcelAutomation.WriteCell(3, 3, FORMAT(EstRec."Subcontracting Cost Amount"));

      EstRec.CALCFIELDS("Plant Cost Amount");
      ExcelAutomation.WriteCell(4, 2, Text011);
      ExcelAutomation.WriteCell(4, 3, FORMAT(EstRec."Plant Cost Amount"));

      EstRec.CALCFIELDS("Sundry Cost Amount");
      ExcelAutomation.WriteCell(5, 2, Text014);
      ExcelAutomation.WriteCell(5, 3, FORMAT(EstRec."Sundry Cost Amount"));

      ExcelAutomation.AutoFit(1, 4);

      ExcelAutomation.AddChart(
        Text073,
        1, 2, 4, 3,
        ExcelEnumeration.XlChartType_xl3DPie,
        7,
        ExcelEnumeration.XlRowCol_xlRows,
        1,
        0,
        FALSE,
        STRSUBSTNO(Text072, EstRec."No."));

      ExcelAutomation.GetXlWrkBk(XlWrkBk);
      XlWrkBk.Application.Visible := TRUE;

      IF NOT ProjSetUp.GET THEN
        ProjSetUp.INIT;
      IF ProjSetUp."Rotate Graph" THEN BEGIN
        XlChart := XlWrkBk.Charts.Item(XlWrkBk.Charts.Count);
        //Rotate Chart
        window.OPEN(Text019 +
                    Text020);
        FOR i := 1 TO 90 DO BEGIN
          window.UPDATE(1,i);
          XlChart.Rotation := i;
          SLEEP(50);
        END;
        window.CLOSE;
      END;
    END;

    [External]
    PROCEDURE RunOpportunityFunnel@1100485000();
    VAR
      RelManSetupRec@1100485001 : Record 5079;
      ContFeatRec@1100485002 : Record 11012752;
      ContFeatTypeRec@1100528709 : Record 11012753;
      TempTryOutRec@1100528708 : TEMPORARY Record 11012750;
      XlWrkBk@1100528703 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook" RUNONCLIENT;
      XlChart@1100528702 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Chart" RUNONCLIENT;
      ExcelEnumeration@1100528701 : Codeunit 11012375;
      ExcelAutomation@1100528700 : Codeunit 11012402;
      ColumnNo@1100485007 : Integer;
      FunnelAmount@1100485009 : Decimal;
    BEGIN
      DateFilterTxt := TryOutRec.GETFILTER("Date Filter");

      IF DateFilterTxt = '' THEN
        IF NOT CONFIRM(Text075,TRUE) THEN
          EXIT;

      i := 1;

      ExcelAutomation.InitExcel;
      ExcelAutomation.InitWorkbook(Text074);

      RelManSetupRec.GET;
      ContFeatRec.SETRANGE("Feature Group",RelManSetupRec."Contact Feature Gr. Funnel");

      IF ContFeatRec.FINDSET(FALSE, FALSE) THEN BEGIN

        ColumnNo := 1;
        REPEAT
          ColumnNo +=1;

          ExcelAutomation.WriteCell(ColumnNo, 1, ContFeatRec.Description);

          ContFeatTypeRec.SETRANGE("Feature Group",RelManSetupRec."Contact Feature Gr. Funnel");
          ContFeatTypeRec.SETRANGE(Feature,ContFeatRec.Code);
          ContFeatTypeRec.SETRANGE("Relation Type",ContFeatTypeRec."Relation Type"::"Try-out");
          IF ContFeatTypeRec.FINDSET(FALSE, FALSE) THEN BEGIN
            REPEAT
              TryOutRec.SETRANGE(Code,ContFeatTypeRec.Code);
              TryOutRec.SETRANGE(Order,FALSE);
              TryOutRec.SETFILTER("Expected Order Date",DateFilterTxt);
              IF TryOutRec.FINDFIRST THEN BEGIN
                IF NOT TempTryOutRec.GET(TryOutRec.Code) THEN BEGIN
                  TempTryOutRec.Code := TryOutRec.Code;
                  TempTryOutRec."Order Amount (LCY)"  := TryOutRec."Order Amount (LCY)";
                  TempTryOutRec.INSERT;
                END;
              END;
              IF TempTryOutRec.FINDSET(FALSE, FALSE) THEN BEGIN
                REPEAT
                  FunnelAmount := FunnelAmount + TempTryOutRec."Order Amount (LCY)";
                UNTIL TempTryOutRec.NEXT = 0;
              END;
            UNTIL ContFeatTypeRec.NEXT = 0;
          END;

          ExcelAutomation.WriteCell(ColumnNo, 2, FORMAT(FunnelAmount));

          FunnelAmount := 0;
          TempTryOutRec.DELETEALL;
        UNTIL ContFeatRec.NEXT = 0;
      END ELSE BEGIN
        ExcelAutomation.TermExcel;
        EXIT;
      END;

      ExcelAutomation.AutoFit(1, ColumnNo);

      ExcelAutomation.AddChart(
        Text040,
        1, 1, ColumnNo, 2,
        ExcelEnumeration.XlChartType_xl3DColumn,
        7,
        ExcelEnumeration.XlRowCol_xlColumns,
        1,
        1,
        TRUE,
        FORMAT(Text074 + ' ' + DateFilterTxt));

      ExcelAutomation.GetXlWrkBk(XlWrkBk);
      XlChart := XlWrkBk.Charts.Item(XlWrkBk.Charts.Count);
      XlChart.ChartType := ExcelEnumeration.XlChartType_xlConeBarStacked100;

      ExcelAutomation.GiveUserControl;
    END;

    BEGIN
    {
      Overzicht soort grafiek:

      xlArea                        1
      xlBar                         2
      xlColumn                      3
      xlLine                        4
      xlPie                         5

      xlBubble                     15
      xlColumnClustered            51
      xlColumnStacked              52
      xlColumnStacked100           53
      xl3DColumnClustered          54
      xl3DColumnStacked            55
      xl3DColumnStacked100         56
      xlBarClustered               57
      xlBarStacked                 58
      xlBarStacked100              59
      xl3DBarClustered             60
      xl3DBarStacked               61
      xl3DBarStacked100            62
      xlLineStacked=               63
      xlLineStacked100             64
      xlLineMarkers                65
      xlLineMarkersStacked         66
      xlLineMarkersStacked100      67
      xlPieOfPie                   68
      xlPieExploded                69
      xl3DPieExploded              70
      xlBarOfPie                   71
      xlXYScatterSmooth            72
      xlXYScatterSmoothNoMarkers   73
      xlXYScatterLines             74
      xlXYScatterLinesNoMarkers    75
      xlAreaStacked                76
      xlAreaStacked100             77
      xl3DAreaStacked              78
      xl3DAreaStacked100           79
      xlDoughnutExploded           80
      xlRadarMarkers               81
      xlRadarFilled                82
      xlSurface                    83
      xlSurfaceWireframe           84
      xlSurfaceTopView             85
      xlSurfaceTopViewWireframe    86
      xlBubble3DEffect             87
      xlStockHLC                   88
      xlStockOHLC                  89
      xlStockVHLC                  90
      xlStockVOHLC                 91
      xlCylinderColClustered       92
      xlCylinderColStacked         93
      xlCylinderColStacked100      94
      xlCylinderBarClustered       95
      xlCylinderBarStacked         96
      xlCylinderBarStacked100      97
      xlCylinderCol                98
      xlConeColClustered           99
      xlConeColStacked             100
      xlConeColStacked100          101
      xlConeBarClustered           102
      xlConeBarStacked             103
      xlConeBarStacked100          104
      xlConeCol                    105
      xlPyramidColClustered        106
      xlPyramidColStacked          107
      xlPyramidColStacked100       108
      xlPyramidBarClustered        109
      xlPyramidBarStacked          110
      xlPyramidBarStacked100       111
      xlPyramidCol                 112

      xl3DArea                   -4098
      xl3DBar                    -4099
      xl3DColumn                 -4100
      xl3DLine                   -4101
      xl3DPie                    -4102
      xl3DSurface                -4103
      xlCombination              -4111
      xlDoughnut                 -4120
      xlRadar                    -4151
      xlXYScatter                -4169


      4PS01 JD, 22 feb 2007, Project Cost Control forms and reports must give overview of the costs of a mainproject as well.
    }
    END.
  }
}

