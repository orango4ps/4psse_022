OBJECT Codeunit 11020223 Object Permission Mgt
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00,4PSSE;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE CheckLicenseExecutePermission@1100525000(ObjectType@1100525001 : 'Table Data,Table,Form,Report,Dataport,Codeunit,XMLport,MenuSuite,Page,,System';ObjectID@1100525002 : Integer) : Boolean;
    VAR
      LicensePermissionRec@1100525000 : Record 2000000043;
    BEGIN
      LicensePermissionRec.SETRANGE("Object Type",ObjectType);
      LicensePermissionRec.SETRANGE("Object Number",ObjectID);
      IF LicensePermissionRec.FINDFIRST THEN
        IF LicensePermissionRec."Execute Permission" <> LicensePermissionRec."Execute Permission"::" " THEN
          EXIT(TRUE)
        ELSE
          EXIT(FALSE);
    END;

    LOCAL PROCEDURE "**4PSSE"@1100285502();
    BEGIN
    END;

    PROCEDURE "Create additive roles"@1100285501(PermissionRoleIDFilter@1100285502 : Text);
    VAR
      PermissionSet@1100285500 : Record 2000000004;
      level@1100285501 : Integer;
    BEGIN
      //4PSSE, 4PS-012
      IF PermissionRoleIDFilter = '' THEN
        EXIT;

      PermissionSet.SETFILTER("Role ID",PermissionRoleIDFilter);
      IF PermissionSet.FINDSET THEN
      REPEAT
       level := GetPermissionLevel(PermissionSet."Role ID");
       CASE level OF
        1:
          CreateLevel1Roles(PermissionSet);
        2,3,4,5,6,7,8,9:
          CreateLevelXRoles(PermissionSet);
       END;

      UNTIL PermissionSet.NEXT=0;
    END;

    LOCAL PROCEDURE GetPermissionLevel@1100285507(RoleID@1100285500 : Code[20]) : Integer;
    VAR
      RoleIDbase@1100285501 : Code[20];
      txtPos@1100285502 : Integer;
      intTxt@1100285503 : Text;
      itemp@1100285504 : Integer;
    BEGIN
      //4PSSE, 4PS-012
      IF STRPOS(RoleID,'-')=0 THEN
        EXIT(0);

      RoleIDbase := COPYSTR(RoleID,1,STRPOS(RoleID,'-')-1);
      intTxt := '0';

      FOR txtPos := 1 TO STRLEN(RoleIDbase) DO BEGIN
        IF RoleIDbase[txtPos] IN [48,49,50,51,52,53,54,55,56,57] THEN  //decimal values for 0..9
          intTxt += FORMAT(RoleIDbase[txtPos]);
      END;

      IF NOT EVALUATE(itemp,intTxt) THEN
        EXIT(0);

      IF (itemp >= 1) AND (itemp <= 9 ) THEN
        EXIT(itemp);

      EXIT(0);
    END;

    LOCAL PROCEDURE CreateLevel1Roles@1100285527(PermissionSet@1100285502 : Record 2000000004);
    VAR
      part1@1100285501 : Text[50];
      part2@1100285503 : Text[50];
      part3@1100285504 : Text[50];
      RoleBase@1100285505 : Code[20];
      NameBase@1100285506 : Text[50];
      NewPermissionSet@1100285507 : Record 2000000004;
    BEGIN
      //4PSSE, 4PS-012

      //'SVE1PUR-SETUP-R'
      part1 := COPYSTR(PermissionSet."Role ID",1,STRPOS(PermissionSet."Role ID",'-'));  //'SVE1PUR-'
      part2 := COPYSTR(PermissionSet."Role ID",STRLEN(part1)+1);                        //'SETUP-R'
      part2 := COPYSTR(part2,1,STRPOS(part2,'-'));                                      //'SETUP-'

      RoleBase := part1+part2;          //'SVE1PUR-SETUP-'

      //'PUR - Setup - Rea'
      part1 := COPYSTR(PermissionSet.Name,1,STRPOS(PermissionSet.Name,'-'));  //'PUR -'
      part2 := COPYSTR(PermissionSet.Name,STRLEN(part1)+1);                   //' Setup - Rea'
      part2 := COPYSTR(part2,1,STRPOS(part2,'-'));                            //' Setup -'

      NameBase := COPYSTR(part1+part2+' ',1,MAXSTRLEN(PermissionSet.Name)-7);      //'PUR - Setup - '

      // NewPermissionSet."Role Type"    := PermissionSet."Role Type";
      // NewPermissionSet."Standard 4PS" := PermissionSet."Standard 4PS";
      NewPermissionSet."Role ID"      := RoleBase + 'I';
      NewPermissionSet.Name           := NameBase + 'Ins';
      IF NewPermissionSet.INSERT THEN
        CreatePermissions('I',PermissionSet,NewPermissionSet);

      NewPermissionSet."Role ID"      := RoleBase + 'M';
      NewPermissionSet.Name           := NameBase + 'Mod';
      IF NewPermissionSet.INSERT THEN
        CreatePermissions('M',PermissionSet,NewPermissionSet);
    END;

    LOCAL PROCEDURE CreateLevelXRoles@1100285528(PermissionSet@1100285500 : Record 2000000004);
    VAR
      part1@1100285506 : Text[50];
      part2@1100285505 : Text[50];
      part3@1100285504 : Text[50];
      RoleBase@1100285503 : Code[20];
      NameBase@1100285502 : Text[50];
      NewPermissionSet@1100285501 : Record 2000000004;
    BEGIN
      //4PSSE, 4PS-012

      //'SVE3FIN-FSETU-R'
      part1 := COPYSTR(PermissionSet."Role ID",1,STRPOS(PermissionSet."Role ID",'-'));  //'SVE3FIN-'
      part2 := COPYSTR(PermissionSet."Role ID",STRLEN(part1)+1);                        //'FSETU-R'
      part2 := COPYSTR(part2,1,STRPOS(part2,'-'));                                      //'FSETU-'

      RoleBase := part1+part2;          //'SVE3FIN-FSETU-'

      //'PUR - Setup - Rea'
      part1 := COPYSTR(PermissionSet.Name,1,STRPOS(PermissionSet.Name,'-'));  //'PUR -'
      part2 := COPYSTR(PermissionSet.Name,STRLEN(part1)+1);                   //' Setup - Rea'
      part2 := COPYSTR(part2,1,STRPOS(part2,'-'));                            //' Setup -'

      NameBase := COPYSTR(part1+part2+' ',1,MAXSTRLEN(PermissionSet.Name)-7);      //'PUR - Setup - '


      // NewPermissionSet."Role Type"    := PermissionSet."Role Type";
      // NewPermissionSet."Standard 4PS" := PermissionSet."Standard 4PS";
      NewPermissionSet."Role ID"      := RoleBase + 'RI';
      NewPermissionSet.Name           := NameBase + 'Rea Ind';
      IF NewPermissionSet.INSERT THEN
        CreatePermissions('RI',PermissionSet,NewPermissionSet);

      NewPermissionSet."Role ID"      := RoleBase + 'D';
      NewPermissionSet.Name           := NameBase + 'Del';
      IF NewPermissionSet.INSERT THEN
        CreatePermissions('D',PermissionSet,NewPermissionSet);

      NewPermissionSet."Role ID"      := RoleBase + 'DI';
      NewPermissionSet.Name           := NameBase + 'Del Ind';
      IF NewPermissionSet.INSERT THEN
        CreatePermissions('DI',PermissionSet,NewPermissionSet);

      NewPermissionSet."Role ID"      := RoleBase + 'I';
      NewPermissionSet.Name           := NameBase + 'Ins';
      IF NewPermissionSet.INSERT THEN
        CreatePermissions('I',PermissionSet,NewPermissionSet);

      NewPermissionSet."Role ID"      := RoleBase + 'II';
      NewPermissionSet.Name           := NameBase + 'Ins Ind';
      IF NewPermissionSet.INSERT THEN
        CreatePermissions('II',PermissionSet,NewPermissionSet);

      NewPermissionSet."Role ID"      := RoleBase + 'M';
      NewPermissionSet.Name           := NameBase + 'Mod';
      IF NewPermissionSet.INSERT THEN
        CreatePermissions('M',PermissionSet,NewPermissionSet);

      NewPermissionSet."Role ID"      := RoleBase + 'MI';
      NewPermissionSet.Name           := NameBase + 'Mod Ind';
      IF NewPermissionSet.INSERT THEN
        CreatePermissions('MI',PermissionSet,NewPermissionSet);

      //>>ITERO.WG
      NewPermissionSet."Role ID"      := RoleBase + 'R';
      NewPermissionSet.Name           := NameBase + 'Rea';
      CreatePermissions('R',PermissionSet,NewPermissionSet);
      //<<ITERO.WG
    END;

    LOCAL PROCEDURE CreatePermissions@1100285569(RoleType@1100285504 : Code[10];ReaPermissionSet@1100285500 : Record 2000000004;NewPermissionSet@1100285501 : Record 2000000004);
    VAR
      OrgPermission@1100285502 : Record 2000000005;
      NewPermission@1100285503 : Record 2000000005;
    BEGIN
      //4PSSE, 4PS-012
      WITH OrgPermission DO BEGIN
        SETRANGE("Role ID",ReaPermissionSet."Role ID");

        IF FINDSET THEN
          REPEAT
            CLEAR(NewPermission);
            IF NOT NewPermission.GET(NewPermissionSet."Role ID","Object Type","Object ID") THEN BEGIN
              NewPermission."Role ID" := NewPermissionSet."Role ID";
              NewPermission."Object Type" := "Object Type";
              NewPermission."Object ID"   := "Object ID";
              NewPermission."Read Permission" := 0;
              NewPermission."Insert Permission" := 0;
              NewPermission."Modify Permission" := 0;
              NewPermission."Delete Permission" := 0;
              NewPermission."Execute Permission" := 0;
              NewPermission.INSERT;
            END;
            IF RoleType IN ['R','I','II','M','MI'] THEN NewPermission."Read Permission" := NewPermission."Read Permission"::Yes
            ELSE IF RoleType IN ['RI'] THEN NewPermission."Read Permission" := NewPermission."Read Permission"::Indirect;
            CumulatePermission("Read Permission",NewPermission."Read Permission");

            IF RoleType = 'I' THEN NewPermission."Insert Permission" := NewPermission."Insert Permission"::Yes
            ELSE IF RoleType = 'II' THEN NewPermission."Insert Permission" := NewPermission."Insert Permission"::Indirect;
            CumulatePermission("Insert Permission",NewPermission."Insert Permission");

            IF RoleType IN ['I','M'] THEN NewPermission."Modify Permission" := NewPermission."Modify Permission"::Yes
            ELSE IF RoleType IN ['MI'] THEN NewPermission."Modify Permission" := NewPermission."Modify Permission"::Indirect;
            CumulatePermission("Modify Permission",NewPermission."Modify Permission");

            IF RoleType IN ['D','I'] THEN NewPermission."Delete Permission" := NewPermission."Delete Permission"::Yes
            ELSE IF RoleType IN ['DI'] THEN NewPermission."Delete Permission" := NewPermission."Delete Permission"::Indirect;
            CumulatePermission("Delete Permission",NewPermission."Delete Permission");
            NewPermission.MODIFY;

          UNTIL NEXT =0;

      END;
    END;

    LOCAL PROCEDURE CumulatePermission@1100525009(RoleOpt@1100525001 : ' ,Yes,Indirect';VAR FunctOpt@1100525000 : ' ,Yes,Indirect');
    BEGIN
      //4PSSE, 4PS-012
      CASE FunctOpt OF
        FunctOpt::" ":
          FunctOpt := RoleOpt;
        FunctOpt::Indirect:
          IF RoleOpt = RoleOpt::Yes THEN
            FunctOpt := RoleOpt;
      END;
    END;

    PROCEDURE SetStd4PSRole@1100285503(VAR PermissionSet@1100285500 : Record 2000000004;Standard4PS@1100285501 : Boolean);
    VAR
      NewPermissionSet@1100285502 : Record 2000000004;
    BEGIN
      //4PSSE, 4PS-012
      NewPermissionSet.GET(PermissionSet."Role ID");
      NewPermissionSet.Name := PermissionSet.Name;
      // NewPermissionSet."Role Type" := PermissionSet."Role Type";
      // NewPermissionSet."Standard 4PS" := Standard4PS;
      NewPermissionSet.MODIFY(FALSE);  //override std-logik
      COMMIT;
      PermissionSet.GET(PermissionSet."Role ID");
      ERROR('');
    END;

    PROCEDURE SetStd4PSRoleGroup@1100285500(VAR RoleGroup4PS@1100285500 : Record 11020570;Standard4PS@1100285501 : Boolean);
    VAR
      NewRoleGroup4PS@1100285502 : Record 11020570;
    BEGIN
      //4PSSE, 4PS-012
      NewRoleGroup4PS.GET(RoleGroup4PS."No.");
      NewRoleGroup4PS.Description := RoleGroup4PS.Description;
      NewRoleGroup4PS."No. Of Permission Sets" := RoleGroup4PS."No. Of Permission Sets";
      NewRoleGroup4PS."No. Of Active Permission Sets" := RoleGroup4PS."No. Of Active Permission Sets";
      NewRoleGroup4PS."Standard 4PS" := Standard4PS;
      NewRoleGroup4PS.MODIFY(FALSE);  //override std-logik
      COMMIT;
      RoleGroup4PS.GET(RoleGroup4PS."No.");
      ERROR('');
    END;

    PROCEDURE SetStd4PSRoleGroupRole@1100285300(VAR RoleGroupRole4PS@1100285500 : Record 11020571;Standard4PS@1100285501 : Boolean);
    VAR
      NewRoleGroupRole4PS@1100285502 : Record 11020571;
    BEGIN
      //4PSSE, 4PS-012
      NewRoleGroupRole4PS.GET(RoleGroupRole4PS."Permission Set Group No.", RoleGroupRole4PS."Permission Set No.");
      // NewRoleGroupRole4PS."Role ID" := RoleGroupRole4PS."Role ID";
      NewRoleGroupRole4PS."Permission Set Name" := RoleGroupRole4PS."Permission Set Name";
      // NewRoleGroupRole4PS."Role Name" := RoleGroupRole4PS."Role Name";
      NewRoleGroupRole4PS.Disabled := RoleGroupRole4PS.Disabled;
      NewRoleGroupRole4PS."Standard 4PS" := Standard4PS;
      NewRoleGroupRole4PS."Updated on" := (TODAY);
      NewRoleGroupRole4PS.MODIFY(FALSE);  //override std-logik
      COMMIT;
      RoleGroupRole4PS.GET(RoleGroupRole4PS."Permission Set Group No.",RoleGroupRole4PS."Permission Set No.");
      ERROR('');
    END;

    BEGIN
    {
      4PSSE, 140123, 4PS-012 new functions "Create additive roles", GetPermissionLevel, CreateLevel1Roles, CreateLevelXRoles, CreatePermissions, CumulatePermission, SetStd4PSRole
    }
    END.
  }
}

