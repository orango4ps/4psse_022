OBJECT Codeunit 11012839 Object Imp. Work Sheet Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      RegExpManagement@1100526200 : Codeunit 11012262;
      Text000@1100528600 : TextConst 'ENU=Export;NOR=Eksport;SVE=Exportera';

    PROCEDURE DetermineHouseNo@1100526200(IAddress@1100526200 : Text[100];VAR OHouseNoExt@1100526201 : Code[10]) OHouseNo : Text[100];
    BEGIN
      EXIT; // Function needs to be extended for international

      IF IAddress = '' THEN
        EXIT;

      WITH RegExpManagement DO
        IF RegExpFindMatches(IAddress, '^([\d]+|)([^\d]*)(\d+) ?(.*)$') THEN BEGIN
          OHouseNoExt := COPYSTR(GetSubMatchFirstMatch(3), 1, MAXSTRLEN(OHouseNoExt));
          EXIT(COPYSTR(GetSubMatchFirstMatch(2), 1, MAXSTRLEN(OHouseNo)));
        END;
    END;

    PROCEDURE DetermineHouseNoAsInt@1100528600(IAddress@1100526200 : Text[100];VAR OHouseNoExt@1100526201 : Code[10]) OHouseNo : Integer;
    VAR
      HouseNo@1100528600 : Code[30];
    BEGIN
      HouseNo := COPYSTR(DetermineHouseNo(IAddress, OHouseNoExt), 1, MAXSTRLEN(HouseNo));
      IF NOT EVALUATE(OHouseNo, HouseNo) THEN
        OHouseNo := 0;
    END;

    PROCEDURE NormalizePostCode@1100526201(PostCode@1100526202 : Code[20];CountryRegionCode@1100526204 : Code[10];VAR ONormalizedPostCode@1100528600 : Code[20]) : Boolean;
    VAR
      CompanyInformation@1100526201 : Record 79;
      CountryRegion@1100526203 : Record 9;
    BEGIN
      EXIT; // Function needs to be extended for international

      IF PostCode <> '' THEN BEGIN
        IF NOT CountryRegion.GET(CountryRegionCode) THEN
          CountryRegionCode := '';
        IF CountryRegionCode = '' THEN BEGIN
          CompanyInformation.GET;
          CountryRegionCode := CompanyInformation."Country/Region Code";
        END;

        IF CountryRegionCode = 'NL' THEN
          WITH RegExpManagement DO
            IF RegExpFindMatches(PostCode, '([1-9]\d{3}) *([A-Z]{2})') THEN BEGIN
              ONormalizedPostCode := STRSUBSTNO('%1 %2', GetSubMatchFirstMatch(0), GetSubMatchFirstMatch(1));
              EXIT(TRUE);
            END;
        IF (CountryRegionCode <> '') AND (CountryRegionCode <> 'NL') THEN BEGIN
          ONormalizedPostCode := PostCode;
          EXIT(TRUE);
        END;
      END;
      ONormalizedPostCode := PostCode;
    END;

    PROCEDURE NormalizePhoneNo@1100526202(IPhoneNo@1100526200 : Text[30]) : Text[30];
    VAR
      PhoneNo@1100526201 : Text[30];
      Part1@1100526202 : Text[10];
      Part2@1100526203 : Text[10];
      Part3@1100526204 : Text[10];
      Part4@1100526205 : Text[10];
      Part5@1100526206 : Text[10];
    BEGIN
      EXIT(IPhoneNo); // Function needs to be extended for international

      PhoneNo := DELCHR(IPhoneNo, '=', '() -');
      WITH RegExpManagement DO BEGIN
        IF RegExpFindMatches(PhoneNo, '^(\+\d{2})(\d{9})$') THEN BEGIN
          Part1 := GetSubMatchFirstMatch(0);
          Part2 := GetSubMatchFirstMatch(1);
          EXIT(STRSUBSTNO('(%1) %2', Part1, Part2));
        END;
        IF RegExpFindMatches(PhoneNo, '^(06)(\d{2})(\d{2})(\d{2})(\d{2})$') THEN BEGIN
          Part1 := GetSubMatchFirstMatch(0);
          Part2 := GetSubMatchFirstMatch(1);
          Part3 := GetSubMatchFirstMatch(2);
          Part4 := GetSubMatchFirstMatch(3);
          Part5 := GetSubMatchFirstMatch(4);
          EXIT(STRSUBSTNO('(%1) %2 %3 %4 %5', Part1, Part2, Part3, Part4, Part5));
        END;
        IF RegExpFindMatches(PhoneNo, '^(\d{3})(\d{3})(\d{2})(\d{2})$') THEN BEGIN
          Part1 := GetSubMatchFirstMatch(0);
          Part2 := GetSubMatchFirstMatch(1);
          Part3 := GetSubMatchFirstMatch(2);
          Part4 := GetSubMatchFirstMatch(3);
          EXIT(STRSUBSTNO('(%1) %2 %3 %4', Part1, Part2, Part3, Part4));
        END;
      END;

      EXIT(IPhoneNo); //C016344
    END;

    PROCEDURE ExportTemplate@1100528602();
    VAR
      TmpObjectImpWorksheetLine@1100528601 : TEMPORARY Record 11071714;
      TempBlob@1100528608 : Record 99008535;
      OStream@1100528603 : OutStream;
      IStream@1100528606 : InStream;
      ExportFileName@1100528607 : Text;
    BEGIN
      TempBlob.Blob.CREATEOUTSTREAM(OStream);
      XMLPORT.EXPORT(XMLPORT::"Import Service Objects", OStream, TmpObjectImpWorksheetLine);
      TempBlob.Blob.CREATEINSTREAM(IStream);
      ExportFileName := 'template.csv';
      DOWNLOADFROMSTREAM(IStream, Text000, '', '', ExportFileName);
    END;

    BEGIN
    END.
  }
}

