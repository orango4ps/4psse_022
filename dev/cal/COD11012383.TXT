OBJECT Codeunit 11012383 Invoice Proposal Batch Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    TableNo=11229907;
    OnRun=VAR
            ServiceContract@1100528602 : Record 11012812;
            ContractInstallment@1100528601 : Record 11071707;
            MaintenanceInvoiceMgt@1100528600 : Codeunit 11012828;
            TransactionDate@1100528603 : Date;
          BEGIN
            CALCFIELDS("Invoice Proposal Type");
            MaintenanceInvoiceMgt.ClearErrors;
            CASE "Invoice Proposal Type" OF
              "Invoice Proposal Type"::"Service Contract":
                BEGIN
                  ServiceContract.GET(SourceCode);
                  TransactionDate := Rec."Transaction Date";
                  InvoiceProposalCode := MaintenanceInvoiceMgt.CreateInvoiceProposalWithErrorLog(
                    ServiceContract, FALSE, ContractInstallment, TransactionDate, TransactionDate, WORKDATE, TransactionDate, "Batch Seq. No.", FALSE, '');
                END;
            END;
            IF GUIALLOWED THEN
              MaintenanceInvoiceMgt.ShowErrorsIfAvailable;
          END;

  }
  CODE
  {
    VAR
      Text000@1100528602 : TextConst 'DEU=%1 von EinzugsermÑchtigungs-ID %2 liegt mehr als 3 Jahre zurÅck.;ENU=%1 of Direct Debit Mandate ID %2  is more than 3 years ago.;NLD=%1 van machtigingsnummer voor incasso %2 is langer dan 3 jaar geleden.';
      Text001@1100528601 : TextConst 'DEU=%1 %2 wurde nicht korrekt eingegeben.;ENU=%1 %2 has not been entered correctly.;NLD=%1 %2 is niet correct ingevuld.';
      Text002@1100528600 : TextConst 'DEU=%1 wurde nicht eingegeben.;ENU=%1 is not entered.;NLD=%1 is niet ingevuld.';
      SourceCode@1100528603 : Code[20];
      Text003@1100528606 : TextConst 'DEU="%1=''%2''";ENU="%1=''%2''";NLD="%1=''%2''";SVE="%1=''%2''"';
      Text004@1100528605 : TextConst 'DEU=in;ENU=in;NLD=in;SVE=i';
      Text005@1100528604 : TextConst 'DEU=Kann Batch %1 nicht starten, %2 %3 mit %4 %5 besteht bereits;ENU=Cannot start batch %1, %2 %3 with %4 %5 already exists;NLD=Batch %1 kan niet opgestart worden omdat %2 %3 met %4 %5 reeds bestaat;SVE=Kan inte start bunt %1, %2 %3 med %4 %5 finns redan';
      Text006@1100528607 : TextConst 'DEU=%1 %2 erstellt.;ENU=%1 %2 created;NLD=%1 %2 aangemaakt;NOR=%1 %2 er opprettet.;SVE=%1 %2 har skapats.';
      InvoiceProposalCode@1100528608 : Code[20];
      Text007@1100528609 : TextConst 'DEU=%1 ''%2'' nicht gefunden;ENU=%1 ''%2'' not found;NLD=%1 ''%2'' niet gevonden;SVE=%1 ''%2'' hittas inte';
      Text008@1100528610 : TextConst 'DEU=%1 ''%2'' ist gesperrt oder geschlossen;ENU=%1 ''%2'' is blocked or closed;NLD=%1 ''%2'' is geblokkeerd of gesloten;SVE=%1 ''%2'' Ñr spÑrrad eller stÑngd';
      Text009@1100528611 : TextConst 'DEU=%1 %2 beendet;ENU=%1 %2 finished;NLD=%1 %2 voltooid;SVE=%1 %2 avslutad';
      Text010@1100528612 : TextConst 'DEU=Batch %1 kann nur automatisch gestartet werden (Åber NAS);ENU=Batch %1 can only be started automatically (via NAS);NLD=Batch %1 kan alleen automatisch (via een NAS) gestart worden;SVE=Bunt %1 kan endast startas automatiskt (via NAS)';
      Text012@1100528614 : TextConst 'DEU=Fortsetzung: @1@@@@@@@@@@@;ENU=Progress: @1@@@@@@@@@@@;NLD=Voortgang: @1@@@@@@@@@@@;NOR=Fremdrift: @1@@@@@@@@@@@;SVE=Fîrlopp: @1@@@@@@@@@@@';
      Text013@1100528613 : TextConst 'DEU=Batch %1 nicht aktiv;ENU=Batch %1 not active;NLD=Batch %1 is niet actief;SVE=Bunt %1 ej aktiv';
      Text014@1100528616 : TextConst 'DEU=Keine Debitorennr. angegeben;ENU=No Customer No. given;NLD=Geen klantnummer opgegeven;SVE=Inget kundnr. angivet';
      Text015@1100528617 : TextConst 'DEU=%1 RechnungsvorschlÑge gebucht;ENU=%1 Invoice Proposals posted;NLD=%1 factuurvoorstellen geboekt;SVE=%1 fakturafîrslag bokfîrda';
      Text016@1100528618 : TextConst 'DEU=%1 Rechnung/Gutschriften gebucht;ENU=%1 Invoice/Credit Memos posted;NLD=%1 (credit)facturen geboekt;SVE=%1 faktura-/kreditfîrslag bokfîrda';
      Text017@1100528619 : TextConst 'DEU=Sind Sie sicher, dass Sie Batch buchen wollen?;ENU=Are you sure you want Post Batch?;NLD=Weet u zeker dat u wilt batch boeken?;SVE=ér du sÑker pÜ att du vill buntbokfîra?';
      Text018@1100528620 : TextConst 'DEU=Nichts zu fakturieren;ENU=Nothing to invoice;NLD=Niets te factureren;SVE=Inget att fakturera';
      Text019@1100528621 : TextConst 'DEU=Keine VertrÑge in Filter;ENU=No Contracts in filter;NLD=Geen contracten in filter;SVE=Inga kontrakt i filter';
      MessageType@1100528622 : 'Warning,Error,Information';
      Text020@1100528623 : TextConst 'DEU=Rechnungsvorschlag %1 erstellt;ENU=Invoice Proposal %1 created;NLD=Factuurvoorstel %1 aangemaakt;SVE=Fakturafîrslag %1 skapad';
      Text021@1100528624 : TextConst 'DEU=Rechnungsvorschlag %1 bereits erstellt;ENU=Invoice Proposal %1 already created;NLD=Factuurvoorstel %1 reeds aangemaakt;SVE=Fakturafîrslag %1 redan skapad';
      Text022@1100528625 : TextConst 'DEU=Rechnung %1 bereits erstellt;ENU=Invoice %1 already created;NLD=Factuur %1 reeds aangemaakt;SVE=Faktura %1 redan skapad';
      Text023@1100528626 : TextConst 'DEU=Gutschrift %1 bereits erstellt;ENU=Credit Memo %1 already created;NLD=Creditfactuur %1 reeds aangemaakt;SVE=Kredit %1 redan skapad';
      Text024@1100528627 : TextConst 'DEU=Gebuchte Rechnung %1 bereits erstellt;ENU=Posted Invoice %1 already created;NLD=Geboekte factuur %1 reeds aangemaakt;SVE=Bokfîrd faktura %1 redan skapad';
      Text025@1100528628 : TextConst 'DEU=Gebuchte Gutschrift %1 bereits erstellt;ENU=Posted Credit Memo %1 already created;NLD=Geboekte creditfactuur %1 reeds aangemaakt;SVE=Bokfîrd kredit %1 redan skapad';
      Text026@1100528615 : TextConst 'DEU=%1 nicht vorhanden;ENU=%1 does not exist;NLD=%1 bestaat niet;NOR=%1 finnes ikke.;SVE=%1 finns inte.';
      Text027@1100528629 : TextConst 'DEU=Das Transaktionsdatum liegt nicht im Datumsintervall, das in der Vollmacht spezifiziert wurde, oder die Vollmacht wurde beendet.;ENU=The Transaction Date is not within the date interval specified in the mandate or the mandate is closed.;NLD=De transactiedatum is niet binnen de datumreeks die is gespecificeerd in de machtiging, of de machtiging is gesloten.';
      Text030@1100528632 : TextConst 'DEU=Das Unterschriftdatum muss in das VollmachtenÅbersichtsfeld eingegeben werden.;ENU=The Date of Signature must be entered in the Mandate List window.;NLD=De ondertekeningsdatum moet worden ingevoerd in het venster Machtigingenlijst.';
      Text031@1100528633 : TextConst 'DEU=Die Vollmacht wurde bereits fÅr eine bestimmte Anzahl von Lastschriftverfahren verwendet und kann nicht mehr verwendet werden.;ENU=The Mandate is already used for specified number of direct debit transactions and cannot be used anymore.;NLD=De machtiging is reeds gebruikt voor het gespecificeerde aantal incasso''s en kan niet meer worden gebruikt.';

    PROCEDURE SetSourceCode@1100528603(ISourceCode@1100528600 : Code[20]);
    BEGIN
      SourceCode := ISourceCode;
    END;

    PROCEDURE GetInvoiceProposalNo@1100528607() : Code[20];
    BEGIN
      EXIT(InvoiceProposalCode);
    END;

    LOCAL PROCEDURE "---"@1100528606();
    BEGIN
    END;

    PROCEDURE RunBatch@1100528608(IInvoiceProposalBatch@1100528600 : Record 11229906);
    VAR
      ServiceContract@1100528601 : Record 11012812;
      InvoiceProposalBatchSeq@1100528604 : Record 11229907;
      ProgressDialog@1100528602 : Dialog;
      RecordCount@1100528603 : Integer;
      RecordCounter@1100528605 : Integer;
    BEGIN
      IF GUIALLOWED THEN BEGIN
        IF NOT IInvoiceProposalBatch.Active THEN
          ERROR(Text013, IInvoiceProposalBatch.ID);
        IF IInvoiceProposalBatch.Mode = IInvoiceProposalBatch.Mode::Automatic THEN
          ERROR(Text010, IInvoiceProposalBatch.ID);
      END;

      FinishPreviousBatchSeqNos(IInvoiceProposalBatch);
      CASE IInvoiceProposalBatch."Invoice Proposal Type" OF
        IInvoiceProposalBatch."Invoice Proposal Type"::"Service Contract":
          BEGIN
            IInvoiceProposalBatch.ApplyFilterSC('', ServiceContract);
            IF ServiceContract.FINDSET THEN BEGIN
              IF GUIALLOWED THEN BEGIN
                RecordCount := ServiceContract.COUNT;
                ProgressDialog.OPEN(Text012);
              END;
              IF CreateBatchSeqNo(IInvoiceProposalBatch, InvoiceProposalBatchSeq) THEN BEGIN
                REPEAT
                  RunSingleServiceContract(InvoiceProposalBatchSeq, ServiceContract);
                  IF GUIALLOWED THEN BEGIN
                    RecordCounter += 1;
                    ProgressDialog.UPDATE(1, ROUND(RecordCount / RecordCounter * 10000, 1));
                  END;
                UNTIL ServiceContract.NEXT = 0;
                InvoiceProposalBatchSeq."Executed on" := CURRENTDATETIME;
                InvoiceProposalBatchSeq.MODIFY(TRUE);
                IF GUIALLOWED THEN BEGIN
                  ProgressDialog.CLOSE;
                  MESSAGE(Text006, InvoiceProposalBatchSeq.FIELDCAPTION("Batch Seq. No."), InvoiceProposalBatchSeq."Batch Seq. No.");
                END;
              END ELSE
                IF GUIALLOWED THEN
                  ERROR(Text005, InvoiceProposalBatchSeq."Invoice Proposal Batch ID", InvoiceProposalBatchSeq.FIELDCAPTION("Batch Seq. No."),
                    InvoiceProposalBatchSeq."Batch Seq. No.", InvoiceProposalBatchSeq.FIELDCAPTION("Transaction Date"), InvoiceProposalBatchSeq."Transaction Date");
            END ELSE
              IF GUIALLOWED THEN
                ERROR(Text019);
          END;
      END;
    END;

    PROCEDURE RerunBatch@1100528601(VAR IOInvoiceProposalBatchSeq@1100528600 : Record 11229907);
    VAR
      ServiceContract@1100528601 : Record 11012812;
      InvoiceProposalBatch@1100528604 : Record 11229906;
      ProgressDialog@1100528606 : Dialog;
      RecordCount@1100528603 : Integer;
      RecordCounter@1100528605 : Integer;
    BEGIN
      IOInvoiceProposalBatchSeq.TESTFIELD(Finished, FALSE);
      FinishBatchSeqNo(IOInvoiceProposalBatchSeq);
      IOInvoiceProposalBatchSeq.TESTFIELD(Finished, FALSE);

      IOInvoiceProposalBatchSeq.CALCFIELDS("Invoice Proposal Type");
      InvoiceProposalBatch.GET(IOInvoiceProposalBatchSeq."Invoice Proposal Batch ID");

      CASE IOInvoiceProposalBatchSeq."Invoice Proposal Type" OF
        IOInvoiceProposalBatchSeq."Invoice Proposal Type"::"Service Contract":
          BEGIN
            InvoiceProposalBatch.ApplyFilterSC(IOInvoiceProposalBatchSeq."Batch Seq. No.", ServiceContract);
            IF ServiceContract.FINDSET THEN BEGIN
              RecordCount := ServiceContract.COUNT;
              ProgressDialog.OPEN(Text012);
              REPEAT
                RunSingleServiceContract(IOInvoiceProposalBatchSeq, ServiceContract);
                RecordCounter += 1;
                ProgressDialog.UPDATE(1, ROUND(RecordCount / RecordCounter * 10000, 1));
              UNTIL ServiceContract.NEXT = 0;
              IOInvoiceProposalBatchSeq."Rerun on" := CURRENTDATETIME;
              IOInvoiceProposalBatchSeq.MODIFY(TRUE);
              ProgressDialog.CLOSE;
              MESSAGE(Text009, IOInvoiceProposalBatchSeq.FIELDCAPTION("Batch Seq. No."), IOInvoiceProposalBatchSeq."Batch Seq. No.");
            END ELSE
              ERROR(Text019);
          END;
      END;
    END;

    LOCAL PROCEDURE RunSingleServiceContract@1100528602(IInvoiceProposalBatchSeq@1100528600 : Record 11229907;ITmpServiceContract@1100528601 : TEMPORARY Record 11012812);
    BEGIN
      ClearErrorMessages(IInvoiceProposalBatchSeq, ITmpServiceContract."No.");
      IF RunPreChecks(IInvoiceProposalBatchSeq, ITmpServiceContract."No.") THEN
        RunBatchSeqInCodeUnit(IInvoiceProposalBatchSeq, ITmpServiceContract."No.");
    END;

    LOCAL PROCEDURE RunPreChecks@1100528619(IInvoiceProposalBatchSeq@1100528600 : Record 11229907;ISourceNo@1100528601 : Code[20]) : Boolean;
    VAR
      ServiceContract@1100528602 : Record 11012812;
    BEGIN
      IInvoiceProposalBatchSeq.CALCFIELDS("Invoice Proposal Type");
      IF IsAlreadyInvoiced(IInvoiceProposalBatchSeq, ISourceNo) THEN
        EXIT;
      CASE IInvoiceProposalBatchSeq."Invoice Proposal Type" OF
        IInvoiceProposalBatchSeq."Invoice Proposal Type"::"Service Contract":
          BEGIN
            IF NOT ServiceContract.GET(ISourceNo) THEN
              ServiceContract.INIT;
            IF NOT CheckCustomerDirectPayment(IInvoiceProposalBatchSeq, ISourceNo, ServiceContract."Direct Debit Mandate ID", TODAY) THEN
              EXIT;
          END;
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE RunBatchSeqInCodeUnit@1100528610(IInvoiceProposalBatchSeq@1100528601 : Record 11229907;ISourceCode@1100528600 : Code[20]);
    VAR
      InvoiceProposalBatchMgt@1100528602 : Codeunit 11012383;
      InvoiceProposalNo@1100528605 : Code[20];
    BEGIN
      InvoiceProposalBatchMgt.SetSourceCode(ISourceCode);
      COMMIT; // Next statement needs a commit
      IF NOT InvoiceProposalBatchMgt.RUN(IInvoiceProposalBatchSeq) THEN BEGIN
        LogErrorMessage(IInvoiceProposalBatchSeq, ISourceCode, GETLASTERRORTEXT, MessageType::Error, TODAY, TIME);
        CLEARLASTERROR;
      END ELSE BEGIN
        InvoiceProposalNo := InvoiceProposalBatchMgt.GetInvoiceProposalNo;
        IF InvoiceProposalNo = '' THEN
          LogErrorMessage(IInvoiceProposalBatchSeq, ISourceCode, Text018, MessageType::Warning, TODAY, TIME)
        ELSE
          LogErrorMessage(IInvoiceProposalBatchSeq, ISourceCode, STRSUBSTNO(Text020, InvoiceProposalNo), MessageType::Information, TODAY, TIME)
      END;
    END;

    LOCAL PROCEDURE CheckCustomerDirectPayment@1100528600(IInvoiceProposalBatchSeq@1100528609 : Record 11229907;ISourceCode@1100528611 : Code[20];IDirectDebitMandateID@1100528602 : Code[35];ITransactionDate@1100528603 : Date) Result : Boolean;
    VAR
      Customer@1100528608 : Record 18;
      ServiceContract@1100528614 : Record 11012812;
      SEPADirectDebitMandate@1100528601 : Record 1230;
      CustomerBankAccount@1100528606 : Record 287;
      CustomerNo@1100528607 : Code[20];
      BankAccountNo@1100528605 : Text[30];
      RecRef@1100528613 : RecordRef;
    BEGIN
      IInvoiceProposalBatchSeq.CALCFIELDS("Invoice Proposal Type");
      CASE IInvoiceProposalBatchSeq."Invoice Proposal Type" OF
        IInvoiceProposalBatchSeq."Invoice Proposal Type"::"Service Contract":
          BEGIN
            ServiceContract.GET(ISourceCode);
            IF ServiceContract."Bill-to Customer No. (Contr.)" = '' THEN BEGIN
              RecRef.GETTABLE(ServiceContract);
              LogErrorMessageWithRef(
                IInvoiceProposalBatchSeq, ISourceCode,
                STRSUBSTNO(Text002, ServiceContract.FIELDCAPTION("Bill-to Customer No. (Contr.)")),
                MessageType::Error, TODAY, TIME, RecRef);
              EXIT(FALSE);
            END ELSE
              CustomerNo := ServiceContract."Bill-to Customer No. (Contr.)";
          END;
      END;

      IF CustomerNo = '' THEN BEGIN
        LogErrorMessage(IInvoiceProposalBatchSeq, ISourceCode, Text014, MessageType::Error, TODAY, TIME);
        EXIT(FALSE);
      END;

      IF NOT Customer.GET(CustomerNo) THEN BEGIN
        LogErrorMessage(IInvoiceProposalBatchSeq, ISourceCode, STRSUBSTNO(Text007, Customer.TABLECAPTION, CustomerNo), MessageType::Error, TODAY, TIME);
        EXIT(FALSE);
      END;

      IF SEPADirectDebitMandate.GET(IDirectDebitMandateID) THEN BEGIN
        IF NOT CustomerBankAccount.GET(CustomerNo, SEPADirectDebitMandate."Customer Bank Account Code") THEN BEGIN
          IF Customer."Preferred Bank Account Code" <> '' THEN BEGIN
            IF NOT CustomerBankAccount.GET(CustomerNo, Customer."Preferred Bank Account Code") THEN BEGIN
              RecRef.GETTABLE(CustomerBankAccount);
              LogErrorMessageWithRef(
                IInvoiceProposalBatchSeq, ISourceCode,
                STRSUBSTNO(Text026, CustomerBankAccount.TABLECAPTION),
                MessageType::Error, TODAY, TIME, RecRef);
              EXIT(FALSE);
            END;
          END;
          CustomerBankAccount.SETRANGE("Customer No.",CustomerNo);
          IF NOT CustomerBankAccount.FINDFIRST THEN BEGIN
            RecRef.GETTABLE(CustomerBankAccount);
            LogErrorMessageWithRef(
              IInvoiceProposalBatchSeq, ISourceCode,
              STRSUBSTNO(Text026, CustomerBankAccount.TABLECAPTION),
              MessageType::Error, TODAY, TIME, RecRef);
          END;
        END;
        IF CustomerBankAccount."Country/Region Code" = '' THEN BEGIN
          RecRef.GETTABLE(CustomerBankAccount);
          LogErrorMessageWithRef(
            IInvoiceProposalBatchSeq, ISourceCode,
            STRSUBSTNO(Text002, CustomerBankAccount.FIELDCAPTION("Country/Region Code")),
            MessageType::Error, TODAY, TIME, RecRef);
          Result := FALSE;
        END;

        IF (SEPADirectDebitMandate."Last Mandate Date" <> 0D) AND
           (SEPADirectDebitMandate."Last Mandate Date" < CALCDATE('<-3Y>', ITransactionDate))
        THEN BEGIN
          RecRef.GETTABLE(SEPADirectDebitMandate);
          LogErrorMessageWithRef(
            IInvoiceProposalBatchSeq, ISourceCode,
            STRSUBSTNO(Text000, SEPADirectDebitMandate.FIELDCAPTION("Last Mandate Date"), IDirectDebitMandateID),
            MessageType::Error, TODAY, TIME, RecRef);
          Result := FALSE;
        END;
        IF SEPADirectDebitMandate.Blocked OR SEPADirectDebitMandate.Closed THEN BEGIN
          RecRef.GETTABLE(SEPADirectDebitMandate);
          LogErrorMessageWithRef(
            IInvoiceProposalBatchSeq, ISourceCode,
            STRSUBSTNO(Text008, SEPADirectDebitMandate.FIELDCAPTION(ID), IDirectDebitMandateID),
            MessageType::Error, TODAY, TIME, RecRef);
          Result := FALSE;
        END;
        IF NOT SEPADirectDebitMandate.IsMandateActive(ITransactionDate) THEN BEGIN
          RecRef.GETTABLE(SEPADirectDebitMandate);
          LogErrorMessageWithRef(
            IInvoiceProposalBatchSeq, ISourceCode,
            STRSUBSTNO(Text027),
            MessageType::Error, TODAY, TIME, RecRef);
          Result := FALSE;
        END;
        IF SEPADirectDebitMandate."Date of Signature" = 0D THEN BEGIN
          RecRef.GETTABLE(SEPADirectDebitMandate);
          LogErrorMessageWithRef(
            IInvoiceProposalBatchSeq, ISourceCode,
            STRSUBSTNO(Text030),
            MessageType::Error, TODAY, TIME, RecRef);
          Result := FALSE;
        END;
        IF (SEPADirectDebitMandate."Expected Number of Debits" = SEPADirectDebitMandate."Debit Counter") OR
           ((SEPADirectDebitMandate."Type of Payment" = SEPADirectDebitMandate."Type of Payment"::OneOff) AND
            (SEPADirectDebitMandate."Debit Counter" >= 1))
        THEN BEGIN
          RecRef.GETTABLE(SEPADirectDebitMandate);
          LogErrorMessageWithRef(
            IInvoiceProposalBatchSeq, ISourceCode,
            STRSUBSTNO(Text031),
            MessageType::Error, TODAY, TIME, RecRef);
          Result := FALSE;
        END;
      END ELSE BEGIN
        RecRef.GETTABLE(SEPADirectDebitMandate);
        LogErrorMessageWithRef(
          IInvoiceProposalBatchSeq, ISourceCode,
          STRSUBSTNO(Text007, SEPADirectDebitMandate.FIELDCAPTION(ID), IDirectDebitMandateID),
          MessageType::Error, TODAY, TIME, RecRef);
        Result := FALSE;
      END;
    END;

    LOCAL PROCEDURE CreateBatchSeqNo@1100528611(IInvoiceProposalBatch@1100528601 : Record 11229906;VAR OInvoiceProposalBatchSeq@1100528602 : Record 11229907) : Boolean;
    VAR
      InvoiceProposalBatchSeq@1100528600 : Record 11229907;
      FromInvoiceProposalBatchFilter@1100528603 : Record 11229909;
      ToInvoiceProposalBatchFilter@1100528604 : Record 11229909;
    BEGIN
      CLEAR(OInvoiceProposalBatchSeq);
      InvoiceProposalBatchSeq."Invoice Proposal Batch ID" := IInvoiceProposalBatch.ID;
      InvoiceProposalBatchSeq.DetermineTransactionDate;
      InvoiceProposalBatchSeq.SETRANGE("Invoice Proposal Batch ID", InvoiceProposalBatchSeq."Invoice Proposal Batch ID");
      InvoiceProposalBatchSeq.SETRANGE("Transaction Date", InvoiceProposalBatchSeq."Transaction Date");
      IF NOT InvoiceProposalBatchSeq.FINDFIRST THEN BEGIN
        OInvoiceProposalBatchSeq."Invoice Proposal Batch ID" := IInvoiceProposalBatch.ID;
        OInvoiceProposalBatchSeq.INSERT(TRUE);

        FromInvoiceProposalBatchFilter.SETRANGE("Invoice Proposal Batch ID", IInvoiceProposalBatch.ID);
        FromInvoiceProposalBatchFilter.SETRANGE("Batch Seq. No.", '');
        IF FromInvoiceProposalBatchFilter.FINDSET THEN
          REPEAT
            ToInvoiceProposalBatchFilter := FromInvoiceProposalBatchFilter;
            ToInvoiceProposalBatchFilter."Batch Seq. No." := OInvoiceProposalBatchSeq."Batch Seq. No.";
            ToInvoiceProposalBatchFilter.INSERT(TRUE);
          UNTIL FromInvoiceProposalBatchFilter.NEXT = 0;
        EXIT(TRUE);
      END ELSE
        OInvoiceProposalBatchSeq := InvoiceProposalBatchSeq;
    END;

    LOCAL PROCEDURE ClearErrorMessages@1100528605(IInvoiceProposalBatchSeq@1100528601 : Record 11229907;ISourceCode@1100528602 : Code[20]);
    VAR
      InvProposalBatchMessage@1100528600 : Record 11229908;
    BEGIN
      InvProposalBatchMessage.SETRANGE("Batch Seq. No.", IInvoiceProposalBatchSeq."Batch Seq. No.");
      InvProposalBatchMessage.SETRANGE("Source Code", ISourceCode);
      InvProposalBatchMessage.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE LogErrorMessage@1100528623(IInvoiceProposalBatchSeq@1100528606 : Record 11229907;ISourceCode@1100528601 : Code[20];IMessage@1100528600 : Text;IMessageType@1100528607 : 'Warning,Error';IReportingDate@1100528605 : Date;IReportingTime@1100528604 : Time);
    VAR
      InvProposalBatchMessage@1100528602 : Record 11229908;
      LineNo@1100528603 : Integer;
    BEGIN
      IF IMessage = '' THEN
        EXIT;
      InvProposalBatchMessage.SETRANGE("Batch Seq. No.", IInvoiceProposalBatchSeq."Batch Seq. No.");
      IF InvProposalBatchMessage.FINDLAST THEN
        LineNo := InvProposalBatchMessage."Line No.";
      LineNo += 10000;

      InvProposalBatchMessage.VALIDATE("Batch Seq. No.", IInvoiceProposalBatchSeq."Batch Seq. No.");
      InvProposalBatchMessage."Line No." := LineNo;
      InvProposalBatchMessage."Source Code" := ISourceCode;
      InvProposalBatchMessage."Log Date" := IReportingDate;
      InvProposalBatchMessage."Log Time" := IReportingTime;
      InvProposalBatchMessage.VALIDATE(Message, COPYSTR(IMessage, 1, MAXSTRLEN(InvProposalBatchMessage.Message)));
      InvProposalBatchMessage."Message Type" := IMessageType;
      InvProposalBatchMessage.INSERT(TRUE);
    END;

    LOCAL PROCEDURE LogErrorMessageWithRef@1100528628(IInvoiceProposalBatchSeq@1100528603 : Record 11229907;IServiceContractNo@1100528601 : Code[20];IMessage@1100528600 : Text[250];IMessageType@1100528602 : 'Warning,Error';IReportingDate@1100528605 : Date;IReportingTime@1100528604 : Time;IRecRef@1100528606 : RecordRef);
    VAR
      FieldRef@1100528607 : FieldRef;
      KeyRef@1100528608 : KeyRef;
      i@1100528609 : Integer;
    BEGIN
      IF IMessage = '' THEN
        EXIT;
      IMessage := STRSUBSTNO('%1 %2 %3 ', IMessage, Text004, IRecRef.CAPTION);
      KeyRef := IRecRef.KEYINDEX(1);
      FOR i := 1 TO KeyRef.FIELDCOUNT DO BEGIN
        FieldRef := KeyRef.FIELDINDEX(i);
        IF i > 1 THEN
          IMessage := IMessage + ', ';
        IMessage := IMessage + STRSUBSTNO(Text003, FieldRef.CAPTION, FieldRef.VALUE);
      END;

      LogErrorMessage(IInvoiceProposalBatchSeq, IServiceContractNo, IMessage, IMessageType, IReportingDate, IReportingTime);
    END;

    LOCAL PROCEDURE IsAlreadyInvoiced@1100528604(IInvoiceProposalBatchSeq@1100528601 : Record 11229907;ISourceNo@1100528600 : Code[20]) : Boolean;
    VAR
      SalesLine@1100528603 : Record 37;
      SalesInvoiceLine@1100528604 : Record 113;
      SalesCrMemoLine@1100528605 : Record 115;
      ErrorMsg@1100528602 : Text;
    BEGIN
      IInvoiceProposalBatchSeq.CALCFIELDS("Invoice Proposal Type");

      SalesLine.SETCURRENTKEY("Batch Seq. No.");
      SalesLine.SETRANGE("Batch Seq. No.", IInvoiceProposalBatchSeq."Batch Seq. No.");
      SalesLine.SETRANGE("Document Type", SalesLine."Document Type"::"Invoice Proposal");
      CASE IInvoiceProposalBatchSeq."Invoice Proposal Type" OF
        IInvoiceProposalBatchSeq."Invoice Proposal Type"::"Service Contract":
          BEGIN
            SalesLine.SETRANGE("Service Invoice", TRUE);
            SalesLine.SETRANGE("Service Contract No.", ISourceNo);
          END;
      END;
      IF SalesLine.FINDFIRST THEN
        ErrorMsg := STRSUBSTNO(Text021, SalesLine."Document No.");

      IF ErrorMsg = '' THEN BEGIN
        SalesLine.SETRANGE("Document Type", SalesLine."Document Type"::Invoice);
        IF SalesLine.FINDFIRST THEN
          ErrorMsg := STRSUBSTNO(Text022, SalesLine."Document No.");
      END;

      IF ErrorMsg = '' THEN BEGIN
        SalesLine.SETRANGE("Document Type", SalesLine."Document Type"::"Credit Memo");
        IF SalesLine.FINDFIRST THEN
          ErrorMsg := STRSUBSTNO(Text023, SalesLine."Document No.");
      END;

      IF ErrorMsg = '' THEN BEGIN
        SalesInvoiceLine.SETCURRENTKEY("Batch Seq. No.");
        SalesInvoiceLine.SETRANGE("Batch Seq. No.", IInvoiceProposalBatchSeq."Batch Seq. No.");
        CASE IInvoiceProposalBatchSeq."Invoice Proposal Type" OF
          IInvoiceProposalBatchSeq."Invoice Proposal Type"::"Service Contract":
            BEGIN
              SalesInvoiceLine.SETRANGE("Service Invoice", TRUE);
              SalesInvoiceLine.SETRANGE("Service Contract No.", ISourceNo);
            END;
        END;
        IF SalesInvoiceLine.FINDFIRST THEN
          ErrorMsg := STRSUBSTNO(Text024, SalesInvoiceLine."Document No.");
      END;

      IF ErrorMsg = '' THEN BEGIN
        SalesCrMemoLine.SETCURRENTKEY("Batch Seq. No.");
        SalesCrMemoLine.SETRANGE("Batch Seq. No.", IInvoiceProposalBatchSeq."Batch Seq. No.");
        CASE IInvoiceProposalBatchSeq."Invoice Proposal Type" OF
          IInvoiceProposalBatchSeq."Invoice Proposal Type"::"Service Contract":
            BEGIN
              SalesCrMemoLine.SETRANGE("Service Invoice", TRUE);
              SalesCrMemoLine.SETRANGE("Service Contract No.", ISourceNo);
            END;
        END;
        IF SalesCrMemoLine.FINDFIRST THEN
          ErrorMsg := STRSUBSTNO(Text025, SalesCrMemoLine."Document No.");
      END;

      IF ErrorMsg <> '' THEN
        LogErrorMessage(IInvoiceProposalBatchSeq, ISourceNo, ErrorMsg, MessageType::Information, TODAY, TIME);
      EXIT(ErrorMsg <> '');
    END;

    LOCAL PROCEDURE FinishPreviousBatchSeqNos@1100528612(IInvoiceProposalBatch@1100528600 : Record 11229906);
    VAR
      InvoiceProposalBatchSeq@1100528601 : Record 11229907;
    BEGIN
      InvoiceProposalBatchSeq.SETCURRENTKEY("Invoice Proposal Batch ID");
      InvoiceProposalBatchSeq.SETRANGE("Invoice Proposal Batch ID", IInvoiceProposalBatch.ID);
      InvoiceProposalBatchSeq.SETRANGE(Finished, FALSE);
      IF InvoiceProposalBatchSeq.FINDSET THEN
        REPEAT
          FinishBatchSeqNo(InvoiceProposalBatchSeq);
        UNTIL InvoiceProposalBatchSeq.NEXT = 0;
    END;

    LOCAL PROCEDURE FinishBatchSeqNo@1100528614(VAR IOInvoiceProposalBatchSeq@1100528600 : Record 11229907);
    VAR
      CustLedgerEntry@1100528602 : Record 21;
    BEGIN
      IF IOInvoiceProposalBatchSeq.Finished THEN
        EXIT;

      IOInvoiceProposalBatchSeq.Finished := TRUE;
      IOInvoiceProposalBatchSeq.MODIFY;

      //CustLedgerEntry.SETCURRENTKEY("Batch Seq. No.");
      //CustLedgerEntry.SETRANGE("Batch Seq. No.", IOInvoiceProposalBatchSeq."Batch Seq. No.");
      //IF CustLedgerEntry.FINDSET THEN
      //  REPEAT
      //    DetailLine.SETCURRENTKEY("Account Type", "Serial No. (Entry)");
      //    DetailLine.SETRANGE("Account Type", DetailLine."Account Type"::Customer);
      //    DetailLine.SETRANGE("Serial No. (Entry)", CustLedgerEntry."Entry No.");
      //    DetailLine.SETFILTER(Status, '<>%1', DetailLine.Status::Proposal);
      //    IF NOT DetailLine.ISEMPTY THEN BEGIN
      //      IOInvoiceProposalBatchSeq.Finished := TRUE;
      //      IOInvoiceProposalBatchSeq.MODIFY;
      //    END;
      //  UNTIL (CustLedgerEntry.NEXT = 0) OR IOInvoiceProposalBatchSeq.Finished;
      //COMMIT;
    END;

    LOCAL PROCEDURE "----"@1100528609();
    BEGIN
    END;

    PROCEDURE BatchPostInvoiceProposals@1100528613(IInvoiceProposalBatchSeq@1100528601 : Record 11229907);
    VAR
      SalesHeader@1100528602 : Record 36;
      SalesPost@1100528600 : Codeunit 80;
      NoOfProposalsPosted@1100528604 : Integer;
      Confirmed@1100528605 : Boolean;
    BEGIN
      Confirmed := NOT GUIALLOWED;
      IF GUIALLOWED THEN
        Confirmed := CONFIRM(Text017);
      IF NOT Confirmed THEN
        EXIT;
      SalesHeader.SETRANGE("Document Type", SalesHeader."Document Type"::"Invoice Proposal");
      SalesHeader.SETRANGE("Batch Seq. No.", IInvoiceProposalBatchSeq."Batch Seq. No.");
      IF SalesHeader.FINDSET THEN
        REPEAT
          IF SalesPost.RUN(SalesHeader) THEN
            NoOfProposalsPosted += 1;
          COMMIT;
        UNTIL SalesHeader.NEXT = 0;
      IF GUIALLOWED THEN
        MESSAGE(Text015, NoOfProposalsPosted);
    END;

    PROCEDURE BatchPostInvoices@1100528615(IInvoiceProposalBatchSeq@1100528601 : Record 11229907);
    VAR
      SalesHeader@1100528602 : Record 36;
      SalesPost@1100528600 : Codeunit 80;
      NoOfProposalsPosted@1100528604 : Integer;
      Confirmed@1100528605 : Boolean;
    BEGIN
      Confirmed := NOT GUIALLOWED;
      IF GUIALLOWED THEN
        Confirmed := CONFIRM(Text017);
      IF NOT Confirmed THEN
        EXIT;
      SalesHeader.SETFILTER("Document Type", '%1|%2', SalesHeader."Document Type"::Invoice, SalesHeader."Document Type"::"Credit Memo");
      SalesHeader.SETRANGE("Batch Seq. No.", IInvoiceProposalBatchSeq."Batch Seq. No.");
      IF SalesHeader.FINDSET THEN
        REPEAT
          IF SalesPost.RUN(SalesHeader) THEN
            NoOfProposalsPosted += 1;
          COMMIT;
        UNTIL SalesHeader.NEXT = 0;
      IF GUIALLOWED THEN
        MESSAGE(Text016, NoOfProposalsPosted);
    END;

    BEGIN
    END.
  }
}

