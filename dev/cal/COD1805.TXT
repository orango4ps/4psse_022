OBJECT Codeunit 1805 Import Config. Package Files
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW113.00;
  }
  PROPERTIES
  {
    TableNo=2000000170;
    OnRun=VAR
            AssistedCompanySetupStatus@1001 : Record 1802;
            UserPersonalization@1501 : Record 2000000073;
            LogInManagement@1000 : Codeunit 40;
            LanguageManagement@1002 : Codeunit 43;
            CurrentLanguageID@1500 : Integer;
          BEGIN
            AssistedCompanySetupStatus.GET(COMPANYNAME);
            AssistedCompanySetupStatus."Server Instance ID" := SERVICEINSTANCEID;
            AssistedCompanySetupStatus."Company Setup Session ID" := SESSIONID;
            AssistedCompanySetupStatus.MODIFY;
            COMMIT;

            UserPersonalization.GET(USERSECURITYID);
            CurrentLanguageID := GLOBALLANGUAGE;
            IF (UserPersonalization."Language ID" <> "Language ID") AND ("Language ID" <> 0) THEN
              IF NOT LanguageManagement.TrySetGlobalLanguage("Language ID") THEN
                ERROR(InvalidLanguageIDErr,"Language ID");

            LogInManagement.InitializeCompany;
            ImportConfigurationPackageFiles(Rec);

            GLOBALLANGUAGE(CurrentLanguageID);
          END;

  }
  CODE
  {
    VAR
      NoPackDefinedMsg@1000 : TextConst '@@@="%1 = Filter String";ENU=Critical Error: No configuration package file is defined within the specified filter %1. Please contact your system administrator.;NOR=Kritisk feil: Det er ikke definert noen konfigurasjonspakkefil i det angitte filteret %1. Kontakt systemansvarlig.;SVE=Kritiskt fel: Ingen konfigurationspaketfil har definierats f”r det angivna filtret %1. Kontakta systemadministrat”ren.';
      ImportStartedMsg@1003 : TextConst '@@@="%1 = Configuration Package Code, %2 = Company Name";ENU=The import of the %1 configuration package to the %2 company has started.;NOR=Importen av konfigurasjonspakken for %1 til selskapet %2 har startet.;SVE=Importen av konfigurationspaketet %1 till f”retaget %2 har p†b”rjats.';
      ImportSuccessfulMsg@1001 : TextConst '@@@="%1 = Configuration Package Code, %2 = Company Name";ENU=The configuration package %1 was successfully imported to the %2 company.;NOR=Konfigurasjonspakken %1 ble importert til selskapet %2.;SVE=Konfigurationspaketet %1 har importerats till f”retaget %2.';
      ApplicationStartedMsg@1002 : TextConst '@@@="%1 = Configuration Package Code, %2 = Company Name";ENU=Application of the %1 configuration package to the %2 company has started.;NOR=Bruk av konfigurasjonspakken for %1 til selskapet %2 har startet.;SVE=Till„mpningen av konfigurationspaketet %1 p† f”retaget %2 har p†b”rjats.';
      ApplicationSuccessfulMsg@1005 : TextConst '@@@="%1 = Configuration Package Code, %2 = Company Name";ENU=The configuration package %1 was successfully applied to the %2 company.;NOR=Konfigurasjonspakken %1 ble importert tatt i bruk for selskapet %2.;SVE=Konfigurationspaketet %1 har till„mpats p† f”retaget %2.';
      ApplicationFailedMsg@1004 : TextConst '@@@="%1 = No. of errors, %2 = Package Code, %3 = Company Name";ENU=Critical Error: %1 errors occurred during the package application. Please contact your system administrator.;NOR=Kritisk feil: Det oppstod %1 feil under bruk av pakkeprogrammet. Kontakt systemansvarlig.;SVE=Kritiskt fel: %1 fel intr„ffade n„r paketet f”r f”retaget till„mpades. Kontakta systemadministrat”ren.';
      PackageLbl@1006 : TextConst 'ENU=Package;NOR=Pakke;SVE=Paket';
      CompanyLbl@1007 : TextConst 'ENU=Company;NOR=Selskap;SVE=F”retag';
      InvalidLanguageIDErr@1008 : TextConst '@@@=%1 is the language code, tried to be set;ENU=Cannot set the language to %1. The language pack ID number is invalid.;NOR=Kan ikke sette spr†ket til %1. ID-nummeret for spr†kpakken er ugyldig.';

    LOCAL PROCEDURE ImportConfigurationPackageFiles@1(VAR ConfigurationPackageFile@1000 : Record 2000000170);
    VAR
      AssistedCompanySetupStatus@1007 : Record 1802;
      TempConfigSetupSystemRapidStart@1006 : TEMPORARY Record 8627;
      JobQueueEntry@1009 : Record 472;
      JobQueueLogEntry@1011 : Record 474;
      ConfigPackageImport@1005 : Codeunit 8620;
      AssistedCompanySetup@1004 : Codeunit 1800;
      MessageText@1010 : Text;
      ServerTempFileName@1003 : Text;
      ErrorCount@1002 : Integer;
      TotalNoOfErrors@1001 : Integer;
    BEGIN
      AssistedCompanySetupStatus.GET(COMPANYNAME);
      ConfigurationPackageFile.SETCURRENTKEY("Processing Order");
      IF ConfigurationPackageFile.FINDSET THEN BEGIN
        REPEAT
          MessageText := STRSUBSTNO(ImportStartedMsg,ConfigurationPackageFile.Code,COMPANYNAME);
          InitVirtualJobQueueEntry(JobQueueEntry,AssistedCompanySetupStatus."Task ID");
          UpdateVirtualJobQueueEntry(JobQueueEntry,MessageText);
          JobQueueEntry.InsertLogEntry(JobQueueLogEntry);
          MESSAGE(MessageText);

          ServerTempFileName := AssistedCompanySetup.GetConfigurationPackageFile(ConfigurationPackageFile);
          ConfigPackageImport.ImportRapidStartPackage(ServerTempFileName,TempConfigSetupSystemRapidStart);
          MessageText := STRSUBSTNO(ImportSuccessfulMsg,ConfigurationPackageFile.Code,COMPANYNAME);
          JobQueueLogEntry.Description := COPYSTR(MessageText,1,MAXSTRLEN(JobQueueLogEntry.Description));
          JobQueueEntry.FinalizeLogEntry(JobQueueLogEntry);
          MESSAGE(MessageText);

          MessageText := STRSUBSTNO(ApplicationStartedMsg,ConfigurationPackageFile.Code,COMPANYNAME);
          UpdateVirtualJobQueueEntry(JobQueueEntry,MessageText);
          JobQueueEntry.InsertLogEntry(JobQueueLogEntry);
          MESSAGE(MessageText);

          ErrorCount := TempConfigSetupSystemRapidStart.ApplyPackages;
          TotalNoOfErrors += ErrorCount;

          ERASE(ServerTempFileName);

          IF ErrorCount > 0 THEN BEGIN
            MessageText :=
              GetApplicationErrorSourceText(
                COMPANYNAME,TempConfigSetupSystemRapidStart."Package Code") + ' ' +
              STRSUBSTNO(ApplicationFailedMsg,ErrorCount);
            JobQueueEntry.Status := JobQueueEntry.Status::Error;
            JobQueueEntry.SetErrorMessage(MessageText);
          END ELSE BEGIN
            MessageText := STRSUBSTNO(ApplicationSuccessfulMsg,ConfigurationPackageFile.Code,COMPANYNAME);
            JobQueueLogEntry.Description := COPYSTR(MessageText,1,MAXSTRLEN(JobQueueLogEntry.Description));
            TempConfigSetupSystemRapidStart.DELETE;
          END;
          JobQueueEntry.FinalizeLogEntry(JobQueueLogEntry);
          MESSAGE(MessageText);

        UNTIL ConfigurationPackageFile.NEXT = 0;
        IF TotalNoOfErrors > 0 THEN
          AssistedCompanySetupStatus.VALIDATE("Import Failed",TRUE)
        ELSE
          AssistedCompanySetupStatus.VALIDATE("Package Imported",TRUE);
      END ELSE BEGIN
        AssistedCompanySetupStatus.VALIDATE("Import Failed",TRUE);
        MessageText := STRSUBSTNO(NoPackDefinedMsg,ConfigurationPackageFile.GETFILTERS);
        InitVirtualJobQueueEntry(JobQueueEntry,AssistedCompanySetupStatus."Task ID");
        UpdateVirtualJobQueueEntry(JobQueueEntry,MessageText);
        JobQueueEntry.InsertLogEntry(JobQueueLogEntry);
        JobQueueEntry.Status := JobQueueEntry.Status::Error;
        JobQueueEntry.SetErrorMessage(MessageText);
        JobQueueEntry.FinalizeLogEntry(JobQueueLogEntry);
        MESSAGE(MessageText);
      END;
      AssistedCompanySetupStatus."Company Setup Session ID" := 0;
      AssistedCompanySetupStatus."Server Instance ID" := 0;
      AssistedCompanySetupStatus.MODIFY;
      COMMIT;
    END;

    LOCAL PROCEDURE InitVirtualJobQueueEntry@2(VAR JobQueueEntry@1000 : Record 472;TaskID@1001 : GUID);
    BEGIN
      WITH JobQueueEntry DO BEGIN
        INIT;
        ID := TaskID;
        "User ID" := USERID;
        "Object Type to Run" := "Object Type to Run"::Codeunit;
        "Object ID to Run" := CODEUNIT::"Import Config. Package Files";
      END;
    END;

    LOCAL PROCEDURE UpdateVirtualJobQueueEntry@3(VAR JobQueueEntry@1000 : Record 472;TaskDescription@1002 : Text);
    BEGIN
      WITH JobQueueEntry DO BEGIN
        "User Session Started" := CURRENTDATETIME;
        Description := COPYSTR(TaskDescription,1,MAXSTRLEN(Description));
      END;
    END;

    [EventSubscriber(Page,674,OnShowDetails)]
    LOCAL PROCEDURE OnShowDetailedLog@4(JobQueueLogEntry@1000 : Record 474);
    VAR
      ConfigPackageError@1002 : Record 8617;
      ApplCompanyName@1001 : Text;
      PackageCode@1003 : Text;
    BEGIN
      IF (JobQueueLogEntry."Object ID to Run" = CODEUNIT::"Import Config. Package Files") AND
         (JobQueueLogEntry.Status = JobQueueLogEntry.Status::Error) AND
         ParseApplicationErrorText(ApplCompanyName,PackageCode,JobQueueLogEntry.GetErrorMessage)
      THEN BEGIN
        ConfigPackageError.CHANGECOMPANY(ApplCompanyName);
        ConfigPackageError.SETRANGE("Package Code",PackageCode);
        PAGE.RUNMODAL(0,ConfigPackageError);
      END;
    END;

    LOCAL PROCEDURE ParseApplicationErrorText@8(VAR ApplCompanyName@1004 : Text;VAR PackageCode@1000 : Text;ErrorText@1001 : Text) : Boolean;
    BEGIN
      ApplCompanyName := ExtractSubstring(ErrorText);
      PackageCode := ExtractSubstring(ErrorText);
      EXIT((ApplCompanyName <> '') AND (PackageCode <> ''));
    END;

    LOCAL PROCEDURE GetApplicationErrorSourceText@5(ApplCompanyName@1000 : Text;PackageCode@1001 : Text) : Text;
    BEGIN
      EXIT(
        STRSUBSTNO(
          '%1 <%2>, %3 <%4>.',CompanyLbl,ApplCompanyName,PackageLbl,PackageCode));
    END;

    LOCAL PROCEDURE ExtractSubstring@17(VAR ErrorText@1000 : Text) Substring : Text;
    VAR
      StartPos@1002 : Integer;
      EndPos@1001 : Integer;
    BEGIN
      StartPos := STRPOS(ErrorText,'<');
      EndPos := STRPOS(ErrorText,'>');
      IF (StartPos <> 0) AND (EndPos <> 0) THEN BEGIN
        Substring := COPYSTR(ErrorText,StartPos + 1,EndPos - StartPos - 1);
        ErrorText := COPYSTR(ErrorText,EndPos + 1);
      END;
    END;

    BEGIN
    {
      // This code unit is executed in a separate session. Messages and errors will be output to the event log.
    }
    END.
  }
}

