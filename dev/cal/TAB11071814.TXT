OBJECT Table 11071814 Serv. Surv. Object Add. Act.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               TestObjectsNotCreated;
             END;

    OnModify=BEGIN
               TestObjectsNotCreated;
             END;

    OnDelete=VAR
               SurvObjAddActProperty@1100528600 : Record 11071955;
             BEGIN
               TestObjectsNotCreated;
               IF SurvObjAddActProperty.GET(
                 "Survey No.", "Location Code", "Seq. No.", "Maintenance Scheme Code", "Line Type", "Type Code", "Line No.", "Belongs to Scheme")
               THEN
                 SurvObjAddActProperty.DELETE(TRUE);
             END;

    CaptionML=[ENU=Service Survey Object Additional Activity;
               NOR=Service kartl.obj. Tilleggsaktivitet;
               SVE=Srv.kartl.obj. ytterl. akt.];
    LookupPageID=Page11126126;
    DrillDownPageID=Page11126126;
  }
  FIELDS
  {
    { 10  ;   ;Survey No.          ;Code20        ;TableRelation="Service Survey";
                                                   CaptionML=[ENU=Survey No.;
                                                              NOR=Kartlegging nr.;
                                                              SVE=Kartl„ggningsnr];
                                                   NotBlank=Yes }
    { 20  ;   ;Location Code       ;Code10        ;TableRelation="Service Survey Location"."Location Code" WHERE (Survey No.=FIELD(Survey No.));
                                                   CaptionML=[ENU=Location Code;
                                                              NOR=Plasseringkode;
                                                              SVE=Lagerst„llekod];
                                                   NotBlank=Yes }
    { 50  ;   ;Seq. No.            ;Integer       ;TableRelation="Serv. Surv. Location Object"."Seq. No." WHERE (Survey No.=FIELD(Survey No.),
                                                                                                                 Location Code=FIELD(Location Code));
                                                   CaptionML=[ENU=Seq. No.;
                                                              NOR=Sekv. nr;
                                                              SVE=Sekv. nr] }
    { 60  ;   ;Standard Object No. ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Serv. Surv. Location Object"."Standard Object No." WHERE (Survey No.=FIELD(Survey No.),
                                                                                                                                 Location Code=FIELD(Location Code),
                                                                                                                                 Seq. No.=FIELD(Seq. No.)));
                                                   TableRelation="Standard Object".No.;
                                                   CaptionML=[ENU=Standard Object No.;
                                                              NOR=Standardobjektnr;
                                                              SVE=Standardobjektsnr];
                                                   Editable=No }
    { 70  ;   ;Maintenance Scheme Code;Code20     ;TableRelation="Maintenance Scheme";
                                                   CaptionML=[ENU=Maintenance Scheme Code;
                                                              NOR=Kode for vedlikeholdsskjema;
                                                              SVE=Kod f”r underh†llsschema];
                                                   NotBlank=Yes }
    { 80  ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              NOR=Linjenr.;
                                                              SVE=Radnr] }
    { 85  ;   ;Line Type           ;Option        ;CaptionML=[ENU=Line Type;
                                                              NOR=Radtype;
                                                              SVE=Radtyp];
                                                   OptionCaptionML=[ENU=Maintenance Scheme,,Standard Object,,,,,Survey Object;
                                                                    NOR=Vedlikeholdsskjema,,Standardobjekt,,,,,Kartleggingsobjekt;
                                                                    SVE=Underh†llsschema,,Standardobjekt,,,,,Kartl„ggningsobjekt];
                                                   OptionString=Maintenance Scheme,,Standard Object,,,,,Survey Object }
    { 87  ;   ;Type Code           ;Code20        ;CaptionML=[ENU=Type Code;
                                                              NOR=Typekode;
                                                              SVE=Typkod] }
    { 88  ;   ;Belongs to Scheme   ;Code20        ;CaptionML=[ENU=Belongs to Scheme;
                                                              NOR=H›rer til skjema;
                                                              SVE=Tillh”r schema] }
    { 89  ;   ;Original Line No.   ;Integer       ;CaptionML=[ENU=Original Line No.;
                                                              NOR=Orginalradnummer;
                                                              SVE=Ursprunglig radnr] }
    { 90  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 100 ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                CalcTotals;
                                                              END;

                                                   CaptionML=[ENU=Quantity;
                                                              NOR=Antall;
                                                              SVE=Quantity];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 110 ;   ;Unit of Measure     ;Code10        ;TableRelation="Unit of Measure".Code;
                                                   OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Unit of Measure") THEN
                                                                  ValidateUnitOfMeasure("Unit of Measure");
                                                              END;

                                                   OnLookup=BEGIN
                                                              HandleLookupUnit;
                                                            END;

                                                   CaptionML=[ENU=Unit of Measure;
                                                              NOR=Enhet;
                                                              SVE=M†ttenhet] }
    { 120 ;   ;Frequency per Year  ;Decimal       ;InitValue=1;
                                                   OnValidate=BEGIN
                                                                CalcTotals;
                                                              END;

                                                   CaptionML=[ENU=Time Quantity;
                                                              NOR=Tidskvantitet;
                                                              SVE=Tidskvantitet];
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 130 ;   ;Norm                ;Decimal       ;OnValidate=BEGIN
                                                                IF ("Cost Type" = "Cost Type"::Labor) OR ("Cost Type" = "Cost Type"::Subcontracting) THEN
                                                                  CalcTotals
                                                                ELSE BEGIN
                                                                  MESSAGE(Text002, "Cost Type");
                                                                  Norm := 0;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Norm;
                                                              NOR=Norm;
                                                              SVE=Norm];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 140 ;   ;Rate Code           ;Code10        ;TableRelation="Budget Rate".Code;
                                                   OnValidate=VAR
                                                                ServiceSurvey@1100528601 : Record 11071803;
                                                                BudgetHourRateManagement@1100528600 : Codeunit 11012358;
                                                                BudgetRateFoundAt@1100528602 : Text[250];
                                                              BEGIN
                                                                IF ("Cost Type" = "Cost Type"::Labor) OR ("Cost Type" = "Cost Type"::Subcontracting) THEN BEGIN
                                                                  ServiceSurvey.GET("Survey No.");
                                                                  CALCFIELDS("Reference Date");
                                                                  Rate :=
                                                                    BudgetHourRateManagement.GetBudgetRate(1, '', '', '', ServiceSurvey."Global Dimension 1 Code", "Rate Code",
                                                                      "Reference Date", BudgetRateFoundAt);
                                                                  IF ("Cost Type" = "Cost Type"::Subcontracting) THEN BEGIN
                                                                    "Cost Price" := Norm * Rate;
                                                                    Rate := 0;
                                                                  END;
                                                                  CalcTotals;
                                                                END ELSE BEGIN
                                                                  MESSAGE(Text003, "Cost Type");
                                                                  "Rate Code" := '';
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              BudgetRate@1100528600 : Record 11012000;
                                                            BEGIN
                                                              CALCFIELDS("Reference Date");

                                                              BudgetRate.SETRANGE("Starting Date", 0D, "Reference Date");
                                                              BudgetRate.SETFILTER("Ending Date", '%1|>=%2', 0D, "Reference Date");
                                                              IF PAGE.RUNMODAL(0, BudgetRate) = ACTION::LookupOK THEN
                                                                VALIDATE("Rate Code", BudgetRate.Code);
                                                            END;

                                                   CaptionML=[ENU=Rate Code;
                                                              NOR=Avgiftskode;
                                                              SVE=Avgiftskod] }
    { 150 ;   ;Rate                ;Decimal       ;OnValidate=BEGIN
                                                                IF ("Cost Type" = "Cost Type"::Labor) THEN
                                                                  CalcTotals;
                                                              END;

                                                   CaptionML=[ENU=Rate;
                                                              NOR=Avgift;
                                                              SVE=Avgift];
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 160 ;   ;Cost Price          ;Decimal       ;OnValidate=BEGIN
                                                                IF ("Cost Type" = "Cost Type"::Labor) THEN BEGIN
                                                                  MESSAGE(Text005);
                                                                  "Cost Price" := 0;
                                                                END ELSE BEGIN
                                                                  CalcDiscount;
                                                                  CalcTotals;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Cost Price;
                                                              NOR=Selvkost;
                                                              SVE=Sj„lvkostnadspris];
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 170 ;   ;Gross Price         ;Decimal       ;OnValidate=BEGIN
                                                                CalculateNetPrice;
                                                                CalcTotals;
                                                              END;

                                                   CaptionML=[ENU=Gross Price;
                                                              NOR=Bruttopris;
                                                              SVE=Bruttopris];
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 180 ;   ;Purchase Discount % ;Decimal       ;OnValidate=BEGIN
                                                                CalculateNetPrice;
                                                                CalcTotals;
                                                              END;

                                                   CaptionML=[ENU=Purchase Discount %;
                                                              NOR=Innkj›psrabattprosent;
                                                              SVE=Ink”psrabattprocent];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 190 ;   ;Cost Amount         ;Decimal       ;CaptionML=[ENU=Amount;
                                                              NOR=Bel›p;
                                                              SVE=Belopp];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 200 ;   ;Hours               ;Decimal       ;CaptionML=[ENU=Hours;
                                                              NOR="Timer ";
                                                              SVE=Timmar];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 210 ;   ;Cost Type           ;Option        ;OnValidate=BEGIN
                                                                IF "Cost Object" <> '' THEN BEGIN
                                                                  IF "Cost Type" <> xRec."Cost Type" THEN
                                                                    IF CONFIRM(Text004,TRUE) THEN BEGIN
                                                                      "Cost Object" := '';
                                                                      //only fill fields below for cost type plant
                                                                      "Item No." := '';
                                                                      "Basic Item" := '';
                                                                      "Trade Item" := '';
                                                                      Manufacturer := '';
                                                                      "Vendor (Trade Item)" := '';
                                                                    END ELSE BEGIN
                                                                      "Cost Type" := xRec."Cost Type";
                                                                      EXIT;
                                                                    END;
                                                                END;
                                                                IF ("Cost Type" = "Cost Type"::Labor) THEN BEGIN
                                                                  "Cost Price" := 0;
                                                                END ELSE BEGIN
                                                                  "Rate Code" := '';
                                                                  Rate := 0;
                                                                  Norm := 0;
                                                                END;
                                                                CalcTotals;
                                                              END;

                                                   CaptionML=[ENU=Cost Type;
                                                              NOR=Kostnadstype;
                                                              SVE=Kostnadstyp];
                                                   OptionCaptionML=[ENU=Labor,Material,Subcontracting,Plant,Sundry;
                                                                    NOR=Arbeidskraft,Materiale,Underentrepen›r,Maskin,Diverse;
                                                                    SVE=Arbetskraft,Material,Underentreprenad,Maskin,Diverse];
                                                   OptionString=Labor,Material,Subcontracting,Plant,Sundry }
    { 220 ;   ;Cost Object         ;Code20        ;TableRelation=IF (Cost Type=CONST(Labor)) "Dimension Value".Code WHERE (Cost Type=FILTER(Labor),
                                                                                                                           Global Dimension No.=CONST(2))
                                                                                                                           ELSE IF (Cost Type=CONST(Material)) "Dimension Value".Code WHERE (Cost Type=FILTER(Material),
                                                                                                                                                                                             Global Dimension No.=CONST(2))
                                                                                                                                                                                             ELSE IF (Cost Type=CONST(Plant)) "Dimension Value".Code WHERE (Cost Type=FILTER(Plant),
                                                                                                                                                                                                                                                            Global Dimension No.=CONST(2))
                                                                                                                                                                                                                                                            ELSE IF (Cost Type=CONST(Subcontracting)) "Dimension Value".Code WHERE (Cost Type=FILTER(Subcontracting),
                                                                                                                                                                                                                                                                                                                                    Global Dimension No.=CONST(2))
                                                                                                                                                                                                                                                                                                                                    ELSE IF (Cost Type=CONST(Sundry)) "Dimension Value".Code WHERE (Cost Type=FILTER(Sundry),
                                                                                                                                                                                                                                                                                                                                                                                                    Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                IF ("Cost Object" <> '') AND ("Item No." + "Trade Item" + "Basic Item" = '') THEN  //db, 17-04-08
                                                                  IF xRec."Cost Object" = '' THEN
                                                                    GetDefaultsCostObject()
                                                                  ELSE
                                                                    IF "Cost Object" <> xRec."Cost Object" THEN
                                                                      IF CONFIRM(
                                                                        Text000 +
                                                                        Text001)
                                                                      THEN
                                                                        GetDefaultsCostObject();
                                                              END;

                                                   CaptionML=[ENU=Global Dimension 2 Code;
                                                              NOR=Kostnadsobjekt;
                                                              SVE=Kostnadsobjekt];
                                                   CaptionClass='1,1,2' }
    { 230 ;   ;Cost Component      ;Code20        ;TableRelation="Cost Component".Code;
                                                   CaptionML=[ENU=Cost Component;
                                                              NOR=Kostnadskomponent;
                                                              SVE=Kostnadskomponent] }
    { 240 ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   OnValidate=BEGIN
                                                                IF ("Item No." <> xRec."Item No.") AND ("Item No." <> '') THEN
                                                                  ValidateItem(ItemTypeOpt::Item);
                                                              END;

                                                   CaptionML=[ENU=Item No.;
                                                              NOR=Artikkelnr;
                                                              SVE=Artikelnr] }
    { 250 ;   ;Basic Item          ;Code20        ;TableRelation="Basic Item"."Product Code" WHERE (Manufacturer=FIELD(Manufacturer));
                                                   OnValidate=BEGIN
                                                                IF ("Basic Item" <> xRec."Basic Item") AND ("Basic Item" <> '') THEN
                                                                  ValidateItem(ItemTypeOpt::"Basic Item");
                                                              END;

                                                   CaptionML=[ENU=Basic Item;
                                                              NOR=Fabrikantartikkel;
                                                              SVE=Basartikel] }
    { 260 ;   ;Manufacturer        ;Code15        ;TableRelation="ETIM Vendor - Central Mgt";
                                                   CaptionML=[ENU=Manufacturer;
                                                              NOR=Produsent;
                                                              SVE=Tillverkare] }
    { 270 ;   ;Trade Item          ;Code20        ;TableRelation="Trade Item"."Item Code" WHERE (Vendor=FIELD("Vendor (Trade Item)"));
                                                   OnValidate=BEGIN
                                                                IF ("Trade Item" <> xRec."Trade Item") AND ("Trade Item" <> '') THEN
                                                                  ValidateItem(ItemTypeOpt::"Trade Item");
                                                              END;

                                                   CaptionML=[ENU=Trade Item;
                                                              NOR=Katalogartikkel;
                                                              SVE=Anskaffningsartikel] }
    { 280 ;   ;Vendor (Trade Item) ;Code15        ;TableRelation="ETIM Vendor - Central Mgt";
                                                   OnValidate=VAR
                                                                TradeItemRec@1100525000 : Record 11012317;
                                                                lvExecValidate@1100485000 : Boolean;
                                                              BEGIN
                                                                IF ("Vendor (Trade Item)" <> xRec."Vendor (Trade Item)") AND ("Vendor (Trade Item)" <> '') THEN BEGIN
                                                                  IF "Basic Item" <> '' THEN BEGIN
                                                                    "Trade Item" := '';
                                                                    lvExecValidate := TRUE;
                                                                  END;
                                                                  IF "Trade Item" <> '' THEN BEGIN
                                                                    VALIDATE("Trade Item");
                                                                    lvExecValidate := TRUE;
                                                                  END;
                                                                  //db.sn, 17-12-10: M18021
                                                                  IF lvExecValidate THEN BEGIN
                                                                    IF TradeItemRec.CheckReplaceVendor(
                                                                      xRec."Vendor (Trade Item)", xRec."Trade Item",
                                                                      "Vendor (Trade Item)", "Trade Item") THEN
                                                                      ValidateItem(ItemTypeOpt::"Trade Item")
                                                                    ELSE
                                                                      ValidateItem(ItemTypeOpt::"Trade Vendor");
                                                                  END;
                                                                  //db.en, 17-12-10: M18021
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Vendor (Trade Item);
                                                              NOR=Leverand›r (katalogartikkel);
                                                              SVE=Leverant”r (skaffningsartikel)] }
    { 290 ;   ;Maintenance Interval;DateFormula   ;OnValidate=BEGIN
                                                                EvaluateTimeQuantity;
                                                              END;

                                                   CaptionML=[ENU=Maintenance Interval;
                                                              NOR=Vedlikeholdsintervall;
                                                              SVE=Underh†llsintervall] }
    { 300 ;   ;Vendor              ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=[ENU=Vendor;
                                                              NOR=Leverand›r;
                                                              SVE=Leverant”r] }
    { 310 ;   ;Vendor Name         ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Vendor.Name WHERE (No.=FIELD(Vendor)));
                                                   CaptionML=[ENU=Vendor Name;
                                                              NOR=Leverand›rsnavn;
                                                              SVE=Leverant”rsnamn];
                                                   Editable=No }
    { 320 ;   ;Item Type           ;Text40        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Basic Item"."Item Type" WHERE (Product Code=FIELD(Basic Item),
                                                                                                      Manufacturer=FIELD(Manufacturer)));
                                                   CaptionML=[ENU=Item Type;
                                                              NOR=Artikkeltype;
                                                              SVE=Artikeltyp];
                                                   Editable=No }
    { 330 ;   ;Item Brand          ;Text40        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Basic Item"."Item Brand" WHERE (Product Code=FIELD(Basic Item),
                                                                                                       Manufacturer=FIELD(Manufacturer)));
                                                   CaptionML=[ENU=Item Brand;
                                                              NOR=Artikkelens Varemerke;
                                                              SVE=Artikelns varum„rke];
                                                   Editable=No }
    { 340 ;   ;Item Series         ;Text40        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Basic Item"."Item Series" WHERE (Product Code=FIELD(Basic Item),
                                                                                                        Manufacturer=FIELD(Manufacturer)));
                                                   CaptionML=[ENU=Item Series;
                                                              NOR=Artikkelserier;
                                                              SVE=Artikelserier];
                                                   Editable=No }
    { 350 ;   ;Line Status         ;Code10        ;TableRelation="Line Status".Status;
                                                   CaptionML=[ENU=Line Status;
                                                              NOR=Radstatus;
                                                              SVE=Radstatus] }
    { 360 ;   ;Text Block          ;Boolean       ;CaptionML=[ENU=Text Block;
                                                              NOR=Tekstblokk;
                                                              SVE=Textblock];
                                                   Editable=No }
    { 370 ;   ;Text                ;Text250       ;OnValidate=BEGIN
                                                                "Text Block" := Text <> '';
                                                              END;

                                                   CaptionML=[ENU=Text;
                                                              NOR=Tekst;
                                                              SVE=Ben„mning] }
    { 380 ;   ;Cost per Service    ;Decimal       ;CaptionML=[ENU=Cost per Service;
                                                              NOR=Kostnad per Service;
                                                              SVE=Kostnad per service];
                                                   DecimalPlaces=2:5;
                                                   Editable=No }
    { 390 ;   ;Hours per Service   ;Decimal       ;CaptionML=[ENU=Hours per Service;
                                                              NOR=Timer per service;
                                                              SVE=Timmar per service];
                                                   DecimalPlaces=2:5;
                                                   Editable=No }
    { 400 ;   ;Labor per Service   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Serv. Surv. Object Add. Act."."Cost per Service" WHERE (Survey No.=FIELD(Survey No.),
                                                                                                                            Location Code=FIELD(Location Code),
                                                                                                                            Seq. No.=FIELD(Seq. No.),
                                                                                                                            Maintenance Scheme Code=FIELD(Maintenance Scheme Code),
                                                                                                                            Cost Type=CONST(Labor)));
                                                   CaptionML=[ENU=Labor per Service;
                                                              NOR=Arbeidskraft per service;
                                                              SVE=Arbetskraft per service];
                                                   DecimalPlaces=2:5;
                                                   Editable=No }
    { 410 ;   ;Total Hours per Service;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Serv. Surv. Object Add. Act."."Hours per Service" WHERE (Survey No.=FIELD(Survey No.),
                                                                                                                             Location Code=FIELD(Location Code),
                                                                                                                             Seq. No.=FIELD(Seq. No.),
                                                                                                                             Maintenance Scheme Code=FIELD(Maintenance Scheme Code),
                                                                                                                             Cost Type=CONST(Labor)));
                                                   CaptionML=[ENU=Hours per Service;
                                                              NOR=Timer per service;
                                                              SVE=Timmar per service];
                                                   DecimalPlaces=2:5;
                                                   Editable=No }
    { 420 ;   ;Material per Service;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Serv. Surv. Object Add. Act."."Cost per Service" WHERE (Survey No.=FIELD(Survey No.),
                                                                                                                            Location Code=FIELD(Location Code),
                                                                                                                            Seq. No.=FIELD(Seq. No.),
                                                                                                                            Maintenance Scheme Code=FIELD(Maintenance Scheme Code),
                                                                                                                            Cost Type=CONST(Material)));
                                                   CaptionML=[ENU=Material per Service;
                                                              NOR=Meteriale per service;
                                                              SVE=Material per service];
                                                   DecimalPlaces=2:5;
                                                   Editable=No }
    { 430 ;   ;Subcontracting per Service;Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Serv. Surv. Object Add. Act."."Cost per Service" WHERE (Survey No.=FIELD(Survey No.),
                                                                                                                            Location Code=FIELD(Location Code),
                                                                                                                            Seq. No.=FIELD(Seq. No.),
                                                                                                                            Maintenance Scheme Code=FIELD(Maintenance Scheme Code),
                                                                                                                            Cost Type=CONST(Subcontracting)));
                                                   CaptionML=[ENU=Subcontracting per Service;
                                                              NOR=Underentrepen›r per service;
                                                              SVE=Underentreprenad per service];
                                                   DecimalPlaces=2:5;
                                                   Editable=No }
    { 440 ;   ;Plant per Service   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Serv. Surv. Object Add. Act."."Cost per Service" WHERE (Survey No.=FIELD(Survey No.),
                                                                                                                            Location Code=FIELD(Location Code),
                                                                                                                            Seq. No.=FIELD(Seq. No.),
                                                                                                                            Maintenance Scheme Code=FIELD(Maintenance Scheme Code),
                                                                                                                            Cost Type=CONST(Plant)));
                                                   CaptionML=[ENU=Plant per Service;
                                                              NOR=Maskin per service;
                                                              SVE=Maskin per service];
                                                   DecimalPlaces=2:5;
                                                   Editable=No }
    { 450 ;   ;Sundry per Service  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Serv. Surv. Object Add. Act."."Cost per Service" WHERE (Survey No.=FIELD(Survey No.),
                                                                                                                            Location Code=FIELD(Location Code),
                                                                                                                            Seq. No.=FIELD(Seq. No.),
                                                                                                                            Maintenance Scheme Code=FIELD(Maintenance Scheme Code),
                                                                                                                            Cost Type=CONST(Sundry)));
                                                   CaptionML=[ENU=Sundry per Service;
                                                              NOR=Diverse per service;
                                                              SVE=Diverse per service];
                                                   DecimalPlaces=2:5;
                                                   Editable=No }
    { 460 ;   ;Total Cost per Service;Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Serv. Surv. Object Add. Act."."Cost per Service" WHERE (Survey No.=FIELD(Survey No.),
                                                                                                                            Location Code=FIELD(Location Code),
                                                                                                                            Seq. No.=FIELD(Seq. No.),
                                                                                                                            Maintenance Scheme Code=FIELD(Maintenance Scheme Code)));
                                                   CaptionML=[ENU=Total Cost per Service;
                                                              NOR=Totalkostnad per service;
                                                              SVE=Totalkostnad per service];
                                                   DecimalPlaces=2:5;
                                                   Editable=No }
    { 470 ;   ;Original Index Date ;Date          ;CaptionML=ENU=Original Index Date;
                                                   Editable=No }
    { 480 ;   ;Reference Date      ;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Survey"."Reference Date" WHERE (No.=FIELD(Survey No.)));
                                                   CaptionML=[ENU=Reference Date;
                                                              NOR=Referansedato;
                                                              SVE=Referensdatum];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Survey No.,Location Code,Seq. No.,Maintenance Scheme Code,Line No.;
                                                   Clustered=Yes }
    {    ;Survey No.,Location Code,Seq. No.,Maintenance Scheme Code,Cost Type;
                                                   SumIndexFields=Cost per Service,Hours per Service }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1100528605 : TextConst 'ENU=Copy Data from new Cost Object?\\;NOR=Kopier data fra nytt Kostnadsobjekt?\\;SVE=Kopiera data fr†n nytt kostnadsobjekt?\\';
      Text001@1100528604 : TextConst 'ENU=Empty fields only will be updated. Existing data will not be overruled.;NOR=Kun tomme felt vil oppdateres. Eksisterende data vil ikke bli overstyrt.;SVE=Endast tomma f„lt kommer att uppdateras. Befintliga data kommer inte att †sidos„ttas.';
      Text002@1100528603 : TextConst 'ENU=Cost Type of Line is %1, input of norm not allowed;NOR=Kostnadstypen for raden er %1, Norm kan ikke angis;SVE=Kostnadstypen f”r raden „r %1, norm kan inte anges';
      Text003@1100528602 : TextConst 'ENU=Cost Type of line is %1, input of rate code not allowed.;NOR=Kostnadstypen for raden er %1, satskode kan ikke angis.;SVE=Kostnadstypen f”r raden „r %1, avgiftskod kan inte anges';
      Text004@1100528601 : TextConst 'ENU=Change Cost Type ?;NOR=Endre kostnadstype?;SVE=Žndra kostnadstyp?';
      Text005@1100528600 : TextConst 'ENU=Unit Price not allowed because Cost Type of this record is Labor !;NOR=Enhetsprisen er ikke tillatt siden Kostnadstypen for denne posten er arbeidskraft!;SVE=Enhetspriset „r inte till†tet eftersom kostnadstypen f”r denna post „r arbetskraft!';
      ItemTypeOpt@1100528606 : 'Item,Basic Item,Trade Item,Trade Vendor';
      Text007@1100525000 : TextConst 'ENU=Can not modify line on this level';

    PROCEDURE CalcTotals@1();
    BEGIN
      Hours := "Frequency per Year" * Quantity * Norm;
      "Hours per Service" := Quantity * Norm;

      IF "Cost Type" = "Cost Type"::Labor THEN BEGIN
        IF Rate = 0 THEN BEGIN
          "Cost Amount" := "Frequency per Year" * Quantity * "Cost Price";
          "Cost per Service" := Quantity * "Cost Price";
        END ELSE BEGIN
          "Cost Amount" := "Frequency per Year" * Quantity * Norm * Rate;
          "Cost per Service" := Quantity * Norm * Rate;
        END;
      END ELSE BEGIN
        "Cost Amount" := "Frequency per Year" * Quantity * "Cost Price";
        "Cost per Service" := Quantity * "Cost Price";
      END;
    END;

    PROCEDURE CalcDiscount@1100485004();
    BEGIN
      IF "Gross Price" <> 0 THEN BEGIN
        "Purchase Discount %" := (("Gross Price" - "Cost Price") / "Gross Price") * 100;
      END;
    END;

    PROCEDURE GetDefaultsCostObject@3();
    VAR
      DimValRec@1100525000 : Record 349;
      DimMgt@1100525001 : Codeunit 408;
    BEGIN
      DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, TRUE,'');

      IF Description = '' THEN
        Description := DimValRec.Name;
      IF "Unit of Measure" = '' THEN
        "Unit of Measure" := DimValRec."Unit of Measure";
      IF "Cost Component" = '' THEN
        "Cost Component" := DimValRec."Cost Component";

      "Cost Type" := DimValRec."Cost Type";
      CASE "Cost Type" OF
        "Cost Type"::Labor:
          BEGIN
            IF Norm = 0 THEN
              Norm := DimValRec.Norm;
            IF ("Rate Code" = '') AND (Rate = 0) THEN
              VALIDATE("Rate Code", DimValRec."Rate Code");
          END;
        ELSE
          IF "Cost Price" = 0 THEN
            "Cost Price" := DimValRec.Price;
      END;
      CalcTotals;
    END;

    PROCEDURE ValidateItem@31(LTypeArtOpt@11012000 : 'Item,Basic Item,Trade Item');
    VAR
      ValidateItemsCU@1100528600 : Codeunit 11012033;
      Item@1100528601 : Record 27;
      DummyDat@11012001 : Date;
      Desc1Txt@1210190000 : Text[50];
      Desc2Txt@1210190001 : Text[50];
      lvRefDate@1100485003 : Date;
      lvDiscRef1@1100485002 : Code[20];
      lvDiscRef2@1100485001 : Code[20];
    BEGIN
      //GetReferenceData(lvRefDate, lvDiscRef1, lvDiscRef2);
      CALCFIELDS("Reference Date");
      lvRefDate := "Reference Date";
      ValidateItemsCU.ValidateItem(
        LTypeArtOpt,"Trade Item","Item No.",Manufacturer,"Vendor (Trade Item)",
        "Basic Item","Cost Object",Desc1Txt,"Unit of Measure","Cost Price",
        "Purchase Discount %",DummyDat,"Gross Price",Desc2Txt,"Cost Component",
        lvDiscRef1,lvDiscRef2,lvRefDate,'');

      IF Desc2Txt = '' THEN
        Description := Desc1Txt
      ELSE
        Description := COPYSTR((Desc1Txt + '\' + Desc2Txt), 1, MAXSTRLEN(Description));

      IF Item.GET("Item No.") THEN
        VALIDATE(Text, Item.Text);

      CalcTotals;
    END;

    PROCEDURE HandleLookupUnit@1210190008();
    VAR
      ItemUnitRec@1210190000 : Record 5404;
      lvUnit@1210190001 : Code[10];
    BEGIN
      lvUnit := ItemUnitRec.HandleLookupUnit("Item No.", "Basic Item", "Trade Item", Manufacturer, "Vendor (Trade Item)");
      IF (lvUnit <> '') AND (lvUnit <> "Unit of Measure") THEN BEGIN
        xRec."Unit of Measure" := "Unit of Measure";  //db, 01-07-04: standard bug
        VALIDATE("Unit of Measure", lvUnit);
      END;
    END;

    PROCEDURE CheckItemUnitConversion@1210190010(VAR NewServSurvObjectAddAct@1210190006 : Record 11071814;OldServSurvObjectAddAct@1210190007 : Record 11071814);
    VAR
      ValidateItemsCU@1100528600 : Codeunit 11012033;
      ItemRec@1210190004 : Record 27;
      UnitFactor@1210190005 : Decimal;
      UnitFactorOld@1210190003 : Decimal;
      UnitFactorNew@1210190002 : Decimal;
      UnitControl@1210190001 : Codeunit 5402;
    BEGIN
      WITH NewServSurvObjectAddAct DO BEGIN
        UnitFactorOld := 1;
        UnitFactorNew := 1;
        IF "Trade Item" <> '' THEN BEGIN
          ValidateItemsCU.ValidateUnit(ItemTypeOpt::"Trade Item",
            "Item No.","Basic Item","Trade Item",Manufacturer,"Vendor (Trade Item)",
            Quantity,"Unit of Measure",UnitFactorNew);
        END ELSE BEGIN
          IF "Basic Item" <> '' THEN BEGIN
            ValidateItemsCU.ValidateUnit(ItemTypeOpt::"Basic Item",
              "Item No.","Basic Item","Trade Item",Manufacturer,"Vendor (Trade Item)",
              Quantity,"Unit of Measure",UnitFactorNew);
          END ELSE BEGIN  //db, 07-04-08: M10070
            IF "Item No." <> '' THEN BEGIN
              ItemRec.GET("Item No.");
              UnitFactorOld := UnitControl.GetQtyPerUnitOfMeasure(ItemRec, OldServSurvObjectAddAct."Unit of Measure");
              UnitFactorNew := UnitControl.GetQtyPerUnitOfMeasure(ItemRec, "Unit of Measure");
              UnitFactor := UnitFactorOld;
              ValidateItemsCU.ValidateUnit(ItemTypeOpt::Item,
                "Item No.","Basic Item","Trade Item",Manufacturer,"Vendor (Trade Item)",
                Quantity,"Unit of Measure",UnitFactor);
            END;
          END;
        END;
        IF (UnitFactorNew * UnitFactorOld) <> 0 THEN BEGIN
          IF "Gross Price" <> 0 THEN
            VALIDATE("Gross Price", ("Gross Price" * UnitFactorNew / UnitFactorOld))
          ELSE
            VALIDATE("Cost Price", ("Cost Price" * UnitFactorNew / UnitFactorOld));
        END;
      END;
    END;

    PROCEDURE CalculateNetPrice@1210190005();
    BEGIN
      IF "Gross Price" <> 0 THEN BEGIN
        "Cost Price" := "Gross Price" - (("Gross Price"/100) * "Purchase Discount %");
      END;
    END;

    PROCEDURE CalculateGrossPrice@1100485007();
    BEGIN
      IF "Purchase Discount %" <> 100 THEN
        "Gross Price" := "Cost Price" * 100 / (100 - "Purchase Discount %");
    END;

    PROCEDURE EvaluateTimeQuantity@1100485000();
    VAR
      HelpTxt1@1100485000 : Text[30];
      HelpTxt2@1100485001 : Text[30];
      HelpDec1@1100485002 : Decimal;
    BEGIN
      HelpTxt1 := FORMAT("Maintenance Interval");
      HelpTxt2 := DELCHR(HelpTxt1, '=', '0123456789');

      IF (HelpTxt1 = '') OR (HelpTxt2 = '') THEN EXIT;

      EVALUATE(HelpDec1, COPYSTR(HelpTxt1, 1, STRPOS(HelpTxt1, HelpTxt2)-1));
      IF HelpDec1 = 0 THEN EXIT;

      CASE HelpTxt2 OF
        'D':
          "Frequency per Year" := 365 / HelpDec1;
        'W':
          "Frequency per Year" := 52 / HelpDec1;
        'M':
          "Frequency per Year" := 12 / HelpDec1;
        'K','Q':
          "Frequency per Year" := 4 / HelpDec1;
        'J','Y':
          "Frequency per Year" := 1 / HelpDec1;
      END;

      VALIDATE("Frequency per Year");
    END;

    PROCEDURE UpdateItemPrice@1100525006(LTypeArtOpt@1100525000 : 'Item,Basic Item,Trade Item');
    VAR
      ValidateItemsCU@1100528600 : Codeunit 11012033;
      DummyDat@1100525003 : Date;
      Desc1Txt@1100525002 : Text[50];
      Desc2Txt@1100525001 : Text[50];
      lvDiscRef1@1100525005 : Code[20];
      lvDiscRef2@1100525004 : Code[20];
    BEGIN
      //db, 12-10-10
      CALCFIELDS("Reference Date");
      ValidateItemsCU.ValidateItem(
        LTypeArtOpt,"Trade Item","Item No.",Manufacturer,"Vendor (Trade Item)",
        "Basic Item","Cost Object",Desc1Txt,"Unit of Measure","Cost Price",
        "Purchase Discount %",DummyDat,"Gross Price",Desc2Txt,"Cost Component",
        lvDiscRef1,lvDiscRef2,"Reference Date",'');
      CalcTotals;
    END;

    PROCEDURE TestObjectsNotCreated@1100528600();
    VAR
      ServSurvLocationObject@1100528600 : Record 11071813;
    BEGIN
      IF ServSurvLocationObject.GET("Survey No.", "Location Code", "Seq. No.") THEN BEGIN
        IF ServSurvLocationObject."Existing Service Object No." = '' THEN
          ServSurvLocationObject.TESTFIELD("Objects Created", FALSE);
        IF ServSurvLocationObject."Include in Contract" = ServSurvLocationObject."Include in Contract"::"Only Service Order" THEN
          ServSurvLocationObject.TESTFIELD("Service Order No.", '');
      END;
    END;

    PROCEDURE UpdateSurveyLocObjectDetail@1100528601();
    VAR
      ServSurvLocObjDetail@1100528600 : Record 11071807;
    BEGIN
      ServSurvLocObjDetail.SETRANGE("Survey No.", "Survey No.");
      ServSurvLocObjDetail.SETRANGE("Location Code", "Location Code");
      ServSurvLocObjDetail.SETRANGE("Seq. No.", "Seq. No.");
      ServSurvLocObjDetail.SETRANGE("Maintenance Scheme Code", "Maintenance Scheme Code");
      IF ServSurvLocObjDetail.FINDSET(TRUE) THEN
        REPEAT
          ServSurvLocObjDetail.UpdateTotals;
          ServSurvLocObjDetail.MODIFY(TRUE);
        UNTIL ServSurvLocObjDetail.NEXT = 0;
    END;

    PROCEDURE SetAsCancelled@1100525001(ICancelled@1100528600 : Boolean;ISurveyNo@1100528602 : Code[20];ILocationCode@1100528603 : Code[10];ISeqNo@1100528605 : Integer;IMaintenanceSchemeCode@1100525000 : Code[20]);
    VAR
      SurvObjAddActProperty@1100528601 : Record 11071955;
      CancellationLevel@1100528604 : ' ,Maintenance Scheme,Modification,Standard Object,Standard Object Deinstallation,Standard Object Installation,Object Installation,Object,Survey Object';
    BEGIN
      IF ICancelled THEN BEGIN
        IF "Line Type" = "Line Type"::"Survey Object" THEN
          ERROR(Text007);
        IF NOT SurvObjAddActProperty.GET(
          ISurveyNo, ILocationCode, ISeqNo, IMaintenanceSchemeCode,
          "Line Type", "Type Code", "Original Line No.", "Belongs to Scheme")
        THEN BEGIN
          SurvObjAddActProperty."Survey No." := ISurveyNo;
          SurvObjAddActProperty."Location Code" := ILocationCode;
          SurvObjAddActProperty."Seq. No." := ISeqNo;
          SurvObjAddActProperty."Maintenance Scheme Code" := IMaintenanceSchemeCode;
          SurvObjAddActProperty."Line Type (Base)" := "Line Type";
          SurvObjAddActProperty."Type Code (Base)" := "Type Code";
          SurvObjAddActProperty."Line No. (Base)" := "Original Line No.";
          SurvObjAddActProperty."Belongs to Scheme (Base)" := "Belongs to Scheme";
          SurvObjAddActProperty.Cancelled := TRUE;
          SurvObjAddActProperty.INSERT(TRUE);
        END ELSE BEGIN
          SurvObjAddActProperty.Cancelled := TRUE;
          SurvObjAddActProperty.MODIFY(TRUE);
        END;
      END ELSE BEGIN
        IF IsCancelled(ISurveyNo, ILocationCode, ISeqNo, IMaintenanceSchemeCode, WORKDATE, CancellationLevel) THEN
          IF CancellationLevel < CancellationLevel::"Survey Object" THEN
            ERROR(Text007);
        IF SurvObjAddActProperty.GET(
          ISurveyNo, ILocationCode, ISeqNo, IMaintenanceSchemeCode,
          "Line Type", "Type Code", "Original Line No.", "Belongs to Scheme")
        THEN BEGIN
          IF SurvObjAddActProperty."Adjustment Factor Norm" = 0 THEN
            SurvObjAddActProperty.DELETE(TRUE)
          ELSE BEGIN
            SurvObjAddActProperty.Cancelled := FALSE;
            SurvObjAddActProperty.MODIFY(TRUE);
          END;
        END;
      END;
    END;

    PROCEDURE IsCancelled@1100525000(ISurveyNo@1100525004 : Code[20];ILocationCode@1100525003 : Code[10];ISeqNo@1100525002 : Integer;IMaintenanceSchemeCode@1100525001 : Code[20];ILowerLevelSeekDate@1100528601 : Date;VAR OCancellationLevel@1100528607 : ' ,Maintenance Scheme,Modification,Standard Object,Standard Object Deinstallation,Standard Object Installation,Object Installation,Object,Survey Object') : Boolean;
    VAR
      MaintSchemeVersionLine@1100528602 : Record 11071744;
      SurvObjAddActProperty@1100525000 : Record 11071955;
      IsCancelled@1100528603 : Boolean;
    BEGIN
      OCancellationLevel := OCancellationLevel::" ";

      IF SurvObjAddActProperty.GET(
        ISurveyNo, ILocationCode, ISeqNo, IMaintenanceSchemeCode,
        "Line Type", "Type Code", "Original Line No.", "Belongs to Scheme") AND
         SurvObjAddActProperty.Cancelled
      THEN BEGIN
        OCancellationLevel := OCancellationLevel::"Survey Object";
        EXIT(TRUE);
      END;

      CALCFIELDS("Standard Object No.");
      IF NOT MaintSchemeVersionLine.GET("Line Type", "Type Code", "Belongs to Scheme", "Original Index Date", "Original Line No.") THEN
        MaintSchemeVersionLine.INIT;
      IsCancelled :=
        MaintSchemeVersionLine.IsCancelled(
          MaintSchemeVersionLine."Line Type"::"Standard Object", "Standard Object No.", IMaintenanceSchemeCode,
          WORKDATE, WORKDATE, OCancellationLevel);
      EXIT(IsCancelled);
    END;

    PROCEDURE SetAdjustmentFactorNorm@1100528607(IAdjustmentFactorNorm@1100528600 : Decimal;ISurveyNo@1100528605 : Code[20];ILocationCode@1100528604 : Code[10];ISeqNo@1100528603 : Integer;IMaintenanceSchemeCode@1100528602 : Code[20]);
    VAR
      SurvObjAddActProperty@1100528601 : Record 11071955;
      LineNo@1100528607 : Integer;
    BEGIN
      LineNo := "Original Line No.";
      IF LineNo = 0 THEN
        LineNo := "Line No.";
      IF IAdjustmentFactorNorm <> 0 THEN BEGIN
        IF NOT SurvObjAddActProperty.GET(
          ISurveyNo, ILocationCode, ISeqNo, IMaintenanceSchemeCode,
          "Line Type", "Type Code", LineNo, "Belongs to Scheme")
        THEN BEGIN
          SurvObjAddActProperty."Survey No." := ISurveyNo;
          SurvObjAddActProperty."Location Code" := ILocationCode;
          SurvObjAddActProperty."Seq. No." := ISeqNo;
          SurvObjAddActProperty."Maintenance Scheme Code" := IMaintenanceSchemeCode;
          SurvObjAddActProperty."Line Type (Base)" := "Line Type";
          SurvObjAddActProperty."Type Code (Base)" := "Type Code";
          SurvObjAddActProperty."Line No. (Base)" := LineNo;
          SurvObjAddActProperty."Belongs to Scheme (Base)" := "Belongs to Scheme";
          SurvObjAddActProperty."Adjustment Factor Norm" := IAdjustmentFactorNorm;
          SurvObjAddActProperty.INSERT(TRUE);
        END ELSE BEGIN
          SurvObjAddActProperty."Adjustment Factor Norm" := IAdjustmentFactorNorm;
          SurvObjAddActProperty.MODIFY(TRUE);
        END;
      END ELSE BEGIN
        IF SurvObjAddActProperty.GET(
          ISurveyNo, ILocationCode, ISeqNo, IMaintenanceSchemeCode,
          "Line Type", "Type Code", LineNo, "Belongs to Scheme")
        THEN BEGIN
          IF NOT SurvObjAddActProperty.Cancelled THEN
            SurvObjAddActProperty.DELETE(TRUE)
          ELSE BEGIN
            SurvObjAddActProperty."Adjustment Factor Norm" := 0;
            SurvObjAddActProperty.MODIFY(TRUE);
          END;
        END;
      END;
    END;

    PROCEDURE GetAdjustmentFactorNorm@1100528606(ISurveyNo@1100528604 : Code[20];ILocationCode@1100528603 : Code[10];ISeqNo@1100528602 : Integer;IMaintenanceSchemeCode@1100528601 : Code[20];ILowerLevelSeekDate@1100528610 : Date;VAR OAdjustmentFactorNormLevel@1100528607 : ' ,Maintenance Scheme,Modification,Standard Object,Standard Object Deinstallation,Standard Object Installation,Object Installation,Object,Survey Object') AdjustmentFactor : Decimal;
    VAR
      SurvObjAddActProperty@1100528600 : Record 11071955;
      ServSurvLocationObject@1100528609 : Record 11071813;
      MaintSchemeVersionLine@1100528605 : Record 11071744;
      LineNo@1100528611 : Integer;
    BEGIN
      LineNo := "Original Line No.";
      IF LineNo = 0 THEN
        LineNo := "Line No.";
      OAdjustmentFactorNormLevel := OAdjustmentFactorNormLevel::" ";

      IF SurvObjAddActProperty.GET(
        ISurveyNo, ILocationCode, ISeqNo, IMaintenanceSchemeCode, "Line Type", "Type Code", LineNo, "Belongs to Scheme") AND
         (SurvObjAddActProperty."Adjustment Factor Norm" <> 0)
      THEN BEGIN
        OAdjustmentFactorNormLevel := OAdjustmentFactorNormLevel::"Survey Object";
        EXIT(SurvObjAddActProperty."Adjustment Factor Norm");
      END;

      IF NOT ServSurvLocationObject.GET(ISurveyNo, ILocationCode, ISeqNo) THEN
        ServSurvLocationObject.INIT;

      //Line Type,Type Code,Belongs to Scheme,Index Date,Line No.
      IF "Line Type" < "Line Type"::"Survey Object" THEN BEGIN
        CALCFIELDS("Standard Object No.");
        IF NOT MaintSchemeVersionLine.GET("Line Type", "Type Code", "Belongs to Scheme", "Original Index Date", "Original Line No.") THEN
          MaintSchemeVersionLine.INIT;
        AdjustmentFactor :=
          MaintSchemeVersionLine.GetAdjustmentFactorNorm(
            MaintSchemeVersionLine."Line Type"::"Standard Object", ServSurvLocationObject."Standard Object No.", IMaintenanceSchemeCode,
            WORKDATE, WORKDATE, OAdjustmentFactorNormLevel);
      END;
      IF AdjustmentFactor = 0 THEN
        EXIT(1);
    END;

    PROCEDURE GetHours@1100528602() : Decimal;
    VAR
      AdjustmentFactorNormLevel@1100528600 : Option;
      OriginalIndexDate@1100528601 : Date;
    BEGIN
      OriginalIndexDate := "Original Index Date";
      IF OriginalIndexDate = 0D THEN
        OriginalIndexDate := WORKDATE;
      EXIT(Hours *
        GetAdjustmentFactorNorm(
          "Survey No.", "Location Code", "Seq. No.", "Maintenance Scheme Code", OriginalIndexDate, AdjustmentFactorNormLevel));
    END;

    PROCEDURE GetCostAmount@1100528603() : Decimal;
    VAR
      AdjustmentFactorNormLevel@1100528600 : Option;
      OriginalIndexDate@1100528601 : Date;
    BEGIN
      OriginalIndexDate := "Original Index Date";
      IF OriginalIndexDate = 0D THEN
        OriginalIndexDate := WORKDATE;
      IF "Cost Type" = "Cost Type"::Labor THEN
        EXIT("Cost Amount" *
          GetAdjustmentFactorNorm(
            "Survey No.", "Location Code", "Seq. No.", "Maintenance Scheme Code", OriginalIndexDate, AdjustmentFactorNormLevel));

      EXIT("Cost Amount");  //C028596
    END;

    PROCEDURE HandleAssistEditTradeItem@1100528300() : Boolean;
    VAR
      WebshopItemMgt@1100528300 : Codeunit 11012306;
      RecRef@1100528301 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Rec);
      WebshopItemMgt.RunModalDialogForMultipleItems("Vendor (Trade Item)", "Trade Item", RecRef);
      EXIT(TRUE);
    END;

    PROCEDURE GetSurveySurchargeAmounts@1100528619(IKindOfSurcharge@1100528618 : 'Cost,Sales';VAR OLaborSurcharge@1100528613 : Decimal;VAR OMaterialSurcharge@1100528614 : Decimal;VAR OSubcontractingSurcharge@1100528615 : Decimal;VAR OPlantSurcharge@1100528616 : Decimal;VAR OSundrySurcharge@1100528617 : Decimal) : Decimal;
    VAR
      ServiceSurvey@1100528600 : Record 11071803;
      ServiceSurveySurcharge@1100528606 : Record 11071808;
      CostPriceAmount@1100528607 : ARRAY [6] OF Decimal;
      SurchargeAmount@1100528608 : Decimal;
      TotalSurchargeAmount@1100528609 : Decimal;
      PreviousSurchargeAmount@1100528610 : ARRAY [6] OF Decimal;
      CostperService@1100528601 : Decimal;
      DummyDec@1100528602 : Decimal;
    BEGIN
      CostperService := "Cost per Service";
      ServiceSurvey.GET("Survey No.");
      IF IKindOfSurcharge = IKindOfSurcharge::Sales THEN
        CostperService += GetSurveySurchargeAmounts(0, DummyDec, DummyDec, DummyDec, DummyDec, DummyDec);

      CostPriceAmount[ServiceSurveySurcharge."Cost Type Filter"::" " +1] := CostperService;
      CostPriceAmount["Cost Type" +2] := CostperService;
      ServiceSurveySurcharge.SETRANGE("Survey No.", "Survey No.");
      ServiceSurveySurcharge.SETFILTER("Cost Type Filter", '%1|%2', ServiceSurveySurcharge."Cost Type Filter"::" ", "Cost Type" +1);
      ServiceSurveySurcharge.SETFILTER("Cost Object Filter", '%1|%2', '', "Cost Object");
      CASE IKindOfSurcharge OF
        IKindOfSurcharge::Cost:
          ServiceSurveySurcharge.SETRANGE("Surcharge Type", ServiceSurveySurcharge."Surcharge Type"::Cost);
        IKindOfSurcharge::Sales:
          ServiceSurveySurcharge.SETRANGE("Surcharge Type", ServiceSurveySurcharge."Surcharge Type"::Sales);
      END;
      IF ServiceSurveySurcharge.FINDSET THEN
        REPEAT
          SurchargeAmount := (CostPriceAmount[ServiceSurveySurcharge."Cost Type Filter" +1] +
            PreviousSurchargeAmount[ServiceSurveySurcharge."Cost Type Filter" +1]) *
            ServiceSurveySurcharge."Surcharge Percentage" / 100;
          TotalSurchargeAmount += SurchargeAmount;
          PreviousSurchargeAmount["Cost Type" +2] += SurchargeAmount;
          IF ServiceSurveySurcharge."Cost Type Filter" <> ServiceSurveySurcharge."Cost Type Filter"::" " THEN
            PreviousSurchargeAmount[ServiceSurveySurcharge."Cost Type Filter"::" " +1] += SurchargeAmount;
        UNTIL ServiceSurveySurcharge.NEXT = 0;

      OLaborSurcharge := PreviousSurchargeAmount[ServiceSurveySurcharge."Cost Type Filter"::Labor +1];
      OMaterialSurcharge := PreviousSurchargeAmount[ServiceSurveySurcharge."Cost Type Filter"::Material +1];
      OSubcontractingSurcharge := PreviousSurchargeAmount[ServiceSurveySurcharge."Cost Type Filter"::Subcontracting +1];
      OPlantSurcharge := PreviousSurchargeAmount[ServiceSurveySurcharge."Cost Type Filter"::Plant +1];
      OSundrySurcharge := PreviousSurchargeAmount[ServiceSurveySurcharge."Cost Type Filter"::Sundry +1];

      EXIT(TotalSurchargeAmount);
    END;

    PROCEDURE ValidateUnitOfMeasure@1100528400(UnitOfMeasureCode@1100528400 : Code[10]);
    BEGIN
      "Unit of Measure" := UnitOfMeasureCode;
      IF ("Cost Type" = "Cost Type"::Material) THEN
        IF "Unit of Measure" <>  xRec."Unit of Measure" THEN
          CheckItemUnitConversion(Rec, xRec);
      CalcTotals;
    END;

    PROCEDURE UpdatePricesAndRates@1100528604();
    BEGIN
      CASE "Cost Type" OF
        "Cost Type"::Labor:
          BEGIN
            VALIDATE("Rate Code");
          END;
        "Cost Type"::Material:
          BEGIN
            IF "Trade Item" <> '' THEN
              UpdateItemPrice(ItemTypeOpt::"Trade Item")
            ELSE IF "Basic Item" <> '' THEN
              UpdateItemPrice(ItemTypeOpt::"Basic Item")
            ELSE IF "Item No." <> '' THEN
              UpdateItemPrice(ItemTypeOpt::Item);
          END;
      END;
    END;

    BEGIN
    END.
  }
}

