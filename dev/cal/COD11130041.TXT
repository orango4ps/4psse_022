OBJECT Codeunit 11130041 IoT Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      NoValueTypeDefined@1100528800 : TextConst 'DEU=Keine Wertart definiert fÅr Ereignis %1;ENU=No Value Type Defined for Event %1;NLD=Geen waardetype gedefinieerd voor gebeurtenis %1';
      DateToday@1100528801 : TextConst 'DEU=H;ENU=t;NLD=h;NOR=t;SVE=t';
      Value@1100528802 : TextConst 'DEU=value;ENU=value;NLD=waarde;NOR=value;SVE=value';

    PROCEDURE GetIoTDeviceGroupEventDescription@1100528804(IoTServiceObjectThreshold@1100528800 : Record 11130020) : Text;
    VAR
      IoTDeviceGroupEvent@1100528801 : Record 11130016;
    BEGIN
      IoTDeviceGroupEvent.GET(GetIoTDeviceGroupEventCodeByDeviceID(IoTServiceObjectThreshold."Device ID"), IoTServiceObjectThreshold."Event ID");
      EXIT(IoTDeviceGroupEvent."Event Description");
    END;

    PROCEDURE GetIoTDeviceGroupEventCodeByDeviceID@1100528825(IDeviceID@1100528801 : Text[50]) : Code[20];
    VAR
      IoTDevice@1100528800 : Record 11130015;
    BEGIN
      IoTDevice.GET(IDeviceID);
      EXIT(IoTDevice."Device Group");
    END;

    PROCEDURE GetIoTEventID@1100528800(IDeviceID@1100528800 : Text[50];JToken@1100528802 : DotNet "'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.Linq.JToken") : Text;
    VAR
      IoTDevice@1100528801 : Record 11130015;
      IoTDeviceGroup@1100528803 : Record 11130018;
      JsonManagement@1100528804 : Codeunit 11125361;
    BEGIN
      EXIT(JsonManagement.GetValueAsText(JToken, GetPropertyNameEventID(IDeviceID)));
    END;

    LOCAL PROCEDURE GetPropertyNameEventID@1100528803(IDeviceID@1100528800 : Text[50]) : Text;
    VAR
      IoTDevice@1100528801 : Record 11130015;
      IoTDeviceGroup@1100528802 : Record 11130018;
    BEGIN
      IoTDevice.GET(IDeviceID);
      IoTDeviceGroup.GET(IoTDevice."Device Group");
      EXIT(IoTDeviceGroup."Property Name Event ID");
    END;

    LOCAL PROCEDURE GetPropertyNamePublished@1100528805(IDeviceID@1100528800 : Text[50]) : Text;
    VAR
      IoTDevice@1100528801 : Record 11130015;
      IoTDeviceGroup@1100528802 : Record 11130018;
    BEGIN
      IoTDevice.GET(IDeviceID);
      IoTDeviceGroup.GET(IoTDevice."Device Group");
      EXIT(IoTDeviceGroup."Property Name Published");
    END;

    LOCAL PROCEDURE GetPropertyNameValue@1100528816(IDeviceID@1100528800 : Text[50]) : Text;
    VAR
      IoTDevice@1100528801 : Record 11130015;
      IoTDeviceGroup@1100528802 : Record 11130018;
    BEGIN
      IoTDevice.GET(IDeviceID);
      IoTDeviceGroup.GET(IoTDevice."Device Group");
      EXIT(IoTDeviceGroup."Property Name Value");
    END;

    PROCEDURE GetEventPublished@1100528801(IEventID@1100528800 : Text[50];JToken@1100528802 : DotNet "'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.Linq.JToken") : DateTime;
    VAR
      IoTEvent@1100528801 : Record 11130016;
      JsonManagement@1100528804 : Codeunit 11125361;
    BEGIN
      EXIT(JsonManagement.GetValueAsDateTime(JToken, GetPropertyNamePublished(IEventID)));
    END;

    PROCEDURE GetEventValue@1100528802(IDeviceID@1100528805 : Text[50];IEventID@1100528801 : Text[50];JToken@1100528800 : DotNet "'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.Linq.JToken") : Text;
    VAR
      IoTEvent@1100528803 : Record 11130016;
      JsonManagement@1100528802 : Codeunit 11125361;
      EventValueType@1100528804 : ' ,text,integer,decimal,boolean,date,time,datetime';
    BEGIN
      GetEventValueType(IDeviceID, IEventID, EventValueType);

      CASE EventValueType OF
        IoTEvent."Value Type"::boolean: EXIT(FORMAT(JsonManagement.GetValueAsBoolean(JToken, GetPropertyNameValue(IDeviceID))));
        IoTEvent."Value Type"::date: EXIT(FORMAT(JsonManagement.GetValueAsDate(JToken, GetPropertyNameValue(IDeviceID))));
        IoTEvent."Value Type"::datetime: EXIT(FORMAT(JsonManagement.GetValueAsDateTime(JToken, GetPropertyNameValue(IDeviceID))));
        IoTEvent."Value Type"::decimal: EXIT(FORMAT(JsonManagement.GetValueAsDecimal(JToken, GetPropertyNameValue(IDeviceID))));
        IoTEvent."Value Type"::integer: EXIT(FORMAT(JsonManagement.GetValueAsInteger(JToken, GetPropertyNameValue(IDeviceID))));
        IoTEvent."Value Type"::text: EXIT(FORMAT(JsonManagement.GetValueAsText(JToken, GetPropertyNameValue(IDeviceID))));
        IoTEvent."Value Type"::time: EXIT(FORMAT(JsonManagement.GetValueAsTime(JToken, GetPropertyNameValue(IDeviceID))));
      END;
    END;

    PROCEDURE GetEventValueType@1100528807(IDeviceID@1100528800 : Text[50];IEventID@1100528804 : Text[50];VAR OEventValueType@1100528801 : ' ,text,integer,decimal,boolean,date,time,datetime');
    VAR
      IoTDevice@1100528803 : Record 11130015;
      IoTDeviceGroupEvent@1100528802 : Record 11130016;
    BEGIN
      IoTDeviceGroupEvent.GET(GetIoTDeviceGroupEventCodeByDeviceID(IDeviceID), IEventID);
      OEventValueType := IoTDeviceGroupEvent."Value Type";
    END;

    PROCEDURE GetEvaluateValueByValueType@1100528806(IDeviceID@1100528810 : Text[50];IEventID@1100528800 : Text[50];IValue@1100528801 : Text) : Text[50];
    VAR
      IoTDeviceGroupEvent@1100528803 : Record 11130016;
      EvaluatedValueText@1100528809 : Text;
      DummyBoolean@1100528802 : Boolean;
      DummyDate@1100528804 : Date;
      DummyDateTime@1100528805 : DateTime;
      DummyDecimal@1100528806 : Decimal;
      DummyInteger@1100528807 : Integer;
      DummyTime@1100528808 : Time;
    BEGIN
      IF (IEventID = '') OR (IValue = '') OR (IDeviceID = '') THEN
        EXIT;

      IoTDeviceGroupEvent.GET(GetIoTDeviceGroupEventCodeByDeviceID(IDeviceID), IEventID);

      CASE IoTDeviceGroupEvent."Value Type" OF
        IoTDeviceGroupEvent."Value Type"::boolean:
          BEGIN
            DummyBoolean := GetEvaluatedBoolean(IValue, EvaluatedValueText);
           EXIT(EvaluatedValueText);
          END;
        IoTDeviceGroupEvent."Value Type"::date:
          BEGIN
            DummyDate := GetEvaluatedDate(IValue, EvaluatedValueText);
            EXIT(EvaluatedValueText);
          END;
        IoTDeviceGroupEvent."Value Type"::datetime:
          BEGIN
            DummyDateTime := GetEvaluatedDateTime(IValue, EvaluatedValueText);
            EXIT(EvaluatedValueText);
          END;
        IoTDeviceGroupEvent."Value Type"::decimal:
          BEGIN
            DummyDecimal := GetEvaluatedDecimal(IValue, EvaluatedValueText);
            EXIT(EvaluatedValueText);
          END;
        IoTDeviceGroupEvent."Value Type"::integer:
          BEGIN
            DummyInteger := GetEvaluatedInteger(IValue, EvaluatedValueText);
            EXIT(EvaluatedValueText);
          END;
        IoTDeviceGroupEvent."Value Type"::time:
          BEGIN
            DummyTime := GetEvaluatedTime(IValue, EvaluatedValueText);
            EXIT(EvaluatedValueText);
          END;
        ELSE
          EXIT(IValue);
      END;
    END;

    PROCEDURE GetEvaluatedBoolean@1100528815(IValue@1100528800 : Text[50];VAR OValueText@1100528802 : Text) : Boolean;
    VAR
      DummyBoolean@1100528801 : Boolean;
    BEGIN
      IF IValue = '' THEN
        EXIT;

      IF UPPERCASE(IValue) IN ['YES', 'JA', 'TRUE'] THEN
        EVALUATE(DummyBoolean, 'TRUE');

      IF UPPERCASE(IValue) IN ['No','NEE','FALSE'] THEN
        EVALUATE(DummyBoolean, 'FALSE');

      OValueText := FORMAT(DummyBoolean);
      EXIT(DummyBoolean);
    END;

    PROCEDURE GetEvaluatedDate@1100528814(IValue@1100528800 : Text[50];VAR OValueText@1100528802 : Text) : Date;
    VAR
      DummyDate@1100528801 : Date;
    BEGIN
      IF IValue = '' THEN
        EXIT;
      IF IValue = DateToday THEN BEGIN
        EVALUATE(DummyDate, FORMAT(TODAY));
        OValueText := FORMAT(DummyDate);
      END ELSE BEGIN
        EVALUATE(DummyDate, IValue);
        OValueText := FORMAT(DummyDate);
      END;
      EXIT(DummyDate);
    END;

    PROCEDURE GetEvaluatedDateTime@1100528813(IValue@1100528800 : Text[50];VAR OValueText@1100528802 : Text) : DateTime;
    VAR
      DummyDateTime@1100528801 : DateTime;
    BEGIN
      IF IValue = '' THEN
        EXIT;
      EVALUATE(DummyDateTime, IValue);
      OValueText := FORMAT(DummyDateTime);
      EXIT(DummyDateTime);
    END;

    PROCEDURE GetEvaluatedDecimal@1100528812(IValue@1100528800 : Text[50];VAR OValueText@1100528802 : Text) : Decimal;
    VAR
      DummyDecimal@1100528801 : Decimal;
    BEGIN
      IF IValue = '' THEN
        EXIT;
      EVALUATE(DummyDecimal, IValue);
      OValueText := FORMAT(DummyDecimal);
      EXIT(DummyDecimal);
    END;

    PROCEDURE GetEvaluatedInteger@1100528810(IValue@1100528800 : Text[50];VAR OValueText@1100528802 : Text) : Integer;
    VAR
      DummyInteger@1100528801 : Integer;
    BEGIN
      IF IValue = '' THEN
        EXIT;
      EVALUATE(DummyInteger, IValue);
      OValueText := FORMAT(DummyInteger);
      EXIT(DummyInteger);
    END;

    PROCEDURE GetEvaluatedTime@1100528809(IValue@1100528800 : Text[50];VAR OValueText@1100528802 : Text) : Time;
    VAR
      DummyTime@1100528801 : Time;
    BEGIN
      IF IValue = '' THEN
        EXIT;
      EVALUATE(DummyTime, IValue);
      OValueText := FORMAT(DummyTime);
      EXIT(DummyTime);
    END;

    PROCEDURE CreateServiceCall@1100528808(IIoTServiceObjectThreshold@1100528805 : Record 11130020;IIoTEventLog@1100528807 : Record 11130017;VAR OServiceCallNo@1100528804 : Code[20]);
    VAR
      ServiceCall@1100528801 : Record 11012822;
      ServiceObject@1100528802 : Record 11071691;
      ServiceLocation@1100528803 : Record 11012801;
      IoTDeviceGroupEvent@1100528806 : Record 11130016;
    BEGIN
      ServiceObject.GET(IIoTServiceObjectThreshold."Service Object");
      ServiceCall.INIT;
      ServiceCall.Origin := ServiceCall.Origin::"IoT Event";
      ServiceCall.INSERT(TRUE);
       IF ServiceLocation.GET(ServiceObject."Service Location No.") THEN BEGIN
        ServiceCall.VALIDATE("Service Location No.", ServiceLocation."No.");
        ServiceCall.VALIDATE("Customer No.", ServiceLocation."Customer No.");
        ServiceCall.VALIDATE("Object No.", ServiceObject."No.");
        ServiceCall.Description := GetIoTDeviceGroupEventDescription(IIoTServiceObjectThreshold) + ' ' + Value + ': ' + IIoTEventLog.Value;
      END;
      ServiceCall.MODIFY(TRUE);
      OServiceCallNo := ServiceCall."No.";
    END;

    PROCEDURE AddActionLogEntry@1100528817(IoTServiceObjectThreshold@1100528800 : Record 11130020;IServiceCallNo@1100528802 : Code[20];IoTEventLogEntryNo@1100528803 : Integer);
    VAR
      IoTActionLog@1100528801 : Record 11130022;
    BEGIN
      IoTActionLog.INIT;
      IoTActionLog."Device ID" := IoTServiceObjectThreshold."Device ID";
      IoTActionLog."Event ID" := IoTServiceObjectThreshold."Event ID";
      IoTActionLog."Service Object" := IoTServiceObjectThreshold."Service Object";
      IoTActionLog."Action Code" := IoTServiceObjectThreshold."Action Code";
      IoTActionLog.INSERT(TRUE);

      IoTServiceObjectThreshold.CALCFIELDS("IoT Action");

      IoTActionLog."IoT Action" := IoTServiceObjectThreshold."IoT Action";
      IoTActionLog."Service Call No." := IServiceCallNo;
      IoTActionLog."Created by IoT Event Log Entry" := IoTEventLogEntryNo;
      IoTActionLog."Created On" := TODAY;
      IoTActionLog."Created At" := TIME;
      IoTActionLog.MODIFY;
    END;

    PROCEDURE CloseCorrespondingIoTActionLogEntries@1100528811(IAction@1100528802 : ' ,,,,Call,,,,ServiceObjectStatus';IServiceObjectNo@1100528800 : Code[20];IServiceCallNo@1100528803 : Code[20]);
    VAR
      IoTActionLog@1100528801 : Record 11130022;
    BEGIN
      CASE IAction OF
        IAction::Call:
          BEGIN
            IoTActionLog.SETRANGE("IoT Action", IAction);
            IoTActionLog.SETRANGE("Service Call No.", IServiceCallNo);
            IoTActionLog.SETRANGE(Closed, FALSE);
            IF IoTActionLog.FINDSET THEN
              REPEAT
                IoTActionLog.VALIDATE(Closed, TRUE);
                IoTActionLog.MODIFY;
              UNTIL IoTActionLog.NEXT = 0;
          END;
        IAction::ServiceObjectStatus:
          BEGIN
            IoTActionLog.SETRANGE("IoT Action", IAction);
            IoTActionLog.SETRANGE("Service Object", IServiceObjectNo);
            IoTActionLog.SETRANGE(Closed, FALSE);
            IF IoTActionLog.FINDSET THEN
              REPEAT
                IoTActionLog.VALIDATE(Closed, TRUE);
                IoTActionLog.MODIFY;
              UNTIL IoTActionLog.NEXT = 0;
          END;
      END;
    END;

    BEGIN
    END.
  }
}

