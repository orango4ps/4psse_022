OBJECT Codeunit 12013597 Item Charge Assgnt. (EX Purch)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EXF512000,4PS;
  }
  PROPERTIES
  {
    Permissions=TableData 38=r,
                TableData 39=r,
                TableData 121=r,
                TableData 6651=r,
                TableData 12013594=imd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1100285000 : TextConst 'ENU=Equally,By Amount,By Weight,By Volume;SVE=Lika,Efter belopp,Efter vikt,Efter volym';
      SuggestItemChargeMsg@1100285001 : TextConst 'ENU=Select how to distribute the assigned item charge when the document has more than one line of type Item.;SVE=V„lj hur du vill f”rdela den tilldelade artikelomkostnaden n„r dokumentet har fler „n en rad av typen artikel.';

    PROCEDURE InsertItemChargeAssgnt@1(ItemChargeAssgntPurch@1000 : Record 12013594;ApplToDocType@1001 : Option;ApplToDocNo2@1002 : Code[20];ApplToDocLineNo2@1003 : Integer;ItemNo2@1004 : Code[20];Description2@1005 : Text[50];QtyToAssign@1100285001 : Decimal;AmountToAssign@1100285000 : Decimal;VAR NextLineNo@1006 : Integer);
    VAR
      ItemChargeAssgntPurch2@1007 : Record 12013594;
    BEGIN
      NextLineNo := NextLineNo + 10000;

      ItemChargeAssgntPurch2.INIT;
      ItemChargeAssgntPurch2."Document Type" := ItemChargeAssgntPurch."Document Type";
      ItemChargeAssgntPurch2."Inbound Document No." := ItemChargeAssgntPurch."Inbound Document No.";
      ItemChargeAssgntPurch2."Document Line No." := ItemChargeAssgntPurch."Document Line No.";
      ItemChargeAssgntPurch2."Line No." := NextLineNo;
      ItemChargeAssgntPurch2."Item Charge No." := ItemChargeAssgntPurch."Item Charge No.";
      ItemChargeAssgntPurch2."Applies-to Doc. Type" := ApplToDocType;
      ItemChargeAssgntPurch2."Applies-to Doc. No." := ApplToDocNo2;
      ItemChargeAssgntPurch2."Applies-to Doc. Line No." := ApplToDocLineNo2;
      ItemChargeAssgntPurch2."Item No." := ItemNo2;
      ItemChargeAssgntPurch2.Description := Description2;
      ItemChargeAssgntPurch2."Unit Cost" := ItemChargeAssgntPurch."Unit Cost";
      ItemChargeAssgntPurch2."Item Charge No." := ItemChargeAssgntPurch."Item Charge No.";
      IF QtyToAssign <> 0 THEN BEGIN
        ItemChargeAssgntPurch."Amount to Assign" := AmountToAssign;
        ItemChargeAssgntPurch.VALIDATE("Qty. to Assign",QtyToAssign);
      END;
      ItemChargeAssgntPurch2.INSERT;
    END;

    PROCEDURE CreateDocChargeAssgnt@2(LastItemChargeAssgntPurch@1000 : Record 12013594;ReceiptNo@1001 : Code[20]);
    VAR
      FromPurchLine@1002 : Record 12013588;
      ItemChargeAssgntPurch@1003 : Record 12013594;
      NextLineNo@1004 : Integer;
    BEGIN
      WITH LastItemChargeAssgntPurch DO BEGIN
        FromPurchLine.SETRANGE("Document Type","Document Type");
        FromPurchLine.SETRANGE("Inbound Document No.","Inbound Document No.");
        FromPurchLine.SETRANGE(Type,FromPurchLine.Type::Item);
        IF FromPurchLine.FIND('-') THEN BEGIN
          NextLineNo := "Line No.";
          ItemChargeAssgntPurch.RESET;
          ItemChargeAssgntPurch.SETRANGE("Document Type","Document Type");
          ItemChargeAssgntPurch.SETRANGE("Inbound Document No.","Inbound Document No.");
          ItemChargeAssgntPurch.SETRANGE("Document Line No.","Document Line No.");
          ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. No.",FORMAT("Inbound Document No."));
          REPEAT
            IF (FromPurchLine.Quantity <> 0) AND
               (FromPurchLine.Quantity <> FromPurchLine."Quantity Invoiced") AND
               (FromPurchLine."Work Center No." = '') AND
               ((ReceiptNo = '') OR (FromPurchLine."Receipt No." = ReceiptNo)) AND
               FromPurchLine."Allow Item Charge Assignment"
            THEN BEGIN
              ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Line No.",FromPurchLine."Line No.");
              IF NOT ItemChargeAssgntPurch.FINDFIRST THEN
                InsertItemChargeAssgnt(
                  LastItemChargeAssgntPurch,FromPurchLine."Document Type",
                  FORMAT(FromPurchLine."Inbound Document No."),FromPurchLine."Line No.",
                  FromPurchLine."No.",FromPurchLine.Description,0,0,NextLineNo);
            END;
          UNTIL FromPurchLine.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE CreateRcptChargeAssgnt@3(VAR FromPurchRcptLine@1000 : Record 121;ItemChargeAssgntPurch@1001 : Record 12013594);
    VAR
      ItemChargeAssgntPurch2@1002 : Record 12013594;
      NextLine@1003 : Integer;
    BEGIN
      FromPurchRcptLine.TESTFIELD("Work Center No.",'');
      IF NOT ItemChargeAssgntPurch.RECORDLEVELLOCKING THEN
        ItemChargeAssgntPurch.LOCKTABLE(TRUE,TRUE);
      NextLine := ItemChargeAssgntPurch."Line No.";
      ItemChargeAssgntPurch2.SETRANGE("Document Type",ItemChargeAssgntPurch."Document Type");
      ItemChargeAssgntPurch2.SETRANGE("Inbound Document No.",ItemChargeAssgntPurch."Inbound Document No.");
      ItemChargeAssgntPurch2.SETRANGE("Document Line No.",ItemChargeAssgntPurch."Document Line No.");
      ItemChargeAssgntPurch2.SETRANGE(
        "Applies-to Doc. Type",ItemChargeAssgntPurch2."Applies-to Doc. Type"::Receipt);
      REPEAT
        ItemChargeAssgntPurch2.SETRANGE("Applies-to Doc. No.",FromPurchRcptLine."Document No.");
        ItemChargeAssgntPurch2.SETRANGE("Applies-to Doc. Line No.",FromPurchRcptLine."Line No.");
        IF NOT ItemChargeAssgntPurch2.FIND('-') THEN
          InsertItemChargeAssgnt(ItemChargeAssgntPurch,ItemChargeAssgntPurch2."Applies-to Doc. Type"::Receipt,
            FromPurchRcptLine."Document No.",FromPurchRcptLine."Line No.",
            FromPurchRcptLine."No.",FromPurchRcptLine.Description,0,0,NextLine);
      UNTIL FromPurchRcptLine.NEXT = 0;
    END;

    PROCEDURE CreateTransferRcptChargeAssgnt@4(VAR FromTransRcptLine@1000 : Record 5747;ItemChargeAssgntPurch@1001 : Record 12013594);
    VAR
      ItemChargeAssgntPurch2@1002 : Record 12013594;
      NextLine@1003 : Integer;
    BEGIN
      NextLine := ItemChargeAssgntPurch."Line No.";
      ItemChargeAssgntPurch2.SETRANGE("Document Type",ItemChargeAssgntPurch."Document Type");
      ItemChargeAssgntPurch2.SETRANGE("Inbound Document No.",ItemChargeAssgntPurch."Inbound Document No.");
      ItemChargeAssgntPurch2.SETRANGE("Document Line No.",ItemChargeAssgntPurch."Document Line No.");
      ItemChargeAssgntPurch2.SETRANGE(
        "Applies-to Doc. Type",ItemChargeAssgntPurch2."Applies-to Doc. Type"::"Transfer Receipt");
      REPEAT
        ItemChargeAssgntPurch2.SETRANGE("Applies-to Doc. No.",FromTransRcptLine."Document No.");
        ItemChargeAssgntPurch2.SETRANGE("Applies-to Doc. Line No.",FromTransRcptLine."Line No.");
        IF NOT ItemChargeAssgntPurch2.FIND('-') THEN
          InsertItemChargeAssgnt(ItemChargeAssgntPurch,ItemChargeAssgntPurch2."Applies-to Doc. Type"::"Transfer Receipt",
            FromTransRcptLine."Document No.",FromTransRcptLine."Line No.",
            FromTransRcptLine."Item No.",FromTransRcptLine.Description,0,0,NextLine);
      UNTIL FromTransRcptLine.NEXT = 0;
    END;

    PROCEDURE CreateShptChargeAssgnt@6(VAR FromReturnShptLine@1000 : Record 6651;ItemChargeAssgntPurch@1001 : Record 12013594);
    VAR
      ItemChargeAssgntPurch2@1002 : Record 12013594;
      NextLine@1003 : Integer;
    BEGIN
      FromReturnShptLine.TESTFIELD("Job No.",'');
      NextLine := ItemChargeAssgntPurch."Line No.";
      ItemChargeAssgntPurch2.SETRANGE("Document Type",ItemChargeAssgntPurch."Document Type");
      ItemChargeAssgntPurch2.SETRANGE("Inbound Document No.",ItemChargeAssgntPurch."Inbound Document No.");
      ItemChargeAssgntPurch2.SETRANGE("Document Line No.",ItemChargeAssgntPurch."Document Line No.");
      ItemChargeAssgntPurch2.SETRANGE(
        "Applies-to Doc. Type",ItemChargeAssgntPurch2."Applies-to Doc. Type"::"Return Shipment");
      REPEAT
        ItemChargeAssgntPurch2.SETRANGE("Applies-to Doc. No.",FromReturnShptLine."Document No.");
        ItemChargeAssgntPurch2.SETRANGE("Applies-to Doc. Line No.",FromReturnShptLine."Line No.");
        IF NOT ItemChargeAssgntPurch2.FIND('-') THEN
          InsertItemChargeAssgnt(ItemChargeAssgntPurch,ItemChargeAssgntPurch2."Applies-to Doc. Type"::"Return Shipment",
            FromReturnShptLine."Document No.",FromReturnShptLine."Line No.",
            FromReturnShptLine."No.",FromReturnShptLine.Description,0,0,NextLine);
      UNTIL FromReturnShptLine.NEXT = 0;
    END;

    PROCEDURE CreateSalesShptChargeAssgnt@8(VAR FromSalesShptLine@1000 : Record 111;ItemChargeAssgntPurch@1001 : Record 12013594);
    VAR
      ItemChargeAssgntPurch2@1002 : Record 12013594;
      NextLine@1003 : Integer;
    BEGIN
      FromSalesShptLine.TESTFIELD("Job No.",'');
      NextLine := ItemChargeAssgntPurch."Line No.";
      ItemChargeAssgntPurch2.SETRANGE("Document Type",ItemChargeAssgntPurch."Document Type");
      ItemChargeAssgntPurch2.SETRANGE("Inbound Document No.",ItemChargeAssgntPurch."Inbound Document No.");
      ItemChargeAssgntPurch2.SETRANGE("Document Line No.",ItemChargeAssgntPurch."Document Line No.");
      ItemChargeAssgntPurch2.SETRANGE(
        "Applies-to Doc. Type",ItemChargeAssgntPurch2."Applies-to Doc. Type"::"Sales Shipment");
      REPEAT
        ItemChargeAssgntPurch2.SETRANGE("Applies-to Doc. No.",FromSalesShptLine."Document No.");
        ItemChargeAssgntPurch2.SETRANGE("Applies-to Doc. Line No.",FromSalesShptLine."Line No.");
        IF NOT ItemChargeAssgntPurch2.FIND('-') THEN
          InsertItemChargeAssgnt(ItemChargeAssgntPurch,ItemChargeAssgntPurch2."Applies-to Doc. Type"::"Sales Shipment",
            FromSalesShptLine."Document No.",FromSalesShptLine."Line No.",
            FromSalesShptLine."No.",FromSalesShptLine.Description,0,0,NextLine);
      UNTIL FromSalesShptLine.NEXT = 0;
    END;

    PROCEDURE CreateReturnRcptChargeAssgnt@7(VAR FromReturnRcptLine@1000 : Record 6661;ItemChargeAssgntPurch@1001 : Record 12013594);
    VAR
      ItemChargeAssgntPurch2@1002 : Record 12013594;
      NextLine@1003 : Integer;
    BEGIN
      FromReturnRcptLine.TESTFIELD("Job No.",'');
      NextLine := ItemChargeAssgntPurch."Line No.";
      ItemChargeAssgntPurch2.SETRANGE("Document Type",ItemChargeAssgntPurch."Document Type");
      ItemChargeAssgntPurch2.SETRANGE("Inbound Document No.",ItemChargeAssgntPurch."Inbound Document No.");
      ItemChargeAssgntPurch2.SETRANGE("Document Line No.",ItemChargeAssgntPurch."Document Line No.");
      ItemChargeAssgntPurch2.SETRANGE(
        "Applies-to Doc. Type",ItemChargeAssgntPurch2."Applies-to Doc. Type"::"Return Receipt");
      REPEAT
        ItemChargeAssgntPurch2.SETRANGE("Applies-to Doc. No.",FromReturnRcptLine."Document No.");
        ItemChargeAssgntPurch2.SETRANGE("Applies-to Doc. Line No.",FromReturnRcptLine."Line No.");
        IF NOT ItemChargeAssgntPurch2.FIND('-') THEN
          InsertItemChargeAssgnt(ItemChargeAssgntPurch,ItemChargeAssgntPurch2."Applies-to Doc. Type"::"Return Receipt",
            FromReturnRcptLine."Document No.",FromReturnRcptLine."Line No.",
            FromReturnRcptLine."No.",FromReturnRcptLine.Description,0,0,NextLine);
      UNTIL FromReturnRcptLine.NEXT = 0;
    END;

    PROCEDURE SuggestAssgnt@5(PurchLine2@1000 : Record 12013588;TotalQtyToAssign@1001 : Decimal;TotalAmtToAssign@1100285000 : Decimal);
    VAR
      Selection@1002 : Integer;
      ItemChargeAssgntPurch@1100285001 : Record 12013594;
    BEGIN
      WITH PurchLine2 DO BEGIN
        TESTFIELD("Qty. to Invoice");
        ItemChargeAssgntPurch.SETRANGE("Document Type","Document Type");
        ItemChargeAssgntPurch.SETRANGE("Inbound Document No.","Inbound Document No.");
        ItemChargeAssgntPurch.SETRANGE("Document Line No.","Line No.");
      END;
      IF ItemChargeAssgntPurch.ISEMPTY THEN
        EXIT;

      ItemChargeAssgntPurch.SETFILTER("Applies-to Doc. Type",'<>%1',ItemChargeAssgntPurch."Applies-to Doc. Type"::"Transfer Receipt");

      Selection := 1;
      IF ItemChargeAssgntPurch.COUNT > 1 THEN
        Selection := STRMENU(Text000,2,SuggestItemChargeMsg);
      //Selection := STRMENU(Text000,2);

      IF Selection = 0 THEN
        EXIT;

      SuggestAssgnt2(PurchLine2,TotalQtyToAssign,TotalAmtToAssign,Selection);
    END;

    PROCEDURE SuggestAssgnt2@9(PurchLine2@1000 : Record 12013588;TotalQtyToAssign@1001 : Decimal;TotalAmtToAssign@1100285001 : Decimal;Selection@1018 : Integer);
    VAR
      Currency@1100285003 : Record 4;
      PurchHeader@1100285002 : Record 12013587;
      ItemChargeAssgntPurch@1100285000 : Record 12013594;
    BEGIN
      PurchLine2.TESTFIELD("Qty. to Invoice");
      PurchHeader.GET(PurchLine2."Inbound Document No.");

      IF NOT Currency.GET(PurchHeader."Currency Code") THEN
        Currency.InitRoundingPrecision;

      ItemChargeAssgntPurch.SETRANGE("Document Type",PurchLine2."Document Type");
      ItemChargeAssgntPurch.SETRANGE("Inbound Document No.",PurchLine2."Inbound Document No.");
      ItemChargeAssgntPurch.SETRANGE("Document Line No.",PurchLine2."Line No.");
      IF ItemChargeAssgntPurch.FINDFIRST THEN
        CASE Selection OF
          1:
            AssignEqually(ItemChargeAssgntPurch,Currency,TotalQtyToAssign,TotalAmtToAssign);
          2:
            AssignByAmount(ItemChargeAssgntPurch,Currency,PurchHeader,TotalQtyToAssign,TotalAmtToAssign);
          3:
            AssignByWeight(ItemChargeAssgntPurch,Currency,TotalQtyToAssign);
          4:
            AssignByVolume(ItemChargeAssgntPurch,Currency,TotalQtyToAssign);
        END;
    END;

    LOCAL PROCEDURE AssignEqually@26(VAR ItemChargeAssgntPurch@1000 : Record 12013594;Currency@1003 : Record 4;TotalQtyToAssign@1005 : Decimal;TotalAmtToAssign@1004 : Decimal);
    VAR
      TempItemChargeAssgntPurch@1001 : TEMPORARY Record 12013594;
      RemainingNumOfLines@1002 : Integer;
    BEGIN
      REPEAT
        IF NOT ItemChargeAssgntPurch.PurchLineInvoiced THEN BEGIN
          TempItemChargeAssgntPurch := ItemChargeAssgntPurch;
          TempItemChargeAssgntPurch.INSERT;
        END;
      UNTIL ItemChargeAssgntPurch.NEXT = 0;

      IF TempItemChargeAssgntPurch.FINDSET(TRUE) THEN BEGIN
        RemainingNumOfLines := TempItemChargeAssgntPurch.COUNT;
        REPEAT
          ItemChargeAssgntPurch.GET(
            TempItemChargeAssgntPurch."Document Type",
            TempItemChargeAssgntPurch."Inbound Document No.",
            TempItemChargeAssgntPurch."Document Line No.",
            TempItemChargeAssgntPurch."Line No.");
          ItemChargeAssgntPurch."Qty. to Assign" := ROUND(TotalQtyToAssign / RemainingNumOfLines,0.00001);
          ItemChargeAssgntPurch."Amount to Assign" :=
            ROUND(
              ItemChargeAssgntPurch."Qty. to Assign" / TotalQtyToAssign * TotalAmtToAssign,
              Currency."Amount Rounding Precision");
          TotalQtyToAssign -= ItemChargeAssgntPurch."Qty. to Assign";
          TotalAmtToAssign -= ItemChargeAssgntPurch."Amount to Assign";
          RemainingNumOfLines := RemainingNumOfLines - 1;
          ItemChargeAssgntPurch.MODIFY;
        UNTIL TempItemChargeAssgntPurch.NEXT = 0;
      END;
      TempItemChargeAssgntPurch.DELETEALL;
    END;

    LOCAL PROCEDURE AssignByAmount@27(VAR ItemChargeAssgntPurch@1003 : Record 12013594;Currency@1002 : Record 4;PurchHeader@1008 : Record 12013587;TotalQtyToAssign@1001 : Decimal;TotalAmtToAssign@1000 : Decimal);
    VAR
      TempItemChargeAssgntPurch@1004 : TEMPORARY Record 12013594;
      PurchLine@1005 : Record 12013588;
      PurchRcptLine@1006 : Record 121;
      CurrExchRate@1009 : Record 330;
      ReturnRcptLine@1010 : Record 6661;
      ReturnShptLine@1011 : Record 6651;
      SalesShptLine@1012 : Record 111;
      CurrencyCode@1007 : Code[10];
      TotalAppliesToDocLineAmount@1013 : Decimal;
    BEGIN
      REPEAT
        IF NOT ItemChargeAssgntPurch.PurchLineInvoiced THEN BEGIN
          TempItemChargeAssgntPurch := ItemChargeAssgntPurch;
          CASE ItemChargeAssgntPurch."Applies-to Doc. Type" OF
            ItemChargeAssgntPurch."Applies-to Doc. Type"::Quote,
            ItemChargeAssgntPurch."Applies-to Doc. Type"::Order,
            ItemChargeAssgntPurch."Applies-to Doc. Type"::Invoice,
            ItemChargeAssgntPurch."Applies-to Doc. Type"::"Return Order",
            ItemChargeAssgntPurch."Applies-to Doc. Type"::"Credit Memo":
              BEGIN
                PurchLine.GET(
                  ItemChargeAssgntPurch."Inbound Document No.",
                  ItemChargeAssgntPurch."Applies-to Doc. Line No.");
                TempItemChargeAssgntPurch."Applies-to Doc. Line Amount" :=
                  ABS(PurchLine."Line Amount");
              END;
            ItemChargeAssgntPurch."Applies-to Doc. Type"::Receipt:
              BEGIN
                PurchRcptLine.GET(
                  ItemChargeAssgntPurch."Applies-to Doc. No.",
                  ItemChargeAssgntPurch."Applies-to Doc. Line No.");
                CurrencyCode := PurchRcptLine.GetCurrencyCodeFromHeader;
                IF CurrencyCode = PurchHeader."Currency Code" THEN
                  TempItemChargeAssgntPurch."Applies-to Doc. Line Amount" :=
                    ABS(PurchRcptLine."Item Charge Base Amount")
                ELSE
                  TempItemChargeAssgntPurch."Applies-to Doc. Line Amount" :=
                    CurrExchRate.ExchangeAmtFCYToFCY(
                      PurchHeader."Posting Date",CurrencyCode,PurchHeader."Currency Code",
                      ABS(PurchRcptLine."Item Charge Base Amount"),FALSE); // 4PS
              END;
            ItemChargeAssgntPurch."Applies-to Doc. Type"::"Return Shipment":
              BEGIN
                ReturnShptLine.GET(
                  ItemChargeAssgntPurch."Applies-to Doc. No.",
                  ItemChargeAssgntPurch."Applies-to Doc. Line No.");
                CurrencyCode := ReturnShptLine.GetCurrencyCode;
                IF CurrencyCode = PurchHeader."Currency Code" THEN
                  TempItemChargeAssgntPurch."Applies-to Doc. Line Amount" :=
                    ABS(ReturnShptLine."Item Charge Base Amount")
                ELSE
                  TempItemChargeAssgntPurch."Applies-to Doc. Line Amount" :=
                    CurrExchRate.ExchangeAmtFCYToFCY(
                      PurchHeader."Posting Date",CurrencyCode,PurchHeader."Currency Code",
                      ABS(ReturnShptLine."Item Charge Base Amount"),FALSE); // 4PS
              END;
            ItemChargeAssgntPurch."Applies-to Doc. Type"::"Sales Shipment":
              BEGIN
                SalesShptLine.GET(
                  ItemChargeAssgntPurch."Applies-to Doc. No.",
                  ItemChargeAssgntPurch."Applies-to Doc. Line No.");
                CurrencyCode := SalesShptLine.GetCurrencyCode;
                IF CurrencyCode = PurchHeader."Currency Code" THEN
                  TempItemChargeAssgntPurch."Applies-to Doc. Line Amount" :=
                    ABS(SalesShptLine."Item Charge Base Amount")
                ELSE
                  TempItemChargeAssgntPurch."Applies-to Doc. Line Amount" :=
                    CurrExchRate.ExchangeAmtFCYToFCY(
                      PurchHeader."Posting Date",CurrencyCode,PurchHeader."Currency Code",
                      ABS(SalesShptLine."Item Charge Base Amount"),FALSE); // 4PS
              END;
            ItemChargeAssgntPurch."Applies-to Doc. Type"::"Return Receipt":
              BEGIN
                ReturnRcptLine.GET(
                  ItemChargeAssgntPurch."Applies-to Doc. No.",
                  ItemChargeAssgntPurch."Applies-to Doc. Line No.");
                CurrencyCode := ReturnRcptLine.GetCurrencyCode;
                IF CurrencyCode = PurchHeader."Currency Code" THEN
                  TempItemChargeAssgntPurch."Applies-to Doc. Line Amount" :=
                    ABS(ReturnRcptLine."Item Charge Base Amount")
                ELSE
                  TempItemChargeAssgntPurch."Applies-to Doc. Line Amount" :=
                    CurrExchRate.ExchangeAmtFCYToFCY(
                      PurchHeader."Posting Date",CurrencyCode,PurchHeader."Currency Code",
                      ABS(ReturnRcptLine."Item Charge Base Amount"),FALSE); // 4PS
              END;
          END;
          IF TempItemChargeAssgntPurch."Applies-to Doc. Line Amount" <> 0 THEN
            TempItemChargeAssgntPurch.INSERT
          ELSE BEGIN
            ItemChargeAssgntPurch."Amount to Assign" := 0;
            ItemChargeAssgntPurch."Qty. to Assign" := 0;
            ItemChargeAssgntPurch.MODIFY;
          END;
          TotalAppliesToDocLineAmount += TempItemChargeAssgntPurch."Applies-to Doc. Line Amount";
        END;
      UNTIL ItemChargeAssgntPurch.NEXT = 0;

      IF TempItemChargeAssgntPurch.FINDSET(TRUE) THEN
        REPEAT
          ItemChargeAssgntPurch.GET(
            TempItemChargeAssgntPurch."Document Type",
            TempItemChargeAssgntPurch."Inbound Document No.",
            TempItemChargeAssgntPurch."Document Line No.",
            TempItemChargeAssgntPurch."Line No.");
          IF TotalQtyToAssign <> 0 THEN BEGIN
            ItemChargeAssgntPurch."Qty. to Assign" :=
              ROUND(
                TempItemChargeAssgntPurch."Applies-to Doc. Line Amount" / TotalAppliesToDocLineAmount * TotalQtyToAssign,
                0.00001);
            ItemChargeAssgntPurch."Amount to Assign" :=
              ROUND(
                ItemChargeAssgntPurch."Qty. to Assign" / TotalQtyToAssign * TotalAmtToAssign,
                Currency."Amount Rounding Precision");
            TotalQtyToAssign -= ItemChargeAssgntPurch."Qty. to Assign";
            TotalAmtToAssign -= ItemChargeAssgntPurch."Amount to Assign";
            TotalAppliesToDocLineAmount -= TempItemChargeAssgntPurch."Applies-to Doc. Line Amount";
            ItemChargeAssgntPurch.MODIFY;
          END;
        UNTIL TempItemChargeAssgntPurch.NEXT = 0;
      TempItemChargeAssgntPurch.DELETEALL;
    END;

    LOCAL PROCEDURE AssignByWeight@29(VAR ItemChargeAssgntPurch@1003 : Record 12013594;Currency@1002 : Record 4;TotalQtyToAssign@1001 : Decimal);
    VAR
      TempItemChargeAssgntPurch@1004 : TEMPORARY Record 12013594;
      LineAray@1005 : ARRAY [3] OF Decimal;
      TotalGrossWeight@1006 : Decimal;
      QtyRemainder@1007 : Decimal;
      AmountRemainder@1008 : Decimal;
    BEGIN
      REPEAT
        IF NOT ItemChargeAssgntPurch.PurchLineInvoiced THEN BEGIN
          TempItemChargeAssgntPurch.INIT;
          TempItemChargeAssgntPurch := ItemChargeAssgntPurch;
          TempItemChargeAssgntPurch.INSERT;
          GetItemValues(TempItemChargeAssgntPurch,LineAray);
          TotalGrossWeight := TotalGrossWeight + (LineAray[2] * LineAray[1]);
        END;
      UNTIL ItemChargeAssgntPurch.NEXT = 0;

      IF TempItemChargeAssgntPurch.FINDSET(TRUE) THEN
        REPEAT
          GetItemValues(TempItemChargeAssgntPurch,LineAray);
          IF TotalGrossWeight <> 0 THEN
            TempItemChargeAssgntPurch."Qty. to Assign" :=
              (TotalQtyToAssign * LineAray[2] * LineAray[1]) / TotalGrossWeight + QtyRemainder
          ELSE
            TempItemChargeAssgntPurch."Qty. to Assign" := 0;
          AssignPurchItemCharge(ItemChargeAssgntPurch,TempItemChargeAssgntPurch,Currency,QtyRemainder,AmountRemainder);
        UNTIL TempItemChargeAssgntPurch.NEXT = 0;
      TempItemChargeAssgntPurch.DELETEALL;
    END;

    LOCAL PROCEDURE AssignByVolume@28(VAR ItemChargeAssgntPurch@1003 : Record 12013594;Currency@1002 : Record 4;TotalQtyToAssign@1001 : Decimal);
    VAR
      TempItemChargeAssgntPurch@1004 : TEMPORARY Record 12013594;
      LineAray@1005 : ARRAY [3] OF Decimal;
      TotalUnitVolume@1006 : Decimal;
      QtyRemainder@1007 : Decimal;
      AmountRemainder@1008 : Decimal;
    BEGIN
      REPEAT
        IF NOT ItemChargeAssgntPurch.PurchLineInvoiced THEN BEGIN
          TempItemChargeAssgntPurch.INIT;
          TempItemChargeAssgntPurch := ItemChargeAssgntPurch;
          TempItemChargeAssgntPurch.INSERT;
          GetItemValues(TempItemChargeAssgntPurch,LineAray);
          TotalUnitVolume := TotalUnitVolume + (LineAray[3] * LineAray[1]);
        END;
      UNTIL ItemChargeAssgntPurch.NEXT = 0;

      IF TempItemChargeAssgntPurch.FINDSET(TRUE) THEN
        REPEAT
          GetItemValues(TempItemChargeAssgntPurch,LineAray);
          IF TotalUnitVolume <> 0 THEN
            TempItemChargeAssgntPurch."Qty. to Assign" :=
              (TotalQtyToAssign * LineAray[3] * LineAray[1]) / TotalUnitVolume + QtyRemainder
          ELSE
            TempItemChargeAssgntPurch."Qty. to Assign" := 0;
          AssignPurchItemCharge(ItemChargeAssgntPurch,TempItemChargeAssgntPurch,Currency,QtyRemainder,AmountRemainder);
        UNTIL TempItemChargeAssgntPurch.NEXT = 0;
      TempItemChargeAssgntPurch.DELETEALL;
    END;

    LOCAL PROCEDURE AssignPurchItemCharge@12(VAR ItemChargeAssgntPurch@1000 : Record 12013594;ItemChargeAssgntPurch2@1001 : Record 12013594;Currency@1002 : Record 4;VAR QtyRemainder@1004 : Decimal;VAR AmountRemainder@1003 : Decimal);
    BEGIN
      ItemChargeAssgntPurch.GET(
        ItemChargeAssgntPurch2."Document Type",
        ItemChargeAssgntPurch2."Inbound Document No.",
        ItemChargeAssgntPurch2."Document Line No.",
        ItemChargeAssgntPurch2."Line No.");
      ItemChargeAssgntPurch."Qty. to Assign" := ROUND(ItemChargeAssgntPurch2."Qty. to Assign",0.00001);
      ItemChargeAssgntPurch."Amount to Assign" :=
        ItemChargeAssgntPurch."Qty. to Assign" * ItemChargeAssgntPurch."Unit Cost" + AmountRemainder;
      AmountRemainder := ItemChargeAssgntPurch."Amount to Assign" -
        ROUND(ItemChargeAssgntPurch."Amount to Assign",Currency."Amount Rounding Precision");
      QtyRemainder := ItemChargeAssgntPurch2."Qty. to Assign" - ItemChargeAssgntPurch."Qty. to Assign";
      ItemChargeAssgntPurch."Amount to Assign" :=
        ROUND(ItemChargeAssgntPurch."Amount to Assign",Currency."Amount Rounding Precision");
      ItemChargeAssgntPurch.MODIFY;
    END;

    PROCEDURE GetItemValues@35(TempItemChargeAssgntPurch@1000 : TEMPORARY Record 12013594;VAR DecimalArray@1001 : ARRAY [3] OF Decimal);
    VAR
      PurchLine@1002 : Record 12013588;
      PurchRcptLine@1003 : Record 121;
      ReturnShptLine@1004 : Record 6651;
      TransferRcptLine@1005 : Record 5747;
      SalesShptLine@1006 : Record 111;
      ReturnRcptLine@1007 : Record 6661;
    BEGIN
      CLEAR(DecimalArray);
      WITH TempItemChargeAssgntPurch DO
        CASE "Applies-to Doc. Type" OF
          "Applies-to Doc. Type"::Order,
          "Applies-to Doc. Type"::Invoice,
          "Applies-to Doc. Type"::"Return Order",
          "Applies-to Doc. Type"::"Credit Memo":
            BEGIN
              PurchLine.GET("Inbound Document No.",
                   "Applies-to Doc. Line No.");
              DecimalArray[1] := PurchLine.Quantity;
              DecimalArray[2] := PurchLine."Gross Weight";
              DecimalArray[3] := PurchLine."Unit Volume";
            END;
          "Applies-to Doc. Type"::Receipt:
            BEGIN
              PurchRcptLine.GET("Applies-to Doc. No.","Applies-to Doc. Line No.");
              DecimalArray[1] := PurchRcptLine.Quantity;
              DecimalArray[2] := PurchRcptLine."Gross Weight";
              DecimalArray[3] := PurchRcptLine."Unit Volume";
            END;
          "Applies-to Doc. Type"::"Return Receipt":
            BEGIN
              ReturnRcptLine.GET("Applies-to Doc. No.","Applies-to Doc. Line No.");
              DecimalArray[1] := ReturnRcptLine.Quantity;
              DecimalArray[2] := ReturnRcptLine."Gross Weight";
              DecimalArray[3] := ReturnRcptLine."Unit Volume";
            END;
          "Applies-to Doc. Type"::"Return Shipment":
            BEGIN
              ReturnShptLine.GET("Applies-to Doc. No.","Applies-to Doc. Line No.");
              DecimalArray[1] := ReturnShptLine.Quantity;
              DecimalArray[2] := ReturnShptLine."Gross Weight";
              DecimalArray[3] := ReturnShptLine."Unit Volume";
            END;
          "Applies-to Doc. Type"::"Transfer Receipt":
            BEGIN
              TransferRcptLine.GET("Applies-to Doc. No.","Applies-to Doc. Line No.");
              DecimalArray[1] := TransferRcptLine.Quantity;
              DecimalArray[2] := TransferRcptLine."Gross Weight";
              DecimalArray[3] := TransferRcptLine."Unit Volume";
            END;
          "Applies-to Doc. Type"::"Sales Shipment":
            BEGIN
              SalesShptLine.GET("Applies-to Doc. No.","Applies-to Doc. Line No.");
              DecimalArray[1] := SalesShptLine.Quantity;
              DecimalArray[2] := SalesShptLine."Gross Weight";
              DecimalArray[3] := SalesShptLine."Unit Volume";
            END;
        END;
    END;

    BEGIN
    END.
  }
}

