OBJECT Codeunit 1311 Activities Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            IF IsCueDataStale THEN
              RefreshActivitiesCueData;
          END;

  }
  CODE
  {
    VAR
      DefaultWorkDate@1001 : Date;
      RefreshFrequencyErr@1000 : TextConst 'ENU=Refresh intervals of less than 10 minutes are not supported.;NOR=Oppdateringsintervaller p† mindre enn 10 minutter st›ttes ikke.';

    [External]
    PROCEDURE CalcOverdueSalesInvoiceAmount@11(CalledFromWebService@1002 : Boolean) Amount : Decimal;
    VAR
      DetailedCustLedgEntry@1000 : Record 379;
    BEGIN
      SetFilterForCalcOverdueSalesInvoiceAmount(DetailedCustLedgEntry,CalledFromWebService);
      DetailedCustLedgEntry.CALCSUMS("Amount (LCY)");
      Amount := ABS(DetailedCustLedgEntry."Amount (LCY)");
    END;

    PROCEDURE SetFilterForCalcOverdueSalesInvoiceAmount@2(VAR DetailedCustLedgEntry@1000 : Record 379;CalledFromWebService@1002 : Boolean);
    BEGIN
      DetailedCustLedgEntry.SETRANGE("Initial Document Type",DetailedCustLedgEntry."Initial Document Type"::Invoice);
      IF CalledFromWebService THEN
        DetailedCustLedgEntry.SETFILTER("Initial Entry Due Date",'<%1',TODAY)
      ELSE
        DetailedCustLedgEntry.SETFILTER("Initial Entry Due Date",'<%1',GetDefaultWorkDate);
    END;

    [External]
    PROCEDURE DrillDownCalcOverdueSalesInvoiceAmount@31();
    VAR
      CustLedgerEntry@1000 : Record 21;
    BEGIN
      CustLedgerEntry.SETRANGE("Document Type",CustLedgerEntry."Document Type"::Invoice);
      CustLedgerEntry.SETRANGE(Open,TRUE);
      CustLedgerEntry.SETFILTER("Due Date",'<%1',GetDefaultWorkDate);
      CustLedgerEntry.SETFILTER("Remaining Amt. (LCY)",'<>0');
      CustLedgerEntry.SETCURRENTKEY("Remaining Amt. (LCY)");
      CustLedgerEntry.ASCENDING := FALSE;

      PAGE.RUN(PAGE::"Customer Ledger Entries",CustLedgerEntry);
    END;

    [External]
    PROCEDURE CalcOverduePurchaseInvoiceAmount@8(CalledFromWebService@1002 : Boolean) Amount : Decimal;
    VAR
      DetailedVendorLedgEntry@1000 : Record 380;
    BEGIN
      SetFilterForCalcOverduePurchaseInvoiceAmount(DetailedVendorLedgEntry,CalledFromWebService);
      DetailedVendorLedgEntry.CALCSUMS("Amount (LCY)");
      Amount := ABS(DetailedVendorLedgEntry."Amount (LCY)");
    END;

    PROCEDURE SetFilterForCalcOverduePurchaseInvoiceAmount@12(VAR DetailedVendorLedgEntry@1000 : Record 380;CalledFromWebService@1002 : Boolean);
    BEGIN
      DetailedVendorLedgEntry.SETRANGE("Initial Document Type",DetailedVendorLedgEntry."Initial Document Type"::Invoice);
      IF CalledFromWebService THEN
        DetailedVendorLedgEntry.SETFILTER("Initial Entry Due Date",'<%1',TODAY)
      ELSE
        DetailedVendorLedgEntry.SETFILTER("Initial Entry Due Date",'<%1',GetDefaultWorkDate);
    END;

    [External]
    PROCEDURE DrillDownOverduePurchaseInvoiceAmount@30();
    VAR
      VendorLedgerEntry@1000 : Record 25;
    BEGIN
      VendorLedgerEntry.SETRANGE("Document Type",VendorLedgerEntry."Document Type"::Invoice);
      VendorLedgerEntry.SETFILTER("Due Date",'<%1',WORKDATE);
      VendorLedgerEntry.SETFILTER("Remaining Amt. (LCY)",'<>0');
      VendorLedgerEntry.SETCURRENTKEY("Remaining Amt. (LCY)");
      VendorLedgerEntry.ASCENDING := TRUE;

      PAGE.RUN(PAGE::"Vendor Ledger Entries",VendorLedgerEntry);
    END;

    [External]
    PROCEDURE CalcSalesThisMonthAmount@4(CalledFromWebService@1000 : Boolean) Amount : Decimal;
    VAR
      CustLedgerEntry@1001 : Record 21;
    BEGIN
      SetFilterForCalcSalesThisMonthAmount(CustLedgerEntry,CalledFromWebService);
      CustLedgerEntry.CALCSUMS("Sales (LCY)");
      Amount := CustLedgerEntry."Sales (LCY)";
    END;

    PROCEDURE SetFilterForCalcSalesThisMonthAmount@13(VAR CustLedgerEntry@1001 : Record 21;CalledFromWebService@1000 : Boolean);
    BEGIN
      CustLedgerEntry.SETFILTER("Document Type",'%1|%2',
        CustLedgerEntry."Document Type"::Invoice,CustLedgerEntry."Document Type"::"Credit Memo");
      IF CalledFromWebService THEN
        CustLedgerEntry.SETRANGE("Posting Date",CALCDATE('<-CM>',TODAY),TODAY)
      ELSE
        CustLedgerEntry.SETRANGE("Posting Date",CALCDATE('<-CM>',GetDefaultWorkDate),GetDefaultWorkDate);
    END;

    [External]
    PROCEDURE DrillDownSalesThisMonth@29();
    VAR
      CustLedgerEntry@1000 : Record 21;
    BEGIN
      CustLedgerEntry.SETFILTER("Document Type",'%1|%2',
        CustLedgerEntry."Document Type"::Invoice,CustLedgerEntry."Document Type"::"Credit Memo");
      CustLedgerEntry.SETRANGE("Posting Date",CALCDATE('<-CM>',GetDefaultWorkDate),GetDefaultWorkDate);
      PAGE.RUN(PAGE::"Customer Ledger Entries",CustLedgerEntry);
    END;

    [External]
    PROCEDURE CalcSalesYTD@18() Amount : Decimal;
    VAR
      AccountingPeriod@1002 : Record 50;
      CustLedgEntrySales@1000 : Query 1310 SECURITYFILTERING(Filtered);
    BEGIN
      CustLedgEntrySales.SETRANGE(Posting_Date,AccountingPeriod.GetFiscalYearStartDate(GetDefaultWorkDate),GetDefaultWorkDate);
      CustLedgEntrySales.OPEN;

      IF CustLedgEntrySales.READ THEN
        Amount := CustLedgEntrySales.Sum_Sales_LCY;
    END;

    [External]
    PROCEDURE CalcTop10CustomerSalesYTD@14() Amount : Decimal;
    VAR
      AccountingPeriod@1001 : Record 50;
      Top10CustomerSales@1005 : Query 1311;
    BEGIN
      // Total Sales (LCY) by top 10 list of customers year-to-date.
      Top10CustomerSales.SETRANGE(Posting_Date,AccountingPeriod.GetFiscalYearStartDate(GetDefaultWorkDate),GetDefaultWorkDate);
      Top10CustomerSales.OPEN;

      WHILE Top10CustomerSales.READ DO
        Amount += Top10CustomerSales.Sum_Sales_LCY;
    END;

    [External]
    PROCEDURE CalcTop10CustomerSalesRatioYTD@7() Amount : Decimal;
    VAR
      TotalSales@1000 : Decimal;
    BEGIN
      // Ratio of Sales by top 10 list of customers year-to-date.
      TotalSales := CalcSalesYTD;
      IF TotalSales <> 0 THEN
        Amount := CalcTop10CustomerSalesYTD / TotalSales;
    END;

    [External]
    PROCEDURE CalcAverageCollectionDays@3() AverageDays : Decimal;
    VAR
      CustLedgerEntry@1001 : Record 21;
      SumCollectionDays@1000 : Integer;
      CountInvoices@1003 : Integer;
    BEGIN
      GetPaidSalesInvoices(CustLedgerEntry);
      IF CustLedgerEntry.FINDSET THEN BEGIN
        REPEAT
          SumCollectionDays += (CustLedgerEntry."Closed at Date" - CustLedgerEntry."Posting Date");
          CountInvoices += 1;
        UNTIL CustLedgerEntry.NEXT = 0;

        AverageDays := SumCollectionDays / CountInvoices;
      END
    END;

    LOCAL PROCEDURE GetPaidSalesInvoices@1(VAR CustLedgerEntry@1000 : Record 21);
    BEGIN
      CustLedgerEntry.SETRANGE("Document Type",CustLedgerEntry."Document Type"::Invoice);
      CustLedgerEntry.SETRANGE(Open,FALSE);
      CustLedgerEntry.SETRANGE("Posting Date",CALCDATE('<CM-3M>',GetDefaultWorkDate),GetDefaultWorkDate);
      CustLedgerEntry.SETRANGE("Closed at Date",CALCDATE('<CM-3M>',GetDefaultWorkDate),GetDefaultWorkDate);
    END;

    [External]
    PROCEDURE CalcCashAccountsBalances@5() CashAccountBalance : Decimal;
    VAR
      GLAccount@1000 : Record 15;
    BEGIN
      GLAccount.SETRANGE("Account Category",GLAccount."Account Category"::Assets);
      GLAccount.SETRANGE("Account Type",GLAccount."Account Type"::Posting);
      GLAccount.SETRANGE("Account Subcategory Entry No.",3);
      IF GLAccount.FINDSET THEN BEGIN
        REPEAT
          GLAccount.CALCFIELDS(Balance);
          CashAccountBalance += GLAccount.Balance;
        UNTIL GLAccount.NEXT = 0;
      END;
    END;

    [External]
    PROCEDURE DrillDownCalcCashAccountsBalances@6();
    VAR
      GLAccount@1000 : Record 15;
    BEGIN
      GLAccount.SETRANGE("Account Category",GLAccount."Account Category"::Assets);
      GLAccount.SETRANGE("Account Type",GLAccount."Account Type"::Posting);
      GLAccount.SETRANGE("Account Subcategory Entry No.",3);
      PAGE.RUN(PAGE::"Chart of Accounts",GLAccount);
    END;

    LOCAL PROCEDURE RefreshActivitiesCueData@10();
    VAR
      ActivitiesCue@1000 : Record 1313;
    BEGIN
      ActivitiesCue.LOCKTABLE;

      ActivitiesCue.GET;

      IF NOT IsPassedCueDataStale(ActivitiesCue) THEN
        EXIT;

      ActivitiesCue.SETFILTER("Due Date Filter",'>=%1',GetDefaultWorkDate);
      ActivitiesCue.SETFILTER("Overdue Date Filter",'<%1',GetDefaultWorkDate);
      ActivitiesCue.SETFILTER("Due Next Week Filter",'%1..%2',CALCDATE('<1D>',GetDefaultWorkDate),CALCDATE('<1W>',GetDefaultWorkDate));

      IF ActivitiesCue.FIELDACTIVE("Overdue Sales Invoice Amount") THEN
        ActivitiesCue."Overdue Sales Invoice Amount" := CalcOverdueSalesInvoiceAmount(FALSE);

      IF ActivitiesCue.FIELDACTIVE("Overdue Purch. Invoice Amount") THEN
        ActivitiesCue."Overdue Purch. Invoice Amount" := CalcOverduePurchaseInvoiceAmount(FALSE);

      IF ActivitiesCue.FIELDACTIVE("Sales This Month") THEN
        ActivitiesCue."Sales This Month" := CalcSalesThisMonthAmount(FALSE);

      IF ActivitiesCue.FIELDACTIVE("Average Collection Days") THEN
        ActivitiesCue."Average Collection Days" := CalcAverageCollectionDays;

      ActivitiesCue."Last Date/Time Modified" := CURRENTDATETIME;
      ActivitiesCue.MODIFY;
      COMMIT;
    END;

    PROCEDURE IsCueDataStale@17() : Boolean;
    VAR
      ActivitiesCue@1000 : Record 1313;
    BEGIN
      IF NOT ActivitiesCue.GET THEN
        EXIT(FALSE);

      EXIT(IsPassedCueDataStale(ActivitiesCue));
    END;

    LOCAL PROCEDURE IsPassedCueDataStale@19(ActivitiesCue@1000 : Record 1313) : Boolean;
    BEGIN
      IF ActivitiesCue."Last Date/Time Modified" = 0DT THEN
        EXIT(TRUE);

      EXIT(CURRENTDATETIME - ActivitiesCue."Last Date/Time Modified" >= GetActivitiesCueRefreshInterval)
    END;

    LOCAL PROCEDURE GetDefaultWorkDate@15() : Date;
    VAR
      LogInManagement@1000 : Codeunit 40;
    BEGIN
      IF DefaultWorkDate = 0D THEN
        DefaultWorkDate := LogInManagement.GetDefaultWorkDate;
      EXIT(DefaultWorkDate);
    END;

    LOCAL PROCEDURE GetActivitiesCueRefreshInterval@9() Interval : Duration;
    VAR
      MinInterval@1000 : Duration;
    BEGIN
      MinInterval := 10 * 60 * 1000; // 10 minutes
      Interval := 60 * 60 * 1000; // 1 hr
      OnGetRefreshInterval(Interval);
      IF Interval < MinInterval THEN
        ERROR(RefreshFrequencyErr);
    END;

    [Integration]
    LOCAL PROCEDURE OnGetRefreshInterval@16(VAR Interval@1000 : Duration);
    BEGIN
    END;

    BEGIN
    END.
  }
}

