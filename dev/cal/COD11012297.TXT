OBJECT Codeunit 11012297 Purch. Turnover/Rating Statis.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      GLSetup@1100525037 : Record 98;
      VendRatingType@1100525036 : Record 11012284;
      TmpSelType@1100525038 : TEMPORARY Record 11012285;
      TmpLineCodeBuf@1100525056 : TEMPORARY Record 11012287;
      TmpColCodeBuf@1100525055 : TEMPORARY Record 11012288;
      TmpDataBuf@1100525054 : TEMPORARY Record 11012289;
      TmpTotVendNos@1100525034 : TEMPORARY Record 11012289;
      TmpExcelBuf@1100525067 : TEMPORARY Record 370;
      SelTypeMgt@1100525003 : Codeunit 11012296;
      PeriodFormMgt@1100525035 : Codeunit 359;
      ActiveCompany@1100528800 : Text[30];
      Window@1100525017 : Dialog;
      ShowApprovalLines@1100525006 : Boolean;
      ProcessedShowApprovalLines@1100525015 : Boolean;
      ProcessType@1100525005 : 'Turnover,Rating';
      LineSelType@1100525052 : Option;
      ColumnSelType@1100525051 : Option;
      PeriodType@1100525049 : 'Day,Week,Month,Quarter,Year,Accounting Period';
      RoundingFactor@1100525019 : 'None,1,1000,1000000';
      AmountsBasedOn@1100525016 : 'PurchaseInvoices,PurchaseOrders';
      ProcessedLineSelType@1100525001 : Option;
      ProcessedColumnSelType@1100525000 : Option;
      ProcessedPeriodType@1100525002 : Option;
      ProcessedAmountsBasedOn@1100525020 : Option;
      RatingTypeFilter@1100525044 : Code[250];
      VendorFilter@1100525043 : Code[250];
      VendQualFilter@1100525042 : Code[250];
      GLAccFilter@1100525041 : Code[250];
      GlobalDim1Filter@1100525040 : Code[250];
      GlobalDim2Filter@1100525039 : Code[250];
      HardDPAFilter@1100525004 : Code[250];
      LineSelCode@1100525031 : Code[30];
      ColumnSelCode@1100525030 : Code[30];
      ProcessedRatingTypeFilter@1100525014 : Code[250];
      ProcessedVendorFilter@1100525013 : Code[250];
      ProcessedVendQualFilter@1100525012 : Code[250];
      ProcessedGLAccFilter@1100525011 : Code[250];
      ProcessedGlobalDim1Filter@1100525010 : Code[250];
      ProcessedGlobalDim2Filter@1100525009 : Code[250];
      DateFilter@1100525045 : Text[30];
      ProcessedDateFilter@1100525008 : Text[30];
      Text000@1100525026 : TextConst 'DEU=Leer;ENU=<EMPTY>;NLD=<LEEG>;NOR=<TOM>;SVE=Tom';
      Text001@1100525032 : TextConst 'DEU=nicht spezifiert;ENU=Not Specified;NLD=Niet gespecificeerd;NOR=ikke spesifisert;SVE=inte specificerad';
      Text002@1100525007 : TextConst 'DEU=UNBEKANNT (%1);ENU=UNKNOWN (%1);NLD=ONBEKEND (%1);NOR=UKJENT (%1);SVE=OKŽND (%1)';
      Text003@1100525018 : TextConst 'DEU=Aufbauen;ENU=Build;NLD=Opbouwen;NOR=Bygg';
      Text004@1100525021 : TextConst 'DEU=Keine Daten vorhanden.;ENU=No data present.;NLD=Geen gegevens aanwezig.;NOR=Finner ikke data';
      Text005@1100525022 : TextConst 'DEU=Aufbauen Excel-Puffer..\ \;ENU=Build Excel Buffer..\ \;NLD=Opbouwen Excel buffer..\ \;NOR=Bygg Excel-buffer..\ \;SVE=Bygg Excel-buffert..\ \';
      Text006@1100525023 : TextConst 'DEU=Auswahl;ENU=Selections;NLD=Selecties;NOR=Utvalg;SVE=Val';
      Text007@1100525024 : TextConst 'DEU=Percentage;ENU=Percentage;NLD=Percentage;NOR=Prosent;SVE=Procent';
      Text101@1100525028 : TextConst 'DEU=Zeilenansicht;ENU=Show as Lines;NLD=Als regels weergeven;NOR=Vis som linjer;SVE=Visa som rader';
      Text102@1100525029 : TextConst 'DEU=Spaltenansicht;ENU=Show as Columns;NLD=Als kolommen weergeven;NOR=Vis som kolonner;SVE=Visa som kolumner';
      Text103@1100525033 : TextConst 'DEU=Betr„ge basierend auf;ENU=Amounts based on;NLD=Bedragen gebaseerd op;NOR=Bel›p basert p†;SVE=Belopp baserade p†';
      Text103a@1100525027 : TextConst 'DEU=Einkaufsrechnungen,Bestellungen;ENU=Purchase Invoices,Purchase Orders;NLD=Inkoopfacturen,Inkooporders;NOR=Kj›psfakturaer, kj›psordre;SVE=Ink”psfakturor,Ink”psorder';
      Text104@1100525046 : TextConst 'DEU=Rechnungsfreigabezeilen anzeigen;ENU=Show Invoice Approval lines;NLD=Inkoopfactuur goedkeuringsregels weergeven;NOR=Vis rader for Godkjenn Faktura;SVE=Visa rader f”r fakturagodk„nnande';
      Text105@1100525047 : TextConst 'DEU=Rundungsfaktor Betr„ge;ENU=Rounding Factor Amounts;NLD=Afrondingsfactor bedragen;NOR=Avrunding av faktorbel›p;SVE=Avrundning av faktorbelopp';
      Text105a@1100525025 : TextConst 'DEU=Keine;ENU=None;NLD=Geen;NOR=Ingen;SVE=Ingen';
      Text111@1100525059 : TextConst 'DEU=Datumsfilter;ENU=Date Filter;NLD=Datumfilter;NOR=Datofilter;SVE=Datumfilter';
      Text112@1100525060 : TextConst 'DEU=Kreditorenfilter;ENU=Vendor Filter;NLD=Leveranciersfilter;NOR=Leverand›r filter;SVE=Leverant”rsfilter';
      Text113@1100525061 : TextConst 'DEU=Lief.Qualifikationsfilter;ENU=Vendor Qualification Filter;NLD=Lev.kwalificatiefilter;NOR=Leverand›rs Kompetanse filter;SVE=Leverant”rskompetensfilter';
      Text114@1100525062 : TextConst 'DEU=Sachkontofilter;ENU=G/L Account Filter;NLD=Grootboekrekeningfilter;NOR=Finanskontofilter;SVE=Redov.kontofilter';
      Text115@1100525063 : TextConst 'DEU=Kostenstellenfilter;ENU=Cost Centre Filter;NLD=Kostenplaatsfilter;NOR=Kostsenter, filter;SVE=Kostnadscenter, filter';
      Text116@1100525064 : TextConst 'DEU=Kostentr„gerfilter;ENU=Cost Object Filter;NLD=Kostendragerfilter;NOR=Kostnadsobjekt, filter;SVE=Filter f”r kostnadsb„rare';
      Text117@1100525065 : TextConst 'DEU=Kennzahlartfilter;ENU=Rating Type Filter;NLD=Kengetalsoortfilter;NOR=Graderingstype, filter;SVE=Graderingstypfilter';
      VendorCategoryFilterCodeSystem@1100525057 : Code[250];
      VendorCategoryFilterCode@1100525053 : Code[250];
      ProcesVendCategFiltCodeSystem@1100525050 : Code[250];
      ProcesVendCategFiltCode@1100525048 : Code[250];
      Text118@1100525066 : TextConst 'DEU=Kreditorenkategorie Filtercodesystem;ENU=Vendor Category Filter Coding System;NLD=Leverancierscategoriefilter Coderingssysteem';
      Text119@1100525058 : TextConst 'DEU=Kreditorenkategorie Filtercode;ENU=Vendor Category Filter Code;NLD=Leverancierscategoriefilter Code';
      JobFilter@1100528200 : Code[250];
      ProcessedJobFilter@1100528201 : Code[250];

    PROCEDURE InitStatistic@1100525003(ProcessType2@1100525000 : Option);
    BEGIN
      ProcessType := ProcessType2;
      GLSetup.CHANGECOMPANY(ActiveCompany);
      GLSetup.GET;
      SelTypeMgt.SetCompany(ActiveCompany);
      CASE ProcessType OF
        ProcessType::Turnover:
          SelTypeMgt.FillForPurchTurnoverStatistics(TmpSelType);
        ProcessType::Rating:
          SelTypeMgt.FillForPurchRatingStatistics(TmpSelType);
      END;
    END;

    PROCEDURE LoadSelections@1100525022(LineSelCode2@1100525013 : Code[30];ColumnSelCode2@1100525012 : Code[30];PeriodType2@1100525010 : Option;RoundingFactor2@1100525008 : Option;AmountsBasedOn2@1100525011 : Option;ShowApprovalLines2@1100525009 : Boolean;RatingTypeFilter2@1100525005 : Code[250];DateFilter2@1100525006 : Text[30];VendorFilter2@1100525004 : Code[250];VendQualFilter2@1100525003 : Code[250];GLAccFilter2@1100525002 : Code[250];GlobalDim1Filter2@1100525001 : Code[250];GlobalDim2Filter2@1100525000 : Code[250];HardDPAFilter2@1100525007 : Code[250]);
    BEGIN
      // Only selections/filters that are needed in this CU.
      LineSelCode := LineSelCode2;
      SelTypeMgt.OnValidateSelection(LineSelCode, TmpSelType);
      LineSelType := TmpSelType.Type;
      ColumnSelCode := ColumnSelCode2;
      SelTypeMgt.OnValidateSelection(ColumnSelCode, TmpSelType);
      ColumnSelType := TmpSelType.Type;
      PeriodType := PeriodType2;
      RoundingFactor := RoundingFactor2;
      AmountsBasedOn := AmountsBasedOn2;
      ShowApprovalLines := ShowApprovalLines2;
      RatingTypeFilter := RatingTypeFilter2;
      DateFilter := DateFilter2;
      VendorFilter := VendorFilter2;
      VendQualFilter := VendQualFilter2;
      GLAccFilter := GLAccFilter2;
      GlobalDim1Filter := GlobalDim1Filter2;
      GlobalDim2Filter := GlobalDim2Filter2;
      HardDPAFilter := HardDPAFilter2;
    END;

    PROCEDURE LoadSelectionsForVendCategory@1100529102(VendorCategoryFilterCodeSys2@1100529101 : Code[250];VendorCategoryFilterCode2@1100529100 : Code[250]);
    BEGIN
      // Only selections/filters that are needed in this CU.
      VendorCategoryFilterCodeSystem := VendorCategoryFilterCodeSys2;
      VendorCategoryFilterCode := VendorCategoryFilterCode2;
    END;

    PROCEDURE LoadSelectionsForJob@1100528201(JobFilter2@1100529101 : Code[250]);
    BEGIN
      // Only selections/filters that are needed in this CU.
      JobFilter := JobFilter2;
    END;

    PROCEDURE ProcessStatistic@1210190001(VAR TmpLineCodeBuf2@1100525018 : TEMPORARY Record 11012287;VAR TmpColCodeBuf2@1100525017 : TEMPORARY Record 11012288;VAR TmpDataBuf2@1100525019 : TEMPORARY Record 11012289);
    VAR
      LineBufferIsUpdated@1100525000 : Boolean;
      ColBufferIsUpdated@1100525001 : Boolean;
      DataBufferIsUpdated@1100525002 : Boolean;
    BEGIN
      // The TmpBuf (Line/Column/Data) tables must be Temporary in calling process!
      TmpLineCodeBuf.COPY(TmpLineCodeBuf2, TRUE);
      TmpColCodeBuf.COPY(TmpColCodeBuf2, TRUE);
      TmpDataBuf.COPY(TmpDataBuf2, TRUE);

      Window.OPEN(Text003 + ' #1######################');

      CASE ProcessType OF
        ProcessType::Turnover:
          BEGIN
            LineBufferIsUpdated := TO_BuildLineBuffer();
            ColBufferIsUpdated := TO_BuildColumnBuffer();
            DataBufferIsUpdated := TO_BuildDataBuffer(LineBufferIsUpdated, ColBufferIsUpdated);
          END;
        ProcessType::Rating:
          BEGIN
            LineBufferIsUpdated := RT_BuildLineBuffer();
            ColBufferIsUpdated := RT_BuildColumnBuffer();
            DataBufferIsUpdated := RT_BuildDataBuffer(LineBufferIsUpdated, ColBufferIsUpdated);
          END;
      END;

      IF LineBufferIsUpdated OR ColBufferIsUpdated OR DataBufferIsUpdated THEN BEGIN
        TmpLineCodeBuf.RESET;
        TmpColCodeBuf.RESET;
        TmpDataBuf.RESET;
        SaveProcessedSelections();
      END;

      Window.CLOSE;
    END;

    LOCAL PROCEDURE TO_BuildLineBuffer@1100525017() : Boolean;
    BEGIN
      IF (LineSelType <> ProcessedLineSelType) OR
         ((LineSelType = TmpSelType.Type::Period) AND
           ((DateFilter <> ProcessedDateFilter) OR (PeriodType <> ProcessedPeriodType))) OR
         ((LineSelType = TmpSelType.Type::Vendor) AND
          ((VendorFilter <> ProcessedVendorFilter) OR
           (VendorCategoryFilterCodeSystem <> ProcesVendCategFiltCodeSystem) OR
           (VendorCategoryFilterCode <> ProcesVendCategFiltCode) OR
           (VendQualFilter <> ProcessedVendQualFilter))) OR
         ((LineSelType = TmpSelType.Type::Account) AND (GLAccFilter <> ProcessedGLAccFilter)) OR
         ((LineSelType = TmpSelType.Type::Dim1) AND (GlobalDim1Filter <> ProcessedGlobalDim1Filter)) OR
         ((LineSelType = TmpSelType.Type::Dim2) AND (GlobalDim2Filter <> ProcessedGlobalDim2Filter)) OR
         (JobFilter <> ProcessedJobFilter)
      THEN BEGIN
        TmpLineCodeBuf.RESET;
        TmpLineCodeBuf.DELETEALL;
        CASE LineSelType OF
          TmpSelType.Type::Period:
            ReadPeriods();
          TmpSelType.Type::Vendor:
            ReadVendors();
          TmpSelType.Type::Account:
            ReadAccounts();
          TmpSelType.Type::Dim1:
            ReadDimensions(GLSetup."Global Dimension 1 Code", GlobalDim1Filter, 1);
          TmpSelType.Type::Dim2:
            ReadDimensions(GLSetup."Global Dimension 2 Code", GlobalDim2Filter, 2);
        END;
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE TO_BuildColumnBuffer@1100525019() : Boolean;
    BEGIN
      IF (ColumnSelType <> ProcessedColumnSelType) OR
         ((ColumnSelType = TmpSelType.Type::Period) AND
           ((DateFilter <> ProcessedDateFilter) OR (PeriodType <> ProcessedPeriodType))) OR
         ((ColumnSelType = TmpSelType.Type::Vendor) AND
          ((VendorFilter <> ProcessedVendorFilter) OR
           (VendorCategoryFilterCodeSystem <> ProcesVendCategFiltCodeSystem) OR
           (VendorCategoryFilterCode <> ProcesVendCategFiltCode) OR
           (VendQualFilter <> ProcessedVendQualFilter))) OR
         ((ColumnSelType = TmpSelType.Type::Account) AND (GLAccFilter <> ProcessedGLAccFilter)) OR
         ((ColumnSelType = TmpSelType.Type::Dim1) AND (GlobalDim1Filter <> ProcessedGlobalDim1Filter)) OR
         ((ColumnSelType = TmpSelType.Type::Dim2) AND (GlobalDim2Filter <> ProcessedGlobalDim2Filter)) OR
         (JobFilter <> ProcessedJobFilter)
      THEN BEGIN
        TmpColCodeBuf.RESET;
        TmpColCodeBuf.DELETEALL;
        CASE ColumnSelType OF
          TmpSelType.Type::Period:
            ReadPeriods();
          TmpSelType.Type::Vendor:
            ReadVendors();
          TmpSelType.Type::Account:
            ReadAccounts();
          TmpSelType.Type::Dim1:
            ReadDimensions(GLSetup."Global Dimension 1 Code", GlobalDim1Filter, 1);
          TmpSelType.Type::Dim2:
            ReadDimensions(GLSetup."Global Dimension 2 Code", GlobalDim2Filter, 2);
        END;
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE TO_BuildDataBuffer@1100525027(LineBufferIsUpdated@1100525001 : Boolean;ColBufferIsUpdated@1100525000 : Boolean) : Boolean;
    BEGIN
      IF (LineBufferIsUpdated OR ColBufferIsUpdated) OR
         (LineSelType <> ProcessedLineSelType) OR
         (ColumnSelType <> ProcessedColumnSelType) OR
         (AmountsBasedOn <> ProcessedAmountsBasedOn) OR
         ((AmountsBasedOn = AmountsBasedOn::PurchaseInvoices) AND (ShowApprovalLines <> ProcessedShowApprovalLines)) OR
         ((PeriodType <> ProcessedPeriodType) AND
          ((LineSelType = TmpSelType.Type::Period) OR (ColumnSelType = TmpSelType.Type::Period))) OR
         (DateFilter <> ProcessedDateFilter) OR
         (VendorFilter <> ProcessedVendorFilter) OR
         (VendorCategoryFilterCodeSystem <> ProcesVendCategFiltCodeSystem) OR
         (VendorCategoryFilterCode <> ProcesVendCategFiltCode) OR
         (VendQualFilter <> ProcessedVendQualFilter) OR
         (GLAccFilter <> ProcessedGLAccFilter) OR
         (GlobalDim1Filter <> ProcessedGlobalDim1Filter) OR
         (GlobalDim2Filter <> ProcessedGlobalDim2Filter) OR
         (JobFilter <> ProcessedJobFilter)
      THEN BEGIN
        TmpTotVendNos.RESET;
        TmpTotVendNos.DELETEALL;
        //
        TmpDataBuf.RESET;
        TmpDataBuf.DELETEALL;
        IF NOT LineBufferIsUpdated THEN BEGIN  // If line buffer is update then these records are already deleted
          TmpLineCodeBuf.RESET;
          TmpLineCodeBuf.SETRANGE("Unknown/Empty Code",TRUE); // Used unknown line codes will be added during building data buffer table
          TmpLineCodeBuf.DELETEALL;
          TmpLineCodeBuf.SETRANGE("Unknown/Empty Code"); // Reset filter
        END;
        IF NOT ColBufferIsUpdated THEN BEGIN  // If column buffer is update then these records are already deleted
          TmpColCodeBuf.RESET;
          TmpColCodeBuf.SETRANGE("Unknown/Empty Code",TRUE); //Used unknown column codes will be added during building data buffer table
          TmpColCodeBuf.DELETEALL;
          TmpColCodeBuf.SETRANGE("Unknown/Empty Code");  // Reset filter
        END;
        //
        CASE AmountsBasedOn OF
          AmountsBasedOn::PurchaseOrders:
            TO_ReadPurchaseOrderLines();
          AmountsBasedOn::PurchaseInvoices:
            BEGIN
              TO_ReadPurchaseInvoiceLines();
              TO_ReadPurchaseCrMemoLines();
            END;
        END;
        TO_FinishBuildProcess();
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE RT_BuildLineBuffer@1100525001() : Boolean;
    BEGIN
      IF (LineSelType <> ProcessedLineSelType) OR
         ((LineSelType = TmpSelType.Type::"VR-Type") AND (RatingTypeFilter <> ProcessedRatingTypeFilter)) OR
         ((LineSelType = TmpSelType.Type::Period) AND
           ((DateFilter <> ProcessedDateFilter) OR (PeriodType <> ProcessedPeriodType))) OR
         ((LineSelType = TmpSelType.Type::Vendor) AND
          ((VendorFilter <> ProcessedVendorFilter) OR
           (VendorCategoryFilterCodeSystem <> ProcesVendCategFiltCodeSystem) OR
           (VendorCategoryFilterCode <> ProcesVendCategFiltCode) OR
           (VendQualFilter <> ProcessedVendQualFilter))) OR
         ((LineSelType = TmpSelType.Type::Account) AND (GLAccFilter <> ProcessedGLAccFilter)) OR
         ((LineSelType = TmpSelType.Type::Dim1) AND (GlobalDim1Filter <> ProcessedGlobalDim1Filter)) OR
         ((LineSelType = TmpSelType.Type::Dim2) AND (GlobalDim2Filter <> ProcessedGlobalDim2Filter)) OR
         (JobFilter <> ProcessedJobFilter)
      THEN BEGIN
        TmpLineCodeBuf.RESET;
        TmpLineCodeBuf.DELETEALL;
        CASE LineSelType OF
          TmpSelType.Type::"VR-Type":
            ReadRatingTypes();
          TmpSelType.Type::Period:
            ReadPeriods();
          TmpSelType.Type::Vendor:
            ReadVendors();
          TmpSelType.Type::Account:
            ReadAccounts();
          TmpSelType.Type::Dim1:
            ReadDimensions(GLSetup."Global Dimension 1 Code", GlobalDim1Filter, 1);
          TmpSelType.Type::Dim2:
            ReadDimensions(GLSetup."Global Dimension 2 Code", GlobalDim2Filter, 2);
        END;
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE RT_BuildColumnBuffer@1100525002() : Boolean;
    BEGIN
      IF (ColumnSelType <> ProcessedColumnSelType) OR
         ((ColumnSelType = TmpSelType.Type::"VR-Type") AND (RatingTypeFilter <> ProcessedRatingTypeFilter)) OR
         ((ColumnSelType = TmpSelType.Type::Period) AND
           ((DateFilter <> ProcessedDateFilter) OR (PeriodType <> ProcessedPeriodType))) OR
         ((ColumnSelType = TmpSelType.Type::Vendor) AND
          ((VendorFilter <> ProcessedVendorFilter) OR
           (VendorCategoryFilterCodeSystem <> ProcesVendCategFiltCodeSystem) OR
           (VendorCategoryFilterCode <> ProcesVendCategFiltCode) OR
           (VendQualFilter <> ProcessedVendQualFilter))) OR
         ((ColumnSelType = TmpSelType.Type::Account) AND (GLAccFilter <> ProcessedGLAccFilter)) OR
         ((ColumnSelType = TmpSelType.Type::Dim1) AND (GlobalDim1Filter <> ProcessedGlobalDim1Filter)) OR
         ((ColumnSelType = TmpSelType.Type::Dim2) AND (GlobalDim2Filter <> ProcessedGlobalDim2Filter)) OR
         (JobFilter <> ProcessedJobFilter)
      THEN BEGIN
        TmpColCodeBuf.RESET;
        TmpColCodeBuf.DELETEALL;
        CASE ColumnSelType OF
          TmpSelType.Type::"VR-Type":
            ReadRatingTypes();
          TmpSelType.Type::Period:
            ReadPeriods();
          TmpSelType.Type::Vendor:
            ReadVendors();
          TmpSelType.Type::Account:
            ReadAccounts();
          TmpSelType.Type::Dim1:
            ReadDimensions(GLSetup."Global Dimension 1 Code", GlobalDim1Filter, 1);
          TmpSelType.Type::Dim2:
            ReadDimensions(GLSetup."Global Dimension 2 Code", GlobalDim2Filter, 2);
        END;
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE RT_BuildDataBuffer@1100525000(LineBufferIsUpdated@1100525001 : Boolean;ColBufferIsUpdated@1100525000 : Boolean) : Boolean;
    VAR
      TotOrders@1100525014 : Integer;
      TotOrderLines@1100525013 : Integer;
      TotRetOrdersCV@1100525012 : Integer;
      TotRetOrders@1100525011 : Integer;
      TotInvoices@1100525010 : Integer;
      TotBlockInvs@1100525009 : Integer;
      TotNotMatchInvs@1100525008 : Integer;
      TotCreditMemos@1100525007 : Integer;
      TotBlockCrMemos@1100525006 : Integer;
      TotNotMatchCrMemos@1100525005 : Integer;
      TotOrderAmt@1100525004 : Decimal;
      TotInvoiceAmt@1100525003 : Decimal;
      TotCrMemoAmt@1100525002 : Decimal;
    BEGIN
      IF (LineBufferIsUpdated OR ColBufferIsUpdated) OR
         (LineSelType <> ProcessedLineSelType) OR
         (ColumnSelType <> ProcessedColumnSelType) OR
         (RatingTypeFilter <> ProcessedRatingTypeFilter) OR
         ((PeriodType <> ProcessedPeriodType) AND
          ((LineSelType = TmpSelType.Type::Period) OR (ColumnSelType = TmpSelType.Type::Period))) OR
         (DateFilter <> ProcessedDateFilter) OR
         (VendorFilter <> ProcessedVendorFilter) OR
         (VendorCategoryFilterCodeSystem <> ProcesVendCategFiltCodeSystem) OR
         (VendorCategoryFilterCode <> ProcesVendCategFiltCode) OR
         (VendQualFilter <> ProcessedVendQualFilter) OR
         (GLAccFilter <> ProcessedGLAccFilter) OR
         (GlobalDim1Filter <> ProcessedGlobalDim1Filter) OR
         (GlobalDim2Filter <> ProcessedGlobalDim2Filter) OR
         (JobFilter <> ProcessedJobFilter)
      THEN BEGIN
        TmpTotVendNos.RESET;
        TmpTotVendNos.DELETEALL;
        //
        TmpDataBuf.RESET;
        TmpDataBuf.DELETEALL;
        IF NOT LineBufferIsUpdated THEN BEGIN  // If line buffer is update then these records are already deleted
          TmpLineCodeBuf.RESET;
          TmpLineCodeBuf.SETRANGE("Unknown/Empty Code",TRUE); // Used unknown line codes will be added during building data buffer table
          TmpLineCodeBuf.DELETEALL;
          TmpLineCodeBuf.SETRANGE("Unknown/Empty Code"); // Reset filter
        END;
        IF NOT ColBufferIsUpdated THEN BEGIN  // If column buffer is update then these records are already deleted
          TmpColCodeBuf.RESET;
          TmpColCodeBuf.SETRANGE("Unknown/Empty Code",TRUE); //Used unknown column codes will be added during building data buffer table
          TmpColCodeBuf.DELETEALL;
          TmpColCodeBuf.SETRANGE("Unknown/Empty Code");  // Reset filter
        END;
        //
        RT_ReadPurchaseOrderLines(TotOrders, TotOrderLines, TotRetOrdersCV, TotRetOrders, TotOrderAmt);
        RT_ReadPurchaseReceiptLines();
        RT_ReadPurchaseInvoiceLines(TotInvoices, TotBlockInvs, TotNotMatchInvs, TotInvoiceAmt);
        RT_ReadPurchaseCrMemoLines(TotCreditMemos, TotBlockCrMemos, TotNotMatchCrMemos, TotCrMemoAmt);
        //
        RT_FinishBuildProcess(
          TotOrders, TotOrderLines, TotRetOrdersCV, TotRetOrders, TotInvoices, TotBlockInvs, TotNotMatchInvs,
          TotCreditMemos, TotBlockCrMemos, TotNotMatchCrMemos, TotOrderAmt, TotInvoiceAmt, TotCrMemoAmt);
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE ReadRatingTypes@1100485003();
    BEGIN
      VendRatingType.CHANGECOMPANY(ActiveCompany);
      WITH VendRatingType DO BEGIN
        RESET;
        IF RatingTypeFilter <> '' THEN
          SETFILTER(Code, RatingTypeFilter);
        IF NOT FINDSET THEN
          EXIT;
        REPEAT
          IF (LineSelType = TmpSelType.Type::"VR-Type") THEN
            WriteLineCodeBuffer(Code, Description, 0D, 0D, FALSE, Type);
          IF (ColumnSelType = TmpSelType.Type::"VR-Type") THEN
            WriteColumnCodeBuffer(Code, Description, 0D, 0D, FALSE, Type);
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE ReadPeriods@1210190014();
    VAR
      Period@1210190000 : Record 2000000007;
      StartDate@1210190001 : Date;
      EndDate@1210190002 : Date;
      MinDate@1100525001 : Date;
      MaxDate@1100525000 : Date;
    BEGIN
      WITH Period DO BEGIN
        SETFILTER("Period Start", DateFilter);
        MinDate := GETRANGEMIN("Period Start");
        MaxDate := GETRANGEMAX("Period Start");
        "Period Start" := MinDate;
        //
        IF NOT PeriodFormMgt.FindDate('=<', Period, PeriodType) THEN
          EXIT;
        SETFILTER("Period Start", DateFilter);
        REPEAT
          IF "Period Start" >= MinDate THEN
            StartDate := "Period Start"
          ELSE
            StartDate := MinDate;
          IF "Period End" <= MaxDate THEN
            EndDate := "Period End"
          ELSE
            EndDate := MaxDate;
          IF (LineSelType = TmpSelType.Type::Period) THEN
            WriteLineCodeBuffer(DateToCode("Period Start"), "Period Name", StartDate, EndDate, FALSE, 0);
          IF (ColumnSelType = TmpSelType.Type::Period) THEN
            WriteColumnCodeBuffer(DateToCode("Period Start"), "Period Name", StartDate, EndDate, FALSE, 0);
        UNTIL PeriodFormMgt.NextDate(1, Period, PeriodType) = 0;
      END;
    END;

    LOCAL PROCEDURE ReadVendors@1210190015();
    VAR
      Vend@1210190000 : Record 23;
    BEGIN
      WITH Vend DO BEGIN
        IF VendorFilter <> '' THEN
          SETFILTER("No.", VendorFilter);
        IF VendQualFilter <> '' THEN
          SETFILTER("Vendor Qualification", VendQualFilter);
        IF NOT FINDSET THEN
          EXIT;
        REPEAT
          IF CheckVendorCategoryInFilter("No.") THEN BEGIN
            IF (LineSelType = TmpSelType.Type::Vendor) THEN
              WriteLineCodeBuffer("No.", Name, 0D, 0D, FALSE, 0);
            IF (ColumnSelType = TmpSelType.Type::Vendor) THEN
              WriteColumnCodeBuffer("No.", Name, 0D, 0D, FALSE, 0);
          END;
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE ReadAccounts@1210190016();
    VAR
      GLAcc@1210190000 : Record 15;
    BEGIN
      WITH GLAcc DO BEGIN
        CHANGECOMPANY(ActiveCompany);
        IF GLAccFilter <> '' THEN
          SETFILTER("No.", GLAccFilter);
        SETRANGE("Account Type", "Account Type"::Posting);
        IF NOT FINDSET THEN
          EXIT;
        REPEAT
          IF (LineSelType = TmpSelType.Type::Account) THEN
            WriteLineCodeBuffer("No.", Name, 0D, 0D, FALSE, 0);
          IF (ColumnSelType = TmpSelType.Type::Account) THEN
            WriteColumnCodeBuffer("No.", Name, 0D, 0D, FALSE, 0);
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE ReadDimensions@1210190017(Dim@1210190000 : Code[20];GlobalDimFilter@1210190002 : Code[250];Mode@1210190003 : Integer);
    VAR
      DimVal@1210190001 : Record 349;
    BEGIN
      WITH DimVal DO BEGIN
        CHANGECOMPANY(ActiveCompany);
        SETRANGE("Dimension Code", Dim);
        IF GlobalDimFilter <> '' THEN
          SETFILTER(Code, GlobalDimFilter);
        SETRANGE("Dimension Value Type", "Dimension Value Type"::Standard);
        IF NOT FINDSET THEN
          EXIT;
        REPEAT
          IF ((LineSelType = TmpSelType.Type::Dim1) AND (Mode = 1)) OR
             ((LineSelType = TmpSelType.Type::Dim2) AND (Mode = 2))
          THEN
            WriteLineCodeBuffer(Code, Name, 0D, 0D, FALSE, 0);
          IF ((ColumnSelType = TmpSelType.Type::Dim1) AND (Mode = 1)) OR
             ((ColumnSelType = TmpSelType.Type::Dim2) AND (Mode = 2))
          THEN
            WriteColumnCodeBuffer(Code, Name, 0D, 0D, FALSE, 0);
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE TO_ReadPurchaseOrderLines@1100525029();
    VAR
      PurchOrderLine@1100525000 : Record 39;
      LineCodeNo@1210190010 : Code[20];
      ColCodeNo@1210190004 : Code[20];
      AccountNo@1210190001 : Code[20];
    BEGIN
      WITH PurchOrderLine DO BEGIN
        CHANGECOMPANY(ActiveCompany);
        SetComFiltersOnPurchOrderLine(PurchOrderLine);
        IF NOT FINDSET THEN
          EXIT;

        REPEAT
          IF CheckVendorCategoryInFilter("Buy-from Vendor No.") THEN BEGIN
            IF Type <> Type::"G/L Account" THEN
              AccountNo := ''
            ELSE
              AccountNo := "No.";

            LineCodeNo := DetermineCode(TRUE,
              DeterminePeriodStart("Order Date"), "Buy-from Vendor No.", AccountNo,
              "Shortcut Dimension 1 Code", "Shortcut Dimension 2 Code");
            ColCodeNo := DetermineCode(FALSE,
              DeterminePeriodStart("Order Date"), "Buy-from Vendor No.", AccountNo,
              "Shortcut Dimension 1 Code", "Shortcut Dimension 2 Code");
            TO_WriteDataBuffer(LineCodeNo, ColCodeNo, "Amount (LCY)");
          END;
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE TO_ReadPurchaseInvoiceLines@1100525038();
    VAR
      PurchInvLine@1100525001 : Record 123;
      LineCodeNo@1210190010 : Code[20];
      ColCodeNo@1210190004 : Code[20];
      AccountNo@1210190001 : Code[20];
    BEGIN
      WITH PurchInvLine DO BEGIN
        CHANGECOMPANY(ActiveCompany);
        SetComFiltersOnPurchInvLine(PurchInvLine);
        IF NOT FINDSET THEN
          EXIT;

        REPEAT
          IF CheckVendorCategoryInFilter("Buy-from Vendor No.") THEN BEGIN
            IF Type <> Type::"G/L Account" THEN
              AccountNo := ''
            ELSE
              AccountNo := "No.";

            LineCodeNo := DetermineCode(TRUE,
              DeterminePeriodStart("Posting Date"), "Buy-from Vendor No.", AccountNo,
              "Shortcut Dimension 1 Code", "Shortcut Dimension 2 Code");
            ColCodeNo := DetermineCode(FALSE,
              DeterminePeriodStart("Posting Date"), "Buy-from Vendor No.", AccountNo,
              "Shortcut Dimension 1 Code", "Shortcut Dimension 2 Code");
             TO_WriteDataBuffer(LineCodeNo, ColCodeNo, "Amount (LCY)");
          END;
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE TO_ReadPurchaseCrMemoLines@1100525014();
    VAR
      PurchCrMemoLine@1100525001 : Record 125;
      LineCodeNo@1210190010 : Code[20];
      ColCodeNo@1210190004 : Code[20];
      AccountNo@1210190001 : Code[20];
    BEGIN
      WITH PurchCrMemoLine DO BEGIN
        CHANGECOMPANY(ActiveCompany);
        SetComFiltersOnPurchCrMemoLine(PurchCrMemoLine);
        IF NOT FINDSET THEN
          EXIT;

        REPEAT
          IF CheckVendorCategoryInFilter("Buy-from Vendor No.") THEN BEGIN
            IF Type <> Type::"G/L Account" THEN
              AccountNo := ''
            ELSE
              AccountNo := "No.";

            LineCodeNo := DetermineCode(TRUE,
              DeterminePeriodStart("Posting Date"), "Buy-from Vendor No.", AccountNo,
              "Shortcut Dimension 1 Code", "Shortcut Dimension 2 Code");
            ColCodeNo := DetermineCode(FALSE,
              DeterminePeriodStart("Posting Date"), "Buy-from Vendor No.", AccountNo,
              "Shortcut Dimension 1 Code", "Shortcut Dimension 2 Code");
             TO_WriteDataBuffer(LineCodeNo, ColCodeNo, -"Amount (LCY)");
          END;
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE RT_ReadPurchaseOrderLines@1210190012(VAR TotOrders@1100525006 : Integer;VAR TotOrderLines@1100525005 : Integer;VAR TotRetOrdersCV@1100525004 : Integer;VAR TotRetOrders@1100525003 : Integer;VAR TotOrderAmt@1100525002 : Decimal);
    VAR
      PurchOrderLine@1100525000 : Record 39;
      TmpNosByCol@1210190012 : TEMPORARY Record 11012289;
      TmpRetNosByCol@1100485010 : TEMPORARY Record 11012289;
      TmpRetNosCVByCol@1100409000 : TEMPORARY Record 11012289;
      DoTotAmt@1210190005 : Boolean;
      DoTotNos@1210190009 : Boolean;
      DoTotLns@1210190008 : Boolean;
      DoAvgAmt@1210190007 : Boolean;
      DoAvgLns@1210190006 : Boolean;
      DoRetNosCV@1100485005 : Boolean;
      DoRetLnsCV@1100485006 : Boolean;
      DoRetNos@1210190011 : Boolean;
      DoRetLns@1210190013 : Boolean;
      DoVendNos@1100525001 : Boolean;
      CountTotNos@1100485009 : Boolean;
      CountRetNosCV@1100485011 : Boolean;
      CountRetNos@1210190016 : Boolean;
      TotalAmount@1210190000 : Decimal;
      TotalNo@1210190002 : Decimal;
      NoOfLines@1210190003 : Decimal;
      VRTypeTotAmtCode@1100485000 : Code[20];
      VRTypeTotNosCode@1100485004 : Code[20];
      VRTypeTotLnsCode@1100485003 : Code[20];
      VRTypeAvgAmtCode@1100485002 : Code[20];
      VRTypeAvgLnsCode@1100485001 : Code[20];
      VRTypeRetNosCVCode@1100485008 : Code[20];
      VRTypeRetLnsCVCode@1100485007 : Code[20];
      VRTypeRetNosCode@1210190015 : Code[20];
      VRTypeRetLnsCode@1210190014 : Code[20];
      CodeNo@1210190010 : Code[20];
      DocNo@1210190004 : Code[20];
      AccountNo@1210190001 : Code[20];
    BEGIN
      DoTotAmt := CheckRatingTypeSelected(VendRatingType.Type::OrderAmt);
      DoTotNos := CheckRatingTypeSelected(VendRatingType.Type::Orders);
      DoTotLns := CheckRatingTypeSelected(VendRatingType.Type::OrderLines);
      DoAvgAmt := CheckRatingTypeSelected(VendRatingType.Type::AvgOrderAmt);
      DoAvgLns := CheckRatingTypeSelected(VendRatingType.Type::AvgOrderLineAmt);
      DoRetNosCV := CheckRatingTypeSelected(VendRatingType.Type::ReturnOrdersCausedByVendor);
      DoRetLnsCV := CheckRatingTypeSelected(VendRatingType.Type::ReturnOrderLinesCausedByVendor);
      DoRetNos := CheckRatingTypeSelected(VendRatingType.Type::ReturnOrders);
      DoRetLns := CheckRatingTypeSelected(VendRatingType.Type::ReturnOrderLines);
      IF NOT
        (DoTotAmt OR DoTotNos OR DoTotLns OR DoAvgAmt OR DoAvgLns OR
         DoRetNosCV OR DoRetLnsCV OR DoRetNos OR DoRetLns)
      THEN
        EXIT;

      VRTypeTotAmtCode := RatingTypeToCode(VendRatingType.Type::OrderAmt);
      VRTypeTotNosCode := RatingTypeToCode(VendRatingType.Type::Orders);
      VRTypeTotLnsCode := RatingTypeToCode(VendRatingType.Type::OrderLines);
      VRTypeAvgAmtCode := RatingTypeToCode(VendRatingType.Type::AvgOrderAmt);
      VRTypeAvgLnsCode := RatingTypeToCode(VendRatingType.Type::AvgOrderLineAmt);
      VRTypeRetNosCVCode := RatingTypeToCode(VendRatingType.Type::ReturnOrdersCausedByVendor);
      VRTypeRetLnsCVCode := RatingTypeToCode(VendRatingType.Type::ReturnOrderLinesCausedByVendor);
      VRTypeRetNosCode := RatingTypeToCode(VendRatingType.Type::ReturnOrders);
      VRTypeRetLnsCode := RatingTypeToCode(VendRatingType.Type::ReturnOrderLines);

      WITH PurchOrderLine DO BEGIN
        CHANGECOMPANY(ActiveCompany);
        SetComFiltersOnPurchOrderLine(PurchOrderLine);
        IF NOT FINDSET THEN
          EXIT;

        DoVendNos := CheckRatingTypeSelected(VendRatingType.Type::Vendors);
        REPEAT
          IF CheckVendorCategoryInFilter("Buy-from Vendor No.") THEN BEGIN
            CALCFIELDS("Purchase Order Type");
            IF (DoRetNosCV OR DoRetLnsCV OR DoRetNos OR DoRetLns) AND
               ("Purchase Order Type" = "Purchase Order Type"::"Return Order")
            THEN
              CALCFIELDS("Return Caused by Vendor");
            IF ("Document No." <> DocNo) THEN BEGIN
              DocNo := "Document No.";
              TmpNosByCol.DELETEALL;
              TmpRetNosByCol.DELETEALL;
              TmpRetNosCVByCol.DELETEALL;
              CountTotNos := TRUE;
              CountRetNosCV := TRUE;
              CountRetNos := TRUE;
            END;
            IF Type <> Type::"G/L Account" THEN
              AccountNo := ''
            ELSE
              AccountNo := "No.";

            CodeNo := DetermineCode((LineSelType <> TmpSelType.Type::"VR-Type"),
              DeterminePeriodStart("Order Date"), "Buy-from Vendor No.", AccountNo,
              "Shortcut Dimension 1 Code", "Shortcut Dimension 2 Code");

            IF DoVendNos THEN
              RT_CountVendors("Buy-from Vendor No.", CodeNo);
            IF ("Purchase Order Type" <> "Purchase Order Type"::"Return Order") THEN BEGIN
              IF (DoTotAmt OR DoAvgAmt OR DoAvgLns) THEN BEGIN
                TotalAmount := RT_WriteDataBuffer(VRTypeTotAmtCode, CodeNo, "Amount (LCY)", FALSE);
                TotOrderAmt := TotOrderAmt + "Amount (LCY)";
              END;

              IF (DoTotNos OR DoAvgAmt) THEN BEGIN
                IF NOT TmpNosByCol.GET("Document No.", CodeNo) THEN BEGIN
                  TmpNosByCol."Line Code" := "Document No.";
                  TmpNosByCol."Column Code" := CodeNo;
                  TmpNosByCol.INSERT;
                  TotalNo := RT_WriteDataBuffer(VRTypeTotNosCode, CodeNo, 1, FALSE);
                  IF CountTotNos THEN BEGIN
                    CountTotNos := FALSE;
                    TotOrders := TotOrders + 1;
                  END;
                END;
              END;

              IF (DoTotLns OR DoAvgLns) THEN BEGIN
                NoOfLines := RT_WriteDataBuffer(VRTypeTotLnsCode, CodeNo, 1, FALSE);
                TotOrderLines := TotOrderLines + 1;
              END;

              IF DoAvgAmt THEN
                RT_WriteDataBuffer(VRTypeAvgAmtCode, CodeNo, (TotalAmount / TotalNo), TRUE);

              IF DoAvgLns THEN
                RT_WriteDataBuffer(VRTypeAvgLnsCode, CodeNo, (TotalAmount / NoOfLines), TRUE);

            END ELSE BEGIN
              IF "Return Caused by Vendor" THEN BEGIN
                IF (DoRetNosCV) THEN BEGIN
                  IF NOT TmpRetNosCVByCol.GET("Document No.", CodeNo) THEN BEGIN
                    TmpRetNosCVByCol."Line Code" := "Document No.";
                    TmpRetNosCVByCol."Column Code" := CodeNo;
                    TmpRetNosCVByCol.INSERT;
                    RT_WriteDataBuffer(VRTypeRetNosCVCode, CodeNo, 1, FALSE);
                    IF CountRetNosCV THEN BEGIN
                      CountRetNosCV := FALSE;
                      TotRetOrdersCV := TotRetOrdersCV + 1;
                    END;
                  END;
                END;

                IF (DoRetLnsCV) THEN
                  RT_WriteDataBuffer(VRTypeRetLnsCVCode, CodeNo, 1, FALSE);
              END;

              IF DoRetNos THEN BEGIN
                IF NOT TmpRetNosByCol.GET("Document No.", CodeNo) THEN BEGIN
                  TmpRetNosByCol."Line Code" := "Document No.";
                  TmpRetNosByCol."Column Code" := CodeNo;
                  TmpRetNosByCol.INSERT;
                  RT_WriteDataBuffer(VRTypeRetNosCode, CodeNo, 1, FALSE);
                  IF CountRetNos THEN BEGIN
                    CountRetNos := FALSE;
                    TotRetOrders := TotRetOrders + 1;
                  END;
                END;
              END;

              IF DoRetLns THEN
                RT_WriteDataBuffer(VRTypeRetLnsCode, CodeNo, 1, FALSE);
            END;
          END;
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE RT_ReadPurchaseReceiptLines@1100485004();
    VAR
      PurchRcptLine@1100525029 : Record 121;
      DoTotLns@1100525025 : Boolean;
      DoRcptLReqTE@1100525000 : Boolean;
      DoRcptLReqIT@1100525001 : Boolean;
      DoRcptLReqEM@1100525020 : Boolean;
      DoRcptLReqTL@1100525002 : Boolean;
      DoRcptLReqAvg@1100525003 : Boolean;
      DoRcptLPrmTE@1100525004 : Boolean;
      DoRcptLPrmIT@1100525005 : Boolean;
      DoRcptLPrmEM@1100525021 : Boolean;
      DoRcptLPrmTL@1100525006 : Boolean;
      DoRcptLPrmAvg@1100525007 : Boolean;
      DoVendNos@1100525030 : Boolean;
      RcptLReqCum@1100525019 : Integer;
      RcptLReqCnt@1100525018 : Integer;
      RcptLPrmCum@1100525017 : Integer;
      RcptLPrmCnt@1100525016 : Integer;
      VRTypeTotReqTE@1100525015 : Code[20];
      VRTypeTotReqIT@1100525014 : Code[20];
      VRTypeTotReqEM@1100525022 : Code[20];
      VRTypeTotReqTL@1100525013 : Code[20];
      VRTypeTotReqAvg@1100525012 : Code[20];
      VRTypeTotPrmTE@1100525011 : Code[20];
      VRTypeTotPrmIT@1100525010 : Code[20];
      VRTypeTotPrmEM@1100525023 : Code[20];
      VRTypeTotPrmTL@1100525009 : Code[20];
      VRTypeTotPrmAvg@1100525008 : Code[20];
      VRTypeTotLnsCode@1100525028 : Code[20];
      CodeNo@1100525027 : Code[20];
      CurrCodeNo@1100525024 : Code[20];
      AccountNo@1100525026 : Code[20];
    BEGIN
      DoTotLns := CheckRatingTypeSelected(VendRatingType.Type::ReceiptLines);
      DoRcptLReqTE := CheckRatingTypeSelected(VendRatingType.Type::"Receipt Lines (requested) too early");
      DoRcptLReqIT := CheckRatingTypeSelected(VendRatingType.Type::"Receipt Lines (requested) in time");
      DoRcptLReqEM := CheckRatingTypeSelected(VendRatingType.Type::"Receipt Lines (requested) empty");
      DoRcptLReqTL := CheckRatingTypeSelected(VendRatingType.Type::"Receipt Lines (requested) too late");
      DoRcptLReqAvg := CheckRatingTypeSelected(VendRatingType.Type::"Average deviation (requested) in days");
      DoRcptLPrmTE := CheckRatingTypeSelected(VendRatingType.Type::"Receipt Lines (promised) too early");
      DoRcptLPrmIT := CheckRatingTypeSelected(VendRatingType.Type::"Receipt Lines (promised) in time");
      DoRcptLPrmEM := CheckRatingTypeSelected(VendRatingType.Type::"Receipt Lines (promised) empty");
      DoRcptLPrmTL := CheckRatingTypeSelected(VendRatingType.Type::"Receipt Lines (promised) too late");
      DoRcptLPrmAvg := CheckRatingTypeSelected(VendRatingType.Type::"Average deviation (promised) in days");

      IF NOT
        (DoTotLns OR DoRcptLReqTE OR DoRcptLReqIT OR DoRcptLReqEM OR DoRcptLReqTL OR DoRcptLReqAvg OR
         DoRcptLPrmTE OR DoRcptLPrmIT OR DoRcptLPrmEM OR DoRcptLPrmTL OR DoRcptLPrmAvg)
      THEN
        EXIT;

      VRTypeTotLnsCode := RatingTypeToCode(VendRatingType.Type::ReceiptLines);
      VRTypeTotReqTE := RatingTypeToCode(VendRatingType.Type::"Receipt Lines (requested) too early");
      VRTypeTotReqIT := RatingTypeToCode(VendRatingType.Type::"Receipt Lines (requested) in time");
      VRTypeTotReqEM := RatingTypeToCode(VendRatingType.Type::"Receipt Lines (requested) empty");
      VRTypeTotReqTL := RatingTypeToCode(VendRatingType.Type::"Receipt Lines (requested) too late");
      VRTypeTotReqAvg := RatingTypeToCode(VendRatingType.Type::"Average deviation (requested) in days");
      VRTypeTotPrmTE := RatingTypeToCode(VendRatingType.Type::"Receipt Lines (promised) too early");
      VRTypeTotPrmIT := RatingTypeToCode(VendRatingType.Type::"Receipt Lines (promised) in time");
      VRTypeTotPrmEM := RatingTypeToCode(VendRatingType.Type::"Receipt Lines (promised) empty");
      VRTypeTotPrmTL := RatingTypeToCode(VendRatingType.Type::"Receipt Lines (promised) too late");
      VRTypeTotPrmAvg := RatingTypeToCode(VendRatingType.Type::"Average deviation (promised) in days");

      WITH PurchRcptLine DO BEGIN
        CHANGECOMPANY(ActiveCompany);
        SetComFiltersOnPurchRcptLine(PurchRcptLine);
        SETCURRENTKEY("Buy-from Vendor No.","Document No.");
        IF NOT FINDSET THEN
          EXIT;

        DoVendNos := CheckRatingTypeSelected(VendRatingType.Type::Vendors);
        REPEAT
          IF CheckVendorCategoryInFilter("Buy-from Vendor No.") THEN BEGIN
            IF Type <> Type::"G/L Account" THEN
              AccountNo := ''
            ELSE
              AccountNo := "No.";

            CodeNo := DetermineCode((LineSelType <> TmpSelType.Type::"VR-Type"),
              DeterminePeriodStart("Posting Date"), "Buy-from Vendor No.", AccountNo,
              "Shortcut Dimension 1 Code", "Shortcut Dimension 2 Code");

            IF DoVendNos THEN
              RT_CountVendors("Buy-from Vendor No.", CodeNo);

            IF (NOT Correction) THEN BEGIN
              IF (CodeNo <> CurrCodeNo) THEN BEGIN
                RcptLReqCum := 0;
                RcptLReqCnt := 0;
                RcptLPrmCum := 0;
                RcptLPrmCnt := 0;
                CurrCodeNo := CodeNo;
              END;
              IF DoTotLns THEN
                RT_WriteDataBuffer(VRTypeTotLnsCode, CodeNo, 1, FALSE);
              IF DoRcptLReqTE AND ("Requested Receipt Date differs" < 0) THEN
                RT_WriteDataBuffer(VRTypeTotReqTE, CodeNo, 1, FALSE);
              IF (DoRcptLReqIT) AND ("Requested Receipt Date differs" = 0) AND ("Requested Receipt Date" <> 0D) THEN
                RT_WriteDataBuffer(VRTypeTotReqIT, CodeNo, 1, FALSE);
              IF DoRcptLReqEM AND ("Requested Receipt Date differs" = 0) AND ("Requested Receipt Date" = 0D) THEN
                RT_WriteDataBuffer(VRTypeTotReqEM, CodeNo, 1, FALSE);
              IF DoRcptLReqTL AND ("Requested Receipt Date differs" > 0) THEN
                RT_WriteDataBuffer(VRTypeTotReqTL, CodeNo, 1, FALSE);
              IF DoRcptLPrmTE AND ("Promised Receipt Date differs" < 0) THEN
                RT_WriteDataBuffer(VRTypeTotPrmTE, CodeNo, 1, FALSE);
              IF DoRcptLPrmIT AND ("Promised Receipt Date differs" = 0) AND ("Promised Receipt Date" <> 0D) THEN
                RT_WriteDataBuffer(VRTypeTotPrmIT, CodeNo, 1, FALSE);
              IF DoRcptLPrmEM AND ("Promised Receipt Date differs" = 0) AND ("Promised Receipt Date" = 0D) THEN
                RT_WriteDataBuffer(VRTypeTotPrmEM, CodeNo, 1, FALSE);
              IF DoRcptLPrmTL AND ("Promised Receipt Date differs" > 0) THEN
                RT_WriteDataBuffer(VRTypeTotPrmTL, CodeNo, 1, FALSE);
              IF DoRcptLReqAvg AND ("Requested Receipt Date" <> 0D) THEN BEGIN
                RcptLReqCum += "Requested Receipt Date differs";
                RcptLReqCnt += 1;
                RT_WriteDataBuffer(VRTypeTotReqAvg, CodeNo, (RcptLReqCum / RcptLReqCnt), TRUE);
              END;
              IF DoRcptLPrmAvg AND ("Promised Receipt Date" <> 0D) THEN BEGIN
                RcptLPrmCum += "Promised Receipt Date differs";
                RcptLPrmCnt += 1;
                RT_WriteDataBuffer(VRTypeTotPrmAvg, CodeNo, (RcptLPrmCum / RcptLPrmCnt), TRUE);
              END;
            END;
          END;
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE RT_ReadPurchaseInvoiceLines@1210190003(VAR TotInvoices@1100525005 : Integer;VAR TotBlockInvs@1100525004 : Integer;VAR TotNotMatchInvs@1100525003 : Integer;VAR TotInvoiceAmt@1100525002 : Decimal);
    VAR
      PurchInvLine@1100525000 : Record 123;
      TmpNosByCol@1210190011 : TEMPORARY Record 11012289;
      TmpBlcByCol@1210190014 : TEMPORARY Record 11012289;
      TmpNmtByCol@1210190013 : TEMPORARY Record 11012289;
      DoTotAmt@1210190010 : Boolean;
      DoTotNos@1210190009 : Boolean;
      DoBlcNos@1210190008 : Boolean;
      DoNmtNos@1210190007 : Boolean;
      DoAvgAmt@1210190006 : Boolean;
      DoVendNos@1100525001 : Boolean;
      CountTotNos@1100485006 : Boolean;
      CountBlcNos@1100485005 : Boolean;
      CountNmtNos@1100485007 : Boolean;
      TotalAmount@1210190005 : Decimal;
      TotalNo@1210190004 : Decimal;
      VRTypeTotAmtCode@1100485004 : Code[20];
      VRTypeTotNosCode@1100485003 : Code[20];
      VRTypeBlcNosCode@1100485002 : Code[20];
      VRTypeNmtNosCode@1100485001 : Code[20];
      VRTypeAvgAmtCode@1100485000 : Code[20];
      CodeNo@1210190001 : Code[20];
      DocNo@1210190012 : Code[20];
      AccountNo@1210190000 : Code[20];
    BEGIN
      DoTotAmt := CheckRatingTypeSelected(VendRatingType.Type::InvoiceAmt);
      DoTotNos := CheckRatingTypeSelected(VendRatingType.Type::Invoices);
      DoBlcNos := CheckRatingTypeSelected(VendRatingType.Type::BlockedInvoices);
      DoNmtNos := CheckRatingTypeSelected(VendRatingType.Type::NotMatchInvoices);
      DoAvgAmt := CheckRatingTypeSelected(VendRatingType.Type::AvgInvoiceAmt);
      IF NOT (DoTotAmt OR DoTotNos OR DoBlcNos OR DoNmtNos OR DoAvgAmt) THEN
        EXIT;

      VRTypeTotAmtCode := RatingTypeToCode(VendRatingType.Type::InvoiceAmt);
      VRTypeTotNosCode := RatingTypeToCode(VendRatingType.Type::Invoices);
      VRTypeBlcNosCode := RatingTypeToCode(VendRatingType.Type::BlockedInvoices);
      VRTypeNmtNosCode := RatingTypeToCode(VendRatingType.Type::NotMatchInvoices);
      VRTypeAvgAmtCode := RatingTypeToCode(VendRatingType.Type::AvgInvoiceAmt);

      WITH PurchInvLine DO BEGIN
        CHANGECOMPANY(ActiveCompany);
        SetComFiltersOnPurchInvLine(PurchInvLine);
        IF NOT FINDSET THEN
          EXIT;

        DoVendNos := CheckRatingTypeSelected(VendRatingType.Type::Vendors);
        REPEAT
          IF CheckVendorCategoryInFilter("Buy-from Vendor No.") THEN BEGIN
            IF ("Document No." <> DocNo) THEN BEGIN
              DocNo := "Document No.";
              TmpNosByCol.DELETEALL;
              TmpBlcByCol.DELETEALL;
              TmpNmtByCol.DELETEALL;
              CountTotNos := TRUE;
              CountBlcNos := TRUE;
              CountNmtNos := TRUE;
            END;
            IF Type <> Type::"G/L Account" THEN
              AccountNo := ''
            ELSE
              AccountNo := "No.";

            CodeNo := DetermineCode((LineSelType <> TmpSelType.Type::"VR-Type"),
              DeterminePeriodStart("Posting Date"), "Buy-from Vendor No.", AccountNo,
              "Shortcut Dimension 1 Code", "Shortcut Dimension 2 Code");

            IF DoVendNos THEN
              RT_CountVendors("Buy-from Vendor No.", CodeNo);

            IF (DoTotAmt OR DoAvgAmt) THEN BEGIN
              TotalAmount := RT_WriteDataBuffer(VRTypeTotAmtCode, CodeNo, "Amount (LCY)", FALSE);
              TotInvoiceAmt := TotInvoiceAmt + "Amount (LCY)";
            END;

            IF (DoTotNos OR DoAvgAmt) THEN BEGIN
              IF NOT TmpNosByCol.GET("Document No.", CodeNo) THEN BEGIN
                TmpNosByCol."Line Code" := "Document No.";
                TmpNosByCol."Column Code" := CodeNo;
                TmpNosByCol.INSERT;
                TotalNo := RT_WriteDataBuffer(VRTypeTotNosCode, CodeNo, 1, FALSE);
                IF CountTotNos THEN BEGIN
                  CountTotNos := FALSE;
                  TotInvoices := TotInvoices + 1;
                END;
              END;
            END;

            IF DoBlcNos THEN BEGIN
              CALCFIELDS("On Hold", "Cause by Vendor");
              IF ("Cause by Vendor") THEN BEGIN
                IF NOT TmpBlcByCol.GET("Document No.", CodeNo) THEN BEGIN
                  TmpBlcByCol."Line Code" := "Document No.";
                  TmpBlcByCol."Column Code" := CodeNo;
                  TmpBlcByCol.INSERT;
                  RT_WriteDataBuffer(VRTypeBlcNosCode, CodeNo, 1, FALSE);
                  IF CountBlcNos THEN BEGIN
                    CountBlcNos := FALSE;
                    TotBlockInvs := TotBlockInvs + 1;
                  END;
                END;
              END;
            END;

            IF DoNmtNos AND ("Receipt No." = '') THEN BEGIN
              IF NOT TmpNmtByCol.GET("Document No.", CodeNo) THEN BEGIN
                TmpNmtByCol."Line Code" := "Document No.";
                TmpNmtByCol."Column Code" := CodeNo;
                TmpNmtByCol.INSERT;
                RT_WriteDataBuffer(VRTypeNmtNosCode, CodeNo, 1, FALSE);
                IF CountNmtNos THEN BEGIN
                  CountNmtNos := FALSE;
                  TotNotMatchInvs := TotNotMatchInvs + 1;
                END;
              END;
            END;

            IF DoAvgAmt THEN
              RT_WriteDataBuffer(VRTypeAvgAmtCode, CodeNo, (TotalAmount / TotalNo), TRUE);
          END;
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE RT_ReadPurchaseCrMemoLines@1210190024(VAR TotCreditMemos@1100525005 : Integer;VAR TotBlockCrMemos@1100525004 : Integer;VAR TotNotMatchCrMemos@1100525003 : Integer;VAR TotCrMemoAmt@1100525002 : Decimal);
    VAR
      PurchCrMemoLine@1100525000 : Record 125;
      TmpNosByCol@1210190014 : TEMPORARY Record 11012289;
      TmpBlcByCol@1210190013 : TEMPORARY Record 11012289;
      TmpNmtByCol@1210190012 : TEMPORARY Record 11012289;
      DoTotAmt@1210190011 : Boolean;
      DoTotNos@1210190010 : Boolean;
      DoBlcNos@1210190009 : Boolean;
      DoNmtNos@1210190008 : Boolean;
      DoAvgAmt@1210190007 : Boolean;
      DoVendNos@1100525001 : Boolean;
      CountTotNos@1100485007 : Boolean;
      CountBlcNos@1100485006 : Boolean;
      CountNmtNos@1100485005 : Boolean;
      TotalAmount@1210190006 : Decimal;
      TotalNo@1210190005 : Decimal;
      VRTypeTotAmtCode@1100485004 : Code[20];
      VRTypeTotNosCode@1100485003 : Code[20];
      VRTypeBlcNosCode@1100485002 : Code[20];
      VRTypeNmtNosCode@1100485001 : Code[20];
      VRTypeAvgAmtCode@1100485000 : Code[20];
      CodeNo@1210190002 : Code[20];
      DocNo@1210190001 : Code[20];
      AccountNo@1210190000 : Code[20];
    BEGIN
      DoTotAmt := CheckRatingTypeSelected(VendRatingType.Type::CrMemoAmt);
      DoTotNos := CheckRatingTypeSelected(VendRatingType.Type::CrMemos);
      DoBlcNos := CheckRatingTypeSelected(VendRatingType.Type::BlockedCrMemos);
      DoNmtNos := CheckRatingTypeSelected(VendRatingType.Type::NotMatchCrMemos);
      DoAvgAmt := CheckRatingTypeSelected(VendRatingType.Type::AvgCrMemoAmt);
      IF NOT (DoTotAmt OR DoTotNos OR DoBlcNos OR DoNmtNos OR DoAvgAmt) THEN
        EXIT;

      VRTypeTotAmtCode := RatingTypeToCode(VendRatingType.Type::CrMemoAmt);
      VRTypeTotNosCode := RatingTypeToCode(VendRatingType.Type::CrMemos);
      VRTypeBlcNosCode := RatingTypeToCode(VendRatingType.Type::BlockedCrMemos);
      VRTypeNmtNosCode := RatingTypeToCode(VendRatingType.Type::NotMatchCrMemos);
      VRTypeAvgAmtCode := RatingTypeToCode(VendRatingType.Type::AvgCrMemoAmt);

      WITH PurchCrMemoLine DO BEGIN
        CHANGECOMPANY(ActiveCompany);
        SetComFiltersOnPurchCrMemoLine(PurchCrMemoLine);
        IF NOT FINDSET THEN
          EXIT;

        DoVendNos := CheckRatingTypeSelected(VendRatingType.Type::Vendors);
        REPEAT
          IF CheckVendorCategoryInFilter("Buy-from Vendor No.") THEN BEGIN
            IF ("Document No." <> DocNo) THEN BEGIN
              DocNo := "Document No.";
              TmpNosByCol.DELETEALL;
              TmpBlcByCol.DELETEALL;
              TmpNmtByCol.DELETEALL;
              CountTotNos := TRUE;
              CountBlcNos := TRUE;
              CountNmtNos := TRUE;
            END;
            IF Type <> Type::"G/L Account" THEN
              AccountNo := ''
            ELSE
              AccountNo := "No.";

            CodeNo := DetermineCode((LineSelType <> TmpSelType.Type::"VR-Type"),
              DeterminePeriodStart("Posting Date"), "Buy-from Vendor No.", AccountNo,
              "Shortcut Dimension 1 Code", "Shortcut Dimension 2 Code");

            IF DoVendNos THEN
              RT_CountVendors("Buy-from Vendor No.", CodeNo);

            IF (DoTotAmt OR DoAvgAmt) THEN BEGIN
              TotalAmount := RT_WriteDataBuffer(VRTypeTotAmtCode, CodeNo, "Amount (LCY)", FALSE);
              TotCrMemoAmt := TotCrMemoAmt + "Amount (LCY)";
            END;

            IF (DoTotNos OR DoAvgAmt) THEN BEGIN
              IF NOT TmpNosByCol.GET("Document No.", CodeNo) THEN BEGIN
                TmpNosByCol."Line Code" := "Document No.";
                TmpNosByCol."Column Code" := CodeNo;
                TmpNosByCol.INSERT;
                TotalNo := RT_WriteDataBuffer(VRTypeTotNosCode, CodeNo, 1, FALSE);
                IF CountTotNos THEN BEGIN
                  CountTotNos := FALSE;
                  TotCreditMemos := TotCreditMemos + 1;
                END;
              END;
            END;

            IF DoBlcNos THEN BEGIN
              CALCFIELDS("On Hold", "Cause by Vendor");
              IF ("Cause by Vendor") THEN BEGIN
                IF NOT TmpBlcByCol.GET("Document No.", CodeNo) THEN BEGIN
                  TmpBlcByCol."Line Code" := "Document No.";
                  TmpBlcByCol."Column Code" := CodeNo;
                  TmpBlcByCol.INSERT;
                  RT_WriteDataBuffer(VRTypeBlcNosCode, CodeNo, 1, FALSE);
                  IF CountBlcNos THEN BEGIN
                    CountBlcNos := FALSE;
                    TotBlockCrMemos := TotBlockCrMemos + 1;
                  END;
                END;
              END;
            END;

            IF DoNmtNos AND ("Receipt No." = '') THEN BEGIN
              IF NOT TmpNmtByCol.GET("Document No.", CodeNo) THEN BEGIN
                TmpNmtByCol."Line Code" := "Document No.";
                TmpNmtByCol."Column Code" := CodeNo;
                TmpNmtByCol.INSERT;
                RT_WriteDataBuffer(VRTypeNmtNosCode, CodeNo, 1, FALSE);
                IF CountNmtNos THEN BEGIN
                  CountNmtNos := FALSE;
                  TotNotMatchCrMemos := TotNotMatchCrMemos + 1;
                END;
              END;
            END;

            IF DoAvgAmt THEN
              RT_WriteDataBuffer(VRTypeAvgAmtCode, CodeNo, (TotalAmount / TotalNo), TRUE);
          END;
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE RT_CountVendors@1100485006(VendNo@1100485000 : Code[20];CodeNo@1100485001 : Code[20]);
    BEGIN
      IF VendNo = '' THEN
        EXIT;  // Do not count empty as a vendor
      IF NOT TmpTotVendNos.GET(VendNo, CodeNo) THEN BEGIN
        TmpTotVendNos."Line Code" := VendNo;
        TmpTotVendNos."Column Code" := CodeNo;
        TmpTotVendNos.INSERT;
        RT_WriteDataBuffer(RatingTypeToCode(VendRatingType.Type::Vendors), CodeNo, 1, FALSE);
      END;
    END;

    LOCAL PROCEDURE WriteLineCodeBuffer@1210190019(CodeNo@1210190000 : Code[20];Name2@1210190001 : Text[100];StartDate@1210190005 : Date;EndDate@1210190006 : Date;UnknownCode@1100525000 : Boolean;RatingTypeOptionNo@1100525001 : Integer);
    BEGIN
      WITH TmpLineCodeBuf DO BEGIN
        Window.UPDATE(1, CodeNo);
        INIT;
        "Line Type" := "Line Type"::Line;
        Code := CodeNo;
        Name := Name2;
        "Period Start" := StartDate;
        "Period End" := EndDate;
        TmpColCodeBuf."Unknown/Empty Code" := UnknownCode;
        "Rating Type Option No." := RatingTypeOptionNo;
        "Selection Type Option No." := LineSelType;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE WriteColumnCodeBuffer@1210190020(CodeNo@1210190004 : Code[20];Name2@1210190003 : Text[100];StartDate@1210190005 : Date;EndDate@1210190001 : Date;UnknownCode@1100525000 : Boolean;RatingTypeOptionNo@1100525001 : Integer);
    BEGIN
      WITH TmpColCodeBuf DO BEGIN
        Window.UPDATE(1, CodeNo);
        INIT;
        Code := CodeNo;
        "Column Type" := TmpColCodeBuf."Column Type"::General;
        Name := Name2;
        "Period Start" := StartDate;
        "Period End" := EndDate;
        TmpColCodeBuf."Unknown/Empty Code" := UnknownCode;
        "Rating Type Option No." := RatingTypeOptionNo;
        "Selection Type Option No." := ColumnSelType;
        IF ProcessType <> ProcessType::Turnover THEN
          INSERT
        ELSE BEGIN
          "Column Type" := TmpColCodeBuf."Column Type"::Amount;
          INSERT;
          "Column Type" := TmpColCodeBuf."Column Type"::Percentage;
          INSERT;
        END;
      END;
    END;

    LOCAL PROCEDURE TO_WriteDataBuffer@1100525030(LineCode@1210190008 : Code[20];ColumnCode@1210190000 : Code[20];Amt@1210190005 : Decimal);
    BEGIN
      WITH TmpDataBuf DO BEGIN
        Window.UPDATE(1, LineCode + ' - ' + ColumnCode);

        IF GET(LineCode, ColumnCode) THEN BEGIN
          Amount := Amount + Amt;
          MODIFY;
        END ELSE BEGIN
          INIT;
          "Line Code" := LineCode;
          "Column Code" := ColumnCode;
          Amount := Amt;
          INSERT;
          WriteUnknownLineColCodes(LineCode, ColumnCode);
        END;
      END;
    END;

    LOCAL PROCEDURE RT_WriteDataBuffer@1210190004(TypeCode@1210190008 : Code[20];CodeNo@1210190000 : Code[20];Amt@1210190005 : Decimal;ModeReplace@1210190009 : Boolean) : Decimal;
    VAR
      LineCode@1100485001 : Code[20];
      ColumnCode@1100485000 : Code[20];
    BEGIN
      //* Always 1 of the 2 (LineSelType or ColumnSelType, so not both) is 'VendorRating-Type'.
      IF (LineSelType = TmpSelType.Type::"VR-Type") THEN BEGIN
        LineCode := TypeCode;
        ColumnCode := CodeNo;
      END;
      IF (ColumnSelType = TmpSelType.Type::"VR-Type") THEN BEGIN
        LineCode := CodeNo;
        ColumnCode := TypeCode;
      END;

      WITH TmpDataBuf DO BEGIN
        Window.UPDATE(1, LineCode + ' - ' + ColumnCode);

        IF GET(LineCode, ColumnCode) THEN BEGIN
          IF NOT ModeReplace THEN
            Amount := Amount + Amt
          ELSE
            Amount := Amt;
          MODIFY;
        END ELSE BEGIN
          INIT;
          "Line Code" := LineCode;
          "Column Code" := ColumnCode;
          Amount := Amt;
          INSERT;
          WriteUnknownLineColCodes(LineCode, ColumnCode);
        END;

        EXIT(Amount);  // Total amount (or total quantity or total number) in buffer for line/column
      END;
    END;

    LOCAL PROCEDURE WriteUnknownLineColCodes@1100525007(LineCode@1100525001 : Code[20];ColumnCode@1100525000 : Code[20]);
    VAR
      OptionNo@1100525003 : Option;
      Name@1100525002 : Text[50];
    BEGIN
      // It can be that there are unknown codes (code is delete but still in order/invoice lines) or that the code is empty.
      // These code (vendor/account/dim1+2) must also inserted in the line buffer or column buffer, otherwise there is missing data.
      IF LineSelType IN
        [TmpSelType.Type::Vendor, TmpSelType.Type::Account, TmpSelType.Type::Dim1, TmpSelType.Type::Dim2]
      THEN BEGIN
        OptionNo := 0;
        IF NOT TmpLineCodeBuf.GET(TmpLineCodeBuf."Line Type"::Line, LineCode) THEN BEGIN
          IF LineCode = '' THEN
            Name := Text001
          ELSE
            Name := STRSUBSTNO(Text002, LineCode);
          WriteLineCodeBuffer(LineCode, Name, 0D, 0D, TRUE, 0);
        END;
      END;
      IF ColumnSelType IN
        [TmpSelType.Type::Vendor, TmpSelType.Type::Account, TmpSelType.Type::Dim1, TmpSelType.Type::Dim2]
      THEN BEGIN
        IF ColumnCode = '' THEN
          Name := Text001
        ELSE
          Name := STRSUBSTNO(Text002, ColumnCode);
        OptionNo := 0;
        IF ProcessType = ProcessType::Turnover THEN
          OptionNo := TmpColCodeBuf."Column Type"::Amount;  // If only Percentage then column for Amount is also in column buffer
        IF NOT TmpColCodeBuf.GET(ColumnCode, OptionNo) THEN BEGIN
          WriteColumnCodeBuffer(ColumnCode, Name, 0D, 0D, TRUE, 0);
        END;
      END;
    END;

    LOCAL PROCEDURE TO_FinishBuildProcess@1100525036();
    VAR
      TotalLines@1100525000 : Decimal;
    BEGIN
      TmpDataBuf.RESET;
      WITH TmpLineCodeBuf DO BEGIN
        IF FINDSET(TRUE,FALSE) THEN BEGIN
          REPEAT
            IF "Line Type" <> "Line Type"::Line THEN
              DELETE
            ELSE BEGIN
              TmpDataBuf.SETRANGE("Line Code", Code);
              "Empty Line" := NOT TmpDataBuf.FINDFIRST;
              IF (NOT "Empty Line") THEN BEGIN
                TmpDataBuf.CALCSUMS(Amount);
                Total := TmpDataBuf.Amount;
                TotalLines := TotalLines + Total;
              END ELSE
                Total := 0; //kkleermaker.n, 130618
              MODIFY;
            END;
          UNTIL NEXT = 0;
        END;
        INIT;
        "Line Type" := "Line Type"::Total;
        Code := '';
        Name := STRSUBSTNO('%1', "Line Type");
        Total := TotalLines;
        INSERT;
        //
        //"Line Type" := "Line Type"::TotalDesc;  // Extra total line for descending sorting. Show one of  this totals
        //INSERT;                                 // must be done by setting a filter on "Line Type" on one of this totals
      END;

      TmpDataBuf.RESET;
      WITH TmpColCodeBuf DO BEGIN
        IF FINDSET(TRUE,FALSE) THEN BEGIN
          REPEAT
            TmpDataBuf.SETRANGE("Column Code", Code);
            "Empty Column" := NOT TmpDataBuf.FINDFIRST;
            IF (NOT "Empty Column") THEN BEGIN
              TmpDataBuf.CALCSUMS(Amount);
              Total := TmpDataBuf.Amount;
            END ELSE
              Total := 0; //kkleermaker.n, 130618
            MODIFY;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE RT_FinishBuildProcess@1100525004(TotOrders@1100525012 : Integer;TotOrderLines@1100525011 : Integer;TotRetOrdersCV@1100525010 : Integer;TotRetOrders@1100525009 : Integer;TotInvoices@1100525008 : Integer;TotBlockInvs@1100525007 : Integer;TotNotMatchInvs@1100525006 : Integer;TotCreditMemos@1100525005 : Integer;TotBlockCrMemos@1100525004 : Integer;TotNotMatchCrMemos@1100525003 : Integer;TotOrderAmt@1100525002 : Decimal;TotInvoiceAmt@1100525001 : Decimal;TotCrMemoAmt@1100525000 : Decimal);
    BEGIN
      TmpDataBuf.RESET;
      WITH TmpLineCodeBuf DO BEGIN
        IF FINDSET(TRUE,FALSE) THEN BEGIN
          REPEAT
            IF "Line Type" <> "Line Type"::Line THEN
              DELETE
            ELSE BEGIN
              TmpDataBuf.SETRANGE("Line Code", Code);
              "Empty Line" := NOT TmpDataBuf.FINDFIRST;
              IF (NOT "Empty Line") AND (LineSelType = TmpSelType.Type::"VR-Type") THEN BEGIN
                Total := RT_CalculateTotal(Code,
                  TotOrders, TotOrderLines, TotRetOrdersCV, TotRetOrders, TotInvoices, TotBlockInvs, TotNotMatchInvs,
                  TotCreditMemos, TotBlockCrMemos, TotNotMatchCrMemos, TotOrderAmt, TotInvoiceAmt, TotCrMemoAmt);
              END ELSE
                Total := 0; //kkleermaker.n, 130618
              MODIFY;
            END;
          UNTIL NEXT = 0;
        END;
        IF (ColumnSelType = TmpSelType.Type::"VR-Type") THEN BEGIN  // Line for Totals
          INIT;
          "Line Type" := "Line Type"::Total;
          Code := '';
          Name := STRSUBSTNO('%1', "Line Type");
          Total := 0;
          INSERT;
          //
          //"Line Type" := "Line Type"::TotalDesc;  // Extra total line for descending sorting. Show one of  this totals
          //INSERT;                                 // must be done by setting a filter on "Line Type" on one of this totals
        END;
      END;

      TmpDataBuf.RESET;
      WITH TmpColCodeBuf DO BEGIN
        IF FINDSET(TRUE,FALSE) THEN BEGIN
          REPEAT
            TmpDataBuf.SETRANGE("Column Code", Code);
            "Empty Column" := NOT TmpDataBuf.FINDFIRST;
            IF (NOT "Empty Column") AND (ColumnSelType = TmpSelType.Type::"VR-Type") THEN BEGIN
              Total := RT_CalculateTotal(Code,
                TotOrders, TotOrderLines, TotRetOrdersCV, TotRetOrders, TotInvoices, TotBlockInvs, TotNotMatchInvs,
                TotCreditMemos, TotBlockCrMemos, TotNotMatchCrMemos, TotOrderAmt, TotInvoiceAmt, TotCrMemoAmt);
            END;
            IF "Empty Column" THEN  //kkleermaker.n, 130618
              Total := 0;           //kkleermaker.n, 130618
            MODIFY;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE RT_CalculateTotal@1100485012(RatingTypeCode@1100485000 : Code[20];TotOrders@1100525013 : Integer;TotOrderLines@1100525012 : Integer;TotRetOrdersCV@1100525011 : Integer;TotRetOrders@1100525010 : Integer;TotInvoices@1100525009 : Integer;TotBlockInvs@1100525008 : Integer;TotNotMatchInvs@1100525007 : Integer;TotCreditMemos@1100525006 : Integer;TotBlockCrMemos@1100525005 : Integer;TotNotMatchCrMemos@1100525004 : Integer;TotOrderAmt@1100525003 : Decimal;TotInvoiceAmt@1100525002 : Decimal;TotCrMemoAmt@1100525001 : Decimal) : Decimal;
    VAR
      VendNo@1100485002 : Code[20];
      TotalRT@1100525000 : Decimal;
    BEGIN
      // Calculate totals by Rating Type.
      // Average amounts may/can not simply be added (with a CALCSUM on the data buffer).
      // This can also not be done for the number of vendors/orders/invoices/etc.
      VendRatingType.GET(RatingTypeCode);
      CASE VendRatingType.Type OF
        VendRatingType.Type::Vendors:
          BEGIN
            TmpTotVendNos.RESET;
            IF TmpTotVendNos.FINDSET THEN BEGIN
              REPEAT
                IF TmpTotVendNos."Line Code" <> VendNo THEN BEGIN
                  TotalRT := TotalRT + 1;
                  VendNo := TmpTotVendNos."Line Code";
                END;
              UNTIL TmpTotVendNos.NEXT = 0;
            END;
            EXIT(TotalRT);
          END;
        VendRatingType.Type::Orders:
          EXIT(TotOrders);
        VendRatingType.Type::OrderLines:
          EXIT(TotOrderLines);
        VendRatingType.Type::AvgOrderAmt:
          IF TotOrders = 0 THEN
            EXIT(0)
          ELSE
            EXIT(TotOrderAmt / TotOrders);
        VendRatingType.Type::AvgOrderLineAmt:
          IF TotOrderLines = 0 THEN
            EXIT(0)
          ELSE
            EXIT(TotOrderAmt / TotOrderLines);
        VendRatingType.Type::ReturnOrdersCausedByVendor:
          EXIT(TotRetOrdersCV);
        VendRatingType.Type::ReturnOrders:
          EXIT(TotRetOrders);
        VendRatingType.Type::Invoices:
          EXIT(TotInvoices);
        VendRatingType.Type::BlockedInvoices:
          EXIT(TotBlockInvs);
        VendRatingType.Type::NotMatchInvoices:
          EXIT(TotNotMatchInvs);
        VendRatingType.Type::AvgInvoiceAmt:
          IF TotInvoices = 0 THEN
            EXIT(0)
          ELSE
            EXIT(TotInvoiceAmt / TotInvoices);
        VendRatingType.Type::CrMemos:
          EXIT(TotCreditMemos);
        VendRatingType.Type::BlockedCrMemos:
          EXIT(TotBlockCrMemos);
        VendRatingType.Type::NotMatchCrMemos:
          EXIT(TotNotMatchCrMemos);
        VendRatingType.Type::AvgCrMemoAmt:
          IF TotCreditMemos = 0 THEN
            EXIT(0)
          ELSE
            EXIT(TotCrMemoAmt / TotCreditMemos);
        VendRatingType.Type::"Average deviation (requested) in days",
        VendRatingType.Type::"Average deviation (promised) in days":
          EXIT(0);  // Not a total (0)
        ELSE BEGIN
          TmpDataBuf.CALCSUMS(Amount);
          EXIT(TmpDataBuf.Amount);
        END;
      END;
    END;

    PROCEDURE SetComFiltersOnPurchOrderLine@1210190030(VAR PurchOrderLine@1100525000 : Record 39);
    BEGIN
      WITH PurchOrderLine DO BEGIN
        RESET;
        FILTERGROUP(9);  // In another filtergroup, filter on Document Type may (on drilldown) not be modified by the user!
        SETRANGE("Document Type", "Document Type"::Order);
        FILTERGROUP(0);
        IF DateFilter <> '' THEN
          SETFILTER("Order Date", DateFilter);
        IF VendorFilter <> '' THEN
          SETFILTER("Buy-from Vendor No.", VendorFilter);
        IF VendQualFilter <> '' THEN
          SETFILTER("Vendor Qualification", VendQualFilter);
        SETFILTER(Type, '<>%1', Type::" ");
        IF (NOT CheckEmptyAccountInFilter) THEN
          SETRANGE(Type, Type::"G/L Account");
        IF (GLAccFilter <> '') THEN
          SETFILTER("Account No.", GLAccFilter);
        IF GlobalDim1Filter <> '' THEN
          SETFILTER("Shortcut Dimension 1 Code", GlobalDim1Filter);
        IF HardDPAFilter <> '' THEN BEGIN
          FILTERGROUP(7);
          SETFILTER("Shortcut Dimension 1 Code", HardDPAFilter);
          FILTERGROUP(0);
        END;
        IF GlobalDim2Filter <> '' THEN
          SETFILTER("Shortcut Dimension 2 Code", GlobalDim2Filter);
        IF JobFilter <> '' THEN
          SETFILTER("Job No.", JobFilter);
      END;
    END;

    PROCEDURE SetComFiltersOnPurchRcptLine@1100485015(VAR PurchRcptLine@1100525000 : Record 121);
    BEGIN
      WITH PurchRcptLine DO BEGIN
        RESET;
        FILTERGROUP(9);  // In another filtergroup, filter on Purch Order Type may (on drilldown) not be modified by the user!
        SETFILTER("Purchase Order Type", '<>%1', "Purchase Order Type"::"Return Order");
        FILTERGROUP(0);
        IF DateFilter <> '' THEN
          SETFILTER("Posting Date", DateFilter);
        IF VendorFilter <> '' THEN
          SETFILTER("Buy-from Vendor No.", VendorFilter);
        IF VendQualFilter <> '' THEN
          SETFILTER("Vendor Qualification", VendQualFilter);
        SETFILTER(Type, '<>%1', Type::" ");
        IF (NOT CheckEmptyAccountInFilter) THEN
          SETRANGE(Type, Type::"G/L Account");
        IF (GLAccFilter <> '') THEN
          SETFILTER("Account No.", GLAccFilter);
        IF GlobalDim1Filter <> '' THEN
          SETFILTER("Shortcut Dimension 1 Code", GlobalDim1Filter);
        IF HardDPAFilter <> '' THEN BEGIN
          FILTERGROUP(7);
          SETFILTER("Shortcut Dimension 1 Code", HardDPAFilter);
          FILTERGROUP(0);
        END;
        IF GlobalDim2Filter <> '' THEN
          SETFILTER("Shortcut Dimension 2 Code", GlobalDim2Filter);
        IF JobFilter <> '' THEN
          SETFILTER("Job No.", JobFilter);
      END;
    END;

    PROCEDURE SetComFiltersOnPurchInvLine@1210190028(VAR PurchInvLine@1100525000 : Record 123);
    BEGIN
      WITH PurchInvLine DO BEGIN
        RESET;
        IF DateFilter <> '' THEN
          SETFILTER("Posting Date", DateFilter);
        IF VendorFilter <> '' THEN
          SETFILTER("Buy-from Vendor No.", VendorFilter);
        IF VendQualFilter <> '' THEN
          SETFILTER("Vendor Qualification", VendQualFilter);
        SETFILTER(Type, '<>%1', Type::" ");
        IF (NOT CheckEmptyAccountInFilter) THEN
          SETRANGE(Type, Type::"G/L Account");
        IF (GLAccFilter <> '') THEN
          SETFILTER("Account No.", GLAccFilter);
        IF GlobalDim1Filter <> '' THEN
          SETFILTER("Shortcut Dimension 1 Code", GlobalDim1Filter);
        IF HardDPAFilter <> '' THEN BEGIN
          FILTERGROUP(7);
          SETFILTER("Shortcut Dimension 1 Code", HardDPAFilter);
          FILTERGROUP(0);
        END;
        IF GlobalDim2Filter <> '' THEN
          SETFILTER("Shortcut Dimension 2 Code", GlobalDim2Filter);
        IF JobFilter <> '' THEN
          SETFILTER("Job No.", JobFilter);
        IF ShowApprovalLines THEN
          SETRANGE("Approval Entry")
        ELSE
          SETRANGE("Approval Entry", FALSE);

      END;
    END;

    PROCEDURE SetComFiltersOnPurchCrMemoLine@1210190029(VAR PurchCrMemoLine@1100525000 : Record 125);
    BEGIN
      WITH PurchCrMemoLine DO BEGIN
        RESET;
        IF DateFilter <> '' THEN
          SETFILTER("Posting Date", DateFilter);
        IF VendorFilter <> '' THEN
          SETFILTER("Buy-from Vendor No.", VendorFilter);
        IF VendQualFilter <> '' THEN
          SETFILTER("Vendor Qualification", VendQualFilter);
        SETFILTER(Type, '<>%1', Type::" ");
        IF (NOT CheckEmptyAccountInFilter) THEN
          SETRANGE(Type, Type::"G/L Account");
        IF (GLAccFilter <> '') THEN
          SETFILTER("Account No.", GLAccFilter);
        IF GlobalDim1Filter <> '' THEN
          SETFILTER("Shortcut Dimension 1 Code", GlobalDim1Filter);
        IF GlobalDim2Filter <> '' THEN
          SETFILTER("Shortcut Dimension 2 Code", GlobalDim2Filter);
        IF JobFilter <> '' THEN
          SETFILTER("Job No.", JobFilter);
        IF HardDPAFilter <> '' THEN BEGIN
          FILTERGROUP(7);
          SETFILTER("Shortcut Dimension 1 Code", HardDPAFilter);
          FILTERGROUP(0);
        END;
        IF ShowApprovalLines THEN
          SETRANGE("Approval Entry")
        ELSE
          SETRANGE("Approval Entry", FALSE);
      END;
    END;

    LOCAL PROCEDURE CheckEmptyAccountInFilter@1210190021() : Boolean;
    VAR
      TmpGLAcc@1210190000 : TEMPORARY Record 15;
    BEGIN
      WITH TmpGLAcc DO BEGIN
        IF GLAccFilter = '' THEN
          EXIT(TRUE);
        "No." := '';
        INSERT;
        SETFILTER("No.", GLAccFilter);
        EXIT(NOT ISEMPTY);
      END;
    END;

    PROCEDURE DateToCode@1210190013(Date@1210190000 : Date) : Code[20];
    VAR
      DateText@1210190001 : Text[10];
    BEGIN
      IF Date = 0D THEN
        EXIT('');

      DateText := FORMAT(DATE2DMY(Date, 3), 4) + FORMAT(DATE2DMY(Date, 2), 2) + FORMAT(DATE2DMY(Date, 1), 2);
      IF COPYSTR(DateText, 5, 1) = ' ' THEN
        DateText[5] := '0';
      IF COPYSTR(DateText, 7, 1) = ' ' THEN
        DateText[7] := '0';

      EXIT(DateText);
    END;

    LOCAL PROCEDURE DetermineCode@1210190023(CodeForLine@1100525000 : Boolean;Date@1210190000 : Date;VendorNo@1210190001 : Code[20];AccountNo@1210190002 : Code[20];Dim1@1210190003 : Code[20];Dim2@1210190004 : Code[20]) RetCode : Code[20];
    BEGIN
      IF CodeForLine THEN BEGIN
        CASE LineSelType OF
          TmpSelType.Type::Period:
            RetCode := DateToCode(Date);
          TmpSelType.Type::Vendor:
            RetCode := VendorNo;
          TmpSelType.Type::Account:
            RetCode := AccountNo;
          TmpSelType.Type::Dim1:
            RetCode := Dim1;
          TmpSelType.Type::Dim2:
            RetCode := Dim2;
        END;
      END;
      IF NOT CodeForLine THEN BEGIN
        CASE ColumnSelType OF
          TmpSelType.Type::Period:
            RetCode := DateToCode(Date);
          TmpSelType.Type::Vendor:
            RetCode := VendorNo;
          TmpSelType.Type::Account:
            RetCode := AccountNo;
          TmpSelType.Type::Dim1:
            RetCode := Dim1;
          TmpSelType.Type::Dim2:
            RetCode := Dim2;
        END;
      END;
    END;

    LOCAL PROCEDURE DeterminePeriodStart@1210190025(Date@1210190000 : Date) : Date;
    VAR
      Period@1210190001 : Record 2000000007;
    BEGIN
      IF PeriodType <> PeriodType::Day THEN BEGIN
        Period."Period Start" := Date;
        IF PeriodFormMgt.FindDate('=<', Period, PeriodType) THEN
          EXIT(Period."Period Start");
      END;
      EXIT(Date);
    END;

    LOCAL PROCEDURE CheckRatingTypeSelected@1210190031(RatingType@1210190000 : Option) : Boolean;
    BEGIN
      VendRatingType.RESET;
      VendRatingType.SETRANGE(Type, RatingType);
      IF RatingTypeFilter <> '' THEN
        VendRatingType.SETFILTER(Code, RatingTypeFilter);
      EXIT(NOT VendRatingType.ISEMPTY);
    END;

    LOCAL PROCEDURE RatingTypeToCode@1210190000(RatingType@1210190000 : Option) : Code[20];
    BEGIN
      VendRatingType.RESET;
      VendRatingType.SETRANGE(Type, RatingType);
      IF VendRatingType.FINDFIRST THEN
        EXIT(VendRatingType.Code);
      // It can be that a certain Rating Type is not present, but that it is needed (in the bachground).
      // For instance for the the calculation of a average amount also the total amount and quantity are needed.
      // Therefore than to generate a unique code (this code you do not see anywhere).
      EXIT(COPYSTR(('[TYPE' + '-' + FORMAT(RatingType, 2) + ']'), 1, MAXSTRLEN(VendRatingType.Code)));
    END;

    LOCAL PROCEDURE SaveProcessedSelections@1100525024();
    BEGIN
      ProcessedLineSelType := LineSelType;
      ProcessedColumnSelType := ColumnSelType;
      ProcessedPeriodType := PeriodType;
      ProcessedAmountsBasedOn := AmountsBasedOn;
      ProcessedShowApprovalLines := ShowApprovalLines;
      ProcessedShowApprovalLines := ShowApprovalLines;
      ProcessedRatingTypeFilter := RatingTypeFilter;
      ProcessedDateFilter := DateFilter;
      ProcessedVendorFilter := VendorFilter;
      ProcesVendCategFiltCodeSystem := VendorCategoryFilterCodeSystem;
      ProcesVendCategFiltCode := VendorCategoryFilterCode;
      ProcessedVendQualFilter := VendQualFilter;
      ProcessedGLAccFilter := GLAccFilter;
      ProcessedGlobalDim1Filter := GlobalDim1Filter;
      ProcessedGlobalDim2Filter := GlobalDim2Filter;
      ProcessedJobFilter := JobFilter;
    END;

    PROCEDURE GetSelectionCodeWithSelType@1100525011(SelectionType@1100525000 : Option) : Code[30];
    BEGIN
      SelTypeMgt.GetOnOptionType(SelectionType, TmpSelType);
      EXIT(TmpSelType.Code);
    END;

    PROCEDURE ValidateSelectionCode@1100525005(SelectionCode@1100525000 : Code[30];VAR SelectionType@1100525001 : Option);
    BEGIN
      SelTypeMgt.OnValidateSelection(SelectionCode, TmpSelType);
      SelectionType := TmpSelType.Type;
    END;

    PROCEDURE LookupSelectionCode@1100525006(VAR SelectionCode@1100525001 : Code[30]);
    BEGIN
      SelTypeMgt.OnLookUpSelections(TmpSelType, SelectionCode);
    END;

    PROCEDURE LookupVendorNoFilter@1100525008(VAR FilterText@1100525000 : Text[250]) : Boolean;
    VAR
      VendorList@1100525001 : Page 27;
    BEGIN
      VendorList.LOOKUPMODE(TRUE);
      IF VendorList.RUNMODAL<> ACTION::LookupOK THEN
        EXIT(FALSE);
      FilterText := VendorList.GetSelectionFilter;
      EXIT(TRUE);
    END;

    PROCEDURE LookupVendQualificationFilter@1100525012(VAR FilterText@1100525000 : Text[250]) : Boolean;
    VAR
      VendorQualList@1100525001 : Page 11020250;
    BEGIN
      VendorQualList.LOOKUPMODE(TRUE);
      IF VendorQualList.RUNMODAL<> ACTION::LookupOK THEN
        EXIT(FALSE);
      FilterText := VendorQualList.GetSelectionFilter;
      EXIT(TRUE);
    END;

    PROCEDURE LookupGLAccountNoFilter@1100525013(VAR FilterText@1100525000 : Text[250]) : Boolean;
    VAR
      GLAccList@1100525001 : Page 18;
    BEGIN
      GLAccList.LOOKUPMODE(TRUE);
      IF GLAccList.RUNMODAL<> ACTION::LookupOK THEN
        EXIT(FALSE);
      FilterText := GLAccList.GetSelectionFilter;
      EXIT(TRUE);
    END;

    PROCEDURE LookUpDimensionValueFilter@57(GlobalDimNo@1000 : Integer;VAR FilterText@1001 : Text[250]) : Boolean;
    VAR
      DimVal@1002 : Record 349;
      DimValList@1003 : Page 560;
      Dim@1100525000 : Code[20];
    BEGIN
      CASE GlobalDimNo OF
       1: Dim := GLSetup."Global Dimension 1 Code";
       2: Dim := GLSetup."Global Dimension 2 Code";
      END;
      IF Dim = '' THEN
        EXIT(FALSE);
      DimValList.LOOKUPMODE(TRUE);
      DimVal.SETRANGE("Dimension Code", Dim);
      DimValList.SETTABLEVIEW(DimVal);
      IF DimValList.RUNMODAL <> ACTION::LookupOK THEN
        EXIT(FALSE);
      FilterText := DimValList.GetSelectionFilter;
      EXIT(TRUE);
    END;

    PROCEDURE LookupRatingTypeFilter@1100525009(VAR FilterText@1100525000 : Text[250]) : Boolean;
    VAR
      RatingTypeList@1100525001 : Page 11012685;
    BEGIN
      RatingTypeList.LOOKUPMODE(TRUE);
      IF RatingTypeList.RUNMODAL<> ACTION::LookupOK THEN
        EXIT(FALSE);
      FilterText := RatingTypeList.GetSelectionFilter;
      EXIT(TRUE);
    END;

    PROCEDURE TO_RoundAmount@1100525015(Amount@1100525000 : Decimal;ColumnType@1100525002 : Option) : Decimal;
    BEGIN
      IF ColumnType = TmpColCodeBuf."Column Type"::Percentage THEN
        EXIT(ROUND(Amount, 0.01));

      CASE RoundingFactor OF
        RoundingFactor::"1":
          EXIT(ROUND(Amount, 1));
        RoundingFactor::"1000":
          EXIT(ROUND(Amount / 1000));
        RoundingFactor::"1000000":
          EXIT(ROUND(Amount / 1000000));
      END;
      EXIT(Amount);
    END;

    PROCEDURE RT_RoundAmount@1100525010(Amount@1100525000 : Decimal;RatingTypeOptionNo@1100525002 : Option) : Decimal;
    BEGIN
      IF RT_RatingTypeIsAmount(RatingTypeOptionNo) THEN BEGIN
        CASE RoundingFactor OF
          RoundingFactor::"1":
            EXIT(ROUND(Amount, 1));
          RoundingFactor::"1000":
            EXIT(ROUND(Amount / 1000));
          RoundingFactor::"1000000":
            EXIT(ROUND(Amount / 1000000));
        END;
      END;
      EXIT(Amount);
    END;

    PROCEDURE RT_RatingTypeIsAmount@1100525023(RatingTypeOptionNo@1100525000 : Option) : Boolean;
    BEGIN
      CASE RatingTypeOptionNo OF
        VendRatingType.Type::OrderAmt,
        VendRatingType.Type::AvgOrderAmt,
        VendRatingType.Type::AvgOrderLineAmt,
        VendRatingType.Type::InvoiceAmt,
        VendRatingType.Type::AvgInvoiceAmt,
        VendRatingType.Type::CrMemoAmt,
        VendRatingType.Type::AvgCrMemoAmt:
          EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    PROCEDURE GetVendorDPAFilter@1100528409(ContextID@1100528401 : Text[30];VAR HardFilter@1100525000 : Boolean) : Code[250];
    VAR
      Vendor@1100528400 : Record 23;
    BEGIN
      HardFilter := FALSE;
      Vendor.DPA_SetFilters(ContextID);
      Vendor.FILTERGROUP(7);  // Contains Hard DPA Filter (if there is one)
      IF Vendor.GETFILTER("Global Dimension 1 Filter") <> '' THEN BEGIN
        HardFilter := TRUE;
        EXIT(Vendor.GETFILTER("Global Dimension 1 Filter"));
      END;
      Vendor.FILTERGROUP(0);  // Contains Soft DPA Filter (if there is one)
      EXIT(Vendor.GETFILTER("Global Dimension 1 Filter"));
    END;

    PROCEDURE ProcessExportExcel@1100525016(CurrPageCaption@1100525007 : Text[100];ShowColumnName@1100525006 : Boolean;SkipEmptyLines@1100525010 : Boolean;SkipEmptyColumns@1100525011 : Boolean;ShowInColumn@1100525012 : 'Amount,Percentage,Both');
    VAR
      RowNo@1100525000 : Integer;
      ColNo@1100525001 : Integer;
      EmptyColNo@1100525008 : Integer;
      TotCount@1100525002 : Integer;
      Counter@1100525003 : Integer;
      Amt@1100525004 : Decimal;
      TotalAmtLines@1100525009 : Decimal;
      CellText@1100525005 : Text[250];
    BEGIN
      IF ProcessType = ProcessType::Turnover THEN BEGIN // Read total of all lines, must be done before FindFirst of line buffer
        IF TmpLineCodeBuf.GET(TmpLineCodeBuf."Line Type"::Total, '') THEN
          TotalAmtLines := TmpLineCodeBuf.Total;
      END;

      TmpLineCodeBuf.RESET;
      TmpColCodeBuf.RESET;
      TmpDataBuf.RESET;
      TmpLineCodeBuf.FILTERGROUP(9);  //Must be same filtergroup as in pages
      IF SkipEmptyLines THEN
        TmpLineCodeBuf.SETRANGE("Empty Line", FALSE)
      ELSE
        TmpLineCodeBuf.SETRANGE("Empty Line");  // Reset Filter
      TmpLineCodeBuf.FILTERGROUP(0);
      IF SkipEmptyColumns THEN
        TmpColCodeBuf.SETRANGE("Empty Column", FALSE)
      ELSE
        TmpColCodeBuf.SETRANGE("Empty Column");  // Reset Filter
      CASE ShowInColumn OF
        ShowInColumn::Amount:
          TmpColCodeBuf.SETRANGE("Column Type", TmpColCodeBuf."Column Type"::Amount);
        ShowInColumn::Percentage:
          TmpColCodeBuf.SETRANGE("Column Type", TmpColCodeBuf."Column Type"::Percentage);
        ELSE
          TmpColCodeBuf.SETRANGE("Column Type");  // Reset Filter
      END;
      IF (NOT TmpLineCodeBuf.FINDFIRST) OR (NOT TmpColCodeBuf.FINDFIRST) OR (NOT TmpDataBuf.FINDFIRST) THEN
        ERROR(Text004);
      TotCount := (TmpLineCodeBuf.COUNT + 1) * TmpColCodeBuf.COUNT;

      //* Selections
      Window.OPEN(Text005 + Text006);
      TmpExcelBuf.DELETEALL;
      RowNo := 1;
      EnterCell(RowNo, 1, Text101, FALSE, '@', '');
      EnterCell(RowNo, 2, LineSelCode, FALSE, '@', '');
      RowNo := RowNo + 1;
      EnterCell(RowNo, 1, Text102, FALSE, '@', '');
      EnterCell(RowNo, 2, ColumnSelCode, FALSE, '@', '');
      IF ProcessType = ProcessType::Turnover THEN BEGIN
        RowNo := RowNo + 1;
        EnterCell(RowNo, 1, Text103, FALSE, '@', '');
        EnterCell(RowNo, 2, SELECTSTR(AmountsBasedOn+1, Text103a), FALSE, '@', '');
        RowNo := RowNo + 1;
        EnterCell(RowNo, 1, Text104, FALSE, '@', '');
        EnterCell(RowNo, 2, FORMAT(ShowApprovalLines), FALSE, '', '');
      END;
      RowNo := RowNo + 1;
      EnterCell(RowNo, 1, Text105, FALSE, '@', '');
      IF RoundingFactor = RoundingFactor::None THEN
        EnterCell(RowNo, 2, Text105a, FALSE, '', '')
      ELSE
        EnterCell(RowNo, 2, FORMAT(RoundingFactor), FALSE, '', '');
      RowNo := RowNo + 1;
      IF DateFilter <> '' THEN BEGIN
        RowNo := RowNo + 1;
        EnterCell(RowNo, 1, Text111, FALSE, '@', '');
        EnterCell(RowNo, 2, DateFilter, FALSE, '@', '');
      END;
      IF VendorFilter <> '' THEN BEGIN
        RowNo := RowNo + 1;
        EnterCell(RowNo, 1, Text112, FALSE, '@', '');
        EnterCell(RowNo, 2, VendorFilter, FALSE, '@', '');
      END;
      IF VendorCategoryFilterCodeSystem <> '' THEN BEGIN
        RowNo := RowNo + 1;
        EnterCell(RowNo, 1, Text118, FALSE, '@','');
        EnterCell(RowNo, 2, VendorCategoryFilterCodeSystem, FALSE, '@','');
      END;
      IF VendorCategoryFilterCode <> '' THEN BEGIN
        RowNo := RowNo + 1;
        EnterCell(RowNo, 1, Text119, FALSE, '@','');
        EnterCell(RowNo, 2, VendorCategoryFilterCode, FALSE, '@','');
      END;
      IF VendQualFilter <> '' THEN BEGIN
        RowNo := RowNo + 1;
        EnterCell(RowNo, 1, Text113, FALSE, '@', '');
        EnterCell(RowNo, 2, VendQualFilter, FALSE, '@', '');
      END;
      IF GLAccFilter <> '' THEN BEGIN
        RowNo := RowNo + 1;
        EnterCell(RowNo, 1, Text114, FALSE, '@', '');
        EnterCell(RowNo, 2, GLAccFilter, FALSE, '@', '');
      END;
      IF GlobalDim1Filter <> '' THEN BEGIN
        RowNo := RowNo + 1;
        EnterCell(RowNo, 1, Text115, FALSE, '@', '');
        EnterCell(RowNo, 2, GlobalDim1Filter, FALSE, '@', '');
      END;
      IF GlobalDim2Filter <> '' THEN BEGIN
        RowNo := RowNo + 1;
        EnterCell(RowNo, 1, Text116, FALSE, '@', '');
        EnterCell(RowNo, 2, GlobalDim2Filter, FALSE, '@', '');
      END;
      IF ProcessType = ProcessType::Rating THEN BEGIN
        IF RatingTypeFilter <> '' THEN BEGIN
          RowNo := RowNo + 1;
          EnterCell(RowNo, 1, Text117, FALSE, '@', '');
          EnterCell(RowNo, 2, RatingTypeFilter, FALSE, '@', '');
        END;
      END;
      Window.CLOSE;

      TmpExcelBuf.CreateBook('',Text006);
      TmpExcelBuf.WriteSheet(CurrPageCaption, COMPANYNAME, USERID);

      //* Statistics
      Window.OPEN(Text005 + '@1@@@@@@@@@@@@@@@@@@@@@@@@@\');
      TmpExcelBuf.DELETEALL;
      RowNo := 2;
      EnterCell(RowNo, 1, TmpLineCodeBuf.FIELDCAPTION(Code), FALSE, '@', '');
      EnterCell(RowNo, 2, TmpLineCodeBuf.FIELDCAPTION(Name), FALSE, '@', '');
      ColNo := 3;
      CASE ProcessType OF
        ProcessType::Turnover:
          BEGIN
            EnterCell(RowNo, ColNo, TmpLineCodeBuf.FIELDCAPTION(Total), FALSE, '@', '');
            EnterCell(RowNo, ColNo+1, Text007, FALSE, '@', '');
            ColNo := ColNo + 2;
          END;
        ProcessType::Rating:
          BEGIN
            IF (LineSelType = TmpSelType.Type::"VR-Type") THEN BEGIN
              EnterCell(RowNo, ColNo, TmpLineCodeBuf.FIELDCAPTION(Total), FALSE, '@', '');
              ColNo := ColNo + 1;
            END;
          END;
      END;
      EmptyColNo := ColNo;
      REPEAT
        Counter := Counter + 1;
        Window.UPDATE(1, ROUND(Counter / TotCount * 10000, 1));
        ColNo := ColNo + 1;
        IF NOT ShowColumnName THEN BEGIN
          IF ColumnSelType = TmpSelType.Type::Period THEN
            CellText := FORMAT(TmpColCodeBuf."Period Start")
          ELSE BEGIN
            CellText := TmpColCodeBuf.Code;
            IF CellText = '' THEN
              CellText := Text000;
          END;
        END ELSE BEGIN
          IF ColumnSelType = TmpSelType.Type::Period THEN BEGIN
            CellText := FORMAT(TmpColCodeBuf."Period Start");
            EnterCell(RowNo-1, ColNo, CellText, FALSE, '@', 'D');
          END;
          CellText := TmpColCodeBuf.Name;
        END;
        EnterCell(RowNo, ColNo, CellText, FALSE, '@', '');
      UNTIL TmpColCodeBuf.NEXT = 0;
      RowNo := RowNo + 1;

      REPEAT
        RowNo := RowNo + 1;
        EnterCell(RowNo, 1, TmpLineCodeBuf.Code, FALSE, '@', '');
        EnterCell(RowNo, 2, TmpLineCodeBuf.Name, (TmpLineCodeBuf."Line Type" <> TmpLineCodeBuf."Line Type"::Line), '@', '');
        IF TmpLineCodeBuf.Total <> 0 THEN BEGIN
          CellText := FORMAT(TO_RoundAmount(TmpLineCodeBuf.Total, TmpColCodeBuf."Column Type"::Amount));
          EnterCell(RowNo, 3, CellText, (TmpLineCodeBuf."Line Type" <> TmpLineCodeBuf."Line Type"::Line), '<RF>', 'N');
          IF TotalAmtLines <> 0 THEN BEGIN
            CellText := FORMAT(TO_RoundAmount(TmpLineCodeBuf.Total / TotalAmtLines * 100, TmpColCodeBuf."Column Type"::Percentage)) + '%';
            EnterCell(RowNo, 4, CellText, (TmpLineCodeBuf."Line Type" <> TmpLineCodeBuf."Line Type"::Line), '##0,00%', 'N');
          END;
        END;
        ColNo := EmptyColNo;
        TmpColCodeBuf.FINDFIRST;
        REPEAT
          Counter := Counter + 1;
          Window.UPDATE(1, ROUND(Counter / TotCount * 10000, 1));
          ColNo := ColNo + 1;
          Amt := 0;
          IF TmpLineCodeBuf."Line Type" <> TmpLineCodeBuf."Line Type"::Line THEN
            Amt := TmpColCodeBuf.Total
          ELSE BEGIN
            IF TmpDataBuf.GET(TmpLineCodeBuf.Code, TmpColCodeBuf.Code) THEN
              Amt := TmpDataBuf.Amount;
          END;
          IF Amt <> 0 THEN BEGIN
            CASE ProcessType OF
              ProcessType::Turnover:
                BEGIN
                  IF TmpColCodeBuf."Column Type" <> TmpColCodeBuf."Column Type"::Percentage THEN BEGIN
                    CellText := FORMAT(TO_RoundAmount(Amt, TmpColCodeBuf."Column Type"));
                    EnterCell(RowNo, ColNo, CellText, (TmpLineCodeBuf."Line Type" <> TmpLineCodeBuf."Line Type"::Line), '<RF>', 'N');
                  END ELSE BEGIN
                    IF TmpLineCodeBuf.Total <> 0 THEN BEGIN
                      CellText := FORMAT(TO_RoundAmount(Amt / TmpLineCodeBuf.Total * 100, TmpColCodeBuf."Column Type")) + '%';
                      EnterCell(RowNo, ColNo, CellText, (TmpLineCodeBuf."Line Type" <> TmpLineCodeBuf."Line Type"::Line), '##0,00%', 'N');
                    END
                  END;
                END;
              ProcessType::Rating:
                BEGIN
                  IF TmpLineCodeBuf."Rating Type Option No." <> 0 THEN
                    VendRatingType.Type := TmpLineCodeBuf."Rating Type Option No."
                  ELSE
                    VendRatingType.Type := TmpColCodeBuf."Rating Type Option No.";
                  CellText := FORMAT(RT_RoundAmount(Amt, VendRatingType.Type));
                  IF RT_RatingTypeIsAmount(VendRatingType.Type) THEN
                    EnterCell(RowNo, ColNo, CellText, (TmpLineCodeBuf."Line Type" <> TmpLineCodeBuf."Line Type"::Line), '<RF>', 'N')
                  ELSE
                    EnterCell(RowNo, ColNo, CellText, (TmpLineCodeBuf."Line Type" <> TmpLineCodeBuf."Line Type"::Line), '', 'N');
                END;
            END;
          END;
        UNTIL TmpColCodeBuf.NEXT = 0;
      UNTIL TmpLineCodeBuf.NEXT = 0;

      Window.CLOSE;

      TmpExcelBuf.NewWorksheet(CurrPageCaption);
      TmpExcelBuf.WriteSheet(CurrPageCaption, COMPANYNAME, USERID);
      TmpExcelBuf.CloseBook;
      TmpExcelBuf.OpenExcel;
      TmpExcelBuf.DELETEALL;
    END;

    LOCAL PROCEDURE EnterCell@3(RowNo@1000 : Integer;ColumnNo@1001 : Integer;CellValue@1002 : Text[250];CellBold@1003 : Boolean;CellNumberFormat@1005 : Text[30];CellType@1100525000 : Code[1]);
    BEGIN
      WITH TmpExcelBuf DO BEGIN
        INIT;
        VALIDATE("Row No.", RowNo);
        VALIDATE("Column No.", ColumnNo);
        "Cell Value as Text" := CellValue;
        Formula := '';
        Bold := CellBold;
        IF CellNumberFormat <> '<RF>' THEN
          NumberFormat := CellNumberFormat
        ELSE BEGIN
          CASE RoundingFactor OF
            RoundingFactor::None,
            RoundingFactor::"1000",
            RoundingFactor::"1000000":
               NumberFormat := '#.##0,00';
          END;
        END;
        CASE CellType OF
          'N': "Cell Type" := "Cell Type"::Number;
          'D': "Cell Type" := "Cell Type"::Date;
          'T': "Cell Type" := "Cell Type"::Time;
          ELSE
            "Cell Type" := "Cell Type"::Text;
        END;
        INSERT;
      END;
    END;

    PROCEDURE CheckVendorCategoryInFilter@1100529106(VendorCode@1100529100 : Code[20]) : Boolean;
    VAR
      VendorCategory@1100529101 : Record 11071892;
    BEGIN
      WITH VendorCategory DO BEGIN
        CHANGECOMPANY(ActiveCompany);
        IF (VendorCategoryFilterCodeSystem = '') AND (VendorCategoryFilterCode = '') THEN
          EXIT(TRUE);

        SETRANGE("Vendor No.", VendorCode);
        SETFILTER("Coding System", VendorCategoryFilterCodeSystem);
        SETFILTER(Code, VendorCategoryFilterCode);

        EXIT(NOT ISEMPTY);
      END;
    END;

    PROCEDURE SetCompany@1100485001(ICompany@1100485000 : Text[30]);
    BEGIN
      IF (ICompany = '') OR (ICompany = COMPANYNAME) THEN
        ActiveCompany := ''
      ELSE
        ActiveCompany := ICompany;
    END;

    PROCEDURE LookupJobFilter@1100528200(VAR FilterText@1100525000 : Text[250]) : Boolean;
    VAR
      JobList@1100525001 : Page 11072004;
    BEGIN
      JobList.LOOKUPMODE(TRUE);
      IF JobList.RUNMODAL<> ACTION::LookupOK THEN
        EXIT(FALSE);
      FilterText := JobList.GetSelectionFilter;
      EXIT(TRUE);
    END;

    BEGIN
    END.
  }
}

