OBJECT Page 6711 OData Setup Wizard
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Reporting Data Setup;
               NOR=Konfigurasjon av rapporteringsdata;
               SVE=Inst„llningar f”r rapporteringsinformation];
    SourceTable=Table2000000168;
    PageType=NavigatePage;
    SourceTableTemporary=Yes;
    OnInit=BEGIN
             CheckPermissions;
             LoadTopBanners;
             CurrentPage := 1;
             ObjectTypeLookup := "Object Type"::Page;
             "Object Type" := "Object Type"::Page;
             EditInExcelVisible;
           END;

    OnOpenPage=BEGIN
                 INSERT;
               END;

    OnQueryClosePage=BEGIN
                       IF NOT PublishFlag THEN
                         IF CloseAction = ACTION::OK THEN
                           IF NOT CONFIRM(NAVNotSetUpQst,FALSE) THEN
                             EXIT(FALSE);
                     END;

    ActionList=ACTIONS
    {
      { 5       ;    ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 16      ;1   ;Action    ;
                      Name=AddFiltersAction;
                      CaptionML=[ENU=&Add Filters;
                                 NOR=&Legg til filtre;
                                 SVE=&L„gg till filter];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Visible=True;
                      Enabled=CurrentPage = 4;
                      InFooterBar=Yes;
                      Image=Filter;
                      OnAction=BEGIN
                                 CLEAR(ChangeFields);
                                 ChangeFields := CurrPage.ODataColSubForm.PAGE.IncludeIsChanged;
                                 IF ChangeFields THEN BEGIN
                                   CLEAR(TempTenantWebServiceFilter);
                                   TempTenantWebServiceFilter.DELETEALL;
                                 END;

                                 CLEAR(TempTenantWebServiceColumns);
                                 IF TempTenantWebServiceColumns.FINDFIRST THEN
                                   TempTenantWebServiceColumns.DELETEALL;

                                 CurrPage.ODataColSubForm.PAGE.GetColumns(TempTenantWebServiceColumns);
                                 IF NOT TempTenantWebServiceColumns.FINDFIRST THEN
                                   ERROR(MissingFieldsErr);
                                 GetFilterText(TempTenantWebServiceColumns)
                               END;
                                }
      { 8       ;1   ;Action    ;
                      Name=BackAction;
                      CaptionML=[ENU=&Back;
                                 NOR=&Tilbake;
                                 SVE=&Tillbaka];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Enabled=(CurrentPage > 1) AND (CurrentPage < 5);
                      InFooterBar=Yes;
                      Image=PreviousRecord;
                      OnAction=BEGIN
                                 CurrentPage := CurrentPage - 1;
                                 CurrPage.UPDATE;
                               END;
                                }
      { 9       ;1   ;Action    ;
                      Name=NextAction;
                      CaptionML=[ENU=&Next;
                                 NOR=&Neste;
                                 SVE=&N„sta];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Enabled=(CurrentPage >= 1) AND (CurrentPage < 4);
                      InFooterBar=Yes;
                      Image=NextRecord;
                      OnAction=BEGIN
                                 CASE CurrentPage OF
                                   1,2:
                                     CurrentPage := CurrentPage + 1;
                                   3:
                                     BEGIN
                                       IF (ActionType = ActionType::"Create a new data set") AND (ServiceNameEdit = '') THEN
                                         ERROR(MissingServiceNameErr);
                                       IF (ActionType = ActionType::"Create a copy of an existing data set") AND
                                          ((ServiceNameEdit = '') OR (ServiceNameLookup = ''))
                                       THEN
                                         ERROR(MissingServiceNameErr);
                                       IF (ActionType = ActionType::"Edit an existing data set") AND (ServiceNameLookup = '') THEN
                                         ERROR(MissingServiceNameErr);
                                       IF "Object ID" = 0 THEN
                                         ERROR(MissingObjectIDErr);

                                       CurrPage.UPDATE;
                                       CurrPage.ODataColSubForm.PAGE.InitColumns(ObjectTypeLookup,"Object ID",ActionType,ServiceNameLookup,ServiceNameEdit);
                                       CurrentPage := CurrentPage + 1;
                                     END;
                                 END;

                                 CurrPage.UPDATE(FALSE);
                               END;
                                }
      { 25      ;1   ;Action    ;
                      Name=PublishAction;
                      CaptionML=[ENU=&Publish;
                                 NOR=&Publiser;
                                 SVE=&Publicera];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Enabled=CurrentPage = 4;
                      InFooterBar=Yes;
                      Image=Post;
                      OnAction=BEGIN
                                 IF TempTenantWebServiceColumns.FINDFIRST THEN
                                   TempTenantWebServiceColumns.DELETEALL;
                                 CurrPage.ODataColSubForm.PAGE.GetColumns(TempTenantWebServiceColumns);
                                 IF NOT TempTenantWebServiceColumns.FINDFIRST THEN
                                   ERROR(PublishWithoutFieldsErr);
                                 CopyTempTableToConcreteTable;
                                 oDataUrl := DisplayODataUrl;
                                 AssistedSetup.SetStatus(PAGE::"OData Setup Wizard",AssistedSetup.Status::Completed);
                                 PublishFlag := TRUE;
                                 CurrentPage := CurrentPage + 1;
                                 CurrPage.UPDATE(FALSE);
                               END;
                                }
      { 10      ;1   ;Action    ;
                      Name=FinishAction;
                      CaptionML=[ENU=&Finish;
                                 NOR=&Fullf›r;
                                 SVE=&Slutf”r];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Enabled=CurrentPage = 5;
                      InFooterBar=Yes;
                      Image=Approve;
                      OnAction=BEGIN
                                 CurrPage.CLOSE;
                               END;
                                }
      { 36      ;1   ;Action    ;
                      Name=CreateExcelWorkBook;
                      CaptionML=[ENU=&Excel;
                                 NOR=&Excel;
                                 SVE=&Excel];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Visible=(ExcelVisible = TRUE);
                      Enabled=(CurrentPage = 5);
                      InFooterBar=Yes;
                      OnAction=VAR
                                 ODataUtility@1000 : Codeunit 6710;
                               BEGIN
                                 IF (ActionType = ActionType::"Create a new data set") OR (ActionType = ActionType::"Create a copy of an existing data set") THEN
                                   ODataUtility.GenerateExcelWorkBook(ObjectTypeLookup,ServiceNameEdit,TRUE)
                                 ELSE
                                   ODataUtility.GenerateExcelWorkBook(ObjectTypeLookup,ServiceNameLookup,TRUE);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;    ;Container ;
                Name=Web Service Data Wizard;
                ContainerType=ContentArea }

    { 17  ;1   ;Group     ;
                Visible=TopBannerVisible AND NOT (CurrentPage = 5);
                Editable=False;
                GroupType=Group }

    { 18  ;2   ;Field     ;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=MediaResourcesStandard."Media Reference";
                Editable=FALSE;
                ShowCaption=No }

    { 19  ;1   ;Group     ;
                Visible=TopBannerVisible AND (CurrentPage = 5);
                Editable=False;
                GroupType=Group }

    { 20  ;2   ;Field     ;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=MediaResourcesDone."Media Reference";
                Editable=FALSE;
                ShowCaption=No }

    { 12  ;1   ;Group     ;
                Name=Step1;
                Visible=CurrentPage = 1;
                GroupType=Group;
                InstructionalTextML= }

    { 6   ;2   ;Group     ;
                Name=Para1.1;
                CaptionML=[ENU=Welcome to Reporting Data Setup;
                           NOR=Velkommen til konfigurasjonen av rapporteringsdata;
                           SVE=V„lkommen till Inst„llningar f”r rapporteringsinformation];
                GroupType=Group;
                InstructionalTextML= }

    { 7   ;3   ;Group     ;
                Name=Para1.1.1;
                CaptionML=[ENU="";
                           NOR="";
                           SVE=""];
                GroupType=Group;
                InstructionalTextML=[ENU=You can create data sets that you can use for building reports in Excel, Power BI or any other reporting tool that works with an OData data source.;
                                     NOR=Du kan opprette datasett som du kan bruke til bygging av rapporter i Excel, Power BI eller andre rapporteringsverkt›y som fungerer med en OData-datakilde.;
                                     SVE=Du kan skapa dataupps„ttningar som du kan anv„nda f”r att skapa rapporter i Excel, Power BI eller n†got annat rapportverktyg som fungerar med en OData-datak„lla.] }

    { 29  ;2   ;Group     ;
                Name=Para1.2;
                CaptionML=[ENU=Let's go!;
                           NOR=La oss sette i gang!;
                           SVE=S„tt ig†ng!];
                GroupType=Group }

    { 30  ;3   ;Group     ;
                Name=Para1.2.1;
                CaptionML=[ENU="";
                           NOR="";
                           SVE=""];
                GroupType=Group;
                InstructionalTextML=[ENU=Choose Next so you can create reporting data sets.;
                                     NOR=Velg Neste slik at du kan opprette sett med rapporteringsdata.;
                                     SVE=V„lj N„sta om du vill skapa dataupps„ttningar f”r rapporter.] }

    { 26  ;1   ;Group     ;
                Name=Step2;
                CaptionML=[ENU="";
                           NOR="";
                           SVE=""];
                Visible=CurrentPage = 2;
                GroupType=Group }

    { 4   ;2   ;Group     ;
                Name=Para2.1;
                CaptionML=[ENU=I want to...;
                           NOR=Jeg vil...;
                           SVE=Jag vill...];
                GroupType=Group }

    { 27  ;3   ;Field     ;
                OptionCaptionML=[ENU=Create a new data set,Create a copy of an existing data set,Edit an existing data set;
                                 NOR=Opprett et nytt datasett,Opprett en kopi av et eksisterende datasett,Rediger et eksisterende datasett;
                                 SVE=Skapa en nya dataupps„ttning,Skapa en kopia av en befintlig dataupps„ttning,Redigera en befintlig dataupps„ttning];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ActionType;
                OnValidate=BEGIN
                             "Object ID" := 0;
                             ClearTables;
                             ClearObjectType;
                             ClearName;
                           END;

                ShowCaption=No }

    { 22  ;1   ;Group     ;
                Name=Step3;
                Visible=CurrentPage = 3;
                GroupType=Group;
                InstructionalTextML= }

    { 33  ;2   ;Group     ;
                Name=Para3.1;
                CaptionML=[ENU=Select the data you would like to use for your reports and define a name for this data set.;
                           NOR=Velg dataene du vil bruke i rapportene, og definer et navn for datasettet.;
                           SVE=V„lj den information som du vill anv„nda f”r dina rapporter och definiera ett namn p† dataupps„ttningen.];
                GroupType=Group;
                InstructionalTextML= }

    { 28  ;3   ;Group     ;
                Visible=ActionType > 0;
                GroupType=Group }

    { 13  ;4   ;Field     ;
                Name=NameLookup;
                Lookup=Yes;
                AssistEdit=No;
                CaptionML=[ENU=Name;
                           NOR=Navn;
                           SVE=Namn];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ServiceNameLookup;
                OnValidate=VAR
                             TenantWebService@1000 : Record 2000000168;
                           BEGIN
                             TenantWebService.SETRANGE("Service Name",ServiceNameLookup);
                             IF TenantWebService.FINDFIRST THEN BEGIN
                               "Service Name" := ServiceNameLookup;
                               ObjectTypeLookup := TenantWebService."Object Type";
                               "Object Type" := ObjectTypeLookup;
                               "Object ID" := TenantWebService."Object ID";
                               IF ActionType = ActionType::"Create a copy of an existing data set" THEN BEGIN
                                 "Service Name" := ServiceNameEdit
                               END;
                             END ELSE
                               ERROR(UseLookupErr);
                           END;

                OnLookup=VAR
                           TenantWebService@1000 : Record 2000000168;
                           TenantWebServicesLookup@1002 : Page 6712;
                         BEGIN
                           TenantWebServicesLookup.LOOKUPMODE := TRUE;
                           IF TenantWebServicesLookup.RUNMODAL = ACTION::LookupOK THEN BEGIN
                             TenantWebServicesLookup.GETRECORD(TenantWebService);
                             ServiceNameLookup := TenantWebService."Service Name";
                             ObjectTypeLookup := TenantWebService."Object Type";
                             "Object ID" := TenantWebService."Object ID";
                           END;
                           "Service Name" := ServiceNameLookup;
                           "Object Type" := ObjectTypeLookup;
                           "Object ID" := TenantWebService."Object ID";
                           IF ActionType = ActionType::"Create a copy of an existing data set" THEN BEGIN
                             "Service Name" := ServiceNameEdit
                           END;
                           ClearTables;
                         END;
                          }

    { 32  ;3   ;Group     ;
                Visible=ActionType < 2;
                GroupType=Group }

    { 14  ;4   ;Field     ;
                ExtendedDatatype=None;
                CaptionML=[ENU=New Name;
                           NOR=Nytt navn;
                           SVE=Nytt namn];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ServiceNameEdit;
                OnValidate=VAR
                             TenantWebService@1000 : Record 2000000168;
                           BEGIN
                             "Service Name" := ServiceNameEdit;
                             IF NOT (ActionType = ActionType::"Edit an existing data set") THEN BEGIN
                               TenantWebService.SETRANGE("Service Name","Service Name");
                               IF TenantWebService.FINDFIRST THEN
                                 ERROR(DuplicateServiceNameErr);
                             END;
                           END;
                            }

    { 24  ;3   ;Field     ;
                CaptionML=[ENU=Data Source Type;
                           NOR=Datakildetype;
                           SVE=Dataursprungstyp];
                OptionCaptionML=[ENU=,,,,,,,,Page,Query;
                                 NOR=,,,,,,,,Side,Sp›rring;
                                 SVE=,,,,,,,,Sida,Fr†ga];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ObjectTypeLookup;
                Enabled=ActionType = 0;
                OnValidate=BEGIN
                             "Object Type" := ObjectTypeLookup;
                             IF "Object Type" <> xRec."Object Type" THEN BEGIN
                               ClearTables;
                               "Object ID" := 0;
                             END;
                           END;
                            }

    { 11  ;3   ;Field     ;
                Lookup=Yes;
                CaptionML=[ENU=Data Source Id;
                           NOR=Datakilde-ID;
                           SVE=ID f”r datak„lla];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Object ID";
                Enabled=ActionType = 0;
                OnValidate=VAR
                             AllObjWithCaption@1000 : Record 2000000058;
                           BEGIN
                             IF ObjectTypeLookup = ObjectTypeLookup::Page THEN BEGIN
                               AllObjWithCaption.SETRANGE("Object Type",AllObjWithCaption."Object Type"::Page);
                               AllObjWithCaption.SETRANGE("Object ID","Object ID");
                               IF AllObjWithCaption.FINDFIRST THEN
                                 IF AllObjWithCaption."Object Subtype" <> 'List' THEN
                                   ERROR(InvalidPageTypeErr);
                             END;

                             IF "Object ID" <> xRec."Object ID" THEN
                               ClearTables;
                           END;

                OnLookup=VAR
                           AllObjWithCaption@1000 : Record 2000000058;
                           AllObjectsWithCaption@1001 : Page 9174;
                         BEGIN
                           IF ObjectTypeLookup = "Object Type"::Page THEN BEGIN
                             AllObjWithCaption.SETRANGE("Object Type",AllObjWithCaption."Object Type"::Page);
                             AllObjWithCaption.SETRANGE("Object Subtype",'List')
                           END ELSE
                             IF ObjectTypeLookup = "Object Type"::Query THEN
                               AllObjWithCaption.SETRANGE("Object Type",AllObjWithCaption."Object Type"::Query);

                           AllObjectsWithCaption.SETTABLEVIEW(AllObjWithCaption);

                           AllObjectsWithCaption.LOOKUPMODE := TRUE;
                           IF AllObjectsWithCaption.RUNMODAL = ACTION::LookupOK THEN BEGIN
                             AllObjectsWithCaption.GETRECORD(AllObjWithCaption);
                             IF NOT ((AllObjWithCaption."Object Type" = AllObjWithCaption."Object Type"::Page) OR
                                     (AllObjWithCaption."Object Type" = AllObjWithCaption."Object Type"::Query))
                             THEN
                               ERROR(InvalidObjectTypeErr);
                             IF (AllObjWithCaption."Object Type" = AllObjWithCaption."Object Type"::Page) AND
                                (AllObjWithCaption."Object Subtype" <> 'List')
                             THEN
                               ERROR(InvalidPageTypeErr);
                             "Object ID" := AllObjWithCaption."Object ID";
                             ObjectTypeLookup := AllObjWithCaption."Object Type";

                             IF "Object ID" <> xRec."Object ID" THEN
                               ClearTables;
                           END;
                         END;
                          }

    { 34  ;3   ;Field     ;
                Name=ObjectName;
                CaptionML=[ENU=Data Source Name;
                           NOR=Datakildenavn;
                           SVE=Dataursprungsnamn];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=DisplayObjectName;
                Enabled=False }

    { 2   ;1   ;Group     ;
                Name=Step4;
                CaptionML=[ENU="";
                           NOR="";
                           SVE=""];
                Visible=CurrentPage = 4;
                GroupType=Group }

    { 35  ;2   ;Group     ;
                Name=Para4.1;
                CaptionML=[ENU=Choose the Fields to include in your data set;
                           NOR=Velg feltene som skal inkluderes i datasettet;
                           SVE=V„lj f„lten som ska ing† i dataupps„ttningen];
                GroupType=Group;
                InstructionalTextML=[ENU=Changing fields will clear previously set filters.;
                                     NOR=Endring av felt vil fjerne tidligere angitte filtre.;
                                     SVE=Om du „ndrar f„lten rensas tidigare angivna filter.] }

    { 3   ;3   ;Part      ;
                Name=ODataColSubForm;
                CaptionML=[ENU=" ";
                           NOR=" ";
                           SVE=" "];
                ApplicationArea=#Basic,#Suite;
                PagePartID=Page6710;
                PartType=Page }

    { 31  ;1   ;Group     ;
                Name=Step5;
                Visible=CurrentPage = 5;
                GroupType=Group;
                InstructionalTextML= }

    { 15  ;2   ;Group     ;
                Name=Para5.1;
                CaptionML=[ENU=Success!;
                           NOR=Vellykket!;
                           SVE=Klart!];
                GroupType=Group;
                InstructionalTextML= }

    { 23  ;3   ;Group     ;
                Name=Para5.1.1;
                CaptionML=[ENU="";
                           NOR="";
                           SVE=""];
                GroupType=Group;
                InstructionalTextML=[ENU=Your data set has been successfully created!;
                                     NOR=Datasettet er opprettet!;
                                     SVE=Dataupps„ttningen har skapats!] }

    { 21  ;3   ;Field     ;
                Name=ODataUrl;
                ExtendedDatatype=URL;
                CaptionML=[ENU=OData URL;
                           NOR=OData-URL-adresse;
                           SVE=OData-URL];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=oDataUrl;
                Editable=False }

  }
  CODE
  {
    VAR
      MediaRepositoryStandard@1005 : Record 9400;
      MediaRepositoryDone@1004 : Record 9400;
      MediaResourcesStandard@1026 : Record 2000000182;
      MediaResourcesDone@1025 : Record 2000000182;
      TempTenantWebServiceColumns@1001 : TEMPORARY Record 6711;
      TempTenantWebServiceFilter@1003 : TEMPORARY Record 6712;
      AssistedSetup@1020 : Record 1803;
      ClientTypeManagement@1077 : Codeunit 4030;
      CurrentPage@1000 : Integer;
      PublishFlag@1002 : Boolean;
      TopBannerVisible@1006 : Boolean;
      MissingServiceNameErr@1007 : TextConst 'ENU=Please enter a Name for the data set.;NOR=Angi et navn for datasettet.;SVE=Ange ett namn p† dataupps„ttningen.';
      MissingObjectIDErr@1008 : TextConst 'ENU=Please enter a data source for the data set.;NOR=Angi en datakilde for datasettet.;SVE=Ange en datak„lla f”r dataupps„ttningen.';
      DuplicateServiceNameErr@1009 : TextConst 'ENU=This name already exists.;NOR=Navnet finnes allerede.;SVE=Det h„r namnet finns redan.';
      ChangeFields@1015 : Boolean;
      ActionType@1011 : 'Create a new data set,Create a copy of an existing data set,Edit an existing data set';
      ServiceNameLookup@1010 : Text[240];
      ServiceNameEdit@1012 : Text[240];
      ObjectTypeLookup@1013 : ',,,,,,,,Page,Query';
      UseLookupErr@1014 : TextConst 'ENU=Use the lookup to select existing name.;NOR=Bruk oppslag for † velge eksisterende navn.;SVE=Anv„nd s”kfunktionen f”r att v„lja ett befintligt namn.';
      oDataUrl@1016 : Text;
      MissingFieldsErr@1017 : TextConst 'ENU=Please select field(s) before adding a filter.;NOR=Velg felt f›r du legger til et filter.;SVE=V„lj f„lt innan du l„gger till ett filter.';
      InvalidPageTypeErr@1018 : TextConst 'ENU=Invalid page Id. Only pages of type List are valid.;NOR=Ugyldig side-ID. Bare sider av typen Lister er gyldig.;SVE=Ogiltigt sid-ID. Endast sidor av typen Lista „r giltiga.';
      InvalidObjectTypeErr@1019 : TextConst 'ENU=Only objects of type page and query are allowed.;NOR=Bare objekter av typen side og sp›rring er tillatt.;SVE=Endast objekt av typen sida och fr†ga till†ts.';
      NAVNotSetUpQst@1021 : TextConst 'ENU=The data set has not been set up.\Are you sure you want to exit?;NOR=Datasettet er ikke konfigurert.\Er du sikker p† at du vil avslutte?;SVE=Dataupps„ttningen har inte konfigurerats.\Vill du avsluta?';
      PublishWithoutFieldsErr@1022 : TextConst 'ENU=Please select field(s) before publishing the data set.;NOR=Velg felt f›r du publiserer datasettet.;SVE=V„lj f„lt innan du l„gger publicerar dataupps„ttningen.';
      PermissionsErr@1023 : TextConst 'ENU=You do not have permissions to run this wizard.;NOR=Du har ikke tillatelser til † kj›re veiviseren.;SVE=Du har inte beh”righet att k”ra den h„r guiden.';
      ExcelVisible@1024 : Boolean;

    LOCAL PROCEDURE GetFilterText@2(VAR TempTenantWebServiceColumns@1016 : TEMPORARY Record 6711) : Boolean;
    VAR
      AllObjWithCaption@1001 : Record 2000000058;
      ODataUtility@1018 : Codeunit 6710;
      FieldRef@1012 : FieldRef;
      RecRef@1011 : RecordRef;
      FilterPage@1010 : FilterPageBuilder;
      DataItemDictionary@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.Dictionary`2";
      keyValuePair@1006 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.KeyValuePair`2";
      ColumnList@1017 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1";
      OldTableNo@1014 : Integer;
      FieldNo@1013 : Integer;
      FilterText@1004 : Text;
      FilterTextTemp@1007 : Text;
      FilterTextSource@1009 : Text;
    BEGIN
      IF TempTenantWebServiceColumns.FINDFIRST THEN
        DataItemDictionary := DataItemDictionary.Dictionary;
      REPEAT
        IF OldTableNo <> TempTenantWebServiceColumns."Data Item" THEN BEGIN
          AllObjWithCaption.SETRANGE("Object ID",TempTenantWebServiceColumns."Data Item");
          AllObjWithCaption.SETRANGE("Object Type",AllObjWithCaption."Object Type"::Table);
          IF AllObjWithCaption.FINDFIRST THEN BEGIN
            FilterPage.ADDTABLE(AllObjWithCaption."Object Caption",TempTenantWebServiceColumns."Data Item");

            IF NOT DataItemDictionary.ContainsKey(AllObjWithCaption."Object ID") THEN
              DataItemDictionary.Add(AllObjWithCaption."Object ID",AllObjWithCaption."Object Caption");
          END;
        END;

        OldTableNo := TempTenantWebServiceColumns."Data Item";
      UNTIL TempTenantWebServiceColumns.NEXT = 0;

      FOREACH keyValuePair IN DataItemDictionary DO BEGIN
        FilterText := '';
        FilterTextTemp := '';
        TempTenantWebServiceFilter.INIT;
        TempTenantWebServiceFilter.SETRANGE(TenantWebServiceID,RECORDID);
        TempTenantWebServiceFilter.SETRANGE("Data Item",keyValuePair.Key);

        IF TempTenantWebServiceFilter.FIND('-') THEN
          FilterTextTemp := TempTenantWebServiceFilter.GetFilter;

        IF (ActionType = ActionType::"Create a copy of an existing data set") OR
           (ActionType = ActionType::"Edit an existing data set")
        THEN
          GetSourceFilterText(keyValuePair.Key,FilterTextSource);

        IF (FilterTextSource <> '') AND (FilterTextTemp = '') AND (NOT ChangeFields) THEN
          FilterPage.SETVIEW(keyValuePair.Value,FilterTextSource)
        ELSE
          IF FilterTextTemp <> '' THEN
            FilterPage.SETVIEW(keyValuePair.Value,FilterTextTemp);
      END;

      OldTableNo := 0;
      IF TempTenantWebServiceColumns.FINDFIRST THEN
        REPEAT
          IF OldTableNo <> TempTenantWebServiceColumns."Data Item" THEN BEGIN
            ColumnList := ColumnList.List;
            TempTenantWebServiceFilter.INIT;
            TempTenantWebServiceFilter.SETRANGE("Data Item",TempTenantWebServiceColumns."Data Item");

            IF TempTenantWebServiceFilter.FIND('-') THEN
              FilterTextTemp := TempTenantWebServiceFilter.GetFilter;

            IF (ActionType = ActionType::"Create a copy of an existing data set") OR
               (ActionType = ActionType::"Edit an existing data set")
            THEN
              GetSourceFilterText(TempTenantWebServiceColumns."Data Item",FilterTextSource);

            IF (FilterTextSource <> '') AND (FilterTextTemp = '') AND (NOT ChangeFields) THEN
              ODataUtility.GetColumnsFromFilter(Rec,FilterTextSource,ColumnList)
            ELSE
              IF FilterTextTemp <> '' THEN
                ODataUtility.GetColumnsFromFilter(Rec,FilterTextTemp,ColumnList);
          END;
          OldTableNo := TempTenantWebServiceColumns."Data Item";

          FieldNo := TempTenantWebServiceColumns."Field Number";
          AllObjWithCaption.SETRANGE("Object ID",TempTenantWebServiceColumns."Data Item");
          AllObjWithCaption.SETRANGE("Object Type",AllObjWithCaption."Object Type"::Table);
          IF AllObjWithCaption.FINDFIRST THEN BEGIN
            CLEAR(RecRef);
            RecRef.OPEN(AllObjWithCaption."Object ID");
            FieldRef := RecRef.FIELD(FieldNo);
            IF NOT ColumnList.Contains(FieldRef.NAME) THEN
              FilterPage.ADDFIELD(AllObjWithCaption."Object Caption",FieldRef);
          END;
        UNTIL TempTenantWebServiceColumns.NEXT = 0;

      IF FilterPage.RUNMODAL THEN BEGIN
        CLEAR(TempTenantWebServiceFilter);
        TempTenantWebServiceFilter.DELETEALL;
        FOREACH keyValuePair IN DataItemDictionary DO BEGIN
          CLEAR(TempTenantWebServiceFilter);
          FilterText := FilterPage.GETVIEW(keyValuePair.Value,TRUE);
          TempTenantWebServiceFilter.INIT;
          TempTenantWebServiceFilter."Data Item" := keyValuePair.Key;
          TempTenantWebServiceFilter.TenantWebServiceID := RECORDID;
          TempTenantWebServiceFilter.SetFilter(FilterText);
          REPEAT
            TempTenantWebServiceFilter."Entry ID" := TempTenantWebServiceFilter."Entry ID" + 1;
          UNTIL TempTenantWebServiceFilter.INSERT(TRUE);
        END;
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE LoadTopBanners@1();
    BEGIN
      IF MediaRepositoryStandard.GET('AssistedSetup-NoText-400px.png',FORMAT(ClientTypeManagement.GetCurrentClientType)) AND
         MediaRepositoryDone.GET('AssistedSetupDone-NoText-400px.png',FORMAT(ClientTypeManagement.GetCurrentClientType))
      THEN
        IF MediaResourcesStandard.GET(MediaRepositoryStandard."Media Resources Ref") AND
           MediaResourcesDone.GET(MediaRepositoryDone."Media Resources Ref")
        THEN
          TopBannerVisible := MediaResourcesDone."Media Reference".HASVALUE;
    END;

    LOCAL PROCEDURE DisplayODataUrl@3() : Text;
    VAR
      TenantWebService@1001 : Record 2000000168;
      ODataUtility@1004 : Codeunit 6710;
      ODataServiceRootUrl@1002 : Text;
      ODataUrl@1003 : Text;
      ObjectTypeParam@1000 : ',,,,,,,,Page,Query';
    BEGIN
      CLEAR(TenantWebService);
      TenantWebService.INIT;
      TenantWebService.VALIDATE("Object Type","Object Type");
      TenantWebService.VALIDATE("Object ID","Object ID");
      IF (ActionType = ActionType::"Create a new data set") OR (ActionType = ActionType::"Create a copy of an existing data set") THEN
        TenantWebService.VALIDATE("Service Name",ServiceNameEdit)
      ELSE
        TenantWebService.VALIDATE("Service Name",ServiceNameLookup);

      TenantWebService.VALIDATE(Published,TRUE);
      IF "Object Type" = "Object Type"::Query THEN BEGIN
        ODataServiceRootUrl := GETURL(CLIENTTYPE::ODataV4,COMPANYNAME,OBJECTTYPE::Query,"Object ID",TenantWebService);
        ODataUrl := ODataUtility.GenerateODataV4Url(ODataServiceRootUrl,TenantWebService."Service Name",ObjectTypeParam::Query);
        EXIT(ODataUrl);
      END;
      IF "Object Type" = "Object Type"::Page THEN BEGIN
        ODataServiceRootUrl := GETURL(CLIENTTYPE::ODataV4,COMPANYNAME,OBJECTTYPE::Page,"Object ID",TenantWebService);
        ODataUrl := ODataUtility.GenerateODataV4Url(ODataServiceRootUrl,TenantWebService."Service Name",ObjectTypeParam::Page);
        EXIT(ODataUrl);
      END;
    END;

    LOCAL PROCEDURE CopyTempTableToConcreteTable@5();
    VAR
      TenantWebServiceColumns@1002 : Record 6711;
      TenantWebServiceFilter@1001 : Record 6712;
      TenantWebService@1000 : Record 2000000168;
      TenantWebServiceOData@1003 : Record 6710;
      SourceTenantWebServiceFilter@1007 : Record 6712;
      SourceTenantWebService@1008 : Record 2000000168;
      ODataUtility@1004 : Codeunit 6710;
      SelectText@1005 : Text;
      ODataV3FilterText@1006 : Text;
      ODataV4FilterText@1009 : Text;
    BEGIN
      TenantWebService.INIT;
      TenantWebService.VALIDATE("Object Type",ObjectTypeLookup);
      TenantWebService.VALIDATE("Object ID","Object ID");
      TenantWebService.VALIDATE(Published,TRUE);
      IF (ActionType = ActionType::"Create a new data set") OR
         (ActionType = ActionType::"Create a copy of an existing data set")
      THEN BEGIN
        TenantWebService.VALIDATE("Service Name",ServiceNameEdit);
        TenantWebService.INSERT(TRUE)
      END ELSE BEGIN
        TenantWebService.VALIDATE("Service Name",ServiceNameLookup);
        TenantWebService.MODIFY(TRUE);
      END;

      IF TempTenantWebServiceColumns.FINDFIRST THEN BEGIN
        IF ActionType = ActionType::"Edit an existing data set" THEN BEGIN
          TenantWebServiceColumns.INIT;
          TenantWebServiceColumns.SETRANGE(TenantWebServiceID,TenantWebService.RECORDID);
          TenantWebServiceColumns.DELETEALL;
        END;

        REPEAT
          TenantWebServiceColumns.TRANSFERFIELDS(TempTenantWebServiceColumns,TRUE);
          TenantWebServiceColumns."Entry ID" := 0;
          TenantWebServiceColumns.TenantWebServiceID := TenantWebService.RECORDID;
          TenantWebServiceColumns.INSERT(TRUE);
        UNTIL TempTenantWebServiceColumns.NEXT = 0;
      END;

      IF TempTenantWebServiceFilter.FIND('-') THEN BEGIN
        IF ActionType = ActionType::"Edit an existing data set" THEN BEGIN
          TenantWebServiceFilter.INIT;
          TenantWebServiceFilter.SETRANGE(TenantWebServiceID,TenantWebService.RECORDID);
          TenantWebServiceFilter.DELETEALL;
        END;
        REPEAT
          TempTenantWebServiceFilter.CALCFIELDS(Filter);
          TenantWebServiceFilter.TRANSFERFIELDS(TempTenantWebServiceFilter,TRUE);
          TenantWebServiceFilter."Entry ID" := 0;

          TenantWebServiceFilter.TenantWebServiceID := TenantWebService.RECORDID;

          TenantWebServiceFilter.INSERT(TRUE);
        UNTIL TempTenantWebServiceFilter.NEXT = 0;
      END ELSE
        IF ActionType = ActionType::"Create a copy of an existing data set" THEN
          IF SourceTenantWebService.GET(ObjectTypeLookup,ServiceNameLookup) THEN BEGIN
            SourceTenantWebServiceFilter.SETRANGE(TenantWebServiceID,SourceTenantWebService.RECORDID);
            IF SourceTenantWebServiceFilter.FINDSET THEN
              REPEAT
                SourceTenantWebServiceFilter.CALCFIELDS(Filter);
                TenantWebServiceFilter.TRANSFERFIELDS(SourceTenantWebServiceFilter,TRUE);
                TenantWebServiceFilter."Entry ID" := 0;

                TenantWebServiceFilter.TenantWebServiceID := TenantWebService.RECORDID;

                TenantWebServiceFilter.INSERT(TRUE);
              UNTIL SourceTenantWebServiceFilter.NEXT = 0;
          END;

      IF (ActionType = ActionType::"Create a new data set") OR
         (ActionType = ActionType::"Create a copy of an existing data set")
      THEN BEGIN
        TenantWebServiceOData.VALIDATE(TenantWebServiceID,TenantWebService.RECORDID);
        ODataUtility.GenerateSelectText(ServiceNameEdit,ObjectTypeLookup,SelectText);
        ODataUtility.GenerateODataV3FilterText(ServiceNameEdit,ObjectTypeLookup,ODataV3FilterText);
        ODataUtility.GenerateODataV4FilterText(ServiceNameEdit,ObjectTypeLookup,ODataV4FilterText);
        TenantWebServiceOData.SetOdataSelectClause(SelectText);
        TenantWebServiceOData.SetOdataFilterClause(ODataV3FilterText);
        TenantWebServiceOData.SetOdataV4FilterClause(ODataV4FilterText);
        TenantWebServiceOData.INSERT(TRUE)
      END ELSE BEGIN
        TenantWebServiceOData.VALIDATE(TenantWebServiceID,TenantWebService.RECORDID);
        ODataUtility.GenerateSelectText(ServiceNameLookup,ObjectTypeLookup,SelectText);
        ODataUtility.GenerateODataV3FilterText(ServiceNameLookup,ObjectTypeLookup,ODataV3FilterText);
        ODataUtility.GenerateODataV4FilterText(ServiceNameLookup,ObjectTypeLookup,ODataV4FilterText);
        TenantWebServiceOData.SetOdataSelectClause(SelectText);
        TenantWebServiceOData.SetOdataFilterClause(ODataV3FilterText);
        TenantWebServiceOData.SetOdataV4FilterClause(ODataV4FilterText);
        TenantWebServiceOData.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE GetSourceFilterText@4(DataItem@1000 : Integer;VAR FilterTextParam@1003 : Text);
    VAR
      TenantWebService@1001 : Record 2000000168;
      TenantWebServiceFilter@1002 : Record 6712;
    BEGIN
      TenantWebService.INIT;
      TenantWebService.SETRANGE("Object Type","Object Type");

      IF ActionType = ActionType::"Create a copy of an existing data set" THEN
        TenantWebService.SETRANGE("Service Name",ServiceNameLookup)
      ELSE
        TenantWebService.SETRANGE("Service Name","Service Name");

      IF TenantWebService.FINDFIRST THEN BEGIN
        TenantWebServiceFilter.INIT;
        TenantWebServiceFilter.SETRANGE(TenantWebServiceID,TenantWebService.RECORDID);
        TenantWebServiceFilter.SETRANGE("Data Item",DataItem);
        IF TenantWebServiceFilter.FINDFIRST THEN
          FilterTextParam := TenantWebServiceFilter.GetFilter;
      END;
    END;

    LOCAL PROCEDURE ClearTables@12();
    BEGIN
      CurrPage.ODataColSubForm.PAGE.DeleteColumns;
      TempTenantWebServiceColumns.DELETEALL;
      TempTenantWebServiceFilter.DELETEALL;
    END;

    LOCAL PROCEDURE ClearObjectType@16();
    BEGIN
      "Object Type" := "Object Type"::Page;
      ObjectTypeLookup := ObjectTypeLookup::Page;
    END;

    LOCAL PROCEDURE ClearName@18();
    BEGIN
      "Service Name" := '';
      ServiceNameEdit := '';
      CLEAR(ServiceNameLookup);
    END;

    LOCAL PROCEDURE DisplayObjectName@6() : Text;
    VAR
      AllObjWithCaption@1000 : Record 2000000058;
    BEGIN
      AllObjWithCaption.SETRANGE("Object Type","Object Type");
      AllObjWithCaption.SETRANGE("Object ID","Object ID");
      IF AllObjWithCaption.FINDFIRST THEN
        EXIT(AllObjWithCaption."Object Name");
    END;

    LOCAL PROCEDURE CheckPermissions@7();
    VAR
      TenantWebService@1000 : Record 2000000168;
      TenantWebServiceOData@1001 : Record 6710;
      TenantWebServiceColumns@1002 : Record 6711;
      TenantWebServiceFilter@1003 : Record 6712;
    BEGIN
      IF NOT TenantWebService.WRITEPERMISSION THEN
        ERROR(PermissionsErr);

      IF NOT TenantWebService.READPERMISSION THEN
        ERROR(PermissionsErr);

      IF NOT TempTenantWebServiceColumns.WRITEPERMISSION THEN
        ERROR(PermissionsErr);

      IF NOT TenantWebServiceColumns.READPERMISSION THEN
        ERROR(PermissionsErr);

      IF NOT TenantWebServiceFilter.WRITEPERMISSION THEN
        ERROR(PermissionsErr);

      IF NOT TenantWebServiceFilter.READPERMISSION THEN
        ERROR(PermissionsErr);

      IF NOT TenantWebServiceOData.WRITEPERMISSION THEN
        ERROR(PermissionsErr);

      IF NOT TenantWebServiceOData.READPERMISSION THEN
        ERROR(PermissionsErr);
    END;

    [External]
    PROCEDURE EditInExcelVisible@8();
    BEGIN
      IF ClientTypeManagement.GetCurrentClientType = CLIENTTYPE::Web THEN
        ExcelVisible := TRUE;
    END;

    BEGIN
    END.
  }
}

