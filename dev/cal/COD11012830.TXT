OBJECT Codeunit 11012830 Lab Order Webservice
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1100525000 : TextConst 'DEU=Die Webservice zeigte die folgende Nachricht:\\%1;ENU=The Web Service returned the following message:\\%1;NLD=De webservice gaf de volgende boodschap:\\%1;NOR=Webtjenesten sendte f›lgende beskjed i retur:\\%1;SVE=Webbtj„nsten returnerade f”ljande meddelande:\\%1';
      LabOrderSetup@1100525003 : Record 11071953;
      HttpWebRequest@1100525001 : DotNet "'System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebRequest";
      Ord@1100525005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      Sam@1100525006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      Text001@1100525004 : TextConst 'DEU=Die Anfrage ist f„llig.;ENU=The request timed out.;NLD=Het verzoek is verlopen.;NOR=Tidsavbrudd for foresp›rsel;SVE=Tidsgr„nsen f”r beg„ran uppn†ddes.';
      FileMgt@1100525500 : Codeunit 419;
      LabOrderSetupRead@1100525002 : Boolean;
      Text002@1100525007 : TextConst 'DEU=Leerer Respons vom Labor empfangen.;ENU=Empty response received from the lab.;NLD=Lege respons van het lab ontvangen.;NOR=Tomt svar mottatt fra lab.;SVE=Tomt svar mottaget fr†n labbet.';
      Debug@1100409000 : Boolean;

    PROCEDURE GetOrders@1100525000(StartDate@1100525002 : Date;EndDate@1100525003 : Date;VAR Response@1100525004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      StartDateText@1100525000 : Text[8];
      EndDateText@1100525001 : Text[8];
      PlainResponse@1100528600 : Text;
    BEGIN
      StartDateText := FORMAT(StartDate, 0, '<Year4><Month,2><Day,2>');
      EndDateText := FORMAT(EndDate, 0, '<Year4><Month,2><Day,2>');
      SendRequest(STRSUBSTNO('service=PERIODE_ORDERS&StartDate=%1&EndDate=%2', StartDateText, EndDateText), PlainResponse);
      TestResponseText(PlainResponse);
      ConvertPlaintResponseToXMLDocument(PlainResponse, Response);
      RemoveSchema(Response);
    END;

    PROCEDURE GetInvoices@1100525010(StartDate@1100525000 : Date;EndDate@1100525001 : Date;VAR Response@1100525002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      StartDateText@1100525004 : Text[8];
      EndDateText@1100525003 : Text[8];
      PlainResponse@1100528600 : Text;
    BEGIN
      StartDateText := FORMAT(StartDate, 0, '<Year4><Month,2><Day,2>');
      EndDateText := FORMAT(EndDate, 0, '<Year4><Month,2><Day,2>');
      SendRequest(STRSUBSTNO('service=INVOICES_PERIODE&StartDate=%1&EndDate=%2', StartDateText, EndDateText), PlainResponse);
      TestResponseText(PlainResponse);
      ConvertPlaintResponseToXMLDocument(PlainResponse, Response);
    END;

    PROCEDURE GetCertificate@1100525007(OrderNo@1100525001 : Code[20];FileName@1100525000 : Text[260]);
    VAR
      OutputStream@1100525005 : OutStream;
      OutputFile@1100525004 : File;
      Buffer@1100525003 : BigText;
      ServerTempFileName@1100525500 : Text[1024];
      PlainResponse@1100528600 : Text;
    BEGIN
      SendRequest(STRSUBSTNO('service=ORDER_PDF&ProjectCode=%1', OrderNo), PlainResponse);
      TestResponseText(PlainResponse);

      OutputFile.TEXTMODE := FALSE;
      OutputFile.WRITEMODE := TRUE;

      ServerTempFileName := FileMgt.ServerTempFileName('txt');
      OutputFile.CREATE(ServerTempFileName);
      OutputFile.CREATEOUTSTREAM(OutputStream);

      Buffer.ADDTEXT(PlainResponse);
      Buffer.WRITE(OutputStream);

      OutputFile.CLOSE;

      FileMgt.DownloadToFile(
        ServerTempFileName, FileName);
      ERASE(ServerTempFileName);
    END;

    PROCEDURE GetInvoice@1100525014(OrderNo@1100525000 : Code[20];FileName@1100525001 : Text[260]);
    VAR
      OutputFile@1100525002 : File;
      OutputStream@1100525003 : OutStream;
      Buffer@1100525004 : BigText;
      ServerTempFileName@1100525500 : Text[1024];
      PlainResponse@1100528600 : Text;
    BEGIN
      SendRequest(STRSUBSTNO('service=INVOICE_PDF&Ordernumber=%1', OrderNo), PlainResponse);
      TestResponseText(PlainResponse);

      OutputFile.TEXTMODE := FALSE;
      OutputFile.WRITEMODE := TRUE;
      ServerTempFileName := FileMgt.ServerTempFileName('txt');
      OutputFile.CREATE(ServerTempFileName);
      OutputFile.CREATEOUTSTREAM(OutputStream);

      Buffer.ADDTEXT(PlainResponse);
      Buffer.WRITE(OutputStream);

      OutputFile.CLOSE;

      FileMgt.DownloadToFile(
        ServerTempFileName, FileName);
      ERASE(ServerTempFileName);
    END;

    PROCEDURE GetOrderResults@1100525012(OrderNo@1100525001 : Code[20];VAR Response@1100525000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      PlainResponse@1100528600 : Text;
    BEGIN
      SendRequest(STRSUBSTNO('service=ORDER_RESULTS&ProjectCode=%1', OrderNo), PlainResponse);
      TestResponseText(PlainResponse);
      ConvertPlaintResponseToXMLDocument(PlainResponse, Response);
      RemoveSchema(Response);
    END;

    PROCEDURE PrepareNewOrder@1100525001(OrderID@1100525001 : Code[20];CustCode@1100525009 : Code[4];Contact@1100525010 : Text[80];ProjectCode@1100525011 : Code[20];ProjectDescription@1100525012 : Text[250];InvoiceReference@1100525013 : Text[80];OrderComments@1100525014 : Text[250];StartDate@1100525015 : Date;Priority@1100525016 : Text[30]);
    VAR
      NewOrder@1100525000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      Order@1100525002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      Element@1100525005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
    BEGIN
      NewOrder := NewOrder.XmlDocument;
      AppendProcessingInstruction(NewOrder, 'xml', 'version="1.0" encoding="Windows-1252"');
      AppendElement(NewOrder, NewOrder, 'order', '', Order);
      AppendElement(NewOrder, Order, 'ord', '', Ord);
      AppendElement(NewOrder, Ord, 'order_id', FORMAT(OrderID), Element);
      AppendElement(NewOrder, Ord, 'cus', CustCode, Element);
      AppendElement(NewOrder, Ord, 'contact', Contact, Element);
      AppendElement(NewOrder, Ord, 'proj', ProjectCode, Element);
      AppendElement(NewOrder, Ord, 'projd', ProjectDescription, Element);
      AppendElement(NewOrder, Ord, 'inv', InvoiceReference, Element);
      AppendElement(NewOrder, Ord, 'opm', OrderComments, Element);
      AppendElement(NewOrder, Ord, 'start', FORMAT(StartDate, 0, '<Year4><Month,2><Day,2>'), Element);
      AppendElement(NewOrder, Ord, 'shelf', '0', Element);
      AppendElement(NewOrder, Ord, 'urg', Priority, Element);
      AppendElement(NewOrder, Ord, 'deliv', '2', Element);
    END;

    PROCEDURE AppendSample@1100525006(SampleNo@1100525001 : Code[20];SampleDescription@1100525003 : Text[250];SampleDescription2@1100525004 : Text[250];FeatureCode@1100409000 : Code[10]);
    VAR
      Element@1100525002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
    BEGIN
      AppendElement(Ord.OwnerDocument, Ord, 'sam', '', Sam);
      AppendElement(Ord.OwnerDocument, Sam, 'samid', SampleNo, Element);
      AppendElement(Ord.OwnerDocument, Sam, 'descr', SampleDescription, Element);
      AppendElement(Ord.OwnerDocument, Sam, 'descr2', SampleDescription2, Element);
      AppendElement(Ord.OwnerDocument, Sam, 'numbcont', '1', Element);
      AppendElement(Ord.OwnerDocument, Sam, 'type', FeatureCode, Element);
    END;

    PROCEDURE AppendAnalysis@1100525045(AnalysisCode@1100525000 : Code[10]);
    VAR
      Ana@1100525002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      Element@1100525001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
    BEGIN
      AppendElement(Sam.OwnerDocument, Sam, 'ana', '', Ana);
      AppendElement(Sam.OwnerDocument, Ana, 'anaid', AnalysisCode, Element);
    END;

    PROCEDURE SubmitNewOrder@1100525005(SendToLab@1100525003 : Boolean) : Boolean;
    VAR
      Response@1100528601 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      ErrorElement@1100525001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      MessageElement@1100525004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      ErrorText@1100525002 : Text[1024];
      PlainResponse@1100528600 : Text;
    BEGIN
      //Debug := TRUE;

      IF Debug THEN
        Ord.OwnerDocument.Save('D:\LabOrderRequest.xml'); //For debugging purposes

      SendRequestWithBody(
        STRSUBSTNO(
          'service=ORDER_NEW&SendToLab=%1&XMLResponse=%2',
          FormatBoolean(SendToLab),
          FormatBoolean(TRUE)),
        Ord.OwnerDocument, PlainResponse);

      ConvertPlaintResponseToXMLDocument(PlainResponse, Response);

      IF Debug THEN
        Response.Save('D:\LabOrderResponse.xml'); //For debugging purposes

      ErrorElement := Response.DocumentElement.SelectSingleNode('qerrorxml');
      IF NOT ISNULL(ErrorElement) THEN BEGIN
        ErrorText := ErrorElement.SelectSingleNode('errortext').Value;
        ERROR(ErrorText);
      END;

      MessageElement := Response.DocumentElement.SelectSingleNode('qmessage');

      IF ISNULL(MessageElement) THEN BEGIN
        MESSAGE(Text002);
        EXIT(FALSE);
      END;

      EXIT(MessageElement.SelectSingleNode('portalid').Value <> '');
    END;

    LOCAL PROCEDURE SendRequest@1100525003(QueryString@1100525001 : Text[1024];VAR PlainResponse@1100528602 : Text);
    VAR
      HttpWebRequest@1100528601 : DotNet "'System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebRequest";
      HttpWebResponse@1100528600 : DotNet "'System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebResponse";
      MemoryStream@1100528603 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
      StreamReader@1100528604 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StreamReader";
    BEGIN
      HttpWebRequest := HttpWebRequest.Create(BuildRequestUrl(QueryString));
      HttpWebResponse := HttpWebRequest.GetResponse;
      IF NOT ISNULL(HttpWebResponse) THEN BEGIN
        MemoryStream := HttpWebResponse.GetResponseStream;
        StreamReader := StreamReader.StreamReader(MemoryStream);
        PlainResponse := StreamReader.ReadToEnd;
        MemoryStream.Flush;
        MemoryStream.Close;
      END ELSE
        HttpWebResponse := HttpWebResponse.HttpWebResponse;

      IF (HttpWebResponse.StatusCode >= 400) AND (HttpWebResponse.StatusCode < 500) THEN
        ERROR(Text000, HttpWebResponse.StatusCode);
    END;

    PROCEDURE SendRequestWithBody@1100525011(QueryString@1100525000 : Text[1024];Body@1100525001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR PlainResponse@1100528602 : Text);
    VAR
      HttpWebRequest@1100528601 : DotNet "'System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebRequest";
      HttpWebResponse@1100528600 : DotNet "'System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebResponse";
      MemoryStream@1100528603 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
      StreamReader@1100528605 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StreamReader";
    BEGIN
      HttpWebRequest := HttpWebRequest.Create(BuildRequestUrl(QueryString));
      HttpWebRequest.Method := 'POST';
      HttpWebRequest.ContentType := 'text/xml';
      MemoryStream := HttpWebRequest.GetRequestStream;
      Body.Save(MemoryStream);
      MemoryStream.Flush;
      MemoryStream.Close;

      HttpWebResponse := HttpWebRequest.GetResponse;
      IF NOT ISNULL(HttpWebResponse) THEN BEGIN
        MemoryStream := HttpWebResponse.GetResponseStream;
        StreamReader := StreamReader.StreamReader(MemoryStream);
        PlainResponse := StreamReader.ReadToEnd;
        MemoryStream.Flush;
        MemoryStream.Close;
      END ELSE
        HttpWebResponse := HttpWebResponse.HttpWebResponse;

      IF (HttpWebResponse.StatusCode >= 400) AND (HttpWebResponse.StatusCode < 500) THEN
        ERROR(Text000, HttpWebResponse.StatusCode);
    END;

    LOCAL PROCEDURE RemoveSchema@1100525008(Response@1100525000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      Schema@1100525001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
    BEGIN
      Schema := Response.DocumentElement.SelectSingleNode('*[@id="VFPData"]');
      Schema.ParentNode.RemoveChild(Schema);
    END;

    LOCAL PROCEDURE AppendElement@1100525025(Document@1100525000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";ParentNode@1100525001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";Name@1100525002 : Text[80];Value@1100525003 : Text[1024];VAR Element@1100525004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement");
    VAR
      TextNode@1100525005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlText";
    BEGIN
      Element := Document.CreateElement(Name);
      ParentNode.AppendChild(Element);

      IF Value <> '' THEN BEGIN
        TextNode := Document.CreateTextNode(Value);
        Element.AppendChild(TextNode);
      END;
    END;

    LOCAL PROCEDURE AppendProcessingInstruction@1100525015(DOMDocument@1100525002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";Target@1100525000 : Text[1024];Data@1100525001 : Text[1024]);
    VAR
      ProcessingInstruction@1100525003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlProcessingInstruction";
    BEGIN
      ProcessingInstruction := DOMDocument.CreateProcessingInstruction(Target, Data);
      DOMDocument.AppendChild(ProcessingInstruction);
    END;

    LOCAL PROCEDURE TestResponseText@1100525013(PlainResponse@1100528600 : Text);
    BEGIN
      CASE TRUE OF
        StartsWith(PlainResponse, 'error:', TRUE):
          ERROR(Text000, PlainResponse);
        StartsWith(PlainResponse, 'ok:', TRUE):
          MESSAGE(Text000, PlainResponse);
      END;
    END;

    LOCAL PROCEDURE BuildRequestUrl@1100525020(QueryString@1100525000 : Text[1024]) : Text[1024];
    BEGIN
      ReadLabOrderSetup;

      EXIT(
        STRSUBSTNO('%1?Username=%2&Password=%3&%4',
          LabOrderSetup."Lab URL",
          LabOrderSetup."Lab User Name",
          LabOrderSetup."Lab Password",
          QueryString));
    END;

    PROCEDURE Completed@1100525019() : Integer;
    BEGIN
      EXIT(4);
    END;

    LOCAL PROCEDURE StartsWith@1100525002(Text@1100525000 : Text[1024];StartsWith@1100525001 : Text[1024];IgnoreCase@1100525002 : Boolean) : Boolean;
    BEGIN
      IF IgnoreCase THEN BEGIN
        Text := UPPERCASE(Text);
        StartsWith := UPPERCASE(StartsWith);
      END;

      EXIT(COPYSTR(Text, 1, STRLEN(StartsWith)) = StartsWith);
    END;

    PROCEDURE FormatBoolean@1100525004(Boolean@1100525000 : Boolean) : Text[10];
    BEGIN
      CASE Boolean OF
        TRUE: EXIT('TRUE');
        FALSE: EXIT('FALSE');
      END;
    END;

    PROCEDURE ReadLabOrderSetup@1100525009();
    BEGIN
      IF NOT LabOrderSetupRead THEN BEGIN
        LabOrderSetupRead := LabOrderSetup.GET;

        LabOrderSetup.TESTFIELD("Lab URL");
        LabOrderSetup.TESTFIELD("Lab User Name");
        LabOrderSetup.TESTFIELD("Lab Password");
      END;
    END;

    LOCAL PROCEDURE ConvertPlaintResponseToXMLDocument@1100528600(PlainResponse@1100528600 : Text;VAR XmlDocument@1100528601 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    BEGIN
      IF ISNULL(XmlDocument) THEN
        XmlDocument := XmlDocument.XmlDocument;
      XmlDocument.LoadXml(PlainResponse);
    END;

    BEGIN
    {
      In this codeunit xml automation variables are still used, because it is difficult to test test this functionality
      after conversion to xml dotnet variables. The automation variables are used on the client and no events are used,
      so it should not be a problem to use automation here.
    }
    END.
  }
}

