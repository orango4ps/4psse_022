OBJECT Codeunit 11012890 Parse CUF XML-Doc. Serv
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      XMLDOMMgt@1100485001 : Codeunit 11020220;
      Text001@1100525010 : TextConst 'DEU=Kostenart %1 stimmt nicht Åberein mit KostentrÑger %2;ENU=Cost type %1 does not match Cost Object %2;NLD=Kostensoort %1 komt niet overeen met kostendrager %2;NOR=Kostnadstype %1 matcher ikke kostnadsobjekt %2;SVE=Kostnadstypen %1 matchar inte kostnadsobjektet %2';
      XMLFormat@1100525011 : Codeunit 11020221;
      NewBudgetLineNo@1100525009 : Integer;
      Text012@1100529402 : TextConst 'DEU=Kein Element in Zeile vorhanden (Element ist obligatorisch);ENU=No ELement present (Element is mandatory);NLD=Geen element op regel aanwezig (element is verplicht);NOR=Element mangler (element er obligatorisk);SVE=Det finns inget element (element Ñr obligatoriskt)';
      Text013@1210190000 : TextConst 'DEU=KostentrÑger %1 ist gesperrt worden;ENU=Cost Object %1 is blocked;NLD=Kostendrager %1 is geblokkeerd;NOR=Kostrnadsobjekt %1 er blokkert;SVE=Kostnadsobjekt %1 Ñr blockerad';
      Text999@1100525012 : TextConst 'DEU=%1 %2 nicht vorhanden;ENU=%1 %2 not present;NLD=%1 %2 niet aanwezig;NOR=%1 %2 finnes ikke;SVE=%1 %2 finns inte';
      CostObject@1100525014 : ARRAY [99] OF Code[20];
      FoundNode@1100525016 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      CodingSystemCostObject@1100528900 : Code[20];
      ServiceOrderNo@1100525013 : Code[20];

    PROCEDURE ProcessFile@1100485001(VAR ITempBlob@1100485002 : TEMPORARY Record 99008535);
    VAR
      XMLDoc@1100485000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      XMLDoc := XMLDoc.XmlDocument;
      XMLDOMMgt.LoadXMLFromBlob(XMLDoc, ITempBlob, TRUE);
      ParseMessage(XMLDoc);
    END;

    PROCEDURE ParseMessage@1100485000(XMLDocIn@1100525001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") : Boolean;
    VAR
      RootNode@1100485007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      LineNodeList@1100525003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      LineNode@1100525002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      I@1100525000 : Integer;
    BEGIN
      RootNode := XMLDocIn.DocumentElement;

      //check if used sort codes (= coding systems) exists
      XMLDOMMgt.FindNodes(RootNode,'SORTEERCODES',LineNodeList);
      IF NOT ISNULL(LineNodeList) THEN
        FOR I := 0 TO (LineNodeList.Count - 1) DO BEGIN
          LineNode := LineNodeList.Item(I);
          CheckCodingSystem(LineNode);
        END;

      //process budget lines
      XMLDOMMgt.FindNodes(RootNode,'BEGROTING/BEGROTINGSREGEL',LineNodeList);
      IF NOT ISNULL(LineNodeList) THEN
        FOR I := 0 TO (LineNodeList.Count - 1) DO BEGIN
          LineNode := LineNodeList.Item(I);
          ProcessBEGROTINGSREGEL(LineNode);
        END;

      //process bundles
      XMLDOMMgt.FindNodes(RootNode,'BEGROTING/BUNDELING',LineNodeList);
      IF NOT ISNULL(LineNodeList) THEN
        FOR I := 0 TO (LineNodeList.Count - 1) DO BEGIN
          LineNode := LineNodeList.Item(I);
          ProcessBUNDELING(LineNode);
        END;
    END;

    PROCEDURE ProcessBUNDELING@1100525000(LineNode@1100525001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      AttribValue@1100525000 : Text[1024];
      LineNodeList@1100525003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      LineNode2@1100525002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      I@1100525004 : Integer;
    BEGIN
      AttribValue := XMLDOMMgt.GetAttributeValue(LineNode,'CODE');

      XMLDOMMgt.FindNodes(LineNode,'BEGROTINGSREGEL',LineNodeList);
      IF NOT ISNULL(LineNodeList) THEN BEGIN
        FOR I := 0 TO (LineNodeList.Count - 1) DO BEGIN
          LineNode2 := LineNodeList.Item(I);
          ProcessBEGROTINGSREGEL(LineNode2);
        END;
      END;

      XMLDOMMgt.FindNodes(LineNode,'BUNDELING',LineNodeList);
      IF NOT ISNULL(LineNodeList) THEN BEGIN
        FOR I := 0 TO (LineNodeList.Count - 1) DO BEGIN
          LineNode2 := LineNodeList.Item(I);
          ProcessBUNDELING(LineNode2);
        END;
      END;
    END;

    PROCEDURE ProcessBEGROTINGSREGEL@1100525001(LineNode@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      ServiceOrderBudgetLine@1100525002 : Record 11012875;
      Norm@1100525003 : Decimal;
      Rate@1100525004 : Decimal;
      MaterialPrice@1100525005 : Decimal;
      PlantPrice@1100525006 : Decimal;
      SubcontractingPrice@1100525007 : Decimal;
      SundryPrice@1100525001 : Decimal;
    BEGIN
      InitBudgetLine(ServiceOrderBudgetLine,LineNode);

      XMLFormat.EvaluateDecimal(XMLDOMMgt.GetAttributeValue(LineNode,'UUR_NORM'),Norm);
      XMLFormat.EvaluateDecimal(XMLDOMMgt.GetAttributeValue(LineNode,'UUR_TARIEF'),Rate);
      XMLFormat.EvaluateDecimal(XMLDOMMgt.GetAttributeValue(LineNode,'MATERIAALPRIJS'),MaterialPrice);
      XMLFormat.EvaluateDecimal(XMLDOMMgt.GetAttributeValue(LineNode,'MATERIEELPRIJS'),PlantPrice);
      XMLFormat.EvaluateDecimal(XMLDOMMgt.GetAttributeValue(LineNode,'ONDERAANNEMINGSPRIJS'),SubcontractingPrice);
      XMLFormat.EvaluateDecimal(XMLDOMMgt.GetAttributeValue(LineNode,'OVERIGE_KOSTEN'),SundryPrice);
      GetCostObjectPerCostType(LineNode);

      //create labor budget line
      IF Norm <> 0 THEN BEGIN
        ServiceOrderBudgetLine."Cost Type" := ServiceOrderBudgetLine."Cost Type"::Labor;
        ServiceOrderBudgetLine."Cost Object" := CostObject[1];
        FillCostObject(LineNode,ServiceOrderBudgetLine);
        CreateBudgetLine(ServiceOrderBudgetLine,Norm,Rate,0);
      END;

      //create material budget line
      IF MaterialPrice <> 0 THEN BEGIN
        ServiceOrderBudgetLine."Cost Type" := ServiceOrderBudgetLine."Cost Type"::Material;
        ServiceOrderBudgetLine."Cost Object" := CostObject[2];
        FillCostObject(LineNode,ServiceOrderBudgetLine);
        CreateBudgetLine(ServiceOrderBudgetLine,0,0,MaterialPrice);
      END;

      //create plant budget line
      IF PlantPrice <> 0 THEN BEGIN
        ServiceOrderBudgetLine."Cost Type" := ServiceOrderBudgetLine."Cost Type"::Plant;
        ServiceOrderBudgetLine."Cost Object" := CostObject[4];
        FillCostObject(LineNode,ServiceOrderBudgetLine);
        CreateBudgetLine(ServiceOrderBudgetLine,0,0,PlantPrice);
      END;

      //create subcontracting budget line
      IF SubcontractingPrice <> 0 THEN BEGIN
        ServiceOrderBudgetLine."Cost Type" := ServiceOrderBudgetLine."Cost Type"::Subcontracting;
        ServiceOrderBudgetLine."Cost Object" := CostObject[3];
        FillCostObject(LineNode,ServiceOrderBudgetLine);
        CreateBudgetLine(ServiceOrderBudgetLine,0,0,SubcontractingPrice);
      END;

      //create sundry budget line
      IF SundryPrice <> 0 THEN BEGIN
        ServiceOrderBudgetLine."Cost Type" := ServiceOrderBudgetLine."Cost Type"::Sundry;
        ServiceOrderBudgetLine."Cost Object" := CostObject[5];
        FillCostObject(LineNode,ServiceOrderBudgetLine);
        CreateBudgetLine(ServiceOrderBudgetLine,0,0,SundryPrice);
      END;

      //create empty budget line
      IF (Norm = 0) AND (MaterialPrice = 0) AND (SubcontractingPrice = 0) AND (PlantPrice = 0) AND (SundryPrice = 0) THEN
        CreateBudgetLine(ServiceOrderBudgetLine,0,0,0);
    END;

    PROCEDURE CheckCodingSystem@1100525003(LineNode@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      CodingSystem@1100525002 : Record 11012088;
      CodingSystemCode@1100525001 : Code[10];
      CodingSystemDesc@1100525003 : Text[50];
    BEGIN
      CodingSystemCode := COPYSTR(XMLDOMMgt.GetAttributeValue(LineNode,'SORTERING'),1,10);
      CodingSystemDesc := COPYSTR(XMLDOMMgt.GetAttributeValue(LineNode,'FUNCTIE'),1,50);
      IF NOT CodingSystem.GET(CodingSystemCode) THEN
        StoreMessage(CodingSystemDesc,STRSUBSTNO(Text999,CodingSystem.FIELDCAPTION("Coding System"),CodingSystemCode));
    END;

    PROCEDURE InitBudgetLine@1100525002(VAR ServiceOrderBudgetLine@1100525000 : Record 11012875;LineNode@1100525002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      UnitRec@1100525004 : Record 204;
    BEGIN
      WITH ServiceOrderBudgetLine DO BEGIN
        INIT;
        "Line No." := NewBudgetLineNo;
        "Service Order No." := ServiceOrderNo;
        GetServOrder(FALSE);

        Description := COPYSTR(XMLDOMMgt.GetAttributeValue(LineNode,'OMSCHRIJVING'),1,MAXSTRLEN(Description));
        "Unit of Measure" := COPYSTR(XMLDOMMgt.GetAttributeValue(LineNode,'HOEVEELHEID_EENHEID'),1,MAXSTRLEN("Unit of Measure"));
        IF "Unit of Measure" <> '' THEN
          IF NOT UnitRec.GET("Unit of Measure") THEN
            StoreMessage(Description,STRSUBSTNO(Text999,FIELDCAPTION("Unit of Measure"),"Unit of Measure"));
        "Cost Type" := "Cost Type"::Sundry;
        XMLFormat.EvaluateDecimal(XMLDOMMgt.GetAttributeValue(LineNode,'HOEVEELHEID'),Quantity);
      END;
    END;

    PROCEDURE FillCostObject@1100525008(LineNode@1100525001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR ServiceOrderBudgetLine@1100525000 : Record 11012875);
    VAR
      CodingSystem@1100525002 : Record 11012088;
      CodingSystemText@1100525003 : Text[1024];
      CodingSystemCode@1100525010 : Code[250];
      LineNodeList@1100525005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      Found@1100525004 : Boolean;
      DimensionValue@1100525007 : Record 349;
      DimMgt@1100525006 : Codeunit 408;
      SameType@1100525008 : Boolean;
      I@1100525009 : Integer;
    BEGIN
      IF ServiceOrderBudgetLine."Cost Object" = '' THEN BEGIN
        XMLDOMMgt.FindNodes(LineNode,'SORTEERCODE',LineNodeList);
        IF NOT ISNULL(LineNodeList) THEN BEGIN
          WHILE (I < LineNodeList.Count) AND (NOT Found) DO BEGIN
            FoundNode := LineNodeList.Item(I);
            CodingSystemText := XMLDOMMgt.GetAttributeValue(FoundNode,'SORTERING');
            CodingSystemCode := CodingSystemText;
            IF CodingSystem.GET(COPYSTR(CodingSystemCode,1,MAXSTRLEN(CodingSystem."Coding System"))) THEN
              IF (CodingSystem."Cost Type" = ServiceOrderBudgetLine."Cost Type" + 1) OR
                 ((CodingSystemCode = CodingSystemCostObject) AND
                  (CodingSystem."Cost Type" = CodingSystem."Cost Type"::" ")) THEN
              BEGIN
                ServiceOrderBudgetLine."Cost Object" := COPYSTR(XMLDOMMgt.GetAttributeValue(FoundNode,'WAARDE'),1,MAXSTRLEN(ServiceOrderBudgetLine."Cost Object"));
                Found := TRUE;
              END;
            I := I + 1;
          END;
        END;
      END;

      IF ServiceOrderBudgetLine."Cost Object" = '' THEN
        CheckAdmiSubstituteCostObject(ServiceOrderBudgetLine."Cost Object", ServiceOrderBudgetLine."Cost Type");

      DimMgt.GetDimValueRec(2,ServiceOrderBudgetLine."Cost Object",DimensionValue,FALSE,'');
      CASE ServiceOrderBudgetLine."Cost Type" OF
        ServiceOrderBudgetLine."Cost Type"::Labor: SameType := DimensionValue."Cost Type" = DimensionValue."Cost Type"::Labor;
        ServiceOrderBudgetLine."Cost Type"::Material: SameType := DimensionValue."Cost Type" = DimensionValue."Cost Type"::Material;
        ServiceOrderBudgetLine."Cost Type"::Subcontracting: SameType := DimensionValue."Cost Type" = DimensionValue."Cost Type"::Subcontracting;
        ServiceOrderBudgetLine."Cost Type"::Plant: SameType := DimensionValue."Cost Type" = DimensionValue."Cost Type"::Plant;
        ServiceOrderBudgetLine."Cost Type"::Sundry: SameType := DimensionValue."Cost Type" = DimensionValue."Cost Type"::Sundry;
      END;
      IF (DimensionValue.Code <> '') AND (NOT SameType) THEN
        StoreMessage(ServiceOrderBudgetLine.Description,STRSUBSTNO(Text001,DimensionValue."Cost Type",DimensionValue.Code));
      IF (DimensionValue.Code <> '') AND DimensionValue.Blocked THEN
        StoreMessage(ServiceOrderBudgetLine.Description, STRSUBSTNO(Text013,ServiceOrderBudgetLine."Cost Object"));
      IF DimensionValue.Code = '' THEN
        StoreMessage(ServiceOrderBudgetLine.Description,STRSUBSTNO(Text999,ServiceOrderBudgetLine.FIELDCAPTION("Cost Object"),ServiceOrderBudgetLine."Cost Object"));
    END;

    PROCEDURE GetCostObjectPerCostType@1100525004(LineNode@1100525001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      CodingSystem@1100525002 : Record 11012088;
      CodingSystemText@1100525003 : Text[1024];
      CodingSystemCode@1100525010 : Code[250];
      LineNodeList@1100525005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      I@1100525009 : Integer;
      ServiceOrderBudgetLine@1100525000 : Record 11012875;
      CostTypeText@1100528900 : Text[50];
      CostObjectText@1100525004 : Text[50];
    BEGIN
      CLEAR(CostObject);
      XMLDOMMgt.FindNodes(LineNode,'SORTEERCODE',LineNodeList);
      IF NOT ISNULL(LineNodeList) THEN BEGIN
        WHILE (I < LineNodeList.Count) DO BEGIN
          FoundNode := LineNodeList.Item(I);
          CodingSystemText := XMLDOMMgt.GetAttributeValue(FoundNode,'SORTERING');
          IF CodingSystem.GET(COPYSTR(CodingSystemCode,1,MAXSTRLEN(CodingSystem."Coding System"))) THEN BEGIN
            IF (CodingSystem."Cost Type" <> 0) THEN BEGIN  //C026829.n
              CostObjectText := COPYSTR(XMLDOMMgt.GetAttributeValue(FoundNode,'WAARDE'),1,MAXSTRLEN(ServiceOrderBudgetLine."Cost Object"));
              IF CostObjectText <> '' THEN
                CostObject[CodingSystem."Cost Type"] := CostObjectText;
            END;
          END;
          I := I + 1;
        END;
      END;

      XMLDOMMgt.FindNodes(LineNode,'MAMO_REGEL',LineNodeList);
      IF NOT ISNULL(LineNodeList) THEN BEGIN
        WHILE (I < LineNodeList.Count) DO BEGIN
          FoundNode := LineNodeList.Item(I);
          CostTypeText := XMLDOMMgt.GetAttributeValue(FoundNode,'KOSTENSOORT');
          CostTypeText := UPPERCASE(CostTypeText);
          CASE CostTypeText OF
            'LOON': CodingSystem."Cost Type" := CodingSystem."Cost Type"::Labor;
            'MATERIAAL': CodingSystem."Cost Type" := CodingSystem."Cost Type"::Material;
            'ONDERAANNEMING': CodingSystem."Cost Type" := CodingSystem."Cost Type"::Subcontracting;
            'MATERIEEL': CodingSystem."Cost Type" := CodingSystem."Cost Type"::Plant;
            'OVERIG': CodingSystem."Cost Type" := CodingSystem."Cost Type"::Sundry;
          ELSE
            CodingSystem."Cost Type" := CodingSystem."Cost Type"::" ";
          END;
          CostObjectText := COPYSTR(XMLDOMMgt.GetAttributeValue(FoundNode,'CODE'),1,MAXSTRLEN(ServiceOrderBudgetLine."Cost Object"));
          IF CostObjectText <> '' THEN
            CostObject[CodingSystem."Cost Type"] := CostObjectText;
          I := I + 1;
        END;
      END;
    END;

    PROCEDURE CreateBudgetLine@1100525007(VAR ServiceOrderBudgetLine@1100525000 : Record 11012875;INorm@1100525001 : Decimal;IRate@1100525002 : Decimal;IPrice@1100525003 : Decimal);
    BEGIN
      WITH ServiceOrderBudgetLine DO BEGIN
        "Line No." := NewBudgetLineNo;
        Norm := INorm;
        Rate := IRate;
        Price := IPrice;
        Amount := 0;
        "Cost Component" := DefaultCostComponent("Cost Object",'');
        CalcTotals;
        INSERT(FALSE);
        UpdateCostControlStatus(0);
        NewBudgetLineNo += 10000;
      END;
    END;

    PROCEDURE DefaultCostComponent@1100525006(lvCostObject@1100485000 : Code[20];lvProject@1100485001 : Code[20]) lvCostComponent : Code[20];
    VAR
      lvDimValRec@1100485002 : Record 349;
      DimMgt@1100525000 : Codeunit 408;
    BEGIN
      lvCostComponent := '';
      IF lvCostObject <> '' THEN BEGIN
        DimMgt.GetDimValueRec(2, lvCostObject, lvDimValRec, FALSE, lvProject);
        IF NOT lvDimValRec.Blocked THEN
          lvCostComponent := lvDimValRec."Cost Component";
      END;
    END;

    PROCEDURE StoreMessage@5(DescTxt@11012000 : Text[100];ErrorMsg@11012001 : Text[80]);
    VAR
      ErrorRec@1210190000 : Record 11012051;
      LineNo@11012002 : Integer;
    BEGIN
      WITH ErrorRec DO BEGIN
        SETRANGE("User ID", USERID);
        SETRANGE("Source Type", "Source Type"::"Import Budget");
        IF FINDLAST THEN
          LineNo := "Line No." + 1
        ELSE
          LineNo := 1;

        INIT;
        "User ID" := USERID;
        "Source Type" := "Source Type"::"Import Budget";
        "Line No." := LineNo;
        "Service Order No." := ServiceOrderNo;
        "Error message" := ErrorMsg;
        Description := DescTxt;
        INSERT(FALSE);
      END;
    END;

    PROCEDURE SetSelectionService@1100525005(iServiceOrder@11012000 : Code[20];iCodingSystemCostObject@1100525001 : Code[20]);
    VAR
      ServiceOrderBudgetLine@1100525000 : Record 11012875;
    BEGIN
      ServiceOrderNo := iServiceOrder;
      CodingSystemCostObject := iCodingSystemCostObject;

      ServiceOrderBudgetLine.SETRANGE("Service Order No.",ServiceOrderNo);
      IF ServiceOrderBudgetLine.FINDLAST THEN
        NewBudgetLineNo := ServiceOrderBudgetLine."Line No." + 10000;
    END;

    PROCEDURE CheckAdmiSubstituteCostObject@1100485002(VAR VarAdmicde@1100485000 : Code[20];VAR CostTypeOpt@1100485001 : Option);
    VAR
      AdmiRec@1100525000 : Record 11012390;
      DimValRec@1100525001 : Record 349;
    BEGIN
      IF AdmiRec.GET(VarAdmicde) THEN BEGIN
        IF AdmiRec."Admi Related Cost Type" AND (VarAdmicde <> '') THEN BEGIN
          IF AdmiRec."Cost Object Labor" <> '' THEN BEGIN
            CostTypeOpt := DimValRec."Cost Type"::Labor;
            VarAdmicde := AdmiRec."Cost Object Labor";
          END;
          IF AdmiRec."Cost Object Material" <> '' THEN BEGIN
            CostTypeOpt := DimValRec."Cost Type"::Material;
            VarAdmicde := AdmiRec."Cost Object Material";
          END;
          IF AdmiRec."Cost Object Plant" <> '' THEN BEGIN
            CostTypeOpt := DimValRec."Cost Type"::Plant;
            VarAdmicde := AdmiRec."Cost Object Plant";
          END;
          IF AdmiRec."Cost Object Subcontracting" <> '' THEN BEGIN
            CostTypeOpt := DimValRec."Cost Type"::Subcontracting;
            VarAdmicde := AdmiRec."Cost Object Subcontracting";
          END;
          IF AdmiRec."Cost Object Sundry" <> '' THEN BEGIN
            CostTypeOpt := DimValRec."Cost Type"::Sundry;
            VarAdmicde := AdmiRec."Cost Object Sundry";
          END;
          EXIT;
        END;

        CASE CostTypeOpt OF
          DimValRec."Cost Type"::Labor:
            IF AdmiRec."Cost Object Labor" <> '' THEN
              VarAdmicde := AdmiRec."Cost Object Labor";
          DimValRec."Cost Type"::Material:
            IF AdmiRec."Cost Object Material" <> '' THEN
              VarAdmicde := AdmiRec."Cost Object Material";
          DimValRec."Cost Type"::Plant:
            IF AdmiRec."Cost Object Plant" <> '' THEN
              VarAdmicde := AdmiRec."Cost Object Plant";
          DimValRec."Cost Type"::Subcontracting:
            IF AdmiRec."Cost Object Subcontracting" <> '' THEN
              VarAdmicde := AdmiRec."Cost Object Subcontracting";
          DimValRec."Cost Type"::Sundry:
            IF AdmiRec."Cost Object Sundry" <> '' THEN
              VarAdmicde := AdmiRec."Cost Object Sundry";
        END;
      END;
    END;

    BEGIN
    {
      DP01702: derived from codeunit 11012390 (project-version)
    }
    END.
  }
}

