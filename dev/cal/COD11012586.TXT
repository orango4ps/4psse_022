OBJECT Codeunit 11012586 RFID Import Mgt. (Plant)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1210190000 : TextConst 'DEU=Keine Dateien vorhanden.;ENU=No files present.;NLD=Geen bestanden aanwezig.;NOR=Det finnes ingen filer;SVE=Det finns inga filer';
      Text002@1210190001 : TextConst 'DEU=Dateiname;ENU=File Name;NLD=Bestandsnaam;NOR=Filnavn;SVE=Filnamn';
      PlantSetup@1210190009 : Record 11012550;
      RFIDOrder@1210190002 : Record 11072661;
      RFIDOrderLine@1210190003 : Record 11072662;
      Text003@1210190004 : TextConst 'DEU=Scheck;ENU=Check;NLD=Controleren;NOR=Check;SVE=Check';
      Text004@1210190005 : TextConst 'DEU=Process;ENU=Process;NLD=Verwerken;NOR=Behandle;SVE=Process';
      FileMgt@1100525000 : Codeunit 419;
      NextLineNo@1210190006 : Integer;
      Text005@1210190010 : TextConst 'DEU=Auftrag ''%1''verarbeiten?;ENU=Process order ''%1''?;NLD="Order ''%1'' verwerken? ";NOR=Behandle ordre ''%1''?;SVE=Behandla order ''%1''?';
      Text006@1210190011 : TextConst 'DEU=Markierten Auftrag/markierte Auftr„ge verarbeiten?;ENU=Process marked order(s)?;NLD="Gemarkeerde order(s) verwerken? ";NOR=Behandle markert(e) ordre;SVE=Behandla markerad(e) order';
      Text007@1210190012 : TextConst 'DEU=Kein Auftrag ausgew„hlt oder markiert.;ENU=No order selected or marked.;NLD=Geen order geselecteerd of gemarkeerd;NOR=Ingen ordre valgt eller markert;SVE=Inga ordrar valda eller markerade';
      Text008@1210190013 : TextConst 'DEU=''%1'' nicht gleich %2 ''%3'';ENU=''%1'' unequal to %2 ''%3'';NLD=''%1'' ongelijk aan %2 ''%3'';NOR=%1'' er ulik %2 ''%3'';SVE=''%1'' olika mot %2 ''%3''';

    PROCEDURE ProcessImportFiles@1210190000();
    VAR
      RFIDSetup@1210190000 : Record 11072660;
      FileNameFilter@1100525000 : Text[30];
    BEGIN
      RFIDSetup.GET;
      RFIDSetup.CheckSetupImportRFIDPlantOrder();
      FileNameFilter := 'MBSCUIT*.*';

      ProcessImportFilesRTC(RFIDSetup, FileNameFilter);
    END;

    LOCAL PROCEDURE ProcessImportFilesRTC@1100525009(RFIDSetup@1100525000 : Record 11072660;FileNameFilter@1100525004 : Text[30]);
    VAR
      TempBlob@1100528403 : Record 99008535;
      FileArray@1100525003 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array" RUNONCLIENT;
      ImportRFIDPlantOrder@1100528400 : XMLport 11012562;
      FileMgt@1100528401 : Codeunit 419;
      IStream@1100528402 : InStream;
      Window@1100525001 : Dialog;
      DirectoryName@1100525007 : Text[250];
      FileName@1100525008 : Text[250];
      I@1100525002 : Integer;
    BEGIN
      FileMgt.GetFileNamesOfClientFolder(RFIDSetup."Import Directory", FileNameFilter, FileArray);
      IF FileArray.Length <= 0 THEN
        ERROR(Text001);

      Window.OPEN(Text002 + ' #1##############################');
      FOR I := 1 TO FileArray.Length DO BEGIN
        FileMgt.SplitFileAbsPathName(FileArray.GetValue(I - 1), DirectoryName, FileName);
        IF FileMgt.ClientFileExists(RFIDSetup."Import Directory" + FileName) THEN BEGIN
          Window.UPDATE(1, FileName);
          MoveImportFile(RFIDSetup."Import Directory", RFIDSetup."Import Process Directory", FileName);
          FileMgt.BLOBImport4PS(
            TempBlob, RFIDSetup."Import Process Directory" + FileName, FALSE);
          TempBlob.Blob.CREATEINSTREAM(IStream);
          ImportRFIDPlantOrder.SETSOURCE(IStream);
          ImportRFIDPlantOrder.IMPORT;
          CLEAR(ImportRFIDPlantOrder);
          COMMIT;
        END;
      END;
      Window.CLOSE;
    END;

    LOCAL PROCEDURE ProcessImportFilesCC@1100525003(RFIDSetup@1100525000 : Record 11072660;FileNameFilter@1100525004 : Text[30]);
    VAR
      File@1100525003 : Record 2000000022;
      Window@1100525001 : Dialog;
    BEGIN
      File.SETRANGE(Path, RFIDSetup."Import Directory");
      File.SETRANGE("Is a file", TRUE);
      File.SETFILTER(Name, FileNameFilter);
      IF NOT File.FINDFIRST THEN
        ERROR(Text001);

      Window.OPEN(Text002 + ' #1##############################');
      REPEAT
        IF FileMgt.ClientFileExists(RFIDSetup."Import Directory" + File.Name) THEN
          Window.UPDATE(1, File.Name);

      UNTIL File.NEXT = 0;
      Window.CLOSE;
    END;

    LOCAL PROCEDURE MoveImportFile@1100525000(ImportDirectory@1100525002 : Text[250];ImportProcessDirectory@1100525000 : Text[250];FileName@1100525001 : Text[250]);
    BEGIN
      IF FileMgt.ClientFileExists(ImportProcessDirectory + FileName) THEN
        FileMgt.DeleteClientFile4PS(ImportProcessDirectory + FileName, TRUE);
      FileMgt.RenameClientFile(
        ImportDirectory + FileName, ImportProcessDirectory + FileName, TRUE);
    END;

    PROCEDURE ConfirmPostRFIDOrders@1210190007(VAR RFIDOrder2@1210190000 : Record 11072661);
    VAR
      OnlyCurrent@1210190001 : Boolean;
    BEGIN
      RFIDOrder.COPY(RFIDOrder2);
      IF (NOT RFIDOrder.MARKEDONLY) AND (RFIDOrder2."No." <> '') THEN BEGIN
        IF RFIDOrder.ISEMPTY THEN BEGIN
          RFIDOrder.MARKEDONLY(FALSE);
          RFIDOrder.SETRANGE("No.", RFIDOrder2."No.");
          OnlyCurrent := TRUE;
        END;
      END;
      IF RFIDOrder.ISEMPTY THEN
        ERROR(Text007);
      IF OnlyCurrent THEN BEGIN
        IF NOT CONFIRM(Text005, TRUE, RFIDOrder2."No.") THEN
          ERROR('');
      END ELSE BEGIN
        IF NOT CONFIRM(Text006, TRUE) THEN
          ERROR('');
      END;
      RFIDOrder2.COPY(RFIDOrder);  // Return new filters (by Var)
    END;

    PROCEDURE ProcessPostRFIDOrders@1210190001(VAR RFIDOrder2@1210190000 : Record 11072661);
    VAR
      Window@1210190001 : Dialog;
    BEGIN
      RFIDOrder.COPY(RFIDOrder2);
      PlantSetup.GET;

      //* Check
      IF RFIDOrder.FINDSET(FALSE,FALSE) THEN BEGIN
        Window.OPEN(Text003 + '...\ \' + RFIDOrderLine.FIELDCAPTION("Order No.") + ' #1##############################');
        REPEAT
          Window.UPDATE(1, RFIDOrder."No.");
          RFIDOrderLine.SETRANGE("Order No.", RFIDOrder."No.");
          IF RFIDOrderLine.FINDSET(FALSE,FALSE) THEN BEGIN
            CheckRFIDOrderHead();  // Only check if lines present (only then a PO is created)
            REPEAT
              CheckRFIDOrderLine();
            UNTIL RFIDOrderLine.NEXT = 0;
          END;
        UNTIL RFIDOrder.NEXT = 0;
        Window.CLOSE;
      END;

      //* Post
      IF RFIDOrder.FINDSET(TRUE,FALSE) THEN BEGIN
        Window.OPEN(Text004 + '...\ \' + RFIDOrderLine.FIELDCAPTION("Order No.") + ' #1##############################');
        REPEAT
          Window.UPDATE(1, RFIDOrder."No.");
          PostRFIDOrder();
        UNTIL RFIDOrder.NEXT = 0;
        Window.CLOSE;
      END;
    END;

    PROCEDURE CheckRFIDOrderHead@1210190002();
    VAR
      PlantLoc@1210190000 : Record 11012554;
      PlantOrder@1210190001 : Record 11012556;
    BEGIN
      IF RFIDOrder."Plant Order No." <> '' THEN BEGIN
        PlantOrder.GET(RFIDOrder."Plant Order No.");
        PlantOrder.TESTFIELD(Posted, FALSE);
        IF PlantOrder.Status >= PlantOrder.Status::Released THEN
          PlantOrder.FIELDERROR(Status);
        CASE PlantOrder.Type OF
          PlantOrder.Type::Arrival:
            BEGIN
              RFIDOrder.TESTFIELD(Type, RFIDOrder.Type::Arrival);
              PlantOrder.TESTFIELD("To Location");
            END;
          PlantOrder.Type::Removal:
            BEGIN
              RFIDOrder.TESTFIELD(Type, RFIDOrder.Type::Removal);
              PlantOrder.TESTFIELD("From Location");
            END;
          ELSE
            PlantOrder.FIELDERROR(Type);
        END;
        PlantOrder.TESTFIELD("Transfer Date");
        IF (RFIDOrder.Date <> 0D) AND (RFIDOrder.Date <> PlantOrder."Transfer Date") THEN BEGIN
          RFIDOrder.FIELDERROR(Date,
            STRSUBSTNO(Text008, RFIDOrder.Date, RFIDOrder.FIELDCAPTION("Transfer Date PO"), PlantOrder."Transfer Date"));
        END;
      END ELSE BEGIN
        RFIDOrder.TESTFIELD(Date);
        IF RFIDOrder.Type = RFIDOrder.Type::Arrival THEN BEGIN
          IF RFIDOrder."From Location" <> '' THEN BEGIN
            PlantLoc.GET(RFIDOrder."From Location");
            PlantLoc.TESTFIELD(Depot, TRUE);
          END;
          PlantLoc.GET(RFIDOrder."To Location");
          PlantLoc.TESTFIELD(Depot, FALSE);
        END ELSE BEGIN
          PlantLoc.GET(RFIDOrder."From Location");
          PlantLoc.TESTFIELD(Depot, FALSE);
          IF RFIDOrder."To Location" <> '' THEN BEGIN
            PlantLoc.GET(RFIDOrder."To Location");
            PlantLoc.TESTFIELD(Depot, TRUE);
          END;
        END;
      END;
    END;

    PROCEDURE CheckRFIDOrderLine@1210190003();
    VAR
      PlantType@1210190002 : Record 11012551;
      PlantNumber@1210190001 : Record 11012552;
      PlantInvent@1210190000 : Record 11012555;
      Item@1210190003 : Record 27;
    BEGIN
      CASE RFIDOrderLine.Type OF
        RFIDOrderLine.Type::Plant:
          BEGIN
            RFIDOrderLine.TESTFIELD("Plant Type");
            PlantType.GET(RFIDOrderLine."Plant Type");
            IF NOT PlantType.Bulk THEN              //* Unique plant has a unique RFID, so always a specified plant number.
              RFIDOrderLine.TESTFIELD("Plant No."); //* So plant number must(/will) be always filled (otherwise update PO-line
                                                    //* will be much complicated).
            IF RFIDOrderLine."Plant No." <> '' THEN BEGIN
              PlantNumber.GET(RFIDOrderLine."Plant Type", RFIDOrderLine."Plant No.");
              IF NOT PlantType.Bulk THEN
                RFIDOrderLine.TESTFIELD(Quantity, 1)
              ELSE BEGIN
                PlantInvent.RESET;
                PlantInvent.SETCURRENTKEY(Removed, "Plant Type", "Plant No.");
                PlantInvent.SETRANGE(Removed, FALSE);
                PlantInvent.SETRANGE("Plant Type", RFIDOrderLine."Plant Type");
                PlantInvent.SETRANGE("Plant No.", RFIDOrderLine."Plant No.");
                IF PlantInvent.ISEMPTY THEN
                  RFIDOrderLine.TESTFIELD("Plant No.", '');
              END;
            END ELSE BEGIN
              IF NOT PlantType.Bulk THEN BEGIN
                IF (RFIDOrderLine.Quantity <> ROUND(RFIDOrderLine.Quantity, 1)) THEN
                  RFIDOrderLine.FIELDERROR(Quantity);
              END;
            END;
          END;
        RFIDOrderLine.Type::Item:
          BEGIN
            RFIDOrderLine.TESTFIELD("Item No.");
            Item.GET(RFIDOrderLine."Item No.");
          END;
        ELSE
          RFIDOrderLine.FIELDERROR(Type);

      END;
      RFIDOrderLine.TESTFIELD(Quantity);
    END;

    PROCEDURE PostRFIDOrder@1210190004();
    VAR
      PlantOrder@1210190000 : Record 11012556;
      PlantOrderLine@1210190001 : Record 11012557;
      DummyPlantOrderLine@1100529000 : Record 11012557;
      PlantOrderNo@1210190003 : Code[20];
    BEGIN
      RFIDOrderLine.SETRANGE("Order No.", RFIDOrder."No.");
      IF RFIDOrderLine.FINDSET(TRUE,FALSE) THEN BEGIN
        CheckRFIDOrderHead();
        NextLineNo := 10000;
        IF RFIDOrder."Plant Order No." = '' THEN
          PlantOrderNo := CreatePlantOrder()  //Only create Plant Order if lines present
        ELSE BEGIN
          PlantOrder.GET(RFIDOrder."Plant Order No.");
          PlantOrder.Explode(FALSE, FALSE, DummyPlantOrderLine);
          PlantOrderNo := RFIDOrder."Plant Order No.";
          PlantOrderLine.SETRANGE("Plant Order No.", RFIDOrder."Plant Order No.");
          IF PlantOrderLine.FINDLAST THEN
            NextLineNo := PlantOrderLine."Line No." + 10000;
          //PlantOrderItemLine.SETRANGE("Plant Order No.", RFIDOrder."Plant Order No.");
          //IF PlantOrderItemLine.FINDLAST THEN
          //  NextItemLineNo := PlantOrderItemLine."Line No." + 10000;
        END;
        REPEAT
          CheckRFIDOrderLine();
          IF RFIDOrderLine.Type <> RFIDOrderLine.Type::Item THEN BEGIN
            UpdatePlantOrderLine(PlantOrderNo);
          END ELSE BEGIN
            UpdatePlantOrderItemLine(PlantOrderNo);
          END;
          RFIDOrderLine.DELETE;
        UNTIL RFIDOrderLine.NEXT = 0;
      END;
      RFIDOrder.DELETE;
    END;

    PROCEDURE CreatePlantOrder@1210190005() : Code[20];
    VAR
      PlantOrder@1210190000 : Record 11012556;
    BEGIN
      PlantOrder.INIT;
      PlantOrder."No." := '';  // Empty, then will be determined in OnInsert trigger
      PlantOrder.INSERT(TRUE);
      PlantOrder.TESTFIELD("No.");
      PlantOrder.VALIDATE("Transfer Date", RFIDOrder.Date);
      IF RFIDOrder.Type = RFIDOrder.Type::Arrival THEN BEGIN
        PlantOrder.VALIDATE(Type, PlantOrder.Type::Arrival);
        IF RFIDOrder."From Location" <> '' THEN
          PlantOrder.VALIDATE("From Location", RFIDOrder."From Location");
        PlantOrder.VALIDATE("To Location", RFIDOrder."To Location");
      END ELSE BEGIN
        PlantOrder.VALIDATE(Type, PlantOrder.Type::Removal);
        PlantOrder.VALIDATE("From Location", RFIDOrder."From Location");
        IF RFIDOrder."To Location" <> '' THEN
          PlantOrder.VALIDATE("To Location", RFIDOrder."To Location");
      END;
      PlantOrder.MODIFY(TRUE);
      EXIT(PlantOrder."No.");
    END;

    PROCEDURE UpdatePlantOrderLine@1210190006(PlantOrderNo@1210190000 : Code[20]);
    VAR
      PlantOrderLine@1210190001 : Record 11012557;
      Found@1210190002 : Boolean;
    BEGIN
      IF RFIDOrder."Plant Order No." <> '' THEN BEGIN
        PlantOrderLine.SETRANGE("Plant Order No.", RFIDOrder."Plant Order No.");
        PlantOrderLine.SETRANGE(Type, PlantOrderLine.Type::Plant);
        PlantOrderLine.SETRANGE("Plant Type", RFIDOrderLine."Plant Type");
        IF RFIDOrderLine."Plant No." <> '' THEN BEGIN
          PlantOrderLine.SETRANGE("No.", RFIDOrderLine."Plant No.");
          Found := PlantOrderLine.FINDFIRST;
          IF NOT Found THEN BEGIN
            PlantOrderLine.SETRANGE("No.", '');
            Found := PlantOrderLine.FINDFIRST;
          END;
        END ELSE BEGIN
          PlantOrderLine.SETFILTER("No.", '%1|%2', '0', '');
          Found := PlantOrderLine.FINDFIRST;
        END;
        IF Found THEN BEGIN
          PlantOrderLine.SetCreateFromPlantRequest(TRUE);  // Now also used for RFID Plant Orders
          IF (RFIDOrderLine."Plant No." <> '') AND (PlantOrderLine."No." <> RFIDOrderLine."Plant No.") THEN
            PlantOrderLine.VALIDATE("No.", RFIDOrderLine."Plant No.");
          IF (PlantOrderLine."No." <> '') THEN BEGIN
            PlantOrderLine.CALCFIELDS(Bulk);
            IF NOT PlantOrderLine.Bulk THEN
               PlantOrderLine.Quantity := 0;  // So will become 1
          END;
          PlantOrderLine.Quantity := PlantOrderLine.Quantity + RFIDOrderLine.Quantity;
          PlantOrderLine.MODIFY(TRUE);
          EXIT;
        END;
      END;

      PlantOrderLine.SetCreateFromPlantRequest(TRUE);  // Now also used for RFID Plant Orders
      PlantOrderLine.INIT;
      PlantOrderLine."Plant Order No." := PlantOrderNo;
      PlantOrderLine."Line No." := NextLineNo;
      PlantOrderLine.InitRecord();
      PlantOrderLine.INSERT(TRUE);
      PlantOrderLine.Type := PlantOrderLine.Type::Plant;
      PlantOrderLine.VALIDATE("Plant Type", RFIDOrderLine."Plant Type");
      IF RFIDOrderLine."Plant No." <> '' THEN
        PlantOrderLine.VALIDATE("No.", RFIDOrderLine."Plant No.");
      PlantOrderLine.Quantity := RFIDOrderLine.Quantity;
      PlantOrderLine.MODIFY(TRUE);
      NextLineNo := NextLineNo + 10000;
    END;

    PROCEDURE UpdatePlantOrderItemLine@1210190008(PlantOrderNo@1210190000 : Code[20]);
    VAR
      PlantOrderLine@1210190001 : Record 11012557;
    BEGIN
      IF RFIDOrder."Plant Order No." <> '' THEN BEGIN
        PlantOrderLine.SETRANGE("Plant Order No.", RFIDOrder."Plant Order No.");
        PlantOrderLine.SETRANGE(Type, PlantOrderLine.Type::Item);
        PlantOrderLine.SETRANGE("Item No.", RFIDOrderLine."Item No.");
        IF PlantOrderLine.FINDFIRST THEN BEGIN
          PlantOrderLine.Quantity := PlantOrderLine.Quantity + RFIDOrderLine.Quantity;
          PlantOrderLine.VALIDATE("Sales Rate");
          PlantOrderLine.SetQtyForItemReservation();
          PlantOrderLine.MODIFY(TRUE);
          EXIT;
        END;
      END;

      PlantOrderLine.SetCreateFromPlantRequest(TRUE);  // Now also used for RFID Plant Orders
      PlantOrderLine.INIT;
      PlantOrderLine."Plant Order No." := PlantOrderNo;
      PlantOrderLine."Line No." := NextLineNo;
      PlantOrderLine.InitRecord();
      PlantOrderLine.INSERT(TRUE);
      PlantOrderLine.Type := PlantOrderLine.Type::Item;
      PlantOrderLine.VALIDATE("Item No.", RFIDOrderLine."Item No.");
      PlantOrderLine.Quantity := RFIDOrderLine.Quantity;
      PlantOrderLine.VALIDATE("Sales Rate");
      PlantOrderLine.SetQtyForItemReservation();
      PlantOrderLine.MODIFY(TRUE);
      NextLineNo := NextLineNo + 10000;
    END;

    BEGIN
    END.
  }
}

