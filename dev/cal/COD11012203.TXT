OBJECT Codeunit 11012203 Document Portal Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      SharePointSetup4PS@1100525008 : Record 11012730;
      ThisGlobalSubsiteType@1100528301 : 'Unknown,Project,ServLoc';
      Text000@1100525017 : TextConst 'DEU=Passwort muss ausgefÅllt sein.;ENU=Password must be filled.;NLD=Wachtwoord moet gevuld zijn.;SVE=Lîsenord mÜste fyllas i.';
      Text001@1100525023 : TextConst 'DEU=Es kann nur 1 %1 Eintrag mit %2 %3 geben.;ENU=There can only be 1 %1 Records with %2 %3.;NLD=Er kan maar 1 %1 record met %2 %3 zijn.';
      Text002@1100525001 : TextConst 'DEU=%1 %2 muss vorhanden sein, wenn einmal in Tabelle %1.\\Keine %3 Einladungs-E-Mail gesendet.;ENU=%1 %2 must be present once in Table %1.\\No %3 invitation E-mail sent.;NLD=%1 %2 moet 1 keer aanwezig zijn in tabel %1.\\Geen %3 invitatie mail verzonden.';
      Text003@1100525000 : TextConst 'DEU=%1 nicht vorhanden fÅr %2 %3.;ENU=%1 not present for %2 %3.;NLD=%1 niet aanwezig voor %2 %3.';
      Text005@1100528302 : TextConst 'DEU=Kein fÅhrendes Unternehmen definiert.;ENU=No Leading Company defined.;NLD=Geen centraal bedrijf gedefinieerd.;SVE=Inget ledande bolag Ñr definierat.';
      Text006@1100409009 : TextConst 'DEU=%1 kann nicht bestimmt werden fÅr Beleg %2. (%3: %4);ENU=%1 can not be determined for Document %2. (%3: %4);NLD=%1 kan niet bepaald worden van document %2. (%3: %4)';
      Text007@1100528000 : TextConst 'DEU=Falsches Passwort.;ENU=Incorrect Password.;NLD=Wachtwoord is niet correct.;SVE=Ogiltigt lîsenord.';
      Text008@1100528320 : TextConst 'DEU=Sie haben keine Genehmigung fÅr das Dokumentenportal (Projekt).;ENU=You have no Permission for the Document Portal (Project).;NLD=U heeft geen permissie voor het documentportaal (Project).;SVE=Du saknar behîrighet fîr Dokumentportalen (Projekt).';
      Text009@1100528321 : TextConst 'DEU=Sie haben keine Genehmigung fÅr das Dokumentenportal (Service).;ENU=You have no Permission for the Document Portal (Service).;NLD=U heeft geen permissie voor het documentportaal (Service).;SVE=Du saknar behîrighet fîr Dokumentportalen (Service).';
      Text010@1100528318 : TextConst 'DEU=Sie haben keine Genehmigung fÅr das Dokumentenportal.;ENU=You have no Permission for the Document Portal.;NLD=U heeft geen permissie voor het documentportaal.;SVE=Du saknar behîrighet fîr Dokumentportalen.';
      Text011@1100528324 : TextConst 'DEU=FBA-Verbindung funktioniert korrekt.;ENU=FBA Connection is working correctly.;NLD=De FBA connectie werkt goed.';
      GlobalSubsiteType@1100528300 : 'Project,ServLoc';
      Debug@1100528304 : Boolean;
      DebugText@1100528303 : Text;

    PROCEDURE GetInternTxt@1100528300() : Text;
    BEGIN
      EXIT('Intern');
    END;

    PROCEDURE GetExternTxt@1100528345() : Text;
    BEGIN
      EXIT('Extern');
    END;

    PROCEDURE GetNavCompanyId@1100528390() : Text;
    BEGIN
      EXIT(GetProjectPortalGuidFromCompName(COMPANYNAME));
    END;

    PROCEDURE GetWebOfficeAppServerGuid@1100528393() : Text;
    BEGIN
      EXIT('8A4B8DE2-6FD8-41e9-923C-C7C3C00F8295');
    END;

    PROCEDURE GetCompanyLogoFeatureGuid@1100528394() : Text;
    BEGIN
      EXIT('8f5ff2b5-fe08-44bd-82b9-3c520f844b9b');
    END;

    PROCEDURE GetDesignFeatureGuid@1100528395() : Text;
    BEGIN
      EXIT('e328ff0b-309f-4ef4-8b3d-037bc076071d');
    END;

    PROCEDURE GetBaseCoverLetterDesc@1100528396() : Text;
    VAR
      DocumentUpdatePPT@1100528301 : Record 11229800;
      FieldDescription@1100528302 : Text;
      SaveLanguageId@1100528300 : Integer;
    BEGIN
      SharePointSetup4PS.GET;
      SaveLanguageId := GLOBALLANGUAGE;
      GLOBALLANGUAGE(SharePointSetup4PS."Language ID");
      FieldDescription := DocumentUpdatePPT.FIELDCAPTION("Cover Letter");
      GLOBALLANGUAGE(SaveLanguageId);
      EXIT(FieldDescription);
    END;

    PROCEDURE GetProjectPortalGuidFromContactNo@1100528301(ContactNo@1100528300 : Code[20]) : Code[50];
    VAR
      Contact@1100528301 : Record 5050;
    BEGIN
      EXIT(Contact.GetProjectPortalGuidFromContactNo(ContactNo));
    END;

    PROCEDURE GetProjectPortalGuidFromDocType@1100528333(DocType@1100528300 : Code[20]) : Code[50];
    VAR
      DocumentType@1100528301 : Record 11012405;
    BEGIN
      EXIT(DocumentType.GetProjectPortalGuidFromDocType(DocType));
    END;

    PROCEDURE GetProjectPortalGuidFromCompName@1100528339(CompName@1100528300 : Text[30]) : Code[50];
    VAR
      CompanyData@1100528301 : Record 11020674;
    BEGIN
      EXIT(CompanyData.GetProjectPortalGuidFromCompName(CompName));
    END;

    PROCEDURE GetProjectPortalGuidFromWebLink@1100409004(DocumentProperties@1100409000 : Record 11012746) : Text[50];
    VAR
      CompanyData@1100409001 : Record 11020674;
      StringFunctions@1100409002 : Codeunit 11012273;
      StringArr@1100409003 : ARRAY [10] OF Text[250];
      PortalGUID@1100409004 : Text[50];
      I@1100409005 : Integer;
    BEGIN
      SharePointSetup4PS.GET;
      IF NOT (DocumentProperties.HasStorageURI) OR (NOT DocumentProperties."Private Company Document") THEN
        EXIT(GetNavCompanyId);

      StringFunctions.SplitString(DocumentProperties.GetStorageURI, '/', StringArr);
      FOR I := 1 TO ARRAYLEN(StringArr)-3 DO BEGIN
        IF (StringArr[I] <> '') AND
           (StringArr[I] = SharePointSetup4PS."Portal URL Suffix")
        THEN BEGIN
          IF (COPYSTR(StringArr[I+2], 1) = 'QUOTE') THEN
            PortalGUID := StringArr[I+3];
          IF (COPYSTR(StringArr[I+3], 1, 3) = 'COM') THEN
            PortalGUID := COPYSTR(StringArr[I+3], 4, MAXSTRLEN(PortalGUID));
          IF (PortalGUID <> '') THEN BEGIN
            IF (STRPOS(PortalGUID, '%20') > 0) THEN
              PortalGUID := StringFunctions.ReplaceString(PortalGUID, '%20', ' ');
            EXIT(PortalGUID);
          END;
        END;
      END;
      ERROR(Text006, CompanyData.FIELDCAPTION("Project Portal ID"), DocumentProperties."No.",
        DocumentProperties.FIELDCAPTION("Web link"), DocumentProperties.GetStorageURI);
    END;

    PROCEDURE GetContactNoFromGuid@1100525020(PortalGuid@1100525000 : Code[50]) : Code[20];
    VAR
      Contact@1100525001 : Record 5050;
    BEGIN
      EXIT(Contact.GetContactNoFromGuid(PortalGuid));
    END;

    PROCEDURE GetCentralCompanyName@1100528302(ShowError@1100528302 : Boolean) : Text[30];
    VAR
      CompanyRelationsCentralMgt@1100528301 : Record 11012059;
      MarketingSetup@1100525000 : Record 5079;
    BEGIN
      IF (CompanyRelationsCentralMgt.GET(COMPANYNAME)) THEN BEGIN
        MarketingSetup.CHANGECOMPANY(CompanyRelationsCentralMgt."Company Contact Data");
        MarketingSetup.GET;
        IF (MarketingSetup.Persons) THEN
          EXIT(CompanyRelationsCentralMgt."Company Contact Data");
      END;
      IF (ShowError) THEN
        ERROR(Text005);
      EXIT(COMPANYNAME);
    END;

    PROCEDURE GetContactFromVendorsByPurchaseAction@1100528354(VendorsByPurchaseAction@1100528300 : Record 11012068;VAR Contact@1100528301 : Record 5050);
    BEGIN
      CASE VendorsByPurchaseAction.Type OF
        VendorsByPurchaseAction.Type::Vendor: BEGIN
          IF (VendorsByPurchaseAction."Contact Person No." = '') THEN
            GetContactFromVendor(VendorsByPurchaseAction."Vendor No.", Contact)
          ELSE
            Contact.GET(VendorsByPurchaseAction."Contact Person No.");
        END;
        VendorsByPurchaseAction.Type::Contact: BEGIN
          IF (VendorsByPurchaseAction."Contact Person No." = '') THEN
            Contact.GET(VendorsByPurchaseAction."Vendor No.")
          ELSE
            Contact.GET(VendorsByPurchaseAction."Contact Person No.");
        END;
      END;
    END;

    PROCEDURE GetContactFromVendor@1100528355(VendorNo@1100528300 : Code[20];VAR Contact@1100528301 : Record 5050);
    VAR
      ContactBusinessRelation@1100528302 : Record 5054;
    BEGIN
      ContactBusinessRelation.SETCURRENTKEY("Link to Table", "No.");
      ContactBusinessRelation.SETRANGE("Link to Table", ContactBusinessRelation."Link to Table"::Vendor);
      ContactBusinessRelation.SETRANGE("No.", VendorNo);
      ContactBusinessRelation.FINDFIRST;
      Contact.GET(ContactBusinessRelation."Contact No.")
    END;

    PROCEDURE GetDocumentNameFromFileURL@1100525018(DocumentProperties@1100528305 : Record 11012746;FileURL@1100525001 : Text[250]) : Text[250];
    VAR
      StringFunctions@1100528303 : Codeunit 11012273;
      RegExpMgt@1100528306 : Codeunit 11012262;
      ExtensionPos@1100528302 : Integer;
      FileNameLastPos@1100528301 : Integer;
      DocumentName@1100528300 : Text[250];
    BEGIN
      DocumentName := COPYSTR(FileURL, StringFunctions.RSTRPOS(FileURL, '\')+1);
      ExtensionPos := StringFunctions.RSTRPOS(DocumentName, '.');
      FileNameLastPos := StringFunctions.RSTRPOS(DocumentName, '__') - 1;
      CASE TRUE OF
        (ExtensionPos = 0) AND (FileNameLastPos > 0):
          DocumentName := COPYSTR(DocumentName, 1, FileNameLastPos);
        (ExtensionPos > 0) AND (FileNameLastPos > 0):
          DocumentName := COPYSTR(DocumentName, 1, FileNameLastPos) + COPYSTR(DocumentName, ExtensionPos);
      END;
      IF (DocumentName <> '') THEN BEGIN
        DocumentName := RegExpMgt.Replace(DocumentName, '\%20', ' ');
      END;
      EXIT(DocumentName);
    END;

    PROCEDURE GetDocumentNameFromURL@1100528372(URL@1100525001 : Text[250]) : Text[250];
    VAR
      StringFunctions@1100528300 : Codeunit 11012273;
      RegExpMgt@1100528303 : Codeunit 11012262;
      DocumentName@1100528301 : Text[250];
      Pos@1100528302 : Integer;
    BEGIN
      Pos := StringFunctions.RSTRPOS(URL, '/');
      IF (Pos <= 0) THEN
        EXIT(RegExpMgt.Replace(URL, '\%20', ' '));
      DocumentName := COPYSTR(URL, Pos+1);
      IF (DocumentName <> '') THEN
        DocumentName := RegExpMgt.Replace(DocumentName, '\%20', ' ');
      EXIT(DocumentName);
    END;

    PROCEDURE GetPurchaseQuoteNo@1100528363(DocumentProperties@1100528300 : Record 11012746) : Code[20];
    VAR
      DocumentLink@1100528301 : Record 11012747;
      PurchaseHeader@1100528303 : Record 38;
      RecRef@1100528302 : RecordRef;
    BEGIN
      DocumentLink.SETRANGE("Document No.", DocumentProperties."No.");
      DocumentLink.SETRANGE("Table No.", DATABASE::"Purchase Header");
      DocumentLink.SETRANGE("Internal Company", COMPANYNAME);
      DocumentLink.SETRANGE(Source, TRUE);
      IF (DocumentLink.FINDFIRST) THEN BEGIN
        RecRef.GET(DocumentLink."Record ID");
        RecRef.SETTABLE(PurchaseHeader);
        IF (PurchaseHeader."Document Type" = PurchaseHeader."Document Type"::Quote) THEN
          EXIT(PurchaseHeader."No.");
      END;
      EXIT('');
    END;

    PROCEDURE GetInternalDocumentToUpdate@1100528351(VAR DocumentProperties@1100528307 : Record 11012746;StorageDir@1100528308 : Text;VAR WebLink@1100528305 : Text;CheckOut@1100525000 : Boolean;VAR DocumentSite@1100528306 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.ProjectSite" RUNONCLIENT;VAR ErrorString@1100528304 : Text;VAR CallStack@1100528300 : Text) : Boolean;
    VAR
      StringFunctions@1100528301 : Codeunit 11012273;
      SlashPos@1100528302 : Integer;
      DotPos@1100528303 : Integer;
      DocumentManagement@1100527800 : Codeunit 11012406;
      DocumentStorageType@1100527801 : Option;
      FileName@1100527802 : Text;
    BEGIN
      CheckLicense;
      WebLink := DocumentProperties.GetStorageURI;
      FileName := DocumentProperties.FileNameShort;

      CallStack := 'DownloadDocument';
      DebugDotNetProperties(CallStack, DocumentProperties."Project Portal Subsite", WebLink, StorageDir, FORMAT(CheckOut), '', '', '', '', '');

      DocumentManagement.GetStorageLocation(
        DocumentProperties."Document Group", DocumentProperties.Template, DocumentProperties."Contact No.",
        DocumentProperties."Document Type", DocumentProperties."Creation Date", StorageDir, DocumentStorageType);
      DocumentManagement.GetUniqueFileNameForStorageType(DocumentStorageType, FileName);
      FileName := STRSUBSTNO('%1%2',StorageDir,FileName);
      IF (NOT DocumentSite.DownloadDocument(DocumentProperties."Project Portal Subsite", WebLink, FileName, CheckOut, ErrorString)) THEN
        EXIT(FALSE);

      DocumentProperties.ValidateStorageURI(DocumentStorageType,FileName);
      IF (NOT CheckOut) THEN
        WebLink := '';
      EXIT(TRUE);
    END;

    PROCEDURE SetGlobalVariables@1100528400(iSubsiteType@1100528300 : Option;iDebug@1100528301 : Boolean);
    BEGIN
      ThisGlobalSubsiteType := iSubsiteType;
      GlobalSubsiteType := iSubsiteType - 1;
      Debug := iDebug;
    END;

    PROCEDURE SetDocumentProperties@1100528319(DocumentProperties@1100528300 : Record 11012746;VAR Document@1100528301 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.Document" RUNONCLIENT);
    VAR
      SaveLanguageId@1100528303 : Integer;
    BEGIN
      SharePointSetup4PS.GET;
      DocumentProperties.CALCFIELDS("Modification Date");
      IF (NOT ISNULL(Document)) THEN
        CLEAR(Document);
      Document := Document.Document;

      Document.DocumentId := DocumentProperties."No.";
      Document.Description := DocumentProperties.Description;
      Document.SiteCode := DocumentProperties."Project Portal Subsite";
      Document.DocumentType := GetProjectPortalGuidFromDocType(DocumentProperties."Document Type");
      Document.ElementCode := DocumentProperties."Project Element";
      Document.CompanyId := '';
      Document.CompanyName := '';
      Document.RelationId := DocumentProperties."Contact No.";
      Document.RelationName := DocumentProperties."Contact Name";
      Document.ContactPersonId := DocumentProperties."Contact Person No.";
      Document.ContactPersonName := DocumentProperties."Contact Person Name";
      Document.Name := GetDocumentNameFromURL(DocumentProperties.GetStorageURI);
      Document.FileToUpload := '';
      Document.DocumentVersion := '';
      Document.DocumentStatus := '';
      Document.DocumentDate := FORMAT(DocumentProperties."Document Date", 0, 9);
      Document.DocumentNo := DocumentProperties."Document No.";
      Document.Publish := DocumentProperties.DPTPublish;
      SaveLanguageId := GLOBALLANGUAGE;
      GLOBALLANGUAGE(SharePointSetup4PS."Language ID");
      IF (DocumentProperties.Status <> 0) THEN
        Document.DocumentStatus := FORMAT(DocumentProperties.Status);
      GLOBALLANGUAGE(SaveLanguageId);
      Document.ModificationDate := FORMAT(DocumentProperties."Modification Date", 0, 9);

      SetDocumentCompany(DocumentProperties, Document);
      SetPlotNoDocumentProperties(DocumentProperties, Document);
    END;

    PROCEDURE SetQuoteDocumentProperties@1100528353(DocumentProperties@1100528301 : Record 11012746;ProjectPurchaseAction@1100528300 : Record 11012026;ProjectPortalSubsite@1100528304 : Record 11229810;VAR QuoteDocument@1100528302 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.QuoteDocument" RUNONCLIENT);
    VAR
      SaveLanguageId@1100528303 : Integer;
    BEGIN
      SharePointSetup4PS.GET;
      IF (NOT ISNULL(QuoteDocument)) THEN
        CLEAR(QuoteDocument);
      QuoteDocument := QuoteDocument.QuoteDocument;

      QuoteDocument.DocumentId := DocumentProperties."No.";
      QuoteDocument.Description := DocumentProperties.Description;
      QuoteDocument.SiteCode := ProjectPortalSubsite.Code;
      QuoteDocument.DocumentSiteCode := DocumentProperties."Project Portal Subsite";
      QuoteDocument.DocumentType := GetProjectPortalGuidFromDocType(DocumentProperties."Document Type");
      QuoteDocument.CompanyId := '';
      QuoteDocument.CompanyName := '';
      QuoteDocument.RelationId := DocumentProperties."Contact No.";
      QuoteDocument.RelationName := DocumentProperties."Contact Name";
      QuoteDocument.ContactPersonId := DocumentProperties."Contact Person No.";
      QuoteDocument.ContactPersonName := DocumentProperties."Contact Person Name";
      QuoteDocument.FileToUpload := DocumentProperties.GetStorageURI;
      QuoteDocument.Name := GetDocumentNameFromURL(QuoteDocument.FileToUpload);
      QuoteDocument.QuoteId := GetPurchaseQuoteNo(DocumentProperties);
      QuoteDocument.DocumentVersion := '';
      QuoteDocument.QuoteRequestId := ProjectPurchaseAction.Code;
      QuoteDocument.FinalDeliveryDate := FORMAT(ProjectPurchaseAction."Requested Receipt Date", 0, 9);
      QuoteDocument.ReactBefore := FORMAT(ProjectPurchaseAction."Vendors react before", 0, 9);
      QuoteDocument.RequestedReceiptDate := FORMAT(ProjectPurchaseAction."Requested Quote Receipt Date", 0, 9);
      QuoteDocument.Remark := ProjectPurchaseAction.Text;
      SaveLanguageId := GLOBALLANGUAGE;
      GLOBALLANGUAGE(SharePointSetup4PS."Language ID");
      QuoteDocument.Status := FORMAT(ProjectPurchaseAction.Status);
      GLOBALLANGUAGE(SaveLanguageId);

      SetQuoteDocumentCompany(DocumentProperties, QuoteDocument);
    END;

    PROCEDURE SetDocumentCompany@1100528326(DocumentProperties@1100528301 : Record 11012746;VAR Document@1100528300 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.Document" RUNONCLIENT);
    VAR
      Contact@1100528303 : Record 5050;
      CompanyData@1100409000 : Record 11020674;
    BEGIN
      IF (NOT DocumentProperties."Private Company Document") THEN
        EXIT;

      IF (DocumentProperties.HasStorageURI) THEN BEGIN
        Document.CompanyId := GetProjectPortalGuidFromWebLink(DocumentProperties);
        IF (Contact.GET(Contact.GetContactNoFromGuid(Document.CompanyId))) THEN
          Document.CompanyName := Contact.Name
        ELSE
          IF (CompanyData.GET(CompanyData.GetCompanyNameFromGuid(Document.CompanyId))) THEN
            Document.CompanyName := CompanyData."Company Name"
      END ELSE BEGIN
        IF (DocumentProperties."Contact No." + DocumentProperties."Contact Person No." = '') THEN BEGIN
          Document.CompanyId := GetNavCompanyId;
          Document.CompanyName := COMPANYNAME;
        END ELSE BEGIN
          IF (DocumentProperties."Contact Person No." <> '') THEN
            Contact.GET(DocumentProperties."Contact Person No.")
          ELSE
            Contact.GET(DocumentProperties."Contact No.");
          Document.CompanyId := GetNavCompanyId;
          Document.CompanyName := COMPANYNAME;
          IF (Contact."Company No." <> '') THEN BEGIN
            Document.CompanyId := GetProjectPortalGuidFromContactNo(Contact."Company No.");
            Document.CompanyName := Contact."Company Name";
          END;
        END;
      END;
    END;

    PROCEDURE SetQuoteDocumentCompany@1100409007(DocumentProperties@1100528301 : Record 11012746;VAR QuoteDocument@1100528300 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.QuoteDocument" RUNONCLIENT);
    VAR
      Contact@1100528303 : Record 5050;
      CompanyData@1100409000 : Record 11020674;
    BEGIN
      IF (NOT DocumentProperties."Private Company Document") THEN
        EXIT;

      IF (DocumentProperties.HasStorageURI) THEN BEGIN
        QuoteDocument.CompanyId := GetProjectPortalGuidFromWebLink(DocumentProperties);
        IF (Contact.GET(Contact.GetContactNoFromGuid(QuoteDocument.CompanyId))) THEN
          QuoteDocument.CompanyName := Contact.Name
        ELSE
          IF (CompanyData.GET(CompanyData.GetCompanyNameFromGuid(QuoteDocument.CompanyId))) THEN
            QuoteDocument.CompanyName := CompanyData."Company Name"
      END ELSE BEGIN
        IF (DocumentProperties."Contact No." + DocumentProperties."Contact Person No." = '') THEN BEGIN
          QuoteDocument.CompanyId := GetNavCompanyId;
          QuoteDocument.CompanyName := COMPANYNAME;
        END ELSE BEGIN
          IF (DocumentProperties."Contact Person No." <> '') THEN
            Contact.GET(DocumentProperties."Contact Person No.")
          ELSE
            Contact.GET(DocumentProperties."Contact No.");
          QuoteDocument.CompanyId := GetNavCompanyId;
          QuoteDocument.CompanyName := COMPANYNAME;
          IF (Contact."Company No." <> '') THEN BEGIN
            QuoteDocument.CompanyId := GetProjectPortalGuidFromContactNo(Contact."Company No.");
            QuoteDocument.CompanyName := Contact."Company Name";
          END;
        END;
      END;
    END;

    PROCEDURE SetDocumentFileToUpload@1100528373(DocumentProperties@1100528300 : Record 11012746) : Text[250];
    VAR
      ExternalDocumentMgt@1100528306 : Codeunit 11012403;
      WordAutomation@1100528305 : Codeunit 11012400;
      FileExtension@1100528302 : Text[10];
      FileToUpload@1100528301 : Text[250];
    BEGIN
      FileExtension := '';
      IF (DocumentProperties."External Document") THEN BEGIN
        FileToUpload := DocumentProperties.File;
      END ELSE BEGIN
        IF WordAutomation.ExistingFileName(DocumentProperties.File, TRUE, FALSE, FileExtension) THEN
          FileToUpload := DocumentProperties.File + FileExtension;
      END;
      EXIT(FileToUpload);
    END;

    PROCEDURE SetQuoteDocumentFileToUpload@1100528374(DocumentProperties@1100528301 : Record 11012746) : Text[250];
    VAR
      FileToUpload@1100528300 : Text[250];
    BEGIN
      FileToUpload := DocumentProperties.GetStorageURI;
      EXIT(FileToUpload);
    END;

    LOCAL PROCEDURE SetRelation@1100528350(Contact@1100528300 : Record 5050;VAR Relation@1100528301 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.Relation" RUNONCLIENT;OptionCaptionArray@1100528303 : ARRAY [10] OF Text[250]);
    BEGIN
      //Not used
      Contact.CALCFIELDS("Name Purchaser", "Name Salesperson");
      IF (NOT ISNULL(Relation)) THEN
        CLEAR(Relation);
      Relation := Relation.Relation;

      Relation.Number := Contact."No.";
      Relation.Type := OptionCaptionArray[Contact.Type + 1];
      Relation.CompanyName := Contact."Company Name";
      Relation.Name := Contact.Name;
      Relation.Address := Contact.Address;
      Relation.Address2 := Contact."Address 2";
      Relation.PostCode := Contact."Post Code";
      Relation.City := Contact.City;
      Relation.Email := Contact."E-Mail";
      Relation.PhoneNumber := Contact."Phone No. 2";
      Relation.MobilePhoneNumber := Contact."Mobile Phone No. 2";
      Relation.Salesperson := Contact."Salesperson Code";
      Relation.SalespersonName := Contact."Name Salesperson";
      Relation.Purchaser := Contact."Purchaser Code";
      Relation.PurchaserName := Contact."Name Purchaser";
      Relation.VisitAddress := Contact."Visit Address";
      Relation.VisitAddress2 := Contact."Visit Address 2";
      Relation.VisitPostCode := Contact."Visit Address Post Code";
      Relation.VisitCity := Contact."Visit Address City";
    END;

    PROCEDURE SetWebServiceProperties@1100528320(Password@1100528300 : Text[30];VAR DocumentSite@1100528309 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.ProjectSite" RUNONCLIENT;VAR ErrorString@1100528308 : Text;VAR CallStack@1100528305 : Text) : Boolean;
    VAR
      StringFunctions@1100528303 : Codeunit 11012273;
      UserDomain@1100528302 : Text[30];
      User_Id@1100528301 : Text[30];
      SplitArray@1100528304 : ARRAY [10] OF Text[100];
      URL@1100528307 : Text[250];
      WebServiceName@1100528306 : ARRAY [10] OF Text[260];
    BEGIN
      CheckLicense;
      IF (Password = '') THEN
        ERROR(Text000);
      CheckDocumentPortalSetup;
      URL := SharePointSetup4PS."Webservice URL";
      IF (StringFunctions.RSTRPOS(LOWERCASE(URL), '/services') > 0) THEN
        URL := COPYSTR(URL, 1, StringFunctions.RSTRPOS(LOWERCASE(URL), '/services'));
      StringFunctions.SplitString(SharePointSetup4PS."Webservice User ID", '\', SplitArray);
      UserDomain := SplitArray[1];
      User_Id := SplitArray[2];
      FillWebServiceName(WebServiceName);

      CallStack := 'LoginLandingsPage';
      DebugDotNetProperties(CallStack, SharePointSetup4PS."Portal URL", '', '', '', '', '', '', '', '');
      IF (NOT DocumentSite.LoginLandingsPage(SharePointSetup4PS."Portal URL", ErrorString)) THEN
        EXIT(FALSE);
      CallStack := 'SetSharePointWebService';
      DebugDotNetProperties(CallStack, SharePointSetup4PS."Owner ID", SharePointSetup4PS."Owner Password",
        SharePointSetup4PS."Owner Domain", '', '', '', '', '', '');
      IF (NOT DocumentSite.SetSharePointWebService(SharePointSetup4PS."Owner ID", SharePointSetup4PS."Owner Password",
        SharePointSetup4PS."Owner Domain", ErrorString))
      THEN
        EXIT(FALSE);
      CallStack := 'SetWebServiceConnection';
      DebugDotNetProperties(CallStack, URL + WebServiceName[1], URL + WebServiceName[2], UserDomain, User_Id, Password, '', '', '', '');
      IF (NOT DocumentSite.SetWebServiceConnection(URL + WebServiceName[1], URL + WebServiceName[2],
        UserDomain, User_Id, Password, ErrorString))
      THEN
        EXIT(FALSE);
      EXIT(TRUE);
    END;

    PROCEDURE SetFBAProperties@1100525019(Password@1100525000 : Text[30];VAR DocumentSite@1100528302 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.ProjectSite" RUNONCLIENT;VAR ErrorString@1100528301 : Text;VAR CallStack@1100528300 : Text) : Boolean;
    BEGIN
      CheckLicense;
      IF (Password = '') THEN
        ERROR(Text000);
      CheckDocumentPortalSetup;

      CallStack := 'LoginLandingsPage';
      DebugDotNetProperties(CallStack, SharePointSetup4PS."Portal URL", '', '', '', '', '', '', '', '');
      IF (NOT DocumentSite.LoginLandingsPage(SharePointSetup4PS."Portal URL", ErrorString)) THEN
        EXIT(FALSE);
      CallStack := 'SetFbaConnection';
      DebugDotNetProperties(CallStack, SharePointSetup4PS."FBA Server", SharePointSetup4PS."FBA Database",
        SharePointSetup4PS."FBA User ID", Password, SharePointSetup4PS."FBA Membership Provider", '', '', '', '');
      IF (NOT DocumentSite.SetFbaConnection(SharePointSetup4PS."FBA Server", SharePointSetup4PS."FBA Database",
        SharePointSetup4PS."FBA User ID", Password, SharePointSetup4PS."FBA Membership Provider", ErrorString))
      THEN
        EXIT(FALSE);
      EXIT(TRUE);
    END;

    PROCEDURE SetGlobalPropertiesPPT@1100528382(VAR DocumentSite@1100528303 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.ProjectSite" RUNONCLIENT;VAR ErrorString@1100528302 : Text;VAR CallStack@1100528301 : Text) : Boolean;
    BEGIN
      CheckLicense;
      CallStack := 'LoginLandingsPage';
      DebugDotNetProperties(CallStack, SharePointSetup4PS."Portal URL", '', '', '', '', '', '', '', '');
      IF (NOT DocumentSite.LoginLandingsPage(SharePointSetup4PS."Portal URL", ErrorString)) THEN
        EXIT(FALSE);
      CallStack := 'SetDocumentTransferProperties';
      DebugDotNetProperties(CallStack, FORMAT(SharePointSetup4PS."Download Threshold"), FORMAT(SharePointSetup4PS."Storage Threshold"), '', '', '', '', '', '', '');
      IF (NOT DocumentSite.SetDocumentTransferProperties(FORMAT(SharePointSetup4PS."Download Threshold"),
          FORMAT(SharePointSetup4PS."Storage Threshold"), ErrorString))
      THEN
        EXIT(FALSE);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE SetOptionCaptionString@1100528411(VAR OptionArray@1100525003 : ARRAY [10] OF Text[250];VAR OptionCaptionArray@1100525002 : ARRAY [10] OF Text[250];LanguageId@1100525008 : Integer) : Boolean;
    VAR
      RespPersPermPPT@1100525007 : Record 11229812;
      StringFunctions@1100525006 : Codeunit 11012273;
      RecRef@1100525005 : RecordRef;
      FieldRef@1100525004 : FieldRef;
      SaveLanguageId@1100525001 : Integer;
      I@1100525000 : Integer;
    BEGIN
      SaveLanguageId := GLOBALLANGUAGE;
      GLOBALLANGUAGE(SharePointSetup4PS."Language ID");
      RecRef.GETTABLE(RespPersPermPPT);
      WHILE (I <= RecRef.FIELDCOUNT) DO BEGIN
        I += 1;
        FieldRef := RecRef.FIELDINDEX(I);
        IF (FieldRef.NUMBER = RespPersPermPPT.FIELDNO("Permission Level"))
        THEN BEGIN
          StringFunctions.SplitString(FieldRef.OPTIONSTRING, ',', OptionArray);
          StringFunctions.SplitString(FieldRef.OPTIONCAPTION, ',', OptionCaptionArray);
          GLOBALLANGUAGE(SaveLanguageId);
          EXIT(TRUE);
        END;
      END;
      GLOBALLANGUAGE(SaveLanguageId);
      EXIT(FALSE);
    END;

    PROCEDURE CheckFBAConnection@1100528403(VAR DocumentSite@1100528302 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.ProjectSite" RUNONCLIENT;VAR ErrorString@1100528301 : Text;VAR CallStack@1100528300 : Text) : Boolean;
    BEGIN
      CheckLicense;
      CheckDocumentPortalSetup;

      CallStack := 'LoginLandingsPage';
      DebugDotNetProperties(CallStack, SharePointSetup4PS."Portal URL", '', '', '', '', '', '', '', '');
      IF (NOT DocumentSite.LoginLandingsPage(SharePointSetup4PS."Portal URL", ErrorString)) THEN
        EXIT(FALSE);
      CallStack := 'CheckFbaConnection';
      IF (NOT DocumentSite.CheckFbaConnection(ErrorString)) THEN
        EXIT(FALSE);
      MESSAGE(Text011);
      EXIT(TRUE);
    END;

    PROCEDURE CheckLicense@1100528397();
    VAR
      LicensePermission@1100525000 : Record 2000000043;
    BEGIN
      CASE ThisGlobalSubsiteType OF
        ThisGlobalSubsiteType::Project: BEGIN
          IF (NOT LicensePermission.GET(LicensePermission."Object Type"::Codeunit, CODEUNIT::"Document Portal Project")) THEN
            ERROR(Text008);
          IF (LicensePermission."Execute Permission" = LicensePermission."Execute Permission"::" ") THEN
            ERROR(Text008);
        END;
        ThisGlobalSubsiteType::ServLoc: BEGIN
          IF (NOT LicensePermission.GET(LicensePermission."Object Type"::Codeunit, CODEUNIT::"Document Portal Project")) THEN
            ERROR(Text009);
          IF (LicensePermission."Execute Permission" = LicensePermission."Execute Permission"::" ") THEN
            ERROR(Text009);
        END;
        ELSE
          ERROR(Text010);
      END;
      SharePointSetup4PS.GET;
    END;

    PROCEDURE CheckDocumentPortalSetup@1100525005();
    VAR
      Language@1100525000 : Record 8;
      UserSetup@1100525001 : Record 91;
      DocumentMgtSetup@1100528300 : Record 11071831;
    BEGIN
      CheckLicense;
      DocumentMgtSetup.GET;
      DocumentMgtSetup.TESTFIELD("Documentation System", 0);

      IF (SharePointSetup4PS."SharePoint Version" < SharePointSetup4PS."SharePoint Version"::"SharePoint 2013") THEN
        SharePointSetup4PS.FIELDERROR("SharePoint Version");
      SharePointSetup4PS.TESTFIELD("Portal URL");
      SharePointSetup4PS.TESTFIELD("Webservice URL");
      SharePointSetup4PS.TESTFIELD("Portal URL Suffix");
      SharePointSetup4PS.TESTFIELD("Language ID");
      SharePointSetup4PS.TESTFIELD("Owner ID");
      SharePointSetup4PS.TESTFIELD("Owner Password");
      SharePointSetup4PS.TESTFIELD("Webservice User ID");
      CASE ThisGlobalSubsiteType OF
        ThisGlobalSubsiteType::Project:
          SharePointSetup4PS.TESTFIELD("Use Project Portal", TRUE);
        ThisGlobalSubsiteType:: ServLoc:
          SharePointSetup4PS.TESTFIELD("Use Location Portal", TRUE);
      END;

      UserSetup.SETRANGE("User ID", SharePointSetup4PS."Webservice User ID");
      UserSetup.FINDFIRST;
      UserSetup.SETRANGE("User ID", USERID);
      UserSetup.FINDFIRST;

      Language.SETRANGE("Windows Language ID", SharePointSetup4PS."Language ID");
      IF (Language.COUNT <> 1) THEN
        ERROR(Text001, Language.TABLECAPTION, SharePointSetup4PS.FIELDCAPTION("Language ID"),
          SharePointSetup4PS."Language ID");

      CheckViewAndMetaDataList;
    END;

    PROCEDURE CheckFBASetup@1100528406();
    BEGIN
      SharePointSetup4PS.GET;
      SharePointSetup4PS.TESTFIELD("FBA Membership Provider");
      SharePointSetup4PS.TESTFIELD("FBA Server");
      SharePointSetup4PS.TESTFIELD("FBA Database");
      SharePointSetup4PS.TESTFIELD("FBA User ID");
    END;

    PROCEDURE CheckMailSetup@1100528405();
    VAR
      MailTemplate@1100409002 : Record 11229450;
      SMTPMailSetup@1100409000 : Record 409;
    BEGIN
      SMTPMailSetup.GET;
      SMTPMailSetup.TESTFIELD("SMTP Server");
      SMTPMailSetup.TESTFIELD("SMTP Server Port");

      MailTemplate.GET(47, '');
      MailTemplate.GET(48, '');
      MailTemplate.GET(49, '');
      MailTemplate.GET(50, '');
    END;

    PROCEDURE CheckMailLanguageSetup@1100525011(iUsage@1100525000 : Option);
    VAR
      Language@1100525002 : Record 8;
      MailTemplate@1100528300 : Record 11229450;
      MailTemplateManagement@1100525003 : Codeunit 11012622;
    BEGIN
      SharePointSetup4PS.GET;
      IF (MailTemplate.GET(iUsage, '')) THEN
        MailTemplate.INIT;
      Language.SETRANGE("Windows Language ID", SharePointSetup4PS."Language ID");
      IF (Language.COUNT <> 1) THEN
        ERROR(Text002, Language.TABLECAPTION, SharePointSetup4PS."Language ID", MailTemplate.Description);
      Language.FINDFIRST;

      IF (NOT MailTemplateManagement.CheckMailTemplate(iUsage, FALSE)) THEN
        ERROR(Text003, MailTemplate.TABLECAPTION, Language.TABLECAPTION, SharePointSetup4PS."Language ID");
    END;

    PROCEDURE CheckSearchCenter@1100528402();
    VAR
      ProjectPortalMetadata@1100525001 : Record 11229818;
    BEGIN
      CheckLicense;
      ProjectPortalMetadata.SETCURRENTKEY(Searchable, "Refiner Position");
      ProjectPortalMetadata.SETRANGE(Searchable, TRUE);
      ProjectPortalMetadata.SETRANGE("Subsite Type", GlobalSubsiteType);
      IF (NOT ProjectPortalMetadata.FINDSET) THEN
        EXIT;

      REPEAT
        ProjectPortalMetadata.TESTFIELD("Refiner Code");
        ProjectPortalMetadata.TESTFIELD("Refiner Description");
        ProjectPortalMetadata.TESTFIELD("Refiner Type");
        ProjectPortalMetadata.TESTFIELD("Refiner Position");
      UNTIL (ProjectPortalMetadata.NEXT = 0);
    END;

    PROCEDURE CheckViewAndMetaDataList@1100528404();
    VAR
      ProjectPortalMetadata@1100525001 : Record 11229818;
      AdditionalDataPPT@1100528301 : Record 11229820;
      AdditionalDataOptionPPT@1100528300 : Record 11229821;
    BEGIN
      CheckLicense;
      ProjectPortalMetadata.SETCURRENTKEY("Show in View", Position);
      ProjectPortalMetadata.SETRANGE("Show in View", TRUE);
      ProjectPortalMetadata.SETRANGE("Subsite Type", GlobalSubsiteType);
      ProjectPortalMetadata.FINDSET;
      REPEAT
        ProjectPortalMetadata.TESTFIELD(Description);
        ProjectPortalMetadata.TESTFIELD(Position);
      UNTIL (ProjectPortalMetadata.NEXT = 0);

      ProjectPortalMetadata.RESET;
      ProjectPortalMetadata.SETRANGE("Standard Data", FALSE);
      ProjectPortalMetadata.SETRANGE("View Allowed", TRUE);
      IF (ProjectPortalMetadata.FINDSET) THEN BEGIN
        REPEAT
          AdditionalDataPPT.GET(GlobalSubsiteType, ProjectPortalMetadata.Code);
          IF (AdditionalDataPPT.Type = AdditionalDataPPT.Type::Option) THEN BEGIN
            AdditionalDataOptionPPT.SETRANGE("Additional Data Code", AdditionalDataPPT.Code);
            AdditionalDataOptionPPT.SETRANGE("Language Id", SharePointSetup4PS."Language ID");
            AdditionalDataOptionPPT.FINDFIRST;
          END;
        UNTIL (ProjectPortalMetadata.NEXT = 0);
      END;
    END;

    PROCEDURE CheckPassword@1100528000(Password@1100528000 : Text);
    BEGIN
      SharePointSetup4PS.GET;
      IF (SharePointSetup4PS."Owner Password" = '') THEN
        ERROR(Text007);
      IF (Password <> SharePointSetup4PS."Owner Password") THEN
        ERROR(Text007);
    END;

    LOCAL PROCEDURE CheckAllDocumentTypes@1100525000();
    VAR
      ProjectPortalSubsite@1100525000 : Record 11229810;
    BEGIN
      ProjectPortalSubsite.SETRANGE(Type, GlobalSubsiteType);
      IF (NOT ProjectPortalSubsite.FINDSET) THEN
        EXIT;
      REPEAT
        CheckDocumentTypes(ProjectPortalSubsite.Code);
      UNTIL (ProjectPortalSubsite.NEXT = 0);
    END;

    LOCAL PROCEDURE CheckDocumentTypes@1100525001(SubSite@1100525002 : Code[20]);
    VAR
      SubsiteDocTypePPT@1100525000 : Record 11229811;
      DocumentType@1100525001 : Record 11012405;
    BEGIN
      SubsiteDocTypePPT.SETRANGE("Subsite Type", GlobalSubsiteType);
      SubsiteDocTypePPT.SETRANGE("Project Portal Subsite", SubSite);
      IF (NOT SubsiteDocTypePPT.FINDSET) THEN
        EXIT;
      REPEAT
        DocumentType.GET(SubsiteDocTypePPT."Document Type");
        DocumentType.TESTFIELD(Description);
      UNTIL (SubsiteDocTypePPT.NEXT = 0);
    END;

    PROCEDURE AddAuthorisations@1100528409(VAR OptionArray@1100528301 : ARRAY [10] OF Text[250];VAR OptionCaptionArray@1100528300 : ARRAY [10] OF Text[250];VAR DocumentSite@1100528305 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.ProjectSite" RUNONCLIENT;VAR ErrorString@1100528304 : Text;VAR CallStack@1100528303 : Text) : Boolean;
    VAR
      I@1100525002 : Integer;
    BEGIN
      SharePointSetup4PS.GET;
      IF (NOT SetOptionCaptionString(OptionArray, OptionCaptionArray, SharePointSetup4PS."Language ID")) THEN
        SetOptionCaptionString(OptionArray, OptionCaptionArray, 1033); //English-US

      CallStack := 'AddAuthorisationInfoToList';
      FOR I := 1 TO ARRAYLEN(OptionArray) DO BEGIN
        IF (OptionArray[I] <> '') THEN BEGIN
          DebugDotNetProperties(CallStack, OptionCaptionArray[I], OptionArray[I], '', '', '', '', '', '', '');
          IF (NOT DocumentSite.AddAuthorisationInfoToList(OptionCaptionArray[I], OptionArray[I], ErrorString)) THEN
            EXIT(FALSE);
        END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE AddAllDocumentTypesPerSubsite@1100528303(Job@1100528301 : Record 11072003;VAR DocumentSite@1100528304 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.ProjectSite" RUNONCLIENT;VAR ErrorString@1100528303 : Text;VAR CallStack@1100528302 : Text) : Boolean;
    VAR
      ProjectPortalSubsite@1100528305 : Record 11229810;
      SubsiteDocTypePPT@1100528300 : Record 11229811;
    BEGIN
      CheckAllDocumentTypes;
      CheckLicense;
      CallStack := 'ClearDocumentTypeList';
      IF (NOT DocumentSite.ClearDocumentTypeList(ErrorString)) THEN
        EXIT(FALSE);

      ProjectPortalSubsite.SETRANGE(Type, GlobalSubsiteType);
      ProjectPortalSubsite.SETRANGE("Quote Request Subsite", FALSE);
      IF (NOT ProjectPortalSubsite.FINDSET) THEN
        EXIT;

      REPEAT
        SubsiteDocTypePPT.SETRANGE("Subsite Type", ProjectPortalSubsite.Type);
        SubsiteDocTypePPT.SETRANGE("Project Portal Subsite", ProjectPortalSubsite.Code);
        IF (SubsiteDocTypePPT.FINDSET) THEN BEGIN
          CallStack := 'AddDocumentTypeToListForSite';
          REPEAT
            SubsiteDocTypePPT.CALCFIELDS("Document Type Description");
            DebugDotNetProperties(CallStack, ProjectPortalSubsite.Code, SubsiteDocTypePPT."Document Type Description",
              GetProjectPortalGuidFromDocType(SubsiteDocTypePPT."Document Type"), '', '', '', '', '', '');
            IF (NOT DocumentSite.AddDocumentTypeToListForSite(ProjectPortalSubsite.Code, SubsiteDocTypePPT."Document Type Description",
              GetProjectPortalGuidFromDocType(SubsiteDocTypePPT."Document Type"), ErrorString))
            THEN
              EXIT(FALSE);
          UNTIL (SubsiteDocTypePPT.NEXT = 0);
        END;
      UNTIL (ProjectPortalSubsite.NEXT = 0);
      EXIT(TRUE);
    END;

    PROCEDURE AddDocumentTypes@1100528408(ProjectPortalSubsiteCode@1100528301 : Code[20];VAR DocumentSite@1100528304 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.ProjectSite" RUNONCLIENT;VAR ErrorString@1100528303 : Text;VAR CallStack@1100528302 : Text) : Boolean;
    VAR
      SubsiteDocTypePPT@1100528300 : Record 11229811;
    BEGIN
      CheckDocumentTypes(ProjectPortalSubsiteCode);
      CheckLicense;
      SubsiteDocTypePPT.SETRANGE("Subsite Type", GlobalSubsiteType);
      SubsiteDocTypePPT.SETRANGE("Project Portal Subsite", ProjectPortalSubsiteCode);
      IF (NOT SubsiteDocTypePPT.FINDSET) THEN
        EXIT(TRUE);

      CallStack := 'ClearDocumentTypeList';
      IF (NOT DocumentSite.ClearDocumentTypeList(ErrorString)) THEN
        EXIT(FALSE);

      CallStack := 'AddDocumentTypeToList';
      REPEAT
        SubsiteDocTypePPT.CALCFIELDS("Document Type Description");
        CallStack := 'AddDocumentTypeToList';
        DebugDotNetProperties(CallStack, SubsiteDocTypePPT."Document Type Description",
          GetProjectPortalGuidFromDocType(SubsiteDocTypePPT."Document Type"), '', '', '', '', '', '', '');
        IF (NOT DocumentSite.AddDocumentTypeToList(SubsiteDocTypePPT."Document Type Description",
          GetProjectPortalGuidFromDocType(SubsiteDocTypePPT."Document Type"), ErrorString))
        THEN
          EXIT(FALSE);
      UNTIL (SubsiteDocTypePPT.NEXT = 0);

      CallStack := 'SetDocumentTypes';
      DebugDotNetProperties(CallStack, ProjectPortalSubsiteCode, '', '', '', '', '', '', '', '');
      IF (NOT DocumentSite.SetDocumentTypes(ProjectPortalSubsiteCode, ErrorString)) THEN
        EXIT(FALSE);
      EXIT(TRUE);
    END;

    PROCEDURE AddDocumentStatuses@1100528385(ProjectPortalSubsiteCode@1100528300 : Code[20];VAR DocumentSite@1100528303 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.ProjectSite" RUNONCLIENT;VAR ErrorString@1100528302 : Text;VAR CallStack@1100528301 : Text) : Boolean;
    VAR
      DocumentProperties@1100528306 : Record 11012746;
      StringFunctions@1100528309 : Codeunit 11012273;
      OptionCaptionArray@1100528310 : ARRAY [10] OF Text[250];
      SaveLanguageId@1100528304 : Integer;
      I@1100528307 : Integer;
      RecRef@1100528305 : RecordRef;
      FieldRef@1100528308 : FieldRef;
    BEGIN
      CheckLicense;  //#T006823.sn
      CallStack := 'ClearDocumentStatusList';
      IF (NOT DocumentSite.ClearDocumentStatusList(ErrorString)) THEN
        EXIT(FALSE);

      SaveLanguageId := GLOBALLANGUAGE;
      GLOBALLANGUAGE(SharePointSetup4PS."Language ID");
      RecRef.GETTABLE(DocumentProperties);

      WHILE (I <= RecRef.FIELDCOUNT) DO BEGIN
        I += 1;
        FieldRef := RecRef.FIELDINDEX(I);
        IF (FieldRef.NUMBER = DocumentProperties.FIELDNO(Status)) THEN BEGIN
          StringFunctions.SplitString(FieldRef.OPTIONCAPTION, ',', OptionCaptionArray);
          I := RecRef.FIELDCOUNT + 1;
        END;
      END;
      GLOBALLANGUAGE(SaveLanguageId);

      CallStack := 'AddDocumentStatusToList';
      FOR I := 1 TO ARRAYLEN(OptionCaptionArray) DO BEGIN
        IF (OptionCaptionArray[I] <> '') OR (I = 1) THEN BEGIN
          DebugDotNetProperties(CallStack, OptionCaptionArray[I], FORMAT(I-1), '', '', '', '', '', '', '');
          IF (NOT DocumentSite.AddDocumentStatusToList(OptionCaptionArray[I], FORMAT(I-1), ErrorString)) THEN
            EXIT(FALSE);
        END;
      END;

      CallStack := 'SetDocumentStatus';
      DebugDotNetProperties(CallStack, ProjectPortalSubsiteCode, '', '', '', '', '', '', '', '');
      IF (NOT DocumentSite.SetDocumentStatus(ProjectPortalSubsiteCode, ErrorString)) THEN
        EXIT(FALSE);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ComposeCssLine@1100525032(Type@1100525000 : Integer;Color@1100525001 : Integer;Color2@1100525005 : Integer;VAR TextLine@1100525002 : Text) : Boolean;
    VAR
      OperatingSystemMgt@1100525003 : Codeunit 11012364;
    BEGIN
      TextLine := '';
      IF (Color <= 0) THEN
        EXIT(FALSE);

      CASE Type OF
        1: TextLine := STRSUBSTNO('.Header-Background-PPT{background-color:#%1;}', OperatingSystemMgt.GetHexColor(Color));
        2: TextLine := STRSUBSTNO('.PPT-pageTitle{color:#%1;}', OperatingSystemMgt.GetHexColor(Color));
        3: TextLine := STRSUBSTNO('.ms-core-overlay{background-color:#%1;}', OperatingSystemMgt.GetHexColor(Color));
        4: BEGIN
          TextLine := STRSUBSTNO('.ms-core-listMenu-horizontalBox li.static > ' +
                                 '.ms-core-listMenu-item{background-color:#%1;color:#%2;}',
            OperatingSystemMgt.GetHexColor(Color), OperatingSystemMgt.GetHexColor(Color2));
        END;
        5: BEGIN
          TextLine := STRSUBSTNO('.ms-core-listMenu-horizontalBox li.static > ' +
                                 '.ms-core-listMenu-item:hover{background-color:#%1;color:#%2;}',
            OperatingSystemMgt.GetHexColor(Color), OperatingSystemMgt.GetHexColor(Color2));
        END;
        6: BEGIN
          TextLine := STRSUBSTNO('.ms-core-listMenu-horizontalBox li.selected > ' +
                                 '.ms-core-listMenu-item{background-color:#%1;color:#%2;}',
            OperatingSystemMgt.GetHexColor(Color), OperatingSystemMgt.GetHexColor(Color2));
        END;
        7: TextLine := STRSUBSTNO('.ms-webpartzone-cell{background-color:#%1;}', OperatingSystemMgt.GetHexColor(Color));
        8: TextLine := STRSUBSTNO('.ms-rtestate-field h1, h1.ms-rteElement-H1, ' +
                                  '.msrtestate-fieldh2, h2.ms-rteElement-H2{color:#%1;}' +
          OperatingSystemMgt.GetHexColor(Color));
        9: TextLine := STRSUBSTNO('.ms-webpart-titleText.ms-webpart-titleText, .ms-webpart-titleText > a{color:#%1;}',
          OperatingSystemMgt.GetHexColor(Color));
        10: BEGIN
          TextLine := STRSUBSTNO('.ms-core-listMenu-verticalBox UL.root > LI > .menu-item{background-color:#%1;color:#%2;}',
            OperatingSystemMgt.GetHexColor(Color), OperatingSystemMgt.GetHexColor(Color2));
        END;
        11: TextLine := STRSUBSTNO('.ms-core-listMenu-verticalBox > ul.root > li.static > ul.static > li > a{color:#%1;}',
          OperatingSystemMgt.GetHexColor(Color));
        12: BEGIN
          TextLine := STRSUBSTNO('.ms-core-listMenu-verticalBox > ul.root > li.static > ul.static > li.static > ' +
                                 'a:hover{background-color:#%1;color:#%2 !important;}',
            OperatingSystemMgt.GetHexColor(Color), OperatingSystemMgt.GetHexColor(Color2));
        END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE CreateCssFile@1100525028() FileName : Text;
    VAR
      SharePointSetup4PS@1100528300 : Record 11012730;
      FileSystemOnPremiseSetup@1100528301 : Record 11125739;
      FileOut@1100525001 : File;
      FileMgt@1100525002 : Codeunit 419;
      TextLine@1100525003 : Text;
      ServerFileName@1100525004 : Text;
    BEGIN
      FileSystemOnPremiseSetup.GET;
      FileSystemOnPremiseSetup.TESTFIELD("Default Ext. Doc. Directory");
      SharePointSetup4PS.GET;
      FileName := FileSystemOnPremiseSetup."Default Ext. Doc. Directory" + 'PPT-Colours.css';
      SharePointSetup4PS.GET;
      ServerFileName := FileMgt.ServerTempFileName('css');
      CLEAR(FileOut);
      FileOut.WRITEMODE(TRUE);
      FileOut.TEXTMODE(TRUE);
      FileOut.CREATE(ServerFileName);

      IF (ComposeCssLine(1, SharePointSetup4PS."Header Background Color", 0, TextLine)) THEN
        FileOut.WRITE(TextLine);
      IF (ComposeCssLine(2, SharePointSetup4PS."Header Title Color", 0, TextLine)) THEN
        FileOut.WRITE(TextLine);
      IF (ComposeCssLine(3, SharePointSetup4PS."Background Color", 0, TextLine)) THEN
        FileOut.WRITE(TextLine);
      IF (ComposeCssLine(4, SharePointSetup4PS."SubSite Background Color", SharePointSetup4PS."SubSite Letter Color", TextLine)) THEN
        FileOut.WRITE(TextLine);
      IF (ComposeCssLine(5, SharePointSetup4PS."Roll Over SubSite Backgr Color", SharePointSetup4PS."Roll Over SubSite Letter Color", TextLine)) THEN
        FileOut.WRITE(TextLine);
      IF (ComposeCssLine(6, SharePointSetup4PS."Selected SubSite Backgr Color", SharePointSetup4PS."Selected SubSite Letter Color", TextLine)) THEN
        FileOut.WRITE(TextLine);
      IF (ComposeCssLine(7, SharePointSetup4PS."Web Part Background Color", 0, TextLine)) THEN
        FileOut.WRITE(TextLine);
      IF (ComposeCssLine(8, SharePointSetup4PS."Web Part Text Color", 0, TextLine)) THEN
        FileOut.WRITE(TextLine);
      IF (ComposeCssLine(9, SharePointSetup4PS."Web Part Title Color", 0, TextLine)) THEN
        FileOut.WRITE(TextLine);
      IF (ComposeCssLine(10, SharePointSetup4PS."Library Title Background Color", SharePointSetup4PS."Library Title Letter Color", TextLine)) THEN
        FileOut.WRITE(TextLine);
      IF (ComposeCssLine(11, SharePointSetup4PS."Library Color", 0, TextLine)) THEN
        FileOut.WRITE(TextLine);
      IF (ComposeCssLine(12, SharePointSetup4PS."Roll Over Library Backgr Color", SharePointSetup4PS."Roll Over Library Title Color", TextLine)) THEN
        FileOut.WRITE(TextLine);

      FileOut.CLOSE;
      FileMgt.DownloadToFile(ServerFileName, FileName);
      EXIT(FileName);
    END;

    PROCEDURE FillRefinerList@1100528305(VAR DocumentSite@1100528302 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.ProjectSite" RUNONCLIENT;VAR ErrorString@1100528301 : Text;VAR CallStack@1100528300 : Text) : Boolean;
    VAR
      ProjectPortalMetadata@1100525001 : Record 11229818;
      MetadataTranslationPPT@1100525000 : Record 11229819;
      RefinerDisplayName@1100525003 : Text;
      RefinerType@1100525002 : Text;
    BEGIN
      CheckLicense;
      CallStack := 'ClearRefinerList';
      IF (NOT DocumentSite.ClearRefinerList(ErrorString)) THEN
        EXIT(FALSE);

      ProjectPortalMetadata.SETCURRENTKEY(Searchable, "Refiner Position");
      ProjectPortalMetadata.SETRANGE("Subsite Type", GlobalSubsiteType);
      ProjectPortalMetadata.SETRANGE("Search Allowed", TRUE);
      ProjectPortalMetadata.SETRANGE(Searchable, TRUE);
      ProjectPortalMetadata.SETFILTER("Refiner Position", '>%1', 0);
      ProjectPortalMetadata.SETFILTER("Refiner Code", '<>%1', '');
      ProjectPortalMetadata.SETFILTER("Refiner Description", '<>%1', '');
      ProjectPortalMetadata.SETFILTER("Refiner Type", '>%1', 0);
      IF (NOT ProjectPortalMetadata.FINDSET) THEN
        EXIT(TRUE);

      CallStack := 'RefinerList';
      REPEAT
        RefinerType := 'Text';
        CASE ProjectPortalMetadata."Refiner Type" OF
          ProjectPortalMetadata."Refiner Type"::Value:
            RefinerType := 'Integer';
          ProjectPortalMetadata."Refiner Type"::DateTime:
            RefinerType := 'DateTime';
        END;
        RefinerDisplayName := ProjectPortalMetadata."Refiner Description";
        IF (MetadataTranslationPPT.GET(GlobalSubsiteType, MetadataTranslationPPT.Type::Refiner,
          ProjectPortalMetadata.Code, SharePointSetup4PS."Language ID"))
        THEN
          RefinerDisplayName := MetadataTranslationPPT.Description;
        DebugDotNetProperties(CallStack, ProjectPortalMetadata."Refiner Code", RefinerDisplayName, FORMAT(RefinerType), '', '', '', '', '', '');
        IF (NOT DocumentSite.RefinerList(ProjectPortalMetadata."Refiner Code", RefinerDisplayName, RefinerType, ErrorString)) THEN
          EXIT(FALSE);
      UNTIL (ProjectPortalMetadata.NEXT = 0);
      EXIT(TRUE);
    END;

    PROCEDURE FillViewAndMetaDataList@1100525038(VAR DocumentSite@1100528302 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.ProjectSite" RUNONCLIENT;VAR ErrorString@1100528301 : Text;VAR CallStack@1100528300 : Text) : Boolean;
    VAR
      ProjectPortalMetadata@1100525002 : Record 11229818;
      MetadataTranslationPPT@1100525003 : Record 11229819;
      AdditionaldataPPT@1100525000 : Record 11229820;
      DisplayName@1100525004 : Text;
      MetadataType@1100525001 : Text;
      DateFormat@1100525005 : Boolean;
    BEGIN
      CheckLicense;
      CallStack := 'ClearViewList';
      IF (NOT DocumentSite.ClearViewList(ErrorString)) THEN
        EXIT(FALSE);
      CallStack := 'ClearMetadataList';
      IF (NOT DocumentSite.ClearMetadataList(ErrorString)) THEN
        EXIT(FALSE);

      ProjectPortalMetadata.SETCURRENTKEY("Show in View", Position);
      ProjectPortalMetadata.SETRANGE("Subsite Type", GlobalSubsiteType);
      ProjectPortalMetadata.SETRANGE("View Allowed", TRUE);
      ProjectPortalMetadata.SETFILTER(Description, '<>%1', '');
      IF (NOT ProjectPortalMetadata.FINDSET) THEN
        EXIT(TRUE);

      REPEAT
        DisplayName := ProjectPortalMetadata.Description;
        IF (MetadataTranslationPPT.GET(GlobalSubsiteType, MetadataTranslationPPT.Type::Description,
          ProjectPortalMetadata.Code, SharePointSetup4PS."Language ID"))
        THEN
          DisplayName := MetadataTranslationPPT.Description;
        IF (ProjectPortalMetadata."Show in View") THEN  BEGIN
          CallStack := 'ViewList';
          DebugDotNetProperties(CallStack, ProjectPortalMetadata.Code, '', '', '', '', '', '', '', '');
          IF (NOT DocumentSite.ViewList(ProjectPortalMetadata.Code, ErrorString)) THEN
            EXIT(FALSE);
        END;
        MetadataType := 'Text';
        DateFormat := FALSE;
        IF (ProjectPortalMetadata."Standard Data") THEN BEGIN
          AdditionaldataPPT.INIT;
          CASE ProjectPortalMetadata."Refiner Type" OF
            ProjectPortalMetadata."Refiner Type"::DateTime: BEGIN
              MetadataType := 'DateTime';
              DateFormat := TRUE;
            END
          END;
        END ELSE BEGIN
          AdditionaldataPPT.GET(GlobalSubsiteType, ProjectPortalMetadata.Code);
          CASE AdditionaldataPPT.Type OF
            AdditionaldataPPT.Type::Option: BEGIN
              MetadataType := 'Choice';
              IF (NOT FillChoicesList(AdditionaldataPPT, DocumentSite, ErrorString, CallStack)) THEN
                EXIT(FALSE);
            END;
            AdditionaldataPPT.Type::Value:
              MetadataType := 'Integer';
            AdditionaldataPPT.Type::DateTime: BEGIN
              MetadataType := 'DateTime';
              DateFormat := (AdditionaldataPPT."DateTime Format" = AdditionaldataPPT."DateTime Format"::DateAndTime);
            END
          END;
        END;
        CallStack := 'MetadataList';
        DebugDotNetProperties(CallStack, ProjectPortalMetadata.Code, DisplayName, MetadataType, FORMAT(ProjectPortalMetadata.Mandatory),
          FORMAT(ProjectPortalMetadata."Show in View"), FORMAT(DateFormat), FORMAT(AdditionaldataPPT."Minimum Value"),
          FORMAT(AdditionaldataPPT."Maximum Value"), '');
        CASE ProjectPortalMetadata.Code OF
          'SCModifiedByRelation':
            IF (NOT DocumentSite.MetadataList(ProjectPortalMetadata.Code, DisplayName, MetadataType,
              ProjectPortalMetadata.Mandatory, FALSE, DateFormat,
              AdditionaldataPPT."Minimum Value", AdditionaldataPPT."Maximum Value", ErrorString))
            THEN
              EXIT(FALSE);
          ELSE
            IF (NOT DocumentSite.MetadataList(ProjectPortalMetadata.Code, DisplayName, MetadataType,
              ProjectPortalMetadata.Mandatory, ProjectPortalMetadata."Show in View", DateFormat,
              AdditionaldataPPT."Minimum Value", AdditionaldataPPT."Maximum Value", ErrorString))
            THEN
              EXIT(FALSE);
        END;
        CallStack := 'ClearChoicesList';
        IF (NOT DocumentSite.ClearChoicesList(ErrorString)) THEN
          EXIT(FALSE);
      UNTIL (ProjectPortalMetadata.NEXT = 0);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE FillChoicesList@1100525040(AdditionalDataPPT@1100525000 : Record 11229820;VAR DocumentSite@1100528302 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.ProjectSite" RUNONCLIENT;VAR ErrorString@1100528301 : Text;VAR CallStack@1100528300 : Text) : Boolean;
    VAR
      AdditionalDataOptionPPT@1100525001 : Record 11229821;
    BEGIN
      AdditionalDataOptionPPT.SETRANGE("Subsite Type", AdditionalDataPPT."Subsite Type");
      AdditionalDataOptionPPT.SETRANGE("Additional Data Code", AdditionalDataPPT.Code);
      AdditionalDataOptionPPT.SETRANGE("Language Id", SharePointSetup4PS."Language ID");
      IF (NOT AdditionalDataOptionPPT.FINDSET) THEN
        EXIT;
      CallStack := 'ChoicesList';
      REPEAT
        DebugDotNetProperties(CallStack, AdditionalDataOptionPPT.Option, '', '', '', '', '', '', '', '');
        IF (NOT DocumentSite.ChoicesList(AdditionalDataOptionPPT.Option, ErrorString)) THEN
          EXIT(FALSE);
      UNTIL (AdditionalDataOptionPPT.NEXT = 0);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE FillWebServiceName@1100528379(VAR ServiceNames@1100528300 : ARRAY [10] OF Text[260]);
    VAR
      WebService@1100528301 : Record 2000000076;
    BEGIN
      WebService.SETRANGE(Published, TRUE);
      WebService.SETRANGE("Object Type", WebService."Object Type"::Codeunit);
      WebService.SETRANGE("Object ID", CODEUNIT::"Document Portal Web Services");
      WebService.FINDFIRST;
      ServiceNames[1] := '/Codeunit/' + WebService."Service Name";

      WebService.SETRANGE("Object Type", WebService."Object Type"::Page);
      WebService.SETRANGE("Object ID", PAGE::"Contacts WS");
      WebService.FINDFIRST;
      ServiceNames[2] := '/Page/' + WebService."Service Name";
    END;

    LOCAL PROCEDURE ResetFBAPassword@1100525024(LoginCode@1100525000 : Text[50];VAR DocumentSite@1100528302 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.ProjectSite" RUNONCLIENT;VAR ErrorString@1100528301 : Text;VAR CallStack@1100528300 : Text) : Boolean;
    VAR
      ProjectPortalLogin@1100525001 : Record 11229816;
      Password@1100525003 : Text[30];
    BEGIN
      SharePointSetup4PS.GET;
      CheckFBASetup;
      ProjectPortalLogin.GET(SharePointSetup4PS."FBA Membership Provider", SharePointSetup4PS."FBA Server",
        SharePointSetup4PS."FBA Database", LoginCode);
      IF (ProjectPortalLogin."E-Mail Send On" <> 0DT) THEN
        EXIT(TRUE);
      Password := '';

      CallStack := 'RestPasswordFbaUser';
      DebugDotNetProperties(CallStack, LoginCode, Password, '', '', '', '', '', '', '');
      IF (NOT DocumentSite.ResetPasswordFbaUser(LoginCode, Password, ErrorString)) THEN
          EXIT(FALSE);
      ProjectPortalLogin.Password := Password;
      ProjectPortalLogin.MODIFY(TRUE);
      EXIT(TRUE);
    END;

    PROCEDURE UpdateProjectPortalLogin@1100528361(LoginName@1100528302 : Text[50];Password@1100528303 : Text[100]);
    VAR
      ProjectPortalLogin@1100528301 : Record 11229816;
    BEGIN
      SharePointSetup4PS.GET;
      IF (NOT ProjectPortalLogin.GET(SharePointSetup4PS."FBA Membership Provider",
          SharePointSetup4PS."FBA Server", SharePointSetup4PS."FBA Database", LoginName))
      THEN BEGIN
        ProjectPortalLogin.INIT;
        ProjectPortalLogin."FBA Membership Provider" := SharePointSetup4PS."FBA Membership Provider";
        ProjectPortalLogin."FBA Server" := SharePointSetup4PS."FBA Server";
        ProjectPortalLogin."FBA Database" := SharePointSetup4PS."FBA Database";
        ProjectPortalLogin."Login Code" := LoginName;
        ProjectPortalLogin.INSERT(TRUE);
      END;
      IF (Password <> '') AND (ProjectPortalLogin."E-Mail Send On" = 0DT) THEN BEGIN
        ProjectPortalLogin.Password := Password;
        ProjectPortalLogin.MODIFY(TRUE);
      END;
    END;

    PROCEDURE DebugDotNetProperties@1100528308(Text1@1100528300 : Text;Text2@1100528301 : Text;Text3@1100528302 : Text;Text4@1100528303 : Text;Text5@1100528304 : Text;Text6@1100528305 : Text;Text7@1100528306 : Text;Text8@1100528307 : Text;Text9@1100528308 : Text;Text10@1100528309 : Text);
    VAR
      Counter@1100528310 : Integer;
    BEGIN
      IF (NOT Debug) THEN EXIT;
      FOR Counter := 1 TO 9 DO BEGIN
        CASE Counter OF
          1: DebugText := STRSUBSTNO('%2: %1-%3', Counter, Text1, Text2);
          2: DebugText := STRSUBSTNO('%2: %1-%3', Counter, Text1, Text3);
          3: DebugText := STRSUBSTNO('%2: %1-%3', Counter, Text1, Text4);
          4: DebugText := STRSUBSTNO('%2: %1-%3', Counter, Text1, Text5);
          5: DebugText := STRSUBSTNO('%2: %1-%3', Counter, Text1, Text6);
          6: DebugText := STRSUBSTNO('%2: %1-%3', Counter, Text1, Text7);
          7: DebugText := STRSUBSTNO('%2: %1-%3', Counter, Text1, Text8);
          8: DebugText := STRSUBSTNO('%2: %1-%3', Counter, Text1, Text9);
          9: DebugText := STRSUBSTNO('%2: %1-%3', Counter, Text1, Text10);
        END;
      END;
    END;

    PROCEDURE SetDocumentPropertiesServerSide@1100525002(VAR DocumentProperties@1100525001 : Record 11012746;VAR Document@1100525000 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.Document");
    VAR
      SaveLanguageId@1100525002 : Integer;
    BEGIN
      SharePointSetup4PS.GET;
      DocumentProperties.CALCFIELDS("Modification Date");
      IF (NOT ISNULL(Document)) THEN
        CLEAR(Document);
      Document := Document.Document;

      Document.DocumentId := DocumentProperties."No.";
      Document.Description := DocumentProperties.Description;
      Document.SiteCode := DocumentProperties."Project Portal Subsite";
      Document.DocumentType := GetProjectPortalGuidFromDocType(DocumentProperties."Document Type");
      Document.ElementCode := DocumentProperties."Project Element";
      Document.CompanyId := '';
      Document.CompanyName := '';
      Document.RelationId := DocumentProperties."Contact No.";
      Document.RelationName := DocumentProperties."Contact Name";
      Document.ContactPersonId := DocumentProperties."Contact Person No.";
      Document.ContactPersonName := DocumentProperties."Contact Person Name";
      Document.Name := DocumentProperties.File;
      Document.FileToUpload := '';
      Document.DocumentVersion := '';
      Document.DocumentStatus := '';
      Document.DocumentDate := FORMAT(DocumentProperties."Document Date", 0, 9);
      Document.DocumentNo := DocumentProperties."Document No.";
      SaveLanguageId := GLOBALLANGUAGE;
      GLOBALLANGUAGE(SharePointSetup4PS."Language ID");
      IF (DocumentProperties.Status <> 0) THEN
        Document.DocumentStatus := FORMAT(DocumentProperties.Status);
      GLOBALLANGUAGE(SaveLanguageId);
      Document.ModificationDate := FORMAT(DocumentProperties."Modification Date", 0, 9);

      SetDocumentCompany(DocumentProperties, Document);
      SetPlotNoDocumentProperties(DocumentProperties, Document);
    END;

    LOCAL PROCEDURE SetPlotNoDocumentProperties@1100525003(VAR DocumentProperties@1100525001 : Record 11012746;VAR Document@1100525000 : DotNet "'FPS.Microsoft.SharePoint.Client, Version=4.22.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.FPS.Microsoft.SharePoint.Client.Document");
    VAR
      DocumentLink@1100525002 : Record 11012747;
      RecordRef@1100525003 : RecordRef;
      Plot@1100525004 : Record 11012500;
    BEGIN
      DocumentLink.RESET;
      DocumentLink.SETRANGE("Document No.", DocumentProperties."No.");
      DocumentLink.SETRANGE("Internal Company", DocumentProperties."Internal Company");
      DocumentLink.SETRANGE("Table No.", DATABASE::Plot);

      IF DocumentLink.FINDSET THEN BEGIN
        REPEAT
          RecordRef.GET(DocumentLink."Record ID");
          IF (RecordRef.NUMBER = DATABASE::Plot) THEN BEGIN
            RecordRef.SETTABLE(Plot);
            Document.PlotNumbers.Add(Plot."Plot No.");
          END;
        UNTIL DocumentLink.NEXT = 0;
      END;
    END;

    BEGIN
    END.
  }
}

