OBJECT Table 11229278 Resource (WOP)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    DataCaptionFields=No.,Name;
    OnInsert=VAR
               NoSeries@1100525000 : Code[10];
             BEGIN
               TESTFIELD(Company, COMPANYNAME);
               NoSeries := GetNoSeries();
               IF "No." = '' THEN
                 NoSeriesMgt.InitSeries(NoSeries,xRec."No. Series",0D,"No.","No. Series");
               IF Type = Type::" " THEN
                 Schedule := Schedule::ServiceOrder;
               UpdateResourceDiscipline;
               UpdateSubcontrPortalVendor(0);
             END;

    OnModify=BEGIN
               TESTFIELD(Company, COMPANYNAME);
               IF Type <> Type::" " THEN
                 TESTFIELD("Source No.");
               IF Type = Type::Plant THEN
                 TESTFIELD("Source No. 2");
               UpdateResourceDiscipline;
               UpdateSubcontrPortalVendor(1);
             END;

    OnDelete=VAR
               WorkOrder@1100527002 : Record 11229279;
               DeletedWorkOrderCache@1100527000 : Record 11229281;
               MobileDecentralWorkOrder@1100527001 : Record 11125649;
               ResourceDiscipline@1100528600 : Record 11229286;
               VisibleResourceWOP@1100528601 : Record 11229285;
               Companies@1100409000 : Record 2000000006;
               LinkedResource@1100529000 : Record 11229324;
             BEGIN
               IF Companies.GET(Company) THEN BEGIN
                 TESTFIELD(Company, COMPANYNAME);
                 UpdateSubcontrPortalVendor(2);
               END;

               WorkOrder.SETCURRENTKEY("Resource No.");
               WorkOrder.SETRANGE("Resource No.", "No.");
               WorkOrder.SETRANGE("WO Finished (Field Service)", FALSE);
               IF NOT WorkOrder.ISEMPTY THEN
                 ERROR(Text005, "No.");

               DeletedWorkOrderCache.SETRANGE("Resource No.", "No.");
               DeletedWorkOrderCache.DELETEALL;

               MobileDecentralWorkOrder.SETRANGE("Resource No. (Employee)", "No.");
               MobileDecentralWorkOrder.DELETEALL;

               ResourceDiscipline.SETRANGE("Resource No.", "No.");
               ResourceDiscipline.DELETEALL(TRUE);

               VisibleResourceWOP.SETCURRENTKEY("Resource No.");
               VisibleResourceWOP.SETRANGE("Resource No.", "No.");
               VisibleResourceWOP.DELETEALL;

               LinkedResource.SETRANGE("Main Resource No.", "No.");
               LinkedResource.DELETEALL(FALSE);
               LinkedResource.RESET;
               LinkedResource.SETCURRENTKEY("Resource No.");
               LinkedResource.SETRANGE("Resource No.", "No.");
               LinkedResource.DELETEALL(TRUE);
             END;

    OnRename=BEGIN
               TESTFIELD(Company, COMPANYNAME);
               UpdateSubcontrPortalVendor(3);
             END;

    CaptionML=[ENU=Resource;
               NOR=Ressurs;
               SVE=Resurs];
    LookupPageID=Page11229278;
    DrillDownPageID=Page11229278;
  }
  FIELDS
  {
    { 10  ;   ;No.                 ;Code20        ;AltSearchField=Search Name;
                                                   OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  NoSeriesMgt.TestManual(GetNoSeries());
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=No.;
                                                              NOR=Nr;
                                                              SVE=Nr];
                                                   NotBlank=No }
    { 20  ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                IF (xRec.Type <> Type) THEN BEGIN
                                                                  IF ("Source No." <> '') THEN
                                                                    ValidateSourceNo;
                                                                  IF (Type <> Type::Employee) AND "Link WO to WO Leading Resource" THEN
                                                                    "Link WO to WO Leading Resource" := FALSE;
                                                                  IF (Type <> Type::Plant) AND ("Source No. 2" <> '') THEN
                                                                    "Source No. 2" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              NOR=Radtype;
                                                              SVE=Typ];
                                                   OptionCaptionML=[ENU=" ,Employee,Subcontractor,Plant";
                                                                    SVE=" ,Anst„lld,Underentrepren”r,Maskin"];
                                                   OptionString=[ ,Employee,Subcontractor,Plant] }
    { 30  ;   ;Company             ;Text30        ;TableRelation=Company;
                                                   CaptionML=[ENU=Company;
                                                              NOR=Selskap;
                                                              SVE=F”retag];
                                                   Editable=No }
    { 40  ;   ;Source No.          ;Code20        ;OnValidate=BEGIN
                                                                ValidateSourceNo();
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupSourceNo();
                                                            END;

                                                   CaptionML=[ENU=Source No.;
                                                              NOR=Kildenr.;
                                                              SVE=Ursprungsnr];
                                                   NotBlank=Yes }
    { 41  ;   ;Source No. 2        ;Code10        ;OnValidate=BEGIN
                                                                IF (Type <> Type::Plant) AND (Type <> Type::Subcontractor) THEN
                                                                  TESTFIELD("Source No. 2", '');
                                                                ValidateSourceNo2();
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupSourceNo2();
                                                            END;

                                                   CaptionML=[ENU=Source No. 2;
                                                              NOR=Kildenr. 2;
                                                              SVE=K„lla nr 2] }
    { 50  ;   ;Name                ;Text100       ;OnValidate=BEGIN
                                                                IF (Type <> Type::" ") AND (xRec.Name <> Name) THEN
                                                                  FIELDERROR(Type)
                                                                ELSE
                                                                  "Search Name" := UPPERCASE(Name);
                                                              END;

                                                   CaptionML=[ENU=Name;
                                                              NOR=Navn;
                                                              SVE=Namn];
                                                   Description=Field not editable is update from source }
    { 60  ;   ;Search Name         ;Code100       ;OnValidate=BEGIN
                                                                IF (Type <> 0) AND (xRec.Name <> Name) THEN
                                                                  FIELDERROR(Type);
                                                              END;

                                                   CaptionML=[ENU=Search Name;
                                                              NOR=S›kenavn;
                                                              SVE=S”knamn];
                                                   Description=Field not editable is update from source }
    { 70  ;   ;Schedule            ;Option        ;OnValidate=BEGIN
                                                                IF Schedule <> Schedule::ServiceOrder THEN
                                                                  IF Type = Type::" " THEN
                                                                    FIELDERROR(Type);
                                                              END;

                                                   CaptionML=[ENU=Schedule;
                                                              NOR=Tidsplan;
                                                              SVE=Planerat];
                                                   OptionCaptionML=ENU=Service Order,Project,Both;
                                                   OptionString=ServiceOrder,Project,Both }
    { 80  ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              NOR=Nr-serie;
                                                              SVE=Nr-serie];
                                                   Editable=No }
    { 85  ;   ;Active in PLA       ;Boolean       ;OnValidate=VAR
                                                                LicenseManagement@1100526201 : Codeunit 11229289;
                                                              BEGIN
                                                                IF "Active in PLA" THEN BEGIN
                                                                  TESTFIELD(Type, Type::Employee);
                                                                  LicenseManagement.ValidateUserCountBase(TRUE, 2, 'PLA');
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Active in PLA }
    { 86  ;   ;Active in CCA       ;Boolean       ;OnValidate=VAR
                                                                LicenseManagement@1100526200 : Codeunit 11229289;
                                                              BEGIN
                                                                IF "Active in CCA" THEN BEGIN
                                                                  TESTFIELD(Type, Type::Employee);
                                                                  LicenseManagement.ValidateUserCountBase(TRUE, 2, 'CCA');
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Active in CCA }
    { 90  ;   ;Planner Company     ;Text30        ;TableRelation=Company;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Company, COMPANYNAME);
                                                                IF "Planner Company" <> xRec."Planner Company" THEN
                                                                  Planner := '';
                                                              END;

                                                   CaptionML=ENU=Planner Company }
    { 95  ;   ;Planner             ;Code20        ;OnValidate=VAR
                                                                Empl@1100525000 : Record 5200;
                                                              BEGIN
                                                                TESTFIELD(Company, COMPANYNAME);
                                                                IF Planner <> '' THEN BEGIN
                                                                  TESTFIELD("Planner Company");
                                                                  Empl.CHANGECOMPANY("Planner Company");
                                                                  Empl.GET(Planner);
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupPlanner();
                                                            END;

                                                   CaptionML=[ENU=Planner;
                                                              NOR=Planlegger;
                                                              SVE=Planering] }
    { 100 ;   ;Active in FSA       ;Boolean       ;OnValidate=BEGIN
                                                                IF "Active in FSA" THEN
                                                                  TESTFIELD("Link WO to WO Leading Resource", FALSE);
                                                              END;

                                                   CaptionML=[ENU=Active in Field Service;
                                                              SVE=Aktiv f„ltservice];
                                                   Editable=No }
    { 110 ;   ;Filter Set (Mobile) ;Code20        ;OnValidate=VAR
                                                                ExportFilterSet@1100525000 : Record 11020440;
                                                              BEGIN
                                                                TESTFIELD(Company, COMPANYNAME);
                                                                IF "Filter Set (Mobile)" <> '' THEN BEGIN
                                                                  TESTFIELD(Type, Type::Employee);
                                                                  ExportFilterSet.GET("Filter Set (Mobile)");
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupFilterSet();
                                                            END;

                                                   CaptionML=[ENU=Filter Set;
                                                              NOR=Filtersett;
                                                              SVE=Filtersats] }
    { 120 ;   ;Discipline          ;Code10        ;OnLookup=VAR
                                                              Discipl@1100529000 : Record 11020204;
                                                            BEGIN
                                                              Discipl.CHANGECOMPANY(Company);
                                                              Discipl.Code := Discipline;
                                                              PAGE.RUNMODAL(0, Discipl);
                                                            END;

                                                   CaptionML=[ENU=Discipline;
                                                              NOR=Disiplin;
                                                              SVE=Disciplin];
                                                   Description=Field not editable is update from source;
                                                   Editable=No }
    { 130 ;   ;Territory Code      ;Code10        ;TableRelation=Territory.Code;
                                                   OnLookup=VAR
                                                              Territory@1100528600 : Record 286;
                                                            BEGIN
                                                              Territory.CHANGECOMPANY(Company);
                                                              Territory.Code := "Territory Code";
                                                              PAGE.RUNMODAL(0, Territory);
                                                            END;

                                                   CaptionML=[ENU=Territory Code;
                                                              NOR=Distriktskode;
                                                              SVE=Distriktskod];
                                                   Description=Field not editable is update from source;
                                                   Editable=No }
    { 140 ;   ;Mobile Last Time Synchonized;DateTime;
                                                   CaptionML=ENU=Common Data Mobile Last Synchonized on;
                                                   Editable=No }
    { 145 ;   ;Mobile Last Connected on;DateTime  ;CaptionML=ENU=Mobile Last Connected on;
                                                   Editable=No }
    { 150 ;   ;User ID Filter      ;Code50        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=User ID Filter;
                                                              NOR=Filter for bruker-ID;
                                                              SVE=Anv„ndar-ID-filter] }
    { 160 ;   ;Visible in GWP      ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Visible Resource (WOP)" WHERE (User ID=FIELD(User ID Filter),
                                                                                                     Resource No.=FIELD(No.),
                                                                                                     Visible in GWP=CONST(Yes)));
                                                   CaptionML=[ENU=Visible in GWP;
                                                              SVE=Synlig i GWP] }
    { 165 ;   ;Visible in Navision ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Visible Resource (WOP)" WHERE (User ID=FIELD(User ID Filter),
                                                                                                     Resource No.=FIELD(No.),
                                                                                                     Visible in 4PS Contruct=CONST(Yes)));
                                                   CaptionML=ENU=Visible in NAV }
    { 170 ;   ;Disciplines Exist   ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Resource Discipline" WHERE (Resource No.=FIELD(No.)));
                                                   CaptionML=ENU=Disciplines Exist;
                                                   Editable=No }
    { 171 ;   ;Discipline Exist    ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Resource Discipline" WHERE (Resource No.=FIELD(No.),
                                                                                                  Discipline=FIELD(Discipline Filter)));
                                                   CaptionML=ENU=Discipline Exist;
                                                   Description=With Discipline Filter;
                                                   Editable=No }
    { 172 ;   ;Discipline Filter   ;Code10        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Discipline Filter;
                                                              NOR=Disiplinfilter;
                                                              SVE=Disciplinfilter] }
    { 180 ;No ;Reserved 180 mg     ;Code20        ;Description=RESERVED }
    { 190 ;   ;Plan Data Exist     ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Resource Plan Data" WHERE (Resource No.=FIELD(No.)));
                                                   CaptionML=ENU=Plan Data Exist;
                                                   Editable=No }
    { 200 ;   ;Active in FLS       ;Boolean       ;FieldClass=Normal;
                                                   OnValidate=BEGIN
                                                                CommunicateToFLS;
                                                              END;

                                                   CaptionML=ENU=Active in FLS VisiTour }
    { 210 ;   ;Visible in GRP      ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Visible Resource (WOP)" WHERE (User ID=FIELD(User ID Filter),
                                                                                                     Resource No.=FIELD(No.),
                                                                                                     Visible in GRP=CONST(Yes)));
                                                   CaptionML=[ENU=Visible in GRP;
                                                              SVE=Synlig i GRP];
                                                   Editable=No }
    { 220 ;   ;Synchronize FSA     ;Option        ;CaptionML=[ENU=Synchronize FSA;
                                                              SVE=Synkronisera FSA];
                                                   OptionCaptionML=ENU=" ,All,Changes Only";
                                                   OptionString=[ ,All,Changes Only] }
    { 230 ;   ;Trade Association   ;Code10        ;CaptionML=[ENU=Trade Association;
                                                              NOR=Bransjeorganisasjon;
                                                              SVE=Branschorganisation] }
    { 240 ;   ;Link WO to WO Leading Resource;Boolean;
                                                   OnValidate=BEGIN
                                                                IF "Link WO to WO Leading Resource" THEN BEGIN
                                                                  TESTFIELD(Type, Type::Employee);
                                                                  TESTFIELD("Active in FSA", FALSE);
                                                                  CheckLinkWOToWOLeadingResourceAllowed;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Link WO to Leading Resource }
    { 250 ;   ;Image               ;Media         ;CaptionML=[ENU=Image;
                                                              NOR=Image;
                                                              SVE=Bild] }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Type,Company,No.                         }
    {    ;Type,Company,Source No.,Source No. 2     }
    {    ;Search Name                              }
    {    ;Type,Company,Search Name                 }
    {    ;Name                                     }
  }
  FIELDGROUPS
  {
    { 1   ;Brick               ;No.,Company,Type,No. Series,Image        }
    { 2   ;DropDown            ;No.,Name,Company                         }
  }
  CODE
  {
    VAR
      NoSeriesMgt@1100525001 : Codeunit 396;
      Text001@1100525000 : TextConst 'ENU=(%1) %2 is already present';
      Text005@1100528601 : TextConst 'ENU=Resource %1 has outstanding work orders.';
      Text006@1100528600 : TextConst 'ENU=Resource %1 is not part of Company Plan Group %2';
      Text007@1100528100 : TextConst 'ENU=Warning! %1 %2 is already assigned to other field service users.';
      Text009@1100525002 : TextConst 'ENU=not allowed, %1 is %2 of %3';
      Text002@1100528000 : TextConst 'ENU=Resource %1 is registered as a 4PS Mobile user and as an active 4PS FSA user.\Please remove one of those to continue.';
      Text010@1100529101 : TextConst 'ENU=It was not possible to calculate the workorder times for resource %1, %2.';
      Text012@1100529103 : TextConst 'ENU=No base calandar for resource %1 in company %2.';
      Text013@1100529100 : TextConst 'ENU=Resource %1 %2 is not available between %3 and %4.\The next available date is %5 %6.';

    [External]
    PROCEDURE InitRecord@1100525004(ResourceType@1100525001 : Option);
    VAR
      WorkOrderPlanningSetup@1100525000 : Record 11229277;
    BEGIN
      Type := ResourceType;
      Company := COMPANYNAME;  //Insert always in the own Company!
      "Planner Company" := Company;  // Default own compan
      CASE Type OF
        Type::" ":
          BEGIN
            WorkOrderPlanningSetup.GET;
            Schedule := WorkOrderPlanningSetup."Default Schedule Other";
          END;
        Type::Employee:
          BEGIN
            WorkOrderPlanningSetup.GET;
            Schedule := WorkOrderPlanningSetup."Default Schedule Employee";
          END;
        Type::Subcontractor:
          BEGIN
            WorkOrderPlanningSetup.GET;
            Schedule := WorkOrderPlanningSetup."Default Schedule Subcontractor";
          END;
        Type::Plant:
          Schedule := Schedule::Both;
      END;
    END;

    [External]
    PROCEDURE AssistEdit@2(OldResource@11012000 : Record 11229278) : Boolean;
    VAR
      Resource@1100525000 : Record 11229278;
    BEGIN
      WITH Resource DO BEGIN
        Resource := Rec;
        IF NoSeriesMgt.SelectSeries(GetNoSeries(), Resource."No. Series","No. Series") THEN BEGIN
          NoSeriesMgt.SetSeries("No.");
          Rec := Resource;
          EXIT(TRUE);
        END;
      END;
    END;

    [External]
    PROCEDURE GetNoSeries@1100525002() : Code[10];
    VAR
      WorkOrderPlanningSetup@1100525000 : Record 11229277;
    BEGIN
      TESTFIELD(Company, COMPANYNAME);  //Insert resources only allowed for the own Company!
      WorkOrderPlanningSetup.GET;
      CASE Type OF
        Type::" ":
          BEGIN
            WorkOrderPlanningSetup.TESTFIELD("Other Resource Nos.");
            EXIT(WorkOrderPlanningSetup."Other Resource Nos.");
          END;
        Type::Employee:
          BEGIN
            WorkOrderPlanningSetup.TESTFIELD("Employee Resource Nos.");
            EXIT(WorkOrderPlanningSetup."Employee Resource Nos.");
          END;
        Type::Subcontractor:
          BEGIN
            WorkOrderPlanningSetup.TESTFIELD("Subcontractor Resource Nos.");
            EXIT(WorkOrderPlanningSetup."Subcontractor Resource Nos.");
          END;
        Type::Plant:
          BEGIN
            WorkOrderPlanningSetup.TESTFIELD("Plant Resource Nos.");
            EXIT(WorkOrderPlanningSetup."Plant Resource Nos.");
          END;
        ELSE
          FIELDERROR(Type);
      END;
    END;

    [External]
    PROCEDURE ValidateSourceNo@1100525000();
    VAR
      Empl@1100525000 : Record 5200;
      Vendor@1100528600 : Record 23;
      PlantType@1100529000 : Record 11012551;
    BEGIN
      TESTFIELD(Company, COMPANYNAME);
      CASE Type OF
        Type::Employee:
          BEGIN
            Empl.GET("Source No.");
            Empl.TESTFIELD(Status, Empl.Status::Active);
            Name := COPYSTR(Empl."Full Name", 1, MAXSTRLEN(Name));
            "Search Name" := COPYSTR(Empl."Search Name", 1, MAXSTRLEN("Search Name"));
            Discipline := Empl.Discipline;
            "Territory Code" := Empl."Territory Code";
            "Trade Association" := Empl."Trade Association";
          END;
        Type::Subcontractor:
          BEGIN
            Vendor.GET("Source No.");
            Name := Vendor.Name;
            "Search Name" := Vendor."Search Name";
            Discipline := '';
            "Territory Code" := Vendor."Territory Code";
          END;
        Type::Plant:
          BEGIN
            PlantType.GET("Source No.");
            PlantType.TESTFIELD(Blocked, FALSE);
            IF "Source No." <> xRec."Source No." THEN
              "Source No. 2" := '';
            IF "Source No. 2" = '' THEN BEGIN
              Name := COPYSTR(PlantType.Description, 1, MAXSTRLEN(Name));
              "Search Name" := COPYSTR(PlantType."Search Name", 1, MAXSTRLEN("Search Name"));
            END;
            Discipline := '';
            "Territory Code" := '';
          END;
        ELSE
          FIELDERROR(Type);
      END;
      IF Type <> Type::Plant THEN
        CheckResourceAlreadyPresent;
    END;

    [External]
    PROCEDURE ValidateSourceNo2@1100529001();
    VAR
      PlantNumber@1100529000 : Record 11012552;
      Contact@1100528700 : Record 5050;
      Vendor@1100528702 : Record 23;
      ContactBusinessRelation@1100528703 : Record 5054;
      CompanyNo@1100528701 : Code[20];
    BEGIN
      TESTFIELD(Company, COMPANYNAME);
      CASE Type OF
        Type::Plant:
          BEGIN
            TESTFIELD("Source No.");
            PlantNumber.GET("Source No.", "Source No. 2");
            PlantNumber.CALCFIELDS(Bulk);
            PlantNumber.TESTFIELD(Bulk, FALSE);
            PlantNumber.TESTFIELD(Blocked, FALSE);
            Name := COPYSTR(PlantNumber.Description, 1, MAXSTRLEN(Name));
            "Search Name" := Name;
          END;
        Type::Subcontractor:
          BEGIN
            IF "Source No. 2" <> '' THEN BEGIN
              TESTFIELD("Source No.");
              Vendor.GET("Source No.");
              CompanyNo := ContactBusinessRelation.GetContactNo(ContactBusinessRelation."Link to Table"::Vendor, "Source No.");
              Contact.GET("Source No. 2");
              Contact.TESTFIELD(Type, Contact.Type::Person);
              Contact.TESTFIELD("Company No.", CompanyNo);
              Name := Contact.Name;
              "Search Name" := Name;
            END ELSE BEGIN
              IF Vendor.GET("Source No.") THEN BEGIN
                Name := Vendor.Name;
                "Search Name" := Vendor."Search Name";
              END;
            END;
          END;
        ELSE
          TESTFIELD("Source No. 2", '');
      END;
      CheckResourceAlreadyPresent;
    END;

    LOCAL PROCEDURE CheckResourceAlreadyPresent@1100529002();
    VAR
      Resource@1100529000 : Record 11229278;
    BEGIN
      Resource.SETCURRENTKEY(Type, Company, "Source No.", "Source No. 2");
      Resource.SETRANGE(Type, Type);
      Resource.SETRANGE(Company, Company);
      Resource.SETRANGE("Source No.", "Source No.");
      Resource.SETRANGE("Source No. 2", "Source No. 2");
      Resource.SETFILTER("No.", '<>%1', "No.");
      IF Resource.FINDFIRST THEN BEGIN
        IF "Source No. 2" = '' THEN
          Resource.FIELDERROR("Source No.", STRSUBSTNO(Text001, Type, "Source No."))
        ELSE
          Resource.FIELDERROR("Source No.", STRSUBSTNO(Text001, Type, "Source No." + '-' + "Source No. 2"));
      END;
    END;

    [External]
    PROCEDURE LookupSourceNo@1100525003();
    VAR
      Empl@1100525000 : Record 5200;
      Vendor@1100528600 : Record 23;
      PlantType@1100529000 : Record 11012551;
    BEGIN
      CASE Type OF
        Type::Employee:
          BEGIN
            Empl.CHANGECOMPANY(Company);
            Empl."No." := "Source No.";
            IF (Company <> COMPANYNAME) THEN
              PAGE.RUNMODAL(0, Empl)
            ELSE BEGIN
              IF PAGE.RUNMODAL(0, Empl) = ACTION::LookupOK THEN
                VALIDATE("Source No.", Empl."No.");
            END;
          END;
        Type::Subcontractor:
          BEGIN
            Vendor.CHANGECOMPANY(Company);
            Vendor."No." := "Source No.";
            IF (Company <> COMPANYNAME) THEN
              PAGE.RUNMODAL(0, Vendor)
            ELSE BEGIN
              IF PAGE.RUNMODAL(0, Vendor) = ACTION::LookupOK THEN
                VALIDATE("Source No.", Vendor."No.");
            END;
          END;
        Type::Plant:
          BEGIN
            PlantType.CHANGECOMPANY(Company);
            PlantType.Code := "Source No.";
            IF (Company <> COMPANYNAME) THEN
              PAGE.RUNMODAL(0, PlantType)
            ELSE BEGIN
              IF PAGE.RUNMODAL(0, PlantType) = ACTION::LookupOK THEN
                VALIDATE("Source No.", PlantType.Code);
            END;
          END;
      END;
    END;

    [External]
    PROCEDURE LookupSourceNo2@1100529003();
    VAR
      PlantNumber@1100529000 : Record 11012552;
      Contact@1100528700 : Record 5050;
      ContactBusinessRelation@1100528702 : Record 5054;
      CompanyNo@1100528701 : Code[20];
    BEGIN
      CASE Type OF
        Type::Plant:
          BEGIN
            PlantNumber.CHANGECOMPANY(Company);
            PlantNumber.FILTERGROUP(9);
            PlantNumber.SETRANGE("Plant Type", "Source No.");
            PlantNumber.FILTERGROUP(0);
            PlantNumber."Plant Type" := "Source No.";
            PlantNumber."No." := "Source No. 2";
            IF (Company <> COMPANYNAME) THEN
              PAGE.RUNMODAL(0, PlantNumber)
            ELSE BEGIN
              IF PAGE.RUNMODAL(0, PlantNumber) = ACTION::LookupOK THEN
                VALIDATE("Source No. 2", PlantNumber."No.");
            END;
          END;
        Type::Subcontractor:
          BEGIN
            ContactBusinessRelation.CHANGECOMPANY(Company);
            CompanyNo := ContactBusinessRelation.GetContactNo(ContactBusinessRelation."Link to Table"::Vendor, "Source No.");
            IF CompanyNo <> '' THEN BEGIN
              Contact.CHANGECOMPANY(Company);
              Contact.SETRANGE(Type, Contact.Type::Person);
              Contact.SETRANGE("Company No.", CompanyNo);
              IF (Company <> COMPANYNAME) THEN
                PAGE.RUNMODAL(0, Contact)
              ELSE BEGIN
                IF PAGE.RUNMODAL(0, Contact) = ACTION::LookupOK THEN
                  VALIDATE("Source No. 2", Contact."No.");
              END;
            END;
          END;
      END;
    END;

    [External]
    PROCEDURE LookupPlanner@1100525008();
    VAR
      Empl@1100525000 : Record 5200;
    BEGIN
      Empl.CHANGECOMPANY("Planner Company");
      Empl."No." := Planner;
      IF (Company <> COMPANYNAME) THEN
        PAGE.RUNMODAL(0, Empl)
      ELSE BEGIN
        IF PAGE.RUNMODAL(0, Empl) = ACTION::LookupOK THEN
          VALIDATE(Planner, Empl."No.");
      END;
    END;

    [External]
    PROCEDURE GetPlannerName@1100529101() : Text;
    VAR
      Empl@1100525000 : Record 5200;
    BEGIN
      IF Planner = '' THEN
        EXIT;
      Empl.CHANGECOMPANY("Planner Company");
      IF Empl.GET(Planner) THEN
        EXIT(Empl."Full Name");
    END;

    [External]
    PROCEDURE LookupFilterSet@1100525005();
    VAR
      ExportFilterSet@1100525000 : Record 11020440;
    BEGIN
      ExportFilterSet.CHANGECOMPANY(Company);
      ExportFilterSet.Code := "Filter Set (Mobile)";
      IF (Company <> COMPANYNAME) OR  (Type <> Type::Employee) THEN
        PAGE.RUNMODAL(0, ExportFilterSet)
      ELSE BEGIN
        IF PAGE.RUNMODAL(0, ExportFilterSet) = ACTION::LookupOK THEN
          VALIDATE("Filter Set (Mobile)", ExportFilterSet.Code);
      END;
    END;

    [External]
    PROCEDURE ShowResourceCard@1100528600();
    BEGIN
      PAGE.RUNMODAL(PAGE::"Resource-Card", Rec);
    END;

    [External]
    PROCEDURE UseVisibleResources@1100528602() : Boolean;
    VAR
      VisibleResourceWOP@1100528600 : Record 11229285;
    BEGIN
      VisibleResourceWOP.SETRANGE("User ID", USERID);
      VisibleResourceWOP.SETRANGE("Visible in 4PS Contruct", TRUE);
      EXIT(NOT VisibleResourceWOP.ISEMPTY);
    END;

    [External]
    PROCEDURE GetVendorNo@1100525001() : Code[20];
    VAR
      Vendor@1100525000 : Record 23;
    BEGIN
      IF Type <> Type::Subcontractor THEN
        EXIT;
      IF Company <> COMPANYNAME THEN
        EXIT;
      IF NOT Vendor.GET("Source No.") THEN
        EXIT;
      EXIT(Vendor."No.");
    END;

    [External]
    PROCEDURE SetVisible@1100525010(IType@1100409000 : 'GWP,Navision,GRP';INewVisible@1100528600 : Boolean);
    BEGIN
      SetVisibleByUserID(IType, INewVisible, USERID);
    END;

    [External]
    PROCEDURE SetVisibleByUserID@1100528608(IType@1100409000 : 'GWP,Navision,GRP';INewVisible@1100528600 : Boolean;IUserID@1100528602 : Code[50]);
    VAR
      VisibleResourceWOP@1100528601 : Record 11229285;
    BEGIN
      IF INewVisible THEN BEGIN
        IF NOT VisibleResourceWOP.GET(IUserID, "No.") THEN BEGIN
          VisibleResourceWOP."User ID" := IUserID;
          VisibleResourceWOP."Resource No." := "No.";
          VisibleResourceWOP.INSERT(TRUE);
        END;
        CASE IType OF
          IType::GWP:
            VisibleResourceWOP."Visible in GWP" := TRUE;
          IType::Navision:
            VisibleResourceWOP."Visible in 4PS Contruct" := TRUE;
          IType::GRP:
            VisibleResourceWOP."Visible in GRP" := TRUE;
        END;
        VisibleResourceWOP.MODIFY(TRUE);
      END ELSE BEGIN
        IF VisibleResourceWOP.GET(IUserID, "No.") THEN BEGIN
          CASE IType OF
            IType::GWP:
              VisibleResourceWOP."Visible in GWP" := FALSE;
            IType::Navision:
              VisibleResourceWOP."Visible in 4PS Contruct" := FALSE;
            IType::GRP:
              VisibleResourceWOP."Visible in GRP" := FALSE;
          END;
          IF NOT VisibleResourceWOP."Visible in GWP" AND NOT VisibleResourceWOP."Visible in 4PS Contruct" AND NOT VisibleResourceWOP."Visible in GRP" THEN
            VisibleResourceWOP.DELETE(TRUE)
          ELSE
            VisibleResourceWOP.MODIFY(TRUE);
        END;
      END;
    END;

    [External]
    PROCEDURE GetDisciplineFilter@1100528601() DisciplineFilter : Text;
    VAR
      ResourceDiscipline@1100528600 : Record 11229286;
    BEGIN
      ResourceDiscipline.SETRANGE("Resource No.", "No.");
      IF ResourceDiscipline.FINDSET THEN
        REPEAT
          IF DisciplineFilter <> '' THEN
            DisciplineFilter += '|';
          DisciplineFilter += ResourceDiscipline.Discipline;
        UNTIL ResourceDiscipline.NEXT = 0;
    END;

    PROCEDURE GetResourceDSByDiscipline@1100528603(IDiscipline@1100528602 : Code[10];VAR OResourceWOP@1100528600 : Record 11229278);
    BEGIN
      GetResourceDSByDisciplineFilter(IDiscipline, OResourceWOP);
    END;

    [External]
    PROCEDURE GetResourceDSByDisciplineFilter@1100528610(IDisciplineFilter@1100528602 : Text;VAR OResourceWOP@1100528600 : Record 11229278);
    VAR
      ResourceDiscipline@1100528601 : Record 11229286;
    BEGIN
      OResourceWOP.RESET;
      ResourceDiscipline.SETFILTER(Discipline, IDisciplineFilter);
      IF ResourceDiscipline.FINDSET THEN
        REPEAT
          OResourceWOP."No." := ResourceDiscipline."Resource No.";
          OResourceWOP.MARK(TRUE);
        UNTIL ResourceDiscipline.NEXT = 0;
      OResourceWOP.MARKEDONLY(TRUE);
    END;

    LOCAL PROCEDURE UpdateResourceDiscipline@1100528604();
    VAR
      ResourceDiscipline@1100528601 : Record 11229286;
    BEGIN
      IF Discipline <> '' THEN
        IF NOT ResourceDiscipline.GET("No.", Discipline) THEN BEGIN
          ResourceDiscipline."Resource No." := "No.";
          ResourceDiscipline.Discipline := Discipline;
          ResourceDiscipline.INSERT;
        END;
    END;

    LOCAL PROCEDURE UpdateSubcontrPortalVendor@1100528605(IAction@1100528602 : 'Insert,Modify,Delete,Rename');
    VAR
      SubcontPortSetup@1100528601 : Record 11126402;
      SubcontPortVendor@1100528600 : Record 11126400;
    BEGIN
      IF (Type = Type::Subcontractor) AND ("Source No." <> '') AND (Company = COMPANYNAME) THEN BEGIN
        IF NOT SubcontPortSetup.GET('1') THEN
          EXIT;
        IF NOT SubcontPortSetup."Subcontracting Portal Active" THEN
          EXIT;
        CASE IAction OF
          IAction::Insert, IAction::Rename:
            BEGIN
              SubcontPortVendor.SETRANGE("Vendor No.", "Source No.");
              SubcontPortVendor.SETFILTER("Resource No.", '<>%1', "No.");
              IF NOT SubcontPortVendor.ISEMPTY THEN
                SubcontPortVendor.MODIFYALL("Resource No.", "No.");
            END;
          IAction::Modify:
            BEGIN
              IF xRec."Source No." <> '' THEN BEGIN
                SubcontPortVendor.SETRANGE("Vendor No.", xRec."Source No.");
                SubcontPortVendor.SETRANGE("Resource No.", "No.");
                IF NOT SubcontPortVendor.ISEMPTY THEN
                  SubcontPortVendor.MODIFYALL("Resource No.", '');
              END;
              SubcontPortVendor.SETRANGE("Vendor No.", "Source No.");
              SubcontPortVendor.SETFILTER("Resource No.", '<>%1', "No.");
              IF NOT SubcontPortVendor.ISEMPTY THEN
                SubcontPortVendor.MODIFYALL("Resource No.", "No.");
            END;
          IAction::Delete:
            BEGIN
              SubcontPortVendor.SETRANGE("Vendor No.", "Source No.");
              SubcontPortVendor.SETRANGE("Resource No.", '<>%1', '');
              IF NOT SubcontPortVendor.ISEMPTY THEN
                SubcontPortVendor.MODIFYALL("Resource No.", '');
            END;
        END;
      END;
    END;

    [External]
    PROCEDURE CommunicateToFLS@1100528300();
    VAR
      ServiceSetup@1100409000 : Record 11012800;
      FLSVisiTourInterface@1100528300 : Codeunit 11072090;
    BEGIN
      ServiceSetup.GET;
      IF (ServiceSetup."FLS VisiTour Active") THEN
        FLSVisiTourInterface.FieldManager(1, "Source No.", "Active in FLS");
    END;

    [External]
    PROCEDURE GetResourceName@1100409000(IResourceNo@1100409000 : Code[20]) : Text[100];
    BEGIN
      IF Rec.GET(IResourceNo) THEN
        EXIT(Rec.Name);
    END;

    [External]
    PROCEDURE SetCompanyPlanGroupFilters@1100528606();
    VAR
      CompanyPlanGroup@1100528603 : Record 11229300;
      CompanyPlanGroupLine@1100528601 : Record 11229301;
      CurrentCompanyPlanGroup@1100528600 : Code[10];
      CompanyFilter@1100528602 : Text;
    BEGIN
      CurrentCompanyPlanGroup := CompanyPlanGroup.GetCurrentCompanyPlanGroupCode;
      CompanyPlanGroupLine.SETRANGE("Group Code", CurrentCompanyPlanGroup);
      IF CompanyPlanGroupLine.ISEMPTY THEN
        EXIT;
      IF CompanyPlanGroupLine.FINDSET THEN
        REPEAT
          IF CompanyFilter <> '' THEN
            CompanyFilter += '|';
          CompanyFilter += CompanyPlanGroupLine."Company Name";
        UNTIL CompanyPlanGroupLine.NEXT = 0;
      FILTERGROUP(7);
      SETFILTER(Company, CompanyFilter);
      FILTERGROUP(0);
    END;

    [External]
    PROCEDURE IsResourceWithinCompanyPlanGroup@1100528607() : Boolean;
    VAR
      CompanyPlanGroup@1100528600 : Record 11229300;
      CompanyPlanGroupLine@1100528602 : Record 11229301;
      CompanyPlanGroupCode@1100528603 : Code[20];
    BEGIN
      CompanyPlanGroupCode := CompanyPlanGroup.GetCurrentCompanyPlanGroupCode;
      IF CompanyPlanGroupCode = '' THEN
        EXIT(TRUE);
      CompanyPlanGroupLine.SETRANGE("Group Code", CompanyPlanGroupCode);
      IF CompanyPlanGroupLine.ISEMPTY THEN
        EXIT(TRUE);
      CompanyPlanGroupLine.SETRANGE("Company Name", Company);
      EXIT(NOT CompanyPlanGroupLine.ISEMPTY);
    END;

    [External]
    PROCEDURE TestResourceWithinCompanyPlanGroup@1100528609();
    VAR
      CompanyPlanGroup@1100528600 : Record 11229300;
    BEGIN
      IF NOT IsResourceWithinCompanyPlanGroup THEN
        ERROR(Text006, "No.", CompanyPlanGroup.GetCurrentCompanyPlanGroupCode);
    END;

    LOCAL PROCEDURE DeactivateFsForResource@1100528000(ResourceNo@1100528000 : Code[20]);
    VAR
      MobileUserSettings@1100528001 : Record 11125654;
      FSAUser@1100529300 : Record 11126698;
      AppUserSetupGAP@1100529301 : Record 11124976;
      FSAUserSetupGAP@1100529302 : Record 11229875;
    BEGIN
      FilterActiveMobileUsersForResource(ResourceNo, MobileUserSettings);
      IF MobileUserSettings.FINDSET THEN
        MobileUserSettings.MODIFYALL(Active, FALSE);

      AppUserSetupGAP.SETRANGE("Resource No.", ResourceNo);
      IF AppUserSetupGAP.FINDSET THEN BEGIN
        FSAUserSetupGAP.SETRANGE(Username, AppUserSetupGAP.Username);
        IF FSAUserSetupGAP.FINDSET THEN
          FSAUserSetupGAP.MODIFYALL(Active, FSAUserSetupGAP.Active::No);
      END;
    END;

    LOCAL PROCEDURE FilterActiveMobileUsersForResource@1100528002(ResourceNo@1100528000 : Code[20];VAR ActiveMobileUsers@1100528003 : Record 11125654);
    BEGIN
      ActiveMobileUsers.SETRANGE("Resource No. (Employee)", ResourceNo);
      ActiveMobileUsers.SETFILTER(Active, '%1', TRUE);
    END;

    [External]
    PROCEDURE ActivateFsForMobileUser@1100528005(VAR MobileUser@1100528001 : Record 11125654);
    BEGIN
      MobileUser.TESTFIELD("Resource No. (Employee)");

      DeactivateFsForResource(MobileUser."Resource No. (Employee)");
      ActivateFsForResourceWOP(MobileUser."Resource No. (Employee)");
      MobileUser.Active := TRUE;
    END;

    [External]
    PROCEDURE ActivateFsForFsaUser@1100528007(VAR FSAUser@1100528001 : Record 11126698);
    BEGIN
      FSAUser.TESTFIELD("Resource No.");

      DeactivateFsForResource(FSAUser."Resource No.");
      ActivateFsForResourceWOP(FSAUser."Resource No.");
      FSAUser.Active := TRUE;
    END;

    [External]
    PROCEDURE ActivateFsForAppUser@1100527200(VAR ResourceNo@1100528001 : Code[20]);
    BEGIN
      DeactivateFsForResource(ResourceNo);
      ActivateFsForResourceWOP(ResourceNo);
    END;

    LOCAL PROCEDURE ActivateFsForResourceWOP@1100528006(ResourceNo@1100528001 : Code[20]);
    VAR
      ResourceWOP@1100528000 : Record 11229278;
    BEGIN
      ResourceWOP.GET(ResourceNo);
      ResourceWOP.VALIDATE("Active in FSA", TRUE);
      ResourceWOP.MODIFY;
    END;

    [External]
    PROCEDURE DeActivateFsForResourceWOP@1100528016(ResourceNo@1100528001 : Code[20]);
    VAR
      ResourceWOP@1100528000 : Record 11229278;
    BEGIN
      ResourceWOP.GET(ResourceNo);
      ResourceWOP.VALIDATE("Active in FSA", FALSE);
      ResourceWOP.MODIFY;
    END;

    [External]
    PROCEDURE CheckIfFsaUserResourceIsNotYetAssigned@1100528100(UserToBeChecked@1100528100 : Record 11126698);
    BEGIN
      IF HasOtherUsersForFsaUserResource(UserToBeChecked) THEN
        MESSAGE(Text007, TABLECAPTION, UserToBeChecked."Resource No.");
    END;

    LOCAL PROCEDURE HasOtherUsersForFsaUserResource@1100528103(UserToBeChecked@1100528000 : Record 11126698) : Boolean;
    VAR
      MobileUserSettings@1100528100 : Record 11125654;
      FSAUser@1100528101 : Record 11126698;
    BEGIN
      MobileUserSettings.SETRANGE("Resource No. (Employee)", UserToBeChecked."Resource No.");
      IF (MobileUserSettings.COUNT > 0) THEN
        EXIT(TRUE);

      FSAUser.SETRANGE("Resource No.", UserToBeChecked."Resource No.");
      FSAUser.SETFILTER(Username, '<>%1', UserToBeChecked.Username);
      EXIT(FSAUser.COUNT > 0);
    END;

    [External]
    PROCEDURE CheckIfValidFSALicenseForResource@1100528101(ValidationMode@1100528101 : Integer);
    VAR
      LicenseManagement@1100528100 : Codeunit 11229289;
    BEGIN
      IF (IsMobileUser) AND (IsFSAUser) THEN
        ERROR(Text002, "No.");

      IF IsMobileUser THEN BEGIN
        LicenseManagement.CheckMOBLicenseExpired(ValidationMode);
        LicenseManagement.ValidateUserCountMOB(FALSE, ValidationMode);
      END;

      IF IsFSAUser THEN BEGIN
        LicenseManagement.CheckFSALicenseExpired(ValidationMode);
        LicenseManagement.ValidateUserCountFSA(FALSE, ValidationMode);
      END;
    END;

    [External]
    PROCEDURE IsMobileUser@1100528001() : Boolean;
    VAR
      MobileUserSettings@1100528000 : Record 11125654;
    BEGIN
      FilterActiveMobileUsersForResource("No.", MobileUserSettings);
      IF NOT MobileUserSettings.ISEMPTY THEN
        EXIT(TRUE);
    END;

    [External]
    PROCEDURE IsFSAUser@1100528003() : Boolean;
    VAR
      FSAUserSetupGAP@1100528000 : Record 11229875;
      AppUserSetupGAP@1100529301 : Record 11124976;
    BEGIN
      AppUserSetupGAP.SETRANGE("Resource No.", "No.");
      IF AppUserSetupGAP.FINDFIRST THEN BEGIN
        FSAUserSetupGAP.SETRANGE(Username, AppUserSetupGAP.Username);
        FSAUserSetupGAP.SETRANGE(Active, FSAUserSetupGAP.Active::Yes);
        EXIT(NOT FSAUserSetupGAP.ISEMPTY);
      END;
    END;

    [External]
    PROCEDURE CalculateWorkingTimes@1100529102(VAR StartDateTime@1100529101 : DateTime;VAR EndDateTime@1100529102 : DateTime;Duration@1100529103 : Decimal;PlanInWeekend@1100529170 : Boolean);
    VAR
      StartDate@1100529100 : Date;
      StartTime@1100529104 : Time;
      DayOfWeek@1100529108 : Integer;
      EndDate@1100529105 : Date;
      EndTime@1100529106 : Time;
      DurationDateTime@1100529107 : Duration;
      CalcDuration@1100529115 : Duration;
      CalcStartTime@1100529117 : Time;
      CalcEndTime@1100529118 : Time;
      StartDateTimeOk@1100529110 : Boolean;
      EndDateTimeOk@1100529111 : Boolean;
      Count@1100529113 : Integer;
    BEGIN
      StartDate := DT2DATE(StartDateTime);
      StartTime := DT2TIME(StartDateTime);
      DurationDateTime := ROUND(Duration, 0.01) * 3600000;
      CalcEndTime := 235959T;

      // calculate first possible start date and time
      REPEAT
        DayOfWeek := DATE2DWY(StartDate,1);

        IF FindWorkingTimesStart(StartDate, DayOfWeek, StartTime, CalcEndTime, PlanInWeekend) THEN BEGIN
          StartDateTimeOk := TRUE;
          CalcDuration := CalcEndTime - StartTime;
          IF DurationDateTime <= CalcDuration THEN BEGIN
            EndTime := StartTime + DurationDateTime;
            EndDateTimeOk := TRUE;
          END ELSE BEGIN
            DurationDateTime -= CalcDuration;
          END;
        END ELSE BEGIN
          StartDate := StartDate + 1;
          StartTime := 000000T;
          StartDateTimeOk := FALSE;
        END;

        IF Count > 1000 THEN
          ERROR(Text010, "No.", Name);
        Count += 1;
      UNTIL StartDateTimeOk;

      EndDate := StartDate;
      CalcStartTime := CalcEndTime;
      CalcEndTime := 235959T;
      Count := 0;

      // calculate end date and time
      IF NOT EndDateTimeOk THEN BEGIN
        REPEAT
          DayOfWeek := DATE2DWY(EndDate,1);

          IF FindWorkingTimesStart(EndDate, DayOfWeek, CalcStartTime, CalcEndTime, PlanInWeekend) THEN BEGIN
            CalcDuration := CalcEndTime - CalcStartTime;
            IF DurationDateTime <= CalcDuration THEN BEGIN
              EndTime := CalcStartTime + DurationDateTime;
              EndDateTimeOk := TRUE;
            END ELSE BEGIN
              DurationDateTime := DurationDateTime - CalcDuration;
              CalcStartTime := CalcEndTime;
              CalcEndTime := 235959T;
            END;
          END ELSE BEGIN
            EndDate := EndDate + 1;
            CalcStartTime := 000000T;
            CalcEndTime := 235959T;
          END;

          IF Count > 1000 THEN
            ERROR(Text010, "No.", Name);
          Count += 1;
        UNTIL EndDateTimeOk;
      END;

      StartDateTime := CREATEDATETIME(StartDate, StartTime);
      EndDateTime := CREATEDATETIME(EndDate, EndTime);
    END;

    [External]
    PROCEDURE CalculateDurationTime@1100529103(VAR StartDateTime@1100529101 : DateTime;VAR EndDateTime@1100529102 : DateTime;VAR Duration@1100529103 : Decimal;PlanInWeekend@1100529170 : Boolean);
    VAR
      StartDate@1100529100 : Date;
      StartTime@1100529104 : Time;
      DayOfWeek@1100529108 : Integer;
      EndDate@1100529105 : Date;
      EndTime@1100529106 : Time;
      DurationDateTime@1100529107 : Duration;
      CalcStartTime@1100529117 : Time;
      CalcEndTime@1100529118 : Time;
      CalcDate@1100529119 : Date;
      StartDateTimeOk@1100529110 : Boolean;
      EndDateTimeOk@1100529111 : Boolean;
      Count@1100529113 : Integer;
      Done@1100529124 : Boolean;
    BEGIN
      StartDate := DT2DATE(StartDateTime);
      StartTime := DT2TIME(StartDateTime);
      EndDate := DT2DATE(EndDateTime);
      EndTime := DT2TIME(EndDateTime);
      IF EndTime = 000000T THEN BEGIN
        EndTime := 235959T;
        EndDate := EndDate - 1;
      END;

      CalcEndTime := 235959T;

      // calculate first possible start date and time
      REPEAT
        DayOfWeek := DATE2DWY(StartDate,1);

        IF FindWorkingTimesStart(StartDate, DayOfWeek, StartTime, CalcEndTime, PlanInWeekend) THEN BEGIN
          StartDateTimeOk := TRUE;
        END ELSE BEGIN
          StartDate := StartDate + 1;
          StartTime := 000000T;
          StartDateTimeOk := FALSE;
        END;

        IF Count > 1000 THEN
          ERROR(Text010, "No.", Name);
        Count += 1;
      UNTIL StartDateTimeOk;

      CalcStartTime := 000000T;
      Count := 0;

      // calculate last possible end date and time
      IF NOT EndDateTimeOk THEN BEGIN
        REPEAT
          DayOfWeek := DATE2DWY(EndDate,1);

          IF FindWorkingTimesEnd(EndDate, DayOfWeek, CalcStartTime, EndTime, PlanInWeekend) THEN BEGIN
            EndDateTimeOk := TRUE;
          END ELSE BEGIN
            EndDate := EndDate - 1;
            CalcStartTime := 000000T;
            EndTime := 235959T;
          END;

          IF Count > 1000 THEN
            ERROR(Text010, "No.", Name);
          Count += 1;
        UNTIL EndDateTimeOk;
      END;

      IF ((EndDate = StartDate) AND (EndTime <= StartTime)) OR (EndDate < StartDate) THEN
        ERROR(Text013, "No.", Name, StartDateTime, EndDateTime, StartDate, StartTime);

      CalcDate := StartDate;
      CalcStartTime := StartTime;
      CalcEndTime := 235959T;
      Count := 0;

      // calculate duration
      REPEAT
        DayOfWeek := DATE2DWY(CalcDate,1);

        IF FindWorkingTimesStart(CalcDate, DayOfWeek, CalcStartTime, CalcEndTime, PlanInWeekend) THEN BEGIN
          IF (CalcDate = EndDate) AND (CalcEndTime >= EndTime) THEN BEGIN
            DurationDateTime += EndTime - CalcStartTime;
            Done := TRUE;
          END ELSE BEGIN
            DurationDateTime += CalcEndTime - CalcStartTime;
            CalcStartTime := CalcEndTime;
            CalcEndTime := 235959T;
          END;
        END ELSE BEGIN
          CalcDate := CalcDate + 1;
          CalcStartTime := 000000T;
          CalcEndTime := 235959T;
        END;

        IF Count > 1000 THEN
          ERROR(Text010, "No.", Name);
        Count += 1;
      UNTIL Done;

      StartDateTime := CREATEDATETIME(StartDate,StartTime);
      EndDateTime := CREATEDATETIME(EndDate, EndTime);
      Duration := ROUND(DurationDateTime / 3600000, 0.01);
    END;

    LOCAL PROCEDURE CheckBaseCalendarExeption@1100529118(date@1100529100 : Date) : Boolean;
    VAR
      CalendarManagement@1100529101 : Codeunit 7600;
      CompanyInformation@1100529102 : Record 79;
      TextString@1100529103 : Text;
    BEGIN
      IF Company <> COMPANYNAME THEN
        CompanyInformation.CHANGECOMPANY(Company);
      CompanyInformation.GET;
      IF CalendarManagement.CheckDateStatus(CompanyInformation."Base Calendar Code",date,TextString) THEN
        EXIT(FALSE)
      ELSE
        EXIT(TRUE);
    END;

    LOCAL PROCEDURE FindWorkingTimesStart@1100529116(Date@1100529100 : Date;DayOfWeek@1100529104 : Integer;VAR StartTime@1100529112 : Time;VAR EndTime@1100529102 : Time;PlanInWeekend@1100529170 : Boolean) : Boolean;
    VAR
      EmployeeTimeTable@1100529103 : Record 11012923;
      CompanyInformation@1100529110 : Record 79;
      BaseCalendar@1100529111 : Record 11072014;
      PauseFrom@1100529109 : Time;
      PauseUntil@1100529108 : Time;
      WorkFrom@1100529107 : Time;
      WorkUntil@1100529106 : Time;
      LastStartTime@1100529101 : Time;
      LastEndTime@1100529114 : Time;
      EmptyTime@1100529116 : Time;
      WorkingHours@1100529105 : Decimal;
      Count@1100529115 : Integer;
      Done@1100529113 : Boolean;
      BaseCalendarCompany@1100527650 : Text;
    BEGIN
      BaseCalendarCompany := GetPlanGroupCompany(Company);

      IF Company <> COMPANYNAME THEN
          EmployeeTimeTable.CHANGECOMPANY(Company);

      IF BaseCalendarCompany <> COMPANYNAME THEN BEGIN
        CompanyInformation.CHANGECOMPANY(BaseCalendarCompany);
        BaseCalendar.CHANGECOMPANY(BaseCalendarCompany);
      END;
      CompanyInformation.GET;

      IF NOT PlanInWeekend THEN
        IF NOT CheckBaseCalendarExeption(Date) THEN
          EXIT(FALSE);

      IF Type = Type::Employee THEN BEGIN
        EmployeeTimeTable.SETRANGE("Employee No.", "Source No.");
        EmployeeTimeTable.SETFILTER("Effective Date", '<= %1', Date);
        IF EmployeeTimeTable.FINDLAST THEN BEGIN
          EmployeeTimeTable.GetWorkingTimeForWeekDay(DayOfWeek,WorkingHours,WorkFrom,WorkUntil,PauseFrom,PauseUntil);
          REPEAT
            LastStartTime := StartTime;
            LastEndTime := EndTime;
            IF StartTime >= WorkUntil THEN
              EXIT(FALSE);
            IF PauseFrom <> EmptyTime THEN BEGIN
              IF StartTime < PauseFrom THEN BEGIN
                IF StartTime < WorkFrom THEN
                  StartTime := WorkFrom;
                IF EndTime > PauseFrom THEN
                  EndTime := PauseFrom;
              END;
              IF (StartTime >= PauseFrom) AND (StartTime < PauseUntil) THEN BEGIN
                StartTime := PauseUntil;
                IF EndTime > WorkUntil THEN
                  EndTime := WorkUntil;
              END;
              IF (StartTime >= PauseUntil) AND (StartTime < WorkUntil) THEN BEGIN
                EndTime := WorkUntil;
              END;
            END ELSE BEGIN
              IF StartTime < WorkFrom THEN
                StartTime := WorkFrom;
              IF EndTime > WorkUntil THEN
                EndTime := WorkUntil;
            END;

            IF NOT GetEmployeeAbsenceWorkingTimesStart(Date, StartTime, EndTime) THEN
              EXIT(FALSE);

            IF (LastStartTime = StartTime) AND (LastEndTime = EndTime) THEN
              Done := TRUE;
            IF Count > 1000 THEN
              ERROR(Text010, "No.", Name);
            Count += 1;
          UNTIL Done;
          EXIT(TRUE);
        END;
      END;

      IF BaseCalendar.GET(CompanyInformation."Base Calendar Code") THEN BEGIN
        BaseCalendar.GetWorkingTimeForWeekDay(DayOfWeek,WorkingHours,WorkFrom,WorkUntil,PauseFrom,PauseUntil);
        REPEAT
          LastStartTime := StartTime;
          LastEndTime := EndTime;
          IF StartTime >= WorkUntil THEN
            EXIT(FALSE);
          IF PauseFrom <> EmptyTime THEN BEGIN
            IF StartTime < PauseFrom THEN BEGIN
              IF StartTime < WorkFrom THEN
                StartTime := WorkFrom;
              IF EndTime > PauseFrom THEN
                EndTime := PauseFrom;
            END;
            IF (StartTime >= PauseFrom) AND (StartTime < PauseUntil) THEN BEGIN
              StartTime := PauseUntil;
              IF EndTime > WorkUntil THEN
                EndTime := WorkUntil;
            END;
            IF (StartTime >= PauseUntil) AND (StartTime < WorkUntil) THEN BEGIN
              EndTime := WorkUntil;
            END;
          END ELSE BEGIN
            IF StartTime < WorkFrom THEN
              StartTime := WorkFrom;
            IF EndTime > WorkUntil THEN
              EndTime := WorkUntil;
          END;

          IF Type = Type::Employee THEN
            IF NOT GetEmployeeAbsenceWorkingTimesStart(Date, StartTime, EndTime) THEN
              EXIT(FALSE);
          IF Type = Type::Plant THEN
            IF NOT GetPlantAbsenceWorkingTimesStart(Date, StartTime, EndTime) THEN
              EXIT(FALSE);
          IF (LastStartTime = StartTime) AND (LastEndTime = EndTime) THEN
            Done := TRUE;
          IF Count > 1000 THEN
            ERROR(Text010, "No.", Name);
          Count += 1;
        UNTIL Done;
        EXIT(TRUE);
      END ELSE BEGIN
        ERROR(Text012, "No.", Company);
      END;
    END;

    LOCAL PROCEDURE FindWorkingTimesEnd@1100529110(Date@1100529100 : Date;DayOfWeek@1100529104 : Integer;VAR StartTime@1100529112 : Time;VAR EndTime@1100529102 : Time;PlanInWeekend@1100529170 : Boolean) : Boolean;
    VAR
      EmployeeTimeTable@1100529103 : Record 11012923;
      CompanyInformation@1100529110 : Record 79;
      BaseCalendar@1100529111 : Record 11072014;
      PauseFrom@1100529109 : Time;
      PauseUntil@1100529108 : Time;
      WorkFrom@1100529107 : Time;
      WorkUntil@1100529106 : Time;
      LastStartTime@1100529101 : Time;
      LastEndTime@1100529114 : Time;
      EmptyTime@1100529116 : Time;
      WorkingHours@1100529105 : Decimal;
      Count@1100529115 : Integer;
      Done@1100529113 : Boolean;
      BaseCalendarCompany@1100527650 : Text;
    BEGIN
      BaseCalendarCompany := GetPlanGroupCompany(Company);

      IF Company <> COMPANYNAME THEN
          EmployeeTimeTable.CHANGECOMPANY(Company);

      IF BaseCalendarCompany <> COMPANYNAME THEN BEGIN
        CompanyInformation.CHANGECOMPANY(BaseCalendarCompany);
        BaseCalendar.CHANGECOMPANY(BaseCalendarCompany);
      END;
      CompanyInformation.GET;

      IF NOT PlanInWeekend THEN
        IF NOT CheckBaseCalendarExeption(Date) THEN
          EXIT(FALSE);

      IF Type = Type::Employee THEN BEGIN
        EmployeeTimeTable.SETRANGE("Employee No.", "Source No.");
        EmployeeTimeTable.SETFILTER("Effective Date", '<= %1', Date);
        IF EmployeeTimeTable.FINDLAST THEN BEGIN
          EmployeeTimeTable.GetWorkingTimeForWeekDay(DayOfWeek,WorkingHours,WorkFrom,WorkUntil,PauseFrom,PauseUntil);
          REPEAT
            LastStartTime := StartTime;
            LastEndTime := EndTime;
            IF EndTime <= WorkFrom THEN
              EXIT(FALSE);
            IF PauseFrom <> EmptyTime THEN BEGIN
              IF (EndTime > WorkFrom) AND (EndTime <= PauseFrom) THEN BEGIN
                IF StartTime < WorkFrom THEN
                  StartTime := WorkFrom;
              END;
              IF (EndTime > PauseFrom) AND (EndTime <= PauseUntil) THEN BEGIN
                EndTime := PauseFrom;
                IF StartTime < WorkFrom THEN
                  StartTime := WorkFrom;
              END;
              IF EndTime > PauseUntil THEN BEGIN
                IF StartTime < PauseUntil THEN
                  StartTime := PauseUntil;
                IF EndTime > WorkUntil THEN
                  EndTime := WorkUntil;
              END;
            END ELSE BEGIN
              IF EndTime > WorkUntil THEN
                EndTime := WorkUntil;
              IF StartTime < WorkFrom THEN
                StartTime := WorkFrom;
            END;

            IF NOT GetEmployeeAbsenceWorkingTimesEnd(Date, StartTime, EndTime) THEN
              EXIT(FALSE);

            IF (LastStartTime = StartTime) AND (LastEndTime = EndTime) THEN
              Done := TRUE;
            IF Count > 1000 THEN
              ERROR(Text010, "No.", Name);
            Count += 1;
          UNTIL Done;
          EXIT(TRUE);
        END;
      END;

      IF BaseCalendar.GET(CompanyInformation."Base Calendar Code") THEN BEGIN
        BaseCalendar.GetWorkingTimeForWeekDay(DayOfWeek,WorkingHours,WorkFrom,WorkUntil,PauseFrom,PauseUntil);
        REPEAT
          IF Type = Type::Plant THEN BEGIN
            PauseFrom := EmptyTime;
            PauseUntil := EmptyTime;
          END;
          LastStartTime := StartTime;
          LastEndTime := EndTime;
          IF EndTime <= WorkFrom THEN
            EXIT(FALSE);
          IF PauseFrom <> EmptyTime THEN BEGIN
            IF (EndTime > WorkFrom) AND (EndTime <= PauseFrom) THEN BEGIN
              IF StartTime < WorkFrom THEN
                StartTime := WorkFrom;
            END;
            IF (EndTime > PauseFrom) AND (EndTime <= PauseUntil) THEN BEGIN
              EndTime := PauseFrom;
              IF StartTime < WorkFrom THEN
                StartTime := WorkFrom;
            END;
            IF EndTime > PauseUntil THEN BEGIN
              IF StartTime < PauseUntil THEN
                StartTime := PauseUntil;
              IF EndTime > WorkUntil THEN
                EndTime := WorkUntil;
            END;
          END ELSE BEGIN
            IF EndTime > WorkUntil THEN
              EndTime := WorkUntil;
            IF StartTime < WorkFrom THEN
              StartTime := WorkFrom;
          END;

          IF Type = Type::Employee THEN
            IF NOT GetEmployeeAbsenceWorkingTimesEnd(Date, StartTime, EndTime) THEN
              EXIT(FALSE);
          IF Type = Type::Plant THEN
            IF NOT GetPlantAbsenceWorkingTimesEnd(Date, StartTime, EndTime) THEN
              EXIT(FALSE);

          IF (LastStartTime = StartTime) AND (LastEndTime = EndTime) THEN
            Done := TRUE;
          IF Count > 1000 THEN
            ERROR(Text010, "No.", Name);
          Count += 1;
        UNTIL Done;
        EXIT(TRUE);
      END ELSE BEGIN
        ERROR(Text012, "No.", Company);
      END;
    END;

    LOCAL PROCEDURE GetEmployeeAbsenceWorkingTimesStart@1100529127(Date@1100529100 : Date;VAR StartTime@1100529102 : Time;VAR EndTime@1100529103 : Time) : Boolean;
    VAR
      EmployeeAbsence@1100529104 : Record 5207;
      EmptyTime@1100529105 : Time;
    BEGIN
      IF Type <> Type::Employee THEN
        EXIT(TRUE);
      IF Company <> COMPANYNAME THEN
        EmployeeAbsence.CHANGECOMPANY(Company);

      EmployeeAbsence.SETAUTOCALCFIELDS(Plannable);
      EmployeeAbsence.SETRANGE("Employee No.","Source No.");
      EmployeeAbsence.SETFILTER("From Date", '<= %1', Date);
      EmployeeAbsence.SETFILTER("To Date", '>= %1', Date);
      IF EmployeeAbsence.FINDSET THEN BEGIN
        REPEAT
          IF NOT EmployeeAbsence.Plannable THEN BEGIN
            IF (EmployeeAbsence."From Time" = EmptyTime) AND (EmployeeAbsence."Until Time" = EmptyTime) THEN
              EXIT(FALSE);
            IF EmployeeAbsence."From Date" = EmployeeAbsence."To Date" THEN BEGIN // less then 1 day
              IF (EmployeeAbsence."From Time" <= StartTime) AND (EmployeeAbsence."Until Time" >= EndTime) THEN
                EXIT(FALSE);
              IF (EmployeeAbsence."From Time" <= StartTime) AND (EmployeeAbsence."Until Time" < EndTime) AND (EmployeeAbsence."Until Time" > StartTime) THEN
                StartTime := EmployeeAbsence."Until Time";
              IF (EmployeeAbsence."From Time" > StartTime) AND (EmployeeAbsence."From Time" < EndTime) AND (EmployeeAbsence."Until Time" < EndTime) THEN
                EndTime := EmployeeAbsence."From Time";
              IF (EmployeeAbsence."From Time" < EndTime) AND (EmployeeAbsence."From Time" > StartTime) AND (EmployeeAbsence."Until Time" >= EndTime) THEN
                EndTime := EmployeeAbsence."From Time";
            END ELSE BEGIN // more then 1 day
              IF (EmployeeAbsence."From Date" < Date) AND (EmployeeAbsence."To Date" = Date) AND (EmployeeAbsence."Until Time" > StartTime) THEN
                StartTime := EmployeeAbsence."Until Time";
              IF (EmployeeAbsence."From Date" < Date) AND (EmployeeAbsence."To Date" > Date) THEN
                EXIT(FALSE);
              IF (EmployeeAbsence."To Date" > Date) AND (EmployeeAbsence."From Date" = Date) AND (EmployeeAbsence."From Time" < EndTime) THEN
                EndTime := EmployeeAbsence."From Time";
            END;
          END;
          IF EndTime <= StartTime THEN
            EXIT(FALSE);
        UNTIL EmployeeAbsence.NEXT = 0;
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetEmployeeAbsenceWorkingTimesEnd@1100529113(Date@1100529100 : Date;VAR StartTime@1100529102 : Time;VAR EndTime@1100529103 : Time) : Boolean;
    VAR
      EmployeeAbsence@1100529104 : Record 5207;
      EmptyTime@1100529105 : Time;
    BEGIN
      IF Type <> Type::Employee THEN
        EXIT(TRUE);
      IF Company <> COMPANYNAME THEN
        EmployeeAbsence.CHANGECOMPANY(Company);

      EmployeeAbsence.SETAUTOCALCFIELDS(Plannable);
      EmployeeAbsence.SETRANGE("Employee No.","Source No.");
      EmployeeAbsence.SETFILTER("From Date", '<= %1', Date);
      EmployeeAbsence.SETFILTER("To Date", '>= %1', Date);
      IF EmployeeAbsence.FINDSET THEN BEGIN
        REPEAT
          IF NOT EmployeeAbsence.Plannable THEN BEGIN
            IF (EmployeeAbsence."From Time" = EmptyTime) AND (EmployeeAbsence."Until Time" = EmptyTime) THEN
              EXIT(FALSE);
            IF EmployeeAbsence."From Date" = EmployeeAbsence."To Date" THEN BEGIN // less then 1 day
              IF (EmployeeAbsence."From Time" <= StartTime) AND (EmployeeAbsence."Until Time" >= EndTime) THEN
                EXIT(FALSE);
              IF (EmployeeAbsence."From Time" <= StartTime) AND (EmployeeAbsence."Until Time" < EndTime) AND (EmployeeAbsence."Until Time" > StartTime) THEN
                StartTime := EmployeeAbsence."Until Time";
              IF (EmployeeAbsence."From Time" > StartTime) AND (EmployeeAbsence."From Time" < EndTime) AND (EmployeeAbsence."Until Time" < EndTime) THEN
                StartTime := EmployeeAbsence."Until Time";
              IF (EmployeeAbsence."From Time" < EndTime) AND (EmployeeAbsence."From Time" > StartTime) AND (EmployeeAbsence."Until Time" >= EndTime) THEN
                EndTime := EmployeeAbsence."From Time";
            END ELSE BEGIN // more then 1 day
              IF (EmployeeAbsence."From Date" < Date) AND (EmployeeAbsence."To Date" = Date) AND (EmployeeAbsence."Until Time" > StartTime) THEN
                StartTime := EmployeeAbsence."Until Time";
              IF (EmployeeAbsence."From Date" < Date) AND (EmployeeAbsence."To Date" > Date) THEN
                EXIT(FALSE);
              IF (EmployeeAbsence."To Date" > Date) AND (EmployeeAbsence."From Date" = Date) AND (EmployeeAbsence."From Time" < EndTime) THEN
                EndTime := EmployeeAbsence."From Time";
            END;
          END;
          IF EndTime <= StartTime THEN
            EXIT(FALSE);
        UNTIL EmployeeAbsence.NEXT = 0;
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetPlantAbsenceWorkingTimesStart@1100529105(Date@1100529100 : Date;VAR StartTime@1100529102 : Time;VAR EndTime@1100529103 : Time) : Boolean;
    VAR
      PlantAbsence@1100529104 : Record 11126143;
      EmptyTime@1100529105 : Time;
    BEGIN
      IF Type <> Type::Plant THEN
        EXIT(TRUE);
      IF Company <> COMPANYNAME THEN
        PlantAbsence.CHANGECOMPANY(Company);

      PlantAbsence.SETAUTOCALCFIELDS(Plannable);
      PlantAbsence.SETRANGE("Plant Type","Source No.");
      PlantAbsence.SETRANGE("Plant No.", "Source No. 2");
      PlantAbsence.SETFILTER("From Date", '<= %1', Date);
      PlantAbsence.SETFILTER("To Date", '>= %1', Date);
      IF PlantAbsence.FINDSET THEN BEGIN
        REPEAT
          IF NOT PlantAbsence.Plannable THEN BEGIN
            IF (PlantAbsence."From Time" = EmptyTime) AND (PlantAbsence."Until Time" = EmptyTime) THEN
              EXIT(FALSE);
            IF PlantAbsence."From Date" = PlantAbsence."To Date" THEN BEGIN // less then 1 day
              IF (PlantAbsence."From Time" <= StartTime) AND (PlantAbsence."Until Time" >= EndTime) THEN
                EXIT(FALSE);
              IF (PlantAbsence."From Time" <= StartTime) AND (PlantAbsence."Until Time" < EndTime) AND (PlantAbsence."Until Time" > StartTime) THEN
                StartTime := PlantAbsence."Until Time";
              IF (PlantAbsence."From Time" > StartTime) AND (PlantAbsence."From Time" < EndTime) AND (PlantAbsence."Until Time" < EndTime) THEN
                EndTime := PlantAbsence."From Time";
              IF (PlantAbsence."From Time" < EndTime) AND (PlantAbsence."From Time" > StartTime) AND (PlantAbsence."Until Time" >= EndTime) THEN
                EndTime := PlantAbsence."From Time";
            END ELSE BEGIN // more then 1 day
              IF (PlantAbsence."From Date" < Date) AND (PlantAbsence."To Date" = Date) AND (PlantAbsence."Until Time" > StartTime) THEN
                StartTime := PlantAbsence."Until Time";
              IF (PlantAbsence."From Date" < Date) AND (PlantAbsence."To Date" > Date) THEN
                EXIT(FALSE);
              IF (PlantAbsence."To Date" > Date) AND (PlantAbsence."From Date" = Date) AND (PlantAbsence."From Time" < EndTime) THEN
                EndTime := PlantAbsence."From Time";
            END;
          END;
          IF EndTime <= StartTime THEN
            EXIT(FALSE);
        UNTIL PlantAbsence.NEXT = 0;
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetPlantAbsenceWorkingTimesEnd@1100529106(Date@1100529100 : Date;VAR StartTime@1100529102 : Time;VAR EndTime@1100529103 : Time) : Boolean;
    VAR
      PlantAbsence@1100529104 : Record 11126143;
      EmptyTime@1100529105 : Time;
    BEGIN
      IF Type <> Type::Plant THEN
        EXIT(TRUE);
      IF Company <> COMPANYNAME THEN
        PlantAbsence.CHANGECOMPANY(Company);

      PlantAbsence.SETAUTOCALCFIELDS(Plannable);
      PlantAbsence.SETRANGE("Plant Type", "Source No.");
      PlantAbsence.SETRANGE("Plant No.", "Source No. 2");
      PlantAbsence.SETFILTER("From Date", '<= %1', Date);
      PlantAbsence.SETFILTER("To Date", '>= %1', Date);
      IF PlantAbsence.FINDSET THEN BEGIN
        REPEAT
          IF NOT PlantAbsence.Plannable THEN BEGIN
            IF (PlantAbsence."From Time" = EmptyTime) AND (PlantAbsence."Until Time" = EmptyTime) THEN
              EXIT(FALSE);
            IF PlantAbsence."From Date" = PlantAbsence."To Date" THEN BEGIN // less then 1 day
              IF (PlantAbsence."From Time" <= StartTime) AND (PlantAbsence."Until Time" >= EndTime) THEN
                EXIT(FALSE);
              IF (PlantAbsence."From Time" <= StartTime) AND (PlantAbsence."Until Time" < EndTime) AND (PlantAbsence."Until Time" > StartTime) THEN
                StartTime := PlantAbsence."Until Time";
              IF (PlantAbsence."From Time" > StartTime) AND (PlantAbsence."From Time" < EndTime) AND (PlantAbsence."Until Time" < EndTime) THEN
                StartTime := PlantAbsence."Until Time";
              IF (PlantAbsence."From Time" < EndTime) AND (PlantAbsence."From Time" > StartTime) AND (PlantAbsence."Until Time" >= EndTime) THEN
                EndTime := PlantAbsence."From Time";
            END ELSE BEGIN // more then 1 day
              IF (PlantAbsence."From Date" < Date) AND (PlantAbsence."To Date" = Date) AND (PlantAbsence."Until Time" > StartTime) THEN
                StartTime := PlantAbsence."Until Time";
              IF (PlantAbsence."From Date" < Date) AND (PlantAbsence."To Date" > Date) THEN
                EXIT(FALSE);
              IF (PlantAbsence."To Date" > Date) AND (PlantAbsence."From Date" = Date) AND (PlantAbsence."From Time" < EndTime) THEN
                EndTime := PlantAbsence."From Time";
            END;
          END;
          IF EndTime <= StartTime THEN
            EXIT(FALSE);
        UNTIL PlantAbsence.NEXT = 0;
      END;
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE GetGlobalDim1Filter@1100529600() : Code[20];
    VAR
      Employee@1100529600 : Record 5200;
      Vendor@1100529601 : Record 23;
      PlantType@1100529603 : Record 11012551;
      PlantNumber@1100529602 : Record 11012552;
    BEGIN
      IF "Source No." = '' THEN
        EXIT('');

      CASE Type OF
        Type::Employee:
          BEGIN
            IF (Company <> '') AND (Company <> COMPANYNAME) THEN
              Employee.CHANGECOMPANY(Company);
            IF Employee.GET("Source No.") THEN
              EXIT(Employee."Global Dimension 1 Code");
          END;
        Type::Subcontractor:
          BEGIN
            IF (Company <> '') AND (Company <> COMPANYNAME) THEN
              Vendor.CHANGECOMPANY(Company);
            IF Vendor.GET("Source No.") THEN
              EXIT(Vendor."Global Dimension 1 Code");
          END;
        Type::Plant:
          BEGIN
            IF (Company <> '') AND (Company <> COMPANYNAME) THEN BEGIN
              PlantType.CHANGECOMPANY(Company);
              PlantNumber.CHANGECOMPANY(Company);
            END;
            IF PlantNumber.GET("Source No.", "Source No. 2") THEN
              EXIT(PlantNumber."Department Code");
            IF PlantType.GET("Source No.") THEN
              EXIT(PlantType."Department Code");
          END;
      END;
      EXIT('');
    END;

    LOCAL PROCEDURE CheckLinkWOToWOLeadingResourceAllowed@1100525009();
    VAR
      LinkedResource@1100525000 : Record 11229324;
    BEGIN
      IF "Link WO to WO Leading Resource" THEN BEGIN

        LinkedResource.SETRANGE("Main Resource No.", "No.");
        IF LinkedResource.FINDFIRST THEN
          FIELDERROR("Link WO to WO Leading Resource", STRSUBSTNO(Text009, TABLECAPTION, LinkedResource.FIELDCAPTION("Main Resource No."), LinkedResource.TABLECAPTION));
        LinkedResource.RESET;
        LinkedResource.SETCURRENTKEY("Resource No.");
        LinkedResource.SETRANGE("Resource No.", "No.");
        IF LinkedResource.FINDFIRST THEN
          FIELDERROR("Link WO to WO Leading Resource", STRSUBSTNO(Text009, TABLECAPTION, LinkedResource.TABLECAPTION, LinkedResource."Main Resource No."));
      END;
    END;

    PROCEDURE GetPlanGroupCompany@1100527650(Company@1100527652 : Text) : Text;
    VAR
      CompanyPlanGroup@1100527650 : Record 11229300;
      CompanyPlanGroupLine@1100527651 : Record 11229301;
    BEGIN
      CompanyPlanGroupLine.SETRANGE("Company Name", Company);
      IF CompanyPlanGroupLine.FINDFIRST THEN
        IF CompanyPlanGroup.GET(CompanyPlanGroupLine."Group Code") THEN
          EXIT(CompanyPlanGroup."Setup Company");
      EXIT(Company);
    END;

    BEGIN
    {
      Only maintain (insert/modify/delete/rename) resources of the own company allowed!
    }
    END.
  }
}

