OBJECT Page 1191 Create Employee Payment
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.01,4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Create Employee Payment;
               NOR=Opprett ansattbetaling;
               SVE=Skapa betalning f”r anst„lld];
    SaveValues=Yes;
    PageType=StandardDialog;
    OnOpenPage=VAR
                 GenJournalBatch@1000 : Record 232;
               BEGIN
                 SetJournalTemplate;
                 IF GenJournalBatch.GET(JournalTemplateName,JournalBatchName) THEN
                   SetNextNo(GenJournalBatch."No. Series")
                 ELSE
                   CLEAR(JournalBatchName);
                 PostingDate := WORKDATE;
               END;

    OnQueryClosePage=BEGIN
                       IF CloseAction = ACTION::OK THEN BEGIN
                         IF JournalBatchName = '' THEN
                           ERROR(BatchNumberNotFilledErr);
                         IF FORMAT(PostingDate) = '' THEN
                           ERROR(PostingDateNotFilledErr);
                         IF NextDocNo = '' THEN
                           ERROR(SpecifyStartingDocNumErr);
                       END;
                     END;

  }
  CONTROLS
  {
    { 1   ;    ;Container ;
                Name=Options;
                ContainerType=ContentArea }

    { 6   ;1   ;Group     ;
                GroupType=Group }

    { 5   ;2   ;Field     ;
                Name=Batch Name;
                CaptionML=[ENU=Batch Name;
                           NOR=Bunkenavn;
                           SVE=Journalnamn];
                ToolTipML=[ENU=Specifies the name of the journal batch.;
                           NOR=Angir navnet p† kladden.;
                           SVE=Anger journalens namn.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=JournalBatchName;
                TableRelation="Gen. Journal Batch".Name WHERE (Template Type=CONST(Payments),
                                                               Recurring=CONST(No));
                OnValidate=VAR
                             GenJournalBatch@1000 : Record 232;
                           BEGIN
                             SetJournalTemplate;
                             IF JournalTemplateName <> '' THEN BEGIN
                               GenJournalBatch.GET(JournalTemplateName,JournalBatchName);
                               SetNextNo(GenJournalBatch."No. Series");
                             END;
                           END;

                ShowMandatory=TRUE }

    { 2   ;2   ;Field     ;
                Name=Posting Date;
                CaptionML=[ENU=Posting Date;
                           NOR=Bokf›ringsdato;
                           SVE=Bokf”ringsdatum];
                ToolTipML=[ENU=Specifies the entry's posting date.;
                           NOR=Angir postens bokf›ringsdato.;
                           SVE=Anger transaktionens bokf”ringsdatum.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=PostingDate;
                ShowMandatory=TRUE }

    { 7   ;2   ;Field     ;
                Name=Starting Document No.;
                CaptionML=[ENU=Starting Document No.;
                           NOR=Startbilagsnr.;
                           SVE=Fr.o.m. dokumentnr];
                ToolTipML=[ENU=Specifies a document number for the journal line.;
                           NOR=Angir et dokumentnummer for kladdelinjen.;
                           SVE=Anger ett dokumentnummer f”r journalraden.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=NextDocNo;
                OnValidate=VAR
                             TextManagement@1000 : Codeunit 41;
                           BEGIN
                             IF NextDocNo <> '' THEN
                               TextManagement.EvaluateIncStr(NextDocNo,StartingDocumentNoErr);
                           END;

                ShowMandatory=TRUE }

    { 3   ;2   ;Field     ;
                Name=Bank Account;
                CaptionML=[ENU=Bank Account;
                           NOR=Bankkonto;
                           SVE=Bankkonto];
                ToolTipML=[ENU=Specifies the bank account to which a balancing entry for the journal line will be posted.;
                           NOR=Angir bankkontoen som en motpost for kladdelinjen skal bokf›res til.;
                           SVE=Anger det bankkonto som en balanserande transaktion f”r journalraden bokf”rs p†.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=BalAccountNo;
                TableRelation="Bank Account" }

    { 4   ;2   ;Field     ;
                Name=Payment Type;
                CaptionML=[ENU=Payment Type;
                           NOR=Betalingstype;
                           SVE=Betalningsform];
                ToolTipML=[ENU=Specifies the code for the payment type to be used for the entry on the payment journal line.;
                           NOR=Angir koden til betalingstypen som skal brukes for posten p† betalingskladdelinjen.;
                           SVE=Anger koden f”r betalningstypen som ska anv„ndas f”r transaktionen p† utbetalningsjournalraden.];
                OptionCaptionML=[ENU=" ,Computer Check,Manual Check,Electronic Payment,Electronic Payment-IAT";
                                 NOR=" ,Maskinell sjekk,Manuell sjekk,Elektronisk betaling,Elektronisk betaling-IAT";
                                 SVE=" ,Datorcheck,Handskriven check,Elektronisk betalning,Elektronisk betalnings-IAT"];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=BankPaymentType }

  }
  CODE
  {
    VAR
      TempEmplPaymentBuffer@1011 : TEMPORARY Record 5225;
      PostingDate@1001 : Date;
      BalAccountNo@1002 : Code[20];
      NextDocNo@1004 : Code[20];
      JournalBatchName@1005 : Code[10];
      JournalTemplateName@1006 : Code[10];
      BankPaymentType@1003 : ' ,Computer Check,Manual Check,Electronic Payment,Electronic Payment-IAT';
      StartingDocumentNoErr@1007 : TextConst 'ENU=Starting Document No.;NOR=Startbilagsnr.;SVE=Fr.o.m. dokumentnr';
      BatchNumberNotFilledErr@1008 : TextConst 'ENU=You must fill the Batch Name field.;NOR=Du m† fylle ut feltet Bunkenavn.;SVE=Du m†ste fylla i f„ltet Journalnamn.';
      PostingDateNotFilledErr@1009 : TextConst 'ENU=You must fill the Posting Date field.;NOR=Du m† fylle ut feltet Bokf›ringsdato.;SVE=Du m†ste fylla i f„ltet Bokf”ringsdatum.';
      SpecifyStartingDocNumErr@1010 : TextConst 'ENU=In the Starting Document No. field, specify the first document number to be used.;NOR=I feltet Startbilagsnr. angir du det f›rste bilagsnummeret som skal brukes.;SVE=I f„ltet Fr.o.m. dokumentnr anger du f”rsta dokumentnumret som ska anv„ndas.';

    [External]
    PROCEDURE GetPostingDate@2() : Date;
    BEGIN
      EXIT(PostingDate);
    END;

    [External]
    PROCEDURE GetBankAccount@3() : Text;
    BEGIN
      EXIT(FORMAT(BalAccountNo));
    END;

    [External]
    PROCEDURE GetBankPaymentType@4() : Integer;
    BEGIN
      EXIT(BankPaymentType);
    END;

    [External]
    PROCEDURE GetBatchNumber@6() : Code[10];
    BEGIN
      EXIT(JournalBatchName);
    END;

    [External]
    PROCEDURE MakeGenJnlLines@5(VAR EmployeeLedgerEntry@1012 : Record 5222);
    BEGIN
      TempEmplPaymentBuffer.RESET;
      TempEmplPaymentBuffer.DELETEALL;

      CopyEmployeeLedgerEntriesToTempEmplPaymentBuffer(EmployeeLedgerEntry);
      CopyTempEmpPaymentBuffersToGenJnlLines;
    END;

    LOCAL PROCEDURE CopyEmployeeLedgerEntriesToTempEmplPaymentBuffer@21(VAR EmployeeLedgerEntry@1001 : Record 5222);
    VAR
      PaymentAmt@1002 : Decimal;
    BEGIN
      IF EmployeeLedgerEntry.FIND('-') THEN
        REPEAT
          EmployeeLedgerEntry.CALCFIELDS("Remaining Amount");
          IF (EmployeeLedgerEntry."Applies-to ID" = '') AND (EmployeeLedgerEntry."Remaining Amount" < 0) THEN BEGIN
            TempEmplPaymentBuffer."Employee No." := EmployeeLedgerEntry."Employee No.";
            TempEmplPaymentBuffer."Currency Code" := EmployeeLedgerEntry."Currency Code";
            TempEmplPaymentBuffer."Payment Method Code" := EmployeeLedgerEntry."Payment Method Code";
            TempEmplPaymentBuffer."Creditor No." := EmployeeLedgerEntry."Creditor No.";
            TempEmplPaymentBuffer."Payment Reference" := EmployeeLedgerEntry."Payment Reference";
            TempEmplPaymentBuffer."Exported to Payment File" := EmployeeLedgerEntry."Exported to Payment File";
            TempEmplPaymentBuffer."Dimension Entry No." := 0;
            TempEmplPaymentBuffer."Global Dimension 1 Code" := '';
            TempEmplPaymentBuffer."Global Dimension 2 Code" := '';
            TempEmplPaymentBuffer."Dimension Set ID" := 0;
            TempEmplPaymentBuffer."Employee Ledg. Entry No." := EmployeeLedgerEntry."Entry No.";
            TempEmplPaymentBuffer."Employee Ledg. Entry Doc. Type" := EmployeeLedgerEntry."Document Type";

            PaymentAmt := -EmployeeLedgerEntry."Remaining Amount";

            TempEmplPaymentBuffer.RESET;
            TempEmplPaymentBuffer.SETRANGE("Employee No.",EmployeeLedgerEntry."Employee No.");
            IF TempEmplPaymentBuffer.FIND('-') THEN BEGIN
              TempEmplPaymentBuffer.Amount := TempEmplPaymentBuffer.Amount + PaymentAmt;
              TempEmplPaymentBuffer.MODIFY;
            END ELSE BEGIN
              TempEmplPaymentBuffer."Document No." := NextDocNo;
              NextDocNo := INCSTR(NextDocNo);
              TempEmplPaymentBuffer.Amount := PaymentAmt;
              TempEmplPaymentBuffer.INSERT;
            END;
            EmployeeLedgerEntry."Applies-to ID" := TempEmplPaymentBuffer."Document No.";
            EmployeeLedgerEntry."Amount to Apply" := EmployeeLedgerEntry."Remaining Amount";
            CODEUNIT.RUN(CODEUNIT::"Empl. Entry-Edit",EmployeeLedgerEntry);
          END;
        UNTIL EmployeeLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE CopyTempEmpPaymentBuffersToGenJnlLines@11();
    VAR
      CompanyInformation@1006 : Record 79;
      GenJnlLine@1003 : Record 81;
      GenJournalBatch@1002 : Record 232;
      GenJournalTemplate@1001 : Record 80;
      Employee@1000 : Record 5200;
      BalAccType@1005 : 'G/L Account,Customer,Vendor,Bank Account';
      LastLineNo@1004 : Integer;
    BEGIN
      GenJnlLine.LOCKTABLE;
      GenJournalTemplate.GET(JournalTemplateName);
      GenJournalBatch.GET(JournalTemplateName,JournalBatchName);
      GenJnlLine.SETRANGE("Journal Template Name",JournalTemplateName);
      GenJnlLine.SETRANGE("Journal Batch Name",JournalBatchName);
      IF GenJnlLine.FINDLAST THEN BEGIN
        LastLineNo := GenJnlLine."Line No.";
        GenJnlLine.INIT;
      END;

      TempEmplPaymentBuffer.RESET;
      TempEmplPaymentBuffer.SETCURRENTKEY("Document No.");
      TempEmplPaymentBuffer.SETFILTER(
        "Employee Ledg. Entry Doc. Type",'<>%1&<>%2',TempEmplPaymentBuffer."Employee Ledg. Entry Doc. Type"::Refund,
        TempEmplPaymentBuffer."Employee Ledg. Entry Doc. Type"::Payment);
      IF TempEmplPaymentBuffer.FINDSET THEN
        REPEAT
          WITH GenJnlLine DO BEGIN
            INIT;
            VALIDATE("Journal Template Name",JournalTemplateName);
            VALIDATE("Journal Batch Name",JournalBatchName);
            LastLineNo := LastLineNo + 10000;
            "Line No." := LastLineNo;
            "Document Type" := "Document Type"::Payment;
            "Posting No. Series" := GenJournalBatch."Posting No. Series";
            "Document No." := TempEmplPaymentBuffer."Document No.";
            "Account Type" := "Account Type"::Employee;
            SetHideValidation(TRUE);
            VALIDATE("Posting Date",PostingDate);
            VALIDATE("Account No.",TempEmplPaymentBuffer."Employee No.");

            Employee.GET(TempEmplPaymentBuffer."Employee No.");

            "Bal. Account Type" := BalAccType::"Bank Account";
            VALIDATE("Bal. Account No.",BalAccountNo);
            VALIDATE("Currency Code",TempEmplPaymentBuffer."Currency Code");

            CompanyInformation.GET;
            "Message to Recipient" := CompanyInformation.Name;

            "Bank Payment Type" := BankPaymentType;
            "Applies-to ID" := "Document No.";
            Description := COPYSTR(Employee.FullName,1,MAXSTRLEN(Description));
            "Source Line No." := TempEmplPaymentBuffer."Employee Ledg. Entry No.";
            "Shortcut Dimension 1 Code" := TempEmplPaymentBuffer."Global Dimension 1 Code";
            "Shortcut Dimension 2 Code" := TempEmplPaymentBuffer."Global Dimension 2 Code";
            "Dimension Set ID" := TempEmplPaymentBuffer."Dimension Set ID";
            "Source Code" := GenJournalTemplate."Source Code";
            "Reason Code" := GenJournalBatch."Reason Code";
            VALIDATE(Amount,TempEmplPaymentBuffer.Amount);
            "Applies-to Doc. Type" := TempEmplPaymentBuffer."Employee Ledg. Entry Doc. Type";
            "Applies-to Doc. No." := TempEmplPaymentBuffer."Employee Ledg. Entry Doc. No.";
            VALIDATE("Payment Method Code",TempEmplPaymentBuffer."Payment Method Code");
            "Creditor No." := COPYSTR(TempEmplPaymentBuffer."Creditor No.",1,MAXSTRLEN("Creditor No."));
            "Payment Reference" := COPYSTR(TempEmplPaymentBuffer."Payment Reference",1,MAXSTRLEN("Payment Reference"));
            "Exported to Payment File" := TempEmplPaymentBuffer."Exported to Payment File";
            "Applies-to Ext. Doc. No." := TempEmplPaymentBuffer."Applies-to Ext. Doc. No.";

            UpdateDimensions(GenJnlLine,TempEmplPaymentBuffer);
            INSERT;
          END;
        UNTIL TempEmplPaymentBuffer.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateDimensions@17(VAR GenJnlLine@1005 : Record 81;TempEmplPaymentBuffer@1008 : TEMPORARY Record 5225);
    VAR
      DimBuf@1002 : Record 360;
      TempDimSetEntry@1001 : TEMPORARY Record 480;
      DimVal@1004 : Record 349;
      DimBufMgt@1007 : Codeunit 411;
      DimMgt@1009 : Codeunit 408;
      NewDimensionID@1003 : Integer;
      DimSetIDArr@1006 : ARRAY [10] OF Integer;
    BEGIN
      WITH GenJnlLine DO BEGIN
        NewDimensionID := "Dimension Set ID";

        DimBuf.RESET;
        DimBuf.DELETEALL;
        DimBufMgt.GetDimensions(TempEmplPaymentBuffer."Dimension Entry No.",DimBuf);
        IF DimBuf.FINDSET THEN
          REPEAT
            DimVal.GET(DimBuf."Dimension Code",DimBuf."Dimension Value Code");
            TempDimSetEntry."Dimension Code" := DimBuf."Dimension Code";
            TempDimSetEntry."Dimension Value Code" := DimBuf."Dimension Value Code";
            TempDimSetEntry."Dimension Value ID" := DimVal."Dimension Value ID";
            TempDimSetEntry.INSERT;
          UNTIL DimBuf.NEXT = 0;
        NewDimensionID := DimMgt.GetDimensionSetID(TempDimSetEntry);
        "Dimension Set ID" := NewDimensionID;

        CreateDim(
          DimMgt.TypeToTableID1("Account Type"),"Account No.",
          DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
          //**4PS.sn
          DATABASE::"Plant Number",DimMgt.MakeCombinedPlantNo("Plant Type","Plant No."),
          DATABASE::"Plant Type","Plant Type",
          //**4PS.en
          DATABASE::Job,"Job No.",
          //**4PS.sn
          DATABASE::"Service Order","Service Order No.",
          //**4PS.en
          DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
          DATABASE::Campaign,"Campaign No.");
        IF NewDimensionID <> "Dimension Set ID" THEN BEGIN
          DimSetIDArr[1] := "Dimension Set ID";
          DimSetIDArr[2] := NewDimensionID;
          "Dimension Set ID" :=
            DimMgt.GetCombinedDimensionSetID(DimSetIDArr,"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
        END;

        DimMgt.GetDimensionSet(TempDimSetEntry,"Dimension Set ID");
        DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code",
          "Shortcut Dimension 2 Code");
      END;
    END;

    LOCAL PROCEDURE SetJournalTemplate@7();
    VAR
      GenJournalTemplate@1000 : Record 80;
    BEGIN
      GenJournalTemplate.RESET;
      GenJournalTemplate.SETRANGE(Type,GenJournalTemplate.Type::Payments);
      GenJournalTemplate.SETRANGE(Recurring,FALSE);
      IF GenJournalTemplate.FINDFIRST THEN
        JournalTemplateName := GenJournalTemplate.Name;
    END;

    LOCAL PROCEDURE SetNextNo@10(GenJournalBatchNoSeries@1002 : Code[20]);
    VAR
      GenJournalLine@1000 : Record 81;
      NoSeriesMgt@1001 : Codeunit 396;
    BEGIN
      IF GenJournalBatchNoSeries = '' THEN
        NextDocNo := ''
      ELSE BEGIN
        GenJournalLine.SETRANGE("Journal Template Name",JournalTemplateName);
        GenJournalLine.SETRANGE("Journal Batch Name",JournalBatchName);
        IF GenJournalLine.FINDLAST THEN
          NextDocNo := INCSTR(GenJournalLine."Document No.")
        ELSE
          NextDocNo := NoSeriesMgt.GetNextNo(GenJournalBatchNoSeries,PostingDate,FALSE);
        CLEAR(NoSeriesMgt);
      END;
    END;

    BEGIN
    END.
  }
}

