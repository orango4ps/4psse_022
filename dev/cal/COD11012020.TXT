OBJECT Codeunit 11012020 WKA Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@11012002 : TextConst 'DEU=Kreditoren, die dem Garantiefonds angegleidert sind, ist keine Abtragung zugelassen.;ENU=For Vendors not related to Security Fund, no payment allowed.;NLD=Voor leveranciers aangesloten bij het waarborgfonds is geen afdracht toegestaan.;NOR=Betaling ikke tillatt for leverandõrer som ikke er knyttet til sikkerhetsfond.;SVE=Fîr leverantîrer som inte Ñr relaterade till sÑkerhetsfond Ñr betalning inte tillÜten.';
      Text001@11012003 : TextConst 'DEU=Betrag darf nicht grîsser sein als die Lohnsumme %1.;ENU=Amount should not be greater then the Labor Amount %1;NLD=Bedrag mag niet groter zijn dan de loonsom %1.;NOR=Belõpet kan ikke vëre stõrre enn arbeidskraftsbelõpet %1;SVE=Beloppet fÜr inte vara stîrre Ñn arbetskraftsbeloppet %1';
      CurrencyRec@11012000 : Record 4;
      VendorRec@11012001 : Record 23;
      Text002@1100485004 : TextConst 'DEU=%1 fehlt.;ENU=%1 absent.;NLD=%1 ontbreekt.;NOR=%1 mangler.;SVE=%1 saknas.';
      Text003@1100485003 : TextConst 'DEU=%1 ist;ENU=%1 has passed.;NLD=%1 is gepasseerd.;NOR=%1 er har passert;SVE=%1 har passerat.';
      Text004@1100485002 : TextConst 'DEU=Kein %1 eingegeben.;ENU=No %1 entered.;NLD=Geen %1 ingevoerd.;NOR=Ingen %1 er angitt.;SVE=Ingen %1 har angetts.';
      Text005@1100485001 : TextConst 'DEU=%1 %2 nicht empfangen.;ENU=%1 %2 not received.;NLD=%1 %2 niet ontvangen.;NOR=%1 %2 ikke mottatt.;SVE=%1 %2 har inte tagits emot.';
      Text006@1100485000 : TextConst 'DEU=öberweisung %1 %2 ist nicht ausgefÅllt.;ENU=Payment Agreement %1 %2 is empty.;NLD=Overm. %1 %2 is niet gevuld.;NOR=BetalingsvilkÜret %1 %2 er tomt.;SVE=Betalningsvillkoret %1 %2 Ñr tomt.';

    PROCEDURE CalculateRate@1(ManHoursDec@11012000 : Decimal;LaborAmountDec@11012001 : Decimal;VAR WageRateDec@11012002 : Decimal);
    BEGIN
      IF ManHoursDec <> 0 THEN
        WageRateDec := LaborAmountDec / ManHoursDec;
    END;

    PROCEDURE CalculateWageChart@2(VendNo@11012000 : Code[20];LaborAmountDec@11012001 : Decimal;VAR LaborPercDec@11012002 : Decimal;VAR PayToTaxAuth@11012003 : Boolean;Currency@11012004 : Code[10];VAR WageChargeDec@11012005 : Decimal;VAR WageTaxDec@11012006 : Decimal;VAR TotalPercDec@1210190000 : Decimal;VAR FixedBAmountperHour@1100528200 : Decimal;NumberOfHours@1100528201 : Decimal;InvoiceAmountDec@1210190001 : Decimal);
    VAR
      ContributionDec@11012008 : Decimal;
    BEGIN
      IF VendorRec.GET(VendNo) THEN BEGIN
        IF VendorRec."Security Fund" THEN BEGIN
          LaborPercDec := 0;
          TotalPercDec := 0;
          FixedBAmountperHour := 0;
        END;
      END ELSE BEGIN
        VendorRec.ACL := FALSE;
      END;

      //Only one of the next three variables is not equal zero
      IF TotalPercDec <> 0 THEN
        ContributionDec := InvoiceAmountDec * TotalPercDec  / 100;

      IF LaborPercDec <> 0 THEN
        ContributionDec := LaborAmountDec * LaborPercDec / 100;

      IF FixedBAmountperHour <> 0 THEN BEGIN
        ContributionDec := NumberOfHours * FixedBAmountperHour;
        IF ContributionDec > InvoiceAmountDec THEN
          ContributionDec := InvoiceAmountDec;
      END;

      RoundToWholeNumbers(Currency,ContributionDec);
      IF PayToTaxAuth THEN BEGIN
        WageTaxDec := ContributionDec;
        WageChargeDec := 0;
      END ELSE BEGIN
        WageChargeDec := ContributionDec;
        WageTaxDec := 0;
      END;
    END;

    PROCEDURE CalculateWageCharge@3(ManHoursDec@11012000 : Decimal;WageRateDec@11012001 : Decimal;Currency@11012002 : Code[10];VAR LaborAmountDec@11012003 : Decimal);
    BEGIN
      LaborAmountDec := ManHoursDec * WageRateDec;
      RoundToWholeNumbers(Currency,LaborAmountDec);
    END;

    PROCEDURE ValidateWageCharge@6(LaborAmountDec@11012000 : Decimal;Currency@11012001 : Code[10];VAR WageChargeDec@11012002 : Decimal;VAR LaborPercDec@11012003 : Decimal;VAR TotalPercDec@1210190000 : Decimal;VAR FixedBAmountperHour@1100528200 : Decimal;InvoiceAmountDec@1210190001 : Decimal);
    BEGIN
      RoundToWholeNumbers(Currency,WageChargeDec);

      IF FixedBAmountperHour <> 0 THEN BEGIN
        TestExceedingOfLaborAmount(InvoiceAmountDec,WageChargeDec);
        LaborPercDec := 0;
        TotalPercDec := 0;
      END ELSE BEGIN
        IF (TotalPercDec <> 0) OR ((LaborAmountDec = 0) AND (LaborPercDec = 0)) THEN BEGIN
          TestExceedingOfLaborAmount(InvoiceAmountDec,WageChargeDec);
          IF (InvoiceAmountDec <> 0) THEN
            TotalPercDec := (WageChargeDec  / InvoiceAmountDec) * 100;
          LaborPercDec := 0;
        END ELSE BEGIN
          TestExceedingOfLaborAmount(LaborAmountDec,WageChargeDec);
          IF LaborAmountDec <> 0 THEN
            LaborPercDec := (WageChargeDec  / LaborAmountDec) * 100;
          IF LaborPercDec <> 0 THEN
            TotalPercDec := 0;
        END;
      END;
    END;

    PROCEDURE ValidateWageTax@7(VendNo@11012000 : Code[20];LaborAmountDec@11012001 : Decimal;Currency@11012002 : Code[10];VAR LaborPercDec@11012003 : Decimal;VAR WageTaxDec@11012004 : Decimal;VAR TotalPercDec@1210190000 : Decimal;VAR FixedBAmountperHour@1100528200 : Decimal;InvoiceAmountDec@1210190001 : Decimal);
    VAR
      ContributionDec@11012006 : Decimal;
    BEGIN
      RoundToWholeNumbers(Currency,WageTaxDec);

      IF FixedBAmountperHour <> 0 THEN BEGIN
        TestExceedingOfLaborAmount(InvoiceAmountDec,WageTaxDec);
        LaborPercDec := 0;
        TotalPercDec := 0;
      END ELSE BEGIN
        IF (TotalPercDec <> 0) OR ((LaborAmountDec = 0) AND (LaborPercDec = 0)) THEN BEGIN
          TestExceedingOfLaborAmount(InvoiceAmountDec,WageTaxDec);
          IF NOT VendorRec.GET(VendNo) THEN BEGIN
            VendorRec.ACL := FALSE;
          END;
          IF (VendorRec."Subcontractor Type" = VendorRec."Subcontractor Type"::"Self Employed") OR VendorRec.ACL THEN BEGIN
            ContributionDec := WageTaxDec;
            IF (InvoiceAmountDec <> 0) THEN
              TotalPercDec := (WageTaxDec  / InvoiceAmountDec) * 100;
          END ELSE
            ContributionDec := InvoiceAmountDec * TotalPercDec / 100;

          RoundToWholeNumbers(Currency,ContributionDec);

          IF (WageTaxDec > ContributionDec) AND (InvoiceAmountDec <> 0) THEN BEGIN
            TotalPercDec := (WageTaxDec  / InvoiceAmountDec) * 100;
            ContributionDec := InvoiceAmountDec * TotalPercDec / 100;
            RoundToWholeNumbers(Currency,ContributionDec);
          END;

          LaborPercDec := 0;


        END ELSE BEGIN
          TestExceedingOfLaborAmount(LaborAmountDec,WageTaxDec);

          IF NOT VendorRec.GET(VendNo) THEN BEGIN
            VendorRec.ACL := FALSE;
          END;

          IF (VendorRec."Subcontractor Type" = VendorRec."Subcontractor Type"::"Self Employed") OR VendorRec.ACL THEN BEGIN
            ContributionDec := WageTaxDec;
            IF (LaborAmountDec <> 0) THEN
              LaborPercDec := (WageTaxDec  / LaborAmountDec) * 100;
          END ELSE
            ContributionDec := LaborAmountDec * LaborPercDec / 100;

          RoundToWholeNumbers(Currency,ContributionDec);

          IF (WageTaxDec > ContributionDec) AND (LaborAmountDec <> 0) THEN BEGIN
            LaborPercDec := (WageTaxDec  / LaborAmountDec) * 100;
            ContributionDec := LaborAmountDec * LaborPercDec / 100;
            RoundToWholeNumbers(Currency,ContributionDec);
          END;

          IF LaborPercDec <> 0 THEN
            TotalPercDec := 0;

        END;
      END;
    END;

    PROCEDURE ValidatePercentage@9(VendNo@11012000 : Code[20];VAR PercentageDec@11012001 : Decimal);
    BEGIN
      IF (PercentageDec <> 0) AND (VendNo <> '') THEN
        IF VendorRec.GET(VendNo) THEN
          IF VendorRec. "Security Fund" THEN BEGIN
            MESSAGE(Text000);
            PercentageDec := 0;
          END;
    END;

    PROCEDURE TestExceedingOfLaborAmount@4(LaborAmountDec@11012000 : Decimal;VAR ContributionDec@11012001 : Decimal);
    BEGIN
      IF ContributionDec > LaborAmountDec THEN BEGIN
        MESSAGE(Text001, LaborAmountDec);
        ContributionDec := LaborAmountDec;
      END;
    END;

    PROCEDURE RoundToWholeNumbers@5(Currency@11012000 : Code[10];VAR Amount@11012001 : Decimal);
    BEGIN
      IF Currency = '' THEN
        CurrencyRec.InitRoundingPrecision
      ELSE BEGIN
        CurrencyRec.GET(Currency);
        CurrencyRec.TESTFIELD("Amount Rounding Precision");
      END;
      Amount := ROUND(Amount,CurrencyRec."Amount Rounding Precision");
    END;

    [External]
    PROCEDURE CheckExternal@1100485004(IVendLedgEntryRec@1100485001 : Record 25;VAR VarErrorRec@1100485000 : Record 11012052) : Boolean;
    BEGIN
      //* Ivm licentie problemen is deze functie verplaatst van report 11000000 naar deze codeunit. Deze functie wordt
      //* namelijk ook gebruikt in objects die niet tot de telebankieren granule behoren.
      //* De variable 'VarErrorRec' kan ook "Temporary" zijn, afhankelijk hoe gedefineerd in aanroepende proces.

      IF SkipSubcontractingInvoice(IVendLedgEntryRec, VarErrorRec, IVendLedgEntryRec."Due Date") THEN
        EXIT(FALSE)
      ELSE
        EXIT(TRUE);
    END;

    [External]
    PROCEDURE SkipSubcontractingInvoice@1100485000(IVendLedgEntryRec@1100485003 : Record 25;VAR VarErrorRec@1100485004 : Record 11012052;CheckDate@1100525001 : Date) : Boolean;
    VAR
      lvWKACheckRec@1100485001 : Record 11020275;
      lvVendWKACheckRec@1100485002 : Record 11020276;
      lvPaymAgrRec@1100485005 : Record 11012028;
      lvPurchInvHeader@1100525000 : Record 122;
      PurchSetup@1100525002 : Record 312;
      lvErrorBln@1100485000 : Boolean;
    BEGIN
      //* Ivm licentie problemen is deze functie verplaatst van report 11000000 naar deze codeunit. Deze functie werd
      //* namelijk (indirect, via 'CheckExternal') ook gebruikt in objects die niet tot de telebankieren granule behoren.
      //* De variable 'VarErrorRec' kan ook "Temporary" zijn, afhankelijk hoe gedefineerd in aanroepende proces.

      WITH IVendLedgEntryRec DO BEGIN
        lvErrorBln := FALSE;

        //C-029251
        IF "Document Type" = "Document Type"::"Credit Memo" THEN
          EXIT(FALSE);
        //

        IF NOT "Subcontracting Invoice" THEN
          EXIT(FALSE);

        IF "WKA approval" THEN
          EXIT(FALSE); //No further tests

        VendorRec.GET("Vendor No.");
        IF "Document Type" = "Document Type"::Invoice THEN
          IF lvPurchInvHeader.GET("Document No.") THEN
            IF lvPurchInvHeader."Buy-from Vendor No." <> "Vendor No." THEN
              IF VendorRec.GET(lvPurchInvHeader."Buy-from Vendor No.") THEN; //Check WKA for Original Vendor (Call 12058)

        IF VendorRec."WKA Check Not Active" THEN  //CALL C011375 new
          EXIT(FALSE); //No further tests

        IF "Payment Agreement" = '' THEN BEGIN
          IF (VendorRec."Subcontractor Type" <> VendorRec."Subcontractor Type"::"Self Employed") AND NOT VendorRec.ACL THEN BEGIN
            PurchSetup.GET;
            IF PurchSetup."Payment Agreement Mandatory" THEN
              CreateErrorPaym(
                STRSUBSTNO(Text004,FIELDCAPTION("Payment Agreement")),IVendLedgEntryRec,VarErrorRec,lvErrorBln);
          END;
        END ELSE BEGIN
          IF NOT lvPaymAgrRec.GET("Payment Agreement") THEN
            CreateErrorPaym(
              STRSUBSTNO(Text002,FIELDCAPTION("Payment Agreement")),IVendLedgEntryRec,VarErrorRec,lvErrorBln)
          ELSE BEGIN
            IF lvPaymAgrRec.Description = '' THEN
              CreateErrorPaym(
                STRSUBSTNO(Text006,"Payment Agreement",lvPaymAgrRec.FIELDCAPTION(Description)),
                IVendLedgEntryRec,VarErrorRec,lvErrorBln);
            IF lvPaymAgrRec.Date = 0D THEN
              CreateErrorPaym(
                STRSUBSTNO(Text006,"Payment Agreement",lvPaymAgrRec.FIELDCAPTION(Date)),
                IVendLedgEntryRec,VarErrorRec,lvErrorBln);
            IF lvPaymAgrRec."Signed Return Date" = 0D THEN
              CreateErrorPaym(
                STRSUBSTNO(Text006,"Payment Agreement",lvPaymAgrRec.FIELDCAPTION("Signed Return Date")),
                IVendLedgEntryRec,VarErrorRec,lvErrorBln);
          END;
        END;
        IF VendorRec."COC Registration No." = '' THEN
          CreateErrorPaym(
            STRSUBSTNO(Text002,VendorRec.FIELDCAPTION("COC Registration No.")),
            IVendLedgEntryRec,VarErrorRec,lvErrorBln);
        IF VendorRec."Due Date COC Statement" < CheckDate THEN
          CreateErrorPaym(
            STRSUBSTNO(Text003,VendorRec.FIELDCAPTION("Due Date COC Statement")),
            IVendLedgEntryRec,VarErrorRec,lvErrorBln);
        IF (VendorRec."Security Fund") AND (lvPaymAgrRec."Safe Guarding" <> lvPaymAgrRec."Safe Guarding"::Received) THEN
          CreateErrorPaym(
            STRSUBSTNO(Text005,lvPaymAgrRec.FIELDCAPTION("Safe Guarding"),FIELDCAPTION("Payment Agreement")),
            IVendLedgEntryRec,VarErrorRec,lvErrorBln);

        lvWKACheckRec.RESET;
        lvWKACheckRec.SETRANGE(Mandatory, TRUE);
        lvWKACheckRec.SetWKAVendorFilters(VendorRec);
        IF lvWKACheckRec.FINDSET(FALSE, FALSE) THEN
          REPEAT
            IF NOT lvVendWKACheckRec.GET(VendorRec."No.", lvWKACheckRec.Code) THEN
              CreateErrorPaym(lvWKACheckRec.Description, IVendLedgEntryRec,VarErrorRec,lvErrorBln)
            ELSE
              IF NOT lvVendWKACheckRec.DataIsValid(CheckDate) THEN
                CreateErrorPaym(lvWKACheckRec.Description, IVendLedgEntryRec,VarErrorRec,lvErrorBln)
          UNTIL lvWKACheckRec.NEXT = 0;

        lvVendWKACheckRec.RESET;
        lvVendWKACheckRec.SETRANGE("Vendor No.", VendorRec."No.");
        lvVendWKACheckRec.SETRANGE(Mandatory, FALSE);
        lvVendWKACheckRec.SETRANGE("Extra Obligation Vendor", TRUE);
        IF lvVendWKACheckRec.FINDSET(FALSE, FALSE) THEN
          REPEAT
            IF NOT lvVendWKACheckRec.DataIsValid(CheckDate) THEN BEGIN
              lvVendWKACheckRec.CALCFIELDS(Description);
              CreateErrorPaym(lvVendWKACheckRec.Description, IVendLedgEntryRec,VarErrorRec,lvErrorBln)
            END;
          UNTIL lvVendWKACheckRec.NEXT = 0;

      END;

      EXIT(lvErrorBln);
    END;

    LOCAL PROCEDURE CreateErrorPaym@1100485001(IErrorMessage@11012000 : Text[100];IVendLedgEntryRec@1100485000 : Record 25;VAR VarErrorRec@1100485001 : Record 11012052;VAR VarErrorBln@1100485002 : Boolean);
    VAR
      lvNextLineNo@1100485003 : Integer;
    BEGIN
      IF VarErrorRec.FINDLAST THEN
        lvNextLineNo := VarErrorRec."Line No." + 1
      ELSE
        lvNextLineNo := 1;

      VarErrorRec.INIT;
      VarErrorRec."Line No." := lvNextLineNo;
      VarErrorRec.Vendor := VendorRec."No.";
      VarErrorRec.SWP := (VendorRec."Subcontractor Type" = VendorRec."Subcontractor Type"::"Self Employed");
      VarErrorRec.ACL := VendorRec.ACL;
      VarErrorRec."Document No." := IVendLedgEntryRec."Document No.";
      VarErrorRec."External Doc.No." := COPYSTR(
        IVendLedgEntryRec."External Document No.", 1, MAXSTRLEN(VarErrorRec."External Doc.No."));
      VarErrorRec."Payment Agreement" := IVendLedgEntryRec."Payment Agreement";
      VarErrorRec."Error message" := COPYSTR(IErrorMessage,1,MAXSTRLEN(VarErrorRec."Error message"));
      VarErrorRec.INSERT;

      VarErrorBln := TRUE;
    END;

    BEGIN
    END.
  }
}

