OBJECT Codeunit 11012250 Export Data To XML File
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    Permissions=TableData 86=rim,
                TableData 730=rim,
                TableData 747=rim;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Window@1210190000 : Dialog;
      Text000@1210190001 : TextConst 'ENU=Table:      #1########  #2################################\;NOR=Table:      #1########  #2################################\;SVE=Tabell:     #1########  #2################################\';
      Text001@1210190002 : TextConst 'ENU=Progress: @3@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@;NOR=Fremgang: @3@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@;SVE=F”rlopp:  @3@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@';
      DownloadTxt@1100525000 : TextConst 'ENU=Download Xml File;SVE=Ladda ner XML-fil';

    PROCEDURE ExportDemoData@1100525000(VAR DemoDataTable@1100525001 : Record 11020619;FileName@1100525000 : Text[260]);
    VAR
      XmlDoc@1100409006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XmlElement@1100409007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      FileManagement@1100525002 : Codeunit 419;
      DownloadTxt@1100525007 : TextConst 'ENU=Download;SVE=H„mta';
      FileFilter@1100525006 : TextConst 'ENU=Xml file (*.xml)|All Files (*.*)|*.*';
      ServerFileName@1100525005 : Text;
    BEGIN
      XmlDoc := XmlDoc.XmlDocument;

      ServerFileName := FileManagement.ServerTempFileName('');
      AppendElement(XmlDoc, 'demodata', '', XmlElement);
      XmlElement.SetAttribute('version', '1.0');

      DemoDataTable.SETCURRENTKEY("Sequence No.");

      WindowOpen;
      IF DemoDataTable.FINDSET THEN
        REPEAT
          WindowUpdate(DemoDataTable."Table ID", DemoDataTable."Table Name");
          DemoDataTable.CALCFIELDS(Fields);
          IF DemoDataTable.Fields THEN
            ExportTable(DemoDataTable."Table ID", DemoDataTable."Table Name", DemoDataTable."Call OnInsert", XmlElement);
        UNTIL DemoDataTable.NEXT = 0;
      WindowClose;

      XmlDoc.Save(ServerFileName);
      FileManagement.DownloadHandler(ServerFileName,DownloadTxt,'','',FileName)
    END;

    LOCAL PROCEDURE ExportTable@1100525001(TableID@1100525000 : Integer;TableName@1100525008 : Text[30];CallOnInsert@1100525004 : Boolean;XmlElement@1100409000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement");
    VAR
      XmlElementTable@1100409001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      RecRef@1100525003 : RecordRef;
    BEGIN
      AppendElement(XmlElement, 'table', '', XmlElementTable);

      XmlElementTable.SetAttribute('id', FORMAT(TableID, 0, 9));
      XmlElementTable.SetAttribute('name', TableName);
      XmlElementTable.SetAttribute('oninsert', 'false'{FORMAT(CallOnInsert, 0, 9)});

      RecRef.OPEN(TableID);

      SetTableFilters(RecRef);

      IF RecRef.FINDSET THEN
        REPEAT
          ExportRecord(RecRef, TableID, XmlElementTable);
        UNTIL RecRef.NEXT = 0;
    END;

    LOCAL PROCEDURE ExportRecord@1100525009(RecRef@1100525000 : RecordRef;TableID@1100525004 : Integer;XmlElementTable@1100409000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement");
    VAR
      XMLMigrationField@1100525003 : Record 11020620;
      XmlElementRecord@1100409001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
    BEGIN
      AppendElement(XmlElementTable, 'record', '', XmlElementRecord);

      XMLMigrationField.SETCURRENTKEY("Table ID", "Sequence No.");
      XMLMigrationField.SETRANGE("Table ID", TableID);

      IF XMLMigrationField.FINDSET THEN
        REPEAT
          ExportField(RecRef, XMLMigrationField."Field No.", XMLMigrationField."Field Name", XMLMigrationField."Call OnValidate", XmlElementRecord);
        UNTIL XMLMigrationField.NEXT = 0;
    END;

    LOCAL PROCEDURE ExportField@1100525015(RecRef@1100525000 : RecordRef;FieldNo@1100525001 : Integer;FieldName@1100525006 : Text[30];CallOnValidate@1100525005 : Boolean;XmlElementRecord@1100409000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement");
    VAR
      XmlElementField@1100409001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      FldRef@1100525004 : FieldRef;
    BEGIN
      FldRef := RecRef.FIELD(FieldNo);
      AppendElement(XmlElementRecord, 'field', FORMAT(FldRef.VALUE, 0, 9), XmlElementField);
      XmlElementField.SetAttribute('no', FORMAT(FieldNo, 0, 9));
      XmlElementField.SetAttribute('name', FieldName);
      XmlElementField.SetAttribute('onvalidate', FORMAT(CallOnValidate, 0, 9));
    END;

    LOCAL PROCEDURE AppendElement@1100525002(XmlNodeParent@1100409001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";Name@1100525001 : Text[80];Text@1100525002 : Text[1024];VAR XmlElement@1100409003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement");
    VAR
      XmlDoc@1100409000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XmlText@1100409002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlText";
      XmlNodeType@1100409004 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeType";
    BEGIN
      XmlNodeType := XmlNodeParent.NodeType;
      IF XmlNodeType.Equals(XmlNodeType.Document) THEN
        XmlDoc := XmlNodeParent
      ELSE
        XmlDoc := XmlNodeParent.OwnerDocument;

      XmlElement := XmlDoc.CreateElement(Name);
      XmlNodeParent.AppendChild(XmlElement);

      IF Text <> '' THEN BEGIN
        XmlText := XmlDoc.CreateTextNode(Text);
        XmlElement.AppendChild(XmlText);
      END;
    END;

    PROCEDURE SetTableFilters@1100525004(VAR RecRef@1100525000 : RecordRef);
    VAR
      XMLMigrationTableFilters@1100525001 : Record 11020621;
      FldRef@1100525002 : FieldRef;
    BEGIN
      XMLMigrationTableFilters.SETRANGE("Table ID",RecRef.NUMBER);
      IF NOT XMLMigrationTableFilters.FINDSET THEN
        EXIT;

      REPEAT
        FldRef := RecRef.FIELD(XMLMigrationTableFilters."Field No.");
        FldRef.SETFILTER(XMLMigrationTableFilters."Filter Expression");
      UNTIL XMLMigrationTableFilters.NEXT = 0;
    END;

    PROCEDURE WindowOpen@1210190000();
    BEGIN
      Window.OPEN(Text000 + Text001);
    END;

    PROCEDURE WindowClose@1210190001();
    BEGIN
      Window.CLOSE;
    END;

    PROCEDURE WindowUpdate@1210190002(TableNo@1210190000 : Integer;TableName@1210190001 : Text[80]);
    BEGIN
      Window.UPDATE(1, TableNo);
      Window.UPDATE(2, TableName);
    END;

    BEGIN
    END.
  }
}

