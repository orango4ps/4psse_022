OBJECT Page 11128087 Project Detail Prognosis Rev.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PSSE;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Prognosis Revenues;
               NOR=Inntektsprognose;
               SVE=Int„ktsprognos];
    SourceTable=Table11012035;
    DelayedInsert=Yes;
    PageType=List;
    OnAfterGetRecord=BEGIN
                       CALCFIELDS("Project Related Name");
                       IF "Project Related Name" <> '' THEN
                         "Cost Object Description" := "Project Related Name";
                       CalcTotals;
                     END;

    OnNewRecord=BEGIN
                  CalcTotals;
                END;

  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 2   ;2   ;Field     ;
                SourceExpr=Element }

    { 4   ;2   ;Field     ;
                SourceExpr="Element Description";
                Visible=FALSE;
                Editable=FALSE }

    { 6   ;2   ;Field     ;
                SourceExpr="Cost Object";
                LookupPageID=Cost Object List;
                OnValidate=BEGIN
                             DimMgt.GetDimValueRec(2,"Cost Object",DimVal,TRUE,'');
                             DimVal.TESTFIELD("Cost Type", DimVal."Cost Type"::Revenue);
                             "Cost Type" := DimVal."Cost Type";
                           END;

                OnLookup=BEGIN
                           DimVal.FILTERGROUP(9);
                           DimVal.SETRANGE("Global Dimension No.", 2);
                           DimVal.SETRANGE("Cost Type", DimVal."Cost Type"::Revenue);
                           DimVal.FILTERGROUP(0);
                           DimVal."Global Dimension No." := 2;
                           DimVal."Cost Type" := DimVal."Cost Type"::Revenue;
                           DimVal.Code := "Cost Object";
                           IF PAGE.RUNMODAL(PAGE::"Cost Object List", DimVal) = ACTION::LookupOK THEN BEGIN
                             DimMgt.GetDimValueRec(2,DimVal.Code,DimVal,TRUE,'');
                             DimVal.TESTFIELD("Cost Type", DimVal."Cost Type"::Revenue);
                             "Cost Object" := DimVal.Code;
                             "Cost Type" := DimVal."Cost Type";
                           END;
                         END;
                          }

    { 8   ;2   ;Field     ;
                SourceExpr="Unit Cost Object";
                Editable=FALSE }

    { 32  ;2   ;Field     ;
                SourceExpr="Amount Revenue";
                OnValidate=BEGIN
                             AmountRevenueOnAfterValidate;
                           END;
                            }

    { 1100525000;2;Field  ;
                SourceExpr=Invoiced;
                Visible=FALSE }

    { 1210190000;2;Field  ;
                SourceExpr=Comment }

    { 1210190001;0;Container;
                ContainerType=FactBoxArea }

    { 1210190002;1;Part   ;
                SubPageLink=Project No.=FIELD(Project No.),
                            Prognosis Date=FIELD(Prognosis Date),
                            Cost Type=FIELD(Cost Type);
                PagePartID=Page11130127;
                PartType=Page }

  }
  CODE
  {
    VAR
      PrognosisRec@1100525000 : Record 11012034;
      DimVal@1100485000 : Record 349;
      DimMgt@1100485001 : Codeunit 408;

    PROCEDURE CalcTotals@1100485000();
    BEGIN
      CALCFIELDS("Prognosis Revenue");
    END;

    PROCEDURE PreviousDate@1100525002() : Date;
    BEGIN
      IF NOT PrognosisRec.GET("Project No.", "Prognosis Date") THEN
        EXIT(0D);
      PrognosisRec.SETRANGE("Project No.", "Project No.");
      PrognosisRec.SETFILTER("Prognosis Date",FORMAT("Previous Date Filter"));
      IF NOT PrognosisRec.FINDLAST THEN
        EXIT(0D);

      EXIT(PrognosisRec."Prognosis Date");
    END;

    PROCEDURE PrognTotRevenue@1100525000() : Decimal;
    BEGIN
      IF NOT PrognosisRec.GET("Project No.", "Prognosis Date") THEN
        EXIT(0);

      PrognosisRec.CALCFIELDS("Prognosis Revenue");
      EXIT(PrognosisRec."Project Invoiced" + PrognosisRec."Prognosis Revenue");
    END;

    PROCEDURE PrevPrognTotRevenue@1100525001() : Decimal;
    BEGIN
      IF PreviousDate = 0D THEN
        EXIT(0);

      PrognosisRec.CALCFIELDS("Prognosis Revenue");
      EXIT(PrognosisRec."Project Invoiced" + PrognosisRec."Prognosis Revenue");
    END;

    PROCEDURE FillPrognRevenues@1100525003();
    VAR
      ProjInstallmRec@1100525000 : Record 11012018;
      PrognLine@1100525001 : Record 11012035;
      PrognLine2@1100525014 : Record 11012035;
      ProjRec@1100525002 : Record 11072003;
      ProjPrincRec@1100525007 : Record 11012005;
      ExtensionRec@1100525004 : Record 11012004;
      UnitPriceProdRec@1100525010 : Record 11020425;
      UnitPriceProdLine@1100525011 : Record 11020426;
      SubProjRec@1100525015 : Record 11072003;
      JobLedgEntry@1100525018 : Record 11072005;
      SalesLine@1100525023 : Record 37;
      ProjCostPlusEntry@1100525022 : Record 11012019;
      PrognMgt@1100525019 : Codeunit 11020217;
      TotInstalmAmount@1100525008 : Decimal;
      RemainingContractAmount@1100525009 : Decimal;
      CostPlusAmountToInvoice@1100525006 : Decimal;
      ProdUnitPriceAmount@1100525012 : Decimal;
      ProdUnitPriceContractAmount@1100525017 : Decimal;
      PrognosisAmount@1100525013 : Decimal;
      InstallmentIsValid@1100525003 : Boolean;
      UnitPriceExists@1100525005 : Boolean;
      HandleCostPlusUnitPriAsContr@1100525016 : Boolean;
      CountUnitPrice@1100525021 : Boolean;
    BEGIN
      ProjRec.GET("Project No.");
      ProjRec.SETRANGE("No.", "Project No.");

      PrognosisRec.GET("Project No.", "Prognosis Date");

      //Reset Amount Revenues
      PrognLine.SETRANGE("Project No.", "Project No.");
      PrognLine.SETRANGE("Prognosis Date", "Prognosis Date");
      PrognLine.SETRANGE("Cost Type", PrognLine."Cost Type"::Revenue);
      PrognLine.MODIFYALL("Amount Revenue",0,TRUE);
      COMMIT; //Necessary cause error report might popup in calccostplus report.

      SubProjRec.SETCURRENTKEY("Main Project");
      SubProjRec.SETRANGE("Main Project", ProjRec."Main Project");
      IF ProjRec."Single/Main/Sub Project" <> ProjRec."Single/Main/Sub Project"::"Main Project" THEN
        SubProjRec.SETRANGE("No.", "Project No.");
      IF SubProjRec.FINDSET THEN
        REPEAT

          //Add Installment Prognosis Lines
          ProjInstallmRec.RESET;
          ProjInstallmRec.SETRANGE("Project No.", SubProjRec."No.");
          ProjInstallmRec.SETFILTER("Cost Object", '<>%1', '');
          IF ProjInstallmRec.FINDSET THEN
            REPEAT
              ProjInstallmRec.CALCFIELDS("Invoiced Price (LCY)");
              InstallmentIsValid := TRUE;
              IF ProjInstallmRec."Extension Contract" <> '' THEN
                InstallmentIsValid :=
                  (ExtensionRec.GET(ProjInstallmRec."Project No.", ProjInstallmRec."Extension Contract")) AND
                  (ExtensionRec.Status <> ExtensionRec.Status::Expired);
              PrognosisAmount := ProjInstallmRec."Installment Amount (LCY)" - ProjInstallmRec."Invoiced Price (LCY)";
              IF InstallmentIsValid AND (PrognosisAmount <> 0) THEN BEGIN
                IF ProjRec."Prognosis per Element" THEN
                  PrognLine.Element := ProjInstallmRec.Element
                ELSE
                  PrognLine.Element := '';

                PrognLine.GET(
                  "Project No.","Prognosis Date", PrognLine."Cost Type"::Revenue, PrognLine.Element, ProjInstallmRec."Cost Object");
                PrognLine."Amount Revenue" := PrognLine."Amount Revenue" + PrognosisAmount;
                PrognLine.MODIFY;
              END;
              TotInstalmAmount := TotInstalmAmount + ProjInstallmRec."Installment Amount (LCY)";
            UNTIL ProjInstallmRec.NEXT = 0;

          //Cost Plus / Production Unit Prices
          UnitPriceExists := FALSE;
          IF UnitPriceProdRec.READPERMISSION THEN BEGIN
            UnitPriceProdRec.RESET;
            UnitPriceProdRec.SETRANGE("Project No.", SubProjRec."No.");
            UnitPriceExists := NOT UnitPriceProdRec.ISEMPTY;
          END;
          HandleCostPlusUnitPriAsContr :=
            UnitPriceExists AND
            (SubProjRec."Settlement Method" = SubProjRec."Settlement Method"::"Fixed Price");

          IF HandleCostPlusUnitPriAsContr THEN BEGIN
            JobLedgEntry.RESET;
            JobLedgEntry.SETCURRENTKEY("Main Project No.","Job No.","Entry Type");
            JobLedgEntry.SETRANGE("Main Project No.", SubProjRec."Main Project");
            JobLedgEntry.SETRANGE("Job No.", SubProjRec."No.");
            JobLedgEntry.SETRANGE("Entry Type", JobLedgEntry."Entry Type"::Sale);
            JobLedgEntry.SETRANGE("Project Invoice", TRUE);
            JobLedgEntry.SETRANGE("Installment Invoice", FALSE);
            JobLedgEntry.SETRANGE("Posting Date", 0D, "Prognosis Date");
            IF JobLedgEntry.FINDSET THEN
              REPEAT
                ProdUnitPriceContractAmount := ProdUnitPriceContractAmount - JobLedgEntry."Total Price (LCY)";
              UNTIL JobLedgEntry.NEXT = 0;
          END ELSE BEGIN
            IF UnitPriceExists THEN BEGIN
              UnitPriceProdRec.RESET;
              UnitPriceProdRec.SETRANGE("Project No.", SubProjRec."No.");
              UnitPriceProdRec.SETRANGE(Status, UnitPriceProdRec.Status::Offered, UnitPriceProdRec.Status::Approved);
              UnitPriceProdRec.SETFILTER("Production Date", '..%1', "Prognosis Date");
              IF UnitPriceProdRec.FINDSET THEN
                REPEAT
                  IF UnitPriceProdRec.Invoiced THEN BEGIN
                    SalesLine.SETCURRENTKEY("Document Type","Job No.");
                    SalesLine.SETRANGE(
                      "Document Type",SalesLine."Document Type"::Invoice,SalesLine."Document Type"::"Credit Memo");
                    SalesLine.SETRANGE("Job No.", SubProjRec."No.");
                    SalesLine.SETRANGE("Production Motivation Date", UnitPriceProdRec."Production Date");
                    SalesLine.SETRANGE("Production Motivation Code", UnitPriceProdRec.Code);
                    CountUnitPrice := NOT SalesLine.ISEMPTY;
                  END ELSE
                    CountUnitPrice := TRUE;
                  IF CountUnitPrice THEN BEGIN
                    UnitPriceProdLine.SETRANGE("Project No.", UnitPriceProdRec."Project No.");
                    UnitPriceProdLine.SETRANGE("Project Principal", UnitPriceProdRec."Project Principal");
                    UnitPriceProdLine.SETRANGE("Production Date", UnitPriceProdRec."Production Date");
                    UnitPriceProdLine.SETRANGE(Code, UnitPriceProdRec.Code);
                    IF UnitPriceProdLine.FINDSET THEN
                      REPEAT
                        ProdUnitPriceAmount := ProdUnitPriceAmount + UnitPriceProdLine."Production Value";
                      UNTIL UnitPriceProdLine.NEXT = 0;
                  END;
                UNTIL UnitPriceProdRec.NEXT = 0;
            END ELSE
              CostPlusAmountToInvoice := CostPlusAmountToInvoice + PrognMgt.CostPlustAmountToInvoice(SubProjRec);

            //Cost Plus Manually added
            ProjCostPlusEntry.SETRANGE("Project No.", "Project No.");
            ProjCostPlusEntry.SETRANGE("Entry No. Project Ledger", 0);
            IF ProjCostPlusEntry.FINDSET THEN
              REPEAT
                IF ProjCostPlusEntry.Invoiced THEN BEGIN
                  ProjCostPlusEntry.CALCFIELDS("Invoice in Process", "Credit Memo in Process");
                  CostPlusAmountToInvoice :=
                    CostPlusAmountToInvoice +
                    ProjCostPlusEntry."Invoice in Process" +
                    ProjCostPlusEntry."Credit Memo in Process";
                END ELSE
                  CostPlusAmountToInvoice :=
                    CostPlusAmountToInvoice + ProjCostPlusEntry."Sales Amount (LCY)";
              UNTIL ProjCostPlusEntry.NEXT = 0;

          END;
        UNTIL SubProjRec.NEXT = 0;

      //Calculate Difference Contract Amount and Project Installments
      RemainingContractAmount :=
        (PrognosisRec."Contract Amount Project" + PrognosisRec."Contract Amount Extensions" + PrognosisRec."Contract Amount Options") -
        TotInstalmAmount - ProdUnitPriceContractAmount;

      //Add Prognosis Line
      PrognosisAmount := CostPlusAmountToInvoice + RemainingContractAmount + ProdUnitPriceAmount;
      IF PrognosisAmount <> 0 THEN BEGIN
        IF ProjRec."Prognosis per Element" THEN
          PrognLine.Element := ProjInstallmRec.Element
        ELSE
          PrognLine.Element := '';
        IF ProjPrincRec.GET("Project No.", ProjRec."Bill-to Customer No.") THEN
          PrognLine."Cost Object" := ProjPrincRec."Cost Object"
        ELSE
          PrognLine."Cost Object" := '';
        IF PrognLine.GET(
          "Project No.","Prognosis Date", PrognLine."Cost Type"::Revenue, PrognLine.Element, PrognLine."Cost Object") THEN
        BEGIN
          PrognLine."Amount Revenue" := PrognLine."Amount Revenue" + PrognosisAmount;
          PrognLine.MODIFY;
        END ELSE BEGIN
          PrognLine2.INIT;
          PrognLine2."Project No." := "Project No.";
          PrognLine2.VALIDATE("Prognosis Date", "Prognosis Date");
          PrognLine2."Cost Type" := PrognLine."Cost Type"::Revenue;
          PrognLine2.Element := PrognLine.Element;
          PrognLine2."Cost Object" := PrognLine."Cost Object";
          PrognLine2."Amount Revenue" := PrognosisAmount;
          PrognLine2.INSERT(TRUE);
        END;
      END;
    END;

    LOCAL PROCEDURE AmountRevenueOnAfterValidate@19006075();
    BEGIN
      CurrPage.UPDATE(TRUE);
    END;

    BEGIN
    {
      4PS - 22-11-07 - Added possbility to insert new Lines

      removed <Cost Object Description>
      Microsoft Dynamics NAV
      ---------------------------

      Invalid column name 'Project Filter'.
      Statement(s) could not be prepared.

      Sidan Visa - Lista ”ver prognosrader m†ste st„ngas.
      ---------------------------
      OK
      ---------------------------
    }
    END.
  }
}

