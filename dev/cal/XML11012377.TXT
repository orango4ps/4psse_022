OBJECT XMLport 11012377 Export Projects Payroll
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Export Projects;
               SVE=Exportera projekt];
    Direction=Export;
    OnInitXMLport=BEGIN
                    HumanResourcesSetup.GET;
                    HumanResourcesSetup.TESTFIELD("Salary Application",HumanResourcesSetup."Salary Application"::Payroll);
                    pathtext := HumanResourcesSetup."Pathname Files to Salary";
                    currXMLport.FILENAME(pathtext + Text002);

                    IF FileMgt.ClientFileExists(currXMLport.FILENAME) THEN
                      IF NOT FileMgt.ExistingFileMustBeReplaced(currXMLport.FILENAME, TRUE) THEN
                        ERROR('');

                    ServerTempFileName := FileMgt.ServerTempFileName('txt');
                  END;

    OnPostXMLport=BEGIN
                    IF InitElem = TRUE THEN BEGIN
                      WriteElement('', Text003);
                      FileMgt.DownloadToFile(
                        ServerTempFileName, pathtext + Text007);
                      ERASE(ServerTempFileName);
                    END;
                  END;

    Format=Fixed Text;
  }
  ELEMENTS
  {
    { [{843511CF-9044-45BF-816B-55E4EFDE52D2}];  ;Root                ;Element ;Text     }

    { [{FE8FC325-A4CF-4AD9-BF59-7F41597D8B1D}];1 ;Job                 ;Element ;Table   ;
                                                  SourceTable=Table11072003;
                                                  Export::OnPreXMLItem=BEGIN
                                                                         InitElem := FALSE;
                                                                       END;

                                                  Export::OnAfterGetRecord=VAR
                                                                             RecRef@1100528400 : RecordRef;
                                                                           BEGIN
                                                                             RecRef.GETTABLE(Job);
                                                                             XMLportStatusDialogMgt.ShowExportStatus(RecRef);

                                                                             NoTxt:=fill(Job."No.", 6, ' ', '<');

                                                                             IF Job."Settlement Method" = Job."Settlement Method"::"Fixed Price" THEN
                                                                               Agreement := '1'
                                                                             ELSE
                                                                               Agreement := '0';

                                                                             IF (Job."Project Status" = Job."Project Status"::Production) OR
                                                                                (Job."Project Status" = Job."Project Status"::"Technical Finished")
                                                                             THEN
                                                                               stadium := '0'
                                                                             ELSE
                                                                               stadium := '1';

                                                                             SelectElement;

                                                                             sep := STRPOS(Job."No.", '-');
                                                                             IF (Job."Single/Main/Sub Project" = Job."Single/Main/Sub Project"::"Sub Project") AND (sep <> 0) THEN
                                                                               currXMLport.SKIP;
                                                                           END;
                                                                            }

    { [{BCAA18DB-EF8C-497E-AA01-B0A0BD96CADD}];2 ;NoTxt               ;Element ;Text    ;
                                                  Width=6 }

    { [{6942619D-10FF-4D2B-86A5-3C6363680E3F}];2 ;Description         ;Element ;Field   ;
                                                  DataType=Text;
                                                  SourceField=Job::Description;
                                                  Width=30 }

    { [{55B06937-AE50-41B1-8ECE-8E5968465E24}];2 ;Agreement           ;Element ;Text    ;
                                                  Width=1 }

    { [{CF3470A2-C0AA-4D99-A443-40A0EF948AEB}];2 ;stadium             ;Element ;Text    ;
                                                  Width=1 }

  }
  EVENTS
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  CODE
  {
    VAR
      HumanResourcesSetup@1100528404 : Record 5218;
      FileMgt@1100528412 : Codeunit 419;
      XMLportStatusDialogMgt@1100528414 : Codeunit 11130006;
      ServerTempFileName@1100528413 : Text[250];
      pathtext@1100528403 : Text[50];
      InitElem@1100528402 : Boolean;
      seqfile@1100528401 : File;
      sep@1100528400 : Integer;
      Text002@1100528410 : TextConst 'ENU=project.txt;SVE=project.txt';
      Text003@1100528409 : TextConst 'ENU=F;SVE=F';
      Text004@1100528408 : TextConst 'ENU=Only < and > are allowed as parameter in function outline;SVE=Endast < och > till†ts som parametrar i funktionsutkastet';
      Text005@1100528407 : TextConst 'ENU=S;SVE=S';
      Text006@1100528406 : TextConst 'ENU=W;SVE=W';
      Text007@1100528405 : TextConst 'ENU=element.txt;SVE=element.txt';

    PROCEDURE fill@4(String@11012001 : Text[80];TotLength@11012002 : Integer;WithCharacter@11012003 : Text[1];TrueBool@11012004 : Char) Text@11012000 : Text[80];
    VAR
      Length@11012005 : Integer;
    BEGIN
      Length:=STRLEN(String);
      IF TotLength>Length THEN BEGIN
        CASE TrueBool OF
          '<': String:=PADSTR('',TotLength-Length,WithCharacter)+String;
          '>': String:=String+PADSTR('',TotLength-Length,WithCharacter);
          ELSE ERROR(Text004);
        END;
      END;

      EXIT(String);
    END;

    PROCEDURE SelectElement@2();
    VAR
      ElemRec@11012000 : Record 11012060;
      ProjElemRec@11012001 : Record 11012010;
      ProjElemRec2@11012002 : Record 11012010;
      lvText@11012003 : Text[250];
      PartElement@11012004 : Code[20];
    BEGIN
      ProjElemRec.SETRANGE("Project No.", Job."No.");
      IF ProjElemRec.FIND('-') THEN BEGIN
        REPEAT
          IF InitElem = FALSE THEN BEGIN
            InitElem := TRUE;
            WriteElement('', Text005);
          END;

          sep := STRPOS(ProjElemRec."Project No.", '-');
          IF (Job."Single/Main/Sub Project" = Job."Single/Main/Sub Project"::"Sub Project") AND (sep <> 0) THEN BEGIN
            PartElement := COPYSTR(ProjElemRec."Project No.", (sep+1), (STRLEN(ProjElemRec."Project No.")-sep)) +
                           COPYSTR(ProjElemRec."Project No.", sep, 1) + ProjElemRec.Element;
            ProjElemRec2.Element      := COPYSTR(PartElement, 1, MAXSTRLEN(ProjElemRec.Element));
            ProjElemRec2."Project No." := COPYSTR(ProjElemRec."Project No.", 1, (sep-1));
            ProjElemRec2.Description :=
                           COPYSTR(Job.Description + ';' + ProjElemRec.Description, 1, MAXSTRLEN(ProjElemRec2.Description));
          END ELSE BEGIN
            ProjElemRec2.COPY(ProjElemRec);
            IF ProjElemRec2.Level = 0 THEN
              ProjElemRec2.Element := HumanResourcesSetup."Structure Part (Payroll)";
          END;

          lvText := fill(COPYSTR(ProjElemRec2."Project No.", 1, 6), 6, ' ', '<');
          lvText := INSSTR(lvText, fill(COPYSTR(ProjElemRec2.Element, 1, 8), 8, ' ', '<'), 7);
          lvText := INSSTR(lvText, fill(COPYSTR(ProjElemRec2.Description, 1, 30), 30, ' ', '>'), 15);
          lvText := INSSTR(lvText,'0', 45);
          WriteElement(lvText, Text006);
        UNTIL ProjElemRec.NEXT = 0;
      END ELSE BEGIN
        IF InitElem = FALSE THEN BEGIN
          InitElem := TRUE;
          WriteElement('', Text005);
        END;

        ElemRec.SETRANGE(Level, 0);
        IF NOT ElemRec.FIND('-') THEN ElemRec.INIT;

        ProjElemRec2.INIT;
        ProjElemRec2."Project No." := Job."No.";
        ProjElemRec2.Element := HumanResourcesSetup."Structure Part (Payroll)";
        ProjElemRec2.Description := ElemRec.Description;

        lvText := fill(COPYSTR(ProjElemRec2."Project No.", 1, 6), 6, ' ', '<');
        lvText := INSSTR(lvText, fill(COPYSTR(ProjElemRec2.Element, 1, 8), 8, ' ', '<'), 7);
        lvText := INSSTR(lvText, fill(COPYSTR(ProjElemRec2.Description, 1, 30), 30, ' ', '>'), 15);
        lvText := INSSTR(lvText,'0', 45);
        WriteElement(lvText, Text006);
      END;
    END;

    PROCEDURE WriteElement@5(lvtext@11012000 : Text[250];lvaction@11012001 : Code[1]);
    BEGIN
      CASE lvaction OF
        Text005:  // open file
          BEGIN
            seqfile.TEXTMODE(TRUE);
            seqfile.WRITEMODE(TRUE);
            seqfile.CREATE(ServerTempFileName);
          END;
        Text006:  // write file
          BEGIN
            seqfile.WRITE(lvtext);
          END;
        Text003:  // close file
          BEGIN
            seqfile.CLOSE;
          END;
      END;
    END;

    BEGIN
    END.
  }
}

