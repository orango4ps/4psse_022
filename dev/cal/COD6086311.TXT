OBJECT Codeunit 6086311 Expense Bank Trans. Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EMW16.00.10.3.00.05;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      EMSetup@1160040002 : Record 6086300;
      HaveGotEMSetup@1160040003 : Boolean;
      Sloppy@1160040001 : Boolean;
      AmountUpdatedOnExpense@1160040000 : TextConst 'DEU=Der Betrag in der Kostenposition wurde um den Betrag der Banktransaktion aktualisiert.;ENU=The amount on the expense have been updated with the amount from the Bank Transaction.;NLD=Het bedrag op de uitgave is bijgewerkt op basis van het bedrag van de banktransactie.';

    PROCEDURE TryMatch@1160040000();
    VAR
      Expense@1160040000 : Record 6086320;
      Transaction@1160040001 : Record 6086330;
    BEGIN
      SetSloppy;
      Expense.SETCURRENTKEY(Posted);
      Expense.SETRANGE(Posted,FALSE);
      Expense.SETRANGE("Matched to Bank Transaction",FALSE);
      Expense.SETRANGE("Cash/Private Card",FALSE);
      Expense.SETFILTER(Status,'<%1',Expense.Status::Released);
      IF Expense.FINDFIRST THEN
        REPEAT
          IF NOT Expense.AllocationExists THEN
            MatchInsertTransaction(Expense,Transaction);
        UNTIL Expense.NEXT = 0;
    END;

    LOCAL PROCEDURE MatchExpense@1160040001(Transaction@1160040000 : Record 6086330;VAR Expense@1160040001 : Record 6086320) : Boolean;
    BEGIN
      SetSloppy;
      IF ExactExpense(Transaction,Expense) THEN
        EXIT(TRUE);
      IF Sloppy THEN
        IF SloppyExpense(Transaction,Expense) THEN
          EXIT(TRUE);
    END;

    PROCEDURE MatchInsertExpense@1160040013(Transaction@1160040000 : Record 6086330;VAR Expense@1160040001 : Record 6086320) : Boolean;
    BEGIN
      IF MatchExpense(Transaction,Expense) THEN BEGIN
        InsertMatch(Transaction,Expense);
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE MatchTransaction@1160040002(Expense@1160040000 : Record 6086320;VAR Transaction@1160040002 : Record 6086330) : Boolean;
    BEGIN
      SetSloppy;
      IF ExactTransaction(Expense,Transaction) THEN
        EXIT(TRUE);
      IF Sloppy THEN
        IF SloppyTransaction(Expense,Transaction) THEN
          EXIT(TRUE);
    END;

    LOCAL PROCEDURE MatchInsertTransaction@1160040010(Expense@1160040001 : Record 6086320;VAR Transaction@1160040000 : Record 6086330) : Boolean;
    BEGIN
      IF MatchTransaction(Expense,Transaction) THEN
        InsertMatchSet(Transaction,Expense);
    END;

    LOCAL PROCEDURE ExactExpense@1160040003(Transaction@1160040001 : Record 6086330;VAR Expense@1160040000 : Record 6086320) : Boolean;
    BEGIN
      Expense.SETRANGE("Continia User ID",Transaction."Continia User ID");
      Expense.SETRANGE(Amount,Transaction.Amount);
      Expense.SETRANGE("Document Date",Transaction."Document Date");
      Expense.SETRANGE("Matched to Bank Transaction",FALSE);
      Expense.SETRANGE("Currency Code",Transaction."Currency Code");
      Expense.SETRANGE(Posted,FALSE);
      Expense.SETRANGE("Cash/Private Card",FALSE);
      Expense.SETFILTER(Status,'<%1',Expense.Status::Released);
      EXIT(Expense.FINDFIRST)
    END;

    LOCAL PROCEDURE ExactTransaction@1160040004(Expense@1160040001 : Record 6086320;VAR Transaction@1160040000 : Record 6086330) : Boolean;
    BEGIN
      Transaction.SETCURRENTKEY("Continia User ID","Matched to Expense","Currency Code","Exclude Entry");
      Transaction.SETRANGE("Continia User ID",Expense."Continia User ID");
      Transaction.SETRANGE("Matched to Expense",FALSE);
      Transaction.SETRANGE("Currency Code",Expense."Currency Code");
      Transaction.SETRANGE(Amount,Expense.Amount);
      Transaction.SETRANGE("Document Date",Expense."Document Date");
      Transaction.SETRANGE("Exclude Entry",FALSE);
      Transaction.SETRANGE("Bank Statement Transaction",FALSE);
      EXIT(Transaction.FINDFIRST);
    END;

    LOCAL PROCEDURE SloppyExpense@1160040005(Transaction@1160040001 : Record 6086330;VAR Expense@1160040000 : Record 6086320) : Boolean;
    BEGIN
      IF Transaction."Document Date" = 0D THEN
        Transaction."Document Date" := TODAY;
      IF DATE2DMY(Transaction."Document Date",3) = 9999 THEN
        EXIT;

      Expense.SETRANGE(Amount,Transaction.Amount);
      Expense.SETFILTER("Document Date",'>=%1&<=%2',
        Transaction."Document Date" - EMSetup."Matching - date var. allowed",
        Transaction."Document Date" + EMSetup."Matching - date var. allowed");
      Expense.SETRANGE("Matched to Bank Transaction",FALSE);
      Expense.SETRANGE("Currency Code",Transaction."Currency Code");
      Expense.SETRANGE(Posted,FALSE);
      Expense.SETRANGE("Cash/Private Card",FALSE);
      Expense.SETFILTER(Status,'<%1',Expense.Status::Released);
      IF Expense.FINDFIRST THEN
        EXIT(TRUE);

      IF Transaction.Amount > 0 THEN
        Expense.SETFILTER(Amount,'>=%1&<=%2',Transaction.Amount * Low,Transaction.Amount * High)
      ELSE
        Expense.SETFILTER(Amount,'<=%1&>=%2',Transaction.Amount * Low,Transaction.Amount * High);
      Expense.SETFILTER("Document Date",'=%1',Transaction."Document Date");
      IF Expense.FINDFIRST THEN
        EXIT(TRUE);

      Expense.SETFILTER("Document Date",'>=%1&<=%2',
        Transaction."Document Date" - EMSetup."Matching - date var. allowed",
        Transaction."Document Date" + EMSetup."Matching - date var. allowed");
      IF Expense.FINDFIRST THEN
        EXIT(TRUE);
    END;

    LOCAL PROCEDURE SloppyTransaction@1160040006(Expense@1160040001 : Record 6086320;VAR Transaction@1160040000 : Record 6086330) : Boolean;
    BEGIN
      IF DATE2DMY(Expense."Document Date",3) = 9999 THEN
        EXIT;

      Transaction.SETRANGE(Amount,Expense.Amount);
      IF Expense."Document Date" = 0D THEN
        Expense."Document Date" := TODAY;
      Transaction.SETFILTER("Document Date",'>=%1&<=%2',
        Expense."Document Date" - EMSetup."Matching - date var. allowed",
        Expense."Document Date" + EMSetup."Matching - date var. allowed");
      Transaction.SETRANGE("Matched to Expense",FALSE);
      Transaction.SETRANGE("Currency Code",Expense."Currency Code");
      Transaction.SETRANGE("Bank Statement Transaction",FALSE);
      IF Transaction.FINDFIRST THEN
        EXIT(TRUE);

      IF Expense.Amount > 0 THEN
        Transaction.SETFILTER(Amount,'>=%1&<=%2',Expense.Amount * Low,Expense.Amount * High)
      ELSE
        Transaction.SETFILTER(Amount,'<=%1&>=%2',Expense.Amount * Low,Expense.Amount * High);
      Transaction.SETFILTER("Document Date",'=%1',Expense."Document Date");
      IF Transaction.FINDFIRST THEN
        EXIT(TRUE);

      Transaction.SETFILTER("Document Date",'>=%1&<=%2',
        Expense."Document Date" - EMSetup."Matching - date var. allowed",
        Expense."Document Date" + EMSetup."Matching - date var. allowed");
      EXIT(Transaction.FINDFIRST);
    END;

    LOCAL PROCEDURE SetSloppy@1160040016();
    BEGIN
      GetEMSetup;
      Sloppy := (EMSetup."Maximum Matching Diff. Pct." <> 0) OR (EMSetup."Matching - date var. allowed" <> 0);
    END;

    PROCEDURE InsertMatch@1160040009(Transaction@1160040001 : Record 6086330;Expense@1160040000 : Record 6086320);
    VAR
      GLSetup@1160040008 : Record 98;
      ContiniaUserCard@1160040007 : Record 6086311;
      Match@1160040002 : Record 6086349;
      EMComment@1160040004 : Record 6086361;
      ExpAllocation@1160040005 : Record 6086321;
      ExpValidate@1160040006 : Codeunit 6086321;
      ExpCmtMgt@1160040003 : Codeunit 6086323;
      EMApprovalsBridge@1160040010 : Codeunit 6086369;
      BankAccCurrCode@1160040009 : Code[10];
    BEGIN
      GLSetup.GET;
      Transaction.TESTFIELD("Matched to Expense",FALSE);
      Expense.TESTFIELD("Matched to Bank Transaction",FALSE);
      Expense.TESTFIELD("Currency Code",Transaction."Currency Code");

      Expense."Cash/Private Card" := FALSE;

      ContiniaUserCard.GET(Transaction."Continia User ID",Transaction."Card No.");
      BankAccCurrCode := ContiniaUserCard.GetAccountCurrencyCode(ContiniaUserCard."Account Type",ContiniaUserCard."Account No.");

      Expense.VALIDATE("Bank Currency Code",BankAccCurrCode);
      Expense."Document Time" := Transaction."Document Time";
      Expense."Business Description" := Transaction."Business Name";
      IF (BankAccCurrCode = '') OR
         ((BankAccCurrCode <> '') AND (BankAccCurrCode = GLSetup."LCY Code"))
      THEN BEGIN
        Expense."Amount (LCY)" := Transaction."Bank-Currency Amount";
        Expense."Bank-Currency Amount" := Transaction."Bank-Currency Amount";
      END;

      IF (Expense.Amount <> Transaction.Amount) OR (Expense."Amount (LCY)" <> Transaction."Bank-Currency Amount") THEN BEGIN
        Expense.Amount := Transaction.Amount;
        Expense."Bank-Currency Amount" := Transaction."Bank-Currency Amount";
        ExpCmtMgt.AddComment(DATABASE::Expense,0,'',
          Expense."Entry No.",EMComment.Importance::Information,'MATCH',AmountUpdatedOnExpense,TRUE);
      END;
      Expense.TESTFIELD(Amount,Transaction.Amount); //THE AMOUNT SHOULD HAVE BEEN CORRECTED SO FAR
      Expense.MODIFY(TRUE);

      ExpAllocation.SETRANGE("Expense Entry No.",Expense."Entry No.");
      IF ExpAllocation.FINDSET THEN
        REPEAT
          ExpAllocation."Bank Currency Code" := BankAccCurrCode;
          ExpAllocation.VALIDATE("Amount %",ExpAllocation."Amount %");
          ExpAllocation.MODIFY;
        UNTIL ExpAllocation.NEXT = 0;

      Match."Expense Entry No." := Expense."Entry No.";
      Match."Transaction Entry No." := Transaction."Entry No.";
      Match.INSERT(TRUE);

      Expense.GET(Expense."Entry No.");
      ExpValidate.RUN(Expense);

      EMSetup.GET;
      IF EMSetup."Auto Submit Exp. for Approval" THEN
        IF Expense."Settlement No." = '' THEN
          IF EMApprovalsBridge.IsApprovalsWorkflowEnabled(DATABASE::Expense,FORMAT(Expense."Entry No.")) THEN
            EMApprovalsBridge.SendNonGUIExpApprovalRequest(Expense,FALSE);
    END;

    LOCAL PROCEDURE InsertMatchSet@1160040011(VAR TransactionsRec@1160040000 : Record 6086330;Expense@1160040001 : Record 6086320);
    BEGIN
      IF TransactionsRec.MARK THEN BEGIN
        TransactionsRec.MARKEDONLY(TRUE);
        IF TransactionsRec.FINDFIRST THEN
          REPEAT
            InsertMatch(TransactionsRec,Expense);
          UNTIL TransactionsRec.NEXT = 0;
      END ELSE
        InsertMatch(TransactionsRec,Expense);
    END;

    LOCAL PROCEDURE High@1160040014() : Decimal;
    BEGIN
      GetEMSetup;
      EXIT((100 + EMSetup."Maximum Matching Diff. Pct.") / 100);
    END;

    LOCAL PROCEDURE Low@1160040015() : Decimal;
    BEGIN
      GetEMSetup;
      EXIT((100 - EMSetup."Maximum Matching Diff. Pct.") / 100);
    END;

    LOCAL PROCEDURE GetEMSetup@1160040019();
    BEGIN
      IF HaveGotEMSetup THEN
        EXIT;
      EMSetup.GET;
      HaveGotEMSetup := TRUE;
    END;

    PROCEDURE MarkMatchedExpense@1160040021(EntryNo@1160040000 : Integer;Matched@1160040002 : Boolean);
    VAR
      Expense@1160040001 : Record 6086320;
    BEGIN
      Expense.GET(EntryNo);
      Expense."Matched to Bank Transaction" := Matched;
      Expense.SetSkipSendToExpUser(TRUE);
      Expense.MODIFY(TRUE);
    END;

    PROCEDURE MarkMatchedBankTransaction@1160040020(EntryNo@1160040000 : Integer;Matched@1160040002 : Boolean);
    VAR
      BankTransaction@1160040001 : Record 6086330;
    BEGIN
      BankTransaction.GET(EntryNo);
      BankTransaction."Matched to Expense" := Matched;
      BankTransaction.MODIFY(TRUE);
    END;

    PROCEDURE DeleteExpenseMatch@1160040022(VAR Expense@1160040000 : Record 6086320);
    VAR
      BankTrans@1160040002 : Record 6086330;
      ExpenseMatch@1160040001 : Record 6086349;
    BEGIN
      ExpenseMatch.LOCKTABLE;
      ExpenseMatch.SETRANGE("Expense Entry No.",Expense."Entry No.");
      IF ExpenseMatch.FINDFIRST THEN
        REPEAT
          BankTrans.GET(ExpenseMatch."Transaction Entry No.");
          BankTrans."Matched to Expense" := FALSE;
          BankTrans."Exclude Entry" := TRUE;
          BankTrans.MODIFY;

          ExpenseMatch.DELETE;
        UNTIL ExpenseMatch.NEXT = 0;

      Expense."Bank Currency Code" := '';
      Expense."Bank-Currency Amount" := 0;
      Expense."Matched to Bank Transaction" := FALSE;
      CLEAR(Expense."Document Time");
      CLEAR(Expense."Business Description");
    END;

    PROCEDURE DeleteBankTransMatch@1160040023(VAR BankTrans@1160040000 : Record 6086330);
    VAR
      Expense@1160040001 : Record 6086320;
      ExpenseMatch@1160040002 : Record 6086349;
    BEGIN
      ExpenseMatch.LOCKTABLE;
      ExpenseMatch.SETCURRENTKEY("Transaction Entry No.");
      ExpenseMatch.SETRANGE("Transaction Entry No.",BankTrans."Entry No.");
      IF ExpenseMatch.FINDFIRST THEN
        REPEAT
          Expense.GET(ExpenseMatch."Expense Entry No.");
          Expense."Matched to Bank Transaction" := FALSE;
          Expense.VALIDATE("Bank Currency Code",'');
          Expense."Bank-Currency Amount" := 0;
          CLEAR(Expense."Document Time");
          CLEAR(Expense."Business Description");
          Expense.MODIFY;

          ExpenseMatch.DELETE;
        UNTIL ExpenseMatch.NEXT = 0;

      BankTrans."Matched to Expense" := FALSE;
    END;

    BEGIN
    END.
  }
}

