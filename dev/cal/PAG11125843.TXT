OBJECT Page 11125843 External Document Registration
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00,4PSSE;
  }
  PROPERTIES
  {
    CaptionML=[ENU=External Document Registration;
               NOR=Ekstern dokumentregistrering;
               SVE=Extern dokumentregistrering];
    PageType=NavigatePage;
    OnInit=BEGIN
             RelateToCodeEnable := TRUE;
             RelateToTypeEnable := TRUE;
             NextEnable := TRUE;
             DocumentLinksEnable := TRUE;
             FilesEnable := TRUE;
             DocumentLinksVisible := TRUE;
             FilesVisible := TRUE;
             PPTVisible := FALSE;
             DPTVisible:= FALSE;
           END;

    OnOpenPage=VAR
                 DocRegistrationInterface@1100525000 : Codeunit 11012431;
                 ConvertImage@1100525001 : Codeunit 11012430;
               BEGIN
                 ConvertImage.RUN(); //check license permission

                 InitTables;

                 //read docs.xml and insert content in Queued External Documents
                 DocRegistrationInterface.ReadDocsXml();

                 WizardStep := 1;

                 WITH DocumentProperties DO BEGIN
                   "External Document" := TRUE;
                   "Creation Date" := TODAY;
                   "Creation Time" := TIME;
                   "User ID" := USERID;
                   VALIDATE("Internal Company",COMPANYNAME);
                   VALIDATE(Status,Status::Concept);
                   "SharePoint Status" := "SharePoint Status"::New;
                   FillModificationData;

                 END;

                 SetFieldsVisible;
                 EnableDisableFields();
                 ShowStep(TRUE);
               END;

    OnClosePage=VAR
                  QueuedDocumentLink@1199197400 : Record 11125736;
                BEGIN
                  QueuedDocumentLink.SETRANGE(User, USERID);
                  QueuedDocumentLink.DELETEALL();
                END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1199197483;1 ;Action    ;
                      Name=Back;
                      CaptionML=[ENU=< &Back;
                                 NOR=< &Tilbake;
                                 SVE=< &Tillbaka];
                      Enabled=BackEnable;
                      InFooterBar=Yes;
                      Image=PreviousRecord;
                      OnAction=BEGIN
                                 ShowStep(FALSE);
                                 WizardStep -= 1;
                                 ShowStep(TRUE);
                                 CurrPage.UPDATE(TRUE);
                                 // UpdateCntrls;
                               END;
                                }
      { 1199197484;1 ;Action    ;
                      Name=Next;
                      CaptionML=[ENU=&Next >;
                                 NOR=&Neste >;
                                 SVE=&N„sta >];
                      Enabled=NextEnable;
                      InFooterBar=Yes;
                      Image=NextRecord;
                      OnAction=BEGIN
                                 CASE WizardStep OF
                                   2: ValidateStep2();
                                 END;

                                 ShowStep(FALSE);
                                 WizardStep += 1;
                                 ShowStep(TRUE);
                                 CurrPage.UPDATE(TRUE);
                               END;
                                }
      { 1199197485;1 ;Action    ;
                      Name=ProcessReturn;
                      CaptionML=[ENU=&Process and Return;
                                 NOR=&Behandle og returner;
                                 SVE=&Behandla och returnera];
                      ToolTipML=[ENU=Process selected document(s) and start again with others.;
                                 NOR=Behandle valgte dokument og start igjen med andre.;
                                 SVE=Behandla valda dokument och b”rja igen med andra.];
                      Enabled=ProcessReturnEnable;
                      Image=ApplyTemplate;
                      OnAction=BEGIN
                                 IF ProcessSelectedDocuments() THEN BEGIN
                                   ShowStep(FALSE);
                                   WizardStep := 1;
                                   ShowStep(TRUE);
                                   CurrPage.UPDATE(TRUE);
                                 END;
                               END;
                                }
      { 1100525001;1 ;Action    ;
                      Name=Finish;
                      CaptionML=[ENU=&Finish;
                                 NOR=&Avslutt;
                                 SVE=&Slutf”r];
                      Enabled=FinishEnable;
                      InFooterBar=Yes;
                      Image=Completed;
                      OnAction=BEGIN

                                 //CheckStatus;
                                 IF FinishWizard() THEN
                                   CurrPage.CLOSE;
                               END;
                                }
      { 1100525011;1 ;Action    ;
                      Name=Add;
                      Ellipsis=Yes;
                      CaptionML=[ENU=&Add;
                                 NOR=&Legg til;
                                 SVE=&L„gg till];
                      Promoted=Yes;
                      Enabled=AddEnable;
                      Image=AddAction;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 FileManagement@1100525000 : Codeunit 419;
                                 QueuedExternalDocument@1100525004 : Record 11012148;
                                 FileNames@1100525002 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
                                 I@1100525001 : Integer;
                                 FilterString@1100525005 : Text;
                               BEGIN
                                 FilterString := FileManagement.GetToFilterText('', '');
                                 IF FileManagement.OpenMultiselectFileDialog('', '', FilterString, FileNames) THEN BEGIN
                                   FOR I := 0 TO FileNames.Length - 1 DO BEGIN
                                     //>> ITERO.LP 4PSSE: RFC-067-2
                                     QueuedExternalDocument.ErrorifDocLinkNotOK(FileNames.GetValue(I), RecID.TABLENO);
                                     //<< ITERO.LP
                                     QueuedExternalDocument."Line No." := 0;
                                     QueuedExternalDocument.User := USERID;
                                     QueuedExternalDocument.Folder := FileManagement.GetDirectoryNameWithBackSlash(FileNames.GetValue(I));
                                     QueuedExternalDocument."File Name" := FileManagement.GetFileName(FileNames.GetValue(I));
                                     QueuedExternalDocument.Source := QueuedExternalDocument.Source::User;
                                     IF NOT QueuedExtDocumentExists(QueuedExternalDocument) THEN
                                       QueuedExternalDocument.INSERT(TRUE);
                                   END;
                                 END;

                                 CurrPage.Files.PAGE.UpdatePage;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;;Container;
                ContainerType=ContentArea }

    { 1199197488;1;Group  ;
                Name=Step1;
                Visible=Step1Visible }

    { 1199197489;2;Field  ;
                CaptionClass=Text19017975;
                MultiLine=Yes;
                Style=Strong;
                StyleExpr=TRUE }

    { 1100525000;2;Part   ;
                Name=Files;
                PagePartID=Page11072483;
                Visible=FilesVisible;
                Enabled=FilesEnable }

    { 1199197406;1;Group  ;
                Name=Step2;
                Visible=Step2Visible }

    { 1199197411;2;Field  ;
                CaptionClass=Text19023891;
                MultiLine=Yes;
                Style=Strong;
                StyleExpr=TRUE }

    { 1199197400;2;Field  ;
                Name=TxtDescription;
                CaptionML=[ENU=Description;
                           NOR=Beskrivelse;
                           SVE=Beskrivning];
                SourceExpr=DocumentProperties.Description }

    { 1199197401;2;Field  ;
                CaptionML=[ENU=Reference;
                           NOR=Referanse;
                           SVE=Referens];
                SourceExpr=DocumentProperties.Reference }

    { 1199197402;2;Field  ;
                CaptionML=[ENU=Subject;
                           NOR=Emne;
                           SVE=Ang†ende];
                SourceExpr=DocumentProperties.Subject }

    { 1199197420;2;Field  ;
                CaptionML=[ENU=Contact No.;
                           NOR=Kontaktnr;
                           SVE=Kontaktnr];
                SourceExpr=DocumentProperties."Contact No.";
                OnValidate=BEGIN
                             ValidateContactNo();
                           END;

                OnLookup=VAR
                           Contact@1199197400 : Record 5050;
                         BEGIN
                           IF Contact.GET(DocumentProperties."Contact No.") THEN;
                           IF PAGE.RUNMODAL(0, Contact) = ACTION::LookupOK THEN BEGIN
                             DocumentProperties."Contact No." := Contact."No.";
                             ValidateContactNo();
                           END;
                         END;
                          }

    { 1199197403;2;Field  ;
                CaptionML=[ENU=Contact Name;
                           NOR=Kontaktnavn;
                           SVE=Kontaktnamn];
                SourceExpr=DocumentProperties."Contact Name";
                Importance=Additional;
                Editable=FALSE }

    { 1199197421;2;Field  ;
                CaptionML=[ENU=Contact Person No.;
                           NOR=Kontaktperson;
                           SVE=Kontaktperson];
                SourceExpr=DocumentProperties."Contact Person No.";
                OnValidate=BEGIN
                             ValidatePerson();
                           END;

                OnLookup=VAR
                           Contact@1199197400 : Record 5050;
                         BEGIN
                           Contact.SETRANGE(Type, Contact.Type::Person);
                           Contact.SETRANGE("Company No.", DocumentProperties."Contact No.");
                           IF Contact.GET(DocumentProperties."Contact Person No.") THEN;
                           IF PAGE.RUNMODAL(0, Contact) = ACTION::LookupOK THEN BEGIN
                             DocumentProperties."Contact Person No." := Contact."No.";
                             ValidatePerson();
                           END;
                         END;
                          }

    { 1199197404;2;Field  ;
                CaptionML=[ENU=Contact Person Name;
                           NOR=Kontaktpersonens navn;
                           SVE=Kontaktpersonens namn];
                SourceExpr=DocumentProperties."Contact Person Name";
                Importance=Additional;
                Editable=FALSE }

    { 1199197405;2;Field  ;
                CaptionML=[ENU=Addressed to Company;
                           NOR=Adressert til selskap;
                           SVE=Adresserat till f”retag];
                SourceExpr=DocumentProperties."Internal Company";
                Enabled=FALSE;
                Editable=FALSE;
                OnValidate=VAR
                             Company@1199197400 : Record 2000000006;
                           BEGIN
                             IF DocumentProperties."Internal Company" <> '' THEN
                               Company.GET(DocumentProperties."Internal Company");
                           END;

                OnLookup=VAR
                           Company@1199197400 : Record 2000000006;
                         BEGIN
                           IF Company.GET(DocumentProperties."Internal Company") THEN;
                           IF PAGE.RUNMODAL(PAGE::Companies, Company) = ACTION::LookupOK THEN BEGIN
                             DocumentProperties."Internal Company" := Company.Name;
                           END;
                         END;
                          }

    { 1199197422;2;Field  ;
                CaptionML=[ENU=Addressed to;
                           NOR=Adressert til;
                           SVE=Adresserat till];
                SourceExpr=DocumentProperties."Addressed To";
                OnValidate=VAR
                             Employee@1199197400 : Record 5200;
                           BEGIN
                             IF DocumentProperties."Addressed To" <> '' THEN
                               Employee.GET(DocumentProperties."Addressed To");
                               DocumentPropertiesAddressedToO;
                           END;

                OnLookup=VAR
                           Employee@1199197400 : Record 5200;
                         BEGIN
                           IF Employee.GET(DocumentProperties."Addressed To") THEN;
                           IF PAGE.RUNMODAL(0, Employee) = ACTION::LookupOK THEN BEGIN
                             DocumentProperties."Addressed To" := Employee."No.";
                           END;
                         END;
                          }

    { 1199197423;2;Field  ;
                CaptionML=[ENU=Original to;
                           NOR=Opprinnelig til;
                           SVE=Ursprungligen till];
                SourceExpr=DocumentProperties."Original To";
                OnValidate=VAR
                             Employee@1199197400 : Record 5200;
                           BEGIN
                             OrigToNameTxt := '';
                             IF DocumentProperties."Original To" <> '' THEN
                               IF Employee.GET(DocumentProperties."Original To") THEN
                                 OrigToNameTxt := Employee."Full Name";
                           END;

                OnLookup=VAR
                           Employee@1199197400 : Record 5200;
                         BEGIN
                           IF Employee.GET(DocumentProperties."Original To") THEN;
                           IF PAGE.RUNMODAL(0, Employee) = ACTION::LookupOK THEN BEGIN
                             DocumentProperties."Original To" := Employee."No.";
                             OrigToNameTxt := Employee."Full Name";
                           END;
                         END;
                          }

    { 1199197407;2;Field  ;
                CaptionML=[ENU=Original To Name;
                           NOR=Original til navn;
                           SVE=Original till namn];
                SourceExpr=OrigToNameTxt;
                Importance=Additional;
                Editable=FALSE }

    { 1100528305;2;Group  ;
                Visible=PPTVisible;
                GroupType=Group }

    { 1100525003;3;Field  ;
                CaptionML=ENU=Document Portal Site;
                SourceExpr=DocumentProperties."Project Portal Subsite";
                OnValidate=VAR
                             ProjectPortalSite@1100525000 : Record 11229810;
                           BEGIN
                             CASE RecID.TABLENO OF
                               DATABASE::Job:
                                 IF DocumentProperties."Project Portal Subsite" <> '' THEN
                                   ProjectPortalSite.GET(ProjectPortalSite.Type::Project, DocumentProperties."Project Portal Subsite");
                               ELSE
                                 DocumentProperties."Project Portal Subsite" := '';
                             END;
                           END;

                OnLookup=VAR
                           ProjectPortalSite@1100525000 : Record 11229810;
                           SubsiteType@1100528301 : Option;
                         BEGIN
                           CASE RecID.TABLENO OF
                             DATABASE::Job:
                               SubsiteType := 0;
                             ELSE
                               ERROR(Text19044368, ProjectPortalSite.FIELDCAPTION(Type), FORMAT(ProjectPortalSite.Type));
                           END;

                           IF ProjectPortalSite.GET(SubsiteType, DocumentProperties."Project Portal Subsite") THEN;
                           ProjectPortalSite.SETRANGE(Type, SubsiteType);
                           ProjectPortalSite.SETRANGE("Quote Request Subsite", FALSE);
                           IF PAGE.RUNMODAL(0, ProjectPortalSite) = ACTION::LookupOK THEN BEGIN
                             DocumentProperties."Project Portal Subsite" := ProjectPortalSite.Code;
                           END;
                         END;
                          }

    { 1100528306;2;Group  ;
                Visible=DPTVisible;
                GroupType=Group }

    { 1100528302;3;Field  ;
                CaptionML=ENU=Document Portal Subsite;
                SourceExpr=DocumentProperties."Document Portal Subsite";
                OnValidate=VAR
                             DPTSubsiteProject@1100528300 : Record 11072330;
                           BEGIN
                             CASE RecID.TABLENO OF
                               DATABASE::Job,
                               DATABASE::"Service Location":
                                 IF DocumentProperties."Project Portal Subsite" <> '' THEN
                                   DPTSubsiteProject.GET(DocumentProperties."Document Portal Subsite");
                               ELSE
                                 DocumentProperties."Document Portal Subsite" := '';
                             END;
                           END;

                OnLookup=VAR
                           Job@1100528302 : Record 11072003;
                           ServiceLocation@1100525001 : Record 11012801;
                           DPTSubsiteProject@1100528300 : Record 11072330;
                           DPTSubsiteServLoc@1100525002 : Record 11072344;
                         BEGIN
                           CASE RecID.TABLENO OF
                             DATABASE::Job: BEGIN
                               Job.GET(GetSourceCodeFromRecId(RecID ));
                               IF (DPTSubsiteProject.GET(Job."No.", DocumentProperties."Document Portal Subsite")) THEN;
                               DPTSubsiteProject.SETRANGE("Project No.", Job."No.");
                               DPTSubsiteProject.SETRANGE("Quote Request Subsite", FALSE);
                               IF (PAGE.RUNMODAL(0, DPTSubsiteProject) = ACTION::LookupOK) THEN BEGIN
                                 DocumentProperties."Document Portal Subsite" := DPTSubsiteProject.Code;
                               END;
                             END;
                             DATABASE::"Service Location": BEGIN
                               ServiceLocation.GET(GetSourceCodeFromRecId(RecID ));
                               IF (DPTSubsiteServLoc.GET(ServiceLocation."No.", DocumentProperties."Document Portal Subsite")) THEN;
                               DPTSubsiteServLoc.SETRANGE("Service Location No.", ServiceLocation."No.");
                               IF (PAGE.RUNMODAL(0, DPTSubsiteServLoc) = ACTION::LookupOK) THEN BEGIN
                                 DocumentProperties."Document Portal Subsite" := DPTSubsiteServLoc.Code;
                               END;
                             END;
                             ELSE
                               DocumentProperties."Document Portal Subsite" := '';
                           END;
                         END;
                          }

    { 1199197424;2;Field  ;
                CaptionML=[ENU=Document Type;
                           NOR=Dokumenttype;
                           SVE=Dokumenttyp];
                SourceExpr=DocumentProperties."Document Type";
                OnValidate=VAR
                             DocumentType@1199197400 : Record 11012405;
                           BEGIN
                             IF DocumentProperties."Document Type" <> '' THEN
                               DocumentType.GET(DocumentProperties."Document Type");
                               DocumentPropertiesDocumentType;
                           END;

                OnLookup=VAR
                           Job@1100528303 : Record 11072003;
                           ServiceLocation@1100525002 : Record 11012801;
                           DocumentType@1199197400 : Record 11012405;
                           SiteDocTypePPT@1100525001 : Record 11229811;
                           DPTSubsiteDocTypeProject@1100528302 : Record 11072331;
                           DPTSubsiteDocTypeServLoc@1100525003 : Record 11072345;
                           SubsiteType@1100528301 : Option;
                         BEGIN
                           CASE RecID.TABLENO OF
                             DATABASE::Job: BEGIN
                               Job.GET(GetSourceCodeFromRecId(RecID ));
                               IF (DocumentProperties."Project Portal Subsite" <> '') THEN BEGIN
                                 SubsiteType := 0;
                                 IF SiteDocTypePPT.GET(SubsiteType, DocumentProperties."Project Portal Subsite", DocumentProperties."Document Type") THEN;
                                 SiteDocTypePPT.SETRANGE("Subsite Type", SubsiteType);
                                 SiteDocTypePPT.SETRANGE("Project Portal Subsite", DocumentProperties."Project Portal Subsite");
                                 IF PAGE.RUNMODAL(0, SiteDocTypePPT) = ACTION::LookupOK THEN BEGIN
                                   DocumentProperties."Document Type" := SiteDocTypePPT."Document Type";
                                 END;
                                 EXIT;
                               END;
                               IF (DocumentProperties."Document Portal Subsite" <> '') THEN BEGIN
                                 IF DPTSubsiteDocTypeProject.GET(DocumentProperties."Document Portal Subsite", DocumentProperties."Document Type") THEN;
                                 DPTSubsiteDocTypeProject.SETRANGE("Project No.", Job."No.");
                                 DPTSubsiteDocTypeProject.SETRANGE("Subsite Code", DocumentProperties."Document Portal Subsite");
                                 IF (PAGE.RUNMODAL(0, DPTSubsiteDocTypeProject) = ACTION::LookupOK) THEN BEGIN
                                   DocumentProperties."Document Type" := DPTSubsiteDocTypeProject."Document Type";
                                 END;
                                 EXIT;
                               END;
                             END;
                             DATABASE::"Service Location": BEGIN
                               ServiceLocation.GET(GetSourceCodeFromRecId(RecID ));
                               IF (DocumentProperties."Document Portal Subsite" <> '') THEN BEGIN
                                 IF DPTSubsiteDocTypeServLoc.GET(DocumentProperties."Document Portal Subsite", DocumentProperties."Document Type") THEN;
                                 DPTSubsiteDocTypeServLoc.SETRANGE("Service Location No.", ServiceLocation."No.");
                                 DPTSubsiteDocTypeServLoc.SETRANGE("Subsite Code", DocumentProperties."Document Portal Subsite");
                                 IF (PAGE.RUNMODAL(0, DPTSubsiteDocTypeServLoc) = ACTION::LookupOK) THEN BEGIN
                                   DocumentProperties."Document Type" := DPTSubsiteDocTypeServLoc."Document Type";
                                 END;
                                 EXIT;
                               END;
                             END;
                           END;
                           IF DocumentType.GET(DocumentProperties."Document Type") THEN;
                           IF PAGE.RUNMODAL(0, DocumentType) = ACTION::LookupOK THEN BEGIN
                             DocumentProperties."Document Type" := DocumentType.Type;
                           END;
                         END;
                          }

    { 1100528307;2;Group  ;
                Visible=PPTVisible;
                GroupType=Group }

    { 1100528300;3;Field  ;
                CaptionML=ENU=Private Company Document;
                SourceExpr=DocumentProperties."Private Company Document" }

    { 1100528308;2;Group  ;
                Visible=DPTVisible;
                GroupType=Group }

    { 1100528304;3;Field  ;
                CaptionML=ENU=Document Portal Private Document;
                SourceExpr=DocumentProperties."Document Portal Private Doc" }

    { 1199197426;2;Field  ;
                CaptionML=[ENU=Document Category;
                           NOR=Dokumentkategori;
                           SVE=Dokumentkategori];
                SourceExpr=DocumentProperties."Document Category";
                OnValidate=VAR
                             DocumentCategory@1199197400 : Record 11012147;
                           BEGIN
                             IF DocumentProperties."Document Category" <> '' THEN
                               DocumentCategory.GET(DocumentProperties."Document Category");
                               DocumentPropertiesDocumentCate;
                           END;

                OnLookup=VAR
                           DocumentCategory@1199197400 : Record 11012147;
                         BEGIN
                           IF DocumentCategory.GET(DocumentProperties."Document Category") THEN;
                           IF PAGE.RUNMODAL(0, DocumentCategory) = ACTION::LookupOK THEN BEGIN
                             DocumentProperties."Document Category" := DocumentCategory.Code;
                           END;
                         END;
                          }

    { 1100525007;2;Field  ;
                CaptionML=[ENU=Project Element;
                           NOR=Prosjektelement;
                           SVE=Projektelement];
                SourceExpr=DocumentProperties."Project Element";
                OnValidate=VAR
                             BaseElement@1100525000 : Record 11012060;
                             ProjectElement@1100409000 : Record 11012010;
                             ProjectNo@1100409003 : Code[20];
                           BEGIN
                             //kzwerver.c #C016690
                             IF DocumentProperties."Project Element" <> '' THEN BEGIN
                               ProjectNo := GetProjectNo;
                               IF (ProjectNo <> '') THEN
                                 ProjectElement.GET(ProjectNo, DocumentProperties."Project Element")
                               ELSE
                                 BaseElement.GET(DocumentProperties."Project Element");
                             END;
                           END;

                OnLookup=VAR
                           BaseElement@1100409003 : Record 11012060;
                           ProjectElement@1100409002 : Record 11012010;
                           ProjectElements@1100409004 : Page 11012028;
                           Elements@1100409005 : Page 11012118;
                           ProjectNo@1100409001 : Code[20];
                         BEGIN
                           //kzwerver.c #C016690
                           ProjectNo := GetProjectNo;
                           IF (ProjectNo <> '') THEN BEGIN
                             ProjectElement.SETRANGE("Project No.", ProjectNo);
                             ProjectElement."Project No." := ProjectNo;
                             ProjectElement.Element := DocumentProperties."Project Element";
                             ProjectElements.LOOKUPMODE := TRUE;
                             ProjectElements.SETTABLEVIEW(ProjectElement);
                             ProjectElements.SETRECORD(ProjectElement);
                             IF (ProjectElements.RUNMODAL = ACTION::LookupOK) THEN
                               ProjectElements.GETRECORD(ProjectElement);
                             DocumentProperties.VALIDATE("Project Element", ProjectElement.Element);
                           END ELSE BEGIN
                             BaseElement.Code := DocumentProperties."Project Element";
                             Elements.LOOKUPMODE := TRUE;
                             Elements.SETRECORD(BaseElement);
                             IF (Elements.RUNMODAL = ACTION::LookupOK) THEN
                               Elements.GETRECORD(BaseElement);
                             DocumentProperties.VALIDATE("Project Element", BaseElement.Code);
                           END;
                         END;
                          }

    { 1199197427;2;Field  ;
                CaptionML=[ENU=Creation Date;
                           NOR=Opprettelsesdato;
                           SVE=Uppl„ggningsdatum];
                SourceExpr=DocumentProperties."Creation Date" }

    { 1199197419;2;Field  ;
                CaptionML=[ENU=Creation Time;
                           NOR=Opprettet (tid);
                           SVE=Skapades (tid)];
                SourceExpr=DocumentProperties."Creation Time" }

    { 1199197428;2;Field  ;
                CaptionML=[ENU=Document Date;
                           NOR=Dokumentdato;
                           SVE=Dokumentdatum];
                SourceExpr=DocumentProperties."Document Date" }

    { 1100528301;2;Field  ;
                CaptionML=[ENU=Document Version;
                           NOR=Dokumentversjon;
                           SVE=Dokumentversion];
                SourceExpr=DocumentProperties."Version External Doc." }

    { 1199197409;1;Group  ;
                Name=Step3;
                Visible=Step3Visible }

    { 1199197412;2;Field  ;
                CaptionClass=Text19044367;
                MultiLine=Yes;
                Style=Strong;
                StyleExpr=TRUE }

    { 1199197460;2;Part   ;
                Name=DocumentLinks;
                PagePartID=Page11072484;
                Visible=DocumentLinksVisible;
                Enabled=DocumentLinksEnable }

    { 1100525006;2;Field  ;
                CaptionML=[ENU=Relate to;
                           NOR=Relater til;
                           SVE=Relatera till];
                SourceExpr=Relate;
                OnValidate=BEGIN
                             RelateOnAfterValidate;
                           END;
                            }

    { 1100525008;2;Field  ;
                Name=RelateToType;
                CaptionML=[ENU=Relate to type;
                           NOR=Relater til type;
                           SVE=Relatera till typ];
                OptionCaptionML=[ENU=Document,Purchase Quote,Purchase Order,Try-out Quote,Blanket Order,,,,Service Order,Sales Invoice,Sales Cr.Memo,Posted Sales Invoice,Posted Sales Cr.Memo,Sales Quote,Sales Order;
                                 NOR=Dokument,Innkj›pstilbud,Innkj›psordre,Tilbudsforesp›rsel,Rammeordre,,,,Serviceordre,Salgsfaktura,Salgskreditnota,Bokf›rt salgsfaktura,Bokf›rt salgskreditnota,Salgstilbud,Salgsordre;
                                 SVE=Dokument,Ink”psoffert,Ink”psorder,Anbudsf”rfr†gan,Avropsorder,,,,Serviceorder,F”rs„ljningsfaktura,S„ljkreditnota,Bokf”rd f”rs„ljningsfaktura,Bokf”rd s„ljkreditnota,F”rs„ljningsoffert,F”rs„ljningsorder];
                SourceExpr=RelateToType;
                Enabled=RelateToTypeEnable }

    { 1100525010;2;Field  ;
                Name=RelateToCode;
                CaptionML=[ENU=Relate to code;
                           NOR=Relater til kode;
                           SVE=Relatera till kod];
                SourceExpr=RelateToCode;
                Enabled=RelateToCodeEnable;
                OnValidate=VAR
                             DocumentProperties@1100525002 : Record 11012746;
                             PurchaseHeader@1100525001 : Record 38;
                             TryOutQuote@1100525000 : Record 11012758;
                             ServiceOrder@1199197401 : Record 11012823;
                             SalesHeader@1210190001 : Record 36;
                             SalesInvoiceHeader@1210190002 : Record 112;
                             SalesCrMemoHeader@1210190003 : Record 114;
                           BEGIN
                             IF RelateToCode = '' THEN EXIT;
                             CASE RelateToType OF
                               RelateToType::Document:
                                 BEGIN
                                   DocumentProperties.GET(RelateToCode);
                                 END;
                               RelateToType::"Purchase Quote":
                                 BEGIN
                                   PurchaseHeader.GET(PurchaseHeader."Document Type"::Quote, RelateToCode);
                                 END;
                               RelateToType::"Purchase Order":
                                 BEGIN
                                   PurchaseHeader.GET(PurchaseHeader."Document Type"::Order, RelateToCode);
                                 END;
                               RelateToType::"Try-out Quote":
                                 BEGIN
                                   TryOutQuote.GET(RelateToCode);
                                 END;
                               RelateToType::"Blanket Order":
                                 BEGIN
                                   PurchaseHeader.GET(PurchaseHeader."Document Type"::"Blanket Order", RelateToCode);
                                 END;
                               RelateToType::"Service Order":
                                 BEGIN
                                    ServiceOrder.GET(RelateToCode);
                                 END;
                               {RelateToType::"Plant Transport Order":
                                 BEGIN
                                 END;
                               RelateToType::"Plant Exit Order":
                                 BEGIN
                                 END;}
                               // **4PS MVOS.sn
                               RelateToType::"Sales Invoice":
                                 BEGIN
                                   SalesHeader.GET(SalesHeader."Document Type"::Invoice, RelateToCode);
                                 END;
                               RelateToType::"Sales Cr.Memo":
                                 BEGIN
                                   SalesHeader.GET(SalesHeader."Document Type"::"Credit Memo", RelateToCode);
                                 END;
                               RelateToType::"Posted Sales Invoice":
                                 BEGIN
                                   SalesInvoiceHeader.GET(RelateToCode);
                                 END;
                               RelateToType::"Posted Sales Cr.Memo":
                                 BEGIN
                                   SalesCrMemoHeader.GET(RelateToCode);
                                 END;
                               // **4PS MVOS.en
                               // dp00113.sn
                               RelateToType::"Sales Quote":
                                 BEGIN
                                   SalesHeader.GET(SalesHeader."Document Type"::Quote, RelateToCode);
                                 END;
                               RelateToType::"Sales Order":
                                 BEGIN
                                   SalesHeader.GET(SalesHeader."Document Type"::Order, RelateToCode);
                                 END;
                               // dp00113.en
                             END;
                           END;

                OnLookup=VAR
                           DocumentProperties@1100525000 : Record 11012746;
                           PurchaseHeader@1100525001 : Record 38;
                           TryOutQuote@1100525002 : Record 11012758;
                           ServiceOrder@1199197402 : Record 11012823;
                           SalesHeader@1210190002 : Record 36;
                           SalesInvoiceHeader@1210190003 : Record 112;
                           SalesCrMemoHeader@1210190004 : Record 114;
                         BEGIN
                           CASE RelateToType OF
                           //Document,Purchase Quote,Purchase Order,Try-out Quote,Blanket Order,,Plant Transport Order,Plant Exit Order,Service Order,
                           //Sales Quote,Sales Order
                             RelateToType::Document:
                               BEGIN
                                 IF DocumentProperties.GET(RelateToCode) THEN;
                                 IF PAGE.RUNMODAL(0, DocumentProperties) = ACTION::LookupOK THEN BEGIN
                                   RelateToCode := DocumentProperties."No.";
                                 END;
                               END;
                             RelateToType::"Purchase Quote":
                               BEGIN
                                 IF PurchaseHeader.GET(PurchaseHeader."Document Type"::Quote, RelateToCode) THEN;
                                 PurchaseHeader.SETRANGE(PurchaseHeader."Document Type", PurchaseHeader."Document Type"::Quote);
                                 IF PAGE.RUNMODAL(0, PurchaseHeader) = ACTION::LookupOK THEN BEGIN
                                   RelateToCode := PurchaseHeader."No.";
                                 END;
                               END;
                             RelateToType::"Purchase Order":
                               BEGIN
                                 IF PurchaseHeader.GET(PurchaseHeader."Document Type"::Order, RelateToCode) THEN;
                                 PurchaseHeader.SETRANGE(PurchaseHeader."Document Type", PurchaseHeader."Document Type"::Order);
                                 IF PAGE.RUNMODAL(0, PurchaseHeader) = ACTION::LookupOK THEN BEGIN
                                   RelateToCode := PurchaseHeader."No.";
                                 END;
                               END;
                             RelateToType::"Try-out Quote":
                               BEGIN
                                 IF TryOutQuote.GET(RelateToCode) THEN;
                                 IF PAGE.RUNMODAL(0, TryOutQuote) = ACTION::LookupOK THEN BEGIN
                                   RelateToCode := TryOutQuote.Code;
                                 END;
                               END;
                             RelateToType::"Blanket Order":
                               BEGIN
                                 IF PurchaseHeader.GET(PurchaseHeader."Document Type"::"Blanket Order", RelateToCode) THEN;
                                 PurchaseHeader.SETRANGE(PurchaseHeader."Document Type", PurchaseHeader."Document Type"::"Blanket Order");
                                 IF PAGE.RUNMODAL(0, PurchaseHeader) = ACTION::LookupOK THEN BEGIN
                                   RelateToCode := PurchaseHeader."No.";
                                 END;
                               END;
                             RelateToType::"Service Order":
                               BEGIN
                                 IF ServiceOrder.GET(RelateToCode) THEN;
                                 IF PAGE.RUNMODAL(0, ServiceOrder) = ACTION::LookupOK THEN BEGIN
                                   RelateToCode := ServiceOrder."No.";
                                 END;
                               END;
                             {RelateToType::"Plant Transport Order":
                               BEGIN
                               END;
                             RelateToType::"Plant Exit Order":
                               BEGIN
                               END;}
                             // **4PS MVOS.sn
                             RelateToType::"Sales Invoice":
                               BEGIN
                                 IF SalesHeader.GET(SalesHeader."Document Type"::Invoice, RelateToCode) THEN;
                                 SalesHeader.SETRANGE("Document Type", SalesHeader."Document Type"::Invoice);
                                 IF PAGE.RUNMODAL(0, SalesHeader) = ACTION::LookupOK THEN BEGIN
                                   RelateToCode := SalesHeader."No.";
                                 END;
                               END;
                             RelateToType::"Sales Cr.Memo":
                               BEGIN
                                 IF SalesHeader.GET(SalesHeader."Document Type"::"Credit Memo", RelateToCode) THEN;
                                 SalesHeader.SETRANGE("Document Type", SalesHeader."Document Type"::"Credit Memo");
                                 IF PAGE.RUNMODAL(0, SalesHeader) = ACTION::LookupOK THEN BEGIN
                                   RelateToCode := SalesHeader."No.";
                                 END;
                               END;
                             RelateToType::"Posted Sales Invoice":
                               BEGIN
                                 IF SalesInvoiceHeader.GET(RelateToCode) THEN;
                                 IF PAGE.RUNMODAL(0, SalesInvoiceHeader) = ACTION::LookupOK THEN BEGIN
                                   RelateToCode := SalesInvoiceHeader."No.";
                                 END;
                               END;
                             RelateToType::"Posted Sales Cr.Memo":
                               BEGIN
                                 IF SalesCrMemoHeader.GET(RelateToCode) THEN;
                                 IF PAGE.RUNMODAL(0, SalesCrMemoHeader) = ACTION::LookupOK THEN BEGIN
                                   RelateToCode := SalesCrMemoHeader."No.";
                                 END;
                               END;
                             // **4PS MVOS.en
                             // dp00113.sn
                             RelateToType::"Sales Quote":
                               BEGIN
                                 IF SalesHeader.GET(SalesHeader."Document Type"::Quote, RelateToCode) THEN;
                                 SalesHeader.SETRANGE(SalesHeader."Document Type", SalesHeader."Document Type"::Quote);
                                 IF PAGE.RUNMODAL(0, SalesHeader) = ACTION::LookupOK THEN BEGIN
                                   RelateToCode := SalesHeader."No.";
                                 END;
                               END;
                             RelateToType::"Sales Order":
                               BEGIN
                                 IF SalesHeader.GET(SalesHeader."Document Type"::Order, RelateToCode) THEN;
                                 SalesHeader.SETRANGE(SalesHeader."Document Type", SalesHeader."Document Type"::Order);
                                 IF PAGE.RUNMODAL(0, SalesHeader) = ACTION::LookupOK THEN BEGIN
                                   RelateToCode := SalesHeader."No.";
                                 END;
                               END;
                             // dp00113.en
                           END;
                         END;
                          }

  }
  CODE
  {
    VAR
      WizardStep@1199197400 : Integer;
      DocumentProperties@1199197401 : Record 11012746;
      OrigToNameTxt@1199197402 : Text[100];
      Text002@1199197405 : TextConst 'ENU=%1 external documents are registered.;NOR=%1 eksterne dokumenter er registrert.;SVE=%1 externa dokument har registrerats.';
      Text003@1100525003 : TextConst 'ENU=%2 external documents are not registered correctly.;NOR=%2 eksterne dokumenter er ikke korrekt registrert.;SVE=%2 externa dokument „r inte korrekt registrerade.';
      Text008@1199197404 : TextConst 'ENU=Enter contact %1 here, and enter contact person in field %2.;NOR=Angi kontakten %1 her, og angi kontaktperson i feltet ''Person''.;SVE=Ange kontakten %1 h„r, och ange kontaktperson i f„ltet ''Person''.';
      Relate@1100525004 : Boolean;
      RelateToType@1100525005 : 'Document,Purchase Quote,Purchase Order,Try-out Quote,Blanket Order,,,,Service Order,Sales Invoice,Sales Cr.Memo,Posted Sales Invoice,Posted Sales Cr.Memo,Sales Quote,Sales Order';
      RelateToCode@1100525006 : Code[20];
      RecID@1100525009 : RecordID;
      ContactNo@1100528702 : Code[20];
      ContactPersonNo@1100528701 : Code[20];
      DepartmentCode@1100528700 : Code[20];
      Step1Visible@19067551 : Boolean INDATASET;
      FilesVisible@19043765 : Boolean INDATASET;
      Step2Visible@19067406 : Boolean INDATASET;
      Step3Visible@19067629 : Boolean INDATASET;
      DocumentLinksVisible@19077052 : Boolean INDATASET;
      FilesEnable@19039440 : Boolean INDATASET;
      DocumentLinksEnable@19075369 : Boolean INDATASET;
      FinishEnable@19079943 : Boolean INDATASET;
      ProcessReturnEnable@19041338 : Boolean INDATASET;
      BackEnable@19029006 : Boolean INDATASET;
      NextEnable@19007695 : Boolean INDATASET;
      AddEnable@1210190000 : Boolean INDATASET;
      RelateToTypeEnable@19051001 : Boolean INDATASET;
      RelateToCodeEnable@19004606 : Boolean INDATASET;
      Text19017975@19000262 : TextConst 'ENU=This wizard helps you to register external documents. All files below will be registered.;NOR=Denne guiden hjelper deg med † registrere eksterne dokumenter. Alle filer nedenfor vil registreres.;SVE=Den h„r guiden hj„lper dig att registrera externa dokument. Alla filer nedan kommer att registreras.';
      Text19023891@19010856 : TextConst 'ENU=Specify the properties of the selected documents below.;NOR=Angi egenskapene for de valgte dokumentene nedenfor.;SVE=Ange egenskaperna f”r de valda dokumenten nedan.';
      Text19044367@19016106 : TextConst 'ENU=Select the entities to which the selected documents are linked.;NOR=Velg de enhetene som de markerte dokumentene er linket til.;SVE=V„lj de enheter som de markerade dokumenten „r l„nkade till.';
      Text19044368@1100528300 : TextConst 'ENU="%1 %2 not implemented. "';
      PPTVisible@1100528301 : Boolean INDATASET;
      DPTVisible@1100528302 : Boolean INDATASET;

    LOCAL PROCEDURE ShowStep@2(Visible@1001 : Boolean);
    BEGIN
      CASE WizardStep OF
        1:
          BEGIN
            Step1Visible := Visible;
            FilesVisible := Visible;
            FilesEnable := Visible;
            IF Visible THEN BEGIN
              FinishEnable := FALSE;
              ProcessReturnEnable := FALSE;
              BackEnable := FALSE;
              NextEnable := TRUE;
              AddEnable := TRUE;
            END;
          END;
        2:
          BEGIN
            Step2Visible := Visible;
            IF Visible THEN BEGIN
              FinishEnable := FALSE;
              ProcessReturnEnable := FALSE;
              BackEnable := TRUE;
              NextEnable := TRUE;
              AddEnable := FALSE;
            END;
          END;
        3:
          BEGIN
            Step3Visible := Visible;
            DocumentLinksVisible := Visible;
            DocumentLinksEnable := Visible;
            IF Visible THEN BEGIN
              GenerateQueuedDocumentLinks();
              CurrPage.DocumentLinks.PAGE.UpdateForm(FALSE);
              FinishEnable := TRUE;
              ProcessReturnEnable := DocsRemaining();
              BackEnable := TRUE;
              NextEnable := FALSE;
              AddEnable := FALSE;
            END;
          END;
      END;
    END;

    PROCEDURE ValidateStep2@1199197404();
    BEGIN
      //IF DocumentProperties."Document Type" = '' THEN
      //  ERROR(Text001, DocumentProperties.FIELDCAPTION("Document Type"));
      DocumentProperties.TESTFIELD(Description);
    END;

    PROCEDURE GenerateQueuedDocumentLinks@1199197400();
    VAR
      DocumentLinkMgt@1199197400 : Codeunit 11012401;
      QueuedDocumentLink@1199197402 : Record 11125736;
      LinkedRecIdArray@1100528502 : ARRAY [10] OF RecordID;
      DocumentLinkSeqNoStep@1100528501 : Integer;
      i@1100528500 : Integer;
    BEGIN
      DocumentLinkSeqNoStep := 1000;
      QueuedDocumentLink.SETRANGE(User, USERID);
      QueuedDocumentLink.DELETEALL(TRUE);
      DocumentLinkMgt.GetAdditionalDocumentLinksFromRecordID(RecID,LinkedRecIdArray);
      FOR i:=1 TO ARRAYLEN(LinkedRecIdArray) DO BEGIN
        InsertQueuedDocumentLink(
        USERID,
        (i * DocumentLinkSeqNoStep),
        LinkedRecIdArray[i].TABLENO,
        DocumentLinkMgt.GetFilterExpression(LinkedRecIdArray[i]),
        LinkedRecIdArray[i],
        TRUE);
      END;
    END;

    PROCEDURE ValidateContactNo@1199197401();
    VAR
      Contact@1199197400 : Record 5050;
    BEGIN
      WITH DocumentProperties DO BEGIN
        IF "Contact No." <> '' THEN BEGIN
          Contact.GET("Contact No.");
          IF (Contact."Company No." <> '') AND (Contact."Company No." <> "Contact No.") THEN
             ERROR(Text008, Contact."Company No.", FIELDCAPTION("Contact Person No."));

          "Contact Name" := Contact.Name;
          "Contact Name 2" := Contact."Name 2";
          "Document Group" := Contact."Document Group";
        END ELSE BEGIN
          "Contact Name" := '';
          "Contact Name 2" := '';
          "Document Group" := '';
        END;
        VALIDATE("Contact Person No.",'');
      END;
    END;

    PROCEDURE ValidatePerson@1199197402();
    VAR
      Contact@1199197400 : Record 5050;
    BEGIN
      WITH DocumentProperties DO BEGIN
        IF "Contact Person No." <> '' THEN BEGIN
          Contact.SETRANGE(Type, Contact.Type::Person);
          Contact.SETRANGE("Company No.", "Contact No.");
          Contact.GET("Contact Person No.");
          "Contact Person Name" := Contact.Name;
          "Contact Person Name 2" := Contact."Name 2";
          IF Contact."Company No." = '' THEN
            "Document Group" := Contact."Document Group";
        END ELSE BEGIN
          "Contact Person Name" := '';
          "Contact Person Name 2" := '';
        END;
      END;
    END;

    PROCEDURE ProcessSelectedDocuments@1199197403() : Boolean;
    VAR
      QueuedExternalDocument@1199197400 : Record 11012148;
      QueuedDocumentLink@1100525001 : Record 11125736;
      DocProp@1100525003 : Record 11012746;
      ErrorRec@1100525004 : Record 11012051;
      PurchaseHeader@1100525011 : Record 38;
      TryOutQuote@1100525010 : Record 11012758;
      ServiceOrder@1199197402 : Record 11012823;
      count@1199197401 : Integer;
      countFailed@1100525005 : Integer;
      SeqNo@1100525006 : Integer;
      lvErrorMessage@1100525002 : Text[250];
      DocLinkRID@1100525007 : RecordID;
      DocumentLinkMgt@1100525008 : Codeunit 11012401;
      RecRef@1100525009 : RecordRef;
      SalesHeader@1210190000 : Record 36;
      SalesInvoiceHeader@1210190001 : Record 112;
      SalesCrMemoHeader@1210190002 : Record 114;
    BEGIN
      QueuedExternalDocument.SETRANGE(User, USERID);

      //check wether the files (still) exist
      IF QueuedExternalDocument.FINDFIRST THEN BEGIN
        REPEAT
          QueuedExternalDocument.VALIDATE("File Name");
        UNTIL QueuedExternalDocument.NEXT = 0;
      END;

      //if document relation must be created, also create a document link
      IF (Relate) AND (RelateToType <> RelateToType::Document) THEN BEGIN
        CASE RelateToType OF
          //Document,Purchase Quote,Purchase Order,Try-out Quote,Blanket Order,,Plant Transport Order,Plant Exit Order
          //Sales Invoice, Sales Cr.Memo, Posted Sales Invoice, Posted Sales Cr.Memo, Sales Quote, Sales Order
          RelateToType::"Purchase Quote":
            BEGIN
              IF PurchaseHeader.GET(PurchaseHeader."Document Type"::Quote, RelateToCode) THEN BEGIN
                RecRef.GETTABLE(PurchaseHeader);
                DocLinkRID := RecRef.RECORDID;
              END;
            END;
          RelateToType::"Purchase Order":
            BEGIN
              IF PurchaseHeader.GET(PurchaseHeader."Document Type"::Order, RelateToCode) THEN BEGIN
                RecRef.GETTABLE(PurchaseHeader);
                DocLinkRID := RecRef.RECORDID;
              END;
            END;
          RelateToType::"Try-out Quote":
            BEGIN
              IF TryOutQuote.GET(RelateToCode) THEN BEGIN
                RecRef.GETTABLE(TryOutQuote);
                DocLinkRID := RecRef.RECORDID;
              END;
            END;
          RelateToType::"Service Order":
            BEGIN
              IF ServiceOrder.GET(RelateToCode) THEN BEGIN
                RecRef.GETTABLE(ServiceOrder);
                DocLinkRID := RecRef.RECORDID;
              END;
            END;
          {RelateToType::"Blanket Order":
            BEGIN
              //Possible Documentlink Blanket Order doesn't exist yet.
              IF PurchaseHeader.GET(PurchaseHeader."Document Type"::"Blanket Order", RelateToCode) THEN;
              END;
            END;}
          {RelateToType::"Plant Transport Order":
            BEGIN
            END;
          RelateToType::"Plant Exit Order":
            BEGIN
            END;}
          // **4PS MVOS.sn
          RelateToType::"Sales Invoice":
            BEGIN
              IF SalesHeader.GET(SalesHeader."Document Type"::Invoice, RelateToCode) THEN BEGIN
                RecRef.GETTABLE(SalesHeader);
                DocLinkRID := RecRef.RECORDID;
              END;
            END;
          RelateToType::"Sales Cr.Memo":
            BEGIN
              IF SalesHeader.GET(SalesHeader."Document Type"::"Credit Memo", RelateToCode) THEN BEGIN
                RecRef.GETTABLE(SalesHeader);
                DocLinkRID := RecRef.RECORDID;
              END;
            END;
          RelateToType::"Posted Sales Invoice":
            BEGIN
              IF SalesInvoiceHeader.GET(RelateToCode) THEN BEGIN
                RecRef.GETTABLE(SalesInvoiceHeader);
                DocLinkRID := RecRef.RECORDID;
              END;
            END;
          RelateToType::"Posted Sales Cr.Memo":
            BEGIN
              IF SalesCrMemoHeader.GET(RelateToCode) THEN BEGIN
                RecRef.GETTABLE(SalesCrMemoHeader);
                DocLinkRID := RecRef.RECORDID;
              END;
            END;
          // **4PS MVOS.en
          // dp00113.sn
          RelateToType::"Sales Quote":
            BEGIN
              IF SalesHeader.GET(SalesHeader."Document Type"::Quote, RelateToCode) THEN BEGIN
                RecRef.GETTABLE(SalesHeader);
                DocLinkRID := RecRef.RECORDID;
              END;
            END;
          RelateToType::"Sales Order":
            BEGIN
              IF SalesHeader.GET(SalesHeader."Document Type"::Order, RelateToCode) THEN BEGIN
                RecRef.GETTABLE(SalesHeader);
                DocLinkRID := RecRef.RECORDID;
              END;
            END;
          // dp00113.en
        END;
        QueuedDocumentLink.SETRANGE(User, USERID);
        IF QueuedDocumentLink.FINDLAST THEN
          SeqNo := QueuedDocumentLink."Seq. No." + 10000
        ELSE
          SeqNo := 10000;

          QueuedDocumentLink.INIT;
          QueuedDocumentLink.User := USERID;
          QueuedDocumentLink."Seq. No." := SeqNo;
          QueuedDocumentLink."Table No." := DocLinkRID.TABLENO;
          QueuedDocumentLink."Filter Expression" := DocumentLinkMgt.GetFilterExpression(DocLinkRID);
          QueuedDocumentLink."Record ID" := DocLinkRID;
          QueuedDocumentLink.Source := FALSE;
          QueuedDocumentLink.INSERT;
      END;

      //register the files
      IF QueuedExternalDocument.FINDFIRST THEN BEGIN
        REPEAT
          IF NOT QueuedExternalDocument.RegisterDocument(DocumentProperties,
              Relate, RelateToType, RelateToCode, lvErrorMessage, DocProp) THEN BEGIN
            StoreMessage(lvErrorMessage, DocProp);
            countFailed += 1;
          END ELSE
            DocProp.CreateDocumentRelationForLinkedDocuments;
          count += 1;
          QueuedExternalDocument.DELETE(TRUE);
          COMMIT;
        UNTIL QueuedExternalDocument.NEXT = 0;
      END;
      QueuedExternalDocument.DELETEALL(TRUE);
      IF countFailed = 0 THEN BEGIN
        MESSAGE(Text002, count);
      END ELSE BEGIN
        MESSAGE(Text002 + '\' + Text003, count, countFailed);
        ErrorRec.SETRANGE("User ID", USERID);
        ErrorRec.SETRANGE("Source Type", ErrorRec."Source Type"::"Read Documents");
        IF ErrorRec.FIND('-') THEN BEGIN
          COMMIT;
          PAGE.RUNMODAL(PAGE::Errors, ErrorRec);
        END;
      END;

      CurrPage.Files.PAGE.UpdatePage();
      EXIT(TRUE);
    END;

    PROCEDURE FinishWizard@1100525000() : Boolean;
    BEGIN
      EXIT(ProcessSelectedDocuments());
    END;

    PROCEDURE DocsRemaining@1100525001() : Boolean;
    VAR
      QueuedExternalDocument@1100525001 : Record 11012148;
    BEGIN
      QueuedExternalDocument.SETRANGE(User, USERID);
      EXIT(QueuedExternalDocument.COUNT > 0);
    END;

    PROCEDURE StoreMessage@5(lvMess@11012001 : Text[250];iDocProp@1100525000 : Record 11012746);
    VAR
      ErrorRec@1210190000 : Record 11012051;
      lvError@11012002 : Integer;
    BEGIN
      WITH ErrorRec DO BEGIN
        SETRANGE("User ID", USERID);
        SETRANGE("Source Type", "Source Type"::"Read Documents");
        IF FINDLAST THEN
          lvError := "Line No." + 1
        ELSE
          lvError := 1;

        INIT;
        "User ID" := USERID;
        "Source Type" := "Source Type"::"Read Documents";
        "Line No." := lvError;
        Description := iDocProp.Description;
        "Error message" := lvMess;
        "Document No." := iDocProp."No.";
        INSERT;
      END;
    END;

    PROCEDURE EnableDisableFields@1100525002();
    BEGIN
      RelateToTypeEnable := Relate;
      RelateToCodeEnable := Relate;
    END;

    PROCEDURE QueuedExtDocumentExists@1100525006(QueuedExternalDocument2@1100525000 : Record 11012148) : Boolean;
    VAR
      QueuedExternalDocument@1100525001 : Record 11012148;
    BEGIN
      QueuedExternalDocument.SETRANGE(User, QueuedExternalDocument2.User);
      IF QueuedExternalDocument.FINDSET THEN
        REPEAT
          IF (LOWERCASE(QueuedExternalDocument.Folder) = LOWERCASE(QueuedExternalDocument2.Folder)) AND
             (LOWERCASE(QueuedExternalDocument."File Name") = LOWERCASE(QueuedExternalDocument2."File Name")) THEN
            EXIT(TRUE);
        UNTIL QueuedExternalDocument.NEXT = 0;
    END;

    PROCEDURE DeleteQueuedDocumentLinks@1100525005(User@1100525001 : Code[50]);
    VAR
      QueuedDocumentLink@1100525000 : Record 11125736;
    BEGIN
      QueuedDocumentLink.SETRANGE(User, User);
      QueuedDocumentLink.DELETEALL;
    END;

    PROCEDURE InsertQueuedDocumentLink@1100525007(User@1100525001 : Code[50];SeqNo@1100525002 : Integer;TableNo@1100525003 : Integer;FilterExpression@1100525004 : Text[100];RecordID@1100525005 : RecordID;Source@1100525006 : Boolean);
    VAR
      QueuedDocumentLink@1100525000 : Record 11125736;
    BEGIN
      IF TableNo <> 0 THEN BEGIN
        QueuedDocumentLink.User := User;
        QueuedDocumentLink."Seq. No." := SeqNo;
        QueuedDocumentLink."Table No." := TableNo;
        QueuedDocumentLink."Filter Expression" := FilterExpression;
        QueuedDocumentLink."Record ID" := RecordID;
        QueuedDocumentLink.Source := Source;
        QueuedDocumentLink.INSERT;
      END;
    END;

    PROCEDURE SetRecordID@1100525004(RecID2@1100525000 : RecordID);
    BEGIN
      RecID := RecID2;
    END;

    PROCEDURE SetContact@1100525009(ContactNo2@1100525000 : Code[20];ContactPersonNo2@1100528700 : Code[20]);
    BEGIN
      // jhoek.270111
      ContactNo := ContactNo2;
      ContactPersonNo := ContactPersonNo2;
    END;

    PROCEDURE SetDepartmentCode@1100528700(DepartmentCode2@1100528700 : Code[20]);
    BEGIN
      DepartmentCode := DepartmentCode2;
    END;

    PROCEDURE InitTables@1210190000();
    VAR
      DocumentLinkMgt@1210190000 : Codeunit 11012401;
    BEGIN
      DeleteQueuedDocumentLinks(USERID);

      IF RecID.TABLENO <> 0 THEN
        InsertQueuedDocumentLink(
          USERID,
          10000,
          RecID.TABLENO,
          DocumentLinkMgt.GetFilterExpression(RecID),
          RecID,
          TRUE);

      DocumentProperties.INIT;
      IF ContactNo <> '' THEN
        DocumentProperties.VALIDATE("Contact No.", ContactNo);
      IF ContactPersonNo <> '' THEN
        DocumentProperties.VALIDATE("Contact Person No.", ContactPersonNo);
      IF DepartmentCode <> '' THEN
        DocumentProperties."Department Code" := DepartmentCode;

      DocumentProperties.SetDefaultValues;
    END;

    LOCAL PROCEDURE DocumentPropertiesAddressedToO@19031917();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE DocumentPropertiesDocumentType@19044799();
    BEGIN
    END;

    LOCAL PROCEDURE DocumentPropertiesDocumentCate@19039048();
    BEGIN
    END;

    LOCAL PROCEDURE RelateOnAfterValidate@19041272();
    BEGIN
      EnableDisableFields();
    END;

    PROCEDURE GetProjectNo@1100409004() : Code[20];
    VAR
      Job@1100409000 : Record 11072003;
      TempDocumentLink@1100409001 : TEMPORARY Record 11012747;
      RecRef@1100409002 : RecordRef;
      DocumentLinkMgt@1100409003 : Codeunit 11012401;
    BEGIN
      //kzwerver.n #C016690
      DocumentLinkMgt.FillDefaultDocumentLinkTable(DocumentProperties, TempDocumentLink, TRUE);
      TempDocumentLink.SETRANGE("Document No.", DocumentProperties."No.");
      TempDocumentLink.SETRANGE("Table No.", DATABASE::Job);
      TempDocumentLink.SETRANGE("Internal Company", COMPANYNAME);
      IF (TempDocumentLink.FINDFIRST) THEN BEGIN
        RecRef.GET(TempDocumentLink."Record ID");
        RecRef.SETTABLE(Job);
        EXIT(Job."No.");
      END;
      EXIT('');
    END;

    LOCAL PROCEDURE SetFieldsVisible@1100528301();
    VAR
      Job@1100528300 : Record 11072003;
      ServiceLocation@1100525000 : Record 11012801;
    BEGIN
      CASE RecID.TABLENO OF
        DATABASE::Job: BEGIN
          Job.GET(GetSourceCodeFromRecId(RecID ));
          PPTVisible := Job.IsJobInProjectPortal;
          DPTVisible := Job.IsDocumentPortalDualProject;
          DocumentProperties."Document Portal Source Type" := DocumentProperties."Document Portal Source Type"::Project;
          DocumentProperties."Document Portal Source No." := Job."No.";
        END;
        DATABASE::"Service Location": BEGIN
          ServiceLocation.GET(GetSourceCodeFromRecId(RecID ));
          PPTVisible := FALSE;
          DPTVisible := ServiceLocation.IsDocumentPortalServiceLocation;
          DocumentProperties."Document Portal Source Type" := DocumentProperties."Document Portal Source Type"::ServiceLoc;
          DocumentProperties."Document Portal Source No." := ServiceLocation."No.";
        END;
        ELSE BEGIN
          PPTVisible := FALSE;
          DPTVisible := FALSE;
          DocumentProperties."Document Portal Source Type" := 0;
          DocumentProperties."Document Portal Source No." := '';
        END;
      END;
    END;

    LOCAL PROCEDURE GetSourceCodeFromRecId@1100528300(RecId@1100528300 : RecordID) : Code[20];
    VAR
      Job@1100528301 : Record 11072003;
      ServiceLocation@1100525000 : Record 11012801;
      RecRef@1100528302 : RecordRef;
    BEGIN
      CASE RecId.TABLENO OF
        DATABASE::Job: BEGIN
          RecRef.GET(RecId);
          RecRef.SETTABLE(Job);
          EXIT(Job."No.");
        END;
        DATABASE::"Service Location": BEGIN
          RecRef.GET(RecId);
          RecRef.SETTABLE(ServiceLocation);
          EXIT(ServiceLocation."No.");
        END;
      END;
      EXIT('');
    END;

    BEGIN
    {
      1609026 ITERO.LP RFC-067-2 Call to QueuedExternalDocument.ErrorifDocLinkNotOK from Menu Action "Add"
    }
    END.
  }
}

