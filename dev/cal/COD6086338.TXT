OBJECT Codeunit 6086338 Settlement-Post
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EMW16.00.10.3.00.07,4PS14.00;
  }
  PROPERTIES
  {
    TableNo=6086339;
    Permissions=TableData 81=rimd,
                TableData 11072008=rimd;
    OnRun=BEGIN
            RunWithCheck(Rec);
          END;

  }
  CODE
  {
    VAR
      EMSetup@1160040008 : Record 6086300;
      GenJnlPostLine@1160040025 : Codeunit 12;
      JobJnlPostLine@6086301 : Codeunit 11072003;
      PostingFunctions@1160040015 : Codeunit 6086336;
      Window@1160040005 : Dialog;
      BalanceAccountNo@1160040002 : Code[20];
      DocumentNo@1160040000 : Code[20];
      BalanceAccountType@1160040001 : Integer;
      PreviewMode@6086300 : Boolean;
      Text001@1160040013 : TextConst 'DEU=Zeilen buchen              #2######\;ENU=Posting lines              #2######\;NLD=Boeken regels              #2######\;SVE=Bokf”ring rader            #2######\';

    LOCAL PROCEDURE RunWithCheck@1160040012(VAR Settlement@1160040000 : Record 6086339);
    VAR
      CheckLine@1160040001 : Codeunit 6086349;
    BEGIN
      CheckLine.RUN(Settlement);
      Code(Settlement);
    END;

    PROCEDURE RunWithoutCheck@1160040011(VAR Settlement@1160040000 : Record 6086339);
    BEGIN
      Code(Settlement);
    END;

    LOCAL PROCEDURE Code@1160040013(VAR Rec@1160040000 : Record 6086339);
    VAR
      Expense@1160040002 : Record 6086320;
      Mileage@1160040001 : Record 6086338;
      Settlement@1160040003 : Record 6086339;
      NoSeriesMgt@6086301 : Codeunit 396;
      EMNavVersion@6086300 : Codeunit 6086319;
      PostingCurr@1160040008 : Code[10];
      SettlementDocumentNo@1160040009 : Code[20];
      xCurrency@1160040005 : Code[10];
      TotalBalAmount@1160040006 : Decimal;
      TotalBalAmountLCY@1160040007 : Decimal;
      LineCount@1160040004 : Integer;
    BEGIN
      WITH Rec DO BEGIN
        IF NOT PreviewMode THEN
          CLEARALL
        ELSE BEGIN
          CLEARALL;
          PreviewMode := TRUE;
        END;

        Settlement.COPY(Rec);
        WITH Settlement DO BEGIN
          IF GUIALLOWED THEN
            Window.OPEN('#1#################################\\' + Text001);

          Window.UPDATE(1,STRSUBSTNO('%1 %2',Rec."Document Type",Rec."No."));

          EMSetup.GET;
          IF NOT PreviewMode THEN BEGIN
            EMSetup.TESTFIELD("Settlement Posted Nos.");
            SettlementDocumentNo := NoSeriesMgt.GetNextNo(EMSetup."Settlement Posted Nos.","Posting Date",TRUE);
          END ELSE
            SettlementDocumentNo := '***';

          //////////////////////////////////////////////////
          // Expenses matched to bank transactions
          //////////////////////////////////////////////////
          IF EMSetup."Post in Expense Currency" THEN
            Expense.SETCURRENTKEY("Settlement No.","Matched to Bank Transaction","Currency Code")
          ELSE
            Expense.SETCURRENTKEY("Settlement No.","Settlement Line No.");
          Expense.SETRANGE("Settlement No.","No.");
          Expense.SETRANGE("Matched to Bank Transaction",TRUE);
          IF Expense.FINDFIRST THEN BEGIN
            REPEAT
              LineCount := LineCount + 1;
              IF GUIALLOWED THEN
                Window.UPDATE(2,LineCount);

              PostingCurr := GetPostingCurrency(Expense);
              IF xCurrency <> PostingCurr THEN
                PostBalance(DATABASE::"Expense Header",1,SettlementDocumentNo,0,TotalBalAmount,TotalBalAmountLCY,xCurrency,
                  "Posting Date",GetSettlementPostingDesc(Settlement),EMSetup."Settlement Source Code",
                  EMSetup."Settlement Posted Nos.");

              PostExpense(Expense,SettlementDocumentNo,"Posting Date",EMSetup."Settlement Source Code",TotalBalAmount,TotalBalAmountLCY,
                EMSetup."Settlement Posted Nos.");

              xCurrency := PostingCurr;
            UNTIL Expense.NEXT = 0;

            PostBalance(DATABASE::"Expense Header",1,"No.",0,TotalBalAmount,TotalBalAmountLCY,xCurrency,
              "Posting Date",GetSettlementPostingDesc(Settlement),EMSetup."Settlement Source Code",EMSetup."Settlement Posted Nos.");
          END;

          //////////////////////////////////////////////////
          // Un-matched expenses
          //////////////////////////////////////////////////
          Expense.SETRANGE("Matched to Bank Transaction",FALSE);
          IF Expense.FINDFIRST THEN BEGIN
            REPEAT
              LineCount := LineCount + 1;
              IF GUIALLOWED THEN
                Window.UPDATE(2,LineCount);

              PostingCurr := GetPostingCurrency(Expense);
              IF xCurrency <> PostingCurr THEN
                PostBalance(DATABASE::"Expense Header",1,SettlementDocumentNo,0,TotalBalAmount,TotalBalAmountLCY,xCurrency,
                  "Posting Date",GetSettlementPostingDesc(Settlement),EMSetup."Settlement Source Code",
                  EMSetup."Settlement Posted Nos.");

              PostExpense(Expense,SettlementDocumentNo,"Posting Date",EMSetup."Settlement Source Code",TotalBalAmount,TotalBalAmountLCY,
                EMSetup."Settlement Posted Nos.");

              xCurrency := PostingCurr;
            UNTIL Expense.NEXT = 0;

            PostBalance(DATABASE::"Expense Header",1,"No.",0,TotalBalAmount,TotalBalAmountLCY,xCurrency,
              "Posting Date",GetSettlementPostingDesc(Settlement),EMSetup."Settlement Source Code",EMSetup."Settlement Posted Nos.");
          END;

          //////////////////////////////////////////////////
          // Mileage
          //////////////////////////////////////////////////
          Mileage.SETCURRENTKEY("Settlement No.","Settlement Line No.");
          Mileage.SETRANGE("Settlement No.","No.");
          IF Mileage.FINDSET THEN BEGIN
            REPEAT
              LineCount := LineCount + 1;
              IF GUIALLOWED THEN
                Window.UPDATE(2,LineCount);

              PostMileage(Mileage,TotalBalAmount,TotalBalAmountLCY,SettlementDocumentNo,"Posting Date",EMSetup."Settlement Source Code",
                EMSetup."Settlement Posted Nos.");
            UNTIL Mileage.NEXT = 0;

            PostBalance(
              DATABASE::"Expense Header",1,"No.",0,TotalBalAmount,TotalBalAmountLCY,'',"Posting Date",
                GetSettlementPostingDesc(Settlement),EMSetup."Settlement Source Code",EMSetup."Settlement Posted Nos.");
          END;

          IF PreviewMode THEN
            EMNavVersion.StopPreviewMode;

          IF NOT PreviewMode THEN BEGIN
            //Re-read from db because Dimensions might have been updated during posting
            GET("Document Type","No.");
            VALIDATE(Posted,TRUE);
            "Created Doc. Type" := DATABASE::"Gen. Journal Line";
            "Created Doc. Subtype" := 0;
            "Created Doc. ID" := SettlementDocumentNo;
            MODIFY;
          END;
        END;

        IF NOT PreviewMode THEN
          COMMIT;
        IF GUIALLOWED THEN
          Window.CLOSE;
      END;
    END;

    LOCAL PROCEDURE PostBalance@1160040001(TableID@1160040003 : Integer;DocType@1160040000 : Integer;DocNo@1160040001 : Code[20];DocRefNo@1160040011 : Integer;VAR BalancingAmount@1160040006 : Decimal;VAR BalancingAmountLCY@1160040005 : Decimal;PostingCurrency@1160040004 : Code[10];NewPostingDate@1160040009 : Date;PostingDescription@1160040010 : Text[50];NewSourceCode@1160040002 : Code[20];NoSeries@1160040013 : Code[20]);
    VAR
      GenJnlLine@1160040012 : Record 81;
      EMNavVersionMgt@1160040008 : Codeunit 6086319;
    BEGIN
      IF (BalancingAmount = 0) AND (BalancingAmountLCY = 0) THEN
        EXIT;

      GenJnlLine.INIT;

      EMSetup.GET;
      IF IsBEVersion THEN BEGIN
        EMSetup.TESTFIELD("Expense Template Name");
        GenJnlLine."Journal Template Name" := EMSetup."Expense Template Name";
        GenJnlLine."Journal Batch Name" := EMSetup."Expense Batch Name";
      END;

      GenJnlLine."Source Code" := NewSourceCode;
      GenJnlLine."Document No." := DocumentNo;
      GenJnlLine.VALIDATE("Posting Date",NewPostingDate); //ALWAYS REPLACED FOR A SETTLEMENT
      GenJnlLine.VALIDATE("Account Type",BalanceAccountType);
      GenJnlLine.VALIDATE("Account No.",BalanceAccountNo);
      GenJnlLine.VALIDATE("Currency Code",PostingCurrency);
      GenJnlLine."System-Created Entry" := TRUE;

      IF GenJnlLine."Account Type" = GenJnlLine."Account Type"::Vendor THEN BEGIN
        GenJnlLine.VALIDATE(Amount,BalancingAmount);

        IF DocumentNo <> '' THEN
          IF PostingCurrency <> '' THEN
            GenJnlLine."External Document No." := STRSUBSTNO('%1 %2',DocumentNo,PostingCurrency)
          ELSE
            GenJnlLine."External Document No." := STRSUBSTNO('%1',DocumentNo);

        GenJnlLine."Gen. Posting Type" := GenJnlLine."Gen. Posting Type"::" ";
        IF BalancingAmountLCY <> 0 THEN
          GenJnlLine.VALIDATE("Amount (LCY)",BalancingAmountLCY);

      END ELSE BEGIN
        GenJnlLine.VALIDATE(Amount,BalancingAmount);
        GenJnlLine.VALIDATE("Amount (LCY)",BalancingAmountLCY);
      END;

      GenJnlLine.Description := PostingDescription;
      GenJnlLine."Posting No. Series" := NoSeries;

      EMNavVersionMgt.PostJnLineWithCheck(GenJnlPostLine,GenJnlLine,TableID,DocType,DocNo,DocRefNo,0,PreviewMode,TRUE);

      BalancingAmount := 0;
      BalancingAmountLCY := 0;
      DocumentNo := '';
    END;

    LOCAL PROCEDURE PostExpense@1160040002(Expense@1160040006 : Record 6086320;NewDocumentNo@1160040017 : Code[20];NewPostingDate@1160040012 : Date;NewSourceCode@1160040001 : Code[20];VAR TotalBalAmount@1160040005 : Decimal;VAR TotalBalAmountLCY@1160040004 : Decimal;NoSeries@1160040028 : Code[20]);
    VAR
      GLAccount@1160040025 : Record 15;
      GenJnlLine@1160040000 : Record 81;
      ContiniaUserSetup@1160040024 : Record 6086002;
      CreditCard@1160040003 : Record 6086311;
      Expense2@1160040008 : Record 6086320;
      ExpenseAllocation@1160040007 : Record 6086321;
      BankTransaction@1160040021 : Record 6086330;
      ExpenseMatch@1160040019 : Record 6086349;
      EMNavVersionMgt@1160040002 : Codeunit 6086319;
      ExpenseCheck@1160040018 : Codeunit 6086333;
      BankCurrencyCode@1160040015 : Code[10];
      SourceCode@1160040027 : Code[20];
      AmountLCYRecalculated@1160040023 : Decimal;
      BalancingAmount@1160040014 : Decimal;
      BalancingAmountLCY@1160040011 : Decimal;
      CreateGenJnlBalanceEntry@1160040010 : Boolean;
      UpdateExpenseAmountLCY@1160040022 : Boolean;
      UseExpenseAllocation@1160040009 : Boolean;
    BEGIN
      ExpenseCheck.RUN(Expense);
      EMSetup.GET;
      IF IsBEVersion THEN
        EMSetup.TESTFIELD("Expense Template Name");

      IF NewSourceCode <> '' THEN
        SourceCode := NewSourceCode
      ELSE
        SourceCode := EMSetup."Settlement Source Code";

      ContiniaUserSetup.GET(Expense."Continia User ID");

      IF NOT Expense."Matched to Bank Transaction" THEN BEGIN
        CheckVendorSetup(ContiniaUserSetup."Vendor No.");
        BalanceAccountType := GenJnlLine."Bal. Account Type"::Vendor;
        BalanceAccountNo := ContiniaUserSetup."Vendor No.";
      END ELSE BEGIN
        ExpenseMatch.SETRANGE("Expense Entry No.",Expense."Entry No.");
        ExpenseMatch.FINDFIRST;

        BankTransaction.GET(ExpenseMatch."Transaction Entry No.");
        CreditCard.GET(BankTransaction."Continia User ID",BankTransaction."Card No.");

        IF EMSetup."Post Bank Trans. on Import" THEN BEGIN
          GLAccount.GET(EMSetup."Intermediate Expense Account");
          IF (GLAccount."Gen. Bus. Posting Group" <> '') OR (GLAccount."Gen. Prod. Posting Group" <> '') OR
             (GLAccount."VAT Bus. Posting Group" <> '') OR (GLAccount."VAT Prod. Posting Group" <> '')
          THEN
            GLAccount.TESTFIELD("Gen. Posting Type");

          BalanceAccountType := GenJnlLine."Bal. Account Type"::"G/L Account";
          BalanceAccountNo := EMSetup."Intermediate Expense Account";
        END ELSE
          IF CreditCard."Account No." <> '' THEN BEGIN
            BalanceAccountType := CreditCard."Account Type";
            BalanceAccountNo := CreditCard."Account No.";
          END ELSE BEGIN
            EMSetup.TESTFIELD("Card Transaction Bal. No.");
            BalanceAccountType := EMSetup."Card Transaction Bal. Type";
            BalanceAccountNo := EMSetup."Card Transaction Bal. No.";
          END;
      END;

      ExpenseAllocation.SETCURRENTKEY("Expense Entry No.");
      ExpenseAllocation.SETRANGE("Expense Entry No.",Expense."Entry No.");
      IF ExpenseAllocation.FINDFIRST THEN
        UseExpenseAllocation := TRUE
      ELSE
        Expense2.COPY(Expense,FALSE);

      REPEAT
        IF UseExpenseAllocation THEN BEGIN
          ExpenseAllocation.TESTFIELD("Continia User ID",Expense."Continia User ID");
          Expense2.TRANSFERFIELDS(ExpenseAllocation);
          Expense2."Entry No." := Expense."Entry No.";
        END;

        CLEAR(BalancingAmountLCY);

        // RE-CHECK THE BANK ACCOUNT CURRENCY
        IF Expense."Matched to Bank Transaction" AND NOT EMSetup."Post Bank Trans. on Import" THEN BEGIN
          BankCurrencyCode := GetBankAccountCurrency(BalanceAccountNo,BalanceAccountType);

          // Currency Code on Bank Account may have changed after the expense was created.
          IF BankCurrencyCode <> Expense2."Bank Currency Code" THEN
            Expense2.VALIDATE("Bank Currency Code",BankCurrencyCode);
        END;

        IF (NOT Expense."Matched to Bank Transaction") OR (BankCurrencyCode <> '') THEN BEGIN
          IF (BankCurrencyCode <> '') AND (Expense2."Currency Code" <> '') THEN
            Expense2."Amount (LCY)" :=
              GetLCYAmount(
                Expense2."Bank-Currency Amount",
                Expense2."Bank Currency Code",
                Expense2."Document Date")
          ELSE
            Expense2."Amount (LCY)" := GetLCYAmount(Expense2.Amount,Expense2."Currency Code",Expense2."Document Date");

          UpdateExpenseAmountLCY := TRUE;
        END;

        IF DocumentNo = '' THEN
          DocumentNo := NewDocumentNo;

        GenJnlLine.INIT;
        IF IsBEVersion THEN BEGIN
          GenJnlLine."Journal Template Name" := EMSetup."Expense Template Name";
          GenJnlLine."Journal Batch Name" := EMSetup."Expense Batch Name";
        END;

        GenJnlLine."Source Code" := SourceCode;
        GenJnlLine."Document No." := DocumentNo;
        GenJnlLine.VALIDATE("Posting Date",NewPostingDate);
        GenJnlLine.VALIDATE("Document Date",Expense."Document Date");

        //JOBS REQUIRE G/L DIRECT POSTING OTHERWISE THEY ARE SKIPPED.
        IF Expense2."Job No." = '' THEN
          GenJnlLine."System-Created Entry" := TRUE;

        IF Expense2."No Refund" AND Expense."Matched to Bank Transaction" THEN BEGIN
          CheckVendorSetup(ContiniaUserSetup."Vendor No.");

          GenJnlLine."External Document No." := STRSUBSTNO('%1 %2',Expense.TABLECAPTION,Expense."Entry No.");
          GenJnlLine.VALIDATE("Account Type",GenJnlLine."Account Type"::Vendor);
          GenJnlLine.VALIDATE("Account No.",ContiniaUserSetup."Vendor No.");
          IF UseExpenseAllocation THEN
            CreateGenJnlBalanceEntry := TRUE //MAKE ONE BANK ACCOUNT CREDITING LINE, OTHERWISE HARD TO RECONCILE
          ELSE BEGIN
            GenJnlLine.VALIDATE("Bal. Account Type",BalanceAccountType);
            GenJnlLine.VALIDATE("Bal. Account No.",BalanceAccountNo);
            CreateGenJnlBalanceEntry := FALSE;
          END;
        END ELSE BEGIN
          GenJnlLine.VALIDATE("Account Type",GenJnlLine."Account Type"::"G/L Account");
          Expense2.TESTFIELD("Expense Account");
          GenJnlLine.VALIDATE("Account No.",Expense2."Expense Account");
          IF Expense."Matched to Bank Transaction" THEN BEGIN
            IF UseExpenseAllocation THEN
              CreateGenJnlBalanceEntry := TRUE //MAKE ONE BANK ACCOUNT CREDITING LINE, OTHERWISE HARD TO RECONCILE
            ELSE BEGIN
              GenJnlLine.VALIDATE("Bal. Account Type",BalanceAccountType);
              GenJnlLine.VALIDATE("Bal. Account No.",BalanceAccountNo);
              CreateGenJnlBalanceEntry := FALSE;
            END;
          END ELSE
            CreateGenJnlBalanceEntry := TRUE;

          IF BalanceAccountType = GenJnlLine."Bal. Account Type"::Vendor THEN
            GenJnlLine."External Document No." := STRSUBSTNO('%1 %2',Expense.TABLECAPTION,Expense."Entry No.");
        END;

        HandleDocumentTypeAndAmounts(GenJnlLine,Expense2,BalancingAmount,BalancingAmountLCY,BalanceAccountType,BalanceAccountNo);

        IF NOT (
           (GenJnlLine."Account Type" = GenJnlLine."Account Type"::Vendor) OR
           (BalanceAccountType = GenJnlLine."Bal. Account Type"::Vendor))
        THEN
          GenJnlLine."Document Type" := GenJnlLine."Document Type"::" ";

        GenJnlLine.Description := COPYSTR(GetExpensePostingDesc(Expense2),1,MAXSTRLEN(GenJnlLine.Description));

        IF (NOT (
           GenJnlLine."Account Type" IN [GenJnlLine."Account Type"::Customer,GenJnlLine."Account Type"::Vendor,
           GenJnlLine."Account Type"::"Bank Account"]))
        THEN BEGIN
          IF Expense2."Gen. Bus. Posting Group" <> '' THEN BEGIN
            GenJnlLine."Gen. Posting Type" := GenJnlLine."Gen. Posting Type"::Purchase;
            GenJnlLine.VALIDATE("Gen. Bus. Posting Group",Expense2."Gen. Bus. Posting Group");
          END;

          IF Expense2."VAT Bus. Posting Group" <> '' THEN
            GenJnlLine.VALIDATE("VAT Bus. Posting Group",Expense2."VAT Bus. Posting Group");

          IF Expense2."Gen. Prod. Posting Group" <> '' THEN BEGIN
            GenJnlLine."Gen. Posting Type" := GenJnlLine."Gen. Posting Type"::Purchase;
            GenJnlLine.VALIDATE("Gen. Prod. Posting Group",Expense2."Gen. Prod. Posting Group");
          END;

          IF Expense2."VAT Prod. Posting Group" <> '' THEN
            GenJnlLine.VALIDATE("VAT Prod. Posting Group",Expense2."VAT Prod. Posting Group");
        END;

        IF (GenJnlLine."Account Type" <> GenJnlLine."Account Type"::Vendor) OR
           (GenJnlLine."Gen. Bus. Posting Group" <> '') OR (GenJnlLine."Gen. Prod. Posting Group" <> '') OR
           (GenJnlLine."VAT Bus. Posting Group" <> '') OR (GenJnlLine."VAT Prod. Posting Group" <> '')
        THEN
          GenJnlLine."Gen. Posting Type" := GenJnlLine."Gen. Posting Type"::Purchase
        ELSE
          GenJnlLine."Gen. Posting Type" := GenJnlLine."Gen. Posting Type"::" ";

        IF GenJnlLine."VAT Prod. Posting Group" <> '' THEN
          IF GenJnlLine."Bill-to/Pay-to No." = '' THEN
            GenJnlLine."Bill-to/Pay-to No." := ContiniaUserSetup."Vendor No.";

        PostingFunctions.AddJobsToJnlLine(
          GenJnlLine,Expense2."Job No.",Expense2."Job Task No.",Expense2."Job Line Type",Expense2.Billable);

        GenJnlLine."Posting No. Series" := NoSeries;

        EMNavVersionMgt.PostJnLineWithCheck(
          GenJnlPostLine,GenJnlLine,DATABASE::Expense,0,'',Expense."Entry No.",ExpenseAllocation."Entry No.",PreviewMode,TRUE);

        //CURRENCY RATE UPDATE
        IF NOT PreviewMode THEN
          IF UpdateExpenseAmountLCY THEN BEGIN
            AmountLCYRecalculated := AmountLCYRecalculated + Expense2."Amount (LCY)";
            IF UseExpenseAllocation THEN
              IF (ExpenseAllocation."Amount (LCY)" <> 0) AND (Expense2."Amount (LCY)" <> ExpenseAllocation."Amount (LCY)") THEN BEGIN
                ExpenseAllocation."Amount (LCY)" := Expense2."Amount (LCY)";
                ExpenseAllocation.MODIFY;
              END;
          END;

        IF CreateGenJnlBalanceEntry THEN BEGIN
          TotalBalAmountLCY += BalancingAmountLCY;
          TotalBalAmount += BalancingAmount;
        END;

      UNTIL (NOT UseExpenseAllocation) OR (ExpenseAllocation.NEXT = 0);

      IF NOT PreviewMode THEN BEGIN
        IF UpdateExpenseAmountLCY AND (AmountLCYRecalculated <> 0) AND (Expense."Amount (LCY)" <> AmountLCYRecalculated) THEN BEGIN
          Expense."Amount (LCY)" := AmountLCYRecalculated;
          Expense.MODIFY;
        END;

        Expense."Created Doc. Type" := DATABASE::"Gen. Journal Line";
        Expense."Created Doc. Subtype" := GenJnlLine."Document Type"::" ";
        Expense."Created Doc. ID" := GenJnlLine."Document No.";
        Expense.VALIDATE(Posted,TRUE);
        Expense.MODIFY;

        IF Expense."Matched to Bank Transaction" THEN
          IF NOT BankTransaction.Posted THEN BEGIN
            BankTransaction.VALIDATE(Posted,TRUE);
            BankTransaction."Posted Doc. ID" := DocumentNo;
            BankTransaction."Expense Type" := Expense."Expense Type";
            BankTransaction.MODIFY;
          END ELSE BEGIN
            BankTransaction."Expense Type" := Expense."Expense Type";
            BankTransaction.MODIFY;
          END;
      END;
    END;

    LOCAL PROCEDURE CheckVendorSetup@1160040007(VendorCode@1160040001 : Code[20]);
    VAR
      Vendor@1160040000 : Record 23;
    BEGIN
      Vendor.GET(VendorCode);
      Vendor.TESTFIELD("Vendor Posting Group");
    END;

    LOCAL PROCEDURE HandleDocumentTypeAndAmounts@1160040009(VAR GenJnlLine@1160040000 : Record 81;VAR Expense@1160040001 : Record 6086320;VAR BalAmt@1160040004 : Decimal;VAR BalAmtLCY@1160040002 : Decimal;BalanceAccountType@1160040003 : 'G/L Account,,,Bank Account';BalanceAccountNo@1160040005 : Code[20]);
    VAR
      BalCurr@1160040006 : Code[10];
      PostCurr@1160040007 : Code[10];
      PostAmt@1160040008 : Decimal;
      PostAmtLCY@1160040009 : Decimal;
    BEGIN
      GetPostingAndBalancingAmounts(Expense,PostAmt,PostCurr,PostAmtLCY,BalAmt,BalCurr,BalAmtLCY);

      SetDocumentTypeAndAmounts(GenJnlLine,GenJnlLine."Document Type"::" ",PostAmt,PostAmtLCY,PostCurr);

      //REVERSE SIGNS FOR NEGATIVE AMOUNTS
      IF Expense."Amount (LCY)" < 0 THEN BEGIN
        GenJnlLine.VALIDATE(Amount,-GenJnlLine.Amount);
        BalAmt := -BalAmt;
        BalAmtLCY := -BalAmtLCY;
      END;
    END;

    LOCAL PROCEDURE SetDocumentTypeAndAmounts@1160040008(VAR GenJnlLine@1160040001 : Record 81;DocumentType@1160040003 : Integer;Amount@1160040004 : Decimal;AmountLCY@1160040000 : Decimal;CurrencyCode@1160040005 : Code[10]);
    BEGIN
      GenJnlLine."Document Type" := DocumentType;
      GenJnlLine.VALIDATE(Amount,ABS(Amount));
      GenJnlLine.VALIDATE("Currency Code",CurrencyCode);
      IF AmountLCY <> 0 THEN
        GenJnlLine.VALIDATE("Amount (LCY)",ABS(AmountLCY));
    END;

    LOCAL PROCEDURE GetBankAccountCurrency@1160040006(BalanceAccountNo@1160040000 : Code[20];BalanceAccountType@1160040001 : 'G/L Account,,Vendor,Bank Account') : Code[10];
    VAR
      Vendor@1160040003 : Record 23;
      BankAccount@1160040002 : Record 270;
    BEGIN
      CASE BalanceAccountType OF

        BalanceAccountType::"Bank Account":
          IF BankAccount.GET(BalanceAccountNo) THEN
            EXIT(BankAccount."Currency Code");

        BalanceAccountType::Vendor:
          IF Vendor.GET(BalanceAccountNo) THEN
            EXIT(Vendor."Currency Code");
      END;
    END;

    LOCAL PROCEDURE GetLCYAmount@1160040005(Amount@1160040000 : Decimal;CurrencyCode@1160040001 : Code[10];Date@1160040003 : Date) : Decimal;
    VAR
      Currency@1160040006 : Record 4;
      CurrExchRate@1160040004 : Record 330;
      CurrencyFactor@1160040002 : Decimal;
    BEGIN
      IF CurrencyCode = '' THEN
        EXIT(Amount);

      Currency.GET(CurrencyCode);
      Currency.CheckAmountRoundingPrecision;
      //**4PS.so
      //CurrencyFactor := CurrExchRate.ExchangeRate(Date,CurrencyCode);
      //EXIT(ROUND(CurrExchRate.ExchangeAmtFCYToLCY(Date,CurrencyCode,Amount,CurrencyFactor),Currency."Amount Rounding Precision"));
      //**4PS.eo
      //**4PS.sn
      CurrencyFactor := CurrExchRate.ExchangeRate(0,'',Date,CurrencyCode,FALSE);
      EXIT(ROUND(CurrExchRate.ExchangeAmtFCYToLCY(0,'',Date,CurrencyCode,Amount,CurrencyFactor,FALSE),Currency."Amount Rounding Precision"));
      //**4PS.en
    END;

    LOCAL PROCEDURE PostMileage@1160040004(VAR Mileage@1160040014 : Record 6086338;VAR TotalBalAmount@1160040004 : Decimal;VAR TotalBalAmountLCY@1160040000 : Decimal;NewDocumentNo@1160040011 : Code[20];NewPostingDate@1160040002 : Date;NewSourceCode@1160040007 : Code[20];NoSeries@1160040019 : Code[20]);
    VAR
      GenJnlLine@1160040008 : Record 81;
      JobJnlLine@1160040023 : Record 11072008;
      ContiniaUserSetup@1160040013 : Record 6086002;
      EMReg@1160040006 : Record 6086367;
      EMNavVersionMgt@1160040005 : Codeunit 6086319;
      LessorIntegration@1160040016 : Codeunit 6086327;
      DataloenIntegration@1160040015 : Codeunit 6086328;
      SourceCode@1160040018 : Code[20];
      DocType@1160040001 : Integer;
      MileagePosting@1160040003 : 'Use General Journal,Use Purchase Invoice';
    BEGIN
      EMSetup.GET;
      IF IsBEVersion THEN
        EMSetup.TESTFIELD("Expense Template Name");

      IF NewSourceCode <> '' THEN
        SourceCode := NewSourceCode
      ELSE
        SourceCode := EMSetup."Settlement Source Code";

      IF NOT PreviewMode THEN
        IF EMReg."No." = 0 THEN BEGIN
          EMReg.LOCKTABLE;
          IF EMReg.FINDLAST THEN
            EMReg."No." := EMReg."No." + 1
          ELSE
            EMReg."No." := 1;
          EMReg.INIT;
          EMReg."Creation Date" := TODAY;
          EMReg."User ID" := USERID;
          EMReg.INSERT;
        END;

      WITH Mileage DO BEGIN

        RecalculateMileage(Mileage);

        // THERE ARE 5 MOTHODS OF POSTING:
        // 1. POSTING ON THIS VENDOR IN NAV (INTERNAL)
        // 2. POSTING IN THE INTEGRATION SYSTEMS (EXTERNAL)
        // 3. POSTING IN A NON-INTEGRATED SYSTEM (EXTERNAL,NO ACCOUNTS SPECIFIED);
        // 4. POSTING ON THIS VENDOR IN NAV (INTERNAL) + POSTING IN THE INTEGRATION SYSTEMS (EXTERNAL)
        // 5. POSTING ON THIS VENDOR IN NAV (INTERNAL) + POSTING IN A NON-INTEGRATED SYSTEM (EXTERNAL,NO ACCOUNTS SPECIFIED);
        IF NOT PreviewMode THEN
          IF "Reimbursement Method" IN ["Reimbursement Method"::"External System","Reimbursement Method"::Both] THEN BEGIN
            IF ("External Posting Account Type" = "External Posting Account Type"::"Lessor Pay Type") AND (NOT "No Refund") THEN BEGIN
              LessorIntegration.TransferMileageToLessor(Mileage);
              VALIDATE(Reimbursed,TRUE);
            END;

            IF ("External Posting Account Type" = "External Posting Account Type"::"Dataloen Pay Type") AND
               (NOT "No Refund")
            THEN BEGIN
              DataloenIntegration.TransferSingleMileageToDL(Mileage);
              VALIDATE(Reimbursed,TRUE);
            END;

            IF "No Refund" THEN
              VALIDATE(Reimbursed,TRUE);

            "Register No." := EMReg."No.";
            MODIFY;
            IF "Reimbursement Method" = "Reimbursement Method"::"External System" THEN BEGIN
              VALIDATE(Posted,TRUE);
              MODIFY;
              EXIT;
            END;
          END;

        ContiniaUserSetup.GET("Continia User ID");
        CheckVendorSetup(ContiniaUserSetup."Vendor No.");

        MileagePosting := EMSetup."Expense Posting";

        IF DocumentNo = '' THEN
          DocumentNo := NewDocumentNo;

        GenJnlLine.INIT;
        IF IsBEVersion THEN BEGIN
          GenJnlLine."Journal Template Name" := EMSetup."Expense Template Name";
          GenJnlLine."Journal Batch Name" := EMSetup."Expense Batch Name";
        END;

        GenJnlLine."Source Code" := SourceCode;
        GenJnlLine."Document No." := DocumentNo;
        GenJnlLine.VALIDATE("Posting Date",NewPostingDate); //ALWAYS REPLACE WHEN IS A SETTLEMENT
        GenJnlLine.VALIDATE("Document Date","Registration Date");

        GenJnlLine.VALIDATE("Account Type",GenJnlLine."Account Type"::"G/L Account");
        TESTFIELD("Mileage Account");
        GenJnlLine.VALIDATE("Account No.","Mileage Account");
        GenJnlLine."External Document No." := STRSUBSTNO('%1 %2',TABLECAPTION,"Entry No.");

        //JOBS REQUIRE G/L DIRECT POSTING OTHERWISE THEY ARE SKIPPED.
        IF "Job No." = '' THEN
          GenJnlLine."System-Created Entry" := TRUE;

        IF "No Refund" AND (NOT DroveInCompanyCar) THEN BEGIN
          GenJnlLine.VALIDATE(Amount,0);
          GenJnlLine."Allow Zero-Amount Posting" := TRUE;
        END ELSE
          IF "Amount (LCY)" < 0 THEN
            GenJnlLine.VALIDATE(Amount,-"Amount (LCY)")
          ELSE
            GenJnlLine.VALIDATE(Amount,"Amount (LCY)");

        GenJnlLine.Description := COPYSTR(GetMileagePostingDesc(Mileage),1,MAXSTRLEN(GenJnlLine.Description));
        DocType := GenJnlLine."Document Type";

        IF (NOT (
           GenJnlLine."Account Type" IN
           [GenJnlLine."Account Type"::Customer,GenJnlLine."Account Type"::Vendor,GenJnlLine."Account Type"::"Bank Account"]))
        THEN BEGIN
          IF "Gen. Bus. Posting Group" <> '' THEN BEGIN
            GenJnlLine."Gen. Posting Type" := GenJnlLine."Gen. Posting Type"::Purchase;
            GenJnlLine.VALIDATE("Gen. Bus. Posting Group","Gen. Bus. Posting Group");
          END;

          IF "VAT Bus. Posting Group" <> '' THEN
            GenJnlLine.VALIDATE("VAT Bus. Posting Group","VAT Bus. Posting Group");

          IF "Gen. Prod. Posting Group" <> '' THEN BEGIN
            GenJnlLine."Gen. Posting Type" := GenJnlLine."Gen. Posting Type"::Purchase;
            GenJnlLine.VALIDATE("Gen. Prod. Posting Group","Gen. Prod. Posting Group");
          END;

          IF "VAT Prod. Posting Group" <> '' THEN
            GenJnlLine.VALIDATE("VAT Prod. Posting Group","VAT Prod. Posting Group");
        END;

        GenJnlLine.VALIDATE("Currency Code",'');

        IF GenJnlLine."VAT Prod. Posting Group" <> '' THEN
          IF GenJnlLine."Bill-to/Pay-to No." = '' THEN
            GenJnlLine."Bill-to/Pay-to No." := ContiniaUserSetup."Vendor No.";

        IF NOT DroveInCompanyCar THEN BEGIN
          PostingFunctions.AddJobsToJnlLine(
            GenJnlLine,"Job No.","Job Task No.","Job Line Type",Billable);
          GenJnlLine."Posting No. Series" := NoSeries;
          EMNavVersionMgt.PostJnLineWithCheck(GenJnlPostLine,GenJnlLine,DATABASE::Mileage,0,'',"Entry No.",0,PreviewMode,TRUE);
        END ELSE
          IF PostingFunctions.CreateJobJnlLineFromGenJnlLine(
            GenJnlLine,JobJnlLine,"Job No.","Job Task No.","Job Line Type",Billable)
          THEN BEGIN
            JobJnlLine."Posting No. Series" := NoSeries;
            EMNavVersionMgt.PostJobJnlLineWithCheck(JobJnlPostLine,JobJnlLine,DATABASE::Mileage,0,'',"Entry No.",0);
          END;

        IF NOT PreviewMode THEN BEGIN
          IF "Register No." = 0 THEN
            "Register No." := EMReg."No.";
          "Reimbursement Register No." := EMReg."No.";

          "Created Doc. Type" := DATABASE::"Gen. Journal Line";
          "Created Doc. Subtype" := GenJnlLine."Document Type"::" ";
          "Created Doc. ID" := GenJnlLine."Document No.";
          VALIDATE(Posted,TRUE);

          IF NOT (("Reimbursement Method" = "Reimbursement Method"::Both) AND ("External Posting Account No." = '')) THEN
            VALIDATE(Reimbursed,TRUE);
          MODIFY;
        END ELSE
          IF DroveInCompanyCar THEN
            CLEAR(GenJnlLine); //OTHERWISE IS SHOWN IN THE PREVIEW

        BalanceAccountType := GenJnlLine."Bal. Account Type"::Vendor;
        BalanceAccountNo := ContiniaUserSetup."Vendor No.";

        IF NOT DroveInCompanyCar THEN BEGIN
          TotalBalAmountLCY := TotalBalAmountLCY - ABS(GenJnlLine."Amount (LCY)");
          TotalBalAmount := TotalBalAmount - ABS(GenJnlLine.Amount);
        END;
      END;
    END;

    LOCAL PROCEDURE RecalculateMileage@1160040022(VAR Mileage@1160040000 : Record 6086338);
    VAR
      MileageRate@1160040001 : Record 6086370;
    BEGIN
      MileageRate.CalcMileageDetails(Mileage,FALSE);
    END;

    PROCEDURE PostAndBalanceExpense@1160040015(VAR Expense@1160040000 : Record 6086320;NewPostingDate@1160040003 : Date);
    VAR
      NoSeriesMgt@1160040006 : Codeunit 396;
      PostingDate@1160040004 : Date;
      PostingDescription@1160040005 : Text[50];
      TotalBalAmount@1160040001 : Decimal;
      TotalBalAmountLCY@1160040002 : Decimal;
    BEGIN
      EMSetup.GET;

      IF NewPostingDate <> 0D THEN
        PostingDate := NewPostingDate
      ELSE
        PostingDate := Expense."Document Date";

      IF NOT PreviewMode THEN BEGIN
        EMSetup.TESTFIELD("Expense Posted Nos.");
        DocumentNo := NoSeriesMgt.GetNextNo(EMSetup."Expense Posted Nos.",PostingDate,TRUE);
      END ELSE
        DocumentNo := '***';

      PostExpense(Expense,DocumentNo,PostingDate,EMSetup."Expense Source Code",TotalBalAmount,TotalBalAmountLCY,
        EMSetup."Expense Posted Nos.");

      PostingDescription := COPYSTR(GetExpensePostingDesc(Expense),1,MAXSTRLEN(PostingDescription));
      PostBalance(DATABASE::Expense,0,'',Expense."Entry No.",TotalBalAmount,TotalBalAmountLCY,GetPostingCurrency(Expense),
        PostingDate,PostingDescription,EMSetup."Expense Source Code",EMSetup."Expense Posted Nos.");
    END;

    PROCEDURE PostAndBalanceMileage@1160040017(VAR Mileage@1160040000 : Record 6086338;NewPostingDate@1160040005 : Date);
    VAR
      NoSeriesMgt@1160040006 : Codeunit 396;
      PostingDate@1160040004 : Date;
      PostingDescription@1160040003 : Text[50];
      TotalBalAmount@1160040001 : Decimal;
      TotalBalAmountLCY@1160040002 : Decimal;
    BEGIN
      EMSetup.GET;

      IF NewPostingDate <> 0D THEN
        PostingDate := NewPostingDate
      ELSE
        PostingDate := Mileage."Registration Date";

      IF NOT PreviewMode THEN BEGIN
        IF NOT ((Mileage."Reimbursement Method" = Mileage."Reimbursement Method"::"External System") AND
           (Mileage."External Posting Account No." = ''))
        THEN BEGIN
          EMSetup.TESTFIELD("Mileage Posted Nos.");
          DocumentNo := NoSeriesMgt.GetNextNo(EMSetup."Mileage Posted Nos.",PostingDate,TRUE);
        END;
      END ELSE
        DocumentNo := '***';

      PostMileage(Mileage,TotalBalAmount,TotalBalAmountLCY,DocumentNo,PostingDate,EMSetup."Mileage Source Code",
        EMSetup."Mileage Posted Nos.");

      PostingDescription := COPYSTR(GetMileagePostingDesc(Mileage),1,MAXSTRLEN(PostingDescription));
      PostBalance(DATABASE::Mileage,0,'',Mileage."Entry No.",TotalBalAmount,TotalBalAmountLCY,'',PostingDate,PostingDescription,
        EMSetup."Mileage Source Code",EMSetup."Mileage Posted Nos.");
    END;

    LOCAL PROCEDURE GetPostingAndBalancingAmounts@1160040000(Expense@1160040000 : Record 6086320;VAR PostAmt@1160040005 : Decimal;VAR PostCurr@1160040006 : Code[10];VAR PostAmtLCY@1160040004 : Decimal;VAR BalAmt@1160040003 : Decimal;VAR BalCurr@1160040001 : Code[20];VAR BalAmtLCY@1160040002 : Decimal);
    BEGIN
      CLEAR(PostAmt);
      CLEAR(PostCurr);
      CLEAR(PostAmtLCY);
      CLEAR(BalAmt);
      CLEAR(BalCurr);
      CLEAR(BalAmtLCY);

      IF Expense."Cash/Private Card" AND Expense."No Refund" THEN
        EXIT;

      //ALWAYS POST IN BANK ACC CURRENCY IF ANY
      IF Expense."Bank Currency Code" <> '' THEN BEGIN
        PostAmt := Expense."Bank-Currency Amount";
        PostCurr := Expense."Bank Currency Code";
        BalAmt := -ABS(Expense."Bank-Currency Amount");

        //USE THE AMOUNT LCY FROM THE BANK
        IF Expense."Currency Code" = '' THEN BEGIN
          PostAmtLCY := Expense."Amount (LCY)";
          BalAmtLCY := -ABS(Expense."Amount (LCY)");
        END;
      END ELSE
        IF EMSetup."Post in Expense Currency" THEN BEGIN
          PostAmt := Expense.Amount;
          PostCurr := Expense."Currency Code";
          BalAmt := -ABS(Expense.Amount);

          IF Expense."Cash/Private Card" THEN BEGIN
            PostAmtLCY := Expense."Amount (LCY)";
            BalAmtLCY := -ABS(Expense."Amount (LCY)");
          END ELSE BEGIN
            PostAmtLCY := Expense."Bank-Currency Amount";
            BalAmtLCY := -ABS(Expense."Bank-Currency Amount");
          END;
        END ELSE
          IF Expense."Cash/Private Card" THEN BEGIN
            PostAmtLCY := Expense."Amount (LCY)";
            BalAmtLCY := -ABS(Expense."Amount (LCY)");
          END ELSE BEGIN
            PostAmtLCY := Expense."Bank-Currency Amount";
            BalAmtLCY := -ABS(Expense."Bank-Currency Amount");
          END;

      BalCurr := PostCurr;
    END;

    LOCAL PROCEDURE GetPostingCurrency@1160040014(Expense@1160040006 : Record 6086320) : Code[10];
    VAR
      BalCurr@1160040001 : Code[20];
      PostCurr@1160040004 : Code[10];
      BalAmt@1160040002 : Decimal;
      BalAmtLCY@1160040000 : Decimal;
      PostAmt@1160040007 : Decimal;
      PostAmtLCY@1160040003 : Decimal;
    BEGIN
      GetPostingAndBalancingAmounts(Expense,PostAmt,PostCurr,PostAmtLCY,BalAmt,BalCurr,BalAmtLCY);
      EXIT(PostCurr);
    END;

    LOCAL PROCEDURE IsBEVersion@1160040018() : Boolean;
    VAR
      ContiniaLocalizationMgt@1160040000 : Codeunit 6192776;
    BEGIN
      EXIT(ContiniaLocalizationMgt.NAVLocalization = 'BE')
    END;

    PROCEDURE SetPreviewMode@6086300(PreviewModeNew@6086300 : Boolean);
    BEGIN
      PreviewMode := PreviewModeNew;
    END;

    LOCAL PROCEDURE GetExpensePostingDesc@1160040010(Expense@1160040000 : Record 6086320) PostingDesc : Text[1024];
    VAR
      ExpPostingDescFields@1160040002 : Record 6086333;
    BEGIN
      EXIT(ExpPostingDescFields.GetExpPostingDesc(Expense));
    END;

    PROCEDURE GetMileagePostingDesc@1160040016(Mileage@1160040000 : Record 6086338) PostingDesc : Text[1024];
    VAR
      ExpPostingDescFields@1160040001 : Record 6086333;
    BEGIN
      EXIT(ExpPostingDescFields.GetMilPostingDesc(Mileage));
    END;

    LOCAL PROCEDURE GetSettlementPostingDesc@1160040023(ExpHeader@1160040000 : Record 6086339) PostingDesc : Text[1024];
    VAR
      ExpPostingDescFields@1160040001 : Record 6086333;
    BEGIN
      PostingDesc := ExpHeader."Posting Description";
      IF ExpPostingDescFields.GetSettlementPostingDesc(ExpHeader) <> '' THEN
        EXIT(ExpPostingDescFields.GetSettlementPostingDesc(ExpHeader));
    END;

    BEGIN
    {
      4PS, Objects renumbered
    }
    END.
  }
}

