OBJECT Report 11128065 VP Feedback PG File
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=PE7.02.01 (12048862);
  }
  PROPERTIES
  {
    CaptionML=[ENU=Report back from Plus Giro;
               NOR=Rapporter tilbake fra Plussgiro;
               SVE=LB èterrapportering frÜn plusgiro];
    ShowPrintStatus=No;
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  gTxtFile.TEXTMODE := TRUE;
                  gServerFileName := gFileMgt.UploadFile(PEB008,'');

                  IF gServerFileName = '' THEN
                    CurrReport.QUIT;

                  gTxtFile.OPEN(gServerFileName);
                END;

    OnPostReport=BEGIN
                   gWindow.OPEN('@1@@@@@@@@@@@@@@@@@@@@@@@@@');
                   WHILE gTxtFile.LEN <> gTxtFile.POS DO BEGIN
                     gWindow.UPDATE(1,ROUND((gTxtFile.POS/gTxtFile.LEN*10000),1.0));
                     gTxtFile.READ(gTxtLine);
                     gLineType := COPYSTR(gTxtLine,1,1);
                     CASE gLineType OF
                       '0':
                         BEGIN // Opening Line
                           gPostingDate := Txt2Date(gTxtLine,49,6);
                           gCurrIsEUR :=  COPYSTR(gTxtLine,55,3) = 'EUR';
                           IF gCurrIsEUR THEN BEGIN
                             IF gBankAccountNoEUR = '' THEN
                               ERROR(PEB007);
                           END ELSE BEGIN
                             IF gBankAccountNoSEK = '' THEN
                               ERROR(PEB006);
                           END;
                         END;
                       '4': gDocumentNo := COPYSTR(gTxtLine,9,23);
                       '5','6':
                         BEGIN // Transaction
                           gXGenJournalLine := gGenJournalLine;
                           gGenJournalLine.INIT;
                           gGenJournalLine."Line No." += 10000;
                           gGenJournalLine.SetUpNewLine(gXGenJournalLine,0,TRUE);
                           gGenJournalLine.VALIDATE("Posting Date",Txt2Date(gTxtLine,53,6));
                           gGenJournalLine.VALIDATE("Account Type",gGenJournalLine."Account Type"::Vendor);
                           gGenJournalLine."Document Type" := gGenJournalLine."Document Type"::Payment;
                           IF gLineType = '5' THEN BEGIN
                             IF InvioceExists(gDocumentNo) THEN BEGIN
                               gGenJournalLine.VALIDATE("Account No.",gVendorLedgerEntry."Vendor No.");
                               gGenJournalLine.VALIDATE("Applies-to Doc. No.",gVendorLedgerEntry."Document No.");
                             END ELSE
                               gGenJournalLine.VALIDATE("Applies-to Doc. No.", '');
                             gGenJournalLine.VALIDATE(Amount,Txt2Dec(gTxtLine,42,11));
                             gGenJournalLine.VALIDATE(Description,gGenJournalLine."Applies-to Doc. No." + ' ' + PEB002);
                           END ELSE BEGIN
                             IF CreditMemoExists(gDocumentNo) THEN BEGIN
                               gGenJournalLine.VALIDATE("Account No.",gVendorLedgerEntry."Vendor No.");
                               gGenJournalLine.VALIDATE("Applies-to Doc. No.",gVendorLedgerEntry."Document No.");
                             END ELSE
                               gGenJournalLine.VALIDATE("Applies-to Doc. No.", '');
                             gGenJournalLine.VALIDATE(Amount,-Txt2Dec(gTxtLine,42,11));
                             gGenJournalLine.VALIDATE(Description,gGenJournalLine."Applies-to Doc. No." + ' ' + PEB003);
                           END;
                           IF gGenJournalLine."Applies-to Doc. No." = '' THEN
                             gGenJournalLine.VALIDATE(Description, PEB004 + ' ' + gDocumentNo);
                           gGenJournalLine.INSERT;
                         END;
                       '8':
                         BEGIN // End line
                           gXGenJournalLine := gGenJournalLine;
                           gGenJournalLine.INIT;
                           gGenJournalLine."Line No." += 10000;
                           gGenJournalLine.SetUpNewLine(gXGenJournalLine,0,TRUE);
                           gGenJournalLine.VALIDATE("Posting Date",gPostingDate);

                           IF gCurrIsEUR THEN BEGIN
                             gGenJournalLine.VALIDATE("Account Type",gAccountTypeEUR);
                             gGenJournalLine.VALIDATE("Account No.",gBankAccountNoEUR)
                           END ELSE BEGIN
                             gGenJournalLine.VALIDATE("Account Type",gAccountTypeSEK);
                             gGenJournalLine.VALIDATE("Account No.",gBankAccountNoSEK);
                           END;
                           gGenJournalLine.VALIDATE(Amount,-Txt2DecSign(gTxtLine,19,13));
                           gGenJournalLine.INSERT;
                         END;
                     END;
                   END;

                   gTxtFile.CLOSE;
                   ERASE(gServerFileName);
                 END;

  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 1070003;2;Group     ;
                  CaptionML=[ENU=SEK;
                             NOR=SEK;
                             SVE=SEK] }

      { 1070004;3;Field     ;
                  CaptionML=[ENU=Account Type;
                             NOR=Kontotype;
                             SVE=Kontotyp];
                  OptionCaptionML=[ENU=G/L Account,,,Bank Account;
                                   NOR=Hovedbokskonto,,,Bankkonto;
                                   SVE=Redov.konto,,,Bankkonto];
                  SourceExpr=gAccountTypeSEK;
                  OnValidate=BEGIN
                               CLEAR(gBankAccountNoSEK);
                             END;
                              }

      { 1070000;3;Field     ;
                  CaptionML=[ENU=Account No;
                             NOR=Nr;
                             SVE=Kontonr];
                  SourceExpr=gBankAccountNoSEK;
                  OnValidate=BEGIN
                               IF gBankAccountNoSEK = '' THEN
                                 EXIT;
                               CASE gAccountTypeSEK OF
                                 gAccountTypeSEK::"G/L Account":
                                   BEGIN
                                     gGLAccountSEK.GET(gBankAccountNoSEK);
                                   END;
                                 gAccountTypeSEK::"Bank Account":
                                   BEGIN
                                     gBankAccountSEK.GET(gBankAccountNoSEK);
                                   END;
                               END;
                             END;

                  OnLookup=BEGIN
                             CASE gAccountTypeSEK OF
                               gAccountTypeSEK::"G/L Account":
                                 BEGIN
                                   IF PAGE.RUNMODAL(0,gGLAccountSEK) = ACTION::LookupOK THEN
                                     gBankAccountNoSEK := gGLAccountSEK."No.";
                                 END;
                               gAccountTypeSEK::"Bank Account":
                                 BEGIN
                                   IF PAGE.RUNMODAL(0,gBankAccountSEK) = ACTION::LookupOK THEN
                                     gBankAccountNoSEK := gBankAccountSEK."No.";
                                 END;
                             END;
                           END;
                            }

      { 1070008;2;Group     ;
                  CaptionML=[ENU=EUR;
                             NOR=EUR;
                             SVE=EUR] }

      { 1070009;3;Field     ;
                  CaptionML=[ENU=Account Type;
                             NOR=Kontotype;
                             SVE=Kontotyp];
                  OptionCaptionML=[ENU=G/L Account,,,Bank Account;
                                   NOR=Hovedbokskonto,,,Bankkonto;
                                   SVE=Redov.konto,,,Bankkonto];
                  SourceExpr=gAccountTypeEUR;
                  OnValidate=BEGIN
                               CLEAR(gBankAccountNoEUR);
                             END;
                              }

      { 1070006;3;Field     ;
                  CaptionML=[ENU=Account No;
                             NOR=Nr;
                             SVE=Kontonr];
                  SourceExpr=gBankAccountNoEUR;
                  OnValidate=BEGIN
                               IF gBankAccountNoEUR = '' THEN
                                 EXIT;
                               CASE gAccountTypeEUR OF
                                 gAccountTypeEUR::"G/L Account":
                                   BEGIN
                                     gGLAccountEUR.GET(gBankAccountNoEUR);
                                   END;
                                 gAccountTypeEUR::"Bank Account":
                                   BEGIN
                                     gBankAccountEUR.GET(gBankAccountNoEUR);
                                   END;
                               END;
                             END;

                  OnLookup=BEGIN
                             CASE gAccountTypeEUR OF
                               gAccountTypeEUR::"G/L Account":
                                 BEGIN
                                   IF PAGE.RUNMODAL(0,gGLAccountEUR) = ACTION::LookupOK THEN
                                     gBankAccountNoEUR := gGLAccountEUR."No.";
                                 END;
                               gAccountTypeEUR::"Bank Account":
                                 BEGIN
                                   IF PAGE.RUNMODAL(0,gBankAccountEUR) = ACTION::LookupOK THEN
                                     gBankAccountNoEUR := gBankAccountEUR."No.";
                                 END;
                             END;
                           END;
                            }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      gTxtFile@1070017 : File;
      gTxtLine@1070016 : Text[1000];
      gGenJournalLine@1070015 : Record 81;
      gXGenJournalLine@1070014 : Record 81;
      gVendorLedgerEntry@1070013 : Record 25;
      gDocumentNo@1070012 : Code[10];
      gPostingDate@1070011 : Date;
      gLineType@1070010 : Code[10];
      gCurrIsEUR@1070009 : Boolean;
      gWindow@1070008 : Dialog;
      gAccountTypeSEK@1070007 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset';
      gBankAccountNoSEK@1070006 : Code[20];
      gGLAccountSEK@1070005 : Record 15;
      gBankAccountSEK@1070004 : Record 270;
      gAccountTypeEUR@1070003 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset';
      gBankAccountNoEUR@1070002 : Code[20];
      gGLAccountEUR@1070001 : Record 15;
      gBankAccountEUR@1070000 : Record 270;
      PEB001@1070025 : TextConst 'ENU=File Name must not be blank;NOR=Filnavnet kan ikke vëre tomt;SVE=Filnamnet fÜr inte vara tomt';
      PEB002@1070024 : TextConst 'ENU=Inv. Payment Vendor;NOR=Betalingsleverandõr;SVE=Betalningsleverantîr';
      PEB003@1070023 : TextConst 'ENU=Cr. Memo Reduction Vendor;NOR=Betalingsleverandõr for kreditnota;SVE=Betalningsleverantîr fîr kreditnota';
      PEB004@1070022 : TextConst 'ENU="Wrong reference. Doc. No.: ";NOR=Feilaktig referanse. Dokumentnr:;SVE="Felaktig referens. Dokumentnr: "';
      PEB005@1070021 : TextConst 'ENU=The Decimal Value "%1" is wrong.;NOR=Desimalverdien "%1" er feilaktig.;SVE=DecimalvÑrdet "%1" Ñr felaktigt.';
      PEB006@1070020 : TextConst 'ENU=You must enter SEK Bank Account No.;NOR=Du mÜ angi bankkontonr for SEK.;SVE=Du mÜste ange bankkontonr fîr SEK.';
      PEB007@1070019 : TextConst 'ENU=You must enter EUR Bank Account No.;NOR=Du mÜ angi bankkontonr for EUR.;SVE=Du mÜste ange bankkontonr fîr EUR.';
      PEB008@1070027 : TextConst 'ENU=Import File Name;NOR=Importer filnavn;SVE=Importera filnamn';
      PEB009@1070026 : TextConst 'ENU=Text Files|*.txt|All Files|*.*;NOR=Tekstfiler|*.txt|Alle filer|*.*;SVE=Textfiler|*.txt|Alla filer|*.*';
      gFileMgt@12047959 : Codeunit 419;
      gServerFileName@12047958 : Text;

    PROCEDURE SetGenJournal@1070011(InGenJournalLine@1070000 : Record 81);
    BEGIN
      gGenJournalLine := InGenJournalLine;
    END;

    PROCEDURE InvioceExists@1070012(InDocumentNo@1070001 : Code[20]) : Boolean;
    BEGIN
      gVendorLedgerEntry.SETCURRENTKEY("Document No.");
      gVendorLedgerEntry.SETRANGE(Open,TRUE);
      gVendorLedgerEntry.SETRANGE("Document No.",InDocumentNo);
      EXIT(gVendorLedgerEntry.FIND('-'));
    END;

    PROCEDURE CreditMemoExists@1070015(InDocumentNo@1070001 : Code[20]) : Boolean;
    BEGIN
      gVendorLedgerEntry.SETCURRENTKEY("Document No.");
      gVendorLedgerEntry.SETRANGE(Open,TRUE);
      gVendorLedgerEntry.SETRANGE("Document No.",InDocumentNo);
      EXIT(gVendorLedgerEntry.FIND('-'));
    END;

    PROCEDURE Txt2Date@1070010(InText@1070000 : Text[250];StartPos@1070005 : Integer;Length@1070004 : Integer) : Date;
    BEGIN
      InText := COPYSTR(InText,StartPos,Length);
      EXIT(DMY2DATE(Txt2Int(InText,5,2),Txt2Int(InText,3,2),2000 + Txt2Int(InText,1,2)));
    END;

    PROCEDURE Txt2Int@1070001(InText@1070000 : Text[250];StartPos@1070001 : Integer;Length@1070002 : Integer) rOutInt : Integer;
    BEGIN
      IF NOT EVALUATE(rOutInt,COPYSTR(InText,StartPos,Length)) THEN
        EXIT(0);
    END;

    PROCEDURE Txt2Dec@1070003(InText@1070002 : Text[250];StartPos@1070001 : Integer;Length@1070000 : Integer) rOutDec : Decimal;
    BEGIN
      IF NOT EVALUATE(rOutDec,COPYSTR(InText,StartPos,Length)) THEN
        ERROR(PEB005,COPYSTR(InText,StartPos,Length));
      rOutDec := rOutDec/100;
    END;

    PROCEDURE Txt2DecSign@1070009(InText@1070000 : Text[250];StartPos@1070005 : Integer;Length@1070004 : Integer) rOutDec : Decimal;
    VAR
      DecText@1070003 : Text[30];
      Negative@1070006 : Boolean;
      ConvStr@1070007 : Text[30];
    BEGIN
      InText := COPYSTR(InText,StartPos,Length);

      Negative := (COPYSTR(InText,STRLEN(InText),1) IN ['J','K','L','M','N','O','P','Q','R']) OR
                  (COPYSTR(InText,STRLEN(InText),1) = GetChar(229));

      ConvStr := 'ABCDEFGHI'+GetChar(228)+'JKLMNOPQR'+GetChar(229);
      IF NOT (COPYSTR(InText,STRLEN(InText), 1) IN ['0'..'9']) THEN
        DecText := COPYSTR(InText,1,STRLEN(InText) - 1) +
             CONVERTSTR(COPYSTR(InText,STRLEN(InText),1),ConvStr,'12345678901234567890')
      ELSE
        DecText := InText;

      IF NOT EVALUATE(rOutDec,DecText) THEN
        ERROR(PEB005,DecText);
      IF Negative THEN
        rOutDec := -(rOutDec/100)
      ELSE
        rOutDec := rOutDec/100;
    END;

    PROCEDURE GetChar@1070002(InInteger@1070001 : Integer) rOutChar : Text[1];
    VAR
      Chr@1070002 : Byte;
    BEGIN
      Chr := InInteger;
      rOutChar := FORMAT(Chr);
    END;

    BEGIN
    {
      PEB *** Begin ***
      PEB0091 Banking
      PEB
      PEB *** End ***
    }
    END.
  }
  RDLDATA
  {
  }
}

