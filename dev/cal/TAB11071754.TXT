OBJECT Table 11071754 Service-Contract Template
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnDelete=VAR
               ServiceSurchargeVersion@1100528601 : Record 11071783;
               SCCustSourceTypeSetup@1100528602 : Record 11071800;
               ServiceCategoryTemplate@1100528600 : Record 11071997;
               ServiceCluster@1100528603 : Record 11071742;
             BEGIN
               ServiceSurchargeVersion.SETRANGE(Type, ServiceSurchargeVersion.Type::"Contract Template");
               ServiceSurchargeVersion.SETRANGE(Code, Code);
               ServiceSurchargeVersion.DELETEALL(TRUE);

               SCCustSourceTypeSetup.SETRANGE(Type, SCCustSourceTypeSetup.Type::"Contract Template");
               SCCustSourceTypeSetup.SETRANGE(Code, Code);
               SCCustSourceTypeSetup.DELETEALL(TRUE);

               ServiceCategoryTemplate.SETRANGE("Service Contract Template Code", Code);
               ServiceCategoryTemplate.DELETEALL(TRUE);

               ServiceCluster.SETRANGE(Type, ServiceCluster.Type::Template);
               ServiceCluster.SETRANGE("Type Code", Code);
               ServiceCluster.DELETEALL(TRUE);
             END;

    CaptionML=[ENU=Service-Contract Template;
               NOR=Servicekontraktsmal;
               SVE=Servicekontraktsmall];
    LookupPageID=Page11125265;
    DrillDownPageID=Page11125265;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code10        ;CaptionML=[ENU=Code;
                                                              NOR=Kode;
                                                              SVE=Kod];
                                                   NotBlank=Yes }
    { 20  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 30  ;   ;Description 2       ;Text50        ;CaptionML=[ENU=Description 2;
                                                              NOR=Beskrivelse 2;
                                                              SVE=Beskrivning 2] }
    { 200 ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              NOR=Nr-serie;
                                                              SVE=Nr-serie] }
    { 250 ;   ;Contract Group      ;Code20        ;TableRelation="Service Contract Group".Code;
                                                   CaptionML=[ENU=Contract Group;
                                                              NOR=Kontraktgruppe;
                                                              SVE=Kontraktsgrupp] }
    { 259 ;   ;Service Type (Other);Code20        ;TableRelation="Service Type";
                                                   OnValidate=BEGIN
                                                                ServSetup.GET;
                                                                IF ServSetup."Copy Additional Cost Setup" THEN BEGIN
                                                                   TESTFIELD("Service Type (Other)", "Service Type");
                                                                   VALIDATE("Department Code (Other)", "Global Dimension 1 Code");
                                                                END ELSE BEGIN
                                                                  IF ServTypeRec.GET("Service Type (Other)") THEN
                                                                    IF ServTypeRec."Department Code" <> '' THEN
                                                                      VALIDATE("Department Code (Other)", ServTypeRec."Department Code");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Service Type (Additional Cost);
                                                              NOR=Servicetype (Tilleggskost);
                                                              SVE=Servicetyp (extra kostnad)] }
    { 260 ;   ;Service Type        ;Code20        ;TableRelation="Service Type".Code;
                                                   OnValidate=BEGIN
                                                                ServSetup.GET;
                                                                IF ServTypeRec.GET("Service Type") THEN
                                                                  IF ServTypeRec."Department Code" <> '' THEN
                                                                    VALIDATE("Global Dimension 1 Code", ServTypeRec."Department Code");
                                                              END;

                                                   CaptionML=[ENU=Service Type;
                                                              NOR=Servicetype;
                                                              SVE=Servicetyp] }
    { 310 ;   ;Contract Duration   ;DateFormula   ;CaptionML=[ENU=Contract Duration;
                                                              NOR=Kontraktperiode;
                                                              SVE=Kontraktperiod] }
    { 330 ;   ;Termination Period  ;DateFormula   ;CaptionML=[ENU=Termination Period;
                                                              NOR=Oppsigelsesperiode;
                                                              SVE=Upps„gningsperiod] }
    { 370 ;   ;VAT Prod. Posting Group;Code20     ;TableRelation="VAT Product Posting Group";
                                                   CaptionML=[ENU=VAT Prod. Posting Group;
                                                              NOR=Moms produktbokf›ringsmal;
                                                              SVE=Moms produktbokf”ringsmall] }
    { 470 ;   ;Surcharge % Labor   ;Decimal       ;CaptionML=[ENU=Surcharge % Labor;
                                                              NOR=Tilleggsgebyrsprosent, arbeidskraft;
                                                              SVE=Till„ggsavgiftsprocent, arbetskraft] }
    { 480 ;   ;Surcharge % Material;Decimal       ;CaptionML=[ENU=Surcharge % Material;
                                                              NOR=Tilleggsgebyrsprosent, Materiale;
                                                              SVE=Till„ggsavgiftsprocent, material] }
    { 490 ;   ;Surcharge % Subcontr.;Decimal      ;CaptionML=[ENU=Surcharge % Subcontracting;
                                                              NOR=Tilleggsgebyrsprosent, underentrepen›r;
                                                              SVE=Till„ggsavgiftsprocent, underentreprenad] }
    { 500 ;   ;Surcharge % Plant   ;Decimal       ;CaptionML=[ENU=Surcharge % Plant;
                                                              NOR=Tilleggsgebyrsprosent, maskin;
                                                              SVE=Till„ggsavgiftsprocent, Maskin] }
    { 600 ;   ;Surcharge % Sundry  ;Decimal       ;CaptionML=[ENU=Surcharge % Sundry;
                                                              NOR=P†slagssatser, diverse;
                                                              SVE=Till„ggsavgiftsprocent, diverse] }
    { 620 ;   ;Invoice Installment ;Option        ;CaptionML=[ENU=Invoice Installment;
                                                              NOR=Faktura, betalingsplan;
                                                              SVE=Betalplansfaktura];
                                                   OptionCaptionML=[ENU=Forehand,Afterwards;
                                                                    NOR=P† f†rh†nd,Etterp†;
                                                                    SVE=F”rhand,Efter†t];
                                                   OptionString=Forehand,Afterwards }
    { 630 ;   ;Invoice Text Installments;Text250  ;CaptionML=[ENU=Invoice Text Installments;
                                                              NOR=Fakturatekst, avdrag;
                                                              SVE=Fakturatext, avbetalningar] }
    { 640 ;   ;Service Package Contract;Code10    ;TableRelation="Service Package" WHERE (Source Type=CONST(Contract));
                                                   CaptionML=[ENU=Service Package Contract;
                                                              NOR=Servicepakke, Kontrakt;
                                                              SVE=Servicepaket, kontrakt] }
    { 641 ;   ;Service Package Call;Code10        ;TableRelation="Service Package" WHERE (Source Type=CONST(Call));
                                                   CaptionML=[ENU=Service Package Call;
                                                              NOR=Servicepakke, Samtale;
                                                              SVE=Servicepaket, samtal] }
    { 642 ;   ;Service Package Other;Code10       ;TableRelation="Service Package" WHERE (Source Type=CONST(Direct));
                                                   CaptionML=[ENU=Service Package Other;
                                                              NOR=Servicepakke, Annet;
                                                              SVE=Servicepaket, annat] }
    { 643 ;   ;Service Package Estimate;Code10    ;TableRelation="Service Package" WHERE (Source Type=CONST(Estimate));
                                                   CaptionML=[ENU=Service Package Estimate;
                                                              NOR=Servicepakke, Kalkyle;
                                                              SVE=Servicepaket, kalkyl] }
    { 649 ;   ;Service Package     ;Code10        ;TableRelation="Service Package" WHERE (Source Type=CONST(None));
                                                   OnValidate=VAR
                                                                ServicePackage@1100525000 : Record 11012806;
                                                              BEGIN
                                                                IF ServicePackage.GET("Service Package") THEN BEGIN
                                                                  VALIDATE("Service Package Call", ServicePackage."Service Package Call");
                                                                  VALIDATE("Service Package Contract", ServicePackage."Service Package Contract");
                                                                  VALIDATE("Service Package Other", ServicePackage."Service Package Direct");
                                                                  VALIDATE("Service Package Estimate", ServicePackage."Service Package Estimate");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Service Package;
                                                              NOR=Servicepakke;
                                                              SVE=Servicepaket] }
    { 750 ;   ;Invoice Base Amount Labor;Decimal  ;OnValidate=BEGIN
                                                                VALIDATE("Invoice Base Amount Total", "Invoice Base Amount Labor" + "Invoice Base Amount Material");
                                                              END;

                                                   CaptionML=[ENU=Invoice Base Amount Labor;
                                                              NOR=Faktura, Grunnbel›p for arbeidskraft;
                                                              SVE=Faktura, basbelopp f”r arbetskraft];
                                                   AutoFormatType=1 }
    { 751 ;   ;Invoice Base Hours  ;Decimal       ;CaptionML=[ENU=Invoice Base Hours;
                                                              NOR=Faktura, Grunntimer;
                                                              SVE=Faktura, bastimmar];
                                                   DecimalPlaces=2:5 }
    { 752 ;   ;Invoice Base Amount Material;Decimal;
                                                   OnValidate=BEGIN
                                                                VALIDATE("Invoice Base Amount Total", "Invoice Base Amount Labor" + "Invoice Base Amount Material");
                                                              END;

                                                   CaptionML=[ENU=Invoice Base Amount Material;
                                                              NOR=Faktura, Grunnbel›p for Materiale;
                                                              SVE=Faktura, basbelopp f”r material];
                                                   AutoFormatType=1 }
    { 755 ;   ;Invoice Base Amount Total;Decimal  ;OnValidate=BEGIN
                                                                IF ("Invoice Base Amount Labor" <> 0) OR ("Invoice Base Amount Material" <> 0) THEN
                                                                  TESTFIELD("Invoice Base Amount Total", "Invoice Base Amount Labor" + "Invoice Base Amount Material");
                                                              END;

                                                   CaptionML=[ENU=Invoice Base Amount Total;
                                                              NOR=Faktura, Totalt Grunnbel›p;
                                                              SVE=Faktura, totalt basbelopp];
                                                   AutoFormatType=1 }
    { 760 ;   ;Invoice Base Method ;Option        ;OnValidate=BEGIN
                                                                IF "Invoice Base Method" = "Invoice Base Method"::" " THEN BEGIN
                                                                  "Invoice Base Amount Labor" := 0;
                                                                  "Invoice Base Hours" := 0;
                                                                  "Invoice Base Amount Material" := 0;
                                                                  "Invoice Base Amount Total" := 0;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Invoice Base Method;
                                                              NOR=Faktura, Grunnmetode;
                                                              SVE=Faktura, basmetod];
                                                   OptionCaptionML=[ENU=" ,Total Service Order - Invoice Base Amount,Invoice Base Amount if exceeding Total Service Order";
                                                                    NOR=" ,Total Serviceordre Í Grunnbel›p for faktura,Grunnbel›p for faktura hvis det overstiger Total serviceordre";
                                                                    SVE=" ,Total serviceorder Í fakturabasbelopp,Faktura basbelopp vid ”verskridande av total serviceorder"];
                                                   OptionString=[ ,total-base,base] }
    { 769 ;   ;Department Code (Other);Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ServSetup.GET;
                                                                IF ServSetup."Copy Additional Cost Setup" THEN
                                                                   TESTFIELD("Department Code (Other)", "Global Dimension 1 Code");

                                                                ValidateShortcutDimCode(1, "Department Code (Other)");
                                                              END;

                                                   CaptionML=[ENU=Department (Additional Cost);
                                                              NOR=Avdeling (Tilleggskoster);
                                                              SVE=Avdelning (till„ggskostnader)] }
    { 770 ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Global Dimension 1 Code");
                                                              END;

                                                   CaptionML=[ENU=Global Dimension 1 Code;
                                                              NOR=Global dimensjon 1 kode;
                                                              SVE=Global dimension 1 kod];
                                                   CaptionClass='1,1,1' }
    { 810 ;   ;Preferred Employee OBS;Code20      ;TableRelation="Resource (WOP)" WHERE (Type=CONST(Employee));
                                                   CaptionML=ENU=Preferred Employee OBSOLETE;
                                                   Description=OBSOLETE;
                                                   Editable=No }
    { 1090;   ;Send Mail Status Update;Boolean    ;CaptionML=[ENU=Send Mail at Status update;
                                                              NOR=Send e-post ved statusoppdatering;
                                                              SVE=Skicka e-post vid statusuppdatering] }
    { 1095;   ;Send Mail Work Sheet;Boolean       ;CaptionML=[ENU=Send Mail Work Sheet;
                                                              NOR=Send e-post regneark;
                                                              SVE=Skicka e-postkalkylblad] }
    { 1216;   ;Start Date Cntrl Period on 1/1;Boolean;
                                                   CaptionML=[ENU=Start Date Control Period on 1/1;
                                                              SVE=Startdatum kontrollperiod 1/1];
                                                   Description=SERV_CONS }
    { 1240;   ;Invoice Type        ;Option        ;OnValidate=BEGIN
                                                                IF xRec."Invoice Type" <> "Invoice Type" THEN BEGIN
                                                                  CASE "Invoice Type" OF
                                                                    "Invoice Type"::Dynamic: BEGIN
                                                                      "Dynamic Invoice Type" := "Dynamic Invoice Type"::Days;
                                                                      CLEAR("Installment Type");
                                                                    END;
                                                                    "Invoice Type"::Installments: BEGIN
                                                                      CLEAR("Invoice Interval");
                                                                      CLEAR("Dynamic Invoice Type");
                                                                      "Installment Type" := "Installment Type"::Contract;
                                                                    END;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Invoice Type;
                                                              NOR=Fakturatype;
                                                              SVE=Fakturatyp];
                                                   OptionCaptionML=[ENU=Dynamic,Installments;
                                                                    NOR=Dynamisk,Avdrag;
                                                                    SVE=Dynamisk,Betalplaner];
                                                   OptionString=Dynamic,Installments;
                                                   Description=SERV_CONS }
    { 1250;   ;Contract Limit      ;Option        ;OnValidate=BEGIN
                                                                IF (xRec."Contract Limit" <> "Contract Limit") AND ("Contract Limit" = "Contract Limit"::Unlimited) THEN
                                                                  CLEAR("Contract Duration");
                                                              END;

                                                   CaptionML=[ENU=Contract Limit;
                                                              NOR=Kontraktgrense;
                                                              SVE=Kontraktgr„ns];
                                                   OptionCaptionML=[ENU=Limited,Unlimited;
                                                                    NOR=Begrenset,Ubegrenset;
                                                                    SVE=Begr„nsad,obegr„nsad];
                                                   OptionString=Limited,Unlimited;
                                                   Description=SERV_CONS }
    { 1280;   ;Invoice Interval    ;DateFormula   ;CaptionML=[ENU=Invoice Interval;
                                                              NOR=Faktureringsintervall;
                                                              SVE=Faktureringsintervall];
                                                   Description=SERV_CONS }
    { 1310;   ;Control Period Interval;DateFormula;CaptionML=[ENU=Control Period Interval;
                                                              NOR=Kontrollperiodeintervall;
                                                              SVE=Kontrollperiodsintervall];
                                                   Description=SERV_CONS }
    { 1320;   ;Calculate Travel Costs;Option      ;CaptionML=[ENU=Calculate Travel Costs;
                                                              NOR=Kalkuler reisekostnader;
                                                              SVE=Ber„kna reskostnader];
                                                   OptionCaptionML=[ENU=" ,Travel Cost,Travel Distance and Time";
                                                                    NOR=" ,Reisekostnader,Reisedistanse og tid";
                                                                    SVE=" ,Resekostnad,Resstr„cka och tid"];
                                                   OptionString=[ ,Travel Cost,Travel Distance+Time];
                                                   Description=SERV_CONS }
    { 1330;   ;Calc. Field Serv. Travel Costs;Boolean;
                                                   CaptionML=[ENU=Calculate Field Service Travel Costs;
                                                              NOR=Kalkuler reisekostnader for feltservice;
                                                              SVE=Ber„kna f„ltservicereskostnader];
                                                   Description=SERV_CONS }
    { 1340;   ;Control Reference Date;Date        ;OnValidate=BEGIN
                                                                IF "Control Reference Date" <> 0D THEN BEGIN
                                                                  TESTFIELD("Number of Control Ref. Periods", 0);
                                                                  ServSetup.GET;
                                                                  ServSetup.TESTFIELD("Service Control Method", ServSetup."Service Control Method"::"Real-Time");
                                                                END;
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Control Reference Date }
    { 1350;   ;Number of Control Ref. Periods;Integer;
                                                   OnValidate=BEGIN
                                                                IF "Number of Control Ref. Periods" > 0 THEN BEGIN
                                                                  TESTFIELD("Control Reference Date", 0D);
                                                                  ServSetup.GET;
                                                                  ServSetup.TESTFIELD("Service Control Method", ServSetup."Service Control Method"::"Real-Time");
                                                                END;
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Number of Control Reference Periods;
                                                   MinValue=0;
                                                   BlankZero=Yes }
    { 1430;   ;Publish on Service Portal;Boolean  ;CaptionML=[ENU=Publish on Service Portal;
                                                              NOR=Publiser p† Serviceportal;
                                                              SVE=Publicera p† serviceportalen] }
    { 1440;   ;Invoicing via Collective List;Boolean;
                                                   OnValidate=BEGIN
                                                                IF "Invoicing via Collective List" THEN
                                                                  IF "Invoice Type" = "Invoice Type"::Dynamic THEN
                                                                    TESTFIELD("Invoice Interval");
                                                              END;

                                                   CaptionML=[ENU=Invoicing via Collective List;
                                                              NOR=Fakturering via samlingsfaktura;
                                                              SVE=Fakturering via samlingsfaktura] }
    { 1450;   ;Service Index Method;Code10        ;TableRelation="Service Index Method";
                                                   CaptionML=[ENU=Index Method;
                                                              NOR=Indeksmetode;
                                                              SVE=Index metod] }
    { 1460;   ;Plan Method         ;Option        ;CaptionML=[ENU=Plan Method;
                                                              NOR=Planlegg Metode;
                                                              SVE=Planmetod];
                                                   OptionCaptionML=[ENU=Theoretical Maintenance Date,Last Execution Date;
                                                                    NOR=Teoretisk Vedlikeholdsdato, Siste Gjennomf›ringsdato];
                                                   OptionString=Theoretical Maintenance Date,Last Execution Date }
    { 1470;   ;Contract Type       ;Code10        ;TableRelation="Contract Type";
                                                   CaptionML=[ENU=Contract Type;
                                                              NOR=Kontraktstype;
                                                              SVE=Kontraktstyp] }
    { 1490;   ;Contract Form       ;Option        ;CaptionML=[ENU=Contract Form;
                                                              NOR=Kontraktsskjema];
                                                   OptionCaptionML=[ENU=" ,Framework Contract,Rental Contract";
                                                                    NOR=" ,Rammeverkskontrakt,Utleiekontrakt"];
                                                   OptionString=[ ,Framework Contract,Rental Contract] }
    { 1530;   ;Use Contract Clusters;Boolean      ;OnValidate=VAR
                                                                ServiceCluster@1100528600 : Record 11071742;
                                                              BEGIN
                                                                IF xRec."Use Contract Clusters" <> "Use Contract Clusters" THEN BEGIN
                                                                  IF NOT "Use Contract Clusters" THEN BEGIN
                                                                    ServiceCluster.SETRANGE(Type, ServiceCluster.Type::Template);
                                                                    ServiceCluster.SETRANGE("Type Code", Code);
                                                                    ServiceCluster.SETRANGE("Source Type", ServiceCluster."Source Type"::" ");
                                                                    IF NOT ServiceCluster.ISEMPTY THEN
                                                                      ERROR(Text001);
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Use Contract Clusters }
    { 1540;   ;Cluster             ;Code20        ;TableRelation=IF (Use Contract Clusters=CONST(No)) "Service Cluster".Code WHERE (Type=CONST(" "),
                                                                                                                                    Source Type=CONST(" "))
                                                                                                                                    ELSE IF (Use Contract Clusters=CONST(Yes)) "Service Cluster".Code WHERE (Type=CONST(Template),
                                                                                                                                                                                                             Source Type=CONST(" "));
                                                   OnValidate=BEGIN
                                                                ValidateServiceCluster;
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupServiceCluster;
                                                            END;

                                                   CaptionML=[ENU=Cluster;
                                                              NOR=Klynge;
                                                              SVE=Kluster] }
    { 1550;   ;Installment Type    ;Option        ;OnValidate=BEGIN
                                                                IF "Installment Type" = "Installment Type"::" " THEN
                                                                  TESTFIELD("Invoice Type", "Invoice Type"::Dynamic);
                                                              END;

                                                   CaptionML=[ENU=Installment Type;
                                                              NOR=Betalingsplanstype;
                                                              SVE=Betalplanstyp];
                                                   OptionCaptionML=ENU=" ,Contract,Object";
                                                   OptionString=[ ,Contract,Object] }
    { 1590;   ;Dynamic Invoice Type;Option        ;OnValidate=BEGIN
                                                                IF "Dynamic Invoice Type" <> "Dynamic Invoice Type"::" " THEN
                                                                  TESTFIELD("Invoice Type", "Invoice Type"::Dynamic)
                                                                ELSE
                                                                  FIELDERROR("Dynamic Invoice Type");
                                                                IF "Dynamic Invoice Type" = "Dynamic Invoice Type"::"Invoice Interval" THEN
                                                                  TESTFIELD("Invoice Interval");
                                                              END;

                                                   CaptionML=ENU=Dynamic Invoice Type;
                                                   OptionCaptionML=ENU=" ,Days,Invoice Interval";
                                                   OptionString=[ ,Days,Invoice Interval] }
    { 1600;   ;OLD Allow Prem. Closing Order;Boolean;
                                                   CaptionML=ENU=OLD Allow Premature Closing Order }
    { 1601;   ;Always Allow Cls Ord. (Maint.);Boolean;
                                                   CaptionML=ENU=Always Close Orders (Maint.) }
    { 1602;   ;Always Allow Cls Ord. (Call);Boolean;
                                                   CaptionML=ENU=Always Close Orders (Call) }
    { 1603;   ;Always Allow Cls Ord. (Ext.);Boolean;
                                                   CaptionML=ENU=Always Close Orders (Extension) }
    { 1610;   ;Calc. Progress Perc. Progn/Res;Option;
                                                   OnValidate=VAR
                                                                ServiceCategoryTemplate@1100528600 : Record 11071997;
                                                                ServiceSetup@1100528601 : Record 11012800;
                                                              BEGIN
                                                                IF "Calc. Progress Perc. Progn/Res" IN ["Calc. Progress Perc. Progn/Res"::"Allowed Hours", "Calc. Progress Perc. Progn/Res"::"Allowed Cost"] THEN
                                                                  TESTFIELD("Budget Based on", "Budget Based on"::"Maintenance Scheme");
                                                                IF NOT ("Calc. Progress Perc. Progn/Res" IN ["Calc. Progress Perc. Progn/Res"::"Actual Cost", "Calc. Progress Perc. Progn/Res"::"Elapsed Time"]) THEN
                                                                  TESTFIELD("Result Calc. on Total Contract", FALSE);
                                                                ServiceSetup.GET;
                                                                ServiceCategoryTemplate.SETRANGE("Service Contract Template Code", Code);
                                                                IF NOT ServiceCategoryTemplate.ISEMPTY AND (ServiceSetup."Service Control Method" = ServiceSetup."Service Control Method"::"Real-Time") THEN
                                                                  MESSAGE(Text002, "Calc. Progress Perc. Progn/Res");
                                                                IF "Calc. Progress Perc. Progn/Res" > "Calc. Progress Perc. Progn/Res"::"Elapsed Time" THEN
                                                                  ServiceSetup.TESTFIELD("Service Control Method", ServiceSetup."Service Control Method"::"Real-Time");
                                                                TestProgressMethodvsProgressMeasurement("Calc. Progress Perc. Progn/Res", "Level Progress Measurement");
                                                              END;

                                                   CaptionML=ENU=Calculation Progress Perc. Prognosis/Preclosure Result;
                                                   OptionCaptionML=ENU=Allowed Hours,,,Actual Cost,Elapsed Time,,Available Hours,,Allowed Cost,,Available Cost,,None;
                                                   OptionString=Allowed Hours,,,Actual Cost,Elapsed Time,,Available Hours,,Allowed Cost,,Available Cost,,None }
    { 1620;   ;Payment Method Code (Con.Inv.);Code10;
                                                   TableRelation="Payment Method";
                                                   CaptionML=[ENU=Payment Method Code;
                                                              NOR=Betalingsm†te - kode;
                                                              SVE=Betalningss„tt] }
    { 1630;   ;Travel Cost Code    ;Code10        ;TableRelation="Travel Cost Code";
                                                   CaptionML=[ENU=Travel Cost Code;
                                                              NOR=Reisekostkode;
                                                              SVE=Resekostnadskod] }
    { 1640;   ;Budget Based on     ;Option        ;OnValidate=VAR
                                                                ServiceCategoryTemplate@1100528600 : Record 11071997;
                                                              BEGIN
                                                                IF "Budget Based on" = "Budget Based on"::"Maintenance Scheme" THEN BEGIN
                                                                  TESTFIELD("Service Category (Call)", '');
                                                                  TESTFIELD("Service Category (Direct)", '');
                                                                  ServiceCategoryTemplate.SETRANGE("Service Contract Template Code", Code);
                                                                  IF NOT ServiceCategoryTemplate.ISEMPTY THEN
                                                                    FIELDERROR("Budget Based on", STRSUBSTNO(Text000, ServiceCategoryTemplate.TABLECAPTION));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Budget Based on;
                                                              SVE=Budget baserat p†];
                                                   OptionCaptionML=ENU=Maintenance Scheme,Category,Category + Maintenance Scheme;
                                                   OptionString=Maintenance Scheme,Category,Category + Maintenance Scheme }
    { 1650;   ;Service Category (Call);Code10     ;TableRelation="Service Category Template".Code WHERE (Service Contract Template Code=FIELD(Code));
                                                   CaptionML=ENU=Service Category (Call) }
    { 1660;   ;Service Category (Direct);Code10   ;TableRelation="Service Category Template".Code WHERE (Service Contract Template Code=FIELD(Code));
                                                   CaptionML=ENU=Service Category (Direct) }
    { 1680;   ;Compress Dyn. Inv. Prop. Lines;Boolean;
                                                   CaptionML=ENU=Compress Dyn. Inv. Prop. Lines }
    { 1690;   ;Create Adv./Purch. Subc. Call;Option;
                                                   CaptionML=ENU=Create Advice/Purchase Order with Subcontracting (Call);
                                                   OptionCaptionML=ENU=User Setup,Yes,No;
                                                   OptionString=Setup,Yes,No }
    { 1691;   ;Create Adv./Purch. Subc. Con.;Option;
                                                   CaptionML=ENU=Create Advice/Purchase Order with Subcontracting (Contract);
                                                   OptionCaptionML=ENU=User Setup,Yes,No;
                                                   OptionString=Setup,Yes,No }
    { 1692;   ;Create Adv./Purch. Subc. Dir.;Option;
                                                   CaptionML=ENU=Create Advice/Purchase Order with Subcontracting (Direct);
                                                   OptionCaptionML=ENU=User Setup,Yes,No;
                                                   OptionString=Setup,Yes,No }
    { 1810;   ;Price Book Type     ;Option        ;OnValidate=BEGIN
                                                                IF "Price Book Type" <> xRec."Price Book Type" THEN
                                                                  VALIDATE("Price Book Code", '');
                                                              END;

                                                   CaptionML=[ENU=Price Book Type;
                                                              SVE=Enhetspristyp];
                                                   OptionCaptionML=[ENU=None,Internal,Customer;
                                                                    NOR=Ingen,Intern,Kunde);
                                                                    SVE=Inget,Internt,Kund];
                                                   OptionString=None,Internal,Customer }
    { 1820;   ;Price Book Code     ;Code20        ;TableRelation="Service Price Book".Code WHERE (Type=FIELD(Price Book Type));
                                                   OnValidate=BEGIN
                                                                IF ("Price Book Code" = '') OR ("Price Book Code" <> xRec."Price Book Code") THEN BEGIN
                                                                  VALIDATE("Price Book Index Date", 0D);
                                                                  VALIDATE("Unit Price Set", '');
                                                                  VALIDATE("Unit Price Status", "Unit Price Status"::" ");
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              ServicePriceBook@1100528600 : Record 11071768;
                                                              ServicePriceBookList@1100528601 : Page 11125269;
                                                            BEGIN
                                                              ServicePriceBook.SETRANGE(Type, "Price Book Type");
                                                              ServicePriceBookList.LOOKUPMODE(TRUE);
                                                              ServicePriceBookList.SETTABLEVIEW(ServicePriceBook);
                                                              IF ServicePriceBookList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                                ServicePriceBookList.GETRECORD(ServicePriceBook);
                                                                "Price Book Code" := ServicePriceBook.Code;
                                                                "Price Book Index Date" := ServicePriceBook."Index Date";
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Price Book Code;
                                                              SVE=Enhetspriskod] }
    { 1830;   ;Price Book Index Date;Date         ;TableRelation="Service Price Book"."Index Date" WHERE (Code=FIELD(Price Book Code));
                                                   OnValidate=BEGIN
                                                                IF "Price Book Index Date" <> 0D THEN
                                                                  IF "Price Book Type" = "Price Book Type"::None THEN
                                                                    FIELDERROR("Price Book Index Date");
                                                              END;

                                                   CaptionML=[ENU=Price Book Index Date;
                                                              SVE=Indexdatum f”r enhetspris] }
    { 1840;   ;Unit Price Set      ;Code20        ;TableRelation="Service Unit Price Set".Code WHERE (Price Book Type=FIELD(Price Book Type),
                                                                                                      Price Book Code=FIELD(Price Book Code),
                                                                                                      Price Book Index Date=FIELD(Price Book Index Date));
                                                   CaptionML=[ENU=Unit Price Set;
                                                              SVE=A-pris grupp] }
    { 1850;   ;Unit Price Status   ;Option        ;OnValidate=BEGIN
                                                                IF "Unit Price Status" <> "Unit Price Status"::" " THEN
                                                                  IF "Price Book Type" = "Price Book Type"::None THEN
                                                                    FIELDERROR("Unit Price Status");
                                                              END;

                                                   CaptionML=[ENU=Unit Price Status;
                                                              NOR=Enhetspris, status;
                                                              SVE=Enhetsprisstatus];
                                                   OptionCaptionML=ENU=" ,Pre-Recording,Recording,Production Recording";
                                                   OptionString=[ ,Pre-Recording,Recording,Production Recording] }
    { 1880;   ;Level Progress Measurement;Option  ;OnValidate=VAR
                                                                ServiceCategoryTemplate@1100528600 : Record 11071997;
                                                              BEGIN
                                                                IF "Level Progress Measurement" = "Level Progress Measurement"::"Service Category" THEN
                                                                  IF NOT ("Budget Based on" IN ["Budget Based on"::Category, "Budget Based on"::"Category + Maintenance Scheme"]) THEN
                                                                    FIELDERROR("Budget Based on");
                                                                TestProgressMethodvsProgressMeasurement("Calc. Progress Perc. Progn/Res", "Level Progress Measurement");
                                                                IF "Budget Based on" IN ["Budget Based on"::Category, "Budget Based on"::"Category + Maintenance Scheme"] THEN BEGIN
                                                                  ServiceCategoryTemplate.SETRANGE("Service Contract Template Code", Code);
                                                                  IF ServiceCategoryTemplate.FINDSET THEN
                                                                    REPEAT
                                                                      TestProgressMethodvsProgressMeasurement(ServiceCategoryTemplate."Calc. Progress Perc. Progn/Res", "Level Progress Measurement");
                                                                    UNTIL ServiceCategoryTemplate.NEXT = 0;
                                                                END;
                                                                IF "Level Progress Measurement" <> "Level Progress Measurement"::"Service Category" THEN BEGIN
                                                                  ServiceCategoryTemplate.SETRANGE("Service Contract Template Code", Code);
                                                                  ServiceCategoryTemplate.SETRANGE("Calc. Interim Results by Order", TRUE);
                                                                  IF ServiceCategoryTemplate.FINDFIRST THEN
                                                                    ServiceCategoryTemplate.TESTFIELD("Calc. Interim Results by Order", FALSE);
                                                                END;
                                                                IF "Level Progress Measurement" <> "Level Progress Measurement"::Period THEN
                                                                  TESTFIELD("Result Calc. on Total Contract", FALSE);
                                                              END;

                                                   CaptionML=ENU=Level Progress Measurement;
                                                   OptionCaptionML=ENU=Period,Service Category,Source Type;
                                                   OptionString=Period,Service Category,Source Type }
    { 1950;   ;Rest of Contract    ;Boolean       ;OnValidate=BEGIN
                                                                IF "Rest of Contract" THEN
                                                                  TESTFIELD("Contract Duration")
                                                                ELSE
                                                                  TESTFIELD("Result Calc. on Total Contract", FALSE);
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Rest of Contract }
    { 1970;   ;Result Calc. on Total Contract;Boolean;
                                                   OnValidate=BEGIN
                                                                IF "Result Calc. on Total Contract" THEN BEGIN
                                                                  TESTFIELD("Contract Limit", "Contract Limit"::Limited);
                                                                  TESTFIELD("Level Progress Measurement", "Level Progress Measurement"::Period);
                                                                  TESTFIELD("Rest of Contract", TRUE);
                                                                  IF NOT ("Calc. Progress Perc. Progn/Res" IN ["Calc. Progress Perc. Progn/Res"::"Actual Cost", "Calc. Progress Perc. Progn/Res"::"Elapsed Time"]) THEN
                                                                    FIELDERROR("Calc. Progress Perc. Progn/Res");
                                                                END;
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Result Calc. on Total Contract }
    { 1980;   ;Control Details     ;Option        ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Control Details;
                                                   OptionCaptionML=ENU=Source Type,Cost Type/Cost Object;
                                                   OptionString=Source Type,Cost Type/Cost Object }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ServSetup@1100528600 : Record 11012800;
      ServTypeRec@1100528601 : Record 11012814;
      Text000@1100528602 : TextConst 'ENU=%1 lines exist;SVE=Vill du uppdatera raderna?';
      Text001@1100528603 : TextConst 'ENU=Contract Template contains Clusters';
      Text002@1100528604 : TextConst 'ENU=You have changed %1 on the template header, but it has not been changed on the existing service categories.';
      Text003@1100528605 : TextConst 'ENU="Combination of %1=%2 and %3=%4 not allowed"';

    PROCEDURE AssistEdit@2(OldServiceContractTemplate@11012000 : Record 11071754) : Boolean;
    VAR
      ServiceContractTemplate@1100525000 : Record 11071754;
      NoSeriesMgt@1100528600 : Codeunit 396;
    BEGIN
      WITH ServiceContractTemplate DO BEGIN
        ServiceContractTemplate := Rec;
        ServSetup.GET;
        ServSetup.TESTFIELD("Service Contract Nos.");
        IF NoSeriesMgt.SelectSeries(ServSetup."Service Contract Nos.", OldServiceContractTemplate."No. Series", "No. Series") THEN BEGIN
      //    NoSeriesMgt.SetSeries("No.");
          Rec := ServiceContractTemplate;
          EXIT(TRUE);
        END;
      END;
    END;

    PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    VAR
      DimMgt@1100525000 : Codeunit 408;
      DimValRec@1100525001 : Record 349;
    BEGIN
      //db, 19-08-09: M15896
      IF ShortcutDimCode = '' THEN
        EXIT;
      DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
      DimMgt.GetDimValueRec(FieldNumber, ShortcutDimCode, DimValRec, TRUE,'');
      IF NOT DimMgt.CheckDimValue(DimValRec."Dimension Code",ShortcutDimCode) THEN
        ERROR(DimMgt.GetDimErr);
    END;

    PROCEDURE ValidateServiceCluster@1100528606();
    VAR
      ServiceCluster@1100528600 : Record 11071742;
    BEGIN
      IF Cluster <> '' THEN BEGIN
        IF "Use Contract Clusters" THEN
          ServiceCluster.GET(ServiceCluster.Type::Template, Code, ServiceCluster."Source Type"::" ", Cluster)
        ELSE
          ServiceCluster.GET(ServiceCluster.Type::" ", '', ServiceCluster."Source Type"::" ", Cluster);
      END;
    END;

    PROCEDURE LookupServiceCluster@1100528605();
    VAR
      ServiceCluster@1100528601 : Record 11071742;
    BEGIN
      IF "Use Contract Clusters" THEN BEGIN
        ServiceCluster.SETRANGE(Type, ServiceCluster.Type::Template);
        ServiceCluster.SETRANGE("Type Code", Code);
        ServiceCluster.SETRANGE("Source Type", ServiceCluster."Source Type"::" ");
        IF Cluster <> '' THEN
          ServiceCluster.GET(ServiceCluster.Type::Template, Code, ServiceCluster."Source Type"::" ", Cluster);
      END ELSE BEGIN
        ServiceCluster.SETRANGE(Type, ServiceCluster.Type::" ");
        ServiceCluster.SETRANGE("Type Code", '');
        ServiceCluster.SETRANGE("Source Type", ServiceCluster."Source Type"::" ");
        IF Cluster <> '' THEN
          ServiceCluster.GET(ServiceCluster.Type::" ", '', ServiceCluster."Source Type"::" ", Cluster);
      END;
      IF PAGE.RUNMODAL(0, ServiceCluster) = ACTION::LookupOK THEN
        VALIDATE(Cluster, ServiceCluster.Code);
    END;

    PROCEDURE TestProgressMethodvsProgressMeasurement@1100528612(IProgressMethod@1100528600 : 'Allowed Hours,,,Actual Cost,Elapsed Time,,Available Hours,,Allowed Cost,,Available Cost,,None';ILevelProgressMeasurement@1100528601 : 'Period,Service Category,Source Type');
    VAR
      TmpServiceContractTemplate@1100528602 : TEMPORARY Record 11071754;
    BEGIN
      CASE ILevelProgressMeasurement OF
        ILevelProgressMeasurement::Period,
        ILevelProgressMeasurement::"Service Category":
          IF IProgressMethod IN [IProgressMethod::"Actual Cost", IProgressMethod::"Elapsed Time", IProgressMethod::None] THEN
            EXIT;
        ILevelProgressMeasurement::"Source Type":
          EXIT;
      END;
      TmpServiceContractTemplate."Calc. Progress Perc. Progn/Res" := IProgressMethod;
      TmpServiceContractTemplate."Level Progress Measurement" := ILevelProgressMeasurement;
      ERROR(Text003,
        TmpServiceContractTemplate.FIELDCAPTION("Calc. Progress Perc. Progn/Res"), TmpServiceContractTemplate."Calc. Progress Perc. Progn/Res",
        TmpServiceContractTemplate.FIELDCAPTION("Level Progress Measurement"), TmpServiceContractTemplate."Level Progress Measurement");
    END;

    BEGIN
    END.
  }
}

