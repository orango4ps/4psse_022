OBJECT Codeunit 12013626 ExFlow File Mgt. RTC Client
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EXF502000;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text006@1100285018 : TextConst 'ENU=Export;SVE=Exportera';
      Text007@1100285017 : TextConst 'ENU=Import;SVE=Importera';
      Text009@1100285016 : TextConst 'ENU=All Files (*.*)|*.*;SVE=Alla filer (*.*)|*.*';
      Text11200@1100285015 : TextConst 'ENU=The %1 file already exists. \Do you want to replace the existing file?;SVE=Filen %1 finns redan.\Vill du ers„tta den befintliga filen?';
      EXF51@1100285004 : TextConst 'ENU=The source document %1%2 does not exist.;SVE=Ursprungsdokumentet %1%2 finns ej.';
      EXF52@1100285003 : TextConst 'ENU=The destination document %1%2 could not be created.;SVE=M†ldokumentet %1%2 kan ej skapas.';
      ServerFileHelper@1100285006 : DotNet "'mscorlib'.System.IO.File";
      ClientFileHelper@1100285007 : DotNet "'mscorlib'.System.IO.File" RUNONCLIENT;
      ServerDirectoryHelper@1100285000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Directory";
      ClientDirectoryHelper@1100285005 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Directory" RUNONCLIENT;
      ClientTempPath@1100285021 : Text;
      EXF61@1100285023 : TextConst 'ENU=Can not connect to your AD please contact your IT department;SVE=Kan ej ansluta till er AD server, var v„nligt kontakta IT';
      EXF62@1100285025 : TextConst 'ENU=Can not access %1;SVE=Kan inte komma †t %1';
      EXF63@1100285001 : TextConst 'ENU=Trying to connect and retrieve data from your AD.....;SVE=F”rs”ker kontakta och h„mta data fr†n ert AD....';
      EXF64@1100285002 : TextConst 'ENU=Source file does not exist;SVE=Ursprungsfil saknas';

    PROCEDURE Move@1100285001(FromFile@1100285000 : Text;ToFile@1100285001 : Text;FromFolder@1100285002 : Text;ToFolder@1100285003 : Text;RootFolder@1100285004 : Text) ReturnTxt : Text;
    VAR
      FileAccessFromValue@1100285005 : Integer;
    BEGIN
      // Move function does not overwrite existing files
      // This causes problems in some cases, therefore using
      // copy function together with delete

      IF NOT FolderExist(ToFolder) THEN
        NewFolder(ToFolder,RootFolder);

      IF COPYSTR(FromFolder,STRLEN(FromFolder),1) <> '\' THEN
        FromFolder := FromFolder + '\';

      IF COPYSTR(ToFolder,STRLEN(ToFolder),1) <> '\' THEN
        ToFolder := ToFolder + '\';

      FileAccessFromValue := FileAccessFrom(FromFolder + FromFile);
      IF FileAccessFromValue = 0 THEN BEGIN
        ReturnTxt := STRSUBSTNO(EXF51,FromFolder,FromFile);
        EXIT;
      END;

      // Source from client
      IF FileAccessFromValue = 2 THEN BEGIN
        CASE FolderAccessFromTo(FromFolder,ToFolder) OF
          1 : ClientFileHelper.Copy(FromFolder + FromFile, ToFolder + ToFile, TRUE);
          2 : ClientFileHelper.Copy(FromFolder + FromFile, ToFolder + ToFile, TRUE);
          3 : CopyFileClientToServer(FromFile, ToFile, FromFolder,ToFolder);
          4 : CopyFileClientToServer(FromFile, ToFile, FromFolder,ToFolder);
        END;
      END ELSE
        CASE FolderAccessFromTo(FromFolder,ToFolder) OF
          1 : ServerFileHelper.Copy(FromFolder + FromFile, ToFolder + ToFile, TRUE);
          2 : ClientFileHelper.Copy(FromFolder + FromFile, ToFolder + ToFile, TRUE);
          3 : CopyFileServerToClient(FromFile, ToFile, FromFolder,ToFolder);
          4 : CopyFileClientToServer(FromFile, ToFile, FromFolder,ToFolder);
        END;

      IF FileAccessFrom(ToFolder + ToFile) = 0 THEN BEGIN
        ReturnTxt := STRSUBSTNO(EXF52,ToFolder,ToFile);
        EXIT;
      END ELSE BEGIN
        Delete(FromFolder,FromFile);
        ReturnTxt := '';
        EXIT;
      END;
    END;

    PROCEDURE Copy@1100285002(FromFile@1100285003 : Text;ToFile@1100285002 : Text;FromFolder@1100285001 : Text;ToFolder@1100285000 : Text;RootFolder@1100285004 : Text) ReturnTxt : Text;
    VAR
      FileAccessFromValue@1100285005 : Integer;
    BEGIN
      IF NOT FolderExist(ToFolder) THEN
        NewFolder(ToFolder,RootFolder);

      FileAccessFromValue := FileAccessFrom(FromFolder + FromFile);
      IF FileAccessFromValue = 0 THEN BEGIN
        ReturnTxt := STRSUBSTNO(EXF51,FromFolder,FromFile);
        EXIT;
      END;

      IF COPYSTR(FromFolder,STRLEN(FromFolder),1) <> '\' THEN
        FromFolder := FromFolder + '\';

      IF COPYSTR(ToFolder,STRLEN(ToFolder),1) <> '\' THEN
        ToFolder := ToFolder + '\';

      // Source from client
      IF FileAccessFromValue = 2 THEN BEGIN
        CASE FolderAccessFromTo(FromFolder,ToFolder) OF
          1 : ClientFileHelper.Copy(FromFolder + FromFile, ToFolder + ToFile, TRUE);
          2 : ClientFileHelper.Copy(FromFolder + FromFile, ToFolder + ToFile, TRUE);
          3 : CopyFileClientToServer(FromFile, ToFile, FromFolder,ToFolder);
          4 : CopyFileClientToServer(FromFile, ToFile, FromFolder,ToFolder);
        END;
      END
      ELSE
        CASE FolderAccessFromTo(FromFolder,ToFolder) OF
          1 : ServerFileHelper.Copy(FromFolder + FromFile, ToFolder + ToFile, TRUE);
          2 : ClientFileHelper.Copy(FromFolder + FromFile, ToFolder + ToFile, TRUE);
          3 : CopyFileServerToClient(FromFile, ToFile, FromFolder,ToFolder);
          4 : CopyFileClientToServer(FromFile, ToFile, FromFolder,ToFolder);
        END;

      IF FileAccessFrom(ToFolder + ToFile) = 0 THEN BEGIN
        ReturnTxt := STRSUBSTNO(EXF52,ToFolder,ToFile);
        EXIT;
      END ELSE BEGIN
        ReturnTxt := '';
        EXIT;
      END;
    END;

    PROCEDURE Delete@1100285048(Path@1100285000 : Text;FileName@1100285001 : Text);
    BEGIN
      CASE FileAccessFrom(Path+FileName) OF
        1 : ServerFileHelper.Delete(Path + FileName);
        2 : ClientFileHelper.Delete(Path + FileName);
      END;
    END;

    PROCEDURE FolderExist@1100285012(Path@1100285000 : Text) : Boolean;
    BEGIN
      CASE FolderAccessFrom(Path) OF
        1 : EXIT(TRUE);
        2 : EXIT(TRUE);
        0 : EXIT(FALSE);
      END;
    END;

    PROCEDURE FileExist@1100285013(Path@1100285000 : Text;FileName@1100285001 : Text) : Boolean;
    BEGIN
      IF COPYSTR(Path,STRLEN(Path),1) <> '\' THEN
        Path := Path + '\';

      CASE FileAccessFrom(Path+FileName) OF
        1 : EXIT(TRUE);
        2 : EXIT(TRUE);
        0 : EXIT(FALSE);
      END;
    END;

    PROCEDURE NewFolder@1100285010(FolderName@1100285000 : Text;RootFolder@1100285006 : Text) : Boolean;
    VAR
      FolderNameSub@1100285002 : Text[1024];
      TempFolder@1100285001 : Text[1024];
      AccessFrom@1100285003 : Integer;
    BEGIN
      IF NOT (COPYSTR(FolderName,STRLEN(FolderName)) = '\') THEN
        FolderName := FolderName + '\';
      IF NOT (COPYSTR(RootFolder,STRLEN(RootFolder)) = '\') THEN
        RootFolder := RootFolder + '\';
      FolderNameSub := COPYSTR(FolderName,STRLEN(RootFolder)+1);

      // Function does not support creation of rootfoolder due to it may generate permission issues.
      AccessFrom := FolderAccessFrom(RootFolder);
      IF AccessFrom = 0 THEN
        ERROR(EXF62,RootFolder);

      WHILE STRPOS(FolderNameSub,'\') <> 0 DO BEGIN
        TempFolder := COPYSTR(FolderNameSub,1,STRPOS(FolderNameSub,'\'));
        FolderNameSub := COPYSTR(FolderNameSub,STRLEN(TempFolder) + 1);

        // create folder for rootfolder + tempfolder
        RootFolder := RootFolder + TempFolder;
        CASE AccessFrom OF
          1 :
            IF NOT ServerDirectoryHelper.Exists(RootFolder) THEN
              ServerDirectoryHelper.CreateDirectory(RootFolder);
          2 :
            IF NOT ClientDirectoryHelper.Exists(RootFolder) THEN
              ClientDirectoryHelper.CreateDirectory(RootFolder);
        END;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE ShowDoc@1100285020(FileURL@1100285000 : Text);
    VAR
      TempFileName@1100285002 : Text;
      Name@1100285004 : Text;
    BEGIN
      TempFileName := ClientTempFileName(GetFileName(FileURL),'');

      IF ClientFileHelper.Exists(TempFileName) THEN
        ClientFileHelper.Delete(TempFileName);

      CASE FileAccessFrom(FileURL) OF
        1 :
          BEGIN
            Name := DownloadTempFile(FileURL);
            TempFileName := Path(Name) + GetFileName(FileURL);
            ClientFileHelper.Copy(Name,TempFileName);
          END;
        2 : ClientFileHelper.Copy(FileURL,TempFileName);
        0 : ERROR(EXF62,FileURL);
      END;
      HYPERLINK(TempFileName);
    END;

    PROCEDURE SelectFolder@1100285028(VAR FolderTxt@1100285000 : Text);
    VAR
      FolderBrowserDialog@1100285001 : DotNet "'System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Windows.Forms.FolderBrowserDialog" RUNONCLIENT;
      DialogResult@1100285006 : DotNet "'System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Windows.Forms.DialogResult" RUNONCLIENT;
    BEGIN
      FolderBrowserDialog := FolderBrowserDialog.FolderBrowserDialog();
      DialogResult := FolderBrowserDialog.ShowDialog();

      IF FolderBrowserDialog.SelectedPath() <> '' THEN
        FolderTxt := FolderBrowserDialog.SelectedPath() + '\';
    END;

    PROCEDURE InsertBLOB@14() : Integer;
    VAR
      ExfBlob@1001 : Record 12013591;
    BEGIN
      ExfBlob.INSERT(TRUE);
      EXIT(ExfBlob."No.");
    END;

    PROCEDURE ImportBLOB@1100285007(VAR ExflowBLOB@1100285000 : Record 12013591;FileName@1100285001 : Text);
    VAR
      NVInStream@1100285003 : InStream;
      NVOutStream@1100285004 : OutStream;
      TempFile@1100285002 : File;
    BEGIN
      // IF Local access Upload local file
      IF FileAccessFrom(FileName) = 2 THEN
        SilentUpload(FileName,FileName);

      // Stream Server File to BLOB
      IF FileAccessFrom(FileName) = 1 THEN BEGIN
        TempFile.OPEN(FileName);
        TempFile.CREATEINSTREAM(NVInStream);
        ExflowBLOB.BLOB.CREATEOUTSTREAM(NVOutStream);
        COPYSTREAM(NVOutStream,NVInStream);
        TempFile.CLOSE;
      END;
    END;

    PROCEDURE FileNameFromDialog@1100285018(VAR FileName@1100285001 : Text;WindowTitle@1100285006 : Text[50];DefaultFileType@1100285004 : ' ,Text,Excel,Word,Custom,Xml,Htm,Xsd,Xslt';FilterString@1100285003 : Text[250];Action@1100285002 : 'Open,Save');
    VAR
      CommonDialogMgnt@1100285000 : Codeunit 419;
      NVInstream@1100285005 : InStream;
    BEGIN
      IF Action = Action::Open THEN BEGIN
        IF WindowTitle <> '' THEN
          UPLOADINTOSTREAM(WindowTitle,'',FilterString, FileName, NVInstream)
        ELSE
          UPLOADINTOSTREAM(Text007,'',Text009, FileName, NVInstream);
      END ELSE BEGIN
        IF WindowTitle <> '' THEN
          FileName := CommonDialogMgnt.SaveFileDialog(WindowTitle,FileName,FilterString)
        ELSE
          FileName := CommonDialogMgnt.SaveFileDialog(Text006,'',Text009)
      END;
    END;

    PROCEDURE ExportBLOB@1100285008(VAR ExflowBLOB@1100285001 : Record 12013591;FileName@1100285000 : Text);
    VAR
      NVInStream@1100285003 : InStream;
      NVOutStream@1100285004 : OutStream;
      FileVar@1100285002 : File;
      TempFileName@1100285005 : Text;
    BEGIN
      // File Already exists
      IF FileAccessFrom(FileName) <> 0 THEN
        EXIT;

      ExflowBLOB.BLOB.CREATEINSTREAM(NVInStream);

      CASE FolderAccessFrom(Path(FileName)) OF
        1 :
          BEGIN
            FileVar.CREATETEMPFILE;
            TempFileName := FileVar.NAME;
            FileVar.CLOSE;
            FileVar.CREATE(TempFileName);
            FileVar.CREATEOUTSTREAM(NVOutStream);
            COPYSTREAM(NVOutStream,NVInStream);
            FileVar.CLOSE;
            ServerFileHelper.Copy(TempFileName,FileName);
            ServerFileHelper.Delete(TempFileName);
          END;
        2 :
          BEGIN
            DOWNLOADFROMSTREAM(NVInStream,Text006,Magicpath,Text009,TempFileName);
            ClientFileHelper.Copy(TempFileName,FileName);
            ClientFileHelper.Delete(TempFileName);
          END;
        0 : ERROR(EXF62,Path(FileName));
      END;
    END;

    PROCEDURE ShowBLOB@1100285027(VAR ExflowBLOB@1100285001 : Record 12013591;FileName@1100285000 : Text);
    VAR
      FileMgt@1100285002 : Codeunit 419;
      TempBlob@1100285003 : Record 99008535;
    BEGIN
      IF NOT ExflowBLOB.BLOB.HASVALUE THEN
        ERROR(EXF64);

      TempBlob.Blob := ExflowBLOB.BLOB;
      FileMgt.BLOBExport(TempBlob,FileName,TRUE);
    END;

    PROCEDURE ServerTempFileName@5(PassedString@1001 : Text[250];FileExtension@1002 : Text[250]) FileName : Text;
    VAR
      TempFile@1000 : File;
    BEGIN
      TempFile.CREATETEMPFILE;
      IF PassedString <> '' THEN
        FileName := Path(TempFile.NAME) + PassedString
      ELSE
        FileName := TempFile.NAME;

      IF STRPOS(GetFileName(FileName),'.') = 0 THEN
        FileName := FileName + '.' + FileExtension;

      TempFile.CLOSE;
    END;

    PROCEDURE ClientTempFileName@6(PassedString@1001 : Text[250];FileExtension@1002 : Text[250]) ClientFileName : Text;
    VAR
      TempFile@1004 : File;
    BEGIN
      IF ClientTempPath = '' THEN BEGIN
        TempFile.CREATETEMPFILE;
        ClientFileName := TempFile.NAME + '.' + FileExtension;
        TempFile.CLOSE;
        TempFile.CREATE(ClientFileName);
        TempFile.CLOSE;
        ClientTempPath := Path(DownloadTempFile(ClientFileName));
      END;

      ClientFileName := ClientTempPath + PassedString;

      IF STRPOS(GetFileName(ClientFileName),'.') = 0 THEN
        ClientFileName := ClientFileName + '.' + FileExtension;
    END;

    PROCEDURE DownloadTempFile@7(ServerFileName@1001 : Text) : Text;
    VAR
      FileName@1102601003 : Text;
      Path@1102601004 : Text;
    BEGIN
      FileName := '';
      Path := Magicpath;
      DOWNLOAD(ServerFileName,'',Path,Text009,FileName);
      EXIT(FileName);
    END;

    PROCEDURE Path@8(Filename@1102601000 : Text) Path : Text;
    BEGIN
      Filename := DELCHR(Filename,'<');
      Path := Filename;
      WHILE STRPOS(Filename,'\')<>0 DO BEGIN
        Filename := COPYSTR(Filename, STRPOS(Filename,'\')+1);
      END;
      IF STRLEN(Path) > STRLEN(Filename) THEN
        EXIT(COPYSTR(Path,1,STRLEN(Path)-STRLEN(Filename)))
      ELSE
        EXIT('');
    END;

    PROCEDURE GetFileName@1100285005(Filename@1102601000 : Text) Name : Text;
    VAR
      TempPath@1100285000 : Text;
    BEGIN
      Name := Filename;
      TempPath := Path(Filename);
      IF TempPath <> '' THEN
        Name := COPYSTR(Filename,STRLEN(TempPath)+1);

      IsValidFilename(Name);
      EXIT(Name);
    END;

    PROCEDURE Magicpath@9() : Text;
    BEGIN
      EXIT('<TEMP>');   // MAGIC PATH makes sure we don't get a prompt
    END;

    PROCEDURE DownloadToFile@1070000(TempFileName@1070000 : Text;FileName@1070001 : Text;AskConfirmation@1070002 : Boolean);
    BEGIN
      // Always run on client
      TempFileName := DownloadTempFile(TempFileName);

      IF ClientFileHelper.Exists(FileName) THEN BEGIN
        IF AskConfirmation THEN
          IF NOT DIALOG.CONFIRM(Text11200,TRUE,FileName) THEN
            EXIT;
        ClientFileHelper.Delete(FileName);
      END;
      ClientFileHelper.Move(TempFileName,FileName);
    END;

    PROCEDURE FileExtensionFromText@4(FileName@1001 : Text) Extension@1000 : Text;
    VAR
      I@1002 : Integer;
    BEGIN
      I := STRLEN(FileName);
      WHILE COPYSTR(FileName,I,1) <> '.' DO
        I -= 1;
      Extension := COPYSTR(FileName,I + 1,STRLEN(FileName) - I);
    END;

    PROCEDURE CreateImportFileTable@1000000000(ImportPath@1100285000 : Text;VAR TempFileMgtBuffer@1100285003 : TEMPORARY Record 12013593);
    VAR
      I@1000000005 : Integer;
      FileNo@1000000003 : Integer;
      CurrFile@1100285002 : Text;
      FileSystem@1100285001 : Record 2000000022;
      AppSetup@1100285004 : Record 12013601;
      dnStrArrayClient@1100285006 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array" RUNONCLIENT;
      dnFileInfoClient@1100285008 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.FileInfo" RUNONCLIENT;
    BEGIN
      // FileTable Creation with DOTNET has not been confirmed with all Service Tier Setups
      // If problems occur plaese make sure that all batch import paths can be accessed from Service Tier
      TempFileMgtBuffer.DELETEALL;
      FileNo := 0;

      CASE FolderAccessFrom(ImportPath) OF
        0 : ERROR(EXF62,ImportPath);
        1 :
          BEGIN
            // Execute on Server
            AppSetup.GET;
            FileSystem.SETRANGE(Path,AppSetup."Path to Used Invoices");
            IF FileSystem.FINDFIRST THEN;

            FileSystem.SETRANGE(Path,ImportPath);
            IF FileSystem.FINDSET THEN
              REPEAT
                IF FileSystem."Is a file" AND (STRLEN(FileSystem.Name) > 3) AND (FileSystem.Size > 0) THEN BEGIN
                  TempFileMgtBuffer.INIT;
                  TempFileMgtBuffer."Is a File" := TRUE;
                  TempFileMgtBuffer.Path := FileSystem.Path + FileSystem.Name;
                  TempFileMgtBuffer."Size (Kb)" := FileSystem.Size;
                  FileNo += 100;
                  TempFileMgtBuffer."Entry No." := FileNo;
                  TempFileMgtBuffer.INSERT;
                END;
              UNTIL FileSystem.NEXT = 0;
          END;
        2 :
          BEGIN
            // Execute on Client -
            // This Function has not been confirmed with all Service Tier Setups.
            // If you have issues make sure service tier can access batch import folder.
            dnStrArrayClient  := ClientDirectoryHelper.GetFileSystemEntries(ImportPath);
            FOR I := 0 TO (dnStrArrayClient.Length - 1) DO BEGIN
              CurrFile := dnStrArrayClient.GetValue(I);
              TempFileMgtBuffer."Is a File" := ClientFileHelper.Exists(CurrFile);
              IF TempFileMgtBuffer."Is a File" THEN BEGIN
                dnFileInfoClient := dnFileInfoClient.FileInfo(CurrFile);
                IF ROUND(dnFileInfoClient.Length() / 1024.0,1) < 0 THEN
                  TempFileMgtBuffer."Size (Kb)" := 0
                ELSE
                  TempFileMgtBuffer."Size (Kb)" := ROUND(dnFileInfoClient.Length() / 1024.0,1);
              END ELSE BEGIN
                TempFileMgtBuffer."Size (Kb)" := 0;
              END;
              FileNo += 100;
              TempFileMgtBuffer."Entry No." := FileNo;
              TempFileMgtBuffer.Path := CurrFile;
              TempFileMgtBuffer.INSERT;
            END;
          END;
      END;
    END;

    PROCEDURE ImportXML@1100285015(XMLportNo@1100285011 : Integer;Pathname@1100285000 : Text;FileName@1100285001 : Text);
    VAR
      NVInStream@1100285003 : InStream;
      FullFilePath@1100285004 : Text;
      TempFile@1100285002 : File;
    BEGIN
      FullFilePath := Pathname + FileName;

      // IF Local access Upload local file
      IF FileAccessFrom(FullFilePath) = 2 THEN
        SilentUpload(FullFilePath,FullFilePath);

      // Stream Server File to BLOB
      IF FileAccessFrom(FullFilePath) = 1 THEN BEGIN
        TempFile.OPEN(FullFilePath);
        TempFile.CREATEINSTREAM(NVInStream);
        XMLPORT.IMPORT(XMLportNo, NVInStream);
        TempFile.CLOSE;
      END;
    END;

    PROCEDURE SaveReportAsPDF@1100285006(ReportNo@1100285000 : Integer;FileName@1100285001 : Text;VAR PurchHeader@1100285002 : Record 38;RootFolder@1100285003 : Text;UseFileSystem@1100285006 : Boolean;VAR TempBlob@1100285007 : Record 99008535);
    VAR
      PurchHeader2@1100285005 : Record 38;
      PDFOutStrem@1100285008 : OutStream;
      TempFileName@1100285004 : Text;
      RecRef@1100285010 : RecordRef;
    BEGIN
      PurchHeader2 := PurchHeader;
      PurchHeader2.SETRECFILTER;
      IF UseFileSystem THEN BEGIN
        TempFileName := ServerTempFileName(GetFileName(FileName),'.pdf');
        REPORT.SAVEASPDF(ReportNo,TempFileName,PurchHeader2);
        FileName := RootFolder + FileName;
        Move(GetFileName(TempFileName),GetFileName(FileName),Path(TempFileName),Path(FileName),RootFolder);
      END ELSE BEGIN
        RecRef.GETTABLE(PurchHeader2);
        TempBlob.Blob.CREATEOUTSTREAM(PDFOutStrem);
        REPORT.SAVEAS(ReportNo,'',REPORTFORMAT::Pdf,PDFOutStrem,RecRef);
      END;
    END;

    PROCEDURE PreviewDoc@1100285011(FileURL@1100285000 : Text) : Text;
    VAR
      Name@1100285002 : Text;
      NewFileName@1100285001 : Text;
    BEGIN
      NewFileName := ClientTempFileName('P_' + GetFileName(FileURL),'');

      IF NOT ClientFileHelper.Exists(NewFileName) THEN
        CASE FileAccessFrom(FileURL) OF
          1 :
            BEGIN
              Name := DownloadTempFile(FileURL);
              ClientFileHelper.Copy(Name,NewFileName);
            END;
          2 :  ClientFileHelper.Copy(FileURL,NewFileName);
          0 : EXIT('');
        END;
      EXIT(NewFileName);
    END;

    PROCEDURE FolderAccessFrom@1100285003(Folder@1100285000 : Text) : Integer;
    BEGIN
      // Acccess from server
      IF ServerDirectoryHelper.Exists(Folder) THEN
        EXIT(1);

      // Access from Client
      IF GUIALLOWED THEN
        IF ClientDirectoryHelper.Exists(Folder) THEN
          EXIT(2);

      // No access
      EXIT(0);
    END;

    PROCEDURE FileAccessFrom@1100285004(FullFilePath@1100285000 : Text) : Integer;
    BEGIN
      // Acccess from server
      IF ServerFileHelper.Exists(FullFilePath) THEN
        EXIT(1);

      // Access from Client
      IF GUIALLOWED THEN
        IF ClientFileHelper.Exists(FullFilePath) THEN
          EXIT(2);

      // No access
      EXIT(0);
    END;

    PROCEDURE FolderAccessFromTo@1100285017(FromFolder@1100285000 : Text;ToFolder@1100285001 : Text) : Integer;
    VAR
      AccessFromFolder@1100285002 : Integer;
      AccessToFolder@1100285003 : Integer;
    BEGIN
      // Source and Dest can be accessed from Server
      IF (ServerDirectoryHelper.Exists(FromFolder) AND ServerDirectoryHelper.Exists(ToFolder)) THEN
        EXIT(1);

      // Source and Dest can be accessed from Client
      IF GUIALLOWED THEN
        IF (ClientDirectoryHelper.Exists(FromFolder) AND ClientDirectoryHelper.Exists(ToFolder)) THEN
          EXIT(2);

      AccessFromFolder := FolderAccessFrom(FromFolder);
      AccessToFolder := FolderAccessFrom(ToFolder);
      // Source can be accessed from Server and Dest from Client
      IF (AccessFromFolder = 1) AND (AccessToFolder = 2) THEN
        EXIT(3);

      // Source can be accessed from Client and Dest from Server
      IF (AccessFromFolder = 2) AND (AccessToFolder = 1) THEN
        EXIT(4);

      // No Access
      EXIT(0);
    END;

    PROCEDURE IsRunFromServiceTier@1100285000() : Boolean;
    BEGIN
      EXIT(ISSERVICETIER);
    END;

    PROCEDURE CopyFileClientToServer@1100285022(FromFile@1100285003 : Text;ToFile@1100285002 : Text;FromFolder@1100285001 : Text;ToFolder@1100285000 : Text);
    VAR
      ServerFilePath@1100285004 : Text;
    BEGIN
      // Upload file tor server and let service copy to dest
      SilentUpload(FromFolder + FromFile, ServerFilePath);
      ServerFileHelper.Copy(ServerFilePath, ToFolder + ToFile, TRUE);
    END;

    PROCEDURE CopyFileServerToClient@1100285023(FromFile@1100285003 : Text;ToFile@1100285002 : Text;FromFolder@1100285001 : Text;ToFolder@1100285000 : Text);
    BEGIN
      // Download Server file to a local tmp file and copy to dest.
      ClientFileHelper.Copy(DownloadTempFile(FromFolder + FromFile),ToFolder + ToFile,TRUE);
    END;

    PROCEDURE SilentUpload@1070001(ClientFilePath@1070000 : Text;VAR ServerFilePath@1070001 : Text) Status : Boolean;
    VAR
      ClientTempFilePath@1100285001 : Text;
      FileName@1100285000 : Text;
    BEGIN
      // This is a modified version of standard SilentUpload. Main diffrence is that the orignal filename are used instead of tmps
      FileName := GetFileName(ClientFilePath);
      ClientTempFilePath := ClientTempFileName(FileName,'');

      IF DELCHR(ClientFilePath, '>', '.') <> DELCHR(ClientTempFilePath, '>', '.') THEN
        ClientFileHelper.Copy(ClientFilePath,ClientTempFilePath,TRUE);

      ServerFilePath := ServerTempFileName(FileName,'');
      Status := UPLOAD('',Magicpath,'',ClientTempFilePath,ServerFilePath);
      EXIT(Status);
    END;

    PROCEDURE CreateADTable@1100285021(VAR Ex2009AdUsers@1100285005 : Record 12013598);
    VAR
      ExUserCompany@1100285008 : Record 12013641;
      ExAppSetup@1100285004 : Record 12013601;
      DirectoryEntry@1100285000 : DotNet "'System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.DirectoryServices.DirectoryEntry";
      DirectorySearcher@1100285002 : DotNet "'System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.DirectoryServices.DirectorySearcher";
      SearchResultColl@1100285003 : DotNet "'System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.DirectoryServices.SearchResultCollection";
      i@1100285006 : Integer;
      Window@1100285001 : Dialog;
      ADName@1100285007 : Text[100];
    BEGIN
      Window.OPEN(EXF63);
      DirectoryEntry := DirectoryEntry.DirectoryEntry;
      ExAppSetup.GET;
      IF ExAppSetup."RTC AD Filter" <> '' THEN BEGIN
        DirectoryEntry.Path := 'LDAP://' + ExAppSetup."RTC AD Filter";
        ADName := ExAppSetup."RTC AD Filter";
      END ELSE BEGIN
        IF STRPOS(DirectoryEntry.Name,'=') <> 0 THEN
          ADName := COPYSTR(DirectoryEntry.Name,STRPOS(DirectoryEntry.Name,'=')+1);
        IF ADName = '' THEN
          ADName := DirectoryEntry.Name;
      END;

      DirectorySearcher := DirectorySearcher.DirectorySearcher(DirectoryEntry);
      DirectorySearcher.Filter := '(&(objectCategory=person)(objectClass=user))';
      DirectorySearcher.SizeLimit:= 0;
      DirectorySearcher.PageSize := 250;

      DirectorySearcher.PropertiesToLoad.Add('SAMAccountName');
      DirectorySearcher.PropertiesToLoad.Add('DisplayName');
      DirectorySearcher.PropertiesToLoad.Add('Mail');
      DirectorySearcher.PropertiesToLoad.Add('department');
      SearchResultColl := DirectorySearcher.FindAll;

      IF ISNULL(SearchResultColl) OR (SearchResultColl.Count = 0) THEN
        ERROR(EXF61);

      FOR i := 0 TO (SearchResultColl.Count-1) DO BEGIN
        IF SearchResultColl.Item(i).Properties.Item('SAMAccountName').Count <> 0 THEN BEGIN
          Ex2009AdUsers.INIT;
          Ex2009AdUsers."User ID" := COPYSTR(FORMAT(SearchResultColl.Item(i).Properties.Item('SAMAccountName').Item(0)),1,MAXSTRLEN(Ex2009AdUsers."User ID"));
          IF SearchResultColl.Item(i).Properties.Item('DisplayName').Count <> 0 THEN
            Ex2009AdUsers.Name := COPYSTR(FORMAT(SearchResultColl.Item(i).Properties.Item('DisplayName').Item(0)),1,MAXSTRLEN(Ex2009AdUsers.Name));
          IF SearchResultColl.Item(i).Properties.Item('Mail').Count <> 0 THEN
            Ex2009AdUsers.Email := COPYSTR(FORMAT(SearchResultColl.Item(i).Properties.Item('Mail').Item(0)),1,MAXSTRLEN(Ex2009AdUsers.Email));
          IF SearchResultColl.Item(i).Properties.Item('department').Count <> 0 THEN
            Ex2009AdUsers.Department := COPYSTR(FORMAT(SearchResultColl.Item(i).Properties.Item('department').Item(0)),1,MAXSTRLEN(Ex2009AdUsers.Department));
          Ex2009AdUsers."Domain Name" := ADName;
          IF Ex2009AdUsers.INSERT THEN;
        END;
      END;
      Window.CLOSE;
    END;

    PROCEDURE SupportsDotNet@1100285019() : Boolean;
    BEGIN
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE IsValidFilename@1100285014(VAR FileName@1100285000 : Text);
    BEGIN
      IF STRPOS(FileName,'.') = 0 THEN
        FileName := '';
    END;

    BEGIN
    {
      This codeunit is executed in NAV RTC Version 2009R2 and later (DotNet).
      If installing in earlier versions make sure you use a version where the function SupportsDotNet returns FALSE
      0. No Access.
      1. Client Access.
      2. Server Access.
      3. Server to Client Access.
      4. Client to Server Access.
    }
    END.
  }
}

