OBJECT Report 11128102 Invoices with ROT/RUT File
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PSSE;
  }
  PROPERTIES
  {
    CaptionML=[ENU=ROT/RUT Application to Tax Authorities;
               NOR=ROT/RUT-s›knad til skatteverket;
               SVE=ROT/RUT-ans”kan till Skatteverket];
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   SalesRecSetup.GET();
                   LastSent := SalesRecSetup."ROTRUT Application Last Sent";
                   LastApplicationNo := SalesRecSetup."ROTRUT Application No.";
                   ApplicationNo := LastApplicationNo + 1;
                 END;

    OnPreReport=BEGIN
                  //>>RFC188
                  CreateFile;
                  //FileObj.CREATETEMPFILE;
                  //FileObj.CREATEOUTSTREAM(OutStreamObj);
                  //
                  //xmldoc := xmldoc.XmlDocument();
                  //
                  //// Create SOAP Envelope
                  //XmlProcessingInstruction := xmldoc.CreateProcessingInstruction('xml','version="1.0" encoding="UTF-8"');
                  //xmldoc.AppendChild(XmlProcessingInstruction);
                  //
                  //NameSpaceHtko := 'http://xmls.skatteverket.se/se/skatteverket/ht/komponent/begaran/3.0';
                  //NameSpaceBegaran := 'http://xmls.skatteverket.se/se/skatteverket/ht/begaran/3.0';
                  //
                  //soapEnvelope := xmldoc.CreateElement('a', 'Begaran', NameSpaceBegaran);
                  //soapEnvelope.SetAttribute('xmlns:xsi', 'http://www.w3.org/2001/XMLSchema-instance');
                  //soapEnvelope.SetAttribute('xmlns:htko', NameSpaceHtko);
                  //
                  //xmldoc.AppendChild(soapEnvelope);
                  //XmlElement := xmldoc.CreateElement('htko', 'BegaranNr', NameSpaceHtko);
                  //xmlTextNode := xmldoc.CreateTextNode(FORMAT(ApplicationNo));
                  //XmlElement.AppendChild(xmlTextNode);
                  //soapEnvelope.AppendChild(XmlElement);
                  //
                  //soapBody := xmldoc.CreateElement('htko', 'RotBegaran', NameSpaceHtko);
                  //soapEnvelope.AppendChild(soapBody);
                  //<<RFC188

                  NoOfApplications := 0;
                END;

    OnPostReport=BEGIN

                   IF (NoOfApplications = 0) THEN BEGIN
                      MESSAGE(STRSUBSTNO(txtNoXMLCreated,FORMAT(RotRut)));
                      CurrReport.QUIT;
                   END;
                   SalesRecSetup.GET();
                   SalesRecSetup."ROTRUT Application Last Sent" := CURRENTDATETIME;
                   SalesRecSetup."ROTRUT Application No." := ApplicationNo;
                   SalesRecSetup.MODIFY();

                   //xmldoc.Save(OutStreamObj);

                   IF (gWrongPersNo <> '') THEN                    // IME417
                      MESSAGE(txtWrongPersNoFound, gWrongPersNo);  // IME417

                   //>>RFC188
                   CloseSaveFile;
                   //FileObj.CREATEINSTREAM(InStreamObj);
                   //ToFile:='rot' + FORMAT(ApplicationNo) + '.xml';
                   //  // Transfer the content from the temporary file on the NAV server to a
                   //  // file on the RoleTailored client.
                   //  DOWNLOADFROMSTREAM(
                   //  InStreamObj,
                   //  'Save ROT-file',
                   //  '',
                   //  'XML File *.xml| *.xml',
                   //   ToFile);
                   //  // Close the temporary file and delete it from NAV server.
                   //FileObj.CLOSE();
                   //<<RFC188
                 END;

    UsageCategory=Tasks;
  }
  DATASET
  {
    { 8503;    ;DataItem;                    ;
               DataItemTable=Table21;
               DataItemTableView=SORTING(Entry No.)
                                 ORDER(Ascending);
               ReqFilterHeadingML=[ENU=Paid ROT/RUT Invoices;
                                   NOR=Betalte ROT/RUT-fakturaer;
                                   SVE=Betalda ROT/RUT-fakturor];
               OnPreDataItem=BEGIN
                               //>>RFC188
                               CASE RotRut OF
                                 RotRut::ROT:
                                   "Cust. Ledger Entry".SETFILTER("Amount ROT",'>0');
                                 RotRut::RUT:
                                   "Cust. Ledger Entry".SETFILTER("Amount RUT",'>0');
                               END;
                               //<<RFC188
                             END;

               OnAfterGetRecord=VAR
                                  CustLedgerEntry2@1100285000 : Record 21;
                                  ExtendedROTInformation@1100285100 : Record 11128102;
                                BEGIN

                                  CALCFIELDS("Remaining Amount", Amount);

                                  // RFC-076 Tolerance: 1 SEK difference
                                  //>>RFC188
                                  //IF (ABS(ABS("Remaining Amount") - ABS("Amount ROT")) > 1) THEN CurrReport.SKIP;
                                  //IF ("Sent to Tax Authorities Date" <> 0D) AND NOT (IncludeAlreadySent) THEN CurrReport.SKIP;
                                  CASE RotRut OF
                                    RotRut::ROT:
                                      BEGIN
                                        IF (ABS(ABS("Remaining Amount") - ABS("Amount ROT")) > 1) THEN CurrReport.SKIP;
                                        IF ("Sent to Tax Authorities Date" <> 0D) AND (NOT IncludeAlreadySent) THEN CurrReport.SKIP;
                                      END;
                                    RotRut::RUT:
                                      BEGIN
                                        IF (ABS(ABS("Remaining Amount") - ABS("Amount RUT")) > 1) THEN CurrReport.SKIP;
                                        IF ("Sent to Tax Auth. Date RUT" <> 0D) AND (NOT IncludeAlreadySent) THEN CurrReport.SKIP;
                                      END;
                                  END;

                                  ExtendedROTInformation.SETRANGE(Type,ExtendedROTInformation.Type::"Posted Invoice");
                                  ExtendedROTInformation.SETRANGE("Invoice No.","Document No.");
                                  CASE RotRut OF
                                    RotRut::ROT: ExtendedROTInformation.SETRANGE("ROT/RUT Type",0,ExtendedROTInformation."ROT/RUT Type"::RUT-1);
                                    RotRut::RUT: ExtendedROTInformation.SETRANGE("ROT/RUT Type",ExtendedROTInformation."ROT/RUT Type"::RUT+1,99);
                                  END;
                                  IF ExtendedROTInformation.ISEMPTY THEN
                                    CurrReport.SKIP;
                                  //<<RFC188

                                  CustLedgerEntry.RESET();
                                  CustLedgerEntry.SETCURRENTKEY("Closed by Entry No.");
                                  //>>pure285476
                                  //CustLedgerEntry.SETRANGE("Document Type", "Document Type"::Payment);
                                  CustLedgerEntry.SETRANGE("Document Type", "Document Type"::" ", "Document Type"::Payment);
                                  //<<pure285476
                                  CustLedgerEntry.SETRANGE("Closed by Entry No.", "Entry No.");
                                  PayAmount := 0;
                                  IF (CustLedgerEntry.FINDSET(FALSE)) THEN REPEAT
                                     PayDate := CustLedgerEntry."Posting Date";
                                     CustLedgerEntry.CALCFIELDS(Amount);
                                     PayAmount += CustLedgerEntry.Amount;
                                  UNTIL CustLedgerEntry.NEXT = 0;
                                  PayAmount := PayAmount * -1;

                                  /// RFC065 - added Rounding to add more tolereance on payment

                                  //IF (ROUND(PayAmount, 1, '=') < ROUND((Amount - "Amount ROT"), 1, '=') + 1) THEN CurrReport.SKIP; RFC076 Commented


                                  //FillXML;

                                  NoOfApplications += FillXML;


                                  //>>IME-135,140422
                                  //"Sent to Tax Authorities Date" := TODAY;
                                  //"Cust. Ledger Entry".MODIFY();
                                  CustLedgerEntry2.GET("Entry No.");
                                  //>>RFC188
                                  //CustLedgerEntry2."Sent to Tax Authorities Date" := "Sent to Tax Authorities Date";
                                  CASE RotRut OF
                                    RotRut::ROT: CustLedgerEntry2."Sent to Tax Authorities Date" := TODAY;
                                    RotRut::RUT: CustLedgerEntry2."Sent to Tax Auth. Date RUT" := TODAY;
                                  END;
                                  //<<RFC188
                                  CODEUNIT.RUN(CODEUNIT::"Cust. Entry-Edit",CustLedgerEntry2);
                                  //<<IME-135

                                  //>>RFC188
                                  //Max 100 persons/applicants in each file
                                  IF NoOfApplications >= 100 THEN BEGIN
                                    CloseSaveFile;
                                    ApplicationNo += 1;
                                    CreateFile;
                                  END;
                                  //<<RFC188
                                END;

               ReqFilterFields=Posting Date }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1100285000;;Container;
                  Name=ROT;
                  ContainerType=ContentArea }

      { 1100285504;1;Group  ;
                  CaptionML=[ENU=Export ROT/RUT Application;
                             NOR=Eksporter ROT/RUT-s›knad;
                             SVE=Exportera ROT/RUT-ans”kan];
                  GroupType=Group }

      { 1100285500;2;Field  ;
                  CaptionML=[ENU=Last Application Sent;
                             NOR=Siste s›knad sendt;
                             SVE=Senaste ans”kan skickades];
                  SourceExpr=LastSent;
                  Enabled=False;
                  Editable=False }

      { 1100285501;2;Field  ;
                  CaptionML=[ENU=Last Application No.;
                             NOR=Siste s›knadsnr;
                             SVE=Senaste Ans”kningsnr];
                  SourceExpr=LastApplicationNo;
                  Enabled=False;
                  Editable=False }

      { 1100285001;2;Field  ;
                  Name=Include all;
                  CaptionML=[ENU=Include Posts Already Sent to Tax Authorities;
                             NOR=Inkluder fakturaer som allerede er sendt til skattemyndighetene;
                             SVE=Inkludera fakturor som redan skickats till Skatteverket];
                  SourceExpr=IncludeAlreadySent }

      { 1100285502;2;Field  ;
                  CaptionML=[ENU=Application No.;
                             NOR=Utligningsnr.;
                             SVE=Ans”kningsnr];
                  SourceExpr=ApplicationNo }

      { 1000000001;2;Field  ;
                  CaptionML=[ENU=Apply for reduction type;
                             SVE=Ans”kan av skattereduktionsstyp];
                  SourceExpr=RotRut }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ExportFile@1100285000 : Boolean;
      IncludeAlreadySent@1100285001 : Boolean;
      LastSent@1100285500 : DateTime;
      LastApplicationNo@1100285502 : Integer;
      ApplicationNo@1100285501 : Integer;
      FileObj@1100285007 : File;
      OutStreamObj@1100285006 : OutStream;
      InStreamObj@1100285004 : InStream;
      ToFile@1100285003 : Text[250];
      CustLedgerEntry@1100285002 : Record 21;
      AmountRot@1100285008 : Decimal;
      FileName@1100285009 : Text[255];
      soapEnvelope@1100285015 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      soapBody@1100285014 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      arenden@1100285018 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      UtfortArbete@1100285508 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      Arbete@1100285510 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      XmlElement@1100285013 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      xmlTextNode@1100285012 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlText";
      nodeList@1100285011 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      node@1100285010 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      xmldoc@1100285016 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XmlProcessingInstruction@1100285017 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlProcessingInstruction";
      ROTInformation@1100285019 : Record 11128101;
      PayDate@1100285503 : Date;
      PayAmount@1100285504 : Decimal;
      NoOfApplications@1100285505 : Integer;
      txtNoXMLCreated@1100285506 : TextConst 'ENU=No %1 Invoice Applications were created.;NOR=Ingen %1-s›knader ble opprettet;SVE=Inga %1-ans”kningar skapades.';
      SalesRecSetup@1100285507 : Record 311;
      NameSpaceBegaran@1100285509 : Text;
      NameSpaceHtko@1100285511 : Text;
      gWrongPersNo@1100285100 : Text;
      txtWrongPersNoFound@1100285101 : TextConst 'ENU=Wrong Personal No. was found in the following invoices: %1;SVE=Felaktiga personnummer hittades i f”ljande fakturor: %1';
      RotRut@1100285102 : 'ROT,RUT';

    PROCEDURE FillXML@1100285000() : Integer;
    VAR
      ExtendedROTInformation@1100285500 : Record 11128102;
      OtherCost@1100285501 : Decimal;
      QtyPersonsCompanies@1100285100 : Integer;
    BEGIN

      QtyPersonsCompanies := 0;

      ROTInformation.RESET();
      ROTInformation.SETRANGE(Type, ROTInformation.Type::"Posted Invoice");
      ROTInformation.SETRANGE("Invoice No.", "Cust. Ledger Entry"."Document No."); // 140513
      IF (ROTInformation.FINDSET(FALSE)) THEN REPEAT
        arenden := xmldoc.CreateElement('Arenden', NameSpaceHtko);
        soapBody.AppendChild(arenden);

        //K”parens personnummer, obligatorisk
        XmlElement := xmldoc.CreateElement('Kopare', NameSpaceHtko);  // IME379 Added function FixPersNo
        xmlTextNode := xmldoc.CreateTextNode(FixPersNo(ROTInformation."Personal No.", ROTInformation."Invoice No.")); // 140703 Changed to Personal no. from name
        XmlElement.AppendChild(xmlTextNode);
        arenden.AppendChild(XmlElement);
        QtyPersonsCompanies += 1;

        //Datum f”r betalning, obligatorisk, anges enligt f”ljande exempel 2019-07-01
        XmlElement := xmldoc.CreateElement('BetalningsDatum', NameSpaceHtko);
        xmlTextNode := xmldoc.CreateTextNode(FORMAT(PayDate, 0, 9));
        XmlElement.AppendChild(xmlTextNode);
        arenden.AppendChild(XmlElement);

        //Pris f”r arbetet, (arbetskostnaden), obligatorisk
        XmlElement := xmldoc.CreateElement('PrisForArbete', NameSpaceHtko);
        xmlTextNode := xmldoc.CreateTextNode(FORMAT(DivideAmount(ROTInformation."Quote of ROT Amount", ROTInformation."Labour Cost"), 0, '<Integer>'));
        XmlElement.AppendChild(xmlTextNode);
        arenden.AppendChild(XmlElement);

        //XmlElement := xmldoc.CreateElement('FaktureratBelopp');
        //xmlTextNode := xmldoc.CreateTextNode(FORMAT("Cust. Ledger Entry".Amount, 0, '<Integer>'));
        //XmlElement.AppendChild(xmlTextNode);
        //arenden.AppendChild(XmlElement);

        //Belopp du f†tt betalt f”r arbetet, obligatorisk
        XmlElement := xmldoc.CreateElement('BetaltBelopp', NameSpaceHtko);   // IME379 Get From ROT Information file instead
        xmlTextNode := xmldoc.CreateTextNode(FORMAT(DivideAmount(ROTInformation."Quote of ROT Amount", ROTInformation."Labour Cost") - ROTInformation.Amount, 0 ,'<Integer>'));  // IME379 added DivideAmount()
        XmlElement.AppendChild(xmlTextNode);
        arenden.AppendChild(XmlElement);

        //Belopp du beg„r, obligatorisk
        XmlElement := xmldoc.CreateElement('BegartBelopp', NameSpaceHtko);
        xmlTextNode := xmldoc.CreateTextNode(FORMAT(ROUND(ROTInformation.Amount, 1, '='), 0 ,'<Integer>'));
        XmlElement.AppendChild(xmlTextNode);
        arenden.AppendChild(XmlElement);

        //Žrendets fakturanummer, 0-20tkn
        XmlElement := xmldoc.CreateElement('FakturaNr', NameSpaceHtko);
        xmlTextNode := xmldoc.CreateTextNode("Cust. Ledger Entry"."Document No.");
        XmlElement.AppendChild(xmlTextNode);
        arenden.AppendChild(XmlElement);

        ExtendedROTInformation.SETRANGE(Type, ROTInformation.Type);
        ExtendedROTInformation.SETRANGE("Document No.", ROTInformation."Document No.");
        ExtendedROTInformation.SETRANGE("Invoice No.", ROTInformation."Invoice No.");
        ExtendedROTInformation.SETRANGE("Personal No.", ROTInformation."Personal No.");

        // 150601 Added new calculation of Other cost - first, get material lines:
        OtherCost := 0;
        IF (ExtendedROTInformation.FINDSET(FALSE)) THEN REPEAT
          OtherCost += ExtendedROTInformation."Material Cost";
        UNTIL ExtendedROTInformation.NEXT = 0;

        //Uppgifter om ”vrig kostnad, g„ller b†de rot och rut
        XmlElement := xmldoc.CreateElement('Ovrigkostnad', NameSpaceHtko);
        //xmlTextNode := xmldoc.CreateTextNode(FORMAT("Cust. Ledger Entry".Amount - ROTInformation."Labour Cost", 0 ,'<Integer>')); -Old Code-
        xmlTextNode := xmldoc.CreateTextNode(FORMAT(DivideAmount(ROTInformation."Quote of ROT Amount", ("Cust. Ledger Entry".Amount - ROTInformation."Labour Cost" - OtherCost)), 0 ,'<Integer>')); // remove other material cost
        XmlElement.AppendChild(xmlTextNode);                                                                                                                                                        // IME379 added DivideAmount()
        arenden.AppendChild(XmlElement);

        IF RotRut = RotRut::ROT THEN BEGIN  //RFC188
          IF (ROTInformation."Building/Apartment" = ROTInformation."Building/Apartment"::Apartment) THEN BEGIN
            // *** IF Bostadsr„tt
            //L„genhetsnummer, ska fyllas i om rot-avdraget avser en l„genhet, 0-25tkn
            XmlElement := xmldoc.CreateElement('LagenhetsNr', NameSpaceHtko);
            IF ROTInformation."Building No." <> '' THEN
              xmlTextNode := xmldoc.CreateTextNode(COPYSTR(ROTInformation."Building No.",1,25));
            XmlElement.AppendChild(xmlTextNode);
            arenden.AppendChild(XmlElement);

            //Bostadsr„ttsf”renings organisationsnummer, ska fyllas i om rot-avdraget avser en l„genhet, 0-12tkn
            XmlElement := xmldoc.CreateElement('BrfOrgNr', NameSpaceHtko);
            IF ROTInformation."Apartment Organisation No." <> '' THEN
              xmlTextNode := xmldoc.CreateTextNode(COPYSTR(ROTInformation."Apartment Organisation No.",1,12));
            XmlElement.AppendChild(xmlTextNode);

            arenden.AppendChild(XmlElement);
          END ELSE BEGIN
            // If Fastighet
            //Fastighetsbeteckning, ska fyllas i om rot-avdraget avser en fastighet, 0-40tkn
            XmlElement := xmldoc.CreateElement('Fastighetsbeteckning', NameSpaceHtko);
            //>>RFC188
            //xmlTextNode := xmldoc.CreateTextNode(ROTInformation."Building No.");
            IF ROTInformation."Building No." <> '' THEN
              xmlTextNode := xmldoc.CreateTextNode(COPYSTR(ROTInformation."Building No.",1,40))
            //<<RFC188
            //>>IME521
            ELSE
              xmlTextNode := xmldoc.CreateTextNode('');
            //<<IME521
            XmlElement.AppendChild(xmlTextNode);
            arenden.AppendChild(XmlElement);
          END;
        END;  //RFC188
        // ************ EXTENDED ROT INFORMATION **************************************
        UtfortArbete := xmldoc.CreateElement('UtfortArbete', NameSpaceHtko);
        arenden.AppendChild(UtfortArbete);

        IF (ExtendedROTInformation.FINDSET(FALSE)) THEN REPEAT
            CASE ExtendedROTInformation."ROT/RUT Type" OF
              ExtendedROTInformation."ROT/RUT Type"::Construction:
                 Arbete := xmldoc.CreateElement('Bygg', NameSpaceHtko);
              ExtendedROTInformation."ROT/RUT Type"::Electricity:
                 Arbete := xmldoc.CreateElement('El', NameSpaceHtko);
              ExtendedROTInformation."ROT/RUT Type"::"Glass/Steel":
                 Arbete := xmldoc.CreateElement('GlasPlatarbete', NameSpaceHtko);
              ExtendedROTInformation."ROT/RUT Type"::"Land Drain":
                 Arbete := xmldoc.CreateElement('MarkDraneringarbete', NameSpaceHtko);
              ExtendedROTInformation."ROT/RUT Type"::"Brick Laying":
                 Arbete := xmldoc.CreateElement('Murning', NameSpaceHtko);
              ExtendedROTInformation."ROT/RUT Type"::"Painting/Wall Covering":
                 Arbete := xmldoc.CreateElement('MalningTapetsering', NameSpaceHtko);
              ExtendedROTInformation."ROT/RUT Type"::"Water System":
                 Arbete := xmldoc.CreateElement('Vvs', NameSpaceHtko);
      //>>RFC188
              ExtendedROTInformation."ROT/RUT Type"::"Cleaning and cleaning work":
                Arbete := xmldoc.CreateElement('Stadning', NameSpaceHtko);
              ExtendedROTInformation."ROT/RUT Type"::"Clothing and textile care":
                //Arbete := xmldoc.CreateElement('HemtextilOchKladvard', NameSpaceHtko);  //version 3
                Arbete := xmldoc.CreateElement('KladOchTextilvard', NameSpaceHtko);  //version 4
              ExtendedROTInformation."ROT/RUT Type"::"Snow clearance":
                Arbete := xmldoc.CreateElement('Snoskottning', NameSpaceHtko);
              ExtendedROTInformation."ROT/RUT Type"::Gardening:
                Arbete := xmldoc.CreateElement('Tradgardsarbete', NameSpaceHtko);
              ExtendedROTInformation."ROT/RUT Type"::Child:
                Arbete := xmldoc.CreateElement('Barnpassning', NameSpaceHtko);
              ExtendedROTInformation."ROT/RUT Type"::"Personal assistance and care":
                //Arbete := xmldoc.CreateElement('Annanomsorg', NameSpaceHtko);  //version 3
                Arbete := xmldoc.CreateElement('Personligomsorg', NameSpaceHtko);  //version 4
              ExtendedROTInformation."ROT/RUT Type"::"Removal services":
                Arbete := xmldoc.CreateElement('Flyttjanster', NameSpaceHtko);  //version 4
              ExtendedROTInformation."ROT/RUT Type"::"IT services":
                Arbete := xmldoc.CreateElement('ItTjanster', NameSpaceHtko);  //version 4
              ExtendedROTInformation."ROT/RUT Type"::Appliances:
                Arbete := xmldoc.CreateElement('ReparationAvVitvaror', NameSpaceHtko);  //version 6
      //<<RFC188
            END;

          UtfortArbete.AppendChild(Arbete);

          XmlElement := xmldoc.CreateElement('AntalTimmar', NameSpaceHtko);
          xmlTextNode := xmldoc.CreateTextNode(FORMAT(DivideAmount(ROTInformation."Quote of ROT Amount", ExtendedROTInformation."Quantity Hours"), 0 ,'<Integer>')); // IME379 added DivideAmount()
          XmlElement.AppendChild(xmlTextNode);
          Arbete.AppendChild(XmlElement);

          XmlElement := xmldoc.CreateElement('Materialkostnad', NameSpaceHtko);
          xmlTextNode := xmldoc.CreateTextNode(FORMAT(DivideAmount(ROTInformation."Quote of ROT Amount", ExtendedROTInformation."Material Cost"), 0 ,'<Integer>')); // IME379 added DivideAmount()
          XmlElement.AppendChild(xmlTextNode);
          Arbete.AppendChild(XmlElement);

        UNTIL ExtendedROTInformation.NEXT = 0;

      UNTIL ROTInformation.NEXT = 0;

      EXIT(QtyPersonsCompanies);  //RFC188
    END;

    LOCAL PROCEDURE FixPersNo@1100285501(PersNo@1100285500 : Code[30];InvoiceNo@1100285100 : Code[30]) : Code[12];
    BEGIN
      //RFC188 returns 30->12char
      // IME379 **** New function
      PersNo := DELCHR(PersNo, '=', DELCHR(PersNo, '=', '0123456789'));
      IF (STRLEN(PersNo) = 10) THEN PersNo := '19' + PersNo;
      IF (STRLEN(PersNo) <> 12) THEN BEGIN
         gWrongPersNo += InvoiceNo + '\';  // IME417: Added PersNo in global varible and stopped error
         EXIT(PADSTR(PersNo, 12, '0'));
      END;
      EXIT(PersNo);
    END;

    LOCAL PROCEDURE DivideAmount@1100285504(Percentage@1100285500 : Decimal;Amount@1100285501 : Decimal) : Decimal;
    BEGIN
      // IME379 **** New function

      EXIT(ROUND(Percentage / 100 * Amount, 1, '='));  // IME417: Added rounding
    END;

    LOCAL PROCEDURE CreateFile@1100285102();
    BEGIN
      //RFC188
      FileObj.CREATETEMPFILE;
      FileObj.CREATEOUTSTREAM(OutStreamObj);

      xmldoc := xmldoc.XmlDocument();

      // Create SOAP Envelope
      XmlProcessingInstruction := xmldoc.CreateProcessingInstruction('xml','version="1.0" encoding="UTF-8"');
      xmldoc.AppendChild(XmlProcessingInstruction);

      //NameSpaceHtko := 'http://xmls.skatteverket.se/se/skatteverket/ht/komponent/begaran/3.0';
      //NameSpaceBegaran := 'http://xmls.skatteverket.se/se/skatteverket/ht/begaran/3.0';
      NameSpaceHtko := 'http://xmls.skatteverket.se/se/skatteverket/ht/komponent/begaran/6.0';
      NameSpaceBegaran := 'http://xmls.skatteverket.se/se/skatteverket/ht/begaran/6.0';

      soapEnvelope := xmldoc.CreateElement('a', 'Begaran', NameSpaceBegaran);
      soapEnvelope.SetAttribute('xmlns:xsi', 'http://www.w3.org/2001/XMLSchema-instance');
      soapEnvelope.SetAttribute('xmlns:htko', NameSpaceHtko);

      xmldoc.AppendChild(soapEnvelope);
      //XmlElement := xmldoc.CreateElement('htko', 'BegaranNr', NameSpaceHtko);  //version 3
      XmlElement := xmldoc.CreateElement('htko', 'NamnPaBegaran', NameSpaceHtko);  //version 6
      xmlTextNode := xmldoc.CreateTextNode(FORMAT(ApplicationNo));
      XmlElement.AppendChild(xmlTextNode);
      soapEnvelope.AppendChild(XmlElement);

      CASE RotRut OF
        RotRut::ROT: soapBody := xmldoc.CreateElement('htko', 'RotBegaran', NameSpaceHtko);
        RotRut::RUT: soapBody := xmldoc.CreateElement('htko', 'HushallBegaran', NameSpaceHtko);
      END;

      soapEnvelope.AppendChild(soapBody);
    END;

    LOCAL PROCEDURE CloseSaveFile@1100285103();
    BEGIN
      //RFC188
      xmldoc.Save(OutStreamObj);
      FileObj.CREATEINSTREAM(InStreamObj);
      //ToFile:='rot' + FORMAT(ApplicationNo) + '.xml';
      CASE RotRut OF
        RotRut::ROT: ToFile:='rot' + FORMAT(ApplicationNo) + '.xml';
        RotRut::RUT: ToFile:='rut' + FORMAT(ApplicationNo) + '.xml';
      END;


      // Transfer the content from the temporary file on the NAV server to a
      // file on the RoleTailored client.
      DOWNLOADFROMSTREAM(
         InStreamObj,
         'Save ROT-file',
         '',
         'XML File *.xml| *.xml',
          ToFile);
         // Close the temporary file and delete it from NAV server.
      FileObj.CLOSE();
    END;

    EVENT xmldoc@1100285016::NodeInserting@93(sender@1100285501 : Variant;e@1100285500 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT xmldoc@1100285016::NodeInserted@94(sender@1100285501 : Variant;e@1100285500 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT xmldoc@1100285016::NodeRemoving@95(sender@1100285501 : Variant;e@1100285500 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT xmldoc@1100285016::NodeRemoved@96(sender@1100285501 : Variant;e@1100285500 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT xmldoc@1100285016::NodeChanging@97(sender@1100285501 : Variant;e@1100285500 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT xmldoc@1100285016::NodeChanged@98(sender@1100285501 : Variant;e@1100285500 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    BEGIN
    {
      140513 Changed from "No." to "Invoice No." in XML-creation
      150320  NEW XML-FILE SPECIFICATION - REWRITE
              Added Extended ROT Information and disabled fields not to be displayed in ROT after 150331
      150525 ITERO.MH Changed XML structure based on Skatteverket Schema
      150528 ITERO.MH Change Namespace addition in code
      150601 ITERO.MH Added calculation of other cost based on material cost on extended lines
      150624 ITERO.MH IME379 - Complemented ROT file with * Personal No. Fix
                                                           * Divided all fields based on the Quote of ROT in the new function DivideAmount()
      150915 ITERO.MH IME417 Added Rounding to int in DivideAmount() and global variable to show all pers. no. errors after export.
      150821 ITERO.MH IME-400 Added rounding of Remaning amount compared to ROT Amount
      151013 ITERO.MH IME417 Changed DivideAmount to use Decimal - added rounding
      151103 ITERO.MH RFC015 Added rounding to account for more payment tolerance
                      RFC-076 Tolerance: 1 SEK difference
                      RFC065 - added Rounding to add more tolereance on payment

      170405 ITERO.DL RFC188 enhance ROT-handling and extend with RUT
      170512 ITERO.DL RFC188 caption change ROT -> ROT/RUT
      180130 ITERO.DL pure285476 unable to apply invoices in journal


      http://www.skatteverket.se/foretagochorganisationer/sjalvservice/allaetjanster/tjanster/rotochrutforetag/reglerforattimporterafiltillrotochrut.4.76a43be412206334b89800033198.html
      Det g†r inte att blanda beg„ran om utbetalning f”r rotarbete och utbetalning f”r rutarbete i samma fil.

      http://www.skatteverket.se/foretagochorganisationer/sjalvservice/allaetjanster/schemalagerxml/rotochrutforetag.4.71004e4c133e23bf6db800063583.html
    }
    END.
  }
  RDLDATA
  {
  }
}

