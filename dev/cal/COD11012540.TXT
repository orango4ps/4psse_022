OBJECT Codeunit 11012540 InsertPresentPlantOnPlantQuote
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    TableNo=11229918;
    OnRun=BEGIN
            PlantQuote.COPY(Rec);
            Code;
          END;

  }
  CODE
  {
    VAR
      PlantQuote@1100528500 : Record 11229918;
      PlantSetup@1100528501 : Record 11012550;
      PlantType@1100528502 : Record 11012551;
      PlantNumber@1100528503 : Record 11012552;
      Text000@1100528505 : TextConst 'DEU=M”chten Sie das Werkzeug eingeben, das am %1 an Standort %2 vorhanden ist?;ENU=Do you want to insert the plant that is present on %1 on location %2?;NLD=Wilt u het materieel opvoeren dat op %1 aanwezig is op locatie %2?;NOR=Vil du sett inn maskin som finnes p† %1 p† lokasjon %2?;SVE=Vill du infoga den Maskin som finns p† %1 p† lagerst„lle %2?';
      PlantQuoteLine@1100528504 : Record 11229919;
      Text001@1100528506 : TextConst 'DEU=Zeilen werden erstellt @1@@@@@@@@@@@@@;ENU=Creating Lines @1@@@@@@@@@@@@@;NLD=Regels worden aangemaakt @1@@@@@@@@@@@@@;NOR=Opprette Rad @1@@@@@@@@@@@@@;SVE=Skapar rader @1@@@@@@@@@@@@@';
      Window@1100528507 : Dialog;
      LineCounter@1100528508 : Integer;
      NoOfRecords@1100528510 : Integer;
      LineNo@1100528509 : Integer;
      Text002@1100528512 : TextConst 'DEU=Ab %2 ist kein Werkzeug an Standort % vorhanden.;ENU=No plant present on location %1 per %2.;NLD=Er is geen intern materieel aanwezig op locatie %1 per %2.;NOR=Det finnes ingen maskin p† lokasjon %1 per %2.;SVE=Det finns ingen Maskin p† lagerst„llet %1 per %2.';
      Text003@1100528511 : TextConst 'DEU=%1 %2 erstellt;ENU=%1 %2(s) created;NLD=%1 %2(s) aangemaakt;NOR=%1 %2 er opprettet;SVE=%1 %2 har skapats';

    PROCEDURE Code@1100528501();
    VAR
      PlantInventory@1100528500 : Record 11012555;
      IsExternal@1100528501 : Boolean;
      IsAllowed@1100528502 : Boolean;
    BEGIN
      WITH PlantQuote DO BEGIN
        PlantSetup.GET;
        IF "Customer No." = '' THEN
          TESTFIELD("Contact No.");
        IF "Contact No." = '' THEN
          TESTFIELD("Customer No.");
        TESTFIELD("Plant Location");
        TESTFIELD("Quote Date");

        IF NOT CONFIRM(Text000, FALSE, "Quote Date", "Plant Location") THEN
          EXIT;

        Window.OPEN(Text001);
        LineCounter := 0;
        LineNo := 0;

        PlantInventory.SETRANGE(PlantInventory.Removed,FALSE);
        PlantInventory.SETRANGE(Location, "Plant Location");
        PlantInventory.SETFILTER("Present from",'<= %1', "Quote Date");
        PlantInventory.SETRANGE(Sold,FALSE);
        PlantInventory.SETFILTER(Quantity,'>0');
        NoOfRecords := PlantInventory.COUNT;
        IF PlantInventory.FINDSET THEN BEGIN
          REPEAT
            PlantInventory.CALCFIELDS(Bulk);
            LineCounter := LineCounter + 1;
            Window.UPDATE(1, ROUND(LineCounter / NoOfRecords * 10000,1));

            PlantType.GET(PlantInventory."Plant Type");
            IsExternal := PlantType.External;
            IF (PlantInventory."Plant No." <> '0') THEN BEGIN
              IF PlantNumber.GET(PlantInventory."Plant Type", PlantInventory."Plant No.") THEN
                IsExternal :=  PlantNumber.External;
            END;

            IsAllowed := TRUE;
            IF (PlantQuote.Type = PlantQuote.Type::Sales) AND (IsExternal = TRUE) THEN
              IsAllowed := FALSE;

            IF IsAllowed = TRUE THEN BEGIN
              PlantQuoteLine.SETRANGE("Plant Quote No.", "No.");
              PlantQuoteLine.SETRANGE("Plant Type", PlantInventory."Plant Type");
              PlantQuoteLine.SETRANGE("Plant No.", PlantInventory."Plant No.");
              IF PlantInventory.Bulk THEN
                PlantQuoteLine.SETRANGE("Rate Code", PlantInventory."Rate Code");
              IF NOT PlantQuoteLine.FINDFIRST THEN BEGIN
                LineNo := LineNo + 10000;
                PlantQuoteLine.INIT;
                PlantQuoteLine."Plant Quote No." := "No.";
                PlantQuoteLine."Line No." := LineNo;
                PlantQuoteLine.Type := PlantQuoteLine.Type::Plant;
                PlantQuoteLine."Plant Type" := PlantInventory."Plant Type";
                PlantQuoteLine.VALIDATE("Plant Type");
                PlantQuoteLine.DetermineUnitPriceAndDiscount;
                IF PlantInventory."Plant No." <> '' THEN
                  PlantQuoteLine."Plant No." := PlantInventory."Plant No.";
                PlantQuoteLine.VALIDATE("Plant Type");
                PlantQuoteLine."Rate Code" := PlantInventory."Rate Code";
                IF NOT PlantInventory.Bulk THEN
                  PlantQuoteLine.Quantity := PlantInventory.Quantity
                ELSE
                  PlantQuoteLine.Quantity := CalcPlantInventoryQuantity;
                PlantQuoteLine."Plant Group" := PlantInventory."Plant Group";
                PlantQuoteLine.INSERT(TRUE);
              END;
            END;
          UNTIL PlantInventory.NEXT = 0;
        END;

        COMMIT;
        Window.CLOSE;

        IF LineNo = 0 THEN
          MESSAGE(Text002, "Plant Location", "Quote Date")
        ELSE
          MESSAGE(Text003,LineNo/10000,PlantQuoteLine.TABLECAPTION);
      END;
    END;

    PROCEDURE InsertPlantPresentSelected@1100528500(VAR Rec@1100528500 : Record 11229918);
    VAR
      PlantInventory@1100528501 : Record 11012555;
      DetailLevel@1100528502 : Integer;
      PlantInventory2@1100528503 : Record 11012555;
      PlantInventPage@1100528504 : Page 11012559;
      TmpPlantInvent@1100528505 : TEMPORARY Record 11012555;
      PlantQuoterLine@1100528506 : Record 11229919;
    BEGIN
      PlantQuote.COPY(Rec);
      WITH PlantQuote DO BEGIN
        PlantSetup.GET;
        TESTFIELD("Contact No.");
        TESTFIELD("Plant Location");
        TESTFIELD("Quote Date");

        PlantInventory.RESET;
        PlantInventory.SETRANGE(Removed,FALSE);
        PlantInventory.SETRANGE(Location,"Plant Location");
        PlantInventory.SETFILTER("Present from",'<= %1',"Quote Date");
        PlantInventory.SETFILTER("Date Filter", '<=%1', "Quote Date");
        PlantInventory.SETRANGE(Sold,FALSE);
        PlantInventory.SETRANGE("Sold Filter", FALSE);
        PlantInventory.SETFILTER(Quantity,'>0');
        PlantInventory.SETFILTER("Quantity Filter", '>%1', 0);

        IF PlantSetup."Rate Codes" THEN
          DetailLevel := 3
        ELSE BEGIN
          PlantInventory2.COPY(PlantInventory);
          PlantInventory2.SETFILTER("Rate Code", '<>%1', '');
          IF PlantInventory2.ISEMPTY THEN
            DetailLevel := 2
          ELSE
            DetailLevel := 3;
        END;

        PlantInventPage.SetDetailSelection(DetailLevel);
        PlantInventPage.SetMultiSelection();
        PlantInventPage.SETTABLEVIEW(PlantInventory);
        PlantInventPage.LOOKUPMODE(TRUE);
        IF PlantInventPage.RUNMODAL <> ACTION::LookupOK THEN
          EXIT;
        IF NOT PlantInventPage.GetMarkedRecords(TmpPlantInvent) THEN
          EXIT;

        TmpPlantInvent.RESET;
        IF TmpPlantInvent.FINDSET THEN BEGIN
          PlantQuoterLine.RESET;
          PlantQuoterLine.SETRANGE("Plant Quote No.", "No.");
          IF PlantQuoterLine.FINDLAST THEN
            LineNo := PlantQuoterLine."Line No."
          ELSE
            LineNo := 0;
          REPEAT
            IF TmpPlantInvent.Quantity > 0 THEN BEGIN
              LineNo := LineNo + 10000;
              PlantQuoterLine.INIT;
              PlantQuoteLine."Plant Quote No." := "No.";
              PlantQuoteLine."Line No." := LineNo;
              PlantQuoteLine.Type := PlantQuoteLine.Type::Plant;
              PlantQuoteLine."Plant Type" := TmpPlantInvent."Plant Type";
              PlantQuoteLine."Plant Group" := TmpPlantInvent."Plant Group";
              IF TmpPlantInvent."Plant No." <> '' THEN
                PlantQuoteLine."Plant No." := TmpPlantInvent."Plant No.";
              PlantQuoteLine.VALIDATE("Plant Type");
              PlantQuoteLine.DetermineUnitPriceAndDiscount;
              PlantQuoteLine."Rate Code" := TmpPlantInvent."Rate Code";
              PlantQuoteLine.Quantity := TmpPlantInvent.Quantity;
              PlantQuoteLine."Unit of Measure" := TmpPlantInvent."Unit of Measure";
              PlantQuoteLine.VALIDATE(Quantity, TmpPlantInvent.Quantity);

              PlantQuoteLine.INSERT(TRUE);
            END;
          UNTIL TmpPlantInvent.NEXT = 0;
        END;

      END;
    END;

    LOCAL PROCEDURE CalcPlantInventoryQuantity@1100530001() : Decimal;
    VAR
      PlantInventory@1100530000 : Record 11012555;
      Quantity@1100530001 : Decimal;
    BEGIN
      Quantity := 0;
      PlantInventory.RESET;
      PlantInventory.SETRANGE(Removed,FALSE);
      PlantInventory.SETRANGE(Location,PlantQuote."Plant Location");
      PlantInventory.SETFILTER("Present from",'<= %1',PlantQuote."Quote Date");
      PlantInventory.SETFILTER("Date Filter", '<=%1', PlantQuote."Quote Date");
      PlantInventory.SETRANGE(Sold,FALSE);
      PlantInventory.SETRANGE("Sold Filter", FALSE);
      PlantInventory.SETFILTER(Quantity,'>0');
      PlantInventory.SETFILTER("Quantity Filter", '>%1', 0);
      PlantInventory.SETRANGE("Plant Type", PlantQuoteLine."Plant Type");
      PlantInventory.SETRANGE("Plant No.", PlantQuoteLine."Plant No.");
      PlantInventory.SETRANGE("Rate Code", PlantQuoteLine."Rate Code");
      IF PlantInventory.FINDSET THEN BEGIN
        REPEAT
          Quantity += PlantInventory.Quantity;
        UNTIL PlantInventory.NEXT = 0;
      END;
      EXIT(Quantity);
    END;

    BEGIN
    END.
  }
}

