OBJECT Codeunit 11020215 DataWarehouse - Projects v3
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    SingleInstance=Yes;
    OnRun=VAR
            OperatingSystemMgt@1100525000 : Codeunit 11012364;
          BEGIN
            DataWareHouseSetupRec.GET;
            StartBatch(DataWareHouseSetupRec."SQL Server",
                       DataWareHouseSetupRec."SQL Database",
                       DataWareHouseSetupRec.Logincode,
                       DataWareHouseSetupRec.Password,
                       DataWareHouseSetupRec."Date until",
                       0);
            OperatingSystemMgt.ServerShell(STRSUBSTNO('%1', DataWareHouseSetupRec."Scriptfile Location"), '' , FALSE);
          END;

  }
  CODE
  {
    VAR
      DataProc@1100485000 : DotNet "'NavisionToSql, Version=1.0.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.NavisionToSql.DataProcessor";
      Window@1100485001 : Dialog;
      text001@1100485002 : TextConst 'DEU=Besch„ftigt mit    #1###################\;ENU="Running      #1###################\ ";NLD=Bezig met    #1###################\;NOR=Kj›rer       #1###################\;SVE="Arbetar       #1###################\ "';
      Text002@1100485004 : TextConst 'DEU=Verarbeiten @2@@@@@@@@@@@@@@@\;ENU=Check Lines   @2@@@@@@@@@@@@@\;NLD=Verwerken  @2@@@@@@@@@@@@@@@\;NOR=Kontrollere Rader   @2@@@@@@@@@@@@@\;SVE=Kontrollerar rader   @2@@@@@@@@@@@@@\';
      NoOfLines@1100485003 : Integer;
      LineCounter@1100485005 : Integer;
      DateTimeStart@1100485006 : DateTime;
      CumFilter@1100485007 : Date;
      DataWareHouseSetupRec@1100525001 : Record 11012146;

    PROCEDURE StartBatch@1100485088(ServerTxt@1100485003 : Text[30];DataBaseTxt@1100485002 : Text[30];LogInTxt@1100485001 : Text[30];PassWordTxt@1100485000 : Text[30];FilterDate@1100485004 : Date;startmethod@1100485005 : Integer);
    BEGIN
      DataWareHouseSetupRec.GET;
      IF startmethod > 0 THEN BEGIN
        Window.OPEN(text001 + Text002);
      END;
      IF FilterDate <> 0D THEN BEGIN
        DateTimeStart := CreateDateTimeFromDate(FilterDate);
        CumFilter := FilterDate;
      END ELSE BEGIN
        DateTimeStart := CURRENTDATETIME;
        CumFilter := TODAY - 1;
      END;

      ProcessSetupTable(ServerTxt,DataBaseTxt,LogInTxt,PassWordTxt, startmethod,'Begin');
      ProcessSetupDetailsTable(ServerTxt,DataBaseTxt,LogInTxt,PassWordTxt, startmethod);
      IF DataWareHouseSetupRec.Job THEN
        ProcessJobTable(ServerTxt,DataBaseTxt,LogInTxt,PassWordTxt, startmethod);
      IF DataWareHouseSetupRec."Project Ledger" THEN
        ProcessProjectLedgerTable(ServerTxt,DataBaseTxt,LogInTxt,PassWordTxt, startmethod);
      IF DataWareHouseSetupRec."Service Ledger" THEN
        ProcessServiceLedgerTable(ServerTxt,DataBaseTxt,LogInTxt,PassWordTxt, startmethod);
      IF DataWareHouseSetupRec."Try Out Quote" THEN
        ProcessTryOutQuoteTable(ServerTxt,DataBaseTxt,LogInTxt,PassWordTxt, startmethod);
      IF DataWareHouseSetupRec."Try Out Qte.Rate" THEN
        ProcessTryOutQuoteRateTable(ServerTxt,DataBaseTxt,LogInTxt,PassWordTxt, startmethod);
      IF DataWareHouseSetupRec."Budget Ledger" THEN
        ProcessBudgetLedgerTable(ServerTxt,DataBaseTxt,LogInTxt,PassWordTxt, startmethod);
      IF DataWareHouseSetupRec."General Ledger" THEN
        ProcessGeneralLedgerTable(ServerTxt,DataBaseTxt,LogInTxt,PassWordTxt, startmethod);
      IF DataWareHouseSetupRec.Period THEN
        ProcessPeriodTable(ServerTxt,DataBaseTxt,LogInTxt,PassWordTxt, startmethod);
      IF DataWareHouseSetupRec."Try Out" THEN
        ProcessTryOutTable(ServerTxt,DataBaseTxt,LogInTxt,PassWordTxt, startmethod);
      IF DataWareHouseSetupRec."Prognosis Detail" THEN
        ProcessPrognosisDetail(ServerTxt,DataBaseTxt,LogInTxt,PassWordTxt, startmethod);
      IF DataWareHouseSetupRec."Prognosis Line" THEN
        ProcessPrognosisLine(ServerTxt,DataBaseTxt,LogInTxt,PassWordTxt, startmethod);
      IF DataWareHouseSetupRec."Posted Hour Lines" THEN
        ProcessPostedHourLines(ServerTxt,DataBaseTxt,LogInTxt,PassWordTxt, startmethod);
      IF DataWareHouseSetupRec."GL Account" THEN
        ProcessGLAccountTable(ServerTxt,DataBaseTxt,LogInTxt,PassWordTxt, startmethod);
      IF DataWareHouseSetupRec."Rate Code" THEN
        ProcessRateCodeTable(ServerTxt,DataBaseTxt,LogInTxt,PassWordTxt, startmethod);
      IF DataWareHouseSetupRec.Employee THEN
        ProcessEmployeeTable(ServerTxt,DataBaseTxt,LogInTxt,PassWordTxt, startmethod);
      IF DataWareHouseSetupRec."Vendor Ledger" THEN
        ProcessVendorLedgerTable(ServerTxt,DataBaseTxt,LogInTxt,PassWordTxt, startmethod);
      IF DataWareHouseSetupRec."Customer Ledger" THEN
        ProcessCustomerLedgerTable(ServerTxt,DataBaseTxt,LogInTxt,PassWordTxt, startmethod);
      IF DataWareHouseSetupRec."Global Dimension 1" THEN
        ProcessGlobalDimension1Table(ServerTxt,DataBaseTxt,LogInTxt,PassWordTxt, startmethod);
      IF DataWareHouseSetupRec."Purchase Invoice" THEN
        ProcessPurchaseInvoiceTable(ServerTxt,DataBaseTxt,LogInTxt,PassWordTxt, startmethod);
      IF DataWareHouseSetupRec."Purchase Credit Memo" THEN
        ProcessPurchaseCreditMemoTable(ServerTxt,DataBaseTxt,LogInTxt,PassWordTxt, startmethod);
      //**4PS.sn SR, 04-02-14
      IF DataWareHouseSetupRec."Sales Invoice" THEN
        ProcessSalesInvoiceTable(ServerTxt,DataBaseTxt,LogInTxt,PassWordTxt, startmethod);
      IF DataWareHouseSetupRec."Sales Credit Memo" THEN
        ProcessSalesCreditMemoTable(ServerTxt,DataBaseTxt,LogInTxt,PassWordTxt, startmethod);
      //**4PS.en SR, 04-02-14
      IF DataWareHouseSetupRec."Global DImension 2" THEN
        ProcessCostObjectTable(ServerTxt,DataBaseTxt,LogInTxt,PassWordTxt, startmethod);
      IF DataWareHouseSetupRec."Wage Component" THEN
        ProcessWageCompTable(ServerTxt,DataBaseTxt,LogInTxt,PassWordTxt, startmethod);
      IF DataWareHouseSetupRec.Contact THEN
        ProcessContactTable(ServerTxt,DataBaseTxt,LogInTxt,PassWordTxt, startmethod);
      IF DataWareHouseSetupRec."Service Call" THEN
        ProcessServiceCallTable(ServerTxt,DataBaseTxt,LogInTxt,PassWordTxt, startmethod);
      IF DataWareHouseSetupRec."Service Location" THEN
        ProcessServiceLocationTable(ServerTxt,DataBaseTxt,LogInTxt,PassWordTxt, startmethod);
      //TODO KK.s
      //IF DataWareHouseSetupRec."Service Installation" THEN
      //  ProcessServiceInstallTable(ServerTxt,DataBaseTxt,LogInTxt,PassWordTxt, startmethod);
      //IF DataWareHouseSetupRec."Service Installation Part" THEN
      //  ProcessServInstalPartlTable(ServerTxt,DataBaseTxt,LogInTxt,PassWordTxt, startmethod);
      //TODO KK.e
      IF DataWareHouseSetupRec."Service Contract" THEN
        ProcessServContractTable(ServerTxt,DataBaseTxt,LogInTxt,PassWordTxt, startmethod);
      IF DataWareHouseSetupRec."Service Order" THEN
        ProcessServOrderTable(ServerTxt,DataBaseTxt,LogInTxt,PassWordTxt, startmethod);
      IF DataWareHouseSetupRec."Service Contract Control" THEN
        ProcessServControlTable(ServerTxt,DataBaseTxt,LogInTxt,PassWordTxt, startmethod);
      IF DataWareHouseSetupRec."Cost Code" THEN
        ProcessCostCodeTable(ServerTxt,DataBaseTxt,LogInTxt,PassWordTxt, startmethod);
      IF DataWareHouseSetupRec."Extension Contract" THEN
        ProcessExtensionTable(ServerTxt,DataBaseTxt,LogInTxt,PassWordTxt, startmethod);
      //dbeekman.sn, 12-4-2010
      IF DataWareHouseSetupRec.Disciplines THEN
        ProcessDisciplineTable(ServerTxt,DataBaseTxt,LogInTxt,PassWordTxt, startmethod);
      IF DataWareHouseSetupRec."Try-out Lines" THEN
        ProcessTryOutLineTable(ServerTxt,DataBaseTxt,LogInTxt,PassWordTxt, startmethod);
      IF DataWareHouseSetupRec."Contact Feature Types" THEN
        ProcessContFeatureTypeTable(ServerTxt,DataBaseTxt,LogInTxt,PassWordTxt, startmethod);
      IF DataWareHouseSetupRec."Service Order Install Lines" THEN
        ProcessServOrdInstLineTable(ServerTxt,DataBaseTxt,LogInTxt,PassWordTxt, startmethod);
      //dbeekman.en

      ProcessSetupTable(ServerTxt,DataBaseTxt,LogInTxt,PassWordTxt, startmethod,'End');

      IF startmethod > 0 THEN BEGIN
        Window.CLOSE;
      END;
    END;

    PROCEDURE ProcessSetupTable@1100525006(ServerTxt@1100525004 : Text[30];DataBaseTxt@1100525003 : Text[30];LogInTxt@1100525002 : Text[30];PassWordTxt@1100525001 : Text[30];startmethod@1100525000 : Integer;CycleStage@1100525006 : Text[30]);
    BEGIN
      IF startmethod > 0 THEN BEGIN
        Window.UPDATE(1,'Setup');
      END;

      IF ISNULL(DataProc) THEN
        DataProc := DataProc.DataProcessor;

      IF DataProc.OpenConnection(ServerTxt,DataBaseTxt, 'staging.ReplicationSettings', LogInTxt, PassWordTxt) THEN BEGIN
        IF DataProc.BeginTransaction() THEN BEGIN
          IF DataWareHouseSetupRec.GET THEN BEGIN
            DataProc.InsertItem('Datumentijd', DateTimeStart, 'datetime');
            DataProc.InsertItem('[NAV Company]' , COMPANYNAME, 'varchar');
            DataProc.InsertItem('CycleStage' , CycleStage, 'varchar');
            DataProc.InsertItem('[Sql Server]' , DataWareHouseSetupRec."SQL Server" , 'varchar');
            DataProc.InsertItem('[Sql Database]' , DataWareHouseSetupRec."SQL Database" , 'varchar');
            DataProc.InsertItem('Gebruikersnaam' , DataWareHouseSetupRec.Logincode , 'varchar');
            IF DataWareHouseSetupRec."Date until" <> 0D THEN
              DataProc.InsertItem('[t/m Datum]' , CreateDateTimeFromDate(DataWareHouseSetupRec."Date until") , 'datetime');
            DataProc.InsertItem('[NAS Client]' , DataWareHouseSetupRec."NAS/Client" , 'varchar');
            DataProc.InsertItem('[Timer Interval]' , DataWareHouseSetupRec."Timer interval (min.)" , 'int');
            DataProc.InsertItem('[Scriptbestand Locatie]' , DataWareHouseSetupRec."Scriptfile Location" , 'varchar');
            DataProc.InsertItem('[Repliceer Uren vanaf jaar]' , DataWareHouseSetupRec."Replicate hours from year" , 'int');
            DataProc.InsertItem('[Repliceer Uren vanaf week]' , DataWareHouseSetupRec."Replicate hours from week" , 'int');
            DataProc.InsertItem('[Laatste regelnummer Grootboekrekeningpost]',
                                 DataWareHouseSetupRec."General Ledger Last Line No." ,
                                 'int');
            DataProc.InsertItem('[Laatste regelnummer projectpost]',
                                 DataWareHouseSetupRec."Project Ledger Last Line No." ,
                                 'int');
            DataProc.InsertItem('[Laatste regelnummer servicepost]',
                                 DataWareHouseSetupRec."Service Ledger Last Line No." ,
                                 'int');
            //dbeekman.sn, 12-4-2010:
            CASE DataWareHouseSetupRec."Contact Feat. Type Filter" OF
              DataWareHouseSetupRec."Contact Feat. Type Filter"::All:
                DataProc.InsertItem('[Relatiekenmerksoortfilter]' , 'Alle' , 'varchar');
              DataWareHouseSetupRec."Contact Feat. Type Filter"::"Company/Contact Person/Person":
                DataProc.InsertItem('[Relatiekenmerksoortfilter]' , 'Bedrijf/Contactpersoon/Persoon' , 'varchar');
              DataWareHouseSetupRec."Contact Feat. Type Filter"::Other:
                DataProc.InsertItem('[Relatiekenmerksoortfilter]' , 'Overig' , 'varchar');
            END;
            //dbeekman.en

           //**4PS, SR, 04-02-14
           IF DataWareHouseSetupRec."Project Finished" <> 0D THEN
             DataProc.InsertItem('[Project gereed]' , CreateDateTimeFromDate(DataWareHouseSetupRec."Project Finished") , 'datetime');
           IF DataWareHouseSetupRec."Service Order Finished" <> 0D THEN
             DataProc.InsertItem('[Serviceorder gereed]' ,
              CreateDateTimeFromDate(DataWareHouseSetupRec."Service Order Finished") , 'datetime');
           IF DataWareHouseSetupRec."Purchase Invoice Posting Date" <> 0D THEN
             DataProc.InsertItem('[Inkoop factuur boekingsdatum]',
              CreateDateTimeFromDate(DataWareHouseSetupRec."Purchase Invoice Posting Date") , 'datetime');
           IF DataWareHouseSetupRec."Sales Invoice Posting Date" <> 0D THEN
             DataProc.InsertItem('[Verkoop factuur boekingsdatum]' ,
              CreateDateTimeFromDate(DataWareHouseSetupRec."Sales Invoice Posting Date") , 'datetime');
           IF DataWareHouseSetupRec."Vendor Posting Date" <> 0D THEN
             DataProc.InsertItem('[Leverancier boekingsdatum]' ,
              CreateDateTimeFromDate(DataWareHouseSetupRec."Vendor Posting Date") , 'datetime');
           IF DataWareHouseSetupRec."Customer Posting Date" <> 0D THEN
             DataProc.InsertItem('[Klant boekingsdatum]' ,
              CreateDateTimeFromDate(DataWareHouseSetupRec."Customer Posting Date") , 'datetime');
           IF DataWareHouseSetupRec."Budget Ledger From Date" <> 0D THEN
             DataProc.InsertItem('[Repliceer Budgetposten vanaf datum]' ,
              CreateDateTimeFromDate(DataWareHouseSetupRec."Budget Ledger From Date") , 'datetime');
           //**4PS, SR, 04-02-14

            DataProc.ExecuteRowInsert();

          END;
          DataProc.EndTransaction
        END;
        DataProc.CloseConnection;
      END;

      LineCounter := 0;
      NoOfLines := 0;
    END;

    PROCEDURE ProcessSetupDetailsTable@1100525028(ServerTxt@1100525004 : Text[30];DataBaseTxt@1100525003 : Text[30];LogInTxt@1100525002 : Text[30];PassWordTxt@1100525001 : Text[30];startmethod@1100525000 : Integer);
    BEGIN
      IF startmethod > 0 THEN BEGIN
        Window.UPDATE(1,'Setup');
      END;

      IF ISNULL(DataProc) THEN
        DataProc := DataProc.DataProcessor;

      IF DataProc.OpenConnection(ServerTxt,DataBaseTxt, 'staging.ReplicationSettingsDetails', LogInTxt, PassWordTxt) THEN BEGIN
        IF DataProc.BeginTransaction() THEN BEGIN
          IF DataWareHouseSetupRec.GET THEN BEGIN
            DataProc.InsertItem('Datumentijd', DateTimeStart, 'datetime');
            DataProc.InsertItem('[NAV Company]' , COMPANYNAME, 'varchar');

            IF DataWareHouseSetupRec."Try Out" THEN
              DataProc.InsertItem('Trajecten' , 'Ja' , 'varchar')
            ELSE
              DataProc.InsertItem('Trajecten' , 'Nee' , 'varchar');

            IF DataWareHouseSetupRec."Try Out Quote" THEN
              DataProc.InsertItem('[Traject Offerte]' , 'Ja' , 'varchar')
            ELSE
              DataProc.InsertItem('[Traject Offerte]' , 'Nee' , 'varchar');

            IF DataWareHouseSetupRec."Try Out Qte.Rate" THEN
               DataProc.InsertItem('[Traject Offerte Tarieven]' , 'Ja' , 'varchar')
            ELSE
               DataProc.InsertItem('[Traject Offerte Tarieven]' , 'Nee' , 'varchar');

            IF DataWareHouseSetupRec."General Ledger" THEN
               DataProc.InsertItem('Grootboekposten' , 'Ja' , 'varchar')
            ELSE
               DataProc.InsertItem('Grootboekposten' , 'Nee' , 'varchar');

            IF DataWareHouseSetupRec."Rate Code" THEN
               DataProc.InsertItem('Tariefcodes' , 'Ja' , 'varchar')
            ELSE
               DataProc.InsertItem('Tariefcodes' , 'Nee' , 'varchar');

            IF DataWareHouseSetupRec.Period THEN
               DataProc.InsertItem('Periodes' , 'Ja' , 'varchar')
            ELSE
               DataProc.InsertItem('Periodes' , 'Nee' , 'varchar');

            IF DataWareHouseSetupRec."Global Dimension 1" THEN
               DataProc.InsertItem('Kostenplaatsen' , 'Ja' , 'varchar')
            ELSE
               DataProc.InsertItem('Kostenplaatsen' , 'Nee' , 'varchar');

            IF DataWareHouseSetupRec.Employee THEN
               DataProc.InsertItem('Werknemers' , 'Ja' , 'varchar')
            ELSE
               DataProc.InsertItem('Werknemers' , 'Nee' , 'varchar');

            IF DataWareHouseSetupRec."Global DImension 2" THEN
               DataProc.InsertItem('Kostendragers' , 'Ja' , 'varchar')
            ELSE
               DataProc.InsertItem('Kostendragers' , 'Nee' , 'varchar');

            IF DataWareHouseSetupRec."Wage Component" THEN
               DataProc.InsertItem('Looncomponenten' , 'Ja' , 'varchar')
            ELSE
               DataProc.InsertItem('Looncomponenten' , 'Nee' , 'varchar');

            IF DataWareHouseSetupRec.Contact THEN
               DataProc.InsertItem('Relaties' , 'Ja' , 'varchar')
            ELSE
               DataProc.InsertItem('Relaties' , 'Nee' , 'varchar');

            IF DataWareHouseSetupRec."Cost Code" THEN
               DataProc.InsertItem('Kostencode' , 'Ja' , 'varchar')
            ELSE
               DataProc.InsertItem('Kostencode' , 'Nee' , 'varchar');

            IF DataWareHouseSetupRec.Job THEN
               DataProc.InsertItem('Project' , 'Ja' , 'varchar')
            ELSE
               DataProc.InsertItem('Project' , 'Nee' , 'varchar');

            IF DataWareHouseSetupRec."Project Ledger" THEN
               DataProc.InsertItem('Projectposten' , 'Ja' , 'varchar')
            ELSE
               DataProc.InsertItem('Projectposten' , 'Nee' , 'varchar');

            IF DataWareHouseSetupRec."Prognosis Detail" THEN
               DataProc.InsertItem('[Prognose detail]' , 'Ja' , 'varchar')
            ELSE
               DataProc.InsertItem('[Prognose detail]' , 'Nee' , 'varchar');

            IF DataWareHouseSetupRec."Prognosis Line" THEN
               DataProc.InsertItem('[Prognose regels]' , 'Ja' , 'varchar')
            ELSE
               DataProc.InsertItem('[Prognose regels]' , 'Nee' , 'varchar');

            IF DataWareHouseSetupRec."Service Ledger" THEN
               DataProc.InsertItem('Serviceposten' , 'Ja' , 'varchar')
            ELSE
               DataProc.InsertItem('Serviceposten' , 'Nee' , 'varchar');

            IF DataWareHouseSetupRec."Service Call" THEN
               DataProc.InsertItem('[Service meldingen]' , 'Ja' , 'varchar')
            ELSE
               DataProc.InsertItem('[Service meldingen]' , 'Nee' , 'varchar');

            IF DataWareHouseSetupRec."Service Location" THEN
               DataProc.InsertItem('[Service locaties]' , 'Ja' , 'varchar')
            ELSE
               DataProc.InsertItem('[Service locaties]' , 'Nee' , 'varchar');

      //TODO KK.so
      //      IF DataWareHouseSetupRec."Service Installation" THEN
      //         DataProc.InsertItem('[Service installaties]' , 'Ja' , 'varchar')
      //      ELSE
      //         DataProc.InsertItem('[Service installaties]' , 'Nee' , 'varchar');
      //
      //      IF DataWareHouseSetupRec."Service Installation Part" THEN
      //         DataProc.InsertItem('[Service installatie onderdeel]' , 'Ja' , 'varchar')
      //      ELSE
      //         DataProc.InsertItem('[Service installatie onderdeel]' , 'Nee' , 'varchar');
      //TODO KK.eo

            IF DataWareHouseSetupRec."Service Contract" THEN
               DataProc.InsertItem('[Service contracten]' , 'Ja' , 'varchar')
            ELSE
               DataProc.InsertItem('[Service contracten]' , 'Nee' , 'varchar');

            IF DataWareHouseSetupRec."Service Order" THEN
               DataProc.InsertItem('[Service orders]' , 'Ja' , 'varchar')
            ELSE
               DataProc.InsertItem('[Service orders]' , 'Nee' , 'varchar');

            IF DataWareHouseSetupRec."Service Contract Control" THEN
               DataProc.InsertItem('[Service contract bewaking]' , 'Ja' , 'varchar')
            ELSE
               DataProc.InsertItem('[Service contract bewaking]' , 'Nee' , 'varchar');

            IF DataWareHouseSetupRec."Budget Ledger" THEN
               DataProc.InsertItem('Begrotingsposten' , 'Ja' , 'varchar')
            ELSE
               DataProc.InsertItem('Begrotingsposten' , 'Nee' , 'varchar');

            IF DataWareHouseSetupRec."Customer Ledger" THEN
               DataProc.InsertItem('Klantposten' , 'Ja' , 'varchar')
            ELSE
               DataProc.InsertItem('Klantposten' , 'Nee' , 'varchar');

            IF DataWareHouseSetupRec."Vendor Ledger" THEN
               DataProc.InsertItem('Leveranciersposten' , 'Ja' , 'varchar')
            ELSE
               DataProc.InsertItem('Leveranciersposten' , 'Nee' , 'varchar');

            IF DataWareHouseSetupRec."GL Account" THEN
               DataProc.InsertItem('Grootboekrekeningen' , 'Ja' , 'varchar')
            ELSE
               DataProc.InsertItem('Grootboekrekeningen' , 'Nee' , 'varchar');

            IF DataWareHouseSetupRec."Posted Hour Lines" THEN
               DataProc.InsertItem('[Geboekte urenregels]' , 'Ja' , 'varchar')
            ELSE
               DataProc.InsertItem('[Geboekte urenregels]' , 'Nee' , 'varchar');

            IF DataWareHouseSetupRec."Purchase Invoice" THEN
               DataProc.InsertItem('Inkoopfacturen' , 'Ja' , 'varchar')
            ELSE
               DataProc.InsertItem('Inkoopfacturen' , 'Nee' , 'varchar');

            IF DataWareHouseSetupRec."Purchase Credit Memo" THEN
               DataProc.InsertItem('[Inkoop Creditnotas]' , 'Ja' , 'varchar')
            ELSE
               DataProc.InsertItem('[Inkoop Creditnotas]' , 'Nee' , 'varchar');

            //dbeekman.sn, 12-4-2010: M18348
            IF DataWareHouseSetupRec.Disciplines THEN
               DataProc.InsertItem('[Disciplines]' , 'Ja' , 'varchar')
            ELSE
               DataProc.InsertItem('[Disciplines]' , 'Nee' , 'varchar');

            IF DataWareHouseSetupRec."Try-out Lines" THEN
               DataProc.InsertItem('[Trajectregels]' , 'Ja' , 'varchar')
            ELSE
               DataProc.InsertItem('[Trajectregels]' , 'Nee' , 'varchar');

            IF DataWareHouseSetupRec."Contact Feature Types" THEN
               DataProc.InsertItem('[Relatiekenmerksoorten]' , 'Ja' , 'varchar')
            ELSE
               DataProc.InsertItem('[Relatiekenmerksoorten]' , 'Nee' , 'varchar');

            IF DataWareHouseSetupRec."Service Order Install Lines" THEN
               DataProc.InsertItem('[Serviceorder Installaties]' , 'Ja' , 'varchar')
            ELSE
               DataProc.InsertItem('[Serviceorder Installaties]' , 'Nee' , 'varchar');
            //dbeekman.en

           //**4PS.sn SR, 04-02-14
           IF DataWareHouseSetupRec."Sales Invoice" THEN
              DataProc.InsertItem('[Verkoopfacturen]' , 'Ja' , 'varchar')
           ELSE
              DataProc.InsertItem('[Verkoopfacturen]' , 'Nee' , 'varchar');
           IF DataWareHouseSetupRec."Sales Credit Memo" THEN
              DataProc.InsertItem('[Verkoop Creditnota]' , 'Ja' , 'varchar')
           ELSE
              DataProc.InsertItem('[Verkoop Creditnota]' , 'Nee' , 'varchar');
           //**4PS.en SR, 04-02-14

            DataProc.ExecuteRowInsert();

          END;
          DataProc.EndTransaction
        END;
        DataProc.CloseConnection;
      END;

      LineCounter := 0;
      NoOfLines := 0;
    END;

    PROCEDURE ProcessJobTable@1100485003(ServerTxt@1100485001 : Text[30];DataBaseTxt@1100485002 : Text[30];LogInTxt@1100485003 : Text[30];PassWordTxt@1100485004 : Text[30];startmethod@1100485010 : Integer);
    VAR
      RecProject@1100485000 : Record 11072003;
      RecPrognosis@1100485005 : Record 11012034;
      RecContactFeatureType@1100485008 : Record 11012753;
      JobLedgerRec@1100485009 : Record 11072005;
      BudgetLineRec@1100525000 : Record 11012001;
      TryoutSuccessor@1100525001 : Record 11012761;
      ProjectPrincipal@1100525002 : Record 11012005;
      TryOutNo@1210190000 : Code[20];
      RecPrognosisLine@1100525003 : Record 11012035;
      PrognosisTotalCost@1100525004 : ARRAY [6] OF Decimal;
    BEGIN
      IF startmethod > 0 THEN BEGIN
        Window.UPDATE(1,'Projecten');
      END;

      NoOfLines := RecProject.COUNT;

      IF ISNULL(DataProc) THEN
        DataProc := DataProc.DataProcessor;

      IF DataProc.OpenConnection(ServerTxt,DataBaseTxt, 'staging.Projects', LogInTxt, PassWordTxt) THEN BEGIN
        IF DataProc.BeginTransaction() THEN BEGIN
          RecProject.SETFILTER("Cumulation Filter",'..%1',CumFilter);
          IF RecProject.FINDFIRST THEN BEGIN
            REPEAT
              RecProject.SETFILTER("Project Filter",RecProject."No.");
              LineCounter := LineCounter + 1;
              IF startmethod > 0 THEN BEGIN
                Window.UPDATE(2,ROUND(LineCounter/NoOfLines*10000,1));
              END;
              IF (RecProject."Project Status" <> RecProject."Project Status"::Finished) OR
                 (RecProject."Posting Date Closing" = 0D) OR
                 ((RecProject."Posting Date Closing" >= DataWareHouseSetupRec."Project Finished") AND
                  (RecProject."Project Status" = RecProject."Project Status"::Finished))
              THEN BEGIN //**4PS, SR, 04-02-14
                RecProject.CALCFIELDS(
                  "Principal Name",
                  "Name Project Manager",
                  Revenues, "Actual Costs",
                  "Actual Preclosure Result",
                  "Extension Contract Amount",
                  "Open (Purchase)",
                  "Project Contract Amount",
                  "Total Budget",
                  "Open Amount (Hours)",
                  "Received/Not Invoiced",
                  "Open Ovh. Surch. Firm (Purch.)",
                  "Open Ovh. Surch. (Hours)",
                  "Open (Inventory)",
                  "Open Ovh. Surch. (Inventory)");
                RecProject.CALCFIELDS(
                  "Budget Hours (Entire Project)",
                  "Received/Not Inv. Hours", "Open Hours");

                //#C019440.sn
                RecProject.CALCFIELDS("Labor Budget", "Material Budget", "Subcontracting Budget", "Plant Budget",
                  "Sundry Budget", "Hours Budget");
                //#C019440.en

                DataProc.InsertItem('Datumentijd', DateTimeStart, 'datetime');
                DataProc.InsertItem('[NAV Company]' , COMPANYNAME, 'varchar');
                DataProc.InsertItem('No' , RecProject."No.", 'varchar');
                DataProc.InsertItem('Description', RecProject.Description, 'varchar');
                DataProc.InsertItem('Principal', RecProject."Bill-to Customer No.", 'varchar');
                //AH.sn: 28-03-2011
                //DataProc.InsertItem('[Principal name]', RecProject."Principal Name", 'varchar');  // Vervallen
                //AH.en
                //dbeekman.sn, 8-4-2010: M18348
                DataProc.InsertItem('[Country Code]', RecProject."Country/Region Code", 'varchar');
                DataProc.InsertItem('[City]', RecProject.City, 'varchar');

                IF RecProject."Creation Date" <> 0D THEN
                  DataProc.InsertItem('[Creation Date]', CreateDateTimeFromDate(RecProject."Creation Date"), 'datetime');

                IF RecProject."Budget Fixed" THEN
                  DataProc.InsertItem('[Budget Fixed]', 'Yes' ,'varchar')
                ELSE
                  DataProc.InsertItem('[Budget Fixed]', 'No' ,'varchar');

                IF RecProject."Posting Element Mandatory" THEN
                  DataProc.InsertItem('[Posting Element Mandatory]', 'Yes' ,'varchar')
                ELSE
                  DataProc.InsertItem('[Posting Element Mandatory]', 'No' ,'varchar');
                //dbeekman.en

                CASE RecProject."Single/Main/Sub Project" OF
                  RecProject."Single/Main/Sub Project"::Single:
                    DataProc.InsertItem('[Single/Main/Subproject]', 'Single', 'varchar');
                  RecProject."Single/Main/Sub Project"::"Main Project":
                    DataProc.InsertItem('[Single/Main/Subproject]', 'Main', 'varchar');
                  RecProject."Single/Main/Sub Project"::"Sub Project":
                    DataProc.InsertItem('[Single/Main/Subproject]', 'Subproject', 'varchar');
                END;

                DataProc.InsertItem('[Main Project]', RecProject."Main Project", 'varchar');

                CASE RecProject."Settlement Method" OF
                  RecProject."Settlement Method"::"Fixed Price":
                    DataProc.InsertItem('[Settlement Method]', 'Fixed Price', 'varchar');
                  RecProject."Settlement Method"::"Cost Plus":
                    DataProc.InsertItem('[Settlement Method]', 'Cost Plus', 'varchar');
                END;

                DataProc.InsertItem('[Global Dimension 1]', RecProject."Global Dimension 1 Code", 'varchar');
                DataProc.InsertItem('[Project Type]', RecProject."Project Type", 'varchar');
                DataProc.InsertItem('[Project Manager]', RecProject."Project Manager", 'varchar');
                //AH.sn: 28-03-2011
                //DataProc.InsertItem('[Name Project Manager]', RecProject."Name Project Manager", 'varchar'); // Vervallen
                //AN.en
                IF RecProject."Posting Date Closing" <> 0D THEN
                  DataProc.InsertItem('[Posting Date Closing]',CreateDateTimeFromDate(RecProject."Posting Date Closing"),'datetime');
                DataProc.InsertItem('Revenues', RecProject.Revenues, 'decimal');
                DataProc.InsertItem('[Actual Costs]', RecProject."Actual Costs", 'decimal');
                DataProc.InsertItem('[Actual Preclosure Result]', RecProject."Actual Preclosure Result", 'decimal');
                DataProc.InsertItem('[Extension Contract Amount]', RecProject."Extension Contract Amount", 'decimal');
                DataProc.InsertItem('[Open (Purchase)]', RecProject."Open (Purchase)", 'decimal');
                DataProc.InsertItem('[Project Contract Amount]', RecProject."Project Contract Amount", 'decimal');
                DataProc.InsertItem('[Total Budget]', RecProject."Total Budget", 'decimal');
                DataProc.InsertItem('[Open Amount (Hours)]', RecProject."Open Amount (Hours)", 'decimal');
                DataProc.InsertItem('[Received/Not Invoiced]', RecProject."Received/Not Invoiced", 'decimal');
                DataProc.InsertItem('[Open Ovh. Surch. (Purchase)]', RecProject."Open Ovh. Surch. Firm (Purch.)", 'decimal');
                DataProc.InsertItem('[Open Ovh. Surch. (Hours)]', RecProject."Open Ovh. Surch. (Hours)", 'decimal');
                DataProc.InsertItem('[Open (Inventory)]', RecProject."Open (Inventory)", 'decimal');
                //21-07-09.sn
                DataProc.InsertItem('[Open Ovh. Surch. (Inventory)]', RecProject."Open Ovh. Surch. (Inventory)", 'decimal');
                DataProc.InsertItem('[Service Location Code]', RecProject."Created from Service Loc. No.", 'varchar');
                //21-07-09.en
                IF RecProject."Starting Date" <> 0D THEN
                  DataProc.InsertItem('[Starting Date]', CreateDateTimeFromDate(RecProject."Starting Date"), 'datetime');
                IF RecProject."Ending Date" <> 0D THEN
                  DataProc.InsertItem('[Ending Date]', CreateDateTimeFromDate(RecProject."Ending Date"), 'datetime');

                //AH.sn 15-03-2011
                //DataProc.InsertItem('[Budget Hours]', RecProject."Budget Hours (Entire Project)", 'decimal'); //#C019440.o
                DataProc.InsertItem('[Budget Hours]', RecProject."Hours Budget", 'decimal'); //#C019440.c

                //#C019440.sn
                DataProc.InsertItem('[Budget Labor]', RecProject."Labor Budget", 'decimal');
                DataProc.InsertItem('[Budget Material]', RecProject."Material Budget", 'decimal');
                DataProc.InsertItem('[Budget Subcontracting]', RecProject."Subcontracting Budget", 'decimal');
                DataProc.InsertItem('[Budget Plant]', RecProject."Plant Budget", 'decimal');
                DataProc.InsertItem('[Budget Sundry]', RecProject."Sundry Budget", 'decimal');
                //#C019440.en

                DataProc.InsertItem('[Received/Not Inv. Hours]', RecProject."Received/Not Inv. Hours", 'decimal');
                DataProc.InsertItem('[Open Hours]', RecProject."Open Hours", 'decimal');

                CASE RecProject."Project Status" OF
                  RecProject."Project Status"::Estimation:
                    DataProc.InsertItem('[Project Status]', 'Estimation', 'varchar');
                  RecProject."Project Status"::Preparation:
                    DataProc.InsertItem('[Project Status]', 'Preparation', 'varchar');
                  RecProject."Project Status"::Production:
                    DataProc.InsertItem('[Project Status]', 'Production', 'varchar');
                  RecProject."Project Status"::"Technical Finished":
                    DataProc.InsertItem('[Project Status]', 'Technical Finished', 'varchar');
                  RecProject."Project Status"::"Administrative Finished":
                    DataProc.InsertItem('[Project Status]', 'Administrative Finished', 'varchar');
                  RecProject."Project Status"::Finished:
                    DataProc.InsertItem('[Project Status]', 'Finished', 'varchar');
                  RecProject."Project Status"::Archive:
                    DataProc.InsertItem('[Project Status]', 'Archive', 'varchar');
                  RecProject."Project Status"::Archived:
                    DataProc.InsertItem('[Project Status]', 'Archived', 'varchar');
                END;

                IF RecProject."Internal Project" THEN
                  DataProc.InsertItem('[Internal Project]', 'Yes', 'varchar')
                ELSE
                  DataProc.InsertItem('[Internal Project]', 'No', 'varchar');

                DataProc.InsertItem('[Discipline]', RecProject.Discipline, 'varchar');
                //AH.en

                RecPrognosis.SETRANGE("Project No.",RecProject."No.");
                IF RecPrognosis.FINDLAST THEN BEGIN
                  IF RecPrognosis."Prognosis Date" <> 0D THEN BEGIN
                    DataProc.InsertItem('[Last Prognosis Date]', CreateDateTimeFromDate(RecPrognosis."Prognosis Date"), 'datetime');
                    RecProject.SETFILTER("Prognosis Filter",'%1',RecPrognosis."Prognosis Date");
                    RecProject.CALCFIELDS(Prognosis, "Hours Prognosis");
                    DataProc.InsertItem('Prognosis', RecProject.Prognosis, 'decimal');
                    //DataProc.InsertItem('[Hours Prognosis]', RecProject."Hours Prognosis", 'decimal'); //#C019440.o
                    //#C019440.sn
                    CLEAR(PrognosisTotalCost);
                    RecPrognosisLine.RESET;
                    RecPrognosisLine.SETRANGE("Project No.",RecPrognosis."Project No.");
                    RecPrognosisLine.SETRANGE("Prognosis Date",RecPrognosis."Prognosis Date");
                    IF RecPrognosisLine.FINDSET THEN
                      REPEAT
                        CASE RecPrognosisLine."Cost Type" OF
                          RecPrognosisLine."Cost Type"::Labor :
                            BEGIN
                              PrognosisTotalCost[1] := PrognosisTotalCost[1]+RecPrognosisLine."Prognosis Total Cost";
                              PrognosisTotalCost[6] := PrognosisTotalCost[6]+RecPrognosisLine."Prognosis Total Hours";
                            END;
                          RecPrognosisLine."Cost Type"::Material :
                            PrognosisTotalCost[2] := PrognosisTotalCost[2]+RecPrognosisLine."Prognosis Total Cost";
                          RecPrognosisLine."Cost Type"::Plant :
                            PrognosisTotalCost[3] := PrognosisTotalCost[3]+RecPrognosisLine."Prognosis Total Cost";
                          RecPrognosisLine."Cost Type"::Subcontracting :
                            PrognosisTotalCost[4] := PrognosisTotalCost[4]+RecPrognosisLine."Prognosis Total Cost";
                          RecPrognosisLine."Cost Type"::Sundry :
                            PrognosisTotalCost[5] := PrognosisTotalCost[5]+RecPrognosisLine."Prognosis Total Cost";
                        END;
                      UNTIL RecPrognosisLine.NEXT=0;

                    DataProc.InsertItem('[Prognosis total costs Labor]', PrognosisTotalCost[1], 'decimal');
                    DataProc.InsertItem('[Hours Prognosis]', PrognosisTotalCost[6], 'decimal');
                    DataProc.InsertItem('[Prognosis total costs Material]', PrognosisTotalCost[2], 'decimal');
                    DataProc.InsertItem('[Prognosis total costs Subcontracting]', PrognosisTotalCost[4], 'decimal');
                    DataProc.InsertItem('[Prognosis total costs Plant]', PrognosisTotalCost[3], 'decimal');
                    DataProc.InsertItem('[Prognosis total costs Sundry]', PrognosisTotalCost[5], 'decimal');
                    //#C019440.en

                    //21-07-09.sn
                    CASE RecProject."Prognosis Level" OF
                      RecProject."Prognosis Level"::Detailed:
                        BEGIN
                          RecPrognosis.CALCFIELDS("Prognosis Revenue", "Prognosis Total Cost");
                          DataProc.InsertItem('[Prognosis Level]', 'Detailed', 'varchar');
                          DataProc.InsertItem('[Prognosis Revenue]', RecPrognosis."Prognosis Revenue", 'decimal');
                          DataProc.InsertItem('[Prognosis Total Revenue]',
                            RecPrognosis.GetRevenueProjectInvoiced + RecPrognosis."Prognosis Revenue", 'decimal');
                          DataProc.InsertItem('[Prognosis Total Costs]', RecPrognosis."Prognosis Total Cost", 'decimal');
                          DataProc.InsertItem('[Prognosis Financial Result]',
                            RecPrognosis.GetRevenueProjectInvoiced + RecPrognosis."Prognosis Revenue" -RecPrognosis."Prognosis Total Cost",
                            'decimal');
                        END;
                      RecProject."Prognosis Level"::Rough:
                        BEGIN
                          DataProc.InsertItem('[Prognosis Level]', 'Rough', 'varchar');
                          DataProc.InsertItem('[Prognosis Total Revenue]', RecPrognosis."Rough Prognosis Total Revenues", 'decimal');
                          DataProc.InsertItem('[Prognosis Total Costs]', RecPrognosis."Rough Prognosis Total Cost", 'decimal');
                          DataProc.InsertItem('[Prognosis Financial Result]',
                            RecPrognosis."Rough Prognosis Total Revenues" - RecPrognosis."Rough Prognosis Total Cost", 'decimal');
                        END;
                    END;
                    IF RecPrognosis."Expected Finishing Date" <> 0D THEN
                      DataProc.InsertItem('[Expected Finishing Date]', CreateDateTimeFromDate(
                                           RecPrognosis."Expected Finishing Date"), 'datetime');
                    //21-07-09.en
                  END;
                END;

                //AH.sn 28-03-2011
                RecPrognosis.RESET;
                RecPrognosis.SETRANGE("Project No.",RecProject."No.");
                IF RecPrognosis.FINDLAST THEN BEGIN
                  IF RecPrognosis.NEXT(-1) <> 0 THEN BEGIN
                    IF RecPrognosis."Prognosis Date" <> 0D THEN BEGIN
                     DataProc.InsertItem('[Previous Prognosis Date]', CreateDateTimeFromDate(RecPrognosis."Prognosis Date"), 'datetime');
                      RecProject.SETFILTER("Prognosis Filter",'%1',RecPrognosis."Prognosis Date");
                      RecProject.CALCFIELDS(Prognosis);
                      DataProc.InsertItem('[Prognosis (Previous)]', RecProject.Prognosis, 'decimal');
                      CASE RecProject."Prognosis Level" OF
                        RecProject."Prognosis Level"::Detailed:
                          BEGIN
                            RecPrognosis.CALCFIELDS("Prognosis Revenue", "Prognosis Total Cost");
                            DataProc.InsertItem('[Prognosis Level (Previous)]', 'Detailed', 'varchar');
                            DataProc.InsertItem('[Prognosis Revenue (Previous)]', RecPrognosis."Prognosis Revenue", 'decimal');
                            DataProc.InsertItem('[Prognosis Total Revenue (Previous)]',
                              RecPrognosis.GetRevenueProjectInvoiced + RecPrognosis."Prognosis Revenue", 'decimal');
                            DataProc.InsertItem('[Prognosis Total Costs (Previous)]', RecPrognosis."Prognosis Total Cost", 'decimal');
                            DataProc.InsertItem('[Prognosis Financial Result (Previous)]',
                              RecPrognosis.GetRevenueProjectInvoiced + RecPrognosis."Prognosis Revenue" -RecPrognosis."Prognosis Total Cost",
                              'decimal');
                          END;
                        RecProject."Prognosis Level"::Rough:
                          BEGIN
                            DataProc.InsertItem('[Prognosis Level (Previous)]', 'Rough', 'varchar');
                            DataProc.InsertItem('[Prognosis Total Revenue (Previous]',
                              RecPrognosis."Rough Prognosis Total Revenues", 'decimal');
                            DataProc.InsertItem('[Prognosis Total Costs (Previous)]', RecPrognosis."Rough Prognosis Total Cost",
                             'decimal');
                            DataProc.InsertItem('[Prognosis Financial Result (Previous)]',
                              RecPrognosis."Rough Prognosis Total Revenues" - RecPrognosis."Rough Prognosis Total Cost", 'decimal');
                          END;
                      END;
                    END;
                  END;
                END;

                JobLedgerRec.RESET;
                JobLedgerRec.SETCURRENTKEY("Job No.","Posting Date");
                JobLedgerRec.SETRANGE("Job No.",RecProject."No.");
                JobLedgerRec.SETFILTER(JobLedgerRec."Total Cost (LCY)",'<>0');
                //JobLedgerRec.SETFILTER("Cost Type",'<>%1',JobLedgerRec."Cost Type"::Revenues);
                //dbeekman.en
                IF JobLedgerRec.FINDLAST THEN BEGIN
                  IF JobLedgerRec."Posting Date" <> 0D THEN
                    DataProc.InsertItem('[Last Cost Posting Date]', CreateDateTimeFromDate(JobLedgerRec."Posting Date"), 'datetime');
                END;

                //dbeekman.sn, 8-4-2010: M18348
                JobLedgerRec.SETRANGE(JobLedgerRec."Total Cost (LCY)");
                //JobLedgerRec.SETFILTER("Cost Type",'%1',JobLedgerRec."Cost Type"::Revenues);
                JobLedgerRec.SETFILTER(JobLedgerRec."Total Price (LCY)",'<>0');
                //dbeekman.en
                IF JobLedgerRec.FINDLAST THEN BEGIN
                  IF JobLedgerRec."Posting Date" <> 0D THEN
                    DataProc.InsertItem('[Last Revenue Posting Date]', CreateDateTimeFromDate(JobLedgerRec."Posting Date"), 'datetime');
                END;

                BudgetLineRec.SETRANGE("Project No.",RecProject."No.");
                BudgetLineRec.SETFILTER("Adjustment Filter",'%1','');
                BudgetLineRec.SETFILTER("Extension Filter",'%1','');
                IF BudgetLineRec.FINDFIRST THEN BEGIN
                  BudgetLineRec.CALCFIELDS("Total Amount");
                  DataProc.InsertItem('[Original Budget]', BudgetLineRec."Total Amount", 'decimal');
                END;

                //AH.sn 28-03-2011
                TryoutSuccessor.RESET;
                TryoutSuccessor.SETCURRENTKEY("Project No.");
                TryoutSuccessor.SETRANGE("Project No.",RecProject."No.");
                TryoutSuccessor.SETFILTER("Try-out No.", '<>%1', '');
                IF TryoutSuccessor.FINDFIRST THEN BEGIN
                  DataProc.InsertItem('[Try-out No.]',TryoutSuccessor."Try-out No.", 'varchar');
                  TryOutNo := TryoutSuccessor."Try-out No.";

                  RecContactFeatureType.SETCURRENTKEY("Relation Type", Code, "Feature Group");
                  RecContactFeatureType.SETRANGE("Relation Type", RecContactFeatureType."Relation Type"::"Try-out");
                  RecContactFeatureType.SETRANGE(Code, TryOutNo);
                  RecContactFeatureType.SETRANGE("Feature Group", 'Sector/marktgroep/objectsoort');
                  IF RecContactFeatureType.FINDFIRST THEN BEGIN
                    RecContactFeatureType.CALCFIELDS("Feature Description");
                    DataProc.InsertItem('[Sector/Market Group/Object Type Description]',
                      RecContactFeatureType."Feature Description", 'varchar');
                  END;
                END;

                TryoutSuccessor.RESET;
                TryoutSuccessor.SETCURRENTKEY("Project No.");
                TryoutSuccessor.SETRANGE("Project No.",RecProject."No.");
                TryoutSuccessor.SETFILTER(TryoutSuccessor."Try-out Quote", '<>%1', '');
                IF TryoutSuccessor.FINDFIRST THEN
                  DataProc.InsertItem('[Try-out Quote]',TryoutSuccessor."Try-out Quote", 'varchar');
                IF ProjectPrincipal.GET(RecProject."No.",RecProject."Bill-to Customer No.") THEN
                  IF ProjectPrincipal."Order Date" <> 0D THEN
                    DataProc.InsertItem('[Order Date]', CreateDateTimeFromDate(ProjectPrincipal."Order Date"), 'datetime');
                //AH.en

                DataProc.ExecuteRowInsert();
              END;//**4PS, SR, 04-02-14
            UNTIL RecProject.NEXT=0;
          END;

          DataProc.EndTransaction
        END;
        DataProc.CloseConnection;
      END;

      LineCounter := 0;
      NoOfLines := 0;
    END;

    PROCEDURE ProcessProjectLedgerTable@1100485000(ServerTxt@1100485003 : Text[30];DataBaseTxt@1100485002 : Text[30];LogInTxt@1100485001 : Text[30];PassWordTxt@1100485000 : Text[30];startmethod@1100485006 : Integer);
    VAR
      RecProjectLedger@1100485004 : Record 11072005;
      RecDataWarehouseSetup@1100485005 : Record 11012146;
      JobRegister@1100525000 : Record 11072012;
      EmployeeRec@1210190000 : Record 5200;
    BEGIN
      IF startmethod > 0 THEN BEGIN
        Window.UPDATE(1,'Project Posten');
      END;

      IF NOT RecDataWarehouseSetup.GET THEN BEGIN
        RecDataWarehouseSetup.INIT;
        RecDataWarehouseSetup.INSERT;
      END;

      RecProjectLedger.SETFILTER("Entry No.",'%1..',RecDataWarehouseSetup."Project Ledger Last Line No." + 1);
      NoOfLines := RecProjectLedger.COUNT;

      IF ISNULL(DataProc) THEN
        DataProc := DataProc.DataProcessor;

      IF DataProc.OpenConnection(ServerTxt,DataBaseTxt, 'staging.ProjectLedger', LogInTxt, PassWordTxt) THEN BEGIN
        IF DataProc.BeginTransaction() THEN BEGIN

          IF RecProjectLedger.FINDFIRST THEN BEGIN
            REPEAT
              LineCounter := LineCounter + 1;

              IF startmethod > 0 THEN BEGIN
                Window.UPDATE(2,ROUND(LineCounter/NoOfLines*10000,1));
              END;

              DataProc.InsertItem('Datumentijd', DateTimeStart, 'datetime');
              DataProc.InsertItem('[NAV Company]' , COMPANYNAME, 'varchar');
              DataProc.InsertItem('Sequence' , RecProjectLedger."Entry No.", 'int');
              DataProc.InsertItem('[Project No.]' , RecProjectLedger."Job No." , 'varchar');
              IF RecProjectLedger."Posting Date" <> 0D THEN
                DataProc.InsertItem('[Posting Date]', CreateDateTimeFromDate(RecProjectLedger."Posting Date"), 'datetime');
              DataProc.InsertItem('[Actual Preclosure Result]',RecProjectLedger."Actual Preclosure Result", 'decimal');
              DataProc.InsertItem('[Global Dimension 1]' , RecProjectLedger."Global Dimension 1 Code" , 'varchar');

              DataProc.InsertItem('[Document Nr.]',RecProjectLedger."Document No.", 'varchar');
              DataProc.InsertItem('[GL Ledger No.]',RecProjectLedger."No.", 'varchar');
              DataProc.InsertItem('Description',RecProjectLedger.Description, 'varchar');
              DataProc.InsertItem('Quantity',RecProjectLedger.Quantity, 'decimal');
              DataProc.InsertItem('[Total Cost]',RecProjectLedger."Total Cost (LCY)", 'decimal');
              DataProc.InsertItem('[Total Price]',RecProjectLedger."Total Price (LCY)", 'decimal');
              DataProc.InsertItem('[Global Dimension 2 Code]',RecProjectLedger."Global Dimension 2 Code", 'varchar');
              DataProc.InsertItem('[Source Code]',RecProjectLedger."Source Code", 'varchar');
              //dbeekman.sn, 8-4-2010: M18348
              DataProc.InsertItem('[Try-out No.]',RecProjectLedger."Try-out No.",'varchar');
              DataProc.InsertItem('[Vendor No.]',RecProjectLedger."Vendor No.",'varchar');
              DataProc.InsertItem('[Vendor Posting Group]',RecProjectLedger."Vendor Posting Group",'varchar');
              //dbeekman.en
              CASE RecProjectLedger."Entry Type" OF
                RecProjectLedger."Entry Type"::Usage:
                  DataProc.InsertItem('[Entry Type]','Usage', 'varchar');
                RecProjectLedger."Entry Type"::Sale:
                  DataProc.InsertItem('[Entry Type]','Sale', 'varchar');
              END;

              CASE RecProjectLedger."Cost Type" OF
                RecProjectLedger."Cost Type"::Labor:
                  DataProc.InsertItem('[Cost Type]','Labor', 'varchar');
                RecProjectLedger."Cost Type"::Material:
                  DataProc.InsertItem('[Cost Type]','Material', 'varchar');
                RecProjectLedger."Cost Type"::Subcontracting:
                  DataProc.InsertItem('[Cost Type]','Subcontractor', 'varchar');
                RecProjectLedger."Cost Type"::Plant:
                  DataProc.InsertItem('[Cost Type]','Plant', 'varchar');
                RecProjectLedger."Cost Type"::Sundry:
                  DataProc.InsertItem('[Cost Type]','Sundry', 'varchar');
                RecProjectLedger."Cost Type"::Revenues:
                  DataProc.InsertItem('[Cost Type]','Revenue', 'varchar');
              END;
              DataProc.InsertItem('[Employee No.]',RecProjectLedger."Employee No.", 'varchar');
              DataProc.InsertItem('[Description 2]',RecProjectLedger."Description 2", 'varchar');
              DataProc.InsertItem('[Wage Component]',RecProjectLedger."Wage Component", 'varchar');
              DataProc.InsertItem('[Closed Costs]',RecProjectLedger."Closed Costs", 'decimal');
              DataProc.InsertItem('[Closed Revenues]',RecProjectLedger."Closed Revenues", 'decimal');
              DataProc.InsertItem('Element',RecProjectLedger.Element, 'varchar');
              DataProc.InsertItem('[Extension Contract]',RecProjectLedger."Extension Contract", 'varchar');

              //**4PS.GB.sn 18-10-2011
              DataProc.InsertItem('[Supplying Company]' , RecProjectLedger."Supplying Company" , 'varchar');
              IF RecProjectLedger."Employee No." <> '' THEN BEGIN
                IF EmployeeRec.GET(RecProjectLedger."Employee No.") THEN
                  DataProc.InsertItem('[Trade Association (Employee)]' , EmployeeRec."Trade Association" , 'varchar');
              END;

              IF RecProjectLedger.Surcharge THEN
                DataProc.InsertItem('Surcharge','Yes', 'varchar')
              ELSE
                DataProc.InsertItem('Surcharge','No', 'varchar');

              DataProc.InsertItem('[Document Line No.]',RecProjectLedger."Document Line No.", 'int');
              DataProc.InsertItem('[Cost Component]',RecProjectLedger."Cost Component", 'varchar');

              //21-07-09.sn
              JobRegister.SETFILTER("From Entry No.", '..%1', RecProjectLedger."Entry No.");
              JobRegister.SETFILTER("To Entry No.", '%1..', RecProjectLedger."Entry No.");
              IF JobRegister.FINDFIRST THEN
                DataProc.InsertItem('[Creation Date]', CreateDateTimeFromDate(JobRegister."Creation Date"), 'datetime');
              //21-07-09.en
              DataProc.ExecuteRowInsert();

            UNTIL RecProjectLedger.NEXT=0;
          END;

          DataProc.EndTransaction;
          IF RecProjectLedger."Entry No." <> 0 THEN BEGIN
            RecDataWarehouseSetup."Project Ledger Last Line No." := RecProjectLedger."Entry No.";
            RecDataWarehouseSetup.MODIFY;
          END;
        END;
        DataProc.CloseConnection;
      END;

      LineCounter := 0;
      NoOfLines := 0;
    END;

    PROCEDURE ProcessServiceLedgerTable@1100525060(ServerTxt@1100485003 : Text[30];DataBaseTxt@1100485002 : Text[30];LogInTxt@1100485001 : Text[30];PassWordTxt@1100485000 : Text[30];startmethod@1100485006 : Integer);
    VAR
      RecServiceLedger@1100485004 : Record 11012819;
      RecDataWarehouseSetup@1100485005 : Record 11012146;
      ServRegister@1100525000 : Record 11012821;
      EmployeeRec@1210190000 : Record 5200;
    BEGIN
      IF startmethod > 0 THEN BEGIN
        Window.UPDATE(1,'Service Posten');
      END;

      IF NOT RecDataWarehouseSetup.GET THEN BEGIN
        RecDataWarehouseSetup.INIT;
        RecDataWarehouseSetup.INSERT;
      END;

      RecServiceLedger.SETFILTER("Entry No.",'%1..',RecDataWarehouseSetup."Service Ledger Last Line No." + 1);
      NoOfLines := RecServiceLedger.COUNT;

      IF ISNULL(DataProc) THEN
        DataProc := DataProc.DataProcessor;

      IF DataProc.OpenConnection(ServerTxt,DataBaseTxt, 'staging.ServiceLedger', LogInTxt, PassWordTxt) THEN BEGIN
        IF DataProc.BeginTransaction() THEN BEGIN

          IF RecServiceLedger.FINDFIRST THEN BEGIN
            REPEAT
              LineCounter := LineCounter + 1;

              IF startmethod > 0 THEN BEGIN
                Window.UPDATE(2,ROUND(LineCounter/NoOfLines*10000,1));
              END;

              DataProc.InsertItem('Datumentijd', DateTimeStart, 'datetime');
              DataProc.InsertItem('[NAV Company]' , COMPANYNAME, 'varchar');
              DataProc.InsertItem('Sequence' , RecServiceLedger."Entry No.", 'int');
              DataProc.InsertItem('[Service Contract No.]' , RecServiceLedger."Service Contract No." , 'varchar');

              CASE RecServiceLedger."Document Type" OF
                RecServiceLedger."Document Type"::"Purchase Invoice":
                  DataProc.InsertItem('[Document type]' , 'Purchase Invoice' , 'varchar');
                RecServiceLedger."Document Type"::"Purchase Credit Memo":
                  DataProc.InsertItem('[Document type]' , 'Purchase Credit Memo' , 'varchar');
                RecServiceLedger."Document Type"::"Sales Invoice":
                  DataProc.InsertItem('[Document type]' , 'Sales Invoice' , 'varchar');
                RecServiceLedger."Document Type"::"Sales Credit Memo":
                  DataProc.InsertItem('[Document type]' , 'Sales Credit Memo' , 'varchar');
              END;

              DataProc.InsertItem('[Document No.]' , RecServiceLedger."Document No." , 'varchar');
              DataProc.InsertItem('[Document Line No.]' , RecServiceLedger."Document Line No." , 'int');

              //**4PS.GB.sn 18-10-2011
              DataProc.InsertItem('[Supplying Company]' , RecServiceLedger."Supplying Company" , 'varchar');
              IF RecServiceLedger."Employee No." <> '' THEN BEGIN
                IF EmployeeRec.GET(RecServiceLedger."Employee No.") THEN
                  DataProc.InsertItem('[Trade Association (Employee)]' , EmployeeRec."Trade Association"  , 'varchar');
              END;
              //**4PS.GB.en 18-10-2011

              DataProc.InsertItem('[G/L Account]' , RecServiceLedger."G/L Account" , 'varchar');

              IF RecServiceLedger."Posting Date" <> 0D THEN
                DataProc.InsertItem('[Posting Date]' , CreateDateTimeFromDate(RecServiceLedger."Posting Date") , 'datetime');
              DataProc.InsertItem('[Global Dimension 1 code]' , RecServiceLedger."Global Dimension 1 Code" , 'varchar');
              DataProc.InsertItem('[Global Dimension 2 code]',RecServiceLedger."Global Dimension 2 Code", 'varchar');
              DataProc.InsertItem('Quantity',RecServiceLedger.Quantity, 'decimal');
              DataProc.InsertItem('Description',RecServiceLedger.Description, 'varchar');
              DataProc.InsertItem('[Description 2]',RecServiceLedger."Description 2", 'varchar');
              DataProc.InsertItem('[Total Cost]',RecServiceLedger."Total Cost (LCY)", 'decimal');
              DataProc.InsertItem('[Total Revenue]',RecServiceLedger."Total Revenue (LCY)", 'decimal');
              DataProc.InsertItem('[Service Order No.]',RecServiceLedger."Service Order No.", 'varchar');
              DataProc.InsertItem('[Employee No.]',RecServiceLedger."Employee No.", 'varchar');
              DataProc.InsertItem('[Wage Component]',RecServiceLedger."Wage Component", 'varchar');
              DataProc.InsertItem('[Source Code]',RecServiceLedger."Source Code", 'varchar');
              DataProc.InsertItem('[Service Location Code]',RecServiceLedger."Service Location No.", 'varchar');
      //TODO KK.so
      //        DataProc.InsertItem('Installation',RecServiceLedger.Installation, 'varchar');
      //        DataProc.InsertItem('[Installation Part]',RecServiceLedger."Installation Part", 'varchar');
      //TODO KK.eo
              //dbeekman.sn, 12-4-2010: M18348
              DataProc.InsertItem('[Vendor No.]',RecServiceLedger."Vendor No.",'varchar');
              RecServiceLedger.CALCFIELDS("Vendor Posting Group");
              DataProc.InsertItem('[Vendor Posting Group]',RecServiceLedger."Vendor Posting Group",'varchar');
              //dbeekman.en

              CASE RecServiceLedger."Cost Type" OF
                RecServiceLedger."Cost Type"::Labor:
                  DataProc.InsertItem('[Cost Type]','Labor', 'varchar');
                RecServiceLedger."Cost Type"::Material:
                  DataProc.InsertItem('[Cost Type]','Material', 'varchar');
                RecServiceLedger."Cost Type"::Subcontracting:
                  DataProc.InsertItem('[Cost Type]','Subcontractor', 'varchar');
                RecServiceLedger."Cost Type"::Plant:
                  DataProc.InsertItem('[Cost Type]','Plant', 'varchar');
                RecServiceLedger."Cost Type"::Sundry:
                  DataProc.InsertItem('[Cost Type]','Sundry', 'varchar');
                RecServiceLedger."Cost Type"::Revenues:
                  DataProc.InsertItem('[Cost Type]','Revenue', 'varchar');
              END;

              IF RecServiceLedger.Surcharge THEN
                DataProc.InsertItem('Surcharge','Yes', 'varchar')
              ELSE
                DataProc.InsertItem('Surcharge','No', 'varchar');

              CASE  RecServiceLedger."Source Type" OF
                RecServiceLedger."Source Type"::Call:
                  DataProc.InsertItem('[source type]','Call', 'varchar');
                RecServiceLedger."Source Type"::Contract:
                  DataProc.InsertItem('[source type]','Contract', 'varchar');
                RecServiceLedger."Source Type"::Direct:
                  DataProc.InsertItem('[source type]','Other', 'varchar');
                RecServiceLedger."Source Type"::Estimate:
                  DataProc.InsertItem('[source type]','Estimate', 'varchar');
              END;

              DataProc.InsertItem('[Closed Costs]',RecServiceLedger."Closed Costs", 'decimal');
              DataProc.InsertItem('[Closed Revenues]',RecServiceLedger."Closed Revenues", 'decimal');
              DataProc.InsertItem('[Actual Preclosure Result]',RecServiceLedger."Actual Preclosure Result", 'decimal');
              DataProc.InsertItem('[Cost Component]',RecServiceLedger."Cost Component", 'varchar');

              //21-07-09 Field In Contract is unknown
              //IF RecServiceLedger."In Contract" THEN
              //  DataProc.InsertItem('[In Contract]','Yes', 'varchar')
              //ELSE
              //  DataProc.InsertItem('[In Contract]','No', 'varchar');

      //        DataProc.InsertItem('[Service Control Year]',RecServiceLedger."Service Control Year", 'int');

              IF RecServiceLedger."Additional Cost" THEN
                DataProc.InsertItem('[Additional Cost]','Yes', 'varchar')
              ELSE
                DataProc.InsertItem('[Additional Cost]','No', 'varchar');

              ServRegister.SETFILTER("From Entry No.", '..%1', RecServiceLedger."Entry No.");
              ServRegister.SETFILTER("To Entry No.", '%1..', RecServiceLedger."Entry No.");
              IF ServRegister.FINDFIRST THEN
                DataProc.InsertItem('[Creation Date]', CreateDateTimeFromDate(ServRegister."Creation Date"), 'datetime');

              DataProc.ExecuteRowInsert();

            UNTIL RecServiceLedger.NEXT=0;
          END;

          DataProc.EndTransaction;
          IF RecServiceLedger."Entry No." <> 0 THEN BEGIN
            RecDataWarehouseSetup."Service Ledger Last Line No." := RecServiceLedger."Entry No.";
            RecDataWarehouseSetup.MODIFY;
          END;
        END;
        DataProc.CloseConnection;
      END;

      LineCounter := 0;
      NoOfLines := 0;
    END;

    PROCEDURE ProcessTryOutQuoteTable@1100485001(ServerTxt@1100485003 : Text[30];DataBaseTxt@1100485002 : Text[30];LogInTxt@1100485001 : Text[30];PassWordTxt@1100485000 : Text[30];startmethod@1100485009 : Integer);
    VAR
      TryOutQuoteRec@1100485004 : Record 11012758;
      TryOutRec@1100485005 : Record 11012750;
      TryOutSuccesorRec@1100485006 : Record 11012761;
      Estimate@1100485007 : Record 11012151;
      CostAmount@1100485008 : Decimal;
      FeatureRec@1100525000 : Record 11012753;
      SummarySheetLineRec@1210190000 : Record 11012171;
      SummarySheetRec@1210190001 : Record 11012172;
      "Estimate Summary Hours"@1210190002 : Decimal;
      "Estimate Summary Total"@1210190003 : Decimal;
      lEstimateFound@1210190004 : Boolean;
      lSummarySheetLineFound@1210190005 : Boolean;
    BEGIN
      IF startmethod > 0 THEN BEGIN
        Window.UPDATE(1,'Traject Offertes');
      END;

      IF ISNULL(DataProc) THEN
        DataProc := DataProc.DataProcessor;

      IF DataProc.OpenConnection(ServerTxt,DataBaseTxt, 'staging.TryOutQuote', LogInTxt, PassWordTxt) THEN BEGIN
        IF DataProc.BeginTransaction() THEN BEGIN

          //TryOutQuoteRec.SETRANGE(Status,'300');

          IF TryOutQuoteRec.FINDFIRST THEN BEGIN
            NoOfLines := TryOutQuoteRec.COUNT;

            REPEAT
              LineCounter := LineCounter + 1;
              IF startmethod > 0 THEN BEGIN
                Window.UPDATE(2,ROUND(LineCounter/NoOfLines*10000,1));
              END;

              DataProc.InsertItem('Datumentijd', DateTimeStart, 'datetime');
              DataProc.InsertItem('[NAV Company]' , COMPANYNAME, 'varchar');
              DataProc.InsertItem('[Try Out Quote]' , TryOutQuoteRec.Code , 'varchar');
              DataProc.InsertItem('Description' , TryOutQuoteRec.Description , 'varchar');
              DataProc.InsertItem('[Description 2]' , TryOutQuoteRec."Description 2" , 'varchar');
              DataProc.InsertItem('[Salesperson Code]' , TryOutQuoteRec."Salesperson Code" , 'varchar');
              DataProc.InsertItem('Discipline' , TryOutQuoteRec.Discipline , 'varchar');
              DataProc.InsertItem('[Contact No. (Company)]' , TryOutQuoteRec."Contact No." , 'varchar');

              DataProc.InsertItem('[Global Dimension 1]' , TryOutQuoteRec."Global Dimension 1 Code" , 'varchar');
              IF TryOutQuoteRec."Expected Starting Date" <> 0D THEN
                DataProc.InsertItem('[Expected Starting Date]' ,
                                     CreateDateTimeFromDate(TryOutQuoteRec."Expected Starting Date") , 'datetime');

              //dbeekman.sn, 8-4-2010: M18348
              IF TryOutQuoteRec."Send Date" <> 0D THEN
                DataProc.InsertItem('[Send Date]' , CreateDateTimeFromDate(TryOutQuoteRec."Send Date") , 'datetime');
              IF TryOutQuoteRec."Valid Until" <> 0D THEN
                DataProc.InsertItem('[Valid Until]' , CreateDateTimeFromDate(TryOutQuoteRec."Valid Until") , 'datetime');
              //dbeekman.en

             //#C019440.sn
             IF TryOutQuoteRec."Register Date" <> 0D THEN
               DataProc.InsertItem('[Register Date]' , CreateDateTimeFromDate(TryOutQuoteRec."Register Date") , 'datetime');
             DataProc.InsertItem('[Estimator]' , TryOutQuoteRec.Estimator , 'varchar');
             //#C019440.en

              IF TryOutQuoteRec."Creation Date" <> 0D THEN
                DataProc.InsertItem('[Creation Date]' , CreateDateTimeFromDate(TryOutQuoteRec."Creation Date") , 'datetime');

              IF TryOutQuoteRec."Order Date" <> 0D THEN
                DataProc.InsertItem('[Order Date]' , CreateDateTimeFromDate(TryOutQuoteRec."Order Date") , 'datetime');

              IF TryOutQuoteRec."Expected End Date" <> 0D THEN
                DataProc.InsertItem('[Expected Ending Date]' ,
                                     CreateDateTimeFromDate(TryOutQuoteRec."Expected End Date") , 'datetime');

              DataProc.InsertItem('[Post Code]' , TryOutQuoteRec."Post Code" , 'varchar');
              DataProc.InsertItem('[Country Code]' , TryOutQuoteRec."Country/Region Code" , 'varchar');

              IF TryOutRec.GET(TryOutQuoteRec."Try-out No.") THEN BEGIN

                DataProc.InsertItem('[Try Out]' , TryOutQuoteRec."Try-out No." , 'varchar');

                IF TryOutRec."Expected Order Date" <> 0D THEN
                  DataProc.InsertItem('[Expected Order Date]' ,
                                       CreateDateTimeFromDate(TryOutRec."Expected Order Date") , 'datetime');
              END;
              DataProc.InsertItem('[Offered Amount]' , TryOutQuoteRec."Offered Amount (LCY)" , 'decimal');

              TryOutSuccesorRec.SETRANGE("Try-out Quote",TryOutQuoteRec.Code);
              IF TryOutSuccesorRec.FINDSET THEN BEGIN
                REPEAT
                  IF TryOutSuccesorRec."Estimate No." <> '' THEN BEGIN
                    IF Estimate.GET(TryOutSuccesorRec."Estimate No.") THEN BEGIN
                      CostAmount := Estimate.GetCostAmount(TRUE);
                    END;
                  END;
                UNTIL TryOutSuccesorRec.NEXT = 0;
              END;

              DataProc.InsertItem('[Cost Price]' , CostAmount , 'decimal');
              DataProc.InsertItem('[Try Out Result]',  TryOutQuoteRec."Offered Amount (LCY)" - CostAmount ,'decimal');
              CostAmount := 0;

              DataProc.InsertItem('[Quote Status]' , TryOutQuoteRec.Status , 'varchar');

              FeatureRec.SETRANGE("Relation Type",FeatureRec."Relation Type"::"Try-out Quote");
              FeatureRec.SETRANGE(Code,TryOutQuoteRec.Code);
              FeatureRec.SETRANGE("Feature Group",'Scoringskans');
              //**4PS. sn. SR 17-02-14
              //IF FeatureRec.FINDFIRST THEN BEGIN
                //FeatureRec.CALCFIELDS("Feature Description");
                //DataProc.InsertItem('Hitrate' , FeatureRec."Feature Description" , 'varchar');
              //END;

              FeatureRec.SETRANGE("Feature Group",'Aanbiedingsvorm');
              IF FeatureRec.FINDFIRST THEN BEGIN
                FeatureRec.CALCFIELDS("Feature Description");
                DataProc.InsertItem('[Offer Type]' , FeatureRec."Feature Description" , 'varchar');
              END;

              FeatureRec.SETRANGE("Feature Group",'Afwijzingsreden');
              IF FeatureRec.FINDFIRST THEN BEGIN
                FeatureRec.CALCFIELDS("Feature Description");
                DataProc.InsertItem('[Reason Reject]' , FeatureRec."Feature Description" , 'varchar');
              END;

              FeatureRec.SETRANGE("Feature Group",'Risico Analyse');
              IF FeatureRec.FINDFIRST THEN BEGIN
                FeatureRec.CALCFIELDS("Feature Description");
                DataProc.InsertItem('[Risk Rating]' , FeatureRec."Feature Description" , 'varchar');
              END;

              //AH.sn 21-04-2011
              FeatureRec.SETRANGE("Feature Group",'Status besluitvorming');
              IF FeatureRec.FINDFIRST THEN BEGIN
                FeatureRec.CALCFIELDS("Feature Description");
                DataProc.InsertItem('[Status Decision (Contact Feature Type)]', FeatureRec."Feature Description" , 'varchar');
              END;
              //AH.en

              //AH.sn 14-03-2011
              IF TryOutQuoteRec."Status changed on" <> 0D THEN
                DataProc.InsertItem('[Status changed on]', CreateDateTimeFromDate(TryOutQuoteRec."Status changed on"), 'datetime');
              DataProc.InsertItem('[Bill-to Customer No.]', TryOutQuoteRec."Bill-to Customer No.", 'varchar');
              DataProc.InsertItem('[Scoring Percentage]', TryOutQuoteRec."Scoring Percentage", 'decimal');
              DataProc.InsertItem('[Leading]', TryOutQuoteRec.Leading, 'varchar');
              IF TryOutQuoteRec."Planning Informed" <> 0D THEN
                DataProc.InsertItem('[Planning Informed]', CreateDateTimeFromDate(TryOutQuoteRec."Planning Informed") ,'datetime');

              TryOutSuccesorRec.SETRANGE("Try-out Quote", TryOutQuoteRec.Code);
              lEstimateFound := FALSE;
              lSummarySheetLineFound := FALSE;
              IF TryOutSuccesorRec.FINDSET THEN BEGIN
                REPEAT
                  IF (TryOutSuccesorRec."Estimate No." <> '') AND (TryOutSuccesorRec."Leading Estimate") THEN BEGIN
                    IF Estimate.GET(TryOutSuccesorRec."Estimate No.") THEN BEGIN
                       lEstimateFound := TRUE;
                       Estimate.CALCFIELDS("Hours (Cost)");
                       DataProc.InsertItem('[Estimate No.]', Estimate."No.", 'varchar');
                       DataProc.InsertItem('[Hours (Estimate)]', Estimate."Hours (Cost)" , 'decimal');
                       DataProc.InsertItem('[Total (Estimate)]', Estimate.GetCostAmount(TRUE) , 'decimal');
                       SummarySheetRec.SETRANGE(SummarySheetRec."Estimate No.", TryOutSuccesorRec."Estimate No.");
                       IF SummarySheetRec.FINDSET THEN BEGIN
                         REPEAT
                           IF (SummarySheetRec."Summary Type" = SummarySheetRec."Summary Type"::Cost) AND
                              (SummarySheetRec."Sub-Estimate No." = '') THEN BEGIN
                             SummarySheetLineRec.SETRANGE("Estimate No.", SummarySheetRec."Estimate No.");
                             SummarySheetLineRec.SETRANGE(Summary, SummarySheetRec.Summary);
                             DataProc.InsertItem('[Summary]', SummarySheetRec.Summary, 'varchar');
                             SummarySheetLineRec.SETFILTER(SummarySheetLineRec."Transfer to Budget", '%1', TRUE);
                             IF SummarySheetLineRec.FINDFIRST THEN BEGIN
                               lSummarySheetLineFound := TRUE;
                               REPEAT
                                 "Estimate Summary Hours" := "Estimate Summary Hours" + SummarySheetLineRec.Hours;
                                 "Estimate Summary Total" := "Estimate Summary Total" + SummarySheetLineRec.Amount;
                               UNTIL SummarySheetLineRec.NEXT = 0;
                             DataProc.InsertItem('[Hours (Estimate Summary)]', "Estimate Summary Hours", 'decimal');
                             DataProc.InsertItem('[Total (Estimate Summary)]', "Estimate Summary Total", 'decimal');
                             "Estimate Summary Hours" := 0;
                             "Estimate Summary Total" := 0;
                             END;
                           END;
                         UNTIL (SummarySheetRec.NEXT = 0) OR (lSummarySheetLineFound);
                       END;
                    END;
                  END;
                UNTIL (TryOutSuccesorRec.NEXT = 0) OR (lEstimateFound);
              END;
              //AH.sn 14-03-2011
              DataProc.InsertItem('[Lost To]',  TryOutQuoteRec."Lost To" ,'varchar');//**4PS, SR, 04-02-14
              DataProc.ExecuteRowInsert();

            UNTIL TryOutQuoteRec.NEXT=0;
          END;

          DataProc.EndTransaction
        END;
        DataProc.CloseConnection;
      END;

      LineCounter := 0;
      NoOfLines := 0;
    END;

    PROCEDURE ProcessTryOutQuoteRateTable@1100485004(ServerTxt@1100485003 : Text[30];DataBaseTxt@1100485002 : Text[30];LogInTxt@1100485001 : Text[30];PassWordTxt@1100485000 : Text[30];startmethod@1100485011 : Integer);
    VAR
      TryOutQuoteRec@1100485004 : Record 11012758;
      TryOutSuccesorRec@1100485006 : Record 11012761;
      EstimateRec@1100485007 : Record 11012151;
      SummarySheetRec@1100485005 : Record 11012171;
      RateGroupRec@1100485009 : Record 11012162;
      TempRateRec@1100485010 : TEMPORARY Record 11012162;
    BEGIN
      IF startmethod > 0 THEN BEGIN
        Window.UPDATE(1,'Traject Offerte Uren');
      END;

      IF ISNULL(DataProc) THEN
        DataProc := DataProc.DataProcessor;

      IF DataProc.OpenConnection(ServerTxt,DataBaseTxt, 'staging.TryOutQuoteHours', LogInTxt, PassWordTxt) THEN BEGIN
        IF DataProc.BeginTransaction() THEN BEGIN

          //TryOutQuoteRec.SETRANGE(Status,'300');

          IF TryOutQuoteRec.FINDFIRST THEN BEGIN
            NoOfLines := TryOutQuoteRec.COUNT;

            REPEAT
              LineCounter := LineCounter + 1;
              IF startmethod > 0 THEN BEGIN
                Window.UPDATE(2,ROUND(LineCounter/NoOfLines*10000,1));
              END;
              TryOutSuccesorRec.SETRANGE("Try-out Quote",TryOutQuoteRec.Code);
              IF TryOutSuccesorRec.FINDSET THEN BEGIN
                REPEAT
                  IF TryOutSuccesorRec."Estimate No." <> '' THEN BEGIN
                    IF EstimateRec.GET(TryOutSuccesorRec."Estimate No.") THEN BEGIN
                      SummarySheetRec.INIT;
                      SummarySheetRec."Estimate No." := EstimateRec."No.";
                      SummarySheetRec.Type := SummarySheetRec.Type::"Cost Type";
                      SummarySheetRec."Cost Type" := SummarySheetRec."Cost Type"::Labor;

                      RateGroupRec.SETRANGE("Rate Group",'');
                      IF RateGroupRec.FINDSET THEN BEGIN
                        REPEAT
                          IF NOT TempRateRec.GET(RateGroupRec."Rate Group",RateGroupRec."Rate Code") THEN BEGIN
                            TempRateRec.INIT;
                            TempRateRec."Rate Group" := RateGroupRec."Rate Group";
                            TempRateRec."Rate Code" := RateGroupRec."Rate Code";
                            TempRateRec."Team Size" := RateGroupRec."Cost Rate";
                            TempRateRec.INSERT;
                          END;

                          SummarySheetRec.Hours := 0;
                          SummarySheetRec."Rate Filter" := RateGroupRec."Rate Code";
                          SummarySheetRec.UpdateEstimateTotal;
                          TempRateRec."Cost Rate" := TempRateRec."Cost Rate" + SummarySheetRec.Hours;
                          TempRateRec.MODIFY;

                        UNTIL RateGroupRec.NEXT = 0;
                      END;
                    END;
                  END;
                UNTIL TryOutSuccesorRec.NEXT = 0;
              END;


              IF TempRateRec.FINDFIRST THEN BEGIN
                REPEAT
                  DataProc.InsertItem('Datumentijd', DateTimeStart, 'datetime');
                  DataProc.InsertItem('[NAV Company]' , COMPANYNAME, 'varchar');
                  DataProc.InsertItem('[Try Out Quote No.]' , TryOutQuoteRec.Code , 'varchar');
                  DataProc.InsertItem('[Rate Code]' , TempRateRec."Rate Code" , 'varchar');
                  //DataProc.InsertItem('Hours' , TempRateRec."Cost Rate" , 'decimal');
                  DataProc.InsertItem('Rate' , TempRateRec."Team Size" , 'decimal');
                  DataProc.ExecuteRowInsert();
                UNTIL TempRateRec.NEXT = 0;
                TempRateRec.DELETEALL;
              END;
            UNTIL TryOutQuoteRec.NEXT=0;
          END;

          DataProc.EndTransaction
        END;
        DataProc.CloseConnection;
      END;

      LineCounter := 0;
      NoOfLines := 0;
    END;

    PROCEDURE ProcessBudgetLedgerTable@1100485005(ServerTxt@1100485003 : Text[30];DataBaseTxt@1100485002 : Text[30];LogInTxt@1100485001 : Text[30];PassWordTxt@1100485000 : Text[30];startmethod@1100485005 : Integer);
    VAR
      BudgetLedgerRec@1100485004 : Record 96;
    BEGIN
      IF startmethod > 0 THEN BEGIN
        Window.UPDATE(1,'Grootboek Budget');
      END;

      IF ISNULL(DataProc) THEN
        DataProc := DataProc.DataProcessor;

      IF DataProc.OpenConnection(ServerTxt,DataBaseTxt, 'staging.BudgetLedger', LogInTxt, PassWordTxt) THEN BEGIN
        IF DataProc.BeginTransaction() THEN BEGIN

          //ahollebrandse.sn 07-03-2011
          BudgetLedgerRec.RESET;
          IF DataWareHouseSetupRec."Budget Ledger From Date" <> 0D THEN BEGIN
            BudgetLedgerRec.SETCURRENTKEY("Budget Name", "G/L Account No.", Date);
            BudgetLedgerRec.SETFILTER(Date, '%1..', DataWareHouseSetupRec."Budget Ledger From Date");
          END;
          //ahollebrandse.en 07-03-2011

          IF BudgetLedgerRec.FINDFIRST THEN BEGIN
            NoOfLines := BudgetLedgerRec.COUNT;

            REPEAT
              LineCounter := LineCounter + 1;
              IF startmethod > 0 THEN BEGIN
                Window.UPDATE(2,ROUND(LineCounter/NoOfLines*10000,1));
              END;

              DataProc.InsertItem('Datumentijd', DateTimeStart, 'datetime');
              DataProc.InsertItem('[NAV Company]' , COMPANYNAME, 'varchar');
              DataProc.InsertItem('Sequence' , BudgetLedgerRec."Entry No." , 'int');
              DataProc.InsertItem('Budget' , BudgetLedgerRec."Budget Name" ,'varchar');
              DataProc.InsertItem('[GL account]' , BudgetLedgerRec."G/L Account No." ,'varchar');
              IF BudgetLedgerRec.Date <> 0D THEN
                DataProc.InsertItem('Date', CreateDateTimeFromDate(BudgetLedgerRec.Date) ,'datetime');
              DataProc.InsertItem('[Global Dimension 1]' , BudgetLedgerRec."Global Dimension 1 Code" ,'varchar');
              DataProc.InsertItem('[Global Dimension 2]' , BudgetLedgerRec."Global Dimension 2 Code" ,'varchar');

              DataProc.InsertItem('Amount' , BudgetLedgerRec.Amount ,'decimal');
              DataProc.InsertItem('Description' , BudgetLedgerRec.Description ,'varchar');
              DataProc.InsertItem('[Company Unit]' , BudgetLedgerRec."Business Unit Code" ,'varchar');
              DataProc.InsertItem('[User ID]' , BudgetLedgerRec."User ID" ,'varchar');

              DataProc.ExecuteRowInsert();

            UNTIL BudgetLedgerRec.NEXT=0;
          END;

          DataProc.EndTransaction
        END;
        DataProc.CloseConnection;
      END;

      LineCounter := 0;
      NoOfLines := 0;
    END;

    PROCEDURE ProcessCustomerLedgerTable@1100525064(ServerTxt@1100485003 : Text[30];DataBaseTxt@1100485002 : Text[30];LogInTxt@1100485001 : Text[30];PassWordTxt@1100485000 : Text[30];startmethod@1100485005 : Integer);
    VAR
      CustLedgerRec@1100525000 : Record 21;
    BEGIN
      IF startmethod > 0 THEN BEGIN
        Window.UPDATE(1,'Klantposten');
      END;

      IF ISNULL(DataProc) THEN
        DataProc := DataProc.DataProcessor;

      IF DataProc.OpenConnection(ServerTxt,DataBaseTxt, 'staging.CustomerLedger', LogInTxt, PassWordTxt) THEN BEGIN
        IF DataProc.BeginTransaction() THEN BEGIN

          IF CustLedgerRec.FINDFIRST THEN BEGIN
            NoOfLines := CustLedgerRec.COUNT;

            REPEAT
              LineCounter := LineCounter + 1;
              IF startmethod > 0 THEN BEGIN
                Window.UPDATE(2,ROUND(LineCounter/NoOfLines*10000,1));
              END;

              CustLedgerRec.CALCFIELDS("Remaining Amt. (LCY)");//**4PS, SR, 04-02-14
              IF (CustLedgerRec."Posting Date" = 0D) OR (CustLedgerRec."Posting Date" >= DataWareHouseSetupRec."Customer Posting Date") OR
                 (CustLedgerRec."Remaining Amt. (LCY)"<>0)
              THEN BEGIN //**4PS, SR, 04-02-14

                DataProc.InsertItem('Datumentijd', DateTimeStart, 'datetime');
                DataProc.InsertItem('[NAV Company]' , COMPANYNAME, 'varchar');
                DataProc.InsertItem('Sequence' , CustLedgerRec."Entry No." , 'int');
                DataProc.InsertItem('[Customer No.]' , CustLedgerRec."Customer No." ,'varchar');
                IF CustLedgerRec."Posting Date" <> 0D THEN
                  DataProc.InsertItem('[Posting Date]', CreateDateTimeFromDate(CustLedgerRec."Posting Date") ,'datetime');

                CASE CustLedgerRec."Document Type" OF
                  CustLedgerRec."Document Type"::Payment:
                    DataProc.InsertItem('[Document Type]' , 'Payment' ,'varchar')  ;
                  CustLedgerRec."Document Type"::Invoice:
                    DataProc.InsertItem('[Document Type]' , 'Invoice' ,'varchar');
                  CustLedgerRec."Document Type"::"Credit Memo":
                    DataProc.InsertItem('[Document Type]' , 'Credit Memo' ,'varchar');
                  CustLedgerRec."Document Type"::"Finance Charge Memo":
                    DataProc.InsertItem('[Document Type]' , 'Finance Charge Memo' ,'varchar');
                  CustLedgerRec."Document Type"::Reminder:
                    DataProc.InsertItem('[Document Type]' , 'Reminder' ,'varchar');
                  CustLedgerRec."Document Type"::Refund:
                    DataProc.InsertItem('[Document Type]' , 'Refund' ,'varchar');
                END;
                DataProc.InsertItem('[Document No.]' , CustLedgerRec."Document No." ,'varchar');
                DataProc.InsertItem('Description' , CustLedgerRec.Description ,'varchar');
                DataProc.InsertItem('[Currency Code]' , CustLedgerRec."Currency Code" ,'varchar');
                DataProc.InsertItem('[Customer Posting Group]' , CustLedgerRec."Customer Posting Group" ,'varchar');
                DataProc.InsertItem('[Global Dimension 1 Code]' , CustLedgerRec."Global Dimension 1 Code" ,'varchar');
                DataProc.InsertItem('[Salesperson Code]' , CustLedgerRec."Salesperson Code" ,'varchar');
                DataProc.InsertItem('[Source Code]' , CustLedgerRec."Source Code" ,'varchar');
                IF CustLedgerRec."Due Date" <> 0D THEN
                  DataProc.InsertItem('[Due Date]', CreateDateTimeFromDate(CustLedgerRec."Due Date") ,'datetime');
                IF CustLedgerRec."Document Date" <> 0D THEN
                  DataProc.InsertItem('[Document Date]', CreateDateTimeFromDate(CustLedgerRec."Document Date") ,'datetime');
                //dbeekman.sn, 8-4-2010: M18348
                CustLedgerRec.CALCFIELDS(Amount,"Remaining Amount","Remaining Amt. (LCY)","Amount (LCY)");
                DataProc.InsertItem('[Remaining Amt. (LCY)]' , CustLedgerRec."Remaining Amt. (LCY)" ,'decimal');
                DataProc.InsertItem('[Amount (LCY)]' , CustLedgerRec."Amount (LCY)" ,'decimal');
                DataProc.InsertItem('[On Hold]' , CustLedgerRec."On Hold" ,'varchar');
                //dbeekman.en
                DataProc.InsertItem('Amount' , CustLedgerRec.Amount ,'decimal');
                DataProc.InsertItem('[Remaining Amount]' , CustLedgerRec."Remaining Amount" ,'decimal');

                DataProc.ExecuteRowInsert();
              END;//**4PS, SR 04-02-14
            UNTIL CustLedgerRec.NEXT=0;
          END;

          DataProc.EndTransaction
        END;
        DataProc.CloseConnection;
      END;

      LineCounter := 0;
      NoOfLines := 0;
    END;

    PROCEDURE ProcessVendorLedgerTable@1100525080(ServerTxt@1100485003 : Text[30];DataBaseTxt@1100485002 : Text[30];LogInTxt@1100485001 : Text[30];PassWordTxt@1100485000 : Text[30];startmethod@1100485005 : Integer);
    VAR
      VendLedgerRec@1100525000 : Record 25;
    BEGIN
      IF startmethod > 0 THEN BEGIN
        Window.UPDATE(1,'Leveranciersposten');
      END;

      IF ISNULL(DataProc) THEN
        DataProc := DataProc.DataProcessor;

      IF DataProc.OpenConnection(ServerTxt,DataBaseTxt, 'staging.VendorLedger', LogInTxt, PassWordTxt) THEN BEGIN
        IF DataProc.BeginTransaction() THEN BEGIN

          IF VendLedgerRec.FINDFIRST THEN BEGIN
            NoOfLines := VendLedgerRec.COUNT;

            REPEAT
              LineCounter := LineCounter + 1;
              IF startmethod > 0 THEN BEGIN
                Window.UPDATE(2,ROUND(LineCounter/NoOfLines*10000,1));
              END;

              VendLedgerRec.CALCFIELDS("Remaining Amt. (LCY)");//**4PS, SR, 04-02-14
              IF (VendLedgerRec."Posting Date" = 0D) OR (VendLedgerRec."Posting Date" >= DataWareHouseSetupRec."Vendor Posting Date") OR
                 (VendLedgerRec."Remaining Amt. (LCY)" <> 0)
              THEN BEGIN //**4PS, SR, 04-02-14
                DataProc.InsertItem('Datumentijd', DateTimeStart, 'datetime');
                DataProc.InsertItem('[NAV Company]' , COMPANYNAME, 'varchar');
                DataProc.InsertItem('Sequence' , VendLedgerRec."Entry No." , 'int');
                DataProc.InsertItem('[Vendor No.]' , VendLedgerRec."Vendor No." ,'varchar');
                DataProc.InsertItem('[Description]' , VendLedgerRec.Description ,'varchar'); //**4PS, SR, 04-02-14
                DataProc.InsertItem('[Source code]' , VendLedgerRec."Source Code" ,'varchar');//**4PS, SR, 04-02-14

                IF VendLedgerRec."Posting Date" <> 0D THEN
                  DataProc.InsertItem('[Posting Date]', CreateDateTimeFromDate(VendLedgerRec."Posting Date") ,'datetime');

                CASE VendLedgerRec."Document Type" OF
                  VendLedgerRec."Document Type"::Payment:
                    DataProc.InsertItem('[Document Type]' , 'Payment' ,'varchar')  ;
                  VendLedgerRec."Document Type"::Invoice:
                    DataProc.InsertItem('[Document Type]' , 'Invoice' ,'varchar');
                  VendLedgerRec."Document Type"::"Credit Memo":
                    DataProc.InsertItem('[Document Type]' , 'Credit Memo' ,'varchar');
                  VendLedgerRec."Document Type"::"Finance Charge Memo":
                    DataProc.InsertItem('[Document Type]' , 'Finance Charge Memo' ,'varchar');
                  VendLedgerRec."Document Type"::Reminder:
                    DataProc.InsertItem('[Document Type]' , 'Reminder' ,'varchar');
                  VendLedgerRec."Document Type"::Refund:
                    DataProc.InsertItem('[Document Type]' , 'Refund' ,'varchar');
                END;
                DataProc.InsertItem('[Document No.]' , VendLedgerRec."Document No." ,'varchar');
                DataProc.InsertItem('[Currency Code]' , VendLedgerRec."Currency Code" ,'varchar');
                DataProc.InsertItem('[Vendor Posting Group]' , VendLedgerRec."Vendor Posting Group" ,'varchar');
                DataProc.InsertItem('[Global Dimension 1 Code]' , VendLedgerRec."Global Dimension 1 Code" ,'varchar');
                DataProc.InsertItem('[On Hold]' , VendLedgerRec."On Hold" ,'varchar');
                IF VendLedgerRec."Due Date" <> 0D THEN
                  DataProc.InsertItem('[Due Date]', CreateDateTimeFromDate(VendLedgerRec."Due Date") ,'datetime');
                IF VendLedgerRec."Pmt. Discount Date" <> 0D THEN
                  DataProc.InsertItem('[Pmt. Discount Date]', CreateDateTimeFromDate(VendLedgerRec."Pmt. Discount Date") ,'datetime');
                DataProc.InsertItem('[Original Pmt. Disc. Possible]' , VendLedgerRec."Original Pmt. Disc. Possible" ,'decimal');
                IF VendLedgerRec."Document Date" <> 0D THEN
                  DataProc.InsertItem('[Document Date]', CreateDateTimeFromDate(VendLedgerRec."Document Date") ,'datetime');
                DataProc.InsertItem('[Remaining Pmt. Disc. Possible]' , VendLedgerRec."Remaining Pmt. Disc. Possible" ,'decimal');
                DataProc.InsertItem('[Approvement Initials]' , VendLedgerRec."Approvement Initials" ,'varchar');
                //dbeekman.sn, 8-4-2010: M18348
                VendLedgerRec.CALCFIELDS(Amount,"Remaining Amount","Amount (LCY)","Remaining Amt. (LCY)");
                DataProc.InsertItem('[Amount (LCY)]' , VendLedgerRec."Amount (LCY)" ,'decimal');
                DataProc.InsertItem('[Remaining Amt. (LCY)]' , VendLedgerRec."Remaining Amt. (LCY)" ,'decimal');
                //dbeekman.en
                DataProc.InsertItem('Amount' , VendLedgerRec.Amount ,'decimal');
                DataProc.InsertItem('[Remaining Amount]' , VendLedgerRec."Remaining Amount" ,'decimal');
                DataProc.ExecuteRowInsert();
              END;//**4PS, SR, 04-02-14
            UNTIL VendLedgerRec.NEXT=0;
          END;

          DataProc.EndTransaction
        END;
        DataProc.CloseConnection;
      END;

      LineCounter := 0;
      NoOfLines := 0;
    END;

    PROCEDURE ProcessGeneralLedgerTable@1100485006(ServerTxt@1100485003 : Text[30];DataBaseTxt@1100485002 : Text[30];LogInTxt@1100485001 : Text[30];PassWordTxt@1100485000 : Text[30];startmethod@1100485004 : Integer);
    VAR
      RecDataWarehouseSetup@1100485005 : Record 11012146;
      GLEntryRec@1100485006 : Record 17;
      GLRegister@1100525000 : Record 45;
    BEGIN
      IF startmethod > 0 THEN BEGIN
        Window.UPDATE(1,'Grootboekposten');
      END;
      IF ISNULL(DataProc) THEN
        DataProc := DataProc.DataProcessor;

      IF DataProc.OpenConnection(ServerTxt,DataBaseTxt, 'staging.GeneralLedger', LogInTxt, PassWordTxt) THEN BEGIN
        IF DataProc.BeginTransaction() THEN BEGIN

          IF NOT RecDataWarehouseSetup.GET THEN BEGIN
            RecDataWarehouseSetup.INIT;
            RecDataWarehouseSetup.INSERT;
          END;

          IF RecDataWarehouseSetup."General Ledger Last Line No." <> 0 THEN
            GLEntryRec.SETFILTER("Entry No.",'%1..',RecDataWarehouseSetup."General Ledger Last Line No." + 1);

          NoOfLines := GLEntryRec.COUNT;

          IF GLEntryRec.FINDFIRST THEN BEGIN
            REPEAT
              LineCounter := LineCounter + 1;
              IF startmethod > 0 THEN BEGIN
                Window.UPDATE(2,ROUND(LineCounter/NoOfLines*10000,1));
              END;

              DataProc.InsertItem('Datumentijd', DateTimeStart, 'datetime');
              DataProc.InsertItem('[NAV Company]' , COMPANYNAME, 'varchar');
              DataProc.InsertItem('Sequence' , GLEntryRec."Entry No." , 'int');
              IF GLEntryRec."Posting Date" <> 0D THEN
                DataProc.InsertItem('[Posting Date]', CreateDateTimeFromDate(GLEntryRec."Posting Date") ,'datetime');

              CASE GLEntryRec."Document Type" OF
                GLEntryRec."Document Type"::Payment:
                  DataProc.InsertItem('[Document Type]' , 'Betaling', 'varchar');
                GLEntryRec."Document Type"::Invoice:
                  DataProc.InsertItem('[Document Type]' , 'Factuur', 'varchar');
                GLEntryRec."Document Type"::"Credit Memo":
                  DataProc.InsertItem('[Document Type]' , 'Credit factuur', 'varchar');
                GLEntryRec."Document Type"::"Finance Charge Memo":
                  DataProc.InsertItem('[Document Type]' , 'Rentefactuur', 'varchar');
                GLEntryRec."Document Type"::Reminder:
                  DataProc.InsertItem('[Document Type]' , 'Aanmaning', 'varchar');
                GLEntryRec."Document Type"::Refund:
                  DataProc.InsertItem('[Document Type]' , 'Terugbetaling', 'varchar');
              END;

              IF GLEntryRec."Document Date" <> 0D THEN
                DataProc.InsertItem('[Document Date]', CreateDateTimeFromDate(GLEntryRec."Document Date") ,'datetime');
              DataProc.InsertItem('[Source Code]' , GLEntryRec."Source Code" , 'varchar');
              DataProc.InsertItem('[Document No.]' , GLEntryRec."Document No." , 'varchar');
              DataProc.InsertItem('[GL No.]' , GLEntryRec."G/L Account No." , 'varchar');
              DataProc.InsertItem('[Global Dimension 1]' , GLEntryRec."Global Dimension 1 Code" , 'varchar');
              DataProc.InsertItem('Description' , GLEntryRec.Description , 'varchar');
              DataProc.InsertItem('[Project No.]' , GLEntryRec."Job No." , 'varchar');
              DataProc.InsertItem('[Service Contract No.]' , GLEntryRec."Service Contract No." , 'varchar');
              DataProc.InsertItem('[Service Order No.]' , GLEntryRec."Service Order No." , 'varchar');
              DataProc.InsertItem('[Employee No.]' , GLEntryRec."Employee No." , 'varchar');
              DataProc.InsertItem('[Global Dimension 2]' , GLEntryRec."Global Dimension 2 Code" , 'varchar');
              DataProc.InsertItem('[Company Posting Group]' , GLEntryRec."Gen. Bus. Posting Group" , 'varchar');

              DataProc.InsertItem('[Product Posting Group]' , GLEntryRec."Gen. Prod. Posting Group" , 'varchar');
              DataProc.InsertItem('Amount' , GLEntryRec.Amount , 'decimal');

              //**4PS.GB.sn 18-10-2011
              DataProc.InsertItem('[Receiving Company]' , GLEntryRec."Receiving Company" , 'varchar');

              //21-07-09.sn
              IF GLEntryRec."Posting Date" = NORMALDATE(GLEntryRec."Posting Date") THEN
                DataProc.InsertItem('[Ultimo Date]','No', 'varchar')
              ELSE
                DataProc.InsertItem('[Ultimo Date]','Yes', 'varchar');
              //21-07-09.en

              GLRegister.SETFILTER("From Entry No.", '..%1', GLEntryRec."Entry No.");
              GLRegister.SETFILTER("To Entry No.", '%1..', GLEntryRec."Entry No.");
              IF GLRegister.FINDFIRST THEN
                DataProc.InsertItem('[Creation Date]', CreateDateTimeFromDate(GLRegister."Creation Date"), 'datetime');


              DataProc.ExecuteRowInsert();

            UNTIL GLEntryRec.NEXT=0;
          END;

          IF GLEntryRec."Entry No." <> 0 THEN BEGIN
            RecDataWarehouseSetup."General Ledger Last Line No." := GLEntryRec."Entry No.";
            RecDataWarehouseSetup.MODIFY;
          END;
          DataProc.EndTransaction
        END;
        DataProc.CloseConnection;
      END;

      LineCounter := 0;
      NoOfLines := 0;
    END;

    PROCEDURE ProcessTryOutTable@1100485007(ServerTxt@1100485003 : Text[30];DataBaseTxt@1100485002 : Text[30];LogInTxt@1100485001 : Text[30];PassWordTxt@1100485000 : Text[30];startmethod@1100485008 : Integer);
    VAR
      TryOutRec@1100485004 : Record 11012750;
      SalesPersonRec@1100485007 : Record 13;
      TryOutLineRec@1100525000 : Record 11012755;
      ContFeatureType@1100525001 : Record 11012753;
    BEGIN
      IF startmethod > 0 THEN BEGIN
        Window.UPDATE(1,'Trajecten');
      END;

      NoOfLines := TryOutRec.COUNT;

      IF ISNULL(DataProc) THEN
        DataProc := DataProc.DataProcessor;

      IF DataProc.OpenConnection(ServerTxt,DataBaseTxt, 'staging.[Try-Out]', LogInTxt, PassWordTxt) THEN BEGIN
        IF DataProc.BeginTransaction() THEN BEGIN

          IF TryOutRec.FINDFIRST THEN BEGIN
            REPEAT
              LineCounter := LineCounter + 1;
              IF startmethod > 0 THEN BEGIN
                Window.UPDATE(2,ROUND(LineCounter/NoOfLines*10000,1));
              END;

              DataProc.InsertItem('Datumentijd', DateTimeStart, 'datetime');
              DataProc.InsertItem('[NAV Company]' , COMPANYNAME, 'varchar');
              DataProc.InsertItem('[Try-Out]' , TryOutRec.Code , 'varchar');
              DataProc.InsertItem('[Global Dimension 1]' ,TryOutRec."Global Dimension 1 Code", 'varchar');

              DataProc.InsertItem('Description' , TryOutRec.Description , 'varchar');
              DataProc.InsertItem('Salesperson' , TryOutRec."Salesperson Code" , 'varchar');
              IF SalesPersonRec.GET(TryOutRec."Salesperson Code") THEN
                DataProc.InsertItem('[Salesperson Name]' , SalesPersonRec.Name , 'varchar');
              DataProc.InsertItem('[Order Amount]' , TryOutRec."Order Amount (LCY)" , 'decimal');

              IF TryOutRec."Creation Date" <> 0D THEN
                DataProc.InsertItem('[Creation Date]' , CreateDateTimeFromDate(TryOutRec."Creation Date"), 'datetime');

              IF TryOutRec."Expected Starting Date" <> 0D THEN
                DataProc.InsertItem('[Expected Startdate]' , CreateDateTimeFromDate(TryOutRec."Expected Starting Date"), 'datetime');

              IF TryOutRec."Expected End Date" <> 0D THEN
                DataProc.InsertItem('[Expected EndDate]' , CreateDateTimeFromDate(TryOutRec."Expected End Date"), 'datetime');

              IF TryOutRec."Expected Order Date" <> 0D THEN
                DataProc.InsertItem('[Expected OrderDate]' , CreateDateTimeFromDate(TryOutRec."Expected Order Date"), 'datetime');

              //IF (TryOutRec."Expected Starting Date" <> 0D) AND (TryOutRec."Expected End Date" <> 0D) THEN BEGIN
                //DurationInt := TryOutRec."Expected End Date" - TryOutRec."Expected Starting Date";
                //DataProc.InsertItem('Duration' , DurationInt, 'int');
              //END;

              //IF (TryOutRec."Expected Starting Date" <> 0D) AND (DurationInt <> 0) THEN BEGIN
               // TodayMinusStart := CumFilter - TryOutRec."Expected Starting Date";
                //DataProc.InsertItem('[Try-Out Elapse Time]' , (TodayMinusStart / DurationInt) , 'int');
              //END;

              DataProc.InsertItem('Status' , TryOutRec.Status , 'varchar');

              IF TryOutRec."Order Date" <> 0D THEN
                DataProc.InsertItem('[Order Date]' , CreateDateTimeFromDate(TryOutRec."Order Date"), 'datetime');

              IF TryOutRec.Order THEN
                DataProc.InsertItem('[Order]' , 'Yes' , 'varchar')
              ELSE
                DataProc.InsertItem('[Order]' , 'No' , 'varchar');

              DataProc.InsertItem('[Post Code]' , TryOutRec."Post Code" , 'varchar');
              DataProc.InsertItem('[Country Code]' , TryOutRec."Country/Region Code" , 'varchar');

              TryOutLineRec.SETRANGE("Try-out No.",TryOutRec.Code);
              IF TryOutLineRec.FINDFIRST THEN BEGIN
                //dbeekman.sn, 8-4-2010: M18348
                IF TryOutLineRec."Contact Type" = 'OPDRACHTGEVER' THEN
                  DataProc.InsertItem('[Contact No. (Company)]' , TryOutLineRec."Contact No." , 'varchar');
                //dbeekman.en
              END;

              ContFeatureType.SETRANGE("Relation Type",ContFeatureType."Relation Type"::"Try-out");
              ContFeatureType.SETRANGE(Code,TryOutRec.Code);
              ContFeatureType.SETRANGE("Feature Group",'Sector/marktgroep/objectsoort');
              //dbeekman.sn, 8-4-2010: M19010
              IF ContFeatureType.FINDFIRST THEN BEGIN
                ContFeatureType.CALCFIELDS("Feature Description");
                DataProc.InsertItem('[Sector/Market/Object]' , ContFeatureType."Feature Description" , 'varchar');
              END;
              //dbeekman.en, 8-4-2010

              //AH.sn 21-04-2011
              ContFeatureType.SETRANGE("Feature Group",'Status besluitvorming');
              IF ContFeatureType.FINDFIRST THEN BEGIN
                ContFeatureType.CALCFIELDS("Feature Description");
                DataProc.InsertItem('[Status Decision (Contact Feature Type)]', ContFeatureType."Feature Description" , 'varchar');
              END;
              //AH.en

              //AH.sn 07-03-2011
              DataProc.InsertItem('[Cost Estimate]', TryOutRec."Cost Estimate", 'decimal');
              DataProc.InsertItem('[Scoring Percentage]', TryOutRec."Scoring Percentage", 'decimal');
              TryOutRec.CALCFIELDS(TryOutRec."Posted Hours");
              DataProc.InsertItem('[Posted Hours]', TryOutRec."Posted Hours", 'decimal');
              //AHe.en

              DataProc.ExecuteRowInsert();

            UNTIL TryOutRec.NEXT=0;
          END;

          DataProc.EndTransaction;
        END;
        DataProc.CloseConnection;
      END;

      LineCounter := 0;
      NoOfLines := 0;
    END;

    PROCEDURE ProcessTryOutLineTable@1100525009(ServerTxt@1100485003 : Text[30];DataBaseTxt@1100485002 : Text[30];LogInTxt@1100485001 : Text[30];PassWordTxt@1100485000 : Text[30];startmethod@1100485005 : Integer);
    VAR
      TryoutLine@1100485004 : Record 11012755;
    BEGIN
      //dbeekman, 12-8-2010: M18348

      IF startmethod > 0 THEN BEGIN
        Window.UPDATE(1,'Trajectregels');
      END;

      NoOfLines := TryoutLine.COUNT;

      IF ISNULL(DataProc) THEN
        DataProc := DataProc.DataProcessor;

      IF DataProc.OpenConnection(ServerTxt,DataBaseTxt, 'staging.TryOutLine', LogInTxt, PassWordTxt) THEN BEGIN
        IF DataProc.BeginTransaction() THEN BEGIN
          IF TryoutLine.FINDFIRST THEN BEGIN
            REPEAT
              LineCounter := LineCounter + 1;
              IF startmethod > 0 THEN BEGIN
                Window.UPDATE(2,ROUND(LineCounter/NoOfLines*10000,1));
              END;

              TryoutLine.CALCFIELDS(TryoutLine."Contact Type Description");
              DataProc.InsertItem('[Datumentijd]', DateTimeStart, 'datetime');
              DataProc.InsertItem('[NAV Company]' , COMPANYNAME, 'varchar');
              DataProc.InsertItem('[Try-out No.]', TryoutLine."Try-out No." , 'varchar');
              DataProc.InsertItem('[Line No.]', TryoutLine."Line No." , 'int');
              DataProc.InsertItem('[Contact No. (Company)]', TryoutLine."Contact No." , 'varchar');
              DataProc.InsertItem('[Contact No. (Person)]', TryoutLine."Contact Person No." , 'varchar');
              DataProc.InsertItem('[Salesperson Code]', TryoutLine."Salesperson Code" , 'varchar');
              DataProc.InsertItem('[Contact Type]', TryoutLine."Contact Type" , 'varchar');
              IF TryoutLine."Last Date Modified" <> 0D THEN
                DataProc.InsertItem(
                  '[Last Date Modified]', CreateDateTimeFromDate(TryoutLine."Last Date Modified") , 'datetime');
              DataProc.InsertItem('[Contact Type Description]', TryoutLine."Contact Type Description" , 'varchar');
              DataProc.ExecuteRowInsert();
            UNTIL TryoutLine.NEXT = 0;
          END;
          DataProc.EndTransaction;
        END;
        DataProc.CloseConnection;
      END;
    END;

    PROCEDURE ProcessPeriodTable@1100485008(ServerTxt@1100485003 : Text[30];DataBaseTxt@1100485002 : Text[30];LogInTxt@1100485001 : Text[30];PassWordTxt@1100485000 : Text[30];startmethod@1100485005 : Integer);
    VAR
      AccPeriodRec@1100485004 : Record 50;
    BEGIN
      IF startmethod > 0 THEN BEGIN
        Window.UPDATE(1,'Perioden');
      END;

      NoOfLines := AccPeriodRec.COUNT;

      IF ISNULL(DataProc) THEN
        DataProc := DataProc.DataProcessor;

      IF DataProc.OpenConnection(ServerTxt,DataBaseTxt, 'staging.Period', LogInTxt, PassWordTxt) THEN BEGIN
        IF DataProc.BeginTransaction() THEN BEGIN
          IF AccPeriodRec.FINDFIRST THEN BEGIN
            REPEAT
              DataProc.InsertItem('Datumentijd', DateTimeStart, 'datetime');
              IF AccPeriodRec."Starting Date" <> 0D THEN
                DataProc.InsertItem('[Starting Date]', CreateDateTimeFromDate(AccPeriodRec."Starting Date"), 'datetime');
              DataProc.InsertItem('Description', AccPeriodRec.Name, 'varchar');
              DataProc.ExecuteRowInsert();
            UNTIL AccPeriodRec.NEXT = 0;
          END;
          DataProc.EndTransaction;
        END;
        DataProc.CloseConnection;
      END;
    END;

    PROCEDURE ProcessGlobalDimension1Table@1100525000(ServerTxt@1100485003 : Text[30];DataBaseTxt@1100485002 : Text[30];LogInTxt@1100485001 : Text[30];PassWordTxt@1100485000 : Text[30];startmethod@1100485005 : Integer);
    VAR
      GlobalDimRec@1100485004 : Record 349;
    BEGIN
      IF startmethod > 0 THEN BEGIN
        Window.UPDATE(1,'Kostenplaatsen');
      END;

      GlobalDimRec.SETRANGE("Global Dimension No.",1);

      NoOfLines := GlobalDimRec.COUNT;

      IF ISNULL(DataProc) THEN
        DataProc := DataProc.DataProcessor;

      IF DataProc.OpenConnection(ServerTxt,DataBaseTxt, 'staging.GlobalDimension1', LogInTxt, PassWordTxt) THEN BEGIN
        IF DataProc.BeginTransaction() THEN BEGIN
          IF GlobalDimRec.FINDFIRST THEN BEGIN
            REPEAT
              DataProc.InsertItem('Datumentijd', DateTimeStart, 'datetime');
              DataProc.InsertItem('[NAV Company]' , COMPANYNAME, 'varchar');
              DataProc.InsertItem('[Global Dimension Code 1]', GlobalDimRec.Code , 'varchar');
              DataProc.InsertItem('Description', GlobalDimRec.Name , 'varchar');
              DataProc.InsertItem('Totalling', GlobalDimRec.Totaling, 'varchar');
              DataProc.InsertItem('[Contact No. (Company)]', GlobalDimRec."Contact No. (Company)", 'varchar');
              DataProc.ExecuteRowInsert();
            UNTIL GlobalDimRec.NEXT = 0;
          END;
          DataProc.EndTransaction;
        END;
        DataProc.CloseConnection;
      END;
    END;

    PROCEDURE ProcessEmployeeTable@1100525008(ServerTxt@1100485003 : Text[30];DataBaseTxt@1100485002 : Text[30];LogInTxt@1100485001 : Text[30];PassWordTxt@1100485000 : Text[30];startmethod@1100485005 : Integer);
    VAR
      EmployeeRec@1100485004 : Record 5200;
      TradeAssociationCostPrice@1100525000 : Record 11020269;
      OverheadSurcharge@1100525001 : Record 11020208;
      TradeAssociation@1210190000 : Record 11012015;
    BEGIN
      IF startmethod > 0 THEN BEGIN
        Window.UPDATE(1,'Werknemers');
      END;

      NoOfLines := EmployeeRec.COUNT;

      IF ISNULL(DataProc) THEN
        DataProc := DataProc.DataProcessor;

      IF DataProc.OpenConnection(ServerTxt,DataBaseTxt, 'staging.Employees', LogInTxt, PassWordTxt) THEN BEGIN
        IF DataProc.BeginTransaction() THEN BEGIN
          IF EmployeeRec.FINDFIRST THEN BEGIN
            REPEAT
              DataProc.InsertItem('Datumentijd', DateTimeStart, 'datetime');
              DataProc.InsertItem('[NAV Company]' , COMPANYNAME, 'varchar');
              DataProc.InsertItem('[Employee Nr.]', EmployeeRec."No." , 'varchar');
              DataProc.InsertItem('[First Name]', EmployeeRec."First Name" , 'varchar');
              DataProc.InsertItem('[Middle Name]', EmployeeRec."Middle Name" , 'varchar');
              DataProc.InsertItem('[Last Name]', EmployeeRec."Last Name" , 'varchar');
              DataProc.InsertItem('Initials', EmployeeRec.Initials , 'varchar');
              DataProc.InsertItem('[Job Title]', EmployeeRec."Job Title" , 'varchar');
              CASE EmployeeRec.Gender OF
                EmployeeRec.Gender::Female:
                  DataProc.InsertItem('Sex', 'Female' , 'varchar');
                EmployeeRec.Gender::Male:
                  DataProc.InsertItem('Sex', 'Male' , 'varchar');
              END;
              IF EmployeeRec."Employment Date" <> 0D THEN
                DataProc.InsertItem('[Employment Date]' , CreateDateTimeFromDate(EmployeeRec."Employment Date") , 'datetime');
              IF EmployeeRec."Inactive Date" <> 0D THEN
                DataProc.InsertItem('[Inactive Date]' , CreateDateTimeFromDate(EmployeeRec."Inactive Date") , 'datetime');
              DataProc.InsertItem('[Cause of Inactivity Code]', EmployeeRec."Cause of Inactivity Code" , 'varchar');

              CASE EmployeeRec.Status OF
                EmployeeRec.Status::Active:
                  DataProc.InsertItem('Status', 'Active' , 'varchar');
                EmployeeRec.Status::Inactive:
                  DataProc.InsertItem('Status', 'Inactive' , 'varchar');
                EmployeeRec.Status::Terminated:
                  DataProc.InsertItem('Status', 'Terminated' , 'varchar');
              END;
              DataProc.InsertItem('[Social Security No.]', EmployeeRec."Social Security No." , 'varchar');

              DataProc.InsertItem('[Full Name]', EmployeeRec."Full Name" , 'varchar');

              DataProc.InsertItem('[Name Abbreviation]', EmployeeRec."Name Abbreviation" , 'varchar');
              IF EmployeeRec."Termination Date" <> 0D THEN
                DataProc.InsertItem('[Termination Date]' , CreateDateTimeFromDate(EmployeeRec."Termination Date") , 'datetime');
              DataProc.InsertItem('[Grounds for Term. Code]', EmployeeRec."Grounds for Term. Code" , 'varchar');
              DataProc.InsertItem('[Global Dimension 1 code]', EmployeeRec."Global Dimension 1 Code" , 'varchar');
              DataProc.InsertItem('[Global Dimension 2 code]', EmployeeRec."Global Dimension 2 Code" , 'varchar');
              DataProc.InsertItem('[Trade Association]', EmployeeRec."Trade Association" , 'varchar');
              DataProc.InsertItem('[Norm Hours]', EmployeeRec."Norm Hours" , 'decimal');
              DataProc.InsertItem('[Manager No.]', EmployeeRec."Manager No." , 'varchar');
              IF EmployeeRec.External THEN
                DataProc.InsertItem('[External]', 'Yes', 'varchar')
              ELSE
                DataProc.InsertItem('[External]', 'No', 'varchar');
              DataProc.InsertItem('Employer', EmployeeRec.Employer , 'varchar');

              //dbeekman.sn, 12-4-2010: M18348
              IF EmployeeRec."Trade Association" <> '' THEN BEGIN
                TradeAssociationCostPrice.SETRANGE("Trade Association",EmployeeRec."Trade Association");
                TradeAssociationCostPrice.SETFILTER("Ending Date",'%1|%2..',0D,CumFilter);
                TradeAssociationCostPrice.SETFILTER("Starting Date",'%1|..%2',0D,CumFilter);
                IF TradeAssociationCostPrice.FINDLAST THEN
                  DataProc.InsertItem('[Trade Association Cost Price]', TradeAssociationCostPrice."Cost Price" , 'decimal');

                OverheadSurcharge.SETCURRENTKEY(Level,"Trade Association");
                OverheadSurcharge.SETRANGE(Level,350);
                OverheadSurcharge.SETRANGE("Trade Association",EmployeeRec."Trade Association");
                OverheadSurcharge.SETFILTER("Ending Date",'%1|%2..',0D,CumFilter);
                OverheadSurcharge.SETFILTER("Starting Date",'%1|..%2',0D,CumFilter);
                IF OverheadSurcharge.FINDLAST THEN
                  DataProc.InsertItem('[Trade Association Overhead Surcharge]', OverheadSurcharge.Amount , 'decimal');

                //ahollebrandse.sn 07-03-2010
                TradeAssociation.SETRANGE(TradeAssociation.Code, EmployeeRec."Trade Association");
                IF TradeAssociation.FINDFIRST THEN
                  DataProc.InsertItem('[Trade Association Description]', TradeAssociation.Description, 'varchar');
                //ahollebrandse.en 07-03-2010
              END;
              //dbeekman.en

              DataProc.ExecuteRowInsert();
            UNTIL EmployeeRec.NEXT = 0;
          END;
          DataProc.EndTransaction;
        END;
        DataProc.CloseConnection;
      END;
    END;

    PROCEDURE ProcessPrognosisDetail@1100485009(ServerTxt@1100485003 : Text[30];DataBaseTxt@1100485002 : Text[30];LogInTxt@1100485001 : Text[30];PassWordTxt@1100485000 : Text[30];startmethod@1100485005 : Integer);
    VAR
      EmployeeRec@1210190000 : Record 5200;
    BEGIN
      //PrognDetail@1100485004 : Record 11012884;
      {
      //TODO KK.so
      IF startmethod > 0 THEN BEGIN
        Window.UPDATE(1,'Prognose detail');
      END;

      PrognDetail.SETRANGE(Type,PrognDetail.Type::Occupation);
      NoOfLines := PrognDetail.COUNT;

      IF IsNull(DataProc) THEN
        DataProc := DataProc.DataProcessor;

      IF DataProc.OpenConnection(ServerTxt,DataBaseTxt, 'staging.PrognosisDetail', LogInTxt, PassWordTxt) THEN BEGIN
        IF DataProc.BeginTransaction() THEN BEGIN
          IF PrognDetail.FINDFIRST THEN BEGIN
            REPEAT
              DataProc.InsertItem('Datumentijd', DateTimeStart, 'datetime');
              DataProc.InsertItem('[NAV Company]' , COMPANYNAME, 'varchar');
              DataProc.InsertItem('Employee' , PrognDetail."Source Code" , 'varchar');
              DataProc.InsertItem('[Global Dimension 1]' , PrognDetail."Global Dimension 1 Code" , 'varchar');
              DataProc.InsertItem('[Hours Type]' , PrognDetail."Trade Speciality Code" , 'varchar');
              DataProc.InsertItem('Hours' , PrognDetail.Hours , 'decimal');
              IF EmployeeRec.GET(PrognDetail."Source Code") THEN
                DataProc.InsertItem('[Trade Association (Employee)]' , EmployeeRec."Trade Association" , 'varchar');
              IF PrognDetail.Date <> 0D THEN
                DataProc.InsertItem('Date' , CreateDateTimeFromDate(PrognDetail.Date) , 'datetime');
              DataProc.ExecuteRowInsert();

            UNTIL PrognDetail.NEXT = 0;
          END;
          DataProc.EndTransaction;
        END;
        DataProc.CloseConnection;
      END;
      //TODO KK.eo
      }
    END;

    PROCEDURE ProcessPrognosisLine@1100485016(ServerTxt@1100485003 : Text[30];DataBaseTxt@1100485002 : Text[30];LogInTxt@1100485001 : Text[30];PassWordTxt@1100485000 : Text[30];startmethod@1100485005 : Integer);
    VAR
      PrognLine@1100485004 : Record 11012035;
    BEGIN
      IF startmethod > 0 THEN BEGIN
        Window.UPDATE(1,'Prognose Regel');
      END;

      PrognLine.SETRANGE("Cost Type",PrognLine."Cost Type"::Labor);
      NoOfLines := PrognLine.COUNT;

      IF ISNULL(DataProc) THEN
        DataProc := DataProc.DataProcessor;

      IF DataProc.OpenConnection(ServerTxt,DataBaseTxt, 'staging.PrognosisLine', LogInTxt, PassWordTxt) THEN BEGIN
        IF DataProc.BeginTransaction() THEN BEGIN
          IF PrognLine.FINDFIRST THEN BEGIN
            REPEAT

              DataProc.InsertItem('Datumentijd', DateTimeStart, 'datetime');
              DataProc.InsertItem('[NAV Company]' , COMPANYNAME, 'varchar');
              DataProc.InsertItem('Project' , PrognLine."Project No." , 'varchar');
              IF PrognLine."Prognosis Date" <> 0D THEN
                DataProc.InsertItem('[Prognosis Date]' , CreateDateTimeFromDate(PrognLine."Prognosis Date") , 'datetime');

              DataProc.InsertItem('Element' , PrognLine.Element , 'varchar');
              DataProc.InsertItem('[Global Dimension 2]' , PrognLine."Cost Object" , 'varchar');
              DataProc.InsertItem('[Rate Code]' , PrognLine."Rate Code" , 'varchar');
              DataProc.InsertItem('Quantity' , PrognLine.Quantity , 'decimal');

              DataProc.ExecuteRowInsert();

            UNTIL PrognLine.NEXT = 0;
          END;
          DataProc.EndTransaction;
        END;
        DataProc.CloseConnection;
      END;
    END;

    PROCEDURE ProcessPostedHourLines@1100485010(ServerTxt@1100485003 : Text[30];DataBaseTxt@1100485002 : Text[30];LogInTxt@1100485001 : Text[30];PassWordTxt@1100485000 : Text[30];startmethod@1100485005 : Integer);
    VAR
      PostedHourLines@1100485004 : Record 11012085;
      IsFilterActive@1100525000 : Boolean;
      JobRec@1210190000 : Record 11072003;
      ServOrderRec@1210190001 : Record 11012823;
      EmployeeRec@1210190002 : Record 5200;
    BEGIN
      IF startmethod > 0 THEN BEGIN
        Window.UPDATE(1,'Urenregels');
      END;

      IF ISNULL(DataProc) THEN
        DataProc := DataProc.DataProcessor;

      IF DataProc.OpenConnection(ServerTxt,DataBaseTxt, 'staging.PostedHourLine', LogInTxt, PassWordTxt) THEN BEGIN
        IF DataProc.BeginTransaction() THEN BEGIN
          IF (DataWareHouseSetupRec."Replicate hours from year" <> 0) AND
             (DataWareHouseSetupRec."Replicate hours from week" <> 0) THEN BEGIN
            PostedHourLines.SETFILTER(Year,'%1..',DataWareHouseSetupRec."Replicate hours from year");
            //dbeekman, 8-4-2010: M18348
            //PostedHourLines.SETFILTER(Week,'%1..',DataWareHouseSetupRec."Replicate hours from week");
          END;
          //dbeekman, 8-4-2010: M18348
          IsFilterActive := (PostedHourLines.GETFILTER(PostedHourLines.Year) <> '');

          NoOfLines := PostedHourLines.COUNT;

          IF PostedHourLines.FINDFIRST THEN BEGIN
            REPEAT
              LineCounter := LineCounter + 1;
              IF startmethod > 0 THEN BEGIN
                Window.UPDATE(2,ROUND(LineCounter/NoOfLines*10000,1));
              END;
              //dbeekman.sn, 8-4-2010: M18348
              IF (NOT IsFilterActive) OR
                 (PostedHourLines.Year > DataWareHouseSetupRec."Replicate hours from year") OR
                 ( (PostedHourLines.Year = DataWareHouseSetupRec."Replicate hours from year") AND
                   (PostedHourLines.Week >= DataWareHouseSetupRec."Replicate hours from week") )
              THEN BEGIN
              //dbeekman.en
                DataProc.InsertItem('Datumentijd', DateTimeStart, 'datetime');
                DataProc.InsertItem('[NAV Company]' , COMPANYNAME, 'varchar');
                DataProc.InsertItem('Year' , PostedHourLines.Year , 'int');
                DataProc.InsertItem('Week' , PostedHourLines.Week , 'int');
                DataProc.InsertItem('[Employee No.]' , PostedHourLines."Employee No." , 'varchar');
                DataProc.InsertItem('[Line No.]' , PostedHourLines."Line No." , 'int');
                DataProc.InsertItem('[Document No.]' , PostedHourLines."Document No." , 'varchar');
                IF PostedHourLines."Posting Date" <> 0D THEN
                  DataProc.InsertItem('[Posting Date]' , CreateDateTimeFromDate(PostedHourLines."Posting Date") , 'datetime');
                CASE PostedHourLines.Status OF
                  PostedHourLines.Status::Open:
                    DataProc.InsertItem('status' , 'Open' , 'varchar');
                  PostedHourLines.Status::Export:
                    DataProc.InsertItem('status' , 'Export' , 'varchar');
                END;
                DataProc.InsertItem('[Project No.]' , PostedHourLines."Project No." , 'varchar');
                DataProc.InsertItem('Element' , PostedHourLines.Element , 'varchar');
                DataProc.InsertItem('[Cost Object]' , PostedHourLines."Cost Object" , 'varchar');
                DataProc.InsertItem('[Wage Component]' , PostedHourLines."Wage Component" , 'varchar');
                IF PostedHourLines.Overtime THEN
                  DataProc.InsertItem('Overtime' , 'Yes' , 'varchar')
                ELSE
                  DataProc.InsertItem('Overtime' , 'No' , 'varchar');

                DataProc.InsertItem('[Extension Contract]' , PostedHourLines."Extension Contract" , 'varchar');
                DataProc.InsertItem('Monday' , PostedHourLines.Monday , 'decimal');
                DataProc.InsertItem('Tuesday' , PostedHourLines.Tuesday , 'decimal');
                DataProc.InsertItem('Wednesday' , PostedHourLines.Wednesday , 'decimal');
                DataProc.InsertItem('Thursday' , PostedHourLines.Thursday , 'decimal');
                DataProc.InsertItem('Friday' , PostedHourLines.Friday , 'decimal');
                DataProc.InsertItem('Saturday' , PostedHourLines.Saturday , 'decimal');
                DataProc.InsertItem('Sunday' , PostedHourLines.Sunday , 'decimal');

                IF PostedHourLines.External THEN
                  DataProc.InsertItem('[External]' , 'Yes' , 'varchar')
                ELSE
                  DataProc.InsertItem('[External]' , 'No' , 'varchar');

                DataProc.InsertItem('Employer' , PostedHourLines.Employer , 'varchar');
                DataProc.InsertItem('Comment' , PostedHourLines.Comment , 'varchar');
                DataProc.InsertItem('[Service Order No.]' , PostedHourLines."Service Order No." , 'varchar');
                DataProc.InsertItem('[Service Contract No.]' , PostedHourLines."Service Contract No." , 'varchar');
                DataProc.InsertItem('[Try-Out No.]' , PostedHourLines."Try-out No." , 'varchar');
                DataProc.InsertItem('[Estimate No.]' , PostedHourLines."Estimate No." , 'varchar');

                //PostedHourLines.CALCFIELDS("Department Code Employee");
                DataProc.InsertItem('[Employee Department Code]' , PostedHourLines."Department Code Employee" , 'varchar');

                //PostedHourLines.CALCFIELDS("Department Code Project");
                DataProc.InsertItem('[Department Code Project]' , PostedHourLines."Department Code" , 'varchar');

                //**4PS.GB.sn 18-10-2011
                IF EmployeeRec.GET(PostedHourLines."Employee No.") THEN
                  DataProc.InsertItem('[Trade Association (Employee)]', EmployeeRec."Trade Association" , 'varchar');
                //**4PS.GB.en

                DataProc.InsertItem('[Cost Code]' , PostedHourLines."Cost Code" , 'varchar');

                CASE PostedHourLines.Type OF
                  PostedHourLines.Type::Project:DataProc.InsertItem('Type' , 'Project' , 'varchar');
                  PostedHourLines.Type::Service:DataProc.InsertItem('Type' , 'Service' , 'varchar');
                  PostedHourLines.Type::Indirect:DataProc.InsertItem('Type' , 'Indirect' , 'varchar');
                  PostedHourLines.Type::Days:DataProc.InsertItem('Type' , 'Days' , 'varchar');
                  PostedHourLines.Type::Plant:DataProc.InsertItem('Type' , 'Plant' , 'varchar');
                END;

                DataProc.InsertItem('[Unit Cost]' , PostedHourLines."Unit Cost (LCY)" , 'decimal');
                DataProc.InsertItem('Amount' , PostedHourLines."Amount (LCY)" , 'decimal');
                DataProc.InsertItem('[Surcharge Overtime]' , PostedHourLines."Surcharge Overtime" , 'decimal');
                DataProc.InsertItem('Quantity' , PostedHourLines.Quantity , 'decimal');

                CASE PostedHourLines."Cost Type" OF
                  PostedHourLines."Cost Type"::Labor:DataProc.InsertItem('[Cost Type]' , 'Labor' , 'varchar');
                  PostedHourLines."Cost Type"::Material:DataProc.InsertItem('[Cost Type]' , 'Material' , 'varchar');
                  PostedHourLines."Cost Type"::Subcontracting:DataProc.InsertItem('[Cost Type]' , 'Subcontracting' , 'varchar');
                  PostedHourLines."Cost Type"::Plant:DataProc.InsertItem('[Cost Type]' , 'Plant' , 'varchar');
                  PostedHourLines."Cost Type"::Sundry:DataProc.InsertItem('[Cost Type]' , 'Sundry' , 'varchar');
                  PostedHourLines."Cost Type"::Revenue:DataProc.InsertItem('[Cost Type]' , 'Revenue' , 'varchar');
                END;

                IF PostedHourLines.Correction THEN
                  DataProc.InsertItem('Correction' , 'Yes' , 'varchar')
                ELSE
                  DataProc.InsertItem('Correction' , 'No' , 'varchar');

                DataProc.InsertItem('[Cost Component]' , PostedHourLines."Cost Component" , 'varchar');

                //**4PS.GB.sn 18-10-2011
                DataProc.InsertItem('[Supplying Company]', PostedHourLines."Supplying Company", 'varchar');
                DataProc.InsertItem('[Receiving Company]', PostedHourLines."Receiving Company", 'varchar');
                //**4PS.GB.en 18-10-2011

                //ahollebrandse.sn 07-03-2011
                IF PostedHourLines."Exported on" <> 0DT THEN
                  DataProc.InsertItem('[Exported on]', PostedHourLines."Exported on", 'datetime');
                DataProc.InsertItem('[Export Document No.]', PostedHourLines."Export Document No.", 'varchar');
                //ahollebrandse.en

                //ahollebrandse.sn 05-04-2011
                IF PostedHourLines."Project No." <> '' THEN BEGIN
                  IF (PostedHourLines."Receiving Company" <> '') THEN //kzwerver, 111215, n, #31464
                    JobRec.CHANGECOMPANY(PostedHourLines."Receiving Company"); //kzwerver, 111215, n, #31464
                  IF JobRec.GET(PostedHourLines."Project No.") THEN BEGIN
                    DataProc.InsertItem('[Project Servicecontact Type]', JobRec."Project Type", 'varchar');
                  IF (PostedHourLines."Receiving Company" <> '') THEN //kzwerver, 111215, n, #31464
                    JobRec.CHANGECOMPANY(COMPANYNAME); //kzwerver, 111215, n, #31464
                  END
                END ELSE IF PostedHourLines."Service Order No." <> '' THEN BEGIN
                  IF (PostedHourLines."Receiving Company" <> '') THEN //kzwerver, 111215, n, #31464
                    ServOrderRec.CHANGECOMPANY(PostedHourLines."Receiving Company"); //kzwerver, 111215, n, #31464
                  IF ServOrderRec.GET(PostedHourLines."Service Order No.") THEN BEGIN
                    DataProc.InsertItem('[Project Servicecontact Type]', ServOrderRec."Service Type", 'varchar');
                  IF (PostedHourLines."Receiving Company" <> '') THEN //kzwerver, 111215, n, #31464
                    ServOrderRec.CHANGECOMPANY(COMPANYNAME); //kzwerver, 111215, n, #31464
                  END;
                END;
                //ahollebrandse.en

                DataProc.ExecuteRowInsert();
              END; //dbeekman, 8-4-2010: M18348
            UNTIL PostedHourLines.NEXT = 0;
          END;
          DataProc.EndTransaction;
        END;
        DataProc.CloseConnection;
      END;
      LineCounter := 0;
      NoOfLines := 0;
    END;

    PROCEDURE ProcessGLAccountTable@1100485026(ServerTxt@1100485003 : Text[30];DataBaseTxt@1100485002 : Text[30];LogInTxt@1100485001 : Text[30];PassWordTxt@1100485000 : Text[30];startmethod@1100485005 : Integer);
    VAR
      GLAccRec@1100485004 : Record 15;
    BEGIN
      IF startmethod > 0 THEN BEGIN
        Window.UPDATE(1,'Grootboekrekeningen');
      END;

      NoOfLines := GLAccRec.COUNT;

      IF ISNULL(DataProc) THEN
        DataProc := DataProc.DataProcessor;

      IF DataProc.OpenConnection(ServerTxt,DataBaseTxt, 'staging.GLAccounts', LogInTxt, PassWordTxt) THEN BEGIN
        IF DataProc.BeginTransaction() THEN BEGIN
          IF GLAccRec.FINDFIRST THEN BEGIN
            REPEAT
              DataProc.InsertItem('Datumentijd', DateTimeStart, 'datetime');
              DataProc.InsertItem('[NAV Company]' , COMPANYNAME, 'varchar');
              DataProc.InsertItem('[No.]',  GLAccRec."No.", 'varchar');
              DataProc.InsertItem('Description',  GLAccRec.Name , 'varchar');
              CASE GLAccRec."Account Type" OF
                GLAccRec."Account Type"::Posting:DataProc.InsertItem('Type',  'Posting' , 'varchar');
                GLAccRec."Account Type"::Heading:DataProc.InsertItem('Type',  'Heading' , 'varchar');
                GLAccRec."Account Type"::Total:DataProc.InsertItem('Type',  'Total' , 'varchar');
                GLAccRec."Account Type"::"Begin-Total":DataProc.InsertItem('Type',  'Begin-total' , 'varchar');
                GLAccRec."Account Type"::"End-Total":DataProc.InsertItem('Type',  'End-total' , 'varchar');
              END;
              CASE GLAccRec."Income/Balance" OF
                GLAccRec."Income/Balance"::"Income Statement":
                  DataProc.InsertItem('[Income/Balance]',  'Income' , 'varchar');
                GLAccRec."Income/Balance"::"Balance Sheet":
                  DataProc.InsertItem('[Income/Balance]',  'Balance' , 'varchar');
              END;

              DataProc.ExecuteRowInsert();

            UNTIL GLAccRec.NEXT = 0;
          END;
          DataProc.EndTransaction;
        END;
        DataProc.CloseConnection;
      END;
    END;

    PROCEDURE ProcessRateCodeTable@1100485011(ServerTxt@1100485003 : Text[30];DataBaseTxt@1100485002 : Text[30];LogInTxt@1100485001 : Text[30];PassWordTxt@1100485000 : Text[30];startmethod@1100485005 : Integer);
    VAR
      RateRec@1100485004 : Record 11012162;
    BEGIN
      IF startmethod > 0 THEN BEGIN
        Window.UPDATE(1,'Tariefcodes');
      END;

      NoOfLines := RateRec.COUNT;

      IF ISNULL(DataProc) THEN
        DataProc := DataProc.DataProcessor;

      IF DataProc.OpenConnection(ServerTxt,DataBaseTxt, 'staging.RateCode', LogInTxt, PassWordTxt) THEN BEGIN
        IF DataProc.BeginTransaction() THEN BEGIN
          IF RateRec.FINDFIRST THEN BEGIN
            REPEAT
              DataProc.InsertItem('Datumentijd', DateTimeStart, 'datetime');
              DataProc.InsertItem('[NAV Company]' , COMPANYNAME, 'varchar');
              DataProc.InsertItem('[Rate code]',  RateRec."Rate Code" , 'varchar');
              DataProc.InsertItem('Description',  RateRec.Description , 'varchar');
              DataProc.ExecuteRowInsert();

            UNTIL RateRec.NEXT = 0;
          END;
          DataProc.EndTransaction;
        END;
        DataProc.CloseConnection;
      END;
    END;

    PROCEDURE ProcessPurchaseInvoiceTable@1100525001(ServerTxt@1100525004 : Text[30];DataBaseTxt@1100525003 : Text[30];LogInTxt@1100525002 : Text[30];PassWordTxt@1100525001 : Text[30];startmethod@1100525000 : Integer);
    VAR
      PostedInvoiceRec@1100525005 : Record 122;
    BEGIN
      IF startmethod > 0 THEN BEGIN
        Window.UPDATE(1,'Inkoopfacturen');
      END;

      IF ISNULL(DataProc) THEN
        DataProc := DataProc.DataProcessor;

      IF DataProc.OpenConnection(ServerTxt,DataBaseTxt, 'staging.PurchaseInvoice', LogInTxt, PassWordTxt) THEN BEGIN
        IF DataProc.BeginTransaction() THEN BEGIN

          IF PostedInvoiceRec.FINDFIRST THEN BEGIN
            NoOfLines := PostedInvoiceRec.COUNT;

            REPEAT
              LineCounter := LineCounter + 1;
              IF startmethod > 0 THEN BEGIN
                Window.UPDATE(2,ROUND(LineCounter/NoOfLines*10000,1));
              END;
              IF (PostedInvoiceRec."Posting Date" >= DataWareHouseSetupRec."Purchase Invoice Posting Date") THEN BEGIN //**4PS,SR,04-02-14

                DataProc.InsertItem('Datumentijd', DateTimeStart, 'datetime');
                DataProc.InsertItem('[NAV Company]' , COMPANYNAME, 'varchar');
                DataProc.InsertItem('[Buy-from Vendor No.]',PostedInvoiceRec."Buy-from Vendor No." ,'varchar');
                DataProc.InsertItem('[No.]',PostedInvoiceRec."No." ,'varchar');
                IF PostedInvoiceRec."Posting Date" <> 0D THEN
                  DataProc.InsertItem('[Posting Date]',CreateDateTimeFromDate(PostedInvoiceRec."Posting Date") ,'datetime');
                DataProc.InsertItem('[Currency Code]',PostedInvoiceRec."Currency Code" ,'varchar');
                DataProc.InsertItem('[Currency Factor]',PostedInvoiceRec."Currency Factor" ,'decimal');
                PostedInvoiceRec.CALCFIELDS(Amount,"Amount VAT");
                DataProc.InsertItem('Amount',PostedInvoiceRec.Amount ,'decimal');
                DataProc.InsertItem('[Amount Vat]',PostedInvoiceRec."Amount VAT",'decimal');
                DataProc.InsertItem('[Amount incl. Vat]',PostedInvoiceRec."Amount incl. VAT",'decimal');
                IF PostedInvoiceRec."Document Date" <> 0D THEN
                  DataProc.InsertItem('[Document Date]',CreateDateTimeFromDate(PostedInvoiceRec."Document Date"),'datetime');
                IF PostedInvoiceRec."Subcontracting Invoice" THEN
                  DataProc.InsertItem('[Subcontracting Invoice]','Yes','varchar')
                ELSE
                  DataProc.InsertItem('[Subcontracting Invoice]','No','varchar');
                DataProc.InsertItem('[Pay-to Vendor No]',PostedInvoiceRec."Pay-to Vendor No.",'varchar');
                DataProc.InsertItem('[Vendor Posting Group]',PostedInvoiceRec."Vendor Posting Group",'varchar');
                DataProc.InsertItem('[Shortcut Dimension 1 Code]',PostedInvoiceRec."Shortcut Dimension 1 Code",'varchar');
                DataProc.InsertItem('[VAT Registration No]',PostedInvoiceRec."VAT Registration No.",'varchar');

                DataProc.ExecuteRowInsert();
              END; //**4PS, SR,04-02-14
            UNTIL PostedInvoiceRec.NEXT=0;
          END;

          DataProc.EndTransaction
        END;
        DataProc.CloseConnection;
      END;

      LineCounter := 0;
      NoOfLines := 0;
    END;

    PROCEDURE ProcessPurchaseCreditMemoTable@1100525014(ServerTxt@1100525004 : Text[30];DataBaseTxt@1100525003 : Text[30];LogInTxt@1100525002 : Text[30];PassWordTxt@1100525001 : Text[30];startmethod@1100525000 : Integer);
    VAR
      PostedCredMemRec@1100525005 : Record 124;
    BEGIN
      IF startmethod > 0 THEN BEGIN
        Window.UPDATE(1,'Credit facturen');
      END;

      IF ISNULL(DataProc) THEN
        DataProc := DataProc.DataProcessor;

      IF DataProc.OpenConnection(ServerTxt,DataBaseTxt, 'staging.PurchaseCreditMemo', LogInTxt, PassWordTxt) THEN BEGIN
        IF DataProc.BeginTransaction() THEN BEGIN

          IF PostedCredMemRec.FINDFIRST THEN BEGIN
            NoOfLines := PostedCredMemRec.COUNT;

            REPEAT
              LineCounter := LineCounter + 1;
              IF startmethod > 0 THEN BEGIN
                Window.UPDATE(2,ROUND(LineCounter/NoOfLines*10000,1));
              END;
              IF (PostedCredMemRec."Posting Date" >= DataWareHouseSetupRec."Purchase Invoice Posting Date") THEN BEGIN //**4PS,SR,04-02-14
                DataProc.InsertItem('Datumentijd', DateTimeStart, 'datetime');
                DataProc.InsertItem('[NAV Company]' , COMPANYNAME, 'varchar');
                DataProc.InsertItem('[Buy-from Vendor No.]',PostedCredMemRec."Buy-from Vendor No." ,'varchar');
                DataProc.InsertItem('[No.]',PostedCredMemRec."No." ,'varchar');
                IF PostedCredMemRec."Posting Date" <> 0D THEN
                  DataProc.InsertItem('[Posting Date]',
                                        CreateDateTimeFromDate(PostedCredMemRec."Posting Date"),'datetime');
                DataProc.InsertItem('[Currency Code]',PostedCredMemRec."Currency Code" ,'varchar');
                DataProc.InsertItem('[Currency Factor]',PostedCredMemRec."Currency Factor" ,'decimal');
                PostedCredMemRec.CALCFIELDS(Amount);
                DataProc.InsertItem('Amount',PostedCredMemRec.Amount ,'decimal');
                DataProc.InsertItem('[Amount incl. Vat]',PostedCredMemRec."Amount incl. VAT",'decimal');

                IF PostedCredMemRec."Document Date" <> 0D THEN
                  DataProc.InsertItem('[Document Date]',
                                        CreateDateTimeFromDate(PostedCredMemRec."Document Date"),'datetime');
                IF PostedCredMemRec."Subcontractor Credit Memo" THEN
                  DataProc.InsertItem('[Subcontracting Credit Memo]','Yes','varchar')
                ELSE
                  DataProc.InsertItem('[Subcontracting Credit Memo]','No','varchar');
                DataProc.InsertItem('[Pay-to Vendor No.]',PostedCredMemRec."Pay-to Vendor No.",'varchar');
                DataProc.InsertItem('[Vendor Posting Group]',PostedCredMemRec."Vendor Posting Group",'varchar');
                DataProc.InsertItem('[Shortcut Dimension 1 Code]',PostedCredMemRec."Shortcut Dimension 1 Code",'varchar');
                DataProc.InsertItem('[VAT Registration No.]',PostedCredMemRec."VAT Registration No.",'varchar');

                DataProc.ExecuteRowInsert();
              END; //**4PS,SR,04-02-14
            UNTIL PostedCredMemRec.NEXT=0;
          END;

          DataProc.EndTransaction
        END;
        DataProc.CloseConnection;
      END;

      LineCounter := 0;
      NoOfLines := 0;
    END;

    PROCEDURE ProcessSalesInvoiceTable@1100525013(ServerTxt@1100525001 : Text[30];DataBaseTxt@1100525002 : Text[30];LogInTxt@1100525003 : Text[30];PassWordTxt@1100525004 : Text[30];startmethod@1100525005 : Integer);
    VAR
      PostedInvoiceRec@1100525000 : Record 112;
    BEGIN
      //**4PS.sn SR, 04-02-14
      IF startmethod > 0 THEN BEGIN
        Window.UPDATE(1,'Verkoopfacturen');
      END;

      IF ISNULL(DataProc) THEN
        DataProc := DataProc.DataProcessor;

      IF DataProc.OpenConnection(ServerTxt,DataBaseTxt, 'staging.PurchaseCreditMemo', LogInTxt, PassWordTxt) THEN BEGIN
        IF DataProc.BeginTransaction() THEN BEGIN

          IF PostedInvoiceRec.FINDFIRST THEN BEGIN
            NoOfLines := PostedInvoiceRec.COUNT;

            REPEAT
              LineCounter := LineCounter + 1;
              IF startmethod > 0 THEN BEGIN
                Window.UPDATE(2,ROUND(LineCounter/NoOfLines*10000,1));
              END;

              IF (PostedInvoiceRec."Posting Date" >= DataWareHouseSetupRec."Sales Invoice Posting Date") THEN BEGIN
                DataProc.InsertItem('Datumentijd', DateTimeStart, 'datetime');
                DataProc.InsertItem('[NAV Company]' , COMPANYNAME, 'varchar');
                DataProc.InsertItem('[Sell-to Customer No.]',PostedInvoiceRec."Sell-to Customer No." ,'varchar');
                DataProc.InsertItem('[No.]',PostedInvoiceRec."No." ,'varchar');
                DataProc.InsertItem('[Bill-to Customer No.]',PostedInvoiceRec."Bill-to Customer No." ,'varchar');
                IF PostedInvoiceRec."Posting Date" <> 0D THEN
                  DataProc.InsertItem('[Posting Date]',CreateDateTimeFromDate(PostedInvoiceRec."Posting Date") ,'datetime');
                DataProc.InsertItem('[Shortcut Dimension 1 Code]',PostedInvoiceRec."Shortcut Dimension 1 Code" ,'varchar');
                DataProc.InsertItem('[Customer Posting Group]',PostedInvoiceRec."Customer Posting Group" ,'varchar');
                DataProc.InsertItem('[Currency Code]',PostedInvoiceRec."Currency Code" ,'varchar');
                DataProc.InsertItem('[Currency Factor]',PostedInvoiceRec."Currency Factor" ,'decimal');
                DataProc.InsertItem('[Salesperson Code]',PostedInvoiceRec."Salesperson Code" ,'varchar');
                PostedInvoiceRec.CALCFIELDS(Amount,"Amount VAT","Amount Including VAT");
                DataProc.InsertItem('Amount',PostedInvoiceRec.Amount ,'decimal');
                DataProc.InsertItem('[Amount Including VAT]',PostedInvoiceRec."Amount Including VAT",'decimal');
                DataProc.InsertItem('[VAT Registration No.]',PostedInvoiceRec."VAT Registration No.",'varchar');
                IF PostedInvoiceRec."Document Date" <> 0D THEN
                  DataProc.InsertItem('[Document Date]',CreateDateTimeFromDate(PostedInvoiceRec."Document Date"),'datetime');
                DataProc.InsertItem('[Blocked Amount (Subcontracting]',PostedInvoiceRec."Blocked Amount (Subcontracting",'decimal');
                IF PostedInvoiceRec."Specific WKA Percentages" THEN
                  DataProc.InsertItem('[Specific WKA Percentages]','Yes','varchar')
                ELSE
                  DataProc.InsertItem('[Specific WKA Percentages]','No','varchar');
                DataProc.InsertItem('[Amount Vat]',PostedInvoiceRec."Amount VAT",'decimal');
                IF PostedInvoiceRec."Installment Invoice" THEN
                  DataProc.InsertItem('[Installment Invoice]','Yes','varchar')
                ELSE
                  DataProc.InsertItem('[Installment Invoice]','No','varchar');
                IF PostedInvoiceRec."Project Invoice" THEN
                  DataProc.InsertItem('[Project Invoice]','Yes','varchar')
                ELSE
                  DataProc.InsertItem('[Project Invoice]','No','varchar');
                IF PostedInvoiceRec."Service Invoice" THEN
                  DataProc.InsertItem('[Service Invoice]','Yes','varchar')
                ELSE
                  DataProc.InsertItem('[Service Invoice]','No','varchar');
                DataProc.InsertItem('[Order No.]',PostedInvoiceRec."Order No.",'varchar');

                DataProc.ExecuteRowInsert();
              END;
            UNTIL PostedInvoiceRec.NEXT=0;
          END;

          DataProc.EndTransaction
        END;
        DataProc.CloseConnection;
      END;

      LineCounter := 0;
      NoOfLines := 0;
      //**4PS.en SR,04-02-14
    END;

    PROCEDURE ProcessSalesCreditMemoTable@1100525015(ServerTxt@1100525005 : Text[30];DataBaseTxt@1100525004 : Text[30];LogInTxt@1100525003 : Text[30];PassWordTxt@1100525002 : Text[30];startmethod@1100525001 : Integer);
    VAR
      PostedInvoiceRec@1100525000 : Record 114;
    BEGIN
      //**4PS.sn SR, 04-02-14
      IF startmethod > 0 THEN BEGIN
        Window.UPDATE(1,'Verkoop Creditnota');
      END;

      IF ISNULL(DataProc) THEN
        DataProc := DataProc.DataProcessor;

      IF DataProc.OpenConnection(ServerTxt,DataBaseTxt, 'staging.SalesCrMemoHeader', LogInTxt, PassWordTxt) THEN BEGIN
        IF DataProc.BeginTransaction() THEN BEGIN

          IF PostedInvoiceRec.FINDFIRST THEN BEGIN
            NoOfLines := PostedInvoiceRec.COUNT;

            REPEAT
              LineCounter := LineCounter + 1;
              IF startmethod > 0 THEN BEGIN
                Window.UPDATE(2,ROUND(LineCounter/NoOfLines*10000,1));
              END;

              IF (PostedInvoiceRec."Posting Date" >= DataWareHouseSetupRec."Sales Invoice Posting Date") THEN BEGIN
                DataProc.InsertItem('Datumentijd', DateTimeStart, 'datetime');
                DataProc.InsertItem('[NAV Company]' , COMPANYNAME, 'varchar');
                DataProc.InsertItem('[Sell-to Customer No.]',PostedInvoiceRec."Sell-to Customer No." ,'varchar');
                DataProc.InsertItem('[No.]',PostedInvoiceRec."No." ,'varchar');
                DataProc.InsertItem('[Bill-to Customer No.]',PostedInvoiceRec."Bill-to Customer No." ,'varchar');
                IF PostedInvoiceRec."Posting Date" <> 0D THEN
                  DataProc.InsertItem('[Posting Date]',CreateDateTimeFromDate(PostedInvoiceRec."Posting Date") ,'datetime');
                DataProc.InsertItem('[Shortcut Dimension 1 Code]',PostedInvoiceRec."Shortcut Dimension 1 Code" ,'varchar');
                DataProc.InsertItem('[Customer Posting Group]',PostedInvoiceRec."Customer Posting Group" ,'varchar');
                DataProc.InsertItem('[Currency Code]',PostedInvoiceRec."Currency Code" ,'varchar');
                DataProc.InsertItem('[Currency Factor]',PostedInvoiceRec."Currency Factor" ,'decimal');
                DataProc.InsertItem('[Salesperson Code]',PostedInvoiceRec."Salesperson Code" ,'varchar');
                PostedInvoiceRec.CALCFIELDS(Amount,"Amount VAT","Amount Including VAT");
                DataProc.InsertItem('Amount',PostedInvoiceRec.Amount ,'decimal');
                DataProc.InsertItem('[Amount Including VAT]',PostedInvoiceRec."Amount Including VAT",'decimal');
                DataProc.InsertItem('[VAT Registration No.]',PostedInvoiceRec."VAT Registration No.",'varchar');
                IF PostedInvoiceRec."Document Date" <> 0D THEN
                  DataProc.InsertItem('[Document Date]',CreateDateTimeFromDate(PostedInvoiceRec."Document Date"),'datetime');
                DataProc.InsertItem('[Blocked Amount (Subcontracting]',PostedInvoiceRec."Blocked Amount (Subcontracting",'decimal');
                IF PostedInvoiceRec."Specific WKA Percentages" THEN
                  DataProc.InsertItem('[Specific WKA Percentages]','Yes','varchar')
                ELSE
                  DataProc.InsertItem('[Specific WKA Percentages]','No','varchar');
                DataProc.InsertItem('[Amount Vat]',PostedInvoiceRec."Amount VAT",'decimal');
                IF PostedInvoiceRec."Installment Credit Memo" THEN
                  DataProc.InsertItem('[Installment Credit Memo]','Yes','varchar')
                ELSE
                  DataProc.InsertItem('[Installment Credit Memo]','No','varchar');
                IF PostedInvoiceRec."Project Credit Memo" THEN
                  DataProc.InsertItem('[Project Credit Memo]','Yes','varchar')
                ELSE
                  DataProc.InsertItem('[Project Credit Memo]','No','varchar');
                IF PostedInvoiceRec."Service Invoice" THEN
                  DataProc.InsertItem('[Service Invoice]','Yes','varchar')
                ELSE
                  DataProc.InsertItem('[Service Invoice]','No','varchar');
                DataProc.InsertItem('[Return Order No.]',PostedInvoiceRec."Return Order No.",'varchar');

                DataProc.ExecuteRowInsert();
              END;
            UNTIL PostedInvoiceRec.NEXT=0;
          END;

          DataProc.EndTransaction
        END;
        DataProc.CloseConnection;
      END;

      LineCounter := 0;
      NoOfLines := 0;
      //**4PS.en SR,04-02-14
    END;

    PROCEDURE ProcessCostObjectTable@1100525002(ServerTxt@1100525004 : Text[30];DataBaseTxt@1100525003 : Text[30];LogInTxt@1100525002 : Text[30];PassWordTxt@1100525001 : Text[30];startmethod@1100525000 : Integer);
    VAR
      CostObjectRec@1100525005 : Record 349;
    BEGIN
      IF startmethod > 0 THEN BEGIN
        Window.UPDATE(1,'Kostendragers');
      END;

      IF ISNULL(DataProc) THEN
        DataProc := DataProc.DataProcessor;

      IF DataProc.OpenConnection(ServerTxt,DataBaseTxt, 'staging.CostObject', LogInTxt, PassWordTxt) THEN BEGIN
        IF DataProc.BeginTransaction() THEN BEGIN
          CostObjectRec.SETRANGE("Global Dimension No.",2);
          IF CostObjectRec.FINDFIRST THEN BEGIN
            NoOfLines := CostObjectRec.COUNT;

            REPEAT
              LineCounter := LineCounter + 1;
              IF startmethod > 0 THEN BEGIN
                Window.UPDATE(2,ROUND(LineCounter/NoOfLines*10000,1));
              END;

              DataProc.InsertItem('Datumentijd', DateTimeStart, 'datetime');
              DataProc.InsertItem('[NAV Company]' , COMPANYNAME, 'varchar');

              DataProc.InsertItem('Code', CostObjectRec.Code ,'varchar');
              DataProc.InsertItem('Name', CostObjectRec.Name ,'varchar');
              CASE CostObjectRec."Dimension Value Type" OF
                CostObjectRec."Dimension Value Type"::Standard:
                  DataProc.InsertItem('[Dimension Value Type]', 'Standard','varchar');
                CostObjectRec."Dimension Value Type"::Heading:
                  DataProc.InsertItem('[Dimension Value Type]', 'Heading','varchar');
                CostObjectRec."Dimension Value Type"::Total:
                  DataProc.InsertItem('[Dimension Value Type]', 'Total','varchar');
                CostObjectRec."Dimension Value Type"::"Begin-Total":
                  DataProc.InsertItem('[Dimension Value Type]', 'Begin-total','varchar');
                CostObjectRec."Dimension Value Type"::"End-Total":
                   DataProc.InsertItem('[Dimension Value Type]', 'End-total','varchar');
              END;

              DataProc.InsertItem('Totaling', CostObjectRec.Totaling ,'varchar');
              IF CostObjectRec.Blocked THEN
                DataProc.InsertItem('Blocked', 'Yes','varchar')
              ELSE
                DataProc.InsertItem('Blocked', 'No','varchar');

              CASE CostObjectRec."Cost Type" OF
                CostObjectRec."Cost Type"::Labor:
                  DataProc.InsertItem('[Cost Type]', 'Labor' ,'varchar');
                CostObjectRec."Cost Type"::Material:
                  DataProc.InsertItem('[Cost Type]', 'Material' ,'varchar');
                CostObjectRec."Cost Type"::Subcontracting:
                  DataProc.InsertItem('[Cost Type]', 'Subcontracting' ,'varchar');
                CostObjectRec."Cost Type"::Plant:
                  DataProc.InsertItem('[Cost Type]', 'Plant' ,'varchar');
                CostObjectRec."Cost Type"::Sundry:
                  DataProc.InsertItem('[Cost Type]', 'Sundry' ,'varchar');
                CostObjectRec."Cost Type"::Revenue:
                  DataProc.InsertItem('[Cost Type]', 'Revenue' ,'varchar');
              END;
              DataProc.InsertItem('[Rate Code]', CostObjectRec."Rate Code" ,'varchar');
              DataProc.InsertItem('[Unit of Measure]', CostObjectRec."Unit of Measure" ,'varchar');
              DataProc.InsertItem('[Unit of Time]', CostObjectRec."Unit of Time" ,'varchar');

              DataProc.ExecuteRowInsert();

            UNTIL CostObjectRec.NEXT=0;
          END;

          DataProc.EndTransaction
        END;
        DataProc.CloseConnection;
      END;

      LineCounter := 0;
      NoOfLines := 0;
    END;

    PROCEDURE ProcessWageCompTable@1100525010(ServerTxt@1100525004 : Text[30];DataBaseTxt@1100525003 : Text[30];LogInTxt@1100525002 : Text[30];PassWordTxt@1100525001 : Text[30];startmethod@1100525000 : Integer);
    VAR
      WageCompRec@1100525005 : Record 11012014;
    BEGIN
      IF startmethod > 0 THEN BEGIN
        Window.UPDATE(1,'Looncomponenten');
      END;

      IF ISNULL(DataProc) THEN
        DataProc := DataProc.DataProcessor;

      IF DataProc.OpenConnection(ServerTxt,DataBaseTxt, 'staging.Wagecomponent', LogInTxt, PassWordTxt) THEN BEGIN
        IF DataProc.BeginTransaction() THEN BEGIN
          IF WageCompRec.FINDFIRST THEN BEGIN
            NoOfLines := WageCompRec.COUNT;

            REPEAT
              LineCounter := LineCounter + 1;
              IF startmethod > 0 THEN BEGIN
                Window.UPDATE(2,ROUND(LineCounter/NoOfLines*10000,1));
              END;

              DataProc.InsertItem('Datumentijd', DateTimeStart, 'datetime');
              DataProc.InsertItem('[NAV Company]' , COMPANYNAME, 'varchar');

              DataProc.InsertItem('Code', WageCompRec.Code ,'varchar');
              DataProc.InsertItem('Description', WageCompRec.Description ,'varchar');
              CASE WageCompRec."Component Type" OF
                WageCompRec."Component Type"::Hours:
                  DataProc.InsertItem('[Component Type]', 'Hours' ,'varchar');
                WageCompRec."Component Type"::Days:
                  DataProc.InsertItem('[Component Type]', 'Days' ,'varchar');
                WageCompRec."Component Type"::Expenses:
                  DataProc.InsertItem('[Component Type]', 'Expenses' ,'varchar');
              END;

              IF WageCompRec.Overtime THEN
                DataProc.InsertItem('Overtime', 'Yes' ,'varchar')
              ELSE
                DataProc.InsertItem('Overtime', 'No' ,'varchar');

              DataProc.InsertItem('[Overtime Surcharge %]', WageCompRec."Overtime Surcharge %", 'decimal');

              IF WageCompRec.Chargeable THEN
                DataProc.InsertItem('Chargeable', 'Yes' ,'varchar')
              ELSE
                DataProc.InsertItem('Chargeable', 'No' ,'varchar');

              DataProc.InsertItem('[Sales Surcharge Overtime %]', WageCompRec."Sales Surcharge Overtime %", 'decimal');

              DataProc.ExecuteRowInsert();

            UNTIL WageCompRec.NEXT=0;
          END;

          DataProc.EndTransaction
        END;
        DataProc.CloseConnection;
      END;

      LineCounter := 0;
      NoOfLines := 0;
    END;

    PROCEDURE ProcessContactTable@1100525018(ServerTxt@1100525004 : Text[30];DataBaseTxt@1100525003 : Text[30];LogInTxt@1100525002 : Text[30];PassWordTxt@1100525001 : Text[30];startmethod@1100525000 : Integer);
    VAR
      ContactRec@1100525005 : Record 5050;
      ContBusRel@1100525006 : Record 5054;
      ContFeatType@1100525007 : Record 11012753;
      CustRec@1100525008 : Record 18;
      VendorRec@1100525009 : Record 23;
    BEGIN
      IF startmethod > 0 THEN BEGIN
        Window.UPDATE(1,'Relaties');
      END;

      IF ISNULL(DataProc) THEN
        DataProc := DataProc.DataProcessor;

      IF DataProc.OpenConnection(ServerTxt,DataBaseTxt, 'staging.Contacts', LogInTxt, PassWordTxt) THEN BEGIN
        IF DataProc.BeginTransaction() THEN BEGIN
          IF ContactRec.FINDFIRST THEN BEGIN
            NoOfLines := ContactRec.COUNT;

            REPEAT
              LineCounter := LineCounter + 1;
              IF startmethod > 0 THEN BEGIN
                Window.UPDATE(2,ROUND(LineCounter/NoOfLines*10000,1));
              END;

              DataProc.InsertItem('Datumentijd', DateTimeStart, 'datetime');
              DataProc.InsertItem('[NAV Company]' , COMPANYNAME, 'varchar');

              DataProc.InsertItem('[No.]', ContactRec."No." ,'varchar');
              DataProc.InsertItem('Name', ContactRec.Name ,'varchar');
              DataProc.InsertItem('[Name 2]', ContactRec."Name 2" ,'varchar');
              DataProc.InsertItem('City', ContactRec.City ,'varchar');
              //AH.sn 05-04-2011
              DataProc.InsertItem('[E-Mail]', ContactRec."E-Mail" ,'varchar');
              //AH.en
              DataProc.InsertItem('[Currency Code]', ContactRec."Currency Code" ,'varchar');
              DataProc.InsertItem('[Language Code]', ContactRec."Language Code" ,'varchar');
              DataProc.InsertItem('[Salesperson Code]', ContactRec."Salesperson Code" ,'varchar');
              //dbeekman, 8-4-2010: M18348
              DataProc.InsertItem('[Country Code]', ContactRec."Country/Region Code" ,'varchar');
              DataProc.InsertItem('[VAT Registration No.]', ContactRec."VAT Registration No." ,'varchar');
              DataProc.InsertItem('[Post Code]', ContactRec."Post Code" ,'varchar');
              DataProc.InsertItem('[Company No.]', ContactRec."Company No." ,'varchar');

              IF ContactRec.Blocked THEN
                DataProc.InsertItem('Blocked', 'Yes' ,'varchar')
              ELSE
                DataProc.InsertItem('Blocked', 'No' ,'varchar');

              DataProc.InsertItem('[Visit Address Post Code]',ContactRec."Visit Address Post Code",'varchar');
              DataProc.InsertItem('[Visit Address Country]',ContactRec."Visit Address Country/Region",'varchar');
              ContactRec.CALCFIELDS("Name Salesperson");
              DataProc.InsertItem('[Name Salesperson]',ContactRec."Name Salesperson",'varchar');

              ContFeatType.SETRANGE("Relation Type",ContFeatType."Relation Type"::Company);
              ContFeatType.SETRANGE(Code,ContactRec."No.");
              ContFeatType.SETRANGE("Feature Group",'KvK branche classificatie');

              //dbeekman.sn, 8-4-2010: M18348
              IF ContFeatType.FINDFIRST THEN
                DataProc.InsertItem('[Chamber of Commerce No.]',ContFeatType.Feature,'varchar');

              ContFeatType.SETRANGE("Feature Group",'Sector/marktgroep/objectsoort');
              IF ContFeatType.FINDFIRST THEN BEGIN
                ContFeatType.CALCFIELDS("Feature Description");
                DataProc.InsertItem('[Sector/Market/Object]',ContFeatType."Feature Description",'varchar');
              END;

              ContFeatType.SETRANGE("Feature Group",'Risicoclassificatie');
              IF ContFeatType.FINDFIRST THEN
                DataProc.InsertItem('[Risk Classification]',ContFeatType.Feature,'varchar');
              //dbeekman.en

              ContBusRel.SETRANGE("Contact No.",ContactRec."No.");
              ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
              IF ContBusRel.FINDFIRST THEN BEGIN
                DataProc.InsertItem('[Customer No.]',ContBusRel."No.",'varchar');
                IF CustRec.GET(ContBusRel."No.") THEN BEGIN
                  DataProc.InsertItem('[Customer Posting Group]',CustRec."Customer Posting Group",'varchar');
                  CASE CustRec.Blocked OF
                    CustRec.Blocked::Ship:
                      DataProc.InsertItem('[Blocked Customer]','Ship','varchar');
                    CustRec.Blocked::Invoice:
                      DataProc.InsertItem('[Blocked Customer]','Invoice','varchar');
                    CustRec.Blocked::All:
                      DataProc.InsertItem('[Blocked Customer]','All','varchar');
                  END;
                END;
                DataProc.InsertItem('[Credit Limit (LCY)]',CustRec."Credit Limit (LCY)",'decimal');
                IF CustRec."Credit Insurance" THEN
                  DataProc.InsertItem('[Credit Insurance]','Yes','varchar')
                ELSE
                  DataProc.InsertItem('[Credit Insurance]','No','varchar')
               END;


              ContBusRel.SETRANGE("Link to Table", ContBusRel."Link to Table"::Vendor);
              IF ContBusRel.FINDFIRST THEN BEGIN
                DataProc.InsertItem('[Vendor No.]',ContBusRel."No.",'varchar');
                IF VendorRec.GET(ContBusRel."No.") THEN BEGIN
                  //dbeekman, 8-4-2010: M18348
                  DataProc.InsertItem('[Vendor Posting Group]',VendorRec."Vendor Posting Group",'varchar');
                  IF VendorRec."Subcontractor Type" <> VendorRec."Subcontractor Type"::" " THEN
                    DataProc.InsertItem('Subcontractor','Yes','varchar')
                  ELSE
                    DataProc.InsertItem('Subcontractor','No','varchar');
                  CASE VendorRec.Blocked OF
                    VendorRec.Blocked::Payment:
                      DataProc.InsertItem('[Blocked Vendor]','Payment','varchar');
                    VendorRec.Blocked::All:
                      DataProc.InsertItem('[Blocked Vendor]','All','varchar');
                  END;
                  DataProc.InsertItem('[Vendor (Trade Item)]', VendorRec."Vendor (Trade Item)" ,'varchar');
                  DataProc.InsertItem('[Purchaser Code]', VendorRec."Purchaser Code" ,'varchar');
                END;
              END;

              DataProc.ExecuteRowInsert();
            UNTIL ContactRec.NEXT=0;
          END;
          DataProc.EndTransaction
        END;
        DataProc.CloseConnection;
      END;

      LineCounter := 0;
      NoOfLines := 0;
    END;

    PROCEDURE ProcessContFeatureTypeTable@1100525016(ServerTxt@1100485003 : Text[30];DataBaseTxt@1100485002 : Text[30];LogInTxt@1100485001 : Text[30];PassWordTxt@1100485000 : Text[30];startmethod@1100485005 : Integer);
    VAR
      ContactFeatureType@1100485004 : Record 11012753;
    BEGIN
      //dbeekman, 12-4-2010: M18348

      IF startmethod > 0 THEN BEGIN
        Window.UPDATE(1,'Relatiekenmerksoorten');
      END;

      CASE DataWareHouseSetupRec."Contact Feat. Type Filter" OF
        DataWareHouseSetupRec."Contact Feat. Type Filter"::"Company/Contact Person/Person":
          ContactFeatureType.SETFILTER(ContactFeatureType."Relation Type", '%1|%2|%3',
            ContactFeatureType."Relation Type"::Company,
            ContactFeatureType."Relation Type"::Contact,
            ContactFeatureType."Relation Type"::Person);
        DataWareHouseSetupRec."Contact Feat. Type Filter"::Other:
          ContactFeatureType.SETFILTER(ContactFeatureType."Relation Type", '<>%1&<>%2&<>%3',
            ContactFeatureType."Relation Type"::Company,
            ContactFeatureType."Relation Type"::Contact,
            ContactFeatureType."Relation Type"::Person);
      END;

      NoOfLines := ContactFeatureType.COUNT;

      IF ISNULL(DataProc) THEN
        DataProc := DataProc.DataProcessor;

      IF DataProc.OpenConnection(ServerTxt,DataBaseTxt, 'staging.ContactFeatureType', LogInTxt, PassWordTxt) THEN BEGIN
        IF DataProc.BeginTransaction() THEN BEGIN
          IF ContactFeatureType.FINDFIRST THEN BEGIN
            REPEAT
              LineCounter := LineCounter + 1;
              IF startmethod > 0 THEN BEGIN
                Window.UPDATE(2,ROUND(LineCounter/NoOfLines*10000,1));
              END;

              ContactFeatureType.CALCFIELDS("Feature Description");
              DataProc.InsertItem('[Datumentijd]', DateTimeStart, 'datetime');
              DataProc.InsertItem('[NAV Company]' , COMPANYNAME, 'varchar');
              DataProc.InsertItem('[Relation Type]',  ContactFeatureType."Relation Type" , 'varchar');
              DataProc.InsertItem('[Code]',  ContactFeatureType.Code , 'varchar');
              DataProc.InsertItem('[Line No.]',  ContactFeatureType."Line No." , 'int');
              DataProc.InsertItem('[Feature Group]',  ContactFeatureType."Feature Group" , 'varchar');
              DataProc.InsertItem('[Feature]',  ContactFeatureType.Feature , 'varchar');
              DataProc.InsertItem('[Feature Description]',  ContactFeatureType."Feature Description" , 'varchar');
              DataProc.InsertItem('[Remarks]',  ContactFeatureType.Comments , 'varchar');
              DataProc.InsertItem('[Modified By]',  ContactFeatureType."Modified By" , 'varchar');
              IF ContactFeatureType."Last Modified" <> 0DT THEN
                DataProc.InsertItem('[Last Modified]',  ContactFeatureType."Last Modified" , 'datetime');
              DataProc.InsertItem('[Value]',  ContactFeatureType.Value, 'decimal');

              DataProc.ExecuteRowInsert();

            UNTIL ContactFeatureType.NEXT = 0;
          END;
          DataProc.EndTransaction;
        END;
        DataProc.CloseConnection;
      END;
    END;

    PROCEDURE ProcessDisciplineTable@1100525007(ServerTxt@1100485003 : Text[30];DataBaseTxt@1100485002 : Text[30];LogInTxt@1100485001 : Text[30];PassWordTxt@1100485000 : Text[30];startmethod@1100485005 : Integer);
    VAR
      Discipline@1100485004 : Record 11020204;
    BEGIN
      //dbeekman, 12-4-2010: M18348

      IF startmethod > 0 THEN BEGIN
        Window.UPDATE(1,'Disciplines');
      END;

      NoOfLines := Discipline.COUNT;

      IF ISNULL(DataProc) THEN
        DataProc := DataProc.DataProcessor;

      IF DataProc.OpenConnection(ServerTxt,DataBaseTxt, 'staging.Discipline', LogInTxt, PassWordTxt) THEN BEGIN
        IF DataProc.BeginTransaction() THEN BEGIN
          IF Discipline.FINDFIRST THEN BEGIN
            REPEAT
              LineCounter := LineCounter + 1;
              IF startmethod > 0 THEN BEGIN
                Window.UPDATE(2,ROUND(LineCounter/NoOfLines*10000,1));
              END;

              DataProc.InsertItem('[Datumentijd]', DateTimeStart, 'datetime');
              DataProc.InsertItem('[NAV Company]' , COMPANYNAME, 'varchar');
              DataProc.InsertItem('[Code]',  Discipline.Code , 'varchar');
              DataProc.InsertItem('[Description]',  Discipline.Description , 'varchar');
              DataProc.ExecuteRowInsert();

            UNTIL Discipline.NEXT = 0;
          END;
          DataProc.EndTransaction;
        END;
        DataProc.CloseConnection;
      END;
    END;

    PROCEDURE ProcessServiceCallTable@1100525054(ServerTxt@1100525004 : Text[30];DataBaseTxt@1100525003 : Text[30];LogInTxt@1100525002 : Text[30];PassWordTxt@1100525001 : Text[30];startmethod@1100525000 : Integer);
    VAR
      ServiceCallRec@1100525005 : Record 11012822;
    BEGIN
      IF startmethod > 0 THEN BEGIN
        Window.UPDATE(1,'Service Meldingen');
      END;

      IF ISNULL(DataProc) THEN
        DataProc := DataProc.DataProcessor;

      IF DataProc.OpenConnection(ServerTxt,DataBaseTxt, 'staging.ServiceCall', LogInTxt, PassWordTxt) THEN BEGIN
        IF DataProc.BeginTransaction() THEN BEGIN
          IF ServiceCallRec.FINDFIRST THEN BEGIN
            NoOfLines := ServiceCallRec.COUNT;

            REPEAT
              LineCounter := LineCounter + 1;
              IF startmethod > 0 THEN BEGIN
                Window.UPDATE(2,ROUND(LineCounter/NoOfLines*10000,1));
              END;
              DataProc.InsertItem('Datumentijd', DateTimeStart, 'datetime');
              DataProc.InsertItem('[NAV Company]' , COMPANYNAME, 'varchar');

              DataProc.InsertItem('[No.]', ServiceCallRec."No." ,'varchar');
              DataProc.InsertItem('[Customer No.]', ServiceCallRec."Customer No." ,'varchar');
              DataProc.InsertItem('Name', ServiceCallRec.Name ,'varchar');
              DataProc.InsertItem('Address', ServiceCallRec.Address ,'varchar');
              DataProc.InsertItem('City', ServiceCallRec.City ,'varchar');
              DataProc.InsertItem('[Post Code]', ServiceCallRec."Post Code" ,'varchar');
              DataProc.InsertItem('Description', ServiceCallRec.Description ,'varchar');
              DataProc.InsertItem('[Contact Name]', ServiceCallRec."Contact Name" ,'varchar');
              DataProc.InsertItem('Priority', ServiceCallRec.Priority ,'varchar');
              CASE ServiceCallRec.Status OF
                ServiceCallRec.Status::Received:
                  DataProc.InsertItem('Status', 'Received' ,'varchar');
                ServiceCallRec.Status::"In Process":
                  DataProc.InsertItem('Status', 'In Process' ,'varchar');
                ServiceCallRec.Status::Finished:
                  DataProc.InsertItem('Status', 'Finished' ,'varchar');
                ServiceCallRec.Status::Cancelled:
                  DataProc.InsertItem('Status', 'Cancelled' ,'varchar');
              END;
              DataProc.InsertItem('[Problem Text]', '' ,'varchar');
              DataProc.InsertItem('[Internal Text]', '' ,'varchar');
              DataProc.InsertItem('[Your Reference]', ServiceCallRec."Your Reference" ,'varchar');
              DataProc.InsertItem('[Assigned to]', ServiceCallRec."Assigned to" ,'varchar');
              IF ServiceCallRec."Receiving Date" <> 0D THEN
                DataProc.InsertItem('[Receiving Date]', CreateDateTimeFromDate(ServiceCallRec."Receiving Date") ,'datetime');
              DataProc.InsertItem('[Received By]', ServiceCallRec."Received by" ,'varchar');
              IF ServiceCallRec."Modified on" <> 0D THEN
                DataProc.InsertItem('[Modified On]', CreateDateTimeFromDate(ServiceCallRec."Modified on") ,'datetime');
              DataProc.InsertItem('[Service Location Code]', ServiceCallRec."Service Location No." ,'varchar');
      //TODO KK.so
      //        DataProc.InsertItem('Installation', ServiceCallRec.Installation ,'varchar');
      //        DataProc.InsertItem('[Installation Part]', ServiceCallRec."Installation Part",'varchar');
      //TODO KK.eo
              IF ServiceCallRec."Expected Date" <> 0D THEN
                DataProc.InsertItem('[Expected Date]', CreateDateTimeFromDate(ServiceCallRec."Expected Date") ,'datetime');
              DataProc.InsertItem('[Expected Hours]', ServiceCallRec."Expected Hours",'decimal');
              DataProc.InsertItem('[Calling Contact]', ServiceCallRec."Calling Contact",'varchar');
              DataProc.InsertItem('[Calling Account]', ServiceCallRec."Calling Account",'varchar');
              DataProc.InsertItem('[Object No.]', ServiceCallRec."Object No.",'varchar');
              DataProc.InsertItem('[Object Customer]', ServiceCallRec."Object Customer",'varchar');
              //21-07-09 Next Fields are due
              //DataProc.InsertItem('[Expected Response]', ServiceCallRec."Expected Response",'decimal');
              //DataProc.InsertItem('[Actual Response]', ServiceCallRec."Actual Response",'decimal');
              //IF ServiceCallRec."Response Date" <> 0D THEN
              //  DataProc.InsertItem('[Response Date]', ServiceCallRec."Response Date",'datetime');
              DataProc.InsertItem('[Service Contract No.]', ServiceCallRec."Service Contract No.",'varchar');
              DataProc.InsertItem('[Order Kind]', ServiceCallRec."Order Kind",'varchar');
              DataProc.InsertItem('[Order Type]', ServiceCallRec."Order Type",'varchar');
              DataProc.InsertItem('[Global Dimension 1 Code]', ServiceCallRec."Global Dimension 1 Code",'varchar');
              DataProc.InsertItem('Discipline', ServiceCallRec.Discipline,'varchar');
              IF ServiceCallRec."Next Deadline" <> 0DT THEN  //db, 21-05-13: C007674
                DataProc.InsertItem('[Next Deadline]', ServiceCallRec."Next Deadline",'datetime');  //db, 17-12-12
              DataProc.InsertItem('[Next Reference Period]', ServiceCallRec."Next Reference Period",'varchar');
              DataProc.InsertItem('[Order No. Customer]', ServiceCallRec."Order No. Customer",'varchar');
      //        DataProc.InsertItem('[Service Control Year]', ServiceCallRec."Service Control Year",'int');
              DataProc.ExecuteRowInsert();
            UNTIL ServiceCallRec.NEXT=0;
          END;

          DataProc.EndTransaction
        END;
        DataProc.CloseConnection;
      END;

      LineCounter := 0;
      NoOfLines := 0;
    END;

    PROCEDURE ProcessServiceLocationTable@1100525075(ServerTxt@1100525004 : Text[30];DataBaseTxt@1100525003 : Text[30];LogInTxt@1100525002 : Text[30];PassWordTxt@1100525001 : Text[30];startmethod@1100525000 : Integer);
    VAR
      ServiceLocRec@1100525005 : Record 11012801;
    BEGIN
      IF startmethod > 0 THEN BEGIN
        Window.UPDATE(1,'Servicelocaties');
      END;

      IF ISNULL(DataProc) THEN
        DataProc := DataProc.DataProcessor;

      IF DataProc.OpenConnection(ServerTxt,DataBaseTxt, 'staging.Servicelocation', LogInTxt, PassWordTxt) THEN BEGIN
        IF DataProc.BeginTransaction() THEN BEGIN
          IF ServiceLocRec.FINDFIRST THEN BEGIN
            NoOfLines := ServiceLocRec.COUNT;

            REPEAT
              LineCounter := LineCounter + 1;
              IF startmethod > 0 THEN BEGIN
                Window.UPDATE(2,ROUND(LineCounter/NoOfLines*10000,1));
              END;
              DataProc.InsertItem('Datumentijd', DateTimeStart, 'datetime');
              DataProc.InsertItem('[NAV Company]' , COMPANYNAME, 'varchar');

              DataProc.InsertItem('[No.]', ServiceLocRec."No." ,'varchar');
              DataProc.InsertItem('[Search Name]', ServiceLocRec."Search Name" ,'varchar');
              DataProc.InsertItem('Description', ServiceLocRec.Description ,'varchar');
              DataProc.InsertItem('[Description 2]', ServiceLocRec."Description 2" ,'varchar');
              IF ServiceLocRec."Creation Date" <> 0D THEN
                DataProc.InsertItem('[Creation Date]', CreateDateTimeFromDate(ServiceLocRec."Creation Date") ,'datetime');
              DataProc.InsertItem('[Travel Distance]', ServiceLocRec."Travel Distance" ,'decimal');
              DataProc.InsertItem('[Travel Time]', ServiceLocRec."Travel Time" ,'decimal');
              DataProc.InsertItem('[Travel Cost]', ServiceLocRec."Travel Cost" ,'decimal');
              DataProc.InsertItem('[Customer No.]', ServiceLocRec."Customer No." ,'varchar');
              DataProc.InsertItem('Address', ServiceLocRec.Address ,'varchar');
              DataProc.InsertItem('[Address 2]', ServiceLocRec."Address 2" ,'varchar');
              DataProc.InsertItem('City', ServiceLocRec.City ,'varchar');
              DataProc.InsertItem('[Contact Name]', ServiceLocRec."Contact Name" ,'varchar');
              DataProc.InsertItem('[Post Code]', ServiceLocRec."Post Code" ,'varchar');
              DataProc.InsertItem('[Country Code]', ServiceLocRec."Country/Region Code" ,'varchar');
              DataProc.InsertItem('[Phone No.]', ServiceLocRec."Phone No." ,'varchar');
              DataProc.InsertItem('[E-Mail]', ServiceLocRec."E-Mail" ,'varchar');
              DataProc.InsertItem('[Salesperson Code]', ServiceLocRec."Location Manager" ,'varchar');
              DataProc.InsertItem('[Project (Log)]', ServiceLocRec."Project No." ,'varchar');
              IF ServiceLocRec.Blocked THEN
                DataProc.InsertItem('Blocked', 'Yes' ,'varchar')
              ELSE
                DataProc.InsertItem('Blocked', 'No' ,'varchar');
              //21-07-09.sn
      //        DataProc.InsertItem('[Part Group]', ServiceLocRec."Part Group" ,'varchar'); //TODO KK.o
              //21-07-09.en
              DataProc.ExecuteRowInsert();
            UNTIL ServiceLocRec.NEXT=0;
          END;

          DataProc.EndTransaction
        END;
        DataProc.CloseConnection;
      END;

      LineCounter := 0;
      NoOfLines := 0;
    END;

    PROCEDURE ProcessServiceInstallTable@1100525003(ServerTxt@1100525004 : Text[30];DataBaseTxt@1100525003 : Text[30];LogInTxt@1100525002 : Text[30];PassWordTxt@1100525001 : Text[30];startmethod@1100525000 : Integer);
    BEGIN
      //ServInstRec@1100525005 : Record 11012802;
      {
      //TODO KK.so
      IF startmethod > 0 THEN BEGIN
        Window.UPDATE(1,'Installaties');
      END;

      IF IsNull(DataProc) THEN
        DataProc := DataProc.DataProcessor;

      IF DataProc.OpenConnection(ServerTxt,DataBaseTxt, 'staging.ServiceInstallation', LogInTxt, PassWordTxt) THEN BEGIN
        IF DataProc.BeginTransaction() THEN BEGIN
          IF ServInstRec.FINDFIRST THEN BEGIN
            NoOfLines := ServInstRec.COUNT;

            REPEAT
              LineCounter := LineCounter + 1;
              IF startmethod > 0 THEN BEGIN
                Window.UPDATE(2,ROUND(LineCounter/NoOfLines*10000,1));
              END;
              DataProc.InsertItem('Datumentijd', DateTimeStart, 'datetime');
              DataProc.InsertItem('[NAV Company]' , COMPANYNAME, 'varchar');

              DataProc.InsertItem('[Service Location Code]', ServInstRec."Service Location No." ,'varchar');
              DataProc.InsertItem('Installation', ServInstRec.Installation ,'varchar');
              DataProc.InsertItem('Description', ServInstRec.Description ,'varchar');
              DataProc.InsertItem('Frequency', ServInstRec.Frequency ,'decimal');
              DataProc.InsertItem('[Unit of Measure]', ServInstRec."Unit of Measure" ,'varchar');
              DataProc.InsertItem('Level', ServInstRec.Level ,'int');
              DataProc.InsertItem('[Service Contract No.]', ServInstRec."Service Contract No." ,'varchar');
              DataProc.InsertItem('[Customer No.]', ServInstRec."Customer No." ,'varchar');
              DataProc.InsertItem('[Reason Out of Use]', ServInstRec."Reason Out of Use" ,'varchar');
              IF ServInstRec."Date Out of Use" <> 0D THEN
                DataProc.InsertItem('[Date Out of Use]', CreateDateTimeFromDate(ServInstRec."Date Out of Use") ,'datetime');
              DataProc.ExecuteRowInsert();
            UNTIL ServInstRec.NEXT=0;
          END;

          DataProc.EndTransaction
        END;
        DataProc.CloseConnection;
      END;

      LineCounter := 0;
      NoOfLines := 0;
      //TODO KK.eo
      }
    END;

    PROCEDURE ProcessServInstalPartlTable@1100525005(ServerTxt@1100525004 : Text[30];DataBaseTxt@1100525003 : Text[30];LogInTxt@1100525002 : Text[30];PassWordTxt@1100525001 : Text[30];startmethod@1100525000 : Integer);
    BEGIN
      //ServInstPartRec@1100525005 : Record 11012803;
      {
      //TODO KK.so
      IF startmethod > 0 THEN BEGIN
        Window.UPDATE(1,'Installatie onderdelen');
      END;

      IF IsNull(DataProc) THEN
        DataProc := DataProc.DataProcessor;

      IF DataProc.OpenConnection(ServerTxt,DataBaseTxt, 'staging.ServiceInstallationPart', LogInTxt, PassWordTxt) THEN BEGIN
        IF DataProc.BeginTransaction() THEN BEGIN
          IF ServInstPartRec.FINDFIRST THEN BEGIN
            NoOfLines := ServInstPartRec.COUNT;

            REPEAT
              LineCounter := LineCounter + 1;
              IF startmethod > 0 THEN BEGIN
                Window.UPDATE(2,ROUND(LineCounter/NoOfLines*10000,1));
              END;
              DataProc.InsertItem('Datumentijd', DateTimeStart, 'datetime');
              DataProc.InsertItem('[NAV Company]' , COMPANYNAME, 'varchar');

              DataProc.InsertItem('[Service Location Code]', ServInstPartRec."Service Location No." ,'varchar');
              DataProc.InsertItem('Installation', ServInstPartRec.Installation ,'varchar');
              DataProc.InsertItem('[Installation Part]', ServInstPartRec."Installation Part" ,'varchar');
              DataProc.InsertItem('Description', ServInstPartRec.Description ,'varchar');
              DataProc.InsertItem('Quantity', ServInstPartRec.Quantity ,'decimal');
              DataProc.InsertItem('[Unit of Measure]', ServInstPartRec."Unit of Measure" ,'varchar');
              DataProc.InsertItem('[Service Contract No.]', ServInstPartRec."Service Contract No." ,'varchar');
              DataProc.InsertItem('Level', ServInstPartRec.Level ,'int');
              DataProc.InsertItem('[Warranty Code]', ServInstPartRec."Warranty Code" ,'varchar');
              IF ServInstPartRec."Warranty Starting Date" <> 0D THEN
                DataProc.InsertItem('[Starting Date Warranty]',
                                    CreateDateTimeFromDate(ServInstPartRec."Warranty Starting Date") ,'datetime');

              IF ServInstPartRec."Warranty Ending Date" <> 0D THEN
                DataProc.InsertItem('[Finishing Date Warranty]',
                                    CreateDateTimeFromDate(ServInstPartRec."Warranty Ending Date") ,'datetime');
              DataProc.InsertItem('[Reason Out of Use]', ServInstPartRec."Reason Out of Use" ,'varchar');
              IF ServInstPartRec."Date Out of Use" <> 0D THEN
                DataProc.InsertItem('[Date Out of Use]', CreateDateTimeFromDate(ServInstPartRec."Date Out of Use") ,'datetime');
              DataProc.InsertItem('[Object No.]', ServInstPartRec."Object No." ,'varchar');
              DataProc.InsertItem('[Object Customer]', ServInstPartRec."Object Customer" ,'varchar');
              //21-07-09.sn
              DataProc.InsertItem('[Part Group]', ServInstPartRec."Part Group" ,'varchar');
              //21-07-09.en

              DataProc.ExecuteRowInsert();
            UNTIL ServInstPartRec.NEXT=0;
          END;

          DataProc.EndTransaction
        END;
        DataProc.CloseConnection;
      END;

      LineCounter := 0;
      NoOfLines := 0;
      //TODO KK.eo
      }
    END;

    PROCEDURE ProcessServContractTable@1100525011(ServerTxt@1100525004 : Text[30];DataBaseTxt@1100525003 : Text[30];LogInTxt@1100525002 : Text[30];PassWordTxt@1100525001 : Text[30];startmethod@1100525000 : Integer);
    VAR
      ServContractRec@1100525005 : Record 11012812;
      TryoutSuccessor@1100525006 : Record 11012761;
      RecContactFeatureType@1100525008 : Record 11012753;
      TryOutNo@1100525007 : Code[20];
    BEGIN
      IF startmethod > 0 THEN BEGIN
        Window.UPDATE(1,'Service Contracten');
      END;

      IF ISNULL(DataProc) THEN
        DataProc := DataProc.DataProcessor;

      IF DataProc.OpenConnection(ServerTxt,DataBaseTxt, 'staging.ServiceContract', LogInTxt, PassWordTxt) THEN BEGIN
        IF DataProc.BeginTransaction() THEN BEGIN
          IF ServContractRec.FINDFIRST THEN BEGIN
            NoOfLines := ServContractRec.COUNT;

            REPEAT
              LineCounter := LineCounter + 1;
              IF startmethod > 0 THEN BEGIN
                Window.UPDATE(2,ROUND(LineCounter/NoOfLines*10000,1));
              END;
              DataProc.InsertItem('Datumentijd', DateTimeStart, 'datetime');
              DataProc.InsertItem('[NAV Company]' , COMPANYNAME, 'varchar');

              DataProc.InsertItem('[No.]', ServContractRec."No." ,'varchar');
              DataProc.InsertItem('Description', ServContractRec.Description ,'varchar');
              DataProc.InsertItem('[Description 2]', ServContractRec."Description 2" ,'varchar');
              CASE ServContractRec.Status OF
                ServContractRec.Status::Applied:
                  DataProc.InsertItem('Status', 'Applied' ,'varchar');
                ServContractRec.Status::Offered:
                  DataProc.InsertItem('Status', 'Offered' ,'varchar');
                ServContractRec.Status::Order:
                  DataProc.InsertItem('Status', 'Order' ,'varchar');
                ServContractRec.Status::"Invoicing Allowed":
                  DataProc.InsertItem('Status', 'Invoicing Allowed' ,'varchar');
                ServContractRec.Status::Expired:
                  DataProc.InsertItem('Status', 'Expired' ,'varchar');
                ServContractRec.Status::Closed:
                  DataProc.InsertItem('Status', 'Closed' ,'varchar');
              END;
              IF ServContractRec.Blocked THEN
                DataProc.InsertItem('Blocked', 'Yes' ,'varchar')
              ELSE
                DataProc.InsertItem('Blocked', 'No' ,'varchar');
              DataProc.InsertItem('[Customer No.]', ServContractRec."Customer No." ,'varchar');
              DataProc.InsertItem('[Contact Name]', ServContractRec."Contact Name" ,'varchar');
              DataProc.InsertItem('[Contract Manager]', ServContractRec."Contract Manager" ,'varchar');
              DataProc.InsertItem('[Bill-to Customer No.]', ServContractRec."Bill-to Customer No. (CP)" ,'varchar');
              DataProc.InsertItem('[Contract Group]', ServContractRec."Contract Group" ,'varchar');
              DataProc.InsertItem('[Service Type (Other)]', ServContractRec."Service Type (Other)" ,'varchar');
              DataProc.InsertItem('[Service Type]', ServContractRec."Service Type" ,'varchar');
              IF ServContractRec."Order Date" <> 0D THEN
                DataProc.InsertItem('[Order Date]', CreateDateTimeFromDate(ServContractRec."Order Date") ,'datetime');
              IF ServContractRec."Starting Date" <> 0D THEN
                DataProc.InsertItem('[Starting Date]', CreateDateTimeFromDate(ServContractRec."Starting Date") ,'datetime');
              IF ServContractRec."Ending Date" <> 0D THEN
                DataProc.InsertItem('[Ending Date]', CreateDateTimeFromDate(ServContractRec."Ending Date") ,'datetime');
              //21-07-09 DataProc.InsertItem('[Response Time]', ServContractRec."Response Time" ,'decimal');
              IF ServContractRec."Input Date" <> 0D THEN
                DataProc.InsertItem('[Input Date]', CreateDateTimeFromDate(ServContractRec."Input Date") ,'datetime');
              IF ServContractRec."Renewal Date" <> 0D THEN
                DataProc.InsertItem('[Renewal Date]', CreateDateTimeFromDate(ServContractRec."Renewal Date") ,'datetime');
              DataProc.InsertItem('[Department Code (Other)]', ServContractRec."Department Code (Other)" ,'varchar');
              DataProc.InsertItem('[Global Dimension 1 Code]', ServContractRec."Global Dimension 1 Code" ,'varchar');

              //dbeekman.sn, 12-4-2010: M18348
              TryoutSuccessor.RESET;
              TryoutSuccessor.SETCURRENTKEY("Service Contract No.");
              TryoutSuccessor.SETRANGE("Service Contract No.",ServContractRec."No.");
              //ahollebrandse.sn 07-03-2011
              TryoutSuccessor.SETFILTER("Try-out No.", '<>%1', '');
              //ahollebrandse.en 07-03-2011
              IF TryoutSuccessor.FINDFIRST THEN BEGIN
                DataProc.InsertItem('[Try-out No.]',TryoutSuccessor."Try-out No.", 'varchar');
                TryOutNo := TryoutSuccessor."Try-out No.";
                RecContactFeatureType.SETCURRENTKEY("Relation Type",Code,"Feature Group");
                RecContactFeatureType.SETRANGE("Relation Type",RecContactFeatureType."Relation Type"::"Try-out");
                RecContactFeatureType.SETRANGE(Code,TryOutNo);
                RecContactFeatureType.SETRANGE("Feature Group",'Sector/marktgroep/objectsoort');
                IF RecContactFeatureType.FINDFIRST THEN BEGIN
                  RecContactFeatureType.CALCFIELDS("Feature Description");
                  DataProc.InsertItem('[Sector/Market Group/Object Type Description]',
                                        RecContactFeatureType."Feature Description", 'varchar');
                END;
              END;
              //AH.sn 28-03-2011
              TryoutSuccessor.RESET;
              TryoutSuccessor.SETCURRENTKEY("Service Contract No.");
              TryoutSuccessor.SETRANGE("Service Contract No.",ServContractRec."No.");
              TryoutSuccessor.SETFILTER(TryoutSuccessor."Try-out Quote",'<>%1','');
              IF TryoutSuccessor.FINDFIRST THEN
                DataProc.InsertItem('[Try-out Quote]',TryoutSuccessor."Try-out Quote", 'varchar');
              //AH.en

              DataProc.InsertItem('[Contract Amount]', 0 ,'decimal');
              //dbeekman.en

              DataProc.ExecuteRowInsert();
            UNTIL ServContractRec.NEXT=0;
          END;

          DataProc.EndTransaction
        END;
        DataProc.CloseConnection;
      END;

      LineCounter := 0;
      NoOfLines := 0;
    END;

    PROCEDURE ProcessServControlTable@1100525017(ServerTxt@1100525004 : Text[30];DataBaseTxt@1100525003 : Text[30];LogInTxt@1100525002 : Text[30];PassWordTxt@1100525001 : Text[30];startmethod@1100525000 : Integer);
    VAR
      ServContractRec@1100525005 : Record 11012812;
      ServLedgerRec@1100525006 : Record 11012819;
      CostContMgt@1210190001 : Codeunit 11012006;
      PrognTotRevDec@1210190002 : Decimal;
      PrognTotCostDec@1210190003 : Decimal;
      TotBudgetSC@1210190004 : Decimal;
      TotBudgetSO@1210190005 : Decimal;
      DeterminePrognosisDate@1210190010 : Codeunit 11012029;
      FrYear@1210190011 : Integer;
      ToYear@1210190012 : Integer;
      i@1210190013 : Integer;
      NotZero@1210190014 : Boolean;
    BEGIN
      //TempYearContract@1100525007 : TEMPORARY Record 11012816;
      //RecPrognosis@1210190000 : Record 11012868;
      //RecPrognosisLine@1210190006 : Record 11012869;
      {
      //TODO KK.so
      IF startmethod > 0 THEN
        Window.UPDATE(1,'Opbouwen contractbewaking');

      IF IsNull(DataProc) THEN
        DataProc := DataProc.DataProcessor;

      TempYearContract.DELETEALL;
      TempYearContract.RESET;

      FrYear := DataWareHouseSetupRec."Service Control Year From";
      ToYear := DataWareHouseSetupRec."Service Control Year To";
      //TODO KK.eo
      }

      //**4PS.GB.so 18-10-2011
      {IF ServContractRec.FINDFIRST THEN BEGIN
        NoOfLines := ServContractRec.COUNT;
        REPEAT
          LineCounter := LineCounter + 1;
          IF startmethod > 0 THEN BEGIN
            Window.UPDATE(2,ROUND(LineCounter/NoOfLines*10000,1));
          END;
          ServLedgerRec.SETCURRENTKEY("Service Contract No.",
                                      "Source Type",
                                      "Cost Type",
                                      "Global Dimension 2 Code",
                                      "Service Control Year",
                                      "Posting Date");
          ServLedgerRec.SETRANGE("Service Contract No.",ServContractRec."No.");
          IF ServLedgerRec.FINDFIRST THEN BEGIN
            REPEAT
              IF NOT TempYearContract.GET(ServContractRec."No.",ServLedgerRec."Service Control Year") THEN BEGIN
                TempYearContract.INIT;
                TempYearContract."Service Contract No." := ServContractRec."No.";
                TempYearContract."Line No." := ServLedgerRec."Service Control Year";
                TempYearContract.INSERT;
              END;
            UNTIL ServLedgerRec.NEXT = 0;
          END ELSE BEGIN
          END;
        UNTIL ServContractRec.NEXT = 0;
      END;
      }
      //**4PS.GB.eo 18-10-2011

      {
      //TODO KK.so
      //**4PS.GB.sn 18-10-2011
      IF ServContractRec.FINDFIRST THEN BEGIN
        NoOfLines := ServContractRec.COUNT;
        REPEAT
          LineCounter := LineCounter + 1;
          IF startmethod > 0 THEN
            Window.UPDATE(2,ROUND(LineCounter/NoOfLines*10000,1));
          FOR i := FrYear TO ToYear DO BEGIN
            IF NOT TempYearContract.GET(ServContractRec."No.", i) THEN BEGIN
              TempYearContract.INIT;
              TempYearContract."Service Contract No." := ServContractRec."No.";
              TempYearContract."Line No." := i;
              TempYearContract.INSERT;
            END;
          END;
        UNTIL ServContractRec.NEXT = 0;
      END;
      //**4PS.GB.en 18-10-2011

      LineCounter := 0;
      IF startmethod > 0 THEN BEGIN
        Window.UPDATE(1,'Repliceren contractbewaking');
      END;
      NoOfLines := TempYearContract.COUNT;

      IF DataProc.OpenConnection(ServerTxt,DataBaseTxt, 'staging.ServiceContract_Snapshot', LogInTxt, PassWordTxt) THEN BEGIN
        IF DataProc.BeginTransaction() THEN BEGIN
          IF TempYearContract.FINDFIRST THEN BEGIN
            REPEAT
              LineCounter := LineCounter + 1;
              IF startmethod > 0 THEN BEGIN
                Window.UPDATE(2,ROUND(LineCounter/NoOfLines*10000,1));
              END;
              IF ServContractRec.GET(TempYearContract."Service Contract No.") THEN BEGIN
                NotZero := FALSE;
                ServContractRec.SETFILTER("Service Control Year Filter",'%1',TempYearContract."Line No.");
                ServContractRec.CALCFIELDS( "Actual Costs", "Actual Costs (Contract)",
                                            "Actual Costs (Additional)", "Actual Hours",
                                            "Actual Hours (Additional)", "Actual Hours (Contract)",
                                            "Budget Ovh. Surch. (Contract)");
                ServContractRec.CALCFIELDS("Budget Ovh. Surch. (ServOrder)", "Budget Amount (Contract)",
                                           "Budget Amount (ServOrder)", "Closed Revenues");
                ServContractRec.CALCFIELDS("Closed Costs", "Revenues (Additional)", Revenues);
                ServContractRec.CALCFIELDS("Revenues (Contract)", "Open Amount (Hours)","Open (Purchase)",
                                           "Open Ovh. Surch. Firm (Purch.)","Open Ovh. Surch. (Inventory)",
                                           "Open (Inventory)", "Open Ovh. Surch. (Hours)");
                ServContractRec.CALCFIELDS("Order Amount", "Prognosis Costs",
                                           "Prognosis Revenues", "Received/Not Invoiced", "Actual Preclosure Result");
      //**4PS.sn SR 17-02-2014 code uitgezet
      {
                //**4PS.GB.sn 18-10-2011
                IF (ServContractRec.Revenues + ServContractRec."Actual Costs" + ServContractRec."Actual Costs (Contract)" +
                  ServContractRec."Actual Costs (Additional)" + ServContractRec."Closed Revenues" + ServContractRec."Closed Costs" +
                  ServContractRec."Open Amount (Hours)" + ServContractRec."Open (Purchase)" +
                  ServContractRec."Open Ovh. Surch. Firm (Purch.)" + ServContractRec."Open Ovh. Surch. (Inventory)" +
                  ServContractRec."Open (Inventory)" + ServContractRec."Open Ovh. Surch. (Hours)" +
                  ServContractRec."Received/Not Invoiced" + ServContractRec."Actual Preclosure Result" +
                  ServContractRec."Budget Amount (Contract)" + ServContractRec."Budget Amount (ServOrder)" +
                  ServContractRec."Prognosis Costs" + ServContractRec."Prognosis Revenues") <> 0
                  THEN BEGIN
                    DataProc.InsertItem('Datumentijd', DateTimeStart, 'datetime');
                    DataProc.InsertItem('[NAV Company]' , COMPANYNAME, 'varchar');
                    DataProc.InsertItem('[No.]', ServContractRec."No." ,'varchar');
                    DataProc.InsertItem('Year', TempYearContract."Line No." ,'int');
                    DataProc.InsertItem('[Actual Costs]', ServContractRec."Actual Costs" , 'decimal');
                    DataProc.InsertItem('[Actual Costs (Contract)]', ServContractRec."Actual Costs (Contract)" , 'decimal');
                    DataProc.InsertItem('[Actual Costs (Additional)]', ServContractRec."Actual Costs (Additional)" , 'decimal');
                    //DataProc.InsertItem('[Actual Hours]', ServContractRec."Actual Hours (Additional)" , 'decimal');//**4PS.GB.21-10-11.o
                    DataProc.InsertItem('[Actual Hours]', ServContractRec."Actual Hours", 'decimal'); //**4PS.GB.21-10-11.n
                    DataProc.InsertItem('[Actual Hours (Additional)]', ServContractRec."Actual Hours (Additional)" , 'decimal');
                    DataProc.InsertItem('[Actual Hours (Contract)]', ServContractRec."Actual Hours (Contract)" , 'decimal');
                    DataProc.InsertItem('[Budget Ovh. Surch. (Contract)]', ServContractRec."Budget Ovh. Surch. (Contract)" , 'decimal');
                    DataProc.InsertItem('[Budget Ovh. Surch. (ServOrder)]', ServContractRec."Budget Ovh. Surch. (ServOrder)" , 'decimal'
      );
                    DataProc.InsertItem('[Budget Amount (Contract)]', ServContractRec."Budget Amount (Contract)" , 'decimal');
                    DataProc.InsertItem('[Budget Amount (ServOrder)]', ServContractRec."Budget Amount (ServOrder)" , 'decimal');
                    DataProc.InsertItem('[Closed Revenues]', ServContractRec."Closed Revenues" , 'decimal');
                    DataProc.InsertItem('[Closed Costs]', ServContractRec."Closed Costs" , 'decimal');
                    DataProc.InsertItem('[Revenues]', ServContractRec.Revenues , 'decimal');
                    DataProc.InsertItem('[Revenues (Additional)]', ServContractRec."Revenues (Additional)" , 'decimal');
                    DataProc.InsertItem('[Revenues (Contract)]', ServContractRec."Revenues (Contract)" , 'decimal');
                    DataProc.InsertItem('[Open Amount (Hours)]', ServContractRec."Open Amount (Hours)" , 'decimal');
                    DataProc.InsertItem('[Open (Purchase)]',ServContractRec."Open (Purchase)" , 'decimal');
                    DataProc.InsertItem('[Open Ovh. Surch. (Purchase)]',ServContractRec."Open Ovh. Surch. Firm (Purch.)" , 'decimal');
                    DataProc.InsertItem('[Open Ovh. Surch. (Inventory)]',ServContractRec."Open Ovh. Surch. (Inventory)" , 'decimal');
                    DataProc.InsertItem('[Open (Inventory)]',ServContractRec."Open (Inventory)" , 'decimal');
                    DataProc.InsertItem('[Open Ovh. Surch. (Hours)]',ServContractRec."Open Ovh. Surch. (Hours)" , 'decimal');
                    DataProc.InsertItem('[Order Amount]',ServContractRec."Order Amount" , 'decimal');
                    DataProc.InsertItem('[Prognosis Costs]',ServContractRec."Prognosis Costs" , 'decimal');
                    DataProc.InsertItem('[Prognosis Revenues]',ServContractRec."Prognosis Revenues" , 'decimal');
                    DataProc.InsertItem('[Received/Not invoiced]',ServContractRec."Received/Not Invoiced" , 'decimal');
                    DeterminePrognosisDate.DetermineContractDate(ServContractRec);
                    IF EVALUATE(RecPrognosis."Prognosis Date", ServContractRec.GETFILTER("Prognosis Filter")) THEN BEGIN
                      IF RecPrognosis."Prognosis Date" <> 0D THEN BEGIN
                        DataProc.InsertItem('[Prognosis Date]', CreateDateTimeFromDate(RecPrognosis."Prognosis Date"), 'datetime');
                      END;
                    END;
                    ServContractRec.CALCFIELDS("Actual Hours", Revenues, Name,
                                               Address, City, "Budget Hours (ServOrder)",
                                               "Budget Hours (Contract)");
                    CostContMgt.CalcFieldsServContr(ServContractRec);
                    PrognTotRevDec := ServContractRec.Revenues +  ServContractRec."Prognosis Revenues";
                    PrognTotCostDec := CostContMgt.PrognTotCostServContr(ServContractRec, PrognTotRevDec);
                    TotBudgetSC := (ServContractRec."Budget Amount (Contract)" + ServContractRec."Budget Ovh. Surch. (Contract)");
                    TotBudgetSO := (ServContractRec."Budget Amount (ServOrder)" + ServContractRec."Budget Ovh. Surch. (ServOrder)");
                    IF ServContractRec."Prognosis Filter" <> 0D THEN
                      DataProc.InsertItem('[Prognosis Date]', CreateDateTimeFromDate(ServContractRec."Prognosis Filter"), 'datetime');
                    DataProc.InsertItem('[Prognosis Total Costs]', PrognTotCostDec, 'decimal');
                    DataProc.InsertItem('[Prognosis Total Revenue]', PrognTotRevDec, 'decimal');
                    DataProc.InsertItem('[Prognosis Financial Result]', (PrognTotRevDec - PrognTotCostDec), 'decimal');
                    DataProc.InsertItem('[Contract Amount]', CostContMgt.TotContrAmntServContr(ServContractRec, FALSE), 'decimal');
                    DataProc.InsertItem('[Total Budget (Contract)]', TotBudgetSC, 'decimal');
                    DataProc.InsertItem('[Total Budget (ServOrder)]', TotBudgetSO, 'decimal');
                    DataProc.InsertItem('[Budget Hours (Contract)]', ServContractRec."Budget Hours (Contract)", 'decimal');
                    DataProc.InsertItem('[Budget Hours (ServOrder)]', ServContractRec."Budget Hours (ServOrder)", 'decimal');
                    DataProc.InsertItem('[Actual Preclosure Result]', ServContractRec."Actual Preclosure Result", 'decimal');
                    DataProc.ExecuteRowInsert();
                  END;
              END;
            UNTIL TempYearContract.NEXT=0;
          END;
          DataProc.EndTransaction
        END;
        DataProc.CloseConnection;
      END;
      }
      //**4PS.en SR 17-02-2014 code uitgezet
                //**4PS.GB.sn 18-10-2011
                //**4PS.sn SR 17-02-2014 code aangepast
                IF (ServContractRec.Revenues <> 0) OR (ServContractRec."Actual Costs"<> 0)
                 OR (ServContractRec."Actual Costs (Contract)"<> 0) OR
                  (ServContractRec."Actual Costs (Additional)"<> 0) OR (ServContractRec."Closed Revenues"<> 0) OR
                  (ServContractRec."Closed Costs"<> 0) OR
                  (ServContractRec."Open Amount (Hours)" + ServContractRec."Open (Purchase)" +
                  ServContractRec."Open Ovh. Surch. Firm (Purch.)" + ServContractRec."Open Ovh. Surch. (Inventory)" +
                  ServContractRec."Open (Inventory)" + ServContractRec."Open Ovh. Surch. (Hours)" <> 0) OR
                  (ServContractRec."Received/Not Invoiced"<> 0) OR (ServContractRec."Actual Preclosure Result"<> 0) OR
                  (ServContractRec."Budget Amount (Contract)"<> 0) OR (ServContractRec."Budget Amount (ServOrder)"<> 0) OR
                  (ServContractRec."Prognosis Costs"<> 0) OR (ServContractRec."Prognosis Revenues"<> 0)
                  THEN BEGIN
                    DataProc.InsertItem('Datumentijd', DateTimeStart, 'datetime');
                    DataProc.InsertItem('[NAV Company]' , COMPANYNAME, 'varchar');
                    DataProc.InsertItem('[No.]', ServContractRec."No." ,'varchar');
                    DataProc.InsertItem('Year', TempYearContract."Line No." ,'int');
                    DataProc.InsertItem('[Actual Costs]', ServContractRec."Actual Costs" , 'decimal');
                    DataProc.InsertItem('[Actual Costs (Contract)]', ServContractRec."Actual Costs (Contract)" , 'decimal');
                    DataProc.InsertItem('[Actual Costs (Additional)]', ServContractRec."Actual Costs (Additional)" , 'decimal');
                    DataProc.InsertItem('[Actual Hours]', ServContractRec."Actual Hours", 'decimal'); //**4PS.GB.21-10-11.n
                    DataProc.InsertItem('[Actual Hours (Additional)]', ServContractRec."Actual Hours (Additional)" , 'decimal');
                    DataProc.InsertItem('[Actual Hours (Contract)]', ServContractRec."Actual Hours (Contract)" , 'decimal');
                    DataProc.InsertItem('[Budget Ovh. Surch. (Contract)]', ServContractRec."Budget Ovh. Surch. (Contract)" , 'decimal');
                    DataProc.InsertItem('[Budget Ovh. Surch. (ServOrder)]', ServContractRec."Budget Ovh. Surch. (ServOrder)" , 'decimal'
      );
                    DataProc.InsertItem('[Budget Amount (Contract)]', ServContractRec."Budget Amount (Contract)" , 'decimal');
                    DataProc.InsertItem('[Budget Amount (ServOrder)]', ServContractRec."Budget Amount (ServOrder)" , 'decimal');
                    DataProc.InsertItem('[Closed Revenues]', ServContractRec."Closed Revenues" , 'decimal');
                    DataProc.InsertItem('[Closed Costs]', ServContractRec."Closed Costs" , 'decimal');
                    DataProc.InsertItem('[Revenues]', ServContractRec.Revenues , 'decimal');
                    DataProc.InsertItem('[Revenues (Additional)]', ServContractRec."Revenues (Additional)" , 'decimal');
                    DataProc.InsertItem('[Revenues (Contract)]', ServContractRec."Revenues (Contract)" , 'decimal');
                    DataProc.InsertItem('[Open Amount (Hours)]', ServContractRec."Open Amount (Hours)" , 'decimal');
                    DataProc.InsertItem('[Open (Purchase)]',ServContractRec."Open (Purchase)" , 'decimal');
                    DataProc.InsertItem('[Open Ovh. Surch. (Purchase)]',ServContractRec."Open Ovh. Surch. Firm (Purch.)" , 'decimal');
                    DataProc.InsertItem('[Open Ovh. Surch. (Inventory)]',ServContractRec."Open Ovh. Surch. (Inventory)" , 'decimal');
                    DataProc.InsertItem('[Open (Inventory)]',ServContractRec."Open (Inventory)" , 'decimal');
                    DataProc.InsertItem('[Open Ovh. Surch. (Hours)]',ServContractRec."Open Ovh. Surch. (Hours)" , 'decimal');
                    DataProc.InsertItem('[Order Amount]',ServContractRec."Order Amount" , 'decimal');
                    DataProc.InsertItem('[Received/Not invoiced]',ServContractRec."Received/Not Invoiced" , 'decimal');

                    ServContractRec.CALCFIELDS("Actual Hours", Revenues, Name, Address,
                     City, "Budget Hours (ServOrder)", "Budget Hours (Contract)");
                    CostContMgt.CalcFieldsServContr(ServContractRec);

                    PrognTotRevDec := 0;
                    PrognTotCostDec := 0;
                    PrognTotHours := 0;
                    CLEAR(PrognosisTotalCost); //#C019440.n
                    ServiceContractPrognosisRec.RESET;
                    ServiceContractPrognosisRec.SETCURRENTKEY("Service Contract No.", "Prognosis Date");
                    ServiceContractPrognosisRec.ASCENDING(TRUE);
                    ServiceContractPrognosisRec.SETFILTER("Service Contract No.", ServContractRec."No.");
                    ServiceContractPrognosisRec.SETFILTER("Service Control Year", '%1', TempYearContract."Line No.");
                    ServiceContractPrognosisRec.SETFILTER("Prognosis Date", '..%1', TODAY);
                    IF ServiceContractPrognosisRec.FINDLAST = TRUE THEN BEGIN
                      DataProc.InsertItem
                       ('[Prognosis Date]', CreateDateTimeFromDate(ServiceContractPrognosisRec."Prognosis Date"), 'Datetime');
                      ServiceContractPrognLineRec.RESET;
                      ServiceContractPrognLineRec.SETCURRENTKEY("Service Contract No.", "Prognosis Date", "Source Type");
                      ServiceContractPrognLineRec.SETFILTER("Service Contract No.", ServContractRec."No.");
                      ServiceContractPrognLineRec.SETFILTER("Service Control Year", '%1', TempYearContract."Line No.");
                      ServiceContractPrognLineRec.SETFILTER("Prognosis Date", '%1', ServiceContractPrognosisRec."Prognosis Date");
                      IF ServiceContractPrognLineRec.FINDFIRST THEN BEGIN
                        REPEAT
                          PrognTotRevDec += (ServiceContractPrognLineRec."Actual Revenues"
                           + ServiceContractPrognLineRec."Prognosis Revenues");
                          PrognTotCostDec += (ServiceContractPrognLineRec."Total Cost"
                           + ServiceContractPrognLineRec."Amount incl. Surcharge");
                          IF ServiceContractPrognLineRec."Cost Type" = ServiceContractPrognLineRec."Cost Type"::Labor THEN
                            PrognTotHours += ServiceContractPrognLineRec.Quantity + ServiceContractPrognLineRec."Total Hours";

                          //#C019440.sn
                          CASE ServiceContractPrognLineRec."Cost Type" OF
                            ServiceContractPrognLineRec."Cost Type"::Labor :
                              PrognosisTotalCost[1] := PrognosisTotalCost[1] + ServiceContractPrognLineRec."Amount incl. Surcharge"
                              + ServiceContractPrognLineRec."Total Cost";
                            ServiceContractPrognLineRec."Cost Type"::Material :
                              PrognosisTotalCost[2] := PrognosisTotalCost[2] + ServiceContractPrognLineRec."Amount incl. Surcharge"
                              + ServiceContractPrognLineRec."Total Cost";
                            ServiceContractPrognLineRec."Cost Type"::Plant :
                              PrognosisTotalCost[3] := PrognosisTotalCost[3] + ServiceContractPrognLineRec."Amount incl. Surcharge"
                              + ServiceContractPrognLineRec."Total Cost";
                            ServiceContractPrognLineRec."Cost Type"::Subcontracting :
                              PrognosisTotalCost[4] := PrognosisTotalCost[4] + ServiceContractPrognLineRec."Amount incl. Surcharge"
                              + ServiceContractPrognLineRec."Total Cost";
                            ServiceContractPrognLineRec."Cost Type"::Sundry :
                              PrognosisTotalCost[5] := PrognosisTotalCost[5] + ServiceContractPrognLineRec."Amount incl. Surcharge"
                              + ServiceContractPrognLineRec."Total Cost";
                          END;
                          //#C019440.en
                        UNTIL ServiceContractPrognLineRec.NEXT =0;
                      END;
                    END ELSE BEGIN
                      ServiceContractPrognosisRec.INIT;
                      CLEAR(ServiceContractPrognosisRec);
                    END;

                    DataProc.InsertItem('[Prognosis Total Costs]', PrognTotCostDec, 'decimal');
                    DataProc.InsertItem('[Prognosis Total Revenue]', PrognTotRevDec, 'decimal');
                    DataProc.InsertItem('[Prognosis Financial Result]', (PrognTotRevDec - PrognTotCostDec), 'decimal');

                    //#C019440.sn
                    DataProc.InsertItem('[Prognosis total costs Labor]', PrognosisTotalCost[1], 'decimal');
                    DataProc.InsertItem('[Hours Prognosis]', PrognTotHours, 'decimal');
                    DataProc.InsertItem('[Prognosis total costs Material]', PrognosisTotalCost[2], 'decimal');
                    DataProc.InsertItem('[Prognosis total costs Subcontracting]', PrognosisTotalCost[4], 'decimal');
                    DataProc.InsertItem('[Prognosis total costs Plant]', PrognosisTotalCost[3], 'decimal');
                    DataProc.InsertItem('[Prognosis total costs Sundry]', PrognosisTotalCost[5], 'decimal');
                    //#C019440.en

                    // Bepaal 'Begroot bedrag', 'Begroot AK' en 'Begrote uren' (service orders) met bron = Contract.
                    // Deze drie bedragen worden berekend in recordset 'ServiceContractCalcContractRec'.
                    // Totale begrote kosten SC = Begrote kosten SC
                    //                            + Begrote kosten SO's
                    //                            - Begrote kosten kosten SO's met bron = Contract
                    ServiceContractCalcContractRec := ServContractRec;
                    ServiceContractCalcContractRec.COPYFILTERS(ServContractRec);
                    ServiceContractCalcContractRec.SETRANGE("Source Type Filter",
                     ServiceContractCalcContractRec."Source Type Filter"::Contract);
                    ServiceContractCalcContractRec.CALCFIELDS("Budget Amount (ServOrder)",
                     "Budget Ovh. Surch. (ServOrder)","Budget Hours (ServOrder)");
                    TotBudgetSC := (ServContractRec."Budget Amount (Contract)" + ServContractRec."Budget Ovh. Surch. (Contract)");
                    TotBudgetSO := ((ServContractRec."Budget Amount (ServOrder)" +
                     ServContractRec."Budget Ovh. Surch. (ServOrder)") -  ((ServiceContractCalcContractRec."Budget Amount (ServOrder)" +
                     ServiceContractCalcContractRec."Budget Ovh. Surch. (ServOrder)")));

                    ServiceContractHistoryRec.RESET;
                    ServiceContractHistoryRec.SETRANGE("Service Contract No.", ServContractRec."No.");
                    ServiceContractHistoryRec.SETFILTER("Service Control Year", '%1', TempYearContract."Line No.");
                    ServiceContractHistoryRec.SETFILTER("Index Date", '..%1', TODAY);
                    IF ServiceContractHistoryRec.FINDLAST = TRUE THEN
                       DataProc.InsertItem('[Contract Amount]', ServiceContractHistoryRec."Contract Amount", 'decimal');
                    DataProc.InsertItem('[Total Budget (Contract)]', TotBudgetSC, 'decimal');
                    DataProc.InsertItem('[Total Budget (ServOrder)]', TotBudgetSO, 'decimal');
                    DataProc.InsertItem('[Budget Hours (Contract)]', ServContractRec."Budget Hours (Contract)", 'decimal');
                    DataProc.InsertItem('[Budget Hours (ServOrder)]',
                     (ServContractRec."Budget Hours (ServOrder)") -
                     (ServiceContractCalcContractRec."Budget Hours (ServOrder)"),'decimal');
                    DataProc.InsertItem('[Actual Preclosure Result]', ServContractRec."Actual Preclosure Result", 'decimal');
                    DataProc.ExecuteRowInsert();
                END;
              END;
            UNTIL TempYearContract.NEXT=0;
          END;
          DataProc.EndTransaction
        END;
        DataProc.CloseConnection;
      END;

      LineCounter := 0;
      NoOfLines := 0;
      //TODO KK.eo
      }
    END;

    PROCEDURE ProcessServOrderTable@1100525051(ServerTxt@1100525004 : Text[30];DataBaseTxt@1100525003 : Text[30];LogInTxt@1100525002 : Text[30];PassWordTxt@1100525001 : Text[30];startmethod@1100525000 : Integer);
    VAR
      ServOrderRec@1100525005 : Record 11012823;
      ServOrderExtensionRec@1100409000 : Record 11071727;
      TryoutSuccessor@1100525006 : Record 11012761;
      RecContactFeatureType@1100525008 : Record 11012753;
      TryOutNo@1100525007 : Code[20];
      TotOpenAmount@1210190000 : Decimal;
    BEGIN
      IF startmethod > 0 THEN BEGIN
        Window.UPDATE(1,'Service Orders');
      END;

      IF ISNULL(DataProc) THEN
        DataProc := DataProc.DataProcessor;

      IF DataProc.OpenConnection(ServerTxt,DataBaseTxt, 'staging.ServiceOrder', LogInTxt, PassWordTxt) THEN BEGIN
        IF DataProc.BeginTransaction() THEN BEGIN
          IF ServOrderRec.FINDFIRST THEN BEGIN
            NoOfLines := ServOrderRec.COUNT;

            REPEAT
              LineCounter := LineCounter + 1;
              IF startmethod > 0 THEN BEGIN
                Window.UPDATE(2,ROUND(LineCounter/NoOfLines*10000,1));
              END;
              ServOrderRec.CALCFIELDS("Description Order Type","Description Order Kind",
                                      "Description Cause", "Description Solution",
                                      "Description Problem", "Budget Hours", "Description On Hold");
              ServOrderRec.CALCFIELDS("Open (Purchase)", "Received/Not Invoiced", "Open Ovh. Surch. Firm (Purch.)",
                                      "Open Amount (Hours)", "Open Ovh. Surch. (Hours)", "Open (Inventory)",
                                      "Open Ovh. Surch. (Inventory)");
              ServOrderRec.CALCFIELDS("Budget Amount", "Budget Overhead Surcharge", "Open Hours");

              IF NOT ServOrderExtensionRec.GET(ServOrderRec."No.") THEN ServOrderExtensionRec.INIT;  //db, 17-12-12

              IF (ServOrderRec.Status <> ServOrderRec.Status::Finished) OR
                 (ServOrderRec."Closing Date" = 0D) OR
                 ((ServOrderRec."Closing Date" >= DataWareHouseSetupRec."Service Order Finished") AND
                  (ServOrderRec.Status = ServOrderRec.Status::Finished))
              THEN BEGIN //**4PS, SR, 04-02-14
                DataProc.InsertItem('Datumentijd', DateTimeStart, 'datetime');
                DataProc.InsertItem('[NAV Company]' , COMPANYNAME, 'varchar');
                DataProc.InsertItem('[No.]', ServOrderRec."No." ,'varchar');
                DataProc.InsertItem('Description', ServOrderRec.Description ,'varchar');
                DataProc.InsertItem('[Customer No.]', ServOrderRec."Customer No." ,'varchar');
                DataProc.InsertItem('Name', ServOrderRec.Name ,'varchar');
                DataProc.InsertItem('Address', ServOrderRec.Address ,'varchar');
                DataProc.InsertItem('City', ServOrderRec.City ,'varchar');
                DataProc.InsertItem('[Post Code]', ServOrderRec."Post Code" ,'varchar');   //**4PS.GB mod city into post code 18-10-2011
                DataProc.InsertItem('[Your Reference]', ServOrderRec."Your Reference" ,'varchar');
                DataProc.InsertItem('[Contact Name]', ServOrderRec."Contact Name" ,'varchar');
                DataProc.InsertItem('[Bill-To Customer No.]', ServOrderRec."Bill-to Customer No." ,'varchar');
                IF ServOrderRec."Order Date" <> 0D THEN
                  DataProc.InsertItem('[Order Date]', CreateDateTimeFromDate(ServOrderRec."Order Date") ,'datetime');
                IF ServOrderRec."Starting Date" <> 0D THEN
                  DataProc.InsertItem('[Starting Date]', CreateDateTimeFromDate(ServOrderRec."Starting Date") ,'datetime');
                IF ServOrderRec."Ending Date" <> 0D THEN
                  DataProc.InsertItem('[Ending Date]', CreateDateTimeFromDate(ServOrderRec."Ending Date") ,'datetime');
                DataProc.InsertItem('[Budget Hours]', ServOrderRec."Budget Hours" ,'decimal'); //was 'hours'
                DataProc.InsertItem('[Service Contract No.]', ServOrderRec."Service Contract No." ,'varchar');
                DataProc.InsertItem('[Service Location Code]', ServOrderRec."Service Location No." ,'varchar');
                DataProc.InsertItem('[Service Type]', ServOrderRec."Service Type" ,'varchar');
                //21-07-09.sn
                DataProc.InsertItem('[Service Type (Other)]', ServOrderRec."Service Type (Other)" ,'varchar');
                //21-07-09.en

                CASE ServOrderRec.Status OF
                  ServOrderRec.Status::Open:
                    DataProc.InsertItem('Status', 'Open' ,'varchar');
                  ServOrderRec.Status::"In Process":
                    DataProc.InsertItem('Status', 'In Process' ,'varchar');
                  ServOrderRec.Status::"Technical Finished":
                    DataProc.InsertItem('Status', 'Technical Finished' ,'varchar');
                  ServOrderRec.Status::"Administrative Finished":
                    DataProc.InsertItem('Status', 'Administrative Finished' ,'varchar');
                  ServOrderRec.Status::Finished:
                    DataProc.InsertItem('Status', 'Finished' ,'varchar');
                  ServOrderRec.Status::Cancelled:
                    DataProc.InsertItem('Status', 'Cancelled' ,'varchar');
                END;
                DataProc.InsertItem('Priority', ServOrderRec.Priority ,'varchar');
                CASE ServOrderRec."Source Type" OF
                  ServOrderRec."Source Type"::Call:
                    DataProc.InsertItem('[Source Type]', 'Call' ,'varchar');
                  ServOrderRec."Source Type"::Contract:
                    DataProc.InsertItem('[Source Type]', 'Contract' ,'varchar');
                  ServOrderRec."Source Type"::Direct:
                    DataProc.InsertItem('[Source Type]', 'Other' ,'varchar');
                  ServOrderRec."Source Type"::Estimate:
                    DataProc.InsertItem('[Source Type]', 'Estimate' ,'varchar');
                END;

                //db.sn, 17-12-12
                DataProc.InsertItem('[Problem Text]', '' ,'varchar');
                DataProc.InsertItem('[Solution Text]', '' ,'varchar');
                DataProc.InsertItem('[Invoice Text]', '' ,'varchar');
                //db.en, 17-12-12
                DataProc.InsertItem('[Call No.]', ServOrderRec."Call No." ,'varchar');
                DataProc.InsertItem('[Order Kind]', ServOrderRec."Order Kind" ,'varchar');
                DataProc.InsertItem('[Description Order Kind]', ServOrderRec."Description Order Kind" ,'varchar');
                DataProc.InsertItem('[Order Type]', ServOrderRec."Order Type" ,'varchar');
                DataProc.InsertItem('[Description Order Type]', ServOrderRec."Description Order Type" ,'varchar');
                DataProc.InsertItem('Problem', ServOrderRec.Problem ,'varchar');
                DataProc.InsertItem('[Description Problem]', ServOrderRec."Description Problem" ,'varchar');
                DataProc.InsertItem('Cause', ServOrderRec.Cause ,'varchar');
                DataProc.InsertItem('[Description Cause]', ServOrderRec."Description Cause" ,'varchar');
                DataProc.InsertItem('Solution', ServOrderRec.Solution ,'varchar');
                DataProc.InsertItem('[Description Solution]', ServOrderRec."Description Solution" ,'varchar');
                DataProc.InsertItem('[Order Amount]', ServOrderRec."Order Amount (LCY)" ,'decimal');
                DataProc.InsertItem('[Department Code (Other)]', ServOrderRec."Department Code (Other)" ,'varchar');
                DataProc.InsertItem('[Global Dimension 1 Code]', ServOrderRec."Global Dimension 1 Code" ,'varchar');
                DataProc.InsertItem('[On Hold]', ServOrderRec."On Hold" ,'varchar');
                DataProc.InsertItem('[Description On Hold]', ServOrderRec."Description On Hold" ,'varchar');

                IF ServOrderRec."Closing Date" <> 0D THEN
                  DataProc.InsertItem('[Closing Date]', CreateDateTimeFromDate(ServOrderRec."Closing Date") ,'datetime');

                IF ServOrderRec."Created on" <> 0D THEN
                  DataProc.InsertItem('[Created on]', CreateDateTimeFromDate(ServOrderRec."Created on") ,'datetime');
                DataProc.InsertItem('[Employee No.]', ServOrderRec."Employee No." ,'varchar');
                DataProc.InsertItem('Subcontractor', ServOrderRec.Subcontractor ,'varchar');
                DataProc.InsertItem('Discipline', ServOrderRec.Discipline ,'varchar');
                IF ServOrderRec."First Possible Starting Date" <> 0D THEN
                  DataProc.InsertItem('[First Possible Starting Date]',
                                       CreateDateTimeFromDate(ServOrderRec."First Possible Starting Date") ,'datetime');

                IF ServOrderRec."Last Possible Ending Date" <> 0D THEN
                  DataProc.InsertItem('[Last Possible Ending Date]',
                                       CreateDateTimeFromDate(ServOrderRec."Last Possible Ending Date") ,'datetime');
                DataProc.InsertItem('[Duration Time]', ServOrderRec."Duration Time" ,'decimal');
                IF ServOrderRec."Next Deadline" <> 0DT THEN  //db, 21-05-13: C007674
                  DataProc.InsertItem('[Next Deadline]', ServOrderRec."Next Deadline" ,'datetime');  //db, 17-12-12
                DataProc.InsertItem('[Next Reference Period]', ServOrderRec."Next Reference Period" ,'varchar');
                DataProc.InsertItem('[Estimate No.]', ServOrderRec."Estimate No." ,'varchar');
                CASE ServOrderRec."Settlement Method" OF
                  ServOrderRec."Settlement Method"::"Cost Plus":
                    DataProc.InsertItem('[Settlement method]', 'Cost Plus' ,'varchar');
                  ServOrderRec."Settlement Method"::"Fixed Price":
                    DataProc.InsertItem('[Settlement method]', 'Fixed Price' ,'varchar');
                END;
                IF ServOrderRec.Accepted THEN
                  DataProc.InsertItem('Accepted', 'Yes' ,'varchar')
                ELSE
                  DataProc.InsertItem('Accepted', 'No' ,'varchar');
                DataProc.InsertItem('[Order No. Customer]', ServOrderRec."Order No. Customer", 'varchar');
                IF ServOrderRec."Additional Cost" THEN
                  DataProc.InsertItem('[Additional Cost]', 'Yes', 'varchar')
                ELSE
                  DataProc.InsertItem('[Additional Cost]', 'No', 'varchar');
                //TODO KK DataProc.InsertItem('[Service Control Year]', ServOrderRec."Service Control Year", 'int');

                //**4PS.GB.sn 18-10-2011
                DataProc.InsertItem('[Budget]', (ServOrderRec."Budget Amount" + ServOrderRec."Budget Overhead Surcharge"), 'decimal');
                DataProc.InsertItem('[Open Hours]', ServOrderRec."Open Hours", 'decimal');

                CLEAR(TotOpenAmount);
                TotOpenAmount := (ServOrderRec."Open (Purchase)" + ServOrderRec."Received/Not Invoiced" +
                                  ServOrderRec."Open Ovh. Surch. Firm (Purch.)" + ServOrderRec."Open Amount (Hours)" +
                                  ServOrderRec."Open Ovh. Surch. (Hours)" + ServOrderRec."Open (Inventory)" +
                                  ServOrderRec."Open Ovh. Surch. (Inventory)");

                DataProc.InsertItem('[Open Amount]', TotOpenAmount, 'decimal');

                //dbeekman.sn, 12-4-2010: M18348
                TryoutSuccessor.RESET;
                TryoutSuccessor.SETCURRENTKEY("Service Order No.");
                TryoutSuccessor.SETRANGE("Service Order No.",ServOrderRec."No.");
                IF TryoutSuccessor.FINDFIRST THEN BEGIN
                  DataProc.InsertItem('[Try-out No.]',TryoutSuccessor."Try-out No.", 'varchar');
                  TryOutNo := TryoutSuccessor."Try-out No.";

                  TryoutSuccessor.SETFILTER(TryoutSuccessor."Try-out Quote",'<>%1','');
                  IF TryoutSuccessor.FINDFIRST THEN
                    DataProc.InsertItem('[Try-out Quote]',TryoutSuccessor."Try-out Quote", 'varchar');

                  RecContactFeatureType.SETCURRENTKEY("Relation Type",Code,"Feature Group");
                  RecContactFeatureType.SETRANGE("Relation Type",RecContactFeatureType."Relation Type"::"Try-out");
                  RecContactFeatureType.SETRANGE(Code,TryOutNo);
                  RecContactFeatureType.SETRANGE("Feature Group",'Sector/marktgroep/objectsoort');
                  IF RecContactFeatureType.FINDFIRST THEN BEGIN
                    RecContactFeatureType.CALCFIELDS("Feature Description");
                    DataProc.InsertItem('[Sector/Market Group/Object Type Description]',
                                          RecContactFeatureType."Feature Description", 'varchar');
                  END;
                END;
                //dbeekman.en

                DataProc.ExecuteRowInsert();
              END; //**4PS, SR, 04-02-14
            UNTIL ServOrderRec.NEXT=0;
          END;

          DataProc.EndTransaction;
        END;
        DataProc.CloseConnection;
      END;

      LineCounter := 0;
      NoOfLines := 0;
    END;

    PROCEDURE ProcessServOrdInstLineTable@1100525020(ServerTxt@1100485003 : Text[30];DataBaseTxt@1100485002 : Text[30];LogInTxt@1100485001 : Text[30];PassWordTxt@1100485000 : Text[30];startmethod@1100485005 : Integer);
    BEGIN
      //ServiceOrderInstallation@1100485004 : Record 11012824;
      {
      //TODO KK.so
      //dbeekman, 12-4-2010: M18348

      IF startmethod > 0 THEN BEGIN
        Window.UPDATE(1,'Serviceorder installaties');
      END;

      NoOfLines := ServiceOrderInstallation.COUNT;

      IF IsNull(DataProc) THEN
        DataProc := DataProc.DataProcessor;

      IF DataProc.OpenConnection(ServerTxt,DataBaseTxt, 'staging.ServiceOrderInstallLine', LogInTxt, PassWordTxt) THEN BEGIN
        IF DataProc.BeginTransaction() THEN BEGIN
          IF ServiceOrderInstallation.FINDFIRST THEN BEGIN
            REPEAT
              LineCounter := LineCounter + 1;
              IF startmethod > 0 THEN BEGIN
                Window.UPDATE(2,ROUND(LineCounter/NoOfLines*10000,1));
              END;

              DataProc.InsertItem('[Datumentijd]', DateTimeStart, 'datetime');
              DataProc.InsertItem('[NAV Company]' , COMPANYNAME, 'varchar');
              DataProc.InsertItem('[Service Order No.]', ServiceOrderInstallation."Service Order No." , 'varchar');
              DataProc.InsertItem('[Service Location Code]', ServiceOrderInstallation."Service Location No." , 'varchar');
              DataProc.InsertItem('[Installation]', ServiceOrderInstallation.Installation , 'varchar');
              DataProc.InsertItem('[Installation Part]', ServiceOrderInstallation."Installation Part" , 'varchar');
              DataProc.InsertItem('[Object No.]', ServiceOrderInstallation."Object No." , 'varchar');
              DataProc.InsertItem('[Object Customer]', ServiceOrderInstallation."Object Customer" , 'varchar');
              DataProc.InsertItem('[Discipline]', ServiceOrderInstallation.Discipline , 'varchar');
              DataProc.ExecuteRowInsert();

            UNTIL ServiceOrderInstallation.NEXT = 0;
          END;
          DataProc.EndTransaction;
        END;
        DataProc.CloseConnection;
      END;
      //TODO KK.eo
      }
    END;

    PROCEDURE ProcessCostCodeTable@1100525023(ServerTxt@1100525004 : Text[30];DataBaseTxt@1100525003 : Text[30];LogInTxt@1100525002 : Text[30];PassWordTxt@1100525001 : Text[30];startmethod@1100525000 : Integer);
    VAR
      CostCodeRec@1100525005 : Record 11012083;
    BEGIN
      IF startmethod > 0 THEN BEGIN
        Window.UPDATE(1,'Kosten Code');
      END;

      IF ISNULL(DataProc) THEN
        DataProc := DataProc.DataProcessor;

      IF DataProc.OpenConnection(ServerTxt,DataBaseTxt, 'staging.CostCode', LogInTxt, PassWordTxt) THEN BEGIN
        IF DataProc.BeginTransaction() THEN BEGIN
          IF CostCodeRec.FINDFIRST THEN BEGIN
            NoOfLines := CostCodeRec.COUNT;
            REPEAT
              LineCounter := LineCounter + 1;
              IF startmethod > 0 THEN BEGIN
                Window.UPDATE(2,ROUND(LineCounter/NoOfLines*10000,1));
              END;

              DataProc.InsertItem('Datumentijd', DateTimeStart, 'datetime');
              DataProc.InsertItem('[NAV Company]' , COMPANYNAME, 'varchar');

              DataProc.InsertItem('Code', CostCodeRec.Code ,'varchar');
              DataProc.InsertItem('Description', CostCodeRec.Description ,'varchar');

              DataProc.ExecuteRowInsert();

            UNTIL CostCodeRec.NEXT=0;
          END;

          DataProc.EndTransaction
        END;
        DataProc.CloseConnection;
      END;

      LineCounter := 0;
      NoOfLines := 0;
    END;

    PROCEDURE ProcessExtensionTable@1100525004(ServerTxt@1100525004 : Text[30];DataBaseTxt@1100525003 : Text[30];LogInTxt@1100525002 : Text[30];PassWordTxt@1100525001 : Text[30];startmethod@1100525000 : Integer);
    VAR
      ExtContRec@1100525005 : Record 11012004;
    BEGIN
      IF startmethod > 0 THEN BEGIN
        Window.UPDATE(1,'Meerwerkcontracten');
      END;

      IF ISNULL(DataProc) THEN
        DataProc := DataProc.DataProcessor;

      IF DataProc.OpenConnection(ServerTxt,DataBaseTxt, 'staging.ExtensionContract', LogInTxt, PassWordTxt) THEN BEGIN
        IF DataProc.BeginTransaction() THEN BEGIN
          IF ExtContRec.FINDFIRST THEN BEGIN
            NoOfLines := ExtContRec.COUNT;
            REPEAT
              LineCounter := LineCounter + 1;
              IF startmethod > 0 THEN BEGIN
                Window.UPDATE(2,ROUND(LineCounter/NoOfLines*10000,1));
              END;

              DataProc.InsertItem('Datumentijd', DateTimeStart, 'datetime');
              DataProc.InsertItem('[NAV Company]' , COMPANYNAME, 'varchar');

              DataProc.InsertItem('[Project No.]', ExtContRec."Project No." ,'varchar');
              DataProc.InsertItem('[Contract No.]', ExtContRec."Contract No." ,'varchar');
              DataProc.InsertItem('Description', ExtContRec.Description ,'varchar');

              CASE ExtContRec.Status OF
                 ExtContRec.Status::Applied:
                   DataProc.InsertItem('Status', 'Applied' ,'varchar');
                 ExtContRec.Status::Offered:
                   DataProc.InsertItem('Status', 'Offered' ,'varchar');
                 ExtContRec.Status::Order:
                   DataProc.InsertItem('Status', 'Order' ,'varchar');
                 ExtContRec.Status::"Invoicing Allowed":
                   DataProc.InsertItem('Status', 'Invoicing Allowed' ,'varchar');
                 ExtContRec.Status::Expired:
                   DataProc.InsertItem('Status', 'Expired' ,'varchar');
              END;

              DataProc.InsertItem('[Contract Amount]', ExtContRec."Contract Amount (LCY)" ,'decimal');
              DataProc.InsertItem('[Offered Amount]', ExtContRec."Offered Amount" ,'decimal');

              IF  ExtContRec."Offering Date" <> 0D THEN
                DataProc.InsertItem('[Offering Date]', CreateDateTimeFromDate(ExtContRec."Offering Date") ,'datetime');

              IF  ExtContRec."Due Date" <> 0D THEN
                DataProc.InsertItem('[Due Date]', CreateDateTimeFromDate(ExtContRec."Due Date") ,'datetime');

              IF  ExtContRec."Contract Date" <> 0D THEN
                DataProc.InsertItem('[Contract Date]', CreateDateTimeFromDate(ExtContRec."Contract Date") ,'datetime');

              DataProc.InsertItem('Text', ExtContRec.Text ,'varchar');
              DataProc.InsertItem('Principal', ExtContRec.Principal ,'varchar');
              DataProc.InsertItem('[Principal Contact]', ExtContRec."Principal Contact" ,'varchar');
              IF  ExtContRec."Version Date" <> 0D THEN
                DataProc.InsertItem('[Version Date]', CreateDateTimeFromDate(ExtContRec."Version Date") ,'datetime');

              ExtContRec.CALCFIELDS(Hours, Total, Budget, "Budget Hours", Revenues);
              DataProc.InsertItem('Hours', ExtContRec.Hours ,'decimal');
              DataProc.InsertItem('Total', ExtContRec.Total ,'decimal');

              IF ExtContRec.Finished THEN
                DataProc.InsertItem('IsExecuted', 'Yes' ,'varchar')
              ELSE
                DataProc.InsertItem('IsExecuted', 'No' ,'varchar');

              CASE ExtContRec."Settlement Method" OF
                ExtContRec."Settlement Method"::"Fixed Price":
                  DataProc.InsertItem('[Settlement Method]', 'Fixed Price' ,'varchar');
                ExtContRec."Settlement Method"::"Cost Plus":
                  DataProc.InsertItem('[Settlement Method]', 'Cost Plus' ,'varchar');
              END;

              DataProc.InsertItem('[Your Reference]', ExtContRec."Your Reference" ,'varchar');
              DataProc.InsertItem('Budget', ExtContRec.Budget ,'decimal');
              DataProc.InsertItem('[Budget Hours]', ExtContRec."Budget Hours" ,'decimal');
              DataProc.InsertItem('Revenues', ExtContRec.Revenues ,'decimal');

              CASE ExtContRec."Contract Type" OF
                ExtContRec."Contract Type"::Maincontracting:
                  DataProc.InsertItem('[Contract Type]', 'Maincontracting' ,'varchar');
                ExtContRec."Contract Type"::Subcontracting:
                  DataProc.InsertItem('[Contract Type]', 'Subcontracting' ,'varchar');
              END;

              IF ExtContRec."Treat like Order" THEN
                DataProc.InsertItem('[Treat like Order]', 'Yes' ,'varchar')
              ELSE
                DataProc.InsertItem('[Treat like Order]', 'No' ,'varchar');

              IF ExtContRec."Include in Expectation" THEN
                DataProc.InsertItem('[Include in Expectation]', 'Yes' ,'varchar')
              ELSE
                DataProc.InsertItem('[Include in Expectation]', 'No' ,'varchar');

              DataProc.InsertItem('[Expected Contract Amount]', ExtContRec."Expected Contract Amount", 'decimal');

              //AH.sn: 28-03-2011
              IF ExtContRec."Input Date" <> 0D THEN
                DataProc.InsertItem('[Input Date]', CreateDateTimeFromDate(ExtContRec."Input Date"), 'datetime');

              IF ExtContRec."Last Date Modified" <> 0D THEN
                DataProc.InsertItem('[Last Date Modified]', CreateDateTimeFromDate(ExtContRec."Last Date Modified"), 'datetime');

              DataProc.InsertItem('[Estimated Amount]', ExtContRec."Estimated Amount", 'decimal');

              IF ExtContRec."Estimate Date" <> 0D THEN
                DataProc.InsertItem('[Date Estimate]', CreateDateTimeFromDate(ExtContRec."Estimate Date"), 'datetime');
              //AH.en

              DataProc.ExecuteRowInsert();

            UNTIL ExtContRec.NEXT=0;
          END;

          DataProc.EndTransaction
        END;
        DataProc.CloseConnection;
      END;

      LineCounter := 0;
      NoOfLines := 0;
    END;

    PROCEDURE CreateDateTimeFromDate@1100485002(lDate@1100485000 : Date) : DateTime;
    VAR
      lvTime@1100485001 : Time;
      DateTimelv@1100485002 : DateTime;
      lvYearInt@1100525000 : Integer;
    BEGIN
      lDate := NORMALDATE(lDate);
      EVALUATE(lvTime,'0');

      lvYearInt := DATE2DMY(lDate,3);
      IF lvYearInt < 1753 THEN
        lDate := 17530101D;

      DateTimelv := CREATEDATETIME(lDate,lvTime);

      EXIT(CREATEDATETIME(lDate,lvTime));;
    END;

    BEGIN
    {
      'VPCDEMO40NET','DataWareHouse', 'Projects', 'super', ''
    }
    END.
  }
}

