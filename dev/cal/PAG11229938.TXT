OBJECT Page 11229938 Bing Maps View All Resources
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Bing Maps - Alle Ressourcen anzeigen;
               ENU=Bing Maps Show All Resources;
               NLD=Bing Maps toon alle resources];
    OnOpenPage=BEGIN
                 EmployeeTableIDText := FORMAT(DATABASE::"Resource (WOP)");
                 ServiceOrderTableIDText := FORMAT(DATABASE::"Service Order");
                 EmployeeTableIDInt := DATABASE::"Resource (WOP)";
                 ServiceOrderTableIDInt := DATABASE::"Service Order";
               END;

  }
  CONTROLS
  {
    { 1100525000;;Container;
                Name=Container;
                CaptionML=[DEU=Container;
                           ENU=Container;
                           NLD=Container;
                           NOR=Container;
                           SVE=Beh†llare];
                ContainerType=ContentArea }

    { 1100525001;1;Field  ;
                Name=Map;
                CaptionML=[DEU=Karte;
                           ENU=Map;
                           NLD=Kaart];
                ControlAddIn=[Fps.Nav.Addin.BingMaps;PublicKeyToken=024bd013665211e9] }

  }
  CODE
  {
    VAR
      BingMapsHandler@1100525000 : Codeunit 11012485;
      EmployeeTableIDText@1100525002 : Text[30];
      ServiceOrder@1100525003 : Record 11012823;
      ServiceOrderTableIDText@1100525004 : Text[30];
      Text001@1100525005 : TextConst 'DEU=Sofort planen;ENU=Plan immediately;NLD=Direct inplannen';
      EmployeeTableIDInt@1100525001 : Integer;
      ServiceOrderTableIDInt@1100525006 : Integer;
      Text002@1100525007 : TextConst 'DEU=Bing Maps konfigurieren.;ENU=Configure Bing Maps.;NLD=Stel Bing Maps in.';

    LOCAL PROCEDURE GetLocationOfServiceOrder@1100525000(ServiceOrder@1100525000 : Record 11012823;VAR latitude@1100525002 : Text[20];VAR longitude@1100525003 : Text[20]) : Boolean;
    VAR
      ServiceOrderExtension@1100525001 : Record 11071727;
      Success@1100525004 : Boolean;
    BEGIN
      Success := FALSE;
      IF ServiceOrderExtension.GET(ServiceOrder."No.") THEN BEGIN
        IF (ServiceOrderExtension.Latitude = '') OR (ServiceOrderExtension.Longitude = '') THEN
          ServiceOrder.UpdateLongitudeLatitudeInExtensionTable;
        IF (ServiceOrderExtension.Latitude <> '') AND (ServiceOrderExtension.Longitude <> '') THEN BEGIN
          latitude := ServiceOrderExtension.Latitude;
          longitude := ServiceOrderExtension.Longitude;
          Success := TRUE;
        END
      END ELSE BEGIN
        IF BingMapsHandler.GetLatLngFromAddress(latitude, longitude, ServiceOrder.Address, ServiceOrder.City, ServiceOrder."Post Code") THEN BEGIN
          IF ServiceOrder.UpdateLongitudeLatitudeInExtensionTable THEN
            Success := TRUE;
        END;
      END;
      EXIT(Success);
    END;

    LOCAL PROCEDURE GetLastServiceOrderOfEmployee@1100525001(ResourceWOP@1100525005 : Record 11229278) : Code[20];
    VAR
      WorkOrder@1100525000 : Record 11229279;
      latitude@1100525002 : Text[20];
      longitude@1100525003 : Text[20];
      ServiceOrderEmployee@1100525004 : Record 11012823;
    BEGIN
      WorkOrder.SETCURRENTKEY("Resource No.", "Starting Date/Time");
      WorkOrder.SETFILTER("Source Type", '%1', WorkOrder."Source Type"::ServiceOrder);
      WorkOrder.SETRANGE("Resource No.", ResourceWOP."No.");
      IF WorkOrder.FINDLAST THEN
        IF ServiceOrderEmployee.GET(WorkOrder."Source No.") THEN
          IF GetLocationOfServiceOrder(ServiceOrderEmployee, latitude, longitude) THEN BEGIN
            EXIT(ServiceOrderEmployee."No.");
          END;
    END;

    LOCAL PROCEDURE AddEmployeePinToMap@1100525006("No."@1100525000 : Code[20];Title@1100525001 : Text;Description@1100525004 : Text;Colour@1100525005 : Text;Latitude@1100525006 : Text[20];Longitude@1100525003 : Text[20]);
    BEGIN
      CurrPage.Map.addPinToMapLatLng("No.", Title, EmployeeTableIDText, Description, Colour, Latitude, Longitude);
    END;

    LOCAL PROCEDURE SetServiceOrderLocationPin@1100525002();
    VAR
      latitude@1100525000 : Text;
      longitude@1100525001 : Text;
      titleValue@1100525002 : Text;
      descriptionValue@1100525003 : Text;
      ReturnType@1100525004 : 'NAV,FSA';
    BEGIN
      IF GetLocationOfServiceOrder(ServiceOrder, latitude, longitude) THEN BEGIN
        titleValue := BingMapsHandler.GetValueFromField(ServiceOrder.RECORDID, ServiceOrderTableIDInt,
                        BingMapsHandler.GetFieldIDForTitle(ServiceOrderTableIDInt, ReturnType::NAV));
        descriptionValue := BingMapsHandler.BuildDescription(ServiceOrder.RECORDID,
                        ServiceOrderTableIDInt, ReturnType::NAV);
        CurrPage.Map.addPinToMapLatLng(ServiceOrder."No.", titleValue, ServiceOrderTableIDText, descriptionValue,
                        BingMapsHandler.GetColour(ServiceOrder), latitude, longitude);
      END;
    END;

    PROCEDURE SetServiceOrder@1100525004(ServiceOrderPar@1100525000 : Record 11012823);
    BEGIN
      ServiceOrder := ServiceOrderPar;
    END;

    LOCAL PROCEDURE ReplanEmployeeOnServiceOrder@1100525003(ResourceWOP@1100525000 : Record 11229278);
    VAR
      WorkingOnServiceOrder@1100525001 : Record 11012823;
      WorkOrderToPlan@1100525002 : Record 11229279;
      OldWorkOrder@1100525003 : Record 11229279;
    BEGIN
      OldWorkOrder.SETCURRENTKEY("Resource No.", "Starting Date/Time");
      OldWorkOrder.SETFILTER("Source Type", '%1', OldWorkOrder."Source Type"::ServiceOrder);
      OldWorkOrder.SETRANGE("Resource No.", ResourceWOP."No.");
      WorkOrderToPlan.SETRANGE("Source No.", ServiceOrder."No.");
      IF WorkingOnServiceOrder.GET(GetLastServiceOrderOfEmployee(ResourceWOP)) THEN
        IF OldWorkOrder.FINDLAST THEN
          IF WorkOrderToPlan.FINDLAST THEN BEGIN
            IF (WorkingOnServiceOrder."Ending Date" <> 0D) AND (WorkingOnServiceOrder."Ending Time" <> 0T) THEN BEGIN
              ServiceOrder."Starting Date" := WorkingOnServiceOrder."Ending Date";
              ServiceOrder."Starting Time" := WorkingOnServiceOrder."Ending Time";
              WorkOrderToPlan."Starting Date/Time" := CREATEDATETIME(WorkingOnServiceOrder."Ending Date", WorkingOnServiceOrder."Ending Time");
            END ELSE BEGIN
              ServiceOrder."Starting Date" := TODAY;
              ServiceOrder."Starting Time" := TIME;
              WorkOrderToPlan."Starting Date/Time" := CURRENTDATETIME;
            END;
            ServiceOrder."Employee No." := ResourceWOP."No.";
            ServiceOrder."Employee Name" := ResourceWOP.Name;
            OldWorkOrder."Resource No." := '';
            OldWorkOrder."Resource Name" := '';
            OldWorkOrder."Resource Company" := '';
            WorkOrderToPlan."Resource Type" := WorkOrderToPlan."Resource Type"::Employee;
            WorkOrderToPlan."Resource No." := ResourceWOP."No.";
            WorkOrderToPlan."Resource Name" := ResourceWOP.Name;
            WorkOrderToPlan."Resource Company" := ResourceWOP.Company;

            OldWorkOrder.MODIFY;
            ServiceOrder.MODIFY;
            WorkOrderToPlan.MODIFY;
            CurrPage.CLOSE;
          END;
    END;

    EVENT Map@-1100525001::ControlAddInReady@20();
    VAR
      BingMapsSetup@1100525000 : Page 11127140;
    BEGIN
      IF BingMapsHandler.SetupIsDoneAndEnabled THEN
        CurrPage.Map.setApiKey(BingMapsHandler.GetApiKey(CurrPage.OBJECTID(FALSE)))
      ELSE
        BEGIN
          MESSAGE(Text002);
          BingMapsSetup.RUN;
          CurrPage.CLOSE;
        END;
    END;

    EVENT Map@-1100525001::MapLoaded@21();
    VAR
      ResourceWOP@1100525000 : Record 11229278;
      ServiceOrderEmployee@1100525001 : Record 11012823;
      latitude@1100525002 : Text[20];
      longitude@1100525003 : Text[20];
    BEGIN
      IF BingMapsHandler.DisplayAsPin(ServiceOrderTableIDInt) THEN
        CurrPage.Map.displayAsPin(ServiceOrderTableIDText);

      CurrPage.Map.setExtraAction(Text001);
      CurrPage.Map.allowActionForType(Text001, EmployeeTableIDText);

      SetServiceOrderLocationPin;

      ResourceWOP.SETFILTER(Type, '%1', ResourceWOP.Type::Employee);
      IF ResourceWOP.FINDSET THEN
        REPEAT
          IF ServiceOrderEmployee.GET(GetLastServiceOrderOfEmployee(ResourceWOP)) THEN
            IF GetLocationOfServiceOrder(ServiceOrderEmployee, latitude, longitude) THEN
              AddEmployeePinToMap(ResourceWOP."No.", ResourceWOP.Name, ServiceOrderEmployee.Description,
                  BingMapsHandler.GetColour(ServiceOrderEmployee), latitude, longitude);
        UNTIL ResourceWOP.NEXT = 0;
    END;

    EVENT Map@-1100525001::PinAdded@22(no@1100525001 : Text;type@1100525000 : Text);
    BEGIN
      CurrPage.Map.setBestView;
    END;

    EVENT Map@-1100525001::AddLocationToSelection@23(no@1100525001 : Text;type@1100525000 : Text);
    BEGIN
    END;

    EVENT Map@-1100525001::RemoveLocationFromSelection@24(no@1100525001 : Text;type@1100525000 : Text);
    BEGIN
    END;

    EVENT Map@-1100525001::DirectionsReady@25(distance@1100525001 : Text;time@1100525000 : Text);
    BEGIN
    END;

    EVENT Map@-1100525001::DirectionsError@26();
    BEGIN
    END;

    EVENT Map@-1100525001::LocationUpdated@27(no@1100525003 : Text;type@1100525002 : Text;lat@1100525001 : Text;lng@1100525000 : Text);
    BEGIN
    END;

    EVENT Map@-1100525001::LocationAdded@28(no@1100525003 : Text;type@1100525002 : Text;lat@1100525001 : Text;lng@1100525000 : Text);
    BEGIN
    END;

    EVENT Map@-1100525001::LocationRemoved@29(no@1100525001 : Text;type@1100525000 : Text);
    BEGIN
    END;

    EVENT Map@-1100525001::ExtraAction@30(action@1100525002 : Text;no@1100525001 : Text;type@1100525000 : Text);
    VAR
      ResourceWOP@1100525003 : Record 11229278;
    BEGIN
      IF action = Text001 THEN
        IF ResourceWOP.GET(no) THEN
          ReplanEmployeeOnServiceOrder(ResourceWOP);
    END;

    EVENT Map@-1100525001::ZoomLevel@31(level@1100525000 : Text);
    BEGIN
    END;

    EVENT Map@-1100525001::RegisterEvent@32(no@1100528102 : Text;type@1100528101 : Text;eventname@1100528100 : Text);
    BEGIN
      BingMapsHandler.WriteToBingMapsLogUsingQuery(no, CurrPage.OBJECTID(FALSE), eventname, type);
    END;

    BEGIN
    END.
  }
}

