OBJECT Page 11125149 Import External Budget Service
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Importieren externes Budget Service;
               ENU=Import External Budget Service;
               NLD=Import externe begroting Service];
    SaveValues=Yes;
    InsertAllowed=No;
    DeleteAllowed=No;
    LinksAllowed=No;
    PageType=NavigatePage;
    OnOpenPage=VAR
                 ClientTypeManagement@1100528600 : Codeunit 4;
               BEGIN
                 ProjSetup.GET;
                 PathName := ProjSetup."Pathname External Estimates";  // Default path
                 FileName := '';
                 xImportType := ImportType;
                 FillFileExtensionFilter();
                 FileNameVisible := NOT ClientTypeManagement.IsCommonWebClientType;
               END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 3       ;1   ;Action    ;
                      CaptionML=[DEU=Importieren;
                                 ENU=Import;
                                 NLD=Importeren;
                                 NOR=Importer;
                                 SVE=Importera];
                      InFooterBar=Yes;
                      Image=ImportDatabase;
                      OnAction=BEGIN
                                 CurrPage.EDITABLE(FALSE);
                                 StartImport();
                                 CurrPage.CLOSE;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1100409000;1;Field  ;
                CaptionML=[DEU=Typ importieren;
                           ENU=Import Type;
                           NLD=Importsoort;
                           NOR=Importtype;
                           SVE=Import typ];
                OptionCaptionML=[DEU=" ,,,IBIS-Trad TXT Estimate,,IBIS-Trad XML Estimate,,Cuf-XML,Cuf-XML (GWW)";
                                 ENU=" ,,,IBIS-Trad TXT Estimate,,IBIS-Trad XML Estimate,,Cuf-XML,Cuf-XML (GWW)";
                                 NLD=" ,,,IBIS-Trad TXT begroting,,IBIS-Trad XML begroting,,Cuf-XML,Cuf-XML (GWW)"];
                SourceExpr=ImportType;
                OnValidate=BEGIN
                             IF ImportType <> ImportType THEN BEGIN
                               FileName := '';
                               xImportType := ImportType;
                             END;
                             FillFileExtensionFilter();
                           END;
                            }

    { 1   ;1   ;Field     ;
                CaptionML=[DEU=Serviceauftragsnr.;
                           ENU=Service Order No.;
                           NLD=Serviceordernr.;
                           NOR=Serviceordrenr.;
                           SVE=Serviceordernr];
                SourceExpr=ServOrderNo;
                TableRelation="Service Order";
                OnValidate=BEGIN
                             ValidateServiceOrder(ServOrderNo);
                           END;
                            }

    { 1210190001;1;Field  ;
                CaptionML=[DEU=Dateiname;
                           ENU=Filename;
                           NLD=Bestandsnaam;
                           NOR=Filnavn;
                           SVE=Filnamn];
                SourceExpr=FileName;
                Visible=FileNameVisible;
                OnValidate=BEGIN
                             ValidateFileName();
                           END;

                OnAssistEdit=VAR
                               PathAndFileName@1100525000 : Text;
                             BEGIN
                               IF FileName = '' THEN
                                 PathAndFileName := PathName + FileFilter
                               ELSE
                                 PathAndFileName := PathName + FileName;
                               PathAndFileName := FileMgt.OpenFileDialog('', PathAndFileName, STRSUBSTNO('%1 (%2)|%2', ImportType, FileFilter));
                               IF PathAndFileName <> '' THEN
                                 FileMgt.SplitFileAbsPathName(PathAndFileName, PathName, FileName);
                             END;
                              }

    { 1100525000;1;Field  ;
                Name=CodingSystemCostObject;
                CaptionML=[DEU=VerschlÅsselungssystem Kostenobjekt;
                           ENU=Coding System Cost Object;
                           NLD=Coderingssysteem kostendrager];
                SourceExpr=CodingSystemCostObject;
                OnValidate=BEGIN
                             IF CodingSystemCostObject <> '' THEN
                               CodingSystem.GET(CodingSystemCostObject);
                           END;

                OnLookup=BEGIN
                           IF PAGE.RUNMODAL(0,CodingSystem) = ACTION::LookupOK THEN
                             CodingSystemCostObject := CodingSystem."Coding System";
                         END;
                          }

  }
  CODE
  {
    VAR
      ProjSetup@1100485002 : Record 315;
      Errors@1210190000 : Record 11012051;
      FileMgt@1100525006 : Codeunit 419;
      ImportType@1100409001 : ' ,,,IBIS-Trad TXT,,IBIS-Trad XML,,Cuf-XML,Cuf-XML (GWW)';
      xImportType@1100409002 : Option;
      ServOrderNo@11012004 : Code[20];
      PathName@1100485004 : Text[250];
      FileName@1210190002 : Text[100];
      Text001@1100409000 : TextConst 'DEU=%1 darf nicht leer sein;ENU=%1 may not be empty;NLD=%1 mag niet leeg zijn';
      Text002@1100485006 : TextConst 'DEU=Es sind bereits Budgetzeilen vorhanden. Trotzdem mit dem Importieren fortfahren?;ENU=Budget Lines are already present. Continue import?;NLD=Er zijn reeds begrotingsregels aanwezig, toch doorgaan met importeren?;NOR=Budsjettrader finnes allerede. Fortsett importering?;SVE=Det finns redan budgetrader. FortsÑtta importera?';
      Text003@1100409003 : TextConst 'DEU=Typ importieren;ENU=Import Type;NLD=Importsoort;NOR=Importtype;SVE=Import typ';
      Text004@1100409004 : TextConst 'DEU=Dateiname;ENU=Filename;NLD=Bestandsnaam;NOR=Filnavn;SVE=Filnamn';
      Text005@1100409005 : TextConst 'DEU=Muss eine ''%1'' Datei sein;ENU=Must be a ''%1'' file;NLD=Moet een ''%1'' bestand zijn';
      Text006@1100409006 : TextConst 'DEU=Erster Buchstabe von %1 muss ''%2'' sein;ENU=First character of %1 must be a ''%2'';NLD=Eerste karakter van %1 moet een ''%2'' zijn';
      FileExtension@1100409007 : Text[10];
      FileFilter@1100409008 : Text[30];
      CodingSystem@1100525001 : Record 11012088;
      CodingSystemCostObject@1100525000 : Code[20];
      FileNameVisible@1100528600 : Boolean INDATASET;
      Text007@1100528601 : TextConst 'DEU=AuswÑhlen Datei...;ENU=Select File...;NLD=Selecteer bestand...';

    PROCEDURE SetSelections@1(ServiceOrderNo@11012000 : Code[20]);
    BEGIN
      ServOrderNo := ServiceOrderNo;
    END;

    LOCAL PROCEDURE FillFileExtensionFilter@1100409002();
    BEGIN
      CASE ImportType OF
        ImportType::"IBIS-Trad TXT":
          BEGIN
            FileExtension := '.txt';
            FileFilter := 'b*' + FileExtension;
            EXIT;
          END;
        ImportType::"IBIS-Trad XML":
          FileExtension := '.xml';
      END;
      FileFilter := '*' + FileExtension;
    END;

    LOCAL PROCEDURE ValidateServiceOrder@1100485001(ServiceOrderNo@1100485000 : Code[20]);
    VAR
      ServOrder@1100409000 : Record 11012823;
    BEGIN
      IF ServiceOrderNo = '' THEN
        ERROR(Text001, Errors.FIELDCAPTION("Service Order No."));

      ServOrder.GET(ServiceOrderNo);
    END;

    LOCAL PROCEDURE ValidateFileName@1100409001();
    BEGIN
      CASE ImportType OF
        ImportType::"IBIS-Trad TXT",
        ImportType::"IBIS-Trad XML":
          BEGIN
            IF (STRLEN(FileName) < 4) THEN
              ERROR(Text005, FileExtension)
            ELSE BEGIN
              IF LOWERCASE(COPYSTR(FileName, STRLEN(FileName)-3, 4)) <> FileExtension THEN
                ERROR(Text005, FileExtension);
            END;
          END;
      END;

      IF (ImportType = ImportType::"IBIS-Trad TXT") AND (LOWERCASE(COPYSTR(FileName,1,1)) <> 'b') THEN
        ERROR(Text006, Text004);
    END;

    LOCAL PROCEDURE StartImport@1210190002();
    VAR
      BudgetLine@1100409000 : Record 11012875;
      TempBlob@1100528604 : TEMPORARY Record 99008535;
      ImportTradTXT@1100485001 : Codeunit 11012873;
      ImportTradXML@1100409001 : Codeunit 11012875;
      ImportCufXML@1100525000 : Codeunit 11012890;
      ImportCufXMLServ@1100525001 : Codeunit 11012891;
      ClientTypeManagement@1100528600 : Codeunit 4;
    BEGIN
      IF ImportType = 0 THEN
        ERROR(Text001, Text003);
      ValidateServiceOrder(ServOrderNo);
      IF NOT ClientTypeManagement.IsCommonWebClientType THEN BEGIN
        IF FileName = '' THEN
          ERROR(Text001, Text004);
        ValidateFileName();
      END;

      //Check Budget Lines Present
      BudgetLine.SETRANGE("Budget Type", BudgetLine."Budget Type"::Order);
      BudgetLine.SETRANGE("Service Order No.", ServOrderNo);
      IF NOT BudgetLine.ISEMPTY THEN BEGIN
        IF NOT CONFIRM(Text002) THEN
          EXIT;
      END;

      Errors.RESET;
      Errors.SETRANGE("User ID", USERID);
      Errors.SETRANGE("Source Type", Errors."Source Type"::"Import Budget");
      Errors.DELETEALL;
      COMMIT;

      CASE ImportType OF
        ImportType::"IBIS-Trad TXT":
          ImportTradTXT.ImportTradTxtBudget(ServOrderNo, PathName, FileName);
        ImportType::"IBIS-Trad XML":
          BEGIN
            ImportTradXML.SetSelections(ServOrderNo);
            LoadDataIntoBlob(PathName, FileName, TempBlob);
            ImportTradXML.ProcessFile(TempBlob);
          END;
        ImportType::"Cuf-XML":  //DP01703
          BEGIN
            ImportCufXML.SetSelectionService(ServOrderNo,CodingSystemCostObject);
            LoadDataIntoBlob(PathName, FileName, TempBlob);
            ImportCufXML.ProcessFile(TempBlob);
          END;
        ImportType::"Cuf-XML (GWW)":  //DP01703
          BEGIN
            ImportCufXMLServ.SetSelectionService(ServOrderNo,CodingSystemCostObject);
            LoadDataIntoBlob(PathName, FileName, TempBlob);
            ImportCufXMLServ.ProcessFile(TempBlob);
          END;
      END;

      Errors.RESET;
      Errors.SETRANGE("User ID", USERID);
      Errors.SETRANGE("Source Type", Errors."Source Type"::"Import Budget");
      IF Errors.FINDFIRST THEN BEGIN
        COMMIT;
        PAGE.RUNMODAL(PAGE::Errors, Errors);
      END;
    END;

    LOCAL PROCEDURE LoadDataIntoBlob@1100528601(FilePath@1100528600 : Text;FileName@1100528601 : Text;VAR OTempBlob@1100528602 : TEMPORARY Record 99008535);
    VAR
      ClientTypeManagement@1100528603 : Codeunit 4;
      FileManagement@1100528604 : Codeunit 419;
      FromFile@1100528605 : Text;
      InStream@1100528606 : InStream;
      OutStream@1100528607 : OutStream;
    BEGIN
      IF NOT ClientTypeManagement.IsCommonWebClientType THEN
        FileManagement.BLOBImport4PS(OTempBlob, PathName+FileName, FALSE)
      ELSE BEGIN
        IF NOT UPLOADINTOSTREAM(Text007, '', '', FromFile, InStream) THEN
          ERROR(GETLASTERRORTEXT);
        OTempBlob.Blob.CREATEOUTSTREAM(OutStream);
        COPYSTREAM(OutStream, InStream);
      END;
    END;

    BEGIN
    {
      Derived from page 11012390 (project-version)
      - DP00693: import TRAD-TXT and TRAD-XML in Service Order Budget Lines
      - DP01702: import CUF-xml
    }
    END.
  }
}

