OBJECT Codeunit 1309 O365 Getting Started Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ClientTypeManagement@1000 : Codeunit 4030;

    [External]
    PROCEDURE LaunchWizard@4(UserInitiated@1000 : Boolean;TourCompleted@1003 : Boolean) : Boolean;
    BEGIN
      EXIT(CheckOrLaunchWizard(UserInitiated,TourCompleted,TRUE));
    END;

    [External]
    PROCEDURE WizardHasToBeLaunched@19(UserInitiated@1000 : Boolean) : Boolean;
    BEGIN
      EXIT(CheckOrLaunchWizard(UserInitiated,FALSE,FALSE));
    END;

    LOCAL PROCEDURE CheckOrLaunchWizard@25(UserInitiated@1000 : Boolean;TourCompleted@1003 : Boolean;Launch@1007 : Boolean) : Boolean;
    VAR
      O365GettingStarted@1001 : Record 1309;
      CompanyInformationMgt@1004 : Codeunit 1306;
      PermissionManager@1006 : Codeunit 9002;
      WizardHasBeenShownToUser@1002 : Boolean;
      PageToStart@1005 : Integer;
    BEGIN
      IF NOT UserHasPermissionsToRunGettingStarted THEN
        EXIT(FALSE);

      IF NOT CompanyInformationMgt.IsDemoCompany THEN
        EXIT(FALSE);

      PageToStart := GetPageToStart;
      IF PageToStart <= 0 THEN
        EXIT(FALSE);

      WizardHasBeenShownToUser := O365GettingStarted.GET(USERID,ClientTypeManagement.GetCurrentClientType);

      IF NOT WizardHasBeenShownToUser THEN BEGIN
        O365GettingStarted.OnO365DemoCompanyInitialize;
        IF Launch THEN BEGIN
          COMMIT;
          PAGE.RUNMODAL(PageToStart);
        END;
        EXIT(TRUE);
      END;

      IF (NOT O365GettingStarted."Tour in Progress") AND (NOT UserInitiated) THEN
        EXIT(FALSE);

      IF UserInitiated THEN BEGIN
        IF Launch THEN BEGIN
          COMMIT;
          PAGE.RUNMODAL(PageToStart);
        END;
        EXIT(TRUE);
      END;

      IF O365GettingStarted."Tour in Progress" THEN BEGIN
        IF ClientTypeManagement.GetCurrentClientType IN [CLIENTTYPE::Phone,CLIENTTYPE::Tablet,CLIENTTYPE::Desktop] THEN
          EXIT(FALSE);

        IF Launch THEN BEGIN
          COMMIT;
          IF TourCompleted AND NOT PermissionManager.IsSandboxConfiguration THEN
            PAGE.RUNMODAL(PAGE::"O365 Tour Complete")
          ELSE
            PAGE.RUNMODAL(PageToStart);
        END;
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    [External]
    PROCEDURE UpdateGettingStartedVisible@2(VAR TileGettingStartedVisible@1003 : Boolean;VAR TileRestartGettingStartedVisible@1004 : Boolean);
    VAR
      O365GettingStarted@1001 : Record 1309;
      PermissionManager@1000 : Codeunit 9002;
    BEGIN
      TileGettingStartedVisible := FALSE;
      TileRestartGettingStartedVisible := FALSE;

      IF NOT UserHasPermissionsToRunGettingStarted THEN
        EXIT;

      IF NOT IsGettingStartedSupported THEN
        EXIT;

      IF PermissionManager.IsSandboxConfiguration THEN
        EXIT;

      TileRestartGettingStartedVisible := TRUE;

      IF NOT O365GettingStarted.GET(USERID,ClientTypeManagement.GetCurrentClientType) THEN
        EXIT;

      TileGettingStartedVisible := O365GettingStarted."Tour in Progress";
      TileRestartGettingStartedVisible := NOT TileGettingStartedVisible;
    END;

    [External]
    PROCEDURE IsGettingStartedSupported@9() : Boolean;
    VAR
      CompanyInformationMgt@1000 : Codeunit 1306;
    BEGIN
      IF NOT (ClientTypeManagement.GetCurrentClientType IN [CLIENTTYPE::Web,CLIENTTYPE::Phone,CLIENTTYPE::Tablet,CLIENTTYPE::Desktop]) THEN
        EXIT(FALSE);

      IF NOT CompanyInformationMgt.IsDemoCompany THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    [External]
    PROCEDURE AreUserToursEnabled@22() : Boolean;
    BEGIN
      EXIT(ClientTypeManagement.GetCurrentClientType = CLIENTTYPE::Web);
    END;

    [External]
    PROCEDURE GetGettingStartedTourID@3() : Integer;
    BEGIN
      EXIT(173706);
    END;

    [External]
    PROCEDURE GetInvoicingTourID@5() : Integer;
    BEGIN
      EXIT(174204);
    END;

    [External]
    PROCEDURE GetReportingTourID@6() : Integer;
    BEGIN
      EXIT(174207);
    END;

    [External]
    PROCEDURE GetChangeCompanyTourID@7() : Integer;
    BEGIN
      EXIT(174206);
    END;

    [External]
    PROCEDURE GetWizardDoneTourID@1() : Integer;
    BEGIN
      EXIT(176849);
    END;

    [External]
    PROCEDURE GetReturnToGettingStartedTourID@8() : Integer;
    BEGIN
      EXIT(176291);
    END;

    [External]
    PROCEDURE GetDevJourneyTourID@10() : Integer;
    BEGIN
      EXIT(195457);
    END;

    [External]
    PROCEDURE GetWhatIsNewTourID@18() : Integer;
    BEGIN
      EXIT(199410);
    END;

    [External]
    PROCEDURE GetAddItemTourID@11() : Integer;
    BEGIN
      EXIT(237373);
    END;

    [External]
    PROCEDURE GetAddCustomerTourID@14() : Integer;
    BEGIN
      EXIT(239510);
    END;

    [External]
    PROCEDURE GetCreateSalesOrderTourID@15() : Integer;
    BEGIN
      EXIT(240566);
    END;

    [External]
    PROCEDURE GetCreateSalesInvoiceTourID@16() : Integer;
    BEGIN
      EXIT(240561);
    END;

    [External]
    PROCEDURE WizardShouldBeOpenedForDevices@17() : Boolean;
    VAR
      O365GettingStarted@1002 : Record 1309;
    BEGIN
      IF NOT WizardCanBeOpenedForDevices THEN
        EXIT(FALSE);

      EXIT(NOT O365GettingStarted.GET(USERID,ClientTypeManagement.GetCurrentClientType));
    END;

    [External]
    PROCEDURE GetAccountantTourID@20() : Integer;
    BEGIN
      EXIT(363941);
    END;

    LOCAL PROCEDURE GetPageToStart@13() : Integer;
    VAR
      PermissionManager@1001 : Codeunit 9002;
    BEGIN
      IF PermissionManager.IsSandboxConfiguration THEN BEGIN
        IF ClientTypeManagement.GetCurrentClientType = CLIENTTYPE::Web THEN
          EXIT(PAGE::"O365 Developer Welcome");
        EXIT(-1)
      END;

      IF ClientTypeManagement.GetCurrentClientType IN [CLIENTTYPE::Phone,CLIENTTYPE::Tablet,CLIENTTYPE::Desktop] THEN BEGIN
        IF PermissionManager.SoftwareAsAService THEN
          EXIT(PAGE::"O365 Getting Started Device");
        EXIT(-1);
      END;
      EXIT(PAGE::"O365 Getting Started");
    END;

    [External]
    PROCEDURE UserHasPermissionsToRunGettingStarted@21() : Boolean;
    VAR
      DummyO365GettingStarted@1001 : Record 1309;
    BEGIN
      IF NOT DummyO365GettingStarted.READPERMISSION THEN
        EXIT(FALSE);

      IF NOT DummyO365GettingStarted.WRITEPERMISSION THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    [External]
    PROCEDURE WizardCanBeOpenedForDevices@12() : Boolean;
    VAR
      PermissionManager@1001 : Codeunit 9002;
      CompanyInformationMgt@1000 : Codeunit 1306;
    BEGIN
      IF NOT (ClientTypeManagement.GetCurrentClientType IN [CLIENTTYPE::Tablet,CLIENTTYPE::Phone,CLIENTTYPE::Desktop]) THEN
        EXIT(FALSE);

      IF NOT UserHasPermissionsToRunGettingStarted THEN
        EXIT(FALSE);

      IF NOT PermissionManager.SoftwareAsAService THEN
        EXIT(FALSE);

      IF NOT CompanyInformationMgt.IsDemoCompany THEN
        EXIT(FALSE);

      EXIT(TRUE)
    END;

    BEGIN
    END.
  }
}

