OBJECT Codeunit 1281 Update Currency Exchange Rates
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.03,4PS14.00;
  }
  PROPERTIES
  {
    Permissions=TableData 1220=rimd;
    OnRun=BEGIN
            SyncCurrencyExchangeRates;
          END;

  }
  CODE
  {
    VAR
      ResponseTempBlob@1003 : Record 99008535;
      HttpWebRequestMgt@1002 : Codeunit 1297;
      NoSyncCurrencyExchangeRatesSetupErr@1000 : TextConst 'ENU=There are no active Currency Exchange Rate Sync. Setup records.;NOR=Det er ingen aktive poster for konfigurasjon av synkronisering av valutakurs.;SVE=Det finns inga aktiva poster f”r att konfigurera synkronisering av valutakurs.';
      MissingExchRateNotificationNameTxt@1001 : TextConst 'ENU=Missing Exchange Rates;NOR=Manglende valutakurser';
      MissingExchRateNotificationDescriptionTxt@1004 : TextConst 'ENU=Show warning to enter exchange rates when a new currency is created.;NOR=Vis advarsel om † angi valutakurser n†r det opprettes en ny valuta.';
      NotificationActionDisableTxt@1007 : TextConst 'ENU=Don''t show me again;NOR=Ikke vis dette igjen;SVE=Visa inte detta igen';
      NotificationActionOpenPageTxt@1006 : TextConst 'ENU=Do it now;NOR=Gj›r det n†';
      NotificationMessageMsg@1005 : TextConst '@@@=Currency Code;ENU=Exchange rates for %1 need to be configured.;NOR=Valutakurser for %1 m† konfigureres.';
      ExchRatesUpdatedTxt@1009 : TextConst '@@@={Locked};ENU=The user updated currency exchange rates via a currency exchange rate service.;NOR=The user updated currency exchange rates via a currency exchange rate service.';
      TelemetryCategoryTok@1008 : TextConst '@@@={Locked};ENU=AL Exchange Rate Service;NOR=AL Exchange Rate Service';

    LOCAL PROCEDURE SyncCurrencyExchangeRates@2();
    VAR
      CurrExchRateUpdateSetup@1003 : Record 1650;
      ResponseInStream@1000 : InStream;
      SourceName@1001 : Text;
    BEGIN
      CurrExchRateUpdateSetup.SETRANGE(Enabled,TRUE);

      IF CurrExchRateUpdateSetup.FINDSET THEN
        REPEAT
          OnBeforeSyncCurrencyExchangeRatesLoop(CurrExchRateUpdateSetup);
          GetCurrencyExchangeData(CurrExchRateUpdateSetup,ResponseInStream,SourceName);
          UpdateCurrencyExchangeRates(CurrExchRateUpdateSetup,ResponseInStream,SourceName);
          LogTelemetryWhenExchangeRateUpdated(CurrExchRateUpdateSetup);
        UNTIL CurrExchRateUpdateSetup.NEXT = 0
      ELSE
        ERROR(NoSyncCurrencyExchangeRatesSetupErr);
    END;

    [Internal]
    PROCEDURE UpdateCurrencyExchangeRates@6(CurrExchRateUpdateSetup@1003 : Record 1650;CurrencyExchRatesDataInStream@1000 : InStream;SourceName@1004 : Text);
    VAR
      DataExch@1002 : Record 1220;
      DataExchDef@1001 : Record 1222;
    BEGIN
      DataExchDef.GET(CurrExchRateUpdateSetup."Data Exch. Def Code");
      CreateDataExchange(DataExch,DataExchDef,CurrencyExchRatesDataInStream,COPYSTR(SourceName,1,250));
      DataExchDef.ProcessDataExchange(DataExch);
      DataExch.DELETE(TRUE);
    END;

    LOCAL PROCEDURE GetCurrencyExchangeData@15(VAR CurrExchRateUpdateSetup@1001 : Record 1650;VAR ResponseInStream@1000 : InStream;VAR SourceName@1003 : Text);
    VAR
      ServiceUrl@1002 : Text;
      Handled@1004 : Boolean;
    BEGIN
      CLEAR(ResponseTempBlob);
      ResponseTempBlob.INIT;
      ResponseTempBlob.Blob.CREATEINSTREAM(ResponseInStream);

      OnBeforeGetCurrencyExchangeData(CurrExchRateUpdateSetup,ResponseInStream,SourceName,Handled);
      IF Handled THEN
        EXIT;

      ExecuteWebServiceRequest(CurrExchRateUpdateSetup,ResponseInStream);
      CurrExchRateUpdateSetup.GetWebServiceURL(ServiceUrl);
      SourceName := ServiceUrl;
    END;

    LOCAL PROCEDURE CreateDataExchange@10(VAR DataExch@1001 : Record 1220;DataExchDef@1004 : Record 1222;ResponseInStream@1002 : InStream;SourceName@1003 : Text[250]);
    VAR
      TempBlob@1007 : Record 99008535;
      GetJsonStructure@1005 : Codeunit 1237;
      OutStream@1000 : OutStream;
      BlankInStream@1006 : InStream;
    BEGIN
      IF DataExchDef."File Type" = DataExchDef."File Type"::Json THEN BEGIN
        TempBlob.INIT;
        TempBlob.Blob.CREATEINSTREAM(BlankInStream);

        DataExch.InsertRec(SourceName,BlankInStream,DataExchDef.Code);
        DataExch."File Content".CREATEOUTSTREAM(OutStream);
        IF NOT GetJsonStructure.JsonToXML(ResponseInStream,OutStream) THEN
          GetJsonStructure.JsonToXMLCreateDefaultRoot(ResponseInStream,OutStream);
        DataExch.MODIFY(TRUE);
      END ELSE
        DataExch.InsertRec(SourceName,ResponseInStream,DataExchDef.Code);

      CODEUNIT.RUN(DataExchDef."Reading/Writing Codeunit",DataExch);
    END;

    LOCAL PROCEDURE ExecuteWebServiceRequest@1(CurrExchRateUpdateSetup@1001 : Record 1650;VAR ResponseInStream@1003 : InStream);
    VAR
      HttpStatusCode@1000 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpStatusCode";
      ResponseHeaders@1004 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.NameValueCollection";
      URL@1002 : Text;
    BEGIN
      CurrExchRateUpdateSetup.GetWebServiceURL(URL);
      HttpWebRequestMgt.Initialize(URL);
      HttpWebRequestMgt.SetReturnType('application/xml,text/xml');

      IF NOT GUIALLOWED THEN
        HttpWebRequestMgt.DisableUI;

      HttpWebRequestMgt.SetTraceLogEnabled(CurrExchRateUpdateSetup."Log Web Requests");

      IF NOT HttpWebRequestMgt.GetResponse(ResponseInStream,HttpStatusCode,ResponseHeaders) THEN
        ShowHttpError(CurrExchRateUpdateSetup,URL);
    END;

    [External]
    PROCEDURE GenerateTempDataFromService@5(VAR TempCurrencyExchangeRate@1000 : TEMPORARY Record 330;CurrExchRateUpdateSetup@1003 : Record 1650);
    VAR
      DataExch@1005 : Record 1220;
      DataExchDef@1004 : Record 1222;
      MapCurrencyExchangeRate@1006 : Codeunit 1280;
      ResponseInStream@1002 : InStream;
      SourceName@1001 : Text;
    BEGIN
      GetCurrencyExchangeData(CurrExchRateUpdateSetup,ResponseInStream,SourceName);
      DataExchDef.GET(CurrExchRateUpdateSetup."Data Exch. Def Code");
      CreateDataExchange(DataExch,DataExchDef,ResponseInStream,COPYSTR(SourceName,1,250));

      MapCurrencyExchangeRate.MapCurrencyExchangeRates(DataExch,TempCurrencyExchangeRate);
      DataExch.DELETE(TRUE);
    END;

    LOCAL PROCEDURE ShowHttpError@8(CurrExchRateUpdateSetup@1008 : Record 1650;WebServiceURL@1007 : Text);
    VAR
      ActivityLog@1000 : Record 710;
      WebRequestHelper@1006 : Codeunit 1299;
      XMLDOMMgt@1005 : Codeunit 6224;
      WebException@1004 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.WebException";
      XmlNode@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ResponseInputStream@1002 : InStream;
      ErrorText@1001 : Text;
    BEGIN
      ErrorText := WebRequestHelper.GetWebResponseError(WebException,WebServiceURL);

      ActivityLog.LogActivity(
        CurrExchRateUpdateSetup,ActivityLog.Status::Failed,CurrExchRateUpdateSetup."Service Provider",
        CurrExchRateUpdateSetup.Description,ErrorText);

      IF ISNULL(WebException.Response) THEN
        ERROR(ErrorText);

      ResponseInputStream := WebException.Response.GetResponseStream;

      XMLDOMMgt.LoadXMLNodeFromInStream(ResponseInputStream,XmlNode);

      ErrorText := WebException.Message;

      ERROR(ErrorText);
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeGetCurrencyExchangeData@3(VAR CurrExchRateUpdateSetup@1002 : Record 1650;VAR ResponseInStream@1001 : InStream;VAR SourceName@1000 : Text;VAR Handled@1003 : Boolean);
    BEGIN
    END;

    [External]
    PROCEDURE OpenCurrencyExchangeRatesPageFromNotification@4(Notification@1000 : Notification);
    VAR
      CurrencyExchangeRate@1001 : Record 330;
      CurrencyCode@1002 : Code[10];
    BEGIN
      CurrencyCode := Notification.GETDATA('Currency Code');
      CurrencyExchangeRate.SETRANGE("Currency Code",CurrencyCode);
      PAGE.RUNMODAL(PAGE::"Currency Exchange Rates",CurrencyExchangeRate);
    END;

    [External]
    PROCEDURE DisableMissingExchangeRatesNotification@7(Notification@1000 : Notification);
    VAR
      MyNotifications@1001 : Record 1518;
    BEGIN
      IF NOT MyNotifications.Disable(Notification.ID) THEN
        MyNotifications.InsertDefault(
          Notification.ID,
          MissingExchRateNotificationNameTxt,
          MissingExchRateNotificationDescriptionTxt,
          FALSE);
    END;

    [External]
    PROCEDURE ShowMissingExchangeRatesNotification@9(CurrencyCode@1002 : Code[10]);
    VAR
      MyNotifications@1000 : Record 1518;
      Notification@1001 : Notification;
    BEGIN
      IF NOT MyNotifications.IsEnabled(GetMissingExchangeRatesNotificationID) THEN
        EXIT;
      Notification.ID := GetMissingExchangeRatesNotificationID;
      Notification.MESSAGE := STRSUBSTNO(NotificationMessageMsg,CurrencyCode);
      Notification.SETDATA('Currency Code',CurrencyCode);
      Notification.ADDACTION(NotificationActionOpenPageTxt,1281,'OpenCurrencyExchangeRatesPageFromNotification');
      Notification.ADDACTION(NotificationActionDisableTxt,1281,'DisableMissingExchangeRatesNotification');
      Notification.SEND;
    END;

    [External]
    PROCEDURE ExchangeRatesForCurrencyExist@11(Date@1001 : Date;CurrencyCode@1000 : Code[10]) : Boolean;
    VAR
      CurrencyExchangeRate@1002 : Record 330;
    BEGIN
      IF Date = 0D THEN
        Date := WORKDATE;
      CurrencyExchangeRate.SETRANGE("Currency Code",CurrencyCode);
      CurrencyExchangeRate.SETRANGE("Starting Date",0D,Date);
      EXIT(CurrencyExchangeRate.FINDLAST);
    END;

    [External]
    PROCEDURE OpenExchangeRatesPage@19(CurrencyCode@1000 : Code[10]);
    VAR
      CurrencyExchangeRate@1001 : Record 330;
    BEGIN
      CurrencyExchangeRate.SETRANGE("Currency Code",CurrencyCode);
      PAGE.RUNMODAL(PAGE::"Currency Exchange Rates",CurrencyExchangeRate);
    END;

    [External]
    PROCEDURE GetMissingExchangeRatesNotificationID@24() : GUID;
    BEGIN
      EXIT('911e69ab-73a1-4e08-931b-cf21f0d118f2');
    END;

    LOCAL PROCEDURE LogTelemetryWhenExchangeRateUpdated@12(CurrExchRateUpdateSetup@1001 : Record 1650);
    VAR
      ServiceURL@1000 : Text;
    BEGIN
      CurrExchRateUpdateSetup.GetWebServiceURL(ServiceURL);
      SENDTRACETAG('000089F',TelemetryCategoryTok,VERBOSITY::Normal,ExchRatesUpdatedTxt,DATACLASSIFICATION::SystemMetadata);
      SENDTRACETAG('000089G',TelemetryCategoryTok,VERBOSITY::Normal,ServiceURL,DATACLASSIFICATION::SystemMetadata);
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeSyncCurrencyExchangeRatesLoop@13(VAR CurrExchRateUpdateSetup@1000 : Record 1650);
    BEGIN
    END;

    BEGIN
    END.
  }
}

