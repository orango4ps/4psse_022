OBJECT Page 11012912 Rubric Budget to Distribute
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Zu verteilendes Rubrikbudget;
               ENU=Rubric Budget to Distribute;
               NLD=Te verdelen rubriekbudget;
               NOR=Rubrikkbudsjett til distribusjon;
               SVE=Rubrik fîr budget att distribuera];
    SourceTable=Table11012909;
    DelayedInsert=Yes;
    PageType=Worksheet;
    OnInit=BEGIN
             "House ModelEditable" := TRUE;
             "House Model DescriptionVisible" := TRUE;
             "House ModelVisible" := TRUE;
             ShiftWith := ShiftWith::Both;
           END;

    OnOpenPage=BEGIN
                 FILTERGROUP(4);
                 IF GETFILTER("Project No.") <> '' THEN
                   ProjDevRec.GET(GETFILTER("Project No."));
                 FILTERGROUP(0);

                 "House ModelEditable" := (ProjDevRec."Budget Level" = ProjDevRec."Budget Level"::Model);
                 "House ModelVisible" := (ProjDevRec."Budget Level" = ProjDevRec."Budget Level"::Model);
                 "House Model DescriptionVisible" := (ProjDevRec."Budget Level" = ProjDevRec."Budget Level"::Model);
               END;

    OnAfterGetRecord=BEGIN
                       OnAfterGetCurrRecord;
                     END;

    OnNewRecord=BEGIN
                  OnAfterGetCurrRecord;
                END;

    OnInsertRecord=BEGIN
                     TESTFIELD("Project No.");
                     TESTFIELD(Version);
                     TESTFIELD("Rubric Code");

                     IF ("Line No." = 0) THEN
                       "Line No." := AutoSplitKeyFacility(BelowxRec, xRec."Line No.")
                     ELSE BEGIN
                       //* Tbv kopieren regels, anders worden ze in de omgekeerde volgorde toegevoegd
                       IF (XRecLineNo = 0) THEN BEGIN
                         XRecLineNo := xRec."Line No.";
                         CopyBelowxRec := TRUE;
                         IF ("Project No." = xRec."Project No.") AND (Version = xRec.Version) AND
                            ("Rubric Code" = xRec."Rubric Code") AND ("House Model" = xRec."House Model") THEN
                           CopyBelowxRec := BelowxRec;
                       END;
                       "Line No." := AutoSplitKeyFacility(CopyBelowxRec, XRecLineNo);
                     END;

                     gModified := TRUE;
                   END;

    OnModifyRecord=BEGIN
                     gModified := TRUE;
                   END;

    OnDeleteRecord=BEGIN
                     IF NOT CurrPage.EDITABLE THEN
                       EXIT(FALSE);

                     IF InvPropRubricRec.GET("Project No.", Version, "Rubric Code") THEN BEGIN
                       IF (InvPropRubricRec.Type = InvPropRubricRec.Type::"Costs to Distr. as Perc. Rev.") AND
                          ("House Model" = '') AND ("Line No." = 10000)
                       THEN
                         EXIT(FALSE);   //* Mag niet handmatig verwijderd worden, is automatisch opgevoerde regel
                     END;

                     gModified := TRUE;
                   END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1100485028;1 ;Action    ;
                      CaptionML=[DEU=Weiter scheiben;
                                 ENU=Shift forward;
                                 NLD=Naar achteren schuiven;
                                 SVE=Skifta framÜt];
                      ToolTipML=[DEU=Weiter scheiben;
                                 ENU=Shift forward;
                                 NLD=Naar achteren schuiven;
                                 SVE=Skifta framÜt];
                      Promoted=Yes;
                      Image=Import;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ShiftDates(1);
                               END;
                                }
      { 1100485027;1 ;Action    ;
                      CaptionML=[DEU=ZÅruck schieben;
                                 ENU=Shift backward;
                                 NLD=Naar voren schuiven;
                                 SVE=Skifta bakÜt];
                      ToolTipML=[DEU=ZÅruck schieben;
                                 ENU=Shift backward;
                                 NLD=Naar voren schuiven;
                                 SVE=Skifta bakÜt];
                      Promoted=Yes;
                      Image=Export;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ShiftDates(-1);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1100409002;1;Group  ;
                CaptionML=[DEU=Verschieben;
                           ENU=Shift;
                           NLD=Schuiven;
                           NOR=Skift;
                           SVE=Skift] }

    { 1100409001;2;Field  ;
                CaptionML=[DEU=Schieben mit;
                           ENU=Shift with;
                           NLD=Schuiven met;
                           SVE=Skifta med];
                OptionCaptionML=[DEU=Startdatum,Enddatum,Beide;
                                 ENU=Start Date,End Date,Both;
                                 NLD=Startdatum,Einddatum,Beide;
                                 SVE=Startdatum,Slutdatum,BÜda];
                SourceExpr=ShiftWith }

    { 1100409000;2;Field  ;
                CaptionML=[DEU=Anzahl Tg/Wc/usw.;
                           ENU=No. of days/wk/etc.;
                           NLD=Aantal dg/wk/etc.;
                           SVE=Antal dagar/veckor/etc.];
                ToolTipML=[DEU=Datumsformel;
                           ENU=Date Formula;
                           NLD=Datumformule;
                           NOR=Datoformel;
                           SVE=Datumformel];
                SourceExpr=ShiftFormula }

    { 1100485000;1;Group  ;
                GroupType=Repeater }

    { 1100485001;2;Field  ;
                Lookup=No;
                SourceExpr="Rubric Code";
                OnValidate=VAR
                             lvInvPropRubricRec@1100485000 : Record 11012913;
                           BEGIN
                             IF GETFILTER("Rubric Code") <> '' THEN BEGIN
                               lvInvPropRubricRec.SETRANGE("Project No.", "Project No.");
                               lvInvPropRubricRec.SETRANGE(Version, Version);
                               COPYFILTER("Rubric Code", lvInvPropRubricRec."Rubric Code");
                               lvInvPropRubricRec.FILTERGROUP(6);
                               lvInvPropRubricRec.SETRANGE("Rubric Code", "Rubric Code");
                               lvInvPropRubricRec.FILTERGROUP(0);
                               IF NOT lvInvPropRubricRec.FIND('-') THEN
                                 FIELDERROR("Rubric Code", STRSUBSTNO(Text001, "Rubric Code", GETFILTER("Rubric Code")));
                             END;
                           END;
                            }

    { 1100485007;2;Field  ;
                SourceExpr="Rubric Description";
                Visible=FALSE }

    { 1100485003;2;Field  ;
                SourceExpr="House Model";
                Visible="House ModelVisible";
                Editable="House ModelEditable" }

    { 1100485010;2;Field  ;
                DrillDown=No;
                SourceExpr="House Model Description";
                Visible="House Model DescriptionVisible" }

    { 1100485020;2;Field  ;
                SourceExpr=Description }

    { 1100485005;2;Field  ;
                SourceExpr=Amount }

    { 1100485014;2;Field  ;
                ToolTipML=[DEU=Nur abweichende eingeben;
                           ENU=Fill only divergent;
                           NLD=Alleen afwijkende ingeven;
                           SVE=Fyll endast i divergerande];
                SourceExpr="Frequency Budget Distr." }

    { 1100485012;2;Field  ;
                ToolTipML=[DEU=Nur abweichende eingeben;
                           ENU=Fill only divergent;
                           NLD=Alleen afwijkende ingeven;
                           SVE=Fyll endast i divergerande];
                SourceExpr="Scheme Budget Distr." }

    { 1100485016;2;Field  ;
                ToolTipML=[DEU=Nur abweichende eingeben;
                           ENU=Fill only divergent;
                           NLD=Alleen afwijkende ingeven;
                           SVE=Fyll endast i divergerande];
                SourceExpr="Start Date Budget Distr." }

    { 1100485018;2;Field  ;
                ToolTipML=[DEU=Nur abweichende eingeben;
                           ENU=Fill only divergent;
                           NLD=Alleen afwijkende ingeven;
                           SVE=Fyll endast i divergerande];
                SourceExpr="End Date Budget Distr." }

  }
  CODE
  {
    VAR
      Text000@1100485002 : TextConst 'DEU=Die Autsplitkey-FazilitÑt kann keinen SchlÅsselwert zwischen dem heutigen und vorigen Datensatz finden.;ENU=The autosplitkey facility cannot find a key between the current and the previous record.;NLD=De autosplitkey-faciliteit kan geen sleutelwaarde vinden tusen het huidige en het vorige record.;SVE=Funktionen autosplitkey kan inte hitta en nyckel mellan nuvarande och fîregÜende post.';
      Text001@1100485000 : TextConst 'DEU=''%1'' nicht gestattet, fÑllt ausserhalb des gestatteten Bereichs (%2);ENU=''%1'' not allowed, out of allowed range (%2);NLD=''%1'' niet toegestaan, valt buiten het toegestane bereik (%2);SVE=''%1'' Ñr inte tillÜtet eftersom intervallet (%2) har îverskridits';
      ProjDevRec@1100485001 : Record 11012915;
      InvPropRubricRec@1100485010 : Record 11012913;
      ShiftFormula@1100485007 : DateFormula;
      ShiftWith@1100485006 : 'Start,Ending,Both';
      gModified@1100485005 : Boolean;
      CopyBelowxRec@1100485004 : Boolean;
      XRecLineNo@1100485003 : Integer;
      Text002@1100485009 : TextConst 'DEU=''%1''darf nicht kleiner als %2 ''%3'' sein;ENU=(%1) may not be less than %2 (%3);NLD=(%1) mag niet kleiner zijn dan %2 (%3);NOR=(%1) kan ikke vëre mindre enn %2 (%3);SVE=(%1) fÜr inte vara mindre Ñn %2 (%3)';
      Text003@1100485008 : TextConst 'DEU=Zuerst mÅssen Sie die Zeilen mit Start- und Enddatum mittels Ctrl+F1 markieren.;ENU=First select lines with start and end date filled.;NLD=Selecteer eerst regels met begin- en einddatum gevuld.';
      "House ModelVisible"@19033815 : Boolean INDATASET;
      "House Model DescriptionVisible"@19027150 : Boolean INDATASET;
      "House ModelEditable"@19059544 : Boolean INDATASET;

    PROCEDURE AutoSplitKeyFacility@1100485000(IBelowxRec@1100485003 : Boolean;ILineNoXRec@1100485005 : Integer) : Integer;
    VAR
      lvBudgToDistrRec@1100485002 : Record 11012909;
      lvBudgToDistrRec2@1100485001 : Record 11012909;
      lvStepSize@1100485000 : Integer;
      lvLineNo@1100485004 : Integer;
    BEGIN
      lvLineNo := 0;
      lvStepSize := 10000;

      IF (NOT IBelowxRec) THEN BEGIN
        IF (ILineNoXRec > 1) THEN BEGIN
          lvBudgToDistrRec2.SETRANGE("Project No.", "Project No.");
          lvBudgToDistrRec2.SETRANGE(Version, Version);
          lvBudgToDistrRec2.SETRANGE("Rubric Code", "Rubric Code");
          lvBudgToDistrRec2.SETRANGE("House Model", "House Model");
          lvBudgToDistrRec2.SETFILTER("Line No.", '<%1', ILineNoXRec);
          IF lvBudgToDistrRec2.FIND('+') THEN BEGIN
            lvLineNo := SearchFreeLineNoInRange(ROUND(((lvBudgToDistrRec2."Line No."+ILineNoXRec)/2),1), (ILineNoXRec - 1), 1);
            IF lvLineNo = 0 THEN
              lvLineNo := SearchFreeLineNoInRange(
                (ROUND(((lvBudgToDistrRec2."Line No."+ILineNoXRec)/2),1) -1), (lvBudgToDistrRec2."Line No." + 1), -1);
          END ELSE BEGIN
            IF ((ILineNoXRec - lvStepSize) < lvStepSize) THEN BEGIN
              lvLineNo := SearchFreeLineNoInRange(ROUND((ILineNoXRec/2),1), (ILineNoXRec - 1), 1);
              IF lvLineNo = 0 THEN
                lvLineNo := SearchFreeLineNoInRange((ROUND((ILineNoXRec/2),1) - 1), 1, -1);
            END ELSE BEGIN
              lvLineNo := SearchFreeLineNoInRange((ILineNoXRec - lvStepSize), (ILineNoXRec - 1), 1);
              IF lvLineNo = 0 THEN
                lvLineNo := SearchFreeLineNoInRange((ILineNoXRec - lvStepSize - 1), 1, -1);
            END;
          END;
        END;
      END ELSE BEGIN
        lvBudgToDistrRec.SETRANGE("Project No.", "Project No.");
        lvBudgToDistrRec.SETRANGE(Version, Version);
        lvBudgToDistrRec.SETRANGE("Rubric Code", "Rubric Code");
        lvBudgToDistrRec.SETRANGE("House Model", "House Model");
        IF lvBudgToDistrRec.FIND('+') THEN
          lvLineNo := lvBudgToDistrRec."Line No." + lvStepSize
        ELSE
          lvLineNo := lvStepSize;
      END;

      IF (lvLineNo <= 0) THEN
        ERROR(Text000);

      EXIT(lvLineNo);
    END;

    PROCEDURE SearchFreeLineNoInRange@1100485001(IRangeFrom@1100485000 : Integer;IRangeTo@1100485001 : Integer;IStep@1100485002 : Integer) : Integer;
    VAR
      lvBudgToDistrRec@1100485003 : Record 11012909;
      lvI@1100485004 : Integer;
    BEGIN
      IF IRangeFrom < 1 THEN
        IRangeFrom := 1;
      IF IRangeTo < 1 THEN
        IRangeTo := 1;

      CASE IStep OF
        1:
          BEGIN
            IF (IRangeFrom > IRangeTo) THEN
              EXIT(0);
            FOR lvI := IRangeFrom TO IRangeTo DO BEGIN
              IF NOT lvBudgToDistrRec.GET("Project No.", Version, "Rubric Code", "House Model", lvI) THEN
                EXIT(lvI);
            END;
          END;
        -1:
          BEGIN
            IF (IRangeFrom < IRangeTo) THEN
              EXIT(0);
            FOR lvI := IRangeFrom DOWNTO IRangeTo DO BEGIN
              IF NOT lvBudgToDistrRec.GET("Project No.", Version, "Rubric Code", "House Model", lvI) THEN
                EXIT(lvI);
            END;
          END;
      END;

      EXIT(0);
    END;

    PROCEDURE GetModified@1210190001() : Boolean;
    BEGIN
      EXIT(gModified);
    END;

    PROCEDURE ShiftDates@1100485002(IDirection@1100485000 : Integer);
    VAR
      lvBudgetToDistrRec@1100485002 : Record 11012909;
      lvShiftFormula@1100485001 : DateFormula;
      lvShiftText@1100485003 : Text[100];
    BEGIN
      IF FORMAT(ShiftFormula) = '' THEN
        EXIT;

      IF IDirection <> -1 THEN
        lvShiftFormula := ShiftFormula
      ELSE BEGIN
        //EVALUATE(lvShiftFormula, '-(' + FORMAT(ShiftFormula) + ')'); Dit werkt niet goed bv '-(1W+2D)' wordt '-1W+2D' ipv '-1W-2D'
        lvShiftText := FORMAT(ShiftFormula);
        IF COPYSTR(lvShiftText, 1, 1) = '-' THEN
          lvShiftText := COPYSTR(lvShiftText, 2)
        ELSE BEGIN
          lvShiftText := CONVERTSTR(lvShiftText, '-', '~');
          lvShiftText := CONVERTSTR(lvShiftText, '+', '-');
          lvShiftText := CONVERTSTR(lvShiftText, '~', '+');
          IF NOT (COPYSTR(lvShiftText, 1, 1) IN ['-', '+']) THEN
            lvShiftText := '-' + lvShiftText;
        END;
        EVALUATE(lvShiftFormula, lvShiftText);
      END;

      WITH lvBudgetToDistrRec DO BEGIN
        lvBudgetToDistrRec.COPY(Rec);
        CurrPage.SETSELECTIONFILTER(lvBudgetToDistrRec);
        //lvBudgetToDistrRec.MARKEDONLY(TRUE);
        lvBudgetToDistrRec.FILTERGROUP(8);
        lvBudgetToDistrRec.SETFILTER("Start Date Budget Distr.", '<>%1', 0D);  //* Geen of beide datums zijn gevuld,
        lvBudgetToDistrRec.SETFILTER("End Date Budget Distr.", '<>%1', 0D);    //* alleen bijwerken als beide gevuld
        lvBudgetToDistrRec.FILTERGROUP(0);
        IF NOT lvBudgetToDistrRec.FIND('-') THEN
          ERROR(Text003);

        REPEAT
          CALCFIELDS(Fixed);
          TESTFIELD(Fixed, FALSE);
          IF ShiftWith IN [ShiftWith::Start, ShiftWith::Both] THEN
            "Start Date Budget Distr." := CALCDATE(lvShiftFormula, "Start Date Budget Distr.");
          IF ShiftWith IN [ShiftWith::Ending, ShiftWith::Both] THEN
            "End Date Budget Distr." := CALCDATE(lvShiftFormula, "End Date Budget Distr.");
          IF ("End Date Budget Distr." < "Start Date Budget Distr.") THEN BEGIN
            FIELDERROR("End Date Budget Distr.", STRSUBSTNO(Text002,
              "End Date Budget Distr.", FIELDCAPTION("Start Date Budget Distr.") ,"Start Date Budget Distr."));
          END;
          MODIFY;
          gModified := TRUE;
        UNTIL lvBudgetToDistrRec.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE OnAfterGetCurrRecord@19077479();
    BEGIN
      xRec := Rec;
      XRecLineNo := 0;
    END;

    LOCAL PROCEDURE RubricCodeOnBeforeInput@19060271();
    BEGIN
      //IF ("Rubric Code" <> '') AND ("House Model" = '') AND ("Line No." = 10000) THEN BEGIN
      //  IF InvPropRubricRec.GET("Project No.", Version, "Rubric Code") THEN BEGIN
      //    IF (InvPropRubricRec.Type = InvPropRubricRec.Type::"Costs to Distr. as Perc. Rev.") THEN
      //      CurrPage."Rubric Code".UPDATEEDITABLE := FALSE;
      //  END;
      //END;
    END;

    LOCAL PROCEDURE HouseModelOnBeforeInput@19043914();
    BEGIN
      //IF InvPropRubricRec.GET("Project No.", Version, "Rubric Code") THEN BEGIN
      //  IF (InvPropRubricRec.Type = InvPropRubricRec.Type::"Costs to Distr. as Perc. Rev.") THEN
      //    CurrPage."House Model".UPDATEEDITABLE := FALSE;
      //END;
    END;

    LOCAL PROCEDURE AmountOnBeforeInput@19040547();
    BEGIN
      //IF InvPropRubricRec.GET("Project No.", Version, "Rubric Code") THEN BEGIN
      //  IF (InvPropRubricRec.Type = InvPropRubricRec.Type::"Costs to Distr. as Perc. Rev.") THEN
      //    CurrPage.Amount.UPDATEEDITABLE := FALSE;
      //END;
    END;

    BEGIN
    END.
  }
}

