OBJECT XMLport 11012079 Export Hours SCAB
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Export Hours SCAB;
               SVE=Exportera timmar SCAB];
    Direction=Export;
    OnInitXMLport=BEGIN
                    HumanResourcesSetup.GET;
                    HumanResourcesSetup.TESTFIELD("Exchange Salary Application");
                    HumanResourcesSetup.TESTFIELD("Salary Application",HumanResourcesSetup."Salary Application"::SCAB);
                    PathText := HumanResourcesSetup."Pathname Files to Salary";
                  END;

    OnPreXMLport=BEGIN
                   IF DocumentFilterCde = '' THEN
                     ERROR(Text006);

                   currXMLport.FILENAME(PathText + Text011);

                   IF CURRENTCLIENTTYPE <> CLIENTTYPE::Web THEN
                     IF FileMgt.ClientFileExists(currXMLport.FILENAME) THEN
                       IF NOT FileMgt.ExistingFileMustBeReplaced(currXMLport.FILENAME, TRUE) THEN
                         ERROR('');

                   FillPayRec;
                 END;

    OnPostXMLport=BEGIN
                    PayRec.DELETEALL;
                    COMMIT;

                    IF Lineno = 0 THEN
                      MESSAGE(Text014)
                    ELSE
                      MESSAGE(Text015, Lineno);
                  END;

    Format=Fixed Text;
  }
  ELEMENTS
  {
    { [{37F8D734-8A31-4998-A6A4-456385F64F8E}];  ;Root                ;Element ;Text     }

    { [{16D4F879-48FA-4241-B2AD-C915E80967D8}];1 ;BufferHourExport    ;Element ;Table   ;
                                                  SourceTable=Table11012042;
                                                  SourceTableView=SORTING(Field10);
                                                  Export::OnAfterGetRecord=VAR
                                                                             RecRef@1100528400 : RecordRef;
                                                                           BEGIN
                                                                             RecRef.GETTABLE("Buffer Hour Export");
                                                                             XMLportStatusDialogMgt.ShowExportStatus(RecRef);
                                                                           END;
                                                                            }

    { [{B1F4F79C-F413-440F-805A-E9D098A475BF}];2 ;Text                ;Element ;Field   ;
                                                  DataType=Text;
                                                  SourceField=Buffer Hour Export::Text;
                                                  Width=102 }

  }
  EVENTS
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  CODE
  {
    VAR
      HumanResourcesSetup@1100528418 : Record 5218;
      HoursExportRec@1100528417 : Record 11012041;
      PayRec@1100528416 : Record 11012042;
      PostedHourLine@1100528415 : Record 11012085;
      EmplRec@1100528414 : Record 5200;
      WageCompRec@1100528413 : Record 11012014;
      EmployerRec@1100528412 : Record 11012013;
      ApplicationSystemConstants@1100528411 : Codeunit 9015;
      XMLportStatusDialogMgt@1100528433 : Codeunit 11130006;
      FileMgt@1100528434 : Codeunit 419;
      PathText@1100528410 : Text[100];
      QuantityTxt@1100528409 : Text[10];
      LineNoInt@1100528408 : Integer;
      Lineno@1100528407 : Integer;
      DocumentFilterCde@1100528406 : Code[100];
      EmployerCde@1100528405 : Code[20];
      ProjectTxt@1100528404 : Text[30];
      QuantDec@1100528403 : Decimal;
      NotExportedLinesOnly@1100528402 : Boolean;
      DoNotExportProjectNo@1100528401 : Boolean;
      ExportDateTime@1100528400 : DateTime;
      Text006@1100528429 : TextConst 'ENU=Fill out Document Filter.;SVE=Fyll i dokumentfilter.';
      Text011@1100528428 : TextConst 'ENU=TRUREN.EXP;SVE=TRUREN.EXP';
      Text014@1100528427 : TextConst 'ENU=No Hour lines Exported.;SVE=Inga timrader har exporterats.';
      Text015@1100528426 : TextConst 'ENU=Export Finished. There are %1 hour lines exported.;SVE=Export f„rdig. %1 timrader har exporterats.';
      Text017@1100528424 : TextConst 'ENU=No hours present for document %1.;SVE=Det finns inga timmar f”r dokumentet %1.';
      Text022@1100528423 : TextConst 'ENU=%1 %2 is to long for SCAB. Maximum length is set to %3.;SVE=%1 %2 „r f”r l†ng f”r SCAB. Maximal l„ngd „r angiven som %3.';
      Text023@1100528422 : TextConst 'ENU=%1 %2 has an alphanumeric code. SCAB allowes only numeric codes.;SVE=%1 %2 har en alfanumerisk kod. Endast numeriska koder till†ts i SCAB.';
      Text024@1100528421 : TextConst 'ENU=%1 %2 is to long for SCAB. Maximum length is 6.;SVE=%1 %2 „r f”r l†ng f”r SCAB. Maximal l„ngd „r 6.';
      Text025@1100528420 : TextConst 'ENU=%1 %2 is not supported by SCAB.;SVE=%1 %2 st”ds inte av SCAB.';
      Text037@1100528419 : TextConst 'ENU=Only < and > are allowed as parameter in function outline;SVE=Endast < och > till†ts som parametrar i funktionsutkastet';
      PeriodFilter@1100525000 : Text;
      DoNotExportCostObject@1100529500 : Boolean;
      CostObjectTxt@1100529501 : Text[30];
      DoNotExportServiceOrder@1100527651 : Boolean;

    PROCEDURE SetSelection@10(DocumentNo@11012000 : Code[20]);
    BEGIN
      DocumentFilterCde := DocumentNo;
    END;

    PROCEDURE SetGlobalVars@1100528400(DocumentFilterCde2@1100528400 : Code[100];EmployerCde2@1100528401 : Code[20];NotExportedLinesOnly2@1100528402 : Boolean;DoNotExportProjectNo2@1100528403 : Boolean;PeriodFilter2@1100525000 : Text[30];DoNotExportCostObject2@1100529500 : Boolean;DoNotExportServiceOrder2@1100527650 : Boolean);
    BEGIN
      DocumentFilterCde := DocumentFilterCde2;
      EmployerCde := EmployerCde2;
      NotExportedLinesOnly := NotExportedLinesOnly2;
      DoNotExportProjectNo := DoNotExportProjectNo2;
      PeriodFilter := PeriodFilter2;
      DoNotExportCostObject := DoNotExportCostObject2;
      DoNotExportServiceOrder := DoNotExportServiceOrder2;
    END;

    PROCEDURE FillPayRec@12();
    BEGIN
      PayRec.LOCKTABLE;
      PayRec.DELETEALL;
      Lineno := 0;
      ExportDateTime := CURRENTDATETIME;

      // Hours- & Day lines
      WITH PostedHourLine DO BEGIN
        SETCURRENTKEY("Document No.","Employee No.");
        SETFILTER("Document No.",DocumentFilterCde);
        SETRANGE(External,FALSE);
        SETFILTER("Supplying Company", '%1', '');
        SETFILTER("Cost Type", '%1|%2', "Cost Type"::Labor, "Cost Type"::Sundry);
        IF EmployerCde <> '' THEN
          SETRANGE(Employer,EmployerCde);
        IF NotExportedLinesOnly THEN
          SETRANGE(Exported, FALSE);
        IF PeriodFilter <> '' THEN
          SETFILTER("Posting Date",PeriodFilter);
        IF FINDSET(TRUE, FALSE) THEN
          REPEAT
            EmplRec.GET("Employee No.");
            EmplRec.TESTFIELD("Salary No.");
            IF PostedHourLine.Employer = '' THEN
              CLEAR(EmployerRec)
            ELSE
              IF PostedHourLine.Employer <> EmployerRec.Code THEN
                EmployerRec.GET(PostedHourLine.Employer);

            CASE "Component Type" OF
              "Component Type"::Hours:
                BEGIN
                  TestHourLine;
                  IF Monday <> 0 THEN AddHourLine(Monday, 1);
                  IF Tuesday <> 0 THEN AddHourLine(Tuesday, 2);
                  IF Wednesday <> 0 THEN AddHourLine(Wednesday, 3);
                  IF Thursday <> 0 THEN AddHourLine(Thursday, 4);
                  IF Friday <> 0 THEN AddHourLine(Friday, 5);
                  IF Saturday <> 0 THEN AddHourLine(Saturday, 6);
                  IF Sunday <> 0 THEN AddHourLine(Sunday, 7);
                END;
              "Component Type"::Expenses:
                BEGIN
                  TestHourLine;
                  AddHourLine(0, 0);
                END;
              "Component Type"::Days:
                AddDayLine();
            END;
            Status := Status::Export;
            Exported := TRUE;
            "Exported on" := ExportDateTime;
            MODIFY;
          UNTIL NEXT = 0;
      END;

      IF Lineno = 0 THEN BEGIN
        COMMIT;
        ERROR(Text017,DocumentFilterCde);
      END ELSE BEGIN
        // Version line
        WITH PayRec DO BEGIN
          "Line No." := 0;
          Text := '9';
          Text := INSSTR(Text,fill(HumanResourcesSetup."Salary Application Version", 10, '0', '<'), 2);
          Text := INSSTR(Text,fill('NAVISION', 30, ' ', '>'), 12);
          Text := INSSTR(Text,' ', 42);
          Text := INSSTR(Text,fill(ApplicationSystemConstants.ApplicationVersion, 100, ' ', '>'),43);
          INSERT;
        END;
      END;
    END;

    PROCEDURE TestHourLine@8();
    VAR
      ExternalJob@1210190000 : Record 11012387;
    BEGIN
      WITH PostedHourLine DO BEGIN
        TESTFIELD("Wage Component");

        IF Alphanumeric(EmplRec."Salary No.") THEN
          ERROR(
            Text023,
            EmplRec.FIELDCAPTION("Salary No."),EmplRec."Salary No.");

        IF STRLEN(EmplRec."Salary No.") > 5 THEN
          ERROR(
            Text024,
            EmplRec.FIELDCAPTION("Salary No."),EmplRec."Salary No.",5);

        IF (Type = Type::Service) AND (NOT DoNotExportServiceOrder) THEN
          ERROR(
            Text025,
            FIELDCAPTION(Type),Type);

        IF Alphanumeric("Wage Component") THEN
          ERROR(
            Text023,
            FIELDCAPTION("Wage Component"),"Wage Component");

        IF STRLEN("Wage Component") > 6 THEN
          ERROR(
            Text024,
            FIELDCAPTION("Wage Component"),"Wage Component",6);

        //call 32634.sn
        IF DoNotExportProjectNo THEN
          ProjectTxt := ''
        ELSE BEGIN
          ExternalJob.SETFILTER("4PS Job No.", "Project No.");
          //ExternalJob.SETFILTER("4PS Job No.", ProjectTxt); //mc, 22-03-10, call 25067
        //call 32634.en
          IF ExternalJob.FINDFIRST THEN
            ProjectTxt := ExternalJob."External Job No."
          ELSE
            ProjectTxt := FORMAT(DELCHR("Project No.", '<', '0')); //remove leading zeros
        END; //call 32634

        IF STRLEN(ProjectTxt) > HumanResourcesSetup."Length Project (Extern)" THEN
          ERROR(
            Text022,
            FIELDCAPTION("Project No."),ProjectTxt,HumanResourcesSetup."Length Project (Extern)");

        IF Alphanumeric(ProjectTxt) THEN
          ERROR(
            Text023,
            FIELDCAPTION("Project No."), ProjectTxt);

        IF Alphanumeric("Cost Object") THEN
          ERROR(
            Text023,
            FIELDCAPTION("Cost Object"),"Cost Object");

        IF STRLEN("Cost Object") > 6 THEN
          ERROR(
            Text022,
            FIELDCAPTION("Cost Object"),"Cost Object",6);

        IF DoNotExportCostObject THEN
          CostObjectTxt := ''
        ELSE
          CostObjectTxt := PostedHourLine."Cost Object";
      END;
    END;

    PROCEDURE AddHourLine@9(NumberOfHours@11012000 : Decimal;DayInWeek@1100485000 : Integer);
    VAR
      PostingDate@1100485002 : Date;
      PostingDateTxt@1100485001 : Text[30];
      PostAsHourLine@1100485003 : Boolean;
    BEGIN
      Lineno += 1;
      IF (Lineno = 1) OR (HoursExportRec."Document No." <> PostedHourLine."Document No.") THEN
        FillLogBook;

      WageCompRec.GET(PostedHourLine."Wage Component");
      PostAsHourLine :=
        (PostedHourLine."Component Type" = PostedHourLine."Component Type"::Hours) OR
        ((PostedHourLine."Component Type" = PostedHourLine."Component Type"::Expenses) AND
         //(WageCompRec."Only Quantity to Salary" OR (PostedHourLine.Amount = 0))); //**4PS.o
         WageCompRec."Export Quantity i.s.o. Amount"); //**4PS.o

      WITH PayRec DO BEGIN
        INIT;
        "Line No." := Lineno;
        Text := '1';
        IF EmplRec."Company No. SCAB" <> '' THEN
          Text := INSSTR(Text, fill(EmplRec."Company No. SCAB", 5, ' ', '<'), 2)
        ELSE
          Text := INSSTR(Text, fill(HumanResourcesSetup."Receiving Company (SCAB)", 5, ' ', '<'), 2);
        Text := INSSTR(Text, fill(EmplRec."Salary No.", 5, ' ', '<'), 7);
        Text := INSSTR(Text, FORMAT(PostedHourLine.Year), 12);
        Text := INSSTR(Text, fill(FORMAT(WeekNoConvertedToSCAB), 2, '0', '<'), 16);
        IF PostAsHourLine THEN
          Text := INSSTR(Text, fill(FORMAT(PostedHourLine."Wage Component"), 6, ' ', '<'), 18)
        ELSE
          Text := INSSTR(Text, fill('', 6, ' ', '<'), 18);
        Text := INSSTR(Text, 'N', 24);
        CASE PostedHourLine.Type OF
          PostedHourLine.Type::Project:
            BEGIN
              IF (EmployerRec."Period Type" = EmployerRec."Period Type"::"4-Weeks") AND
                (EmplRec."Calculate Wage Costs" = EmplRec."Calculate Wage Costs"::"Fixed Rate")
              THEN
                Text := INSSTR(Text, 'K', 25)
              ELSE
                Text := INSSTR(Text, 'P', 25);
              IF STRLEN(ProjectTxt) > 6 THEN
                Text := INSSTR(Text, fill(COPYSTR(ProjectTxt,1 + STRLEN(ProjectTxt) - 6 ,6), 6, ' ', '<'), 26)
              ELSE
                Text := INSSTR(Text, fill(ProjectTxt, 6, ' ', '<'), 26);
            END;
          PostedHourLine.Type::Indirect,
          PostedHourLine.Type::Plant:
            BEGIN
              Text := INSSTR(Text, ' ', 25);
              Text := INSSTR(Text, fill(' ', 6, ' ', '<'), 26);
            END;
        END;
        IF (PostedHourLine."Component Type" = PostedHourLine."Component Type"::Expenses) AND PostAsHourLine THEN
          NumberOfHours := PostedHourLine.Quantity;
        Text := INSSTR(Text, fill(CostObjectTxt, 6, ' ', '<'), 32);
        Text := INSSTR(Text, fill(FORMAT(ROUND(100*ABS(NumberOfHours),1),0,2), 6, ' ', '<'), 38);
        Text := INSSTR(Text, Sign(NumberOfHours), 44);
        Text := INSSTR(Text, 'E', 45);
        IF NOT PostAsHourLine THEN BEGIN
          QuantDec := PostedHourLine."Amount (LCY)" - PostedHourLine."Precalc. Surcharge Expenses";
          Text := INSSTR(Text, fill(FORMAT(ROUND(100*ABS(QuantDec),1),0,2), 14, ' ', '<'), 46);
          IF QuantDec < 0 THEN
            Text := INSSTR(Text, '-', 60)
          ELSE
            Text := INSSTR(Text, ' ', 60);
          Text := INSSTR(Text, fill(FORMAT(PostedHourLine."Wage Component"), 3, ' ', '<'), 61)
        END ELSE BEGIN
          Text := INSSTR(Text, fill('0', 14, ' ', '<'), 46);
          Text := INSSTR(Text, ' ', 60);
          Text := INSSTR(Text, fill(' ', 3, ' ', '<'), 61);
        END;
        Text := INSSTR(Text, fill(COPYSTR(PostedHourLine.Comment,1,30), 30, ' ', '>'), 64);
        IF DayInWeek = 0 THEN
          PostingDate := PostedHourLine."Posting Date"
        ELSE
          PostingDate := DWY2DATE(DayInWeek, PostedHourLine.Week, PostedHourLine.Year);
        PostingDateTxt := FORMAT(PostingDate, 8, '<Day,2><Month,2><Year4>');
        Text := INSSTR(Text, fill(PostingDateTxt, 8, ' ','<'),94);
        Text := INSSTR(Text, ' ', 102);
        INSERT;
      END;
    END;

    PROCEDURE AddDayLine@1100485001();
    BEGIN
      Lineno += 1;
      IF (Lineno = 1) OR (HoursExportRec."Document No." <> PostedHourLine."Document No.") THEN
        FillLogBook;

      WITH PayRec DO BEGIN
        INIT;

        QuantityTxt := FORMAT(ROUND(ABS(PostedHourLine.Quantity),1));

        "Line No." := Lineno;
        Text := '0';
        IF EmplRec."Company No. SCAB" <> '' THEN
          Text := INSSTR(Text, fill(EmplRec."Company No. SCAB", 5, ' ', '<'), 2)
        ELSE
          Text := INSSTR(Text, fill(HumanResourcesSetup."Receiving Company (SCAB)", 5, ' ', '<'), 2);
        Text := INSSTR(Text, fill(EmplRec."Salary No.", 5, ' ', '<'), 7);
        Text := INSSTR(Text, FORMAT(PostedHourLine.Year), 12);
        Text := INSSTR(Text, fill(FORMAT(WeekNoConvertedToSCAB), 2, '0', '<'), 16);
        Text := INSSTR(Text, fill(FORMAT(PostedHourLine."Wage Component"), 6, ' ', '<'), 18);
        Text := INSSTR(Text, 'N', 24);
        Text := INSSTR(Text, fill(QuantityTxt,2,' ','<'), 25);
        Text := INSSTR(Text, fill(' ', 2, ' ', '<'), 27);
        Text := INSSTR(Text, Sign(PostedHourLine.Quantity), 29);
        Text := INSSTR(Text, fill(' ', 72, ' ', '<'), 30);
        Text := INSSTR(Text, ' ', 102);
        INSERT;
      END;
    END;

    PROCEDURE FillLogBook@33();
    BEGIN
      HoursExportRec.RESET;
      IF HoursExportRec.FIND('+') THEN
        LineNoInt := HoursExportRec."Line No." + 1
      ELSE
        LineNoInt := 1;

      HoursExportRec.INIT;
      HoursExportRec."Line No." := LineNoInt;
      HoursExportRec."Document No." :=  PostedHourLine."Document No.";
      HoursExportRec."User ID" := USERID;
      HoursExportRec.Date := TODAY;
      HoursExportRec.Time := TIME;
      HoursExportRec.INSERT;
    END;

    PROCEDURE Alphanumeric@6(Text@11012001 : Text[250]) @11012000 : Boolean;
    BEGIN
      EXIT(DELCHR(Text,'=',' 0123456789')<>'');
    END;

    PROCEDURE fill@4(String@11012001 : Text[142];TotLength@11012002 : Integer;WithCharacter@11012003 : Text[1];TrueBool@11012004 : Char) @11012000 : Text[142];
    VAR
      Length@11012005 : Integer;
    BEGIN
      Length:=STRLEN(String);
      IF TotLength>Length THEN BEGIN
        CASE TrueBool OF
          '<': String:=PADSTR('',TotLength-Length,WithCharacter)+String;
          '>': String:=String+PADSTR('',TotLength-Length,WithCharacter);
          ELSE ERROR(Text037);
        END;
      END;

      EXIT(String);
    END;

    PROCEDURE Sign@3(Value@11012001 : Decimal) @11012000 : Text[1];
    BEGIN
      IF Value >= 0 THEN
        EXIT(' ')
      ELSE
        EXIT('-');
    END;

    PROCEDURE WeekNoConvertedToSCAB@1100485000() WeekNoSCAB : Integer;
    BEGIN
      WeekNoSCAB := PostedHourLine.Week;

      IF PostedHourLine.Week = 53 THEN
        EXIT;

      IF (PostedHourLine.Employer = '') THEN
        EXIT;

      IF EmployerRec."Period Type" = EmployerRec."Period Type"::"4-Weeks" THEN
        WeekNoSCAB := 4 * ((PostedHourLine.Week + 3) DIV 4);
    END;

    BEGIN
    {
      CC: Dataport 11012337

      4PS - 18-02-08: (call 11048) With 4-weekly salary, SCAB can only import hours on week 4,8,12 etc.
      4PS - 18-02-08: (call 11169) With 4-weekly salary in combination with pre-estimation a 'K' should be on position 25 instead of a 'P'
    }
    END.
  }
}

