OBJECT Codeunit 11229286 Installment Motivation Mgt
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1100525001 : TextConst 'DEU=Noch keine Raten fÅr Ratenmotivierung %1 estellt;ENU=No Installment created for Installment Motivation %1 yet;NLD=Nog geen termijn aangemaakt voor termijnmotivering %1;NOR=Ingen avdrag er opprettet for avdragsmotivasjon %1 enda;SVE=Ingen avbetalning har skapats fîr avbetalningsmotivation %1 Ñn';
      Text002@1100525000 : TextConst 'DEU=Ratenmotivierung %1;ENU=Installment Motivation %1;NLD=Termijnmotivering %1;NOR=Avdragsmotivasjon %1;SVE=Upparbetade mÑngder %1';
      Text004@1100525005 : TextConst 'DEU=Preisverrechnung aufgrund der Formel %1;ENU=Revision Rule based on formula %1;NLD=Risicoregeling op basis van formule %1;NOR=Revisjonsregelen baseres pÜ formel %1;SVE=Revideringsregeln baseras pÜ formeln %1';
      Text005@1100525002 : TextConst 'DEU=Ratenzahlungsmotivationen %1 bis einschl. %2;ENU=Installment Motivation %1 till %2;NLD=Termijnmotiveringen %1 tot en met %2;NOR=Avdragsmotivasjon %1 til %2;SVE=Upparbetade mÑngder %1 till %2';
      Text006@1100525004 : TextConst 'DEU=Stichtag nicht bekannt bei Sonderleistungsvertrag %1;ENU=Reference Date Revision not know for extension contract %1;NLD=Peildatum niet bekend bij MMW contract %1;NOR=Referansedatoen for revisjon er ikke kjent for ETA-kontrakt %1;SVE=Revideringsreferensdatumet Ñr inte kÑnt fîr éTA-kontraktet %1';
      Text007@1100525003 : TextConst 'DEU=Stichtag nicht bekannt beim Projekt;ENU=Reference Date Revision not know for project;NLD=Peildatum niet bekend bij project;NOR=Referansedato for revisjon er ikke kjent for prosjektet;SVE=Revideringsreferensdatumet Ñr inte kÑnt fîr projektet';
      Text008@1100529400 : TextConst 'DEU=FÅr alle Ausschreibungsabschnittszeilen sollten Installment-Motivationszeilen erstellt werden.;ENU=Installment Motivation Lines should be created for all Tender Paragraph Lines.;NLD=Termijnmotiveringregels moeten worden aangemaakt voor alle bestekpostenregels.';

    PROCEDURE CreateInstallmentMotivation@1210190002(InstallmentMotivation@1100525001 : Record 11012471);
    VAR
      TenderParagraphbyPrincipal@1100525000 : Record 11012470;
    BEGIN
      WITH InstallmentMotivation DO BEGIN
        TenderParagraphbyPrincipal.SETRANGE("Project No.","Project No.");
        TenderParagraphbyPrincipal.SETRANGE(Principal,Principal);
        TenderParagraphbyPrincipal.SETFILTER("Contract No.", '%1', '');
        IF TenderParagraphbyPrincipal.FIND('-') THEN BEGIN
          REPEAT
            InitMotivationLine(InstallmentMotivation, TenderParagraphbyPrincipal);
          UNTIL TenderParagraphbyPrincipal.NEXT = 0;
        END;
        CreateInstallmentMotivationLines(InstallmentMotivation, FALSE);
      END;
    END;

    PROCEDURE CreateInstallmentMotivationForExtensionContract@1100485000(InstallmentMotivation@1100525001 : Record 11012471);
    VAR
      TempContractNo@1100485001 : Code[10];
      ContractStateValid@1100485002 : Boolean;
      TenderParagraphbyPrincipal@1100525000 : Record 11012470;
      InstallmentMotivationLine@1100525002 : Record 11012472;
    BEGIN
      WITH InstallmentMotivation DO BEGIN
        TempContractNo := '';
        TenderParagraphbyPrincipal.SETRANGE("Project No.","Project No.");
        TenderParagraphbyPrincipal.SETRANGE(Principal,Principal);
        TenderParagraphbyPrincipal.SETFILTER("Contract No.", '<>%1', '');  //DP01491a
        //DP01485.sn
        //IF "Extension Contract" <> '' THEN
        //  TenderParagraphbyPrincipal.SETRANGE("Contract No.", "Extension Contract")
        //ELSE
        //  TenderParagraphbyPrincipal.SETFILTER("Contract No.", '<>%1', '');
        TenderParagraphbyPrincipal.SETRANGE(Approved, TRUE);  //only mandatory for extension contract
        //DP01485.en
        IF TenderParagraphbyPrincipal.FIND('-') THEN BEGIN
          REPEAT
            IF TempContractNo <> TenderParagraphbyPrincipal."Contract No." THEN BEGIN
              TempContractNo := TenderParagraphbyPrincipal."Contract No.";
              ContractStateValid := CheckContractStatus(TenderParagraphbyPrincipal."Project No.", TenderParagraphbyPrincipal."Contract No.");  //DP00886
            END;
            IF ContractStateValid AND
              (NOT InstallmentMotivationLine.GET("Project No.", Principal, "Production Date",
                TenderParagraphbyPrincipal."Contract No.", '', TenderParagraphbyPrincipal."No."))
            THEN BEGIN
              InitMotivationLine(InstallmentMotivation, TenderParagraphbyPrincipal);
            END;
          UNTIL TenderParagraphbyPrincipal.NEXT = 0;
        END;
        CreateInstallmentMotivationLines(InstallmentMotivation, TRUE);
      END;
    END;

    PROCEDURE CreateInstallmentMotivationLines@1210190001(InstallmentMotivation@1100525000 : Record 11012471;ExtraContract@1210190000 : Boolean);
    VAR
      PrevInstallmentMotivationLine@1210190003 : Record 11012472;
      CurrInstallmentMotivationLine@1210190002 : Record 11012472;
      PrevInstallmentMotivation@1210190001 : Record 11012471;
    BEGIN
      WITH InstallmentMotivation DO BEGIN
        PrevInstallmentMotivation.SETRANGE("Project No.","Project No.");
        PrevInstallmentMotivation.SETRANGE(Principal,Principal);
        //PrevInstallmentMotivation.SETRANGE("Extension Contract","Extension Contract");  //DP01491a
        PrevInstallmentMotivation.SETFILTER("Production Date",'<%1', "Production Date");
        IF  PrevInstallmentMotivation.FINDLAST THEN BEGIN
          PrevInstallmentMotivationLine.SETRANGE("Project No.", PrevInstallmentMotivation."Project No.");
          PrevInstallmentMotivationLine.SETRANGE(Principal, PrevInstallmentMotivation.Principal);
          PrevInstallmentMotivationLine.SETRANGE("Production Date", PrevInstallmentMotivation."Production Date");
          IF ExtraContract THEN BEGIN
            PrevInstallmentMotivationLine.SETFILTER("Extension Contract", '<>%1', '');  //DP01491a
            //DP01485.sn
            //IF "Extension Contract" <> '' THEN
            //  PrevInstallmentMotivationLine.SETRANGE("Extension Contract", "Extension Contract")
            //ELSE
            //  PrevInstallmentMotivationLine.SETFILTER("Extension Contract", '<>%1', '');
            //DP01485.en
          END ELSE BEGIN
            PrevInstallmentMotivationLine.SETFILTER("Extension Contract", '%1', '');
          END;
          IF PrevInstallmentMotivationLine.FINDSET THEN BEGIN
            REPEAT
              CurrInstallmentMotivationLine := PrevInstallmentMotivationLine;
              CurrInstallmentMotivationLine.VALIDATE("Production Date", "Production Date");
              IF NOT CurrInstallmentMotivationLine.FIND THEN BEGIN
                CurrInstallmentMotivationLine."Production Value (LCY)" := 0;
                CurrInstallmentMotivationLine."Production Value (FCY)" := 0;  //DP00886
                CurrInstallmentMotivationLine.VALIDATE(Production, 0);
                CurrInstallmentMotivationLine.INSERT;
              END ELSE BEGIN
                //DP01489.sn
                //InitMotivationLine calculates "Production Cumulative" on flowfield "Previous Production" not including "Production (Adjustment)"
                CurrInstallmentMotivationLine."Production Cumulative" := PrevInstallmentMotivationLine."Production Cumulative";
                CurrInstallmentMotivationLine.MODIFY;
                //DP01489.en
              END;
            UNTIL PrevInstallmentMotivationLine.NEXT = 0;
          END;
        END;
      END;
    END;

    PROCEDURE CreateInstallments@1100525016(InstallmentMotivation@1100525011 : Record 11012471);
    VAR
      ExtensionContract@1100485000 : Record 11012004;
      InstallmentMotivationLine@1100525012 : Record 11012472;
      TempInstallmentLines@1100525000 : TEMPORARY Record 11012018;
      TenderElementVATSpec@1100525001 : Record 11012476;
      lvInstallmentDesc@1100485003 : Text[50];
      TenderElementVATSpecFound@1210190001 : Boolean;
      ratio@1100525002 : Decimal;
      TotProdValueRemaining@1100525003 : Decimal;
      TotInstalled@1100525004 : Decimal;
      TotInstalledCurrVAT@1100525005 : Decimal;
      VatProdPostGrp@1210190000 : Code[10];
      TotProdValue@1100525009 : Decimal;
      InstallmentAmnt@1100525006 : Decimal;
      FixedInstallmentAmount@1100525007 : Decimal;
      ProjectPrincipal@1100525008 : Record 11012005;
      TenderParagraphbyPrincipal@1100525010 : Record 11012470;
      PrevVatProdPostGrp@1100529701 : Code[10];
      PrevVatProdPostGrpInited@1100529700 : Boolean;
    BEGIN
      WITH InstallmentMotivation DO BEGIN
        TESTFIELD(Status, Status::Approved);
        ProjectPrincipal.GET("Project No.",Principal);
        IF ProjectPrincipal."Invoice Installm.Motivation as" = ProjectPrincipal."Invoice Installm.Motivation as"::"Fixed Installment Amounts" THEN BEGIN
          IF ProjectPrincipal."Currency Code" = ''  THEN
            ProjectPrincipal.TESTFIELD("Fixed Installment Amount (LCY)")
          ELSE
            ProjectPrincipal.TESTFIELD("Fixed Installment Amount (FCY)");  //C051938
        END;

        InstallmentMotivationLine.RESET;  //* 25595
        InstallmentMotivationLine.SETRANGE("Project No.","Project No.");
        InstallmentMotivationLine.SETRANGE(Principal,Principal);
        //InstallmentMotivationLine.SETRANGE("Extension Contract","Extension Contract");  //DP01491a
        InstallmentMotivationLine.SETRANGE("Production Date","Production Date");

        //create installments for project principal
        TempInstallmentLines.RESET;
        TempInstallmentLines.DELETEALL;
        IF (ProjectPrincipal."Installm.Motivation Method" <> ProjectPrincipal."Installm.Motivation Method"::" ") THEN BEGIN
          InstallmentMotivationLine.SETRANGE("Extension Contract",'');
          TenderElementVATSpecFound := FALSE;  //*32496
          IF InstallmentMotivationLine.FIND('-') THEN BEGIN
            TenderElementVATSpec.RESET;
            REPEAT
              //store amount to invoice in a temp table per VAT Code
              InstallmentMotivationLine.CALCFIELDS("Prev. Production Value (LCY)","Prev. Production Value (FCY)");  //DP00886
              TenderElementVATSpec.SETRANGE("Project No.", InstallmentMotivationLine."Project No.");
              TenderElementVATSpec.SETRANGE(Principal, InstallmentMotivationLine.Principal);
              TenderElementVATSpec.SETRANGE("Contract No.", InstallmentMotivationLine."Extension Contract");
              TenderElementVATSpec.SETRANGE("Tender Paragraph", InstallmentMotivationLine."Tender Paragraph No.");
              TenderElementVATSpec.SETFILTER(Amount, '<>%1', 0);  //C032479
              IF TenderElementVATSpec.FINDSET THEN BEGIN
                TenderElementVATSpecFound := TRUE;  //*32496
                REPEAT
                  TenderElementVATSpec.CALCFIELDS("Total Amount");
                  //CALL C022249 sn
                  IF TenderElementVATSpec."Total Amount" = 0 THEN BEGIN
                    TenderParagraphbyPrincipal."Project No." := InstallmentMotivationLine."Project No.";
                    TenderParagraphbyPrincipal.Principal := InstallmentMotivationLine.Principal;
                    TenderParagraphbyPrincipal."Contract No." := InstallmentMotivationLine."Extension Contract";
                    TenderParagraphbyPrincipal."No." := InstallmentMotivationLine."Tender Paragraph No.";
                    TenderParagraphbyPrincipal.FIELDERROR("Total Amount (LCY)");
                  END;
                  //CALL C022249 en
                  ratio := TenderElementVATSpec.Amount/TenderElementVATSpec."Total Amount";
                  InstallmentMotivationLine.BufferAmountVAT(TempInstallmentLines,
                    InstallmentMotivationLine."Project No.",
                    InstallmentMotivationLine.Principal,
                    InstallmentMotivationLine."Extension Contract",  //DP01485
                    TenderElementVATSpec."VAT Prod. Posting Group",
                    ratio * (InstallmentMotivationLine."Production Value (LCY)" + InstallmentMotivationLine."Prev. Production Value (LCY)"),
                    ratio * (InstallmentMotivationLine."Production Value (FCY)" + InstallmentMotivationLine."Prev. Production Value (FCY)"));  //DP00886
                UNTIL TenderElementVATSpec.NEXT = 0;
              END ELSE BEGIN
                IF NOT TenderParagraphbyPrincipal.GET(InstallmentMotivationLine."Project No.", InstallmentMotivationLine.Principal, InstallmentMotivationLine."Extension Contract", InstallmentMotivationLine."Tender Paragraph No.") THEN
                  TenderParagraphbyPrincipal."VAT Prod. Posting Group" := '';
                IF TenderParagraphbyPrincipal."VAT Prod. Posting Group" <> '' THEN
                  VatProdPostGrp :=  TenderParagraphbyPrincipal."VAT Prod. Posting Group"
                ELSE
                  VatProdPostGrp :=  ProjectPrincipal."VAT Prod. Posting Group";
                IF NOT TenderElementVATSpecFound THEN BEGIN
                  IF NOT PrevVatProdPostGrpInited THEN BEGIN
                    PrevVatProdPostGrp := VatProdPostGrp;
                    PrevVatProdPostGrpInited := TRUE;
                  END ELSE
                    IF PrevVatProdPostGrp <> VatProdPostGrp THEN
                      TenderElementVATSpecFound := TRUE;
                END;
                InstallmentMotivationLine.BufferAmountVAT(TempInstallmentLines,
                  InstallmentMotivationLine."Project No.",
                  InstallmentMotivationLine.Principal,
                  InstallmentMotivationLine."Extension Contract",  //DP01485
                  VatProdPostGrp,
                  (InstallmentMotivationLine."Production Value (LCY)" + InstallmentMotivationLine."Prev. Production Value (LCY)"),
                  (InstallmentMotivationLine."Production Value (FCY)" + InstallmentMotivationLine."Prev. Production Value (FCY)"));  //DP00886
              END;
            UNTIL InstallmentMotivationLine.NEXT = 0;

            TempInstallmentLines.RESET;
            IF ProjectPrincipal."Invoice Installm.Motivation as" =
               ProjectPrincipal."Invoice Installm.Motivation as"::"Installment per Motivation" THEN BEGIN
              CheckPreviousMotivation("Project No.", Principal, '', "Production Date");  //DP01491a
              IF TempInstallmentLines.FINDSET THEN BEGIN
                IF "Installment Description" <> '' THEN
                  lvInstallmentDesc := "Installment Description"
                ELSE
                  lvInstallmentDesc :=STRSUBSTNO(Text002,"Production Date");
                REPEAT
                  //for each line in the temp table, create a line in the real table
                  IF TenderElementVATSpecFound THEN
                    InstallmentMotivationLine.SETFILTER("VAT Prod. Posting Group Filter", TempInstallmentLines."VAT Prod. Posting Group");
                  //DP00886.sn
                  IF TempInstallmentLines."Currency Code" <> '' THEN BEGIN
                    InstallmentMotivationLine.CALCFIELDS("Tot Installments Project (FCY)");
                    InstallmentAmnt := TempInstallmentLines."Installment Amount" - InstallmentMotivationLine."Tot Installments Project (FCY)";
                  END ELSE BEGIN
                    InstallmentMotivationLine.CALCFIELDS("Tot Installments Project (LCY)");
                    InstallmentAmnt := TempInstallmentLines."Installment Amount (LCY)" - InstallmentMotivationLine."Tot Installments Project (LCY)";
                  END;
                  CreateInstallmentLines("Project No.", Principal, '', "Production Date",
                    InstallmentAmnt, lvInstallmentDesc,
                    TempInstallmentLines."VAT Prod. Posting Group",
                    TempInstallmentLines.Points);
                  //DP00886.en
                UNTIL TempInstallmentLines.NEXT = 0;
              END;
            END ELSE BEGIN
              //determine total production value
              TotProdValue := 0;
              IF TempInstallmentLines.FINDSET THEN BEGIN
                REPEAT
                  IF TempInstallmentLines."Currency Code" <> '' THEN  //DP00886
                    TotProdValue += TempInstallmentLines."Installment Amount"
                  ELSE
                    TotProdValue += TempInstallmentLines."Installment Amount (LCY)";
                UNTIL TempInstallmentLines.NEXT = 0;
              END;
              lvInstallmentDesc := GetInstallmentDescription("Project No.", Principal, '', "Production Date");  //DP00886
              InstallmentMotivationLine.SETRANGE("VAT Prod. Posting Group Filter");
              //DP00886.sn
              InstallmentMotivationLine.CALCFIELDS("Tot Installments Project (LCY)", "Tot Installments Project (FCY)");
              IF ProjectPrincipal."Currency Code" <> '' THEN BEGIN
                FixedInstallmentAmount := ProjectPrincipal."Fixed Installment Amount (FCY)";
                TotInstalled := InstallmentMotivationLine."Tot Installments Project (FCY)";
              END ELSE BEGIN
                FixedInstallmentAmount := ProjectPrincipal."Fixed Installment Amount (LCY)";
                TotInstalled := InstallmentMotivationLine."Tot Installments Project (LCY)";
              END;
              //DP00886.en
              TotProdValueRemaining := TotProdValue - TotInstalled;
              WHILE TotProdValueRemaining >= FixedInstallmentAmount DO BEGIN  //DP00886
                TotProdValueRemaining := TotProdValueRemaining - FixedInstallmentAmount;  //DP00886
                InstallmentMotivationLine.SETRANGE("VAT Prod. Posting Group Filter");
                //DP00886.sn
                InstallmentMotivationLine.CALCFIELDS("Tot Installments Project (LCY)", "Tot Installments Project (FCY)");
                IF InstallmentMotivationLine."Currency Code" <> '' THEN
                  TotInstalled := InstallmentMotivationLine."Tot Installments Project (FCY)"
                ELSE
                  TotInstalled := InstallmentMotivationLine."Tot Installments Project (LCY)";
                //DP00886.en
                IF TempInstallmentLines.FINDSET THEN BEGIN
                  REPEAT
                    //create installments (Make sure that when one installment per VAT Code is being invoiced
                    // it doesn't exceed the Fixed Installment Amount. Say we have 3 VAT Codes, but the TotProdValue is
                    // 1.5 x Fixed Installment Amount, in that case 6 installments will be created. The sum of the first 3
                    //equalS the fixed amount)
                    IF TenderElementVATSpecFound THEN  //*32496
                      InstallmentMotivationLine.SETFILTER("VAT Prod. Posting Group Filter", TempInstallmentLines."VAT Prod. Posting Group");
                    //DP00886.sn
                    InstallmentMotivationLine.CALCFIELDS("Tot Installments Project (LCY)", "Tot Installments Project (FCY)");
                    IF TempInstallmentLines."Currency Code" <> '' THEN BEGIN
                      TotInstalledCurrVAT := InstallmentMotivationLine."Tot Installments Project (FCY)";
                      InstallmentAmnt := TempInstallmentLines."Installment Amount";
                    END ELSE BEGIN
                      TotInstalledCurrVAT := InstallmentMotivationLine."Tot Installments Project (LCY)";
                      InstallmentAmnt := TempInstallmentLines."Installment Amount (LCY)";
                    END;
                    ratio := (InstallmentAmnt - TotInstalledCurrVAT) / (TotProdValue - TotInstalled);
                    CreateInstallmentLines("Project No.", Principal, '', "Production Date",
                      FixedInstallmentAmount * ratio, lvInstallmentDesc,
                      TempInstallmentLines."VAT Prod. Posting Group", 0);
                    //DP00886.en
                  UNTIL TempInstallmentLines.NEXT = 0;
                END;
              END;
            END;
          END;
        END;

        //create installments per extension contract, for that reason go through all extension contracts of this project/principal
        InstallmentMotivationLine.RESET;  //* 25595
        InstallmentMotivationLine.SETRANGE("Project No.","Project No.");
        InstallmentMotivationLine.SETRANGE(Principal,Principal);
        //InstallmentMotivationLine.SETRANGE("Extension Contract","Extension Contract");  //DP01491a
        InstallmentMotivationLine.SETRANGE("Production Date","Production Date");

        ExtensionContract.SETRANGE("Project No.","Project No.");
        ExtensionContract.SETRANGE(Principal,Principal);
        IF ExtensionContract.FINDFIRST THEN BEGIN
          REPEAT
            TempInstallmentLines.RESET;
            TempInstallmentLines.DELETEALL;
            IF (ProjectPrincipal."Installm.Motivation Method" <> ProjectPrincipal."Installm.Motivation Method"::" ") THEN BEGIN
              InstallmentMotivationLine.SETRANGE("Extension Contract",ExtensionContract."Contract No.");
              InstallmentMotivationLine.SETFILTER("Production Cumulative", '<>%1', 0);
              TenderElementVATSpecFound := FALSE;  //*32496
              IF InstallmentMotivationLine.FIND('-') THEN BEGIN
                TenderElementVATSpec.RESET;
                REPEAT
                  //store amount to invoice in a temp table per VAT Code
                  InstallmentMotivationLine.CALCFIELDS("Prev. Production Value (LCY)", "Prev. Production Value (FCY)");  //DP00886
                  TenderElementVATSpec.SETRANGE("Project No.", InstallmentMotivationLine."Project No.");
                  TenderElementVATSpec.SETRANGE(Principal, InstallmentMotivationLine.Principal);
                  TenderElementVATSpec.SETRANGE("Contract No.", InstallmentMotivationLine."Extension Contract");
                  TenderElementVATSpec.SETRANGE("Tender Paragraph", InstallmentMotivationLine."Tender Paragraph No.");
                  TenderElementVATSpec.SETFILTER(Amount, '<>%1', 0);  //C032479
                  IF TenderElementVATSpec.FINDSET THEN BEGIN
                    TenderElementVATSpecFound := TRUE;  //*32496
                    REPEAT
                      TenderElementVATSpec.CALCFIELDS("Total Amount");
                      //CALL C022249 sn
                      IF TenderElementVATSpec."Total Amount" = 0 THEN BEGIN
                        TenderParagraphbyPrincipal."Project No." := InstallmentMotivationLine."Project No.";
                        TenderParagraphbyPrincipal.Principal := InstallmentMotivationLine.Principal;
                        TenderParagraphbyPrincipal."Contract No." := InstallmentMotivationLine."Extension Contract";
                        TenderParagraphbyPrincipal."No." := InstallmentMotivationLine."Tender Paragraph No.";
                        TenderParagraphbyPrincipal.FIELDERROR("Total Amount (LCY)");
                      END;
                      //CALL C022249 en

                      ratio := TenderElementVATSpec.Amount/TenderElementVATSpec."Total Amount";
                      InstallmentMotivationLine.BufferAmountVAT(TempInstallmentLines,
                        InstallmentMotivationLine."Project No.",
                        InstallmentMotivationLine.Principal,
                        InstallmentMotivationLine."Extension Contract",  //DP01485
                        TenderElementVATSpec."VAT Prod. Posting Group",
                        ratio * (InstallmentMotivationLine."Production Value (LCY)" + InstallmentMotivationLine."Prev. Production Value (LCY)"),
                        ratio * (InstallmentMotivationLine."Production Value (FCY)" + InstallmentMotivationLine."Prev. Production Value (FCY)"));   //DP00886
                    UNTIL TenderElementVATSpec.NEXT = 0;
                  END ELSE BEGIN
                    IF NOT TenderParagraphbyPrincipal.GET(InstallmentMotivationLine."Project No.", InstallmentMotivationLine.Principal, InstallmentMotivationLine."Extension Contract", InstallmentMotivationLine."Tender Paragraph No.") THEN
                      TenderParagraphbyPrincipal."VAT Prod. Posting Group" := '';
                    IF TenderParagraphbyPrincipal."VAT Prod. Posting Group" <> '' THEN
                      VatProdPostGrp :=  TenderParagraphbyPrincipal."VAT Prod. Posting Group"
                    ELSE
                      IF ExtensionContract."VAT Prod. Posting Group" <> '' THEN
                        VatProdPostGrp :=  ExtensionContract."VAT Prod. Posting Group"
                      ELSE
                        VatProdPostGrp :=  ProjectPrincipal."VAT Prod. Posting Group";
                    InstallmentMotivationLine.BufferAmountVAT(TempInstallmentLines,
                      InstallmentMotivationLine."Project No.",
                      InstallmentMotivationLine.Principal,
                      InstallmentMotivationLine."Extension Contract",  //DP01485
                      VatProdPostGrp,
                      (InstallmentMotivationLine."Production Value (LCY)" + InstallmentMotivationLine."Prev. Production Value (LCY)"),
                      (InstallmentMotivationLine."Production Value (FCY)" + InstallmentMotivationLine."Prev. Production Value (FCY)"));   //DP00886
                  END;
                UNTIL InstallmentMotivationLine.NEXT = 0;

                TempInstallmentLines.RESET;
                IF ProjectPrincipal."Invoice Installm.Motivation as" =
                   ProjectPrincipal."Invoice Installm.Motivation as"::"Installment per Motivation" THEN BEGIN
                  CheckPreviousMotivation("Project No.", Principal, '', "Production Date");  //DP01491a
                  IF TempInstallmentLines.FINDSET THEN BEGIN
                    IF "Installment Description" <> '' THEN
                      lvInstallmentDesc := "Installment Description"
                    ELSE
                      lvInstallmentDesc :=STRSUBSTNO(Text002,"Production Date");
                    REPEAT
                      //for each line in the temp table, create a line in the real table
                      IF TenderElementVATSpecFound THEN
                        InstallmentMotivationLine.SETFILTER("VAT Prod. Posting Group Filter", TempInstallmentLines."VAT Prod. Posting Group");
                      //DP00886.sn
                      IF TempInstallmentLines."Currency Code" <> '' THEN BEGIN
                        InstallmentMotivationLine.CALCFIELDS("Tot Installments Project (FCY)");
                        InstallmentAmnt := TempInstallmentLines."Installment Amount" - InstallmentMotivationLine."Tot Installments Project (FCY)";
                      END ELSE BEGIN
                        InstallmentMotivationLine.CALCFIELDS("Tot Installments Project (LCY)");
                        InstallmentAmnt := TempInstallmentLines."Installment Amount (LCY)" - InstallmentMotivationLine."Tot Installments Project (LCY)";
                      END;
                      CreateInstallmentLines("Project No.", Principal, ExtensionContract."Contract No.", "Production Date",
                        InstallmentAmnt, lvInstallmentDesc,
                        TempInstallmentLines."VAT Prod. Posting Group",
                        TempInstallmentLines.Points);
                      //DP00886.en
                    UNTIL TempInstallmentLines.NEXT = 0;
                  END;
                END ELSE BEGIN
                  //determine total production value
                  TotProdValue := 0;
                  IF TempInstallmentLines.FINDSET THEN BEGIN
                    REPEAT
                      IF TempInstallmentLines."Currency Code" <> '' THEN  //DP00886
                        TotProdValue += TempInstallmentLines."Installment Amount"
                      ELSE
                        TotProdValue += TempInstallmentLines."Installment Amount (LCY)";
                    UNTIL TempInstallmentLines.NEXT = 0;
                  END;
                  lvInstallmentDesc := GetInstallmentDescription("Project No.", Principal, ExtensionContract."Contract No.", "Production Date");  //DP00886
                  InstallmentMotivationLine.SETRANGE("VAT Prod. Posting Group Filter");
                  //DP00886.sn
                  InstallmentMotivationLine.CALCFIELDS("Tot Installments Project (LCY)", "Tot Installments Project (FCY)");
                  IF ExtensionContract."Contract Currency Code" <> '' THEN BEGIN
                    FixedInstallmentAmount := ExtensionContract."Fixed Installment Amount (FCY)";
                    TotInstalled := InstallmentMotivationLine."Tot Installments Project (FCY)";
                  END ELSE BEGIN
                    FixedInstallmentAmount := ExtensionContract."Fixed Installment Amount (LCY)";
                    TotInstalled := InstallmentMotivationLine."Tot Installments Project (LCY)";
                  END;
                  //DP00886.en
                  TotProdValueRemaining := TotProdValue - TotInstalled;
                  WHILE TotProdValueRemaining >= FixedInstallmentAmount DO BEGIN  //DP00886
                    TotProdValueRemaining := TotProdValueRemaining - FixedInstallmentAmount;  //DP00886
                    InstallmentMotivationLine.SETRANGE("VAT Prod. Posting Group Filter");
                    //DP00886.sn
                    InstallmentMotivationLine.CALCFIELDS("Tot Installments Project (LCY)", "Tot Installments Project (FCY)");
                    IF InstallmentMotivationLine."Currency Code" <> '' THEN
                      TotInstalled := InstallmentMotivationLine."Tot Installments Project (FCY)"
                    ELSE
                      TotInstalled := InstallmentMotivationLine."Tot Installments Project (LCY)";
                    //DP00886.en
                    IF TempInstallmentLines.FINDSET THEN BEGIN
                      REPEAT
                        IF TenderElementVATSpecFound THEN  //*32496
                          InstallmentMotivationLine.SETFILTER("VAT Prod. Posting Group Filter", TempInstallmentLines."VAT Prod. Posting Group");
                        //DP00886.sn
                        InstallmentMotivationLine.CALCFIELDS("Tot Installments Project (LCY)", "Tot Installments Project (FCY)");
                        IF TempInstallmentLines."Currency Code" <> '' THEN BEGIN
                          TotInstalledCurrVAT := InstallmentMotivationLine."Tot Installments Project (FCY)";
                          InstallmentAmnt := TempInstallmentLines."Installment Amount";
                        END ELSE BEGIN
                          TotInstalledCurrVAT := InstallmentMotivationLine."Tot Installments Project (LCY)";
                          InstallmentAmnt := TempInstallmentLines."Installment Amount (LCY)";
                        END;
                        ratio := (InstallmentAmnt - TotInstalledCurrVAT) / (TotProdValue - TotInstalled);
                        CreateInstallmentLines("Project No.", Principal, ExtensionContract."Contract No.", "Production Date",
                          FixedInstallmentAmount * ratio, lvInstallmentDesc,
                          TempInstallmentLines."VAT Prod. Posting Group", 0);
                        //DP00886.en
                      UNTIL TempInstallmentLines.NEXT = 0;
                    END;
                  END;
                END;
              END;
            END;
          UNTIL ExtensionContract.NEXT = 0;
        END;
        SetMotivationHandled("Project No.", Principal, '', "Production Date");  //DP01491a
      END;
    END;

    PROCEDURE CreateInstallmentLines@1100525015(ProjectNo@1100525003 : Code[20];CustomerNo@1100525004 : Code[20];ContractNo@1100525005 : Code[20];ProductionDate@1100525008 : Date;lvAmnt@1210190000 : Decimal;lvDescr@1100485000 : Text[50];lvVATProdPostingGroup@1100525000 : Code[10];lvPoints@1210190001 : Integer);
    VAR
      lvProjInstallmCU@1100485001 : Codeunit 11012007;
      ProjectPrincipal@1100525001 : Record 11012005;
      ProjectInstallment@1100525002 : Record 11012018;
      ExtensionContract@1100525006 : Record 11012004;
      CurrencyCode@1100525007 : Code[10];
    BEGIN
      ProjectPrincipal.GET(ProjectNo, CustomerNo);
      CurrencyCode := ProjectPrincipal."Currency Code";

      IF ContractNo <> '' THEN BEGIN
        ExtensionContract.GET(ProjectNo, ContractNo);
        CurrencyCode := ExtensionContract."Contract Currency Code";
      END;

      ProjectInstallment.INIT;
      ProjectInstallment."Project No." := ProjectNo;
      ProjectInstallment.Principal := CustomerNo;
      ProjectInstallment."Plot No." := '';
      ProjectInstallment."Installment No." := lvProjInstallmCU.GetFreeInstallmentNo(ProjectNo, CustomerNo, '');
      ProjectInstallment.VALIDATE("Cost Object", ProjectPrincipal."Cost Object");
      ProjectInstallment.Description := lvDescr;
      ProjectInstallment."Extension Contract" := ContractNo;
      ProjectInstallment."VAT Prod. Posting Group" := lvVATProdPostingGroup;
      ProjectInstallment."Currency Code" := CurrencyCode;  //DP00886
      ProjectInstallment.VALIDATE("Installment Amount",lvAmnt);  //DP00886
      IF ProjectPrincipal."Installm.Motivation Method" = ProjectPrincipal."Installm.Motivation Method"::Points THEN BEGIN
        ProjectInstallment.Points := lvPoints;
        ProjectInstallment."Points to be invoiced" := ProjectInstallment.Points;
      END;
      ProjectInstallment."Installment Motivation Date" := ProductionDate;
      ProjectInstallment.CheckProjStatus();
      ProjectInstallment.INSERT;
    END;

    PROCEDURE CreateRevision@1100525014(InstallmentMotivation@1100525001 : Record 11012471);
    VAR
      SavedInstallmentMotivationLine@1100485000 : Record 11012472;
      TotalValue@1100485001 : Decimal;
      ProjectPrincipal@1100525000 : Record 11012005;
      InstallmentMotivationLine@1100525002 : Record 11012472;
    BEGIN
      WITH InstallmentMotivation DO BEGIN
        ProjectPrincipal.GET("Project No.", Principal);
        IF (ProjectPrincipal."Installm.Motivation Method" <> ProjectPrincipal."Installm.Motivation Method"::" ") THEN BEGIN
          InstallmentMotivationLine.SETRANGE("Project No.","Project No.");
          InstallmentMotivationLine.SETRANGE(Principal,Principal);
          //InstallmentMotivationLine.SETRANGE("Extension Contract","Extension Contract");  //DP01491a
          InstallmentMotivationLine.SETRANGE("Production Date","Production Date");
          InstallmentMotivationLine.SETRANGE(Revision, TRUE);
          InstallmentMotivationLine.SETFILTER("Revision Rule", '%1', '');
          IF InstallmentMotivationLine.FIND('-') THEN BEGIN
            SavedInstallmentMotivationLine := InstallmentMotivationLine;
            TotalValue := 0;
            REPEAT
              IF SavedInstallmentMotivationLine."Extension Contract" <> InstallmentMotivationLine."Extension Contract" THEN BEGIN
                IF TotalValue <> 0 THEN
                  CreateRevisionLine(InstallmentMotivation, TotalValue, SavedInstallmentMotivationLine);
                TotalValue := 0;
              END;
              SavedInstallmentMotivationLine := InstallmentMotivationLine;
              IF InstallmentMotivationLine."Currency Code" <> '' THEN  //DP00886
                TotalValue := TotalValue + InstallmentMotivationLine."Production Value (FCY)"
              ELSE
                TotalValue := TotalValue + InstallmentMotivationLine."Production Value (LCY)";
            UNTIL InstallmentMotivationLine.NEXT = 0;
            IF TotalValue <> 0 THEN BEGIN
              CreateRevisionLine(InstallmentMotivation, TotalValue, SavedInstallmentMotivationLine);
            END;
          END;
        END;
        "Revision Computed" := TRUE;
        MODIFY;
      END;
    END;

    PROCEDURE CreateRevisionLine@1100525013(InstallmentMotivation@1100525000 : Record 11012471;BaseAmnt@1210190000 : Decimal;InstallmentMotivationLine@1100485000 : Record 11012472);
    VAR
      ExtensionContract@1100485001 : Record 11012004;
      Job@1100485002 : Record 11072003;
      RevisionRule@1100485003 : Record 11012473;
      RevisionValue@1100485005 : Decimal;
      RevisionIndex@1100485004 : Decimal;
      EvaluateRevisionRule@1100485006 : Codeunit 11020206;
      StartDate@1100485007 : Date;
    BEGIN
      WITH InstallmentMotivation DO BEGIN
        InstallmentMotivationLine."Revision Rule" := '';
        IF InstallmentMotivationLine."Extension Contract" <> '' THEN BEGIN
          IF ExtensionContract.GET(InstallmentMotivationLine."Project No.", InstallmentMotivationLine."Extension Contract") THEN
            IF ExtensionContract.Revision THEN
              InstallmentMotivationLine."Revision Rule" := ExtensionContract."Revision Rule";
            StartDate := ExtensionContract."Reference Date Revision";
            IF StartDate = 0D THEN
              ERROR(Text006, InstallmentMotivationLine."Extension Contract");
        END ELSE BEGIN
          IF Job.GET(InstallmentMotivationLine."Project No.") THEN
            IF Job.Revision THEN
              InstallmentMotivationLine."Revision Rule" := Job."Revision Rule";
            StartDate := Job."Reference Date Revision";
            IF StartDate = 0D THEN
              ERROR(Text007);
        END;

        IF InstallmentMotivationLine."Revision Rule" = '' THEN
          EXIT;

        //now calculate the difference based on the revision rule
        IF RevisionRule.GET(InstallmentMotivationLine."Revision Rule") THEN;
        RevisionIndex := EvaluateRevisionRule.EvaluateRule(
          RevisionRule.Formula, StartDate, "End Date Revision", InstallmentMotivationLine."Project No.");
        RevisionValue := (RevisionIndex * BaseAmnt) - BaseAmnt;
        InstallmentMotivationLine.SetCurrencyCode;  //DP00886
        InstallmentMotivationLine."Tender Paragraph No." := '';
        InstallmentMotivationLine.Production := 0;
        InstallmentMotivationLine."Production Cumulative" := 0;
        InstallmentMotivationLine.VALIDATE("Production Value (FCY)", RevisionValue);  //DP00886
        InstallmentMotivationLine.Description := STRSUBSTNO(Text004, InstallmentMotivationLine."Revision Rule");
        InstallmentMotivationLine.GetLineTotal;  //DP00886
        IF NOT InstallmentMotivationLine.INSERT THEN
          InstallmentMotivationLine.MODIFY;
      END;
    END;

    PROCEDURE RemoveRevision@1100525012(InstallmentMotivation@1100525000 : Record 11012471);
    VAR
      InstallmentMotivationLine@1100525001 : Record 11012472;
    BEGIN
      WITH InstallmentMotivation DO BEGIN
        InstallmentMotivationLine.SETRANGE("Project No.","Project No.");
        InstallmentMotivationLine.SETRANGE(Principal,Principal);
        //InstallmentMotivationLine.SETRANGE("Extension Contract","Extension Contract");  //DP01491a
        InstallmentMotivationLine.SETRANGE("Production Date","Production Date");
        InstallmentMotivationLine.SETFILTER("Revision Rule", '<>%1', '');
        IF InstallmentMotivationLine.FIND('-') THEN BEGIN
          REPEAT
            InstallmentMotivationLine.DELETE;
          UNTIL InstallmentMotivationLine.NEXT = 0;
        END;
        "Revision Computed" := FALSE;
        MODIFY;
      END;
    END;

    PROCEDURE CheckContractStatus@1100525001(ProjectNo@1100525001 : Code[20];ContractNo@1100525002 : Code[20]) : Boolean;
    VAR
      ExtensionContract@1100525000 : Record 11012004;
    BEGIN
      ExtensionContract.SETRANGE("Project No.", ProjectNo);
      ExtensionContract.SETRANGE("Contract No.", ContractNo);
      ExtensionContract.SETFILTER(Status, '%1|%2', ExtensionContract.Status::Order, ExtensionContract.Status::"Invoicing Allowed");
      IF ExtensionContract.FINDFIRST THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE CheckPreviousMotivation@1100525011(ProjectNo@1100525002 : Code[20];CustomerNo@1100525001 : Code[20];ContractNo@1100528900 : Code[20];ProductionDate@1100525003 : Date);
    VAR
      InstallmentMotivation@1100525000 : Record 11012471;
    BEGIN
      InstallmentMotivation.SETRANGE("Project No.",ProjectNo);
      InstallmentMotivation.SETRANGE(Principal, CustomerNo);
      //InstallmentMotivation.SETRANGE("Extension Contract",ContractNo);  //DP01491a
      InstallmentMotivation.SETFILTER("Production Date",'<%1',ProductionDate);
      InstallmentMotivation.SETRANGE("Installments Created",FALSE);
      InstallmentMotivation.SETFILTER(Status,'<>%1',InstallmentMotivation.Status::Expired);
      IF InstallmentMotivation.FIND('-') THEN
        ERROR(STRSUBSTNO(Text001,InstallmentMotivation."Production Date"))
    END;

    PROCEDURE GetInstallmentDescription@1100485006(ProjectNo@1100525001 : Code[20];CustomerNo@1100525002 : Code[20];ContractNo@1100525003 : Code[20];ProductionDate@1100525009 : Date) InstallmentDesc : Text[50];
    VAR
      StartDate@1100485007 : Date;
      EndDate@1100485006 : Date;
      CumulativeProduction@1100485005 : Decimal;
      ProjectPrincipal@1100525000 : Record 11012005;
      ExtensionContract@1100525006 : Record 11012004;
      InstallmentMotivation@1100525004 : Record 11012471;
      InstallmentMotivationLine@1100525005 : Record 11012472;
      CurrencyCode@1100525007 : Code[20];
      FixedInstallmentAmount@1100525008 : Decimal;
    BEGIN
      //DP00886: function redesigned
      InstallmentMotivation.SETRANGE("Project No.",ProjectNo);
      InstallmentMotivation.SETRANGE(Principal,CustomerNo);
      //InstallmentMotivation.SETRANGE("Extension Contract",ContractNo);  //DP01491a
      InstallmentMotivation.SETFILTER("Production Date",'<=%1',ProductionDate);
      InstallmentMotivation.SETRANGE("Installments Created",FALSE);
      IF NOT InstallmentMotivation.FIND('-') THEN
        EXIT('');

      InstallmentMotivationLine.SETRANGE("Project No.",InstallmentMotivation."Project No.");
      InstallmentMotivationLine.SETRANGE(Principal,InstallmentMotivation.Principal);
      InstallmentMotivationLine.SETRANGE("Production Date",InstallmentMotivation."Production Date");
      IF ContractNo = '' THEN BEGIN
        InstallmentMotivationLine.SETFILTER("Extension Contract", '%1', '');
        ProjectPrincipal.GET(ProjectNo, CustomerNo);
        CurrencyCode := ProjectPrincipal."Currency Code";
        IF CurrencyCode <> '' THEN
          FixedInstallmentAmount := ProjectPrincipal."Fixed Installment Amount (FCY)"
        ELSE
          FixedInstallmentAmount := ProjectPrincipal."Fixed Installment Amount (LCY)";
      END ELSE BEGIN
        InstallmentMotivationLine.SETRANGE("Extension Contract", ContractNo);
        ExtensionContract.GET(ProjectNo, ContractNo);
        CurrencyCode := ExtensionContract."Contract Currency Code";
        IF CurrencyCode <> '' THEN
          FixedInstallmentAmount := ExtensionContract."Fixed Installment Amount (FCY)"
        ELSE
          FixedInstallmentAmount := ExtensionContract."Fixed Installment Amount (LCY)";
      END;
      IF InstallmentMotivationLine.FIND('-') THEN BEGIN
        StartDate := InstallmentMotivation."Production Date";
        REPEAT
          EndDate := InstallmentMotivation."Production Date";
          InstallmentMotivationLine.SETRANGE("Production Date",InstallmentMotivation."Production Date");
          IF InstallmentMotivationLine.FIND('-') THEN BEGIN
            IF CurrencyCode <> '' THEN BEGIN
              InstallmentMotivationLine.CALCFIELDS("Total Production Value (FCY)", "Prev. Total Prod Value (FCY)", "Tot Installments Project (FCY)");
              CumulativeProduction :=
                InstallmentMotivationLine."Total Production Value (FCY)" +
                InstallmentMotivationLine."Prev. Total Prod Value (FCY)" -
                InstallmentMotivationLine."Tot Installments Project (FCY)";
            END ELSE BEGIN
              InstallmentMotivationLine.CALCFIELDS("Total Production Value (LCY)", "Prev. Total Prod Value (LCY)", "Tot Installments Project (LCY)");
              CumulativeProduction :=
                InstallmentMotivationLine."Total Production Value (LCY)" +
                InstallmentMotivationLine."Prev. Total Prod Value (LCY)" -
                InstallmentMotivationLine."Tot Installments Project (LCY)";
            END;
          END;
        UNTIL (CumulativeProduction >= FixedInstallmentAmount) OR (InstallmentMotivation.NEXT = 0);
      END;

      IF StartDate = EndDate THEN
        InstallmentDesc := STRSUBSTNO(Text002, EndDate)
      ELSE
        InstallmentDesc := STRSUBSTNO(Text005, StartDate, EndDate);

      EXIT(InstallmentDesc);
    END;

    PROCEDURE SetMotivationHandled@1100525010(ProjectNo@1100525003 : Code[20];CustomerNo@1100525002 : Code[20];ContractNo@1100528900 : Code[20];ProductionDate@1100525001 : Date);
    VAR
      InstallmentMotivation@1100525000 : Record 11012471;
    BEGIN
      InstallmentMotivation.SETRANGE("Project No.",ProjectNo);
      InstallmentMotivation.SETRANGE(Principal,CustomerNo);
      //InstallmentMotivation.SETRANGE("Extension Contract",ContractNo);  //DP01491a
      InstallmentMotivation.SETFILTER("Production Date",'<=%1',ProductionDate);
      InstallmentMotivation.SETRANGE("Installments Created",FALSE);
      InstallmentMotivation.SETFILTER(Status,'<>%1',InstallmentMotivation.Status::Expired);
      IF InstallmentMotivation.FIND('-') THEN
        REPEAT
          InstallmentMotivation."Installments Created" := TRUE;
          InstallmentMotivation."Installments Created on" := TODAY;
          InstallmentMotivation.MODIFY;
        UNTIL InstallmentMotivation.NEXT = 0;
    END;

    PROCEDURE InitMotivationLine@1100525002(InstallmentMotivation@1100525002 : Record 11012471;TenderParagraphbyPrincipal@1100525000 : Record 11012470);
    VAR
      InstallmentMotivationLine@1100525001 : Record 11012472;
    BEGIN
      WITH InstallmentMotivation DO BEGIN
        InstallmentMotivationLine.INIT;
        InstallmentMotivationLine."Project No." := "Project No.";
        InstallmentMotivationLine.Principal := Principal;
        InstallmentMotivationLine.VALIDATE("Production Date","Production Date");
        InstallmentMotivationLine."Revision Rule" := '';
        InstallmentMotivationLine."Currency Code" :=  TenderParagraphbyPrincipal."Currency Code";  //DP00886
        InstallmentMotivationLine."Extension Contract" := TenderParagraphbyPrincipal."Contract No.";  //DP01491a
        InstallmentMotivationLine."Tender Paragraph No." := TenderParagraphbyPrincipal."No.";
        InstallmentMotivationLine."Settlement Type" := TenderParagraphbyPrincipal."Settlement Type";
        InstallmentMotivationLine.Description :=  TenderParagraphbyPrincipal.Description;
        InstallmentMotivationLine.VALIDATE(Production);
        InstallmentMotivationLine.GetLineTotal;  //DP00886
        InstallmentMotivationLine.INSERT;
      END;
    END;

    PROCEDURE FillInstallmentMotivationFromProjectPlanningActivity@1100529400(InstallmentMotivation@1100529400 : Record 11012471);
    VAR
      TenderParagraphByPrincipal@1100529402 : Record 11012470;
      InstallmentMotivationLine@1100529401 : Record 11012472;
      TenderParagPlanActivity@1100529403 : Record 11229303;
      ProjectPlanningActivity@1100529404 : Record 11012431;
      Percentage@1100529405 : Decimal;
    BEGIN
      //**4PS.sn BI045 KD 11-08-16
      InstallmentMotivation.TESTFIELD("Production Date");

      TenderParagraphByPrincipal.SETRANGE("Project No.",InstallmentMotivation."Project No.");
      TenderParagraphByPrincipal.SETRANGE(Principal,InstallmentMotivation.Principal);
      //TenderParagraphByPrincipal.SETRANGE("Contract No.",InstallmentMotivation."Extension Contract");  //DP01491a
      IF TenderParagraphByPrincipal.ISEMPTY THEN
        EXIT;

      InstallmentMotivationLine.SETRANGE("Project No.",InstallmentMotivation."Project No.");
      InstallmentMotivationLine.SETRANGE(Principal,InstallmentMotivation.Principal);
      InstallmentMotivationLine.SETRANGE("Production Date",InstallmentMotivation."Production Date");

      TenderParagPlanActivity.SETRANGE("Project No.",InstallmentMotivation."Project No.");
      TenderParagPlanActivity.SETRANGE(Principal,InstallmentMotivation.Principal);

      TenderParagraphByPrincipal.FINDSET;
      REPEAT
        Percentage := 0;
        InstallmentMotivationLine.SETRANGE("Extension Contract",TenderParagraphByPrincipal."Contract No.");
        InstallmentMotivationLine.SETRANGE("Revision Rule",'');
        InstallmentMotivationLine.SETRANGE("Tender Paragraph No.",TenderParagraphByPrincipal."No.");
        IF NOT InstallmentMotivationLine.FINDFIRST THEN BEGIN
          IF TenderParagraphByPrincipal."Contract No." = '' THEN
            ERROR(Text008);

        END ELSE BEGIN
          TenderParagPlanActivity.SETRANGE("Contract No.",TenderParagraphByPrincipal."Contract No.");
          TenderParagPlanActivity.SETRANGE("No.",TenderParagraphByPrincipal."No.");
          IF TenderParagPlanActivity.FINDSET THEN
            REPEAT
              IF ProjectPlanningActivity.GET(TenderParagPlanActivity."Project Planning Activity No.") THEN
                Percentage += ProjectPlanningActivity."Completed Perc." * TenderParagPlanActivity.Percentage / 100;
            UNTIL TenderParagPlanActivity.NEXT = 0;

          InstallmentMotivationLine.VALIDATE("Production Cumulative", ROUND(Percentage,0.01));
          InstallmentMotivationLine.MODIFY;
        END;

      UNTIL TenderParagraphByPrincipal.NEXT = 0;
      //**4PS.en BI045 KD 11-08-16
    END;

    BEGIN
    {
      4PS 11-08-16 UKR-C25269 KD: Fill forecast & progress with planning activities (BI045) - Added trigger FillInstallmentMotivationFromProjectPlanningActivity
    }
    END.
  }
}

