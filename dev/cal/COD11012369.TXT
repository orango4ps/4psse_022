OBJECT Codeunit 11012369 Sales Report Text Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00,4PSSE;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      SalesReportTextValue@1100525002 : Record 11071911;
      RelatedRecRef@1100285000 : RecordRef;

    PROCEDURE CreateTextLinesForProFormaInvoiceOrCrMemo@1100525011(SalesHeader@1100525000 : Record 36;VAR TempSalesReportTextLine@1100525006 : Record 11071912);
    VAR
      StdSalesReportTextLine@1100525001 : Record 11071890;
      SalesLine@1100525003 : Record 37;
      TempSalesHeader@1100525005 : TEMPORARY Record 36;
      TempSalesLine@1100525004 : TEMPORARY Record 37;
      TempRecRef@1100525002 : RecordRef;
      CurrencyCode@1100525007 : Code[10];
      LanguageCode@1100525008 : Code[10];
      LastLineNo@1100528400 : Integer;
      lvTempSalesReportTextCondition@1100409000 : TEMPORARY Record 11071891;
      lvSalesReportTextCondition@1100409001 : Record 11071891;
    BEGIN
      CurrencyCode := DetermineCurrencyCode(SalesHeader."Currency Code");
      LanguageCode := SalesHeader."Language Code";

      SalesLine.SETRANGE("Document Type", SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.", SalesHeader."No.");

      StdSalesReportTextLine.SETRANGE("Document Type", SalesHeader."Document Type");
      StdSalesReportTextLine.SETRANGE("Language Code", GetTextLineLanguageCodeFilter(
        SalesHeader."Document Type", SalesHeader."Language Code"));
      StdSalesReportTextLine.SETFILTER("Text Line Type", ComposeTextLineTypeFilterForSalesHeader);

      //>> 160205 ITERO.AC IME444 Read Sales Report Text Conditions from the database once, and Edit/Reuse the result in a temporary Record variable
      lvSalesReportTextCondition.SETRANGE("Document Type", SalesHeader."Document Type");
      lvSalesReportTextCondition.SETRANGE("Language Code", GetTextLineLanguageCodeFilter(SalesHeader."Document Type", SalesHeader."Language Code"));
      IF lvSalesReportTextCondition.FINDSET(FALSE) THEN BEGIN
        REPEAT
          lvTempSalesReportTextCondition.INIT;
          lvTempSalesReportTextCondition.TRANSFERFIELDS(lvSalesReportTextCondition);
          lvTempSalesReportTextCondition."Invoice Layout Code" := SalesHeader."Invoice Layout Code";
          lvTempSalesReportTextCondition.INSERT;
        UNTIL lvSalesReportTextCondition.NEXT = 0;
      END;
      //<< 160205 ITERO.AC IME444

      IF StdSalesReportTextLine.FINDSET(FALSE) THEN BEGIN // 160205 ITERO.AC IME444 FINDSET --> FINDSET(FALSE)
        TempSalesHeader := SalesHeader;
        TempRecRef.GETTABLE(TempSalesHeader);
        REPEAT
          //>> 160205 ITERO.AC IME444 Changed function call and Get Sales Report Text Conditions as a local variable and pass as VAR parameter to CreateText()
          //CreateText(
          //  StdSalesReportTextLine, TempRecRef, TempSalesReportTextLine, CurrencyCode, LanguageCode, LastLineNo);
          lvTempSalesReportTextCondition.SETRANGE("Document Type", StdSalesReportTextLine."Document Type");
          lvTempSalesReportTextCondition.SETRANGE("Text Line Type", StdSalesReportTextLine."Text Line Type");
          lvTempSalesReportTextCondition.SETRANGE("Language Code", StdSalesReportTextLine."Language Code");
          lvTempSalesReportTextCondition.SETRANGE("Text Line No.", StdSalesReportTextLine."Line No.");
          CreateText(
            StdSalesReportTextLine, TempRecRef, TempSalesReportTextLine, CurrencyCode, LanguageCode, LastLineNo, lvTempSalesReportTextCondition);
          //<< 160205 ITERO.AC IME444
        UNTIL StdSalesReportTextLine.NEXT = 0;
      END;

      StdSalesReportTextLine.SETFILTER("Text Line Type", ComposeTextLineTypeFilterForSalesLine);
      IF StdSalesReportTextLine.FINDSET THEN
        REPEAT
          //>> 160205 ITERO.AC IME444  Use Sales Report Text Conditions here as a local variable and pass as VAR parameter to CreateText()
          lvTempSalesReportTextCondition.SETRANGE("Document Type", StdSalesReportTextLine."Document Type");
          lvTempSalesReportTextCondition.SETRANGE("Text Line Type", StdSalesReportTextLine."Text Line Type");
          lvTempSalesReportTextCondition.SETRANGE("Language Code", StdSalesReportTextLine."Language Code");
          lvTempSalesReportTextCondition.SETRANGE("Text Line No.", StdSalesReportTextLine."Line No.");
          //<< 160205 ITERO.AC IME444

          IF SalesLine.FINDSET(FALSE) THEN // 160205 ITERO.AC IME444 FINDSET --> FINDSET(FALSE)
            REPEAT
              TempSalesLine := SalesLine;
              TempRecRef.GETTABLE(TempSalesLine);
              //>> 160205 ITERO.AC IME444
              //CreateText(
              //  StdSalesReportTextLine, TempRecRef, TempSalesReportTextLine, CurrencyCode, LanguageCode, LastLineNo);
              CreateText(
                StdSalesReportTextLine, TempRecRef, TempSalesReportTextLine, CurrencyCode, LanguageCode, LastLineNo, lvTempSalesReportTextCondition);
              //<< 160205 ITERO.AC IME444
            UNTIL SalesLine.NEXT = 0;
        UNTIL StdSalesReportTextLine.NEXT = 0;
    END;

    PROCEDURE CreateTextLinesForPostedInvoice@1100525001(SalesInvoiceHeader@1100525000 : Record 112);
    VAR
      StdSalesReportTextLine@1100525001 : Record 11071890;
      SalesInvoiceLine@1100525003 : Record 113;
      SalesReportTextLine@1100525006 : Record 11071912;
      TempSalesInvoiceHeader@1100525005 : TEMPORARY Record 112;
      TempSalesInvoiceLine@1100525004 : TEMPORARY Record 113;
      TempRecRef@1100525002 : RecordRef;
      CurrencyCode@1100525007 : Code[10];
      LanguageCode@1100525008 : Code[10];
      LastLineNo@1100528400 : Integer;
      lvTempSalesReportTextCondition@1100409001 : TEMPORARY Record 11071891;
      lvSalesReportTextCondition@1100409000 : Record 11071891;
    BEGIN
      CurrencyCode := DetermineCurrencyCode(SalesInvoiceHeader."Currency Code");
      LanguageCode := SalesInvoiceHeader."Language Code";

      SalesInvoiceLine.SETRANGE("Document No.", SalesInvoiceHeader."No.");

      StdSalesReportTextLine.SETRANGE("Document Type", StdSalesReportTextLine."Document Type"::"Posted Invoice");
      StdSalesReportTextLine.SETRANGE("Language Code", GetTextLineLanguageCodeFilter(
        StdSalesReportTextLine."Document Type"::"Posted Invoice", SalesInvoiceHeader."Language Code"));
      StdSalesReportTextLine.SETFILTER("Text Line Type", ComposeTextLineTypeFilterForSalesHeader);

      //>> 160205 ITERO.AC IME444 Read Sales Report Text Conditions from the database once, and Edit/Reuse the result in a temporary Record variable
      lvSalesReportTextCondition.SETRANGE("Document Type", StdSalesReportTextLine."Document Type"::"Posted Invoice");
      lvSalesReportTextCondition.SETRANGE("Language Code", GetTextLineLanguageCodeFilter(StdSalesReportTextLine."Document Type"::"Posted Invoice", SalesInvoiceHeader."Language Code"));
      IF lvSalesReportTextCondition.FINDSET(FALSE) THEN BEGIN
        REPEAT
          lvTempSalesReportTextCondition.INIT;
          lvTempSalesReportTextCondition.TRANSFERFIELDS(lvSalesReportTextCondition);
          lvTempSalesReportTextCondition."Invoice Layout Code" := SalesInvoiceHeader."Invoice Layout Code";
          lvTempSalesReportTextCondition.INSERT;
        UNTIL lvSalesReportTextCondition.NEXT = 0;
      END;
      //<< 160205 ITERO.AC IME444

      IF StdSalesReportTextLine.FINDSET(FALSE) THEN BEGIN  // 160205 ITERO.AC IME444 FINDSET --> FINDSET(FALSE)
        TempSalesInvoiceHeader := SalesInvoiceHeader;
        TempRecRef.GETTABLE(TempSalesInvoiceHeader);
        REPEAT
          //>> 160205 ITERO.AC IME444  Use Sales Report Text Conditions here as a local variable and pass as VAR parameter to CreateText()
          lvTempSalesReportTextCondition.SETRANGE("Document Type", StdSalesReportTextLine."Document Type");
          lvTempSalesReportTextCondition.SETRANGE("Text Line Type", StdSalesReportTextLine."Text Line Type");
          lvTempSalesReportTextCondition.SETRANGE("Language Code", StdSalesReportTextLine."Language Code");
          lvTempSalesReportTextCondition.SETRANGE("Text Line No.", StdSalesReportTextLine."Line No.");
          //CreateText(
          //  StdSalesReportTextLine, TempRecRef, SalesReportTextLine, CurrencyCode, LanguageCode, LastLineNo);
          CreateText(
            StdSalesReportTextLine, TempRecRef, SalesReportTextLine, CurrencyCode, LanguageCode, LastLineNo, lvTempSalesReportTextCondition);
          //<< 160205 ITERO.AC IME444
        UNTIL StdSalesReportTextLine.NEXT = 0;
      END;

      StdSalesReportTextLine.SETFILTER("Text Line Type", ComposeTextLineTypeFilterForSalesLine);
      IF StdSalesReportTextLine.FINDSET THEN
        REPEAT
          //>> 160205 ITERO.AC IME444  Use Sales Report Text Conditions here as a temporary local variable and pass as VAR parameter to CreateText()
          lvTempSalesReportTextCondition.SETRANGE("Document Type", StdSalesReportTextLine."Document Type");
          lvTempSalesReportTextCondition.SETRANGE("Text Line Type", StdSalesReportTextLine."Text Line Type");
          lvTempSalesReportTextCondition.SETRANGE("Language Code", StdSalesReportTextLine."Language Code");
          lvTempSalesReportTextCondition.SETRANGE("Text Line No.", StdSalesReportTextLine."Line No.");
          //<< 160205 ITERO.AC IME444
          IF SalesInvoiceLine.FINDSET THEN
            REPEAT
              TempSalesInvoiceLine := SalesInvoiceLine;
              TempRecRef.GETTABLE(TempSalesInvoiceLine);
              //>> 160205 ITERO.AC IME444
              //CreateText(
              //  StdSalesReportTextLine, TempRecRef, SalesReportTextLine, CurrencyCode, LanguageCode, LastLineNo);
              CreateText(
                StdSalesReportTextLine, TempRecRef, SalesReportTextLine, CurrencyCode, LanguageCode, LastLineNo, lvTempSalesReportTextCondition);
              //<< 160205 ITERO.AC IME444
            UNTIL SalesInvoiceLine.NEXT = 0;
        UNTIL StdSalesReportTextLine.NEXT = 0;
    END;

    PROCEDURE CreateTextLinesForPostedCrMemo@1100525003(SalesCrMemoHeader@1100525000 : Record 114);
    VAR
      StdSalesReportTextLine@1100525001 : Record 11071890;
      SalesCrMemoLine@1100525003 : Record 115;
      SalesReportTextLine@1100525006 : Record 11071912;
      TempSalesCrMemoHeader@1100525005 : TEMPORARY Record 114;
      TempSalesCrMemoLine@1100525004 : TEMPORARY Record 115;
      TempRecRef@1100525002 : RecordRef;
      CurrencyCode@1100525007 : Code[10];
      LanguageCode@1100525008 : Code[10];
      LastLineNo@1100528400 : Integer;
      lvTempSalesReportTextCondition@1100409001 : TEMPORARY Record 11071891;
      lvSalesReportTextCondition@1100409000 : Record 11071891;
    BEGIN
      CurrencyCode := DetermineCurrencyCode(SalesCrMemoHeader."Currency Code");
      LanguageCode := SalesCrMemoHeader."Language Code";

      SalesCrMemoLine.SETRANGE("Document No.", SalesCrMemoHeader."No.");

      StdSalesReportTextLine.SETRANGE("Document Type", StdSalesReportTextLine."Document Type"::"Posted Credit Memo");
      StdSalesReportTextLine.SETRANGE("Language Code", GetTextLineLanguageCodeFilter(
        StdSalesReportTextLine."Document Type"::"Posted Credit Memo", SalesCrMemoHeader."Language Code"));
      StdSalesReportTextLine.SETFILTER("Text Line Type", ComposeTextLineTypeFilterForSalesHeader);

      //>> 160205 ITERO.AC IME444 Read Sales Report Text Conditions from the database once, and Edit/Reuse the result in a temporary Record variable
      lvSalesReportTextCondition.SETRANGE("Document Type", StdSalesReportTextLine."Document Type"::"Posted Credit Memo");
      lvSalesReportTextCondition.SETRANGE("Language Code", GetTextLineLanguageCodeFilter(StdSalesReportTextLine."Document Type"::"Posted Credit Memo", SalesCrMemoHeader."Language Code"));
      IF lvSalesReportTextCondition.FINDSET(FALSE) THEN BEGIN
        REPEAT
          lvTempSalesReportTextCondition.INIT;
          lvTempSalesReportTextCondition.TRANSFERFIELDS(lvSalesReportTextCondition);
          lvTempSalesReportTextCondition."Invoice Layout Code" := SalesCrMemoHeader."Invoice Layout Code";
          lvTempSalesReportTextCondition.INSERT;
        UNTIL lvSalesReportTextCondition.NEXT = 0;
      END;
      //<< 160205 ITERO.AC IME444

      IF StdSalesReportTextLine.FINDSET(FALSE) THEN BEGIN  // 160205 ITERO.AC IME444 FINDSET --> FINDSET(FALSE)
        TempSalesCrMemoHeader := SalesCrMemoHeader;
        TempRecRef.GETTABLE(TempSalesCrMemoHeader);
        REPEAT
          //>> 160205 ITERO.AC IME444  Use Sales Report Text Conditions here as a local variable and pass as VAR parameter to CreateText()
          lvTempSalesReportTextCondition.SETRANGE("Document Type", StdSalesReportTextLine."Document Type");
          lvTempSalesReportTextCondition.SETRANGE("Text Line Type", StdSalesReportTextLine."Text Line Type");
          lvTempSalesReportTextCondition.SETRANGE("Language Code", StdSalesReportTextLine."Language Code");
          lvTempSalesReportTextCondition.SETRANGE("Text Line No.", StdSalesReportTextLine."Line No.");
          //CreateText(
          //  StdSalesReportTextLine, TempRecRef, SalesReportTextLine, CurrencyCode, LanguageCode, LastLineNo);
          CreateText(
            StdSalesReportTextLine, TempRecRef, SalesReportTextLine, CurrencyCode, LanguageCode, LastLineNo, lvTempSalesReportTextCondition);
          //<< 160205 ITERO.AC IME444
        UNTIL StdSalesReportTextLine.NEXT = 0;
      END;

      StdSalesReportTextLine.SETFILTER("Text Line Type", ComposeTextLineTypeFilterForSalesLine);
      IF StdSalesReportTextLine.FINDSET THEN
        REPEAT
          //>> 160205 ITERO.AC IME444  Get Sales Report Text Conditions here as a local variable and pass as VAR parameter to CreateText()
          lvTempSalesReportTextCondition.SETRANGE("Document Type", StdSalesReportTextLine."Document Type");
          lvTempSalesReportTextCondition.SETRANGE("Text Line Type", StdSalesReportTextLine."Text Line Type");
          lvTempSalesReportTextCondition.SETRANGE("Language Code", StdSalesReportTextLine."Language Code");
          lvTempSalesReportTextCondition.SETRANGE("Text Line No.", StdSalesReportTextLine."Line No.");
          //<< 160205 ITERO.AC IME444
          IF SalesCrMemoLine.FINDSET THEN
            REPEAT
              TempSalesCrMemoLine := SalesCrMemoLine;
              TempRecRef.GETTABLE(TempSalesCrMemoLine);
              //>> 160205 ITERO.AC IME444
              //CreateText(
              //  StdSalesReportTextLine, TempRecRef, SalesReportTextLine, CurrencyCode, LanguageCode, LastLineNo);
              CreateText(
                StdSalesReportTextLine, TempRecRef, SalesReportTextLine, CurrencyCode, LanguageCode, LastLineNo, lvTempSalesReportTextCondition);
              //<< 160205 ITERO.AC IME444
            UNTIL SalesCrMemoLine.NEXT = 0;
        UNTIL StdSalesReportTextLine.NEXT = 0;
    END;

    LOCAL PROCEDURE ComposeTextLineTypeFilterForSalesHeader@1100525000() : Text;
    VAR
      StdSalesReportTextLine@1100525000 : Record 11071890;
    BEGIN
      EXIT(STRSUBSTNO(
        '%1|%2', StdSalesReportTextLine."Text Line Type"::Header, StdSalesReportTextLine."Text Line Type"::Footer));
    END;

    LOCAL PROCEDURE ComposeTextLineTypeFilterForSalesLine@1100525016() : Text;
    VAR
      StdSalesReportTextLine@1100525000 : Record 11071890;
    BEGIN
      EXIT(STRSUBSTNO(
        '%1|%2|%3', StdSalesReportTextLine."Text Line Type"::"Before Detail",
        StdSalesReportTextLine."Text Line Type"::Detail, StdSalesReportTextLine."Text Line Type"::"After Detail"));
    END;

    LOCAL PROCEDURE CreateText@1100525002(StdSalesReportTextLine@1100525001 : Record 11071890;TempRecRef@1100525000 : RecordRef;VAR SalesReportTextLine@1100525002 : Record 11071912;CurrencyCode@1100525003 : Code[10];LanguageCode@1100525004 : Code[10];VAR LastLineNo@1100528400 : Integer;VAR pSalesReportTextCondition@1100409000 : Record 11071891);
    VAR
      NoOfLinesForStdLine@1100528401 : Integer;
      SequenceNo@1100528402 : Integer;
    BEGIN
      NoOfLinesForStdLine := DetermineNoOfLinesForStdLine(StdSalesReportTextLine, TempRecRef);
      FOR SequenceNo := 1 TO NoOfLinesForStdLine DO
        //IF SalesRecordIsWithinConditionFilters(StdSalesReportTextLine, TempRecRef, SequenceNo) THEN
        IF SalesRecordIsWithinConditionFilters(StdSalesReportTextLine, TempRecRef, SequenceNo, pSalesReportTextCondition) THEN
          CreateTextLine(
            StdSalesReportTextLine, TempRecRef, SalesReportTextLine, CurrencyCode, LanguageCode, LastLineNo, SequenceNo);
    END;

    LOCAL PROCEDURE CreateTextLine@1100528400(StdSalesReportTextLine@1100525001 : Record 11071890;TempRecRef@1100525000 : RecordRef;VAR SalesReportTextLine@1100525002 : Record 11071912;CurrencyCode@1100525003 : Code[10];LanguageCode@1100525004 : Code[10];VAR LastLineNo@1100528400 : Integer;SequenceNo@1100528401 : Integer);
    BEGIN
      SalesReportTextLine.INIT;
      SalesReportTextLine."Document Type" := StdSalesReportTextLine."Document Type";
      SalesReportTextLine."Document No." := TempRecRef.FIELD(3).VALUE;
      SalesReportTextLine."Text Line Type" := StdSalesReportTextLine."Text Line Type";
      SalesReportTextLine."Line No." := StdSalesReportTextLine."Line No.";
      //SalesReportTextLine."Line No." := LastLineNo + 10000;
      LastLineNo := SalesReportTextLine."Line No.";
      SalesReportTextLine."No. of Columns" := StdSalesReportTextLine."No. of Columns";
      SalesReportTextLine."Column Separator" := StdSalesReportTextLine."Column Separator";

      IF (TempRecRef.NUMBER = DATABASE::"Sales Invoice Line") OR
         (TempRecRef.NUMBER = DATABASE::"Sales Cr.Memo Line") OR
         (TempRecRef.NUMBER = DATABASE::"Sales Line")
      THEN
        SalesReportTextLine."Document Line No." := TempRecRef.FIELD(4).VALUE
      ELSE
        SalesReportTextLine."Document Line No." := 0;

      SalesReportTextLine.Text := DoSubstitutions(
        StdSalesReportTextLine, TempRecRef, CurrencyCode, LanguageCode, SequenceNo);

      SalesReportTextLine.INSERT;
    END;

    LOCAL PROCEDURE SalesRecordIsWithinConditionFilters@1100525034(StdSalesReportTextLine@1100525001 : Record 11071890;TempRecRef@1100525000 : RecordRef;SequenceNo@1100528400 : Integer;VAR pSalesReportTextCondition@1100409000 : Record 11071891) Result : Boolean;
    VAR
      SalesReportTextCondition@1100525002 : Record 11071891;
      FieldRef@1100525003 : FieldRef;
    BEGIN
      //>> 160203 ITERO.AC IME444 Sales ReportTextCondition is a parameter instead of a Local variable
      //SalesReportTextCondition.SETRANGE("Document Type", StdSalesReportTextLine."Document Type");
      //SalesReportTextCondition.SETRANGE("Text Line Type", StdSalesReportTextLine."Text Line Type");
      //SalesReportTextCondition.SETRANGE("Language Code", StdSalesReportTextLine."Language Code");
      //SalesReportTextCondition.SETRANGE("Text Line No.", StdSalesReportTextLine."Line No.");
      //<< 160203 ITERO.AC IME444

      TempRecRef.RESET;
      TempRecRef.INSERT;

      //>> 160203 ITERO.AC IME444 Sales ReportTextCondition is a parameter instead of a Local variable
      //IF SalesReportTextCondition.FINDSET THEN
      //  REPEAT
      //    FieldRef := TempRecRef.FIELD(SalesReportTextCondition."Field No.");
      //    IF FieldRef.GETFILTER = '' THEN
      //      FieldRef.SETFILTER(SalesReportTextCondition."Filter Expression")
      //    ELSE
      //      FieldRef.SETFILTER(
      //        '(' + FieldRef.GETFILTER + ')&' + SalesReportTextCondition."Filter Expression");
      //  UNTIL SalesReportTextCondition.NEXT = 0;
      IF pSalesReportTextCondition.FINDSET THEN
        REPEAT
          FieldRef := TempRecRef.FIELD(pSalesReportTextCondition."Field No.");
          IF FieldRef.GETFILTER = '' THEN
            FieldRef.SETFILTER(pSalesReportTextCondition."Filter Expression")
          ELSE
            FieldRef.SETFILTER(
              '(' + FieldRef.GETFILTER + ')&' + pSalesReportTextCondition."Filter Expression");
        UNTIL pSalesReportTextCondition.NEXT = 0;
      //<< 160203 ITERO.AC IME444

      IF TempRecRef.FINDFIRST THEN
        Result := TRUE;

      //>> 160203 ITERO.AC IME444 Sales ReportTextCondition is a parameter instead of a Local variable
      //IF Result THEN BEGIN
      //  SalesReportTextCondition.SETFILTER("Codeunit No.", '>0');
      //  IF SalesReportTextCondition.FINDSET THEN
      //    REPEAT
      //      IF Result THEN
      //        Result := GetConditionResultFromCodeunit(SalesReportTextCondition, TempRecRef, SequenceNo);
      //    UNTIL SalesReportTextCondition.NEXT = 0;
      //  SalesReportTextCondition.SETRANGE("Codeunit No.");
      //END;
      IF Result THEN BEGIN
        pSalesReportTextCondition.SETFILTER("Codeunit No.", '>0');
        IF pSalesReportTextCondition.FINDSET THEN
          REPEAT
            IF Result THEN
              Result := GetConditionResultFromCodeunit(pSalesReportTextCondition, TempRecRef, SequenceNo);
          UNTIL pSalesReportTextCondition.NEXT = 0;
        pSalesReportTextCondition.SETRANGE("Codeunit No.");
      END;
      //<< 160203 ITERO.AC IME444

      TempRecRef.DELETE;
    END;

    PROCEDURE MandatoryValuesAreFilled@1100528410(StdSalesReportTextLine@1100525001 : Record 11071890;RecID@1100528404 : RecordID;SequenceNo@1100528400 : Integer;MandatoryValueNos@1100528403 : ARRAY [10] OF Integer) : Boolean;
    VAR
      SalesReportTextValue@1100525004 : Record 11071911;
      TempRecRef@1100528405 : RecordRef;
      ValueArray@1100525002 : ARRAY [10] OF Text[250];
      I@1100525003 : Integer;
      ValueSequenceNo@1100528401 : Integer;
      ValueFilled@1100528402 : Boolean;
    BEGIN
      GetCurrTempRecRef(RecID, TempRecRef);

      SetFilterOnSalesReportTextValue(StdSalesReportTextLine, SalesReportTextValue);
      IF SalesReportTextValue.FINDSET THEN
        REPEAT
          I := I + 1;
          IF (I <= 10) AND
             (ValueIsMandatory(I, MandatoryValueNos))
          THEN BEGIN
            IF SalesReportTextValue."Multiple Lines" THEN
              ValueSequenceNo := SequenceNo
            ELSE
              ValueSequenceNo := 1;
            ValueArray[I] := GetValue(SalesReportTextValue, TempRecRef, ValueSequenceNo, ValueFilled);
            IF NOT ValueFilled THEN
              EXIT(FALSE);
          END;
        UNTIL SalesReportTextValue.NEXT = 0;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ValueIsMandatory@1100528412(ValueNo@1100528400 : Integer;MandatoryValueNos@1100528401 : ARRAY [10] OF Integer) : Boolean;
    VAR
      I@1100528402 : Integer;
    BEGIN
      FOR I := 1 TO 10 DO
        IF MandatoryValueNos[I] = ValueNo THEN
          EXIT(TRUE);
    END;

    LOCAL PROCEDURE DoSubstitutions@1100525024(StdSalesReportTextLine@1100525001 : Record 11071890;TempRecRef@1100525000 : RecordRef;CurrencyCode@1100525005 : Code[10];LanguageCode@1100525006 : Code[10];SequenceNo@1100528400 : Integer) ResultText : Text;
    VAR
      SalesReportTextValue@1100525004 : Record 11071911;
      ValueArray@1100525002 : ARRAY [10] OF Text[250];
      I@1100525003 : Integer;
      ValueSequenceNo@1100528401 : Integer;
      ValueFilled@1100528402 : Boolean;
    BEGIN
      SetFilterOnSalesReportTextValue(StdSalesReportTextLine, SalesReportTextValue);
      IF SalesReportTextValue.FINDSET THEN
        REPEAT
          I := I + 1;
          IF I <= 10 THEN BEGIN
            IF SalesReportTextValue."Multiple Lines" THEN
              ValueSequenceNo := SequenceNo
            ELSE
              ValueSequenceNo := 1;
            ValueArray[I] := GetValue(SalesReportTextValue, TempRecRef, ValueSequenceNo, ValueFilled);
            ValueArray[I] := FormatValue(ValueArray[I], SalesReportTextValue.Format, CurrencyCode, LanguageCode);
          END;
        UNTIL SalesReportTextValue.NEXT = 0;

      ResultText := STRSUBSTNO(
        StdSalesReportTextLine.Text,
        ValueArray[1],
        ValueArray[2],
        ValueArray[3],
        ValueArray[4],
        ValueArray[5],
        ValueArray[6],
        ValueArray[7],
        ValueArray[8],
        ValueArray[9],
        ValueArray[10]);

      ResultText := COPYSTR(ResultText, 1, MAXSTRLEN(StdSalesReportTextLine.Text));
    END;

    LOCAL PROCEDURE GetValue@1100525047(SalesReportTextValue@1100525001 : Record 11071911;TempRecRef@1100525000 : RecordRef;ValueSequenceNo@1100528400 : Integer;VAR ValueFilled@1100528401 : Boolean) Value : Text;
    VAR
      RelatedRecRef@1100525002 : RecordRef;
      RelatedRecID@1100525007 : RecordID;
    BEGIN
      CASE TRUE OF
        RelatedRecordIsCurrentRecord(SalesReportTextValue, TempRecRef):
          BEGIN
            RelatedRecID := TempRecRef.RECORDID;
            Value := GetFieldValueFromRecRef(TempRecRef, SalesReportTextValue."Related Table Field No.", FALSE, ValueFilled);
          END;
        RelatedRecordIsDifferentRecord(SalesReportTextValue, TempRecRef):
          BEGIN
            RelatedRecRef.OPEN(SalesReportTextValue."Related Table No.");
            RelatedRecID := RelatedRecRef.RECORDID;
            IF SalesReportTextValue."Multiple Lines" THEN BEGIN
              SetFilterOnRelatedRecRef(SalesReportTextValue, TempRecRef, RelatedRecRef);
              IF RelatedRecRef.FINDSET THEN BEGIN
                RelatedRecRef.NEXT(ValueSequenceNo - 1);
                Value := GetFieldValueFromRecRef(RelatedRecRef, SalesReportTextValue."Related Table Field No.", FALSE, ValueFilled);
              END;
            END ELSE BEGIN
              FillKeyFieldsOfRelatedRecRef(SalesReportTextValue, TempRecRef, RelatedRecRef);
              IF RelatedRecRef.FIND('=') THEN
                Value := GetFieldValueFromRecRef(RelatedRecRef, SalesReportTextValue."Related Table Field No.", FALSE, ValueFilled);
            END;
            RelatedRecRef.CLOSE;
          END;
      END;

      IF SalesReportTextValue."Codeunit No." > 0 THEN BEGIN
        SalesReportTextValue.Result := Value;
        Value := GetValueResultFromCodeunit(SalesReportTextValue, TempRecRef.RECORDID, RelatedRecID);
        IF Value <> '' THEN
          ValueFilled := TRUE
        ELSE
          ValueFilled := FALSE;
      END;
    END;

    LOCAL PROCEDURE DetermineNoOfLinesForStdLine@1100528416(StdSalesReportTextLine@1100528401 : Record 11071890;TempRecRef@1100525000 : RecordRef) NoOfLines : Integer;
    VAR
      SalesReportTextValue@1100528400 : Record 11071911;
      RelatedRecRef@1100525002 : RecordRef;
    BEGIN
      NoOfLines := 1;

      SetFilterOnSalesReportTextValue(StdSalesReportTextLine, SalesReportTextValue);
      SalesReportTextValue.SETRANGE("Multiple Lines", TRUE);
      IF NOT SalesReportTextValue.FINDFIRST THEN
        EXIT;

      IF RelatedRecordIsDifferentRecord(SalesReportTextValue, TempRecRef) THEN BEGIN
        RelatedRecRef.OPEN(SalesReportTextValue."Related Table No.");
        SetFilterOnRelatedRecRef(SalesReportTextValue, TempRecRef, RelatedRecRef);
        NoOfLines := RelatedRecRef.COUNT;
        RelatedRecRef.CLOSE;
      END;
    END;

    LOCAL PROCEDURE SetFilterOnSalesReportTextValue@1100528438(StdSalesReportTextLine@1100528400 : Record 11071890;VAR SalesReportTextValue@1100528401 : Record 11071911);
    BEGIN
      SalesReportTextValue.SETRANGE("Document Type", StdSalesReportTextLine."Document Type");
      SalesReportTextValue.SETRANGE("Text Line Type", StdSalesReportTextLine."Text Line Type");
      SalesReportTextValue.SETRANGE("Language Code", StdSalesReportTextLine."Language Code");
      SalesReportTextValue.SETRANGE("Text Line No.", StdSalesReportTextLine."Line No.");
    END;

    LOCAL PROCEDURE SetFilterOnRelatedRecRef@1100528431(SalesReportTextValue@1100528401 : Record 11071911;TempRecRef@1100528407 : RecordRef;VAR RelatedRecRef@1100528400 : RecordRef);
    VAR
      KeyRef@1100528406 : KeyRef;
      FieldRef@1100528405 : FieldRef;
      KeyValue@1100528403 : Text;
      I@1100528402 : Integer;
    BEGIN
      KeyRef := RelatedRecRef.KEYINDEX(1);
      FOR I := 1 TO KeyRef.FIELDCOUNT DO BEGIN
        FieldRef := KeyRef.FIELDINDEX(I);
        IF GetKeyValue(SalesReportTextValue, TempRecRef, I, KeyValue) THEN
          FieldRef.SETRANGE(KeyValue, KeyValue);
      END;
    END;

    LOCAL PROCEDURE FillKeyFieldsOfRelatedRecRef@1100528402(SalesReportTextValue@1100528401 : Record 11071911;TempRecRef@1100528407 : RecordRef;VAR RelatedRecRef@1100528400 : RecordRef);
    VAR
      KeyRef@1100528406 : KeyRef;
      FieldRef@1100528405 : FieldRef;
      KeyValue@1100528403 : Text;
      I@1100528402 : Integer;
    BEGIN
      KeyRef := RelatedRecRef.KEYINDEX(1);
      FOR I := 1 TO KeyRef.FIELDCOUNT DO BEGIN
        FieldRef := KeyRef.FIELDINDEX(I);
        GetKeyValue(SalesReportTextValue, TempRecRef, I, KeyValue);
        IF KeyValue <> '' THEN
          FieldRef.VALUE := KeyValue;
      END;
    END;

    LOCAL PROCEDURE RelatedRecordIsCurrentRecord@1100525023(SalesReportTextValue@1100525001 : Record 11071911;TempRecRef@1100525000 : RecordRef) : Boolean;
    BEGIN
      IF (SalesReportTextValue."Related Table No." > 0) AND
         (SalesReportTextValue."Related Table No." = TempRecRef.NUMBER) AND
         (NOT SalesReportTextValue.HasTableLinks)
      THEN
        EXIT(TRUE);
    END;

    LOCAL PROCEDURE RelatedRecordIsDifferentRecord@1100525025(SalesReportTextValue@1100525001 : Record 11071911;TempRecRef@1100525000 : RecordRef) : Boolean;
    BEGIN
      IF (SalesReportTextValue."Related Table No." > 0) AND
         ((SalesReportTextValue."Related Table No." <> TempRecRef.NUMBER) OR
          (SalesReportTextValue.HasTableLinks))
      THEN
        EXIT(TRUE);
    END;

    LOCAL PROCEDURE FormatValue@1100525019(Value@1100525000 : Text[250];ValueFormat@1100525001 : Integer;CurrencyCode@1100525002 : Code[10];LanguageCode@1100525008 : Code[10]) FormattedValue : Text[250];
    VAR
      SalesReportTextValue@1100525003 : Record 11071911;
      Language@1100525007 : Record 8;
      AutoFormatManagement@1100525009 : Codeunit 45;
      Date@1100525004 : Date;
      Amount@1100525010 : Decimal;
      Price@1100525011 : Decimal;
      OldLanguageID@1100525005 : Integer;
    BEGIN
      OldLanguageID := GLOBALLANGUAGE;
      IF LanguageCode <> '' THEN
        GLOBALLANGUAGE(Language.GetLanguageID(LanguageCode));

      FormattedValue := Value;

      CASE ValueFormat OF
        SalesReportTextValue.Format::"Short Date":
          IF EVALUATE(Date, Value) THEN
            IF Date <> 0D THEN
              FormattedValue := FORMAT(Date);
        SalesReportTextValue.Format::"Long Date":
          IF EVALUATE(Date, Value) THEN
            IF Date <> 0D THEN
              FormattedValue := DELCHR(FORMAT(Date,0,4),'=','.');
        SalesReportTextValue.Format::Amount:
          IF CurrencyCode <> '' THEN
            IF EVALUATE(Amount, Value) THEN
              FormattedValue := FORMAT(Amount, 0, AutoFormatManagement.AutoFormatTranslate(1, CurrencyCode));
        SalesReportTextValue.Format::Price:
          IF CurrencyCode <> '' THEN
            IF EVALUATE(Price, Value) THEN
              FormattedValue := FORMAT(Price, 0, AutoFormatManagement.AutoFormatTranslate(2, CurrencyCode));
      END;

      GLOBALLANGUAGE(OldLanguageID);
    END;

    LOCAL PROCEDURE DetermineCurrencyCode@1100525014(CurrencyCodeOfHeader@1100525000 : Code[10]) : Code[10];
    VAR
      GeneralLedgerSetup@1100525001 : Record 98;
    BEGIN
      IF CurrencyCodeOfHeader <> '' THEN
        EXIT(CurrencyCodeOfHeader);

      GeneralLedgerSetup.GET;
      EXIT(GeneralLedgerSetup."LCY Code");
    END;

    LOCAL PROCEDURE GetKeyValue@1100525063(SalesReportTextValue@1100525001 : Record 11071911;TempRecRef@1100525002 : RecordRef;I@1100525000 : Integer;VAR KeyValue@1100528400 : Text) : Boolean;
    VAR
      SalesReportTextTableLink@1100525003 : Record 11071913;
      ValueFilled@1100528401 : Boolean;
    BEGIN
      SalesReportTextTableLink.SETRANGE("Document Type", SalesReportTextValue."Document Type");
      SalesReportTextTableLink.SETRANGE("Text Line Type", SalesReportTextValue."Text Line Type");
      SalesReportTextTableLink.SETRANGE("Language Code", SalesReportTextValue."Language Code");
      SalesReportTextTableLink.SETRANGE("Text Line No.", SalesReportTextValue."Text Line No.");
      SalesReportTextTableLink.SETRANGE("Text Value Line No.", SalesReportTextValue."Line No.");

      IF I > SalesReportTextTableLink.COUNT THEN
        EXIT(FALSE);
      IF NOT SalesReportTextTableLink.FINDSET THEN
        EXIT(FALSE);

      IF I > 1 THEN
        SalesReportTextTableLink.NEXT(I-1);

      IF SalesReportTextTableLink.Type = SalesReportTextTableLink.Type::CONST THEN
        KeyValue := SalesReportTextTableLink.Value
      ELSE
        KeyValue := GetFieldValueFromRecRef(TempRecRef, SalesReportTextTableLink."Field No.", TRUE, ValueFilled);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetFieldValueFromRecRef@1100525010(RecRef@1100525000 : RecordRef;FieldNo@1100525001 : Integer;ConvertOptionValueToInteger@1100525005 : Boolean;VAR ValueFilled@1100528400 : Boolean) : Text;
    VAR
      FieldRef@1100525002 : FieldRef;
      OptionFieldTools@1100525003 : Codeunit 11012271;
      InstallationMgt@1100528402 : Codeunit 11012268;
      OptionValue@1100525004 : Integer;
    BEGIN
      ValueFilled := FALSE;
      IF FieldNo = 0 THEN
        EXIT;

      FieldRef := RecRef.FIELD(FieldNo);
      IF UPPERCASE(FORMAT(FieldRef.CLASS)) = 'FLOWFIELD' THEN
        FieldRef.CALCFIELD;

      ValueFilled := InstallationMgt.HasValue(FieldRef);

      IF ConvertOptionValueToInteger AND
         (UPPERCASE(FORMAT(FieldRef.TYPE)) = 'OPTION')
      THEN BEGIN
        OptionFieldTools.ReadableOptionToOptionValue2(FieldRef, FORMAT(FieldRef.VALUE), OptionValue);
        EXIT(FORMAT(OptionValue));
      END ELSE
        EXIT(FORMAT(FieldRef.VALUE));
    END;

    LOCAL PROCEDURE GetTextLineLanguageCodeFilter@1100525005(DocumentType@1100525002 : Integer;HeaderLanguageCode@1100525000 : Code[10]) : Code[10];
    VAR
      StdSalesReportTextLine@1100525001 : Record 11071890;
    BEGIN
      // If there is at least 1 std. text line with the language code of the sales header,
      // then it is assumed that all text lines must have the language code of the sales header.
      //
      // If there is no std. text line with the language code of the sales header,
      // then it is assumed that all text lines must have the language code ''.
      StdSalesReportTextLine.SETRANGE("Document Type", DocumentType);
      StdSalesReportTextLine.SETRANGE("Language Code", HeaderLanguageCode);
      IF StdSalesReportTextLine.ISEMPTY THEN
        EXIT('')
      ELSE
        EXIT(HeaderLanguageCode);
    END;

    PROCEDURE LookupFieldNo@1100525006(TableNo@1100525004 : Integer;FieldNo@1100525003 : Integer) : Integer;
    VAR
      NewFieldNo@1100525000 : Integer;
      FieldTableManagement@1100529200 : Codeunit 11012372;
    BEGIN
      IF TableNo = 0 THEN
        EXIT(0);

      NewFieldNo := FieldTableManagement.LookupFieldNo(TableNo,FieldNo);

      IF NewFieldNo > 0 THEN
        EXIT(NewFieldNo)
      ELSE
        EXIT(FieldNo);
    END;

    PROCEDURE GetTableNo@1100525004(DocumentType@1100525000 : Integer;TextLineType@1100525002 : Integer) TableNo : Integer;
    VAR
      StdSalesReportTextLine@1100525001 : Record 11071890;
    BEGIN
      CASE DocumentType OF
        StdSalesReportTextLine."Document Type"::"Pro Forma Invoice", StdSalesReportTextLine."Document Type"::"Pro Forma Credit Memo":
          IF (TextLineType = StdSalesReportTextLine."Text Line Type"::Header) OR
             (TextLineType = StdSalesReportTextLine."Text Line Type"::Footer)
          THEN
            TableNo := DATABASE::"Sales Header"
          ELSE
            TableNo := DATABASE::"Sales Line";
        StdSalesReportTextLine."Document Type"::"Posted Invoice":
          IF (TextLineType = StdSalesReportTextLine."Text Line Type"::Header) OR
             (TextLineType = StdSalesReportTextLine."Text Line Type"::Footer)
          THEN
            TableNo := DATABASE::"Sales Invoice Header"
          ELSE
            TableNo := DATABASE::"Sales Invoice Line";
        StdSalesReportTextLine."Document Type"::"Posted Credit Memo":
          IF (TextLineType = StdSalesReportTextLine."Text Line Type"::Header) OR
             (TextLineType = StdSalesReportTextLine."Text Line Type"::Footer)
          THEN
            TableNo := DATABASE::"Sales Cr.Memo Header"
          ELSE
            TableNo := DATABASE::"Sales Cr.Memo Line";
      END;
    END;

    PROCEDURE GetTableCaption@1100525007(DocumentType@1100525001 : Integer;TextLineType@1100525000 : Integer) : Text[250];
    VAR
      AllObjWithCaption@1100525002 : Record 2000000058;
    BEGIN
      IF AllObjWithCaption.GET(AllObjWithCaption."Object Type"::Table, GetTableNo(DocumentType, TextLineType)) THEN
        EXIT(AllObjWithCaption."Object Caption");
    END;

    PROCEDURE GetFieldCaption@1100525012(TableNo@1100525001 : Integer;FieldNo@1100525002 : Integer) : Text;
    VAR
      Field@1100525000 : Record 2000000041;
    BEGIN
      IF TableNo <= 0 THEN
        EXIT;
      IF FieldNo <= 0 THEN
        EXIT;

      IF Field.GET(TableNo, FieldNo) THEN
        EXIT(Field."Field Caption");
    END;

    LOCAL PROCEDURE GetConditionResultFromCodeunit@1100525008(VAR SalesReportTextCondition@1100525001 : Record 11071891;TempRecRef@1100525000 : RecordRef;SequenceNo@1100528400 : Integer) Result : Boolean;
    BEGIN
      SalesReportTextCondition."Record ID" := TempRecRef.RECORDID;
      SalesReportTextCondition.Result := TRUE;
      SalesReportTextCondition."Sequence No." := SequenceNo;
      CODEUNIT.RUN(SalesReportTextCondition."Codeunit No.", SalesReportTextCondition);
      EXIT(SalesReportTextCondition.Result);
    END;

    LOCAL PROCEDURE GetValueResultFromCodeunit@1100525009(SalesReportTextValue@1100525001 : Record 11071911;TempRecID@1100525000 : RecordID;RelatedRecID@1100525002 : RecordID) Result : Text[250];
    BEGIN
      SalesReportTextValue."Record ID" := TempRecID;
      SalesReportTextValue."Related Record ID" := RelatedRecID;
      CODEUNIT.RUN(SalesReportTextValue."Codeunit No.", SalesReportTextValue);
      EXIT(SalesReportTextValue.Result);
    END;

    PROCEDURE GetSalesRecord@1100525015(RecID@1100525000 : RecordID;VAR SalesHeader@1100525007 : Record 36;VAR SalesLine@1100525004 : Record 37;VAR SalesInvoiceHeader@1100525002 : Record 112;VAR SalesInvoiceLine@1100525005 : Record 113;VAR SalesCrMemoHeader@1100525003 : Record 114;VAR SalesCrMemoLine@1100525006 : Record 115) : Integer;
    VAR
      RecRef@1100525001 : RecordRef;
    BEGIN
      IF RecRef.GET(RecID) THEN
        CASE RecRef.NUMBER OF
          DATABASE::"Sales Header":
            BEGIN
              RecRef.SETTABLE(SalesHeader);
              EXIT(DATABASE::"Sales Header");
            END;
          DATABASE::"Sales Line":
            BEGIN
              RecRef.SETTABLE(SalesLine);
              EXIT(DATABASE::"Sales Line");
            END;
          DATABASE::"Sales Invoice Header":
            BEGIN
              RecRef.SETTABLE(SalesInvoiceHeader);
              EXIT(DATABASE::"Sales Invoice Header");
            END;
          DATABASE::"Sales Invoice Line":
            BEGIN
              RecRef.SETTABLE(SalesInvoiceLine);
              EXIT(DATABASE::"Sales Invoice Line");
            END;
          DATABASE::"Sales Cr.Memo Header":
            BEGIN
              RecRef.SETTABLE(SalesCrMemoHeader);
              EXIT(DATABASE::"Sales Cr.Memo Header");
            END;
          DATABASE::"Sales Cr.Memo Line":
            BEGIN
              RecRef.SETTABLE(SalesCrMemoLine);
              EXIT(DATABASE::"Sales Cr.Memo Line");
            END;
        END;
    END;

    PROCEDURE FillTempGenericTables@1100525032(RecID@1100525000 : RecordID;VAR GenericSalesHeader@1100525007 : Record 11071888;VAR GenericSalesLine@1100525008 : Record 11071889);
    VAR
      SalesHeader@1100525006 : Record 36;
      SalesLine@1100525005 : Record 37;
      SalesInvoiceHeader@1100525001 : Record 112;
      SalesInvoiceLine@1100525002 : Record 113;
      SalesCrMemoHeader@1100525003 : Record 114;
      SalesCrMemoLine@1100525004 : Record 115;
    BEGIN
      CASE GetSalesRecord(
        RecID, SalesHeader, SalesLine, SalesInvoiceHeader, SalesInvoiceLine, SalesCrMemoHeader, SalesCrMemoLine)
      OF
        DATABASE::"Sales Header":
          GenericSalesHeader.InsertSalesHeaderWithLines(SalesHeader, GenericSalesLine);
        DATABASE::"Sales Line":
          IF SalesHeader.GET(SalesLine."Document Type", SalesLine."Document No.") THEN
            GenericSalesHeader.InsertSalesHeaderWithLines(SalesHeader, GenericSalesLine);
        DATABASE::"Sales Invoice Header":
          GenericSalesHeader.InsertSalesInvoiceHeaderWithLines(SalesInvoiceHeader, GenericSalesLine);
        DATABASE::"Sales Invoice Line":
          IF SalesInvoiceHeader.GET(SalesInvoiceLine."Document No.") THEN
            GenericSalesHeader.InsertSalesInvoiceHeaderWithLines(SalesInvoiceHeader, GenericSalesLine);
        DATABASE::"Sales Cr.Memo Header":
          GenericSalesHeader.InsertSalesCrMemoHeaderWithLines(SalesCrMemoHeader, GenericSalesLine);
        DATABASE::"Sales Cr.Memo Line":
          IF SalesCrMemoHeader.GET(SalesCrMemoLine."Document No.") THEN
            GenericSalesHeader.InsertSalesCrMemoHeaderWithLines(SalesCrMemoHeader, GenericSalesLine);
      END;
    END;

    PROCEDURE GetCurrGenericSalesHeader@1100525013(RecID@1100525008 : RecordID;VAR GenericSalesHeader@1100525007 : Record 11071888);
    VAR
      SalesHeader@1100525006 : Record 36;
      SalesLine@1100525005 : Record 37;
      SalesInvoiceHeader@1100525001 : Record 112;
      SalesInvoiceLine@1100525002 : Record 113;
      SalesCrMemoHeader@1100525003 : Record 114;
      SalesCrMemoLine@1100525004 : Record 115;
    BEGIN
      GenericSalesHeader.INIT;
      CASE GetSalesRecord(
        RecID, SalesHeader, SalesLine, SalesInvoiceHeader, SalesInvoiceLine, SalesCrMemoHeader, SalesCrMemoLine)
      OF
        DATABASE::"Sales Header":
          GenericSalesHeader.TRANSFERFIELDS(SalesHeader);
        DATABASE::"Sales Line":
          IF SalesHeader.GET(SalesLine."Document Type", SalesLine."Document No.") THEN
            GenericSalesHeader.TRANSFERFIELDS(SalesHeader);
        DATABASE::"Sales Invoice Header":
          BEGIN
            GenericSalesHeader.TRANSFERFIELDS(SalesInvoiceHeader);
            GenericSalesHeader."Document Type" := GenericSalesHeader."Document Type"::"Posted Invoice";
          END;
        DATABASE::"Sales Invoice Line":
          IF SalesInvoiceHeader.GET(SalesInvoiceLine."Document No.") THEN BEGIN
            GenericSalesHeader.TRANSFERFIELDS(SalesInvoiceHeader);
            GenericSalesHeader."Document Type" := GenericSalesHeader."Document Type"::"Posted Invoice";
          END;
        DATABASE::"Sales Cr.Memo Header":
          BEGIN
            GenericSalesHeader.TRANSFERFIELDS(SalesCrMemoHeader);
            GenericSalesHeader."Document Type" := GenericSalesHeader."Document Type"::"Posted Credit Memo";
          END;
        DATABASE::"Sales Cr.Memo Line":
          IF SalesCrMemoHeader.GET(SalesCrMemoLine."Document No.") THEN BEGIN
            GenericSalesHeader.TRANSFERFIELDS(SalesCrMemoHeader);
            GenericSalesHeader."Document Type" := GenericSalesHeader."Document Type"::"Posted Credit Memo";
          END;
      END;
    END;

    PROCEDURE GetCurrGenericSalesLine@1100525026(RecID@1100525000 : RecordID;VAR GenericSalesLine@1100525007 : Record 11071889);
    VAR
      SalesHeader@1100525006 : Record 36;
      SalesLine@1100525005 : Record 37;
      SalesInvoiceHeader@1100525001 : Record 112;
      SalesInvoiceLine@1100525002 : Record 113;
      SalesCrMemoHeader@1100525003 : Record 114;
      SalesCrMemoLine@1100525004 : Record 115;
    BEGIN
      GenericSalesLine.INIT;
      CASE GetSalesRecord(
        RecID, SalesHeader, SalesLine, SalesInvoiceHeader, SalesInvoiceLine, SalesCrMemoHeader, SalesCrMemoLine)
      OF
        DATABASE::"Sales Line":
          GenericSalesLine.TRANSFERFIELDS(SalesLine);
        DATABASE::"Sales Invoice Line":
          BEGIN
            GenericSalesLine.TRANSFERFIELDS(SalesInvoiceLine);
            GenericSalesLine."Document Type" := GenericSalesLine."Document Type"::"Posted Invoice";
          END;
        DATABASE::"Sales Cr.Memo Line":
          BEGIN
            GenericSalesLine.TRANSFERFIELDS(SalesCrMemoLine);
            GenericSalesLine."Document Type" := GenericSalesLine."Document Type"::"Posted Credit Memo";
          END;
      END;
    END;

    LOCAL PROCEDURE GetCurrTempRecRef@1100528401(RecID@1100525008 : RecordID;VAR TempRecRef@1100525007 : RecordRef);
    VAR
      TempSalesHeader@1100525006 : TEMPORARY Record 36;
      TempSalesLine@1100525005 : TEMPORARY Record 37;
      TempSalesInvoiceHeader@1100525001 : TEMPORARY Record 112;
      TempSalesInvoiceLine@1100525002 : TEMPORARY Record 113;
      TempSalesCrMemoHeader@1100525003 : TEMPORARY Record 114;
      TempSalesCrMemoLine@1100525004 : TEMPORARY Record 115;
    BEGIN
      CASE GetSalesRecord(
        RecID, TempSalesHeader, TempSalesLine, TempSalesInvoiceHeader,
        TempSalesInvoiceLine, TempSalesCrMemoHeader, TempSalesCrMemoLine)
      OF
        DATABASE::"Sales Header":
          TempRecRef.GETTABLE(TempSalesHeader);
        DATABASE::"Sales Line":
          TempRecRef.GETTABLE(TempSalesLine);
        DATABASE::"Sales Invoice Header":
          TempRecRef.GETTABLE(TempSalesInvoiceHeader);
        DATABASE::"Sales Invoice Line":
          TempRecRef.GETTABLE(TempSalesInvoiceLine);
        DATABASE::"Sales Cr.Memo Header":
          TempRecRef.GETTABLE(TempSalesCrMemoHeader);
        DATABASE::"Sales Cr.Memo Line":
          TempRecRef.GETTABLE(TempSalesCrMemoLine);
      END;
    END;

    BEGIN
    {
      160205 ITERO.AC IME444 Large adjustments in CreateTextLinesForProFormaInvoiceOrCrMemo, CreateTextLinesForPostedInvoice
                             and CreateTextLinesForPostedCrMemo in order to speed up Invoice And Credit memo printings
                             There are also a number of changes merged from version 210 (without comments)
    }
    END.
  }
}

