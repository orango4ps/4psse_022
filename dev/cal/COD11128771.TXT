OBJECT Codeunit 11128771 Create Condition Document
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      NEN2767Management@1100528609 : Codeunit 11012863;
      Text001@1100528600 : TextConst 'DEU=Bedingung;ENU="Condition ";NLD="Conditie ";NOR=Betingelse;SVE=Villkor';
      WordEnumeration@1100528603 : Codeunit 11012377;
      WordAutomation@1100528614 : Codeunit 11229284;
      Text002@1100528604 : TextConst 'DEU=Defekt;ENU=Defect;NLD=Gebrek;NOR=Defekt;SVE=Trasig';
      Text003@1100528605 : TextConst 'DEU=Zinsen;ENU=Interest;NLD=Ernst;NOR=Rente;SVE=rÑnta';
      Text004@1100528606 : TextConst 'DEU=IntensitÑt;ENU=Intensity;NLD=Intensiteit;NOR=Intensitet;SVE=Intensitet';
      Text005@1100528607 : TextConst 'DEU=Massstab;ENU=Scale;NLD=Omvang;NOR=Skala;SVE=Skala';
      Text006@1100528610 : TextConst 'DEU=Ma·nahme;ENU=Measure;NLD=Maatregel';
      Text007@1100528612 : TextConst 'DEU=Jahr;ENU=Year;NLD=Jaar;NOR=èr;SVE=èr';
      Text008@1100528613 : TextConst 'DEU=Gesamt;ENU=Total;NLD=Totaal;NOR=I alt;SVE=Totalt';
      ProgressDialog@1100528632 : Dialog;
      Text009@1100528633 : TextConst 'DEU=Initialisieren: @1@@@@@@@@\Zustand: @2@@@@@@@@\Objekt: @3@@@@@@@@;ENU=Initialize: @1@@@@@@@@\Condition: @2@@@@@@@@\Object: @3@@@@@@@@;NLD=Initialiseren: @1@@@@@@@@\Conditie: @2@@@@@@@@\Object: @3@@@@@@@@';
      Text011@1100528615 : TextConst 'DEU=Baujahr:;ENU=Year of Manufacture:;NLD=Bouwjaar:';
      Text012@1100528616 : TextConst 'DEU=ErwÅnschter Zustand:;ENU=Desired Condition:;NLD=Gewenste conditie:';
      Text013@1100528617 : TextConst 'DEU=Datum messtechnische Zustandserfassung:;ENU=Condition Measurement Date:;NLD=Datum conditiemeting:';
      Text014@1100528618 : TextConst 'DEU=GebÑude;ENU=Building;NLD=Gebouw;NOR=Byggning;SVE=Byggnad';
      Text015@1100528619 : TextConst 'DEU=Stock;ENU=Floor;NLD=Verdieping;NOR=Gulv;SVE=VÜning';
      Text016@1100528620 : TextConst 'DEU=Raum;ENU=Room;NLD=Ruimte;NOR=Rom;SVE=Rum';
      Text018@1100528622 : TextConst 'DEU=Intervall;ENU=Interval;NLD=Interval;NOR=Intervall;SVE=Intervall';

    PROCEDURE CreateWord@1100528614(ILTMPScenarioHeader@1100528602 : Record 11128791);
    VAR
      NEN2767LTMPHeader@1100528604 : Record 11128784;
      NEN2767LTMPSetup@1100528600 : Record 11128772;
      NEN2767LTMPLine@1100528603 : Record 11128785;
      Score@1100528613 : Integer;
      CurrentNoOfLines@1100528631 : Integer;
      NoOfLines@1100528630 : Integer;
      TaskGrandTotal@1100528601 : Decimal;
    BEGIN
      NEN2767LTMPHeader.GET(ILTMPScenarioHeader."Header Entry ID");
      NEN2767LTMPHeader.Recalculate;

      ProgressDialog.OPEN(Text009);
      WordAutomation.CreateWordApplication;
      NEN2767LTMPSetup.GET;
      IF NEN2767LTMPSetup."Condition Word Template" = '' THEN
        WordAutomation.WordAddDocument
      ELSE BEGIN
        WordAutomation.WordOpenDocument(NEN2767LTMPSetup."Condition Word Template");
        IF NEN2767LTMPSetup."Condition Template Bookmark" <> '' THEN
          IF NOT WordAutomation.WordSelectionToBookmark(NEN2767LTMPSetup."Condition Template Bookmark") THEN
            WordAutomation.WordEndOfStory;
      END;
      //WordAutomation.WordSetVisible(TRUE);
      ProgressDialog.UPDATE(1, 9999);

      NEN2767LTMPLine.SETCURRENTKEY("Location Type", "Survey No.", "Location Code", "Measurement Date", "Element No.", "Element Seq. No.");
      NEN2767LTMPLine.SETRANGE("Location Type", NEN2767LTMPHeader."Location Type");
      NEN2767LTMPLine.SETRANGE("Survey No.", '');
      NEN2767LTMPLine.SETRANGE("Location Code", NEN2767LTMPHeader."Location Code");
      NEN2767LTMPLine.SETRANGE("Measurement Date", NEN2767LTMPHeader."Measurement Date");

      FOR Score := 6 DOWNTO 1 DO BEGIN
        ProgressDialog.UPDATE(2, ROUND((7 - Score) / 6 * 9999, 1));
        NEN2767LTMPLine.SETRANGE(Score, Score);
        IF NEN2767LTMPLine.FINDFIRST THEN BEGIN
          CurrentNoOfLines := 0;
          NoOfLines := NEN2767LTMPLine.COUNT;
          REPEAT
            CurrentNoOfLines += 1;
            ProgressDialog.UPDATE(3, ROUND(CurrentNoOfLines / NoOfLines * 9999, 1));
            NEN2767LTMPLine.SETRANGE("Object No.", NEN2767LTMPLine."Object No.");
            NEN2767LTMPLine.SETRANGE("Object Seq. No.", NEN2767LTMPLine."Object Seq. No.");
            NEN2767LTMPLine.SETRANGE("Element No.", NEN2767LTMPLine."Element No.");
            NEN2767LTMPLine.SETRANGE("Element Seq. No.", NEN2767LTMPLine."Element Seq. No.");
            FillWordObjectBlock(ILTMPScenarioHeader, NEN2767LTMPLine, Score, TaskGrandTotal);
            NEN2767LTMPLine.FINDLAST;
            NEN2767LTMPLine.SETRANGE("Object No.");
            NEN2767LTMPLine.SETRANGE("Object Seq. No.");
            NEN2767LTMPLine.SETRANGE("Element No.");
            NEN2767LTMPLine.SETRANGE("Element Seq. No.");
          UNTIL NEN2767LTMPLine.NEXT = 0;
        END;
      END;

      IF NEN2767LTMPSetup."Cond. Templ. Task Total Bookm." <> '' THEN
        IF WordAutomation.WordSelectionToBookmark(NEN2767LTMPSetup."Cond. Templ. Task Total Bookm.") THEN
          WordAutomation.WordSelectionSetText(FORMAT(TaskGrandTotal, 0, '<Precision,2:2><Standard Format,0>'));

      WordAutomation.WordShowDocument;

      ProgressDialog.CLOSE;
    END;

    LOCAL PROCEDURE FillWordObjectBlock@1100528620(ILTMPScenarioHeader@1100528615 : Record 11128791;VAR INEN2767LTMPLine@1100528601 : Record 11128785;ICondition@1100528605 : Integer;VAR OGrantTotalCostAmount@1100528614 : Decimal);
    VAR
      LTMPScenarioLine@1100528616 : Record 11128792;
      DocumentProperties@1100528612 : Record 11012746;
      ServiceObject@1100528602 : Record 11071691;
      FileManagement@1100528701 : Codeunit 419;
      RowsToCreate@1100528608 : Integer;
      RowNo@1100528607 : Integer;
      ColumnNo@1100528613 : Integer;
      ObjectDescription@1100528603 : Text;
      ImagePath@1100528609 : Text;
      CostAmount@1100528617 : Decimal;
      TotalCostAmount@1100528611 : Decimal;
      UsedHeight@1100528604 : Decimal;
      MaxUsedHeight@1100528606 : Decimal;
      IsTemporary@1100528700 : Boolean;
    BEGIN
      RowsToCreate := 8;
      RowsToCreate += INEN2767LTMPLine.COUNT;
      INEN2767LTMPLine.SETFILTER("Measure Description", '<>%1', '');
      IF NOT INEN2767LTMPLine.ISEMPTY THEN
        RowsToCreate += INEN2767LTMPLine.COUNT +3;
      INEN2767LTMPLine.SETRANGE("Measure Description");
      RowsToCreate += GetNoOfPhotoLinesOfNEN2767LTMPLine(INEN2767LTMPLine);
      WordAutomation.WordAddTable(
        RowsToCreate, 6, WordEnumeration.WdBuiltinStyle_wdStyleNormalTable, WordEnumeration.WdAutoFitBehavior_wdFitFixed);

      //Cell Width must be equal so pictures are spaced correctly
      WordAutomation.WordTableSetColumnWidth(1, WordAutomation.CentimetersToPoints(2.3));
      WordAutomation.WordTableSetColumnWidth(2, WordAutomation.CentimetersToPoints(2.3));
      WordAutomation.WordTableSetColumnWidth(3, WordAutomation.CentimetersToPoints(2.3));
      WordAutomation.WordTableSetColumnWidth(4, WordAutomation.CentimetersToPoints(2.3));
      WordAutomation.WordTableSetColumnWidth(5, WordAutomation.CentimetersToPoints(2.3));
      WordAutomation.WordTableSetColumnWidth(6, WordAutomation.CentimetersToPoints(2.3));

      WordAutomation.WordTableGetSelectionByPosition(1, 1, RowsToCreate -1, 5);
      WordAutomation.WordSelectionSetBorder(WordEnumeration.WdBorderType_wdBorderVertical, WordEnumeration.WdLineStyle_wdLineStyleNone);
      WordAutomation.WordSelectionSetBorder(WordEnumeration.WdBorderType_wdBorderHorizontal, WordEnumeration.WdLineStyle_wdLineStyleNone);

      WordAutomation.WordTableMergeCellsOfRow(1);

      WordAutomation.WordTableSetCellBold(1, 1, TRUE);
      WordAutomation.WordTableSetCellBackgroundColor(1, 1, ConditionGetColor(ICondition));
      WordAutomation.WordTableSetCellText(1, 1, STRSUBSTNO('%1 %2', Text001, ICondition));

      WordAutomation.WordTableMergeCellsByPosition(2, 1, 0, 4);
      WordAutomation.WordSelectionSetBorder(WordEnumeration.WdBorderType_wdBorderBottom, WordEnumeration.WdLineStyle_wdLineStyleNone);

      WordAutomation.WordTableSetCellBold(2, 1, TRUE);
      ObjectDescription := '';
      IF INEN2767LTMPLine."Object No." <> '' THEN BEGIN
        IF NOT ServiceObject.GET(INEN2767LTMPLine."Object No.") THEN
          ServiceObject.INIT;
        ObjectDescription := STRSUBSTNO('%1 - ', INEN2767LTMPLine."Object No.");
      END;
      ObjectDescription += STRSUBSTNO('%1 %2', INEN2767LTMPLine."Element No.", INEN2767LTMPLine.Description);
      WordAutomation.WordTableSetCellText(2, 1, ObjectDescription);

      IF INEN2767LTMPLine.FINDFIRST THEN BEGIN
        NEN2767Management.GetPictureDocumentProperties(INEN2767LTMPLine, 0, DocumentProperties);
        IF DocumentProperties.FINDFIRST THEN BEGIN
          ImagePath := DocumentProperties.GetClientFile(IsTemporary);
          WordAutomation.WordTableAddPictureToCell(2, 2, ImagePath, FALSE, TRUE,
            10, 10, WordAutomation.CentimetersToPoints(2.5), -1, UsedHeight);
          IF IsTemporary THEN
            FileManagement.DeleteClientFile(ImagePath);
        END;
      END;

      WordAutomation.WordTableMergeCellsByPosition(4, 1, 0, 1);
      WordAutomation.WordTableSetCellText(4, 1, Text011);
      IF INEN2767LTMPLine."Year of Manufacture" <> 0 THEN
        WordAutomation.WordTableSetCellText(4, 2, FORMAT(INEN2767LTMPLine."Year of Manufacture"));

      WordAutomation.WordTableMergeCellsByPosition(5, 1, 0, 1);
      WordAutomation.WordTableSetCellText(5, 1, Text012);
      WordAutomation.WordTableSetCellText(5, 2, FORMAT(ServiceObject."Desired Condition Score"));

      WordAutomation.WordTableMergeCellsByPosition(6, 1, 0, 1);
      WordAutomation.WordTableSetCellText(6, 1, Text013);
      WordAutomation.WordTableSetCellText(6, 2, FORMAT(INEN2767LTMPLine."Measurement Date"));

      WordAutomation.WordTableGetSelectionByPosition(4, 1, 2, 0);
      WordAutomation.WordSelectionSetBold(TRUE);
      WordAutomation.WordTableGetSelectionByPosition(4, 3, 2, 0);
      WordAutomation.WordSelectionSetBold(TRUE);

      WordAutomation.WordTableSetCellText(4, 3, Text014);
      WordAutomation.WordTableSetCellText(4, 4, ServiceObject.Building);

      WordAutomation.WordTableSetCellText(5, 3, Text015);
      WordAutomation.WordTableSetCellText(5, 4, ServiceObject.Floor);

      WordAutomation.WordTableSetCellText(6, 3, Text016);
      WordAutomation.WordTableSetCellText(6, 4, ServiceObject.Room);

      RowNo := 8;
      WordAutomation.WordTableMergeCellsByPosition(RowNo, 1, 0, 1);
      WordAutomation.WordTableGetSelectionByPosition(RowNo, 1, 0, 5);
      WordAutomation.WordSelectionSetBold(TRUE);
      WordAutomation.WordTableSetCellText(RowNo, 1, Text002);
      WordAutomation.WordTableSetCellText(RowNo, 2, Text003);
      WordAutomation.WordTableSetCellText(RowNo, 3, Text004);
      WordAutomation.WordTableSetCellText(RowNo, 4, Text005);
      WordAutomation.WordTableSetCellText(RowNo, 5, Text001);

      IF INEN2767LTMPLine.FINDSET THEN BEGIN
        REPEAT
          RowNo += 1;
          WordAutomation.WordTableMergeCellsByPosition(RowNo, 1, 0, 1);
          WordAutomation.WordTableSetCellText(RowNo, 1, INEN2767LTMPLine."Defect Description");
          IF NOT INEN2767LTMPLine."No Defects" AND NOT INEN2767LTMPLine.Degradation THEN BEGIN
            WordAutomation.WordTableSetCellText(RowNo, 2, FORMAT(INEN2767LTMPLine.Interest));
            WordAutomation.WordTableSetCellText(RowNo, 3, FORMAT(INEN2767LTMPLine.Intensity));
            WordAutomation.WordTableSetCellText(RowNo, 4, FORMAT(INEN2767LTMPLine."Scale Percentage"));
          END;
          WordAutomation.WordTableSetCellText(RowNo, 5, FORMAT(INEN2767LTMPLine.Score));

          CLEAR(DocumentProperties);
          NEN2767Management.GetPictureDocumentProperties(INEN2767LTMPLine, 1, DocumentProperties);
          IF DocumentProperties.FINDSET THEN BEGIN
            RowNo += 1;
            ColumnNo := 1;
            MaxUsedHeight := 0;
            REPEAT
              IF ColumnNo <= 6 THEN BEGIN
                ImagePath := DocumentProperties.GetClientFile(IsTemporary);
                WordAutomation.WordTableAddPictureToCell(RowNo, ColumnNo, ImagePath, FALSE, TRUE,
                  0, 0, WordAutomation.CentimetersToPoints(2.5), -1, UsedHeight);
                IF IsTemporary THEN
                  FileManagement.DeleteClientFile(ImagePath);
              END;
              IF UsedHeight > MaxUsedHeight THEN
                MaxUsedHeight := UsedHeight;
              ColumnNo += 1;
            UNTIL DocumentProperties.NEXT = 0;
            WordAutomation.WordTableSetRowHeight(RowNo, MaxUsedHeight);
          END;

          IF DocumentProperties.FINDSET THEN BEGIN
            RowNo += 1;
            ColumnNo := 1;
            REPEAT
              IF ColumnNo <= 6 THEN
                WordAutomation.WordTableSetCellText(RowNo, ColumnNo, DocumentProperties.Description);
              ColumnNo += 1;
            UNTIL DocumentProperties.NEXT = 0;
          END;
        UNTIL INEN2767LTMPLine.NEXT = 0;
      END;

      INEN2767LTMPLine.SETFILTER("Measure Description", '<>%1', '');
      IF INEN2767LTMPLine.FINDSET THEN BEGIN
        RowNo += 2;
        WordAutomation.WordTableMergeCellsByPosition(RowNo, 1, 0, 2);
        WordAutomation.WordTableGetSelectionOfCell(RowNo, 1);
        WordAutomation.WordSelectionExtendHorizontaly(2);
        WordAutomation.WordSelectionSetBold(TRUE);

        WordAutomation.WordTableSetCellText(RowNo, 1, Text006);
        WordAutomation.WordTableSetCellText(RowNo, 2, Text007);
        WordAutomation.WordTableSetCellText(RowNo, 3, Text018);
        WordAutomation.WordTableSetCellText(RowNo, 4, Text008);
        WordAutomation.WordSelectionAlignment(WordEnumeration.WdParagraphAlignment_wdAlignParagraphRight);

        TotalCostAmount := 0;
        REPEAT
          IF LTMPScenarioLine.GET(
            INEN2767LTMPLine."Header Entry ID", INEN2767LTMPLine."Structure Line Code",
            ILTMPScenarioHeader."Scenario No.", ILTMPScenarioHeader."Version No.", INEN2767LTMPLine."Line No.")
          THEN BEGIN
            RowNo += 1;
            WordAutomation.WordTableMergeCellsByPosition(RowNo, 1, 0, 2);
            LTMPScenarioLine.CALCFIELDS("Measure Description", "Cycle (Years) (Needed)");
            WordAutomation.WordTableSetCellText(RowNo, 1, LTMPScenarioLine."Measure Description");
            WordAutomation.WordTableSetCellText(RowNo, 2, FORMAT(LTMPScenarioLine."Starting Year (Policy)"));
            IF LTMPScenarioLine."Cycle (Years) (Needed)" <> 0 THEN
              WordAutomation.WordTableSetCellText(RowNo, 3, FORMAT(LTMPScenarioLine."Cycle (Years) (Needed)"));
            CostAmount := LTMPScenarioLine.GetCostAmountByYear(LTMPScenarioLine."Starting Year (Policy)");
            WordAutomation.WordTableSetCellText(RowNo, 4, FORMAT(CostAmount, 0, '<Precision,2:2><Standard Format,0>'));
            WordAutomation.WordSelectionAlignment(WordEnumeration.WdParagraphAlignment_wdAlignParagraphRight);
            TotalCostAmount += CostAmount;
          END;
        UNTIL INEN2767LTMPLine.NEXT = 0;

        RowNo += 1;
        WordAutomation.WordTableMergeCellsByPosition(RowNo, 1, 0, 2);
        WordAutomation.WordTableSetCellText(RowNo, 1, Text008);
        WordAutomation.WordSelectionSetBold(TRUE);
        WordAutomation.WordTableSetCellText(RowNo, 4, FORMAT(TotalCostAmount, 0, '<Precision,2:2><Standard Format,0>'));
        WordAutomation.WordSelectionSetBold(TRUE);
        WordAutomation.WordSelectionSetBorder(WordEnumeration.WdBorderType_wdBorderTop, WordEnumeration.WdLineStyle_wdLineStyleSingle);
        WordAutomation.WordSelectionAlignment(WordEnumeration.WdParagraphAlignment_wdAlignParagraphRight);

        OGrantTotalCostAmount += TotalCostAmount;
      END;
      INEN2767LTMPLine.SETRANGE("Measure Description");

      WordAutomation.WordTableSetPreferredWidth(WordAutomation.CentimetersToPoints(16));

      WordAutomation.WordTableGetSelectionFullTable;
      WordAutomation.WordSelectionSetBorder(WordEnumeration.WdBorderType_wdBorderTop, WordEnumeration.WdLineStyle_wdLineStyleSingle);
      WordAutomation.WordTableIndent(1);

      WordAutomation.WordPositionCursorAfterTable;
      WordAutomation.WordSelectionAddParagraph;
    END;

    LOCAL PROCEDURE ConditionGetColor@1100528616(IConditionNo@1100528600 : Integer) : Integer;
    VAR
      WordEnumeration@1100528601 : Codeunit 11012377;
    BEGIN
      CASE IConditionNo OF
        1 : EXIT(WordEnumeration.WdColor_wdColorGreen);
        2 : EXIT(WordEnumeration.WdColor_wdColorYellow);
        3 : EXIT(9167871);
        4 : EXIT(WordEnumeration.WdColor_wdColorLightOrange);
        5 : EXIT(WordEnumeration.WdColor_wdColorOrange);
        6 : EXIT(WordEnumeration.WdColor_wdColorRed);
      END;
    END;

    LOCAL PROCEDURE GetNoOfPhotoLines@1100528609(VAR INEN2767ConditionMeasLine@1100528600 : Record 11128777) NoOfPhotoLines : Integer;
    VAR
      NEN2767ConditionMeasLine@1100528601 : Record 11128777;
      TmpDocumentFilter@1100528604 : TEMPORARY Record 11012073;
      TmpDocumentProperties@1100528605 : TEMPORARY Record 11012746;
      DocumentFilters@1100528603 : Codeunit 11012432;
      RecRef@1100528602 : RecordRef;
    BEGIN
      NEN2767ConditionMeasLine.COPY(INEN2767ConditionMeasLine);
      IF NEN2767ConditionMeasLine.FINDSET THEN
        REPEAT
          RecRef.GETTABLE(NEN2767ConditionMeasLine);
          DocumentFilters.CreateTemporaryFilter(RecRef, TmpDocumentFilter);
          DocumentFilters.ApplyDocumentFilter(TmpDocumentFilter, TmpDocumentProperties);
          TmpDocumentProperties.SetFilterPicturesOnly;
          NoOfPhotoLines := TmpDocumentProperties.COUNT;
        UNTIL NEN2767ConditionMeasLine.NEXT = 0;
    END;

    LOCAL PROCEDURE GetNoOfPhotoLinesOfNEN2767LTMPLine@1100528621(VAR INEN2767LTMPLine@1100528600 : Record 11128785) NoOfPhotoLines : Integer;
    VAR
      NEN2767LTMPLine@1100528601 : Record 11128785;
      DocumentProperties@1100528607 : Record 11012746;
      NEN2767Management@1100528606 : Codeunit 11012863;
    BEGIN
      NEN2767LTMPLine.COPY(INEN2767LTMPLine);
      IF NEN2767LTMPLine.FINDSET THEN
        REPEAT
          NEN2767Management.GetPictureDocumentProperties(INEN2767LTMPLine, 1, DocumentProperties);
          IF NOT DocumentProperties.ISEMPTY THEN
            NoOfPhotoLines += 2; // 1 line of photos 1, line for photo description
        UNTIL NEN2767LTMPLine.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

