OBJECT Report 11012626 Export Plant Invoices SO's
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    Permissions=TableData 112=rm,
                TableData 114=rm;
    CaptionML=[DEU=Werkzeugrechnungen Serviceauftr„ge exportieren;
               ENU=Export Plant Invoices Service Orders;
               NLD=Materieelfacturen naar serviceorders exporteren];
    ProcessingOnly=Yes;
    OnPostReport=BEGIN
                   ExportLines;
                 END;

    UsageCategory=Tasks;
  }
  DATASET
  {
    { 5581;    ;DataItem;                    ;
               DataItemTable=Table112;
               DataItemTableView=WHERE(Plant Invoice=CONST(Yes),
                                       Service Order No.=FILTER(<>''));
               OnAfterGetRecord=BEGIN
                                  RecRef.GETTABLE("Sales Invoice Header");
                                  XMLportStatusDialogMgt.ShowExportStatus(RecRef);

                                  PlantSetup.GET;
                                  SalesInvLine.SETRANGE("Document No.","No.");
                                  SalesInvLine.SETRANGE(Type,SalesInvLine.Type::"G/L Account");
                                  IF SalesInvLine.FINDSET THEN
                                    REPEAT
                                      TmpCumSalesInv.SETRANGE("Document No.","No.");
                                      TmpCumSalesInv.SETRANGE("Service Order No.",SalesInvLine."Service Order No.");
                                      TmpCumSalesInv.SETRANGE("Shortcut Dimension 2 Code",SalesInvLine."Shortcut Dimension 2 Code");
                                      IF (SalesInvLine."Item No." <> '') AND
                                         PlantSetup."Plant Invoice Export per Item"
                                      THEN
                                        TmpCumSalesInv.SETRANGE("Item No.",SalesInvLine."Item No.");
                                      FillOrderNoPlant(
                                        SalesInvLine."Arrival Order Type", SalesInvLine."Arrival Order",
                                        SalesInvLine."Removal Order Type", SalesInvLine."Removal Order");
                                      TmpCumSalesInv.SETRANGE("Arrival Order", OrderNoPlant);
                                      IF TmpCumSalesInv.FIND('-') THEN BEGIN
                                        TmpCumSalesInv.Amount += SalesInvLine.Amount;
                                        TmpCumSalesInv."Amount Including VAT" += SalesInvLine."Amount Including VAT";
                                        TmpCumSalesInv."VAT Base Amount" += SalesInvLine."VAT Base Amount";
                                        IF (SalesInvLine."Item No." <> '') AND
                                           PlantSetup."Plant Invoice Export per Item"
                                        THEN
                                          TmpCumSalesInv.Quantity += SalesInvLine.Quantity;
                                        TmpCumSalesInv.MODIFY;
                                      END ELSE BEGIN
                                        DimMgt.GetDimValueRec(2,SalesInvLine."Shortcut Dimension 2 Code",DimValRec,FALSE,'');
                                        TmpCumSalesInv."Shortcut Dimension 2 Code" := SalesInvLine."Shortcut Dimension 2 Code";
                                        TmpCumSalesInv.Description := DimValRec.Name;
                                        TmpCumSalesInv.Amount := SalesInvLine.Amount;
                                        TmpCumSalesInv."Amount Including VAT" := SalesInvLine."Amount Including VAT";
                                        TmpCumSalesInv."VAT Base Amount" := SalesInvLine."VAT Base Amount";
                                        TmpCumSalesInv."Supervisor Name" := "Company Name"; //"Supervisor Name" is a carrier for "Company Name"
                                        TmpCumSalesInv."FA Posting Date" := "Posting Date"; //"FA Posting Date" is a carrier for "Posting Date"
                                        TmpCumSalesInv."Document No." := "No.";
                                        TmpCumSalesInv."Line No." := SalesInvLine."Line No.";
                                        TmpCumSalesInv."Service Order No." := SalesInvLine."Service Order No.";
                                        TmpCumSalesInv."Item No." := SalesInvLine."Item No.";
                                        TmpCumSalesInv."VAT Bus. Posting Group" := SalesInvLine."VAT Bus. Posting Group";
                                        TmpCumSalesInv."VAT Prod. Posting Group" := SalesInvLine."VAT Prod. Posting Group";
                                        TmpCumSalesInv."Location Code" := 'INVOICE'; //"Location Code" is a carrier for Document Type Text
                                        TmpCumSalesInv.Element := '';
                                        TmpCumSalesInv."Country/Region of Origin" := "Sales Invoice Header"."Country/Region of Origin";
                                        TmpCumSalesInv."Bin Code" := "Sales Invoice Header"."Country/Region of Destination"; //Bin Code carries country destination
                                        IF (SalesInvLine."Item No." <> '') AND
                                           PlantSetup."Plant Invoice Export per Item"
                                        THEN
                                          TmpCumSalesInv.Quantity := SalesInvLine.Quantity
                                        ELSE
                                          TmpCumSalesInv.Quantity := 1;
                                        TmpCumSalesInv."Arrival Order" := OrderNoPlant;
                                        TmpCumSalesInv.INSERT;
                                        IF NOT TmpExpCompanyRec.GET("Company Name") THEN BEGIN
                                          TmpExpCompanyRec.Company := "Company Name";
                                          TmpExpCompanyRec.INSERT;
                                        END
                                      END;
                                    UNTIL SalesInvLine.NEXT = 0;

                                  "Exported on" := TODAY;
                                  MODIFY;
                                END;

               ReqFilterFields=No.,Posting Date,Exported on }

    { 8098;    ;DataItem;                    ;
               DataItemTable=Table114;
               DataItemTableView=WHERE(Plant Credit Memo=CONST(Yes),
                                       Service Order No.=FILTER(<>''));
               OnAfterGetRecord=BEGIN
                                  RecRef.GETTABLE("Sales Cr.Memo Header");
                                  XMLportStatusDialogMgt.ShowExportStatus(RecRef);

                                  PlantSetup.GET;
                                  SalesCredMemoLine.SETRANGE("Document No.","No.");
                                  SalesCredMemoLine.SETRANGE(Type,SalesCredMemoLine.Type::"G/L Account");
                                  IF SalesCredMemoLine.FINDSET THEN
                                    REPEAT
                                      TmpCumSalesInv.SETRANGE("Document No.","No.");
                                      TmpCumSalesInv.SETRANGE("Service Order No.",SalesCredMemoLine."Service Order No.");
                                      TmpCumSalesInv.SETRANGE("Shortcut Dimension 2 Code",SalesCredMemoLine."Shortcut Dimension 2 Code");
                                      IF (SalesCredMemoLine."Item No." <> '') AND
                                         PlantSetup."Plant Invoice Export per Item"
                                      THEN
                                        TmpCumSalesInv.SETRANGE("Item No.",SalesCredMemoLine."Item No.");
                                      FillOrderNoPlant(
                                        SalesCredMemoLine."Arrival Order Type", SalesCredMemoLine."Arrival Order",
                                        SalesCredMemoLine."Removal Order Type", SalesCredMemoLine."Removal Order");
                                      TmpCumSalesInv.SETRANGE("Arrival Order", OrderNoPlant);
                                      IF TmpCumSalesInv.FIND('-') THEN BEGIN
                                        TmpCumSalesInv.Amount += SalesCredMemoLine.Amount;
                                        TmpCumSalesInv."Amount Including VAT" += SalesCredMemoLine."Amount Including VAT";
                                        TmpCumSalesInv."VAT Base Amount" += SalesCredMemoLine."VAT Base Amount";
                                        IF (SalesCredMemoLine."Item No." <> '') AND //hs
                                           PlantSetup."Plant Invoice Export per Item"
                                        THEN
                                          TmpCumSalesInv.Quantity += SalesCredMemoLine.Quantity;
                                        TmpCumSalesInv.MODIFY;
                                      END ELSE BEGIN
                                        DimMgt.GetDimValueRec(2,SalesCredMemoLine."Shortcut Dimension 2 Code",DimValRec,FALSE,'');
                                        TmpCumSalesInv."Shortcut Dimension 2 Code" := SalesCredMemoLine."Shortcut Dimension 2 Code";
                                        TmpCumSalesInv.Description := DimValRec.Name;
                                        TmpCumSalesInv.Amount := SalesCredMemoLine.Amount;
                                        TmpCumSalesInv."Amount Including VAT" := SalesCredMemoLine."Amount Including VAT";
                                        TmpCumSalesInv."VAT Base Amount" := SalesCredMemoLine."VAT Base Amount";
                                        TmpCumSalesInv."Supervisor Name" := "Company Name";
                                        TmpCumSalesInv."FA Posting Date" := "Posting Date";
                                        TmpCumSalesInv."Document No." := "No.";
                                        TmpCumSalesInv."Line No." := SalesCredMemoLine."Line No.";
                                        TmpCumSalesInv."Service Order No." := SalesCredMemoLine."Service Order No.";
                                        TmpCumSalesInv."Item No." := SalesInvLine."Item No.";
                                        TmpCumSalesInv."VAT Bus. Posting Group" := SalesCredMemoLine."VAT Bus. Posting Group";
                                        TmpCumSalesInv."VAT Prod. Posting Group" := SalesCredMemoLine."VAT Prod. Posting Group";
                                        TmpCumSalesInv."Location Code" := 'CREDIT';
                                        TmpCumSalesInv.Element := '';
                                        TmpCumSalesInv."Country/Region of Origin" := "Sales Cr.Memo Header"."Country/Region of Origin";
                                        IF (SalesCredMemoLine."Item No." <> '') AND
                                           PlantSetup."Plant Invoice Export per Item"
                                        THEN
                                          TmpCumSalesInv.Quantity := SalesCredMemoLine.Quantity
                                        ELSE
                                          TmpCumSalesInv.Quantity := 1;
                                        TmpCumSalesInv."Arrival Order" := OrderNoPlant;
                                        TmpCumSalesInv.INSERT;
                                        IF NOT TmpExpCompanyRec.GET("Company Name") THEN BEGIN
                                          TmpExpCompanyRec.Company := "Company Name";
                                          TmpExpCompanyRec.INSERT;
                                        END
                                      END;
                                    UNTIL SalesCredMemoLine.NEXT = 0;

                                  "Exported on" := TODAY;
                                  MODIFY;
                                END;

               ReqFilterFields=No.,Posting Date,Exported on }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1100525001;0;Container;
                  ContainerType=ContentArea }

      { 1100525000;1;Group  ;
                  CaptionML=[DEU=Optionen;
                             ENU=Options;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 1100525002;2;Field  ;
                  CaptionML=[DEU=Pfad;
                             ENU=Path Name;
                             NLD=Padnaam;
                             NOR=Navn p† filbane;
                             SVE=S”kv„g];
                  SourceExpr=PathName;
                  OnValidate=BEGIN
                               FileMgt.AddBackSlashToDirectoryName(PathName);
                             END;
                              }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      SalesInvLine@1100525022 : Record 113;
      TmpCumSalesInv@1100525021 : TEMPORARY Record 113;
      TmpExpCompanyRec@1100525020 : TEMPORARY Record 11012059;
      SalesCredMemoLine@1100525019 : Record 115;
      DimValRec@1100525018 : Record 349;
      PlantSetup@1100525017 : Record 11012550;
      RecRef@1100525000 : RecordRef;
      XMLportStatusDialogMgt@1100525001 : Codeunit 11130006;
      DimMgt@1100525016 : Codeunit 408;
      FileMgt@1100525002 : Codeunit 419;
      SalesRentalOrdersCheckedActive@1100525015 : Boolean;
      SalesRentalOrdersActive@1100525014 : Boolean;
      OrderNoPlant@1100525013 : Code[20];
      FileName@1100525012 : Text[250];
      PathName@1100525011 : Text[250];

    PROCEDURE ExportLines@1210190000();
    VAR
      TempBlob@1100525003 : Record 99008535;
      ThreeTierAutomationMgt@1100525002 : Codeunit 419;
      OutStr@1100525001 : OutStream;
      WrittenToOutStream@1100525000 : Boolean;
    BEGIN
      TmpCumSalesInv.RESET;
      IF TmpExpCompanyRec.FINDSET THEN BEGIN
        REPEAT
          TempBlob.Blob.CREATEOUTSTREAM(OutStr,TEXTENCODING::Windows);
          WrittenToOutStream := FALSE;
          FileName := STRSUBSTNO('%1SOINV_%2_%3.txt',PathName,TmpExpCompanyRec.Company, TODAY);
          //Note:
          //"Supervisor Name" is a carrier for "Company Name"
          //"FA Posting Date" is a carrier for "Posting Date"
          //"Location Code" is a carrier for Document Type Text
          //"Phase Code" is a carrier for "Country of Destination"
          TmpCumSalesInv.SETRANGE("Supervisor Name",TmpExpCompanyRec.Company);
          IF TmpCumSalesInv.FIND('-') THEN
            REPEAT
              OutStr.WRITETEXT(
                STRSUBSTNO(
                  '"%1","%2","%3","%4","%5","%6","%7","%8","%9",',
                  TmpCumSalesInv."FA Posting Date",
                  TmpCumSalesInv."Document No.",
                  TmpCumSalesInv."Service Order No.",
                  TmpCumSalesInv."Shortcut Dimension 2 Code",
                  TmpCumSalesInv.Description,
                  TmpCumSalesInv."Amount Including VAT",
                  TmpCumSalesInv."VAT Base Amount",
                  TmpCumSalesInv.Amount,
                  TmpCumSalesInv."VAT Bus. Posting Group") +
                STRSUBSTNO(
                  '"%1","%2","%3","%4","%5","%6","%7","%8"',
                  TmpCumSalesInv."VAT Prod. Posting Group",
                  TmpCumSalesInv."Location Code",
                  TmpCumSalesInv.Element,
                  TmpCumSalesInv."Country/Region of Origin",
                  TmpCumSalesInv."Item No.",
                  TmpCumSalesInv.Quantity,
                  TmpCumSalesInv."Bin Code",
                  TmpCumSalesInv."Arrival Order"));
              OutStr.WRITETEXT; // New line
              WrittenToOutStream := TRUE;
              TmpCumSalesInv.DELETE;
            UNTIL TmpCumSalesInv.NEXT = 0;
          TmpExpCompanyRec.DELETE;
          IF WrittenToOutStream THEN
            ThreeTierAutomationMgt.BLOBExport4PS(TempBlob, FileName, FALSE, TRUE);
        UNTIL TmpExpCompanyRec.NEXT = 0;
      END;
    END;

    PROCEDURE FillOrderNoPlant@1100485000(IArrivalOrderType@1100485000 : Option;IArrivalOrderNo@1100485001 : Code[20];IRemovalOrderType@1100485003 : Option;IRemovalOrderNo@1100485002 : Code[20]);
    VAR
      lvSalesOrderPlantRelRec@1100485004 : Record 11012787;
    BEGIN
      OrderNoPlant := '';

      //* Alleen als granule 'Verhuurorders' (Heras) actief is. Voor overige klanten moet de werking ongewijzigd blijven.
      //* Dus dan niet nog eens extra comprimeren per order.
      IF NOT SalesRentalOrdersCheckedActive THEN BEGIN
        //* Granule 'Verhuurorders' is actief als in deze tabel records van een ander bedrijf aanwezig zijn.
        //* NB: Deze tabel zit ook in granule 'Verhuurcontracten' maar dan altijd in zelfde bedrijf.
        //* Niet op permissie testen, bij klanten die deze granule niet hebben staan er toch geen records in.
        //* De gebruiker die de facturen exporteerd als wel records aanwezig moet maar leesrechten hebben.
        lvSalesOrderPlantRelRec.SETFILTER("Sales Company Name", '<>%1', COMPANYNAME);
        IF lvSalesOrderPlantRelRec.FINDFIRST THEN
          SalesRentalOrdersActive := TRUE;
        SalesRentalOrdersCheckedActive := TRUE;
      END;
      IF NOT SalesRentalOrdersActive THEN
        EXIT;

      IF IArrivalOrderNo <> '' THEN BEGIN
        IF IArrivalOrderType IN
          [SalesInvLine."Arrival Order Type"::"Plant Order",
           SalesInvLine."Arrival Order Type"::"Transport Order"]
        THEN
          OrderNoPlant := IArrivalOrderNo;
      END ELSE BEGIN
        IF IRemovalOrderNo <> '' THEN BEGIN
          IF IRemovalOrderType IN
            [SalesInvLine."Removal Order Type"::"Plant Order",
             SalesInvLine."Removal Order Type"::"Exit-order",
             SalesInvLine."Removal Order Type"::"Transport Order"]
          THEN
            OrderNoPlant := IRemovalOrderNo;
        END;
      END;
    END;

    BEGIN
    {
      Copied from R11012621 'Export Plant Invoices Projects', and replaced "Job No."(Project No.) by "Service Order No."
    }
    END.
  }
  RDLDATA
  {
  }
}

