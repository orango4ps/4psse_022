OBJECT Table 11012301 Item Import Setup
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    CaptionML=[ENU=Item Import Setup;
               NOR=Innstillinger for artikkelimport;
               SVE=Inst„llningar f”r artikelimport];
  }
  FIELDS
  {
    { 10  ;   ;Primary Key         ;Code10        ;CaptionML=[ENU=Primary Key;
                                                              NOR=Prim‘rn›kkel;
                                                              SVE=Prim„rnyckel] }
    { 15  ;   ;Publications        ;Boolean       ;CaptionML=[ENU=Publications;
                                                              NOR=Publikasjoner;
                                                              SVE=Publikationer] }
    { 20  ;   ;Product Groups      ;Boolean       ;CaptionML=[ENU=Product Groups;
                                                              NOR=Produktgrupper;
                                                              SVE=Produktgrupper] }
    { 30  ;   ;Product Classes     ;Boolean       ;CaptionML=[ENU=Product Classes;
                                                              NOR=Produktklasser;
                                                              SVE=Produktklasser] }
    { 40  ;   ;Product Class Synonyms;Boolean     ;CaptionML=[ENU=Product Class Synonyms;
                                                              NOR=Produktklassesynonymer;
                                                              SVE=Produktklassynonymer] }
    { 50  ;   ;Features            ;Boolean       ;CaptionML=[ENU=Features;
                                                              NOR=Funksjoner;
                                                              SVE=Funktioner] }
    { 60  ;   ;Limits              ;Boolean       ;CaptionML=[ENU=Limits;
                                                              NOR=Grenser;
                                                              SVE=Gr„nser] }
    { 70  ;   ;Product Class Features;Boolean     ;CaptionML=[ENU=Product Class Features;
                                                              NOR=Produktklassefunksjoner;
                                                              SVE=Produktklassfunktioner] }
    { 90  ;   ;Product Class Feature Limits;Boolean;
                                                   CaptionML=[ENU=Product Class Feature Limits;
                                                              NOR=Grenser for Produktklassefunksjon;
                                                              SVE=Gr„nser f”r produktklassfunktion] }
    { 100 ;   ;Units               ;Boolean       ;CaptionML=[ENU=Units;
                                                              NOR=Antall;
                                                              SVE=Antal] }
    { 110 ;   ;Packaging           ;Boolean       ;CaptionML=[ENU=Packaging;
                                                              NOR=Embalasje;
                                                              SVE=F”rpackning] }
    { 120 ;   ;Vendors             ;Boolean       ;CaptionML=[ENU=Vendors;
                                                              NOR=Leverand›rer;
                                                              SVE=Leverant”rer] }
    { 130 ;   ;Product Specifications;Boolean     ;CaptionML=[ENU=Product Specifications;
                                                              NOR=Produktspesifikasjoner;
                                                              SVE=Produktspecifikationer] }
    { 140 ;   ;Price History Trade Items;Boolean  ;CaptionML=[ENU=Price History Trade Items;
                                                              NOR=Prishistorikk for katalogartikler;
                                                              SVE=Prishistorik f”r skaffningsartiklar] }
    { 145 ;   ;Charge Trade Items  ;Boolean       ;CaptionML=[ENU=Charge Trade Items;
                                                              NOR=Gebyr for katalogartikler;
                                                              SVE=Žndra skaffningsartiklar] }
    { 170 ;   ;Basic Items         ;Boolean       ;CaptionML=[ENU=Basic Items;
                                                              NOR=Fabrikantartikler;
                                                              SVE=Basartiklar] }
    { 180 ;   ;Trade Items         ;Boolean       ;CaptionML=[ENU=Trade Items;
                                                              NOR=Katalogartikler;
                                                              SVE=Skaffningsartiklar] }
    { 190 ;   ;Feg Items           ;Boolean       ;CaptionML=[ENU=Trade Items (FEG-format);
                                                              NOR=Katalogartikler (FEG-format);
                                                              SVE=Skaffningsartiklar (FEG-format)] }
    { 200 ;   ;Import Interval     ;DateFormula   ;CaptionML=[ENU=Import Interval;
                                                              NOR=Importer Intervall;
                                                              SVE=Importintervall] }
    { 210 ;   ;Import Date-Time    ;Decimal       ;CaptionML=[ENU=Import Date-Time;
                                                              NOR=Importer Dato-tid;
                                                              SVE=Importera datum-tid];
                                                   DecimalPlaces=2:;
                                                   Editable=No;
                                                   AutoFormatType=10;
                                                   AutoFormatExpr='DATETIME' }
    { 211 ;   ;Start Import Date-Time;DateTime    ;CaptionML=[ENU=Start Import Date-Time;
                                                              NOR=Start import av dato og tid;
                                                              SVE=Starta import av datum och tid] }
    { 215 ;   ;Start Batch (Import);Boolean       ;CaptionML=[ENU=Start Batch (Import);
                                                              NOR=Start Batch (importer);
                                                              SVE=Starta batch (importera)] }
    { 216 ;   ;Start Batch (Check) ;Boolean       ;CaptionML=[ENU=Start Batch (Check);
                                                              NOR=Start Batch (kontroller);
                                                              SVE=Starta batch (kontrollera)] }
    { 217 ;   ;Start Batch (Update);Boolean       ;CaptionML=[ENU=Start Batch (Update);
                                                              NOR=Start Batch (oppdater);
                                                              SVE=Starta batch (uppdatera)] }
    { 220 ;   ;Update Item Data    ;Boolean       ;CaptionML=[ENU=Update Item Data;
                                                              NOR=Oppdater artikkeldata;
                                                              SVE=Uppdatera artikeldata] }
    { 230 ;   ;Create Search Index ;Boolean       ;CaptionML=[ENU=Create Search Index Items;
                                                              NOR=Opprette S›keindeks for artikler;
                                                              SVE=Skapa s”kindex f”r artiklar] }
    { 240 ;   ;Export Message to Excel;Boolean    ;CaptionML=[ENU=Export Message to Excel;
                                                              NOR=Eksporter Melding til Excel;
                                                              SVE=Exportera meddelande till Excel] }
    { 250 ;   ;Delete Existing Import Data;Boolean;CaptionML=[ENU=Delete Existing Import Data;
                                                              NOR=Slett eksisterende importdata;
                                                              SVE=Ta bort befintliga importdata] }
    { 260 ;   ;Check Basic Items   ;Boolean       ;CaptionML=[ENU=Check Basic Items;
                                                              NOR=Kontroller Fabrikantartikler;
                                                              SVE=Kontrollera basartiklar] }
    { 270 ;   ;Check Trade Items   ;Boolean       ;CaptionML=[ENU=Check Trade Items;
                                                              NOR=Kontroller katalogartikler;
                                                              SVE=Kontrollera skaffningsartiklar] }
    { 280 ;   ;Update Basic Items  ;Boolean       ;CaptionML=[ENU=Update Basic Items;
                                                              NOR=Oppdater Fabrikantartikler;
                                                              SVE=Uppdatera basartiklar] }
    { 290 ;   ;Update Trade Items  ;Boolean       ;CaptionML=[ENU=Update Trade Items;
                                                              NOR=Oppdater katalogartikler;
                                                              SVE=Uppdatera skaffningsartiklar] }
    { 300 ;   ;Update Navision Items;Boolean      ;CaptionML=[ENU=Update Navision Items;
                                                              NOR=Oppdater Navision-artikler;
                                                              SVE=Uppdatera Navision-artiklar] }
    { 400 ;   ;Run Type            ;Option        ;OnValidate=BEGIN
                                                                IF "Run Type" = "Run Type"::"Job Queue" THEN BEGIN
                                                                  CLEAR("Import Interval");
                                                                  CLEAR("Start Import Date-Time");
                                                                END;
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Run Type;
                                                   OptionCaptionML=ENU=NAS,Job Queue;
                                                   OptionString=NAS,Job Queue }
  }
  KEYS
  {
    {    ;Primary Key                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ItemSetup@11012000 : Record 11012300;
      TempBlob@1100525000 : Record 99008535;
      ImportItemDataCU@1100485000 : Codeunit 11012300;
      Text000@1100529500 : TextConst 'ENU=Select File...;SVE=V„lj filÿ...';
      ClientTypeManagement@1100529501 : Codeunit 4030;

    PROCEDURE ImportGeneralDataVersion11@1100485000(ImportSetup@11012000 : Record 11012301);
    VAR
      PathName@1100485006 : Text[250];
    BEGIN
      PathName := GetPathName;
      ImportETIMPublications11(ImportSetup, ItemSetup, PathName);
      ImportETIMProductGroups11(ImportSetup, ItemSetup, PathName);
      ImportETIMProductClasses11(ImportSetup, ItemSetup, PathName);
      ImportETIMProdClassSynonyms11(ImportSetup, ItemSetup, PathName);
      ImportETIMFeatures11(ImportSetup, ItemSetup, PathName);
      ImportETIMLimits11(ImportSetup, ItemSetup, PathName);
      ImportETIMProdClassFeatures11(ImportSetup, ItemSetup, PathName);
      ImportETIMProdClssFeatLimits11(ImportSetup, ItemSetup, PathName);
      ImportETIMUnits11(ImportSetup, ItemSetup, PathName);
      ImportPackagingOptions10(ImportSetup, ItemSetup, PathName);
      ImportETIMVendorsCentralMgt10(ImportSetup, ItemSetup, PathName);
    END;

    PROCEDURE ImportItemDataVersion10@1100485003(ImportSetup@11012000 : Record 11012301);
    VAR
      PathName@1100485007 : Text[250];
    BEGIN
      PathName := GetPathName;

      ImportSetup."Import Date-Time" := Datetime(TODAY, TIME);
      ImportSetup.MODIFY;

      IF ImportSetup."Basic Items" THEN BEGIN
        ItemSetup.TESTFIELD("Basic Items");
        ImportItemDataCU.ImportBasicItems;
        CLEAR(ImportItemDataCU);
      END;

      ImportETIMProdSpecifications10(ImportSetup, ItemSetup, PathName);

      IF ImportSetup."Trade Items" THEN BEGIN
        ItemSetup.TESTFIELD("Trade Items");
        ImportItemDataCU.ImportTradeItems;
        CLEAR(ImportItemDataCU);
      END;

      ImportTradeItemCharge10(ImportSetup, ItemSetup, PathName);

      ImportPriceHistoryTradeItems10(ImportSetup, ItemSetup, PathName);
    END;

    LOCAL PROCEDURE ImportTradeItemCharge10@1100525000(ItemImportSetup@1100525000 : Record 11012301;ItemSetup@1100525001 : Record 11012300;PathName@1100525008 : Text[250]);
    VAR
      ImportItemData@1100528400 : Codeunit 11012300;
      FileName@1100525002 : Text[1024];
    BEGIN
      IF ItemImportSetup."Charge Trade Items" THEN BEGIN
        ItemSetup.TESTFIELD("Charge Trade Items");
        FileName := PathName + ItemSetup."Charge Trade Items";
        IF NOT GUIALLOWED THEN
          IF NOT FILE.EXISTS(FileName) THEN
            EXIT;

        ImportItemData.ImportETIMChargesV10;
      END;
    END;

    LOCAL PROCEDURE ImportETIMVendorsCentralMgt10@1100525007(ItemImportSetup@1100525000 : Record 11012301;ItemSetup@1100525001 : Record 11012300;PathName@1100525008 : Text[250]);
    VAR
      ETIMVendorsV10@1100525004 : XMLport 11012295;
      IStream@1100525003 : InStream;
      ImportFile@1100525005 : File;
      FileName@1100525002 : Text[1024];
      FromFile@1100529500 : Text;
    BEGIN
      IF ItemImportSetup.Vendors THEN BEGIN
        ItemSetup.TESTFIELD(Vendors);

        IF ClientTypeManagement.IsCommonWebClientType THEN
          UPLOADINTOSTREAM(Text000, '', '', FromFile, IStream)
        ELSE BEGIN
          FileName := PathName + ItemSetup.Vendors;
          IF NOT CreateInStreamOnImportFile(FileName, ImportFile, IStream) THEN
            EXIT;
        END;

        ETIMVendorsV10.SETSOURCE(IStream);
        ETIMVendorsV10.IMPORT;
        IF NOT ClientTypeManagement.IsCommonWebClientType THEN
          CloseImportFile(ImportFile);
      END;
    END;

    LOCAL PROCEDURE ImportPackagingOptions10@1100525014(ItemImportSetup@1100525000 : Record 11012301;ItemSetup@1100525001 : Record 11012300;PathName@1100525008 : Text[250]);
    BEGIN
      IF ItemImportSetup.Packaging THEN BEGIN
        ItemSetup.TESTFIELD(Packaging);
        ImportOptions10(PathName + 'KL_verpak.txt', 0);
        ImportOptions10(PathName + 'KL_eenheid.txt', 1);
        ImportOptions10(PathName + 'KL_afmeting.txt', 1);
        ImportOptions10(PathName + 'KL_gewicht.txt', 1);
        ImportOptions10(PathName + 'KL_levertijd.txt', 1);
        ImportOptions10(PathName + 'KL_toko.txt', 2);
      END;
    END;

    LOCAL PROCEDURE ImportOptions10@1100525018(FileName@1100525008 : Text[1024];Selection@1100525000 : Integer);
    VAR
      FileMgt@1100525004 : Codeunit 419;
      ETIMOptionsV10@1100525001 : XMLport 11012296;
      IStream@1100525003 : InStream;
      ImportFile@1100525002 : File;
      FromFile@1100529501 : Text;
    BEGIN
      IF GUIALLOWED THEN BEGIN
        IF NOT FileMgt.ClientFileExists(FileName) THEN
          EXIT;
      END ELSE BEGIN
        IF NOT EXISTS(FileName) THEN
          EXIT;
      END;

      IF ClientTypeManagement.IsCommonWebClientType THEN
        UPLOADINTOSTREAM(Text000, '', '', FromFile, IStream)
      ELSE
        IF NOT CreateInStreamOnImportFile(FileName, ImportFile, IStream) THEN
          EXIT;

      ETIMOptionsV10.SETSOURCE(IStream);
      ETIMOptionsV10.SetSelection(Selection);
      ETIMOptionsV10.IMPORT;
      IF NOT ClientTypeManagement.IsCommonWebClientType THEN
        CloseImportFile(ImportFile);
    END;

    LOCAL PROCEDURE ImportETIMProductGroups11@1100525001(ItemImportSetup@1100525000 : Record 11012301;ItemSetup@1100525001 : Record 11012300;PathName@1100525008 : Text[250]);
    VAR
      ETIMProductGroupsV11@1100525004 : XMLport 11012301;
      IStream@1100525003 : InStream;
      ImportFile@1100525005 : File;
      FileName@1100525002 : Text[1024];
      FromFile@1100529500 : Text;
    BEGIN
      IF ItemImportSetup."Product Groups" THEN BEGIN
        ItemSetup.TESTFIELD("Product Groups");

        IF ClientTypeManagement.IsCommonWebClientType THEN
          UPLOADINTOSTREAM(Text000, '', '', FromFile, IStream)
        ELSE BEGIN
          FileName := PathName + ItemSetup."Product Groups";
          IF NOT CreateInStreamOnImportFile(FileName, ImportFile, IStream) THEN
            EXIT;
        END;

        ETIMProductGroupsV11.SETSOURCE(IStream);
        ETIMProductGroupsV11.IMPORT;
        IF NOT ClientTypeManagement.IsCommonWebClientType THEN
          CloseImportFile(ImportFile);
      END;
    END;

    LOCAL PROCEDURE ImportETIMProductClasses11@1100525002(ItemImportSetup@1100525000 : Record 11012301;ItemSetup@1100525001 : Record 11012300;PathName@1100525008 : Text[250]);
    VAR
      ETIMProductClassesV11@1100525004 : XMLport 11012302;
      IStream@1100525003 : InStream;
      ImportFile@1100525005 : File;
      FileName@1100525002 : Text[1024];
      FromFile@1100529500 : Text;
    BEGIN
      IF ItemImportSetup."Product Classes" THEN BEGIN
        ItemSetup.TESTFIELD("Product Classes");

        IF ClientTypeManagement.IsCommonWebClientType THEN
          UPLOADINTOSTREAM(Text000, '', '', FromFile, IStream)
        ELSE BEGIN
          FileName := PathName + ItemSetup."Product Classes";
          IF NOT CreateInStreamOnImportFile(FileName, ImportFile, IStream) THEN
            EXIT;
        END;

        ETIMProductClassesV11.SETSOURCE(IStream);
        ETIMProductClassesV11.IMPORT;
        IF NOT ClientTypeManagement.IsCommonWebClientType THEN
          CloseImportFile(ImportFile);
      END;
    END;

    LOCAL PROCEDURE ImportETIMProdClassSynonyms11@1100525503(ItemImportSetup@1100525000 : Record 11012301;ItemSetup@1100525001 : Record 11012300;PathName@1100525008 : Text[250]);
    VAR
      ETIMProdClassSynonymsV11@1100525004 : XMLport 11012303;
      IStream@1100525003 : InStream;
      ImportFile@1100525005 : File;
      FileName@1100525002 : Text[1024];
      FromFile@1100529500 : Text;
    BEGIN
      IF ItemImportSetup."Product Class Synonyms" THEN BEGIN
        ItemSetup.TESTFIELD("Product Class Synonyms");

        IF ClientTypeManagement.IsCommonWebClientType THEN
          UPLOADINTOSTREAM(Text000, '', '', FromFile, IStream)
        ELSE BEGIN
          FileName := PathName + ItemSetup."Product Class Synonyms";
          IF NOT CreateInStreamOnImportFile(FileName, ImportFile, IStream) THEN
            EXIT;
        END;

        ETIMProdClassSynonymsV11.SETSOURCE(IStream);
        ETIMProdClassSynonymsV11.IMPORT;
        IF NOT ClientTypeManagement.IsCommonWebClientType THEN
          CloseImportFile(ImportFile);
      END;
    END;

    LOCAL PROCEDURE ImportETIMFeatures11@1100525504(ItemImportSetup@1100525000 : Record 11012301;ItemSetup@1100525001 : Record 11012300;PathName@1100525008 : Text[250]);
    VAR
      ETIMFeaturesV11@1100525004 : XMLport 11012304;
      IStream@1100525003 : InStream;
      ImportFile@1100525009 : File;
      FileName@1100525002 : Text[1024];
      FromFile@1100529500 : Text;
    BEGIN
      IF ItemImportSetup.Features THEN BEGIN
        ItemSetup.TESTFIELD(Features);

        IF ClientTypeManagement.IsCommonWebClientType THEN
          UPLOADINTOSTREAM(Text000, '', '', FromFile, IStream)
        ELSE BEGIN
          FileName := PathName + ItemSetup.Features;
          IF NOT CreateInStreamOnImportFile(FileName, ImportFile, IStream) THEN
            EXIT;
        END;

        ETIMFeaturesV11.SETSOURCE(IStream);
        ETIMFeaturesV11.IMPORT;
        IF NOT ClientTypeManagement.IsCommonWebClientType THEN
          CloseImportFile(ImportFile);
      END;
    END;

    LOCAL PROCEDURE ImportETIMUnits11@1100525505(ItemImportSetup@1100525000 : Record 11012301;ItemSetup@1100525001 : Record 11012300;PathName@1100525008 : Text[250]);
    VAR
      ETIMUnitsV11@1100525004 : XMLport 11012305;
      IStream@1100525003 : InStream;
      ImportFile@1100525009 : File;
      FileName@1100525002 : Text[1024];
      FromFile@1100529500 : Text;
    BEGIN
      IF ItemImportSetup.Units THEN BEGIN
        ItemSetup.TESTFIELD(Units);

        IF ClientTypeManagement.IsCommonWebClientType THEN
          UPLOADINTOSTREAM(Text000, '', '', FromFile, IStream)
        ELSE BEGIN
          FileName := PathName + ItemSetup.Units;
          IF NOT CreateInStreamOnImportFile(FileName, ImportFile, IStream) THEN
            EXIT;
        END;

        ETIMUnitsV11.SETSOURCE(IStream);
        ETIMUnitsV11.IMPORT;
        IF NOT ClientTypeManagement.IsCommonWebClientType THEN
          CloseImportFile(ImportFile);
      END;
    END;

    LOCAL PROCEDURE ImportETIMLimits11@1100525506(ItemImportSetup@1100525000 : Record 11012301;ItemSetup@1100525001 : Record 11012300;PathName@1100525008 : Text[250]);
    VAR
      ETIMLimitsV11@1100525004 : XMLport 11012306;
      IStream@1100525003 : InStream;
      ImportFile@1100525005 : File;
      FileName@1100525002 : Text[1024];
      FromFile@1100529500 : Text;
    BEGIN
      IF ItemImportSetup.Limits THEN BEGIN
        ItemSetup.TESTFIELD(Limits);

        IF ClientTypeManagement.IsCommonWebClientType THEN
          UPLOADINTOSTREAM(Text000, '', '', FromFile, IStream)
        ELSE BEGIN
          FileName := PathName + ItemSetup.Limits;
          IF NOT CreateInStreamOnImportFile(FileName, ImportFile, IStream) THEN
            EXIT;
        END;

        ETIMLimitsV11.SETSOURCE(IStream);
        ETIMLimitsV11.IMPORT;
        IF NOT ClientTypeManagement.IsCommonWebClientType THEN
          CloseImportFile(ImportFile);
      END;
    END;

    LOCAL PROCEDURE ImportETIMProdClassFeatures11@1100525008(ItemImportSetup@1100525000 : Record 11012301;ItemSetup@1100525001 : Record 11012300;PathName@1100525008 : Text[250]);
    VAR
      ETIMProdClassFeaturesV11@1100525004 : XMLport 11012307;
      IStream@1100525003 : InStream;
      ImportFile@1100525005 : File;
      FileName@1100525002 : Text[1024];
      FromFile@1100529500 : Text;
    BEGIN
      IF ItemImportSetup."Product Class Features" THEN BEGIN
        ItemSetup.TESTFIELD("Product Class Features");

        IF ClientTypeManagement.IsCommonWebClientType THEN
          UPLOADINTOSTREAM(Text000, '', '', FromFile, IStream)
        ELSE BEGIN
          FileName := PathName + ItemSetup."Product Class Features";
          IF NOT CreateInStreamOnImportFile(FileName, ImportFile, IStream) THEN
            EXIT;
        END;

        ETIMProdClassFeaturesV11.SETSOURCE(IStream);
        ETIMProdClassFeaturesV11.IMPORT;
        IF NOT ClientTypeManagement.IsCommonWebClientType THEN
          CloseImportFile(ImportFile);
      END;
    END;

    LOCAL PROCEDURE ImportETIMProdClssFeatLimits11@1100525010(ItemImportSetup@1100525000 : Record 11012301;ItemSetup@1100525001 : Record 11012300;PathName@1100525008 : Text[250]);
    VAR
      ETIMLimitsFeatureV11@1100525004 : XMLport 11012308;
      IStream@1100525003 : InStream;
      ImportFile@1100525005 : File;
      FileName@1100525002 : Text[1024];
      FromFile@1100529501 : Text;
    BEGIN
      IF ItemImportSetup."Product Class Feature Limits" THEN BEGIN
        ItemSetup.TESTFIELD("Product Class Feature Limits");

        IF ClientTypeManagement.IsCommonWebClientType THEN
          UPLOADINTOSTREAM(Text000, '', '', FromFile, IStream)
        ELSE BEGIN
          FileName := PathName + ItemSetup."Product Class Feature Limits";
          IF NOT CreateInStreamOnImportFile(FileName, ImportFile, IStream) THEN
            EXIT;
        END;

        ETIMLimitsFeatureV11.SETSOURCE(IStream);
        ETIMLimitsFeatureV11.IMPORT;
        IF NOT ClientTypeManagement.IsCommonWebClientType THEN
          CloseImportFile(ImportFile);
      END;
    END;

    LOCAL PROCEDURE ImportETIMPublications11@1100525009(ItemImportSetup@1100525000 : Record 11012301;ItemSetup@1100525001 : Record 11012300;PathName@1100525008 : Text[250]);
    VAR
      ETIMPublicationsV11@1100525004 : XMLport 11012309;
      IStream@1100525003 : InStream;
      ImportFile@1100525005 : File;
      FileName@1100525002 : Text[1024];
      FromFile@1100529500 : Text;
    BEGIN
      IF ItemImportSetup.Publications THEN BEGIN
        ItemSetup.TESTFIELD(Publications);

        IF ClientTypeManagement.IsCommonWebClientType THEN
          UPLOADINTOSTREAM(Text000, '', '', FromFile, IStream)
        ELSE BEGIN
          FileName := PathName + ItemSetup.Publications;
          IF NOT CreateInStreamOnImportFile(FileName, ImportFile, IStream) THEN
            EXIT;
        END;

        ETIMPublicationsV11.SETSOURCE(IStream);
        ETIMPublicationsV11.IMPORT;
        IF NOT ClientTypeManagement.IsCommonWebClientType THEN
          CloseImportFile(ImportFile);
      END;
    END;

    LOCAL PROCEDURE ImportETIMProdSpecifications10@1100525011(ItemImportSetup@1100525000 : Record 11012301;ItemSetup@1100525001 : Record 11012300;PathName@1100525008 : Text[250]);
    VAR
      ImportItemData@1100528400 : Codeunit 11012300;
      FileName@1100525002 : Text[1024];
    BEGIN
      IF ItemImportSetup."Product Specifications" THEN BEGIN
        ItemSetup.TESTFIELD("Product Specifications");
        FileName := PathName + ItemSetup."Product Specifications";
        IF NOT GUIALLOWED THEN
          IF NOT FILE.EXISTS(FileName) THEN
            EXIT;

        ImportItemData.ImportETIMProductSpecsV10;
      END;
    END;

    LOCAL PROCEDURE ImportPriceHistoryTradeItems10@1100525012(ItemImportSetup@1100525000 : Record 11012301;ItemSetup@1100525001 : Record 11012300;PathName@1100525008 : Text[250]);
    VAR
      ImportItemData@1100528400 : Codeunit 11012300;
      FileName@1100525002 : Text[1024];
    BEGIN
      IF ItemImportSetup."Price History Trade Items" THEN BEGIN
        ItemSetup.TESTFIELD("Price History Trade Items");
        FileName := PathName + ItemSetup."Price History Trade Items";
        IF NOT GUIALLOWED THEN
          IF NOT FILE.EXISTS(FileName) THEN
            EXIT;

        ImportItemData.ImportETIMPriceHistoryV10;
      END;
    END;

    PROCEDURE Datetime@4(Date@1000 : Date;Time@1001 : Time) : Decimal;
    BEGIN
      //copied from codeunit 416 because of license problems
      IF (Date = 0D) THEN
        EXIT(0);

      IF Time = 0T THEN
        EXIT((Date-00000101D) * 86.4)
      ELSE
        EXIT(((Date-00000101D) * 86.4) + (Time - 000000T)/1000000);
    END;

    PROCEDURE GetPathName@1100485004() PathName : Text[250];
    BEGIN
      ItemSetup.GET;
      ItemSetup.TESTFIELD("Pathname Files Item Data");
      IF COPYSTR(ItemSetup."Pathname Files Item Data", STRLEN(ItemSetup."Pathname Files Item Data"), 1) <> '\' THEN
        ItemSetup."Pathname Files Item Data" := ItemSetup."Pathname Files Item Data" + '\';
      EXIT(ItemSetup."Pathname Files Item Data");
    END;

    PROCEDURE ExecStep1ImportCommonData@1100525003();
    BEGIN
      ItemSetup.GET;
      ImportGeneralDataVersion11(Rec);
    END;

    PROCEDURE ExecStep1ImportItemDataSiB@1100528300();
    VAR
      FileImportMgtCU@1100528302 : Codeunit 11072075;
      TradeItemRec@1100528301 : Record 11012317;
    BEGIN
      FileImportMgtCU.ProcessImportTradeItems(TradeItemRec.TABLECAPTION);
    END;

    PROCEDURE ExecStep2ImportItemData@1100525004();
    BEGIN
      ImportItemDataVersion10(Rec);
    END;

    PROCEDURE ExecStep3Check@1100525005();
    BEGIN
      IF "Check Basic Items" THEN
        ImportItemDataCU.CheckBasicItems;
      IF "Check Trade Items" THEN
        ImportItemDataCU.CheckTradeItems;
    END;

    PROCEDURE ExecStep4Process@1100525006(VendorCode@1100528300 : Code[20]);
    VAR
      TradeItemMessageRec@1100525000 : Record 11012337;
      BasicItemMessageRec@1100525001 : Record 11012336;
    BEGIN
      IF (VendorCode <> '') THEN //Full Import from Feg-Items
        ImportItemDataCU.SetSelectionExpired(VendorCode);

      IF "Update Basic Items" THEN BEGIN
        IF "Export Message to Excel" THEN BEGIN
          BasicItemMessageRec.SETRANGE("Ignore Message", FALSE);
          BasicItemMessageRec.SETFILTER("Compress Level", '..10');
          ImportItemDataCU.ExportBasicItemMessageToExcel(BasicItemMessageRec, TRUE);
        END;
        ImportItemDataCU.UpdateBasicItems;
      END;
      IF "Update Trade Items" THEN BEGIN
        IF "Export Message to Excel" THEN BEGIN
          TradeItemMessageRec.SETRANGE("Ignore Message", FALSE);
          TradeItemMessageRec.SETFILTER("Compress Level", '..10');
          TradeItemMessageRec.SETFILTER("Import Type", '<>%1', TradeItemMessageRec."Import Type"::"Web Service");
          ImportItemDataCU.ExportTradeItemMessageToExcel(TradeItemMessageRec, TRUE);
        END;
        ImportItemDataCU.UpdateTradeItems;
      END;
    END;

    LOCAL PROCEDURE CreateInStreamOnImportFile@1100525016(ImportFileName@1100525001 : Text;VAR ImportFile@1100525002 : File;VAR IStream@1100525003 : InStream) : Boolean;
    VAR
      FileMgt@1100525005 : Codeunit 419;
    BEGIN
      IF GUIALLOWED THEN BEGIN
        CLEAR(TempBlob); //TempBlob must be a global var, otherwise IStream can be empty.
        FileMgt.BLOBImport4PS(TempBlob, ImportFileName, FALSE);
        TempBlob.Blob.CREATEINSTREAM(IStream);
      END ELSE BEGIN
        IF NOT FILE.EXISTS(ImportFileName) THEN
          EXIT(FALSE);
        ImportFile.OPEN(ImportFileName);
        ImportFile.CREATEINSTREAM(IStream);
      END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CloseImportFile@1100525017(VAR ImportFile@1100525000 : File);
    BEGIN
      IF NOT GUIALLOWED THEN
        ImportFile.CLOSE;
    END;

    BEGIN
    END.
  }
}

