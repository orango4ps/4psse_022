OBJECT Report 11020228 Activate Inventory Value SKU
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=ZuschlÑge Lagerhaltungsdaten realisieren;
               ENU=Activate Inventory Value SKU;
               NLD=Toeslagen SKU's effectueren;
               NOR=Aktiver Lagerverdi LFE];
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   InventorySetup.GET; //**4PS
                 END;

  }
  DATASET
  {
    { 8129;    ;DataItem;                    ;
               DataItemTable=Table27;
               DataItemTableView=SORTING(No.);
               OnPreDataItem=VAR
                               TempErrorBuf@1000 : TEMPORARY Record 5890;
                             BEGIN
                               ItemJnlTemplate.GET(ItemJnlLine."Journal Template Name");
                               ItemJnlTemplate.TESTFIELD(Type,ItemJnlTemplate.Type::Revaluation);

                               ItemJnlBatch.GET(ItemJnlLine."Journal Template Name",ItemJnlLine."Journal Batch Name");
                               IF NextDocNo = '' THEN BEGIN
                                 IF ItemJnlBatch."No. Series" <> '' THEN BEGIN
                                   ItemJnlLine.SETRANGE("Journal Template Name",ItemJnlLine."Journal Template Name");
                                   ItemJnlLine.SETRANGE("Journal Batch Name",ItemJnlLine."Journal Batch Name");
                                   IF NOT ItemJnlLine.FINDFIRST THEN
                                     NextDocNo := NoSeriesMgt.GetNextNo(ItemJnlBatch."No. Series",PostingDate,FALSE);
                                   ItemJnlLine.INIT;
                                 END;
                                 IF NextDocNo = '' THEN
                                   ERROR(Text003);
                               END;

                               CalcInvtValCheck.SetProperties(PostingDate, 1, TRUE, FALSE, FALSE, ShowDialog);
                               CalcInvtValCheck.RunCheck(Item,TempErrorBuf);

                               NextLineNo := 0;

                               IF ShowDialog THEN
                                 Window.OPEN(Text010,"No.");

                               GLSetup.GET;

                               SourceCodeSetup.GET;

                               gvLinesToPost := FALSE;
                             END;

               OnAfterGetRecord=VAR
                                  AppliedAmount@1000 : Decimal;
                                BEGIN
                                  IF ShowDialog THEN
                                    Window.UPDATE;

                                  ValJnlBuffer.RESET;
                                  ValJnlBuffer.DELETEALL;

                                  ItemLedgEntry.SETRANGE("Item No.","No.");
                                  ItemLedgEntry.SETRANGE(Positive,TRUE);
                                  IncludeExpectedCost := ("Costing Method" = "Costing Method"::Standard);

                                  COPYFILTER("Location Filter",ItemLedgEntry."Location Code");
                                  IF ItemLedgEntry.FIND('-') THEN
                                    REPEAT
                                      IF IncludeEntryInCalc(ItemLedgEntry, PostingDate, IncludeExpectedCost) THEN BEGIN
                                        RemQty := ItemLedgEntry.CalculateRemQuantity(ItemLedgEntry."Entry No.", PostingDate);
                                        InsertValJnlBuffer(
                                          ItemLedgEntry."Item No.",ItemLedgEntry."Variant Code",
                                          ItemLedgEntry."Location Code",RemQty,
                                          ItemLedgEntry.CalculateRemInventoryValue(ItemLedgEntry."Entry No.",ItemLedgEntry.Quantity,RemQty,
                                            IncludeExpectedCost AND NOT ItemLedgEntry."Completely Invoiced",PostingDate));
                                      END;
                                    UNTIL ItemLedgEntry.NEXT = 0;

                                  COPYFILTER("Location Filter",Location.Code);
                                  IF Location.FIND('-') THEN BEGIN
                                    CLEAR(ValJnlBuffer);
                                    ValJnlBuffer.SETCURRENTKEY("Item No.","Location Code","Variant Code");
                                    ValJnlBuffer.SETRANGE("Item No.","No.");
                                    REPEAT
                                      ValJnlBuffer.SETRANGE("Location Code",Location.Code);
                                      ValJnlBuffer.CALCSUMS(Quantity,"Inventory Value (Calculated)");
                                      IF ValJnlBuffer.Quantity <> 0 THEN BEGIN
                                        AppliedAmount := 0;
                                        IF "Costing Method" = "Costing Method"::Average THEN
                                          CalcAverageUnitCost(ValJnlBuffer.Quantity,ValJnlBuffer."Inventory Value (Calculated)",AppliedAmount);
                                        InsertItemJnlLine(ItemJnlLine."Entry Type"::"Positive Adjmt.",
                                                          "No.",'',Location.Code,ValJnlBuffer.Quantity,ValJnlBuffer."Inventory Value (Calculated)",
                                                          AppliedAmount);
                                      END;
                                    UNTIL Location.NEXT = 0;
                                  END;
                                END;

               OnPostDataItem=BEGIN
                                IF NOT gvLinesToPost THEN BEGIN
                                  CalcSKUSurchargesNoStock;
                                  gvStockSurchargeRec.ImplementSKUSurchargeChanges(CURRENTDATETIME);
                                END;
                              END;
                               }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text003@1003 : TextConst 'DEU=Sie mÅssen eine Belegnr. eingeben.;ENU=You must enter a document number.;NLD="U moet een documentnummer invullen. ";NOR=Du mÜ angi et dokumentnr.;SVE=Du mÜste ange ett dokumentnr.';
      Text010@1010 : TextConst 'DEU=Artikel werden durchgelesen #1##########;ENU=Processing items #1##########;NLD=Verwerken artikelen #1##########;NOR=Behandler artikler #1##########;SVE=Behandlar artiklar #1##########';
      ItemJnlBatch@1021 : Record 233;
      ItemJnlLine@1022 : Record 83;
      ValJnlBuffer@1024 : TEMPORARY Record 5803;
      ItemJnlTemplate@1025 : Record 82;
      GLSetup@1027 : Record 98;
      SourceCodeSetup@1028 : Record 242;
      Location@1029 : Record 14;
      InventorySetup@1100485000 : Record 313;
      ItemLedgEntry@1100485002 : Record 32;
      gvStockSurchargeRec@1100485005 : Record 11020316;
      CalcInvtValCheck@1004 : Codeunit 5899;
      NoSeriesMgt@1031 : Codeunit 396;
      Window@1033 : Dialog;
      PostingDate@1036 : Date;
      NextDocNo@1037 : Code[20];
      AverageUnitCostLCY@1038 : Decimal;
      RemQty@1040 : Decimal;
      NextLineNo@1041 : Integer;
      NextLineNo2@1042 : Integer;
      ShowDialog@1000 : Boolean;
      MessTxt@1100485001 : Text[250];
      IncludeExpectedCost@1100485003 : Boolean;
      gvLinesToPost@1100485004 : Boolean;

    LOCAL PROCEDURE IncludeEntryInCalc@9(ItemLedgEntry@1000 : Record 32;PostingDate@1001 : Date;lvIncludeExpectedCost@1002 : Boolean) : Boolean;
    BEGIN
      WITH ItemLedgEntry DO BEGIN
        IF lvIncludeExpectedCost THEN
          EXIT("Posting Date" IN [0D..PostingDate]);
        EXIT("Completely Invoiced" AND ("Last Invoice Date" IN [0D..PostingDate]));
      END;
    END;

    PROCEDURE SetItemJnlLine@1(VAR NewItemJnlLine@1000 : Record 83);
    BEGIN
      ItemJnlLine := NewItemJnlLine;
    END;

    LOCAL PROCEDURE ValidatePostingDate@4();
    BEGIN
      ItemJnlBatch.GET(ItemJnlLine."Journal Template Name",ItemJnlLine."Journal Batch Name");
      IF ItemJnlBatch."No. Series" = '' THEN
        NextDocNo := ''
      ELSE BEGIN
        NextDocNo := NoSeriesMgt.GetNextNo(ItemJnlBatch."No. Series",PostingDate,FALSE);
        CLEAR(NoSeriesMgt);
      END;
    END;

    LOCAL PROCEDURE InsertValJnlBuffer@2(ItemNo2@1000 : Code[20];VariantCode2@1001 : Code[10];LocationCode2@1002 : Code[10];Quantity2@1003 : Decimal;Amount2@1004 : Decimal);
    BEGIN
      ValJnlBuffer.RESET;
      ValJnlBuffer.SETCURRENTKEY("Item No.","Location Code","Variant Code");
      ValJnlBuffer.SETRANGE("Item No.",ItemNo2);
      ValJnlBuffer.SETRANGE("Location Code",LocationCode2);
      ValJnlBuffer.SETRANGE("Variant Code",VariantCode2);
      IF ValJnlBuffer.FIND('-') THEN BEGIN
        ValJnlBuffer.Quantity := ValJnlBuffer.Quantity + Quantity2;
        ValJnlBuffer."Inventory Value (Calculated)" :=
          ValJnlBuffer."Inventory Value (Calculated)" + Amount2;
        ValJnlBuffer.MODIFY;
      END ELSE BEGIN
        IF Quantity2 <> 0 THEN BEGIN
          NextLineNo2 := NextLineNo2 + 10000;
          ValJnlBuffer.INIT;
          ValJnlBuffer."Line No." := NextLineNo2;
          ValJnlBuffer."Item No." := ItemNo2;
          ValJnlBuffer."Variant Code" := VariantCode2;
          ValJnlBuffer."Location Code" := LocationCode2;
          ValJnlBuffer.Quantity := Quantity2;
          ValJnlBuffer."Inventory Value (Calculated)" := Amount2;
          ValJnlBuffer.INSERT;
        END;
      END;
    END;

    LOCAL PROCEDURE CalcAverageUnitCost@8(BufferQty@1000 : Decimal;VAR InvtValueCalc@1001 : Decimal;VAR AppliedAmount@1002 : Decimal);
    VAR
      ValueEntry@1003 : Record 5802;
      AverageQty@1004 : Decimal;
      AverageCost@1005 : Decimal;
      NotComplInvQty@1007 : Decimal;
      NotComplInvValue@1008 : Decimal;
    BEGIN
      WITH ValueEntry DO BEGIN
        SETCURRENTKEY("Item No.","Valuation Date","Location Code","Variant Code");
        SETRANGE("Item No.",Item."No.");
        SETRANGE("Valuation Date",0D,PostingDate);
        SETFILTER("Location Code",ValJnlBuffer.GETFILTER("Location Code"));
        SETFILTER("Variant Code",ValJnlBuffer.GETFILTER("Variant Code"));
        CALCSUMS("Item Ledger Entry Quantity","Cost Amount (Actual)","Cost Amount (Expected)");
        AverageQty := "Item Ledger Entry Quantity";
        AverageCost := "Cost Amount (Actual)" + "Cost Amount (Expected)";

        CalcNotComplInvcdTransfer(NotComplInvQty,NotComplInvValue);
        AverageQty := AverageQty - NotComplInvQty;
        IF (AverageQty > 0) AND (NotComplInvValue < 0) THEN
          AverageCost := AverageCost + (InvtValueCalc / BufferQty * AverageQty + NotComplInvValue);
        SETRANGE(Inventoriable,TRUE);
        SETRANGE("Item Charge No.",'');
        SETFILTER("Item Ledger Entry Quantity",'<>%1',0);
        SETFILTER("Posting Date",'>%1',PostingDate);
        IF FIND('-') THEN
          REPEAT
            IF "Entry Type" <> "Entry Type"::Revaluation THEN BEGIN
              AverageQty := AverageQty - "Item Ledger Entry Quantity";
              AverageCost := AverageCost - "Cost Amount (Actual)" - "Cost Amount (Expected)";
            END;
          UNTIL NEXT = 0;
      END;

      IF AverageQty <> 0 THEN BEGIN
        AverageUnitCostLCY := AverageCost / AverageQty;
        IF (AverageUnitCostLCY < 0) THEN
          AverageUnitCostLCY := 0;
      END ELSE
        AverageUnitCostLCY := 0;

      AppliedAmount := InvtValueCalc;
      InvtValueCalc := BufferQty * AverageUnitCostLCY;
    END;

    LOCAL PROCEDURE CalcNotComplInvcdTransfer@7(VAR NotComplInvQty@1001 : Decimal;VAR NotComplInvValue@1002 : Decimal);
    VAR
      ItemLedgEntry@1000 : Record 32;
      RemQty@1003 : Decimal;
      RemInvValue@1004 : Decimal;
      i@1005 : Integer;
    BEGIN
      FOR i := 1 TO 2 DO
        WITH ItemLedgEntry DO BEGIN
          SETCURRENTKEY("Item No.",Positive,"Location Code","Variant Code");
          SETRANGE("Item No.",Item."No.");
          SETRANGE(Positive,i = 1);
          Item.COPYFILTER("Location Filter","Location Code");
          Item.COPYFILTER("Variant Filter","Variant Code");
          IF FIND('-') THEN
            REPEAT
              IF (Quantity = "Invoiced Quantity") AND
                 NOT "Completely Invoiced" AND
                 ("Last Invoice Date" IN [0D..PostingDate]) AND
                 ("Invoiced Quantity" <> 0)
              THEN BEGIN
                RemQty := Quantity;
                RemInvValue := CalculateRemInvValue("Entry No.",Quantity,RemQty,FALSE);
                NotComplInvQty := NotComplInvQty + RemQty;
                NotComplInvValue := NotComplInvValue + RemInvValue;
              END;
            UNTIL ItemLedgEntry.NEXT = 0;
        END;
    END;

    LOCAL PROCEDURE InsertItemJnlLine@6(EntryType2@1000 : Option;ItemNo2@1001 : Code[20];VariantCode2@1002 : Code[10];LocationCode2@1003 : Code[10];Quantity2@1005 : Decimal;Amount2@1006 : Decimal;AppliedAmount@1008 : Decimal);
    BEGIN
      IF Quantity2 = 0 THEN
        EXIT;

      WITH ItemJnlLine DO BEGIN
        IF NextLineNo = 0 THEN BEGIN
          LOCKTABLE;
          SETRANGE("Journal Template Name","Journal Template Name");
          SETRANGE("Journal Batch Name","Journal Batch Name");
          IF FIND('+') THEN
            NextLineNo := "Line No.";
        END;

        NextLineNo := NextLineNo + 10000;
        INIT;
        "Line No." := NextLineNo;
        "Value Entry Type" := "Value Entry Type"::Revaluation;
        VALIDATE("Posting Date",PostingDate);
        VALIDATE("Entry Type",EntryType2);
        VALIDATE("Document No.",NextDocNo);
        VALIDATE("Item No.",ItemNo2);
        "Reason Code" := ItemJnlBatch."Reason Code";
        "Variant Code" := VariantCode2;
        "Location Code" := LocationCode2;
        "Source Code" := SourceCodeSetup."Revaluation Journal";
        VALIDATE("Unit Amount",0);

        ItemJnlLine."Inventory Value Per" := "Inventory Value Per"::Location;
        ItemJnlLine."SKU Surcharge Revaluation" := TRUE;

        VALIDATE(Quantity,Quantity2);
        VALIDATE("Inventory Value (Calculated)",ROUND(Amount2,GLSetup."Amount Rounding Precision"));
        IF CalcSKUSurcharge(ItemJnlLine) THEN BEGIN

          VALIDATE("Inventory Value (Calculated)",ROUND(Amount2 + ItemJnlLine."SKU Surcharge (Calculated)",
                                                        GLSetup."Amount Rounding Precision"));

          VALIDATE("Inventory Value (Revalued)",ROUND(Amount2 + ItemJnlLine."SKU Surcharge (Revalued)",
                                                      GLSetup."Amount Rounding Precision"));

          "Update Standard Cost" := TRUE;
          "Partial Revaluation" := TRUE;
          "Applied Amount" := AppliedAmount;

          //**4PS.sn
          IF InventorySetup."Product Posting Group (Reval.)" <> '' THEN
            "Gen. Prod. Posting Group" := InventorySetup."Product Posting Group (Reval.)";  //db, 27-03-07
          //**4PS.en
          INSERT;
          gvLinesToPost := TRUE;
        END;
      END;
    END;

    PROCEDURE InitializeRequest@5(NewPostingDate@1000 : Date;NewDocNo@1004 : Code[20];NewCalculatePer@1001 : Option;NewByLocation@1002 : Boolean;NewByVariant@1003 : Boolean;NewUpdStdCost@1005 : Boolean;NewCalcBase@1006 : Option;NewShowDialog@1007 : Boolean);
    BEGIN
      PostingDate := NewPostingDate;
      NextDocNo := NewDocNo;
      ShowDialog := NewShowDialog;
    END;

    PROCEDURE CalculateRemQuantity@10(ItemLedgEntryNo@1000 : Integer;PostingDate@1001 : Date) : Decimal;
    VAR
      ItemApplnEntry@1002 : Record 339;
      RemQty@1003 : Decimal;
    BEGIN
      WITH ItemApplnEntry DO BEGIN
        SETCURRENTKEY("Inbound Item Entry No.");
        SETRANGE("Inbound Item Entry No.",ItemLedgEntryNo);
        RemQty := 0;
        IF FIND('-') THEN
          REPEAT
            IF "Posting Date" <= PostingDate THEN
              RemQty := RemQty + Quantity;
          UNTIL NEXT = 0;
        EXIT(RemQty);
      END;
    END;

    PROCEDURE CalculateRemInvValue@11(ItemLedgEntryNo@1000 : Integer;ItemLedgEntryQty@1004 : Decimal;RemQty@1005 : Decimal;lvIncludeExpectedCost@1001 : Boolean) : Decimal;
    VAR
      ValueEntry@1002 : Record 5802;
      AdjustedCost@1003 : Decimal;
    BEGIN
      WITH ValueEntry DO BEGIN
        SETCURRENTKEY("Item Ledger Entry No.");
        SETRANGE("Item Ledger Entry No.",ItemLedgEntryNo);
        IF NOT lvIncludeExpectedCost THEN
          SETRANGE("Expected Cost",FALSE);
        IF FIND('-') THEN
          REPEAT
            IF "Entry Type" <> "Entry Type"::Revaluation THEN
              "Valued Quantity" := ItemLedgEntryQty;
            IF "Entry Type" <> "Entry Type"::Rounding THEN
              IF lvIncludeExpectedCost THEN
                AdjustedCost := AdjustedCost + RemQty / "Valued Quantity" * ("Cost Amount (Actual)" + "Cost Amount (Expected)")
              ELSE
                AdjustedCost := AdjustedCost + RemQty / "Valued Quantity" * "Cost Amount (Actual)";
          UNTIL NEXT = 0;
        EXIT(AdjustedCost);
      END;
    END;

    PROCEDURE SetDefaultsRequestForm@1100485000();
    VAR
      lvText000@1100485000 : TextConst 'DEU=Wenn Sie dafÅr sorgen mîchten, dass alle Artikel aktualisiert worden sind, bevor Sie die Neubewertung starten, mÅssen Sie zuerst die Stapelbuchung %1 ausfÅhren.;ENU=To make sure that all items are adjusted before you start the revaluation you should run the %1 batch job first.;NLD=Als u ervoor wilt zorgen dat alle artikelen zijn bijgewerkt voordat u de herwaardering start, moet u eerst de batchverwerking %1 uitvoeren.;NOR=For Ü vëre sikker pÜ at alle artikler er justert fõr du starter revalueringen skal du kjõre Batchjobben %1 fõrst.;SVE=Om du vill se till att alla artiklar Ñr justerade innan du startar omvÑrderIngen ska du kîra batchjobbet %1 fîrst.';
      ObjTransl@1100485001 : Record 377;
    BEGIN
      MessTxt := STRSUBSTNO(lvText000,
        ObjTransl.TranslateObject(ObjTransl."Object Type"::Report,REPORT::"Adjust Cost - Item Entries"));
    END;

    LOCAL PROCEDURE CalcSKUSurcharge@1100485002(VAR lvItemJnlLineRec@1008 : Record 83) lvHandleIt : Boolean;
    VAR
      lSKUSurcharges@1100485000 : Record 11020317;
      lStockSurcharges@1100485001 : Record 11020316;
    BEGIN
      lSKUSurcharges.SETRANGE("Location Code", lvItemJnlLineRec."Location Code");
      lSKUSurcharges.SETRANGE("Item No.", lvItemJnlLineRec."Item No.");
      lSKUSurcharges.SETRANGE("Variant Code", lvItemJnlLineRec."Variant Code");
      lSKUSurcharges.SETRANGE("Deletion Posted", FALSE);

      lvHandleIt := FALSE;

      IF lSKUSurcharges.FINDSET(FALSE, FALSE) THEN
        REPEAT
          IF lStockSurcharges.GET(lSKUSurcharges."Surcharge Code") THEN BEGIN

            IF NOT ((lSKUSurcharges."Time Posted" = 0DT) AND (lSKUSurcharges."To Delete")) THEN BEGIN

              IF lSKUSurcharges."Time Posted" = 0DT THEN BEGIN
                lStockSurcharges."Actual Amount" := 0;
                lStockSurcharges."Actual Percentage" := 0;
              END;

              IF lSKUSurcharges."To Delete" THEN BEGIN
                lStockSurcharges.Amount := 0;
                lStockSurcharges.Percentage := 0;
              END;

              IF ((lStockSurcharges.Amount <> lStockSurcharges."Actual Amount") OR
                 (lStockSurcharges.Percentage <> lStockSurcharges."Actual Percentage")) AND
                 (NOT lvHandleIt) THEN
                lvHandleIt := TRUE;

              IF lStockSurcharges."Actual Amount" <> 0 THEN
                lvItemJnlLineRec."SKU Surcharge (Calculated)" += lStockSurcharges."Actual Amount" *
                                                                   lvItemJnlLineRec."Invoiced Quantity";
              IF lStockSurcharges.Amount <> 0 THEN
                lvItemJnlLineRec."SKU Surcharge (Revalued)" += lStockSurcharges.Amount *
                                                                 lvItemJnlLineRec."Invoiced Quantity";

              IF lStockSurcharges."Actual Percentage" <> 0 THEN
                 lvItemJnlLineRec."SKU Surcharge (Calculated)" += ROUND(lvItemJnlLineRec."Inventory Value (Calculated)"  *
                                                                      (lStockSurcharges."Actual Percentage"/100));
              IF lStockSurcharges.Percentage <> 0 THEN
                lvItemJnlLineRec."SKU Surcharge (Revalued)" += ROUND(lvItemJnlLineRec."Inventory Value (Calculated)" *
                                                                       (lStockSurcharges.Percentage/100));
            END;
          END;

        UNTIL lSKUSurcharges.NEXT = 0;
    END;

    LOCAL PROCEDURE CalcSKUSurchargesNoStock@1100485006() lvHandleIt : Boolean;
    VAR
      lSKUSurcharges@1100485000 : Record 11020317;
      lStockSurcharges@1100485001 : Record 11020316;
      SKU@1100485002 : Record 5700;
      lvSurchargeCalculated@1100485003 : Decimal;
      lvSurchargeRevalued@1100485004 : Decimal;
    BEGIN
      //practisch identiek aan zelfde functie in CU 23, maar hier alle SKU's

      IF SKU.FINDSET(TRUE, FALSE) THEN
        REPEAT

          lSKUSurcharges.SETRANGE("Location Code", SKU."Location Code");
          lSKUSurcharges.SETRANGE("Item No.", SKU."Item No.");
          lSKUSurcharges.SETRANGE("Variant Code", SKU."Variant Code");
          lSKUSurcharges.SETRANGE("Deletion Posted", FALSE);

          lvHandleIt := FALSE;
          lvSurchargeCalculated := 0;
          lvSurchargeRevalued := 0;

          IF lSKUSurcharges.FINDSET(FALSE, FALSE) THEN
            REPEAT
              IF lStockSurcharges.GET(lSKUSurcharges."Surcharge Code") THEN BEGIN

                IF NOT ((lSKUSurcharges."Time Posted" = 0DT) AND (lSKUSurcharges."To Delete")) THEN BEGIN

                  IF lSKUSurcharges."Time Posted" = 0DT THEN BEGIN
                    lStockSurcharges."Actual Amount" := 0;
                    lStockSurcharges."Actual Percentage" := 0;
                  END;

                  IF lSKUSurcharges."To Delete" THEN BEGIN
                    lStockSurcharges.Amount := 0;
                    lStockSurcharges.Percentage := 0;
                  END;

                  IF ((lStockSurcharges.Amount <> lStockSurcharges."Actual Amount") OR
                     (lStockSurcharges.Percentage <> lStockSurcharges."Actual Percentage")) AND
                     (NOT lvHandleIt) THEN
                    lvHandleIt := TRUE;

                  IF lStockSurcharges."Actual Amount" <> 0 THEN
                    lvSurchargeCalculated += lStockSurcharges."Actual Amount";

                  IF lStockSurcharges.Amount <> 0 THEN
                    lvSurchargeRevalued  += lStockSurcharges.Amount;

                  IF lStockSurcharges."Actual Percentage" <> 0 THEN
                    lvSurchargeCalculated += ROUND(SKU."Standard Cost" * (lStockSurcharges."Actual Percentage"/100));

                  IF lStockSurcharges.Percentage <> 0 THEN
                    lvSurchargeRevalued += ROUND(SKU."Standard Cost" * (lStockSurcharges.Percentage/100));
                END;
              END;

            UNTIL lSKUSurcharges.NEXT = 0;

          IF lvHandleIt AND (lvSurchargeCalculated <> lvSurchargeRevalued) THEN BEGIN
            SKU.VALIDATE("Surcharge SKU", lvSurchargeRevalued);
            SKU.MODIFY;
          END;

        UNTIL SKU.NEXT = 0 ;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

