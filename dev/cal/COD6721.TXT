OBJECT Codeunit 6721 Booking Manager
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.03;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ConfirmSyncQst@1001 : TextConst '@@@=%1 - The name of the service or customer. %2 - short product name;ENU=%1 does not exist in %2. Would you like to synchronize your Bookings customers and services now?;NOR=%1 finnes ikke i %2. Vil du synkronisere dine Bookings-kunder og -tjenester n†?';
      NoCustomerFoundErr@1002 : TextConst '@@@=%1 - Short product name;ENU=Could not find the customer in %1.;NOR=Finner ikke kunden i %1.';

    [External]
    PROCEDURE GetAppointmentConnectionName@11() : Text;
    BEGIN
      EXIT('BOOKINGAPPOINTMENTS');
    END;

    [External]
    PROCEDURE GetBookingItems@1(VAR TempBookingItem@1000 : TEMPORARY Record 6707);
    VAR
      BookingItem@1001 : Record 6707;
      BookingSync@1004 : Record 6702;
      DotNet_DateTimeOffset@1002 : Codeunit 3006;
      Now@1003 : DateTime;
    BEGIN
      IF NOT BookingSync.IsSetup THEN
        EXIT;

      RegisterAppointmentConnection;

      BookingItem.SETRANGE("Invoice Status",BookingItem."Invoice Status"::draft);
      BookingItem.SETFILTER("Invoice No.",'=''''');
      Now := DotNet_DateTimeOffset.ConvertToUtcDateTime(CURRENTDATETIME);
      IF TryFindAppointments(BookingItem) THEN
        REPEAT
          TempBookingItem.INIT;
          BookingItem.CALCFIELDS("Start Date","End Date");
          TempBookingItem.TRANSFERFIELDS(BookingItem);
          WITH BookingItem DO
            IF ("Invoice No." = '') AND ("Invoice Status" = "Invoice Status"::draft) THEN
              IF GetStartDate < Now THEN
                TempBookingItem.INSERT;
        UNTIL BookingItem.NEXT = 0;
    END;

    [External]
    PROCEDURE GetBookingMailboxes@2(VAR TempBookingMailbox@1000 : TEMPORARY Record 6704);
    BEGIN
      OnGetBookingMailboxes(TempBookingMailbox);
    END;

    [External]
    PROCEDURE GetBookingServiceForBooking@10(VAR TempBookingItem@1000 : TEMPORARY Record 6707;VAR TempBookingService@1001 : TEMPORARY Record 6703);
    BEGIN
      OnGetBookingServiceForBooking(TempBookingItem,TempBookingService);
    END;

    [External]
    PROCEDURE InvoiceBookingItems@3();
    VAR
      TempBookingItem@1000 : TEMPORARY Record 6707;
    BEGIN
      GetBookingItems(TempBookingItem);
      PAGE.RUN(PAGE::"Booking Items",TempBookingItem);
    END;

    [External]
    PROCEDURE RegisterAppointmentConnection@15();
    BEGIN
      OnRegisterAppointmentConnection;
    END;

    [External]
    PROCEDURE SetBookingItemInvoiced@9(InvoicedBookingItem@1001 : Record 1638);
    BEGIN
      OnSetBookingItemInvoiced(InvoicedBookingItem);
    END;

    [External]
    PROCEDURE Synchronize@8(VAR BookingItem@1000 : Record 6707);
    BEGIN
      OnSynchronize(BookingItem);
    END;

    [TryFunction]
    LOCAL PROCEDURE TryFindAppointments@5(VAR BookingItem@1000 : Record 6707);
    BEGIN
      BookingItem.FINDSET;
    END;

    LOCAL PROCEDURE CanHandleHeader@21(VAR SalesHeader@1000 : Record 36) : Boolean;
    BEGIN
      IF SalesHeader.ISTEMPORARY THEN
        EXIT(FALSE);

      IF SalesHeader."Document Type" <> SalesHeader."Document Type"::Invoice THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CanHandleLine@14(VAR SalesLine@1000 : Record 37) : Boolean;
    BEGIN
      IF SalesLine.ISTEMPORARY THEN
        EXIT(FALSE);

      IF SalesLine."Document Type" <> SalesLine."Document Type"::Invoice THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesHeader@25(VAR SalesHeader@1000 : Record 36;VAR BookingItem@1001 : Record 6707);
    VAR
      Customer@1002 : Record 18;
      BookingManager@1003 : Codeunit 6721;
    BEGIN
      IF NOT Customer.FindByEmail(Customer,BookingItem."Customer Email") THEN BEGIN
        IF CONFIRM(ConfirmSyncQst,TRUE,BookingItem."Customer Name",PRODUCTNAME.SHORT) THEN
          BookingManager.Synchronize(BookingItem);
        IF NOT Customer.FindByEmail(Customer,BookingItem."Customer Email") THEN
          ERROR(NoCustomerFoundErr,PRODUCTNAME.SHORT);
      END;

      SalesHeader.INIT;
      SalesHeader.VALIDATE("Document Type",SalesHeader."Document Type"::Invoice);
      SalesHeader.VALIDATE("Sell-to Customer No.",Customer."No.");
      SalesHeader.INSERT(TRUE);
    END;

    [External]
    PROCEDURE CreateSalesLine@24(VAR SalesHeader@1004 : Record 36;VAR BookingItem@1000 : Record 6707);
    VAR
      InvoicedBookingItem@1001 : Record 1638;
      SalesLine@1003 : Record 37;
      BookingServiceMapping@1009 : Record 6706;
      BookingManager@1008 : Codeunit 6721;
      LineNo@1002 : Integer;
    BEGIN
      IF NOT BookingServiceMapping.GET(BookingItem."Service ID") THEN BEGIN
        IF CONFIRM(ConfirmSyncQst,TRUE,BookingItem."Service Name",PRODUCTNAME.SHORT) THEN
          BookingManager.Synchronize(BookingItem);
        BookingServiceMapping.GET(BookingItem."Service ID");
      END;

      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type"::Invoice);
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      IF SalesLine.FINDLAST THEN
        LineNo := SalesLine."Line No." + 10000
      ELSE
        LineNo := 10000;
      CLEAR(SalesLine);

      InvoicedBookingItem.INIT;
      InvoicedBookingItem."Booking Item ID" := BookingItem.Id;
      InvoicedBookingItem."Document No." := SalesHeader."No.";
      InvoicedBookingItem.INSERT(TRUE);

      SalesLine.INIT;
      SalesLine.VALIDATE("Document Type",SalesHeader."Document Type"::Invoice);
      SalesLine.VALIDATE("Document No.",SalesHeader."No.");
      SalesLine.VALIDATE("Line No.",LineNo);
      SalesLine.VALIDATE("Sell-to Customer No.",SalesHeader."Sell-to Customer No.");
      SalesLine.VALIDATE(Type,SalesLine.Type::Item);
      SalesLine.VALIDATE("No.",BookingServiceMapping."Item No.");
      SalesLine.VALIDATE(Quantity,(BookingItem.GetEndDate - BookingItem.GetStartDate) / 3600000);
      SalesLine.VALIDATE("Unit Price",BookingItem.Price);
      SalesLine.VALIDATE(Description,STRSUBSTNO('%1 - %2',BookingItem."Service Name",DT2DATE(BookingItem.GetStartDate)));
      IF NOT SalesLine.INSERT(TRUE) THEN BEGIN
        InvoicedBookingItem.DELETE;
        ERROR(GETLASTERRORTEXT);
      END;
    END;

    [External]
    PROCEDURE InvoiceItemsForCustomer@26(VAR BookingItemSource@1004 : Record 6707;VAR TempBookingItem@1000 : TEMPORARY Record 6707;VAR SalesHeader@1002 : Record 36) InvoiceCreated : Boolean;
    VAR
      NewTempBookingItem@1003 : TEMPORARY Record 6707;
      InvoicedBookingItem@1001 : Record 1638;
    BEGIN
      NewTempBookingItem.COPY(TempBookingItem,TRUE);
      IF NOT InvoicedBookingItem.GET(TempBookingItem.Id) THEN BEGIN
        NewTempBookingItem.SETRANGE("Customer Email",TempBookingItem."Customer Email");
        NewTempBookingItem.SETRANGE("Invoice Status",NewTempBookingItem."Invoice Status"::draft);
        NewTempBookingItem.SETFILTER("Invoice No.",'=''''');
        IF NewTempBookingItem.FINDSET THEN BEGIN
          CLEAR(SalesHeader);
          CreateSalesHeader(SalesHeader,NewTempBookingItem);
          REPEAT
            IF NOT InvoicedBookingItem.GET(NewTempBookingItem.Id) THEN
              CreateSalesLine(SalesHeader,NewTempBookingItem);
            BookingItemSource.GET(NewTempBookingItem.Id);
            BookingItemSource.DELETE;
          UNTIL NewTempBookingItem.NEXT = 0;
          InvoiceCreated := TRUE;
        END;
      END;
    END;

    [EventSubscriber(Table,36,OnAfterModifyEvent)]
    LOCAL PROCEDURE OnAfterModifySalesHeader@12(VAR Rec@1000 : Record 36;VAR xRec@1001 : Record 36;RunTrigger@1002 : Boolean);
    VAR
      InvoicedBookingItem@1003 : Record 1638;
    BEGIN
      IF NOT CanHandleHeader(Rec) THEN
        EXIT;

      InvoicedBookingItem.SETRANGE("Document No.",Rec."No.");
      IF InvoicedBookingItem.FINDFIRST THEN
        SetBookingItemInvoiced(InvoicedBookingItem);
    END;

    [EventSubscriber(Table,37,OnAfterInsertEvent)]
    LOCAL PROCEDURE OnAfterInsertSalesLine@20(VAR Rec@1000 : Record 37;RunTrigger@1001 : Boolean);
    VAR
      InvoicedBookingItem@1002 : Record 1638;
    BEGIN
      IF NOT CanHandleLine(Rec) THEN
        EXIT;

      InvoicedBookingItem.SETRANGE("Document No.",Rec."Document No.");
      IF InvoicedBookingItem.FINDFIRST THEN
        SetBookingItemInvoiced(InvoicedBookingItem);
    END;

    [EventSubscriber(Table,1638,OnAfterInsertEvent)]
    PROCEDURE OnAfterInsertInvoicedBookingItem@16(VAR Rec@1000 : Record 1638;RunTrigger@1001 : Boolean);
    BEGIN
      IF Rec.ISTEMPORARY THEN
        EXIT;

      IF NOT RunTrigger THEN
        EXIT;

      SetBookingItemInvoiced(Rec);
    END;

    [EventSubscriber(Table,37,OnAfterModifyEvent)]
    LOCAL PROCEDURE OnAfterModifySalesLine@18(VAR Rec@1000 : Record 37;VAR xRec@1001 : Record 37;RunTrigger@1003 : Boolean);
    VAR
      InvoicedBookingItem@1002 : Record 1638;
    BEGIN
      IF NOT CanHandleLine(Rec) THEN
        EXIT;

      InvoicedBookingItem.SETRANGE("Document No.",Rec."Document No.");
      IF InvoicedBookingItem.FINDFIRST THEN
        SetBookingItemInvoiced(InvoicedBookingItem);
    END;

    [EventSubscriber(Codeunit,80,OnAfterPostSalesDoc)]
    LOCAL PROCEDURE OnAfterPostSalesDoc@4(VAR SalesHeader@1000 : Record 36;VAR GenJnlPostLine@1002 : Codeunit 12;SalesShptHdrNo@1003 : Code[20];RetRcpHdrNo@1004 : Code[20];SalesInvHdrNo@1005 : Code[20];SalesCrMemoHdrNo@1006 : Code[20]);
    VAR
      InvoicedBookingItem@1007 : Record 1638;
    BEGIN
      IF NOT CanHandleHeader(SalesHeader) THEN
        EXIT;

      InvoicedBookingItem.SETRANGE("Document No.",SalesHeader."No.");
      IF InvoicedBookingItem.ISEMPTY THEN
        EXIT;

      InvoicedBookingItem.MODIFYALL(Posted,TRUE);
      InvoicedBookingItem.MODIFYALL("Document No.",SalesInvHdrNo);
      InvoicedBookingItem.SETRANGE("Document No.",SalesInvHdrNo);
      IF InvoicedBookingItem.FINDFIRST THEN
        SetBookingItemInvoiced(InvoicedBookingItem);
    END;

    [EventSubscriber(Table,36,OnBeforeDeleteEvent)]
    LOCAL PROCEDURE OnDeleteSalesInvoice@7(VAR Rec@1000 : Record 36;RunTrigger@1001 : Boolean);
    VAR
      InvoicedBookingItem@1002 : Record 1638;
    BEGIN
      IF NOT (RunTrigger AND CanHandleHeader(Rec)) THEN
        EXIT;

      InvoicedBookingItem.SETRANGE("Document No.",Rec."No.");
      IF InvoicedBookingItem.FINDFIRST THEN
        SetBookingItemInvoiced(InvoicedBookingItem);
    END;

    [Integration]
    LOCAL PROCEDURE OnGetBookingMailboxes@6(VAR TempBookingMailbox@1000 : TEMPORARY Record 6704);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnGetBookingServiceForBooking@19(VAR TempBookingItem@1000 : TEMPORARY Record 6707;VAR TempBookingService@1001 : TEMPORARY Record 6703);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnRegisterAppointmentConnection@17();
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnSetBookingItemInvoiced@22(VAR InvoicedBookingItem@1000 : Record 1638);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnSynchronize@13(VAR BookingItem@1000 : Record 6707);
    BEGIN
    END;

    BEGIN
    END.
  }
}

