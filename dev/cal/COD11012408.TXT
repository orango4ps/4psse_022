OBJECT Codeunit 11012408 E-mail Document
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text0001@1100485000 : TextConst 'DEU=Es wurde keine E-Mailadresse fÅr diesen Kreditor definiert. Mîchten Sie doch e-mailen?;ENU=No e-mail address was defined for this vendor. Do you still want to send e-mail?;NLD=Er is geen e-mail adres gedefinieerd voor deze leverancier. Wilt u toch e-mailen?;NOR=Ingen E-Mailadresse er tilknyttet denne leverandõren. Vil du fortsatt sende E-Mail?;SVE=Ingen e-postadress har definierats fîr den hÑr leverantîren. Vill du fortfarande skicka e-post?';
      Text11012000@1100485002 : TextConst 'DEU=Es muss zuerst ein Kontakt mit dem Kreditor %1 verknÅpft werden.;ENU=First Associate a Prospect to Vendor %1.;NLD=Er moet eerst een relatie worden gekoppeld aan leverancier %1.;NOR=Tilknytt fõrst et prospekt med leverandõr %1.;SVE=Associera fîrst en tilltÑnkt kund till leverantîr %1.';
      FileMgt@1100525500 : Codeunit 419;

    PROCEDURE EmailDocuments@1100485001(VAR PurchHeader@1100485007 : Record 38);
    VAR
      Vendor@1100485002 : Record 23;
      Documents@1100485005 : Record 11012746;
      SendMail@1100485003 : Boolean;
      OutlookAutomation@1100528700 : Codeunit 11012030;
      IsTemporaryFile@1100528703 : Boolean;
      TemporaryFiles@1100528706 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.ArrayList";
      ClientFileName@1100528705 : Text;
      DocumentMailing@1100529600 : Codeunit 260;
    BEGIN
      Vendor.GET(PurchHeader."Buy-from Vendor No.");

      SendMail := Vendor."E-Mail" <> '';
      IF NOT SendMail THEN
        SendMail := CONFIRM(Text0001);

      TemporaryFiles := TemporaryFiles.ArrayList();

      IF SendMail THEN BEGIN

        IF SelectDocuments(PurchHeader, Documents) THEN BEGIN
          AddPurchaseDocuments(PurchHeader, Documents);
          Documents.MARKEDONLY(TRUE);

          IF NOT FileMgt.ClientAvailable THEN BEGIN
            IF DocumentMailing.EmaillDocumentProperties(Vendor."E-Mail", Documents) THEN BEGIN
              PurchHeader."E-Mail Sent on" := TODAY;
              PurchHeader."E-Mail Sent by" := USERID;
              PurchHeader.MODIFY;
            END;
            EXIT;
          END;

          OutlookAutomation.InitOutlook;

          OutlookAutomation.InitNewMail;
          OutlookAutomation.AddMailRecipient(Vendor."E-Mail");

          IF Documents.FINDSET THEN
            REPEAT
              ClientFileName := Documents.GetClientFile(IsTemporaryFile);
              IF IsTemporaryFile THEN
                TemporaryFiles.Add(ClientFileName);
              OutlookAutomation.AddMailAttachment(ClientFileName);
            UNTIL Documents.NEXT = 0;

          OutlookAutomation.DisplayMailModal;

          PurchHeader."E-Mail Sent on" := TODAY;
          PurchHeader."E-Mail Sent by" := USERID;
          PurchHeader.MODIFY;
          OutlookAutomation.TermOutlook;
        END;
      END;

      FOREACH ClientFileName IN TemporaryFiles DO
        FileMgt.DeleteClientFile(ClientFileName);
    END;

    LOCAL PROCEDURE SelectDocuments@1100485002(VAR PurchHeader@1100485003 : Record 38;VAR Documents@1100485000 : Record 11012746) Result : Boolean;
    VAR
      DocumentRelation@1100485001 : Record 11012407;
      DocumentRelations@1100485002 : Page 11012413;
    BEGIN
      Result := FALSE;

      CASE PurchHeader."Document Type" OF
        PurchHeader."Document Type"::Quote:
          DocumentRelation.SETRANGE("Document Type", DocumentRelation."Document Type"::"Purchase Quote");
        PurchHeader."Document Type"::Order:
          DocumentRelation.SETRANGE("Document Type", DocumentRelation."Document Type"::"Purchase Order");
      END;
      DocumentRelation.SETRANGE("No.", PurchHeader."No.");
      DocumentRelations.SETTABLEVIEW(DocumentRelation);
      DocumentRelations.LOOKUPMODE := TRUE;
      DocumentRelations.EDITABLE := FALSE;

      // No related documents so just create the email...
      IF NOT DocumentRelation.FINDFIRST THEN
        EXIT(TRUE);
      DocumentRelations.SETRECORD(DocumentRelation);

      Result := DocumentRelations.RUNMODAL = ACTION::LookupOK;
      IF Result THEN BEGIN
        DocumentRelations.GetMarkedDocuments(DocumentRelation);
        IF DocumentRelation.FINDSET THEN
          REPEAT
            Documents.GET(DocumentRelation."Related Document No.");
            Documents.MARK := TRUE;
          UNTIL DocumentRelation.NEXT = 0;
      END;
    END;

    PROCEDURE AddPurchaseDocuments@1100485000(VAR PurchHeader@1100485000 : Record 38;VAR Doc@1100485005 : Record 11012746);
    VAR
      DocTemplate@1100485001 : Record 11012401;
      ContactBusinessRelation@1100485003 : Record 5054;
      Contact@1100485004 : Record 5050;
      DocProp@1100525003 : Record 11012746;
      DocumentLinkMgt@1100525000 : Codeunit 11012401;
      RecRef@1100525001 : RecordRef;
    BEGIN
      IF (PurchHeader."Buy-from Vendor No." = '') AND (PurchHeader."Buy-from Contact No." <> '') THEN
        ContactBusinessRelation."Contact No." := PurchHeader."Buy-from Contact No."
      ELSE BEGIN
        ContactBusinessRelation.SETCURRENTKEY("Link to Table", "No.");
        ContactBusinessRelation.SETRANGE("Link to Table", ContactBusinessRelation."Link to Table"::Vendor);
        ContactBusinessRelation.SETRANGE("No.", PurchHeader."Buy-from Vendor No.");
        IF NOT ContactBusinessRelation.FINDFIRST THEN
          ERROR(Text11012000, PurchHeader."Buy-from Vendor No.");
      END;

      Contact.GET(ContactBusinessRelation."Contact No.");
      Contact.TESTFIELD("Document Group");

      DocTemplate.SETRANGE("Document Group", Contact."Document Group");
      CASE PurchHeader."Document Type" OF
        PurchHeader."Document Type"::Quote : DocTemplate.SETRANGE(Type, DocTemplate.Type::"Purchase Quote");
        PurchHeader."Document Type"::Order : DocTemplate.SETRANGE(Type, DocTemplate.Type::"Purchase Order");
      END;
      //get the last document from each applicable template and mark it
      IF DocTemplate.FINDSET THEN
        REPEAT
          DocProp.SETCURRENTKEY("Document Group");
          DocProp.SETRANGE("Document Group", DocTemplate."Document Group");
          DocProp.SETRANGE("Document Template", DocTemplate."Template Code");
          RecRef.GETTABLE(PurchHeader);
          DocumentLinkMgt.GetDocuments(DocProp, RecRef);
          //There code here that also put a filter on Job No.; use is unclear
          //difficult to implement wiht Links
          DocProp.MARKEDONLY(TRUE);
          IF DocProp.FINDLAST THEN BEGIN
            Doc := DocProp;
            Doc.MARK(TRUE);
          END;
        UNTIL DocTemplate.NEXT = 0;

      // Drop all filters ... Do not reset ... We want to keep the marks ...
      Doc.SETRANGE("Document Group");
      Doc.SETRANGE("Document Template");
    END;

    BEGIN
    END.
  }
}

