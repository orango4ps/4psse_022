OBJECT Page 12057125 Matching Purch. Doc. Worksheet
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EXF501000;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Line Matching View;
               SVE=Radmatchnings vy];
    SourceTable=Table12013588;
    PageType=Worksheet;
    CardPageID=ExFlow Purchase Doc.;
    RefreshOnActivate=Yes;
    OnOpenPage=VAR
                 JnlSelected@1100285000 : Boolean;
               BEGIN
                 PreviewPDF;
                 SelectView;
                 ExFlowSetup.GET;
               END;

    OnClosePage=BEGIN
                  IF GlobalExfPurchHead."Inbound Document No." <> 0 THEN BEGIN
                    MatchingMgt.UpdateDocumentOnClose(GlobalExfPurchHead);
                    VerifyDocument(FALSE);
                  END;
                END;

    OnNewRecord=VAR
                  lrecExfJnlBatch@1100285000 : Record 12013590;
                BEGIN
                END;

    OnAfterGetCurrRecord=VAR
                           MatchingState@1100285000 : 'Order,OrderLine,Receipt,Price,Done';
                         BEGIN
                           CurrPage.MatchingLines.PAGE.SetMatchingLines(Rec,MatchingState);
                         END;

    ActionList=ACTIONS
    {
      { 1100285049;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1100285063;1 ;ActionGroup;
                      Name=Functions;
                      CaptionML=[ENU=F&unctions;
                                 SVE=Fu&nktion];
                      ActionContainerType=NewDocumentItems }
      { 1100285021;2 ;Action    ;
                      Name=MatchLine;
                      ShortCutKey=Ctrl+M;
                      CaptionML=[ENU=Match Selected Line;
                                 SVE=Matcha vald rad];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=MapDimensions;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 MatchLine;
                               END;
                                }
      { 1100285023;2 ;Action    ;
                      Name=UnmatchLine;
                      ShortCutKey=Ctrl+U;
                      CaptionML=[ENU=Release match;
                                 SVE=Ta bort matchning];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=UnApply;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 UnMatch;
                               END;
                                }
      { 1100285024;2 ;Action    ;
                      Name=Send Receipt Reminder;
                      CaptionML=[ENU=Send Receipt Reminder;
                                 SVE=Skicka inleveransp†minnelse];
                      Promoted=Yes;
                      Image=OverdueMail;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 ExFlowEmailMgt@1100285001 : Codeunit 12013627;
                               BEGIN
                                 VerifyDocument(TRUE);
                                 ExFlowEmailMgt.EmailUnreceiptedOrders('', Rec."Inbound Document No.");
                               END;
                                }
      { 1100285018;2 ;Action    ;
                      Name=OpenOrder;
                      ShortCutKey=Ctrl+O;
                      CaptionML=[ENU=Open Order Card;
                                 SVE=™ppna Ordern];
                      Promoted=Yes;
                      Image=Order;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 OpenOrderCard;
                               END;
                                }
      { 1100285017;2 ;Action    ;
                      Name=Show Document Image;
                      ShortCutKey=Ctrl+I;
                      CaptionML=[ENU=Show Document Image;
                                 SVE=Visa dokument];
                      Image=Document;
                      OnAction=BEGIN
                                 GlobalExfPurchHead.ShowImage;
                               END;
                                }
      { 1100285094;2 ;Separator  }
      { 1100285008;2 ;Action    ;
                      Name=Verify Document;
                      ShortCutKey=Ctrl+R;
                      CaptionML=[ENU=Ve&rify Document;
                                 SVE=Ve&rifiera dokument];
                      Image=CheckRulesSyntax;
                      OnAction=VAR
                                 lrecExfPurchDocHead@1100285002 : Record 12013587;
                                 VerifyImportJournal@1100285001 : Report 12013589;
                               BEGIN
                                 VerifyDocument(TRUE);
                               END;
                                }
      { 1100285121;2 ;Action    ;
                      CaptionML=[ENU=Email PDF Document;
                                 SVE=Eposta PDF dokument];
                      Image=MailAttachment;
                      OnAction=VAR
                                 ExfPurchDocHead@1100285000 : Record 12013587;
                                 ExFlowMailMgt@1100285001 : Codeunit 12013627;
                               BEGIN
                                 ExfPurchDocHead.COPY(GlobalExfPurchHead);
                                 ExfPurchDocHead.SETRECFILTER;
                                 ExFlowMailMgt.MailImportWkshHeader(ExfPurchDocHead);
                               END;
                                }
      { 1100285057;2 ;Action    ;
                      Name=Create Invoice/Cr.Memo;
                      ShortCutKey=F9;
                      Ellipsis=Yes;
                      CaptionML=[ENU=C&reate Invoice/Cr.Memo;
                                 SVE=S&kapa faktura/kreditnota];
                      Image=Post;
                      OnAction=VAR
                                 ExFlowToInvYesNo@1100285002 : Codeunit 12013591;
                               BEGIN
                                 CurrPage.SAVERECORD;
                                 ExFlowToInvYesNo.RUN(GlobalExfPurchHead);
                                 IF ISEMPTY THEN
                                   CurrPage.CLOSE
                                 ELSE
                                   CurrPage.UPDATE(FALSE);
                               END;
                                }
      { 1100285053;0 ;ActionContainer;
                      Name=<Action1100285053>;
                      ActionContainerType=RelatedInformation }
      { 1100285054;1 ;ActionGroup;
                      Name=<Action1100285054>;
                      CaptionML=[ENU=&Invoice;
                                 SVE=Fa&ktura] }
      { 1100285082;2 ;Action    ;
                      Name=Show Import Details (OCR);
                      CaptionML=[ENU=Show Import Details (OCR);
                                 SVE=Visa Importdetaljer (OCR)];
                      Image=Setup;
                      OnAction=BEGIN
                                 GlobalExfPurchHead.ShowImportCard;
                               END;
                                }
      { 1100285050;2 ;Action    ;
                      Name=Attachments;
                      ShortCutKey=Ctrl+B;
                      CaptionML=[ENU=Attachments;
                                 SVE=Bilagor];
                      RunObject=Page 12013598;
                      RunPageLink=Inbound Document No.=FIELD(Inbound Document No.);
                      Image=Documents }
      { 1100285051;2 ;Action    ;
                      Name=Statistics;
                      ShortCutKey=F7;
                      CaptionML=[ENU=Statistics;
                                 SVE=Statistik];
                      Image=Statistics;
                      OnAction=BEGIN
                                 PAGE.RUNMODAL(PAGE::"ExFlow Purchase Statistics", Rec);
                               END;
                                }
      { 1100285116;2 ;Action    ;
                      CaptionML=[ENU=See email log;
                                 SVE=Visa epost logg];
                      Image=EntriesList;
                      OnAction=VAR
                                 ExFlowMailMgt@1100285000 : Codeunit 12013627;
                               BEGIN
                                 ExFlowMailMgt.OpenEmailLog(GlobalExfPurchHead);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1100285000;0;Container;
                ContainerType=ContentArea }

    { 1100285004;1;Field  ;
                CaptionML=[ENU=Matching View;
                           SVE=Matchningsvy];
                OptionCaptionML=[ENU=Lines to Match,All OCR Lines,All Lines;
                                 SVE=Rader att matcha,Alla tolkade rader,Alla rader];
                SourceExpr=View;
                OnValidate=BEGIN
                             SetMatchingView;
                             CurrPage.UPDATE(FALSE);
                           END;
                            }

    { 1100285009;1;Group  ;
                GroupType=Repeater }

    { 1100285016;2;Field  ;
                SourceExpr="Temp Line Matching Handled" }

    { 1100285020;2;Field  ;
                SourceExpr="OCR Line No." }

    { 1100285022;2;Field  ;
                SourceExpr="Matching Comment" }

    { 1100285012;2;Field  ;
                SourceExpr="Order No. (Import)";
                Editable=FALSE }

    { 1100285013;2;Field  ;
                SourceExpr="Order No.";
                OnValidate=VAR
                             MatchingState@1100285000 : 'Order,OrderLine,Receipt,Price,Done';
                           BEGIN
                             IF ("Order No." <> '') AND ("Order No." <> xRec."Order No.") THEN
                               CurrPage.MatchingLines.PAGE.SetMatchingLines(Rec,MatchingState);
                           END;

                OnLookup=BEGIN
                           OrderNoLookup;
                           CurrPage.UPDATE(TRUE);
                         END;
                          }

    { 1100285011;2;Field  ;
                SourceExpr="Order Line No.";
                Editable=FALSE }

    { 1100285010;2;Field  ;
                SourceExpr="Test Unit Costs";
                OnValidate=VAR
                             MatchingState@1100285000 : 'Order,OrderLine,Receipt,Price,Done';
                           BEGIN
                             IF "Test Unit Costs" <> xRec."Test Unit Costs" THEN
                               CurrPage.MatchingLines.PAGE.SetMatchingLines(Rec,MatchingState);
                           END;
                            }

    { 1100285002;2;Field  ;
                SourceExpr=Type;
                Visible=FALSE;
                Editable=FALSE }

    { 1100285014;2;Field  ;
                SourceExpr="Original No. (Import)";
                Editable=FALSE }

    { 1100285003;2;Field  ;
                SourceExpr="No.";
                Editable=FALSE;
                OnValidate=VAR
                             MatchingState@1100285000 : 'Order,OrderLine,Receipt,Price,Done';
                           BEGIN
                           END;
                            }

    { 1100285005;2;Field  ;
                SourceExpr=Description;
                Editable=FALSE }

    { 1100285006;2;Field  ;
                SourceExpr="Quantity (Import)" }

    { 1100285007;2;Field  ;
                SourceExpr=Quantity }

    { 1100285015;2;Field  ;
                SourceExpr="Outstanding Quantity" }

    { 1100285001;2;Field  ;
                SourceExpr="PO Matching E-Mails" }

    { 1100285044;1;Part   ;
                Name=MatchingLines;
                CaptionML=[ENU=Matching lines;
                           SVE=Matchningsrader];
                PagePartID=Page12057129;
                Editable=FALSE;
                PartType=Page }

    { 1100285122;1;Field  ;
                Name=ErrorMessage2;
                CaptionML=[ENU=Original Action Message;
                           SVE=Ursprungs-†tg„rdsmeddelande];
                SourceExpr="Error Message";
                OnAssistEdit=BEGIN
                               IF "Error Message" <> '' THEN
                                 MESSAGE(STRSUBSTNO(EXF001,"Error Message"));
                             END;
                              }

    { 1100285047;0;Container;
                ContainerType=FactBoxArea }

    { 1100285019;1;Part   ;
                Name=PdfPreviewPart;
                CaptionML=[ENU=PDF Preview;
                           SVE=PDF F”rhandsgranskning];
                PagePartID=Page12057078;
                PartType=Page }

    { 1100285090;1;Part   ;
                SubPageLink=No.=FIELD(Buy-from Vendor No.);
                PagePartID=Page9093;
                Visible=FALSE;
                PartType=Page }

    { 1100285089;1;Part   ;
                SubPageLink=No.=FIELD(Buy-from Vendor No.);
                PagePartID=Page9094;
                Visible=TRUE;
                PartType=Page }

    { 1100285088;1;Part   ;
                SubPageLink=No.=FIELD(Buy-from Vendor No.);
                PagePartID=Page9095;
                Visible=TRUE;
                PartType=Page }

    { 1100285042;1;Part   ;
                SubPageLink=No.=FIELD(Pay-to Vendor No.);
                PagePartID=Page9096;
                Visible=FALSE;
                PartType=Page }

    { 1100285103;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      GlobalExfPurchHead@1100285002 : Record 12013587;
      MatchingMessage@1100285005 : Text;
      EXF001@1100285008 : TextConst 'ENU=Select order no.;SVE=V„lj ordernummer:';
      EXF002@1100285001 : TextConst 'ENU=Select Order Line No.;SVE=V„llj orderradsnummer';
      EXF003@1100285003 : TextConst 'ENU=Receipt missing;SVE=Inleverans Saknas';
      EXF004@1100285009 : TextConst 'ENU=Confirm Price diff.;SVE=Godk„nn prisdifferans.';
      EXF005@1100285011 : TextConst 'ENU=Line Matched;SVE=Rad matchad';
      View@1100285012 : 'Missmatch,All OCR Lines,All Lines';
      EXF008@1100285006 : TextConst 'ENU=Line not matched.;SVE=Raden „r inte matchad.';
      EXF009@1100285007 : TextConst 'ENU=Warning this action will match the line against a diffrent (item) No. Continue?;SVE=Varning du f”rs”ker matcha raden mot en annan artikel. Forts„tta?';
      MatchingMgt@1100285000 : Codeunit 12057125;
      ExFlowSetup@1100285004 : Record 12013601;

    PROCEDURE SetExfPurchHead@1100285000(ExfPurchHead@1100285000 : Record 12013587);
    BEGIN
      ExfPurchHead.TESTFIELD("Inbound Document No.");
      GlobalExfPurchHead.GET(ExfPurchHead."Inbound Document No.");
    END;

    LOCAL PROCEDURE SetMatchingView@1100285002();
    BEGIN
      RESET;
      SETRANGE("Inbound Document No.",GlobalExfPurchHead."Inbound Document No.");
      CASE View OF
        View::Missmatch :
          BEGIN
            SETCURRENTKEY("Inbound Document No.","OCR Line No.");
            SETRANGE("OCR Imported Line",TRUE);
            SETFILTER("Error Message",'<>%1','');
          END;
        View::"All OCR Lines" :
          BEGIN
            SETCURRENTKEY("Inbound Document No.","OCR Line No.");
            SETRANGE("OCR Imported Line",TRUE);
          END;
        View::"All Lines" :
          BEGIN
            SETCURRENTKEY("Inbound Document No.","Line No.");
            SETFILTER(Type,'<>%1',Type::" ");
          END;
      END;
    END;

    PROCEDURE OpenOrderCard@1100285003();
    VAR
      PurchaseHeader@1100285001 : Record 38;
      PurchaseOrder@1100285000 : Page 50;
      TempExPurchLine@1100285002 : TEMPORARY Record 12057115;
    BEGIN
      CurrPage.MatchingLines.PAGE.GetCurrRec(TempExPurchLine);

      IF (TempExPurchLine."Document Type" = TempExPurchLine."Document Type"::Order) AND (TempExPurchLine."Document No." <> '') THEN
        PurchaseHeader.GET("Document Type"::Order,TempExPurchLine."Document No.")
      ELSE
        PurchaseHeader.GET("Document Type"::Order,"Order No.");

      PurchaseOrder.SETRECORD(PurchaseHeader);
      PurchaseOrder.RUN;
    END;

    LOCAL PROCEDURE MatchLine@1100285004();
    VAR
      TempExPurchLine@1100285000 : TEMPORARY Record 12057115;
      MatchingState@1100285001 : 'Order,OrderLine,Receipt,Price,Done';
      ValidatePurchDoc@1100285002 : Codeunit 12013594;
      OldOrderNo@1100285003 : Code[20];
    BEGIN
      CurrPage.MatchingLines.PAGE.GetCurrRec(TempExPurchLine);
      IF "Exflow-Created Entry" = "Exflow-Created Entry"::DiffLine THEN BEGIN
        TESTFIELD("Test Unit Costs");
        "Temp Line Matching Handled" := TRUE;
        "Test Unit Costs" := FALSE;
        CurrPage.MatchingLines.PAGE.SetMatchingLines(Rec,MatchingState);
      END ELSE IF TempExPurchLine."Document Type" = TempExPurchLine."Document Type"::Invoice THEN BEGIN
        IF "Test Unit Costs" THEN BEGIN
          "Test Unit Costs" := FALSE;
          "Price Check Inactivated" := TRUE;
          CurrPage.MatchingLines.PAGE.SetMatchingLines(Rec,MatchingState);
        END ELSE IF "Temp Line Matching Handled" THEN
          ERROR(EXF005);
        "Temp Line Matching Handled" := TRUE;
      END ELSE BEGIN
        TempExPurchLine.TESTFIELD("Document Type",TempExPurchLine."Document Type"::Order);
        TempExPurchLine.TESTFIELD("Document No.");

        IF TempExPurchLine."Document No." <> "Order No." THEN
          VALIDATE("Order No.",TempExPurchLine."Document No.");

        IF TempExPurchLine."Line No." <> 0 THEN BEGIN
          IF ("No." <> '') AND (ExFlowSetup."Dummy Item OCR Line" <> "No.") AND (TempExPurchLine."No." <> "No.") THEN
            IF NOT CONFIRM(EXF009) THEN BEGIN
              ResetOrderNo;
              EXIT;
            END;

          IF NOT MatchingMgt.ConfirmAvailabilty(Rec,TempExPurchLine) THEN BEGIN
            ResetOrderNo;
            EXIT;
          END;

          IF TempExPurchLine."No." <> "No." THEN BEGIN
            Type := TempExPurchLine.Type;
            "No." := TempExPurchLine."No.";
            ValidatePurchDoc.AutoCreateMapping(Rec);
          END;

          IF TempExPurchLine."Line No." <> "Order Line No." THEN
            VALIDATE("Order Line No.",TempExPurchLine."Line No.");
          "Manually Unmatched" := FALSE;
          "Temp Line Matching Handled" := TRUE;
          "Line manually changed" := TRUE;
          "Test Unit Costs" := ExFlowSetup."Check Unit Cost";
          "Price Check Inactivated" := FALSE;
          CurrPage.MatchingLines.PAGE.SetMatchingLines(Rec,MatchingState);
          IF MatchingState <> MatchingState::Done THEN
            "Temp Line Matching Handled" := FALSE;
        END;
      END;
    END;

    LOCAL PROCEDURE VerifyDocument@1100285005(Update@1100285002 : Boolean);
    VAR
      lrecExfPurchDocHead@1100285001 : Record 12013587;
      VerifyImportJournal@1100285000 : Report 12013589;
      ExPurchLine@1100285003 : Record 12013588;
    BEGIN
      IF GlobalExfPurchHead."Inbound Document No." = 0 THEN
        EXIT;

      CurrPage.SAVERECORD;
      COMMIT;

      lrecExfPurchDocHead.RESET;
      lrecExfPurchDocHead.SETRANGE("Inbound Document No.", GlobalExfPurchHead."Inbound Document No.");
      VerifyImportJournal.SETTABLEVIEW(lrecExfPurchDocHead);
      VerifyImportJournal.RUNMODAL;

      IF Update THEN BEGIN
        SelectView;
        CurrPage.UPDATE(FALSE);
      END;
    END;

    LOCAL PROCEDURE SelectView@1100285007();
    BEGIN
      GlobalExfPurchHead.TESTFIELD("Inbound Document No.");
      RESET;
      SETRANGE("Inbound Document No.",GlobalExfPurchHead."Inbound Document No.");
      SETRANGE("OCR Imported Line",TRUE);
      IF NOT ISEMPTY THEN
        View := View::"All OCR Lines";
      SETFILTER("Error Message",'<>%1','');
      IF NOT ISEMPTY THEN
        View := View::Missmatch
      ELSE IF View <> View::"All OCR Lines" THEN
        View := View::"All Lines";

      SetMatchingView;
    END;

    LOCAL PROCEDURE PreviewPDF@1100285009();
    VAR
      PDFPrewMgt@1100285001 : Codeunit 12057081;
      NewEncodedPDF@1100285000 : Text;
    BEGIN
      PDFPrewMgt.SetPDFFromExPurchDoc(GlobalExfPurchHead,NewEncodedPDF);
      CurrPage.PdfPreviewPart.PAGE.SetNewPDF(NewEncodedPDF);
    END;

    LOCAL PROCEDURE UnMatch@1100285010();
    VAR
      ExFlowSetup@1100285000 : Record 12013601;
    BEGIN
      IF ("Receipt No." = '')  AND ExFlowSetup."Check Unit Cost" AND ("Order Line No." <> 0) AND NOT "Test Unit Costs" THEN
        "Test Unit Costs" := TRUE
      ELSE IF "Order Line No." <> 0 THEN BEGIN
        "Manually Unmatched" := TRUE;
        MatchingMgt.DeleteReceiptTextLine(Rec);
        VALIDATE("Order Line No.",0);
      END ELSE IF "Order No." <> '' THEN BEGIN
        "Manually Unmatched" := TRUE;
        VALIDATE("Order No.",'')
      END ELSE
        ERROR(EXF008);

      "Temp Line Matching Handled" := FALSE;
    END;

    LOCAL PROCEDURE ResetOrderNo@1100285001();
    BEGIN
      IF xRec."Order No." <> "Order No." THEN
        VALIDATE("Order No.",xRec."Order No.");

      IF xRec."Order Line No." <> "Order Line No." THEN
        VALIDATE("Order Line No.",xRec."Order Line No.");
    END;

    BEGIN
    END.
  }
}

