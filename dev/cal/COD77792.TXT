OBJECT Codeunit 77792 Import DotNet Translation File
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=TTool;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TTNetCaption@1000 : Record 77793;
      NextEntryNo@1001 : Integer;
      Text001@1003 : TextConst 'ENU=Product Code does not exist.';
      Text002@1002 : TextConst 'ENU=Are you sure you want to import all translation files for this product?';
      Text003@1004 : TextConst 'ENU=There are already translations imported for this product. Import is stopped.';
      Text004@1005 : TextConst 'ENU=No files present.;SVE=Det finns inga filer';
      Text005@1006 : TextConst 'ENU=File Name;SVE=Filnamn';
      NetFileCode@1007 : Code[20];
      NextFileNo@1008 : Integer;

    PROCEDURE ImportTranslationData@1100525000(ProductCode@1001 : Code[20];FileCode@1002 : Code[20];InsertAsLanguageCode@1003 : Code[10];OverwriteExistingCaption@1004 : Boolean;FileName@1100525000 : Text);
    VAR
      TempBlob@1006 : Record 99008535;
      TTNetFile@1008 : Record 77794;
      XMLDOMManagement4PS@1009 : Codeunit 11020220;
      FileMgt@1005 : Codeunit 419;
      XmlDoc@1100409000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XmlNodeListData@1000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      IStream@1007 : InStream;
      i@1010 : Integer;
    BEGIN
      XmlDoc := XmlDoc.XmlDocument;
      XMLDOMManagement4PS.LoadXMLFromClientFile(XmlDoc,FileName,FALSE);

      // Save whole XML File as BLOB at TT dotNET File to reuse at export
      FileMgt.BLOBImport4PS(TempBlob, FileName, FALSE);
      TTNetFile.GET(ProductCode,FileCode);
      TTNetFile."File Content" := TempBlob.Blob;
      TTNetFile.MODIFY;

      TTNetCaption.SETCURRENTKEY("Entry No.");
      IF TTNetCaption.FINDLAST THEN
        NextEntryNo := TTNetCaption."Entry No." + 1
      ELSE
        NextEntryNo := 1;

      XmlNodeListData := XmlDoc.SelectNodes('/root/data');

      FOR i := 0 TO XmlNodeListData.Count - 1 DO
        ImportTables(XmlNodeListData.Item(i),ProductCode,FileCode,InsertAsLanguageCode,OverwriteExistingCaption);
    END;

    LOCAL PROCEDURE ImportTables@1100525001(XmlElementData@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";ProductCode@1003 : Code[20];FileCode@1002 : Code[20];InsertAsLanguageCode@1001 : Code[10];OverwriteExistingCaption@1007 : Boolean);
    VAR
      TTNetDataName@1008 : Record 77792;
      XmlNodeListValues@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      i@1100525004 : Integer;
      DataNameID@1000 : Code[100];
      DataNameText@1004 : Text;
    BEGIN
      EVALUATE(DataNameID, FORMAT((XmlElementData.GetAttribute('name'))));
      EVALUATE(DataNameText, FORMAT((XmlElementData.GetAttribute('name'))));

      IF NOT TTNetDataName.GET(ProductCode,FileCode,DataNameID) THEN BEGIN
        TTNetDataName."Product Code" := ProductCode;
        TTNetDataName."File Code" := FileCode;
        TTNetDataName.ID := DataNameID;
        TTNetDataName."Text ID" := DataNameText;
        TTNetDataName.INSERT(TRUE);
      END;

      XmlNodeListValues := XmlElementData.SelectNodes('value');

      FOR i := 0 TO XmlNodeListValues.Count - 1 DO
        ImportValue(XmlNodeListValues.Item(i),ProductCode,FileCode,InsertAsLanguageCode,OverwriteExistingCaption,DataNameID);
    END;

    LOCAL PROCEDURE ImportValue@1100525002(XmlElementValue@1007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";ProductCode@1003 : Code[20];FileCode@1002 : Code[20];InsertAsLanguageCode@1001 : Code[10];OverwriteExistingCaption@1008 : Boolean;DataNameID@1004 : Code[100]);
    VAR
      XmlNodeListFields@1100409001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      i@1100525003 : Integer;
      ValueText@1006 : Text;
    BEGIN
      ValueText := FORMAT(XmlElementValue.InnerText);
      IF ValueText = '' THEN
        EXIT;

      IF TTNetCaption.GET(ProductCode, InsertAsLanguageCode, FileCode, DataNameID) THEN BEGIN
        IF OverwriteExistingCaption THEN BEGIN
          TTNetCaption.SetCaption(ValueText);
          TTNetCaption.Status := TTNetCaption.Status::Modified;
          TTNetCaption.UpdateProperties;
          TTNetCaption.MODIFY(TRUE);
        END;
      END ELSE BEGIN
        TTNetCaption."Entry No." := NextEntryNo;
        TTNetCaption."Language ID" := InsertAsLanguageCode;
        TTNetCaption."File Code" := FileCode;
        TTNetCaption."Data Name ID" := DataNameID;
        TTNetCaption.SetCaption(ValueText);
        TTNetCaption.Status := TTNetCaption.Status::Imported;
        TTNetCaption."Product Code" := ProductCode;
        TTNetCaption.INSERT(TRUE);
        NextEntryNo := NextEntryNo + 1;
      END;
    END;

    PROCEDURE ImportAllFilesOfProduct@1(TTNetProduct@1000 : Record 77791;InsertAsLanguageCode@1005 : Code[10]);
    VAR
      FileNameFilter@1004 : Text[30];
    BEGIN
      // Only allowed if there are no imports done already for the product
      TTNetCaption.SETRANGE("Product Code",TTNetProduct.Code);
      IF TTNetCaption.FINDFIRST THEN
        ERROR(Text003);

      NextFileNo := 1;

      FileNameFilter := '*.resx';
      ProcessImportFiles(TTNetProduct,FileNameFilter,InsertAsLanguageCode);
    END;

    LOCAL PROCEDURE ProcessImportFiles@1100525009(TTNetProduct@1100525000 : Record 77791;FileNameFilter@1000 : Text[30];InsertAsLanguageCode@1003 : Code[10]);
    VAR
      FileMgt@1004 : Codeunit 419;
      FileArray@1100525003 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array" RUNONCLIENT;
      Window@1100525001 : Dialog;
      DirectoryName@1100525007 : Text[250];
      FileName@1100525008 : Text[250];
      I@1100525002 : Integer;
      File@1001 : Text;
      NetFileCode@1002 : Code[20];
    BEGIN
      FileMgt.GetFileNamesOfClientFolder(TTNetProduct."Import Directory", FileNameFilter, FileArray);
      IF FileArray.Length <= 0 THEN
        ERROR(Text004);

      Window.OPEN(Text005 + ' #1##############################');
      FOR I := 1 TO FileArray.Length DO BEGIN
        FileMgt.SplitFileAbsPathName(FileArray.GetValue(I - 1), DirectoryName, FileName);
        IF FileMgt.ClientFileExists(TTNetProduct."Import Directory" + FileName) THEN BEGIN
          Window.UPDATE(1, FileName);
          File := TTNetProduct."Import Directory" + FileName;
          CreateNetFile(TTNetProduct.Code, NetFileCode, File);
          ImportTranslationData(TTNetProduct.Code,NetFileCode,InsertAsLanguageCode,TRUE,File);
        END;
      END;
      Window.CLOSE;
    END;

    PROCEDURE CreateNetFile@2(NetProductCode@1002 : Code[20];VAR NetFileCode@1000 : Code[20];File@1001 : Text);
    VAR
      TTNetFile@1003 : Record 77794;
    BEGIN
      NetFileCode := STRSUBSTNO('%1-%2',COPYSTR(NetProductCode,1,15),NextFileNo);

      TTNetFile."Product Code" := NetProductCode;
      TTNetFile.Code := NetFileCode;
      TTNetFile."Import File Name" := File;
      TTNetFile.INSERT;

      NextFileNo := NextFileNo + 1;
    END;

    BEGIN
    END.
  }
}

