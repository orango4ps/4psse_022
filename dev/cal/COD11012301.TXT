OBJECT Codeunit 11012301 Item Search Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ItemSearchWordDetail@1210190000 : Record 11012330;
      SearchWord@1210190003 : Record 11012329;
      TempSearchResultRec@1210190008 : TEMPORARY Record 11012331;
      SelectFldRec@1100485008 : Record 11020263;
      Delimiters@1210190002 : Text[250];
      LineNo@1210190005 : Integer;
      i@1210190001 : Integer;
      Status@1100485002 : Dialog;
      maxrec@1100485001 : Integer;
      currec@1100485000 : Integer;
      Text002@1100485003 : TextConst 'DEU=Besch„ftigt mit #1################# @2@@@@@@@@@@@@@;ENU=Busy with       #1################# @2@@@@@@@@@@@@@;NLD=Bezig met       #1################# @2@@@@@@@@@@@@@;NOR=Opptatt med       #1################# @2@@@@@@@@@@@@@;SVE=Upptagen med    #1################# @2@@@@@@@@@@@@@';
      RecRef@1100485011 : RecordRef;
      FldRef@1100485010 : FieldRef;
      FieldRec@1100485009 : Record 2000000041;

    PROCEDURE ParseField@1210190003(TextToParse@1210190001 : Text[250];SourceType@1210190002 : 'Navision Item,Basic Item,Trade Item';BasicItemCde@1210190012 : Code[20];ManufacturerCde@1210190011 : Code[20];TradeItemCde@1210190010 : Code[20];VendorCde@1210190008 : Code[20];ItemCde@1210190007 : Code[20];TableNumber@1210190000 : Integer;FieldNumber@1210190003 : Integer;DeletePrevious@1210190004 : Boolean);
    VAR
      WordPos@1210190005 : Integer;
      StartPos@1210190006 : Integer;
      SeparateWord@1210190009 : Text[80];
    BEGIN
      Delimiters := ' @*?';

      IF DeletePrevious THEN //mg.c, 16-06-11: RFC457
        DeletePreviousDetails(SourceType,BasicItemCde,ManufacturerCde,TradeItemCde,VendorCde,ItemCde,TableNumber,FieldNumber);
      TextToParse := LOWERCASE(TextToParse);

      WordPos := 1;
      StartPos := 1;
      FOR i := 1 TO STRLEN(TextToParse) DO BEGIN
        CASE STRPOS(Delimiters,FORMAT(TextToParse[i])) OF
          0: ;
          1..STRLEN(' @*?'):
            BEGIN
              IF i > StartPos THEN BEGIN
                SeparateWord := COPYSTR(TextToParse,StartPos,i - StartPos);
                SearchWord.InsertWord(SeparateWord,SourceType,BasicItemCde,ManufacturerCde,TradeItemCde,VendorCde,ItemCde,
                                      TableNumber,FieldNumber,WordPos); //mg.c, 16-06-11: RFC457
                WordPos := WordPos + 1;
              END;
              StartPos := i + 1;
            END;
            ELSE BEGIN
              IF i > StartPos THEN BEGIN
                SeparateWord := COPYSTR(TextToParse,StartPos,i - StartPos);
                SearchWord.InsertWord(SeparateWord,SourceType,BasicItemCde,ManufacturerCde,TradeItemCde,VendorCde,ItemCde,
                                      TableNumber,FieldNumber,WordPos); //mg.c, 16-06-11: RFC457
                WordPos := WordPos + 1;
              END;
              SeparateWord := FORMAT(TextToParse[i]);
              SearchWord.InsertWord(SeparateWord,SourceType,BasicItemCde,ManufacturerCde,TradeItemCde,VendorCde,ItemCde,
                                    TableNumber,FieldNumber,WordPos); //mg.c, 16-06-11: RFC457
              WordPos := WordPos + 1;
              StartPos := i + 1;
            END;
          END;
      END;
      IF STRLEN(TextToParse) >= StartPos THEN BEGIN
        SeparateWord := COPYSTR(TextToParse,StartPos,STRLEN(TextToParse) - StartPos + 1);
        SearchWord.InsertWord(SeparateWord,SourceType,BasicItemCde,ManufacturerCde,TradeItemCde,VendorCde,ItemCde,
                              TableNumber,FieldNumber,WordPos); //mg.c, 16-06-11: RFC457
      END;
    END;

    PROCEDURE DeletePreviousDetails@1210190006(SourceType@1210190011 : 'Navision Item,Basic Item,Trade Item';BasicItemCde@1210190010 : Code[20];ManufacturerCde@1210190009 : Code[20];TradeItemCde@1210190008 : Code[20];VendorCde@1210190007 : Code[20];ItemCde@1210190006 : Code[20];TableNumber@1210190000 : Integer;FieldNumber@1210190005 : Integer);
    BEGIN
      WITH ItemSearchWordDetail DO BEGIN
        SETCURRENTKEY("Source Type", "Product Code", Manufacturer, "Vendor Item", Vendor, "Item No.", "Table No.", "Field No.");
        SETRANGE("Source Type",SourceType);
        SETRANGE("Product Code",BasicItemCde);
        SETRANGE(Manufacturer,ManufacturerCde);
        SETRANGE("Vendor Item",TradeItemCde);
        SETRANGE(Vendor,VendorCde);
        SETRANGE("Item No.",ItemCde);
        IF "Source Type" = "Source Type"::"Navision Item" THEN
          SETRANGE("Table No.",TableNumber); //mg, 16-06-11: RFC457
        SETRANGE("Field No.",FieldNumber);
        IF SourceType = SourceType::"Navision Item" THEN  //db, 07-10-08
          SETRANGE("Company Name", GetCompany)
        ELSE
          SETFILTER("Company Name", '%1', '');
        DELETEALL(TRUE);
      END;
    END;

    PROCEDURE ParseItem@1210190005(ItemRec@1210190000 : Record 27);
    VAR
      ItemFeature@1210190001 : Record 11020301;
      FirstFeature@1210190002 : Boolean;
    BEGIN
      WITH ItemRec DO BEGIN
        SelectFldRec.SETRANGE(Type, SelectFldRec.Type::Item);
        SelectFldRec.SETRANGE("Table No.", DATABASE::Item);
        IF SelectFldRec.FINDSET THEN BEGIN
          REPEAT
            RecRef.GETTABLE(ItemRec);
            ParseField(AnyTableFieldValue(SelectFldRec."Table No.", SelectFldRec."Field No."),
              0, '', '', '', '', "No.", SelectFldRec."Table No.", SelectFldRec."Field No.", TRUE); //mg.c, 16-06-11: RFC457
          UNTIL SelectFldRec.NEXT = 0;
        END;

        //mg.sn, 06-06-11: RFC457
        FirstFeature := TRUE;
        ItemFeature.SETRANGE("Item No.", "No.");
        IF ItemFeature.FINDSET THEN BEGIN
          REPEAT
            SelectFldRec.SETRANGE(Type, SelectFldRec.Type::Item);
            SelectFldRec.SETRANGE("Table No.", DATABASE::"Item Feature");
            IF SelectFldRec.FINDSET THEN BEGIN
              REPEAT
                RecRef.GETTABLE(ItemFeature);
                ParseField(AnyTableFieldValue(SelectFldRec."Table No.", SelectFldRec."Field No."),
                  0, '', '', '', '', "No.", SelectFldRec."Table No.", SelectFldRec."Field No.",FirstFeature);
              UNTIL SelectFldRec.NEXT = 0;
            END;
            FirstFeature := FALSE;
          UNTIL ItemFeature.NEXT = 0;
        END ELSE BEGIN
          SelectFldRec.SETRANGE(Type, SelectFldRec.Type::Item);
          SelectFldRec.SETRANGE("Table No.", DATABASE::"Item Feature");
          IF SelectFldRec.FINDSET THEN BEGIN
            REPEAT
              DeletePreviousDetails(0,'','','','',"No.",DATABASE::"Item Feature",SelectFldRec."Field No.");
            UNTIL SelectFldRec.NEXT = 0;
          END;
        END;
        //mg.en, 06-06-11: RFC457
      END;
    END;

    PROCEDURE ParseBasicItem@1210190001(BasicItemRec@1210190000 : Record 11012316);
    BEGIN
      WITH BasicItemRec DO BEGIN
        SelectFldRec.SETRANGE(Type, SelectFldRec.Type::Item);
        SelectFldRec.SETRANGE("Table No.", DATABASE::"Basic Item");
        IF SelectFldRec.FINDSET THEN BEGIN
          REPEAT
            RecRef.GETTABLE(BasicItemRec);
            ParseField(AnyTableFieldValue(SelectFldRec."Table No.", SelectFldRec."Field No."),
              1, "Product Code", Manufacturer, '', '', '', 0, SelectFldRec."Field No.", TRUE); //mg.c, 16-06-11: RFC457
          UNTIL SelectFldRec.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE ParseTradeItem@1210190004(TradeItemRec@1210190000 : Record 11012317);
    BEGIN
      WITH TradeItemRec DO BEGIN
        SelectFldRec.SETRANGE(Type, SelectFldRec.Type::Item);
        SelectFldRec.SETRANGE("Table No.", DATABASE::"Trade Item");
        IF SelectFldRec.FINDSET THEN BEGIN
          REPEAT
            RecRef.GETTABLE(TradeItemRec);
            ParseField(AnyTableFieldValue(SelectFldRec."Table No.", SelectFldRec."Field No."),
              2, "Product Code", Manufacturer, "Item Code", Vendor, '', 0,
              SelectFldRec."Field No.", TRUE); //mg.c, 16-06-11: RFC457
          UNTIL SelectFldRec.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE CombineSearchResult@1210190002(searchstring@1210190000 : Text[250]);
    BEGIN
      IF TempSearchResultRec.FIND('-') THEN BEGIN
        REPEAT
          IF NOT CheckCombination(searchstring) THEN
            TempSearchResultRec.DELETE;
        UNTIL TempSearchResultRec.NEXT = 0;
      END;
      ItemSearchWordDetail.RESET;
    END;

    PROCEDURE CheckCombination@1210190009(searchstring@1210190002 : Text[250]) Combination : Boolean;
    VAR
      CombBln@1210190001 : Boolean;
    BEGIN
      CombBln := TRUE;
      SearchWord.SETFILTER("Search Argument",searchstring);
      IF SearchWord.FINDSET THEN BEGIN
        REPEAT
          ItemSearchWordDetail.SETRANGE("No.",SearchWord."No.");
          ItemSearchWordDetail.SETRANGE("Source Type",TempSearchResultRec."Source Type");
          ItemSearchWordDetail.SETRANGE("Product Code",TempSearchResultRec."Product Code");
          ItemSearchWordDetail.SETRANGE(Manufacturer,TempSearchResultRec.Manufacturer);
          ItemSearchWordDetail.SETRANGE("Vendor Item",TempSearchResultRec."Vendor Item");
          ItemSearchWordDetail.SETRANGE(Vendor,TempSearchResultRec.Vendor);
          ItemSearchWordDetail.SETRANGE("Item No.",TempSearchResultRec."Item No.");
          IF NOT ItemSearchWordDetail.FINDFIRST THEN
            CombBln := FALSE;
        UNTIL SearchWord.NEXT = 0;
      END;
      EXIT(CombBln);
    END;

    PROCEDURE SearchItems@1210190007(searchstring@1210190001 : Text[250];SourceType@1210190000 : 'Navision Item,Basic Item,Trade Item,All';VAR SelecteditemType@1210190005 : 'Navision Item,Basic Item,Trade Item';VAR SelectedBasicItem@1210190006 : Code[20];VAR SelectedManufacturer@1210190004 : Code[20];VAR SelectedTradeItem@1210190003 : Code[20];VAR SelectedVendor@1210190002 : Code[20];VAR SelectedItem@1210190008 : Code[20];Combine@1210190007 : Boolean;VAR TmpResultRec@1210190009 : TEMPORARY Record 11012331);
    BEGIN
      CASE SourceType OF
        SourceType::"Navision Item":
          ItemSearchWordDetail.SETRANGE("Source Type",ItemSearchWordDetail."Source Type"::"Navision Item");
        SourceType::"Basic Item":
          ItemSearchWordDetail.SETRANGE("Source Type",ItemSearchWordDetail."Source Type"::"Basic Item");
        SourceType::"Trade Item":
          ItemSearchWordDetail.SETRANGE("Source Type",ItemSearchWordDetail."Source Type"::"Trade Item");
        SourceType::All:
          ItemSearchWordDetail.SETRANGE("Source Type");
      END;

      Delimiters := ' @?';
      searchstring := LOWERCASE(searchstring);
      LineNo := 10000;

      SearchWord.SETCURRENTKEY("Search Argument");
      SearchWord.SETRANGE("Search Argument", searchstring);
      CASE SourceType OF  //db, 07-10-08
        SourceType::"Navision Item":
          SearchWord.SETRANGE("Company Name", GetCompany);
        SourceType::"Basic Item":
          SearchWord.SETFILTER("Company Name", '%1', '');
        SourceType::"Trade Item":
          SearchWord.SETFILTER("Company Name", '%1', '');
        SourceType::All:
          SearchWord.SETFILTER("Company Name", '%1|%2', '', GetCompany);
      END;
      IF NOT SearchWord.FINDFIRST THEN BEGIN
        SearchWord.SETCURRENTKEY("Item Usage");
        CASE SourceType OF
          SourceType::"Navision Item":
            SearchWord.SETFILTER("Item Usage", '1|3|5|7|9');
          SourceType::"Basic Item":
            SearchWord.SETFILTER("Item Usage", '2..3|6..7');
          SourceType::"Trade Item":
            SearchWord.SETFILTER("Item Usage", '4..7');
          SourceType::All:
            SearchWord.SETRANGE("Item Usage");
        END;
      END;

      TempSearchResultRec.RESET;
      TempSearchResultRec.DELETEALL;
      TmpResultRec.RESET;
      TmpResultRec.DELETEALL;

      InsertTempSearchResult(searchstring);
      IF Combine THEN
        CombineSearchResult(searchstring);

      IF TempSearchResultRec.FIND('-') THEN BEGIN
        REPEAT
          TmpResultRec := TempSearchResultRec;
          TmpResultRec.INSERT;
        UNTIL TempSearchResultRec.NEXT = 0;
      END;
    END;

    PROCEDURE InsertTempSearchResult@1210190012(SearchSubString@1210190000 : Text[250]);
    VAR
      ItemRec@1210190002 : Record 27;
      BasicItemRec@1210190004 : Record 11012316;
      TradeItemRec@1210190005 : Record 11012317;
      RelationRec@1100485000 : Record 11012313;
      ValidateCu@1100485001 : Codeunit 11012033;
    BEGIN
      Status.OPEN(Text002);

      SearchWord.SETFILTER("Search Argument",SearchSubString);
      IF SearchWord.FINDSET THEN BEGIN
        currec := 0;
        maxrec := SearchWord.COUNT;
        REPEAT
          ItemSearchWordDetail.SETRANGE("No.",SearchWord."No.");
          IF ItemSearchWordDetail.FINDSET THEN BEGIN
            REPEAT
              IF NOT TempSearchResultRec.GET(ItemSearchWordDetail."Source Type",
                                             ItemSearchWordDetail."Product Code",
                                             ItemSearchWordDetail.Manufacturer,
                                             ItemSearchWordDetail."Vendor Item",
                                             ItemSearchWordDetail.Vendor,
                                             ItemSearchWordDetail."Item No.") THEN BEGIN
                TempSearchResultRec.INIT;
                TempSearchResultRec."Source Type" := ItemSearchWordDetail."Source Type";
                TempSearchResultRec."Product Code" := ItemSearchWordDetail."Product Code";
                TempSearchResultRec.Manufacturer := ItemSearchWordDetail.Manufacturer;
                TempSearchResultRec."Vendor Item" := ItemSearchWordDetail."Vendor Item";
                TempSearchResultRec.Vendor  := ItemSearchWordDetail.Vendor;
                TempSearchResultRec."Item No." := ItemSearchWordDetail."Item No.";
                TempSearchResultRec."Item Exist" := FALSE;
                CASE TempSearchResultRec."Source Type" OF
                  TempSearchResultRec."Source Type"::"Navision Item":
                    BEGIN
                      IF ItemRec.GET(TempSearchResultRec."Item No.") THEN BEGIN
                        TempSearchResultRec."Item Description" := ItemRec.Description;
                        TempSearchResultRec."Item Description 2" := ItemRec."Description 2";
                        TempSearchResultRec."Item Text" := ItemRec.Text;
                        TempSearchResultRec."GTIN Code" := ItemRec."GTIN Code";
                        TempSearchResultRec."Item Brand" := ItemRec."Item Brand";
                        TempSearchResultRec."Item Series" := ItemRec."Item Series";
                        TempSearchResultRec."Item Type" := ItemRec."Item Type";
                        TempSearchResultRec."Application Unit" := ItemRec."Base Unit of Measure";
                        TempSearchResultRec."Gross Price" := ItemRec."Unit Price";  //db, 22-07-08
                        TempSearchResultRec."Net Price" := ItemRec."Unit Cost";
                        TempSearchResultRec."Discount Percentage" := ItemRec."Profit %";  //db, 22-07-08
                        IF ItemRec.Blocked = FALSE THEN
                          TempSearchResultRec."Item Exist" := TRUE;
                      END;
                    END;
                  TempSearchResultRec."Source Type"::"Basic Item":
                    BEGIN
                      IF BasicItemRec.GET(TempSearchResultRec.Manufacturer, TempSearchResultRec."Product Code") THEN BEGIN
                        ValidateCu.GetPriceBasicItem(BasicItemRec, TODAY, '', '', '', FALSE);  //db, 03-08-08
                        TempSearchResultRec."Item Description" := BasicItemRec."Product Description";
                        TempSearchResultRec."Item Description 2" := BasicItemRec."Product Description 2";
                        TempSearchResultRec."GTIN Code" := BasicItemRec."GTIN Code";
                        TempSearchResultRec."Item Brand" := BasicItemRec."Item Brand";
                        TempSearchResultRec."Item Series" := BasicItemRec."Item Series";
                        TempSearchResultRec."Item Type" := BasicItemRec."Item Type";
                        TempSearchResultRec."Gross Price" := BasicItemRec."Gross Price";
                        TempSearchResultRec."Net Price" := BasicItemRec."Net Price";
                        TempSearchResultRec."Discount Percentage" := BasicItemRec."Discount Percentage";  //db, 22-07-08
                        TempSearchResultRec."Application Unit" := BasicItemRec."Application Unit";
                        TempSearchResultRec."Product Group" := BasicItemRec."Product Group";
                        TempSearchResultRec."Product Class" := BasicItemRec."Product Class";
                        IF BasicItemRec.Expired = FALSE THEN BEGIN  //db, 29-05-08
                          //TempSearchResultRec."Item Exist" := TRUE;
                          IF RelationRec.GET(BasicItemRec.Manufacturer) THEN BEGIN
                            IF RelationRec."Display Basic Items" = TRUE THEN
                              TempSearchResultRec."Item Exist" := TRUE;
                          END;
                        END;
                      END;
                    END;
                  TempSearchResultRec."Source Type"::"Trade Item":
                    BEGIN
                      IF TradeItemRec.GET(TempSearchResultRec.Vendor, TempSearchResultRec."Vendor Item") THEN BEGIN
                        IF NOT BasicItemRec.GET(TempSearchResultRec.Manufacturer, TempSearchResultRec."Product Code") THEN
                          BasicItemRec.INIT;
                        ValidateCu.GetPriceTradeItem(TradeItemRec, TODAY, '', '', '');  //db, 03-08-08
                        TempSearchResultRec."Item Description" := TradeItemRec."Item Description";
                        TempSearchResultRec."Item Description 2" := TradeItemRec."Item Description 2";
                        TempSearchResultRec."GTIN Code" := TradeItemRec."GTIN Code (Item)";
                        TempSearchResultRec."Item Brand" := BasicItemRec."Item Brand";
                        TempSearchResultRec."Item Series" := BasicItemRec."Item Series";
                        TempSearchResultRec."Item Type" := BasicItemRec."Item Type";
                        TempSearchResultRec."Gross Price" := TradeItemRec."Gross Price";
                        TempSearchResultRec."Net Price" := TradeItemRec."Net Price";
                        TempSearchResultRec."Discount Percentage" := TradeItemRec."Discount Percentage";  //db, 22-07-08
                        TempSearchResultRec."Application Unit" := TradeItemRec."Application Unit";
                        IF TradeItemRec.Expired = FALSE THEN BEGIN  //db, 29-05-08
                          //TempSearchResultRec."Item Exist" := TRUE;
                          IF RelationRec.GET(TradeItemRec.Vendor) THEN BEGIN
                            IF RelationRec."Display Trade Items" = TRUE THEN
                              TempSearchResultRec."Item Exist" := TRUE;
                          END;
                        END;
                      END;
                    END;
                END;
                IF TempSearchResultRec."Item Exist" = TRUE THEN
                  TempSearchResultRec.INSERT;
              END;
            UNTIL ItemSearchWordDetail.NEXT =0;
          END;
          currec := currec + 1;
          Status.UPDATE(1,SearchWord."Search Argument");
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL SearchWord.NEXT = 0;
      END;

      Status.CLOSE;
    END;

    PROCEDURE AnyTableFieldValue@1100485001(TableNo@1100485000 : Integer;FieldNo@1100485001 : Integer) : Text[250];
    VAR
      lvText000@1100485002 : TextConst 'DEU=******************************;ENU=******************************;NLD=******************************;NOR=******************************;SVE=******************************';
      lvDec@1100485003 : Decimal;
    BEGIN
      FldRef := RecRef.FIELD(FieldNo);
      IF NOT FieldRec.GET(TableNo,FieldNo) THEN
        EXIT(lvText000);

      IF FieldRec.Class = FieldRec.Class::FlowField THEN
        FldRef.CALCFIELD;

      IF (FieldRec.Type = FieldRec.Type::Decimal) OR
         (FieldRec.Type = FieldRec.Type::Integer) THEN
      BEGIN
        lvDec := FldRef.VALUE;
        EXIT(FORMAT(lvDec,0,'<Precision,2:><Standard format,0>'))
      END;

      EXIT(FORMAT(FldRef));
    END;

    PROCEDURE GetCompany@1100525000() : Text[50];
    VAR
      InvtSetup@1100525000 : Record 313;
      LeadingCompany@1210190000 : Text[50];
      CompRelationRec@1210190001 : Record 11012059;
    BEGIN
      InvtSetup.GET;
      //X016.sn
      LeadingCompany := CompRelationRec.GetLeadingCompany(DATABASE::"Inventory Setup",InvtSetup."Central Management");
      IF (LeadingCompany <> '') AND (InvtSetup."Navision-Items" = TRUE) THEN
        EXIT(LeadingCompany)
      ELSE
        EXIT(COMPANYNAME);
      //X016.en
    END;

    BEGIN
    END.
  }
}

