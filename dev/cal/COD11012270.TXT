OBJECT Codeunit 11012270 Advice Order Line-Explode BOM
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    TableNo=11012055;
    OnRun=VAR
            AdviceOrderLine@1100525004 : Record 11012055;
            GenericItem@1100525003 : Record 11125615;
            ExplodeGenericItem@1100525001 : Report 11125617;
          BEGIN
            AdviceOrderLine := Rec;
            AdviceOrderLine.SETRECFILTER;
            AdviceOrderLine.SETRANGE("Line No.");

            IF "Item No." <> '' THEN BEGIN
              OrigLineNo := "Line No.";
              OrigQuantity := "Quantity (Advice)";
              ExplodeItem(AdviceOrderLine);
            END ELSE BEGIN
              GenericItem.SETRANGE(Status,GenericItem.Status::Certified);
              IF PAGE.RUNMODAL(0,GenericItem) = ACTION::LookupOK THEN BEGIN
                GenericItem.TESTFIELD(Status,GenericItem.Status::Certified);
                ExplodeGenericItem.RUNMODAL;
                ExplodeGenItem(AdviceOrderLine,GenericItem,ExplodeGenericItem.GetQuantity);
              END;
            END;
          END;

  }
  CODE
  {
    VAR
      Text001@1001 : TextConst 'DEU=Artikel %1 ist keine StÅckliste.;ENU=Item %1 is not a bill of materials.;NLD=Artikel %1 is geen stuklijst.;NOR=Artikkel %1 er ikke en stykkliste;SVE=Artikel %1 Ñr inte en struktur.';
      Text003@1002 : TextConst 'DEU=Es ist nicht genÅgend Platz, um die StÅckliste zu entfalten.;ENU=There is not enough space to explode the BOM.;NLD=Er is niet voldoende ruimte om de stuklijst weer te geven.;NOR=Det er ikke nok plass til Ü utfolde stykklisten.;SVE=Det finns inte tillrÑckligt med utrymme fîr att expandera strukturen.';
      OrigLineNo@1100525003 : Integer;
      OrigQuantity@1100525002 : Decimal;
      OrigItem@1100525001 : Code[20];

    PROCEDURE ExplodeGenItem@1100525004(VAR AdviceOrderLine@1100525000 : Record 11012055;GenericItem@1100525007 : Record 11125615;QuantityGenItem@1100525006 : Decimal);
    VAR
      ToAdviceOrderLine@1100525001 : Record 11012055;
      GenericBOMLine@1100525005 : Record 11125616;
      NoOfBOMComp@1100525003 : Integer;
      NextLineNo@1100525004 : Integer;
      LineSpacing@1100525002 : Integer;
    BEGIN
      //explode for generic item
      WITH AdviceOrderLine DO BEGIN
        GenericBOMLine.SETRANGE("Generic Item No.",GenericItem."No.");
        NoOfBOMComp := GenericBOMLine.COUNT;
        IF NoOfBOMComp = 0 THEN
          ERROR(Text001,GenericItem."No.");

        IF GenericBOMLine.FINDSET THEN BEGIN
          LineSpacing := GetLineSpacing(AdviceOrderLine, NoOfBOMComp);
          NextLineNo := "Line No.";
          REPEAT
            NextLineNo := NextLineNo + LineSpacing;
            ToAdviceOrderLine := AdviceOrderLine;
            ToAdviceOrderLine.INIT;
            ToAdviceOrderLine.VALIDATE(Element);
            ToAdviceOrderLine."Line No." := NextLineNo;
            ToAdviceOrderLine."Cost Type" := ToAdviceOrderLine."Cost Type"::Material;
            ToAdviceOrderLine.VALIDATE("Item No.",GenericBOMLine."Item No.");
            ToAdviceOrderLine.VALIDATE("Quantity (Advice)",ROUND(GenericBOMLine.Quantity * QuantityGenItem,0.00001));
            ToAdviceOrderLine.VALIDATE("Unit of Measure",GenericBOMLine."Unit of Measure Code");
            ToAdviceOrderLine.Description := GenericBOMLine.Description;
            ToAdviceOrderLine.INSERT;
          UNTIL GenericBOMLine.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE ExplodeItem@1100525001(VAR AdviceOrderLine@1100525000 : Record 11012055);
    VAR
      ToAdviceOrderLine@1100525005 : Record 11012055;
      NoOfBOMComp@1100525003 : Integer;
      LineSpacing@1100525002 : Integer;
      NextLineNo@1100525009 : Integer;
      FromBOMComp@1100525001 : Record 90;
      BomComp@1100525010 : Record 90;
      TempAdviceOrderLine@1100525011 : TEMPORARY Record 11012055;
    BEGIN
      //explode for item
      WITH AdviceOrderLine DO BEGIN
        OrigLineNo := "Line No.";
        OrigQuantity := "Quantity (Advice)";
        IF OrigItem = '' THEN
          OrigItem := "Item No.";

        ToAdviceOrderLine := AdviceOrderLine;
        ToAdviceOrderLine.INIT;
        ToAdviceOrderLine.VALIDATE(Element, Element);
        ToAdviceOrderLine."Cost Type" := "Cost Type"::Material;
        ToAdviceOrderLine.Description := Description;
        ToAdviceOrderLine."Description 2" := "Description 2";
        ToAdviceOrderLine."Source Type" := ToAdviceOrderLine."Source Type"::"BOM Header";
         //DP02339.sn
        ToAdviceOrderLine."Original Quantity" := OrigQuantity;
        ToAdviceOrderLine."Part of Line" := "Part of Line";
        ToAdviceOrderLine."Level BOM" := "Level BOM";
        ToAdviceOrderLine."BOM Item No." := OrigItem;
        //DP02339.en
        ToAdviceOrderLine.MODIFY;

        FromBOMComp.SETRANGE("Parent Item No.","Item No.");
        FromBOMComp.SETFILTER(Type, '<>%1', FromBOMComp.Type::Resource);
        NoOfBOMComp := FromBOMComp.COUNT;
        IF NoOfBOMComp = 0 THEN BEGIN
          ExplodeItemProdBOM(AdviceOrderLine);
        END;

        IF FromBOMComp.FINDSET THEN BEGIN
          LineSpacing := GetLineSpacing(AdviceOrderLine, NoOfBOMComp);
          NextLineNo := "Line No.";
          REPEAT
            NextLineNo := NextLineNo + LineSpacing;
            ToAdviceOrderLine := AdviceOrderLine;
            ToAdviceOrderLine.INIT;
            ToAdviceOrderLine.VALIDATE(Element, Element);
            ToAdviceOrderLine."Line No." := NextLineNo;
            ToAdviceOrderLine."Cost Type" := "Cost Type"::Material;
            IF FromBOMComp.Type = FromBOMComp.Type::Item THEN BEGIN
              FromBOMComp.TESTFIELD("No.");
              ToAdviceOrderLine.VALIDATE("Item No.",FromBOMComp."No.");
              //DP02339.sn
              ToAdviceOrderLine."Original Quantity" := FromBOMComp."Quantity per";
              ToAdviceOrderLine.VALIDATE("Quantity (Advice)","Quantity (Advice)" * ToAdviceOrderLine."Original Quantity");
              //DP02339.en
            END;
            ToAdviceOrderLine."Unit of Measure" := FromBOMComp."Unit of Measure Code";
            ToAdviceOrderLine.Description := FromBOMComp.Description;
            ToAdviceOrderLine."Source Type" := ToAdviceOrderLine."Source Type"::"BOM Line";
            ToAdviceOrderLine."Attached to Line No." := AdviceOrderLine."Line No.";
            //assign fields from header
            ToAdviceOrderLine."Main Project No." := AdviceOrderLine."Main Project No.";
            ToAdviceOrderLine.Element := AdviceOrderLine.Element;
            ToAdviceOrderLine."Extension Contract" := AdviceOrderLine."Extension Contract";
            ToAdviceOrderLine."Base Service Order No." := AdviceOrderLine."Base Service Order No.";
            ToAdviceOrderLine."Service Contract No." := AdviceOrderLine."Service Contract No.";
            ToAdviceOrderLine."Additional Cost (Service)" := AdviceOrderLine."Additional Cost (Service)";
            ToAdviceOrderLine."Work Order No." := AdviceOrderLine."Work Order No.";
            ToAdviceOrderLine."Global Dimension 1 Code" := AdviceOrderLine."Global Dimension 1 Code";
            ToAdviceOrderLine.INSERT;

            IF FromBOMComp.Type = FromBOMComp.Type::Item THEN BEGIN
              BomComp.SETRANGE("Parent Item No.", ToAdviceOrderLine."Item No.");
              IF NOT BomComp.ISEMPTY THEN BEGIN
                TempAdviceOrderLine := ToAdviceOrderLine;
                TempAdviceOrderLine.INSERT;
              END;
            END;
          UNTIL FromBOMComp.NEXT = 0;
        END;
      END;

      IF TempAdviceOrderLine.FINDSET THEN BEGIN
        //Explode BOMS
        COMMIT;
        REPEAT
          ExplodeItem(TempAdviceOrderLine);
        UNTIL TempAdviceOrderLine.NEXT = 0;
      END;
    END;

    PROCEDURE ExplodeItemProdBOM@1100525002(VAR AdviceOrderLine@1100525000 : Record 11012055);
    VAR
      Item@1100525006 : Record 27;
      ToAdviceOrderLine@1100525005 : Record 11012055;
      ProductionBOMLine@1100525004 : Record 99000772;
      NoOfBOMComp@1100525003 : Integer;
      LineSpacing@1100525002 : Integer;
      NextLineNo@1100525001 : Integer;
    BEGIN
      //explode for item with prod bom
      WITH AdviceOrderLine DO BEGIN
        Item.GET("Item No.");
        ProductionBOMLine.SETRANGE("Production BOM No.",Item."Production BOM No.");
        ProductionBOMLine.SETRANGE(Type,ProductionBOMLine.Type::Item);
        NoOfBOMComp := ProductionBOMLine.COUNT;
        IF NoOfBOMComp = 0 THEN
          ERROR(Text001,"Item No.");

        IF ProductionBOMLine.FINDSET THEN BEGIN
          LineSpacing := GetLineSpacing(AdviceOrderLine, NoOfBOMComp);
          NextLineNo := "Line No.";
          REPEAT
            NextLineNo := NextLineNo + LineSpacing;
            ToAdviceOrderLine := AdviceOrderLine;
            ToAdviceOrderLine.INIT;
            ToAdviceOrderLine.VALIDATE(Element);
            ToAdviceOrderLine."Line No." := NextLineNo;
            ToAdviceOrderLine."Cost Type" := ToAdviceOrderLine."Cost Type"::Material;
            IF ProductionBOMLine.Type = ProductionBOMLine.Type::Item THEN BEGIN
              ProductionBOMLine.TESTFIELD("No.");
              ToAdviceOrderLine.VALIDATE("Item No.", ProductionBOMLine."No.");
              //DP02339.sn
              ToAdviceOrderLine."Original Quantity" := ProductionBOMLine."Quantity per";
              ToAdviceOrderLine.VALIDATE("Quantity (Advice)","Quantity (Advice)" * ToAdviceOrderLine."Original Quantity");
              //DP02339.en
            END;
            ToAdviceOrderLine."Unit of Measure" := ProductionBOMLine."Unit of Measure Code";
            ToAdviceOrderLine.Description := ProductionBOMLine.Description;
            ToAdviceOrderLine."Source Type" := ToAdviceOrderLine."Source Type"::"BOM Line";
            ToAdviceOrderLine."Attached to Line No." := AdviceOrderLine."Line No.";
            //assign fields from header
            ToAdviceOrderLine."Main Project No." := AdviceOrderLine."Main Project No.";
            ToAdviceOrderLine.Element := AdviceOrderLine.Element;
            ToAdviceOrderLine."Extension Contract" := AdviceOrderLine."Extension Contract";
            ToAdviceOrderLine."Base Service Order No." := AdviceOrderLine."Base Service Order No.";
            ToAdviceOrderLine."Service Contract No." := AdviceOrderLine."Service Contract No.";
            ToAdviceOrderLine."Additional Cost (Service)" := AdviceOrderLine."Additional Cost (Service)";
            ToAdviceOrderLine."Work Order No." := AdviceOrderLine."Work Order No.";
            ToAdviceOrderLine."Global Dimension 1 Code" := AdviceOrderLine."Global Dimension 1 Code";
            ToAdviceOrderLine.INSERT;
          UNTIL ProductionBOMLine.NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE GetLineSpacing@1100525003(VAR AdviceOrderLine@1100525000 : Record 11012055;NoOfBOMComp@1100525002 : Integer) LineSpacing : Decimal;
    VAR
      ToAdviceOrderLine@1100525001 : Record 11012055;
    BEGIN
      LineSpacing := 10000;

      ToAdviceOrderLine := AdviceOrderLine;
      ToAdviceOrderLine.SETRECFILTER;
      ToAdviceOrderLine.SETRANGE("Line No.");
      IF ToAdviceOrderLine.FIND('>') THEN BEGIN
        LineSpacing := (ToAdviceOrderLine."Line No." - AdviceOrderLine."Line No.") DIV (1 + NoOfBOMComp);
        IF LineSpacing = 0 THEN
          ERROR(Text003);
      END;

      EXIT(LineSpacing);
    END;

    BEGIN
    {
      db, 04-02-16: C028603 (use same procedure for exploding different type of items)
      - calculate line spacing and determine next linenumber
      - use init instead of copy
      - validate item and quantity
    }
    END.
  }
}

