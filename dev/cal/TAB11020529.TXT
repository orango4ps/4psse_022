OBJECT Table 11020529 Plant Scanned Hours
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Plant Scanned Hours;
               NOR=Skannede timer i maskin;
               SVE=Skannade timmar i Maskin];
  }
  FIELDS
  {
    { 1   ;   ;Employee            ;Code20        ;TableRelation=Employee;
                                                   CaptionML=[ENU=Employee;
                                                              NOR=Ansatt;
                                                              SVE=Personal];
                                                   NotBlank=Yes }
    { 2   ;   ;Entry No.           ;Integer       ;CaptionML=[ENU=Entry No.;
                                                              NOR=L›penr.;
                                                              SVE=L”pnr] }
    { 3   ;   ;DT_start            ;DateTime      ;OnValidate=BEGIN
                                                                CalculateDuration;
                                                              END;

                                                   CaptionML=[ENU=DT_start;
                                                              NOR=DT_start;
                                                              SVE=DT_start] }
    { 4   ;   ;DT_end              ;DateTime      ;OnValidate=BEGIN
                                                                CalculateDuration;
                                                              END;

                                                   CaptionML=[ENU=DT_End;
                                                              NOR=DT_End;
                                                              SVE=DT_End] }
    { 5   ;   ;Duration            ;Decimal       ;CaptionML=[ENU=Duration;
                                                              NOR=Varighet;
                                                              SVE=Duration] }
    { 6   ;   ;Job No.             ;Code20        ;TableRelation=Job;
                                                   CaptionML=[ENU=Job Notice;
                                                              NOR=Jobbmelding;
                                                              SVE=Jobbmeddelande] }
    { 7   ;   ;Cost Code           ;Code20        ;TableRelation="Cost Code";
                                                   CaptionML=[ENU=Cost Code;
                                                              NOR=Kostkode;
                                                              SVE=Kostnadskod] }
    { 8   ;   ;Plant Type          ;Code20        ;TableRelation="Plant Type";
                                                   CaptionML=[ENU=Plant Type;
                                                              NOR=Maskintype;
                                                              SVE=Maskintyp] }
    { 9   ;   ;Plant No.           ;Code10        ;TableRelation="Plant Number".No. WHERE (Plant Type=FIELD(Plant Type));
                                                   CaptionML=[ENU=Plant No.;
                                                              NOR=Maskinnr.;
                                                              SVE=Maskinnr] }
    { 11  ;   ;Approved            ;Boolean       ;CaptionML=[ENU=Approved;
                                                              NOR=Godkjent;
                                                              SVE=Godk„nd] }
    { 12  ;   ;Posted              ;Boolean       ;CaptionML=[ENU=Time Sheet;
                                                              NOR=Tidsforslag;
                                                              SVE=Tidrapport];
                                                   Editable=No }
    { 13  ;   ;Cost Component Wages;Code20        ;TableRelation="Cost Component Plant";
                                                   CaptionML=[ENU=Cost Component;
                                                              NOR=Kostnadskomponent;
                                                              SVE=Kostnadsdel] }
    { 14  ;   ;Employee Name       ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Full Name" WHERE (No.=FIELD(Employee)));
                                                   CaptionML=[ENU=Employee Name;
                                                              NOR=Navn p† ansatt;
                                                              SVE=Namn p† anst„lld];
                                                   Editable=No }
    { 15  ;   ;Global Dimension 1 Code;Code20     ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Global Dimension 1 Code" WHERE (No.=FIELD(Employee)));
                                                   TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=[ENU=Global Dimension 1 Code;
                                                              NOR=Global dimensjon 1 kode;
                                                              SVE=Global dimension 1 kod];
                                                   CaptionClass='1,1,1' }
    { 16  ;   ;StartDate           ;Date          ;CaptionML=[ENU=Start Date;
                                                              NOR=Startdato;
                                                              SVE=Startdatum] }
    { 17  ;   ;Hours Per Day       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Plant Scanned Hours".Duration WHERE (Employee=FIELD(Employee),
                                                                                                         StartDate=FIELD(StartDate)));
                                                   CaptionML=[ENU=Hours Per Day;
                                                              NOR=Timer per dag;
                                                              SVE=Timmar per dag] }
    { 100 ;   ;Comment             ;Text80        ;CaptionML=[ENU=Comment;
                                                              NOR=Merknad;
                                                              SVE=Kommentar] }
  }
  KEYS
  {
    {    ;Employee,Entry No.                      ;Clustered=Yes }
    {    ;Employee,StartDate                      ;SumIndexFields=Duration }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      DPA_Management@1100000999 : Codeunit 11012783;

    PROCEDURE CalculateDuration@1100485000();
    VAR
      EmployeeRec@1100485000 : Record 5200;
      HourModelRec@1100485001 : Record 11020530;
      DurationDec@1100485002 : Decimal;
      StartDT@1100485003 : DateTime;
      EndDT@1100485004 : DateTime;
      CurrentDate@1100485005 : Date;
      StartBreakDT@1100485006 : DateTime;
      EndBreakDT@1100485007 : DateTime;
      BreakTime@1100485008 : Integer;
    BEGIN
      IF (DT_start <> 0DT) THEN
        StartDate := DT2DATE(StartDT);

      IF (DT_start <> 0DT) AND
         (DT_start < DT_end) THEN BEGIN

        StartDT := DT_start;
        EndDT := DT_end;
        BreakTime := 0 ;

        DurationDec := DT_end - DT_start;
        Duration := ROUND((DurationDec/1000)/3600, 0.01);
        StartDate := DT2DATE(StartDT);
        IF DT2DATE(StartDT) = DT2DATE(EndDT) THEN BEGIN
          CurrentDate := DT2DATE(StartDT);
          IF EmployeeRec.GET(Employee) THEN BEGIN
            IF HourModelRec.GET(EmployeeRec."Imos Hour Model") THEN BEGIN

              IF (HourModelRec."Break 1 Start" <> 0T) AND
                 (HourModelRec."Break 1 End" <> 0T) THEN BEGIN
                StartBreakDT := CREATEDATETIME(CurrentDate, HourModelRec."Break 1 Start");
                EndBreakDT := CREATEDATETIME(CurrentDate, HourModelRec."Break 1 End");
                IF (EndBreakDT > StartDT) AND (StartBreakDT < EndDT) THEN BEGIN
                  IF (StartBreakDT < StartDT) THEN BEGIN
                    StartDT := EndBreakDT;
                    EndBreakDT := 0DT;
                    StartBreakDT := 0DT;
                  END ELSE BEGIN
                    IF (EndBreakDT > EndDT) THEN BEGIN
                      EndDT := StartBreakDT;
                      EndBreakDT := 0DT;
                      StartBreakDT := 0DT;
                    END;
                  END;
                  BreakTime := EndBreakDT - StartBreakDT;
                END;
              END;

              IF (HourModelRec."Break 2 Start" <> 0T) AND
                 (HourModelRec."Break 2 End" <> 0T) THEN BEGIN
                StartBreakDT := CREATEDATETIME(CurrentDate, HourModelRec."Break 2 Start");
                EndBreakDT := CREATEDATETIME(CurrentDate, HourModelRec."Break 2 End");
                IF (EndBreakDT > StartDT) AND (StartBreakDT < EndDT) THEN BEGIN
                  IF (StartBreakDT < StartDT) THEN BEGIN
                    StartDT := EndBreakDT;
                    EndBreakDT := 0DT;
                    StartBreakDT := 0DT;
                  END ELSE BEGIN
                    IF (EndBreakDT > EndDT) THEN BEGIN
                      EndDT := StartBreakDT;
                      EndBreakDT := 0DT;
                      StartBreakDT := 0DT;
                    END;
                  END;
                  BreakTime := BreakTime + (EndBreakDT - StartBreakDT);
                END;
              END;
              DurationDec := (EndDT - StartDT) - BreakTime;
              Duration := ROUND((DurationDec/1000)/3600, 0.01);
            END;
          END;
        END;
      END ELSE BEGIN
        Duration := 0;
      END;
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(0);
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      //**4PS Generated Code - Do Not Change
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
      i@1100525004 : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      FOR i := 10 DOWNTO 0 DO BEGIN
        RecRef.FILTERGROUP(i);
        FILTERGROUP(i);
        SETVIEW(RecRef.GETVIEW(FALSE));
      END;

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
      FPSLicenseManagement@1100527400 : Codeunit 11229289;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT FPSLicenseManagement.LicenseAndReadPermissionForTable(DepartmentAuthorizObject) THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_FindRecWithDPAFilterAppld@1100000989();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN BEGIN
        FIND;
        EXIT;
      END;

      IF NOT DPA_Management.HasTableHardFilter(11020529) THEN BEGIN
        FIND;
        EXIT;
      END;

      DPA_SetFilters('Table 11020529');
      IF NOT FIND THEN
        DPA_Management.RaiseDPAErrorForTable(TABLECAPTION);
    END;

    PROCEDURE DPA_ChkDepartmentCodeAllowed@1100000990(IsHardFilter@1100526000 : Boolean);
    VAR
      DimensionManagement@1100526001 : Codeunit 408;
    BEGIN
      //**4PS Generated Code - Do Not Change
      DimensionManagement.CheckDepartmAuthWithFilterType(
        DATABASE::"Plant Scanned Hours", "Global Dimension 1 Code", IsHardFilter);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Global Dimension 1 Code"));
    END;

    PROCEDURE DPA_SetDefaultDepartment@1100000996();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      DPA_Management.SetDepartmentCodeUser(TABLENAME, "Global Dimension 1 Code");
    END;

    BEGIN
    END.
  }
}

