OBJECT XMLport 11012062 Import Act. Wage Cost Paym. 6
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Import Actual Wage List Paymaster 6;
               SVE=Importera verklig l”nelista, Paymaster 6];
    Direction=Import;
    DefaultFieldsValidation=No;
    TextEncoding=WINDOWS;
    OnInitXMLport=BEGIN
                    GLSetup.GET;
                    HumanResourcesSetup.GET;
                    HumanResourcesSetup.TESTFIELD("Salary Application",HumanResourcesSetup."Salary Application"::Paymaster);
                    IF HumanResourcesSetup."Calculate Wage Costs" <> HumanResourcesSetup."Calculate Wage Costs"::"Actual Rate" THEN
                      IF NOT CONFIRM(Text001, TRUE) THEN
                        ERROR(Text002)
                      ELSE
                        AskCalcMethod := TRUE;

                    HumanResourcesSetup.TESTFIELD("Actual Wage Journal Template");
                    HumanResourcesSetup.TESTFIELD("Actual Wage Journal Batch");
                    IF HumanResourcesSetup."Length Company Paymaster" = 0 THEN
                      HumanResourcesSetup."Length Company Paymaster" := 4;

                    UsePaymExtension := PaymasterRecordExtensionRec.UseExtension;

                    currXMLport.FILENAME := HumanResourcesSetup."Pathname Files from Salary";
                  END;

    OnPostXMLport=BEGIN
                    NewFile := HumanResourcesSetup.DetermineBackupFile(currXMLport.FILENAME);
                    IF NewFile <> currXMLport.FILENAME THEN
                      FileMgt.RenameClientFile(currXMLport.FILENAME, NewFile, TRUE);
                  END;

    Format=Fixed Text;
  }
  ELEMENTS
  {
    { [{A681B4D3-F097-451F-9E00-A952188583BB}];  ;Root                ;Element ;Text     }

    { [{5EF85690-F826-4244-ABFF-95EC489330D9}];1 ;GenJournalLine      ;Element ;Table   ;
                                                  SourceTable=Table81;
                                                  SourceTableView=SORTING(Field1,Field51,Field2);
                                                  Import::OnAfterInitRecord=BEGIN
                                                                              "Gen. Journal Line".INIT;
                                                                              CLEAR(CompanyAndAdministration);
                                                                              CLEAR(EmployeeTxt);
                                                                              CLEAR(RecType);
                                                                              CLEAR(ProjElem);
                                                                              CLEAR(CostObjectDepartmentTxt);
                                                                              CLEAR(AdditionalCost);
                                                                              CLEAR(WageCode);
                                                                              CLEAR(HoursQuanTxt);
                                                                              CLEAR(HoursSign);
                                                                              CLEAR(AmountDecTxt);
                                                                              CLEAR(AmountSign);
                                                                              CLEAR(Name);
                                                                              CLEAR(EndingDate);
                                                                              CLEAR(BalanceAccount);
                                                                              CLEAR(DiffCompanyAndAdministration);
                                                                            END;

                                                  Import::OnBeforeInsertRecord=BEGIN
                                                                                 WITH "Gen. Journal Line" DO BEGIN //With statement added because this code has been copied from dataport.

                                                                                 Company := COPYSTR(CompanyAndAdministration, 1, HumanResourcesSetup."Length Company Paymaster");
                                                                                 Administration := COPYSTR(CompanyAndAdministration, HumanResourcesSetup."Length Company Paymaster" + 1);
                                                                                 DetermineCompany;

                                                                                 //switch per table to company depending on data from dataportrecord;
                                                                                 //be aware: validate only works on table of own company !
                                                                                 PostRec.CHANGECOMPANY(CompanyOrg);
                                                                                 HumanResourcesSetupRec.CHANGECOMPANY(CompanyOrg);
                                                                                 JobsSetup.CHANGECOMPANY(CompanyOrg);
                                                                                 ProjRec.CHANGECOMPANY(CompanyOrg);
                                                                                 PtypRec.CHANGECOMPANY(CompanyOrg);
                                                                                 ElemRec.CHANGECOMPANY(CompanyOrg);
                                                                                 EmplRec.CHANGECOMPANY(CompanyOrg);
                                                                                 TradeRec.CHANGECOMPANY(CompanyOrg);
                                                                                 JnlTemplRec.CHANGECOMPANY(CompanyOrg);
                                                                                 DimValRec.CHANGECOMPANY(CompanyOrg);
                                                                                 GlAccRec.CHANGECOMPANY(CompanyOrg);
                                                                                 VATPostSetup.CHANGECOMPANY(CompanyOrg);
                                                                                 "Gen. Journal Line".CHANGECOMPANY(CompanyOrg);
                                                                                 //db.sn, 23-10-12: T000809
                                                                                 ServiceOrderRec.CHANGECOMPANY(CompanyOrg);
                                                                                 ServTypeRec.CHANGECOMPANY(CompanyOrg);
                                                                                 //db.sn, 23-10-12: T000809

                                                                                 HumanResourcesSetupRec.GET;
                                                                                 JobsSetup.GET;

                                                                                 HumanResourcesSetupRec.TESTFIELD("Salary Application",HumanResourcesSetupRec."Salary Application"::Paymaster);
                                                                                 IF HumanResourcesSetupRec."Calculate Wage Costs" <> HumanResourcesSetupRec."Calculate Wage Costs"::"Actual Rate" THEN
                                                                                   IF AskCalcMethod = FALSE THEN
                                                                                     IF NOT CONFIRM(Text001, TRUE) THEN
                                                                                       ERROR(Text002)
                                                                                     ELSE
                                                                                       AskCalcMethod := TRUE;

                                                                                 //date supplied in format ddmmyy
                                                                                 filler := EndingDate;
                                                                                 StripZero(filler, 0);
                                                                                 IF filler <> '' THEN BEGIN
                                                                                   EVALUATE(BookYear,COPYSTR(EndingDate,1,4));
                                                                                   EVALUATE(BookMonth,COPYSTR(EndingDate,5,2));
                                                                                   EVALUATE(BookDay,COPYSTR(EndingDate,7,2));
                                                                                   PostingDate := DMY2DATE(BookDay,BookMonth,BookYear);
                                                                                   BookWeek  := DATE2DWY(PostingDate, 2);
                                                                                   BookYear  := DATE2DWY(PostingDate, 3);
                                                                                   Period := STRSUBSTNO('%1-%2', BookYear, BookWeek);
                                                                                 END ELSE BEGIN
                                                                                   PostingDate := 0D;
                                                                                   Period := '****-**';
                                                                                 END;

                                                                                 IF NOT JnlTemplRec.GET(HumanResourcesSetupRec."Actual Wage Journal Template") THEN
                                                                                   JnlTemplRec.INIT;
                                                                                 IF NOT JnlBatchRec.GET(HumanResourcesSetupRec."Actual Wage Journal Template", HumanResourcesSetupRec."Actual Wage Journal Batch") THEN
                                                                                   JnlBatchRec.INIT;

                                                                                 IF DocNo = '' THEN BEGIN
                                                                                   IF JnlBatchRec."No. Series" <> '' THEN
                                                                                     DocNo := NoSeriesMgt.GetNextNo(JnlBatchRec."No. Series",0D,FALSE)
                                                                                   ELSE
                                                                                     IF JnlTemplRec."No. Series" <> '' THEN
                                                                                       DocNo := NoSeriesMgt.GetNextNo(JnlTemplRec."No. Series",0D,FALSE);
                                                                                 END;

                                                                                 FinishedProject := '';
                                                                                 ProjectCode := '';
                                                                                 ElementCode := '';
                                                                                 ServiceOrderCode := '';

                                                                                 CASE RecType OF
                                                                                   'G': BEGIN
                                                                                     EVALUATE(ProjectCode, COPYSTR(ProjElem, 1, HumanResourcesSetupRec."Length Project (Extern)"));
                                                                                     EVALUATE(ElementCode,
                                                                                       COPYSTR(ProjElem,1 + HumanResourcesSetupRec."Length Project (Extern)",
                                                                                       HumanResourcesSetupRec."Length Element (Extern)"));
                                                                                     StripZero(ProjectCode, MaxLenAcc);
                                                                                   END;
                                                                                   'S': BEGIN
                                                                                     EVALUATE(ServiceOrderCode, COPYSTR(ProjElem, 1, HumanResourcesSetupRec."Length Project (Extern)"));
                                                                                     StripZero(ServiceOrderCode, MaxLenSO);
                                                                                   END;
                                                                                   ELSE BEGIN  //db, 28-01-13: C004962
                                                                                     EVALUATE(ProjectCode, COPYSTR(ProjElem, 1, HumanResourcesSetupRec."Length Project (Extern)"));
                                                                                     EVALUATE(ElementCode,
                                                                                       COPYSTR(ProjElem,1 + HumanResourcesSetupRec."Length Project (Extern)",
                                                                                       HumanResourcesSetupRec."Length Element (Extern)"));
                                                                                     StripZero(ProjectCode, MaxLenProj);
                                                                                   END;
                                                                                 END;

                                                                                 StripZero(ElementCode, MaxLenElem);
                                                                                 StripZero(CostObjectDepartment, MaxLenCostObject);
                                                                                 StripZero(Employee, MaxLenEmpl);

                                                                                 IF STRLEN(ProjectCode) > MAXSTRLEN(ProjRec."No.") THEN
                                                                                   EVALUATE(ProjectCode, COPYSTR(ProjectCode, 1, MAXSTRLEN(ProjRec."No.")));
                                                                                 IF STRLEN(ServiceOrderCode) > MAXSTRLEN(ServiceOrderRec."No.") THEN
                                                                                   EVALUATE(ServiceOrderCode, COPYSTR(ServiceOrderCode, 1, MAXSTRLEN(ServiceOrderRec."No.")));
                                                                                 IF STRLEN(ElementCode) > MAXSTRLEN(ElemRec.Element) THEN
                                                                                   EVALUATE(ElementCode, COPYSTR(ElementCode, 1, MAXSTRLEN(ElemRec.Element)));

                                                                                 CASE RecType OF
                                                                                   'G': BEGIN
                                                                                     IF CostObjectDepartment <> '' THEN BEGIN
                                                                                       IF NOT DimValRec.GET(GLSetup."Shortcut Dimension 1 Code", CostObjectDepartment) THEN BEGIN
                                                                                         DimValRec.INIT;
                                                                                         HandleUnknownData(CostObjectDepartment, 5);
                                                                                       END;
                                                                                     END;
                                                                                   END;
                                                                                   ELSE BEGIN
                                                                                     IF NOT DimValRec.GET(GLSetup."Shortcut Dimension 2 Code", CostObjectDepartment) THEN BEGIN
                                                                                       DimValRec.INIT;
                                                                                       HandleUnknownData(CostObjectDepartment, 1);
                                                                                     END;
                                                                                   END;
                                                                                 END;

                                                                                 IF NOT UsePaymExtension THEN BEGIN
                                                                                   //ps/db, 31-01-06:
                                                                                   //This try to check in current company if the imported mutation
                                                                                   //belongs to a RC-posting of hours for the purpose of another company.
                                                                                   ReceivingCompany := '';
                                                                                   PostedHourLine.RESET;
                                                                                   PostedHourLine.SETRANGE(Year, BookYear);
                                                                                   PostedHourLine.SETRANGE(Week, BookWeek);
                                                                                   PostedHourLine.SETRANGE("Employee No.", Employee);
                                                                                   PostedHourLine.SETRANGE("Wage Component", WageCode);
                                                                                   CASE RecType OF
                                                                                     'S': BEGIN
                                                                                       PostedHourLine.SETRANGE("Service Order No.", ServiceOrderCode);
                                                                                       PostedHourLine.SETRANGE("Cost Object", CostObjectDepartment);
                                                                                     END;
                                                                                     ELSE BEGIN  //db, 28-01-13: C004962
                                                                                       PostedHourLine.SETRANGE("Project No.", ProjectCode);
                                                                                       PostedHourLine.SETRANGE("Cost Object", CostObjectDepartment);
                                                                                     END;
                                                                                   END;
                                                                                   IF PostedHourLine.FINDFIRST THEN BEGIN
                                                                                     ReceivingCompany := PostedHourLine."Receiving Company";
                                                                                   END;
                                                                                 END ELSE
                                                                                   ReceivingCompany := CompanyRec;

                                                                                 // kkleermaker.sn, 110707, M28306
                                                                                 ReceivingCompany :=
                                                                                   DetermineReceivingCompany(
                                                                                     DiffCompanyAndAdministration,
                                                                                     ReceivingCompany);
                                                                                 // kkleermaker.en, 110707, M28306

                                                                                 IF ReceivingCompany <> '' THEN BEGIN
                                                                                   ProjRec.CHANGECOMPANY(ReceivingCompany);
                                                                                   PtypRec.CHANGECOMPANY(ReceivingCompany);
                                                                                   ElemRec.CHANGECOMPANY(ReceivingCompany);
                                                                                   ServiceOrderRec.CHANGECOMPANY(ReceivingCompany);
                                                                                   ServTypeRec.CHANGECOMPANY(ReceivingCompany);  //db, 23-10-12: T000809
                                                                                 END;

                                                                                 CASE RecType OF
                                                                                   'S': BEGIN
                                                                                     IF NOT ServiceOrderRec.GET(ServiceOrderCode) THEN BEGIN
                                                                                       ServiceOrderRec.INIT;
                                                                                       HandleUnknownData(ServiceOrderCode, 6);
                                                                                     END;
                                                                                   END;
                                                                                   ELSE BEGIN  //db, 28-01-13: C004962
                                                                                     IF NOT ProjRec.GET(ProjectCode) THEN BEGIN
                                                                                       ProjRec.INIT;
                                                                                       HandleUnknownData(ProjectCode, 2);
                                                                                     END ELSE BEGIN
                                                                                       CheckProjectFinished;
                                                                                     END;
                                                                                     IF ElementCode <> '' THEN BEGIN
                                                                                       ElementFormat.FormatElem(ElementCode,2,'');
                                                                                       IF NOT ElemRec.GET(ProjectCode, ElementCode) THEN BEGIN
                                                                                         ElemRec.INIT;
                                                                                         HandleUnknownData(ElementCode, 4);
                                                                                       END;
                                                                                     END;
                                                                                     IF NOT PtypRec.GET(ProjRec."Project Type") THEN
                                                                                       PtypRec.INIT;
                                                                                   END;
                                                                                 END;
                                                                                 IF NOT EmplRec.GET(Employee) THEN BEGIN
                                                                                   EmplRec.INIT;
                                                                                   HandleUnknownData(Employee, 3);
                                                                                 END;
                                                                                 IF NOT TradeRec.GET(EmplRec."Trade Association") THEN
                                                                                   TradeRec.INIT;

                                                                                 LineCounter := 10000;
                                                                                 PostRec.LOCKTABLE;
                                                                                 PostRec.SETRANGE("Journal Template Name", HumanResourcesSetupRec."Actual Wage Journal Template");
                                                                                 PostRec.SETRANGE("Journal Batch Name", HumanResourcesSetupRec."Actual Wage Journal Batch");
                                                                                 IF PostRec.FIND('+') THEN
                                                                                   LineCounter := PostRec."Line No." + 10000;

                                                                                 //amount in format 9V2 (without delimiter); seperate +/- sign in file
                                                                                 AmountDec := AmountDec / 100.0;
                                                                                 IF AmountSign = '-' THEN AmountDec := (AmountDec * -1.0);

                                                                                 HoursQuan := HoursQuan / 100.0;
                                                                                 IF HoursSign = '-' THEN HoursQuan  := (HoursQuan  * -1.0);

                                                                                 INIT;
                                                                                 "Journal Template Name" := HumanResourcesSetupRec."Actual Wage Journal Template";
                                                                                 "Journal Batch Name" := HumanResourcesSetupRec."Actual Wage Journal Batch";
                                                                                 "Line No." := LineCounter;
                                                                                 "Posting Date" := PostingDate;
                                                                                 "Document Date" := PostingDate;
                                                                                 "Document No." := DocNo;
                                                                                 "Source Code" := JnlTemplRec."Source Code";
                                                                                 IF JnlBatchRec."Reason Code" <> '' THEN
                                                                                   "Reason Code" := JnlBatchRec."Reason Code"
                                                                                 ELSE
                                                                                   "Reason Code" := JnlTemplRec."Reason Code";
                                                                                 "Employee No." := Employee;
                                                                                 "Wage Component" := WageCode;
                                                                                 Quantity := HoursQuan;
                                                                                 "Unit of Measure Code" := Text008;
                                                                                 Amount := AmountDec;
                                                                                 "Receiving Company" := ReceivingCompany;

                                                                                 CASE RecType OF
                                                                                   'G': BEGIN
                                                                                     "Shortcut Dimension 1 Code" := CostObjectDepartment;
                                                                                     "Account No." := ProjectCode
                                                                                   END;
                                                                                   'S': BEGIN
                                                                                     //db.sn, 23-10-12: T000809
                                                                                     "Service Order No." := ServiceOrderCode;
                                                                                     "Service Location No." := ServiceOrderRec."Service Location No.";
                                                                                     "Service Contract No." := ServiceOrderRec."Service Contract No.";
                                                                                     "Service Category" := ServiceOrderRec.GetServiceCategory;
                                                                                     "Additional Cost (Service)" := (AdditionalCost = '1');
                                                                                     IF "Additional Cost (Service)" = TRUE THEN BEGIN
                                                                                       ServType := ServiceOrderRec."Service Type (Other)";
                                                                                       "Shortcut Dimension 1 Code" := ServiceOrderRec."Department Code (Other)"
                                                                                     END ELSE BEGIN
                                                                                       ServType := ServiceOrderRec."Service Type";
                                                                                       "Shortcut Dimension 1 Code" := ServiceOrderRec."Global Dimension 1 Code";
                                                                                     END;
                                                                                     "Shortcut Dimension 2 Code" := CostObjectDepartment;
                                                                                     CheckCostCompServOrderType;  //does not work in receiving company
                                                                                     IF NOT ServTypeRec.GET(ServType) THEN
                                                                                       ServTypeRec.INIT;
                                                                                     "Account No." := WIPAccService;
                                                                                     //db.en, 23-10-12: T000809
                                                                                   END;
                                                                                   ELSE BEGIN  //db, 28-01-13: C004962
                                                                                     "Job No." := ProjectCode;
                                                                                     Element := ElementCode;
                                                                                     "Shortcut Dimension 1 Code" := ProjRec."Global Dimension 1 Code";
                                                                                     "Shortcut Dimension 2 Code" := CostObjectDepartment;
                                                                                     "Account No." := WIPAccProject;  //db, 23-10-12: T000809
                                                                                   END;
                                                                                 END;

                                                                                 //db.sn, 23-10-12: T000809
                                                                                 IF "Cost Component" = '' THEN  //get default if not found by ServOrderType
                                                                                   IF DimValRec.GET(GLSetup."Shortcut Dimension 2 Code", "Shortcut Dimension 2 Code") THEN
                                                                                     "Cost Component" := DimValRec."Cost Component";
                                                                                 //db.en, 23-10-12: T000809

                                                                                 IF FinishedProject <> '' THEN
                                                                                   Description := COPYSTR(STRSUBSTNO(Text006,Description,FinishedProject), 1, MAXSTRLEN(Description))
                                                                                 ELSE
                                                                                   Description := COPYSTR(Text009 + EmplRec.FullName, 1, MAXSTRLEN(Description)) ;

                                                                                 "Bal. Account No." := TradeRec."Wage Coverage Account";
                                                                                 "Account Type" := "Account Type"::"G/L Account";
                                                                                 "Bal. Account Type" := "Bal. Account Type"::"G/L Account";
                                                                                 "System-Created Entry" := TRUE;
                                                                                 "Amount (LCY)" := Amount;
                                                                                 IF Amount > 0 THEN
                                                                                   "Debit Amount" := Amount
                                                                                 ELSE
                                                                                   "Credit Amount" := -Amount;
                                                                                 CASE TRUE OF
                                                                                   ("Account No." <> '') AND ("Bal. Account No." <> ''):
                                                                                     "Balance (LCY)" := 0;
                                                                                   "Bal. Account No." <> '':
                                                                                     "Balance (LCY)" := -"Amount (LCY)";
                                                                                   ELSE
                                                                                     "Balance (LCY)" := "Amount (LCY)";
                                                                                 END;

                                                                                 //**Check VAT-postinginfo (start)
                                                                                 IF NOT GlAccRec.GET("Account No.") THEN GlAccRec.INIT;
                                                                                 IF GlAccRec."Import Posting Information" = TRUE THEN BEGIN
                                                                                   //**validate-trigger T81 (account no.)
                                                                                   "Gen. Posting Type" := GlAccRec."Gen. Posting Type";
                                                                                   "Gen. Bus. Posting Group" := GlAccRec."Gen. Bus. Posting Group";
                                                                                   "Gen. Prod. Posting Group" := GlAccRec."Gen. Prod. Posting Group";
                                                                                   "VAT Bus. Posting Group" := GlAccRec."VAT Bus. Posting Group";
                                                                                   "VAT Prod. Posting Group" := GlAccRec."VAT Prod. Posting Group";
                                                                                   "Tax Area Code" := GlAccRec."Tax Area Code";
                                                                                   "Tax Liable" := GlAccRec."Tax Liable";
                                                                                   "Tax Group Code" := GlAccRec."Tax Group Code";
                                                                                 END;

                                                                                 IF NOT GlAccRec.GET("Bal. Account No.") THEN GlAccRec.INIT;
                                                                                 IF GlAccRec."Import Posting Information" = TRUE THEN BEGIN
                                                                                   //**validate-trigger T81 (balance account no.)
                                                                                   "Bal. Gen. Posting Type" := GlAccRec."Gen. Posting Type";
                                                                                   "Bal. Gen. Bus. Posting Group" := GlAccRec."Gen. Bus. Posting Group";
                                                                                   "Bal. Gen. Prod. Posting Group" := GlAccRec."Gen. Prod. Posting Group";
                                                                                   "Bal. VAT Bus. Posting Group" := GlAccRec."VAT Bus. Posting Group";
                                                                                   "Bal. VAT Prod. Posting Group" := GlAccRec."VAT Prod. Posting Group";
                                                                                   "Bal. Tax Area Code" := GlAccRec."Tax Area Code";
                                                                                   "Bal. Tax Liable" := GlAccRec."Tax Liable";
                                                                                   "Bal. Tax Group Code" := GlAccRec."Tax Group Code";
                                                                                 END;

                                                                                 IF VATPostSetup.GET("VAT Bus. Posting Group", "VAT Prod. Posting Group") THEN BEGIN
                                                                                   //**validate-trigger T81 (vat %)
                                                                                   "VAT Calculation Type" := VATPostSetup."VAT Calculation Type";
                                                                                   IF "VAT Calculation Type" = "VAT Calculation Type"::"Normal VAT" THEN
                                                                                     "VAT %" := VATPostSetup."VAT %";
                                                                                   CASE "VAT Calculation Type" OF
                                                                                     "VAT Calculation Type"::"Normal VAT",
                                                                                     "VAT Calculation Type"::"Reverse Charge VAT":
                                                                                       "VAT Amount" := Amount - ROUND(Amount / (1 + "VAT %" / 100), 0.01);
                                                                                     "VAT Calculation Type"::"Full VAT":
                                                                                       "VAT Amount" := Amount;
                                                                                   END;
                                                                                 END;
                                                                                 "Amount (LCY)" := Amount;
                                                                                 "VAT Base Amount" := Amount - "VAT Amount";
                                                                                 "VAT Amount (LCY)" := "VAT Amount";
                                                                                 "VAT Base Amount (LCY)" := "Amount (LCY)" - "VAT Amount (LCY)";

                                                                                 IF VATPostSetup.GET("Bal. VAT Bus. Posting Group", "Bal. VAT Prod. Posting Group") THEN BEGIN
                                                                                   //  "VAT-calculation"::"Sales tax":  not elaborated
                                                                                   "Bal. VAT Calculation Type" := VATPostSetup."VAT Calculation Type";
                                                                                   IF "Bal. VAT Calculation Type" = "Bal. VAT Calculation Type"::"Normal VAT" THEN
                                                                                     "Bal. VAT %" := VATPostSetup."VAT %";
                                                                                   CASE "Bal. VAT Calculation Type" OF
                                                                                     "Bal. VAT Calculation Type"::"Normal VAT",
                                                                                     "Bal. VAT Calculation Type"::"Reverse Charge VAT":
                                                                                       "Bal. VAT Amount" := -(Amount - ROUND(Amount / (1 + "Bal. VAT %" / 100), 0.01));
                                                                                     "Bal. VAT Calculation Type"::"Full VAT":
                                                                                       "Bal. VAT Amount" := -Amount;
                                                                                   END;
                                                                                 END;
                                                                                 "Bal. VAT Base Amount" := -(Amount + "Bal. VAT Amount");
                                                                                 "Bal. VAT Amount (LCY)" := "Bal. VAT Amount";
                                                                                 "Bal. VAT Base Amount (LCY)" := -("Amount (LCY)" + "Bal. VAT Amount (LCY)");
                                                                                 //**validate-trigger T81 (vat % balance account)

                                                                                 //FIXED Fill Dimension Set ID
                                                                                 IF "Shortcut Dimension 1 Code" <> '' THEN BEGIN                    //DP00387 sn
                                                                                   DimMgt.SetCompany("Receiving Company");
                                                                                   DimMgt.ValidateShortcutDimValues(1,"Shortcut Dimension 1 Code","Dimension Set ID");
                                                                                   DimMgt.SetCompany(COMPANYNAME);
                                                                                 END;
                                                                                 IF "Shortcut Dimension 2 Code" <> '' THEN BEGIN
                                                                                   DimMgt.SetCompany("Receiving Company");
                                                                                   DimMgt.ValidateShortcutDimValues(2,"Shortcut Dimension 2 Code","Dimension Set ID");
                                                                                   DimMgt.SetCompany(COMPANYNAME);
                                                                                 END;                                                               //DP00387 en


                                                                                 ShowStatus("Journal Template Name", "Journal Batch Name", "Line No.");

                                                                                 INSERT;

                                                                                 currXMLport.SKIP;

                                                                                 END; //Belongs to With statement.
                                                                               END;
                                                                                }

    { [{99B1C0C0-2445-4A47-B779-AB5D54E0E494}];2 ;CompanyAndAdministration;Element;Text ;
                                                  MinOccurs=Zero;
                                                  Width=7 }

    { [{396B0434-F1DD-4984-8DC7-90EA540191B8}];2 ;EmployeeTxt         ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  EVALUATE(Employee, EmployeeTxt);
                                                                                END;

                                                  Width=12 }

    { [{BE3021E7-E09C-4F59-8705-7E6264750360}];2 ;RecType             ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Width=1 }

    { [{5A14CEB9-30B9-4D0B-8E54-E747B1B73FD2}];2 ;ProjElem            ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Width=10 }

    { [{095FE2F4-6893-4FA6-A7B6-40EE3049B2BC}];2 ;CostObjectDepartmentTxt;Element;Text  ;
                                                  MinOccurs=Zero;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  EVALUATE(CostObjectDepartment, CostObjectDepartmentTxt);
                                                                                END;

                                                  Width=10 }

    { [{0E1EB5A0-AC30-43A8-A4C3-49B530C2040D}];2 ;AdditionalCost      ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Width=1 }

    { [{5D302B3C-1C3B-4AA1-96B1-083B7BA790D4}];2 ;Filler1             ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Width=9 }

    { [{29D83132-493C-4C2D-974C-520370176E85}];2 ;WageCode            ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Width=4 }

    { [{52480020-5627-4A73-B5C5-9BD0965F4B5A}];2 ;HoursQuanTxt        ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  FillEmptyTextWithZero(HoursQuanTxt);
                                                                                  EVALUATE(HoursQuan, HoursQuanTxt);
                                                                                END;

                                                  Width=9 }

    { [{B874BB7A-320F-4661-BA72-33056FEB30A7}];2 ;HoursSign           ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Width=1 }

    { [{5656C67A-7E3D-4165-BE69-51E38DC1C482}];2 ;AmountDecTxt        ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  FillEmptyTextWithZero(AmountDecTxt);
                                                                                  EVALUATE(AmountDec, AmountDecTxt);
                                                                                END;

                                                  Width=9 }

    { [{A63985E6-7F94-4D3B-B316-3D7CF471ADC0}];2 ;AmountSign          ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Width=1 }

    { [{9342B597-BE3B-4CD7-91BC-F35A2D42A29B}];2 ;Name                ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Width=30 }

    { [{D0448FB2-0221-4390-B3D4-4FE1A51C8C0A}];2 ;Filler2             ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Width=21 }

    { [{181D60BA-C3B8-4338-9229-D89A95230B48}];2 ;EndingDate          ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Width=8 }

    { [{CD9A61C4-3920-452D-8AD0-BB0D7B78DE02}];2 ;BalanceAccount      ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Width=9 }

    { [{9F8C1F11-0B76-48A7-BF8F-BBC60BCB108E}];2 ;DiffCompanyAndAdministration;Element;Text;
                                                  MinOccurs=Zero;
                                                  Width=7 }

  }
  EVENTS
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1100409000;;Container;
                  ContainerType=ContentArea }

      { 1100409001;1;Group  ;
                  CaptionML=[ENU=Options;
                             SVE=Alternativ];
                  GroupType=Group }

      { 1100409002;2;Field  ;
                  Name=RemZero;
                  CaptionML=[ENU=Remove Zero Prefix;
                             SVE=Ta bort nollprefix];
                  OptionCaptionML=[ENU=All,Upto Maximum Used Field Length;
                                   SVE=Alla,Upp till maximalt anv„nd f„ltl„ngd];
                  SourceExpr=RemZero;
                  OnValidate=BEGIN
                               IF RemZero = RemZero::All THEN BEGIN
                                 MaxLenProj := 0;
                                 MaxLenCostObject := 0;
                                 MaxLenEmpl := 0;
                                 MaxLenElem := 0;
                                 MaxLenAcc := 0;
                                 MaxLenSO := 0;  //db, 23-10-12
                               END ELSE BEGIN
                                 MaxLenProj := HumanResourcesSetup."Length Project (Extern)";
                                 MaxLenCostObject := 18 - HumanResourcesSetup."Length Project (Extern)";
                                 MaxLenEmpl := MAXSTRLEN(EmplRec."No.");
                                 MaxLenElem := HumanResourcesSetup."Length Element (Extern)";
                                 MaxLenCostObject := 18 - (HumanResourcesSetup."Length Project (Extern)"+HumanResourcesSetup."Length Element (Extern)");
                                 MaxLenAcc := MAXSTRLEN(GlAccRec."No.");
                                 MaxLenSO := MAXSTRLEN(ServiceOrderRec."No.");;  //db, 23-10-12
                               END;
                             END;
                              }

      { 1100409003;2;Field  ;
                  Name=MaxLenProj;
                  CaptionML=[ENU=Project;
                             SVE=Projekt];
                  SourceExpr=MaxLenProj;
                  OnValidate=BEGIN
                               IF MaxLenProj > HumanResourcesSetup."Length Project (Extern)" THEN
                                 MaxLenProj := HumanResourcesSetup."Length Project (Extern)";
                               IF RemZero = RemZero::All THEN
                                 MaxLenProj := 0;
                             END;
                              }

      { 1100409004;2;Field  ;
                  Name=MaxLenElem;
                  CaptionML=[ENU=Element;
                             SVE=Element];
                  SourceExpr=MaxLenElem;
                  OnValidate=BEGIN
                               //**4PS.sn JTH Call 2846
                               IF MaxLenElem > HumanResourcesSetup."Length Element (Extern)" THEN
                                 MaxLenElem := HumanResourcesSetup."Length Element (Extern)";
                               IF RemZero = RemZero::All THEN
                                 MaxLenElem := 0;
                               //**4PS.en
                             END;
                              }

      { 1100409005;2;Field  ;
                  Name=MaxLenCostObject;
                  CaptionML=[ENU=Cost Object;
                             SVE=Kostnadsobjekt];
                  SourceExpr=MaxLenCostObject;
                  OnValidate=BEGIN
                               //**4PS.so JTH Call 2846
                               //IF MaxLenCostObject > 18 - HumanResourcesSetup."Length Project (Extern)" THEN
                               //  MaxLenCostObject := 18 - HumanResourcesSetup."Length Project (Extern)";
                               //**4PS.eo
                               //**4PS.sn JTH Call 2846
                               IF MaxLenCostObject > 18 - (HumanResourcesSetup."Length Project (Extern)" + HumanResourcesSetup."Length Element (Extern)") THEN
                                 MaxLenCostObject := 18 - (HumanResourcesSetup."Length Project (Extern)" + HumanResourcesSetup."Length Element (Extern)");
                               IF RemZero = RemZero::All THEN
                                 MaxLenCostObject := 0;
                               //**4PS.en
                             END;
                              }

      { 1100409006;2;Field  ;
                  Name=MaxLenEmpl;
                  CaptionML=[ENU=Employee;
                             SVE=Personal];
                  SourceExpr=MaxLenEmpl;
                  OnValidate=BEGIN
                               IF MaxLenEmpl > MAXSTRLEN(EmplRec."No.") THEN
                                 MaxLenEmpl := MAXSTRLEN(EmplRec."No.");
                               IF RemZero = RemZero::All THEN
                                 MaxLenEmpl := 0;
                             END;
                              }

      { 1100409007;2;Field  ;
                  Name=MaxLenAcc;
                  CaptionML=[ENU=Account No.;
                             SVE=Nr];
                  SourceExpr=MaxLenAcc;
                  OnValidate=BEGIN
                               IF RemZero = RemZero::All THEN
                                 MaxLenAcc := 0;
                             END;
                              }

      { 1100409008;2;Field  ;
                  Name=MaxLenSO;
                  CaptionML=[ENU=Service Order;
                             SVE=Serviceorder];
                  SourceExpr=MaxLenSO;
                  OnValidate=BEGIN
                               IF RemZero = RemZero::All THEN
                                 MaxLenSO := 0;
                             END;
                              }

    }
  }
  CODE
  {
    VAR
      GLSetup@1100409067 : Record 98;
      HumanResourcesSetup@1100409066 : Record 5218;
      VATPostSetup@1100409065 : Record 325;
      JnlTemplRec@1100409064 : Record 80;
      JnlBatchRec@1100409063 : Record 232;
      CompRec@1100409062 : Record 11012375;
      DimValRec@1100409061 : Record 349;
      HumanResourcesSetupRec@1100409060 : Record 5218;
      JobsSetup@1100525001 : Record 315;
      PostRec@1100409059 : Record 81;
      ProjRec@1100409058 : Record 11072003;
      ServiceOrderRec@1100409057 : Record 11012823;
      ServTypeRec@1100409056 : Record 11012814;
      ElemRec@1100409055 : Record 11012010;
      PtypRec@1100409054 : Record 11012009;
      EmplRec@1100409053 : Record 5200;
      TradeRec@1100409052 : Record 11012015;
      GlAccRec@1100409051 : Record 15;
      PostedHourLine@1100409049 : Record 11012085;
      PaymasterRecordExtensionRec@1100409048 : Record 11012384;
      DimMgt@1100525000 : Codeunit 408;
      LineCounter@1100409047 : Integer;
      BookYear@1100409046 : Integer;
      BookMonth@1100409045 : Integer;
      BookDay@1100409044 : Integer;
      BookWeek@1100409043 : Integer;
      PostingDate@1100409042 : Date;
      Period@1100409041 : Text[30];
      Company@1100409038 : Text[30];
      Administration@1100409037 : Text[30];
      Employee@1100409073 : Code[20];
      CostObjectDepartment@1100409072 : Code[30];
      ProjectCode@1100409029 : Code[20];
      ServiceOrderCode@1100409028 : Code[20];
      ElementCode@1100409027 : Code[20];
      ReceivingCompany@1100409026 : Text[50];
      HoursQuan@1100409024 : Decimal;
      AmountDec@1100409022 : Decimal;
      filler@1100409020 : Code[50];
      Continue@1100409019 : ARRAY [10] OF Boolean;
      AskCalcMethod@1100409018 : Boolean;
      FinishedProject@1100409017 : Code[20];
      NewFile@1100409015 : Text[250];
      RemZero@1100409014 : 'All,Field Length';
      MaxLenProj@1100409013 : Integer;
      MaxLenElem@1100409012 : Integer;
      MaxLenCostObject@1100409011 : Integer;
      MaxLenEmpl@1100409010 : Integer;
      MaxLenAcc@1100409009 : Integer;
      MaxLenSO@1100409008 : Integer;
      DocNo@1100409006 : Code[20];
      NoSeriesMgt@1100409005 : Codeunit 396;
      ElementFormat@1100409004 : Codeunit 11012022;
      FileMgt@1100409016 : Codeunit 419;
      XMLportStatusDialogMgt@1100409074 : Codeunit 11130006;
      UsePaymExtension@1100409003 : Boolean;
      CompanyOrg@1100409002 : Text[30];
      CompanyRec@1100409001 : Text[30];
      ServType@1100409000 : Code[20];
      Text001@1100409070 : TextConst 'ENU=Do you want to import the Actual Wage List in spite of the Project Setup is "Fixed Rate" (i.o. "Actual Rate")?;SVE=Vill du importera den verkliga l”nelistan trots att projektinst„llnIngen „r "Fast avgift" (i st„llet f”r "Verklig avgift")?';
      Text002@1100409069 : TextConst 'ENU=Import of Actual Wage List aborted;SVE=Import av verklig l”nelista avbruten';
      Text003@1100409068 : TextConst 'ENU=Navision Company can not be determined via Company and Administration from Paymaster;SVE=Navision-f”retaget kan inte fastst„llas via f”retag och administration fr†n Paymaster';
      Text006@1100409036 : TextConst 'ENU=%1 Project %2;SVE=%1 projekt %2';
      Text008@1100409035 : TextConst 'ENU=Hour;SVE=Timme';
      Text009@1100409034 : TextConst 'ENU="Hours ";SVE=Timmar';
      Text010@1100409033 : TextConst 'ENU=Import Unknown Cost Object;SVE=Importera ok„nt kostnadsobjekt';
      Text011@1100409032 : TextConst 'ENU=Import Unknown Project;SVE=Importera ok„nt projekt.';
      Text012@1100409031 : TextConst 'ENU=Import Unknown Employee;SVE=Importera ok„nd anst„lld';
      Text013@1100409030 : TextConst 'ENU=Import Unknown Element;SVE=Importera ok„nt element';
      Text014@1100409025 : TextConst 'ENU=Paymasterregel niet gevonden in %1;SVE=Paymasterregeln hittades inte i %1';
      Text015@1100409023 : TextConst 'ENU=Import Unknown Department Code;SVE=Importera ok„nd avdelningskod';
      Text016@1100409021 : TextConst 'ENU=%1 cannot be determined via Different Company and Administration (%2) from Paymaster.;SVE=%1 kan inte fastst„llas via annat f”retag och administration fr†n (%2) fr†n Paymaster.';
      Text017@1100409007 : TextConst 'ENU=Import Unknown Service Order;SVE=Importera ok„nd serviceorder';

    PROCEDURE StripZero@1(VAR convtext@11012000 : Code[30];LenFld@1210190000 : Integer);
    VAR
      Position@11012001 : Integer;
    BEGIN
      Position := STRPOS(convtext,'0');
      WHILE Position = 1 DO BEGIN
        IF LenFld <> 0 THEN
          IF STRLEN(convtext) = LenFld THEN
            EXIT;
        convtext := DELSTR(convtext,Position,1);
        Position := STRPOS(convtext,'0');
      END;
    END;

    PROCEDURE HandleUnknownData@2(importdata@11012000 : Text[30];ImportNumber@11012001 : Integer);
    BEGIN
      //HandleUnknownData
      //array set to 10
      IF Continue[ImportNumber] = FALSE THEN BEGIN
        CASE ImportNumber OF
          1: Continue[ImportNumber] := CONFIRM(Text010);
          2: Continue[ImportNumber] := CONFIRM(Text011);
          3: Continue[ImportNumber] := CONFIRM(Text012);
          4: Continue[ImportNumber] := CONFIRM(Text013);
          5: Continue[ImportNumber] := CONFIRM(Text015);
          6: Continue[ImportNumber] := CONFIRM(Text017);
        END;
        IF Continue[ImportNumber] = FALSE THEN ERROR(importdata);
      END;
    END;

    PROCEDURE WIPAccProject@25() : Code[20];
    BEGIN
      WITH PtypRec DO BEGIN

        IF (JobsSetup."Provisions at Closure") AND
           (ProjRec."Project Status" >= ProjRec."Project Status"::Finished) THEN
      //     ( FinishedProject <> '') THEN   CALL 32588, this is only applicable for an archived project,
      // so can't be empty when status finished
        BEGIN
          CASE DimValRec."Cost Type" OF
            DimValRec."Cost Type"::Labor:
              EXIT("Provision Account Labor");
            DimValRec."Cost Type"::Material:
              EXIT("Provision Account Material");
            DimValRec."Cost Type"::Subcontracting:
              EXIT("Provision Account Subcontr.");
            DimValRec."Cost Type"::Plant:
              EXIT("Provision Account Plant");
            DimValRec."Cost Type"::Sundry:
              EXIT("Provision Account Sundry");
          END;
        END ELSE BEGIN
          CASE DimValRec."Cost Type" OF
            DimValRec."Cost Type"::Labor:
              EXIT("WIP Account Labor");
            DimValRec."Cost Type"::Material:
              EXIT("WIP Account Material");
            DimValRec."Cost Type"::Subcontracting:
              EXIT("WIP Account Subcontracting");
            DimValRec."Cost Type"::Plant:
              EXIT("WIP Account Plant");
            DimValRec."Cost Type"::Sundry:
              EXIT("WIP Account Sundry");
          END;
        END;
      END;
    END;

    PROCEDURE WIPAccService@1100409001() : Code[20];
    BEGIN
      //db, 23-10-12: T000809
      WITH ServTypeRec DO BEGIN
        CASE DimValRec."Cost Type" OF
          DimValRec."Cost Type"::Labor:
            EXIT("WIP Account Labor");
          DimValRec."Cost Type"::Material:
            EXIT("WIP Account Material");
          DimValRec."Cost Type"::Subcontracting:
            EXIT("WIP Account Subcontracting");
          DimValRec."Cost Type"::Plant:
            EXIT("WIP Account Plant");
          DimValRec."Cost Type"::Sundry:
            EXIT("WIP Account Sundry");
        END;
      END;
    END;

    PROCEDURE CheckProjectFinished@1210190001();
    BEGIN
      IF (JobsSetup."Provisions at Closure") THEN BEGIN
        IF ProjRec."Project Status" >= ProjRec."Project Status"::Archive THEN BEGIN
          DetermineFinishedProjectCode;
        END;
      END ELSE BEGIN
        IF ProjRec."Project Status" >= ProjRec."Project Status"::Finished THEN BEGIN
          DetermineFinishedProjectCode;
        END;
      END;
    END;

    PROCEDURE DetermineFinishedProjectCode@1210190003();
    BEGIN
      FinishedProject := ProjectCode;
      ProjRec.TESTFIELD("Project Type");
      PtypRec.GET(ProjRec."Project Type");
      PtypRec.TESTFIELD("Project No.After Closure Costs");
      ProjectCode := PtypRec."Project No.After Closure Costs";
    END;

    PROCEDURE DetermineCompany@1210190002();
    BEGIN
      CompanyOrg := '';
      CompanyRec := '';

      IF NOT UsePaymExtension THEN BEGIN
        CompRec.SETRANGE("Company Salary Application", Company);
        CompRec.SETRANGE(Administration, Administration);
        IF NOT CompRec.FIND('-') THEN
          ERROR(Text003)
        ELSE
          CompanyOrg := CompRec."Navision Company";
      END ELSE BEGIN
        DetermineCompanyExtension;
      END;
    END;

    PROCEDURE DetermineCompanyExtension@1100485000();
    VAR
      HumanResourcesSetupRec@1100485000 : Record 5218;
      ProjectNo@1100485001 : Code[20];
      ElementNo@1100485002 : Code[20];
      PostingDate@1100485004 : Date;
      YearNo@1100485005 : Integer;
      MonthNo@1100485006 : Integer;
      DayNo@1100485007 : Integer;
    BEGIN
      HumanResourcesSetupRec.GET; //Note: all companies should have same setup!!

      EVALUATE(ProjectNo, COPYSTR(ProjElem, 1, HumanResourcesSetupRec."Length Project (Extern)"));
      EVALUATE(ElementNo, COPYSTR(ProjElem,HumanResourcesSetupRec."Length Project (Extern)"+1, HumanResourcesSetupRec."Length Element (Extern)"));

      IF RecType = 'G' THEN
        StripZero(ProjectNo, MaxLenAcc)
      ELSE
        StripZero(ProjectNo, MaxLenProj);
      IF ProjectNo = ' ' THEN
        ProjectNo := '';
      StripZero(ElementNo, MaxLenElem);
      IF ElementNo = ' ' THEN
        ElementNo := '';
      StripZero(CostObjectDepartment, MaxLenCostObject);
      IF CostObjectDepartment = ' ' THEN
        CostObjectDepartment := '';
      StripZero(Employee, MaxLenEmpl);

      EVALUATE(YearNo,COPYSTR(EndingDate,1,4));
      EVALUATE(MonthNo,COPYSTR(EndingDate,5,2));
      EVALUATE(DayNo,COPYSTR(EndingDate,7,2));
      PostingDate := DMY2DATE(DayNo,MonthNo,YearNo);

      PaymasterRecordExtensionRec.SETRANGE(Company,Company);
      PaymasterRecordExtensionRec.SETRANGE(Administration,Administration);
      PaymasterRecordExtensionRec.SETRANGE(Employee,Employee);
      PaymasterRecordExtensionRec.SETRANGE("Record Type",RecType);
      PaymasterRecordExtensionRec.SETRANGE("Project/ GL AccountNo",ProjectNo);
      PaymasterRecordExtensionRec.SETRANGE("Element Code",ElementNo);
      PaymasterRecordExtensionRec.SETRANGE("Cost Object Code",CostObjectDepartment);
      //PaymasterRecordExtensionRec.SETRANGE("Wage Code",WageCode);
      PaymasterRecordExtensionRec.SETRANGE("Hour Date",PostingDate);
      IF PaymasterRecordExtensionRec.FINDFIRST THEN BEGIN
        CompanyOrg := PaymasterRecordExtensionRec."Org Company";
        CompanyRec := PaymasterRecordExtensionRec."Receiving Company";
        IF CompanyOrg = '' THEN
          CompanyOrg := COMPANYNAME;
      END ELSE
        ERROR(Text014,PaymasterRecordExtensionRec.TABLECAPTION);
    END;

    LOCAL PROCEDURE DetermineReceivingCompany@1210190005(DiffCompanyAndAdministration@1210190000 : Text[30];DefaultReceivingCompany@1210190005 : Text[30]) : Text[30];
    VAR
      DiffCompany@1210190001 : Text[30];
      DiffAdministration@1210190002 : Text[30];
      PaymasterCompany@1210190003 : Record 11012375;
      GenJournalLine@1210190004 : Record 81;
    BEGIN
      // kkleermaker.sn, 110707, M28306
      IF (DiffCompanyAndAdministration = '') OR
         (COPYSTR(DiffCompanyAndAdministration, 1, 7) = '0000000')
      THEN
        EXIT(DefaultReceivingCompany);

      DiffCompany := COPYSTR(DiffCompanyAndAdministration, 1, HumanResourcesSetup."Length Company Paymaster");
      DiffAdministration := COPYSTR(DiffCompanyAndAdministration, HumanResourcesSetup."Length Company Paymaster" + 1);
      PaymasterCompany.SETRANGE("Company Salary Application", DiffCompany);
      PaymasterCompany.SETRANGE(Administration, DiffAdministration);
      IF NOT PaymasterCompany.FINDFIRST THEN
        ERROR(Text016, GenJournalLine.FIELDCAPTION("Receiving Company"), DiffCompanyAndAdministration)
      ELSE
        EXIT(PaymasterCompany."Navision Company");
      // kkleermaker.en, 110707, M28306
    END;

    PROCEDURE FillEmptyTextWithZero@1100525013(VAR Text@1100525000 : Text[1024]);
    BEGIN
      IF DELCHR(Text,'<>=',' ') = '' THEN
        Text := '0';
    END;

    LOCAL PROCEDURE ShowStatus@1100409000(JournalTemplateName@1100409000 : Code[10];JournalBatchName@1100409001 : Code[10];LineNo@1100409002 : Integer);
    VAR
      GenJournalLine@1100409004 : Record 81;
      RecRef@1100409003 : RecordRef;
    BEGIN
      GenJournalLine."Journal Template Name" := JournalTemplateName;
      GenJournalLine."Journal Batch Name" := JournalBatchName;
      GenJournalLine."Line No." := LineNo;
      RecRef.GETTABLE(GenJournalLine);
      XMLportStatusDialogMgt.ShowImportStatus(RecRef);
    END;

    PROCEDURE InitXMLPort@1100528500(iRemZero@1100528506 : 'All,Field Length';iMaxLenProj@1100528505 : Integer;iMaxLenElem@1100528504 : Integer;iMaxLenCostObject@1100528503 : Integer;iMaxLenEmpl@1100528502 : Integer;iMaxLenAcc@1100528501 : Integer;iMaxLenSO@1100528500 : Integer);
    BEGIN
      RemZero := iRemZero;
      MaxLenProj := iMaxLenProj;
      MaxLenElem := iMaxLenElem;
      MaxLenCostObject := iMaxLenCostObject;
      MaxLenEmpl := iMaxLenElem;
      MaxLenAcc := iMaxLenAcc;
      MaxLenSO := iMaxLenSO;
    END;

    BEGIN
    {
      CC: Dataport 11012349

      db, 28-01-13: C004962 Case RecType OF: G, S, default (=P)
    }
    END.
  }
}

