OBJECT Codeunit 12013605 ExFlow Dim Mgt
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EXF512001;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      EXF01@1100285005 : TextConst 'ENU=The purchase document %1 does not have a new row no.;SVE=Ink”psdokumentet %1 har inte n†got nytt radnr.';
      Text032@1100285003 : TextConst 'ENU=The combination of dimensions used in %1 %2 is blocked. %3;SVE=Kombinationen av dimensioner anv„nda i %1 %2 „r sp„rrad. %3';
      Text033@1100285002 : TextConst 'ENU=The combination of dimensions used in %1 %2, line no. %3 is blocked. %4;SVE=Kombinationen av dimensioner i %1 %2, radnr %3 „r sp„rrad. %4';
      Text034@1100285001 : TextConst 'ENU=The dimensions used in %1 %2 are invalid. %3;SVE=Dimensionerna anv„nda i %1 %2 „r ogiltiga. %3';
      Text035@1100285000 : TextConst 'ENU=The dimensions used in %1 %2, line no. %3 are invalid. %4;SVE=Dimensionerna anv„nda i %1 %2, radnr %3 „r ogiltiga. %4';
      Text100@1100285004 : TextConst 'ENU=Table %1 is not supported!;SVE=Tabell %1 st”ds ej!';
      GlobalTempPurchLine@1100285006 : TEMPORARY Record 39;

    PROCEDURE GetDimFromPurchLine@1100285000(PurchLine@1100285000 : Record 39;VAR CurrentDocDimFound@1100285003 : Boolean;VAR CurrentDocDimCode@1100285005 : Code[20];VAR CurrentDocDimValue@1100285008 : Code[20];VAR TempDimValue@1100285007 : TEMPORARY Record 349);
    VAR
      DimSetEntry@1100285004 : Record 480;
    BEGIN
      TempDimValue.RESET;
      TempDimValue.DELETEALL;

      DimSetEntry.RESET;
      DimSetEntry.SETRANGE("Dimension Set ID", PurchLine."Dimension Set ID");
      IF DimSetEntry.FINDSET THEN
        REPEAT
          IF DimSetEntry."Dimension Code" = CurrentDocDimCode THEN BEGIN
            TempDimValue."Dimension Code" := CurrentDocDimCode;
            TempDimValue.Code := CurrentDocDimValue;
            TempDimValue.INSERT;
            CurrentDocDimFound := TRUE;
          END
          ELSE BEGIN
            TempDimValue."Dimension Code" := DimSetEntry."Dimension Code";
            TempDimValue.Code := DimSetEntry."Dimension Value Code";
            TempDimValue.INSERT;
          END;
        UNTIL DimSetEntry.NEXT = 0;

      IF (NOT CurrentDocDimFound) AND (CurrentDocDimCode <> '') THEN BEGIN
        TempDimValue."Dimension Code" := CurrentDocDimCode;
        TempDimValue.Code := CurrentDocDimValue;
        TempDimValue.INSERT;
      END;
    END;

    PROCEDURE GetDimFromExFPurchLine@1100285017(ExFPurchLine@1100285000 : Record 12013588;VAR CurrentDocDimFound@1100285003 : Boolean;VAR CurrentDocDimCode@1100285005 : Code[20];VAR CurrentDocDimValue@1100285008 : Code[20];VAR TempDimValue@1100285007 : TEMPORARY Record 349);
    VAR
      DimSetEntry@1100285004 : Record 480;
    BEGIN
      TempDimValue.RESET;
      TempDimValue.DELETEALL;

      DimSetEntry.RESET;
      DimSetEntry.SETRANGE("Dimension Set ID", ExFPurchLine."Dimension Set ID");
      IF DimSetEntry.FINDSET THEN
        REPEAT
          IF DimSetEntry."Dimension Code" = CurrentDocDimCode THEN BEGIN
            TempDimValue."Dimension Code" := CurrentDocDimCode;
            TempDimValue.Code := CurrentDocDimValue;
            TempDimValue.INSERT;
            CurrentDocDimFound := TRUE;
          END
          ELSE BEGIN
            TempDimValue."Dimension Code" := DimSetEntry."Dimension Code";
            TempDimValue.Code := DimSetEntry."Dimension Value Code";
            TempDimValue.INSERT;
          END;
        UNTIL DimSetEntry.NEXT = 0;

      IF (NOT CurrentDocDimFound) AND (CurrentDocDimCode <> '') THEN BEGIN
        TempDimValue."Dimension Code" := CurrentDocDimCode;
        TempDimValue.Code := CurrentDocDimValue;
        TempDimValue.INSERT;
      END;
    END;

    PROCEDURE GetDimFromDocLine@1100285031(ExDocLine@1100285000 : Record 12013609;VAR CurrentDocDimFound@1100285003 : Boolean;VAR CurrentDocDimCode@1100285005 : Code[20];VAR CurrentDocDimValue@1100285008 : Code[20];VAR TempDimValue@1100285007 : TEMPORARY Record 349);
    VAR
      ExDocLineDim@1100285001 : Record 12013611;
      ExColumn@1100285002 : Record 12013661;
    BEGIN
      TempDimValue.RESET;
      TempDimValue.DELETEALL;

      ExDocLineDim.RESET;
      ExDocLineDim.SETCURRENTKEY("Document Line ID");
      ExDocLineDim.SETRANGE("Document Line ID", ExDocLine.ID);
      IF ExDocLineDim.FINDSET THEN
        REPEAT
          ExColumn.GET(ExDocLineDim."Column ID");
          IF ExColumn."Dimension Code" <> '' THEN BEGIN
            IF ExDocLineDim."Dimension Code" = CurrentDocDimCode THEN BEGIN
              TempDimValue."Dimension Code" := CurrentDocDimCode;
              TempDimValue.Code := CurrentDocDimValue;
              TempDimValue.INSERT;
              CurrentDocDimFound := TRUE;
            END
            ELSE BEGIN
              TempDimValue."Dimension Code" := ExDocLineDim."Dimension Code";
              TempDimValue.Code := ExDocLineDim."Dimension Value";
              TempDimValue.INSERT;
            END;
          END;
        UNTIL ExDocLineDim.NEXT = 0;

      IF (NOT CurrentDocDimFound) AND (CurrentDocDimCode <> '') THEN BEGIN
        TempDimValue."Dimension Code" := CurrentDocDimCode;
        TempDimValue.Code := CurrentDocDimValue;
        TempDimValue.INSERT;
      END;
    END;

    PROCEDURE InsertExDocDim@1100285001(PurchLine@1100285002 : Record 39;VAR DocLine@1100285000 : Record 12013609);
    VAR
      DimSetEntry@1100285006 : Record 480;
      DocLineDim@1100285005 : Record 12013611;
      Column@1100285001 : Record 12013661;
    BEGIN
      DimSetEntry.RESET;
      DimSetEntry.SETRANGE("Dimension Set ID", PurchLine."Dimension Set ID");
      IF DimSetEntry.FINDSET THEN
        REPEAT
          Column.RESET;
          Column.SETCURRENTKEY(Code);
          Column.SETRANGE(Code, DimSetEntry."Dimension Code");
          Column.SETFILTER("Dimension Code", '<>%1', '');
          IF Column.FINDFIRST THEN BEGIN
            DocLineDim.INIT;
            DocLineDim."Document Type" := DocLine."Document Type";
            DocLineDim."Document No." := DocLine."Document No.";
            DocLineDim."Line No." := DocLine."Line No.";
            DocLineDim."Dimension Code" := DimSetEntry."Dimension Code";
            DocLineDim."Dimension Value" := DimSetEntry."Dimension Value Code";
            DocLineDim."Column ID" := Column.ID;
            DocLineDim."Document Line ID" := DocLine.ID;
            DocLineDim."Document ID" := DocLine."Document ID";
            DocLineDim.ID := 0;
            IF DocLineDim."Dimension Value" <> '' THEN
              DocLineDim.INSERT;
          END;
        UNTIL DimSetEntry.NEXT = 0;
    END;

    PROCEDURE CopyDocDimToJnlLineDim@1100285002(_PurchaseLine@1100285000 : Record 39;VAR GenJnlLine@1100285003 : Record 81;RetrieveLinesFrom@1100285004 : 'Purchase Line,Ex Document Line');
    VAR
      ExDocLineDim@1100285005 : Record 12013611;
      ExColumn@1100285006 : Record 12013661;
      TempDimSetEntry@1100285002 : TEMPORARY Record 480;
      DimValue@1100285007 : Record 349;
      DimMgt@1100285001 : Codeunit 408;
    BEGIN
      IF RetrieveLinesFrom = RetrieveLinesFrom::"Purchase Line" THEN BEGIN
        GenJnlLine."Dimension Set ID" := _PurchaseLine."Dimension Set ID";
        DimMgt.UpdateGlobalDimFromDimSetID(GenJnlLine."Dimension Set ID",GenJnlLine."Shortcut Dimension 1 Code",GenJnlLine."Shortcut Dimension 2 Code");
        GenJnlLine.MODIFY;
      END
      ELSE BEGIN
        TempDimSetEntry.RESET;
        TempDimSetEntry.DELETEALL;

        ExDocLineDim.RESET;
        ExDocLineDim.SETCURRENTKEY("Document No.");
        ExDocLineDim.SETRANGE("Document Type", _PurchaseLine."Document Type");
        ExDocLineDim.SETRANGE("Document No.", _PurchaseLine."Document No.");
        ExDocLineDim.SETRANGE("Line No.", _PurchaseLine."Line No.");
        ExDocLineDim.SETFILTER("Dimension Value", '<>%1', '');
        IF ExDocLineDim.FINDSET THEN BEGIN
          REPEAT
            IF ExDocLineDim."Dimension Value" <> '' THEN BEGIN
              ExColumn.SETRANGE(Code, ExDocLineDim."Dimension Code");
              ExColumn.SETFILTER("Dimension Code", '<>%1', '');
              IF ExColumn.FINDFIRST THEN BEGIN
                DimValue.GET(ExDocLineDim."Dimension Code",ExDocLineDim."Dimension Value");
                IF TempDimSetEntry.GET(TempDimSetEntry."Dimension Set ID",DimValue."Dimension Code") THEN
                  TempDimSetEntry.DELETE;

                TempDimSetEntry."Dimension Set ID" := 0;
                TempDimSetEntry."Dimension Code" := DimValue."Dimension Code";
                TempDimSetEntry."Dimension Value Code" := DimValue.Code;
                TempDimSetEntry."Dimension Value ID" := DimValue."Dimension Value ID";
                TempDimSetEntry.INSERT;
              END;
            END;
          UNTIL ExDocLineDim.NEXT = 0;

          GenJnlLine."Dimension Set ID" := DimMgt.GetDimensionSetID(TempDimSetEntry);
          DimMgt.UpdateGlobalDimFromDimSetID(GenJnlLine."Dimension Set ID",GenJnlLine."Shortcut Dimension 1 Code",GenJnlLine."Shortcut Dimension 2 Code");
          GenJnlLine.MODIFY;
        END;
      END;
    END;

    PROCEDURE DeleteJnlDim@1100285003(GenJnlLine@1100285000 : Record 81);
    VAR
      DimMgt@1100285001 : Codeunit 408;
    BEGIN
      GenJnlLine."Dimension Set ID" := 0;
      DimMgt.UpdateGlobalDimFromDimSetID(GenJnlLine."Dimension Set ID",GenJnlLine."Shortcut Dimension 1 Code",GenJnlLine."Shortcut Dimension 2 Code");
      GenJnlLine.MODIFY;
    END;

    PROCEDURE CopyDimFromImpHeader@1100285004(FromTableNo@1100285012 : Integer;FromDocType@1100285011 : Integer;FromDocNo@1100285010 : Code[20];ToTableNo@1100285008 : Integer;ToDocType@1100285007 : Integer;ToDocNo@1100285006 : Code[20]);
    BEGIN
      // No code required, dimension set id is handled through transferfields
    END;

    PROCEDURE CopyDimFromImpLine@1100285005(FromTableNo@1100285005 : Integer;FromDocType@1100285006 : Integer;FromDocNo@1100285007 : Code[20];FromLineNo@1100285003 : Integer;ToTableNo@1100285010 : Integer;ToDocType@1100285009 : Integer;ToDocNo@1100285008 : Code[20];ToLineNo@1100285004 : Integer);
    BEGIN
      // No code required, dimension set id is handled through transferfields
    END;

    PROCEDURE ExPurchCodeUpDateDim@2(VAR ExPurchLine@1000 : Record 12013588;ExPurchCodeLine@1001 : Record 12013683);
    VAR
      TempDimSetEntry@1100285003 : TEMPORARY Record 480;
      TempDimSetEntry2@1100285002 : TEMPORARY Record 480;
      DimValue@1100285001 : Record 349;
      DimMgt@1100285000 : Codeunit 408;
    BEGIN
      IF ExPurchCodeLine."Dimension Set ID" = 0 THEN
        EXIT;

      TempDimSetEntry2.RESET;
      TempDimSetEntry2.DELETEALL;
      TempDimSetEntry.RESET;
      TempDimSetEntry.DELETEALL;

      DimMgt.GetDimensionSet(TempDimSetEntry,ExPurchCodeLine."Dimension Set ID");
      DimMgt.GetDimensionSet(TempDimSetEntry2,ExPurchLine."Dimension Set ID");
      TempDimSetEntry2.RESET;
      TempDimSetEntry.RESET;

      IF TempDimSetEntry.FINDSET THEN
        REPEAT
          IF TempDimSetEntry."Dimension Code" <> '' THEN BEGIN
            IF DimValue.GET(TempDimSetEntry."Dimension Code",TempDimSetEntry."Dimension Value Code") THEN BEGIN
              TempDimSetEntry2.SETRANGE("Dimension Code", TempDimSetEntry."Dimension Code");
              IF TempDimSetEntry2.FINDFIRST THEN
                TempDimSetEntry2.DELETE;

              TempDimSetEntry2.INIT;
              TempDimSetEntry2."Dimension Set ID" := 0;
              TempDimSetEntry2."Dimension Code" := DimValue."Dimension Code";
              TempDimSetEntry2."Dimension Value Code" := DimValue.Code;
              TempDimSetEntry2."Dimension Value ID" := DimValue."Dimension Value ID";
              TempDimSetEntry2.INSERT;
            END;
          END;
        UNTIL TempDimSetEntry.NEXT = 0;

      TempDimSetEntry2.RESET;
      TempDimSetEntry.RESET;
      ExPurchLine."Dimension Set ID" := DimMgt.GetDimensionSetID(TempDimSetEntry2);
      DimMgt.UpdateGlobalDimFromDimSetID(ExPurchLine."Dimension Set ID",ExPurchLine."Shortcut Dimension 1 Code",ExPurchLine."Shortcut Dimension 2 Code");
      ExPurchLine.MODIFY;
    END;

    PROCEDURE CopyAndCheckDocDimToTempDocDim@34(VAR PurchHeader@1100285000 : Record 38;VAR ErrText@1100285001 : Text[1024]);
    VAR
      PurchLine2@1000 : Record 39;
    BEGIN
      PurchLine2."Line No." := 0;
      CheckDimComb(PurchLine2, PurchHeader, ErrText);
      CheckDimValuePosting(PurchLine2, PurchHeader, ErrText);

      PurchLine2.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine2.SETRANGE("Document No.",PurchHeader."No.");
      PurchLine2.SETFILTER(Type,'<>%1',PurchLine2.Type::" ");
      IF PurchLine2.FINDSET THEN
        REPEAT
          IF (PurchHeader.Receive AND (PurchLine2."Qty. to Receive" <> 0)) OR
             (PurchHeader.Invoice AND (PurchLine2."Qty. to Invoice" <> 0)) OR
             (PurchHeader.Ship AND (PurchLine2."Return Qty. to Ship" <> 0))
          THEN BEGIN
            CheckDimComb(PurchLine2, PurchHeader, ErrText);
            CheckDimValuePosting(PurchLine2, PurchHeader, ErrText);
          END
        UNTIL PurchLine2.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckDimComb@30(PurchLine@1000 : Record 39;VAR PurchHeader@1100285002 : Record 38;VAR ErrText@1100285001 : Text[1024]);
    VAR
      DimMgt@1100285000 : Codeunit 408;
    BEGIN
      IF PurchLine."Line No." = 0 THEN
        IF NOT DimMgt.CheckDimIDComb(PurchHeader."Dimension Set ID") THEN
          ErrText :=
            COPYSTR(STRSUBSTNO(Text032,
              PurchHeader."Document Type",PurchHeader."No.",DimMgt.GetDimCombErr), 1, MAXSTRLEN(ErrText));

      IF PurchLine."Line No." <> 0 THEN
        IF NOT DimMgt.CheckDimIDComb(PurchLine."Dimension Set ID") THEN
          ErrText :=
            COPYSTR(STRSUBSTNO(Text033,
              PurchHeader."Document Type",PurchHeader."No.",PurchLine."Line No.",DimMgt.GetDimCombErr), 1, MAXSTRLEN(ErrText));
    END;

    LOCAL PROCEDURE CheckDimValuePosting@28(VAR PurchLine2@1000 : Record 39;VAR PurchHeader@1100285000 : Record 38;VAR ErrText@1100285001 : Text[1024]);
    VAR
      TableIDArr@1002 : ARRAY [10] OF Integer;
      NumberArr@1003 : ARRAY [10] OF Code[20];
      DimMgt@1100285002 : Codeunit 408;
    BEGIN
      IF PurchLine2."Line No." = 0 THEN BEGIN
        TableIDArr[1] := DATABASE::Vendor;
        NumberArr[1] := PurchHeader."Pay-to Vendor No.";
        TableIDArr[3] := DATABASE::"Salesperson/Purchaser";
        NumberArr[3] := PurchHeader."Purchaser Code";
        TableIDArr[4] := DATABASE::Table5071;
        NumberArr[4] := PurchHeader."Campaign No.";
        TableIDArr[5] := DATABASE::"Responsibility Center";
        NumberArr[5] := PurchHeader."Responsibility Center";
        IF NOT DimMgt.CheckDimValuePosting(TableIDArr,NumberArr,PurchHeader."Dimension Set ID") THEN
          ErrText := COPYSTR(STRSUBSTNO(Text034, PurchHeader."Document Type",PurchHeader."No.",DimMgt.GetDimValuePostingErr), 1,
                     MAXSTRLEN(ErrText));
      END ELSE BEGIN
        TableIDArr[1] := DimMgt.TypeToTableID3(PurchLine2.Type);
        NumberArr[1] := PurchLine2."No.";
        TableIDArr[2] := DATABASE::Table167;
        NumberArr[2] := PurchLine2."Job No.";
        TableIDArr[3] := DATABASE::"Work Center";
        NumberArr[3] := PurchLine2."Work Center No.";
        IF NOT DimMgt.CheckDimValuePosting(TableIDArr,NumberArr,PurchLine2."Dimension Set ID") THEN
          ErrText := COPYSTR(STRSUBSTNO(Text035, PurchHeader."Document Type",PurchHeader."No.",PurchLine2."Line No.",
                                         DimMgt.GetDimValuePostingErr), 1, MAXSTRLEN(ErrText));
      END;
    END;

    PROCEDURE ImpHeadCCDocDimToTempDocDim@1100285011(ExfPurchDocHead@1100285000 : Record 12013587);
    VAR
      ExfPurchDocLine2@1100285001 : Record 12013588;
    BEGIN
      ExfPurchDocLine2."Line No." := 0;
      ImpHeadCheckDimComb(ExfPurchDocHead,ExfPurchDocLine2);
      ImpHeadCheckDimValuePosting(ExfPurchDocHead,ExfPurchDocLine2);
    END;

    PROCEDURE ImpLineCCDocDimToTempDocDim@1100285029(ExfPurchDocHead@1100285004 : Record 12013587;ExfPurchDocLine@1100285000 : Record 12013588);
    VAR
      ExfPurchDocLine2@1100285001 : Record 12013588;
    BEGIN
      ExfPurchDocLine2 := ExfPurchDocLine;
      ImpHeadCheckDimComb(ExfPurchDocHead,ExfPurchDocLine2);
      ImpHeadCheckDimValuePosting(ExfPurchDocHead,ExfPurchDocLine2);
    END;

    LOCAL PROCEDURE ImpHeadCheckDimComb@1100285010(ExfPurchDocHead@1100285002 : Record 12013587;ExfPurchDocLine2@1100285001 : Record 12013588);
    VAR
      DimMgt@1100285000 : Codeunit 408;
    BEGIN
      IF ExfPurchDocLine2."Line No." = 0 THEN
        IF NOT DimMgt.CheckDimIDComb(ExfPurchDocHead."Dimension Set ID") THEN
          ERROR(Text032,
            ExfPurchDocHead."Document Type",FORMAT(ExfPurchDocHead."Inbound Document No."),DimMgt.GetDimCombErr);

      IF ExfPurchDocLine2."Line No." <> 0 THEN
        IF NOT DimMgt.CheckDimIDComb(ExfPurchDocLine2."Dimension Set ID") THEN
          ERROR(Text033,
            ExfPurchDocHead."Document Type",FORMAT(ExfPurchDocHead."Inbound Document No."),ExfPurchDocLine2."Line No.",DimMgt.GetDimCombErr);
    END;

    LOCAL PROCEDURE ImpHeadCheckDimValuePosting@1100285009(ExfPurchDocHead@1100285000 : Record 12013587;ExfPurchDocLine2@1100285001 : Record 12013588);
    VAR
      DimMgt@1100285002 : Codeunit 408;
      TableIDArr@1002 : ARRAY [10] OF Integer;
      NumberArr@1003 : ARRAY [10] OF Code[20];
    BEGIN
      IF ExfPurchDocLine2."Line No." = 0 THEN BEGIN
        TableIDArr[1] := DATABASE::Vendor;
        NumberArr[1] := ExfPurchDocHead."Pay-to Vendor No.";
        TableIDArr[2] := DATABASE::"Salesperson/Purchaser";
        NumberArr[2] := ExfPurchDocHead."Purchaser Code";
        TableIDArr[3] := 0;
        NumberArr[3] := '';
        TableIDArr[4] := 0;
        NumberArr[4] := '';
        IF NOT DimMgt.CheckDimValuePosting(TableIDArr,NumberArr,ExfPurchDocHead."Dimension Set ID") THEN
          ERROR(Text034,
            ExfPurchDocHead."Document Type",ExfPurchDocHead."Inbound Document No.",DimMgt.GetDimValuePostingErr);
      END ELSE BEGIN
        TableIDArr[1] := DimMgt.TypeToTableID3(ExfPurchDocLine2.Type);
        NumberArr[1] := ExfPurchDocLine2."No.";
        TableIDArr[2] := DATABASE::Table167;
        NumberArr[2] := ExfPurchDocLine2."Job No.";
        TableIDArr[3] := 0;
        NumberArr[3] := '';
        IF NOT DimMgt.CheckDimValuePosting(TableIDArr,NumberArr,ExfPurchDocLine2."Dimension Set ID") THEN
          ERROR(Text035,
            ExfPurchDocHead."Document Type",ExfPurchDocHead."Inbound Document No.",ExfPurchDocLine2."Line No.",DimMgt.GetDimValuePostingErr);
      END;
    END;

    PROCEDURE UpdateDimFromUserPurch@1100285035(VAR PurchLine@1100285000 : Record 39;ExUserGroup@1100285002 : Record 12013606);
    VAR
      DimValue@1100285003 : Record 349;
      UserGroupDim@1100285004 : Record 12013656;
      TempDimSetEntry@1100285005 : TEMPORARY Record 480;
      DimMgt@1100285006 : Codeunit 408;
      ExFlow@1100285001 : Codeunit 12013601;
      DimFound@1100285007 : Boolean;
    BEGIN
      UserGroupDim.RESET;
      UserGroupDim.SETRANGE("Table ID", DATABASE::"EX User Group");
      UserGroupDim.SETRANGE("No.", ExUserGroup.Code);
      IF NOT UserGroupDim.FINDSET THEN
        EXIT;

      DimMgt.GetDimensionSet(TempDimSetEntry,PurchLine."Dimension Set ID");

      REPEAT
        DimFound := TRUE;

        IF NOT TempDimSetEntry.GET(PurchLine."Dimension Set ID",UserGroupDim."Dimension Code") THEN BEGIN
          IF NOT DimValue.GET(UserGroupDim."Dimension Code",UserGroupDim."Dimension Value Code") THEN
            DimFound := FALSE;

          IF DimValue.Blocked THEN
            DimFound := FALSE;

          IF DimFound THEN BEGIN
            TempDimSetEntry."Dimension Set ID" := 0;
            TempDimSetEntry."Dimension Code" := DimValue."Dimension Code";
            TempDimSetEntry."Dimension Value Code" := DimValue.Code;
            TempDimSetEntry."Dimension Value ID" := DimValue."Dimension Value ID";
            TempDimSetEntry.INSERT;
          END;
        END;
      UNTIL UserGroupDim.NEXT = 0;

      PurchLine."Dimension Set ID" := DimMgt.GetDimensionSetID(TempDimSetEntry);
      DimMgt.UpdateGlobalDimFromDimSetID(PurchLine."Dimension Set ID",PurchLine."Shortcut Dimension 1 Code",PurchLine."Shortcut Dimension 2 Code");
      PurchLine.MODIFY;
      ExFlow.UpdateLine(PurchLine,PurchLine,TRUE);
    END;

    PROCEDURE UpdateDimFromUserExFPurch@1100285032(VAR ExFPurchLine@1100285000 : Record 12013588;ExUserGroup@1100285002 : Record 12013606;CalledFromUpdateMode@1100285001 : Boolean);
    VAR
      DimValue@1100285003 : Record 349;
      UserGroupDim@1100285004 : Record 12013656;
      TempDimSetEntry@1100285005 : TEMPORARY Record 480;
      DimMgt@1100285006 : Codeunit 408;
      DimFound@1100285007 : Boolean;
    BEGIN
      UserGroupDim.RESET;
      UserGroupDim.SETRANGE("Table ID", DATABASE::"EX User Group");
      UserGroupDim.SETRANGE("No.", ExUserGroup.Code);
      IF NOT UserGroupDim.FINDSET THEN
        EXIT;

      DimMgt.GetDimensionSet(TempDimSetEntry,ExFPurchLine."Dimension Set ID");

      REPEAT
        DimFound := TRUE;

        IF NOT TempDimSetEntry.GET(ExFPurchLine."Dimension Set ID",UserGroupDim."Dimension Code") THEN BEGIN
          IF NOT DimValue.GET(UserGroupDim."Dimension Code",UserGroupDim."Dimension Value Code") THEN
            DimFound := FALSE;

          IF DimValue.Blocked THEN
            DimFound := FALSE;

          IF DimFound THEN BEGIN
            TempDimSetEntry."Dimension Set ID" := 0;
            TempDimSetEntry."Dimension Code" := DimValue."Dimension Code";
            TempDimSetEntry."Dimension Value Code" := DimValue.Code;
            TempDimSetEntry."Dimension Value ID" := DimValue."Dimension Value ID";
            TempDimSetEntry.INSERT;
          END;
        END;
      UNTIL UserGroupDim.NEXT = 0;

      ExFPurchLine."Dimension Set ID" := DimMgt.GetDimensionSetID(TempDimSetEntry);
      DimMgt.UpdateGlobalDimFromDimSetID(ExFPurchLine."Dimension Set ID",ExFPurchLine."Shortcut Dimension 1 Code",ExFPurchLine."Shortcut Dimension 2 Code");
      IF NOT CalledFromUpdateMode THEN
        ExFPurchLine.MODIFY;
    END;

    PROCEDURE UpdateDimFromRefExFPurch@1100285006(VAR ExFPurchHeader@1100285000 : Record 12013587;ExReference@1100285002 : Record 12013632);
    VAR
      DimValue@1100285003 : Record 349;
      ExFlowDefDim@1100285004 : Record 12013656;
      TempDimSetEntry@1100285005 : TEMPORARY Record 480;
      ExfPurchDocLine@1100285001 : Record 12013588;
      DimMgt@1100285006 : Codeunit 408;
      ExFWorkFlowMgt@1100285008 : Codeunit 12013593;
      DimFound@1100285007 : Boolean;
    BEGIN
      ExFlowDefDim.RESET;
      ExFlowDefDim.SETRANGE("Table ID", DATABASE::"EX Reference");
      ExFlowDefDim.SETRANGE("No.", ExReference.Reference);
      ExFlowDefDim.SETRANGE("No. 2", ExReference."Vendor No.");
      IF NOT ExFlowDefDim.FINDSET THEN
        EXIT;

      DimMgt.GetDimensionSet(TempDimSetEntry,ExFPurchHeader."Dimension Set ID");
      REPEAT
        DimFound := TRUE;

        IF NOT TempDimSetEntry.GET(ExFPurchHeader."Dimension Set ID",ExFlowDefDim."Dimension Code") THEN BEGIN
          IF NOT DimValue.GET(ExFlowDefDim."Dimension Code",ExFlowDefDim."Dimension Value Code") THEN
            DimFound := FALSE;

          IF DimValue.Blocked THEN
            DimFound := FALSE;

          IF DimFound THEN BEGIN
            TempDimSetEntry."Dimension Set ID" := 0;
            TempDimSetEntry."Dimension Code" := DimValue."Dimension Code";
            TempDimSetEntry."Dimension Value Code" := DimValue.Code;
            TempDimSetEntry."Dimension Value ID" := DimValue."Dimension Value ID";
            TempDimSetEntry.INSERT;
          END;
        END;
      UNTIL ExFlowDefDim.NEXT = 0;

      ExFPurchHeader."Dimension Set ID" := DimMgt.GetDimensionSetID(TempDimSetEntry);
      DimMgt.UpdateGlobalDimFromDimSetID(ExFPurchHeader."Dimension Set ID",ExFPurchHeader."Shortcut Dimension 1 Code",ExFPurchHeader."Shortcut Dimension 2 Code");
      ExFPurchHeader.MODIFY;

      ExfPurchDocLine.RESET;
      ExfPurchDocLine.SETRANGE("Inbound Document No.", ExFPurchHeader."Inbound Document No.");
      IF ExfPurchDocLine.FINDSET(TRUE) THEN BEGIN
        REPEAT
          IF ExfPurchDocLine."Dimension Set ID" <> ExFPurchHeader."Dimension Set ID" THEN BEGIN
            ExfPurchDocLine."Dimension Set ID" := ExFPurchHeader."Dimension Set ID";
            DimMgt.UpdateGlobalDimFromDimSetID(
              ExfPurchDocLine."Dimension Set ID",ExfPurchDocLine."Shortcut Dimension 1 Code",ExfPurchDocLine."Shortcut Dimension 2 Code");
            ExfPurchDocLine.MODIFY;
          END;
        UNTIL ExfPurchDocLine.NEXT = 0;

        ExFWorkFlowMgt.PrePostUpdateApprovers(ExFPurchHeader);
      END;
    END;

    PROCEDURE ShowShortcutDimCode@27(DocType@1100285004 : Integer;DocNo@1100285005 : Code[20];LineNo@1100285006 : Integer;VAR ShortcutDimCode@1000 : ARRAY [8] OF Code[20];VAR GLSetupShortcutDimCode@1100285002 : ARRAY [8] OF Code[20]);
    VAR
      ExDocLineDim@1100285000 : Record 12013611;
      i@1100285001 : Integer;
    BEGIN
      ExDocLineDim.RESET;
      ExDocLineDim.SETCURRENTKEY("Document No.");
      ExDocLineDim.SETRANGE("Document Type", DocType);
      ExDocLineDim.SETRANGE("Document No.", DocNo);
      ExDocLineDim.SETRANGE("Line No.", LineNo);
      FOR i := 1 TO 8 DO BEGIN
        ShortcutDimCode[i] := '';
        IF GLSetupShortcutDimCode[i] <> '' THEN BEGIN
          ExDocLineDim.SETRANGE("Dimension Code", GLSetupShortcutDimCode[i]);
          IF ExDocLineDim.FINDFIRST THEN
            ShortcutDimCode[i] := ExDocLineDim."Dimension Value";
        END;
      END;
    END;

    PROCEDURE ShowShortcutDimCodePL@1100285008(TableNo@1100285006 : Integer;DocType@1100285005 : Integer;DocNo@1100285004 : Code[20];LineNo@1100285003 : Integer;VAR ShortcutDimCode@1000 : ARRAY [8] OF Code[20];VAR GLSetupShortcutDimCode@1100285002 : ARRAY [8] OF Code[20]);
    VAR
      PurchLine@1100285000 : Record 39;
      DimSetEntry@1100285007 : Record 480;
      i@1100285001 : Integer;
    BEGIN
      // Change Journal
      IF TableNo <> DATABASE::"Purchase Line" THEN
        ERROR(Text100,TableNo);

      CLEAR(ShortcutDimCode);
      IF PurchLine.GET(DocType,DocNo,LineNo) THEN BEGIN
        FOR i := 1 TO 8 DO BEGIN
          ShortcutDimCode[i] := '';
          IF GLSetupShortcutDimCode[i] <> '' THEN
            IF DimSetEntry.GET(PurchLine."Dimension Set ID",GLSetupShortcutDimCode[i]) THEN
              ShortcutDimCode[i] := DimSetEntry."Dimension Value Code";
        END;
      END;
    END;

    PROCEDURE CreateQuoteCopyDimension@1100285012(DocLine@1100285014 : Record 12013609;VAR PurchLine@1100285015 : Record 39;PurchHeader@1100285005 : Record 38;VAR TempDimValue@1100285004 : TEMPORARY Record 349);
    VAR
      DimSetEntry@1100285000 : Record 480;
      DimValue@1100285020 : Record 349;
      DocLineDim2@1100285001 : Record 12013611;
      GLSetup@1100285002 : Record 98;
      DocLineDim@1100285016 : Record 12013611;
      Column@1100285019 : Record 12013661;
      ImportData@1100285010 : Codeunit 12013623;
      ExFlow@1100285017 : Codeunit 12013601;
      i@1100285007 : Integer;
      ColumnID@1100285011 : Integer;
      DoNotInsert@1100285003 : Boolean;
      RecordRef@1100285008 : RecordRef;
      FldRef@1100285009 : FieldRef;
    BEGIN
      GLSetup.GET;

      DimSetEntry.RESET;
      DimSetEntry.SETRANGE("Dimension Set ID", PurchHeader."Dimension Set ID");
      IF DimSetEntry.FINDSET THEN
        REPEAT
          DocLineDim.RESET;
          DocLineDim.SETCURRENTKEY("Document Line ID");
          DocLineDim.SETRANGE("Document Line ID", DocLine.ID);
          DocLineDim.SETRANGE("Dimension Code", DimSetEntry."Dimension Code");
          IF NOT DocLineDim.FINDFIRST THEN BEGIN
            // Copy Dimension from Header to line
            DimValue.GET(DimSetEntry."Dimension Code",DimSetEntry."Dimension Value Code");
            UpdateDimFromPurchLine(PurchLine."Dimension Set ID",DimValue,PurchLine."Shortcut Dimension 1 Code",PurchLine."Shortcut Dimension 2 Code");

            ColumnID := ExFlow.GetColumnID(DimValue."Dimension Code");

            IF ColumnID <> 0 THEN
              IF Column.GET(ColumnID) THEN
                IF Column."Dimension Code" <> '' THEN BEGIN
                  DocLineDim2.INIT;
                  DocLineDim2.ID := 0;
                  DocLineDim2."Document Type" := PurchLine."Document Type";
                  DocLineDim2."Document No." := PurchLine."Document No.";
                  DocLineDim2."Line No." := PurchLine."Line No.";
                  DocLineDim2."Dimension Code" := DimValue."Dimension Code";
                  DocLineDim2."Dimension Value" := DimValue.Code;
                  DocLineDim2."Column ID" := ColumnID;
                  DocLineDim2."Document Line ID" := DocLine.ID;
                  DocLineDim2."Document ID" := DocLine."Document ID";
                  IF DocLineDim2."Dimension Value" <> '' THEN
                    DocLineDim2.INSERT(FALSE);
                END;
          END;
        UNTIL DimSetEntry.NEXT = 0;

      DimSetEntry.RESET;
      DimSetEntry.SETRANGE("Dimension Set ID", PurchLine."Dimension Set ID");
      IF DimSetEntry.FINDSET THEN
        REPEAT
          DocLineDim.RESET;
          DocLineDim.SETCURRENTKEY("Document Line ID");
          DocLineDim.SETRANGE("Document Line ID", DocLine.ID);
          DocLineDim.SETRANGE("Dimension Code", DimSetEntry."Dimension Code");
          IF NOT DocLineDim.FINDFIRST THEN BEGIN
            // Copy Dimension from Purchase line to doc line - validation of for instance job can add dimensions
            DimValue.GET(DimSetEntry."Dimension Code",DimSetEntry."Dimension Value Code");
            UpdateDimFromPurchLine(PurchLine."Dimension Set ID",DimValue,PurchLine."Shortcut Dimension 1 Code",PurchLine."Shortcut Dimension 2 Code");

            ColumnID := ExFlow.GetColumnID(DimValue."Dimension Code");

            IF ColumnID <> 0 THEN
              IF Column.GET(ColumnID) THEN
                IF Column."Dimension Code" <> '' THEN BEGIN
                  DocLineDim2.INIT;
                  DocLineDim2.ID := 0;
                  DocLineDim2."Document Type" := PurchLine."Document Type";
                  DocLineDim2."Document No." := PurchLine."Document No.";
                  DocLineDim2."Line No." := PurchLine."Line No.";
                  DocLineDim2."Dimension Code" := DimValue."Dimension Code";
                  DocLineDim2."Dimension Value" := DimValue.Code;
                  DocLineDim2."Column ID" := ColumnID;
                  DocLineDim2."Document Line ID" := DocLine.ID;
                  DocLineDim2."Document ID" := DocLine."Document ID";
                  IF DocLineDim2."Dimension Value" <> '' THEN
                    DocLineDim2.INSERT(FALSE);
                END;
          END;
        UNTIL DimSetEntry.NEXT = 0;

      TempDimValue.RESET;
      TempDimValue.DELETEALL;

      DocLineDim.RESET;
      DocLineDim.SETCURRENTKEY("Document Line ID");
      DocLineDim.SETRANGE("Document Line ID",DocLine.ID);
      IF DocLineDim.FINDSET THEN BEGIN
        REPEAT
          DoNotInsert := FALSE;

          Column.GET(DocLineDim."Column ID");
          IF Column."Dimension Code" <> '' THEN BEGIN
            TempDimValue."Dimension Code" := DocLineDim."Dimension Code";
            TempDimValue.Code := DocLineDim."Dimension Value";
            TempDimValue.INSERT;

            InsertDocDimFromDocLineDim(DocLineDim,PurchLine,DoNotInsert,GLSetup);
          END
          ELSE BEGIN
            IF (DocLineDim."Dimension Value" <> '') AND (Column."Purchase Line Field ID" <> 0) THEN BEGIN
              PurchLine.MODIFY;
              RecordRef.GETTABLE(PurchLine);
              FldRef := RecordRef.FIELD(Column."Purchase Line Field ID");
              IF Column."Is Free Text" THEN
                ImportData.UpdateRecord(FldRef,DocLineDim."Dimension Desc.",FALSE,
                                      DATABASE::"Purchase Line",Column."Purchase Line Field ID",-1)
              ELSE
              ImportData.UpdateRecord(FldRef,DocLineDim."Dimension Value",FALSE,
                                      DATABASE::"Purchase Line",Column."Purchase Line Field ID",-1);
              RecordRef.MODIFY;
              PurchLine.GET(PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.");
            END;
          END;

          IF DoNotInsert THEN BEGIN
            DocLineDim2.GET(DocLineDim.ID);
            DocLineDim2.DELETE;
          END
          ELSE BEGIN
            DocLineDim2.GET(DocLineDim.ID);
            DocLineDim2."Document Type" := PurchLine."Document Type";
            DocLineDim2."Document No." := PurchLine."Document No.";
            DocLineDim2."Line No." := PurchLine."Line No.";
            DocLineDim2.MODIFY;
          END;
        UNTIL DocLineDim.NEXT = 0;

        PurchLine.MODIFY(FALSE);
      END;
    END;

    PROCEDURE InsertDocDimFromDocLineDim@1100285022(DocLineDim@1100285000 : Record 12013611;VAR PurchLine@1100285003 : Record 39;VAR DoNotInsert@1100285001 : Boolean;GLSetup@1100285005 : Record 98);
    VAR
      DimToGLMapping@1100285002 : Record 12013646;
      DimValue@1100285004 : Record 349;
    BEGIN
      IF DocLineDim."Dimension Value" = '' THEN
        EXIT;

      DimToGLMapping.RESET;
      DimToGLMapping.SETRANGE("Dimension Code", DocLineDim."Dimension Code");
      DimToGLMapping.SETRANGE("Dimension Value Code", DocLineDim."Dimension Value");
      DimToGLMapping.SETRANGE("Do Not Insert Into NAV", TRUE);
      DoNotInsert := DimToGLMapping.FINDFIRST;
      IF NOT DoNotInsert THEN BEGIN
        DimValue.GET(DocLineDim."Dimension Code",DocLineDim."Dimension Value");

        UpdateDimFromPurchLine(PurchLine."Dimension Set ID",DimValue,PurchLine."Shortcut Dimension 1 Code",PurchLine."Shortcut Dimension 2 Code");
      END;
    END;

    PROCEDURE ShowDocLineDim@1100285013(DocType@1100285005 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order,Posted Invoice,Posted Credit Memo,Requisition';DocNo@1100285006 : Code[20];LineNo@1100285007 : Integer;DimSetID@1100285010 : Integer);
    VAR
      DocLineDim@1100285000 : Record 12013611;
      PostedDocLineDim@1100285012 : Record 12013629;
      TempDocLineDim@1100285002 : TEMPORARY Record 12013611;
      Column@1100285003 : Record 12013661;
      DocLine@1100285004 : Record 12013609;
      DimSetEntry@1100285001 : Record 480;
      ExFlow@1100285009 : Codeunit 12013601;
      ShowPostedDocumentLineDime@1100285013 : Page 12013616;
      ColumnID@1100285008 : Integer;
      TempID@1100285011 : Integer;
    BEGIN
      // Update Purchase Line
      TempDocLineDim.RESET;
      TempDocLineDim.DELETEALL;

      IF DocType IN [DocType::"Posted Invoice",DocType::"Posted Credit Memo"] THEN BEGIN
        PostedDocLineDim.RESET;
        PostedDocLineDim.SETCURRENTKEY("Document No.");
        PostedDocLineDim.SETRANGE("Document Type", DocType);
        PostedDocLineDim.SETRANGE("Document No.", DocNo);
        PostedDocLineDim.SETRANGE("Line No.", LineNo);
        IF PostedDocLineDim.FINDSET THEN
          REPEAT
            IF Column.GET(PostedDocLineDim."Column ID") THEN
              IF Column."Dimension Code" <> '' THEN
                BEGIN
                  TempDocLineDim.INIT;
                  TempDocLineDim.TRANSFERFIELDS(PostedDocLineDim);
                  TempDocLineDim.INSERT;
                END;
          UNTIL PostedDocLineDim.NEXT = 0;
      END
      ELSE BEGIN
        DocLineDim.RESET;
        DocLineDim.SETCURRENTKEY("Document No.");
        DocLineDim.SETRANGE("Document Type", DocType);
        DocLineDim.SETRANGE("Document No.", DocNo);
        DocLineDim.SETRANGE("Line No.", LineNo);
        IF DocLineDim.FINDSET THEN
          REPEAT
            IF Column.GET(DocLineDim."Column ID") THEN
              IF Column."Dimension Code" <> '' THEN
                BEGIN
                  TempDocLineDim.INIT;
                  TempDocLineDim.TRANSFERFIELDS(DocLineDim);
                  TempDocLineDim.INSERT;
                END;
          UNTIL DocLineDim.NEXT = 0;
      END;

      DimSetEntry.RESET;
      DimSetEntry.SETRANGE("Dimension Set ID", DimSetID);
      IF DimSetEntry.FINDSET THEN
        REPEAT
          ColumnID := ExFlow.GetColumnID(DimSetEntry."Dimension Code");
          IF ColumnID <> 0 THEN BEGIN
            TempDocLineDim.SETRANGE("Dimension Code",DimSetEntry."Dimension Code");
            IF NOT TempDocLineDim.FIND('-') THEN BEGIN
              TempDocLineDim.INIT;
              TempDocLineDim.ID := TempID;
              TempID := TempID - 1;
              TempDocLineDim."Document Type" := DocType;
              TempDocLineDim."Document No." := DocNo;
              TempDocLineDim."Line No." := LineNo;
              TempDocLineDim."Dimension Code" := DimSetEntry."Dimension Code";
              TempDocLineDim.INSERT;
            END;
          END;
        UNTIL DimSetEntry.NEXT = 0;

      TempDocLineDim.RESET;
      IF NOT TempDocLineDim.FIND('-') THEN BEGIN
        TempDocLineDim."Document Type" := DocType;
        TempDocLineDim."Document No." := DocNo;
        TempDocLineDim."Line No." := LineNo;
      END;

      IF DocType IN [DocType::"Posted Invoice",DocType::"Posted Credit Memo"] THEN BEGIN
        CLEAR(ShowPostedDocumentLineDime);
        ShowPostedDocumentLineDime.SetTempRecords(TempDocLineDim);
        ShowPostedDocumentLineDime.RUNMODAL;
      END
      ELSE
        PAGE.RUNMODAL(PAGE::"Show Document Line Dimensions",TempDocLineDim);
    END;

    PROCEDURE DimensionChanged@1100285014(PurchLine@1100285000 : Record 39) : Boolean;
    VAR
      DimSetEntry@1100285002 : Record 480;
      DocLineDim@1100285001 : Record 12013611;
      Column@1100285003 : Record 12013661;
    BEGIN
      DocLineDim.RESET;
      DocLineDim.SETCURRENTKEY("Document No.");
      DocLineDim.SETRANGE("Document Type",PurchLine."Document Type");
      DocLineDim.SETRANGE("Document No.",PurchLine."Document No.");
      DocLineDim.SETRANGE("Line No.",PurchLine."Line No.");
      IF DocLineDim.FINDSET THEN
        REPEAT
          IF Column.GET(DocLineDim."Column ID") THEN
            IF Column."Dimension Code" <> '' THEN
              BEGIN
                IF DimSetEntry.GET(PurchLine."Dimension Set ID",DocLineDim."Dimension Code") THEN
                  BEGIN
                    IF DimSetEntry."Dimension Value Code" <> DocLineDim."Dimension Value" THEN
                      EXIT(TRUE);
                  END
                ELSE
                  EXIT(TRUE);
              END;
        UNTIL DocLineDim.NEXT = 0;

      DimSetEntry.RESET;
      DimSetEntry.SETRANGE("Dimension Set ID", PurchLine."Dimension Set ID");
      IF DimSetEntry.FINDSET THEN
        REPEAT
          IF NOT DocLineDim.RetrieveRecord(DocLineDim, PurchLine."Document Type", PurchLine."Document No.",
                                           PurchLine."Line No.", DimSetEntry."Dimension Code") THEN
            BEGIN
              Column.RESET;
              Column.SETCURRENTKEY(Code);
              Column.SETFILTER(Code, DimSetEntry."Dimension Code");
              IF Column.FIND('-') THEN
                EXIT(TRUE);
            END;
        UNTIL DimSetEntry.NEXT = 0;

      EXIT(FALSE);
    END;

    PROCEDURE UpdateDocLineDimensions@1100285015(ChangeJournalLine@1100285003 : Record 12013618;NewLineNo@1100285007 : Integer;VAR PurchHeader@1100285008 : Record 38;AppSetup@1100285017 : Record 12013601);
    VAR
      DimSetEntry@1100285002 : Record 480;
      DimValue@1100285011 : Record 349;
      DocLineDim@1100285000 : Record 12013611;
      DocLineDim2@1100285012 : Record 12013611;
      ImportData@1100285015 : Codeunit 12013623;
      Index@1100285001 : Integer;
      PurchLine@1100285004 : Record 39;
      ColumnID@1100285006 : Integer;
      Column@1100285005 : Record 12013661;
      DimToGLMapping@1100285010 : Record 12013646;
      DoNotInsert@1100285009 : Boolean;
      RecordRef@1100285013 : RecordRef;
      FldRef@1100285014 : FieldRef;
      ExFlow@1100285016 : Codeunit 12013601;
    BEGIN
      // Update purchase line
      PurchLine.GET(ChangeJournalLine."Document Type",ChangeJournalLine."Document No.",NewLineNo);

      DimSetEntry.RESET;
      DimSetEntry.SETRANGE("Dimension Set ID", PurchLine."Dimension Set ID");
      IF DimSetEntry.FINDSET THEN
        REPEAT
          DocLineDim.RESET;
          DocLineDim.SETCURRENTKEY("Document No.");
          DocLineDim.SETRANGE("Document Type",ChangeJournalLine."Document Type");
          DocLineDim.SETRANGE("Document No.",ChangeJournalLine."Document No.");
          DocLineDim.SETRANGE("Line No.", NewLineNo);
          DocLineDim.SETRANGE("Dimension Code", DimSetEntry."Dimension Code");
          IF NOT DocLineDim.FINDFIRST THEN BEGIN
            ColumnID := ExFlow.GetColumnID(DimSetEntry."Dimension Code");
            IF ColumnID <> 0 THEN BEGIN
              Column.GET(ColumnID);
              IF Column."Dimension Code" <> '' THEN BEGIN
                DimValue."Dimension Code" := DimSetEntry."Dimension Code";
                DimValue.Code := '';
                UpdateDimFromPurchLine(PurchLine."Dimension Set ID",DimValue,PurchLine."Shortcut Dimension 1 Code",PurchLine."Shortcut Dimension 2 Code");
                PurchLine.MODIFY(FALSE);
              END;
            END;
          END;
        UNTIL DimSetEntry.NEXT = 0;

      DocLineDim.RESET;
      DocLineDim.SETCURRENTKEY("Document No.");
      DocLineDim.SETRANGE("Document Type",ChangeJournalLine."Document Type");
      DocLineDim.SETRANGE("Document No.",ChangeJournalLine."Document No.");
      DocLineDim.SETRANGE("Line No.", NewLineNo);
      IF DocLineDim.FINDSET(TRUE) THEN
        REPEAT
          ExFlow.GetDimIndex(DocLineDim."Dimension Code", Index);
          ColumnID := ExFlow.GetColumnID(DocLineDim."Dimension Code");
          Column.GET(ColumnID);

          IF Column."Dimension Code" <> '' THEN
            BEGIN
              DoNotInsert := FALSE;

              IF DimSetEntry.GET(PurchLine."Dimension Set ID",DocLineDim."Dimension Code") THEN
                BEGIN
                  IF DimSetEntry."Dimension Value Code" <> DocLineDim."Dimension Value" THEN
                    BEGIN
                      IF DocLineDim."Dimension Value" = '' THEN
                        BEGIN
                          DimValue."Dimension Code" := DimSetEntry."Dimension Code";
                          DimValue.Code := '';
                          UpdateDimFromPurchLine(PurchLine."Dimension Set ID",DimValue,PurchLine."Shortcut Dimension 1 Code",PurchLine."Shortcut Dimension 2 Code");
                          PurchLine.MODIFY;

                          DocLineDim2.GET(DocLineDim.ID);
                          DocLineDim2.DELETE;
                        END
                      ELSE
                        BEGIN
                          DimValue.GET(DocLineDim."Dimension Code", DocLineDim."Dimension Value");
                          UpdateDimFromPurchLine(PurchLine."Dimension Set ID",DimValue,PurchLine."Shortcut Dimension 1 Code",PurchLine."Shortcut Dimension 2 Code");
                          PurchLine.MODIFY;
                        END;
                    END;
                END
              ELSE
                IF DocLineDim."Dimension Value" <> '' THEN
                  BEGIN
                    DimToGLMapping.RESET;
                    DimToGLMapping.SETRANGE("Dimension Code", DocLineDim."Dimension Code");
                    DimToGLMapping.SETRANGE("Dimension Value Code", DocLineDim."Dimension Value");
                    DimToGLMapping.SETRANGE("Do Not Insert Into NAV", TRUE);
                    DoNotInsert := DimToGLMapping.FINDFIRST;
                    IF NOT DoNotInsert THEN BEGIN
                      DimValue.GET(DocLineDim."Dimension Code", DocLineDim."Dimension Value");
                      UpdateDimFromPurchLine(PurchLine."Dimension Set ID",DimValue,PurchLine."Shortcut Dimension 1 Code",PurchLine."Shortcut Dimension 2 Code");
                      PurchLine.MODIFY;
                    END;
                  END;
            END
            ELSE BEGIN
              IF (DocLineDim."Dimension Value" <> '') AND (Column."Purchase Line Field ID" <> 0) THEN BEGIN
                RecordRef.GETTABLE(PurchLine);
                FldRef := RecordRef.FIELD(Column."Purchase Line Field ID");
                ImportData.UpdateRecord(FldRef,DocLineDim."Dimension Value",FALSE,
                                        DATABASE::"Purchase Line",Column."Purchase Line Field ID",-1);
                RecordRef.MODIFY;
              END;
            END;
        UNTIL DocLineDim.NEXT = 0;

      IF AppSetup."Copy Line Dimensions to Header" THEN
        UpdateDimHeader(PurchLine,PurchHeader);

      ExFlow.UpdateLine(PurchLine,PurchLine,TRUE);
    END;

    LOCAL PROCEDURE UpdateDimHeader@1100285016(PurchLine@1100285000 : Record 39;VAR PurchHeader@1100285006 : Record 38);
    VAR
      DimSetEntry@1100285002 : Record 480;
      TempDimValue@1100285001 : TEMPORARY Record 349;
      DimValue@1100285003 : Record 349;
    BEGIN
      TempDimValue.RESET;
      TempDimValue.DELETEALL;

      DimSetEntry.RESET;
      DimSetEntry.SETRANGE("Dimension Set ID", PurchLine."Dimension Set ID");
      IF DimSetEntry.FINDSET THEN BEGIN
        REPEAT
          TempDimValue.SETRANGE("Dimension Code", DimSetEntry."Dimension Code");
          IF NOT TempDimValue.FIND('-') THEN BEGIN
            TempDimValue."Dimension Code" := DimSetEntry."Dimension Code";
            TempDimValue.Code := DimSetEntry."Dimension Value Code";
            TempDimValue.INSERT;
          END;
        UNTIL DimSetEntry.NEXT = 0;

        TempDimValue.RESET;
        IF TempDimValue.FIND('-') THEN
          REPEAT
            // Make sure all the lines have the same dim value
            DimSetEntry.RESET;
            DimSetEntry.SETRANGE("Dimension Set ID", PurchLine."Dimension Set ID");
            DimSetEntry.SETRANGE("Dimension Code", TempDimValue."Dimension Code");
            DimSetEntry.SETFILTER("Dimension Value Code", '<>%1', TempDimValue.Code);
            IF NOT DimSetEntry.FINDFIRST THEN BEGIN
              DimValue.GET(TempDimValue."Dimension Code", TempDimValue.Code);
              UpdateDimFromPurchLine(PurchHeader."Dimension Set ID",DimValue,PurchHeader."Shortcut Dimension 1 Code",PurchHeader."Shortcut Dimension 2 Code");
              PurchHeader.MODIFY;
            END;
          UNTIL TempDimValue.NEXT = 0;
      END;
    END;

    PROCEDURE UpdateDimFromPurchLine@1100285021(VAR DimSetID@1100285000 : Integer;DimValue@1100285001 : Record 349;VAR ShortCutDimCode1@1100285004 : Code[20];VAR ShortCutDimCode2@1100285005 : Code[20]);
    VAR
      TempDimSetEntry@1100285003 : TEMPORARY Record 480;
      DimMgt@1100285002 : Codeunit 408;
    BEGIN
      DimMgt.GetDimensionSet(TempDimSetEntry,DimSetID);
      IF TempDimSetEntry.GET(TempDimSetEntry."Dimension Set ID",DimValue."Dimension Code") THEN
        TempDimSetEntry.DELETE;

      IF DimValue.Code <> '' THEN BEGIN
        TempDimSetEntry."Dimension Set ID" := 0;
        TempDimSetEntry."Dimension Code" := DimValue."Dimension Code";
        TempDimSetEntry."Dimension Value Code" := DimValue.Code;
        TempDimSetEntry."Dimension Value ID" := DimValue."Dimension Value ID";
        TempDimSetEntry.INSERT;
      END;

      DimSetID := DimMgt.GetDimensionSetID(TempDimSetEntry);
      DimMgt.UpdateGlobalDimFromDimSetID(DimSetID,ShortCutDimCode1,ShortCutDimCode2);
    END;

    PROCEDURE CopyPurchLineDimToTemp@1100285018(PurchLine@1100285000 : Record 39);
    BEGIN
      GlobalTempPurchLine.RESET;
      GlobalTempPurchLine.SETRANGE("Document Type", PurchLine."Document Type");
      GlobalTempPurchLine.SETRANGE("Document No.", PurchLine."Document No.");
      GlobalTempPurchLine.SETRANGE("Line No.", PurchLine."Line No.");
      IF GlobalTempPurchLine.FIND('-') THEN BEGIN
        GlobalTempPurchLine."Dimension Set ID" := PurchLine."Dimension Set ID";
        GlobalTempPurchLine.MODIFY;
      END
      ELSE BEGIN
        GlobalTempPurchLine."Document Type" := PurchLine."Document Type";
        GlobalTempPurchLine."Document No." := PurchLine."Document No.";
        GlobalTempPurchLine."Line No." := PurchLine."Line No.";
        GlobalTempPurchLine."Dimension Set ID" := PurchLine."Dimension Set ID";
        GlobalTempPurchLine.INSERT;
      END;
    END;

    PROCEDURE UpdateDimHeaderImportWorksheet@1100285025(VAR ExFPurchHeader@1100285006 : Record 12013587);
    VAR
      DimSetEntry@1100285003 : Record 480;
      TempDimValue@1100285002 : TEMPORARY Record 349;
      DimValue@1100285001 : Record 349;
      ExFPurchLine@1100285000 : Record 12013588;
      DiffDimFound@1100285004 : Boolean;
    BEGIN
      TempDimValue.RESET;
      TempDimValue.DELETEALL;

      DiffDimFound := FALSE;
      ExFPurchLine.RESET;
      ExFPurchLine.SETRANGE("Inbound Document No.", ExFPurchHeader."Inbound Document No.");
      IF ExFPurchLine.FINDSET THEN BEGIN
        REPEAT
          IF ExFPurchLine."Dimension Set ID" <> 0 THEN BEGIN
            DimSetEntry.RESET;
            DimSetEntry.SETRANGE("Dimension Set ID", ExFPurchLine."Dimension Set ID");
            IF DimSetEntry.FINDSET THEN
              REPEAT
                TempDimValue.SETRANGE("Dimension Code", DimSetEntry."Dimension Code");
                IF NOT TempDimValue.FIND('-') THEN BEGIN
                  TempDimValue."Dimension Code" := DimSetEntry."Dimension Code";
                  TempDimValue.Code := DimSetEntry."Dimension Value Code";
                  TempDimValue.INSERT;
                END
                ELSE BEGIN
                  // Make sure all the lines have the same dim value
                  DiffDimFound := TempDimValue.Code <> DimSetEntry."Dimension Value Code";
                END;
              UNTIL (DimSetEntry.NEXT = 0) OR DiffDimFound;
          END;
        UNTIL (ExFPurchLine.NEXT = 0) OR DiffDimFound;

        IF NOT DiffDimFound THEN BEGIN
          TempDimValue.RESET;
          IF TempDimValue.FIND('-') THEN
            REPEAT
              DimValue.GET(TempDimValue."Dimension Code", TempDimValue.Code);
              UpdateDimFromPurchLine(ExFPurchHeader."Dimension Set ID",DimValue,ExFPurchHeader."Shortcut Dimension 1 Code",ExFPurchHeader."Shortcut Dimension 2 Code");
              ExFPurchHeader.MODIFY;
            UNTIL TempDimValue.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE CopyTempDimToPurchLine@1100285019(VAR PurchLine@1100285000 : Record 39;CopyAllFromTemp@1100285002 : Boolean);
    VAR
      DimMgt@1100285001 : Codeunit 408;
    BEGIN
      GlobalTempPurchLine.RESET;
      IF NOT CopyAllFromTemp THEN BEGIN
        GlobalTempPurchLine.SETRANGE("Document Type", PurchLine."Document Type");
        GlobalTempPurchLine.SETRANGE("Document No.", PurchLine."Document No.");
        GlobalTempPurchLine.SETRANGE("Line No.", PurchLine."Line No.");
      END;
      IF NOT GlobalTempPurchLine.FIND('-') THEN
        EXIT;

      PurchLine."Dimension Set ID" := GlobalTempPurchLine."Dimension Set ID";
      DimMgt.UpdateGlobalDimFromDimSetID(PurchLine."Dimension Set ID",PurchLine."Shortcut Dimension 1 Code",PurchLine."Shortcut Dimension 2 Code");
      PurchLine.MODIFY;
    END;

    PROCEDURE AddDocDimToJnlLineDim@1100285020(VAR GenJnlLine@1100285003 : Record 81;DimCode@1100285000 : Code[20];DimValue@1100285004 : Code[20]);
    VAR
      TempDimSetEntry@1100285001 : TEMPORARY Record 480;
      DimValueRec@1100285002 : Record 349;
      DimMgt@1100285005 : Codeunit 408;
      TempDimSetID@1100285006 : Integer;
    BEGIN
      IF NOT DimValueRec.GET(DimCode,DimValue) THEN
        EXIT;

      IF GenJnlLine."Dimension Set ID" = 0 THEN BEGIN
        IF DimValueRec.Code <> '' THEN BEGIN
          TempDimSetEntry.INIT;
          TempDimSetEntry."Dimension Set ID" := 0;
          TempDimSetEntry."Dimension Code" := DimValueRec."Dimension Code";
          TempDimSetEntry."Dimension Value Code" := DimValueRec.Code;
          TempDimSetEntry."Dimension Value ID" := DimValueRec."Dimension Value ID";
          TempDimSetEntry.INSERT;
        END;
      END
      ELSE BEGIN
        DimMgt.GetDimensionSet(TempDimSetEntry,GenJnlLine."Dimension Set ID");
        IF TempDimSetEntry.GET(TempDimSetEntry."Dimension Set ID",DimCode) THEN
          TempDimSetEntry.DELETE;

        IF DimValueRec.Code <> '' THEN BEGIN
          TempDimSetEntry."Dimension Set ID" := 0;
          TempDimSetEntry."Dimension Code" := DimValueRec."Dimension Code";
          TempDimSetEntry."Dimension Value Code" := DimValueRec.Code;
          TempDimSetEntry."Dimension Value ID" := DimValueRec."Dimension Value ID";
          TempDimSetEntry.INSERT;
        END;
      END;

      TempDimSetID := DimMgt.GetDimensionSetID(TempDimSetEntry);
      DimMgt.UpdateGlobalDimFromDimSetID(TempDimSetID,GenJnlLine."Shortcut Dimension 1 Code",GenJnlLine."Shortcut Dimension 2 Code");
      GenJnlLine."Dimension Set ID" := TempDimSetID;
      GenJnlLine.MODIFY;
    END;

    PROCEDURE OpenExcel@1100285030(VAR TempExcelBuffer@1100285000 : Record 370;ReportName@1100285001 : Text[50]);
    BEGIN
      TempExcelBuffer.CreateBookAndOpenExcel('','',ReportName,COMPANYNAME,USERID);
    END;

    PROCEDURE ClearFixedDimCode@1100285023(PurchaseLine@1100285003 : Record 39;VAR FixedDimCode@1100285002 : ARRAY [8] OF Code[20];VAR FixedDimValue@1100285001 : ARRAY [8] OF Code[20];VAR i@1100285004 : Integer);
    VAR
      DimSetEntry@1100285000 : Record 480;
    BEGIN
      DimSetEntry.RESET;
      DimSetEntry.SETRANGE("Dimension Set ID", PurchaseLine."Dimension Set ID");
      DimSetEntry.SETRANGE("Dimension Code",FixedDimCode[i]);
      IF DimSetEntry.FINDFIRST THEN BEGIN
        CLEAR(FixedDimCode);
        CLEAR(FixedDimValue);
        i := 8;
      END;
    END;

    PROCEDURE CreatePurchLine@1100285034(VAR PurchLine@1100285010 : Record 39;VAR OldPurchLine@1100285009 : Record 39);
    VAR
      ExFlowSetup@1100285003 : Record 12013601;
      NewPurchLine@1100285000 : Record 39;
      ExDocLineApprover@1100285004 : Record 12013610;
      NewExDocLineApprover@1100285005 : Record 12013610;
      ExDocLine@1100285006 : Record 12013609;
      OldExDocLine@1100285008 : Record 12013609;
      TotalAmount@1100285002 : Decimal;
      TempLineNo@1100285001 : Integer;
      ExDocument@1100285012 : Record 12013608;
    BEGIN
      ExFlowSetup.GET;

      NewPurchLine.RESET;
      NewPurchLine.LOCKTABLE;
      NewPurchLine.SETRANGE("Document Type", OldPurchLine."Document Type");
      NewPurchLine.SETRANGE("Document No.", OldPurchLine."Document No.");
      NewPurchLine.FINDLAST;
      TempLineNo := NewPurchLine."Line No." + 10000;

      PurchLine.CALCSUMS("Line Amount");
      TotalAmount := PurchLine."Line Amount";
      IF ExFlowSetup."Block Amt change Approved Line" THEN BEGIN
        IF OldPurchLine."Line Amount" < TotalAmount THEN
          ERROR(EXF01);
      END;
      TotalAmount := OldPurchLine."Line Amount";

      ExDocLineApprover.RESET;
      ExDocLineApprover.SETCURRENTKEY("Document No.");
      ExDocLineApprover.SETRANGE("Document Type", OldPurchLine."Document Type");
      ExDocLineApprover.SETRANGE("Document No.", OldPurchLine."Document No.");
      ExDocLineApprover.SETRANGE("Line No.", OldPurchLine."Line No.");

      OldExDocLine.SETCURRENTKEY("Document No.");
      OldExDocLine.SETRANGE("Document Type", OldPurchLine."Document Type");
      OldExDocLine.SETRANGE("Document No.", OldPurchLine."Document No.");
      OldExDocLine.SETRANGE("Line No.", OldPurchLine."Line No.");
      OldExDocLine.FIND('-');

      PurchLine.RESET;
      IF PurchLine.FINDSET THEN BEGIN
        REPEAT
          NewPurchLine.INIT;
          NewPurchLine.TRANSFERFIELDS(OldPurchLine);
          NewPurchLine."Line No." := TempLineNo;
          TempLineNo := TempLineNo + 10000;
          NewPurchLine.VALIDATE(Type, PurchLine.Type);
          NewPurchLine.VALIDATE("No.", PurchLine."No.");
          NewPurchLine.VALIDATE(Quantity, PurchLine.Quantity);
          NewPurchLine.VALIDATE("Direct Unit Cost", PurchLine."Direct Unit Cost");
          NewPurchLine.Description := PurchLine.Description;
          NewPurchLine.INSERT(TRUE);

          ExDocLine.SETCURRENTKEY("Document No.");
          ExDocLine.SETRANGE("Document Type", NewPurchLine."Document Type");
          ExDocLine.SETRANGE("Document No.", NewPurchLine."Document No.");
          ExDocLine.SETRANGE("Line No.", NewPurchLine."Line No.");
          ExDocLine.FIND('-');
          ExDocLine.Flowstatus := OldExDocLine.Flowstatus;
          ExDocLine.MODIFY;

          NewExDocLineApprover.RESET;
          NewExDocLineApprover.SETRANGE("Document Type", NewPurchLine."Document Type");
          NewExDocLineApprover.SETRANGE("Document No.", NewPurchLine."Document No.");
          NewExDocLineApprover.SETRANGE("Line No.", NewPurchLine."Line No.");
          NewExDocLineApprover.DELETEALL;

          IF ExDocLineApprover.FINDSET THEN
            REPEAT
              NewExDocLineApprover.INIT;
              NewExDocLineApprover.TRANSFERFIELDS(ExDocLineApprover);
              NewExDocLineApprover.ID := 0;
              NewExDocLineApprover."Document Line ID" := ExDocLine.ID;
              NewExDocLineApprover."Document ID" := ExDocLine."Document ID";
              NewExDocLineApprover."Document Type" := NewPurchLine."Document Type";
              NewExDocLineApprover."Document No." := NewPurchLine."Document No.";
              NewExDocLineApprover."Line No." := NewPurchLine."Line No.";
              NewExDocLineApprover.INSERT;
            UNTIL ExDocLineApprover.NEXT = 0;

          TotalAmount := TotalAmount - NewPurchLine."Line Amount";
        UNTIL PurchLine.NEXT = 0;

        IF TotalAmount = 0 THEN BEGIN
          ExDocLineApprover.RESET;
          ExDocLineApprover.SETCURRENTKEY("Document No.");
          ExDocLineApprover.SETRANGE("Document Type", OldPurchLine."Document Type");
          ExDocLineApprover.SETRANGE("Document No.", OldPurchLine."Document No.");
          ExDocLineApprover.SETRANGE("Line No.", OldPurchLine."Line No.");
          ExDocLineApprover.DELETEALL;

          ExDocLine.RESET;
          ExDocLine.SETCURRENTKEY("Document No.");
          ExDocLine.SETRANGE("Document Type", OldPurchLine."Document Type");
          ExDocLine.SETRANGE("Document No.", OldPurchLine."Document No.");
          ExDocLine.SETRANGE("Line No.", OldPurchLine."Line No.");
          ExDocLine.DELETEALL;

          OldPurchLine.DELETE(TRUE);
        END
        ELSE BEGIN
          OldPurchLine.VALIDATE("Direct Unit Cost", TotalAmount);
          OldPurchLine.MODIFY;
          OldExDocLine."Direct Unit Cost" := OldPurchLine."Direct Unit Cost";
          OldExDocLine.Amount := OldPurchLine."Line Amount";
          OldExDocLine."Line Discount %" := OldPurchLine."Line Discount %";
          OldExDocLine.MODIFY;
        END;
      END;

      ExDocument.RetrieveRecord(ExDocument,OldPurchLine."Document Type",OldPurchLine."Document No.");
      IF ExDocument.Status <> ExDocument.Status::"Ready for posting" THEN BEGIN
        ExDocument.Status := ExDocument.Status::"Ready for posting";
        ExDocument.MODIFY(FALSE);
      END;
    END;

    PROCEDURE InsertDimToEXPurchHeader@1100285024(VAR pvarExfPurchHead@1100285002 : Record 12013587;DimCode@1100285001 : Code[20];DimValue@1100285000 : Code[20]);
    VAR
      DimensionValue@1100285004 : Record 349;
    BEGIN
      IF DimCode = '' THEN
        EXIT;

      IF NOT DimensionValue.GET(DimCode,DimValue) THEN
        EXIT;

      UpdateDimFromPurchLine(pvarExfPurchHead."Dimension Set ID",DimensionValue,
                             pvarExfPurchHead."Shortcut Dimension 1 Code",pvarExfPurchHead."Shortcut Dimension 2 Code");
      pvarExfPurchHead.MODIFY;
    END;

    PROCEDURE InsertDimToEXPurchLine@1100285026(VAR pvarExfPurchLine@1100285002 : Record 12013588;DimCode@1100285001 : Code[20];DimValue@1100285000 : Code[20]);
    VAR
      DimensionValue@1100285004 : Record 349;
    BEGIN
      IF DimCode = '' THEN
        EXIT;

      IF NOT DimensionValue.GET(DimCode,DimValue) THEN
        EXIT;

      UpdateDimFromPurchLine(pvarExfPurchLine."Dimension Set ID",DimensionValue,
                             pvarExfPurchLine."Shortcut Dimension 1 Code",pvarExfPurchLine."Shortcut Dimension 2 Code");
      pvarExfPurchLine.MODIFY;
    END;

    PROCEDURE UpdateDocLineDimQuote@1100285027(VAR PurchQuoteLine@1100285003 : Record 39;VAR PurchHeader@1100285008 : Record 38;AppSetup@1100285017 : Record 12013601);
    VAR
      DimSetEntry@1100285002 : Record 480;
      DimValue@1100285010 : Record 349;
      DocLineDim@1100285000 : Record 12013611;
      DocLineDim2@1100285012 : Record 12013611;
      Column@1100285007 : Record 12013661;
      DimToGLMapping@1100285005 : Record 12013646;
      ImportData@1100285015 : Codeunit 12013623;
      ExFlow@1100285004 : Codeunit 12013601;
      Index@1100285001 : Integer;
      ColumnID@1100285006 : Integer;
      DoNotInsert@1100285009 : Boolean;
      RecordRef@1100285013 : RecordRef;
      FldRef@1100285014 : FieldRef;
    BEGIN
      DimSetEntry.RESET;
      DimSetEntry.SETRANGE("Dimension Set ID", PurchQuoteLine."Dimension Set ID");
      IF DimSetEntry.FINDSET THEN
        REPEAT
          DocLineDim.RESET;
          DocLineDim.SETCURRENTKEY("Document No.");
          DocLineDim.SETRANGE("Document Type", PurchQuoteLine."Document Type");
          DocLineDim.SETRANGE("Document No.",PurchQuoteLine."Document No.");
          DocLineDim.SETRANGE("Line No.", PurchQuoteLine."Line No.");
          DocLineDim.SETRANGE("Dimension Code", DimSetEntry."Dimension Code");
          IF NOT DocLineDim.FINDFIRST THEN BEGIN
            ColumnID := ExFlow.GetColumnID(DimSetEntry."Dimension Code");
            IF ColumnID <> 0 THEN BEGIN
              Column.GET(ColumnID);
              IF Column."Dimension Code" <> '' THEN BEGIN
                DimValue."Dimension Code" := DimSetEntry."Dimension Code";
                DimValue.Code := '';
                UpdateDimFromPurchLine(PurchQuoteLine."Dimension Set ID",DimValue,PurchQuoteLine."Shortcut Dimension 1 Code",PurchQuoteLine."Shortcut Dimension 2 Code");
                PurchQuoteLine.MODIFY;
              END;
            END;
          END;
        UNTIL DimSetEntry.NEXT = 0;

      DocLineDim.RESET;
      DocLineDim.SETCURRENTKEY("Document No.");
      DocLineDim.SETRANGE("Document Type",PurchQuoteLine."Document Type");
      DocLineDim.SETRANGE("Document No.",PurchQuoteLine."Document No.");
      DocLineDim.SETRANGE("Line No.",PurchQuoteLine."Line No.");
      IF DocLineDim.FINDSET(TRUE) THEN
        REPEAT
          ExFlow.GetDimIndex(DocLineDim."Dimension Code", Index);
          ColumnID := ExFlow.GetColumnID(DocLineDim."Dimension Code");
          Column.GET(ColumnID);

          IF Column."Dimension Code" <> '' THEN
            BEGIN
              DoNotInsert := FALSE;

              IF DimSetEntry.GET(PurchQuoteLine."Dimension Set ID",DocLineDim."Dimension Code") THEN
                BEGIN
                  IF DimSetEntry."Dimension Value Code" <> DocLineDim."Dimension Value" THEN
                    BEGIN
                      IF DocLineDim."Dimension Value" = '' THEN
                        BEGIN
                          DimValue."Dimension Code" := DimSetEntry."Dimension Code";
                          DimValue.Code := '';
                          UpdateDimFromPurchLine(PurchQuoteLine."Dimension Set ID",DimValue,PurchQuoteLine."Shortcut Dimension 1 Code",PurchQuoteLine."Shortcut Dimension 2 Code");
                          PurchQuoteLine.MODIFY;

                          DocLineDim2.GET(DocLineDim.ID);
                          DocLineDim2.DELETE;
                        END
                      ELSE
                        BEGIN
                          DimValue.GET(DocLineDim."Dimension Code", DocLineDim."Dimension Value");
                          UpdateDimFromPurchLine(PurchQuoteLine."Dimension Set ID",DimValue,PurchQuoteLine."Shortcut Dimension 1 Code",PurchQuoteLine."Shortcut Dimension 2 Code");
                          PurchQuoteLine.MODIFY;
                        END;
                    END;
                END
              ELSE
                IF DocLineDim."Dimension Value" <> '' THEN
                  BEGIN
                    DimToGLMapping.RESET;
                    DimToGLMapping.SETRANGE("Dimension Code", DocLineDim."Dimension Code");
                    DimToGLMapping.SETRANGE("Dimension Value Code", DocLineDim."Dimension Value");
                    DimToGLMapping.SETRANGE("Do Not Insert Into NAV", TRUE);
                    DoNotInsert := DimToGLMapping.FINDFIRST;
                    IF NOT DoNotInsert THEN BEGIN
                      DimValue.GET(DocLineDim."Dimension Code", DocLineDim."Dimension Value");
                      UpdateDimFromPurchLine(PurchQuoteLine."Dimension Set ID",DimValue,PurchQuoteLine."Shortcut Dimension 1 Code",PurchQuoteLine."Shortcut Dimension 2 Code");
                      PurchQuoteLine.MODIFY;
                    END;
                  END;
            END
            ELSE BEGIN
              IF (DocLineDim."Dimension Value" <> '') AND (Column."Purchase Line Field ID" <> 0) THEN BEGIN
                RecordRef.GETTABLE(PurchQuoteLine);
                FldRef := RecordRef.FIELD(Column."Purchase Line Field ID");
                ImportData.UpdateRecord(FldRef,DocLineDim."Dimension Value",FALSE,
                                        DATABASE::"Purchase Line",Column."Purchase Line Field ID",-1);
                RecordRef.MODIFY;
              END;
            END;
        UNTIL DocLineDim.NEXT = 0;

      IF AppSetup."Copy Line Dimensions to Header" THEN
        UpdateDimHeader(PurchQuoteLine,PurchHeader);
    END;

    BEGIN
    END.
  }
}

