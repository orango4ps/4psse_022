OBJECT Codeunit 7302 WMS Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.01,4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=must not be %1;NOR=kan ikke v‘re %1;SVE=f†r inte vara %1';
      Text002@1011 : TextConst 'ENU=\Do you still want to use this %1 ?;NOR=\Vil du fremdeles bruke denne %1 ?;SVE=\Vill du fortfarande anv„nda %1 ?';
      Text003@1009 : TextConst 'ENU=You must set-up a default location code for user %1.;NOR=Du m† definere en standard lokasjonskode for bruker %1.;SVE=Du m†ste registrera ett f”rslag till lagerst„llekod f”r anv„ndare %1.';
      Text004@1019 : TextConst 'ENU=%1 to place (%2) exceeds the available capacity (%3) on %4 %5.;NOR=%1 som skal plasseres (%2) overstiger den disponible kapasiteten (%3) p† %4 %5.;SVE=%1 att placera (%2) ”verskrider tillg„nglig kapacitet (%3) p† %4 %5.';
      Text005@1027 : TextConst 'ENU="%1 = ''%2'', %3 = ''%4'':\The total base quantity to take %5 must be equal to the total base quantity to place %6.";NOR="%1 = %2, %3 = %4:\Samlet antall lagerenheter som skal plukkes %5, m† v‘re likt samlet antall lagerenheter som skal plasseres %6.";SVE="%1 = ''%2'', %3 = ''%4'':\Totala basantalet att ta %5 m†ste vara lika med det totala basantalet att placera %6."';
      ItemUnitOfMeasure@1021 : Record 5404;
      Location@1020 : Record 14;
      Bin@1018 : Record 7354;
      TempErrorLog@1006 : TEMPORARY Record 2000000040;
      Item@1003 : Record 27;
      ItemTrackingCode@1015 : Record 6502;
      WhseMgt@1007 : Codeunit 5775;
      UOMMgt@1029 : Codeunit 5402;
      ShowError@1005 : Boolean;
      NextLineNo@1002 : Integer;
      LogErrors@1001 : Boolean;
      Text006@1013 : TextConst 'ENU="You must enter a %1 in %2 %3 = %4, %5 = %6.";NOR="Du m† angi %1 i %2 %3 = %4, %5 = %6.";SVE="Du m†ste registrera ett %1 i %2 %3 = %4, %5 = %6."';
      Text007@1014 : TextConst 'ENU=Cancelled.;NOR=Avbrutt.;SVE=Avbryten';
      Text008@1004 : TextConst 'ENU=Destination Name;NOR=Mottakernavn;SVE=Destinationsnamn';
      Text009@1008 : TextConst 'ENU=Sales Order;NOR=Ordre;SVE=F”rs.order';
      Text010@1023 : TextConst 'ENU="You cannot change the %1 because this item journal line is created from warehouse entries.\%2 %3 is set up with %4 and therefore changes must be made in a %5. ";NOR="Du kan ikke endre %1 fordi denne varekladdlinjen er opprettet fra lagerposter.\%2 %3 er definert med %4, og endringer m† derfor gj›res i %5. ";SVE="Det g†r inte att „ndra %1 eftersom den h„r artikeljournalraden har skapats fr†n dist.lagertransaktioner.\%2 %3 har st„llts in med %4 och d„rf”r m†ste „ndringarna g”ras i en/ett %5. "';
      Text011@1017 : TextConst 'ENU=You cannot use %1 %2 because it is set up with %3.\Adjustments to this location must therefore be made in a %4.;NOR=Du kan ikke bruke %1 %2 fordi det er definert med %3.\Justeringer p† denne lokasjonen m† derfor gj›res i %4.;SVE=Det g†r inte att anv„nda %1 %2 eftersom den har st„llts in med %3.\Justeringar av det h„r lagerst„llet m†ste d„rf”r g”ras i en/ett %4.';
      Text012@1022 : TextConst 'ENU=You cannot reclassify %1 %2 because it is set up with %3.\You can change this location code by creating a %4.;NOR=Du kan ikke reklassifisere %1 %2 fordi det er definert med %3.\Du kan endre denne lokasjonskoden ved † opprette %4.;SVE=Det g†r inte att gruppera %1 %2 eftersom den har st„llts in med %3.\Du kan „ndra den h„r lagerst„llekoden genom att skapa en/ett %4.';
      Text013@1025 : TextConst 'ENU=You cannot change item tracking because it is created from warehouse entries.\The %1 is set up with warehouse tracking, and %2 %3 is set up with %4.\Adjustments to item tracking must therefore be made in a warehouse journal.;NOR=Du kan ikke endre varesporing fordi den ble opprettet fra lagerposter.\%1 er definert med lagersporing, og %2 %3 er definert med %4.\Justeringer i varesporing m† derfor gj›res i en lagerkladd.;SVE=Det g†r inte att „ndra artikelsp†rningen eftersom den har skapats fr†n dist.lagertransaktioner.\%1 har st„llts in med dist.lagersp†rning och %2 %3 har st„llts in med %4.\Justeringar av artikelsp†rning m†ste d„rf”r g”ras i en dist.lagerjournal.';
      Text014@1026 : TextConst 'ENU=You cannot change item tracking because the %1 is set up with warehouse tracking and %2 %3 is set up with %4.\Adjustments to item tracking must therefore be made in a warehouse journal.;NOR=Du kan ikke endre varesporing fordi %1 er definert med lagersporing og %2 %3 er definert med %4.\Justeringer i varesporing m† derfor gj›res i en lagerkladd.;SVE=Det g†r inte att „ndra artikelsp†rningen eftersom %1 har st„llts in med dist.lagersp†rning och %2 %3 har st„llts in med %4.\Justeringar av artikelsp†rning m†ste d„rf”r g”ras i en dist.lagerjournal.';
      Text015@1016 : TextConst 'ENU=You cannot use a %1 because %2 %3 is set up with %4.;NOR=Du kan ikke bruke %1 fordi %2 %3 er definert med %4.;SVE=Det g†r inte att anv„nda en/ett %1 eftersom %2 %3 har st„llts in med %4.';
      Text016@1028 : TextConst 'ENU="%1 = ''%2'', %3 = ''%4'', %5 = ''%6'', %7 = ''%8'': The total base quantity to take %9 must be equal to the total base quantity to place %10.";NOR="%1 = %2, %3 = %4, %5 = %6, %7 = %8: Samlet antall lagerenheter som skal plukkes %9, m† v‘re likt samlet antall lagerenheter som skal plasseres %10.";SVE="%1 = ''%2'', %3 = ''%4'', %5 = ''%6'', %7 = ''%8'': Totala basantalet att ta %9 m†ste vara lika med det totala basantalet att placera %10."';
      UserIsNotWhseEmployeeErr@1012 : TextConst 'ENU=You must first set up user %1 as a warehouse employee.;NOR=Du m† f›rst definere bruker %1 som lageransatt.;SVE=Du m†st f”rst registrera anv„ndare %1 som dist.lager personal.';
      UserIsNotWhseEmployeeAtWMSLocationErr@1010 : TextConst '@@@=%1: USERID;ENU=You must first set up user %1 as a warehouse employee at a location with the Bin Mandatory setting.;NOR=Du m† f›rst definere brukeren %1 som en lageransatt p† en lokasjon med innstillingen Hylle obligatorisk.';
      DefaultLocationNotDirectedPutawayPickErr@1024 : TextConst '@@@=%1: USERID;ENU=You must set up a location with the Directed Put-away and Pick setting and assign it to user %1.;NOR=Du m† definere en lokasjon med innstillingen Lagerstyring og tilordne den til brukeren %1.';

    [External]
    PROCEDURE CreateWhseJnlLine@1(ItemJnlLine@1000 : Record 83;ItemJnlTemplateType@1002 : Option;VAR WhseJnlLine@1001 : Record 7311;ToTransfer@1003 : Boolean) : Boolean;
    BEGIN
      WITH ItemJnlLine DO BEGIN
        IF ((NOT "Phys. Inventory") AND (Quantity = 0) AND ("Invoiced Quantity" = 0)) OR
           ("Value Entry Type" IN ["Value Entry Type"::Rounding,"Value Entry Type"::Revaluation]) OR
           Adjustment
        THEN
          EXIT(FALSE);

        IF ToTransfer THEN
          "Location Code" := "New Location Code";
        GetLocation("Location Code");
        InitWhseJnlLine(ItemJnlLine,WhseJnlLine,"Quantity (Base)");
        SetZoneAndBins(ItemJnlLine,WhseJnlLine,ToTransfer);
        IF ("Journal Template Name" <> '') AND ("Journal Batch Name" <> '') THEN BEGIN
          WhseJnlLine.SetSource(DATABASE::"Item Journal Line",ItemJnlTemplateType,"Document No.","Line No.",0);
          WhseJnlLine."Source Document" := WhseMgt.GetSourceDocument(WhseJnlLine."Source Type",WhseJnlLine."Source Subtype");
        END ELSE
          IF "Job No." <> '' THEN BEGIN
            WhseJnlLine.SetSource(DATABASE::"Job Journal Line",ItemJnlTemplateType,"Document No.","Line No.",0);
            WhseJnlLine."Source Document" := WhseMgt.GetSourceDocument(WhseJnlLine."Source Type",WhseJnlLine."Source Subtype");
          END;
        WhseJnlLine."Whse. Document Type" := WhseJnlLine."Whse. Document Type"::" ";
        IF "Job No." = '' THEN
          WhseJnlLine."Reference Document" := WhseJnlLine."Reference Document"::"Item Journal"
        ELSE
          WhseJnlLine."Reference Document" := WhseJnlLine."Reference Document"::"Job Journal";
        WhseJnlLine."Reference No." := "Document No.";
        TransferWhseItemTrkg(WhseJnlLine,ItemJnlLine);
        WhseJnlLine.Description := Description;
        OnAfterCreateWhseJnlLine(WhseJnlLine,ItemJnlLine,ToTransfer);
        EXIT(TRUE);
      END;
    END;

    [External]
    PROCEDURE CreateWhseJnlLineFromOutputJnl@5(ItemJnlLine@1000 : Record 83;VAR WhseJnlLine@1001 : Record 7311) : Boolean;
    BEGIN
      WITH ItemJnlLine DO BEGIN
        IF Adjustment OR
           ("Value Entry Type" IN ["Value Entry Type"::Rounding,"Value Entry Type"::Revaluation])
        THEN
          EXIT(FALSE);

        TESTFIELD("Order Type","Order Type"::Production);
        GetLocation("Location Code");
        InitWhseJnlLine(ItemJnlLine,WhseJnlLine,"Output Quantity (Base)");
        SetZoneAndBinsForOutput(ItemJnlLine,WhseJnlLine);
        WhseJnlLine.SetSource(DATABASE::"Item Journal Line",5,"Order No.","Order Line No.",0); // Output Journal
        WhseJnlLine."Source Document" := WhseMgt.GetSourceDocument(WhseJnlLine."Source Type",WhseJnlLine."Source Subtype");
        WhseJnlLine.SetWhseDoc(WhseJnlLine."Whse. Document Type"::Production,"Order No.","Order Line No.");
        WhseJnlLine."Reference Document" := WhseJnlLine."Reference Document"::"Prod.";
        WhseJnlLine."Reference No." := "Order No.";
        TransferWhseItemTrkg(WhseJnlLine,ItemJnlLine);
        OnAfterCreateWhseJnlLineFromOutputJnl(WhseJnlLine,ItemJnlLine);
      END;
    END;

    [External]
    PROCEDURE CreateWhseJnlLineFromConsumJnl@18(ItemJnlLine@1000 : Record 83;VAR WhseJnlLine@1001 : Record 7311) : Boolean;
    BEGIN
      WITH ItemJnlLine DO BEGIN
        IF Adjustment OR
           ("Value Entry Type" IN ["Value Entry Type"::Rounding,"Value Entry Type"::Revaluation])
        THEN
          EXIT(FALSE);

        TESTFIELD("Order Type","Order Type"::Production);
        GetLocation("Location Code");
        InitWhseJnlLine(ItemJnlLine,WhseJnlLine,"Quantity (Base)");
        SetZoneAndBinsForConsumption(ItemJnlLine,WhseJnlLine);
        WhseJnlLine.SetSource(DATABASE::"Item Journal Line",4,"Order No.","Order Line No.","Prod. Order Comp. Line No."); // Consumption Journal
        WhseJnlLine."Source Document" := WhseMgt.GetSourceDocument(WhseJnlLine."Source Type",WhseJnlLine."Source Subtype");
        WhseJnlLine.SetWhseDoc(WhseJnlLine."Whse. Document Type"::Production,"Order No.","Order Line No.");
        WhseJnlLine."Reference Document" := WhseJnlLine."Reference Document"::"Prod.";
        WhseJnlLine."Reference No." := "Order No.";
        TransferWhseItemTrkg(WhseJnlLine,ItemJnlLine);
        OnAfterCreateWhseJnlLineFromConsumJnl(WhseJnlLine,ItemJnlLine);
      END;
    END;

    [External]
    PROCEDURE CheckWhseJnlLine@2(VAR WhseJnlLine@1000 : Record 7311;SourceJnl@1001 : ' ,ItemJnl,OutputJnl,ConsumpJnl,WhseJnl';DecreaseQtyBase@1002 : Decimal;ToTransfer@1004 : Boolean);
    VAR
      BinContent@1003 : Record 7302;
      ItemTrackingCode@1005 : Record 6502;
      ItemTrackingMgt@1007 : Codeunit 6500;
      QtyAbsBase@1006 : Decimal;
      WhseSNRequired@1008 : Boolean;
      WhseLNRequired@1009 : Boolean;
    BEGIN
      GetItem(WhseJnlLine."Item No.");
      WITH WhseJnlLine DO BEGIN
        TESTFIELD("Location Code");
        GetLocation("Location Code");

        IF SourceJnl = SourceJnl::WhseJnl THEN
          CheckAdjBinCode(WhseJnlLine);

        IF ItemTrackingCode.GET(Item."Item Tracking Code") THEN BEGIN
          IF ("Serial No." <> '') AND
             ("From Bin Code" <> '') AND
             ItemTrackingCode."SN Specific Tracking" AND
             ("From Bin Code" <> Location."Adjustment Bin Code") AND
             (((Location."Adjustment Bin Code" <> '') AND
               ("Entry Type" = "Entry Type"::Movement)) OR
              (("Entry Type" <> "Entry Type"::Movement) OR
               ("Source Document" = "Source Document"::"Reclass. Jnl.")))
          THEN
            CheckSerialNo(
              "Item No.","Variant Code","Location Code","From Bin Code",
              "Unit of Measure Code","Serial No.",CalcReservEntryQuantity(WhseJnlLine));

          IF ("Lot No." <> '') AND
             ("From Bin Code" <> '') AND
             ItemTrackingCode."Lot Specific Tracking" AND
             ("From Bin Code" <> Location."Adjustment Bin Code") AND
             (((Location."Adjustment Bin Code" <> '') AND
               ("Entry Type" = "Entry Type"::Movement)) OR
              (("Entry Type" <> "Entry Type"::Movement) OR
               ("Source Document" = "Source Document"::"Reclass. Jnl.")))
          THEN
            CheckLotNo(
              "Item No.","Variant Code","Location Code","From Bin Code",
              "Unit of Measure Code","Lot No.",CalcReservEntryQuantity(WhseJnlLine))
        END;

        IF "Entry Type" IN ["Entry Type"::"Positive Adjmt.","Entry Type"::Movement] THEN
          IF SourceJnl = SourceJnl::" " THEN BEGIN
            IF Location."Directed Put-away and Pick" AND ("To Zone Code" = '') THEN
              ERROR(
                Text006,
                FIELDCAPTION("Zone Code"),"Whse. Document Type",
                FIELDCAPTION("Whse. Document No."),"Whse. Document No.",
                FIELDCAPTION("Line No."),"Whse. Document Line No.");
            IF "To Bin Code" = '' THEN
              ERROR(
                Text006,
                FIELDCAPTION("Bin Code"),"Whse. Document Type",
                FIELDCAPTION("Whse. Document No."),"Whse. Document No.",
                FIELDCAPTION("Line No."),"Whse. Document Line No.");
          END ELSE
            IF ("Entry Type" <> "Entry Type"::Movement) OR ToTransfer THEN BEGIN
              IF Location."Directed Put-away and Pick" THEN
                TESTFIELD("To Zone Code");
              TESTFIELD("To Bin Code");
            END;
        IF "Entry Type" IN ["Entry Type"::"Negative Adjmt.","Entry Type"::Movement] THEN
          IF SourceJnl = SourceJnl::" " THEN BEGIN
            IF Location."Directed Put-away and Pick" AND ("From Zone Code" = '') THEN
              ERROR(
                Text006,
                FIELDCAPTION("Zone Code"),"Whse. Document Type",
                FIELDCAPTION("Whse. Document No."),"Whse. Document No.",
                FIELDCAPTION("Line No."),"Whse. Document Line No.");
            IF "From Bin Code" = '' THEN
              ERROR(
                Text006,
                FIELDCAPTION("Bin Code"),"Whse. Document Type",
                FIELDCAPTION("Whse. Document No."),"Whse. Document No.",
                FIELDCAPTION("Line No."),"Whse. Document Line No.");
          END ELSE
            IF ("Entry Type" <> "Entry Type"::Movement) OR NOT ToTransfer THEN BEGIN
              IF Location."Directed Put-away and Pick" THEN
                TESTFIELD("From Zone Code");
              TESTFIELD("From Bin Code");
            END;

        QtyAbsBase := "Qty. (Absolute, Base)";
        CASE SourceJnl OF
          SourceJnl::" ",SourceJnl::ItemJnl:
            BEGIN
              IF ("From Bin Code" <> '') AND
                 ("From Bin Code" <> Location."Adjustment Bin Code") AND
                 Location."Directed Put-away and Pick"
              THEN BEGIN
                BinContent.GET(
                  "Location Code","From Bin Code",
                  "Item No.","Variant Code","Unit of Measure Code");
                BinContent.CheckDecreaseBinContent("Qty. (Absolute)","Qty. (Absolute, Base)",DecreaseQtyBase);
              END;

              IF ("To Bin Code" <> '') AND
                 ("To Bin Code" <> Location."Adjustment Bin Code") AND
                 Location."Directed Put-away and Pick"
              THEN
                IF BinContent.GET(
                     "Location Code","To Bin Code",
                     "Item No.","Variant Code","Unit of Measure Code")
                THEN BEGIN
                  IF ("Reference Document" = "Reference Document"::"Posted Rcpt.") OR
                     ("Reference Document" = "Reference Document"::"Posted Rtrn. Rcpt.") OR
                     ("Reference Document" = "Reference Document"::"Posted T. Receipt")
                  THEN
                    BinContent.CheckIncreaseBinContent(
                      "Qty. (Absolute, Base)",0,Cubage,Weight,Cubage,Weight,TRUE,FALSE)
                  ELSE
                    BinContent.CheckIncreaseBinContent(
                      "Qty. (Absolute, Base)","Qty. (Absolute, Base)",Cubage,Weight,Cubage,Weight,TRUE,FALSE)
                END ELSE BEGIN
                  GetBin("Location Code","To Bin Code");
                  Bin.CheckIncreaseBin(
                    Bin.Code,"Item No.","Qty. (Absolute)",Cubage,Weight,Cubage,Weight,TRUE,FALSE);
                END;
            END;
          SourceJnl::OutputJnl,SourceJnl::ConsumpJnl:
            BEGIN
              IF ("From Bin Code" <> '') AND
                 Location."Directed Put-away and Pick"
              THEN BEGIN
                BinContent.GET(
                  "Location Code","From Bin Code",
                  "Item No.","Variant Code","Unit of Measure Code");
                BinContent.CheckDecreaseBinContent("Qty. (Absolute)","Qty. (Absolute, Base)",DecreaseQtyBase);
              END;

              IF ("To Bin Code" <> '') AND
                 Location."Directed Put-away and Pick"
              THEN
                IF BinContent.GET(
                     "Location Code","To Bin Code",
                     "Item No.","Variant Code","Unit of Measure Code")
                THEN
                  BinContent.CheckIncreaseBinContent(
                    "Qty. (Absolute)","Qty. (Absolute)",Cubage,Weight,Cubage,Weight,TRUE,FALSE)
                ELSE BEGIN
                  GetBin("Location Code","To Bin Code");
                  Bin.CheckIncreaseBin(
                    Bin.Code,"Item No.","Qty. (Absolute)",Cubage,Weight,Cubage,Weight,TRUE,FALSE);
                END;
            END;
          SourceJnl::WhseJnl:
            BEGIN
              IF ("From Bin Code" <> '') AND
                 ("From Bin Code" <> Location."Adjustment Bin Code") AND
                 Location."Directed Put-away and Pick"
              THEN BEGIN
                ItemTrackingMgt.CheckWhseItemTrkgSetup("Item No.",WhseSNRequired,WhseLNRequired,FALSE);
                IF NOT (WhseSNRequired OR WhseLNRequired) THEN BEGIN
                  BinContent.GET(
                    "Location Code","From Bin Code",
                    "Item No.","Variant Code","Unit of Measure Code");
                  BinContent.CheckDecreaseBinContent("Qty. (Absolute)","Qty. (Absolute, Base)",DecreaseQtyBase);
                END;
              END;
              IF ("To Bin Code" <> '') AND
                 ("To Bin Code" <> Location."Adjustment Bin Code") AND
                 Location."Directed Put-away and Pick"
              THEN BEGIN
                GetBin("Location Code","To Bin Code");
                Bin.CheckWhseClass("Item No.",FALSE);
              END;
            END;
        END;
        IF QtyAbsBase <> "Qty. (Absolute, Base)" THEN BEGIN
          VALIDATE("Qty. (Absolute, Base)");
          MODIFY;
        END;
      END;

      OnAfterCheckWhseJnlLine(WhseJnlLine,SourceJnl,DecreaseQtyBase,ToTransfer);
    END;

    LOCAL PROCEDURE CheckAdjBinCode@91(WhseJnlLine@1000 : Record 7311);
    VAR
      WarehouseJournalTemplate@1001 : Record 7309;
      FieldCapTxt@1002 : Text;
    BEGIN
      WITH WhseJnlLine DO BEGIN
        IF "Entry Type" = "Entry Type"::Movement THEN
          EXIT;

        GetLocation("Location Code");
        IF NOT Location."Directed Put-away and Pick" THEN
          EXIT;

        WarehouseJournalTemplate.GET("Journal Template Name");
        IF WarehouseJournalTemplate.Type = WarehouseJournalTemplate.Type::Reclassification THEN
          EXIT;

        Location.TESTFIELD("Adjustment Bin Code");
        CASE "Entry Type" OF
          "Entry Type"::"Positive Adjmt.":
            IF ("From Bin Code" <> '') AND ("From Bin Code" <> Location."Adjustment Bin Code") THEN
              FieldCapTxt := FIELDCAPTION("From Bin Code");
          "Entry Type"::"Negative Adjmt.":
            IF ("To Bin Code" <> '') AND ("To Bin Code" <> Location."Adjustment Bin Code") THEN
              FieldCapTxt := FIELDCAPTION("To Bin Code");
        END;
        IF FieldCapTxt <> '' THEN
          ERROR(
            Text006,
            STRSUBSTNO('%1 = ''%2''',FieldCapTxt,Location."Adjustment Bin Code"),
            "Whse. Document Type",
            FIELDCAPTION("Whse. Document No."),"Whse. Document No.",
            FIELDCAPTION("Line No."),"Line No.");
      END;
    END;

    [External]
    PROCEDURE CheckItemJnlLineFieldChange@54(ItemJnlLine@1000 : Record 83;xItemJnlLine@1001 : Record 83;CurrFieldCaption@1005 : Text[30]);
    VAR
      ProdOrderLine@1004 : Record 5406;
      ProdOrderComponent@1006 : Record 5407;
      WhseItemJnl@1002 : Page 7324;
      WhsePhysInvJnl@1003 : Page 7326;
      BinIsEligible@1007 : Boolean;
      IsHandled@1008 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeCheckItemJnlLineFieldChange(ItemJnlLine,xItemJnlLine,CurrFieldCaption,IsHandled);
      IF IsHandled THEN
        EXIT;

      WITH ItemJnlLine DO BEGIN
        IF ("Order Type" = "Order Type"::Production) AND ("Entry Type" = "Entry Type"::Output) THEN
          IF ProdOrderLine.GET(ProdOrderLine.Status::Released,"Order No.","Order Line No.") THEN
            BinIsEligible := ("Location Code" = ProdOrderLine."Location Code") AND ("Bin Code" = ProdOrderLine."Bin Code");
        IF ("Order Type" = "Order Type"::Production) AND ("Entry Type" = "Entry Type"::Consumption) THEN
          IF ProdOrderComponent.GET(ProdOrderComponent.Status::Released,"Order No.","Order Line No.","Prod. Order Comp. Line No.") THEN
            BinIsEligible := ("Location Code" = ProdOrderComponent."Location Code") AND ("Bin Code" = ProdOrderComponent."Bin Code");

        ShowError := CheckBinCodeChange("Location Code","Bin Code",xItemJnlLine."Bin Code") AND NOT BinIsEligible;
        IF NOT ShowError THEN
          ShowError := CheckBinCodeChange("New Location Code","New Bin Code",xItemJnlLine."New Bin Code");

        IF ShowError THEN
          ERROR(Text015,
            CurrFieldCaption,
            LOWERCASE(Location.TABLECAPTION),Location.Code,Location.FIELDCAPTION("Directed Put-away and Pick"));

        IF "Entry Type" IN
           ["Entry Type"::"Negative Adjmt.","Entry Type"::"Positive Adjmt.","Entry Type"::Sale,"Entry Type"::Purchase]
        THEN BEGIN
          IF ("Location Code" <> xItemJnlLine."Location Code") AND (xItemJnlLine."Location Code" <> '') THEN BEGIN
            GetLocation(xItemJnlLine."Location Code");
            ShowError := Location."Directed Put-away and Pick";
          END;

          IF (("Item No." <> xItemJnlLine."Item No.") AND (xItemJnlLine."Item No." <> '')) OR
             ((Quantity <> xItemJnlLine.Quantity) AND (xItemJnlLine.Quantity <> 0)) OR
             ("Variant Code" <> xItemJnlLine."Variant Code") OR
             ("Unit of Measure Code" <> xItemJnlLine."Unit of Measure Code") OR
             ("Entry Type" <> xItemJnlLine."Entry Type") OR
             ("Phys. Inventory" AND
              ("Qty. (Phys. Inventory)" <> xItemJnlLine."Qty. (Phys. Inventory)") OR
              (Quantity <> xItemJnlLine.Quantity))
          THEN BEGIN
            GetLocation("Location Code");
            ShowError := Location."Directed Put-away and Pick";
          END;

          IF ShowError THEN BEGIN
            IF "Phys. Inventory" THEN
              ERROR(Text010,
                CurrFieldCaption,
                Location.TABLECAPTION,Location.Code,Location.FIELDCAPTION("Directed Put-away and Pick"),
                WhsePhysInvJnl.CAPTION);

            ERROR(Text010,
              CurrFieldCaption,
              Location.TABLECAPTION,Location.Code,Location.FIELDCAPTION("Directed Put-away and Pick"),
              WhseItemJnl.CAPTION);
          END;
        END;
      END;
    END;

    [External]
    PROCEDURE CheckItemJnlLineLocation@57(VAR ItemJnlLine@1001 : Record 83;xItemJnlLine@1000 : Record 83);
    VAR
      WhseItemJnl@1005 : Page 7324;
      TransferOrder@1003 : Page 5740;
      IsHandled@1002 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeCheckItemJnlLineLocation(ItemJnlLine,xItemJnlLine,IsHandled);
      IF IsHandled THEN
        EXIT;

      WITH ItemJnlLine DO BEGIN
        IF "Entry Type" IN
           ["Entry Type"::"Negative Adjmt.","Entry Type"::"Positive Adjmt.","Entry Type"::Sale,"Entry Type"::Purchase]
        THEN
          IF "Location Code" <> xItemJnlLine."Location Code" THEN BEGIN
            GetLocation(xItemJnlLine."Location Code");
            IF NOT Location."Directed Put-away and Pick" THEN BEGIN
              GetLocation("Location Code");
              IF Location."Directed Put-away and Pick" THEN
                ERROR(Text011,
                  LOWERCASE(Location.TABLECAPTION),Location.Code,Location.FIELDCAPTION("Directed Put-away and Pick"),
                  WhseItemJnl.CAPTION);
            END;
          END;

        IF "Entry Type" = "Entry Type"::Transfer THEN BEGIN
          IF ("New Location Code" <> "Location Code") AND
             (("Location Code" <> xItemJnlLine."Location Code") OR
              ("New Location Code" <> xItemJnlLine."New Location Code"))
          THEN BEGIN
            GetLocation("Location Code");
            ShowError := Location."Directed Put-away and Pick";
            IF NOT Location."Directed Put-away and Pick" THEN BEGIN
              GetLocation("New Location Code");
              ShowError := Location."Directed Put-away and Pick";
            END;
          END;

          IF ShowError THEN
            ERROR(Text012,
              LOWERCASE(Location.TABLECAPTION),Location.Code,Location.FIELDCAPTION("Directed Put-away and Pick"),
              TransferOrder.CAPTION);
        END;
      END;
    END;

    [External]
    PROCEDURE CheckItemTrackingChange@55(TrackingSpecification@1000 : Record 336;xTrackingSpecification@1001 : Record 336);
    BEGIN
      WITH TrackingSpecification DO
        IF ("Source Type" = DATABASE::"Item Journal Line") AND
           ("Item No." <> '') AND
           ("Location Code" <> '')
        THEN BEGIN
          IF "Source Subtype" IN [0,1,2,3] THEN
            IF ("Lot No." <> xTrackingSpecification."Lot No.") OR
               ("Serial No." <> xTrackingSpecification."Serial No.") OR
               ((xTrackingSpecification."Expiration Date" <> 0D) AND
                ("Expiration Date" <> xTrackingSpecification."Expiration Date")) OR
               ("Quantity (Base)" <> xTrackingSpecification."Quantity (Base)")
            THEN BEGIN
              GetLocation("Location Code");
              IF Location."Directed Put-away and Pick" THEN BEGIN
                GetItem("Item No.");
                IF ItemTrackingCode."SN Warehouse Tracking" OR ItemTrackingCode."Lot Warehouse Tracking" THEN
                  ERROR(Text013,
                    LOWERCASE(Item.TABLECAPTION),
                    LOWERCASE(Location.TABLECAPTION),Location.Code,Location.FIELDCAPTION("Directed Put-away and Pick"));
              END;
            END;

          IF IsReclass THEN
            IF ("New Lot No." <> "Lot No.") AND
               (("Lot No." <> xTrackingSpecification."Lot No.") OR
                ("New Lot No." <> xTrackingSpecification."New Lot No.")) OR
               ("New Serial No." <> "Serial No.") AND
               (("Serial No." <> xTrackingSpecification."Serial No.") OR
                ("New Serial No." <> xTrackingSpecification."New Serial No.")) OR
               ("New Expiration Date" <> "Expiration Date") AND
               (("Expiration Date" <> xTrackingSpecification."Expiration Date") OR
                ("New Expiration Date" <> xTrackingSpecification."New Expiration Date"))
            THEN BEGIN
              GetLocation("Location Code");
              IF Location."Directed Put-away and Pick" THEN BEGIN
                GetItem("Item No.");
                IF ItemTrackingCode."SN Warehouse Tracking" OR ItemTrackingCode."Lot Warehouse Tracking" THEN
                  ERROR(Text014,
                    LOWERCASE(Item.TABLECAPTION),
                    LOWERCASE(Location.TABLECAPTION),Location.Code,Location.FIELDCAPTION("Directed Put-away and Pick"));
              END;
            END;
        END;
    END;

    LOCAL PROCEDURE CheckBinCodeChange@6(LocationCode@1002 : Code[10];BinCode@1000 : Code[20];xRecBinCode@1001 : Code[20]) : Boolean;
    BEGIN
      IF (BinCode <> xRecBinCode) AND (BinCode <> '') THEN BEGIN
        GetLocation(LocationCode);
        EXIT(Location."Directed Put-away and Pick");
      END;

      EXIT(FALSE);
    END;

    [External]
    PROCEDURE CheckAdjmtBin@3(Location@1002 : Record 14;Quantity@1000 : Decimal;PosEntryType@1001 : Boolean);
    BEGIN
      IF NOT Location."Directed Put-away and Pick" THEN
        EXIT;

      Location.TESTFIELD(Code);
      Location.TESTFIELD("Adjustment Bin Code");
      GetBin(Location.Code,Location."Adjustment Bin Code");

      // Test whether bin movement is blocked for current Entry Type
      IF (PosEntryType AND (Quantity > 0)) OR
         (NOT PosEntryType AND (Quantity < 0))
      THEN
        ShowError := (Bin."Block Movement" IN
                      [Bin."Block Movement"::Inbound,Bin."Block Movement"::All])
      ELSE
        IF (PosEntryType AND (Quantity < 0)) OR
           (NOT PosEntryType AND (Quantity > 0))
        THEN
          ShowError := (Bin."Block Movement" IN
                        [Bin."Block Movement"::Outbound,Bin."Block Movement"::All]);

      IF ShowError THEN
        Bin.FIELDERROR(
          "Block Movement",
          STRSUBSTNO(
            Text000,
            Bin."Block Movement"));
    END;

    [External]
    PROCEDURE CheckInbOutbBin@7(LocationCode@1000 : Code[10];BinCode@1001 : Code[20];CheckInbound@1002 : Boolean);
    BEGIN
      GetLocation(LocationCode);
      GetBin(LocationCode,BinCode);

      // Test whether bin movement is blocked for current Entry Type
      IF CheckInbound THEN
        IF Bin."Block Movement" IN [Bin."Block Movement"::Inbound,Bin."Block Movement"::All] THEN
          Bin.FIELDERROR("Block Movement",STRSUBSTNO(Text000,Bin."Block Movement"));

      IF NOT CheckInbound THEN
        IF Bin."Block Movement" IN [Bin."Block Movement"::Outbound,Bin."Block Movement"::All] THEN
          Bin.FIELDERROR("Block Movement",STRSUBSTNO(Text000,Bin."Block Movement"));
    END;

    [External]
    PROCEDURE CheckUserIsWhseEmployee@67();
    VAR
      WhseEmployee@1000 : Record 7301;
      IsHandled@1001 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeCheckUserIsWhseEmployee(Location,IsHandled);
      IF IsHandled THEN
        EXIT;

      IF USERID <> '' THEN BEGIN
        WhseEmployee.SETRANGE("User ID",USERID);
        IF WhseEmployee.ISEMPTY THEN
          ERROR(UserIsNotWhseEmployeeErr,USERID);
      END;
    END;

    [External]
    PROCEDURE CalcCubageAndWeight@15(ItemNo@1002 : Code[20];UOMCode@1003 : Code[10];Qty@1004 : Decimal;VAR Cubage@1000 : Decimal;VAR Weight@1001 : Decimal);
    BEGIN
      IF ItemNo <> '' THEN BEGIN
        GetItemUnitOfMeasure(ItemNo,UOMCode);
        Cubage := Qty * ItemUnitOfMeasure.Cubage;
        Weight := Qty * ItemUnitOfMeasure.Weight;
      END ELSE BEGIN
        Cubage := 0;
        Weight := 0;
      END;
    END;

    [External]
    PROCEDURE GetDefaultLocation@16() : Code[10];
    VAR
      WhseEmployee@1000 : Record 7301;
      LocationCode@1001 : Code[10];
      IsHandled@1002 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeGetDefaultLocation(LocationCode,IsHandled);
      IF IsHandled THEN
        EXIT(LocationCode);

      IF USERID <> '' THEN BEGIN
        WhseEmployee.SETCURRENTKEY(Default);
        WhseEmployee.SETRANGE(Default,TRUE);
        WhseEmployee.SETRANGE("User ID",USERID);
        IF NOT WhseEmployee.FINDFIRST THEN
          ERROR(Text003,USERID);
        EXIT(WhseEmployee."Location Code");
      END;
    END;

    [External]
    PROCEDURE GetWMSLocation@68(VAR CurrentLocationCode@1002 : Code[10]);
    VAR
      Location@1001 : Record 14;
      WhseEmployee@1000 : Record 7301;
    BEGIN
      CheckUserIsWhseEmployee;
      IF WhseEmployee.GET(USERID,CurrentLocationCode) AND Location.GET(CurrentLocationCode) THEN
        IF Location."Bin Mandatory" THEN
          EXIT;

      WhseEmployee.SETRANGE("User ID",USERID);
      WhseEmployee.FIND('-');
      REPEAT
        IF Location.GET(WhseEmployee."Location Code") THEN
          IF Location."Bin Mandatory" THEN BEGIN
            CurrentLocationCode := Location.Code;
            EXIT;
          END;
      UNTIL WhseEmployee.NEXT = 0;

      ERROR(UserIsNotWhseEmployeeAtWMSLocationErr,USERID);
    END;

    [External]
    PROCEDURE GetDefaultDirectedPutawayAndPickLocation@37() : Code[10];
    VAR
      Location@1001 : Record 14;
    BEGIN
      IF Location.GET(GetDefaultLocation) THEN
        IF Location."Directed Put-away and Pick" THEN
          EXIT(Location.Code);
      ERROR(DefaultLocationNotDirectedPutawayPickErr,USERID);
    END;

    [External]
    PROCEDURE GetDefaultBin@4(ItemNo@1000 : Code[20];VariantCode@1002 : Code[10];LocationCode@1001 : Code[10];VAR BinCode@1004 : Code[20]) : Boolean;
    VAR
      BinContent@1005 : Record 7302;
    BEGIN
      BinContent.SETCURRENTKEY(Default);
      BinContent.SETRANGE(Default,TRUE);
      BinContent.SETRANGE("Location Code",LocationCode);
      BinContent.SETRANGE("Item No.",ItemNo);
      BinContent.SETRANGE("Variant Code",VariantCode);
      IF BinContent.FINDFIRST THEN BEGIN
        BinCode := BinContent."Bin Code";
        EXIT(TRUE);
      END;
    END;

    PROCEDURE GetDefaultBinLocation@1100526202(iJob@1100526203 : Code[20];iServOrder@1100526204 : Code[20];iLoc@1100526205 : Code[20];iItem@1210190001 : Code[20];iVariant@1210190002 : Code[20];CheckPrefBin@1100525000 : Boolean) : Code[20];
    VAR
      PrefBinRec@1100526202 : Record 11020629;
      BinRec@1100526200 : Record 7354;
      BinCode@1210190003 : Code[20];
    BEGIN
      //**4PS
      IF CheckPrefBin THEN BEGIN
        IF iJob + iServOrder <> '' THEN BEGIN
          IF iJob <> '' THEN BEGIN
            PrefBinRec.SETRANGE(Type, PrefBinRec.Type::Job);
            PrefBinRec.SETRANGE("No.", iJob);
          END;
          IF iServOrder <> '' THEN BEGIN
            PrefBinRec.SETRANGE(Type, PrefBinRec.Type::"Service Order");
            PrefBinRec.SETRANGE("No.", iServOrder);
          END;
          PrefBinRec.SETRANGE("Location Code", iLoc);
          PrefBinRec.SETRANGE("Default Bin", TRUE);
          IF PrefBinRec.FINDFIRST THEN
            EXIT(PrefBinRec."Bin Code");
        END;
      END;

      GetDefaultBin(iItem,iVariant,iLoc,BinCode);  //db, 30-03-11
      IF BinCode <> '' THEN
        EXIT(BinCode);

      BinRec.SETRANGE("Location Code", iLoc);
      BinRec.SETRANGE("Default Bin (Location)", TRUE);
      IF BinRec.FINDFIRST THEN
        EXIT(BinRec.Code);

      EXIT('');
    END;

    [External]
    PROCEDURE CheckDefaultBin@25(ItemNo@1001 : Code[20];VariantCode@1002 : Code[10];LocationCode@1005 : Code[10];BinCode@1003 : Code[20]) : Boolean;
    VAR
      BinContent@1000 : Record 7302;
    BEGIN
      BinContent.SETCURRENTKEY(Default);
      BinContent.SETRANGE(Default,TRUE);
      BinContent.SETRANGE("Location Code",LocationCode);
      BinContent.SETRANGE("Item No.",ItemNo);
      BinContent.SETRANGE("Variant Code",VariantCode);
      BinContent.SETFILTER("Bin Code",'<>%1',BinCode);
      EXIT(NOT BinContent.ISEMPTY);
    END;

    [External]
    PROCEDURE CheckBalanceQtyToHandle@19(VAR WhseActivLine2@1000 : Record 5767);
    VAR
      WhseActivLine@1004 : Record 5767;
      WhseActivLine3@1007 : Record 5767;
      TempWhseActivLine@1005 : TEMPORARY Record 5767;
      QtyToPick@1002 : Decimal;
      QtyToPutAway@1003 : Decimal;
      ErrorText@1001 : Text[250];
    BEGIN
      WhseActivLine.COPY(WhseActivLine2);
      WITH WhseActivLine DO BEGIN
        SETCURRENTKEY("Activity Type","No.","Item No.","Variant Code","Action Type");
        SETRANGE("Activity Type","Activity Type");
        SETRANGE("No.","No.");
        SETRANGE("Action Type");
        IF FINDSET THEN
          REPEAT
            IF NOT TempWhseActivLine.GET("Activity Type","No.","Line No.") THEN BEGIN
              WhseActivLine3.COPY(WhseActivLine);

              WhseActivLine3.SETRANGE("Item No.","Item No.");
              WhseActivLine3.SETRANGE("Variant Code","Variant Code");
              WhseActivLine3.SetTrackingFilter("Serial No.","Lot No.");
              OnCheckBalanceQtyToHandleOnAfterSetFilters(WhseActivLine3,WhseActivLine);

              IF (WhseActivLine2."Action Type" = WhseActivLine2."Action Type"::Take) OR
                 (WhseActivLine2.GETFILTER("Action Type") = '')
              THEN BEGIN
                WhseActivLine3.SETRANGE("Action Type",WhseActivLine3."Action Type"::Take);
                IF WhseActivLine3.FINDSET THEN
                  REPEAT
                    QtyToPick := QtyToPick + WhseActivLine3."Qty. to Handle (Base)";
                    TempWhseActivLine := WhseActivLine3;
                    TempWhseActivLine.INSERT;
                  UNTIL WhseActivLine3.NEXT = 0;
              END;

              IF (WhseActivLine2."Action Type" = WhseActivLine2."Action Type"::Place) OR
                 (WhseActivLine2.GETFILTER("Action Type") = '')
              THEN BEGIN
                WhseActivLine3.SETRANGE("Action Type",WhseActivLine3."Action Type"::Place);
                IF WhseActivLine3.FINDSET THEN
                  REPEAT
                    QtyToPutAway := QtyToPutAway + WhseActivLine3."Qty. to Handle (Base)";
                    TempWhseActivLine := WhseActivLine3;
                    TempWhseActivLine.INSERT;
                  UNTIL WhseActivLine3.NEXT = 0;
              END;

              IF QtyToPick <> QtyToPutAway THEN BEGIN
                IF (WhseActivLine3.GETFILTER("Serial No.") <> '') OR
                   (WhseActivLine3.GETFILTER("Lot No.") <> '')
                THEN
                  ErrorText :=
                    STRSUBSTNO(
                      Text016,
                      FIELDCAPTION("Item No."),"Item No.",
                      FIELDCAPTION("Variant Code"),"Variant Code",
                      FIELDCAPTION("Lot No."),"Lot No.",
                      FIELDCAPTION("Serial No."),"Serial No.",
                      QtyToPick,QtyToPutAway)
                ELSE
                  ErrorText :=
                    STRSUBSTNO(
                      Text005,
                      FIELDCAPTION("Item No."),"Item No.",FIELDCAPTION("Variant Code"),
                      "Variant Code",QtyToPick,QtyToPutAway);
                HandleError(ErrorText);
              END;

              QtyToPick := 0;
              QtyToPutAway := 0;
            END;
          UNTIL NEXT = 0;
      END;
    END;

    [External]
    PROCEDURE CheckPutAwayAvailability@14(BinCode@1006 : Code[20];CheckFieldCaption@1003 : Text[100];CheckTableCaption@1002 : Text[100];ValueToPutAway@1000 : Decimal;ValueAvailable@1001 : Decimal;Prohibit@1005 : Boolean);
    BEGIN
      IF ValueToPutAway <= ValueAvailable THEN
        EXIT;
      IF Prohibit THEN
        ERROR(
          Text004,CheckFieldCaption,ValueToPutAway,ValueAvailable,
          CheckTableCaption,BinCode);

      IF NOT CONFIRM(
           STRSUBSTNO(
             Text004,CheckFieldCaption,ValueToPutAway,ValueAvailable,
             CheckTableCaption,BinCode) + STRSUBSTNO(Text002,CheckTableCaption),FALSE)
      THEN
        ERROR(Text007);
    END;

    LOCAL PROCEDURE InitWhseJnlLine@12(ItemJnlLine@1000 : Record 83;VAR WhseJnlLine@1001 : Record 7311;QuantityBase@1002 : Decimal);
    BEGIN
      WITH WhseJnlLine DO BEGIN
        INIT;
        "Journal Template Name" := ItemJnlLine."Journal Template Name";
        "Journal Batch Name" := ItemJnlLine."Journal Batch Name";
        "Location Code" := ItemJnlLine."Location Code";
        "Item No." := ItemJnlLine."Item No.";
        "Registering Date" := ItemJnlLine."Posting Date";
        "User ID" := USERID;
        "Variant Code" := ItemJnlLine."Variant Code";
        IF ItemJnlLine."Qty. per Unit of Measure" = 0 THEN
          ItemJnlLine."Qty. per Unit of Measure" := 1;
        IF Location."Directed Put-away and Pick" THEN BEGIN
          Quantity := ROUND(QuantityBase / ItemJnlLine."Qty. per Unit of Measure",UOMMgt.QtyRndPrecision);
          "Unit of Measure Code" := ItemJnlLine."Unit of Measure Code";
          "Qty. per Unit of Measure" := ItemJnlLine."Qty. per Unit of Measure";
        END ELSE BEGIN
          Quantity := QuantityBase;
          "Unit of Measure Code" := GetBaseUOM(ItemJnlLine."Item No.");
          "Qty. per Unit of Measure" := 1;
        END;
        "Qty. (Base)" := QuantityBase;
        "Qty. (Absolute)" := ABS(Quantity);
        "Qty. (Absolute, Base)" := ABS(QuantityBase);

        "Source Code" := ItemJnlLine."Source Code";
        "Reason Code" := ItemJnlLine."Reason Code";
        "Registering No. Series" := ItemJnlLine."Posting No. Series";
        IF Location."Directed Put-away and Pick" THEN
          CalcCubageAndWeight(
            ItemJnlLine."Item No.",ItemJnlLine."Unit of Measure Code","Qty. (Absolute)",Cubage,Weight);

        OnInitWhseJnlLineCopyFromItemJnlLine(WhseJnlLine,ItemJnlLine);
      END;
    END;

    [External]
    PROCEDURE InitErrorLog@27();
    BEGIN
      LogErrors := TRUE;
      TempErrorLog.DELETEALL;
      NextLineNo := 1;
    END;

    LOCAL PROCEDURE HandleError@30(ErrorText@1000 : Text[250]);
    VAR
      Position@1001 : Integer;
    BEGIN
      IF LogErrors THEN BEGIN
        Position := STRPOS(ErrorText,'\');
        IF Position = 0 THEN
          InsertErrorLog(ErrorText)
        ELSE BEGIN
          REPEAT
            InsertErrorLog(COPYSTR(ErrorText,1,Position - 1));
            ErrorText := DELSTR(ErrorText,1,Position);
            Position := STRPOS(ErrorText,'\');
          UNTIL Position = 0;
          InsertErrorLog(ErrorText);
          InsertErrorLog('');
        END;
      END ELSE
        ERROR(ErrorText);
    END;

    LOCAL PROCEDURE InsertErrorLog@20(ErrorText@1000 : Text[250]);
    BEGIN
      TempErrorLog."Line No." := NextLineNo;
      TempErrorLog.Text := ErrorText;
      TempErrorLog.INSERT;
      NextLineNo := NextLineNo + 1;
    END;

    [External]
    PROCEDURE GetAllowedLocation@65(LocationCode@1000 : Code[10]) : Code[10];
    VAR
      WhseEmployee@1001 : Record 7301;
      IsHandled@1003 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeGetAllowedLocation(LocationCode,IsHandled);
      IF IsHandled THEN
        EXIT(LocationCode);

      CheckUserIsWhseEmployee;
      IF WhseEmployee.GET(USERID,LocationCode) THEN
        EXIT(LocationCode);
      EXIT(GetDefaultLocation);
    END;

    [External]
    PROCEDURE LocationIsAllowed@17(LocationCode@1001 : Code[10]) : Boolean;
    VAR
      WhseEmployee@1002 : Record 7301;
      LocationAllowed@1000 : Boolean;
    BEGIN
      LocationAllowed := WhseEmployee.GET(USERID,LocationCode) OR (USERID = '');
      OnBeforeLocationIsAllowed(LocationCode,LocationAllowed);
      EXIT(LocationAllowed);
    END;

    [External]
    PROCEDURE LocationIsAllowedToView@56(LocationCode@1000 : Code[10]) : Boolean;
    BEGIN
      EXIT((LocationCode = '') OR LocationIsAllowed(LocationCode))
    END;

    LOCAL PROCEDURE GetLocation@10(LocationCode@1000 : Code[10]);
    BEGIN
      IF LocationCode = '' THEN
        CLEAR(Location)
      ELSE
        IF Location.Code <> LocationCode THEN
          Location.GET(LocationCode);
    END;

    LOCAL PROCEDURE GetBin@8(LocationCode@1000 : Code[10];BinCode@1002 : Code[20]);
    BEGIN
      IF (Bin."Location Code" <> LocationCode) OR
         (Bin.Code <> BinCode)
      THEN
        Bin.GET(LocationCode,BinCode);

      GetLocation(LocationCode);
      IF Location."Directed Put-away and Pick" THEN
        Bin.TESTFIELD("Zone Code");
    END;

    LOCAL PROCEDURE GetItemUnitOfMeasure@9(ItemNo@1000 : Code[20];UOMCode@1001 : Code[10]);
    BEGIN
      IF (ItemUnitOfMeasure."Item No." <> ItemNo) OR
         (ItemUnitOfMeasure.Code <> UOMCode)
      THEN
        IF NOT ItemUnitOfMeasure.GET(ItemNo,UOMCode) THEN
          ItemUnitOfMeasure.INIT;
    END;

    [External]
    PROCEDURE GetBaseUOM@31(ItemNo@1000 : Code[20]) : Code[10];
    BEGIN
      GetItem(ItemNo);
      EXIT(Item."Base Unit of Measure");
    END;

    LOCAL PROCEDURE GetItem@35(ItemNo@1000 : Code[20]);
    BEGIN
      IF ItemNo = Item."No." THEN
        EXIT;

      Item.GET(ItemNo);
      IF Item."Item Tracking Code" <> '' THEN
        ItemTrackingCode.GET(Item."Item Tracking Code")
      ELSE
        CLEAR(ItemTrackingCode);
    END;

    LOCAL PROCEDURE GetProdOrderCompLine@11(VAR ProdOrderCompLine@1004 : Record 5407;Status@1000 : Option;ProdOrderNo@1001 : Code[20];ProdOrderLineNo@1002 : Integer;ProdOrdCompLineNo@1003 : Integer) : Boolean;
    BEGIN
      IF (ProdOrderNo = '') OR
         (ProdOrderLineNo = 0) OR
         (ProdOrdCompLineNo = 0)
      THEN
        EXIT(FALSE);
      IF (ProdOrderCompLine.Status <> Status) OR
         (ProdOrderCompLine."Prod. Order No." <> ProdOrderNo) OR
         (ProdOrderCompLine."Prod. Order Line No." <> ProdOrderLineNo) OR
         (ProdOrderCompLine."Line No." <> ProdOrdCompLineNo)
      THEN BEGIN
        IF ProdOrderCompLine.GET(Status,ProdOrderNo,ProdOrderLineNo,ProdOrdCompLineNo) THEN
          EXIT(TRUE);

        EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE ShowWhseDocLine@13(WhseDocType@1008 : 'Receipt,Posted Receipt,Shipment,Internal Put-away,Internal Pick,Production,,Assembly';WhseDocNo@1009 : Code[20];WhseDocLineNo@1010 : Integer);
    VAR
      WhseRcptLine@1011 : Record 7317;
      WhseShptLine@1007 : Record 7321;
      PostedWhseRcptLine@1006 : Record 7319;
      WhseInternalPickLine@1005 : Record 7334;
      WhseInternalPutawayLine@1004 : Record 7332;
      ProdOrderLine@1013 : Record 5406;
      AssemblyLine@1015 : Record 901;
    BEGIN
      CASE WhseDocType OF
        WhseDocType::Receipt:
          BEGIN
            WhseRcptLine.RESET;
            WhseRcptLine.SETRANGE("No.",WhseDocNo);
            WhseRcptLine.SETRANGE("Line No.",WhseDocLineNo);
            PAGE.RUNMODAL(PAGE::"Whse. Receipt Lines",WhseRcptLine);
          END;
        WhseDocType::"Posted Receipt":
          BEGIN
            PostedWhseRcptLine.RESET;
            PostedWhseRcptLine.SETRANGE("No.",WhseDocNo);
            PostedWhseRcptLine.SETRANGE("Line No.",WhseDocLineNo);
            PAGE.RUNMODAL(PAGE::"Posted Whse. Receipt Lines",PostedWhseRcptLine);
          END;
        WhseDocType::Shipment:
          BEGIN
            WhseShptLine.RESET;
            WhseShptLine.SETRANGE("No.",WhseDocNo);
            WhseShptLine.SETRANGE("Line No.",WhseDocLineNo);
            PAGE.RUNMODAL(PAGE::"Whse. Shipment Lines",WhseShptLine);
          END;
        WhseDocType::"Internal Put-away":
          BEGIN
            WhseInternalPutawayLine.RESET;
            WhseInternalPutawayLine.SETRANGE("No.",WhseDocNo);
            WhseInternalPutawayLine.SETRANGE("Line No.",WhseDocLineNo);
            PAGE.RUNMODAL(PAGE::"Whse. Internal Put-away Lines",WhseInternalPutawayLine);
          END;
        WhseDocType::"Internal Pick":
          BEGIN
            WhseInternalPickLine.RESET;
            WhseInternalPickLine.SETRANGE("No.",WhseDocNo);
            WhseInternalPickLine.SETRANGE("Line No.",WhseDocLineNo);
            PAGE.RUNMODAL(PAGE::"Whse. Internal Pick Lines",WhseInternalPickLine);
          END;
        WhseDocType::Production:
          BEGIN
            ProdOrderLine.RESET;
            ProdOrderLine.SETRANGE(Status,ProdOrderLine.Status::Released);
            ProdOrderLine.SETRANGE("Prod. Order No.",WhseDocNo);
            ProdOrderLine.SETRANGE("Line No.",WhseDocLineNo);
            PAGE.RUNMODAL(PAGE::"Prod. Order Line List",ProdOrderLine);
          END;
        WhseDocType::Assembly:
          BEGIN
            AssemblyLine.SETRANGE("Document Type",AssemblyLine."Document Type"::Order);
            AssemblyLine.SETRANGE("Document No.",WhseDocNo);
            AssemblyLine.SETRANGE("Line No.",WhseDocLineNo);
            PAGE.RUNMODAL(PAGE::"Assembly Lines",AssemblyLine);
          END;
      END;
    END;

    [External]
    PROCEDURE ShowPostedWhseShptLine@46(WhseDocNo@1009 : Code[20];WhseDocLineNo@1010 : Integer);
    VAR
      PostedWhseShptLine@1007 : Record 7323;
    BEGIN
      PostedWhseShptLine.RESET;
      PostedWhseShptLine.SETCURRENTKEY("Whse. Shipment No.","Whse Shipment Line No.");
      PostedWhseShptLine.SETRANGE("Whse. Shipment No.",WhseDocNo);
      PostedWhseShptLine.SETRANGE("Whse Shipment Line No.",WhseDocLineNo);
      PAGE.RUNMODAL(PAGE::"Posted Whse. Shipment Lines",PostedWhseShptLine);
    END;

    [External]
    PROCEDURE ShowSourceDocLine@21(SourceType@1004 : Integer;SourceSubType@1011 : Option;SourceNo@1012 : Code[20];SourceLineNo@1013 : Integer;SourceSubLineNo@1014 : Integer);
    VAR
      SalesLine@1001 : Record 37;
      PurchLine@1002 : Record 39;
      TransLine@1003 : Record 5741;
      ProdOrderComp@1005 : Record 5407;
      AssemblyLine@1000 : Record 901;
      ServiceLine@1006 : Record 5902;
    BEGIN
      CASE SourceType OF
        DATABASE::"Sales Line":
          BEGIN
            SalesLine.RESET;
            SalesLine.SETRANGE("Document Type",SourceSubType);
            SalesLine.SETRANGE("Document No.",SourceNo);
            SalesLine.SETRANGE("Line No.",SourceLineNo);
            PAGE.RUNMODAL(PAGE::"Sales Lines",SalesLine);
          END;
        DATABASE::"Purchase Line":
          BEGIN
            PurchLine.RESET;
            PurchLine.SETRANGE("Document Type",SourceSubType);
            PurchLine.SETRANGE("Document No.",SourceNo);
            PurchLine.SETRANGE("Line No.",SourceLineNo);
            PAGE.RUNMODAL(PAGE::"Purchase Lines",PurchLine);
          END;
        DATABASE::"Transfer Line":
          BEGIN
            TransLine.RESET;
            TransLine.SETRANGE("Document No.",SourceNo);
            TransLine.SETRANGE("Line No.",SourceLineNo);
            PAGE.RUNMODAL(PAGE::"Transfer Lines",TransLine);
          END;
        DATABASE::"Prod. Order Component":
          BEGIN
            ProdOrderComp.RESET;
            ProdOrderComp.SETRANGE(Status,SourceSubType);
            ProdOrderComp.SETRANGE("Prod. Order No.",SourceNo);
            ProdOrderComp.SETRANGE("Prod. Order Line No.",SourceLineNo);
            ProdOrderComp.SETRANGE("Line No.",SourceSubLineNo);
            CASE SourceSubType OF
              3: // Released
                PAGE.RUNMODAL(PAGE::"Prod. Order Comp. Line List",ProdOrderComp);
            END;
          END;
        DATABASE::"Assembly Line":
          BEGIN
            AssemblyLine.SETRANGE("Document Type",SourceSubType);
            AssemblyLine.SETRANGE("Document No.",SourceNo);
            AssemblyLine.SETRANGE("Line No.",SourceLineNo);
            PAGE.RUNMODAL(PAGE::"Assembly Lines",AssemblyLine);
          END;
        DATABASE::"Service Line":
          BEGIN
            ServiceLine.SETRANGE("Document Type",SourceSubType);
            ServiceLine.SETRANGE("Document No.",SourceNo);
            ServiceLine.SETRANGE("Line No.",SourceLineNo);
            PAGE.RUN(PAGE::"Service Line List",ServiceLine);
          END;
        ELSE
          OnShowSourceDocLine(SourceType,SourceSubType,SourceNo,SourceLineNo,SourceSubLineNo);
      END;
    END;

    [External]
    PROCEDURE ShowPostedSourceDoc@22(PostedSourceDoc@1004 : ' ,Posted Receipt,,Posted Return Receipt,,Posted Shipment,,Posted Return Shipment,,Posted Transfer Receipt,Posted Transfer Shipment';PostedSourceNo@1012 : Code[20]);
    VAR
      SalesShipmentHeader@1001 : Record 110;
      PurchRcptHeader@1000 : Record 120;
      ReturnShipmentHeader@1002 : Record 6650;
      ReturnReceiptHeader@1005 : Record 6660;
      TransShipmentHeader@1003 : Record 5744;
      TransReceiptHeader@1011 : Record 5746;
    BEGIN
      CASE PostedSourceDoc OF
        PostedSourceDoc::"Posted Shipment":
          BEGIN
            SalesShipmentHeader.RESET;
            SalesShipmentHeader.SETRANGE("No.",PostedSourceNo);
            PAGE.RUNMODAL(PAGE::"Posted Sales Shipment",SalesShipmentHeader);
          END;
        PostedSourceDoc::"Posted Receipt":
          BEGIN
            PurchRcptHeader.RESET;
            PurchRcptHeader.SETRANGE("No.",PostedSourceNo);
            PAGE.RUNMODAL(PAGE::"Posted Purchase Receipt",PurchRcptHeader);
          END;
        PostedSourceDoc::"Posted Return Shipment":
          BEGIN
            ReturnShipmentHeader.RESET;
            ReturnShipmentHeader.SETRANGE("No.",PostedSourceNo);
            PAGE.RUNMODAL(PAGE::"Posted Return Shipment",ReturnShipmentHeader);
          END;
        PostedSourceDoc::"Posted Return Receipt":
          BEGIN
            ReturnReceiptHeader.RESET;
            ReturnReceiptHeader.SETRANGE("No.",PostedSourceNo);
            PAGE.RUNMODAL(PAGE::"Posted Return Receipt",ReturnReceiptHeader);
          END;
        PostedSourceDoc::"Posted Transfer Shipment":
          BEGIN
            TransShipmentHeader.RESET;
            TransShipmentHeader.SETRANGE("No.",PostedSourceNo);
            PAGE.RUNMODAL(PAGE::"Posted Transfer Shipment",TransShipmentHeader);
          END;
        PostedSourceDoc::"Posted Transfer Receipt":
          BEGIN
            TransReceiptHeader.RESET;
            TransReceiptHeader.SETRANGE("No.",PostedSourceNo);
            PAGE.RUNMODAL(PAGE::"Posted Transfer Receipt",TransReceiptHeader);
          END;
      END;
    END;

    [External]
    PROCEDURE ShowSourceDocCard@41(SourceType@1002 : Integer;SourceSubType@1001 : Option;SourceNo@1000 : Code[20]);
    VAR
      SalesHeader@1008 : Record 36;
      PurchHeader@1007 : Record 38;
      TransHeader@1006 : Record 5740;
      ProdOrder@1009 : Record 5405;
      AssemblyHeader@1013 : Record 900;
    BEGIN
      CASE SourceType OF
        DATABASE::"Sales Line":
          BEGIN
            SalesHeader.SETRANGE("Document Type",SourceSubType);
            IF SalesHeader.GET(SourceSubType,SourceNo) THEN
              IF SalesHeader."Document Type" = SalesHeader."Document Type"::Order THEN
                PAGE.RUNMODAL(PAGE::"Sales Order",SalesHeader)
              ELSE
                PAGE.RUNMODAL(PAGE::"Sales Return Order",SalesHeader);
          END;
        DATABASE::"Purchase Line":
          BEGIN
            PurchHeader.SETRANGE("Document Type",SourceSubType);
            IF PurchHeader.GET(SourceSubType,SourceNo) THEN
              IF PurchHeader."Document Type" = PurchHeader."Document Type"::Order THEN
                PAGE.RUNMODAL(PAGE::"Purchase Order",PurchHeader)
              ELSE
                PAGE.RUNMODAL(PAGE::"Purchase Return Order",PurchHeader);
          END;
        DATABASE::"Transfer Line":
          BEGIN
            IF TransHeader.GET(SourceNo) THEN
              PAGE.RUNMODAL(PAGE::"Transfer Order",TransHeader);
          END;
        DATABASE::"Prod. Order Line", DATABASE::"Prod. Order Component":
          BEGIN
            ProdOrder.SETRANGE(Status,SourceSubType);
            IF ProdOrder.GET(SourceSubType,SourceNo) THEN
              PAGE.RUNMODAL(PAGE::"Released Production Order",ProdOrder);
          END;
        DATABASE::"Assembly Line":
          BEGIN
            AssemblyHeader.SETRANGE("Document Type",SourceSubType);
            IF AssemblyHeader.GET(SourceSubType,SourceNo) THEN
              PAGE.RUNMODAL(PAGE::"Assembly Order",AssemblyHeader);
          END;
      END;
    END;

    LOCAL PROCEDURE TransferWhseItemTrkg@24(VAR WhseJnlLine@1000 : Record 7311;ItemJnlLine@1001 : Record 83);
    VAR
      ItemTrackingMgt@1002 : Codeunit 6500;
      WhseSNRequired@1003 : Boolean;
      WhseLNRequired@1004 : Boolean;
    BEGIN
      ItemTrackingMgt.CheckWhseItemTrkgSetup(
        ItemJnlLine."Item No.",WhseSNRequired,WhseLNRequired,FALSE);
      IF NOT (WhseSNRequired OR WhseLNRequired) THEN
        EXIT;
      IF WhseSNRequired THEN BEGIN
        WhseJnlLine.TESTFIELD("Qty. per Unit of Measure",1);
        WhseJnlLine."Serial No." := ItemJnlLine."Serial No.";
      END;
      IF WhseLNRequired THEN
        WhseJnlLine."Lot No." := ItemJnlLine."Lot No.";
      WhseJnlLine."Warranty Date" := ItemJnlLine."Warranty Date";
      WhseJnlLine."Expiration Date" := ItemJnlLine."Item Expiration Date";

      OnAfterTransferWhseItemTrkg(WhseJnlLine,ItemJnlLine);
    END;

    [External]
    PROCEDURE SetTransferLine@29(TransferLine@1000 : Record 5741;VAR WhseJnlLine@1001 : Record 7311;PostingType@1002 : 'Shipment,Receipt';PostedDocNo@1003 : Code[20]);
    BEGIN
      WITH TransferLine DO BEGIN
        WhseJnlLine.SetSource(DATABASE::"Transfer Line",PostingType,"Document No.","Line No.",0);
        WhseJnlLine."Source Document" := WhseMgt.GetSourceDocument(WhseJnlLine."Source Type",WhseJnlLine."Source Subtype");
        IF PostingType = PostingType::Shipment THEN
          WhseJnlLine."Reference Document" := WhseJnlLine."Reference Document"::"Posted T. Shipment"
        ELSE
          WhseJnlLine."Reference Document" := WhseJnlLine."Reference Document"::"Posted T. Receipt";
        WhseJnlLine."Reference No." := PostedDocNo;
        WhseJnlLine."Entry Type" := PostingType;
      END;
    END;

    LOCAL PROCEDURE SetZoneAndBins@71(ItemJnlLine@1001 : Record 83;VAR WhseJnlLine@1000 : Record 7311;ToTransfer@1002 : Boolean);
    BEGIN
      WITH ItemJnlLine DO
        IF (("Entry Type" IN
             ["Entry Type"::Purchase,"Entry Type"::"Positive Adjmt.","Entry Type"::"Assembly Output"]) AND
            (Quantity > 0)) OR
           (("Entry Type" IN
             ["Entry Type"::Sale,"Entry Type"::"Negative Adjmt.","Entry Type"::"Assembly Consumption"]) AND
            (Quantity < 0)) OR
           ToTransfer
        THEN BEGIN
          IF "Entry Type" = "Entry Type"::Transfer THEN
            WhseJnlLine."Entry Type" := WhseJnlLine."Entry Type"::Movement
          ELSE
            WhseJnlLine."Entry Type" := WhseJnlLine."Entry Type"::"Positive Adjmt.";
          IF Location."Directed Put-away and Pick" THEN
            IF "Entry Type" IN ["Entry Type"::"Assembly Output","Entry Type"::"Assembly Consumption"] THEN
              WhseJnlLine."To Bin Code" := "Bin Code"
            ELSE
              WhseJnlLine."To Bin Code" := GetWhseJnlLineBinCode("Source Code","Bin Code",Location."Adjustment Bin Code")
          ELSE
            IF ToTransfer THEN
              WhseJnlLine."To Bin Code" := "New Bin Code"
            ELSE
              WhseJnlLine."To Bin Code" := "Bin Code";
          GetBin("Location Code",WhseJnlLine."To Bin Code");
          WhseJnlLine."To Zone Code" := Bin."Zone Code";
        END ELSE
          IF (("Entry Type" IN
               ["Entry Type"::Purchase,"Entry Type"::"Positive Adjmt.","Entry Type"::"Assembly Output"]) AND
              (Quantity < 0)) OR
             (("Entry Type" IN
               ["Entry Type"::Sale,"Entry Type"::"Negative Adjmt.","Entry Type"::"Assembly Consumption"]) AND
              (Quantity > 0)) OR
             (("Entry Type" = "Entry Type"::Transfer) AND (NOT ToTransfer))
          THEN BEGIN
            IF "Entry Type" = "Entry Type"::Transfer THEN
              WhseJnlLine."Entry Type" := WhseJnlLine."Entry Type"::Movement
            ELSE
              WhseJnlLine."Entry Type" := WhseJnlLine."Entry Type"::"Negative Adjmt.";
            IF Location."Directed Put-away and Pick" THEN
              IF "Entry Type" IN ["Entry Type"::"Assembly Output","Entry Type"::"Assembly Consumption"] THEN
                WhseJnlLine."From Bin Code" := "Bin Code"
              ELSE
                WhseJnlLine."From Bin Code" := GetWhseJnlLineBinCode("Source Code","Bin Code",Location."Adjustment Bin Code")
            ELSE
              WhseJnlLine."From Bin Code" := "Bin Code";
            IF Location."Directed Put-away and Pick" THEN BEGIN
              GetBin("Location Code",WhseJnlLine."From Bin Code");
              WhseJnlLine."From Zone Code" := Bin."Zone Code";
              WhseJnlLine."From Bin Type Code" := Bin."Bin Type Code";
            END;
          END ELSE
            IF "Phys. Inventory" AND (Quantity = 0) AND ("Invoiced Quantity" = 0) THEN BEGIN
              WhseJnlLine."Entry Type" := WhseJnlLine."Entry Type"::"Positive Adjmt.";
              IF Location."Directed Put-away and Pick" THEN
                WhseJnlLine."To Bin Code" := Location."Adjustment Bin Code"
              ELSE
                WhseJnlLine."To Bin Code" := "Bin Code";
              GetBin("Location Code",WhseJnlLine."To Bin Code");
              WhseJnlLine."To Zone Code" := Bin."Zone Code";
            END;

      OnAfterSetZoneAndBins(WhseJnlLine,ItemJnlLine,Location,Bin);
    END;

    LOCAL PROCEDURE SetZoneAndBinsForOutput@23(ItemJnlLine@1002 : Record 83;VAR WhseJnlLine@1000 : Record 7311);
    BEGIN
      WITH ItemJnlLine DO
        IF "Output Quantity" >= 0 THEN BEGIN
          WhseJnlLine."Entry Type" := WhseJnlLine."Entry Type"::"Positive Adjmt.";
          WhseJnlLine."To Bin Code" := "Bin Code";
          IF Location."Directed Put-away and Pick" THEN BEGIN
            GetBin("Location Code",WhseJnlLine."To Bin Code");
            WhseJnlLine."To Zone Code" := Bin."Zone Code";
          END;
        END ELSE BEGIN
          WhseJnlLine."Entry Type" := WhseJnlLine."Entry Type"::"Negative Adjmt.";
          WhseJnlLine."From Bin Code" := "Bin Code";
          IF Location."Directed Put-away and Pick" THEN BEGIN
            GetBin("Location Code",WhseJnlLine."From Bin Code");
            WhseJnlLine."From Zone Code" := Bin."Zone Code";
          END;
        END;
    END;

    LOCAL PROCEDURE SetZoneAndBinsForConsumption@69(ItemJnlLine@1001 : Record 83;VAR WhseJnlLine@1000 : Record 7311);
    VAR
      ProdOrderCompLine@1002 : Record 5407;
    BEGIN
      WITH ItemJnlLine DO
        IF GetProdOrderCompLine(
             ProdOrderCompLine,ProdOrderCompLine.Status::Released,"Order No.","Order Line No.","Prod. Order Comp. Line No.")
        THEN
          IF Quantity > 0 THEN BEGIN
            WhseJnlLine."Entry Type" := WhseJnlLine."Entry Type"::"Negative Adjmt.";
            WhseJnlLine."From Bin Code" := "Bin Code";
            IF Location."Bin Mandatory" AND Location."Require Pick" AND Location."Require Shipment" THEN BEGIN
              IF (ProdOrderCompLine."Planning Level Code" = 0) AND
                 ((ProdOrderCompLine."Flushing Method" = ProdOrderCompLine."Flushing Method"::Manual) OR
                  (ProdOrderCompLine."Flushing Method" = ProdOrderCompLine."Flushing Method"::"Pick + Backward") OR
                  ((ProdOrderCompLine."Flushing Method" = ProdOrderCompLine."Flushing Method"::"Pick + Forward") AND
                   (ProdOrderCompLine."Routing Link Code" <> '')))
              THEN
                IF ProdOrderCompLine."Qty. Picked (Base)" < "Quantity (Base)" THEN
                  ProdOrderCompLine.FIELDERROR("Qty. Picked (Base)");
              GetBin("Location Code",WhseJnlLine."From Bin Code");
              WhseJnlLine."From Zone Code" := Bin."Zone Code";
              WhseJnlLine."From Bin Type Code" := Bin."Bin Type Code";
            END;
          END ELSE BEGIN
            WhseJnlLine."Entry Type" := WhseJnlLine."Entry Type"::"Positive Adjmt.";
            WhseJnlLine."To Bin Code" := "Bin Code";
            IF Location."Directed Put-away and Pick" THEN BEGIN
              GetBin("Location Code",WhseJnlLine."To Bin Code");
              WhseJnlLine."To Zone Code" := Bin."Zone Code";
            END;
          END
        ELSE
          IF Quantity > 0 THEN BEGIN
            WhseJnlLine."Entry Type" := WhseJnlLine."Entry Type"::"Negative Adjmt.";
            WhseJnlLine."From Bin Code" := "Bin Code";
            IF Location."Directed Put-away and Pick" THEN BEGIN
              GetBin("Location Code",WhseJnlLine."From Bin Code");
              WhseJnlLine."From Zone Code" := Bin."Zone Code";
              WhseJnlLine."From Bin Type Code" := Bin."Bin Type Code";
            END;
          END ELSE BEGIN
            WhseJnlLine."Entry Type" := WhseJnlLine."Entry Type"::"Positive Adjmt.";
            WhseJnlLine."To Bin Code" := "Bin Code";
            IF Location."Directed Put-away and Pick" THEN BEGIN
              GetBin("Location Code",WhseJnlLine."To Bin Code");
              WhseJnlLine."To Zone Code" := Bin."Zone Code";
            END;
          END;
    END;

    [External]
    PROCEDURE SerialNoOnInventory@34(LocationCode@1003 : Code[10];ItemNo@1000 : Code[20];VariantCode@1001 : Code[10];SerialNo@1002 : Code[50]) : Boolean;
    VAR
      WhseEntry@1004 : Record 7312;
    BEGIN
      //**4PS: db, 25-02-13: C005943 (declaration SerialNo 20->40)
      WITH WhseEntry DO BEGIN
        GetLocation(LocationCode);
        SETCURRENTKEY(
          "Item No.","Bin Code","Location Code","Variant Code",
          "Unit of Measure Code","Lot No.","Serial No.");
        SETRANGE("Item No.",ItemNo);
        SETFILTER("Bin Code",'<>%1',Location."Adjustment Bin Code");
        SETRANGE("Location Code",LocationCode);
        SETRANGE("Variant Code",VariantCode);
        SETRANGE("Serial No.",SerialNo);
        CALCSUMS("Qty. (Base)");
        EXIT("Qty. (Base)" > 0);
      END;
    END;

    LOCAL PROCEDURE CheckSerialNo@33(ItemNo@1002 : Code[20];VariantCode@1001 : Code[10];LocationCode@1005 : Code[10];BinCode@1004 : Code[20];UOMCode@1007 : Code[10];SerialNo@1000 : Code[50];QuantityBase@1003 : Decimal);
    VAR
      BinContent@1006 : Record 7302;
    BEGIN
      //**4PS: db, 25-02-13: C005943 (declaration SerialNo 20->40)
      BinContent.GET(LocationCode,BinCode,ItemNo,VariantCode,UOMCode);
      BinContent.SETRANGE("Serial No. Filter",SerialNo);
      BinContent.CALCFIELDS("Quantity (Base)");
      IF BinContent."Quantity (Base)" < ABS(QuantityBase) THEN
        BinContent.FIELDERROR(
          "Quantity (Base)",STRSUBSTNO(Text000,ABS(QuantityBase) - 1));
    END;

    LOCAL PROCEDURE CheckLotNo@32(ItemNo@1006 : Code[20];VariantCode@1005 : Code[10];LocationCode@1004 : Code[10];BinCode@1003 : Code[20];UOMCode@1002 : Code[10];LotNo@1001 : Code[50];QuantityBase@1000 : Decimal);
    VAR
      BinContent@1007 : Record 7302;
    BEGIN
      BinContent.GET(LocationCode,BinCode,ItemNo,VariantCode,UOMCode);
      BinContent.SETRANGE("Lot No. Filter",LotNo);
      BinContent.CALCFIELDS("Quantity (Base)");
      IF BinContent."Quantity (Base)" < ABS(QuantityBase) THEN
        BinContent.FIELDERROR(
          "Quantity (Base)",STRSUBSTNO(Text000,BinContent."Quantity (Base)" - ABS(QuantityBase)));
    END;

    [External]
    PROCEDURE BinLookUp@38(LocationCode@1002 : Code[10];ItemNo@1001 : Code[20];VariantCode@1000 : Code[10];ZoneCode@1004 : Code[10]) : Code[20];
    VAR
      Bin@1003 : Record 7354;
    BEGIN
      //For Projects en service orders use function BinLookUpSpecific
      Bin.SETRANGE("Location Code",LocationCode);
      Bin.SETRANGE("Item Filter",ItemNo);
      Bin.SETRANGE("Variant Filter",VariantCode);
      IF ZoneCode <> '' THEN
        Bin.SETRANGE("Zone Code",ZoneCode);
      IF PAGE.RUNMODAL(0,Bin) = ACTION::LookupOK THEN
        EXIT(Bin.Code);
    END;

    [External]
    PROCEDURE BinContentLookUp@39(LocationCode@1002 : Code[10];ItemNo@1001 : Code[20];VariantCode@1000 : Code[10];ZoneCode@1004 : Code[10];CurrBinCode@1005 : Code[20]) : Code[20];
    BEGIN
      EXIT(BinContentLookUp2(LocationCode,ItemNo,VariantCode,ZoneCode,'','',CurrBinCode));
    END;

    [External]
    PROCEDURE BinContentLookUp2@53(LocationCode@1002 : Code[10];ItemNo@1001 : Code[20];VariantCode@1000 : Code[10];ZoneCode@1004 : Code[10];LotNo@1005 : Code[50];SerialNo@1006 : Code[50];CurrBinCode@1007 : Code[20]) : Code[20];
    VAR
      BinContent@1003 : Record 7302;
    BEGIN
      //**4PS: db, 25-02-13: C005943 (declaration SerialNo 20->40)
      GetItem(ItemNo);
      BinContent.SETCURRENTKEY("Location Code","Item No.","Variant Code");
      BinContent.SETRANGE("Location Code",LocationCode);
      BinContent.SETRANGE("Item No.",ItemNo);
      BinContent.SETRANGE("Variant Code",VariantCode);

      IF ItemTrackingCode."SN Warehouse Tracking" THEN
        IF SerialNo <> '' THEN
          BinContent.SETRANGE("Serial No. Filter",SerialNo);
      IF ItemTrackingCode."Lot Warehouse Tracking" THEN
        IF LotNo <> '' THEN
          BinContent.SETRANGE("Lot No. Filter",LotNo);

      IF ZoneCode <> '' THEN
        BinContent.SETRANGE("Zone Code",ZoneCode);

      BinContent.SETRANGE("Bin Code",CurrBinCode);
      IF BinContent.FINDFIRST THEN;
      BinContent.SETRANGE("Bin Code");

      IF PAGE.RUNMODAL(0,BinContent) = ACTION::LookupOK THEN
        EXIT(BinContent."Bin Code");
    END;

    [External]
    PROCEDURE FindBin@36(LocationCode@1004 : Code[10];BinCode@1005 : Code[20];ZoneCode@1001 : Code[10]);
    VAR
      Bin@1000 : Record 7354;
    BEGIN
      IF ZoneCode <> '' THEN BEGIN
        Bin.SETCURRENTKEY("Location Code","Zone Code",Code);
        Bin.SETRANGE("Location Code",LocationCode);
        Bin.SETRANGE("Zone Code",ZoneCode);
        Bin.SETRANGE(Code,BinCode);
        Bin.FINDFIRST;
      END ELSE
        Bin.GET(LocationCode,BinCode);
    END;

    [External]
    PROCEDURE FindBinContent@40(LocationCode@1002 : Code[10];BinCode@1004 : Code[20];ItemNo@1001 : Code[20];VariantCode@1000 : Code[10];ZoneCode@1005 : Code[10]);
    VAR
      BinContent@1003 : Record 7302;
    BEGIN
      BinContent.SETRANGE("Location Code",LocationCode);
      BinContent.SETRANGE("Bin Code",BinCode);
      BinContent.SETRANGE("Item No.",ItemNo);
      BinContent.SETRANGE("Variant Code",VariantCode);
      IF ZoneCode <> '' THEN
        BinContent.SETRANGE("Zone Code",ZoneCode);
      BinContent.FINDFIRST;
    END;

    [External]
    PROCEDURE CalcLineReservedQtyNotonInvt@52(SourceType@1000 : Integer;SourceSubType@1004 : Option;SourceNo@1001 : Code[20];SourceLineNo@1002 : Integer;SourceSubLineNo@1003 : Integer) : Decimal;
    VAR
      ReservEntry@1005 : Record 337;
      ReservQtyNotonInvt@1006 : Decimal;
    BEGIN
      ReservEntry.SETCURRENTKEY(
        "Source ID","Source Ref. No.","Source Type","Source Subtype",
        "Source Batch Name","Source Prod. Order Line","Reservation Status");
      IF SourceType = DATABASE::"Prod. Order Component" THEN BEGIN
        ReservEntry.SetSourceFilter(SourceType,SourceSubType,SourceNo,SourceSubLineNo,TRUE);
        ReservEntry.SetSourceFilter2('',SourceLineNo);
      END ELSE BEGIN
        ReservEntry.SetSourceFilter(SourceType,SourceSubType,SourceNo,SourceLineNo,TRUE);
        ReservEntry.SetSourceFilter2('',0);
      END;
      ReservEntry.SETRANGE("Reservation Status",ReservEntry."Reservation Status"::Reservation);
      ReservEntry.SETFILTER("Expected Receipt Date",'<>%1',0D);
      ReservEntry.SETFILTER("Shipment Date",'<>%1',0D);
      IF ReservEntry.FIND('-') THEN
        REPEAT
          ReservQtyNotonInvt := ReservQtyNotonInvt + ABS(ReservEntry."Quantity (Base)");
        UNTIL ReservEntry.NEXT = 0;
      EXIT(ReservQtyNotonInvt);
    END;

    [External]
    PROCEDURE GetCaption@44(DestType@1004 : ' ,Customer,Vendor,Location,Item,Family,Sales Order';SourceDoc@1009 : ' ,Sales Order,,,Sales Return Order,Purchase Order,,,Purchase Return Order,Inbound Transfer,Outbound Transfer,Prod. Consumption,Prod. Output';Selection@1000 : Integer) : Text[50];
    VAR
      PurchHeader@1003 : Record 38;
      Vendor@1001 : Record 23;
      Customer@1002 : Record 18;
      Location@1005 : Record 14;
      Item@1006 : Record 27;
      Family@1007 : Record 99000773;
      SalesHeader@1008 : Record 36;
      WhseActivHdr@1010 : Record 5766;
    BEGIN
      CASE Selection OF
        0:
          CASE DestType OF
            DestType::Vendor:
              EXIT(Vendor.TABLECAPTION + ' ' + Vendor.FIELDCAPTION("No."));
            DestType::Customer:
              EXIT(Customer.TABLECAPTION + ' ' + Customer.FIELDCAPTION("No."));
            DestType::Location:
              EXIT(Location.TABLECAPTION + ' ' + Location.FIELDCAPTION(Code));
            DestType::Item:
              EXIT(Item.TABLECAPTION + ' ' + Item.FIELDCAPTION("No."));
            DestType::Family:
              EXIT(Family.TABLECAPTION + ' ' + Family.FIELDCAPTION("No."));
            DestType::"Sales Order":
              EXIT(Text009 + ' ' + SalesHeader.FIELDCAPTION("No."));
            ELSE
              EXIT(WhseActivHdr.FIELDCAPTION("Destination No."));
          END;
        1:
          CASE DestType OF
            DestType::Vendor:
              EXIT(Vendor.TABLECAPTION + ' ' + Vendor.FIELDCAPTION(Name));
            DestType::Customer:
              EXIT(Customer.TABLECAPTION + ' ' + Customer.FIELDCAPTION(Name));
            DestType::Location:
              EXIT(Location.TABLECAPTION + ' ' + Location.FIELDCAPTION(Name));
            DestType::Item:
              EXIT(Item.TABLECAPTION + ' ' + Item.FIELDCAPTION(Description));
            DestType::Family:
              EXIT(Family.TABLECAPTION + ' ' + Family.FIELDCAPTION(Description));
            DestType::"Sales Order":
              EXIT(Text009 + ' ' + SalesHeader.FIELDCAPTION("Sell-to Customer Name"));
            ELSE
              EXIT(Text008);
          END;
        2:
          IF SourceDoc IN [
                           SourceDoc::"Purchase Order",
                           SourceDoc::"Purchase Return Order"]
          THEN
            EXIT(PurchHeader.FIELDCAPTION("Vendor Shipment No."))
          ELSE
            EXIT(WhseActivHdr.FIELDCAPTION("External Document No."));
        3:
          CASE SourceDoc OF
            SourceDoc::"Purchase Order":
              EXIT(PurchHeader.FIELDCAPTION("Vendor Invoice No."));
            SourceDoc::"Purchase Return Order":
              EXIT(PurchHeader.FIELDCAPTION("Vendor Cr. Memo No."));
            ELSE
              EXIT(WhseActivHdr.FIELDCAPTION("External Document No.2"));
          END;
      END;
    END;

    [External]
    PROCEDURE GetDestinationName@42(DestType@1000 : ' ,Customer,Vendor,Location,Item,Family,Sales Order';DestNo@1007 : Code[20]) : Text[100];
    VAR
      Vendor@1006 : Record 23;
      Customer@1005 : Record 18;
      Location@1004 : Record 14;
      Item@1003 : Record 27;
      Family@1002 : Record 99000773;
      SalesHeader@1001 : Record 36;
    BEGIN
      CASE DestType OF
        DestType::Customer:
          IF Customer.GET(DestNo) THEN
            EXIT(Customer.Name);
        DestType::Vendor:
          IF Vendor.GET(DestNo) THEN
            EXIT(Vendor.Name);
        DestType::Location:
          IF Location.GET(DestNo) THEN
            EXIT(Location.Name);
        DestType::Item:
          IF Item.GET(DestNo) THEN
            EXIT(Item.Description);
        DestType::Family:
          IF Family.GET(DestNo) THEN
            EXIT(Family.Description);
        DestType::"Sales Order":
          IF SalesHeader.GET(SalesHeader."Document Type"::Order,DestNo) THEN
            EXIT(SalesHeader."Sell-to Customer Name");
      END;
    END;

    LOCAL PROCEDURE CalcReservEntryQuantity@50(WhseJnlLine@1001 : Record 7311) : Decimal;
    VAR
      ReservEntry@1000 : Record 337;
    BEGIN
      WITH WhseJnlLine DO BEGIN
        IF "Source Type" = DATABASE::"Prod. Order Component" THEN BEGIN
          ReservEntry.SetSourceFilter("Source Type","Source Subtype","Journal Template Name","Source Subline No.",TRUE);
          ReservEntry.SetSourceFilter2("Journal Batch Name","Source Line No.");
        END ELSE BEGIN
          ReservEntry.SetSourceFilter("Source Type","Source Subtype","Journal Template Name","Source Line No.",TRUE);
          ReservEntry.SetSourceFilter2("Journal Batch Name",0);
        END;
        ReservEntry.SetTrackingFilter("Serial No.","Lot No.");
        IF ReservEntry.FINDFIRST THEN
          EXIT(ReservEntry."Quantity (Base)");
        EXIT("Qty. (Base)");
      END;
    END;

    [External]
    PROCEDURE GetATOSalesLine@43(SourceType@1003 : Integer;SourceSubtype@1002 : Option;SourceID@1001 : Code[20];SourceRefNo@1000 : Integer;VAR SalesLine@1004 : Record 37) : Boolean;
    BEGIN
      IF SourceType <> DATABASE::"Sales Line" THEN
        EXIT(FALSE);
      IF SalesLine.GET(SourceSubtype,SourceID,SourceRefNo) THEN
        EXIT(SalesLine."Qty. to Asm. to Order (Base)" <> 0);
    END;

    LOCAL PROCEDURE SetFiltersOnATOInvtPick@45(SalesLine@1000 : Record 37;VAR WhseActivityLine@1001 : Record 5767);
    BEGIN
      WITH WhseActivityLine DO BEGIN
        SETRANGE("Activity Type","Activity Type"::"Invt. Pick");
        SetSourceFilter(DATABASE::"Sales Line",SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.",0,FALSE);
        SETRANGE("Assemble to Order",TRUE);
        IF "Serial No." <> '' THEN
          SETRANGE("Serial No.","Serial No.");
        IF "Lot No." <> '' THEN
          SETRANGE("Lot No.","Lot No.");
      END;
    END;

    [External]
    PROCEDURE ATOInvtPickExists@47(SalesLine@1000 : Record 37) : Boolean;
    VAR
      WhseActivityLine@1001 : Record 5767;
    BEGIN
      SetFiltersOnATOInvtPick(SalesLine,WhseActivityLine);
      EXIT(NOT WhseActivityLine.ISEMPTY);
    END;

    [External]
    PROCEDURE CalcQtyBaseOnATOInvtPick@48(SalesLine@1000 : Record 37;SerialNo@1002 : Code[50];LotNo@1001 : Code[50]) QtyBase : Decimal;
    VAR
      WhseActivityLine@1004 : Record 5767;
    BEGIN
      WhseActivityLine."Serial No." := SerialNo;
      WhseActivityLine."Lot No." := LotNo;
      SetFiltersOnATOInvtPick(SalesLine,WhseActivityLine);
      IF WhseActivityLine.FINDSET THEN
        REPEAT
          QtyBase += WhseActivityLine."Qty. Outstanding (Base)";
        UNTIL WhseActivityLine.NEXT = 0;
    END;

    [External]
    PROCEDURE CheckOutboundBlockedBin@49(LocationCode@1000 : Code[10];BinCode@1001 : Code[20];ItemNo@1002 : Code[20];VariantCode@1003 : Code[10];UnitOfMeasureCode@1004 : Code[10]);
    BEGIN
      CheckBlockedBin(LocationCode,BinCode,ItemNo,VariantCode,UnitOfMeasureCode,FALSE);
    END;

    [External]
    PROCEDURE CheckInboundBlockedBin@58(LocationCode@1004 : Code[10];BinCode@1003 : Code[20];ItemNo@1002 : Code[20];VariantCode@1001 : Code[10];UnitOfMeasureCode@1000 : Code[10]);
    BEGIN
      CheckBlockedBin(LocationCode,BinCode,ItemNo,VariantCode,UnitOfMeasureCode,TRUE);
    END;

    LOCAL PROCEDURE SetFiltersOnATOWhseShpt@60(SalesLine@1000 : Record 37;VAR WhseShptLine@1001 : Record 7321);
    BEGIN
      WITH WhseShptLine DO BEGIN
        SetSourceFilter(DATABASE::"Sales Line",SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.",FALSE);
        SETRANGE("Assemble to Order",TRUE);
      END;
    END;

    [External]
    PROCEDURE ATOWhseShptExists@51(SalesLine@1000 : Record 37) : Boolean;
    VAR
      WhseShptLine@1001 : Record 7321;
    BEGIN
      SetFiltersOnATOWhseShpt(SalesLine,WhseShptLine);
      EXIT(NOT WhseShptLine.ISEMPTY);
    END;

    LOCAL PROCEDURE CheckBlockedBin@59(LocationCode@1004 : Code[10];BinCode@1003 : Code[20];ItemNo@1002 : Code[20];VariantCode@1001 : Code[10];UnitOfMeasureCode@1000 : Code[10];CheckInbound@1005 : Boolean);
    VAR
      BinContent@1006 : Record 7302;
    BEGIN
      GetLocation(LocationCode);
      IF Location."Directed Put-away and Pick" THEN
        IF BinContent.GET(LocationCode,BinCode,ItemNo,VariantCode,UnitOfMeasureCode) THEN BEGIN
          IF (CheckInbound AND
              (BinContent."Block Movement" IN [BinContent."Block Movement"::Inbound,BinContent."Block Movement"::All])) OR
             (NOT CheckInbound AND
              (BinContent."Block Movement" IN [BinContent."Block Movement"::Outbound,BinContent."Block Movement"::All]))
          THEN
            BinContent.FIELDERROR("Block Movement");
        END ELSE
          IF Location."Bin Mandatory" THEN BEGIN
            GetBin(LocationCode,BinCode);
            IF (CheckInbound AND (Bin."Block Movement" IN [Bin."Block Movement"::Inbound,Bin."Block Movement"::All])) OR
               (NOT CheckInbound AND (Bin."Block Movement" IN [Bin."Block Movement"::Outbound,Bin."Block Movement"::All]))
            THEN
              Bin.FIELDERROR("Block Movement");
          END;
    END;

    LOCAL PROCEDURE GetWhseJnlLineBinCode@28(SourceCode@1000 : Code[10];BinCode@1001 : Code[20];AdjBinCode@1002 : Code[20]) : Code[20];
    VAR
      SourceCodeSetup@1003 : Record 242;
    BEGIN
      IF BinCode = '' THEN
        EXIT(AdjBinCode);
      SourceCodeSetup.GET;
      IF SourceCode = SourceCodeSetup."Service Management" THEN
        EXIT(BinCode);
      EXIT(AdjBinCode);
    END;

    [External]
    PROCEDURE GetLastOperationLocationCode@70(RoutingNo@1000 : Code[20];RoutingVersionCode@1001 : Code[20]) : Code[10];
    VAR
      RoutingLine@1003 : Record 99000764;
    BEGIN
      WITH RoutingLine DO BEGIN
        SETRANGE("Routing No.",RoutingNo);
        SETRANGE("Version Code",RoutingVersionCode);
        IF FINDLAST THEN
          EXIT(GetProdCenterLocationCode(Type,"No."));
      END;
    END;

    [External]
    PROCEDURE GetLastOperationFromBinCode@26(RoutingNo@1000 : Code[20];RoutingVersionCode@1001 : Code[20];LocationCode@1002 : Code[10];UseFlushingMethod@1006 : Boolean;FlushingMethod@1007 : 'Manual,Forward,Backward,Pick + Forward,Pick + Backward') : Code[20];
    VAR
      RoutingLine@1003 : Record 99000764;
    BEGIN
      WITH RoutingLine DO BEGIN
        SETRANGE("Routing No.",RoutingNo);
        SETRANGE("Version Code",RoutingVersionCode);
        IF FINDLAST THEN
          EXIT(GetProdCenterBinCode(Type,"No.",LocationCode,UseFlushingMethod,FlushingMethod));
      END;
    END;

    [External]
    PROCEDURE GetProdRtngLastOperationFromBinCode@61(ProdOrderStatus@1001 : Option;ProdOrderNo@1006 : Code[20];RoutingRefNo@1007 : Integer;RoutingNo@1000 : Code[20];LocationCode@1002 : Code[10]) : Code[20];
    VAR
      ProdOrderRoutingLine@1003 : Record 5409;
    BEGIN
      WITH ProdOrderRoutingLine DO BEGIN
        SETRANGE(Status,ProdOrderStatus);
        SETRANGE("Prod. Order No.",ProdOrderNo);
        SETRANGE("Routing Reference No.",RoutingRefNo);
        SETRANGE("Routing No.",RoutingNo);
        IF FINDLAST THEN
          EXIT(GetProdCenterBinCode(Type,"No.",LocationCode,FALSE,0));
      END;
    END;

    [External]
    PROCEDURE GetPlanningRtngLastOperationFromBinCode@64(WkshTemplateName@1000 : Code[10];WkshBatchName@1003 : Code[10];WkshLineNo@1004 : Integer;LocationCode@1005 : Code[10]) : Code[20];
    VAR
      PlanningRoutingLine@1001 : Record 99000830;
    BEGIN
      WITH PlanningRoutingLine DO BEGIN
        SETRANGE("Worksheet Template Name",WkshTemplateName);
        SETRANGE("Worksheet Batch Name",WkshBatchName);
        SETRANGE("Worksheet Line No.",WkshLineNo);
        IF FINDLAST THEN
          EXIT(GetProdCenterBinCode(Type,"No.",LocationCode,FALSE,0));
      END;
    END;

    [External]
    PROCEDURE GetProdCenterLocationCode@72(Type@1004 : 'Work Center,Machine Center';No@1003 : Code[20]) : Code[10];
    VAR
      WorkCenter@1000 : Record 99000754;
      MachineCenter@1001 : Record 99000758;
    BEGIN
      CASE Type OF
        Type::"Work Center":
          BEGIN
            WorkCenter.GET(No);
            EXIT(WorkCenter."Location Code");
          END;
        Type::"Machine Center":
          BEGIN
            MachineCenter.GET(No);
            EXIT(MachineCenter."Location Code");
          END;
      END;
    END;

    [External]
    PROCEDURE GetProdCenterBinCode@66(Type@1004 : 'Work Center,Machine Center';No@1003 : Code[20];LocationCode@1002 : Code[10];UseFlushingMethod@1001 : Boolean;FlushingMethod@1000 : 'Manual,Forward,Backward,Pick + Forward,Pick + Backward') : Code[20];
    BEGIN
      CASE Type OF
        Type::"Work Center":
          EXIT(GetWorkCenterBinCode(No,LocationCode,UseFlushingMethod,FlushingMethod));
        Type::"Machine Center":
          EXIT(GetMachineCenterBinCode(No,LocationCode,UseFlushingMethod,FlushingMethod));
      END;
    END;

    LOCAL PROCEDURE GetMachineCenterBinCode@63(MachineCenterNo@1000 : Code[20];LocationCode@1002 : Code[10];UseFlushingMethod@1004 : Boolean;FlushingMethod@1003 : 'Manual,Forward,Backward,Pick + Forward,Pick + Backward') : Code[20];
    VAR
      MachineCenter@1001 : Record 99000758;
    BEGIN
      IF MachineCenter.GET(MachineCenterNo) THEN BEGIN
        IF (MachineCenter."Location Code" = LocationCode) AND
           (MachineCenter."From-Production Bin Code" <> '')
        THEN
          EXIT(MachineCenter.GetBinCode(UseFlushingMethod,FlushingMethod));

        EXIT(GetWorkCenterBinCode(MachineCenter."Work Center No.",LocationCode,UseFlushingMethod,FlushingMethod));
      END;
    END;

    LOCAL PROCEDURE GetWorkCenterBinCode@62(WorkCenterNo@1003 : Code[20];LocationCode@1004 : Code[10];UseFlushingMethod@1001 : Boolean;FlushingMethod@1000 : 'Manual,Forward,Backward,Pick + Forward,Pick + Backward') : Code[20];
    VAR
      WorkCenter@1002 : Record 99000754;
    BEGIN
      IF WorkCenter.GET(WorkCenterNo) THEN
        IF WorkCenter."Location Code" = LocationCode THEN
          EXIT(WorkCenter.GetBinCode(UseFlushingMethod,FlushingMethod));
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCheckWhseJnlLine@76(VAR WhseJnlLine@1003 : Record 7311;SourceJnl@1002 : ' ,ItemJnl,OutputJnl,ConsumpJnl,WhseJnl';DecreaseQtyBase@1001 : Decimal;ToTransfer@1000 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCreateWhseJnlLine@77(VAR WhseJournalLine@1000 : Record 7311;ItemJournalLine@1001 : Record 83;ToTransfer@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCreateWhseJnlLineFromConsumJnl@81(VAR WhseJournalLine@1001 : Record 7311;ItemJournalLine@1000 : Record 83);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCreateWhseJnlLineFromOutputJnl@80(VAR WhseJournalLine@1001 : Record 7311;ItemJournalLine@1000 : Record 83);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSetZoneAndBins@79(VAR WarehouseJournalLine@1000 : Record 7311;ItemJournalLine@1001 : Record 83;Location@1002 : Record 14;Bin@1003 : Record 7354);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterTransferWhseItemTrkg@75(VAR WarehouseJournalLine@1000 : Record 7311;ItemJournalLine@1001 : Record 83);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCheckItemJnlLineLocation@1000(VAR ItemJournalLine@1000 : Record 83;VAR xItemJournalLine@1001 : Record 83;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCheckItemJnlLineFieldChange@1001(VAR ItemJournalLine@1000 : Record 83;VAR xItemJournalLine@1001 : Record 83;CurrentFieldCaption@1002 : Text[30];VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCheckUserIsWhseEmployee@83(Location@1000 : Record 14;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeGetAllowedLocation@84(VAR LocationCode@1000 : Code[10];VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeGetDefaultLocation@82(VAR LocationCode@1000 : Code[10];VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeLocationIsAllowed@78(LocationCode@1000 : Code[10];VAR LocationAllowed@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCheckBalanceQtyToHandleOnAfterSetFilters@1002(VAR ToWarehouseActivityLine@1000 : Record 5767;FromWarehouseActivityLine@1001 : Record 5767);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnInitWhseJnlLineCopyFromItemJnlLine@73(VAR WarehouseJournalLine@1000 : Record 7311;ItemJournalLine@1001 : Record 83);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnShowSourceDocLine@74(SourceType@1004 : Integer;SourceSubType@1003 : Option;SourceNo@1002 : Code[20];SourceLineNo@1001 : Integer;SourceSubLineNo@1000 : Integer);
    BEGIN
    END;

    PROCEDURE BinLookUpSpecific@1100409000(LocationCode@1002 : Code[10];ItemNo@1001 : Code[20];VariantCode@1000 : Code[10];ZoneCode@1004 : Code[10];JobCode@1210190000 : Code[20];ServOrderCode@1210190001 : Code[20];CurrBinCode@1100409000 : Code[20]) : Code[20];
    VAR
      Bin@1003 : Record 7354;
      JobSetup@1210190002 : Record 315;
    BEGIN
      //**4PS Copy Of BinLookUp
      Bin.SETRANGE("Location Code",LocationCode);
      Bin.SETRANGE("Item Filter",ItemNo);
      Bin.SETRANGE("Variant Filter",VariantCode);
      IF ZoneCode <> '' THEN
        Bin.SETRANGE("Zone Code",ZoneCode);

      JobSetup.GET;
      IF JobCode <> '' THEN BEGIN
        Bin.SETRANGE("Job Filter", JobCode);
        IF JobSetup."Preferred Bin Location Binding" THEN
          Bin.SETRANGE("Job Bin", TRUE);
      END;
      IF ServOrderCode <> '' THEN BEGIN
        Bin.SETRANGE("Service Order Filter", ServOrderCode);
        IF JobSetup."Preferred Bin Location Binding" THEN
          Bin.SETRANGE("Service Order Bin", TRUE);
      END;

      //C015258.sn
      Bin.SETRANGE(Code,CurrBinCode);
      IF Bin.FINDFIRST THEN;
      Bin.SETRANGE(Code);
      //C015258.en

      IF PAGE.RUNMODAL(0,Bin) = ACTION::LookupOK THEN
        EXIT(Bin.Code);
    END;

    BEGIN
    END.
  }
}

