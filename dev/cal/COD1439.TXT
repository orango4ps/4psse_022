OBJECT Codeunit 1439 Headline Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      MorningGreetingTxt@1006 : TextConst '@@@=%1 is the user name. This is displayed between 00:00 and 10:59.;ENU=Good morning, %1!;NOR=God morgen, %1!';
      LateMorningGreetingTxt@1005 : TextConst '@@@=%1 is the user name.  This is displayed between 11:00 and 11:59.;ENU=Hi, %1!;NOR=Hei, %1!';
      NoonGreetingTxt@1004 : TextConst '@@@=%1 is the user name.  This is displayed between 12:00 and 13:59.;ENU=Hi, %1!;NOR=Hei, %1!';
      AfternoonGreetingTxt@1003 : TextConst '@@@=%1 is the user name.  This is displayed between 14:00 and 18:59.;ENU=Good afternoon, %1!;NOR=God ettermiddag, %1!';
      EveningGreetingTxt@1001 : TextConst '@@@=%1 is the user name.  This is displayed between 19:00 and 23:59.;ENU=Good evening, %1!;NOR=God kveld, %1!';
      TimeOfDay@1002 : 'Morning,LateMorning,Noon,Afternoon,Evening';
      SimpleMorningGreetingTxt@1013 : TextConst '@@@=" This is displayed between 00:00 and 10:59.";ENU=Good morning!;NOR=God morgen!';
      SimpleLateMorningGreetingTxt@1012 : TextConst '@@@=" This is displayed between 11:00 and 11:59.";ENU=Hi!;NOR=Hei!';
      SimpleNoonGreetingTxt@1011 : TextConst '@@@=" This is displayed between 12:00 and 13:59.";ENU=Hi!;NOR=Hei!';
      SimpleAfternoonGreetingTxt@1010 : TextConst '@@@=" This is displayed between 14:00 and 18:59.";ENU=Good afternoon!;NOR=God ettermiddag!';
      SimpleEveningGreetingTxt@1009 : TextConst '@@@=" This is displayed between 19:00 and 23:59.";ENU=Good evening!;NOR=God kveld!';

    [External]
    PROCEDURE Truncate@3(TextToTruncate@1000 : Text;MaxLength@1001 : Integer) : Text;
    BEGIN
      IF STRLEN(TextToTruncate) <= MaxLength THEN
        EXIT(TextToTruncate);

      IF MaxLength <= 0 THEN
        EXIT('');

      IF MaxLength <= 3 THEN
        EXIT(COPYSTR(TextToTruncate,1,MaxLength));

      EXIT(COPYSTR(TextToTruncate,1,MaxLength - 3) + '...');
    END;

    [External]
    PROCEDURE Emphasize@4(TextToEmphasize@1000 : Text) : Text;
    BEGIN
      IF TextToEmphasize <> '' THEN
        EXIT(STRSUBSTNO('<emphasize>%1</emphasize>',TextToEmphasize));
    END;

    [External]
    PROCEDURE GetHeadlineText@7(Qualifier@1000 : Text;Payload@1001 : Text;VAR ResultText@1002 : Text[250]) : Boolean;
    VAR
      TextManagement@1004 : Codeunit 41;
      PayloadWithoutEmphasize@1003 : Text[158];
      PayloadTagsLength@1005 : Integer;
      QualifierTagsLength@1006 : Integer;
    BEGIN
      QualifierTagsLength := 23;
      PayloadTagsLength := 19;

      IF STRLEN(Qualifier) + STRLEN(Payload) > 250 - QualifierTagsLength - PayloadTagsLength THEN
        EXIT(FALSE); // this won't fit

      IF Payload = '' THEN
        EXIT(FALSE); // payload should not be empty

      IF STRLEN(Qualifier) > GetMaxQualifierLength THEN
        EXIT(FALSE); // qualifier is too long to be a qualifier

      TextManagement.ReplaceRegex(Payload,'<emphasize>|</emphasize>','',PayloadWithoutEmphasize);
      IF STRLEN(PayloadWithoutEmphasize) > GetMaxPayloadLength THEN
        EXIT(FALSE); // payload is too long for being a headline

      ResultText := COPYSTR(GetQualifierText(Qualifier) + GetPayloadText(Payload),1,MAXSTRLEN(ResultText));
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetPayloadText@8(PayloadText@1000 : Text) : Text;
    BEGIN
      IF PayloadText <> '' THEN
        EXIT(STRSUBSTNO('<payload>%1</payload>',PayloadText));
    END;

    LOCAL PROCEDURE GetQualifierText@9(QualifierText@1000 : Text) : Text;
    BEGIN
      IF QualifierText <> '' THEN
        EXIT(STRSUBSTNO('<qualifier>%1</qualifier>',QualifierText));
    END;

    [External]
    PROCEDURE GetUserGreetingText@2(VAR GreetingText@1001 : Text[250]);
    VAR
      User@1000 : Record 2000000120;
    BEGIN
      IF User.GET(USERSECURITYID) THEN;
      GetUserGreetingTextInternal(User."Full Name",GetTimeOfDay,GreetingText);
    END;

    [External]
    PROCEDURE GetUserGreetingTextInternal@22(UserName@1005 : Text[80];CurrentTimeOfDay@1006 : Option;VAR GreetingText@1001 : Text[250]);
    VAR
      TextManagement@1004 : Codeunit 41;
      UserNameFound@1002 : Boolean;
      CleanUserName@1003 : Text;
    BEGIN
      IF UserName <> '' THEN
        IF TextManagement.ReplaceRegex(UserName,'\s','',CleanUserName) THEN
          UserNameFound := CleanUserName <> '';

      CASE CurrentTimeOfDay OF
        TimeOfDay::Morning:
          IF UserNameFound THEN
            GreetingText := STRSUBSTNO(MorningGreetingTxt,UserName)
          ELSE
            GreetingText := SimpleMorningGreetingTxt;
        TimeOfDay::LateMorning:
          IF UserNameFound THEN
            GreetingText := STRSUBSTNO(LateMorningGreetingTxt,UserName)
          ELSE
            GreetingText := SimpleLateMorningGreetingTxt;
        TimeOfDay::Noon:
          IF UserNameFound THEN
            GreetingText := STRSUBSTNO(NoonGreetingTxt,UserName)
          ELSE
            GreetingText := SimpleNoonGreetingTxt;
        TimeOfDay::Afternoon:
          IF UserNameFound THEN
            GreetingText := STRSUBSTNO(AfternoonGreetingTxt,UserName)
          ELSE
            GreetingText := SimpleAfternoonGreetingTxt;
        TimeOfDay::Evening:
          IF UserNameFound THEN
            GreetingText := STRSUBSTNO(EveningGreetingTxt,UserName)
          ELSE
            GreetingText := SimpleEveningGreetingTxt;
      END
    END;

    LOCAL PROCEDURE GetTimeOfDay@6() : Integer;
    VAR
      TypeHelper@1001 : Codeunit 10;
      TimezoneOffset@1000 : Duration;
      Hour@1005 : Integer;
    BEGIN
      IF NOT TypeHelper.GetUserTimezoneOffset(TimezoneOffset) THEN
        TimezoneOffset := 0;

      EVALUATE(Hour,TypeHelper.FormatUtcDateTime(TypeHelper.GetCurrUTCDateTime,'HH',''));
      Hour += TimezoneOffset DIV (60 * 60 * 1000);

      CASE Hour OF
        0..10:
          EXIT(TimeOfDay::Morning);
        11:
          EXIT(TimeOfDay::LateMorning);
        12..13:
          EXIT(TimeOfDay::Noon);
        14..18:
          EXIT(TimeOfDay::Afternoon);
        19..23:
          EXIT(TimeOfDay::Evening);
      END;
    END;

    [External]
    PROCEDURE ShouldUserGreetingBeVisible@1() : Boolean;
    VAR
      LogInManagement@1000 : Codeunit 40;
      LimitDateTime@1002 : DateTime;
    BEGIN
      LimitDateTime := CREATEDATETIME(TODAY,TIME - (10 * 60 * 1000)); // greet if login is in the last 10 minutes, then stop greeting
      EXIT(LogInManagement.UserLoggedInAtOrAfterDateTime(LimitDateTime));
    END;

    [External]
    PROCEDURE GetMaxQualifierLength@5() : Integer;
    BEGIN
      EXIT(50);
    END;

    [External]
    PROCEDURE GetMaxPayloadLength@10() : Integer;
    BEGIN
      EXIT(75);
    END;

    [External]
    PROCEDURE ScheduleTask@11(CodeunitId@1002 : Integer);
    VAR
      JobQueueEntry@1000 : Record 472;
      DummyRecordId@1001 : RecordID;
    BEGIN
      OnBeforeScheduleTask(CodeunitId);
      IF NOT TASKSCHEDULER.CANCREATETASK THEN
        EXIT;
      IF NOT JobQueueEntry.WRITEPERMISSION THEN
        EXIT;

      JobQueueEntry.SETRANGE("Object Type to Run",JobQueueEntry."Object Type to Run"::Codeunit);
      JobQueueEntry.SETRANGE("Object ID to Run",CodeunitId);
      JobQueueEntry.SETRANGE(Status,JobQueueEntry.Status::"In Process");
      IF NOT JobQueueEntry.ISEMPTY THEN
        EXIT;

      JobQueueEntry.ScheduleJobQueueEntry(CodeunitId,DummyRecordId);
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeScheduleTask@12(CodeunitId@1000 : Integer);
    BEGIN
    END;

    [EventSubscriber(Page,9176,OnBeforeLanguageChange,"",Skip,Skip)]
    LOCAL PROCEDURE OnBeforeUpdateLanguage@16(OldLanguageId@1000 : Integer;NewLanguageId@1001 : Integer);
    BEGIN
      OnInvalidateHeadlines;
    END;

    [EventSubscriber(Page,9176,OnBeforeWorkdateChange,"",Skip,Skip)]
    LOCAL PROCEDURE OnBeforeUpdateWorkdate@14(OldWorkdate@1000 : Date;NewWorkdate@1001 : Date);
    BEGIN
      OnInvalidateHeadlines;
    END;

    [Integration]
    LOCAL PROCEDURE OnInvalidateHeadlines@13();
    BEGIN
    END;

    BEGIN
    END.
  }
}

