OBJECT Codeunit 11126180 Ref. Payment Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVFI9.00 (32000000),4PSSE;
  }
  PROPERTIES
  {
    Permissions=TableData 81=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      GLSetup@1090000 : Record 98;
      RefPmtImport@1090001 : Record 11126181;
      RefPmtImportTemp@1090006 : TEMPORARY Record 11126181;
      BankAcc@1090002 : Record 270;
      CustLedgEntry@1090003 : Record 21;
      GenJnlLine@1090004 : Record 81;
      GenJnlBatch@1090005 : Record 232;
      GenJnlTemplate@1090008 : Record 80;
      VendLedgEntry@1090019 : Record 25;
      NoSeriesMgt@1090007 : Codeunit 396;
      ApplyVendLedgEntry@1090020 : Page 233;
      LineNro@1090010 : Integer;
      LastDocNro@1090012 : Code[20];
      AccCode@1090013 : Code[20];
      Text1090001@1090015 : TextConst 'ENU=Non-applied entries in the system!';
      Text1090005@1101100000 : TextConst 'ENU=When applying one payment to multiple invoices the system does not support disregarding of payment discount at full payment.';
      GenJnlLineExt@111280000 : Record 11128091;

    PROCEDURE SetLines@1(Rec@1090000 : Record 11126181;JnlBatchName@1090001 : Code[20];JnlTemplateName@1090002 : Code[20]);
    BEGIN
      GLSetup.GET;
      GenJnlTemplate.GET(JnlTemplateName);

      GenJnlLine.RESET;
      GenJnlLine.SETCURRENTKEY("Journal Template Name","Journal Batch Name","Line No.");
      GenJnlLine.SETFILTER("Journal Template Name",JnlTemplateName);
      GenJnlLine.SETFILTER("Journal Batch Name",JnlBatchName);
      IF GenJnlLine.FINDLAST THEN BEGIN
        LineNro := GenJnlLine."Line No." + 10000;
        LastDocNro := INCSTR(GenJnlLine."Document No.");
      END ELSE
        GetNroSeries(JnlBatchName,JnlTemplateName);

      Rec.ASCENDING(TRUE);
      Rec.SETRANGE("Posted to G/L",FALSE);
      Rec.SETRANGE(Matched,TRUE);
      Rec.SETFILTER("Entry No.",'<>%1',0);
      CustLedgEntry.RESET;
      IF Rec.FINDSET THEN
        REPEAT
          BankAcc.SETRANGE("No.",Rec."Bank Account Code");
          IF BankAcc.FINDFIRST THEN
            AccCode := BankAcc."No."
          ELSE
            AccCode := '';
          CustLedgEntry.SETRANGE("Entry No.",Rec."Entry No.");
          GenJnlLine.RESET;
          GenJnlLine.SETCURRENTKEY("Journal Template Name","Journal Batch Name","Applies-to Doc. No.");//,"Reference No.");
          GenJnlLine.SETRANGE("Journal Template Name",JnlTemplateName);
          GenJnlLine.SETRANGE("Journal Batch Name",JnlBatchName);
          GenJnlLine.SETRANGE("Applies-to Doc. No.",Rec."Document No.");
          GenJnlLine.SETRANGE("Applies-to Doc. No.",Rec."Document No.");

          //>>4PSSE
          GenJnlLineExt.COPYFILTERS(GenJnlLine);
      //    GenJnlLine.SETRANGE("Reference No.",Rec."Reference No.");
          GenJnlLineExt.SETRANGE("Reference No.",Rec."Reference No.");
          //<<
          RefPmtImportTemp.SETRANGE("Account No.",Rec."Account No.");
          RefPmtImportTemp.SETRANGE("Filing Code",Rec."Filing Code");
          IF (CustLedgEntry.FINDFIRST OR (NOT RefPmtImportTemp.FINDFIRST)) AND (NOT GenJnlLine.FINDFIRST)
              AND (NOT GenJnlLineExt.FINDFIRST) //4PSSE
            THEN BEGIN
            GenJnlLine.INIT;
            GenJnlLine."Journal Template Name" := JnlTemplateName;
            GenJnlLine.VALIDATE("Journal Batch Name",JnlBatchName);
            GenJnlLine."Line No." := LineNro;
            GenJnlLine.VALIDATE("Posting Date",Rec."Banks Posting Date");
            GenJnlLine.VALIDATE("Account Type",1);
            GenJnlLine.VALIDATE("Account No.",CustLedgEntry."Customer No.");
            GenJnlLine.VALIDATE("Document Type",1);
            GenJnlLine.VALIDATE("Applies-to Doc. Type",2);
            GenJnlLine."Applies-to Doc. No." := CustLedgEntry."Document No.";
            GenJnlLine."Document No." := LastDocNro;
            GenJnlLine.VALIDATE("Bal. Account Type",3);
            GenJnlLineExt.InitGetLine(GenJnlLine);//4PSSE
            GenJnlLineExt."Reference No." := Rec."Reference No.";
            GenJnlLine."Source Code" := GenJnlTemplate."Source Code";
            GenJnlLine.VALIDATE("Currency Code",CustLedgEntry."Currency Code");
            GenJnlLine.VALIDATE(Amount,Rec.Amount * -1);
            IF AccCode <> '' THEN
              GenJnlLine.VALIDATE("Bal. Account No.",AccCode)
            ELSE
              GenJnlLine.VALIDATE("Bal. Account No.",CustLedgEntry."Bal. Account No.");
            GenJnlLine.INSERT(TRUE);
            GenJnlLineExt.SaveUpdateLine(GenJnlLine);//4PSSE
            LineNro := LineNro + 10000;
            LastDocNro := INCSTR(LastDocNro);
          END;
        UNTIL Rec.NEXT = 0;
    END;

    PROCEDURE GetNroSeries@3(JnlBatchName@1090000 : Code[20];JnlTemplateName@1090001 : Code[20]);
    BEGIN
      LineNro := 10000;
      GenJnlBatch.SETFILTER("Journal Template Name",JnlTemplateName);
      GenJnlBatch.SETFILTER(Name,JnlBatchName);
      IF GenJnlBatch.FINDFIRST THEN
        LastDocNro := NoSeriesMgt.GetNextNo(GenJnlBatch."No. Series",WORKDATE,FALSE);
    END;

    PROCEDURE MatchLines@2(JnlTemplateName@1090000 : Code[20];JnlBatchName@1090001 : Code[20]);
    VAR
      NoMatchLines@1090002 : Boolean;
    BEGIN
      RefPmtImport.RESET;
      RefPmtImport.SETRANGE("Record ID",3,5);
      RefPmtImport.SETRANGE("Posted to G/L",FALSE);
      IF RefPmtImport.FINDSET THEN
        REPEAT
          CustLedgEntry.RESET;
          CustLedgEntry.SETFILTER("Reference No.",RefPmtImport."Reference No.");
          CustLedgEntry.SETFILTER("Document Type",'%1',2);
          CustLedgEntry.SETRANGE(Open,TRUE);
          IF CustLedgEntry.FINDFIRST THEN BEGIN
            RefPmtImport."Entry No." := CustLedgEntry."Entry No.";
            RefPmtImport.VALIDATE("Customer No.",CustLedgEntry."Customer No.");
            RefPmtImport."Document No." := CustLedgEntry."Document No.";
            RefPmtImport."Posting Date" := CustLedgEntry."Posting Date";
            RefPmtImport.Matched := TRUE;
            RefPmtImport."Matched Date" := TODAY;
            RefPmtImport."Matched Time" := TIME;
            RefPmtImport.MODIFY;
          END ELSE
            NoMatchLines := TRUE;
        UNTIL RefPmtImport.NEXT = 0;

      IF NoMatchLines THEN
        MESSAGE(Text1090001);

      RefPmtImport.RESET;
      SetLines(RefPmtImport,JnlBatchName,JnlTemplateName);
    END;

    PROCEDURE CombineVendPmt@1090025(PaymentType@1090000 : 'Domestic,Foreign,SEPA');
    VAR
      RefPmtExported@1090005 : Record 11126182;
      RefPmtExport1@1090002 : Record 11126182;
      TempRefPmtBuffer@1090001 : TEMPORARY Record 11126184;
      Vendor@1090004 : Record 23;
      LastLineNo@1090003 : Integer;
    BEGIN
      RefPmtExported.SETCURRENTKEY(Transferred,"Applied Payments");
      RefPmtExported.SETRANGE(Transferred,FALSE);
      RefPmtExported.SETRANGE("Applied Payments",FALSE);
      CASE PaymentType OF
        PaymentType::Domestic:
          RefPmtExported.SETRANGE("Foreign Payment",FALSE);
        PaymentType::Foreign:
          RefPmtExported.SETRANGE("Foreign Payment",TRUE);
        PaymentType::SEPA:
          RefPmtExported.SETRANGE("SEPA Payment",TRUE);
      END;
      IF RefPmtExported.FINDSET THEN
        REPEAT
          RefPmtExported.TESTFIELD("Vendor No.");
          RefPmtExported.TESTFIELD("Payment Account");
          RefPmtExported.TESTFIELD("Payment Date");
          CheckCombineAllowance(RefPmtExported."Payment Account",PaymentType);
        UNTIL RefPmtExported.NEXT = 0;

      IF RefPmtExported.FINDSET(TRUE) THEN
        REPEAT
          RefPmtExport1 := RefPmtExported;
          RefPmtExport1."Affiliated to Line" := TempRefPmtBuffer.AddLine(RefPmtExported);
          RefPmtExport1."Applied Payments" := TRUE;
          RefPmtExport1.MODIFY;
        UNTIL RefPmtExported.NEXT = 0;

      TempRefPmtBuffer.SETFILTER("No.",'<>%1',0);
      IF TempRefPmtBuffer.FINDSET THEN
        REPEAT
          IF RefPmtExported.GET(TempRefPmtBuffer."No.") THEN BEGIN
            RefPmtExported."Affiliated to Line" := 0;
            RefPmtExported."Applied Payments" := FALSE;
            RefPmtExported.MODIFY;
          END;
        UNTIL TempRefPmtBuffer.NEXT = 0;
      TempRefPmtBuffer.DELETEALL;

      RefPmtExported.LOCKTABLE;
      LastLineNo := RefPmtExported.GetLastLineNo + 1;
      TempRefPmtBuffer.RESET;
      IF TempRefPmtBuffer.FINDSET THEN
        REPEAT
          RefPmtExported.INIT;
          RefPmtExported.TRANSFERFIELDS(TempRefPmtBuffer);
          IF (PaymentType = PaymentType::SEPA) AND RefPmtExport1.GET(TempRefPmtBuffer."Affiliated to Line") THEN
            RefPmtExported."Document No." := RefPmtExport1."Document No.";
          RefPmtExported."No." := LastLineNo;
          Vendor.GET(RefPmtExported."Vendor No.");
          RefPmtExported.Description := COPYSTR(Vendor.Name,1,MAXSTRLEN(RefPmtExported.Description));
          RefPmtExported."Document Type" := RefPmtExported."Document Type"::Invoice;
          RefPmtExported.VALIDATE("Message Type");
          RefPmtExported.INSERT;
          LastLineNo := LastLineNo + 1;
        UNTIL TempRefPmtBuffer.NEXT = 0;
      TempRefPmtBuffer.DELETEALL;
    END;

    PROCEDURE VendPaymApply@1090026(VendNo@1090000 : Code[20]);
    BEGIN
      VendLedgEntry.SETFILTER("Vendor No.",VendNo);
      VendLedgEntry.SETFILTER("Document Type",'%1|%2',2,3);
      VendLedgEntry.SETRANGE(Open,TRUE);
      ApplyVendLedgEntry.SETTABLEVIEW(VendLedgEntry);
    END;

    PROCEDURE OEM2ANSI@1090002(OEMString@1090000 : Text[250]) : Text[250];
    VAR
      ToChars@1090001 : Text[250];
      FromChars@1090002 : Text[250];
    BEGIN
      FromChars[1] := 192;
      FromChars[2] := 193;
      FromChars[3] := 196;
      FromChars[4] := 197;
      FromChars[5] := 198;
      FromChars[6] := 199;
      FromChars[7] := 200;
      FromChars[8] := 201;
      FromChars[9] := 202;
      FromChars[10] := 203;
      FromChars[11] := 204;
      FromChars[12] := 205;
      FromChars[13] := 206;
      FromChars[14] := 207;
      FromChars[15] := 209;
      FromChars[16] := 210;
      FromChars[17] := 211;
      FromChars[18] := 212;
      FromChars[19] := 214;
      FromChars[20] := 220;
      FromChars[21] := 223;
      FromChars[22] := 224;
      FromChars[23] := 225;
      FromChars[24] := 226;
      FromChars[25] := 228;
      FromChars[26] := 229;
      FromChars[27] := 230;
      FromChars[28] := 231;
      FromChars[29] := 232;
      FromChars[30] := 233;
      FromChars[31] := 234;
      FromChars[32] := 235;
      FromChars[33] := 236;
      FromChars[34] := 237;
      FromChars[35] := 238;
      FromChars[36] := 239;
      FromChars[37] := 241;
      FromChars[38] := 242;
      FromChars[39] := 243;
      FromChars[40] := 244;
      FromChars[41] := 245;
      FromChars[42] := 246;
      FromChars[43] := 249;
      FromChars[44] := 250;
      FromChars[45] := 251;
      FromChars[46] := 252;
      ToChars[1] := 183;
      ToChars[2] := 181;
      ToChars[3] := 142;
      ToChars[4] := 143;
      ToChars[5] := 146;
      ToChars[6] := 128;
      ToChars[7] := 212;
      ToChars[8] := 144;
      ToChars[9] := 210;
      ToChars[10] := 211;
      ToChars[11] := 222;
      ToChars[12] := 214;
      ToChars[13] := 215;
      ToChars[14] := 216;
      ToChars[15] := 165;
      ToChars[16] := 227;
      ToChars[17] := 224;
      ToChars[18] := 226;
      ToChars[19] := 153;
      ToChars[20] := 154;
      ToChars[21] := 225;
      ToChars[22] := 133;
      ToChars[23] := 160;
      ToChars[24] := 131;
      ToChars[25] := 132;
      ToChars[26] := 134;
      ToChars[27] := 145;
      ToChars[28] := 135;
      ToChars[29] := 138;
      ToChars[30] := 130;
      ToChars[31] := 136;
      ToChars[32] := 137;
      ToChars[33] := 141;
      ToChars[34] := 161;
      ToChars[35] := 140;
      ToChars[36] := 139;
      ToChars[37] := 164;
      ToChars[38] := 149;
      ToChars[39] := 162;
      ToChars[40] := 147;
      ToChars[41] := 228;
      ToChars[42] := 148;
      ToChars[43] := 151;
      ToChars[44] := 163;
      ToChars[45] := 150;
      ToChars[46] := 129;
      EXIT(CONVERTSTR(OEMString,ToChars,FromChars));
    END;

    PROCEDURE CheckIfPaidInFull@1101100000(VAR GenJnlLine2@1090050 : Record 81);
    VAR
      CustLedgerEntryPmt@1090000 : Record 21;
      CountEntries@1101100000 : Integer;
    BEGIN
      WITH CustLedgEntry DO BEGIN
        RESET;
        SETCURRENTKEY("Document No.");
        SETRANGE("Document Type",GenJnlLine2."Applies-to Doc. Type");
        SETRANGE("Document No.",GenJnlLine2."Applies-to Doc. No.");
        IF FINDFIRST THEN
          UpdateDiscountPossible(GenJnlLine2,GenJnlLine2.Amount)
        ELSE BEGIN
          RESET;
          SETCURRENTKEY("Customer No.","Applies-to ID",Open,Positive,"Due Date");
          SETRANGE("Document Type","Document Type"::Invoice);
          SETRANGE("Applies-to ID",GenJnlLine2."Applies-to ID");
          CountEntries := COUNT;
          IF FINDFIRST AND ("Applies-to ID" <> '') THEN
            IF CountEntries > 1 THEN BEGIN
              IF "Disreg. Pmt. Disc. at Full Pmt" THEN
                ERROR(Text1090005);
            END ELSE BEGIN
              CustLedgerEntryPmt.RESET;
              CustLedgerEntryPmt.SETCURRENTKEY("Customer No.","Applies-to ID",Open,Positive,"Due Date");
              CustLedgerEntryPmt.SETRANGE("Document Type","Document Type"::Payment);
              CustLedgerEntryPmt.SETRANGE("Applies-to ID",GenJnlLine2."Applies-to ID");
              IF CustLedgerEntryPmt.FINDFIRST THEN BEGIN
                CustLedgerEntryPmt.CALCFIELDS(Amount);
                UpdateDiscountPossible(GenJnlLine2,CustLedgerEntryPmt.Amount);
              END;
            END;
        END;
      END;
    END;

    PROCEDURE UpdateDiscountPossible@1101100010(VAR GenJnlLine2@1090050 : Record 81;PaymentAmount@1090000 : Decimal);
    BEGIN
      WITH CustLedgEntry DO
        IF "Disreg. Pmt. Disc. at Full Pmt" AND
           (GenJnlLine2."Posting Date" <= "Pmt. Disc. Tolerance Date") AND
           ("Remaining Pmt. Disc. Possible" <> 0)
        THEN BEGIN
          CALCFIELDS("Remaining Amount");
          IF ABS(PaymentAmount) >= ABS("Remaining Amount") THEN BEGIN
            "Remaining Pmt. Disc. Possible" := 0;
            MODIFY;
          END ELSE
            IF (ABS(PaymentAmount) > ABS("Remaining Amount") - "Remaining Pmt. Disc. Possible") AND
               ("Accepted Payment Tolerance" = 0)
            THEN BEGIN
              "Remaining Pmt. Disc. Possible" := ABS("Remaining Amount") - ABS(PaymentAmount);
              MODIFY;
            END;
        END;
    END;

    PROCEDURE GetRefPmtImportTemp@1090000(RefPmtImport@1090000 : Record 11126181);
    BEGIN
      IF RefPmtImport.FINDSET THEN
        REPEAT
          RefPmtImportTemp := RefPmtImport;
          RefPmtImportTemp.INSERT;
        UNTIL RefPmtImport.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckCombineAllowance@1090001(PaymentAccNo@1090002 : Code[20];PaymentType@1090000 : 'Domestic,Foreign,SEPA');
    VAR
      RefFileSetup@1090001 : Record 11126180;
    BEGIN
      IF RefFileSetup.GET(PaymentAccNo) THEN
        CASE PaymentType OF
          PaymentType::Domestic:
            RefFileSetup.TESTFIELD("Allow Comb. Domestic Pmts.");
          PaymentType::Foreign:
            RefFileSetup.TESTFIELD("Allow Comb. Foreign Pmts.");
          PaymentType::SEPA:
            RefFileSetup.TESTFIELD("Allow Comb. SEPA Pmts.");
        END;
    END;

    BEGIN
    END.
  }
}

