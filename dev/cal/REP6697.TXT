OBJECT Report 6697 Create Ret.-Related Documents
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.04,4PSSE;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Create Ret.-Related Documents;
               NOR=Opprett retur-relat. dokument.;
               SVE=Skapa returrelaterade dokument];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  TempRetRelDoc.DELETEALL;

                  IF CreateSO THEN BEGIN
                    SOSalesHeader."Document Type" := SOSalesHeader."Document Type"::Order;
                    CLEAR(CopyDocMgt);
                  //CopyDocMgt.SetProperties(TRUE,FALSE,FALSE,TRUE,TRUE,FALSE,FALSE); //**4PS.o
                    CopyDocMgt.SetProperties(TRUE,FALSE,FALSE,TRUE,TRUE,FALSE,FALSE,FALSE,FALSE); //**4PS.n
                    OnPreReportOnBeforeCopySalesDoc(CopyDocMgt,SROSalesHeader,SOSalesHeader);
                    CopyDocMgt.CopySalesDoc(DocType::"Return Order",SROSalesHeader."No.",SOSalesHeader);
                    OnPreReportOnAfterCopySalesDoc(SROSalesHeader,SOSalesHeader);
                    TempRetRelDoc."Entry No." := 3;
                    TempRetRelDoc."Document Type" := TempRetRelDoc."Document Type"::"Sales Order";
                    TempRetRelDoc."No." := SOSalesHeader."No.";
                    TempRetRelDoc.INSERT;
                  END;

                  IF CreatePRO THEN BEGIN
                    PROPurchHeader."Document Type" := PROPurchHeader."Document Type"::"Return Order";
                    CLEAR(CopyDocMgt);
                  //CopyDocMgt.SetProperties(TRUE,FALSE,FALSE,FALSE,TRUE,FALSE,FALSE); //**4PS.o
                    CopyDocMgt.SetProperties(TRUE,FALSE,FALSE,FALSE,TRUE,FALSE,FALSE,FALSE,FALSE); //**4PS.n
                    OnPreReportOnBeforeCopyPurchReturnDoc(CopyDocMgt,SROSalesHeader,PROPurchHeader);
                    CopyDocMgt.CopyFromSalesToPurchDoc(VendorNo,SROSalesHeader,PROPurchHeader);
                    OnPreReportOnAfterCopyPurchReturnDoc(SROSalesHeader,PROPurchHeader);
                    TempRetRelDoc."Entry No." := 1;
                    TempRetRelDoc."Document Type" := TempRetRelDoc."Document Type"::"Purchase Return Order";
                    TempRetRelDoc."No." := PROPurchHeader."No.";
                    TempRetRelDoc.INSERT;
                  END;

                  IF CreatePO THEN BEGIN
                    POPurchHeader."Document Type" := POPurchHeader."Document Type"::Order;
                    CLEAR(CopyDocMgt);
                  //CopyDocMgt.SetProperties(TRUE,FALSE,FALSE,FALSE,TRUE,FALSE,FALSE); //**4PS.o
                    CopyDocMgt.SetProperties(TRUE,FALSE,FALSE,FALSE,TRUE,FALSE,FALSE,FALSE,FALSE); //**4PS.n
                    OnPreReportOnBeforeCopyPurchDoc(CopyDocMgt,SROSalesHeader,POPurchHeader);
                    CopyDocMgt.CopyFromSalesToPurchDoc(VendorNo,SROSalesHeader,POPurchHeader);
                    OnPreReportOnAfterCopyPurchDoc(SROSalesHeader,POPurchHeader);
                    TempRetRelDoc."Entry No." := 2;
                    TempRetRelDoc."Document Type" := TempRetRelDoc."Document Type"::"Purchase Order";
                    TempRetRelDoc."No." := POPurchHeader."No.";
                    TempRetRelDoc.INSERT;
                  END;
                END;

  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   CreatePRO := TRUE;
                   CreatePO := TRUE;
                   CreateSO := TRUE;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 1   ;2   ;Group     ;
                  CaptionML=[ENU=Return to Vendor;
                             NOR=Returner til leverand›r;
                             SVE=Retur till leverant”r] }

      { 5   ;3   ;Field     ;
                  Name=VendorNo;
                  Lookup=Yes;
                  CaptionML=[ENU=Vendor No.;
                             NOR=Leverand›rnr.;
                             SVE=Leverant”rsnr];
                  ToolTipML=[ENU=Specifies the vendor. Enter the vendor number or select the vendor from the Vendor List. To create vendor-related documents, you must specify the vendor number.;
                             NOR=Angir leverand›ren. Angi leverand›rnummeret eller velg leverand›ren fra leverand›roversikten. N†r du skal opprette leverand›r-relaterte dokumenter, m† du angi leverand›rnummeret.;
                             SVE=Anger leverant”ren. Ange leverant”rsnumret eller v„lj leverant”ren i leverant”rslistan. F”r att kunna skapa ett leverant”rsrelaterat dokument m†ste du ange leverant”rsnumret.];
                  ApplicationArea=#SalesReturnOrder;
                  SourceExpr=VendorNo;
                  OnValidate=BEGIN
                               IF VendorNo <> '' THEN
                                 Vend.GET(VendorNo);
                             END;

                  OnLookup=BEGIN
                             IF PAGE.RUNMODAL(0,Vend) = ACTION::LookupOK THEN
                               VendorNo := Vend."No.";
                           END;
                            }

      { 3   ;3   ;Field     ;
                  Name=CreatePurchRetOrder;
                  CaptionML=[ENU=Create Purch. Ret. Order;
                             NOR=Opprett bestillingsretur;
                             SVE=Skapa ink”psreturorder];
                  ToolTipML=[ENU=Specifies if an item needs to be ordered from the vendor.;
                             NOR=Angir om en vare m† bestilles fra leverand›ren.;
                             SVE=Anger om en artikel ska best„llas fr†n leverant”ren.];
                  ApplicationArea=#PurchReturnOrder;
                  SourceExpr=CreatePRO }

      { 4   ;3   ;Field     ;
                  Name=CreatePurchaseOrder;
                  CaptionML=[ENU=Create Purchase Order;
                             NOR=Opprett bestilling;
                             SVE=Skapa ink”psorder];
                  ToolTipML=[ENU=Specifies if an item needs to be ordered from the vendor.;
                             NOR=Angir om en vare m† bestilles fra leverand›ren.;
                             SVE=Anger om en artikel ska best„llas fr†n leverant”ren.];
                  ApplicationArea=#PurchReturnOrder;
                  SourceExpr=CreatePO }

      { 8   ;2   ;Group     ;
                  CaptionML=[ENU=Replacement;
                             NOR=Erstatning;
                             SVE=Ers„ttning] }

      { 10  ;3   ;Field     ;
                  Name=CreateSalesOrder;
                  CaptionML=[ENU=Create Sales Order;
                             NOR=Opprett ordre;
                             SVE=Skapa f”rs.order];
                  ToolTipML=[ENU=Specifies if a replacement sales order needs to be created.;
                             NOR=Angir om en erstatningsordre m† opprettes.;
                             SVE=Anger om ers„ttningsf”rs„ljningsorder m†ste skapas.];
                  ApplicationArea=#SalesReturnOrder;
                  SourceExpr=CreateSO }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Vend@1004 : Record 23;
      PROPurchHeader@1006 : Record 38;
      POPurchHeader@1007 : Record 38;
      SROSalesHeader@1009 : Record 36;
      SOSalesHeader@1008 : Record 36;
      TempRetRelDoc@1011 : TEMPORARY Record 6670;
      CopyDocMgt@1005 : Codeunit 6620;
      VendorNo@1000 : Code[20];
      DocType@1010 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Shipment,Posted Invoice,Posted Return Receipt,Posted Credit Memo';
      CreatePRO@1001 : Boolean;
      CreatePO@1002 : Boolean;
      CreateSO@1003 : Boolean;

    [External]
    PROCEDURE SetSalesHeader@1(NewSROSalesHeader@1000 : Record 36);
    BEGIN
      SROSalesHeader := NewSROSalesHeader;
    END;

    [External]
    PROCEDURE ShowDocuments@2();
    BEGIN
      IF TempRetRelDoc.FINDFIRST THEN
        PAGE.RUN(PAGE::"Returns-Related Documents",TempRetRelDoc);
    END;

    [Integration]
    LOCAL PROCEDURE OnPreReportOnAfterCopySalesDoc@3(VAR SROSalesHeader@1002 : Record 36;VAR SOSalesHeader@1001 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnPreReportOnAfterCopyPurchReturnDoc@8(VAR SROSalesHeader@1001 : Record 36;VAR PROPurchHeader@1002 : Record 38);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnPreReportOnAfterCopyPurchDoc@10(VAR SROSalesHeader@1001 : Record 36;VAR POPurchHeader@1002 : Record 38);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnPreReportOnBeforeCopySalesDoc@4(VAR CopyDocumentMgt@1000 : Codeunit 6620;VAR SROSalesHeader@1002 : Record 36;VAR SOSalesHeader@1001 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnPreReportOnBeforeCopyPurchReturnDoc@5(VAR CopyDocumentMgt@1000 : Codeunit 6620;VAR SROSalesHeader@1001 : Record 36;VAR PROPurchHeader@1002 : Record 38);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnPreReportOnBeforeCopyPurchDoc@6(VAR CopyDocumentMgt@1000 : Codeunit 6620;VAR SROSalesHeader@1001 : Record 36;VAR POPurchHeader@1002 : Record 38);
    BEGIN
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

