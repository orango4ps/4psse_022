OBJECT Table 11072329 Service Contract Analysis
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=VAR
               ServiceContract@1100527400 : Record 11012812;
             BEGIN
               ServiceContract.GET("Service Contract No.");
               IF ServiceContract."Contract Form" = ServiceContract."Contract Form"::"Location Contract" THEN
                 ServiceContract.FIELDERROR("Contract Form");
             END;

    CaptionML=ENU=Service Contract Analysis;
    LookupPageID=Page11126840;
    DrillDownPageID=Page11126840;
  }
  FIELDS
  {
    { 10  ;   ;Service Contract No.;Code20        ;TableRelation=Service-Contract;
                                                   CaptionML=[ENU=Service Contract No.;
                                                              NOR=Servicekontraktnr;
                                                              SVE=Servicekontraktnr] }
    { 20  ;   ;Analysis Type       ;Option        ;OnValidate=BEGIN
                                                                IF xRec."Analysis Type" <> "Analysis Type" THEN
                                                                  VALIDATE("Analysis Code", '');
                                                              END;

                                                   CaptionML=[ENU=Analysis Type;
                                                              NOR=Analysetype;
                                                              SVE=Analystyp];
                                                   OptionCaptionML=[ENU=Problem,Cause,Solution;
                                                                    NOR=Problem,èrsak,Lõsning;
                                                                    SVE=Problem,Orsak,Lîsning];
                                                   OptionString=Problem,Cause,Solution }
    { 30  ;   ;Analysis Code       ;Code10        ;TableRelation="Service Analysis".Code WHERE (Analysis Type=FIELD(Analysis Type));
                                                   OnValidate=BEGIN
                                                                IF "Analysis Code" <> '' THEN BEGIN
                                                                  CASE "Analysis Type" OF
                                                                    "Analysis Type"::Problem:
                                                                      CopyRelatedAnalysisCodes;
                                                                    "Analysis Type"::Cause,
                                                                    "Analysis Type"::Solution:
                                                                      TestRelatedAnalysisCodes;
                                                                  END;
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              ServiceAnalysis@1100528601 : Record 11012842;
                                                              ServiceAnalysisRelation@1100528600 : Record 11072238;
                                                            BEGIN
                                                              ServiceAnalysis.SETRANGE("Analysis Type", "Analysis Type");
                                                              CASE "Analysis Type" OF
                                                                "Analysis Type"::Cause,
                                                                "Analysis Type"::Solution:
                                                                  IF RelatedAnalysisCodesExists(ServiceAnalysisRelation) THEN
                                                                    IF ServiceAnalysisRelation.FINDSET THEN
                                                                      REPEAT
                                                                        ServiceAnalysis."Analysis Type" := "Analysis Type";
                                                                        CASE "Analysis Type" OF
                                                                          "Analysis Type"::Cause:
                                                                            ServiceAnalysis.Code := ServiceAnalysisRelation."Cause Code";
                                                                          "Analysis Type"::Solution:
                                                                            ServiceAnalysis.Code := ServiceAnalysisRelation."Solution Code";
                                                                        END;
                                                                        ServiceAnalysis.MARK(TRUE);
                                                                        ServiceAnalysis.MARKEDONLY(TRUE);
                                                                      UNTIL ServiceAnalysisRelation.NEXT = 0;
                                                              END;
                                                              CASE "Analysis Type" OF
                                                                "Analysis Type"::Problem:
                                                                  IF PAGE.RUNMODAL(PAGE::"Service Analysis (Problem)", ServiceAnalysis) = ACTION::LookupOK THEN
                                                                    VALIDATE("Analysis Code", ServiceAnalysis.Code);
                                                                "Analysis Type"::Cause:
                                                                  IF PAGE.RUNMODAL(PAGE::"Service Analysis (Cause)", ServiceAnalysis) = ACTION::LookupOK THEN
                                                                    VALIDATE("Analysis Code", ServiceAnalysis.Code);
                                                                "Analysis Type"::Solution:
                                                                  IF PAGE.RUNMODAL(PAGE::"Service Analysis (Solution)", ServiceAnalysis) = ACTION::LookupOK THEN
                                                                    VALIDATE("Analysis Code", ServiceAnalysis.Code);
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Analysis Code;
                                                              NOR=Analysekode;
                                                              SVE=Analyskod];
                                                   NotBlank=Yes }
    { 40  ;   ;Description         ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Analysis".Description WHERE (Analysis Type=FIELD(Analysis Type),
                                                                                                            Code=FIELD(Analysis Code)));
                                                   CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Service Contract No.,Analysis Type,Analysis Code;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1100528600 : TextConst 'ENU=Copy the related Cause and Solution Codes to %1 %2?';
      Text001@1100528601 : TextConst 'ENU=%1 %2 not found in %3';

    LOCAL PROCEDURE CopyRelatedAnalysisCodes@1100528602();
    VAR
      ServiceAnalysis@1100528602 : Record 11012842;
      ServiceAnalysisRelation@1100528600 : Record 11072238;
      ServiceContractAnalysis@1100528601 : Record 11072329;
    BEGIN
      IF "Analysis Type" <> "Analysis Type"::Problem THEN
        EXIT;
      ServiceAnalysisRelation.SETRANGE("Problem Code", "Analysis Code");
      IF ServiceAnalysisRelation.ISEMPTY THEN
        EXIT;
      IF GUIALLOWED THEN
        IF NOT CONFIRM(Text000, TRUE, FIELDCAPTION("Service Contract No."), "Service Contract No.") THEN
          EXIT;
      IF ServiceAnalysisRelation.FINDSET THEN
        REPEAT
          IF NOT ServiceContractAnalysis.GET(
            "Service Contract No.", ServiceContractAnalysis."Analysis Type"::Cause, ServiceAnalysisRelation."Cause Code")
          THEN BEGIN
            IF ServiceAnalysis.GET(ServiceAnalysis."Analysis Type"::Cause, ServiceAnalysisRelation."Cause Code") THEN BEGIN
              ServiceContractAnalysis."Service Contract No." := "Service Contract No.";
              ServiceContractAnalysis."Analysis Type" := ServiceContractAnalysis."Analysis Type"::Cause;
              ServiceContractAnalysis."Analysis Code" := ServiceAnalysisRelation."Cause Code";
              ServiceContractAnalysis.INSERT(TRUE);
            END;
          END;

          IF NOT ServiceContractAnalysis.GET(
            "Service Contract No.", ServiceContractAnalysis."Analysis Type"::Solution, ServiceAnalysisRelation."Solution Code")
          THEN BEGIN
            IF ServiceAnalysis.GET(ServiceAnalysis."Analysis Type"::Solution, ServiceAnalysisRelation."Solution Code") THEN BEGIN
              ServiceContractAnalysis.INIT;
              ServiceContractAnalysis."Service Contract No." := "Service Contract No.";
              ServiceContractAnalysis."Analysis Type" := ServiceContractAnalysis."Analysis Type"::Solution;
              ServiceContractAnalysis."Analysis Code" := ServiceAnalysisRelation."Solution Code";
              ServiceContractAnalysis.INSERT(TRUE);
            END;
          END;
        UNTIL ServiceAnalysisRelation.NEXT = 0;
    END;

    LOCAL PROCEDURE TestRelatedAnalysisCodes@1100528600();
    VAR
      ServiceAnalysisRelation@1100528600 : Record 11072238;
    BEGIN
      IF NOT ("Analysis Type" IN ["Analysis Type"::Cause, "Analysis Type"::Solution]) THEN
        EXIT;
      IF NOT RelatedAnalysisCodesExists(ServiceAnalysisRelation) THEN
        EXIT;
      CASE "Analysis Type" OF
        "Analysis Type"::Cause:
          BEGIN
            ServiceAnalysisRelation.SETFILTER("Cause Code", '<>%1', '');
            IF ServiceAnalysisRelation.ISEMPTY THEN
              EXIT;
            ServiceAnalysisRelation.SETRANGE("Cause Code", "Analysis Code");
            IF ServiceAnalysisRelation.ISEMPTY THEN
              ERROR(Text001, ServiceAnalysisRelation.FIELDCAPTION("Cause Code"), "Analysis Code", ServiceAnalysisRelation.TABLECAPTION);
          END;
        "Analysis Type"::Solution:
          BEGIN
            ServiceAnalysisRelation.SETFILTER("Solution Code", '<>%1', '');
            IF ServiceAnalysisRelation.ISEMPTY THEN
              EXIT;
            ServiceAnalysisRelation.SETRANGE("Solution Code", "Analysis Code");
            IF ServiceAnalysisRelation.ISEMPTY THEN
              ERROR(Text001, ServiceAnalysisRelation.FIELDCAPTION("Solution Code"), "Analysis Code", ServiceAnalysisRelation.TABLECAPTION);
          END;
      END;
    END;

    LOCAL PROCEDURE RelatedAnalysisCodesExists@1100528603(VAR OServiceAnalysisRelation@1100528604 : Record 11072238) : Boolean;
    VAR
      ServiceContractAnalysis@1100528601 : Record 11072329;
      ServiceAnalysis@1100528602 : Record 11012842;
      ProblemCodeFilter@1100528603 : Text;
    BEGIN
      ServiceContractAnalysis.SETRANGE("Service Contract No.", "Service Contract No.");
      ServiceContractAnalysis.SETRANGE("Analysis Type", ServiceContractAnalysis."Analysis Type"::Problem);
      IF ServiceContractAnalysis.FINDSET THEN
        REPEAT
          ServiceAnalysis."Analysis Type" := ServiceAnalysis."Analysis Type"::Problem;
          ServiceAnalysis.Code := ServiceContractAnalysis."Analysis Code";
          ServiceAnalysis.MARK(TRUE);
        UNTIL ServiceContractAnalysis.NEXT = 0;
      ServiceAnalysis.MARKEDONLY(TRUE);
      IF ServiceAnalysis.ISEMPTY THEN
        EXIT(FALSE);
      REPEAT
        IF ProblemCodeFilter <> '' THEN
          ProblemCodeFilter += '|';
        ProblemCodeFilter += ServiceAnalysis.Code;
      UNTIL ServiceAnalysis.NEXT = 0;
      OServiceAnalysisRelation.SETFILTER("Problem Code", ProblemCodeFilter);
      EXIT(NOT OServiceAnalysisRelation.ISEMPTY);
    END;

    BEGIN
    END.
  }
}

