OBJECT Codeunit 11020504 Plant TransportOrder Functions
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      PlantSetupRec@1100485000 : Record 11012550;
      Text000@1100485001 : TextConst 'DEU=Transportkosten fÅr ''%1'' nur gestattet fÅr die Auftragsart ''öbrige Versetzungen'' in %2 ''%3''.;ENU=Transport Cost for ''%1'' only allowed for Order Type ''Other Transfers'' in %2 ''%3''.;NLD=Transportkosten voor ''%1'' alleen toegestaan voor de ordersoort ''Overige verplaatsingen'' in %2 ''%3''.;NOR=Transportkosten for ''%1'' er kun tillatt for ordretypen ''ùvrige Overfõringer'' i %2 ''%3''.;SVE=Transportkostnaden fîr ''%1'' Ñr endast tillÜten fîr ordertypen ''ôvriga îverfîringar'' i %2 ''%3''.';
      Text001@1100485002 : TextConst 'DEU=Transportkosten fÅr ''%1'' nicht gestattet, weil %2 ''%3'' ist ein Depot in %4 ''%5''.;ENU=Transport Cost for ''%1'' not allowed because %2 ''%3'' is a Depot in %4 ''%5''.;NLD=Transportkosten voor ''%1'' niet toegestaan want %2 ''%3'' is een depot in %4 ''%5''.;NOR=Transportkosten for ''%1'' ikke tillatt ettersom %2 ''%3'' er et Depot i %4 ''%5''.;SVE=Transportkostnaden fîr ''%1'' inte tillÜten eftersom %2 ''%3'' Ñr en depÜ i %4 ''%5''.';
      Text002@1100525000 : TextConst 'DEU=FÅr alle WerkzeugauftrÑge sind bereits TransportauftrÑge erstellt.;ENU="For all Plant Orders there are already Transport Orders created. ";NLD=Voor alle materieelorders zijn al transportorders aangemaakt.;NOR=For alle maskinordre er transportordre allerede opprettet.;SVE="Fîr alla Maskinsorder finns det redan skapade transportorder. "';
      Text003@1100525003 : TextConst 'DEU=TransportauftrÑge erstellen?;ENU=Create transport order(s)?;NLD=Transportorder(s) aanmaken?;NOR=Opprette transportordre?;SVE=Skapa transportorder?';
      Text004@1100525002 : TextConst 'DEU=Es sind bereits TransportauftrÑge fÅr die Fahrt vorhanden. FÅr WerkzeugauftrÑge, die noch nicht in einem Transportauftrag der Fahrt vorkommen, werden neue TransportauftrÑge erstellt.;ENU="Already transport orders present on the ride. For plant orders that not yet on a transportorder of the ride new transportorders will be created.  ";NLD=Er zijn al transportorders aanwezig op de rit. Voor materieelorders die nog niet voorkomen op een transportorder van de rit worden nieuwe transportorders aangemaakt.;NOR=Transportordre finnes allerede for turen. For maskinordre som enda ikke er pÜ en transportordre for turen vil nye transportordre opprettes.;SVE="Transportorder finns redan fîr kîrningen. Fîr Maskinsorder som Ñnnu inte Ñr pÜ en transportorder fîr kîrningen kommer nya transportorder att skapas.  "';
      Text005@1100525001 : TextConst 'DEU=VerknÅpfte TransportauftrÑge einschlie·en?;ENU=Include linked transport orders?;NLD=Inclusief gekoppelde transportorders?';

    PROCEDURE RunCreateTransportOrder@1100485000(IPlantOrderRec@1100485000 : Record 11012556) : Code[20];
    VAR
      lvTransOrderRec@1100485001 : Record 11020505;
      lvTransPlantOrderLine@1100485002 : Record 11020509;
      lvShippingAgentRec@1100485003 : Record 291;
      lvMeansOfTransRec@1100485004 : Record 11020503;
      lvPlantOrderCostLineMgt@1100525000 : Codeunit 11012581;
      lvShipAgent@1100485007 : Code[10];
      lvMeansTrans@1100485008 : Code[20];
    BEGIN
      PlantSetupRec.GET;
      PlantSetupRec.TESTFIELD("Transport Orders", TRUE);

      WITH IPlantOrderRec DO BEGIN
        TESTFIELD("No.");
        TESTFIELD("Transfer Date");
        TESTFIELD("From Location");
        TESTFIELD("To Location");
        TESTFIELD(Posted, FALSE);
        TESTFIELD("Collect Order", FALSE);
        //IF Type = Type::Arrival THEN  //* 12543.o
        //  TESTFIELD(Status, Status::Released);
      //DP01118.so
      //  IF (Type = Type::Arrival) THEN BEGIN  //* 12543.n
      //    IF PlantSetupRec."Only Create TO fr. rel. Arr.MO" THEN  //* 15448.n
      //      TESTFIELD(Status, Status::Released)
      //    ELSE BEGIN
      //      IF ("Order Picking Status" <= "Order Picking Status"::Open) THEN BEGIN  //C023560
      //        IF (NOT (Status IN [Status::Printed, Status::Released])) THEN
      //          FIELDERROR(Status);
      //        IF (Status = Status::Printed) AND ("Order Pick List Printed" = 0) THEN
      //          TESTFIELD("Order Pick List Printed");
      //      END;
      //    END;
      //  END;
      //DP01118.eo
        IF (Type = Type::Arrival) AND PlantSetupRec."Only Create TO fr. rel. Arr.MO" THEN //DP01118.n
          TESTFIELD(Status, Status::Released);
        IF Type = Type::"Negative Inventory Correction" THEN
          FIELDERROR(Type);
        IF "Transport Cost for (Advice)" = "Transport Cost for (Advice)"::Project THEN
          IPlantOrderRec.TESTFIELD("Project No. (TP-Cost)");
      END;

      IF IPlantOrderRec."Shipping Agent" <> '' THEN BEGIN
        lvShippingAgentRec.GET(IPlantOrderRec."Shipping Agent");
        lvShipAgent := lvShippingAgentRec.Code;
      END;
      IF PlantSetupRec."Sel. Means of Trans. Create TO" THEN BEGIN
        IF lvShipAgent = '' THEN BEGIN
          IF PAGE.RUNMODAL(0, lvShippingAgentRec) = ACTION::LookupOK THEN BEGIN
            IF lvShippingAgentRec.Code <> '' THEN
              lvShipAgent := lvShippingAgentRec.Code;
          END;
        END;
        IF lvShipAgent <> '' THEN BEGIN
          lvMeansOfTransRec.SETRANGE("Shipping Agent", lvShipAgent);
          IF PAGE.RUNMODAL(0, lvMeansOfTransRec) = ACTION::LookupOK THEN BEGIN
            IF lvMeansOfTransRec.Code <> '' THEN
              lvMeansTrans := lvMeansOfTransRec.Code;
          END;
        END;
      END;

      IF lvMeansTrans = '' THEN
        lvMeansOfTransRec.INIT;
      //CheckPlantSetupTransCosObjects(IPlantOrderRec, lvMeansOfTransRec);  //22057.o

      WITH IPlantOrderRec DO BEGIN
        TESTFIELD("No.");
        TESTFIELD("Transfer Date");
        TESTFIELD("From Location");
        TESTFIELD("To Location");
        TESTFIELD(Posted, FALSE);

        IF Type = Type::"Negative Inventory Correction" THEN
          FIELDERROR(Type);
        IF "Transport Cost for (Advice)" = "Transport Cost for (Advice)"::Project THEN
          TESTFIELD("Project No. (TP-Cost)");

        lvTransOrderRec.INIT;
        lvTransOrderRec.InitRecord();
        lvTransOrderRec."No." := '';
        lvTransOrderRec.Type := Type;
        lvTransOrderRec."Transport Date" := "Transfer Date";
        lvTransOrderRec.INSERT(TRUE);
        lvTransOrderRec.TESTFIELD("No.");

        IF lvShipAgent <> '' THEN BEGIN
          lvTransOrderRec."Shipping Agent" := lvShipAgent;
          IF lvMeansTrans <> '' THEN BEGIN
            lvTransOrderRec."Means of Transport" := lvMeansTrans;
            //lvTransOrderRec.FillMeansTranDefaultCostObject();  //22057.o
          END;
        END;

        FillTransOrderFields(IPlantOrderRec, lvTransOrderRec);
        lvTransOrderRec.MODIFY;

        CopyContactsFromPO2TO("No.", lvTransOrderRec."No.");

        lvTransPlantOrderLine.INIT;
        lvTransPlantOrderLine."Transport Order No." := lvTransOrderRec."No.";
        lvTransPlantOrderLine."Plant Order No." := "No.";
        lvTransPlantOrderLine.INSERT(FALSE);  //* FALSE!
        RunCreateTransportCost(lvTransOrderRec, '', TRUE, TRUE, FALSE);
        lvPlantOrderCostLineMgt.RunInsertTOStndTransCostLines(lvTransOrderRec."No.", "No.");  //* TO and PO

        EXIT(lvTransOrderRec."No.");
      END;
    END;

    PROCEDURE RunCreateTransOrderFromRidePOs@1100525000(ITransRideRec@1100485000 : Record 11020517) : Decimal;
    VAR
      lvRidePORec@1100525000 : Record 11020550;
      lvRideTORec@1100525002 : Record 11020518;
      lvPlantOrderRec@1100525006 : Record 11012556;
      lvTransOrderRec@1100485001 : Record 11020505;
      lvPostedTransOrderRec@1100525004 : Record 11020507;
      lvTransOrderPORec@1100485002 : Record 11020509;
      lvMeansOfTransRec@1100485004 : Record 11020503;
      lvTmpPlantOrderRec@1100525001 : TEMPORARY Record 11012556;
      lvTmpTransOrderRec@1100525003 : TEMPORARY Record 11020505;
      lvTmpTransOrderPORec@1100525005 : TEMPORARY Record 11020509;
      lvPlantOrderCostLineMgt@1100525009 : Codeunit 11012581;
      lvAddOnExistingTO@1100525007 : Boolean;
      lvCounter@1100525008 : Decimal;
    BEGIN
      PlantSetupRec.GET;
      PlantSetupRec.TESTFIELD("Transport Orders", TRUE);

      WITH ITransRideRec DO BEGIN
        TESTFIELD("No.");
        TESTFIELD(Date);
        TESTFIELD("Shipping Agent");
        TESTFIELD("Means of Transport");
        TESTFIELD(Posted, FALSE);
        TESTFIELD(Status, Status::Open);
        lvMeansOfTransRec.GET("Shipping Agent", "Means of Transport");

        lvRidePORec.SETRANGE("Ride No.", "No.");
        lvRidePORec.FINDFIRST;  //* Error if no plant orders on Ride
        lvRideTORec.SETRANGE("Ride No.", "No.");
        IF lvRideTORec.ISEMPTY THEN BEGIN
          IF NOT CONFIRM(Text003, TRUE) THEN
            EXIT(-1);
        END ELSE BEGIN
          //IF CONFIRM(..) THEN
          //  lvAddExisting := TRUE;  //Temporary not on existing TO of ride (fi TO can already be released)
          IF NOT CONFIRM(Text004 + '\ \' + Text003, FALSE) THEN
            EXIT(-1);
        END;

        lvRideTORec.RESET;
        lvRideTORec.SETRANGE("Ride No.", "No.");
        IF lvRideTORec.FINDSET THEN BEGIN
          REPEAT
            lvRideTORec.TESTFIELD("Transport Order No.");
            IF lvPostedTransOrderRec.GET(lvRideTORec."Transport Order No.") THEN
              lvTransOrderRec.TRANSFERFIELDS(lvPostedTransOrderRec)
            ELSE
              lvTransOrderRec.GET(lvRideTORec."Transport Order No.");
            IF lvAddOnExistingTO THEN BEGIN
              lvTmpTransOrderRec := lvTransOrderRec;
              lvTmpTransOrderRec."No." := lvRideTORec."Transport Order No.";
              lvTmpTransOrderRec.INSERT;
            END;
            //
            lvTransOrderPORec.SETRANGE("Transport Order No.", lvRideTORec."Transport Order No.");
            IF lvTransOrderPORec.FINDFIRST THEN BEGIN
              REPEAT
                lvTmpTransOrderPORec := lvTransOrderPORec;
                lvTmpTransOrderPORec.INSERT
              UNTIL lvTransOrderPORec.NEXT = 0;
            END;
          UNTIL lvRideTORec.NEXT = 0;
        END;

        lvRidePORec.RESET;
        lvRidePORec.SETRANGE("Ride No.", "No.");
        lvRidePORec.FINDFIRST;  //* Error if no plant orders on Ride
        lvTmpTransOrderPORec.RESET;
        lvTmpTransOrderPORec.SETCURRENTKEY("Plant Order No.");
        REPEAT
          lvRidePORec.TESTFIELD("Plant Order No.");
          lvTmpTransOrderPORec.SETRANGE("Plant Order No.", lvRidePORec."Plant Order No.");
          IF NOT lvTmpTransOrderPORec.FINDFIRST THEN BEGIN
            lvPlantOrderRec.GET(lvRidePORec."Plant Order No.");
            lvPlantOrderRec.TESTFIELD("Transfer Date");
            lvPlantOrderRec.TESTFIELD("From Location");
            lvPlantOrderRec.TESTFIELD("To Location");
            IF lvPlantOrderRec.Type = lvPlantOrderRec.Type::"Negative Inventory Correction" THEN
              lvPlantOrderRec.FIELDERROR(Type);
            IF (lvPlantOrderRec.Type = lvPlantOrderRec.Type::Arrival) AND (NOT lvPlantOrderRec.Posted) THEN BEGIN
              IF PlantSetupRec."Only Create TO fr. rel. Arr.MO" THEN
                lvPlantOrderRec.TESTFIELD(Status, lvPlantOrderRec.Status::Released)
              ELSE BEGIN
                IF (lvPlantOrderRec."Order Picking Status" <= lvPlantOrderRec."Order Picking Status"::Open) THEN BEGIN  //C023560
                  IF (NOT (lvPlantOrderRec.Status IN [lvPlantOrderRec.Status::Printed, lvPlantOrderRec.Status::Released])) THEN
                    lvPlantOrderRec.FIELDERROR(Status);
                  IF (lvPlantOrderRec.Status = lvPlantOrderRec.Status::Printed) AND (lvPlantOrderRec."Order Pick List Printed" = 0) THEN
                    lvPlantOrderRec.TESTFIELD("Order Pick List Printed");
                END;
              END;
            END;
            IF lvPlantOrderRec."Transport Cost for (Advice)" = lvPlantOrderRec."Transport Cost for (Advice)"::Project THEN
              lvPlantOrderRec.TESTFIELD("Project No. (TP-Cost)");
            //
            lvTmpPlantOrderRec := lvPlantOrderRec;
            lvTmpPlantOrderRec.INSERT;
          END;
        UNTIL lvRidePORec.NEXT = 0;
        lvTmpPlantOrderRec.RESET;
        IF NOT lvTmpPlantOrderRec.FINDFIRST THEN
          ERROR(Text002);
      END;

      WITH lvTmpPlantOrderRec DO BEGIN
        FINDSET;
        REPEAT
          lvTmpTransOrderRec.RESET;
          lvTmpTransOrderRec.SETRANGE(Type, Type);
          lvTmpTransOrderRec.SETRANGE("From Location", "From Location");
          lvTmpTransOrderRec.SETRANGE("To Location", "To Location");
          lvTmpTransOrderRec.SETRANGE("From Location Address Code", "From Location Address Code");
          lvTmpTransOrderRec.SETRANGE("To Location Address Code", "To Location Address Code");
          lvTmpTransOrderRec.SETRANGE(Status, lvTmpTransOrderRec.Status::Open, lvTmpTransOrderRec.Status::Printed);
          lvTmpTransOrderRec.SETRANGE("Project No.", "Project No. (TP-Cost)");
          lvTmpTransOrderRec.SETRANGE("Shipping Agent", ITransRideRec."Shipping Agent");
          lvTmpTransOrderRec.SETRANGE("Means of Transport", ITransRideRec."Means of Transport");
          IF lvTmpTransOrderRec.FINDFIRST THEN
            lvTransOrderRec.GET(lvTmpTransOrderRec."No.")
          ELSE BEGIN
            //CheckPlantSetupTransCosObjects(lvTmpPlantOrderRec, lvMeansOfTransRec);  //22057.o
            lvTransOrderRec.INIT;
            lvTransOrderRec.InitRecord();
            lvTransOrderRec."No." := '';
            lvTransOrderRec.Type := Type;
            lvTransOrderRec."Transport Date" := ITransRideRec.Date;
            lvTransOrderRec.INSERT(TRUE);
            lvTransOrderRec.TESTFIELD("No.");

            lvTransOrderRec."Ride No." := ITransRideRec."No.";
            lvTransOrderRec."Shipping Agent" := ITransRideRec."Shipping Agent";
            lvTransOrderRec."Means of Transport" := ITransRideRec."Means of Transport";
            //lvTransOrderRec.FillMeansTranDefaultCostObject();  //22057.o
            FillTransOrderFields(lvTmpPlantOrderRec, lvTransOrderRec);
            lvTransOrderRec.MODIFY;

            lvTmpTransOrderRec := lvTransOrderRec;
            lvTmpTransOrderRec.INSERT;

            CopyContactsFromPO2TO("No.", lvTransOrderRec."No.");
            lvRideTORec.INIT;
            lvRideTORec."Ride No." := ITransRideRec."No.";
            lvRideTORec."Transport Order No." :=lvTransOrderRec."No.";
            lvRideTORec.INSERT(FALSE);
            lvCounter := lvCounter + 0.0001;
          END;

          lvTransOrderPORec.INIT;
          lvTransOrderPORec."Transport Order No." := lvTransOrderRec."No.";
          lvTransOrderPORec."Plant Order No." := "No.";
          lvTransOrderPORec.INSERT(FALSE);  //* FALSE!
          RunCreateTransportCost(lvTransOrderRec, lvTransOrderPORec."Plant Order No.", TRUE, TRUE, FALSE);
          lvPlantOrderCostLineMgt.RunInsertTOStndTransCostLines(lvTransOrderRec."No.", "No.");  //* TO and PO
          lvCounter := lvCounter + 1;
        UNTIL NEXT = 0;
      END;

      EXIT(lvCounter);
    END;

    PROCEDURE RunCreateTransportCost@1100485001(ITransOrderRec@1100485000 : Record 11020505;IPlantOrderNo@1100485003 : Code[20];ICreateTransport@1100525001 : Boolean;ICreateLoadUnload@1100525000 : Boolean;ManualRun@1210190001 : Boolean);
    VAR
      lvTransPlantOrderLine@1100485004 : Record 11020509;
      lvTransCostLineRec@1100485006 : Record 11020506;
      lvTransCostObject@1210190000 : Record 11020499;
      lvDoTrans@1100485002 : Boolean;
      lvDoLoad@1100485001 : Boolean;
      lvDoTransSave@1210190002 : Boolean;
      lvDoLoadSave@1210190003 : Boolean;
      lvNextLineNo@1100485007 : Integer;
      CostLineNo@1210190004 : Integer;
    BEGIN
      WITH ITransOrderRec DO BEGIN
        IF ("Shipping Agent" = '') OR ("Means of Transport" = '') THEN  //22057.n (only cost objects by SA/MofT)
          EXIT;
        CALCFIELDS("Invoice with Transport Order");
        IF "Invoice with Transport Order" <> '' THEN
          EXIT;

        TESTFIELD("No.");
        TESTFIELD("Transport Date");

        PlantSetupRec.GET;

        //22057.n
        lvTransCostObject.SETRANGE("Shipping Agent", "Shipping Agent");
        lvTransCostObject.SETRANGE("Means of Transport", "Means of Transport");
        lvTransCostObject.SETFILTER("Cost Object", '<>%1', '');

        IF ICreateTransport THEN BEGIN
          IF ((PlantSetupRec."Create TO Cost Autom." IN
               [PlantSetupRec."Create TO Cost Autom."::"Transport Cost", PlantSetupRec."Create TO Cost Autom."::Both]) OR
              ManualRun) AND
             ("Create Transport Cost by" <> "Create Transport Cost by"::" ")
          THEN BEGIN
            //TESTFIELD("Cost Object Transport");  //* Note: "Cost Object Transport 2" is optional  //22057.o
            //lvDoTrans := TRUE;                                                                    //22057.o
            //22057.n
            lvTransCostObject.SETRANGE(Type, lvTransCostObject.Type::Transport);
            IF lvTransCostObject.FINDFIRST THEN
              lvDoTrans := TRUE;
          END;
        END;

        IF ICreateLoadUnload THEN BEGIN
          IF ((PlantSetupRec."Create TO Cost Autom." IN
               [PlantSetupRec."Create TO Cost Autom."::"Load/Unload Cost", PlantSetupRec."Create TO Cost Autom."::Both]) OR
              ManualRun) AND
             ("Create Load/Unload Cost by" <> "Create Load/Unload Cost by"::" ") AND
             (((PlantSetupRec."Create Load/Unload Cost for" = PlantSetupRec."Create Load/Unload Cost for"::Both) AND
               (Type IN [Type::Arrival,Type::Removal])) OR
              ((PlantSetupRec."Create Load/Unload Cost for" = PlantSetupRec."Create Load/Unload Cost for"::Arrival) AND
               (Type = Type::Arrival)) OR
              ((PlantSetupRec."Create Load/Unload Cost for" = PlantSetupRec."Create Load/Unload Cost for"::Removal) AND
               (Type = Type::Removal)))
          THEN BEGIN
            //TESTFIELD("Create Load/Unload Cost by");  // Already checked in 'IF', so not needed (also not done for TP)
            //TESTFIELD("Cost Object Load/Unload");  //22057.o
            //lvDoLoad := TRUE;                      //22057.o
            //22057.n
            lvTransCostObject.SETRANGE(Type, lvTransCostObject.Type::"Load/Unload");
            IF lvTransCostObject.FINDFIRST THEN
              lvDoLoad := TRUE;
          END;
        END;

        IF NOT lvDoTrans AND NOT lvDoLoad THEN
          EXIT;

        lvTransPlantOrderLine.SETRANGE("Transport Order No.", "No.");
        IF IPlantOrderNo <> '' THEN  //* IF filled then only process specified PO
          lvTransPlantOrderLine.SETRANGE("Plant Order No.", IPlantOrderNo);
        IF NOT lvTransPlantOrderLine.FIND('-') THEN BEGIN
          IF ("Create Transport Cost by" = "Create Transport Cost by"::"Plant Order") THEN
            lvDoTrans := FALSE;
          IF ("Create Load/Unload Cost by" = "Create Load/Unload Cost by"::"Plant Order") THEN
            lvDoLoad := FALSE;
        END;
        IF (NOT lvDoTrans) AND (NOT lvDoLoad) THEN
          EXIT;

        lvTransCostLineRec.SETRANGE("Transport Order No.", "No.");
        IF NOT lvTransCostLineRec.FIND('+') THEN
          lvNextLineNo := 10000
        ELSE
          lvNextLineNo := lvTransCostLineRec."Line No." + 10000;

        lvDoTransSave := lvDoTrans;
        lvDoLoadSave := lvDoLoad;
        REPEAT
          IF lvDoTrans THEN BEGIN
            //22057.so
            //IF "Cost Object Transport" <> '' THEN BEGIN
            //  lvTransCostLineRec.INIT;
            //  lvTransCostLineRec."Transport Order No." := "No.";
            //  lvTransCostLineRec."Line No." := lvNextLineNo;
            //  IF ("Create Transport Cost by" = "Create Transport Cost by"::"Plant Order") THEN
            //    lvTransCostLineRec.VALIDATE("Plant Order No.", lvTransPlantOrderLine."Plant Order No.");
            //  lvTransCostLineRec.Type := lvTransCostLineRec.Type::Transport;
            //  lvTransCostLineRec.VALIDATE("No.", "Cost Object Transport");
            //  IF NOT CheckTransCostLinePresent(lvTransCostLineRec) THEN BEGIN
            //    lvTransCostLineRec.INSERT;
            //    lvNextLineNo := lvNextLineNo + 10000;
            //  END;
            //END;
            //IF "Cost Object Transport 2" <> '' THEN BEGIN
            //  lvTransCostLineRec.INIT;
            //  lvTransCostLineRec."Transport Order No." := "No.";
            //  lvTransCostLineRec."Line No." := lvNextLineNo;
            //  IF ("Create Transport Cost by" = "Create Transport Cost by"::"Plant Order") THEN
            //    lvTransCostLineRec.VALIDATE("Plant Order No.", lvTransPlantOrderLine."Plant Order No.");
            //  lvTransCostLineRec.Type := lvTransCostLineRec.Type::Transport;
            //  lvTransCostLineRec.VALIDATE("No.", "Cost Object Transport 2");
            //  IF NOT CheckTransCostLinePresent(lvTransCostLineRec) THEN BEGIN
            //    lvTransCostLineRec.INSERT;
            //    lvNextLineNo := lvNextLineNo + 10000;
            //  END;
            //END;
            //22057.eo
            //22057.sn
            lvTransCostObject.SETRANGE(Type, lvTransCostObject.Type::Transport);
            IF lvTransCostObject.FINDSET THEN BEGIN
              REPEAT
                lvTransCostLineRec.INIT;
                lvTransCostLineRec."Transport Order No." := "No.";
                lvTransCostLineRec."Line No." := lvNextLineNo;
                IF ("Create Transport Cost by" = "Create Transport Cost by"::"Plant Order") THEN
                  lvTransCostLineRec.VALIDATE("Plant Order No.", lvTransPlantOrderLine."Plant Order No.");
                lvTransCostLineRec.Type := lvTransCostLineRec.Type::Transport;
                lvTransCostLineRec.VALIDATE("No.", lvTransCostObject."Cost Object");
                IF NOT CheckTransCostLinePresent(lvTransCostLineRec, CostLineNo) THEN BEGIN
                  IF NOT ManualRun THEN
                    lvTransCostLineRec."Generated Automatically" := TRUE;
                  lvTransCostLineRec.INSERT(FALSE);
                  lvNextLineNo := lvNextLineNo + 10000;
                END ELSE BEGIN
                  IF lvTransCostLineRec.GET("No.", CostLineNo) THEN BEGIN
                    lvTransCostLineRec.Price := lvTransCostLineRec.SearchTransportPrice(ITransOrderRec);
                    lvTransCostLineRec.VALIDATE(Price);
                    lvTransCostLineRec.MODIFY(FALSE);
                  END;
                END;
              UNTIL lvTransCostObject.NEXT = 0;
            END;
            //22057.en
            IF ("Create Transport Cost by" = "Create Transport Cost by"::"Transport Order") THEN
              lvDoTrans := FALSE;
          END;
          IF lvDoLoad THEN BEGIN
            //22057.so
            //lvTransCostLineRec.INIT;
            //lvTransCostLineRec."Transport Order No." := "No.";
            //lvTransCostLineRec."Line No." := lvNextLineNo;
            //IF ("Create Load/Unload Cost by" = "Create Load/Unload Cost by"::"Plant Order") THEN
            //  lvTransCostLineRec.VALIDATE("Plant Order No.", lvTransPlantOrderLine."Plant Order No.");
            //lvTransCostLineRec.Type := lvTransCostLineRec.Type::"Load/Unload";
            //lvTransCostLineRec.FillLoadUnloadDefaultInvoiceTo();
            //lvTransCostLineRec.VALIDATE("No.", "Cost Object Load/Unload");
            //IF NOT CheckTransCostLinePresent(lvTransCostLineRec) THEN BEGIN
            //  lvTransCostLineRec.INSERT;
            //  lvNextLineNo := lvNextLineNo + 10000;
            //END;
            //22057.eo
            //22057.sn
            lvTransCostObject.SETRANGE(Type, lvTransCostObject.Type::"Load/Unload");
            IF lvTransCostObject.FINDSET THEN BEGIN
              REPEAT
                lvTransCostLineRec.INIT;
                lvTransCostLineRec."Transport Order No." := "No.";
                lvTransCostLineRec."Line No." := lvNextLineNo;
                IF ("Create Load/Unload Cost by" = "Create Load/Unload Cost by"::"Plant Order") THEN
                  lvTransCostLineRec.VALIDATE("Plant Order No.", lvTransPlantOrderLine."Plant Order No.");
                lvTransCostLineRec.Type := lvTransCostLineRec.Type::"Load/Unload";
                lvTransCostLineRec.FillLoadUnloadDefaultInvoiceTo();
                lvTransCostLineRec.VALIDATE("No.", lvTransCostObject."Cost Object");
                IF NOT CheckTransCostLinePresent(lvTransCostLineRec, CostLineNo) THEN BEGIN
                  IF NOT ManualRun THEN
                    lvTransCostLineRec."Generated Automatically" := TRUE;
                  lvTransCostLineRec.INSERT(FALSE);
                  lvNextLineNo := lvNextLineNo + 10000;
                END ELSE BEGIN
                  IF lvTransCostLineRec.GET("No.", CostLineNo) THEN BEGIN
                    lvTransCostLineRec.Price := lvTransCostLineRec.SearchTransportPrice(ITransOrderRec);
                    lvTransCostLineRec.VALIDATE(Price);
                    lvTransCostLineRec.MODIFY(FALSE);
                  END;
                END;
              UNTIL lvTransCostObject.NEXT = 0;
            END;
            //22057.en
            IF ("Create Load/Unload Cost by" = "Create Load/Unload Cost by"::"Transport Order") THEN
              lvDoLoad := FALSE;
          END;
        UNTIL (lvTransPlantOrderLine.NEXT = 0) OR ((NOT lvDoTrans) AND (NOT lvDoLoad));

        IF (lvDoTransSave OR lvDoLoadSave) AND (NOT ManualRun) THEN BEGIN
          lvTransCostLineRec.RESET;
          lvTransCostLineRec.SETRANGE("Transport Order No.", "No.");
          lvTransCostLineRec.SETRANGE("Generated Automatically", TRUE);
          //
          lvTransCostObject.RESET;
          lvTransCostObject.SETRANGE("Shipping Agent", "Shipping Agent");
          lvTransCostObject.SETRANGE("Means of Transport", "Means of Transport");

          IF lvDoTransSave AND ("Create Transport Cost by" <> "Create Transport Cost by"::" ") THEN BEGIN
            lvTransCostLineRec.SETRANGE(Type, lvTransCostLineRec.Type::Transport);
            IF lvTransCostLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
              REPEAT
                IF (("Create Transport Cost by" = "Create Transport Cost by"::"Plant Order") AND
                    (lvTransCostLineRec."Plant Order No." = '')) OR
                   (("Create Transport Cost by" = "Create Transport Cost by"::"Transport Order") AND
                    (lvTransCostLineRec."Plant Order No." <> ''))
                THEN
                  lvTransCostLineRec.DELETE
                ELSE BEGIN
                  lvTransCostObject.SETRANGE(Type, lvTransCostObject.Type::Transport);
                  lvTransCostObject.SETRANGE("Cost Object", lvTransCostLineRec."No.");
                  IF NOT lvTransCostObject.FINDFIRST THEN
                    lvTransCostLineRec.DELETE
                END;
              UNTIL lvTransCostLineRec.NEXT = 0;
            END;
          END;
          IF lvDoLoadSave AND ("Create Load/Unload Cost by" <> "Create Load/Unload Cost by"::" ") THEN BEGIN
            lvTransCostLineRec.SETRANGE(Type, lvTransCostLineRec.Type::"Load/Unload");
            IF lvTransCostLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
              REPEAT
                IF (("Create Load/Unload Cost by" = "Create Load/Unload Cost by"::"Plant Order") AND
                    (lvTransCostLineRec."Plant Order No." = '')) OR
                   (("Create Load/Unload Cost by" = "Create Load/Unload Cost by"::"Transport Order") AND
                    (lvTransCostLineRec."Plant Order No." <> ''))
                THEN
                  lvTransCostLineRec.DELETE
                ELSE BEGIN
                  lvTransCostObject.SETRANGE(Type, lvTransCostObject.Type::"Load/Unload");
                  lvTransCostObject.SETRANGE("Cost Object", lvTransCostLineRec."No.");
                  IF NOT lvTransCostObject.FINDFIRST THEN
                    lvTransCostLineRec.DELETE
                END;
              UNTIL lvTransCostLineRec.NEXT = 0;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE RunUpdateTransportOrderPrinted@1100485003(ITransOrderRec@1100485000 : Record 11020505);
    BEGIN
      WITH ITransOrderRec DO BEGIN
        FIND;
        "Transport Order Printed" := "Transport Order Printed" + 1;
        IF Status < Status::Printed THEN
          Status := Status::Printed;
        IF "Status Delivery" < "Status Delivery"::Released THEN
          VALIDATE("Status Delivery", "Status Delivery"::Released);

        MODIFY;

        COMMIT;
      END;
    END;

    PROCEDURE RunUpdatePostTransOrderPrinted@1100485004(IPostedTransOrderRec@1100485000 : Record 11020507);
    BEGIN
      WITH IPostedTransOrderRec DO BEGIN
        FIND;
        "Transport Order Printed" := "Transport Order Printed" + 1;
        IF Status < Status::Printed THEN
          Status := Status::Printed;
        MODIFY;

        COMMIT;
      END;
    END;

    PROCEDURE RunCreateTransportPurchOrder@1100485005(ITransOrderNo@1100485000 : Code[20];IRideNo@1100485001 : Code[20];IShippingAgent@1100485002 : Code[10];ITransDate@1100485011 : Date;ITypeOfCost@1100525000 : ',TOCost,RideCost');
    VAR
      lvShippingAgentRec@1100485008 : Record 291;
      lvTransOrderRec@1100485007 : Record 11020505;
      lvPostedTransOrderRec@1100485006 : Record 11020507;
      lvTransRideRec@1100525002 : Record 11020517;
      lvPurchOrderRec@1100485005 : Record 38;
      lvCreatePurchOrderTransportRpt@1100485004 : Report 11020505;
      lvCreatePurchOrderTransRideRpt@1100525001 : Report 11020511;
      lvCreatedPurchOrderNo@1100485003 : Code[20];
      lvText001@1100485010 : TextConst 'DEU=Keine Bestellung erstellt.;ENU=No Purchase Order created.;NLD=Geen inkooporder aangemaakt.;NOR=Ingen innkjõpsordre er opprettet.;SVE=Ingen inkîpsorder har skapats.';
      lvText002@1100485009 : TextConst 'DEU=Bestellung ''%1'' erstellt. Anzeigen?;ENU=Purchase Order ''%1'' created. Show?;NLD=Inkooporder ''%1'' aangemaakt. Tonen?;NOR=Innkjõpsordre %1 er opprettet. Vise?;SVE=Inkîpsorder %1 Ñr skapad Vill du visa?';
    BEGIN
      //* Create a purchase order from TO Cost Lines or from Ride Cost
      lvShippingAgentRec.GET(IShippingAgent);
      lvShippingAgentRec.TESTFIELD(External, TRUE);
      lvShippingAgentRec.TESTFIELD("Vendor No.");

      lvShippingAgentRec.SETRANGE(Code, IShippingAgent);
      lvShippingAgentRec.SETRANGE("Vendor No.", lvShippingAgentRec."Vendor No.");

      CASE ITypeOfCost OF
        ITypeOfCost::TOCost:
          BEGIN
            IF (ITransDate <> 0D) AND (IRideNo = '') THEN //* TO's of a ride can have different dates, so set no filter on date
              lvShippingAgentRec.SETRANGE("Transport Date Filter", ITransDate);
            lvCreatePurchOrderTransportRpt.SETTABLEVIEW(lvShippingAgentRec);
            //
            IF IRideNo = '' THEN
              lvTransOrderRec.SETRANGE("No.", ITransOrderNo)
            ELSE
              lvTransOrderRec.SETRANGE("Ride No.", IRideNo);
            lvCreatePurchOrderTransportRpt.SETTABLEVIEW(lvTransOrderRec);
            //
            IF IRideNo = '' THEN
              lvPostedTransOrderRec.SETRANGE("No.", ITransOrderNo)
            ELSE
              lvPostedTransOrderRec.SETRANGE("Ride No.", IRideNo);
            lvCreatePurchOrderTransportRpt.SETTABLEVIEW(lvPostedTransOrderRec);
            //
            lvCreatePurchOrderTransportRpt.RUNMODAL;
            lvCreatePurchOrderTransportRpt.GetCreatedPurchOrderNo(lvCreatedPurchOrderNo);
          END;
        ITypeOfCost::RideCost:
          BEGIN
            lvShippingAgentRec.SETRANGE("Transport Date Filter", ITransDate);
            lvCreatePurchOrderTransRideRpt.SETTABLEVIEW(lvShippingAgentRec);
            //
            lvTransRideRec.SETRANGE("No.", IRideNo);
            lvCreatePurchOrderTransRideRpt.SETTABLEVIEW(lvTransRideRec);
            //
            lvCreatePurchOrderTransRideRpt.RUNMODAL;
            lvCreatePurchOrderTransRideRpt.GetCreatedPurchOrderNo(lvCreatedPurchOrderNo);
          END;
        ELSE
          EXIT;
      END;

      IF lvCreatedPurchOrderNo = '' THEN
        ERROR(lvText001);

      IF CONFIRM(lvText002, FALSE, lvCreatedPurchOrderNo) THEN BEGIN
        COMMIT;
        lvPurchOrderRec.RESET;
        lvPurchOrderRec.SETRANGE("Document Type", lvPurchOrderRec."Document Type"::Order);
        lvPurchOrderRec.SETRANGE("No.", lvCreatedPurchOrderNo);
        lvPurchOrderRec."Document Type" := lvPurchOrderRec."Document Type"::Order;
        lvPurchOrderRec."No." := lvCreatedPurchOrderNo;
        PAGE.RUNMODAL(PAGE::"Purchase Order", lvPurchOrderRec);
      END;
    END;

    PROCEDURE CheckTransCostLinePresent@1100485002(ITransCostLineRec@1100485000 : Record 11020506;VAR PresentCostLineNo@1210190000 : Integer) : Boolean;
    BEGIN
      PresentCostLineNo := 0;
      WITH ITransCostLineRec DO BEGIN
        SETRANGE("Transport Order No.", "Transport Order No.");
        SETRANGE("Plant Order No.", "Plant Order No.");
        SETRANGE(Type, Type);
        SETRANGE("No.", "No.");
        IF FINDFIRST THEN BEGIN
          PresentCostLineNo := ITransCostLineRec."Line No.";
          EXIT(TRUE);
        END;
      END;

      EXIT(FALSE);
    END;

    PROCEDURE UpdateCostLineQuanForWeight@1100485007(ITransOrderNo@1100485001 : Code[20];IPlantOrderNo@1100485002 : Code[20]);
    VAR
      lvTransCostLineRec@1100485000 : Record 11020506;
      lvWeight@1100485003 : Decimal;
    BEGIN
      PlantSetupRec.GET;
      IF (PlantSetupRec."Unit of Measure Weight 1" = '') AND (PlantSetupRec."Unit of Measure Weight 2" = '') THEN
        EXIT;

      lvTransCostLineRec.SETRANGE("Transport Order No.", ITransOrderNo);
      lvTransCostLineRec.SETRANGE("Plant Order No.", IPlantOrderNo);
      lvTransCostLineRec.SETRANGE("Plant Type", '');
      lvTransCostLineRec.SETFILTER(Type, '<>%1', lvTransCostLineRec.Type::Text);

      //* Weight 1
      lvTransCostLineRec.SETRANGE("Unit of Measure", PlantSetupRec."Unit of Measure Weight 1");
      IF lvTransCostLineRec.FIND('-') THEN BEGIN
        PlantSetupRec.TESTFIELD("Qty. per Unit of Msr. Weight 1");
        REPEAT
          lvWeight := lvTransCostLineRec.GetWeightCostLine();
          lvTransCostLineRec.VALIDATE(Quantity, ROUND((lvWeight / PlantSetupRec."Qty. per Unit of Msr. Weight 1"), 0.01));
          lvTransCostLineRec.MODIFY;
        UNTIL lvTransCostLineRec.NEXT = 0;
      END;

      //* Weight 2
      lvTransCostLineRec.SETRANGE("Unit of Measure", PlantSetupRec."Unit of Measure Weight 2");
      IF lvTransCostLineRec.FIND('-') THEN BEGIN
        PlantSetupRec.TESTFIELD("Qty. per Unit of Msr. Weight 2");
        REPEAT
          lvWeight := lvTransCostLineRec.GetWeightCostLine();
          lvTransCostLineRec.VALIDATE(Quantity, ROUND((lvWeight / PlantSetupRec."Qty. per Unit of Msr. Weight 2"), 0.01));
          lvTransCostLineRec.MODIFY;
        UNTIL lvTransCostLineRec.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CheckPlantSetupTransCosObjects@1100525012(IPlantOrderRec@1100525001 : Record 11012556;MeansOfTransRec@1100525000 : Record 11020503);
    BEGIN
      //22057.o
      //WITH PlantSetupRec DO BEGIN
      //  IF ("Create TO Cost Autom." IN ["Create TO Cost Autom."::"Transport Cost", "Create TO Cost Autom."::Both]) THEN BEGIN
      //    TESTFIELD("Def. Create Transport Cost by");
      //    IF MeansOfTransRec."Default Cost Object Transport" = '' THEN
      //      TESTFIELD("Default Cost Object Transport");  //* Note: "Default Cost Object Transp. 2" is optional
      //  END;
      //
      //  IF ("Create TO Cost Autom." IN ["Create TO Cost Autom."::"Load/Unload Cost", "Create TO Cost Autom."::Both]) AND
      //     ((("Create Load/Unload Cost for" = "Create Load/Unload Cost for"::Both) AND
      //       (IPlantOrderRec.Type IN [IPlantOrderRec.Type::Arrival,IPlantOrderRec.Type::Removal])) OR
      //      (("Create Load/Unload Cost for" = "Create Load/Unload Cost for"::Arrival) AND
      //       (IPlantOrderRec.Type = IPlantOrderRec.Type::Arrival)) OR
      //      (("Create Load/Unload Cost for" = "Create Load/Unload Cost for"::Removal) AND
      //       (IPlantOrderRec.Type = IPlantOrderRec.Type::Removal)))
      //  THEN BEGIN
      //    TESTFIELD("Def.Create Load/Unload Cost by");
      //    IF MeansOfTransRec."Def. Cost Object Load/Unload" = '' THEN
      //      TESTFIELD("Def. Cost Object Load/Unload");
      //  END;
      //END;
    END;

    LOCAL PROCEDURE FillTransOrderFields@1100525005(IPlantOrderRec@1100525000 : Record 11012556;VAR TransOrderRec@1100525001 : Record 11020505);
    BEGIN
      WITH IPlantOrderRec DO BEGIN
        TransOrderRec."From Location" := "From Location";
        TransOrderRec."To Location" := "To Location";
        TransOrderRec."From Location Address" := "From Location Address";
        TransOrderRec."From Location Address 2" := "From Location Address 2";
        TransOrderRec."From Location City" := "From Location City";
        TransOrderRec."From Location Contact" := "From Location Contact";
        TransOrderRec."From Location Contact Phone No" := "From Location Contact Phone No";
        TransOrderRec."From Location Post Code" := "From Location Post Code";
        TransOrderRec."From Location Address Code" := "From Location Address Code";
        TransOrderRec."From Location Country/Region" := "From Location Country/Region";
        TransOrderRec."From Location Phone No(Mobile)" := "From Location Mobile Phone No.";
        TransOrderRec."From Location E-Mail" := "From Location E-Mail";
        TransOrderRec."From Location Contact Name" := "From Location Contact Name";
        TransOrderRec."To Location Address" := "To Location Address";
        TransOrderRec."To Location Address 2" := "To Location Address 2";
        TransOrderRec."To Location City" := "To Location City";
        TransOrderRec."To Location Contact" := "To Location Contact";
        TransOrderRec."To Location Contact Phone No" := "To Location Contact Phone No";
        TransOrderRec."To Location Post Code" := "To Location Post Code";
        TransOrderRec."To Location Address Code" := "To Location Address Code";
        TransOrderRec."To Location Country/Region" := "To Location Country/Region";
        TransOrderRec."To Location Phone No(Mobile)" := "To Location Mobile Phone No.";
        TransOrderRec."To Location E-Mail" := "To Location E-Mail";
        TransOrderRec."To Location Contact Name" := "To Location Contact Name";
        TransOrderRec."Perc. From Location" := 0;
        TransOrderRec."Perc. To Location" := 0;
        TransOrderRec."Perc. Internal" := 0;
        TransOrderRec."Perc. Project" := 0;
        CASE "Transport Cost for (Advice)" OF
          "Transport Cost for (Advice)"::Internal:
            TransOrderRec."Perc. Internal" := 100;
          "Transport Cost for (Advice)"::Project:
            BEGIN
              TransOrderRec."Perc. Project" := 100;
              TransOrderRec."Project No." := "Project No. (TP-Cost)";
            END;
          "Transport Cost for (Advice)"::Location:
            BEGIN
              CASE Type OF
                Type::Arrival:
                  TransOrderRec."Perc. To Location" := 100;
                Type::Removal:
                    TransOrderRec."Perc. From Location" := 100
                ELSE
                  BEGIN
                    TransOrderRec.CALCFIELDS("From Depot", "To Depot");
                    IF (TransOrderRec."From Depot" AND TransOrderRec."To Depot") THEN
                      TransOrderRec."Perc. Internal" := 100
                    ELSE BEGIN
                      IF (NOT TransOrderRec."From Depot") AND (NOT TransOrderRec."To Depot") THEN BEGIN
                        TransOrderRec."Perc. From Location" := 50;
                        TransOrderRec."Perc. To Location" := 50;
                      END ELSE BEGIN
                        IF (NOT TransOrderRec."From Depot") THEN
                          TransOrderRec."Perc. From Location" := 100
                        ELSE
                          TransOrderRec."Perc. To Location" := 100;
                      END;
                    END;
                  END;
              END;
            END;
          "Transport Cost for (Advice)"::"From Location":
            BEGIN
              IF (Type <> Type::"Other Transfers") THEN
                ERROR(Text000, "Transport Cost for (Advice)", FIELDCAPTION("No."), "No.");
              TransOrderRec.CALCFIELDS("From Depot");
              IF TransOrderRec."From Depot" THEN
                ERROR(Text001,"Transport Cost for (Advice)",FIELDCAPTION("From Location"),"From Location",FIELDCAPTION("No."),"No.");
              TransOrderRec."Perc. From Location" := 100;
            END;
          "Transport Cost for (Advice)"::"To Location":
            BEGIN
              IF (Type <> Type::"Other Transfers") THEN
                ERROR(Text000, "Transport Cost for (Advice)", FIELDCAPTION("No."), "No.");
              TransOrderRec.CALCFIELDS("To Depot");
              IF TransOrderRec."To Depot" THEN
                ERROR(Text001,"Transport Cost for (Advice)",FIELDCAPTION("To Location"),"To Location",FIELDCAPTION("No."),"No.");
              TransOrderRec."Perc. To Location" := 100;
            END;
        END;
        TransOrderRec."Appointment Fixed Date" := "Appointment Fixed Date";
        TransOrderRec."Appointment Time" := "Appointment Time";
        TransOrderRec."Appointment Code" := "Appointment Code";
        TransOrderRec."Appointment Comment" := "Appointment Comment";
        TransOrderRec."Shipment Method Code" := "Shipment Method Code";
        TransOrderRec."Loading Date" := "Loading Date";
        TransOrderRec."Loading Start Time" := "Loading Start Time";
        TransOrderRec."Loading End Time" := "Loading End Time";
        TransOrderRec."Unloading Date" := "Unloading Date";
        TransOrderRec."Unloading Start Time" := "Unloading Start Time";
        TransOrderRec."Unloading End Time" := "Unloading End Time";
      END;
    END;

    PROCEDURE CopyContactsFromPO2TO@1100525002(PlantOrderNo@1100525002 : Code[20];TransOrderNo@1100525003 : Code[20]);
    VAR
      lvOrderContRec@1100525001 : Record 11012536;
      lvOrderContRec2@1100525000 : Record 11012536;
    BEGIN
      lvOrderContRec.SETRANGE(Type, lvOrderContRec.Type::"PO From", lvOrderContRec.Type::"PO To");
      lvOrderContRec.SETRANGE("Order No.", PlantOrderNo);
      IF lvOrderContRec.FIND('-') THEN BEGIN
        REPEAT
          lvOrderContRec2 := lvOrderContRec;
          IF lvOrderContRec.Type = lvOrderContRec.Type::"PO From" THEN
            lvOrderContRec2.Type := lvOrderContRec.Type::"TO From"
          ELSE
            lvOrderContRec2.Type := lvOrderContRec.Type::"TO To";
          lvOrderContRec2."Order No." := TransOrderNo;
          lvOrderContRec2.INSERT;
        UNTIL lvOrderContRec.NEXT = 0;
      END;
    END;

    PROCEDURE PrintTransportOrder@1100525001(TransportOrder@1100525000 : Record 11020505);
    VAR
      LinkedTransportOrders@1100525001 : Record 11020514;
      DocumentPrintMgt@1100525002 : Codeunit 229;
      TransportOrderNoFilter@1100525003 : Text[1024];
    BEGIN
      //DP00485 C009628
      LinkedTransportOrders.SETRANGE("Transport Order No.", TransportOrder."No.");
      IF LinkedTransportOrders.FINDSET THEN BEGIN
        IF CONFIRM(Text005) THEN BEGIN
          TransportOrderNoFilter := TransportOrder."No.";
          REPEAT
            TransportOrderNoFilter := TransportOrderNoFilter + '|' + LinkedTransportOrders."Linked Transport Order No."
          UNTIL LinkedTransportOrders.NEXT = 0;
          TransportOrder.SETFILTER("No.", TransportOrderNoFilter);
        END;
      END;
      DocumentPrintMgt.PrintPlantTransportOrder(TransportOrder, (TransportOrderNoFilter <> ''));
    END;

    PROCEDURE PrintPostedTransportOrder@1100525004(PostedTransportOrder@1100525000 : Record 11020507);
    VAR
      PostedLinkedTransportOrders@1100525001 : Record 11020515;
      DocumentPrintMgt@1100525002 : Codeunit 229;
      TransportOrderNoFilter@1100525003 : Text[1024];
    BEGIN
      //DP00485 C009628
      PostedLinkedTransportOrders.SETRANGE("Transport Order No.", PostedTransportOrder."No.");
      IF PostedLinkedTransportOrders.FINDSET THEN BEGIN
        IF CONFIRM(Text005) THEN BEGIN
          TransportOrderNoFilter := PostedTransportOrder."No.";
          REPEAT
            TransportOrderNoFilter := TransportOrderNoFilter + '|' + PostedLinkedTransportOrders."Linked Transport Order No."
          UNTIL PostedLinkedTransportOrders.NEXT = 0;
          PostedTransportOrder.SETFILTER("No.", TransportOrderNoFilter);
        END;
      END;
      DocumentPrintMgt.PrintPostedPlantTransportOrder(PostedTransportOrder, (TransportOrderNoFilter <> ''));
    END;

    BEGIN
    {
      - Create Transport Order, from a Plant Order
      - Create Transport Order Cost
    }
    END.
  }
}

