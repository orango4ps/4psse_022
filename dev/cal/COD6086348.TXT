OBJECT Codeunit 6086348 Mileage-Reimburse Batch
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EMW16.00.10.3.00;
  }
  PROPERTIES
  {
    TableNo=6086338;
    OnRun=BEGIN
            Mileage.COPY(Rec);
            Code;
            Rec := Mileage;
          END;

  }
  CODE
  {
    VAR
      Mileage@1003 : Record 6086338;
      ConfirmNoReimbEntriesQuestion@1160040002 : TextConst 'DEU=Es gibt einen oder mehrere Kilometerleistungsposten vor dem ersten Datum im Datumsfilter, die noch nicht zurÅckerstattet wurden.\\Mîchten Sie fortfahren?;ENU=There are one or more mileage entries before the earliest date in the date filter that have not yet been reimbursed.\\Do you want to continue?;NLD=Er zijn ÇÇn of meer kilometrageposten voor de vroegste datum binnen het datumfilter die nog niet terugbetaald zijn.\\Wilt u doorgaan?';
      ConfirmReimburseMultiQuestion@1160040000 : TextConst 'DEU=Wird eine RÅckerstattung fÅr %1 Mitarbeiter veranlassen.\\Mîchten Sie fortfahren?;ENU=This will reimburse %1 employees.\\Do you want to continue?;NLD=%1 werknemers worden terugbetaald.\\Wilt u doorgaan?';
      ConfirmReimburseSingleQuestion@1160040001 : TextConst 'DEU=Wird eine RÅckerstattung fÅr %1 Mitarbeiter veranlassen.\\Mîchten Sie fortfahren?;ENU=This will reimburse %1 employee.\\Do you want to continue?;NLD=%1 werknemer wordt terugbetaald.\\Wilt u doorgaan?';
      NothingToReimburseErr@1160040004 : TextConst 'DEU=In diesen Filtern finden sich keine zu erstattenden Positionen.;ENU=There is nothing to reimburse within the filters.;NLD=Er is niets terug te betalen binnen de filters.';

    LOCAL PROCEDURE Code@1160040001();
    VAR
      Mileage2@1160040001 : Record 6086338;
      MileageReimburse@1160040000 : Codeunit 6086346;
    BEGIN
      WITH Mileage DO BEGIN
        IF RECORDLEVELLOCKING THEN
          LOCKTABLE;

        IF NOT ValidateReimbursementOK THEN
          EXIT;

        FINDSET;
        REPEAT
          Mileage2.GET("Entry No.");
          MileageReimburse.RUN(Mileage2);
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE ValidateReimbursementOK@1160040003() : Boolean;
    VAR
      Mileage2@1160040000 : Record 6086338;
      ConfirmText@1160040003 : Text[1024];
      LastUser@1160040004 : Code[50];
      NoOfUsers@1160040002 : Integer;
      NonReimbEntryBeforeDateFilter@1160040001 : Boolean;
    BEGIN
      WITH Mileage2 DO BEGIN
        COPYFILTERS(Mileage);
        IF FINDSET THEN
          REPEAT
            IF LastUser <> "Continia User ID" THEN BEGIN
              NoOfUsers := NoOfUsers + 1;
              LastUser := "Continia User ID";
            END;
          UNTIL NEXT = 0;

        CASE NoOfUsers OF
          0:
            ERROR(NothingToReimburseErr);
          1:
            ConfirmText := ConfirmReimburseSingleQuestion
          ELSE
            ConfirmText := ConfirmReimburseMultiQuestion;
        END;

        IF NOT CONFIRM(ConfirmText,FALSE,NoOfUsers) THEN
          EXIT(FALSE);
        IF NOT NonReimbEntryBeforeDateFilter THEN
          IF GETFILTER("Registration Date") <> '' THEN BEGIN
            SETFILTER("Registration Date",'<%1',GetMinDateFromFilter(Mileage.GETFILTER("Registration Date")));
            IF NOT ISEMPTY THEN
              IF NOT CONFIRM(ConfirmNoReimbEntriesQuestion,FALSE) THEN
                EXIT(FALSE);
          END;
      END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetMinDateFromFilter@1160040000(DateFilter@1160040000 : Text[250]) : Date;
    VAR
      DateRec@1160040001 : Record 2000000007;
    BEGIN
      DateRec.SETRANGE("Period Type",DateRec."Period Type"::Date);
      DateRec.SETFILTER("Period Start",DateFilter);
      IF DateRec.FINDFIRST THEN
        EXIT(DateRec."Period Start");
    END;

    BEGIN
    END.
  }
}

