OBJECT Codeunit 11012568 CalculateRentalPeriods
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      PlantSetup@1100485003 : Record 11012550;
      RentFreeDayRec@11012000 : Record 11012569;
      PlantTypeRec@1100485000 : Record 11012551;
      PlantNoRec@1100485001 : Record 11012552;
      gCompany@1100485002 : Text[30];

    PROCEDURE NumberRentalPeriods@1(LocationRec@11012000 : Record 11012554;StartingDate@11012001 : Date;EndingDate@11012002 : Date;PlantType@1100485000 : Code[20];PlantNo@1100485001 : Code[10];VAR ORateType@1100485003 : Option) : Decimal;
    BEGIN
      IF LocationRec.Code <> '' THEN
        ORateType := LocationRec."Rate Type"
      ELSE BEGIN
        PlantSetup.GET;
        ORateType := PlantSetup."Rate Type";
      END;

      IF (StartingDate = 0D) OR (EndingDate = 0D) OR (EndingDate < StartingDate) THEN
        EXIT(0);

      CASE ORateType OF
        LocationRec."Rate Type"::Day:
          EXIT(EndingDate - StartingDate + 1 - NumberRentFreeDays(LocationRec,StartingDate,EndingDate,PlantType,PlantNo));
        LocationRec."Rate Type"::Week:
          EXIT(NumberRentalWeeks(StartingDate, EndingDate));
        LocationRec."Rate Type"::Month:
          EXIT(NumberRentalMonths(StartingDate, EndingDate));
      END;

      EXIT(0);
    END;

    PROCEDURE NumberRentFreeDays@2(LocationRec@11012000 : Record 11012554;StartingDate@11012001 : Date;EndingDate@11012002 : Date;PlantType@1100485000 : Code[20];PlantNo@1100485001 : Code[10]) : Integer;
    VAR
      TmpRentFreeDay@1100529001 : TEMPORARY Record 11012569;
      lDate@11012003 : Date;
      lNumberFreeDays@11012004 : Integer;
      lvPlantCalendar@1100485002 : Code[10];
      PlantCalAlsoRentalCal@1100529000 : Boolean;
    BEGIN
      IF (PlantType <> '') AND (PlantType <> PlantTypeRec.Code) THEN BEGIN
        IF NOT PlantTypeRec.GET(PlantType) THEN
          PlantTypeRec.INIT;
      END;
      IF (PlantType <> '') AND (PlantNo <> '') AND
         ((PlantType <> PlantNoRec."Plant Type") OR (PlantNo <> PlantNoRec."No."))
      THEN BEGIN
        IF NOT PlantNoRec.GET(PlantType, PlantNo) THEN
          PlantNoRec.INIT;
      END;
      IF (PlantType <> '') THEN BEGIN
        lvPlantCalendar := PlantTypeRec."Plant Calendar";
        PlantCalAlsoRentalCal := PlantTypeRec."Take into Account Rental Cal.";  //DP00241.n (29768)
        IF (PlantNo <> '') AND (PlantNoRec."Plant Calendar" <> '') THEN BEGIN
          lvPlantCalendar := PlantNoRec."Plant Calendar";
          PlantCalAlsoRentalCal := PlantNoRec."Take into Account Rental Cal.";  //DP00241.n (29768)
        END;  //DP00241.n (29768)
      END;

      IF (PlantType <> '') AND (lvPlantCalendar <> '') THEN BEGIN  //* Plant Calendar overrules all other
        RentFreeDayRec.RESET;
        RentFreeDayRec.SETRANGE(Type,RentFreeDayRec.Type::Plant);
        RentFreeDayRec.SETRANGE("Territory Code",'');
        RentFreeDayRec.SETRANGE("Plant Calendar",lvPlantCalendar);
        RentFreeDayRec.SETRANGE(Date,StartingDate,EndingDate);
        //EXIT(RentFreeDayRec.COUNT);  //DP00241.o (29768)
        //DP00241.sn (29768)
        IF (NOT PlantCalAlsoRentalCal) OR (LocationRec.Calendar = LocationRec.Calendar::None) THEN  //DP00241.n (29768)
          EXIT(RentFreeDayRec.COUNT)
        ELSE BEGIN
          IF RentFreeDayRec.FINDSET THEN BEGIN
            REPEAT
              TmpRentFreeDay.Type := TmpRentFreeDay.Type::Plant;
              TmpRentFreeDay."Territory Code" := '';
              TmpRentFreeDay."Plant Calendar" := lvPlantCalendar;
              TmpRentFreeDay.Date := RentFreeDayRec.Date;
              TmpRentFreeDay.INSERT;
            UNTIL RentFreeDayRec.NEXT = 0;
          END;
          CASE LocationRec.Calendar OF
            LocationRec.Calendar::Standard:
              BEGIN
                RentFreeDayRec.RESET;
                RentFreeDayRec.SETRANGE(Type,RentFreeDayRec.Type::Standard);
                RentFreeDayRec.SETRANGE("Territory Code",'');
                RentFreeDayRec.SETRANGE("Plant Calendar",'');
                RentFreeDayRec.SETRANGE(Date,StartingDate,EndingDate);
              END;
            LocationRec.Calendar::Region:
              BEGIN
                LocationRec.TESTFIELD("Territory Code");
                RentFreeDayRec.RESET;
                RentFreeDayRec.SETRANGE(Type,RentFreeDayRec.Type::Region);
                RentFreeDayRec.SETRANGE("Territory Code",LocationRec."Territory Code");
                RentFreeDayRec.SETRANGE("Plant Calendar",'');
                RentFreeDayRec.SETRANGE(Date,StartingDate,EndingDate);
              END;
            LocationRec.Calendar::Both:
              BEGIN
                LocationRec.TESTFIELD("Territory Code");
                RentFreeDayRec.RESET;
                RentFreeDayRec.SETFILTER(Type,'%1|%2',RentFreeDayRec.Type::Standard,RentFreeDayRec.Type::Region);
                RentFreeDayRec.SETFILTER("Territory Code",'%1|%2','',LocationRec."Territory Code");
                RentFreeDayRec.SETRANGE("Plant Calendar",'');
                RentFreeDayRec.SETRANGE(Date,StartingDate,EndingDate);
              END;
          END;
          IF RentFreeDayRec.FINDSET THEN BEGIN
            REPEAT
              IF NOT TmpRentFreeDay.GET(TmpRentFreeDay.Type::Plant, '', lvPlantCalendar, RentFreeDayRec.Date) THEN BEGIN
                TmpRentFreeDay.Type := TmpRentFreeDay.Type::Plant;
                TmpRentFreeDay."Territory Code" := '';
                TmpRentFreeDay."Plant Calendar" := lvPlantCalendar;
                TmpRentFreeDay.Date := RentFreeDayRec.Date;
                TmpRentFreeDay.INSERT;
              END;
            UNTIL RentFreeDayRec.NEXT = 0;
          END;
          EXIT(TmpRentFreeDay.COUNT);
        END;
        //DP00241.en (29768)
      END;

      CASE LocationRec.Calendar OF
        LocationRec.Calendar::Standard:
          BEGIN
            RentFreeDayRec.RESET;
            RentFreeDayRec.SETRANGE(Type,RentFreeDayRec.Type::Standard);
            RentFreeDayRec.SETRANGE("Territory Code",'');
            RentFreeDayRec.SETRANGE("Plant Calendar",'');
            RentFreeDayRec.SETRANGE(Date,StartingDate,EndingDate);
            EXIT(RentFreeDayRec.COUNT);
          END;
        LocationRec.Calendar::Region:
          BEGIN
            LocationRec.TESTFIELD("Territory Code");
            RentFreeDayRec.RESET;
            RentFreeDayRec.SETRANGE(Type,RentFreeDayRec.Type::Region);
            RentFreeDayRec.SETRANGE("Territory Code",LocationRec."Territory Code");
            RentFreeDayRec.SETRANGE("Plant Calendar",'');
            RentFreeDayRec.SETRANGE(Date,StartingDate,EndingDate);
            EXIT(RentFreeDayRec.COUNT);
          END;
        LocationRec.Calendar::Both:
          BEGIN
            LocationRec.TESTFIELD("Territory Code");
            RentFreeDayRec.RESET;
            RentFreeDayRec.SETFILTER(Type,'%1|%2',RentFreeDayRec.Type::Standard,RentFreeDayRec.Type::Region);
            RentFreeDayRec.SETFILTER("Territory Code",'%1|%2','',LocationRec."Territory Code");
            RentFreeDayRec.SETRANGE("Plant Calendar",'');
            lNumberFreeDays := 0;
            FOR lDate := StartingDate TO EndingDate DO BEGIN
              RentFreeDayRec.SETRANGE(Date, lDate);
              IF RentFreeDayRec.FINDFIRST THEN
                lNumberFreeDays += 1;
            END;
            EXIT(lNumberFreeDays);
          END;
        LocationRec.Calendar::None:
          EXIT(0);
      END;
    END;

    PROCEDURE NumberRentalWeeks@1100485002(StartingDate@11012001 : Date;EndingDate@11012002 : Date) : Decimal;
    VAR
      lvWeekRec@1100485001 : Record 2000000007;
      lvStartWeekStartDate@1100485002 : Date;
      lvStartWeekEndDate@1100485003 : Date;
      lvEndWeekStartDate@1100485005 : Date;
      lvEndWeekEndDate@1100485004 : Date;
      lvRentalWeeks@1100485008 : Decimal;
    BEGIN
      IF (StartingDate = 0D) OR (EndingDate = 0D) OR (EndingDate < StartingDate) THEN
        EXIT(0);

      WITH lvWeekRec DO BEGIN
        SETRANGE("Period Type", "Period Type"::Week);

        "Period Type" := "Period Type"::Week;
        "Period Start" := StartingDate;
        FIND('=<');
        lvStartWeekStartDate := "Period Start";
        lvStartWeekEndDate := NORMALDATE("Period End");

        "Period Type" := "Period Type"::Week;
        "Period Start" := EndingDate;
        FIND('=<');

        lvEndWeekStartDate := "Period Start";
        lvEndWeekEndDate := NORMALDATE("Period End");

        SETRANGE("Period Start", lvStartWeekStartDate, lvEndWeekStartDate);
        lvRentalWeeks := COUNT;
        IF StartingDate > lvStartWeekStartDate THEN
          lvRentalWeeks := lvRentalWeeks - ((StartingDate - lvStartWeekStartDate) / 7);
        IF EndingDate < lvEndWeekEndDate THEN
          lvRentalWeeks := lvRentalWeeks - ((lvEndWeekEndDate - EndingDate) / 7);

        EXIT(ROUND(lvRentalWeeks, 0.00001));
      END;
    END;

    PROCEDURE NumberRentalMonths@1100485000(StartingDate@11012001 : Date;EndingDate@11012002 : Date) : Decimal;
    VAR
      lvMonthRec@1100485001 : Record 2000000007;
      lvStartMonthStartDate@1100485002 : Date;
      lvStartMonthEndDate@1100485003 : Date;
      lvEndMonthStartDate@1100485005 : Date;
      lvEndMonthEndDate@1100485004 : Date;
      lvStartMonthNoOfDays@1100485006 : Integer;
      lvEndMonthNoOfDays@1100485007 : Integer;
      lvRentalMonths@1100485008 : Decimal;
    BEGIN
      IF (StartingDate = 0D) OR (EndingDate = 0D) OR (EndingDate < StartingDate) THEN
        EXIT(0);

      WITH lvMonthRec DO BEGIN
        SETRANGE("Period Type", "Period Type"::Month);

        "Period Type" := "Period Type"::Month;
        "Period Start" := StartingDate;
        FIND('=<');
        lvStartMonthStartDate := "Period Start";
        lvStartMonthEndDate := NORMALDATE("Period End");
        lvStartMonthNoOfDays := lvStartMonthEndDate - lvStartMonthStartDate + 1;

        "Period Type" := "Period Type"::Month;
        "Period Start" := EndingDate;
        FIND('=<');

        lvEndMonthStartDate := "Period Start";
        lvEndMonthEndDate := NORMALDATE("Period End");
        lvEndMonthNoOfDays := lvEndMonthEndDate - lvEndMonthStartDate + 1;

        SETRANGE("Period Start", lvStartMonthStartDate, lvEndMonthStartDate);
        lvRentalMonths := COUNT;
        IF StartingDate > lvStartMonthStartDate THEN
          lvRentalMonths := lvRentalMonths - ((StartingDate - lvStartMonthStartDate) / lvStartMonthNoOfDays);
        IF EndingDate < lvEndMonthEndDate THEN
          lvRentalMonths := lvRentalMonths - ((lvEndMonthEndDate - EndingDate) / lvEndMonthNoOfDays);

        EXIT(ROUND(lvRentalMonths, 0.00001));
      END;
    END;

    PROCEDURE NumberOfRentalDaysPlantCalendar@1100529000(PlantCalendar@1100529000 : Code[10];StartingDate@1100529002 : Date;EndingDate@1100529001 : Date) NumberOfRentalDays : Decimal;
    BEGIN
      IF (StartingDate = 0D) OR (EndingDate = 0D) OR (EndingDate < StartingDate) THEN
        EXIT(0);
      NumberOfRentalDays := EndingDate - StartingDate + 1;
      IF PlantCalendar <> '' THEN BEGIN
        RentFreeDayRec.RESET;
        RentFreeDayRec.SETRANGE(Type, RentFreeDayRec.Type::Plant);
        RentFreeDayRec.SETRANGE("Territory Code", '');
        RentFreeDayRec.SETRANGE("Plant Calendar", PlantCalendar);
        RentFreeDayRec.SETRANGE(Date, StartingDate, EndingDate);
        NumberOfRentalDays := NumberOfRentalDays - RentFreeDayRec.COUNT;
      END;
    END;

    PROCEDURE SetCompany@1100485001(ICompany@1100485000 : Text[30]);
    BEGIN
      //* This function was added for separated Sales and Logistics. For current customers not wanted
      //* For future use with other customers this might be useful in combination with a Setup
      EXIT;

      IF (ICompany = '') OR (ICompany = COMPANYNAME) THEN
        gCompany := ''
      ELSE BEGIN
        gCompany := ICompany;
        RentFreeDayRec.CHANGECOMPANY(gCompany);
        PlantTypeRec.CHANGECOMPANY(gCompany);
        PlantNoRec.CHANGECOMPANY(gCompany);
      END;
    END;

    BEGIN
    END.
  }
}

