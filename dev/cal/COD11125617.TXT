OBJECT Codeunit 11125617 EstimateLine-Explode BOM
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    TableNo=11072072;
    OnRun=VAR
            EstimateLine@1100525003 : Record 11072072;
            GenericItem@1100525000 : Record 11125615;
            ExplodeGenericItem@1100525005 : Report 11125617;
          BEGIN
            EstimateLine := Rec;
            EstimateLine.SETRECFILTER;
            EstimateLine.SETRANGE("Line No.");

            IF "Item No." <> '' THEN BEGIN
              OrigLineNo := "Line No.";
              OrigQuantity := Quantity;
              ExplodeItem(EstimateLine);
            END ELSE BEGIN
              GenericItem.SETRANGE(Status,GenericItem.Status::Certified);
              IF PAGE.RUNMODAL(0,GenericItem) = ACTION::LookupOK THEN BEGIN
                GenericItem.TESTFIELD(Status,GenericItem.Status::Certified);
                ExplodeGenericItem.RUNMODAL;
                ExplodeGenItem(EstimateLine,GenericItem,ExplodeGenericItem.GetQuantity);
              END;
            END;
          END;

  }
  CODE
  {
    VAR
      Text001@1100525007 : TextConst 'DEU=Artikel %1 ist keine StÅckliste.;ENU=Item %1 is not a bill of materials.;NLD=Artikel %1 is geen stuklijst.;NOR=Artikkel %1 er ikke en stykkliste;SVE=Artikel %1 Ñr inte en struktur.';
      Text003@1100525005 : TextConst 'DEU=Es ist nicht genÅgend Platz, um die StÅckliste zu entfalten.;ENU=There is not enough space to explode the BOM.;NLD=Er is niet voldoende ruimte om de stuklijst weer te geven.;NOR=Det er ikke nok plass til Ü utfolde stykklisten.;SVE=Det finns inte tillrÑckligt med utrymme fîr att expandera strukturen.';
      OrigLineNo@1100525001 : Integer;
      OrigQuantity@1100525000 : Decimal;
      OrigItem@1100525003 : Code[20];
      LevelBOM@1100525002 : Integer;

    PROCEDURE ExplodeGenItem@1100525000(VAR EstimateLine@1100525000 : Record 11072072;GenericItem@1100525006 : Record 11125615;QuantityGenItem@1100525007 : Decimal);
    VAR
      ToEstimateLine@1100525001 : Record 11072072;
      GenericBOMLine@1100525005 : Record 11125616;
      NoOfBOMComp@1100525003 : Integer;
      NextLineNo@1100525004 : Integer;
      LineSpacing@1100525002 : Integer;
    BEGIN
      //explode for generic item
      WITH EstimateLine DO BEGIN
        GenericBOMLine.SETRANGE("Generic Item No.",GenericItem."No.");
        NoOfBOMComp := GenericBOMLine.COUNT;
        IF NoOfBOMComp = 0 THEN
          ERROR(Text001,GenericItem."No.");

        IF GenericBOMLine.FINDSET THEN BEGIN
          LineSpacing := GetLineSpacing(EstimateLine, NoOfBOMComp);
          NextLineNo := "Line No.";
          REPEAT
            NextLineNo := NextLineNo + LineSpacing;
            ToEstimateLine := EstimateLine;
            ToEstimateLine.INIT;
            ToEstimateLine.VALIDATE("Sub-Estimate No.");
            ToEstimateLine.VALIDATE(Part);
            ToEstimateLine."Line No." := NextLineNo;

            ToEstimateLine.VALIDATE("Item No.",GenericBOMLine."Item No.");
            ToEstimateLine.VALIDATE(Quantity,(GenericBOMLine.Quantity * QuantityGenItem));
            ToEstimateLine."Unit of Measure" := GenericBOMLine."Unit of Measure Code";
            ToEstimateLine.Description := GenericBOMLine.Description;
            ToEstimateLine."Part of Line" := OrigLineNo;
            ToEstimateLine.INSERT;
          UNTIL GenericBOMLine.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE ExplodeItem@1100525001(VAR EstimateLine@1100525000 : Record 11072072);
    VAR
      ToEstimateLine@1100525005 : Record 11072072;
      NoOfBOMComp@1100525003 : Integer;
      LineSpacing@1100525002 : Integer;
      NextLineNo@1100525001 : Integer;
      FromBOMComp@1100525008 : Record 90;
      BomComp@1100525007 : Record 90;
      TempEstimateLine@1100525006 : TEMPORARY Record 11072072;
    BEGIN
      //explode for item
      WITH EstimateLine DO BEGIN
        OrigLineNo := "Line No.";
        OrigQuantity := Quantity;
        IF OrigItem = '' THEN
          OrigItem := "Item No.";

        ToEstimateLine := EstimateLine;
        ToEstimateLine.INIT;
        ToEstimateLine.Description := Description;
        ToEstimateLine."Original Quantity" := OrigQuantity;
        ToEstimateLine."Part of Line" := "Part of Line";
        ToEstimateLine."Level BOM" := "Level BOM";
        ToEstimateLine."BOM Item No." := OrigItem;
        ToEstimateLine.MODIFY;
        LevelBOM := "Level BOM" + 1;

        FromBOMComp.SETRANGE("Parent Item No.","Item No.");
        FromBOMComp.SETFILTER(Type, '<>%1', FromBOMComp.Type::Resource);
        NoOfBOMComp := FromBOMComp.COUNT;
        IF NoOfBOMComp = 0 THEN BEGIN
          ExplodeItemProdBOM(EstimateLine);
        END;

        IF FromBOMComp.FINDSET THEN BEGIN
          LineSpacing := GetLineSpacing(EstimateLine, NoOfBOMComp);
          NextLineNo := "Line No.";
          REPEAT
            NextLineNo := NextLineNo + LineSpacing;
            ToEstimateLine := EstimateLine;
            ToEstimateLine.INIT;
            ToEstimateLine.VALIDATE("Sub-Estimate No.");
            ToEstimateLine.VALIDATE(Part);
            ToEstimateLine."Line No." := NextLineNo;

            IF FromBOMComp.Type = FromBOMComp.Type::Item THEN BEGIN
              FromBOMComp.TESTFIELD("No.");
              ToEstimateLine.VALIDATE("Item No.",FromBOMComp."No.");
              //DP02339.sn
              ToEstimateLine."Original Quantity" := FromBOMComp."Quantity per";
              ToEstimateLine.VALIDATE(Quantity,Quantity * ToEstimateLine."Original Quantity");
              //DP02339.en
            END;
            ToEstimateLine."Unit of Measure" := FromBOMComp."Unit of Measure Code";
            ToEstimateLine.Description := FromBOMComp.Description;
            ToEstimateLine."Part of Line" := OrigLineNo;
            ToEstimateLine."Level BOM" := LevelBOM;
            ToEstimateLine."BOM Item No." := OrigItem;
            ToEstimateLine.INSERT;

            IF FromBOMComp.Type = FromBOMComp.Type::Item THEN BEGIN
              BomComp.SETRANGE("Parent Item No.", ToEstimateLine."Item No.");
              IF NOT BomComp.ISEMPTY THEN BEGIN
                TempEstimateLine := ToEstimateLine;
                TempEstimateLine.INSERT;
              END;
            END;
          UNTIL FromBOMComp.NEXT = 0;
        END;
      END;

      IF TempEstimateLine.FINDSET THEN BEGIN
        //Explode BOMS
        COMMIT;
        REPEAT
          ExplodeItem(TempEstimateLine);
        UNTIL TempEstimateLine.NEXT = 0;
      END;
    END;

    PROCEDURE ExplodeItemProdBOM@1100525002(VAR EstimateLine@1100525000 : Record 11072072);
    VAR
      Item@1100525006 : Record 27;
      ToEstimateLine@1100525005 : Record 11072072;
      ProductionBOMLine@1100525004 : Record 99000772;
      NoOfBOMComp@1100525003 : Integer;
      LineSpacing@1100525002 : Integer;
      NextLineNo@1100525001 : Integer;
    BEGIN
      //explode for item with prod bom
      WITH EstimateLine DO BEGIN
        Item.GET("Item No.");
        ProductionBOMLine.SETRANGE("Production BOM No.",Item."Production BOM No.");
        ProductionBOMLine.SETRANGE(Type,ProductionBOMLine.Type::Item);
        NoOfBOMComp := ProductionBOMLine.COUNT;
        IF NoOfBOMComp = 0 THEN
          ERROR(Text001,"Item No.");

        IF ProductionBOMLine.FINDSET THEN BEGIN
          LineSpacing := GetLineSpacing(EstimateLine, NoOfBOMComp);
          NextLineNo := "Line No.";
          REPEAT
            NextLineNo := NextLineNo + LineSpacing;
            ToEstimateLine := EstimateLine;
            ToEstimateLine.INIT;
            ToEstimateLine.VALIDATE("Sub-Estimate No.");
            ToEstimateLine.VALIDATE(Part);
            ToEstimateLine."Line No." := NextLineNo;

            IF ProductionBOMLine.Type = ProductionBOMLine.Type::Item THEN BEGIN
              ProductionBOMLine.TESTFIELD("No.");
              ToEstimateLine.VALIDATE("Item No.",ProductionBOMLine."No.");
              //DP02339.sn
              ToEstimateLine."Original Quantity" := ProductionBOMLine."Quantity per";
              ToEstimateLine.VALIDATE(Quantity,Quantity * ToEstimateLine."Original Quantity");
              //DP02339.en
            END;
            ToEstimateLine."Unit of Measure" := ProductionBOMLine."Unit of Measure Code";
            ToEstimateLine.Description := ProductionBOMLine.Description;
            ToEstimateLine."Part of Line" := OrigLineNo;
            ToEstimateLine."Level BOM" := LevelBOM;
            ToEstimateLine."BOM Item No." := OrigItem;
            ToEstimateLine.INSERT;
          UNTIL ProductionBOMLine.NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE GetLineSpacing@1100525003(VAR EstimateLine@1100525000 : Record 11072072;NoOfBOMComp@1100525002 : Integer) LineSpacing : Decimal;
    VAR
      ToEstimateLine@1100525001 : Record 11072072;
    BEGIN
      LineSpacing := 10000;

      ToEstimateLine := EstimateLine;
      ToEstimateLine.SETRECFILTER;
      ToEstimateLine.SETRANGE("Line No.");
      IF ToEstimateLine.FIND('>') THEN BEGIN
        LineSpacing := (ToEstimateLine."Line No." - EstimateLine."Line No.") DIV (1 + NoOfBOMComp);
        IF LineSpacing = 0 THEN
          ERROR(Text003);
      END;

      EXIT(LineSpacing);
    END;

    BEGIN
    {
      db, 04-02-16: C028603 (use same procedure for exploding different type of items)
      - calculate line spacing and determine next linenumber
      - use init instead of copy
      - validate item and quantity
    }
    END.
  }
}

