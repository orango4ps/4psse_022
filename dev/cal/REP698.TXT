OBJECT Report 698 Get Sales Orders
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.01,4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=AuftrÑge holen;
               ENU=Get Sales Orders;
               NLD=Verkooporders ophalen;
               NOR=Hent ordrer];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  SalesSetup.GET; //**4PS.n dp00114
                  //**4PS.sn
                  ReqLine."Worksheet Template Name" := WorksheetTemplateName;
                  ReqLine."Journal Batch Name" := WorksheetTemplateBatch;
                  //**4PS.en

                  ReqWkshTmpl.GET(ReqLine."Worksheet Template Name");
                  ReqWkshName.GET(ReqLine."Worksheet Template Name",ReqLine."Journal Batch Name");
                  ReqLine.SETRANGE("Worksheet Template Name",ReqLine."Worksheet Template Name");
                  ReqLine.SETRANGE("Journal Batch Name",ReqLine."Journal Batch Name");
                  ReqLine.LOCKTABLE;
                  IF ReqLine.FINDLAST THEN BEGIN
                    ReqLine.INIT;
                    LineNo := ReqLine."Line No.";
                  END;
                  Window.OPEN(Text000);
                END;

  }
  DATASET
  {
    { 2844;    ;DataItem;                    ;
               DataItemTable=Table37;
               DataItemTableView=WHERE(Document Type=CONST(Order),
                                       Purch. Order Line No.=CONST(0),
                                       Outstanding Quantity=FILTER(<>0),
                                       Transfer Order No.=CONST());
               ReqFilterHeadingML=[DEU=Verkaufszeile;
                                   ENU=Sales Order Line;
                                   NLD=Verkooporderregel;
                                   NOR=Ordrelinje;
                                   SVE=fîrs.orderrad];
               OnAfterGetRecord=BEGIN
                                  //**4PS.en dp00114
                                  IF SalesSetup."Release Sales Orders Required" THEN
                                    IF SalesHeader.GET("Sales Line"."Document Type","Sales Line"."Document No.") THEN
                                      IF SalesHeader.Status <> SalesHeader.Status::Released THEN
                                        CurrReport.SKIP;
                                  //**4PS.en dp00114

                                  IF ("Purchasing Code" = '') AND (SpecOrder <> 1)THEN
                                    IF "Drop Shipment" THEN BEGIN
                                      LineCount := LineCount + 1;
                                      Window.UPDATE(1,LineCount);
                                      InsertReqWkshLine("Sales Line");
                                    END;

                                  IF "Purchasing Code" <> '' THEN
                                    IF PurchasingCode.GET("Purchasing Code") THEN
                                      IF PurchasingCode."Drop Shipment" AND (SpecOrder <> 1) THEN BEGIN
                                        LineCount := LineCount + 1;
                                        Window.UPDATE(1,LineCount);
                                        InsertReqWkshLine("Sales Line");
                                      END ELSE
                                        IF PurchasingCode."Special Order" AND
                                           ("Special Order Purchase No." = '') AND
                                           (SpecOrder <> 0)
                                        THEN BEGIN
                                          LineCount := LineCount + 1;
                                          Window.UPDATE(1,LineCount);
                                          InsertReqWkshLine("Sales Line");
                                        END;
                                END;

               OnPostDataItem=BEGIN
                                IF LineCount = 0 THEN
                                  ERROR(Text001);
                              END;

               ReqFilterFields=Document No.,Sell-to Customer No.,No. }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   //**4PS.sn
                   IF ReqLine."Worksheet Template Name" <> '' THEN BEGIN
                     WorksheetTemplateName := ReqLine."Worksheet Template Name";
                     WorksheetTemplateBatch := ReqLine."Journal Batch Name"
                   END ELSE BEGIN
                     WorksheetTemplateNameEditable := TRUE;
                     WorksheetTemplateBatchEditable := TRUE;
                   END;
                   //**4PS.sn
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1100528201;1;Group  ;
                  CaptionML=[DEU=Stapelbetrieb;
                             ENU=Batch;
                             NLD=Batch;
                             SVE=Batch] }

      { 1100528200;2;Field  ;
                  CaptionML=[DEU=Bestellvorschlagsvorlage;
                             ENU=Requisition Template;
                             NLD=Inkoopvoorstelsjabloon];
                  SourceExpr=WorksheetTemplateName;
                  TableRelation="Req. Wksh. Template";
                  Editable=WorksheetTemplateNameEditable }

      { 1100528202;2;Field  ;
                  CaptionML=[DEU=Bestellvorschlagsbatch;
                             ENU=Requisition Batch;
                             NLD=Inkoopvoorstelbatch];
                  SourceExpr=WorksheetTemplateBatch;
                  Editable=WorksheetTemplateBatchEditable;
                  OnLookup=VAR
                             RequisitionWkshName@1100528200 : Record 245;
                           BEGIN
                             //**4PS
                             RequisitionWkshName.SETRANGE("Worksheet Template Name", WorksheetTemplateName);
                             IF PAGE.RUNMODAL(0, RequisitionWkshName) = ACTION::LookupOK THEN
                               WorksheetTemplateBatch := RequisitionWkshName.Name;
                           END;
                            }

      { 1900000002;1;Group  ;
                  CaptionML=[DEU=Optionen;
                             ENU=Options;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 1   ;2   ;Field     ;
                  CaptionML=[DEU=Dimensionen Åbernehmen von;
                             ENU=Retrieve dimensions from;
                             NLD=Dimensies ophalen van;
                             NOR=Hent dimensjoner fra];
                  ToolTipML=[DEU=Legt die Quelle der Dimensionen fest, die in die Stapelverarbeitung kopiert werden. Die Dimensionen kînnen genau so kopiert werden, wie sie in der Verkaufszeile verwendet worden sind, oder sie kînnen aus den in der Verkaufszeile verwendeten Artikeln kopiert werden.;
                             ENU=Specifies the source of dimensions that will be copied in the batch job. Dimensions can be copied exactly as they were used on a sales line or can be copied from the items used on a sales line.;
                             NLD=Hiermee wordt de bron voor dimensies opgegeven die tijdens de batchverwerking worden gekopieerd. Dimensies kunnen exact worden overgenomen van de verkooporderregel waarop ze zijn gebruikt, of van de artikelen die op een verkoopregel voorkomen.;
                             NOR=Angir dimensjonskilden som skal kopieres i kjõrselen. Dimensjoner kan kopieres nõyaktig slik de brukes pÜ en salgslinje eller de kan kopieres fra varen som brukes pÜ en salgslinje.];
                  OptionCaptionML=[DEU=Artikel,Verkaufszeile;
                                   ENU=Item,Sales Line;
                                   NLD=Artikel,Verkoopregel;
                                   NOR=Vare,Salgslinje];
                  ApplicationArea=#Dimensions;
                  SourceExpr=GetDim }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'DEU=Verkaufszeilen  werden durchgelesen  #1######;ENU=Processing sales lines  #1######;NLD=Verwerken verk.-regels  #1######;NOR=Behandler salgslinjer   #1######';
      Text001@1001 : TextConst 'DEU=Es kînnen keine Verkaufszeilen abgerufen werden.;ENU=There are no sales lines to retrieve.;NLD=Geen verkoopregels op te halen.;NOR=Det finnes ingen salgslinjer Ü hente.';
      ReqWkshTmpl@1002 : Record 244;
      ReqWkshName@1003 : Record 245;
      ReqLine@1004 : Record 246;
      SalesHeader@1005 : Record 36;
      PurchasingCode@1009 : Record 5721;
      SalesSetup@1100528800 : Record 311;
      ItemTrackingMgt@1011 : Codeunit 6500;
      LeadTimeMgt@1012 : Codeunit 5404;
      UOMMgt@1014 : Codeunit 5402;
      Window@1006 : Dialog;
      LineCount@1007 : Integer;
      SpecOrder@1010 : Integer;
      GetDim@1008 : 'Item,Sales Line';
      LineNo@1013 : Integer;
      WorksheetTemplateName@1100528200 : Code[10];
      WorksheetTemplateBatch@1100528201 : Code[10];
      WorksheetTemplateNameEditable@1100528202 : Boolean INDATASET;
      WorksheetTemplateBatchEditable@1100528203 : Boolean INDATASET;

    [External]
    PROCEDURE SetReqWkshLine@1(NewReqLine@1000 : Record 246;SpecialOrder@1001 : Integer);
    BEGIN
      ReqLine := NewReqLine;
      SpecOrder := SpecialOrder;
    END;

    LOCAL PROCEDURE InsertReqWkshLine@2(SalesLine@1000 : Record 37);
    VAR
      GeneralPostingSetup@1100527300 : Record 252;
    BEGIN
      ReqLine.RESET;
      ReqLine.SETCURRENTKEY(Type,"No.");
      ReqLine.SETRANGE(Type,"Sales Line".Type);
      ReqLine.SETRANGE("No.","Sales Line"."No.");
      ReqLine.SETRANGE("Sales Order No.","Sales Line"."Document No.");
      ReqLine.SETRANGE("Sales Order Line No.","Sales Line"."Line No.");
      IF ReqLine.FINDFIRST THEN
        EXIT;

      LineNo := LineNo + 10000;
      CLEAR(ReqLine);
      ReqLine.SetDropShipment(SalesLine."Drop Shipment");
      WITH ReqLine DO BEGIN
        INIT;
        "Worksheet Template Name" := ReqWkshName."Worksheet Template Name";
        "Journal Batch Name" := ReqWkshName.Name;
        "Line No." := LineNo;
        VALIDATE(Type,SalesLine.Type);
        //**4PS.sn (db, 03-07-14: C002114, SpecialOrder TradeItem)
        "Project No." := SalesLine."Job No.";
        "Service Order No." := SalesLine."Service Order No.";
        IF SalesLine."Trade Item" <> '' THEN BEGIN
          "Vendor (Trade Item)" := SalesLine."Vendor (Trade Item)";
          VALIDATE("Trade Item", SalesLine."Trade Item");
        END;
        "Shortcut Dimension 2 Code" := SalesLine."Shortcut Dimension 2 Code";
        //C055716.sn
        IF SalesLine."Price Specification Leading" THEN BEGIN
          "Price Agreement" := TRUE;
          "Direct Unit Cost" := SalesLine."Unit Cost (LCY)";
          "Unit Cost (LCY)" := SalesLine."Unit Cost (LCY)";
          "Unit Price (LCY)" := SalesLine."Gross Price (LCY)";
          "Sales Price" := SalesLine."Sales Price (FCY)";
          "Discount % (Item)" := SalesLine."Purchase Discount % (Item)";
        END;
        //C055716.en
        IF "Project No." + "Service Order No." <> '' THEN BEGIN
          GetWipAccount;
          VALIDATE("No.");
        END ELSE BEGIN
          IF (SalesLine."Purchasing Code" <> '') AND SalesLine."Special Order" AND (SalesLine.Type = SalesLine.Type::"G/L Account") THEN BEGIN
            GeneralPostingSetup.GET(SalesLine."Gen. Bus. Posting Group", SalesLine."Gen. Prod. Posting Group");
            GeneralPostingSetup.TESTFIELD("COGS Account");
            VALIDATE("No.", GeneralPostingSetup."COGS Account")
          END ELSE BEGIN
            SalesLine.TESTFIELD("No.");
            VALIDATE("No.", SalesLine."No.");
          END;
        END;
        //**4PS.en
        "Variant Code" := SalesLine."Variant Code";
        VALIDATE("Location Code",SalesLine."Location Code");
        "Bin Code" := SalesLine."Bin Code";
        Description := SalesLine.Description; //**4PS.n

        // Drop Shipment means replenishment by purchase only
        IF ("Replenishment System" <> "Replenishment System"::Purchase) AND
           SalesLine."Drop Shipment"
        THEN
          VALIDATE("Replenishment System","Replenishment System"::Purchase);

        IF SpecOrder <> 1 THEN
          VALIDATE("Unit of Measure Code",SalesLine."Unit of Measure Code");
        VALIDATE(
          Quantity,
          ROUND(
            SalesLine."Outstanding Quantity" * SalesLine."Qty. per Unit of Measure" / "Qty. per Unit of Measure",
            UOMMgt.QtyRndPrecision));
        "Sales Order No." := SalesLine."Document No.";
        "Sales Order Line No." := SalesLine."Line No.";
        "Sell-to Customer No." := SalesLine."Sell-to Customer No.";
        SalesHeader.GET(1,SalesLine."Document No.");
        IF SpecOrder <> 1 THEN
          "Ship-to Code" := SalesHeader."Ship-to Code";
        "Item Category Code" := SalesLine."Item Category Code";
        Nonstock := SalesLine.Nonstock;
        "Action Message" := "Action Message"::New;
        "Purchasing Code" := SalesLine."Purchasing Code";
        // Backward Scheduling
        "Due Date" := SalesLine."Shipment Date";
        IF Type = Type::Item THEN BEGIN  //**4PS.n (db, 03-07-14: C002114, SpecialOrder TradeItem)
          "Ending Date" :=
            LeadTimeMgt.PlannedEndingDate(
              "No.","Location Code","Variant Code","Due Date","Vendor No.","Ref. Order Type");
          CalcStartingDate('');
        END;  //**4PS.n
        UpdateDescription;
        UpdateDatetime;
        //**4PS.sn
        VALIDATE("Unit Price (LCY)", SalesLine."Unit Cost (LCY)");
        VALIDATE("Direct Unit Cost", SalesLine."Unit Cost (LCY)");
        IF SalesLine.Text <> '' THEN
          VALIDATE(Text, SalesLine.Text);
        //**4PS.en

        OnBeforeInsertReqWkshLine(ReqLine,SalesLine,SpecOrder);
        INSERT;
        ItemTrackingMgt.CopyItemTracking(SalesLine.RowID1,RowID1,TRUE);
        IF GetDim = GetDim::"Sales Line" THEN BEGIN
          "Shortcut Dimension 1 Code" := SalesLine."Shortcut Dimension 1 Code";
          "Shortcut Dimension 2 Code" := SalesLine."Shortcut Dimension 2 Code";
          "Dimension Set ID" := SalesLine."Dimension Set ID";
          MODIFY;
        END;
        OnAfterInsertReqWkshLine(ReqLine,SalesLine);
      END;
    END;

    [External]
    PROCEDURE InitializeRequest@3(NewRetrieveDimensionsFrom@1000 : Option);
    BEGIN
      GetDim := NewRetrieveDimensionsFrom;
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInsertReqWkshLine@5(VAR ReqLine@1000 : Record 246;SalesLine@1001 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInsertReqWkshLine@4(VAR ReqLine@1000 : Record 246;SalesLine@1001 : Record 37;SpecOrder@1002 : Integer);
    BEGIN
    END;

    BEGIN
    {
      db, 03-07-14: C002114, Type=Item removed in DataItemTableView.
    }
    END.
  }
  RDLDATA
  {
  }
}

