OBJECT Table 409 SMTP Mail Setup
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.03;
  }
  PROPERTIES
  {
    Permissions=TableData 1261=rimd;
    CaptionML=[ENU=SMTP Mail Setup;
               NOR=Oppsett av SMTP-e-post;
               SVE=SMTP-postinst„llningar];
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code10        ;CaptionML=[ENU=Primary Key;
                                                              NOR=Prim‘rn›kkel;
                                                              SVE=Prim„rnyckel] }
    { 2   ;   ;SMTP Server         ;Text250       ;CaptionML=[ENU=SMTP Server;
                                                              NOR=SMTP-server;
                                                              SVE=SMTP-server] }
    { 3   ;   ;Authentication      ;Option        ;OnValidate=BEGIN
                                                                IF Authentication <> Authentication::Basic THEN BEGIN
                                                                  "User ID" := '';
                                                                  SetPassword('');
                                                                END;

                                                                IF Authentication = Authentication::Anonymous THEN
                                                                  "Allow Sender Substitution" := TRUE;
                                                              END;

                                                   CaptionML=[ENU=Authentication;
                                                              NOR=Godkjenning;
                                                              SVE=Verifiering];
                                                   OptionCaptionML=[ENU=Anonymous,NTLM,Basic;
                                                                    NOR=Anonym,NTLM,Basis;
                                                                    SVE=Anonym,NTLM,Grundl„ggande];
                                                   OptionString=Anonymous,NTLM,Basic }
    { 4   ;   ;User ID             ;Text250       ;OnValidate=BEGIN
                                                                "User ID" := DELCHR("User ID",'<>',' ');
                                                                IF "User ID" = '' THEN
                                                                  EXIT;
                                                                TESTFIELD(Authentication,Authentication::Basic);
                                                              END;

                                                   DataClassification=EndUserIdentifiableInformation;
                                                   CaptionML=[ENU=User ID;
                                                              NOR=Bruker-ID;
                                                              SVE=Anv„ndar-ID] }
    { 6   ;   ;SMTP Server Port    ;Integer       ;InitValue=25;
                                                   CaptionML=[ENU=SMTP Server Port;
                                                              NOR=SMTP-serverport;
                                                              SVE=SMTP-serverport] }
    { 7   ;   ;Secure Connection   ;Boolean       ;InitValue=No;
                                                   CaptionML=[ENU=Secure Connection;
                                                              NOR=Sikker tilkobling;
                                                              SVE=S„ker anslutning] }
    { 8   ;   ;Password Key        ;GUID          ;CaptionML=[ENU=Password Key;
                                                              NOR=Passordn›kkel;
                                                              SVE=L”senordsnyckel] }
    { 9   ;   ;Send As             ;Text250       ;CaptionML=[ENU=Send As;
                                                              NOR=Send som] }
    { 10  ;   ;Allow Sender Substitution;Boolean  ;CaptionML=[ENU=Allow Sender Substitution;
                                                              NOR=Tillat avsendererstatning;
                                                              SVE=Till†t avs„ndarens ers„ttning] }
  }
  KEYS
  {
    {    ;Primary Key                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    [External]
    PROCEDURE GetSetup@41() : Boolean;
    VAR
      MailManagement@1000 : Codeunit 9520;
    BEGIN
      IF NOT GET THEN BEGIN
        IF NOT WRITEPERMISSION THEN BEGIN
          MailManagement.GetSMTPCredentials(Rec);
          EXIT("SMTP Server" <> '');
        END;
        INIT;
        INSERT;
      END;

      IF "SMTP Server" = '' THEN
        MailManagement.GetSMTPCredentials(Rec);

      EXIT("SMTP Server" <> '');
    END;

    [External]
    PROCEDURE SetPassword@1(NewPassword@1000 : Text);
    VAR
      ServicePassword@1001 : Record 1261;
    BEGIN
      IF ISNULLGUID("Password Key") OR NOT ServicePassword.GET("Password Key") THEN BEGIN
        ServicePassword.SavePassword(NewPassword);
        ServicePassword.INSERT(TRUE);
        "Password Key" := ServicePassword.Key;
      END ELSE BEGIN
        ServicePassword.SavePassword(NewPassword);
        ServicePassword.MODIFY;
      END;
    END;

    [External]
    PROCEDURE GetPassword@3() : Text;
    VAR
      ServicePassword@1000 : Record 1261;
    BEGIN
      IF NOT ISNULLGUID("Password Key") THEN
        IF ServicePassword.GET("Password Key") THEN
          EXIT(ServicePassword.GetPassword);
      EXIT('');
    END;

    [External]
    PROCEDURE HasPassword@2() : Boolean;
    BEGIN
      EXIT(GetPassword <> '');
    END;

    [External]
    PROCEDURE RemovePassword@4();
    VAR
      ServicePassword@1020 : Record 1261;
    BEGIN
      IF NOT ISNULLGUID("Password Key") THEN BEGIN
        IF ServicePassword.GET("Password Key") THEN
          ServicePassword.DELETE(TRUE);

        CLEAR("Password Key");
      END;
    END;

    [External]
    PROCEDURE GetSender@5() : Text[250];
    BEGIN
      IF "Send As" = '' THEN
        "Send As" := "User ID";

      EXIT("Send As");
    END;

    [External]
    PROCEDURE GetConnectionString@6() : Text[250];
    BEGIN
      IF GetSender = "User ID" THEN
        EXIT("User ID");

      EXIT(COPYSTR(STRSUBSTNO('%1\%2',"User ID","Send As"),1,MAXSTRLEN("User ID")));
    END;

    [External]
    PROCEDURE SplitUserIdAndSendAs@7(ConnectionString@1001 : Text[250]);
    VAR
      MailManagement@1000 : Codeunit 9520;
      AtLocation@1002 : Integer;
      SlashLocation@1003 : Integer;
    BEGIN
      ConnectionString := DELCHR(ConnectionString);
      IF (ConnectionString = '') OR MailManagement.CheckValidEmailAddress(ConnectionString) THEN BEGIN
        "User ID" := ConnectionString;
        "Send As" := ConnectionString;
        EXIT;
      END;

      AtLocation := STRPOS(ConnectionString,'@');

      IF AtLocation > 0 THEN BEGIN
        SlashLocation := STRPOS(ConnectionString,'\');
        IF SlashLocation > AtLocation THEN BEGIN
          "User ID" := COPYSTR(ConnectionString,1,SlashLocation - 1);
          "Send As" := COPYSTR(ConnectionString,SlashLocation + 1);
          IF MailManagement.CheckValidEmailAddress("User ID") AND MailManagement.CheckValidEmailAddress("Send As") THEN
            EXIT;
        END;
      END;

      "User ID" := ConnectionString;
      "Send As" := ConnectionString;
    END;

    BEGIN
    END.
  }
}

