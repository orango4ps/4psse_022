OBJECT Codeunit 1420 Doc. Exch. Serv.- Doc. Status
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW111.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            CheckPostedInvoices;
            CheckPostedCrMemos;
            CheckPostedServiceInvoices;
            CheckPostedServiceCrMemos;
          END;

  }
  CODE
  {
    VAR
      DocExchLinks@1000 : Codeunit 1411;
      UnSupportedTableTypeErr@1002 : TextConst '@@@=%1 is the table.;ENU=The %1 table is not supported.;NOR=Tabellen %1 st›ttes ikke.;SVE=Tabellen %1 st”ds inte.';
      CheckLatestQst@1001 : TextConst '@@@=%1 is Document Exchange Status;ENU=Do you want to check the latest status of the electronic document?;NOR=Vil du se den nyeste statusen for det elektroniske dokumentet?';

    LOCAL PROCEDURE CheckPostedInvoices@1();
    VAR
      SalesInvoiceHeader@1002 : Record 112;
    BEGIN
      WITH SalesInvoiceHeader DO BEGIN
        SETFILTER("Document Exchange Status",STRSUBSTNO('%1|%2',
            "Document Exchange Status"::"Sent to Document Exchange Service",
            "Document Exchange Status"::"Pending Connection to Recipient"));
        IF FINDSET THEN
          REPEAT
            DocExchLinks.CheckAndUpdateDocExchInvoiceStatus(SalesInvoiceHeader);
            COMMIT;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CheckPostedCrMemos@2();
    VAR
      SalesCrMemoHeader@1000 : Record 114;
    BEGIN
      WITH SalesCrMemoHeader DO BEGIN
        SETFILTER("Document Exchange Status",STRSUBSTNO('%1|%2',
            "Document Exchange Status"::"Sent to Document Exchange Service",
            "Document Exchange Status"::"Pending Connection to Recipient"));
        IF FINDSET THEN
          REPEAT
            DocExchLinks.CheckAndUpdateDocExchCrMemoStatus(SalesCrMemoHeader);
            COMMIT;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CheckPostedServiceInvoices@3();
    VAR
      ServiceInvoiceHeader@1002 : Record 5992;
    BEGIN
      WITH ServiceInvoiceHeader DO BEGIN
        SETFILTER("Document Exchange Status",STRSUBSTNO('%1|%2',
            "Document Exchange Status"::"Sent to Document Exchange Service",
            "Document Exchange Status"::"Pending Connection to Recipient"));
        IF FINDSET THEN
          REPEAT
            DocExchLinks.CheckAndUpdateDocExchServiceInvoiceStatus(ServiceInvoiceHeader);
            COMMIT;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CheckPostedServiceCrMemos@4();
    VAR
      ServiceCrMemoHeader@1000 : Record 5994;
    BEGIN
      WITH ServiceCrMemoHeader DO BEGIN
        SETFILTER("Document Exchange Status",STRSUBSTNO('%1|%2',
            "Document Exchange Status"::"Sent to Document Exchange Service",
            "Document Exchange Status"::"Pending Connection to Recipient"));
        IF FINDSET THEN
          REPEAT
            DocExchLinks.CheckAndUpdateDocExchServiceCrMemoStatus(ServiceCrMemoHeader);
            COMMIT;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CheckAndUpdateDocExchStatus@57(DocRecRef@1002 : RecordRef);
    VAR
      SalesInvoiceHeader@1006 : Record 112;
      SalesCrMemoHeader@1005 : Record 114;
      ServiceInvoiceHeader@1004 : Record 5992;
      ServiceCrMemoHeader@1001 : Record 5994;
      DocExchLinks@1000 : Codeunit 1411;
    BEGIN
      CASE DocRecRef.NUMBER OF
        DATABASE::"Sales Invoice Header":
          BEGIN
            DocRecRef.SETTABLE(SalesInvoiceHeader);
            DocExchLinks.CheckAndUpdateDocExchInvoiceStatus(SalesInvoiceHeader);
          END;
        DATABASE::"Sales Cr.Memo Header":
          BEGIN
            DocRecRef.SETTABLE(SalesCrMemoHeader);
            DocExchLinks.CheckAndUpdateDocExchCrMemoStatus(SalesCrMemoHeader);
          END;
        DATABASE::"Service Invoice Header":
          BEGIN
            DocRecRef.SETTABLE(ServiceInvoiceHeader);
            DocExchLinks.CheckAndUpdateDocExchServiceInvoiceStatus(ServiceInvoiceHeader);
          END;
        DATABASE::"Service Cr.Memo Header":
          BEGIN
            DocRecRef.SETTABLE(ServiceCrMemoHeader);
            DocExchLinks.CheckAndUpdateDocExchServiceCrMemoStatus(ServiceCrMemoHeader);
          END;
        ELSE
          ERROR(UnSupportedTableTypeErr,DocRecRef.NUMBER);
      END;
    END;

    [External]
    PROCEDURE DocExchStatusDrillDown@58(DocRecVariant@1000 : Variant);
    VAR
      DataTypeManagement@1002 : Codeunit 701;
      DocRecRef@1001 : RecordRef;
      Handled@1014 : Boolean;
    BEGIN
      IF NOT DataTypeManagement.GetRecordRef(DocRecVariant,DocRecRef) THEN
        EXIT;
      OnDocExchStatusDrillDown(DocRecRef,Handled);
      IF NOT Handled THEN
        DefaultDocExchStatusDrillDown(DocRecRef);
    END;

    LOCAL PROCEDURE DefaultDocExchStatusDrillDown@76(VAR DocRecRef@1002 : RecordRef);
    VAR
      SalesInvoiceHeader@1005 : Record 112;
      ActivityLog@1000 : Record 710;
      DataTypeManagement@1007 : Codeunit 701;
      TypeHelper@1009 : Codeunit 10;
      DocExchServiceMgt@1001 : Codeunit 1410;
      StatusFieldRef@1006 : FieldRef;
      IdentifierFieldRef@1008 : FieldRef;
      Options@1010 : Text;
      DocExchIdentifier@1013 : Text;
      DocExchStatus@1012 : Integer;
    BEGIN
      IF NOT IsSupportedByDefaultDocExchStatusDrillDown(DocRecRef) THEN
        EXIT;
      DataTypeManagement.FindFieldByName(DocRecRef,StatusFieldRef,'Document Exchange Status');
      Options := StatusFieldRef.OPTIONSTRING;
      DocExchStatus := StatusFieldRef.VALUE;
      CASE DocExchStatus OF
        TypeHelper.GetOptionNo(FORMAT(SalesInvoiceHeader."Document Exchange Status"::"Not Sent"),Options):
          EXIT;
        TypeHelper.GetOptionNo(FORMAT(SalesInvoiceHeader."Document Exchange Status"::"Sent to Document Exchange Service"),Options),
        TypeHelper.GetOptionNo(FORMAT(SalesInvoiceHeader."Document Exchange Status"::"Pending Connection to Recipient"),Options):
          IF CONFIRM(CheckLatestQst,TRUE) THEN
            CheckAndUpdateDocExchStatus(DocRecRef);
        TypeHelper.GetOptionNo(FORMAT(SalesInvoiceHeader."Document Exchange Status"::"Delivered to Recipient"),Options):
          BEGIN
            DataTypeManagement.FindFieldByName(DocRecRef,IdentifierFieldRef,'Document Exchange Identifier');
            DocExchIdentifier := IdentifierFieldRef.VALUE;
            HYPERLINK(DocExchServiceMgt.GetExternalDocURL(DocExchIdentifier));
            EXIT;
          END;
      END;
      ActivityLog.ShowEntries(DocRecRef.RECORDID);
    END;

    LOCAL PROCEDURE IsSupportedByDefaultDocExchStatusDrillDown@52(DocRecRef@1000 : RecordRef) : Boolean;
    BEGIN
      EXIT(DocRecRef.NUMBER IN [DATABASE::"Sales Invoice Header",DATABASE::"Sales Cr.Memo Header",
                                DATABASE::"Service Invoice Header",DATABASE::"Service Cr.Memo Header"]);
    END;

    [Integration]
    [External]
    PROCEDURE OnDocExchStatusDrillDown@55(VAR DocRecRef@1000 : RecordRef;VAR Handled@1001 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

