OBJECT Codeunit 11012451 DPT Interface
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      DPTSetup@1100525008 : Record 11229823;
      ErrorMessage@1100528302 : TEMPORARY Record 700;
      WindowIsOpen@1100528321 : Boolean;
      Window@1100528320 : Dialog;
      CHECKTEXT@1100528323 : TextConst 'DEU=Einrichtungscheckliste;ENU=Check Setup;NLD=Instellingen controleren';
      CODENOTALLOWED@1100525011 : TextConst 'DEU=%1 %2 ist nicht zulÑssig.;ENU=%1 %2 is not allowed.;NLD=%1 %2 is niet toegestaan.';
      COMPANYFILENAMETEXT@1100528322 : TextConst 'ENU=DPT-CompanyLogo.png';
      CONNECTTEXT@1100528313 : TextConst 'DEU=Verbinden mit;ENU=Connect to;NLD=Verbinding maken met';
      COLLECTDATATEXT@1100528307 : TextConst 'DEU=Daten erheben;ENU=Collect Data;NLD=Gegevens verzamelen';
      DOCUMENTPORTAL@1100525009 : TextConst 'DEU=Dokumentenportal (Dual);ENU=Document Portal (Dual);NLD=Documentenportaal (Dual)';
      DOCUMENTPORTALMESSAGETEXT@1100528316 : TextConst 'DEU=Nachricht Dokumentenportal;ENU=Message Document Portal;NLD=Boodschap Documentenportaal';
      ERROROCCURREDTEXT@1100529400 : TextConst 'DEU=Es ist ein Fehler aufgetreten, siehe Detailseite.;ENU=An Error occurred, see Detail Page.;NLD=Er is een fout opgetreden, zie detail pagina.';
      GUESTPORTALTEXT@1100528330 : TextConst 'DEU=GÑsteportal;ENU=Guest Portal;NLD=Gastenportaal';
      HEADERPICTURENAMETEXT@1100529902 : TextConst 'ENU=DPT-SitePicture.png';
      LANDINGPAGETEXT@1100528329 : TextConst 'DEU=Zielseite;ENU=Landing Page;NLD=Landingspagina';
      LICENSETEXT@1100528311 : TextConst 'DEU=Lizenz;ENU=License;NLD=Licentie';
      MAXATTEMPSEXCEEDED@1100525010 : TextConst 'DEU=Hîchstanzahl Versuche wurde Åberschritten.;ENU=Max Number of Attemps is exceeded.;NLD=Maximaal aantal pogingen is overschreden.';
      MailTemplateErrorTxt@1100528325 : TextConst 'DEU=Fehler in %1 %2 gefunden;ENU=Errors found in %1 %2.;NLD=Fouten gevonden in %1 %2';
      PRIVATEPERMISSIONCOMPANYTEXT@1100529901 : TextConst 'ENU=_-_Company_-_';
      Text000@1100528314 : TextConst 'DEU=Belegportal: #1###########\#2#####################\#3#####################;ENU=Document Portal: #1###########\#2#####################\#3#####################;NLD=Documentenportaal: #1###########\#2#####################\#3#####################';
      Text001@1100528324 : TextConst 'DEU=Dokumentenportal von %1;ENU=Document Portal of %1;NLD=Documentenportaal van %1';
      Text002@1100528310 : TextConst 'DEU=énderung ist nicht zulÑssig.\Es sind bereits Belege damit verknÅpft.;ENU=Change is not allowed.\There are already Documents linked to it.;NLD=Veranderen is niet toegestaan.\Er zijn reeds documenten aan gekoppeld.';
      Text003@1100528326 : TextConst 'DEU=Suchcenter von %1;ENU=Search Center of %1;NLD=Zoekcentrum van %1';
      Text004@1100529401 : TextConst 'DEU=Keine Zeitzonen gefunden.;ENU=No Time Zones found.;NLD=Geen tijdzones gevonden.';
      Text005@1100528300 : TextConst 'DEU=Sie haben keine Genehmigung fÅr das Dokumentenportal;ENU=You have no Permission for the Document Portal. (%1);NLD=U heeft geen permissie voor het documentenportaal.';
      Text006@1100528303 : TextConst 'DEU=Portaltyp kann nicht bestimmt werden.;ENU=Portal Type can not be determined.;NLD=Portaaltype kan niet bepaald worden.';
      Text007@1100528305 : TextConst 'DEU=Verbindung erfolgreich erstellt.;ENU=Connection established successfully.;NLD=Connectie succesvol gemaakt.';
      Text008@1100528308 : TextConst 'DEU=%1 ist kein UNC-Pfad.;ENU=%1 is no UNC Path.;NLD=%1 is geen UNC locatie.';
      Text009@1100528315 : TextConst 'DEU=muss einen Wert haben, der grî·er als 0 ist.;ENU=must have a Value greater than 0.;NLD=moet een waarde groter dan 0 hebben.';
      Text010@1100528317 : TextConst 'DEU=Dieser Prozess wird nicht unterstÅtzt. (%1);ENU=This Process is not supported. (%1);NLD=Dit proces wordt niet ondersteund. (%1)';
      Text011@1100528319 : TextConst 'DEU=%1 %2 kann nur einmalig definiert werden. (Aktueller Wert: %3);ENU=%1 %2 can be defined only once. (Current Value: %3);NLD=%1 %2 kan maar 1 keer voorkomen. (Huidige waarde: %3)';
      DPTType@1100528309 : 'Unknown,Project,ServiceLocation';
      StartedFrom@1100528312 : 'UI,EventLog,NAS,JobQueue';
      DebugTxt@1100528354 : Text;
      ImpersonationUserSID@1100528301 : Text;
      EventLogSeqNo@1100525001 : Integer;
      CR@1100528328 : Char;
      LF@1100528327 : Char;
      DotNetAuthority@1100528341 : DotNet "'Fps.Dpt.Nav, Version=4.0.10.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.Fps.Dpt.Nav.Entities.Authority";
      DotNetChoiceField@1100528358 : DotNet "'Fps.Dpt.Nav, Version=4.0.10.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.Fps.Dpt.Nav.Entities.ChoiceField";
      DotNetCodeDescriptionCollection@1100528338 : DotNet "'Fps.Dpt.Nav, Version=4.0.10.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.Fps.Dpt.Nav.Entities.CodeDescriptionCollection";
      DotNetCodeDescription@1100525003 : DotNet "'Fps.Dpt.Nav, Version=4.0.10.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.Fps.Dpt.Nav.Entities.CodeDescription";
      DotNetDateTimeField@1100528347 : DotNet "'Fps.Dpt.Nav, Version=4.0.10.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.Fps.Dpt.Nav.Entities.DateTimeField";
      DotnetDefaultSubsiteDocumentType@1100525000 : DotNet "'Fps.Dpt.Nav, Version=4.0.10.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.Fps.Dpt.Nav.Entities.DefaultSubSiteDocumentType";
      DotNetDPTServiceFactory@1100528335 : DotNet "'Fps.Dpt.Nav, Version=4.0.10.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.Fps.Dpt.Nav.DptServiceFactory";
      DotNetDPTSettings@1100528345 : DotNet "'Fps.Dpt.Nav, Version=4.0.10.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.Fps.Dpt.Nav.DptSettings";
      DotNetFileTransferPage@1100525004 : DotNet "'Fps.Dpt.Nav, Version=4.0.10.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.Fps.Dpt.Nav.Entities.FileTransferPage";
      DotNetGuestPortal@1100528349 : DotNet "'Fps.Dpt.Nav, Version=4.0.10.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.Fps.Dpt.Nav.Entities.GuestPortal";
      DotNetLandingPage@1100528344 : DotNet "'Fps.Dpt.Nav, Version=4.0.10.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.Fps.Dpt.Nav.Entities.LandingsPage";
      DotNetLandingsPageProvisioningService@1100528348 : DotNet "'Fps.Dpt.Nav, Version=4.0.10.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.Fps.Dpt.Nav.LandingsPageSynchronisationService";
      DotNetLocationSite@1100528333 : DotNet "'Fps.Dpt.Nav, Version=4.0.10.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.Fps.Dpt.Nav.Entities.LocationSite";
      DotNetLocationSubsite@1100528351 : DotNet "'Fps.Dpt.Nav, Version=4.0.10.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.Fps.Dpt.Nav.Entities.LocationSubSite";
      DotNetMailMessage@1100528346 : DotNet "'Fps.Dpt.Nav, Version=4.0.10.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.Fps.Dpt.Nav.Entities.MailMessage";
      DotNetMetaDataSynchronizationService@1100528339 : DotNet "'Fps.Dpt.Nav, Version=4.0.10.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.Fps.Dpt.Nav.MetaDataSynchronizationService";
      DotNetNAVDocument@1100528352 : DotNet "'Fps.Dpt.Common, Version=4.0.10.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.Fps.Dpt.Nav.NavDocument";
      DotNetNumberField@1100528357 : DotNet "'Fps.Dpt.Nav, Version=4.0.10.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.Fps.Dpt.Nav.Entities.NumberField";
      DotNetProjectSite@1100528336 : DotNet "'Fps.Dpt.Nav, Version=4.0.10.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.Fps.Dpt.Nav.Entities.ProjectSite";
      DotNetProjectSubsite@1100528350 : DotNet "'Fps.Dpt.Nav, Version=4.0.10.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.Fps.Dpt.Nav.Entities.ProjectSubSite";
      DotNetProjectSubsiteQuote@1100527800 : DotNet "'Fps.Dpt.Nav, Version=4.0.10.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.Fps.Dpt.Nav.Entities.PurchaseActionSubSite";
      DotNetProvisioningService@1100528337 : DotNet "'Fps.Dpt.Nav, Version=4.0.10.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.Fps.Dpt.Nav.ProvisioningService";
      DotNetResponsiblePerson@1100528342 : DotNet "'Fps.Dpt.Nav, Version=4.0.10.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.Fps.Dpt.Nav.Entities.ResponsiblePerson";
      DotNetRefiner@1100528332 : DotNet "'Fps.Dpt.Nav, Version=4.0.10.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.Fps.Dpt.Nav.Entities.Refiner";
      DotnetSearchCenter@1100528343 : DotNet "'Fps.Dpt.Nav, Version=4.0.10.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.Fps.Dpt.Nav.Entities.SearchCenter";
      DotNetSearchSynchronizationService@1100528340 : DotNet "'Fps.Dpt.Nav, Version=4.0.10.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.Fps.Dpt.Nav.SearchSynchronisationService";
      DotNetSelectedView@1100525006 : DotNet "'Fps.Dpt.Nav, Version=4.0.10.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.Fps.Dpt.Nav.Entities.SelectedView";
      DotNetSynchronizationService@1100528334 : DotNet "'Fps.Dpt.Nav, Version=4.0.10.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.Fps.Dpt.Nav.SynchronizationService";
      DotNetTextField@1100528359 : DotNet "'Fps.Dpt.Nav, Version=4.0.10.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.Fps.Dpt.Nav.Entities.TextField";
      DotNetUser@1100528331 : DotNet "'Fps.Dpt.Nav, Version=4.0.10.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.Fps.Dpt.Nav.Entities.User";
      DotNetUserSynchronizationService@1100528304 : DotNet "'Fps.Dpt.Nav, Version=4.0.10.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.Fps.Dpt.Nav.UserSynchronizationService";
      DotNetViewTemplate@1100525007 : DotNet "'Fps.Dpt.Nav, Version=4.0.10.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.Fps.Dpt.Nav.Entities.ViewTemplate";
      ArrayList@1100528353 : DotNet "'mscorlib'.System.Collections.ArrayList";
      Text012@1100525002 : TextConst 'DEU=%1 Fehler aufgetreten. Um Details der Fehler anzuzeigen, starten Sie das Ereignis manuell.;ENU=%1 Errors occurred. To see the Error Details, run the Event manually.;NLD=%1 Fouten opgetreden. Start de gebeurtenisregel handmatig om de foutdetails te zien.';
      Text013@1100525005 : TextConst 'DEU=Dokumentenportal DateiÅbertragung von %1;ENU=Document Portal File Transfer of %1;NLD=Documentenportaal bestandsoverdracht van %1';
      Text014@1100525012 : TextConst 'DEU=Ablageverzeichnis ist nicht definiert.;ENU=Storage Directory is not defined.;NLD=Opslagfolder is niet gedefinieerd.';
      Text015@1100529900 : TextConst 'DEU="Portalseite nicht erstellt; es wurde keine URL definiert.";ENU="Portal Site not created; there is no URL defined.";NLD=Portaalsite is niet aangemaakt, er is geen URL gedefinieerd.';
      MemoryStreamCompanyLogo@1100528355 : DotNet "'mscorlib'.System.IO.MemoryStream";
      MemoryStreamHeaderPicture@1100528306 : DotNet "'mscorlib'.System.IO.MemoryStream";

    PROCEDURE AssignColorScheme@1100525021(VAR DPTSetup@1100525000 : Record 11229823);
    BEGIN
      DPTSetup."Header Background Color" := 11871;
      DPTSetup."Header Title Color" := 16224798;
      DPTSetup."Background Color" := 16711422;
      DPTSetup."SubSite Background Color" := 15461355;
      DPTSetup."SubSite Letter Color" := 0;
      DPTSetup."Roll Over SubSite Backgr Color" := 16777215;
      DPTSetup."Roll Over SubSite Letter Color" := 11871;
      DPTSetup."Selected SubSite Backgr Color" := 16777215;
      DPTSetup."Selected SubSite Letter Color" := 11871;
      DPTSetup."Web Part Background Color" := 15461355;
      DPTSetup."Web Part Title Color" := 11871;
      DPTSetup."Library Color" := 4227200;
      DPTSetup."Library Title Background Color" := 16777215;
      DPTSetup."Roll Over Library Backgr Color" := 7649978;
      DPTSetup."Roll Over Library Title Color" := 16777215;
      DPTSetup."Library Title Letter Color" := 16224798;
      DPTSetup."Top Bar Background Color" := 11871;
      DPTSetup."Top Bar Title Color" := 16224798;
      DPTSetup."Menu Background Color" := 11871;
      DPTSetup."Library Background Color" := 16777215;
    END;

    PROCEDURE CheckDocumentsLinkedToSubsiteDocumentType@1100528380(SourceCode@1100528301 : Code[20];SubsiteCode@1100528300 : Code[20];DocumentType@1100528304 : Code[20]);
    VAR
      DocumentProperties@1100528305 : Record 11012746;
      DocumentLink@1100528302 : Record 11012747;
      Job@1100528303 : Record 11072003;
      ServiceLocation@1100525000 : Record 11012801;
    BEGIN
      CheckLicense;
      DocumentLink.SETCURRENTKEY("Record ID");
      CASE DPTType OF
        DPTType::Project: BEGIN
          Job.GET(SourceCode);
          IF (NOT Job.IsDocumentPortalDualProject) THEN
            EXIT;
          DocumentLink.SETRANGE("Record ID", Job.RECORDID);
        END;
        DPTType::ServiceLocation: BEGIN
          ServiceLocation.GET(SourceCode);
          IF (NOT ServiceLocation.IsDocumentPortalServiceLocation) THEN
            EXIT;
          DocumentLink.SETRANGE("Record ID", ServiceLocation.RECORDID);
        END;
      END;
      IF (NOT DocumentLink.FINDSET) THEN
        EXIT;

      REPEAT
        IF (DocumentProperties.GET(DocumentLink."Document No.")) THEN BEGIN
          CASE TRUE OF
            (DocumentProperties."Document Portal Subsite" = SubsiteCode),
            ((DocumentType <> '') AND (DocumentProperties."Document Type" = DocumentType)):
              ERROR(Text002);
          END;
        END;
      UNTIL (DocumentLink.NEXT = 0);
    END;

    PROCEDURE CheckDPTSetup@1100528301();
    VAR
      CompanyInformation@1100525000 : Record 79;
    BEGIN
      CheckLicense;
      CheckDPTSetupLocal;
      CompanyInformation.GET;
      ShowProgress(GetCheckText, CompanyInformation.RECORDID, '');
      IF (NOT TestCompanyInformationLogo(CompanyInformation)) THEN
        LogErrorMessage(CompanyInformation.RECORDID, CompanyInformation.FIELDNO(Picture));
    END;

    PROCEDURE CheckDocumentProperties@1100528335(DocumentProperties@1100528301 : Record 11012746);
    VAR
      Contact@1100528303 : Record 5050;
      DocumentType@1100528300 : Record 11012405;
    BEGIN
      CheckLicense;
      ShowProgress(GetCheckText, DocumentProperties.RECORDID, '');
      IF (NOT TestDocumentPropertiesDescription(DocumentProperties, TRUE)) THEN
        LogErrorMessage(DocumentProperties, DocumentProperties.FIELDNO(Description));
      IF (NOT TestDocumentPropertiesDocumentPortalSubsite(DocumentProperties, TRUE)) THEN
        LogErrorMessage(DocumentProperties, DocumentProperties.FIELDNO("Document Portal Subsite"));
      IF (NOT TestDocumentPropertiesDocumentType(DocumentProperties, TRUE)) THEN
        LogErrorMessage(DocumentProperties, DocumentProperties.FIELDNO("Document Type"));
      IF (NOT TestDocumentTypeDescription(DocumentProperties."Document Type")) THEN
        LogErrorMessage(DocumentType, DocumentType.FIELDNO(Description));
      IF (DocumentProperties."Document Portal Private Doc") AND (DocumentProperties."Contact No." <> '') THEN BEGIN
        IF (NOT TestContactGet(Contact, DocumentProperties."Contact No.", DocumentProperties."Contact Person No.")) THEN
          LogErrorMessage(Contact, 0);
        IF (NOT TestContactEmail2(Contact, TRUE)) THEN
          LogErrorMessage(Contact, Contact.FIELDNO("E-Mail 2"));
      END;
    END;

    PROCEDURE CheckDocumentPropertiesForDelete@1100528336(DocumentProperties@1100528301 : Record 11012746);
    BEGIN
      CheckLicense;
      ShowProgress(GetCheckText, DocumentProperties.RECORDID, '');
      TestDocumentPropertiesFile(DocumentProperties, FALSE);
      TestDocumentPropertiesWebLink(DocumentProperties, TRUE);
    END;

    PROCEDURE CheckEmailBodyText@1100528378(SourceTable@1100528304 : Variant);
    VAR
      MailTemplate@1100528301 : Record 11229450;
      Language@1100528303 : Record 8;
      DataTypeManagement@1100528305 : Codeunit 701;
      RecRef@1100528300 : RecordRef;
      RecId@1100528302 : RecordID;
    BEGIN
      CheckLicense;
      ShowProgress(GetCheckText, MailTemplate.RECORDID, '');
      GetLanguage(Language, SourceTable);
      DataTypeManagement.GetRecordRef(SourceTable, RecRef);
      RecId := RecRef.RECORDID;
      CASE RecId.TABLENO OF
        DATABASE::Job: BEGIN
          IF (NOT TestMailTemplate(62, Language)) THEN
            LogErrorMessage(MailTemplate.RECORDID, MailTemplate.FIELDNO("No."));
          IF (NOT TestMailTemplate(61, Language)) THEN
            LogErrorMessage(MailTemplate.RECORDID, MailTemplate.FIELDNO("No."));
        END;
        DATABASE::"Service Location": BEGIN
          IF (NOT TestMailTemplate(60, Language)) THEN
            LogErrorMessage(MailTemplate.RECORDID, MailTemplate.FIELDNO("No."));
          IF (NOT TestMailTemplate(59, Language)) THEN
            LogErrorMessage(MailTemplate.RECORDID, MailTemplate.FIELDNO("No."));
        END;
      END;
    END;

    PROCEDURE CheckEmployee@1100528370(EmployeeNo@1100528302 : Code[20]);
    VAR
      Employee@1100528300 : Record 5200;
    BEGIN
      CheckLicense;
      ShowProgress(GetCheckText, Employee.RECORDID, '');
      IF (NOT TestEmployeeGet(Employee, EmployeeNo)) THEN
        LogErrorMessage(Employee.RECORDID, Employee.FIELDNO("No."));
      IF (NOT TestEmployeeUserCount(Employee)) THEN
        LogErrorMessage(Employee.RECORDID, Employee.FIELDNO("No."));
      IF (NOT TestEmployeeUser(Employee)) THEN
        LogErrorMessage(Employee.RECORDID, Employee.FIELDNO("No."));
    END;

    PROCEDURE CheckLanguage@1100528324(SourceTable@1100528301 : Variant);
    VAR
      Language@1100528300 : Record 8;
    BEGIN
      CheckLicense;
      ShowProgress(GetCheckText, Language.RECORDID, '');
      IF (NOT TestLanguageGet(Language, SourceTable)) THEN
        LogErrorMessage(Language.RECORDID, Language.FIELDNO(Code));
      ShowProgress(GetCheckText, Language.RECORDID, '');
      IF (NOT TestLanguageWindowsLanguageID(Language)) THEN
        LogErrorMessage(Language.RECORDID, Language.FIELDNO("Windows Language ID"));
    END;

    PROCEDURE CheckPortalData@1100528403(SourceTable@1100528300 : Variant);
    BEGIN
      CheckLicense;
    END;

    PROCEDURE CheckPortalMetaData@1100528397(SourceTable@1100528300 : Variant);
    VAR
      DPTMetadata@1100528302 : Record 11229825;
    BEGIN
      CheckLicense;
      DPTMetadata.SETRANGE("Source Type", DPTType);
      IF (NOT DPTMetadata.FINDSET) THEN
        EXIT;

      REPEAT
        ShowProgress(GetCheckText, DPTMetadata.RECORDID, '');
        IF (NOT TestDPTMetadataDescription(DPTMetadata, TRUE)) THEN
          LogErrorMessage(DPTMetadata.RECORDID, DPTMetadata.FIELDNO(Description));
        IF (DPTMetadata."Standard Data") THEN BEGIN
          IF (NOT TestDPTMetadataRefinerType(DPTMetadata)) THEN
            LogErrorMessage(DPTMetadata.RECORDID, DPTMetadata.FIELDNO("Refiner Type"));
        END ELSE
          CheckAdditionalData(DPTMetadata, SourceTable);
      UNTIL (DPTMetadata.NEXT = 0);
    END;

    PROCEDURE CheckPortalSearchData@1100528404(SourceTable@1100528300 : Variant);
    VAR
      DPTMetadata@1100528302 : Record 11229825;
    BEGIN
      CheckLicense;
      DPTMetadata.SETRANGE("Source Type", DPTType);
      DPTMetadata.SETRANGE("Search Allowed", TRUE);
      DPTMetadata.SETRANGE("Show in Search", TRUE);
      IF (NOT DPTMetadata.FINDSET) THEN
        EXIT;

      REPEAT
        ShowProgress(GetCheckText, DPTMetadata.RECORDID, '');
        IF (NOT TestDPTMetadataRefinerCode(DPTMetadata, TRUE)) THEN
          LogErrorMessage(DPTMetadata.RECORDID, DPTMetadata.FIELDNO("Refiner Code"));
        IF (NOT TestDPTMetadataRefinerDescription(DPTMetadata, TRUE)) THEN
          LogErrorMessage(DPTMetadata.RECORDID, DPTMetadata.FIELDNO("Refiner Description"));
        IF (NOT TestDPTMetadataRefinerPosition(DPTMetadata)) THEN
          LogErrorMessage(DPTMetadata.RECORDID, DPTMetadata.FIELDNO("Refiner Position"));
        IF (NOT TestDPTMetadataRefinerType(DPTMetadata)) THEN
          LogErrorMessage(DPTMetadata.RECORDID, DPTMetadata.FIELDNO("Refiner Type"));
        IF (NOT DPTMetadata."Standard Data") THEN
          CheckAdditionalData(DPTMetadata, SourceTable);
      UNTIL (DPTMetadata.NEXT = 0);
    END;

    PROCEDURE CheckProjectAuthority@1100528442(ProjectAuthority@1100528300 : Record 11020216);
    VAR
      Contact@1100528301 : Record 5050;
    BEGIN
      IF (NOT TestContactGet(Contact, ProjectAuthority."Contact No.", ProjectAuthority."Contact Person No.")) THEN
        LogErrorMessage(Contact, Contact.FIELDNO("No."));
      IF (NOT TestContactEmail2(Contact, TRUE)) THEN
        LogErrorMessage(Contact, Contact.FIELDNO("E-Mail 2"));
      IF (NOT TestProjectAuthorityPermission(ProjectAuthority)) THEN
        LogErrorMessage(ProjectAuthority, ProjectAuthority.FIELDNO("Contact No."));
    END;

    PROCEDURE CheckProjectResponsiblePerson@1100528422(ProjectResponsiblePerson@1100528300 : Record 11012040);
    BEGIN
      CheckEmployee(ProjectResponsiblePerson."Employee No.");
      ShowProgress(GetCheckText, ProjectResponsiblePerson.RECORDID, '');
      IF (NOT TestProjectRespPersPermission(ProjectResponsiblePerson)) THEN
        LogErrorMessage(ProjectResponsiblePerson, ProjectResponsiblePerson.FIELDNO("Employee No."));
    END;

    PROCEDURE CheckServLocAuthority@1100528443(ServiceAuthorityDPT@1100528300 : Record 11072298);
    VAR
      Contact@1100528301 : Record 5050;
    BEGIN
      ShowProgress(GetCheckText, ServiceAuthorityDPT.RECORDID, '');
      IF (NOT TestContactGet(Contact, ServiceAuthorityDPT."Contact No.", ServiceAuthorityDPT."Contact Person No.")) THEN
        LogErrorMessage(Contact, Contact.FIELDNO("No."));
      IF (NOT TestContactEmail2(Contact, TRUE)) THEN
        LogErrorMessage(Contact, Contact.FIELDNO("E-Mail 2"));
      IF (NOT TestServiceAuthorityPermission(ServiceAuthorityDPT)) THEN
        LogErrorMessage(ServiceAuthorityDPT, ServiceAuthorityDPT.FIELDNO("Contact No."));
    END;

    PROCEDURE CheckServLocResponsiblePerson@1100528448(ServiceResponsiblePersonDPT@1100528300 : Record 11072297);
    BEGIN
      CheckEmployee(ServiceResponsiblePersonDPT."Employee No.");
      ShowProgress(GetCheckText, ServiceResponsiblePersonDPT.RECORDID, '');
      IF (NOT TestServiceRespPersPermission(ServiceResponsiblePersonDPT)) THEN
        LogErrorMessage(ServiceResponsiblePersonDPT, ServiceResponsiblePersonDPT.FIELDNO("Employee No."));
    END;

    PROCEDURE CheckUser@1100528304();
    BEGIN
      CheckLicense;
      CheckUserLocal;
    END;

    PROCEDURE CreateLandingPageAndGuestPortal@1100528419();
    VAR
      DPTEventLog@1100528302 : Record 11229822;
      User@1100528300 : Record 2000000120;
      Language@1100528301 : Record 8;
      Job@1100528303 : Record 11072003;
      ServiceLocation@1100528304 : Record 11012801;
    BEGIN
      DPTSetup.GET;
      IF (DPTSetup."Use Project Portal") THEN BEGIN
        DPTType := DPTType::Project;
        Job.INIT;
        Job."Document Portal Language" := Language.Code;
        CheckPortalSearchData(Job);
        CheckLicense;
      END;
      IF (DPTSetup."Use Location Portal") THEN BEGIN
        DPTType := DPTType::ServiceLocation;
        ServiceLocation.INIT;
        ServiceLocation."Document Portal Language" := Language.Code;
        CheckPortalSearchData(ServiceLocation);
        CheckLicense;
      END;

      ErrorMessage.DELETEALL;
      CheckDPTSetupLocal;
      CheckUserLocal;
      Language.GET(DPTSetup."Language Code");
      ShowCheckErrors;

      GetUser(User);
      SetDotNetServiceFactory(User);

      ShowProgress(DPTEventLog.GetSyncPortalDataText, LANDINGPAGETEXT, '');
      IF (NOT CreateLandingPage(Language, User)) THEN
        ShowDPTError;
      IF (NOT CreateFileTransferPage(Language, User)) THEN
        ShowDPTError;

      IF (DPTSetup."SharePoint Version" = DPTSetup."SharePoint Version"::"Sharepoint Online") THEN BEGIN
        ShowProgress(DPTEventLog.GetSyncPortalDataText, GUESTPORTALTEXT, '');
        IF (NOT CreateGuestPortal(Language, User)) THEN
          ShowDPTError;
      END;
    END;

    [TryFunction]
    PROCEDURE DeleteDocument@1100528316(SourceTable@1100528303 : Variant;DocumentProperties@1100528302 : Record 11012746);
    VAR
      DPTEventLog@1100528310 : Record 11229822;
      Job@1100528309 : Record 11072003;
      ServiceLocation@1100528301 : Record 11012801;
      User@1100528308 : Record 2000000120;
    BEGIN
      CheckLicense;
      GetUser(User);
      SetDotNetServiceFactory(User);

      ShowProgress(COLLECTDATATEXT, DPTEventLog.GetDeleteDocumentText, '');
      CASE DPTType OF
        DPTType::Project: Job := SourceTable;
        DPTType::ServiceLocation: ServiceLocation := SourceTable;
        ELSE
          ERROR(Text010, DocumentProperties.RECORDID);
      END;
      SetDotNetUser(User);

      ShowProgress(DPTEventLog.GetDeleteDocumentText, DocumentProperties.RECORDID, '');
      CLEAR(DotNetSynchronizationService);
      DotNetSynchronizationService := DotNetDPTServiceFactory.CreateSynchronizationService;
      CASE DPTType OF
        DPTType::Project:
          DotNetSynchronizationService.DeleteDocument(Job."Document Portal URL", DotNetUser, DocumentProperties.GetStorageURI,
            DocumentProperties."Document Portal Subsite");
        DPTType::ServiceLocation:
          DotNetSynchronizationService.DeleteDocument(ServiceLocation."Document Portal URL", DotNetUser,
            DocumentProperties.GetStorageURI, DocumentProperties."Document Portal Subsite");
      END;
    END;

    PROCEDURE DownloadDocumentStreamed@1100527903(RecID@1100527800 : RecordID;SubSite@1100527811 : Text;WebLink@1100527801 : Text;VAR Base64@1100527810 : BigText) : Boolean;
    VAR
      Job@1100527805 : Record 11072003;
      ServiceLocation@1100527804 : Record 11012801;
      Language@1100527803 : Record 8;
      User@1100527802 : Record 2000000120;
      Temp@1100527809 : Char;
      Bytes@1100527808 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      Convert@1100527807 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      MemoryStream@1100527806 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
      Result@1100527812 : Boolean;
    BEGIN
      IF (RecID.TABLENO = DATABASE::Job) AND (Job.GET(RecID))  THEN BEGIN
        SetDPTType(DPTType::Project);
        IF (DownloadDocumentByMemoryStream(Job."Document Portal URL",
                                          SubSite,
                                          WebLink,
                                          FALSE,
                                          MemoryStream)) THEN
        Result:= TRUE;

      END;

      IF (RecID.TABLENO = DATABASE::"Service Location") AND  (ServiceLocation.GET(RecID))  THEN BEGIN
        SetDPTType(DPTType::ServiceLocation);
        IF (DownloadDocumentByMemoryStream(ServiceLocation."Document Portal URL",
                                        SubSite,
                                        WebLink,
                                        FALSE,
                                        MemoryStream)) THEN
          Result:= TRUE;
      END;

      IF Result THEN BEGIN
          Bytes := MemoryStream.GetBuffer();
          Base64.ADDTEXT(Convert.ToBase64String(Bytes));
          MemoryStream.Dispose();
      END;

      EXIT(Result);
    END;

    [TryFunction]
    PROCEDURE EnsurePortalSiteCollection@1100528437(SourceTable@1100528304 : Variant;VAR PortalURL@1100528307 : Text);
    VAR
      DPTEventLog@1100528306 : Record 11229822;
      Job@1100528310 : Record 11072003;
      ServiceLocation@1100528311 : Record 11012801;
      Language@1100528309 : Record 8;
      User@1100528308 : Record 2000000120;
    BEGIN
      CheckLicense;
      GetUser(User);
      SetDotNetServiceFactory(User);

      ShowProgress(COLLECTDATATEXT, DPTEventLog.GetSyncPortalSiteText, '');
      CASE DPTType OF
        DPTType::Project: BEGIN
          Job := SourceTable;
          GetLanguage(Language, Job);
          SetDotNetProjectSite(Job, Language, User);
          AddSubsitesToDotNetProjectSite(Job, Language, FALSE);

          ShowProgress(DPTEventLog.GetEnsurePortalSiteCollectionText, Job.RECORDID, '');
          CLEAR(DotNetProvisioningService);
          DotNetProvisioningService := DotNetDPTServiceFactory.CreateProvisioningService;
          PortalURL := DotNetProvisioningService.EnsureProjectSiteCollection(DotNetProjectSite);
        END;
        DPTType::ServiceLocation: BEGIN
          ServiceLocation := SourceTable;
          GetLanguage(Language, ServiceLocation);
          SetDotNetLocationSite(ServiceLocation, Language, User);
          AddSubsitesToDotNetLocationSite(ServiceLocation, Language, FALSE);

          ShowProgress(DPTEventLog.GetEnsurePortalSiteCollectionText, ServiceLocation.RECORDID, '');
          CLEAR(DotNetProvisioningService);
          DotNetProvisioningService := DotNetDPTServiceFactory.CreateProvisioningService;
          PortalURL := DotNetProvisioningService.EnsureLocationSiteCollection(DotNetLocationSite);
        END;
        ELSE
          ERROR(Text010, DPTEventLog.GetSyncPortalSiteText);
      END;
      IF (PortalURL = '') THEN
        ERROR(Text015);
    END;

    PROCEDURE GetCheckText@1100528409() : Text;
    BEGIN
      EXIT(CHECKTEXT);
    END;

    PROCEDURE GetConnectText@1100528415() : Text;
    BEGIN
      EXIT(CONNECTTEXT);
    END;

    PROCEDURE GetContact@1100528385(VAR Contact@1100528300 : Record 5050;ContactNo@1100528301 : Code[20];ContactPersonNo@1100528302 : Code[20]);
    BEGIN
      IF (ContactPersonNo <> '') THEN
        Contact.GET(ContactPersonNo)
      ELSE
        Contact.GET(ContactNo);
    END;

    [TryFunction]
    PROCEDURE GetDocumentFromPortal@1100525022(SourceTable@1100528301 : Variant;VAR DocumentProperties@1100528302 : Record 11012746;VAR StorageDir@1100525001 : Text;WebLink@1100528304 : Text;CopyOnly@1100525004 : Boolean);
    VAR
      DPTEventLog@1100528311 : Record 11229822;
      DocumentGroup@1100525002 : Record 11012400;
      FileSystemOnPremiseSetup@1100528400 : Record 11125739;
      Job@1100528308 : Record 11072003;
      Language@1100525000 : Record 8;
      ServiceLocation@1100528305 : Record 11012801;
      User@1100528309 : Record 2000000120;
      StringFunctions@1100529403 : Codeunit 11012273;
      DotPos@1100529401 : Integer;
      SlashPos@1100529402 : Integer;
    BEGIN
      IF (DocumentProperties."External Document") THEN BEGIN
        FileSystemOnPremiseSetup.GET;
        FileSystemOnPremiseSetup.TESTFIELD("Default Ext. Doc. Directory");
        IF (NOT DocumentGroup.GET(DocumentProperties."Document Group")) THEN
          DocumentGroup.INIT;
        StorageDir := DocumentGroup."Document Directory";
        IF (StorageDir = '') THEN
          StorageDir := FileSystemOnPremiseSetup."Default Ext. Doc. Directory";
      END ELSE BEGIN
        IF (StorageDir = '') THEN
          ERROR(Text014);
      END;

      CheckLicense;
      GetUser(User);
      SetDotNetServiceFactory(User);
      SetDotNetUser(User);
      CLEAR(DotNetSynchronizationService);

      ShowProgress(COLLECTDATATEXT, DPTEventLog.GetDownloadDocumentText, '');
      CASE DPTType OF
        DPTType::Project: BEGIN
          Job := SourceTable;
          ShowProgress(DPTEventLog.GetDownloadDocumentText, DocumentProperties.RECORDID, '');
          GetLanguage(Language, Job);
          SetDotNetProjectSite(Job, Language, User);

          DotNetSynchronizationService := DotNetDPTServiceFactory.CreateSynchronizationService;
          DotNetSynchronizationService.DownloadDocument(Job."Document Portal URL", DotNetUser,
            DocumentProperties."Document Portal Subsite", WebLink, StorageDir, NOT CopyOnly);
        END;
        DPTType::ServiceLocation: BEGIN
          ServiceLocation := SourceTable;
          ShowProgress(DPTEventLog.GetDownloadDocumentText, DocumentProperties.RECORDID, '');
          GetLanguage(Language, ServiceLocation);
          SetDotNetLocationSite(ServiceLocation, Language, User);

          DotNetSynchronizationService := DotNetDPTServiceFactory.CreateSynchronizationService;
          DotNetSynchronizationService.DownloadDocument(ServiceLocation."Document Portal URL", DotNetUser,
            DocumentProperties."Document Portal Subsite", WebLink, StorageDir, NOT CopyOnly);
        END;
        ELSE
          ERROR(Text010, DPTEventLog.GetDownloadDocumentText);
      END;
      SlashPos := StringFunctions.RSTRPOS(WebLink, '/');
      DotPos := StringFunctions.RSTRPOS(WebLink, '.');
      IF (NOT CopyOnly) THEN BEGIN
        IF (DocumentProperties."External Document") THEN BEGIN
          DocumentProperties.File := COPYSTR(WebLink, SlashPos + 1);
          DocumentProperties."File Extension" := COPYSTR(WebLink,  DotPos + 1);
        END ELSE BEGIN
          DocumentProperties.File := StorageDir + COPYSTR(WebLink, SlashPos + 1, DotPos - SlashPos - 1);
          DocumentProperties."File Extension" := COPYSTR(WebLink,  DotPos);
        END;
        DocumentProperties."Web link" := '';
        StorageDir := '';
      END ELSE
        StorageDir := StorageDir + COPYSTR(WebLink, SlashPos + 1);
    END;

    [TryFunction]
    PROCEDURE GetDocumentContentByBase64@1100527804(CurrentDPTType@1100527801 : 'Unknown,Project,ServiceLocation';SourceTable@1100528301 : Variant;VAR DocumentProperties@1100528302 : Record 11012746;WebLink@1100528304 : Text;VAR Base64@1100527803 : BigText);
    VAR
      DPTEventLog@1100528311 : Record 11229822;
      DocumentGroup@1100525002 : Record 11012400;
      DocumentMgtSetup@1100525003 : Record 11071831;
      Job@1100528308 : Record 11072003;
      Language@1100525000 : Record 8;
      ServiceLocation@1100528305 : Record 11012801;
      User@1100528309 : Record 2000000120;
      StringFunctions@1100529403 : Codeunit 11012273;
      DotPos@1100529401 : Integer;
      SlashPos@1100529402 : Integer;
      TempFile@1100527800 : Text;
      FileManagement@1100527802 : Codeunit 419;
    BEGIN
      DPTType := CurrentDPTType;
      CheckLicense;
      GetUser(User);
      SetDotNetServiceFactory(User);
      SetDotNetUser(User);
      CLEAR(DotNetSynchronizationService);

      TempFile := FileManagement.ServerTempFileName(FileManagement.GetExtension(WebLink));

      CASE DPTType OF
        DPTType::Project: BEGIN
          Job := SourceTable;
          GetLanguage(Language, Job);
          SetDotNetProjectSite(Job, Language, User);
          DotNetSynchronizationService := DotNetDPTServiceFactory.CreateSynchronizationService;
          DotNetSynchronizationService.DownloadDocument(Job."Document Portal URL", DotNetUser,
            DocumentProperties."Document Portal Subsite", WebLink, TempFile, FALSE);
        END;
        DPTType::ServiceLocation: BEGIN
          ServiceLocation := SourceTable;
          ShowProgress(DPTEventLog.GetDownloadDocumentText, DocumentProperties.RECORDID, '');
          GetLanguage(Language, ServiceLocation);
          SetDotNetLocationSite(ServiceLocation, Language, User);

          DotNetSynchronizationService := DotNetDPTServiceFactory.CreateSynchronizationService;
          DotNetSynchronizationService.DownloadDocument(ServiceLocation."Document Portal URL", DotNetUser,
            DocumentProperties."Document Portal Subsite", WebLink, TempFile, FALSE);
        END;
        ELSE
          ERROR(Text010, DPTEventLog.GetDownloadDocumentText);
      END;
      FileManagement.ReadFileContentToBase64BigText(TempFile,Base64);
    END;

    [TryFunction]
    PROCEDURE GetDocumentContentByMemoryStream@1100527803(CurrentDPTType@1100527801 : 'Unknown,Project,ServiceLocation';SourceTable@1100528301 : Variant;Subsite@1100528302 : Code[20];WebLink@1100528304 : Text;VAR MemoryStream@1100527804 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream");
    VAR
      DPTEventLog@1100528311 : Record 11229822;
      DocumentGroup@1100525002 : Record 11012400;
      Job@1100528308 : Record 11072003;
      Language@1100525000 : Record 8;
      ServiceLocation@1100528305 : Record 11012801;
      User@1100528309 : Record 2000000120;
    BEGIN
      DPTType := CurrentDPTType;
      CheckLicense;
      GetUser(User);
      IF (IsNSTUserID(User)) THEN
        CLEAR(DotNetUser)
      ELSE
        SetDotNetUser(User);
      SetDotNetServiceFactory(User);
      CLEAR(DotNetSynchronizationService);

      CASE DPTType OF
        DPTType::Project: BEGIN
          Job := SourceTable;
          GetLanguage(Language, Job);
          SetDotNetProjectSite(Job, Language, User);
          DotNetSynchronizationService := DotNetDPTServiceFactory.CreateSynchronizationService;
          DotNetSynchronizationService.DownloadDocumentStream(Job."Document Portal URL",
            Subsite, WebLink, FALSE, MemoryStream);
        END;
        DPTType::ServiceLocation: BEGIN
          ServiceLocation := SourceTable;
          GetLanguage(Language, ServiceLocation);
          SetDotNetLocationSite(ServiceLocation, Language, User);

          DotNetSynchronizationService := DotNetDPTServiceFactory.CreateSynchronizationService;
          DotNetSynchronizationService.DownloadDocumentStream(ServiceLocation."Document Portal URL",
            Subsite, WebLink, FALSE, MemoryStream);
        END;
        ELSE
          ERROR(Text010, DPTEventLog.GetDownloadDocumentText);
      END;
    END;

    PROCEDURE GetEmployee@1100528400(VAR Employee@1100528300 : Record 5200;EmployeeNo@1100528301 : Code[20]);
    BEGIN
      Employee.GET(EmployeeNo);
    END;

    PROCEDURE GetErrorMessage@1100528365(VAR ErrorMessageOut@1100528300 : TEMPORARY Record 700);
    BEGIN
      ErrorMessageOut.COPY(ErrorMessage, TRUE);
    END;

    PROCEDURE GetLanguage@1100528358(VAR Language@1100528300 : Record 8;SourceTable@1100528301 : Variant);
    VAR
      Job@1100528302 : Record 11072003;
      ServiceLocation@1100525000 : Record 11012801;
    BEGIN
      Language.GET(DPTSetup."Language Code");
      CASE DPTType OF
        DPTType::Project: BEGIN
          Job := SourceTable;
          IF (Job."Document Portal Language" <> '') THEN
            Language.GET(Job."Document Portal Language")
        END;
        DPTType::ServiceLocation: BEGIN
          ServiceLocation := SourceTable;
          IF (ServiceLocation."Document Portal Language" <> '') THEN
            Language.GET(ServiceLocation."Document Portal Language")
        END;
        ELSE ERROR(Text006);
      END;
    END;

    PROCEDURE GetLicenseText@1100528416() : Text;
    BEGIN
      EXIT(LICENSETEXT);
    END;

    [TryFunction]
    PROCEDURE GetTimeZones@1100529404(VAR DotNetArrayList@1100525001 : DotNet "'mscorlib'.System.Collections.ArrayList");
    VAR
      User@1100529400 : Record 2000000120;
      Counter@1100525000 : Integer;
    BEGIN
      DPTSetup.GET;
      GetUser(User);
      SetDotNetServiceFactory(User);

      CLEAR(DotNetCodeDescriptionCollection);
      CLEAR(DotNetProvisioningService);
      DotNetProvisioningService := DotNetDPTServiceFactory.CreateProvisioningService;
      DotNetCodeDescriptionCollection := DotNetProvisioningService.GetTimeZoneCollection;
      IF (DotNetCodeDescriptionCollection.Count = 0) THEN
        ERROR(Text004);

      DotNetArrayList := DotNetArrayList.ArrayList;
      Counter := 0;
      REPEAT
        DotNetCodeDescription := DotNetCodeDescriptionCollection.GetItem(Counter);
        DotNetArrayList.Add(STRSUBSTNO('%1;%2', DotNetCodeDescription.Code, DotNetCodeDescription.Description));
        Counter += 1;
      UNTIL (Counter >= DotNetCodeDescriptionCollection.Count);
    END;

    PROCEDURE GetUser@1100528360(VAR User@1100528300 : Record 2000000120);
    BEGIN
      IF (ImpersonationUserSID <> '') THEN
        User.GET(ImpersonationUserSID)
      ELSE
        User.GET(USERSECURITYID);
    END;

    PROCEDURE InitJobQueue@1100525018();
    VAR
      DPTEventLog@1100525000 : Record 11229822;
    BEGIN
      InitJobQueueCategory;
      InitJobQueueEntry(STRSUBSTNO('%1,%2', DPTEventLog.GetSyncDocumentText, DPTEventLog.GetDeleteDocumentText), 1);
      InitJobQueueEntry(STRSUBSTNO('%1,%2', DPTEventLog.GetSyncAuthorityText, DPTEventLog.GetSyncResponsiblePersonText), 5);
      InitJobQueueEntry(STRSUBSTNO('%1,%2,%3', DPTEventLog.GetSyncPortalDataText, DPTEventLog.GetSyncPortalMetaDataText,
        DPTEventLog.GetSyncPortalSearchDataText), 10);
      InitJobQueueEntry(STRSUBSTNO('%1,%2', DPTEventLog.GetSyncPortalSiteText, DPTEventLog.GetCleanEventLogText), 60);
    END;

    PROCEDURE IsNSTUserID@1100529403(User@1100529400 : Record 2000000120) : Boolean;
    VAR
      NSTUserIDs@1100525001 : Text;
      NSTUserID@1100525002 : Text;
      SeparatorPosition@1100525000 : Integer;
    BEGIN
      //Don't check events logged by the NST user(s)
      DPTSetup.GET;
      NSTUserIDs := UPPERCASE(DPTSetup."NST User IDs");
      SeparatorPosition := 0;

      REPEAT
        SeparatorPosition := STRPOS(NSTUserIDs, ',');
        IF (SeparatorPosition > 0) THEN
          NSTUserID := COPYSTR(NSTUserIDs, 1, SeparatorPosition - 1)
        ELSE
          NSTUserID := NSTUserIDs;
        IF (NSTUserID = User."User Name") THEN
          EXIT(TRUE);
        NSTUserIDs := COPYSTR(NSTUserIDs, SeparatorPosition + 1);
      UNTIL (SeparatorPosition = 0);
      EXIT(FALSE);
    END;

    PROCEDURE SetDPTType@1100528441(DPTTypeIn@1100528300 : Integer);
    BEGIN
      DPTType := DPTTypeIn;
      CheckLicense;
    END;

    PROCEDURE SetErrorMessage@1100528321(VAR ErrorMessageIn@1100528300 : TEMPORARY Record 700);
    BEGIN
      ErrorMessage.COPY(ErrorMessageIn, TRUE);
    END;

    PROCEDURE SetEventLogSeqNo@1100525003(EventLogSeqNoIn@1100528300 : Integer);
    BEGIN
      EventLogSeqNo := EventLogSeqNoIn;
    END;

    PROCEDURE SetImpersonationUser@1100528389(ImpersonationUserSIDIn@1100528300 : Text);
    BEGIN
      ImpersonationUserSID := ImpersonationUserSIDIn;
    END;

    PROCEDURE SetStartedFrom@1100528337(StartedFromIn@1100528300 : Option);
    BEGIN
      StartedFrom := StartedFromIn;
    END;

    PROCEDURE ShowProgress@1100528314(Action@1100528301 : Text;Message@1100528300 : Variant;Message2@1100529400 : Variant);
    VAR
      SpacesToSizeWIndow@1100525000 : Text;
    BEGIN
      IF (StartedFrom >= StartedFrom::NAS) THEN
        EXIT;
      IF (NOT WindowIsOpen) THEN BEGIN
        SpacesToSizeWIndow := '                                                                                          ';
        Window.OPEN(Text000,SpacesToSizeWIndow); //Used to size the message window
      END;
      Window.UPDATE(1, Action);
      Window.UPDATE(2, Message);
      Window.UPDATE(3, Message2);
      WindowIsOpen := TRUE;
    END;

    PROCEDURE ShowCheckErrors@1100528311();
    VAR
      ErrorMessages@1100528300 : Page 700;
      ErrorText@1100525000 : Text;
      ErrorCount@1100525001 : Integer;
    BEGIN
      ErrorCount := ErrorMessage.COUNT;
      IF (ErrorCount = 0) THEN
        EXIT;

      IF (ErrorCount = 1) THEN
        ErrorText := GETLASTERRORTEXT
      ELSE
        ErrorText := STRSUBSTNO(Text012, ErrorCount);
      SetDPTEventLogMessageText(EventLogSeqNo, ImpersonationUserSID, ErrorText);

      CASE StartedFrom OF
        StartedFrom::EventLog,
        StartedFrom::UI: BEGIN
          ErrorMessages.SetRecords(ErrorMessage);
          ErrorMessages.RUN;
          ERROR('');
        END;
      END;
    END;

    PROCEDURE ShowDPTError@1100528309();
    VAR
      ErrorMessageException@1100528301 : Page 11229506;
      ErrorText@1100525000 : Text;
    BEGIN
      ErrorText := GETLASTERRORTEXT;
      SetDPTEventLogMessageText(EventLogSeqNo, ImpersonationUserSID, ErrorText);
      CASE StartedFrom OF
        StartedFrom::EventLog,
        StartedFrom::UI: BEGIN
          MESSAGE(ERROROCCURREDTEXT); //otherwise exception page is not started
          ErrorMessageException.SetException(GETLASTERROROBJECT);
          ErrorMessageException.RUN;
          ERROR('');
        END;
      END;
    END;

    [TryFunction]
    PROCEDURE SyncDocument@1100528300(SourceTable@1100528306 : Variant;DocumentProperties@1100528301 : Record 11012746;WebLink@1100527800 : Text);
    VAR
      DPTEventLog@1100528305 : Record 11229822;
      Job@1100528309 : Record 11072003;
      ServiceLocation@1100528303 : Record 11012801;
      Language@1100525000 : Record 8;
      User@1100528302 : Record 2000000120;
      FileManagement@1100528308 : Codeunit 419;
      FileName@1100528310 : Text;
      MemoryStream@1100527801 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
    BEGIN
      CheckLicense;
      GetUser(User);
      SetDotNetServiceFactory(User);

      ShowProgress(COLLECTDATATEXT, DPTEventLog.GetSyncDocumentText, '');
      CASE DPTType OF
        DPTType::Project: BEGIN
          Job := SourceTable;
          GetLanguage(Language, Job);
          SetDotNetProjectSite(Job, Language, User);
          AddSubsitesToDotNetProjectSite(Job, Language, TRUE);
          SetDotNetNAVDocumentProject(Job, DocumentProperties);
        END;
        DPTType::ServiceLocation: BEGIN
          ServiceLocation := SourceTable;
          GetLanguage(Language, ServiceLocation);
          SetDotNetLocationSite(ServiceLocation, Language, User);
          AddSubsitesToDotNetLocationSite(ServiceLocation, Language, TRUE);
          SetDotNetNAVDocumentService(ServiceLocation, DocumentProperties);
        END;
        ELSE
          ERROR(Text010, DPTEventLog.GetSyncDocumentText);
      END;

      FileName  := DocumentProperties.FileNameShort;
      MemoryStream  := MemoryStream.MemoryStream;
      DocumentProperties.GetContentInMemoryStream(MemoryStream);
      IF (IsNSTUserID(User)) THEN
        CLEAR(DotNetUser)
      ELSE
        SetDotNetUser(User);

      ShowProgress(DPTEventLog.GetSyncDocumentText, DocumentProperties.RECORDID, '');
      CLEAR(DotNetSynchronizationService);
      DotNetSynchronizationService := DotNetDPTServiceFactory.CreateSynchronizationService;
      CASE DPTType OF
        DPTType::Project:
          DotNetSynchronizationService.SyncDocument(Job."Document Portal URL", DotNetUser, DotNetNAVDocument, FileName,
            MemoryStream,DotNetProjectSite);
        DPTType::ServiceLocation:
          DotNetSynchronizationService.SyncDocument(ServiceLocation."Document Portal URL", DotNetUser, DotNetNAVDocument,
            FileName, MemoryStream, DotNetLocationSite);
      END;

      MemoryStream.Dispose();

      IF (DotNetNAVDocument.WebLink <> '') THEN BEGIN
        IF (DocumentProperties.IsFileSystemOnPremiseDocument) AND
           (NoMoreFilesWithSameName(DocumentProperties))
        THEN
          FileManagement.DeleteServerFile(DocumentProperties.FullFileName);
      END;
      WebLink := DotNetNAVDocument.WebLink;
    END;

    [TryFunction]
    PROCEDURE SyncProjectAuthorirties@1100528348(Job@1100528306 : Record 11072003);
    VAR
      DPTEventLog@1100528305 : Record 11229822;
      Language@1100528316 : Record 8;
      User@1100528302 : Record 2000000120;
    BEGIN
      IF (DPTType <> DPTType::Project) THEN
        ERROR(Text010, DPTEventLog.GetSyncAuthorityText);
      CheckLicense;
      GetUser(User);
      SetDotNetServiceFactory(User);

      ShowProgress(COLLECTDATATEXT, DPTEventLog.GetSyncAuthorityText, '');
      GetLanguage(Language, Job);
      SetDotNetProjectSite(Job, Language, User);
      AddDotNetAuthoritiesToDotNetProjectSite(Job, Language);
      AddDotNetAuthoritiesToDotNetProjectSubsite(Job, Language);

      ShowProgress(DPTEventLog.GetSyncAuthorityText, Job.RECORDID, '');
      CLEAR(DotNetUserSynchronizationService);
      DotNetUserSynchronizationService := DotNetDPTServiceFactory.CreateUserSynchronizationService;
      DotNetUserSynchronizationService.SynchronizeAuthorities(DotNetProjectSite);
    END;

    [TryFunction]
    PROCEDURE SyncProjectAuthorirty@1100528426(Job@1100528306 : Record 11072003;ContactNo@1100528304 : Code[20];ContactPersonNo@1100528307 : Code[20]);
    VAR
      DPTEventLog@1100528305 : Record 11229822;
      Language@1100528316 : Record 8;
      User@1100528302 : Record 2000000120;
    BEGIN
      IF (DPTType <> DPTType::Project) THEN
        ERROR(Text010, DPTEventLog.GetSyncAuthorityText);
      CheckLicense;
      GetUser(User);
      SetDotNetServiceFactory(User);

      ShowProgress(COLLECTDATATEXT, DPTEventLog.GetSyncAuthorityText, STRSUBSTNO('%1-%2', ContactNo, ContactPersonNo));
      GetLanguage(Language, Job);
      SetDotNetProjectSite(Job, Language, User);
      AddDotNetAuthorityToDotNetProjectSite(Job, Language, ContactNo, ContactPersonNo);
      AddDotNetAuthorityToDotNetProjectSubsite(Job, Language, ContactNo, ContactPersonNo);

      ShowProgress(DPTEventLog.GetSyncAuthorityText, Job.RECORDID, STRSUBSTNO('%1-%2', ContactNo, ContactPersonNo));
      CLEAR(DotNetUserSynchronizationService);
      DotNetUserSynchronizationService := DotNetDPTServiceFactory.CreateUserSynchronizationService;
      DotNetUserSynchronizationService.SynchronizeAuthorityPermissions(DotNetProjectSite);
    END;

    [TryFunction]
    PROCEDURE SyncPortalData@1100528386(SourceTable@1100528304 : Variant);
    VAR
      DPTEventLog@1100528307 : Record 11229822;
      Language@1100528306 : Record 8;
      Job@1100528305 : Record 11072003;
      ServiceLocation@1100528300 : Record 11012801;
      User@1100528303 : Record 2000000120;
    BEGIN
      CheckLicense;
      GetUser(User);
      SetDotNetServiceFactory(User);

      ShowProgress(COLLECTDATATEXT, DPTEventLog.GetSyncPortalDataText, '');
      CASE DPTType OF
        DPTType::Project: BEGIN
          Job := SourceTable;
          GetLanguage(Language, Job);
          SetDotNetProjectSite(Job, Language, User);
          AddSubsitesToDotNetProjectSite(Job, Language, FALSE);

          ShowProgress(DPTEventLog.GetSyncPortalDataText, Job.RECORDID, '');
          CLEAR(DotNetProvisioningService);
          DotNetProvisioningService := DotNetDPTServiceFactory.CreateProvisioningService;
          DotNetProvisioningService.SyncProjectSite(DotNetProjectSite);
        END;
        DPTType::ServiceLocation: BEGIN
          ServiceLocation := SourceTable;
          GetLanguage(Language, ServiceLocation);
          SetDotNetLocationSite(ServiceLocation, Language, User);
          AddSubsitesToDotNetLocationSite(ServiceLocation, Language, FALSE);

          ShowProgress(DPTEventLog.GetSyncPortalDataText, ServiceLocation.RECORDID, '');
          CLEAR(DotNetProvisioningService);
          DotNetProvisioningService := DotNetDPTServiceFactory.CreateProvisioningService;
          DotNetProvisioningService.SyncLocationSite(DotNetLocationSite);
        END;
        ELSE
          ERROR(Text010);
      END;
    END;

    [TryFunction]
    PROCEDURE SyncPortalMetaData@1100528384(SourceTable@1100528304 : Variant);
    VAR
      DPTEventLog@1100528306 : Record 11229822;
      Language@1100528309 : Record 8;
      Job@1100528303 : Record 11072003;
      ServiceLocation@1100528300 : Record 11012801;
      User@1100528308 : Record 2000000120;
    BEGIN
      CheckLicense;
      GetUser(User);
      SetDotNetServiceFactory(User);

      ShowProgress(COLLECTDATATEXT, DPTEventLog.GetSyncPortalMetaDataText, '');
      CASE DPTType OF
        DPTType::Project: BEGIN
          Job := SourceTable;
          GetLanguage(Language, Job);
          SetDotNetProjectSite(Job, Language, User);
          AddSubsitesToDotNetProjectSite(Job, Language, FALSE);

          ShowProgress(DPTEventLog.GetSyncPortalMetaDataText, Job.RECORDID, '');
          CLEAR(DotNetMetaDataSynchronizationService);
          DotNetMetaDataSynchronizationService := DotNetDPTServiceFactory.CreateMetaDataSynchronizationService;
          DotNetMetaDataSynchronizationService.SynchronizeLandingsPageMetaData(DotNetProjectSite);
          DotNetMetaDataSynchronizationService.SynchronizeMetaData(DotNetProjectSite);
        END;
        DPTType::ServiceLocation: BEGIN
          ServiceLocation := SourceTable;
          GetLanguage(Language, ServiceLocation);
          SetDotNetLocationSite(ServiceLocation, Language, User);
          AddSubsitesToDotNetLocationSite(ServiceLocation, Language, FALSE);

          ShowProgress(DPTEventLog.GetSyncPortalMetaDataText, ServiceLocation.RECORDID, '');
          CLEAR(DotNetMetaDataSynchronizationService);
          DotNetMetaDataSynchronizationService := DotNetDPTServiceFactory.CreateMetaDataSynchronizationService;
          DotNetMetaDataSynchronizationService.SynchronizeLandingsPageMetaData(DotNetLocationSite);
          DotNetMetaDataSynchronizationService.SynchronizeMetaData(DotNetLocationSite);
        END;
        ELSE
          ERROR(Text010, DPTEventLog.GetSyncPortalMetaDataText);
      END;
    END;

    [TryFunction]
    PROCEDURE SyncPortalSearchData@1100528374(SourceTable@1100528304 : Variant);
    VAR
      DPTEventLog@1100528307 : Record 11229822;
      Language@1100528306 : Record 8;
      Job@1100528305 : Record 11072003;
      ServiceLocation@1100528300 : Record 11012801;
      User@1100528303 : Record 2000000120;
    BEGIN
      CheckLicense;
      GetUser(User);
      SetDotNetServiceFactory(User);

      ShowProgress(COLLECTDATATEXT, DPTEventLog.GetSyncPortalSearchDataText, '');
      CASE DPTType OF
        DPTType::Project: BEGIN
          Job := SourceTable;
          GetLanguage(Language, Job);
          SetDotNetProjectSite(Job, Language, User);
          AddSubsitesToDotNetProjectSite(Job, Language, FALSE);
          AddSearchCenterToDotNetProjectSite;

          ShowProgress(DPTEventLog.GetSyncPortalSearchDataText, Job.RECORDID, '');
          CLEAR(DotNetSearchSynchronizationService);
          DotNetSearchSynchronizationService := DotNetDPTServiceFactory.CreateSearchSynchronizationService;
          DotNetSearchSynchronizationService.SyncSearchCenter(DotNetProjectSite);
        END;
        DPTType::ServiceLocation: BEGIN
          ServiceLocation := SourceTable;
          GetLanguage(Language, ServiceLocation);
          SetDotNetLocationSite(ServiceLocation, Language, User);
          AddSubsitesToDotNetLocationSite(ServiceLocation, Language, FALSE);
          AddSearchCenterToDotNetLocationSite;

          ShowProgress(DPTEventLog.GetSyncPortalSearchDataText, ServiceLocation.RECORDID, '');
          CLEAR(DotNetSearchSynchronizationService);
          DotNetSearchSynchronizationService := DotNetDPTServiceFactory.CreateSearchSynchronizationService;
          DotNetSearchSynchronizationService.SyncSearchCenter(DotNetLocationSite);
        END;
        ELSE
          ERROR(Text010, DPTEventLog.GetSyncPortalSearchDataText);
      END;
    END;

    [TryFunction]
    PROCEDURE SyncPortalSite@1100528388(SourceTable@1100528304 : Variant);
    VAR
      DPTEventLog@1100528306 : Record 11229822;
      Job@1100528310 : Record 11072003;
      ServiceLocation@1100528300 : Record 11012801;
      Language@1100528309 : Record 8;
      User@1100528308 : Record 2000000120;
    BEGIN
      CheckLicense;
      GetUser(User);
      SetDotNetServiceFactory(User);

      ShowProgress(COLLECTDATATEXT, DPTEventLog.GetSyncPortalSiteText, '');
      CASE DPTType OF
        DPTType::Project: BEGIN
          Job := SourceTable;
          GetLanguage(Language, Job);
          SetDotNetProjectSite(Job, Language, User);
          AddSubsitesToDotNetProjectSite(Job, Language, FALSE);

          ShowProgress(DPTEventLog.GetSyncPortalSiteText, Job.RECORDID, '');
          CLEAR(DotNetProvisioningService);
          DotNetProvisioningService := DotNetDPTServiceFactory.CreateProvisioningService;
          DotNetProvisioningService.SyncProjectSite(DotNetProjectSite);
        END;
        DPTType::ServiceLocation: BEGIN
          ServiceLocation := SourceTable;
          GetLanguage(Language, ServiceLocation);
          SetDotNetLocationSite(ServiceLocation, Language, User);
          AddSubsitesToDotNetLocationSite(ServiceLocation, Language, FALSE);

          ShowProgress(DPTEventLog.GetSyncPortalSiteText, ServiceLocation.RECORDID, '');
          CLEAR(DotNetProvisioningService);
          DotNetProvisioningService := DotNetDPTServiceFactory.CreateProvisioningService;
          DotNetProvisioningService.SyncLocationSite(DotNetLocationSite);
        END;
        ELSE
          ERROR(Text010, DPTEventLog.GetSyncPortalSiteText);
      END;
    END;

    [TryFunction]
    PROCEDURE SyncProjectResponsiblePersons@1100528351(Job@1100528306 : Record 11072003);
    VAR
      DPTEventLog@1100528309 : Record 11229822;
      Language@1100528308 : Record 8;
      User@1100528302 : Record 2000000120;
    BEGIN
      IF (DPTType <> DPTType::Project) THEN
        ERROR(Text010, DPTEventLog.GetSyncResponsiblePersonText);
      CheckLicense;
      GetUser(User);
      SetDotNetServiceFactory(User);

      ShowProgress(COLLECTDATATEXT, DPTEventLog.GetSyncResponsiblePersonText, '');
      GetLanguage(Language, Job);
      SetDotNetProjectSite(Job, Language, User);
      AddDotNetResponsiblePersonsToDotNetProjectSite(Job, Language);
      AddDotNetResponsiblePersonsToDotNetProjectSubsite(Job, Language);
      AddDotNetResponsiblePersonsToDotNetProjectSubsiteQuote(Job, Language);

      ShowProgress(DPTEventLog.GetSyncResponsiblePersonText, Job.RECORDID, '');
      CLEAR(DotNetUserSynchronizationService);
      DotNetUserSynchronizationService := DotNetDPTServiceFactory.CreateUserSynchronizationService;
      DotNetUserSynchronizationService.SynchronizeResponsiblePersons(DotNetProjectSite);
    END;

    [TryFunction]
    PROCEDURE SyncServiceAuthorirties@1100528436(ServiceLocation@1100528306 : Record 11012801);
    VAR
      DPTEventLog@1100528305 : Record 11229822;
      Language@1100528316 : Record 8;
      User@1100528302 : Record 2000000120;
    BEGIN
      IF (DPTType <> DPTType::ServiceLocation) THEN
        ERROR(Text010, DPTEventLog.GetSyncAuthorityText);
      CheckLicense;
      GetUser(User);
      SetDotNetServiceFactory(User);

      ShowProgress(COLLECTDATATEXT, DPTEventLog.GetSyncAuthorityText, '');
      GetLanguage(Language, ServiceLocation);
      SetDotNetLocationSite(ServiceLocation, Language, User);
      AddDotNetAuthoritiesToDotNetLocationSite(ServiceLocation, Language);
      AddDotNetAuthoritiesToDotNetLocationSubsite(ServiceLocation, Language);

      ShowProgress(DPTEventLog.GetSyncAuthorityText, ServiceLocation.RECORDID, '');
      CLEAR(DotNetUserSynchronizationService);
      DotNetUserSynchronizationService := DotNetDPTServiceFactory.CreateUserSynchronizationService;
      DotNetUserSynchronizationService.SynchronizeAuthorities(DotNetLocationSite);
    END;

    [TryFunction]
    PROCEDURE SyncServiceAuthorirty@1100528414(ServiceLocation@1100528306 : Record 11012801;ContactNo@1100528304 : Code[20];ContactPersonNo@1100528307 : Code[20]);
    VAR
      DPTEventLog@1100528305 : Record 11229822;
      Language@1100528316 : Record 8;
      User@1100528302 : Record 2000000120;
    BEGIN
      IF (DPTType <> DPTType::ServiceLocation) THEN
        ERROR(Text010, DPTEventLog.GetSyncAuthorityText);
      CheckLicense;
      GetUser(User);
      SetDotNetServiceFactory(User);

      ShowProgress(COLLECTDATATEXT, DPTEventLog.GetSyncAuthorityText, STRSUBSTNO('%1-%2', ContactNo, ContactPersonNo));
      GetLanguage(Language, ServiceLocation);
      SetDotNetLocationSite(ServiceLocation, Language, User);
      AddDotNetAuthorityToDotNetLocationSite(ServiceLocation, Language, ContactNo, ContactPersonNo);
      AddDotNetAuthorityToDotNetLocationSubsite(ServiceLocation, Language, ContactNo, ContactPersonNo);

      ShowProgress(DPTEventLog.GetSyncAuthorityText, ServiceLocation.RECORDID, STRSUBSTNO('%1-%2', ContactNo, ContactPersonNo));
      CLEAR(DotNetUserSynchronizationService);
      DotNetUserSynchronizationService := DotNetDPTServiceFactory.CreateUserSynchronizationService;
      DotNetUserSynchronizationService.SynchronizeAuthorityPermissions(DotNetLocationSite);
    END;

    [TryFunction]
    PROCEDURE SyncServiceResponsiblePersons@1100528440(ServiceLocation@1100528306 : Record 11012801);
    VAR
      DPTEventLog@1100528309 : Record 11229822;
      Language@1100528308 : Record 8;
      User@1100528302 : Record 2000000120;
    BEGIN
      IF (DPTType <> DPTType::ServiceLocation) THEN
        ERROR(Text010, DPTEventLog.GetSyncResponsiblePersonText);
      CheckLicense;
      GetUser(User);
      SetDotNetServiceFactory(User);

      ShowProgress(COLLECTDATATEXT, DPTEventLog.GetSyncResponsiblePersonText, '');
      GetLanguage(Language, ServiceLocation);
      SetDotNetLocationSite(ServiceLocation, Language, User);
      AddDotNetResponsiblePersonsToDotNetLocationSite(ServiceLocation, Language);
      AddDotNetResponsiblePersonsToDotNetLocationSubsite(ServiceLocation, Language);

      ShowProgress(DPTEventLog.GetSyncResponsiblePersonText, ServiceLocation.RECORDID, '');
      CLEAR(DotNetUserSynchronizationService);
      DotNetUserSynchronizationService := DotNetDPTServiceFactory.CreateUserSynchronizationService;
      DotNetUserSynchronizationService.SynchronizeResponsiblePersons(DotNetLocationSite);
    END;

    [TryFunction]
    PROCEDURE TestContactEmail2@1100528354(Contact@1100528300 : Record 5050;MustHaveValue@1100528301 : Boolean);
    BEGIN
      IF (MustHaveValue) THEN
        Contact.TESTFIELD("E-Mail 2")
      ELSE
        Contact.TESTFIELD("E-Mail 2", '');
    END;

    [TryFunction]
    PROCEDURE TestContactGet@1100528353(VAR Contact@1100528300 : Record 5050;ContactNo@1100528301 : Code[20];ContactPersonNo@1100528302 : Code[20]);
    BEGIN
      GetContact(Contact, ContactNo, ContactPersonNo);
    END;

    [TryFunction]
    PROCEDURE TestContactBusinessRelationFindFirst@1100528356(VAR ContactBusinessRelation@1100528302 : Record 5054;VendorNo@1100528301 : Code[20];LinkToTable@1100528300 : Option);
    BEGIN
      ContactBusinessRelation.SETCURRENTKEY("Link to Table", "No.");
      ContactBusinessRelation.SETRANGE("Link to Table", LinkToTable);
      ContactBusinessRelation.SETRANGE("No.", VendorNo);
      ContactBusinessRelation.FINDFIRST;
    END;

    PROCEDURE TestConnection@1100528312();
    VAR
      User@1100528300 : Record 2000000120;
    BEGIN
      DPTSetup.GET;
      ErrorMessage.DELETEALL;
      CheckDPTSetupLocal;
      CheckUserLocal;
      ShowCheckErrors;

      GetUser(User);
      IF (NOT SetDotNetServiceFactory(User)) THEN
        ShowDPTError;
      IF (NOT ValidateConnection) THEN
        ShowDPTError;
      MESSAGE(Text007);
    END;

    [TryFunction]
    PROCEDURE TestDocumentTypeDescription@1100528361(DocType@1100528300 : Code[10]);
    VAR
      DocumentType@1100528301 : Record 11012405;
    BEGIN
      DocumentType.GET(DocType);
      DocumentType.TESTFIELD(Description);
    END;

    [TryFunction]
    PROCEDURE TestSubsiteCode@1100525014(SubsiteCode@1100525000 : Code[20]);
    VAR
      DPTDefaultSubsiteDocType@1100525001 : Record 11229942;
    BEGIN
      IF (SubsiteCode IN ['CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9',
          'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9'])
      THEN
        ERROR(CODENOTALLOWED, DPTDefaultSubsiteDocType.FIELDCAPTION("Subsite Code"), SubsiteCode);
    END;

    [TryFunction]
    PROCEDURE TestDocumentTypeCode@1100527801(DocumentType@1100525000 : Code[10]);
    VAR
      DPTDefaultSubsiteDocType@1100525001 : Record 11229942;
    BEGIN
      IF (DocumentType IN ['CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9',
          'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9'])
      THEN
        ERROR(CODENOTALLOWED, DPTDefaultSubsiteDocType.FIELDCAPTION("Document Type"), DocumentType);
    END;

    PROCEDURE UpdateExistingDocumentProperties@1100528377(SourceTable@1100528301 : Variant);
    VAR
      DocumentLink@1100528302 : Record 11012747;
      Job@1100528303 : Record 11072003;
      ServiceLocation@1100528305 : Record 11012801;
    BEGIN
      CheckLicense;

      CASE DPTType OF
        DPTType::Project: BEGIN
          Job := SourceTable;
          DocumentLink.SETRANGE("Table No.", DATABASE::Job);
          DocumentLink.SETRANGE("Record ID", Job.RECORDID);
          UpdateExistingDocuments(DocumentLink, DPTType, Job."No.");
        END;
        DPTType::ServiceLocation: BEGIN
          ServiceLocation := SourceTable;
          DocumentLink.SETRANGE("Table No.", DATABASE::"Service Location");
          DocumentLink.SETRANGE("Record ID", Job.RECORDID);
          UpdateExistingDocuments(DocumentLink, DPTType, ServiceLocation."No.");
        END;
        ELSE ERROR(Text006);
      END;
    END;

    LOCAL PROCEDURE "---Locals---"@1100528307();
    BEGIN
    END;

    LOCAL PROCEDURE AddColorsToDotNetColorsCollection@1100528438();
    VAR
      OperatingSystemMgt@1100528301 : Codeunit 11012364;
    BEGIN
      CLEAR(DotNetCodeDescriptionCollection);
      DotNetCodeDescriptionCollection := DotNetCodeDescriptionCollection.CodeDescriptionCollection;

      DotNetCodeDescriptionCollection.Add('TopBarBgCol', OperatingSystemMgt.GetHexColor(DPTSetup."Top Bar Background Color"));
      DotNetCodeDescriptionCollection.Add('TopBarFontCol', OperatingSystemMgt.GetHexColor(DPTSetup."Top Bar Title Color"));
      DotNetCodeDescriptionCollection.Add('BgCol', OperatingSystemMgt.GetHexColor(DPTSetup."Background Color"));
      DotNetCodeDescriptionCollection.Add('HeaderBgCol', OperatingSystemMgt.GetHexColor(DPTSetup."Header Background Color"));
      DotNetCodeDescriptionCollection.Add('PageTitleFontCol', OperatingSystemMgt.GetHexColor(DPTSetup."Header Title Color"));
      DotNetCodeDescriptionCollection.Add('MenuBgCol', OperatingSystemMgt.GetHexColor(DPTSetup."Menu Background Color"));
      DotNetCodeDescriptionCollection.Add('WPBgCol', OperatingSystemMgt.GetHexColor(DPTSetup."Web Part Background Color"));
      DotNetCodeDescriptionCollection.Add('WPTitFontCol', OperatingSystemMgt.GetHexColor(DPTSetup."Web Part Title Color"));
      DotNetCodeDescriptionCollection.Add('SubBgCol', OperatingSystemMgt.GetHexColor(DPTSetup."SubSite Background Color"));
      DotNetCodeDescriptionCollection.Add('SubFontCol', OperatingSystemMgt.GetHexColor(DPTSetup."SubSite Letter Color"));
      DotNetCodeDescriptionCollection.Add('ROSubBgCol', OperatingSystemMgt.GetHexColor(DPTSetup."Roll Over SubSite Backgr Color"));
      DotNetCodeDescriptionCollection.Add('ROSubFontCol', OperatingSystemMgt.GetHexColor(DPTSetup."Roll Over SubSite Letter Color"));
      DotNetCodeDescriptionCollection.Add('SelSubBgCol', OperatingSystemMgt.GetHexColor(DPTSetup."Selected SubSite Backgr Color"));
      DotNetCodeDescriptionCollection.Add('SelSubFontCol', OperatingSystemMgt.GetHexColor(DPTSetup."Selected SubSite Letter Color"));
      DotNetCodeDescriptionCollection.Add('TitLibBgCol', OperatingSystemMgt.GetHexColor(DPTSetup."Library Title Background Color"));
      DotNetCodeDescriptionCollection.Add('TitLibFontCol', OperatingSystemMgt.GetHexColor(DPTSetup."Library Title Letter Color"));
      DotNetCodeDescriptionCollection.Add('LibBgCol', OperatingSystemMgt.GetHexColor(DPTSetup."Library Background Color"));
      DotNetCodeDescriptionCollection.Add('LibFontCol', OperatingSystemMgt.GetHexColor(DPTSetup."Library Color"));
      DotNetCodeDescriptionCollection.Add('ROLibBgCol', OperatingSystemMgt.GetHexColor(DPTSetup."Roll Over Library Backgr Color"));
      DotNetCodeDescriptionCollection.Add('ROLibFontCol', OperatingSystemMgt.GetHexColor(DPTSetup."Roll Over Library Title Color"));
    END;

    LOCAL PROCEDURE AddDefaultSubsiteDocTypesToDotNetLandingPage@1100525002();
    VAR
      DPTDefaultSubsiteDocType@1100525000 : Record 11229942;
    BEGIN
      CLEAR(DotnetDefaultSubsiteDocumentType);

      DPTDefaultSubsiteDocType.SETRANGE("Source Type", DPTType);
      IF (DPTDefaultSubsiteDocType.FINDSET) THEN  BEGIN
        REPEAT
          DotnetDefaultSubsiteDocumentType := DotnetDefaultSubsiteDocumentType.DefaultSubSiteDocumentType;

          DPTDefaultSubsiteDocType.CALCFIELDS("Subsite Description", "Document Type Description");
          DotnetDefaultSubsiteDocumentType.SourceTypeCode := DPTDefaultSubsiteDocType."Source Type";
          DotnetDefaultSubsiteDocumentType.SubSite.Code := DPTDefaultSubsiteDocType."Subsite Code";
          DotnetDefaultSubsiteDocumentType.SubSite.Description := DPTDefaultSubsiteDocType."Subsite Description";
          DotnetDefaultSubsiteDocumentType.DocumentType.Code := DPTDefaultSubsiteDocType."Document Type";
          DotnetDefaultSubsiteDocumentType.DocumentType.Description := DPTDefaultSubsiteDocType."Document Type Description";

          DotNetLandingPage.DefaultSubSiteDocumentTypes.Add(DotnetDefaultSubsiteDocumentType);
        UNTIL (DPTDefaultSubsiteDocType.NEXT = 0);
      END
    END;

    LOCAL PROCEDURE AddDocumentStatusToDotNetSite@1100528362(Language@1100528304 : Record 8);
    VAR
      SaveLanguageId@1100528307 : Integer;
      StringFunctions@1100528306 : Codeunit 11012273;
      RecRef@1100528305 : RecordRef;
      FieldRef@1100528303 : FieldRef;
      I@1100528301 : Integer;
    BEGIN
      SaveLanguageId := GLOBALLANGUAGE;
      RecRef.OPEN(DATABASE::"Document Properties");
      FieldRef := RecRef.FIELD(43); //Status
      GLOBALLANGUAGE(Language."Windows Language ID");
      CLEAR(ArrayList);
      StringFunctions.SplitString2(FieldRef.OPTIONCAPTION, ',', ArrayList);
      GLOBALLANGUAGE(SaveLanguageId);

      FOR I := 0 TO ArrayList.Count - 1 DO BEGIN
        CASE DPTType OF
          DPTType::Project:
            DotNetProjectSite.DocumentStatuses.Add(STRSUBSTNO('%1', I), STRSUBSTNO('%1', ArrayList.Item(I)));
          DPTType::ServiceLocation:
            DotNetLocationSite.DocumentStatuses.Add(STRSUBSTNO('%1', I), STRSUBSTNO('%1', ArrayList.Item(I)));
          ELSE ERROR(Text006);
        END;
      END;
    END;

    LOCAL PROCEDURE AddDocumentTypesToDotNetLocationSubsite@1100528329(DPTSubsiteServLoc@1100528301 : Record 11072344);
    VAR
      DPTSubsiteDocTypeServLoc@1100528302 : Record 11072345;
    BEGIN
      DPTSubsiteDocTypeServLoc.SETRANGE("Service Location No.", DPTSubsiteServLoc."Service Location No.");
      DPTSubsiteDocTypeServLoc.SETRANGE("Subsite Code", DPTSubsiteServLoc.Code);
      IF (NOT DPTSubsiteDocTypeServLoc.FINDSET) THEN
        EXIT;

      REPEAT
        DPTSubsiteDocTypeServLoc.CALCFIELDS("Document Type Description");
        DotNetLocationSubsite.DocumentTypes.Add(DPTSubsiteDocTypeServLoc."Document Type", DPTSubsiteDocTypeServLoc."Document Type Description",
          DPTSubsiteDocTypeServLoc."Use Document CheckIn/-Out");
      UNTIL (DPTSubsiteDocTypeServLoc.NEXT = 0);
    END;

    LOCAL PROCEDURE AddDocumentTypesToDotNetProjectSubsite@1100528449(DPTSubsiteProject@1100528301 : Record 11072330);
    VAR
      DPTSubsiteDocTypeProject@1100528302 : Record 11072331;
    BEGIN
      DPTSubsiteDocTypeProject.SETRANGE("Project No.", DPTSubsiteProject."Project No.");
      DPTSubsiteDocTypeProject.SETRANGE("Subsite Code", DPTSubsiteProject.Code);
      IF (NOT DPTSubsiteDocTypeProject.FINDSET) THEN
        EXIT;

      REPEAT
        DPTSubsiteDocTypeProject.CALCFIELDS("Document Type Description");
        DotNetProjectSubsite.DocumentTypes.Add(DPTSubsiteDocTypeProject."Document Type", DPTSubsiteDocTypeProject."Document Type Description",
          DPTSubsiteDocTypeProject."Use Document CheckIn/-Out");
      UNTIL (DPTSubsiteDocTypeProject.NEXT = 0);
    END;

    LOCAL PROCEDURE AddDocumentTypesToDotNetProjectSubsiteQuote@1100527810(DPTSubsiteProject@1100528301 : Record 11072330);
    VAR
      DPTSubsiteDocTypeProject@1100528302 : Record 11072331;
    BEGIN
      DPTSubsiteDocTypeProject.SETRANGE("Project No.", DPTSubsiteProject."Project No.");
      DPTSubsiteDocTypeProject.SETRANGE("Subsite Code", DPTSubsiteProject.Code);
      IF (NOT DPTSubsiteDocTypeProject.FINDSET) THEN
        EXIT;

      REPEAT
        DPTSubsiteDocTypeProject.CALCFIELDS("Document Type Description");
        DotNetProjectSubsiteQuote.DocumentTypes.Add(DPTSubsiteDocTypeProject."Document Type", DPTSubsiteDocTypeProject."Document Type Description",
          DPTSubsiteDocTypeProject."Use Document CheckIn/-Out");
      UNTIL (DPTSubsiteDocTypeProject.NEXT = 0);
    END;

    LOCAL PROCEDURE AddDotNetAuthoritiesToDotNetLocationSite@1100528450(ServiceLocation@1100528300 : Record 11012801;Language@1100528301 : Record 8);
    VAR
      ServiceAuthorityDPT@1100528302 : Record 11072298;
      Contact@1100528306 : Record 5050;
      AuthorisationDescription@1100528305 : ARRAY [10] OF Text;
    BEGIN
      ServiceAuthorityDPT.SETRANGE("Source Type", ServiceAuthorityDPT."Source Type"::ServLocation);
      ServiceAuthorityDPT.SETRANGE("Source Code", ServiceLocation."No.");
      IF (NOT ServiceAuthorityDPT.FINDSET) THEN
        EXIT;
      GetAuthorisationDescriptions(Language, AuthorisationDescription);

      REPEAT
        GetContact(Contact, ServiceAuthorityDPT."Contact No.", ServiceAuthorityDPT."Contact Person No.");
        SetDotNetServiceAuthority(ServiceAuthorityDPT, Contact);
        AddServiceAuthorityPermissionsToDotNetAuthority(ServiceAuthorityDPT, '', AuthorisationDescription);
        DotNetLocationSite.Authorities.Add(DotNetAuthority);
      UNTIL (ServiceAuthorityDPT.NEXT = 0);
    END;

    LOCAL PROCEDURE AddDotNetAuthoritiesToDotNetProjectSite@1100528368(Job@1100528300 : Record 11072003;Language@1100528301 : Record 8);
    VAR
      ProjectAuthority@1100528302 : Record 11020216;
      Contact@1100528306 : Record 5050;
      AuthorisationDescription@1100528305 : ARRAY [10] OF Text;
    BEGIN
      ProjectAuthority.SETRANGE("Project No.", Job."No.");
      IF (NOT ProjectAuthority.FINDSET) THEN
        EXIT;
      GetAuthorisationDescriptions(Language, AuthorisationDescription);

      REPEAT
        GetContact(Contact, ProjectAuthority."Contact No.", ProjectAuthority."Contact Person No.");
        SetDotNetProjectAuthority(ProjectAuthority, Contact);
        AddProjectAuthorityPermissionsToDotNetAuthority(ProjectAuthority, '', AuthorisationDescription);
        DotNetProjectSite.Authorities.Add(DotNetAuthority);
      UNTIL (ProjectAuthority.NEXT = 0);
    END;

    LOCAL PROCEDURE AddDotNetAuthoritiesToDotNetLocationSubsite@1100528452(ServiceLocation@1100528300 : Record 11012801;Language@1100528301 : Record 8);
    VAR
      ServiceAuthorityDPT@1100528302 : Record 11072298;
      DPTSubsiteServLoc@1100528305 : Record 11072344;
      Contact@1100528309 : Record 5050;
      AuthorisationDescription@1100528306 : ARRAY [10] OF Text;
    BEGIN
      DPTSubsiteServLoc.SETRANGE("Service Location No.", ServiceLocation."No.");
      DPTSubsiteServLoc.SETFILTER("Synchronized On", '<>%1', 0DT);
      IF (NOT DPTSubsiteServLoc.FINDSET) THEN
        EXIT;
      GetAuthorisationDescriptions(Language, AuthorisationDescription);

      REPEAT
        SetDotNetLocationSubsite(DPTSubsiteServLoc, Language);
        ServiceAuthorityDPT.SETRANGE("Source Type", ServiceAuthorityDPT."Source Type"::ServLocation);
        ServiceAuthorityDPT.SETRANGE("Source Code", DPTSubsiteServLoc."Service Location No.");
        IF (ServiceAuthorityDPT.FINDSET) THEN BEGIN
          REPEAT
            GetContact(Contact, ServiceAuthorityDPT."Contact No.", ServiceAuthorityDPT."Contact Person No.");
            SetDotNetServiceAuthority(ServiceAuthorityDPT, Contact);
            AddServiceAuthorityPermissionsToDotNetAuthority(ServiceAuthorityDPT, DPTSubsiteServLoc.Code, AuthorisationDescription);
            DotNetLocationSubsite.Authorities.Add(DotNetAuthority);
          UNTIL (ServiceAuthorityDPT.NEXT = 0);
        END;
        DotNetLocationSite.SubSites.Add(DotNetLocationSubsite);
      UNTIL (DPTSubsiteServLoc.NEXT = 0);
    END;

    LOCAL PROCEDURE AddDotNetAuthoritiesToDotNetProjectSubsite@1100528367(Job@1100528300 : Record 11072003;Language@1100528301 : Record 8);
    VAR
      ProjectAuthority@1100528302 : Record 11020216;
      DPTSubsiteProject@1100528305 : Record 11072330;
      Contact@1100528309 : Record 5050;
      AuthorisationDescription@1100528306 : ARRAY [10] OF Text;
    BEGIN
      DPTSubsiteProject.SETRANGE("Project No.", Job."No.");
      DPTSubsiteProject.SETFILTER("Synchronized On", '<>%1', 0DT);
      DPTSubsiteProject.SETRANGE("Quote Request Subsite", FALSE);
      IF (NOT DPTSubsiteProject.FINDSET) THEN
        EXIT;
      GetAuthorisationDescriptions(Language, AuthorisationDescription);

      REPEAT
        SetDotNetProjectSubsite(DPTSubsiteProject, Language);
        ProjectAuthority.SETRANGE("Project No.", DPTSubsiteProject."Project No.");
        IF (ProjectAuthority.FINDSET) THEN BEGIN
          REPEAT
            GetContact(Contact, ProjectAuthority."Contact No.", ProjectAuthority."Contact Person No.");
            SetDotNetProjectAuthority(ProjectAuthority, Contact);
            AddProjectAuthorityPermissionsToDotNetAuthority(ProjectAuthority, DPTSubsiteProject.Code, AuthorisationDescription);
            DotNetProjectSubsite.Authorities.Add(DotNetAuthority);
          UNTIL (ProjectAuthority.NEXT = 0);
        END;
        DotNetProjectSite.SubSites.Add(DotNetProjectSubsite);
      UNTIL (DPTSubsiteProject.NEXT = 0);
    END;

    LOCAL PROCEDURE AddDotNetAuthorityToDotNetLocationSite@1100528453(ServiceLocation@1100528300 : Record 11012801;Language@1100528301 : Record 8;ContactNo@1100528307 : Code[20];ContactPersonNo@1100528308 : Code[20]);
    VAR
      ServiceAuthorityDPT@1100528302 : Record 11072298;
      Contact@1100528306 : Record 5050;
      AuthorisationDescription@1100528305 : ARRAY [10] OF Text;
    BEGIN
      ServiceAuthorityDPT.SETRANGE("Source Type", ServiceAuthorityDPT."Source Type"::ServLocation);
      ServiceAuthorityDPT.SETRANGE("Source Code", ServiceLocation."No.");
      ServiceAuthorityDPT.SETRANGE("Contact No.", ContactNo);
      ServiceAuthorityDPT.SETRANGE("Contact Person No.", ContactPersonNo);
      IF (NOT ServiceAuthorityDPT.FINDSET) THEN
        EXIT;
      GetAuthorisationDescriptions(Language, AuthorisationDescription);

      REPEAT
        GetContact(Contact, ServiceAuthorityDPT."Contact No.", ServiceAuthorityDPT."Contact Person No.");
        SetDotNetServiceAuthority(ServiceAuthorityDPT, Contact);
        AddServiceAuthorityPermissionsToDotNetAuthority(ServiceAuthorityDPT, '', AuthorisationDescription);
        DotNetLocationSite.Authorities.Add(DotNetAuthority);
      UNTIL (ServiceAuthorityDPT.NEXT = 0);
    END;

    LOCAL PROCEDURE AddDotNetAuthorityToDotNetProjectSite@1100528430(Job@1100528300 : Record 11072003;Language@1100528301 : Record 8;ContactNo@1100528307 : Code[20];ContactPersonNo@1100528308 : Code[20]);
    VAR
      ProjectAuthority@1100528302 : Record 11020216;
      Contact@1100528306 : Record 5050;
      AuthorisationDescription@1100528305 : ARRAY [10] OF Text;
    BEGIN
      ProjectAuthority.SETRANGE("Project No.", Job."No.");
      ProjectAuthority.SETRANGE("Contact No.", ContactNo);
      ProjectAuthority.SETRANGE("Contact Person No.", ContactPersonNo);
      IF (NOT ProjectAuthority.FINDSET) THEN
        EXIT;
      GetAuthorisationDescriptions(Language, AuthorisationDescription);

      REPEAT
        GetContact(Contact, ProjectAuthority."Contact No.", ProjectAuthority."Contact Person No.");
        SetDotNetProjectAuthority(ProjectAuthority, Contact);
        AddProjectAuthorityPermissionsToDotNetAuthority(ProjectAuthority, '', AuthorisationDescription);
        DotNetProjectSite.Authorities.Add(DotNetAuthority);
      UNTIL (ProjectAuthority.NEXT = 0);
    END;

    LOCAL PROCEDURE AddDotNetAuthorityToDotNetLocationSubsite@1100528454(ServiceLocation@1100528300 : Record 11012801;Language@1100528301 : Record 8;ContactNo@1100528311 : Code[20];ContactPersonNo@1100528308 : Code[20]);
    VAR
      ServiceAuthorityDPT@1100528302 : Record 11072298;
      DPTSubsiteServLoc@1100528305 : Record 11072344;
      Contact@1100528309 : Record 5050;
      AuthorisationDescription@1100528306 : ARRAY [10] OF Text;
    BEGIN
      DPTSubsiteServLoc.SETRANGE("Service Location No.", ServiceLocation."No.");
      DPTSubsiteServLoc.SETFILTER("Synchronized On", '<>%1', 0DT);
      IF (NOT DPTSubsiteServLoc.FINDSET) THEN
        EXIT;
      GetAuthorisationDescriptions(Language, AuthorisationDescription);

      REPEAT
        ServiceAuthorityDPT.SETRANGE("Source Type", ServiceAuthorityDPT."Source Type"::ServLocation);
        ServiceAuthorityDPT.SETRANGE("Source Code", ServiceLocation."No.");
        ServiceAuthorityDPT.SETRANGE("Contact No.", ContactNo);
        ServiceAuthorityDPT.SETRANGE("Contact Person No.", ContactPersonNo);
        IF (ServiceAuthorityDPT.FINDSET) THEN BEGIN
          SetDotNetLocationSubsite(DPTSubsiteServLoc, Language);
          REPEAT
            GetContact(Contact, ServiceAuthorityDPT."Contact No.", ServiceAuthorityDPT."Contact Person No.");
            SetDotNetServiceAuthority(ServiceAuthorityDPT, Contact);
            AddServiceAuthorityPermissionsToDotNetAuthority(ServiceAuthorityDPT, DPTSubsiteServLoc.Code, AuthorisationDescription);
            DotNetLocationSubsite.Authorities.Add(DotNetAuthority);
          UNTIL (ServiceAuthorityDPT.NEXT = 0);
          AddDocumentTypesToDotNetLocationSubsite(DPTSubsiteServLoc);
          DotNetLocationSite.SubSites.Add(DotNetLocationSubsite);
        END;
      UNTIL (DPTSubsiteServLoc.NEXT = 0);
    END;

    LOCAL PROCEDURE AddDotNetAuthorityToDotNetProjectSubsite@1100528429(Job@1100528300 : Record 11072003;Language@1100528301 : Record 8;ContactNo@1100528311 : Code[20];ContactPersonNo@1100528308 : Code[20]);
    VAR
      ProjectAuthority@1100528302 : Record 11020216;
      DPTSubsiteProject@1100528305 : Record 11072330;
      Contact@1100528309 : Record 5050;
      AuthorisationDescription@1100528306 : ARRAY [10] OF Text;
    BEGIN
      DPTSubsiteProject.SETRANGE("Project No.", Job."No.");
      DPTSubsiteProject.SETFILTER("Synchronized On", '<>%1', 0DT);
      DPTSubsiteProject.SETRANGE("Quote Request Subsite", FALSE);
      IF (NOT DPTSubsiteProject.FINDSET) THEN
        EXIT;
      GetAuthorisationDescriptions(Language, AuthorisationDescription);

      REPEAT
        ProjectAuthority.SETRANGE("Project No.", DPTSubsiteProject."Project No.");
        ProjectAuthority.SETRANGE("Contact No.", ContactNo);
        ProjectAuthority.SETRANGE("Contact Person No.", ContactPersonNo);
        IF (ProjectAuthority.FINDSET) THEN BEGIN
          SetDotNetProjectSubsite(DPTSubsiteProject, Language);
          REPEAT
            GetContact(Contact, ProjectAuthority."Contact No.", ProjectAuthority."Contact Person No.");
            SetDotNetProjectAuthority(ProjectAuthority, Contact);
            AddProjectAuthorityPermissionsToDotNetAuthority(ProjectAuthority, DPTSubsiteProject.Code, AuthorisationDescription);
            DotNetProjectSubsite.Authorities.Add(DotNetAuthority);
          UNTIL (ProjectAuthority.NEXT = 0);
          AddDocumentTypesToDotNetProjectSubsite(DPTSubsiteProject);
          DotNetProjectSite.SubSites.Add(DotNetProjectSubsite);
        END;
      UNTIL (DPTSubsiteProject.NEXT = 0);
    END;

    LOCAL PROCEDURE AddDotNetResponsiblePersonsToDotNetLocationSite@1100528455(ServiceLocation@1100528300 : Record 11012801;Language@1100528301 : Record 8);
    VAR
      ServiceResponsiblePersonDPT@1100528302 : Record 11072297;
      AuthorisationDescription@1100528305 : ARRAY [10] OF Text;
    BEGIN
      ServiceResponsiblePersonDPT.SETRANGE("Source Type", ServiceResponsiblePersonDPT."Source Type"::ServLocation);
      ServiceResponsiblePersonDPT.SETRANGE("Source Code", ServiceLocation."No.");
      IF (NOT ServiceResponsiblePersonDPT.FINDSET) THEN
        EXIT;
      GetAuthorisationDescriptions(Language, AuthorisationDescription);

      REPEAT
        SetDotNetServiceResponsiblePerson(ServiceResponsiblePersonDPT);
        AddServiceResponsiblePersonPermissionsToDotNetResponsiblePerson(ServiceResponsiblePersonDPT, '', AuthorisationDescription);
        DotNetLocationSite.ResponsiblePersons.Add(DotNetResponsiblePerson);
      UNTIL (ServiceResponsiblePersonDPT.NEXT = 0);
    END;

    LOCAL PROCEDURE AddDotNetResponsiblePersonsToDotNetProjectSite@1100528355(Job@1100528300 : Record 11072003;Language@1100528301 : Record 8);
    VAR
      ProjectResponsiblePerson@1100528302 : Record 11012040;
      AuthorisationDescription@1100528305 : ARRAY [10] OF Text;
    BEGIN
      ProjectResponsiblePerson.SETRANGE("Project No.", Job."No.");
      IF (NOT ProjectResponsiblePerson.FINDSET) THEN
        EXIT;
      GetAuthorisationDescriptions(Language, AuthorisationDescription);

      REPEAT
        SetDotNetProjectResponsiblePerson(ProjectResponsiblePerson);
        AddProjectResponsiblePersonPermissionsToDotNetResponsiblePerson(ProjectResponsiblePerson, '', AuthorisationDescription);
        DotNetProjectSite.ResponsiblePersons.Add(DotNetResponsiblePerson);
      UNTIL (ProjectResponsiblePerson.NEXT = 0);
    END;

    LOCAL PROCEDURE AddDotNetResponsiblePersonsToDotNetLocationSubsite@1100528456(ServiceLocation@1100528300 : Record 11012801;Language@1100528301 : Record 8);
    VAR
      ServiceResponsiblePersonDPT@1100528302 : Record 11072297;
      DPTSubsiteServLoc@1100528305 : Record 11072344;
      Employee@1100528309 : Record 5200;
      AuthorisationDescription@1100528306 : ARRAY [10] OF Text;
    BEGIN
      DPTSubsiteServLoc.SETRANGE("Service Location No.", ServiceLocation."No.");
      DPTSubsiteServLoc.SETFILTER("Synchronized On", '<>%1', 0DT);
      IF (NOT DPTSubsiteServLoc.FINDSET) THEN
        EXIT;
      GetAuthorisationDescriptions(Language, AuthorisationDescription);

      REPEAT
        ServiceResponsiblePersonDPT.SETRANGE("Source Type", ServiceResponsiblePersonDPT."Source Type"::ServLocation);
        ServiceResponsiblePersonDPT.SETRANGE("Source Code", ServiceLocation."No.");
        IF (ServiceResponsiblePersonDPT.FINDSET) THEN BEGIN
          SetDotNetLocationSubsite(DPTSubsiteServLoc, Language);
          REPEAT
            SetDotNetServiceResponsiblePerson(ServiceResponsiblePersonDPT);
            AddServiceResponsiblePersonPermissionsToDotNetResponsiblePerson(ServiceResponsiblePersonDPT, DPTSubsiteServLoc.Code, AuthorisationDescription);
            GetEmployee(Employee, ServiceResponsiblePersonDPT."Employee No.");
            DotNetLocationSubsite.ResponsiblePersons.Add(DotNetResponsiblePerson);
          UNTIL (ServiceResponsiblePersonDPT.NEXT = 0);
          AddDocumentTypesToDotNetLocationSubsite(DPTSubsiteServLoc);
          DotNetLocationSite.SubSites.Add(DotNetLocationSubsite);
        END;
      UNTIL (DPTSubsiteServLoc.NEXT = 0);
    END;

    LOCAL PROCEDURE AddDotNetResponsiblePersonsToDotNetProjectSubsite@1100528369(Job@1100528300 : Record 11072003;Language@1100528301 : Record 8);
    VAR
      ProjectResponsiblePerson@1100528302 : Record 11012040;
      DPTSubsiteProject@1100528305 : Record 11072330;
      Employee@1100528309 : Record 5200;
      AuthorisationDescription@1100528306 : ARRAY [10] OF Text;
    BEGIN
      DPTSubsiteProject.SETRANGE("Project No.", Job."No.");
      DPTSubsiteProject.SETFILTER("Synchronized On", '<>%1', 0DT);
      DPTSubsiteProject.SETRANGE("Quote Request Subsite", FALSE);
      IF (NOT DPTSubsiteProject.FINDSET) THEN
        EXIT;
      GetAuthorisationDescriptions(Language, AuthorisationDescription);

      REPEAT
        ProjectResponsiblePerson.SETRANGE("Project No.", DPTSubsiteProject."Project No.");
        IF (ProjectResponsiblePerson.FINDSET) THEN BEGIN
          SetDotNetProjectSubsite(DPTSubsiteProject, Language);
          REPEAT
            SetDotNetProjectResponsiblePerson(ProjectResponsiblePerson);
            AddProjectResponsiblePersonPermissionsToDotNetResponsiblePerson(ProjectResponsiblePerson, DPTSubsiteProject.Code, AuthorisationDescription);
            GetEmployee(Employee, ProjectResponsiblePerson."Employee No.");
            DotNetProjectSubsite.ResponsiblePersons.Add(DotNetResponsiblePerson);
          UNTIL (ProjectResponsiblePerson.NEXT = 0);
          AddDocumentTypesToDotNetProjectSubsite(DPTSubsiteProject);
          DotNetProjectSite.SubSites.Add(DotNetProjectSubsite);
        END;
      UNTIL (DPTSubsiteProject.NEXT = 0);
    END;

    LOCAL PROCEDURE AddDotNetResponsiblePersonsToDotNetProjectSubsiteQuote@1100527805(Job@1100528300 : Record 11072003;Language@1100528301 : Record 8);
    VAR
      ProjectResponsiblePerson@1100528302 : Record 11012040;
      DPTSubsiteProject@1100528305 : Record 11072330;
      Employee@1100528309 : Record 5200;
      AuthorisationDescription@1100528306 : ARRAY [10] OF Text;
    BEGIN
      DPTSubsiteProject.SETRANGE("Project No.", Job."No.");
      DPTSubsiteProject.SETFILTER("Synchronized On", '<>%1', 0DT);
      DPTSubsiteProject.SETRANGE("Quote Request Subsite", TRUE);
      IF (NOT DPTSubsiteProject.FINDSET) THEN
        EXIT;
      GetAuthorisationDescriptions(Language, AuthorisationDescription);

      REPEAT
        ProjectResponsiblePerson.SETRANGE("Project No.", DPTSubsiteProject."Project No.");
        IF (ProjectResponsiblePerson.FINDSET) THEN BEGIN
          SetDotNetProjectSubsiteQuote(DPTSubsiteProject, Language);
          REPEAT
            SetDotNetProjectResponsiblePerson(ProjectResponsiblePerson);
            AddProjectResponsiblePersonPermissionsToDotNetResponsiblePerson(ProjectResponsiblePerson, DPTSubsiteProject.Code, AuthorisationDescription);
            GetEmployee(Employee, ProjectResponsiblePerson."Employee No.");
            DotNetProjectSubsiteQuote.ResponsiblePersons.Add(DotNetResponsiblePerson);
          UNTIL (ProjectResponsiblePerson.NEXT = 0);
          AddDocumentTypesToDotNetProjectSubsiteQuote(DPTSubsiteProject);
          DotNetProjectSite.SubSites.Add(DotNetProjectSubsiteQuote);
        END;
      UNTIL (DPTSubsiteProject.NEXT = 0);
    END;

    LOCAL PROCEDURE AddDotNetViewTemplateToDotNetLocationSubsite@1100525016(DPTSubsiteServLoc@1100525001 : Record 11072344);
    VAR
      DPTSubsiteDocTypeServLoc@1100525002 : Record 11072345;
      ViewCounter@1100525000 : Integer;
    BEGIN
      FOR ViewCounter := 1 TO 2 DO BEGIN
        SetDotNetViewTemplate(ViewCounter, DPTSubsiteServLoc.Code, '');
        DotNetLocationSubsite.ViewTemplates.Add(DotNetViewTemplate);
      END;
      IF (DPTSubsiteServLoc."Subsite Structure" <> DPTSubsiteServLoc."Subsite Structure"::OneDocLibrary) THEN BEGIN
        ViewCounter := 3;
        DPTSubsiteDocTypeServLoc.SETRANGE("Service Location No.", DPTSubsiteServLoc."Service Location No.");
        DPTSubsiteDocTypeServLoc.SETRANGE("Subsite Code", DPTSubsiteServLoc.Code);
        IF (DPTSubsiteDocTypeServLoc.FINDSET) THEN BEGIN
          REPEAT
            SetDotNetViewTemplate(ViewCounter, DPTSubsiteServLoc.Code, DPTSubsiteDocTypeServLoc."Document Type");
            DotNetLocationSubsite.ViewTemplates.Add(DotNetViewTemplate);
          UNTIL (DPTSubsiteDocTypeServLoc.NEXT = 0);
        END;
      END;
    END;

    LOCAL PROCEDURE AddDotNetViewTemplateToDotNetProjectSubsite@1100525015(DPTSubsiteProject@1100525001 : Record 11072330);
    VAR
      DPTSubsiteDocTypeProject@1100525002 : Record 11072331;
      ViewCounter@1100525000 : Integer;
    BEGIN
      FOR ViewCounter := 1 TO 2 DO BEGIN
        SetDotNetViewTemplate(ViewCounter, DPTSubsiteProject.Code, '');
        DotNetProjectSubsite.ViewTemplates.Add(DotNetViewTemplate);
      END;
      IF (DPTSubsiteProject."Subsite Structure" <> DPTSubsiteProject."Subsite Structure"::OneDocLibrary) THEN BEGIN
        ViewCounter := 3;
        DPTSubsiteDocTypeProject.SETRANGE("Project No.", DPTSubsiteProject."Project No.");
        DPTSubsiteDocTypeProject.SETRANGE("Subsite Code", DPTSubsiteProject.Code);
        IF (DPTSubsiteDocTypeProject.FINDSET) THEN BEGIN
          REPEAT
            SetDotNetViewTemplate(ViewCounter, DPTSubsiteProject.Code, DPTSubsiteDocTypeProject."Document Type");
            DotNetProjectSubsite.ViewTemplates.Add(DotNetViewTemplate);
          UNTIL (DPTSubsiteDocTypeProject.NEXT = 0);
        END;
      END;
    END;

    LOCAL PROCEDURE AddElementsToDotNetProjectSubsite@1100528330(Job@1100528301 : Record 11072003);
    VAR
      ProjectElement@1100528302 : Record 11012010;
    BEGIN
      ProjectElement.SETRANGE("Project No.", Job."No.");
      IF (NOT ProjectElement.FINDSET) THEN
        EXIT;

      REPEAT
        DotNetProjectSubsite.Elements.Add(ProjectElement.Element, ProjectElement.Description);
      UNTIL (ProjectElement.NEXT = 0);
    END;

    LOCAL PROCEDURE AddPlotsToDotNetProjectSubsite@1100527806(Job@1100528301 : Record 11072003);
    VAR
      Plot@1100527800 : Record 11012500;
    BEGIN
      IF (NOT Job."Housebuilding Project") THEN
        EXIT;

      Plot.SETRANGE("Project No.", Job."No.");
      IF (NOT Plot.FINDSET) THEN
        EXIT;

      REPEAT
        DotNetProjectSubsite.PlotNumbers.Add(Plot."Plot No.",Plot."Plot No.");
      UNTIL (Plot.NEXT = 0);
    END;

    LOCAL PROCEDURE AddMetaDataToDotNetSite@1100528392(Language@1100528303 : Record 8);
    VAR
      DPTMetadata@1100528301 : Record 11229825;
      DPTAdditionalData@1100525000 : Record 11229827;
      FieldType@1100528306 : Option;
    BEGIN
      DPTMetadata.SETRANGE("Source Type", DPTType);
      IF (NOT DPTMetadata.FINDSET) THEN
        EXIT;

      REPEAT
        FieldType := DPTMetadata."Refiner Type";
        IF (NOT DPTMetadata."Standard Data") THEN BEGIN
          DPTAdditionalData.GET(DPTMetadata."Source Type", DPTMetadata.Code);
          FieldType := DPTAdditionalData.Type;
        END;
        CASE FieldType OF
          2: BEGIN
            SetDotNetChoiceField(DPTMetadata, Language);
            CASE DPTType OF
              DPTType::Project: DotNetProjectSite.MetaData.Add(DotNetChoiceField);
              DPTType::ServiceLocation: DotNetLocationSite.MetaData.Add(DotNetChoiceField);
            END;
          END;
          3: BEGIN
            SetDotNetNumberField(DPTMetadata, Language);
            CASE DPTType OF
              DPTType::Project: DotNetProjectSite.MetaData.Add(DotNetNumberField);
              DPTType::ServiceLocation: DotNetLocationSite.MetaData.Add(DotNetNumberField);
            END;
          END;
          4: BEGIN
            SetDotNetDateTimeField(DPTMetadata, Language);
            CASE DPTType OF
              DPTType::Project: DotNetProjectSite.MetaData.Add(DotNetDateTimeField);
              DPTType::ServiceLocation: DotNetLocationSite.MetaData.Add(DotNetDateTimeField);
            END;
          END;
          ELSE BEGIN
            SetDotNetTextField(DPTMetadata, Language);
            CASE DPTType OF
              DPTType::Project: DotNetProjectSite.MetaData.Add(DotNetTextField);
              DPTType::ServiceLocation: DotNetLocationSite.MetaData.Add(DotNetTextField);
            END;
          END;
        END;
      UNTIL (DPTMetadata.NEXT = 0);
    END;

    LOCAL PROCEDURE AddProjectAuthorityPermissionsToDotNetAuthority@1100528372(ProjectAuthority@1100528303 : Record 11020216;SubsiteCode@1100528302 : Code[20];AuthorisationDescription@1100528301 : ARRAY [10] OF Text);
    VAR
      DPTAuthorityPermProject@1100528304 : Record 11072334;
      AddToList@1100528305 : Boolean;
    BEGIN
      DPTAuthorityPermProject.SETRANGE(Type, DPTAuthorityPermProject.Type::Access);
      DPTAuthorityPermProject.SETRANGE("Project No.", ProjectAuthority."Project No.");
      DPTAuthorityPermProject.SETRANGE("Authority Type", ProjectAuthority."Authority Type");
      DPTAuthorityPermProject.SETRANGE("Contact No.", ProjectAuthority."Contact No.");
      DPTAuthorityPermProject.SETRANGE("Contact Person No.", ProjectAuthority."Contact Person No.");
      DPTAuthorityPermProject.SETRANGE("Subsite Code", SubsiteCode);
      DPTAuthorityPermProject.SETFILTER("Permission Level", '<>%1', DPTAuthorityPermProject."Permission Level"::None);
      IF (SubsiteCode <> '') THEN
        DPTAuthorityPermProject.SETFILTER("Subsite Synced On", '<>%1', 0DT);
      IF (NOT DPTAuthorityPermProject.FINDSET) THEN
        EXIT;

      REPEAT
        DPTAuthorityPermProject.CALCFIELDS("Subsite Synced On", "Subsite Doc Type Synced On");
        AddToList :=
          (DPTAuthorityPermProject."Subsite Code" = '')  OR
          ((DPTAuthorityPermProject."Subsite Code" <> '') AND (DPTAuthorityPermProject."Document Type" = '') AND
           (DPTAuthorityPermProject."Subsite Synced On" <> 0DT)) OR
          ((DPTAuthorityPermProject."Subsite Code" <> '') AND (DPTAuthorityPermProject."Document Type" <> '') AND
           (DPTAuthorityPermProject."Subsite Doc Type Synced On" <> 0DT));

        IF (AddToList) THEN BEGIN
          CASE DPTAuthorityPermProject."Permission Level" OF
            DPTAuthorityPermProject."Permission Level"::Visitor:
              DotNetAuthority.UserPermissionGroups.Add(DPTAuthorityPermProject."Document Type", AuthorisationDescription[2]);
            DPTAuthorityPermProject."Permission Level"::Member:
              DotNetAuthority.UserPermissionGroups.Add(DPTAuthorityPermProject."Document Type", AuthorisationDescription[3]);
            ELSE
              DotNetAuthority.UserPermissionGroups.Add(DPTAuthorityPermProject."Document Type", AuthorisationDescription[1]);
          END;
        END;
      UNTIL (DPTAuthorityPermProject.NEXT = 0);
    END;

    LOCAL PROCEDURE AddProjectResponsiblePersonPermissionsToDotNetResponsiblePerson@1100528357(ProjectResponsiblePerson@1100528301 : Record 11012040;SubsiteCode@1100528307 : Code[20];AuthorisationDescription@1100528306 : ARRAY [10] OF Text);
    VAR
      DPTRespPersPermProject@1100528302 : Record 11072332;
      AddToList@1100528300 : Boolean;
    BEGIN
      DPTRespPersPermProject.SETRANGE(Type, DPTRespPersPermProject.Type::Access);
      DPTRespPersPermProject.SETRANGE("Project No.", ProjectResponsiblePerson."Project No.");
      DPTRespPersPermProject.SETRANGE("Line No.", ProjectResponsiblePerson."Line No.");
      DPTRespPersPermProject.SETRANGE("Subsite Code", SubsiteCode);
      DPTRespPersPermProject.SETFILTER("Permission Level", '<>%1', DPTRespPersPermProject."Permission Level"::None);
      IF (SubsiteCode <> '') THEN
        DPTRespPersPermProject.SETFILTER("Subsite Synced On", '<>%1', 0DT);
      IF (NOT DPTRespPersPermProject.FINDSET) THEN
        EXIT;

      REPEAT
        DPTRespPersPermProject.CALCFIELDS("Subsite Structure", "Subsite Synced On", "Subsite Doc Type Synced On");
        AddToList :=
          (DPTRespPersPermProject."Subsite Code" = '')  OR
          ((DPTRespPersPermProject."Subsite Code" <> '') AND (DPTRespPersPermProject."Document Type" = '') AND
           (DPTRespPersPermProject."Subsite Synced On" <> 0DT)) OR
          ((DPTRespPersPermProject."Subsite Code" <> '') AND (DPTRespPersPermProject."Document Type" <> '') AND
           (DPTRespPersPermProject."Subsite Doc Type Synced On" <> 0DT));

        IF (AddToList) THEN BEGIN
          CASE DPTRespPersPermProject."Permission Level" OF
            DPTRespPersPermProject."Permission Level"::Visitor:
              DotNetResponsiblePerson.UserPermissionGroups.Add(DPTRespPersPermProject."Document Type", AuthorisationDescription[2]);
            DPTRespPersPermProject."Permission Level"::Member:
              DotNetResponsiblePerson.UserPermissionGroups.Add(DPTRespPersPermProject."Document Type", AuthorisationDescription[3]);
            DPTRespPersPermProject."Permission Level"::Owner:
              DotNetResponsiblePerson.UserPermissionGroups.Add(DPTRespPersPermProject."Document Type", AuthorisationDescription[4]);
            ELSE
              DotNetResponsiblePerson.UserPermissionGroups.Add(DPTRespPersPermProject."Document Type", AuthorisationDescription[1]);
          END;
        END;

        IF (DPTRespPersPermProject."Subsite Code" <> '') AND (DPTRespPersPermProject."Document Type" = '') AND
           (DPTRespPersPermProject."Private Permission Level" <> DPTRespPersPermProject."Private Permission Level"::None)
        THEN BEGIN
          CASE DPTRespPersPermProject."Permission Level" OF
            DPTRespPersPermProject."Permission Level"::Visitor:
              DotNetResponsiblePerson.UserPermissionGroups.Add(PRIVATEPERMISSIONCOMPANYTEXT, AuthorisationDescription[2]);
            DPTRespPersPermProject."Permission Level"::Member:
              DotNetResponsiblePerson.UserPermissionGroups.Add(PRIVATEPERMISSIONCOMPANYTEXT, AuthorisationDescription[3]);
            DPTRespPersPermProject."Permission Level"::Owner:
              DotNetResponsiblePerson.UserPermissionGroups.Add(PRIVATEPERMISSIONCOMPANYTEXT, AuthorisationDescription[4]);
            ELSE
              DotNetResponsiblePerson.UserPermissionGroups.Add(PRIVATEPERMISSIONCOMPANYTEXT, AuthorisationDescription[1]);
          END;
        END;
      UNTIL (DPTRespPersPermProject.NEXT = 0);
    END;

    LOCAL PROCEDURE AddSearchCenterToDotNetLandingPage@1100528439();
    BEGIN
      SetDotNetSearchCenter(DPTType);
      DotNetLandingPage.SearchCenter := DotnetSearchCenter;
    END;

    LOCAL PROCEDURE AddSearchCenterToDotNetLocationSite@1100528457();
    BEGIN
      SetDotNetSearchCenter(DPTType);
      DotNetLocationSite.SearchCenter := DotnetSearchCenter;
    END;

    LOCAL PROCEDURE AddSearchCenterToDotNetProjectSite@1100528428();
    BEGIN
      SetDotNetSearchCenter(DPTType);
      DotNetProjectSite.SearchCenter := DotnetSearchCenter;
    END;

    LOCAL PROCEDURE AddServiceAuthorityPermissionsToDotNetAuthority@1100528477(ServiceAuthorityDPT@1100528303 : Record 11072298;SubsiteCode@1100528302 : Code[20];AuthorisationDescription@1100528301 : ARRAY [10] OF Text);
    VAR
      DPTAuthorityPermServLoc@1100528304 : Record 11072343;
      AddToList@1100528305 : Boolean;
    BEGIN
      DPTAuthorityPermServLoc.SETRANGE(Type, DPTAuthorityPermServLoc.Type::Access);
      DPTAuthorityPermServLoc.SETRANGE("Service Location No.", ServiceAuthorityDPT."Source Code");
      DPTAuthorityPermServLoc.SETRANGE("Authority Type", ServiceAuthorityDPT."Authority Type");
      DPTAuthorityPermServLoc.SETRANGE("Contact No.", ServiceAuthorityDPT."Contact No.");
      DPTAuthorityPermServLoc.SETRANGE("Contact Person No.", ServiceAuthorityDPT."Contact Person No.");
      DPTAuthorityPermServLoc.SETRANGE("Subsite Code", SubsiteCode);
      DPTAuthorityPermServLoc.SETFILTER("Permission Level", '<>%1', DPTAuthorityPermServLoc."Permission Level"::None);
      IF (SubsiteCode <> '') THEN
        DPTAuthorityPermServLoc.SETFILTER("Subsite Synced On", '<>%1', 0DT);
      IF (NOT DPTAuthorityPermServLoc.FINDSET) THEN
        EXIT;

      REPEAT
        DPTAuthorityPermServLoc.CALCFIELDS("Subsite Synced On", "Subsite Doc Type Synced On");
        AddToList :=
          (DPTAuthorityPermServLoc."Subsite Code" = '')  OR
          ((DPTAuthorityPermServLoc."Subsite Code" <> '') AND (DPTAuthorityPermServLoc."Document Type" = '') AND
           (DPTAuthorityPermServLoc."Subsite Synced On" <> 0DT)) OR
          ((DPTAuthorityPermServLoc."Subsite Code" <> '') AND (DPTAuthorityPermServLoc."Document Type" <> '') AND
           (DPTAuthorityPermServLoc."Subsite Doc Type Synced On" <> 0DT));

        IF (AddToList) THEN BEGIN
          CASE DPTAuthorityPermServLoc."Permission Level" OF
            DPTAuthorityPermServLoc."Permission Level"::Visitor:
              DotNetAuthority.UserPermissionGroups.Add(DPTAuthorityPermServLoc."Document Type", AuthorisationDescription[2]);
            DPTAuthorityPermServLoc."Permission Level"::Member:
              DotNetAuthority.UserPermissionGroups.Add(DPTAuthorityPermServLoc."Document Type", AuthorisationDescription[3]);
            ELSE
              DotNetAuthority.UserPermissionGroups.Add(DPTAuthorityPermServLoc."Document Type", AuthorisationDescription[1]);
          END;
        END;
      UNTIL (DPTAuthorityPermServLoc.NEXT = 0);
    END;

    LOCAL PROCEDURE AddServiceResponsiblePersonPermissionsToDotNetResponsiblePerson@1100528481(ServiceResponsiblePersonDPT@1100528301 : Record 11072297;SubsiteCode@1100528307 : Code[20];AuthorisationDescription@1100528306 : ARRAY [10] OF Text);
    VAR
      DPTRespPersPermServLoc@1100528302 : Record 11072340;
      AddToList@1100528300 : Boolean;
    BEGIN
      DPTRespPersPermServLoc.SETRANGE(Type, DPTRespPersPermServLoc.Type::Access);
      DPTRespPersPermServLoc.SETRANGE("Service Location No.", ServiceResponsiblePersonDPT."Source Code");
      DPTRespPersPermServLoc.SETRANGE("Line No.", ServiceResponsiblePersonDPT."Line No.");
      DPTRespPersPermServLoc.SETRANGE("Subsite Code", SubsiteCode);
      DPTRespPersPermServLoc.SETFILTER("Permission Level", '<>%1', DPTRespPersPermServLoc."Permission Level"::None);
      IF (SubsiteCode <> '') THEN
        DPTRespPersPermServLoc.SETFILTER("Subsite Synced On", '<>%1', 0DT);
      IF (NOT DPTRespPersPermServLoc.FINDSET) THEN
        EXIT;

      REPEAT
        DPTRespPersPermServLoc.CALCFIELDS("Subsite Structure", "Subsite Synced On", "Subsite Doc Type Synced On");
        AddToList :=
          (DPTRespPersPermServLoc."Subsite Code" = '')  OR
          ((DPTRespPersPermServLoc."Subsite Code" <> '') AND (DPTRespPersPermServLoc."Document Type" = '') AND
           (DPTRespPersPermServLoc."Subsite Synced On" <> 0DT)) OR
          ((DPTRespPersPermServLoc."Subsite Code" <> '') AND (DPTRespPersPermServLoc."Document Type" <> '') AND
           (DPTRespPersPermServLoc."Subsite Doc Type Synced On" <> 0DT));

        IF (AddToList) THEN BEGIN
          CASE DPTRespPersPermServLoc."Permission Level" OF
            DPTRespPersPermServLoc."Permission Level"::Visitor:
              DotNetResponsiblePerson.UserPermissionGroups.Add(DPTRespPersPermServLoc."Document Type", AuthorisationDescription[2]);
            DPTRespPersPermServLoc."Permission Level"::Member:
              DotNetResponsiblePerson.UserPermissionGroups.Add(DPTRespPersPermServLoc."Document Type", AuthorisationDescription[3]);
            DPTRespPersPermServLoc."Permission Level"::Owner:
              DotNetResponsiblePerson.UserPermissionGroups.Add(DPTRespPersPermServLoc."Document Type", AuthorisationDescription[4]);
            ELSE
              DotNetResponsiblePerson.UserPermissionGroups.Add(DPTRespPersPermServLoc."Document Type", AuthorisationDescription[1]);
          END;
        END;

        IF (DPTRespPersPermServLoc."Subsite Code" <> '') AND (DPTRespPersPermServLoc."Document Type" = '') AND
           (DPTRespPersPermServLoc."Private Permission Level" <> DPTRespPersPermServLoc."Private Permission Level"::None)
        THEN BEGIN
          CASE DPTRespPersPermServLoc."Permission Level" OF
            DPTRespPersPermServLoc."Permission Level"::Visitor:
              DotNetResponsiblePerson.UserPermissionGroups.Add(PRIVATEPERMISSIONCOMPANYTEXT, AuthorisationDescription[2]);
            DPTRespPersPermServLoc."Permission Level"::Member:
              DotNetResponsiblePerson.UserPermissionGroups.Add(PRIVATEPERMISSIONCOMPANYTEXT, AuthorisationDescription[3]);
            DPTRespPersPermServLoc."Permission Level"::Owner:
              DotNetResponsiblePerson.UserPermissionGroups.Add(PRIVATEPERMISSIONCOMPANYTEXT, AuthorisationDescription[4]);
            ELSE
              DotNetResponsiblePerson.UserPermissionGroups.Add(PRIVATEPERMISSIONCOMPANYTEXT, AuthorisationDescription[1]);
          END;
        END;
      UNTIL (DPTRespPersPermServLoc.NEXT = 0);
    END;

    LOCAL PROCEDURE AddSubsitesToDotNetProjectSite@1100528333(Job@1100528300 : Record 11072003;Language@1100528305 : Record 8;OnlySyncedData@1100528301 : Boolean);
    VAR
      DPTSubsiteProject@1100528302 : Record 11072330;
    BEGIN
      DPTSubsiteProject.SETRANGE("Project No.", Job."No.");
      IF (OnlySyncedData) THEN
        DPTSubsiteProject.SETFILTER("Synchronized On", '<>%1', 0DT);
      IF (NOT DPTSubsiteProject.FINDSET) THEN
        EXIT;

      REPEAT
        IF (DPTSubsiteProject."Quote Request Subsite") THEN BEGIN
          SetDotNetProjectSubsiteQuote(DPTSubsiteProject, Language);
          AddDocumentTypesToDotNetProjectSubsiteQuote(DPTSubsiteProject);
          DotNetProjectSite.SubSites.Add(DotNetProjectSubsiteQuote);
        END ELSE BEGIN
          SetDotNetProjectSubsite(DPTSubsiteProject, Language);
          AddDocumentTypesToDotNetProjectSubsite(DPTSubsiteProject);
          AddElementsToDotNetProjectSubsite(Job);
          AddPlotsToDotNetProjectSubsite(Job);
          AddDotNetViewTemplateToDotNetProjectSubsite(DPTSubsiteProject);
          DotNetProjectSite.SubSites.Add(DotNetProjectSubsite);
        END;
      UNTIL (DPTSubsiteProject.NEXT = 0);
    END;

    LOCAL PROCEDURE AddSubsitesToDotNetLocationSite@1100528447(ServiceLocation@1100528300 : Record 11012801;Language@1100528305 : Record 8;OnlySyncedData@1100528301 : Boolean);
    VAR
      DPTSubsiteServLoc@1100528302 : Record 11072344;
    BEGIN
      DPTSubsiteServLoc.SETRANGE("Service Location No.", ServiceLocation."No.");
      IF (OnlySyncedData) THEN
        DPTSubsiteServLoc.SETFILTER("Synchronized On", '<>%1', 0DT);
      IF (NOT DPTSubsiteServLoc.FINDSET) THEN
        EXIT;

      REPEAT
        SetDotNetLocationSubsite(DPTSubsiteServLoc, Language);
        AddDocumentTypesToDotNetLocationSubsite(DPTSubsiteServLoc);
        AddDotNetViewTemplateToDotNetLocationSubsite(DPTSubsiteServLoc);
        DotNetLocationSite.SubSites.Add(DotNetLocationSubsite);
      UNTIL (DPTSubsiteServLoc.NEXT = 0);
    END;

    LOCAL PROCEDURE CheckAdditionalData@1100528399(DPTMetadata@1100528301 : Record 11229825;SourceTable@1100528300 : Variant);
    VAR
      Language@1100528302 : Record 8;
      DPTAdditionalData@1100528304 : Record 11229827;
      Job@1100528306 : Record 11072003;
      ServiceLocation@1100525000 : Record 11012801;
    BEGIN
      DPTAdditionalData.SETRANGE("Source Type", DPTMetadata."Source Type");
      DPTAdditionalData.SETRANGE(Code, DPTMetadata.Code);
      IF (NOT DPTAdditionalData.FINDSET) THEN BEGIN
        LogErrorMessage(DPTAdditionalData.RECORDID, 0);
        EXIT;
      END;
      CASE DPTMetadata."Source Type" OF
        DPTMetadata."Source Type"::Project: BEGIN
          Job := SourceTable;
          GetLanguage(Language, SourceTable);
        END;
        DPTMetadata."Source Type"::ServiceLocation: BEGIN
          ServiceLocation := SourceTable;
          GetLanguage(Language, SourceTable);
        END;
        ELSE ERROR(Text006);
      END;

      REPEAT
        IF (NOT TestDPTAdditionalDataType(DPTAdditionalData)) THEN
          LogErrorMessage(DPTAdditionalData.RECORDID, DPTAdditionalData.FIELDNO(Type));
        CASE DPTAdditionalData.Type OF
          DPTAdditionalData.Type::DateTime: BEGIN
            IF (NOT TestDPTAdditionalDataDateTimeFormat(DPTAdditionalData)) THEN
              LogErrorMessage(DPTAdditionalData.RECORDID, DPTAdditionalData.FIELDNO("DateTime Format"));
          END;
          DPTAdditionalData.Type::Option: BEGIN
            IF (NOT TestDPTAdditionalDataOptionGet(DPTAdditionalData, Language)) THEN
              LogErrorMessage(DPTAdditionalData.RECORDID, DPTAdditionalData.FIELDNO(Code));
          END;
          //DPTAdditionalData.Type::Value: BEGIN  //not mandatory
          //  IF (NOT TestDPTAdditionalDataMaximumValue(DPTAdditionalData);
          //    LogErrorMessage(DPTAdditionalData.RECORDID, DPTAdditionalData.FIELDNO("Maximum Value"));
          //  IF (NOT TestDPTAdditionalDataMinimumValue(DPTAdditionalData);
          //    LogErrorMessage(DPTAdditionalData.RECORDID, DPTAdditionalData.FIELDNO("Minimum Value"));
          //END;
        END;
      UNTIL (DPTAdditionalData.NEXT = 0);
    END;

    LOCAL PROCEDURE CheckDPTSetupLocal@1100528427();
    BEGIN
      ShowProgress(GetCheckText, DPTSetup.RECORDID, '');
      IF (NOT TestDPTSetupSharepointVersion) THEN
        LogErrorMessage(DPTSetup.RECORDID, DPTSetup.FIELDNO("SharePoint Version"));
      IF (NOT TestDPTSetupPortalURL) THEN
        LogErrorMessage(DPTSetup.RECORDID, DPTSetup.FIELDNO("Portal URL"));
      IF (NOT TestDPTSetupAppID) THEN
        LogErrorMessage(DPTSetup.RECORDID, DPTSetup.FIELDNO("App ID"));
      IF (NOT TestDPTSetupAppSecret) THEN
        LogErrorMessage(DPTSetup.RECORDID, DPTSetup.FIELDNO("App Secret"));
      IF (NOT TestDPTSetupAppURL) THEN
        LogErrorMessage(DPTSetup.RECORDID, DPTSetup.FIELDNO("Proxy URL"));
      IF (NOT TestDPTSetupLanguageCode) THEN
        LogErrorMessage(DPTSetup.RECORDID, DPTSetup.FIELDNO("Language Code"));
      IF (DPTSetup."Send Anonymous Analytics Data") THEN BEGIN
        IF (NOT TestDPTSetupInstrumentationKey) THEN
          LogErrorMessage(DPTSetup.RECORDID, DPTSetup.FIELDNO("Instrumentation Key"));
      END;
      IF (NOT TestDPTSetupTimeZone) THEN
        LogErrorMessage(DPTSetup.RECORDID, DPTSetup.FIELDNO("Time Zone ID"));
      CASE DPTSetup."SharePoint Version" OF
        (DPTSetup."SharePoint Version"::"Sharepoint Online"): BEGIN
          IF (NOT TestDPTSetupAzureADClientID) THEN
            LogErrorMessage(DPTSetup.RECORDID, DPTSetup.FIELDNO("Azure AD App ID"));
          IF (NOT TestDPTSetupGuestSiteURL) THEN
            LogErrorMessage(DPTSetup.RECORDID, DPTSetup.FIELDNO("Guest Site URL"));
          IF (NOT TestDPTSetupGuestGroupName) THEN
            LogErrorMessage(DPTSetup.RECORDID, DPTSetup.FIELDNO("Guest Group Name"));
          IF (NOT TestDPTSetupSiteAdminUser) THEN
            LogErrorMessage(DPTSetup.RECORDID, DPTSetup.FIELDNO("Site Admin User"));
          IF (NOT TestDPTSetupSiteAdminPassword) THEN
            LogErrorMessage(DPTSetup.RECORDID, DPTSetup.FIELDNO("Site Admin Password"));
        END;
        ELSE BEGIN
          IF (NOT TestDPTSetupIssuerID) THEN
            LogErrorMessage(DPTSetup.RECORDID, DPTSetup.FIELDNO("Issuer ID"));
          IF (NOT TestDPTSetupIssuerCertificateThumbprint) THEN
            LogErrorMessage(DPTSetup.RECORDID, DPTSetup.FIELDNO("Issuer Certificate Thumbprint"));
          IF (NOT TestDPTSetupFileTransferPageURL) THEN
            LogErrorMessage(DPTSetup.RECORDID, DPTSetup.FIELDNO("File Transfer Site URL"));
        END;
      END;
    END;

    LOCAL PROCEDURE CheckLicense@1100528318();
    VAR
      LicensePermission@1100528300 : Record 2000000043;
      StringFunctions@1100528301 : Codeunit 11012273;
    BEGIN
      CASE DPTType OF
        DPTType::Project: BEGIN
          IF (NOT LicensePermission.GET(LicensePermission."Object Type"::Codeunit, CODEUNIT::"DPT Interface Project")) THEN
            ERROR(Text005, DPTSetup.FIELDCAPTION("Use Project Portal")+': Get');
          IF (LicensePermission."Execute Permission" = LicensePermission."Execute Permission"::" ") THEN
            ERROR(Text005, DPTSetup.FIELDCAPTION("Use Project Portal")+': '+LicensePermission.FIELDCAPTION("Execute Permission"));
        END;
        DPTType::ServiceLocation: BEGIN
          IF (NOT LicensePermission.GET(LicensePermission."Object Type"::Codeunit, CODEUNIT::"DPT Interface ServLoc")) THEN
            ERROR(Text005, DPTSetup.FIELDCAPTION("Use Location Portal")+': Get');
          IF (LicensePermission."Execute Permission" = LicensePermission."Execute Permission"::" ") THEN
            ERROR(Text005, DPTSetup.FIELDCAPTION("Use Location Portal")+': '+LicensePermission.FIELDCAPTION("Execute Permission"));
        END;
        ELSE
          ERROR(Text006);
      END;
      DPTSetup.GET;
      LF := StringFunctions.LineFeed;
      CR := StringFunctions.CarriageReturn;
    END;

    LOCAL PROCEDURE CheckUserLocal@1100528420();
    VAR
      User@1100528300 : Record 2000000120;
    BEGIN
      IF (NOT TestUserGet(User)) THEN BEGIN
        IF (IsNSTUserID(User)) THEN
          EXIT;
        LogErrorMessage(User.RECORDID, User.FIELDNO("User Security ID"));
      END;
      IF (IsNSTUserID(User)) THEN
        EXIT;

      ShowProgress(GetCheckText, User.RECORDID, '');
      IF (NOT TestUserSetupEmployeeNo(User)) THEN
        LogErrorMessage(User.RECORDID, User.FIELDNO("User Security ID"));
      IF (NOT TestUserSetupCount(User)) THEN
        LogErrorMessage(User.RECORDID, User.FIELDNO("User Security ID"));
      CASE DPTSetup."SharePoint Version" OF
        DPTSetup."SharePoint Version"::"Sharepoint Online": BEGIN
          IF (NOT TestUserAuthenticationEmail(User)) THEN
            LogErrorMessage(User.RECORDID, User.FIELDNO("Authentication Email"));
        END;
        ELSE BEGIN
          //Add Checks here
          //IF (NOT TestUserAuthenticationEmail(User)) THEN
          //  LogErrorMessage(User.RECORDID, User.FIELDNO("Authentication Email"));
        END;
      END;
    END;

    LOCAL PROCEDURE CreateEmailBodyProjectAuthority@1100528383(Job@1100528306 : Record 11072003;Contact@1100528308 : Record 5050;VAR SubjectText@1100528311 : Text;VAR BodyText@1100528312 : Text);
    VAR
      Language@1100528302 : Record 8;
      ProjectAuthority@1100528300 : Record 11020216;
      MailTemplateManagement@1100528304 : Codeunit 11012622;
      MailTemplateNo@1100528301 : Integer;
    BEGIN
      MailTemplateNo := 62;
      GetLanguage(Language, Job);
      ProjectAuthority.INIT;
      ProjectAuthority."Project No." := Job."No.";
      ProjectAuthority."Contact No." := Contact."No.";
      MailTemplateManagement.GetLayoutTextSubstitutedSubjectAndTotalBody(MailTemplateNo, Language.Code, ProjectAuthority, SubjectText, BodyText);
    END;

    LOCAL PROCEDURE CreateEmailBodyServiceAuthority@1100528462(ServiceLocation@1100528306 : Record 11012801;Contact@1100528308 : Record 5050;VAR SubjectText@1100528304 : Text;VAR BodyText@1100528300 : Text) : Text;
    VAR
      Language@1100528302 : Record 8;
      ServiceAuthorityDPT@1100528303 : Record 11072298;
      MailTemplateManagement@1100528305 : Codeunit 11012622;
      MailTemplateNo@1100528307 : Integer;
    BEGIN
      MailTemplateNo:= 60;
      GetLanguage(Language, ServiceLocation);
      ServiceAuthorityDPT.INIT;
      ServiceAuthorityDPT."Source Type" := ServiceAuthorityDPT."Source Type"::ServLocation;
      ServiceAuthorityDPT."Source Code" := ServiceLocation."No.";
      ServiceAuthorityDPT."Contact No." := Contact."No.";
      MailTemplateManagement.GetLayoutTextSubstitutedSubjectAndTotalBody(MailTemplateNo, Language.Code, ServiceAuthorityDPT, SubjectText, BodyText);
    END;

    LOCAL PROCEDURE CreateEmailBodyProjectResponsiblePerson@1100528375(Job@1100528306 : Record 11072003;Employee@1100528307 : Record 5200;VAR SubjectText@1100528309 : Text;VAR BodyText@1100528308 : Text) : Text;
    VAR
      Language@1100528302 : Record 8;
      ProjectResponsiblePerson@1100528303 : Record 11012040;
      MailTemplateManagement@1100528301 : Codeunit 11012622;
      MailTemplateNo@1100528304 : Integer;
    BEGIN
      MailTemplateNo := 61;
      GetLanguage(Language, Job);
      ProjectResponsiblePerson.INIT;
      ProjectResponsiblePerson."Project No." := Job."No.";
      ProjectResponsiblePerson."Employee No." := Employee."No.";
      MailTemplateManagement.GetLayoutTextSubstitutedSubjectAndTotalBody(MailTemplateNo, Language.Code, ProjectResponsiblePerson, SubjectText, BodyText);
    END;

    LOCAL PROCEDURE CreateEmailBodyServiceResponsiblePerson@1100528463(ServiceLocation@1100528306 : Record 11012801;Employee@1100528307 : Record 5200;VAR SubjectText@1100528304 : Text;VAR BodyText@1100528301 : Text) : Text;
    VAR
      Language@1100528302 : Record 8;
      ServiceResponsiblePersonDPT@1100528303 : Record 11072297;
      MailTemplateManagement@1100528305 : Codeunit 11012622;
      MailTemplateNo@1100528308 : Integer;
    BEGIN
      MailTemplateNo := 59;
      GetLanguage(Language, ServiceLocation);
      ServiceResponsiblePersonDPT.INIT;
      ServiceResponsiblePersonDPT."Source Type" := ServiceResponsiblePersonDPT."Source Type"::ServLocation;
      ServiceResponsiblePersonDPT."Source Code" := ServiceLocation."No.";
      ServiceResponsiblePersonDPT."Employee No." := Employee."No.";
      MailTemplateManagement.GetLayoutTextSubstitutedSubjectAndTotalBody(MailTemplateNo, Language.Code, ServiceResponsiblePersonDPT, SubjectText, BodyText);
    END;

    [TryFunction]
    LOCAL PROCEDURE CreateFileTransferPage@1100525012(Language@1100528302 : Record 8;User@1100528305 : Record 2000000120);
    BEGIN
      IF (DPTSetup."SharePoint Version" = DPTSetup."SharePoint Version"::"Sharepoint Online") THEN
        EXIT;
      CLEAR(DotNetLandingsPageProvisioningService);
      DotNetLandingsPageProvisioningService := DotNetDPTServiceFactory.CreatelandingsPageSynchronizationService;
      SetDotNetFileTransferPage(Language, User);
      DotNetLandingsPageProvisioningService.SyncFileTransferPage(DotNetFileTransferPage);
    END;

    [TryFunction]
    LOCAL PROCEDURE CreateGuestPortal@1100525010(Language@1100528302 : Record 8;User@1100528305 : Record 2000000120);
    BEGIN
      CLEAR(DotNetProvisioningService);
      DotNetProvisioningService := DotNetDPTServiceFactory.CreateProvisioningService;
      SetDotNetGuestPortal(Language, User);
      DotNetProvisioningService.SyncGuestPortalSite(DotNetGuestPortal);
    END;

    LOCAL PROCEDURE CreateHeaderPictureFullPath@1100529900(SourceTable@1100529900 : Variant) : Text;
    VAR
      Job@1100528302 : Record 11072003;
      ServiceLocation@1100529901 : Record 11012801;
      FullFileName@1100528306 : Text;
    BEGIN
      CASE DPTType OF
        DPTType::Project:
          BEGIN
            Job := SourceTable;
            IF (NOT Job.Image.HASVALUE) THEN
              EXIT('');
            FullFileName := STRSUBSTNO('%1__%2_%3', COMPANYNAME, Job."No.", HEADERPICTURENAMETEXT);
          END;
        DPTType::ServiceLocation:
          BEGIN
            ServiceLocation := SourceTable;
            IF (NOT ServiceLocation.Image.HASVALUE) THEN
              EXIT('');
            FullFileName := STRSUBSTNO('%1__%2_%3', COMPANYNAME, ServiceLocation."No.", HEADERPICTURENAMETEXT);
          END;
      END;
      EXIT(FullFileName);
    END;

    LOCAL PROCEDURE CreateHeaderPictureStream@1100528382(SourceTable@1100529900 : Variant);
    VAR
      Job@1100528302 : Record 11072003;
      ServiceLocation@1100529901 : Record 11012801;
      TempBlob@1100528304 : TEMPORARY Record 99008535;
      IStream@1100528305 : InStream;
      OStream@1100528301 : OutStream;
    BEGIN
      MemoryStreamHeaderPicture := MemoryStreamHeaderPicture.MemoryStream();

      CASE DPTType OF
        DPTType::Project:
          BEGIN
            Job := SourceTable;
            IF (NOT Job.Image.HASVALUE) THEN
              EXIT;
            Job.Image.EXPORTSTREAM(MemoryStreamHeaderPicture);
          END;
        DPTType::ServiceLocation:
          BEGIN
            ServiceLocation := SourceTable;
            IF (NOT ServiceLocation.Image.HASVALUE) THEN
              EXIT;
            ServiceLocation.Image.EXPORTSTREAM(MemoryStreamHeaderPicture);
          END;
      END;
    END;

    [TryFunction]
    LOCAL PROCEDURE CreateLandingPage@1100528433(Language@1100528302 : Record 8;User@1100528305 : Record 2000000120);
    BEGIN
      CLEAR(DotNetLandingsPageProvisioningService);
      DotNetLandingsPageProvisioningService := DotNetDPTServiceFactory.CreatelandingsPageSynchronizationService;
      SetDotNetLandingPage(Language, User);
      DotNetLandingsPageProvisioningService.SyncLandingspage(DotNetLandingPage);
    END;

    LOCAL PROCEDURE CreateLogoFileFullPath@1100528381() : Text;
    VAR
      CompanyInformation@1100528302 : Record 79;
      FullFileName@1100528306 : Text;
      IStream@1100528300 : InStream;
    BEGIN
      CompanyInformation.GET;
      CompanyInformation.CALCFIELDS(Picture);
      IF (NOT CompanyInformation.Picture.HASVALUE) THEN
        EXIT('');
      FullFileName := STRSUBSTNO('%1__%2', COMPANYNAME, COMPANYFILENAMETEXT);
      EXIT(FullFileName);
    END;

    LOCAL PROCEDURE CreateLogoStream@1100525009();
    VAR
      CompanyInformation@1100528302 : Record 79;
      IStream@1100528300 : InStream;
    BEGIN
      CompanyInformation.GET;
      CompanyInformation.CALCFIELDS(Picture);
      IF (NOT CompanyInformation.Picture.HASVALUE) THEN
        EXIT;
      CompanyInformation.Picture.CREATEINSTREAM(IStream);
      MemoryStreamCompanyLogo := MemoryStreamCompanyLogo.MemoryStream();
      COPYSTREAM(MemoryStreamCompanyLogo, IStream);
    END;

    [TryFunction]
    LOCAL PROCEDURE DownloadDocumentByMemoryStream@1100527907(ProjectSiteURL@1100527801 : Text;Subsite@1100527802 : Text;WebLink@1100527803 : Text;CheckOut@1100527804 : Boolean;MemoryStream@1100527805 : DotNet "'mscorlib'.System.IO.MemoryStream");
    VAR
      DotNetDPTServiceFactoryLocal@1100527800 : DotNet "'Fps.Dpt.Nav, Version=4.0.10.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.Fps.Dpt.Nav.DptServiceFactory";
      DotNetSynchronizationServiceLocal@1100527806 : DotNet "'Fps.Dpt.Nav, Version=4.0.10.0, Culture=neutral, PublicKeyToken=284c6828aa038142'.Fps.Dpt.Nav.SynchronizationService";
    BEGIN
      CheckLicense;
      SetDotNetDPTSettings;
      DotNetDPTServiceFactoryLocal := DotNetDPTServiceFactory.DptServiceFactory(DotNetDPTSettings);
      DotNetSynchronizationServiceLocal := DotNetDPTServiceFactoryLocal.CreateSynchronizationService;

      DotNetSynchronizationServiceLocal.DownloadDocumentStream(ProjectSiteURL,
                                                              Subsite,
                                                              WebLink,
                                                              CheckOut,
                                                              MemoryStream);

      CLEAR(DotNetDPTServiceFactoryLocal);
      CLEAR(DotNetSynchronizationServiceLocal);
    END;

    LOCAL PROCEDURE GetAuthorisationDescriptions@1100528363(Language@1100528301 : Record 8;VAR AuthorisationDescription@1100528302 : ARRAY [10] OF Text);
    VAR
      SaveLanguageId@1100528300 : Integer;
      StringFunctions@1100528305 : Codeunit 11012273;
      RecRef@1100528303 : RecordRef;
      FieldRef@1100528304 : FieldRef;
      I@1100528306 : Integer;
    BEGIN
      SaveLanguageId := GLOBALLANGUAGE;
      RecRef.OPEN(DATABASE::"DPT Def Resp Pers Perm Project");
      FieldRef := RecRef.FIELD(50); //Permission Level
      GLOBALLANGUAGE(Language."Windows Language ID");
      CLEAR(ArrayList);
      StringFunctions.SplitString2(FieldRef.OPTIONCAPTION, ',', ArrayList);
      GLOBALLANGUAGE(SaveLanguageId);

      FOR I := 0 TO ArrayList.Count - 1 DO BEGIN
        AuthorisationDescription[I + 1] := ArrayList.Item(I);
      END;
    END;

    LOCAL PROCEDURE GetCommentLines@1100529402(DocumentNo@1100529400 : Code[20]) : Text;
    VAR
      CommentLine@1100529401 : Record 97;
      CommentText@1100529403 : Text;
    BEGIN
      CommentLine.SETRANGE("Table Name", CommentLine."Table Name"::"Document Properties");
      CommentLine.SETRANGE("No.", DocumentNo);
      IF (NOT CommentLine.FINDSET) THEN
        EXIT('');
      CommentText := '';

      REPEAT
        IF (CommentText = '') THEN
          CommentText := CommentLine.Comment
        ELSE
          CommentText += STRSUBSTNO(' %1', CommentLine.Comment);
      UNTIL (CommentLine.NEXT = 0);
      EXIT(CommentText);
    END;

    LOCAL PROCEDURE GetDPTMetadataDescriptionTranslation@1100528394(DPTMetadata@1100528300 : Record 11229825;Language@1100528301 : Record 8) : Text;
    BEGIN
      EXIT(GetDPTMetadataTranslation(DPTMetadata, Language, 0));
    END;

    LOCAL PROCEDURE GetDPTMetadataRefinerTranslation@1100528395(DPTMetadata@1100528301 : Record 11229825;Language@1100528300 : Record 8) : Text;
    BEGIN
      EXIT(GetDPTMetadataTranslation(DPTMetadata, Language, 1));
    END;

    LOCAL PROCEDURE GetDPTMetadataTranslation@1100528396(DPTMetadata@1100528301 : Record 11229825;Language@1100528300 : Record 8;TypeIn@1100528302 : Option) : Text;
    VAR
      DPTMetadataTranslation@1100528303 : Record 11229826;
    BEGIN
      IF (DPTMetadataTranslation.GET(DPTMetadata."Source Type", TypeIn, DPTMetadata.Code, Language.Code)) THEN
        EXIT(DPTMetadataTranslation.Description);
      EXIT(DPTMetadata.Description);
    END;

    LOCAL PROCEDURE GetDPTText@1100528405(TableNo@1100528300 : Integer;FieldNo@1100528301 : Integer;ProjectNo@1100528302 : Code[20];SubsiteCode@1100528303 : Code[20];LanguageCode@1100528306 : Code[10]) : Text;
    VAR
      DPTText@1100528305 : Record 11229943;
      WelcomeText@1100528304 : Text;
    BEGIN
      DPTText.SETRANGE("Table No.", TableNo);
      DPTText.SETRANGE("Field No.", FieldNo);
      DPTText.SETRANGE("Source No.", ProjectNo);
      DPTText.SETRANGE("Subsite Code", SubsiteCode);
      DPTText.SETRANGE("Language Code", LanguageCode);
      IF (NOT DPTText.FINDSET) THEN BEGIN
        DPTText.SETRANGE("Language Code", DPTSetup."Language Code");
        IF (NOT DPTText.FINDSET) THEN
          EXIT(WelcomeText);
      END;

      REPEAT
        WelcomeText += DPTText."Text Line";
        IF (DPTText."Line Break") THEN
          WelcomeText += '<br>'
        ELSE
          WelcomeText += ' ';
      UNTIL (DPTText.NEXT = 0);
      EXIT(WelcomeText);
    END;

    LOCAL PROCEDURE GetPrivateDocumentCompanyId@1100528306(DocumentProperties@1100528300 : Record 11012746) : Text;
    BEGIN
      IF (DocumentProperties."Contact No." <> '') THEN
        EXIT(DocumentProperties."Contact No.");
      EXIT(COMPANYNAME);
    END;

    LOCAL PROCEDURE GetPrivateDocumentCompanyName@1100525006(DocumentProperties@1100528300 : Record 11012746) : Text;
    VAR
      Contact@1100525000 : Record 5050;
    BEGIN
      IF (DocumentProperties."Contact No." <> '') THEN BEGIN
        IF (Contact.GET(DocumentProperties."Contact No.")) THEN
          EXIT(Contact.Name);
      END;
      EXIT(COMPANYNAME);
    END;

    LOCAL PROCEDURE InitJobQueueCategory@1100525019();
    VAR
      JobQueueCategory@1100525000 : Record 471;
    BEGIN
      JobQueueCategory.INIT;
      IF (JobQueueCategory.GET('DPT')) THEN
        EXIT;

      JobQueueCategory.INIT;
      JobQueueCategory.Code := 'DPT';
      JobQueueCategory.Description := DOCUMENTPORTAL;
      JobQueueCategory.INSERT(TRUE);
    END;

    LOCAL PROCEDURE InitJobQueueEntry@1100525020(ParameterString@1100525001 : Text;MinutesBetweenRuns@1100525002 : Integer);
    VAR
      JobQueueEntry@1100525000 : Record 472;
    BEGIN
      JobQueueEntry.SETRANGE("Parameter String", ParameterString);
      IF (JobQueueEntry.FINDFIRST) THEN
        EXIT;

      JobQueueEntry.INIT;
      JobQueueEntry.Description := COPYSTR(STRSUBSTNO('%1 (%2)', DOCUMENTPORTAL, ParameterString),
        1, MAXSTRLEN(JobQueueEntry.Description));
      JobQueueEntry."Ending Time" := 173000T;
      JobQueueEntry."Job Queue Category Code" := 'DPT';
      JobQueueEntry."Maximum No. of Attempts to Run" := 999;
      JobQueueEntry."Object ID to Run" := CODEUNIT::"DPT Event Log NAS JQ";
      JobQueueEntry."Object Type to Run" := JobQueueEntry."Object Type to Run"::Codeunit;
      JobQueueEntry."Parameter String" := ParameterString;
      JobQueueEntry."Recurring Job" := TRUE;
      JobQueueEntry."No. of Minutes between Runs" := MinutesBetweenRuns;
      JobQueueEntry."Run on Fridays" := TRUE;
      JobQueueEntry."Run on Mondays" := TRUE;
      JobQueueEntry."Run on Thursdays" := TRUE;
      JobQueueEntry."Run on Tuesdays" := TRUE;
      JobQueueEntry."Run on Wednesdays" := TRUE;
      JobQueueEntry."Starting Time" := 073000T;
      JobQueueEntry.Status := JobQueueEntry.Status::"On Hold";
      JobQueueEntry.INSERT(TRUE);
    END;

    LOCAL PROCEDURE NoMoreFilesWithSameName@1100528406(DocumentPropertiesIn@1100528300 : Record 11012746) : Boolean;
    VAR
      DocumentProperties@1100528301 : Record 11012746;
    BEGIN
      DocumentProperties.SETFILTER("No.", '<>%1', DocumentPropertiesIn."No.");
      DocumentProperties.SETRANGE(File, DocumentPropertiesIn.File);
      EXIT(NOT DocumentProperties.FINDFIRST);
    END;

    LOCAL PROCEDURE LogErrorMessage@1100528320(RecVariant@1100528300 : Variant;FieldNo@1100528301 : Integer);
    BEGIN
      ErrorMessage.LogMessage(RecVariant, FieldNo, ErrorMessage."Message Type"::Error, GETLASTERRORTEXT);
    END;

    LOCAL PROCEDURE SetAuthorisationDescriptions@1100528331(Language@1100528301 : Record 8);
    VAR
      AuthorisationDescription@1100528300 : ARRAY [10] OF Text;
    BEGIN
      GetAuthorisationDescriptions(Language, AuthorisationDescription);
      CASE DPTType OF
        DPTType::Project: BEGIN
          DotNetProjectSite.OwnerAuthorisationDescription := AuthorisationDescription[4];
          DotNetProjectSite.MemberAuthorisationDescription := AuthorisationDescription[3];
          DotNetProjectSite.VisitorAuthorisationDescription := AuthorisationDescription[2];
        END;
        DPTType::ServiceLocation: BEGIN
          DotNetLocationSite.OwnerAuthorisationDescription := AuthorisationDescription[4];
          DotNetLocationSite.MemberAuthorisationDescription := AuthorisationDescription[3];
          DotNetLocationSite.VisitorAuthorisationDescription := AuthorisationDescription[2];
        END;
        ELSE ERROR(Text006);
      END;
    END;

    LOCAL PROCEDURE SetDotNetProjectAuthority@1100528366(ProjectAuthority@1100528301 : Record 11020216;Contact@1100528305 : Record 5050);
    VAR
      Job@1100528303 : Record 11072003;
    BEGIN
      CLEAR(DotNetAuthority);
      DotNetAuthority := DotNetAuthority.Authority;
      Job.GET(ProjectAuthority."Project No.");
      IF (ProjectAuthority."Contact Person No." <> '') THEN
        Contact.GET(ProjectAuthority."Contact Person No.")
      ELSE
        Contact.GET(ProjectAuthority."Contact No.");

      ProjectAuthority.CALCFIELDS("Authority Type Description");
      IF (Contact."Company No." <> '') THEN BEGIN
        DotNetAuthority.CompanyId := Contact."Company No.";
        DotNetAuthority.CompanyName := Contact."Company Name";
      END ELSE BEGIN
        DotNetAuthority.CompanyId := Contact."No.";
        DotNetAuthority.CompanyName := Contact.Name;
      END;
      DotNetAuthority.ContactNo := ProjectAuthority."Contact No.";
      DotNetAuthority.ContactPersonNo := ProjectAuthority."Contact Person No.";
      DotNetAuthority.EmailAddress := Contact."E-Mail 2";
      DotNetAuthority.FullName := Contact.Name;
      DotNetAuthority.MobilePhoneNumber := Contact."Mobile Phone No. 2";
      DotNetAuthority.Role := ProjectAuthority."Authority Type Description";
      DotNetAuthority.TelephoneNumber := Contact."Phone No. 2";

      SetDotNetMailMessageProjectAuthority(Job, Contact);
      DotNetAuthority.InvitationMessage := DotNetMailMessage;
    END;

    LOCAL PROCEDURE SetDotNetServiceAuthority@1100528459(ServiceAuthorityDPT@1100528301 : Record 11072298;Contact@1100528305 : Record 5050);
    VAR
      ServiceLocation@1100528303 : Record 11012801;
    BEGIN
      CLEAR(DotNetAuthority);
      DotNetAuthority := DotNetAuthority.Authority;
      ServiceLocation.GET(ServiceAuthorityDPT."Source Code");
      IF (ServiceAuthorityDPT."Contact Person No." <> '') THEN
        Contact.GET(ServiceAuthorityDPT."Contact Person No.")
      ELSE
        Contact.GET(ServiceAuthorityDPT."Contact No.");

      ServiceAuthorityDPT.CALCFIELDS("Authority Type Description");
      IF (Contact."Company No." <> '') THEN BEGIN
        DotNetAuthority.CompanyId := Contact."Company No.";
        DotNetAuthority.CompanyName := Contact."Company Name";
      END ELSE BEGIN
        DotNetAuthority.CompanyId := Contact."No.";
        DotNetAuthority.CompanyName := Contact.Name;
      END;
      DotNetAuthority.ContactNo := ServiceAuthorityDPT."Contact No.";
      DotNetAuthority.ContactPersonNo := ServiceAuthorityDPT."Contact Person No.";
      DotNetAuthority.EmailAddress := Contact."E-Mail 2";
      DotNetAuthority.FullName := Contact.Name;
      DotNetAuthority.MobilePhoneNumber := Contact."Mobile Phone No. 2";
      DotNetAuthority.Role := ServiceAuthorityDPT."Authority Type Description";
      DotNetAuthority.TelephoneNumber := Contact."Phone No. 2";

      SetDotNetMailMessageServiceAuthority(ServiceLocation, Contact);
      DotNetAuthority.InvitationMessage := DotNetMailMessage;
    END;

    LOCAL PROCEDURE SetDotNetChoiceField@1100528393(DPTMetadata@1100528300 : Record 11229825;Language@1100528301 : Record 8);
    VAR
      DPTAdditionalData@1100528304 : Record 11229827;
      DPTAdditionalDataOption@1100528303 : Record 11229828;
    BEGIN
      CLEAR(DotNetChoiceField);
      DotNetChoiceField := DotNetChoiceField.ChoiceField;
      IF (NOT DPTAdditionalData.GET(DPTMetadata."Source Type", DPTMetadata.Code)) THEN
        DPTAdditionalData.INIT;

      DPTAdditionalDataOption.SETRANGE("Source Type", DPTMetadata."Source Type");
      DPTAdditionalDataOption.SETRANGE("Additional Data Code", DPTMetadata.Code);
      DPTAdditionalDataOption.SETRANGE("Language Code", Language.Code);
      IF (NOT DPTAdditionalDataOption.FINDSET) THEN
        DPTAdditionalDataOption.SETRANGE("Language Code", DPTSetup."Language Code");
      IF (DPTAdditionalDataOption.FINDSET) THEN BEGIN
        DotNetChoiceField.ColumnName := DPTMetadata.Code;
        DotNetChoiceField.DisplayName := GetDPTMetadataDescriptionTranslation(DPTMetadata, Language);
        DotNetChoiceField.EditForm := DPTMetadata."Show in Edit";
        DotNetChoiceField.Indexed := DPTMetadata.Indexed;
        DotNetChoiceField.Required := DPTMetadata.Mandatory;
        REPEAT
          DotNetChoiceField.Choices.Add(DPTAdditionalDataOption.Option, DPTAdditionalDataOption.Option);
        UNTIL (DPTAdditionalDataOption.NEXT = 0);
      END;
    END;

    LOCAL PROCEDURE SetDotNetDateTimeField@1100528466(DPTMetadata@1100528302 : Record 11229825;Language@1100528301 : Record 8);
    VAR
      DPTAdditionalData@1100528303 : Record 11229827;
    BEGIN
      CLEAR(DotNetDateTimeField);
      DotNetDateTimeField := DotNetDateTimeField.DateTimeField;
      IF (NOT DPTAdditionalData.GET(DPTMetadata."Source Type", DPTMetadata.Code)) THEN
        DPTAdditionalData.INIT;

      DotNetDateTimeField.ColumnName := DPTMetadata.Code;
      DotNetDateTimeField.DisplayName := GetDPTMetadataDescriptionTranslation(DPTMetadata, Language);
      DotNetDateTimeField.EditForm := DPTMetadata."Show in Edit";
      DotNetDateTimeField.Indexed := DPTMetadata.Indexed;
      DotNetDateTimeField.ShowDateOnly := (DPTAdditionalData."DateTime Format" = DPTAdditionalData."DateTime Format"::DateOnly);
      DotNetDateTimeField.Required := DPTMetadata.Mandatory;
    END;

    LOCAL PROCEDURE SetDotNetDPTSettings@1100528305();
    VAR
      StringFunctions@1100525000 : Codeunit 11012273;
      DnArrayList@1100525001 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.ArrayList";
    BEGIN
      StringFunctions.SplitString2(DPTSetup."Portal URL", '/', DnArrayList);
      CLEAR(DotNetDPTSettings);
      DotNetDPTSettings := DotNetDPTSettings.DptSettings;

      DotNetDPTSettings.AppId := DPTSetup."App ID";
      DotNetDPTSettings.AppSecret := DPTSetup."App Secret";
      DotNetDPTSettings.AppUrl := DPTSetup."Proxy URL";
      DotNetDPTSettings.CollectAnonymousData := DPTSetup."Send Anonymous Analytics Data";
      DotNetDPTSettings.DownloadThreshold := DPTSetup."Download Threshold";
      DotNetDPTSettings.FileTransferPageUrl := DPTSetup."File Transfer Site URL";
      DotNetDPTSettings.InstrumentationKey := DPTSetup."Instrumentation Key";
      DotNetDPTSettings.LandingsPageUrl := DPTSetup."Portal URL";
      DotNetDPTSettings.SharePointUrl := STRSUBSTNO('%1//%2', DnArrayList.Item(0), DnArrayList.Item(2));
      DotNetDPTSettings.StorageThreshold := DPTSetup."Storage Threshold";

      CASE DPTSetup."SharePoint Version" OF
        DPTSetup."SharePoint Version"::"Sharepoint Online": BEGIN
          DotNetDPTSettings.GuestsGroupName := DPTSetup."Guest Group Name";
          DotNetDPTSettings.GuestsSiteUrl := DPTSetup."Guest Site URL";
          DotNetDPTSettings.AzureADClientId := DPTSetup."Azure AD App ID";
          DotNetDPTSettings.AdminUser := DPTSetup."Site Admin User";
          DotNetDPTSettings.AdminPassword := DPTSetup."Site Admin Password";
        END;
        ELSE BEGIN
          DotNetDPTSettings.IssuerId := DPTSetup."Issuer ID";
          DotNetDPTSettings.IssuerCertificateThumbprint := DPTSetup."Issuer Certificate Thumbprint";
        END;
      END;
    END;

    LOCAL PROCEDURE SetDotNetGuestPortal@1100528421(Language@1100528301 : Record 8;User@1100528302 : Record 2000000120);
    BEGIN
      CLEAR(DotNetGuestPortal);
      DotNetGuestPortal := DotNetGuestPortal.GuestPortal;

      DotNetGuestPortal.Company := COMPANYNAME;
      DotNetGuestPortal.GuestGroupName := DPTSetup."Guest Group Name";
      DotNetGuestPortal.LanguageId := Language."Windows Language ID";
      DotNetGuestPortal.LogoPath := CreateLogoFileFullPath;
      CreateLogoStream;
      DotNetGuestPortal.CompanyLogoStream := MemoryStreamCompanyLogo;
      CASE DPTSetup."SharePoint Version" OF
        DPTSetup."SharePoint Version"::"Sharepoint Online": BEGIN
          DotNetGuestPortal.PrimaryOwnerId  := User."Authentication Email";
          DotNetGuestPortal.RegisterAdminUser := DPTSetup."Site Admin User";
        END ELSE
          DotNetGuestPortal.PrimaryOwnerId := USERID
      END;
      DotNetGuestPortal.SiteUrl := DPTSetup."Guest Site URL";
      DotNetGuestPortal.Title := STRSUBSTNO(Text001, COMPANYNAME);

      AddColorsToDotNetColorsCollection;
      DotNetGuestPortal.Colours(DotNetCodeDescriptionCollection);
    END;

    LOCAL PROCEDURE SetDotNetFileTransferPage@1100525007(Language@1100525001 : Record 8;User@1100525000 : Record 2000000120);
    BEGIN
      CLEAR(DotNetFileTransferPage);
      DotNetFileTransferPage := DotNetFileTransferPage.FileTransferPage;

      //DotNetFileTransferPage.BackgroundPictureUrl
      DotNetFileTransferPage.Description := STRSUBSTNO(Text013, COMPANYNAME);
      DotNetFileTransferPage.FileTransferPageUrl := DPTSetup."File Transfer Site URL";
      DotNetFileTransferPage.LandingsPageUrl := DPTSetup."Portal URL";
      DotNetFileTransferPage.LanguageId := Language."Windows Language ID";
      DotNetFileTransferPage.LogoPath := CreateLogoFileFullPath;
      CreateLogoStream;
      DotNetFileTransferPage.CompanyLogoStream := MemoryStreamCompanyLogo;
      DotNetFileTransferPage.Title := DotNetFileTransferPage.Description;
      DotNetFileTransferPage.WelcomeText := GetDPTText(DATABASE::"DPT Setup", 0, '', '', DPTSetup."Language Code");

      CASE DPTSetup."SharePoint Version" OF
        DPTSetup."SharePoint Version"::"Sharepoint Online":
          DotNetFileTransferPage.PrimaryOwnerId  := User."Authentication Email";
        ELSE
          DotNetFileTransferPage.PrimaryOwnerId := USERID
      END;
      AddColorsToDotNetColorsCollection;
      DotNetFileTransferPage.Colours(DotNetCodeDescriptionCollection);
    END;

    LOCAL PROCEDURE SetDotNetLandingPage@1100528434(Language@1100528301 : Record 8;User@1100528302 : Record 2000000120);
    BEGIN
      CLEAR(DotNetLandingPage);
      DotNetLandingPage := DotNetLandingPage.LandingsPage;

      //DotNetLandingPage.BackgroundPictureUrl
      DotNetLandingPage.CompanyName := COMPANYNAME;
      DotNetLandingPage.Description := STRSUBSTNO(Text001, COMPANYNAME);
      DotNetLandingPage.LandingsPageUrl := DPTSetup."Portal URL";
      DotNetLandingPage.LanguageId := Language."Windows Language ID";
      DotNetLandingPage.LogoPath := CreateLogoFileFullPath;
      CreateLogoStream;
      DotNetLandingPage.CompanyLogoStream := MemoryStreamCompanyLogo;
      DotNetLandingPage.Title := DotNetLandingPage.Description;
      DotNetLandingPage.WelcomeText := GetDPTText(DATABASE::"DPT Setup", 0, '', '', DPTSetup."Language Code");

      CASE DPTSetup."SharePoint Version" OF
        DPTSetup."SharePoint Version"::"Sharepoint Online":
          DotNetLandingPage.PrimaryOwnerId  := User."Authentication Email";
        ELSE
          DotNetLandingPage.PrimaryOwnerId := USERID
      END;
      AddColorsToDotNetColorsCollection;
      DotNetLandingPage.Colours(DotNetCodeDescriptionCollection);
      AddSearchCenterToDotNetLandingPage;
      AddDefaultSubsiteDocTypesToDotNetLandingPage;
    END;

    LOCAL PROCEDURE SetDotNetLocationSite@1100528446(ServiceLocation@1100528301 : Record 11012801;Language@1100528302 : Record 8;User@1100528303 : Record 2000000120);
    BEGIN
      CLEAR(DotNetLocationSite);
      DotNetLocationSite := DotNetLocationSite.LocationSite;

      DotNetLocationSite.City := ServiceLocation.City;
      DotNetLocationSite.Company := COMPANYNAME;
      DotNetLocationSite.CompanyLogoPath := CreateLogoFileFullPath;
      CreateLogoStream;
      DotNetLocationSite.CompanyLogoStream := MemoryStreamCompanyLogo;
      DotNetLocationSite.Description := ServiceLocation.Description;
      DotNetLocationSite.HeaderPictureUrl := CreateHeaderPictureFullPath(ServiceLocation);
      CreateHeaderPictureStream(ServiceLocation);
      DotNetLocationSite.HeaderPictureStream := MemoryStreamHeaderPicture;

      DotNetLocationSite.Number := ServiceLocation."No.";
      DotNetLocationSite.LanguageId := Language."Windows Language ID";
      DotNetLocationSite.SiteUrl := ServiceLocation."Document Portal URL";
      DotNetLocationSite.TimeZoneId := DPTSetup."Time Zone ID";
      DotNetLocationSite.Title := ServiceLocation.Description;
      DotNetLocationSite.WelcomeText := GetDPTText(DATABASE::"Service Location", ServiceLocation.FIELDNO("Document Portal Site Generated"),
        ServiceLocation."No.", '', Language.Code);

      CASE DPTSetup."SharePoint Version" OF
        DPTSetup."SharePoint Version"::"Sharepoint Online":
          DotNetLocationSite.PrimaryOwnerId  := User."Authentication Email";
        ELSE
          DotNetLocationSite.PrimaryOwnerId := USERID;
      END;
      AddColorsToDotNetColorsCollection;
      DotNetLocationSite.Colours(DotNetCodeDescriptionCollection);
      AddDocumentStatusToDotNetSite(Language);
      AddMetaDataToDotNetSite(Language);
      SetAuthorisationDescriptions(Language);
    END;

    LOCAL PROCEDURE SetDotNetLocationSubsite@1100528445(DPTSubsiteServLoc@1100528301 : Record 11072344;Language@1100528300 : Record 8);
    BEGIN
      CLEAR(DotNetLocationSubsite);
      DotNetLocationSubsite := DotNetLocationSubsite.LocationSubSite;

      DotNetLocationSubsite.SiteCode := DPTSubsiteServLoc.Code;
      DotNetLocationSubsite.EnableCheckin := DPTSubsiteServLoc."Use Document CheckIn/-Out";
      DotNetLocationSubsite.EnableCheckinCompanyLists := DPTSubsiteServLoc."Use Doc CheckIn/-Out Comp List";
      DotNetLocationSubsite.Title := DPTSubsiteServLoc.Description;
      DotNetLocationSubsite.SecurityLevelId := DPTSubsiteServLoc."Subsite Structure";
      DotNetLocationSubsite.TemplateFile := DPTSubsiteServLoc.Template;
      DotNetLocationSubsite.TemplateType := DPTSubsiteServLoc."Template Type";
      DotNetLocationSubsite.WelcomeText := GetDPTText(DATABASE::"DPT Subsite ServLoc", DPTSubsiteServLoc.FIELDNO(Code),
        DPTSubsiteServLoc."Service Location No.", DPTSubsiteServLoc.Code, Language.Code);
    END;

    LOCAL PROCEDURE SetDotNetMailMessageProjectAuthority@1100528371(Job@1100528300 : Record 11072003;Contact@1100528301 : Record 5050);
    VAR
      SubjectText@1100528302 : Text;
      BodyText@1100528303 : Text;
    BEGIN
      CLEAR(DotNetMailMessage);
      DotNetMailMessage := DotNetMailMessage.MailMessage;

      DotNetMailMessage.CC := '';
      CreateEmailBodyProjectAuthority(Job, Contact, SubjectText, BodyText);
      DotNetMailMessage.TextBody := BodyText;
      DotNetMailMessage.Subject := SubjectText;
      IF (SubjectText = '') THEN
        DotNetMailMessage.Subject := STRSUBSTNO('%1 %2', DOCUMENTPORTALMESSAGETEXT, COMPANYNAME);
    END;

    LOCAL PROCEDURE SetDotNetMailMessageServiceAuthority@1100528460(ServiceLocation@1100528300 : Record 11012801;Contact@1100528301 : Record 5050);
    VAR
      SubjectText@1100528303 : Text;
      BodyText@1100528302 : Text;
    BEGIN
      CLEAR(DotNetMailMessage);
      DotNetMailMessage := DotNetMailMessage.MailMessage;

      DotNetMailMessage.CC := '';
      CreateEmailBodyServiceAuthority(ServiceLocation, Contact, SubjectText, BodyText);
      DotNetMailMessage.TextBody := BodyText;
      DotNetMailMessage.Subject := SubjectText;
      IF (SubjectText = '') THEN
        DotNetMailMessage.Subject := STRSUBSTNO('%1 %2', DOCUMENTPORTALMESSAGETEXT, COMPANYNAME);
    END;

    LOCAL PROCEDURE SetDotNetMailMessageProjectResponsiblePerson@1100528376(Job@1100528302 : Record 11072003;Employee@1100528301 : Record 5200);
    VAR
      SubjectText@1100528303 : Text;
      BodyText@1100528300 : Text;
    BEGIN
      CLEAR(DotNetMailMessage);
      DotNetMailMessage := DotNetMailMessage.MailMessage;

      DotNetMailMessage.CC := '';
      CreateEmailBodyProjectResponsiblePerson(Job, Employee, SubjectText, BodyText);
      DotNetMailMessage.TextBody := BodyText;
      DotNetMailMessage.Subject := SubjectText;
      IF (SubjectText = '') THEN
        DotNetMailMessage.Subject := STRSUBSTNO('%1 %2', DOCUMENTPORTALMESSAGETEXT, COMPANYNAME);
    END;

    LOCAL PROCEDURE SetDotNetMailMessageServiceResponsiblePerson@1100528461(ServiceLocation@1100528302 : Record 11012801;Employee@1100528301 : Record 5200);
    VAR
      SubjectText@1100528303 : Text;
      BodyText@1100528300 : Text;
    BEGIN
      CLEAR(DotNetMailMessage);
      DotNetMailMessage := DotNetMailMessage.MailMessage;

      DotNetMailMessage.CC := '';
      CreateEmailBodyServiceResponsiblePerson(ServiceLocation, Employee, SubjectText, BodyText);
      DotNetMailMessage.TextBody := BodyText;
      DotNetMailMessage.Subject := SubjectText;
      IF (SubjectText = '') THEN
        DotNetMailMessage.Subject := STRSUBSTNO('%1 %2', DOCUMENTPORTALMESSAGETEXT, COMPANYNAME);
    END;

    LOCAL PROCEDURE SetDotNetNAVDocument@1100525005(DocumentProperties@1100528301 : Record 11012746);
    BEGIN
      IF (DocumentProperties."Document Portal Private Doc") THEN BEGIN
        DotNetNAVDocument.CompanyId := GetPrivateDocumentCompanyId(DocumentProperties);
        DotNetNAVDocument.CompanyName := GetPrivateDocumentCompanyName(DocumentProperties);
      END;
      DotNetNAVDocument.ContactNo := DocumentProperties."Contact No.";
      DotNetNAVDocument.ContactPersonNo := DocumentProperties."Contact Person No.";
      DotNetNAVDocument.CreatedBy := DocumentProperties."User ID";
      DotNetNAVDocument.CreatedOn := CREATEDATETIME(DocumentProperties."Creation Date", DocumentProperties."Creation Time");
      DotNetNAVDocument.Description := DocumentProperties.Description;
      DotNetNAVDocument.DocumentDate := CREATEDATETIME(DocumentProperties."Document Date", 0T);
      DotNetNAVDocument.DocumentNo := DocumentProperties."Document No.";
      DotNetNAVDocument.DocumentStatusId := DocumentProperties.Status;
      DotNetNAVDocument.DocumentTypeCode := DocumentProperties."Document Type";
      DotNetNAVDocument.ModificationDate := CREATEDATETIME(DocumentProperties."Modification Date", 0T);
      DotNetNAVDocument.NavDocumentNo := DocumentProperties."No.";
      DotNetNAVDocument.Remark := GetCommentLines(DocumentProperties."No.");
      DotNetNAVDocument.SiteCode := DocumentProperties."Document Portal Subsite";
      DotNetNAVDocument.WebLink := DocumentProperties.GetStorageURI;
      DotNetNAVDocument.Publish := DocumentProperties.DPTPublish;

      SetDotNetNAVDocumentPlotNo(DocumentProperties);
    END;

    LOCAL PROCEDURE SetDotNetNAVDocumentProject@1100525004(Job@1100528302 : Record 11072003;DocumentProperties@1100528301 : Record 11012746);
    BEGIN
      CLEAR(DotNetNAVDocument);
      DotNetNAVDocument := DotNetNAVDocument.NavDocument;

      SetDotNetNAVDocument(DocumentProperties);
      DotNetNAVDocument.ElementCode := DocumentProperties."Project Element";
      DotNetNAVDocument.SourceNo := Job."No.";
    END;

    LOCAL PROCEDURE SetDotNetNAVDocumentService@1100528341(ServiceLocation@1100528302 : Record 11012801;DocumentProperties@1100528301 : Record 11012746);
    BEGIN
      CLEAR(DotNetNAVDocument);
      DotNetNAVDocument := DotNetNAVDocument.NavDocument;

      SetDotNetNAVDocument(DocumentProperties);
      DotNetNAVDocument.SourceNo := ServiceLocation."No.";
    END;

    LOCAL PROCEDURE SetDotNetNumberField@1100528390(DPTMetadata@1100528302 : Record 11229825;Language@1100528301 : Record 8);
    VAR
      DPTAdditionalData@1100528303 : Record 11229827;
    BEGIN
      CLEAR(DotNetNumberField);
      DotNetNumberField := DotNetNumberField.NumberField;
      IF (NOT DPTAdditionalData.GET(DPTMetadata."Source Type", DPTMetadata.Code)) THEN
        DPTAdditionalData.INIT;

      DotNetNumberField.ColumnName := DPTMetadata.Code;
      DotNetNumberField.DisplayName := GetDPTMetadataDescriptionTranslation(DPTMetadata, Language);
      DotNetNumberField.EditForm := DPTMetadata."Show in Edit";
      DotNetNumberField.Indexed := DPTMetadata.Indexed;
      DotNetNumberField.MaxValue := DPTAdditionalData."Maximum Value";
      DotNetNumberField.MinValue := DPTAdditionalData."Minimum Value";
      DotNetNumberField.Required := DPTMetadata.Mandatory;
    END;

    LOCAL PROCEDURE SetDotNetProjectSite@1100528342(Job@1100528301 : Record 11072003;Language@1100528302 : Record 8;User@1100528303 : Record 2000000120);
    BEGIN
      CLEAR(DotNetProjectSite);
      DotNetProjectSite := DotNetProjectSite.ProjectSite;

      DotNetProjectSite.City := Job.City;
      DotNetProjectSite.Company := COMPANYNAME;
      DotNetProjectSite.CompanyLogoPath := CreateLogoFileFullPath;
      CreateLogoStream;
      DotNetProjectSite.CompanyLogoStream := MemoryStreamCompanyLogo;
      DotNetProjectSite.Description := Job.Description;
      DotNetProjectSite.HeaderPictureUrl := CreateHeaderPictureFullPath(Job);
      CreateHeaderPictureStream(Job);
      DotNetProjectSite.HeaderPictureStream := MemoryStreamHeaderPicture;
      DotNetProjectSite.Number := Job."No.";
      DotNetProjectSite.LanguageId := Language."Windows Language ID";
      DotNetProjectSite.MainProjectNumber := Job."Main Project";
      CASE DPTSetup."SharePoint Version" OF
        DPTSetup."SharePoint Version"::"Sharepoint Online":
          DotNetProjectSite.PrimaryOwnerId  := User."Authentication Email";
        ELSE
          DotNetProjectSite.PrimaryOwnerId := USERID;
      END;
      DotNetProjectSite.SiteStatus := FORMAT(Job."Project Status");
      DotNetProjectSite.SiteUrl := Job."Document Portal URL";
      DotNetProjectSite.TimeZoneId := DPTSetup."Time Zone ID";
      DotNetProjectSite.Title := Job.Description;
      DotNetProjectSite.WelcomeText := GetDPTText(DATABASE::Job, Job.FIELDNO("Document Portal Site Generated"), Job."No.", '',
        Language.Code);

      AddColorsToDotNetColorsCollection;
      DotNetProjectSite.Colours(DotNetCodeDescriptionCollection);
      AddDocumentStatusToDotNetSite(Language);
      AddMetaDataToDotNetSite(Language);
      SetAuthorisationDescriptions(Language);
    END;

    LOCAL PROCEDURE SetDotNetProjectSubsite@1100528343(DPTSubsiteProject@1100528301 : Record 11072330;Language@1100528300 : Record 8);
    BEGIN
      CLEAR(DotNetProjectSubsite);
      DotNetProjectSubsite := DotNetProjectSubsite.ProjectSubSite;

      DotNetProjectSubsite.SiteCode := DPTSubsiteProject.Code;
      DotNetProjectSubsite.EnableCheckin := DPTSubsiteProject."Use Document CheckIn/-Out";
      DotNetProjectSubsite.EnableCheckinCompanyLists := DPTSubsiteProject."Use Doc CheckIn/-Out Comp List";
      DotNetProjectSubsite.SecurityLevelId := DPTSubsiteProject."Subsite Structure";
      DotNetProjectSubsite.TemplateFile := DPTSubsiteProject.Template;
      DotNetProjectSubsite.TemplateType := DPTSubsiteProject."Template Type";
      DotNetProjectSubsite.Title := DPTSubsiteProject.Description;
      DotNetProjectSubsite.WelcomeText := GetDPTText(DATABASE::"DPT Subsite Project", DPTSubsiteProject.FIELDNO(Code),
        DPTSubsiteProject."Project No.", DPTSubsiteProject.Code, Language.Code);
    END;

    LOCAL PROCEDURE SetDotNetProjectSubsiteQuote@1100527808(DPTSubsiteProject@1100528301 : Record 11072330;Language@1100528300 : Record 8);
    BEGIN
      CLEAR(DotNetProjectSubsiteQuote);
      DotNetProjectSubsiteQuote := DotNetProjectSubsiteQuote.PurchaseActionSubSite;

      DotNetProjectSubsiteQuote.SiteCode := DPTSubsiteProject.Code;
      DotNetProjectSubsiteQuote.EnableCheckin := DPTSubsiteProject."Use Document CheckIn/-Out";
      DotNetProjectSubsiteQuote.EnableCheckinCompanyLists := DPTSubsiteProject."Use Doc CheckIn/-Out Comp List";
      DotNetProjectSubsiteQuote.SecurityLevelId := DPTSubsiteProject."Subsite Structure";
      DotNetProjectSubsiteQuote.TemplateType := DPTSubsiteProject."Template Type";
      DotNetProjectSubsiteQuote.Title := DPTSubsiteProject.Description;
      DotNetProjectSubsiteQuote.WelcomeText := GetDPTText(DATABASE::"DPT Subsite Project", DPTSubsiteProject.FIELDNO(Code),
        DPTSubsiteProject."Project No.", DPTSubsiteProject.Code, Language.Code);
    END;

    LOCAL PROCEDURE SetDotNetRefiner@1100528432(DPTMetadata@1100528301 : Record 11229825;FieldType@1100528302 : Integer);
    BEGIN
      CLEAR(DotNetRefiner);
      DotNetRefiner := DotNetRefiner.Refiner;

      DotNetRefiner.DisplayName := DPTMetadata."Refiner Description";
      DotNetRefiner.RefinerName := DPTMetadata."Refiner Code";
      DotNetRefiner.Position := DPTMetadata."Refiner Position";
      CASE FieldType OF
        2,3: DotNetRefiner.TypeId := 3;
        4: DotNetRefiner.TypeId := 4;
        ELSE
          DotNetRefiner.TypeId := 1;
      END;
    END;

    LOCAL PROCEDURE SetDotNetProjectResponsiblePerson@1100528359(ProjectResponsiblePerson@1100528301 : Record 11012040);
    VAR
      Job@1100528305 : Record 11072003;
      Employee@1100528302 : Record 5200;
      UserSetup@1100528303 : Record 91;
      User@1100528304 : Record 2000000120;
    BEGIN
      CLEAR(DotNetResponsiblePerson);
      DotNetResponsiblePerson := DotNetResponsiblePerson.ResponsiblePerson;
      ProjectResponsiblePerson.CALCFIELDS("Responsibility Description");
      Employee.GET(ProjectResponsiblePerson."Employee No.");
      Job.GET(ProjectResponsiblePerson."Project No.");
      UserSetup.SETRANGE("Employee No.", ProjectResponsiblePerson."Employee No.");
      UserSetup.FINDFIRST;
      User.SETRANGE("User Name", UserSetup."User ID");
      User.FINDFIRST;

      DotNetResponsiblePerson.EmailAddress := GetEmail(Employee, User);
      DotNetResponsiblePerson.MobilePhoneNumber := Employee."Company Mobile Phone No.";
      DotNetResponsiblePerson.Role := ProjectResponsiblePerson."Responsibility Description";
      DotNetResponsiblePerson.O365AccountName := User."Authentication Email";
      DotNetResponsiblePerson.FullName := Employee."Full Name";
      DotNetResponsiblePerson.TelephoneNumber := Employee."Company Phone No.";
      DotNetResponsiblePerson.WindowsAccountName := UserSetup."User ID";

      SetDotNetMailMessageProjectResponsiblePerson(Job, Employee);
      DotNetResponsiblePerson.InvitationMessage := DotNetMailMessage;
    END;

    LOCAL PROCEDURE SetDotNetServiceResponsiblePerson@1100528458(ServiceResponsiblePersonDPT@1100528301 : Record 11072297);
    VAR
      ServiceLocation@1100528305 : Record 11012801;
      Employee@1100528302 : Record 5200;
      UserSetup@1100528303 : Record 91;
      User@1100528304 : Record 2000000120;
    BEGIN
      CLEAR(DotNetResponsiblePerson);
      DotNetResponsiblePerson := DotNetResponsiblePerson.ResponsiblePerson;
      ServiceResponsiblePersonDPT.CALCFIELDS("Responsibility Description");
      Employee.GET(ServiceResponsiblePersonDPT."Employee No.");
      ServiceLocation.GET(ServiceResponsiblePersonDPT."Source Code");
      UserSetup.SETRANGE("Employee No.", ServiceResponsiblePersonDPT."Employee No.");
      UserSetup.FINDFIRST;
      User.SETRANGE("User Name", UserSetup."User ID");
      User.FINDFIRST;

      DotNetResponsiblePerson.EmailAddress := GetEmail( Employee, User);
      DotNetResponsiblePerson.MobilePhoneNumber := Employee."Company Mobile Phone No.";
      DotNetResponsiblePerson.Role := ServiceResponsiblePersonDPT."Responsibility Description";
      DotNetResponsiblePerson.O365AccountName := User."Authentication Email";
      DotNetResponsiblePerson.FullName := Employee."Full Name";
      DotNetResponsiblePerson.TelephoneNumber := Employee."Company Phone No.";
      DotNetResponsiblePerson.WindowsAccountName := UserSetup."User ID";

      SetDotNetMailMessageServiceResponsiblePerson(ServiceLocation, Employee);
      DotNetResponsiblePerson.InvitationMessage := DotNetMailMessage;
    END;

    LOCAL PROCEDURE SetDotNetSearchCenter@1100528444(SourceType@1100528304 : Option);
    VAR
      DPTMetadata@1100528301 : Record 11229825;
      DPTAdditionalData@1100528302 : Record 11229827;
      FieldType@1100528306 : Option;
    BEGIN
      DPTMetadata.SETRANGE("Source Type", SourceType);
      DPTMetadata.SETRANGE("Search Allowed", TRUE);
      DPTMetadata.SETRANGE("Show in Search", TRUE);
      IF (NOT DPTMetadata.FINDSET) THEN
        EXIT;
      CLEAR(DotnetSearchCenter);
      DotnetSearchCenter := DotnetSearchCenter.SearchCenter;

      DotnetSearchCenter.Description := STRSUBSTNO(Text003, COMPANYNAME);
      DotnetSearchCenter.Title := DotnetSearchCenter.Description;
      REPEAT
        FieldType := DPTMetadata."Refiner Type";
        IF (NOT DPTMetadata."Standard Data") THEN BEGIN
          DPTAdditionalData.GET(DPTMetadata."Source Type", DPTMetadata.Code);
          FieldType := DPTAdditionalData.Type;
        END;
        SetDotNetRefiner(DPTMetadata, FieldType);
        DotnetSearchCenter.Refiners.Add(DotNetRefiner);
      UNTIL (DPTMetadata.NEXT = 0);
    END;

    [TryFunction]
    LOCAL PROCEDURE SetDotNetServiceFactory@1100528317(User@1100528301 : Record 2000000120);
    BEGIN
      CLEAR(DotNetDPTServiceFactory);
      CASE DPTSetup."SharePoint Version" OF
        DPTSetup."SharePoint Version"::"Sharepoint Online":
          ShowProgress(GetConnectText, DPTSetup."Portal URL", STRSUBSTNO('(%1)', User."Authentication Email"));
        ELSE
          ShowProgress(GetConnectText, DPTSetup."Portal URL", STRSUBSTNO('(%1)', User."User Name"));
      END;
      SetDotNetDPTSettings;
      DotNetDPTServiceFactory := DotNetDPTServiceFactory.DptServiceFactory(DotNetDPTSettings);
    END;

    LOCAL PROCEDURE SetDotNetTextField@1100528391(DPTMetadata@1100528302 : Record 11229825;Language@1100528301 : Record 8);
    BEGIN
      CLEAR(DotNetTextField);
      DotNetTextField := DotNetTextField.TextField;
      DotNetTextField.ColumnName := DPTMetadata.Code;
      DotNetTextField.DisplayName := GetDPTMetadataDescriptionTranslation(DPTMetadata, Language);
      DotNetTextField.EditForm := DPTMetadata."Show in Edit";
      DotNetTextField.Indexed := DPTMetadata.Indexed;
      DotNetTextField.Required := DPTMetadata.Mandatory;
    END;

    LOCAL PROCEDURE SetDotNetUser@1100528344(User@1100528301 : Record 2000000120);
    VAR
      UserSetup@1100528303 : Record 91;
      Employee@1100528302 : Record 5200;
      DPTUserTokenCache@1100528304 : Record 11229824;
      IStream@1100528305 : InStream;
      MemoryStream@1100527800 : DotNet "'mscorlib'.System.IO.MemoryStream";
      Bytes@1100527801 : DotNet "'mscorlib'.System.Array";
    BEGIN
      CLEAR(DotNetUser);
      DotNetUser := DotNetUser.User;
      UserSetup.GET(User."User Name");
      Employee.GET(UserSetup."Employee No.");
      IF (DPTSetup."SharePoint Version" = DPTSetup."SharePoint Version"::"Sharepoint Online") THEN BEGIN
        IF (NOT DPTUserTokenCache.GET(User."User Security ID")) THEN
          DPTUserTokenCache.FIELDERROR("User Name");
        DPTUserTokenCache.CALCFIELDS("Azure AD Token Cache");

        IF (DPTUserTokenCache."Azure AD Token Cache".HASVALUE) THEN BEGIN
          DPTUserTokenCache."Azure AD Token Cache".CREATEINSTREAM(IStream);
          MemoryStream := MemoryStream.MemoryStream;
          COPYSTREAM(MemoryStream, IStream);
          Bytes := MemoryStream.GetBuffer;
          DotNetUser.AzureADToken := Bytes;
        END;
        DotNetUser.O365AccountName := User."Authentication Email";
      END;
      DotNetUser.EmailAddress := GetEmail(Employee, User);
      DotNetUser.WindowsAccountName := User."User Name";
    END;

    LOCAL PROCEDURE SetDotNetViewTemplate@1100525017(ViewType@1100525000 : Option;SubsiteCode@1100525002 : Code[20];DocumentType@1100525003 : Code[10]);
    VAR
      DPTPortalViewDocumentType@1100525001 : Record 11229946;
    BEGIN
      CLEAR(DotNetViewTemplate);
      DotNetViewTemplate := DotNetViewTemplate.ViewTemplate;
      DPTPortalViewDocumentType.SETRANGE("Source Type", DPTType);
      DPTPortalViewDocumentType.SETRANGE("Subsite Code", SubsiteCode);
      DPTPortalViewDocumentType.SETRANGE("View Type", ViewType);
      DPTPortalViewDocumentType.SETRANGE("Document Type", DocumentType);
      IF (NOT DPTPortalViewDocumentType.FINDSET) THEN
        EXIT;

      DotNetViewTemplate.Companies := (DPTPortalViewDocumentType."View Type" = DPTPortalViewDocumentType."View Type"::Company);
      DotNetViewTemplate.DocumentTypeCode := DocumentType;

      REPEAT
        CLEAR(DotNetSelectedView);
        DotNetSelectedView := DotNetSelectedView.SelectedView;
        DPTPortalViewDocumentType.CALCFIELDS("Portal View Description");
        DotNetSelectedView.ViewName := DPTPortalViewDocumentType."Portal View Description";
        DotNetSelectedView.DefaultView := DPTPortalViewDocumentType."Default View";
        DotNetViewTemplate.SelectedViews.Add(DotNetSelectedView);
      UNTIL (DPTPortalViewDocumentType.NEXT = 0);
    END;

    LOCAL PROCEDURE SetDPTEventLogMessageText@1100525008(SeqNoIn@1100525000 : Integer;UserSIDIn@1100525001 : Text;MessageTextIn@1100528302 : Text);
    VAR
      DPTEventLog@1100528301 : Record 11229822;
    BEGIN
      IF (SeqNoIn = 0) THEN //Called from a Page Action (E.g. Create Site)
        EXIT;

      DPTEventLog.GET(SeqNoIn);
      DPTEventLog."Message Text" := COPYSTR(MessageTextIn, 1, MAXSTRLEN(DPTEventLog."Message Text"));
      DPTEventLog.Processing := FALSE;
      DPTEventLog."Modified By SID" := UserSIDIn;
      DPTEventLog."Modified On" := CURRENTDATETIME;
      CLEAR(DPTEventLog."Processed By SID");
      DPTEventLog."Processed On" := 0DT;

      IF (ErrorMessage.COUNT > 0) THEN BEGIN
        ErrorMessage.FINDSET;
        REPEAT
          DPTEventLog."Message Text" := COPYSTR(ErrorMessage.Description, 1, MAXSTRLEN(DPTEventLog."Message Text"));
          DPTEventLog.AddMessageTextToProcessMessages;
        UNTIL (ErrorMessage.NEXT = 0);
      END;

      IF (DPTEventLog."Number of Attempts" >= DPTSetup."Max No. of Event Log Attempts") AND
         ((StartedFrom = StartedFrom::JobQueue) OR (StartedFrom = StartedFrom::NAS))
      THEN
        DPTEventLog."Message Text" := MAXATTEMPSEXCEEDED;
      DPTEventLog.MODIFY(TRUE);
      COMMIT;
    END;

    LOCAL PROCEDURE TestCompanyInformationLogo@1100525001(CompanyInformation@1100525000 : Record 79) : Boolean;
    BEGIN
      EXIT(CompanyInformation.Picture.HASVALUE);
    END;

    LOCAL PROCEDURE SetDotNetNAVDocumentPlotNo@1100527800(VAR DocumentProperties@1100525001 : Record 11012746);
    VAR
      DocumentLink@1100525002 : Record 11012747;
      RecordRef@1100525003 : RecordRef;
      Plot@1100525004 : Record 11012500;
    BEGIN
      DocumentLink.SETRANGE("Document No.", DocumentProperties."No.");
      DocumentLink.SETRANGE("Internal Company", DocumentProperties."Internal Company");
      DocumentLink.SETRANGE("Table No.", DATABASE::Plot);

      IF DocumentLink.FINDSET THEN BEGIN
        REPEAT
          RecordRef.GET(DocumentLink."Record ID");
          IF (RecordRef.NUMBER = DATABASE::Plot) THEN BEGIN
            RecordRef.SETTABLE(Plot);
            DotNetNAVDocument.PlotNumbers.Add(Plot."Plot No.");
          END;
        UNTIL DocumentLink.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE GetResponsiblePersonEmailAddress@1100527802(Employee@1100527800 : Record 5200;User@1100527801 : Record 2000000120) : Text;
    BEGIN
      IF (User."Authentication Email" <> '') THEN
        EXIT(User."Authentication Email");

      EXIT(Employee."Company E-Mail");
    END;

    [TryFunction]
    LOCAL PROCEDURE TestDocumentPropertiesDescription@1100528347(DocumentProperties@1100528300 : Record 11012746;MustHaveValue@1100528301 : Boolean);
    BEGIN
      IF (MustHaveValue) THEN
        DocumentProperties.TESTFIELD(Description)
      ELSE
        DocumentProperties.TESTFIELD(Description, '');
    END;

    [TryFunction]
    LOCAL PROCEDURE TestDocumentPropertiesDocumentType@1100528350(DocumentProperties@1100528300 : Record 11012746;MustHaveValue@1100528301 : Boolean);
    BEGIN
      IF (MustHaveValue) THEN
        DocumentProperties.TESTFIELD("Document Type")
      ELSE
        DocumentProperties.TESTFIELD("Document Type", '');
    END;

    [TryFunction]
    LOCAL PROCEDURE TestDocumentPropertiesFile@1100528339(DocumentProperties@1100528300 : Record 11012746;MustHaveValue@1100528301 : Boolean);
    BEGIN
      IF (MustHaveValue) THEN
        DocumentProperties.TESTFIELD(File)
      ELSE
        DocumentProperties.TESTFIELD(File, '');
    END;

    [TryFunction]
    LOCAL PROCEDURE TestDocumentPropertiesDocumentPortalSubsite@1100528352(DocumentProperties@1100528300 : Record 11012746;MustHaveValue@1100528301 : Boolean);
    BEGIN
      IF (MustHaveValue) THEN
        DocumentProperties.TESTFIELD("Document Portal Subsite")
      ELSE
        DocumentProperties.TESTFIELD("Document Portal Subsite", '');
    END;

    [TryFunction]
    LOCAL PROCEDURE TestDocumentPropertiesWebLink@1100528340(DocumentProperties@1100528300 : Record 11012746;MustHaveValue@1100528301 : Boolean);
    BEGIN
      IF (MustHaveValue) THEN
        DocumentProperties.TESTFIELD("Web link")
      ELSE
        DocumentProperties.TESTFIELD("Web link", '');
    END;

    [TryFunction]
    LOCAL PROCEDURE TestDPTAdditionalDataDateTimeFormat@1100528408(DPTAdditionalData@1100528300 : Record 11229827);
    BEGIN
      DPTAdditionalData.TESTFIELD("DateTime Format");
    END;

    [TryFunction]
    LOCAL PROCEDURE TestDPTAdditionalDataMaximumValue@1100528410(DPTAdditionalData@1100528300 : Record 11229827);
    BEGIN
      DPTAdditionalData.TESTFIELD("Maximum Value");
    END;

    [TryFunction]
    LOCAL PROCEDURE TestDPTAdditionalDataMinimumValue@1100528411(DPTAdditionalData@1100528300 : Record 11229827);
    BEGIN
      DPTAdditionalData.TESTFIELD("Minimum Value");
    END;

    [TryFunction]
    LOCAL PROCEDURE TestDPTAdditionalDataOptionGet@1100528413(DPTAdditionalData@1100528300 : Record 11229827;Language@1100528301 : Record 8);
    VAR
      DPTAdditionalDataOption@1100528302 : Record 11229828;
    BEGIN
      DPTAdditionalDataOption.SETRANGE("Source Type", DPTAdditionalData."Source Type");
      DPTAdditionalDataOption.SETRANGE("Additional Data Code", DPTAdditionalData.Code);
      DPTAdditionalDataOption.SETRANGE("Language Code", Language.Code);
      DPTAdditionalDataOption.FINDFIRST;
    END;

    [TryFunction]
    LOCAL PROCEDURE TestDPTAdditionalDataType@1100528412(DPTAdditionalData@1100528300 : Record 11229827);
    BEGIN
      DPTAdditionalData.TESTFIELD(Type);
    END;

    [TryFunction]
    LOCAL PROCEDURE TestDPTMetadataDescription@1100528401(DPTMetadata@1100528300 : Record 11229825;MustHaveValue@1100528301 : Boolean);
    BEGIN
      IF (MustHaveValue) THEN
        DPTMetadata.TESTFIELD(Description)
      ELSE
        DPTMetadata.TESTFIELD(Description, '');
    END;

    [TryFunction]
    LOCAL PROCEDURE TestDPTMetadataRefinerCode@1100528425(DPTMetadata@1100528300 : Record 11229825;MustHaveValue@1100528301 : Boolean);
    BEGIN
      IF (MustHaveValue) THEN
        DPTMetadata.TESTFIELD("Refiner Code")
      ELSE
        DPTMetadata.TESTFIELD("Refiner Code", '');
    END;

    [TryFunction]
    LOCAL PROCEDURE TestDPTMetadataRefinerDescription@1100528424(DPTMetadata@1100528300 : Record 11229825;MustHaveValue@1100528301 : Boolean);
    BEGIN
      IF (MustHaveValue) THEN
        DPTMetadata.TESTFIELD("Refiner Description")
      ELSE
        DPTMetadata.TESTFIELD("Refiner Description", '');
    END;

    [TryFunction]
    LOCAL PROCEDURE TestDPTMetadataRefinerPosition@1100528423(DPTMetadata@1100528300 : Record 11229825);
    BEGIN
      IF (DPTMetadata."Refiner Position" <= 0) THEN
        DPTMetadata.FIELDERROR("Refiner Position", Text009);
    END;

    [TryFunction]
    LOCAL PROCEDURE TestDPTMetadataRefinerType@1100528407(DPTMetadata@1100528300 : Record 11229825);
    BEGIN
      DPTMetadata.TESTFIELD("Refiner Type");
    END;

    [TryFunction]
    LOCAL PROCEDURE TestDPTSetupAppID@1100528328();
    BEGIN
      DPTSetup.TESTFIELD("App ID");
    END;

    [TryFunction]
    LOCAL PROCEDURE TestDPTSetupAppSecret@1100528326();
    BEGIN
      DPTSetup.TESTFIELD("App Secret");
    END;

    [TryFunction]
    LOCAL PROCEDURE TestDPTSetupAppURL@1100528310();
    BEGIN
      DPTSetup.TESTFIELD("Proxy URL");
    END;

    [TryFunction]
    LOCAL PROCEDURE TestDPTSetupAzureADClientID@1100528327();
    BEGIN
      DPTSetup.TESTFIELD("Azure AD App ID");
    END;

    [TryFunction]
    LOCAL PROCEDURE TestDPTSetupFileTransferPageURL@1100525011();
    BEGIN
      DPTSetup.TESTFIELD("File Transfer Site URL");
    END;

    [TryFunction]
    LOCAL PROCEDURE TestDPTSetupGuestSiteURL@1100528418();
    BEGIN
      DPTSetup.TESTFIELD("Guest Site URL");
    END;

    [TryFunction]
    LOCAL PROCEDURE TestDPTSetupGuestGroupName@1100528417();
    BEGIN
      DPTSetup.TESTFIELD("Guest Group Name");
    END;

    [TryFunction]
    LOCAL PROCEDURE TestDPTSetupInstrumentationKey@1100528431();
    BEGIN
      DPTSetup.TESTFIELD("Instrumentation Key");
    END;

    [TryFunction]
    LOCAL PROCEDURE TestDPTSetupIssuerID@1100529400();
    BEGIN
      DPTSetup.TESTFIELD("Issuer ID");
    END;

    [TryFunction]
    LOCAL PROCEDURE TestDPTSetupIssuerCertificateThumbprint@1100528319();
    BEGIN
      DPTSetup.TESTFIELD("Issuer Certificate Thumbprint");
    END;

    [TryFunction]
    LOCAL PROCEDURE TestDPTSetupLanguageCode@1100528303();
    BEGIN
      DPTSetup.TESTFIELD("Language Code");
    END;

    [TryFunction]
    LOCAL PROCEDURE TestDPTSetupPortalURL@1100528332();
    BEGIN
      DPTSetup.TESTFIELD("Portal URL");
    END;

    [TryFunction]
    LOCAL PROCEDURE TestDPTSetupSiteAdminPassword@1100528464();
    BEGIN
      DPTSetup.TESTFIELD("Site Admin Password");
    END;

    [TryFunction]
    LOCAL PROCEDURE TestDPTSetupSiteAdminUser@1100528451();
    BEGIN
      DPTSetup.TESTFIELD("Site Admin User");
    END;

    [TryFunction]
    LOCAL PROCEDURE TestDPTSetupSharepointVersion@1100528308();
    BEGIN
      IF (DPTSetup."SharePoint Version" < 1) THEN
        DPTSetup.FIELDERROR("SharePoint Version");
    END;

    [TryFunction]
    LOCAL PROCEDURE TestDPTSetupTimeZone@1100525013();
    BEGIN
      DPTSetup.TESTFIELD("Time Zone ID");
    END;

    [TryFunction]
    LOCAL PROCEDURE TestEmployeeCompanyEmail@1100528302(Employee@1100528300 : Record 5200;MustHaveValue@1100528301 : Boolean);
    BEGIN
      IF (MustHaveValue) THEN
        Employee.TESTFIELD("Company E-Mail")
      ELSE
        Employee.TESTFIELD("Company E-Mail", '');
    END;

    [TryFunction]
    LOCAL PROCEDURE TestEmployeeUser@1100528349(Employee@1100528300 : Record 5200);
    VAR
      UserSetup@1100528301 : Record 91;
      User@1100528302 : Record 2000000120;
    BEGIN
      UserSetup.SETRANGE("Employee No.", Employee."No.");
      UserSetup.FINDFIRST;
      User.SETRANGE("User Name", UserSetup."User ID");
      User.FINDFIRST;
      IF (DPTSetup."SharePoint Version" = DPTSetup."SharePoint Version"::"Sharepoint Online") THEN
        TestUserAuthenticationEmail(User)
      ELSE
        TestEmployeeCompanyEmail(Employee, TRUE);
    END;

    [TryFunction]
    LOCAL PROCEDURE TestEmployeeUserCount@1100528315(Employee@1100528300 : Record 5200);
    VAR
      UserSetup@1100528301 : Record 91;
    BEGIN
      UserSetup.SETRANGE("Employee No.", Employee."No.");
      IF (UserSetup.COUNT <> 1) THEN
        ERROR(Text011, UserSetup.TABLECAPTION, UserSetup.FIELDCAPTION("Employee No."), UserSetup."Employee No.");
    END;

    [TryFunction]
    LOCAL PROCEDURE TestEmployeeGet@1100528387(VAR Employee@1100528301 : Record 5200;EmployeeNo@1100528300 : Code[20]);
    BEGIN
      GetEmployee(Employee, EmployeeNo);
    END;

    [TryFunction]
    LOCAL PROCEDURE TestLanguageGet@1100528334(VAR Language@1100528300 : Record 8;SourceTable@1100528302 : Variant);
    BEGIN
      GetLanguage(Language, SourceTable);
    END;

    [TryFunction]
    LOCAL PROCEDURE TestLanguageWindowsLanguageID@1100528323(Language@1100528300 : Record 8);
    BEGIN
      Language.TESTFIELD("Windows Language ID");
    END;

    [TryFunction]
    LOCAL PROCEDURE TestMailTemplate@1100528373(MailTemplateNo@1100528300 : Integer;Language@1100528301 : Record 8);
    VAR
      MailTemplate@1100528302 : Record 11229450;
      MailTemplateManagement@1100528303 : Codeunit 11012622;
    BEGIN
      IF (NOT MailTemplateManagement.CheckMailTemplate(MailTemplateNo, FALSE)) THEN
        ERROR(MailTemplateErrorTxt, MailTemplate.TABLECAPTION, MailTemplateNo);
    END;

    [TryFunction]
    LOCAL PROCEDURE TestProjectAuthorityPermission@1100528364(ProjectAuthority@1100528300 : Record 11020216);
    VAR
      DPTAuthorityPermProject@1100528301 : Record 11072334;
    BEGIN
      DPTAuthorityPermProject.SETRANGE(Type, DPTAuthorityPermProject.Type::Access);
      DPTAuthorityPermProject.SETRANGE("Project No.", ProjectAuthority."Project No.");
      DPTAuthorityPermProject.SETRANGE("Contact No.", ProjectAuthority."Contact No.");
      DPTAuthorityPermProject.SETRANGE("Contact Person No.", ProjectAuthority."Contact Person No.");
      DPTAuthorityPermProject.FINDFIRST;
    END;

    [TryFunction]
    LOCAL PROCEDURE TestProjectRespPersPermission@1100528398(ProjectResponsiblePerson@1100528300 : Record 11012040);
    VAR
      DPTRespPersPermProject@1100528301 : Record 11072332;
    BEGIN
      DPTRespPersPermProject.SETRANGE(Type, DPTRespPersPermProject.Type::Access);
      DPTRespPersPermProject.SETRANGE("Project No.", ProjectResponsiblePerson."Project No.");
      DPTRespPersPermProject.SETRANGE("Employee No.", ProjectResponsiblePerson."Employee No.");
      DPTRespPersPermProject.FINDFIRST;
    END;

    [TryFunction]
    LOCAL PROCEDURE TestServiceAuthorityPermission@1100528435(ServiceAuthorityDPT@1100528300 : Record 11072298);
    VAR
      DPTAuthorityPermServLoc@1100528301 : Record 11072343;
    BEGIN
      DPTAuthorityPermServLoc.SETRANGE(Type, DPTAuthorityPermServLoc.Type::Access);
      DPTAuthorityPermServLoc.SETRANGE("Service Location No.", ServiceAuthorityDPT."Source Code");
      DPTAuthorityPermServLoc.SETRANGE("Contact No.", ServiceAuthorityDPT."Contact No.");
      DPTAuthorityPermServLoc.SETRANGE("Contact Person No.", ServiceAuthorityDPT."Contact Person No.");
      DPTAuthorityPermServLoc.FINDFIRST;
    END;

    [TryFunction]
    LOCAL PROCEDURE TestServiceRespPersPermission@1100528402(ServiceResponsiblePersonDPT@1100528300 : Record 11072297);
    VAR
      DPTRespPersPermServLoc@1100528301 : Record 11072340;
    BEGIN
      DPTRespPersPermServLoc.SETRANGE(Type, DPTRespPersPermServLoc.Type::Access);
      DPTRespPersPermServLoc.SETRANGE("Service Location No.", ServiceResponsiblePersonDPT."Source Code");
      DPTRespPersPermServLoc.SETRANGE("Employee No.", ServiceResponsiblePersonDPT."Employee No.");
      DPTRespPersPermServLoc.FINDFIRST;
    END;

    [TryFunction]
    LOCAL PROCEDURE TestUserGet@1100528313(VAR User@1100528300 : Record 2000000120);
    BEGIN
      GetUser(User);
    END;

    [TryFunction]
    LOCAL PROCEDURE TestUserAuthenticationEmail@1100528322(User@1100528300 : Record 2000000120);
    BEGIN
        User.TESTFIELD("Authentication Email");
    END;

    [TryFunction]
    LOCAL PROCEDURE TestUserSetupCount@1100528345(User@1100528300 : Record 2000000120);
    VAR
      UserSetupRec@1100528301 : Record 91;
      UserSetup@1100528302 : Record 91;
    BEGIN
      UserSetupRec.GET(User."User Name");
      UserSetup.SETRANGE("Employee No.", UserSetupRec."Employee No.");
      IF (UserSetup.COUNT <> 1) THEN
        ERROR(Text011, User.TABLECAPTION, User.FIELDCAPTION("User Security ID"), User."User Security ID");
    END;

    [TryFunction]
    LOCAL PROCEDURE TestUserSetupEmployeeNo@1100528346(User@1100528300 : Record 2000000120);
    VAR
      UserSetup@1100528301 : Record 91;
    BEGIN
      UserSetup.GET(User."User Name");
      UserSetup.TESTFIELD("Employee No.");
    END;

    LOCAL PROCEDURE UpdateExistingDocuments@1100525000(VAR DocumentLink@1100528300 : Record 11012747;SourceType@1100528303 : Option;SourceNo@1100528304 : Code[20]);
    VAR
      DocumentProperties@1100528301 : Record 11012746;
      DPTEventLog@1100528302 : Record 11229822;
    BEGIN
      IF (NOT DocumentLink.FINDSET(TRUE)) THEN
        EXIT;

      REPEAT
        DocumentProperties.GET(DocumentLink."Document No.");
        ShowProgress(DPTEventLog.GetSyncDocumentText, DocumentProperties.RECORDID, '');
        DocumentProperties.SetDPTFields(DocumentLink."Record ID");
        DocumentProperties.MODIFY;
      UNTIL (DocumentLink.NEXT = 0);
    END;

    [TryFunction]
    LOCAL PROCEDURE ValidateConnection@1100529401();
    BEGIN
      DotNetDPTServiceFactory.ValidateConnection;
    END;

    LOCAL PROCEDURE GetEmail@1100527807(VAR Employee@1100527800 : Record 5200;VAR User@1100527801 : Record 2000000120) : Text;
    BEGIN
      IF (User."Authentication Email" <> '') THEN
        EXIT(User."Authentication Email");

      EXIT(Employee."Company E-Mail");
    END;

    BEGIN
    END.
  }
}

