OBJECT Codeunit 11012251 Import Data From XML File
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    Permissions=TableData 86=rim,
                TableData 730=rim,
                TableData 747=rim;
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE ImportDemoData@1100525000(FileName@1100525000 : Text[260]);
    VAR
      XmlDoc@1100409000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XmlNodeListTables@1100409001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      i@1100525003 : Integer;
      XMLDOMManagement@1100525001 : Codeunit 6224;
    BEGIN
      XmlDoc := XmlDoc.XmlDocument;
      XMLDOMManagement.LoadXMLDocumentFromFile(FileName,XmlDoc);

      XmlNodeListTables := XmlDoc.SelectNodes('/demodata/table');

      FOR i := 0 TO XmlNodeListTables.Count - 1 DO
        ImportTable(XmlNodeListTables.Item(i));
    END;

    LOCAL PROCEDURE ImportTable@1100525001(XmlElementTable@1100409000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement");
    VAR
      XmlNodeListRecords@1100409002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      RecRef@1100525001 : RecordRef;
      TableID@1100525002 : Integer;
      i@1100525004 : Integer;
      CallOnInsert@1100525005 : Boolean;
    BEGIN
      EVALUATE(TableID, FORMAT(XmlElementTable.GetAttribute('id')));
      CallOnInsert := (UPPERCASE(XmlElementTable.GetAttribute('oninsert')) = 'TRUE');

      RecRef.OPEN(TableID);

      XmlNodeListRecords := XmlElementTable.SelectNodes('record');

      FOR i := 0 TO XmlNodeListRecords.Count - 1 DO
        ImportRecord(XmlNodeListRecords.Item(i), RecRef, CallOnInsert);

      RecRef.CLOSE;
    END;

    LOCAL PROCEDURE ImportRecord@1100525002(XmlElementRecord@1100409000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";RecRef@1100525001 : RecordRef;CallOnInsert@1100525004 : Boolean);
    VAR
      XmlNodeListFields@1100409001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      i@1100525003 : Integer;
    BEGIN
      RecRef.INIT;

      XmlNodeListFields := XmlElementRecord.SelectNodes('field');

      FOR i := 0 TO XmlNodeListFields.Count - 1 DO
        ImportField(XmlNodeListFields.Item(i), RecRef);

      IF NOT RecRef.INSERT(CallOnInsert) THEN
        RecRef.MODIFY;
    END;

    LOCAL PROCEDURE ImportField@1100525004(XmlElementField@1100409000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";RecRef@1100525001 : RecordRef);
    VAR
      Field@1100525006 : Record 2000000041;
      FldRef@1100525003 : FieldRef;
      RecordID@1100525021 : RecordID;
      Value@1100525005 : Text[1024];
      Text@1100525004 : Text[1024];
      Code@1100525007 : Code[1024];
      GUID@1100525020 : GUID;
      DateFormula@1100525008 : DateFormula;
      Date@1100525015 : Date;
      Time@1100525016 : Time;
      DateTime@1100525017 : DateTime;
      Duration@1100525019 : Duration;
      Decimal@1100525012 : Decimal;
      BigInteger@1100525018 : BigInteger;
      Option@1100525013 : Option;
      FieldNo@1100525002 : Integer;
      Integer@1100525011 : Integer;
      CallOnValidate@1100525010 : Boolean;
      Boolean@1100525014 : Boolean;
    BEGIN
      EVALUATE(FieldNo, FORMAT(XmlElementField.GetAttribute('no')));
      CallOnValidate := (UPPERCASE(XmlElementField.GetAttribute('onvalidate')) = 'TRUE');

      Value := FORMAT(XmlElementField.InnerText);

      Field.GET(RecRef.NUMBER, FieldNo);
      FldRef := RecRef.FIELD(FieldNo);

      CASE Field.Type OF
        Field.Type::Integer:
          BEGIN
            EVALUATE(Integer, Value, 9);
            CASE CallOnValidate OF
              TRUE: FldRef.VALIDATE(Integer);
              FALSE: FldRef.VALUE := Integer;
            END;
          END;
        Field.Type::Text:
          BEGIN
            EVALUATE(Text, Value, 9);
            CASE CallOnValidate OF
              TRUE: FldRef.VALIDATE(Text);
              FALSE: FldRef.VALUE := Text;
            END;
          END;
        Field.Type::Code:
          BEGIN
            EVALUATE(Code, Value, 9);
            CASE CallOnValidate OF
              TRUE: FldRef.VALIDATE(Code);
              FALSE: FldRef.VALUE := Code;
            END;
          END;
        Field.Type::Decimal:
          BEGIN
            EVALUATE(Decimal, Value, 9);
            CASE CallOnValidate OF
              TRUE: FldRef.VALIDATE(Decimal);
              FALSE: FldRef.VALUE := Decimal;
            END;
          END;
        Field.Type::Option:
          BEGIN
            EVALUATE(Option, Value, 9);
            CASE CallOnValidate OF
              TRUE: FldRef.VALIDATE(Option);
              FALSE: FldRef.VALUE := Option;
            END;
          END;
        Field.Type::Boolean:
          BEGIN
            EVALUATE(Boolean, Value, 9);
            CASE CallOnValidate OF
              TRUE: FldRef.VALIDATE(Boolean);
              FALSE: FldRef.VALUE := Boolean;
            END;
          END;
        Field.Type::Date:
          BEGIN
            EVALUATE(Date, Value, 9);
            CASE CallOnValidate OF
              TRUE: FldRef.VALIDATE(Date);
              FALSE: FldRef.VALUE := Date;
            END;
          END;
        Field.Type::Time:
          BEGIN
            EVALUATE(Time, Value, 9);
            CASE CallOnValidate OF
              TRUE: FldRef.VALIDATE(Time);
              FALSE: FldRef.VALUE := Time;
            END;
          END;
        Field.Type::DateTime:
          BEGIN
            IF Value <> '' THEN
              EVALUATE(DateTime, Value, 9)
            ELSE
              DateTime := 0DT;
            CASE CallOnValidate OF
              TRUE: FldRef.VALIDATE(DateTime);
              FALSE: FldRef.VALUE := DateTime;
            END;
          END;
        Field.Type::DateFormula:
          BEGIN
            EVALUATE(DateFormula, Value, 9);
            CASE CallOnValidate OF
              TRUE: FldRef.VALIDATE(DateFormula);
              FALSE: FldRef.VALUE := DateFormula;
            END;
          END;
        Field.Type::BigInteger:
          BEGIN
            EVALUATE(BigInteger, Value, 9);
            CASE CallOnValidate OF
              TRUE: FldRef.VALIDATE(BigInteger);
              FALSE: FldRef.VALUE := BigInteger;
            END;
          END;
        Field.Type::Duration:
          BEGIN
            EVALUATE(Duration, Value, 9);
            CASE CallOnValidate OF
              TRUE: FldRef.VALIDATE(Duration);
              FALSE: FldRef.VALUE := Duration;
            END;
          END;
        Field.Type::GUID:
          BEGIN
            EVALUATE(GUID, Value, 9);
            CASE CallOnValidate OF
              TRUE: FldRef.VALIDATE(GUID);
              FALSE: FldRef.VALUE := GUID;
            END;
          END;
        Field.Type::RecordID:
          BEGIN
            EVALUATE(RecordID, Value, 9);
            CASE CallOnValidate OF
              TRUE: FldRef.VALIDATE(RecordID);
              FALSE: FldRef.VALUE := RecordID;
            END;
          END;
      END;
    END;

    BEGIN
    END.
  }
}

