OBJECT Codeunit 43 LanguageManagement
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      SavedGlobalLanguageID@1000 : Integer;

    [External]
    PROCEDURE SetGlobalLanguage@1();
    VAR
      TempLanguage@1001 : TEMPORARY Record 2000000045;
    BEGIN
      GetApplicationLanguages(TempLanguage);

      WITH TempLanguage DO BEGIN
        SETCURRENTKEY(Name);
        IF GET(GLOBALLANGUAGE) THEN;
        PAGE.RUN(PAGE::"Application Languages",TempLanguage);
      END;
    END;

    [TryFunction]
    [External]
    PROCEDURE TrySetGlobalLanguage@8(LanguageID@1000 : Integer);
    BEGIN
      GLOBALLANGUAGE(LanguageID);
    END;

    [External]
    PROCEDURE GetApplicationLanguages@2(VAR TempLanguage@1034 : TEMPORARY Record 2000000045);
    VAR
      Language@1035 : Record 2000000045;
    BEGIN
      WITH Language DO BEGIN
        GetLanguageFilters(Language);
        IF FINDSET THEN
          REPEAT
            TempLanguage := Language;
            TempLanguage.INSERT;
          UNTIL NEXT = 0;
      END;
    END;

    [External]
    PROCEDURE ApplicationLanguage@9() : Integer;
    BEGIN
      EXIT(1033);
    END;

    [External]
    PROCEDURE ValidateApplicationLanguage@3(LanguageID@1037 : Integer);
    VAR
      TempLanguage@1038 : TEMPORARY Record 2000000045;
    BEGIN
      GetApplicationLanguages(TempLanguage);

      WITH TempLanguage DO BEGIN
        SETRANGE("Language ID",LanguageID);
        FINDFIRST;
      END;
    END;

    [External]
    PROCEDURE ValidateWindowsLocale@11(LocaleID@1037 : Integer);
    VAR
      WindowsLanguage@1038 : Record 2000000045;
    BEGIN
      WindowsLanguage.SETRANGE("Language ID",LocaleID);
      WindowsLanguage.FINDFIRST;
    END;

    [External]
    PROCEDURE LookupApplicationLanguage@4(VAR LanguageID@1040 : Integer);
    VAR
      TempLanguage@1039 : TEMPORARY Record 2000000045;
    BEGIN
      GetApplicationLanguages(TempLanguage);

      WITH TempLanguage DO BEGIN
        SETCURRENTKEY(Name);
        IF GET(LanguageID) THEN;
        IF PAGE.RUNMODAL(PAGE::"Windows Languages",TempLanguage) = ACTION::LookupOK THEN
          LanguageID := "Language ID";
      END;
    END;

    [External]
    PROCEDURE LookupWindowsLocale@5(VAR LocaleID@1000 : Integer);
    VAR
      WindowsLanguage@1002 : Record 2000000045;
    BEGIN
      WITH WindowsLanguage DO BEGIN
        SETCURRENTKEY(Name);
        IF PAGE.RUNMODAL(PAGE::"Windows Languages",WindowsLanguage) = ACTION::LookupOK THEN
          LocaleID := "Language ID";
      END;
    END;

    [External]
    PROCEDURE SetGlobalLanguageByCode@150(LanguageCode@1000 : Code[10]);
    VAR
      Language@1001 : Record 8;
    BEGIN
      IF LanguageCode = '' THEN
        EXIT;
      SavedGlobalLanguageID := GLOBALLANGUAGE;
      GLOBALLANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    [External]
    PROCEDURE RestoreGlobalLanguage@151();
    BEGIN
      IF SavedGlobalLanguageID <> 0 THEN BEGIN
        GLOBALLANGUAGE(SavedGlobalLanguageID);
        SavedGlobalLanguageID := 0;
      END;
    END;

    LOCAL PROCEDURE GetLanguageFilters@6(VAR WindowsLanguage@1000 : Record 2000000045);
    BEGIN
      WindowsLanguage.SETRANGE("Localization Exist",TRUE);
      WindowsLanguage.SETRANGE("Globally Enabled",TRUE);
    END;

    [External]
    PROCEDURE GetWindowsLanguageNameFromLanguageCode@12(LanguageCode@1000 : Code[10]) : Text;
    VAR
      Language@1002 : Record 8;
    BEGIN
      IF LanguageCode = '' THEN
        EXIT('');

      Language.SETAUTOCALCFIELDS("Windows Language Name");
      IF Language.GET(LanguageCode) THEN
        EXIT(Language."Windows Language Name");

      EXIT('');
    END;

    [External]
    PROCEDURE GetWindowsLanguageIDFromLanguageName@17(LanguageName@1000 : Text) : Integer;
    VAR
      WindowsLanguage@1001 : Record 2000000045;
    BEGIN
      IF LanguageName = '' THEN
        EXIT(0);
      WindowsLanguage.SETRANGE("Localization Exist",TRUE);
      WindowsLanguage.SETFILTER(Name,'@*' + COPYSTR(LanguageName,1,MAXSTRLEN(WindowsLanguage.Name)) + '*');
      IF NOT WindowsLanguage.FINDFIRST THEN
        EXIT(0);

      EXIT(WindowsLanguage."Language ID");
    END;

    [External]
    PROCEDURE GetLanguageCodeFromLanguageID@20(LanguageID@1000 : Integer) : Code[10];
    VAR
      Language@1001 : Record 8;
    BEGIN
      IF LanguageID = 0 THEN
        EXIT('');
      Language.SETRANGE("Windows Language ID",LanguageID);
      IF Language.FINDFIRST THEN
        EXIT(Language.Code);
      EXIT('');
    END;

    [External]
    PROCEDURE GetWindowsLanguageNameFromLanguageID@7(LanguageID@1000 : Integer) : Text;
    VAR
      WindowsLanguage@1002 : Record 2000000045;
    BEGIN
      IF LanguageID = 0 THEN
        EXIT('');

      IF WindowsLanguage.GET(LanguageID) THEN
        EXIT(WindowsLanguage.Name);

      EXIT('');
    END;

    [EventSubscriber(Codeunit,2000000004,GetApplicationLanguage)]
    LOCAL PROCEDURE GetApplicationLanguage@10(VAR language@1000 : Integer);
    BEGIN
      language := ApplicationLanguage;
    END;

    [External]
    PROCEDURE GetTranslatedFieldCaption@14(LanguageCode@1000 : Code[10];TableID@1001 : Integer;FieldId@1004 : Integer) TranslatedText : Text;
    VAR
      Language@1002 : Record 8;
      Field@1005 : Record 2000000041;
      CurrentLanguageCode@1003 : Integer;
    BEGIN
      CurrentLanguageCode := GLOBALLANGUAGE;
      IF (LanguageCode <> '') AND (Language.GetLanguageID(LanguageCode) <> CurrentLanguageCode) THEN BEGIN
        GLOBALLANGUAGE(Language.GetLanguageID(LanguageCode));
        Field.GET(TableID,FieldId);
        TranslatedText := Field."Field Caption";
        GLOBALLANGUAGE(CurrentLanguageCode);
      END ELSE BEGIN
        Field.GET(TableID,FieldId);
        TranslatedText := Field."Field Caption";
      END;
    END;

    [TryFunction]
    [External]
    PROCEDURE TryGetCultureName@25(Culture@1000 : Integer;VAR CultureName@1002 : Text);
    VAR
      CultureInfo@1001 : DotNet "'mscorlib, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.CultureInfo";
    BEGIN
      CultureInfo := CultureInfo.CultureInfo(Culture);
      CultureName := CultureInfo.Name;
    END;

    BEGIN
    END.
  }
}

