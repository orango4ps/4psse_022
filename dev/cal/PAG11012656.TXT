OBJECT Page 11012656 Available Employees - Rail
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=VerfÅgbare Mitarbeiter;
               ENU=Available Employees;
               NLD=Beschikbare werknemers;
               NOR=Tilgjengelige ansatte;
               SVE=TillgÑngliga anstÑllda];
    SaveValues=Yes;
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    SourceTable=Table5200;
    PageType=Worksheet;
    UsageCategory=Lists;
    OnOpenPage=BEGIN
                 //**4PS Generated Code. Do Not Change.sn01
                 DPA_IsHardFilter := DPA_SetFilters(CurrPage.OBJECTID(FALSE));
                 //**4PS Generated Code.en01
                 IF gInitSelection THEN BEGIN
                   CostComponentFilter := gCostComponentFilter;
                   DateFrom := gDateFrom;
                   DateTo := gDateTo;
                   TimeFrom := gTimeFrom;
                   TimeTo := gTimeTo;
                 END;

                 DetermineDaysAndHoursToPlan();
               END;

    OnFindRecord=VAR
                   lvPos@1100529103 : Integer;
                   lvLen@1100529102 : Integer;
                   lvStep@1100529101 : Integer;
                   lvWhich@1100529100 : Text[30];
                 BEGIN
                   //*Which can contain the characters: '=', '<', '>' (or combinations of these) or '-', '+' (not in combination with other)
                   lvLen := STRLEN(Which);
                   FOR lvPos := 1 TO lvLen DO BEGIN
                     lvWhich := COPYSTR(Which, lvPos, 1);
                     EmplRec2.COPY(Rec);
                     IF EmplRec2.FIND(lvWhich) THEN BEGIN
                       CASE lvWhich OF
                         '>', '-': lvStep := 1;
                         '<', '+': lvStep := -1;
                         ELSE lvStep := 0;
                       END;
                       REPEAT
                         IF ShowEmployee(EmplRec2) THEN BEGIN
                           Rec := EmplRec2;
                           EXIT(TRUE);
                         END;
                       UNTIL EmplRec2.NEXT(lvStep) = 0;
                     END;
                   END;
                   EXIT(FALSE);
                 END;

    OnNextRecord=VAR
                   lvStep@1100529101 : Integer;
                   lvResultSteps@1100529100 : Integer;
                 BEGIN
                   IF Steps = 0 THEN
                     EXIT(0);

                   EmplRec2.COPY(Rec);
                   IF Steps < 0 THEN
                     lvStep := -1
                   ELSE
                     lvStep := 1;

                   IF NOT (EmplRec2.NEXT(lvStep) = 0) THEN BEGIN
                     REPEAT
                       IF ShowEmployee(EmplRec2) THEN BEGIN
                         Rec := EmplRec2;
                         lvResultSteps := lvResultSteps + lvStep;
                         IF lvResultSteps = Steps THEN
                           EXIT(lvResultSteps);
                       END;
                     UNTIL EmplRec2.NEXT(lvStep) = 0;
                   END;
                   EXIT(lvResultSteps);
                 END;

    OnNewRecord=BEGIN
                  //**4PS Generated Code. Do Not Change.sn02
                  DPA_SetDefaultDepartment;
                  //**4PS Generated Code.en02
                END;

    OnInsertRecord=VAR
                     xRecRef@1100529100 : RecordRef;
                   BEGIN
                     //**4PS Generated Code. Do Not Change.sn05
                     xRecRef.GETTABLE(xRec);
                     DPA_SetDefaultDpmtFromNoSeries(xRecRef);
                     //**4PS Generated Code.en05
                   END;

    ActionList=ACTIONS
    {
      { 1100529111;  ;ActionContainer;
                      CaptionML=[DEU=&Mitarbeiter;
                                 ENU=E&mployee;
                                 NLD=W&erknemer;
                                 NOR=A&nsatt;
                                 SVE=&Personal];
                      ActionContainerType=ActionItems }
      { 1100529112;1 ;Action    ;
                      CaptionML=[DEU=K&ostenkomponenten pro Mitarbeiter;
                                 ENU=C&ost Components by Employee;
                                 NLD=Kosten&componenten per werknemer];
                      Image=Cost;
                      OnAction=VAR
                                 lvCostCompByEmplRec@1100529101 : Record 11012606;
                                 lvCostCompByEmplFrm@1100529100 : Page 11012638;
                               BEGIN
                                 lvCostCompByEmplRec.SETRANGE("Employee No.", "No.");
                                 lvCostCompByEmplFrm.SETTABLEVIEW(lvCostCompByEmplRec);
                                 lvCostCompByEmplFrm.EDITABLE(FALSE);
                                 lvCostCompByEmplFrm.RUNMODAL;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1100529100;;Container;
                ContainerType=ContentArea }

    { 1100529101;1;Group  ;
                GroupType=Group }

    { 1100529102;2;Field  ;
                CaptionML=[DEU=Kostenkomponentenfilter;
                           ENU=Cost Component Filter;
                           NLD=Kostencomponentfilter;
                           NOR=Kostdel, filter;
                           SVE=Kostnadsdel, filter];
                SourceExpr=CostComponentFilter;
                OnValidate=BEGIN
                             CurrPage.UPDATE;
                           END;

                OnLookup=VAR
                           lvCostCompFrm@1100529100 : Page 11012055;
                         BEGIN
                           lvCostCompFrm.LOOKUPMODE(TRUE);
                           IF (NOT (lvCostCompFrm.RUNMODAL = ACTION::LookupOK)) OR (NOT CurrPage.EDITABLE) THEN
                             EXIT(FALSE)
                           ELSE
                             Text := lvCostCompFrm.GetSelectionFilter;
                           EXIT(TRUE);
                         END;
                          }

    { 1100529103;2;Field  ;
                CaptionML=[DEU=Datum von;
                           ENU=Date from;
                           NLD=Datum van];
                SourceExpr=DateFrom;
                OnValidate=BEGIN
                             IF (DateFrom <> 0D) AND (DateTo < DateFrom) THEN
                               DateTo := DateFrom;

                             DetermineDaysAndHoursToPlan();
                           END;
                            }

    { 1100529104;2;Field  ;
                CaptionML=[DEU=Datum bis eins.;
                           ENU=Date to;
                           NLD=Datum t/m;
                           NOR=Dato til;
                           SVE=Datum till];
                SourceExpr=DateTo;
                OnValidate=BEGIN
                             IF (DateFrom <> 0D) AND (DateTo < DateFrom) THEN
                               DateTo := DateFrom;

                             DetermineDaysAndHoursToPlan();
                           END;
                            }

    { 1100529105;2;Field  ;
                Name=<TimeFrom>;
                CaptionML=[DEU=Zeit von;
                           ENU=Time from;
                           NLD=Tijd van];
                SourceExpr=TimeFrom;
                OnValidate=BEGIN
                             HourAccFunctionsCU.TimeFormatHhMmCheck(TimeFrom);
                             DetermineDaysAndHoursToPlan();
                           END;
                            }

    { 1100529106;2;Field  ;
                Name=<TimeTo>;
                CaptionML=[DEU=Zeit bis;
                           ENU=Time to;
                           NLD=Tijd t/m];
                SourceExpr=TimeTo;
                OnValidate=BEGIN
                             HourAccFunctionsCU.TimeFormatHhMmCheck(TimeTo);
                             DetermineDaysAndHoursToPlan();
                           END;
                            }

    { 1100529107;2;Field  ;
                Name=<InclNotAvailable>;
                CaptionML=[DEU=Einschl. Nicht verfÅgbar;
                           ENU=Incl. Not Available;
                           NLD=Incl. niet-beschikbaar];
                SourceExpr=InclNotAvailable }

    { 1100529108;2;Field  ;
                Name=<DaysToPlan>;
                CaptionML=[DEU=Zu planende Tage;
                           ENU=Days To Plan;
                           NLD=Te plannen dagen];
                BlankZero=Yes;
                SourceExpr=DaysToPlan;
                Editable=FALSE }

    { 1100529109;2;Field  ;
                Name=<HoursByDayToPlan>;
                CaptionML=[DEU=Zu planende Stunden per Tag;
                           ENU=Hours To Plan by Day;
                           NLD=Te plannen uren per dag];
                BlankZero=Yes;
                SourceExpr=HoursByDayToPlan;
                Editable=FALSE }

    { 1100529110;2;Field  ;
                Name=<HoursToPlan>;
                CaptionML=[DEU=Stunden nach Plan;
                           ENU=Hours To Plan;
                           NLD=Te plannen uren];
                BlankZero=Yes;
                SourceExpr=HoursToPlan;
                Editable=FALSE }

    { 1100529113;1;Group  ;
                GroupType=Repeater }

    { 1100529114;2;Field  ;
                SourceExpr="No.";
                Editable=FALSE }

    { 1100529115;2;Field  ;
                SourceExpr="First Name";
                Editable=FALSE }

    { 1100529116;2;Field  ;
                SourceExpr="Middle Name";
                Editable=FALSE }

    { 1100529117;2;Field  ;
                SourceExpr="Last Name";
                Editable=FALSE }

    { 1100529118;2;Field  ;
                SourceExpr=Initials;
                Editable=FALSE }

    { 1100529119;2;Field  ;
                SourceExpr="Full Name";
                Editable=FALSE }

    { 1100529120;2;Field  ;
                SourceExpr="Default Cost Component";
                Editable=FALSE }

    { 1100529121;2;Field  ;
                CaptionML=[DEU=Funktionsname;
                           ENU=Function Name;
                           NLD=Functienaam;
                           NOR=Funksjonsnavn;
                           SVE=Funktionsnamn];
                SourceExpr=FunctionName;
                Editable=FALSE }

    { 1100529122;2;Field  ;
                SourceExpr=Employer;
                Editable=FALSE }

    { 1100529123;2;Field  ;
                SourceExpr=External;
                Editable=FALSE }

    { 1100529124;2;Field  ;
                CaptionML=[DEU=VerfÅgbare Stunden;
                           ENU=Available Hours;
                           NLD=Beschikbare uren;
                           NOR=Tilgjengelige timer;
                           SVE=TillgÑngliga timmar];
                BlankZero=Yes;
                SourceExpr=GetHoursAvailable;
                Editable=FALSE }

    { 1100529125;2;Field  ;
                CaptionML=[DEU=Geplante Stunden;
                           ENU=Planned Hours;
                           NLD=Geplande uren;
                           NOR=Planlagte timer;
                           SVE=Planerade timmar];
                BlankZero=Yes;
                SourceExpr=GetHoursPlanned;
                Editable=FALSE;
                OnLookup=VAR
                           lvEmplRec@1100529101 : Record 5200;
                         BEGIN
                           lvEmplRec.SETRANGE("No.", "No.");
                           //lvCapPlanFrm.SETTABLEVIEW(lvEmplRec);
                           //IF DateFrom <> 0D THEN
                             //lvCapPlanFrm.InitSelection(DateFrom, CostComponentFilter)
                           //ELSE
                           //  lvCapPlanFrm.InitSelection(TODAY, CostComponentFilter);
                           //lvCapPlanFrm.RUNMODAL;
                         END;
                          }

    { 1100529126;2;Field  ;
                CaptionML=[DEU=Geplante Stunden gesamt;
                           ENU=Total Planned Hours;
                           NLD=Totaal geplande uren];
                BlankZero=Yes;
                SourceExpr=GetPlannedHoursOnDays;
                Visible=FALSE;
                Editable=FALSE;
                OnDrillDown=VAR
                              lvCapPlanRec@1100529100 : Record 11012623;
                            BEGIN
                              IF NOT External THEN
                                lvCapPlanRec.SETRANGE("Vendor No.", '')
                              ELSE
                                lvCapPlanRec.SETRANGE("Vendor No.", Employer);
                              lvCapPlanRec.SETRANGE("Employee No.", "No.");
                              lvCapPlanRec.SETRANGE(Date, DateFrom, DateTo);
                              PAGE.RUNMODAL(PAGE::"Capacity Planning List - Rail", lvCapPlanRec);
                            END;
                             }

    { 1100529127;2;Field  ;
                SourceExpr=City;
                Editable=FALSE }

    { 1100529128;2;Field  ;
                SourceExpr="Post Code";
                Editable=FALSE }

    { 1100529129;2;Field  ;
                SourceExpr="Country/Region Code";
                Editable=FALSE }

    { 1100529130;2;Field  ;
                SourceExpr=Extension;
                Editable=FALSE }

    { 1100529131;2;Field  ;
                SourceExpr="Phone No.";
                Editable=FALSE }

    { 1100529132;2;Field  ;
                SourceExpr="Mobile Phone No.";
                Editable=FALSE }

    { 1100529133;2;Field  ;
                SourceExpr="E-Mail";
                Editable=FALSE }

    { 1100529134;2;Field  ;
                SourceExpr="Search Name";
                Editable=FALSE }

    { 1100529135;2;Field  ;
                SourceExpr=Comment;
                Editable=FALSE }

  }
  CODE
  {
    VAR
      EmplRec2@1100529124 : Record 5200;
      CostCompRec@1100529123 : Record 11012012;
      CompByEmplRec@1100529122 : Record 11012606;
      TmpHrsAvailableRec@1100529121 : TEMPORARY Record 11012607;
      TmpHrsPlannedRec@1100529120 : TEMPORARY Record 11012607;
      HourAccFunctionsCU@1100529119 : Codeunit 11012607;
      CapPlanCU@1100529118 : Codeunit 11012610;
      DateFrom@1100529117 : Date;
      DateTo@1100529116 : Date;
      gDateFrom@1100529115 : Date;
      gDateTo@1100529114 : Date;
      TimeFrom@1100529113 : Time;
      TimeTo@1100529112 : Time;
      gTimeFrom@1100529111 : Time;
      gTimeTo@1100529110 : Time;
      gInitSelection@1100529109 : Boolean;
      InclNotAvailable@1100529108 : Boolean;
      DaysToPlan@1100529107 : Integer;
      HoursByDayToPlan@1100529106 : Decimal;
      HoursToPlan@1100529105 : Decimal;
      CostComponentFilter@1100529104 : Code[250];
      gCostComponentFilter@1100529103 : Code[250];
      gEmplNo@1100529102 : Code[20];
      DPA_IsHardFilter@1100529100 : Boolean;

    PROCEDURE InitSelections@1210190002(ICostComponentFilter@1210190000 : Code[250];IDateFrom@1210190001 : Date;IDateTo@1210190002 : Date;ITimeFrom@1210190003 : Time;ITimeTo@1210190004 : Time;IAssEmplRec@1210190005 : Record 11012621);
    BEGIN
      gInitSelection := TRUE;
      gCostComponentFilter := ICostComponentFilter;
      gDateFrom := IDateFrom;
      gDateTo := IDateTo;
      gTimeFrom := ITimeFrom;
      gTimeTo := ITimeTo;
      gEmplNo := IAssEmplRec."Employee No.";
    END;

    PROCEDURE DetermineDaysAndHoursToPlan@1210190004();
    BEGIN
      DaysToPlan := 0;
      HoursByDayToPlan := 0;
      HoursToPlan := 0;
      IF (DateFrom <> 0D) AND (DateTo <> 0D) THEN BEGIN
        DaysToPlan := (DateTo - DateFrom + 1);
        IF (TimeFrom <> 0T) AND (TimeTo <> 0T) THEN BEGIN
          HoursByDayToPlan := HourAccFunctionsCU.CalcHoursWithinStartEndTime(TimeFrom, TimeTo);
          HoursToPlan := DaysToPlan * HoursByDayToPlan;
        END;
      END;
    END;

    PROCEDURE FunctionName@1210190007() : Text[50];
    BEGIN
      IF CostCompRec.GET("Default Cost Component") THEN
        EXIT(CostCompRec.Description);

      EXIT('');
    END;

    PROCEDURE ShowEmployee@1210190000(VAR IEmplRec@1210190000 : Record 5200) : Boolean;
    VAR
      lvHoursPlanned@1210190001 : Decimal;
      lvHoursAvailable@1210190002 : Decimal;
    BEGIN
      WITH IEmplRec DO BEGIN
        IF CostComponentFilter <> '' THEN BEGIN
          CompByEmplRec.SETRANGE("Employee No.", "No.");
          CompByEmplRec.SETFILTER("Cost Component", CostComponentFilter);
          IF NOT CompByEmplRec.FIND('-') THEN
            EXIT(FALSE);
        END;

        IF TmpHrsAvailableRec.GET("No.", '') THEN
          TmpHrsAvailableRec.DELETE;
        IF TmpHrsPlannedRec.GET("No.", '') THEN
          TmpHrsPlannedRec.DELETE;
        IF (DateFrom <> 0D) AND (DateTo <> 0D) AND (TimeFrom <> 0T) AND (TimeTo <> 0T) THEN BEGIN
          CapPlanCU.CalculatePlanAvailHoursOnTime("No.", DateFrom, DateTo, TimeFrom, TimeTo, lvHoursPlanned, lvHoursAvailable);
          IF (lvHoursAvailable = 0) AND ("No." <> gEmplNo) AND (NOT InclNotAvailable) THEN
            EXIT(FALSE);
          TmpHrsAvailableRec."Employee No." := "No.";
          TmpHrsAvailableRec."Cost Object" := '';
          TmpHrsAvailableRec.Rate := lvHoursAvailable;
          TmpHrsAvailableRec.INSERT;
          //
          TmpHrsPlannedRec."Employee No." := "No.";
          TmpHrsPlannedRec."Cost Object" := '';
          TmpHrsPlannedRec.Rate := lvHoursPlanned;
          TmpHrsPlannedRec.INSERT;
        END;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE GetHoursAvailable@1210190003() : Decimal;
    BEGIN
      IF TmpHrsAvailableRec.GET("No.", '') THEN
        EXIT(TmpHrsAvailableRec.Rate);

      EXIT(0);
    END;

    PROCEDURE GetHoursPlanned@1210190008() : Decimal;
    BEGIN
      IF TmpHrsPlannedRec.GET("No.", '') THEN
        EXIT(TmpHrsPlannedRec.Rate);

      EXIT(0);
    END;

    PROCEDURE GetPlannedHoursOnDays@1210190001() : Decimal;
    BEGIN
      EXIT(CapPlanCU.CalculatePlannedHoursOnDays("No.", DateFrom, DateTo));
    END;

    BEGIN
    END.
  }
}

