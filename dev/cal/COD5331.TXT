OBJECT Codeunit 5331 CRM Coupling Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW113.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      RemoveCoupledContactsUnderCustomerQst@1000 : TextConst '@@@=%1 is a number, %2 is CRM Product Name;ENU=The Customer and %2 Account have %1 child Contact records coupled to one another. Do you want to delete their couplings as well?;NOR=Kunden og %2-kontoen har %1 poster for underordnede kontaktposter knyttet til hverandre. Vil du slette koblingene ogs†?;SVE=Kunden och %2-kontot har %1 underordnade kontaktposter kopplade till varandra. Vill du ta bort dessa kopplingar ocks†?';
      CRMProductName@1001 : Codeunit 5344;

    [External]
    PROCEDURE IsRecordCoupledToCRM@10(RecordID@1000 : RecordID) : Boolean;
    VAR
      CRMIntegrationRecord@1001 : Record 5331;
    BEGIN
      EXIT(CRMIntegrationRecord.IsRecordCoupled(RecordID));
    END;

    [External]
    PROCEDURE IsRecordCoupledToNAV@2(CRMID@1000 : GUID;NAVTableID@1001 : Integer) : Boolean;
    VAR
      CRMIntegrationRecord@1002 : Record 5331;
      NAVRecordID@1003 : RecordID;
    BEGIN
      EXIT(CRMIntegrationRecord.FindRecordIDFromID(CRMID,NAVTableID,NAVRecordID));
    END;

    LOCAL PROCEDURE AssertTableIsMapped@4(TableID@1001 : Integer);
    VAR
      IntegrationTableMapping@1000 : Record 5335;
    BEGIN
      IntegrationTableMapping.SETRANGE("Table ID",TableID);
      IntegrationTableMapping.FINDFIRST;
    END;

    [External]
    PROCEDURE DefineCoupling@101(RecordID@1001 : RecordID;VAR CRMID@1007 : GUID;VAR CreateNew@1006 : Boolean;VAR Synchronize@1005 : Boolean;VAR Direction@1004 : Option) : Boolean;
    VAR
      CRMIntegrationRecord@1002 : Record 5331;
      CouplingRecordBuffer@1003 : Record 5332;
      CRMCouplingRecord@1000 : Page 5336;
    BEGIN
      AssertTableIsMapped(RecordID.TABLENO);
      CRMCouplingRecord.SetSourceRecordID(RecordID);
      IF CRMCouplingRecord.RUNMODAL = ACTION::OK THEN BEGIN
        CRMCouplingRecord.GETRECORD(CouplingRecordBuffer);
        IF CouplingRecordBuffer."Create New" THEN
          CreateNew := TRUE
        ELSE
          IF NOT ISNULLGUID(CouplingRecordBuffer."CRM ID") THEN BEGIN
            CRMID := CouplingRecordBuffer."CRM ID";
            CRMIntegrationRecord.CoupleRecordIdToCRMID(RecordID,CouplingRecordBuffer."CRM ID");
            IF CouplingRecordBuffer.GetPerformInitialSynchronization THEN BEGIN
              Synchronize := TRUE;
              Direction := CouplingRecordBuffer.GetInitialSynchronizationDirection;
            END;
          END ELSE
            EXIT(FALSE);
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    [External]
    PROCEDURE RemoveCoupling@1(RecordID@1000 : RecordID);
    VAR
      TempCRMIntegrationRecord@1001 : TEMPORARY Record 5331;
    BEGIN
      RemoveCouplingWithTracking(RecordID,TempCRMIntegrationRecord);
    END;

    [External]
    PROCEDURE RemoveCouplingWithTracking@5(RecordID@1000 : RecordID;VAR TempCRMIntegrationRecord@1001 : TEMPORARY Record 5331);
    BEGIN
      CASE RecordID.TABLENO OF
        DATABASE::Customer:
          RemoveCoupledContactsForCustomer(RecordID,TempCRMIntegrationRecord);
      END;
      RemoveSingleCoupling(RecordID,TempCRMIntegrationRecord);
    END;

    LOCAL PROCEDURE RemoveSingleCoupling@6(RecordID@1000 : RecordID;VAR TempCRMIntegrationRecord@1002 : TEMPORARY Record 5331);
    VAR
      CRMIntegrationRecord@1001 : Record 5331;
    BEGIN
      CRMIntegrationRecord.RemoveCouplingToRecord(RecordID);

      TempCRMIntegrationRecord := CRMIntegrationRecord;
      TempCRMIntegrationRecord.Skipped := FALSE;
      IF TempCRMIntegrationRecord.INSERT THEN;
    END;

    LOCAL PROCEDURE RemoveCoupledContactsForCustomer@3(RecordID@1000 : RecordID;VAR TempCRMIntegrationRecord@1004 : TEMPORARY Record 5331);
    VAR
      Contact@1001 : Record 5050;
      ContBusRel@1002 : Record 5054;
      Customer@1003 : Record 18;
      CRMAccount@1005 : Record 5341;
      CRMContact@1006 : Record 5342;
      CRMIntegrationRecord@1007 : Record 5331;
      TempContact@1009 : TEMPORARY Record 5050;
      CRMID@1008 : GUID;
    BEGIN
      // Convert the RecordID into a Customer
      Customer.GET(RecordID);

      // Get the Company Contact for this Customer
      ContBusRel.SETCURRENTKEY("Link to Table","No.");
      ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
      ContBusRel.SETRANGE("No.",Customer."No.");
      IF ContBusRel.FINDFIRST THEN BEGIN
        // Get all Person Contacts under it
        Contact.SETCURRENTKEY("Company Name","Company No.",Type,Name);
        Contact.SETRANGE("Company No.",ContBusRel."Contact No.");
        Contact.SETRANGE(Type,Contact.Type::Person);
        IF Contact.FINDSET THEN BEGIN
          // Count the number of Contacts coupled to CRM Contacts under the CRM Account the Customer is coupled to
          CRMIntegrationRecord.FindIDFromRecordID(RecordID,CRMID);
          IF CRMAccount.GET(CRMID) THEN BEGIN
            REPEAT
              IF CRMIntegrationRecord.FindIDFromRecordID(Contact.RECORDID,CRMID) THEN BEGIN
                CRMContact.GET(CRMID);
                IF CRMContact.ParentCustomerId = CRMAccount.AccountId THEN BEGIN
                  TempContact.COPY(Contact);
                  TempContact.INSERT;
                END;
              END;
            UNTIL Contact.NEXT = 0;

            // If any, query for breaking their couplings
            IF TempContact.COUNT > 0 THEN
              IF CONFIRM(STRSUBSTNO(RemoveCoupledContactsUnderCustomerQst,TempContact.COUNT,CRMProductName.FULL)) THEN BEGIN
                TempContact.FINDSET;
                REPEAT
                  RemoveSingleCoupling(TempContact.RECORDID,TempCRMIntegrationRecord);
                UNTIL TempContact.NEXT = 0;
              END;
          END;
        END;
      END;
    END;

    BEGIN
    END.
  }
}

