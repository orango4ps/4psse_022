OBJECT Report 11125362 CFW Connector Import
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Import Connectors;
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  CreateTmpField;
                  ImportFile;
                  ProcessFile;

                  IF (ServerFileName <> '') THEN
                    FileManagement.DeleteServerFile(ServerFileName);
                END;

  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ConsumedWebServiceTmp@1100525002 : TEMPORARY Record 11229797;
      ConsumedWebServiceLineTmp@1100525011 : TEMPORARY Record 11229798;
      ConsumedWebServiceNamespaceTmp@1100525012 : TEMPORARY Record 11229838;
      ConnectorTmp@1100525009 : TEMPORARY Record 11229353;
      ConnectorMappingTmp@1100525005 : TEMPORARY Record 11229354;
      ConnectorMappingValueTmp@1100525006 : TEMPORARY Record 11229355;
      CFWActionsTMP@1100528307 : TEMPORARY Record 11229478;
      ConnectorMappingLinkTmp@1100525007 : TEMPORARY Record 11229357;
      ConnectorParameterTmp@1100525008 : TEMPORARY Record 11229371;
      SetupTmp@1100525013 : TEMPORARY Record 11229895;
      ConnectorInterfaceTmp@1100525014 : TEMPORARY Record 11229406;
      TranslationSetTmp@1100525015 : TEMPORARY Record 11229361;
      TranslationSetValueTmp@1100525016 : TEMPORARY Record 11229362;
      FieldTmp@1100525010 : TEMPORARY Record 2000000041;
      FileManagement@1100525003 : Codeunit 419;
      ServerFileName@1100525001 : Text[250];
      TemplateCode@1100525000 : Code[20];
      SelectFileTxt@1100528302 : TextConst 'ENU=Select a XML File';
      XmlTxt@1100528300 : TextConst 'ENU=*.xml';
      XmlFilesTxt@1100528301 : TextConst 'ENU=XML Files|*.xml';
      Text000@1100528306 : TextConst 'ENU=Connector Template %1 already exists, make a choice?';
      Text001@1100528305 : TextConst 'ENU=Quit Import,Do not import template,Overwrite Template ,Create New Template';
      Text002@1100528304 : TextConst 'ENU=Import is stopped';
      Text003@1100528303 : TextConst 'ENU=You must declare a connector code.';

    PROCEDURE ImportFromTemplate@6036500(VAR Connector@6036500 : Record 11229353);
    BEGIN
      CreateTmpField;
      ImportFile;
      ProcessFile;

      IF (ServerFileName <> '') THEN
        FileManagement.DeleteServerFile(ServerFileName);

      IF (TemplateCode <> '') THEN
        IF Connector.GET(Connector."Service Code",TemplateCode) THEN;
    END;

    LOCAL PROCEDURE ImportFile@1000000008();
    VAR
      XMLDocument@1000000002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLCurrNode@1000000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      InStreamInstr@1000000006 : InStream;
      ImportXmlFile@1000000004 : File;
      FileNameLtxt@1000000005 : Text[250];
    BEGIN
      FileNameLtxt := FileManagement.OpenFileDialog(SelectFileTxt, XmlTxt, XmlFilesTxt);
      IF (FileNameLtxt = '') THEN
        EXIT;

      ServerFileName := FileManagement.UploadFileSilent(FileNameLtxt);
      IF (ServerFileName = '') THEN
        EXIT;

      ImportXmlFile.OPEN(ServerFileName);
      ImportXmlFile.CREATEINSTREAM(InStreamInstr);

      XMLDocument := XMLDocument.XmlDocument;
      XMLDocument.Load(InStreamInstr);
      XMLCurrNode := XMLDocument.DocumentElement;

      // XMLCurrNode is de first node -> Root
      ImportXML('',XMLCurrNode);
    END;

    LOCAL PROCEDURE ImportXML@1100525002(Nodename@1100525000 : Text;XMLNodeP@1000000007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      XMLNodeList@1000000001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      i@1000000000 : Integer;
      RecordRef@1100525001 : RecordRef;
    BEGIN
      CASE Nodename OF //set record(ref) and init
        'ConsumedWebService'              : BEGIN RecordRef.GETTABLE(ConsumedWebServiceTmp); RecordRef.INIT; END;
        'ConsumedWebServiceLine'          : BEGIN RecordRef.GETTABLE(ConsumedWebServiceLineTmp); RecordRef.INIT; END;
        'ConsumedWebServiceNamespace'     : BEGIN RecordRef.GETTABLE(ConsumedWebServiceNamespaceTmp); RecordRef.INIT; END;
        'Connector'                       : BEGIN RecordRef.GETTABLE(ConnectorTmp); RecordRef.INIT; END;
        'Mapping'                         : BEGIN RecordRef.GETTABLE(ConnectorMappingTmp); RecordRef.INIT; END;
        'MappingValue'                    : BEGIN RecordRef.GETTABLE(ConnectorMappingValueTmp); RecordRef.INIT; END;
        'Action'                          : BEGIN RecordRef.GETTABLE(CFWActionsTMP); RecordRef.INIT; END;
        'MappingLink'                     : BEGIN RecordRef.GETTABLE(ConnectorMappingLinkTmp); RecordRef.INIT; END;
        'Parameter'                       : BEGIN RecordRef.GETTABLE(ConnectorParameterTmp); RecordRef.INIT; END;
        'Setup'                           : BEGIN RecordRef.GETTABLE(SetupTmp); RecordRef.INIT; END;
        'ConnectorInterface'              : BEGIN RecordRef.GETTABLE(ConnectorInterfaceTmp); RecordRef.INIT; END;
        'TranslationSet'                  : BEGIN RecordRef.GETTABLE(TranslationSetTmp); RecordRef.INIT; END;
        'TranslationSetValue'             : BEGIN RecordRef.GETTABLE(TranslationSetValueTmp); RecordRef.INIT; END;
      END;

      XMLNodeList := XMLNodeP.ChildNodes;
      FOR i := 0 TO XMLNodeList.Count - 1 DO BEGIN
        CASE XMLNodeList.Item(i).Name OF //Do childnode
          'Connectors'                    : ImportXML('',XMLNodeList.Item(i));
          'Connector'                     : ImportXML('Connector',XMLNodeList.Item(i));
          'Mappings'                      : ImportXML('' ,XMLNodeList.Item(i));
          'Mapping'                       : ImportXML('Mapping',XMLNodeList.Item(i));
          'MappingValues'                 : ImportXML('',XMLNodeList.Item(i));
          'MappingValue'                  : ImportXML('MappingValue',XMLNodeList.Item(i));
          'MappingActions'                : ImportXML('',XMLNodeList.Item(i));
          'Action'                        : ImportXML('Action',XMLNodeList.Item(i));
          'MappingLinks'                  : ImportXML('',XMLNodeList.Item(i));
          'MappingLink'                   : ImportXML('MappingLink',XMLNodeList.Item(i));
          'TranslationSets'               : ImportXML('',XMLNodeList.Item(i));
          'TranslationSet'                : ImportXML('TranslationSet',XMLNodeList.Item(i));
          'TranslationSetValues'          : ImportXML('',XMLNodeList.Item(i));
          'TranslationSetValue'           : ImportXML('TranslationSetValue',XMLNodeList.Item(i));
          'Parameters'                    : ImportXML('',XMLNodeList.Item(i));
          'Parameter'                     : ImportXML('Parameter',XMLNodeList.Item(i));
          'ConsumedWebServices'           : ImportXML('',XMLNodeList.Item(i));
          'ConsumedWebService'            : ImportXML('ConsumedWebService' ,XMLNodeList.Item(i));
          'ConsumedWebServiceLines'       : ImportXML('',XMLNodeList.Item(i));
          'ConsumedWebServiceLine'        : ImportXML('ConsumedWebServiceLine',XMLNodeList.Item(i));
          'ConsumedWebServiceNamespaces'  : ImportXML('',XMLNodeList.Item(i));
          'ConsumedWebServiceNamespace'   : ImportXML('ConsumedWebServiceNamespace',XMLNodeList.Item(i));
          'Settings'                      : ImportXML('',XMLNodeList.Item(i));
          'Setup'                         : ImportXML('Setup',XMLNodeList.Item(i));
          'ConnectorInterfaces'           : ImportXML('',XMLNodeList.Item(i));
          'ConnectorInterface'            : ImportXML('ConnectorInterface',XMLNodeList.Item(i));

        ELSE //handle recordfieldvalues
          CASE Nodename OF
            'ConsumedWebService'          :ValueHandler(DATABASE::"Consumed Web Service",RecordRef,XMLNodeList.Item(i));
            'ConsumedWebServiceLine'      :ValueHandler(DATABASE::"Consumed Web Service Line",RecordRef,XMLNodeList.Item(i));
            'ConsumedWebServiceNamespace' :ValueHandler(DATABASE::"Consumed Web Service Namespace",RecordRef,XMLNodeList.Item(i));
            'Connector'                   :ValueHandler(DATABASE::"CFW Connector",RecordRef,XMLNodeList.Item(i));
            'Mapping'                     :ValueHandler(DATABASE::"CFW Connector Mapping",RecordRef,XMLNodeList.Item(i));
            'MappingValue'                :ValueHandler(DATABASE::"CFW Connector Mapping Value",RecordRef,XMLNodeList.Item(i));
            'Action'                      :ValueHandler(DATABASE::"CFW Actions",RecordRef,XMLNodeList.Item(i));
            'MappingLink'                 :ValueHandler(DATABASE::"CFW Connector Mapping Link",RecordRef,XMLNodeList.Item(i));
            'Parameter'                   :ValueHandler(DATABASE::"CFW Connector Parameter",RecordRef,XMLNodeList.Item(i));
            'Setup'                       :ValueHandler(DATABASE::"CFW Setup",RecordRef,XMLNodeList.Item(i));
            'ConnectorInterface'          :ValueHandler(DATABASE::"CFW Connector Interface",RecordRef,XMLNodeList.Item(i));
            'TranslationSet'              :ValueHandler(DATABASE::"CFW Translation Set",RecordRef,XMLNodeList.Item(i));
            'TranslationSetValue'         :ValueHandler(DATABASE::"CFW Translation Set Value",RecordRef,XMLNodeList.Item(i));
          END;
        END;
      END;

      IF Nodename<>'' THEN BEGIN //Insert Record
        IF RecordRef.INSERT THEN;
        RecordRef.CLOSE
        END;
    END;

    LOCAL PROCEDURE ValueHandler@1100525000(TableId@1100525000 : Integer;VAR RecordRef@1100525002 : RecordRef;XMLNode@1100525004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      FieldRef@1100525001 : FieldRef;
      SetBoolean@1100525006 : Boolean;
      GivenValue@1100525003 : Text;
      StartPos@1100525005 : Integer;
      EndPos@1100525007 : Integer;
      OutStream@1100525008 : OutStream;
      TempBlob@1100525009 : Record 99008535;
    BEGIN
      FieldTmp.SETRANGE(TableNo,TableId);
      FieldTmp.SETRANGE(FieldName,XMLNode.Name);
      IF FieldTmp.FINDFIRST THEN BEGIN
          FieldRef := RecordRef.FIELD(FieldTmp."No.");

          CASE FieldTmp.Type OF
            FieldTmp.Type::BLOB:
              BEGIN
                GivenValue := XMLNode.InnerText;
                IF STRPOS(GivenValue,'<![CDATA[') <> 0 THEN BEGIN
                  StartPos := 10;
                  GivenValue := COPYSTR(GivenValue,StartPos);

                  EndPos := STRPOS(GivenValue,']]>') - 1;
                  GivenValue := COPYSTR(GivenValue,1,EndPos);

                  TempBlob.Blob.CREATEOUTSTREAM(OutStream,TEXTENCODING::Windows);
                  OutStream.WRITE(GivenValue);
                  FieldRef.VALUE := TempBlob.Blob;
                END;
              END;
            FieldTmp.Type::Boolean:
              BEGIN
                ReadElement_bln(XMLNode.InnerText,SetBoolean);
                FieldRef.VALUE := SetBoolean;
              END;
          ELSE BEGIN
            FieldRef.VALUE := XMLNode.InnerText;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE ReadElement_cod@1000000006(ValueInPcod@1000000002 : Code[250];VAR ValueOutPcod@1000000000 : Code[250]);
    BEGIN
      ValueOutPcod := FORMAT(ValueInPcod);
    END;

    LOCAL PROCEDURE ReadElement_txt@1000000003(ValueInPtxt@1000000002 : Text[250];VAR ValueOutPtxt@1000000000 : Text[250]);
    BEGIN
      ValueOutPtxt := FORMAT(ValueInPtxt);
    END;

    LOCAL PROCEDURE ReadElement_int@1000000000(ValueInPtxt@1000000002 : Text;VAR ValueOutPint@1000000000 : Integer);
    BEGIN
      IF EVALUATE(ValueOutPint,ValueInPtxt) THEN;
    END;

    LOCAL PROCEDURE ReadElement_opt@1000000001(ValueInPtxt@1000000000 : Text[100];VAR ValueOutPopt@1000000002 : Option);
    BEGIN
      IF EVALUATE(ValueOutPopt,ValueInPtxt) THEN;
    END;

    LOCAL PROCEDURE ReadElement_bln@1000000004(ValueInPtxt@1000000000 : Text[100];VAR ValueOutPbln@1000000002 : Boolean);
    BEGIN
      IF UPPERCASE(ValueInPtxt) IN ['JA','1','YES','TRUE'] THEN
        ValueOutPbln := TRUE
      ELSE
        ValueOutPbln := FALSE;
    END;

    LOCAL PROCEDURE ProcessFile@1000000010();
    VAR
      ConsumedWebService@1100525009 : Record 11229797;
      ConsumedWebServiceLine@1100525008 : Record 11229798;
      ConsumedWebServiceNamespace@1100525007 : Record 11229838;
      Connector@1100525004 : Record 11229353;
      ConnectorMapping@1100525003 : Record 11229354;
      ConnectorMappingValue@1100525002 : Record 11229355;
      CFWActions@1100528301 : Record 11229478;
      ConnectorMappingLink@1100525001 : Record 11229357;
      ConnectorParameter@1100525000 : Record 11229371;
      CFWConnectorCreateImport@1100528300 : Page 11129904;
      Setup@1100525013 : Record 11229895;
      ConnectorInterface@1100525012 : Record 11229406;
      TranslationSet@1100525011 : Record 11229361;
      TranslationSetValue@1100525010 : Record 11229362;
      ReturnValueLint@1000000005 : Integer;
      SkipLbln@1000000006 : Boolean;
      ConsumedWebServiceCode@1100525006 : Code[20];
      ConnectorCode@1000000008 : Code[20];
    BEGIN
      IF SetupTmp.FINDSET THEN
        REPEAT
          Setup := SetupTmp;
          IF Setup.INSERT THEN;//C058303
        UNTIL SetupTmp.NEXT = 0;

      IF ConnectorInterfaceTmp.FINDSET THEN
        REPEAT
          ConnectorInterface := ConnectorInterfaceTmp;
          IF ConnectorInterface.INSERT THEN;//C058303
        UNTIL ConnectorInterfaceTmp.NEXT = 0;

      IF TranslationSetTmp.FINDSET THEN
        REPEAT
          TranslationSet := TranslationSetTmp;
          IF TranslationSet.INSERT THEN;//C058303
       UNTIL TranslationSetTmp.NEXT = 0;

      IF TranslationSetValueTmp.FINDSET THEN
        REPEAT
          TranslationSetValue := TranslationSetValueTmp;
          IF NOT TranslationSetValue.INSERT THEN;//C058303
        UNTIL TranslationSetValueTmp.NEXT = 0;

      IF CFWActionsTMP.FINDSET THEN
        REPEAT
          CFWActions := CFWActionsTMP;
          IF NOT CFWActions.INSERT THEN;//C058303
        UNTIL CFWActionsTMP.NEXT = 0;

      IF ConsumedWebServiceTmp.FINDSET THEN
        REPEAT
          ConsumedWebService := ConsumedWebServiceTmp;
          IF ConsumedWebService.INSERT THEN;//C058303

          ConsumedWebServiceLineTmp.SETRANGE("Web Service Code",ConsumedWebService.Code);
          IF ConsumedWebServiceLineTmp.FINDSET THEN
            REPEAT
              ConsumedWebServiceLine := ConsumedWebServiceLineTmp;
              IF ConsumedWebServiceLine.INSERT THEN;//C058303
            UNTIL ConsumedWebServiceLineTmp.NEXT = 0;

          ConsumedWebServiceNamespaceTmp.SETRANGE("Web Service Code",ConsumedWebService.Code);
          IF ConsumedWebServiceNamespaceTmp.FINDSET THEN
            REPEAT
              ConsumedWebServiceNamespace := ConsumedWebServiceNamespaceTmp;
              IF ConsumedWebServiceNamespace.INSERT THEN;//C058303
            UNTIL ConsumedWebServiceNamespaceTmp.NEXT = 0;
        UNTIL ConsumedWebServiceTmp.NEXT = 0;


      IF ConnectorTmp.FINDSET THEN
        REPEAT
          IF Connector.GET(ConnectorTmp."Service Code",ConnectorTmp.Code) THEN BEGIN
            SkipLbln := FALSE;

            ReturnValueLint := STRMENU(Text001, 1, STRSUBSTNO(Text000,Connector.Code));
            CASE ReturnValueLint OF
              0: // No choice is given by user
                ERROR('');
              1: // Quit Import
                ERROR(Text002);
              2: // Do not import template
                SkipLbln := TRUE;
              3: // Overwrite Template
                Connector.DELETE(TRUE);
              4: // Create New Template
                BEGIN
                  CFWConnectorCreateImport.SetConsumedWebServiceCode(ConnectorTmp."Service Code");
                  IF CFWConnectorCreateImport.RUNMODAL = ACTION::OK THEN BEGIN
                    ConsumedWebServiceCode := CFWConnectorCreateImport.GetConsumedWebServiceCode;
                    ConnectorCode := CFWConnectorCreateImport.GetConnectorCode;
                    IF (ConsumedWebServiceCode = '') OR (ConnectorCode = '') THEN
                     ERROR(Text003);
                  END ELSE
                    ERROR(Text003);
                END;
            END;
          END;

          IF NOT SkipLbln THEN BEGIN
            ConnectorTmp.CALCFIELDS(Template);
            Connector := ConnectorTmp;

            IF ConsumedWebServiceCode <> '' THEN
              Connector."Service Code" := ConsumedWebServiceCode;
            IF ConnectorCode <> '' THEN
              Connector.Code := ConnectorCode;
            Connector.INSERT;

           IF TemplateCode = '' THEN
             TemplateCode := Connector.Code;

            ConnectorMappingTmp.SETRANGE("Service Code" ,ConnectorTmp."Service Code");
            ConnectorMappingTmp.SETRANGE("Connector Code",ConnectorTmp.Code);
            IF ConnectorMappingTmp.FINDSET THEN
              REPEAT
                ConnectorMapping := ConnectorMappingTmp;

                IF ConsumedWebServiceCode <> '' THEN
                  ConnectorMapping."Service Code" := ConsumedWebServiceCode;
                IF ConnectorCode <> '' THEN
                  ConnectorMapping."Connector Code" := ConnectorCode;
                ConnectorMapping.INSERT;
              UNTIL ConnectorMappingTmp.NEXT = 0;

            ConnectorMappingValueTmp.SETRANGE("Service Code" ,ConnectorTmp."Service Code");
            ConnectorMappingValueTmp.SETRANGE("Connector Code",ConnectorTmp.Code);
            IF ConnectorMappingValueTmp.FINDSET THEN
              REPEAT
                ConnectorMappingValue := ConnectorMappingValueTmp;
                IF ConsumedWebServiceCode <> '' THEN
                  ConnectorMappingValue."Service Code" := ConsumedWebServiceCode;
                IF ConnectorCode <> '' THEN
                  ConnectorMappingValue."Connector Code" := ConnectorCode;
                ConnectorMappingValue.INSERT;
              UNTIL ConnectorMappingValueTmp.NEXT = 0;

            ConnectorMappingLinkTmp.SETRANGE("Service Code" ,ConnectorTmp."Service Code");
            ConnectorMappingLinkTmp.SETRANGE("Connector Code",ConnectorTmp.Code);
            IF ConnectorMappingLinkTmp.FINDSET THEN
              REPEAT
                ConnectorMappingLink := ConnectorMappingLinkTmp;
                IF ConsumedWebServiceCode <> '' THEN
                  ConnectorMappingLink."Service Code" := ConsumedWebServiceCode;
                IF ConnectorCode <> '' THEN
                  ConnectorMappingLink."Connector Code" := ConnectorCode;
                ConnectorMappingLink.INSERT;
              UNTIL ConnectorMappingLinkTmp.NEXT = 0;

            ConnectorParameterTmp.SETRANGE("Service Code" ,ConnectorTmp."Service Code");
            ConnectorParameterTmp.SETRANGE("Connector Code",ConnectorTmp.Code);
            IF ConnectorParameterTmp.FINDSET THEN
              REPEAT
                ConnectorParameter := ConnectorParameterTmp;
                IF ConsumedWebServiceCode <> '' THEN
                  ConnectorParameter."Service Code" := ConsumedWebServiceCode;
                IF ConnectorCode <> '' THEN
                  ConnectorParameter."Connector Code" := ConnectorCode;
                ConnectorParameter.INSERT;
              UNTIL ConnectorParameterTmp.NEXT = 0;

          END;
        UNTIL ConnectorTmp.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateTmpField@1100525005();
    BEGIN
      FieldTmp.RESET;
      FieldTmp.DELETEALL;

      //+
      AddFieldsToTable(DATABASE::"CFW Connector");
      AddFieldsToTable(DATABASE::"CFW Connector Mapping");
      AddFieldsToTable(DATABASE::"CFW Connector Mapping Value");
      AddFieldsToTable(DATABASE::"CFW Actions");
      AddFieldsToTable(DATABASE::"CFW Connector Mapping Link");
      AddFieldsToTable(DATABASE::"CFW Connector Parameter");
      AddFieldsToTable(DATABASE::"Consumed Web Service");
      AddFieldsToTable(DATABASE::"Consumed Web Service Line");
      AddFieldsToTable(DATABASE::"Consumed Web Service Namespace");
      AddFieldsToTable(DATABASE::"CFW Setup");
      AddFieldsToTable(DATABASE::"CFW Connector Interface");
      AddFieldsToTable(DATABASE::"CFW Translation Set");
      AddFieldsToTable(DATABASE::"CFW Translation Set Value");
      //-
    END;

    LOCAL PROCEDURE AddFieldsToTable@1100525009(TableId@1100525003 : Integer);
    VAR
      Field@1100525002 : Record 2000000041;
      ConnectorManagement@1100525001 : Codeunit 11229291;
      NewFieldName@1100525000 : Text[100];
    BEGIN
      //+
      Field.SETRANGE(TableNo,TableId);
      Field.SETFILTER(Class,'<>%01',Field.Class::FlowField);
      IF Field.FINDSET THEN
        REPEAT
          NewFieldName := FORMAT(Field.FieldName,0,9);
          NewFieldName := ConnectorManagement.ConvertTextToXmlTagName(NewFieldName);

          FieldTmp := Field;
          FieldTmp.FieldName := NewFieldName;
          FieldTmp.INSERT;
        UNTIL Field.NEXT=0;
      //-
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

