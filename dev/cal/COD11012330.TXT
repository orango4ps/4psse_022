OBJECT Codeunit 11012330 PlantItemWebservice
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    [External]
    PROCEDURE PlantTypeRentalRate@1100525001(PlantType@1100525004 : Code[20];StartDate@1100525002 : Date;VAR RentalRate@1100525001 : Decimal;VAR SalesRate@1100525006 : Decimal;VAR BuyBackRate@1100525005 : Decimal) RateFound : Boolean;
    VAR
      RentalRateRec@1100525000 : Record 11012567;
      PlantTypeRec@1100525003 : Record 11012551;
    BEGIN
      RentalRate := 0;
      BuyBackRate := 0;
      SalesRate := 0;
      RateFound := FALSE;

      IF PlantTypeRec.GET(PlantType) THEN BEGIN
        IF PlantTypeRec."Rental Type" = PlantTypeRec."Rental Type"::Rental THEN BEGIN
          RentalRateRec.SETRANGE("Rental Type", RentalRateRec."Rental Type"::Rental);
          RentalRateRec.SETRANGE("Plant Type", PlantType);
          RentalRateRec.SETFILTER("Plant No.", '%1', '');
          RentalRateRec.SETFILTER("Starting Date", '..%1', StartDate);
          RentalRateRec.SETFILTER("Ending Date", '0D|%1..', StartDate);
          IF RentalRateRec.FINDLAST THEN BEGIN
            RentalRate := RentalRateRec."Rental Rate External (Days)";
            RateFound := TRUE;
          END;
        END ELSE BEGIN
          //* Verkoop/terugkoop  of Beide (betreft dan vt-mat. dat ook wel eens wordt verhuurd)
          RentalRateRec.SETRANGE("Rental Type",RentalRateRec."Rental Type"::"Sales / Buy Back");
          RentalRateRec.SETRANGE("Plant Type", PlantTypeRec.Code);
          RentalRateRec.SETFILTER("Plant No.", '%1', '');
          RentalRateRec.SETFILTER("Starting Date", '..%1', StartDate);
          RentalRateRec.SETFILTER("Ending Date", '0D|%1..', StartDate);
          IF RentalRateRec.FINDLAST THEN BEGIN
              SalesRate := RentalRateRec."Sales Rate";
              BuyBackRate := RentalRateRec."Buy Back Rate";
          END ELSE BEGIN
              SalesRate := PlantTypeRec."Current Price";
          END;

        END;
      END;
    END;

    [External]
    PROCEDURE PlantTypeRentalRateLocation@1100525007(PlantLocation@1100525007 : Code[20];PlantType@1100525004 : Code[20];StartDate@1100525002 : Date;VAR RentalRate@1100525001 : Decimal;VAR SalesRate@1100525006 : Decimal;VAR BuyBackRate@1100525005 : Decimal) : Boolean;
    VAR
      PlantSetup@1100525009 : Record 11012550;
      PlantTypes@1100525003 : Record 11012551;
      PlantLoc@1100525008 : Record 11012554;
      SearchRate@1100525000 : Codeunit 11012567;
      DiscountPerc@1100525010 : Decimal;
    BEGIN
      //DP00591
      RentalRate := 0;
      SalesRate := 0;
      BuyBackRate := 0;

      IF (PlantLocation = '') OR (PlantType = '') THEN
        EXIT(FALSE);
      IF NOT PlantLoc.GET(PlantLocation) THEN
        EXIT(FALSE);
      IF NOT PlantTypes.GET(PlantType) THEN
        EXIT(FALSE);

      IF PlantTypes."Rental Type" IN [PlantTypes."Rental Type"::Rental, PlantTypes."Rental Type"::Both] THEN BEGIN
        DiscountPerc := SearchRate.RentalDiscount(PlantLocation, '', PlantType, '', StartDate);
        RentalRate := (1 - (DiscountPerc / 100)) * SearchRate.Rate(PlantLocation, PlantType, '', '', StartDate, 0, 0, '');
      END;
      IF PlantTypes."Rental Type" IN [PlantTypes."Rental Type"::"Sales/Buy Back", PlantTypes."Rental Type"::Both] THEN BEGIN
        PlantSetup.GET;
        DiscountPerc := 0;
        IF PlantSetup."Discount Sales/Buy Back" THEN
          DiscountPerc := PlantLoc."Discount %";
        SalesRate := (1 - (DiscountPerc / 100)) * SearchRate.Rate(PlantLocation, PlantType, '', '', StartDate, 1, 0, '');
        BuyBackRate := (1 - (DiscountPerc / 100)) * SearchRate.Rate(PlantLocation, PlantType, '', '', StartDate, 2, 0, '');
      END;
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE ItemSalesRate@1100525000(ItemNo@1100525002 : Code[20];StartDate@1100525001 : Date;VAR SalesRate@1100525000 : Decimal;VAR BuyBackRate@1100525003 : Decimal) RateFound : Boolean;
    VAR
      ItemRec@1100525004 : Record 27;
      ItemRateRec@1100525005 : Record 11020318;
    BEGIN
      SalesRate := 0;
      BuyBackRate := 0;
      RateFound := FALSE;
      IF ItemRec.GET(ItemNo) THEN BEGIN
        IF ItemRec."Sales/Buy-Back Item (Plant)" THEN BEGIN
          ItemRateRec.SETRANGE("Item No.", ItemNo);
          ItemRateRec.SETFILTER("Starting Date", '..%1', StartDate);
          IF ItemRateRec.FINDLAST THEN BEGIN
            SalesRate := ItemRateRec."Sales Rate";
            BuyBackRate := ItemRateRec."Buy Back Rate";
            RateFound := TRUE;
          END;
        END ELSE BEGIN
          SalesRate := ItemRec."Unit Price";
          BuyBackRate := 0;
          RateFound := TRUE;
        END;
      END;
    END;

    [External]
    PROCEDURE CreateWebItems@1100525002(ICategory@1100525003 : Code[20];IProfileCode@1100525002 : Code[20];IQuestionLine@1100525001 : Integer;IDustFreeCode@1100525005 : Code[20];IDustFreeQuestionLine@1100525004 : Integer;RentalRateType@1100409000 : 'Internal,External') WebItemsFound : Boolean;
    VAR
      WebItemRec@1100525000 : Record 11125662;
    BEGIN
      WebItemRec.UpdateCPItems(3, TRUE, ICategory, IProfileCode, IQuestionLine,
        IDustFreeCode, IDustFreeQuestionLine, RentalRateType);
      WebItemsFound := FALSE;
      WebItemRec.RESET;
      IF WebItemRec.FINDFIRST THEN
        WebItemsFound := TRUE;
    END;

    [External]
    PROCEDURE CreateWebItemStock@1100525005(ILocation@1100525003 : Code[20]) WebItemStockFound : Boolean;
    VAR
      WebItemStockRec@1100525000 : Record 11125663;
      PlantLocationRec@1100525001 : Record 11012554;
    BEGIN
      IF NOT PlantLocationRec.GET(ILocation) THEN
        EXIT(FALSE);

      WebItemStockRec.UpdateWebItemStock(ILocation);
      WebItemStockFound := FALSE;
      WebItemStockRec.RESET;
      WebItemStockRec.SETRANGE("Plant Location", ILocation);
      IF WebItemStockRec.FINDFIRST THEN
        WebItemStockFound := TRUE;
    END;

    [External]
    PROCEDURE RequestCount@1100525003(Ilocation@1100525001 : Code[20]) lvCount : Integer;
    VAR
      RequestRec@1100525000 : Record 11020520;
    BEGIN
      RequestRec.RESET;
      RequestRec.SETRANGE("To Location", Ilocation);
      RequestRec.SETRANGE("Internet Order", TRUE);
      lvCount := RequestRec.COUNT;

      RequestRec.RESET;
      RequestRec.SETRANGE("From Location", Ilocation);
      RequestRec.SETRANGE("Internet Order", TRUE);
      lvCount := lvCount + RequestRec.COUNT;
    END;

    [External]
    PROCEDURE OrderCount@1100525004(IOrderType@1100525001 : 'Arrival,Removal,Other Transfers,Negative Inventory Correction';ILocation@1100525002 : Code[20]) lvCount : Integer;
    VAR
      PlantOrderRec@1100525000 : Record 11012556;
    BEGIN
      //Count Plant ordrs of location
      IF ILocation = '' THEN
        EXIT(0);
      PlantOrderRec.RESET;
      PlantOrderRec.SETRANGE(Type, IOrderType);
      PlantOrderRec.SETRANGE(Posted, TRUE);
      CASE IOrderType OF
        IOrderType::Arrival:
          BEGIN
            PlantOrderRec.SETCURRENTKEY("To Location");
            PlantOrderRec.SETRANGE("To Location", ILocation);
          END;
        IOrderType::Removal:
          BEGIN
            PlantOrderRec.SETCURRENTKEY("From Location");
            PlantOrderRec.SETRANGE("From Location", ILocation);
          END;
        IOrderType::"Other Transfers":
          BEGIN
            PlantOrderRec.SETCURRENTKEY("From Location");
            PlantOrderRec.SETRANGE("From Location", ILocation);
            lvCount := PlantOrderRec.COUNT;
            PlantOrderRec.SETRANGE("From Location");  //Reset filter on From Location
            //
            PlantOrderRec.SETCURRENTKEY("To Location");
            PlantOrderRec.SETRANGE("To Location", ILocation);
          END;
        IOrderType::"Negative Inventory Correction":
          BEGIN
            PlantOrderRec.SETCURRENTKEY("To Location");
            PlantOrderRec.SETRANGE("To Location", ILocation);
          END;
        ELSE
          EXIT(0);
      END;
      lvCount := lvCount + PlantOrderRec.COUNT;
    END;

    [External]
    PROCEDURE RentalFreeDays@1100525006(IStartingDate@1100525002 : Date;IEndingDate@1100525001 : Date) : Integer;
    VAR
      lvPlantSetupRec@1100525004 : Record 11012550;
      lvRentFreeDayRec@1100525000 : Record 11012569;
      lvRentCalendar@1100525005 : Code[10];
    BEGIN
      lvRentCalendar := '';

      lvPlantSetupRec.GET;
      IF (lvPlantSetupRec."External Rent Calendar" <> '') THEN
        lvRentCalendar := lvPlantSetupRec."External Rent Calendar";

      IF (lvRentCalendar = '') THEN
        EXIT(0);

      WITH lvRentFreeDayRec DO BEGIN
        SETRANGE(Type, Type::Plant);
        SETRANGE("Territory Code", '');
        SETRANGE("Plant Calendar", lvRentCalendar);
        SETRANGE(Date, IStartingDate, IEndingDate);
        EXIT(COUNT);
      END;
    END;

    [External]
    PROCEDURE CountExitOrdersOfLocation@1100409004(ILocation@1100525002 : Code[20]) : Integer;
    VAR
      ExitOrder@1100525000 : Record 11012559;
    BEGIN
      IF ILocation = '' THEN
        EXIT(0);
      ExitOrder.SETCURRENTKEY(Location);
      ExitOrder.SETRANGE(Location, ILocation);
      ExitOrder.SETRANGE(Posted, TRUE);
      EXIT(ExitOrder.COUNT);
    END;

    [External]
    PROCEDURE PlantOnLocation@1100409007(ILocation@1100525002 : Code[20]) : Boolean;
    VAR
      PlantInvent@1100525000 : Record 11012555;
    BEGIN
      IF ILocation = '' THEN
        EXIT(FALSE);
      PlantInvent.SETRANGE(Removed, FALSE);
      PlantInvent.SETRANGE(Location, ILocation);
      PlantInvent.SETFILTER(Quantity, '<>%1', 0);
      PlantInvent.SETRANGE(Sold, FALSE);
      EXIT(NOT PlantInvent.ISEMPTY);
    END;

    [External]
    PROCEDURE ExportPlantTypeWS@1100527400(PlantNo@1100527400 : Code[20];VAR ExportPlantTypeWS@1100527401 : XMLport 11012561) : Boolean;
    BEGIN
      ExportPlantTypeWS.SetParams(PlantNo);
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE ExportItemWS@1100527402(ItemNo@1100527400 : Code[20];VAR ExportItemWS@1100527401 : XMLport 11012564) : Boolean;
    BEGIN
      ExportItemWS.SetParams(ItemNo);
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE ExportCatalogWS@1100527403(PlantItemNo@1100527400 : Code[20];VAR ExportCatalogWS@1100527401 : XMLport 11012565) : Boolean;
    BEGIN
      ExportCatalogWS.SetParams(PlantItemNo);
      EXIT(TRUE);
    END;

    BEGIN
    END.
  }
}

