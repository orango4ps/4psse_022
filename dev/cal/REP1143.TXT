OBJECT Report 1143 Import Cost Budget from Excel
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Kostenbudget aus Excel importieren;
               ENU=Import Cost Budget from Excel;
               NLD=Kostenbudget vanuit Excel importeren;
               NOR=Importer kostbudsjett fra Excel];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  IF ToCostBudgetName = '' THEN
                    ERROR(Text000);

                  IF CostType.FIND('-') THEN BEGIN
                    REPEAT
                      TempCostType.INIT;
                      TempCostType := CostType;
                      TempCostType.INSERT;
                    UNTIL CostType.NEXT = 0;
                  END;

                  ExcelBuffer.LOCKTABLE;
                  "Cost Budget Buffer".LOCKTABLE;
                  CostBudgetEntry.SETRANGE("Budget Name",ToCostBudgetName);
                  IF NOT CostBudgetName.GET(ToCostBudgetName) THEN
                    CLEAR(CostBudgetName);

                  CostAccSetup.GET;

                  ExcelBuffer.OpenBook(ServerFileName,SheetName);
                  ExcelBuffer.ReadSheet;

                  AnalyzeData;
                END;

    OnPostReport=BEGIN
                   ExcelBuffer.DELETEALL;
                   "Cost Budget Buffer".DELETEALL;
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;                    ;
               DataItemTable=Table1114;
               DataItemTableView=SORTING(Cost Type No.,Cost Center Code,Cost Object Code,Date);
               OnPreDataItem=BEGIN
                               RecNo := 0;

                               IF NOT CostBudgetName.GET(ToCostBudgetName) THEN BEGIN
                                 IF NOT CONFIRM(Text001,FALSE,CostBudgetName.TABLECAPTION,ToCostBudgetName) THEN
                                   CurrReport.BREAK;
                                 CostBudgetName.Name := ToCostBudgetName;
                                 CostBudgetName.INSERT;
                               END ELSE BEGIN
                                 IF NOT CONFIRM(Text003,FALSE,LOWERCASE(FORMAT(SELECTSTR(ImportOption + 1,Text027))),ToCostBudgetName) THEN
                                   CurrReport.BREAK;
                               END;

                               IF CostBudgetEntry3.FINDLAST THEN
                                 EntryNo := CostBudgetEntry3."Entry No." + 1
                               ELSE
                                 EntryNo := 1;
                               LastEntryNoBeforeImport := CostBudgetEntry3."Entry No.";
                             END;

               OnAfterGetRecord=BEGIN
                                  RecNo := RecNo + 1;
                                  IF RecNo = 1 THEN BEGIN
                                    Window.OPEN(
                                      Text028 +
                                      '@1@@@@@@@@@@@@@@@@@@@@@@@@@\');
                                    TotalRecNo := COUNT;
                                    Window.UPDATE(1,0);
                                  END;
                                  IF ImportOption = ImportOption::"Replace entries" THEN BEGIN
                                    CostBudgetEntry.SETRANGE("Cost Type No.","Cost Type No.");
                                    CostBudgetEntry.SETRANGE(Date,Date);
                                    CostBudgetEntry.SETFILTER("Entry No.",'<=%1',LastEntryNoBeforeImport);
                                    IF NOT CostBudgetEntry.ISEMPTY THEN
                                      CostBudgetEntry.DELETEALL(TRUE);
                                  END;

                                  IF Amount = 0 THEN
                                    CurrReport.SKIP;
                                  IF NOT IsLineTypeCostType("Cost Type No.") THEN
                                    CurrReport.SKIP;
                                  CostBudgetEntry.INIT;
                                  CostBudgetEntry."Entry No." := EntryNo;
                                  CostBudgetEntry."Budget Name" := ToCostBudgetName;
                                  CostBudgetEntry."Cost Type No." := "Cost Type No.";
                                  CostBudgetEntry.Date := Date;
                                  CostBudgetEntry.Amount := ROUND(Amount);
                                  CostBudgetEntry.Description := Description;
                                  CostBudgetEntry."Cost Center Code" := "Cost Center Code";
                                  CostBudgetEntry."Cost Object Code" := "Cost Object Code";
                                  CostBudgetEntry.INSERT(TRUE);
                                  EntryNo := EntryNo + 1;
                                  Window.UPDATE(1,ROUND(RecNo / TotalRecNo * 10000,1));
                                END;

               OnPostDataItem=BEGIN
                                IF RecNo > 0 THEN
                                  MESSAGE(Text004,CostBudgetEntry.TABLECAPTION,RecNo);
                              END;
                               }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnQueryClosePage=VAR
                         FileMgt@1001 : Codeunit 419;
                       BEGIN
                         IF CloseAction = ACTION::OK THEN BEGIN
                           ServerFileName := FileMgt.UploadFile(Text006,ExcelFileExtensionTok);
                           IF ServerFileName = '' THEN
                             EXIT(FALSE);

                           SheetName := ExcelBuffer.SelectSheetsName(ServerFileName);
                           IF SheetName = '' THEN
                             EXIT(FALSE);
                         END;
                       END;

    }
    CONTROLS
    {
      { 9   ;0   ;Container ;
                  ContainerType=ContentArea }

      { 8   ;1   ;Group     ;
                  CaptionML=[DEU=Optionen;
                             ENU=Options;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 3   ;2   ;Field     ;
                  CaptionML=[DEU=Budgetname;
                             ENU=Budget Name;
                             NLD=Budget;
                             NOR=Budsjettnavn;
                             SVE=Budgetnamn];
                  ToolTipML=[DEU=Gibt den Namen des Budgets an.;
                             ENU=Specifies the name of the budget.;
                             NLD=Hiermee wordt de naam van het budget opgegeven.;
                             NOR=Angir navnet pÜ budsjettet.;
                             SVE=Anger budgetens namn.];
                  ApplicationArea=#CostAccounting;
                  SourceExpr=ToCostBudgetName;
                  TableRelation="Cost Budget Name" }

      { 2   ;2   ;Field     ;
                  CaptionML=[DEU=Option;
                             ENU=Option;
                             NLD=Optie;
                             NOR=Alternativ;
                             SVE=Alternativ];
                  ToolTipML=[DEU=Gibt an, ob die Budgetposten aus Excel den bereits bestehenden Budgetposten in der Kostenrechnung hinzugefÅgt werden oder ob die Posten in der Kostenrechnung durch die Budgetposten aus Excel ersetzt werden.;
                             ENU=Specifies whether the budget entries are added from Excel to budget entries that are currently in cost accounting, or whether the entries are replaced in cost accounting with the budget entries from Excel.;
                             NLD=Hiermee wordt opgegeven of de budgetposten uit Excel worden toegevoegd aan de huidige budgetposten in de kostprijsboekhouding of dat de posten in de kostprijsboekhouding worden vervangen door de budgetposten uit Excel.;
                             NOR=Angir om budsjettpostene blir lagt til fra Excel i budsjettposter som for õyeblikket finnes i kostregnskapet, eller om postene erstattes i kostregnskapet med budsjettpostene fra Excel.];
                  OptionCaptionML=[DEU=Posten ersetzen,Posten hinzufÅgen;
                                   ENU=Replace entries,Add entries;
                                   NLD=Posten vervangen,Posten toevoegen;
                                   NOR=Erstatt poster,Legg til poster];
                  ApplicationArea=#CostAccounting;
                  SourceExpr=ImportOption }

      { 1   ;2   ;Field     ;
                  CaptionML=[DEU=Beschreibung;
                             ENU=Description;
                             NLD=Omschrijving;
                             NOR=Beskrivelse;
                             SVE=Beskrivning];
                  ToolTipML=[DEU=Gibt die Beschreibung des Imports aus Excel an.;
                             ENU=Specifies the description of what you are importing from Excel.;
                             NLD=Hiermee wordt de beschrijving opgegeven van wat u uit Excel importeert.;
                             NOR=Angir beskrivelsen av hva du importerer fra Excel.];
                  ApplicationArea=#CostAccounting;
                  SourceExpr=Description }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ExcelBuffer@1021 : Record 370;
      CostBudgetEntry@1020 : Record 1109;
      CostAccSetup@1019 : Record 1108;
      CostType@1018 : Record 1103;
      TempCostType@1017 : TEMPORARY Record 1103;
      CostBudgetName@1016 : Record 1110;
      CostBudgetEntry3@1015 : Record 1109;
      Window@1007 : Dialog;
      ServerFileName@1025 : Text;
      SheetName@1013 : Text[250];
      ToCostBudgetName@1012 : Code[10];
      EntryNo@1011 : Integer;
      LastEntryNoBeforeImport@1010 : Integer;
      TotalRecNo@1009 : Integer;
      RecNo@1008 : Integer;
      Description@1006 : Text[50];
      ImportOption@1005 : 'Replace entries,Add entries';
      Text000@1038 : TextConst 'DEU=Geben Sie als Ziel fÅr den Import einen Budgetnamen an.;ENU=You must specify a budget name to which to import.;NLD=U moet de naam van het budget opgeven waarin u wilt importeren.;NOR=Du mÜ angi et budsjettnavn som det skal importeres til.';
      Text001@1037 : TextConst 'DEU=Mîchten Sie ''%1'' mit dem Namen ''%2'' erstellen?;ENU=Do you want to create %1 with the name %2?;NLD=Wilt u %1 maken met de naam %2?;NOR=Vil du opprette %1 med navnet %2?';
      Text003@1035 : TextConst 'DEU=Mîchten Sie fÅr den Budgetnamen ''%2'' wirklich die folgende Aktion ausfÅhren: %1?;ENU=Are you sure that you want to %1 for the budget name %2?;NLD=Weet u zeker dat u wilt %1 voor budget %2?;NOR=Er du sikker pÜ at du vil %1 for budsjettnavnet %2?';
      Text004@1034 : TextConst 'DEU=Die Tabelle ''%1'' wurde erfolgreich mit %2 Posten aktualisiert.;ENU=%1 table has been successfully updated with %2 entries.;NLD=%1 tabel is bijgewerkt met %2 posten.;NOR=Tabell %1 er oppdatert med %2 poster.';
      Text006@1032 : TextConst 'DEU=Excel-Datei importieren;ENU=Import Excel File;NLD=Excel-bestand importeren;NOR=Importer Excel-fil;SVE=Importera Excel-fil';
      Text007@1031 : TextConst 'DEU=Daten werden analysiert ...\\;ENU=Analyzing Data...\\;NLD=Analyseren gegevens...\\;NOR=Analyserer data...\\;SVE=Analyserar data...\\';
      Text009@1029 : TextConst 'DEU=Kostenartnr.;ENU=Cost Type No;NLD=Nr. kostensoort;NOR=Kosttypenr';
      Text011@1027 : TextConst 'DEU=Der Text ''%1'' kann in der Excel-Tabelle nur einmal angegeben werden.;ENU=The text %1 can only be specified once in the Excel worksheet.;NLD=De tekst %1 kan slechts eenmaal in het Excel-werkblad opgegeven worden.;NOR=Teksten %1 kan bare angis Çn gang i Excel-regnearket.';
      Text014@1026 : TextConst 'DEU=Datum;ENU=Date;NLD=Datum;NOR=Dato;SVE=Datum';
      Text017@1023 : TextConst 'DEU=Kostenstellencode;ENU=Cost Center Code;NLD=Kostenplaatscode;NOR=Kostsenterkode;SVE=Kod fîr kostnadsstÑlle';
      Text018@1022 : TextConst 'DEU=KostentrÑgercode;ENU=Cost Object Code;NLD=Kostenobjectcode;NOR=Kostobjektkode;SVE=Kod fîr kostnadsbÑrare';
      Text019@1004 : TextConst 'DEU=Der Wert ''%1'' kann nicht importiert werden, da er in der Tabelle ''%2'' nicht verfÅgbar ist.;ENU=You cannot import %1 value, which is not available in the %2 table.;NLD=U kunt waarde %1 niet importeren, als die niet beschikbaar is in tabel %2.;NOR=Du kan ikke importere %1-verdien som ikke er tilgjengelig i %2-tabellen.';
      Text023@1003 : TextConst 'DEU=Die gleichen Informationen kînnen nicht mehrmals importiert werden.;ENU=You cannot import the same information more than once.;NLD=U kunt dezelfde informatie niet meerdere keren importeren.;NOR=Du kan ikke importere samme informasjon flere ganger.';
      Text025@1002 : TextConst 'DEU=In der Excel-Tabelle wurden keine Kostenarten gefunden.;ENU=Cost Types have not been found in the Excel worksheet.;NLD=Er zijn geen kostensoorten in het Excel-werkblad gevonden.;NOR=Finner ingen kosttyper i Excel-arket.';
      Text026@1001 : TextConst 'DEU=In der Excel-Tabelle wurden keine Datumsangaben erkannt.;ENU=Dates have not been recognized in the Excel worksheet.;NLD=Er werden geen datums in het Excel-werkblad gevonden.;NOR=Datoene gjenkjennes ikke i Excel-arket.';
      Text027@1000 : TextConst 'DEU=Posten ersetzen,Posten hinzufÅgen;ENU=Replace entries,Add entries;NLD=Posten vervangen,Posten toevoegen;NOR=Erstatt poster,Legg til poster';
      Text028@1024 : TextConst 'DEU=Import aus Excel-Arbeitsblatt wird ausgefÅhrt...;ENU=Importing from Excel worksheet;NLD=Importeren uit Excel-werkblad;NOR=Importere fra Excel-regneark';
      ExcelFileExtensionTok@1014 : TextConst '@@@={Locked};DEU=.xlsx;ENU=.xlsx;NLD=.xlsx;NOR=.xlsx';

    LOCAL PROCEDURE AnalyzeData@2();
    VAR
      TempExcelBuffer@1000 : TEMPORARY Record 370;
      CostBudgetBuffer@1001 : Record 1114;
      CostBudgetBuffer2@1002 : Record 1114;
      CostCenter@1004 : Record 1112;
      CostObject@1007 : Record 1113;
      HeaderRowNo@1003 : Integer;
      TestDateTime@1005 : DateTime;
      OldRowNo@1006 : Integer;
    BEGIN
      Window.OPEN(
        Text007 +
        '@1@@@@@@@@@@@@@@@@@@@@@@@@@\');
      Window.UPDATE(1,0);
      TotalRecNo := ExcelBuffer.COUNT;
      RecNo := 0;
      CostBudgetBuffer2.INIT;
      CostBudgetBuffer.DELETEALL;

      IF ExcelBuffer.FIND('-') THEN BEGIN
        REPEAT
          RecNo := RecNo + 1;
          Window.UPDATE(1,ROUND(RecNo / TotalRecNo * 10000,1));
          CASE TRUE OF
            STRPOS(UPPERCASE(ExcelBuffer."Cell Value as Text"),UPPERCASE(Text009)) <> 0:
              BEGIN
                IF HeaderRowNo = 0 THEN BEGIN
                  HeaderRowNo := ExcelBuffer."Row No.";
                  InsertTempExcelBuffer(ExcelBuffer,TempExcelBuffer,Text009);
                END ELSE
                  ERROR(Text011,Text009);
              END;
            STRPOS(UPPERCASE(ExcelBuffer."Cell Value as Text"),UPPERCASE(Text017)) <> 0:
              BEGIN
                IF HeaderRowNo = ExcelBuffer."Row No." THEN
                  InsertTempExcelBuffer(ExcelBuffer,TempExcelBuffer,Text017)
                ELSE
                  IF (HeaderRowNo < ExcelBuffer."Row No.") AND (HeaderRowNo <> 0) THEN
                    ERROR(Text011,Text017);
              END;
            STRPOS(UPPERCASE(ExcelBuffer."Cell Value as Text"),UPPERCASE(Text018)) <> 0:
              BEGIN
                IF HeaderRowNo = ExcelBuffer."Row No." THEN
                  InsertTempExcelBuffer(ExcelBuffer,TempExcelBuffer,Text018)
                ELSE
                  IF (HeaderRowNo < ExcelBuffer."Row No.") AND (HeaderRowNo <> 0) THEN
                    ERROR(Text011,Text018);
              END;
            ExcelBuffer."Row No." = HeaderRowNo:
              BEGIN
                TempExcelBuffer := ExcelBuffer;
                IF EVALUATE(TestDateTime,TempExcelBuffer."Cell Value as Text") THEN BEGIN
                  TempExcelBuffer."Cell Value as Text" := FORMAT(DT2DATE(TestDateTime));
                  TempExcelBuffer.Comment := Text014;
                  TempExcelBuffer.INSERT;
                END;
              END;
            (ExcelBuffer."Row No." > HeaderRowNo) AND (HeaderRowNo > 0):
              BEGIN
                IF ExcelBuffer."Row No." <> OldRowNo THEN BEGIN
                  OldRowNo := ExcelBuffer."Row No.";
                  CLEAR(CostBudgetBuffer2);
                END;
                TempExcelBuffer.SETRANGE("Column No.",ExcelBuffer."Column No.");
                IF TempExcelBuffer.FIND('-') THEN
                  CASE TempExcelBuffer.Comment OF
                    Text009:
                      BEGIN
                        TempCostType.SETRANGE(
                          "No.",
                          COPYSTR(
                            ExcelBuffer."Cell Value as Text",
                            1,MAXSTRLEN(CostBudgetBuffer2."Cost Type No.")));
                        IF TempCostType.FINDFIRST THEN
                          CostBudgetBuffer2."Cost Type No." :=
                            COPYSTR(
                              ExcelBuffer."Cell Value as Text",
                              1,MAXSTRLEN(CostBudgetBuffer2."Cost Type No."))
                        ELSE
                          CostBudgetBuffer2."Cost Type No." := '';
                      END;
                    Text017:
                      BEGIN
                        IF CostCenter.GET(COPYSTR(
                               ExcelBuffer."Cell Value as Text",1,MAXSTRLEN(CostBudgetBuffer2."Cost Center Code")))
                        THEN
                          CostBudgetBuffer2."Cost Center Code" := CostCenter.Code
                        ELSE
                          ERROR(Text019,CostBudgetBuffer2.FIELDCAPTION("Cost Center Code"),CostCenter.TABLECAPTION);
                      END;
                    Text018:
                      BEGIN
                        IF CostObject.GET(COPYSTR(
                               ExcelBuffer."Cell Value as Text",1,MAXSTRLEN(CostBudgetBuffer2."Cost Object Code")))
                        THEN
                          CostBudgetBuffer2."Cost Object Code" := CostObject.Code
                        ELSE
                          ERROR(Text019,CostBudgetBuffer2.FIELDCAPTION("Cost Object Code"),CostObject.TABLECAPTION);
                      END;
                    Text014:
                      IF CostBudgetBuffer2."Cost Type No." <> '' THEN BEGIN
                        CostBudgetBuffer := CostBudgetBuffer2;
                        EVALUATE(CostBudgetBuffer.Date,TempExcelBuffer."Cell Value as Text");
                        EVALUATE(CostBudgetBuffer.Amount,ExcelBuffer."Cell Value as Text");
                        IF NOT CostBudgetBuffer.FIND('=') THEN
                          CostBudgetBuffer.INSERT
                        ELSE
                          ERROR(Text023);
                      END;
                  END;
              END;
          END;
        UNTIL ExcelBuffer.NEXT = 0;
      END;

      Window.CLOSE;
      TempExcelBuffer.RESET;
      TempExcelBuffer.SETRANGE(Comment,Text009);
      IF NOT TempExcelBuffer.FINDFIRST THEN
        ERROR(Text025);
      TempExcelBuffer.SETRANGE(Comment,Text014);
      IF NOT TempExcelBuffer.FINDFIRST THEN
        ERROR(Text026);
    END;

    [External]
    PROCEDURE SetGLBudgetName@3(NewToCostBudgetName@1000 : Code[10]);
    BEGIN
      ToCostBudgetName := NewToCostBudgetName;
    END;

    LOCAL PROCEDURE IsLineTypeCostType@7(CostTypeNo@1001 : Code[20]) : Boolean;
    VAR
      CostType@1000 : Record 1103;
    BEGIN
      IF NOT CostType.GET(CostTypeNo) THEN
        EXIT(FALSE);
      EXIT(CostType.Type = CostType.Type::"Cost Type");
    END;

    LOCAL PROCEDURE InsertTempExcelBuffer@9(VAR ExcelBuffer@1003 : Record 370;VAR TempExcelBuffer@1002 : TEMPORARY Record 370;Text@1001 : Text[250]);
    BEGIN
      TempExcelBuffer := ExcelBuffer;
      TempExcelBuffer.Comment := Text;
      TempExcelBuffer.INSERT;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

