OBJECT Codeunit 12013593 Exflow Workflow Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EXF510000,4PS;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      EXF001@1100285003 : TextConst 'ENU=Line Type %1 is not allowed in Exflow Documents;SVE=Radtypen %1 „r inte till†ten f”r Exflowdokument';
      EXF003@1100285005 : TextConst 'ENU=Automatically matched by system;SVE=Automatiskt matchad av systemet';
      TempProposalsBuffer@1100285001 : TEMPORARY Record 12013615;
      ExFlowSetup@1100285000 : Record 12013601;
      ExDimMgt@1100285002 : Codeunit 12013605;
      RestoreImage@1100285006 : Integer;
      DeletedPath@1100285007 : TextConst 'ENU=DeletedFiles;SVE=BortplockadeFiler';
      UseBuffer@1100285004 : Boolean;
      WARNTEXT1@1100285013 : TextConst 'ENU=Conctract %1 is not valid for date %2;SVE=Kontrakt %1 „r ej giltigt f”r datum %2';
      WARNTEXT2@1100285012 : TextConst 'ENU=Contract %1 does not have an open period for date %2;SVE=Avtal %1 har ingen ”ppen period f”r datum %2';
      WARNTEXT3@1100285011 : TextConst 'ENU=The invoice has a higher amount than what is allowed for contract %1;SVE=Fakturan har ett h”gre belopp „n vad som till†ts f”r avtal %1';
      WARNTEXT4@1100285010 : TextConst 'ENU=Max No. of invoices (%1) is reached in period for contract %2;SVE=Max antal fakturor (%1) „r ”verstiget f”r avtal %2';
      WARNTEXT5@1100285009 : TextConst 'ENU=Max total contract amount (%1) is reached for contract %2;SVE=Max totalbelopp (%1) „r ”verstiget f”r avtal %2';
      WARNTEXT6@1100285008 : TextConst 'ENU=Invoices are missing in previous open periods. Registering this invoice will update Period start. (Conctract: %1);SVE=Fakturor saknas i tidigare ”ppna perioder. Registrering av denna faktura kommer uppdatera periodstart (Avtalsnummer: %1)';

    PROCEDURE CreateProposals@1100285013(VAR ExfPurchDocLine@1100285002 : Record 12013588;CalledFromUpdateMode@1100285006 : Boolean;ChangedByDimension@1100285007 : Boolean;PerformManuallyChangedCheck@1100285014 : Boolean;PerformDeletion@1100285015 : Boolean);
    VAR
      Proposals@1100285001 : Record 12013615;
      TemplateRule@1100285000 : Record 12013645;
      ExfPurchDocHead@1100285018 : Record 12013587;
      ExfPurchDocLine2@1100285005 : Record 12013588;
      TempDimValue@1100285003 : TEMPORARY Record 349;
      TempCode@1100285013 : Code[10];
      NextLineNo@1100285008 : Integer;
      AmtToCheckAgainstRule@1100285009 : Decimal;
      Found@1100285010 : Boolean;
      TempFound@1100285012 : Boolean;
    BEGIN
      IF PerformManuallyChangedCheck THEN
        IF ProposalChangedByUser(ExfPurchDocLine,TRUE) THEN
          EXIT;

      IF ExfPurchDocLine."No." = '' THEN
        EXIT;

      ExFlowSetup.GET;

      IF NOT ExfPurchDocLine.Approval THEN BEGIN
        Proposals.RESET;
        Proposals.LOCKTABLE;
        Proposals.SETRANGE("Entry No.", ExfPurchDocLine."Inbound Document No.");
        Proposals.SETRANGE("Line No." , ExfPurchDocLine."Line No.");
        Proposals.DELETEALL;

        ExfPurchDocLine."Applied Template Rule" := '';

        EXIT;
      END;

      ExfPurchDocHead.GET(ExfPurchDocLine."Inbound Document No.");

      AmtToCheckAgainstRule := ExfPurchDocLine."Line Amount";

      IF ExFlowSetup."Copy Approval Flow Matched PO" <> ExFlowSetup."Copy Approval Flow Matched PO"::Never THEN
        IF CopyApprovalFlowFromPO(ExfPurchDocLine,NextLineNo,PerformDeletion) THEN
          IF ExFlowSetup."Copy Approval Flow Matched PO" = ExFlowSetup."Copy Approval Flow Matched PO"::Only THEN
            EXIT;

      ExDimMgt.GetDimFromExFPurchLine(ExfPurchDocLine,TempFound,TempCode,TempCode,TempDimValue);

      CLEAR(TemplateRule);
      IF ExfPurchDocLine."Template Rule" <> '' THEN BEGIN
        Found := TRUE;
        IF NOT TemplateRule.GET(ExfPurchDocLine."Template Rule") THEN
          Found := TemplateRule.FindTemplateFromExFPurch(ExfPurchDocLine, TemplateRule, 2,
                                                         ExfPurchDocLine."Purchaser Code", TempDimValue);
      END
      ELSE
        Found := TemplateRule.FindTemplateFromExFPurch(ExfPurchDocLine, TemplateRule, 2,
                                                    ExfPurchDocLine."Purchaser Code", TempDimValue);

      IF Found THEN BEGIN
        IF TemplateRule."Total Invoice Amount" THEN BEGIN
          AmtToCheckAgainstRule := ExfPurchDocHead."Document Amount";
          IF AmtToCheckAgainstRule = 0 THEN BEGIN
            AmtToCheckAgainstRule := 0;

            ExfPurchDocLine2.RESET;
            ExfPurchDocLine2.SETRANGE("Inbound Document No.",ExfPurchDocLine."Inbound Document No.");
            IF ExfPurchDocLine2.FINDSET THEN
              REPEAT
                IF ExfPurchDocLine2."Line No." = ExfPurchDocLine."Line No." THEN
                  AmtToCheckAgainstRule := AmtToCheckAgainstRule + ExfPurchDocLine.Amount
                ELSE
                  // to make sure only non-VAT amounts are counted
                  AmtToCheckAgainstRule := AmtToCheckAgainstRule + ExfPurchDocLine2.Amount;
              UNTIL ExfPurchDocLine2.NEXT = 0;
          END;
        END;

        IF (ExfPurchDocHead."Currency Factor" <> 1) AND (ExfPurchDocHead."Currency Factor" <> 0) THEN
          AmtToCheckAgainstRule := AmtToCheckAgainstRule / ExfPurchDocHead."Currency Factor";
      END;

      IF PerformDeletion THEN BEGIN
        Proposals.RESET;
        Proposals.LOCKTABLE;
        Proposals.SETRANGE("Entry No.", ExfPurchDocLine."Inbound Document No.");
        Proposals.SETRANGE("Line No." , ExfPurchDocLine."Line No.");
        Proposals.DELETEALL;
      END;

      InsertAppInProposal(ExfPurchDocLine,TemplateRule,AmtToCheckAgainstRule,
                          ChangedByDimension,NextLineNo,Found,TempDimValue,CalledFromUpdateMode);

      IF Found THEN
        ExfPurchDocLine."Applied Template Rule" := TemplateRule.Code
      ELSE
        ExfPurchDocLine."Applied Template Rule" := '';

      IF NOT CalledFromUpdateMode THEN
        ExfPurchDocLine.MODIFY;
    END;

    PROCEDURE ProposalChangedByUser@1100285009(ExfPurchDocLine@1100285000 : Record 12013588;FilterOnLine@1100285004 : Boolean) : Boolean;
    VAR
      Proposals@1100285001 : Record 12013615;
    BEGIN
      Proposals.RESET;
      Proposals.SETCURRENTKEY(Changed);
      Proposals.SETRANGE("Entry No.", ExfPurchDocLine."Inbound Document No.");
      IF FilterOnLine THEN
        Proposals.SETRANGE("Line No." , ExfPurchDocLine."Line No.");
      Proposals.SETRANGE(Changed, TRUE);
      EXIT(NOT Proposals.ISEMPTY);
    END;

    PROCEDURE InsertAppInProposal@1100285021(VAR ExPurchDocLine@1100285007 : Record 12013588;TemplateRule@1100285002 : Record 12013645;MaxAmount@1100285005 : Decimal;ChangedByDimension@1100285006 : Boolean;VAR NextLineNo@1100285003 : Integer;FoundTemplateRule@1100285010 : Boolean;VAR TempDimValue@1100285013 : TEMPORARY Record 349;CalledFromUpdateMode@1100285014 : Boolean);
    VAR
      TemplateRuleLine@1100285001 : Record 12013603;
      Proposals@1100285000 : Record 12013615;
      ExUserGroup@1100285004 : Record 12013606;
      Job@1100285011 : Record 11072003;
      DimOwner@1100285012 : Record 12013655;
      TempApprover@1100285008 : Code[50];
      CreateLine@1100285009 : Boolean;
      ExFlow4PS@1101285000 : Codeunit 12057160;
    BEGIN
      ExFlowSetup.GET;

      IF NextLineNo = 0 THEN
        NextLineNo := 10000;

      IF ExPurchDocLine."First Approver" <> '' THEN BEGIN
        IF ExFlowSetup."Copy First Approver to Flow" IN [ExFlowSetup."Copy First Approver to Flow"::"All Documents",
                                                         ExFlowSetup."Copy First Approver to Flow"::"Invoices Only"]
        THEN BEGIN
          ExUserGroup.GET(ExPurchDocLine."First Approver");
          IF NOT ExUserGroup.Blocked THEN BEGIN
            IF UseBuffer THEN BEGIN
              TempProposalsBuffer.INIT;
              TempProposalsBuffer."Entry No." := ExPurchDocLine."Inbound Document No.";
              TempProposalsBuffer."Line No." := ExPurchDocLine."Line No.";
              TempProposalsBuffer."Approver Order" := NextLineNo;
              TempProposalsBuffer.Approver := ExPurchDocLine."First Approver";
              TempProposalsBuffer."Group Name" := ExUserGroup.Name;
              TempProposalsBuffer.Source := TempProposalsBuffer.Source::"Copied from First Approver";
              TempProposalsBuffer.INSERT;

              IF NextLineNo = 10000 THEN
                InsertDimFromUser(ExPurchDocLine."First Approver",ExPurchDocLine,ChangedByDimension,CalledFromUpdateMode);
            END
            ELSE BEGIN
              Proposals.INIT;
              Proposals."Entry No." := ExPurchDocLine."Inbound Document No.";
              Proposals."Line No." := ExPurchDocLine."Line No.";
              Proposals."Approver Order" := NextLineNo;
              Proposals.Approver := ExPurchDocLine."First Approver";
              Proposals."Group Name" := ExUserGroup.Name;
              Proposals.Source := Proposals.Source::"Copied from First Approver";
              Proposals.INSERT;

              IF NextLineNo = 10000 THEN
                InsertDimFromUser(ExPurchDocLine."First Approver",ExPurchDocLine,ChangedByDimension,CalledFromUpdateMode);
            END;

            NextLineNo := NextLineNo + 10000;

            TempApprover := ExPurchDocLine."First Approver";
          END;
        END;
      END;

      MaxAmount := ABS(MaxAmount);

      IF FoundTemplateRule THEN BEGIN
        TemplateRuleLine.RESET;
        TemplateRuleLine.SETRANGE(Code,TemplateRule.Code);
        IF MaxAmount >= 0 THEN
          TemplateRuleLine.SETFILTER("Over Amount",'<=%1', MaxAmount);
        TemplateRuleLine.SETFILTER("Not Over Amount",'>%1|0', MaxAmount);
        TemplateRuleLine.SETFILTER("Approver Group", '<>%1', '');
        IF TemplateRuleLine.FINDSET THEN BEGIN
          IF NextLineNo = 10000 THEN
            InsertDimFromUser(TemplateRuleLine."Approver Group",ExPurchDocLine,ChangedByDimension,CalledFromUpdateMode);

          REPEAT
            CreateLine := TRUE;

            ExUserGroup.GET(TemplateRuleLine."Approver Group");
            IF ExUserGroup.Blocked THEN
              CreateLine := FALSE;

            IF CreateLine THEN BEGIN
              IF ExUserGroup."Replacement type" = ExUserGroup."Replacement type"::"Person responsible" THEN BEGIN
                CLEAR(ExUserGroup);

                IF Job.GET(ExPurchDocLine."Job No.") THEN
                  //4PS
                  IF ExUserGroup.GET(ExFlow4PS.GetUserGrpForPersonResp4PS(Job)) THEN;
                  //4PS
              END
              ELSE BEGIN
                IF ExUserGroup."Replacement type" IN [ExUserGroup."Replacement type"::"Dimension owner 1",
                                                      ExUserGroup."Replacement type"::"Dimension owner 2"] THEN BEGIN
                  DimOwner.RESET;
                  IF ExUserGroup."Replacement type" = ExUserGroup."Replacement type"::"Dimension owner 1" THEN
                    DimOwner.SETRANGE("Approver Type", DimOwner."Approver Type"::"Dimension Owner 1")
                  ELSE
                    IF ExUserGroup."Replacement type" = ExUserGroup."Replacement type"::"Dimension owner 2" THEN
                      DimOwner.SETRANGE("Approver Type", DimOwner."Approver Type"::"Dimension Owner 2");

                  IF TemplateRule."Dimension Code 1" <> '' THEN
                    DimOwner.SETRANGE("Dimension Code", TemplateRule."Dimension Code 1")
                  ELSE
                    IF TemplateRule."Dimension Code 2" <> '' THEN
                      DimOwner.SETRANGE("Dimension Code", TemplateRule."Dimension Code 2");

                  CLEAR(ExUserGroup);
                  IF TemplateRule."Dimension Code 1" <> '' THEN BEGIN
                    TempDimValue.RESET;
                    TempDimValue.SETRANGE("Dimension Code", TemplateRule."Dimension Code 1");
                    IF TempDimValue.FINDFIRST THEN BEGIN
                      DimOwner.SETRANGE("Dimension Value Code", TempDimValue.Code);
                      IF DimOwner.FINDFIRST THEN
                        IF ExUserGroup.GET(DimOwner."Approver Group") THEN;
                    END;
                  END
                  ELSE
                    IF TemplateRule."Dimension Code 2" <> '' THEN BEGIN
                      TempDimValue.RESET;
                      TempDimValue.SETRANGE("Dimension Code", TemplateRule."Dimension Code 2");
                      IF TempDimValue.FINDFIRST THEN BEGIN
                        DimOwner.SETRANGE("Dimension Value Code", TempDimValue.Code);
                        IF DimOwner.FINDFIRST THEN
                          IF ExUserGroup.GET(DimOwner."Approver Group") THEN;
                      END;
                    END;
                END;
              END;
            END;

            IF CreateLine AND (TempApprover <> '') THEN BEGIN
              IF ExUserGroup.Code = TempApprover THEN
                CreateLine := FALSE;
              TempApprover := '';
            END;

            IF CreateLine THEN BEGIN
              IF UseBuffer THEN BEGIN
                IF ExUserGroup.Code <> '' THEN BEGIN
                  TempProposalsBuffer.INIT;
                  TempProposalsBuffer."Entry No." := ExPurchDocLine."Inbound Document No.";
                  TempProposalsBuffer."Line No." := ExPurchDocLine."Line No.";
                  TempProposalsBuffer."Approver Order" := NextLineNo;
                  TempProposalsBuffer.Approver := ExUserGroup.Code;
                  TempProposalsBuffer."Group Name" := ExUserGroup.Name;
                  TempProposalsBuffer.Source := TempProposalsBuffer.Source::"From template rule NAV";
                  TempProposalsBuffer."Added from Template Rule" := TemplateRuleLine.Code;
                  TempProposalsBuffer.INSERT;
                END;
              END
              ELSE BEGIN
                IF ExUserGroup.Code <> '' THEN BEGIN
                  Proposals.INIT;
                  Proposals."Entry No." := ExPurchDocLine."Inbound Document No.";
                  Proposals."Line No." := ExPurchDocLine."Line No.";
                  Proposals."Approver Order" := NextLineNo;
                  Proposals.Approver := ExUserGroup.Code;
                  Proposals."Group Name" := ExUserGroup.Name;
                  Proposals.Source := Proposals.Source::"From template rule NAV";
                  Proposals."Added from Template Rule" := TemplateRuleLine.Code;
                  Proposals.INSERT;
                END;
              END;

              TempApprover := ExUserGroup.Code;
              NextLineNo := NextLineNo + 10000;
            END;
          UNTIL TemplateRuleLine.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE ShowProposals@1100285015(ExfPurchDocLine@1100285000 : Record 12013588);
    VAR
      Proposals@1100285001 : Record 12013615;
      AppProposalsForm@1100285002 : Page 12013615;
    BEGIN
      Proposals.RESET;
      Proposals.FILTERGROUP(2);
      Proposals.SETRANGE("Entry No.",ExfPurchDocLine."Inbound Document No.");
      Proposals.SETRANGE("Line No.",ExfPurchDocLine."Line No.");
      AppProposalsForm.SETTABLEVIEW(Proposals);
      AppProposalsForm.RUN;
      Proposals.FILTERGROUP(0);
    END;

    PROCEDURE LineTypeAllowed@1100285029(LineType@1100285000 : ' ,G/L Account,Item,,Fixed Asset,Charge (Item)';ShowError@1100285001 : Boolean) : Boolean;
    VAR
      Col@1100285002 : Integer;
    BEGIN
      CASE LineType OF
        LineType::"G/L Account":
          Col := GetColumnID('G_LACCOUNT');

        LineType::Item:
          Col := GetColumnID('ITEM');

        LineType::"Fixed Asset":
          Col := GetColumnID('FIXEDASSET');

        LineType::"Charge (Item)":
          Col := GetColumnID('CHARGE');
      END;

      IF Col = 0 THEN
        BEGIN
          IF ShowError THEN
            MESSAGE(EXF001,LineType);

          EXIT(FALSE);
        END
      ELSE
        EXIT(TRUE);
    END;

    PROCEDURE GetColumnID@1100285019(DimCode@1100285000 : Code[20]) : Integer;
    VAR
      Column@1100285001 : Record 12013661;
    BEGIN
      Column.RESET;
      Column.SETRANGE(Code, DimCode);

      IF Column.FIND('-') THEN
        EXIT(Column.ID)
      ELSE
        EXIT(0);
    END;

    PROCEDURE CreateExfDocHead@1100285002(VAR PurchHeader@1100285000 : Record 38;ExFlowPurchDocHeader@1100285002 : Record 12013587);
    VAR
      ExfDocHead@1100285001 : Record 12013608;
      ExDocHead2@1100285004 : Record 12013612;
      ExfImpPurchImpHead@1100285006 : Record 12013650;
      ExFlow@1100285003 : Codeunit 12013601;
    BEGIN
      ExFlow.CreateDocument(PurchHeader);
      IF NOT ExfDocHead.RetrieveRecord(ExfDocHead,PurchHeader."Document Type",PurchHeader."No.") THEN
        EXIT;

      ExfDocHead."Admin Comment" := ExFlowPurchDocHeader."Admin Comment";
      ExfDocHead."Project No." := ExFlowPurchDocHeader."Job No.";
      ExfDocHead."Text Field 1" := ExFlowPurchDocHeader."Order No. (Import)";
      ExfDocHead."Contract No." := ExFlowPurchDocHeader."Contract No.";

      IF ExfDocHead.HASLINKS THEN
        ExfDocHead.COPYLINKS(ExFlowPurchDocHeader);

      ExDocHead2.RESET;
      ExDocHead2.SETCURRENTKEY("Document No.");
      ExDocHead2.SETRANGE("Document Type", ExfDocHead."Document Type");
      ExDocHead2.SETRANGE("Document No.", ExfDocHead."Document No.");
      IF ExDocHead2.FINDFIRST THEN BEGIN
        ExDocHead2."Import Document No." := ExFlowPurchDocHeader."Import Document No.";
        ExfDocHead."Import Document No." := ExFlowPurchDocHeader."Import Document No.";

        IF ExfImpPurchImpHead.GET(ExFlowPurchDocHeader."Import Document No.") THEN
          ExfDocHead."Batch No." := ExfImpPurchImpHead."Batch No.";

        ExDocHead2.MODIFY;
      END;

      ExfDocHead.MODIFY;
    END;

    PROCEDURE CreateExfDocLine@1100285005(PurchLine@1100285000 : Record 39);
    VAR
      ExFlow@1100285001 : Codeunit 12013601;
    BEGIN
      ExFlow.CreateDocumentLine(PurchLine,FALSE,FALSE);
    END;

    PROCEDURE AutoApprove@1100285017(VAR DocHead@1100285000 : Record 12013608);
    VAR
      DocLine@1100285001 : Record 12013609;
      DocLineApp@1100285002 : Record 12013610;
      PurchLine@1100285004 : Record 39;
      ExFlowSetup@1100285005 : Record 12013601;
      ExUserComp@1100285007 : Record 12013641;
      UpdatePurchLine@1100285003 : Codeunit 12013609;
      ExFlow@1100285006 : Codeunit 12013601;
    BEGIN
      ExFlowSetup.GET;

      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type",DocHead."Document Type");
      PurchLine.SETRANGE("Document No.",DocHead."Document No.");
      PurchLine.SETRANGE(History,TRUE);
      PurchLine.SETRANGE(Approve,TRUE);
      IF NOT PurchLine.FINDFIRST THEN
        EXIT;

      PurchLine.SETRANGE(History,FALSE);
      IF NOT PurchLine.FINDFIRST THEN
        UpdatePurchLine.SetStatusReadyForPosting(DocHead,FALSE,ExFlowSetup);

      PurchLine.SETRANGE(History,TRUE);
      IF PurchLine.FINDSET THEN
        REPEAT
          DocLine.RetrieveRecord(DocLine,PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.");
          DocLine.Flowstatus := DocLine.Flowstatus::Approved;
          DocLine.MODIFY(FALSE);

          DocLineApp.RESET;
          DocLineApp.SETCURRENTKEY("Document Line ID");
          DocLineApp.SETRANGE("Document Line ID", DocLine.ID);
          IF DocLineApp.FINDSET(TRUE) THEN
            REPEAT
              DocLineApp.Flowstatus := DocLineApp.Flowstatus::Approved;
              DocLineApp."Approval Date" := CREATEDATETIME(WORKDATE,TIME);
              IF ExFlowSetup."Auto Approval User" <> '' THEN
                DocLineApp."Approved By" := ExFlowSetup."Auto Approval User"
              ELSE BEGIN
                DocLineApp."Approved By" := USERID;
                IF ExFlow.GetUserComp(ExUserComp,USERID) THEN
                  DocLineApp."Approved By" := ExUserComp."User ID";
              END;

              DocLineApp.Comment := EXF003;
              DocLineApp."Auto Approved" := TRUE;
              DocLineApp.MODIFY(FALSE);
            UNTIL DocLineApp.NEXT = 0;
        UNTIL PurchLine.NEXT = 0;
    END;

    PROCEDURE SaveImageToFileSys@1100285000(BlobNo@1100285000 : Integer;PurchHead@1100285004 : Record 38;ExfPurchDocHead@1100285007 : Record 12013587;VAR NewImageName@1100285009 : Text[250];VAR TempBLob@1100285011 : Record 99008535);
    VAR
      ExfBlob@1100285001 : Record 12013591;
      ExPurchHeaderArchive@1100285010 : Record 12013650;
      ExflowFileMgt@1100285002 : Codeunit 12013602;
      Folder@1100285005 : Text[170];
      SubFolder@1100285003 : Text[30];
      ImageName@1100285006 : Text[240];
      OriginalFileName@1100285008 : Text[1024];
    BEGIN
      ExFlowSetup.GET;
      ExfBlob.GET(BlobNo);
      SubFolder := DayMap(WORKDATE);

      IF ExFlowSetup."File storage type" = ExFlowSetup."File storage type"::Database THEN BEGIN
        ExfBlob.CALCFIELDS(BLOB);
        TempBLob.Blob := ExfBlob.BLOB;
        ImageName := COPYSTR(DELCHR(PurchHead."Pay-to Vendor No." + '-' + PurchHead."No." + '-' + ExflowFileMgt.GetFileName(ExfPurchDocHead."Image File Name"),'=','@$%&<>/?'),1,
                     MAXSTRLEN(ImageName));
        IF STRLEN(ExfBlob."File Extension") > 0 THEN BEGIN
          ImageName := DELSTR(ImageName,STRLEN(ImageName) - STRLEN(ExfBlob."File Extension"));
          NewImageName := ImageName + '.' + ExfBlob."File Extension";
        END ELSE
          NewImageName := ImageName;

        NewImageName := SubFolder + NewImageName;
        ExfBlob.DELETE;
      END ELSE BEGIN
        //FileSystem
        ExFlowSetup.TESTFIELD("Path to Used Invoices");

        Folder := ExFlowSetup."Path to Used Invoices";
        IF NOT ExflowFileMgt.FolderExist(Folder + SubFolder) THEN
          ExflowFileMgt.NewFolder(Folder + SubFolder,Folder);

        OriginalFileName := ExflowFileMgt.Path(ExfPurchDocHead."Image File Name");
        IF OriginalFileName <> '' THEN
          OriginalFileName := COPYSTR(ExfPurchDocHead."Image File Name", STRLEN(OriginalFileName) + 1);

        OriginalFileName := DELSTR(OriginalFileName,STRLEN(OriginalFileName) - STRLEN(ExfBlob."File Extension"));

        ImageName := COPYSTR(DELCHR(PurchHead."Pay-to Vendor No." + '-' + PurchHead."No." + '-' + OriginalFileName,'=','@$%&<>/?'),1,
                     MAXSTRLEN(ImageName)-STRLEN(ExfBlob."File Extension"));

        ImageName := ImageName + '.' + ExfBlob."File Extension";

        NewImageName := SubFolder + ImageName;

        ExfBlob.ExportBLOB(Folder + SubFolder + ImageName,FALSE);
        ExfBlob.DELETE;
      END;

      IF ExPurchHeaderArchive.GET(ExfPurchDocHead."Import Document No.") THEN BEGIN
        ExPurchHeaderArchive."XML File Name" := SubFolder + ExPurchHeaderArchive."XML File Name";
        ExPurchHeaderArchive.MODIFY;
      END;
    END;

    PROCEDURE RestoreImageToFileSys@1100285001(ExfPurchDocHead@1100285004 : Record 12013587;pRestore@1100285000 : Boolean);
    VAR
      ExfBlob@1100285001 : Record 12013591;
      ExImportManager@1100285005 : Codeunit 12013604;
      ExFlowFileMgt@1100285002 : Codeunit 12013602;
      TempFileName@1100285003 : Text[1024];
      TempTime@1100285006 : Integer;
    BEGIN
      IF pRestore THEN BEGIN
        IF ExfBlob.GET(ExfPurchDocHead."Image Buffer ID") THEN BEGIN
          ExImportManager.TransformInteger(FORMAT(ExfPurchDocHead."Time Created"),TempTime);
          TempFileName := ExFlowFileMgt.Path(ExfPurchDocHead."Image File Name") + FORMAT(TempTime) + '_' +
                          ExFlowFileMgt.GetFileName(ExfPurchDocHead."Image File Name");
          ExfBlob.ExportBLOB(TempFileName,FALSE);
          ExfBlob.DELETE;
        END;
      END ELSE BEGIN
        IF ExfBlob.GET(ExfPurchDocHead."Image Buffer ID") THEN BEGIN
          ExfBlob.DELETE;
        END;
      END;
    END;

    PROCEDURE SetRestoreImageToFileSys@1100285007(pRestoreImage@1100285000 : Integer);
    BEGIN
      RestoreImage := pRestoreImage;
    END;

    PROCEDURE GetRestoreImageToFileSys@1100285008(VAR vRestoreImage@1100285000 : Integer);
    BEGIN
      vRestoreImage := RestoreImage;
    END;

    PROCEDURE DayMap@1000000018(InDate@1000000000 : Date) : Text[128];
    VAR
      Year@1000000003 : Integer;
      Week@1000000009 : Integer;
      Temp@1000000008 : Text[30];
      TxtYear@1000000011 : Text[4];
      TxtWeek@1000000012 : Text[2];
    BEGIN
      Week := DATE2DWY(InDate, 2);
      Year := DATE2DWY(InDate, 3);
      TxtYear := FORMAT(Year);

      IF STRLEN(TxtYear) = 2 THEN
        TxtYear := '20' + TxtYear;

      TxtWeek := FORMAT(Week);

      IF STRLEN(TxtWeek) = 1 THEN
        TxtWeek := '0' + TxtWeek;

      Temp := TxtYear + '\' + TxtWeek + '\';
      EXIT(Temp);
    END;

    PROCEDURE PrePostUpdateApprovers@1100285010(recExfPurchDocHEad@1100285000 : Record 12013587);
    VAR
      ExfPurchDocLine@1100285001 : Record 12013588;
      Proposals@1100285003 : Record 12013615;
      ManuallyChangedExists@1100285002 : Boolean;
    BEGIN
      ExfPurchDocLine.RESET;
      ExfPurchDocLine.SETRANGE("Inbound Document No.",recExfPurchDocHEad."Inbound Document No.");
      IF ExfPurchDocLine.FINDSET(TRUE) THEN BEGIN
        ManuallyChangedExists := ProposalChangedByUser(ExfPurchDocLine,FALSE);

        UseBuffer := NOT ManuallyChangedExists;

        TempProposalsBuffer.RESET;
        TempProposalsBuffer.DELETEALL;

        REPEAT
          CreateProposals(ExfPurchDocLine,FALSE,FALSE,ManuallyChangedExists,NOT UseBuffer);
        UNTIL ExfPurchDocLine.NEXT = 0;

        IF UseBuffer THEN BEGIN
          Proposals.RESET;
          Proposals.LOCKTABLE;
          Proposals.SETRANGE("Entry No.", ExfPurchDocLine."Inbound Document No.");
          Proposals.DELETEALL;

          TempProposalsBuffer.RESET;
          IF TempProposalsBuffer.FINDSET THEN
            REPEAT
              Proposals.INIT;
              Proposals.TRANSFERFIELDS(TempProposalsBuffer);
              Proposals.INSERT;
            UNTIL TempProposalsBuffer.NEXT = 0;
        END;

        UseBuffer := FALSE;
      END;
    END;

    PROCEDURE PurchPriceOK@1100285014(ExfPurchDocLine@1100285009 : Record 12013588) : Boolean;
    VAR
      AppSetup@1100285001 : Record 12013601;
      ExfPurchDocHead@1100285000 : Record 12013587;
      ExfPurchDocLine2@1100285002 : Record 12013588;
      OrderAmt@1100285003 : Decimal;
      LineDiff@1100285007 : Decimal;
      LineDiffPrc@1100285008 : Decimal;
      TotAmt@1100285004 : Decimal;
      ExFlowVend@1100285005 : Record 12013595;
      CurrExchRate@1100285006 : Record 330;
    BEGIN
      AppSetup.GET;
      WITH ExfPurchDocLine DO BEGIN
        IF "Exflow-Created Entry" = "Exflow-Created Entry"::DiffLine THEN BEGIN
          ExfPurchDocLine2.RESET;
          ExfPurchDocLine2.SETCURRENTKEY("Exflow-Created Entry");
          ExfPurchDocLine2.SETRANGE("Inbound Document No.", "Inbound Document No.");
          ExfPurchDocLine2.SETRANGE("Exflow-Created Entry", ExfPurchDocLine2."Exflow-Created Entry"::DiffLine);
          ExfPurchDocLine2.CALCSUMS(Amount);
          TotAmt := Amount;

          IF ExFlowVend.GET(ExfPurchDocLine."Buy-from Vendor No.") THEN
            IF ExFlowVend."Specific Diff Setting" THEN BEGIN
              AppSetup."Max Diff. Amt" := ExFlowVend."Max Diff. Amt";
              AppSetup."Max Diff. %" := ExFlowVend."Max Diff. %";
            END;

          ExfPurchDocHead.GET(ExfPurchDocLine."Inbound Document No.");

          LineDiffPrc := ABS(TotAmt / ExfPurchDocHead."Document Amount") * 100;
          IF AppSetup."Max Diff. %" < LineDiffPrc THEN
            EXIT(FALSE);

          IF ExfPurchDocHead."Currency Code" <> '' THEN
            TotAmt := CurrExchRate.ExchangeAmtFCYToLCY(0,ExfPurchDocHead."Job No.",
              ExfPurchDocHead."Posting Date",
              ExfPurchDocHead."Currency Code",
              TotAmt,
              ExfPurchDocHead."Currency Factor",FALSE); //4PS

          IF AppSetup."Max Diff. Amt" < ABS(TotAmt) THEN
            EXIT(FALSE);

          EXIT(TRUE);
        END
        ELSE BEGIN
          IF (AppSetup."Order Applies-to" = AppSetup."Order Applies-to"::"Order not used") OR ("Order No." = '') THEN
            EXIT(TRUE);

          OrderAmt :=  "Direct Unit Cost (Order)" * Quantity * ((100 - "Line Discount % (Order)")/100);
          IF Quantity <> 0 THEN
            LineDiff := ROUND(ABS("Line Amount"-OrderAmt) / Quantity,0.01)
          ELSE
            LineDiff := 0;

          IF LineDiff = 0 THEN
            EXIT(TRUE);

          IF OrderAmt = 0 THEN BEGIN
            IF LineDiff <> 0 THEN
              EXIT(FALSE)
            ELSE
              EXIT(TRUE);
          END;

          IF ("Line Amount") <> 0 THEN
            LineDiffPrc := ROUND(((LineDiff * 100)/(OrderAmt/Quantity)),0.01);

          IF ExFlowVend.GET(ExfPurchDocLine."Buy-from Vendor No.") THEN
            IF ExFlowVend."Specific Line Diff Setting" THEN BEGIN
              AppSetup."Allowed Price Diff (LCY)" := ExFlowVend."In LCY";
              AppSetup."Allowed Price Diff (%)" := ExFlowVend."In Discount";
            END;

          IF ExfPurchDocHead.GET(ExfPurchDocLine."Inbound Document No.") THEN
            IF ExfPurchDocHead."Currency Code" <> '' THEN
              LineDiff := CurrExchRate.ExchangeAmtFCYToLCY(
                0,
                ExfPurchDocHead."Job No.",
                ExfPurchDocHead."Posting Date",
                ExfPurchDocHead."Currency Code",
                LineDiff,
                ExfPurchDocHead."Currency Factor",
                FALSE); //4PS

          IF LineDiff > AppSetup."Allowed Price Diff (LCY)" THEN
            EXIT(FALSE);

          IF LineDiffPrc >  AppSetup."Allowed Price Diff (%)" THEN
            EXIT(FALSE);

          EXIT(TRUE);
        END;
      END;
    END;

    PROCEDURE ContractPriceOK@1100285026(ExfPurchDocHeader@1100285004 : Record 12013587;CalledFromRealCreate@1100285016 : Boolean;VAR WarnTxt@1100285010 : Text[250]) : Boolean;
    VAR
      ExContract@1100285000 : Record 12013633;
      CurrExchRate@1100285007 : Record 330;
      MatchedAmount@1100285006 : Decimal;
      CheckDate@1100285011 : Date;
      DocAmount@1100285015 : Decimal;
      ExfPurchDocHeader2@1100285023 : Record 12013587;
      ExDocument@1100285009 : Record 12013608;
      PurchHeader@1100285002 : Record 38;
    BEGIN
      WITH ExfPurchDocHeader DO BEGIN
        IF ("Contract No." = 0) THEN BEGIN
          WarnTxt := ''; //undefined
          EXIT(FALSE);
        END;

        ExContract.GET("Contract No.");

        CASE ExContract."Use Invoice Date Field" OF
          ExContract."Use Invoice Date Field"::"Document Date":
            CheckDate := ExfPurchDocHeader."Document Date";
          ExContract."Use Invoice Date Field"::"Due date":
            CheckDate := ExfPurchDocHeader."Due Date";
          ExContract."Use Invoice Date Field"::"Posting Date":
            CheckDate := ExfPurchDocHeader."Posting Date";
        END;

        //always Check
        IF CheckDate < ExContract."From Date" THEN BEGIN
          WarnTxt := COPYSTR(STRSUBSTNO(WARNTEXT1,ExContract."Contract No.",CheckDate),1,250);
          EXIT(FALSE);
        END;

        IF CheckDate > ExContract."To Date" THEN BEGIN
          WarnTxt := COPYSTR(STRSUBSTNO(WARNTEXT1,ExContract."Contract No.",CheckDate),1,250);
          EXIT(FALSE);
        END;

        //Called to Update Contract Per Start date on invoice reg.
        IF ExContract."Check Periods" THEN BEGIN
          GetContPeriodics(ExContract,CheckDate,CalledFromRealCreate,WarnTxt);
          IF WarnTxt <> '' THEN
            EXIT(FALSE);
        END;

        IF ExfPurchDocHeader."Currency Code" <> '' THEN
          DocAmount := CurrExchRate.ExchangeAmtFCYToLCY(0,ExfPurchDocHeader."Job No.", // 4PS
            ExfPurchDocHeader."Posting Date",ExfPurchDocHeader."Currency Code",
            ExfPurchDocHeader."Document Amount",ExfPurchDocHeader."Currency Factor",FALSE) // 4PS
        ELSE
          DocAmount := ExfPurchDocHeader."Document Amount";

        IF ExfPurchDocHeader."Document Type" = ExfPurchDocHeader."Document Type"::"Credit Memo" THEN
          DocAmount := -DocAmount;

        MatchedAmount := MatchedAmount + DocAmount;

        IF ExContract."Max invoice amount" > 0 THEN
          IF  (DocAmount > ExContract."Max invoice amount") THEN BEGIN
            WarnTxt := COPYSTR(STRSUBSTNO(WARNTEXT3,ExContract."Contract No."),1,250);
            EXIT(FALSE);
          END;

        IF ExContract."Contract Amount (LCY)" > 0 THEN BEGIN
          MatchedAmount := MatchedAmount + GetContPostedAmount(ExContract);
          //Check Other ExfPurchHeads
          ExfPurchDocHeader2.RESET;
          ExfPurchDocHeader2.SETCURRENTKEY("Contract No.");
          ExfPurchDocHeader2.SETRANGE("Contract No.", "Contract No.");
          ExfPurchDocHeader2.SETFILTER("Inbound Document No.",'<>%1',ExfPurchDocHeader."Inbound Document No.");
          IF ExfPurchDocHeader2.FINDSET THEN
            REPEAT
              IF ExfPurchDocHeader2."Currency Code" <> '' THEN
                DocAmount := CurrExchRate.ExchangeAmtFCYToLCY(0,ExfPurchDocHeader2."Job No.", // 4PS
                ExfPurchDocHeader2."Posting Date",ExfPurchDocHeader2."Currency Code",
                ExfPurchDocHeader2."Document Amount",ExfPurchDocHeader2."Currency Factor",FALSE) // 4PS
              ELSE
                DocAmount := ExfPurchDocHeader2."Document Amount";

              IF ExfPurchDocHeader2."Document Type" = ExfPurchDocHeader2."Document Type"::"Credit Memo" THEN
                DocAmount := -DocAmount;

              MatchedAmount := MatchedAmount + DocAmount;
            UNTIL (ExfPurchDocHeader2.NEXT = 0);

        ExDocument.RESET;
        ExDocument.SETCURRENTKEY("Contract No.");
        ExDocument.SETFILTER("Document Type",'%1|%2',ExDocument."Document Type"::Invoice,ExDocument."Document Type"::"Credit Memo");
        ExDocument.SETRANGE("Contract No.", "Contract No.");
        IF ExDocument.FINDSET THEN
          REPEAT
            IF ExDocument."Currency Code" <> '' THEN BEGIN
              PurchHeader.GET(ExDocument."Document Type",ExDocument."Document No.");
              DocAmount := CurrExchRate.ExchangeAmtFCYToLCY(0,PurchHeader."Job No.", // 4PS
                ExDocument."Posting Date",ExDocument."Currency Code",
                ExDocument."Net Amount",PurchHeader."Currency Factor",FALSE); // 4PS
            END ELSE
              DocAmount := ExDocument."Net Amount";

              IF ExDocument."Document Type" = ExDocument."Document Type"::"Credit Memo" THEN
                DocAmount := -DocAmount;

              MatchedAmount := MatchedAmount + DocAmount;
            UNTIL ExDocument.NEXT = 0;
          END;

          IF (ExContract."Contract Amount (LCY)" < MatchedAmount) THEN BEGIN
            WarnTxt := COPYSTR(STRSUBSTNO(WARNTEXT5,ExContract."Contract Amount (LCY)", ExContract."Contract No."),1,250);
            EXIT(FALSE);
          END;

        IF NOT ExContract."Auto Approve" AND CalledFromRealCreate THEN
          EXIT(FALSE);

        WarnTxt := '';
        EXIT(TRUE)
      END;
    END;

    PROCEDURE AutoApproveMiscCharges@1100285011(ExfPurchDocHead@1100285002 : Record 12013587) : Integer;
    VAR
      ExfPurchDocLine@1100285001 : Record 12013588;
      CurrExchRate@1100285003 : Record 330;
      ExFlowVend@1100285004 : Record 12013595;
      MiscAmt@1100285000 : Decimal;
      MaxMiscAmt@1100285005 : Decimal;
    BEGIN
      ExFlowSetup.GET;
      IF NOT ExFlowVend.GET(ExfPurchDocHead."Buy-from Vendor No.") THEN
        CLEAR(ExFlowVend);

      IF ExFlowVend."Specific Max Misc. Setting" THEN
        MaxMiscAmt := ExFlowVend."Max Misc. Charges (LCY)"
      ELSE
        MaxMiscAmt := ExFlowSetup."Max Misc. Charges (LCY)";

      IF MaxMiscAmt = 0 THEN
        EXIT(0);

      // Returns true if Doc is Connected to order with misc chages < allowed setting
      ExfPurchDocLine.RESET;
      ExfPurchDocLine.SETCURRENTKEY("Order No.");
      ExfPurchDocLine.SETRANGE("Inbound Document No.",ExfPurchDocHead."Inbound Document No.");
      ExfPurchDocLine.SETFILTER("Order No.",'<>%1','');

      // Not connected to order
      IF ExfPurchDocLine.ISEMPTY THEN
        EXIT(0);

      // Calc misc Charges
      MiscAmt := 0;
      ExfPurchDocLine.SETFILTER("Order No.",'%1','');
      IF ExfPurchDocLine.FINDSET THEN
        REPEAT
          MiscAmt := MiscAmt +  ExfPurchDocLine."Line Amount";
        UNTIL ExfPurchDocLine.NEXT = 0;

      // Misc Amt to LCY
      IF ExfPurchDocHead."Currency Code" <> '' THEN
         MiscAmt := CurrExchRate.ExchangeAmtFCYToLCY(0,ExfPurchDocHead."Job No.", // 4PS
          ExfPurchDocHead."Posting Date",ExfPurchDocHead."Currency Code",
          MiscAmt,ExfPurchDocHead."Currency Factor",FALSE); // 4PS

      IF ABS(MiscAmt) > ABS(MaxMiscAmt) THEN
        EXIT(1)
      ELSE
        EXIT(2);
    END;

    PROCEDURE CheckAutoApprovalAmt@1100285012(ExfPurchDocLine@1100285001 : Record 12013588) : Boolean;
    VAR
      ExfPurchDocHead@1100285002 : Record 12013587;
      CurrExchRate@1100285000 : Record 330;
    BEGIN
      ExFlowSetup.GET;
      IF (ExFlowSetup."Min. Doc. Approval Amt. (LCY)" = 0) AND
         (ExFlowSetup."Min. Approval Amount (LCY)" = 0) THEN
        EXIT(FALSE);

      ExfPurchDocHead.GET(ExfPurchDocLine."Inbound Document No.");

      IF NOT ExFlowSetup."Approve VAT lines" THEN BEGIN
        // Minimum Document Amount
        IF ExfPurchDocHead."Currency Code" <> '' THEN
           ExfPurchDocHead."Document Amount" := CurrExchRate.ExchangeAmtFCYToLCY(0,ExfPurchDocHead."Job No.", // 4PS
            ExfPurchDocHead."Posting Date",ExfPurchDocHead."Currency Code",
            ExfPurchDocHead."Document Amount",ExfPurchDocHead."Currency Factor",FALSE); // 4PS

        IF ExFlowSetup."Min. Doc. Approval Amt. (LCY)" > ExfPurchDocHead."Document Amount" THEN
          EXIT(TRUE);

        // Minimum Line Amount
        IF ExfPurchDocHead."Currency Code" <> '' THEN
          ExfPurchDocLine."Line Amount" := CurrExchRate.ExchangeAmtFCYToLCY(0,ExfPurchDocHead."Job No.", // 4PS
            ExfPurchDocHead."Posting Date",ExfPurchDocHead."Currency Code",
            ExfPurchDocLine."Line Amount",ExfPurchDocHead."Currency Factor",FALSE); // FALSE

        IF ExFlowSetup."Min. Approval Amount (LCY)" > ABS(ExfPurchDocLine."Line Amount") THEN
          EXIT(TRUE);
      END
      ELSE BEGIN
        // Minimum document amount
        IF ExfPurchDocHead."Currency Code" <> '' THEN
          ExfPurchDocHead."Document Amount Including VAT" := CurrExchRate.ExchangeAmtFCYToLCY(0,ExfPurchDocHead."Job No.", // 4PS
            ExfPurchDocHead."Posting Date",ExfPurchDocHead."Currency Code",
            ExfPurchDocHead."Document Amount Including VAT",ExfPurchDocHead."Currency Factor",FALSE); // 4PS

        IF ExFlowSetup."Min. Doc. Approval Amt. (LCY)" > ExfPurchDocHead."Document Amount Including VAT" THEN
          EXIT(TRUE);

        // Minimum Line amount
        IF ExfPurchDocHead."Currency Code" <> '' THEN
          ExfPurchDocLine."Amount Including VAT" := CurrExchRate.ExchangeAmtFCYToLCY(0,ExfPurchDocHead."Job No.", // 4PS
            ExfPurchDocHead."Posting Date",ExfPurchDocHead."Currency Code",
            ExfPurchDocLine."Amount Including VAT",ExfPurchDocHead."Currency Factor",FALSE); // 4PS

        IF ExFlowSetup."Min. Approval Amount (LCY)" > ABS(ExfPurchDocLine."Amount Including VAT") THEN
          EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE CheckAutoApprovalOrder@1100285016(ExfPurchDocLine@1100285001 : Record 12013588;ExFlowSetup@1100285000 : Record 12013601;ExPurchDocHeader@1100285005 : Record 12013587) : Boolean;
    VAR
      ExFlowVend@1100285003 : Record 12013595;
      PurchLine@1100285006 : Record 39;
      ApprovalOnlyOnVariation@1100285004 : Boolean;
      TempAmt@1100285002 : Decimal;
    BEGIN
      ApprovalOnlyOnVariation := ExFlowSetup."Approval Only on Variation";
      IF ExFlowVend.GET(ExfPurchDocLine."Buy-from Vendor No.") THEN BEGIN
        IF NOT (ExFlowVend."Approval Only on Variation" = ExFlowVend."Approval Only on Variation"::"From ExFlow Setup") THEN
          IF ExFlowVend."Approval Only on Variation" = ExFlowVend."Approval Only on Variation"::Yes THEN
            ApprovalOnlyOnVariation := TRUE
          ELSE
            ApprovalOnlyOnVariation := FALSE;

        IF ExFlowVend."Max Amt system approval (LCY)" <> 0 THEN BEGIN
          TempAmt := ExPurchDocHeader."Document Amount";
          IF ExPurchDocHeader."Currency Factor" <> 0 THEN
            TempAmt := ExPurchDocHeader."Document Amount" / ExPurchDocHeader."Currency Factor";
          IF TempAmt > ExFlowVend."Max Amt system approval (LCY)" THEN
            ApprovalOnlyOnVariation := FALSE;
        END;
      END
      ELSE BEGIN
        IF ExFlowSetup."Max Amt system approval (LCY)" <> 0 THEN BEGIN
          TempAmt := ExPurchDocHeader."Document Amount";
          IF ExPurchDocHeader."Currency Factor" <> 0 THEN
            TempAmt := ExPurchDocHeader."Document Amount" / ExPurchDocHeader."Currency Factor";

          IF TempAmt > ExFlowSetup."Max Amt system approval (LCY)" THEN
            ApprovalOnlyOnVariation := FALSE;
        END;
      END;

      // Order Matching
      IF (ExFlowSetup."Order Applies-to" <> ExFlowSetup."Order Applies-to"::"Order not used") AND
         ApprovalOnlyOnVariation THEN BEGIN

        IF ExFlowSetup."Always approval for Cust Inv" THEN
          IF ExfPurchDocLine."Invoice to Customer" THEN
            EXIT(FALSE);

        // auto approval should not happen if the order has not been web received
        IF (ExPurchDocHeader."Document Type" = ExPurchDocHeader."Document Type"::Invoice) AND (ExfPurchDocLine."Order No." <> '') THEN BEGIN
          IF ExFlowSetup."Order Applies-to" = ExFlowSetup."Order Applies-to"::"Purch Order Lines" THEN BEGIN
            PurchLine.GET(PurchLine."Document Type"::Order,ExfPurchDocLine."Order No.",ExfPurchDocLine."Order Line No.");
            IF NOT PurchLine."Web Receipt" THEN
              EXIT(FALSE);
          END;
        END;

        IF (ExfPurchDocLine."Order No." <> '') THEN
          EXIT(PurchPriceOK(ExfPurchDocLine))
        ELSE
          EXIT(AutoApproveMiscCharges(ExPurchDocHeader) = 2);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE InsertDimFromUser@1100285020(Approver@1100285000 : Code[50];VAR ExPurchDocLine@1100285003 : Record 12013588;ChangedByDimension@1100285001 : Boolean;CalledFromUpdateMode@1100285002 : Boolean);
    VAR
      EXUserGroup@1100285005 : Record 12013606;
    BEGIN
      IF ChangedByDimension THEN
        EXIT;

      IF Approver <> '' THEN
        IF EXUserGroup.GET(Approver) THEN BEGIN
          ExFlowSetup.GET;
          ExDimMgt.UpdateDimFromUserExFPurch(ExPurchDocLine,EXUserGroup,CalledFromUpdateMode);
        END;
    END;

    PROCEDURE CopyApprovalFlowFromPO@1100285022(VAR ExfPurchDocLine@1100285000 : Record 12013588;VAR NextLineNo@1100285004 : Integer;PerformDeletion@1100285003 : Boolean) : Boolean;
    VAR
      DocLineApp@1100285002 : Record 12013610;
      Proposals@1100285001 : Record 12013615;
    BEGIN
      IF NextLineNo = 0 THEN
        NextLineNo := 10000;

      IF PerformDeletion THEN BEGIN
        Proposals.RESET;
        Proposals.LOCKTABLE;
        Proposals.SETRANGE("Entry No.", ExfPurchDocLine."Inbound Document No.");
        Proposals.SETRANGE("Line No." , ExfPurchDocLine."Line No.");
        Proposals.DELETEALL;
      END;

      // Check if Approved as Order
      DocLineApp.RESET;
      DocLineApp.SETCURRENTKEY("Document No.");
      DocLineApp.SETRANGE("Document Type", 1);
      DocLineApp.SETRANGE("Document No.", ExfPurchDocLine."Order No.");
      DocLineApp.SETRANGE("Line No.", ExfPurchDocLine."Order Line No.");
      IF DocLineApp.FINDSET THEN
        BEGIN
          InsertDimFromUser(DocLineApp.Approver,ExfPurchDocLine,FALSE,FALSE);

          REPEAT
            IF UseBuffer THEN BEGIN
              TempProposalsBuffer.INIT;
              TempProposalsBuffer."Entry No." := ExfPurchDocLine."Inbound Document No.";
              TempProposalsBuffer."Line No." := ExfPurchDocLine."Line No.";
              TempProposalsBuffer."Approver Order" := NextLineNo;
              TempProposalsBuffer.VALIDATE(Approver, DocLineApp.Approver);
              TempProposalsBuffer."Copied from Purchase Order" := TRUE;
              TempProposalsBuffer.INSERT;
            END
            ELSE BEGIN
              Proposals.INIT;
              Proposals."Entry No." := ExfPurchDocLine."Inbound Document No.";
              Proposals."Line No." := ExfPurchDocLine."Line No.";
              Proposals."Approver Order" := NextLineNo;
              Proposals.VALIDATE(Approver, DocLineApp.Approver);
              Proposals."Copied from Purchase Order" := TRUE;
              Proposals.INSERT;
            END;

            NextLineNo := NextLineNo + 10000;
          UNTIL DocLineApp.NEXT = 0;

         EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE UpdateMatchedOrderInfo@1100285023(VAR ExfPurchDocLine@1100285000 : Record 12013588);
    VAR
      PurchOrderLine@1100285001 : Record 39;
      PurchOrderHeader@1100285004 : Record 38;
      ExFPurchHeader@1100285005 : Record 12013587;
      CurrExchRate@1100285006 : Record 330;
      ExDoc@1100285003 : Record 12013608;
      TempDocType@1100285002 : Integer;
    BEGIN
      ExFlowSetup.GET;

      IF (ExfPurchDocLine."Order No." = '') OR (ExfPurchDocLine."Order Line No." = 0) THEN
        EXIT;

      CASE ExfPurchDocLine."Document Type" OF
        ExfPurchDocLine."Document Type"::Invoice: TempDocType := PurchOrderLine."Document Type"::Order;
        ExfPurchDocLine."Document Type"::"Credit Memo": TempDocType := PurchOrderLine."Document Type"::"Return Order";
      END;

      IF NOT PurchOrderLine.GET(TempDocType,ExfPurchDocLine."Order No.",ExfPurchDocLine."Order Line No.") THEN
        EXIT;

      ExfPurchDocLine."Quantity Received (Order)" := PurchOrderLine."Quantity Received";
      ExfPurchDocLine."Quantity Invoiced (Order)" := PurchOrderLine."Quantity Invoiced";
      ExfPurchDocLine."Line Discount % (Order)" := PurchOrderLine."Line Discount %";
      ExfPurchDocLine."Potential UOM Mismatch" := (ExfPurchDocLine."Quantity Received (Order)" -
                                                   ExfPurchDocLine."Quantity Invoiced (Order)")
                                                   <> ExfPurchDocLine.Quantity;

      IF PurchOrderLine."Currency Code" <> ExfPurchDocLine."Currency Code" THEN BEGIN
        IF PurchOrderLine."Currency Code" <> '' THEN BEGIN
          IF (PurchOrderHeader."Document Type" <> PurchOrderLine."Document Type") OR
             (PurchOrderHeader."No." <> PurchOrderLine."Document No.") THEN
            PurchOrderHeader.GET(PurchOrderLine."Document Type",PurchOrderLine."Document No.");

          PurchOrderLine."Direct Unit Cost" := CurrExchRate.ExchangeAmtFCYToLCY(0,PurchOrderHeader."Job No.", // 4PS
            PurchOrderHeader."Posting Date",PurchOrderLine."Currency Code",
            PurchOrderLine."Direct Unit Cost",PurchOrderHeader."Currency Factor",FALSE); // 4PS
        END;

        IF ExfPurchDocLine."Currency Code" <> '' THEN BEGIN
          IF ExFPurchHeader."Inbound Document No." <> ExfPurchDocLine."Inbound Document No." THEN
            ExFPurchHeader.GET(ExfPurchDocLine."Inbound Document No.");

          PurchOrderLine."Direct Unit Cost" := CurrExchRate.ExchangeAmtLCYToFCY(0,ExFPurchHeader."Job No.", // 4PS
            ExFPurchHeader."Posting Date",ExFPurchHeader."Currency Code",
            PurchOrderLine."Direct Unit Cost",ExFPurchHeader."Currency Factor",FALSE); // 4PS
        END;
      END;

      ExfPurchDocLine."Direct Unit Cost (Order)" := PurchOrderLine."Direct Unit Cost";

      IF PurchOrderLine.Approve AND (ExfPurchDocLine."First Approver" = '') THEN BEGIN
        IF (ExDoc."Document Type" <> PurchOrderLine."Document Type") OR
           (ExDoc."Document No." <> PurchOrderLine."Document No.") THEN BEGIN
          IF ExDoc.RetrieveRecord(ExDoc,PurchOrderLine."Document Type",PurchOrderLine."Document No.") THEN
            ExfPurchDocLine."First Approver" := ExDoc."Created By";
        END
        ELSE
          ExfPurchDocLine."First Approver" := ExDoc."Created By";
      END;
    END;

    PROCEDURE RestoreDeletedPDFandXML@1100285024(ExfPurchDocHead@1100285000 : Record 12013587);
    VAR
      ExFBlob@1100285001 : Record 12013591;
      ExJnlBatch@1100285008 : Record 12013590;
      ExFlowSetup@1100285009 : Record 12013601;
      ExfImpPurchArchHead@1100285010 : Record 12013650;
      ExFlowFileMgt@1100285003 : Codeunit 12013602;
      ExFlow@1100285007 : Codeunit 12013601;
      ExImportManager@1100285012 : Codeunit 12013604;
      TempPath@1100285004 : Text[1024];
      TempFileName@1100285005 : Text[1024];
      ToPath@1100285006 : Text[1024];
      ToMap@1100285002 : Text[30];
      RootPath@1100285011 : Text[1024];
      TempTime@1100285013 : Integer;
    BEGIN
      WITH ExfPurchDocHead DO BEGIN
        ExFlowSetup.GET;
        ToMap := ExFlow.DayMap(WORKDATE);
        ToPath :=  ExFlowFileMgt.Path("Image File Name");
        IF ToPath = '' THEN BEGIN
          ToPath := ExFlowSetup."Path to Deleted Document"
        END;

        IF ToPath <> '' THEN BEGIN
          IF ExFBlob.GET(ExfPurchDocHead."Image Buffer ID") THEN BEGIN
            IF "Image File Name" <> '' THEN BEGIN
              RootPath := ToPath;
              TempFileName := COPYSTR("Image File Name",STRLEN(ToPath)+1);
              ExImportManager.TransformInteger(FORMAT(ExfPurchDocHead."Time Created"),TempTime);
              TempFileName := FORMAT(TempTime) + '_' + TempFileName;

              ToPath := ToPath + DeletedPath + '\';
              ToPath := ToPath + ToMap;

              IF NOT ExFlowFileMgt.FolderExist(ToPath) THEN
                ExFlowFileMgt.NewFolder(ToPath,RootPath);

              ExFBlob.ExportBLOB(ToPath+TempFileName,FALSE);
            END;
          END;

          IF ExfImpPurchArchHead.GET(ExfPurchDocHead."Import Document No.") THEN
            IF ExfImpPurchArchHead."XML File Name" <> '' THEN BEGIN
              IF ExfImpPurchArchHead."XML File".HASVALUE THEN BEGIN
                ToPath := ExFlowFileMgt.Path("Image File Name");
                IF ToPath = '' THEN BEGIN
                   ToPath := ExFlowSetup."Path to Deleted Document";
                END;
                IF ToPath <> '' THEN BEGIN
                  RootPath := ToPath;
                  ToPath := ToPath + DeletedPath + '\';
                  ToPath := ToPath + ToMap;
                  TempPath := ExFlowFileMgt.Path(ExfImpPurchArchHead."XML File Name");
                  TempFileName := COPYSTR(ExfImpPurchArchHead."XML File Name",STRLEN(TempPath)+1);

                  ExfImpPurchArchHead.ExportBLOB(ToPath+TempFileName,FALSE);
                END;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE RestDelPDFandXMLFromImpBuff@1100285018(ExfPurchImpHead@1100285014 : Record 12013648);
    VAR
      ExFBlob@1100285001 : Record 12013591;
      ExFlowSetup@1100285009 : Record 12013601;
      ExFlowFileMgt@1100285003 : Codeunit 12013602;
      ExFlow@1100285007 : Codeunit 12013601;
      ExImportManager@1100285012 : Codeunit 12013604;
      TempPath@1100285004 : Text[1024];
      TempFileName@1100285005 : Text[1024];
      ToPath@1100285006 : Text[1024];
      ToMap@1100285002 : Text[30];
      RootPath@1100285011 : Text[1024];
      TempTime@1100285013 : Integer;
    BEGIN
      WITH ExfPurchImpHead DO BEGIN
        ExFlowSetup.GET;
        ToMap := ExFlow.DayMap(WORKDATE);
        IF ExFBlob.GET("Image Buffer ID") THEN BEGIN
          IF "Image File Name" <> '' THEN BEGIN
            ToPath := ExFlowFileMgt.Path("Image File Name");
            IF ToPath = '' THEN
              ToPath := ExFlowSetup."Path to New OCR-files";

            IF ToPath <> '' THEN BEGIN
            RootPath := ToPath;
            TempFileName := COPYSTR("Image File Name",STRLEN(ToPath)+1);
            ExImportManager.TransformInteger(FORMAT("Imported at DateTime"),TempTime);
            TempFileName := FORMAT(TempTime) + '_' + TempFileName;
            ToPath := ToPath + DeletedPath + '\';
            ToPath := ToPath + ToMap;
            IF NOT ExFlowFileMgt.FolderExist(ToPath) THEN
              ExFlowFileMgt.NewFolder(ToPath,RootPath);

            ExFBlob.ExportBLOB(ToPath+TempFileName,FALSE);
          END;
        END;
        END;

        IF "XML File Name" <> '' THEN BEGIN
          IF "XML File".HASVALUE THEN BEGIN
            ToPath := ExFlowFileMgt.Path("Image File Name");
            IF ToPath = '' THEN
              ToPath := ExFlowSetup."Path to New OCR-files";
            IF ToPath <> '' THEN BEGIN
            TempPath := ExFlowFileMgt.Path("XML File Name");
            TempFileName := COPYSTR("XML File Name",STRLEN(TempPath)+1);
            ExImportManager.TransformInteger(FORMAT("Imported at DateTime"),TempTime);
            TempFileName := FORMAT(TempTime) + '_' + TempFileName;

            RootPath := ToPath;
            ToPath := ToPath + DeletedPath + '\';
            ToPath := ToPath + ToMap;

            ExportBLOB(ToPath+TempFileName,FALSE);
          END;
        END;
      END;
      END;
    END;

    PROCEDURE TransformDateToText@1100285004(InDate@1100285000 : Date) OutDateTxt : Text[30];
    VAR
      YYYY@1100285001 : Text[30];
      MM@1100285002 : Text[30];
      DD@1100285003 : Text[30];
    BEGIN
      YYYY := FORMAT(DATE2DMY(InDate,3));
      IF STRLEN(YYYY) = 2 THEN
        YYYY := '20' + YYYY;

      MM := FORMAT(DATE2DMY(InDate,2));
      IF STRLEN(MM) = 1 THEN
        MM := '0' + MM;

      DD := FORMAT(DATE2DMY(InDate,1));
      IF STRLEN(DD) = 1 THEN
        DD := '0' + DD;

      OutDateTxt := YYYY+'-'+MM+'-'+DD;
    END;

    PROCEDURE CheckAutoApprovalOrderAppr@1100285025(ExfPurchDocLine@1100285000 : Record 12013588) : Boolean;
    VAR
      ExDocLine@1100285001 : Record 12013609;
      PurchLine@1100285002 : Record 39;
      ExFlowVend@1100285003 : Record 12013595;
      PurchHeader@1100285007 : Record 38;
      ExFImpHeader@1100285008 : Record 12013587;
      POAmountLCY@1100285004 : Decimal;
      InvLineAmountLCY@1100285006 : Decimal;
      TempPrice@1100285009 : Decimal;
      CurrExchRate@1100285005 : Record 330;
    BEGIN
      // Function that allows an invoice to be approved if the order it is connected to was approved

      IF ExfPurchDocLine."Order Line No." = 0 THEN
        EXIT(TRUE);

      WITH ExfPurchDocLine DO BEGIN
        ExDocLine.RESET;
        ExDocLine.SETCURRENTKEY("Document No.");
        ExDocLine.SETRANGE("Document Type", ExDocLine."Document Type"::Order);
        ExDocLine.SETRANGE("Document No.", "Order No.");
        ExDocLine.SETRANGE("Line No.", "Order Line No.");
        ExDocLine.SETRANGE(Flowstatus, ExDocLine.Flowstatus::Approved);
        IF ExDocLine.FINDFIRST THEN BEGIN
          PurchLine.GET(PurchLine."Document Type"::Order,"Order No.","Order Line No.");

          ExFlowSetup.GET;

          POAmountLCY := PurchLine."PO Approved Amount";
          IF PurchLine."Currency Code" <> '' THEN BEGIN
            PurchHeader.GET(PurchLine."Document Type",PurchLine."Document No.");
            IF PurchHeader."Currency Factor" = 0 THEN
              PurchHeader."Currency Factor" := 1;

            POAmountLCY :=
                CurrExchRate.ExchangeAmtFCYToLCY(0,PurchHeader."Job No.", // 4PS
                  PurchHeader."Posting Date",PurchLine."Currency Code",
                  POAmountLCY,PurchHeader."Currency Factor",FALSE); // 4PS
          END;

          InvLineAmountLCY := ExfPurchDocLine."Line Amount";
          IF ExfPurchDocLine."Currency Code" <> '' THEN BEGIN
            ExFImpHeader.GET(ExfPurchDocLine."Inbound Document No.");
            IF ExFImpHeader."Currency Factor" = 0 THEN
              ExFImpHeader."Currency Factor" := 1;

            InvLineAmountLCY :=
                CurrExchRate.ExchangeAmtFCYToLCY(0,ExFImpHeader."Job No.", // 4PS
                  ExFImpHeader."Posting Date",ExfPurchDocLine."Currency Code",
                  InvLineAmountLCY,ExFImpHeader."Currency Factor",FALSE); // 4PS
          END;

          TempPrice := POAmountLCY * (1 + ExFlowSetup."Allowed Price Diff (%)" / 100);
          IF TempPrice > (POAmountLCY + ExFlowSetup."Allowed Price Diff (LCY)") THEN
            TempPrice := POAmountLCY + ExFlowSetup."Allowed Price Diff (LCY)";

          IF ExFlowVend.GET(ExfPurchDocLine."Buy-from Vendor No.") THEN
            IF ExFlowVend."Specific Line Diff Setting" THEN BEGIN
              TempPrice := POAmountLCY * (1 + ExFlowVend."In Discount" / 100);
              IF TempPrice > (POAmountLCY + ExFlowVend."In LCY") THEN
                TempPrice := POAmountLCY + ExFlowVend."In LCY";
            END;

          IF TempPrice < InvLineAmountLCY THEN
            EXIT(FALSE)
          ELSE
            EXIT(TRUE);
        END
        ELSE
          EXIT(FALSE);
      END;
    END;

    PROCEDURE HeaderLineDiffExists@1100285006(ExfPurchDocHead@1100285001 : Record 12013587;ToleranceAmt@1100285002 : Decimal) : Boolean;
    VAR
      ExfPurchDocLine@1100285000 : Record 12013588;
      TotLineAmount@1100285003 : Decimal;
      MaxValue@1100285004 : Decimal;
      MinValue@1100285005 : Decimal;
    BEGIN
      TotLineAmount := 0;
      ExfPurchDocLine.RESET;
      ExfPurchDocLine.SETRANGE("Inbound Document No.", ExfPurchDocHead."Inbound Document No.");
      ExfPurchDocLine.CALCSUMS("Line Amount");
      TotLineAmount := ExfPurchDocLine."Line Amount";

      MaxValue := ExfPurchDocHead."Document Amount" + ToleranceAmt;
      MinValue := ExfPurchDocHead."Document Amount" - ToleranceAmt;

      IF (TotLineAmount >= MinValue) AND (TotLineAmount <= MaxValue) THEN
        EXIT(FALSE)
      ELSE
        EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetContPeriodics@1100285003(VAR ExContract@1100285001 : Record 12013633;CheckDate@1100285007 : Date;CalledFromRealCreate@1100285004 : Boolean;VAR WarnText@1100285005 : Text) : Decimal;
    VAR
      PeriodCount@1100285010 : Integer;
      ContractCopy@1100285011 : Record 12013633;
    BEGIN
      IF (CheckDate < ExContract."Period Start Date") OR (CheckDate > ExContract."To Date") THEN BEGIN
        WarnText := COPYSTR(STRSUBSTNO(WARNTEXT2,ExContract."Contract No.",CheckDate),1,250);
        EXIT;
      END;

      ContractCopy := ExContract;

      WHILE NOT IsDateInCurrPeriod(ExContract,CheckDate) DO BEGIN
        ExContract."Period Start Date":= CALCDATE(ExContract."Invoicing Period",ExContract."Period Start Date");
        PeriodCount := PeriodCount + 1;
      END;

      //Push Period forward
      IF (PeriodCount > 0) AND CalledFromRealCreate THEN
        ExContract.MODIFY;

      IF PeriodCount > 1 THEN BEGIN
        WarnText := COPYSTR(STRSUBSTNO(WARNTEXT6,ExContract."Contract No."),1,250);
        EXIT;
      END;

      //Check if missed inoive in current period
      IF PeriodCount = 1 THEN
        IF GetNumberOfPeriodInvoice(ExContract) > ExContract."Number of Invoices in Period" THEN BEGIN
          WarnText := COPYSTR(STRSUBSTNO(WARNTEXT6,ExContract."Contract No."),1,250);
          EXIT;
        END;

      IF GetNumberOfPeriodInvoice(ExContract) > ExContract."Number of Invoices in Period" THEN
        WarnText := COPYSTR(STRSUBSTNO(WARNTEXT4,ExContract."Number of Invoices in Period",ExContract."Contract No."),1,250);
    END;

    LOCAL PROCEDURE GetContPostedAmount@1100285027(VAR ExContract@1100285001 : Record 12013633) : Decimal;
    VAR
      ExFlowDocumentEntry@1100285000 : Record 12013620;
      Amount@1100285003 : Decimal;
    BEGIN
      Amount := 0;
      ExFlowDocumentEntry.RESET;
      ExFlowDocumentEntry.SETRANGE("Contract No.",ExContract."Contract No.");
      IF ExFlowDocumentEntry.FINDSET THEN
        REPEAT
          Amount += ExFlowDocumentEntry."Amount (LCY)";
        UNTIL ExFlowDocumentEntry.NEXT = 0;
      EXIT(Amount);
    END;

    LOCAL PROCEDURE GetNumberOfPeriodInvoice@1100285028(ExContract@1100285001 : Record 12013633) : Integer;
    VAR
      ExFlowDocumentEntry@1100285002 : Record 12013620;
      ExDocument@1100285003 : Record 12013608;
      ExPurchDocHead@1100285004 : Record 12013587;
      Todate@1100285000 : Date;
    BEGIN
      Todate := ExContract.GetToDate;

      ExFlowDocumentEntry.SETRANGE("Contract No.",ExContract."Contract No.");
      ExDocument.SETRANGE("Contract No.",ExContract."Contract No.");
      ExPurchDocHead.SETRANGE("Contract No.",ExContract."Contract No.");

      CASE ExContract."Use Invoice Date Field" OF
        ExContract."Use Invoice Date Field"::"Document Date":
          BEGIN
            ExFlowDocumentEntry.SETFILTER("Document Date",'%1..%2',ExContract."Period Start Date",Todate);
            ExDocument.SETFILTER("Document Date",'%1..%2',ExContract."Period Start Date",Todate);
            ExPurchDocHead.SETFILTER("Document Date",'%1..%2',ExContract."Period Start Date",Todate);
          END;
        ExContract."Use Invoice Date Field"::"Due date":
          BEGIN
            ExFlowDocumentEntry.SETFILTER("Due Date",'%1..%2',ExContract."Period Start Date",Todate);
            ExDocument.SETFILTER("Due Date",'%1..%2',ExContract."Period Start Date",Todate);
            ExPurchDocHead.SETFILTER("Due Date",'%1..%2',ExContract."Period Start Date",Todate);
          END;
        ExContract."Use Invoice Date Field"::"Posting Date":
          BEGIN
            ExFlowDocumentEntry.SETFILTER("Posting Date",'%1..%2',ExContract."Period Start Date",Todate);
            ExDocument.SETFILTER("Posting Date",'%1..%2',ExContract."Period Start Date",Todate);
            ExPurchDocHead.SETFILTER("Posting Date",'%1..%2',ExContract."Period Start Date",Todate);
          END;
      END;

      EXIT(ExDocument.COUNT + ExDocument.COUNT + ExFlowDocumentEntry.COUNT);
    END;

    LOCAL PROCEDURE IsDateInCurrPeriod@1100285030(VAR ExContract@1100285001 : Record 12013633;VAR ContractDate@1100285000 : Date) : Boolean;
    BEGIN
      IF ExContract."Period Start Date" <= ContractDate THEN
        IF ContractDate <= ExContract.GetToDate THEN
          EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE RestoreDelExDocPDFandXML@1100285031(EXDocument@1100285000 : Record 12013608);
    VAR
      ExFBlob@1100285001 : Record 12013591;
      ExJnlBatch@1100285008 : Record 12013590;
      ExFlowSetup@1100285009 : Record 12013601;
      EXPurchImpHeaderArchive@1100285010 : Record 12013650;
      ExFlowFileMgt@1100285003 : Codeunit 12013602;
      ExFlow@1100285007 : Codeunit 12013601;
      ExImportManager@1100285012 : Codeunit 12013604;
      TempPath@1100285004 : Text[1024];
      TempFileName@1100285005 : Text[1024];
      ToPath@1100285006 : Text[1024];
      ToMap@1100285002 : Text[30];
      RootPath@1100285011 : Text[1024];
      TempTime@1100285013 : Integer;
      EXDocument2@1100285014 : Record 12013612;
    BEGIN
      ExFlowSetup.GET;

      IF ExFlowSetup."Path to Deleted Document" = '' THEN
          EXIT;

      WITH EXDocument DO BEGIN
        ToMap := ExFlow.DayMap(WORKDATE);
        ToPath := ExFlowSetup."Path to Deleted Document";
        RootPath :=  ToPath;
        IF ToPath <> '' THEN BEGIN
          ToPath := ToPath + DeletedPath + '\';
          ToPath := ToPath + ToMap;
          ExImportManager.TransformInteger(FORMAT(TIME),TempTime);

          IF NOT ExFlowFileMgt.FolderExist(ToPath) THEN
             ExFlowFileMgt.NewFolder(ToPath,RootPath);

          EXDocument2.SETRANGE("Import Document No." ,"Import Document No.");
          IF EXDocument2.FINDSET THEN BEGIN
            IF EXDocument2."Image Name" <> '' THEN BEGIN
              TempPath := ExFlowFileMgt.Path(EXDocument2."Image Name");
              TempFileName := COPYSTR(EXDocument2."Image Name",STRLEN(TempPath)+1);
              TempFileName := EXDocument2."Document No." + '_' + FORMAT(TempTime) + '_' + TempFileName;
              EXDocument2.ExportBLOB(ToPath+TempFileName,FALSE);
            END;
          END;

          IF EXPurchImpHeaderArchive.GET("Import Document No.") THEN BEGIN
            IF EXPurchImpHeaderArchive."XML File Name" <> '' THEN BEGIN
              IF EXPurchImpHeaderArchive."XML File".HASVALUE THEN BEGIN
                TempPath := ExFlowFileMgt.Path(EXPurchImpHeaderArchive."XML File Name");
                TempFileName := COPYSTR(EXPurchImpHeaderArchive."XML File Name",STRLEN(TempPath)+1);
                TempFileName := EXDocument2."Document No." + '_' + FORMAT(TempTime) + '_' + TempFileName;
                EXPurchImpHeaderArchive.ExportBLOB(ToPath+TempFileName,FALSE);
              END;
            END;
          END;

        END;
      END;
    END;

    BEGIN
    END.
  }
}

