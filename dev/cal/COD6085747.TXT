OBJECT Codeunit 6085747 Document Capture Test Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=DCW17.00.00.5.00.05;
  }
  PROPERTIES
  {
    TableNo=6085754;
    OnRun=BEGIN
            DCTest := Rec;
            Code;
            Rec := DCTest;
          END;

  }
  CODE
  {
    VAR
      DCTest@161024012 : Record 6085754;
      Text001@161024013 : TextConst 'DEU=Client-Komponenten Document Capture mÅssen installiert werden, bevor Sie den Test durchfÅhren kînnen.;ENU=Document Capture Client Components must be installed before you can perform the test.;NLD=Document Capture Client Components moeten geinstalleerd worden voordat u deze test kunt uitvoeren.';
      DCSetup@161024014 : Record 6085573;
      Text002@161024015 : TextConst 'DEU=Sie mÅssen ''%1'' in ''%2'' angeben.;ENU=You must specify ''%1'' in ''%2''.;NLD=U dient ''%1'' op te geven in ''%2''.';
      Text003@161024016 : TextConst 'DEU=UngÅltiger Pfad in ''%1'' in ''%2''.;ENU=Invalid path in ''%1'' in ''%2''.;NLD=Ongeldig pad in ''%1'' in ''%2''.';
      Text004@161024017 : TextConst 'DEU=Das Verzeichnis ''%1'' ist schreibgeschÅtzt.;ENU=The directory ''%1'' is writeprotected.;NLD=Folder ''%1'' is beveiligd tegen schrijven.';
      Text005@161024019 : TextConst 'DEU=Kann nicht aus ''%1'' lîschen.;ENU=Unable to delete from ''%1''.;NLD="Kan niet verwijderen van ''%1''. "';
      Text006@161024018 : TextConst 'DEU=%1 - %2;ENU=%1 - %2;NLD=%1 - %2;NOR=%1 - %2;SVE=%1 - %2';
      Text007@161024020 : TextConst 'DEU=Kann Verzeichnis ''%1'' nicht erstellen.;ENU=Unable to create directory ''%1''.;NLD=Kan folder ''%1'' niet aanmaken.';
      FileSysMgt@161024021 : Codeunit 6085584;
      Text008@161024022 : TextConst 'DEU=Die Datei ''%1'' ist schreibgeschÅtzt.;ENU=The file ''%1'' is readonly.;NLD=Het bestand ''%1'' is beveiligd tegen schrijven.';
      Text009@161024023 : TextConst 'DEU=%1 besteht nicht.;ENU=%1 does not exists.;NLD=%1 bestaat niet';
      Text010@161024024 : TextConst 'DEU=%1 wurde nicht erstellt.;ENU=No %1 has been created.;NLD=Er is geen %1 gemaakt.';
      Text011@161024025 : TextConst 'DEU=%1 %2 hat keine Identifikations-Vorlage.;ENU=%1 %2 has no identification template.;NLD=%1 %2 heeft geen identificatiesjabloon.';
      Text012@161024026 : TextConst 'DEU=%1 %2 hat keine Master-Vorlage.;ENU=%1 %2 has no master template.;NLD=%1 %2 heeft geen mastersjabloon.';
      Text013@161024027 : TextConst 'DEU=Der Document Capture-Server hat nicht reagiert. Ein mîglicher Grund dafÅr ist, dass der Server zurzeit zahlreiche OCR-Dateien verarbeitet oder dass der Server nicht fÅr die Nutzung derselben Verzeichnisse konfiguriert wurde, wie in %1 angegeben.;ENU=The Document Capture server did not respond. The reason could be that the server is currently processing many OCR-files or the server is not configured to use the same directories as specified in %1.;NLD=The Document Capture server reageert niet. De reden kan  zijn dat de server momenteel veel OCR-bestanden verwerkt, of de server is niet geconfigureerd om dezelfde folder te gebruiken als in %1.';
      Text014@161024028 : TextConst 'DEU=Es wurde keine Belegkategorie konfiguriert, um OCR-Dateien zu verarbeiten oder es wurden keine Konfigurationsdateien exportiert.;ENU=No document category has been configured to process OCR files or no configuration files have been exported.;NLD=Er is geen documentcategorie geconfigureerd om OCR-bestanden te verwerken.';
      Text015@161024029 : TextConst 'DEU=Kann keine Verbindung mit dem IMAP-Server ''%1'' auf %2 ''%3'' herstellen.;ENU=Unable to connect to IMAP server ''%1'' on %2 ''%3''.;NLD=Fout bij benaderen IMAP server ''%1'' op %2 ''%3''.';
      Text016@161024030 : TextConst 'DEU=Falscher Benutzername oder falsches Passwort an IMAP-Server ''%1'' auf %2 ''%3''.;ENU=Wrong username or password to IMAP server ''%1'' on %2 ''%3''.;NLD=Foutieve gebruikersnaam/wachtwoord bij benaderen IMAP server ''%1'' op %2 ''%3''.';
      Text017@161024031 : TextConst 'DEU=Kann den Ordner ≥Posteingang  auf dem IMAP-Server ''%1'' auf %2 ''%3'' nicht îffnen.;ENU=Unable to open the ''Inbox'' folder on IMAP server ''%1'' on %2 ''%3''.;NLD=Fout bij openen Postvak IN op IMAP server ''%1'' op %2 ''%3''.';
      Text018@161024032 : TextConst 'DEU="Es bestehen keine aktiven %1 fÅr %2 = ''%3''.";ENU="No active %1 exists for %2 = ''%3''.";NLD="Geen actieve %1 bestaat voor %2 = ''%3''."';
      Text020@161024034 : TextConst 'DEU=%1 wurde nicht in %2 importiert.;ENU=%1 has not been imported in the %2.;NLD=%1 is niet geimporteerd in de %2.';
      Text021@161024035 : TextConst 'DEU=Es wurden keine Genehmigenden konfiguriert.;ENU=No approvers have been configured.;NLD=Er zijn geen fiatteurs geconfigureerd.';
      Text022@161024036 : TextConst 'DEU=Benutzer %1 muss entweder ein ''%2'' oder eine ''%3'' haben.;ENU=User %1 must have either an ''%2'' or ''%3''.;NLD=Gebruiker %1 moet een ''%2'' of een ''%3'' hebben.';
      Text023@161024037 : TextConst 'DEU="Sie mÅssen %1 in %2 %3 = ''%4'' angeben.";ENU="You must specify %1 in %2 %3 = ''%4''";NLD="U dient %1 op te geven in %2 %3 = ''%4''."';
      Text024@161024033 : TextConst 'DEU=Web-Genehmigung ist aktiv, aber es besteht kein %1.;ENU=Web Approval is activated but no %1 exists.;NLD=Webgoedkeuring actief, maar er bestaat geen %1.';
      Text025@161024038 : TextConst 'DEU=Document Capture Testergebnisse;ENU=Document Capture Testresults;NLD=Document Capture Testresultaten';
      Text026@161024039 : TextConst 'DEU=SMTP-E-Mail kann nicht gesendet werden.;ENU=Unable to send SMTP e-mail.;NLD=Kan SMTP e-mail niet versturen';
      Text050@161024040 : TextConst 'DEU="<html><head></head><body style=""font-size: 12px; font-family: Tahoma, Verdana; color: #000a1b"">";ENU="<html><head></head><body style=""font-size: 12px; font-family: Tahoma, Verdana; color: #000a1b"">";NLD="<html><head></head><body style=""font-size: 12px; font-family: Tahoma, Verdana; color: #000a1b"">"';
      Text051@161024041 : TextConst 'DEU=</body></html>;ENU=</body></html>;NLD=</body></html>';

    PROCEDURE Code@161024012();
    BEGIN
      DCTest.Result := DCTest.Result::" ";
      DCTest.MODIFY;

      CASE DCTest.Type OF
        DCTest.Type::GeneralConfiguration:
          TestGeneralConfig;

        DCTest.Type::ServiceIsRunning:
          TestServiceIsRunning;

        DCTest.Type::ServiceProcessPDFFile:
          ServiceProcessPDFFile;

        DCTest.Type::ServiceDownloadFromEmail:
          ServiceDownloadFromEmail;

        DCTest.Type::PurchApprovalSetup:
          PurchApprovalSetup;

        DCTest.Type::NAVSendEMail:
          NAVSendEMail;
      END;
    END;

    PROCEDURE TestGeneralConfig@161024017();
    VAR
      DocCat@161024012 : Record 6085575;
      Template@161024013 : Record 6085579;
      TestMessage@161024015 : Record 6085755;
      CaptureRTCLib@161024014 : Codeunit 6085660;
    BEGIN
      TestMessage.DELETEALL;

      IF NOT IsDCCompInstalled THEN BEGIN
        Log(Text001,DCTest.Result::Failed);
        EXIT;
      END;

      IF NOT DCSetup.GET THEN BEGIN
        Log(STRSUBSTNO(Text009,DCSetup.TABLECAPTION),DCTest.Result::Failed);
        EXIT;
      END;

      IF DocCat.FINDSET THEN BEGIN
        REPEAT
          Template.SETRANGE("Category Code",DocCat.Code);
          Template.SETRANGE(Type,Template.Type::Identification);
          IF Template.ISEMPTY THEN
            Log(STRSUBSTNO(Text011,DocCat.TABLECAPTION,DocCat.Code),DCTest.Result::Warning);

          Template.SETRANGE(Type,Template.Type::Master);
          IF Template.ISEMPTY THEN
            Log(STRSUBSTNO(Text012,DocCat.TABLECAPTION,DocCat.Code),DCTest.Result::Warning);
        UNTIL DocCat.NEXT = 0;
      END ELSE BEGIN
        Log(STRSUBSTNO(Text010,DCSetup.TABLECAPTION),DCTest.Result::Failed);
        EXIT;
      END;

      CaptureRTCLib.CreateClientAddInEntries;

      IF DCTest.Result = DCTest.Result::" " THEN BEGIN
        DCTest.Result := DCTest.Result::Passed;
        DCTest.MODIFY;
      END;
    END;

    PROCEDURE TestServiceIsRunning@161024014();
    VAR
      ContiniaCompanySetup@6085573 : Record 6192773;
      DocCat@161024012 : Record 6085575;
      ExportDCConfig@1160040000 : Codeunit 6085616;
      XmlLib@161024022 : Codeunit 6085573;
      XmlDoc@161024023 : Codeunit 6192800;
      DocumentElement@1000 : Codeunit 6192801;
      TheFile@161024014 : File;
      SubDir@161024013 : Text[50];
      Path@161024015 : Text[1024];
      DirToTest@161024017 : ARRAY [1000,2] OF Text[1024];
      ArchiveFilename@161024018 : Text[1024];
      EndTime@161024020 : Time;
      NoOfDirs@161024024 : Integer;
      i@161024021 : Integer;
      NoOfServerResponses@161024019 : Integer;
      Failed@161024016 : Boolean;
    BEGIN
      DCSetup.GET;
      ContiniaCompanySetup.GET;

      WITH DCSetup DO BEGIN
        // Test that general working directories exists
        TestFilePath("Scanned File Path for OCR",FIELDCAPTION("Scanned File Path for OCR"),TABLECAPTION);
        TestFilePath("PDF File Path for OCR",FIELDCAPTION("PDF File Path for OCR"),TABLECAPTION);
        TestFilePath("File Path for OCR-proc. files",FIELDCAPTION("File Path for OCR-proc. files"),TABLECAPTION);
        TestFilePath("Archive File Path",FIELDCAPTION("Archive File Path"),TABLECAPTION);

        IF DCTest.Result <> DCTest.Result::" " THEN
          EXIT;

        // Test write permissions to archive directories
        TestFilePathWritePerm("Scanned File Path for OCR");
        TestFilePathWritePerm("PDF File Path for OCR");
        TestFilePathWritePerm("Archive File Path");
      END;

      // Export configuration files for each Document Category
      IF DocCat.FINDSET THEN
        REPEAT
          IF ContiniaCompanySetup."Company Code" <> '' THEN
            SubDir := STRSUBSTNO(Text006,ContiniaCompanySetup."Company Code",DocCat.Code)
          ELSE
            SubDir := DocCat.Code;

          IF DocCat."Process Scanned Files" THEN BEGIN
            Failed := FALSE;
            Path := DCSetup."Scanned File Path for OCR" + SubDir;

            IF NOT FileSysMgt.DirectoryExists(Path) THEN BEGIN
              IF NOT FileSysMgt.CreateDirectory(Path) THEN BEGIN
                Log(STRSUBSTNO(Text007,Path),DCTest.Result::Failed);
                Failed := TRUE;
              END;
            END;

            IF NOT Failed THEN BEGIN
              IF TestFilePathWritePerm(Path) THEN BEGIN
                IF DCTest."Export Config. Files" THEN BEGIN
                  IF FileSysMgt.FileExists(Path + '\config.xml') THEN BEGIN
                    IF NOT FileSysMgt.DeleteFile(Path + '\config.xml',FALSE) THEN BEGIN
                      Log(STRSUBSTNO(Text008,Path + '\config.xml'),DCTest.Result::Failed);
                      Failed := TRUE;
                    END ELSE
                      ExportDCConfig.ExportOnPrem(DocCat);
                  END;

                  IF NOT Failed THEN BEGIN
                    NoOfDirs := NoOfDirs + 1;
                    DirToTest[NoOfDirs,1] := Path;
                    DirToTest[NoOfDirs,2] := DocCat.Code;
                  END;
                END;
              END;
            END;
          END;

          IF DocCat."Process PDF Files" THEN BEGIN
            Failed := FALSE;
            Path := DCSetup."PDF File Path for OCR" + SubDir;

            IF NOT FileSysMgt.DirectoryExists(Path) THEN BEGIN
              IF NOT FileSysMgt.CreateDirectory(Path) THEN BEGIN
                Log(STRSUBSTNO(Text007,Path),DCTest.Result::Failed);
                Failed := TRUE;
              END;
            END;

            IF NOT Failed THEN BEGIN
              IF TestFilePathWritePerm(Path) THEN BEGIN
                IF DCTest."Export Config. Files" THEN BEGIN
                  IF FileSysMgt.FileExists(Path + '\config.xml') THEN BEGIN
                    IF NOT FileSysMgt.DeleteFile(Path + '\config.xml',FALSE) THEN BEGIN
                      Log(STRSUBSTNO(Text008,Path + '\config.xml'),DCTest.Result::Failed);
                      Failed := TRUE;
                    END ELSE
                      ExportDCConfig.ExportOnPrem(DocCat);
                  END;

                  IF NOT Failed THEN BEGIN
                    NoOfDirs := NoOfDirs + 1;
                    DirToTest[NoOfDirs,1] := Path;
                    DirToTest[NoOfDirs,2] := DocCat.Code;
                  END;
                END;
              END;
            END;
          END;
        UNTIL DocCat.NEXT = 0;

      IF DCTest.Result <> DCTest.Result::" " THEN
        EXIT;

      // Create test file to send to the server
      XmlLib.CreateUTF8XmlDOM(XmlDoc,'root');
      XmlDoc.GetDocumentElement(DocumentElement);
      XmlLib.AppendXmlNode(DocumentElement,'Action','TestFileSystemPermissions');

      // If any communication files exists from a previous test, then delete these files
      FOR i := 1 TO NoOfDirs DO BEGIN
        IF FileSysMgt.FileExists(DirToTest[i,1] + '\client2server.dctest.xml') THEN
          FileSysMgt.DeleteFile(DirToTest[i,1] + '\client2server.dctest.xml',FALSE);

        IF FileSysMgt.FileExists(DirToTest[i,1] + '\server2client.dctest.xml') THEN
          FileSysMgt.DeleteFile(DirToTest[i,1] + '\server2client.dctest.xml',FALSE);
      END;

      // Send test file to server
      FOR i := 1 TO NoOfDirs DO
        XmlDoc.Save(DirToTest[i,1] + '\client2server.dctest.xml');

      EndTime := TIME + 30000; // 30 seconds
      REPEAT
        FOR i := 1 TO NoOfDirs DO BEGIN
          // If the server have responsed
          IF FileSysMgt.FileExists(DirToTest[i,1] + '\server2client.dctest.xml') THEN BEGIN
            NoOfServerResponses := NoOfServerResponses + 1;

            FileSysMgt.DeleteFile(DirToTest[i,1] + '\server2client.dctest.xml',TRUE);

            IF ContiniaCompanySetup."Company Code" <> '' THEN
              SubDir := STRSUBSTNO(Text006,ContiniaCompanySetup."Company Code",DirToTest[i,2])
            ELSE
              SubDir := DirToTest[i,2];
            IF FileSysMgt.FileExists(DCSetup."File Path for OCR-proc. files" + SubDir + '\serverwritetest.dctest') THEN BEGIN
              IF NOT FileSysMgt.DeleteFile(DCSetup."File Path for OCR-proc. files" + SubDir + '\serverwritetest.dctest',FALSE) THEN
                Log(STRSUBSTNO(Text004,DCSetup."File Path for OCR-proc. files" + SubDir),DCTest.Result::Failed);
            END;
          END;
        END;
        SLEEP(10);
      UNTIL (TIME > EndTime) OR (NoOfServerResponses = NoOfDirs);

      // If any communication files exists from a previous test, then delete these files
      FOR i := 1 TO NoOfDirs DO BEGIN
        IF FileSysMgt.FileExists(DirToTest[i,1] + '\client2server.dctest.xml') THEN
          FileSysMgt.DeleteFile(DirToTest[i,1] + '\client2server.dctest.xml',FALSE);
      END;

      IF NoOfServerResponses = 0 THEN
        Log(STRSUBSTNO(Text013,DCSetup.TABLECAPTION),DCTest.Result::Failed);

      IF DCTest.Result = DCTest.Result::" " THEN BEGIN
        DCTest.Result := DCTest.Result::Passed;
        DCTest.MODIFY;
      END;
    END;

    PROCEDURE ServiceProcessPDFFile@161024018();
    VAR
      DocCat@161024013 : Record 6085575;
      TempDoc@1160040007 : TEMPORARY Record 6085756;
      ContiniaCompanySetup@6085573 : Record 6192773;
      XmlDoc@161024023 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      PagesNodeList@161024022 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      PageNode@161024021 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      SubDir@161024014 : Code[50];
      i@1160040004 : Integer;
      FileCount@1160040001 : Integer;
      PathForOCR@161024016 : Text[1024];
      PathForImport@1160040006 : Text[1024];
      FileName@1160040005 : Text[1024];
      NewFilename@161024017 : Text[1024];
      OrgFilename@161024024 : Text[1024];
      FileArray@1160040000 : ARRAY [10000] OF Text[250];
      EndTime@161024020 : Time;
      FileProcessed@1160040003 : Boolean;
    BEGIN
      DCSetup.GET;
      ContiniaCompanySetup.GET;

      IF DocCat.FINDSET THEN
        REPEAT
          IF ContiniaCompanySetup."Company Code" <> '' THEN
            SubDir := STRSUBSTNO(Text006,ContiniaCompanySetup."Company Code",DocCat.Code)
          ELSE
            SubDir := DocCat.Code;

          IF DocCat."Process PDF Files" THEN BEGIN
            PathForOCR := DCSetup."PDF File Path for OCR" + SubDir;
            PathForImport := DCSetup."File Path for OCR-proc. files" + SubDir;

            IF FileSysMgt.FileExists(PathForOCR + '\config.xml') THEN BEGIN
              NewFilename := CREATEGUID;
              NewFilename := COPYSTR(NewFilename,2,STRLEN(NewFilename) - 2) + '.dctest.pdf';

              FileCount := FileSysMgt.GetFilesInDir2(PathForImport,'*.xml',FileArray);
              FOR i := 1 TO FileCount DO BEGIN
                TempDoc.RESET;
                TempDoc."Entry No." := i;
                TempDoc.Description := FileArray[i];
                TempDoc.INSERT;
              END;

              FileSysMgt.CopyFile(DCTest."Test PDF Filename",PathForOCR + '\' + NewFilename);

              EndTime := TIME + 30000; // 30 seconds

              REPEAT
                FileCount := FileSysMgt.GetFilesInDir2(PathForImport,'*.xml',FileArray);
                FOR i := 1 TO FileCount DO BEGIN
                  TempDoc.RESET;
                  TempDoc.SETRANGE(Description,FileArray[i]);
                  IF TempDoc.ISEMPTY THEN BEGIN
                    XmlDoc := XmlDoc.XmlDocument;
                    XmlDoc.Load(FileName);
                    OrgFilename := XmlDoc.SelectSingleNode('/Document/Pages/Page[1]/OriginalFilename').InnerText;
                    CLEAR(XmlDoc);

                    IF OrgFilename = NewFilename THEN BEGIN
                      FileProcessed := TRUE;
                      FileName := FileArray[i];
                      FileSysMgt.DeleteFile(FileName,TRUE);
                      FileSysMgt.DeleteFile(COPYSTR(FileName,1,STRLEN(FileName) - 4) + '.pdf',TRUE);
                      FileSysMgt.DeleteFile(COPYSTR(FileName,1,STRLEN(FileName) - 4) + '.tiff',TRUE);
                    END;
                  END;
                END;

                SLEEP(10);
              UNTIL (TIME > EndTime) OR FileProcessed;

              IF NOT FileProcessed THEN BEGIN
                FileSysMgt.DeleteFile(PathForOCR + '\' + NewFilename,FALSE);
                Log(Text014,DCTest.Result::Failed);
              END;

              FileProcessed := TRUE;
            END;
          END;
        UNTIL (DocCat.NEXT = 0) OR (FileProcessed);

      IF NOT FileProcessed THEN
        Log(Text014,DCTest.Result::Failed);

      IF DCTest.Result = DCTest.Result::" " THEN BEGIN
        DCTest.Result := DCTest.Result::Passed;
        DCTest.MODIFY;
      END;
    END;

    PROCEDURE ServiceDownloadFromEmail@161024019();
    VAR
      DocCat@161024014 : Record 6085575;
      ConnEndpoint@161024022 : Record 6085620;
      ContiniaCompanySetup@6085573 : Record 6192773;
      XmlLib@161024013 : Codeunit 6085573;
      XmlDoc@161024012 : Codeunit 6192800;
      XmlNode@1001 : Codeunit 6192801;
      DocumentElement@1000 : Codeunit 6192801;
      SubDir@161024015 : Code[50];
      DirToTest@161024016 : ARRAY [1000,2] OF Text[1024];
      ServerResponse@161024021 : Code[250];
      NoOfDirs@161024017 : Integer;
      NoOfServerResponses@161024019 : Integer;
      i@161024020 : Integer;
      EndTime@161024018 : Time;
    BEGIN
      DCSetup.GET;
      ContiniaCompanySetup.GET;

      XmlLib.CreateUTF8XmlDOM(XmlDoc,'root');
      XmlDoc.GetDocumentElement(DocumentElement);
      XmlLib.AppendXmlNode(DocumentElement,'Action','TestIMAPDownload');

      DocCat.SETFILTER("E-Mail Connection Endpoint",'<>%1','');
      IF DocCat.FINDSET THEN
        REPEAT
          IF ContiniaCompanySetup."Company Code" <> '' THEN
            SubDir := STRSUBSTNO(Text006,ContiniaCompanySetup."Company Code",DocCat.Code)
          ELSE
            SubDir := DocCat.Code;

          NoOfDirs := NoOfDirs + 1;
          DirToTest[NoOfDirs,1] := DCSetup."PDF File Path for OCR" + SubDir;
          DirToTest[NoOfDirs,2] := DocCat.Code;

          XmlDoc.Save(DirToTest[NoOfDirs,1] + '\client2server.dctest.xml');
        UNTIL DocCat.NEXT = 0;

      EndTime := TIME + 30000; // 30 seconds
      REPEAT
        FOR i := 1 TO NoOfDirs DO BEGIN
          // If the server have responsed
          IF FileSysMgt.FileExists(DirToTest[i,1] + '\server2client.dctest.xml') THEN BEGIN
            NoOfServerResponses := NoOfServerResponses + 1;

            XmlDoc.Load(DirToTest[i,1] + '\server2client.dctest.xml');
            XmlDoc.SelectSingleNode(XmlNode,'/Document/result');
            ServerResponse := XmlNode.InnerText;

            IF ServerResponse <> 'IMAP OK' THEN BEGIN
              DocCat.GET(DirToTest[i,2]);
              ConnEndpoint.GET(DocCat."E-Mail Connection Endpoint");
              CASE ServerResponse OF
                'IMAP CONNECTION FAILED':
                  Log(STRSUBSTNO(Text015,ConnEndpoint."Server Address",ConnEndpoint.TABLECAPTION,ConnEndpoint.Code),
                    DCTest.Result::Failed);
                'IMAP LOGIN FAILED':
                  Log(STRSUBSTNO(Text016,ConnEndpoint."Server Address",ConnEndpoint.TABLECAPTION,ConnEndpoint.Code),
                    DCTest.Result::Failed);
                'IMAP UNABLE TO OPEN INBOX':
                  Log(STRSUBSTNO(Text017,ConnEndpoint."Server Address",ConnEndpoint.TABLECAPTION,ConnEndpoint.Code),
                    DCTest.Result::Failed);
              END;
            END;

            FileSysMgt.DeleteFile(DirToTest[i,1] + '\server2client.dctest.xml',TRUE);
          END;
        END;
        SLEEP(10);
      UNTIL (TIME > EndTime) OR (NoOfServerResponses = NoOfDirs);

      IF DCTest.Result = DCTest.Result::" " THEN BEGIN
        DCTest.Result := DCTest.Result::Passed;
        DCTest.MODIFY;
      END;
    END;

    PROCEDURE PurchApprovalSetup@161024021();
    VAR
      ContiniaCompanySetup@6085573 : Record 6192773;
      ContiniaWebPortal@1160040000 : Record 6192774;
      DCApprovalsBridge@1000 : Codeunit 6085790;
      UserSetup@161024013 : Record 91;
      ContiniaUser@1001 : Record 6086001;
      ContiniaUserSetup@161024014 : Record 6086002;
    BEGIN
      DCSetup.GET;
      ContiniaCompanySetup.GET;
      ContiniaCompanySetup.TESTFIELD("Web Portal Code");
      ContiniaWebPortal.GET(ContiniaCompanySetup."Web Portal Code");

      DCApprovalsBridge.CheckPurchApprovalSetup;

      DCSetup.CALCFIELDS("Purch: Approval Template");
      IF NOT DCSetup."Purch: Approval Template".HASVALUE THEN
        Log(STRSUBSTNO(Text020,DCSetup.FIELDCAPTION("Purch: Approval Template"),DCSetup.TABLECAPTION),DCTest.Result::Warning);

      UserSetup.SETFILTER("Approver ID",'<>%1','');
      IF UserSetup.FINDSET THEN BEGIN
        REPEAT
          IF (UserSetup."Purchase Amount Approval Limit" = 0) AND (NOT UserSetup."Unlimited Purchase Approval") THEN
            Log(STRSUBSTNO(Text022,UserSetup."User ID",UserSetup.FIELDCAPTION("Purchase Amount Approval Limit"),
              UserSetup.FIELDCAPTION("Unlimited Purchase Approval")),DCTest.Result::Warning)
          ELSE BEGIN
            IF UserSetup."Salespers./Purch. Code" = '' THEN
              Log(STRSUBSTNO(Text023,UserSetup.FIELDCAPTION("Salespers./Purch. Code"),UserSetup.TABLECAPTION,
                UserSetup.FIELDCAPTION("User ID"),UserSetup."User ID"),DCTest.Result::Warning);

            ContiniaUser.GET(UserSetup."User ID");
            IF ContiniaUser."E-Mail" = '' THEN
              Log(STRSUBSTNO(Text023,ContiniaUser.FIELDCAPTION("E-Mail"),ContiniaUser.TABLECAPTION,
                ContiniaUser.FIELDCAPTION("User ID"),ContiniaUser."User ID"),DCTest.Result::Warning);
          END;
        UNTIL UserSetup.NEXT = 0;
      END ELSE
        Log(STRSUBSTNO(Text021,UserSetup.TABLECAPTION,UserSetup.FIELDCAPTION("Purchase Amount Approval Limit")),DCTest.Result::Warning);

      IF ContiniaUserSetup.ISEMPTY THEN
        Log(STRSUBSTNO(Text024,ContiniaUserSetup.TABLECAPTION),DCTest.Result::Warning);

      IF DCTest.Result = DCTest.Result::" " THEN BEGIN
        DCTest.Result := DCTest.Result::Passed;
        DCTest.MODIFY;
      END;
    END;

    PROCEDURE NAVSendEMail@161024022();
    VAR
      DCTest2@161024016 : Record 6085754;
      TestMessage@161024017 : Record 6085755;
      PurchEMail@161024014 : Codeunit 6085712;
      SmtpMailMgt@1000 : Codeunit 6085598;
      HTML@161024015 : Codeunit 6085587;
      ErrorMessage@1001 : Text[1024];
    BEGIN
      DCSetup.GET;
      IF DCSetup."Sender E-mail" = '' THEN BEGIN
        Log(STRSUBSTNO(Text002,DCSetup.FIELDCAPTION("Sender E-mail"),DCSetup.TABLECAPTION),DCTest.Result::Failed);
        EXIT;
      END;

      IF DCSetup."Sender Name" = '' THEN BEGIN
        Log(STRSUBSTNO(Text002,DCSetup.FIELDCAPTION("Sender Name"),DCSetup.TABLECAPTION),DCTest.Result::Failed);
        EXIT;
      END;

      IF DCSetup."Purch: Approval E-Mail Subject" = '' THEN BEGIN
        Log(STRSUBSTNO(Text002,DCSetup.FIELDCAPTION("Purch: Approval E-Mail Subject"),DCSetup.TABLECAPTION),DCTest.Result::Failed);
        EXIT;
      END;

      ErrorMessage := SmtpMailMgt.GetSmtpMailSetup(FALSE);
      IF ErrorMessage <> '' THEN BEGIN
        Log(ErrorMessage,DCTest.Result::Failed);
        EXIT;
      END;

      HTML.Append(Text050);
      DCTest2.SETFILTER(Type,'<>%1',DCTest2.Type::NAVSendEMail);
      DCTest2.FINDSET;
      REPEAT
        HTML.Append(STRSUBSTNO('<br /><b>%1: %2</b><br />',DCTest2.Type,DCTest2.Result));
        TestMessage.SETRANGE("Test Type",DCTest2.Type);
        IF TestMessage.FINDSET THEN
          REPEAT
            HTML.Append(TestMessage.Message + '<br />');
          UNTIL TestMessage.NEXT = 0;
      UNTIL DCTest2.NEXT = 0;

      HTML.Append(Text051);
      PurchEMail.SetupMail(SmtpMailMgt,DCTest.TABLECAPTION,DCTest."E-mail Address",Text025 + ' - ' + COMPANYNAME);
      SmtpMailMgt.SetBodyFromBigStringMgnt(HTML);
      IF NOT SmtpMailMgt.Send THEN
        SmtpMailMgt.DisplayLastError;

      CLEAR(HTML);
      CLEAR(SmtpMailMgt);

      IF DCTest.Result = DCTest.Result::" " THEN BEGIN
        DCTest.Result := DCTest.Result::Passed;
        DCTest.MODIFY;
      END;
    END;

    PROCEDURE TestFilePath@161024016(VAR Path@161024012 : Text[250];FieldCaption@161024014 : Text[80];TableCaption@161024015 : Text[80]) : Boolean;
    VAR
      Failed@161024016 : Boolean;
    BEGIN
      IF Path = '' THEN BEGIN
        Log(STRSUBSTNO(Text002,FieldCaption,TableCaption),DCTest.Result::Failed);
        EXIT;
      END;

      IF NOT FileSysMgt.DirectoryExists(Path) THEN BEGIN
        Log(STRSUBSTNO(Text003,FieldCaption,TableCaption),DCTest.Result::Failed);
        EXIT;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE TestFilePathWritePerm@161024020(VAR Path@161024012 : Text[250]) : Boolean;
    VAR
      Failed@161024016 : Boolean;
      TheFile@161024017 : File;
    BEGIN
      IF NOT TheFile.CREATE(Path + '\test.dctest.tmp') THEN BEGIN
        Log(STRSUBSTNO(Text004,Path),DCTest.Result::Failed);
        EXIT;
      END ELSE BEGIN
        TheFile.CLOSE;

        IF NOT FileSysMgt.DeleteFile(Path + '\test.dctest.tmp',FALSE) THEN BEGIN
          Log(STRSUBSTNO(Text005,Path),DCTest.Result::Failed);
          EXIT;
        END;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE IsDCCompInstalled@161024013() : Boolean;
    VAR
      Date@161024012 : DotNet "'Akeyto.DocumentCapture.Dynamics.Nav.Shared, Version=5.0.0.0, Culture=neutral, PublicKeyToken=0c53e51c0afe7001'.Akeyto.DocumentCapture.Dynamics.Nav.Shared.Date";
    BEGIN
      EXIT(CANLOADTYPE(Date));
    END;

    PROCEDURE Log@161024015(Text@161024013 : Text[250];Result@161024014 : Option);
    VAR
      DCTestMsg@161024012 : Record 6085755;
    BEGIN
      DCTestMsg."Test Type" := DCTest.Type;
      DCTestMsg.Message := Text;
      DCTestMsg.INSERT(TRUE);

      IF Result <> -1 THEN BEGIN
        DCTest.Result := Result;
        DCTest.MODIFY;
      END;
    END;

    PROCEDURE InitTestTable@161024023();
    BEGIN
      DCTest.Type := DCTest.Type::GeneralConfiguration;
      IF NOT DCTest.INSERT THEN;

      DCTest.Type := DCTest.Type::ServiceIsRunning;
      IF NOT DCTest.INSERT THEN;

      DCTest.Type := DCTest.Type::ServiceProcessPDFFile;
      IF NOT DCTest.INSERT THEN;

      DCTest.Type := DCTest.Type::ServiceDownloadFromEmail;
      IF NOT DCTest.INSERT THEN;

      DCTest.Type := DCTest.Type::PurchApprovalSetup;
      IF NOT DCTest.INSERT THEN;

      DCTest.Type := DCTest.Type::NAVSendEMail;
      IF NOT DCTest.INSERT THEN;
    END;

    BEGIN
    END.
  }
}

