OBJECT Codeunit 11012001 Text Editor
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00,4PSSE;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      UserSetup@1210190008 : Record 91;
      SpecialFieldCaptionRec@1100485007 : Record 97;
      SpecialFieldCaptionAdv@1100409001 : Record 11072231;
      FileMgt@1100525004 : Codeunit 419;
      Window@1100485005 : Dialog;
      TextFile@1210190005 : File;
      InputStream@1100528700 : InStream;
      ShowStatus@1210190001 : Boolean;
      TextEditorAllowed@1100525001 : Boolean;
      LineBreakSkipped@1210190002 : Boolean;
      MaxLineLength@1210190000 : Integer;
      OldProgress@1210190010 : Integer;
      OldTime@1210190009 : Time;
      CurrDate@1210190006 : Date;
      CurrCode@1210190012 : Code[20];
      CurrTime@1100525000 : Time;
      CurrCmtCode@1100485008 : Code[20];
      CurrLanguageCode@1100525005 : Code[20];
      CurrCreatedBy@1100485009 : Code[50];
      CurrType@1100409000 : Integer;
      SpecialLineChar@1100485001 : Text[1];
      Filename@1100485002 : Text[250];
      TextLine@1100485004 : Text[1024];
      TextLine2@1100485003 : Text[1024];
      Text000@1100525002 : TextConst 'ENU=Text Editor only allowed if the filtering is based on only one entitty (document/order/invoice/etc.).;NOR=Tekstredigering er kun tillatt hvis filtreringen er basert p† ‚n enkel enhet (dokument/bestiling/faktura/etc.);SVE=Textredigering „r endast till†tet om filtrer „r baserad p† en enda enhet (dokument/order/faktura/etc.).';
      Text001@1100525003 : TextConst 'ENU=Text Editor only allowed if the filtering is based on only one entitty (beginning or Ending Text).;NOR=Tekstredigering er kun tillatt om filtreringen er basert p† ‚n enkel enhet (start- eller slutt-tekst);SVE=Textredigering „r endast till†tet om filtrer „r baserad p† en enda enhet (start- eller sluttext).';
      CurrPos@1100528701 : Integer;
      EndOfLine@1100528702 : Boolean;
      Text002@1100528301 : TextConst 'ENU=Error in saving the Text File.;SVE=Fel vid sparande av textfilen.';
      CurrentValues@1100528703 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.Dictionary`2";

    [External]
    PROCEDURE RlshpMgtComment@1210190007(VAR CommentLine1@1210190000 : Record 5061);
    VAR
      CommentLine@1100529000 : Record 5061;
      lvCommentLine@1100525000 : Record 5061;
    BEGIN
      CommentLine.COPY(CommentLine1);
      CommentLine.SETCURRENTKEY("Table Name","No.","Sub No.","Line No.");
      WITH CommentLine DO BEGIN
        IF NOT ISTEMPORARY THEN BEGIN
          TextEditorAllowed := TRUE;
          IF "No." = '' THEN
            TextEditorAllowed := FALSE;
          IF TextEditorAllowed THEN BEGIN
            lvCommentLine.COPY(CommentLine);
            lvCommentLine.SETCURRENTKEY("Table Name", "No.", "Sub No.", "Line No.");  //* Key 1
            IF lvCommentLine.FINDFIRST THEN BEGIN
              IF (lvCommentLine."Table Name" <> "Table Name") OR (lvCommentLine."No." <> "No.") OR
                 (lvCommentLine."Sub No." <> "Sub No.")
              THEN
                TextEditorAllowed := FALSE;
              IF TextEditorAllowed THEN BEGIN
                IF lvCommentLine.FINDLAST THEN BEGIN
                  IF (lvCommentLine."Table Name" <> "Table Name") OR (lvCommentLine."No." <> "No.") OR
                     (lvCommentLine."Sub No." <> "Sub No.")
                  THEN
                    TextEditorAllowed := FALSE;
                END;
              END;
            END;
          END;
          IF NOT TextEditorAllowed THEN
            ERROR(Text000);
        END;

        InitProcess();

        IF FINDSET THEN BEGIN
          REPEAT
            WriteSpecialFieldsToFile(Date,0T,Code,'','',"Created by");
            Write(Comment, "Line Break");
          UNTIL NEXT = 0;
          WriteSpecialFieldsToFile(TODAY,0T,'','','',USERID);  // 28509.n
        END ELSE
          WriteSpecialFieldsToFile(Date,0T,Code,'','',USERID);

        TextFile.CLOSE;
        EditTempFile;

        //* Read the temporary file and write the comment lines
        DELETEALL;
        "Line No." := 0;
        ResetCurrDateAndCode;
        CurrCmtCode := '';
        CurrCreatedBy := '';

        Set(Filename,MAXSTRLEN(Comment),TRUE,'Making lines');
        WHILE NOT EndOfFile DO BEGIN
          CommentLine."Line Break" := ReadLine;
          GetLine(Comment);
          Comment := DELCHR(Comment, '>');

          IF NOT EvaluateSpecialFields(CurrDate,CurrTime,CurrCode,CurrCmtCode,CurrLanguageCode,CurrCreatedBy,Comment) THEN BEGIN
            "Line No." += 10000;
            Date := CurrDate;
            Code := CurrCode;
            "Created by" := CurrCreatedBy;
            INSERT;
            ResetCurrDateAndCode;
          END;
        END;

        DeleteTempFile;
      END;
    END;

    [External]
    PROCEDURE SalesMgtComment@1210190008(VAR CommentLine1@1210190000 : Record 44);
    VAR
      CommentLine@1100529000 : Record 44;
      lvCommentLine@1100525000 : Record 44;
    BEGIN
      CommentLine.COPY(CommentLine1);
      CommentLine.SETCURRENTKEY("Document Type","No.","Document Line No.","Line No.");
      WITH CommentLine DO BEGIN
        TextEditorAllowed := TRUE;
        IF "No." = '' THEN
          TextEditorAllowed := FALSE;
        IF TextEditorAllowed THEN BEGIN
          lvCommentLine.COPY(CommentLine);
          lvCommentLine.SETCURRENTKEY("Document Type", "No.", "Document Line No.", "Line No.");  //* Key 1
          IF lvCommentLine.FINDFIRST THEN BEGIN
            IF (lvCommentLine."Document Type" <> "Document Type") OR (lvCommentLine."No." <> "No.") OR
               (lvCommentLine."Document Line No." <> "Document Line No.")
            THEN
              TextEditorAllowed := FALSE;
            IF TextEditorAllowed THEN BEGIN
              IF lvCommentLine.FINDLAST THEN BEGIN
                IF (lvCommentLine."Document Type" <> "Document Type") OR (lvCommentLine."No." <> "No.") OR
                   (lvCommentLine."Document Line No." <> "Document Line No.")
                THEN
                  TextEditorAllowed := FALSE;
              END;
            END;
          END;
        END;
        IF NOT TextEditorAllowed THEN
          ERROR(Text000);

        InitProcess();

        IF FINDSET THEN BEGIN
          REPEAT
            WriteSpecialFieldsToFile(Date,0T,Code,"Comment Code",'',"Created by");
            Write(Comment, "Line Break"); // jhoek.300611
          UNTIL NEXT = 0;
          WriteSpecialFieldsToFile(TODAY,0T,'','','',USERID);  // 28509.n
        END ELSE
          WriteSpecialFieldsToFile(Date,0T,Code,"Comment Code",'',USERID);

        TextFile.CLOSE;
        EditTempFile;

        //* Read the temporary file and write the comment lines
        DELETEALL;
        "Line No." := 0;
        ResetCurrDateAndCode;
        CurrCmtCode := '';
        CurrCreatedBy := '';

        Set(Filename,MAXSTRLEN(Comment),TRUE,'Making lines');
        WHILE NOT EndOfFile DO BEGIN
          CommentLine."Line Break" := ReadLine; // jhoek.300611
          GetLine(Comment);
          Comment := DELCHR(Comment, '>'); // jhoek.300611
          IF NOT EvaluateSpecialFields(CurrDate,CurrTime,CurrCode,CurrCmtCode,CurrLanguageCode,CurrCreatedBy,Comment) THEN BEGIN
            "Line No." += 10000;
            Date := CurrDate;
            Code := CurrCode;
            "Comment Code" := CurrCmtCode;
            "Created by" := CurrCreatedBy;
            INSERT;
            ResetCurrDateAndCode;
          END;
        END;

        DeleteTempFile;
      END;
    END;

    [External]
    PROCEDURE PurchMgtComment@1210190010(VAR CommentLine1@1210190000 : Record 43);
    VAR
      CommentLine@1100529000 : Record 43;
      lvCommentLine@1100525000 : Record 43;
    BEGIN
      CommentLine.COPY(CommentLine1);
      CommentLine.SETCURRENTKEY("Document Type","No.","Document Line No.","Line No.");
      WITH CommentLine DO BEGIN
        TextEditorAllowed := TRUE;
        IF "No." = '' THEN
          TextEditorAllowed := FALSE;
        IF TextEditorAllowed THEN BEGIN
          lvCommentLine.COPY(CommentLine);
          lvCommentLine.SETCURRENTKEY("Document Type", "No.", "Document Line No.", "Line No.");  //* Key 1
          IF lvCommentLine.FINDFIRST THEN BEGIN
            IF (lvCommentLine."Document Type" <> "Document Type") OR (lvCommentLine."No." <> "No.") OR
               (lvCommentLine."Document Line No." <> "Document Line No.")
            THEN
              TextEditorAllowed := FALSE;
            IF TextEditorAllowed THEN BEGIN
              IF lvCommentLine.FINDLAST THEN BEGIN
                IF (lvCommentLine."Document Type" <> "Document Type") OR (lvCommentLine."No." <> "No.") OR
                   (lvCommentLine."Document Line No." <> "Document Line No.")
                THEN
                  TextEditorAllowed := FALSE;
              END;
            END;
          END;
        END;
        IF NOT TextEditorAllowed THEN
          ERROR(Text000);

        InitProcess();

        IF FINDSET THEN BEGIN
          REPEAT
            WriteSpecialFieldsToFile(Date,0T,Code,'','',"Created by");
            Write(Comment, "Line Break");
          UNTIL NEXT = 0;
          WriteSpecialFieldsToFile(TODAY,0T,'','','',USERID);  // 28509.n
        END ELSE
          WriteSpecialFieldsToFile(Date,0T,Code,'','',USERID);

        TextFile.CLOSE;
        EditTempFile;

        //* Read the temporary file and write the comment lines
        DELETEALL;
        "Line No." := 0;
        ResetCurrDateAndCode;
        CurrCmtCode := '';
        CurrCreatedBy := '';

        Set(Filename,MAXSTRLEN(Comment),TRUE,'Making lines');
        WHILE NOT EndOfFile DO BEGIN
          CommentLine."Line Break" := ReadLine;
          GetLine(Comment);
          Comment := DELCHR(Comment, '>');
          IF NOT EvaluateSpecialFields(CurrDate,CurrTime,CurrCode,CurrCmtCode,CurrLanguageCode,CurrCreatedBy,Comment) THEN BEGIN
            "Line No." += 10000;
            Date := CurrDate;
            Code := CurrCode;
            "Created by" := CurrCreatedBy;
            INSERT;
            ResetCurrDateAndCode;
          END;
        END;

        DeleteTempFile;
      END;
    END;

    [External]
    PROCEDURE ShippingOrderMgtComment@1100525011(VAR CommentLine1@1210190000 : Record 11071887);
    VAR
      CommentLine@1100529000 : Record 11071887;
      lvCommentLine@1100525000 : Record 11071887;
    BEGIN
      CommentLine.COPY(CommentLine1);
      CommentLine.SETCURRENTKEY("Document No.","Shipping Order Line No.","Line No.");
      WITH CommentLine DO BEGIN
        TextEditorAllowed := TRUE;
        IF "Document No." = '' THEN
          TextEditorAllowed := FALSE;
        IF TextEditorAllowed THEN BEGIN
          lvCommentLine.COPY(CommentLine);
          lvCommentLine.SETCURRENTKEY("Document No.", "Shipping Order Line No.", "Line No.");  //* Key 1
          IF lvCommentLine.FINDFIRST THEN BEGIN
            IF (lvCommentLine."Shipping Order Line No." <> "Shipping Order Line No.") OR
               (lvCommentLine."Document No." <> "Document No.")
            THEN
              TextEditorAllowed := FALSE;
            IF TextEditorAllowed THEN BEGIN
              IF lvCommentLine.FINDLAST THEN BEGIN
                IF (lvCommentLine."Shipping Order Line No." <> "Shipping Order Line No.") OR
                   (lvCommentLine."Document No." <> "Document No.")
                THEN
                  TextEditorAllowed := FALSE;
              END;
            END;
          END;
        END;
        IF NOT TextEditorAllowed THEN
          ERROR(Text000);

        InitProcess();

        IF FINDSET THEN BEGIN
          REPEAT
            WriteSpecialFieldsToFile(Date,0T,Code,"Comment Code",'',"Created by");
            Write(Comment, "Line Break");
          UNTIL NEXT = 0;
          WriteSpecialFieldsToFile(TODAY,0T,'','','',USERID);  // 28509.n
        END ELSE
          WriteSpecialFieldsToFile(Date,0T,Code,"Comment Code",'',USERID);

        TextFile.CLOSE;
        EditTempFile;

        //* Read the temporary file and write the comment lines
        DELETEALL;
        "Line No." := 0;
        ResetCurrDateAndCode;
        CurrCmtCode := '';
        CurrCreatedBy := '';

        Set(Filename,MAXSTRLEN(Comment),TRUE,'Making lines');
        WHILE NOT EndOfFile DO BEGIN
          CommentLine."Line Break" := ReadLine; // jhoek.300611
          GetLine(Comment);
          Comment := DELCHR(Comment, '>');
          IF NOT EvaluateSpecialFields(CurrDate,CurrTime,CurrCode,CurrCmtCode,CurrLanguageCode,CurrCreatedBy,Comment) THEN BEGIN
            "Line No." += 10000;
            Date := CurrDate;
            Code := CurrCode;
            "Comment Code" := CurrCmtCode;
            "Created by" := CurrCreatedBy;
            INSERT;
            ResetCurrDateAndCode;
          END;
        END;

        DeleteTempFile;
      END;
    END;

    [External]
    PROCEDURE ServContrArrangementMgtComment@1100529600(VAR CommentLine1@1210190000 : Record 11072560);
    VAR
      CommentLine@1100529000 : Record 11072560;
      LocCommentLine@1100525000 : Record 11072560;
    BEGIN
      CommentLine.COPY(CommentLine1);
      CommentLine.SETCURRENTKEY("Service Contract No.", "Object No.", "Maintenance Scheme", "Serv. Contr. Arrang. Line No.", "Line No.");
      WITH CommentLine DO BEGIN
        TextEditorAllowed := TRUE;
        IF NOT ISTEMPORARY THEN BEGIN
          IF "Service Contract No." = '' THEN
            TextEditorAllowed := FALSE;
          IF TextEditorAllowed THEN BEGIN
            LocCommentLine.COPY(CommentLine);
            LocCommentLine.SETCURRENTKEY("Service Contract No.", "Object No.", "Maintenance Scheme", "Serv. Contr. Arrang. Line No.", "Line No.");  //* Key 1
            IF LocCommentLine.FINDFIRST THEN BEGIN
              IF (LocCommentLine."Service Contract No." <> "Service Contract No.") OR
                 (LocCommentLine."Object No." <> "Object No.") OR
                 (LocCommentLine."Maintenance Scheme" <> "Maintenance Scheme") OR
                 (LocCommentLine."Serv. Contr. Arrang. Line No." <> "Serv. Contr. Arrang. Line No.")
              THEN
                TextEditorAllowed := FALSE;
              IF TextEditorAllowed THEN BEGIN
                IF LocCommentLine.FINDLAST THEN BEGIN
                  IF (LocCommentLine."Service Contract No." <> "Service Contract No.") OR
                     (LocCommentLine."Object No." <> "Object No.") OR
                     (LocCommentLine."Maintenance Scheme" <> "Maintenance Scheme") OR
                     (LocCommentLine."Serv. Contr. Arrang. Line No." <> "Serv. Contr. Arrang. Line No.")
                  THEN
                    TextEditorAllowed := FALSE;
                END;
              END;
            END;
          END;
          IF NOT TextEditorAllowed THEN
            ERROR(Text000);
        END;

        InitProcess();

        IF FINDSET THEN BEGIN
          REPEAT
            WriteSpecialFieldsToFile(Date, 0T, Code, "Comment Code", '', "Created by");
            Write(Comment, "Line Break");
          UNTIL NEXT = 0;
          WriteSpecialFieldsToFile(TODAY, 0T, '', '', '', USERID);
        END ELSE
          WriteSpecialFieldsToFile(Date, 0T, Code, "Comment Code", '', USERID);

        TextFile.CLOSE;
        EditTempFile;

        //* Read the temporary file and write the comment lines
        DELETEALL;
        "Line No." := 0;
        ResetCurrDateAndCode;
        CurrCmtCode := '';
        CurrCreatedBy := '';

        Set(Filename, MAXSTRLEN(Comment), TRUE, 'Making lines');
        WHILE NOT EndOfFile DO BEGIN
          "Line Break" := ReadLine;
          GetLine(Comment);
          Comment := DELCHR(Comment, '>');
          IF NOT EvaluateSpecialFields(CurrDate, CurrTime, CurrCode, CurrCmtCode, CurrLanguageCode, CurrCreatedBy, Comment) THEN BEGIN
            "Line No." += 10000;
            Date := CurrDate;
            Code := CurrCode;
            "Comment Code" := CurrCmtCode;
            "Created by" := CurrCreatedBy;
            INSERT;
          END;
        END;

        DeleteTempFile;
      END;
    END;

    [External]
    PROCEDURE CommentLine@1100485004(VAR CommentLine1@1210190000 : Record 97);
    VAR
      CommentLine@1100529000 : Record 97;
      lvCommentLine@1100525000 : Record 97;
    BEGIN
      CommentLine.COPY(CommentLine1);
      CommentLine.SETCURRENTKEY("Table Name","No.","Line No.");
      WITH CommentLine DO BEGIN
        TextEditorAllowed := TRUE;
        IF "No." = '' THEN
          TextEditorAllowed := FALSE;
        IF TextEditorAllowed THEN BEGIN
          lvCommentLine.COPY(CommentLine);
          lvCommentLine.SETCURRENTKEY("Table Name", "No.", "Line No.");  //* Key 1
          IF lvCommentLine.FINDFIRST THEN BEGIN
            IF (lvCommentLine."Table Name" <> "Table Name") OR (lvCommentLine."No." <> "No.") THEN
              TextEditorAllowed := FALSE;
            IF TextEditorAllowed THEN BEGIN
              IF lvCommentLine.FINDLAST THEN BEGIN
                IF (lvCommentLine."Table Name" <> "Table Name") OR (lvCommentLine."No." <> "No.") THEN
                  TextEditorAllowed := FALSE;
              END;
            END;
          END;
        END;
        IF NOT TextEditorAllowed THEN
          ERROR(Text000);

        InitProcess();

        IF FINDSET THEN BEGIN
          REPEAT
            WriteSpecialFieldsToFile(Date,"Time Created",Code,"Comment Code","Language Code","Created by");
            Write(Comment, "Line Break");
          UNTIL NEXT = 0;
          WriteSpecialFieldsToFile(TODAY,TIME,'','','',USERID);  // 28509.n
        END ELSE
          WriteSpecialFieldsToFile(Date,"Time Created",Code,"Comment Code","Language Code",USERID);

        TextFile.CLOSE;
        EditTempFile;

        //* Read the temporary file and write the comment lines
        DELETEALL(TRUE);
        "Line No." := 0;
        ResetCurrDateAndCode;
        CurrCmtCode := '';
        CurrLanguageCode := '';  //db, 22-05-15
        CurrCreatedBy := '';

        Set(Filename,MAXSTRLEN(Comment),TRUE,'Making lines');
        WHILE NOT EndOfFile DO BEGIN
          CommentLine."Line Break" := ReadLine;
          GetLine(Comment);
          Comment := DELCHR(Comment, '>');
          IF NOT EvaluateSpecialFields(CurrDate,CurrTime,CurrCode,CurrCmtCode,CurrLanguageCode,CurrCreatedBy,Comment) THEN BEGIN
            "Line No." += 10000;
            Date := CurrDate;
            Code := CurrCode;
            "Comment Code" := CurrCmtCode;
            "Language Code" := CurrLanguageCode;  //db, 22-05-15
            "Created by" := CurrCreatedBy;
            "Time Created" := CurrTime;
            //INSERT(TRUE); //**4PS.o
            INSERT; //**4PS.n M16371
            ResetCurrDateAndCode;
          END;
        END;

        DeleteTempFile;
      END;
    END;

    [External]
    PROCEDURE CommentLineGroup@1100525007(VAR CommentLine1@1210190000 : Record 11020595);
    VAR
      CommentLine@1100529000 : Record 11020595;
      lvCommentLine@1100525000 : Record 11020595;
    BEGIN
      CommentLine.COPY(CommentLine1);
      CommentLine.SETCURRENTKEY("Table Name",Group,"No.","Estimate No.","Sub-Estimate No.","Part Group",Part,"Estimate Line No.","Recipe Line No.","Part Line No.","Line No.");
      WITH CommentLine DO BEGIN
        TextEditorAllowed := TRUE;
        IF ("No." = '') AND ("Estimate No." = '') AND (Part = '') THEN  //db, 17-02-15
          TextEditorAllowed := FALSE;
        IF TextEditorAllowed THEN BEGIN
          lvCommentLine.COPY(CommentLine);
          lvCommentLine.SETCURRENTKEY("Table Name",Group,"No.","Estimate No.","Sub-Estimate No.","Part Group",Part);  //db, 17-02-15
          IF lvCommentLine.FINDFIRST THEN BEGIN
            IF (lvCommentLine."Table Name" <> "Table Name") OR  (lvCommentLine.Group <> Group) OR (lvCommentLine."No." <> "No.") OR
               (lvCommentLine."Estimate No." <> "Estimate No.") OR  (lvCommentLine."Sub-Estimate No." <> "Sub-Estimate No.") OR
               (lvCommentLine."Part Group" <> "Part Group") OR (lvCommentLine.Part <> Part) OR
               (lvCommentLine."Estimate Line No." <> "Estimate Line No.") OR
               (lvCommentLine."Recipe Line No." <> "Recipe Line No.") OR
               (lvCommentLine."Part Line No." <> "Part Line No.") THEN  //db, 17-02-15
              TextEditorAllowed := FALSE;
            IF TextEditorAllowed THEN BEGIN
              IF lvCommentLine.FINDLAST THEN BEGIN
                IF (lvCommentLine."Table Name" <> "Table Name") OR  (lvCommentLine.Group <> Group) OR (lvCommentLine."No." <> "No.") OR
                   (lvCommentLine."Estimate No." <> "Estimate No.") OR  (lvCommentLine."Sub-Estimate No." <> "Sub-Estimate No.") OR
                   (lvCommentLine."Part Group" <> "Part Group") OR (lvCommentLine.Part <> Part) OR
                   (lvCommentLine."Estimate Line No." <> "Estimate Line No.") OR
                   (lvCommentLine."Recipe Line No." <> "Recipe Line No.") OR
                   (lvCommentLine."Part Line No." <> "Part Line No.") THEN  //db, 17-02-15t
                  TextEditorAllowed := FALSE;
              END;
            END;
          END;
        END;
        IF NOT TextEditorAllowed THEN
          ERROR(Text000);

        InitProcess();

        //db.sn, 16-02-15
        IF FINDSET THEN BEGIN
          REPEAT
            WriteSpecialFieldsToFile(0D,0T,Code,"Comment Code","Language Code",'');  //db, 16-02-15: skip change-log; check language code
            //WriteSpecialFieldsToFile(Date,"Time Created",Code,"Comment Code","Language Code","Created by");
            Write(Comment, "Line Break");
          UNTIL NEXT = 0;
          //WriteSpecialFieldsToFile(TODAY,TIME,'','','',USERID);  // 28509.n
        END ELSE BEGIN
          //WriteSpecialFieldsToFile(Date,"Time Created",Code,"Comment Code","Language Code",USERID);
        END;
        //db.en, 16-02-15

        TextFile.CLOSE;
        EditTempFile;

        //* Read the temporary file and write the comment lines
        DELETEALL(TRUE);
        "Line No." := 0;
        ResetCurrDateAndCode;
        CurrCmtCode := '';
        CurrLanguageCode := '';  //db, 22-05-15
        CurrCreatedBy := '';

        Set(Filename,MAXSTRLEN(Comment),TRUE,'Making lines');
        WHILE NOT EndOfFile DO BEGIN
          CommentLine."Line Break" := ReadLine;
          GetLine(Comment);
          Comment := DELCHR(Comment, '>');
          IF NOT EvaluateSpecialFields(CurrDate,CurrTime,CurrCode,CurrCmtCode,CurrLanguageCode,CurrCreatedBy,Comment) THEN BEGIN
            "Line No." += 10000;
            Date := CurrDate;
            Code := CurrCode;
            "Comment Code" := CurrCmtCode;
            "Language Code" := CurrLanguageCode;  //db, 22-05-15
            "Created by" := CurrCreatedBy;
            "Time Created" := CurrTime;
            //INSERT(TRUE); //**4PS.o
            INSERT; //**4PS.n M16371
            //db.sn, 28-11-11: M29282
            Date := CurrDate;
            Code := CurrCode;
            "Comment Code" := CurrCmtCode;
            "Language Code" := CurrLanguageCode;  //db, 22-05-15
            "Created by" := CurrCreatedBy;
            "Time Created" := CurrTime;
            MODIFY(TRUE);  //activate Central Mgt
            //db.en, 28-11-11: M29282
            ResetCurrDateAndCode;
          END;
        END;

        DeleteTempFile;
      END;
    END;

    [External]
    PROCEDURE CommentLineRAW@1100519001(VAR CommentLine1@1210190000 : Record 11125684);
    VAR
      CommentLine@1100529000 : Record 11125684;
      lvCommentLine@1100525000 : Record 11125684;
    BEGIN
      //DP01086
      CommentLine.COPY(CommentLine1);
      CommentLine.SETCURRENTKEY("Table No.","Part Group",Activity,"Estimate No.","Tender Paragraph No.","Tender Paragraph Line","Estimate Line No.","Line No.");
      WITH CommentLine DO BEGIN
        TextEditorAllowed := TRUE;
        IF ("Table No." = 0) OR ((Activity = '') AND ("Tender Paragraph No." = '')) THEN
          TextEditorAllowed := FALSE;
        IF TextEditorAllowed THEN BEGIN
          lvCommentLine.COPY(CommentLine);
          lvCommentLine.SETCURRENTKEY("Table No.","Part Group",Activity,"Estimate No.","Tender Paragraph No.","Tender Paragraph Line","Estimate Line No.","Line No.");
          IF lvCommentLine.FINDFIRST THEN BEGIN
            IF (lvCommentLine."Table No." <> "Table No.") OR  (lvCommentLine."Part Group" <> "Part Group") OR
               (lvCommentLine.Activity <> Activity) OR (lvCommentLine."Estimate No." <> "Estimate No.") OR (lvCommentLine."Tender Paragraph No." <> "Tender Paragraph No.") OR
               (lvCommentLine."Tender Paragraph Line" <> "Tender Paragraph Line") OR (lvCommentLine."Estimate Line No." <> "Estimate Line No.")
            THEN
              TextEditorAllowed := FALSE;
            IF TextEditorAllowed THEN BEGIN
              IF lvCommentLine.FINDLAST THEN BEGIN
                IF (lvCommentLine."Table No." <> "Table No.") OR  (lvCommentLine."Part Group" <> "Part Group") OR
                   (lvCommentLine.Activity <> Activity) OR (lvCommentLine."Estimate No." <> "Estimate No.") OR (lvCommentLine."Tender Paragraph No." <> "Tender Paragraph No.") OR
                    (lvCommentLine."Tender Paragraph Line" <> "Tender Paragraph Line") OR (lvCommentLine."Estimate Line No." <> "Estimate Line No.")
                THEN
                  TextEditorAllowed := FALSE;
              END;
            END;
          END;
        END;
        IF NOT TextEditorAllowed THEN
          ERROR(Text000);

        InitProcess();

        IF FINDSET THEN BEGIN
          REPEAT
            WriteSpecialFieldsToFile(Date,"Time Created",Code,"Comment Code",'',"Created by");
            Write(Comment, "Line Break");
          UNTIL NEXT = 0;
          WriteSpecialFieldsToFile(TODAY,TIME,'','','',USERID);  // 28509.n
        END ELSE
          WriteSpecialFieldsToFile(Date,"Time Created",Code,"Comment Code",'',USERID);

        TextFile.CLOSE;
        EditTempFile;

        //* Read the temporary file and write the comment lines
        DELETEALL(TRUE);
        "Line No." := 0;
        ResetCurrDateAndCode;
        CurrCmtCode := '';
        CurrLanguageCode := '';
        CurrCreatedBy := '';

        Set(Filename,MAXSTRLEN(Comment),TRUE,'Making lines');
        WHILE NOT EndOfFile DO BEGIN
          CommentLine."Line Break" := ReadLine;
          GetLine(Comment);
          Comment := DELCHR(Comment, '>');
          IF NOT EvaluateSpecialFields(CurrDate,CurrTime,CurrCode,CurrCmtCode,CurrLanguageCode,CurrCreatedBy,Comment) THEN BEGIN
            "Line No." += 10000;
            Date := CurrDate;
            Code := CurrCode;
            "Comment Code" := CurrCmtCode;
            "Created by" := CurrCreatedBy;
            VALIDATE("Time Created", CurrTime);
            INSERT;
            ResetCurrDateAndCode;
          END;
        END;

        DeleteTempFile;
      END;
    END;

    [External]
    PROCEDURE CommentLineBudget@1100529800(VAR CommentLine1@1210190000 : Record 11020634);
    VAR
      CommentLine@1100529000 : Record 11020634;
      lvCommentLine@1100525000 : Record 11020634;
    BEGIN
      // **4PS MVOS
      CommentLine.COPY(CommentLine1);
      CommentLine.SETCURRENTKEY("Table Name","Record ID","Line No.");
      WITH CommentLine DO BEGIN
        TextEditorAllowed := TRUE;
        IF (FORMAT("Record ID") = '') THEN
          TextEditorAllowed := FALSE;
        IF TextEditorAllowed THEN BEGIN
          lvCommentLine.COPY(CommentLine);
          IF lvCommentLine.FINDFIRST THEN BEGIN
            IF (lvCommentLine."Table Name" <> "Table Name") OR (FORMAT(lvCommentLine."Record ID") <> FORMAT("Record ID")) THEN
              TextEditorAllowed := FALSE;
            IF TextEditorAllowed THEN BEGIN
              IF lvCommentLine.FINDLAST THEN BEGIN
                IF (lvCommentLine."Table Name" <> "Table Name") OR (FORMAT(lvCommentLine."Record ID") <> FORMAT("Record ID")) THEN
                  TextEditorAllowed := FALSE;
              END;
            END;
          END;
        END;
        IF NOT TextEditorAllowed THEN
          ERROR(Text000);

        InitProcess();

        IF FINDSET THEN BEGIN
          REPEAT
            WriteSpecialFieldsToFile(Date,"Time Created",Code,"Comment Code",'',"Created by");
            Write(Comment, "Line Break");
          UNTIL NEXT = 0;
          WriteSpecialFieldsToFile(TODAY,TIME,'','','',USERID);  // 28509.n
        END ELSE
          WriteSpecialFieldsToFile(Date,"Time Created",Code,"Comment Code",'',USERID);

        TextFile.CLOSE;
        EditTempFile;

        //* Read the temporary file and write the comment lines
        DELETEALL(TRUE);
        "Line No." := 0;
        ResetCurrDateAndCode;
        CurrCmtCode := '';
        CurrCreatedBy := '';

        Set(Filename,MAXSTRLEN(Comment),TRUE,'Making lines');
        WHILE NOT EndOfFile DO BEGIN
          CommentLine."Line Break" := ReadLine;
          GetLine(Comment);
          Comment := DELCHR(Comment, '>');
          IF NOT EvaluateSpecialFields(CurrDate,CurrTime,CurrCode,CurrCmtCode,CurrLanguageCode,CurrCreatedBy,Comment) THEN BEGIN
            "Line No." += 10000;
            Date := CurrDate;
            Code := CurrCode;
            "Comment Code" := CurrCmtCode;
            "Created by" := CurrCreatedBy;
            "Time Created" := CurrTime;
            //INSERT(TRUE); //**4PS.o
            INSERT; //**4PS.n M16371
            ResetCurrDateAndCode;
          END;
        END;

        DeleteTempFile;
      END;
    END;

    [External]
    PROCEDURE GlazingServiceCommentLine@1100525010(VAR CommentLine1@1100525000 : Record 11125782);
    VAR
      CommentLine@1100529000 : Record 11125782;
      lvCommentLine@1100525001 : Record 11125782;
    BEGIN
      CommentLine.COPY(CommentLine1);
      CommentLine.SETCURRENTKEY("Table Name","No.","Line No.");
      WITH CommentLine DO BEGIN
        TextEditorAllowed := TRUE;
        IF "No." = '' THEN
          TextEditorAllowed := FALSE;
        IF TextEditorAllowed THEN BEGIN
          lvCommentLine.COPY(CommentLine);
          lvCommentLine.SETCURRENTKEY("Table Name", "No.", "Line No.");  //* Key 1
          IF lvCommentLine.FINDFIRST THEN BEGIN
            IF (lvCommentLine."Table Name" <> "Table Name") OR (lvCommentLine."No." <> "No.") THEN
              TextEditorAllowed := FALSE;
            IF TextEditorAllowed THEN BEGIN
              IF lvCommentLine.FINDLAST THEN BEGIN
                IF (lvCommentLine."Table Name" <> "Table Name") OR (lvCommentLine."No." <> "No.") THEN
                  TextEditorAllowed := FALSE;
              END;
            END;
          END;
        END;
        IF NOT TextEditorAllowed THEN
          ERROR(Text000);

        InitProcess();

        IF FINDSET THEN BEGIN
          REPEAT
            WriteSpecialFieldsToFile(Date,0T,Code,'','',"Created By");  //C014534.c
            Write(Comment, "Line Break");
          UNTIL NEXT = 0;
          WriteSpecialFieldsToFile(TODAY,0T,'','','',USERID);  // 28509.n
        END ELSE
          WriteSpecialFieldsToFile(Date,0T,Code,'','',USERID);

        TextFile.CLOSE;
        EditTempFile;

        //* Read the temporary file and write the comment lines
        DELETEALL(TRUE);
        "Line No." := 0;
        ResetCurrDateAndCode;
        CurrCmtCode := '';
        CurrCreatedBy := '';

        Set(Filename,MAXSTRLEN(Comment),TRUE,'Making lines');
        WHILE NOT EndOfFile DO BEGIN
          CommentLine."Line Break" := ReadLine;
          GetLine(Comment);
          Comment := DELCHR(Comment, '>');
          IF NOT EvaluateSpecialFields(CurrDate,CurrTime,CurrCode,CurrCmtCode,CurrLanguageCode,CurrCreatedBy,Comment) THEN BEGIN
            "Line No." += 10000;
            Date := CurrDate;
            Code := CurrCode;
            //"Comment Code" := CurrCmtCode;
            //"Created by" := CurrCreatedBy;
            //"Time Created" := CurrTime;
            //INSERT(TRUE); //**4PS.o
            INSERT; //**4PS.n M16371
            ResetCurrDateAndCode;
          END;
        END;

        DeleteTempFile;
      END;
    END;

    [External]
    PROCEDURE WarrantyDataCommentLine@1210190005(VAR CommentLine1@1100525000 : Record 11020667);
    VAR
      CommentLine@1100529000 : Record 11020667;
      lvCommentLine@1100525001 : Record 11020667;
    BEGIN
      CommentLine.COPY(CommentLine1);
      CommentLine.SETCURRENTKEY("Table Name","No.","Warranty Code","Line No.");
      WITH CommentLine DO BEGIN
        TextEditorAllowed := TRUE;
        IF "No." = '' THEN
          TextEditorAllowed := FALSE;
        IF TextEditorAllowed THEN BEGIN
          lvCommentLine.COPY(CommentLine);
          lvCommentLine.SETCURRENTKEY("Table Name", "No.", "Warranty Code", "Line No.");  //* Key 1
          IF lvCommentLine.FINDFIRST THEN BEGIN
            IF (lvCommentLine."Table Name" <> "Table Name") OR (lvCommentLine."No." <> "No.") THEN
              TextEditorAllowed := FALSE;
            IF TextEditorAllowed THEN BEGIN
              IF lvCommentLine.FINDLAST THEN BEGIN
                IF (lvCommentLine."Table Name" <> "Table Name") OR (lvCommentLine."No." <> "No.") THEN
                  TextEditorAllowed := FALSE;
              END;
            END;
          END;
        END;
        IF NOT TextEditorAllowed THEN
          ERROR(Text000);

        InitProcess();

        IF FINDSET THEN BEGIN
          REPEAT
            WriteSpecialFieldsToFile(Date,0T,Code,'','',"Created By");  //C014534.c
            Write(Comment, "Line Break");
          UNTIL NEXT = 0;
          WriteSpecialFieldsToFile(TODAY,0T,'','','',USERID);  // 28509.n
        END ELSE
          WriteSpecialFieldsToFile(Date,0T,Code,'','',USERID);

        TextFile.CLOSE;
        EditTempFile;

        //* Read the temporary file and write the comment lines
        DELETEALL(TRUE);
        "Line No." := 0;
        ResetCurrDateAndCode;
        CurrCmtCode := '';
        CurrCreatedBy := '';

        Set(Filename,MAXSTRLEN(Comment),TRUE,'Making lines');
        WHILE NOT EndOfFile DO BEGIN
          CommentLine."Line Break" := ReadLine;
          GetLine(Comment);
          Comment := DELCHR(Comment, '>');
          IF NOT EvaluateSpecialFields(CurrDate,CurrTime,CurrCode,CurrCmtCode,CurrLanguageCode,CurrCreatedBy,Comment) THEN BEGIN
            "Line No." += 10000;
            Date := CurrDate;
            Code := CurrCode;
            INSERT;
            ResetCurrDateAndCode;
          END;
        END;

        DeleteTempFile;
      END;
    END;

    [External]
    PROCEDURE CommentLinePlant@1100529000(VAR CommentLine1@1210190000 : Record 11072666);
    VAR
      CommentLine@1100529000 : Record 11072666;
      lvCommentLine@1100525000 : Record 11072666;
    BEGIN
      //DP00183
      //C005461.c T11012669 -> T11072666
      CommentLine.COPY(CommentLine1);
      CommentLine.SETCURRENTKEY("Table No.","No.","No. 2","Entry No.","Line No.");
      WITH CommentLine DO BEGIN
        TextEditorAllowed := TRUE;
        IF ("Table No." = 0) OR ("No." = '') THEN
          TextEditorAllowed := FALSE;
        IF TextEditorAllowed THEN BEGIN
          lvCommentLine.COPY(CommentLine);
          IF lvCommentLine.FINDFIRST THEN BEGIN
            IF (lvCommentLine."Table No." <> "Table No.") OR (lvCommentLine."No." <> "No.") OR
               (lvCommentLine."No. 2" <> "No. 2") OR (lvCommentLine."Entry No." <> "Entry No.")
            THEN
              TextEditorAllowed := FALSE;
            IF TextEditorAllowed THEN BEGIN
              IF lvCommentLine.FINDLAST THEN BEGIN
                IF (lvCommentLine."Table No." <> "Table No.") OR (lvCommentLine."No." <> "No.") OR
                   (lvCommentLine."No. 2" <> "No. 2") OR (lvCommentLine."Entry No." <> "Entry No.")
                THEN
                  TextEditorAllowed := FALSE;
              END;
            END;
          END;
        END;
        IF NOT TextEditorAllowed THEN
          ERROR(Text000);

        InitProcess();

        IF FINDSET THEN BEGIN
          REPEAT
            WriteSpecialFieldsToFile(Date,"Time Created",Code,"Comment Code",'',"Created by");
            Write(Comment, "Line Break");
          UNTIL NEXT = 0;
          WriteSpecialFieldsToFile(TODAY,TIME,'','','',USERID);  // 28509.n
        END ELSE
          WriteSpecialFieldsToFile(Date,"Time Created",Code,"Comment Code",'',USERID);

        TextFile.CLOSE;
        EditTempFile;

        //* Read the temporary file and write the comment lines
        DELETEALL(TRUE);
        "Line No." := 0;
        ResetCurrDateAndCode;
        CurrCmtCode := '';
        CurrCreatedBy := '';

        Set(Filename,MAXSTRLEN(Comment),TRUE,'Making lines');
        WHILE NOT EndOfFile DO BEGIN
          CommentLine."Line Break" := ReadLine;
          GetLine(Comment);
          Comment := DELCHR(Comment, '>');
          IF NOT EvaluateSpecialFields(CurrDate,CurrTime,CurrCode,CurrCmtCode,CurrLanguageCode,CurrCreatedBy,Comment) THEN BEGIN
            "Line No." += 10000;
            Date := CurrDate;
            Code := CurrCode;
            "Comment Code" := CurrCmtCode;
            "Created by" := CurrCreatedBy;
            "Time Created" := CurrTime;
            //INSERT(TRUE); //**4PS.o
            INSERT; //**4PS.n M16371
            ResetCurrDateAndCode;
          END;
        END;

        DeleteTempFile;
      END;
    END;

    [External]
    PROCEDURE ProvisionalWorkCommentLine@1100528701(VAR CommentLine1@1210190000 : Record 11071940);
    VAR
      CommentLine@1100529000 : Record 11071940;
      CommentLine2@1100525000 : Record 11071940;
    BEGIN
      CommentLine.COPY(CommentLine1);
      CommentLine.SETCURRENTKEY("Table Name","Provisional Work No.","Feature Group",Feature,"Specification Type","Specification Line No.","Line No.");
      WITH CommentLine DO BEGIN
        TextEditorAllowed := TRUE;
        IF "Provisional Work No." = '' THEN
          TextEditorAllowed := FALSE;
        IF TextEditorAllowed THEN BEGIN
          CommentLine2.COPY(CommentLine);
          CommentLine2.SETCURRENTKEY(
            "Table Name","Provisional Work No.","Feature Group",Feature,
            "Specification Type","Specification Line No.","Line No.");  //* Key 1
          IF CommentLine2.FINDFIRST THEN BEGIN
            IF (CommentLine2."Table Name" <> "Table Name") OR
               (CommentLine2."Provisional Work No." <> "Provisional Work No.") OR
               (CommentLine2."Feature Group" <> "Feature Group") OR
               (CommentLine2.Feature <> Feature) OR
               (CommentLine2."Specification Type" <> "Specification Type") OR
               (CommentLine2."Specification Line No." <> "Specification Line No.")
            THEN
              TextEditorAllowed := FALSE;
            IF TextEditorAllowed THEN BEGIN
              IF CommentLine2.FINDLAST THEN BEGIN
                IF (CommentLine2."Table Name" <> "Table Name") OR
                   (CommentLine2."Provisional Work No." <> "Provisional Work No.") OR
                   (CommentLine2."Feature Group" <> "Feature Group") OR
                   (CommentLine2.Feature <> Feature) OR
                   (CommentLine2."Specification Type" <> "Specification Type") OR
                   (CommentLine2."Specification Line No." <> "Specification Line No.")
                THEN
                  TextEditorAllowed := FALSE;
              END;
            END;
          END;
        END;
        IF NOT TextEditorAllowed THEN
          ERROR(Text000);

        InitProcess();

        IF FINDSET THEN BEGIN
          REPEAT
            WriteSpecialFieldsToFile(Date,"Time Created",Code,"Comment Code",'',"Created by");
            Write(Comment, "Line Break");
          UNTIL NEXT = 0;
          WriteSpecialFieldsToFile(TODAY,TIME,'','','',USERID);
        END ELSE
          WriteSpecialFieldsToFile(Date,"Time Created",Code,"Comment Code",'',USERID);

        TextFile.CLOSE;
        EditTempFile;

        //* Read the temporary file and write the comment lines
        DELETEALL(TRUE);
        "Line No." := 0;
        ResetCurrDateAndCode;
        CurrCmtCode := '';
        CurrCreatedBy := '';

        Set(Filename,MAXSTRLEN(Comment),TRUE,'Making lines');
        WHILE NOT EndOfFile DO BEGIN
          CommentLine."Line Break" := ReadLine;
          GetLine(Comment);
          Comment := DELCHR(Comment, '>');
          IF NOT EvaluateSpecialFields(CurrDate,CurrTime,CurrCode,CurrCmtCode,CurrLanguageCode,CurrCreatedBy,Comment) THEN BEGIN
            "Line No." += 10000;
            Date := CurrDate;
            Code := CurrCode;
            "Comment Code" := CurrCmtCode;
            "Created by" := CurrCreatedBy;
            "Time Created" := CurrTime;
            INSERT;
            ResetCurrDateAndCode;
          END;
        END;

        DeleteTempFile;
      END;
    END;

    [External]
    PROCEDURE CommentLineExt@1100485019(VAR CommentLine1@1210190000 : Record 11020314;iReadOnly@1100485000 : Boolean);
    VAR
      CommentLine@1100529000 : Record 11020314;
      lvCommentLine@1100525000 : Record 11020314;
    BEGIN
      //copy of function CommentLine
      CommentLine.COPY(CommentLine1);
      CommentLine.SETCURRENTKEY("Table1 Name","Table1 No.","Table2 Name","Table2 No.","Table3 Name","Table3 No.","Line No.");
      WITH CommentLine DO BEGIN
        TextEditorAllowed := TRUE;
        IF ("Table1 No." + "Table2 No." + "Table3 No.") = '' THEN
          TextEditorAllowed := FALSE;
        IF TextEditorAllowed THEN BEGIN
          lvCommentLine.COPY(CommentLine);
          lvCommentLine.SETCURRENTKEY(
            "Table1 Name", "Table1 No.", "Table2 Name", "Table2 No.", "Table3 Name", "Table3 No.", "Line No.");  //* Key 1
          IF lvCommentLine.FINDFIRST THEN BEGIN
            IF (lvCommentLine."Table1 Name" <> "Table1 Name") OR (lvCommentLine."Table1 No." <> "Table1 No.") OR
               (lvCommentLine."Table2 Name" <> "Table2 Name") OR (lvCommentLine."Table2 No." <> "Table2 No.") OR
               (lvCommentLine."Table3 Name" <> "Table3 Name") OR (lvCommentLine."Table3 No." <> "Table3 No.")
            THEN
              TextEditorAllowed := FALSE;
            IF TextEditorAllowed THEN BEGIN
              IF lvCommentLine.FINDLAST THEN BEGIN
                IF (lvCommentLine."Table1 Name" <> "Table1 Name") OR (lvCommentLine."Table1 No." <> "Table1 No.") OR
                   (lvCommentLine."Table2 Name" <> "Table2 Name") OR (lvCommentLine."Table2 No." <> "Table2 No.") OR
                   (lvCommentLine."Table3 Name" <> "Table3 Name") OR (lvCommentLine."Table3 No." <> "Table3 No.")
                THEN
                  TextEditorAllowed := FALSE;
              END;
            END;
          END;
        END;
        IF NOT TextEditorAllowed THEN
          ERROR(Text000);

        InitProcess();

        IF FINDSET THEN BEGIN
          REPEAT
            WriteSpecialFieldsToFileExt(Date,Code,"Created by");
            Write(Comment, "Line Break");
          UNTIL NEXT = 0;
          WriteSpecialFieldsToFileExt(TODAY,'',USERID);  // 28509.n
        END ELSE
          WriteSpecialFieldsToFileExt(Date,Code,USERID);

        TextFile.CLOSE;
        EditTempFile;

        IF NOT iReadOnly THEN BEGIN
          //* Read the temporary file and write the comment lines
          DELETEALL(TRUE);
          "Line No." := 0;
          ResetCurrDateAndCode;
          CurrCmtCode := '';
          CurrCreatedBy := '';

          Set(Filename,MAXSTRLEN(Comment),TRUE,'Making lines');
          WHILE NOT EndOfFile DO BEGIN
            CommentLine."Line Break" := ReadLine;
            GetLine(Comment);
            Comment := DELCHR(Comment, '>');
            IF NOT EvaluateSpecialFields(CurrDate,CurrTime,CurrCode,CurrCmtCode,CurrLanguageCode,CurrCreatedBy,Comment) THEN BEGIN
              "Line No." += 10000;
              Date := CurrDate;
              Code := CurrCode;
              "Created by" := CurrCreatedBy;
              //INSERT(TRUE); //**4PS.o M16371
              INSERT; //**4PS.n M16371
              ResetCurrDateAndCode;
            END;
          END;
        END;

        DeleteTempFile;
      END;
    END;

    [External]
    PROCEDURE CommentLineServ@1100485016(VAR CommentLine1@1210190000 : Record 11012882);
    VAR
      ServiceText@1100529000 : Record 11012882;
      ServiceText2@1100525000 : Record 11012882;
      RecRef@1100528700 : RecordRef;
      FldRef@1100528701 : FieldRef;
      Res@1100528702 : Boolean;
      LineNo@1100528704 : Integer;
    BEGIN
      ServiceText.COPY(CommentLine1);
      ServiceText.SETCURRENTKEY("Table Name","No.","Table Field","Line No.");
      WITH ServiceText DO BEGIN
        TextEditorAllowed := TRUE;
        IF "No." = '' THEN
          TextEditorAllowed := FALSE;
        IF TextEditorAllowed THEN BEGIN
          ServiceText2.COPY(ServiceText);
          ServiceText2.SETCURRENTKEY("Table Name", "No.", "Table Field", "Line No.");  //* Key 1
          IF ServiceText2.FINDFIRST THEN BEGIN
            IF (ServiceText2."Table Name" <> "Table Name") OR (ServiceText2."No." <> "No.") OR
               (ServiceText2."Table Field" <> "Table Field")
            THEN
              TextEditorAllowed := FALSE;
            IF TextEditorAllowed THEN BEGIN
              IF ServiceText2.FINDLAST THEN BEGIN
                IF (ServiceText2."Table Name" <> "Table Name") OR (ServiceText2."No." <> "No.") OR
                   (ServiceText2."Table Field" <> "Table Field")
                THEN
                  TextEditorAllowed := FALSE;
              END;
            END;
          END;
        END;
        IF NOT TextEditorAllowed THEN
          ERROR(Text000);

        InitProcess();

        IF FINDSET THEN BEGIN
          REPEAT
            RecRef.GETTABLE(ServiceText);
            WriteSpecialFieldToFile(RecRef.FIELD(FIELDNO(Date)));
            WriteSpecialFieldToFile(RecRef.FIELD(FIELDNO("Time Created")));
            WriteSpecialFieldToFile(RecRef.FIELD(FIELDNO(Code)));
            WriteSpecialFieldToFile(RecRef.FIELD(FIELDNO("Created by")));
            WriteSpecialFieldToFile(RecRef.FIELD(FIELDNO("Created by Employee No.")));
            WriteSpecialFieldToFile(RecRef.FIELD(FIELDNO("Created by Employee Company")));
            WriteSpecialFieldToFile(RecRef.FIELD(FIELDNO("Active in FSA")));
            Write(Comment, "Line Break");
          UNTIL NEXT = 0;
          WriteSpecialValueToFile(RecRef.FIELD(FIELDNO(Date)), FORMAT(TODAY, 0, 9));
          WriteSpecialValueToFile(RecRef.FIELD(FIELDNO("Time Created")), FORMAT(TIME, 0, 9));
          WriteSpecialValueToFile(RecRef.FIELD(FIELDNO(Code)), '');
          WriteSpecialValueToFile(RecRef.FIELD(FIELDNO("Created by")), USERID);
          WriteSpecialValueToFile(RecRef.FIELD(FIELDNO("Created by Employee No.")), '');
          WriteSpecialValueToFile(RecRef.FIELD(FIELDNO("Created by Employee Company")), '');
          WriteSpecialValueToFile(RecRef.FIELD(FIELDNO("Active in FSA")), FORMAT(ServiceText.GetDefaultValueOfActiveInFSA));
        END ELSE BEGIN
          RecRef.GETTABLE(ServiceText);
          WriteSpecialFieldToFile(RecRef.FIELD(FIELDNO(Date)));
          WriteSpecialFieldToFile(RecRef.FIELD(FIELDNO("Time Created")));
          WriteSpecialFieldToFile(RecRef.FIELD(FIELDNO(Code)));
          WriteSpecialValueToFile(RecRef.FIELD(FIELDNO("Created by")), USERID);
          WriteSpecialValueToFile(RecRef.FIELD(FIELDNO("Created by Employee No.")), '');
          WriteSpecialValueToFile(RecRef.FIELD(FIELDNO("Created by Employee Company")), '');
          WriteSpecialValueToFile(RecRef.FIELD(FIELDNO("Active in FSA")), FORMAT(ServiceText.GetDefaultValueOfActiveInFSA));
        END;

        TextFile.CLOSE;
        EditTempFile;

        //* Read the temporary file and write the comment lines
        DELETEALL(TRUE);
        LineNo := 0;

        Set(Filename,MAXSTRLEN(Comment),TRUE,'Making lines');
        WHILE NOT EndOfFile DO BEGIN
          "Line Break" := ReadLine;
          GetLine(Comment);
          Comment := DELCHR(Comment, '>');

          RecRef.GETTABLE(ServiceText);
          Res := TrySetCurrentValue(RecRef.FIELD(FIELDNO(Date)), Comment);
          IF NOT Res THEN
            Res := TrySetCurrentValue(RecRef.FIELD(FIELDNO("Time Created")), Comment);
          IF NOT Res THEN
            Res := TrySetCurrentValue(RecRef.FIELD(FIELDNO(Code)), Comment);
          IF NOT Res THEN
            Res := TrySetCurrentValue(RecRef.FIELD(FIELDNO("Created by")), Comment);
          IF NOT Res THEN
            Res := TrySetCurrentValue(RecRef.FIELD(FIELDNO("Created by Employee No.")), Comment);
          IF NOT Res THEN
            Res := TrySetCurrentValue(RecRef.FIELD(FIELDNO("Created by Employee Company")), Comment);
          IF NOT Res THEN
            Res := TrySetCurrentValue(RecRef.FIELD(FIELDNO("Active in FSA")), Comment);

          IF NOT Res THEN BEGIN
            LineNo += 10000;
            "Line No." := LineNo;
            RecRef.GETTABLE(ServiceText);
            FldRef := RecRef.FIELD(FIELDNO(Date));
            TryGetCurrentValue(FldRef);
            FldRef := RecRef.FIELD(FIELDNO("Time Created"));
            TryGetCurrentValue(FldRef);
            FldRef := RecRef.FIELD(FIELDNO(Code));
            TryGetCurrentValue(FldRef);
            FldRef := RecRef.FIELD(FIELDNO("Created by"));
            TryGetCurrentValue(FldRef);
            FldRef := RecRef.FIELD(FIELDNO("Created by Employee No."));
            TryGetCurrentValue(FldRef);
            FldRef := RecRef.FIELD(FIELDNO("Created by Employee Company"));
            TryGetCurrentValue(FldRef);
            FldRef := RecRef.FIELD(FIELDNO("Active in FSA"));
            TryGetCurrentValue(FldRef);
            RecRef.SETTABLE(ServiceText);
            INSERT;
          END;
        END;

        DeleteTempFile;
      END;
    END;

    [External]
    PROCEDURE WorkOrderText@1100528601(VAR CommentLine1@1210190000 : Record 11229284);
    VAR
      IWorkOrderText@1100529000 : Record 11229284;
      WorkOrderText@1100525000 : Record 11229284;
      RecRef@1100525005 : RecordRef;
      FldRef@1100525004 : FieldRef;
      Res@1100525003 : Boolean;
      LineNo@1100525001 : Integer;
    BEGIN
      IWorkOrderText.COPY(CommentLine1);
      IWorkOrderText.SETCURRENTKEY("Table Name","No.","Table Field","Line No.");
      WITH IWorkOrderText DO BEGIN
        TextEditorAllowed := TRUE;
        IF "No." = '' THEN
          TextEditorAllowed := FALSE;
        IF TextEditorAllowed THEN BEGIN
          WorkOrderText.COPY(IWorkOrderText);
          WorkOrderText.SETCURRENTKEY("Table Name", "No.", "Table Field", "Line No.");  //* Key 1
          IF WorkOrderText.FINDFIRST THEN BEGIN
            IF (WorkOrderText."Table Name" <> "Table Name") OR (WorkOrderText."No." <> "No.") OR
               (WorkOrderText."Table Field" <> "Table Field")
            THEN
              TextEditorAllowed := FALSE;
            IF TextEditorAllowed THEN BEGIN
              IF WorkOrderText.FINDLAST THEN BEGIN
                IF (WorkOrderText."Table Name" <> "Table Name") OR (WorkOrderText."No." <> "No.") OR
                   (WorkOrderText."Table Field" <> "Table Field")
                THEN
                  TextEditorAllowed := FALSE;
              END;
            END;
          END;
        END;
        IF NOT TextEditorAllowed THEN
          ERROR(Text000);

        InitProcess();

        IF FINDSET THEN BEGIN
          REPEAT
            RecRef.GETTABLE(IWorkOrderText);
            WriteSpecialFieldToFile(RecRef.FIELD(FIELDNO(Date)));
            WriteSpecialFieldToFile(RecRef.FIELD(FIELDNO("Time Created")));
            WriteSpecialFieldToFile(RecRef.FIELD(FIELDNO(Code)));
            WriteSpecialFieldToFile(RecRef.FIELD(FIELDNO("Created by")));
            WriteSpecialFieldToFile(RecRef.FIELD(FIELDNO("Active in FSA")));
            Write(Comment, "Line Break");
          UNTIL NEXT = 0;
          WriteSpecialValueToFile(RecRef.FIELD(FIELDNO(Date)), FORMAT(TODAY, 0, 9));
          WriteSpecialValueToFile(RecRef.FIELD(FIELDNO("Time Created")), FORMAT(TIME, 0, 9));
          WriteSpecialValueToFile(RecRef.FIELD(FIELDNO(Code)), '');
          WriteSpecialValueToFile(RecRef.FIELD(FIELDNO("Created by")), USERID);
          WriteSpecialValueToFile(RecRef.FIELD(FIELDNO("Active in FSA")), FORMAT(IWorkOrderText.GetDefaultValueOfActiveInFSA));
        END ELSE BEGIN
          RecRef.GETTABLE(IWorkOrderText);
          WriteSpecialFieldToFile(RecRef.FIELD(FIELDNO(Date)));
          WriteSpecialFieldToFile(RecRef.FIELD(FIELDNO("Time Created")));
          WriteSpecialFieldToFile(RecRef.FIELD(FIELDNO(Code)));
          WriteSpecialValueToFile(RecRef.FIELD(FIELDNO("Created by")), USERID);
          WriteSpecialValueToFile(RecRef.FIELD(FIELDNO("Active in FSA")), FORMAT(IWorkOrderText.GetDefaultValueOfActiveInFSA));
        END;

        TextFile.CLOSE;
        EditTempFile;

        //* Read the temporary file and write the comment lines
        DELETEALL(TRUE);
        LineNo := 0;

        Set(Filename,MAXSTRLEN(Comment),TRUE,'Making lines');
        WHILE NOT EndOfFile DO BEGIN
          "Line Break" := ReadLine;
          GetLine(Comment);
          Comment := DELCHR(Comment, '>');

          RecRef.GETTABLE(IWorkOrderText);
          Res := TrySetCurrentValue(RecRef.FIELD(FIELDNO(Date)), Comment);
          IF NOT Res THEN
            Res := TrySetCurrentValue(RecRef.FIELD(FIELDNO("Time Created")), Comment);
          IF NOT Res THEN
            Res := TrySetCurrentValue(RecRef.FIELD(FIELDNO(Code)), Comment);
          IF NOT Res THEN
            Res := TrySetCurrentValue(RecRef.FIELD(FIELDNO("Created by")), Comment);
          IF NOT Res THEN
            Res := TrySetCurrentValue(RecRef.FIELD(FIELDNO("Active in FSA")), Comment);

          IF NOT Res THEN BEGIN
            LineNo += 10000;
            "Line No." := LineNo;
            RecRef.GETTABLE(IWorkOrderText);
            FldRef := RecRef.FIELD(FIELDNO(Date));
            TryGetCurrentValue(FldRef);
            FldRef := RecRef.FIELD(FIELDNO("Time Created"));
            TryGetCurrentValue(FldRef);
            FldRef := RecRef.FIELD(FIELDNO(Code));
            TryGetCurrentValue(FldRef);
            FldRef := RecRef.FIELD(FIELDNO("Created by"));
            TryGetCurrentValue(FldRef);
            FldRef := RecRef.FIELD(FIELDNO("Active in FSA"));
            TryGetCurrentValue(FldRef);
            RecRef.SETTABLE(IWorkOrderText);
            INSERT;
          END;
        END;

        DeleteTempFile;
      END;
    END;

    [External]
    PROCEDURE CommentLineServCallWizText@1100528600(VAR CommentLine1@1100528600 : Record 11071722);
    VAR
      CommentLine@1100529000 : Record 11071722;
      lvCommentLine@1100528601 : Record 11071722;
    BEGIN
      CommentLine.COPY(CommentLine1);
      CommentLine.SETCURRENTKEY("Created by","Table Name","No.","Table Field","Line No.");
      WITH CommentLine DO BEGIN
        TextEditorAllowed := TRUE;
        IF "No." = '' THEN
          TextEditorAllowed := FALSE;
        IF TextEditorAllowed THEN BEGIN
          lvCommentLine.COPY(CommentLine);
      //    lvCommentLine.SETCURRENTKEY("Table Name", "No.", "Table Field", "Line No.");  //* Key 1
          IF lvCommentLine.FINDFIRST THEN BEGIN
            IF (lvCommentLine."Table Name" <> "Table Name") OR (lvCommentLine."No." <> "No.") OR
               (lvCommentLine."Table Field" <> "Table Field")
            THEN
              TextEditorAllowed := FALSE;
            IF TextEditorAllowed THEN BEGIN
              IF lvCommentLine.FINDLAST THEN BEGIN
                IF (lvCommentLine."Table Name" <> "Table Name") OR (lvCommentLine."No." <> "No.") OR
                   (lvCommentLine."Table Field" <> "Table Field")
                THEN
                  TextEditorAllowed := FALSE;
              END;
            END;
          END;
        END;
        IF NOT TextEditorAllowed THEN
          ERROR(Text000);

        InitProcess();

        IF FIND('-') THEN BEGIN
          REPEAT
            WriteSpecialFieldsToFile(Date,"Time Created",Code,'','',"Created by");  //C014534.c
            Write(Comment, FALSE);
          UNTIL NEXT = 0;
          WriteSpecialFieldsToFile(TODAY,TIME,'','','',USERID);  // 28509.n
        END ELSE
          WriteSpecialFieldsToFile(Date,"Time Created",Code,'','',USERID);

        TextFile.CLOSE;
        EditTempFile;

        //* Read the temporary file and write the comment lines
        DELETEALL(TRUE);
        "Line No." := 0;
        ResetCurrDateAndCode;
        CurrCmtCode := '';
        CurrCreatedBy := '';

        Set(Filename,MAXSTRLEN(Comment),TRUE,'Making lines');
        WHILE NOT EndOfFile DO BEGIN
          CommentLine."Line Break" := ReadLine;
          GetLine(Comment);
          Comment := DELCHR(Comment, '>');

          IF NOT EvaluateSpecialFields(CurrDate,CurrTime,CurrCode,CurrCmtCode,CurrLanguageCode,CurrCreatedBy,Comment) THEN BEGIN
            "Line No." += 10000;
            Date := CurrDate;
            Code := CurrCode;
            "Created by" := CurrCreatedBy;
            "Time Created" := CurrTime;
            //INSERT(TRUE); //**4PS.o M16371
            INSERT; //**4PS.n M16371
            ResetCurrDateAndCode;
          END;
        END;

        DeleteTempFile;
      END;
    END;

    [External]
    PROCEDURE CommentLineServiceOrderPlantPart@1100529001(VAR CommentLine1@1210190000 : Record 11072321);
    VAR
      ServiceOrderPlantPartText@1100529000 : Record 11072321;
      ServiceOrderPlantPartText2@1100525000 : Record 11072321;
      RecRef@1100528700 : RecordRef;
      FldRef@1100528701 : FieldRef;
      Res@1100528702 : Boolean;
      LineNo@1100528704 : Integer;
    BEGIN
      ServiceOrderPlantPartText.COPY(CommentLine1);
      ServiceOrderPlantPartText.SETCURRENTKEY("Service Order No.", "Plant Part Line No.", "Analysis Type", "Line No.");
      WITH ServiceOrderPlantPartText DO BEGIN
        TextEditorAllowed := TRUE;
        IF ("Service Order No." = '') OR ("Plant Part Line No." = 0) THEN
          TextEditorAllowed := FALSE;
        IF TextEditorAllowed THEN BEGIN
          ServiceOrderPlantPartText2.COPY(ServiceOrderPlantPartText);
          ServiceOrderPlantPartText2.SETCURRENTKEY("Service Order No.", "Plant Part Line No.", "Analysis Type", "Line No.");  //* Key 1
          IF ServiceOrderPlantPartText2.FINDFIRST THEN BEGIN
            IF (ServiceOrderPlantPartText2."Service Order No." <> "Service Order No.") OR
               (ServiceOrderPlantPartText2."Plant Part Line No." <> "Plant Part Line No.") OR
               (ServiceOrderPlantPartText2."Analysis Type" <> "Analysis Type")
            THEN
              TextEditorAllowed := FALSE;
            IF TextEditorAllowed THEN BEGIN
              IF ServiceOrderPlantPartText2.FINDLAST THEN BEGIN
                IF (ServiceOrderPlantPartText2."Service Order No." <> "Service Order No.") OR
                   (ServiceOrderPlantPartText2."Plant Part Line No." <> "Plant Part Line No.") OR
                   (ServiceOrderPlantPartText2."Analysis Type" <> "Analysis Type")
                THEN
                  TextEditorAllowed := FALSE;
              END;
            END;
          END;
        END;
        IF NOT TextEditorAllowed THEN
          ERROR(Text000);

        InitProcess();

        IF FINDSET THEN BEGIN
          REPEAT
            RecRef.GETTABLE(ServiceOrderPlantPartText);
            WriteSpecialFieldToFile(RecRef.FIELD(FIELDNO(Date)));
            WriteSpecialFieldToFile(RecRef.FIELD(FIELDNO("Time Created")));
            WriteSpecialFieldToFile(RecRef.FIELD(FIELDNO(Code)));
            WriteSpecialFieldToFile(RecRef.FIELD(FIELDNO("Created by")));
            Write(Comment, "Line Break");
          UNTIL NEXT = 0;
          WriteSpecialValueToFile(RecRef.FIELD(FIELDNO(Date)), FORMAT(TODAY, 0, 9));
          WriteSpecialValueToFile(RecRef.FIELD(FIELDNO("Time Created")), FORMAT(RoundTime(TIME), 0, 9));
          WriteSpecialValueToFile(RecRef.FIELD(FIELDNO(Code)), '');
          WriteSpecialValueToFile(RecRef.FIELD(FIELDNO("Created by")), USERID);
        END ELSE BEGIN
          RecRef.GETTABLE(ServiceOrderPlantPartText);
          WriteSpecialFieldToFile(RecRef.FIELD(FIELDNO(Date)));
          WriteSpecialFieldToFile(RecRef.FIELD(FIELDNO("Time Created")));
          WriteSpecialFieldToFile(RecRef.FIELD(FIELDNO(Code)));
          WriteSpecialValueToFile(RecRef.FIELD(FIELDNO("Created by")), USERID);
        END;

        TextFile.CLOSE;
        EditTempFile;

        //* Read the temporary file and write the comment lines
        DELETEALL(TRUE);
        LineNo := 0;

        Set(Filename,MAXSTRLEN(Comment),TRUE,'Making lines');
        WHILE NOT EndOfFile DO BEGIN
          "Line Break" := ReadLine;
          GetLine(Comment);
          Comment := DELCHR(Comment, '>');

          RecRef.GETTABLE(ServiceOrderPlantPartText);
          Res := TrySetCurrentValue(RecRef.FIELD(FIELDNO(Date)), Comment);
          IF NOT Res THEN
            Res := TrySetCurrentValue(RecRef.FIELD(FIELDNO("Time Created")), Comment);
          IF NOT Res THEN
            Res := TrySetCurrentValue(RecRef.FIELD(FIELDNO(Code)), Comment);
          IF NOT Res THEN
            Res := TrySetCurrentValue(RecRef.FIELD(FIELDNO("Created by")), Comment);

          IF NOT Res THEN BEGIN
            LineNo += 10000;
            "Line No." := LineNo;
            RecRef.GETTABLE(ServiceOrderPlantPartText);
            FldRef := RecRef.FIELD(FIELDNO(Date));
            TryGetCurrentValue(FldRef);
            FldRef := RecRef.FIELD(FIELDNO("Time Created"));
            TryGetCurrentValue(FldRef);
            FldRef := RecRef.FIELD(FIELDNO(Code));
            TryGetCurrentValue(FldRef);
            FldRef := RecRef.FIELD(FIELDNO("Created by"));
            TryGetCurrentValue(FldRef);
            TryGetCurrentValue(FldRef);
            RecRef.SETTABLE(ServiceOrderPlantPartText);
            VALIDATE("Time Created");
            INSERT;
          END;
        END;

        DeleteTempFile;
      END;
    END;

    [External]
    PROCEDURE DebriefText@1100528603(VAR CommentLine1@1210190000 : Record 11012886);
    VAR
      DebriefText@1100529000 : Record 11012886;
      DebriefText2@1100525000 : Record 11012886;
      RecRef@1100528704 : RecordRef;
      FldRef@1100528703 : FieldRef;
      Res@1100528702 : Boolean;
      LineNo@1100528700 : Integer;
    BEGIN
      DebriefText.COPY(CommentLine1);
      DebriefText.SETCURRENTKEY(Type,"No.","Line No.");
      WITH DebriefText DO BEGIN
        TextEditorAllowed := TRUE;
        IF "No." = '' THEN
          TextEditorAllowed := FALSE;
        IF TextEditorAllowed THEN BEGIN
          DebriefText2.COPY(DebriefText);
          DebriefText2.SETCURRENTKEY(Type, "No.", "Line No.");  //* Key 1
          IF DebriefText2.FINDFIRST THEN BEGIN
            IF DebriefText2."No." <> "No." THEN
              TextEditorAllowed := FALSE;
            IF TextEditorAllowed THEN BEGIN
              IF DebriefText2.FINDLAST THEN BEGIN
                IF DebriefText2."No." <> "No." THEN
                  TextEditorAllowed := FALSE;
              END;
            END;
          END;
        END;
        IF NOT TextEditorAllowed THEN
          ERROR(Text000);

        InitProcess();

        IF FINDSET THEN BEGIN
          REPEAT
            RecRef.GETTABLE(DebriefText);
            WriteSpecialFieldToFile(RecRef.FIELD(FIELDNO(Date)));
            WriteSpecialFieldToFile(RecRef.FIELD(FIELDNO(Rubric)));
            WriteSpecialFieldToFile(RecRef.FIELD(FIELDNO("Modified by Resource")));
            WriteSpecialFieldToFile(RecRef.FIELD(FIELDNO("Modified by User")));
            WriteSpecialFieldToFile(RecRef.FIELD(FIELDNO(Finished)));
            WriteSpecialFieldToFile(RecRef.FIELD(FIELDNO("Work Order No.")));
            Write(Comment, TRUE);
          UNTIL NEXT = 0;
          WriteSpecialValueToFile(RecRef.FIELD(FIELDNO(Date)), FORMAT(TODAY, 0, 9));
          WriteSpecialValueToFile(RecRef.FIELD(FIELDNO(Rubric)), '');
          WriteSpecialValueToFile(RecRef.FIELD(FIELDNO("Modified by Resource")), '');
          WriteSpecialValueToFile(RecRef.FIELD(FIELDNO("Modified by User")), USERID);
          WriteSpecialValueToFile(RecRef.FIELD(FIELDNO(Finished)), FORMAT(FALSE));
          WriteSpecialValueToFile(RecRef.FIELD(FIELDNO("Work Order No.")), '');
        END ELSE BEGIN
          RecRef.GETTABLE(DebriefText);
          WriteSpecialFieldToFile(RecRef.FIELD(FIELDNO(Date)));
          WriteSpecialFieldToFile(RecRef.FIELD(FIELDNO(Rubric)));
          WriteSpecialFieldToFile(RecRef.FIELD(FIELDNO("Modified by Resource")));
          WriteSpecialValueToFile(RecRef.FIELD(FIELDNO("Modified by User")), USERID);
          WriteSpecialFieldToFile(RecRef.FIELD(FIELDNO(Finished)));
          WriteSpecialFieldToFile(RecRef.FIELD(FIELDNO("Work Order No.")));
        END;

        TextFile.CLOSE;
        EditTempFile;

        //* Read the temporary file and write the comment lines
        DELETEALL(TRUE);
        LineNo := 0;

        Set(Filename,MAXSTRLEN(Comment),TRUE,'Making lines');
        WHILE NOT EndOfFile DO BEGIN
          ReadLine;
          GetLine(Comment);
          Comment := DELCHR(Comment, '>');

          RecRef.GETTABLE(DebriefText);
          Res := TrySetCurrentValue(RecRef.FIELD(FIELDNO(Date)), Comment);
          IF NOT Res THEN
            Res := TrySetCurrentValue(RecRef.FIELD(FIELDNO(Rubric)), Comment);
          IF NOT Res THEN
            Res := TrySetCurrentValue(RecRef.FIELD(FIELDNO("Modified by Resource")), Comment);
          IF NOT Res THEN
            Res := TrySetCurrentValue(RecRef.FIELD(FIELDNO("Modified by User")), Comment);
          //IF NOT Res THEN
          //  Res := TrySetCurrentValue(RecRef.FIELD(FIELDNO("Base Service Order No.")), Comment);
          IF NOT Res THEN
            Res := TrySetCurrentValue(RecRef.FIELD(FIELDNO(Finished)), Comment);
          IF NOT Res THEN
            Res := TrySetCurrentValue(RecRef.FIELD(FIELDNO("Work Order No.")), Comment);

          IF NOT Res THEN BEGIN
            LineNo += 10000;
            "Line No." := LineNo;
            RecRef.GETTABLE(DebriefText);
            FldRef := RecRef.FIELD(FIELDNO(Date));
            TryGetCurrentValue(FldRef);
            FldRef := RecRef.FIELD(FIELDNO(Rubric));
            TryGetCurrentValue(FldRef);
            FldRef := RecRef.FIELD(FIELDNO("Modified by Resource"));
            TryGetCurrentValue(FldRef);
            FldRef := RecRef.FIELD(FIELDNO("Modified by User"));
            TryGetCurrentValue(FldRef);
            //FldRef := RecRef.FIELD(FIELDNO("Base Service Order No."));
            //TryGetCurrentValue(FldRef);
            FldRef := RecRef.FIELD(FIELDNO(Finished));
            TryGetCurrentValue(FldRef);
            FldRef := RecRef.FIELD(FIELDNO("Work Order No."));
            TryGetCurrentValue(FldRef);
            RecRef.SETTABLE(DebriefText);
            INSERT;
          END;
        END;

        DeleteTempFile;
      END;
    END;

    [External]
    PROCEDURE ComplaintNote@1100485005(VAR CommentLine1@1210190000 : Record 11012454);
    VAR
      CommentLine@1100529000 : Record 11012454;
      lvCommentLine@1100525000 : Record 11012454;
      Code@1100485000 : Code[20];
    BEGIN
      CommentLine.COPY(CommentLine1);
      CommentLine.SETCURRENTKEY("Complaint No.","Line No.");
      WITH CommentLine DO BEGIN
        TextEditorAllowed := TRUE;
        IF "Complaint No." = '' THEN
          TextEditorAllowed := FALSE;
        IF TextEditorAllowed THEN BEGIN
          lvCommentLine.COPY(CommentLine);
          lvCommentLine.SETCURRENTKEY("Complaint No.", "Line No.");  //* Key 1
          IF lvCommentLine.FINDFIRST THEN BEGIN
            IF (lvCommentLine."Complaint No." <> "Complaint No.") THEN
              TextEditorAllowed := FALSE;
            IF TextEditorAllowed THEN BEGIN
              IF lvCommentLine.FINDLAST THEN BEGIN
                IF (lvCommentLine."Complaint No." <> "Complaint No.") THEN
                  TextEditorAllowed := FALSE;
              END;
            END;
          END;
        END;
        IF NOT TextEditorAllowed THEN
          ERROR(Text000);

        InitProcess();

        IF FINDSET THEN BEGIN
          REPEAT
            WriteSpecialFieldsToFile(Date,0T,Code,'','',"Modified by");
            Write(Note, "Line Break");
          UNTIL NEXT = 0;
          WriteSpecialFieldsToFile(TODAY,0T,'','','',USERID);  // 28509.n
        END ELSE
          WriteSpecialFieldsToFile(Date,0T,Code,'','',USERID);

        TextFile.CLOSE;
        EditTempFile;

        //* Read the temporary file and write the comment lines
        DELETEALL;
        "Line No." := 0;
        ResetCurrDateAndCode;
        CurrCmtCode := '';
        CurrCreatedBy := '';

        Set(Filename,MAXSTRLEN(Note),TRUE,'Making lines');
        WHILE NOT EndOfFile DO BEGIN
          CommentLine."Line Break" := ReadLine;
          GetLine(Note);
          Note := DELCHR(Note, '>');
          IF NOT EvaluateSpecialFields(CurrDate,CurrTime,CurrCode,CurrCmtCode,CurrLanguageCode,CurrCreatedBy,Note) THEN BEGIN
            "Line No." += 10000;
            Date := CurrDate;
            Code := CurrCode;
            INSERT;
            ResetCurrDateAndCode;
          END;
        END;

        DeleteTempFile;
      END;
    END;

    [External]
    PROCEDURE ComplaintNoteBuyer@1100485006(VAR CommentLine1@1210190000 : Record 11012455);
    VAR
      CommentLine@1100529000 : Record 11012455;
      lvCommentLine@1100525000 : Record 11012455;
      Code@1100485000 : Code[20];
    BEGIN
      CommentLine.COPY(CommentLine1);
      CommentLine.SETCURRENTKEY(Project,"Plot No.","Note Type","Line No.");
      WITH CommentLine DO BEGIN
        TextEditorAllowed := TRUE;
        IF Project = '' THEN
          TextEditorAllowed := FALSE;
        IF TextEditorAllowed THEN BEGIN
          lvCommentLine.COPY(CommentLine);
          lvCommentLine.SETCURRENTKEY(Project, "Plot No.", "Note Type", "Line No.");  //* Key 1
          IF lvCommentLine.FINDFIRST THEN BEGIN
            IF (lvCommentLine."Note Type" <> "Note Type") OR (lvCommentLine.Project <> Project) OR
               (lvCommentLine."Plot No." <> "Plot No.")
            THEN
              TextEditorAllowed := FALSE;
            IF TextEditorAllowed THEN BEGIN
              IF lvCommentLine.FINDLAST THEN BEGIN
                IF (lvCommentLine."Note Type" <> "Note Type") OR (lvCommentLine.Project <> Project) OR
                   (lvCommentLine."Plot No." <> "Plot No.")
                THEN
                  TextEditorAllowed := FALSE;
              END;
            END;
          END;
        END;
        IF NOT TextEditorAllowed THEN
          ERROR(Text000);

        InitProcess();

        IF FINDSET THEN BEGIN
          REPEAT
            WriteSpecialFieldsToFile(Date,0T,Code,'','','');
            Write(Note, "Line Break");
          UNTIL NEXT = 0;
          WriteSpecialFieldsToFile(TODAY,0T,'','','',USERID);  // 28509.n
        END ELSE
          WriteSpecialFieldsToFile(Date,0T,Code,'','',USERID);

        TextFile.CLOSE;
        EditTempFile;

        //* Read the temporary file and write the comment lines
        DELETEALL;
        "Line No." := 0;
        ResetCurrDateAndCode;
        CurrCmtCode := '';
        CurrCreatedBy := '';

        Set(Filename,MAXSTRLEN(Note),TRUE,'Making lines');
        WHILE NOT EndOfFile DO BEGIN
          CommentLine."Line Break" := ReadLine;
          GetLine(Note);
          Note := DELCHR(Note, '>');
          IF NOT EvaluateSpecialFields(CurrDate,CurrTime,CurrCode,CurrCmtCode,CurrLanguageCode,CurrCreatedBy,Note) THEN BEGIN
            "Line No." += 10000;
            Date := CurrDate;
            Code := CurrCode;
            INSERT;
            ResetCurrDateAndCode;
          END;
        END;

        DeleteTempFile;
      END;
    END;

    [External]
    PROCEDURE TendElemText@1100485007(VAR CommentLine1@1210190000 : Record 11012475);
    VAR
      CommentLine@1100529000 : Record 11012475;
      lvCommentLine@1100525000 : Record 11012475;
    BEGIN
      CommentLine.COPY(CommentLine1);
      CommentLine.SETCURRENTKEY("Project No.",Principal,"Contract No.","Tender Paragraph","Text Line No.");
      WITH CommentLine DO BEGIN
        TextEditorAllowed := TRUE;
        IF ("Project No." = '') OR ("Tender Paragraph" = '') THEN
          TextEditorAllowed := FALSE;
        IF TextEditorAllowed THEN BEGIN
          lvCommentLine.COPY(CommentLine);
          lvCommentLine.SETCURRENTKEY("Project No.", Principal, "Contract No.", "Tender Paragraph", "Text Line No.");  //* Key 1
          IF lvCommentLine.FINDFIRST THEN BEGIN
            IF (lvCommentLine."Project No." <> "Project No.") OR (lvCommentLine.Principal <> Principal) OR
               (lvCommentLine."Contract No." <> "Contract No.") OR (lvCommentLine."Tender Paragraph" <> "Tender Paragraph")
            THEN
              TextEditorAllowed := FALSE;
            IF TextEditorAllowed THEN BEGIN
              IF lvCommentLine.FINDLAST THEN BEGIN
                IF (lvCommentLine."Project No." <> "Project No.") OR (lvCommentLine.Principal <> Principal) OR
                   (lvCommentLine."Contract No." <> "Contract No.") OR (lvCommentLine."Tender Paragraph" <> "Tender Paragraph")
                THEN
                  TextEditorAllowed := FALSE;
              END;
            END;
          END;
        END;
        IF NOT TextEditorAllowed THEN
          ERROR(Text000);

        InitProcess();

        IF FINDSET THEN BEGIN
          REPEAT
            Write(Text, "Line Break");
          UNTIL NEXT = 0;
        END;

        TextFile.CLOSE;
        EditTempFile;

        //* Read the temporary file and write the comment lines
        DELETEALL;
        "Text Line No." := 0;

        Set(Filename,MAXSTRLEN(Text),TRUE,'Making lines');
        WHILE NOT EndOfFile DO BEGIN
          CommentLine."Line Break" := ReadLine;
          GetLine(Text);
          Text := DELCHR(Text, '>');
          "Text Line No." += 10000;
          INSERT;
        END;

        DeleteTempFile;
      END;
    END;

    [External]
    PROCEDURE BuyerMgtText@1100485000(VAR CommentLine1@1210190000 : Record 11012511);
    VAR
      CommentLine@1100529000 : Record 11012511;
      lvCommentLine@1100525000 : Record 11012511;
      lvTmpCommentLine@1100525001 : TEMPORARY Record 11012511;
      lvTmpCommentLine2@1100525002 : TEMPORARY Record 11012511;
      DoUpdateOption@1100525003 : Boolean;
    BEGIN
      CommentLine.COPY(CommentLine1);
      CommentLine.SETCURRENTKEY(Table,"Text Type","Project No.","House Model","Option Main Group","Option Sub Group","Option Group","Plot No.",Option,"Quote No.","Quote Line No.","Text Line No.");
      WITH CommentLine DO BEGIN
        lvTmpCommentLine2 := CommentLine;  //* Save (key)fields
        TextEditorAllowed := TRUE;
        IF ("Project No." + "House Model" + "Option Main Group" +
            "Option Sub Group" + "Option Group" + "Plot No." + Option + "Quote No.") = ''
        THEN
          TextEditorAllowed := FALSE;
        IF TextEditorAllowed THEN BEGIN
          lvCommentLine.COPY(CommentLine);
          lvCommentLine.SETCURRENTKEY(
            Table, "Text Type", "Project No.", "House Model", "Option Main Group", "Option Sub Group",
            "Option Group", "Plot No.", Option, "Quote No.", "Quote Line No.", "Text Line No.");  //* Key 1
          IF lvCommentLine.FINDFIRST THEN BEGIN
            IF (lvCommentLine.Table <> Table) OR (lvCommentLine."Text Type" <> "Text Type") OR
               (lvCommentLine."Project No." <> "Project No.") OR (lvCommentLine."House Model" <> "House Model") OR
               (lvCommentLine."Option Main Group" <> "Option Main Group") OR
               (lvCommentLine."Option Sub Group" <> "Option Sub Group") OR (lvCommentLine."Option Group" <> "Option Group") OR
               (lvCommentLine."Plot No." <> "Plot No.") OR (lvCommentLine.Option <> Option) OR
               (lvCommentLine."Quote No." <> "Quote No.") OR (lvCommentLine."Quote Line No." <> "Quote Line No.")
            THEN
              TextEditorAllowed := FALSE;
            IF TextEditorAllowed THEN BEGIN
              IF lvCommentLine.FINDLAST THEN BEGIN
                IF (lvCommentLine.Table <> Table) OR (lvCommentLine."Text Type" <> "Text Type") OR
                   (lvCommentLine."Project No." <> "Project No.") OR (lvCommentLine."House Model" <> "House Model") OR
                   (lvCommentLine."Option Main Group" <> "Option Main Group") OR
                   (lvCommentLine."Option Sub Group" <> "Option Sub Group") OR (lvCommentLine."Option Group" <> "Option Group") OR
                   (lvCommentLine."Plot No." <> "Plot No.") OR (lvCommentLine.Option <> Option) OR
                   (lvCommentLine."Quote No." <> "Quote No.") OR (lvCommentLine."Quote Line No." <> "Quote Line No.")
                THEN
                  TextEditorAllowed := FALSE;
              END;
            END;
          END;
        END;
        IF NOT TextEditorAllowed THEN
          ERROR(Text000);

        InitProcess();

        IF FINDSET THEN BEGIN
          REPEAT
            Write(Text, "Line Break");
            lvTmpCommentLine := CommentLine;
            lvTmpCommentLine.INSERT;
          UNTIL NEXT = 0;
        END;

        TextFile.CLOSE;
        EditTempFile;

        //* Read the temporary file and write the comment lines
        DELETEALL;
        "Text Line No." := 0;

        Set(Filename,MAXSTRLEN(Text),TRUE,'Making lines');
        WHILE NOT EndOfFile DO BEGIN
          CommentLine."Line Break" := ReadLine;
          GetLine(Text);
          Text := DELCHR(Text, '>');
          "Text Line No." += 10000;
          INSERT;
        END;
        IF (lvTmpCommentLine2.Table = Table::Option) AND
           (lvTmpCommentLine2."Text Type" = "Text Type"::Technical) AND
           (lvTmpCommentLine2."Plot No." <> '')
        THEN BEGIN
          DoUpdateOption := FALSE;
          IF COUNT <> lvTmpCommentLine.COUNT THEN
            DoUpdateOption := TRUE
          ELSE BEGIN
            IF FINDSET THEN BEGIN
              lvTmpCommentLine.FINDFIRST;
              REPEAT
                IF lvTmpCommentLine.Text <> Text THEN
                  DoUpdateOption := TRUE;
                IF lvTmpCommentLine.NEXT <> 0 THEN;
              UNTIL (NEXT = 0) OR DoUpdateOption;
            END;
          END;
        END;
        IF DoUpdateOption THEN
          lvTmpCommentLine2.UpdateOptionLog();

        DeleteTempFile;
      END;
    END;

    [External]
    PROCEDURE PurchaseText@1100525001(VAR CommentLine1@1100525000 : Record 11012067);
    VAR
      CommentLine@1100529000 : Record 11012067;
      lvCommentLine@1100525001 : Record 11012067;
    BEGIN
      CommentLine.COPY(CommentLine1);
      CommentLine.SETCURRENTKEY("Line Type","No.","Purchase Action","Line No.");
      WITH CommentLine DO BEGIN
        TextEditorAllowed := TRUE;
        IF "Line Type" <> "Line Type"::"Purchase Action" THEN //C027844.n
          IF ("No.") = '' THEN
            TextEditorAllowed := FALSE;
        IF TextEditorAllowed THEN BEGIN
          lvCommentLine.COPY(CommentLine);
          lvCommentLine.SETCURRENTKEY("Line Type","No.","Purchase Action","Line No.");
          IF lvCommentLine.FINDFIRST THEN BEGIN
            IF (lvCommentLine."Line Type" <> "Line Type") OR (lvCommentLine."No." <> "No.") OR
               (lvCommentLine."Purchase Action" <> "Purchase Action")
            THEN
              TextEditorAllowed := FALSE;
            IF TextEditorAllowed THEN BEGIN
              IF lvCommentLine.FINDLAST THEN BEGIN
                IF (lvCommentLine."Line Type" <> "Line Type") OR (lvCommentLine."No." <> "No.") OR
                 (lvCommentLine."Purchase Action" <> "Purchase Action")
                THEN
                  TextEditorAllowed := FALSE;
              END;
            END;
          END;
        END;
        IF NOT TextEditorAllowed THEN
          ERROR(Text000);

        InitProcess();

        IF FINDSET THEN BEGIN
          REPEAT
            Write(Text, "Line Break");
          UNTIL NEXT = 0;
        END;

        TextFile.CLOSE;
        EditTempFile;

        //* Read the temporary file and write the comment lines
        DELETEALL;
        "Line No." := 0;

        Set(Filename,MAXSTRLEN(Text),TRUE,'Making lines');
        WHILE NOT EndOfFile DO BEGIN
          CommentLine."Line Break" := ReadLine;
          GetLine(Text);
          Text := DELCHR(Text, '>');
          "Line No." += 10000;
          INSERT;
        END;

        DeleteTempFile;
      END;
    END;

    [External]
    PROCEDURE GeneralText@1100485003(VAR CommentLine1@1210190000 : Record 11020260);
    VAR
      CommentLine@1100529000 : Record 11020260;
      lvCommentLine@1100485000 : Record 11020260;
    BEGIN
      CommentLine.COPY(CommentLine1);
      CommentLine.SETCURRENTKEY(Table,Code,"Table Line No.","Line No.");
      WITH CommentLine DO BEGIN
        TextEditorAllowed := TRUE;
        IF Code = '' THEN
          TextEditorAllowed := FALSE;
        IF TextEditorAllowed THEN BEGIN
          lvCommentLine.COPY(CommentLine);
          lvCommentLine.SETCURRENTKEY(Table, Code, "Table Line No.", "Line No.");  //* Key 1
          IF lvCommentLine.FINDFIRST THEN BEGIN
            IF (lvCommentLine.Table <> Table) OR (lvCommentLine.Code <> Code) THEN
              TextEditorAllowed := FALSE;
            IF TextEditorAllowed THEN BEGIN
              IF lvCommentLine.FINDLAST THEN BEGIN
                IF (lvCommentLine.Table <> Table) OR (lvCommentLine.Code <> Code) THEN
                  TextEditorAllowed := FALSE;
              END;
            END;
          END;
        END;
        IF NOT TextEditorAllowed THEN
          ERROR(Text000);

        InitProcess();

        //C013139.so
        //IF FINDSET THEN BEGIN
        //  REPEAT
        //    WriteSpecialFieldsToFile(Date,"Time Created",'','','');
        //    Write(CharSetConversion.Ascii2Ansi(Text), "Line Break");
        //  UNTIL NEXT = 0;
        //  WriteSpecialFieldsToFile(TODAY,TIME,'','',USERID);  // 28509.n
        //END ELSE
        //  WriteSpecialFieldsToFile(Date,"Time Created",'','','');
        //C013139.eo

        //C013139.sn
        IF Table = Table::Job THEN BEGIN //Worksheet (small project)
          IF FINDSET THEN BEGIN
            REPEAT
              WriteSpecialFieldsToFile(Date,0T,'','','',"Created by");
              Write(Text, "Line Break");
            UNTIL NEXT = 0;
            WriteSpecialFieldsToFile(TODAY,0T,'','','',USERID);  // 28509.n
          END ELSE
          WriteSpecialFieldsToFile(TODAY,0T,'','','',USERID);
        END ELSE BEGIN
          IF FINDSET THEN BEGIN
            REPEAT
              WriteSpecialFieldsToFile(Date,"Time Created",'','','',"Created by");
              Write(Text, "Line Break");
            UNTIL NEXT = 0;
            WriteSpecialFieldsToFile(TODAY,TIME,'','','',USERID);  // 28509.n
          END ELSE
          WriteSpecialFieldsToFile(TODAY,TIME,'','','',USERID);
        END;
        //C013139.en

        TextFile.CLOSE;
        EditTempFile;

        //* Read the temporary file and write the comment lines
        DELETEALL;
        "Line No." := 0;
        ResetCurrDateAndCode;
        CurrCmtCode := '';
        CurrCreatedBy := '';

        Set(Filename,MAXSTRLEN(Text),TRUE,'Making lines');
        WHILE NOT EndOfFile DO BEGIN
          CommentLine."Line Break" := ReadLine;
          GetLine(Text);
          Text := DELCHR(Text, '>');

          IF NOT EvaluateSpecialFields(CurrDate,CurrTime,CurrCode,CurrCmtCode,CurrLanguageCode,CurrCreatedBy,Text) THEN BEGIN
            "Line No." += 10000;
            Date := CurrDate;
            "Created by" := CurrCreatedBy;
            "Time Created" := CurrTime;
            INSERT;
            ResetCurrDateAndCode;
          END;
        END;

        DeleteTempFile;
      END;
    END;

    [External]
    PROCEDURE EstimateMgtText@1100485015(VAR CommentLine1@1210190000 : Record 11012205);
    VAR
      CommentLine@1100529000 : Record 11012205;
      lvCommentLine@1100525000 : Record 11012205;
    BEGIN
      CommentLine.COPY(CommentLine1);
      CommentLine.SETCURRENTKEY("Recipe Group",Recipe,Type,"Line No.");
      WITH CommentLine DO BEGIN
        TextEditorAllowed := TRUE;
        IF ("Recipe Group" = '') OR (Recipe = '') THEN
          TextEditorAllowed := FALSE;
        IF TextEditorAllowed THEN BEGIN
          lvCommentLine.COPY(CommentLine);
          lvCommentLine.SETCURRENTKEY("Recipe Group", Recipe, Type, "Line No.");  //* Key 1
          IF lvCommentLine.FINDFIRST THEN BEGIN
            IF (lvCommentLine.Type <> Type) OR
               (lvCommentLine."Recipe Group" <> "Recipe Group") OR (lvCommentLine.Recipe <> Recipe)
            THEN
              TextEditorAllowed := FALSE;
            IF TextEditorAllowed THEN BEGIN
              IF lvCommentLine.FINDLAST THEN BEGIN
                IF (lvCommentLine.Type <> Type) OR
                   (lvCommentLine."Recipe Group" <> "Recipe Group") OR (lvCommentLine.Recipe <> Recipe)
                THEN
                  TextEditorAllowed := FALSE;
              END;
            END;
          END;
        END;
        IF NOT TextEditorAllowed THEN
          ERROR(Text000);

        InitProcess();

        IF FINDSET THEN BEGIN
          REPEAT
            Write(Text, "Line Break");
          UNTIL NEXT = 0;
        END;

        TextFile.CLOSE;
        EditTempFile;

        //* Read the temporary file and write the comment lines
        DELETEALL;
        "Line No." := 0;

        Set(Filename,MAXSTRLEN(Text),TRUE,'Making lines');
        WHILE NOT EndOfFile DO BEGIN
          CommentLine."Line Break" := ReadLine;
          GetLine(Text);
          Text := DELCHR(Text, '>');
          "Line No." += 10000;
          INSERT;
        END;

        DeleteTempFile;
      END;
    END;

    [External]
    PROCEDURE CertificationReminderText@1100525005(VAR CommentLine1@1210190000 : Record 11020594);
    VAR
      CertificationReminderText@1100529000 : Record 11020594;
      lvCertificationReminderText@1100525000 : Record 11020594;
    BEGIN
      CertificationReminderText.COPY(CommentLine1);
      CertificationReminderText.SETCURRENTKEY(Position,"Line No.");
      WITH CertificationReminderText DO BEGIN
        TextEditorAllowed := TRUE;
        lvCertificationReminderText.COPY(CertificationReminderText);
        IF lvCertificationReminderText.FINDFIRST THEN BEGIN
          IF (lvCertificationReminderText.Position <> Position) THEN
            TextEditorAllowed := FALSE;
          IF TextEditorAllowed THEN BEGIN
            IF lvCertificationReminderText.FINDLAST THEN BEGIN
              IF (lvCertificationReminderText.Position <> Position) THEN
                TextEditorAllowed := FALSE;
            END;
          END;
        END;

        IF NOT TextEditorAllowed THEN
          ERROR(Text001);

        InitProcess();

        IF FINDSET THEN BEGIN
          REPEAT
            Write(Text, "Line Break");
          UNTIL NEXT = 0;
        END;

        TextFile.CLOSE;
        EditTempFile;

        //* Read the temporary file and write the lines
        DELETEALL;
        "Line No." := 0;

        Set(Filename, MAXSTRLEN(Text), TRUE, 'Making lines');
        WHILE NOT EndOfFile DO BEGIN
          CertificationReminderText."Line Break" := ReadLine;
          GetLine(Text);
          Text := DELCHR(Text, '>');
          "Line No." += 10000;
          INSERT;
        END;

        DeleteTempFile;
      END;
    END;

    [External]
    PROCEDURE AccidentQAText@1100525008(VAR CommentLine1@1100525000 : Record 11126007);
    VAR
      AccidentTextLine@1100529000 : Record 11126007;
      lvAccidentTextLine@1100525001 : Record 11126007;
    BEGIN
      AccidentTextLine.COPY(CommentLine1);
      AccidentTextLine.SETCURRENTKEY("Accident No.",Type,"Line No.");
      WITH AccidentTextLine DO BEGIN
        TextEditorAllowed := TRUE;
        IF "Accident No." = '' THEN
          TextEditorAllowed := FALSE;
        IF TextEditorAllowed THEN BEGIN
          lvAccidentTextLine.COPY(AccidentTextLine);
          lvAccidentTextLine.SETCURRENTKEY("Accident No.", Type, "Line No.");
          IF lvAccidentTextLine.FINDFIRST THEN BEGIN
            IF (lvAccidentTextLine."Accident No." <> "Accident No.") OR
               (lvAccidentTextLine.Type <> Type)
            THEN
              TextEditorAllowed := FALSE;
            IF TextEditorAllowed THEN BEGIN
              IF lvAccidentTextLine.FINDLAST THEN BEGIN
                IF (lvAccidentTextLine."Accident No." <> "Accident No.") OR
                   (lvAccidentTextLine.Type <> Type)
                THEN
                  TextEditorAllowed := FALSE;
              END;
            END;
          END;
        END;
        IF NOT TextEditorAllowed THEN
          ERROR(Text000);

        InitProcess();

        IF FINDSET THEN BEGIN
          REPEAT
            Write(Text, "Line Break");
          UNTIL NEXT = 0;
        END;

        TextFile.CLOSE;
        EditTempFile;

        //* Read the temporary file and write the text lines
        DELETEALL;
        "Line No." := 0;

        Set(Filename,MAXSTRLEN(Text),TRUE,'Making lines');
        WHILE NOT EndOfFile DO BEGIN
          AccidentTextLine."Line Break" := ReadLine;
          GetLine(Text);
          Text := DELCHR(Text, '>');
          "Line No." += 10000;
          INSERT;
        END;

        DeleteTempFile;
      END;
    END;

    [External]
    PROCEDURE QADeviationText@1100525006(VAR CommentLine1@1100525000 : Record 11125987);
    VAR
      QADeviationTextLine@1100529000 : Record 11125987;
      lvQADeviationTextLine@1100525001 : Record 11125987;
      lvQADeviation@1100525002 : Record 11125986;
    BEGIN
      QADeviationTextLine.COPY(CommentLine1);
      QADeviationTextLine.SETCURRENTKEY("Deviation No.",Type,"Line No.");
      WITH QADeviationTextLine DO BEGIN
        lvQADeviation.CheckIfQADeviationCanBeChanged("Deviation No.");
        TextEditorAllowed := TRUE;
        IF "Deviation No." = '' THEN
          TextEditorAllowed := FALSE;
        IF TextEditorAllowed THEN BEGIN
          lvQADeviationTextLine.COPY(QADeviationTextLine);
          lvQADeviationTextLine.SETCURRENTKEY("Deviation No.", Type, "Line No.");
          IF lvQADeviationTextLine.FINDFIRST THEN BEGIN
            IF (lvQADeviationTextLine."Deviation No." <> "Deviation No.") OR
               (lvQADeviationTextLine.Type <> Type)
            THEN
              TextEditorAllowed := FALSE;
            IF TextEditorAllowed THEN BEGIN
              IF lvQADeviationTextLine.FINDLAST THEN BEGIN
                IF (lvQADeviationTextLine."Deviation No." <> "Deviation No.") OR
                   (lvQADeviationTextLine.Type <> Type)
                THEN
                  TextEditorAllowed := FALSE;
              END;
            END;
          END;
        END;
        IF NOT TextEditorAllowed THEN
          ERROR(Text000);

        InitProcess();

        IF FINDSET THEN BEGIN
          REPEAT
            Write(Text, "Line Break");
          UNTIL NEXT = 0;
        END;

        TextFile.CLOSE;
        EditTempFile;

        //* Read the temporary file and write the text lines
        DELETEALL;
        "Line No." := 0;

        Set(Filename,MAXSTRLEN(Text),TRUE,'Making lines');
        WHILE NOT EndOfFile DO BEGIN
          QADeviationTextLine."Line Break" := ReadLine;
          GetLine(Text);
          Text := DELCHR(Text, '>');
          "Line No." += 10000;
          INSERT;
        END;

        DeleteTempFile;
      END;
    END;

    [External]
    PROCEDURE TextLineSMF@1100525003(VAR CommentLine1@1210190000 : Record 11125526);
    VAR
      CommentLine@1100529000 : Record 11125526;
      lvCommentLine@1100525000 : Record 11125526;
      Code@1100485000 : Code[20];
    BEGIN
      CommentLine.COPY(CommentLine1);
      CommentLine.SETCURRENTKEY(Type,"Project No.",Date,"Line No.");
      WITH CommentLine DO BEGIN
        TextEditorAllowed := TRUE;
        IF CommentLine."Project No." = '' THEN
          TextEditorAllowed := FALSE;
        IF TextEditorAllowed THEN BEGIN
          lvCommentLine.COPY(CommentLine);
          lvCommentLine.SETCURRENTKEY(Type, "Project No.", Date, "Line No.");  //* Key 1
          IF lvCommentLine.FINDFIRST THEN BEGIN
            IF (lvCommentLine."Project No." <> "Project No.") THEN
              TextEditorAllowed := FALSE;
            IF TextEditorAllowed THEN BEGIN
              IF lvCommentLine.FINDLAST THEN BEGIN
                IF (lvCommentLine."Project No." <> "Project No.") THEN
                  TextEditorAllowed := FALSE;
              END;
            END;
          END;
        END;
        IF NOT TextEditorAllowed THEN
          ERROR(Text000);

        InitProcess();

        IF FINDSET THEN BEGIN
          REPEAT
            WriteSpecialFieldsToFile(Date,0T,Code,'','',"Created by");  //C014534.c
            Write(Comment, "Line Break");
          UNTIL NEXT = 0;
          WriteSpecialFieldsToFile(TODAY,0T,'','','',USERID);  // 28509.n
        END ELSE
          WriteSpecialFieldsToFile(Date,0T,Code,'','',USERID);

        TextFile.CLOSE;
        EditTempFile;

        //* Read the temporary file and write the comment lines
        DELETEALL;
        "Line No." := 0;
        ResetCurrDateAndCode;
        CurrCmtCode := '';
        CurrCreatedBy := '';

        Set(Filename,MAXSTRLEN(Comment),TRUE,'Making lines');
        WHILE NOT EndOfFile DO BEGIN
          CommentLine."Line Break" := ReadLine;
          GetLine(Comment);
          Comment := DELCHR(Comment, '>');
          IF NOT EvaluateSpecialFields(CurrDate,CurrTime,CurrCode,CurrCmtCode,CurrLanguageCode,CurrCreatedBy,Comment) THEN BEGIN
            "Line No." += 10000;
            Date := CurrDate;
            Code := CurrCode;
            INSERT;
          END;
        END;

        DeleteTempFile;
      END;
    END;

    [External]
    PROCEDURE InspectionLineTextSMF@1100525009(VAR CommentLine1@1210190000 : Record 11125536);
    VAR
      InspecTextline@1100529000 : Record 11125536;
      lvInspecTextline@1100525000 : Record 11125536;
      Code@1100485000 : Code[20];
    BEGIN
      InspecTextline.COPY(CommentLine1);
      InspecTextline.SETCURRENTKEY("Project No.","Inspection Code",Date,"Sequence No.","Line No.");
      WITH InspecTextline DO BEGIN
        TextEditorAllowed := TRUE;
        IF ("Project No." = '') OR ("Inspection Code" = '') OR (Date = 0D) THEN
          TextEditorAllowed := FALSE;
        IF TextEditorAllowed THEN BEGIN
          lvInspecTextline.COPY(InspecTextline);
          lvInspecTextline.SETCURRENTKEY("Project No.", "Inspection Code", Date, "Line No.", "Sequence No.");  //* Key 1
          IF lvInspecTextline.FINDFIRST THEN BEGIN
            IF (lvInspecTextline."Project No." <> "Project No.") OR
               (lvInspecTextline."Inspection Code" <> "Inspection Code") OR
               (lvInspecTextline.Date <> Date) OR
               (lvInspecTextline."Sequence No." <> "Sequence No.")
            THEN
              TextEditorAllowed := FALSE;
            IF TextEditorAllowed THEN BEGIN
              IF lvInspecTextline.FINDLAST THEN BEGIN
                IF (lvInspecTextline."Project No." <> "Project No.") OR
                   (lvInspecTextline."Inspection Code" <> "Inspection Code") OR
                   (lvInspecTextline.Date <> Date) OR
                   (lvInspecTextline."Sequence No." <> "Sequence No.")
                THEN
                  TextEditorAllowed := FALSE;
              END;
            END;
          END;
        END;
        IF NOT TextEditorAllowed THEN
          ERROR(Text000);

        InitProcess();

        IF FINDSET THEN BEGIN
          REPEAT
            WriteSpecialFieldsToFile(0D,0T,Code,"Comment Code",'',"Created by");
            Write(Comment, "Line Break");
          UNTIL NEXT = 0;
          WriteSpecialFieldsToFile(0D,0T,'','','',USERID);  // 28509.n
        END ELSE
          WriteSpecialFieldsToFile(0D,0T,Code,"Comment Code",'',USERID);

        TextFile.CLOSE;
        EditTempFile;

        //* Read the temporary file and write the comment lines
        DELETEALL;
        "Line No." := 0;
        ResetCurrDateAndCode;
        CurrCmtCode := '';
        CurrCreatedBy := '';

        Set(Filename,MAXSTRLEN(Comment),TRUE,'Making lines');
        WHILE NOT EndOfFile DO BEGIN
          InspecTextline."Line Break" := ReadLine;
          GetLine(Comment);
          Comment := DELCHR(Comment, '>');
          IF NOT EvaluateSpecialFields(CurrDate,CurrTime,CurrCode,CurrCmtCode,CurrLanguageCode,CurrCreatedBy,Comment) THEN BEGIN
            "Line No." += 10000;
            Code := CurrCode;
            "Comment Code" := CurrCmtCode;
            "Created by" := CurrCreatedBy;
            INSERT;
          END;
        END;

        DeleteTempFile;
      END;
    END;

    [External]
    PROCEDURE PlotComment@1100485012(VAR CommentLine1@1100485000 : Record 11012518);
    VAR
      CommentLine@1100529000 : Record 11012518;
      lvCommentLine@1100525000 : Record 11012518;
    BEGIN
      CommentLine.COPY(CommentLine1);
      CommentLine.SETCURRENTKEY("Project No.","Plot No.","Line No.");
      WITH CommentLine DO BEGIN
        TextEditorAllowed := TRUE;
        IF ("Project No." = '') OR ("Plot No." = '') THEN
          TextEditorAllowed := FALSE;
        IF TextEditorAllowed THEN BEGIN
          lvCommentLine.COPY(CommentLine);
          lvCommentLine.SETCURRENTKEY("Project No.", "Plot No.", "Line No.");  //* Key 1
          IF lvCommentLine.FINDFIRST THEN BEGIN
            IF (lvCommentLine."Project No." <> "Project No.") OR (lvCommentLine."Plot No." <> "Plot No.") THEN
              TextEditorAllowed := FALSE;
            IF TextEditorAllowed THEN BEGIN
              IF lvCommentLine.FINDLAST THEN BEGIN
                IF (lvCommentLine."Project No." <> "Project No.") OR (lvCommentLine."Plot No." <> "Plot No.") THEN
                  TextEditorAllowed := FALSE;
              END;
            END;
          END;
        END;
        IF NOT TextEditorAllowed THEN
          ERROR(Text000);

        InitProcess();

        IF FINDSET THEN BEGIN
          REPEAT
            Write(Comment, "Line Break");
          UNTIL NEXT = 0;
        END;

        TextFile.CLOSE;
        EditTempFile;

        //* Read the temporary file and write the comment lines
        DELETEALL;
        "Line No." := 0;

        Set(Filename,MAXSTRLEN(Comment),TRUE,'Making lines');
        WHILE NOT EndOfFile DO BEGIN
          CommentLine."Line Break" := ReadLine;
          GetLine(Comment);
          Comment := DELCHR(Comment, '>');
          "Line No." += 10000;
          INSERT;
        END;

        DeleteTempFile;
      END;
    END;

    [External]
    PROCEDURE InwardProcComment@1100485014(VAR CommentLine1@1100485000 : Record 11020354);
    VAR
      CommentLine@1100529000 : Record 11020354;
      lvCommentLine@1100525000 : Record 11020354;
    BEGIN
      CommentLine.COPY(CommentLine1);
      CommentLine.SETCURRENTKEY("Job No.",Element,"Receipt No.","Receipt Line","Line No.");
      WITH CommentLine DO BEGIN
        TextEditorAllowed := TRUE;
        IF ("Job No." + Element + "Receipt No.") = '' THEN
          TextEditorAllowed := FALSE;
        IF TextEditorAllowed THEN BEGIN
          lvCommentLine.COPY(CommentLine);
          lvCommentLine.SETCURRENTKEY("Job No.", Element, "Receipt No.", "Receipt Line", "Line No.");  //* Key 1
          IF lvCommentLine.FINDFIRST THEN BEGIN
            IF (lvCommentLine."Job No." <> "Job No.") OR (lvCommentLine. Element <>  Element) OR
               (lvCommentLine."Receipt No." <> "Receipt No.") OR (lvCommentLine."Receipt Line" <> "Receipt Line")
            THEN
              TextEditorAllowed := FALSE;
            IF TextEditorAllowed THEN BEGIN
              IF lvCommentLine.FINDLAST THEN BEGIN
                IF (lvCommentLine."Job No." <> "Job No.") OR (lvCommentLine. Element <>  Element) OR
                   (lvCommentLine."Receipt No." <> "Receipt No.") OR (lvCommentLine."Receipt Line" <> "Receipt Line")
                    THEN
                  TextEditorAllowed := FALSE;
              END;
            END;
          END;
        END;
        IF NOT TextEditorAllowed THEN
          ERROR(Text000);

        InitProcess();

        IF FINDSET THEN BEGIN
          REPEAT
            Write(Comment, "Line Break");
          UNTIL NEXT = 0;
        END;

        TextFile.CLOSE;
        EditTempFile;

        //* Read the temporary file and write the comment lines
        DELETEALL;
        "Line No." := 0;

        Set(Filename,MAXSTRLEN(Comment),TRUE,'Making lines');
        WHILE NOT EndOfFile DO BEGIN
          CommentLine."Line Break" := ReadLine;
          GetLine(Comment);
          Comment := DELCHR(Comment, '>');
          "Line No." += 10000;
          INSERT;
        END;

        DeleteTempFile;
      END;
    END;

    [External]
    PROCEDURE InterActLogCommentLine@1100525004(VAR CommentLine1@1210190000 : Record 11072067);
    VAR
      CommentLine@1100529000 : Record 11072067;
    BEGIN
      CommentLine.COPY(CommentLine1);
      CommentLine.SETCURRENTKEY("Entry No.","Line No.");
      WITH CommentLine DO BEGIN
        TextEditorAllowed := TRUE;

        IF NOT TextEditorAllowed THEN
          ERROR(Text000);

        InitProcess();

        IF FINDSET THEN BEGIN
          REPEAT
            WriteSpecialFieldsToFile(Date,0T,Code,Code,'','');
            Write(Comment, "Line Break");
          UNTIL NEXT = 0;
          WriteSpecialFieldsToFile(TODAY,0T,'','','',USERID);  // 28509.n
        END ELSE
          WriteSpecialFieldsToFile(Date,0T,Code,Code,'','');

        TextFile.CLOSE;
        EditTempFile;

        //* Read the temporary file and write the comment lines
        DELETEALL(TRUE);
        "Line No." := 0;
        ResetCurrDateAndCode;
        CurrCmtCode := '';
        CurrCreatedBy := '';

        Set(Filename,MAXSTRLEN(Comment),TRUE,'Making lines');
        WHILE NOT EndOfFile DO BEGIN
          CommentLine."Line Break" := ReadLine;
          GetLine(Comment);
          Comment := DELCHR(Comment, '>');
          IF NOT EvaluateSpecialFields(CurrDate,CurrTime,CurrCode,CurrCmtCode,CurrLanguageCode,CurrCreatedBy,Comment) THEN BEGIN
            "Line No." += 10000;
            Date := CurrDate;
            Code := CurrCode;
            INSERT;
            ResetCurrDateAndCode;
          END;
        END;
        DeleteTempFile;
      END;
    END;

    [External]
    PROCEDURE ImplActivity@1210190012(VAR CommentLine1@1100525000 : Record 11229391);
    VAR
      CommentLine@1100529000 : Record 11229391;
      lvCommentLine@1100525001 : Record 11229391;
    BEGIN
      // Call 19362
      CommentLine.COPY(CommentLine1);
      CommentLine.SETCURRENTKEY("Activity No.","Line No.");
      WITH CommentLine DO BEGIN
        TextEditorAllowed := TRUE;
        IF "Activity No." = '' THEN
          TextEditorAllowed := FALSE;
        IF TextEditorAllowed THEN BEGIN
          lvCommentLine.COPY(CommentLine);
          lvCommentLine.SETCURRENTKEY("Activity No.", "Line No.");  //* Key 1
          IF lvCommentLine.FINDFIRST THEN BEGIN
            IF (lvCommentLine."Activity No." <> "Activity No.") THEN
              TextEditorAllowed := FALSE;
            IF TextEditorAllowed THEN BEGIN
              IF lvCommentLine.FINDLAST THEN BEGIN
                IF (lvCommentLine."Activity No." <> "Activity No.") THEN
                  TextEditorAllowed := FALSE;
              END;
            END;
          END;
        END;
        IF NOT TextEditorAllowed THEN
          ERROR(Text000);

        InitProcess();

        IF FINDSET THEN BEGIN
          REPEAT
            WriteSpecialFieldsToFile(Date,0T,'','','',"Modified By");
            Write(Description, "Line Break");
          UNTIL NEXT = 0;
          WriteSpecialFieldsToFile(TODAY,0T,'','','',USERID);  // 28509.n
        END ELSE
          WriteSpecialFieldsToFile(TODAY,0T,'','','',USERID);

        TextFile.CLOSE;
        EditTempFile;

        //* Read the temporary file and write the comment lines
        DELETEALL(TRUE);
        "Line No." := 0;
        ResetCurrDateAndCode;
        CurrCmtCode := '';
        CurrCreatedBy := '';

        Set(Filename,MAXSTRLEN(Description),TRUE,'Making lines');
        WHILE NOT EndOfFile DO BEGIN
          CommentLine."Line Break" := ReadLine;
          GetLine(Description);
          Description := DELCHR(Description, '>');
          IF NOT EvaluateSpecialFields(CurrDate,CurrTime,CurrCode,CurrCmtCode,CurrLanguageCode,CurrCreatedBy,Description) THEN BEGIN
            "Line No." += 10000;
            Date := CurrDate;
            "Modified By" := CurrCreatedBy;
            "Last Date Modified" := TODAY;
            INSERT;
            ResetCurrDateAndCode;
          END;
        END;

        DeleteTempFile;
      END;
    END;

    [External]
    PROCEDURE ConstructionSpecBidFormText@1100528702(VAR CommentLine1@1210190000 : Record 11125672);
    VAR
      ConstrSpecBidFormRAW@1100529000 : Record 11125672;
      ConstrSpecBidFormRAW2@1100525000 : Record 11125672;
    BEGIN
      ConstrSpecBidFormRAW.COPY(CommentLine1);
      ConstrSpecBidFormRAW.SETCURRENTKEY("Specification No.",Type,"Line No.");
      WITH ConstrSpecBidFormRAW DO BEGIN
        TextEditorAllowed := TRUE;
        IF ConstrSpecBidFormRAW."Specification No." = '' THEN
          TextEditorAllowed := FALSE;
        IF TextEditorAllowed THEN BEGIN
          ConstrSpecBidFormRAW2.COPY(ConstrSpecBidFormRAW);
          ConstrSpecBidFormRAW2.SETCURRENTKEY("Specification No.",Type,"Line No.");  //* Key 1
          IF ConstrSpecBidFormRAW2.FINDFIRST THEN BEGIN
            IF (ConstrSpecBidFormRAW2."Specification No." <> "Specification No.") OR
               (ConstrSpecBidFormRAW2.Type <> Type) THEN
              TextEditorAllowed := FALSE;
            IF TextEditorAllowed THEN BEGIN
              IF ConstrSpecBidFormRAW2.FINDLAST THEN BEGIN
                IF (ConstrSpecBidFormRAW2."Specification No." <> "Specification No.") OR
                   (ConstrSpecBidFormRAW2.Type <> Type) THEN
                  TextEditorAllowed := FALSE;
              END;
            END;
          END;
        END;
        IF NOT TextEditorAllowed THEN
          ERROR(Text000);

        InitProcess();

        IF FINDSET THEN
          REPEAT
            Write(Text, "Line Break");
          UNTIL NEXT = 0;

        TextFile.CLOSE;
        EditTempFile;

        //* Read the temporary file and write the comment lines
        DELETEALL;
        "Line No." := 0;

        Set(Filename, MAXSTRLEN(Text), TRUE, 'Making lines');
        WHILE NOT EndOfFile DO BEGIN
          "Line Break" := ReadLine;
          GetLine(Text);
          Text := DELCHR(Text, '>');
          "Line No." += 10000;
          INSERT;
        END;

        DeleteTempFile;
      END;
    END;

    [External]
    PROCEDURE ServiceUnitPriceLineText@1100525012(CommentLine1@1100525000 : Record 11071957);
    VAR
      ServiceUnitPriceLineText@1100529000 : Record 11071957;
    BEGIN
      ServiceUnitPriceLineText.COPY(CommentLine1);
      ServiceUnitPriceLineText.SETCURRENTKEY("Unit Price Type","Unit Price Code","Index Date",Code,"Line No.");
      WITH ServiceUnitPriceLineText DO BEGIN
        InitProcess();
        IF FINDSET THEN BEGIN
          REPEAT
            WriteSpecialFieldsToFile(Date,"Time Created",Code,'','',"Created by");  //C014534.c
            Write(Comment, "Line Break");
          UNTIL NEXT = 0;
          WriteSpecialFieldsToFile(TODAY,TIME,'','','',USERID);
        END ELSE
          WriteSpecialFieldsToFile(Date,"Time Created",Code,'','',USERID);

        TextFile.CLOSE;
        EditTempFile;

        //* Read the temporary file and write the comment lines
        DELETEALL(TRUE);
        "Line No." := 0;
        ResetCurrDateAndCode;
        CurrCmtCode := '';
        CurrCreatedBy := '';

        Set(Filename,MAXSTRLEN(Comment),TRUE,'Making lines');
        WHILE NOT EndOfFile DO BEGIN
          "Line Break" := ReadLine;
          GetLine(Comment);
          Comment := DELCHR(Comment, '>');

          IF NOT EvaluateSpecialFields(CurrDate,CurrTime,CurrCode,CurrCmtCode,CurrLanguageCode,CurrCreatedBy,Comment) THEN BEGIN
            "Line No." += 10000;
            Date := CurrDate;
            Code := CurrCode;
            "Created by" := CurrCreatedBy;
            "Time Created" := CurrTime;
            INSERT;
            ResetCurrDateAndCode;
          END;
        END;

        DeleteTempFile;
      END;
    END;

    LOCAL PROCEDURE InitProcess@1100485001();
    BEGIN
      UserSetup.GET(USERID);
      UserSetup.TESTFIELD("Text Editor Path");

      CreateTempFile;

      ResetCurrDateAndCode;
      CurrCmtCode := '';
      CurrCreatedBy := '';
      SpecialLineChar := '#';
      LineBreakSkipped := FALSE;
      IF NOT ISNULL(CurrentValues) THEN
        CLEAR(CurrentValues);
      CurrentValues := CurrentValues.Dictionary();
    END;

    LOCAL PROCEDURE CreateTempFile@1210190004();
    BEGIN
      Filename := FileMgt.ServerTempFileName('TXT');

      CLEAR(TextFile);
      TextFile.TEXTMODE := TRUE;
      TextFile.CREATE(Filename, TEXTENCODING::Windows); //#T006571.c
    END;

    LOCAL PROCEDURE EditTempFile@1210190011();
    VAR
      OperatingSystemMgt@1100409000 : Codeunit 11012364;
      ReturnCde@1210190000 : Integer;
      ClientFileName@1100525000 : Text[250];
      TempFileName@1100525001 : Text[250];
    BEGIN
      ClientFileName := FileMgt.DownloadTempFile(Filename);
      FileMgt.CheckIfClientFileExists(UserSetup."Text Editor Path");
      ReturnCde := OperatingSystemMgt.ClientShell(
        STRSUBSTNO('"%1"', UserSetup."Text Editor Path"),
        STRSUBSTNO('"%1"', ClientFileName),
        TRUE, FALSE);
      TempFileName := FileMgt.UploadFileSilent(ClientFileName);
      FILE.ERASE(Filename); // To prevent that RENAME will throw an error.
      FILE.RENAME(TempFileName, Filename);
      FileMgt.DeleteClientFile4PS(ClientFileName, TRUE);
    END;

    LOCAL PROCEDURE DeleteTempFile@1210190009();
    BEGIN
      CLEAR(InputStream);
      FILE.ERASE(Filename);
    END;

    LOCAL PROCEDURE ReadLine@1210190001() LineBreak : Boolean;
    VAR
      Length@1210190000 : Integer;
      TextLn@1100528700 : Text[1024];
      NumbRead@1100528701 : Integer;
      NumbToBeRead@1100528702 : Integer;
    BEGIN
      NumbToBeRead := ROUND(MAXSTRLEN(TextLine2) / 2, 1, '<');

      IF TextLine2 <> '' THEN BEGIN
        IF (STRLEN(TextLine2) < MaxLineLength) AND (NOT EndOfLine) THEN BEGIN
          NumbRead := InputStream.READTEXT(TextLn, NumbToBeRead);
          CurrPos := CurrPos + NumbRead;
          IF NumbRead < NumbToBeRead THEN
            EndOfLine := TRUE;
          TextLine2 := TextLine2 + TextLn;
        END;
        TextLine := TextLine2;
      END ELSE BEGIN
        NumbRead := InputStream.READTEXT(TextLine, NumbToBeRead);
        CurrPos := CurrPos + NumbRead;
        IF NumbRead < NumbToBeRead THEN
          EndOfLine := TRUE;
      END;

      LineBreak := TRUE; // jhoek.240511

      IF STRLEN(TextLine) > MaxLineLength THEN BEGIN
        Length := SplitLength(TextLine);
        IF Length < STRLEN(TextLine) THEN
          LineBreak := FALSE;
        TextLine2 := COPYSTR(TextLine, Length + 1);
        TextLine := COPYSTR(TextLine, 1, Length);
      END ELSE BEGIN
        TextLine2 := '';
        EndOfLine := FALSE;
      END;
    END;

    [External]
    PROCEDURE Write@1100528700(Text@1100528700 : Text[1024];LineBreak@1100528701 : Boolean);
    BEGIN
      CASE LineBreak OF
        FALSE:
          BEGIN
            //TextFile.WRITE(CharSetConversion.Ascii2Ansi(Text) + ' ');
            TextFile.WRITE(Text + ' '); //#T006571.c
            TextFile.SEEK(TextFile.POS - 2);
            LineBreakSkipped := TRUE;
          END;
        TRUE:
          BEGIN
            //TextFile.WRITE(CharSetConversion.Ascii2Ansi(Text));
            TextFile.WRITE(Text); //#T006571.c
            LineBreakSkipped := FALSE;
          END;
      END;
    END;

    LOCAL PROCEDURE Set@1(FileName@1210190000 : Text[250];NewMaxLineLength@1210190001 : Integer;NewShowStatus@1210190002 : Boolean;StatusText@1210190003 : Text[30]);
    BEGIN
      ShowStatus := NewShowStatus;
      MaxLineLength := NewMaxLineLength;

      //TextFile.OPEN(FileName);
      WHILE NOT TextFile.OPEN(FileName, TEXTENCODING::Windows) DO SLEEP(50); //wait until editor has removed lock on file. //#T006571.c

      TextFile.TEXTMODE := TRUE;
      TextFile.CREATEINSTREAM(InputStream);
      CurrPos := 0;
      EndOfLine := FALSE;

      IF ShowStatus THEN BEGIN
        IF StatusText = '' THEN
          StatusText := 'Reading';
        InitWindow(StatusText);
      END;
    END;

    LOCAL PROCEDURE GetLine@5(VAR NewTextLine@1210190000 : Text[1024]);
    BEGIN
      //NewTextLine := CharSetConversion.Ansi2Ascii(TextLine);
      NewTextLine := TextLine; //#T006571.c
      IF ShowStatus THEN
        UpdateWindow(CurrPos / TextFile.LEN)
    END;

    LOCAL PROCEDURE EndOfFile@3() : Boolean;
    BEGIN
      IF (InputStream.EOS) AND (TextLine2 = '') THEN BEGIN
        TextFile.CLOSE;
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE SplitLength@7(Text@1210190000 : Text[1024]) : Integer;
    VAR
      Pos@1210190001 : Integer;
    BEGIN
      Text := Reverse(COPYSTR(Text,1,MaxLineLength));
      Pos := STRPOS(Text,' ');
      IF Pos = 0 THEN
        Pos := STRPOS(Text,';');
      IF Pos = 0 THEN
        Pos := STRPOS(Text,',');
      IF Pos = 0 THEN
        Pos := MaxLineLength
      ELSE
        Pos := MaxLineLength - Pos + 1;
      EXIT(Pos);
    END;

    LOCAL PROCEDURE Reverse@4(Text1@1210190000 : Text[1024]) : Text[1024];
    VAR
      Text2@1210190001 : Text[250];
      Length@1210190002 : Integer;
      i@1210190003 : Integer;
    BEGIN
      Length := STRLEN(Text1);
      Text2 := '';
      FOR i := 1 TO Length DO
        Text2[i] := Text1[Length - i + 1];
      EXIT(Text2);
    END;

    LOCAL PROCEDURE InitWindow@1210190003(Description@1210190000 : Text[250]);
    BEGIN
      OldTime := TIME;
      OldProgress := 0;
      IF STRLEN(Description) < 15 THEN
        Description := PADSTR(Description,15);
      Window.OPEN(Description + ' @1@@@@@@@@@@@@@');
    END;

    LOCAL PROCEDURE UpdateWindow@1210190002(Progress@1210190000 : Decimal);
    VAR
      NewTime@1210190001 : Time;
    BEGIN
      NewTime := TIME;
      IF NewTime < OldTime THEN
        OldTime := NewTime
      ELSE
        IF TIME - OldTime > 1000 THEN BEGIN
          Progress := ROUND(Progress * 100,1);
          IF Progress <> OldProgress THEN BEGIN
            OldProgress := Progress;
            Window.UPDATE(1,Progress * 100);
          END;
          OldTime := TIME;
        END;
    END;

    LOCAL PROCEDURE CloseWindow@1210190000();
    BEGIN
      Window.CLOSE;
    END;

    LOCAL PROCEDURE ResetCurrDateAndCode@1100485013();
    BEGIN
      //**4PS.so; M17195: text editor must not delete data
      //CurrDate := 0D;
      //CurrTime := 0T;
      //CurrCode := '';
      //**4PS.eo; M17195
      //* Do not make 'CurrCmtCode' empty because this should be filled in each record
      //* Do not make 'CurrCreatedBy' empty because this should be filled in each record
    END;

    [External]
    PROCEDURE WriteSpecialFieldsToFile@1100485002(IDate@1100485000 : Date;ITime@1100525000 : Time;ICode@1100485001 : Code[20];ICmtCode@1100485004 : Code[20];ILanguageCode@1100525001 : Code[20];ICreatedBy@1100485005 : Code[50]);
    BEGIN
      IF LineBreakSkipped AND
         ((IDate <> CurrDate) OR
          (ITime <> CurrTime) OR
          (ICode <> CurrCode) OR
          (ICmtCode <> CurrCmtCode) OR
          (ILanguageCode <> CurrLanguageCode) OR  //db, 22-05-15
          (ICreatedBy <> CurrCreatedBy))
      THEN BEGIN
        TextFile.WRITE('');
        LineBreakSkipped := FALSE;
      END;

      IF (IDate <> CurrDate) THEN BEGIN
        TextFile.WRITE(
          SpecialLineChar + GetFieldCaption('DATE') + ':' + FORMAT(IDate, 0, 9));
          CurrDate := IDate;
      END;

      IF (ITime <> CurrTime) THEN BEGIN
        TextFile.WRITE(
          SpecialLineChar + GetFieldCaption('TIME CREATED') + ':' + FORMAT(ITime, 0, 9));
        CurrTime := ITime;
      END;

      IF (ICode <> CurrCode) THEN BEGIN
        TextFile.WRITE(SpecialLineChar + GetFieldCaption('CODE') + ':' + ICode);
        CurrCode := ICode;
      END;

      IF (ICmtCode <> CurrCmtCode) THEN BEGIN
        TextFile.WRITE(SpecialLineChar + GetFieldCaption('COMMENT CODE') + ':' + ICmtCode);
        CurrCmtCode := ICmtCode;
      END;

      IF (ILanguageCode <> CurrLanguageCode) THEN BEGIN  //db, 22-05-15
        TextFile.WRITE(SpecialLineChar + GetFieldCaption('LANGUAGE CODE') + ':' + ILanguageCode);
        CurrLanguageCode := ILanguageCode;
      END;

      IF (ICreatedBy <> CurrCreatedBy) THEN BEGIN
        IF ICreatedBy <> '' THEN
          TextFile.WRITE(SpecialLineChar + GetFieldCaption('CREATED BY') + ':' + ICreatedBy);
        CurrCreatedBy := ICreatedBy;
      END;
    END;

    [External]
    PROCEDURE WriteSpecialFieldsToFileExt@1100485011(IDate@1100485000 : Date;ICode@1100485001 : Code[20];ICreatedBy@1100485005 : Code[50]);
    BEGIN
      IF LineBreakSkipped AND
         ((IDate <> CurrDate) OR
          (ICode <> CurrCode) OR
          (ICreatedBy <> CurrCreatedBy))
      THEN BEGIN
        TextFile.WRITE('');
        LineBreakSkipped := FALSE;
      END;

      IF (IDate <> CurrDate) THEN BEGIN
        IF IDate <> 0D THEN
          TextFile.WRITE(
            SpecialLineChar + GetFieldCaption('DATE') + ':' + FORMAT(IDate, 0, 9));
        CurrDate := IDate;
      END;

      IF (ICode <> CurrCode) THEN BEGIN
        IF ICode <> '' THEN
          TextFile.WRITE(SpecialLineChar + GetFieldCaption('CODE') + ':' + ICode);
        CurrCode := ICode;
      END;

      IF (ICreatedBy <> CurrCreatedBy) THEN BEGIN
        IF ICreatedBy <> '' THEN
          TextFile.WRITE(SpecialLineChar + GetFieldCaption('CREATED BY') + ':' + ICreatedBy);
        CurrCreatedBy := ICreatedBy;
      END;
    END;

    [External]
    PROCEDURE WriteSpecialFieldsToFileAdv@1100409002(IDate@1100485000 : Date;ITime@1100525000 : Time;IStandardCode@1100485004 : Code[20];ILanguageCode@1100528301 : Code[10];ICreatedBy@1100485005 : Code[50];IType@1100409000 : Integer);
    BEGIN
      IF LineBreakSkipped AND
         ((IDate <> CurrDate) OR
          (ITime <> CurrTime) OR
          (IStandardCode <> CurrCmtCode) OR
          (ICreatedBy <> CurrCreatedBy))
      THEN BEGIN
        TextFile.WRITE('');
        LineBreakSkipped := FALSE;
      END;

      IF (IDate <> CurrDate) THEN BEGIN
        TextFile.WRITE(
          SpecialLineChar + GetFieldCaptionAdv('DATE CREATED') + ':' + FORMAT(IDate, 0, 9));
          CurrDate := IDate;
      END;

      IF (ITime <> CurrTime) THEN BEGIN
        IF (ITime <> 0T) THEN
          TextFile.WRITE(
            SpecialLineChar + GetFieldCaptionAdv('TIME CREATED') + ':' + FORMAT(ITime, 0, 9));
        CurrTime := ITime;
      END;

      IF (IStandardCode <> CurrCmtCode) THEN BEGIN
        TextFile.WRITE(SpecialLineChar + GetFieldCaptionAdv('STANDARD TEXT') + ':' + IStandardCode);
        CurrCmtCode := IStandardCode;
      END;

      IF (ICreatedBy <> CurrCreatedBy) THEN BEGIN
        IF ICreatedBy <> '' THEN
          TextFile.WRITE(SpecialLineChar + GetFieldCaptionAdv('CREATED BY') + ':' + ICreatedBy);
        CurrCreatedBy := ICreatedBy;
      END;

      IF (IType <> CurrType) THEN BEGIN
        CASE IType OF
          1:
            TextFile.WRITE(SpecialLineChar + GetFieldCaptionAdv('Type') + ':Internal');
          ELSE
            TextFile.WRITE(SpecialLineChar + GetFieldCaptionAdv('Type') + ':External');
        END;
        CurrType := IType;
      END;

      IF (ILanguageCode <> CurrLanguageCode) THEN BEGIN
        TextFile.WRITE(SpecialLineChar + GetFieldCaptionAdv('LANGUAGE CODE') + ':' + ILanguageCode);
        CurrLanguageCode := ILanguageCode;
      END;
    END;

    [External]
    PROCEDURE EvaluateSpecialFields@1100485009(VAR IODate@1100485000 : Date;VAR IOTime@1100525001 : Time;VAR IOCode@1100485001 : Code[20];VAR IOCmtCode@1100485009 : Code[20];VAR IOLanguageCode@1100525002 : Code[20];VAR IOCreatedBy@1100485008 : Code[50];IComment@1100485005 : Text[250]) : Boolean;
    VAR
      lvDate@1100485006 : Date;
      lvTime@1100525000 : Time;
      lvMaxFldLen@1100485010 : Integer;
      lvFldCaption@1100485002 : Text[30];
      lvText@1100485007 : Text[100];
    BEGIN
      lvFldCaption := GetFieldCaption('DATE');
      IF COPYSTR(IComment,1,(STRLEN(lvFldCaption)+2)) = (SpecialLineChar + lvFldCaption + ':') THEN BEGIN
        lvText := COPYSTR(IComment, (STRLEN(lvFldCaption)+3), MAXSTRLEN(lvText));
        lvText := DELCHR(lvText, '<>', ' ');
        IF EVALUATE(lvDate, COPYSTR(lvText, 1, 10), 9) THEN
          IODate := lvDate;
        EXIT(TRUE);
      END;

      lvFldCaption := GetFieldCaption('TIME CREATED');
      IF COPYSTR(IComment,1,(STRLEN(lvFldCaption)+2)) = (SpecialLineChar + lvFldCaption + ':') THEN BEGIN
        lvText := COPYSTR(IComment, (STRLEN(lvFldCaption)+3), MAXSTRLEN(lvText));
        lvText := DELCHR(lvText, '<>', ' ');
      //IOTime := TextToTime(COPYSTR(lvText, 1, 10));
        IF EVALUATE(lvTime, COPYSTR(lvText, 1, 10), 9) THEN
          IOTime := lvTime;
        EXIT(TRUE);
      END;

      lvFldCaption := GetFieldCaption('CODE');
      lvMaxFldLen := MAXSTRLEN(SpecialFieldCaptionRec.Code);
      IF COPYSTR(IComment,1,(STRLEN(lvFldCaption)+2)) = (SpecialLineChar + lvFldCaption + ':') THEN BEGIN
        lvText := COPYSTR(IComment, (STRLEN(lvFldCaption)+3), MAXSTRLEN(lvText));
        lvText := DELCHR(lvText, '<>', ' ');
        IOCode := COPYSTR(lvText, 1, lvMaxFldLen);
        EXIT(TRUE);
      END;

      lvFldCaption := GetFieldCaption('COMMENT CODE');
      lvMaxFldLen := MAXSTRLEN(SpecialFieldCaptionRec."Comment Code");
      IF COPYSTR(IComment,1,(STRLEN(lvFldCaption)+2)) = (SpecialLineChar + lvFldCaption + ':') THEN BEGIN
        lvText := COPYSTR(IComment, (STRLEN(lvFldCaption)+3), MAXSTRLEN(lvText));
        lvText := DELCHR(lvText, '<>', ' ');
        IOCmtCode := COPYSTR(lvText, 1, lvMaxFldLen);
        EXIT(TRUE);
      END;

      lvFldCaption := GetFieldCaption('LANGUAGE CODE');  //db, 22-05-15
      lvMaxFldLen := MAXSTRLEN(SpecialFieldCaptionRec."Language Code");
      IF COPYSTR(IComment,1,(STRLEN(lvFldCaption)+2)) = (SpecialLineChar + lvFldCaption + ':') THEN BEGIN
        lvText := COPYSTR(IComment, (STRLEN(lvFldCaption)+3), MAXSTRLEN(lvText));
        lvText := DELCHR(lvText, '<>', ' ');
        IOLanguageCode := COPYSTR(lvText, 1, lvMaxFldLen);
        EXIT(TRUE);
      END;

      lvFldCaption := GetFieldCaption('CREATED BY');
      lvMaxFldLen := MAXSTRLEN(SpecialFieldCaptionRec."Created by");
      IF COPYSTR(IComment,1,(STRLEN(lvFldCaption)+2)) = (SpecialLineChar + lvFldCaption + ':') THEN BEGIN
        lvText := COPYSTR(IComment, (STRLEN(lvFldCaption)+3), MAXSTRLEN(lvText));
        lvText := DELCHR(lvText, '<>', ' ');
        IOCreatedBy := COPYSTR(lvText, 1, lvMaxFldLen);
        EXIT(TRUE);
      END;

      IF IOCreatedBy = '' THEN IOCreatedBy := USERID;
      EXIT(FALSE);
    END;

    [External]
    PROCEDURE EvaluateSpecialFieldsAdv@1100409004(VAR IODate@1100485000 : Date;VAR IOTime@1100525001 : Time;VAR IOStandardCode@1100485009 : Code[20];VAR IOLanguageCode@1100528300 : Code[10];VAR IOCreatedBy@1100485008 : Code[50];VAR IOType@1100409000 : Integer;IText@1100485005 : Text[250]) : Boolean;
    VAR
      lvDate@1100485006 : Date;
      lvTime@1100525000 : Time;
      lvMaxFldLen@1100485010 : Integer;
      lvFldCaption@1100485002 : Text[30];
      lvText@1100485007 : Text[100];
    BEGIN
      lvFldCaption := GetFieldCaptionAdv('DATE CREATED');
      IF COPYSTR(IText,1,(STRLEN(lvFldCaption)+2)) = (SpecialLineChar + lvFldCaption + ':') THEN BEGIN
        lvText := COPYSTR(IText, (STRLEN(lvFldCaption)+3), MAXSTRLEN(lvText));
        lvText := DELCHR(lvText, '<>', ' ');
        IF EVALUATE(lvDate, COPYSTR(lvText, 1, 10), 9) THEN
          IODate := lvDate;
        EXIT(TRUE);
      END;

      lvFldCaption := GetFieldCaptionAdv('TIME CREATED');
      IF COPYSTR(IText,1,(STRLEN(lvFldCaption)+2)) = (SpecialLineChar + lvFldCaption + ':') THEN BEGIN
        lvText := COPYSTR(IText, (STRLEN(lvFldCaption)+3), MAXSTRLEN(lvText));
        lvText := DELCHR(lvText, '<>', ' ');
        IF EVALUATE(lvTime, COPYSTR(lvText, 1, 10), 9) THEN
          IOTime := lvTime;
        EXIT(TRUE);
      END;

      lvFldCaption := GetFieldCaptionAdv('STANDARD TEXT');
      lvMaxFldLen := MAXSTRLEN(SpecialFieldCaptionAdv."Standard Text");
      IF COPYSTR(IText,1,(STRLEN(lvFldCaption)+2)) = (SpecialLineChar + lvFldCaption + ':') THEN BEGIN
        lvText := COPYSTR(IText, (STRLEN(lvFldCaption)+3), MAXSTRLEN(lvText));
        lvText := DELCHR(lvText, '<>', ' ');
        IOStandardCode := COPYSTR(lvText, 1, lvMaxFldLen);
        EXIT(TRUE);
      END;

      lvFldCaption := GetFieldCaptionAdv('LANGUAGE CODE');
      lvMaxFldLen := MAXSTRLEN(SpecialFieldCaptionRec."Language Code");
      IF COPYSTR(IText,1,(STRLEN(lvFldCaption)+2)) = (SpecialLineChar + lvFldCaption + ':') THEN BEGIN
        lvText := COPYSTR(IText, (STRLEN(lvFldCaption)+3), MAXSTRLEN(lvText));
        lvText := DELCHR(lvText, '<>', ' ');
        IOLanguageCode := COPYSTR(lvText, 1, lvMaxFldLen);
        EXIT(TRUE);
      END;

      lvFldCaption := GetFieldCaptionAdv('CREATED BY');
      lvMaxFldLen := MAXSTRLEN(SpecialFieldCaptionAdv."Created by");
      IF COPYSTR(IText,1,(STRLEN(lvFldCaption)+2)) = (SpecialLineChar + lvFldCaption + ':') THEN BEGIN
        lvText := COPYSTR(IText, (STRLEN(lvFldCaption)+3), MAXSTRLEN(lvText));
        lvText := DELCHR(lvText, '<>', ' ');
        IOCreatedBy := COPYSTR(lvText, 1, lvMaxFldLen);
        EXIT(TRUE);
      END;

      lvFldCaption := GetFieldCaptionAdv('TYPE');
      IF COPYSTR(IText,1,(STRLEN(lvFldCaption)+2)) = (SpecialLineChar + lvFldCaption + ':') THEN BEGIN
        lvText := COPYSTR(IText, (STRLEN(lvFldCaption)+3), MAXSTRLEN(lvText));
        CASE lvText OF
          'Internal':
            IOType := 1;
          ELSE
            IOType := 0;
        END;
        EXIT(TRUE);
      END;

      IF IOCreatedBy = '' THEN IOCreatedBy := USERID;
      EXIT(FALSE);
    END;

    [External]
    PROCEDURE GetFieldCaption@1100485010(IFieldName@1100485000 : Code[30]) : Text[30];
    VAR
      lvFldCaption@1100485001 : Text[30];
    BEGIN
      CASE IFieldName OF
        'DATE':
          lvFldCaption := SpecialFieldCaptionRec.FIELDCAPTION(Date);
        'CODE':
          lvFldCaption := SpecialFieldCaptionRec.FIELDCAPTION(Code);
        'COMMENT CODE':
          lvFldCaption := SpecialFieldCaptionRec.FIELDCAPTION("Comment Code");
        'LANGUAGE CODE':
          lvFldCaption := SpecialFieldCaptionRec.FIELDCAPTION("Language Code");  //db, 22-05-15
        'CREATED BY':
          lvFldCaption := SpecialFieldCaptionRec.FIELDCAPTION("Created by");
        'TIME CREATED':
          lvFldCaption := SpecialFieldCaptionRec.FIELDCAPTION("Time Created");
      END;

      lvFldCaption := DELCHR(lvFldCaption, '<>', ' ');     //* Space in name goes wrong when testing. At Ansi->ASCII something happens with
      lvFldCaption := CONVERTSTR(lvFldCaption, ' ', '-');  //* space (is another character, but it still looks like a space).
      EXIT(lvFldCaption);
    END;

    [External]
    PROCEDURE GetFieldCaptionAdv@1100409005(IFieldName@1100485000 : Code[30]) : Text[30];
    VAR
      lvFldCaption@1100485001 : Text[30];
    BEGIN
      CASE IFieldName OF
        'DATE CREATED':
          lvFldCaption := SpecialFieldCaptionAdv.FIELDCAPTION("Date Created");
        'CODE':
          lvFldCaption := SpecialFieldCaptionAdv.FIELDCAPTION(RecId);
        'COMMENT CODE':
          lvFldCaption := SpecialFieldCaptionAdv.FIELDCAPTION("Standard Text");
        'LANGUAGE CODE':
          lvFldCaption := SpecialFieldCaptionRec.FIELDCAPTION("Language Code");
        'CREATED BY':
          lvFldCaption := SpecialFieldCaptionAdv.FIELDCAPTION("Created by");
        'TIME CREATED':
          lvFldCaption := SpecialFieldCaptionAdv.FIELDCAPTION("Time Created");
        'TYPE':
          lvFldCaption := SpecialFieldCaptionAdv.FIELDCAPTION(Type);
      END;

      lvFldCaption := DELCHR(lvFldCaption, '<>', ' ');     //* Space in name goes wrong when testing. At Ansi->ASCII something happens with
      lvFldCaption := CONVERTSTR(lvFldCaption, ' ', '-');  //* space (is another character, but it still looks like a space).
      EXIT(lvFldCaption);
    END;

    PROCEDURE TextToTime@19(VarText@1000 : Text[8]) : Time;
    VAR
      VarTime@1001 : Time;
      BaseVarTime@1002 : Time;
      TimeSeparator@1003 : Text[1];
    BEGIN
      BaseVarTime := 111111T;
      TimeSeparator := COPYSTR(FORMAT(BaseVarTime),3,1);
      EVALUATE(VarTime,CONVERTSTR(VarText,':',TimeSeparator));
      EXIT(VarTime);
    END;

    [External]
    PROCEDURE SalesInvoiceTextLineExt@1100525002(VAR CommentLine1@1210190000 : Record 11071878;iReadOnly@1100485000 : Boolean);
    VAR
      SalesInvoiceTextLineExt@1100529000 : Record 11071878;
      lvSalesInvoiceTextLineExt@1100525000 : Record 11071878;
    BEGIN
      //copy of function CommentLine
      SalesInvoiceTextLineExt.COPY(CommentLine1);
      WITH SalesInvoiceTextLineExt DO BEGIN
        TextEditorAllowed := TRUE;
        IF ("Field 1" + "Field 2" + "Field 3") = '' THEN
          TextEditorAllowed := FALSE;
        IF TextEditorAllowed THEN BEGIN
          lvSalesInvoiceTextLineExt.COPY(SalesInvoiceTextLineExt);
          lvSalesInvoiceTextLineExt.SETCURRENTKEY(
            "Table Name", "Field 1", "Field 2", "Field 3", "Invoice Type", "Line No.");  //* Key 1
          IF lvSalesInvoiceTextLineExt.FINDFIRST THEN BEGIN
            IF (lvSalesInvoiceTextLineExt."Table Name" <> "Table Name") OR
               (lvSalesInvoiceTextLineExt."Field 1" <> "Field 1") OR
               (lvSalesInvoiceTextLineExt."Field 2" <> "Field 2") OR
               (lvSalesInvoiceTextLineExt."Field 3" <> "Field 3") OR
               (lvSalesInvoiceTextLineExt."Invoice Type" <> "Invoice Type")
            THEN
              TextEditorAllowed := FALSE;

            IF TextEditorAllowed THEN BEGIN
              IF lvSalesInvoiceTextLineExt.FINDLAST THEN BEGIN
                IF (lvSalesInvoiceTextLineExt."Table Name" <> "Table Name") OR
                   (lvSalesInvoiceTextLineExt."Field 1" <> "Field 1") OR
                   (lvSalesInvoiceTextLineExt."Field 2" <> "Field 2") OR
                   (lvSalesInvoiceTextLineExt."Field 3" <> "Field 3") OR
                   (lvSalesInvoiceTextLineExt."Invoice Type" <> "Invoice Type")
                THEN
                  TextEditorAllowed := FALSE;
              END;
            END;
          END;
        END;
        IF NOT TextEditorAllowed THEN
          ERROR(Text000);

        InitProcess();

        IF FINDSET THEN BEGIN
          REPEAT
            Write(Text, "Line Break");
          UNTIL NEXT = 0;
        END;

        TextFile.CLOSE;
        EditTempFile;

        IF NOT iReadOnly THEN BEGIN
          //* Read the temporary file and write the text lines
          DELETEALL(TRUE);
          "Line No." := 0;

          Set(Filename,50,TRUE,'Making lines');
          WHILE NOT EndOfFile DO BEGIN
            SalesInvoiceTextLineExt."Line Break" := ReadLine;
            GetLine(Text);
            Text := DELCHR(Text, '>');
            "Line No." += 10000;
            Date := TODAY;
            "Created by" := USERID;
            INSERT;
          END;
        END;

        DeleteTempFile;
      END;
    END;

    [External]
    PROCEDURE DocumentUpdateText@1100525013(VAR CommentLine1@1100525000 : Record 11229803);
    VAR
      DocumentUpdateText@1100529000 : Record 11229803;
      lvDocumentUpdateText@1100525001 : Record 11229803;
    BEGIN
      //Copy of CommentLine
      DocumentUpdateText.COPY(CommentLine1);
      WITH DocumentUpdateText DO BEGIN
        TextEditorAllowed := TRUE;
        IF "Seq. No." = 0 THEN
          TextEditorAllowed := FALSE;
        IF TextEditorAllowed THEN BEGIN
          lvDocumentUpdateText.COPY(DocumentUpdateText);
          DocumentUpdateText.SETCURRENTKEY("Project No.", "Seq. No."); //Key1
          IF lvDocumentUpdateText.FINDFIRST THEN BEGIN
            IF (lvDocumentUpdateText."Project No." <> "Project No.") THEN
              TextEditorAllowed := FALSE;
            IF TextEditorAllowed THEN BEGIN
              IF lvDocumentUpdateText.FINDLAST THEN BEGIN
                IF (lvDocumentUpdateText."Project No." <> "Project No.") THEN
                  TextEditorAllowed := FALSE;
              END;
            END;
          END;
        END;
        IF NOT TextEditorAllowed THEN
          ERROR(Text000);

        InitProcess();

        IF FINDSET THEN BEGIN
          REPEAT
            WriteSpecialFieldsToFile(Date, "Time Created", '', Code, '', "Created by");
            Write(Comment, "Line Break");
          UNTIL NEXT = 0;
          WriteSpecialFieldsToFile(TODAY,TIME,'','','',USERID);  // 28509.n
        END ELSE
          WriteSpecialFieldsToFile(Date, "Time Created", '', Code, '', USERID);

        TextFile.CLOSE;
        EditTempFile;

        //* Read the temporary file and write the comment lines
        DELETEALL(TRUE);
        "Line No." := 0;
        ResetCurrDateAndCode;
        CurrCmtCode := '';
        CurrCreatedBy := '';

        Set(Filename,MAXSTRLEN(Comment),TRUE,'Making lines');
        WHILE NOT EndOfFile DO BEGIN
          "Line Break" := ReadLine;
          GetLine(Comment);
          Comment := DELCHR(Comment, '>');
          IF NOT EvaluateSpecialFields(CurrDate,CurrTime,CurrCode,CurrCmtCode,CurrLanguageCode,CurrCreatedBy,Comment) THEN BEGIN
            "Line No." += 10000;
            Date := CurrDate;
            Code := CurrCode;
            "Created by" := CurrCreatedBy;
            "Time Created" := CurrTime;
            INSERT;
            ResetCurrDateAndCode;
          END;
        END;
        DeleteTempFile;
      END;
    END;

    [External]
    PROCEDURE BreakDescription@1000000006(Description@1000000000 : Text[1024];Length@1000000004 : Integer;WordWrap@1000000002 : Boolean;VAR aDescription@1000000001 : ARRAY [10] OF Text[250]) : Integer;
    VAR
      descid@1000000008 : Integer;
      aWords@1000000009 : ARRAY [250] OF Text[255];
      word@1000000003 : Text[255];
      WordCount@1000000005 : Integer;
      i@1000000006 : Integer;
      p@1000000007 : Integer;
    BEGIN
      FOR i := 1 TO ARRAYLEN(aDescription) DO
        aDescription[i] := '';

      // divide line in words
      word := '';
      WordCount := 0;
      FOR i := 1 TO STRLEN(Description) DO
      BEGIN
        IF (Description[i] <> ' ') AND (STRLEN(word) < Length) THEN
        BEGIN
          word += FORMAT(Description[i]);
        END
        ELSE
        BEGIN
          WordCount += 1;
          aWords[WordCount] := word;
          word := '';
        END;
      END;
      IF (word <> '') THEN
      BEGIN
        WordCount += 1;
        aWords[WordCount] := word;
      END;

      descid := 1;
      FOR i := 1 TO WordCount DO
      BEGIN
        word := aWords[i];
        IF ((aDescription[descid] = '') OR (STRLEN(aDescription[descid] + ' ' + word) < Length)) THEN
        BEGIN
          IF (aDescription[descid] <> '') THEN aDescription[descid] += ' ';
          aDescription[descid] += word;
        END
        ELSE
        BEGIN
          descid += 1;
          IF descid > 10 THEN
            EXIT(10);
          aDescription[descid] := word;
        END;

        IF (STRLEN(aDescription[descid]) > Length) THEN
        BEGIN
          p := 1;
          word := aDescription[descid];
          aDescription[descid] := COPYSTR(word, p, Length);
          p += Length;

          WHILE (p < STRLEN(word)) DO
          BEGIN
            descid += 1;
            aDescription[descid] := COPYSTR(word, p, Length);
            p += Length;
          END;
        END;
      END;
      EXIT(descid);
    END;

    [External]
    PROCEDURE ProjectElementText@1100528602(VAR CommentLine1@1100528600 : Record 11229796);
    VAR
      OProjectElementText@1100529000 : Record 11229796;
      ProjectElementText@1100528601 : Record 11229796;
      RecRef@1100528700 : RecordRef;
      FldRef@1100528701 : FieldRef;
      Res@1100528702 : Boolean;
      LineNo@1100528704 : Integer;
    BEGIN
      OProjectElementText.COPY(CommentLine1);
      WITH OProjectElementText DO BEGIN
        TextEditorAllowed := TRUE;
        IF TextEditorAllowed THEN BEGIN
          ProjectElementText.COPY(OProjectElementText);
          IF ProjectElementText.FINDFIRST THEN BEGIN
            IF (ProjectElementText."Project No." <> "Project No.") OR (ProjectElementText.Element <> Element) THEN
              TextEditorAllowed := FALSE;
            IF TextEditorAllowed THEN BEGIN
              IF ProjectElementText.FINDLAST THEN BEGIN
                IF (ProjectElementText."Project No." <> "Project No.") OR (ProjectElementText.Element <> Element) THEN
                  TextEditorAllowed := FALSE;
              END;
            END;
          END;
        END;
        IF NOT TextEditorAllowed THEN
          ERROR(Text000);

        InitProcess();

        IF FINDSET THEN BEGIN
          REPEAT
            RecRef.GETTABLE(OProjectElementText);
            WriteSpecialFieldToFile(RecRef.FIELD(FIELDNO(Date)));
            WriteSpecialFieldToFile(RecRef.FIELD(FIELDNO("Time Created")));
            WriteSpecialFieldToFile(RecRef.FIELD(FIELDNO(Code)));
            WriteSpecialFieldToFile(RecRef.FIELD(FIELDNO("Created by")));
            WriteSpecialFieldToFile(RecRef.FIELD(FIELDNO("Created by Resource No.")));
            WriteSpecialFieldToFile(RecRef.FIELD(FIELDNO("Active in FSA")));
            Write(Comment, "Line Break");
          UNTIL NEXT = 0;
          WriteSpecialValueToFile(RecRef.FIELD(FIELDNO(Date)), FORMAT(TODAY, 0, 9));
          WriteSpecialValueToFile(RecRef.FIELD(FIELDNO("Time Created")), FORMAT(TIME, 0, 9));
          WriteSpecialValueToFile(RecRef.FIELD(FIELDNO(Code)), '');
          WriteSpecialValueToFile(RecRef.FIELD(FIELDNO("Created by")), USERID);
          WriteSpecialValueToFile(RecRef.FIELD(FIELDNO("Created by Resource No.")), '');
          WriteSpecialValueToFile(RecRef.FIELD(FIELDNO("Active in FSA")), FORMAT(FALSE));
        END ELSE BEGIN
          RecRef.GETTABLE(OProjectElementText);
          WriteSpecialFieldToFile(RecRef.FIELD(FIELDNO(Date)));
          WriteSpecialFieldToFile(RecRef.FIELD(FIELDNO("Time Created")));
          WriteSpecialFieldToFile(RecRef.FIELD(FIELDNO(Code)));
          WriteSpecialValueToFile(RecRef.FIELD(FIELDNO("Created by")), USERID);
          WriteSpecialFieldToFile(RecRef.FIELD(FIELDNO("Created by Resource No.")));
          WriteSpecialFieldToFile(RecRef.FIELD(FIELDNO("Active in FSA")));
        END;

        TextFile.CLOSE;
        EditTempFile;

        //* Read the temporary file and write the comment lines
        DELETEALL(TRUE);
        LineNo := 0;

        Set(Filename,MAXSTRLEN(Comment),TRUE,'Making lines');
        WHILE NOT EndOfFile DO BEGIN
          "Line Break" := ReadLine;
          GetLine(Comment);
          Comment := DELCHR(Comment, '>');

          RecRef.GETTABLE(OProjectElementText);
          Res := TrySetCurrentValue(RecRef.FIELD(FIELDNO(Date)), Comment);
          IF NOT Res THEN
            Res := TrySetCurrentValue(RecRef.FIELD(FIELDNO("Time Created")), Comment);
          IF NOT Res THEN
            Res := TrySetCurrentValue(RecRef.FIELD(FIELDNO(Code)), Comment);
          IF NOT Res THEN
            Res := TrySetCurrentValue(RecRef.FIELD(FIELDNO("Created by")), Comment);
          IF NOT Res THEN
            Res := TrySetCurrentValue(RecRef.FIELD(FIELDNO("Created by Resource No.")), Comment);
          IF NOT Res THEN
            Res := TrySetCurrentValue(RecRef.FIELD(FIELDNO("Active in FSA")), Comment);

          IF NOT Res THEN BEGIN
            LineNo += 10000;
            "Line No." := LineNo;
            RecRef.GETTABLE(OProjectElementText);
            FldRef := RecRef.FIELD(FIELDNO(Date));
            TryGetCurrentValue(FldRef);
            FldRef := RecRef.FIELD(FIELDNO("Time Created"));
            TryGetCurrentValue(FldRef);
            FldRef := RecRef.FIELD(FIELDNO(Code));
            TryGetCurrentValue(FldRef);
            FldRef := RecRef.FIELD(FIELDNO("Created by"));
            TryGetCurrentValue(FldRef);
            FldRef := RecRef.FIELD(FIELDNO("Created by Resource No."));
            TryGetCurrentValue(FldRef);
            FldRef := RecRef.FIELD(FIELDNO("Active in FSA"));
            TryGetCurrentValue(FldRef);
            RecRef.SETTABLE(OProjectElementText);
            INSERT;
          END;
        END;

        DeleteTempFile;
      END;
    END;

    [External]
    PROCEDURE HourPortalSetupText@1100409001(VAR CommentLine1@1210190000 : Record 11020455);
    VAR
      HourPortalText@1100529000 : Record 11020455;
      lvHourPortalText@1100485000 : Record 11020455;
    BEGIN
      HourPortalText.COPY(CommentLine1);
      WITH HourPortalText DO BEGIN
        TextEditorAllowed := TRUE;

        IF TextEditorAllowed THEN BEGIN
          lvHourPortalText.COPY(HourPortalText);
          lvHourPortalText.SETCURRENTKEY(Table, Code, "Table Line No.", "Line No.");  //* Key 1
          IF lvHourPortalText.FINDFIRST THEN BEGIN
            IF (lvHourPortalText.Table <> Table) OR (lvHourPortalText.Code <> Code) THEN
              TextEditorAllowed := FALSE;
            IF TextEditorAllowed THEN BEGIN
              IF lvHourPortalText.FINDLAST THEN BEGIN
                IF (lvHourPortalText.Table <> Table) OR (lvHourPortalText.Code <> Code) THEN
                  TextEditorAllowed := FALSE;
              END;
            END;
          END;
        END;
        IF NOT TextEditorAllowed THEN
          ERROR(Text000);

        InitProcess();

        IF FINDSET THEN BEGIN
          REPEAT
            WriteSpecialFieldsToFile(Date,"Time Created",'','','',"Created by");
            Write(Text, "Line Break");
          UNTIL NEXT = 0;
          WriteSpecialFieldsToFile(TODAY,TIME,'','','',USERID);  // 28509.n
        END ELSE
        WriteSpecialFieldsToFile(TODAY,TIME,'','','',USERID);

        TextFile.CLOSE;
        EditTempFile;

        //* Read the temporary file and write the comment lines
        DELETEALL;
        "Line No." := 0;
        ResetCurrDateAndCode;
        CurrCmtCode := '';
        CurrCreatedBy := '';

        Set(Filename,MAXSTRLEN(Text),TRUE,'Making lines');
        WHILE NOT EndOfFile DO BEGIN
          "Line Break" := ReadLine;
          GetLine(Text);
          Text := DELCHR(Text, '>');

          IF NOT EvaluateSpecialFields(CurrDate,CurrTime,CurrCode,CurrCmtCode,CurrLanguageCode,CurrCreatedBy,Text) THEN BEGIN
            "Line No." += 10000;
            Date := CurrDate;
            "Created by" := CurrCreatedBy;
            "Time Created" := CurrTime;
            INSERT;
            ResetCurrDateAndCode;
          END;
        END;

        DeleteTempFile;
      END;
    END;

    [External]
    PROCEDURE GeneralAdvancedText@1100409000(VAR CommentLine1@1100409000 : Record 11072231);
    VAR
      OGeneralAdvancedText@1100529000 : Record 11072231;
      GeneralAdvancedText@1100525000 : Record 11072231;
    BEGIN
      OGeneralAdvancedText.COPY(CommentLine1);
      IF (OGeneralAdvancedText."Table No." <= 0) THEN
        EXIT;

      TextEditorAllowed := TRUE;
      GeneralAdvancedText.COPY(OGeneralAdvancedText);
      IF (GeneralAdvancedText.FINDFIRST) THEN BEGIN
        IF (GeneralAdvancedText."Table No." <> OGeneralAdvancedText."Table No.") OR
           (GeneralAdvancedText."Field No." <> OGeneralAdvancedText."Field No.")
        THEN
          TextEditorAllowed := FALSE;
      END;
      IF GeneralAdvancedText.FINDLAST THEN BEGIN
        IF (GeneralAdvancedText."Table No." <> OGeneralAdvancedText."Table No.") OR
           (GeneralAdvancedText."Field No." <> OGeneralAdvancedText."Field No.")
        THEN
          TextEditorAllowed := FALSE;
      END;
      IF (NOT TextEditorAllowed) THEN
        ERROR(Text000);

      InitProcess();

      IF (OGeneralAdvancedText.FINDSET) THEN BEGIN
        REPEAT
          WriteSpecialFieldsToFileAdv(OGeneralAdvancedText."Date Created", OGeneralAdvancedText."Time Created", OGeneralAdvancedText."Standard Text",
            '', OGeneralAdvancedText."Created by", OGeneralAdvancedText.Type);
          Write(OGeneralAdvancedText.Text, OGeneralAdvancedText."Line Break");
        UNTIL (OGeneralAdvancedText.NEXT = 0);
        WriteSpecialFieldsToFileAdv(TODAY, TIME, '', '', USERID, 0);
      END ELSE
        WriteSpecialFieldsToFileAdv(OGeneralAdvancedText."Date Created", OGeneralAdvancedText."Time Created", OGeneralAdvancedText."Standard Text",
          '', USERID, 0);

      TextFile.CLOSE;
      EditTempFile;

      //* Read the temporary file and write the comment lines
      OGeneralAdvancedText.DELETEALL(TRUE);
      OGeneralAdvancedText."Line No." := 0;
      ResetCurrDateAndCode;
      CurrCmtCode := '';
      CurrCreatedBy := '';

      Set(Filename, MAXSTRLEN(OGeneralAdvancedText.Text), TRUE, 'Making lines');
      WHILE (NOT EndOfFile) DO BEGIN
        OGeneralAdvancedText."Line Break" := ReadLine;
        GetLine(OGeneralAdvancedText.Text);
        OGeneralAdvancedText.Text := DELCHR(OGeneralAdvancedText.Text, '>');

        IF (NOT EvaluateSpecialFieldsAdv(CurrDate, CurrTime, CurrCmtCode, CurrLanguageCode, CurrCreatedBy, CurrType, OGeneralAdvancedText.Text)) THEN BEGIN
          OGeneralAdvancedText."Line No." += 10000;
          OGeneralAdvancedText."Date Created" := CurrDate;
          OGeneralAdvancedText."Standard Text" := CurrCode;
          OGeneralAdvancedText."Created by" := CurrCreatedBy;
          OGeneralAdvancedText.Type := CurrType;
          OGeneralAdvancedText.INSERT;
          OGeneralAdvancedText."Time Created" := CurrTime;
          OGeneralAdvancedText.MODIFY(TRUE); //Trigger must be fired
          ResetCurrDateAndCode;
        END;
      END;

      DeleteTempFile;
    END;

    PROCEDURE HourAccountingCommentLine@1100294000(VAR HourAccountingCommentLine@1100525000 : Record 11128234);
    VAR
      HourAccountingCommentLine2@1100525001 : Record 11128234;
    BEGIN
      // SESB.I039 ASH 05.07.2013 >>
      WITH HourAccountingCommentLine DO BEGIN
        TextEditorAllowed := TRUE;
        IF FORMAT("Record ID") = '' THEN
          TextEditorAllowed := FALSE;
        IF TextEditorAllowed THEN BEGIN
          HourAccountingCommentLine2.COPY(HourAccountingCommentLine);
          HourAccountingCommentLine2.SETCURRENTKEY("Table Name", "Record ID", "Line No.");
          IF HourAccountingCommentLine2.FINDFIRST THEN BEGIN
            IF FORMAT(HourAccountingCommentLine2."Record ID") <> FORMAT("Record ID") THEN
              TextEditorAllowed := FALSE;
            IF TextEditorAllowed THEN BEGIN
              IF HourAccountingCommentLine2.FINDLAST THEN BEGIN
                IF FORMAT(HourAccountingCommentLine2."Record ID") <> FORMAT("Record ID") THEN
                  TextEditorAllowed := FALSE;
              END;
            END;
          END;
        END;
        IF NOT TextEditorAllowed THEN
          ERROR(Text000);

        InitProcess();

        IF FINDSET THEN BEGIN
          REPEAT
            WriteSpecialFieldsToFile(Date,Time,Code,"Comment Code",'',"Created By");
            Write(Comment, "Line Break");
          UNTIL NEXT = 0;
          WriteSpecialFieldsToFile(TODAY,Time,'','','',USERID);
        END ELSE
          WriteSpecialFieldsToFile(Date,Time,Code,"Comment Code",'',USERID);

        TextFile.CLOSE;
        EditTempFile;

        DELETEALL(TRUE);
        "Line No." := 0;
        ResetCurrDateAndCode;
        CurrCmtCode := '';
        CurrCreatedBy := '';

        Set(Filename,MAXSTRLEN(Comment),TRUE,'Making lines');
        WHILE NOT EndOfFile DO BEGIN
          "Line Break" := ReadLine;
          GetLine(Comment);
          Comment := DELCHR(Comment, '>');
          IF NOT EvaluateSpecialFields(CurrDate,CurrTime,CurrCode,CurrCmtCode,CurrLanguageCode,CurrCreatedBy,Comment) THEN BEGIN
            "Line No." += 10000;
            Date := CurrDate;
            Code := CurrCode;
            "Comment Code" := CurrCmtCode;
            "Created By" := CurrCreatedBy;
            Time := CurrTime;
            INSERT;
            ResetCurrDateAndCode;
          END;
        END;

        DeleteTempFile;
      END;
      // SESB.I039 ASH 05.07.2013 <<
    END;

    [External]
    PROCEDURE EditBLOBFieldText@1100528300(VAR TempBlob@1100528308 : TEMPORARY Record 99008535;Extension@1100528305 : Text[10]);
    VAR
      UserSetup@1100528300 : Record 91;
      FileManagement@1100528304 : Codeunit 419;
      OperatingSystemMgt@1100528307 : Codeunit 11012364;
      ClientFolderName@1100528302 : Text;
      ClientFileName@1100528303 : Text;
      RetVal@1100528306 : Integer;
    BEGIN
      UserSetup.GET(USERID);
      UserSetup.TESTFIELD("Text Editor Path");

      ClientFolderName := FileManagement.ClientTempFolderName + '\' + FORMAT(DELCHR(CREATEGUID, '<=>', '{}'));
      FileManagement.CreateClientDirectory(ClientFolderName);
      ClientFileName := ClientFolderName + '\' + FORMAT(DELCHR(CREATEGUID, '<=>', '{}')) + '.' + Extension;

      IF (TempBlob.Blob.HASVALUE) THEN
        FileManagement.BLOBExport4PS(TempBlob, ClientFileName, FALSE, TRUE)
      ELSE
        FileManagement.AppendTextLineToClientFile(ClientFileName, ' ');

      RetVal := OperatingSystemMgt.ClientShell(STRSUBSTNO('"%1"', UserSetup."Text Editor Path"),
        STRSUBSTNO('"%1"', ClientFileName), TRUE, FALSE);
      IF (RetVal < 0) THEN
        ERROR(Text002);

      FileManagement.BLOBImport4PS(TempBlob, ClientFileName, FALSE);
    END;

    [External]
    PROCEDURE DPTHeaderText@1100528301(VAR CommentLine1@1210190000 : Record 11229943);
    VAR
      DPTHeaderTextInOut@1100529000 : Record 11229943;
      DPTHeaderText@1100485000 : Record 11229943;
      DPTSetup@1100528300 : Record 11229823;
    BEGIN
      DPTHeaderTextInOut.COPY(CommentLine1);
      TextEditorAllowed := TRUE;

      IF (TextEditorAllowed) THEN BEGIN
        DPTHeaderText.COPY(DPTHeaderTextInOut);
        DPTHeaderText.SETCURRENTKEY("Table No.", "Field No.", "Source No.", "Subsite Code", "Line No.");  //* Key 1
        IF (DPTHeaderText.FINDFIRST) THEN BEGIN
          IF (DPTHeaderText."Table No." <> DPTHeaderTextInOut."Table No.") OR
             (DPTHeaderText."Field No." <> DPTHeaderTextInOut."Field No.") OR
              (DPTHeaderText."Source No." <> DPTHeaderTextInOut."Source No.") OR
              (DPTHeaderText."Subsite Code" <> DPTHeaderTextInOut."Subsite Code")
          THEN
            TextEditorAllowed := FALSE;
          IF (TextEditorAllowed) THEN BEGIN
            IF (DPTHeaderText.FINDLAST) THEN BEGIN
              IF (DPTHeaderText."Table No." <> DPTHeaderTextInOut."Table No.") OR
                  (DPTHeaderText."Field No." <> DPTHeaderTextInOut."Field No.") OR
                  (DPTHeaderText."Source No." <> DPTHeaderTextInOut."Source No.") OR
                  (DPTHeaderText."Subsite Code" <> DPTHeaderTextInOut."Subsite Code")
              THEN
                TextEditorAllowed := FALSE;
            END;
          END;
        END;
      END;
      IF NOT TextEditorAllowed THEN
        ERROR(Text000);

      InitProcess();
      DPTSetup.GET;

      IF (DPTHeaderTextInOut.FINDSET) THEN BEGIN
        REPEAT
          WriteSpecialFieldsToFileAdv(DPTHeaderTextInOut."Creation Date", 0T, '', DPTHeaderTextInOut."Language Code",
            DPTHeaderTextInOut."Created By", 0);
          Write(DPTHeaderTextInOut."Text Line", DPTHeaderTextInOut."Line Break");
        UNTIL (DPTHeaderTextInOut.NEXT = 0);
        WriteSpecialFieldsToFileAdv(TODAY, 0T, '', DPTSetup."Language Code", USERID, 0);
      END ELSE
      WriteSpecialFieldsToFileAdv(TODAY, 0T,'', DPTSetup."Language Code", USERID, 0);

      TextFile.CLOSE;
      EditTempFile;

      //* Read the temporary file and write the comment lines
      DPTHeaderTextInOut.DELETEALL;
      DPTHeaderTextInOut."Line No." := 0;
      ResetCurrDateAndCode;
      CurrLanguageCode := '';
      CurrCmtCode := '';
      CurrCreatedBy := '';

      Set(Filename, MAXSTRLEN(DPTHeaderTextInOut."Text Line"), TRUE, 'Making lines');
      WHILE NOT EndOfFile DO BEGIN
        DPTHeaderTextInOut."Line Break" := ReadLine;
        GetLine(DPTHeaderTextInOut."Text Line");
        DPTHeaderTextInOut."Text Line" := DELCHR(DPTHeaderTextInOut."Text Line", '>');

        IF NOT EvaluateSpecialFieldsAdv(CurrDate, CurrTime, CurrCode, CurrLanguageCode, CurrCreatedBy, CurrType, DPTHeaderTextInOut."Text Line") THEN BEGIN
          DPTHeaderTextInOut."Line No." += 10000;
          DPTHeaderTextInOut."Creation Date" := CurrDate;
          DPTHeaderTextInOut."Created By" := CurrCreatedBy;
          DPTHeaderTextInOut."Language Code" := CurrLanguageCode;
          DPTHeaderTextInOut.INSERT;
          ResetCurrDateAndCode;
        END;
      END;
      DeleteTempFile;
    END;

    [External]
    PROCEDURE SHText@1100528302(VAR CommentLine1@1210190000 : Record 11126002);
    VAR
      SHTextInOut@1100529000 : Record 11126002;
      SHText@1100485000 : Record 11126002;
    BEGIN
      SHTextInOut.COPY(CommentLine1);
      TextEditorAllowed := TRUE;

      IF (TextEditorAllowed) THEN BEGIN
        SHText.COPY(SHTextInOut);
        SHText.SETCURRENTKEY("Text Type", "Main Process Code", "Sub Process Code", "Line No.");  //* Key 1
        IF (SHText.FINDFIRST) THEN BEGIN
          IF (SHText."Text Type" <> SHTextInOut."Text Type") OR
             (SHText."Main Process Code" <> SHTextInOut."Main Process Code") OR
             (SHText."Sub Process Code" <> SHTextInOut."Sub Process Code")
          THEN
            TextEditorAllowed := FALSE;
          IF (TextEditorAllowed) THEN BEGIN
            IF (SHText.FINDLAST) THEN BEGIN
              IF (SHText."Text Type" <> SHTextInOut."Text Type") OR
                 (SHText."Main Process Code" <> SHTextInOut."Main Process Code") OR
                 (SHText."Sub Process Code" <> SHTextInOut."Sub Process Code")
              THEN
                TextEditorAllowed := FALSE;
            END;
          END;
        END;
      END;
      IF NOT TextEditorAllowed THEN
        ERROR(Text000);

      InitProcess();

      IF (SHTextInOut.FINDSET) THEN BEGIN
        REPEAT
          WriteSpecialFieldsToFileAdv(0D, 0T, '', '', '', 0);
          Write(SHTextInOut.Text, SHTextInOut."Line Break");
        UNTIL (SHTextInOut.NEXT = 0);
        WriteSpecialFieldsToFileAdv(0D, 0T, '', '', '', 0);
      END ELSE
        WriteSpecialFieldsToFileAdv(0D, 0T,'', '', '', 0);

      TextFile.CLOSE;
      EditTempFile;

      //* Read the temporary file and write the comment lines
      SHTextInOut.DELETEALL;
      SHTextInOut."Line No." := 0;
      ResetCurrDateAndCode;
      CurrLanguageCode := '';
      CurrCmtCode := '';
      CurrCreatedBy := '';

      Set(Filename, MAXSTRLEN(SHTextInOut.Text), TRUE, 'Making lines');
      WHILE NOT EndOfFile DO BEGIN
        SHTextInOut."Line Break" := ReadLine;
        GetLine(SHTextInOut.Text);
        SHTextInOut.Text := DELCHR(SHTextInOut.Text, '>');

        IF NOT EvaluateSpecialFieldsAdv(CurrDate, CurrTime, CurrCode, CurrLanguageCode, CurrCreatedBy, CurrType, SHTextInOut.Text) THEN BEGIN
          SHTextInOut."Line No." += 10000;
          SHTextInOut.INSERT;
          ResetCurrDateAndCode;
        END;
      END;
      DeleteTempFile;
    END;

    [External]
    PROCEDURE SHWorkplanText@1100528303(VAR CommentLine1@1210190000 : Record 11126013);
    VAR
      SHWorkplanTextInOut@1100529000 : Record 11126013;
      SHWorkplanText@1100485000 : Record 11126013;
    BEGIN
      SHWorkplanTextInOut.COPY(CommentLine1);
      TextEditorAllowed := TRUE;

      IF (TextEditorAllowed) THEN BEGIN
        SHWorkplanText.COPY(SHWorkplanTextInOut);
        SHWorkplanText.SETCURRENTKEY("Text Type", "Source Type", "Source Code", "Workplan Date",
          "Main Process Code", "Sub Process Code", "Location Code", "Line No."); //* Key 1
        IF (SHWorkplanText.FINDFIRST) THEN BEGIN
          IF (SHWorkplanText."Text Type" <> SHWorkplanTextInOut."Text Type") OR
             (SHWorkplanText."Source Type" <> SHWorkplanTextInOut."Source Type") OR
             (SHWorkplanText."Source Code" <> SHWorkplanTextInOut."Source Code") OR
             (SHWorkplanText."Workplan Date" <> SHWorkplanTextInOut."Workplan Date") OR
             (SHWorkplanText."Main Process Code" <> SHWorkplanTextInOut."Main Process Code") OR
             (SHWorkplanText."Sub Process Code" <> SHWorkplanTextInOut."Sub Process Code") OR
             (SHWorkplanText."Location Code" <> SHWorkplanTextInOut."Location Code")
          THEN
            TextEditorAllowed := FALSE;
          IF (TextEditorAllowed) THEN BEGIN
            IF (SHWorkplanText.FINDLAST) THEN BEGIN
              IF (SHWorkplanText."Text Type" <> SHWorkplanTextInOut."Text Type") OR
                 (SHWorkplanText."Source Type" <> SHWorkplanTextInOut."Source Type") OR
                 (SHWorkplanText."Source Code" <> SHWorkplanTextInOut."Source Code") OR
                 (SHWorkplanText."Workplan Date" <> SHWorkplanTextInOut."Workplan Date") OR
                 (SHWorkplanText."Main Process Code" <> SHWorkplanTextInOut."Main Process Code") OR
                 (SHWorkplanText."Sub Process Code" <> SHWorkplanTextInOut."Sub Process Code") OR
                 (SHWorkplanText."Location Code" <> SHWorkplanTextInOut."Location Code")
              THEN
                TextEditorAllowed := FALSE;
            END;
          END;
        END;
      END;
      IF NOT TextEditorAllowed THEN
        ERROR(Text000);

      InitProcess();

      IF (SHWorkplanTextInOut.FINDSET) THEN BEGIN
        REPEAT
          WriteSpecialFieldsToFileAdv(0D, 0T, '', '', '', 0);
          Write(SHWorkplanTextInOut.Text, SHWorkplanTextInOut."Line Break");
        UNTIL (SHWorkplanTextInOut.NEXT = 0);
        WriteSpecialFieldsToFileAdv(0D, 0T, '', '', '', 0);
      END ELSE
        WriteSpecialFieldsToFileAdv(0D, 0T,'', '', '', 0);

      TextFile.CLOSE;
      EditTempFile;

      //* Read the temporary file and write the comment lines
      SHWorkplanTextInOut.DELETEALL;
      SHWorkplanTextInOut."Line No." := SHWorkplanTextInOut.GetLastLineNo(TRUE);
      ResetCurrDateAndCode;
      CurrLanguageCode := '';
      CurrCmtCode := '';
      CurrCreatedBy := '';

      Set(Filename, MAXSTRLEN(SHWorkplanTextInOut.Text), TRUE, 'Making lines');
      WHILE NOT EndOfFile DO BEGIN
        SHWorkplanTextInOut."Line Break" := ReadLine;
        GetLine(SHWorkplanTextInOut.Text);
        SHWorkplanTextInOut.Text := DELCHR(SHWorkplanTextInOut.Text, '>');

        IF NOT EvaluateSpecialFieldsAdv(CurrDate, CurrTime, CurrCode, CurrLanguageCode, CurrCreatedBy, CurrType, SHWorkplanTextInOut.Text) THEN BEGIN
          SHWorkplanTextInOut."Line No." += 10000;
          SHWorkplanTextInOut."Standard Text" := FALSE;
          SHWorkplanTextInOut.INSERT;
          ResetCurrDateAndCode;
        END;
      END;
      DeleteTempFile;
    END;

    [External]
    PROCEDURE SHWorkplanActionText@1100525014(VAR CommentLine1@1210190000 : Record 11126035);
    VAR
      SHWorkplanActionTextInOut@1100529000 : Record 11126035;
      SHWorkplanActionText@1100485000 : Record 11126035;
    BEGIN
      SHWorkplanActionTextInOut.COPY(CommentLine1);
      TextEditorAllowed := TRUE;

      IF (TextEditorAllowed) THEN BEGIN
        SHWorkplanActionText.COPY(SHWorkplanActionTextInOut);
        SHWorkplanActionText.SETCURRENTKEY("Source Type", "Source Code", "Workplan Date", "Main Process Code",
          "Sub Process Code", "Location Code", "Action Line No.", "Line No."); //* Key 1
        IF (SHWorkplanActionText.FINDFIRST) THEN BEGIN
          IF (SHWorkplanActionText."Source Type" <> SHWorkplanActionTextInOut."Source Type") OR
             (SHWorkplanActionText."Source Code" <> SHWorkplanActionTextInOut."Source Code") OR
             (SHWorkplanActionText."Workplan Date" <> SHWorkplanActionTextInOut."Workplan Date") OR
             (SHWorkplanActionText."Main Process Code" <> SHWorkplanActionTextInOut."Main Process Code") OR
             (SHWorkplanActionText."Sub Process Code" <> SHWorkplanActionTextInOut."Sub Process Code") OR
             (SHWorkplanActionText."Location Code" <> SHWorkplanActionTextInOut."Location Code") OR
             (SHWorkplanActionText."Action Line No." <> SHWorkplanActionTextInOut."Action Line No.")
          THEN
            TextEditorAllowed := FALSE;
          IF (TextEditorAllowed) THEN BEGIN
            IF (SHWorkplanActionText.FINDLAST) THEN BEGIN
              IF (SHWorkplanActionText."Source Type" <> SHWorkplanActionTextInOut."Source Type") OR
                 (SHWorkplanActionText."Source Code" <> SHWorkplanActionTextInOut."Source Code") OR
                 (SHWorkplanActionText."Workplan Date" <> SHWorkplanActionTextInOut."Workplan Date") OR
                 (SHWorkplanActionText."Main Process Code" <> SHWorkplanActionTextInOut."Main Process Code") OR
                 (SHWorkplanActionText."Sub Process Code" <> SHWorkplanActionTextInOut."Sub Process Code") OR
                 (SHWorkplanActionText."Location Code" <> SHWorkplanActionTextInOut."Location Code") OR
                 (SHWorkplanActionText."Action Line No." <> SHWorkplanActionTextInOut."Action Line No.")
              THEN
                TextEditorAllowed := FALSE;
            END;
          END;
        END;
      END;
      IF NOT TextEditorAllowed THEN
        ERROR(Text000);

      InitProcess();

      IF (SHWorkplanActionTextInOut.FINDSET) THEN BEGIN
        REPEAT
          WriteSpecialFieldsToFileAdv(0D, 0T, '', '', '', 0);
          Write(SHWorkplanActionTextInOut.Text, SHWorkplanActionTextInOut."Line Break");
        UNTIL (SHWorkplanActionTextInOut.NEXT = 0);
        WriteSpecialFieldsToFileAdv(0D, 0T, '', '', '', 0);
      END ELSE
        WriteSpecialFieldsToFileAdv(0D, 0T,'', '', '', 0);

      TextFile.CLOSE;
      EditTempFile;

      //* Read the temporary file and write the comment lines
      SHWorkplanActionTextInOut.DELETEALL;
      SHWorkplanActionTextInOut."Line No." := SHWorkplanActionTextInOut.GetLastLineNo;
      ResetCurrDateAndCode;
      CurrLanguageCode := '';
      CurrCmtCode := '';
      CurrCreatedBy := '';

      Set(Filename, MAXSTRLEN(SHWorkplanActionTextInOut.Text), TRUE, 'Making lines');
      WHILE NOT EndOfFile DO BEGIN
        SHWorkplanActionTextInOut."Line Break" := ReadLine;
        GetLine(SHWorkplanActionTextInOut.Text);
        SHWorkplanActionTextInOut.Text := DELCHR(SHWorkplanActionTextInOut.Text, '>');

        IF NOT EvaluateSpecialFieldsAdv(CurrDate, CurrTime, CurrCode, CurrLanguageCode, CurrCreatedBy, CurrType, SHWorkplanActionTextInOut.Text) THEN BEGIN
          SHWorkplanActionTextInOut."Line No." += 10000;
          SHWorkplanActionTextInOut."Standard Text" := FALSE;
          SHWorkplanActionTextInOut.INSERT;
          ResetCurrDateAndCode;
        END;
      END;
      DeleteTempFile;
    END;

    LOCAL PROCEDURE WriteSpecialFieldToFile@1100528703(FldRef@1100528700 : FieldRef);
    VAR
      FieldTable@1100528701 : Record 2000000041;
      RecRef@1100528702 : RecordRef;
      Value@1100528703 : Text;
    BEGIN
      RecRef := FldRef.RECORD;
      FieldTable.GET(RecRef.NUMBER, FldRef.NUMBER);
      CASE FieldTable.Type OF
        FieldTable.Type::Date,
        FieldTable.Type::Time :
          Value := FORMAT(FldRef.VALUE, 0, 9);
      ELSE
        Value := FORMAT(FldRef.VALUE);
      END;

      WriteSpecialValueToFile(FldRef, Value);
    END;

    LOCAL PROCEDURE WriteSpecialValueToFile@1100528712(FldRef@1100528700 : FieldRef;Value@1100528705 : Text);
    VAR
      Value2@1100528704 : Text;
    BEGIN
      IF CurrentValues.ContainsKey(FldRef.NAME) THEN
        IF CurrentValues.TryGetValue(FldRef.NAME, Value2) THEN;

      IF Value2 = Value THEN
        EXIT;

      IF LineBreakSkipped THEN BEGIN
        TextFile.WRITE('');
        LineBreakSkipped := FALSE;
      END;

      TextFile.WRITE(SpecialLineChar + FormatFieldCaption(FldRef.CAPTION) + ':' + Value);

      UpdateCurrentValue(FldRef, Value);
    END;

    LOCAL PROCEDURE TrySetCurrentValue@1100528704(FldRef@1100528700 : FieldRef;Comment@1100528701 : Text) : Boolean;
    VAR
      FieldTable@1100528706 : Record 2000000041;
      RecRef@1100528705 : RecordRef;
      Value@1100528707 : Text;
      DateValue@1100528702 : Date;
      TimeValue@1100528703 : Time;
      BooleanValue@1100528708 : Boolean;
    BEGIN
      IF COPYSTR(Comment, 1, (STRLEN(FormatFieldCaption(FldRef.CAPTION)) + 2)) = (SpecialLineChar + FormatFieldCaption(FldRef.CAPTION) + ':') THEN BEGIN
        Value := COPYSTR(Comment, STRLEN(FormatFieldCaption(FldRef.CAPTION)) + 3);
        Value := DELCHR(Value, '<>', ' ');
        RecRef := FldRef.RECORD;
        FieldTable.GET(RecRef.NUMBER, FldRef.NUMBER);
        CASE FieldTable.Type OF
          FieldTable.Type::Date :
            IF EVALUATE(DateValue, COPYSTR(Value, 1, 10), 9) THEN
              UpdateCurrentValue(FldRef, FORMAT(DateValue, 0, 9));
          FieldTable.Type::Time :
            IF EVALUATE(TimeValue, COPYSTR(Value, 1, 10), 9) THEN
              UpdateCurrentValue(FldRef, FORMAT(TimeValue, 0, 9));
          FieldTable.Type::Boolean :
            IF EVALUATE(BooleanValue, Value) THEN
              UpdateCurrentValue(FldRef, FORMAT(BooleanValue));
          ELSE
            UpdateCurrentValue(FldRef, Value);
        END;
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE TryGetCurrentValue@1100528722(VAR FldRef@1100528700 : FieldRef);
    VAR
      FieldTable@1100528706 : Record 2000000041;
      RecRef@1100528705 : RecordRef;
      Value@1100528704 : Text;
      DateValue@1100528702 : Date;
      TimeValue@1100528701 : Time;
      BooleanValue@1100528703 : Boolean;
    BEGIN
      IF CurrentValues.TryGetValue(FldRef.NAME, Value) THEN BEGIN
        RecRef := FldRef.RECORD;
        FieldTable.GET(RecRef.NUMBER, FldRef.NUMBER);
        CASE FieldTable.Type OF
          FieldTable.Type::Date :
            IF EVALUATE(DateValue, Value, 9) THEN
              FldRef.VALUE := DateValue;
          FieldTable.Type::Time :
            IF EVALUATE(TimeValue, Value, 9) THEN
              FldRef.VALUE := TimeValue;
          FieldTable.Type::Boolean :
            IF EVALUATE(BooleanValue, Value) THEN
              FldRef.VALUE := BooleanValue;
        ELSE
          FldRef.VALUE := Value;
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateCurrentValue@1100528718(FldRef@1100528701 : FieldRef;Value@1100528700 : Text);
    BEGIN
      IF NOT CurrentValues.ContainsKey(FldRef.NAME) THEN
        CurrentValues.Add(FldRef.NAME, Value)
      ELSE
        CurrentValues.Item(FldRef.NAME, Value);
    END;

    LOCAL PROCEDURE FormatFieldCaption@1100528705(FieldCaption@1100528700 : Text) Res : Text;
    BEGIN
      Res := DELCHR(FieldCaption, '<>', ' ');  //* Space in name goes wrong when testing. At Ansi->ASCII something happens with
      Res := CONVERTSTR(Res, ' ', '-');        //* space (is another character, but it still looks like a space).
    END;

    [External]
    PROCEDURE ServiceOrderStatusText@1100525015(VAR CommentLine1@1210190000 : Record 11072550);
    VAR
      ServiceOrderStatusText@1100529000 : Record 11072550;
    BEGIN
      ServiceOrderStatusText.COPY(CommentLine1);
      ServiceOrderStatusText.SETCURRENTKEY("Service Order No.","Line No.");
      WITH ServiceOrderStatusText DO BEGIN
        TextEditorAllowed := TRUE;
        IF "Service Order No." = '' THEN
          TextEditorAllowed := FALSE;
        IF NOT TextEditorAllowed THEN
          ERROR(Text000);

        InitProcess();

        IF FINDSET THEN BEGIN
          REPEAT
            WriteSpecialFieldsToFile(Date,"Time Created","Standard Text Code",STRSUBSTNO('%1',"Maintenance Status Code"),'',"Created by");
            Write(Comment, "Line Break");
          UNTIL NEXT = 0;
          WriteSpecialFieldsToFile(TODAY,TIME,'','','',USERID);  // 28509.n
        END ELSE
          WriteSpecialFieldsToFile(Date,"Time Created","Standard Text Code",STRSUBSTNO('%1',"Maintenance Status Code"),'',USERID);

        TextFile.CLOSE;
        EditTempFile;

        //* Read the temporary file and write the comment lines
        DELETEALL(TRUE);
        "Line No." := 0;
        ResetCurrDateAndCode;
        CurrCmtCode := '';
        CurrLanguageCode := '';
        CurrCreatedBy := '';

        Set(Filename,MAXSTRLEN(Comment),TRUE,'Making lines');
        WHILE NOT EndOfFile DO BEGIN
          ServiceOrderStatusText."Line Break" := ReadLine;
          GetLine(Comment);
          Comment := DELCHR(Comment, '>');
          IF NOT EvaluateSpecialFields(CurrDate,CurrTime,CurrCode,CurrCmtCode,CurrLanguageCode,CurrCreatedBy,Comment) THEN BEGIN
            "Line No." += 10000;
            Date := CurrDate;
            "Standard Text Code" := CurrCode;
            "Created by" := CurrCreatedBy;
            CASE UPPERCASE(CurrCmtCode) OF
               UPPERCASE(STRSUBSTNO('%1',"Maintenance Status Code"::ACC)):
                 "Maintenance Status Code" := "Maintenance Status Code"::ACC;
               UPPERCASE(STRSUBSTNO('%1',"Maintenance Status Code"::AFH)):
                 "Maintenance Status Code" := "Maintenance Status Code"::AFH;
               UPPERCASE(STRSUBSTNO('%1',"Maintenance Status Code"::AFR)):
                 "Maintenance Status Code" := "Maintenance Status Code"::AFR;
               UPPERCASE(STRSUBSTNO('%1',"Maintenance Status Code"::AFW)):
                 "Maintenance Status Code" := "Maintenance Status Code"::AFW;
               UPPERCASE(STRSUBSTNO('%1',"Maintenance Status Code"::ANN)):
                 "Maintenance Status Code" := "Maintenance Status Code"::ANN;
               UPPERCASE(STRSUBSTNO('%1',"Maintenance Status Code"::BBT)):
                 "Maintenance Status Code" := "Maintenance Status Code"::BBT;
               UPPERCASE(STRSUBSTNO('%1',"Maintenance Status Code"::BNT)):
                 "Maintenance Status Code" := "Maintenance Status Code"::BNT;
               UPPERCASE(STRSUBSTNO('%1',"Maintenance Status Code"::GER)):
                 "Maintenance Status Code" := "Maintenance Status Code"::GER;
               UPPERCASE(STRSUBSTNO('%1',"Maintenance Status Code"::TFC)):
                 "Maintenance Status Code" := "Maintenance Status Code"::TFC;
               UPPERCASE(STRSUBSTNO('%1',"Maintenance Status Code"::UIT)):
                 "Maintenance Status Code" := "Maintenance Status Code"::UIT;
               UPPERCASE(STRSUBSTNO('%1',"Maintenance Status Code"::VER)):
                 "Maintenance Status Code" := "Maintenance Status Code"::VER;
               UPPERCASE(STRSUBSTNO('%1',"Maintenance Status Code"::WEI)):
                 "Maintenance Status Code" := "Maintenance Status Code"::WEI;
            ELSE
              "Maintenance Status Code" := "Maintenance Status Code"::"  "
            END;
            "Time Created" := CurrTime;
            INSERT;
          END;
        END;

        DeleteTempFile;
      END;
    END;

    [External]
    PROCEDURE BlobTextAfterGetRecord@1100525016(VAR TempBlob@1100528300 : TEMPORARY Record 99008535) : Text;
    VAR
      IStream@1100525003 : InStream;
      PageText@1100528500 : Text;
    BEGIN
      TempBlob.Blob.CREATEINSTREAM(IStream);
      IStream.READ(PageText);
      EXIT(PageText);
    END;

    [External]
    PROCEDURE BlobTextAssistEdit@1100525017(VAR TempBlob@1100528300 : TEMPORARY Record 99008535;TextIsEditable@1100525005 : Boolean);
    VAR
      TextEditor4PS@1100528302 : Page 11129900;
    BEGIN
      TextEditor4PS.SetText(TempBlob);
      TextEditor4PS.EDITABLE(TextIsEditable);
      IF (TextEditor4PS.RUNMODAL = ACTION::OK) THEN BEGIN
        TextEditor4PS.GetText(TempBlob);
      END;
    END;

    BEGIN
    {
      db, 15-09-03: Copy function init/open/close window from codeunit state-indicate (codeunit 101264, version W11.20)
      hs, 29-06-05: Create specific function for Buyer Management.
      db, 27-11-08: time created applied for editor
      hbk, 19-05-10: prevent that editor delete data M17195
      mvos, 12-08-2010: Added function CertificationReminderText
      kk, 05-11-2010: Added function QADeviationText (rfc369)
      db, 22-05-15: save field Language Code in text editor; initialy for CommentLine (Item) and CommentLineGroup (Estimate)

      SESB.I039 Extend no of characters in hour line
         ASH 05.07.2013 Trigger HourAccountingCommentLine added
      4PSSE 2013-12-17: Add the user listed in existing comments to avoid taking ownership of other lines
    }
    END.
  }
}

