OBJECT Table 225 Post Code
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.04,4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Post Code;
               NOR=Postnr.;
               SVE=Postnr];
    LookupPageID=Page367;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;OnValidate=VAR
                                                                PostCode@1000 : Record 225;
                                                              BEGIN
                                                                PostCode.SETRANGE("Search City","Search City");
                                                                PostCode.SETRANGE(Code,Code);
                                                                IF NOT PostCode.ISEMPTY THEN
                                                                  ERROR(Text000,FIELDCAPTION(Code),Code);
                                                              END;

                                                   CaptionML=[ENU=Code;
                                                              NOR=Kode;
                                                              SVE=Kod];
                                                   NotBlank=Yes }
    { 2   ;   ;City                ;Text30        ;OnValidate=VAR
                                                                PostCode@1000 : Record 225;
                                                              BEGIN
                                                                TESTFIELD(Code);
                                                                "Search City" := City;
                                                                IF xRec."Search City" <> "Search City" THEN BEGIN
                                                                  PostCode.SETRANGE("Search City","Search City");
                                                                  PostCode.SETRANGE(Code,Code);
                                                                  IF NOT PostCode.ISEMPTY THEN
                                                                    ERROR(Text000,FIELDCAPTION(City),City);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=City;
                                                              NOR=Sted;
                                                              SVE=Ort];
                                                   NotBlank=Yes }
    { 3   ;   ;Search City         ;Code30        ;CaptionML=[ENU=Search City;
                                                              NOR=S›k etter sted;
                                                              SVE=S”k ort] }
    { 4   ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Country/Region Code;
                                                              NOR=Lands-/omr†dekode;
                                                              SVE=Lands-/regionkod] }
    { 5   ;   ;County              ;Text30        ;CaptionML=[ENU=County;
                                                              NOR=Fylke/delstat;
                                                              SVE=Delstat] }
    { 11012000;;Group              ;Code20        ;TableRelation="Post Code Group".Code;
                                                   CaptionML=[ENU=Group;
                                                              SVE=Grupp];
                                                   Description=SERV_CONS }
    { 11012010;;Company Name       ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Post Code Group"."Company Name" WHERE (Code=FIELD(Group)));
                                                   TableRelation=Company;
                                                   CaptionML=[ENU=Related Company;
                                                              SVE=Relaterat f”retag];
                                                   Description=Central Sign In page;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Code,City                               ;Clustered=Yes }
    {    ;City,Code                                }
    {    ;Search City                              }
    {    ;Country/Region Code                      }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;Code,City,Country/Region Code,County     }
    { 2   ;Brick               ;Code,City,County,Country/Region Code     }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=%1 %2 already exists.;SVE=%1 %2 finns redan.';

    [External]
    PROCEDURE ValidateCity@5(VAR CityTxt@1000 : Text[30];VAR PostCode@1001 : Code[20];VAR CountyTxt@1006 : Text[30];VAR CountryCode@1005 : Code[10];UseDialog@1007 : Boolean);
    VAR
      PostCodeRec@1002 : Record 225;
      PostCodeRec2@1004 : Record 225;
      PostCodeRec3@1100485000 : Record 225;
      SearchCity@1003 : Code[32];
      IsHandled@1008 : Boolean;
    BEGIN
      IF NOT GUIALLOWED THEN
        EXIT;

      IsHandled := FALSE;
      OnBeforeValidateCity(CityTxt,PostCode,CountyTxt,CountryCode,UseDialog,IsHandled);
      IF IsHandled THEN
        EXIT;

      IF CityTxt <> '' THEN BEGIN
        SearchCity := CityTxt;
        PostCodeRec.SETCURRENTKEY("Search City");
        IF STRPOS(SearchCity,'*') = STRLEN(SearchCity) THEN
          PostCodeRec.SETFILTER("Search City",SearchCity)
        ELSE
          PostCodeRec.SETRANGE("Search City",SearchCity);
        IF NOT PostCodeRec.FINDFIRST THEN
          //**4PS.sn
          //Some names of a city, like 's Hertogenbosch, give an error at setfilter,
          //but only a full city name will give a result at setrange;
          //test 2e time on <*SearchCity*> in behalf of amst (amsterdam/amstelveen)
          //Define Var SearchCity 2 larger than Var City
          //PostCodeRec.SETFILTER("Search City",SearchCity); //**4PS.o
        BEGIN
          IF COPYSTR(SearchCity,1,1) <> '*' THEN
            SearchCity := '*' + SearchCity;
          IF COPYSTR(SearchCity,STRLEN(SearchCity),1) <> '*' THEN
            SearchCity := SearchCity + '*';
          PostCodeRec.SETFILTER("Search City",'%1',SearchCity);
          IF NOT PostCodeRec.FIND('-') THEN
          //**4PS.en
            EXIT;

      //**4PS.so
      //IF CountryCode <> '' THEN BEGIN
      //  PostCodeRec.SETRANGE("Country/Region Code",CountryCode);
      //  IF NOT PostCodeRec.FINDFIRST THEN
      //    PostCodeRec.SETRANGE("Country/Region Code");
      //END;
      //**4PS.eo
        //**4PS.sn
        END;

        PostCodeRec3.COPY(PostCodeRec);
        PostCodeRec3.SETRANGE(Code, PostCode);
        IF (PostCode <> '') AND PostCodeRec3.FINDFIRST THEN BEGIN
          CityTxt := PostCodeRec3.City;
          CountryCode := PostCodeRec3."Country/Region Code";
          CountyTxt := PostCodeRec3.County;
        END ELSE BEGIN
        //**4PS.en
          PostCodeRec2.COPY(PostCodeRec);
          IF UseDialog AND (PostCodeRec2.NEXT = 1) THEN
            IF PAGE.RUNMODAL(PAGE::"Post Codes",PostCodeRec,PostCodeRec.Code) <> ACTION::LookupOK THEN
              ERROR('');
          PostCode := PostCodeRec.Code;
          CityTxt := PostCodeRec.City;
          CountryCode := PostCodeRec."Country/Region Code";
          CountyTxt := PostCodeRec.County;
        END; //**4PS.n
      END;
    END;

    [External]
    PROCEDURE ValidatePostCode@6(VAR CityTxt@1001 : Text[30];VAR PostCode@1000 : Code[20];VAR CountyTxt@1005 : Text[30];VAR CountryCode@1006 : Code[10];UseDialog@1004 : Boolean);
    VAR
      PostCodeRec@1002 : Record 225;
      PostCodeRec2@1003 : Record 225;
      IsHandled@1007 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeValidatePostCode(CityTxt,PostCode,CountyTxt,CountryCode,UseDialog,IsHandled);
      IF IsHandled THEN
        EXIT;

      IF PostCode <> '' THEN BEGIN
        IF STRPOS(PostCode,'*') = STRLEN(PostCode) THEN
          PostCodeRec.SETFILTER(Code,PostCode)
        ELSE
          PostCodeRec.SETRANGE(Code,PostCode);
        IF NOT PostCodeRec.FINDFIRST THEN
        //**4PS.sn
        BEGIN
          PostCodeRec.SETFILTER(Code, '%1', COPYSTR(PostCode, 1, 4) + '*');
          IF PostCodeRec.FINDFIRST THEN
            City := PostCodeRec.City;
        //**4PS.en
          EXIT;
        END; //**4PS.n

        IF CountryCode <> '' THEN BEGIN
          PostCodeRec.SETRANGE("Country/Region Code",CountryCode);
          IF NOT PostCodeRec.FINDFIRST THEN
            PostCodeRec.SETRANGE("Country/Region Code");
        END;

        PostCodeRec2.COPY(PostCodeRec);
        IF UseDialog AND (PostCodeRec2.NEXT = 1) AND GUIALLOWED THEN
          IF PAGE.RUNMODAL(PAGE::"Post Codes",PostCodeRec,PostCodeRec.Code) <> ACTION::LookupOK THEN
            EXIT;
        PostCode := PostCodeRec.Code;
        CityTxt := PostCodeRec.City;
        CountryCode := PostCodeRec."Country/Region Code";
        CountyTxt := PostCodeRec.County;
      END;
    END;

    [External]
    PROCEDURE UpdateFromSalesHeader@8(SalesHeader@1000 : Record 36;PostCodeChanged@1001 : Boolean);
    BEGIN
      CreatePostCode(SalesHeader."Sell-to Post Code",SalesHeader."Sell-to City",
        SalesHeader."Sell-to Country/Region Code",SalesHeader."Sell-to County",PostCodeChanged);
    END;

    [External]
    PROCEDURE UpdateFromCustomer@15(Customer@1000 : Record 18;PostCodeChanged@1001 : Boolean);
    BEGIN
      CreatePostCode(Customer."Post Code",Customer.City,
        Customer."Country/Region Code",Customer.County,PostCodeChanged);
    END;

    [External]
    PROCEDURE UpdateFromCompanyInformation@16(CompanyInformation@1000 : Record 79;PostCodeChanged@1001 : Boolean);
    BEGIN
      CreatePostCode(CompanyInformation."Post Code",CompanyInformation.City,
        CompanyInformation."Country/Region Code",CompanyInformation.County,PostCodeChanged);
    END;

    [External]
    PROCEDURE UpdateFromStandardAddress@1(StandardAddress@1000 : Record 730;PostCodeChanged@1001 : Boolean);
    BEGIN
      CreatePostCode(StandardAddress."Post Code",StandardAddress.City,
        StandardAddress."Country/Region Code",StandardAddress.County,PostCodeChanged);
    END;

    LOCAL PROCEDURE CreatePostCode@17(NewPostCode@1000 : Code[20];NewCity@1001 : Text[30];NewCountryRegion@1002 : Code[10];NewCounty@1003 : Text[30];PostCodeChanged@1004 : Boolean);
    BEGIN
      IF NewPostCode = '' THEN
        EXIT;

      SETRANGE(Code,NewPostCode);
      IF FINDFIRST THEN BEGIN
        IF PostCodeChanged THEN
          EXIT; // If the post code was updated, then don't insert the city for the old post code into the new post code
        IF (NewCity <> '') AND (City <> NewCity) THEN
          RENAME(NewPostCode,NewCity);
        IF NewCountryRegion <> '' THEN
          "Country/Region Code" := NewCountryRegion;
        IF NewCounty <> '' THEN
          County := NewCounty;
        MODIFY;
      END ELSE BEGIN
        INIT;

        Code := NewPostCode;
        City := NewCity;
        "Country/Region Code" := NewCountryRegion;
        County := NewCounty;
        INSERT;
      END;
    END;

    [External]
    PROCEDURE ValidateCountryCode@11(VAR CityTxt@1004 : Text[30];VAR PostCode@1003 : Code[20];VAR CountyTxt@1002 : Text[30];VAR CountryCode@1001 : Code[10]);
    VAR
      PostCodeRec@1005 : Record 225;
      IsHandled@1000 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeValidateCountryCode(CityTxt,PostCode,CountyTxt,CountryCode,IsHandled);
      IF IsHandled THEN
        EXIT;
      IF xRec."Country/Region Code" = CountryCode THEN
        EXIT;
      IF (CountryCode = '') OR (PostCode = '') THEN
        EXIT;

      PostCodeRec.SETRANGE("Country/Region Code",CountryCode);
      PostCodeRec.SETRANGE(Code,PostCode);
      IF PostCodeRec.FINDFIRST THEN BEGIN
        PostCode := PostCodeRec.Code;
        CityTxt := PostCodeRec.City;
        CountryCode := PostCodeRec."Country/Region Code";
        CountyTxt := PostCodeRec.County;
      END;
    END;

    [External]
    PROCEDURE CheckClearPostCodeCityCounty@4(VAR CityTxt@1004 : Text;VAR PostCode@1003 : Code[20];VAR CountyTxt@1002 : Text;VAR CountryCode@1001 : Code[10];xCountryCode@1000 : Code[10]);
    VAR
      IsHandled@1006 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeCheckClearPostCodeCityCounty(CityTxt,PostCode,CountyTxt,CountryCode,xCountryCode,IsHandled);
      IF IsHandled THEN
        EXIT;

      IF (xCountryCode = CountryCode) OR (xCountryCode = '') THEN
        EXIT;

      PostCode := '';
      CityTxt := '';
      CountyTxt := '';
    END;

    [External]
    PROCEDURE LookupPostCode@2(VAR CityTxt@1001 : Text;VAR PostCode@1000 : Code[20];VAR CountyTxt@1005 : Text;VAR CountryCode@1006 : Code[10]);
    VAR
      PostCodeRec@1002 : Record 225;
      PostCodes@1007 : Page 367;
      IsHandled@1003 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeLookupPostCode(CityTxt,PostCode,CountyTxt,CountryCode,IsHandled);
      IF IsHandled THEN
        EXIT;

      IF CountryCode <> '' THEN BEGIN
        PostCodeRec.SETRANGE("Country/Region Code",CountryCode);
        PostCodes.SETTABLEVIEW(PostCodeRec);
      END;

      IF PostCodeRec.GET(PostCode,CityTxt) THEN
        PostCodes.SETRECORD(PostCodeRec);

      PostCodes.LOOKUPMODE := TRUE;
      IF PostCodes.RUNMODAL = ACTION::LookupOK THEN BEGIN
        PostCodes.GETRECORD(PostCodeRec);
        PostCode := PostCodeRec.Code;
        CityTxt := PostCodeRec.City;
        CountryCode := PostCodeRec."Country/Region Code";
        CountyTxt := PostCodeRec.County;
      END;
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCheckClearPostCodeCityCounty@3(VAR CityTxt@1004 : Text;VAR PostCode@1003 : Code[20];VAR CountyTxt@1002 : Text;VAR CountryCode@1001 : Code[10];xCountryCode@1000 : Code[10];VAR IsHandled@1005 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeLookupPostCode@13(VAR CityTxt@1004 : Text;VAR PostCode@1003 : Code[20];VAR CountyTxt@1002 : Text;VAR CountryCode@1001 : Code[10];VAR IsHandled@1005 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeValidateCity@10(VAR CityTxt@1004 : Text[30];VAR PostCode@1003 : Code[20];VAR CountyTxt@1002 : Text[30];VAR CountryCode@1001 : Code[10];UseDialog@1000 : Boolean;VAR IsHandled@1005 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeValidateCountryCode@9(VAR CityTxt@1003 : Text[30];VAR PostCode@1002 : Code[20];VAR CountyTxt@1001 : Text[30];VAR CountryCode@1000 : Code[10];VAR IsHandled@1004 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeValidatePostCode@7(VAR CityTxt@1004 : Text[30];VAR PostCode@1003 : Code[20];VAR CountyTxt@1002 : Text[30];VAR CountryCode@1001 : Code[10];UseDialog@1000 : Boolean;VAR IsHandled@1005 : Boolean);
    BEGIN
    END;

    PROCEDURE GetTerritoryByPostCodeGroup@1100525000(City@1100525003 : Text[50];PostCode@1100525002 : Code[20];VAR TerritoryCode@1100525004 : Code[20]);
    VAR
      PostCodeRec@1100525000 : Record 225;
      PostCodeGroupRec@1100525001 : Record 11020599;
    BEGIN
      //**4PS
      IF NOT PostCodeRec.GET(PostCode, City) THEN PostCodeRec.INIT;
      IF PostCodeRec.Group = '' THEN EXIT;

      IF NOT PostCodeGroupRec.GET(PostCodeRec.Group) THEN PostCodeGroupRec.INIT;
      IF PostCodeGroupRec.Territory = '' THEN EXIT;

      TerritoryCode := PostCodeGroupRec.Territory;  //db, 11-02-13: C005107
    END;

    PROCEDURE GetDepartmentCodeByPostCodeGroup@1100528600(City@1100528602 : Text[50];PostCode@1100528601 : Code[20];VAR DepartmentCode@1100528600 : Code[20]);
    VAR
      PostCodeRec@1100528604 : Record 225;
      PostCodeGroup@1100528603 : Record 11020599;
    BEGIN
      //**4PS
      IF NOT PostCodeRec.GET(PostCode, City) THEN
        PostCodeRec.INIT;
      IF PostCodeRec.Group = '' THEN
        EXIT;

      IF NOT PostCodeGroup.GET(PostCodeRec.Group) THEN
        PostCodeGroup.INIT;
      IF PostCodeGroup."Global Dimension 1 Code" = '' THEN
        EXIT;

      DepartmentCode := PostCodeGroup."Global Dimension 1 Code";
    END;

    BEGIN
    END.
  }
}

