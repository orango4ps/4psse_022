OBJECT Codeunit 11012354 Project Delivery Note-Reserve
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ProjectDeliveryNoteHeader@1100528600 : Record 11012672;
      Text001@1100528603 : TextConst 'DEU=muss ausgefÅllt sein, wenn eine Menge reserviert ist;ENU=must be filled in when a quantity is reserved;NLD=moet ingevuld worden als er reserveringen zijn.;NOR=MÜ fylles ut nÜr et antall er reservert;SVE=ska fyllas i nÑr ett antal Ñr reserverade';
      Text004@1100528601 : TextConst 'DEU=darf nicht geÑndert werden, wenn eine Menge reserviert ist;ENU=must not be changed when a quantity is reserved;NLD=mag niet gewijzigd worden als er reserveringen zijn.;NOR=skal ikke endres nÜr et antall reserveres;SVE=fÜr inte Ñndras nÑr ett antal Ñr reserverade';
      Text11012000@1100528602 : TextConst 'DEU=FÅr Artikel %1 in %2 wurde Artikelverfolgung definiert.\Sie mÅssen die vorhandene Artikelverfolgung lîschen, bevor die %2 bearbeitet oder gelîscht werden kînnen.;ENU=Item tracking is defined for item %1 in the %2.\You must delete the existing item tracking before modifying or deleting the %2.;NLD=Artikeltracering is gedefinieerd voor artikel %1 in %2.\U moet de bestaande artikeltracering verwijderen voor u de %2 wijzigt of verwijdert.;NOR=Varesporing er definert for %1 i %2.\Du mÜ fjerne eksisterende artikkelsporing fõr du kan endre eller fjerne%2.;SVE=ArtikelspÜrning har definierats fîr %1 i %2.\Du mÜste ta bort befintlig artikelspÜrning innan du kan Ñndra eller ta bort %2.';
      ReservMgt@1100528604 : Codeunit 99000845;
      DeleteItemTracking@1100528605 : Boolean;

    PROCEDURE FilterReservFor@1100528607(VAR FilterReservEntry@1000 : Record 11071900;ProjectDeliveryNoteLine@1100528600 : Record 11012673);
    BEGIN
      FilterReservEntry.SETCURRENTKEY(
        "Source ID","Source Ref. No.","Source Type","Source Subtype",
        "Source Batch Name","Source Prod. Order Line","Reservation Status",
        "Shipment Date","Expected Receipt Date");

      FilterReservEntry.SETRANGE("Source Type",DATABASE::"Project Delivery Note Line");
      FilterReservEntry.SETRANGE("Source Subtype",GetSourceSubtype(ProjectDeliveryNoteLine));
      FilterReservEntry.SETRANGE("Source ID",ProjectDeliveryNoteLine."Project Delivery Note No.");
      FilterReservEntry.SETRANGE("Source Ref. No.",ProjectDeliveryNoteLine."Line No.");
    END;

    PROCEDURE FindReservEntry@1100528608(ProjectDeliveryNoteLine@1000 : Record 11012673) : Boolean;
    VAR
      NSReservEntry@1100528600 : Record 11071900;
    BEGIN
      FilterReservFor(NSReservEntry,ProjectDeliveryNoteLine);
      EXIT(NSReservEntry.FINDLAST);
    END;

    PROCEDURE ReservEntryExist@11(ProjectDeliveryNoteLine@1100528601 : Record 11012673) : Boolean;
    VAR
      NSReservEntry@1100528600 : Record 11071900;
    BEGIN
      FilterReservFor(NSReservEntry, ProjectDeliveryNoteLine);
      EXIT(NOT NSReservEntry.ISEMPTY);
    END;

    PROCEDURE FindTrackingSpecification@1100528609(ProjectDeliveryNoteLine@1100528600 : Record 11012673) : Boolean;
    VAR
      NSTrackingSpecification@1100528602 : Record 11071901;
    BEGIN
      NSTrackingSpecification.SETCURRENTKEY(
        "Source ID","Source Type","Source Subtype","Source Batch Name",
        "Source Prod. Order Line","Source Ref. No.");

      NSTrackingSpecification.SETRANGE("Source Type",DATABASE::"Project Delivery Note Line");
      NSTrackingSpecification.SETRANGE("Source Subtype",GetSourceSubtype(ProjectDeliveryNoteLine));
      NSTrackingSpecification.SETRANGE("Source ID",ProjectDeliveryNoteLine."Project Delivery Note No.");
      NSTrackingSpecification.SETRANGE("Source Ref. No.",ProjectDeliveryNoteLine."Line No.");

      EXIT(NSTrackingSpecification.FINDLAST);
    END;

    PROCEDURE VerifyChange@1100528606(VAR NewProjectDeliveryNoteLine@1000 : Record 11012673;VAR OldProjectDeliveryNoteLine@1001 : Record 11012673);
    VAR
      ProjectDeliveryNoteLine@1100528600 : Record 11012673;
      ItemTrackManagement@1006 : Codeunit 6500;
      ShowError@1003 : Boolean;
      HasError@1004 : Boolean;
      SNRequired@1007 : Boolean;
      LNRequired@1008 : Boolean;
    BEGIN
      IF NewProjectDeliveryNoteLine."Line No." = 0 THEN
        IF NOT ProjectDeliveryNoteLine.GET(
                 NewProjectDeliveryNoteLine."Project Delivery Note No.",
                 NewProjectDeliveryNoteLine."Line No.")
        THEN
          EXIT;

      NewProjectDeliveryNoteLine.CALCFIELDS("Reserved Qty. (Base)");
      ShowError := NewProjectDeliveryNoteLine."Reserved Qty. (Base)" <> 0;

      ProjectDeliveryNoteHeader.GET(NewProjectDeliveryNoteLine."Project Delivery Note No.");
      IF ProjectDeliveryNoteHeader."Posting Date" = 0D THEN
        IF ShowError THEN
          ProjectDeliveryNoteHeader.FIELDERROR("Posting Date",Text001)
        ELSE
          HasError := TRUE;

      IF NewProjectDeliveryNoteLine."Item No." <> OldProjectDeliveryNoteLine."Item No." THEN
        IF ShowError THEN
          NewProjectDeliveryNoteLine.FIELDERROR("Item No.",Text004)
        ELSE
          HasError := TRUE;

      IF (ProjectDeliveryNoteHeader."Transaction Type" = ProjectDeliveryNoteHeader."Transaction Type"::Transfer) AND
         (NewProjectDeliveryNoteLine.Quantity < 0)
      THEN BEGIN
        IF (NewProjectDeliveryNoteLine."To Location Code" <> OldProjectDeliveryNoteLine."To Location Code") THEN
          IF ShowError THEN
            NewProjectDeliveryNoteLine.FIELDERROR("To Location Code",Text004)
          ELSE
            HasError := TRUE;
        IF NewProjectDeliveryNoteLine."To Bin Code" <> OldProjectDeliveryNoteLine."To Bin Code" THEN BEGIN
          ItemTrackManagement.CheckWhseItemTrkgSetup(NewProjectDeliveryNoteLine."Item No.",SNRequired,LNRequired,FALSE);
          IF SNRequired OR LNRequired THEN
            IF ShowError THEN
              NewProjectDeliveryNoteLine.FIELDERROR("To Bin Code",Text004)
            ELSE
              HasError := TRUE;
        END
      END ELSE BEGIN
        IF (NewProjectDeliveryNoteLine."Location Code" <> OldProjectDeliveryNoteLine."Location Code") THEN
          IF ShowError THEN
            NewProjectDeliveryNoteLine.FIELDERROR("Location Code",Text004)
          ELSE
            HasError := TRUE;
        IF NewProjectDeliveryNoteLine."Bin Code" <> OldProjectDeliveryNoteLine."Bin Code" THEN BEGIN
          ItemTrackManagement.CheckWhseItemTrkgSetup(NewProjectDeliveryNoteLine."Item No.",SNRequired,LNRequired,FALSE);
          IF SNRequired OR LNRequired THEN
            IF ShowError THEN
              NewProjectDeliveryNoteLine.FIELDERROR("Bin Code",Text004)
            ELSE
              HasError := TRUE;
        END
      END;
      IF NewProjectDeliveryNoteLine."Variant Code" <> OldProjectDeliveryNoteLine."Variant Code" THEN
        IF ShowError THEN
          NewProjectDeliveryNoteLine.FIELDERROR("Variant Code",Text004)
        ELSE
          HasError := TRUE;
      IF NewProjectDeliveryNoteLine."Line No." <> OldProjectDeliveryNoteLine."Line No." THEN
        HasError := TRUE;

      IF NewProjectDeliveryNoteLine."Project No." <> OldProjectDeliveryNoteLine."Project No." THEN
        IF ShowError THEN
          NewProjectDeliveryNoteLine.FIELDERROR("Project No.",Text004)
        ELSE
          HasError := TRUE;

      IF HasError THEN
        IF FindReservEntry(OldProjectDeliveryNoteLine) OR FindTrackingSpecification(OldProjectDeliveryNoteLine) THEN
          ERROR(Text11012000,OldProjectDeliveryNoteLine."Item No.",OldProjectDeliveryNoteLine.TABLECAPTION);
    END;

    PROCEDURE VerifyQuantity@1100528605(VAR NewProjectDeliveryNoteLine@1001 : Record 11012673;VAR OldProjectDeliveryNoteLine@1000 : Record 11012673);
    VAR
      ProjectDeliveryNoteLine@1100528600 : Record 11012673;
    BEGIN
      WITH NewProjectDeliveryNoteLine DO BEGIN
        IF "Line No." = OldProjectDeliveryNoteLine."Line No." THEN
          IF Quantity = OldProjectDeliveryNoteLine.Quantity THEN
            EXIT;
        IF "Line No." = 0 THEN
          IF NOT ProjectDeliveryNoteLine.GET("Project Delivery Note No.","Line No.") THEN
            EXIT;

        ReservMgt.SetProjectDeliveryNoteLine(NewProjectDeliveryNoteLine,GetSourceSubtype(NewProjectDeliveryNoteLine));
      //"Qty. per Unit of Measure" not implemented in Project Delivery Line yet
      //  IF "Qty. per Unit of Measure" <> OldProjectDeliveryNoteLine."Qty. per Unit of Measure" THEN
      //   ReservMgt.ModifyUnitOfMeasure;
        IF Quantity * OldProjectDeliveryNoteLine.Quantity < 0 THEN
          ReservMgt.DeleteNSReservEntries(TRUE,0)
        ELSE
          ReservMgt.DeleteNSReservEntries(FALSE,Quantity);
      END;
    END;

    PROCEDURE VerifyHeaderChange@1100528603(VAR NewProjectDeliveryNoteHeader@1100528602 : Record 11012672;VAR OldProjectDeliveryNoteHeader@1100528601 : Record 11012672);
    VAR
      ProjectDeliveryNoteLine@1100528600 : Record 11012673;
      HasError@1004 : Boolean;
    BEGIN
      //check project en entry type en posting date
      IF NewProjectDeliveryNoteHeader."Posting Date" = 0D THEN
        HasError := TRUE;

      IF NewProjectDeliveryNoteHeader."Transaction Type" <> OldProjectDeliveryNoteHeader."Transaction Type" THEN
        HasError := TRUE;

      IF NewProjectDeliveryNoteHeader."Project No." <> OldProjectDeliveryNoteHeader."Project No." THEN
        HasError := TRUE;

      IF HasError THEN BEGIN
        ProjectDeliveryNoteLine.SETRANGE("Project Delivery Note No.", NewProjectDeliveryNoteHeader."No.");
        IF ProjectDeliveryNoteLine.FINDSET THEN
          REPEAT
            IF FindReservEntry(ProjectDeliveryNoteLine) OR FindTrackingSpecification(ProjectDeliveryNoteLine) THEN
              ERROR(Text11012000,ProjectDeliveryNoteLine."Item No.",NewProjectDeliveryNoteHeader.TABLECAPTION);
          UNTIL ProjectDeliveryNoteLine.NEXT = 0;
      END;
    END;

    PROCEDURE DeleteLineConfirm@20(VAR ProjectDeliveryNoteLine@1000 : Record 11012673) : Boolean;
    BEGIN
      IF NOT ReservEntryExist(ProjectDeliveryNoteLine) THEN
        EXIT(TRUE);

      ReservMgt.SetProjectDeliveryNoteLine(ProjectDeliveryNoteLine,GetSourceSubtype(ProjectDeliveryNoteLine));
      IF ReservMgt.DeleteItemTrackingConfirm THEN
        DeleteItemTracking := TRUE;

      EXIT(DeleteItemTracking);
    END;

    PROCEDURE DeleteLine@2(VAR ProjectDeliveryNoteLine@1100528600 : Record 11012673);
    BEGIN
      ReservMgt.SetProjectDeliveryNoteLine(ProjectDeliveryNoteLine,GetSourceSubtype(ProjectDeliveryNoteLine));
      IF DeleteItemTracking THEN
        ReservMgt.SetItemTrackingHandling(1); // Allow Deletion
      ReservMgt.DeleteNSReservEntries(TRUE,0);
    END;

    PROCEDURE CallItemTracking@6(VAR ProjectDeliveryNoteLine@1003 : Record 11012673);
    VAR
      TrackingSpecification@1001 : Record 336;
      ItemTrackingForm@1002 : Page 6510;
    BEGIN
      ProjectDeliveryNoteHeader.GET(ProjectDeliveryNoteLine."Project Delivery Note No.");
      InitTrackingSpecification(ProjectDeliveryNoteLine,TrackingSpecification,FALSE);
      ItemTrackingForm.SetCalledFromNonStock(TRUE, ProjectDeliveryNoteHeader."Project No.", '');
      IF ProjectDeliveryNoteHeader."Transaction Type" IN
        [ProjectDeliveryNoteHeader."Transaction Type"::Return,
         ProjectDeliveryNoteHeader."Transaction Type"::"Return Temporary Shipment Third Party"]
      THEN
        ItemTrackingForm.SetProjDeliveryNoteReturn(TRUE);
      ItemTrackingForm.SetSourceSpec(TrackingSpecification,ProjectDeliveryNoteHeader."Posting Date");
      ItemTrackingForm.RUNMODAL;
    END;

    LOCAL PROCEDURE InitTrackingSpecification@10(VAR ProjectDeliveryNoteLine@1001 : Record 11012673;VAR TrackingSpecification@1003 : Record 336;Consume@1000 : Boolean);
    BEGIN
      TrackingSpecification.INIT;
      TrackingSpecification."Source Type" := DATABASE::"Project Delivery Note Line";
      WITH ProjectDeliveryNoteLine DO BEGIN
        TrackingSpecification."Item No." := "Item No.";
        TrackingSpecification."Location Code" := "Location Code";
        TrackingSpecification.Description := Description;
        TrackingSpecification."Variant Code" := "Variant Code";
        TrackingSpecification."Source Subtype" := GetSourceSubtype(ProjectDeliveryNoteLine);
        TrackingSpecification."Source ID" := "Project Delivery Note No.";
        TrackingSpecification."Source Batch Name" := '';
        TrackingSpecification."Source Prod. Order Line" := 0;
        TrackingSpecification."Source Ref. No." := "Line No.";
        TrackingSpecification."Quantity (Base)" := Quantity;
        TrackingSpecification."Qty. to Handle" := Quantity;
        TrackingSpecification."Qty. to Handle (Base)" := Quantity;
        TrackingSpecification."Qty. to Invoice" := 0;
        TrackingSpecification."Qty. to Invoice (Base)" := 0;
        TrackingSpecification."Quantity Handled (Base)" := 0;
        TrackingSpecification."Quantity Invoiced (Base)" := 0;
        TrackingSpecification."Qty. per Unit of Measure" := 1;
      END;
    END;

    LOCAL PROCEDURE GetSourceSubtype@1100528602(ProjectDeliveryNoteLine@1100528600 : Record 11012673) SourceSubtype : Integer;
    BEGIN
      IF ProjectDeliveryNoteLine."Project Delivery Note No." <> ProjectDeliveryNoteHeader."No." THEN
        ProjectDeliveryNoteHeader.GET( ProjectDeliveryNoteLine."Project Delivery Note No.");
      CASE ProjectDeliveryNoteHeader."Transaction Type" OF
        ProjectDeliveryNoteHeader."Transaction Type"::Delivery,
        ProjectDeliveryNoteHeader."Transaction Type"::"Temporary Shipment Third Party":
          SourceSubtype := 1;
        ProjectDeliveryNoteHeader."Transaction Type"::Return,
        ProjectDeliveryNoteHeader."Transaction Type"::"Return Temporary Shipment Third Party":
          SourceSubtype := 2;
        ProjectDeliveryNoteHeader."Transaction Type"::Transfer:
          SourceSubtype := 3;
      END;
    END;

    BEGIN
    END.
  }
}

