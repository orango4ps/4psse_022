OBJECT Codeunit 8810 Customer Layout - Statement
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.04;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      StatementFileNameTxt@1002 : TextConst '@@@=Shortened form of ''Customer Statement'';ENU=Statement;NOR=Kontoutdrag;SVE=Kontoutdrag';
      StatementReportNotFoundErr@1000 : TextConst 'ENU=No customer statement report has been set up.;NOR=Ingen rapport for kontoutdrag er konfigurert.';
      RunCustomerStatementsTxt@1005 : TextConst 'ENU=Run Customer Statements from Job Queue.;NOR=Kj›r kontoutdrag fra prosjektk›en.';
      DuplicateJobQueueRecordErr@1004 : TextConst 'ENU=Customer statements are already scheduled to run in the job queue.;NOR=Kontoutdrag er allerede planlagt for kj›ring i jobbk›en.';
      ConfirmRunRepInBackgroundQst@1003 : TextConst 'ENU=Do you want to set the job queue entry up to run immediately?;NOR=Vil du at prosjektk›en skal settes til † kj›re umiddelbart?';

    PROCEDURE RunReport@2();
    VAR
      Customer@1001 : Record 18;
      ReportSelections@1003 : Record 77;
      CustomLayoutReporting@1002 : Codeunit 8800;
      RecRef@1000 : RecordRef;
    BEGIN
      RecRef.OPEN(DATABASE::Customer);
      CustomLayoutReporting.SetOutputFileBaseName(StatementFileNameTxt);
      CustomLayoutReporting.ProcessReportForData(
        ReportSelections.Usage::"C.Statement",RecRef,Customer.FIELDNAME("No."),DATABASE::Customer,Customer.FIELDNAME("No."),TRUE);
    END;

    PROCEDURE RunReportWithParameters@6(Parameters@1004 : Text);
    VAR
      Customer@1001 : Record 18;
      ReportSelections@1003 : Record 77;
      CustomLayoutReporting@1002 : Codeunit 8800;
      RecRef@1000 : RecordRef;
    BEGIN
      RecRef.OPEN(DATABASE::Customer);
      CustomLayoutReporting.SetOutputFileBaseName(StatementFileNameTxt);
      CustomLayoutReporting.SetPredefinedRequestParameters(Parameters);
      CustomLayoutReporting.ProcessReportForData(
        ReportSelections.Usage::"C.Statement",RecRef,Customer.FIELDNAME("No."),DATABASE::Customer,Customer.FIELDNAME("No."),TRUE);
    END;

    PROCEDURE RunReportWithoutRequestPage@5();
    VAR
      Customer@1001 : Record 18;
      ReportSelections@1003 : Record 77;
      CustomLayoutReporting@1002 : Codeunit 8800;
      RecRef@1000 : RecordRef;
    BEGIN
      RecRef.OPEN(DATABASE::Customer);
      CustomLayoutReporting.SetOutputFileBaseName(StatementFileNameTxt);
      CustomLayoutReporting.SetIgnoreRequestParameters(TRUE);
      CustomLayoutReporting.ProcessReportForData(
        ReportSelections.Usage::"C.Statement",RecRef,Customer.FIELDNAME("No."),DATABASE::Customer,Customer.FIELDNAME("No."),TRUE);
    END;

    PROCEDURE EnqueueReport@1105();
    VAR
      JobQueueEntry@1110 : Record 472;
      LocalReportSelections@1120 : Record 77;
      CustomLayoutReporting@1001 : Codeunit 8800;
      RequestParameters@1130 : Text;
      RunImmediately@1140 : Boolean;
      LocalRepId@1000 : Integer;
    BEGIN
      LocalReportSelections.SETRANGE(Usage,LocalReportSelections.Usage::"C.Statement");
      IF NOT LocalReportSelections.FINDFIRST THEN
        ERROR(StatementReportNotFoundErr);

      LocalRepId := LocalReportSelections."Report ID";
      RequestParameters := CustomLayoutReporting.RunRequestPage(LocalRepId);
      IF RequestParameters = '' THEN
        EXIT;

      RunImmediately := CONFIRM(ConfirmRunRepInBackgroundQst);
      CheckReportRunningInBackground;
      WITH JobQueueEntry DO BEGIN
        INIT;
        Scheduled := FALSE;
        Status := Status::"On Hold";
        Description := RunCustomerStatementsTxt;
        "Object ID to Run" := CODEUNIT::"Customer Statement via Queue";
        "Object Type to Run" := "Object Type to Run"::Codeunit;
        INSERT(TRUE); // it is required due to MODIFY called inside SetReportParameters
        SetXmlContent(RequestParameters);
        IF RunImmediately THEN
          SetStatus(Status::Ready);
      END;
    END;

    PROCEDURE CheckReportRunningInBackground@1();
    VAR
      JobQueueEntry@1000 : Record 472;
    BEGIN
      SetJobQueueEntryFilter(JobQueueEntry);
      IF JobQueueEntry.FINDFIRST THEN
        IF JobQueueEntry.DoesExistLocked THEN
          ERROR(DuplicateJobQueueRecordErr);
    END;

    LOCAL PROCEDURE SetJobQueueEntryFilter@3(VAR JobQueueEntry@1000 : Record 472);
    BEGIN
      JobQueueEntry.SETRANGE("Object ID to Run",CODEUNIT::"Customer Statement via Queue");
      JobQueueEntry.SETRANGE("Object Type to Run",JobQueueEntry."Object Type to Run"::Codeunit);
      JobQueueEntry.SETRANGE("User ID",USERID);
    END;

    BEGIN
    END.
  }
}

