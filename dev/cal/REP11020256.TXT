OBJECT Report 11020256 Liquidity Prognosis Medium Trm
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Liquidit„tsprognose mittelfristig;
               ENU=Liquidity Prognosis Medium Term;
               NLD=Liquiditeitsprognose middellange termijn;
               NOR=Likviditetsprognose Mellomlang Sikt;
               SVE=Likviditetsprognos mellan period];
    ProcessingOnly=Yes;
    OnPreReport=VAR
                  WeekPeriod@1100528800 : Record 2000000007;
                BEGIN
                  ExcelBuffer.DELETEALL;
                  GLSetup.GET;

                  IF (StartDate <> 0D) AND (EndDate <> 0D) THEN BEGIN
                    // If started in RTC
                    FromDate := StartDate;
                    EndToDate := EndDate;
                  END;

                  Counter := 0;
                  WeekPeriod.SETRANGE("Period Type",WeekPeriod."Period Type"::Week);
                  WeekPeriod.SETFILTER("Period Start",'%1..',FromDate);
                  IF WeekPeriod.FINDSET THEN BEGIN
                    REPEAT
                      Counter := Counter + 1;
                      PeriodArray[Counter] := WeekPeriod."Period Start";
                      PeriodDescArray[Counter] := WeekPeriod."Period Name";
                    UNTIL (WeekPeriod.NEXT = 0) OR (Counter = 13);
                  END;

                  EnterCellHead();
                END;

    OnPostReport=VAR
                   FileManagement@1100525001 : Codeunit 419;
                   ServerFileName@1100525000 : Text;
                 BEGIN
                   SheetName := 'Data';
                   ServerFileName := FileManagement.UploadFileSilent(FileName);

                   ExcelBuffer.UpdateBook(ServerFileName, SheetName);
                   ExcelBuffer.WriteSheet('', COMPANYNAME, USERID);
                   ExcelBuffer.CloseBook;
                   ExcelBuffer.OpenExcelWithName(FileName);
                   ExcelBuffer.DELETEALL;
                 END;

  }
  DATASET
  {
    { 8019;    ;DataItem;                    ;
               DataItemTable=Table11072003;
               OnPreDataItem=BEGIN
                               IF CostCenterFilterTxt <> '' THEN
                                 SETFILTER("Global Dimension 1 Code", CostCenterFilterTxt);
                             END;

               OnAfterGetRecord=BEGIN
                                  ReadProjectInstallments;
                                END;

               ReqFilterFields=No. }

    { 6836;    ;DataItem;                    ;
               DataItemTable=Table18;
               OnAfterGetRecord=BEGIN
                                  ReadCustomerLedgerEntry();
                                END;

               ReqFilterFields=No. }

    { 3182;    ;DataItem;                    ;
               DataItemTable=Table23;
               OnAfterGetRecord=BEGIN
                                  ReadVendorLedgerEntry();
                                END;

               ReqFilterFields=No. }

    { 4458;    ;DataItem;                    ;
               DataItemTable=Table38;
               DataItemTableView=WHERE(Document Type=CONST(Order),
                                       Status=FILTER(Released));
               OnPreDataItem=BEGIN
                               IF NOT InvolvePurchaseOrders THEN
                                 CurrReport.BREAK;

                               IF CostCenterFilterTxt <> '' THEN
                                 SETFILTER("Shortcut Dimension 1 Code", CostCenterFilterTxt);
                             END;

               OnAfterGetRecord=BEGIN
                                  ReadPurchaseOrders();
                                END;

               ReqFilterFields=No. }

    { 8266;    ;DataItem;                    ;
               DataItemTable=Table11020602;
               OnAfterGetRecord=BEGIN
                                  ReadGeneralLedger();
                                END;

               ReqFilterFields=G/L Account No. }

    { 5444;    ;DataItem;                    ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number);
               OnPreDataItem=BEGIN
                               NoOfRec := GenericTempTable.COUNT;
                               SETRANGE(Number, 1, NoOfRec);
                             END;

               OnAfterGetRecord=BEGIN
                                  IF (Number = 1) THEN
                                    GenericTempTable.FINDFIRST
                                  ELSE
                                    GenericTempTable.NEXT;

                                  EnterCell(RowNo,1,GenericTempTable."Key Code2");
                                  EnterCell(RowNo,2,GenericTempTable."Key Code3");
                                  EnterCell(RowNo,3,GenericTempTable.Text1);
                                  EnterCell(RowNo,4,GenericTempTable."Key Code4");
                                  EnterCell(RowNo,5,FORMAT(GenericTempTable.Dec13));
                                  EnterCell(RowNo,6,FORMAT(GenericTempTable.Dec1));
                                  EnterCell(RowNo,7,FORMAT(GenericTempTable.Dec2));
                                  EnterCell(RowNo,8,FORMAT(GenericTempTable.Dec3));
                                  EnterCell(RowNo,9,FORMAT(GenericTempTable.Dec4));
                                  EnterCell(RowNo,10,FORMAT(GenericTempTable.Dec5));
                                  EnterCell(RowNo,11,FORMAT(GenericTempTable.Dec6));
                                  EnterCell(RowNo,12,FORMAT(GenericTempTable.Dec7));
                                  EnterCell(RowNo,13,FORMAT(GenericTempTable.Dec8));
                                  EnterCell(RowNo,14,FORMAT(GenericTempTable.Dec9));
                                  EnterCell(RowNo,15,FORMAT(GenericTempTable.Dec10));
                                  EnterCell(RowNo,16,FORMAT(GenericTempTable.Dec11));
                                  EnterCell(RowNo,17,FORMAT(GenericTempTable.Dec12));
                                  EnterCell(RowNo,18,FORMAT(GenericTempTable.Dec14));
                                  EnterCell(RowNo,19,FORMAT(GenericTempTable.Dec15));

                                  RowNo := RowNo + 1;
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnInit=BEGIN
               InvPOEditable := TRUE;
             END;

      OnOpenPage=BEGIN
                   PeriodType := PeriodType::Week;

                   LiqPrognosisSetup.GET;
                   IF LiqPrognosisSetup."Purchase Orders in Prognosis" = LiqPrognosisSetup."Purchase Orders in Prognosis"::Never THEN
                     InvolvePurchaseOrders := FALSE;

                   IF LiqPrognosisSetup."Purchase Orders in Prognosis" = LiqPrognosisSetup."Purchase Orders in Prognosis"::Always THEN
                     InvolvePurchaseOrders := TRUE;

                   IF LiqPrognosisSetup."Purchase Orders in Prognosis" <> LiqPrognosisSetup."Purchase Orders in Prognosis"::Optional THEN
                     InvPOEditable := FALSE;
                 END;

    }
    CONTROLS
    {
      { 1100409000;;Container;
                  ContainerType=ContentArea }

      { 1100409001;1;Group  ;
                  CaptionML=[DEU=Optionen;
                             ENU=Options;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ];
                  GroupType=Group }

      { 1100409006;2;Field  ;
                  CaptionML=[DEU=Startdatum;
                             ENU=Start Date;
                             NLD=Startdatum;
                             NOR=Startdato;
                             SVE=Startdatum];
                  SourceExpr=StartDate }

      { 1100409007;2;Field  ;
                  CaptionML=[DEU=Enddatum;
                             ENU=End Date;
                             NLD=Einddatum;
                             NOR=Sluttdato;
                             SVE=Slutdatum];
                  SourceExpr=EndDate }

      { 1100409002;2;Field  ;
                  CaptionML=[DEU=Dateispeicherort Excel-Datei;
                             ENU=File Location Excel File;
                             NLD=File locatie excel bestand;
                             NOR=Filplassering for Excel-fil;
                             SVE=Filplats f”r Excel-fil];
                  SourceExpr=FileName;
                  OnAssistEdit=VAR
                                 FileManagementMgt@1100525001 : Codeunit 419;
                                 FilterString@1100525000 : Text;
                               BEGIN
                                 //FIXED FileName := CommonDialogMgt.OpenFile(Text010,FileName,2,'',0);
                                 FilterString := FileManagementMgt.GetToFilterText('','.xlt');
                                 FileName := FileManagementMgt.OpenFileDialog(Text010,FileName,FilterString);
                               END;
                                }

      { 1100409003;2;Field  ;
                  CaptionML=[DEU=Bestellungen in Prognose;
                             ENU=Purchase Orders in Prognosis;
                             NLD=Inkooporders meenemen in prognose;
                             NOR=Innkj›psordre i Prognose];
                  SourceExpr=InvolvePurchaseOrders;
                  Editable=InvPOEditable }

      { 1100409004;2;Field  ;
                  CaptionML=[DEU=Nach globaler Dimension sortieren;
                             ENU=Sort by Global Dimension;
                             NLD=Sorteren op kostenplaats;
                             NOR=Sorter etter Global Dimensjon];
                  SourceExpr=SortOnGlobalDim }

      { 1100409005;2;Field  ;
                  CaptionML=[NOR=Kostsenterfilter;
                             SVE=Filter f”r kostnadsst„lle];
                  SourceExpr=CostCenterFilterTxt;
                  CaptionClass='1,3,1';
                  TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                  OnLookup=VAR
                             GeneralLedgerSetup@1100409002 : Record 98;
                           BEGIN
                             GeneralLedgerSetup.GET;
                             EXIT(FormLookUpDimFilter(GeneralLedgerSetup."Global Dimension 1 Code",Text));
                           END;
                            }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      FileName@1100525001 : Text[250];
      SheetName@1100525000 : Text[250];
      ExcelBuffer@1100525009 : TEMPORARY Record 370;
      LiqPrognosisSetup@1100528800 : Record 11020600;
      GLSetup@1100528807 : Record 98;
      GenericTempTable@1100528802 : TEMPORARY Record 11020579;
      Counter@1100525011 : Integer;
      RowNo@1100528806 : Integer;
      Column@1210190004 : Integer;
      PeriodArray@1100525013 : ARRAY [13] OF Date;
      PeriodDescArray@1100525014 : ARRAY [13] OF Text[20];
      Text001@1100525015 : TextConst 'DEU=Beschreibung;ENU=Description;NLD=Omschrijving;NOR=Beskrivelse;SVE=Beskrivning';
      Text002@1100525016 : TextConst 'DEU=Code;ENU=Code;NLD=Code;NOR=Kode;SVE=Kod';
      Text003@1100525018 : TextConst 'DEU=Globaler Dimensionscode 1;ENU=Global Dimension 1 Code;NLD=Kostenplaats;NOR=Global dimensjon 1 - kode;SVE=Global dimension 1 kod';
      Text004@1100525019 : TextConst 'DEU=Bis Periode;ENU=To Period;NLD=Tot periode;NOR=Til periode;SVE=Till period';
      Text005@1100528811 : TextConst 'DEU=Bis Periode;ENU=Till Period;NLD=T/m periode;NOR=Til periode;SVE=Fr†n period';
      Text006@1100528808 : TextConst 'DEU=Gesperrt;ENU=Blocked;NLD=Geblokkeerd;NOR=Sperret;SVE=Sp„rrad';
      Text010@1100525035 : TextConst 'DEU=W„heln Sie eine Excel-Vorlage aus;ENU=Select an Excel Template;NLD=Selecteer een Excel template;NOR=Velg en Excel-mal;SVE=V„lj en Excel-mall';
      PaymentDate@1100528809 : Date;
      AmountLCY@1100528828 : Decimal;
      InvolvePurchaseOrders@1100528801 : Boolean;
      SortOnGlobalDim@1100528804 : Boolean;
      CostCenter@1100528805 : Code[20];
      CostCenterFilterTxt@1100528810 : Code[250];
      NoOfRec@1100528803 : Integer;
      PeriodType@1100528823 : 'Day,Week,Month,Quarter,Year,Accounting Period';
      FromDate@1100528821 : Date;
      EndToDate@1100528818 : Date;
      InvPOEditable@1100409001 : Boolean INDATASET;
      StartDate@1100409002 : Date;
      EndDate@1100409003 : Date;

    PROCEDURE ReadProjectInstallments@1210190001();
    VAR
      ProjectInstallment@1210190000 : Record 11012018;
      ProjectPrincipal@1100528800 : Record 11012005;
    BEGIN
      ProjectInstallment.SETRANGE("Project No.",Job."No.");
      IF ProjectInstallment.FINDSET THEN BEGIN
        REPEAT
          IF (ProjectInstallment."Invoice Price (LCY)" <> 0) OR (ProjectInstallment."Invoice in Process (LCY)" <> 0) THEN
          BEGIN
            IF (ProjectInstallment."Invoice Price (LCY)" <> 0) THEN
              AmountLCY := ProjectInstallment."Invoice Price (LCY)";
            IF (ProjectInstallment."Invoice in Process (LCY)" <> 0) THEN
              AmountLCY := ProjectInstallment."Invoice in Process (LCY)";

            CostCenter := '';
            IF SortOnGlobalDim THEN
              CostCenter := Job."Global Dimension 1 Code";

            IF ProjectPrincipal.GET(Job."No.", ProjectInstallment.Principal) THEN;

            PaymentDate := 0D;
            IF ProjectInstallment."Due Date Base" <> 0D THEN
              PaymentDate := CalcPaymentDateProject(ProjectInstallment.Principal,
                                                  ProjectInstallment."Due Date Base",
                                                  ProjectPrincipal."Specific Payment Terms Code");

            IF AmountLCY <> 0 THEN BEGIN
              IF (PaymentDate < FromDate) THEN
              BEGIN
                FillIndexFields(CostCenter,
                          ProjectInstallment.TABLECAPTION,
                          Job."No.",
                          Job."Global Dimension 1 Code",
                          '','');

                GenericTempTable.Text1 := Job.Description;
                GenericTempTable.Dec13 += AmountLCY;
                GenericTempTable.Dec14 += AmountLCY;
                GenericTempTable.MODIFY;
              END;

              IF (PaymentDate >= FromDate) AND (PaymentDate <= EndToDate) THEN
              BEGIN
                FillIndexFields(CostCenter,
                          ProjectInstallment.TABLECAPTION,
                          Job."No.",
                          Job."Global Dimension 1 Code",
                          '','');

                GenericTempTable.Text1 := Job.Description;
                GenericTempTable.Dec14 += AmountLCY;
                GenericTempTable.MODIFY;

                FOR Counter := 1 TO 12 DO BEGIN
                  IF (PaymentDate >= PeriodArray[Counter]) AND
                     (PaymentDate < PeriodArray[Counter+1]) THEN
                  BEGIN
                    FillPeriodColumn;
                    Counter := 12;
                  END;
                END;
              END;
            END
          END;
        UNTIL ProjectInstallment.NEXT = 0;
      END;
    END;

    PROCEDURE ReadCustomerLedgerEntry@1100528802();
    VAR
      CustomerLedgerEntry@1100528800 : Record 21;
    BEGIN
      CustomerLedgerEntry.SETCURRENTKEY("Customer No.","Posting Date","Currency Code");
      CustomerLedgerEntry.SETRANGE("Customer No.",Customer."No.");
      IF CostCenterFilterTxt <> '' THEN
        CustomerLedgerEntry.SETFILTER("Global Dimension 1 Code", CostCenterFilterTxt);

      IF CustomerLedgerEntry.FINDSET THEN BEGIN
        REPEAT
          CustomerLedgerEntry.CALCFIELDS("Remaining Amt. (LCY)");
          AmountLCY := CustomerLedgerEntry."Remaining Amt. (LCY)";

          CostCenter := '';
          IF SortOnGlobalDim THEN
            CostCenter := CustomerLedgerEntry."Global Dimension 1 Code";

          PaymentDate := CustomerLedgerEntry."Due Date";

          IF AmountLCY <> 0 THEN BEGIN
            IF (PaymentDate < FromDate) THEN
            BEGIN
              FillIndexFields(CostCenter,
                        CustomerLedgerEntry.TABLECAPTION,
                        Customer."No.",
                        CustomerLedgerEntry."Global Dimension 1 Code",
                        '','');

              GenericTempTable.Text1 := Customer.Name;
              GenericTempTable.Dec13 += AmountLCY;
              GenericTempTable.Dec14 += AmountLCY;
              IF CustomerLedgerEntry."On Hold" <> '' THEN
                GenericTempTable.Dec15 += AmountLCY;
              GenericTempTable.MODIFY;
            END;

            IF (PaymentDate >= FromDate) AND (PaymentDate <= EndToDate) THEN
            BEGIN
              FillIndexFields(CostCenter,
                        CustomerLedgerEntry.TABLECAPTION,
                        Customer."No.",
                        CustomerLedgerEntry."Global Dimension 1 Code",
                        '','');

              GenericTempTable.Text1 := Customer.Name;
              GenericTempTable.Dec14 += AmountLCY;
              IF CustomerLedgerEntry."On Hold" <> '' THEN
                GenericTempTable.Dec15 += AmountLCY;
              GenericTempTable.MODIFY;

              FOR Counter := 1 TO 12 DO BEGIN
                IF (PaymentDate >= PeriodArray[Counter]) AND (PaymentDate < PeriodArray[Counter+1]) THEN
                BEGIN
                  FillPeriodColumn;
                  Counter := 12;
                END;
              END;
            END;
          END;
        UNTIL CustomerLedgerEntry.NEXT = 0;
      END;
    END;

    PROCEDURE ReadVendorLedgerEntry@1100528800();
    VAR
      VendorLedgerEntry@1100528800 : Record 25;
    BEGIN
      VendorLedgerEntry.SETCURRENTKEY("Vendor No.","Posting Date","Currency Code");
      VendorLedgerEntry.SETRANGE("Vendor No.",Vendor."No.");
      IF CostCenterFilterTxt <> '' THEN
        VendorLedgerEntry.SETFILTER("Global Dimension 1 Code", CostCenterFilterTxt);

      IF VendorLedgerEntry.FINDSET THEN BEGIN
        REPEAT
          VendorLedgerEntry.CALCFIELDS("Remaining Amt. (LCY)");
          AmountLCY := VendorLedgerEntry."Remaining Amt. (LCY)";

          CostCenter := '';
          IF SortOnGlobalDim THEN
            CostCenter := VendorLedgerEntry."Global Dimension 1 Code";

          PaymentDate := VendorLedgerEntry."Due Date";

          IF AmountLCY <> 0 THEN BEGIN
            IF (PaymentDate < FromDate) THEN
            BEGIN
              FillIndexFields(CostCenter,
                        VendorLedgerEntry.TABLECAPTION,
                        Vendor."No.",
                        VendorLedgerEntry."Global Dimension 1 Code",
                        '','');

              GenericTempTable.Text1 := Vendor.Name;
              GenericTempTable.Dec13 += AmountLCY;
              GenericTempTable.Dec14 += AmountLCY;
              IF VendorLedgerEntry."On Hold" <> '' THEN
                GenericTempTable.Dec15 += AmountLCY;
              GenericTempTable.MODIFY;
            END;

            IF (PaymentDate >= FromDate) AND (PaymentDate <= EndToDate) AND (AmountLCY <> 0) THEN
            BEGIN
              FillIndexFields(CostCenter,
                        VendorLedgerEntry.TABLECAPTION,
                        Vendor."No.",
                        VendorLedgerEntry."Global Dimension 1 Code",
                        '','');

              GenericTempTable.Text1 := Vendor.Name;
              GenericTempTable.Dec14 += AmountLCY;
              IF VendorLedgerEntry."On Hold" <> '' THEN
                GenericTempTable.Dec15 += AmountLCY;
              GenericTempTable.MODIFY;

              FOR Counter := 1 TO 12 DO BEGIN
                IF (PaymentDate >= PeriodArray[Counter]) AND
                   (PaymentDate < PeriodArray[Counter+1]) THEN
                BEGIN
                  FillPeriodColumn;
                  Counter := 12;
                END;
              END;
            END;
          END;

        UNTIL VendorLedgerEntry.NEXT = 0;
      END;
    END;

    PROCEDURE ReadPurchaseOrders@1100528807();
    VAR
      AmountOrdered@1100528808 : Decimal;
      AmountOrderedInclVAT@1100528800 : Decimal;
      AmountReceived@1100528804 : Decimal;
      AmountInvoiced@1100528803 : Decimal;
      AmountRecNotInvoiced@1100528802 : Decimal;
      AmountToInvoice@1100528801 : Decimal;
      AmountLCY@1100527650 : Decimal;
    BEGIN
      "Purchase Header".GetReceivedInvoicedAmounts(
        AmountOrdered, AmountOrderedInclVAT,
        AmountReceived, AmountInvoiced, AmountRecNotInvoiced, AmountToInvoice, AmountLCY,
        0,'','');

      AmountLCY := 0;

      IF (AmountOrdered <> 0) AND (AmountReceived < AmountOrdered) THEN BEGIN
        AmountLCY := (AmountOrdered - AmountReceived) * AmountOrderedInclVAT/AmountOrdered;
        AmountLCY := ROUND(AmountLCY,GLSetup."Amount Rounding Precision");
      END;

      CostCenter := '';
      IF SortOnGlobalDim THEN
        CostCenter := "Purchase Header"."Shortcut Dimension 1 Code";

      PaymentDate := 0D;
      PaymentDate :="Purchase Header"."Due Date";
      IF PaymentDate = 0D THEN
        IF "Purchase Header"."Posting Date" <> 0D THEN
          PaymentDate := CalcPaymentDateVendor("Purchase Header"."Buy-from Vendor No.", "Purchase Header"."Posting Date");

      IF AmountLCY <> 0 THEN BEGIN
        IF (PaymentDate < FromDate) THEN
        BEGIN
          FillIndexFields(CostCenter,
                    "Purchase Header".TABLECAPTION,
                    "Purchase Header"."No.",
                    "Purchase Header"."Shortcut Dimension 1 Code",
                    '','');

          GenericTempTable.Dec13 += AmountLCY;
          GenericTempTable.Dec14 += AmountLCY;
          IF "Purchase Header"."On Hold" <> '' THEN
            GenericTempTable.Dec15 += AmountLCY;
          GenericTempTable.MODIFY;
        END;

        IF (PaymentDate >= FromDate) AND (PaymentDate <= EndToDate) THEN
        BEGIN
          FillIndexFields(CostCenter,
                    "Purchase Header".TABLECAPTION,
                    "Purchase Header"."No.",
                    "Purchase Header"."Shortcut Dimension 1 Code",
                    '','');

          GenericTempTable.Dec14 += AmountLCY;
          IF "Purchase Header"."On Hold" <> '' THEN
            GenericTempTable.Dec15 += AmountLCY;
          GenericTempTable.MODIFY;

          FOR Counter := 1 TO 12 DO BEGIN
            IF (PaymentDate >= PeriodArray[Counter]) AND
               (PaymentDate < PeriodArray[Counter+1]) THEN
             BEGIN
              FillPeriodColumn;
              Counter := 12;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE ReadGeneralLedger@1100528801();
    VAR
      GeneralLedgerEntries@1100528800 : Record 17;
    BEGIN
      GeneralLedgerEntries.SETCURRENTKEY("G/L Account No.","Posting Date");
      GeneralLedgerEntries.SETRANGE("G/L Account No.","General Ledger Liquidity"."G/L Account No.");
      GeneralLedgerEntries.SETFILTER("Posting Date",'<%1',FromDate);
      IF CostCenterFilterTxt <> '' THEN
        GeneralLedgerEntries.SETFILTER("Global Dimension 1 Code", CostCenterFilterTxt);

      IF GeneralLedgerEntries.FINDSET THEN BEGIN
        REPEAT
          AmountLCY := GeneralLedgerEntries.Amount;

          CostCenter := '';
          IF SortOnGlobalDim THEN
            CostCenter := GeneralLedgerEntries."Global Dimension 1 Code";

          "General Ledger Liquidity".CALCFIELDS(Description);

          FillIndexFields(CostCenter,
                    GeneralLedgerEntries.TABLECAPTION,
                    GeneralLedgerEntries."G/L Account No.",
                    GeneralLedgerEntries."Global Dimension 1 Code",
                    '','');

          GenericTempTable.Text1 := "General Ledger Liquidity".Description;
          GenericTempTable.Dec13 += AmountLCY;
          GenericTempTable.Dec14 += AmountLCY;
          GenericTempTable.MODIFY;

        UNTIL GeneralLedgerEntries.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE FormLookUpDimFilter@57(Dim@1000 : Code[20];VAR Text@1001 : Text[1024]) : Boolean;
    VAR
      DimVal@1002 : Record 349;
      DimValList@1003 : Page 560;
    BEGIN
      IF Dim = '' THEN
        EXIT(FALSE);
      DimValList.LOOKUPMODE(TRUE);
      DimVal.SETRANGE("Dimension Code",Dim);
      DimValList.SETTABLEVIEW(DimVal);
      IF DimValList.RUNMODAL = ACTION::LookupOK THEN BEGIN
        DimValList.GETRECORD(DimVal);
        Text := DimValList.GetSelectionFilter;
        EXIT(TRUE);
      END;
      EXIT(FALSE)
    END;

    PROCEDURE FillIndexFields@1100528808(Key1@1100528800 : Code[38];Key2@1100528801 : Code[38];Key3@1100528802 : Code[38];Key4@1100528803 : Code[38];Key5@1100528804 : Code[38];Key6@1100528805 : Code[38]);
    BEGIN
      IF (NOT GenericTempTable.GET(Key1, Key2, Key3, Key4, Key5, Key6)) THEN BEGIN
        GenericTempTable.INIT;
        GenericTempTable."Key Code1" := Key1;
        GenericTempTable."Key Code2" := Key2;
        GenericTempTable."Key Code3" := Key3;
        GenericTempTable."Key Code4" := Key4;
        GenericTempTable."Key Code5" := Key5;
        GenericTempTable."Key Code6" := Key6;
        GenericTempTable.INSERT;
      END;
    END;

    PROCEDURE FillPeriodColumn@1100528806();
    BEGIN
      CASE Counter OF
        1:
          GenericTempTable.Dec1 += AmountLCY;
        2:
          GenericTempTable.Dec2 += AmountLCY;
        3:
          GenericTempTable.Dec3 += AmountLCY;
        4:
          GenericTempTable.Dec4 += AmountLCY;
        5:
          GenericTempTable.Dec5 += AmountLCY;
        6:
          GenericTempTable.Dec6 += AmountLCY;
        7:
          GenericTempTable.Dec7 += AmountLCY;
        8:
          GenericTempTable.Dec8 += AmountLCY;
        9:
          GenericTempTable.Dec9 += AmountLCY;
        10:
          GenericTempTable.Dec10 += AmountLCY;
        11:
          GenericTempTable.Dec11 += AmountLCY;
        12:
          GenericTempTable.Dec12 += AmountLCY;
      END;
      GenericTempTable.MODIFY;
    END;

    PROCEDURE CalcPaymentDateProject@1100528803(CustomerNo@1100528800 : Code[20];DueDate@1100528801 : Date;ProjectPaymentTerm@1100528802 : Code[10]) NewDate : Date;
    VAR
      Customer@1100528803 : Record 18;
      PaymentTerms@1100528804 : Record 3;
    BEGIN
      IF ProjectPaymentTerm <> '' THEN BEGIN
        IF PaymentTerms.GET(ProjectPaymentTerm) THEN
          NewDate := CALCDATE(PaymentTerms."Due Date Calculation", DueDate)
        ELSE
          NewDate := DueDate;
      END ELSE BEGIN
        IF Customer.GET(CustomerNo) THEN BEGIN
          IF PaymentTerms.GET(Customer."Payment Terms Code") THEN
            NewDate := CALCDATE(PaymentTerms."Due Date Calculation", DueDate)
          ELSE
            NewDate := DueDate;
        END;
      END;
    END;

    PROCEDURE CalcPaymentDateCustomer@1210190015(CustomerNo@1100528800 : Code[20];DueDate@1100528801 : Date) NewDate : Date;
    VAR
      Customer@1100528803 : Record 18;
      PaymentTerms@1100528804 : Record 3;
    BEGIN
      IF Customer.GET(CustomerNo) THEN BEGIN
        IF PaymentTerms.GET(Customer."Payment Terms Code") THEN
          NewDate := CALCDATE(PaymentTerms."Due Date Calculation", DueDate)
        ELSE
          NewDate := DueDate;
      END;
    END;

    PROCEDURE CalcPaymentDateVendor@1100528805(VendorNo@1100528800 : Code[20];DueDate@1100528801 : Date) NewDate : Date;
    VAR
      Vendor@1100528803 : Record 23;
      PaymentTerms@1100528804 : Record 3;
    BEGIN
      IF Vendor.GET(VendorNo) THEN BEGIN
        IF PaymentTerms.GET(Vendor."Payment Terms Code") THEN
          NewDate := CALCDATE(PaymentTerms."Due Date Calculation", DueDate)
        ELSE
          NewDate := DueDate;
      END;
    END;

    PROCEDURE EnterCellHead@1100525000();
    BEGIN
      EnterCell(1,1,Text001);   // Description
      EnterCell(1,2,Text002);   // Code
      EnterCell(1,3,Text001);   // Description
      EnterCell(1,4,Text003);   // Cost Center
      EnterCell(1,5,Text004);   // To Period

      FOR Counter := 1 TO 12 DO
        EnterCell(1,5+Counter,PeriodDescArray[Counter]);    // Period Description

      EnterCell(1,18,Text005);  // Till Period
      EnterCell(1,19,Text006);  // Blocked
      RowNo := 2;
    END;

    PROCEDURE EnterCell@1100525003(Row@1100525000 : Integer;Column@1100525001 : Integer;Value@1100525002 : Text[250]);
    BEGIN
      ExcelBuffer.INIT;
      ExcelBuffer.VALIDATE("Row No.",Row);
      ExcelBuffer.VALIDATE("Column No.",Column);
      ExcelBuffer."Cell Value as Text" := Value;
      ExcelBuffer.INSERT;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

