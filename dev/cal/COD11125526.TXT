OBJECT Codeunit 11125526 Plant Request Mgt. (SMF)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      PlantSetupRec@1100525000 : Record 11012550;
      Text001@1100525001 : TextConst 'DEU=Status der Werkzeuganfrage ist ''%1''. Er”ffnung nicht zul„ssig.;ENU=Status of the plant request is ''%1'', reopen not allowed.;NLD=Status van de materieelaanvraag is ''%1'', heropenen niet toegestaan.;SVE=Status f”r Maskinsbeg„ran „r ''%1'', f†r inte ”ppnas igen.';

    PROCEDURE RunRequest@1100525000(VAR Rec@1100525000 : Record 11125529);
    VAR
      lvReqHeadRec@1100525001 : Record 11125529;
      lvReqLineRec@1100525002 : Record 11125530;
      lvPlantReqRec@1100525003 : Record 11020520;
      lvPlantReqLineRec@1100525006 : Record 11020521;
      PlantNeed@1100409000 : Record 11012579;
      InventorySetup@1100529601 : Record 313;
      Project@1100529600 : Record 11072003;
      ProjectLocation@1100529602 : Record 11012011;
      Location@1100529603 : Record 14;
      lvNoSeriesMgtCU@1100525004 : Codeunit 396;
      lvPlantRequestNoExist@1100525005 : Boolean;
      lvNextLineNo@1100525007 : Integer;
    BEGIN
      lvReqHeadRec.COPY(Rec);
      WITH lvReqHeadRec DO BEGIN
        //* Check Header
        TESTFIELD(Status, Status::Open);
        TESTFIELD("Transfer Date");
        TESTFIELD("From Location");
        TESTFIELD("To Location");
        TESTFIELD("Source No.");
        TESTFIELD("Plant Company");
        IF "Plant Request No." <> '' THEN BEGIN
          lvPlantRequestNoExist := lvReqHeadRec.GetPlantRequestData(lvPlantReqRec);
          IF lvPlantRequestNoExist THEN
            lvPlantReqRec.TESTFIELD(Status, lvPlantReqRec.Status::Open);
        END;

        PlantSetupRec.CHANGECOMPANY("Plant Company");
        PlantSetupRec.GET;

        //* Check Lines
        lvReqLineRec.RESET;
        lvReqLineRec.SETRANGE("Request No.", "No.");
        lvReqLineRec.SETRANGE(Type, lvReqLineRec.Type::Plant, lvReqLineRec.Type::Item);
        lvReqLineRec.FINDSET;  //* Must be at least 1 plant, set or item line
        REPEAT
          CASE lvReqLineRec.Type OF
            lvReqLineRec.Type::Plant,
            lvReqLineRec.Type::Set,
            lvReqLineRec.Type::Item:
              BEGIN
                lvReqLineRec.TESTFIELD("Plant/Item");
                lvReqLineRec.TESTFIELD(Quantity);
              END;
          END;
          IF lvReqLineRec.Type = lvReqLineRec.Type::Item THEN
            IF Type = Type::OtherTransfers THEN
              lvReqLineRec.FIELDERROR(Type);
        UNTIL lvReqLineRec.NEXT = 0;

        //* Insert/modify header
        lvPlantReqRec.RESET;
        lvPlantReqRec.CHANGECOMPANY("Plant Company");
        lvPlantReqLineRec.CHANGECOMPANY("Plant Company");
        PlantNeed.CHANGECOMPANY("Plant Company");
        IF NOT lvPlantRequestNoExist THEN BEGIN
          PlantSetupRec.TESTFIELD("Plant Request Nos.");
          lvPlantReqRec.INIT;
          lvPlantReqRec."No." := '';
          lvPlantReqRec."No. Series" := PlantSetupRec."Plant Request Nos.";
          IF "Plant Company" <> COMPANYNAME THEN
            lvNoSeriesMgtCU.SetFromOtherCompany("Plant Company");
          lvPlantReqRec."No." := lvNoSeriesMgtCU.GetNextNo(lvPlantReqRec."No. Series", 0D, TRUE);
          lvPlantReqRec.TESTFIELD("No.");
          lvPlantReqRec.INSERT;
          "Plant Request No." := lvPlantReqRec."No.";
        END ELSE BEGIN
          lvPlantReqRec.GET("Plant Request No.");
          lvPlantReqLineRec.SETRANGE("Plant Request No.", lvPlantReqRec."No.");
          lvPlantReqLineRec.DELETEALL;
        END;
        lvPlantReqRec.Type := Type;
        lvPlantReqRec."From Location" := "From Location";
        lvPlantReqRec."To Location" := "To Location";
        lvPlantReqRec."Transfer Date" := "Transfer Date";
        lvPlantReqRec.Status := lvPlantReqRec.Status::Requested;
        lvPlantReqRec."Created by" := USERID;
        lvPlantReqRec."Created on" := CURRENTDATETIME;
        lvPlantReqRec."Requested on" := CURRENTDATETIME;
        lvPlantReqRec."Requested by" := USERID;
        lvPlantReqRec."From Location Name" := "From Location Name";
        lvPlantReqRec."From Location Name 2" := "From Location Name 2";
        lvPlantReqRec."From Location Address" := "From Location Address";
        lvPlantReqRec."From Location Address 2" := "From Location Address 2";
        lvPlantReqRec."From Location City" := "From Location City";
        lvPlantReqRec."From Location Contact" := "From Location Contact";
        lvPlantReqRec."From Location Contact Phone No" := "From Location Contact Phone No";
        lvPlantReqRec."From Location E-Mail" := "From Location E-Mail";
        lvPlantReqRec."From Location Post Code" := "From Location Post Code";
        lvPlantReqRec."From Location Address Code" := "From Location Address Code";
        lvPlantReqRec."To Location Name" := "To Location Name";
        lvPlantReqRec."To Location Name 2" := "To Location Name 2";
        lvPlantReqRec."To Location Address" := "To Location Address";
        lvPlantReqRec."To Location Address 2" := "To Location Address 2";
        lvPlantReqRec."To Location City" := "To Location City";
        lvPlantReqRec."To Location Contact" := "To Location Contact";
        lvPlantReqRec."To Location Contact Phone No" := "To Location Contact Phone No";
        lvPlantReqRec."To Location E-Mail" := "To Location E-Mail";
        lvPlantReqRec."To Location Post Code" := "To Location Post Code";
        lvPlantReqRec."To Location Address Code" := "To Location Address Code";
        IF "To Employee No." <> '' THEN BEGIN
          lvPlantReqRec."To Employee Company" := ConvertEmployeeCompanySMP2EmployeeCompanyInPlant("To Employee Company", "Plant Company");
          lvPlantReqRec."To Employee No." := "To Employee No.";
        END;
        lvPlantReqRec."Your Reference" := "Your Reference";
        lvPlantReqRec."Collect Order" := "Collect Order";
        lvPlantReqRec.MODIFY;

        Project.CHANGECOMPANY("Plant Company");
        InventorySetup.CHANGECOMPANY("Plant Company");
        InventorySetup.GET;
        ProjectLocation.CHANGECOMPANY("Plant Company");
        Location.CHANGECOMPANY("Plant Company");

        //* Insert lines
        lvNextLineNo := 10000;
        lvReqLineRec.RESET;
        lvReqLineRec.SETRANGE("Request No.", "No.");
        lvReqLineRec.FINDSET;
        REPEAT
          lvPlantReqLineRec.INIT;
          lvPlantReqLineRec."Plant Request No." := lvPlantReqRec."No.";
          lvPlantReqLineRec."Line No." := lvNextLineNo;
          CASE lvReqLineRec.Type OF
            lvReqLineRec.Type::Plant:
              BEGIN
                lvPlantReqLineRec.Type := lvPlantReqLineRec.Type::Plant;
                lvPlantReqLineRec."Plant Type" := lvReqLineRec."Plant/Item";
                lvPlantReqLineRec."Plant No." := lvReqLineRec."Plant No.";
                IF lvReqLineRec."Expected return on" >= lvPlantReqRec."Transfer Date" THEN
                  lvPlantReqLineRec."Expected return on" := lvReqLineRec."Expected return on";
                IF PlantNeed.GET(lvReqLineRec."Location Copied Need", lvReqLineRec."Line No. Copied Need") THEN BEGIN
                  IF (PlantNeed.Type = PlantNeed.Type::Plant) AND (PlantNeed."Plant Type" = lvReqLineRec."Plant/Item") THEN BEGIN
                    lvPlantReqLineRec."Location Copied Need" := lvReqLineRec."Location Copied Need";
                    lvPlantReqLineRec."Line No. Copied Need" := lvReqLineRec."Line No. Copied Need";
                  END;
                END;
              END;
            lvReqLineRec.Type::Set:
              BEGIN
                lvPlantReqLineRec.Type := lvPlantReqLineRec.Type::Plant;
                lvPlantReqLineRec."Set Code" := lvReqLineRec."Plant/Item";
                IF lvReqLineRec."Expected return on" >= lvPlantReqRec."Transfer Date" THEN
                  lvPlantReqLineRec."Expected return on" := lvReqLineRec."Expected return on";
              END;
            lvReqLineRec.Type::Item:
              BEGIN
                lvPlantReqLineRec.Type := lvPlantReqLineRec.Type::Item;
                lvPlantReqLineRec."Item No." := lvReqLineRec."Plant/Item";
                IF PlantNeed.GET(lvReqLineRec."Location Copied Need", lvReqLineRec."Line No. Copied Need") THEN BEGIN
                  IF (PlantNeed.Type = PlantNeed.Type::Item) AND (PlantNeed."Item No." = lvReqLineRec."Plant/Item") THEN BEGIN
                    lvPlantReqLineRec."Location Copied Need" := lvReqLineRec."Location Copied Need";
                    lvPlantReqLineRec."Line No. Copied Need" := lvReqLineRec."Line No. Copied Need";
                  END;
                END;
                IF Project.GET(lvReqLineRec."Project No.") THEN BEGIN
                  lvPlantReqLineRec."Project No. (Inventory)" := lvReqLineRec."Project No.";
                  IF lvReqLineRec."Project Stock" THEN
                    IF InventorySetup.JobInventoryByStockRelease(lvReqLineRec."Project No.") THEN
                      lvPlantReqLineRec."Project Stock" := lvReqLineRec."Project Stock";
                  lvPlantReqLineRec.Deliver := lvReqLineRec.Deliver;
                  IF lvReqLineRec."Ship To Location" <> '' THEN
                    CASE lvReqLineRec.Deliver OF
                      lvReqLineRec.Deliver::Location:
                        IF Location.GET(lvReqLineRec."Ship To Location") THEN
                          lvPlantReqLineRec."Ship To Location" := lvReqLineRec."Ship To Location";
                      lvReqLineRec.Deliver::"Project Location":
                        IF ProjectLocation.GET(lvReqLineRec."Project No.", lvReqLineRec."Ship To Location") THEN
                          lvPlantReqLineRec."Ship To Location" := lvReqLineRec."Ship To Location";
                     END;
                END;
             END;
            ELSE
              lvPlantReqLineRec.Type := lvPlantReqLineRec.Type::Text;
          END;
          IF lvPlantReqLineRec.Type <> lvPlantReqLineRec.Type::Text THEN BEGIN
            lvPlantReqLineRec.Quantity := lvReqLineRec.Quantity;
            lvPlantReqLineRec.Element := lvReqLineRec.Element;
            IF lvReqLineRec."To Employee No." <> '' THEN BEGIN
              lvPlantReqLineRec."To Employee Company" :=
                ConvertEmployeeCompanySMP2EmployeeCompanyInPlant(lvReqLineRec."To Employee Company", "Plant Company");
              lvPlantReqLineRec."To Employee No." := lvReqLineRec."To Employee No.";
            END;
          END;
          lvPlantReqLineRec.Description := lvReqLineRec.Description;
          lvPlantReqLineRec."Description 2" := lvReqLineRec."Description 2";
          lvPlantReqLineRec.INSERT;
          lvNextLineNo := lvNextLineNo + 10000;

          IF ((lvPlantReqLineRec.Type = lvPlantReqLineRec.Type::Plant) OR (lvPlantReqLineRec.Type = lvPlantReqLineRec.Type::Item)) AND
             (lvPlantReqLineRec."Location Copied Need" <> '') AND (lvPlantReqLineRec."Line No. Copied Need" <> 0)
          THEN BEGIN
            IF PlantNeed.GET(lvPlantReqLineRec."Location Copied Need", lvPlantReqLineRec."Line No. Copied Need") THEN BEGIN
              PlantNeed.CalculateQuantityToCopy(PlantNeed, FALSE, "Plant Company");
              PlantNeed.MODIFY;
            END;
          END;
        UNTIL lvReqLineRec.NEXT = 0;

        Status := Status::Requested;
        MODIFY;
      END;
      Rec := lvReqHeadRec;
    END;

    PROCEDURE RunOpen@1100525001(VAR Rec@1100525000 : Record 11125529);
    VAR
      lvReqHeadRec@1100525002 : Record 11125529;
      lvPlantReqRec@1100525001 : Record 11020520;
      lvPlantRequestNoExist@1100525003 : Boolean;
    BEGIN
      lvReqHeadRec.COPY(Rec);
      WITH lvReqHeadRec DO BEGIN
        TESTFIELD(Status, Status::Requested);

        lvPlantRequestNoExist := lvReqHeadRec.GetPlantRequestData(lvPlantReqRec);
        IF lvPlantRequestNoExist THEN BEGIN
          IF lvPlantReqRec.Status > lvPlantReqRec.Status::Requested THEN
            ERROR(Text001, lvPlantReqRec.Status);
        END;

        IF lvPlantRequestNoExist THEN BEGIN
          lvPlantReqRec.CHANGECOMPANY("Plant Company");
          lvPlantReqRec.GET("Plant Request No.");
          lvPlantReqRec.Status := lvPlantReqRec.Status::Open;
          lvPlantReqRec.MODIFY;
        END;

        Status := Status::Open;
        MODIFY;
      END;
      Rec := lvReqHeadRec;
    END;

    PROCEDURE RunAddPresentPlantOnRequest@1100485025(ReqRec@1100485001 : Record 11125529);
    VAR
      lvReqLineRec@1100485000 : Record 11125530;
      lvInventoryRec@1100485002 : Record 11012555;
      PlantTypeRec@1100525000 : Record 11012551;
      lvNextLineNo@1100485003 : Integer;
      lvPlantNo@1100485004 : Code[20];
      lvText001@1100485005 : TextConst 'DEU=M”chten Sie das Werkzeug, das an Standort ''%1'' vorhanden ist, ab %2 eingeben?;ENU=Do you want to insert the plant present on location ''%1'' per %2 ?;NLD=Wilt u het materieel dat op locatie ''%1'' aanwezig is per %2 opvoeren?;NOR=Vil du sette inn den maskin som finnes p† lokasjon ''%1'' per %2?;SVE=Vill du infoga den Maskin som finns p† lagerst„lle ''%1'' per %2?';
    BEGIN
      //* Copied from C11020502 for 'normal' Plant Requests. Modified for 'Plant Request (SMF)' / 'Plant Request Line (SMF)'
      WITH ReqRec DO BEGIN
        TESTFIELD(Status, Status::Open);
        IF Type = Type::Arrival THEN
          FIELDERROR(Type);
        TESTFIELD("From Location");
        TESTFIELD("To Location");
        TESTFIELD("Transfer Date");
        TESTFIELD("Plant Company");

        IF NOT CONFIRM(lvText001, FALSE, "From Location", "Transfer Date") THEN
          EXIT;

        IF "Plant Company" <> COMPANYNAME THEN BEGIN
          lvInventoryRec.CHANGECOMPANY("Plant Company");
          PlantTypeRec.CHANGECOMPANY("Plant Company");
        END;

        lvReqLineRec.RESET;
        lvReqLineRec.SETRANGE("Request No.", "No.");
        lvReqLineRec.SETRANGE(Type, lvReqLineRec.Type::Plant);
        lvReqLineRec.DELETEALL(TRUE);

        lvReqLineRec.RESET;
        lvReqLineRec.SETRANGE("Request No.", "No.");
        IF lvReqLineRec.FINDLAST THEN
          lvNextLineNo := lvReqLineRec."Line No.";
        lvNextLineNo := lvNextLineNo + 10000;

        lvInventoryRec.RESET;
        lvInventoryRec.SETRANGE(Removed, FALSE);
        lvInventoryRec.SETRANGE(Location, "From Location");
        lvInventoryRec.SETFILTER("Present from", '<= %1', "Transfer Date");
        lvInventoryRec.SETFILTER(Quantity,'>0');
        IF lvInventoryRec.FINDSET(FALSE, FALSE) THEN BEGIN
          REPEAT
            lvPlantNo := lvInventoryRec."Plant No.";
            IF lvPlantNo = '0' THEN
              lvPlantNo := '';

            lvReqLineRec.RESET;
            lvReqLineRec.SETRANGE("Request No.", "No.");
            lvReqLineRec.SETRANGE(Type, lvReqLineRec.Type::Plant);
            lvReqLineRec.SETRANGE("Plant/Item", lvInventoryRec."Plant Type");
            lvReqLineRec.SETRANGE("Plant No.", lvPlantNo);
            IF NOT lvReqLineRec.FINDFIRST THEN BEGIN
              lvReqLineRec.INIT;
              lvReqLineRec."Request No." := "No.";
              lvReqLineRec.InitRecord;
              lvReqLineRec."Line No." := lvNextLineNo;
              lvReqLineRec.Type := lvReqLineRec.Type::Plant;
              lvReqLineRec."Plant/Item" := lvInventoryRec."Plant Type";
              lvReqLineRec."Plant No." := lvPlantNo;
              PlantTypeRec.GET(lvInventoryRec."Plant Type");
              lvReqLineRec.Bulk := PlantTypeRec.Bulk;
              lvReqLineRec.FillPlantDescription();
              lvReqLineRec.Quantity := lvInventoryRec.Quantity;
              lvReqLineRec.INSERT(TRUE);
              lvNextLineNo := lvNextLineNo + 10000;
            END ELSE BEGIN
              lvReqLineRec.Quantity := lvReqLineRec.Quantity + lvInventoryRec.Quantity;
              lvReqLineRec.MODIFY(TRUE);
            END;
          UNTIL lvInventoryRec.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE RunAddPresentPlantSelectOnReq@1100525002(ReqRec@1100525000 : Record 11125529);
    VAR
      ReqLineRec@1100525004 : Record 11125530;
      InventoryRec@1100525006 : Record 11012555;
      PlantTypeRec@1100525003 : Record 11012551;
      TmpPlantInventRec@1100525002 : TEMPORARY Record 11012555;
      PlantInventPage@1100525001 : Page 11012559;
      LineNo@1100525005 : Integer;
      PlantNo@1100525007 : Code[20];
    BEGIN
      //* Copied from C11020502 for 'normal' Plant Requests. Modified for 'Plant Request (SMF)' / 'Plant Request Line (SMF)'
      WITH ReqRec DO BEGIN
        TESTFIELD(Status, Status::Open);
        IF Type = Type::Arrival THEN
          FIELDERROR(Type);
        TESTFIELD("From Location");
        TESTFIELD("To Location");
        TESTFIELD("Transfer Date");
        TESTFIELD("Plant Company");

        IF "Plant Company" <> COMPANYNAME THEN BEGIN
          InventoryRec.CHANGECOMPANY("Plant Company");
          PlantTypeRec.CHANGECOMPANY("Plant Company");
        END;

        InventoryRec.RESET;
        InventoryRec.FILTERGROUP(9);
        InventoryRec.SETRANGE(Removed, FALSE);
        InventoryRec.SETRANGE(Location, "From Location");
        InventoryRec.SETFILTER("Present from", '<=%1', "Transfer Date");
        InventoryRec.SETFILTER("Date Filter", '<=%1', "Transfer Date");
        InventoryRec.SETFILTER(Quantity, '>%1', 0);
        InventoryRec.SETFILTER("Quantity Filter", '>%1', 0);
        InventoryRec.FILTERGROUP(0);
        PlantInventPage.SetDetailSelection(2);  //* Detail Level: 2=Plant No.
        PlantInventPage.SetMultiSelection();  //* Then Detail Level not editable in form, so in returned in the level that is set
        PlantInventPage.SetInventoryLocationsSameProjectDisabled;
        IF "Plant Company" <> COMPANYNAME THEN
          PlantInventPage.SetCompany("Plant Company");
        PlantInventPage.SETTABLEVIEW(InventoryRec);
        PlantInventPage.LOOKUPMODE(TRUE);
        IF PlantInventPage.RUNMODAL <> ACTION::LookupOK THEN
          EXIT;
        IF NOT PlantInventPage.GetMarkedRecords(TmpPlantInventRec) THEN //* In tmprec compressed quantity is returned
          EXIT;

        TmpPlantInventRec.RESET;
        IF TmpPlantInventRec.FINDSET THEN BEGIN
          ReqLineRec.RESET;
          ReqLineRec.SETRANGE("Request No.", "No.");
          IF ReqLineRec.FINDLAST THEN
            LineNo := ReqLineRec."Line No."
          ELSE
            LineNo := 0;
          REPEAT
            PlantNo := TmpPlantInventRec."Plant No.";
            IF PlantNo = '0' THEN
              PlantNo := '';
            //TmpPlantInventRec.CALCFIELDS(Bulk);   //* Can not be used, plant often(/mostly) in another company
            PlantTypeRec.GET(TmpPlantInventRec."Plant Type");
            TmpPlantInventRec.Bulk := PlantTypeRec.Bulk;
            ReqLineRec.RESET;
            ReqLineRec.SETRANGE("Request No.", "No.");
            ReqLineRec.SETRANGE("Plant/Item", TmpPlantInventRec."Plant Type");
            ReqLineRec.SETRANGE("Plant No.", PlantNo);
            IF NOT TmpPlantInventRec.Bulk THEN BEGIN
              IF NOT ReqLineRec.ISEMPTY THEN
                TmpPlantInventRec.Quantity := 0;   //* Unique plant no. already on plant request
            END ELSE BEGIN
              IF ReqLineRec.FINDSET THEN BEGIN         //* Correction: minus qty already on plant request
                REPEAT
                  TmpPlantInventRec.Quantity := TmpPlantInventRec.Quantity - ReqLineRec.Quantity;
                UNTIL (ReqLineRec.NEXT = 0) OR (TmpPlantInventRec.Quantity <= 0)
              END;
            END;
            IF TmpPlantInventRec.Quantity > 0 THEN BEGIN
              LineNo := LineNo + 10000;
              ReqLineRec.INIT;
              ReqLineRec."Request No." := "No.";
              ReqLineRec.InitRecord;
              ReqLineRec."Line No." := LineNo;
              ReqLineRec.Type := ReqLineRec.Type::Plant;
              ReqLineRec."Plant/Item" := TmpPlantInventRec."Plant Type";
              ReqLineRec."Plant No." := PlantNo;
              ReqLineRec.Bulk := TmpPlantInventRec.Bulk;
              ReqLineRec.FillPlantDescription();
              ReqLineRec.Quantity := TmpPlantInventRec.Quantity;
              ReqLineRec.INSERT(TRUE);
            END;
          UNTIL TmpPlantInventRec.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE RunAddPresentPlantTypesSelectOnReq@1100525003(ReqRec@1100525000 : Record 11125529);
    VAR
      ReqLineRec@1100525004 : Record 11125530;
      InventoryRec@1100525006 : Record 11012555;
      PlantTypeRec@1100525003 : Record 11012551;
      TmpPlantInventRec@1100525002 : TEMPORARY Record 11012555;
      PlantInventPage@1100525001 : Page 11012559;
      LineNo@1100525005 : Integer;
    BEGIN
      WITH ReqRec DO BEGIN
        TESTFIELD(Status, Status::Open);
        TESTFIELD(Type, Type::Removal);
        TESTFIELD("From Location");
        TESTFIELD("To Location");
        TESTFIELD("Transfer Date");
        TESTFIELD("Plant Company");

        IF "Plant Company" <> COMPANYNAME THEN BEGIN
          InventoryRec.CHANGECOMPANY("Plant Company");
          PlantTypeRec.CHANGECOMPANY("Plant Company");
        END;

        InventoryRec.RESET;
        InventoryRec.FILTERGROUP(9);
        InventoryRec.SETRANGE(Removed, FALSE);
        InventoryRec.SETRANGE(Location, "From Location");
        InventoryRec.SETFILTER("Present from", '<=%1', "Transfer Date");
        InventoryRec.SETFILTER("Date Filter", '<=%1', "Transfer Date");
        InventoryRec.SETFILTER(Quantity, '>%1', 0);
        InventoryRec.SETFILTER("Quantity Filter", '>%1', 0);
        InventoryRec.FILTERGROUP(0);
        PlantInventPage.SetDetailSelection(1);  //* Detail Level: 1=Plant Type
        PlantInventPage.SetMultiSelection();  //* Then Detail Level not editable in form, so in returned in the level that is set
        PlantInventPage.SetInventoryLocationsSameProjectDisabled;
        IF "Plant Company" <> COMPANYNAME THEN
          PlantInventPage.SetCompany("Plant Company");
        PlantInventPage.SETTABLEVIEW(InventoryRec);
        PlantInventPage.LOOKUPMODE(TRUE);
        IF PlantInventPage.RUNMODAL <> ACTION::LookupOK THEN
          EXIT;
        IF NOT PlantInventPage.GetMarkedRecords(TmpPlantInventRec) THEN //* In tmprec compressed quantity is returned
          EXIT;

        TmpPlantInventRec.RESET;
        IF TmpPlantInventRec.FINDSET THEN BEGIN
          ReqLineRec.RESET;
          ReqLineRec.SETRANGE("Request No.", "No.");
          IF ReqLineRec.FINDLAST THEN
            LineNo := ReqLineRec."Line No."
          ELSE
            LineNo := 0;
          REPEAT
            PlantTypeRec.GET(TmpPlantInventRec."Plant Type");
            TmpPlantInventRec.Bulk := PlantTypeRec.Bulk;
            ReqLineRec.RESET;
            ReqLineRec.SETRANGE("Request No.", "No.");
            ReqLineRec.SETRANGE("Plant/Item", TmpPlantInventRec."Plant Type");
            IF ReqLineRec.FINDSET THEN BEGIN         //* Correction: minus qty already on plant request
              REPEAT
                TmpPlantInventRec.Quantity := TmpPlantInventRec.Quantity - ReqLineRec.Quantity;
              UNTIL (ReqLineRec.NEXT = 0) OR (TmpPlantInventRec.Quantity <= 0)
            END;
            IF TmpPlantInventRec.Quantity > 0 THEN BEGIN
              LineNo := LineNo + 10000;
              ReqLineRec.INIT;
              ReqLineRec."Request No." := "No.";
              ReqLineRec.InitRecord;
              ReqLineRec."Line No." := LineNo;
              ReqLineRec.Type := ReqLineRec.Type::Plant;
              ReqLineRec."Plant/Item" := TmpPlantInventRec."Plant Type";
              ReqLineRec.Bulk := TmpPlantInventRec.Bulk;
              ReqLineRec.FillPlantDescription();
              ReqLineRec.Quantity := TmpPlantInventRec.Quantity;
              ReqLineRec.INSERT(TRUE);
            END;
          UNTIL TmpPlantInventRec.NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE ConvertEmployeeCompanySMP2EmployeeCompanyInPlant@1100529000(EmployeeCompanySMF@1100529000 : Text;PlantCompany@1100529001 : Text) EmployeeCompanyPlant : Text;
    BEGIN
      EmployeeCompanyPlant := EmployeeCompanySMF;
      IF EmployeeCompanyPlant = '' THEN BEGIN
        IF COMPANYNAME <> PlantCompany THEN
          EmployeeCompanyPlant := COMPANYNAME;
      END ELSE BEGIN
        IF EmployeeCompanyPlant = PlantCompany THEN
          EmployeeCompanyPlant := '';
      END;
    END;

    BEGIN
    END.
  }
}

