OBJECT Codeunit 12013633 ExFlow Copy Document Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EXF512000,4PS;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1100285006 : TextConst 'ENU=Please enter a Document No.;SVE=Skriv in ett dokumentnr';
      Text002@1100285010 : TextConst 'ENU=The existing lines for %1 %2 will be deleted.\\;SVE=De befintliga raderna f”r %1 %2 kommer att tas bort.\\';
      Text003@1100285011 : TextConst 'ENU=Do you want to continue?;SVE=Vill du forts„tta?';
      Text004@1100285014 : TextConst 'ENU=The document line(s) with a G/L account where direct posting is not allowed have not been copied to the new document by the Copy Document batch job.;SVE=Dokumentraderna med redov.konto d„r direktbokf”ring inte „r till†ten har inte kopierats till det nya dokumentet med batch-jobbet Kopiera dokument.';
      Text006@1100285020 : TextConst 'ENU=NOTE: A Payment Discount was Granted by %1 %2.;SVE=OBS! En kassarabatt har beviljats av %1 %2.';
      Text007@1100285019 : TextConst 'ENU=Quote,Blanket Order,Order,Invoice,Credit Memo,Posted Shipment,Posted Invoice,Posted Credit Memo,Posted Return Receipt;SVE=Offert,Avropsorder,Order,Faktura,Kreditnota,Bokf”rd utleverans,Bokf”rd faktura,Bokf”rd kreditnota,Bokf”rd returinleverans';
      Text009@1100285018 : TextConst 'ENU=NOTE: A Payment Discount was Received by %1 %2.;SVE=OBS! En kassarabatt har erh†llits av %1 %2.';
      Text010@1100285025 : TextConst 'ENU=There are no negative purchase lines to move.;SVE=Det finns inga negativa ink”psrader att flytta.';
      Text014@1100285024 : TextConst 'ENU=Receipt No.,Invoice No.,Return Shipment No.,Credit Memo No.;SVE=Inleveransnr,Fakturanr,Returutleveransnr,Kreditnotanr';
      Text015@1100285022 : TextConst 'ENU=%1 %2:;SVE=%1 %2:';
      Text017@1100285023 : TextConst 'ENU="Inv. No. ,Rcpt. No. ,Cr. Memo No. ,Rtrn. Shpt. No. ";SVE="Fakt.nr,Inlev.nr,Kr.notanr,Ret.inlev.nr "';
      Text018@1100285026 : TextConst 'ENU=%1 - %2:;SVE=%1 - %2:';
      Text019@1100285012 : TextConst 'ENU=Exact Cost Reversing Link has not been created for all copied document lines.;SVE=En l„nk f”r exakt kostnads†terf”ring har inte skapats f”r alla kopierade dokumentrader.';
      Text020@1100285013 : TextConst 'ENU=\;SVE=\';
      Text022@1100285029 : TextConst 'ENU=Copying document lines...\;SVE=Kopierar dokumentrader...\';
      Text023@1100285028 : TextConst 'ENU=Processing source lines      #1######\;SVE=Behandlar ursprungsrader     #1######\';
      Text024@1100285027 : TextConst 'ENU=Creating new lines           #2######;SVE=Skapar nya rader             #2######';
      EXF01@1100285001 : TextConst 'ENU=Do you want to copy the image file that is attached to the source document to the %1?;SVE=Vill du kopiera bildfilen som „r kopplad till ursprungsdokumentet till %1?';
      EXF02@1100285000 : TextConst 'ENU=WARNING!!!\If you confirm, the image file that is currently attached to the target document will be overwritten!\\Do you want to copy the image file that is attached to the source document?;SVE=VARNING!!!\Om du bekr„ftar kommer bildfilen som f”r n„rvarande „r kopplad att bli ”verskriven!\\Vill du kopiera bildfilen som „r kopplad till ursprungsdokumentet?';
      Currency@1100285015 : Record 4;
      TransferOldExtLines@1100285007 : Codeunit 379;
      Window@1100285021 : Dialog;
      WindowUpdateTime@1100285030 : Time;
      IncludeHeader@1100285005 : Boolean;
      RecalculateLines@1100285004 : Boolean;
      MoveNegLines@1100285003 : Boolean;
      CreateToHeader@1100285002 : Boolean;
      ExactCostRevMandatory@1100285016 : Boolean;
      HideDialog@1100285017 : Boolean;
      CopyApprovers@1100285031 : Boolean;
      PurchDocType@1100285009 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Receipt,Posted Invoice,Posted Return Shipment,Posted Credit Memo';
      EXF03@1100285008 : TextConst 'ENU=Do you want to inactivate approval for the coppied %1?;SVE=Vill du inaktivera attest f”r den kopierade %1?';
      EXF04@1100285032 : TextConst 'ENU=Document approval inactivated through copy document function;SVE=Attest av dokumentet inaktverades genom kopiera dokument funktionen';

    PROCEDURE UpdateExFlow@1100285000(FromDocType@1100285007 : Option;FromDocNo@1100285006 : Code[20];OldPurchHeader@1100285008 : Record 38;VAR ToPurchHeader@1100285009 : Record 38);
    VAR
      TempPurchHeader@1100285005 : TEMPORARY Record 38;
      ExDoc2@1100285004 : Record 12013612;
      ExFlow@1100285002 : Codeunit 12013601;
      TempImageName@1100285001 : Text[250];
      TempImageName2@1100285000 : Text[250];
      PostedPurchInvHeader@1100285003 : Record 122;
      PostedCreMemoHeader@1100285010 : Record 124;
      Confirmed@1100285011 : Boolean;
      FromExDoc2@1100285012 : Record 12013612;
    BEGIN
      IF FromDocType = 7 THEN BEGIN
          PostedPurchInvHeader.GET(FromDocNo);
          PostedPurchInvHeader.CALCFIELDS("Amount Including VAT");
          PostedPurchInvHeader.CALCFIELDS(Amount);
          ToPurchHeader.VALIDATE("Gross Invoice Amount ExFlow",PostedPurchInvHeader."Amount Including VAT");
          ToPurchHeader."Import VAT Amount" := PostedPurchInvHeader."Amount Including VAT" - PostedPurchInvHeader.Amount;
          Confirmed := ConfirmSetReadyForPosting(ToPurchHeader);
      END;

      IF FromDocType = 9 THEN BEGIN
          PostedCreMemoHeader.GET(FromDocNo);
          PostedCreMemoHeader.CALCFIELDS("Amount Including VAT");
          PostedCreMemoHeader.CALCFIELDS(Amount);
          ToPurchHeader.VALIDATE("Gross Invoice Amount ExFlow",PostedCreMemoHeader."Amount Including VAT");
          ToPurchHeader."Import VAT Amount" := PostedCreMemoHeader."Amount Including VAT" - PostedCreMemoHeader.Amount;
          Confirmed := ConfirmSetReadyForPosting(ToPurchHeader);
      END;

      WITH ToPurchHeader DO BEGIN
        TempPurchHeader."Document Type" := FromDocType;
        TempPurchHeader."No." := FromDocNo;
        TempImageName2 := ExFlow.GetPurchHeaderImageName(TempPurchHeader."Document Type",TempPurchHeader."No.",FromExDoc2);
        IF TempImageName2 <> '' THEN BEGIN  // From document had an document attached
          // Check if an document is already attached
          TempImageName := ExFlow.GetPurchHeaderImageName(OldPurchHeader."Document Type",OldPurchHeader."No.",FromExDoc2);
          IF TempImageName = '' THEN BEGIN
            IF NOT Confirmed THEN
              IF NOT CONFIRM(STRSUBSTNO(EXF01,"Document Type"),FALSE) THEN
                EXIT;
            ExDoc2.INIT;
            ExDoc2."Entry No." := 0;
            ExDoc2."Document Type" := "Document Type";
            ExDoc2."Document No." := "No.";
            ExDoc2."Image Name" := TempImageName2;
            IF FromExDoc2."Image Blob".HASVALUE THEN BEGIN
              FromExDoc2.CALCFIELDS("Image Blob");
              ExDoc2."Image Blob" := FromExDoc2."Image Blob";
            END;
            ExDoc2.INSERT;
          END ELSE BEGIN
            IF NOT Confirmed THEN
              IF NOT CONFIRM(STRSUBSTNO(EXF02,"Document Type"),FALSE) THEN
                EXIT;
            ExDoc2.RetrieveRecord(ExDoc2,"Document Type","No.");
            ExDoc2."Image Name" := TempImageName2;
            IF FromExDoc2."Image Blob".HASVALUE THEN BEGIN
              FromExDoc2.CALCFIELDS("Image Blob");
              ExDoc2."Image Blob" := FromExDoc2."Image Blob";
            END;
            ExDoc2.MODIFY;
          END;
        END;
      END;
    END;

    PROCEDURE SetProperties@2(NewIncludeHeader@1001 : Boolean;NewRecalculateLines@1000 : Boolean;NewMoveNegLines@1006 : Boolean;NewCreateToHeader@1002 : Boolean;NewHideDialog@1003 : Boolean;NewExactCostRevMandatory@1004 : Boolean;NewApplyFully@1005 : Boolean;NewIncludeOrgInvInfo@1070000 : Boolean;NewCopyApprovers@1100285000 : Boolean);
    BEGIN
      IncludeHeader := NewIncludeHeader;
      RecalculateLines := NewRecalculateLines;
      MoveNegLines := NewMoveNegLines;
      CreateToHeader := NewCreateToHeader;
      HideDialog := NewHideDialog;
      ExactCostRevMandatory := NewExactCostRevMandatory;
      CopyApprovers := NewCopyApprovers;
    END;

    PROCEDURE CopyPurchDoc@12013591(FromDocType@1005 : Option;FromDocNo@1004 : Code[20];VAR ToPurchHeader@1017 : Record 12013587);
    VAR
      PaymentTerms@1022 : Record 3;
      ToPurchLine@1015 : Record 12013588;
      OldPurchHeader@1014 : Record 12013587;
      FromPurchHeader@1013 : Record 38;
      FromPurchLine@1012 : Record 39;
      FromPurchRcptHeader@1011 : Record 120;
      FromPurchInvHeader@1009 : Record 122;
      FromPurchInvLine@1008 : Record 123;
      FromReturnShptHeader@1002 : Record 6650;
      FromPurchCrMemoHeader@1007 : Record 124;
      FromPurchCrMemoLine@1006 : Record 125;
      VendLedgEntry@1003 : Record 25;
      GLSetup@1023 : Record 98;
      Vend@1024 : Record 23;
      NextLineNo@1020 : Integer;
      ItemChargeAssgntNextLineNo@1016 : Integer;
      LinesNotCopied@1018 : Integer;
      MissingExCostRevLink@1025 : Boolean;
    BEGIN
      WITH ToPurchHeader DO BEGIN
        IF NOT CreateToHeader THEN BEGIN
          IF FromDocNo = '' THEN
            ERROR(Text000);
          FIND;
        END;
        TransferOldExtLines.ClearLineNumbers;
        CASE FromDocType OF
          PurchDocType::Quote,
          PurchDocType::"Blanket Order",
          PurchDocType::Order,
          PurchDocType::Invoice,
          PurchDocType::"Return Order",
          PurchDocType::"Credit Memo":
            BEGIN
              FromPurchHeader.GET(PurchHeaderDocType(FromDocType),FromDocNo);

              IF NOT IncludeHeader AND NOT RecalculateLines THEN BEGIN
                FromPurchHeader.TESTFIELD("Buy-from Vendor No.","Buy-from Vendor No.");
                FromPurchHeader.TESTFIELD("Pay-to Vendor No.","Pay-to Vendor No.");
                FromPurchHeader.TESTFIELD("Vendor Posting Group","Vendor Posting Group");
                FromPurchHeader.TESTFIELD("Gen. Bus. Posting Group","Gen. Bus. Posting Group");
                FromPurchHeader.TESTFIELD("Currency Code","Currency Code");
              END;
            END;
          PurchDocType::"Posted Receipt":
            BEGIN
              FromPurchRcptHeader.GET(FromDocNo);
              IF NOT IncludeHeader AND NOT RecalculateLines THEN BEGIN
                FromPurchRcptHeader.TESTFIELD("Buy-from Vendor No.","Buy-from Vendor No.");
                FromPurchRcptHeader.TESTFIELD("Pay-to Vendor No.","Pay-to Vendor No.");
                FromPurchRcptHeader.TESTFIELD("Vendor Posting Group","Vendor Posting Group");
                FromPurchRcptHeader.TESTFIELD("Gen. Bus. Posting Group","Gen. Bus. Posting Group");
                FromPurchRcptHeader.TESTFIELD("Currency Code","Currency Code");
              END;
            END;
          PurchDocType::"Posted Invoice":
            BEGIN
              FromPurchInvHeader.GET(FromDocNo);
              FromPurchInvHeader.TESTFIELD("Prepayment Invoice",FALSE);
              WarnPurchInvoicePmtDisc(ToPurchHeader,FromPurchHeader,FromDocType,FromDocNo);
              IF NOT IncludeHeader AND NOT RecalculateLines THEN BEGIN
                FromPurchInvHeader.TESTFIELD("Buy-from Vendor No.","Buy-from Vendor No.");
                FromPurchInvHeader.TESTFIELD("Pay-to Vendor No.","Pay-to Vendor No.");
                FromPurchInvHeader.TESTFIELD("Vendor Posting Group","Vendor Posting Group");
                FromPurchInvHeader.TESTFIELD("Gen. Bus. Posting Group","Gen. Bus. Posting Group");
                FromPurchInvHeader.TESTFIELD("Currency Code","Currency Code");
              END;
            END;
          PurchDocType::"Posted Return Shipment":
            BEGIN
              FromReturnShptHeader.GET(FromDocNo);
              IF NOT IncludeHeader AND NOT RecalculateLines THEN BEGIN
                FromReturnShptHeader.TESTFIELD("Buy-from Vendor No.","Buy-from Vendor No.");
                FromReturnShptHeader.TESTFIELD("Pay-to Vendor No.","Pay-to Vendor No.");
                FromReturnShptHeader.TESTFIELD("Vendor Posting Group","Vendor Posting Group");
                FromReturnShptHeader.TESTFIELD("Gen. Bus. Posting Group","Gen. Bus. Posting Group");
                FromReturnShptHeader.TESTFIELD("Currency Code","Currency Code");
              END;
            END;
          PurchDocType::"Posted Credit Memo":
            BEGIN
              FromPurchCrMemoHeader.GET(FromDocNo);
              WarnPurchInvoicePmtDisc(ToPurchHeader,FromPurchHeader,FromDocType,FromDocNo);
              IF NOT IncludeHeader AND NOT RecalculateLines THEN BEGIN
                FromPurchCrMemoHeader.TESTFIELD("Buy-from Vendor No.","Buy-from Vendor No.");
                FromPurchCrMemoHeader.TESTFIELD("Pay-to Vendor No.","Pay-to Vendor No.");
                FromPurchCrMemoHeader.TESTFIELD("Vendor Posting Group","Vendor Posting Group");
                FromPurchCrMemoHeader.TESTFIELD("Gen. Bus. Posting Group","Gen. Bus. Posting Group");
                FromPurchCrMemoHeader.TESTFIELD("Currency Code","Currency Code");
              END;
            END;
        END;

        ToPurchLine.LOCKTABLE;

        IF CreateToHeader THEN BEGIN
          INSERT(TRUE);
          ToPurchLine.SETRANGE("Inbound Document No.","Inbound Document No.");
        END ELSE BEGIN
          ToPurchLine.SETRANGE("Inbound Document No.","Inbound Document No.");
          IF IncludeHeader THEN BEGIN
            IF ToPurchLine.FIND('-') THEN BEGIN
              COMMIT;
              IF NOT
                 CONFIRM(
                   Text002 +
                   Text003,TRUE,
                   "Document Type","Inbound Document No.")
              THEN
                EXIT;
              ToPurchLine.DELETEALL(TRUE);
            END;
          END;
        END;

        IF ToPurchLine.FIND('+') THEN
          NextLineNo := ToPurchLine."Line No."
        ELSE
          NextLineNo := 0;

        IF NOT RECORDLEVELLOCKING THEN
          LOCKTABLE(TRUE,TRUE);

        IF IncludeHeader THEN BEGIN
          IF Vend.GET(FromPurchHeader."Buy-from Vendor No.") THEN
            Vend.CheckBlockedVendOnDocs(Vend,FALSE);
          IF Vend.GET(FromPurchHeader."Pay-to Vendor No.") THEN
            Vend.CheckBlockedVendOnDocs(Vend,FALSE);
          OldPurchHeader := ToPurchHeader;
          CASE FromDocType OF
            PurchDocType::Quote,
            PurchDocType::"Blanket Order",
            PurchDocType::Order,
            PurchDocType::Invoice,
            PurchDocType::"Return Order",
            PurchDocType::"Credit Memo":
              BEGIN
                TRANSFERFIELDS(FromPurchHeader,FALSE);
                IF FromDocType IN [PurchDocType::Quote,PurchDocType::"Blanket Order"] THEN
                  IF OldPurchHeader."Posting Date" = 0D THEN
                    "Posting Date" := WORKDATE
                  ELSE
                    "Posting Date" := OldPurchHeader."Posting Date";
              END;
            PurchDocType::"Posted Receipt":
              BEGIN
                ToPurchHeader.VALIDATE("Buy-from Vendor No.",FromPurchRcptHeader."Buy-from Vendor No.");
                TRANSFERFIELDS(FromPurchRcptHeader,FALSE);
              END;
            PurchDocType::"Posted Invoice":
              BEGIN
                ToPurchHeader.VALIDATE("Buy-from Vendor No.",FromPurchInvHeader."Buy-from Vendor No.");
                TRANSFERFIELDS(FromPurchInvHeader,FALSE);
              END;
            PurchDocType::"Posted Return Shipment":
              BEGIN
                ToPurchHeader.VALIDATE("Buy-from Vendor No.",FromReturnShptHeader."Buy-from Vendor No.");
                TRANSFERFIELDS(FromReturnShptHeader,FALSE);
              END;
            PurchDocType::"Posted Credit Memo":
              BEGIN
                ToPurchHeader.VALIDATE("Buy-from Vendor No.",FromPurchCrMemoHeader."Buy-from Vendor No.");
                TRANSFERFIELDS(FromPurchCrMemoHeader,FALSE);
              END;
          END;
          IF MoveNegLines OR IncludeHeader THEN
            ToPurchHeader.VALIDATE("Location Code");
          IF MoveNegLines THEN
            VALIDATE("Order Address Code");

          "Posting Description" := OldPurchHeader."Posting Description";

          "No. Printed" := 0;
          "Applies-to Doc. Type" := "Applies-to Doc. Type"::" ";
          "Applies-to Doc. No." := '';
          "Applies-to ID" := '';

          IF ((FromDocType = PurchDocType::"Posted Invoice") AND
              ("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"])) OR
             ((FromDocType = PurchDocType::"Posted Credit Memo") AND
              NOT ("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]))
          THEN BEGIN
            VendLedgEntry.SETCURRENTKEY("Document No.");
            IF FromDocType = PurchDocType::"Posted Invoice" THEN
              VendLedgEntry.SETRANGE("Document Type",VendLedgEntry."Document Type"::Invoice)
            ELSE
              VendLedgEntry.SETRANGE("Document Type",VendLedgEntry."Document Type"::"Credit Memo");
            VendLedgEntry.SETRANGE("Document No.",FromDocNo);
            VendLedgEntry.SETRANGE("Vendor No.","Pay-to Vendor No.");
            VendLedgEntry.SETRANGE(Open,TRUE);
            IF VendLedgEntry.FIND('-') THEN BEGIN
              IF FromDocType = PurchDocType::"Posted Invoice" THEN BEGIN
                "Applies-to Doc. Type" := "Applies-to Doc. Type"::Invoice;
                "Applies-to Doc. No." := FromDocNo;
              END ELSE BEGIN
                "Applies-to Doc. Type" := "Applies-to Doc. Type"::"Credit Memo";
                "Applies-to Doc. No." := FromDocNo;
              END;
              VendLedgEntry.CALCFIELDS("Remaining Amount");
              VendLedgEntry."Amount to Apply" := VendLedgEntry."Remaining Amount";
              VendLedgEntry."Accepted Payment Tolerance" := 0;
              VendLedgEntry."Accepted Pmt. Disc. Tolerance" := FALSE;
              CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",VendLedgEntry);
            END;
          END;

          IF "Document Type" IN ["Document Type"::"Blanket Order","Document Type"::Quote] THEN
            "Posting Date" := 0D;

          Correction := FALSE;
          IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
            "Expected Receipt Date" := 0D;
            GLSetup.GET;
            Correction := GLSetup."Mark Cr. Memos as Corrections";
            IF ("Payment Terms Code" <> '') AND ("Document Date" <> 0D) THEN
              PaymentTerms.GET("Payment Terms Code")
            ELSE
              CLEAR(PaymentTerms);
            IF NOT PaymentTerms."Calc. Pmt. Disc. on Cr. Memos" THEN BEGIN
              "Payment Terms Code" := '';
              "Due Date" := 0D;
              "Payment Discount %" := 0;
              "Pmt. Discount Date" := 0D;
            END;
          END;

          IF CreateToHeader THEN BEGIN
            VALIDATE("Payment Terms Code");
            MODIFY(TRUE);
          END ELSE
            MODIFY;
        END
        ELSE BEGIN // Do not include header but still apply the documents
          "Applies-to Doc. Type" := "Applies-to Doc. Type"::" ";
          "Applies-to Doc. No." := '';
          "Applies-to ID" := '';

          IF ((FromDocType = PurchDocType::"Posted Invoice") AND
              ("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"])) OR
             ((FromDocType = PurchDocType::"Posted Credit Memo") AND
              NOT ("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]))
          THEN BEGIN
            VendLedgEntry.SETCURRENTKEY("Document No.");
            IF FromDocType = PurchDocType::"Posted Invoice" THEN
              VendLedgEntry.SETRANGE("Document Type",VendLedgEntry."Document Type"::Invoice)
            ELSE
              VendLedgEntry.SETRANGE("Document Type",VendLedgEntry."Document Type"::"Credit Memo");
            VendLedgEntry.SETRANGE("Document No.",FromDocNo);
            VendLedgEntry.SETRANGE("Vendor No.","Pay-to Vendor No.");
            VendLedgEntry.SETRANGE(Open,TRUE);
            IF VendLedgEntry.FIND('-') THEN BEGIN
              IF FromDocType = PurchDocType::"Posted Invoice" THEN BEGIN
                "Applies-to Doc. Type" := "Applies-to Doc. Type"::Invoice;
                "Applies-to Doc. No." := FromDocNo;
                MODIFY;
              END ELSE BEGIN
                "Applies-to Doc. Type" := "Applies-to Doc. Type"::"Credit Memo";
                "Applies-to Doc. No." := FromDocNo;
                MODIFY;
              END;
              VendLedgEntry.CALCFIELDS("Remaining Amount");
              VendLedgEntry."Amount to Apply" := VendLedgEntry."Remaining Amount";
              VendLedgEntry."Accepted Payment Tolerance" := 0;
              VendLedgEntry."Accepted Pmt. Disc. Tolerance" := FALSE;
              CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",VendLedgEntry);
            END;
          END;
        END;

        LinesNotCopied := 0;
        CASE FromDocType OF
          PurchDocType::Quote,
          PurchDocType::"Blanket Order",
          PurchDocType::Order,
          PurchDocType::Invoice,
          PurchDocType::"Return Order",
          PurchDocType::"Credit Memo":
            BEGIN
              ItemChargeAssgntNextLineNo := 0;
              FromPurchLine.RESET;
              FromPurchLine.SETRANGE("Document Type",FromPurchHeader."Document Type");
              FromPurchLine.SETRANGE("Document No.",FromPurchHeader."No.");
              IF MoveNegLines THEN
                FromPurchLine.SETFILTER(Quantity,'<=0');
              IF FromPurchLine.FIND('-') THEN
                REPEAT
                  IF CopyPurchLine(
                    ToPurchHeader,ToPurchLine,FromPurchHeader,FromPurchLine,
                    NextLineNo,LinesNotCopied,FALSE)
                  THEN BEGIN
                    IF FromPurchLine.Type = FromPurchLine.Type::"Charge (Item)" THEN
                      CopyFromPurchDocAssgntToLine(ToPurchLine,FromPurchLine,ItemChargeAssgntNextLineNo);

                    // Copy approvers
                    IF CopyApprovers THEN
                      CopyApproversToDoc(FromPurchLine."Document Type",FromPurchLine."Document No.",FromPurchLine."Line No.",
                                         ToPurchLine);
                  END;
                UNTIL FromPurchLine.NEXT = 0;
            END;
          PurchDocType::"Posted Receipt":
            BEGIN
              // Not supported
            END;
          PurchDocType::"Posted Invoice":
            BEGIN
              FromPurchHeader.TRANSFERFIELDS(FromPurchInvHeader);
              FromPurchInvLine.RESET;
              FromPurchInvLine.SETRANGE("Document No.",FromPurchInvHeader."No.");
              IF MoveNegLines THEN
                FromPurchInvLine.SETFILTER(Quantity,'<=0');
              CopyPurchInvLinesToDoc(ToPurchHeader,FromPurchInvLine,LinesNotCopied,MissingExCostRevLink);
            END;
          PurchDocType::"Posted Return Shipment":
            BEGIN
              // Not supported
            END;
          PurchDocType::"Posted Credit Memo":
            BEGIN
              FromPurchHeader.TRANSFERFIELDS(FromPurchCrMemoHeader);
              FromPurchCrMemoLine.RESET;
              FromPurchCrMemoLine.SETRANGE("Document No.",FromPurchCrMemoHeader."No.");
              IF MoveNegLines THEN
                FromPurchCrMemoLine.SETFILTER(Quantity,'<=0');
              CopyPurchCrMemoLinesToDoc(ToPurchHeader,FromPurchCrMemoLine,LinesNotCopied,MissingExCostRevLink);
            END;
        END;
      END;

      IF MoveNegLines THEN
        DeletePurchLinesWithNegQty(FromPurchHeader,FALSE);

      CASE TRUE OF
        MissingExCostRevLink AND (LinesNotCopied <> 0): MESSAGE(Text019 + Text020 + Text004);
        MissingExCostRevLink: MESSAGE(Text019);
        LinesNotCopied <> 0: MESSAGE(Text004);
      END;
    END;

    LOCAL PROCEDURE CopyPurchLine@12013597(VAR ToPurchHeader@1011 : Record 12013587;VAR ToPurchLine@1001 : Record 12013588;VAR FromPurchHeader@1012 : Record 38;VAR FromPurchLine@1003 : Record 39;VAR NextLineNo@1006 : Integer;VAR LinesNotCopied@1005 : Integer;RecalculateAmount@1004 : Boolean) : Boolean;
    VAR
      GLAcc@1002 : Record 15;
      CopyThisLine@1000 : Boolean;
    BEGIN
      CopyThisLine := TRUE;
      IF ((ToPurchHeader."Language Code" <> FromPurchHeader."Language Code") OR RecalculateLines) AND
         (FromPurchLine."Attached to Line No." <> 0) OR
         FromPurchLine."Prepayment Line"
      THEN
        EXIT(FALSE);

      IF RecalculateLines AND NOT FromPurchLine."System-Created Entry" THEN
        ToPurchLine.INIT
      ELSE
        ToPurchLine.TRANSFERFIELDS(FromPurchLine);
      NextLineNo := NextLineNo + 10000;
      ToPurchLine."Document Type" := ToPurchHeader."Document Type";
      ToPurchLine."Inbound Document No." := ToPurchHeader."Inbound Document No.";
      ToPurchLine."Line No." := NextLineNo;
      ToPurchLine.VALIDATE("Currency Code",FromPurchHeader."Currency Code");
      IF ToPurchLine.Type <> ToPurchLine.Type::" " THEN
        ToPurchLine.VALIDATE("Line Discount %");


      IF RecalculateLines AND NOT FromPurchLine."System-Created Entry" THEN BEGIN
        ToPurchLine.VALIDATE(Type,FromPurchLine.Type);
        ToPurchLine.VALIDATE(Description,FromPurchLine.Description);
        ToPurchLine.VALIDATE("Description 2",FromPurchLine."Description 2");
        IF (FromPurchLine.Type <> 0) AND (FromPurchLine."No." <> '') THEN BEGIN
          IF ToPurchLine.Type = ToPurchLine.Type::"G/L Account" THEN BEGIN
            ToPurchLine."No." := FromPurchLine."No.";
            IF GLAcc."No." <> FromPurchLine."No." THEN
              GLAcc.GET(FromPurchLine."No.");
            CopyThisLine := GLAcc."Direct Posting";
            IF CopyThisLine THEN
              ToPurchLine.VALIDATE("No.",FromPurchLine."No.");
          END ELSE
            ToPurchLine.VALIDATE("No.",FromPurchLine."No.");
          ToPurchLine.VALIDATE("Variant Code",FromPurchLine."Variant Code");
          ToPurchLine.VALIDATE("Location Code",FromPurchLine."Location Code");
          ToPurchLine.VALIDATE("Unit of Measure",FromPurchLine."Unit of Measure");
          ToPurchLine.VALIDATE("Unit of Measure Code",FromPurchLine."Unit of Measure Code");
          ToPurchLine.VALIDATE(Quantity,FromPurchLine.Quantity);
          IF FromPurchLine.Type <> FromPurchLine.Type::Item THEN BEGIN
            ToPurchHeader.TESTFIELD("Currency Code",FromPurchHeader."Currency Code");
            ToPurchLine.VALIDATE("Direct Unit Cost",FromPurchLine."Direct Unit Cost");
            ToPurchLine.VALIDATE("Line Discount %",FromPurchLine."Line Discount %");
            IF ToPurchLine.Quantity <> 0 THEN
              ToPurchLine.VALIDATE("Line Discount Amount",FromPurchLine."Line Discount Amount");
          END;
        END;
        IF (FromPurchLine.Type = FromPurchLine.Type::" ") AND (FromPurchLine."No." <> '') THEN
          ToPurchLine.VALIDATE("No.",FromPurchLine."No.");
      END ELSE BEGIN
        SetDefaultValuesToPurchLine(ToPurchLine,ToPurchHeader,FromPurchLine."VAT Difference");

        ToPurchLine."Pay-to Vendor No." := ToPurchHeader."Pay-to Vendor No.";
      END;

      IF ExactCostRevMandatory AND
         (FromPurchLine.Type = FromPurchLine.Type::Item) AND
         (FromPurchLine."Appl.-to Item Entry" <> 0) AND
         NOT MoveNegLines
      THEN BEGIN
        IF RecalculateAmount THEN BEGIN
          ToPurchLine.VALIDATE("Direct Unit Cost",FromPurchLine."Direct Unit Cost");
          ToPurchLine.VALIDATE(
            "Line Discount Amount",
            ROUND(FromPurchLine."Line Discount Amount",Currency."Amount Rounding Precision"));
          ToPurchLine.VALIDATE(
            "Inv. Discount Amount",
            ROUND(FromPurchLine."Inv. Discount Amount",Currency."Amount Rounding Precision"));
        END;
        ToPurchLine.VALIDATE("Appl.-to Item Entry",FromPurchLine."Appl.-to Item Entry");
      END;

      IF MoveNegLines AND (ToPurchLine.Type <> ToPurchLine.Type::" ") THEN BEGIN
        ToPurchLine.VALIDATE(Quantity,-FromPurchLine.Quantity);
        ToPurchLine."Appl.-to Item Entry" := FromPurchLine."Appl.-to Item Entry"
      END;


      ToPurchLine.VALIDATE("Job No.",FromPurchLine."Job No.");
      ToPurchLine.VALIDATE("Job Task No.",FromPurchLine."Job Task No.");
      ToPurchLine.VALIDATE("Job Line Type",FromPurchLine."Job Line Type");

      ToPurchLine."Shortcut Dimension 1 Code" := FromPurchLine."Shortcut Dimension 1 Code";
      ToPurchLine."Shortcut Dimension 2 Code" := FromPurchLine."Shortcut Dimension 2 Code";
      ToPurchLine."Dimension Set ID" := FromPurchLine."Dimension Set ID";

      IF CopyThisLine THEN
        ToPurchLine.INSERT
      ELSE
        LinesNotCopied := LinesNotCopied + 1;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE WarnPurchInvoicePmtDisc@12013592(VAR ToPurchHeader@1001 : Record 12013587;VAR FromPurchHeader@1002 : Record 38;FromDocType@1004 : Option;FromDocNo@1003 : Code[20]);
    VAR
      VendLedgEntry@1000 : Record 25;
    BEGIN
      IF HideDialog THEN
        EXIT;

      IF IncludeHeader AND
         (ToPurchHeader."Document Type" IN
          [ToPurchHeader."Document Type"::"Return Order",ToPurchHeader."Document Type"::"Credit Memo"])
      THEN BEGIN
        VendLedgEntry.SETCURRENTKEY("Document No.");
        VendLedgEntry.SETRANGE("Document Type",FromPurchHeader."Document Type"::Invoice);
        VendLedgEntry.SETRANGE("Document No.",FromDocNo);
        IF VendLedgEntry.FIND('-') THEN BEGIN
          IF (VendLedgEntry."Pmt. Disc. Rcd.(LCY)" <> 0) AND
             (VendLedgEntry."Journal Batch Name" = '')
          THEN
            MESSAGE(Text009,SELECTSTR(FromDocType,Text007), FromDocNo);
        END;
      END;

      IF IncludeHeader AND
         (ToPurchHeader."Document Type" IN
          [ToPurchHeader."Document Type"::Invoice,ToPurchHeader."Document Type"::Order,
           ToPurchHeader."Document Type"::Quote,ToPurchHeader."Document Type"::"Blanket Order"]) AND
         (FromDocType = FromDocType::"9")
      THEN BEGIN
        VendLedgEntry.SETCURRENTKEY("Document No.");
        VendLedgEntry.SETRANGE("Document Type",FromPurchHeader."Document Type"::"Credit Memo");
        VendLedgEntry.SETRANGE("Document No.",FromDocNo);
        IF VendLedgEntry.FIND('-') THEN BEGIN
          IF (VendLedgEntry."Pmt. Disc. Rcd.(LCY)" <> 0) AND
             (VendLedgEntry."Journal Batch Name" = '')
          THEN
            MESSAGE(Text006,SELECTSTR(FromDocType - 1,Text007), FromDocNo);
        END;
      END;
    END;

    LOCAL PROCEDURE CopyFromPurchDocAssgntToLine@12013598(VAR ToPurchLine@1008 : Record 12013588;FromPurchLine@1000 : Record 39;VAR ItemChargeAssgntNextLineNo@1001 : Integer);
    VAR
      FromItemChargeAssgntPurch@1002 : Record 5805;
      ToItemChargeAssgntPurch@1003 : Record 12013594;
      AssignItemChargePurch@1004 : Codeunit 12013597;
    BEGIN
      WITH FromPurchLine DO BEGIN
        IF NOT FromItemChargeAssgntPurch.RECORDLEVELLOCKING THEN
          FromItemChargeAssgntPurch.LOCKTABLE(TRUE,TRUE);
        FromItemChargeAssgntPurch.RESET;
        FromItemChargeAssgntPurch.SETRANGE("Document Type","Document Type");
        FromItemChargeAssgntPurch.SETRANGE("Document No.","Document No.");
        FromItemChargeAssgntPurch.SETRANGE("Document Line No.","Line No.");
        FromItemChargeAssgntPurch.SETFILTER(
          "Applies-to Doc. Type",'<>%1',"Document Type");
        IF FromItemChargeAssgntPurch.FIND('-') THEN
          REPEAT
            ToItemChargeAssgntPurch.INIT;
            ToItemChargeAssgntPurch.TRANSFERFIELDS(FromItemChargeAssgntPurch);
            ToItemChargeAssgntPurch."Document Type" := ToPurchLine."Document Type";
            ToItemChargeAssgntPurch."Inbound Document No." := ToPurchLine."Inbound Document No.";
            ToItemChargeAssgntPurch."Document Line No." := ToPurchLine."Line No.";
            AssignItemChargePurch.InsertItemChargeAssgnt(
              ToItemChargeAssgntPurch,ToItemChargeAssgntPurch."Applies-to Doc. Type",
              ToItemChargeAssgntPurch."Applies-to Doc. No.",ToItemChargeAssgntPurch."Applies-to Doc. Line No.",
              ToItemChargeAssgntPurch."Item No.",ToItemChargeAssgntPurch.Description,0,0,ItemChargeAssgntNextLineNo);
          UNTIL FromItemChargeAssgntPurch.NEXT = 0;
      END;
    END;

    PROCEDURE CopyPurchInvLinesToDoc@12013599(ToPurchHeader@1002 : Record 12013587;VAR FromPurchInvLine@1001 : Record 123;VAR LinesNotCopied@1020 : Integer;VAR MissingExCostRevLink@1019 : Boolean);
    VAR
      FromPurchHeader@1006 : Record 38;
      FromPurchLine@1003 : Record 39;
      FromPurchLine2@1022 : Record 39;
      ToPurchLine@1010 : Record 12013588;
      FromPurchLineBuf@1007 : TEMPORARY Record 39;
      FromPurchInvHeader@1005 : Record 122;
      FromPurchRcptLine@1017 : Record 121;
      FromReturnShptLine@1016 : Record 6651;
      FromPurchCrMemoLine@1015 : Record 125;
      TempItemTrkgEntry@1009 : TEMPORARY Record 337;
      OldInvDocNo@1011 : Code[20];
      OldRcptDocNo@1023 : Code[20];
      NextLineNo@1000 : Integer;
      FromLineCounter@1025 : Integer;
      ToLineCounter@1013 : Integer;
      SplitLine@1008 : Boolean;
    BEGIN
      MissingExCostRevLink := FALSE;
      InitCurrency(ToPurchHeader."Currency Code");
      FromPurchLineBuf.RESET;
      FromPurchLineBuf.DELETEALL;
      TempItemTrkgEntry.RESET;
      TempItemTrkgEntry.DELETEALL;
      OpenWindow;

      // Fill purchase line buffer
      WITH FromPurchInvLine DO
        IF FINDSET THEN
          REPEAT
            FromLineCounter := FromLineCounter + 1;
            IF IsTimeForUpdate THEN
              Window.UPDATE(1,FromLineCounter);
            IF FromPurchInvHeader."No." <> "Document No." THEN BEGIN
              FromPurchInvHeader.GET("Document No.");
              TransferOldExtLines.ClearLineNumbers;
            END;
            FromPurchHeader.TRANSFERFIELDS(FromPurchInvHeader);
            // FillExactCostRevLink :=
            //  IsPurchFillExactCostRevLink(ToPurchHeader,1,FromPurchHeader."Currency Code");
            FromPurchLine.TRANSFERFIELDS(FromPurchInvLine);
            FromPurchLine."Appl.-to Item Entry" := 0;
            // Reuse fields to buffer invoice line information
            FromPurchLine."Receipt No." := "Document No.";
            FromPurchLine."Receipt Line No." := 0;
            FromPurchLine."Return Shipment No." := '';
            FromPurchLine."Return Shipment Line No." := "Line No.";



            IF NOT SplitLine THEN BEGIN
              FromPurchLine2 := FromPurchLineBuf;
              FromPurchLineBuf.TRANSFERFIELDS(FromPurchLine);
              FromPurchLineBuf."Document No." := FromPurchLine2."Document No.";
              FromPurchLineBuf."Receipt Line No." := FromPurchLine2."Receipt Line No.";
              FromPurchLineBuf."Line No." := NextLineNo;
              NextLineNo := NextLineNo + 1;
              IF NOT IsRecalculateAmount(
                   FromPurchHeader."Currency Code",ToPurchHeader."Currency Code",
                   FromPurchHeader."Prices Including VAT",ToPurchHeader."Prices Including VAT")
              THEN
                FromPurchLineBuf."Return Shipment No." := "Document No.";
              ReCalcPurchLine(FromPurchHeader,ToPurchHeader,FromPurchLineBuf);
              FromPurchLineBuf.INSERT;
            END;
          UNTIL NEXT = 0;

      // Create purchase line from buffer
      Window.UPDATE(1,FromLineCounter);
      WITH FromPurchLineBuf DO BEGIN
        // Sorting according to Purchase Line Document No.,Line No.
        SETCURRENTKEY("Document No.","Line No.");
        IF FINDSET THEN BEGIN
          NextLineNo := GetLastToPurchLineNo(ToPurchHeader);
          REPEAT
            ToLineCounter := ToLineCounter + 1;
            IF IsTimeForUpdate THEN
              Window.UPDATE(2,ToLineCounter);
            IF "Receipt No." <> OldInvDocNo THEN BEGIN
              OldInvDocNo := "Receipt No.";
              OldRcptDocNo := '';
              InsertOldPurchDocNoLine(ToPurchHeader,OldInvDocNo,2,NextLineNo);
            END;
            IF "Document No." <> OldRcptDocNo THEN BEGIN
              OldRcptDocNo := "Document No.";
              InsertOldPurchCombDocNoLine(ToPurchHeader,OldInvDocNo,OldRcptDocNo,NextLineNo,TRUE);
            END;

            IF (Type <> Type::" ") OR ("Attached to Line No." = 0) THEN BEGIN
              // Empty buffer fields
              FromPurchLine2 := FromPurchLineBuf;
              FromPurchLine2."Receipt No." := '';
              FromPurchLine2."Receipt Line No." := 0;
              FromPurchLine2."Return Shipment No." := '';
              FromPurchLine2."Return Shipment Line No." := 0;

              IF CopyPurchLine(
                ToPurchHeader,ToPurchLine,FromPurchHeader,
                FromPurchLine2,NextLineNo,LinesNotCopied,"Return Shipment No." = '')
              THEN BEGIN
                FromPurchInvLine.GET("Receipt No.","Return Shipment Line No.");

                // Copy approvers
                IF CopyApprovers THEN
                  CopyPostedApproversToDoc(6,FromPurchInvLine."Document No.",FromPurchInvLine."Line No.",ToPurchLine);


              END;
            END;
          UNTIL NEXT = 0;
        END;
      END;

      Window.CLOSE;
    END;

    PROCEDURE CopyPurchCrMemoLinesToDoc@12013600(ToPurchHeader@1002 : Record 12013587;VAR FromPurchCrMemoLine@1001 : Record 125;VAR LinesNotCopied@1020 : Integer;VAR MissingExCostRevLink@1019 : Boolean);
    VAR
      FromPurchHeader@1006 : Record 38;
      FromPurchLine@1003 : Record 39;
      FromPurchLine2@1022 : Record 39;
      ToPurchLine@1010 : Record 12013588;
      FromPurchLineBuf@1007 : TEMPORARY Record 39;
      FromPurchCrMemoHeader@1005 : Record 124;
      FromPurchRcptLine@1017 : Record 121;
      FromReturnShptLine@1016 : Record 6651;
      FromPurchInvLine@1015 : Record 123;
      TempItemTrkgEntry@1021 : TEMPORARY Record 337;
      OldCrMemoDocNo@1011 : Code[20];
      OldReturnShptDocNo@1023 : Code[20];
      NextLineNo@1000 : Integer;
      FromLineCounter@1025 : Integer;
      ToLineCounter@1013 : Integer;
      SplitLine@1012 : Boolean;
    BEGIN
      MissingExCostRevLink := FALSE;
      InitCurrency(ToPurchHeader."Currency Code");
      FromPurchLineBuf.RESET;
      FromPurchLineBuf.DELETEALL;
      TempItemTrkgEntry.RESET;
      TempItemTrkgEntry.DELETEALL;
      OpenWindow;

      // Fill purchase line buffer
      WITH FromPurchCrMemoLine DO
        IF FINDSET THEN
          REPEAT
            FromLineCounter := FromLineCounter + 1;
            IF IsTimeForUpdate THEN
              Window.UPDATE(1,FromLineCounter);
            IF FromPurchCrMemoHeader."No." <> "Document No." THEN BEGIN
              FromPurchCrMemoHeader.GET("Document No.");
              TransferOldExtLines.ClearLineNumbers;
            END;
            FromPurchHeader.TRANSFERFIELDS(FromPurchCrMemoHeader);
            FromPurchLine.TRANSFERFIELDS(FromPurchCrMemoLine);
            FromPurchLine."Appl.-to Item Entry" := 0;
            // Reuse fields to buffer credit memo line information
            FromPurchLine."Receipt No." := "Document No.";
            FromPurchLine."Receipt Line No." := 0;
            FromPurchLine."Return Shipment No." := '';
            FromPurchLine."Return Shipment Line No." := "Line No.";


            IF NOT SplitLine THEN BEGIN
              FromPurchLine2 := FromPurchLineBuf;
              FromPurchLineBuf := FromPurchLine;
              FromPurchLineBuf."Document No." := FromPurchLine2."Document No.";
              FromPurchLineBuf."Receipt Line No." := FromPurchLine2."Receipt Line No.";
              FromPurchLineBuf."Line No." := NextLineNo;
              NextLineNo := NextLineNo + 1;
              IF NOT IsRecalculateAmount(
                   FromPurchHeader."Currency Code",ToPurchHeader."Currency Code",
                   FromPurchHeader."Prices Including VAT",ToPurchHeader."Prices Including VAT")
              THEN
                FromPurchLineBuf."Return Shipment No." := "Document No.";
              ReCalcPurchLine(FromPurchHeader,ToPurchHeader,FromPurchLineBuf);
              FromPurchLineBuf.INSERT;
            END;

          UNTIL NEXT = 0;

      // Create purchase line from buffer
      Window.UPDATE(1,FromLineCounter);
      WITH FromPurchLineBuf DO BEGIN
        // Sorting according to Purchase Line Document No.,Line No.
        SETCURRENTKEY("Document Type","Document No.","Line No.");
        IF FINDSET THEN BEGIN
          NextLineNo := GetLastToPurchLineNo(ToPurchHeader);
          REPEAT
            ToLineCounter := ToLineCounter + 1;
            IF IsTimeForUpdate THEN
              Window.UPDATE(2,ToLineCounter);
            IF "Receipt No." <> OldCrMemoDocNo THEN BEGIN
              OldCrMemoDocNo := "Receipt No.";
              OldReturnShptDocNo := '';
              InsertOldPurchDocNoLine(ToPurchHeader,OldCrMemoDocNo,4,NextLineNo);
            END;
            IF "Document No." <> OldReturnShptDocNo THEN BEGIN
              OldReturnShptDocNo := "Document No.";
              InsertOldPurchCombDocNoLine(ToPurchHeader,OldCrMemoDocNo,OldReturnShptDocNo,NextLineNo,FALSE);
            END;

            IF (Type <> Type::" ") OR ("Attached to Line No." = 0) THEN BEGIN
              // Empty buffer fields
              FromPurchLine2 := FromPurchLineBuf;
              FromPurchLine2."Receipt No." := '';
              FromPurchLine2."Receipt Line No." := 0;
              FromPurchLine2."Return Shipment No." := '';
              FromPurchLine2."Return Shipment Line No." := 0;

              IF CopyPurchLine(
                ToPurchHeader,ToPurchLine,FromPurchHeader,
                FromPurchLine2,NextLineNo,LinesNotCopied,"Return Shipment No." = '')
              THEN BEGIN
                FromPurchCrMemoLine.GET("Receipt No.","Return Shipment Line No.");

                // Copy approvers
                IF CopyApprovers THEN
                  CopyPostedApproversToDoc(7,FromPurchCrMemoLine."Document No.",FromPurchCrMemoLine."Line No.",ToPurchLine);



              END;
            END;
          UNTIL NEXT = 0;
        END;
      END;

      Window.CLOSE;
    END;

    PROCEDURE CopyApproversToDoc@1100285001(DocType@1100285000 : Integer;DocNo@1100285002 : Code[20];LineNo@1100285003 : Integer;ToPurchLine@1100285004 : Record 12013588);
    VAR
      FromExDocLineApp@1100285005 : Record 12013610;
      ToExProposal@1100285006 : Record 12013615;
    BEGIN
      FromExDocLineApp.RESET;
      FromExDocLineApp.SETCURRENTKEY("Document Type","Document No.","Line No.","Approver Order");
      FromExDocLineApp.SETRANGE("Document Type",DocType);
      FromExDocLineApp.SETRANGE("Document No.",DocNo);
      FromExDocLineApp.SETRANGE("Line No.",LineNo);
      IF NOT FromExDocLineApp.FINDSET THEN
        EXIT;

      ToExProposal.RESET;
      ToExProposal.SETRANGE("Entry No.", ToPurchLine."Inbound Document No.");
      ToExProposal.SETRANGE("Line No.", ToPurchLine."Line No.");
      IF ToExProposal.FIND('-') THEN
        ToExProposal.DELETEALL;

      REPEAT
        ToExProposal.INIT;
        ToExProposal."Entry No." := ToPurchLine."Inbound Document No.";
        ToExProposal."Line No." := ToPurchLine."Line No.";
        ToExProposal.VALIDATE(Approver, FromExDocLineApp.Approver);
        ToExProposal."Approver Order" := FromExDocLineApp."Approver Order";
        ToExProposal.Changed := TRUE;
        ToExProposal.INSERT;
      UNTIL FromExDocLineApp.NEXT = 0;
    END;

    PROCEDURE CopyPostedApproversToDoc@1100285003(DocType@1100285000 : Integer;DocNo@1100285002 : Code[20];LineNo@1100285003 : Integer;ToPurchLine@1100285004 : Record 12013588);
    VAR
      FromPostExDocLineApp@1100285005 : Record 12013628;
      ToExProposal@1100285006 : Record 12013615;
    BEGIN
      FromPostExDocLineApp.RESET;
      FromPostExDocLineApp.SETCURRENTKEY("Document Type","Document No.","Line No.","Approver Order");
      FromPostExDocLineApp.SETRANGE("Document Type",DocType);
      FromPostExDocLineApp.SETRANGE("Document No.",DocNo);
      FromPostExDocLineApp.SETRANGE("Line No.",LineNo);
      IF NOT FromPostExDocLineApp.FINDSET THEN
        EXIT;

      ToExProposal.RESET;
      ToExProposal.SETRANGE("Entry No.", ToPurchLine."Inbound Document No.");
      ToExProposal.SETRANGE("Line No.", ToPurchLine."Line No.");
      IF ToExProposal.FIND('-') THEN
        ToExProposal.DELETEALL;

      REPEAT
        ToExProposal.INIT;
        ToExProposal."Entry No." := ToPurchLine."Inbound Document No.";
        ToExProposal."Line No." := ToPurchLine."Line No.";
        ToExProposal.VALIDATE(Approver, FromPostExDocLineApp.Approver);
        ToExProposal."Approver Order" := FromPostExDocLineApp."Approver Order";
        ToExProposal.Changed := TRUE;
        ToExProposal.INSERT;
      UNTIL FromPostExDocLineApp.NEXT = 0;
    END;

    LOCAL PROCEDURE ReCalcPurchLine@12013601(FromPurchHeader@1001 : Record 38;ToPurchHeader@1002 : Record 12013587;VAR PurchLine@1003 : Record 39);
    VAR
      CurrExchRate@1004 : Record 330;
      PurchLineAmount@1000 : Decimal;
    BEGIN
      WITH ToPurchHeader DO BEGIN
        IF NOT IsRecalculateAmount(
             FromPurchHeader."Currency Code","Currency Code",
             FromPurchHeader."Prices Including VAT","Prices Including VAT")
        THEN
          EXIT;

        IF FromPurchHeader."Currency Code" <> "Currency Code" THEN BEGIN
          IF PurchLine.Quantity <> 0 THEN
            PurchLineAmount := PurchLine."Direct Unit Cost" * PurchLine.Quantity
          ELSE
            PurchLineAmount := PurchLine."Direct Unit Cost";
          IF FromPurchHeader."Currency Code" <> '' THEN BEGIN
            PurchLineAmount :=
              CurrExchRate.ExchangeAmtFCYToLCY(0,FromPurchHeader."Job No.", // 4PS
                FromPurchHeader."Posting Date",FromPurchHeader."Currency Code",
                PurchLineAmount,FromPurchHeader."Currency Factor",FALSE); // 4PS
            PurchLine."Line Discount Amount" :=
              CurrExchRate.ExchangeAmtFCYToLCY(0,FromPurchHeader."Job No.", // 4PS
                FromPurchHeader."Posting Date",FromPurchHeader."Currency Code",
                PurchLine."Line Discount Amount",FromPurchHeader."Currency Factor",FALSE); // 4PS
            PurchLine."Inv. Discount Amount" :=
              CurrExchRate.ExchangeAmtFCYToLCY(0,FromPurchHeader."Job No.", // 4PS
                FromPurchHeader."Posting Date",FromPurchHeader."Currency Code",
                PurchLine."Inv. Discount Amount",FromPurchHeader."Currency Factor",FALSE); // 4PS
          END;

          IF "Currency Code" <> '' THEN BEGIN
            PurchLineAmount :=
              CurrExchRate.ExchangeAmtLCYToFCY(0,"Job No.", // 4PS
                "Posting Date","Currency Code",PurchLineAmount,"Currency Factor",FALSE); // 4PS
            PurchLine."Line Discount Amount" :=
              CurrExchRate.ExchangeAmtLCYToFCY(0,"Job No.", // 4PS
                "Posting Date","Currency Code",PurchLine."Line Discount Amount","Currency Factor",FALSE); // 4PS
            PurchLine."Inv. Discount Amount" :=
              CurrExchRate.ExchangeAmtLCYToFCY(0,"Job No.", // 4PS
                "Posting Date","Currency Code",PurchLine."Inv. Discount Amount","Currency Factor",FALSE); // 4PS
          END;
        END;

        PurchLine."Currency Code" := "Currency Code";
        IF PurchLine.Quantity <> 0 THEN BEGIN
          PurchLineAmount := ROUND(PurchLineAmount,Currency."Amount Rounding Precision");
          PurchLine."Direct Unit Cost" := ROUND(PurchLineAmount / PurchLine.Quantity,Currency."Unit-Amount Rounding Precision");
        END ELSE
          PurchLine."Direct Unit Cost" := ROUND(PurchLineAmount,Currency."Unit-Amount Rounding Precision");
        PurchLine."Line Discount Amount" := ROUND(PurchLine."Line Discount Amount",Currency."Amount Rounding Precision");
        PurchLine."Inv. Discount Amount" := ROUND(PurchLine."Inv. Discount Amount",Currency."Amount Rounding Precision");

        CalcVAT(
          PurchLine."Direct Unit Cost",PurchLine."VAT %",FromPurchHeader."Prices Including VAT",
          "Prices Including VAT",Currency."Unit-Amount Rounding Precision");
        CalcVAT(
          PurchLine."Line Discount Amount",PurchLine."VAT %",FromPurchHeader."Prices Including VAT",
          "Prices Including VAT",Currency."Amount Rounding Precision");
        CalcVAT(
          PurchLine."Inv. Discount Amount",PurchLine."VAT %",FromPurchHeader."Prices Including VAT",
          "Prices Including VAT",Currency."Amount Rounding Precision");
      END;
    END;

    LOCAL PROCEDURE GetLastToPurchLineNo@12013602(ToPurchHeader@1000 : Record 12013587) : Decimal;
    VAR
      ToPurchLine@1001 : Record 12013588;
    BEGIN
      ToPurchLine.LOCKTABLE;
      ToPurchLine.SETRANGE("Inbound Document No.",ToPurchHeader."Inbound Document No.");
      IF ToPurchLine.FINDLAST THEN
        EXIT(ToPurchLine."Line No.");
      EXIT(0);
    END;

    LOCAL PROCEDURE InsertOldPurchDocNoLine@12013603(ToPurchHeader@1001 : Record 12013587;OldDocNo@1000 : Code[20];OldDocType@1004 : Integer;VAR NextLineNo@1002 : Integer);
    VAR
      ToPurchLine2@1003 : Record 12013588;
    BEGIN
      NextLineNo := NextLineNo + 10000;
      ToPurchLine2.INIT;
      ToPurchLine2."Line No." := NextLineNo;
      ToPurchLine2."Document Type" := ToPurchHeader."Document Type";
      ToPurchLine2."Inbound Document No." := ToPurchHeader."Inbound Document No.";
      ToPurchLine2.Description := STRSUBSTNO(Text015,SELECTSTR(OldDocType,Text014),OldDocNo);
      ToPurchLine2.INSERT;
    END;

    LOCAL PROCEDURE InsertOldPurchCombDocNoLine@12013604(ToPurchHeader@1001 : Record 12013587;OldDocNo@1000 : Code[20];OldDocNo2@1005 : Code[20];VAR NextLineNo@1002 : Integer;CopyFromInvoice@1004 : Boolean);
    VAR
      ToPurchLine2@1003 : Record 12013588;
    BEGIN
      NextLineNo := NextLineNo + 10000;
      ToPurchLine2.INIT;
      ToPurchLine2."Line No." := NextLineNo;
      ToPurchLine2."Document Type" := ToPurchHeader."Document Type";
      ToPurchLine2."Inbound Document No." := ToPurchHeader."Inbound Document No.";
      IF CopyFromInvoice THEN
        ToPurchLine2.Description :=
          STRSUBSTNO(
            Text018,
            COPYSTR(SELECTSTR(1,Text017) + OldDocNo,1,23),
            COPYSTR(SELECTSTR(2,Text017) + OldDocNo2,1,23))
      ELSE
        ToPurchLine2.Description :=
          STRSUBSTNO(
            Text018,
            COPYSTR(SELECTSTR(3,Text017) + OldDocNo,1,23),
            COPYSTR(SELECTSTR(4,Text017) + OldDocNo2,1,23));
      ToPurchLine2.INSERT;
    END;

    PROCEDURE PurchHeaderDocType@19(DocType@1001 : Option) : Integer;
    VAR
      FromPurchHeader@1000 : Record 38;
    BEGIN
      CASE DocType OF
        PurchDocType::Quote:
          EXIT(FromPurchHeader."Document Type"::Quote);
        PurchDocType::"Blanket Order":
          EXIT(FromPurchHeader."Document Type"::"Blanket Order");
        PurchDocType::Order:
          EXIT(FromPurchHeader."Document Type"::Order);
        PurchDocType::Invoice:
          EXIT(FromPurchHeader."Document Type"::Invoice);
        PurchDocType::"Return Order":
          EXIT(FromPurchHeader."Document Type"::"Return Order");
        PurchDocType::"Credit Memo":
          EXIT(FromPurchHeader."Document Type"::"Credit Memo");
      END;
    END;

    LOCAL PROCEDURE DeletePurchLinesWithNegQty@30(FromPurchHeader@1001 : Record 38;OnlyTest@1002 : Boolean);
    VAR
      FromPurchLine@1000 : Record 39;
    BEGIN
      WITH FromPurchLine DO BEGIN
        SETRANGE("Document Type",FromPurchHeader."Document Type");
        SETRANGE("Document No.",FromPurchHeader."No.");
        SETFILTER(Quantity,'<0');
        IF OnlyTest THEN BEGIN
          IF NOT FIND('-') THEN
            ERROR(Text010);
          REPEAT
            TESTFIELD("Receipt No.",'');
            TESTFIELD("Return Shipment No.",'');
            TESTFIELD("Quantity Received",0);
            TESTFIELD("Quantity Invoiced",0);
          UNTIL NEXT = 0;
        END ELSE
          DELETEALL(TRUE);
      END;
    END;

    LOCAL PROCEDURE InitCurrency@81(CurrencyCode@1000 : Code[10]);
    BEGIN
      IF CurrencyCode <> '' THEN
        Currency.GET(CurrencyCode)
      ELSE
        Currency.InitRoundingPrecision;

      Currency.TESTFIELD("Unit-Amount Rounding Precision");
      Currency.TESTFIELD("Amount Rounding Precision");
    END;

    LOCAL PROCEDURE OpenWindow@79();
    BEGIN
      Window.OPEN(
        Text022 +
        Text023 +
        Text024);
      WindowUpdateTime := TIME;
    END;

    LOCAL PROCEDURE IsTimeForUpdate@75() : Boolean;
    BEGIN
      IF TIME - WindowUpdateTime >= 1000 THEN BEGIN
        WindowUpdateTime := TIME;
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE IsRecalculateAmount@63(FromCurrencyCode@1000 : Code[10];ToCurrencyCode@1002 : Code[10];FromPricesInclVAT@1001 : Boolean;ToPricesInclVAT@1003 : Boolean) : Boolean;
    BEGIN
      EXIT(
        (FromCurrencyCode <> ToCurrencyCode) OR
        (FromPricesInclVAT <> ToPricesInclVAT));
    END;

    PROCEDURE CalcVAT@48(VAR Value@1003 : Decimal;VATPercentage@1005 : Decimal;FromPricesInclVAT@1000 : Boolean;ToPricesInclVAT@1002 : Boolean;RndgPrecision@1001 : Decimal);
    BEGIN
      IF (ToPricesInclVAT = FromPricesInclVAT) OR (Value = 0) THEN
        EXIT;

      IF ToPricesInclVAT THEN
        Value := ROUND(Value * (100 + VATPercentage) / 100,RndgPrecision)
      ELSE
        Value := ROUND(Value * 100 / (100 + VATPercentage),RndgPrecision);
    END;

    LOCAL PROCEDURE SetDefaultValuesToPurchLine@108(VAR ToPurchLine@1000 : Record 12013588;ToPurchHeader@1002 : Record 12013587;VATDifference@1001 : Decimal);
    BEGIN
      IF ToPurchLine."Document Type" <> ToPurchLine."Document Type"::Order THEN BEGIN
        ToPurchLine."Prepayment %" := 0;
        ToPurchLine."Prepayment VAT %" := 0;
        ToPurchLine."Prepmt. VAT Calc. Type" := 0;
        ToPurchLine."Prepayment VAT Identifier" := '';
        ToPurchLine."Prepayment VAT %" := 0;
        ToPurchLine."Prepayment Tax Group Code" := '';
        ToPurchLine."Prepmt. Line Amount" := 0;
        ToPurchLine."Prepmt. Amt. Incl. VAT" := 0;
      END;
      ToPurchLine."Prepmt. Amt. Inv." := 0;
      ToPurchLine."Prepmt. Amount Inv. (LCY)" := 0;
      ToPurchLine."Prepayment Amount" := 0;
      ToPurchLine."Prepmt. VAT Base Amt." := 0;
      ToPurchLine."Prepmt Amt to Deduct" := 0;
      ToPurchLine."Prepmt Amt Deducted" := 0;
      ToPurchLine."Prepmt. Amount Inv. Incl. VAT" := 0;
      ToPurchLine."Prepayment VAT Difference" := 0;
      ToPurchLine."Prepmt VAT Diff. to Deduct" := 0;
      ToPurchLine."Prepmt VAT Diff. Deducted" := 0;
      ToPurchLine."Quantity Received" := 0;
      ToPurchLine."Qty. Received (Base)" := 0;
      ToPurchLine."Return Qty. Shipped" := 0;
      ToPurchLine."Return Qty. Shipped (Base)" := 0;
      ToPurchLine."Quantity Invoiced" := 0;
      ToPurchLine."Qty. Invoiced (Base)" := 0;
      ToPurchLine."Qty. Rcd. Not Invoiced" := 0;
      ToPurchLine."Qty. Rcd. Not Invoiced (Base)" := 0;
      ToPurchLine."Return Qty. Shipped Not Invd." := 0;
      ToPurchLine."Ret. Qty. Shpd Not Invd.(Base)" := 0;
      ToPurchLine."Qty. to Receive" := 0;
      ToPurchLine."Qty. to Receive (Base)" := 0;
      ToPurchLine."Return Qty. to Ship" := 0;
      ToPurchLine."Return Qty. to Ship (Base)" := 0;
      ToPurchLine."Qty. to Invoice" := 0;
      ToPurchLine."Qty. to Invoice (Base)" := 0;
      ToPurchLine."Amt. Rcd. Not Invoiced" := 0;
      ToPurchLine."Amt. Rcd. Not Invoiced (LCY)" := 0;
      ToPurchLine."Return Shpd. Not Invd." := 0;
      ToPurchLine."Return Shpd. Not Invd. (LCY)" := 0;

      ToPurchLine.InitOutstanding;
      IF ToPurchLine."Document Type" IN
         [ToPurchLine."Document Type"::"Return Order",ToPurchLine."Document Type"::"Credit Memo"]
      THEN
        ToPurchLine.InitQtyToShip
      ELSE
        ToPurchLine.InitQtyToReceive;
      ToPurchLine."VAT Difference" := VATDifference;
      ToPurchLine."Receipt No." := '';
      ToPurchLine."Receipt Line No." := 0;
      ToPurchLine."Appl.-to Item Entry" := 0;
    END;

    LOCAL PROCEDURE ConfirmSetReadyForPosting@1100285002(VAR ToPurchHeader@1100285000 : Record 38) Confirmed : Boolean;
    VAR
      DocHead@1100285001 : Record 12013608;
      ExFlow@1100285002 : Codeunit 12013601;
    BEGIN
      IF NOT ToPurchHeader.Approve THEN
        EXIT(FALSE);

      IF NOT ExFlow.IsUserSuperior(USERID) THEN
        EXIT(FALSE);

      IF NOT CONFIRM(STRSUBSTNO(EXF03,ToPurchHeader."Document Type")) THEN
        EXIT(FALSE);

      IF NOT DocHead.RetrieveRecord(DocHead,ToPurchHeader."Document Type",ToPurchHeader."No.") THEN BEGIN
        ExFlow.CreateDocument(ToPurchHeader);
        DocHead.RetrieveRecord(DocHead,ToPurchHeader."Document Type",ToPurchHeader."No.");
      END;

      DocHead.Status := DocHead.Status::"Ready for posting";
      DocHead."Gross Amount" := ToPurchHeader."Gross Invoice Amount ExFlow";
      DocHead."VAT Amount" := ToPurchHeader."Import VAT Amount";
      DocHead."Net Amount" := DocHead."Gross Amount" - DocHead."VAT Amount";
      DocHead."Admin Comment" := EXF04;
      DocHead.MODIFY;
      EXIT(TRUE);
    END;

    BEGIN
    END.
  }
}

