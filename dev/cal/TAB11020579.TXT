OBJECT Table 11020579 Generic Temp Table
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Generic Temp Table;
               NOR=Generisk maltabell;
               SVE=Generell malltabell];
  }
  FIELDS
  {
    { 10  ;   ;Key Code1           ;Code50        ;CaptionML=[ENU=Key Code1;
                                                              NOR=N›kkelkode1;
                                                              SVE=Nyckelkod 1] }
    { 11  ;   ;Key Code2           ;Code50        ;CaptionML=[ENU=Key Code2;
                                                              NOR=N›kkelkode2;
                                                              SVE=Nyckelkod 2] }
    { 12  ;   ;Key Code3           ;Code50        ;CaptionML=[ENU=Key Code3;
                                                              NOR=N›kkelkode3;
                                                              SVE=Nyckelkod 3] }
    { 13  ;   ;Key Code4           ;Code50        ;CaptionML=[ENU=Key Code4;
                                                              NOR=N›kkelkode4;
                                                              SVE=Nyckelkod 4] }
    { 14  ;   ;Key Code5           ;Code50        ;CaptionML=[ENU=Key Code5;
                                                              NOR=N›kkelkode5;
                                                              SVE=Nyckelkod 5] }
    { 15  ;   ;Key Code6           ;Code50        ;CaptionML=[ENU=Key Code6;
                                                              NOR=N›kkelkode6;
                                                              SVE=Nyckelkod 6] }
    { 100 ;   ;Code1               ;Code100       ;CaptionML=[ENU=Code1;
                                                              NOR=Kode1;
                                                              SVE=Kod1] }
    { 101 ;   ;Code2               ;Code100       ;CaptionML=[ENU=Code2;
                                                              NOR=Kode2;
                                                              SVE=Kod2] }
    { 102 ;   ;Code3               ;Code100       ;CaptionML=ENU=Code3 }
    { 103 ;   ;Code4               ;Code100       ;CaptionML=ENU=Code4 }
    { 104 ;   ;Code5               ;Code100       ;CaptionML=ENU=Code5 }
    { 105 ;   ;Code6               ;Code100       ;CaptionML=ENU=Code6 }
    { 106 ;   ;Code7               ;Code100       ;CaptionML=ENU=Code7 }
    { 107 ;   ;Code8               ;Code100       ;CaptionML=ENU=Code8 }
    { 108 ;   ;Code9               ;Code100       ;CaptionML=ENU=Code9 }
    { 109 ;   ;Code10              ;Code100       ;CaptionML=ENU=Code10 }
    { 110 ;   ;Code11              ;Code100       ;CaptionML=ENU=Code11 }
    { 111 ;   ;Code12              ;Code100       ;CaptionML=ENU=Code12 }
    { 112 ;   ;Code13              ;Code100       ;CaptionML=ENU=Code13 }
    { 113 ;   ;Code14              ;Code100       ;CaptionML=ENU=Code14 }
    { 114 ;   ;Code15              ;Code100       ;CaptionML=ENU=Code15 }
    { 200 ;   ;Int1                ;Integer       ;CaptionML=[ENU=Int1;
                                                              NOR=Int1;
                                                              SVE=Int1] }
    { 201 ;   ;Int2                ;Integer       ;CaptionML=[ENU=Int2;
                                                              NOR=Int2;
                                                              SVE=Int2] }
    { 202 ;   ;Int3                ;Integer       ;CaptionML=[ENU=Int3;
                                                              NOR=Int3;
                                                              SVE=Int3] }
    { 203 ;   ;Int4                ;Integer       ;CaptionML=[ENU=Int4;
                                                              NOR=Int4;
                                                              SVE=Int4] }
    { 204 ;   ;Int5                ;Integer       ;CaptionML=[ENU=Int5;
                                                              NOR=Int5;
                                                              SVE=Int5] }
    { 205 ;   ;Int6                ;Integer       ;CaptionML=[ENU=Int6;
                                                              NOR=Int6;
                                                              SVE=Int6] }
    { 206 ;   ;Int7                ;Integer       ;CaptionML=ENU=Int7 }
    { 207 ;   ;Int8                ;Integer       ;CaptionML=ENU=Int8 }
    { 208 ;   ;Int9                ;Integer       ;CaptionML=ENU=Int9 }
    { 209 ;   ;Int10               ;Integer       ;CaptionML=ENU=Int10 }
    { 230 ;   ;BigInt1             ;BigInteger    ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=BigInt1 }
    { 250 ;   ;Dec1                ;Decimal       ;CaptionML=[ENU=Dec1;
                                                              SVE=Dec1] }
    { 251 ;   ;Dec2                ;Decimal       ;CaptionML=[ENU=Dec2;
                                                              SVE=Dec2] }
    { 252 ;   ;Dec3                ;Decimal       ;CaptionML=[ENU=Dec3;
                                                              SVE=Dec3] }
    { 253 ;   ;Dec4                ;Decimal       ;CaptionML=[ENU=Dec4;
                                                              SVE=Dec4] }
    { 254 ;   ;Dec5                ;Decimal       ;CaptionML=[ENU=Dec5;
                                                              SVE=Dec5] }
    { 255 ;   ;Dec6                ;Decimal       ;CaptionML=[ENU=Dec6;
                                                              SVE=Dec6] }
    { 256 ;   ;Dec7                ;Decimal       ;CaptionML=[ENU=Dec7;
                                                              SVE=Dec7] }
    { 257 ;   ;Dec8                ;Decimal       ;CaptionML=ENU=Dec8 }
    { 258 ;   ;Dec9                ;Decimal       ;CaptionML=ENU=Dec9 }
    { 259 ;   ;Dec10               ;Decimal       ;CaptionML=ENU=Dec10 }
    { 260 ;   ;Dec11               ;Decimal       ;CaptionML=ENU=Dec11 }
    { 261 ;   ;Dec12               ;Decimal       ;CaptionML=ENU=Dec12 }
    { 262 ;   ;Dec13               ;Decimal       ;CaptionML=ENU=Dec13 }
    { 263 ;   ;Dec14               ;Decimal       ;CaptionML=ENU=Dec14 }
    { 264 ;   ;Dec15               ;Decimal       ;CaptionML=ENU=Dec15 }
    { 265 ;   ;Dec16               ;Decimal       ;CaptionML=ENU=Dec16 }
    { 300 ;   ;Text1               ;Text500       ;CaptionML=[ENU=Text1;
                                                              NOR=Tekst1;
                                                              SVE=Text1] }
    { 301 ;   ;Text2               ;Text500       ;CaptionML=[ENU=Text2;
                                                              NOR=Tekst2;
                                                              SVE=Text2] }
    { 302 ;   ;Text3               ;Text500       ;CaptionML=[ENU=Text3;
                                                              NOR=Tekst3;
                                                              SVE=Text3] }
    { 303 ;   ;Text4               ;Text500       ;CaptionML=[ENU=Text4;
                                                              NOR=Tekst4;
                                                              SVE=Text4] }
    { 304 ;   ;Text5               ;Text500       ;CaptionML=[ENU=Text5;
                                                              NOR=Tekst5;
                                                              SVE=Text5] }
    { 305 ;   ;Text6               ;Text500       ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Text6 }
    { 350 ;   ;RecId1              ;RecordID      ;CaptionML=[ENU=RecID1;
                                                              NOR=RID1;
                                                              SVE=RID1] }
    { 351 ;   ;RecId2              ;RecordID      ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=RecID2 }
    { 352 ;   ;RecId3              ;RecordID      ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=RecID3 }
    { 353 ;   ;RecId4              ;RecordID      ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=RecID4 }
    { 354 ;   ;RecId5              ;RecordID      ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=RecID5 }
    { 400 ;   ;Date1               ;Date          ;CaptionML=[ENU=Date1;
                                                              NOR=Dato1;
                                                              SVE=Datum1] }
    { 410 ;   ;Date2               ;Date          ;CaptionML=ENU=Date2 }
    { 420 ;   ;Date3               ;Date          ;CaptionML=ENU=Date3 }
    { 430 ;   ;Date4               ;Date          ;CaptionML=ENU=Date4 }
    { 440 ;   ;Date5               ;Date          ;CaptionML=ENU=Date5 }
    { 450 ;   ;Bool1               ;Boolean       ;CaptionML=ENU=Bool1 }
    { 451 ;   ;Bool2               ;Boolean       ;CaptionML=ENU=Bool2 }
    { 452 ;   ;Bool3               ;Boolean       ;CaptionML=ENU=Bool3 }
    { 453 ;   ;Bool4               ;Boolean       ;CaptionML=ENU=Bool4 }
    { 454 ;   ;Bool5               ;Boolean       ;CaptionML=ENU=Bool5 }
    { 455 ;   ;Bool6               ;Boolean       ;DataClassification=CustomerContent;
                                                   CaptionML=ENU=Bool6 }
    { 500 ;   ;Time1               ;Time          ;CaptionML=ENU=Time1 }
    { 501 ;   ;Time2               ;Time          ;CaptionML=ENU=Time2 }
    { 502 ;   ;Time3               ;Time          ;CaptionML=ENU=Time3 }
    { 503 ;   ;Time4               ;Time          ;CaptionML=ENU=Time4 }
    { 504 ;   ;Time5               ;Time          ;CaptionML=ENU=Time5 }
    { 550 ;   ;DateTime1           ;DateTime      ;CaptionML=ENU=DateTime1 }
    { 551 ;   ;DateTime2           ;DateTime      ;CaptionML=ENU=DateTime2 }
    { 600 ;   ;Blob1               ;BLOB          ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Blob1 }
  }
  KEYS
  {
    {    ;Key Code1,Key Code2,Key Code3,Key Code4,Key Code5,Key Code6;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    PROCEDURE GetGenericTempTable@1210190000(KeyCode1@1210190000 : Code[38];KeyCode2@1210190001 : Code[38];KeyCode3@1210190002 : Code[38];KeyCode4@1210190003 : Code[38];KeyCode5@1210190004 : Code[38];KeyCode6@1210190005 : Code[38]);
    BEGIN
      IF (NOT GET(KeyCode1, KeyCode2, KeyCode3, KeyCode4, KeyCode5, KeyCode6)) THEN BEGIN
        INIT;
        "Key Code1" := KeyCode1;
        "Key Code2" := KeyCode2;
        "Key Code3" := KeyCode3;
        "Key Code4" := KeyCode4;
        "Key Code5" := KeyCode5;
        "Key Code6" := KeyCode6;
        INSERT;
      END;
    END;

    PROCEDURE UpdateGenericTempTable@1100525000(KeyCode1@1100525002 : Code[38];KeyCode2@1210190000 : Code[38];KeyCode3@1210190001 : Code[38];KeyCode4@1210190002 : Code[38];KeyCode5@1210190003 : Code[38];KeyCode6@1210190004 : Code[38]);
    VAR
      GenericTempTable@1100525001 : Record 11020579;
    BEGIN
      GenericTempTable.TRANSFERFIELDS(Rec, FALSE);
      GetGenericTempTable(KeyCode1, KeyCode2, KeyCode3, KeyCode4, KeyCode5, KeyCode6);
      TRANSFERFIELDS(GenericTempTable, FALSE);
      MODIFY;
    END;

    PROCEDURE GetGuidKey@1210190001() : Code[38];
    BEGIN
      EXIT(FORMAT(CREATEGUID));
    END;

    PROCEDURE SplitByDescrArray@1100527650(VAR TmpReportLine@1100527651 : Record 11020579;DescrArray@1100527650 : ARRAY [10] OF Text;MaxLinesCnt@1100527655 : Integer);
    VAR
      Ind@1100527654 : Integer;
    BEGIN
      IF NOT TmpReportLine.ISTEMPORARY THEN
        EXIT;

      IF MaxLinesCnt > ARRAYLEN(DescrArray) - 1 THEN
        MaxLinesCnt := ARRAYLEN(DescrArray) - 1;

      FOR Ind := 0 TO MaxLinesCnt DO
        IF DescrArray[Ind + 1] <> '' THEN
          IF Ind = 0 THEN BEGIN
            TmpReportLine.Text1 := DescrArray[Ind + 1];
            TmpReportLine.Int1 := Ind;
            TmpReportLine.MODIFY;
          END ELSE BEGIN
            TmpReportLine.INIT;
            TmpReportLine."Key Code6" := FORMAT(Ind);
            TmpReportLine.Text1 := DescrArray[Ind + 1];
            TmpReportLine.Int1 := Ind;
            TmpReportLine.INSERT;
          END;
    END;

    PROCEDURE SplitByTwoArrays@1100529600(VAR TmpReportLine@1100527651 : Record 11020579;Array1@1100527650 : ARRAY [10] OF Text;Array2@1100529600 : ARRAY [10] OF Text;MaxLinesCnt@1100527655 : Integer);
    VAR
      Ind@1100527654 : Integer;
      OrderDetailLine@1100529601 : Boolean;
    BEGIN
      IF NOT TmpReportLine.ISTEMPORARY THEN
        EXIT;

      IF MaxLinesCnt > ARRAYLEN(Array1) - 1 THEN
        MaxLinesCnt := ARRAYLEN(Array1) - 1;
      IF MaxLinesCnt > ARRAYLEN(Array2) - 1 THEN
        MaxLinesCnt := ARRAYLEN(Array2) - 1;

      OrderDetailLine := TmpReportLine.Bool3;
      Ind := 0;
      WHILE Ind <= MaxLinesCnt DO BEGIN
        IF (Array1[Ind + 1] <> '') OR (Array2[Ind + 1] <> '') THEN
          IF Ind = 0 THEN BEGIN
            IF Array1[Ind + 1] <> '' THEN
              TmpReportLine.Text1 := Array1[Ind + 1];
            IF Array2[Ind + 1] <> '' THEN
              TmpReportLine.Text2 := Array2[Ind + 1];
            TmpReportLine.Int1 := Ind;
            TmpReportLine.MODIFY;
          END ELSE BEGIN
            TmpReportLine.INIT;
            TmpReportLine."Key Code6" := FORMAT(Ind);
            IF Array1[Ind + 1] <> '' THEN
              TmpReportLine.Text1 := Array1[Ind + 1];
            IF Array2[Ind + 1] <> '' THEN
              TmpReportLine.Text2 := Array2[Ind + 1];
            TmpReportLine.Int1 := Ind;
            TmpReportLine.Bool3 := OrderDetailLine;
            TmpReportLine.INSERT;
          END;
       Ind += 1;
      END;
    END;

    BEGIN
    END.
  }
}

