OBJECT Codeunit 11012558 InsertPlantExitOrder
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    TableNo=11012559;
    OnRun=BEGIN
            ExitOrderRec.COPY(Rec);
            Code;
          END;

  }
  CODE
  {
    VAR
      Text000@11012004 : TextConst 'DEU=Mîchten Sie das Werkzeug eingeben, das am %1 an Standort %2 vorhanden ist?;ENU=Do you want to insert the plant that is present on %1 on location %2?;NLD=Wilt u het materieel opvoeren dat op %1 aanwezig is op locatie %2?;NOR=Vil du sett inn maskin som finnes pÜ %1 pÜ lokasjon %2?;SVE=Vill du infoga den Maskin som finns pÜ %1 pÜ lagerstÑlle %2?';
      Text000b@1100485003 : TextConst 'DEU=Mîchten Sie das externe Werkzeug des Kreditors %3 eingeben, das am %1 an Standort %2 vorhanden ist?;ENU=Do you want to insert the external plant of vendor %3 that is present on %1 on location %2?;NLD=Wilt u het extene materieel van leverancier %3 opvoeren dat op %1 aanwezig is op locatie %2?;NOR=Vil du sette inn den eksterne maskinen for leverandõr %3 som finnes pÜ %1 pÜ lokasjon %2?;SVE=Vill du infoga den externa Maskinen fîr leverantîr %3 som finns pÜ %1 pÜ lagerstÑlle %2?';
      Text001@11012005 : TextConst 'DEU=Zeilen werden erstellt @1@@@@@@@@@@@@@;ENU=Creating Lines @1@@@@@@@@@@@@@;NLD=Regels worden aangemaakt @1@@@@@@@@@@@@@;NOR=Opprette Rad @1@@@@@@@@@@@@@;SVE=Skapar rader @1@@@@@@@@@@@@@';
      Text002@11012006 : TextConst 'DEU=Ab %2 ist kein internes Werkzeug an Standort %1 vorhanden;ENU=No internal plant present on location %1 per %2.;NLD=Er is geen intern materieel aanwezig op locatie %1 per %2.;NOR=Det finnes ingen interne maskiner pÜ lokasjon %1 per %2.;SVE=Det finns inga interna Maskiner pÜ lagerstÑllet %1 per %2.';
      Text003@11012007 : TextConst 'DEU=%1 %2 erstellt;ENU=%1 %2(s) created;NLD=%1 %2(s) aangemaakt;NOR=%1 %2 er opprettet;SVE=%1 %2 har skapats';
      PlantSetup@1210190003 : Record 11012550;
      ExitOrderRec@11012000 : Record 11012559;
      PlantRec@1100485001 : Record 11012551;
      PlantNoRec@1100485002 : Record 11012552;
      Window@11012001 : Dialog;
      NoOfRecords@11012002 : Integer;
      LineCounter@11012003 : Integer;
      Text004@1210190000 : TextConst 'DEU=Mîchten Sie ein %1 erstellen?;ENU=Do You want to Create an %1 ?;NLD=Wilt u een %1 aanmaken?;NOR=Vil du opprette %1?;SVE=Vill du skapa %1?';
      LineNo@1210190001 : Integer;
      Text005@1210190002 : TextConst 'DEU=Es ist kein Exit-Werkzeug vorhanden.;ENU=No Exit Plant present.;NLD=Er is geen exit materieel aanwezig.;NOR=Det finnes ingen avslutningsmaskin pÜ %1 %2.;SVE=Det finns ingen avslutsMaskin pÜ %1 %2.';
      Text006@1100485000 : TextConst 'DEU=Ab %2 ist kein externes Werkzeug an Standort %1 vorhanden.;ENU=No external plant present on location %1 per %2.;NLD=Er is geen extern materieel aanwezig op locatie %1 per %2.;NOR=Det finnes ingen eksterne maskiner pÜ lokasjon %1 per %2.;SVE=Det finns inga externa Maskiner pÜ lagerstÑllet %1 per %2.';
      Text007@1100525000 : TextConst 'DEU=Auftrag;ENU=order;NLD=order;NOR=Ordre;SVE=Order';
      Text008@1100525001 : TextConst 'DEU=%1 Zeilen.\;ENU=, %1 line(s);NLD=, %1 regel(s);NOR=, %1 rad(er);SVE=, %1 rad(er)';
      Text010a@1100529003 : TextConst 'DEU=WÑhlen Sie zuerst %1aus.;ENU=First select %1(s).;NLD=Selecteer eerst %1(s).;NOR=Velg %1(er) fõrst';
      Text011@1100529001 : TextConst 'DEU=Alle %1wurden markiert, teilweise öbertragung nicht zulÑssig.;ENU=All %1s are selected, party transfer not allowed.;NLD=Alle %1s zijn geselecteerd, gedeeltelijk overzetten niet toegestaan.;NOR=Alle %1er er merket, delvis overfõring ikke tillatt.';
      Text012@1100529000 : TextConst 'DEU=Mîchten Sie %1 teilweise Åbertragen?;ENU=Do you want to transfer the %1 partly?;NLD=Wilt u de %1 gedeeltelijk overzetten?;NOR=Vil du overfõre %1 delvis?';
      Text013@1100529004 : TextConst 'DEU=Nicht zulÑssig, Auftrag ist mit einem Verkaufs-Mietauftrag verknÅpft.;ENU=Not allowed, order is linked to a Sales Rental Order.;NLD=Niet toegestaan, order is gekoppeld aan een Verkoop-verhuurorder.;NOR="Ikke tillatt, ordre koblet til en salgsleieordre "';
      Text014@1100529005 : TextConst 'DEU=Nicht zulÑssig, aus Werkzeugauftrag erstellt %1;ENU=Not allowed, created from Plant Order %1;NLD=Niet toegestaan, aangemaakt vanuit materieelorder %1;NOR=Ikke tillatt, oprrettet fra maskinordre %1';
      Text015@1100529006 : TextConst 'DEU=Nicht zulÑssig, verknÅpfte Belege/Kommentare vorhanden;ENU=Not allowed, linked documents / comment present;NLD=Niet toegestaan, gekoppelde documenten / opmerkingen aanwezig;NOR=Ikke tillatt, koblede dokumenter/kommentarer til stede';

    PROCEDURE Code@1();
    VAR
      InventoryRec@11012000 : Record 11012555;
      OrderLineRec@11012001 : Record 11012560;
      lvPlantRentEntryRec@1100485002 : Record 11012535;
      PlantOrderLine@1100529000 : Record 11012557;
      lvExternal@1100485000 : Boolean;
      lvAllowed@1100485001 : Boolean;
    BEGIN
      //* Opvoeren materieel dat op locatie staat. Als in de kop de leverancier gevuld is (bij ordersoort 'Afvoer extern' verplicht)
      //* dan wordt alleen extern materieel (en dus geen eigen) van die leverancier opgevoerd. Als de leverancier in de kop niet
      //* gevuld is dan wordt alle materieel (eigen + extern) opgevoerd.

      WITH ExitOrderRec DO BEGIN
        PlantSetup.GET;
        TESTFIELD(Posted,FALSE);
        TESTFIELD(Location);
        TESTFIELD("Exit-date");
        IF Type = Type::External THEN
          TESTFIELD("Vendor No.");
        CheckBlock(FALSE);

        IF "Vendor No." = '' THEN BEGIN
          IF NOT CONFIRM(Text000, FALSE, "Exit-date", Location) THEN
            EXIT;
        END ELSE BEGIN
          IF NOT CONFIRM(Text000b, FALSE, "Exit-date", Location, "Vendor No.") THEN
            EXIT;
        END;

        //DP00183.sn
        OrderLineRec.RESET;
        OrderLineRec.SETRANGE("Exit-order No.","No.");
        IF OrderLineRec.FINDSET THEN BEGIN
          REPEAT
             PlantOrderLine.SETCURRENTKEY("Exit Order No.", "Exit Order Line No.");
             PlantOrderLine.SETRANGE("Exit Order No.", OrderLineRec."Exit-order No.");
             PlantOrderLine.SETRANGE("Exit Order Line No.", OrderLineRec."Line No.");
             IF PlantOrderLine.FINDFIRST THEN   //Is not / should not be done for exit order that is create from PO
               ERROR(Text014, PlantOrderLine."Plant Order No.");
             IF OrderLineRec.HasCommentLines() THEN
               ERROR(Text015);
             IF OrderLineRec.HasDocumentLinks() THEN
               ERROR(Text015);
          UNTIL OrderLineRec.NEXT = 0;
        END;
        //DP00183.sn

        Window.OPEN(Text001);
        LineCounter := 0;

        InventoryRec.LOCKTABLE;
        OrderLineRec.LOCKTABLE;

        OrderLineRec.RESET;
        OrderLineRec.SETRANGE("Exit-order No.","No.");
        OrderLineRec.DELETEALL(TRUE);  //DP00183.c
        LineNo := 0;

        InventoryRec.SETRANGE(InventoryRec.Removed,FALSE);
        InventoryRec.SETRANGE(Location,Location);
        InventoryRec.SETFILTER("Present from",'<= %1',"Exit-date");
        InventoryRec.SETRANGE(Sold,FALSE);
        InventoryRec.SETFILTER(Quantity,'>0');
        NoOfRecords := InventoryRec.COUNT;
        IF InventoryRec.FINDSET THEN BEGIN
          REPEAT
            LineCounter := LineCounter + 1;
            Window.UPDATE(1,ROUND(LineCounter / NoOfRecords * 10000,1));

            PlantRec.GET(InventoryRec."Plant Type");
            lvExternal := PlantRec.External;
            IF (InventoryRec."Plant No." <> '0')  THEN BEGIN
              IF PlantNoRec.GET(InventoryRec."Plant Type", InventoryRec."Plant No.") THEN
                lvExternal :=  PlantNoRec.External;
            END;

            lvAllowed := TRUE;
            IF ("Vendor No." <> '') THEN BEGIN
              IF lvAllowed AND (NOT lvExternal) THEN
                lvAllowed := FALSE;
              IF lvAllowed AND (InventoryRec."Plant No." <> '0')  THEN BEGIN
                IF ("Vendor No." <> PlantNoRec.Vendor) THEN
                  lvAllowed := FALSE;
              END;
              IF lvAllowed AND (InventoryRec."Plant No." = '0')  THEN BEGIN
                lvPlantRentEntryRec.RESET;
                lvPlantRentEntryRec.SETRANGE(Removed, FALSE);
                lvPlantRentEntryRec.SETRANGE("Vendor No.", "Vendor No.");
                lvPlantRentEntryRec.SETRANGE("Plant Type", InventoryRec."Plant Type");
                lvPlantRentEntryRec.SETFILTER("Present from",'<=%1',"Exit-date");
                IF NOT lvPlantRentEntryRec.FINDFIRST THEN
                  lvAllowed := FALSE;
              END;
            END;

            IF lvAllowed THEN BEGIN
              OrderLineRec.SETRANGE("Exit-order No.","No.");
              OrderLineRec.SETRANGE("Plant Type",InventoryRec."Plant Type");
              OrderLineRec.SETRANGE("No.",InventoryRec."Plant No.");
              OrderLineRec.SETRANGE("Plant Group",InventoryRec."Plant Group");
              OrderLineRec.SETRANGE("From Rate Code",InventoryRec."Rate Code");  //* Onafhankelijk van instelling!
              IF NOT OrderLineRec.FINDFIRST THEN BEGIN
                LineNo := LineNo + 10000;
                OrderLineRec.INIT;
                OrderLineRec."Exit-order No." := "No.";
                OrderLineRec.InitRecord;
                OrderLineRec."Line No." := LineNo;
                OrderLineRec."Exit-date" := "Exit-date";
                OrderLineRec.SETFILTER("Date Filter",'..%1',"Exit-date");
                OrderLineRec."From Location" := Location;
                OrderLineRec."Plant Type" := InventoryRec."Plant Type";
                OrderLineRec."Plant Group" := InventoryRec."Plant Group";
                OrderLineRec.VALIDATE("Plant Type");
                OrderLineRec."No." := InventoryRec."Plant No.";
                OrderLineRec.VALIDATE("No.");
                IF lvExternal THEN BEGIN
                  IF ("Vendor No." <> '') THEN
                    OrderLineRec."Vendor No." := "Vendor No."
                  ELSE BEGIN
                    IF (InventoryRec."Plant No." <> '0')  THEN
                      OrderLineRec."Vendor No." := PlantNoRec.Vendor
                    ELSE BEGIN
                      lvPlantRentEntryRec.RESET;
                      lvPlantRentEntryRec.SETCURRENTKEY(Removed, "Plant Type");
                      lvPlantRentEntryRec.SETRANGE(Removed, FALSE);
                      lvPlantRentEntryRec.SETRANGE("Plant Type", InventoryRec."Plant Type");
                      lvPlantRentEntryRec.SETFILTER("Present from",'<=%1',"Exit-date");
                      IF lvPlantRentEntryRec.FINDFIRST THEN BEGIN
                        lvPlantRentEntryRec.SETFILTER("Vendor No.", '<>%1', lvPlantRentEntryRec."Vendor No.");
                        IF NOT lvPlantRentEntryRec.FINDFIRST THEN
                          OrderLineRec."Vendor No." := lvPlantRentEntryRec."Vendor No.";
                      END;
                    END;
                  END;
                END;
                OrderLineRec."From Rate Code" := InventoryRec."Rate Code";
                OrderLineRec.SETRANGE("Plant Group Filter", OrderLineRec."Plant Group");
                //* Gebruik 'Stock Rate Code on Location' en niet "Stock Plant No. on Location"! (als alles op tarc='' dan toch gelijk)
                OrderLineRec.CALCFIELDS("Stock Rate Code on Location");
                OrderLineRec.VALIDATE(Quantity,OrderLineRec."Stock Rate Code on Location");
                OrderLineRec.INSERT(TRUE);
              END;
            END;
          UNTIL InventoryRec.NEXT = 0;
        END;
        COMMIT;
        Window.CLOSE;
        IF LineNo = 0 THEN BEGIN
          IF (Type <> Type::External) THEN
            MESSAGE(Text002, Location, "Exit-date")
          ELSE
            MESSAGE(Text006, Location, "Exit-date");
        END ELSE
          MESSAGE(Text003,LineNo/10000,OrderLineRec.TABLECAPTION);

      END;
    END;

    PROCEDURE InsertPlantSelectionOnExitOrde@1210190001(VAR Rec@1100525000 : Record 11012559);
    VAR
      OrderLineRec@1210190004 : Record 11012560;
      InventoryRec@1210190002 : Record 11012555;
      InventoryRec2@1210190003 : Record 11012555;
      TmpPlantInventRec@1100525002 : TEMPORARY Record 11012555;
      lvPlantRentEntryRec@1210190006 : Record 11012535;
      PlantInventPage@1100525001 : Page 11012559;
      lvExternal@1210190005 : Boolean;
      DetailLevel@1100525004 : Integer;
    BEGIN
      //*32358 Function copied from PO (C11012552)
      ExitOrderRec.COPY(Rec);
      WITH ExitOrderRec DO BEGIN
        PlantSetup.GET;
        TESTFIELD("No.");
        TESTFIELD(Posted,FALSE);
        TESTFIELD(Location);
        TESTFIELD("Exit-date");
        IF Type = Type::External THEN
          TESTFIELD("Vendor No.");
        CheckBlock(FALSE);

        InventoryRec.RESET;
        InventoryRec.FILTERGROUP(9);
        InventoryRec.SETRANGE(Removed,FALSE);
        InventoryRec.SETRANGE(Location,Location);
        InventoryRec.SETFILTER("Present from",'<= %1',"Exit-date");
        InventoryRec.SETFILTER("Date Filter", '<=%1', "Exit-date");
        InventoryRec.SETRANGE(Sold,FALSE);
        InventoryRec.SETRANGE("Sold Filter", FALSE);
        InventoryRec.SETFILTER(Quantity,'>0');
        InventoryRec.SETFILTER("Quantity Filter", '>%1', 0);
        InventoryRec.FILTERGROUP(0);
        IF PlantSetup."Rate Codes" THEN  //* Detail Level: 2=Plant No., 3=Rate Code
          DetailLevel := 3
        ELSE BEGIN
          InventoryRec2.COPY(InventoryRec);
          InventoryRec2.SETFILTER("Rate Code", '<>%1', '');
          IF InventoryRec2.ISEMPTY THEN
            DetailLevel := 2
          ELSE
            DetailLevel := 3;
        END;

        PlantInventPage.SetDetailSelection(DetailLevel);
        PlantInventPage.SetMultiSelection();  //* Then Detail Level not editable in form, so in returned in the level that is set
        PlantInventPage.SETTABLEVIEW(InventoryRec);
        PlantInventPage.LOOKUPMODE(TRUE);
        IF PlantInventPage.RUNMODAL <> ACTION::LookupOK THEN
          EXIT;
        IF NOT PlantInventPage.GetMarkedRecords(TmpPlantInventRec) THEN //* In tmprec compressed quantity is returned
          EXIT;

        TmpPlantInventRec.RESET;
        IF TmpPlantInventRec.FINDSET THEN BEGIN
          OrderLineRec.RESET;
          OrderLineRec.SETRANGE("Exit-order No.", "No.");
          IF OrderLineRec.FINDLAST THEN
            LineNo := OrderLineRec."Line No."
          ELSE
            LineNo := 0;
          REPEAT
            IF TmpPlantInventRec.Quantity > 0 THEN BEGIN
              PlantRec.GET(TmpPlantInventRec."Plant Type");
              lvExternal := PlantRec.External;
              IF (TmpPlantInventRec."Plant No." <> '0')  THEN BEGIN
                IF PlantNoRec.GET(TmpPlantInventRec."Plant Type", TmpPlantInventRec."Plant No.") THEN
                  lvExternal :=  PlantNoRec.External;
              END;
              LineNo := LineNo + 10000;
              OrderLineRec.INIT;
              OrderLineRec."Exit-order No." := "No.";
              OrderLineRec.InitRecord;
              OrderLineRec."Line No." := LineNo;
              OrderLineRec."Exit-date" := "Exit-date";
              OrderLineRec."From Location" := Location;
              OrderLineRec."Plant Type" := TmpPlantInventRec."Plant Type";
              OrderLineRec."Plant Group" := TmpPlantInventRec."Plant Group";
              OrderLineRec.VALIDATE("Plant Type");
              OrderLineRec."No." := TmpPlantInventRec."Plant No.";
              OrderLineRec.VALIDATE("No.");
              IF lvExternal THEN BEGIN
                IF ("Vendor No." <> '') THEN
                  OrderLineRec."Vendor No." := "Vendor No."
                ELSE BEGIN
                  IF (TmpPlantInventRec."Plant No." <> '0')  THEN
                    OrderLineRec."Vendor No." := PlantNoRec.Vendor
                  ELSE BEGIN
                    lvPlantRentEntryRec.RESET;
                    lvPlantRentEntryRec.SETCURRENTKEY(Removed, "Plant Type");
                    lvPlantRentEntryRec.SETRANGE(Removed, FALSE);
                    lvPlantRentEntryRec.SETRANGE("Plant Type", TmpPlantInventRec."Plant Type");
                    lvPlantRentEntryRec.SETFILTER("Present from",'<=%1',"Exit-date");
                    IF lvPlantRentEntryRec.FINDFIRST THEN BEGIN
                      lvPlantRentEntryRec.SETFILTER("Vendor No.", '<>%1', lvPlantRentEntryRec."Vendor No.");
                      IF NOT lvPlantRentEntryRec.FINDFIRST THEN
                        OrderLineRec."Vendor No." := lvPlantRentEntryRec."Vendor No.";
                    END;
                  END;
                END;
              END;
              OrderLineRec."From Rate Code" := TmpPlantInventRec."Rate Code";
              OrderLineRec.VALIDATE(Quantity, TmpPlantInventRec.Quantity);
              OrderLineRec.INSERT(TRUE);
            END;
          UNTIL TmpPlantInventRec.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE InsertExitOrderFromPlantOrder@1210190000(PlantOrderRec@1210190000 : Record 11012556;UseFromLocationOfPlantOrderLines@1100528400 : Boolean);
    VAR
      ExitOrderLine@1210190001 : Record 11012560;
      ExitOrderCostLine@1210190005 : Record 11012561;
      PlantOrderLine@1210190002 : Record 11012557;
      PlantLocRec@1210190003 : Record 11012554;
      ExitOrder2@1100529000 : Record 11012559;
      ExitOrderTypeByReason@1100529002 : Record 11072665;
      TmpExitOrder@1100529003 : TEMPORARY Record 11012559;
      TmpTotalExit@1100529004 : TEMPORARY Record 11012560;
      OrderContactPlant@1100525000 : Record 11012536;
      ExitOrderType@1100529001 : Option;
      ExitOrderTypeOfReason@1100528900 : Boolean;
      VendorExternal@1100529005 : Code[20];
    BEGIN
      WITH PlantOrderRec DO BEGIN
        TESTFIELD(Posted,FALSE);
        TESTFIELD("From Location");
        IF NOT (Type IN [Type::Arrival,Type::Removal]) THEN
          FIELDERROR(Type);
        IF Type = Type::Arrival THEN BEGIN
          TESTFIELD("To Location");
        END ELSE BEGIN
          TESTFIELD("Advanced Removal");
          TESTFIELD("To Location Exit");
        END;

        IF NOT CONFIRM(Text004,FALSE,ExitOrderRec.TABLECAPTION) THEN
          EXIT;

        Window.OPEN(Text001);
        LineCounter := 0;

        PlantSetup.GET;
        PlantOrderLine.RESET;
        PlantOrderLine.SETRANGE("Plant Order No.","No.");
        IF Type = Type::Arrival THEN
          PlantOrderLine.SETFILTER("Quantity Exit (Sold)", '<>0')
        ELSE
          PlantOrderLine.SETFILTER("Quantity Exit", '<>0');
        PlantOrderLine.SETRANGE("Exit Order No.", '');  //DP00183
        NoOfRecords := PlantOrderLine.COUNT;

        IF PlantOrderLine.FINDSET(TRUE,FALSE) THEN BEGIN  //DP00183.c
          REPEAT  //DP00241.n (14601)
            PlantOrderLine.CALCFIELDS(Bulk);
            IF NOT PlantOrderLine.Bulk THEN BEGIN
              PlantOrderLine.TESTFIELD("No.");
              IF Type = Type::Arrival THEN
                PlantOrderLine.TESTFIELD("Quantity Exit (Sold)", 1)
              ELSE
                PlantOrderLine.TESTFIELD("Quantity Exit", 1);
            END;

            //DP00241.sn (14601)
            VendorExternal := '';
            IF Type = Type::Arrival THEN
              ExitOrderType := ExitOrderRec.Type::Sales
            ELSE BEGIN
              ExitOrderTypeOfReason := FALSE;
              CASE PlantSetup."Exit Order Type" OF
                PlantSetup."Exit Order Type"::Missing:
                  ExitOrderType := ExitOrderRec.Type::Missing;
                PlantSetup."Exit Order Type"::Scrap:
                  ExitOrderType := ExitOrderRec.Type::Scrap;
                ELSE
                  ExitOrderType := ExitOrderRec.Type::Scrap;
              END;
              IF (PlantOrderLine."Reason Code (Exit)" <> '') AND ("Sales Rental Order No." = '') THEN BEGIN
                IF ExitOrderTypeByReason.GET(PlantOrderLine."Reason Code (Exit)") THEN BEGIN
                  CASE ExitOrderTypeByReason."Exit Order Type" OF
                    ExitOrderTypeByReason."Exit Order Type"::Missing:
                      BEGIN
                        ExitOrderType := ExitOrderRec.Type::Missing;
                        ExitOrderTypeOfReason := TRUE;
                      END;
                    ExitOrderTypeByReason."Exit Order Type"::Scrap:
                      BEGIN
                        ExitOrderType := ExitOrderRec.Type::Scrap;
                        ExitOrderTypeOfReason := TRUE;
                      END;
                  END;
                END;
              END;
              IF ((NOT ExitOrderTypeOfReason) OR (ExitOrderType = ExitOrderRec.Type::Scrap)) AND
                 (PlantOrderLine."No." <> '') AND (PlantOrderLine."No." <> '0')
              THEN BEGIN
                IF PlantNoRec.GET(PlantOrderLine."Plant Type", PlantOrderLine."No.") THEN BEGIN
                  IF PlantNoRec.External AND (PlantNoRec.Vendor <> '') THEN BEGIN
                    ExitOrderType := ExitOrderRec.Type::External;
                    VendorExternal := PlantNoRec.Vendor;
                  END;
                END;
              END;
            END;
            TmpExitOrder.RESET;
            IF ExitOrderType = ExitOrderRec.Type::External THEN  //C014763
              TmpExitOrder.SETRANGE("Vendor No.", VendorExternal);
            TmpExitOrder.SETRANGE(Type, ExitOrderType);
            IF UseFromLocationOfPlantOrderLines AND (PlantOrderLine."From Location" <> '') THEN
              TmpExitOrder.SETRANGE(Location, PlantOrderLine."From Location");
            IF TmpExitOrder.FINDFIRST THEN
              ExitOrderRec.GET(TmpExitOrder."No.")
            ELSE BEGIN
            //DP00241.en
              ExitOrderRec.INIT;
              //DP00183.so
              //IF "Exit Order No." <> '' THEN
              //Was for if exitorder was delete and create again (now relation with exit on PO-line level)
              //  ExitOrderRec."No." := "Exit Order No."
              //ELSE
              //  IF PlantSetup."Use Plant Order No for Exit" THEN
              //    ExitOrderRec."No." := "No."
              //  ELSE
              //    ExitOrderRec."No." := '';
              //DP00183.eo
              //DP00183.sn
              ExitOrderRec."No." := '';
              IF PlantSetup."Use Plant Order No for Exit" THEN BEGIN
                ExitOrderRec."No." := "No.";
                IF ExitOrder2.GET(ExitOrderRec."No.") THEN  //If already exist then only first part is PO number,
                  ExitOrderRec."No." := DetermineBackorderNo(ExitOrderRec."No."); //must always be a new exit order
              END;
              //DP00183.en
              ExitOrderRec.INSERT(TRUE);
              ExitOrderRec.Type := ExitOrderType;  //DP00241.n (14601)
              IF Type = Type::Arrival THEN BEGIN
                //ExitOrderRec.Type := ExitOrderRec.Type::Sales;  //DP00241.o (14601)
                ExitOrderRec.VALIDATE(Location, "To Location");
                OrderContactPlant.CopyOrderContacts(
                  OrderContactPlant.Type::"PO To", PlantOrderRec."No.",OrderContactPlant.Type::ExitOrder, ExitOrderRec."No.");
              END ELSE BEGIN
                //IF PlantSetup."Exit Order Type" = 0 THEN               //DP00241.so (14601)
                //  ExitOrderRec.Type := ExitOrderRec.Type::Scrap
                //ELSE
                //  ExitOrderRec.Type := PlantSetup."Exit Order Type";   //DP00241.eo (14601)
                IF UseFromLocationOfPlantOrderLines AND (PlantOrderLine."From Location" <> '') THEN
                  ExitOrderRec.VALIDATE(Location, PlantOrderLine."From Location")
                ELSE
                  ExitOrderRec.VALIDATE(Location, "From Location");
                IF ExitOrderType = ExitOrderRec.Type::External THEN  //C014763
                  ExitOrderRec.VALIDATE("Vendor No.", VendorExternal);
                OrderContactPlant.CopyOrderContacts(
                  OrderContactPlant.Type::"PO From", PlantOrderRec."No.",OrderContactPlant.Type::ExitOrder, ExitOrderRec."No.");
              END;
              ExitOrderRec."Exit-date" := "Transfer Date";
              ExitOrderRec.MODIFY;
              //DP00241.sn (14601)
              TmpExitOrder := ExitOrderRec;
              TmpExitOrder.INSERT;
              TmpTotalExit.INIT;
              TmpTotalExit."Exit-order No." := ExitOrderRec."No.";
              TmpTotalExit."Line No." := 0;
              TmpTotalExit."Plant Group" := PlantOrderLine."To Plant Group";
              TmpTotalExit.INSERT;
              //DP00241.n (14601)
            END;  //DP00241.n (14601)
            //ExitOrderLine.LOCKTABLE;
            ExitOrderLine.RESET;
            ExitOrderLine.SETRANGE("Exit-order No.",ExitOrderRec."No.");
            IF ExitOrderLine.FINDLAST THEN
              LineNo := ExitOrderLine."Line No."
            ELSE
              LineNo := 0;

          //REPEAT  //DP00241.o (14601)
            LineCounter := LineCounter + 1;
            Window.UPDATE(1,ROUND(LineCounter / NoOfRecords * 10000,1));

            LineNo := LineNo + 10000;

            ExitOrderLine.INIT;
            ExitOrderLine."Exit-order No." := ExitOrderRec."No.";
            ExitOrderLine."Line No." := LineNo;
            ExitOrderLine.InitRecord;
            //First use From Location an From Rate Code to prevent error messages when validating.
            ExitOrderLine."From Location" := "From Location";
            ExitOrderLine."From Rate Code" := PlantOrderLine."From Rate Code";
            //
            ExitOrderLine.VALIDATE(Type, ExitOrderLine.Type::Plant);
            ExitOrderLine.VALIDATE("Plant Type", PlantOrderLine."Plant Type");
            ExitOrderLine.VALIDATE("Plant Group", PlantOrderLine."To Plant Group");
            TmpTotalExit.GET(ExitOrderRec."No.", 0);
            IF PlantOrderLine."To Plant Group" <> TmpTotalExit."Plant Group" THEN BEGIN
              TmpTotalExit."Plant Group" := '';
              TmpTotalExit.MODIFY;
            END;
            ExitOrderLine.VALIDATE("No.", PlantOrderLine."No.");
            IF Type = Type::Arrival THEN
              ExitOrderLine.VALIDATE(Quantity, PlantOrderLine."Quantity Exit (Sold)")
            ELSE
              ExitOrderLine.VALIDATE(Quantity, PlantOrderLine."Quantity Exit");
            //Now use the right location and rate code. The one after posting Plant Order.
            IF Type = Type::Arrival THEN
              ExitOrderLine."From Location" := "To Location"
            ELSE BEGIN
              ExitOrderLine."From Location" := "To Location Exit";
              IF (PlantOrderLine."No." <> '0')  THEN BEGIN
                IF PlantNoRec.GET(PlantOrderLine."Plant Type", PlantOrderLine."No.") THEN
                  IF PlantNoRec.External THEN
                    ExitOrderLine."Vendor No." := PlantNoRec.Vendor;
              END;
            END;
            IF "From Location" <> '' THEN BEGIN
              IF PlantLocRec.GET("From Location") THEN BEGIN
                 IF PlantLocRec.Element <> '' THEN
                   ExitOrderLine.Element := PlantLocRec.Element;
              END;
            END;
            ExitOrderLine."From Rate Code" := PlantOrderLine."To Rate Code";
            ExitOrderLine."Reason Code" := PlantOrderLine."Reason Code (Exit)";
            ExitOrderLine."Sales Order Line No." := PlantOrderLine."Sales Order Line No.";
            ExitOrderLine.INSERT;
            //TotalExit := TotalExit + ExitOrderLine.Amount;  //DP00241.o (14601)
            //DP00241.sn (14601)
            IF ExitOrderLine.Amount <> 0 THEN BEGIN
              TmpTotalExit.GET(ExitOrderRec."No.", 0);
              TmpTotalExit.Amount := TmpTotalExit.Amount + ExitOrderLine.Amount;
              TmpTotalExit.MODIFY;
            END;
            //DP00241.en (14601)
            //DP00183.sn
            PlantOrderLine."Exit Order No." := ExitOrderLine."Exit-order No.";
            PlantOrderLine."Exit Order Line No." := ExitOrderLine."Line No.";
            PlantOrderLine.MODIFY;
            CopyDocLinksPOLineToExitLine(PlantOrderLine, ExitOrderLine);
            CopyCommentsPOLineToExitLine(PlantOrderLine, ExitOrderLine);
            //DP00183.en
          UNTIL PlantOrderLine.NEXT = 0;
        END;

        //IF (Type = Type::Removal) AND (TotalExit <> 0) THEN BEGIN  //DP00241.o (14601)
        IF (Type = Type::Removal) THEN BEGIN  //DP00241.n (14601)
          PlantLocRec.GET("From Location");
          IF PlantLocRec."Damage Settlement" THEN BEGIN
            //DP00241.sn (14601)
            TmpTotalExit.SETFILTER(Amount, '<>%1', 0);
            IF TmpTotalExit.FINDSET THEN BEGIN
              REPEAT
            //DP00241.en (14601)
                //LineCounter := LineCounter + 1;
                ExitOrderCostLine.INIT;
                //ExitOrderCostLine."Exit-order No." := ExitOrderRec."No.";  //DP00241.o (14601)
                ExitOrderCostLine."Exit-order No." := TmpTotalExit."Exit-order No.";  //DP00241.n (14601)
                ExitOrderCostLine."Line No." := 10000;
                ExitOrderCostLine.InitRecord;
                ExitOrderCostLine.VALIDATE(Type, ExitOrderCostLine.Type::"Sundry Costs");
                ExitOrderCostLine.VALIDATE(Quantity, 1);
                //ExitOrderCostLine.VALIDATE(Amount, -TotalExit);  //DP00241.o (14601)
                ExitOrderCostLine.VALIDATE(Amount, -TmpTotalExit.Amount);  //DP00241.n (14601)
                ExitOrderCostLine.VALIDATE("Plant Group", TmpTotalExit."Plant Group");
                IF PlantLocRec.Element <> '' THEN
                  ExitOrderCostLine.Element := PlantLocRec.Element;
                ExitOrderCostLine.INSERT;
              UNTIL TmpTotalExit.NEXT = 0;  //DP00241.n (14601)
            END;
          END;
        END;
        IF LineCounter > 0 THEN BEGIN  //Only if exit order created
          //"Exit Order No." := ExitOrderRec."No.";
          TmpExitOrder.RESET;
          IF TmpExitOrder.FINDFIRST THEN  // If more then one Exit Order created then fill with first (then not empty!)
            "Exit Order No." := TmpExitOrder."No.";  //Note: Exit Order No (and Line No) are also filled on the PO-Line
          MODIFY;
          COMMIT;
        END;
        Window.CLOSE;
        IF LineCounter = 0 THEN
          MESSAGE(Text005)
        ELSE
          MESSAGE(Text003, LineCounter, ExitOrderLine.TABLECAPTION);

      END;
    END;

    PROCEDURE CreateReturnedLossOrdersFromPO@1100525000(PlantOrder@1100525000 : Record 11012556;VAR PlantOrderPlantLine@1100525001 : Record 11012557);
    VAR
      PlantOrderLine@1100525004 : Record 11012557;
      ExitOrderLine@1100525006 : Record 11012560;
      ReturnOrder@1100525002 : Record 11012655;
      ReturnOrderLine@1100525003 : Record 11012656;
      TmpReturnOrder@1100525005 : TEMPORARY Record 11012655;
      CreateLine@1100525008 : Boolean;
      NextLineNo@1100525007 : Integer;
      OrderCounter@1100525009 : Integer;
      FirstOrderNo@1100525011 : Code[20];
      LastOrderNo@1100525010 : Code[20];
      MessText@1100525012 : Text[1024];
    BEGIN
      PlantOrder.TESTFIELD(Posted, FALSE);
      IF PlantOrder.Type = PlantOrder.Type::"Negative Inventory Correction" THEN
        PlantOrder.FIELDERROR(Type);
      OrderCounter := 0;
      LineCounter := 0;

      IF NOT CONFIRM(Text004,FALSE,ReturnOrder.TABLECAPTION) THEN
        EXIT;

      PlantOrderLine.COPY(PlantOrderPlantLine);
      IF NOT PlantOrderLine.MARKEDONLY THEN BEGIN
        PlantOrderLine.MARKEDONLY(TRUE);
        IF PlantOrderLine.ISEMPTY THEN
          PlantOrderLine.MARKEDONLY(FALSE);
      END;
      PlantOrderLine.FILTERGROUP(9);
      PlantOrderLine.SETRANGE("Plant Order No.", PlantOrder."No.");
      PlantOrderLine.SETRANGE(Type, PlantOrderLine.Type::Plant);
      PlantOrderLine.SETFILTER("Plant Type", '<>%1', '');
      PlantOrderLine.SETFILTER("No.", '<>%1&<>%2', '', '0');
      PlantOrderLine.SETRANGE(Bulk, FALSE);
      PlantOrderLine.FILTERGROUP(0);
      IF PlantOrderLine.FINDSET THEN BEGIN
        REPEAT
          CreateLine := FALSE;
          IF PlantOrderLine.CheckPlantNoLossed(ExitOrderLine) THEN BEGIN
            ReturnOrderLine.RESET;
            ReturnOrderLine.SETCURRENTKEY("Plant Type", "No.");
            ReturnOrderLine.SETRANGE("Plant Type", ExitOrderLine."Plant Type");
            ReturnOrderLine.SETRANGE("No.", ExitOrderLine."No.");  //* PlantNo
            ReturnOrderLine.SETRANGE(Posted, FALSE);
            IF ReturnOrderLine.ISEMPTY THEN  //* Not on a returned loss order that is not posted
              CreateLine := TRUE;
          END;
          IF CreateLine THEN BEGIN
            TmpReturnOrder.RESET;
            TmpReturnOrder.SETRANGE("Exit Order No.", ExitOrderLine."Exit-order No.");
            IF TmpReturnOrder.FINDFIRST THEN BEGIN
              ReturnOrder.GET(TmpReturnOrder."No.");
              ReturnOrderLine.RESET;
              ReturnOrderLine.SETRANGE("Returned Loss Order No.", ReturnOrder."No.");
              ReturnOrderLine.FINDLAST;
              NextLineNo := ReturnOrderLine."Line No." + 10000;
            END ELSE BEGIN
              COMMIT;
              ReturnOrder.INIT;
              ReturnOrder."No." := '';
              ReturnOrder.VALIDATE("Exit Order No.", ExitOrderLine."Exit-order No.");
              ReturnOrder.INSERT(TRUE);  //* Do not first INSERT and then fill ExitOrderNo and then here MODIFY
              TmpReturnOrder := ReturnOrder;
              TmpReturnOrder.INSERT;
              OrderCounter := OrderCounter + 1;
              IF LineCounter = 0 THEN
                FirstOrderNo := ReturnOrder."No.";
                LastOrderNo := ReturnOrder."No.";
              NextLineNo := 10000;
            END;
            ReturnOrderLine.RESET;
            ReturnOrderLine.INIT;
            ReturnOrderLine."Returned Loss Order No." := ReturnOrder."No.";
            ReturnOrderLine."Line No." := NextLineNo;
            ReturnOrderLine.InitRecord();
            ReturnOrderLine.Type := ReturnOrderLine.Type::Plant;
            ReturnOrderLine.VALIDATE("Exit Order Line No.", ExitOrderLine."Line No.");
            ReturnOrderLine.INSERT(TRUE);
            LineCounter := LineCounter + 1;
          END;
        UNTIL PlantOrderLine.NEXT = 0;
      END;

      MessText := STRSUBSTNO(Text003, OrderCounter, Text007);
      IF OrderCounter > 0 THEN BEGIN
        IF OrderCounter = 1 THEN
          MessText := MessText + ' (' + FirstOrderNo + ')'
        ELSE
          MessText := MessText + ' (' + FirstOrderNo + '..' + LastOrderNo + ')';
        MessText := MessText + STRSUBSTNO(Text008, LineCounter);
      END;
      MESSAGE(MessText);
    END;

    LOCAL PROCEDURE CopyDocLinksPOLineToExitLine@1100528400(SourcePlantOrderLine@1100528400 : Record 11012557;TargetExitOrderLine@1100528401 : Record 11012560);
    VAR
      DocumentLinkMgt@1100528402 : Codeunit 11012401;
      SourceRecRef@1100528403 : RecordRef;
      TargetRecRef@1100528404 : RecordRef;
    BEGIN
      //DP00183
      SourceRecRef.GETTABLE(SourcePlantOrderLine);
      TargetRecRef.GETTABLE(TargetExitOrderLine);
      DocumentLinkMgt.CopyDocLinks(SourceRecRef, TargetRecRef);
    END;

    LOCAL PROCEDURE CopyCommentsPOLineToExitLine@1100529007(SourcePlantOrderLine@1100528400 : Record 11012557;TargetExitOrderLine@1100528401 : Record 11012560);
    VAR
      PlantCommentLine@1100528402 : Record 11072666;
    BEGIN
      //DP00183
      //PlantCommentLine.CopyComments(SourceRecRef, TargetRecRef);  //C005461.o
      PlantCommentLine.CopyComments(
        DATABASE::"Plant Order Line", SourcePlantOrderLine."Plant Order No." , '', SourcePlantOrderLine."Line No.",
        DATABASE::"Exit Order Line" , TargetExitOrderLine."Exit-order No." , '', TargetExitOrderLine."Line No.");  //C005461.n
    END;

    PROCEDURE RunPartlyMoveToNewOrder@1100529000(Rec@1100529000 : Record 11012559;VAR SelectedExitLine@1100529001 : Record 11012560) : Code[20];
    BEGIN
      //*DP00183
      ExitOrderRec.COPY(Rec);

      IF NOT CONFIRM(Text012, FALSE, ExitOrderRec.TABLECAPTION) THEN
      //ENU=Do you want to transfer the %1 partly?;NLD=Wilt u de %1 gedeeltelijk overzetten?
        EXIT('');
      EXIT(PartlyMoveExitorderToNewOrder(SelectedExitLine));
    END;

    LOCAL PROCEDURE PartlyMoveExitorderToNewOrder@1100529001(VAR SelectedExitLine@1100529000 : Record 11012560) NewOrderNo : Code[20];
    VAR
      SelectedOrderLine@1100529001 : Record 11012560;
      SelectedCostLine@1100529006 : Record 11012561;
      OrderLine@1100529002 : Record 11012560;
      CostLine2@1100529003 : Record 11012561;
      ExitOrderCostList@1100529009 : Page 11125928;
      SkipCostLines@1100529010 : Boolean;
      NextOrderLineNo@1100529007 : Integer;
      NextCostLineNo@1100529004 : Integer;
    BEGIN
      //*DP00183
      WITH ExitOrderRec DO BEGIN
        TESTFIELD("No.");
        TESTFIELD(Posted, FALSE);
        CheckRelationSalesRentalOrder("No.");

        SelectedOrderLine.COPY(SelectedExitLine);

        SelectedOrderLine.FILTERGROUP(6);
        SelectedOrderLine.SETRANGE("Exit-order No.", "No.");
        SelectedOrderLine.SETRANGE(Type, SelectedOrderLine.Type::Plant);
        IF SelectedOrderLine.ISEMPTY THEN
          ERROR(Text010a, OrderLine.TABLECAPTION);
        OrderLine.RESET;
        OrderLine.SETRANGE("Exit-order No.", "No.");
        OrderLine.SETRANGE(Type, OrderLine.Type::Plant);
        IF SelectedExitLine.COUNT >= OrderLine.COUNT THEN
          ERROR(Text011, OrderLine.TABLECAPTION);
        SelectedOrderLine.SETRANGE(Type);  //* Reset filter on Type

        CostLine2.RESET;
        CostLine2.FILTERGROUP(2);
        CostLine2.SETRANGE("Exit-order No.", "No.");
        CostLine2.FILTERGROUP(0);
        IF NOT CostLine2.ISEMPTY THEN BEGIN
          ExitOrderCostList.SETTABLEVIEW(CostLine2);
          ExitOrderCostList.EDITABLE(FALSE);
          ExitOrderCostList.LOOKUPMODE(TRUE);
          IF ExitOrderCostList.RUNMODAL=ACTION::LookupOK THEN  //Only if OK, because default 1 line is already selected in page
            ExitOrderCostList.GetSelectedExitCostLineFilters(SelectedCostLine)
          ELSE
            SkipCostLines := TRUE;

        END;
        SelectedCostLine.FILTERGROUP(6);
        SelectedCostLine.SETRANGE("Exit-order No.", "No.");

        NewOrderNo := InsertNewOrderHead(ExitOrderRec);
        NextOrderLineNo := 10000;
        NextCostLineNo := 10000;

        SelectedOrderLine.FINDSET(TRUE, FALSE);
        REPEAT
          InsertNewOrderLine(SelectedOrderLine, NewOrderNo, NextOrderLineNo);
          NextOrderLineNo := NextOrderLineNo + 10000;
          SelectedOrderLine.DELETE(TRUE);
        UNTIL SelectedOrderLine.NEXT = 0;
        IF NOT SkipCostLines THEN BEGIN
          IF SelectedCostLine.FINDSET(TRUE, FALSE) THEN BEGIN
            CostLine2.RESET;
            REPEAT
              CostLine2 := SelectedCostLine;
              CostLine2."Exit-order No." := NewOrderNo;
              CostLine2."Line No." := NextCostLineNo;
              CostLine2.INSERT(FALSE);
              NextCostLineNo := NextCostLineNo + 10000;
              SelectedCostLine.DELETE(TRUE);
            UNTIL SelectedCostLine.NEXT = 0;
          END;
        END;
      END;
      EXIT(NewOrderNo);
    END;

    LOCAL PROCEDURE CheckRelationSalesRentalOrder@1100529003(ExitOrderNo@1100529000 : Code[20]);
    VAR
      SalesPlantRel@1100529001 : Record 11012787;
    BEGIN
      //*DP00183
      SalesPlantRel.SETCURRENTKEY(Level,"Plant Document No.");
      SalesPlantRel.SETRANGE(Level, SalesPlantRel.Level::ExitOrder);
      SalesPlantRel.SETRANGE("Plant Document No.", ExitOrderNo);
      IF NOT SalesPlantRel.ISEMPTY THEN
        ERROR(Text013);
    END;

    LOCAL PROCEDURE InsertNewOrderHead@1100485006(ExitOrder@1100529001 : Record 11012559) : Code[20];
    VAR
      NewOrderHead@1100529000 : Record 11012559;
      PlantCommentLine@1100529002 : Record 11072666;
    BEGIN
      //*DP00183
      NewOrderHead."No." := DetermineBackorderNo(ExitOrder."No.");
      NewOrderHead.TESTFIELD("No.");
      NewOrderHead.TRANSFERFIELDS(ExitOrder, FALSE);
      NewOrderHead."No. Printed" := 0;
      NewOrderHead."Created by" := USERID;
      NewOrderHead."Created on" := CURRENTDATETIME;
      NewOrderHead.INSERT(FALSE);

      ExitOrder.MoveDocumentLinks(ExitOrder, NewOrderHead, TRUE);
      //ExitOrder.MoveCommentLines(ExitOrder, NewOrderHead, TRUE);  //C005461.o
      PlantCommentLine.CopyComments(
        DATABASE::"Exit Order", ExitOrder."No.", '', 0,
        DATABASE::"Exit Order", NewOrderHead."No.", '', 0);  //C005461.n

      EXIT(NewOrderHead."No.");
    END;

    LOCAL PROCEDURE InsertNewOrderLine@1100529002(ExitOrderLine@1100529000 : Record 11012560;NewOrderNo@1100529002 : Code[20];NextLineNo@1100529003 : Integer);
    VAR
      NewOrderLine@1100529001 : Record 11012560;
      ExitOrderBulkPlant@1100529004 : Record 11012592;
      ExitOrderBulkPlant2@1100529006 : Record 11012592;
      PlantCommentLine@1100529005 : Record 11072666;
    BEGIN
      //*DP00183
      NewOrderLine."Exit-order No." := NewOrderNo;
      NewOrderLine.TRANSFERFIELDS(ExitOrderLine, FALSE);
      NewOrderLine."Line No." := NextLineNo;
      NewOrderLine.INSERT(FALSE);

      ExitOrderBulkPlant.SETRANGE("Exit-order No.", ExitOrderLine."Exit-order No.");
      ExitOrderBulkPlant.SETRANGE("Exit-order Line No.", ExitOrderLine."Line No.");
      IF ExitOrderBulkPlant.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          ExitOrderBulkPlant2."Exit-order No." := NewOrderLine."Exit-order No.";
          ExitOrderBulkPlant2."Exit-order Line No." := NewOrderLine."Line No.";
          ExitOrderBulkPlant2."Line No." := ExitOrderBulkPlant."Line No.";
          ExitOrderBulkPlant2.TRANSFERFIELDS(ExitOrderBulkPlant, FALSE);
          ExitOrderBulkPlant2.INSERT;
          ExitOrderBulkPlant.DELETE;
        UNTIL ExitOrderBulkPlant.NEXT = 0;
      END;

      ExitOrderLine.ChangeLinkWithPlantOrderLine(ExitOrderLine, NewOrderLine);
      ExitOrderLine.MoveDocumentLinks(ExitOrderLine, NewOrderLine, FALSE);
      //ExitOrderLine.MoveCommentLines(ExitOrderLine, NewOrderLine, FALSE);  //C005461.o
      PlantCommentLine.MoveComments(
        DATABASE::"Exit Order Line", ExitOrderLine."Exit-order No.", '', ExitOrderLine."Line No.",
        DATABASE::"Exit Order Line", NewOrderLine."Exit-order No.", '', NewOrderLine."Line No.");  //C005461.n
    END;

    PROCEDURE DetermineBackorderNo@1100529004(ExitOrderNo@1100529000 : Code[20]) : Code[20];
    VAR
      ExitOrder@1100529002 : Record 11012559;
      Pos@1100529001 : Integer;
    BEGIN
      //*DP00183
      Pos := STRPOS(ExitOrderNo, GetBackorderSign());
      IF Pos = 0 THEN
        ExitOrder.SETFILTER("No.", '%1', (ExitOrderNo + GetBackorderSign() + '*'))
      ELSE
        ExitOrder.SETFILTER("No.", '%1', (COPYSTR(ExitOrderNo, 1, Pos) + '*'));

      IF ExitOrder.FINDLAST THEN
        EXIT(INCSTR(ExitOrder."No."))
      ELSE
        EXIT(ExitOrderNo + GetBackorderSign() + '01');
    END;

    PROCEDURE GetBackorderSign@1100485009() : Text[1];
    BEGIN
      //*DP00183
      EXIT('-');
    END;

    BEGIN
    END.
  }
}

