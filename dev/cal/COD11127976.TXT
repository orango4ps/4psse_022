OBJECT Codeunit 11127976 Symbrio Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PSSE;
  }
  PROPERTIES
  {
    Permissions=TableData 25=rm,
                TableData 122=rm,
                TableData 123=rm,
                TableData 124=rm,
                TableData 125=rm;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      DimVal@1100285300 : Record 349;
      PurchHeader@1100285301 : Record 38;
      PurchLine@1100285302 : Record 39;
      PurchRcptHeader@1100285303 : Record 120;
      SymbrioSetup@1100285304 : Record 11127975;
      SymPurchHeader@1100285305 : Record 11127978;
      SymPurchInvAccLine@1100285306 : Record 11127982;
      SymPurchInvAccRef@1100285307 : Record 11127983;
      SymPurchInvHeader@1100285308 : Record 11127980;
      SymPurchInvLine@1100285309 : Record 11127981;
      SymPurchLine@1100285310 : Record 11127979;
      tempDimSetEntry@1100285311 : TEMPORARY Record 480;
      cuGenJnlPost@1100285312 : Codeunit 231;
      DimMgnt@1100285313 : Codeunit 408;
      FileManagement@1100285314 : Codeunit 419;
      Sequence@1100285315 : Code[20];
      ContentSize@1100285316 : Decimal;
      xmlNode@1100285317 : ' ,Element,Attribute,Text,CData,Entity Reference,Entity,Processing Instruction,Comment,Document,Document Type,Document Fragment,Notation';
      f@1100285318 : File;
      TAB@1100285319 : Char;
      CR@1100285320 : Char;
      LF@1100285321 : Char;
      SEP@1100285322 : Text[1];
      IH8NAV@1100285323 : Text[250];
      textLine@1100285324 : Text[250];
      PostLines@1100285325 : Boolean;
      GotSymbrioSetup@1100285326 : Boolean;
      OrderExitstsErr@1100285327 : TextConst 'ENU=OrderID %1 exists already in DB;NOR=OrdreID %1 finnes allerede i DB';
      Text001@1100285328 : TextConst 'ENU=Order: %1 doesn''t exist;NOR=Ordre: %1 finnes ikke;SVE=Order: %1 finns inte';
      Text002@1100285329 : TextConst 'ENU=There are no lines for %1;NOR=Det finnes ingen rader til %1;SVE=Det finns inga rader till %1';
      Text003@1100285330 : TextConst 'ENU=Order: %1 has reciepts;NOR=Ordre: %1 inneholder inng†ende leveringer;SVE=Order: %1 inneh†ller inleveranser';
      Text004@1100285331 : TextConst 'ENU=Order: %1 already exists;NOR=Ordre: %1 finnes allerede;SVE=Order: %1 finns redan';
      Text005@1100285332 : TextConst 'ENU=Order: %1 has reciepts on order line: %2;NOR=Ordre: %1 inneholder inng†ende leveringer p† rad: %2;SVE=Order: %1 inneh†ller inleveranser p† rad: %2';
      Text006@1100285333 : TextConst 'ENU=Project/Service Order: %1 doesn''t exist;NOR=Prosjekt/Servisorder: %1 finnes ikke;SVE=Projekt/Serviceorder: %1 finns inte';
      Text007@1100285334 : TextConst 'ENU=Project must be of project status %1, %2 or %3;NOR=Prosjektet m† ha prosjektstatus %1,%2 eller %3;SVE=Projektet m†ste ha projektstatus %1, %2 eller %3';
      Text008@1100285335 : TextConst 'ENU=Vendor (Local Management): %1 doesn''t exist;NOR=Leverand›r (lokal ledelse): %1 finnes ikke;SVE=Leverant”r (lokal hantering): %1 finns inte';
      Text009@1100285336 : TextConst 'ENU=No item relation found for item: %1;NOR=Kobling mangler for artikkel: %1;SVE=Koppling saknas f”r artikel: %1';
      Text010@1100285010 : TextConst 'ENU=Vendor (%1) not found in table ETIM Vendor (Local Mgt) or no item relation found for item: %2;NOR=Leverand›r (%1) ikke funnet i tabell ETIM Vendor (Local Mgt);SVE=Leverant”r (%1) ej hittad i tabell ETIM Vendor (Local Mgt)';
      Text011@1100285011 : TextConst 'ENU=Unvalid Extension Contract No (StatGroupNo): %1;NOR=Ugyldig ETAnr. (StatGroupNo): %1;SVE=Ogiltlig ŽTA kod (StatGroupNo): %1';
      Text012@1100285339 : TextConst 'ENU=Invoice already exists with lines, ext. doc ID %1;NOR=Faktura finnes allerede med linjer, ekst. Dok ID %1;SVE=Fakturan finns redan med rader, ext. dokument ID %1';
      Text013@1100285340 : TextConst 'ENU=Posted Invoice not found %1;NOR=Bokf›rt faktura ikke funnet %1;SVE=Bokf”rd faktura ej funnen %1';
      Text013a@1100285341 : TextConst 'ENU=Invoice was created but could not be posted: %1;NOR=Faktura skapat men ikke bokf›rt: %1;SVE=Fakturan skapades men kunde inte bokf”ras: %1';
      Text014@1100285342 : TextConst 'ENU=Line not found, Inovice: %1, Line: %2;NOR=Rad ikke funnet, Faktura: %1, Rad: %2;SVE=Rad ej hittad, Faktura: %1, Rad: %2';
      Text015@1100285015 : TextConst 'ENU=Credit Memo already exists, ext. doc ID %1;NOR=Kreditnota finnes allerede, ekst. Dok ID %1;SVE=Kreditfakturan finns redan, ext. dokument ID %1';
      Text016@1100285344 : TextConst 'ENU=Posted Credit Memo not found %1;NOR=Bokf›rt kreditnota ikke funnet %1;SVE=Bokf”rd kreditfaktura ej funnen %1';
      Text017@1100285345 : TextConst 'ENU=Symbrio setup is missing;NOR=Instillinger for Symbrio mangler;SVE=Inst„llningar f”r Symbrio saknas';
      Text018@1100285346 : TextConst 'ENU=General Ledger Setup is missing;NOR=Instillinger for hovedbok mangler;SVE=Redovisningsinst„llningar saknas';
      Text019@1100285347 : TextConst 'ENU=Line is already applied to the following Symbrio Line ID: %1. Would you like to replace till link?;SVE=Koppling finns redan p† f”ljande Symbriorad: %1. Vill du ers„tta kopplingen?';
      Text020@1100285348 : TextConst 'ENU=Service order must be of status %1, %2 or %3;NOR=Serviceordre m† ha status %1,%2 eller %3;SVE=Serviceordern m†ste ha status %1, %2 eller %3';
      Text021@1100285349 : TextConst 'ENU=Item code %1 not found in %2.;NOR=Artikkelkode %1 finns ikke i %2.;SVE=Artikelkod %1 finns inte i %2.';
      Text022@1100285350 : TextConst 'ENU=GTIN code %1 not found for source type %2  in %3.;NOR=GTIN-kode %1 finnes ikke for kildetype %2 i %3.;SVE=GTIN-kod %1 saknas f”r ursprungstyp %2 i %3.';
      Text023@1101285000 : TextConst 'ENU=Payment information is not correct;NOR=Betalingsinformasjon er ikke riktig;SVE=Betalningsinformation st„mmer ej';
      Text11012002@1100285351 : TextConst 'ENU=%1 ''%2'' does not exist;NOR=%1 ''%2'' finnes ikke;SVE=%1 ''%2'' finns inte.';
      Text11128000@1100285352 : TextConst 'ENU=Note from Vendor;NOR=Melding fra leverand›r;SVE=Leverant”rens notering';
      GotGLSetup@1100285101 : Boolean;
      GLSetup@1100285102 : Record 98;

    PROCEDURE ProcessAllOrders@1100285005();
    VAR
      SymbrioPurchaseHeader@1100285000 : Record 11127978;
    BEGIN
      SymbrioPurchaseHeader.SETCURRENTKEY(OrderOutType);
      SymbrioPurchaseHeader.SETFILTER(OrderOutType,'1');
      IF SymbrioPurchaseHeader.FINDSET THEN REPEAT
        ProcessOrder(SymbrioPurchaseHeader);
      UNTIL SymbrioPurchaseHeader.NEXT = 0;

      SymbrioPurchaseHeader.SETFILTER(OrderOutType,'<>1');

      // Process all orders in the incoming table
      IF SymbrioPurchaseHeader.FINDSET THEN REPEAT
        ProcessOrder(SymbrioPurchaseHeader);
      UNTIL SymbrioPurchaseHeader.NEXT = 0;
    END;

    PROCEDURE ProcessOrder@1100285000(VAR SymbrioPurchaseHeader@1100285000 : Record 11127978);
    BEGIN
      IF SymbrioPurchaseHeader.OrderType = '5' THEN BEGIN
        SymbrioPurchaseHeader.DELETE(TRUE);
        EXIT;
      END;

      // Processing of one order
      CASE SymbrioPurchaseHeader.OrderOutType OF

        '1': CreateOrder(SymbrioPurchaseHeader);
        '2': HandleOrderConfirmation(SymbrioPurchaseHeader);
        '3': HandleOrderConfirmation(SymbrioPurchaseHeader);
        '4': CancelOrder(SymbrioPurchaseHeader);

      END;
    END;

    PROCEDURE ProcessInvoice@1100285008(VAR SymbrioPurchaseInvHeader@1100285000 : Record 11127980);
    VAR
      TotalSumCreditCheck@1100285500 : Decimal;
    BEGIN

      ////////////////////////////// Processing of one Invoice////////////////////////////////

      // Takes into account Debit invoices with NEGATIVE totals ---> Credit Memo

      IF PurchHeader.GET(PurchHeader."Purchase Order Type"::"Return Order", SymbrioPurchaseInvHeader.OrderHeadID) THEN BEGIN
        SymbrioPurchaseInvHeader.InvoiceType := '';
      END ELSE BEGIN
        EVALUATE(TotalSumCreditCheck, SymbrioPurchaseInvHeader.TotalSum);
        IF (TotalSumCreditCheck < 0) AND (SymbrioPurchaseInvHeader.InvoiceType <> 'Credit') THEN BEGIN
           SymbrioPurchaseInvHeader.InvoiceType := 'Credit';
           SymbrioPurchaseInvHeader.MODIFY();
        END;
      END;
      GetSymbrioSetup;  //191028

      //RFC1255, moved code to own function
      //>>adjust SymbrioPurchaseLine.Quantity based on prices
      adjustSymPurchLineQty(SymbrioPurchaseInvHeader);

      IF SymbrioPurchaseInvHeader.InvoiceType='Credit' THEN BEGIN
      //>> 140210 SYM991 ITERO.SB Handle status of Credit memos
        CASE SymbrioPurchaseInvHeader.InvoiceStatus OF
        'SubmittedAwaitingReceipt': NewCreditMemo(SymbrioPurchaseInvHeader);
        'AuthorizedAwaitingReceipt': CreditMemoApproval(SymbrioPurchaseInvHeader);
        'DiscardedAwaitingReceipt': DiscardedInvoice(SymbrioPurchaseInvHeader);
        END;
      //<<
      END ELSE BEGIN
        CASE SymbrioPurchaseInvHeader.InvoiceStatus OF

          'SubmittedAwaitingReceipt': NewInvoice(SymbrioPurchaseInvHeader);
          'AuthorizedAwaitingReceipt': InvoiceApproval(SymbrioPurchaseInvHeader);
          'DiscardedAwaitingReceipt': DiscardedInvoice(SymbrioPurchaseInvHeader);

        END;
      END;
    END;

    PROCEDURE ExportVendorLedgerEntries@1000000011();
    VAR
      DOM@1000000012 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F5078F32-C551-11D3-89B9-0000F81FE221}:'Microsoft XML, v3.0'.DOMDocument30";
      ProcInstr@1000000011 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF89-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMProcessingInstruction";
      Node@1000000007 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      Element@1000000006 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMElement";
      CompInfo@1100285300 : Record 79;
      _vendLedgEntry@1000000000 : Record 25;
      _f@1000000001 : File;
      _filename@1100409000 : Text[250];
    BEGIN
      //>> SYM965
      IF NOT GetSymbrioSetup THEN
        EXIT;
      SymbrioSetup.TESTFIELD(SymbrioSetup."Path Invoice data");
      CompInfo.GET;

      _vendLedgEntry.RESET;
      _vendLedgEntry.LOCKTABLE;
      _vendLedgEntry.SETCURRENTKEY(Open);
      _vendLedgEntry.SETRANGE(Open,FALSE);
      _vendLedgEntry.SETRANGE("Symbrio Export Date",0D);
      _vendLedgEntry.SETRANGE("Document Type",_vendLedgEntry."Document Type"::Invoice,_vendLedgEntry."Document Type"::"Credit Memo");
      IF _vendLedgEntry.FINDSET THEN BEGIN

        REPEAT
        //>>130925 ITERO.DJ
          CLEAR(DOM);
          CREATE(DOM,FALSE,TRUE);

          ProcInstr := DOM.createProcessingInstruction('xml','version="1.0" encoding="utf-16" standalone="yes"');
          DOM.appendChild(ProcInstr);
          //Element := DOM.createElement('InvoiceReceiptInterchange');
          Element := DOM.createElement('SymbrioInvoiceReceipt');
          Node := DOM.appendChild(Element);

          Element := DOM.createElement('Routing');
          Node := Node.appendChild(Element);
          //Element.setAttribute('DocumentName','InvoiceReceiptInterchange');
          Element.setAttribute('DocumentName','SymbrioInvoiceReceipt');
          Element.setAttribute('SourceValue',SymbrioSetup.SourceValue);
          Element.setAttribute('SourceType',SymbrioSetup.SourceType);
          Element.setAttribute('DestinationValue',SymbrioSetup.DestinationValue);
          Element.setAttribute('DestinationType',SymbrioSetup.DestinationType);
          Node := Node.parentNode;
          //<<ITERO.DJ
          Element := DOM.createElement('InvoiceReceipt');
          Node := Node.appendChild(Element);

          ElementData(Node,'PurchaserCompanyCode',CompInfo."Registration No.");          // 130906
          ElementData(Node,'SupplierIdentification',_vendLedgEntry."Vendor No.");        // 130908
          ElementData(Node,'InvoiceNo',_vendLedgEntry."External Document No.");         // 130906
          ElementData(Node,'VerificationNo',_vendLedgEntry."Document No.");
          ElementData(Node,'ReceiptType','1');
          ElementData(Node,'BookingType','4');
          //ElementData(Node,'Message','');
          ElementData(Node,'ProcessedDate',FORMAT(CURRENTDATETIME,0,9));
          ElementData(Node,'VerificationDate',''); //FORMAT(_vendLedgEntry."Document Date",0,9));
          ElementData(Node,'PayDate',''); //FORMAT(_vendLedgEntry."Closed at Date",0,9));
          ElementData(Node,'AccountingDate',''); //FORMAT(_vendLedgEntry."Posting Date",0,9));
          ElementData(Node,'ExchangeRate','1');
          Node := Node.parentNode;
          //>>130925 ITERO.DJ
          _filename := SymbrioSetup."Path Invoice data" + 'INV_PAY'+ _vendLedgEntry."Document No." +
           FORMAT(WORKDATE,0,'<year4><month,2><day,2>')      // 130909
            +FORMAT(TIME,0,'<hours24><filler character,0><minutes,2><seconds,2>') +'.xml';
          DOM.save(_filename);
          //<<ITERO.DJ
        UNTIL _vendLedgEntry.NEXT = 0;

        _vendLedgEntry.MODIFYALL("Symbrio Export Date",TODAY,TRUE);
        COMMIT;//171201
      END;
      //<<
    END;

    LOCAL PROCEDURE ElementData@1000000003(Node@1100285301 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";_name@1000000000 : Text[250];_data@1000000001 : Text[250]) : Text[250];
    VAR
      Element@1100285300 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMElement";
      DOM@1100285302 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F5078F32-C551-11D3-89B9-0000F81FE221}:'Microsoft XML, v3.0'.DOMDocument30";
    BEGIN
      Element := DOM.createElement(_name);
      Element.text(_data);
      Node.appendChild(Element);
    END;

    LOCAL PROCEDURE FileShortName@1000000001(_filename@1000000000 : Text[250]) : Text[250];
    VAR
      _int@1000000001 : Integer;
    BEGIN
      FOR _int := STRLEN(_filename) DOWNTO 1 DO
        IF _filename[_int] = '\' THEN
          EXIT(COPYSTR(_filename,_int +1));
      EXIT(_filename);
    END;

    LOCAL PROCEDURE SetSymPurchHeader@1000000019(_buffer@1000000000 : Record 11127978);
    BEGIN
      SymPurchHeader := _buffer;
      Sequence := 'SYMPORD';
    END;

    LOCAL PROCEDURE SetSymPurchInvHeader@1000000020(_buffer@1000000000 : Record 11127980);
    BEGIN
      SymPurchInvHeader := _buffer;
      Sequence := 'SYMPINV';
    END;

    LOCAL PROCEDURE "*** ITERO ***"@1100285009();
    BEGIN
    END;

    LOCAL PROCEDURE CancelOrder@1100285001(VAR SymbrioPurchaseHeader@1100285001 : Record 11127978);
    VAR
      PurchaseHeader@1100285000 : Record 38;
      PurchaseLine@1100285002 : Record 39;
    BEGIN
      IF NOT PurchaseHeader.GET(PurchaseHeader."Document Type"::Order, SymbrioPurchaseHeader.OrderHeadID) THEN
        ERROR(Text001, SymbrioPurchaseHeader.OrderHeadID);

      PurchRcptHeader.SETRANGE(PurchRcptHeader."Order No.", PurchaseHeader."No.");
      IF PurchRcptHeader.FINDFIRST THEN
        ERROR(Text003, PurchaseHeader."No.");

      PurchaseLine.SETRANGE("Document Type",PurchaseLine."Document Type"::Order);
      PurchaseLine.SETRANGE("Document No.", SymbrioPurchaseHeader.OrderHeadID);
      IF PurchaseLine.FINDSET THEN REPEAT
        //>>131021 SYM941
        PurchaseLine.DELETE(TRUE);
        //<<
      UNTIL PurchaseLine.NEXT=0;

      PurchaseHeader.DELETE(TRUE);

      SymbrioPurchaseHeader.DELETE(TRUE); // May not be deleted here but for now it is.
    END;

    LOCAL PROCEDURE CreateOrder@1100285002(VAR SymbrioPurchaseHeader@1100285001 : Record 11127978);
    VAR
      DateTime@1100285000 : DateTime;
      PurchaseHeader@1100285003 : Record 38;
      PurchaseLine@1100285002 : Record 39;
      SymbrioPurchaseLine@1100285004 : Record 11127979;
      Dim1Inserted@1100285500 : Boolean;
      MinNetPrice@1100285502 : Boolean;
      decVal@1100285501 : Decimal;
    BEGIN
      // Creating order, controlling type of order

      ///////////////////////////////////////////////////////////////
      // Create Purchase Header
      IF PurchaseHeader.GET(PurchaseHeader."Document Type"::Order,SymbrioPurchaseHeader.OrderHeadID) THEN
        ERROR(Text004, SymbrioPurchaseHeader.OrderHeadID);

      PurchaseHeader.INIT;
      MinNetPrice := FALSE;
      SymbrioPurchaseLine.SETRANGE(OrderHeadID, SymbrioPurchaseHeader.OrderHeadID);
      SymbrioPurchaseLine.SETRANGE("DateTime Received",SymbrioPurchaseHeader."DateTime Received");
      SymbrioPurchaseLine.SETRANGE("EntryNo Head in BatchRead",SymbrioPurchaseHeader."EntryNo in BatchRead");

      IF SymbrioPurchaseLine.FINDSET THEN REPEAT
        IF (NOT MinNetPrice) AND (EVALUATE(decVal,SymbrioPurchaseLine.NetPrice) ) THEN
          IF decVal < 0 THEN
            MinNetPrice := TRUE;
        UNTIL (MinNetPrice = TRUE) OR (SymbrioPurchaseLine.NEXT=0);
      IF (SymbrioPurchaseHeader.OrderType <> '5') OR NOT MinNetPrice THEN
        PurchaseHeader."Document Type" := PurchaseHeader."Document Type"::Order
        ELSE PurchaseHeader."Document Type" := PurchaseHeader."Document Type"::"Return Order";

      PurchaseHeader."No." := SymbrioPurchaseHeader.OrderHeadID;
      PurchaseHeader.INSERT(TRUE);

      PurchaseHeader.VALIDATE("Buy-from Vendor No.",SymbrioPurchaseHeader.SupplierIdentification);

      PurchaseHeader.VALIDATE("Order Date",SymText2Date(SymbrioPurchaseHeader.OrderCreatedDate));
      PurchaseHeader.VALIDATE("Expected Receipt Date",SymText2Date(SymbrioPurchaseHeader.EarliestDeliveryDate));

      PurchaseHeader.VALIDATE("Your Reference",COPYSTR(SymbrioPurchaseHeader.PurchaserReference,1,MAXSTRLEN(PurchaseHeader."Your Reference")));

      IF NOT GetGLSetup THEN
        ERROR(Text018);
      IF (SymbrioPurchaseHeader.Currency <> GLSetup."LCY Code") THEN
        PurchaseHeader.VALIDATE("Currency Code",SymbrioPurchaseHeader.Currency);

      //>>Handle problem with currency code from Vendor
      IF PurchaseHeader."Currency Code"<>SymbrioPurchaseHeader.Currency THEN
        PurchaseHeader.VALIDATE("Currency Code",GLSetup."LCY Code");

      PurchaseHeader."Export to Symbrio" := TRUE;   //SYM037
      PurchaseHeader."Export to Symbrio Type" := PurchaseHeader."Export to Symbrio Type"::Prelimary;

      PurchaseHeader.MODIFY(TRUE);

      SymbrioPurchaseLine.SETRANGE(OrderHeadID,SymbrioPurchaseHeader.OrderHeadID);
      SymbrioPurchaseLine.SETRANGE("DateTime Received",SymbrioPurchaseHeader."DateTime Received");
      SymbrioPurchaseLine.SETRANGE("EntryNo Head in BatchRead",SymbrioPurchaseHeader."EntryNo in BatchRead");

      Dim1Inserted := FALSE;
      IF SymbrioPurchaseLine.FINDSET THEN REPEAT
        IF (NOT Dim1Inserted) AND (SymbrioPurchaseLine.CostCenter <> '') THEN BEGIN
          PurchaseHeader.VALIDATE("Shortcut Dimension 1 Code",SymbrioPurchaseLine.CostCenter);
          PurchaseHeader.MODIFY;
          Dim1Inserted := TRUE;
        END;

        CASE SymbrioPurchaseLine.PurchaseType OF
              /////////////Create Project Order Lines /////////////
          '1': CreateProjOrderLine(SymbrioPurchaseHeader,SymbrioPurchaseLine, PurchaseHeader, PurchaseLine);

              /////////////Create Warehouse Order Lines /////////////
          '2': CreateWhsOrderLine(SymbrioPurchaseHeader,SymbrioPurchaseLine, PurchaseHeader, PurchaseLine);

              /////////////Create indirect purchase order lines /////////////
          '3': CreateIndirectPurchLine(SymbrioPurchaseHeader,SymbrioPurchaseLine, PurchaseHeader, PurchaseLine);
        END;
      UNTIL SymbrioPurchaseLine.NEXT = 0;

      SymbrioPurchaseHeader.DELETE(TRUE); // May not be deleted here but for now it is.
    END;

    LOCAL PROCEDURE HandleOrderConfirmation@1100285004(VAR SymbrioPurchaseHeader@1100285002 : Record 11127978);
    VAR
      PurchaseHeader@1100285001 : Record 38;
      PurchaseLine@1100285007 : Record 39;
      DateTime@1100285000 : DateTime;
      SymbrioPurchaseLine@1100285006 : Record 11127979;
      OrderLineDec@1100285008 : Decimal;
      QuantityFromSymbrio@1100285012 : Decimal;
      UnitPriceFromSymbrio@1100285011 : Decimal;
      DiscountFromSymbrio@1100285010 : Decimal;
      NetPriceFromSymbrio@1100285009 : Decimal;
      DeliveryDateFromSymbrio@1100285013 : Date;
      PurchRcptLine@1100285014 : Record 121;
      Job@1100285032 : Record 11072003;
      ServiceOrder@1000 : Record 11012823;
      TradeItem@1100285031 : Record 11012317;
      Location@1100285024 : Record 14;
      OldStringProjNo@1100285022 : Text[30];
      NewStringDim1@1100285021 : Text[30];
      LengthOfProjNo@1100285020 : Integer;
      NewStringDim2@1100285019 : Text[30];
      ProjectNo@1100285018 : Text[30];
      DeliveryDateFromSymbrioHeader@1100285003 : Date;
      DeliveryDateFromSymbrio2@1100285004 : Date;
      PurchaseLine2@1100285005 : Record 39;
      OrderLineDec2@1100285015 : Decimal;
      Dim2Symbrio@1100285016 : Code[20];
      Fieldno@1100285026 : Integer;
      PurchaseHeaderModify@1100285027 : Record 38;
      ExtensionContract@1100285028 : Record 11012004;
      ContractCode@1100285029 : Code[10];
      LenghtContractCode@1100285030 : Integer;
      StartPos@1100285033 : Integer;
      ContractCodeFound@1100285035 : Boolean;
      RemainingAcc@1100285500 : Code[20];
      PurchaseLine3@1100285501 : Record 39;
      OrderLineDec3@1100285503 : Decimal;
      PurchaseHeaderOrder@1100285505 : Record 38;
      ReleasePurchaseDocument@1100285504 : Codeunit 415;
      ItemRelation@1100285023 : Record 11012319;
      lvTradeItem@1100285502 : Record 11012317;
    BEGIN
      // ************************************************************************************************************************
      // Changed the check for Purchase Order to account for Order Type <> 1. There are scenarios (order Type <> 1) when
      // there are order confirmations coming without the first "CreateOrder" request. If so, Create the order instead
      // of handeling the file as a confirmation.
      // ************************************************************************************************************************
      IF NOT PurchaseHeader.GET(PurchaseHeader."Document Type"::Order, SymbrioPurchaseHeader.OrderHeadID) THEN BEGIN
        // The order is not found. Is this a scenario when the order confirmation in fact is the first file coming?
        IF (SymbrioPurchaseHeader.OrderType <> '1') THEN BEGIN
        //****************************************************************************************************************
           // The Order is in fact not a system order but can be e.g. a telephone order.
           // Handle it as a OrderOutType = 1, i.e. CreateOrder instead.
           CreateOrder(SymbrioPurchaseHeader);
           EXIT; // Important: Don't go further - just create the order and leave the HandleOrderConfirmation function.
        //****************************************************************************************************************
        END;
        // The confirmation file was in fact a System Order (OrderType 1), display the error of not finding the order.
        ERROR(Text001, SymbrioPurchaseHeader.OrderHeadID);
      END;
      // ************************************************************************************************************************

      SymbrioPurchaseLine.SETRANGE(OrderHeadID,SymbrioPurchaseHeader.OrderHeadID);
      SymbrioPurchaseLine.SETRANGE("DateTime Received",SymbrioPurchaseHeader."DateTime Received");
      SymbrioPurchaseLine.SETRANGE("EntryNo Head in BatchRead",SymbrioPurchaseHeader."EntryNo in BatchRead");

      IF SymbrioPurchaseLine.FINDSET THEN REPEAT

        ///////////////////////////////////Update Existing Line////////////////////////////// UPDATED 131015 SYM940
        //>>SYM047V3 ITERO.WG
        EVALUATE(OrderLineDec, SymbrioPurchaseLine.OrderLinePosition);
        IF PurchaseLine.GET(PurchaseLine."Document Type"::Order, SymbrioPurchaseLine.OrderHeadID, OrderLineDec * 10000) THEN BEGIN

          PurchaseLine."Imported Item No." := COPYSTR(SymbrioPurchaseLine.ArticleNo,1,MAXSTRLEN(PurchaseLine."Imported Item No.")); //171218 added copystr

          IF (SymbrioPurchaseLine.ConfirmationType IN ['1', '3', '4'])  THEN BEGIN
            IF PurchaseLine."Quantity Received" = 0 THEN BEGIN
              //////////////////////////////////// MODIFY PURCHASETYPE 1////////////////////////
              IF SymbrioPurchaseLine.PurchaseType = '1' THEN BEGIN

                IF Job.GET(SymbrioPurchaseLine.ProjectNo) THEN BEGIN
                  IF NOT (Job."Project Status" IN [Job."Project Status"::Preparation, Job."Project Status"::Production, Job."Project Status"::"Technical Finished"]) THEN
                    ERROR(Text007, Job."Project Status"::Preparation, Job."Project Status"::Production, Job."Project Status"::"Technical Finished");
                END ELSE BEGIN
                  IF ServiceOrder.GET(SymbrioPurchaseLine.ProjectNo) THEN BEGIN
                    IF NOT ( ServiceOrder.Status IN [ServiceOrder.Status::Open, ServiceOrder.Status::"In Process", ServiceOrder.Status::"Technical Finished"]) THEN
                      ERROR(Text020, ServiceOrder.Status::Open, ServiceOrder.Status::"In Process", ServiceOrder.Status::"Technical Finished");
                  END ELSE BEGIN
                    ERROR(Text006, SymbrioPurchaseLine.ProjectNo);
                  END;
                END;

                PurchaseLine.VALIDATE("Vendor (Trade Item)",'');
                PurchaseLine.VALIDATE("Trade Item",'');
                PurchaseLine.VALIDATE("Item No.",'');

                IF Job.GET(SymbrioPurchaseLine.ProjectNo) THEN
                   PurchaseLine.VALIDATE("Job No.", SymbrioPurchaseLine.ProjectNo);
                IF ServiceOrder.GET(SymbrioPurchaseLine.ProjectNo) THEN
                   PurchaseLine.VALIDATE("Service Order No.", SymbrioPurchaseLine.ProjectNo);

                PurchaseLine.VALIDATE(Description, COPYSTR(SymbrioPurchaseLine.ArticleName, 1, MAXSTRLEN(PurchaseLine.Description)));
                PurchaseLine.VALIDATE("Description 2", COPYSTR(SymbrioPurchaseLine.ArticleName, MAXSTRLEN(PurchaseLine.Description)+1, MAXSTRLEN(PurchaseLine."Description 2")));

                PurchaseLine.VALIDATE(PurchaseLine."Unit of Measure Code",SymbrioPurchaseLine.QuantityMeasurement);

                PurchaseLine.VALIDATE("Shortcut Dimension 2 Code",SymbrioPurchaseLine.CostObject);

                PurchaseLine.SetDontCheckItemPurchBlocked(TRUE);
                PurchaseLine.SuspendStatusCheck(TRUE);
                CASE FindTradeItemRelationOrder(SymbrioPurchaseHeader,SymbrioPurchaseLine,ItemRelation,TradeItem) OF
                  1: BEGIN
                        PurchaseLine.VALIDATE("Vendor (Trade Item)", TradeItem.Vendor);
                        PurchaseLine.VALIDATE(Description, TradeItem."Item Description");
                        PurchaseLine.VALIDATE("Description 2", TradeItem."Item Description 2");
                        PurchaseLine.VALIDATE("Trade Item", COPYSTR(SymbrioPurchaseLine.ArticleNo,1,MAXSTRLEN(PurchaseLine."Trade Item"))); //171218 added copystr;
                     END;
                  2: BEGIN
                        PurchaseLine.VALIDATE(Description  , ItemRelation."Description Navision-item");
                        PurchaseLine.VALIDATE("Trade Item" , ItemRelation."Trade Item");
                     END;
                END;
                PurchaseLine.SuspendStatusCheck(FALSE);
                PurchaseLine.SetDontCheckItemPurchBlocked(FALSE);

                ContractCode := SymbrioPurchaseLine.StatGroupNo;
                LenghtContractCode := STRLEN(ContractCode);
                StartPos := 1;
                ContractCodeFound := FALSE;

                IF SymbrioPurchaseLine.StatGroupNo <> '' THEN BEGIN
                  // Loop, cut/trim and check if ContractCode exists
                  REPEAT
                    ContractCode := COPYSTR(ContractCode, StartPos, LenghtContractCode-StartPos+1);
                    StartPos := StartPos + 1;

                    IF ExtensionContract.GET(SymbrioPurchaseLine.ProjectNo,ContractCode) THEN
                      ContractCodeFound := TRUE;

                  UNTIL ((ContractCodeFound) OR (StartPos > LenghtContractCode));

                  IF ContractCodeFound THEN
                    PurchaseLine.VALIDATE("Extension Contract",ContractCode)
                  ELSE
                    ERROR(Text011,SymbrioPurchaseLine.StatGroupNo);
                END ELSE BEGIN
                  // If blank then just validate
                  PurchaseLine.VALIDATE("Extension Contract",SymbrioPurchaseLine.StatGroupNo);
                END;

                PurchaseLine.VALIDATE(Element,SymbrioPurchaseLine.Element);

                //>> 170703 ITERO.SB RAD-069
                //PurchaseLine.VALIDATE("Shortcut Dimension 1 Code",Job."Global Dimension 1 Code");
                IF Job.GET(SymbrioPurchaseLine.ProjectNo) THEN
                  PurchaseLine.VALIDATE("Shortcut Dimension 1 Code",Job."Global Dimension 1 Code");
                IF ServiceOrder.GET(SymbrioPurchaseLine.ProjectNo) THEN
                  PurchaseLine.VALIDATE("Shortcut Dimension 1 Code",ServiceOrder."Global Dimension 1 Code");
                //<<

                GetSymbrioSetup;
                CreateIndirectDimcodePurchLine(PurchaseLine, SymbrioPurchaseLine.Element, SymbrioSetup."Project Dimcode Purchases");
              END ELSE IF SymbrioPurchaseLine.PurchaseType = '2' THEN BEGIN
              //////////////////////////////////// MODIFY PURCHASETYPE 2////////////////////////
                FindItemRelationOrder(SymbrioPurchaseHeader,SymbrioPurchaseLine,ItemRelation);

                PurchaseLine.VALIDATE(Type, PurchLine.Type::Item);
                PurchaseLine.VALIDATE("No.", ItemRelation."Navision Item");
                PurchaseLine.VALIDATE("Location Code",SymbrioPurchaseLine.ProjectNo);
                Location.GET(SymbrioPurchaseLine.ProjectNo);
                PurchaseLine.VALIDATE("Shortcut Dimension 1 Code", Location."Global Dimension 1 Code");
                EVALUATE(QuantityFromSymbrio, SymbrioPurchaseLine.Quantity);
                ItemRelation.CALCFIELDS("Description Navision-item");
                PurchaseLine.SuspendStatusCheck(TRUE);
                PurchaseLine.VALIDATE(Description, ItemRelation."Description Navision-item");
                PurchaseLine.SuspendStatusCheck(FALSE);

              END ELSE IF SymbrioPurchaseLine.PurchaseType = '3' THEN BEGIN
              //////////////////////////////////// MODIFY PURCHASETYPE 3////////////////////////

                PurchaseLine.VALIDATE("Vendor (Trade Item)",'');
                PurchaseLine.VALIDATE("Trade Item",'');
                PurchaseLine.VALIDATE("Item No.",'');

                PurchaseLine.VALIDATE(Type, PurchaseLine.Type::"G/L Account");
                PurchaseLine.VALIDATE("No.", SymbrioPurchaseLine.CostObject);

                PurchaseLine.SuspendStatusCheck(TRUE);
                PurchaseLine.VALIDATE(Description, COPYSTR(SymbrioPurchaseLine.ArticleName, 1, MAXSTRLEN(PurchaseLine.Description)));
                PurchaseLine.VALIDATE("Description 2", COPYSTR(SymbrioPurchaseLine.ArticleName, MAXSTRLEN(PurchaseLine.Description)+1, MAXSTRLEN(PurchaseLine."Description 2")));

                PurchaseLine.VALIDATE(PurchaseLine."Unit of Measure Code",SymbrioPurchaseLine.QuantityMeasurement);

                PurchaseLine.SetDontCheckItemPurchBlocked(TRUE);  // <-- SYM107+108
                CASE FindTradeItemRelationOrder(SymbrioPurchaseHeader,SymbrioPurchaseLine,ItemRelation,TradeItem) OF
                  1: BEGIN
                        PurchaseLine.VALIDATE("Vendor (Trade Item)", TradeItem.Vendor);
                        PurchaseLine.VALIDATE(Description, TradeItem."Item Description");
                        PurchaseLine.VALIDATE("Description 2", TradeItem."Item Description 2");
                        PurchaseLine.VALIDATE("Trade Item", COPYSTR(SymbrioPurchaseLine.ArticleNo,1,MAXSTRLEN(PurchaseLine."Trade Item"))); //171218 added copystr
                        PurchaseLine.VALIDATE(Type, PurchaseLine.Type::"G/L Account");
                        PurchaseLine.VALIDATE("No.", SymbrioPurchaseLine.CostObject);
                     END;
                  2: BEGIN
                        PurchaseLine.VALIDATE(Description  , ItemRelation."Description Navision-item");
                        PurchaseLine.VALIDATE("Trade Item" , ItemRelation."Trade Item");
                        PurchaseLine.VALIDATE(Type, PurchaseLine.Type::"G/L Account");
                        PurchaseLine.VALIDATE("No.", SymbrioPurchaseLine.CostObject);
                     END;
                END;
                PurchaseLine.SetDontCheckItemPurchBlocked(FALSE);  // <-- SYM107+108
                PurchaseLine.SuspendStatusCheck(FALSE);

      //>>191105
                AccountRefProjectToDims(SymbrioPurchaseLine.ProjectNo,NewStringDim1,Dim2Symbrio,Fieldno);
      //          NewStringDim1 := COPYSTR(SymbrioPurchaseLine.ProjectNo, 1, 4);
      //          ProjectNo := SymbrioPurchaseLine.ProjectNo;
      //          LengthOfProjNo := STRLEN(ProjectNo);
      //          NewStringDim2 := COPYSTR(ProjectNo, LengthOfProjNo -1, 2);
      //          EVALUATE(Dim2Symbrio,NewStringDim2);
      //          IF NOT GetSymbrioSetup THEN
      //            ERROR(Text017);
      //          Fieldno := GetDimensionIDCode(SymbrioSetup."Indirect Export Dim2");
      //<<191105

                PurchaseLine.VALIDATE("Shortcut Dimension 1 Code", NewStringDim1);
                PurchaseLine.ValidateShortcutDimCode(Fieldno,Dim2Symbrio);
                CreateIndirectDimcodePurchLine(PurchaseLine, SymbrioPurchaseLine.Element, SymbrioSetup."Indirect Dimcode Purchases");
              END;
              //////////////////////////////////// END MODIFY PURCHASETYPE 3////////////////////////


              //>> 131014 SYM940  UPDATED 131016: Took away validation of "Promised Receipt Date" (due an error message)
              IF PurchaseHeaderModify.GET(PurchaseHeader."Document Type"::Order, SymbrioPurchaseHeader.OrderHeadID) THEN BEGIN

                PurchaseHeaderModify."Promised Receipt Date" := SymText2Date(SymbrioPurchaseHeader.EarliestDeliveryDate);
                PurchaseHeaderModify."Document Confirmation Received" := TRUE;
                PurchaseHeaderModify.MODIFY(TRUE);
              END;

              PurchaseLine.VALIDATE("Promised Receipt Date", SymText2Date(SymbrioPurchaseLine.DeliveryDate));

              EVALUATE(QuantityFromSymbrio, SymbrioPurchaseLine.Quantity);

              IF SymbrioPurchaseLine.PurchaseType <> '2' THEN  //inventory orders
                PurchaseLine.VALIDATE(Quantity, QuantityFromSymbrio);

              EVALUATE(NetPriceFromSymbrio, SymbrioPurchaseLine.NetPrice);
              PurchaseLine.VALIDATE("Direct Unit Cost", NetPriceFromSymbrio);
              IF NOT EVALUATE(DiscountFromSymbrio, SymbrioPurchaseLine.Discount) THEN
                DiscountFromSymbrio:=0;
              PurchaseLine.VALIDATE("Discount % (Item)", DiscountFromSymbrio*100);

              PurchaseLine.MODIFY(TRUE);

            END;
          ///////////////////////////////////END Update Existing Line//////////////////////////////

          // Delete Line
          END ELSE IF SymbrioPurchaseLine.ConfirmationType = '2' THEN BEGIN
            EVALUATE(OrderLineDec, SymbrioPurchaseLine.OrderLinePosition);
            PurchaseLine.GET(PurchaseLine."Document Type"::Order, SymbrioPurchaseLine.OrderHeadID, OrderLineDec * 10000);

            PurchRcptLine.SETRANGE("Order No.", SymbrioPurchaseLine.OrderHeadID);
            PurchRcptLine.SETRANGE("Order Line No.", OrderLineDec * 10000);
            IF PurchRcptLine.FINDFIRST THEN
              ERROR(Text005, SymbrioPurchaseLine.OrderHeadID, OrderLineDec);

            //>>SYM047 ITERO.MH
            PurchaseLine.VALIDATE(Quantity, 0); //Set Quantity to 0 instead of deletion
            PurchaseLine.MODIFY(TRUE);
            //PurchaseLine.DELETE(TRUE);
            //<<SYM047 ITERO.MH

          END; //SYM047V3 ITERO.WG
        /////////////////////////////////////////////////////////////
        // Insert new line
        END ELSE IF  SymbrioPurchaseLine.ConfirmationType = '4' THEN BEGIN

          //>>SYM047V3 ITERO.WG
          EVALUATE(OrderLineDec3, SymbrioPurchaseLine.OrderLinePosition);
          IF NOT PurchaseLine3.GET(PurchaseLine."Document Type"::Order, SymbrioPurchaseLine.OrderHeadID, OrderLineDec3 * 10000) THEN BEGIN
            //<<SYM047V3 ITERO.WG

            ////////////////////////////////////
            CASE SymbrioPurchaseLine.PurchaseType OF
              '1' : BEGIN
                      //>>SYM073
                      PurchaseHeaderOrder.SETRANGE("Document Type",PurchaseHeaderOrder."Document Type"::Order);
                      PurchaseHeaderOrder.SETRANGE("No.",SymbrioPurchaseHeader.OrderHeadID);
                      IF PurchaseHeaderOrder.FINDSET THEN BEGIN
                      IF (PurchaseHeaderOrder.Status = PurchaseHeaderOrder.Status::Closed) THEN
                      ReleasePurchaseDocument.Reopen(PurchaseHeaderOrder);
                      END;
                      //<<SYM073
                      CreateProjOrderLine(SymbrioPurchaseHeader,SymbrioPurchaseLine, PurchaseHeader, PurchaseLine);
                    END ;
              '2' : CreateWhsOrderLine(SymbrioPurchaseHeader,SymbrioPurchaseLine, PurchaseHeader, PurchaseLine);

              '3' : CreateIndirectPurchLine(SymbrioPurchaseHeader,SymbrioPurchaseLine, PurchaseHeader, PurchaseLine);
            END;
            //>> SYM940
            EVALUATE(OrderLineDec2, SymbrioPurchaseLine.OrderLinePosition);
            PurchaseLine2.GET(PurchaseLine2."Document Type"::Order, SymbrioPurchaseLine.OrderHeadID, OrderLineDec2 * 10000);

            //>>SYM042
            //EVALUATE(DeliveryDateFromSymbrio2, SymbrioPurchaseLine.DeliveryDate);
            //PurchaseLine.VALIDATE("Promised Receipt Date", DeliveryDateFromSymbrio2);
            PurchaseLine.VALIDATE("Promised Receipt Date", SymText2Date(SymbrioPurchaseLine.DeliveryDate));
            //<<SYM042

            //RFC136
            PurchaseLine."Imported Item No." := COPYSTR(SymbrioPurchaseLine.ArticleNo,1,MAXSTRLEN(PurchaseLine."Imported Item No.")); //171218 added copystr

            PurchaseLine.MODIFY(TRUE);
            //<<
          END;
        END;

      UNTIL SymbrioPurchaseLine.NEXT = 0;

      SymbrioPurchaseHeader.DELETE(TRUE); // May not be deleted here but for now it is.
    END;

    LOCAL PROCEDURE GetDimensionIDCode@1100285508(DimCode@1100285500 : Code[20]) : Integer;
    VAR
      Fieldno@1100285501 : Integer;
    BEGIN
      IF NOT GetSymbrioSetup THEN
        ERROR(Text017);
      Fieldno:=0;
      IF NOT GetGLSetup THEN
        ERROR(Text018);

      IF DimCode<> '' THEN
        CASE DimCode OF
          GLSetup."Shortcut Dimension 1 Code": Fieldno:=1;
          GLSetup."Shortcut Dimension 2 Code": Fieldno:=2;
          GLSetup."Shortcut Dimension 3 Code": Fieldno:=3;
          GLSetup."Shortcut Dimension 4 Code": Fieldno:=4;
          GLSetup."Shortcut Dimension 5 Code": Fieldno:=5;
          GLSetup."Shortcut Dimension 6 Code": Fieldno:=6;
          GLSetup."Shortcut Dimension 7 Code": Fieldno:=7;
          GLSetup."Shortcut Dimension 8 Code": Fieldno:=8;
        END;
      EXIT(Fieldno);
    END;

    LOCAL PROCEDURE CreateProjOrderLine@1100285010(VAR SymbrioPurchaseHeader@1100285006 : Record 11127978;VAR SymbrioPurchaseLine@1100285000 : Record 11127979;VAR PurchaseHeader@1100285002 : Record 38;VAR PurchaseLine@1100285001 : Record 39);
    VAR
      Job@1100285004 : Record 11072003;
      TradeItem@1100285005 : Record 11012317;
      ETIMVendorLocalMgt@1100285009 : Record 11012313;
      Location@1100285008 : Record 14;
      ItemRelation@1100285007 : Record 11012319;
      OrderLineDec@1100285003 : Decimal;
      QuantityFromSymbrio@1100285010 : Decimal;
      DeliveryDateFromSymbrio@1100285011 : Date;
      UnitPriceFromSymbrio@1100285012 : Decimal;
      NetPriceFromSymbrio@1100285013 : Decimal;
      DiscountFromSymbrio@1100285014 : Decimal;
      ExtensionContract@1100285019 : Record 11012004;
      ContractCode@1100285018 : Code[10];
      LenghtContractCode@1100285017 : Integer;
      StartPos@1100285016 : Integer;
      ContractCodeFound@1100285015 : Boolean;
      lvTradeItem@1100285500 : Record 11012317;
      ServiceOrder@1101285000 : Record 11012823;
    BEGIN
      /////////////////////////////////////////////////
      // Creates ONE project order line
      PurchaseLine.INIT;
      PurchaseLine.VALIDATE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.VALIDATE("Document No.",PurchaseHeader."No.");
      EVALUATE(OrderLineDec, SymbrioPurchaseLine.OrderLinePosition);
      PurchaseLine.VALIDATE("Line No.", OrderLineDec * 10000);
      // 150818 ITERO.MH Added Service Order too
      IF (NOT Job.GET(SymbrioPurchaseLine.ProjectNo)) AND (NOT ServiceOrder.GET(SymbrioPurchaseLine.ProjectNo)) THEN
        ERROR(Text006, SymbrioPurchaseLine.ProjectNo);

      //>>SYM058 ITERO.WG
      //IF NOT ((Job."Project Status" = Job."Project Status"::Preparation) OR (Job."Project Status" = Job."Project Status"::Production)) THEN
      //  ERROR(Text007, Job."Project Status"::Preparation, Job."Project Status"::Production);
      // 150818 ITERO.MH Added checkf or project (to use for service order)
      IF (Job.GET(SymbrioPurchaseLine.ProjectNo)) THEN
         IF NOT (Job."Project Status" IN [Job."Project Status"::Preparation, Job."Project Status"::Production, Job."Project Status"::"Technical Finished"]) THEN
           ERROR(Text007, Job."Project Status"::Preparation, Job."Project Status"::Production, Job."Project Status"::"Technical Finished");
      //<<SYM058 ITERO.WG

      PurchaseLine.INSERT(TRUE);
      // 150818 ITERO.MH Validate Job only if job exist
      IF Job.GET(SymbrioPurchaseLine.ProjectNo) THEN
         PurchaseLine.VALIDATE("Job No.", SymbrioPurchaseLine.ProjectNo);
      // 150818 ITERO.MH Added Service Order too
      IF ServiceOrder.GET(SymbrioPurchaseLine.ProjectNo) THEN
         PurchaseLine.VALIDATE("Service Order No.", SymbrioPurchaseLine.ProjectNo);
      //PurchaseLine.VALIDATE("Job No.", SymbrioPurchaseLine.ProjectNo);

      PurchaseLine.SuspendStatusCheck(TRUE);

      //>>140317 SYM015
      PurchaseLine.VALIDATE(Description, COPYSTR(SymbrioPurchaseLine.ArticleName, 1, MAXSTRLEN(PurchaseLine.Description)));
      PurchaseLine.VALIDATE("Description 2", COPYSTR(SymbrioPurchaseLine.ArticleName, MAXSTRLEN(PurchaseLine.Description)+1, MAXSTRLEN(PurchaseLine."Description 2")));
      //>>SYM932
      //PurchaseLine.VALIDATE(Description, SymbrioPurchaseLine.ArticleName);
      //<<140317 SYM015

      //>> SYM931
      PurchaseLine.VALIDATE(PurchaseLine."Unit of Measure Code",SymbrioPurchaseLine.QuantityMeasurement);
      //<<
      //>> 131113 Changed validation order
      PurchaseLine.VALIDATE("Shortcut Dimension 2 Code",SymbrioPurchaseLine.CostObject);

      PurchaseLine.SetDontCheckItemPurchBlocked(TRUE);  // <-- SYM107+108
      CASE FindTradeItemRelationOrder(SymbrioPurchaseHeader,SymbrioPurchaseLine,ItemRelation,TradeItem) OF
        1: BEGIN
              PurchaseLine.VALIDATE("Vendor (Trade Item)", TradeItem.Vendor);
              PurchaseLine.VALIDATE(Description, TradeItem."Item Description");
              PurchaseLine.VALIDATE("Description 2", TradeItem."Item Description 2");
              PurchaseLine.VALIDATE("Trade Item", COPYSTR(SymbrioPurchaseLine.ArticleNo,1,MAXSTRLEN(PurchaseLine."Trade Item"))); //171218 added copystr
           END;
        2: BEGIN
              PurchaseLine.VALIDATE(Description  , ItemRelation."Description Navision-item");
              PurchaseLine.VALIDATE("Trade Item" , ItemRelation."Trade Item");
              PurchaseLine.VALIDATE("Vendor (Trade Item)", TradeItem.Vendor);
           END;
      END;
      PurchaseLine.SetDontCheckItemPurchBlocked(FALSE);  // <-- SYM107+108
      PurchaseLine.SuspendStatusCheck(FALSE);


      //>> ITERO.SB SYM920
      ContractCode := SymbrioPurchaseLine.StatGroupNo;
      LenghtContractCode := STRLEN(ContractCode);
      StartPos := 1;
      ContractCodeFound := FALSE;

      IF SymbrioPurchaseLine.StatGroupNo <> '' THEN BEGIN
      // Loop, cut/trim and check if ContractCode exists
      REPEAT
        ContractCode := COPYSTR(ContractCode, StartPos, LenghtContractCode-StartPos+1);
        StartPos := StartPos + 1;
        IF ExtensionContract.GET(SymbrioPurchaseLine.ProjectNo,ContractCode) THEN
          ContractCodeFound := TRUE;
      UNTIL ((ContractCodeFound) OR (StartPos > LenghtContractCode));

      IF ContractCodeFound THEN
        PurchaseLine.VALIDATE("Extension Contract",ContractCode)
      ELSE
        ERROR(Text011,SymbrioPurchaseLine.StatGroupNo);
      END ELSE BEGIN
        // If blank then just validate
        PurchaseLine.VALIDATE("Extension Contract",SymbrioPurchaseLine.StatGroupNo);
      END;
      //<<

      //>> SYM937, SYM936

      PurchaseLine.VALIDATE(Element,SymbrioPurchaseLine.Element);
      //<<

      //>> 170703 ITERO.SB RAD-069
      //PurchaseLine.VALIDATE("Shortcut Dimension 1 Code",Job."Global Dimension 1 Code");
      IF Job.GET(SymbrioPurchaseLine.ProjectNo) THEN
        PurchaseLine.VALIDATE("Shortcut Dimension 1 Code",Job."Global Dimension 1 Code");
      IF ServiceOrder.GET(SymbrioPurchaseLine.ProjectNo) THEN
        PurchaseLine.VALIDATE("Shortcut Dimension 1 Code",ServiceOrder."Global Dimension 1 Code");
      //<<
      EVALUATE(QuantityFromSymbrio, SymbrioPurchaseLine.Quantity);
      PurchaseLine.VALIDATE(Quantity, QuantityFromSymbrio);

      PurchaseLine.VALIDATE("Expected Receipt Date", SymText2Date(SymbrioPurchaseLine.DeliveryDate));

      EVALUATE(NetPriceFromSymbrio, SymbrioPurchaseLine.NetPrice);
      PurchaseLine.VALIDATE("Direct Unit Cost", NetPriceFromSymbrio);
      IF NOT EVALUATE(DiscountFromSymbrio, SymbrioPurchaseLine.Discount) THEN
        DiscountFromSymbrio:=0;
      PurchaseLine.VALIDATE("Discount % (Item)", DiscountFromSymbrio*100);

      PurchaseLine."Imported Item No." := COPYSTR(SymbrioPurchaseLine.ArticleNo,1,MAXSTRLEN(PurchaseLine."Imported Item No.")); //171218 added copystr

      GetSymbrioSetup;
      CreateIndirectDimcodePurchLine(PurchaseLine, SymbrioPurchaseLine.Element, SymbrioSetup."Project Dimcode Purchases");

      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateWhsOrderLine@1100285011(VAR SymbrioPurchaseHeader@1100285003 : Record 11127978;VAR SymbrioPurchaseLine@1100285002 : Record 11127979;VAR PurchaseHeader@1100285001 : Record 38;VAR PurchaseLine@1100285000 : Record 39);
    VAR
      Location@1100285011 : Record 14;
      ItemRelation@1100285010 : Record 11012319;
      OrderLineDec@1100285009 : Decimal;
      QuantityFromSymbrio@1100285008 : Decimal;
      DeliveryDateFromSymbrio@1100285007 : Date;
      UnitPriceFromSymbrio@1100285006 : Decimal;
      NetPriceFromSymbrio@1100285005 : Decimal;
      DiscountFromSymbrio@1100285004 : Decimal;
    BEGIN
      /////////////////////////////////////////////////
      // Creates ONE warehouse order line

      GetSymbrioSetup;
      FindItemRelationOrder(SymbrioPurchaseHeader,SymbrioPurchaseLine,ItemRelation);

      PurchaseLine.INIT;
      PurchaseLine.SuspendStatusCheck(TRUE);  //pure283960
      PurchaseLine.VALIDATE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.VALIDATE("Document No.",PurchaseHeader."No.");
      EVALUATE(OrderLineDec, SymbrioPurchaseLine.OrderLinePosition);
      PurchaseLine.VALIDATE("Line No.", OrderLineDec * 10000);
      PurchaseLine.INSERT(TRUE);

      PurchaseLine.VALIDATE(Type, PurchaseLine.Type::Item);
      PurchaseLine.VALIDATE("No.", ItemRelation."Navision Item");
      PurchaseLine.VALIDATE("Location Code",SymbrioPurchaseLine.ProjectNo);
      Location.GET(SymbrioPurchaseLine.ProjectNo);
      PurchaseLine.VALIDATE("Shortcut Dimension 1 Code", Location."Global Dimension 1 Code");
      EVALUATE(QuantityFromSymbrio, SymbrioPurchaseLine.Quantity);
      PurchaseLine.VALIDATE(Quantity, QuantityFromSymbrio);

      PurchaseLine.VALIDATE("Expected Receipt Date", SymText2Date(SymbrioPurchaseLine.DeliveryDate));

      EVALUATE(NetPriceFromSymbrio, SymbrioPurchaseLine.NetPrice);
      PurchaseLine.VALIDATE("Direct Unit Cost", NetPriceFromSymbrio);
      IF NOT EVALUATE(DiscountFromSymbrio, SymbrioPurchaseLine.Discount) THEN
        DiscountFromSymbrio:=0;
      PurchaseLine.VALIDATE("Discount % (Item)", DiscountFromSymbrio*100);
      ItemRelation.CALCFIELDS("Description Navision-item");
      PurchaseLine.VALIDATE(Description, ItemRelation."Description Navision-item");

      PurchaseLine."Imported Item No." := COPYSTR(SymbrioPurchaseLine.ArticleNo,1,MAXSTRLEN(PurchaseLine."Imported Item No.")); //171218 added copystr

      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateIndirectPurchLine@1100285012(VAR SymbrioPurchaseHeader@1100285003 : Record 11127978;VAR SymbrioPurchaseLine@1100285002 : Record 11127979;VAR PurchaseHeader@1100285001 : Record 38;VAR PurchaseLine@1100285000 : Record 39);
    VAR
      Location@1100285011 : Record 14;
      ItemRelation@1100285010 : Record 11012319;
      OrderLineDec@1100285009 : Decimal;
      QuantityFromSymbrio@1100285008 : Decimal;
      DeliveryDateFromSymbrio@1100285007 : Date;
      UnitPriceFromSymbrio@1100285006 : Decimal;
      NetPriceFromSymbrio@1100285005 : Decimal;
      DiscountFromSymbrio@1100285004 : Decimal;
      LengthOfProjNo@1100285014 : Integer;
      NewStringDim1@1100285015 : Text[30];
      NewStringDim2@1100285013 : Text[30];
      ProjectNo@1100285012 : Text[30];
      Dim2Symbrio@1100285016 : Code[20];
      Fieldno@1100285018 : Integer;
      TradeItem@1100285021 : Record 11012317;
      RemainingAcc@1100285500 : Code[20];
      lvTradeItem@1100285501 : Record 11012317;
    BEGIN
      /////////////////////////////////////////////////
      // Creates ONE indirect purchase order line
      PurchaseLine.INIT;
      PurchaseLine.VALIDATE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.VALIDATE("Document No.",PurchaseHeader."No.");
      EVALUATE(OrderLineDec, SymbrioPurchaseLine.OrderLinePosition);
      PurchaseLine.VALIDATE("Line No.", OrderLineDec * 10000);
      PurchaseLine.INSERT(TRUE);

      PurchaseLine.VALIDATE(Type, PurchaseLine.Type::"G/L Account");
      PurchaseLine.VALIDATE("No.", SymbrioPurchaseLine.CostObject);

      PurchaseLine.SuspendStatusCheck(TRUE);
      //>>140317 SYM015
      PurchaseLine.VALIDATE(Description, COPYSTR(SymbrioPurchaseLine.ArticleName, 1, MAXSTRLEN(PurchaseLine.Description)));
      PurchaseLine.VALIDATE("Description 2", COPYSTR(SymbrioPurchaseLine.ArticleName, MAXSTRLEN(PurchaseLine.Description)+1, MAXSTRLEN(PurchaseLine."Description 2")));

      PurchaseLine.VALIDATE(PurchaseLine."Unit of Measure Code",SymbrioPurchaseLine.QuantityMeasurement);

      PurchaseLine.SetDontCheckItemPurchBlocked(TRUE);  // <-- SYM107+108
      CASE FindTradeItemRelationOrder(SymbrioPurchaseHeader,SymbrioPurchaseLine,ItemRelation,TradeItem) OF
        1:  BEGIN
              PurchaseLine.VALIDATE("Vendor (Trade Item)", TradeItem.Vendor);
              PurchaseLine.VALIDATE(Description, TradeItem."Item Description");
              PurchaseLine.VALIDATE("Description 2", TradeItem."Item Description 2");
              PurchaseLine.SetDontUseSingleGTIN(TRUE);  //150608, SYM086
              PurchaseLine.VALIDATE("Trade Item", COPYSTR(SymbrioPurchaseLine.ArticleNo,1,MAXSTRLEN(PurchaseLine."Trade Item"))); //171218 added copystr
              PurchaseLine.VALIDATE(Type, PurchaseLine.Type::"G/L Account");
              PurchaseLine.VALIDATE("No.", SymbrioPurchaseLine.CostObject);
            END;
        2:  BEGIN
              PurchaseLine.VALIDATE(Description  , ItemRelation."Description Navision-item");
              PurchaseLine.SetDontUseSingleGTIN(TRUE);  //150608, SYM086
              PurchaseLine.VALIDATE("Trade Item" , ItemRelation."Trade Item");
            END;
      END;
      PurchaseLine.SetDontCheckItemPurchBlocked(FALSE);  // <-- SYM107+108
      PurchaseLine.SuspendStatusCheck(FALSE);

      //>>191105
      AccountRefProjectToDims(SymbrioPurchaseLine.ProjectNo,NewStringDim1,Dim2Symbrio,Fieldno);
      // NewStringDim1 := COPYSTR(SymbrioPurchaseLine.ProjectNo, 1, 4);
      //191105
      ////////// SYM-933
      //191105
      // ProjectNo := SymbrioPurchaseLine.ProjectNo;
      // LengthOfProjNo := STRLEN(ProjectNo);
      // NewStringDim2 := COPYSTR(ProjectNo, LengthOfProjNo -1, 2);
      // EVALUATE(Dim2Symbrio,NewStringDim2);
      // IF NOT GetSymbrioSetup THEN
      //  ERROR(Text017);
      // Fieldno := GetDimensionIDCode(SymbrioSetup."Indirect Export Dim2");
      //<<191105
      PurchaseLine.VALIDATE("Shortcut Dimension 1 Code", NewStringDim1);

      PurchaseLine.ValidateShortcutDimCode(Fieldno,Dim2Symbrio);

      //>>RAD035
      GetSymbrioSetup;
      CreateIndirectDimcodePurchLine(PurchaseLine, SymbrioPurchaseLine.Element, SymbrioSetup."Indirect Dimcode Purchases");

      /////////////
      EVALUATE(QuantityFromSymbrio, SymbrioPurchaseLine.Quantity);
      PurchaseLine.VALIDATE(Quantity, QuantityFromSymbrio);

      PurchaseLine.VALIDATE("Expected Receipt Date", SymText2Date(SymbrioPurchaseLine.DeliveryDate));

      EVALUATE(NetPriceFromSymbrio, SymbrioPurchaseLine.NetPrice);
      IF NOT EVALUATE(DiscountFromSymbrio, SymbrioPurchaseLine.Discount) THEN
        DiscountFromSymbrio:=0;
      PurchaseLine.VALIDATE("Discount % (Item)", DiscountFromSymbrio*100);
      PurchaseLine.VALIDATE("Direct Unit Cost", NetPriceFromSymbrio);

      PurchaseLine."Imported Item No." := COPYSTR(SymbrioPurchaseLine.ArticleNo,1,MAXSTRLEN(PurchaseLine."Imported Item No.")); //171218 added copystr

      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE "**UTILS**"@1100285006();
    BEGIN
    END;

    LOCAL PROCEDURE INTEGER@1000000004(int@1000000000 : Integer;length@1000000001 : Integer) : Text[50];
    VAR
      _str@1000000002 : Text[50];
    BEGIN
      _str := FORMAT(int,0,'<Sign><Integer>');
      EXIT(INSSTR(_str,PADSTR('',length -STRLEN(_str),'0'),1));
    END;

    LOCAL PROCEDURE DECIMAL@1000000005(dec@1000000000 : Decimal;length@1000000001 : Integer) : Text[50];
    VAR
      _str@1000000002 : Text[50];
    BEGIN
      _str := FORMAT(dec,0,'<Sign><Integer><Decimals,3><Comma,.>');
      EXIT(INSSTR(_str,PADSTR('',length -STRLEN(_str),'0'),1));
    END;

    LOCAL PROCEDURE TRIM@1000000006(_text@1000000000 : Text[250];_start@1000000001 : Integer;_len@1000000002 : Integer) : Text[250];
    VAR
      _i@1000000003 : Integer;
      _pos@1000000004 : Integer;
    BEGIN
      _text := COPYSTR(_text,_start,_len);
      FOR _i := STRLEN(_text) DOWNTO 1 DO
        IF NOT (_text[_i] IN [255,32]) THEN BEGIN
          _pos := _i;
          _i := 1;
        END;
      //IF ANSI THEN
      //  EXIT(ANSI2ASCII(COPYSTR(Text,1,_pos)));
      EXIT(COPYSTR(_text,1,_pos))
    END;

    LOCAL PROCEDURE SymText2Date@1100285517(dateText@1100285500 : Text) : Date;
    VAR
      tmpDate@1100285501 : Date;
      tmpYYstr@1100285502 : Text;
      tmpMMstr@1100285503 : Text;
      tmpDDstr@1100285504 : Text;
      tmpYY@1100285505 : Integer;
      tmpDD@1100285506 : Integer;
      tmpMM@1100285507 : Integer;
    BEGIN
      //SYM042
      GetSymbrioSetup;
      CASE SymbrioSetup."Dateformat in Symbrio-file" OF
        SymbrioSetup."Dateformat in Symbrio-file"::"YYYY-MM-DD": BEGIN
            tmpYYstr := COPYSTR(dateText,1,4); IF (EVALUATE(tmpYY,tmpYYstr)) THEN;
            tmpMMstr := COPYSTR(dateText,6,2); IF (EVALUATE(tmpMM,tmpMMstr)) THEN;
            tmpDDstr := COPYSTR(dateText,9,2); IF (EVALUATE(tmpDD,tmpDDstr)) THEN;
            IF (tmpDD = 0) OR (tmpMM = 0) OR (tmpYY = 0) THEN EXIT(0D);
            tmpDate := DMY2DATE(tmpDD,tmpMM,tmpYY);
            EXIT(tmpDate);
          END;
        SymbrioSetup."Dateformat in Symbrio-file"::"DD-MM-YYYY": BEGIN
            tmpYYstr := COPYSTR(dateText,7,4); IF (EVALUATE(tmpYY,tmpYYstr)) THEN;
            tmpMMstr := COPYSTR(dateText,4,2); IF (EVALUATE(tmpMM,tmpMMstr)) THEN;
            tmpDDstr := COPYSTR(dateText,1,2); IF (EVALUATE(tmpDD,tmpDDstr)) THEN;
            IF (tmpDD = 0) OR (tmpMM = 0) OR (tmpYY = 0) THEN EXIT(0D);
            tmpDate := DMY2DATE(tmpDD,tmpMM,tmpYY);
            EXIT(tmpDate);
          END;
      END;
    END;

    LOCAL PROCEDURE Str2Dec@1100285033(StrNumber@1100285000 : Text[250]) Return : Decimal;
    VAR
      pos@1100285002 : Integer;
      Before@1100285004 : Integer;
      After@1100285003 : Integer;
      BeforeStr@1100285006 : Text[250];
      AfterStr@1100285005 : Text[250];
      i@1100285001 : Integer;
      exp@1100285007 : Integer;
      Neg@1100285008 : Boolean;
    BEGIN
      // Function to generate a decimal out of a text which contains either no decimal sign or the decimal sign . or ,
      IF (STRLEN(StrNumber)) = 0 THEN EXIT(0);

      Neg := FALSE;
      IF (StrNumber[1] = '-') THEN Neg := TRUE;

      pos := STRLEN(StrNumber);
      IF (pos > 1) THEN REPEAT
         pos -= 1;
      UNTIL (pos = 1) OR (StrNumber[pos] = '.') OR (StrNumber[pos] = ',');
      IF (pos = 1) THEN
         EVALUATE(Return, StrNumber)
      ELSE BEGIN
         BeforeStr := COPYSTR(StrNumber, 1, pos - 1);
         AfterStr := COPYSTR(StrNumber, pos + 1);
         EVALUATE(Before, BeforeStr);
         EVALUATE(After, AfterStr);
         exp := 10;

         FOR i := 1 TO (STRLEN(StrNumber) - pos - 1) DO BEGIN
            exp := exp * 10;
         END;
         IF Before >= 0 THEN
            Return := Before + After / exp
         ELSE
            Return := Before - After / exp;
      END;
      IF (Neg) AND (Return > 0) THEN Return := -Return;
    END;

    LOCAL PROCEDURE CheckIfRefIsNumeric@1100285023(inText@1100285000 : Text) : Boolean;
    VAR
      strpos@1100285001 : Integer;
    BEGIN
      IF inText = '' THEN EXIT(FALSE);

      FOR strpos := 1 TO STRLEN(inText) DO
        IF NOT (inText[strpos] IN ['0','1','2','3','4','5','6','7','8','9']) THEN
          EXIT(FALSE);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CalcLineDirectUnitCost@1100409000(plineQtyDec@1100409000 : Decimal;plineAmt@1100409001 : Text;plineNetPrice@1100409002 : Text;plineGrossPrice@1100409003 : Text) : Decimal;
    VAR
      DirectUnitCost@1100409004 : Decimal;
      DirectUnitCost1@1100409005 : Decimal;
    BEGIN
      DirectUnitCost := 0;

      IF (plineQtyDec<>0) AND EVALUATE(DirectUnitCost, plineAmt) THEN
        IF DirectUnitCost<>0 THEN
          EXIT(DirectUnitCost / plineQtyDec);

      IF EVALUATE(DirectUnitCost, plineAmt) THEN
        IF DirectUnitCost=0 THEN
          EXIT(0);

      IF EVALUATE(DirectUnitCost, plineNetPrice) THEN
        IF DirectUnitCost<>0 THEN
          EXIT(DirectUnitCost);

      IF EVALUATE(DirectUnitCost, plineGrossPrice) THEN
        IF DirectUnitCost<>0 THEN
          EXIT(DirectUnitCost);

      EXIT(0);
    END;

    LOCAL PROCEDURE GetGLSetup@1100285101() : Boolean;
    BEGIN
      IF NOT GotGLSetup THEN
        GotGLSetup := GLSetup.GET;
      EXIT(GotGLSetup);
    END;

    LOCAL PROCEDURE GetSymbrioSetup@1100525011() : Boolean;
    BEGIN
      IF GotSymbrioSetup THEN
        EXIT(GotSymbrioSetup);

      GotSymbrioSetup := SymbrioSetup.GET;
      EXIT(GotSymbrioSetup);
    END;

    LOCAL PROCEDURE GetAllowedPostingDate@1100285106(RegDate@1100285100 : Date;InvDate@1100285102 : Date;ReqDate@1100285105 : Date;pDiscardedInvioce@1101285000 : Boolean) : Date;
    VAR
      AllowPostingFrom@1100285101 : Date;
      UserSetup@1100285103 : Record 91;
      PostingDate@1100285104 : Date;
    BEGIN
      //180126 RFC244
      GetSymbrioSetup;
      PostingDate := TODAY;
      CASE SymbrioSetup."Posting Date from" OF
        SymbrioSetup."Posting Date from"::" ": EXIT(ReqDate); //RFC-1051
        SymbrioSetup."Posting Date from"::Today: PostingDate := TODAY;
        SymbrioSetup."Posting Date from"::WorkingDate: PostingDate := WORKDATE;
        SymbrioSetup."Posting Date from"::SymbrioRegisteredDate: PostingDate := RegDate;
        SymbrioSetup."Posting Date from"::SymbrioInvoiceDate: PostingDate := InvDate;
      END;

      //>>RFC1051
      IF pDiscardedInvioce THEN
        CASE SymbrioSetup."Posting Date from Discarded" OF
          SymbrioSetup."Posting Date from Discarded"::" ": EXIT(ReqDate); //RFC-1051
          SymbrioSetup."Posting Date from Discarded"::Today: PostingDate := TODAY;
          SymbrioSetup."Posting Date from Discarded"::WorkingDate: PostingDate := WORKDATE;
          SymbrioSetup."Posting Date from Discarded"::SymbrioRegisteredDate: PostingDate := RegDate;
          SymbrioSetup."Posting Date from Discarded"::SymbrioInvoiceDate: PostingDate := InvDate;
        END;
      //<<RFC1051


      IF USERID <> '' THEN
        IF UserSetup.GET(USERID) THEN BEGIN
          AllowPostingFrom := UserSetup."Allow Posting From";
        END;
      IF (AllowPostingFrom = 0D) THEN BEGIN
        GetGLSetup;
        AllowPostingFrom := GLSetup."Allow Posting From";
      END;

      IF AllowPostingFrom > PostingDate THEN
        EXIT(AllowPostingFrom);

      EXIT(PostingDate);
    END;

    LOCAL PROCEDURE IntValueInStr@1100285114(selstr@1100285102 : Text;selval@1100285101 : Text) : Boolean;
    VAR
      _int@1100285100 : TEMPORARY Record 2000000026;
    BEGIN
      //RFC1255, adjust qty based on setup
      IF (selstr = '') OR (selstr = selval) THEN
        EXIT(TRUE);

      EVALUATE(_int.Number,selval);
      _int.INSERT;
      _int.SETFILTER(Number,CONVERTSTR(selstr,',','|'));
      EXIT(_int.FIND);
    END;

    LOCAL PROCEDURE "***Symbrio Invoice Handling***"@1100285016();
    BEGIN

      ////////////////////////////***SYMBRIO INVOICE HANDLING***///////////////////////////////////////////////
      //I045#P6
    END;

    LOCAL PROCEDURE NewInvoice@1100285013(SymbrioPurchaseInvHeader@1100285000 : Record 11127980);
    VAR
      PurchaseHeaderInv@1100285001 : Record 38;
      TotalSum@1100285002 : Decimal;
      InvoiceDate@1100285003 : Date;
      SymbrioPurchaseInvLine@1100285004 : Record 11127981;
      PurchaseHeaderOrder@1100285005 : Record 38;
      PurchaseLineOrder@1100285006 : Record 39;
      LineNoDec@1100285007 : Decimal;
      Quantity@1100285008 : Decimal;
      PurchRcptLine@1100285009 : Record 121;
      LineNoDec2@1100285010 : Decimal;
      LineCreated@1100285011 : Boolean;
      Quantity4@1100285013 : Decimal;
      DirectUnitCost4@1100285012 : Decimal;
      LinesCreated@1100285014 : Boolean;
      TotalQtyReceipt@1100285015 : Decimal;
      Warehouse@1100285016 : Boolean;
      Warehouse2@1100285017 : Boolean;
      PurchInvHeader@1100285018 : Record 122;
      VATPostingSetup@1100285019 : Record 325;
      PurchSetup@1100285021 : Record 312;
      Currency@1100285020 : Record 4;
      SymbrioPurchaseInvLine2@1100285500 : Record 11127981;
      TotSumFromLineSum@1100285501 : Decimal;
      LineSumFrSymbrio@1100285502 : Decimal;
      InvoiceRoundingAmount@1100285503 : Decimal;
      ReleasePurchaseDocument@1100285504 : Codeunit 415;
      PurchaseHeaderInvDocNo@1100285023 : Code[20];
      RemTools@1100285400 : Codeunit 11128515;
      RemittanceAccount@1100285024 : Record 11128506;
      Vendor@1100285025 : Record 23;
      PurchaseHeaderOrderPaymentTermsCode@1100409000 : Code[20];
      SymbrioPurchaseInvImages@1100285300 : Record 11127990;
      InitialDocumentProperties@1100285301 : Record 11012746;
      DocumentProperties@1100285306 : Record 11012746;
      RecRef@1100285308 : RecordRef;
      lPostReceipts@1100525000 : Boolean;
      SymbrioPurchaseInvImagesname@1000000001 : Text;
      SymbrioPurchaseInvImagesTEMP@1000000002 : TEMPORARY Record 11127990;
      PurchCommentLine@1100285100 : Record 43;
      i@1100285101 : Integer;
      lvPurchaseLine@1000000000 : Record 39;
      newDocumentDate@1100285102 : Date;
      VendorExt@1000000003 : Record 11128090;
      JobPO@1100285103 : Record 11072003;
      JobSym@1100285104 : Record 11072003;
      NewStringDim1@1101285000 : Text;
      NewStringDim2@1101285001 : Code[20];
      Fieldno@1101285002 : Integer;
    BEGIN
      PurchaseHeaderInvDocNo := '';

      PurchaseHeaderInv.SETRANGE("Document Type",PurchaseHeaderInv."Document Type"::Invoice);
      PurchaseHeaderInv.SETRANGE("Ext. Document ID",SymbrioPurchaseInvHeader.InvoiceHeadID);
      IF PurchaseHeaderInv.FINDFIRST THEN BEGIN
        PurchaseHeaderInvDocNo := PurchaseHeaderInv."No.";
        PurchaseLineOrder.SETRANGE("Document Type", PurchaseHeaderInv."Document Type");
        PurchaseLineOrder.SETRANGE("Document No.",PurchaseHeaderInv."No.");
        IF PurchaseLineOrder.FINDFIRST THEN
          ERROR(Text012,SymbrioPurchaseInvHeader.InvoiceHeadID);
      END;

      //>> ORANGO.PR 190514
      IF NOT InvHasPayInfo(SymbrioPurchaseInvHeader) THEN
        EXIT;
      //<< ORANGO.PR 190514

      PurchaseLineOrder.SETRANGE("Document Type");
      PurchaseLineOrder.SETRANGE("Document No.");

      //check if order exists
      IF SymbrioPurchaseInvHeader.OrderHeadID <> '' THEN BEGIN
        IF NOT PurchaseHeaderInv.GET(PurchaseHeaderInv."Document Type"::Order, SymbrioPurchaseInvHeader.OrderHeadID) THEN
          ERROR(Text001, SymbrioPurchaseInvHeader.OrderHeadID);
        IF PurchaseHeaderInv.Status = PurchaseHeaderInv.Status::Closed THEN
          PurchaseHeaderInv.FIELDERROR(Status);
      END;

      //Create new invoice (create header)
      IF (PurchaseHeaderInvDocNo = '' ) OR
         (NOT PurchaseHeaderInv.GET(PurchaseHeaderInv."Document Type"::Invoice,PurchaseHeaderInvDocNo)) THEN BEGIN
        PurchaseHeaderInv.INIT;
        PurchaseHeaderInv."Document Type" := PurchaseHeaderInv."Document Type"::Invoice;
        PurchaseHeaderInv."No." := '';
        PurchaseHeaderInv.INSERT(TRUE);
      END;

      PurchaseHeaderInv.VALIDATE("Ext. Document ID",SymbrioPurchaseInvHeader.InvoiceHeadID);
      PurchaseHeaderInv.VALIDATE("Buy-from Vendor No.",SymbrioPurchaseInvHeader.SupplierIdentification);
      PurchaseHeaderInv.VALIDATE("Vendor Invoice No.",COPYSTR(SymbrioPurchaseInvHeader.SupplierInvoiceNo,1,MAXSTRLEN(PurchaseHeaderInv."Vendor Invoice No.")));

      PurchaseHeaderInv.VALIDATE("Vendor Order No.",COPYSTR(SymbrioPurchaseInvHeader.SupplierOrderNo,1,MAXSTRLEN(PurchaseHeaderInv."Vendor Order No.")));
      PurchaseHeaderInv.VALIDATE("Reference (Vendor)",COPYSTR(SymbrioPurchaseInvHeader.SupplierReference,1,MAXSTRLEN(PurchaseHeaderInv."Reference (Vendor)")));

      PurchCommentLine.INIT;
      PurchCommentLine."Document Type" := PurchaseHeaderInv."Document Type";
      PurchCommentLine."No." := PurchaseHeaderInv."No.";
      PurchCommentLine."Document Line No." := 0;
      PurchCommentLine.Date := PurchaseHeaderInv."Document Date";
      PurchCommentLine.Code := 'SYMBRIO';
      PurchCommentLine."Created by" := USERID;
      PurchCommentLine.SETRANGE("Document Type", PurchaseHeaderInv."Document Type");
      PurchCommentLine.SETRANGE("No.", PurchaseHeaderInv."No.");
      PurchCommentLine.SETRANGE("Document Line No.", 0);
      IF PurchCommentLine.FINDLAST THEN;
      IF SymbrioPurchaseInvHeader.SupplierNote <> '' THEN BEGIN
        PurchCommentLine."Line No." += 10000;
        PurchCommentLine.Comment := Text11128000;
        PurchCommentLine."Line Break" := TRUE;
        PurchCommentLine.INSERT;
        PurchCommentLine."Line No." += 10000;
        PurchCommentLine.Comment := COPYSTR(SymbrioPurchaseInvHeader.SupplierNote,1,MAXSTRLEN(PurchCommentLine.Comment));
        PurchCommentLine."Line Break" := (STRLEN(SymbrioPurchaseInvHeader.SupplierNote) > MAXSTRLEN(PurchCommentLine.Comment)) OR
                                         (SymbrioPurchaseInvHeader.DeliveryAddressNoteText<>'');
        PurchCommentLine.INSERT;

        //len 81-160, 161-240, 241-250
        FOR i:= 1 TO 3 DO
          IF STRLEN(SymbrioPurchaseInvHeader.SupplierNote) > (i*MAXSTRLEN(PurchCommentLine.Comment)) THEN BEGIN
            PurchCommentLine."Line No." += 10000;
            PurchCommentLine.Comment := COPYSTR(SymbrioPurchaseInvHeader.SupplierNote,(i * MAXSTRLEN(PurchCommentLine.Comment))+1,MAXSTRLEN(PurchCommentLine.Comment));
            PurchCommentLine."Line Break" := (STRLEN(SymbrioPurchaseInvHeader.SupplierNote) > ((i+1) * MAXSTRLEN(PurchCommentLine.Comment))) OR
              (SymbrioPurchaseInvHeader.DeliveryAddressNoteText<>'');
            PurchCommentLine.INSERT;
          END
          ELSE
            i := 3;  //force exit from FOR
      END;
      IF SymbrioPurchaseInvHeader.DeliveryAddressNoteText <> '' THEN BEGIN
        PurchCommentLine."Line No." += 10000;
        PurchCommentLine.Comment := '';//'DeliveryAddressNoteText';
        PurchCommentLine."Line Break" := TRUE;
        PurchCommentLine.INSERT;
        PurchCommentLine."Line No." += 10000;
        PurchCommentLine.Comment := COPYSTR(SymbrioPurchaseInvHeader.DeliveryAddressNoteText,1,MAXSTRLEN(PurchCommentLine.Comment));
        PurchCommentLine."Line Break" := STRLEN(SymbrioPurchaseInvHeader.SupplierNote) > MAXSTRLEN(PurchCommentLine.Comment);
        PurchCommentLine.INSERT;
      END;

      IF SymbrioPurchaseInvHeader.DeliveryAddress <> '' THEN
        PurchaseHeaderInv."Ship-to Address" := SymbrioPurchaseInvHeader.DeliveryAddress;
      IF SymbrioPurchaseInvHeader.DeliveryPostalCode <> '' THEN
        PurchaseHeaderInv."Ship-to Post Code" := SymbrioPurchaseInvHeader.DeliveryPostalCode;
      IF SymbrioPurchaseInvHeader.DeliveryCity <> '' THEN
        PurchaseHeaderInv."Ship-to City" := SymbrioPurchaseInvHeader.DeliveryCity;
      IF SymbrioPurchaseInvHeader.DeliveryCountry <> '' THEN
        PurchaseHeaderInv."Ship-to Country/Region Code" := SymbrioPurchaseInvHeader.DeliveryCountry;

      GetGLSetup;
      IF GLSetup."Norwegian Localization Active" THEN BEGIN
        CLEAR(RemittanceAccount);
        IF VendorExt.GET(PurchaseHeaderInv."Buy-from Vendor No.") THEN
          IF RemittanceAccount.GET(VendorExt."Remittance Account Code") THEN ;
        IF (NOT CheckIfRefIsNumeric(SymbrioPurchaseInvHeader.PaymentReference)) OR (RemittanceAccount."No KID") THEN
          PurchaseHeaderInv."Payment Reference" := COPYSTR(SymbrioPurchaseInvHeader.PaymentReference, 1, MAXSTRLEN(PurchaseHeaderInv."Payment Reference"))
        ELSE
          IF (RemTools.CheckKID(SymbrioPurchaseInvHeader.PaymentReference) <> '') THEN
            PurchaseHeaderInv."Payment Reference" := COPYSTR(SymbrioPurchaseInvHeader.PaymentReference, 1, MAXSTRLEN(PurchaseHeaderInv."Payment Reference"))
          ELSE
            PurchaseHeaderInv.KID := COPYSTR(SymbrioPurchaseInvHeader.PaymentReference, 1, MAXSTRLEN(PurchaseHeaderInv.KID));
      END ELSE BEGIN
        PurchaseHeaderInv."Payment Reference" := COPYSTR(SymbrioPurchaseInvHeader.PaymentReference, 1, MAXSTRLEN(PurchaseHeaderInv."Payment Reference"))
      END;

      IF NOT GetGLSetup THEN
        ERROR(Text018);
      IF (SymbrioPurchaseInvHeader.Currency <> GLSetup."LCY Code") THEN
        PurchaseHeaderInv.VALIDATE("Currency Code",SymbrioPurchaseInvHeader.Currency);

      IF PurchaseHeaderInv."Currency Code"<>SymbrioPurchaseInvHeader.Currency THEN
        PurchaseHeaderInv.VALIDATE("Currency Code", GLSetup."LCY Code");

      PurchaseHeaderInv."Export to Symbrio" := TRUE;       //SYM037
      PurchaseHeaderInv."Export to Symbrio Type" := PurchaseHeaderInv."Export to Symbrio Type"::Prelimary;

      PurchaseHeaderInv.MODIFY(TRUE);
      EVALUATE(TotalSum,SymbrioPurchaseInvHeader.TotalSum);

      PurchSetup.GET;
      IF PurchSetup."Invoice Rounding" THEN BEGIN
        IF PurchaseHeaderInv."Currency Code" = '' THEN
          Currency.InitRoundingPrecision
        ELSE BEGIN
          Currency.GET(PurchaseHeaderInv."Currency Code");
          Currency.TESTFIELD("Amount Rounding Precision");
        END;
        TotalSum :=
          ROUND(TotalSum,Currency."Invoice Rounding Precision",Currency.InvoiceRoundingDirection);
      END;
      PurchaseHeaderInv.VALIDATE("Amount incl. VAT",TotalSum);

      VATPostingSetup.SETRANGE("VAT Identifier",SymbrioPurchaseInvHeader.VATCode);
      IF VATPostingSetup.FINDFIRST THEN BEGIN
        PurchaseHeaderInv.VALIDATE("VAT Prod. Posting Group",VATPostingSetup."VAT Prod. Posting Group");
        PurchaseHeaderInv.VALIDATE("VAT Bus. Posting Group",VATPostingSetup."VAT Bus. Posting Group");
      END;

      PurchaseHeaderInv.VALIDATE("Your Reference",COPYSTR(SymbrioPurchaseInvHeader.PurchaserReference,1,MAXSTRLEN(PurchaseHeaderInv."Your Reference")));

      //>>180126 RFC244
      //PurchaseHeaderInv.VALIDATE("Posting Date",TODAY);
      PurchaseHeaderInv.VALIDATE("Posting Date", GetAllowedPostingDate(SymText2Date(SymbrioPurchaseInvHeader.RegisteredDate),SymText2Date(SymbrioPurchaseInvHeader.InvoiceDate),TODAY,FALSE));

      //PurchaseHeaderInv.VALIDATE("Document Date", SymText2Date(SymbrioPurchaseInvHeader.InvoiceDate));
      CASE SymbrioSetup."Document Date from" OF
        SymbrioSetup."Document Date from"::Today:                 newDocumentDate := TODAY;
        SymbrioSetup."Document Date from"::WorkingDate:           newDocumentDate := WORKDATE;
        SymbrioSetup."Document Date from"::SymbrioRegisteredDate: newDocumentDate := SymText2Date(SymbrioPurchaseInvHeader.RegisteredDate);
        SymbrioSetup."Document Date from"::SymbrioInvoiceDate:    newDocumentDate := SymText2Date(SymbrioPurchaseInvHeader.InvoiceDate);
        ELSE
          newDocumentDate := SymText2Date(SymbrioPurchaseInvHeader.InvoiceDate);
      END;
      PurchaseHeaderInv.VALIDATE("Document Date",newDocumentDate);
      //<<180126

      IF SymbrioPurchaseInvHeader.InvoiceDueDate<>'' THEN
        PurchaseHeaderInv.VALIDATE("Due Date",SymText2Date(SymbrioPurchaseInvHeader.InvoiceDueDate));

      PurchaseHeaderOrderPaymentTermsCode := PurchaseHeaderOrder."Payment Terms Code";
      IF SymbrioPurchaseInvHeader.OrderHeadID <> '' THEN
        IF PurchaseHeaderOrder.GET(PurchaseHeaderOrder."Document Type"::Order, SymbrioPurchaseInvHeader.OrderHeadID) THEN BEGIN
          PurchaseHeaderOrderPaymentTermsCode := PurchaseHeaderOrder."Payment Terms Code";
          IF PurchaseHeaderOrder."Payment Terms Code" <> PurchaseHeaderInv."Payment Terms Code" THEN BEGIN
            PurchaseHeaderOrder."Payment Terms Code" := PurchaseHeaderInv."Payment Terms Code";
            PurchaseHeaderOrder.MODIFY(FALSE);
          END;
        END;

      IF SymbrioPurchaseInvHeader.PurchaserDivisionCode <> '' THEN
        PurchaseHeaderInv.VALIDATE("Shortcut Dimension 1 Code",SymbrioPurchaseInvHeader.PurchaserDivisionCode);

      PurchaseHeaderInv.MODIFY(TRUE);

      //attach images
      SymbrioPurchaseInvImagesTEMP.RESET;
      SymbrioPurchaseInvImagesTEMP.DELETEALL;
      SymbrioPurchaseInvImages.RESET;
      SymbrioPurchaseInvImages.SETRANGE(InvoiceHeadID,   SymbrioPurchaseInvHeader.InvoiceHeadID);
      SymbrioPurchaseInvImages.SETRANGE(OrderHeadID,     SymbrioPurchaseInvHeader.OrderHeadID);
      SymbrioPurchaseInvImages.SETRANGE("DateTime Received",   SymbrioPurchaseInvHeader."DateTime Received");
      SymbrioPurchaseInvImages.SETRANGE("EntryNo in BatchRead", SymbrioPurchaseInvHeader."EntryNo in BatchRead");
      IF SymbrioPurchaseInvImages.FINDSET THEN
      REPEAT
        InitialDocumentProperties.INIT;
        InitialDocumentProperties."External Document" := TRUE;
        InitialDocumentProperties."Document Type" := 'SYM-INV';
        DocumentProperties.INIT;
        RecRef.GETTABLE(PurchaseHeaderInv);
        IF RegisterExternalDocument(InitialDocumentProperties,DocumentProperties, SymbrioPurchaseInvImages.name, RecRef) THEN
          //SymbrioPurchaseInvImages.DELETE(TRUE);
        BEGIN
          SymbrioPurchaseInvImagesTEMP.INIT;
          SymbrioPurchaseInvImagesTEMP.InvoiceHeadID          := SymbrioPurchaseInvImages.InvoiceHeadID;
          SymbrioPurchaseInvImagesTEMP.OrderHeadID            := SymbrioPurchaseInvImages.OrderHeadID;
          SymbrioPurchaseInvImagesTEMP."DateTime Received"    := SymbrioPurchaseInvImages."DateTime Received";
          SymbrioPurchaseInvImagesTEMP."EntryNo in BatchRead" := SymbrioPurchaseInvImages."EntryNo in BatchRead";
          SymbrioPurchaseInvImagesTEMP.imageIndex             := SymbrioPurchaseInvImages.imageIndex;
          SymbrioPurchaseInvImagesTEMP.name                   := SymbrioPurchaseInvImages.name;
          SymbrioPurchaseInvImagesTEMP.INSERT;
          SymbrioPurchaseInvImages.DELETE(FALSE);
        END;
      UNTIL SymbrioPurchaseInvImages.NEXT=0;

      GetSymbrioSetup;
      SymbrioPurchaseInvLine.SETRANGE("Source Filename", SymbrioPurchaseInvHeader."Source Filename");  //150610
      SymbrioPurchaseInvLine.SETRANGE(InvoiceHeadID,     SymbrioPurchaseInvHeader.InvoiceHeadID);      //150610
      SymbrioPurchaseInvLine.SETRANGE(OrderHeadID,       SymbrioPurchaseInvHeader.OrderHeadID);        //150610
      //Check for "orderheadID" and create lines
      IF SymbrioPurchaseInvHeader.OrderHeadID <>'' THEN BEGIN    //Check if order.get else errror?

      // check, receive and post recipts first
        IF PurchaseHeaderOrder.GET(PurchaseHeaderOrder."Document Type"::Order,SymbrioPurchaseInvHeader.OrderHeadID) THEN BEGIN
          lPostReceipts := FALSE;
          SymbrioPurchaseInvLine.SETFILTER(AccountSuffixPurchType,'1|3');
          SymbrioPurchaseInvLine.SETFILTER(OrderLinePosition,'<>%1','');
          PurchaseLineOrder.SETRANGE("Document Type",PurchaseLineOrder."Document Type"::Order);
          PurchaseLineOrder.SETRANGE("Document No.",SymbrioPurchaseInvHeader.OrderHeadID);

          //ensure that nothing else will be received
          PurchaseLineOrder.SETFILTER("Qty. to Receive",'<>0');
          IF PurchaseLineOrder.FINDSET(TRUE) THEN
          REPEAT
            PurchaseLineOrder.VALIDATE("Qty. to Receive",0);
            PurchaseLineOrder.MODIFY(FALSE);
          UNTIL PurchaseLineOrder.NEXT=0;
          PurchaseLineOrder.SETRANGE("Qty. to Receive"); //remove extra filter

          IF SymbrioPurchaseInvLine.FINDSET THEN
          REPEAT
            EVALUATE(LineNoDec,SymbrioPurchaseInvLine.OrderLinePosition);
            IF PurchaseLineOrder.GET(PurchaseLineOrder."Document Type"::Order,SymbrioPurchaseInvHeader.OrderHeadID,LineNoDec*10000) THEN BEGIN
      //>>191008, RFC1155
              IF SymbrioSetup."Update POLine from SymInvLine" AND JobPO.GET(PurchaseLineOrder."Job No.") THEN
                CASE SymbrioPurchaseInvLine.AccountSuffixPurchType OF
                  '1': IF (PurchaseLineOrder."Job No." <> SymbrioPurchaseInvLine.AccountRefProject) AND
                          (PurchaseLineOrder."Job No." <> '') AND (SymbrioPurchaseInvLine.AccountRefProject <>'') AND
                          (JobPO."Project Status" >= JobPO."Project Status"::"Technical Finished")
                        THEN BEGIN
                          IF JobSym.GET(SymbrioPurchaseInvLine.AccountRefProject) THEN
                            IF (JobSym."Project Status" < JobSym."Project Status"::"Technical Finished") THEN BEGIN
                              PurchaseLineOrder.VALIDATE("Job No.",SymbrioPurchaseInvLine.AccountRefProject);
                              PurchaseLineOrder.VALIDATE("Shortcut Dimension 2 Code",SymbrioPurchaseInvLine.AccountRefBaseAccount);
                            END;
                        END;
      //>>191105
                  '3':
                        IF (JobPO."Project Status" >= JobPO."Project Status"::"Technical Finished") THEN BEGIN
                          PurchaseLineOrder.VALIDATE("Job No.", '');
                          AccountRefProjectToDims(SymbrioPurchaseInvLine.AccountRefProject,NewStringDim1,NewStringDim2,Fieldno);
                          PurchaseLineOrder.VALIDATE(Type,PurchaseLineOrder.Type:: "G/L Account");
                          PurchaseLineOrder.VALIDATE("No.",SymbrioPurchaseInvLine.AccountRefBaseAccount);

                          PurchaseLineOrder.VALIDATE("Shortcut Dimension 1 Code", NewStringDim1);
                          PurchaseLineOrder.ValidateShortcutDimCode(Fieldno,NewStringDim2);
                          CreateIndirectDimcodePurchLine(PurchaseLineOrder, SymbrioPurchaseInvLine.AccountRefRemAccount, SymbrioSetup."Indirect Dimcode Purchases");

      //                    PurchaseLineOrder.SuspendStatusCheck(TRUE);
      //                    PurchaseLineOrder.VALIDATE(Description, COPYSTR(SymbrioPurchaseInvLine.ArticleName, 1, MAXSTRLEN(PurchaseLineOrder.Description)));
      //                    PurchaseLineOrder.VALIDATE("Description 2", COPYSTR(SymbrioPurchaseInvLine.ArticleName, MAXSTRLEN(PurchaseLineOrder.Description)+1, MAXSTRLEN(PurchaseLineOrder."Description 2")));

                        END;
      //<<191105
              END;
      //<<191008
              PurchaseLineOrder.InitOutstanding;
              EVALUATE(Quantity,SymbrioPurchaseInvLine.Quantity);
              IF ((Quantity+PurchaseLineOrder."Qty. to Receive") > (PurchaseLineOrder.Quantity-PurchaseLineOrder."Quantity Received")) THEN
                PurchaseLineOrder.VALIDATE("Qty. to Receive",(PurchaseLineOrder.Quantity-PurchaseLineOrder."Quantity Received")+PurchaseLineOrder."Qty. to Receive")
              ELSE
                PurchaseLineOrder.VALIDATE("Qty. to Receive",Quantity+PurchaseLineOrder."Qty. to Receive");
              PurchaseLineOrder.TESTFIELD("Qty. to Receive");  // <>0

              PurchaseLineOrder.MODIFY(TRUE);
              IF NOT lPostReceipts THEN lPostReceipts := TRUE;
            END;
          UNTIL SymbrioPurchaseInvLine.NEXT=0;
          PurchaseHeaderOrder.VALIDATE("Posting Date", PurchaseHeaderInv."Posting Date");
          PurchaseHeaderOrder.MODIFY;

          //Post Order
          PurchaseHeaderOrder.Receive:=TRUE;
          PurchaseHeaderOrder.Invoice:=FALSE;
          IF lPostReceipts THEN
            PurchaseHeaderOrder.SendToPosting(CODEUNIT::"Purch.-Post"); //Kolla upp funktionen, inneh†ller COMMIT
        END;
        SymbrioPurchaseInvLine.SETRANGE(AccountSuffixPurchType);   //remove extra filters
        SymbrioPurchaseInvLine.SETRANGE(OrderLinePosition);

        IF SymbrioPurchaseInvLine.FINDSET THEN BEGIN
          REPEAT
              //type 1 or 3
            IF (SymbrioPurchaseInvLine.AccountSuffixPurchType IN ['1','3'])  THEN BEGIN
              //Create invoice Line
              CreateInvoiceLine(SymbrioPurchaseInvHeader,PurchaseHeaderInv,SymbrioPurchaseInvLine);
              LinesCreated:=TRUE;

            END ELSE IF SymbrioPurchaseInvLine.AccountSuffixPurchType = '2' THEN BEGIN
              //Purchasetype 2
              PurchRcptLine.SETRANGE("Order No.",SymbrioPurchaseInvHeader.OrderHeadID);

              TotalQtyReceipt:=0;
              IF NOT EVALUATE(LineNoDec2,SymbrioPurchaseInvLine.OrderLinePosition) THEN
                LineNoDec2 :=0;

              PurchRcptLine.SETRANGE("Order Line No.",LineNoDec2*10000);
              PurchRcptLine.SETRANGE("Trade Item",COPYSTR(SymbrioPurchaseInvLine.ArticleNo,1,MAXSTRLEN(PurchRcptLine."Trade Item"))); //171218 added copystr
              EVALUATE(Quantity4,SymbrioPurchaseInvLine.Quantity);
              IF PurchRcptLine.FINDSET(FALSE) THEN BEGIN
                REPEAT
                  TotalQtyReceipt:=TotalQtyReceipt+PurchRcptLine."Qty. Rcd. Not Invoiced";
                  //how many lines are already created?
                  lvPurchaseLine.RESET;
                  lvPurchaseLine.SETRANGE("Document Type",PurchaseHeaderInv."Document Type");
                  lvPurchaseLine.SETRANGE("Document No.",PurchaseHeaderInv."No.");
                  lvPurchaseLine.SETRANGE("Receipt No.",PurchRcptLine."Document No.");
                  lvPurchaseLine.SETRANGE("Receipt Line No.",PurchRcptLine."Line No.");
                  IF lvPurchaseLine.FINDSET(FALSE) THEN
                  REPEAT
                    TotalQtyReceipt:=TotalQtyReceipt-lvPurchaseLine.Quantity;
                  UNTIL lvPurchaseLine.NEXT=0;
                UNTIL PurchRcptLine.NEXT=0;
                IF TotalQtyReceipt >= Quantity4 THEN BEGIN
                  //Create inv line
                  CreateInvoiceLine(SymbrioPurchaseInvHeader,PurchaseHeaderInv,SymbrioPurchaseInvLine);
                  LinesCreated:=TRUE;
                END ELSE BEGIN
                  SymbrioPurchaseInvHeader.VALIDATE("Error Message",'Warehouse Invoice - no receipt found');
                  SymbrioPurchaseInvLine.VALIDATE("Error Message",'No receipt found');
                  SymbrioPurchaseInvHeader.MODIFY(TRUE);
                  SymbrioPurchaseInvLine.MODIFY(TRUE);
                  Warehouse2:=TRUE;
                END;
              END ELSE BEGIN
                SymbrioPurchaseInvHeader.VALIDATE("Error Message",'Warehouse Invoice - no receipt found');
                SymbrioPurchaseInvLine.VALIDATE("Error Message",'No receipt found');
                SymbrioPurchaseInvHeader.MODIFY(TRUE);
                SymbrioPurchaseInvLine.MODIFY(TRUE);
                Warehouse2:=TRUE;
              END;
            END;
          UNTIL SymbrioPurchaseInvLine.NEXT=0;

          ApplyRounding(PurchaseHeaderInv,SymbrioPurchaseInvHeader);   //ENHSYM001

          //post invoice
          IF (LinesCreated=TRUE) AND (Warehouse2=FALSE) THEN BEGIN
            COMMIT;
            IF (PurchaseHeaderInv.IsApprovedForPosting()) THEN
               IF NOT (CODEUNIT.RUN(CODEUNIT::"Purch.-Post", PurchaseHeaderInv)) THEN
                  ERROR(Text013a,PurchaseHeaderInv."No.");

            IF NOT PurchInvHeader.GET(PurchaseHeaderInv."No.") THEN
              ERROR(Text013,PurchaseHeaderInv."No.");
            PurchInvHeader."Export to Symbrio":=TRUE;
            PurchInvHeader."Export to Symbrio Type" := PurchInvHeader."Export to Symbrio Type"::Prelimary;

            PurchInvHeader.MODIFY(TRUE);
            SymbrioPurchaseInvHeader.DELETE(TRUE); // May not be deleted here but for now it is.
          END;
        END;

      END ELSE BEGIN
        //No OrderheadID - create lines
        SymbrioPurchaseInvLine.SETRANGE(InvoiceHeadID,SymbrioPurchaseInvHeader.InvoiceHeadID);
        SymbrioPurchaseInvLine.SETRANGE(OrderHeadID,SymbrioPurchaseInvHeader.OrderHeadID);
        SymbrioPurchaseInvLine.SETRANGE("Source Filename", SymbrioPurchaseInvHeader."Source Filename");  //150610
        LineCreated:=FALSE;
        IF SymbrioPurchaseInvLine.FINDSET THEN BEGIN
          REPEAT
            IF ((SymbrioPurchaseInvLine.AccountSuffixPurchType = '1') OR (SymbrioPurchaseInvLine.AccountSuffixPurchType = '3'))  THEN BEGIN
              CreateInvoiceLine(SymbrioPurchaseInvHeader,PurchaseHeaderInv,SymbrioPurchaseInvLine);  //Create invocie line
              LineCreated:=TRUE;
            END ELSE IF SymbrioPurchaseInvLine.AccountSuffixPurchType = '2' THEN BEGIN
              SymbrioPurchaseInvHeader.VALIDATE("Error Message",'Warehouse invoice without order');
              SymbrioPurchaseInvHeader.MODIFY(TRUE);
              Warehouse:=TRUE;
            END;
          UNTIL SymbrioPurchaseInvLine.NEXT=0;

          ApplyRounding(PurchaseHeaderInv,SymbrioPurchaseInvHeader);  //ENHSYM001

          IF (LineCreated=TRUE) AND (Warehouse=FALSE) THEN BEGIN
            //MESSAGE('post invoice and export invoice no'); //Just for test
            //post invoice
            PurchaseHeaderInv.SendToPosting(CODEUNIT::"Purch.-Post");
            IF NOT PurchInvHeader.GET(PurchaseHeaderInv."No.") THEN
              ERROR(Text013,PurchaseHeaderInv."No.");
            PurchInvHeader."Export to Symbrio":=TRUE;
            PurchInvHeader."Export to Symbrio Type":=PurchInvHeader."Export to Symbrio Type"::Prelimary;

            PurchInvHeader.MODIFY(TRUE);

            SymbrioPurchaseInvHeader.DELETE(TRUE); // May not be deleted here but for now it is.
          END;
        END;
      END;


      //>>SYM103, restore PurchaseHeaderOrder."Payment Terms Code"
      IF SymbrioPurchaseInvHeader.OrderHeadID <> '' THEN
        IF PurchaseHeaderOrder.GET(PurchaseHeaderOrder."Document Type"::Order, SymbrioPurchaseInvHeader.OrderHeadID) THEN BEGIN
          IF PurchaseHeaderOrder."Payment Terms Code" <> PurchaseHeaderOrderPaymentTermsCode THEN BEGIN
            PurchaseHeaderOrder."Payment Terms Code" := PurchaseHeaderOrderPaymentTermsCode;
            PurchaseHeaderOrder.MODIFY(FALSE);
          END;
        END;

      IF (SymbrioPurchaseInvHeader.OrderStatus = '0') AND
        PurchaseHeaderOrder.GET(PurchaseHeaderOrder."Document Type"::Order,SymbrioPurchaseInvHeader.OrderHeadID) THEN BEGIN
          ReleasePurchaseDocument.Reopen(PurchaseHeaderOrder);
      END;

      GetSymbrioSetup;
      SymbrioPurchaseInvImagesTEMP.RESET;
      IF SymbrioPurchaseInvImagesTEMP.FINDSET THEN
      REPEAT
        SymbrioPurchaseInvImagesname := SymbrioSetup."Path Invoice Import Img Buffer"+'\'+SymbrioPurchaseInvImagesTEMP.name;
        IF EXISTS(SymbrioPurchaseInvImagesname) THEN
          ERASE(SymbrioPurchaseInvImagesname);
        SymbrioPurchaseInvImagesTEMP.DELETE;
      UNTIL SymbrioPurchaseInvImagesTEMP.NEXT=0;
    END;

    LOCAL PROCEDURE InvoiceApproval@1100285014(SymbrioPurchaseInvHeader@1100285000 : Record 11127980);
    VAR
      PurchInvLine@1100285002 : Record 123;
      SymbrioPurchaseInvLine@1100285003 : Record 11127981;
      GenJournalLine@1100285001 : Record 81;
      JobsSetup@1100285004 : Record 315;
      LineNo@1100285005 : Integer;
      PurchInvHeader@1100285006 : Record 122;
      Job@1100285008 : Record 11072003;
      Quantity@1100285009 : Decimal;
      Amount@1100285010 : Decimal;
      InvoiceLineIDExists@1100285011 : Boolean;
      Amount2@1100285012 : Decimal;
      ExtendedLineNo@1100285015 : Record 11127984;
      InvoiceLineIDInt@1100285016 : Integer;
      VendorLedgerEntry@1100285017 : Record 25;
      PeriodicDate@1100285018 : Date;
      PeriodicDate2@1100285019 : Date;
      ContractCode@1100285024 : Code[10];
      LenghtContractCode@1100285023 : Integer;
      StartPos@1100285022 : Integer;
      ContractCodeFound@1100285021 : Boolean;
      ExtensionContract@1100285020 : Record 11012004;
      Quantity2@1100285025 : Decimal;
      NewStringDim1@1100285032 : Text[30];
      LengthOfProjNo@1100285031 : Integer;
      NewStringDim2@1100285030 : Text[30];
      ProjectNo@1100285029 : Text[30];
      Dim2Symbrio@1100285028 : Code[20];
      Fieldno@1100285026 : Integer;
      PreviousLineID@1100285500 : Integer;
      AccSuffixPurchType@1100285501 : Code[10];
      PrevAccSuffixPurchType@1100285502 : Code[10];
      ReleasePurchaseDocument@1100285503 : Codeunit 415;
      PurchaseHeaderOrder@1100285504 : Record 38;
      Amount1@1100285505 : Decimal;
      RemainingAcc@1100285506 : Code[20];
      ServiceOrder@1000 : Record 11012823;
      pgGenJournal@1100285007 : Page 39;
      savedAmt@1100285033 : Decimal;
      savedQty@1100285034 : Decimal;
      TradeItem@1100285014 : Record 11012317;
      OnHoldCodes@1100285100 : Record 11012031;
    BEGIN
      PostLines:= FALSE;

      IF NOT PurchInvHeader.GET(SymbrioPurchaseInvHeader.VerificationNo) THEN
        ERROR(Text013,SymbrioPurchaseInvHeader.VerificationNo);
      JobsSetup.GET;
      IF ((JobsSetup."Adjustment Journal Template" = '') OR (JobsSetup."Adjustment Journal Batch" = '')) THEN
        ERROR ('Setup for adjustment journal is missing in jobs setup');

      GetGLSetup;

      GenJournalLine.SETRANGE("Journal Template Name", JobsSetup."Adjustment Journal Template");
      GenJournalLine.SETRANGE("Journal Batch Name",JobsSetup."Adjustment Journal Batch");
      IF GenJournalLine.FINDFIRST THEN
        GenJournalLine.DELETEALL(TRUE);  //Skall journalen rensas h„r? Skall den ej rensas, t„nk p† att „ndra line no!

      SymbrioPurchaseInvLine.SETRANGE(InvoiceHeadID,SymbrioPurchaseInvHeader.InvoiceHeadID);
      SymbrioPurchaseInvLine.SETRANGE("Source Filename", SymbrioPurchaseInvHeader."Source Filename"); // 150420 ITERO.MH SYM060
      SymbrioPurchaseInvLine.SETRANGE("DateTime Received",SymbrioPurchaseInvHeader."DateTime Received");
      SymbrioPurchaseInvLine.SETRANGE("EntryNo in BatchRead",SymbrioPurchaseInvHeader."EntryNo in BatchRead");

      IF SymbrioPurchaseInvLine.FINDSET THEN BEGIN

        // Remember the purchtype (1,2 or 3) for later use
        //AccSuffixPurchType := SymbrioPurchaseInvLine.AccountSuffixPurchType;

        REPEAT
          AccSuffixPurchType := SymbrioPurchaseInvLine.AccountSuffixPurchType;
          EVALUATE(InvoiceLineIDInt,SymbrioPurchaseInvLine.InvoiceLineID);

          // This call will make sure that all related purchase invoice lines are handled at the
          // end of each group of InvoiceLineID as there can be more than one account line.
          IF (PreviousLineID <> InvoiceLineIDInt) AND (PreviousLineID <> 0) THEN
            HandleMergedAccLines(GenJournalLine,
                                 LineNo,
                                 SymbrioPurchaseInvHeader.VerificationNo,
                                 PreviousLineID,
                                 PrevAccSuffixPurchType);


          //>> 131122 SYM959
          //IF SymbrioPurchaseInvLine.InvoiceLineID <> '' THEN BEGIN
          ExtendedLineNo.RESET;
          ExtendedLineNo.SETRANGE("Document Type",ExtendedLineNo."Document Type"::Invoice);
          ExtendedLineNo.SETRANGE("Document No.",SymbrioPurchaseInvHeader.VerificationNo);
          ExtendedLineNo.SETRANGE("Extended LineNo.",InvoiceLineIDInt);
          ExtendedLineNo.SETRANGE(Line,SymbrioPurchaseInvLine.LineNo);

      //150527, SYM060B
          //IF ExtendedLineNo.FINDFIRST THEN BEGIN
          IF ExtendedLineNo.FINDSET(FALSE) THEN BEGIN
            savedAmt := 0;
            savedQty := 0;
            REPEAT
              //**********************************************************
              // Purchase Invoice line was found
              IF NOT PurchInvLine.GET(ExtendedLineNo."Document No.",ExtendedLineNo."Line No.") THEN
                ERROR(Text014,ExtendedLineNo."Document No.",ExtendedLineNo."Line No.");

              IF CheckInvoiceLine(PurchInvLine,SymbrioPurchaseInvLine,SymbrioPurchaseInvHeader) THEN BEGIN //Check line
                //MESSAGE('Line is identical');
                //Remove on hold code on invoice
              END ELSE BEGIN
                // Create both lines for correction

                IF EVALUATE(Quantity,SymbrioPurchaseInvLine.Quantity) THEN BEGIN
                  Quantity := Quantity - savedQty;
                  SymbrioPurchaseInvLine.Quantity := FORMAT(Quantity,0,1);
                END;

                IF EVALUATE(Amount1,SymbrioPurchaseInvLine.Amount) THEN BEGIN
                  Amount1 := Amount1 - savedAmt;
                  SymbrioPurchaseInvLine.Amount := FORMAT(Amount1,0,1);
                END;

                CreateGenJnlLineFromPurchInvLine(SymbrioPurchaseInvLine.AccountSuffixPurchType,
                                                 PurchInvLine,
                                                 PurchInvHeader,  //RFC144
                                                 SymbrioPurchaseInvHeader,
                                                 GenJournalLine,
                                                 LineNo);

                IF (savedAmt = 0) AND (savedQty = 0) THEN
                  CreateGenJnlLineFromSymbrioLine(PurchInvLine,
                                                  PurchInvHeader,  //RFC144
                                                  SymbrioPurchaseInvLine,
                                                  SymbrioPurchaseInvHeader,
                                                  GenJournalLine,
                                                  LineNo);
                savedAmt := savedAmt + (PurchInvLine."Direct Unit Cost"*PurchInvLine.Quantity);
                savedQty := savedQty + PurchInvLine.Quantity;
              END;
            UNTIL ExtendedLineNo.NEXT=0;
      //150527
          END ELSE BEGIN
            //**********************************************************
            //InvoiceLineID is empty
            IF SymbrioPurchaseInvLine.AccountSuffixPurchType = '1' THEN BEGIN
              GenJournalLine.INIT;
              GenJournalLine.VALIDATE("Journal Template Name",JobsSetup."Adjustment Journal Template");
              GenJournalLine.VALIDATE("Journal Batch Name",JobsSetup."Adjustment Journal Batch");
              LineNo:=LineNo+10000;
              GenJournalLine.VALIDATE("Line No.",LineNo);
              GenJournalLine.INSERT(TRUE);
              GenJournalLine.VALIDATE("Posting Date",TODAY);
              GenJournalLine.VALIDATE("Document No.",SymbrioPurchaseInvHeader.VerificationNo);
              // 150818 ITERO.MH << Added Service Order too
              IF (Job.GET(SymbrioPurchaseInvLine.AccountRefProject)) THEN
                 GenJournalLine.VALIDATE("Job No.",SymbrioPurchaseInvLine.AccountRefProject);
              IF (ServiceOrder.GET(SymbrioPurchaseInvLine.AccountRefProject)) THEN
                 GenJournalLine.VALIDATE("Service Order No.", SymbrioPurchaseInvLine.AccountRefProject);
              // 150818 ITERO.MH >>
              GenJournalLine.VALIDATE(Element,SymbrioPurchaseInvLine.AccountRefObject);
              //IF SymbrioPurchaseInvLine.AccountSuffixŽTA <>'' THEN
                //GenJournalLine.VALIDATE("Extension Contract",SymbrioPurchaseInvLine.AccountSuffixŽTA);
              ContractCode := SymbrioPurchaseInvLine.AccountSuffixŽTA;
              LenghtContractCode := STRLEN(ContractCode);
              StartPos := 1;
              ContractCodeFound := FALSE;
              IF SymbrioPurchaseInvLine.AccountSuffixŽTA <> '' THEN BEGIN
                REPEAT
                  ContractCode := COPYSTR(ContractCode, StartPos, LenghtContractCode-StartPos+1);
                  StartPos := StartPos + 1;
                  IF ExtensionContract.GET(SymbrioPurchaseInvLine.AccountRefProject,ContractCode) THEN
                    ContractCodeFound := TRUE;
                UNTIL ((ContractCodeFound) OR (StartPos > LenghtContractCode));
                IF ContractCodeFound THEN BEGIN
                  GenJournalLine.VALIDATE("Extension Contract",ContractCode);
                END ELSE
                  ERROR(Text011,SymbrioPurchaseInvLine.AccountSuffixŽTA);
                //END ELSE BEGIN
                      // If blank then just validate
                  //PurchInvLine.VALIDATE("Extension Contract",SymbrioPurchaseInvLine.AccountSuffixŽTA);
              END;

              GenJournalLine.VALIDATE("Shortcut Dimension 2 Code",SymbrioPurchaseInvLine.AccountRefBaseAccount);

              GetSymbrioSetup;
              CreateIndirectDimcodeGenJnlLine(GenJournalLine, SymbrioPurchaseInvLine.AccountRefRemAccount, SymbrioSetup."Project Dimcode Purchases");

              GenJournalLine.VALIDATE(Description, COPYSTR(SymbrioPurchaseInvLine.ArticleName, 1, MAXSTRLEN(GenJournalLine.Description)));
              GenJournalLine.VALIDATE("Description 2", COPYSTR(SymbrioPurchaseInvLine.ArticleName, MAXSTRLEN(GenJournalLine.Description)+1, MAXSTRLEN(GenJournalLine."Description 2")));

              IF FindTradeItemInvoice(SymbrioPurchaseInvHeader,SymbrioPurchaseInvLine,TradeItem) THEN BEGIN
                GenJournalLine.VALIDATE("Vendor (Trade Item)",TradeItem.Vendor);
                GenJournalLine.MODIFY(TRUE);
                GenJournalLine.VALIDATE("Trade Item", COPYSTR(SymbrioPurchaseInvLine.ArticleNo,1,MAXSTRLEN(GenJournalLine."Trade Item"))); //171218 added copystr
                GenJournalLine.VALIDATE(Description,TradeItem."Item Description");
              END;

              IF Job.GET(SymbrioPurchaseInvLine.AccountRefProject) THEN
                GenJournalLine.VALIDATE(GenJournalLine."Shortcut Dimension 1 Code",Job."Global Dimension 1 Code");
              //>> 170703 ITERO.SB RAD-069
              IF (ServiceOrder.GET(SymbrioPurchaseInvLine.AccountRefProject)) THEN
                GenJournalLine.VALIDATE(GenJournalLine."Shortcut Dimension 1 Code",ServiceOrder."Global Dimension 1 Code");
              //<<
              EVALUATE(Quantity,SymbrioPurchaseInvLine.Quantity);
              GenJournalLine.VALIDATE(Quantity,Quantity);

              IF (NOT (SymbrioPurchaseInvHeader.Currency IN ['',GLSetup."LCY Code"])) AND (SymbrioPurchaseInvHeader.Currency <>'') THEN BEGIN
                GenJournalLine.VALIDATE("Currency Code",SymbrioPurchaseInvHeader.Currency);
                IF (PurchInvHeader."Currency Code" = GenJournalLine."Currency Code") AND
                   (PurchInvHeader."Currency Factor" <> GenJournalLine."Currency Factor") THEN
                  GenJournalLine."Currency Factor" := PurchInvHeader."Currency Factor";
              END;

              EVALUATE(Amount1,SymbrioPurchaseInvLine.Amount);
              GenJournalLine.VALIDATE(Amount,Amount1);

              IF GenJournalLine.Amount = 0 THEN
                GenJournalLine.DELETE(TRUE)
              ELSE
              BEGIN
                GenJournalLine.MODIFY(TRUE);
                PostLines:=TRUE;
              END;

            END ELSE IF SymbrioPurchaseInvLine.AccountSuffixPurchType = '2' THEN BEGIN  //Just for test
                //No changes allowed
                //MESSAGE('No changes allowed');
            END ELSE IF SymbrioPurchaseInvLine.AccountSuffixPurchType = '3' THEN BEGIN
              GenJournalLine.INIT;
              GenJournalLine.VALIDATE("Journal Template Name",JobsSetup."Adjustment Journal Template");
              GenJournalLine.VALIDATE("Journal Batch Name",JobsSetup."Adjustment Journal Batch");
              LineNo:=LineNo+10000;
              GenJournalLine.VALIDATE("Line No.",LineNo);
              GenJournalLine.INSERT(TRUE);
              GenJournalLine.VALIDATE("Posting Date",TODAY);
              GenJournalLine.VALIDATE("Document No.",SymbrioPurchaseInvHeader.VerificationNo);
              GenJournalLine.VALIDATE("Account No.",SymbrioPurchaseInvLine.AccountRefBaseAccount);

              GenJournalLine.VALIDATE(Description, COPYSTR(SymbrioPurchaseInvLine.ArticleName, 1, MAXSTRLEN(GenJournalLine.Description)));
              GenJournalLine.VALIDATE("Description 2", COPYSTR(SymbrioPurchaseInvLine.ArticleName, MAXSTRLEN(GenJournalLine.Description)+1, MAXSTRLEN(GenJournalLine."Description 2")));

              IF FindTradeItemInvoice(SymbrioPurchaseInvHeader,SymbrioPurchaseInvLine,TradeItem) THEN BEGIN
                GenJournalLine.VALIDATE("Vendor (Trade Item)",TradeItem.Vendor);
                GenJournalLine.MODIFY(TRUE);
                GenJournalLine.VALIDATE("Trade Item", COPYSTR(SymbrioPurchaseInvLine.ArticleNo,1,MAXSTRLEN(GenJournalLine."Trade Item"))); //171218 added copystr
                GenJournalLine.VALIDATE(Description,TradeItem."Item Description");
              END;

              IF (NOT (SymbrioPurchaseInvHeader.Currency IN ['',GLSetup."LCY Code"])) AND (SymbrioPurchaseInvHeader.Currency <>'') THEN BEGIN
                GenJournalLine.VALIDATE("Currency Code",SymbrioPurchaseInvHeader.Currency);
                IF (PurchInvHeader."Currency Code" = GenJournalLine."Currency Code") AND
                   (PurchInvHeader."Currency Factor" <> GenJournalLine."Currency Factor") THEN
                  GenJournalLine."Currency Factor" := PurchInvHeader."Currency Factor";
              END;

              EVALUATE(Quantity2,SymbrioPurchaseInvLine.Quantity);
              GenJournalLine.VALIDATE(Quantity,Quantity2);

              Amount2 := CalcLineDirectUnitCost(1,SymbrioPurchaseInvLine.Amount,SymbrioPurchaseInvLine.NetPrice,SymbrioPurchaseInvLine.GrossPrice);
              GenJournalLine.VALIDATE(Amount,Amount2);

              GenJournalLine.VALIDATE("Periodic Template Code",SymbrioPurchaseInvLine.AccountRefPeriodizing);
              GenJournalLine.VALIDATE("Periodic Starting Date",SymText2Date(SymbrioPurchaseInvLine.AccountRefPerioddatum));

      //191105
              AccountRefProjectToDims(SymbrioPurchaseInvLine.AccountRefProject,NewStringDim1,Dim2Symbrio,Fieldno);
      //        NewStringDim1 := COPYSTR(SymbrioPurchaseInvLine.AccountRefProject, 1, 4);
      //        ProjectNo := SymbrioPurchaseInvLine.AccountRefProject;
      //        LengthOfProjNo := STRLEN(ProjectNo);
      //        NewStringDim2 := COPYSTR(ProjectNo, LengthOfProjNo -1, 2);
      //        EVALUATE(Dim2Symbrio,NewStringDim2);
      //        IF NOT GetSymbrioSetup THEN
      //          ERROR(Text017);
      //        Fieldno := GetDimensionIDCode(SymbrioSetup."Indirect Export Dim2");
      //191105
              GenJournalLine.VALIDATE("Shortcut Dimension 1 Code", NewStringDim1);
              GenJournalLine.ValidateShortcutDimCode(Fieldno,Dim2Symbrio);

              CreateIndirectDimcodeGenJnlLine(GenJournalLine, SymbrioPurchaseInvLine.AccountRefRemAccount, SymbrioSetup."Indirect Dimcode Purchases");

              IF GenJournalLine.Amount = 0 THEN
                GenJournalLine.DELETE(TRUE)
              ELSE
              BEGIN
                GenJournalLine.MODIFY(TRUE);
                PostLines:=TRUE;
              END;

            END;
          END;

          PreviousLineID := InvoiceLineIDInt;
          PrevAccSuffixPurchType := AccSuffixPurchType;

        UNTIL SymbrioPurchaseInvLine.NEXT=0;

        // Perform this check again as the last line is missed in the loop.
        IF PreviousLineID = InvoiceLineIDInt THEN
          HandleMergedAccLines(GenJournalLine,
                               LineNo,
                               SymbrioPurchaseInvHeader.VerificationNo,
                               PreviousLineID,
                               AccSuffixPurchType);

        //>>140127 SYM981, Check if system is run by user or through NAS to prevent stop in process if user input is required
        IF PostLines THEN BEGIN
          ApplyRoundingLineJournal(GenJournalLine);
          cuGenJnlPost.ReplacePostingDatePeriodic(TRUE);  //RFC135
          IF NOT (GUIALLOWED) THEN
            cuGenJnlPost.Background(TRUE);
          cuGenJnlPost.RUN(GenJournalLine);
        END;
        //Remove on hold code
        IF NOT OnHoldCodes.GET(PurchInvHeader."On Hold") THEN
          PurchInvHeader.VALIDATE("On Hold",'');
        IF OnHoldCodes."Default Value Purchase Invoice" THEN
          PurchInvHeader.VALIDATE("On Hold",'');

        PurchInvHeader."Export to Symbrio":=TRUE;
        PurchInvHeader."Export to Symbrio Type":=PurchInvHeader."Export to Symbrio Type"::Definitive;
        PurchInvHeader."Consented Date-Time" := CURRENTDATETIME; //181115
        PurchInvHeader.MODIFY(TRUE);

        VendorLedgerEntry.SETRANGE("Document No.",PurchInvHeader."No.");
        VendorLedgerEntry.SETRANGE("Document Type",VendorLedgerEntry."Document Type"::Invoice);
        IF VendorLedgerEntry.FINDLAST THEN
          VendorLedgerEntry.UpdatePostedDocument();

      END;

      IF (SymbrioPurchaseInvHeader.OrderStatus = '1') AND
          PurchaseHeaderOrder.GET(PurchaseHeaderOrder."Document Type"::Order,SymbrioPurchaseInvHeader.OrderHeadID) THEN BEGIN
        ReleasePurchaseDocument.Close(PurchaseHeaderOrder);

      END;

      SymbrioPurchaseInvHeader.DELETE(TRUE); // May not be deleted here but for now it is.
    END;

    LOCAL PROCEDURE DiscardedInvoice@1100285015(SymbrioPurchaseInvHeader@1100285000 : Record 11127980);
    VAR
      PurchInvHeader@1100285002 : Record 122;
      PurchCrMemoHdr@1101285000 : Record 124;
      VendorLedgerEntry@1101285010 : Record 25;
      PurchSetup@1101285009 : Record 312;
      CopyDocMgt@1101285008 : Codeunit 6620;
      FromDocType@1101285007 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';
      ToDocType@1101285006 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';
      TotalSum@1101285005 : Decimal;
      rFromDocType@1101285004 : Integer;
      SymbrioPurchaseInvLine@1101285003 : Record 11127981;
      LineCreated@1101285002 : Boolean;
      WareHouse@1101285001 : Boolean;
      CorrectPostedPurchInvoice@1101285011 : Codeunit 1313;
      NoSeriesMgt@1101285012 : Codeunit 396;
    BEGIN

      SymbrioPurchaseInvHeader.VALIDATE(Discarded,TRUE);
      SymbrioPurchaseInvHeader.MODIFY(TRUE);

      //>>RFC234
      GetSymbrioSetup;
      CASE SymbrioPurchaseInvHeader.InvoiceType OF
        'Credit': BEGIN
            IF NOT PurchCrMemoHdr.GET(SymbrioPurchaseInvHeader.VerificationNo) THEN
              ERROR(Text016,SymbrioPurchaseInvHeader.VerificationNo);
            ToDocType := ToDocType::Invoice;
            FromDocType := FromDocType::"Credit Memo";
            SymbrioPurchaseInvHeader.InvoiceType := 'Debit';
          END;
        ELSE BEGIN
            IF NOT PurchInvHeader.GET(SymbrioPurchaseInvHeader.VerificationNo) THEN
              ERROR(Text013,SymbrioPurchaseInvHeader.VerificationNo);
            ToDocType := ToDocType::"Credit Memo";
            FromDocType := FromDocType::Invoice;
            SymbrioPurchaseInvHeader.InvoiceType := 'Credit';
          END;
      END;

      IF SymbrioSetup."No. serie DiscardedInvoice" = '' THEN
        EXIT;


      CASE FromDocType OF
        FromDocType::"Credit Memo":
          IF  (PurchCrMemoHdr."Vendor Cr. Memo No." <> SymbrioPurchaseInvHeader.SupplierInvoiceNo) OR
              (PurchCrMemoHdr."Buy-from Vendor No." <> SymbrioPurchaseInvHeader.SupplierIdentification) OR
              (PurchCrMemoHdr."Ext. Document ID" <> SymbrioPurchaseInvHeader.InvoiceHeadID) THEN
            EXIT;
        FromDocType::Invoice:
          IF  (PurchInvHeader."Vendor Invoice No." <> SymbrioPurchaseInvHeader.SupplierInvoiceNo) OR
              (PurchInvHeader."Buy-from Vendor No." <> SymbrioPurchaseInvHeader.SupplierIdentification) OR
              (PurchInvHeader."Ext. Document ID" <> SymbrioPurchaseInvHeader.InvoiceHeadID) THEN
            EXIT;
      END;

      VendorLedgerEntry.SETRANGE("Document Type", FromDocType);
      VendorLedgerEntry.SETRANGE("Document No.", SymbrioPurchaseInvHeader.VerificationNo);
      VendorLedgerEntry.SETRANGE(Open,TRUE);
      IF NOT VendorLedgerEntry.FINDFIRST THEN BEGIN
        SymbrioPurchaseInvHeader."Error Message" :=
          COPYSTR(SymbrioPurchaseInvHeader."Error Message" + ', not open! paid?',1,MAXSTRLEN(SymbrioPurchaseInvHeader."Error Message"));
        SymbrioPurchaseInvHeader.MODIFY(TRUE);
        EXIT;
      END;
      VendorLedgerEntry.CALCFIELDS("Remaining Amount");
      IF VendorLedgerEntry."Remaining Amount" = 0 THEN BEGIN
        SymbrioPurchaseInvHeader."Error Message" :=
          COPYSTR(SymbrioPurchaseInvHeader."Error Message" + ', paid',1,MAXSTRLEN(SymbrioPurchaseInvHeader."Error Message"));
        SymbrioPurchaseInvHeader.MODIFY(TRUE);
        EXIT;
      END;

      PurchHeader.SETRANGE("Document Type", ToDocType);
      PurchHeader.SETRANGE("Ext. Document ID", SymbrioPurchaseInvHeader.InvoiceHeadID);
      IF PurchHeader.FINDLAST THEN BEGIN
        PurchLine.SETRANGE("Document Type", PurchHeader."Document Type");
        PurchLine.SETRANGE("Document No.", PurchHeader."No.");
        IF PurchLine.FINDFIRST THEN
          PurchLine.DELETEALL;
      END ELSE BEGIN
        PurchHeader.RESET;
        PurchHeader."Document Type" := ToDocType;
        PurchHeader."No." := '';
        NoSeriesMgt.InitSeries(SymbrioSetup."No. serie DiscardedInvoice",'',PurchHeader."Posting Date",PurchHeader."No.",PurchHeader."No. Series");  //RFC234
        PurchHeader.INSERT(TRUE);
      END;


      //copy the document
      //report Copy Purchase Document (492)
      //rFromDocType::Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Receipt,Posted Invoice,Posted Return Shipment,Posted Credit Memo
      CASE FromDocType OF
        FromDocType::Invoice: rFromDocType := 7;
        FromDocType::"Credit Memo": rFromDocType := 9;
      END;
      PurchSetup.GET;
      PurchHeader.SETRECFILTER;
      CopyDocMgt.SetProperties(
        TRUE,FALSE,FALSE,FALSE,FALSE,PurchSetup."Exact Cost Reversing Mandatory",FALSE,FALSE,FALSE);
      CopyDocMgt.CopyPurchDoc(rFromDocType,SymbrioPurchaseInvHeader.VerificationNo,PurchHeader);
      //all lines has be removed and re-created due to clearing of "No."
      PurchLine.SETRANGE("Document Type", PurchHeader."Document Type");
      PurchLine.SETRANGE("Document No.",  PurchHeader."No.");
      IF PurchLine.FINDFIRST THEN
        PurchLine.DELETEALL;

      CASE FromDocType OF
        FromDocType::"Credit Memo":
          PurchHeader.VALIDATE("Vendor Invoice No.",COPYSTR(SymbrioPurchaseInvHeader.SupplierInvoiceNo,1,MAXSTRLEN(PurchHeader."Vendor Invoice No.")));
        FromDocType::Invoice:
          PurchHeader.VALIDATE("Vendor Cr. Memo No.",COPYSTR(SymbrioPurchaseInvHeader.SupplierInvoiceNo,1,MAXSTRLEN(PurchHeader."Vendor Cr. Memo No.")));
      END;

      //replace postingdate
      //RFC-1051
      PurchHeader.VALIDATE("Posting Date", GetAllowedPostingDate(SymText2Date(SymbrioPurchaseInvHeader.RegisteredDate),SymText2Date(SymbrioPurchaseInvHeader.InvoiceDate),PurchHeader."Posting Date",TRUE));

      PurchHeader."Applies-to Doc. Type" := FromDocType;
      PurchHeader.VALIDATE("Applies-to Doc. No.", SymbrioPurchaseInvHeader.VerificationNo);
      EVALUATE(TotalSum,SymbrioPurchaseInvHeader.TotalSum);
      IF TotalSum < 0 THEN
        TotalSum := -TotalSum;
      IF PurchHeader."Amount incl. VAT" <> TotalSum THEN
        PurchHeader.VALIDATE("Amount incl. VAT",TotalSum);
      PurchHeader.VALIDATE("On Hold",'');
      PurchHeader.MODIFY;

      IF FromDocType = FromDocType::"Credit Memo" THEN BEGIN
        PurchCrMemoHdr.VALIDATE("On Hold",'');
        PurchCrMemoHdr.MODIFY;
      END ELSE BEGIN
        PurchInvHeader.VALIDATE("On Hold",'');
        PurchInvHeader.MODIFY;
      END;

      SymbrioPurchaseInvLine.SETRANGE(InvoiceHeadID,SymbrioPurchaseInvHeader.InvoiceHeadID);
      SymbrioPurchaseInvLine.SETRANGE(OrderHeadID,SymbrioPurchaseInvHeader.OrderHeadID);
      SymbrioPurchaseInvLine.SETRANGE("DateTime Received", SymbrioPurchaseInvHeader."DateTime Received");
      SymbrioPurchaseInvLine.SETRANGE("EntryNo in BatchRead", SymbrioPurchaseInvHeader."EntryNo in BatchRead");
      LineCreated:=FALSE;
      WareHouse:=FALSE;

      IF SymbrioPurchaseInvLine.FINDSET THEN
        REPEAT
          IF SymbrioPurchaseInvLine.AccountSuffixPurchType IN['1','3']  THEN BEGIN
            CreateInvoiceLine(SymbrioPurchaseInvHeader,PurchHeader,SymbrioPurchaseInvLine);  //Create invocie line
            LineCreated:=TRUE;
          END ELSE IF SymbrioPurchaseInvLine.AccountSuffixPurchType = '2' THEN BEGIN
            WareHouse:=TRUE;
          END;
        UNTIL SymbrioPurchaseInvLine.NEXT=0;

      IF LineCreated AND (NOT WareHouse) THEN BEGIN
        //post invoice
        PurchHeader.SendToPosting(CODEUNIT::"Purch.-Post");
        SymbrioPurchaseInvHeader.DELETE(TRUE);
        CASE FromDocType OF
          FromDocType::Invoice: BEGIN
              IF NOT PurchCrMemoHdr.GET(PurchHeader."No.") THEN
                ERROR(Text016,PurchHeader."No.");
              PurchCrMemoHdr."Export to Symbrio":=TRUE;
              PurchCrMemoHdr."Export to Symbrio Type":=PurchCrMemoHdr."Export to Symbrio Type"::Prelimary; //S„tts r„tt status h„r??
              PurchCrMemoHdr.MODIFY(TRUE);
            END;
          FromDocType::"Credit Memo": BEGIN
              IF NOT PurchInvHeader.GET(PurchHeader."No.") THEN
                ERROR(Text013,PurchHeader."No.");
              PurchInvHeader."Export to Symbrio":=TRUE;
              PurchInvHeader."Export to Symbrio Type":=PurchInvHeader."Export to Symbrio Type"::Prelimary; //S„tts r„tt status h„r??
              PurchInvHeader.MODIFY(TRUE);
            END;
        END;
      END;
      //<<RFC234
    END;

    LOCAL PROCEDURE CreateInvoiceLine@1100285017(SymbrioPurchaseInvHeader@1100285000 : Record 11127980;PurchaseHeaderInv@1100285002 : Record 38;SymbrioPurchaseInvLine@1100285001 : Record 11127981);
    VAR
      PurchaseLine@1100285003 : Record 39;
      LineNoDec@1100285004 : Decimal;
      SymbrioPurchInvAccRef@1100285005 : Record 11127983;
      Quantity@1100285006 : Decimal;
      DirectUnitCost@1100285007 : Decimal;
      Job@1100285008 : Record 11072003;
      Quantity2@1100285009 : Decimal;
      DirectUnitCost2@1100285010 : Decimal;
      Quantity3@1100285012 : Decimal;
      DirectUnitCost3@1100285011 : Decimal;
      Location@1100285013 : Record 14;
      PurchaseHeaderOrder@1100285014 : Record 38;
      PurchaseLineOrder@1100285015 : Record 39;
      PurchRcptLine@1100285017 : Record 121;
      LineNoDec2@1100285016 : Decimal;
      Quantity4@1100285018 : Decimal;
      DirectUnitCost4@1100285019 : Decimal;
      LineNoDec3@1100285020 : Decimal;
      GetReceipts@1100285021 : Codeunit 74;
      PurchRcptLine2@1100285022 : Record 121;
      Quantity5@1100285024 : Decimal;
      DirectUnitCost5@1100285023 : Decimal;
      LineNoDec4@1100285025 : Decimal;
      LineNoDec5@1100285026 : Decimal;
      ExtendedLineNo@1100285027 : Record 11127984;
      InvoiceLineID@1100285028 : Integer;
      PurchaseLineLineNoCheck@1100285029 : Record 39;
      NextLineNo@1100285030 : Integer;
      QtyInvoiced@1100285031 : Decimal;
      PurchRcptLine3@1100285032 : Record 121;
      PeriodicDate@1100285033 : Date;
      PeriodicDate2@1100285034 : Date;
      ContractCode@1100285041 : Code[10];
      LenghtContractCode@1100285040 : Integer;
      StartPos@1100285039 : Integer;
      ContractCodeFound@1100285038 : Boolean;
      ExtensionContract@1100285037 : Record 11012004;
      NewStringDim1@1100285045 : Text[30];
      LengthOfProjNo@1100285044 : Integer;
      NewStringDim2@1100285043 : Text[30];
      ProjectNo@1100285042 : Text[30];
      Dim2Symbrio@1100285047 : Code[20];
      Fieldno@1100285048 : Integer;
      RemainingAcc@1100285500 : Code[20];
      ServiceOrder@1000 : Record 11012823;
      ChangeSigns@1100285049 : Boolean;
      TotalSum@1100285050 : Decimal;
      TradeItem@1100285036 : Record 11012317;
      QtyOnInvoice@1100285100 : Decimal;
    BEGIN
      ///////////////////////// CREATE INVOICE LINE //////////////////////////////////
      PurchaseLineLineNoCheck.SETRANGE("Document No.",PurchaseHeaderInv."No.");
      IF PurchaseLineLineNoCheck.FINDLAST THEN
        NextLineNo := PurchaseLineLineNoCheck."Line No." + 10000
      ELSE
        NextLineNo := 10000;

      ChangeSigns := FALSE;
      IF EVALUATE(TotalSum,SymbrioPurchaseInvHeader.TotalSum) THEN
        IF ((TotalSum < 0) AND (PurchaseHeaderInv."Amount incl. VAT" > 0)) OR
           ((TotalSum > 0) AND (PurchaseHeaderInv."Amount incl. VAT" < 0)) THEN
          ChangeSigns := TRUE;

      //Linked to purchase order?
      IF ((SymbrioPurchaseInvHeader.OrderHeadID <> '') AND (SymbrioPurchaseInvLine.OrderLinePosition<>'') AND
         (SymbrioPurchaseInvLine.AccountSuffixPurchType <> '2' ) AND (SymbrioPurchaseInvHeader.InvoiceType<>'Credit')) THEN BEGIN
        //Purchase order exsist
        PurchaseHeaderOrder.SETRANGE("Document Type",PurchaseHeaderOrder."Document Type"::Order);
        PurchaseHeaderOrder.SETRANGE("No.",SymbrioPurchaseInvHeader.OrderHeadID);
        IF PurchaseHeaderOrder.FINDSET THEN BEGIN
          PurchRcptLine.SETRANGE("Order No.",SymbrioPurchaseInvHeader.OrderHeadID);
          EVALUATE(LineNoDec3,SymbrioPurchaseInvLine.OrderLinePosition);
          PurchRcptLine.SETRANGE("Order Line No.",LineNoDec3*10000);
          IF PurchRcptLine.FINDLAST THEN BEGIN
            PurchRcptLine.SETRECFILTER;
            GetReceipts.SetPurchHeader(PurchaseHeaderInv);
            GetReceipts.CreateInvLines(PurchRcptLine);
            PurchaseLine.SETRANGE("Document Type",PurchaseLine."Document Type"::Invoice);
            PurchaseLine.SETRANGE("Document No.",PurchaseHeaderInv."No.");
            IF PurchaseLine.FINDLAST THEN BEGIN
              EVALUATE(Quantity5,SymbrioPurchaseInvLine.Quantity);
              PurchaseLine.VALIDATE(Quantity,Quantity5);
              DirectUnitCost5 := CalcLineDirectUnitCost(PurchaseLine.Quantity,SymbrioPurchaseInvLine.Amount,SymbrioPurchaseInvLine.NetPrice,SymbrioPurchaseInvLine.GrossPrice);
              PurchaseLine.VALIDATE("Direct Unit Cost",DirectUnitCost5);

              PurchaseLine.VALIDATE("VAT Bus. Posting Group",PurchaseHeaderInv."VAT Bus. Posting Group");
              PurchaseLine.VALIDATE("VAT Prod. Posting Group",PurchaseHeaderInv."VAT Prod. Posting Group");
              IF SymbrioPurchaseInvLine.AccountSuffixPurchType = '3' THEN BEGIN
                PurchaseLine.VALIDATE("Periodic Template Code",SymbrioPurchaseInvLine.AccountRefPeriodizing);
                PurchaseLine.VALIDATE("Periodic Starting Date",SymText2Date(SymbrioPurchaseInvLine.AccountRefPerioddatum));
              END;
              IF (PurchaseLine."Direct Unit Cost" = 0) AND (PurchaseLine.Quantity <> 0) AND EVALUATE(DirectUnitCost5,SymbrioPurchaseInvLine.Amount) THEN
                PurchaseLine.VALIDATE("Direct Unit Cost",DirectUnitCost5/PurchaseLine.Quantity);
              PurchaseLine.MODIFY(TRUE);

              //Spara undan till egen tabell, doc no, line no, typ, External line no
              ExtendedLineNo.INIT;
              ExtendedLineNo.VALIDATE("Document Type",ExtendedLineNo."Document Type"::Invoice);
              ExtendedLineNo.VALIDATE("Document No.",PurchaseHeaderInv."No.");
              ExtendedLineNo.VALIDATE("Line No.",PurchaseLine."Line No.");
              ExtendedLineNo.INSERT(TRUE);
              EVALUATE(InvoiceLineID,SymbrioPurchaseInvLine.InvoiceLineID);
              ExtendedLineNo.VALIDATE("Extended LineNo.",InvoiceLineID);
              ExtendedLineNo.Line:=SymbrioPurchaseInvLine.LineNo;
              ExtendedLineNo.MODIFY(TRUE);

            END;
          END;
        END;
      END ELSE BEGIN

        //No purchase order exists or credit
        IF SymbrioPurchaseInvLine.AccountSuffixPurchType = '1' THEN BEGIN
            ///////////////////Create Project Line////////////////////////////////
          PurchaseLine.INIT;
          PurchaseLine."Document Type":=PurchaseLine."Document Type"::Invoice;
          IF SymbrioPurchaseInvHeader.InvoiceType='Credit' THEN
            PurchaseLine."Document Type":=PurchaseLine."Document Type"::"Credit Memo";
          PurchaseLine.VALIDATE("Document No.",PurchaseHeaderInv."No.");
          PurchaseLine.VALIDATE("Line No.",NextLineNo);
          PurchaseLine.INSERT(TRUE);
          PurchaseLine.SetDontCheckItemPurchBlocked(TRUE);

          IF (Job.GET(SymbrioPurchaseInvLine.AccountRefProject)) THEN
             PurchaseLine.VALIDATE("Job No.",SymbrioPurchaseInvLine.AccountRefProject);
          IF (ServiceOrder.GET(SymbrioPurchaseInvLine.AccountRefProject)) THEN
             PurchaseLine.VALIDATE("Service Order No.",SymbrioPurchaseInvLine.AccountRefProject);

          PurchaseLine.VALIDATE(Element,SymbrioPurchaseInvLine.AccountRefObject);

          ContractCode := SymbrioPurchaseInvLine.AccountSuffixŽTA;
          LenghtContractCode := STRLEN(ContractCode);
          StartPos := 1;
          ContractCodeFound := FALSE;
          IF SymbrioPurchaseInvLine.AccountSuffixŽTA <> '' THEN BEGIN
            REPEAT
              ContractCode := COPYSTR(ContractCode, StartPos, LenghtContractCode-StartPos+1);
              StartPos := StartPos + 1;
              IF ExtensionContract.GET(SymbrioPurchaseInvLine.AccountRefProject,ContractCode) THEN
                ContractCodeFound := TRUE;
            UNTIL ((ContractCodeFound) OR (StartPos > LenghtContractCode));
            IF ContractCodeFound THEN BEGIN
              PurchaseLine.VALIDATE("Extension Contract",ContractCode);
            END ELSE
              ERROR(Text011,SymbrioPurchaseInvLine.AccountSuffixŽTA);
          END;

              //Cost centre from project
          IF Job.GET(SymbrioPurchaseInvLine.AccountRefProject) THEN
            PurchaseLine.VALIDATE("Shortcut Dimension 1 Code",Job."Global Dimension 1 Code");
          //>> 170703 ITERO.SB RAD-069
          IF (ServiceOrder.GET(SymbrioPurchaseInvLine.AccountRefProject)) THEN
            PurchaseLine.VALIDATE("Shortcut Dimension 1 Code",ServiceOrder."Global Dimension 1 Code");
          //<<
          PurchaseLine.VALIDATE("Shortcut Dimension 2 Code",SymbrioPurchaseInvLine.AccountRefBaseAccount);

          PurchaseLine.SuspendStatusCheck(TRUE);
          PurchaseLine.VALIDATE(Description, COPYSTR(SymbrioPurchaseInvLine.ArticleName, 1, MAXSTRLEN(PurchaseLine.Description)));
          PurchaseLine.VALIDATE("Description 2", COPYSTR(SymbrioPurchaseInvLine.ArticleName, MAXSTRLEN(PurchaseLine.Description)+1, MAXSTRLEN(PurchaseLine."Description 2")));

          IF FindTradeItemInvoice(SymbrioPurchaseInvHeader,SymbrioPurchaseInvLine,TradeItem) THEN BEGIN
            PurchaseLine.VALIDATE("Vendor (Trade Item)", TradeItem.Vendor);
            PurchaseLine.VALIDATE(Description, TradeItem."Item Description");
            PurchaseLine.VALIDATE("Trade Item", COPYSTR(SymbrioPurchaseInvLine.ArticleNo,1,MAXSTRLEN(PurchaseLine."Trade Item"))); //171218 added copystr
            PurchaseLine.VALIDATE(Description, TradeItem."Item Description");
          END;
          PurchaseLine.SuspendStatusCheck(FALSE);

          EVALUATE(Quantity,SymbrioPurchaseInvLine.Quantity);
          IF ChangeSigns THEN
            Quantity := -Quantity;
          PurchaseLine.VALIDATE(Quantity,Quantity);

          DirectUnitCost := CalcLineDirectUnitCost(PurchaseLine.Quantity,SymbrioPurchaseInvLine.Amount,SymbrioPurchaseInvLine.NetPrice,SymbrioPurchaseInvLine.GrossPrice);
          IF ChangeSigns THEN
            DirectUnitCost := -DirectUnitCost;
          PurchaseLine.VALIDATE("Direct Unit Cost",DirectUnitCost);

          PurchaseLine.VALIDATE("VAT Bus. Posting Group",PurchaseHeaderInv."VAT Bus. Posting Group");
          PurchaseLine.VALIDATE("VAT Prod. Posting Group",PurchaseHeaderInv."VAT Prod. Posting Group");
          IF (PurchaseLine."Direct Unit Cost" = 0) AND (PurchaseLine.Quantity <> 0) AND EVALUATE(DirectUnitCost,SymbrioPurchaseInvLine.Amount) THEN BEGIN
            IF ChangeSigns THEN DirectUnitCost := -DirectUnitCost;
            PurchaseLine.VALIDATE(PurchaseLine."Direct Unit Cost",DirectUnitCost/PurchaseLine.Quantity);
          END;
          GetSymbrioSetup;
          CreateIndirectDimcodePurchLine(PurchaseLine, SymbrioPurchaseInvLine.AccountRefRemAccount, SymbrioSetup."Project Dimcode Purchases");
          PurchaseLine.MODIFY(TRUE);
          //Spara undan till egen tabell, doc no, line no, typ, External line no

          ExtendedLineNo.INIT;
          IF SymbrioPurchaseInvHeader.InvoiceType = 'Credit' THEN
            ExtendedLineNo.VALIDATE("Document Type",ExtendedLineNo."Document Type"::"Credit Memo")
          ELSE
            ExtendedLineNo.VALIDATE("Document Type",ExtendedLineNo."Document Type"::Invoice);
          IF NOT ExtendedLineNo.GET(ExtendedLineNo."Document Type",PurchaseHeaderInv."No.",PurchaseLine."Line No.") THEN BEGIN
            ExtendedLineNo.VALIDATE("Document No.",PurchaseHeaderInv."No.");
            ExtendedLineNo.VALIDATE("Line No.",PurchaseLine."Line No.");
            ExtendedLineNo.INSERT(TRUE);
          END;

          EVALUATE(InvoiceLineID,SymbrioPurchaseInvLine.InvoiceLineID);
          ExtendedLineNo.VALIDATE("Extended LineNo.",InvoiceLineID);
          ExtendedLineNo.Line:=SymbrioPurchaseInvLine.LineNo;
          ExtendedLineNo.MODIFY(TRUE);

        END ELSE IF SymbrioPurchaseInvLine.AccountSuffixPurchType = '2' THEN BEGIN
          /////////////////////Create Warehouse Line///////////////////
          //Check invoice line = receipt line
          PurchRcptLine.SETRANGE("Order No.",SymbrioPurchaseInvHeader.OrderHeadID);
          EVALUATE(LineNoDec2,SymbrioPurchaseInvLine.OrderLinePosition);
          PurchRcptLine.SETRANGE("Order Line No.",LineNoDec2*10000);
          //PurchRcptLine.SETRANGE("Vendor Item No.",SymbrioPurchaseInvLine.ArticleNo);
          PurchRcptLine.SETRANGE("Trade Item",COPYSTR(SymbrioPurchaseInvLine.ArticleNo,1,MAXSTRLEN(PurchRcptLine."Trade Item"))); //171218 added copystr

          IF PurchRcptLine.FINDSET THEN REPEAT
            PurchRcptLine3:=PurchRcptLine;


            EVALUATE(Quantity4,SymbrioPurchaseInvLine.Quantity);
      //>>190527, RFC1227, #24108, #24070
            QtyOnInvoice := 0;
            PurchaseLine.SETRANGE("Document Type",PurchaseLine."Document Type"::Invoice);
            PurchaseLine.SETRANGE("Document No.",PurchaseHeaderInv."No.");
            PurchaseLine.SETRANGE("Receipt No.",PurchRcptLine3."Document No.");//Kolla antal och belopp/„ndra
            PurchaseLine.SETRANGE("Receipt Line No.",PurchRcptLine3."Line No.");
            IF PurchaseLine.FINDSET(FALSE) THEN BEGIN
              PurchaseLine.CALCSUMS(Quantity);
              QtyOnInvoice := PurchaseLine.Quantity;
            END;

            IF (Quantity4 > QtyInvoiced) AND (PurchRcptLine.Quantity > QtyOnInvoice) THEN BEGIN
      //      IF (Quantity4 > QtyInvoiced) THEN BEGIN
      //<<
              PurchRcptLine3.SETRECFILTER;
              GetReceipts.SetPurchHeader(PurchaseHeaderInv);
              GetReceipts.CreateInvLines(PurchRcptLine3);
              PurchaseLine.SETRANGE("Document Type",PurchaseLine."Document Type"::Invoice);
              PurchaseLine.SETRANGE("Document No.",PurchaseHeaderInv."No.");
              PurchaseLine.SETRANGE("Receipt No.",PurchRcptLine3."Document No.");//Kolla antal och belopp/„ndra
              PurchaseLine.SETRANGE("Receipt Line No.",PurchRcptLine3."Line No.");

              IF PurchaseLine.FINDLAST THEN BEGIN
                EVALUATE(Quantity3,SymbrioPurchaseInvLine.Quantity);
                IF ChangeSigns THEN
                  Quantity3 := -Quantity3;
                IF ((PurchaseLine.Quantity) > (Quantity3-QtyInvoiced)) THEN BEGIN
                  PurchaseLine.VALIDATE(Quantity,Quantity3-QtyInvoiced);
                END;

                DirectUnitCost3 := CalcLineDirectUnitCost(Quantity3,SymbrioPurchaseInvLine.Amount,SymbrioPurchaseInvLine.NetPrice,SymbrioPurchaseInvLine.GrossPrice);
                IF ChangeSigns THEN DirectUnitCost3 := -DirectUnitCost3; //SYM068
                PurchaseLine.VALIDATE("Direct Unit Cost",DirectUnitCost3);

                PurchaseLine.VALIDATE("VAT Bus. Posting Group",PurchaseHeaderInv."VAT Bus. Posting Group");
                PurchaseLine.VALIDATE("VAT Prod. Posting Group",PurchaseHeaderInv."VAT Prod. Posting Group");

                IF (PurchaseLine."Direct Unit Cost" = 0) AND (PurchaseLine.Quantity <> 0) AND EVALUATE(DirectUnitCost3,SymbrioPurchaseInvLine.Amount) THEN
                  PurchaseLine.VALIDATE("Direct Unit Cost",DirectUnitCost3/PurchaseLine.Quantity);

                PurchaseLine.MODIFY(TRUE);
                //Spara undan till egen tabell, doc no, line no, typ, External line no

                ExtendedLineNo.INIT;

                IF NOT ExtendedLineNo.GET(ExtendedLineNo."Document Type"::Invoice,PurchaseHeaderInv."No.",PurchaseLine."Line No.") THEN BEGIN
                  ExtendedLineNo.VALIDATE("Document Type",ExtendedLineNo."Document Type"::Invoice);
                  ExtendedLineNo.VALIDATE("Document No.",PurchaseHeaderInv."No.");
                  ExtendedLineNo.VALIDATE("Line No.",PurchaseLine."Line No.");
                  ExtendedLineNo.INSERT(TRUE);
                END;

                EVALUATE(InvoiceLineID,SymbrioPurchaseInvLine.InvoiceLineID);
                ExtendedLineNo.VALIDATE("Extended LineNo.",InvoiceLineID);
                ExtendedLineNo.Line:=SymbrioPurchaseInvLine.LineNo;
                ExtendedLineNo.MODIFY(TRUE);

                QtyInvoiced:=PurchaseLine.Quantity+QtyInvoiced;
              END;
            END;
          UNTIL PurchRcptLine.NEXT=0;
        END ELSE IF SymbrioPurchaseInvLine.AccountSuffixPurchType = '3' THEN BEGIN
              ///////////////////Create Indirect Line //////////////////////
          PurchaseLine.INIT;
          PurchaseLine."Document Type":=PurchaseLine."Document Type"::Invoice;
          IF SymbrioPurchaseInvHeader.InvoiceType='Credit' THEN
            PurchaseLine."Document Type":=PurchaseLine."Document Type"::"Credit Memo";
          PurchaseLine.VALIDATE("Document No.",PurchaseHeaderInv."No.");
          PurchaseLine.VALIDATE("Line No.",NextLineNo);
          PurchaseLine.INSERT(TRUE);

          PurchaseLine.SetDontCheckItemPurchBlocked(TRUE);  // <-- SYM107+108
          PurchaseLine.VALIDATE(Type,PurchaseLine.Type:: "G/L Account");
          PurchaseLine.VALIDATE("No.",SymbrioPurchaseInvLine.AccountRefBaseAccount);

          PurchaseLine.SuspendStatusCheck(TRUE);
          PurchaseLine.VALIDATE(Description, COPYSTR(SymbrioPurchaseInvLine.ArticleName, 1, MAXSTRLEN(PurchaseLine.Description)));
          PurchaseLine.VALIDATE("Description 2", COPYSTR(SymbrioPurchaseInvLine.ArticleName, MAXSTRLEN(PurchaseLine.Description)+1, MAXSTRLEN(PurchaseLine."Description 2")));

          EVALUATE(Quantity2,SymbrioPurchaseInvLine.Quantity);
          IF ChangeSigns THEN
            Quantity2 := -Quantity2;
          PurchaseLine.VALIDATE(Quantity,Quantity2);

          DirectUnitCost2 := CalcLineDirectUnitCost(PurchaseLine.Quantity,SymbrioPurchaseInvLine.Amount,SymbrioPurchaseInvLine.NetPrice,SymbrioPurchaseInvLine.GrossPrice);
          IF ChangeSigns THEN DirectUnitCost2 := -DirectUnitCost2; //SYM068
          PurchaseLine.VALIDATE("Direct Unit Cost",DirectUnitCost2);

          PurchaseLine.VALIDATE("Periodic Template Code",SymbrioPurchaseInvLine.AccountRefPeriodizing);
          PurchaseLine.VALIDATE("Periodic Starting Date",SymText2Date(SymbrioPurchaseInvLine.AccountRefPerioddatum));

          PurchaseLine.VALIDATE("VAT Bus. Posting Group",PurchaseHeaderInv."VAT Bus. Posting Group");
          PurchaseLine.VALIDATE("VAT Prod. Posting Group",PurchaseHeaderInv."VAT Prod. Posting Group");

          IF (PurchaseLine."Direct Unit Cost" = 0) AND (PurchaseLine.Quantity <> 0) AND EVALUATE(DirectUnitCost2,SymbrioPurchaseInvLine.Amount) THEN
            PurchaseLine.VALIDATE("Direct Unit Cost",DirectUnitCost2/PurchaseLine.Quantity);

          PurchaseLine.MODIFY(TRUE);
          //Spara undan till egen tabell, doc no, line no, typ, External line no

          ExtendedLineNo.INIT;
          IF SymbrioPurchaseInvHeader.InvoiceType = 'Credit' THEN
            ExtendedLineNo.VALIDATE("Document Type",ExtendedLineNo."Document Type"::"Credit Memo")
          ELSE
            ExtendedLineNo.VALIDATE("Document Type",ExtendedLineNo."Document Type"::Invoice);
          IF NOT ExtendedLineNo.GET(ExtendedLineNo."Document Type",PurchaseHeaderInv."No.",PurchaseLine."Line No.") THEN BEGIN
            ExtendedLineNo.VALIDATE("Document No.",PurchaseHeaderInv."No.");
            ExtendedLineNo.VALIDATE("Line No.",PurchaseLine."Line No.");
            ExtendedLineNo.INSERT(TRUE);
          END;
          EVALUATE(InvoiceLineID,SymbrioPurchaseInvLine.InvoiceLineID);
          ExtendedLineNo.VALIDATE("Extended LineNo.",InvoiceLineID);
          ExtendedLineNo.Line:=SymbrioPurchaseInvLine.LineNo;
          ExtendedLineNo.MODIFY(TRUE);

      //191105
          AccountRefProjectToDims(SymbrioPurchaseInvLine.AccountRefProject,NewStringDim1,Dim2Symbrio,Fieldno);
      //    NewStringDim1 := COPYSTR(SymbrioPurchaseInvLine.AccountRefProject, 1, 4);
      //    ProjectNo := SymbrioPurchaseInvLine.AccountRefProject;
      //    LengthOfProjNo := STRLEN(ProjectNo);
      //    NewStringDim2 := COPYSTR(ProjectNo, LengthOfProjNo -1, 2);
      //    EVALUATE(Dim2Symbrio,NewStringDim2);
      //    IF NOT GetSymbrioSetup THEN
      //      ERROR(Text017);
      //    Fieldno := GetDimensionIDCode(SymbrioSetup."Indirect Export Dim2");
      //191105
          PurchaseLine.VALIDATE("Shortcut Dimension 1 Code", NewStringDim1);
          PurchaseLine.ValidateShortcutDimCode(Fieldno,Dim2Symbrio);

          CreateIndirectDimcodePurchLine(PurchaseLine, SymbrioPurchaseInvLine.AccountRefRemAccount, SymbrioSetup."Indirect Dimcode Purchases");

          PurchaseLine.MODIFY(TRUE);
          PurchaseLine.SetDontCheckItemPurchBlocked(FALSE);
          PurchaseLine.SuspendStatusCheck(FALSE);
        END;
      END;
    END;

    LOCAL PROCEDURE CheckInvoiceLine@1100285026(PurchInvLine@1100285001 : Record 123;SymbrioPurchaseInvLine@1100285000 : Record 11127981;SymbrioPurchaseInvHeader@1100285006 : Record 11127980) : Boolean;
    VAR
      Qty@1100285002 : Decimal;
      Price@1100285003 : Decimal;
      Qty2@1100285005 : Decimal;
      Price2@1100285004 : Decimal;
      TradeItem@1100285008 : Record 11012317;
      PeriodicDate@1100285009 : Date;
      ContractCode@1100285013 : Code[10];
      LenghtContractCode@1100285012 : Integer;
      StartPos@1100285011 : Integer;
      ContractCodeFound@1100285010 : Boolean;
      ExtensionContract@1100285014 : Record 11012004;
      NewStringDim1@1100285015 : Text[30];
      DimensionSetEntry@1100285500 : Record 480;
      NewStringDim2@1100285501 : Text[30];
      LengthOfProjNo2@1100285505 : Integer;
      ProjectNo2@1100285503 : Text[30];
      Dim2Symbrio2@1100285502 : Code[20];
      Currency@1101285001 : Record 4;
      RoundingDirection@1101285000 : Text;
      FieldNo@1101285002 : Integer;
      IsCredit@1100285100 : Boolean;
    BEGIN
      IF NOT (SymbrioPurchaseInvLine.AccountSuffixPurchType IN ['1','3']) THEN
        EXIT(FALSE);

      IsCredit := (SymbrioPurchaseInvHeader.InvoiceType='Credit') AND (SymbrioPurchaseInvLine.Amount[1]='-'); //200130

      IF SymbrioPurchaseInvLine.AccountSuffixPurchType = '1' THEN BEGIN
        IF (PurchInvLine."Job No." <> '') THEN BEGIN
          IF (PurchInvLine."Job No." <> SymbrioPurchaseInvLine.AccountRefProject) THEN
            EXIT(FALSE);
          IF PurchInvLine.Element <> SymbrioPurchaseInvLine.AccountRefObject THEN
            EXIT(FALSE);
        END;

      //171018
      //>>181010
      //  IF (PurchInvLine."Job No." = '') AND (SymbrioPurchaseInvLine.AccountRefProject <> '') THEN
        IF (PurchInvLine."Job No." = '') AND (PurchInvLine."Service Order No." = '') AND (SymbrioPurchaseInvLine.AccountRefProject <> '') THEN
      //<<181010
              EXIT(FALSE);

        IF (PurchInvLine."Service Order No." <> '') THEN BEGIN
          IF (PurchInvLine."Service Order No." <> SymbrioPurchaseInvLine.AccountRefProject) THEN
            EXIT(FALSE);
         END;

        //IF PurchInvLine."Extension Contract" <> SymbrioPurchaseInvLine.AccountSuffixŽTA THEN
          //EXIT(FALSE);

        ContractCode := SymbrioPurchaseInvLine.AccountSuffixŽTA;
        LenghtContractCode := STRLEN(ContractCode);
        StartPos := 1;
        ContractCodeFound := FALSE;
        IF SymbrioPurchaseInvLine.AccountSuffixŽTA <> '' THEN BEGIN
          REPEAT
            ContractCode := COPYSTR(ContractCode, StartPos, LenghtContractCode-StartPos+1);
            StartPos := StartPos + 1;
            IF ExtensionContract.GET(SymbrioPurchaseInvLine.AccountRefProject,ContractCode) THEN
              ContractCodeFound := TRUE;
          UNTIL ((ContractCodeFound) OR (StartPos > LenghtContractCode));
          IF ContractCodeFound THEN BEGIN
            //PurchInvLine.VALIDATE("Extension Contract",ContractCode);
            IF PurchInvLine."Extension Contract" <> ContractCode THEN
              EXIT(FALSE);
          END ELSE
            ERROR(Text011,SymbrioPurchaseInvLine.AccountSuffixŽTA);
          //END ELSE BEGIN
          // If blank then just validate
        END ELSE BEGIN
          IF PurchInvLine."Extension Contract" <> SymbrioPurchaseInvLine.AccountSuffixŽTA THEN
            EXIT(FALSE);
        END;

      //>>200130, moved common code outside of 'IF SymbrioPurchaseInvLine.AccountSuffixPurchType'
      //  EVALUATE(Qty,SymbrioPurchaseInvLine.Quantity);
      //  IF PurchInvLine.Quantity <> Qty THEN
      //     EXIT(FALSE);

      //  Price := CalcLineDirectUnitCost(PurchInvLine.Quantity,SymbrioPurchaseInvLine.Amount,SymbrioPurchaseInvLine.NetPrice,SymbrioPurchaseInvLine.GrossPrice);
      // //>>181206
      //  IF NOT Currency.GET(SymbrioPurchaseInvHeader.Currency) THEN
      //    Currency.InitRoundingPrecision;
      // //>>190110
      // //  CASE Currency."Invoice Rounding Type" OF
      // //    Currency."Invoice Rounding Type"::Nearest: RoundingDirection:= '=';
      // //    Currency."Invoice Rounding Type"::Up: RoundingDirection:= '>';
      // //    Currency."Invoice Rounding Type"::Down: RoundingDirection:= '<';
      // //  END;
      //  RoundingDirection := Currency.InvoiceRoundingDirection;
      // //  Price := ROUND(Price, Currency."Unit-Amount Rounding Precision",RoundingDirection);
      // //<<190110
      // //<<181206
      //  IF Price = 0 THEN
      //    IF EVALUATE(Price,SymbrioPurchaseInvLine.LineSum) THEN
      //      Price := Price / Qty;
      //
      // //>>190110
      // //  IF PurchInvLine."Direct Unit Cost" <> Price  THEN
      //  IF ROUND(PurchInvLine."Direct Unit Cost" - Price, Currency."Unit-Amount Rounding Precision",RoundingDirection) <> 0  THEN
      // //<<190110
      //     EXIT(FALSE);
      //<<200130

        IF FindTradeItemInvoice(SymbrioPurchaseInvHeader,SymbrioPurchaseInvLine,TradeItem) THEN BEGIN
          IF SymbrioPurchaseInvLine.ArticleNo<>PurchInvLine."Trade Item" THEN
            EXIT(FALSE);
          IF PurchInvLine."Shortcut Dimension 2 Code" <> TradeItem."Cost Object" THEN
            EXIT(FALSE);
          END
        ELSE
          IF ((PurchInvLine."Item No."<>'') OR (PurchInvLine."Shortcut Dimension 2 Code" <> SymbrioPurchaseInvLine.AccountRefBaseAccount)) THEN
            EXIT(FALSE);

      END ELSE IF SymbrioPurchaseInvLine.AccountSuffixPurchType = '3' THEN BEGIN

        IF PurchInvLine."No." <> SymbrioPurchaseInvLine.AccountRefBaseAccount THEN
          EXIT(FALSE);

      //191105
        AccountRefProjectToDims(SymbrioPurchaseInvLine.AccountRefProject,NewStringDim1,Dim2Symbrio2,FieldNo);
        //  NewStringDim1 := COPYSTR(SymbrioPurchaseInvLine.AccountRefProject, 1, 4);
      //191105
        IF PurchInvLine."Shortcut Dimension 1 Code" <> NewStringDim1 THEN
          EXIT(FALSE);

      //191105
      //  ProjectNo2 := SymbrioPurchaseInvLine.AccountRefProject;
      //  LengthOfProjNo2 := STRLEN(ProjectNo2);
      //  NewStringDim2 := COPYSTR(ProjectNo2, LengthOfProjNo2 -1, 2);
      //  EVALUATE(Dim2Symbrio2,NewStringDim2);
      //191105
        GetSymbrioSetup;
        DimensionSetEntry.SETRANGE("Dimension Set ID", PurchInvLine."Dimension Set ID");
        DimensionSetEntry.SETRANGE("Dimension Code", SymbrioSetup."Indirect Export Dim2");
        IF DimensionSetEntry.FINDFIRST THEN
          IF DimensionSetEntry."Dimension Value Code" <> Dim2Symbrio2 THEN
            EXIT(FALSE);
        DimensionSetEntry.SETRANGE("Dimension Code", SymbrioSetup."Indirect Dimcode Purchases");
        IF DimensionSetEntry.FINDFIRST THEN
          IF DimensionSetEntry."Dimension Value Code" <> SymbrioPurchaseInvLine.AccountRefRemAccount THEN
            EXIT(FALSE);

      //>>200130, moved common code outside of 'IF SymbrioPurchaseInvLine.AccountSuffixPurchType'
      //  EVALUATE(Qty2,SymbrioPurchaseInvLine.Quantity);
      //  IF PurchInvLine.Quantity <> Qty2 THEN
      //    EXIT(FALSE);

      //  Price2 := CalcLineDirectUnitCost(PurchInvLine.Quantity,SymbrioPurchaseInvLine.Amount,SymbrioPurchaseInvLine.NetPrice,SymbrioPurchaseInvLine.GrossPrice);
      // //>>181206
      //  IF NOT Currency.GET(SymbrioPurchaseInvHeader.Currency) THEN
      //    Currency.InitRoundingPrecision;
      //  RoundingDirection := Currency.InvoiceRoundingDirection;
      //  Price2 := ROUND(Price2, Currency."Unit-Amount Rounding Precision",RoundingDirection);
      // //<<181206
      //  IF Price2 = 0 THEN
      //    IF EVALUATE(Price2,SymbrioPurchaseInvLine.LineSum) THEN
      //      Price2 := Price2 / Qty2;
      //  IF PurchInvLine."Direct Unit Cost" <> Price2  THEN
      //    EXIT(FALSE);
      //>>200130

        IF FindTradeItemInvoice(SymbrioPurchaseInvHeader,SymbrioPurchaseInvLine,TradeItem) THEN BEGIN
          IF SymbrioPurchaseInvLine.ArticleNo<>PurchInvLine."Trade Item" THEN
            EXIT(FALSE);
        END ELSE IF PurchInvLine."Item No."<>'' THEN
          EXIT(FALSE);

        IF PurchInvLine."Periodic Template Code"<> SymbrioPurchaseInvLine.AccountRefPeriodizing THEN
          EXIT(FALSE);

        IF PurchInvLine."Periodic Starting Date" <> SymText2Date(SymbrioPurchaseInvLine.AccountRefPerioddatum) THEN
          EXIT(FALSE);
      END;

      //>>200130
      IF NOT EVALUATE(Qty,SymbrioPurchaseInvLine.Quantity) THEN
        EXIT(FALSE);
      IF IsCredit AND (Qty<0) THEN Qty := -Qty;//200130
      IF PurchInvLine.Quantity <> Qty THEN
          EXIT(FALSE);

      IF NOT Currency.GET(SymbrioPurchaseInvHeader.Currency) THEN
        Currency.InitRoundingPrecision;
      RoundingDirection := Currency.InvoiceRoundingDirection;
      Price := CalcLineDirectUnitCost(PurchInvLine.Quantity,SymbrioPurchaseInvLine.Amount,SymbrioPurchaseInvLine.NetPrice,SymbrioPurchaseInvLine.GrossPrice);
      IF Price = 0 THEN
        IF EVALUATE(Price,SymbrioPurchaseInvLine.LineSum) THEN
          Price := Price / Qty;
      IF IsCredit AND (Price<0) THEN Price := -Price;//200130
      IF ROUND(PurchInvLine."Direct Unit Cost" - Price, Currency."Unit-Amount Rounding Precision",RoundingDirection) <> 0  THEN
          EXIT(FALSE);
      //<<200130

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE NewCreditMemo@1100285018(SymbrioPurchaseInvHeader@1100285000 : Record 11127980);
    VAR
      PurchaseHeaderInv@1100285001 : Record 38;
      TotalSum@1100285002 : Decimal;
      InvoiceDate@1100285003 : Date;
      SymbrioPurchaseInvLine@1100285004 : Record 11127981;
      PurchaseHeaderOrder@1100285005 : Record 38;
      PurchaseLineOrder@1100285006 : Record 39;
      LineNo@1100285007 : Integer;
      Quantity@1100285008 : Decimal;
      PurchRcptLine@1100285009 : Record 121;
      LineNo2@1100285010 : Integer;
      LineCreated@1100285011 : Boolean;
      Quantity4@1100285013 : Decimal;
      DirectUnitCost4@1100285012 : Decimal;
      LinesCreated@1100285014 : Boolean;
      TotalQtyReceipt@1100285015 : Decimal;
      Warehouse@1100285016 : Boolean;
      Warehouse2@1100285017 : Boolean;
      PurchCrMemoHdr@1100285018 : Record 124;
      VATPostingSetup@1100285019 : Record 325;
      PurchSetup@1100285021 : Record 312;
      Currency@1100285020 : Record 4;
      PurchaseHeaderInvDocNo@1100409000 : Code[20];
      SymbrioPurchaseInvImages@1100285303 : Record 11127990;
      InitialDocumentProperties@1100285302 : Record 11012746;
      DocumentProperties@1100285301 : Record 11012746;
      RecRef@1100285300 : RecordRef;
      RemTools@1100285102 : Codeunit 11128515;
      RemittanceAccount@1100285101 : Record 11128506;
      Vendor@1100285100 : Record 23;
      SymbrioPurchaseInvImagesTEMP@1000000000 : TEMPORARY Record 11127990;
      SymbrioPurchaseInvImagesname@1000000001 : Text;
      PurchCommentLine@1100285103 : Record 43;
      i@1100285104 : Integer;
      newDocumentDate@1100285105 : Date;
      VendorExt@1000000002 : Record 11128090;
    BEGIN
      //check if Credit memo exists
      PurchaseHeaderInvDocNo := '';

      PurchaseHeaderInv.SETRANGE("Document Type",PurchaseHeaderInv."Document Type":: "Credit Memo");
      PurchaseHeaderInv.SETRANGE("Ext. Document ID",SymbrioPurchaseInvHeader.InvoiceHeadID);
      IF PurchaseHeaderInv.FINDFIRST THEN BEGIN
        PurchaseHeaderInvDocNo := PurchaseHeaderInv."No.";
        PurchaseLineOrder.SETRANGE("Document Type", PurchaseHeaderInv."Document Type");
        PurchaseLineOrder.SETRANGE("Document No.",PurchaseHeaderInv."No.");
        IF PurchaseLineOrder.FINDFIRST THEN
          ERROR(Text015,SymbrioPurchaseInvHeader.InvoiceHeadID);
      END;

      //>> ORANGO.PR 190514
      IF NOT InvHasPayInfo(SymbrioPurchaseInvHeader) THEN
        EXIT;
      //<< ORANGO.PR 190514

      PurchaseLineOrder.SETRANGE("Document Type");
      PurchaseLineOrder.SETRANGE("Document No.");

      //Create new Credit memo (create header)
      IF (PurchaseHeaderInvDocNo = '' ) OR
         (NOT PurchaseHeaderInv.GET(PurchaseHeaderInv."Document Type"::"Credit Memo",PurchaseHeaderInvDocNo)) THEN BEGIN
        PurchaseHeaderInv.INIT;
        PurchaseHeaderInv.VALIDATE("Document Type",PurchaseHeaderInv."Document Type"::"Credit Memo");
        PurchaseHeaderInv."No." := '';
        PurchaseHeaderInv.INSERT(TRUE);
      END;

      PurchaseHeaderInv.VALIDATE("Ext. Document ID",SymbrioPurchaseInvHeader.InvoiceHeadID);
      PurchaseHeaderInv.VALIDATE("Buy-from Vendor No.",SymbrioPurchaseInvHeader.SupplierIdentification);
      PurchaseHeaderInv.VALIDATE("Vendor Cr. Memo No.",COPYSTR(SymbrioPurchaseInvHeader.SupplierInvoiceNo,1,MAXSTRLEN(SymbrioPurchaseInvHeader.SupplierInvoiceNo)));

      PurchaseHeaderInv.VALIDATE("Reference (Vendor)",COPYSTR(SymbrioPurchaseInvHeader.SupplierReference,1,MAXSTRLEN(PurchaseHeaderInv."Reference (Vendor)")));

      PurchCommentLine.INIT;
      PurchCommentLine."Document Type" := PurchaseHeaderInv."Document Type";
      PurchCommentLine."No." := PurchaseHeaderInv."No.";
      PurchCommentLine."Document Line No." := 0;
      PurchCommentLine.Date := PurchaseHeaderInv."Document Date";
      PurchCommentLine.Code := 'SYMBRIO';
      PurchCommentLine."Created by" := USERID;
      PurchCommentLine.SETRANGE("Document Type", PurchaseHeaderInv."Document Type");
      PurchCommentLine.SETRANGE("No.", PurchaseHeaderInv."No.");
      PurchCommentLine.SETRANGE("Document Line No.", 0);
      IF PurchCommentLine.FINDLAST THEN;
      IF SymbrioPurchaseInvHeader.SupplierOrderNo <> '' THEN BEGIN
        PurchCommentLine."Line No." += 10000;
        PurchCommentLine.Comment := PurchaseHeaderInv.FIELDCAPTION("Vendor Order No.") + ' ' + SymbrioPurchaseInvHeader.SupplierOrderNo;
        PurchCommentLine."Line Break" := (SymbrioPurchaseInvHeader.SupplierNote <> '' ) OR
                                         (SymbrioPurchaseInvHeader.DeliveryAddressNoteText<>'');
        PurchCommentLine.INSERT;
      END;

      IF SymbrioPurchaseInvHeader.SupplierNote <> '' THEN BEGIN
        //PurchCommentLine.KEYS "Document Type","No.","Document Line No.","Line No."
        PurchCommentLine."Line No." += 10000;
        PurchCommentLine.Comment := Text11128000;
        PurchCommentLine."Line Break" := TRUE;
        PurchCommentLine.INSERT;
        PurchCommentLine."Line No." += 10000;
        PurchCommentLine.Comment := COPYSTR(SymbrioPurchaseInvHeader.SupplierNote,1,MAXSTRLEN(PurchCommentLine.Comment));
        PurchCommentLine."Line Break" := (STRLEN(SymbrioPurchaseInvHeader.SupplierNote) > MAXSTRLEN(PurchCommentLine.Comment)) OR
                                         (SymbrioPurchaseInvHeader.DeliveryAddressNoteText<>'');
        PurchCommentLine.INSERT;

        //len 81-160, 161-240, 241-250
        FOR i:= 1 TO 3 DO
          IF STRLEN(SymbrioPurchaseInvHeader.SupplierNote) > (i*MAXSTRLEN(PurchCommentLine.Comment)) THEN BEGIN
            PurchCommentLine."Line No." += 10000;
            PurchCommentLine.Comment := COPYSTR(SymbrioPurchaseInvHeader.SupplierNote,(i * MAXSTRLEN(PurchCommentLine.Comment))+1,MAXSTRLEN(PurchCommentLine.Comment));
            PurchCommentLine."Line Break" := (STRLEN(SymbrioPurchaseInvHeader.SupplierNote) > ((i+1) * MAXSTRLEN(PurchCommentLine.Comment))) OR
              (SymbrioPurchaseInvHeader.DeliveryAddressNoteText<>'');
            PurchCommentLine.INSERT;
          END
          ELSE
            i := 3;  //force exit from FOR
      END;

      IF SymbrioPurchaseInvHeader.DeliveryAddressNoteText <> '' THEN BEGIN
        PurchCommentLine."Line No." += 10000;
        PurchCommentLine.Comment := '';//'DeliveryAddressNoteText';
        PurchCommentLine."Line Break" := TRUE;
        PurchCommentLine.INSERT;
        PurchCommentLine."Line No." += 10000;
        PurchCommentLine.Comment := COPYSTR(SymbrioPurchaseInvHeader.DeliveryAddressNoteText,1,MAXSTRLEN(PurchCommentLine.Comment));
        PurchCommentLine."Line Break" := STRLEN(SymbrioPurchaseInvHeader.SupplierNote) > MAXSTRLEN(PurchCommentLine.Comment);
        PurchCommentLine.INSERT;
      END;

      IF SymbrioPurchaseInvHeader.DeliveryAddress <> '' THEN
        PurchaseHeaderInv."Ship-to Address" := SymbrioPurchaseInvHeader.DeliveryAddress;
      IF SymbrioPurchaseInvHeader.DeliveryPostalCode <> '' THEN
        PurchaseHeaderInv."Ship-to Post Code" := SymbrioPurchaseInvHeader.DeliveryPostalCode;
      IF SymbrioPurchaseInvHeader.DeliveryCity <> '' THEN
        PurchaseHeaderInv."Ship-to City" := SymbrioPurchaseInvHeader.DeliveryCity;
      IF SymbrioPurchaseInvHeader.DeliveryCountry <> '' THEN
        PurchaseHeaderInv."Ship-to Country/Region Code" := SymbrioPurchaseInvHeader.DeliveryCountry;

      GetGLSetup;
      IF GLSetup."Norwegian Localization Active" THEN BEGIN
        CLEAR(RemittanceAccount);
        IF VendorExt.GET(PurchaseHeaderInv."Buy-from Vendor No.") THEN
          IF RemittanceAccount.GET(VendorExt."Remittance Account Code") THEN ;
        IF (NOT CheckIfRefIsNumeric(SymbrioPurchaseInvHeader.PaymentReference)) OR (RemittanceAccount."No KID") THEN
          PurchaseHeaderInv."Payment Reference" := COPYSTR(SymbrioPurchaseInvHeader.PaymentReference, 1, MAXSTRLEN(PurchaseHeaderInv."Payment Reference"))
        ELSE
        IF (RemTools.CheckKID(SymbrioPurchaseInvHeader.PaymentReference) <> '') THEN
          PurchaseHeaderInv."Payment Reference" := COPYSTR(SymbrioPurchaseInvHeader.PaymentReference, 1, MAXSTRLEN(PurchaseHeaderInv."Payment Reference"))
        ELSE
          PurchaseHeaderInv.KID := COPYSTR(SymbrioPurchaseInvHeader.PaymentReference, 1, MAXSTRLEN(PurchaseHeaderInv.KID));
      END ELSE BEGIN
        PurchaseHeaderInv."Payment Reference" := COPYSTR(SymbrioPurchaseInvHeader.PaymentReference, 1, MAXSTRLEN(PurchaseHeaderInv."Payment Reference"))
      END;

      GetGLSetup;
      IF (SymbrioPurchaseInvHeader.Currency <> GLSetup."LCY Code") THEN
        PurchaseHeaderInv.VALIDATE("Currency Code",SymbrioPurchaseInvHeader.Currency);
      IF PurchaseHeaderInv."Currency Code"<>SymbrioPurchaseInvHeader.Currency THEN
        PurchaseHeaderInv.VALIDATE("Currency Code",GLSetup."LCY Code");

      PurchaseHeaderInv."Export to Symbrio" := TRUE;     //SYM037
      PurchaseHeaderInv."Export to Symbrio Type" := PurchaseHeaderInv."Export to Symbrio Type"::Prelimary;

      PurchaseHeaderInv.MODIFY(TRUE);

      EVALUATE(TotalSum,SymbrioPurchaseInvHeader.TotalSum);

      //Added Rounding on Amount incl. VAT field
      PurchSetup.GET;
      IF PurchSetup."Invoice Rounding" THEN BEGIN

        IF PurchaseHeaderInv."Currency Code" = '' THEN
          Currency.InitRoundingPrecision
        ELSE BEGIN
          Currency.GET(PurchaseHeaderInv."Currency Code");
          Currency.TESTFIELD("Amount Rounding Precision");
        END;
      TotalSum :=
        ROUND(TotalSum,Currency."Invoice Rounding Precision",Currency.InvoiceRoundingDirection);
      END;
      IF TotalSum < 0 THEN
        TotalSum:=TotalSum*(-1);
      PurchaseHeaderInv.VALIDATE("Amount incl. VAT",TotalSum);

      VATPostingSetup.SETRANGE("VAT Identifier",SymbrioPurchaseInvHeader.VATCode);
      IF VATPostingSetup.FINDFIRST THEN BEGIN
        PurchaseHeaderInv.VALIDATE("VAT Prod. Posting Group",VATPostingSetup."VAT Prod. Posting Group");
        PurchaseHeaderInv.VALIDATE("VAT Bus. Posting Group",VATPostingSetup."VAT Bus. Posting Group");
      END;

      PurchaseHeaderInv.VALIDATE("Your Reference", COPYSTR(SymbrioPurchaseInvHeader.PurchaserReference, 1, MAXSTRLEN(PurchaseHeaderInv."Your Reference")));

      //>>180126 RFC244
      //PurchaseHeaderInv.VALIDATE("Posting Date",TODAY);
      PurchaseHeaderInv.VALIDATE("Posting Date", GetAllowedPostingDate(SymText2Date(SymbrioPurchaseInvHeader.RegisteredDate),SymText2Date(SymbrioPurchaseInvHeader.InvoiceDate),TODAY,FALSE));
      //<<180126

      //PurchaseHeaderInv.VALIDATE("Document Date", SymText2Date(SymbrioPurchaseInvHeader.InvoiceDate));
      CASE SymbrioSetup."Document Date from" OF
        SymbrioSetup."Document Date from"::Today:                 newDocumentDate := TODAY;
        SymbrioSetup."Document Date from"::WorkingDate:           newDocumentDate := WORKDATE;
        SymbrioSetup."Document Date from"::SymbrioRegisteredDate: newDocumentDate := SymText2Date(SymbrioPurchaseInvHeader.RegisteredDate);
        SymbrioSetup."Document Date from"::SymbrioInvoiceDate:    newDocumentDate := SymText2Date(SymbrioPurchaseInvHeader.InvoiceDate);
        ELSE
          newDocumentDate := SymText2Date(SymbrioPurchaseInvHeader.InvoiceDate);
      END;
      PurchaseHeaderInv.VALIDATE("Document Date",newDocumentDate);
      //<<180126

      IF SymbrioPurchaseInvHeader.InvoiceDueDate<>'' THEN
        PurchaseHeaderInv.VALIDATE("Due Date",SymText2Date(SymbrioPurchaseInvHeader.InvoiceDueDate));

      IF SymbrioPurchaseInvHeader.PurchaserDivisionCode <> '' THEN
        PurchaseHeaderInv.VALIDATE("Shortcut Dimension 1 Code",SymbrioPurchaseInvHeader.PurchaserDivisionCode);

      PurchaseHeaderInv.MODIFY(TRUE);

      //attach images
      SymbrioPurchaseInvImagesTEMP.RESET;
      SymbrioPurchaseInvImagesTEMP.DELETEALL;
      SymbrioPurchaseInvImages.RESET;
      SymbrioPurchaseInvImages.SETRANGE(InvoiceHeadID,        SymbrioPurchaseInvHeader.InvoiceHeadID);
      SymbrioPurchaseInvImages.SETRANGE(OrderHeadID,          SymbrioPurchaseInvHeader.OrderHeadID);
      SymbrioPurchaseInvImages.SETRANGE("DateTime Received",   SymbrioPurchaseInvHeader."DateTime Received");
      SymbrioPurchaseInvImages.SETRANGE("EntryNo in BatchRead", SymbrioPurchaseInvHeader."EntryNo in BatchRead");
      IF SymbrioPurchaseInvImages.FINDSET THEN
      REPEAT
        InitialDocumentProperties.INIT;
        InitialDocumentProperties."External Document" := TRUE;
        InitialDocumentProperties."Document Type" := 'SYM-INV';
        InitialDocumentProperties.Reference := SymbrioPurchaseInvHeader.InvoiceHeadID;
        InitialDocumentProperties.Subject := SymbrioPurchaseInvHeader.SupplierInvoiceNo;
        DocumentProperties.INIT;
        RecRef.GETTABLE(PurchaseHeaderInv);
        IF RegisterExternalDocument(InitialDocumentProperties,DocumentProperties, SymbrioPurchaseInvImages.name, RecRef) THEN
          //SymbrioPurchaseInvImages.DELETE(TRUE);
        BEGIN
          SymbrioPurchaseInvImagesTEMP.INIT;
          SymbrioPurchaseInvImagesTEMP.InvoiceHeadID   := SymbrioPurchaseInvImages.InvoiceHeadID;
          SymbrioPurchaseInvImagesTEMP.OrderHeadID     := SymbrioPurchaseInvImages.OrderHeadID;
          SymbrioPurchaseInvImagesTEMP."DateTime Received"    := SymbrioPurchaseInvImages."DateTime Received";
          SymbrioPurchaseInvImagesTEMP."EntryNo in BatchRead" := SymbrioPurchaseInvImages."EntryNo in BatchRead";
          SymbrioPurchaseInvImagesTEMP.imageIndex      := SymbrioPurchaseInvImages.imageIndex;
          SymbrioPurchaseInvImagesTEMP.name            := SymbrioPurchaseInvImages.name;
          SymbrioPurchaseInvImagesTEMP.INSERT;
          SymbrioPurchaseInvImages.DELETE(FALSE);
        END;
      UNTIL SymbrioPurchaseInvImages.NEXT=0;

      //No OrderheadID - create lines
      SymbrioPurchaseInvLine.SETRANGE(InvoiceHeadID,SymbrioPurchaseInvHeader.InvoiceHeadID);
      SymbrioPurchaseInvLine.SETRANGE(OrderHeadID,SymbrioPurchaseInvHeader.OrderHeadID);
      SymbrioPurchaseInvLine.SETRANGE("Source Filename", SymbrioPurchaseInvHeader."Source Filename"); //150610
      LineCreated:=FALSE;
      Warehouse:=FALSE;

      IF SymbrioPurchaseInvLine.FINDSET THEN BEGIN
        REPEAT
          IF ((SymbrioPurchaseInvLine.AccountSuffixPurchType = '1') OR (SymbrioPurchaseInvLine.AccountSuffixPurchType = '3'))  THEN BEGIN
            CreateInvoiceLine(SymbrioPurchaseInvHeader,PurchaseHeaderInv,SymbrioPurchaseInvLine);  //Create invocie line
            LineCreated:=TRUE;
          END ELSE IF SymbrioPurchaseInvLine.AccountSuffixPurchType = '2' THEN BEGIN
            SymbrioPurchaseInvHeader.VALIDATE("Error Message",'Warehouse credit-invoice');
            SymbrioPurchaseInvHeader.MODIFY(TRUE);
            Warehouse:=TRUE;
          END;
        UNTIL SymbrioPurchaseInvLine.NEXT=0;

        ApplyRounding(PurchaseHeaderInv,SymbrioPurchaseInvHeader); //>>140221 ENHSYM001

        IF (LineCreated=TRUE) AND (Warehouse=FALSE) THEN BEGIN
          //post invoice
          PurchaseHeaderInv.SendToPosting(CODEUNIT::"Purch.-Post");
          SymbrioPurchaseInvHeader.DELETE(TRUE); // May not be deleted here but for now it is.
          IF NOT PurchCrMemoHdr.GET(PurchaseHeaderInv."No.") THEN
            ERROR(Text016,PurchaseHeaderInv."No.");
          PurchCrMemoHdr."Export to Symbrio":=TRUE;
          PurchCrMemoHdr."Export to Symbrio Type":=PurchCrMemoHdr."Export to Symbrio Type"::Prelimary;
          PurchCrMemoHdr.MODIFY(TRUE);

        END;

      END;

      GetSymbrioSetup;
      SymbrioPurchaseInvImagesTEMP.RESET;
      IF SymbrioPurchaseInvImagesTEMP.FINDSET THEN
      REPEAT
        SymbrioPurchaseInvImagesname := SymbrioSetup."Path Invoice Import Img Buffer"+'\'+SymbrioPurchaseInvImagesTEMP.name;
        IF EXISTS(SymbrioPurchaseInvImagesname) THEN
          ERASE(SymbrioPurchaseInvImagesname);
        SymbrioPurchaseInvImagesTEMP.DELETE;
      UNTIL SymbrioPurchaseInvImagesTEMP.NEXT=0;
    END;

    LOCAL PROCEDURE GetNodeText2@1100285515(Node2@1100285300 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";_nodeName@1000000000 : Text[30]) : Text[250];
    VAR
      _node@1000000002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      _node := Node2.SelectSingleNode(_nodeName);

      IF (ISNULL(_node)) THEN
        EXIT('');

      //>>140331 SYM015
      //EXIT(_node.InnerText);
      EXIT(COPYSTR(_node.InnerText,1,250));
      //<<140331 SYM015
    END;

    PROCEDURE ExportVendorLedgerEntries2@1100285501();
    VAR
      Element2@1100285501 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      DOM2@1100285502 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      ProcInstr2@1100285509 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlProcessingInstruction";
      Node2@1100285500 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      CompInfo@1100285300 : Record 79;
      _vendLedgEntry@1000000000 : Record 25;
      _f@1000000001 : File;
      _filename@1100409000 : Text[250];
    BEGIN
      //>> SYM965
      IF NOT GetSymbrioSetup THEN
        EXIT;
      SymbrioSetup.TESTFIELD(SymbrioSetup."Path Invoice data");
      CompInfo.GET();

      _vendLedgEntry.RESET();
      _vendLedgEntry.LOCKTABLE();
      _vendLedgEntry.SETCURRENTKEY(Open);
      _vendLedgEntry.SETRANGE(Open,FALSE);
      _vendLedgEntry.SETRANGE("Symbrio Export Date",0D);
      _vendLedgEntry.SETRANGE("Document Type",_vendLedgEntry."Document Type"::Invoice,_vendLedgEntry."Document Type"::"Credit Memo");
      IF _vendLedgEntry.FINDSET() THEN BEGIN

        REPEAT
        //>>130925 ITERO.DJ
          CLEAR(DOM2);
          //CREATE(DOM,FALSE,TRUE);
          DOM2 := DOM2.XmlDocument;
          ProcInstr2 := DOM2.CreateProcessingInstruction('xml','version="1.0" encoding="UTF-8"');
          DOM2.AppendChild(ProcInstr2);
          //Element := DOM.createElement('InvoiceReceiptInterchange');
          Element2 := DOM2.CreateElement('SymbrioInvoiceReceipt');
          Node2 := DOM2.AppendChild(Element2);

          Element2 := DOM2.CreateElement('Routing');
          Node2 := Node2.AppendChild(Element2);
          //Element.setAttribute('DocumentName','InvoiceReceiptInterchange');
          Element2.SetAttribute('DocumentName','SymbrioInvoiceReceipt');
          Element2.SetAttribute('SourceValue',SymbrioSetup.SourceValue);
          Element2.SetAttribute('SourceType',SymbrioSetup.SourceType);
          Element2.SetAttribute('DestinationValue',SymbrioSetup.DestinationValue);
          Element2.SetAttribute('DestinationType',SymbrioSetup.DestinationType);
          Node2 := Node2.ParentNode;
          //<<ITERO.DJ
          Element2 := DOM2.CreateElement('InvoiceReceipt');
          Node2 := Node2.AppendChild(Element2);

          ElementData2(DOM2,Node2,'PurchaserCompanyCode',CompInfo."Registration No.");          // 130906
          ElementData2(DOM2,Node2,'SupplierIdentification',_vendLedgEntry."Vendor No.");        // 130908
          ElementData2(DOM2,Node2,'InvoiceNo',_vendLedgEntry."External Document No.");         // 130906
          ElementData2(DOM2,Node2,'VerificationNo',_vendLedgEntry."Document No.");
          ElementData2(DOM2,Node2,'ReceiptType','1');
          ElementData2(DOM2,Node2,'BookingType','4');
          //ElementData(Node,'Message','');
          ElementData2(DOM2,Node2,'ProcessedDate',FORMAT(CURRENTDATETIME,0,9));
          ElementData2(DOM2,Node2,'VerificationDate',''); //FORMAT(_vendLedgEntry."Document Date",0,9));
          ElementData2(DOM2,Node2,'PayDate',''); //FORMAT(_vendLedgEntry."Closed at Date",0,9));
          ElementData2(DOM2,Node2,'AccountingDate',''); //FORMAT(_vendLedgEntry."Posting Date",0,9));
          ElementData2(DOM2,Node2,'ExchangeRate','1');
          Node2 := Node2.ParentNode;
          //>>130925 ITERO.DJ
          _filename := SymbrioSetup."Path Invoice data" + 'INV_PAY'+ CONVERTSTR(_vendLedgEntry."Document No.", ':', '_') +
           FORMAT(WORKDATE,0,'<year4><month,2><day,2>')      // 130909
            +FORMAT(TIME,0,'<hours24><filler character,0><minutes,2><seconds,2>') +'.xml';
          DOM2.Save(_filename);
          //<<ITERO.DJ
        UNTIL _vendLedgEntry.NEXT() = 0;

        _vendLedgEntry.MODIFYALL("Symbrio Export Date",TODAY,TRUE);
      END;
      //<<
    END;

    LOCAL PROCEDURE ElementData2@1100285512(DOM2@1000000002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";Node2@1100285300 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";_name@1000000000 : Text[250];_data@1000000001 : Text[250]) : Text[250];
    VAR
      Element2@1100285501 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      xmlTextNode@1100285510 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlText";
    BEGIN
      Element2 := DOM2.CreateElement(_name);
      xmlTextNode := DOM2.CreateTextNode(_data);

      Element2.AppendChild(xmlTextNode);
      Node2.AppendChild(Element2);

      //Element := DOM.createElement(_name);
      //Element.text(_data);
      //Node.appendChild(Element);

      //xmlElement := xmldoc.CreateElement('SupplierNo');
      //xmlTextNode := xmldoc.CreateTextNode(VendorNo);
      //xmlElement.AppendChild(xmlTextNode);
      //xmlIntImportReceipt.AppendChild(xmlElement);
    END;

    LOCAL PROCEDURE CreateGenJnlLineFromPurchInvLine@1100285503(AccSuffixPurchType@1100285502 : Code[10];VAR PurchInvLine@1100285503 : Record 123;PurchInvHeader@1000000000 : Record 122;VAR SymbrioPurchaseInvHeader@1100285501 : Record 11127980;VAR GenJournalLine@1100285500 : Record 81;VAR LineNo@1100285504 : Integer);
    VAR
      JobsSetup@1100285505 : Record 315;
      ExtensionContract@1100285511 : Record 11012004;
      ETIMVendorLocalMgt@1100285513 : Record 11012313;
      Job@1100285512 : Record 11072003;
      ServiceOrder@1000 : Record 11012823;
      ContractCode@1100285507 : Code[10];
      LenghtContractCode@1100285508 : Integer;
      StartPos@1100285509 : Integer;
      ContractCodeFound@1100285510 : Boolean;
      Quantity@1100285515 : Decimal;
      Amount@1100285538 : Decimal;
      InvoiceLineIDExists@1100285537 : Boolean;
      Amount2@1100285536 : Decimal;
      TradeItem@1100285535 : Record 11012317;
      LineNo2@1100285532 : Integer;
      VendorLedgerEntry@1100285531 : Record 25;
      PeriodicDate@1100285530 : Date;
      PeriodicDate2@1100285529 : Date;
      Quantity2@1100285523 : Decimal;
      NewStringDim1@1100285522 : Text[30];
      LengthOfProjNo@1100285521 : Integer;
      NewStringDim2@1100285520 : Text[30];
      ProjectNo@1100285519 : Text[30];
      Dim2Symbrio@1100285518 : Code[20];
      Fieldno@1100285516 : Integer;
      DimensionSetEntry@1100285506 : Record 480;
      PurchInvLineDimSetID@1100285514 : Integer;
      GeneralPostingSetup@1100285100 : Record 252;
    BEGIN
      //No changes allowed
      IF AccSuffixPurchType = '2' THEN EXIT;

      GetGLSetup;  //RFC144
      JobsSetup.GET;
      GetSymbrioSetup;

      GenJournalLine.INIT;
      GenJournalLine.VALIDATE("Journal Template Name",JobsSetup."Adjustment Journal Template");
      GenJournalLine.VALIDATE("Journal Batch Name",JobsSetup."Adjustment Journal Batch");
      LineNo:=LineNo+10000;
      GenJournalLine.VALIDATE("Line No.",LineNo);
      GenJournalLine.INSERT(TRUE);
      GenJournalLine.VALIDATE("Posting Date",TODAY);
      GenJournalLine.VALIDATE("Document No.",COPYSTR(SymbrioPurchaseInvHeader.VerificationNo,1,MAXSTRLEN(GenJournalLine."Document No.")));

      CASE AccSuffixPurchType OF
        '1' : BEGIN
          //Insert first line (posted inv line - )
          GenJournalLine.VALIDATE("Job No.", PurchInvLine."Job No.");
          GenJournalLine.VALIDATE("Service Order No.", PurchInvLine."Service Order No."); // ITERO.MH 150818
          GenJournalLine.VALIDATE(Element,PurchInvLine.Element);
          IF PurchInvLine."Extension Contract"<>'' THEN
            GenJournalLine.VALIDATE("Extension Contract",PurchInvLine."Extension Contract");
          GenJournalLine.VALIDATE("Vendor (Trade Item)",PurchInvLine."Vendor (Trade Item)");
          GenJournalLine.MODIFY(TRUE);
          //GenJournalLine.VALIDATE("Item No.",PurchInvLine."Item No."); Item no is filled in from trade item
          GenJournalLine.VALIDATE("Trade Item",PurchInvLine."Trade Item");
          GenJournalLine.VALIDATE("Shortcut Dimension 1 Code",PurchInvLine."Shortcut Dimension 1 Code");
          GenJournalLine.VALIDATE("Shortcut Dimension 2 Code",PurchInvLine."Shortcut Dimension 2 Code");
          GenJournalLine.VALIDATE(Quantity, -PurchInvLine.Quantity); //negativ, kolla om detta funkar s†
          GenJournalLine.VALIDATE(Amount, -(PurchInvLine."Direct Unit Cost"*PurchInvLine.Quantity));     //samma
          //>>RFC144
          IF (NOT (PurchInvHeader."Currency Code" IN ['',GLSetup."LCY Code"])) AND (PurchInvHeader."Currency Factor"<>0) THEN
            GenJournalLine.VALIDATE(Amount,GenJournalLine.Amount/PurchInvHeader."Currency Factor");
          //<<RFC144
          //>> 140212 SYM990 Added description
          //>> ITERO.MH SYM060 150415  IME425
          //IF (GenJournalLine."Account No." = '') THEN GenJournalLine.VALIDATE("Account No.", PurchInvLine."No.");
          IF (GenJournalLine."Account No." = '') THEN
            GenJournalLine.VALIDATE("Account No.", GetAccountNoFromPurchLine(PurchInvLine));
          //<< ITERO.MH SYM060 150415
          //>> 150421 SYM076
          GenJournalLine."Shortcut Dimension 1 Code" := PurchInvLine."Shortcut Dimension 1 Code";
          GenJournalLine."Shortcut Dimension 2 Code" := PurchInvLine."Shortcut Dimension 2 Code";
          GenJournalLine."Dimension Set ID" := PurchInvLine."Dimension Set ID"; // SYM076 150421

        //>>RAD035
          CreateIndirectDimcodeGJLineFrPL(GenJournalLine, SymbrioSetup."Project Dimcode Purchases", PurchInvLine."Dimension Set ID");
        //<<RAD035

        END; //type=1

        '3': BEGIN
          //>> 131210 Added vendor (trade item)
          GenJournalLine.VALIDATE("Vendor (Trade Item)",PurchInvLine."Vendor (Trade Item)");
          //<<
          GenJournalLine.VALIDATE("Item No.",PurchInvLine."Item No.");
          GenJournalLine.VALIDATE("Trade Item",PurchInvLine."Trade Item");

        //>>SYM017
          GenJournalLine."System-Created Entry" := TRUE;
          GenJournalLine.VALIDATE("Job No.", PurchInvLine."Job No.");
          GenJournalLine.VALIDATE("Service Order No.", PurchInvLine."Service Order No."); // ITERO.MH 150818
          GenJournalLine."System-Created Entry" := TRUE;  //cleared by VALIDATE("Job No."
          GenJournalLine.VALIDATE(Element,PurchInvLine.Element);
          IF PurchInvLine."Extension Contract"<>'' THEN
            GenJournalLine.VALIDATE("Extension Contract",PurchInvLine."Extension Contract");
          IF (PurchInvLine."Shortcut Dimension 2 Code" <> '') AND (GenJournalLine."Shortcut Dimension 2 Code" = '') THEN
            GenJournalLine.VALIDATE("Shortcut Dimension 2 Code",PurchInvLine."Shortcut Dimension 2 Code");
        //<<SYM017
        //>>190301, #23173
        //  GenJournalLine.VALIDATE("Account No.",PurchInvLine."No.");
          IF (GenJournalLine."Account No." = '') THEN
            GenJournalLine.VALIDATE("Account No.", GetAccountNoFromPurchLine(PurchInvLine));
        //<<190301, #23173
          //>> 131122 ITERO.SB
          GenJournalLine.VALIDATE(Quantity, -PurchInvLine.Quantity);
          GenJournalLine.VALIDATE(Amount, -(PurchInvLine."Direct Unit Cost"*PurchInvLine.Quantity));
          //>>RFC144
          IF (NOT (PurchInvHeader."Currency Code" IN ['',GLSetup."LCY Code"])) AND (PurchInvHeader."Currency Factor" <> 0) THEN
            GenJournalLine.VALIDATE(Amount,GenJournalLine.Amount/PurchInvHeader."Currency Factor");
          //<<RFC144
          //<<
          GenJournalLine.VALIDATE("Shortcut Dimension 1 Code",PurchInvLine."Shortcut Dimension 1 Code");
          //>>140121 SYM979
          Fieldno := GetDimensionIDCode(SymbrioSetup."Indirect Export Dim2");
          IF Fieldno = 0 THEN
            ERROR(Text018);

          PurchInvLineDimSetID := PurchInvLine."Dimension Set ID";
          DimensionSetEntry.RESET;
          IF DimensionSetEntry.GET(PurchInvLineDimSetID,SymbrioSetup."Indirect Export Dim2") THEN
            GenJournalLine.ValidateShortcutDimCode(Fieldno,DimensionSetEntry."Dimension Value Code");
        //<<140121 SYM979

          CreateIndirectDimcodeGJLineFrPL(GenJournalLine, SymbrioSetup."Indirect Dimcode Purchases", PurchInvLineDimSetID);

          GenJournalLine.VALIDATE("Periodic Template Code",PurchInvLine."Periodic Template Code");
          GenJournalLine.VALIDATE("Periodic Starting Date",PurchInvLine."Periodic Starting Date");
        END;  //type=3
      END; //case

      //>> 140212 SYM990 Added description
      GenJournalLine.VALIDATE(Description,PurchInvLine.Description);
      //<<

      //>>190424 RFC1208
      GenJournalLine.VALIDATE("Source Type", GenJournalLine."Source Type"::Vendor);
      GenJournalLine.VALIDATE("Source No.", PurchInvLine."Buy-from Vendor No.");
      //<<190424

      GenJournalLine."Allow Zero-Amount Posting" := TRUE; // ITERO.MH 150420 SYM060
      GenJournalLine.MODIFY(TRUE);

      PostLines:=TRUE;
    END;

    LOCAL PROCEDURE GetAccountNoFromPurchLine@1000000008(PurchLine@1000000000 : Record 123) : Code[20];
    VAR
      PurchHead@1000000001 : Record 122;
      InventoryPostingSetup@1000000002 : Record 5813;
      GeneralPostingSetup@1000000003 : Record 252;
      Item@1000000004 : Record 27;
    BEGIN
      //IME425
      IF (PurchLine.Type = PurchLine.Type::"G/L Account") THEN
        EXIT(PurchLine."No.");

      IF (PurchLine.Type = PurchLine.Type::Item ) AND Item.GET(PurchLine."No.") THEN
        IF InventoryPostingSetup.GET(PurchLine."Location Code",Item."Inventory Posting Group") THEN
          EXIT(InventoryPostingSetup."Inventory Account");

      IF GeneralPostingSetup.GET(PurchLine."Gen. Bus. Posting Group",PurchLine."Gen. Prod. Posting Group") THEN
        EXIT(GeneralPostingSetup."Purch. Account");

      EXIT('');
    END;

    LOCAL PROCEDURE CreateGenJnlLineFromSymbrioLine@1100285504(VAR PurchInvLine@1100285503 : Record 123;PurchInvHeader@1000000000 : Record 122;VAR SymbrioPurchaseInvLine@1100285502 : Record 11127981;VAR SymbrioPurchaseInvHeader@1100285501 : Record 11127980;VAR GenJournalLine@1100285500 : Record 81;VAR LineNo@1100285504 : Integer);
    VAR
      JobsSetup@1100285505 : Record 315;
      ExtensionContract@1100285511 : Record 11012004;
      Job@1100285512 : Record 11072003;
      ServiceOrder@1000 : Record 11012823;
      ContractCode@1100285507 : Code[10];
      LenghtContractCode@1100285508 : Integer;
      StartPos@1100285509 : Integer;
      ContractCodeFound@1100285510 : Boolean;
      Quantity@1100285515 : Decimal;
      Amount@1100285538 : Decimal;
      InvoiceLineIDExists@1100285537 : Boolean;
      LineNo2@1100285532 : Integer;
      VendorLedgerEntry@1100285531 : Record 25;
      PeriodicDate@1100285530 : Date;
      PeriodicDate2@1100285529 : Date;
      Quantity2@1100285523 : Decimal;
      NewStringDim1@1100285522 : Text[30];
      LengthOfProjNo@1100285521 : Integer;
      NewStringDim2@1100285520 : Text[30];
      ProjectNo@1100285519 : Text[30];
      Dim2Symbrio@1100285518 : Code[20];
      Fieldno@1100285516 : Integer;
      Amount1@1100285506 : Decimal;
      RemainingAcc@1100285514 : Code[20];
      OldAmount@1100285000 : Decimal;
      TradeItem@1100285535 : Record 11012317;
    BEGIN
      IF NOT (SymbrioPurchaseInvLine.AccountSuffixPurchType IN ['1','3']) THEN
        EXIT;

      GetGLSetup;
      JobsSetup.GET;
      OldAmount := -GenJournalLine.Amount;

      //4PSSE #20862
      IF (NOT (PurchInvHeader."Currency Code" IN ['',GLSetup."LCY Code"])) AND (PurchInvHeader."Currency Factor"<>0) THEN
          OldAmount := OldAmount * PurchInvHeader."Currency Factor";

      // Insert second line (from file)
      GenJournalLine.INIT;
      GenJournalLine.VALIDATE("Journal Template Name",JobsSetup."Adjustment Journal Template");
      GenJournalLine.VALIDATE("Journal Batch Name",JobsSetup."Adjustment Journal Batch");
      LineNo:=LineNo+10000;
      GenJournalLine.VALIDATE("Line No.",LineNo);
      GenJournalLine.INSERT(TRUE);
      GenJournalLine.VALIDATE("Posting Date",TODAY);
      GenJournalLine.VALIDATE("Document No.",SymbrioPurchaseInvHeader.VerificationNo);

      IF SymbrioPurchaseInvLine.AccountSuffixPurchType = '1' THEN BEGIN
        IF Job.GET(SymbrioPurchaseInvLine.AccountRefProject) THEN
          GenJournalLine.VALIDATE("Job No.",SymbrioPurchaseInvLine.AccountRefProject);
        IF ServiceOrder.GET(SymbrioPurchaseInvLine.AccountRefProject) THEN
          GenJournalLine.VALIDATE("Service Order No.",SymbrioPurchaseInvLine.AccountRefProject);

        GenJournalLine.VALIDATE(Element,SymbrioPurchaseInvLine.AccountRefObject);
        //IF SymbrioPurchaseInvLine.AccountSuffixŽTA <>'' THEN
          //GenJournalLine.VALIDATE("Extension Contract",SymbrioPurchaseInvLine.AccountSuffixŽTA);
        ContractCode := SymbrioPurchaseInvLine.AccountSuffixŽTA;
        LenghtContractCode := STRLEN(ContractCode);
        StartPos := 1;
        ContractCodeFound := FALSE;
        IF SymbrioPurchaseInvLine.AccountSuffixŽTA <> '' THEN BEGIN
          REPEAT
            ContractCode := COPYSTR(ContractCode, StartPos, LenghtContractCode-StartPos+1);
            StartPos := StartPos + 1;
            IF ExtensionContract.GET(SymbrioPurchaseInvLine.AccountRefProject,ContractCode) THEN
              ContractCodeFound := TRUE;
          UNTIL ((ContractCodeFound) OR (StartPos > LenghtContractCode));
          IF ContractCodeFound THEN BEGIN
            GenJournalLine.VALIDATE("Extension Contract",ContractCode);
          END ELSE
            ERROR(Text011,SymbrioPurchaseInvLine.AccountSuffixŽTA);
        //END ELSE BEGIN
              // If blank then just validate
          //PurchInvLine.VALIDATE("Extension Contract",SymbrioPurchaseInvLine.AccountSuffixŽTA);
        END;
      END ELSE BEGIN //type = 3
        GenJournalLine.VALIDATE("Account No.",SymbrioPurchaseInvLine.AccountRefBaseAccount);
      END;

      //>>190429
      //GenJournalLine.VALIDATE(Description, COPYSTR(SymbrioPurchaseInvLine.ArticleName, 1, MAXSTRLEN(GenJournalLine.Description)));
      //GenJournalLine.VALIDATE("Description 2", COPYSTR(SymbrioPurchaseInvLine.ArticleName, MAXSTRLEN(GenJournalLine.Description)+1, MAXSTRLEN(GenJournalLine."Description 2")));
      //<<190429
      IF FindTradeItemInvoice(SymbrioPurchaseInvHeader,SymbrioPurchaseInvLine,TradeItem) THEN BEGIN
        GenJournalLine.VALIDATE("Vendor (Trade Item)",TradeItem.Vendor);
        GenJournalLine.MODIFY(TRUE);
        GenJournalLine.VALIDATE("Trade Item", COPYSTR(SymbrioPurchaseInvLine.ArticleNo,1,MAXSTRLEN(GenJournalLine."Trade Item"))); //171218 added copystr
        GenJournalLine.VALIDATE(Description,'');//done later 190429
      END;

      EVALUATE(Quantity,SymbrioPurchaseInvLine.Quantity);
      //IF ((SymbrioPurchaseInvHeader.InvoiceType='Credit') AND (Quantity < 0)) THEN
        //  Quantity:=Quantity//*(-1);
      GenJournalLine.VALIDATE(Quantity,Quantity);

      IF SymbrioPurchaseInvLine.AccountSuffixPurchType = '1' THEN BEGIN
        EVALUATE(Amount1,SymbrioPurchaseInvLine.Amount);
        // If Amount in previous journal line is almost the same as this one, take that old value
        // to make sure no rounding error occurs when trying to post it.
        GetSymbrioSetup;
        IF (ABS(OldAmount - Amount1) <= SymbrioSetup."Max Rounding Amount") THEN
          Amount1 := OldAmount;
        GenJournalLine.VALIDATE(Amount,Amount1);
      END ELSE BEGIN //type = 3
        IF SymbrioPurchaseInvHeader.InvoiceType <> 'Credit' THEN BEGIN
          IF EVALUATE(Amount1,SymbrioPurchaseInvLine.Amount) THEN
            GenJournalLine.VALIDATE(Amount,Amount1);
        END ELSE BEGIN
          //Amount2 := Quantity2*CalcLineDirectUnitCost(GenJournalLine.Quantity,SymbrioPurchaseInvLine.Amount,SymbrioPurchaseInvLine.NetPrice,SymbrioPurchaseInvLine.GrossPrice);
          Amount1 := Quantity * CalcLineDirectUnitCost(GenJournalLine.Quantity,SymbrioPurchaseInvLine.Amount,SymbrioPurchaseInvLine.NetPrice,SymbrioPurchaseInvLine.GrossPrice);
          GenJournalLine.VALIDATE(Amount,Amount1);
        END;
      END;

      IF (NOT (PurchInvHeader."Currency Code" IN ['',GLSetup."LCY Code"])) AND (PurchInvHeader."Currency Factor"<>0) THEN
        GenJournalLine.VALIDATE(Amount,GenJournalLine.Amount/PurchInvHeader."Currency Factor");

      IF SymbrioPurchaseInvLine.AccountSuffixPurchType = '3' THEN BEGIN
        GenJournalLine.VALIDATE("Periodic Template Code",SymbrioPurchaseInvLine.AccountRefPeriodizing);
        GenJournalLine.VALIDATE("Periodic Starting Date",SymText2Date(SymbrioPurchaseInvLine.AccountRefPerioddatum));
      END;

      IF SymbrioPurchaseInvLine.AccountSuffixPurchType = '1' THEN BEGIN
        IF Job.GET(SymbrioPurchaseInvLine.AccountRefProject) THEN
          GenJournalLine.VALIDATE(GenJournalLine."Shortcut Dimension 1 Code",Job."Global Dimension 1 Code");
        //>> 170703 ITERO.SB RAD-069
        IF ServiceOrder.GET(SymbrioPurchaseInvLine.AccountRefProject) THEN
          GenJournalLine.VALIDATE(GenJournalLine."Shortcut Dimension 1 Code",ServiceOrder."Global Dimension 1 Code");
        //<<
        GenJournalLine.VALIDATE("Shortcut Dimension 2 Code",SymbrioPurchaseInvLine.AccountRefBaseAccount);

        IF SymbrioPurchaseInvHeader.InvoiceType <> 'Credit' THEN BEGIN
          GetSymbrioSetup;
          CreateIndirectDimcodeGenJnlLine(GenJournalLine, SymbrioPurchaseInvLine.AccountRefRemAccount, SymbrioSetup."Project Dimcode Purchases");
        END;
      END ELSE BEGIN
      //191105
        AccountRefProjectToDims(SymbrioPurchaseInvLine.AccountRefProject,NewStringDim1,Dim2Symbrio,Fieldno);
      //  NewStringDim1 := COPYSTR(SymbrioPurchaseInvLine.AccountRefProject, 1, 4);
      //  ProjectNo := SymbrioPurchaseInvLine.AccountRefProject;
      //  LengthOfProjNo := STRLEN(ProjectNo);
      //  NewStringDim2 := COPYSTR(ProjectNo, LengthOfProjNo -1, 2);
      //  EVALUATE(Dim2Symbrio,NewStringDim2);
      //  GetSymbrioSetup;
      //  Fieldno := GetDimensionIDCode(SymbrioSetup."Indirect Export Dim2");
      //191105
        GenJournalLine.VALIDATE("Shortcut Dimension 1 Code", NewStringDim1);
        GenJournalLine.ValidateShortcutDimCode(Fieldno,Dim2Symbrio);

        IF SymbrioPurchaseInvHeader.InvoiceType <> 'Credit' THEN
          CreateIndirectDimcodeGenJnlLine(GenJournalLine, SymbrioPurchaseInvLine.AccountRefRemAccount, SymbrioSetup."Indirect Dimcode Purchases");
      END;

      //>>190429
      // IF FindTradeItemInvoice(SymbrioPurchaseInvHeader,SymbrioPurchaseInvLine,TradeItem) THEN BEGIN
      //  GenJournalLine.VALIDATE("Vendor (Trade Item)",TradeItem.Vendor);
      //  GenJournalLine.MODIFY(TRUE);
      //  GenJournalLine.VALIDATE("Trade Item", COPYSTR(SymbrioPurchaseInvLine.ArticleNo,1,MAXSTRLEN(GenJournalLine."Trade Item"))); //171218 added copystr
      //  GenJournalLine.VALIDATE(Description,TradeItem."Item Description");
      // END;
      IF TradeItem."Item Description" <> '' THEN
        GenJournalLine.VALIDATE(Description,TradeItem."Item Description");

      GenJournalLine.VALIDATE(Description, COPYSTR(SymbrioPurchaseInvLine.ArticleName, 1, MAXSTRLEN(GenJournalLine.Description)));
      GenJournalLine.VALIDATE("Description 2", COPYSTR(SymbrioPurchaseInvLine.ArticleName, MAXSTRLEN(GenJournalLine.Description)+1, MAXSTRLEN(GenJournalLine."Description 2")));
      //<<190429
      //>>190424 RFC1208
      GenJournalLine.VALIDATE("Source Type", GenJournalLine."Source Type"::Vendor);
      GenJournalLine.VALIDATE("Source No.", SymbrioPurchaseInvHeader.SupplierIdentification);
      //<<190424

      GenJournalLine."Allow Zero-Amount Posting" := TRUE;
      GenJournalLine.MODIFY(TRUE);
      PostLines:=TRUE;
    END;

    LOCAL PROCEDURE HandleMergedAccLines@1100285511(VAR GenJournalLine@1100285507 : Record 81;VAR LineNo@1100285508 : Integer;VerificationNo@1100285502 : Text[30];InvLineID@1100285501 : Integer;AccSuffixPurchType@1100285505 : Code[10]);
    VAR
      SymbrioPurchaseInvHeader@1100285503 : Record 11127980;
      SymbrioPurchaseInvLine@1100285504 : Record 11127981;
      ExtendedLineNo@1100285500 : Record 11127984;
      PurchInvLine@1100285506 : Record 123;
      PurchInvHeader@1000000000 : Record 122;
    BEGIN
      //>>RFC144
      IF NOT PurchInvHeader.GET(VerificationNo) THEN
        ERROR(Text013,VerificationNo);
      //<<RFC144
      ExtendedLineNo.RESET;
      ExtendedLineNo.SETRANGE("Document Type", ExtendedLineNo."Document Type"::Invoice);
      ExtendedLineNo.SETRANGE("Document No.", VerificationNo);
      ExtendedLineNo.SETRANGE("Extended LineNo.", InvLineID);
      IF ExtendedLineNo.FINDSET THEN REPEAT

        // Check in the symbrio line buffer if the line has been handled already. If not,
        // then insert the line to the journal.
        SymbrioPurchaseInvHeader.SETRANGE(VerificationNo,ExtendedLineNo."Document No.");
        IF SymbrioPurchaseInvHeader.FINDFIRST THEN BEGIN
          SymbrioPurchaseInvLine.SETRANGE(InvoiceHeadID,SymbrioPurchaseInvHeader.InvoiceHeadID);
          SymbrioPurchaseInvLine.SETRANGE(OrderHeadID,SymbrioPurchaseInvHeader.OrderHeadID);
          SymbrioPurchaseInvLine.SETRANGE(InvoiceLineID,FORMAT(ExtendedLineNo."Extended LineNo."));
          SymbrioPurchaseInvLine.SETRANGE(LineNo,ExtendedLineNo.Line);
          IF NOT SymbrioPurchaseInvLine.FINDFIRST THEN BEGIN

            IF NOT PurchInvLine.GET(ExtendedLineNo."Document No.",ExtendedLineNo."Line No.") THEN
              ERROR(Text014,ExtendedLineNo."Document No.",ExtendedLineNo."Line No.");

            // Create Journal Line for correction
            CreateGenJnlLineFromPurchInvLine(AccSuffixPurchType,
                                             PurchInvLine,
                                             PurchInvHeader,  //RFC144
                                             SymbrioPurchaseInvHeader,
                                             GenJournalLine,
                                             LineNo);

          END;
        END;

      UNTIL ExtendedLineNo.NEXT=0;
    END;

    LOCAL PROCEDURE CreditMemoApproval@1100285509(SymbrioPurchaseInvHeader@1100285000 : Record 11127980);
    VAR
      PurchInvLine@1100285002 : Record 125;
      SymbrioPurchaseInvLine@1100285003 : Record 11127981;
      GenJournalLine@1100285001 : Record 81;
      JobsSetup@1100285004 : Record 315;
      LineNo@1100285005 : Integer;
      PurchInvHeader@1100285006 : Record 124;
      Job@1100285008 : Record 11072003;
      ServiceOrder@1000 : Record 11012823;
      Quantity@1100285009 : Decimal;
      Amount@1100285010 : Decimal;
      InvoiceLineIDExists@1100285011 : Boolean;
      Amount2@1100285012 : Decimal;
      ExtendedLineNo@1100285015 : Record 11127984;
      InvoiceLineIDInt@1100285016 : Integer;
      VendorLedgerEntry@1100285017 : Record 25;
      PeriodicDate@1100285018 : Date;
      PeriodicDate2@1100285019 : Date;
      ContractCode@1100285024 : Code[10];
      LenghtContractCode@1100285023 : Integer;
      StartPos@1100285022 : Integer;
      ContractCodeFound@1100285021 : Boolean;
      ExtensionContract@1100285020 : Record 11012004;
      Quantity2@1100285025 : Decimal;
      NewStringDim1@1100285032 : Text[30];
      LengthOfProjNo@1100285031 : Integer;
      NewStringDim2@1100285030 : Text[30];
      ProjectNo@1100285029 : Text[30];
      Dim2Symbrio@1100285028 : Code[20];
      Fieldno@1100285026 : Integer;
      PreviousLineID@1100285500 : Integer;
      AccSuffixPurchType@1100285501 : Code[10];
      PrevAccSuffixPurchType@1100285502 : Code[10];
      Amount1@1100285503 : Decimal;
      savedAmt@1100285007 : Decimal;
      savedQty@1100285033 : Decimal;
      TradeItem@1100285014 : Record 11012317;
      OnHoldCodes@1100285100 : Record 11012031;
    BEGIN
      PostLines:= FALSE;

      IF NOT PurchInvHeader.GET(SymbrioPurchaseInvHeader.VerificationNo) THEN
        ERROR(Text016,SymbrioPurchaseInvHeader.VerificationNo);
      JobsSetup.GET;
      IF ((JobsSetup."Adjustment Journal Template" = '') OR (JobsSetup."Adjustment Journal Batch" = '')) THEN
        ERROR ('Setup for adjustment journal is missing in jobs setup');

      GetGLSetup;  //IME504

      GenJournalLine.SETRANGE("Journal Template Name", JobsSetup."Adjustment Journal Template");
      GenJournalLine.SETRANGE("Journal Batch Name",JobsSetup."Adjustment Journal Batch");
      IF GenJournalLine.FINDFIRST THEN
        GenJournalLine.DELETEALL(TRUE);  //Skall journalen rensas h„r? Skall den ej rensas, t„nk p† att „ndra line no!

      SymbrioPurchaseInvLine.SETRANGE(InvoiceHeadID,SymbrioPurchaseInvHeader.InvoiceHeadID);
      SymbrioPurchaseInvLine.SETRANGE("Source Filename", SymbrioPurchaseInvHeader."Source Filename"); // 150420 ITERO.MH SYM060
      SymbrioPurchaseInvLine.SETRANGE(OrderHeadID, SymbrioPurchaseInvHeader.OrderHeadID);

      IF SymbrioPurchaseInvLine.FINDSET THEN BEGIN

        // Remember the purchtype (1,2 or 3) for later use
        //AccSuffixPurchType := SymbrioPurchaseInvLine.AccountSuffixPurchType;

        REPEAT
        AccSuffixPurchType := SymbrioPurchaseInvLine.AccountSuffixPurchType;
          EVALUATE(InvoiceLineIDInt,SymbrioPurchaseInvLine.InvoiceLineID);

          // This call will make sure that all related purchase invoice lines are handled at the
          // end of each group of InvoiceLineID as there can be more than one account line.
          IF (PreviousLineID <> InvoiceLineIDInt) AND (PreviousLineID <> 0) THEN          //G† igenom
            HandleMergedAccLinesCredit(GenJournalLine,
                                 LineNo,
                                 SymbrioPurchaseInvHeader.VerificationNo,
                                 PreviousLineID,
                                 PrevAccSuffixPurchType);


          //>> 131122 SYM959
          //IF SymbrioPurchaseInvLine.InvoiceLineID <> '' THEN BEGIN
          ExtendedLineNo.RESET;
          ExtendedLineNo.SETRANGE("Document Type",ExtendedLineNo."Document Type"::"Credit Memo");
          ExtendedLineNo.SETRANGE("Document No.",SymbrioPurchaseInvHeader.VerificationNo);
          ExtendedLineNo.SETRANGE("Extended LineNo.",InvoiceLineIDInt);
          ExtendedLineNo.SETRANGE(Line,SymbrioPurchaseInvLine.LineNo);

          //IF ExtendedLineNo.FINDFIRST THEN BEGIN
          IF ExtendedLineNo.FINDSET(FALSE) THEN BEGIN
            savedAmt := 0;
            savedQty := 0;
            REPEAT

              //**********************************************************
              // Purchase Invoice line was found
              IF NOT PurchInvLine.GET(ExtendedLineNo."Document No.",ExtendedLineNo."Line No.") THEN
                ERROR(Text014,ExtendedLineNo."Document No.",ExtendedLineNo."Line No.");

              IF CheckInvoiceLineCredit(PurchInvLine,SymbrioPurchaseInvLine,SymbrioPurchaseInvHeader) THEN BEGIN //Check line
                //MESSAGE('Line is identical');
                //Remove on hold code on invoice
              END ELSE BEGIN
                // Create both lines for correction
        //>>SYM060B
                IF EVALUATE(Quantity,SymbrioPurchaseInvLine.Quantity) THEN BEGIN
                  Quantity := Quantity - savedQty;
                  SymbrioPurchaseInvLine.Quantity := FORMAT(Quantity,0,1);
                END;

                IF EVALUATE(Amount1,SymbrioPurchaseInvLine.Amount) THEN BEGIN
                  Amount1 := Amount1 - savedAmt;
                  SymbrioPurchaseInvLine.Amount := FORMAT(Amount1,0,1);
                END;
        //SYM060B
                CreateGenJnlLineFromPurchInvLineCredit(SymbrioPurchaseInvLine.AccountSuffixPurchType,
                                                 PurchInvLine,
                                                 PurchInvHeader,  //RFC144
                                                 SymbrioPurchaseInvHeader,
                                                 GenJournalLine,
                                                 LineNo);

                IF (savedAmt = 0) AND (savedQty = 0) THEN
                  CreateGenJnlLineFromSymbrioLineCredit(PurchInvLine,
                                                  PurchInvHeader,  //RFC144
                                                  SymbrioPurchaseInvLine,
                                                  SymbrioPurchaseInvHeader,
                                                  GenJournalLine,
                                                  LineNo);

                savedAmt := savedAmt + (PurchInvLine."Direct Unit Cost"*PurchInvLine.Quantity);
                savedQty := savedQty + PurchInvLine.Quantity;
              END;
            UNTIL ExtendedLineNo.NEXT=0;
      //150527

          END ELSE BEGIN
            //**********************************************************
            //InvoiceLineID is empty
            IF SymbrioPurchaseInvLine.AccountSuffixPurchType = '1' THEN BEGIN
              GenJournalLine.INIT;
              GenJournalLine.VALIDATE("Journal Template Name",JobsSetup."Adjustment Journal Template");
              GenJournalLine.VALIDATE("Journal Batch Name",JobsSetup."Adjustment Journal Batch");
              LineNo:=LineNo+10000;
              GenJournalLine.VALIDATE("Line No.",LineNo);
              GenJournalLine.INSERT(TRUE);
              GenJournalLine.VALIDATE("Posting Date",TODAY);
              GenJournalLine.VALIDATE("Document No.",SymbrioPurchaseInvHeader.VerificationNo);
              // 150818 ITERO.MH << Added Service Order too
              IF (Job.GET(SymbrioPurchaseInvLine.AccountRefProject)) THEN
                 GenJournalLine.VALIDATE("Job No.",SymbrioPurchaseInvLine.AccountRefProject);
              IF (ServiceOrder.GET(SymbrioPurchaseInvLine.AccountRefProject)) THEN
                 GenJournalLine.VALIDATE("Service Order No.",SymbrioPurchaseInvLine.AccountRefProject);
              // 150818 ITERO.MH >>
              GenJournalLine.VALIDATE(Element,SymbrioPurchaseInvLine.AccountRefObject);
              //IF SymbrioPurchaseInvLine.AccountSuffixŽTA <>'' THEN
                //GenJournalLine.VALIDATE("Extension Contract",SymbrioPurchaseInvLine.AccountSuffixŽTA);
              ContractCode := SymbrioPurchaseInvLine.AccountSuffixŽTA;
              LenghtContractCode := STRLEN(ContractCode);
              StartPos := 1;
              ContractCodeFound := FALSE;
              IF SymbrioPurchaseInvLine.AccountSuffixŽTA <> '' THEN BEGIN
                REPEAT
                  ContractCode := COPYSTR(ContractCode, StartPos, LenghtContractCode-StartPos+1);
                  StartPos := StartPos + 1;
                  IF ExtensionContract.GET(SymbrioPurchaseInvLine.AccountRefProject,ContractCode) THEN
                    ContractCodeFound := TRUE;
                UNTIL ((ContractCodeFound) OR (StartPos > LenghtContractCode));
                IF ContractCodeFound THEN BEGIN
                  GenJournalLine.VALIDATE("Extension Contract",ContractCode);
                END ELSE
                  ERROR(Text011,SymbrioPurchaseInvLine.AccountSuffixŽTA);
                //END ELSE BEGIN
                      // If blank then just validate
                  //PurchInvLine.VALIDATE("Extension Contract",SymbrioPurchaseInvLine.AccountSuffixŽTA);
              END;

              GenJournalLine.VALIDATE("Shortcut Dimension 2 Code",SymbrioPurchaseInvLine.AccountRefBaseAccount);
              //>> 140212 SYM990 Added description
              //>>140409 SYM016 ITERO.DJ
              //GenJournalLine.VALIDATE(Description,SymbrioPurchaseInvLine.ArticleName);
              GenJournalLine.VALIDATE(Description, COPYSTR(SymbrioPurchaseInvLine.ArticleName, 1, MAXSTRLEN(GenJournalLine.Description)));
              GenJournalLine.VALIDATE("Description 2", COPYSTR(SymbrioPurchaseInvLine.ArticleName, MAXSTRLEN(GenJournalLine.Description)+1, MAXSTRLEN(GenJournalLine."Description 2")));
              //<<140409 SYM016 ITERO.DJ

              IF FindTradeItemInvoice(SymbrioPurchaseInvHeader,SymbrioPurchaseInvLine,TradeItem) THEN BEGIN
                GenJournalLine.VALIDATE("Vendor (Trade Item)",TradeItem.Vendor);
                GenJournalLine.MODIFY(TRUE);
                GenJournalLine.VALIDATE("Trade Item", COPYSTR(SymbrioPurchaseInvLine.ArticleNo,1,MAXSTRLEN(GenJournalLine."Trade Item"))); //171218 added copystr
                GenJournalLine.VALIDATE(Description,TradeItem."Item Description");
              END;

              IF Job.GET(SymbrioPurchaseInvLine.AccountRefProject) THEN
                GenJournalLine.VALIDATE(GenJournalLine."Shortcut Dimension 1 Code",Job."Global Dimension 1 Code");
              //>> 170703 ITERO.SB RAD-069
              IF ServiceOrder.GET(SymbrioPurchaseInvLine.AccountRefProject) THEN
                GenJournalLine.VALIDATE(GenJournalLine."Shortcut Dimension 1 Code",ServiceOrder."Global Dimension 1 Code");
              //<<
              EVALUATE(Quantity,SymbrioPurchaseInvLine.Quantity);
              GenJournalLine.VALIDATE(Quantity,Quantity);
              //EVALUATE(Amount,SymbrioPurchaseInvLine.NetPrice);
              //GenJournalLine.VALIDATE(Amount,Amount*Quantity);
              EVALUATE(Amount1,SymbrioPurchaseInvLine.Amount);
              GenJournalLine.VALIDATE(Amount,Amount1);
              //>>IME504
              IF (NOT (PurchInvHeader."Currency Code" IN ['',GLSetup."LCY Code"])) AND (PurchInvHeader."Currency Factor"<>0) THEN
                GenJournalLine.VALIDATE(Amount,GenJournalLine.Amount/PurchInvHeader."Currency Factor");
              //<<IME504
      //>>SYM106
              //GenJournalLine.MODIFY(TRUE);
              //PostLines:=TRUE;
              IF GenJournalLine.Amount = 0 THEN
                GenJournalLine.DELETE(TRUE)
              ELSE
              BEGIN
                GenJournalLine.MODIFY(TRUE);
                PostLines:=TRUE;
              END;
      //<<SYM106

            END ELSE IF SymbrioPurchaseInvLine.AccountSuffixPurchType = '2' THEN BEGIN  //Just for test
                //No changes allowed
                //MESSAGE('No changes allowed');
            END ELSE IF SymbrioPurchaseInvLine.AccountSuffixPurchType = '3' THEN BEGIN
              GenJournalLine.INIT;
              GenJournalLine.VALIDATE("Journal Template Name",JobsSetup."Adjustment Journal Template");
              GenJournalLine.VALIDATE("Journal Batch Name",JobsSetup."Adjustment Journal Batch");
              LineNo:=LineNo+10000;
              GenJournalLine.VALIDATE("Line No.",LineNo);
              GenJournalLine.INSERT(TRUE);
              GenJournalLine.VALIDATE("Posting Date",TODAY);
              GenJournalLine.VALIDATE("Document No.",SymbrioPurchaseInvHeader.VerificationNo);
              //GenJournalLine.VALIDATE("Shortcut Dimension 1 Code",SymbrioPurchaseInvHeader.PurchaserDivisionCode);
              GenJournalLine.VALIDATE("Account No.",SymbrioPurchaseInvLine.AccountRefBaseAccount);

              GenJournalLine.VALIDATE(Description, COPYSTR(SymbrioPurchaseInvLine.ArticleName, 1, MAXSTRLEN(GenJournalLine.Description)));
              GenJournalLine.VALIDATE("Description 2", COPYSTR(SymbrioPurchaseInvLine.ArticleName, MAXSTRLEN(GenJournalLine.Description)+1, MAXSTRLEN(GenJournalLine."Description 2")));

              IF FindTradeItemInvoice(SymbrioPurchaseInvHeader,SymbrioPurchaseInvLine,TradeItem) THEN BEGIN
                GenJournalLine.VALIDATE("Vendor (Trade Item)",TradeItem.Vendor);
                GenJournalLine.MODIFY(TRUE);
                GenJournalLine.VALIDATE("Trade Item", COPYSTR(SymbrioPurchaseInvLine.ArticleNo,1,MAXSTRLEN(GenJournalLine."Trade Item"))); //171218 added copystr
                GenJournalLine.VALIDATE(Description,TradeItem."Item Description");
              END;

              EVALUATE(Quantity2,SymbrioPurchaseInvLine.Quantity);
              GenJournalLine.VALIDATE(Quantity,Quantity2);

              Amount2 := Quantity2*CalcLineDirectUnitCost(GenJournalLine.Quantity,SymbrioPurchaseInvLine.Amount,SymbrioPurchaseInvLine.NetPrice,SymbrioPurchaseInvLine.GrossPrice);
              GenJournalLine.VALIDATE(Amount,Amount2);

              IF (NOT (PurchInvHeader."Currency Code" IN ['',GLSetup."LCY Code"])) AND (PurchInvHeader."Currency Factor"<>0) THEN
                GenJournalLine.VALIDATE(Amount,GenJournalLine.Amount/PurchInvHeader."Currency Factor");
              GenJournalLine.VALIDATE("Periodic Template Code",SymbrioPurchaseInvLine.AccountRefPeriodizing);
              GenJournalLine.VALIDATE("Periodic Starting Date",SymText2Date(SymbrioPurchaseInvLine.AccountRefPerioddatum));

      //191105
              AccountRefProjectToDims(SymbrioPurchaseInvLine.AccountRefProject,NewStringDim1,Dim2Symbrio,Fieldno);
      //        NewStringDim1 := COPYSTR(SymbrioPurchaseInvLine.AccountRefProject, 1, 4);
      //        ProjectNo := SymbrioPurchaseInvLine.AccountRefProject;
      //        LengthOfProjNo := STRLEN(ProjectNo);
      //        NewStringDim2 := COPYSTR(ProjectNo, LengthOfProjNo -1, 2);
      //        EVALUATE(Dim2Symbrio,NewStringDim2);
      //        IF NOT GetSymbrioSetup THEN
      //          ERROR(Text017);
      //        Fieldno := GetDimensionIDCode(SymbrioSetup."Indirect Export Dim2");
      //191105
              GenJournalLine.VALIDATE("Shortcut Dimension 1 Code", NewStringDim1);
              GenJournalLine.ValidateShortcutDimCode(Fieldno,Dim2Symbrio);

              IF GenJournalLine.Amount = 0 THEN
                GenJournalLine.DELETE(TRUE)
              ELSE
              BEGIN
                GenJournalLine.MODIFY(TRUE);
                PostLines:=TRUE;
              END;

            END;
          END;

          PreviousLineID := InvoiceLineIDInt;
          PrevAccSuffixPurchType := AccSuffixPurchType;
        UNTIL SymbrioPurchaseInvLine.NEXT=0;


        // Perform this check again as the last line is missed in the loop.
        IF PreviousLineID = InvoiceLineIDInt THEN
          HandleMergedAccLinesCredit(GenJournalLine,
                               LineNo,
                               SymbrioPurchaseInvHeader.VerificationNo,
                               PreviousLineID,
                               AccSuffixPurchType);

          ApplyRoundingLineJournal(GenJournalLine);

        //>>140127 SYM981, Check if system is run by user or through NAS to prevent stop in process if user input is required
        IF PostLines THEN BEGIN
          cuGenJnlPost.ReplacePostingDatePeriodic(TRUE);  //Support #23434
          IF NOT (GUIALLOWED) THEN
            cuGenJnlPost.Background(TRUE);
          cuGenJnlPost.RUN(GenJournalLine);
        END;
        //<<140127 SYM981

        //Remove on hold code
        IF NOT OnHoldCodes.GET(PurchInvHeader."On Hold") THEN
          PurchInvHeader.VALIDATE("On Hold",'');
        IF OnHoldCodes."Default Value Credit Memo" THEN
          PurchInvHeader.VALIDATE("On Hold",'');

        PurchInvHeader."Export to Symbrio":=TRUE;
        PurchInvHeader."Export to Symbrio Type":=PurchInvHeader."Export to Symbrio Type"::Definitive;
        PurchInvHeader."Consented Date-Time" := CURRENTDATETIME; //181115
        PurchInvHeader.MODIFY(TRUE);

        VendorLedgerEntry.SETRANGE("Document No.",PurchInvHeader."No.");
        VendorLedgerEntry.SETRANGE("Document Type",VendorLedgerEntry."Document Type"::"Credit Memo");
        IF VendorLedgerEntry.FINDLAST THEN
          VendorLedgerEntry.UpdatePostedDocument();

      END;

      SymbrioPurchaseInvHeader.DELETE(TRUE); // May not be deleted here but for now it is.
    END;

    LOCAL PROCEDURE CreateGenJnlLineFromPurchInvLineCredit@1100285514(AccSuffixPurchType@1100285502 : Code[10];VAR PurchInvLine@1100285503 : Record 125;PurchInvHeader@1000000000 : Record 124;VAR SymbrioPurchaseInvHeader@1100285501 : Record 11127980;VAR GenJournalLine@1100285500 : Record 81;VAR LineNo@1100285504 : Integer);
    VAR
      JobsSetup@1100285505 : Record 315;
      ExtensionContract@1100285511 : Record 11012004;
      ETIMVendorLocalMgt@1100285513 : Record 11012313;
      Job@1100285512 : Record 11072003;
      ContractCode@1100285507 : Code[10];
      LenghtContractCode@1100285508 : Integer;
      StartPos@1100285509 : Integer;
      ContractCodeFound@1100285510 : Boolean;
      Quantity@1100285515 : Decimal;
      Amount@1100285538 : Decimal;
      InvoiceLineIDExists@1100285537 : Boolean;
      Amount2@1100285536 : Decimal;
      TradeItem@1100285535 : Record 11012317;
      LineNo2@1100285532 : Integer;
      VendorLedgerEntry@1100285531 : Record 25;
      PeriodicDate@1100285530 : Date;
      PeriodicDate2@1100285529 : Date;
      Quantity2@1100285523 : Decimal;
      NewStringDim1@1100285522 : Text[30];
      LengthOfProjNo@1100285521 : Integer;
      NewStringDim2@1100285520 : Text[30];
      ProjectNo@1100285519 : Text[30];
      Dim2Symbrio@1100285518 : Code[20];
      Fieldno@1100285516 : Integer;
      DimensionSetEntry@1100285506 : Record 480;
    BEGIN
      GetGLSetup;  //RFC144
      //140210 SYM991 ITERO.SB
      JobsSetup.GET;
      //IF SymbrioPurchaseInvLine.AccountSuffixPurchType = '1' THEN BEGIN

      IF AccSuffixPurchType = '1' THEN BEGIN
        //Insert first line (posted inv line - )
        GenJournalLine.INIT;
        GenJournalLine.VALIDATE("Journal Template Name",JobsSetup."Adjustment Journal Template");
        GenJournalLine.VALIDATE("Journal Batch Name",JobsSetup."Adjustment Journal Batch");
        LineNo:=LineNo+10000;
        GenJournalLine.VALIDATE("Line No.",LineNo);
        GenJournalLine.INSERT(TRUE);
        GenJournalLine.VALIDATE("Posting Date",TODAY);
        GenJournalLine.VALIDATE("Document No.",SymbrioPurchaseInvHeader.VerificationNo);
        GenJournalLine.VALIDATE("Job No.",PurchInvLine."Job No.");
        GenJournalLine.VALIDATE("Service Order No.", PurchInvLine."Service Order No."); // ITERO.MH 150818
        GenJournalLine.VALIDATE(Element,PurchInvLine.Element);
        IF PurchInvLine."Extension Contract"<>'' THEN
          GenJournalLine.VALIDATE("Extension Contract",PurchInvLine."Extension Contract");
        GenJournalLine.VALIDATE("Vendor (Trade Item)",PurchInvLine."Vendor (Trade Item)");
        GenJournalLine.MODIFY(TRUE);
        //GenJournalLine.VALIDATE("Item No.",PurchInvLine."Item No."); Item no is filled in from trade item
        GenJournalLine.VALIDATE("Trade Item",PurchInvLine."Trade Item");
        GenJournalLine.VALIDATE("Shortcut Dimension 1 Code",PurchInvLine."Shortcut Dimension 1 Code");
        GenJournalLine.VALIDATE("Shortcut Dimension 2 Code",PurchInvLine."Shortcut Dimension 2 Code");
        GenJournalLine.VALIDATE(Quantity, PurchInvLine.Quantity);
        GenJournalLine.VALIDATE(Amount, (PurchInvLine."Direct Unit Cost"*PurchInvLine.Quantity));
        //>>RFC144
        IF (NOT (PurchInvHeader."Currency Code" IN ['',GLSetup."LCY Code"])) AND (PurchInvHeader."Currency Factor"<>0) THEN
          GenJournalLine.VALIDATE(Amount,GenJournalLine.Amount/PurchInvHeader."Currency Factor");
        //<<RFC144
        //>> 140212 SYM990 Added description
        // ITERO.MH SYM060 150415 <<
        IF (GenJournalLine."Account No." = '') THEN GenJournalLine.VALIDATE("Account No.", PurchInvLine."No.");
        // ITERO.MH SYM060 150415 >>
        //>> 150421 SYM076
        GenJournalLine."Shortcut Dimension 1 Code" := PurchInvLine."Shortcut Dimension 1 Code";
        GenJournalLine."Shortcut Dimension 2 Code" := PurchInvLine."Shortcut Dimension 2 Code";
        GenJournalLine."Dimension Set ID" := PurchInvLine."Dimension Set ID"; // SYM076 150421
        //<< 150421 SYM076
        GenJournalLine.VALIDATE(Description,PurchInvLine.Description);
        //<<
        GenJournalLine.MODIFY(TRUE);

        PostLines:=TRUE;

      //create project correction line
      //END ELSE IF SymbrioPurchaseInvLine.AccountSuffixPurchType = '2' THEN BEGIN //Just for test
      END ELSE IF AccSuffixPurchType = '2' THEN BEGIN
        //No changes allowed

      //END ELSE IF SymbrioPurchaseInvLine.AccountSuffixPurchType = '3' THEN BEGIN
      END ELSE IF AccSuffixPurchType = '3' THEN BEGIN
        GenJournalLine.INIT;
        GenJournalLine.VALIDATE("Journal Template Name",JobsSetup."Adjustment Journal Template");
        GenJournalLine.VALIDATE("Journal Batch Name",JobsSetup."Adjustment Journal Batch");
        LineNo:=LineNo+10000;
        GenJournalLine.VALIDATE("Line No.",LineNo);
        GenJournalLine.INSERT(TRUE);
        GenJournalLine.VALIDATE("Posting Date",TODAY);
        GenJournalLine.VALIDATE("Document No.",SymbrioPurchaseInvHeader.VerificationNo);
        //>>SYM097
        IF PurchInvLine."Job No." <> '' THEN BEGIN
          //GenJournalLine.VALIDATE("Job No.", PurchInvLine."Job No.");
          GenJournalLine."System-Created Entry" := TRUE;
          GenJournalLine."Skip WIP Check" := TRUE;
          //>>SYM113
          GenJournalLine.VALIDATE("Job No.", PurchInvLine."Job No.");
          GenJournalLine.VALIDATE("Shortcut Dimension 2 Code",PurchInvLine."Shortcut Dimension 2 Code");
          //<<SYM113
        END;
        IF PurchInvLine."Service Order No." <> '' THEN BEGIN
          //GenJournalLine.VALIDATE("Job No.", PurchInvLine."Job No.");
          GenJournalLine."System-Created Entry" := TRUE;
          GenJournalLine."Skip WIP Check" := TRUE;
          //>>SYM113
          GenJournalLine.VALIDATE("Service Order No.", PurchInvLine."Service Order No.");
          GenJournalLine.VALIDATE("Shortcut Dimension 2 Code",PurchInvLine."Shortcut Dimension 2 Code");
          //<<SYM113
        END;

        //<<SYM097
        //>> 131210 Added vendor (trade item)
        GenJournalLine.VALIDATE("Vendor (Trade Item)",PurchInvLine."Vendor (Trade Item)");
        //<<
        GenJournalLine.VALIDATE("Item No.",PurchInvLine."Item No.");
        GenJournalLine.VALIDATE("Trade Item",PurchInvLine."Trade Item");
        GenJournalLine.VALIDATE("Account No.",PurchInvLine."No.");
        //>> 131122 ITERO.SB
        GenJournalLine.VALIDATE(Quantity,PurchInvLine.Quantity);
        GenJournalLine.VALIDATE(Amount,(PurchInvLine."Direct Unit Cost"*PurchInvLine.Quantity));
        //<<
        //>>IME504
        IF (NOT (PurchInvHeader."Currency Code" IN ['',GLSetup."LCY Code"])) AND (PurchInvHeader."Currency Factor"<>0) THEN
          GenJournalLine.VALIDATE(Amount,GenJournalLine.Amount/PurchInvHeader."Currency Factor");
        //<<IME504
        GenJournalLine.VALIDATE("Shortcut Dimension 1 Code",PurchInvLine."Shortcut Dimension 1 Code");
        //>>140121 SYM979
        IF NOT GetSymbrioSetup THEN
          ERROR(Text017);
        Fieldno := GetDimensionIDCode(SymbrioSetup."Indirect Export Dim2");

        DimensionSetEntry.SETRANGE("Dimension Set ID", PurchInvLine."Dimension Set ID");
        DimensionSetEntry.SETRANGE("Dimension Code", SymbrioSetup."Indirect Export Dim2");
        IF DimensionSetEntry.FINDFIRST THEN
          GenJournalLine.ValidateShortcutDimCode(Fieldno,DimensionSetEntry."Dimension Value Code");
        //<<140121 SYM979
        GenJournalLine.VALIDATE("Periodic Template Code",PurchInvLine."Periodic Template Code");
        GenJournalLine.VALIDATE("Periodic Starting Date",PurchInvLine."Periodic Starting Date");
        //>> 140212 SYM990 Added description
        GenJournalLine.VALIDATE(Description,PurchInvLine.Description);
        //<<
        GenJournalLine.MODIFY(TRUE);

        PostLines:=TRUE;
      END;
    END;

    LOCAL PROCEDURE CreateGenJnlLineFromSymbrioLineCredit@1100285513(VAR PurchCrInvLine@1100285503 : Record 125;PurchCrInvHeader@1000000000 : Record 124;VAR SymbrioPurchaseInvLine@1100285502 : Record 11127981;VAR SymbrioPurchaseInvHeader@1100285501 : Record 11127980;VAR GenJournalLine@1100285500 : Record 81;VAR LineNo@1100285504 : Integer);
    VAR
      JobsSetup@1100285505 : Record 315;
      ExtensionContract@1100285511 : Record 11012004;
      Job@1100285512 : Record 11072003;
      ServiceOrder@1000 : Record 11012823;
      ContractCode@1100285507 : Code[10];
      LenghtContractCode@1100285508 : Integer;
      StartPos@1100285509 : Integer;
      ContractCodeFound@1100285510 : Boolean;
      Quantity@1100285515 : Decimal;
      Amount@1100285538 : Decimal;
      InvoiceLineIDExists@1100285537 : Boolean;
      Amount2@1100285536 : Decimal;
      LineNo2@1100285532 : Integer;
      VendorLedgerEntry@1100285531 : Record 25;
      PeriodicDate@1100285530 : Date;
      PeriodicDate2@1100285529 : Date;
      Quantity2@1100285523 : Decimal;
      NewStringDim1@1100285522 : Text[30];
      LengthOfProjNo@1100285521 : Integer;
      NewStringDim2@1100285520 : Text[30];
      ProjectNo@1100285519 : Text[30];
      Dim2Symbrio@1100285518 : Code[20];
      Fieldno@1100285516 : Integer;
      Amount1@1100285506 : Decimal;
      OldAmount@1100285000 : Decimal;
      TradeItem@1100285535 : Record 11012317;
      PurchInvHeader@1101285001 : Record 122;
      PurchInvLine@1101285000 : Record 123;
    BEGIN
      IF NOT (SymbrioPurchaseInvLine.AccountSuffixPurchType IN ['1','3']) THEN
        EXIT;

      PurchInvHeader.TRANSFERFIELDS(PurchCrInvHeader,FALSE);
      PurchInvHeader."Vendor Invoice No." := PurchCrInvHeader."Vendor Cr. Memo No.";
      PurchInvHeader."Pre-Assigned No. Series" := PurchCrInvHeader."Prepmt. Cr. Memo No. Series";
      PurchInvHeader."Invoice Approved" := PurchCrInvHeader."Credit Memo Approved";
      PurchInvHeader."Payment Reference" := PurchCrInvHeader."Payment Reference";
      PurchInvHeader.KID := PurchCrInvHeader.KID;

      PurchInvLine.TRANSFERFIELDS(PurchCrInvLine,FALSE);
      PurchInvLine."Receipt No." := PurchCrInvLine."Receipt No.";
      PurchInvLine."Receipt Line No." := PurchCrInvLine."Receipt Line No.";

      CreateGenJnlLineFromSymbrioLine(PurchInvLine,PurchInvHeader,SymbrioPurchaseInvLine,SymbrioPurchaseInvHeader,GenJournalLine,LineNo);
    END;

    LOCAL PROCEDURE HandleMergedAccLinesCredit@1100285510(VAR GenJournalLine@1100285507 : Record 81;VAR LineNo@1100285508 : Integer;VerificationNo@1100285502 : Text[30];InvLineID@1100285501 : Integer;AccSuffixPurchType@1100285505 : Code[10]);
    VAR
      SymbrioPurchaseInvHeader@1100285503 : Record 11127980;
      SymbrioPurchaseInvLine@1100285504 : Record 11127981;
      ExtendedLineNo@1100285500 : Record 11127984;
      PurchInvLine@1100285506 : Record 125;
      PurchInvHeader@1000000000 : Record 124;
    BEGIN
      IF NOT PurchInvHeader.GET(VerificationNo) THEN
        ERROR(Text013,VerificationNo);

      ExtendedLineNo.RESET;
      ExtendedLineNo.SETRANGE("Document Type", ExtendedLineNo."Document Type"::"Credit Memo");
      ExtendedLineNo.SETRANGE("Document No.", VerificationNo);
      ExtendedLineNo.SETRANGE("Extended LineNo.", InvLineID);
      IF ExtendedLineNo.FINDSET THEN REPEAT

        // Check in the symbrio line buffer if the line has been handled already. If not,
        // then insert the line to the journal.
        SymbrioPurchaseInvHeader.SETRANGE(VerificationNo,ExtendedLineNo."Document No.");
        IF SymbrioPurchaseInvHeader.FINDFIRST THEN BEGIN
          SymbrioPurchaseInvLine.SETRANGE(InvoiceHeadID,SymbrioPurchaseInvHeader.InvoiceHeadID);
          SymbrioPurchaseInvLine.SETRANGE(OrderHeadID,SymbrioPurchaseInvHeader.OrderHeadID);
          SymbrioPurchaseInvLine.SETRANGE(InvoiceLineID,FORMAT(ExtendedLineNo."Extended LineNo."));
          SymbrioPurchaseInvLine.SETRANGE(LineNo,ExtendedLineNo.Line);
          IF NOT SymbrioPurchaseInvLine.FINDFIRST THEN BEGIN

            IF NOT PurchInvLine.GET(ExtendedLineNo."Document No.",ExtendedLineNo."Line No.") THEN
              ERROR(Text014,ExtendedLineNo."Document No.",ExtendedLineNo."Line No.");

            // Create Journal Line for correction
            CreateGenJnlLineFromPurchInvLineCredit(AccSuffixPurchType,
                                             PurchInvLine,
                                             PurchInvHeader,
                                             SymbrioPurchaseInvHeader,
                                             GenJournalLine,
                                             LineNo);

          END;
        END;

      UNTIL ExtendedLineNo.NEXT=0;
    END;

    LOCAL PROCEDURE CheckInvoiceLineCredit@1100285516(PurchCrInvLine@1100285001 : Record 125;SymbrioPurchaseInvLine@1100285000 : Record 11127981;SymbrioPurchaseInvHeader@1100285006 : Record 11127980) Identical : Boolean;
    VAR
      Qty@1100285002 : Decimal;
      Price@1100285003 : Decimal;
      Qty2@1100285005 : Decimal;
      Price2@1100285004 : Decimal;
      TradeItem@1100285008 : Record 11012317;
      PeriodicDate@1100285009 : Date;
      ContractCode@1100285013 : Code[10];
      LenghtContractCode@1100285012 : Integer;
      StartPos@1100285011 : Integer;
      ContractCodeFound@1100285010 : Boolean;
      ExtensionContract@1100285014 : Record 11012004;
      NewStringDim1@1100285015 : Text[30];
      DimensionSetEntry@1100285500 : Record 480;
      NewStringDim2@1100285501 : Text[30];
      LengthOfProjNo2@1100285505 : Integer;
      ProjectNo2@1100285503 : Text[30];
      Dim2Symbrio2@1100285502 : Code[20];
      PurchInvLine@1101285000 : Record 123;
    BEGIN
      PurchInvLine.TRANSFERFIELDS(PurchCrInvLine,FALSE);
      PurchInvLine."Receipt No." := PurchCrInvLine."Receipt No.";
      PurchInvLine."Receipt Line No." := PurchCrInvLine."Receipt Line No.";

      EXIT(CheckInvoiceLine(PurchInvLine,SymbrioPurchaseInvLine,SymbrioPurchaseInvHeader));
    END;

    LOCAL PROCEDURE ApplyRounding@1100285507(VAR PurchaseHeaderInv@1100285503 : Record 38;VAR SymbrioPurchaseInvHeader@1100285507 : Record 11127980) : Boolean;
    VAR
      SymbrioPurchaseInvLine2@1100285500 : Record 11127981;
      PurchSetup@1100285502 : Record 312;
      lPurchaseLine@1100285001 : Record 39;
      Currency@1100285000 : Record 4;
      TotSumFromLineSum@1100285506 : Decimal;
      LineSumFrSymbrio@1100285505 : Decimal;
      InvoiceRoundingAmount@1100285504 : Decimal;
      TotalSum@1100285508 : Decimal;
      TotLineSum@1100285514 : Decimal;
      PurchPost@1100285100 : Codeunit 90;
    BEGIN
      PurchSetup.GET;
      IF (NOT PurchSetup."Invoice Rounding") THEN BEGIN
        EXIT(AddInvoiceNetAdjustment(PurchaseHeaderInv,SymbrioPurchaseInvHeader)); //SYM093
      END;

      IF PurchaseHeaderInv."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE BEGIN
        Currency.GET(PurchaseHeaderInv."Currency Code");
        Currency.TESTFIELD("Amount Rounding Precision");
      END;

      TotLineSum := 0;
      //Fr†n purchaseline
      lPurchaseLine.SETRANGE("Document Type",PurchaseHeaderInv."Document Type");
      lPurchaseLine.SETRANGE("Document No.",PurchaseHeaderInv."No.");
      IF lPurchaseLine.FINDSET THEN BEGIN
        REPEAT
          //TotLineSum := TotLineSum + lPurchaseLine."Amount Including VAT";
          TotLineSum := TotLineSum + lPurchaseLine."Line Amount" * (1+(lPurchaseLine."VAT %"/100));
        UNTIL lPurchaseLine.NEXT=0;
      lPurchaseLine.RESET;
      END;

      EVALUATE(TotalSum,SymbrioPurchaseInvHeader.TotalSum);
      IF PurchaseHeaderInv."Document Type" = PurchaseHeaderInv."Document Type"::"Credit Memo" THEN
        TotalSum := -TotalSum;

      TotLineSum := ROUND(TotLineSum,Currency."Amount Rounding Precision",Currency.InvoiceRoundingDirection);

      InvoiceRoundingAmount :=
        -ROUND(
          TotLineSum -
          ROUND(
            TotalSum,
            Currency."Invoice Rounding Precision",
            Currency.InvoiceRoundingDirection),
          Currency."Amount Rounding Precision");

      IF InvoiceRoundingAmount = 0 THEN
        EXIT(FALSE);

      //>>ENH-SYM-009
      GetSymbrioSetup;
      IF (SymbrioSetup."Max Rounding Amount" <> 0) AND (SymbrioSetup."Max Rounding Amount"<ABS(InvoiceRoundingAmount)) THEN
        EXIT(FALSE);
      //>>ENH-SYM-009

      EXIT(AddInvRoundingLine(PurchaseHeaderInv,InvoiceRoundingAmount));
      //>>140219 ENHSYM001 ITERO.DJ
    END;

    LOCAL PROCEDURE AddInvoiceNetAdjustment@1100285003(VAR PurchaseHeaderInv@1100285001 : Record 38;VAR SymbrioPurchaseInvHeader@1100285000 : Record 11127980) : Boolean;
    VAR
      lPurchaseLine@1100285002 : Record 39;
      TotLineSum@1100285003 : Decimal;
      TotalSum@1100285004 : Decimal;
      InvoiceRoundingAmount@1100285005 : Decimal;
      PurchPost@1100285100 : Codeunit 90;
    BEGIN
      TotLineSum := 0;

      lPurchaseLine.SETRANGE("Document Type",PurchaseHeaderInv."Document Type");
      lPurchaseLine.SETRANGE("Document No.",PurchaseHeaderInv."No.");
      IF lPurchaseLine.FINDSET(FALSE) THEN BEGIN
        REPEAT
          TotLineSum := TotLineSum + lPurchaseLine."Amount Including VAT";
        UNTIL lPurchaseLine.NEXT=0;
        lPurchaseLine.RESET;
      END;

      EVALUATE(TotalSum,SymbrioPurchaseInvHeader.TotalSum);
      IF SymbrioPurchaseInvHeader.InvoiceType = 'Credit' THEN
        TotalSum := -TotalSum;

      InvoiceRoundingAmount := TotalSum - TotLineSum;

      GetSymbrioSetup;
      IF (SymbrioSetup."Max Rounding Amount" <> 0) AND (SymbrioSetup."Max Rounding Amount"<ABS(InvoiceRoundingAmount)) THEN
        EXIT(FALSE);

      IF InvoiceRoundingAmount = 0 THEN
        EXIT(FALSE);

      EXIT(AddInvRoundingLine(PurchaseHeaderInv,InvoiceRoundingAmount));
    END;

    LOCAL PROCEDURE AddInvRoundingLine@1100285036(VAR PurchaseHeaderInv@1100285000 : Record 38;InvoiceRoundingAmount@1100285001 : Decimal) : Boolean;
    VAR
      VendPostingGr@1100285002 : Record 93;
      lPurchaseLine@1100285006 : Record 39;
      Currency@1100285007 : Record 4;
      BiggestLineNo@1100285005 : Integer;
      SavedStatusCheckSuspended@1100285004 : Boolean;
      LineVAT@1100285003 : Decimal;
      PurchPost@1100285100 : Codeunit 90;
    BEGIN
      //>>170822
      lPurchaseLine.SETRANGE("Document Type",PurchaseHeaderInv."Document Type");
      lPurchaseLine.SETRANGE("Document No.",PurchaseHeaderInv."No.");
      IF NOT lPurchaseLine.FINDLAST THEN EXIT(FALSE);

      IF PurchPost.AddInvoiceRoundingLine(InvoiceRoundingAmount,FALSE,lPurchaseLine."Line No.",PurchaseHeaderInv,lPurchaseLine) THEN
        EXIT(lPurchaseLine.INSERT);

      // IF PurchaseHeaderInv."Currency Code" = '' THEN
      //  Currency.InitRoundingPrecision
      // ELSE BEGIN
      //  Currency.GET(PurchaseHeaderInv."Currency Code");
      //  Currency.TESTFIELD("Amount Rounding Precision");
      // END;
      //
      // VendPostingGr.GET(PurchaseHeaderInv."Vendor Posting Group");
      // VendPostingGr.TESTFIELD("Invoice Rounding Account");
      // BiggestLineNo := 0;
      //
      // lPurchaseLine.SETRANGE("Document Type",PurchaseHeaderInv."Document Type");
      // lPurchaseLine.SETRANGE("Document No.",PurchaseHeaderInv."No.");
      // IF lPurchaseLine.FINDLAST THEN
      //  BiggestLineNo := lPurchaseLine."Line No.";
      //
      // WITH lPurchaseLine DO BEGIN
      //  INIT;
      //  "Document Type" := PurchaseHeaderInv."Document Type";
      //  "Document No." := PurchaseHeaderInv."No.";
      //  BiggestLineNo := BiggestLineNo + 10000;
      //  "System-Created Entry" := TRUE;
      //  SavedStatusCheckSuspended := GetStatusCheckSuspended;  //**4PS C002812
      //  SuspendStatusCheck(TRUE);                              //**4PS C002812   must be True anycase
      //  SetSkipCheckSigns(TRUE);  //*4PS.n C001910
      //  "Line No." := BiggestLineNo;
      //  VALIDATE(Type,Type::"G/L Account");
      //  VALIDATE("No.",VendPostingGr."Invoice Rounding Account");
      //  VALIDATE(Quantity,1);
      //  IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
      //    VALIDATE("Return Qty. to Ship",Quantity)
      //  ELSE
      //    VALIDATE("Qty. to Receive",Quantity);
      //  IF PurchaseHeaderInv."Prices Including VAT" THEN
      //    VALIDATE("Direct Unit Cost",InvoiceRoundingAmount)
      //  ELSE
      //    VALIDATE(
      //      "Direct Unit Cost",
      //      ROUND(
      //        InvoiceRoundingAmount /
      //        (1 + (1 - PurchHeader."VAT Base Discount %" / 100) * "VAT %" / 100),
      //        Currency."Amount Rounding Precision"));
      //  VALIDATE("Amount Including VAT",InvoiceRoundingAmount);
      //  SetSkipCheckSigns(FALSE);  //*4PS.n C001910
      //  SuspendStatusCheck(SavedStatusCheckSuspended);                              //**4PS C002812  reset to saved value
      //
      //  INSERT;
      // END;
      //
      // EXIT(TRUE);
      //<<170822
    END;

    LOCAL PROCEDURE ApplyRoundingLineJournal@1100285029(VAR GenJournalLine@1100285503 : Record 81) : Boolean;
    VAR
      PurchSetup@1100285502 : Record 312;
      Currency@1100285501 : Record 4;
      TotSumFromLineSum@1100285506 : Decimal;
      LineSumFrSymbrio@1100285505 : Decimal;
      InvoiceRoundingAmount@1100285504 : Decimal;
      TotalSum@1100285508 : Decimal;
      VendPostingGr@1100285509 : Record 93;
      BiggestLineNo@1100285511 : Integer;
      SavedStatusCheckSuspended@1100285512 : Boolean;
      LineVAT@1100285513 : Decimal;
      TotLineSum@1100285514 : Decimal;
      GenJournalLineOld@1100285000 : Record 81;
    BEGIN
      //>>140219 ENHSYM001 ITERO.DJ
      PurchSetup.GET;
      IF NOT PurchSetup."Invoice Rounding" THEN
        EXIT(FALSE);

      IF GenJournalLine."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE BEGIN
        Currency.GET(GenJournalLine."Currency Code");
        Currency.TESTFIELD("Amount Rounding Precision");
      END;

      TotLineSum := 0;
      //Fr†n purchaseline
      IF GenJournalLine.FINDSET THEN BEGIN
        REPEAT
          TotLineSum := TotLineSum + GenJournalLine."Amount (LCY)";
        UNTIL GenJournalLine.NEXT=0;
      END;

      InvoiceRoundingAmount := -TotLineSum;

      IF InvoiceRoundingAmount = 0 THEN
        EXIT(FALSE);

      //>>ENH-SYM-009
      GetSymbrioSetup;
      IF (SymbrioSetup."Max Rounding Amount" <> 0) AND (SymbrioSetup."Max Rounding Amount"<ABS(InvoiceRoundingAmount)) THEN
        EXIT(FALSE);
      //>>ENH-SYM-009

      GenJournalLineOld := GenJournalLine;
      GenJournalLine."Line No." := GenJournalLineOld."Line No." + 10000;
      GenJournalLine."Currency Code" := '';   //190124
      GenJournalLine."Currency Factor" := 0;  //190124
      GenJournalLine.VALIDATE(Amount, InvoiceRoundingAmount);
      GenJournalLine.Description := 'Document Rounding';
      GenJournalLine.INSERT(TRUE);

      EXIT(TRUE);
    END;

    PROCEDURE ExtendedLineNoExists@1100285019(VAR SymbrioPurchaseInvLine@1100285000 : Record 11127981) : Boolean;
    VAR
      ExtendedLineNo@1100285001 : Record 11127984;
      SymbrioPurchaseInvHeader@1100285002 : Record 11127980;
      PurchInvLine@1100285003 : Record 123;
      PurchCrMemoLine@1100285006 : Record 125;
      LineID@1100285004 : Integer;
      OrderLinePositionInt@1100285005 : Integer;
      QuantityDec@1100285007 : Decimal;
      LineCreated@1100285008 : Boolean;
    BEGIN
      // SYM060
      SymbrioPurchaseInvHeader.SETRANGE(InvoiceHeadID,SymbrioPurchaseInvLine.InvoiceHeadID);
      SymbrioPurchaseInvHeader.SETRANGE(OrderHeadID,SymbrioPurchaseInvLine.OrderHeadID);
      SymbrioPurchaseInvHeader.SETRANGE("Source Filename", SymbrioPurchaseInvLine."Source Filename"); // 150420 ITERO.MH
      SymbrioPurchaseInvHeader.FINDLAST();


      ExtendedLineNo.RESET;
      IF (EVALUATE(LineID, SymbrioPurchaseInvLine.InvoiceLineID)) THEN;

      IF (SymbrioPurchaseInvHeader.InvoiceType <> 'Credit') THEN
         ExtendedLineNo.SETRANGE("Document Type", ExtendedLineNo."Document Type"::Invoice)
      ELSE
         ExtendedLineNo.SETRANGE("Document Type", ExtendedLineNo."Document Type"::"Credit Memo");

      ExtendedLineNo.SETRANGE("Document No.",SymbrioPurchaseInvHeader.VerificationNo);
      ExtendedLineNo.SETRANGE("Extended LineNo.", LineID);
      ExtendedLineNo.SETRANGE(Line,SymbrioPurchaseInvLine.LineNo);
      IF (ExtendedLineNo.ISEMPTY) THEN EXIT(FALSE) ELSE EXIT(TRUE);
    END;

    PROCEDURE DeleteExtendedLineNo@1100285027(VAR SymbrioPurchaseInvLine@1100285000 : Record 11127981);
    VAR
      ExtendedLineNo@1100285009 : Record 11127984;
      SymbrioPurchaseInvHeader@1100285008 : Record 11127980;
      PurchInvLine@1100285007 : Record 123;
      PurchCrMemoLine@1100285006 : Record 125;
      LineID@1100285005 : Integer;
      OrderLinePositionInt@1100285004 : Integer;
      QuantityDec@1100285003 : Decimal;
      LineCreated@1100285002 : Boolean;
    BEGIN
      // SYM060
      SymbrioPurchaseInvHeader.SETRANGE(InvoiceHeadID,SymbrioPurchaseInvLine.InvoiceHeadID);
      SymbrioPurchaseInvHeader.SETRANGE(OrderHeadID,SymbrioPurchaseInvLine.OrderHeadID);
      SymbrioPurchaseInvHeader.SETRANGE("Source Filename", SymbrioPurchaseInvLine."Source Filename"); // 150420 ITERO.MH
      SymbrioPurchaseInvHeader.FINDLAST();


      ExtendedLineNo.RESET;
      IF (EVALUATE(LineID, SymbrioPurchaseInvLine.InvoiceLineID)) THEN;

      IF (SymbrioPurchaseInvHeader.InvoiceType <> 'Credit') THEN
         ExtendedLineNo.SETRANGE("Document Type", ExtendedLineNo."Document Type"::Invoice)
      ELSE
         ExtendedLineNo.SETRANGE("Document Type", ExtendedLineNo."Document Type"::"Credit Memo");

      ExtendedLineNo.SETRANGE("Document No.",SymbrioPurchaseInvHeader.VerificationNo);
      ExtendedLineNo.SETRANGE("Extended LineNo.", LineID);
      ExtendedLineNo.SETRANGE(Line,SymbrioPurchaseInvLine.LineNo);
      ExtendedLineNo.DELETEALL(TRUE);
    END;

    PROCEDURE DeleteExtendedLineNoFromDocument@1100285022(VAR SymbrioPurchaseInvHeader@1100285000 : Record 11127980);
    VAR
      ExtendedLineNo@1100285001 : Record 11127984;
    BEGIN
      // SYM060
      IF (SymbrioPurchaseInvHeader.VerificationNo = '') THEN EXIT;

      ExtendedLineNo.RESET();
      IF (SymbrioPurchaseInvHeader.InvoiceType <> 'Credit') THEN
         ExtendedLineNo.SETRANGE("Document Type", ExtendedLineNo."Document Type"::Invoice)
      ELSE
         ExtendedLineNo.SETRANGE("Document Type", ExtendedLineNo."Document Type"::"Credit Memo");
      ExtendedLineNo.SETRANGE("Document No.", SymbrioPurchaseInvHeader.VerificationNo);
      IF NOT ExtendedLineNo.ISEMPTY THEN ExtendedLineNo.DELETEALL;
    END;

    PROCEDURE OpenAndApplyInvoiceLines@1100285020(VAR SymbrioInvLine@1100285000 : Record 11127981);
    VAR
      SymbrioInvHeader@1100285007 : Record 11127980;
      PurchCrMemoLine@1100285006 : Record 125;
      PurchCrMemoLine2@1100285008 : Record 125;
      PurchInvLine@1100285005 : Record 123;
      PurchInvLine2@1100285009 : Record 123;
      pgPostedPurchaseInvoiceLines@1100285004 : Page 529;
      pgPostedPuchaseCrMemoLines@1100285003 : Page 530;
      ExtendedLineNo@1100285002 : Record 11127984;
      LineID@1100285001 : Integer;
    BEGIN
      // SYM060
      SymbrioInvHeader.SETRANGE(InvoiceHeadID, SymbrioInvLine.InvoiceHeadID);
      SymbrioInvHeader.SETRANGE(OrderHeadID, SymbrioInvLine.OrderHeadID);
      SymbrioInvHeader.SETRANGE("Source Filename", SymbrioInvLine."Source Filename"); // 150420 ITERO.MH
      SymbrioInvHeader.FINDLAST();

      IF (EVALUATE(LineID, SymbrioInvLine.InvoiceLineID)) THEN;

      IF (SymbrioInvHeader.InvoiceType <> 'Credit') THEN BEGIN

         PurchInvLine.RESET();
         ExtendedLineNo.RESET();
         ExtendedLineNo.SETRANGE("Document Type", ExtendedLineNo."Document Type"::Invoice);
         ExtendedLineNo.SETRANGE("Document No.", SymbrioInvHeader.VerificationNo);
         ExtendedLineNo.SETRANGE("Extended LineNo.", LineID);
         ExtendedLineNo.SETRANGE(Line,SymbrioInvLine.LineNo);
         PurchInvLine.SETRANGE("Document No.", SymbrioInvHeader.VerificationNo);
         CLEAR(PurchInvLine2);
         IF (ExtendedLineNo.FINDSET(FALSE)) THEN BEGIN
            REPEAT
               PurchInvLine2.GET(ExtendedLineNo."Document No.", ExtendedLineNo."Line No.");
               PurchInvLine2.MARK(TRUE);
            UNTIL ExtendedLineNo.NEXT = 0;
            PurchInvLine2.MARKEDONLY(TRUE);
         END;

         pgPostedPurchaseInvoiceLines.SETTABLEVIEW(PurchInvLine);
         pgPostedPurchaseInvoiceLines.SETRECORD(PurchInvLine2);

         pgPostedPurchaseInvoiceLines.EDITABLE(FALSE);

         pgPostedPurchaseInvoiceLines.LOOKUPMODE(TRUE);
         IF (pgPostedPurchaseInvoiceLines.RUNMODAL = ACTION::LookupOK) THEN BEGIN
            pgPostedPurchaseInvoiceLines.GETRECORD(PurchInvLine);
            IF (ExtendedLineNo.GET(ExtendedLineNo."Document Type"::Invoice, PurchInvLine."Document No.", PurchInvLine."Line No.")) THEN BEGIN
               IF CONFIRM(Text019, TRUE, ExtendedLineNo."Extended LineNo.") THEN BEGIN
                  ExtendedLineNo.VALIDATE("Extended LineNo.", LineID);
                  ExtendedLineNo.Line := SymbrioInvLine.LineNo;
                  ExtendedLineNo.MODIFY(TRUE);
               END;

            END ELSE BEGIN
               ExtendedLineNo.INIT;
               ExtendedLineNo.VALIDATE("Document Type",ExtendedLineNo."Document Type"::Invoice);
               ExtendedLineNo.VALIDATE("Document No.", PurchInvLine."Document No.");
               ExtendedLineNo.VALIDATE("Line No.", PurchInvLine."Line No.");
               ExtendedLineNo.INSERT(TRUE);
               ExtendedLineNo.VALIDATE("Extended LineNo.", LineID);
               ExtendedLineNo.Line := SymbrioInvLine.LineNo;
               ExtendedLineNo.MODIFY(TRUE);
            END;
         END;
      END ELSE BEGIN

         PurchCrMemoLine.RESET();
         ExtendedLineNo.RESET();
         ExtendedLineNo.SETRANGE("Document Type", ExtendedLineNo."Document Type"::"Credit Memo");
         ExtendedLineNo.SETRANGE("Document No.", SymbrioInvHeader.VerificationNo);
         ExtendedLineNo.SETRANGE("Extended LineNo.", LineID);
         ExtendedLineNo.SETRANGE(Line,SymbrioInvLine.LineNo);
         PurchCrMemoLine.SETRANGE("Document No.", SymbrioInvHeader.VerificationNo);
         CLEAR(PurchCrMemoLine2);
         IF (ExtendedLineNo.FINDSET(FALSE)) THEN BEGIN
            REPEAT
               PurchCrMemoLine2.GET(ExtendedLineNo."Document No.", ExtendedLineNo."Line No.");
               PurchCrMemoLine2.MARK(TRUE);
            UNTIL ExtendedLineNo.NEXT = 0;
            PurchCrMemoLine2.MARKEDONLY(TRUE);
         END;

         pgPostedPuchaseCrMemoLines.SETTABLEVIEW(PurchCrMemoLine);
         pgPostedPuchaseCrMemoLines.SETRECORD(PurchCrMemoLine2);
         pgPostedPuchaseCrMemoLines.EDITABLE(FALSE);

         pgPostedPuchaseCrMemoLines.LOOKUPMODE(TRUE);
         IF (pgPostedPuchaseCrMemoLines.RUNMODAL = ACTION::LookupOK) THEN BEGIN
            pgPostedPuchaseCrMemoLines.GETRECORD(PurchCrMemoLine);
            IF (ExtendedLineNo.GET(ExtendedLineNo."Document Type"::"Credit Memo", PurchCrMemoLine."Document No.", PurchCrMemoLine."Line No.")) THEN BEGIN
               IF CONFIRM(Text019, TRUE, ExtendedLineNo."Extended LineNo.") THEN BEGIN
                  ExtendedLineNo.VALIDATE("Extended LineNo.", LineID);
                  ExtendedLineNo.Line := SymbrioInvLine.LineNo;
                  ExtendedLineNo.MODIFY(TRUE);
               END;
            END ELSE BEGIN

               ExtendedLineNo.INIT;
               ExtendedLineNo.VALIDATE("Document Type",ExtendedLineNo."Document Type"::"Credit Memo");
               ExtendedLineNo.VALIDATE("Document No.", PurchCrMemoLine."Document No.");
               ExtendedLineNo.VALIDATE("Line No.", PurchCrMemoLine."Line No.");
               ExtendedLineNo.INSERT(TRUE);
               ExtendedLineNo.VALIDATE("Extended LineNo.", LineID);
               ExtendedLineNo.Line := SymbrioInvLine.LineNo;
               ExtendedLineNo.MODIFY(TRUE);
            END;
         END;

      END;
    END;

    PROCEDURE CheckAndApplyInvoiceLines@1100285021(VAR SymbrioInvHeader@1100285000 : Record 11127980);
    VAR
      SymbrioInvLine@1100285008 : Record 11127981;
      PurchCrMemoLine@1100285006 : Record 125;
      PurchInvLine@1100285005 : Record 123;
      PurchInvLine2@1100285014 : Record 123;
      pgPostedPurchaseInvoiceLines@1100285004 : Page 529;
      pgPostedPuchaseCrMemoLines@1100285003 : Page 530;
      ExtendedLineNo@1100285002 : Record 11127984;
      ExtendedLineNo2@1100285011 : Record 11127984;
      LineID@1100285001 : Integer;
      dAmount@1100285007 : Decimal;
      dQuantity@1100285010 : Decimal;
      savedAmt@1100285012 : Decimal;
      savedQty@1100285013 : Decimal;
      plSumAmt@1100285015 : Decimal;
      plSumQty@1100285016 : Decimal;
    BEGIN

      GetSymbrioSetup();
      ExtendedLineNo.RESET;

      SymbrioInvLine.SETRANGE(InvoiceHeadID, SymbrioInvHeader.InvoiceHeadID);
      SymbrioInvLine.SETRANGE(OrderHeadID, SymbrioInvHeader.OrderHeadID);
      SymbrioInvLine.SETRANGE("Source Filename", SymbrioInvHeader."Source Filename"); // 150420 SYM060 ITERO.MH

      IF (SymbrioInvLine.FINDSET(FALSE)) THEN REPEAT

         IF (EVALUATE(LineID, SymbrioInvLine.InvoiceLineID)) THEN;

         IF (SymbrioInvHeader.InvoiceType <> 'Credit') THEN
            ExtendedLineNo.SETRANGE("Document Type", ExtendedLineNo."Document Type"::Invoice)
         ELSE
            ExtendedLineNo.SETRANGE("Document Type", ExtendedLineNo."Document Type"::"Credit Memo");

         ExtendedLineNo.SETRANGE("Document No.",SymbrioInvHeader.VerificationNo);
         ExtendedLineNo.SETRANGE("Extended LineNo.", LineID);
         ExtendedLineNo.SETRANGE(Line, SymbrioInvLine.LineNo);
         IF (ExtendedLineNo.ISEMPTY) THEN BEGIN

            IF (EVALUATE(dAmount, SymbrioInvLine.Amount)) THEN;
            IF (EVALUATE(dQuantity, SymbrioInvLine.Quantity)) THEN;

      //150527
            savedAmt := 0;
            savedQty := 0;

            IF (SymbrioInvHeader.InvoiceType <> 'Credit') THEN BEGIN
               PurchInvLine.SETRANGE("Document No.", SymbrioInvHeader.VerificationNo);
               IF (PurchInvLine.FINDSET(FALSE)) THEN REPEAT

                  IF (ABS(PurchInvLine.Amount - dAmount) <= SymbrioSetup."Max Rounding Amount") AND
                      (PurchInvLine.Quantity = dQuantity) AND
                      (UPPERCASE(COPYSTR(PurchInvLine.Description, 1, 8)) = UPPERCASE(COPYSTR(SymbrioInvLine.ArticleName, 1, 8)))
                    THEN BEGIN
                      IF NOT (ExtendedLineNo.GET(ExtendedLineNo."Document Type"::Invoice, PurchInvLine."Document No.", PurchInvLine."Line No.")) THEN BEGIN
                        ExtendedLineNo.INIT;
                        ExtendedLineNo.VALIDATE("Document Type",ExtendedLineNo."Document Type"::Invoice);
                        ExtendedLineNo.VALIDATE("Document No.", PurchInvLine."Document No.");
                        ExtendedLineNo.VALIDATE("Line No.", PurchInvLine."Line No.");
                        ExtendedLineNo.INSERT(TRUE);
                        ExtendedLineNo.VALIDATE("Extended LineNo.", LineID);
                        ExtendedLineNo.Line := SymbrioInvLine.LineNo;
                        ExtendedLineNo.MODIFY(TRUE);
                     END;
      //>>150526
                    END
                    ELSE
                    // 1 symbrio line, >1 nav line same sign
                    //>>RAD025
                    //IF (UPPERCASE(PurchInvLine.Description) = UPPERCASE(SymbrioInvLine.ArticleName)) AND
                    IF  (UPPERCASE(PurchInvLine.Description) = UPPERCASE(COPYSTR(SymbrioInvLine.ArticleName, 1, MAXSTRLEN(PurchInvLine.Description)))) AND
                        (UPPERCASE(PurchInvLine."Description 2") =
                         UPPERCASE(COPYSTR(SymbrioInvLine.ArticleName, MAXSTRLEN(PurchInvLine.Description)+1, MAXSTRLEN(PurchInvLine."Description 2")))) AND
                    //<<RAD025
                        ((savedAmt + PurchInvLine.Amount) <= (dAmount + SymbrioSetup."Max Rounding Amount")) AND
                        ((savedQty + PurchInvLine.Quantity) <= dQuantity) AND
                        (NOT (ExtendedLineNo.GET(ExtendedLineNo."Document Type"::Invoice, PurchInvLine."Document No.", PurchInvLine."Line No."))) THEN
                      BEGIN
                        ExtendedLineNo.INIT;
                        ExtendedLineNo.VALIDATE("Document Type",ExtendedLineNo."Document Type"::Invoice);
                        ExtendedLineNo.VALIDATE("Document No.", PurchInvLine."Document No.");
                        ExtendedLineNo.VALIDATE("Line No.", PurchInvLine."Line No.");
                        ExtendedLineNo.INSERT(TRUE);
                        ExtendedLineNo.VALIDATE("Extended LineNo.", LineID);
                        ExtendedLineNo.Line := SymbrioInvLine.LineNo;
                        ExtendedLineNo.MODIFY(TRUE);
                        savedAmt += PurchInvLine.Amount;
                        savedQty += PurchInvLine.Quantity;
                    END
      //<<150526
      //>>150527
                    ELSE BEGIN
                    // 1 symbrio line, >1 nav line different sign, same total amount & quantity
                      PurchInvLine2.RESET;
                      PurchInvLine2.COPYFILTERS(PurchInvLine);
                      PurchInvLine2.SETRANGE(Type,PurchInvLine.Type);
                      PurchInvLine2.SETRANGE("No.",PurchInvLine."No.");
                      PurchInvLine2.SETRANGE(Description,PurchInvLine.Description);
                      PurchInvLine2.SETRANGE("Job No.",SymbrioInvLine.AccountRefProject);
                      plSumAmt := 0;
                      plSumQty := 0;
                      IF PurchInvLine2.FINDSET(FALSE) THEN
                      REPEAT
                        plSumAmt += PurchInvLine2.Amount;
                        plSumQty += PurchInvLine2.Quantity;
                      UNTIL PurchInvLine2.NEXT=0;
                      //>>RAD025
                      //IF (UPPERCASE(PurchInvLine.Description) = UPPERCASE(SymbrioInvLine.ArticleName)) AND
                      IF  (UPPERCASE(PurchInvLine.Description) = UPPERCASE(COPYSTR(SymbrioInvLine.ArticleName, 1, MAXSTRLEN(PurchInvLine.Description)))) AND
                          (UPPERCASE(PurchInvLine."Description 2") =
                           UPPERCASE(COPYSTR(SymbrioInvLine.ArticleName, MAXSTRLEN(PurchInvLine.Description)+1, MAXSTRLEN(PurchInvLine."Description 2")))) AND
                      //<<RAD025
                          ((plSumAmt) <= (dAmount + SymbrioSetup."Max Rounding Amount")) AND
                          ((plSumQty) <= dQuantity) AND
                          (NOT (ExtendedLineNo.GET(ExtendedLineNo."Document Type"::Invoice, PurchInvLine."Document No.", PurchInvLine."Line No."))) THEN
                        BEGIN
                          ExtendedLineNo.INIT;
                          ExtendedLineNo.VALIDATE("Document Type",ExtendedLineNo."Document Type"::Invoice);
                          ExtendedLineNo.VALIDATE("Document No.", PurchInvLine."Document No.");
                          ExtendedLineNo.VALIDATE("Line No.", PurchInvLine."Line No.");
                          ExtendedLineNo.INSERT(TRUE);
                          ExtendedLineNo.VALIDATE("Extended LineNo.", LineID);
                          ExtendedLineNo.Line := SymbrioInvLine.LineNo;
                          ExtendedLineNo.MODIFY(TRUE);
                          savedAmt += PurchInvLine.Amount;
                          savedQty += PurchInvLine.Quantity;
                    END;
      //<<150527

                  END;
               UNTIL PurchInvLine.NEXT = 0;
            END ELSE  BEGIN
               PurchCrMemoLine.SETRANGE("Document No.", SymbrioInvHeader.VerificationNo);
               IF (PurchCrMemoLine.FINDSET(FALSE)) THEN REPEAT
                  IF (ABS(PurchCrMemoLine.Amount - ABS(dAmount)) <= SymbrioSetup."Max Rounding Amount") AND
                  (PurchCrMemoLine.Quantity = ABS(dQuantity)) AND
                  (UPPERCASE(COPYSTR(PurchCrMemoLine.Description, 1, 8)) = UPPERCASE(COPYSTR(SymbrioInvLine.ArticleName, 1, 8)))
                  THEN BEGIN
                     IF NOT (ExtendedLineNo.GET(ExtendedLineNo."Document Type"::"Credit Memo", PurchCrMemoLine."Document No.", PurchCrMemoLine."Line No.")) THEN BEGIN
                        ExtendedLineNo.INIT;
                        ExtendedLineNo.VALIDATE("Document Type",ExtendedLineNo."Document Type"::"Credit Memo");
                        ExtendedLineNo.VALIDATE("Document No.", PurchCrMemoLine."Document No.");
                        ExtendedLineNo.VALIDATE("Line No.", PurchCrMemoLine."Line No.");
                        ExtendedLineNo.INSERT(TRUE);
                        ExtendedLineNo.VALIDATE("Extended LineNo.", LineID);
                        ExtendedLineNo.Line := SymbrioInvLine.LineNo;
                        ExtendedLineNo.MODIFY(TRUE);
                     END;
                  END;
               UNTIL PurchCrMemoLine.NEXT = 0;
            END;
         END;
      UNTIL SymbrioInvLine.NEXT = 0;
    END;

    PROCEDURE CheckAndPostInvoice@1100409002(SymbrioPurchaseInvHeader@1100409000 : Record 11127980);
    VAR
      PurchaseHeaderInv@1100409001 : Record 38;
      PurchaseLineInv@1100409009 : Record 39;
      SymbrioPurchaseInvLine@1100409006 : Record 11127981;
      PurchSetup@1100409004 : Record 312;
      Currency@1100409005 : Record 4;
      ExtendedLineNo@1100409008 : Record 11127984;
      InvoiceLineID@1100409007 : Integer;
      TotalSum@1100409003 : Decimal;
      PurchInvHeader@1100409010 : Record 122;
      PurchaseHeaderOrder@1100409011 : Record 38;
      ReleasePurchaseDocument@1100409012 : Codeunit 415;
      RemTools@1100285400 : Codeunit 11128515;
      newDocumentDate@1100285100 : Date;
    BEGIN
      IF SymbrioPurchaseInvHeader.InvoiceStatus <> 'SubmittedAwaitingReceipt' THEN EXIT;

      GetGLSetup;
      GetSymbrioSetup;

      PurchaseHeaderInv.SETRANGE("Document Type",PurchaseHeaderInv."Document Type"::Invoice);
      IF SymbrioPurchaseInvHeader.InvoiceType='Credit' THEN
        PurchaseHeaderInv.SETRANGE("Document Type",PurchaseHeaderInv."Document Type"::"Credit Memo");

      PurchaseHeaderInv.SETRANGE("Ext. Document ID",SymbrioPurchaseInvHeader.InvoiceHeadID);
      IF NOT PurchaseHeaderInv.FINDFIRST THEN ERROR('PurchaseHeader not found');

      IF SymbrioPurchaseInvHeader.OrderHeadID <> '' THEN
        IF NOT PurchaseHeaderOrder.GET(PurchaseHeaderOrder."Document Type"::Order, SymbrioPurchaseInvHeader.OrderHeadID) THEN
          ERROR(Text001, SymbrioPurchaseInvHeader.OrderHeadID);

      IF (PurchaseHeaderInv."Buy-from Vendor No." <> SymbrioPurchaseInvHeader.SupplierIdentification) THEN
        ERROR('Head.SupplierIdentification');
      IF (PurchaseHeaderInv."Document Type" = PurchaseHeaderInv."Document Type"::Invoice) AND
        (PurchaseHeaderInv."Vendor Invoice No." <> COPYSTR(SymbrioPurchaseInvHeader.SupplierInvoiceNo,1,MAXSTRLEN(SymbrioPurchaseInvHeader.SupplierInvoiceNo))) THEN
          ERROR('Head.SupplierInvoiceNo');
      IF (PurchaseHeaderInv."Document Type" = PurchaseHeaderInv."Document Type"::"Credit Memo") AND
        (PurchaseHeaderInv."Vendor Cr. Memo No." <> COPYSTR(SymbrioPurchaseInvHeader.SupplierInvoiceNo,1,MAXSTRLEN(SymbrioPurchaseInvHeader.SupplierInvoiceNo))) THEN
          ERROR('Head.SupplierInvoiceNo');

      IF GLSetup."Norwegian Localization Active" THEN
      //>>150623
        IF (NOT CheckIfRefIsNumeric(SymbrioPurchaseInvHeader.PaymentReference)) THEN BEGIN
          IF (PurchaseHeaderInv."Payment Reference" <> COPYSTR(SymbrioPurchaseInvHeader.PaymentReference, 1, MAXSTRLEN(PurchaseHeaderInv."Payment Reference"))) THEN
            ERROR('Head.PaymentReference');
        END ELSE
        IF (RemTools.CheckKID(SymbrioPurchaseInvHeader.PaymentReference) <> '') THEN BEGIN
          IF (PurchaseHeaderInv."Payment Reference" <> COPYSTR(SymbrioPurchaseInvHeader.PaymentReference, 1, MAXSTRLEN(PurchaseHeaderInv."Payment Reference"))) THEN
            ERROR('Head.PaymentReference');
        END ELSE
          IF (PurchaseHeaderInv.KID <> COPYSTR(SymbrioPurchaseInvHeader.PaymentReference, 1, MAXSTRLEN(PurchaseHeaderInv.KID))) THEN
            ERROR('Head.PaymentReference');

      //IF GLSetup."Norwegian Localization Active" THEN
      //  IF RemTools.CheckKID(SymbrioPurchaseInvHeader.PaymentReference) <> '' THEN BEGIN
      //     IF (PurchaseHeaderInv."Payment Reference NO" <> COPYSTR(SymbrioPurchaseInvHeader.PaymentReference, 1, MAXSTRLEN(PurchaseHeaderInv."Payment Reference NO"))) THEN ERROR('Head.PaymentReference');
      //  END ELSE
      //     IF (PurchaseHeaderInv.KID <> COPYSTR(SymbrioPurchaseInvHeader.PaymentReference, 1, MAXSTRLEN(PurchaseHeaderInv.KID))) THEN ERROR('Head.PaymentReference');
      //<<150623


      IF (SymbrioPurchaseInvHeader.Currency <> GLSetup."LCY Code") AND
         (PurchaseHeaderInv."Currency Code"<>SymbrioPurchaseInvHeader.Currency) THEN ERROR('Head.Currency');

      IF PurchaseHeaderInv."Export to Symbrio Type" <> PurchaseHeaderInv."Export to Symbrio Type"::Prelimary THEN ERROR('Head.SymbrioType');

      EVALUATE(TotalSum,SymbrioPurchaseInvHeader.TotalSum);
      PurchSetup.GET;
      IF PurchSetup."Invoice Rounding" THEN BEGIN
        IF PurchaseHeaderInv."Currency Code" = '' THEN
          Currency.InitRoundingPrecision
        ELSE BEGIN
          Currency.GET(PurchaseHeaderInv."Currency Code");
          Currency.TESTFIELD("Amount Rounding Precision");
        END;
        TotalSum :=
          ROUND(TotalSum,Currency."Invoice Rounding Precision",Currency.InvoiceRoundingDirection);
      END;
      IF SymbrioPurchaseInvHeader.InvoiceType = 'Credit' THEN
        TotalSum := -TotalSum;
      IF PurchaseHeaderInv."Amount incl. VAT" <> TotalSum THEN ERROR('Head.TotalSum');


      //VATPostingSetup.SETRANGE("VAT Identifier",SymbrioPurchaseInvHeader.VATCode);
      IF (PurchaseHeaderInv."Your Reference" <> COPYSTR(SymbrioPurchaseInvHeader.PurchaserReference,1,MAXSTRLEN(PurchaseHeaderInv."Your Reference")))  THEN
        ERROR('Head.PurchaserReference');

      //>>180126, RFC244
      CASE SymbrioSetup."Document Date from" OF
        SymbrioSetup."Document Date from"::Today:                 newDocumentDate := TODAY;
        SymbrioSetup."Document Date from"::WorkingDate:           newDocumentDate := WORKDATE;
        SymbrioSetup."Document Date from"::SymbrioRegisteredDate: newDocumentDate := SymText2Date(SymbrioPurchaseInvHeader.RegisteredDate);
        SymbrioSetup."Document Date from"::SymbrioInvoiceDate:    newDocumentDate := SymText2Date(SymbrioPurchaseInvHeader.InvoiceDate);
        ELSE
          newDocumentDate := SymText2Date(SymbrioPurchaseInvHeader.InvoiceDate);
      END;
      //IF (PurchaseHeaderInv."Document Date" <> SymText2Date(SymbrioPurchaseInvHeader.InvoiceDate)) THEN
      IF (PurchaseHeaderInv."Document Date" <> newDocumentDate) THEN
      //<<180126
        ERROR('Head.InvoiceDate');

      IF (SymbrioPurchaseInvHeader.InvoiceDueDate<>'') AND
         (PurchaseHeaderInv."Due Date" <> SymText2Date(SymbrioPurchaseInvHeader.InvoiceDueDate)) THEN
           ERROR('Head.InvoiceDueDate');
      IF (SymbrioPurchaseInvHeader.PurchaserDivisionCode <> '') AND
         (PurchaseHeaderInv."Shortcut Dimension 1 Code" <> SymbrioPurchaseInvHeader.PurchaserDivisionCode) THEN
           ERROR('Head.PurchaserDivisionCode');

      SymbrioPurchaseInvLine.SETRANGE(InvoiceHeadID,SymbrioPurchaseInvHeader.InvoiceHeadID);
      SymbrioPurchaseInvLine.SETRANGE(OrderHeadID,SymbrioPurchaseInvHeader.OrderHeadID);
      IF SymbrioPurchaseInvLine.FINDSET THEN REPEAT
            IF SymbrioPurchaseInvHeader.InvoiceType = 'Credit' THEN
              ExtendedLineNo.SETRANGE("Document Type", ExtendedLineNo."Document Type"::"Credit Memo")
            ELSE
              ExtendedLineNo.SETRANGE("Document Type", ExtendedLineNo."Document Type"::Invoice);
        ExtendedLineNo.SETRANGE("Document No.",PurchaseHeaderInv."No.");
        EVALUATE(InvoiceLineID,SymbrioPurchaseInvLine.InvoiceLineID);
        ExtendedLineNo.SETRANGE("Extended LineNo.",InvoiceLineID);
        ExtendedLineNo.SETRANGE(Line, SymbrioPurchaseInvLine.LineNo);
        IF NOT ExtendedLineNo.FINDSET(FALSE) THEN ERROR('ExtendedLineNo');
        REPEAT
          IF NOT PurchaseLineInv.GET(PurchaseHeaderInv."Document Type",PurchaseHeaderInv."No.",ExtendedLineNo."Line No.") THEN
            ERROR('Line missing');
          CheckBeforePostInvoiceLine(PurchaseHeaderInv, PurchaseLineInv, SymbrioPurchaseInvHeader, SymbrioPurchaseInvLine);
        UNTIL ExtendedLineNo.NEXT=0;
      UNTIL SymbrioPurchaseInvLine.NEXT=0;

      PurchaseHeaderInv.SendToPosting(CODEUNIT::"Purch.-Post");
      IF NOT PurchInvHeader.GET(PurchaseHeaderInv."No.") THEN
        ERROR(Text013,PurchaseHeaderInv."No.");
      PurchInvHeader."Export to Symbrio":=TRUE;
      PurchInvHeader."Export to Symbrio Type":=PurchInvHeader."Export to Symbrio Type"::Prelimary;
      PurchInvHeader.MODIFY(TRUE);
      SymbrioPurchaseInvHeader.DELETE(TRUE); // May not be deleted here but for now it is.

      //>>151127, code cleanup
      //PurchaseHeaderOrder.SETRANGE("Document Type",PurchaseHeaderOrder."Document Type"::Order);
      //PurchaseHeaderOrder.SETRANGE("No.",SymbrioPurchaseInvHeader.OrderHeadID);
      //IF PurchaseHeaderOrder.FINDSET AND (SymbrioPurchaseInvHeader.OrderStatus = '0') THEN
      IF (SymbrioPurchaseInvHeader.OrderStatus = '0') AND
        PurchaseHeaderOrder.GET(PurchaseHeaderOrder."Document Type"::Order,SymbrioPurchaseInvHeader.OrderHeadID) THEN
      //<<
          ReleasePurchaseDocument.Reopen(PurchaseHeaderOrder);
    END;

    LOCAL PROCEDURE CheckBeforePostInvoiceLine@1100409003(PurchaseHeaderInv@1100409004 : Record 38;PurchaseLineInv@1100409001 : Record 39;SymbrioPurchaseInvHeader@1100409002 : Record 11127980;SymbrioPurchaseInvLine@1100409000 : Record 11127981) : Boolean;
    VAR
      Quantity@1100409003 : Decimal;
      Quantity5@1100409005 : Decimal;
      DirectUnitCost@1100409015 : Decimal;
      DirectUnitCost5@1100409006 : Decimal;
      ContractCode@1100409007 : Text[30];
      LenghtContractCode@1100409008 : Integer;
      StartPos@1100409009 : Integer;
      ContractCodeFound@1100409010 : Boolean;
      ExtensionContract@1100409011 : Record 11012004;
      Job@1100409012 : Record 11072003;
      ETIMVendorLocalMgt@1100409013 : Record 11012313;
      TradeItem@1100409014 : Record 11012317;
      ServiceOrder@1101285000 : Record 11012823;
      Currency@1101285002 : Record 4;
      RoundingDirection@1101285001 : Text;
    BEGIN
      DirectUnitCost := 0;
      IF (PurchaseLineInv.Quantity <> 0) AND EVALUATE(DirectUnitCost,SymbrioPurchaseInvLine.Amount) THEN
        DirectUnitCost := DirectUnitCost/PurchaseLineInv.Quantity;
      IF DirectUnitCost = 0 THEN
        IF NOT EVALUATE(DirectUnitCost,SymbrioPurchaseInvLine.NetPrice) THEN
          IF (SymbrioPurchaseInvLine.NetPrice = '')  AND (NOT EVALUATE(DirectUnitCost,SymbrioPurchaseInvLine.GrossPrice)) THEN
              DirectUnitCost := 0;
      //>>181206
        IF NOT Currency.GET(SymbrioPurchaseInvHeader.Currency) THEN
          Currency.InitRoundingPrecision;
        RoundingDirection := Currency.InvoiceRoundingDirection;
        DirectUnitCost := ROUND(DirectUnitCost, Currency."Unit-Amount Rounding Precision",RoundingDirection);
      //<<181206

      IF PurchaseLineInv."Direct Unit Cost"<>DirectUnitCost THEN ERROR('Line.Gross/NetPrice');

      IF (SymbrioPurchaseInvLine.AccountSuffixPurchType <> '2' ) AND EVALUATE(Quantity, SymbrioPurchaseInvLine.Quantity) THEN
        IF (PurchaseLineInv.Quantity <> Quantity) THEN ERROR('Line.Quantity');


      CASE SymbrioPurchaseInvLine.AccountSuffixPurchType OF
        '1': BEGIN
               ETIMVendorLocalMgt.SETRANGE("Vendor (Purchase)", SymbrioPurchaseInvHeader.SupplierIdentification);
               IF ETIMVendorLocalMgt.FINDFIRST THEN BEGIN
                 TradeItem.SETRANGE(Vendor, ETIMVendorLocalMgt.Code);
                 TradeItem.SETRANGE("Item Code", SymbrioPurchaseInvLine.ArticleNo);
                 IF TradeItem.FINDFIRST THEN
                   IF SymbrioPurchaseInvLine.ArticleNo<>PurchaseLineInv."Trade Item" THEN
                     ERROR('Head.SupplierIdentification');
               END;


               IF Job.GET(SymbrioPurchaseInvLine.AccountRefProject) THEN BEGIN
                 IF (PurchaseLineInv."Shortcut Dimension 1 Code" <> Job."Global Dimension 1 Code") THEN ERROR('Line.Dimension 1');
               END;
               //>> 170703 ITERO.SB RAD-069
               IF ServiceOrder.GET(SymbrioPurchaseInvLine.AccountRefProject) THEN BEGIN
                 IF (PurchaseLineInv."Shortcut Dimension 1 Code" <> ServiceOrder."Global Dimension 1 Code") THEN ERROR('Line.Dimension 1');
               END;
               //<<
               IF (PurchaseLineInv."Shortcut Dimension 2 Code" <> SymbrioPurchaseInvLine.AccountRefBaseAccount) THEN ERROR('Line.Dimension 2');
               IF (PurchaseLineInv.Element <> SymbrioPurchaseInvLine.AccountRefObject) THEN ERROR('Line.AccountRefObject');
               IF (PurchaseLineInv."Extension Contract" <> SymbrioPurchaseInvLine.AccountSuffixŽTA) THEN ERROR('Line.AccountSuffixŽTA');
               IF (PurchaseLineInv."Job No." <> SymbrioPurchaseInvLine.AccountRefProject) THEN ERROR('Line.AccountRefProject');

             END;

        '2': ERROR('Line.AccountSuffixPurchType=2, not yet supported');
        '3': BEGIN
               IF (PurchaseLineInv."Periodic Starting Date" <> SymText2Date(SymbrioPurchaseInvLine.AccountRefPerioddatum)) OR
                  (PurchaseLineInv."Periodic Template Code" <> SymbrioPurchaseInvLine.AccountRefPeriodizing) THEN ERROR('Line.AccountRefPeriod');
               IF PurchaseLineInv."No." <> SymbrioPurchaseInvLine.AccountRefBaseAccount THEN ERROR('Line.AccountRefBaseAccount');
               IF (PurchaseLineInv."Shortcut Dimension 1 Code" <> COPYSTR(SymbrioPurchaseInvLine.AccountRefProject,1,4))  THEN ERROR('Line.Dimension 1');
               IF (PurchaseLineInv."Shortcut Dimension 2 Code" <> SymbrioPurchaseInvLine.AccountRefRemAccount) THEN ERROR('Line.Dimension 2');
             END;

      END;
    END;

    LOCAL PROCEDURE RegisterExternalDocument@1199197400(InitialDocumentProperties@1199197400 : Record 11012746;VAR oDocumentProperties@1100525003 : Record 11012746;FileName3@1100285300 : Text;RecRef@1100285301 : RecordRef) : Boolean;
    VAR
      FolderAndFile@1210190000 : Text[250];
      RID@1100409004 : RecordID;
      DocumentLink@1100409002 : Record 11012747;
      DocumentLinkMgt@1100409001 : Codeunit 11012401;
      FileMgt@1000000000 : Codeunit 419;
      ExternalDocumentManagement@1100285100 : Codeunit 11012403;
      TargetDirectory@1100285101 : Text;
      TargetFileName@1100285102 : Text;
      TargetDocumentServiceURL@1100285103 : Text;
      DocumentLinkManagement@1100285104 : Codeunit 11012401;
      TargetStorageType@1100583000 : Option;
    BEGIN
      //160323
      //insert the document properties
      oDocumentProperties.TRANSFERFIELDS(InitialDocumentProperties);
      oDocumentProperties."No." := '';
      oDocumentProperties.Description:=FileName3;
      oDocumentProperties.INSERT(TRUE);

      //copy the file and modify the file location to the target location
      FolderAndFile := SymbrioSetup."Path Invoice Import Img Buffer"+'\'+FileName3;//Folder + "File Name"; //call 26655
      //>>170504
      IF NOT FileMgt.ClientFileExists(FolderAndFile) THEN
        FolderAndFile := SymbrioSetup."Path Invoice Import"+'\'+FileName3;
      //<<170504

      TargetStorageType := 1;
      //DoRegisterFile(FolderAndFile, oDocumentProperties."Document Type",FALSE);
      ExternalDocumentManagement.RegisterFileCopyOnly(FolderAndFile,oDocumentProperties."Document Type",TODAY,TargetDocumentServiceURL,TargetStorageType);
      //ExternalDocumentManagement.RegisterFileCopyOnly(SourceFileName,DocumentTypeCode,TargetDirectory,TargetFileName,TargetDocumentServiceURL)


      oDocumentProperties.VALIDATE(File, TargetFileName);
      oDocumentProperties.VALIDATE("Document Service URL", TargetDocumentServiceURL);
      oDocumentProperties.MODIFY(TRUE);


      DocumentLinkManagement.CreateOneDocumentLink(oDocumentProperties, RecRef.RECORDID);

      //
      // RID := RecRef.RECORDID;
      //
      // DocumentLink."Seq. No." := 10000;
      // DocumentLink."Table No." := RID.TABLENO;
      // DocumentLink."Filter Expression" := DocumentLinkMgt.GetFilterExpression(RID);
      // DocumentLink."Record ID" := RID;
      // DocumentLink.Source := FALSE;
      //
      // DocumentLink."Document No." := oDocumentProperties."No.";
      // DocumentLink."Internal Company" := oDocumentProperties."Internal Company";
      // DocumentLink.INSERT(TRUE);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE FindTradeItemInvoice@1100285103(SymbrioPurchaseInvHeader@1100285102 : Record 11127980;SymbrioPurchaseInvLine@1100285101 : Record 11127981;VAR TradeItem@1100285104 : Record 11012317) : Boolean;
    VAR
      ETIMVendorLocalMgt@1100285103 : Record 11012313;
      SymbrioPurchaseHeader@1100285106 : Record 11127978;
      SymbrioPurchaseLine@1100285105 : Record 11127979;
      ItemRelation@1100285100 : Record 11012319;
    BEGIN
      //RFC230
      SymbrioPurchaseHeader.SupplierIdentification := SymbrioPurchaseInvHeader.SupplierIdentification;
      SymbrioPurchaseLine.ArticleNo := COPYSTR(SymbrioPurchaseInvLine.ArticleNo,1,MAXSTRLEN(SymbrioPurchaseLine.ArticleNo)); //171218 added copystr

      EXIT(FindTradeItemRelationOrder(SymbrioPurchaseHeader,SymbrioPurchaseLine,ItemRelation,TradeItem) = 1);
    END;

    LOCAL PROCEDURE FindTradeItemRelationOrder@1100285100(SymbrioPurchaseHeader@1100285102 : Record 11127978;SymbrioPurchaseLine@1100285101 : Record 11127979;VAR ItemRelation@1100285100 : Record 11012319;VAR TradeItem@1100285104 : Record 11012317) : Integer;
    VAR
      ETIMVendorLocalMgt@1100285103 : Record 11012313;
    BEGIN
      //RFC230
      ETIMVendorLocalMgt.SETRANGE("Vendor (Purchase)", SymbrioPurchaseHeader.SupplierIdentification);
      IF NOT ETIMVendorLocalMgt.FINDFIRST THEN
        EXIT(0);

      CLEAR(TradeItem);
      TradeItem.SETRANGE(Vendor, ETIMVendorLocalMgt.Code);
      TradeItem.SETRANGE("Item Code", SymbrioPurchaseLine.ArticleNo);
      IF TradeItem.FINDFIRST THEN
        EXIT(1);

      TradeItem.SETRANGE(Vendor);
      TradeItem.SETRANGE("Item Code" , SymbrioPurchaseLine.ArticleNo);
      IF TradeItem.FINDFIRST THEN BEGIN
        CLEAR(ItemRelation);
        ItemRelation.SETCURRENTKEY(Vendor,"Trade Item");
        ItemRelation.SETRANGE("Source Type",    ItemRelation."Source Type"::"Trade Item");
        ItemRelation.SETRANGE("GTIN Code",      TradeItem."GTIN Code (Item)");
        ItemRelation.SETFILTER("Navision Item", '<>%1','');
        IF ItemRelation.FINDFIRST THEN
          IF TradeItem.GET(ETIMVendorLocalMgt.Code,ItemRelation."Trade Item") THEN
            EXIT(2);
      END;

      EXIT(0);
    END;

    LOCAL PROCEDURE FindItemRelationOrder@1100285102(SymbrioPurchaseHeader@1100285104 : Record 11127978;SymbrioPurchaseLine@1100285103 : Record 11127979;VAR ItemRelation@1100285105 : Record 11012319) : Integer;
    VAR
      VendorFound@1100285102 : Boolean;
      lvTradeItem@1100285101 : Record 11012317;
      ETIMVendorLocalMgt@1100285107 : Record 11012313;
      RelationFound@1100285100 : Boolean;
    BEGIN
      //RFC230
      VendorFound := FALSE;
      CLEAR(ItemRelation);

      ETIMVendorLocalMgt.SETRANGE("Vendor (Purchase)", SymbrioPurchaseHeader.SupplierIdentification);
      IF ETIMVendorLocalMgt.FINDFIRST THEN BEGIN
        VendorFound := TRUE;
        ItemRelation.SETRANGE(Vendor, ETIMVendorLocalMgt.Code);
        ItemRelation.SETRANGE("Trade Item", SymbrioPurchaseLine.ArticleNo);
        IF ItemRelation.FINDFIRST THEN
          EXIT(1);
      END;

      ItemRelation.RESET;
      ItemRelation.SETRANGE("Trade Item", SymbrioPurchaseLine.ArticleNo);
      ItemRelation.SETRANGE(Vendor, SymbrioSetup."Vendor Warehouse Pricelist");
      IF ItemRelation.FINDFIRST THEN
        EXIT(2);

      IF VendorFound THEN BEGIN
        CLEAR(lvTradeItem);
        lvTradeItem.SETRANGE("Item Code" , SymbrioPurchaseLine.ArticleNo);
        lvTradeItem.SETRANGE(Vendor, ETIMVendorLocalMgt.Code);
        IF lvTradeItem.FINDFIRST THEN BEGIN
          CLEAR(ItemRelation);
          ItemRelation.SETCURRENTKEY(Vendor,"Trade Item");
          ItemRelation.SETRANGE("Source Type",    ItemRelation."Source Type"::"Trade Item");
          ItemRelation.SETRANGE("GTIN Code",      lvTradeItem."GTIN Code (Item)");
          ItemRelation.SETFILTER("Navision Item", '<>%1','');
          IF ItemRelation.FINDFIRST THEN
            EXIT(3);
        END;
      END;

      //>>190926, RFC1234
      RelationFound := FALSE;
      OnBeforeFindItemRelationOrderTradeItem4(ItemRelation,SymbrioPurchaseLine,RelationFound);
      IF RelationFound THEN
        EXIT(4);
      //<<190926, RFC1234

      CLEAR(lvTradeItem);
      lvTradeItem.SETRANGE("Item Code" , SymbrioPurchaseLine.ArticleNo);
      IF lvTradeItem.FINDFIRST THEN BEGIN
        CLEAR(ItemRelation);
        ItemRelation.SETCURRENTKEY(Vendor,"Trade Item");
        ItemRelation.SETRANGE("Source Type",    ItemRelation."Source Type"::"Trade Item");
        ItemRelation.SETRANGE("GTIN Code",      lvTradeItem."GTIN Code (Item)");
        ItemRelation.SETFILTER("Navision Item", '<>%1','');
        IF NOT ItemRelation.FINDFIRST THEN
          ERROR(Text022, SymbrioPurchaseLine.ArticleNo, ItemRelation."Source Type"::"Trade Item", ItemRelation.TABLECAPTION);
        EXIT(4);
      END;

      ERROR(Text021, SymbrioPurchaseLine.ArticleNo, lvTradeItem.TABLECAPTION);
    END;

    LOCAL PROCEDURE CreateIndirectDimcodePurchLine@1100525000(VAR lvPurchaseLine@1100525000 : Record 39;RemainingAcc@1100525001 : Code[20];DimcodePurchases@1100525003 : Code[20]);
    VAR
      Fieldno@1100525002 : Integer;
    BEGIN
      //RAD035
      IF (DimcodePurchases = '') OR (RemainingAcc = '') THEN
        EXIT;

      Fieldno := GetDimensionIDCode(DimcodePurchases);
      IF Fieldno <> 0 THEN BEGIN
        lvPurchaseLine.ValidateShortcutDimCode(Fieldno,RemainingAcc);
        EXIT;
      END;

      tempDimSetEntry.RESET;
      tempDimSetEntry.DELETEALL(FALSE);
      DimMgnt.GetDimensionSet(tempDimSetEntry,lvPurchaseLine."Dimension Set ID");
      tempDimSetEntry."Dimension Set ID" := lvPurchaseLine."Dimension Set ID";
      tempDimSetEntry."Dimension Code" := DimcodePurchases;
      tempDimSetEntry."Dimension Value Code" := RemainingAcc;
      IF DimVal.GET(tempDimSetEntry."Dimension Code",tempDimSetEntry."Dimension Value Code") THEN
        tempDimSetEntry."Dimension Value ID" := DimVal."Dimension Value ID"
      ELSE
        tempDimSetEntry."Dimension Value ID" := 0;
      tempDimSetEntry."Company Filter" := '';
      tempDimSetEntry.INSERT(FALSE);
      lvPurchaseLine."Dimension Set ID" := DimMgnt.GetDimensionSetID(tempDimSetEntry);
    END;

    LOCAL PROCEDURE CreateIndirectDimcodeGenJnlLine@1100525001(VAR lvGenJournalLine@1100525001 : Record 81;RemainingAcc@1100525000 : Code[20];DimcodePurchases@1100525003 : Code[20]);
    VAR
      Fieldno@1100525002 : Integer;
    BEGIN
      //RAD035
      IF (DimcodePurchases = '') OR (RemainingAcc = '') THEN
        EXIT;

      Fieldno := GetDimensionIDCode(DimcodePurchases);
      IF Fieldno <> 0 THEN BEGIN
        lvGenJournalLine.ValidateShortcutDimCode(Fieldno,RemainingAcc);
        EXIT;
      END;

      tempDimSetEntry.RESET;
      tempDimSetEntry.DELETEALL(FALSE);
      DimMgnt.GetDimensionSet(tempDimSetEntry,lvGenJournalLine."Dimension Set ID");
      tempDimSetEntry."Dimension Set ID" := lvGenJournalLine."Dimension Set ID";
      tempDimSetEntry."Dimension Code" := DimcodePurchases;
      tempDimSetEntry."Dimension Value Code" := RemainingAcc;
      IF DimVal.GET(tempDimSetEntry."Dimension Code",tempDimSetEntry."Dimension Value Code") THEN
        tempDimSetEntry."Dimension Value ID" := DimVal."Dimension Value ID"
      ELSE
        tempDimSetEntry."Dimension Value ID" := 0;
      tempDimSetEntry."Company Filter" := '';
      tempDimSetEntry.INSERT(FALSE);
      lvGenJournalLine."Dimension Set ID" := DimMgnt.GetDimensionSetID(tempDimSetEntry);
    END;

    LOCAL PROCEDURE CreateIndirectDimcodeGJLineFrPL@1100525008(VAR lvGenJournalLine@1100525002 : Record 81;DimcodePurchases@1100525000 : Code[20];PurchInvLineDimSetID@1100525004 : Integer);
    VAR
      Fieldno@1100525003 : Integer;
      DimensionSetEntry@1100525005 : Record 480;
    BEGIN
      //RAD035
      IF (DimcodePurchases = '') THEN
        EXIT;

      Fieldno := GetDimensionIDCode(DimcodePurchases);
      IF DimensionSetEntry.GET(PurchInvLineDimSetID,DimcodePurchases) AND (Fieldno <> 0) THEN BEGIN
        lvGenJournalLine.ValidateShortcutDimCode(Fieldno,DimensionSetEntry."Dimension Value Code");
        EXIT;
      END;

      //>> 150212 ITERO.SB
      CLEAR(DimensionSetEntry);
      DimensionSetEntry.SETRANGE("Dimension Set ID", PurchInvLineDimSetID);
      DimensionSetEntry.SETRANGE("Dimension Code", DimcodePurchases);
      IF  DimensionSetEntry.FINDFIRST THEN BEGIN
      //<<
        tempDimSetEntry.RESET;
        tempDimSetEntry.DELETEALL(FALSE);
        DimMgnt.GetDimensionSet(tempDimSetEntry,lvGenJournalLine."Dimension Set ID");
        tempDimSetEntry."Dimension Set ID" := lvGenJournalLine."Dimension Set ID";
        tempDimSetEntry."Dimension Code" := DimcodePurchases;
        tempDimSetEntry."Dimension Value Code" := DimensionSetEntry."Dimension Value Code";
        IF DimVal.GET(tempDimSetEntry."Dimension Code",tempDimSetEntry."Dimension Value Code") THEN
          tempDimSetEntry."Dimension Value ID" := DimVal."Dimension Value ID"
        ELSE
          tempDimSetEntry."Dimension Value ID" := 0;

        tempDimSetEntry."Company Filter" := '';
        tempDimSetEntry.INSERT(FALSE);
        lvGenJournalLine."Dimension Set ID" := DimMgnt.GetDimensionSetID(tempDimSetEntry);
      END;
    END;

    [EventSubscriber(Codeunit,11072016,OnAfterFromGenJnlLineToJnlLine)]
    LOCAL PROCEDURE OnAfterFromGenJnlLineToJnlLine@1101285002(GenJnlLine@1101285000 : Record 81;VAR JobJnlLine@1101285001 : Record 11072008);
    VAR
      JobLedgerEntry@1101285002 : Record 11072005;
      PurchInvHeader@1101285003 : Record 122;
      PurchCrMemoHdr@1101285004 : Record 124;
    BEGIN
      //„rende 23640 , RFC1208
      IF JobJnlLine.Vendor <> '' THEN
        EXIT;

      IF PurchInvHeader.GET(JobJnlLine."Document No.") THEN BEGIN
        JobJnlLine.Vendor := PurchInvHeader."Buy-from Vendor No.";
        EXIT;
      END;

      IF PurchCrMemoHdr.GET(JobJnlLine."Document No.") THEN BEGIN
        JobJnlLine.Vendor := PurchCrMemoHdr."Buy-from Vendor No.";
        EXIT;
      END;

      //Main Project No.,Job No.,Document No.,Posting Date
      JobLedgerEntry.SETRANGE("Job No.",JobJnlLine."Job No.");
      JobLedgerEntry.SETRANGE("Document No.",JobJnlLine."Document No.");
      JobLedgerEntry.SETFILTER("Vendor No.",'<>%1','');
      IF JobLedgerEntry.FINDLAST THEN
        JobJnlLine.Vendor := JobLedgerEntry."Vendor No.";
    END;

    LOCAL PROCEDURE InvHasPayInfo@1100285104(VAR SymbrioPurchaseInvHeader@1100285100 : Record 11127980) : Boolean;
    VAR
      VendBA@1100285107 : Record 288;
      VendBATrue@1100285106 : Boolean;
      IBANText@1100285105 : Text;
      BGText@1100285104 : Text;
      PGText@1100285103 : Text;
      AccountHolder1Text@1100285102 : Text;
      AccountHolder2Text@1100285101 : Text;
      BAText@1100285108 : Text;
    BEGIN
      GetGLSetup;
      IF GLSetup."Norwegian Localization Active" THEN EXIT(TRUE);

      //>>190925
      GetSymbrioSetup;
      IF NOT SymbrioSetup."Check Paymentinfo" THEN EXIT(TRUE);
      //>>190925

      //>> ORANGO.PR 190514
      AccountHolder1Text := DELCHR(SymbrioPurchaseInvHeader.AccountHolder1, '=', '-');
      AccountHolder2Text := DELCHR(SymbrioPurchaseInvHeader.AccountHolder2, '=', '-');

      IF (AccountHolder1Text = '') AND (AccountHolder2Text = '') THEN EXIT(TRUE);  //RFC1190B

      VendBA.SETRANGE("Vendor No.",SymbrioPurchaseInvHeader.SupplierIdentification);
      VendBATrue := FALSE;
      IF VendBA.FINDSET(FALSE) THEN BEGIN
        REPEAT
          IBANText := DELCHR(VendBA.IBAN, '=', '-');
          BGText := DELCHR(VendBA."Bank Giro No.", '=', '-');
          PGText := DELCHR(VendBA."Plus Giro No.", '=', '-');
          BAText := DELCHR(VendBA."Bank Account No.", '=', '-');  //RFC1190B
      //>>191031
          IF (AccountHolder1Text <> '') AND (AccountHolder1Text IN [IBANText,BGText,PGText,BAText]) THEN VendBATrue := TRUE;  //RFC1190B
          IF (AccountHolder2Text <> '') AND (AccountHolder2Text IN [IBANText,BGText,PGText,BAText]) THEN VendBATrue := TRUE;  //RFC1190B
      //<<191031
        UNTIL (VendBA.NEXT = 0) OR VendBATrue;
        IF NOT VendBATrue THEN BEGIN
          SymbrioPurchaseInvHeader."Error Message" :=
          COPYSTR(SymbrioPurchaseInvHeader."Error Message" + Text023,1,MAXSTRLEN(SymbrioPurchaseInvHeader."Error Message"));
          SymbrioPurchaseInvHeader.MODIFY;
          EXIT(VendBATrue);
        END;
      END;
      EXIT(VendBATrue);
      //<< ORANGO.PR 190514
    END;

    LOCAL PROCEDURE CleanIncommingAttachm@1100285105();
    VAR
      DirectoryInfo@1100285103 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.DirectoryInfo";
      FileInfo@1100285102 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.FileInfo";
      List@1100285101 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1";
      enumerator@1100285100 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IEnumerator";
      SymbrioPurchaseInvImages@1100285104 : Record 11127990;
    BEGIN
      //DL todo
      GetSymbrioSetup;

      DirectoryInfo := DirectoryInfo.DirectoryInfo(SymbrioSetup."Path Invoice Import");
      List := DirectoryInfo.GetFiles('*.png');
      enumerator := List.GetEnumerator();

      WHILE enumerator.MoveNext DO BEGIN
        FileInfo:= enumerator.Current();
      //l„gg p† ett datumfilter...
        SymbrioPurchaseInvImages.SETFILTER(name,FileInfo.Name);
        IF SymbrioPurchaseInvImages.ISEMPTY THEN
          FileInfo.Delete;
      END;

      //ej klar, ytterligare kataloger m†ste kollas
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeFindItemRelationOrderTradeItem4@1100285107(VAR ItemRelation@1100285102 : Record 11012319;SymbrioPurchaseLine@1100285103 : Record 11127979;VAR RelationFound@1100285101 : Boolean);
    BEGIN
      //190926, RFC1234
    END;

    LOCAL PROCEDURE AccountRefProjectToDims@1101285000(AccountRefProject@1101285000 : Text[30];VAR NewStringDim1@1101285001 : Text[30];VAR Dim2Symbrio@1101285003 : Code[20];VAR Fieldno@1101285005 : Integer);
    VAR
      LengthOfProjNo@1101285004 : Integer;
      NewStringDim2@1101285002 : Text[30];
    BEGIN
      //191105
      NewStringDim1 := COPYSTR(AccountRefProject, 1, 4);

      LengthOfProjNo := STRLEN(AccountRefProject);
      NewStringDim2 := COPYSTR(AccountRefProject, LengthOfProjNo-1, 2);
      EVALUATE(Dim2Symbrio,NewStringDim2);

      GetSymbrioSetup;
      Fieldno := GetDimensionIDCode(SymbrioSetup."Indirect Export Dim2");
    END;

    LOCAL PROCEDURE adjustSymPurchLineQty@1100285110(VAR SymbrioPurchaseInvHeader@1100285100 : Record 11127980);
    VAR
      SymbrioPurchaseInvLine@1100285111 : Record 11127981;
      lCurrency@1100285110 : Record 4;
      NetPriceDec@1100285109 : Decimal;
      AmountDec@1100285108 : Decimal;
      QtyDec@1100285107 : Decimal;
      SymQty@1100285106 : Decimal;
      Direction@1100285105 : Text;
      Precision@1100285104 : Decimal;
      PurchOrderHead@1100285103 : Record 38;
      PurchOrderLine@1100285102 : Record 39;
      LinePosDec@1100285101 : Decimal;
    BEGIN
      //RFC1255, moved code to own function
      IF SymbrioPurchaseInvHeader.InvoiceType = 'Credit' THEN
        EXIT;

      //>>RFC1255
      GetSymbrioSetup;
      IF NOT IntValueInStr(SymbrioSetup."ReCalc Qty by OrderType", SymbrioPurchaseInvHeader.OrderType) THEN
        EXIT;
      //<<RFC1255

      //>>adjust SymbrioPurchaseLine.Quantity based on prices
      SymbrioPurchaseInvLine.SETRANGE(InvoiceHeadID,SymbrioPurchaseInvHeader.InvoiceHeadID);
      SymbrioPurchaseInvLine.SETRANGE(OrderHeadID,SymbrioPurchaseInvHeader.OrderHeadID);
      SymbrioPurchaseInvLine.SETRANGE("Source Filename", SymbrioPurchaseInvHeader."Source Filename");  //150610
      SymbrioPurchaseInvLine.SETFILTER(Quantity,'<>%1|<>0','');
      IF SymbrioSetup."Units to recalc from InvLine" <> '' THEN
        SymbrioPurchaseInvLine.SETFILTER(QuantityMeasurement,SymbrioSetup."Units to recalc from InvLine");
      IF SymbrioPurchaseInvLine.FINDSET(TRUE) //AND (SymbrioPurchaseInvHeader.InvoiceType <> 'Credit' )
        THEN
      REPEAT
        //>>code from XMLport
        NetPriceDec := Str2Dec(SymbrioPurchaseInvLine.NetPrice);
        AmountDec := Str2Dec(SymbrioPurchaseInvLine.Amount);
        EVALUATE(QtyDec, SymbrioPurchaseInvLine.Quantity);

        IF SymbrioPurchaseInvHeader.Currency = '' THEN
          lCurrency.InitRoundingPrecision
        ELSE BEGIN
          lCurrency.GET(SymbrioPurchaseInvHeader.Currency);
          lCurrency.TESTFIELD("Amount Rounding Precision");
        END;

        SymQty := QtyDec;
        IF (NetPriceDec <> 0) AND (AmountDec <> 0) THEN
          SymQty := AmountDec/NetPriceDec;
        Direction := '=';
        Precision := lCurrency."Amount Rounding Precision";
        SymQty := ROUND(SymQty, Precision, Direction);
        //<<code from XMLport
        IF (SymQty <> QtyDec) AND EVALUATE(LinePosDec, SymbrioPurchaseInvLine.OrderLinePosition) AND
           PurchOrderHead.GET(PurchOrderHead."Document Type"::Order,SymbrioPurchaseInvHeader.OrderHeadID) THEN BEGIN //should only be one, if any
          PurchOrderLine.SETRANGE("Document Type", PurchOrderHead."Document Type");
          PurchOrderLine.SETRANGE("Document No.", PurchOrderHead."No.");
          PurchOrderLine.SETRANGE("Line No.",LinePosDec *10000);
          IF PurchOrderLine.FINDLAST THEN BEGIN
            IF AmountDec >= PurchOrderLine."Line Amount" THEN
              SymQty := QtyDec;
          END;
        END;
        IF QtyDec <> SymQty THEN BEGIN
          SymbrioPurchaseInvLine.Quantity := FORMAT(SymQty, 0, 1);
          SymbrioPurchaseInvLine.MODIFY(FALSE);
        END;
      UNTIL SymbrioPurchaseInvLine.NEXT=0;
    END;

    BEGIN
    {
      SymPurchInvHeader.OrderType
        1.SystemOrder
        2.PhoneOrder
        3.PickUpOrder
        4.OfflineOrder
        5.CreditOrder
        6.Requisition

      SymbrioPurchaseInvLine.AccountSuffixPurchType
        1.Project Line
        2.Warehouse Line
        3.Indirect Line

      SymPurchHeader.OrderOutType
        1 = Ny order
        2 = Ren orderbekr„ftelse
        3 = Oren orderbekr„ftelse
        4 = Avb”jd/manuellt avslutat

      SymPurchHeader.OrderType
        1 = System order
        2 = Ring/Fax order
        3 = H„mt order
        4 = Manuel order
        5 = Kredit order
        6 = Rekvisition
        7 = N„tbutiksorder
        8 = Handdatororder

      SymPurchLine.ConfirmationType
        1 = Existerar p† order
        2 = Borttagen jmf. med order
        3 = Existerar men har f”r„ndringar
        4 = Ny rad

      160113 ITERO.DL SYM104 Error message in 4PS buffer "Symbrio ink”psfaktura"
      160114 ITERO.DL SYM103 probelms with payments terms (fagerhults)
      160119 ITERO.DL SYM105
      160303 ITERO.DL SYM106 AuthorizedAwaitingReceipt - Row with zeroed amount
      160304 ITERO.DL SYM107 Order stuck in buffer because NAV article is blocked
      160314 ITERO.DL SYM104c wrong message and empty invoice created if overdelivery
      160317 ITERO.DL SYM108 add SYM107 to HandleOrderConfirmation
      160323 ITERO.DL handle inv.images from Symbrio
      160523 ITERO.DL SYM108 added check to invoice/credit as well
      160630 ITERO.DL RFC125 Creditnotes with KID is not handled. Will therefore not appear in payment journal
      160824 ITERO.DL RFC139 Vendor invoices are paid even if they have been set to On hold
      160909 ITERO.DL RFC136 handle inv.images from Symbrio
      160923 ITERO.DL RFC135 Supplier invoices with accrual entries in a closed period should be booked in open period
      160927 ITERO.DL RFC144 Supplier invoices in Symbrio with accrual entries in a foreign currency are booked incorrectly in 4PS when changing accounts/dimensions
      160929 ITERO.DL RFC148 handle Payment Reference for more countries
      161003 ITERO.DL SYM113 Rebooking is done toward project-accounts but w/o projectno which causes differences in gl-ledger-accounting
      161103 ITERO.DL RAD025 handle extended descriptions after extended field in buffertable
      161103 ITERO.DL RAD035 apply extra dimension to project-purchases, SymbrioSetup."Project Dimcode Purchases"
      161104 ITERO.DL RAD046 handle 2 inv-lines to 1 order-line
      170130 ITERO.DL IME504
                      IME508
      170426 ITERO.DL RFC230 improve search for itemRelations to include found vendor in later search
      170703 ITERO.SB RAD-069 Handle Global dim 1 (service order)
      170822 ITERO.DL pure274549 use invoice-rounding from cod90
      171018 ITERO.DL TRS CheckInvoiceLine now checks on JobNo, indir- to project-invoice
      171019 ITERO.DL merge
                        CheckInvoiceLineCredit() to CheckInvoiceLine()
                        CreateGenJnlLineFromSymbrioLineCredit() to CreateGenJnlLineFromSymbrioLine()
                        DiscardedCreditMemo() to DiscardedInvoice()
                      DiscardedCreditMemo() removed
      171024 ITERO.DL RFC234 handle discarded invoices
      171128 ITERO.DL pure283960 nothing to post
      171218 ITERO.DL pure285646 string length exeeded, expect 20 char but is 23
      171219 ITERO.DL pure286298 value OrderLinePosition exceeds MaxInteger
      180126 ITERO.DL RFC244 controll postingdate and documentdate from setup and apply posting date to open period
      180126 ITERO.DL activate RFC234 by setup
      180409 ORANGO.DL RFC1051 discarded invoices stops on postingdate
      180528 ORANGO.DL RFC1051 new setup like RFC244 for discarded invoices
      181106 ORANGO.DL #20862 dont compare with different currencies in CreateGenJnlLineFromSymbrioLine
      181206 ORANGO.DL #22124 Triple lines at constent
      190110 ORANGO.DL #22558 compare rounded amount to unrounded
      190124 ORANGO.DL #22747 if invoice is in currency, rounding during approval does a calculation in LCY and takes the LCY as currency-amount
      190301 ORANGO.DL #23173 '(item)account no is missing in g/l-accounts'
      190319 ORANGO.DL #23434 RFC135 not applied for credit-approvals
      190401 ORANGO.DL #23640 RFC1208 missing vendor No in JobLedgerEntry after approval-correction
      190424 ORANGO.FH RFC1208 keep vendor name if Invoice Approval has changed
      190429 ORANGO.FH IME1180 Reordering of description sources
      190514 ORANGO.PR RFC1190 check paymentinfo for vendor
      190527 ORANGO.DL IME1227, #24108, #24070, if part-receving CreateInvoiceLine() always picked first receipt
      190925 ORANGO.DL RFC1190 new field for activation of check
      190930 ORANGO.DL RFC1234 added event OnBeforeFindItemRelationOrderTradeItem4
      191008 ORANGO.DL RFC1155 change JobNo on PO from SymbrioInv by setup
      191028 ORANGO.DL RAD #24096 adjust SymbrioPurchaseLine.Quantity based on prices BY SETUP
      191031 ORANGO.DL RFC1190 test accounthold iff it has value
      191105 ORANGO.DL RFC1155 from project to surcharge-invoices
      200117 ORANGO.DL RFC1190B add bankaccount to InvHasPayInfo()
      200127 ORANGO.DL RFC1255, moved code to own function, update qty on setup
      200130 ORANGO.DL #26165, some credits give extra lines in correctionjournal
    }
    END.
  }
}

