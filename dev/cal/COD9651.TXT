OBJECT Codeunit 9651 Document Report Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.01,4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      NotImplementedErr@1002 : TextConst 'ENU=This option is not available.;NOR=Dette alternativet er ikke tilgjengelig.;SVE=Alternativet „r inte tillg„ngligt.';
      TemplateValidationQst@1000 : TextConst 'ENU=The Word layout does not comply with the current report design (for example, fields are missing or the report ID is wrong).\The following errors were detected during the layout validation:\%1\Do you want to continue?;NOR=Word-oppsettet samsvarer ikke med gjeldende rapportutforming (det mangler for eksempel felt, eller rapport-IDen er feil).\F›lgende feil ble oppdaget under valideringen av oppsettet:\%1\Vil du fortsette?;SVE=Word-layouten ”verensst„mmer inte med den aktuella rapportdesignen (till exempel saknas f„lt eller s† har den ett felaktigt rapport-ID).\F”ljande fel uppt„cktes under layoutvalideringen:\%1\Vill du forts„tta?';
      TemplateValidationErr@1003 : TextConst 'ENU=The Word layout does not comply with the current report design (for example, fields are missing or the report ID is wrong).\The following errors were detected during the document validation:\%1\You must update the layout to match the current report design.;NOR=Word-oppsettet samsvarer ikke med gjeldende rapportutforming (det mangler for eksempel felt, eller rapport-IDen er feil).\F›lgende feil ble oppdaget under valideringen av dokumentet:\%1\Du m† oppdatere oppsettet slik at det samsvarer med gjeldende rapportutforming.;SVE=Word-layouten ”verensst„mmer inte med den aktuella rapportdesignen (till exempel saknas f„lt eller s† har den ett felaktigt rapport-ID).\F”ljande fel uppt„cktes under dokumentvalideringen:\%1\Du m†ste uppdatera layouten s† att den st„mmer ”verens med den aktuella rapportdesignen.';
      AbortWithValidationErr@1001 : TextConst 'ENU=The Word layout action has been canceled because of validation errors.;NOR=Word-oppsetthandlingen er avbrutt p† grunn av valideringsfeil.;SVE=Word-layout†tg„rden har avbrutits p† grund av valideringsfel.';
      TemplateValidationUpdateQst@1004 : TextConst 'ENU=The Word layout does not comply with the current report design (for example, fields are missing or the report ID is wrong).\The following errors were detected during the layout validation:\%1\Do you want to run an automatic update?;NOR=Word-oppsettet samsvarer ikke med gjeldende rapportutforming (det mangler for eksempel felt, eller rapport-IDen er feil).\F›lgende feil ble oppdaget under valideringen av oppsettet:\%1\Vil du kj›re en automatisk oppdatering?;SVE=Word-layouten ”verensst„mmer inte med den aktuella rapportdesignen (till exempel saknas f„lt eller s† har den ett felaktigt rapport-ID).\F”ljande fel uppt„cktes under layoutvalideringen:\%1\Vill du k”ra en automatisk uppdatering?';
      TemplateAfterUpdateValidationErr@1006 : TextConst 'ENU=The automatic update could not resolve all the conflicts in the current Word layout. For example, the layout uses fields that are missing in the report design or the report ID is wrong.\The following errors were detected:\%1\You must manually update the layout to match the current report design.;NOR=Den automatiske oppdateringen kan ikke l›se alle konfliktene i gjeldende Word-oppsett, for eksempel at oppsettet bruker felt som mangler i rapportutformingen, eller at rapport-IDen er feil.\F›lgende feil ble oppdaget:\%1\Du m† oppdatere oppsettet manuelt slik at det samsvarer med gjeldende rapportutforming.;SVE=Den automatiska uppdateringen kunde inte l”sa samtliga konflikter i den aktuella Word-layouten. Layouten inneh†ller till exempel f„lt som saknas i rapportdesignen eller har ett felaktigt rapport-ID.\F”ljande fel uppt„cktes:\%1\Du m†ste uppdatera layouten manuellt s† att den matchar den aktuella rapportdesignen.';
      UpgradeMessageMsg@1005 : TextConst 'ENU=The report upgrade process returned the following log messages:\%1.;NOR=Prosessen for rapportoppgradering returnerte f›lgende loggmeldinger:\%1.;SVE=Rapportuppgraderingsprocessen returnerade f”ljande loggmeddelanden:\%1.';
      NoReportLayoutUpgradeRequiredMsg@1007 : TextConst 'ENU=The layout upgrade process completed without detecting any required changes in the current application.;NOR=Prosessen for oppgradering av oppsett er fullf›rt uten at det ble registrert n›dvendige endringer i gjeldende program.;SVE=Layoutuppgraderingsprocessen slutf”rdes utan att uppt„cka n†gra n”dv„ndiga „ndringar i det aktuella programmet.';
      CompanyInformationPicErr@1011 : TextConst 'ENU=The document contains elements that cannot be converted to PDF. This may be caused by missing image data in the document.;NOR=Dokumentet inneholder elementer som ikke kan konverteres til PDF. Dette kan skyldes manglende bildedata i dokumentet.;SVE=Dokumentet inneh†ller element som inte kan konverteras till PDF. Detta kan bero p† att bilddata saknas i dokumentet.';
      UnexpectedHexCharacterRegexErr@1013 : TextConst '@@@={LOCKED};ENU=hexadecimal value 0x[0-9a-fA-F]*, is an invalid character;NOR=hexadecimal value 0x[0-9a-fA-F]*, is an invalid character;SVE=MS-EXT';
      UnexpectedCharInDataErr@1015 : TextConst 'ENU=Cannot create the document because it includes garbled text. Make sure the text is readable and then try again.;NOR=Kan ikke opprette dokumentet fordi det inneholder ›delagt tekst. Kontroller at teksten kan leses, og pr›v p† nytt.';
      FileTypeWordTxt@1008 : TextConst '@@@={Locked};ENU=docx;NOR=docx;SVE=docx';
      FileTypePdfTxt@1009 : TextConst '@@@={Locked};ENU=pdf;NOR=pdf;SVE=pdf';
      FileTypeHtmlTxt@1010 : TextConst '@@@={Locked};ENU=html;NOR=html;SVE=html';
      ClientTypeManagement@1012 : Codeunit 4030;

    [Internal]
    PROCEDURE MergeWordLayout@5(ReportID@1000 : Integer;ReportAction@1007 : 'SaveAsPdf,SaveAsWord,SaveAsExcel,Preview,Print,SaveAsHtml';InStrXmlData@1002 : InStream;FileName@1001 : Text);
    VAR
      ReportLayoutSelection@1011 : Record 9651;
      CustomReportLayout@1003 : Record 9650;
      InTempBlob@1010 : Record 99008535;
      OutTempBlob@1009 : Record 99008535;
      FileMgt@1008 : Codeunit 419;
      TypeHelper@1004 : Codeunit 10;
      InStrWordDoc@1006 : InStream;
      OutStrWordDoc@1005 : OutStream;
      CustomLayoutCode@1012 : Code[20];
      CurrentFileType@1013 : Text;
      PrinterName@1016 : Text;
      Handled@1015 : Boolean;
    BEGIN
      IF ReportAction = ReportAction::Print THEN
        PrinterName := FileName;

      OutTempBlob.Blob.CREATEOUTSTREAM(OutStrWordDoc);
      OnBeforeMergeDocument(ReportID,ReportAction,InStrXmlData,PrinterName,OutStrWordDoc,Handled,FileName = '');
      IF Handled THEN BEGIN
        IF (FileName <> '') AND OutTempBlob.Blob.HASVALUE THEN
          OutTempBlob.Blob.EXPORT(FileName);
        EXIT;
      END;

      // Temporarily selected layout for Design-time report execution?
      IF ReportLayoutSelection.GetTempLayoutSelected <> '' THEN
        CustomLayoutCode := ReportLayoutSelection.GetTempLayoutSelected
      ELSE  // Normal selection
        IF ReportLayoutSelection.GET(ReportID,COMPANYNAME) AND
           (ReportLayoutSelection.Type = ReportLayoutSelection.Type::"Custom Layout")
        THEN
          CustomLayoutCode := ReportLayoutSelection."Custom Report Layout Code";

      OnAfterGetCustomLayoutCode(ReportID,CustomLayoutCode);

      IF CustomLayoutCode <> '' THEN
        IF NOT CustomReportLayout.GET(CustomLayoutCode) THEN
          CustomLayoutCode := '';

      IF CustomLayoutCode = '' THEN
        REPORT.WORDLAYOUT(ReportID,InStrWordDoc)
      ELSE BEGIN
        ValidateAndUpdateWordLayoutOnRecord(CustomReportLayout);
        CustomReportLayout.GetLayoutBlob(InTempBlob);
        InTempBlob.Blob.CREATEINSTREAM(InStrWordDoc);
        ValidateWordLayoutCheckOnly(ReportID,InStrWordDoc);
      END;

      OnBeforeMergeWordDocument;

      IF NOT TryXmlMergeWordDocument(InStrWordDoc,InStrXmlData,OutStrWordDoc) THEN BEGIN
        IF TypeHelper.IsMatch(GETLASTERRORTEXT,UnexpectedHexCharacterRegexErr) THEN
          ERROR(UnexpectedCharInDataErr);

        ERROR(GETLASTERRORTEXT);
      END;

      COMMIT;
      OnAfterMergeWordDocument(ReportID,InStrXmlData,OutTempBlob);

      CurrentFileType := '';
      CASE ReportAction OF
        ReportAction::SaveAsWord:
          CurrentFileType := FileTypeWordTxt;
        ReportAction::SaveAsPdf:
          BEGIN
            CurrentFileType := FileTypePdfTxt;
            ConvertToPdf(OutTempBlob);
          END;
        ReportAction::SaveAsHtml:
          BEGIN
            CurrentFileType := FileTypeHtmlTxt;
            ConvertToHtml(OutTempBlob);
          END;
        ReportAction::SaveAsExcel:
          ERROR(NotImplementedErr);
        ReportAction::Print:
          IF IsStreamHasDataset(InStrXmlData) THEN
            PrintWordDoc(ReportID,OutTempBlob,PrinterName,TRUE);
        ReportAction::Preview:
          FileMgt.BLOBExport(OutTempBlob,UserFileName(ReportID,CurrentFileType),TRUE);
      END;

      // Export the file to the client of the action generates an output object in which case currentFileType is non-empty.
      IF CurrentFileType <> '' THEN
        IF FileName = '' THEN
          FileMgt.BLOBExport(OutTempBlob,UserFileName(ReportID,CurrentFileType),TRUE)
        ELSE
          // Dont' use FileMgt.BLOBExportToServerFile. It will fail if run through
          // CodeUnit 8800, as the filename will exist in a temp folder.
          OutTempBlob.Blob.EXPORT(FileName);
    END;

    [TryFunction]
    LOCAL PROCEDURE TryXmlMergeWordDocument@3(VAR InStrWordDoc@1001 : InStream;VAR InStrXmlData@1000 : InStream;VAR OutStrWordDoc@1002 : OutStream);
    VAR
      NAVWordXMLMerger@1003 : DotNet "'Microsoft.Dynamics.Nav.DocumentReport, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DocumentReport.WordReportManager";
    BEGIN
      OutStrWordDoc := NAVWordXMLMerger.MergeWordDocument(InStrWordDoc,InStrXmlData,OutStrWordDoc) ;
    END;

    [External]
    PROCEDURE ValidateWordLayout@2(ReportID@1001 : Integer;DocumentStream@1000 : InStream;useConfirm@1004 : Boolean;updateContext@1005 : Boolean) : Boolean;
    VAR
      NAVWordXMLMerger@1002 : DotNet "'Microsoft.Dynamics.Nav.DocumentReport, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DocumentReport.WordReportManager";
      ValidationErrors@1003 : Text;
      ValidationErrorFormat@1006 : Text;
    BEGIN
      ValidationErrors := NAVWordXMLMerger.ValidateWordDocumentTemplate(DocumentStream,REPORT.WORDXMLPART(ReportID,TRUE));
      IF ValidationErrors <> '' THEN BEGIN
        IF useConfirm THEN BEGIN
          IF NOT CONFIRM(TemplateValidationQst,FALSE,ValidationErrors) THEN
            ERROR(AbortWithValidationErr);
        END ELSE BEGIN
          IF updateContext THEN
            ValidationErrorFormat := TemplateAfterUpdateValidationErr
          ELSE
            ValidationErrorFormat := TemplateValidationErr;

          ERROR(ValidationErrorFormat,ValidationErrors);
        END;

        EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ValidateWordLayoutCheckOnly@4(ReportID@1001 : Integer;DocumentStream@1000 : InStream);
    VAR
      NAVWordXMLMerger@1002 : DotNet "'Microsoft.Dynamics.Nav.DocumentReport, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DocumentReport.WordReportManager";
      ValidationErrors@1003 : Text;
      ValidationErrorFormat@1006 : Text;
    BEGIN
      ValidationErrors := NAVWordXMLMerger.ValidateWordDocumentTemplate(DocumentStream,REPORT.WORDXMLPART(ReportID,TRUE));
      IF ValidationErrors <> '' THEN BEGIN
        ValidationErrorFormat := TemplateAfterUpdateValidationErr;
        MESSAGE(ValidationErrorFormat,ValidationErrors);
      END;
    END;

    LOCAL PROCEDURE ValidateAndUpdateWordLayoutOnRecord@7(CustomReportLayout@1001 : Record 9650) : Boolean;
    VAR
      TempBlob@1000 : Record 99008535;
      NAVWordXMLMerger@1002 : DotNet "'Microsoft.Dynamics.Nav.DocumentReport, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DocumentReport.WordReportManager";
      DocumentStream@1005 : InStream;
      ValidationErrors@1003 : Text;
    BEGIN
      CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::Word);
      CustomReportLayout.GetLayoutBlob(TempBlob);
      TempBlob.Blob.CREATEINSTREAM(DocumentStream);
      NAVWordXMLMerger := NAVWordXMLMerger.WordReportManager;

      ValidationErrors :=
        NAVWordXMLMerger.ValidateWordDocumentTemplate(DocumentStream,REPORT.WORDXMLPART(CustomReportLayout."Report ID",TRUE));
      IF ValidationErrors <> '' THEN BEGIN
        IF CONFIRM(TemplateValidationUpdateQst,FALSE,ValidationErrors) THEN BEGIN
          ValidationErrors := CustomReportLayout.TryUpdateLayout(FALSE);
          COMMIT;
          EXIT(TRUE);
        END;
        ERROR(TemplateValidationErr,ValidationErrors);
      END;
      EXIT(FALSE);
    END;

    [External]
    PROCEDURE TryUpdateWordLayout@12(DocumentStream@1001 : InStream;VAR UpdateStream@1002 : OutStream;CachedCustomPart@1003 : Text;CurrentCustomPart@1004 : Text) : Text;
    VAR
      NAVWordXMLMerger@1007 : DotNet "'Microsoft.Dynamics.Nav.DocumentReport, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DocumentReport.WordReportManager";
    BEGIN
      NAVWordXMLMerger := NAVWordXMLMerger.WordReportManager;
      NAVWordXMLMerger.UpdateWordDocumentLayout(DocumentStream,UpdateStream,CachedCustomPart,CurrentCustomPart,TRUE);
      EXIT(NAVWordXMLMerger.LastUpdateError);
    END;

    [External]
    PROCEDURE TryUpdateRdlcLayout@13(reportId@1001 : Integer;RdlcStream@1002 : InStream;RdlcUpdatedStream@1000 : OutStream;CachedCustomPart@1003 : Text;CurrentCustomPart@1004 : Text;IgnoreDelete@1005 : Boolean) : Text;
    VAR
      NAVWordXMLMerger@1007 : DotNet "'Microsoft.Dynamics.Nav.DocumentReport, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DocumentReport.RdlcReportManager";
    BEGIN
      EXIT(NAVWordXMLMerger.TryUpdateRdlcLayout(reportId,RdlcStream,RdlcUpdatedStream,
          CachedCustomPart,CurrentCustomPart,IgnoreDelete));
    END;

    [External]
    PROCEDURE NewWordLayout@11(ReportId@1000 : Integer;VAR DocumentStream@1001 : OutStream);
    VAR
      NAVWordXmlMerger@1002 : DotNet "'Microsoft.Dynamics.Nav.DocumentReport, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DocumentReport.WordReportManager";
    BEGIN
      NAVWordXmlMerger.NewWordDocumentLayout(DocumentStream,REPORT.WORDXMLPART(ReportId));
    END;

    LOCAL PROCEDURE ConvertToPdf@1(VAR TempBlob@1015 : Record 99008535);
    VAR
      TypeHelper@1000 : Codeunit 10;
    BEGIN
      IF NOT TypeHelper.TryConvertWordBlobToPdf(TempBlob) THEN
        ERROR(CompanyInformationPicErr);
    END;

    LOCAL PROCEDURE ConvertToHtml@22(VAR TempBlob@1015 : Record 99008535);
    VAR
      TempBlobHtml@1006 : Record 99008535;
      InStreamWordDoc@1007 : InStream;
      OutStreamHtmlDoc@1008 : OutStream;
      PdfWriter@1002 : DotNet "'Microsoft.Dynamics.Nav.PdfWriter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.PdfWriter.WordToPdf";
    BEGIN
      TempBlob.Blob.CREATEINSTREAM(InStreamWordDoc);
      TempBlobHtml.Blob.CREATEOUTSTREAM(OutStreamHtmlDoc);
      PdfWriter.ConvertToHtml(InStreamWordDoc,OutStreamHtmlDoc);
      TempBlob.Blob := TempBlobHtml.Blob;
    END;

    LOCAL PROCEDURE PrintWordDoc@15(ReportID@1003 : Integer;VAR TempBlob@1015 : Record 99008535;PrinterName@1000 : Text;Collate@1002 : Boolean);
    VAR
      FileMgt@1001 : Codeunit 419;
    BEGIN
      IF FileMgt.IsWindowsClient THEN
        PrintWordDocInWord(ReportID,TempBlob,PrinterName,Collate,1)
      ELSE
        IF FileMgt.IsWebOrDeviceClient THEN BEGIN
          ConvertToPdf(TempBlob);
          FileMgt.BLOBExport(TempBlob,UserFileName(ReportID,FileTypePdfTxt),TRUE);
        END ELSE
          PrintWordDocOnServer(TempBlob,PrinterName,Collate);
    END;

    LOCAL PROCEDURE PrintWordDocInWord@17(ReportID@1006 : Integer;TempBlob@1015 : Record 99008535;PrinterName@1004 : Text;Collate@1007 : Boolean;Copies@1008 : Integer);
    VAR
      FileMgt@1005 : Codeunit 419;
      WordApplicationHandler@1010 : Codeunit 5068;
      WordManagement@1009 : Codeunit 11072023;
      WordApplication@1001 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.ApplicationClass" RUNONCLIENT;
      WordDocument@1000 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.Document" RUNONCLIENT;
      WordHelper@1016 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Word.WordHelper" RUNONCLIENT;
      FileName@1003 : Text;
      T0@1002 : DateTime;
    BEGIN
      WordManagement.Activate(WordApplicationHandler,9651);
      IF WordManagement.TryGetWord(WordApplication) THEN BEGIN
        FileName := STRSUBSTNO('%1.docx',CREATEGUID);
        FileName := FileMgt.BLOBExport(TempBlob,FileName,FALSE);

        IF PrinterName = '' THEN
          IF NOT SelectPrinter(PrinterName,Collate,Copies) THEN BEGIN
            WordManagement.Deactivate(9651);
            EXIT;
          END;

        WordDocument := WordHelper.CallOpen(WordApplication,FileName,FALSE,FALSE);
        WordHelper.CallPrintOut(WordDocument,PrinterName,Collate,Copies);

        T0 := CURRENTDATETIME;
        WHILE (WordApplication.BackgroundPrintingStatus > 0) AND (CURRENTDATETIME < T0 + 180000) DO
          SLEEP(250);
        WordManagement.Deactivate(9651);
        IF DeleteClientFile(FileName) THEN;
      END ELSE BEGIN
        IF (PrinterName <> '') AND IsValidPrinter(PrinterName) THEN
          PrintWordDocOnServer(TempBlob,PrinterName,Collate) // Don't print on server if the printer has not been setup.
        ELSE
          FileMgt.BLOBExport(TempBlob,UserFileName(ReportID,FileTypeWordTxt),TRUE);
      END;
    END;

    LOCAL PROCEDURE SelectPrinter@8(VAR PrinterName@1006 : Text;VAR Collate@1005 : Boolean;VAR Copies@1004 : Integer) : Boolean;
    VAR
      DotNetPrintDialog@1002 : DotNet "'System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Windows.Forms.PrintDialog" RUNONCLIENT;
      DotNetDialogResult@1001 : DotNet "'System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Windows.Forms.DialogResult" RUNONCLIENT;
      DotNetPrinterSettings@1000 : DotNet "'System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Drawing.Printing.PrinterSettings" RUNONCLIENT;
      PrintDialogResult@1003 : Integer;
    BEGIN
      DotNetPrinterSettings := DotNetPrinterSettings.PrinterSettings;
      DotNetPrintDialog := DotNetPrintDialog.PrintDialog;

      DotNetPrintDialog.ShowNetwork := TRUE;
      DotNetDialogResult := DotNetPrintDialog.ShowDialog;
      PrintDialogResult := DotNetDialogResult;

      // 1 - means OK
      // 6 - means YES
      IF NOT (PrintDialogResult IN [1,6]) THEN
        EXIT(FALSE);

      DotNetPrinterSettings := DotNetPrintDialog.PrinterSettings;
      PrinterName := DotNetPrinterSettings.PrinterName;
      Collate := DotNetPrinterSettings.Collate;
      Copies := DotNetPrinterSettings.Copies;

      EXIT(TRUE);
    END;

    [TryFunction]
    LOCAL PROCEDURE DeleteClientFile@20(FileName@1000 : Text);
    VAR
      FileMgt@1001 : Codeunit 419;
    BEGIN
      FileMgt.DeleteClientFile(FileName);
    END;

    LOCAL PROCEDURE IsValidPrinter@19(PrinterName@1000 : Text) : Boolean;
    VAR
      Printer@1001 : Record 2000000039;
    BEGIN
      Printer.SETFILTER(Name,PrinterName);
      Printer.FINDFIRST;
      EXIT(NOT Printer.ISEMPTY);
    END;

    [Internal]
    PROCEDURE IsStreamHasDataset@47(InStrXmlData@1003 : InStream) : Boolean;
    VAR
      XMLDOMManagement@1008 : Codeunit 6224;
      XmlNode@1007 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XmlHasDataset@1001 : Boolean;
    BEGIN
      XmlHasDataset := XMLDOMManagement.LoadXMLNodeFromInStream(InStrXmlData,XmlNode);

      IF XmlHasDataset THEN
        XmlHasDataset := XMLDOMManagement.FindNode(XmlNode,'DataItems',XmlNode);

      IF XmlHasDataset THEN
        XmlHasDataset := XmlNode.ChildNodes.Count > 0;

      EXIT(XmlHasDataset);
    END;

    LOCAL PROCEDURE PrintWordDocOnServer@16(TempBlob@1001 : Record 99008535;PrinterName@1000 : Text;Collate@1004 : Boolean);
    VAR
      PdfWriter@1003 : DotNet "'Microsoft.Dynamics.Nav.PdfWriter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.PdfWriter.WordToPdf";
      InStreamWordDoc@1002 : InStream;
    BEGIN
      TempBlob.Blob.CREATEINSTREAM(InStreamWordDoc);
      PdfWriter.PrintWordDoc(InStreamWordDoc,PrinterName,Collate);
    END;

    LOCAL PROCEDURE UserFileName@6(ReportID@1000 : Integer;fileExtension@1003 : Text) : Text;
    VAR
      ReportMetadata@1001 : Record 2000000139;
      FileManagement@1004 : Codeunit 419;
    BEGIN
      ReportMetadata.GET(ReportID);
      IF fileExtension = '' THEN
        fileExtension := FileTypeWordTxt;

      EXIT(FileManagement.GetSafeFileName(ReportMetadata.Caption) + '.' + fileExtension);
    END;

    PROCEDURE ApplyUpgradeToReports@10(VAR ReportUpgradeCollection@1007 : DotNet "'Microsoft.Dynamics.Nav.DocumentReport, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DocumentReport.ReportUpgradeCollection";testOnly@1000 : Boolean) : Boolean;
    VAR
      CustomReportLayout@1005 : Record 9650;
      ReportUpgrade@1006 : DotNet "'Microsoft.Dynamics.Nav.DocumentReport, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DocumentReport.ReportUpgradeSet";
      ReportChangeLogCollection@1008 : DotNet "'Microsoft.Dynamics.Nav.Types.Report, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Types.Report.IReportChangeLogCollection";
    BEGIN
      FOREACH ReportUpgrade IN ReportUpgradeCollection DO BEGIN
        CustomReportLayout.SETFILTER("Report ID",FORMAT(ReportUpgrade.ReportId));
        IF CustomReportLayout.FIND('-') THEN
          REPEAT
            CustomReportLayout.ApplyUpgrade(ReportUpgrade,ReportChangeLogCollection,testOnly);
          UNTIL CustomReportLayout.NEXT = 0;
      END;

      IF ISNULL(ReportChangeLogCollection) THEN BEGIN // Don't break upgrade process with user information
        IF (ClientTypeManagement.GetCurrentClientType <> CLIENTTYPE::Background) AND
           (ClientTypeManagement.GetCurrentClientType <> CLIENTTYPE::Management)
        THEN
          MESSAGE(NoReportLayoutUpgradeRequiredMsg);

        EXIT(FALSE);
      END;

      ProcessUpgradeLog(ReportChangeLogCollection);
      EXIT(ReportChangeLogCollection.Count > 0);
    END;

    PROCEDURE CalculateUpgradeChangeSet@21(VAR ReportUpgradeCollection@1002 : DotNet "'Microsoft.Dynamics.Nav.DocumentReport, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DocumentReport.ReportUpgradeCollection");
    VAR
      CustomReportLayout@1000 : Record 9650;
      ReportUpgradeSet@1001 : DotNet "'Microsoft.Dynamics.Nav.Types.Report, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Types.Report.IReportUpgradeSet";
    BEGIN
      OnBeforeCalculateUpgradeChangeSetSetCustomReportLayoutFilters(CustomReportLayout);
      IF CustomReportLayout.FIND('-') THEN
        REPEAT
          ReportUpgradeSet := ReportUpgradeCollection.AddReport(CustomReportLayout."Report ID"); // runtime will load the current XmlPart from metadata
          IF NOT ISNULL(ReportUpgradeSet) THEN
            ReportUpgradeSet.CalculateAutoChangeSet(CustomReportLayout.GetCustomXmlPart);
        UNTIL CustomReportLayout.NEXT <> 1;
    END;

    LOCAL PROCEDURE ProcessUpgradeLog@9(VAR ReportChangeLogCollection@1000 : DotNet "'Microsoft.Dynamics.Nav.Types.Report, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Types.Report.IReportChangeLogCollection");
    VAR
      ReportLayoutUpdateLog@1001 : Codeunit 9656;
    BEGIN
      IF ISNULL(ReportChangeLogCollection) THEN
        EXIT;

      IF (ClientTypeManagement.GetCurrentClientType <> CLIENTTYPE::Background) AND
         (ClientTypeManagement.GetCurrentClientType <> CLIENTTYPE::Management)
      THEN
        ReportLayoutUpdateLog.ViewLog(ReportChangeLogCollection)
      ELSE
        MESSAGE(UpgradeMessageMsg,FORMAT(ReportChangeLogCollection));
    END;

    PROCEDURE BulkUpgrade@14(testMode@1002 : Boolean);
    VAR
      ReportUpgradeCollection@1000 : DotNet "'Microsoft.Dynamics.Nav.DocumentReport, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DocumentReport.ReportUpgradeCollection";
    BEGIN
      ReportUpgradeCollection := ReportUpgradeCollection.ReportUpgradeCollection;
      CalculateUpgradeChangeSet(ReportUpgradeCollection);
      ApplyUpgradeToReports(ReportUpgradeCollection,testMode);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterGetCustomLayoutCode@24(ReportID@1000 : Integer;VAR CustomLayoutCode@1001 : Code[20]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterMergeWordDocument@26(ReportID@1001 : Integer;InStrXmlData@1000 : InStream;VAR OutTempBlob@1002 : Record 99008535);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeMergeDocument@23(ReportID@1005 : Integer;ReportAction@1004 : 'SaveAsPdf,SaveAsWord,SaveAsExcel,Preview,Print,SaveAsHtml';VAR InStrXmlData@1003 : InStream;PrinterName@1002 : Text;OutStream@1001 : OutStream;VAR Handled@1000 : Boolean;IsFileNameBlank@1006 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeMergeWordDocument@25();
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCalculateUpgradeChangeSetSetCustomReportLayoutFilters@18(VAR CustomReportLayout@1000 : Record 9650);
    BEGIN
    END;

    BEGIN
    END.
  }
}

