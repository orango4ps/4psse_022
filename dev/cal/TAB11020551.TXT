OBJECT Table 11020551 Plant Location Rate Code
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               PlantSetupRec.GET;
               PlantSetupRec.TESTFIELD("Rate Codes", TRUE);
               PlantLocRec.GET(Location);
               PlantLocRec.TESTFIELD("Rate Codes by Location", TRUE);
             END;

    OnRename=BEGIN
               RenameRateCode();
             END;

    CaptionML=[ENU=Plant Location Rate Code;
               NOR=Maskinlokasjonens satskode;
               SVE=Maskinutplaceringens avgiftskod];
    LookupPageID=Page11020531;
  }
  FIELDS
  {
    { 5   ;   ;Location            ;Code20        ;TableRelation="Plant Location".Code;
                                                   CaptionML=[ENU=Location;
                                                              NOR=Plassering;
                                                              SVE=Lagerst„lle];
                                                   NotBlank=Yes }
    { 10  ;   ;Rate Code           ;Code10        ;OnValidate=BEGIN
                                                                IF ("Rate Code" <> '') THEN BEGIN
                                                                  PlantLocRec.GET(Location);
                                                                  PlantLocRec.TESTFIELD("Rate Codes by Location", TRUE);

                                                                  IF ("Rate Code" <> xRec."Rate Code") AND (Description = '') THEN BEGIN
                                                                    IF RateCodeRec.GET("Rate Code") THEN BEGIN
                                                                      Description := RateCodeRec.Description;
                                                                      Percentage := RateCodeRec.Percentage;
                                                                      "Hour Rate from" := RateCodeRec."Hour Rate from";
                                                                      //DP00485.sn C009408
                                                                      PlantSetupRec.GET;
                                                                      IF "Rate Code" = PlantSetupRec."Default Rate Code Rental" THEN BEGIN
                                                                        IF NOT OtherLocRateCodeIsDefaultRent(FALSE) THEN
                                                                          "Default Rate Code Rental" := TRUE;
                                                                      END;
                                                                      //DP00485.en
                                                                      Mobilization := RateCodeRec.Mobilization;

                                                                    END;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Rate Code;
                                                              NOR=Avgiftskode;
                                                              SVE=Avgiftskod];
                                                   NotBlank=Yes }
    { 20  ;   ;Description         ;Text30        ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 30  ;   ;Percentage          ;Decimal       ;InitValue=100;
                                                   CaptionML=[ENU=Percentage;
                                                              NOR=Prosent;
                                                              SVE=Procent];
                                                   MinValue=0 }
    { 40  ;   ;Hour Rate from      ;Option        ;CaptionML=[ENU=Hour Rate from;
                                                              NOR=Timesats fra;
                                                              SVE=Timavgift fr†n];
                                                   OptionCaptionML=[ENU=Plant,Employee;
                                                                    NOR=Maskin,Ansatt;
                                                                    SVE=Maskin,anst„lld];
                                                   OptionString=Plant,Employee }
    { 50  ;   ;Default Rate Code Rental;Boolean   ;OnValidate=BEGIN
                                                                //DP00485 C009408
                                                                OtherLocRateCodeIsDefaultRent(TRUE);
                                                                IF "Default Rate Code Rental" THEN
                                                                  TESTFIELD(Mobilization, FALSE);
                                                              END;

                                                   CaptionML=[ENU=Default Rate Code Rental;
                                                              NOR=Standard satskode, utleie;
                                                              SVE=Standardavgiftskod, uthyrning] }
    { 60  ;   ;Mobilization        ;Boolean       ;OnValidate=BEGIN
                                                                IF Mobilization THEN
                                                                  TESTFIELD("Default Rate Code Rental", FALSE);
                                                              END;

                                                   CaptionML=ENU=Mobilization }
  }
  KEYS
  {
    {    ;Location,Rate Code                      ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      PlantSetupRec@1100525000 : Record 11012550;
      PlantLocRec@1100525001 : Record 11012554;
      RateCodeRec@1100525002 : Record 11020502;
      Text001@1100525003 : TextConst 'ENU=Rate Codeis ''%1'' already present.;NOR=Satskode ''%1'' finnes allerede.;SVE=Avgiftskod ''%1'' finns redan.';

    PROCEDURE RenameRateCode@1100525000();
    VAR
      PlantLocRateCodeRec@1100525001 : Record 11020551;
      SalesLineRec@1100525000 : Record 37;
      SalesInvoiceLineRec@1100525002 : Record 113;
      SalesCredMemLineRec@1100525003 : Record 115;
      HourAccLineRec@1100525004 : Record 11012039;
      PostedHourAccLineRec@1100525005 : Record 11012085;
      HourAccSurchRec@1100525006 : Record 11020308;
      PlantInventRec@1100525007 : Record 11012555;
      PlantInventRec2@1100525019 : Record 11012555;
      ExitOrderLineRec@1100525008 : Record 11012560;
      ReturnLossOrderLineRec@1100525023 : Record 11012656;
      PlantOrderRec@1100525009 : Record 11012556;
      PlantOrderLineRec@1100525010 : Record 11012557;
      PlantOrderReceiptLine@1100529000 : Record 11020493;
      RentalCorrRec@1100525011 : Record 11012565;
      RentalCorrLineRec@1100525012 : Record 11012566;
      PlantHrsRevLineRec@1100525013 : Record 11012574;
      PlantRequestRec@1100525014 : Record 11020520;
      PlantReqLineRec@1100525015 : Record 11020521;
      PlantRentalFreeOrderRec@1100525021 : Record 11020552;
      PlantRentalFreeOrderLineRec@1100525022 : Record 11020553;
      PlantLedgEntryRec@1100525016 : Record 11012572;
      PlantRateCompEntryRec@1100525017 : Record 11020501;
      SalesPlantInvoiceHistRec@1100525018 : Record 11012788;
      SalesPlantInvoiceHistRec2@1100525020 : Record 11012788;
    BEGIN
      //* See also table "Plant Rate Code" (T11020502)
      //* Because some locations can have "Rate Codes" by location the TableRelation can not be used anymore.
      //* Therefore in all tables with Rate Codes the property TableRelation is deleted.
      //* So rename is done here for Rate Codes on location level.

      TESTFIELD(Location, xRec.Location);  //* Rename location not allowed
      PlantLocRec.GET(Location);
      PlantLocRec.TESTFIELD("Rate Codes by Location", TRUE);
      IF ("Rate Code" = xRec."Rate Code") OR (xRec."Rate Code" = '') THEN
        EXIT;
      IF PlantLocRateCodeRec.GET(Location, "Rate Code") THEN
        ERROR(Text001, "Rate Code");


      SalesLineRec.SETRANGE("Plant Location", Location);
      SalesLineRec.SETRANGE("Plant Rate Code", xRec."Rate Code");
      SalesLineRec.MODIFYALL("Plant Rate Code", "Rate Code", FALSE);

      SalesInvoiceLineRec.SETCURRENTKEY("Plant Location");
      SalesInvoiceLineRec.SETRANGE("Plant Location", Location);
      SalesInvoiceLineRec.SETRANGE("Plant Rate Code", xRec."Rate Code");
      SalesInvoiceLineRec.MODIFYALL("Plant Rate Code", "Rate Code", FALSE);

      SalesCredMemLineRec.SETCURRENTKEY("Plant Location");
      SalesCredMemLineRec.SETRANGE("Plant Location", Location);
      SalesCredMemLineRec.SETRANGE("Plant Rate Code", xRec."Rate Code");
      SalesCredMemLineRec.MODIFYALL("Plant Rate Code", "Rate Code", FALSE);

      HourAccLineRec.SETRANGE("Plant Location", Location);
      HourAccLineRec.SETRANGE("Plant Rate Code", xRec."Rate Code");
      HourAccLineRec.SETRANGE("Receiving Company", '');
      HourAccLineRec.MODIFYALL("Plant Rate Code", "Rate Code", FALSE);

      PostedHourAccLineRec.SETCURRENTKEY("Receiving Company");
      PostedHourAccLineRec.SETRANGE("Plant Location", Location);
      PostedHourAccLineRec.SETRANGE("Plant Rate Code", xRec."Rate Code");
      PostedHourAccLineRec.SETRANGE("Receiving Company", '');
      PostedHourAccLineRec.MODIFYALL("Plant Rate Code", "Rate Code", FALSE);

      HourAccSurchRec.SETRANGE("Plant Location", Location);
      HourAccSurchRec.SETRANGE("Plant Rate Code", xRec."Rate Code");
      HourAccSurchRec.SETRANGE("Receiving Company", '');
      HourAccSurchRec.MODIFYALL("Plant Rate Code", "Rate Code", FALSE);

      PlantHrsRevLineRec.SETCURRENTKEY(Year, Week, "Plant Location");
      PlantHrsRevLineRec.SETRANGE("Plant Location", Location);
      PlantHrsRevLineRec.SETRANGE("Rate Code", xRec."Rate Code");
      PlantHrsRevLineRec.MODIFYALL("Rate Code", "Rate Code", FALSE);

      PlantInventRec.SETCURRENTKEY(Location);
      PlantInventRec.SETRANGE(Location, Location);
      PlantInventRec.SETRANGE("Rate Code", xRec."Rate Code");  //* Rate Code in index1, so MODIFYALL not allowed
      IF PlantInventRec.FINDSET(TRUE,FALSE) THEN BEGIN
        REPEAT
          PlantInventRec2 := PlantInventRec;
          PlantInventRec2."Rate Code" := "Rate Code";
          PlantInventRec2.INSERT(FALSE);
          //
          PlantInventRec.DELETE(FALSE);
        UNTIL PlantInventRec.NEXT = 0;
      END;

      SalesPlantInvoiceHistRec.SETCURRENTKEY(Location);  //* Granule 'Sales Rental Orders'
      SalesPlantInvoiceHistRec.SETRANGE(Location, Location);
      SalesPlantInvoiceHistRec.SETRANGE("Rate Code", xRec."Rate Code");  //* Rate Code in index1, so MODIFYALL not allowed
      IF SalesPlantInvoiceHistRec.FINDSET(TRUE,FALSE) THEN BEGIN
        REPEAT
          SalesPlantInvoiceHistRec2 := SalesPlantInvoiceHistRec;
          SalesPlantInvoiceHistRec2."Rate Code" := "Rate Code";
          SalesPlantInvoiceHistRec2.INSERT(FALSE);
          //
          SalesPlantInvoiceHistRec.DELETE(FALSE);
        UNTIL SalesPlantInvoiceHistRec.NEXT = 0;
      END;

      ExitOrderLineRec.SETRANGE("From Location", Location);
      ExitOrderLineRec.SETRANGE("From Rate Code", xRec."Rate Code");
      ExitOrderLineRec.MODIFYALL("From Rate Code", "Rate Code", FALSE);

      ReturnLossOrderLineRec.SETRANGE("To Location", Location);
      ReturnLossOrderLineRec.SETRANGE("To Rate Code", xRec."Rate Code");
      ReturnLossOrderLineRec.MODIFYALL("To Rate Code", "Rate Code", FALSE);

      PlantOrderLineRec.SETRANGE("From Location", Location);
      PlantOrderLineRec.SETRANGE("From Rate Code", xRec."Rate Code");
      PlantOrderLineRec.SETRANGE(Type, PlantOrderLineRec.Type::Plant);
      PlantOrderLineRec.SETRANGE("Rental Type", PlantOrderLineRec."Rental Type"::Rental);
      PlantOrderLineRec.MODIFYALL("From Rate Code", "Rate Code", FALSE);
      //
      PlantOrderLineRec.RESET;
      PlantOrderLineRec.SETRANGE("To Rate Code", xRec."Rate Code");
      PlantOrderLineRec.SETRANGE(Type, PlantOrderLineRec.Type::Plant);
      PlantOrderLineRec.SETRANGE("Rental Type", PlantOrderLineRec."Rental Type"::Rental);
      IF PlantOrderLineRec.FINDSET(TRUE,FALSE) THEN BEGIN
        REPEAT
          IF PlantOrderRec.GET(PlantOrderLineRec."Plant Order No.") THEN BEGIN
            IF PlantOrderLineRec.GetToLocationCode() = Location THEN BEGIN
              PlantOrderLineRec."To Rate Code" := "Rate Code";
              PlantOrderLineRec.MODIFY(FALSE);
            END;
          END;
        UNTIL PlantOrderLineRec.NEXT = 0;
      END;
      //
      PlantOrderLineRec.RESET;
      PlantOrderLineRec.SETRANGE("Mobilization Rate Code", xRec."Rate Code");
      PlantOrderLineRec.SETRANGE(Type, PlantOrderLineRec.Type::Plant);
      PlantOrderLineRec.SETRANGE("Rental Type", PlantOrderLineRec."Rental Type"::Rental);
      IF PlantOrderLineRec.FINDSET(TRUE,FALSE) THEN BEGIN
        REPEAT
          IF PlantOrderRec.GET(PlantOrderLineRec."Plant Order No.") THEN BEGIN
            IF PlantOrderLineRec.GetToLocationCode() = Location THEN BEGIN
              PlantOrderLineRec."Mobilization Rate Code" := "Rate Code";
              PlantOrderLineRec.MODIFY(FALSE);
              PlantOrderReceiptLine.SETRANGE("Plant Order No.", PlantOrderLineRec."Plant Order No.");
              PlantOrderReceiptLine.SETRANGE("Plant Order Line No.", PlantOrderLineRec."Line No.");
              IF PlantOrderReceiptLine.FINDFIRST THEN BEGIN
                PlantOrderReceiptLine."Mobilization Rate Code" := "Rate Code";
                PlantOrderReceiptLine.MODIFY(FALSE);
              END;
            END;
          END;
        UNTIL PlantOrderLineRec.NEXT = 0;
      END;

      RentalCorrLineRec.SETRANGE("Debit Rate Code", xRec."Rate Code");
      RentalCorrLineRec.SETRANGE(Type, RentalCorrLineRec.Type::Plant);
      RentalCorrLineRec.SETRANGE("Debit Rental Type", RentalCorrLineRec."Debit Rental Type"::Rental);
      IF RentalCorrLineRec.FINDSET(TRUE,FALSE) THEN BEGIN
        REPEAT
          IF RentalCorrRec.GET(RentalCorrLineRec."Rental  Correction No.") THEN BEGIN
            IF RentalCorrRec."Debit Location" = Location THEN BEGIN
              RentalCorrLineRec."Debit Rate Code" := "Rate Code";
              RentalCorrLineRec.MODIFY(FALSE);
            END;
          END;
        UNTIL RentalCorrLineRec.NEXT = 0;
      END;
      //
      RentalCorrLineRec.RESET;
      RentalCorrLineRec.SETRANGE("Credit Rate Code", xRec."Rate Code");
      RentalCorrLineRec.SETRANGE(Type, RentalCorrLineRec.Type::Plant);
      RentalCorrLineRec.SETRANGE("Credit Rental Type", RentalCorrLineRec."Credit Rental Type"::Rental);
      IF RentalCorrLineRec.FINDSET(TRUE,FALSE) THEN BEGIN
        REPEAT
          IF RentalCorrRec.GET(RentalCorrLineRec."Rental  Correction No.") THEN BEGIN
            IF RentalCorrRec."Credit Location" = Location THEN BEGIN
              RentalCorrLineRec."Credit Rate Code" := "Rate Code";
              RentalCorrLineRec.MODIFY(FALSE);
            END;
          END;
        UNTIL RentalCorrLineRec.NEXT = 0;
      END;

      PlantReqLineRec.SETRANGE("Rate Code", xRec."Rate Code");
      PlantReqLineRec.SETRANGE(Type, PlantReqLineRec.Type::Plant);
      IF PlantReqLineRec.FINDSET(TRUE,FALSE) THEN BEGIN
        REPEAT
          IF PlantRequestRec.GET(PlantReqLineRec."Plant Request No.") THEN BEGIN
            IF ((PlantRequestRec.Type = PlantRequestRec.Type::Removal) AND (PlantRequestRec."From Location" = Location)) OR
               ((PlantRequestRec.Type <>PlantRequestRec.Type::Removal) AND (PlantRequestRec."To Location" = Location))
            THEN BEGIN
              PlantReqLineRec."Rate Code" := "Rate Code";
              PlantReqLineRec.MODIFY(FALSE);
            END;
          END;
        UNTIL PlantReqLineRec.NEXT = 0;
      END;

      PlantRentalFreeOrderRec.SETCURRENTKEY("Plant Location");
      PlantRentalFreeOrderRec.SETRANGE("Plant Location", Location);
      IF PlantRentalFreeOrderRec.FINDSET(FALSE,FALSE) THEN BEGIN
        REPEAT
          PlantRentalFreeOrderLineRec.RESET;
          PlantRentalFreeOrderLineRec.SETRANGE("Rental Free Order No.", PlantRentalFreeOrderRec."No.");
          PlantRentalFreeOrderLineRec.SETRANGE("From Rate Code", xRec."Rate Code");
          PlantRentalFreeOrderLineRec.MODIFYALL("From Rate Code", "Rate Code", FALSE);
          //
          PlantRentalFreeOrderLineRec.RESET;
          PlantRentalFreeOrderLineRec.SETRANGE("Rental Free Order No.", PlantRentalFreeOrderRec."No.");
          PlantRentalFreeOrderLineRec.SETRANGE("To Rate Code", xRec."Rate Code");
          PlantRentalFreeOrderLineRec.MODIFYALL("To Rate Code", "Rate Code", FALSE);
        UNTIL PlantRentalFreeOrderRec.NEXT = 0;
      END;

      PlantLedgEntryRec.SETCURRENTKEY("Plant Location");
      PlantLedgEntryRec.SETRANGE("Plant Location", Location);
      PlantLedgEntryRec.SETRANGE("Rate Code", xRec."Rate Code");
      PlantLedgEntryRec.MODIFYALL("Rate Code", "Rate Code", FALSE);

      PlantRateCompEntryRec.SETRANGE("Rate Code", xRec."Rate Code");
      IF PlantRateCompEntryRec.FINDSET(TRUE,FALSE) THEN BEGIN
        REPEAT
          IF PlantLedgEntryRec.GET(PlantRateCompEntryRec."Plant Ledger Entry No.") THEN BEGIN
            IF PlantRateCompEntryRec."Rate Code" <> PlantLedgEntryRec."Rate Code" THEN BEGIN
              PlantRateCompEntryRec."Rate Code" := PlantLedgEntryRec."Rate Code";
              PlantRateCompEntryRec.MODIFY(FALSE);
            END;
          END;
        UNTIL PlantRateCompEntryRec.NEXT = 0;
      END;
    END;

    PROCEDURE OtherLocRateCodeIsDefaultRent@1100525001(ErrorMode@1100525001 : Boolean) : Boolean;
    VAR
      PlantLocRateCode@1100525000 : Record 11020551;
    BEGIN
      //DP00485 C009408  Only allowed for 1 rate code of the plant location
      PlantLocRateCode.SETRANGE(Location, Location);
      PlantLocRateCode.SETFILTER("Rate Code", '<>%1', "Rate Code");
      PlantLocRateCode.SETRANGE("Default Rate Code Rental", TRUE);
      IF PlantLocRateCode.FINDFIRST THEN BEGIN
        IF ErrorMode THEN
          PlantLocRateCode.TESTFIELD("Default Rate Code Rental", FALSE);
        EXIT(TRUE)
      END;
      EXIT(FALSE);
    END;

    BEGIN
    END.
  }
}

