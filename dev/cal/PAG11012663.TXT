OBJECT Page 11012663 _Project Cash Flow MB
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    Editable=No;
    CaptionML=[DEU=Projekt-Cashflow-Matrix;
               ENU=Project Cash Flow Matrix;
               NLD=Projectkasstroommatrix];
    InsertAllowed=No;
    DeleteAllowed=No;
    LinksAllowed=No;
    SourceTable=Table11012913;
    PageType=ListPart;
    OnInit=BEGIN
             FieldEditable1 := TRUE;
             FieldEditable2 := TRUE;
             FieldEditable3 := TRUE;
             FieldEditable4 := TRUE;
             FieldEditable5 := TRUE;
             FieldEditable6 := TRUE;
             FieldEditable7 := TRUE;
             FieldEditable8 := TRUE;
             FieldEditable9 := TRUE;
             FieldEditable10 := TRUE;
             FieldEditable11 := TRUE;
             FieldEditable12 := TRUE;
             FieldVisible1 := TRUE;
             FieldVisible2 := TRUE;
             FieldVisible3 := TRUE;
             FieldVisible4 := TRUE;
             FieldVisible5 := TRUE;
             FieldVisible6 := TRUE;
             FieldVisible7 := TRUE;
             FieldVisible8 := TRUE;
             FieldVisible9 := TRUE;
             FieldVisible10 := TRUE;
             FieldVisible11 := TRUE;
             FieldVisible12 := TRUE;
           END;

    OnAfterGetRecord=VAR
                       I@1100528700 : Integer;
                     BEGIN
                       FOR I := 1 TO MATRIX_CurrSetLength DO
                         MATRIX_OnAfterGetRecord(I);

                       FOR I := 1 TO ARRAYLEN(MATRIX_MatrixRecords) DO
                         MATRIX_SetFieldEditable(I);

                       ReleasedBudgetManual := ProjectDevelopmentFunctions.ToRoundedValue(
                         CalculateReleasedBudgetManual, RoundFactor);

                       RubricActual := CalculateRubricActual;
                       IF NOT (Type IN [Type::"Perc. (Sub)Totals"]) THEN // Not percentage
                         RubricActual := ProjectDevelopmentFunctions.ToRoundedValue(RubricActual, RoundFactor);

                       RubricBudget := CalculateRubricBudget;
                       IF NOT (Type IN [Type::"Perc. (Sub)Totals"]) THEN // Not percentage
                         RubricBudget := ProjectDevelopmentFunctions.ToRoundedValue(RubricBudget, RoundFactor);

                       RubricReleasedBudget := CalculateRubricReleasedBudget;
                       IF NOT (Type IN [Type::"Perc. (Sub)Totals"]) THEN // Not percentage
                         RubricReleasedBudget := ProjectDevelopmentFunctions.ToRoundedValue(RubricReleasedBudget, RoundFactor);

                       RubricTotal := CalculateRubricTotal;
                       IF NOT (Type IN [Type::PRI, Type::ROS, Type::"Perc. (Sub)Totals"]) THEN // Not percentage
                         RubricTotal := ProjectDevelopmentFunctions.ToRoundedValue(RubricTotal, RoundFactor);
                     END;

  }
  CONTROLS
  {
    { 1100528731;0;Container;
                ContainerType=ContentArea }

    { 1100528730;1;Group  ;
                IndentationColumnName=Indentation;
                IndentationControls=Description;
                GroupType=Repeater }

    { 1100528712;2;Field  ;
                SourceExpr="Rubric Code" }

    { 1100528713;2;Field  ;
                SourceExpr=Description }

    { 1100528714;2;Field  ;
                SourceExpr=Type }

    { 1100528717;2;Field  ;
                Name=ReleasedBudgetManual;
                CaptionML=[DEU=Freigegebenes Budget (manuell);
                           ENU=Released Budget (Manual);
                           NLD=Vrijgevallen budget (handmatig);
                           NOR=Frigitt budsjett (manuell);
                           SVE=Sl„ppt budget (manuell)];
                BlankZero=Yes;
                SourceExpr=ReleasedBudgetManual;
                Visible=FALSE;
                Editable=FALSE }

    { 1100528719;2;Field  ;
                Name=RubricReleasedBudget;
                CaptionML=[DEU=Freigegebenes Budget;
                           ENU=Released Budget;
                           NLD=Vrijgevallen budget;
                           SVE=Sl„ppt budget];
                BlankZero=Yes;
                SourceExpr=RubricReleasedBudget;
                Visible=FALSE;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              ReleasedBudgetDrillDown;
                            END;
                             }

    { 1100528715;2;Field  ;
                Name=RubricActual;
                CaptionML=[DEU=Ist;
                           ENU=Actual;
                           NLD=Actueel;
                           NOR=Faktisk;
                           SVE=Faktisk];
                BlankZero=Yes;
                SourceExpr=RubricActual;
                OnDrillDown=BEGIN
                              IF (ReferenceDate <> 0D) THEN
                                ActualDrillDown(0);
                            END;
                             }

    { 1100528720;2;Field  ;
                Name=RubricBudget;
                CaptionML=[DEU=Budget;
                           ENU=Budget;
                           NLD=Budget;
                           NOR=Budsjett;
                           SVE=Budget];
                BlankZero=Yes;
                SourceExpr=RubricBudget;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              BudgetDrillDown(0);
                            END;
                             }

    { 1100528716;2;Field  ;
                Name=RubricTotal;
                CaptionML=[DEU=Gesamt;
                           ENU=Total;
                           NLD=Totaal;
                           NOR=Totalt;
                           SVE=Totalt];
                BlankZero=Yes;
                SourceExpr=RubricTotal }

    { 1100528711;2;Field  ;
                Name=Field1;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[1];
                CaptionClass='3,' + MATRIX_CaptionSet[1];
                Visible=FieldVisible1;
                Editable=FieldEditable1;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(1);
                            END;
                             }

    { 1100528710;2;Field  ;
                Name=Field2;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[2];
                CaptionClass='3,' + MATRIX_CaptionSet[2];
                Visible=FieldVisible2;
                Editable=FieldEditable2;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(2);
                            END;
                             }

    { 1100528709;2;Field  ;
                Name=Field3;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[3];
                CaptionClass='3,' + MATRIX_CaptionSet[3];
                Visible=FieldVisible3;
                Editable=FieldEditable3;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(3);
                            END;
                             }

    { 1100528708;2;Field  ;
                Name=Field4;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[4];
                CaptionClass='3,' + MATRIX_CaptionSet[4];
                Visible=FieldVisible4;
                Editable=FieldEditable4;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(4);
                            END;
                             }

    { 1100528707;2;Field  ;
                Name=Field5;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[5];
                CaptionClass='3,' + MATRIX_CaptionSet[5];
                Visible=FieldVisible5;
                Editable=FieldEditable5;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(5);
                            END;
                             }

    { 1100528706;2;Field  ;
                Name=Field6;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[6];
                CaptionClass='3,' + MATRIX_CaptionSet[6];
                Visible=FieldVisible6;
                Editable=FieldEditable6;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(6);
                            END;
                             }

    { 1100528705;2;Field  ;
                Name=Field7;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[7];
                CaptionClass='3,' + MATRIX_CaptionSet[7];
                Visible=FieldVisible7;
                Editable=FieldEditable7;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(7);
                            END;
                             }

    { 1100528704;2;Field  ;
                Name=Field8;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[8];
                CaptionClass='3,' + MATRIX_CaptionSet[8];
                Visible=FieldVisible8;
                Editable=FieldEditable8;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(8);
                            END;
                             }

    { 1100528703;2;Field  ;
                Name=Field9;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[9];
                CaptionClass='3,' + MATRIX_CaptionSet[9];
                Visible=FieldVisible9;
                Editable=FieldEditable9;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(9);
                            END;
                             }

    { 1100528702;2;Field  ;
                Name=Field10;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[10];
                CaptionClass='3,' + MATRIX_CaptionSet[10];
                Visible=FieldVisible10;
                Editable=FieldEditable10;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(10);
                            END;
                             }

    { 1100528701;2;Field  ;
                Name=Field11;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[11];
                CaptionClass='3,' + MATRIX_CaptionSet[11];
                Visible=FieldVisible11;
                Editable=FieldEditable11;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(11);
                            END;
                             }

    { 1100528700;2;Field  ;
                Name=Field12;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[12];
                CaptionClass='3,' + MATRIX_CaptionSet[12];
                Visible=FieldVisible12;
                Editable=FieldEditable12;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(12);
                            END;
                             }

  }
  CODE
  {
    VAR
      MATRIX_MatrixRecord@1100528723 : Record 2000000007;
      MATRIX_MatrixRecords@1100528722 : ARRAY [32] OF Record 2000000007;
      MATRIX_CaptionSet@1100528718 : ARRAY [32] OF Text[80];
      MATRIX_CurrSetLength@1100528716 : Integer;
      MATRIX_CellData@1100528715 : ARRAY [32] OF Decimal;
      MATRIX_PeriodType@1100528712 : 'Day,Week,Month,Quarter,Year';
      FieldEditable1@1100528711 : Boolean INDATASET;
      FieldEditable2@1100528710 : Boolean INDATASET;
      FieldEditable3@1100528709 : Boolean INDATASET;
      FieldEditable4@1100528708 : Boolean INDATASET;
      FieldEditable5@1100528707 : Boolean INDATASET;
      FieldEditable6@1100528706 : Boolean INDATASET;
      FieldEditable7@1100528705 : Boolean INDATASET;
      FieldEditable8@1100528704 : Boolean INDATASET;
      FieldEditable9@1100528703 : Boolean INDATASET;
      FieldEditable10@1100528702 : Boolean INDATASET;
      FieldEditable11@1100528701 : Boolean INDATASET;
      FieldEditable12@1100528700 : Boolean INDATASET;
      FieldVisible1@1100409007 : Boolean INDATASET;
      FieldVisible2@1100409006 : Boolean INDATASET;
      FieldVisible3@1100409005 : Boolean INDATASET;
      FieldVisible4@1100409004 : Boolean INDATASET;
      FieldVisible5@1100409003 : Boolean INDATASET;
      FieldVisible6@1100409002 : Boolean INDATASET;
      FieldVisible7@1100409001 : Boolean INDATASET;
      FieldVisible8@1100409000 : Boolean INDATASET;
      FieldVisible9@1100409008 : Boolean INDATASET;
      FieldVisible10@1100409009 : Boolean INDATASET;
      FieldVisible11@1100409010 : Boolean INDATASET;
      FieldVisible12@1100409011 : Boolean INDATASET;
      ProjectDevelopmentFunctions@1100528728 : Codeunit 11012903;
      RoundFactor@1100528725 : 'Geen,1,1000,1000000';
      ReferenceDate@1100528737 : Date;
      ReleasedBudgetManual@1100528736 : Decimal;
      RubricReleasedBudget@1100528714 : Decimal;
      RubricActual@1100528738 : Decimal;
      RubricBudget@1100528720 : Decimal;
      RubricTotal@1100528717 : Decimal;
      Text000@1100528713 : TextConst 'DEU=Projektposten,Investitionsvorschlag Budget;ENU=Job Ledger Entries,Investment Proposal Budget;NLD=Projectposten,Investeringvoorstel budget;SVE=Reskontratransaktioner f”r jobb,budget f”r investeringsf”rslag';

    PROCEDURE Load@1132(VAR CaptionSet@1005 : ARRAY [32] OF Text[80];VAR MatrixRecords@1006 : ARRAY [32] OF Record 2000000007;CurrSetLength@1007 : Integer;PeriodType@1100528700 : 'Day,Week,Month,Quarter,Year';NewRoundFactor@1100528702 : 'None,1,1000,1000000';NewReferenceDate@1100528701 : Date);
    BEGIN
      CLEAR(MATRIX_CellData);
      COPYARRAY(MATRIX_CaptionSet, CaptionSet, 1);
      COPYARRAY(MATRIX_MatrixRecords, MatrixRecords, 1);

      MATRIX_CurrSetLength := CurrSetLength;

      MATRIX_SetFieldVisible;

      MATRIX_PeriodType := PeriodType;
      RoundFactor := NewRoundFactor;
      ReferenceDate := NewReferenceDate;
    END;

    LOCAL PROCEDURE MATRIX_OnAfterGetRecord@1135(ColumnNo@1010 : Integer);
    BEGIN
      MATRIX_CellData[ColumnNo] := ProjectDevelopmentFunctions.ToRoundedValue(CalculateMatrixAmount(ColumnNo), RoundFactor);
    END;

    LOCAL PROCEDURE MATRIX_OnValidate@1100525001(ColumnNo@1008 : Integer);
    BEGIN
    END;

    LOCAL PROCEDURE MATRIX_OnLookup@1100528701(ColumnNo@1100409000 : Integer);
    BEGIN
    END;

    LOCAL PROCEDURE MATRIX_OnDrillDown@1100409000(ColumnNo@1100409000 : Integer);
    BEGIN
      ActualOrBudgetDrillDown(ColumnNo);
    END;

    LOCAL PROCEDURE MATRIX_OnAssistEdit@1100409001(ColumnNo@1100409000 : Integer);
    BEGIN
    END;

    LOCAL PROCEDURE MATRIX_UpdateCell@1100485007(CellValue@1100528700 : Decimal;ColumnNo@1100528701 : Integer);
    BEGIN
    END;

    LOCAL PROCEDURE MATRIX_SetFieldEditable@1100528700(ColumnNo@1100528700 : Integer);
    BEGIN
      CASE ColumnNo OF
        1: FieldEditable1 := FALSE;
        2: FieldEditable2 := FALSE;
        3: FieldEditable3 := FALSE;
        4: FieldEditable4 := FALSE;
        5: FieldEditable5 := FALSE;
        6: FieldEditable6 := FALSE;
        7: FieldEditable7 := FALSE;
        8: FieldEditable8 := FALSE;
        9: FieldEditable9 := FALSE;
        10: FieldEditable10 := FALSE;
        11: FieldEditable11 := FALSE;
        12: FieldEditable12 := FALSE;
      END;
    END;

    LOCAL PROCEDURE MATRIX_SetFieldVisible@1100409002();
    BEGIN
      // Use only when the matrix contains checkboxes
    END;

    PROCEDURE ActualOrBudgetDrillDown@1210190013(ColumnNo@1100528700 : Integer);
    BEGIN
      IF NOT (Type IN [Type::Costs, Type::Revenues,
                       Type::"Percentage Revenues", Type::"Percentage Costs",
                       Type::"Costs as Perc. Revenues", Type::"Revenues as Perc. Costs",
                       Type::"Costs to Distr. as Perc. Rev.",
                       Type::Subtotal, Type::Balance])
      THEN
        EXIT;

      MATRIX_MatrixRecord := MATRIX_MatrixRecords[ColumnNo];

      IF (ReferenceDate <= MATRIX_MatrixRecord."Period End") AND
         (ReferenceDate > MATRIX_MatrixRecord."Period Start")
      THEN BEGIN
        CASE STRMENU(Text000) OF
          1:
            ActualDrillDown(ColumnNo);
          2:
            BudgetDrillDown(ColumnNo);
        END;
        EXIT;
      END;

      IF (ReferenceDate <= MATRIX_MatrixRecord."Period Start") THEN
        BudgetDrillDown(ColumnNo)
      ELSE
        ActualDrillDown(ColumnNo);
    END;

    PROCEDURE ActualDrillDown@1100528709(ColumnNo@1100528700 : Integer);
    VAR
      JobLedgerEntry@1210190000 : Record 11072005;
    BEGIN
      IF NOT (Type IN [Type::Costs, Type::Revenues,
                       Type::"Percentage Revenues", Type::"Percentage Costs",
                       Type::"Costs as Perc. Revenues", Type::"Revenues as Perc. Costs",
                       Type::"Costs to Distr. as Perc. Rev.",
                       Type::Subtotal, Type::Balance])
      THEN
        EXIT;

      JobLedgerEntry.FILTERGROUP(4);
      JobLedgerEntry.SETRANGE("Job No.","Project No.");
      JobLedgerEntry.FILTERGROUP(0);
      IF (Type IN [Type::Costs, Type::Revenues,
                   Type::"Percentage Revenues", Type::"Percentage Costs",
                   Type::"Costs as Perc. Revenues", Type::"Revenues as Perc. Costs",
                   Type::"Costs to Distr. as Perc. Rev."])
      THEN BEGIN
        IF "Cost Object Filter" <> '' THEN
          JobLedgerEntry.SETFILTER("Global Dimension 2 Code", "Cost Object Filter")
        ELSE
          JobLedgerEntry.SETFILTER("Global Dimension 2 Code", '');
      END;

      IF ColumnNo <> 0 THEN
        ProjectDevelopmentFunctions.SetDateFilterActual(
          Rec, MATRIX_MatrixRecord."Period Start", MATRIX_MatrixRecord."Period End", ReferenceDate)
      ELSE
        ProjectDevelopmentFunctions.SetDateFilterActual(Rec, 0D, 0D, ReferenceDate);
      JobLedgerEntry.SETFILTER("Posting Date", GETFILTER("Date Filter"));

      PAGE.RUNMODAL(0, JobLedgerEntry);
    END;

    PROCEDURE BudgetDrillDown@1210190002(ColumnNo@1210190001 : Integer);
    VAR
      InvestmentProposalBudget@1210190000 : Record 11012914;
      InvestmentProposalBudgList@1210190002 : Page 11012918;
    BEGIN
      IF NOT (Type IN [Type::Costs, Type::Revenues,
                       Type::"Percentage Revenues", Type::"Percentage Costs",
                       Type::"Costs as Perc. Revenues", Type::"Revenues as Perc. Costs",
                       Type::"Costs to Distr. as Perc. Rev.",
                       Type::Subtotal, Type::Balance])
      THEN
        EXIT;

      CALCFIELDS(Fixed);

      InvestmentProposalBudget.SETCURRENTKEY("Project No.", Version, "Rubric Code", Date);
      InvestmentProposalBudget.FILTERGROUP(4);
      InvestmentProposalBudget.SETRANGE("Project No.", "Project No.");
      InvestmentProposalBudget.SETRANGE(Version, Version);
      InvestmentProposalBudget.FILTERGROUP(0);
      IF (Type IN [Type::Subtotal, Type::Balance]) THEN
        InvestmentProposalBudget.SETFILTER("Rubric Code", Totaling)
      ELSE
        InvestmentProposalBudget.SETRANGE("Rubric Code", "Rubric Code");

      IF ColumnNo <> 0 THEN BEGIN  //* Use Period Filter
        MATRIX_MatrixRecord := MATRIX_MatrixRecords[ColumnNo];
        ProjectDevelopmentFunctions.SetDateFilterBudget(
          Rec, MATRIX_MatrixRecord."Period Start", MATRIX_MatrixRecord."Period End", ReferenceDate);
      END ELSE
        ProjectDevelopmentFunctions.SetDateFilterBudget(Rec, 0D, 0D, ReferenceDate);
      InvestmentProposalBudget.SETFILTER(Date, GETFILTER("Date Filter"));

      InvestmentProposalBudgList.SETTABLEVIEW(InvestmentProposalBudget);
      IF ColumnNo <> 0 THEN BEGIN
        InvestmentProposalBudgList.SetSelections(Rec, FALSE);
        InvestmentProposalBudgList.RUNMODAL;
      END ELSE BEGIN
        InvestmentProposalBudgList.SetSelections(Rec, ((Type IN [Type::Costs, Type::Revenues]) AND (NOT Fixed)));
        InvestmentProposalBudgList.RUNMODAL;
        IF InvestmentProposalBudgList.GetModified THEN BEGIN
          ProjectDevelopmentFunctions.ResetEPVCalcSaveField('VERSION');  //* Forceer opnieuw opbouwen tmp table voor EPV en PRI
          UpdateInvestmentProposal; //mg, 16-11-10: M19522
          CurrPage.UPDATE(FALSE);
        END;
      END;
    END;

    PROCEDURE ReleasedBudgetDrillDown@1100485002();
    VAR
      InvestmentProposalBudget@1210190000 : Record 11012914;
      InvestmentProposalBudgList@1210190002 : Page 11012918;
    BEGIN
      IF NOT (Type IN [Type::Costs, Type::Revenues,
                       Type::"Percentage Revenues", Type::"Percentage Costs",
                       Type::"Costs as Perc. Revenues", Type::"Revenues as Perc. Costs",
                       Type::"Costs to Distr. as Perc. Rev.",
                       Type::Subtotal, Type::Balance])
      THEN
        EXIT;

      InvestmentProposalBudget.SETCURRENTKEY("Project No.", Version, "Rubric Code", Date);
      InvestmentProposalBudget.FILTERGROUP(4);
      InvestmentProposalBudget.SETRANGE("Project No.", "Project No.");
      InvestmentProposalBudget.SETRANGE(Version, Version);
      InvestmentProposalBudget.FILTERGROUP(0);
      IF (Type IN [Type::Subtotal, Type::Balance]) THEN
        InvestmentProposalBudget.SETFILTER("Rubric Code", Totaling)
      ELSE
        InvestmentProposalBudget.SETRANGE("Rubric Code", "Rubric Code");

      ProjectDevelopmentFunctions.SetDateFilterBudget(Rec, 0D, (ReferenceDate - 1), 0D);
      InvestmentProposalBudget.SETFILTER(Date, GETFILTER("Date Filter"));

      InvestmentProposalBudgList.SETTABLEVIEW(InvestmentProposalBudget);
      InvestmentProposalBudgList.SetSelections(Rec, FALSE);
      InvestmentProposalBudgList.RUNMODAL;
    END;

    PROCEDURE CalculateReleasedBudgetManual@1100528703() : Decimal;
    VAR
      InvestmProposalRubricLine@1100528700 : Record 11012913;
    BEGIN
      IF (Type IN [Type::Subtotal, Type::Balance]) AND (Totaling <> '') THEN BEGIN
        InvestmProposalRubricLine."Project No." := "Project No.";
        InvestmProposalRubricLine.Version := Version;
        InvestmProposalRubricLine.SETFILTER("Rubric Filter", Totaling);
        InvestmProposalRubricLine.CALCFIELDS("Released Cost Budget Manual", "Released Revenue Budget Manual");
        IF (InvestmProposalRubricLine."Released Revenue Budget Manual" <> 0) OR
           (InvestmProposalRubricLine."Released Cost Budget Manual" <> 0)
        THEN BEGIN
          IF Type = Type::Subtotal THEN
            EXIT(InvestmProposalRubricLine."Released Revenue Budget Manual" +
                 InvestmProposalRubricLine."Released Cost Budget Manual")
          ELSE
            EXIT(InvestmProposalRubricLine."Released Revenue Budget Manual" -
                 InvestmProposalRubricLine."Released Cost Budget Manual");
        END;
      END;
      EXIT("Released Budget Manual");
    END;

    PROCEDURE CalculateRubricActual@1210190007() : Decimal;
    BEGIN
      CASE Type OF
        Type::Costs,
        Type::Revenues,
        Type::"Percentage Costs",
        Type::"Percentage Revenues",
        Type::"Costs as Perc. Revenues",
        Type::"Revenues as Perc. Costs",
        Type::"Costs to Distr. as Perc. Rev.",
        Type::"Perc. (Sub)Totals",  //*15625.n
        Type::Subtotal,
        Type::Balance:
          EXIT(ProjectDevelopmentFunctions.CalculateActualByRubric(Rec, 0D, 0D, ReferenceDate));
      END;
      EXIT(0);
    END;

    PROCEDURE CalculateRubricBudget@1210190011() : Decimal;
    BEGIN
      CASE Type OF
        Type::Costs,
        Type::Revenues,
        Type::"Percentage Costs",
        Type::"Percentage Revenues",
        Type::"Costs as Perc. Revenues",
        Type::"Revenues as Perc. Costs",
        Type::"Costs to Distr. as Perc. Rev.",
        Type::"Perc. (Sub)Totals",  //*15625.n
        Type::Subtotal,
        Type::Balance:
          EXIT(ProjectDevelopmentFunctions.CalculateBudgetByRubric(Rec, 0D, 0D, ReferenceDate));
      END;
      EXIT(0);
    END;

    PROCEDURE CalculateRubricReleasedBudget@1100485001() : Decimal;
    BEGIN
      CASE Type OF
        Type::Costs,
        Type::Revenues,
        Type::"Percentage Costs",
        Type::"Percentage Revenues",
        Type::"Costs as Perc. Revenues",
        Type::"Revenues as Perc. Costs",
        Type::"Costs to Distr. as Perc. Rev.",
        Type::"Perc. (Sub)Totals",  //*15625.n
        Type::Subtotal,
        Type::Balance:
          EXIT(ProjectDevelopmentFunctions.CalculateBudgetByRubric(Rec, 0D, (ReferenceDate - 1), 0D));
      END;
      EXIT(0);
    END;

    PROCEDURE CalculateRubricTotal@1210190010() : Decimal;
    BEGIN
      CASE Type OF
        Type::Costs,
        Type::Revenues,
        Type::"Percentage Costs",
        Type::"Percentage Revenues",
        Type::"Costs as Perc. Revenues",
        Type::"Revenues as Perc. Costs",
        Type::"Costs to Distr. as Perc. Rev.",
        Type::Subtotal,
        Type::Balance:
          EXIT(RubricActual + RubricBudget);
        Type::"Perc. (Sub)Totals":  //*15625.n
          EXIT(ProjectDevelopmentFunctions.CalculatePercRubricsTotActBudg(Rec, 0D, 0D, ReferenceDate));
        Type::ROS:
          EXIT(ProjectDevelopmentFunctions.CalculateTotalRos("Project No.", Version, ReferenceDate, FALSE));
        Type::EPV:
          EXIT(ProjectDevelopmentFunctions.CalculateTotalEPV("Project No.", Version, ReferenceDate, MATRIX_PeriodType, FALSE));
        Type::PRI:
          EXIT(ProjectDevelopmentFunctions.CalculateTotalPRI("Project No.", Version, ReferenceDate, MATRIX_PeriodType, FALSE));
      END;
      EXIT(0);
    END;

    PROCEDURE CalculateMatrixAmount@1210190003(ColumnNo@1100528700 : Integer) : Decimal;
    VAR
      SplitType@1100528701 : 'Actual,Budget,Both';
    BEGIN
      MATRIX_MatrixRecord := MATRIX_MatrixRecords[ColumnNo];

      CASE Type OF
        Type::Costs,
        Type::Revenues,
        Type::"Percentage Costs",
        Type::"Percentage Revenues",
        Type::"Costs as Perc. Revenues",
        Type::"Revenues as Perc. Costs",
        Type::"Costs to Distr. as Perc. Rev.",
        Type::Subtotal,
        Type::Balance:
          EXIT(
            ProjectDevelopmentFunctions.CalculateActualByRubric(
              Rec, MATRIX_MatrixRecord."Period Start", MATRIX_MatrixRecord."Period End", ReferenceDate) +
            ProjectDevelopmentFunctions.CalculateBudgetByRubric(
              Rec, MATRIX_MatrixRecord."Period Start", MATRIX_MatrixRecord."Period End", ReferenceDate));
        Type::EPV:
          EXIT(ProjectDevelopmentFunctions.CalculatePeriodEPV(
            "Project No.", Version, ReferenceDate, MATRIX_PeriodType,
            MATRIX_MatrixRecord."Period Start", MATRIX_MatrixRecord."Period End",
            SplitType::Budget, TRUE));
      END;
      EXIT(0);
    END;

    PROCEDURE UpdateInvestmentProposal@1100525000();
    VAR
      InvestmentProposal@1100528700 : Record 11012912;
    BEGIN
      //mg, 16-11-10: M19522
      IF (InvestmentProposal."Project No." <> "Project No.") OR (InvestmentProposal.Version <> Version) THEN
        InvestmentProposal.GET("Project No.", Version);

      InvestmentProposal.UpdateROS_EPV_PRI(MATRIX_PeriodType, InvestmentProposal."Reference Date", TRUE, TRUE);
      InvestmentProposal.UpdateROS_EPV_PRI(MATRIX_PeriodType, ReferenceDate, TRUE, FALSE);
    END;

    BEGIN
    END.
  }
}

