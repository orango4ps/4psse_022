OBJECT Codeunit 96 Purch.-Quote to Order
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.03,4PS14.00,EXF400000;
  }
  PROPERTIES
  {
    TableNo=38;
    OnRun=VAR
            Vend@1002 : Record 23;
            PurchCommentLine@1006 : Record 43;
            PurchCalcDiscByType@1007 : Codeunit 66;
            ApprovalsMgmt@1000 : Codeunit 1535;
            ArchiveManagement@1001 : Codeunit 5063;
            RecordLinkManagement@1004 : Codeunit 447;
            DocumentLinkMgt@1100529600 : Codeunit 11012401;
            ShouldRedistributeInvoiceAmount@1003 : Boolean;
            IsHandled@1008 : Boolean;
            FromRecRef@1100529602 : RecordRef;
            ToRecRef@1100529601 : RecordRef;
          BEGIN
            OnBeforeRun(Rec);
            // ExFlow
            IF "Requisition No." <> '' THEN BEGIN
              IF ExFlowSetup.GET THEN BEGIN
                IF DocHead.RetrieveRecord(DocHead,"Document Type", "No.") THEN BEGIN
                  IF DocHead.Status = DocHead.Status::Approved THEN BEGIN
                    DocHead.SETRECFILTER;
                    REPORT.RUNMODAL(REPORT::"Change Journal Quote",FALSE,FALSE,DocHead);
                  END;

                  COMMIT;

                  DocHead.GET(DocHead.ID);
                  PurchOrderHeader.GET(DocHead."Document Type",DocHead."Document No.");

                  EXIT;
                END;
              END;
            END;
            // ExFlow

            TESTFIELD("Document Type","Document Type"::Quote);
            TESTFIELD("Buy-from Vendor No.");  //**4PS.n
            ShouldRedistributeInvoiceAmount := PurchCalcDiscByType.ShouldRedistributeInvoiceDiscountAmount(Rec);

            OnCheckPurchasePostRestrictions;

            Vend.GET("Buy-from Vendor No.");
            Vend.CheckBlockedVendOnDocs(Vend,FALSE);

            ValidatePurchaserOnPurchHeader(Rec,TRUE,FALSE);

            CheckForBlockedLines;

            CreatePurchHeader(Rec,Vend."Prepayment %");

            TransferQuoteToOrderLines(PurchQuoteLine,Rec,PurchOrderLine,PurchOrderHeader,Vend);
            OnAfterInsertAllPurchOrderLines(PurchOrderLine,Rec);

            PurchSetup.GET;
            CASE PurchSetup."Archive Quotes" OF
              PurchSetup."Archive Quotes"::Always:
                ArchiveManagement.ArchPurchDocumentNoConfirm(Rec);
              PurchSetup."Archive Quotes"::Question:
                ArchiveManagement.ArchivePurchDocument(Rec);
            END;

            IF PurchSetup."Default Posting Date" = PurchSetup."Default Posting Date"::"No Date" THEN BEGIN
              PurchOrderHeader."Posting Date" := 0D;
              PurchOrderHeader.MODIFY;
            END;
            //**4PS.sn
            IF (LastRefNo <> '') THEN
              RouteRefMgtCU.WriteLastRefNo(LastRefNo);

            IF (NOT gOnExistingOrder) THEN BEGIN
            //**4PS.en
              PurchCommentLine.CopyComments("Document Type",PurchOrderHeader."Document Type","No.",PurchOrderHeader."No.");
              RecordLinkManagement.CopyLinks(Rec,PurchOrderHeader);

              //**4PS.sn
              DocRelRec.SETRANGE("Document Type",DocRelRec."Document Type"::"Purchase Quote");
              DocRelRec.SETRANGE("No.","No.");
              IF DocRelRec.FIND('-') THEN BEGIN
                REPEAT
                  DocRel1Rec.COPY(DocRelRec);
                  DocRel1Rec."Document Type" := DocRelRec."Document Type"::"Purchase Order";
                  DocRel1Rec."No." := PurchOrderHeader."No.";
                  DocRel1Rec."Document No." := DocRelRec."Document No.";
                  DocRel1Rec.INSERT;
                  ParRec.SETRANGE(Type,ParRec.Type::Quote);
                  ParRec.SETRANGE("No.","No.");
                  ParRec.SETRANGE("Document No.",DocRel1Rec."Related Document No.");
                  IF ParRec.FIND('-') THEN BEGIN
                    REPEAT
                      Par1Rec.COPY(ParRec);
                      Par1Rec.Type := ParRec.Type::Order;
                      Par1Rec."No." := PurchOrderHeader."No.";
                      Par1Rec.INSERT;
                    UNTIL ParRec.NEXT = 0;
                  END;
                UNTIL DocRelRec.NEXT = 0;
              END;

              PurchTextRec.SETRANGE("Line Type",PurchTextRec."Line Type"::"Purchase Quote");
              PurchTextRec.SETRANGE("No.","No.");
              IF PurchTextRec.FIND('-') THEN BEGIN
                REPEAT
                  PurchText1Rec.COPY(PurchTextRec);
                  PurchText1Rec."Line Type" := PurchText1Rec."Line Type"::"Purchase Order";
                  PurchText1Rec."No." := PurchOrderHeader."No.";
                  PurchText1Rec.INSERT;
                UNTIL PurchTextRec.NEXT = 0;
              END;

              FromRecRef.GETTABLE(Rec);
              ToRecRef.GETTABLE(PurchOrderHeader);
              DocumentLinkMgt.CopyDocLinks(FromRecRef, ToRecRef);
              CLEAR(FromRecRef);
              CLEAR(ToRecRef);
            END;
            //**4PS.en

            //**4PS.so
            //AssignItemCharges("Document Type","No.",PurchOrderHeader."Document Type",PurchOrderHeader."No.");
            //
            //ApprovalsMgmt.CopyApprovalEntryQuoteToOrder(RECORDID,PurchOrderHeader."No.",PurchOrderHeader.RECORDID);
            //
            //IsHandled := FALSE;
            //OnBeforeDeletePurchQuote(Rec,PurchOrderHeader,IsHandled);
            //IF NOT IsHandled THEN BEGIN
            //  ApprovalsMgmt.DeleteApprovalEntries(RECORDID);
            //  DELETELINKS;
            //  DELETE;
            //  PurchQuoteLine.DELETEALL;
            //END;
            //
            //IF NOT ShouldRedistributeInvoiceAmount THEN
            //  PurchCalcDiscByType.ResetRecalculateInvoiceDisc(PurchOrderHeader);
            //**4PS.eo

            //**4PS.sn
            IF (NOT LinesCopied) THEN
              ERROR(Text11012002);
            //**4PS.en

            OnAfterRun(Rec,PurchOrderHeader);
          END;

  }
  CODE
  {
    VAR
      PurchQuoteLine@1000 : Record 39;
      PurchOrderHeader@1001 : Record 38;
      PurchOrderLine@1002 : Record 39;
      PurchSetup@1008 : Record 312;
      PrepmtMgt@1007 : Codeunit 441;
      ItemChargeAssgntPurch2@1100485002 : Record 5805;
      RouteRefMgtCU@1210190010 : Codeunit 11012045;
      BudgetLineRec@1210190000 : Record 11012001;
      PurchActrec@1210190003 : Record 11012026;
      DocRelRec@1210190004 : Record 11012407;
      DocRel1Rec@1210190005 : Record 11012407;
      ParRec@1210190006 : Record 11012072;
      Par1Rec@1210190007 : Record 11012072;
      PurchTextRec@1210190008 : Record 11012067;
      PurchText1Rec@1210190009 : Record 11012067;
      PurchHeadExtRec@1100525000 : Record 11020398;
      PurchaseLineExtension@1100525001 : Record 11020644;
      LastRefNo@1210190011 : Code[20];
      Text11012001@1210190012 : TextConst 'ENU=Quote has no lines with ''%1'' switched on.;NOR=Tilbudet har ingen rader der ''%1'' er aktivert.;SVE=Offerten har inga rader d„r ''%1'' har aktiverats.';
      gAskForNoSerie@1210190013 : Boolean;
      gOnExistingOrder@1100485000 : Boolean;
      gNoSeries@1210190014 : Code[10];
      gOrderNo@1100485001 : Code[20];
      Text11012002@1100485003 : TextConst 'ENU=Quote has no lines that (still) must be copied.;NOR=Tilbudet har ingen rader som (fremdeles) m† kopieres.;SVE=Offerten har inga rader som (fortfarande) m†ste kopieras.';
      LinesCopied@1100525002 : Boolean;
      "*** ExFlow ***"@12013587 : Integer;
      DocHead@12013588 : Record 12013608;
      ExFlowSetup@12013589 : Record 12013601;

    LOCAL PROCEDURE CreatePurchHeader@2(PurchHeader@1000 : Record 38;PrepmtPercent@1001 : Decimal);
    BEGIN
      OnBeforeCreatePurchHeader(PurchHeader);

      WITH PurchHeader DO BEGIN
        //**4PS.sn
        IF "Purchase Action" <> '' THEN BEGIN
          IF PurchActrec.GET("Job No.","Purchase Action") THEN BEGIN
            IF NOT (PurchActrec.Status IN [PurchActrec.Status::Approved, PurchActrec.Status::Definitive]) THEN
              PurchActrec.FIELDERROR(PurchActrec.Status);
          END;
        END;

        CheckIfMakingOrderAllowedForQuoteStatus;
        CheckIfNoQuoteConsentLinesAvailable;

        PurchQuoteLine.SETRANGE("Document Type","Document Type");
        PurchQuoteLine.SETRANGE("Document No.","No.");
        PurchQuoteLine.SETRANGE("Quote Selected", TRUE);
        IF NOT PurchQuoteLine.FINDFIRST THEN
          ERROR(Text11012001, PurchQuoteLine.FIELDCAPTION("Quote Selected"));

        LastRefNo := '';

        IF gOnExistingOrder THEN BEGIN
          PurchOrderHeader.GET(PurchOrderHeader."Document Type"::Order, gOrderNo);
          PurchOrderHeader.TESTFIELD("Buy-from Vendor No.", "Buy-from Vendor No.");
          PurchOrderHeader.TESTFIELD(Status, PurchOrderHeader.Status::Open);
          PurchOrderHeader.TESTFIELD("Copied from Purchase Quote No.", "No.");

          PurchOrderLine.LOCKTABLE;
        END ELSE BEGIN
        //**4PS.en
          PurchOrderHeader := PurchHeader;
          PurchOrderHeader."Document Type" := PurchOrderHeader."Document Type"::Order;
          PurchOrderHeader."No. Printed" := 0;
          PurchOrderHeader.Status := PurchOrderHeader.Status::Open;
          PurchOrderHeader."No." := '';
          PurchOrderHeader."Quote No." := "No.";
          PurchOrderHeader.InitRecord;

          PurchOrderLine.LOCKTABLE;
          //**4PS.sn
          IF gAskForNoSerie THEN BEGIN
            PurchOrderHeader."No. Series" := gNoSeries;
            PurchOrderHeader.GetNoForSelectedNoSeries(PurchOrderHeader);
            PurchOrderHeader.InitRecord; //C030976.n
          END;
          //**4PS.en
          PurchOrderHeader.INSERT(TRUE);
          PurchHeadExtRec.CopyPurchHeadExtension("Document Type","No.",PurchOrderHeader."Document Type",PurchOrderHeader."No.");//**4PS.n

          //**4PS.so  Dates are already filled with the WORKDATE on the 'Insert trigger', don't use date of quote
          //PurchOrderHeader."Order Date" := "Order Date";
          //IF "Posting Date" <> 0D THEN
          //  PurchOrderHeader."Posting Date" := "Posting Date";
          //**4PS.eo

          PurchOrderHeader.InitFromPurchHeader(PurchHeader);
          PurchOrderHeader."Inbound Whse. Handling Time" := "Inbound Whse. Handling Time";

          PurchOrderHeader."Prepayment %" := PrepmtPercent;
          IF PurchOrderHeader."Posting Date" = 0D THEN
            PurchOrderHeader."Posting Date" := WORKDATE;
          //**4PS.sn
          PurchOrderHeader.Deliver := Deliver;
          PurchOrderHeader."Ship-to Project" := "Ship-to Project";
          PurchOrderHeader."Ship-to Location" := "Ship-to Location";
          PurchOrderHeader."Sell-to Customer No." := "Sell-to Customer No.";
          PurchOrderHeader."Ship-to Code" := "Ship-to Code";
          PurchOrderHeader."Copied from Purchase Quote No." := "No.";
          PurchOrderHeader."Amounts only" := "Amounts only";
          //**4PS.en
          OnBeforeInsertPurchOrderHeader(PurchOrderHeader,PurchHeader);
          PurchOrderHeader."Back-to-back" := "Back-to-back"; //4PS.n 20-09-16 UKR-C27159 VAKAT
          PurchOrderHeader.MODIFY;
        END;  //**4PS.n
      END;
    END;

    LOCAL PROCEDURE AssignItemCharges@3(FromDocType@1001 : Option;FromDocNo@1002 : Code[20];FromLineNo@1100525000 : Integer;ToDocType@1004 : Option;ToDocNo@1003 : Code[20]);
    VAR
      ItemChargeAssgntPurch@1000 : Record 5805;
    BEGIN
      ItemChargeAssgntPurch.RESET;
      ItemChargeAssgntPurch.SETRANGE("Document Type",FromDocType);
      ItemChargeAssgntPurch.SETRANGE("Document No.",FromDocNo);
      ItemChargeAssgntPurch.SETRANGE("Document Line No.",FromLineNo); //**4PS.n
      WHILE ItemChargeAssgntPurch.FINDFIRST DO BEGIN
        ItemChargeAssgntPurch.DELETE;
        ItemChargeAssgntPurch."Document Type" := PurchOrderHeader."Document Type";
        ItemChargeAssgntPurch."Document No." := PurchOrderHeader."No.";
        IF NOT (ItemChargeAssgntPurch."Applies-to Doc. Type" IN
                [ItemChargeAssgntPurch."Applies-to Doc. Type"::Receipt,
                 ItemChargeAssgntPurch."Applies-to Doc. Type"::"Return Shipment"])
        THEN BEGIN
          ItemChargeAssgntPurch."Applies-to Doc. Type" := ToDocType;
          ItemChargeAssgntPurch."Applies-to Doc. No." := ToDocNo;
        END;
        ItemChargeAssgntPurch.INSERT;
      END;
    END;

    [External]
    PROCEDURE GetPurchOrderHeader@1(VAR PurchHeader@1000 : Record 38);
    BEGIN
      PurchHeader := PurchOrderHeader;
    END;

    LOCAL PROCEDURE TransferQuoteToOrderLines@11(VAR PurchQuoteLine@1000 : Record 39;VAR PurchQuoteHeader@1003 : Record 38;VAR PurchOrderLine@1001 : Record 39;VAR PurchOrderHeader@1002 : Record 38;Vend@1004 : Record 23);
    VAR
      PurchLineReserve@1005 : Codeunit 99000834;
      IsHandled@1006 : Boolean;
      ItemChargeAssgntPurch@1100525001 : Record 5805;
      PurchaseLineExtension@1100529003 : Record 11020644;
      PurchaseLineDetail@1100529001 : Record 11020660;
      PurchaseLineDetailLineType@1100529002 : Option;
    BEGIN
      PurchQuoteLine.SETRANGE("Document Type",PurchQuoteHeader."Document Type");
      PurchQuoteLine.SETRANGE("Document No.",PurchQuoteHeader."No.");
      PurchQuoteLine.SETRANGE("Quote Selected",TRUE); //**4PS.n
      IF PurchQuoteLine.FINDSET THEN
        REPEAT
         IF NOT CheckQuoteLineAlreadyCopied(PurchQuoteLine."Purchase Route Reference") THEN BEGIN //**4PS.n
          IsHandled := FALSE;
          OnBeforeTransferQuoteLineToOrderLineLoop(PurchQuoteLine,PurchQuoteHeader,PurchOrderHeader,IsHandled);
          IF NOT IsHandled THEN BEGIN
            PurchOrderLine := PurchQuoteLine;
            PurchOrderLine."Document Type" := PurchOrderHeader."Document Type";
            PurchOrderLine."Document No." := PurchOrderHeader."No.";
            //**4PS.sn
            IF gOnExistingOrder THEN
              PurchOrderLine."Line No." := DetermineNextOrderLine(PurchOrderLine."Document Type",PurchOrderLine."Document No.");
            //**4PS.en
            PurchLineReserve.TransferPurchLineToPurchLine(
              PurchQuoteLine,PurchOrderLine,PurchQuoteLine."Outstanding Qty. (Base)");
            PurchOrderLine."Shortcut Dimension 1 Code" := PurchQuoteLine."Shortcut Dimension 1 Code";
            PurchOrderLine."Shortcut Dimension 2 Code" := PurchQuoteLine."Shortcut Dimension 2 Code";
            PurchOrderLine."Dimension Set ID" := PurchQuoteLine."Dimension Set ID";
            IF Vend."Prepayment %" <> 0 THEN
              PurchOrderLine."Prepayment %" := Vend."Prepayment %";
            PrepmtMgt.SetPurchPrepaymentPct(PurchOrderLine,PurchOrderHeader."Posting Date");
            PurchOrderLine.VALIDATE("Prepayment %");
            PurchOrderLine.DefaultDeferralCode;

            //**4PS.sn
            PurchOrderLine."Order Date" := PurchOrderHeader."Order Date";
            PurchOrderLine.VALIDATE("Purchase Action"); //Check Action Status
            IF PurchOrderHeader."Amounts only" THEN
              PurchOrderLine.InitAmntToReceive
            ELSE
              PurchOrderLine.InitQtyToReceive;
            PurchOrderLine.CalculateICMQuantity;

            PurchOrderLine."Input by" := USERID;
            PurchOrderLine."Input Date" := TODAY;
            //**4PS.en

            OnBeforeInsertPurchOrderLine(PurchOrderLine,PurchOrderHeader,PurchQuoteLine,PurchQuoteHeader);
            PurchOrderLine.INSERT;
            OnAfterInsertPurchOrderLine(PurchQuoteLine,PurchOrderLine);
            PurchLineReserve.VerifyQuantity(PurchOrderLine,PurchQuoteLine);

            //**4PS.sn
            LinesCopied := TRUE;
            PurchOrderLine.CreatePurchOrderControl(FALSE);
            PurchaseLineExtension.CopyPurchLineExtension(
              PurchQuoteLine."Document Type", PurchQuoteLine."Document No.", PurchQuoteLine."Line No.",
              PurchOrderLine."Document Type", PurchOrderLine."Document No.", PurchOrderLine."Line No.");

            PurchaseLineExtension.GetPurchLineExtension(
              PurchOrderLine."Document Type", PurchOrderLine."Document No.", PurchOrderLine."Line No.");
            PurchaseLineExtension."GS1 Quantity Confirmed" := 0;
            PurchaseLineExtension.UpdatePurchLineExtension(
              PurchOrderLine."Document Type", PurchOrderLine."Document No.", PurchOrderLine."Line No.");

            ItemChargeAssgntPurch.RESET;
            ItemChargeAssgntPurch.SETRANGE("Document Type",PurchQuoteLine."Document Type");
            ItemChargeAssgntPurch.SETRANGE("Document No.",PurchQuoteLine."Document No.");
            ItemChargeAssgntPurch.SETRANGE("Document Line No.",PurchQuoteLine."Line No.");
            IF ItemChargeAssgntPurch.FIND('-') THEN BEGIN
              REPEAT
                ItemChargeAssgntPurch2 := ItemChargeAssgntPurch;
                ItemChargeAssgntPurch2."Document Type" := PurchOrderHeader."Document Type";
                ItemChargeAssgntPurch2."Document No." := PurchOrderHeader."No.";
                ItemChargeAssgntPurch2."Document Line No." := PurchOrderLine."Line No.";
                IF NOT (ItemChargeAssgntPurch."Applies-to Doc. Type" IN
                  [ItemChargeAssgntPurch."Applies-to Doc. Type"::Receipt,
                    ItemChargeAssgntPurch."Applies-to Doc. Type"::"Return Shipment"])
                THEN BEGIN
                  ItemChargeAssgntPurch2."Applies-to Doc. Type" := PurchOrderHeader."Document Type";
                  ItemChargeAssgntPurch2."Applies-to Doc. No." := PurchOrderHeader."No.";
                END;
                ItemChargeAssgntPurch2.INSERT;
              UNTIL ItemChargeAssgntPurch.NEXT = 0;
            END;

            IF (PurchQuoteLine."Purchase Route Reference" <> '') THEN BEGIN
              PurchOrderLine."Purchase Route Reference" := PurchQuoteLine."Purchase Route Reference";
              PurchOrderLine."Modified by" := USERID;
              PurchOrderLine."Last Date Modified" := TODAY;
              PurchOrderLine.MODIFY;
              RouteRefMgtCU.CloseAdvOrderFromPurchOrderLin(PurchQuoteLine);
            END ELSE BEGIN
              IF (LastRefNo = '') THEN
                LastRefNo := RouteRefMgtCU.GetLastRefNo();
              LastRefNo := INCSTR(LastRefNo);
              PurchOrderLine."Purchase Route Reference" := LastRefNo;
              PurchOrderLine."Modified by" := USERID;
              PurchOrderLine."Last Date Modified" := TODAY;
              PurchOrderLine.MODIFY;

              PurchQuoteLine."Purchase Route Reference" := LastRefNo;
              PurchQuoteLine."Modified by" := USERID;
              PurchQuoteLine."Last Date Modified" := TODAY;
              PurchQuoteLine.MODIFY;
            END;
            IF PurchQuoteLine."Purchase Action" <> '' THEN BEGIN
              BudgetLineRec.SETRANGE("Project No.",PurchQuoteLine."Job No.");
              BudgetLineRec.SETRANGE("Purchase Action",PurchQuoteLine."Purchase Action");
              BudgetLineRec.SETRANGE(Advised,FALSE);
              BudgetLineRec.MODIFYALL(Advised,TRUE);
            END;

            CopyPurchInspectionLines;
            CASE TRUE OF
              PurchQuoteLine."Job No." <> '':
                PurchaseLineDetailLineType := PurchaseLineDetail."Record Type"::Project;
              PurchQuoteLine."Service Order No." <> '':
                PurchaseLineDetailLineType := PurchaseLineDetail."Record Type"::ServOrder;
            ELSE
                PurchaseLineDetailLineType := PurchaseLineDetail."Record Type"::Inventory;
            END;
            PurchaseLineExtension.GetPurchLineExtension(PurchQuoteLine."Document Type", PurchQuoteLine."Document No.", PurchQuoteLine."Line No.");
            PurchaseLineDetail.CopyLine(PurchaseLineDetail."Line Type"::"Purchase Order",
              PurchaseLineDetailLineType, PurchQuoteLine."Job No.", PurchaseLineExtension."Yard No.", PurchaseLineExtension."System No.",
              PurchQuoteLine."Entity Type", PurchaseLineExtension."Entity No.", PurchQuoteLine."Service Order No.",
              PurchQuoteLine."Document No.", PurchQuoteLine."Line No.",
              PurchaseLineDetail."Line Type"::"Purchase Order", PurchOrderLine."Document No.", PurchOrderLine."Line No.", FALSE);
            END;
            //**4PS.en

          END;
        UNTIL PurchQuoteLine.NEXT = 0;
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterRun@10(VAR PurchaseHeader@1000 : Record 38;PurchOrderHeader@1001 : Record 38);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeRun@6(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCreatePurchHeader@12(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeDeletePurchQuote@5(VAR QuotePurchHeader@1000 : Record 38;VAR OrderPurchHeader@1001 : Record 38;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInsertPurchOrderHeader@7(VAR PurchOrderHeader@1000 : Record 38;PurchQuoteHeader@1001 : Record 38);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInsertPurchOrderLine@8(VAR PurchOrderLine@1004 : Record 39;PurchOrderHeader@1003 : Record 38;PurchQuoteLine@1002 : Record 39;PurchQuoteHeader@1001 : Record 38);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInsertPurchOrderLine@9(VAR PurchaseQuoteLine@1000 : Record 39;VAR PurchaseOrderLine@1001 : Record 39);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInsertAllPurchOrderLines@4(VAR PurchOrderLine@1001 : Record 39;PurchQuoteHeader@1000 : Record 38);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeTransferQuoteLineToOrderLineLoop@16(VAR PurchQuoteLine@1007 : Record 39;VAR PurchQuoteHeader@1006 : Record 38;VAR PurchOrderHeader@1004 : Record 38;VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    PROCEDURE PurchQuoteToBlanketPurchOrder@1210190000(VAR PurchaseQuoteHeaderRec@1210190000 : Record 38);
    VAR
      PurchCommentLine@1100525002 : Record 43;
      Vend@1100485001 : Record 23;
      PurchLineReserve@1100525000 : Codeunit 99000834;
      ItemChargeAssgntPurch@1100525001 : Record 5805;
    BEGIN
      //**4PS
      WITH PurchaseQuoteHeaderRec DO BEGIN
        TESTFIELD("Document Type","Document Type"::Quote);
        TESTFIELD("Buy-from Vendor No.");
        Vend.GET("Buy-from Vendor No.");
        Vend.CheckBlockedVendOnDocs(Vend,FALSE);

        IF "Purchase Action" <> '' THEN BEGIN
          IF PurchActrec.GET("Job No.","Purchase Action") THEN BEGIN
            IF NOT (PurchActrec.Status IN [PurchActrec.Status::Approved, PurchActrec.Status::Definitive]) THEN
              PurchActrec.FIELDERROR(PurchActrec.Status);
          END;
        END;

        PurchQuoteLine.SETRANGE("Document Type","Document Type");
        PurchQuoteLine.SETRANGE("Document No.","No.");
        PurchQuoteLine.SETRANGE("Quote Selected", TRUE);
        IF NOT PurchQuoteLine.FINDFIRST THEN
          ERROR(Text11012001, PurchQuoteLine.FIELDCAPTION("Quote Selected"));

        LastRefNo := '';
        LinesCopied := FALSE;

        IF gOnExistingOrder THEN BEGIN
          PurchOrderHeader.GET(PurchOrderHeader."Document Type"::"Blanket Order", gOrderNo);
          PurchOrderHeader.TESTFIELD("Buy-from Vendor No.", "Buy-from Vendor No.");
          PurchOrderHeader.TESTFIELD(Status, PurchOrderHeader.Status::Open);
          PurchOrderHeader.TESTFIELD("Copied from Purchase Quote No.", "No.");

          PurchOrderLine.LOCKTABLE;
        END ELSE BEGIN
          PurchOrderHeader := PurchaseQuoteHeaderRec;
          PurchOrderHeader."Document Type" := PurchOrderHeader."Document Type"::"Blanket Order";
          PurchOrderHeader."No. Printed" := 0;
          PurchOrderHeader.Status := PurchOrderHeader.Status::Open;
          PurchOrderHeader."No." := '';

          PurchOrderLine.LOCKTABLE;

          IF gAskForNoSerie THEN BEGIN
            PurchOrderHeader."No. Series" := gNoSeries;
            PurchOrderHeader.GetNoForSelectedNoSeries(PurchOrderHeader);
            PurchOrderHeader.InitRecord;
          END;

          PurchOrderHeader.INSERT(TRUE);

          PurchHeadExtRec.CopyPurchHeadExtension(
            PurchaseQuoteHeaderRec."Document Type", PurchaseQuoteHeaderRec."No.",
            PurchOrderHeader."Document Type", PurchOrderHeader."No.");

          PurchOrderHeader."Order Date" := "Order Date";
          PurchOrderHeader."Posting Date" := "Posting Date";
          PurchOrderHeader."Document Date" := "Document Date";
          PurchOrderHeader."Expected Receipt Date" := "Expected Receipt Date";
          PurchOrderHeader."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
          PurchOrderHeader."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
          PurchOrderHeader."Dimension Set ID" := "Dimension Set ID";
          PurchOrderHeader."Copied from Purchase Quote No." := "No.";
          PurchOrderHeader.MODIFY;
        END;

        PurchQuoteLine.SETRANGE("Document Type","Document Type");
        PurchQuoteLine.SETRANGE("Document No.","No.");
        PurchQuoteLine.SETRANGE("Quote Selected", TRUE);
        IF PurchQuoteLine.FINDSET(TRUE, FALSE) THEN
          REPEAT
            IF NOT CheckQuoteLineAlreadyCopied(PurchQuoteLine."Purchase Route Reference") THEN BEGIN
              PurchOrderLine := PurchQuoteLine;
              PurchOrderLine."Document Type" := PurchOrderHeader."Document Type";
              PurchOrderLine."Document No." := PurchOrderHeader."No.";
              IF gOnExistingOrder THEN
                PurchOrderLine."Line No." := DetermineNextOrderLine(PurchOrderLine."Document Type",PurchOrderLine."Document No.");
              PurchLineReserve.TransferPurchLineToPurchLine(
                PurchQuoteLine,PurchOrderLine,PurchQuoteLine."Reserved Qty. (Base)");
              PurchOrderLine."Shortcut Dimension 1 Code" := PurchQuoteLine."Shortcut Dimension 1 Code";
              PurchOrderLine."Shortcut Dimension 2 Code" := PurchQuoteLine."Shortcut Dimension 2 Code";
              PurchOrderLine."Dimension Set ID" := PurchQuoteLine."Dimension Set ID";
              PurchOrderLine.VALIDATE("Purchase Action");
              PurchOrderLine."Input by" := USERID;
              PurchOrderLine."Input Date" := TODAY;
              PurchOrderLine.INSERT;

              LinesCopied := TRUE;

              ItemChargeAssgntPurch.RESET;
              ItemChargeAssgntPurch.SETRANGE("Document Type","Document Type");
              ItemChargeAssgntPurch.SETRANGE("Document No.","No.");
              ItemChargeAssgntPurch.SETRANGE("Document Line No.",PurchQuoteLine."Line No.");
              IF ItemChargeAssgntPurch.FIND('-') THEN BEGIN
                REPEAT
                  ItemChargeAssgntPurch2 := ItemChargeAssgntPurch;
                  ItemChargeAssgntPurch2."Document Type" := PurchOrderHeader."Document Type";
                  ItemChargeAssgntPurch2."Document No." := PurchOrderHeader."No.";
                  ItemChargeAssgntPurch2."Document Line No." := PurchOrderLine."Line No.";
                  IF NOT (ItemChargeAssgntPurch."Applies-to Doc. Type" IN
                    [ItemChargeAssgntPurch."Applies-to Doc. Type"::Receipt,
                     ItemChargeAssgntPurch."Applies-to Doc. Type"::"Return Shipment"])
                  THEN BEGIN
                    ItemChargeAssgntPurch2."Applies-to Doc. Type" := PurchOrderHeader."Document Type";
                    ItemChargeAssgntPurch2."Applies-to Doc. No." := PurchOrderHeader."No.";
                  END;
                  ItemChargeAssgntPurch2.INSERT;
                UNTIL ItemChargeAssgntPurch.NEXT = 0;
              END;

              IF (PurchQuoteLine."Purchase Route Reference" <> '') THEN BEGIN
                PurchOrderLine."Purchase Route Reference" := PurchQuoteLine."Purchase Route Reference";
                PurchOrderLine."Modified by" := USERID;
                PurchOrderLine."Last Date Modified" := TODAY;
                PurchOrderLine.MODIFY;
                RouteRefMgtCU.CloseAdvOrderFromPurchOrderLin(PurchQuoteLine);
              END ELSE BEGIN
                IF (LastRefNo = '') THEN
                  LastRefNo := RouteRefMgtCU.GetLastRefNo();
                LastRefNo := INCSTR(LastRefNo);
                PurchOrderLine."Purchase Route Reference" := LastRefNo;
                PurchOrderLine."Modified by" := USERID;
                PurchOrderLine."Last Date Modified" := TODAY;
                PurchOrderLine.MODIFY;
              END;
              IF PurchQuoteLine."Purchase Action" <> '' THEN BEGIN
                BudgetLineRec.SETRANGE("Project No.",PurchQuoteLine."Job No.");
                BudgetLineRec.SETRANGE("Purchase Action",PurchQuoteLine."Purchase Action");
                BudgetLineRec.SETRANGE(Advised,FALSE);
                BudgetLineRec.MODIFYALL(Advised,TRUE);
              END;
            END;
          UNTIL PurchQuoteLine.NEXT = 0;

        IF (LastRefNo <> '') THEN
          RouteRefMgtCU.WriteLastRefNo(LastRefNo);

        IF (NOT gOnExistingOrder) THEN BEGIN
          PurchCommentLine.CopyComments("Document Type",PurchOrderHeader."Document Type","No.",PurchOrderHeader."No.");

          DocRelRec.SETRANGE("Document Type",DocRelRec."Document Type"::"Purchase Quote");
          DocRelRec.SETRANGE("No.","No.");
          IF DocRelRec.FIND('-') THEN BEGIN
            REPEAT
              DocRel1Rec.COPY(DocRelRec);
              DocRel1Rec."Document Type" := DocRelRec."Document Type"::"Blanket Order";
              DocRel1Rec."No." := PurchOrderHeader."No.";
              DocRel1Rec."Document No." := DocRelRec."Document No.";
              DocRel1Rec.INSERT;
              ParRec.SETRANGE(Type,ParRec.Type::Quote);
              ParRec.SETRANGE("No.","No.");
              ParRec.SETRANGE("Document No.",DocRel1Rec."Related Document No.");
              IF ParRec.FIND('-') THEN BEGIN
                REPEAT
                  Par1Rec.COPY(ParRec);
                  Par1Rec.Type := ParRec.Type::BlanketOrder;
                  Par1Rec."No." := PurchOrderHeader."No.";
                  Par1Rec.INSERT;
               UNTIL ParRec.NEXT = 0;
              END;
            UNTIL DocRelRec.NEXT = 0;
          END;

          PurchTextRec.SETRANGE("Line Type",PurchTextRec."Line Type"::"Purchase Quote");
          PurchTextRec.SETRANGE("No.","No.");
          IF PurchTextRec.FIND('-') THEN BEGIN
            REPEAT
              PurchText1Rec.COPY(PurchTextRec);
              PurchText1Rec."Line Type" := PurchText1Rec."Line Type"::"Blanket Order";
              PurchText1Rec."No." := PurchOrderHeader."No.";
              PurchText1Rec.INSERT;
            UNTIL PurchTextRec.NEXT = 0;
          END;
        END;

        IF (NOT LinesCopied) THEN
          ERROR(Text11012002);

        COMMIT;

      END;
    END;

    PROCEDURE SetAskForNoSerie@1210190001(INoSeries@1210190000 : Code[10]);
    BEGIN
      //**4PS
      gAskForNoSerie := TRUE;
      gNoSeries := INoSeries;
    END;

    PROCEDURE SetOnExistingOrder@1100485000(IOrderNo@1100485000 : Code[20]);
    BEGIN
      //**4PS
      gOnExistingOrder := TRUE;
      gOrderNo := IOrderNo;
    END;

    PROCEDURE CheckQuoteLineAlreadyCopied@1100485004(IRefNo@1100485000 : Code[20]) : Boolean;
    VAR
      lvPurchLineRec@1100485001 : Record 39;
    BEGIN
      //**4PS
      IF (IRefNo = '') THEN
        EXIT(FALSE);

      lvPurchLineRec.SETCURRENTKEY("Document Type","Purchase Route Reference");

      lvPurchLineRec.SETRANGE("Document Type", lvPurchLineRec."Document Type"::Order);
      lvPurchLineRec.SETRANGE("Purchase Route Reference", IRefNo);
      IF lvPurchLineRec.FINDFIRST THEN
        EXIT(TRUE);

      lvPurchLineRec.SETRANGE("Document Type", lvPurchLineRec."Document Type"::"Blanket Order");
      lvPurchLineRec.SETRANGE("Purchase Route Reference", IRefNo);
      IF lvPurchLineRec.FINDFIRST THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE DetermineNextOrderLine@1100485005(IDocType@1100485000 : Option;IDocNo@1100485001 : Code[20]) : Integer;
    VAR
      lvPurchLineRec@1100485002 : Record 39;
    BEGIN
      //**4PS
      WITH lvPurchLineRec DO BEGIN
        SETRANGE("Document Type", IDocType);
        SETRANGE("Document No.", IDocNo);
        IF FINDLAST THEN
          EXIT(("Line No." + 10000));

        EXIT(10000);
      END;
    END;

    LOCAL PROCEDURE CopyPurchInspectionLines@1100529402();
    VAR
      PurchInspectionLine@1100529400 : Record 11229328;
      PurchInspectionLineNew@1100529404 : Record 11229328;
    BEGIN
      //**4PS.sn BI006 KD 07-11-16
      PurchInspectionLine.SETRANGE("Document Type",PurchInspectionLine."Document Type"::Quote);
      PurchInspectionLine.SETRANGE("Document No.",PurchQuoteLine."Document No.");
      PurchInspectionLine.SETRANGE("Document Line No.",PurchQuoteLine."Line No.");
      IF PurchInspectionLine.ISEMPTY THEN
        EXIT;

      PurchInspectionLine.FINDSET;
      REPEAT
        PurchInspectionLineNew := PurchInspectionLine;
        PurchInspectionLineNew."Document Type" := PurchInspectionLineNew."Document Type"::Order;
        PurchInspectionLineNew."Document No." := PurchOrderLine."Document No.";
        PurchInspectionLineNew."Document Line No." := PurchOrderLine."Line No.";
        PurchInspectionLineNew.INSERT(TRUE);
      UNTIL PurchInspectionLine.NEXT = 0;
      //**4PS.en BI006 KD 07-11-16
    END;

    BEGIN
    {
      4PS 20-09-16 UKR-C27159 VAKAT: BI032 checkbox Back-to-back - Added field
      4PS 07-11-16 UKR-C21173 KD: New project inventory screen (BI006) - Added trigger CopyPurchInspectionLines; changed trigger OnRun

      --- ExFlow --->
      Code        : OnRun
      Globals
      <-- ExFlow ---
    }
    END.
  }
}

