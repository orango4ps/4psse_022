OBJECT Codeunit 11020512 IMOS File Protocol Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1000000000 : TextConst 'DEU=Datei %1 bereits vorhanden. Exportieren nicht m”glich;ENU=File %1 already exists, cannot export XML document;NLD=Bestand %1 bestaat reeds, exporteren niet mogelijk;NOR=Filen %1 finnes allerede. Kan ikke eksportere XML-dokument;SVE=Filen %1 finns redan. Det g†r inte att exportera XML-dokument';
      FileMgt@1210190000 : Codeunit 419;
      XMLDOMManagement4PS@1100525000 : Codeunit 11020220;

    PROCEDURE SendXML@1000000000(PartnerAgreement@1000000005 : Record 11020547;VAR XMLDOMDocument@1000000001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";DocumentIdentifier@1000000004 : Text[30]);
    VAR
      FileProtocol@1000000000 : Record 11020548;
      FileName@1000000002 : Text[512];
      TmpFilename@1000000003 : Text[512];
    BEGIN
      FileProtocol.GET(PartnerAgreement."File Protocol Code");

      FileName := GetOutputFileName(FileProtocol,PartnerAgreement,DocumentIdentifier);

      IF FileMgt.ClientFileExists(FileName) THEN BEGIN
        IF FileProtocol.Overwrite THEN
          FileMgt.DeleteClientFile4PS(FileName, FALSE)
        ELSE
          ERROR(Text001,FileName);
      END;

      TmpFilename := STRSUBSTNO('%1.tmp',FileName);

      XMLDOMManagement4PS.SaveXMLToClientFile(XMLDOMDocument, FileName);

      FileMgt.RenameClientFile(TmpFilename,FileName,FALSE);
    END;

    PROCEDURE Receive@1000000001(PartnerAgreement@1000000008 : Record 11020547);
    VAR
      FileProtocol@1000000001 : Record 11020548;
      InboundDocument@1000000003 : Record 11020538;
      XMLDOMDocument@1000000002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      EntryNo@1000000005 : Integer;
      FileArray@1100525001 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array" RUNONCLIENT;
      I@1100525002 : Integer;
      DirectoryName@1100525004 : Text;
      FileName@1100525003 : Text;
    BEGIN
      FileProtocol.GET(PartnerAgreement."File Protocol Code");
      FileProtocol.TESTFIELD("Folder Name");


      IF NOT FileMgt.ClientDirectoryExists(FileProtocol."Folder Name") THEN
        EXIT;

      XMLDOMDocument := XMLDOMDocument.XmlDocument;

      InboundDocument.LOCKTABLE;
      IF InboundDocument.FIND('+') THEN
        EntryNo := InboundDocument."Entry No.";

      IF (FileProtocol."File Naming Option" = FileProtocol."File Naming Option"::Fixed) AND
         (FileProtocol."File Name" <> '')
      THEN
        FileMgt.GetFileNamesOfClientFolder(FileProtocol."Folder Name", FileProtocol."File Name", FileArray)
      ELSE
        FileMgt.GetFileNamesOfClientFolder(FileProtocol."Folder Name",'*.xml', FileArray);

      IF FileArray.Length > 0 THEN
        FOR I := 1 TO FileArray.Length DO BEGIN
          EntryNo += 1;
          DirectoryName := FileMgt.GetDirectoryName(FileArray.GetValue(I - 1));
          FileName := FileMgt.GetFileName(FileArray.GetValue(I - 1));
          FileName := STRSUBSTNO('%1\%2',DirectoryName,FileName);

          IF GUIALLOWED THEN
            XMLDOMManagement4PS.LoadXMLFromClientFile(
              XMLDOMDocument, FileName, TRUE)
          ELSE BEGIN
            XMLDOMDocument.Load(FileName);
            XMLDOMManagement4PS.RemoveNamespaces(XMLDOMDocument,XMLDOMDocument);
          END;

          // IF XMLDOMDocument.ParseError.errorCode = 0 THEN BEGIN replace by next staement is this ok?
          // XMLDOMDocument.Validate(handler); no this only functions on a xml with schema
          CLEAR(InboundDocument);
          InboundDocument.INIT;
          InboundDocument."Entry No." := EntryNo;
          InboundDocument.SetInboundXMLDOM(XMLDOMDocument);
          InboundDocument.Status := InboundDocument.Status::Pending;
          InboundDocument."Protocol Code" := FileProtocol."Protocol Code";
          InboundDocument."File Name" := FileMgt.GetFileName(FileArray.GetValue(I - 1));
          InboundDocument.INSERT(TRUE);
          COMMIT;
          InboundDocument.CALCFIELDS(XML);
          FileMgt.DeleteClientFile4PS(FileName,FALSE);
         END;
    END;

    PROCEDURE PrepareMessage@1100525000(TempFolderName@1100525005 : Text[260]);
    VAR
      FileArray@1100525006 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array" RUNONCLIENT;
      OutlookAutomation@1100528700 : Codeunit 11012030;
      DirectoryName@1100525007 : Text;
      FileName@1100525008 : Text;
      I@1100525004 : Integer;
    BEGIN
      OutlookAutomation.InitOutlook;
      OutlookAutomation.InitNewMail;

      FileMgt.GetFileNamesOfClientFolder(TempFolderName, '', FileArray);

      IF FileArray.Length > 0 THEN
        FOR I := 1 TO FileArray.Length DO BEGIN
          DirectoryName := FileMgt.GetDirectoryName(FileArray.GetValue(I - 1));
          FileName := FileMgt.GetFileName(FileArray.GetValue(I - 1));
          OutlookAutomation.AddMailAttachment(STRSUBSTNO('%1\%2', DELCHR(DirectoryName, '>', '\'), FileName));
        END;

      OutlookAutomation.DisplayMail;
    END;

    LOCAL PROCEDURE GetOutputFileName@1000000013(FileProtocol@1000000000 : Record 11020548;PartnerAgreement@1000000003 : Record 11020547;DocumentIdentifier@1000000004 : Text[30]) : Text[1024];
    VAR
      TmpFileName@1000000002 : Text[1024];
    BEGIN
      IF NOT FileMgt.ClientDirectoryExists(FileProtocol."Folder Name") THEN
        ERROR('');

      CASE FileProtocol."File Naming Option" OF
        0:
          TmpFileName := STRSUBSTNO('%1.xml',FORMAT(CURRENTDATETIME,0,'<Year4><Month,2><Day,2><Hours24,2><Minutes,2><Thousands>'));
        FileProtocol."File Naming Option"::Fixed:
          BEGIN
            FileProtocol.TESTFIELD("File Name");
            TmpFileName := FileProtocol."File Name";
          END;
        FileProtocol."File Naming Option"::Mask:
          BEGIN
            TmpFileName := CreateFileName(FileProtocol,PartnerAgreement,DocumentIdentifier);
          END;
      END;

      EXIT(STRSUBSTNO('%1\%2',FileProtocol."Folder Name",TmpFileName));
    END;

    LOCAL PROCEDURE CreateFileName@1000000002(FileProtocol@1000000005 : Record 11020548;PartnerAgreement@1000000004 : Record 11020547;DocumentIdentifier@1000000006 : Text[30]) Name : Text[100];
    VAR
      NewNo@1000000001 : Text[100];
      Counter@1000000000 : Integer;
      "%Found"@1000000002 : Boolean;
      CharStr@1000000003 : Text[1];
    BEGIN
      FOR Counter := 1 TO STRLEN(FileProtocol."File Name Mask") DO BEGIN
        CharStr := FORMAT(FileProtocol."File Name Mask"[Counter]);
        IF CharStr = '%' THEN BEGIN
          IF "%Found" THEN
            NewNo += CharStr
          ELSE
            "%Found" := TRUE;
        END ELSE BEGIN
          IF (CharStr IN ['1'..'5']) AND "%Found" THEN BEGIN
            CASE CharStr OF
              '1': NewNo := NewNo + FORMAT(PartnerAgreement."XML Document Name");
              '2': NewNo := NewNo + FORMAT(DocumentIdentifier);
              '3': NewNo := NewNo + FORMAT(TODAY,0,'<Year4><Month,2><Day,2>');
              '4': NewNo := NewNo + FORMAT(TIME,0,'<Hours24,2><Minutes,2><Seconds,2>');
              '5': NewNo := NewNo + FORMAT(TIME,0,'<Thousands>');
            END;
            "%Found" := FALSE;
          END ELSE BEGIN
            NewNo := NewNo + FORMAT(CharStr);
          END;
        END;
      END;

      Name := COPYSTR(NewNo,1,MAXSTRLEN(Name));
    END;

    BEGIN
    {
      //TODO.RTC JtH Validate File ??
    }
    END.
  }
}

