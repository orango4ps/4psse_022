OBJECT Page 11012686 _Purchase Rating Statistics MB
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    Editable=No;
    CaptionML=[DEU=Tarifkomponente Ert„ge;
               ENU=Matrix;
               NLD=Matrix;
               NOR=Maskinordre, kostrad;
               SVE=Maskinorder, kostnadsrad];
    LinksAllowed=No;
    SourceTable=Table11012287;
    PageType=ListPart;
    SourceTableTemporary=Yes;
    OnInit=BEGIN
             // Use only when the matrix is editable
             //FieldEditable1 := TRUE;
             //...
             FieldVisible1 := TRUE;
             FieldVisible2 := TRUE;
             FieldVisible3 := TRUE;
             FieldVisible4 := TRUE;
             FieldVisible5 := TRUE;
             FieldVisible6 := TRUE;
             FieldVisible7 := TRUE;
             FieldVisible8 := TRUE;
             FieldVisible9 := TRUE;
             FieldVisible10 := TRUE;
             FieldVisible11 := TRUE;
             FieldVisible12 := TRUE;

             PurchStatisticMgt.InitStatistic(1);  // 1=Rating
           END;

    OnAfterGetRecord=VAR
                       I@1100528700 : Integer;
                     BEGIN
                       FOR I := 1 TO MATRIX_CurrSetLength DO
                         MATRIX_OnAfterGetRecord(I);

                       // Use only when the matrix is editable
                       //FOR I := 1 TO ARRAYLEN(MATRIX_MatrixRecords) DO
                       //  MATRIX_SetFieldEditable(I);

                       TotalLine := (("Line Type" = "Line Type"::Total) OR ("Line Type" = "Line Type"::TotalDesc));
                     END;

  }
  CONTROLS
  {
    { 1100528731;0;Container;
                ContainerType=ContentArea }

    { 1100528730;1;Group  ;
                GroupType=Repeater;
                FreezeColumnID=TotalLineAmt }

    { 1100529000;2;Field  ;
                SourceExpr=Code;
                Style=Strong;
                StyleExpr=TotalLine }

    { 1100529001;2;Field  ;
                SourceExpr=Name;
                Style=Strong;
                StyleExpr=TotalLine }

    { 1100529002;2;Field  ;
                Name=TotalLineAmt;
                CaptionML=[DEU=Gesamt;
                           ENU=Total;
                           NLD=Totaal;
                           NOR=I alt;
                           SVE=Totalt];
                BlankZero=Yes;
                SourceExpr=PurchStatisticMgt.RT_RoundAmount(Total, "Rating Type Option No.");
                Style=Strong;
                StyleExpr=TotalLine;
                OnDrillDown=BEGIN
                              IF "Rating Type Option No." <> 0 THEN  // If lines are the Vendor Rating Types
                                MATRIX_OnDrillDown(0);  // Column 0: Indicator for Total
                            END;
                             }

    { 1100528701;2;Field  ;
                Name=Field1;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[1];
                CaptionClass='3,' + MATRIX_CaptionSet[1];
                Visible=FieldVisible1;
                Editable=FieldEditable1;
                Style=Strong;
                StyleExpr=TotalLine;
                OnValidate=BEGIN
                             MATRIX_OnValidate(1);
                           END;

                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(1);
                            END;
                             }

    { 1100528702;2;Field  ;
                Name=Field2;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[2];
                CaptionClass='3,' + MATRIX_CaptionSet[2];
                Visible=FieldVisible2;
                Editable=FieldEditable2;
                Style=Strong;
                StyleExpr=TotalLine;
                OnValidate=BEGIN
                             MATRIX_OnValidate(2);
                           END;

                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(2);
                            END;
                             }

    { 1100528703;2;Field  ;
                Name=Field3;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[3];
                CaptionClass='3,' + MATRIX_CaptionSet[3];
                Visible=FieldVisible3;
                Editable=FieldEditable3;
                Style=Strong;
                StyleExpr=TotalLine;
                OnValidate=BEGIN
                             MATRIX_OnValidate(3);
                           END;

                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(3);
                            END;
                             }

    { 1100528704;2;Field  ;
                Name=Field4;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[4];
                CaptionClass='3,' + MATRIX_CaptionSet[4];
                Visible=FieldVisible4;
                Editable=FieldEditable4;
                Style=Strong;
                StyleExpr=TotalLine;
                OnValidate=BEGIN
                             MATRIX_OnValidate(4);
                           END;

                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(4);
                            END;
                             }

    { 1100528705;2;Field  ;
                Name=Field5;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[5];
                CaptionClass='3,' + MATRIX_CaptionSet[5];
                Visible=FieldVisible5;
                Editable=FieldEditable5;
                Style=Strong;
                StyleExpr=TotalLine;
                OnValidate=BEGIN
                             MATRIX_OnValidate(5);
                           END;

                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(5);
                            END;
                             }

    { 1100528706;2;Field  ;
                Name=Field6;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[6];
                CaptionClass='3,' + MATRIX_CaptionSet[6];
                Visible=FieldVisible6;
                Editable=FieldEditable6;
                Style=Strong;
                StyleExpr=TotalLine;
                OnValidate=BEGIN
                             MATRIX_OnValidate(6);
                           END;

                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(6);
                            END;
                             }

    { 1100528707;2;Field  ;
                Name=Field7;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[7];
                CaptionClass='3,' + MATRIX_CaptionSet[7];
                Visible=FieldVisible7;
                Editable=FieldEditable7;
                Style=Strong;
                StyleExpr=TotalLine;
                OnValidate=BEGIN
                             MATRIX_OnValidate(7);
                           END;

                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(7);
                            END;
                             }

    { 1100528708;2;Field  ;
                Name=Field8;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[8];
                CaptionClass='3,' + MATRIX_CaptionSet[8];
                Visible=FieldVisible8;
                Editable=FieldEditable8;
                Style=Strong;
                StyleExpr=TotalLine;
                OnValidate=BEGIN
                             MATRIX_OnValidate(8);
                           END;

                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(8);
                            END;
                             }

    { 1100528709;2;Field  ;
                Name=Field9;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[9];
                CaptionClass='3,' + MATRIX_CaptionSet[9];
                Visible=FieldVisible9;
                Editable=FieldEditable9;
                Style=Strong;
                StyleExpr=TotalLine;
                OnValidate=BEGIN
                             MATRIX_OnValidate(9);
                           END;

                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(9);
                            END;
                             }

    { 1100528710;2;Field  ;
                Name=Field10;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[10];
                CaptionClass='3,' + MATRIX_CaptionSet[10];
                Visible=FieldVisible10;
                Editable=FieldEditable10;
                Style=Strong;
                StyleExpr=TotalLine;
                OnValidate=BEGIN
                             MATRIX_OnValidate(10);
                           END;

                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(10);
                            END;
                             }

    { 1100528711;2;Field  ;
                Name=Field11;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[11];
                CaptionClass='3,' + MATRIX_CaptionSet[11];
                Visible=FieldVisible11;
                Editable=FieldEditable11;
                Style=Strong;
                StyleExpr=TotalLine;
                OnValidate=BEGIN
                             MATRIX_OnValidate(11);
                           END;

                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(11);
                            END;
                             }

    { 1100528712;2;Field  ;
                Name=Field12;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[12];
                CaptionClass='3,' + MATRIX_CaptionSet[12];
                Visible=FieldVisible12;
                Editable=FieldEditable12;
                Style=Strong;
                StyleExpr=TotalLine;
                OnValidate=BEGIN
                             MATRIX_OnValidate(12);
                           END;

                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(12);
                            END;
                             }

  }
  CODE
  {
    VAR
      MATRIX_MatrixRecord@1100528723 : Record 11012288;
      MATRIX_MatrixRecords@1100528722 : ARRAY [32] OF Record 11012288;
      MATRIX_CaptionSet@1100528718 : ARRAY [32] OF Text[80];
      MATRIX_CurrSetLength@1100528716 : Integer;
      MATRIX_CellData@1100528715 : ARRAY [32] OF Decimal;
      FieldEditable1@1100528711 : Boolean INDATASET;
      FieldEditable2@1100528710 : Boolean INDATASET;
      FieldEditable3@1100528709 : Boolean INDATASET;
      FieldEditable4@1100528708 : Boolean INDATASET;
      FieldEditable5@1100528707 : Boolean INDATASET;
      FieldEditable6@1100528706 : Boolean INDATASET;
      FieldEditable7@1100528705 : Boolean INDATASET;
      FieldEditable8@1100528704 : Boolean INDATASET;
      FieldEditable9@1100528703 : Boolean INDATASET;
      FieldEditable10@1100528702 : Boolean INDATASET;
      FieldEditable11@1100528701 : Boolean INDATASET;
      FieldEditable12@1100528700 : Boolean INDATASET;
      FieldVisible1@1100409007 : Boolean INDATASET;
      FieldVisible2@1100409006 : Boolean INDATASET;
      FieldVisible3@1100409005 : Boolean INDATASET;
      FieldVisible4@1100409004 : Boolean INDATASET;
      FieldVisible5@1100409003 : Boolean INDATASET;
      FieldVisible6@1100409002 : Boolean INDATASET;
      FieldVisible7@1100409001 : Boolean INDATASET;
      FieldVisible8@1100409000 : Boolean INDATASET;
      FieldVisible9@1100409008 : Boolean INDATASET;
      FieldVisible10@1100409009 : Boolean INDATASET;
      FieldVisible11@1100409010 : Boolean INDATASET;
      FieldVisible12@1100409011 : Boolean INDATASET;
      VendRatingType@1100525010 : Record 11012284;
      SelType@1100525011 : Record 11012285;
      TmpDataBuf@1100525006 : TEMPORARY Record 11012289;
      PurchStatisticMgt@1100525007 : Codeunit 11012297;
      TotalLine@1100525002 : Boolean INDATASET;
      Text000@1100409012 : TextConst 'DEU=Suchen nach %1... (dies kann einige Zeit in Anspruch nehmen);ENU=Searching for %1... (this may take some time);NLD=Zoeken naar %1... (dit kan enige tijd duren)';

    PROCEDURE Load@1132(VAR CaptionSet@1005 : ARRAY [32] OF Text[80];VAR MatrixRecords@1006 : ARRAY [32] OF Record 11012288;CurrSetLength@1007 : Integer);
    BEGIN
      CLEAR(MATRIX_CellData);
      COPYARRAY(MATRIX_CaptionSet, CaptionSet, 1);
      COPYARRAY(MATRIX_MatrixRecords, MatrixRecords, 1);

      MATRIX_CurrSetLength := CurrSetLength;
      MATRIX_SetFieldVisible;
    END;

    PROCEDURE Load2@1100525002(LineSelCode@1100525012 : Code[30];ColumnSelCode@1100525011 : Code[30];PeriodType@1100525010 : Option;RoundingFactor@1100525001 : Option;SkipEmptyLines@1100525008 : Boolean;RatingTypeFilter@1100525009 : Code[250];DateFilter@1100525006 : Text[30];VendorFilter@1100525005 : Code[250];VendorCategoryFilterCodeSystem@1100525014 : Code[250];VendorCategoryFilterCode@1100525013 : Code[250];VendQualFilter@1100525004 : Code[250];GLAccFilter@1100525003 : Code[250];GlobalDim1Filter@1100525002 : Code[250];GlobalDim2Filter@1100525000 : Code[250];HardDPAFilter@1100525007 : Code[250];JobFilter@1100528200 : Code[250]);
    BEGIN
      FILTERGROUP(9);
      IF SkipEmptyLines THEN
        SETRANGE("Empty Line", FALSE)
      ELSE
        SETRANGE("Empty Line");  // Reset Filter
      FILTERGROUP(0);
      PurchStatisticMgt.LoadSelections(
        LineSelCode, ColumnSelCode, PeriodType, RoundingFactor, 0, FALSE, RatingTypeFilter,
        DateFilter, VendorFilter, VendQualFilter, GLAccFilter, GlobalDim1Filter, GlobalDim2Filter, HardDPAFilter);
      PurchStatisticMgt.LoadSelectionsForVendCategory(VendorCategoryFilterCodeSystem,VendorCategoryFilterCode);
      PurchStatisticMgt.LoadSelectionsForJob(JobFilter);
    END;

    LOCAL PROCEDURE MATRIX_OnAfterGetRecord@1135(ColumnNo@1010 : Integer);
    BEGIN
      MATRIX_MatrixRecord := MATRIX_MatrixRecords[ColumnNo];

      IF "Line Type" = "Line Type"::Line THEN BEGIN
        IF TmpDataBuf.GET(Code, MATRIX_MatrixRecord.Code) THEN
          MATRIX_CellData[ColumnNo] := TmpDataBuf.Amount
        ELSE
          MATRIX_CellData[ColumnNo] := 0;
      END ELSE BEGIN
        MATRIX_CellData[ColumnNo] := MATRIX_MatrixRecord.Total;
      END;

      IF "Rating Type Option No." <> 0 THEN
        VendRatingType.Type := "Rating Type Option No."
      ELSE
        VendRatingType.Type := MATRIX_MatrixRecord."Rating Type Option No.";
      IF MATRIX_CellData[ColumnNo] <> 0 THEN BEGIN
        MATRIX_CellData[ColumnNo] := PurchStatisticMgt.RT_RoundAmount(MATRIX_CellData[ColumnNo], VendRatingType.Type);
        IF MATRIX_CellData[ColumnNo] = 0 THEN
          MATRIX_CellData[ColumnNo] := 0.000001;  // Display 0 (not empty because BlankZero is true)
      END;
    END;

    LOCAL PROCEDURE MATRIX_OnValidate@1100525001(ColumnNo@1008 : Integer);
    BEGIN
      MATRIX_UpdateCell(ColumnNo);
    END;

    LOCAL PROCEDURE MATRIX_OnLookup@1100528701(ColumnNo@1100409000 : Integer);
    BEGIN
    END;

    LOCAL PROCEDURE MATRIX_OnDrillDown@1100409000(ColumnNo@1100409000 : Integer);
    BEGIN
      IF ColumnNo <> 0 THEN
        MATRIX_MatrixRecord := MATRIX_MatrixRecords[ColumnNo];
      IF "Rating Type Option No." <> 0 THEN
        VendRatingType.Type := "Rating Type Option No."
      ELSE
        VendRatingType.Type := MATRIX_MatrixRecord."Rating Type Option No.";

      CASE VendRatingType.Type OF
        VendRatingType.Type::Vendors:
          DrillDownVendors(ColumnNo);
        VendRatingType.Type::Orders,
        VendRatingType.Type::ReturnOrdersCausedByVendor,
        VendRatingType.Type::ReturnOrders:
          DrillDownPurchOrders(ColumnNo);
        VendRatingType.Type::OrderAmt,
        VendRatingType.Type::OrderLines,
        VendRatingType.Type::AvgOrderAmt,
        VendRatingType.Type::AvgOrderLineAmt,
        VendRatingType.Type::ReturnOrderLinesCausedByVendor,
        VendRatingType.Type::ReturnOrderLines:
          DrillDownPurchOrderLines(ColumnNo);
        VendRatingType.Type::ReceiptLines,
        VendRatingType.Type::"Receipt Lines (requested) too early",
        VendRatingType.Type::"Receipt Lines (requested) in time",
        VendRatingType.Type::"Receipt Lines (requested) empty",
        VendRatingType.Type::"Receipt Lines (requested) too late",
        VendRatingType.Type::"Average deviation (requested) in days",
        VendRatingType.Type::"Receipt Lines (promised) too early",
        VendRatingType.Type::"Receipt Lines (promised) in time",
        VendRatingType.Type::"Receipt Lines (promised) empty",
        VendRatingType.Type::"Receipt Lines (promised) too late",
        VendRatingType.Type::"Average deviation (promised) in days":
          DrillDownPurchReceiptLines(ColumnNo);
        VendRatingType.Type::Invoices,
        VendRatingType.Type::BlockedInvoices,
        VendRatingType.Type::NotMatchInvoices:
          DrillDownPurchInvoices(ColumnNo);
        VendRatingType.Type::InvoiceAmt,
        VendRatingType.Type::AvgInvoiceAmt:
          DrillDownPurchInvoiceLines(ColumnNo);
        VendRatingType.Type::CrMemos,
        VendRatingType.Type::BlockedCrMemos,
        VendRatingType.Type::NotMatchCrMemos:
          DrillDownPurchCrMemos(ColumnNo);
        VendRatingType.Type::CrMemoAmt,
        VendRatingType.Type::AvgCrMemoAmt:
          DrillDownPurchCrMemoLines(ColumnNo);
      END;
    END;

    LOCAL PROCEDURE MATRIX_OnAssistEdit@1100409001(ColumnNo@1100409000 : Integer);
    BEGIN
    END;

    LOCAL PROCEDURE MATRIX_UpdateCell@1100485007(ColumnNo@1100528701 : Integer);
    BEGIN
      MATRIX_MatrixRecord := MATRIX_MatrixRecords[ColumnNo];
    END;

    LOCAL PROCEDURE MATRIX_SetFieldEditable@1100528700(ColumnNo@1100528700 : Integer);
    BEGIN
      // Use only when the matrix is editable
    END;

    LOCAL PROCEDURE MATRIX_SetFieldVisible@1100409002();
    BEGIN
      // Use only when the matrix contains checkboxes
    END;

    PROCEDURE ShareTmpTables@1100525000(VAR TmpLineBuf@1100525001 : TEMPORARY Record 11012287;VAR TmpDataBuf2@1100525006 : TEMPORARY Record 11012289);
    BEGIN
      COPY(TmpLineBuf, TRUE);
      TmpDataBuf.COPY(TmpDataBuf2, TRUE);
    END;

    PROCEDURE SetCellFiltersOnPurchOrderLine@1210190037(VAR PurchOrderLine@1100525000 : Record 39;RatingType@1210190000 : Option;LineTotalMode@1100485000 : Boolean);
    BEGIN
      WITH PurchOrderLine DO BEGIN
        IF Rec."Line Type" = Rec."Line Type"::Line THEN BEGIN
          IF (Rec."Selection Type Option No." <> SelType.Type::"VR-Type") THEN BEGIN
            CASE Rec."Selection Type Option No." OF
              SelType.Type::Period:
                SETRANGE("Order Date", Rec."Period Start", Rec."Period End");
              SelType.Type::Vendor:
                SETRANGE("Buy-from Vendor No.", Rec.Code);
              SelType.Type::Account:
                BEGIN
                  IF Rec.Code <> '' THEN
                    SETRANGE(Type, Type::"G/L Account")
                  ELSE
                    SETFILTER(Type, '<>%1', Type::" ");
                  SETRANGE("Account No.", Rec.Code);
                END;
              SelType.Type::Dim1:
                SETRANGE("Shortcut Dimension 1 Code", Rec.Code);
              SelType.Type::Dim2:
                SETRANGE("Shortcut Dimension 2 Code", Rec.Code);
            END;
          END ELSE BEGIN
            IF NOT (RatingType IN
              [VendRatingType.Type::ReturnOrdersCausedByVendor, VendRatingType.Type::ReturnOrderLinesCausedByVendor,
               VendRatingType.Type::ReturnOrders, VendRatingType.Type::ReturnOrderLines])
            THEN
              SETFILTER("Purchase Order Type", '<>%1', "Purchase Order Type"::"Return Order")
            ELSE BEGIN
              SETRANGE("Purchase Order Type", "Purchase Order Type"::"Return Order");
              IF RatingType IN [VendRatingType.Type::ReturnOrdersCausedByVendor,VendRatingType.Type::ReturnOrderLinesCausedByVendor] THEN
                SETRANGE("Return Caused by Vendor", TRUE);
            END;
          END;
        END;

        IF LineTotalMode THEN
          EXIT;

        IF (MATRIX_MatrixRecord."Selection Type Option No." <> SelType.Type::"VR-Type") THEN BEGIN
          CASE MATRIX_MatrixRecord."Selection Type Option No." OF
            SelType.Type::Period:
              SETRANGE("Order Date", MATRIX_MatrixRecord."Period Start", MATRIX_MatrixRecord."Period End");
            SelType.Type::Vendor:
              SETRANGE("Buy-from Vendor No.", MATRIX_MatrixRecord.Code);
            SelType.Type::Account:
              BEGIN
                IF MATRIX_MatrixRecord.Code <> '' THEN
                  SETRANGE(Type, Type::"G/L Account")
                ELSE
                  SETFILTER(Type, '<>%1', Type::" ");
                SETRANGE("Account No.", MATRIX_MatrixRecord.Code);
              END;
            SelType.Type::Dim1:
              SETRANGE("Shortcut Dimension 1 Code", MATRIX_MatrixRecord.Code);
            SelType.Type::Dim2:
              SETRANGE("Shortcut Dimension 2 Code", MATRIX_MatrixRecord.Code);
          END;
        END ELSE BEGIN
          IF NOT (RatingType IN
            [VendRatingType.Type::ReturnOrdersCausedByVendor, VendRatingType.Type::ReturnOrderLinesCausedByVendor,
             VendRatingType.Type::ReturnOrders, VendRatingType.Type::ReturnOrderLines])
          THEN
            SETFILTER("Purchase Order Type", '<>%1', "Purchase Order Type"::"Return Order")
          ELSE BEGIN
            SETRANGE("Purchase Order Type", "Purchase Order Type"::"Return Order");
            IF (RatingType IN
               [VendRatingType.Type::ReturnOrders, VendRatingType.Type::ReturnOrderLines]) THEN
              SETRANGE("Return Caused by Vendor", FALSE)
            ELSE
              SETRANGE("Return Caused by Vendor", TRUE);
          END;
        END;
      END;
    END;

    PROCEDURE SetCellFiltersOnPurchRcptLine@1100485018(VAR PurchRcptLine@1100525000 : Record 121;RatingType@1210190000 : Option;LineTotalMode@1100485000 : Boolean);
    BEGIN
      WITH PurchRcptLine DO BEGIN
        IF Rec."Line Type" = "Line Type"::Line THEN BEGIN
          IF (Rec."Selection Type Option No." <> SelType.Type::"VR-Type") THEN BEGIN
            CASE Rec."Selection Type Option No." OF
              SelType.Type::Period:
                SETRANGE("Order Date", Rec."Period Start", Rec."Period End");
              SelType.Type::Vendor:
                SETRANGE("Buy-from Vendor No.", Rec.Code);
              SelType.Type::Account:
                BEGIN
                  IF Rec.Code <> '' THEN
                    SETRANGE(Type, Type::"G/L Account")
                  ELSE
                    SETFILTER(Type, '<>%1', Type::" ");
                  SETRANGE("Account No.", Rec.Code);
                END;
              SelType.Type::Dim1:
                SETRANGE("Shortcut Dimension 1 Code", Rec.Code);
              SelType.Type::Dim2:
                SETRANGE("Shortcut Dimension 2 Code", Rec.Code);
            END;
          END;
        END;
        IF (RatingType = VendRatingType.Type::"Receipt Lines (requested) too early") THEN
          SETFILTER("Requested Receipt Date differs",STRSUBSTNO('%1','<0'));
        IF (RatingType = VendRatingType.Type::"Receipt Lines (requested) in time") THEN BEGIN
          SETFILTER("Requested Receipt Date differs",STRSUBSTNO('%1','=0'));
          SETFILTER("Requested Receipt Date",STRSUBSTNO('<>%1',''''''));
        END;
        IF (RatingType = VendRatingType.Type::"Receipt Lines (requested) empty") THEN BEGIN
          SETFILTER("Requested Receipt Date differs",STRSUBSTNO('%1','=0'));
          SETFILTER("Requested Receipt Date",STRSUBSTNO('%1',''''''));
        END;
        IF (RatingType = VendRatingType.Type::"Receipt Lines (requested) too late") THEN
          SETFILTER("Requested Receipt Date differs",STRSUBSTNO('%1','>0'));
        IF (RatingType = VendRatingType.Type::"Receipt Lines (promised) too early") THEN
          SETFILTER("Promised Receipt Date differs",STRSUBSTNO('%1','<0'));
        IF (RatingType = VendRatingType.Type::"Receipt Lines (promised) in time") THEN BEGIN
          SETFILTER("Promised Receipt Date differs",STRSUBSTNO('%1','=0'));
          SETFILTER("Promised Receipt Date",STRSUBSTNO('<>%1',''''''));
        END;
        IF (RatingType = VendRatingType.Type::"Receipt Lines (promised) empty") THEN BEGIN
          SETFILTER("Promised Receipt Date differs",STRSUBSTNO('%1','=0'));
          SETFILTER("Promised Receipt Date",STRSUBSTNO('%1',''''''));
        END;
        IF (RatingType = VendRatingType.Type::"Receipt Lines (promised) too late") THEN
          SETFILTER("Promised Receipt Date differs",STRSUBSTNO('%1','>0'));
        IF (RatingType = VendRatingType.Type::"Average deviation (requested) in days") THEN
          SETFILTER("Requested Receipt Date",STRSUBSTNO('<>%1',''''''));
        IF (RatingType = VendRatingType.Type::"Average deviation (promised) in days") THEN
          SETFILTER("Promised Receipt Date",STRSUBSTNO('<>%1',''''''));

        SETRANGE(Correction,FALSE);  //Always exclude Storno lines

        IF LineTotalMode THEN
          EXIT;

        IF (MATRIX_MatrixRecord."Selection Type Option No." <> SelType.Type::"VR-Type") THEN BEGIN
          CASE MATRIX_MatrixRecord."Selection Type Option No." OF
            SelType.Type::Period:
              SETRANGE("Order Date", MATRIX_MatrixRecord."Period Start", MATRIX_MatrixRecord."Period End");
            SelType.Type::Vendor:
              SETRANGE("Buy-from Vendor No.", MATRIX_MatrixRecord.Code);
            SelType.Type::Account:
              BEGIN
                IF MATRIX_MatrixRecord.Code <> '' THEN
                  SETRANGE(Type, Type::"G/L Account")
                ELSE
                  SETFILTER(Type, '<>%1', Type::" ");
                SETRANGE("Account No.", MATRIX_MatrixRecord.Code);
              END;
            SelType.Type::Dim1:
              SETRANGE("Shortcut Dimension 1 Code", MATRIX_MatrixRecord.Code);
            SelType.Type::Dim2:
              SETRANGE("Shortcut Dimension 2 Code", MATRIX_MatrixRecord.Code);
          END;
        END;
      END;
    END;

    PROCEDURE SetCellFiltersOnPurchInvLine@1210190039(VAR PurchInvLine@1100525001 : Record 123;RatingType@1210190000 : Option;LineTotalMode@1100485000 : Boolean);
    BEGIN
      WITH PurchInvLine DO BEGIN
        IF Rec."Line Type" = Rec."Line Type"::Line THEN BEGIN
          IF (Rec."Selection Type Option No." <> SelType.Type::"VR-Type") THEN BEGIN
            CASE Rec."Selection Type Option No." OF
              SelType.Type::Period:
                SETRANGE("Posting Date", Rec."Period Start", Rec."Period End");
              SelType.Type::Vendor:
                SETRANGE("Buy-from Vendor No.", Rec.Code);
              SelType.Type::Account:
                BEGIN
                  IF Rec.Code <> '' THEN
                    SETRANGE(Type, Type::"G/L Account")
                  ELSE
                    SETFILTER(Type, '<>%1', Type::" ");
                  SETRANGE("Account No.", Rec.Code);
                END;
              SelType.Type::Dim1:
                SETRANGE("Shortcut Dimension 1 Code", Rec.Code);
              SelType.Type::Dim2:
                SETRANGE("Shortcut Dimension 2 Code", Rec.Code);
            END;
          END ELSE BEGIN
            IF RatingType = VendRatingType.Type::BlockedInvoices THEN BEGIN
              SETFILTER("On Hold", '<>%1', '');
              SETRANGE("Cause by Vendor", TRUE);
            END;
            IF RatingType = VendRatingType.Type::NotMatchInvoices THEN
              SETRANGE("Receipt No.", '');
          END;
        END;

        IF LineTotalMode THEN
          EXIT;

        IF (MATRIX_MatrixRecord."Selection Type Option No." <> SelType.Type::"VR-Type") THEN BEGIN
          CASE MATRIX_MatrixRecord."Selection Type Option No." OF
            SelType.Type::Period:
              SETRANGE("Posting Date", MATRIX_MatrixRecord."Period Start", MATRIX_MatrixRecord."Period End");
            SelType.Type::Vendor:
              SETRANGE("Buy-from Vendor No.", MATRIX_MatrixRecord.Code);
            SelType.Type::Account:
              BEGIN
                IF MATRIX_MatrixRecord.Code <> '' THEN
                  SETRANGE(Type, Type::"G/L Account")
                ELSE
                  SETFILTER(Type, '<>%1', Type::" ");
                SETRANGE("Account No.", MATRIX_MatrixRecord.Code);
              END;
            SelType.Type::Dim1:
              SETRANGE("Shortcut Dimension 1 Code", MATRIX_MatrixRecord.Code);
            SelType.Type::Dim2:
              SETRANGE("Shortcut Dimension 2 Code", MATRIX_MatrixRecord.Code);
          END;
        END ELSE BEGIN
          IF RatingType = VendRatingType.Type::BlockedInvoices THEN BEGIN
            SETFILTER("On Hold", '<>%1', '');
            SETRANGE("Cause by Vendor", TRUE);
          END;
          IF RatingType = VendRatingType.Type::NotMatchInvoices THEN
            SETRANGE("Receipt No.", '');
        END;
      END;
    END;

    PROCEDURE SetCellFiltersOnPurchCrMemLine@1210190038(VAR PurchCrMemoLine@1100525000 : Record 125;RatingType@1210190000 : Option;LineTotalMode@1100485000 : Boolean);
    BEGIN
      WITH PurchCrMemoLine DO BEGIN
        IF Rec."Line Type" = Rec."Line Type"::Line THEN BEGIN
          IF (Rec."Selection Type Option No." <> SelType.Type::"VR-Type") THEN BEGIN
            CASE Rec."Selection Type Option No." OF
              SelType.Type::Period:
                SETRANGE("Posting Date", Rec."Period Start", Rec."Period End");
              SelType.Type::Vendor:
                SETRANGE("Buy-from Vendor No.", Rec.Code);
              SelType.Type::Account:
                BEGIN
                  IF Rec.Code <> '' THEN
                    SETRANGE(Type, Type::"G/L Account")
                  ELSE
                    SETFILTER(Type, '<>%1', Type::" ");
                  SETRANGE("Account No.", Rec.Code);
                END;
              SelType.Type::Dim1:
                SETRANGE("Shortcut Dimension 1 Code", Rec.Code);
              SelType.Type::Dim2:
                SETRANGE("Shortcut Dimension 2 Code", Rec.Code);
            END;
          END ELSE BEGIN
            IF RatingType = VendRatingType.Type::BlockedInvoices THEN BEGIN
              SETFILTER("On Hold", '<>%1', '');
              SETRANGE("Cause by Vendor", TRUE);
            END;
            IF RatingType = VendRatingType.Type::NotMatchInvoices THEN
              SETRANGE("Receipt No.", '');
          END;
        END;

        IF LineTotalMode THEN
          EXIT;

        IF (MATRIX_MatrixRecord."Selection Type Option No." <> SelType.Type::"VR-Type") THEN BEGIN
          CASE MATRIX_MatrixRecord."Selection Type Option No." OF
            SelType.Type::Period:
              SETRANGE("Posting Date", MATRIX_MatrixRecord."Period Start", MATRIX_MatrixRecord."Period End");
            SelType.Type::Vendor:
              SETRANGE("Buy-from Vendor No.", MATRIX_MatrixRecord.Code);
            SelType.Type::Account:
              BEGIN
                IF MATRIX_MatrixRecord.Code <> '' THEN
                  SETRANGE(Type, Type::"G/L Account")
                ELSE
                  SETFILTER(Type, '<>%1', Type::" ");
                SETRANGE("Account No.", MATRIX_MatrixRecord.Code);
              END;
            SelType.Type::Dim1:
              SETRANGE("Shortcut Dimension 1 Code", MATRIX_MatrixRecord.Code);
            SelType.Type::Dim2:
              SETRANGE("Shortcut Dimension 2 Code", MATRIX_MatrixRecord.Code);
          END;
        END ELSE BEGIN
          IF RatingType = VendRatingType.Type::BlockedInvoices THEN BEGIN
            SETFILTER("On Hold", '<>%1', '');
            SETRANGE("Cause by Vendor", TRUE);
          END;
          IF RatingType = VendRatingType.Type::NotMatchInvoices THEN
            SETRANGE("Receipt No.", '');
        END;
      END;
    END;

    PROCEDURE DrillDownVendors@1100409005(ColumnNo@1100409000 : Integer);
    VAR
      PurchOrderLine@1100409009 : Record 39;
      PurchInvoiceLine@1100409008 : Record 123;
      PurchCrMemoLine@1100409007 : Record 125;
      Vendor@1100409002 : Record 23;
      TmpVendor@1100409006 : TEMPORARY Record 23;
      Window@1100409003 : Dialog;
    BEGIN
      Window.OPEN(STRSUBSTNO(Text000, VendRatingType.Type));
      PurchStatisticMgt.SetComFiltersOnPurchOrderLine(PurchOrderLine);
      SetCellFiltersOnPurchOrderLine(PurchOrderLine, VendRatingType.Type, ColumnNo=0);
      PurchOrderLine.SETCURRENTKEY("Document Type", "Buy-from Vendor No.");
      IF PurchOrderLine.FINDFIRST THEN BEGIN
        PurchOrderLine.FILTERGROUP(9);
        REPEAT
          IF Vendor.GET(PurchOrderLine."Buy-from Vendor No.") THEN BEGIN
            TmpVendor := Vendor;
            TmpVendor.INSERT;
            PurchOrderLine.SETRANGE("Buy-from Vendor No.", PurchOrderLine."Buy-from Vendor No.");
            PurchOrderLine.FINDLAST;
            PurchOrderLine.SETRANGE("Buy-from Vendor No.");  // Reset filter
          END;
        UNTIL PurchOrderLine.NEXT = 0;
        PurchOrderLine.FILTERGROUP(0);
      END;
      PurchStatisticMgt.SetComFiltersOnPurchInvLine(PurchInvoiceLine);
      SetCellFiltersOnPurchInvLine(PurchInvoiceLine, VendRatingType.Type, ColumnNo=0);
      PurchInvoiceLine.SETCURRENTKEY("Buy-from Vendor No.");
      IF PurchInvoiceLine.FINDFIRST THEN BEGIN
        PurchInvoiceLine.FILTERGROUP(9);
        REPEAT
          IF Vendor.GET(PurchInvoiceLine."Buy-from Vendor No.") THEN BEGIN
            IF NOT TmpVendor.GET(Vendor."No.") THEN BEGIN
              TmpVendor := Vendor;
              TmpVendor.INSERT;
            END;
            PurchInvoiceLine.SETRANGE("Buy-from Vendor No.", PurchInvoiceLine."Buy-from Vendor No.");
            PurchInvoiceLine.FINDLAST;
            PurchInvoiceLine.SETRANGE("Buy-from Vendor No.");  // Reset filter
          END;
        UNTIL PurchInvoiceLine.NEXT = 0;
        PurchInvoiceLine.FILTERGROUP(0);
      END;
      PurchStatisticMgt.SetComFiltersOnPurchCrMemoLine(PurchCrMemoLine);
      SetCellFiltersOnPurchCrMemLine(PurchCrMemoLine, VendRatingType.Type, ColumnNo=0);
      PurchCrMemoLine.SETCURRENTKEY("Buy-from Vendor No.");
      IF PurchCrMemoLine.FINDFIRST THEN BEGIN
        PurchCrMemoLine.FILTERGROUP(9);
        REPEAT
          IF Vendor.GET(PurchCrMemoLine."Buy-from Vendor No.") THEN BEGIN
            IF NOT TmpVendor.GET(Vendor."No.") THEN BEGIN
              TmpVendor := Vendor;
              TmpVendor.INSERT;
            END;
            PurchCrMemoLine.SETRANGE("Buy-from Vendor No.", PurchCrMemoLine."Buy-from Vendor No.");
            PurchCrMemoLine.FINDLAST;
            PurchCrMemoLine.SETRANGE("Buy-from Vendor No.");  // Reset filter
          END;
        UNTIL PurchCrMemoLine.NEXT = 0;
        PurchCrMemoLine.FILTERGROUP(0);
      END;
      Window.CLOSE;
      TmpVendor."No." := '';
      PAGE.RUNMODAL(PAGE::"Vendor List", TmpVendor);
    END;

    PROCEDURE DrillDownPurchOrders@1100409003(ColumnNo@1100409000 : Integer);
    VAR
      PurchOrderLine@1100409004 : Record 39;
      PurchOrder@1100409002 : Record 38;
      TmpPurchOrder@1100409001 : TEMPORARY Record 38;
      Window@1100409003 : Dialog;
    BEGIN
      Window.OPEN(STRSUBSTNO(Text000, VendRatingType.Type));
      PurchStatisticMgt.SetComFiltersOnPurchOrderLine(PurchOrderLine);
      SetCellFiltersOnPurchOrderLine(PurchOrderLine, VendRatingType.Type, ColumnNo=0);
      IF PurchOrderLine.FINDFIRST THEN BEGIN
        REPEAT
          IF PurchOrder.GET(PurchOrderLine."Document Type", PurchOrderLine."Document No.") THEN BEGIN
            TmpPurchOrder := PurchOrder;
            TmpPurchOrder.INSERT;
            PurchOrderLine.SETRANGE("Document No.", PurchOrderLine."Document No.");
            PurchOrderLine.FINDLAST;
            PurchOrderLine.SETRANGE("Document No.");  // Reset filter
          END;
        UNTIL PurchOrderLine.NEXT = 0;
      END;
      Window.CLOSE;
      TmpPurchOrder."No." := '';
      PAGE.RUNMODAL(PAGE::"Purchase Order List", TmpPurchOrder);
    END;

    PROCEDURE DrillDownPurchOrderLines@1100409012(ColumnNo@1100409000 : Integer);
    VAR
      PurchOrderLine@1100409004 : Record 39;
    BEGIN
      PurchStatisticMgt.SetComFiltersOnPurchOrderLine(PurchOrderLine);
      SetCellFiltersOnPurchOrderLine(PurchOrderLine, VendRatingType.Type, ColumnNo=0);
      PAGE.RUNMODAL(PAGE::"Purchase Lines", PurchOrderLine);
    END;

    PROCEDURE DrillDownPurchReceiptLines@1100409004(ColumnNo@1100409000 : Integer);
    VAR
      PurchRcptLine@1100409001 : Record 121;
    BEGIN
      PurchStatisticMgt.SetComFiltersOnPurchRcptLine(PurchRcptLine);
      SetCellFiltersOnPurchRcptLine(PurchRcptLine, VendRatingType.Type, ColumnNo=0);
      PurchRcptLine.SETCURRENTKEY("Order No.", "Order Line No.");
      PAGE.RUNMODAL(PAGE::"Posted Purchase Receipt Lines", PurchRcptLine);
    END;

    PROCEDURE DrillDownPurchInvoices@1100409008(ColumnNo@1100409000 : Integer);
    VAR
      PurchInvoiceLine@1100409004 : Record 123;
      PurchInvoice@1100409002 : Record 122;
      TmpPurchInvoice@1100409001 : TEMPORARY Record 122;
      Window@1100409003 : Dialog;
    BEGIN
      Window.OPEN(STRSUBSTNO(Text000, VendRatingType.Type));
      PurchStatisticMgt.SetComFiltersOnPurchInvLine(PurchInvoiceLine);
      SetCellFiltersOnPurchInvLine(PurchInvoiceLine, VendRatingType.Type, ColumnNo=0);
      IF PurchInvoiceLine.FINDFIRST THEN BEGIN
        REPEAT
          IF PurchInvoice.GET(PurchInvoiceLine."Document No.") THEN BEGIN
            TmpPurchInvoice := PurchInvoice;
            TmpPurchInvoice.INSERT;
            PurchInvoiceLine.SETRANGE("Document No.", PurchInvoiceLine."Document No.");
            PurchInvoiceLine.FINDLAST;
            PurchInvoiceLine.SETRANGE("Document No.");  // Reset filter
          END;
        UNTIL PurchInvoiceLine.NEXT = 0;
      END;
      Window.CLOSE;
      TmpPurchInvoice."No." := '';
      PAGE.RUNMODAL(PAGE::"Posted Purchase Invoices", TmpPurchInvoice);
    END;

    PROCEDURE DrillDownPurchInvoiceLines@1100409011(ColumnNo@1100409000 : Integer);
    VAR
      PurchInvoiceLine@1100409001 : Record 123;
    BEGIN
      PurchStatisticMgt.SetComFiltersOnPurchInvLine(PurchInvoiceLine);
      SetCellFiltersOnPurchInvLine(PurchInvoiceLine, VendRatingType.Type, ColumnNo=0);
      PAGE.RUNMODAL(PAGE::"Posted Purchase Invoice Lines", PurchInvoiceLine);
    END;

    PROCEDURE DrillDownPurchCrMemos@1100409009(ColumnNo@1100409000 : Integer);
    VAR
      PurchCrMemoLine@1100409005 : Record 125;
      PurchCrMemo@1100409002 : Record 124;
      TmpPurchCrMemo@1100409004 : TEMPORARY Record 124;
      Window@1100409003 : Dialog;
    BEGIN
      Window.OPEN(STRSUBSTNO(Text000, VendRatingType.Type));
      PurchStatisticMgt.SetComFiltersOnPurchCrMemoLine(PurchCrMemoLine);
      SetCellFiltersOnPurchCrMemLine(PurchCrMemoLine, VendRatingType.Type, ColumnNo=0);
      IF PurchCrMemoLine.FINDFIRST THEN BEGIN
        REPEAT
          IF PurchCrMemo.GET(PurchCrMemoLine."Document No.") THEN BEGIN
            TmpPurchCrMemo := PurchCrMemo;
            TmpPurchCrMemo.INSERT;
            PurchCrMemoLine.SETRANGE("Document No.", PurchCrMemoLine."Document No.");
            PurchCrMemoLine.FINDLAST;
            PurchCrMemoLine.SETRANGE("Document No.");  // Reset filter
          END;
        UNTIL PurchCrMemoLine.NEXT = 0;
      END;
      Window.CLOSE;
      TmpPurchCrMemo."No." := '';
      PAGE.RUNMODAL(PAGE::"Posted Purchase Credit Memos", TmpPurchCrMemo);
    END;

    PROCEDURE DrillDownPurchCrMemoLines@1100409014(ColumnNo@1100409000 : Integer);
    VAR
      PurchCrMemoLine@1100409001 : Record 125;
    BEGIN
      PurchStatisticMgt.SetComFiltersOnPurchCrMemoLine(PurchCrMemoLine);
      SetCellFiltersOnPurchCrMemLine(PurchCrMemoLine, VendRatingType.Type, ColumnNo=0);
      PAGE.RUNMODAL(PAGE::"Posted Purchase Cr. Memo Lines", PurchCrMemoLine)
    END;

    BEGIN
    {

      Rec is temporary, the property SourceTableTemporary is Yes
    }
    END.
  }
}

