OBJECT Report 11128044 Copy Proj. Co Ob Wag Sls Price
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PSSE;
  }
  PROPERTIES
  {
    ProcessingOnly=Yes;
  }
  DATASET
  {
    { 8019;    ;DataItem;                    ;
               DataItemTable=Table11072003;
               OnPreDataItem=BEGIN
                               NoOfUpdates := 0;

                               IF NewStartingDate = 0D THEN
                                 ERROR(Text003);

                               ToProjFilter := GETFILTER("No.");
                               IF (FromProjNo = '') AND (ToProjFilter = '') THEN
                                 ERROR(Text002);

                               IF FromProjNo = '' THEN
                                 UseBasePriceTable := TRUE
                               ELSE
                                 UseBasePriceTable := FALSE;

                               IF ToProjFilter = '' THEN
                                 SETRANGE("No.",FromProjNo);

                               CostObjWageCompBuffer.DELETEALL;

                               IF UseBasePriceTable THEN BEGIN

                                 //////////////////////////////////////////////
                                 // From Base table
                                 IF CostObjWageCompSPrice.FINDSET THEN REPEAT

                                   CostObjWageCompBuffer.SETRANGE("Cost Object",CostObjWageCompSPrice."Cost Object");
                                   CostObjWageCompBuffer.SETRANGE("Wage Component",CostObjWageCompSPrice."Wage Component");
                                   IF NOT CostObjWageCompBuffer.FINDFIRST THEN BEGIN
                                     CostObjWageCompBuffer.INIT;
                                     CostObjWageCompBuffer."Cost Object" := CostObjWageCompSPrice."Cost Object";
                                     CostObjWageCompBuffer."Wage Component" := CostObjWageCompSPrice."Wage Component";
                                     CostObjWageCompBuffer."Sales Price" := CostObjWageCompSPrice."Sales Price";
                                     CostObjWageCompBuffer.INSERT;
                                   END ELSE BEGIN
                                     // Update if newer price
                                     CostObjWageCompBuffer."Sales Price" := CostObjWageCompSPrice."Sales Price";
                                     CostObjWageCompBuffer.MODIFY;
                                   END;
                                 UNTIL CostObjWageCompSPrice.NEXT = 0;

                               END ELSE BEGIN

                                 //////////////////////////////////////////////
                                 // From within same table
                                 IF From_ProjCostObWageSPrice.FINDSET THEN REPEAT

                                   CostObjWageCompBuffer.SETRANGE("Cost Object",From_ProjCostObWageSPrice."Cost Object");
                                   CostObjWageCompBuffer.SETRANGE("Wage Component",From_ProjCostObWageSPrice."Wage Component");
                                   IF NOT CostObjWageCompBuffer.FINDFIRST THEN BEGIN
                                     CostObjWageCompBuffer."Cost Object" := From_ProjCostObWageSPrice."Cost Object";
                                     CostObjWageCompBuffer."Wage Component" := From_ProjCostObWageSPrice."Wage Component";
                                     CostObjWageCompBuffer."Sales Price" := From_ProjCostObWageSPrice."Sales Price";
                                     CostObjWageCompBuffer.INSERT;
                                   END ELSE BEGIN
                                     // Update if newer price
                                     CostObjWageCompBuffer."Sales Price" := From_ProjCostObWageSPrice."Sales Price";
                                     CostObjWageCompBuffer.MODIFY;
                                   END;

                                 UNTIL From_ProjCostObWageSPrice.NEXT = 0;

                               END;

                               ProjCostObWageSPriceBuffer.DELETEALL;
                             END;

               OnAfterGetRecord=BEGIN
                                  //////////////////////////////////////////////
                                  // From Base price table
                                  NewerLinesExists := FALSE;

                                  CostObjWageCompBuffer.RESET;

                                  IF CostObjWageCompBuffer.FINDSET THEN REPEAT

                                      // Check if the combination of Cost Object and Project already exists with a later date
                                      To_ProjCostObWageSPrice.SETRANGE("Project No.","No.");
                                      To_ProjCostObWageSPrice.SETRANGE("Cost Object",CostObjWageCompBuffer."Cost Object");
                                      To_ProjCostObWageSPrice.SETFILTER("Starting Date",'>%1', NewStartingDate);
                                      IF To_ProjCostObWageSPrice.FINDFIRST THEN
                                        NewerLinesExists := TRUE;


                                    // Insert new line with new date and price in the buffer
                                    ProjCostObWageSPriceBuffer.INIT;
                                    ProjCostObWageSPriceBuffer.VALIDATE("Project No.","No.");
                                    ProjCostObWageSPriceBuffer.VALIDATE("Cost Object",CostObjWageCompBuffer."Cost Object");
                                    ProjCostObWageSPriceBuffer.VALIDATE("Wage Component",CostObjWageCompBuffer."Wage Component");
                                    ProjCostObWageSPriceBuffer.VALIDATE("Starting Date",NewStartingDate);

                                    CASE UpdateOption OF
                                    UpdateOption::"Fixed Amount":
                                      NewAmount := CostObjWageCompBuffer."Sales Price" + NewValue;
                                    UpdateOption::Percent:
                                      NewAmount := CostObjWageCompBuffer."Sales Price" * ((100 + NewValue) / 100);
                                    END;

                                    IF RoundAmount <> 0 THEN
                                      NewAmount := ROUND(NewAmount, RoundAmount)
                                    ELSE
                                      NewAmount := ROUND(NewAmount, 0.01);

                                    IF NewAmount < 0 THEN
                                      IF NOT CONFIRM(STRSUBSTNO(Text001,
                                        NewAmount,
                                        ProjCostObWageSPriceBuffer."Project No.",
                                        ProjCostObWageSPriceBuffer."Cost Object",
                                        ProjCostObWageSPriceBuffer."Wage Component")) THEN
                                        ERROR(Text007);

                                    ProjCostObWageSPriceBuffer.VALIDATE("Sales Price",NewAmount);
                                    ProjCostObWageSPriceBuffer.INSERT;

                                  UNTIL CostObjWageCompBuffer.NEXT = 0;

                                  // Check if newer lines were found
                                  IF NewerLinesExists THEN
                                    IF NOT CONFIRM(STRSUBSTNO(Text008,NewStartingDate)) THEN
                                      ERROR(Text007);
                                END;

               OnPostDataItem=BEGIN
                                // Update the real table from the buffer
                                ProjCostObWageSPriceBuffer.RESET;
                                IF ProjCostObWageSPriceBuffer.FINDSET THEN REPEAT
                                  To_ProjCostObWageSPrice.SETRANGE("Project No.",ProjCostObWageSPriceBuffer."Project No.");
                                  To_ProjCostObWageSPrice.SETRANGE("Cost Object",ProjCostObWageSPriceBuffer."Cost Object");
                                  To_ProjCostObWageSPrice.SETRANGE("Wage Component",ProjCostObWageSPriceBuffer."Wage Component");
                                  To_ProjCostObWageSPrice.SETRANGE("Starting Date",ProjCostObWageSPriceBuffer."Starting Date");
                                  IF NOT To_ProjCostObWageSPrice.FINDFIRST THEN BEGIN

                                    To_ProjCostObWageSPrice.VALIDATE("Project No.",ProjCostObWageSPriceBuffer."Project No.");
                                    To_ProjCostObWageSPrice.VALIDATE("Cost Object",ProjCostObWageSPriceBuffer."Cost Object");
                                    To_ProjCostObWageSPrice.VALIDATE("Wage Component",ProjCostObWageSPriceBuffer."Wage Component");
                                    To_ProjCostObWageSPrice.VALIDATE("Starting Date",ProjCostObWageSPriceBuffer."Starting Date");
                                    To_ProjCostObWageSPrice.VALIDATE("Sales Price",ProjCostObWageSPriceBuffer."Sales Price");
                                    To_ProjCostObWageSPrice.INSERT(TRUE);
                                    NoOfUpdates += 1;
                                  END;

                                UNTIL ProjCostObWageSPriceBuffer.NEXT = 0;

                                MESSAGE(Text006,NoOfUpdates);
                              END;

               ReqFilterFields=No. }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1100285005;;Container;
                  CaptionML=[ENU=Options;
                             NOR=Alternativer;
                             SVE=Alternativ];
                  ContainerType=ContentArea }

      { 1100285004;1;Field  ;
                  CaptionML=[ENU=Update Option;
                             NOR=Oppdater Alternativ;
                             SVE=Uppdateringsalternativ];
                  OptionCaptionML=[ENU=Fixed Amount,Percent;
                                   NOR=Fast bel›p,Prosent;
                                   SVE=Fast belopp,Procent];
                  SourceExpr=UpdateOption }

      { 1100285003;1;Field  ;
                  CaptionML=[ENU=From Proj. No.;
                             NOR=Fra prosjektnr;
                             SVE=Fr†nprojektnr];
                  SourceExpr=FromProjNo;
                  TableRelation=Job;
                  OnValidate=BEGIN
                               IF FromProjNo <> '' THEN BEGIN
                                 From_ProjCostObWageSPrice.SETRANGE("Project No.",FromProjNo);
                                 IF NOT From_ProjCostObWageSPrice.FINDLAST THEN
                                   ERROR(STRSUBSTNO(Text005,FromProjNo));
                               END;
                             END;
                              }

      { 1100285002;1;Field  ;
                  CaptionML=[ENU=Update w. Amount/Percentage;
                             NOR=Oppdater med bel›p/Prosent;
                             SVE=Uppdatera med belopp/procent];
                  SourceExpr=NewValue }

      { 1100285001;1;Field  ;
                  CaptionML=[ENU=Round Amount;
                             NOR=Avrundet bel›p;
                             SVE=Avrundat belopp];
                  SourceExpr=RoundAmount }

      { 1100285000;1;Field  ;
                  CaptionML=[ENU=New Starting Date;
                             NOR=Ny Startdato;
                             SVE=Nytt startdatum];
                  SourceExpr=NewStartingDate }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      From_ProjCostObWageSPrice@1100285021 : Record 11020384;
      ProjCostObWageSPriceBuffer@1100285013 : TEMPORARY Record 11020384;
      To_ProjCostObWageSPrice@1100285015 : Record 11020384;
      CostObjWageCompSPrice@1100285000 : Record 11020658;
      CostObjWageCompBuffer@1100285012 : TEMPORARY Record 11020658;
      ToProjFilter@1100285010 : Text[250];
      FromProjNo@1100285009 : Code[20];
      UpdateOption@1100285007 : 'Fixed Amount,Percent';
      NoOfUpdates@1100285006 : Integer;
      NewAmount@1100285005 : Decimal;
      NewValue@1100285004 : Decimal;
      RoundAmount@1100285003 : Decimal;
      NewStartingDate@1100285002 : Date;
      UseBasePriceTable@1100285001 : Boolean;
      Text001@1100285020 : TextConst 'ENU=There will be a negative amount (%1) for Project No. %2, Cost Object %3. Would you like to proceed anyway?;NOR=Bel›pet kommer til † bli negativt (%1) for prosjektnr %2, Kostobjekt %3. Vil du fortsette likevel?;SVE=Beloppet kommer att bli negativt (%1) f”r projektnr %2, kostnadsobjekt %3. Vill du „nd† forts„tta?';
      Text002@1100285019 : TextConst 'ENU=From Project No. cannot be blank if To Project No. is blank.;NOR=Fra prosjektnr kan ikke v‘re blankt hivs Til prosjektnr er blankt.;SVE=Fr†nprojektnr f†r inte l„mnas blankt om Tillprojektnr inte anges.';
      Text003@1100285018 : TextConst 'ENU=New Starting Date must not be blank.;NOR=Ny Startdato kan ikke v‘re blank.;SVE=Nytt startdatum f†r inte vara blankt.';
      Text005@1100285017 : TextConst 'ENU=There is no information for Project No. %1 in the table.;NOR=Det finnes ingen informasjon i tabellen for prosjektnr %1.;SVE=Det finns ingen information i tabellen f”r projektnr %1.';
      Text006@1100285016 : TextConst 'ENU=%1 new line(s) were inserted.;NOR=%1 ny(e) rad(er) ble satt inn.;SVE=%1 ny(a) rad(er) skapades.';
      Text007@1100285014 : TextConst 'ENU=The operation was aborted.;NOR=Operasjonen ble avbrutt.;SVE=Operationen avbr”ts.';
      NewerLinesExists@1100285008 : Boolean;
      Text008@1100285011 : TextConst 'ENU=There are lines on a later date than %1. Do you want to continue?;NOR=Det finnes rader p† en senere dato enn %1. Vil du fortsette?;SVE="Det finns rader med senare datum „n %1. Vill du forts„tta? "';

    BEGIN
    {
      4PSSE
      130909 ITERO.LP New ProcessingOnly report to copy data.
      130911 ITERO.DJ added Check if the combination of Cost Object and Project already exists with a later date
    }
    END.
  }
  RDLDATA
  {
  }
}

