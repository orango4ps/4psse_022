OBJECT Table 11012172 Summary Sheet
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=VAR
               EstSetup@1100528900 : Record 11012150;
             BEGIN
               Fixed := FALSE;
               TESTFIELD(Summary);
               //C035505.sn
               EstSetup.GET;
               "Excel Template contains Macros" := EstSetup."Excel Template contains Macros";
               //C035505.en
               "Modified by" := USERID;
               "Last Date Modified" := TODAY;
               "Last Time Modified" := TIME;
             END;

    OnModify=BEGIN
               IF Fixed = xRec.Fixed THEN
                 TESTFIELD(Fixed,FALSE);
             END;

    OnDelete=VAR
               SummarySheetLine@1210190001 : Record 11012171;
               SummarySheetExcelRelation@1210190000 : Record 11012173;
             BEGIN
               TESTFIELD(Fixed,FALSE);

               SummarySheetLine.SETRANGE("Estimate No.","Estimate No.");
               SummarySheetLine.SETRANGE(Summary,Summary);
               SummarySheetLine.DELETEALL;

               SummarySheetExcelRelation.SETRANGE("Estimate No.","Estimate No.");
               SummarySheetExcelRelation.SETRANGE(Summary,Summary);
               SummarySheetExcelRelation.DELETEALL;
             END;

    CaptionML=[ENU=Summary;
               NOR=Sammendrag;
               SVE=Sammanfattning];
    LookupPageID=Page11012202;
  }
  FIELDS
  {
    { 10  ;   ;Estimate No.        ;Code20        ;TableRelation=Estimate.No.;
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Global Dimension 1 Code");
                                                              END;

                                                   CaptionML=[ENU=Estimate No.;
                                                              NOR=Kalkylenr;
                                                              SVE=Kalkylnr];
                                                   NotBlank=Yes }
    { 11  ;   ;Estimate Description;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Estimate.Description WHERE (No.=FIELD(Estimate No.)));
                                                   CaptionML=[ENU=Estimate Description;
                                                              NOR=Kalkylebeskrivelse;
                                                              SVE=Kalkylbeskrivning];
                                                   Editable=No }
    { 20  ;   ;Summary             ;Code10        ;CaptionML=[ENU=Summary;
                                                              NOR=Sammendrag;
                                                              SVE=Sammanfattning] }
    { 30  ;   ;Excel Sheet         ;Text50        ;CaptionML=[ENU=Excel Sheet;
                                                              NOR=Excel-ark;
                                                              SVE=Excel-ark] }
    { 40  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 50  ;   ;Excel Template      ;Text50        ;CaptionML=[ENU=Excel Template;
                                                              NOR=Excel-mal;
                                                              SVE=Excel-mall] }
    { 60  ;   ;Modified by         ;Code50        ;TableRelation=User."User Name";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Modified by;
                                                              NOR=Endret av;
                                                              SVE=Žndrad av];
                                                   Editable=No }
    { 65  ;   ;Last Date Modified  ;Date          ;CaptionML=[ENU=Last Date Modified;
                                                              NOR=Oppdateringsdato;
                                                              SVE=Uppdateringsdatum];
                                                   Editable=No }
    { 70  ;   ;Project No.         ;Code20        ;TableRelation=Job.No.;
                                                   CaptionML=[ENU=Project No.;
                                                              NOR=Prosjektnr;
                                                              SVE=Projektnr] }
    { 75  ;   ;Element             ;Code20        ;TableRelation="Base Element".Code;
                                                   OnValidate=BEGIN
                                                                FormatMgt.FormatElem(Element,2,'');
                                                                IF Element <> '' THEN
                                                                  IF "Project No." <> '' THEN BEGIN
                                                                    IF NOT ProjectElement.GET("Project No.", Element) THEN
                                                                      BaseElement.GET(Element);
                                                                  END ELSE
                                                                    BaseElement.GET(Element);
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF "Project No." <> '' THEN BEGIN
                                                                ProjectElement.SETRANGE("Project No.", "Project No.");
                                                                ProjectElement.Element := Element;
                                                                IF PAGE.RUNMODAL(PAGE::"Project Element List", ProjectElement) = ACTION::LookupOK THEN
                                                                  VALIDATE(Element, ProjectElement.Element);
                                                              END ELSE BEGIN
                                                                BaseElement.Code := Element;
                                                                IF PAGE.RUNMODAL(PAGE::Elements, BaseElement) = ACTION::LookupOK THEN
                                                                  VALIDATE(Element, BaseElement.Code);
                                                              END;
                                                            END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Element;
                                                              NOR=Element;
                                                              SVE=Element] }
    { 80  ;   ;Sub-Estimate No.    ;Code20        ;TableRelation=Sub-Estimate."Sub-Estimate No." WHERE (Estimate No.=FIELD(Estimate No.));
                                                   OnValidate=BEGIN
                                                                ValidateSubEstimate;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Sub-Estimate No.;
                                                              NOR=Delkalkylenummer;
                                                              SVE=Delkalkylnr] }
    { 81  ;   ;Sub-Estimate Description;Text50    ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Sub-Estimate.Description WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                      Sub-Estimate No.=FIELD(Sub-Estimate No.)));
                                                   CaptionML=[ENU=Sub-Estimate Description;
                                                              NOR=Beskrivelse av delkalkyle;
                                                              SVE=Beskrivning av delkalkyl];
                                                   Editable=No }
    { 85  ;   ;Part                ;Code20        ;TableRelation="Estimate Part".Part WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                             Sub-Estimate No.=FIELD(Sub-Estimate No.));
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Part;
                                                              NOR=Del;
                                                              SVE=Del] }
    { 86  ;   ;Part Description    ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Estimate Part".Description WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                         Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                         Part=FIELD(Part)));
                                                   CaptionML=[ENU=Part Description;
                                                              NOR=Delbeskrivelse;
                                                              SVE=Delbeskrivning];
                                                   Editable=No }
    { 90  ;   ;Last Time Modified  ;Time          ;CaptionML=[ENU=Last Time Modified;
                                                              NOR=Sist endret;
                                                              SVE=Uppdateringstid] }
    { 95  ;   ;Recalculate Full Cost Price;Boolean;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Recalculate Full Cost Price;
                                                   Description=C055105;
                                                   Editable=No }
    { 100 ;   ;Fixed               ;Boolean       ;CaptionML=[ENU=Fixed;
                                                              NOR=Fast;
                                                              SVE=Fast] }
    { 110 ;   ;Summary Type        ;Option        ;CaptionML=[ENU=Summary Type;
                                                              NOR=Sammendragstype;
                                                              SVE=Sammandragstyp];
                                                   OptionCaptionML=[ENU=Cost,Sales;
                                                                    NOR=Kostnad,Salg;
                                                                    SVE=Kostnad,F”rs„ljning];
                                                   OptionString=Cost,Sales }
    { 120 ;   ;Global Dimension 1 Code;Code20     ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Estimate."Global Dimension 1 Code" WHERE (No.=FIELD(Estimate No.)));
                                                   CaptionML=[ENU=Global Dimension 1 Code;
                                                              NOR=Global dimensjon 1 kode;
                                                              SVE=Global dimension 1 kod];
                                                   Editable=No;
                                                   CaptionClass='1,1,1' }
    { 130 ;   ;Excel Template contains Macros;Boolean;
                                                   CaptionML=[ENU=Excel Template used Macros;
                                                              NOR=Excel-mal brukte Makroer;
                                                              SVE=Excel-mall anv„nde makron] }
  }
  KEYS
  {
    {    ;Estimate No.,Summary                    ;Clustered=Yes }
    {    ;Project No.                              }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      BaseElement@1210190002 : Record 11012060;
      ProjectElement@1210190001 : Record 11012010;
      FormatMgt@1210190000 : Codeunit 11012022;
      DPA_Management@1210190003 : Codeunit 11012783;

    PROCEDURE ResetFilterSubEstimate@1210190000();
    VAR
      SubEstFilter@1210190000 : Text[250];
      Estimate@1100528900 : Record 11012151;
      SubEstimate@1100528901 : Record 11072074;
      SummarySheetLine@1210190002 : Record 11012171;
      x@1100485000 : Integer;
      sp1@1100485001 : Integer;
      sp2@1100485002 : Integer;
    BEGIN
      TESTFIELD(Fixed,FALSE);
      SubEstFilter := "Sub-Estimate No.";

      Estimate.GET("Estimate No.");

      IF SubEstimate.GET("Estimate No.", "Sub-Estimate No.") THEN BEGIN
        REPEAT
          x := x + 1;
          IF COPYSTR(SubEstimate."Sub-Estimate No.",x,1) = '.' THEN BEGIN
            IF sp1 = 0 THEN
              sp1 := x
            ELSE
              IF sp2 = 0 THEN
                sp2 := x;
          END;
        UNTIL x = STRLEN(SubEstimate."Sub-Estimate No.");
        IF (SubEstimate.Level = 0) AND (sp1 <> 0) THEN
          SubEstFilter := COPYSTR(SubEstimate."Sub-Estimate No.", 1, sp1) + '*';
        IF (SubEstimate.Level = 1) AND (sp2 <> 0) THEN
          SubEstFilter := COPYSTR(SubEstimate."Sub-Estimate No.", 1, sp2) + '*';
      END;

      SummarySheetLine.SETRANGE("Estimate No.", "Estimate No.");
      SummarySheetLine.SETRANGE(Summary, Summary);
      SummarySheetLine.SETRANGE(Type, SummarySheetLine.Type::"Cost Type");
      IF SummarySheetLine.FINDSET THEN BEGIN
        REPEAT
          SummarySheetLine.VALIDATE("Sub-Estimate Filter", SubEstFilter);
          SummarySheetLine.MODIFY;
        UNTIL SummarySheetLine.NEXT = 0;
      END;

      SummarySheetLine.UpdateSummarySheet("Estimate No.", Summary, FALSE);

      "Modified by" := USERID;
      "Last Date Modified" := TODAY;
      "Last Time Modified" := TIME;

      GetDescriptions;
    END;

    PROCEDURE ResetFilterPart@1100525000();
    VAR
      PartFilter@1100525005 : Code[20];
      SummarySheetLine@1100525003 : Record 11012171;
      Estimate@1100528900 : Record 11012151;
      EstimatePart@1100528901 : Record 11072073;
      x@1100525002 : Integer;
      sp1@1100525001 : Integer;
      sp2@1100525000 : Integer;
    BEGIN
      TESTFIELD(Fixed,FALSE);
      PartFilter := Part;

      Estimate.GET("Estimate No.");

      EstimatePart.SETRANGE("Estimate No.", "Estimate No.");
      EstimatePart.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
      EstimatePart.SETRANGE(Part, Part);
      IF EstimatePart.FINDFIRST THEN BEGIN
        REPEAT
          x := x + 1;
          IF COPYSTR(EstimatePart.Part,x,1) = '.' THEN BEGIN
            IF sp1 = 0 THEN
              sp1 := x
            ELSE
              IF sp2 = 0 THEN
                sp2 := x;
          END;
        UNTIL x = STRLEN(EstimatePart.Part);
        IF (EstimatePart.Level = 0) THEN
          PartFilter := '';
        IF (EstimatePart.Level = 1) AND (sp1 <> 0) THEN
          PartFilter := COPYSTR(EstimatePart.Part, 1, sp1) + '*';
        IF (EstimatePart.Level = 2) AND (sp2 <> 0) THEN
          PartFilter := COPYSTR(EstimatePart.Part, 1, sp2) + '*';
      END;

      SummarySheetLine.SETRANGE("Estimate No.", "Estimate No.");
      SummarySheetLine.SETRANGE(Summary, Summary);
      SummarySheetLine.SETRANGE(Type, SummarySheetLine.Type::"Cost Type");
      IF SummarySheetLine.FINDSET THEN BEGIN
        REPEAT
          SummarySheetLine.VALIDATE("Part Filter", PartFilter);
          SummarySheetLine.MODIFY;
        UNTIL SummarySheetLine.NEXT = 0;
      END;

      SummarySheetLine.UpdateSummarySheet("Estimate No.", Summary, FALSE);

      "Modified by" := USERID;
      "Last Date Modified" := TODAY;
      "Last Time Modified" := TIME;

      GetDescriptions;
    END;

    PROCEDURE SetFilterPrintDoc@1100485002();
    VAR
      PrintDoc@1100485001 : Codeunit 229;
      SummarySheetLine@1100485000 : Record 11012171;
    BEGIN
      SummarySheetLine.SETRANGE("Estimate No.","Estimate No.");
      SummarySheetLine.SETRANGE(Summary,Summary);
      IF SummarySheetLine.FINDSET(FALSE,FALSE) THEN
        PrintDoc.PrintSummarySheet(SummarySheetLine);
    END;

    PROCEDURE GetSummaryCost@1100525002(TotalDec@1100525001 : Decimal) Result : Decimal;
    VAR
      ContrAmnt@1100525000 : Decimal;
    BEGIN
      ContrAmnt := GetSummaryAmount;
      IF ContrAmnt <> 0 THEN
        Result := GetSummaryAmount - TotalDec;

      EXIT(Result);
    END;

    PROCEDURE GetSummaryAmount@1100525001() Result : Decimal;
    VAR
      SummarySheetLine@1100525000 : Record 11012171;
    BEGIN
      SummarySheetLine.SETRANGE("Estimate No." , "Estimate No.");
      SummarySheetLine.SETRANGE(Summary , Summary);
      SummarySheetLine.SETRANGE("Contract Amount", TRUE);
      IF SummarySheetLine.FINDFIRST THEN BEGIN
        SummarySheetLine.CALCFIELDS("Subtotal Amount");
        Result := SummarySheetLine."Subtotal Amount";
      END;

      EXIT(Result);
    END;

    PROCEDURE EstimateNoInDepartmentFilter@1210190001(Context@1210190000 : Text[30]);
    VAR
      Estimate@1210190001 : Record 11012151;
    BEGIN
      //C001088
      Estimate.GET("Estimate No.");  //C003206
      Estimate.DPA_SetFilters(Context);
      IF NOT Estimate.DPA_CanFindRecWithDPAFltrAppld() THEN
        DPA_Management.RaiseDPAErrorForTable(Estimate.TABLECAPTION);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
      i@1100525004 : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      FOR i := 10 DOWNTO 0 DO BEGIN
        RecRef.FILTERGROUP(i);
        FILTERGROUP(i);
        SETVIEW(RecRef.GETVIEW(FALSE));
      END;

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
      FPSLicenseManagement@1100527400 : Codeunit 11229289;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT FPSLicenseManagement.LicenseAndReadPermissionForTable(DepartmentAuthorizObject) THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Global Dimension 1 Code"));
    END;

    PROCEDURE GetTotals@1100528900(VAR HourDec@1100528903 : Decimal;VAR LaborDec@1100528904 : Decimal;VAR ItemDec@1100528905 : Decimal;VAR SubcDec@1100528906 : Decimal;VAR PlantDec@1100528907 : Decimal;VAR SundryDec@1100528908 : Decimal;VAR TotalDec@1100528909 : Decimal);
    VAR
      Estimate@1100528902 : Record 11012151;
      SubEstimate@1100528900 : Record 11072074;
    BEGIN
      //DP00381
      CLEAR(HourDec);
      CLEAR(LaborDec);
      CLEAR(ItemDec);
      CLEAR(SubcDec);
      CLEAR(PlantDec);
      CLEAR(SundryDec);
      CLEAR(TotalDec);

      Estimate.GET("Estimate No.");
      IF "Sub-Estimate No." <> '' THEN BEGIN
        SubEstimate.SETRANGE("Estimate No.", "Estimate No.");
        SubEstimate.SETFILTER("Sub-Estimate No.", "Sub-Estimate No.");
        IF SubEstimate.FINDSET THEN BEGIN
          REPEAT
            IF "Summary Type" = "Summary Type"::Sales THEN BEGIN
              SubEstimate.CALCFIELDS("Cum. Hours (Sales)", "Cum. Labor (Sales)", "Cum. Material (Sales)",
                "Cum. Subcontracting (Sales)", "Cum. Plant (Sales)", "Cum. Sundry (Sales)");
              HourDec := HourDec + SubEstimate."Cum. Hours (Sales)";
              LaborDec := LaborDec + SubEstimate."Cum. Labor (Sales)";
              ItemDec := ItemDec + SubEstimate."Cum. Material (Sales)";
              SubcDec := SubcDec + SubEstimate."Cum. Subcontracting (Sales)";
              PlantDec := PlantDec + SubEstimate."Cum. Plant (Sales)";
              SundryDec := SundryDec + SubEstimate."Cum. Sundry (Sales)";
              TotalDec := LaborDec + ItemDec + SubcDec + PlantDec + SundryDec;  //C045203
            END ELSE BEGIN
              SubEstimate.CALCFIELDS("Cum. Hours", "Cum. Labor", "Cum. Material",
                "Cum. Subcontracting", "Cum. Plant", "Cum. Sundry");
              HourDec := HourDec + SubEstimate."Cum. Hours";
              LaborDec := LaborDec + SubEstimate."Cum. Labor";
              ItemDec := ItemDec + SubEstimate."Cum. Material";
              SubcDec := SubcDec + SubEstimate."Cum. Subcontracting";
              PlantDec := PlantDec + SubEstimate."Cum. Plant";
              SundryDec := SundryDec + SubEstimate."Cum. Sundry";
              TotalDec := LaborDec + ItemDec + SubcDec + PlantDec + SundryDec;  //C045203
            END;
          UNTIL SubEstimate.NEXT = 0;
        END;
      END ELSE BEGIN
        IF "Summary Type" = "Summary Type"::Sales THEN BEGIN
          Estimate.CALCFIELDS("Hours (Sales)", "Labor Sales Amount", "Material Sales Amount",
            "Subcontracting Sales Amount", "Plant Sales Amount", "Sundry Sales Amount");
          HourDec := Estimate."Hours (Sales)";
          LaborDec := Estimate."Labor Sales Amount";
          ItemDec := Estimate."Material Sales Amount";
          SubcDec := Estimate."Subcontracting Sales Amount";
          PlantDec := Estimate."Plant Sales Amount";
          SundryDec := Estimate."Sundry Sales Amount";
          TotalDec := LaborDec + ItemDec + SubcDec + PlantDec + SundryDec;  //C045203
        END ELSE BEGIN
          Estimate.CALCFIELDS("Hours (Cost)", "Labor Cost Amount", "Material Cost Amount",
            "Subcontracting Cost Amount", "Plant Cost Amount", "Sundry Cost Amount");
          HourDec := Estimate."Hours (Cost)";
          LaborDec := Estimate."Labor Cost Amount";
          ItemDec := Estimate."Material Cost Amount";
          SubcDec := Estimate."Subcontracting Cost Amount";
          PlantDec := Estimate."Plant Cost Amount";
          SundryDec := Estimate."Sundry Cost Amount";
          TotalDec := LaborDec + ItemDec + SubcDec + PlantDec + SundryDec;  //C045203
        END;
      END;
    END;

    PROCEDURE ValidateSubEstimate@1100525005();
    VAR
      SubEstimate@1100525000 : Record 11072074;
    BEGIN
      IF SubEstimate.GET("Estimate No.", "Sub-Estimate No.") THEN BEGIN
        IF "Summary Type" = "Summary Type"::Sales THEN
          SubEstimate."Summary (Sales)" := Summary
        ELSE
          SubEstimate."Summary (Cost)" := Summary;
        SubEstimate.MODIFY;
      END ELSE BEGIN
        //C052050
        IF "Sub-Estimate No." = '' THEN BEGIN
          IF SubEstimate.GET("Estimate No.", xRec."Sub-Estimate No.") THEN BEGIN
            IF "Summary Type" = "Summary Type"::Sales THEN
              SubEstimate."Summary (Sales)" := ''
            ELSE
              SubEstimate."Summary (Cost)" := '';
            SubEstimate.MODIFY;
          END;
        END;
      END;
    END;

    PROCEDURE LookupSubEstimate@1100525003();
    VAR
      SubEstimate@1100525000 : Record 11072074;
    BEGIN
      SubEstimate.SETRANGE("Estimate No.", "Estimate No.");
      IF PAGE.RUNMODAL(0, SubEstimate) = ACTION::LookupOK THEN BEGIN
        VALIDATE("Sub-Estimate No.", SubEstimate."Sub-Estimate No.");
        ResetFilterSubEstimate;
      END;
    END;

    PROCEDURE LookupPart@1100525004();
    VAR
      EstimatePart@1100525000 : Record 11072073;
    BEGIN
      EstimatePart.SETRANGE("Estimate No.", "Estimate No.");
      EstimatePart.SETFILTER("Sub-Estimate No.", "Sub-Estimate No.");
      IF PAGE.RUNMODAL(0, EstimatePart) = ACTION::LookupOK THEN BEGIN
        VALIDATE(Part, EstimatePart.Part);
        ResetFilterPart;
      END;
    END;

    PROCEDURE GetDescriptions@1100525006();
    VAR
      SubEstimate@1100525004 : Record 11072074;
      EstimatePart@1100525003 : Record 11072073;
    BEGIN
      "Sub-Estimate Description" := '';
      "Part Description" := '';

      IF SubEstimate.GET("Estimate No.", "Sub-Estimate No.") THEN
        "Sub-Estimate Description" := SubEstimate.Description;

      EstimatePart.SETRANGE("Estimate No.", "Estimate No.");
      EstimatePart.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
      EstimatePart.SETRANGE(Part, Part);
      IF EstimatePart.FINDFIRST THEN
        "Part Description" := EstimatePart.Description;
    END;

    PROCEDURE CheckAndRefreshSheet@1100525007();
    VAR
      SummarySheet@1100528201 : Record 11012172;
      Estimate@1100528200 : Record 11012151;
      RefreshSheet@1100528202 : Boolean;
      SummarySheetLine@1100528203 : Record 11012171;
    BEGIN
      //C022155
      IF NOT SummarySheet.GET("Estimate No.", Summary) THEN SummarySheet.INIT;

      IF NOT Estimate.GET("Estimate No.") THEN Estimate.INIT;
      IF Estimate."Last Date Modified" > SummarySheet."Last Date Modified" THEN
        RefreshSheet := TRUE
      ELSE
        IF (Estimate."Last Date Modified" = SummarySheet."Last Date Modified") AND
           (Estimate."Last Time Modified" > SummarySheet."Last Time Modified") THEN
          RefreshSheet := TRUE;

      IF SummarySheet.Fixed THEN EXIT;

      IF RefreshSheet THEN BEGIN
        SummarySheetLine."Estimate No." := SummarySheet."Estimate No.";
        SummarySheetLine.Summary := SummarySheet.Summary;
        SummarySheetLine.UpdateLogbook;
        SummarySheetLine.UpdateSummarySheet(SummarySheet."Estimate No.", SummarySheet.Summary, FALSE);
        COMMIT;
      END;
    END;

    BEGIN
    {
      DP00381: Lookup-relation for Sub-Estimate and Estimate Part refers to new tables
    }
    END.
  }
}

