OBJECT Codeunit 378 Transfer Extended Text
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.04,4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=There is not enough space to insert extended text lines.;NOR=Det finnes ikke nok plass til † sette inn utvidete tekstlinjer.;SVE=Det finns inte tillr„ckligt med utrymme f”r att infoga rader med extratext.';
      GLAcc@1001 : Record 15;
      Item@1002 : Record 27;
      BaseRecipe@1100525000 : Record 11020581;
      Res@1003 : Record 156;
      TempExtTextLine@1004 : TEMPORARY Record 280;
      DimMgt@1210190001 : Codeunit 408;
      NextLineNo@1005 : Integer;
      LineSpacing@1006 : Integer;
      MakeUpdateRequired@1007 : Boolean;
      AutoText@1008 : Boolean;

    [External]
    PROCEDURE SalesCheckIfAnyExtText@1(VAR SalesLine@1000 : Record 37;Unconditionally@1001 : Boolean) : Boolean;
    VAR
      SalesHeader@1002 : Record 36;
      ExtTextHeader@1003 : Record 279;
    BEGIN
      MakeUpdateRequired := FALSE;
      IF IsDeleteAttachedLines(SalesLine."Line No.",SalesLine."No.",SalesLine."Attached to Line No.") THEN
        MakeUpdateRequired := DeleteSalesLines(SalesLine);

      AutoText := FALSE;

      IF Unconditionally THEN
        AutoText := TRUE
      ELSE
        CASE SalesLine.Type OF
          SalesLine.Type::" ":
            AutoText := TRUE;
          SalesLine.Type::"G/L Account":
            BEGIN
              IF GLAcc.GET(SalesLine."No.") THEN
                AutoText := GLAcc."Automatic Ext. Texts";
              //**4PS.sn
              IF Item.GET(SalesLine."Item No.") THEN
                AutoText := Item."Automatic Ext. Texts";
              IF BaseRecipe.GET(SalesLine."Recipe Group", SalesLine.Recipe) THEN   //**4PS DP00481.n
                AutoText := BaseRecipe."Automatic Ext. Texts";                     //**4PS DP00481.n
              //**4PS.en
            END;
          SalesLine.Type::Item:
            BEGIN
              IF Item.GET(SalesLine."No.") THEN
                AutoText := Item."Automatic Ext. Texts";
            END;
          SalesLine.Type::Resource:
            BEGIN
              IF Res.GET(SalesLine."No.") THEN
                AutoText := Res."Automatic Ext. Texts";
            END;
        END;

      IF AutoText THEN BEGIN
        SalesLine.TESTFIELD("Document No.");
        SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
        //**4PS.sn
        IF SalesLine."Item No." <> '' THEN BEGIN
          ExtTextHeader.SETRANGE("Table Name", SalesLine.Type::Item);
          ExtTextHeader.SETRANGE("No.", SalesLine."Item No.");
        END ELSE BEGIN
          IF SalesLine.Recipe <> '' THEN BEGIN   //**4PS DP00481.sn
            ExtTextHeader.SETRANGE("Table Name", ExtTextHeader."Table Name"::"Base Recipe");
            ExtTextHeader.SETRANGE("No.", SalesLine.Recipe);
          END ELSE BEGIN                        //**4PS DP00481.en
        //**4PS.en
            ExtTextHeader.SETRANGE("Table Name",SalesLine.Type);
            ExtTextHeader.SETRANGE("No.",SalesLine."No.");
          END; //**4PS.n
        END;  //**4PS DP00481.n
        CASE SalesLine."Document Type" OF
          SalesLine."Document Type"::Quote:
            ExtTextHeader.SETRANGE("Sales Quote",TRUE);
          SalesLine."Document Type"::"Blanket Order":
            ExtTextHeader.SETRANGE("Sales Blanket Order",TRUE);
          SalesLine."Document Type"::Order:
            ExtTextHeader.SETRANGE("Sales Order",TRUE);
          SalesLine."Document Type"::Invoice:
            ExtTextHeader.SETRANGE("Sales Invoice",TRUE);
          SalesLine."Document Type"::"Return Order":
            ExtTextHeader.SETRANGE("Sales Return Order",TRUE);
          SalesLine."Document Type"::"Credit Memo":
            ExtTextHeader.SETRANGE("Sales Credit Memo",TRUE);
        END;
        OnSalesCheckIfAnyExtTextAutoText(ExtTextHeader,SalesHeader,SalesLine,Unconditionally);
        EXIT(ReadLines(ExtTextHeader,SalesHeader."Document Date",SalesHeader."Language Code"));
      END;
    END;

    [External]
    PROCEDURE ReminderCheckIfAnyExtText@14(VAR ReminderLine@1000 : Record 296;Unconditionally@1001 : Boolean) : Boolean;
    VAR
      ReminderHeader@1002 : Record 295;
      ExtTextHeader@1003 : Record 279;
    BEGIN
      MakeUpdateRequired := FALSE;
      IF IsDeleteAttachedLines(ReminderLine."Line No.",ReminderLine."No.",ReminderLine."Attached to Line No.") THEN
        MakeUpdateRequired := DeleteReminderLines(ReminderLine);

      IF Unconditionally THEN
        AutoText := TRUE
      ELSE
        CASE ReminderLine.Type OF
          ReminderLine.Type::" ":
            AutoText := TRUE;
          ReminderLine.Type::"G/L Account":
            IF GLAcc.GET(ReminderLine."No.") THEN
              AutoText := GLAcc."Automatic Ext. Texts";
        END;

      IF AutoText THEN BEGIN
        ReminderLine.TESTFIELD("Reminder No.");
        ReminderHeader.GET(ReminderLine."Reminder No.");
        ExtTextHeader.SETRANGE("Table Name",ReminderLine.Type);
        ExtTextHeader.SETRANGE("No.",ReminderLine."No.");
        ExtTextHeader.SETRANGE(Reminder,TRUE);
        OnReminderCheckIfAnyExtTextAutoText(ExtTextHeader,ReminderHeader,ReminderLine,Unconditionally);
        EXIT(ReadLines(ExtTextHeader,ReminderHeader."Document Date",ReminderHeader."Language Code"));
      END;
    END;

    [External]
    PROCEDURE FinChrgMemoCheckIfAnyExtText@15(VAR FinChrgMemoLine@1000 : Record 303;Unconditionally@1001 : Boolean) : Boolean;
    VAR
      FinChrgMemoHeader@1002 : Record 302;
      ExtTextHeader@1003 : Record 279;
    BEGIN
      MakeUpdateRequired := FALSE;
      IF IsDeleteAttachedLines(FinChrgMemoLine."Line No.",FinChrgMemoLine."No.",FinChrgMemoLine."Attached to Line No.") THEN
        MakeUpdateRequired := DeleteFinChrgMemoLines(FinChrgMemoLine);

      IF Unconditionally THEN
        AutoText := TRUE
      ELSE
        CASE FinChrgMemoLine.Type OF
          FinChrgMemoLine.Type::" ":
            AutoText := TRUE;
          FinChrgMemoLine.Type::"G/L Account":
            IF GLAcc.GET(FinChrgMemoLine."No.") THEN
              AutoText := GLAcc."Automatic Ext. Texts";
        END;

      IF AutoText THEN BEGIN
        FinChrgMemoLine.TESTFIELD("Finance Charge Memo No.");
        FinChrgMemoHeader.GET(FinChrgMemoLine."Finance Charge Memo No.");
        ExtTextHeader.SETRANGE("Table Name",FinChrgMemoLine.Type);
        ExtTextHeader.SETRANGE("No.",FinChrgMemoLine."No.");
        ExtTextHeader.SETRANGE("Finance Charge Memo",TRUE);
        OnFinChrgMemoCheckIfAnyExtTextAutoText(ExtTextHeader,FinChrgMemoHeader,FinChrgMemoLine,Unconditionally);
        EXIT(ReadLines(ExtTextHeader,FinChrgMemoHeader."Document Date",FinChrgMemoHeader."Language Code"));
      END;
    END;

    [External]
    PROCEDURE PurchCheckIfAnyExtText@7(VAR PurchLine@1000 : Record 39;Unconditionally@1001 : Boolean) : Boolean;
    VAR
      PurchHeader@1002 : Record 38;
      ExtTextHeader@1003 : Record 279;
    BEGIN
      MakeUpdateRequired := FALSE;
      IF IsDeleteAttachedLines(PurchLine."Line No.",PurchLine."No.",PurchLine."Attached to Line No.") THEN
        MakeUpdateRequired := DeletePurchLines(PurchLine);

      AutoText := FALSE;

      IF Unconditionally THEN
        AutoText := TRUE
      ELSE
        CASE PurchLine.Type OF
          PurchLine.Type::" ":
            AutoText := TRUE;
          PurchLine.Type::"G/L Account":
            BEGIN
              IF GLAcc.GET(PurchLine."No.") THEN
                AutoText := GLAcc."Automatic Ext. Texts";
              //**4PS.sn
              IF Item.GET(PurchLine."Item No.") THEN
                AutoText := Item."Automatic Ext. Texts";
              //**4PS.en
            END;
          PurchLine.Type::Item:
            BEGIN
              IF Item.GET(PurchLine."No.") THEN
                AutoText := Item."Automatic Ext. Texts";
            END;
        END;

      IF AutoText THEN BEGIN
        PurchLine.TESTFIELD("Document No.");
        PurchHeader.GET(PurchLine."Document Type",PurchLine."Document No.");
        //**4PS.sn
        IF PurchLine."Item No." <> '' THEN BEGIN
          ExtTextHeader.SETRANGE("Table Name",PurchLine.Type::Item);
          ExtTextHeader.SETRANGE("No.",PurchLine."Item No.");
        END ELSE BEGIN
        //**4PS.en
          ExtTextHeader.SETRANGE("Table Name",PurchLine.Type);
          ExtTextHeader.SETRANGE("No.",PurchLine."No.");
        END; //**4PS.n
        CASE PurchLine."Document Type" OF
          PurchLine."Document Type"::Quote:
            ExtTextHeader.SETRANGE("Purchase Quote",TRUE);
          PurchLine."Document Type"::"Blanket Order":
            ExtTextHeader.SETRANGE("Purchase Blanket Order",TRUE);
          PurchLine."Document Type"::Order:
            ExtTextHeader.SETRANGE("Purchase Order",TRUE);
          PurchLine."Document Type"::Invoice:
            ExtTextHeader.SETRANGE("Purchase Invoice",TRUE);
          PurchLine."Document Type"::"Return Order":
            ExtTextHeader.SETRANGE("Purchase Return Order",TRUE);
          PurchLine."Document Type"::"Credit Memo":
            ExtTextHeader.SETRANGE("Purchase Credit Memo",TRUE);
        END;
        OnPurchCheckIfAnyExtTextAutoText(ExtTextHeader,PurchHeader,PurchLine,Unconditionally);
        EXIT(ReadLines(ExtTextHeader,PurchHeader."Document Date",PurchHeader."Language Code"));
      END;
    END;

    [External]
    PROCEDURE PrepmtGetAnyExtText@8(GLAccNo@1001 : Code[20];TabNo@1000 : Integer;DocumentDate@1006 : Date;LanguageCode@1003 : Code[10];VAR ExtTextLine@1004 : TEMPORARY Record 280);
    VAR
      GLAcc@1002 : Record 15;
      ExtTextHeader@1005 : Record 279;
    BEGIN
      ExtTextLine.DELETEALL;

      GLAcc.GET(GLAccNo);
      IF NOT GLAcc."Automatic Ext. Texts" THEN
        EXIT;

      ExtTextHeader.SETRANGE("Table Name",ExtTextHeader."Table Name"::"G/L Account");
      ExtTextHeader.SETRANGE("No.",GLAccNo);
      CASE TabNo OF
        DATABASE::"Sales Invoice Line":
          ExtTextHeader.SETRANGE("Prepmt. Sales Invoice",TRUE);
        DATABASE::"Sales Cr.Memo Line":
          ExtTextHeader.SETRANGE("Prepmt. Sales Credit Memo",TRUE);
        DATABASE::"Purch. Inv. Line":
          ExtTextHeader.SETRANGE("Prepmt. Purchase Invoice",TRUE);
        DATABASE::"Purch. Cr. Memo Line":
          ExtTextHeader.SETRANGE("Prepmt. Purchase Credit Memo",TRUE);
      END;
      OnPrepmtGetAnyExtTextBeforeReadLines(ExtTextHeader,DocumentDate,LanguageCode);
      IF ReadLines(ExtTextHeader,DocumentDate,LanguageCode) THEN BEGIN
        OnPrepmtGetAnyExtTextAfterReadLines(ExtTextHeader,TempExtTextLine);
        TempExtTextLine.FIND('-');
        REPEAT
          ExtTextLine := TempExtTextLine;
          ExtTextLine.INSERT;
        UNTIL TempExtTextLine.NEXT = 0;
      END;
    END;

    PROCEDURE SettlCheckIfAnyExtText@1210190000(VAR CostPlusLine@1000 : Record 11012019;Unconditionally@1001 : Boolean;TextType@1210190001 : 'Cost Object,Operation,Item,Standard Text';RefDate@1100485000 : Date) : Boolean;
    VAR
      ExtTextHeader@1003 : Record 279;
      CostObjectRec@1210190000 : Record 349;
      OperationRec@1210190002 : Record 11012091;
      ItemRec@1210190003 : Record 27;
    BEGIN
      //**4PS
      MakeUpdateRequired := FALSE;
      IF CostPlusLine."Line No." <> 0 THEN
        MakeUpdateRequired := DeleteCostPlusLines(CostPlusLine);

      AutoText := FALSE;

      IF Unconditionally THEN
        AutoText := TRUE
      ELSE BEGIN
        CASE TextType OF
          TextType::"Cost Object":
            BEGIN
              DimMgt.GetDimValueRec(2,CostPlusLine."Cost Object",CostObjectRec,TRUE,'');
              AutoText := CostObjectRec."Automatic Ext. Texts";
            END;
          TextType::Operation:
            IF OperationRec.GET(CostPlusLine.Operation) THEN
              AutoText := OperationRec."Automatic Ext. Texts";
          TextType::Item:
            IF ItemRec.GET(CostPlusLine."Item No.") THEN
              AutoText := ItemRec."Automatic Ext. Texts";
        END;
      END;

      IF AutoText THEN BEGIN
        IF NOT Unconditionally THEN BEGIN
          CASE TextType OF
            TextType::"Cost Object":
              BEGIN
                ExtTextHeader.SETRANGE("Table Name",ExtTextHeader."Table Name"::"Cost Object");
                ExtTextHeader.SETRANGE("No.",CostPlusLine."Cost Object");
                ExtTextHeader.SETRANGE("Settlement Sheet",TRUE);
              END;
            TextType::Operation:
              BEGIN
                ExtTextHeader.SETRANGE("Table Name",ExtTextHeader."Table Name"::"Small Project Operation");
                ExtTextHeader.SETRANGE("No.",CostPlusLine.Operation);
                ExtTextHeader.SETRANGE("Settlement Sheet",TRUE);
              END;
            TextType::Item:
              BEGIN
                ExtTextHeader.SETRANGE("Table Name",ExtTextHeader."Table Name"::Item);
                ExtTextHeader.SETRANGE("No.",CostPlusLine."Item No.");
                ExtTextHeader.SETRANGE("Settlement Sheet",TRUE);
              END;
          END;
        END ELSE BEGIN
          ExtTextHeader.SETRANGE("Table Name",ExtTextHeader."Table Name"::"Standard Text");
          ExtTextHeader.SETRANGE("No.",CostPlusLine."Standard Text Code");
        END;
        EXIT(ReadLines(ExtTextHeader,RefDate,''));
      END;
    END;

    PROCEDURE BudgetCheckIfAnyExtText@1100485002(VAR BudgetLine@1000 : Record 11012001;Unconditionally@1001 : Boolean) : Boolean;
    VAR
      ExtTextHeader@1003 : Record 279;
      ItemRec@1210190003 : Record 27;
    BEGIN
      //**4PS    diekus
      MakeUpdateRequired := FALSE;
      IF BudgetLine."Line No." <> 0 THEN
        MakeUpdateRequired := DeleteBudgetLines(BudgetLine);

      AutoText := FALSE;

      IF Unconditionally THEN
        AutoText := TRUE
      ELSE BEGIN
        IF ItemRec.GET(BudgetLine."Item No.") THEN
          AutoText := ItemRec."Automatic Ext. Texts";
      END;

      IF AutoText THEN BEGIN
        IF NOT Unconditionally THEN BEGIN
          ExtTextHeader.SETRANGE("Table Name",ExtTextHeader."Table Name"::Item);
          ExtTextHeader.SETRANGE("No.",BudgetLine."Item No.");
          //ExtTextHeader.SETRANGE("Settlement Sheet",TRUE);
        END ELSE BEGIN
          ExtTextHeader.SETRANGE("Table Name",ExtTextHeader."Table Name"::"Standard Text");
          //ExtTextHeader.SETRANGE("No.",BudgetLine."Standard Text Code");
        END;
        EXIT(ReadLines(ExtTextHeader,TODAY,''));
      END;
    END;

    [External]
    PROCEDURE InsertSalesExtText@2(VAR SalesLine@1000 : Record 37);
    VAR
      DummySalesLine@1001 : Record 37;
    BEGIN
      InsertSalesExtTextRetLast(SalesLine,DummySalesLine);
    END;

    [External]
    PROCEDURE InsertSalesExtTextRetLast@34(VAR SalesLine@1000 : Record 37;VAR LastInsertedSalesLine@1002 : Record 37);
    VAR
      ToSalesLine@1001 : Record 37;
      IsHandled@1003 : Boolean;
    BEGIN
      OnBeforeInsertSalesExtText(SalesLine,TempExtTextLine,IsHandled);
      IF IsHandled THEN
        EXIT;

      ToSalesLine.RESET;
      ToSalesLine.SETRANGE("Document Type",SalesLine."Document Type");
      ToSalesLine.SETRANGE("Document No.",SalesLine."Document No.");
      ToSalesLine := SalesLine;
      IF ToSalesLine.FIND('>') THEN BEGIN
        LineSpacing :=
          (ToSalesLine."Line No." - SalesLine."Line No.") DIV
          (1 + TempExtTextLine.COUNT);
        IF LineSpacing = 0 THEN
          ERROR(Text000);
      END ELSE
        LineSpacing := 10000;

      NextLineNo := SalesLine."Line No." + LineSpacing;

      TempExtTextLine.RESET;
      IF TempExtTextLine.FIND('-') THEN BEGIN
        REPEAT
          ToSalesLine.INIT;
          ToSalesLine."Document Type" := SalesLine."Document Type";
          ToSalesLine."Document No." := SalesLine."Document No.";
          ToSalesLine."Line No." := NextLineNo;
          NextLineNo := NextLineNo + LineSpacing;
          ToSalesLine.Description := TempExtTextLine.Text;
          ToSalesLine."Attached to Line No." := SalesLine."Line No.";
          //**4PS.sn
          ToSalesLine."Project Invoice" := SalesLine."Project Invoice";
          ToSalesLine."Installment Invoice" := SalesLine."Installment Invoice";
          ToSalesLine."Plant Invoice" := SalesLine."Plant Invoice";
          ToSalesLine."Service Invoice" := SalesLine."Service Invoice";
          //**4PS.en
          OnBeforeToSalesLineInsert(ToSalesLine,SalesLine,TempExtTextLine,NextLineNo,LineSpacing);
          ToSalesLine.INSERT;
        UNTIL TempExtTextLine.NEXT = 0;
        MakeUpdateRequired := TRUE;
      END;
      TempExtTextLine.DELETEALL;
      LastInsertedSalesLine := ToSalesLine;
    END;

    [External]
    PROCEDURE InsertReminderExtText@13(VAR ReminderLine@1000 : Record 296);
    VAR
      ToReminderLine@1001 : Record 296;
      IsHandled@1002 : Boolean;
    BEGIN
      OnBeforeInsertReminderExtText(ReminderLine,TempExtTextLine,IsHandled);
      IF IsHandled THEN
        EXIT;

      ToReminderLine.RESET;
      ToReminderLine.SETRANGE("Reminder No.",ReminderLine."Reminder No.");
      ToReminderLine := ReminderLine;
      IF ToReminderLine.FIND('>') THEN BEGIN
        LineSpacing :=
          (ToReminderLine."Line No." - ReminderLine."Line No.") DIV
          (1 + TempExtTextLine.COUNT);
        IF LineSpacing = 0 THEN
          ERROR(Text000);
      END ELSE
        LineSpacing := 10000;

      NextLineNo := ReminderLine."Line No." + LineSpacing;

      TempExtTextLine.RESET;
      IF TempExtTextLine.FIND('-') THEN BEGIN
        REPEAT
          ToReminderLine.INIT;
          ToReminderLine."Reminder No." := ReminderLine."Reminder No.";
          ToReminderLine."Line No." := NextLineNo;
          NextLineNo := NextLineNo + LineSpacing;
          ToReminderLine.Description := TempExtTextLine.Text;
          ToReminderLine."Attached to Line No." := ReminderLine."Line No.";
          ToReminderLine."Line Type" := ReminderLine."Line Type";
          OnBeforeToReminderLineInsert(ToReminderLine,ReminderLine,TempExtTextLine);
          ToReminderLine.INSERT;
        UNTIL TempExtTextLine.NEXT = 0;
        MakeUpdateRequired := TRUE;
      END;
      TempExtTextLine.DELETEALL;
    END;

    [External]
    PROCEDURE InsertFinChrgMemoExtText@16(VAR FinChrgMemoLine@1000 : Record 303);
    VAR
      ToFinChrgMemoLine@1001 : Record 303;
      IsHandled@1002 : Boolean;
    BEGIN
      OnBeforeInsertFinChrgMemoExtText(FinChrgMemoLine,TempExtTextLine,IsHandled);
      IF IsHandled THEN
        EXIT;

      ToFinChrgMemoLine.RESET;
      ToFinChrgMemoLine.SETRANGE("Finance Charge Memo No.",FinChrgMemoLine."Finance Charge Memo No.");
      ToFinChrgMemoLine := FinChrgMemoLine;
      IF ToFinChrgMemoLine.FIND('>') THEN BEGIN
        LineSpacing :=
          (ToFinChrgMemoLine."Line No." - FinChrgMemoLine."Line No.") DIV
          (1 + TempExtTextLine.COUNT);
        IF LineSpacing = 0 THEN
          ERROR(Text000);
      END ELSE
        LineSpacing := 10000;

      NextLineNo := FinChrgMemoLine."Line No." + LineSpacing;

      TempExtTextLine.RESET;
      IF TempExtTextLine.FIND('-') THEN BEGIN
        REPEAT
          ToFinChrgMemoLine.INIT;
          ToFinChrgMemoLine."Finance Charge Memo No." := FinChrgMemoLine."Finance Charge Memo No.";
          ToFinChrgMemoLine."Line No." := NextLineNo;
          NextLineNo := NextLineNo + LineSpacing;
          ToFinChrgMemoLine.Description := TempExtTextLine.Text;
          ToFinChrgMemoLine."Attached to Line No." := FinChrgMemoLine."Line No.";
          ToFinChrgMemoLine.INSERT;
        UNTIL TempExtTextLine.NEXT = 0;
        MakeUpdateRequired := TRUE;
      END;
      TempExtTextLine.DELETEALL;
    END;

    [External]
    PROCEDURE InsertPurchExtText@3(VAR PurchLine@1000 : Record 39);
    VAR
      DummyPurchLine@1001 : Record 39;
    BEGIN
      InsertPurchExtTextRetLast(PurchLine,DummyPurchLine);
    END;

    [External]
    PROCEDURE InsertPurchExtTextRetLast@35(VAR PurchLine@1000 : Record 39;VAR LastInsertedPurchLine@1002 : Record 39);
    VAR
      ToPurchLine@1001 : Record 39;
      IsHandled@1003 : Boolean;
      LineNo@1100527450 : Integer;
    BEGIN
      OnBeforeInsertPurchExtText(PurchLine,TempExtTextLine,IsHandled);
      IF IsHandled THEN
        EXIT;

      ToPurchLine.RESET;
      ToPurchLine.SETRANGE("Document Type",PurchLine."Document Type");
      ToPurchLine.SETRANGE("Document No.",PurchLine."Document No.");
      ToPurchLine := PurchLine;
      IF ToPurchLine.FIND('>') THEN BEGIN
        //**4PS.so
        //LineSpacing :=
          //(ToPurchLine."Line No." - PurchLine."Line No.") DIV
          //(1 + TempExtTextLine.COUNT);
        //IF LineSpacing = 0 THEN
          //ERROR(Text000);
        //**4PS.eo
        //**4PS.sn
        IF ToPurchLine."Removal Contribution" THEN BEGIN
          LineNo := ToPurchLine."Line No.";
          IF ToPurchLine.FIND('>') THEN BEGIN
            LineSpacing :=
              (ToPurchLine."Line No." - LineNo) DIV
              (1 + TempExtTextLine.COUNT);
            IF LineSpacing = 0 THEN
              ERROR(Text000);
          END ELSE
            LineSpacing := 10000;
        END ELSE BEGIN
          LineSpacing :=
            (ToPurchLine."Line No." - PurchLine."Line No.") DIV
            (1 + TempExtTextLine.COUNT);
          IF LineSpacing = 0 THEN
            ERROR(Text000);
        END;
        //**4PS.en
      END ELSE
        LineSpacing := 10000;

      NextLineNo := PurchLine."Line No." + LineSpacing;

      TempExtTextLine.RESET;
      IF TempExtTextLine.FIND('-') THEN BEGIN
        REPEAT
          ToPurchLine.INIT;
          ToPurchLine."Document Type" := PurchLine."Document Type";
          ToPurchLine."Document No." := PurchLine."Document No.";
          ToPurchLine."Line No." := NextLineNo;
          NextLineNo := NextLineNo + LineSpacing;
          ToPurchLine.Description := TempExtTextLine.Text;
          ToPurchLine."Attached to Line No." := PurchLine."Line No.";
          //**4PS.sn
          ToPurchLine."Input by" := USERID; //DP00469
          ToPurchLine."Input Date" := TODAY; //DP00469
          //**4PS.en
          OnBeforeToPurchLineInsert(ToPurchLine,PurchLine,TempExtTextLine,NextLineNo,LineSpacing);
          ToPurchLine.INSERT;
        UNTIL TempExtTextLine.NEXT = 0;
        MakeUpdateRequired := TRUE;
      END;
      TempExtTextLine.DELETEALL;
      LastInsertedPurchLine := ToPurchLine;
    END;

    PROCEDURE InsertSettlExtText@1210190002(VAR CostPlusLine@1000 : Record 11012019);
    VAR
      ToCostPlusLine@1001 : Record 11012019;
    BEGIN
      //**4PS
      ToCostPlusLine.RESET;
      ToCostPlusLine.SETRANGE("Project No.",CostPlusLine."Project No.");
      ToCostPlusLine.SETRANGE(Principal,CostPlusLine.Principal);
      ToCostPlusLine.SETRANGE("Commission No.",CostPlusLine."Commission No.");
      ToCostPlusLine.SETRANGE("Settl.Sheet No.",CostPlusLine."Settl.Sheet No.");
      ToCostPlusLine := CostPlusLine;
      IF ToCostPlusLine.FIND('>') THEN BEGIN
        LineSpacing :=
          (ToCostPlusLine."Line No." - CostPlusLine."Line No.") DIV
          (1 + TempExtTextLine.COUNT);
        IF LineSpacing = 0 THEN
          ERROR(Text000);
      END ELSE
        LineSpacing := 10000;

      NextLineNo := CostPlusLine."Line No." + LineSpacing;

      TempExtTextLine.RESET;
      IF TempExtTextLine.FIND('-') THEN BEGIN
        REPEAT
          ToCostPlusLine.INIT;
          ToCostPlusLine."Project No." := CostPlusLine."Project No.";
          ToCostPlusLine.Principal := CostPlusLine.Principal;
          ToCostPlusLine."Commission No." := CostPlusLine."Commission No.";
          ToCostPlusLine."Settl.Sheet No." := CostPlusLine."Settl.Sheet No.";
          ToCostPlusLine.Operation := CostPlusLine.Operation;
          ToCostPlusLine."Line No." := NextLineNo;
          NextLineNo := NextLineNo + LineSpacing;
          ToCostPlusLine.Description := TempExtTextLine.Text;
          ToCostPlusLine."Attached to Line No." := CostPlusLine."Line No.";
          ToCostPlusLine.Chargeable := CostPlusLine.Chargeable;
          ToCostPlusLine.INSERT;
        UNTIL TempExtTextLine.NEXT = 0;
        MakeUpdateRequired := TRUE;
      END;
      TempExtTextLine.DELETEALL;
    END;

    PROCEDURE InsertBudgetExtText@1100485000(VAR BudgetLine@1000 : Record 11012001);
    VAR
      ToBudgetLine@1001 : Record 11012001;
    BEGIN
      //**4PS
      ToBudgetLine.COPY(BudgetLine);
      IF ToBudgetLine.FIND('>') THEN BEGIN
        LineSpacing :=
          (ToBudgetLine."Line No." - BudgetLine."Line No.") DIV
          (1 + TempExtTextLine.COUNT);
        IF LineSpacing = 0 THEN
          ERROR(Text000);
      END ELSE
        LineSpacing := 10000;

      NextLineNo := BudgetLine."Line No." + LineSpacing;

      TempExtTextLine.RESET;
      IF TempExtTextLine.FIND('-') THEN BEGIN
        REPEAT
          ToBudgetLine.INIT;
          ToBudgetLine."Project No." := BudgetLine."Project No.";
          ToBudgetLine."Line No." := NextLineNo;
          NextLineNo := NextLineNo + LineSpacing;
          ToBudgetLine.Description := TempExtTextLine.Text;
          ToBudgetLine."Cost Type" := BudgetLine."Cost Type";
          ToBudgetLine."Attached to Line No." := BudgetLine."Line No.";
          ToBudgetLine."Department Code" := BudgetLine."Department Code";
          ToBudgetLine.INSERT;
        UNTIL TempExtTextLine.NEXT = 0;
        MakeUpdateRequired := TRUE;
      END;
      TempExtTextLine.DELETEALL;
    END;

    LOCAL PROCEDURE DeleteSalesLines@4(VAR SalesLine@1000 : Record 37) : Boolean;
    VAR
      SalesLine2@1001 : Record 37;
    BEGIN
      SalesLine2.SETRANGE("Document Type",SalesLine."Document Type");
      SalesLine2.SETRANGE("Document No.",SalesLine."Document No.");
      SalesLine2.SETRANGE("Attached to Line No.",SalesLine."Line No.");
      OnDeleteSalesLinesOnAfterSetFilters(SalesLine2,SalesLine);
      SalesLine2 := SalesLine;
      IF SalesLine2.FIND('>') THEN BEGIN
        REPEAT
          SalesLine2.DELETE(TRUE);
        UNTIL SalesLine2.NEXT = 0;
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE DeleteReminderLines@12(VAR ReminderLine@1000 : Record 296) : Boolean;
    VAR
      ReminderLine2@1001 : Record 296;
    BEGIN
      ReminderLine2.SETRANGE("Reminder No.",ReminderLine."Reminder No.");
      ReminderLine2.SETRANGE("Attached to Line No.",ReminderLine."Line No.");
      ReminderLine2 := ReminderLine;
      IF ReminderLine2.FIND('>') THEN BEGIN
        REPEAT
          ReminderLine2.DELETE;
        UNTIL ReminderLine2.NEXT = 0;
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE DeleteFinChrgMemoLines@17(VAR FinChrgMemoLine@1000 : Record 303) : Boolean;
    VAR
      FinChrgMemoLine2@1001 : Record 303;
    BEGIN
      FinChrgMemoLine2.SETRANGE("Finance Charge Memo No.",FinChrgMemoLine."Finance Charge Memo No.");
      FinChrgMemoLine2.SETRANGE("Attached to Line No.",FinChrgMemoLine."Line No.");
      FinChrgMemoLine2 := FinChrgMemoLine;
      IF FinChrgMemoLine2.FIND('>') THEN BEGIN
        REPEAT
          FinChrgMemoLine2.DELETE;
        UNTIL FinChrgMemoLine2.NEXT = 0;
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE DeletePurchLines@5(VAR PurchLine@1000 : Record 39) : Boolean;
    VAR
      PurchLine2@1001 : Record 39;
    BEGIN
      PurchLine2.SETRANGE("Document Type",PurchLine."Document Type");
      PurchLine2.SETRANGE("Document No.",PurchLine."Document No.");
      PurchLine2.SETRANGE("Attached to Line No.",PurchLine."Line No.");
      PurchLine2.SETRANGE("Removal Contribution", FALSE); //**4PS.n
      OnDeletePurchLinesOnAfterSetFilters(PurchLine2,PurchLine);
      PurchLine2 := PurchLine;
      IF PurchLine2.FIND('>') THEN BEGIN
        REPEAT
          PurchLine2.DELETE(TRUE);
        UNTIL PurchLine2.NEXT = 0;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE DeleteCostPlusLines@1210190001(VAR CostPlusLine@1000 : Record 11012019) : Boolean;
    VAR
      CostPlusLine2@1001 : Record 11012019;
    BEGIN
      //**4PS
      CostPlusLine2.SETRANGE("Project No.",CostPlusLine."Project No.");
      CostPlusLine2.SETRANGE(Principal,CostPlusLine.Principal);
      CostPlusLine2.SETRANGE("Commission No.",CostPlusLine."Commission No.");
      CostPlusLine2.SETRANGE("Settl.Sheet No.",CostPlusLine."Settl.Sheet No.");
      CostPlusLine2.SETRANGE("Attached to Line No.",CostPlusLine."Line No.");
      CostPlusLine2 := CostPlusLine;
      IF CostPlusLine2.FIND('>') THEN BEGIN
        REPEAT
          CostPlusLine2.DELETE;
        UNTIL CostPlusLine2.NEXT = 0;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE DeleteBudgetLines@1100485001(VAR BudgetLine@1000 : Record 11012001) : Boolean;
    VAR
      BudgetLine2@1001 : Record 11012001;
    BEGIN
      //**4PS   diekus
      BudgetLine2.SETRANGE("Project No.",BudgetLine."Project No.");
      BudgetLine2.SETRANGE("Attached to Line No.",BudgetLine."Line No.");
      BudgetLine2 := BudgetLine;
      IF BudgetLine2.FIND('>') THEN BEGIN
        REPEAT
          BudgetLine2.DELETE;
        UNTIL BudgetLine2.NEXT = 0;
        EXIT(TRUE);
      END;
    END;

    [External]
    PROCEDURE MakeUpdate@6() : Boolean;
    BEGIN
      EXIT(MakeUpdateRequired);
    END;

    PROCEDURE ReadLines@10(VAR ExtTextHeader@1000 : Record 279;DocDate@1001 : Date;LanguageCode@1002 : Code[10]) Result : Boolean;
    VAR
      ExtTextLine@1003 : Record 280;
      IsHandled@1004 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeReadLines(ExtTextHeader,DocDate,LanguageCode,IsHandled,Result);
      IF IsHandled THEN
        EXIT(Result);

      ExtTextHeader.SETCURRENTKEY(
        "Table Name","No.","Language Code","All Language Codes","Starting Date","Ending Date");
      ExtTextHeader.SETRANGE("Starting Date",0D,DocDate);
      ExtTextHeader.SETFILTER("Ending Date",'%1..|%2',DocDate,0D);
      IF LanguageCode = '' THEN BEGIN
        ExtTextHeader.SETRANGE("Language Code",'');
        IF NOT ExtTextHeader.FINDSET THEN
          EXIT;
      END ELSE BEGIN
        ExtTextHeader.SETRANGE("Language Code",LanguageCode);
        IF NOT ExtTextHeader.FINDSET THEN BEGIN
          ExtTextHeader.SETRANGE("All Language Codes",TRUE);
          ExtTextHeader.SETRANGE("Language Code",'');
          IF NOT ExtTextHeader.FINDSET THEN
            EXIT;
        END;
      END;
      TempExtTextLine.DELETEALL;
      REPEAT
        ExtTextLine.SETRANGE("Table Name",ExtTextHeader."Table Name");
        ExtTextLine.SETRANGE("No.",ExtTextHeader."No.");
        ExtTextLine.SETRANGE("Language Code",ExtTextHeader."Language Code");
        ExtTextLine.SETRANGE("Text No.",ExtTextHeader."Text No.");
        IF ExtTextLine.FINDSET THEN BEGIN
          REPEAT
            TempExtTextLine := ExtTextLine;
            TempExtTextLine.INSERT;
          UNTIL ExtTextLine.NEXT = 0;
          Result := TRUE;
        END;
      UNTIL ExtTextHeader.NEXT = 0;
    END;

    [External]
    PROCEDURE ServCheckIfAnyExtText@9(VAR ServiceLine@1000 : Record 5902;Unconditionally@1001 : Boolean) : Boolean;
    VAR
      ServHeader@1002 : Record 5900;
      ExtTextHeader@1003 : Record 279;
      ServCost@1004 : Record 5905;
    BEGIN
      MakeUpdateRequired := FALSE;
      IF IsDeleteAttachedLines(ServiceLine."Line No.",ServiceLine."No.",ServiceLine."Attached to Line No.") THEN
        MakeUpdateRequired := DeleteServiceLines(ServiceLine);

      AutoText := FALSE;
      IF Unconditionally THEN
        AutoText := TRUE
      ELSE
        CASE ServiceLine.Type OF
          ServiceLine.Type::" ":
            AutoText := TRUE;
          ServiceLine.Type::Cost:
            BEGIN
              IF ServCost.GET(ServiceLine."No.") THEN
                IF GLAcc.GET(ServCost."Account No.") THEN
                  AutoText := GLAcc."Automatic Ext. Texts";
            END;
          ServiceLine.Type::Item:
            BEGIN
              IF Item.GET(ServiceLine."No.") THEN
                AutoText := Item."Automatic Ext. Texts";
            END;
          ServiceLine.Type::Resource:
            BEGIN
              IF Res.GET(ServiceLine."No.") THEN
                AutoText := Res."Automatic Ext. Texts";
            END;
          ServiceLine.Type::"G/L Account":
            BEGIN
              IF GLAcc.GET(ServiceLine."No.") THEN
                AutoText := GLAcc."Automatic Ext. Texts";
            END;
        END;
      IF AutoText THEN BEGIN
        CASE ServiceLine.Type OF
          ServiceLine.Type::" ":
            BEGIN
              ExtTextHeader.SETRANGE("Table Name",ExtTextHeader."Table Name"::"Standard Text");
              ExtTextHeader.SETRANGE("No.",ServiceLine."No.");
            END;
          ServiceLine.Type::Item:
            BEGIN
              ExtTextHeader.SETRANGE("Table Name",ExtTextHeader."Table Name"::Item);
              ExtTextHeader.SETRANGE("No.",ServiceLine."No.");
            END;
          ServiceLine.Type::Resource:
            BEGIN
              ExtTextHeader.SETRANGE("Table Name",ExtTextHeader."Table Name"::Resource);
              ExtTextHeader.SETRANGE("No.",ServiceLine."No.");
            END;
          ServiceLine.Type::Cost:
            BEGIN
              ExtTextHeader.SETRANGE("Table Name",ExtTextHeader."Table Name"::"G/L Account");
              ServCost.GET(ServiceLine."No.");
              ExtTextHeader.SETRANGE("No.",ServCost."Account No.");
            END;
          ServiceLine.Type::"G/L Account":
            BEGIN
              ExtTextHeader.SETRANGE("Table Name",ExtTextHeader."Table Name"::"G/L Account");
              ExtTextHeader.SETRANGE("No.",ServiceLine."No.");
            END;
        END;

        CASE ServiceLine."Document Type" OF
          ServiceLine."Document Type"::Quote:
            ExtTextHeader.SETRANGE("Service Quote",TRUE);
          ServiceLine."Document Type"::Order:
            ExtTextHeader.SETRANGE("Service Order",TRUE);
          ServiceLine."Document Type"::Invoice:
            ExtTextHeader.SETRANGE("Service Invoice",TRUE);
          ServiceLine."Document Type"::"Credit Memo":
            ExtTextHeader.SETRANGE("Service Credit Memo",TRUE);
        END;
        ServHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
        OnServCheckIfAnyExtTextAutoText(ExtTextHeader,ServHeader,ServiceLine,Unconditionally);
        EXIT(ReadLines(ExtTextHeader,ServHeader."Order Date",ServHeader."Language Code"));
      END;
    END;

    LOCAL PROCEDURE DeleteServiceLines@11(VAR ServiceLine@1000 : Record 5902) : Boolean;
    VAR
      ServiceLine2@1001 : Record 5902;
    BEGIN
      ServiceLine2.SETRANGE("Document Type",ServiceLine."Document Type");
      ServiceLine2.SETRANGE("Document No.",ServiceLine."Document No.");
      ServiceLine2.SETRANGE("Attached to Line No.",ServiceLine."Line No.");
      ServiceLine2 := ServiceLine;
      IF ServiceLine2.FIND('>') THEN BEGIN
        REPEAT
          ServiceLine2.DELETE;
        UNTIL ServiceLine2.NEXT = 0;
        EXIT(TRUE);
      END;
    END;

    [External]
    PROCEDURE GetTempExtTextLine@41(VAR ToTempExtendedTextLine@1000 : TEMPORARY Record 280);
    BEGIN
      ToTempExtendedTextLine.COPY(TempExtTextLine,TRUE);
    END;

    [External]
    PROCEDURE InsertServExtText@18(VAR ServiceLine@1000 : Record 5902);
    VAR
      ToServiceLine@1001 : Record 5902;
      IsHandled@1002 : Boolean;
    BEGIN
      OnBeforeInsertServExtText(ServiceLine,TempExtTextLine,IsHandled);
      IF IsHandled THEN
        EXIT;

      ToServiceLine.RESET;
      ToServiceLine.SETRANGE("Document Type",ServiceLine."Document Type");
      ToServiceLine.SETRANGE("Document No.",ServiceLine."Document No.");
      ToServiceLine := ServiceLine;
      IF ToServiceLine.FIND('>') THEN BEGIN
        LineSpacing :=
          (ToServiceLine."Line No." - ServiceLine."Line No.") DIV
          (1 + TempExtTextLine.COUNT);
        IF LineSpacing = 0 THEN
          ERROR(Text000);
      END ELSE
        LineSpacing := 10000;

      NextLineNo := ServiceLine."Line No." + LineSpacing;

      TempExtTextLine.RESET;
      IF TempExtTextLine.FIND('-') THEN BEGIN
        REPEAT
          ToServiceLine.INIT;
          ToServiceLine."Document Type" := ServiceLine."Document Type";
          ToServiceLine."Document No." := ServiceLine."Document No.";
          ToServiceLine."Service Item Line No." := ServiceLine."Service Item Line No.";
          ToServiceLine."Line No." := NextLineNo;
          NextLineNo := NextLineNo + LineSpacing;
          ToServiceLine.Description := TempExtTextLine.Text;
          ToServiceLine."Attached to Line No." := ServiceLine."Line No.";
          ToServiceLine."Service Item No." := ServiceLine."Service Item No.";
          OnBeforeToServiceLineInsert(ServiceLine,ToServiceLine,TempExtTextLine,NextLineNo,LineSpacing);
          ToServiceLine.INSERT(TRUE);
        UNTIL TempExtTextLine.NEXT = 0;
        MakeUpdateRequired := TRUE;
      END;
      TempExtTextLine.DELETEALL;
    END;

    LOCAL PROCEDURE IsDeleteAttachedLines@19(LineNo@1000 : Integer;No@1002 : Code[20];AttachedToLineNo@1001 : Integer) : Boolean;
    BEGIN
      EXIT((LineNo <> 0) AND (AttachedToLineNo = 0) AND (No <> ''));
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeReadLines@30(VAR ExtendedTextHeader@1000 : Record 279;DocDate@1002 : Date;LanguageCode@1001 : Code[10];VAR IsHandled@1003 : Boolean;VAR Result@1004 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeToPurchLineInsert@20(VAR ToPurchLine@1000 : Record 39;PurchLine@1001 : Record 39;TempExtTextLine@1002 : TEMPORARY Record 280;VAR NextLineNo@1003 : Integer;LineSpacing@1004 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeToSalesLineInsert@22(VAR ToSalesLine@1000 : Record 37;SalesLine@1001 : Record 37;TempExtTextLine@1002 : TEMPORARY Record 280;VAR NextLineNo@1003 : Integer;LineSpacing@1004 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeToServiceLineInsert@23(VAR ToServLine@1000 : Record 5902;ServLine@1001 : Record 5902;TempExtTextLine@1002 : TEMPORARY Record 280;VAR NextLineNo@1003 : Integer;LineSpacing@1004 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeToReminderLineInsert@21(VAR ToReminderLine@1000 : Record 296;ReminderLine@1001 : Record 296;TempExtTextLine@1002 : TEMPORARY Record 280);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnDeletePurchLinesOnAfterSetFilters@32(VAR ToPurchaseLine@1000 : Record 39;FromPurchaseLine@1001 : Record 39);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnDeleteSalesLinesOnAfterSetFilters@33(VAR ToSalesLine@1000 : Record 37;FromSalesLine@1001 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnFinChrgMemoCheckIfAnyExtTextAutoText@24(VAR ExtendedTextHeader@1000 : Record 279;VAR FinanceChargeMemoHeader@1001 : Record 302;VAR FinanceChargeMemoLine@1002 : Record 303;Unconditionally@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnPrepmtGetAnyExtTextAfterReadLines@31(VAR ExtendedTextHeader@1000 : Record 279;VAR TempExtendedTextLine@1001 : TEMPORARY Record 280);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnPrepmtGetAnyExtTextBeforeReadLines@29(VAR ExtendedTextHeader@1000 : Record 279;DocumentDate@1002 : Date;LanguageCode@1001 : Code[10]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnPurchCheckIfAnyExtTextAutoText@27(VAR ExtendedTextHeader@1000 : Record 279;VAR PurchaseHeader@1001 : Record 38;VAR PurchaseLine@1002 : Record 39;Unconditionally@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnReminderCheckIfAnyExtTextAutoText@26(VAR ExtendedTextHeader@1000 : Record 279;VAR ReminderHeader@1001 : Record 295;VAR ReminderLine@1002 : Record 296;Unconditionally@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnSalesCheckIfAnyExtTextAutoText@25(VAR ExtendedTextHeader@1000 : Record 279;VAR SalesHeader@1001 : Record 36;VAR SalesLine@1002 : Record 37;Unconditionally@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnServCheckIfAnyExtTextAutoText@28(VAR ExtendedTextHeader@1000 : Record 279;VAR ServiceHeader@1001 : Record 5900;VAR ServiceLine@1002 : Record 5902;Unconditionally@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInsertSalesExtText@36(VAR SalesLine@1000 : Record 37;VAR TempExtTextLine@1001 : TEMPORARY Record 280;VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInsertReminderExtText@37(VAR ReminderLine@1000 : Record 296;VAR TempExtTextLine@1001 : TEMPORARY Record 280;VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInsertFinChrgMemoExtText@38(VAR FinChrgMemoLine@1002 : Record 303;VAR TempExtTextLine@1001 : TEMPORARY Record 280;VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInsertPurchExtText@39(VAR PurchLine@1000 : Record 39;VAR TempExtTextLine@1001 : TEMPORARY Record 280;VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInsertServExtText@40(VAR ServiceLine@1000 : Record 5902;VAR TempExtTextLine@1001 : TEMPORARY Record 280;VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

