OBJECT Codeunit 11130020 Build12 Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=VAR
            DotNetExceptionHandler@1100529500 : Codeunit 1291;
            WebException@1100529501 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.WebException";
          BEGIN
          END;

  }
  CODE
  {
    VAR
      Build12Setup@1100529505 : Record 11130000;
      Text001@1100525000 : TextConst 'DEU=Dieses Projekt ist nicht verknÅpft mit 12Build.;ENU=This project is not linked to 12Build.;NLD=Dit project is niet gekoppeld aan 12Build.';
      Text002@1100525001 : TextConst 'DEU=This Projekt ist bereits verbunden mit 12Build.;ENU=This project is already associated with 12Build.;NLD=Dit project is al gekoppeld aan 12Build.';
      Text003@1100525002 : TextConst 'DEU=Beschreibung ist ein Pflichtfeld fÅr 12Build.;ENU=Description is a required field for 12Build.;NLD=Omschrijving is een verplicht veld voor 12Build.';
      Text004@1100525003 : TextConst 'DEU=Postleitzahl ist ein Pflichtfeld fÅr 12Build.;ENU=Postcode is a required field for 12Build.;NLD=Postcode is een verplicht veld voor 12Build.';
      Text005@1100525004 : TextConst 'DEU=Ort ist ein Pflichtfeld fÅr 12Build.;ENU=City is a required field for 12Build.;NLD=Plaats is een verplicht veld voor 12Build.';
      Text006@1100525005 : TextConst 'DEU=LÑnder-/Regionalcode ist ein Pflichtfeld fÅr 12Build.;ENU=Country-/regioncode ia a required field for 12Build.;NLD=Land-/regiocode is een verplicht veld voor 12Build.';
      Text007@1100525006 : TextConst 'DEU=4PS Konstruktion;ENU=4PS Construct;NLD=4PS Construct';
      Text008@1100525007 : TextConst 'DEU=Projekt ''''%1'''' erfolgreich erstellt in 12Build.;ENU=Project ''''%1'''' succesfully created on 12Build.;NLD=Project "%1" succesvol aangemaakt op 12Build.';
      Text010@1100525009 : TextConst 'DEU=Der 12Build-Server hat eine "%1" Fehlermeldung zurÅckgesendet: %2;ENU=The 12Build server has a "%1" error returned: %2;NLD=De 12Build server heeft een "%1" fout geretourneerd: %2';
      Text014@1100525013 : TextConst 'DEU=Es kînnen keine neuen Beziehungen erstellt werden, weil zentralisierte Verwaltung eingeschaltet ist.;ENU=New relations can not be created because of centralized management is on.;NLD=Nieuwe relaties kunnen niet worden aangemaakt omdat centraal beheer aan staat.';
      Text015@1100525014 : TextConst 'DEU=Wurde erfolgreich heruntergeladen.;ENU=Downloading successful.;NLD=Downloaden geslaagd.';
      UrlRestApiTxt@1100527800 : TextConst 'ENU=/nl_NL/rest/1.1';
      XMLDOMManagement@1100527801 : Codeunit 6224;
      BUILD12SendTrigger@1100527802 : TextConst 'ENU=12 Build Send Trigger';
      DeleteTxt@1100527806 : TextConst 'ENU=Delete;SVE=TABORT';
      InsertTxt@1100527805 : TextConst 'ENU=Create;SVE=Skapa';
      ModifyTxt@1100527804 : TextConst 'ENU=Update;SVE=Uppdatera';
      RenameTxt@1100527803 : TextConst 'ENU=Rename';
      Build12Definition@1100527807 : TextConst 'ENU=12 Build';

    PROCEDURE OpenProject@1100525005("ProjectNo."@1100525000 : Code[20]);
    VAR
      Job@1100525001 : Record 11072003;
      Link@1100525002 : Text;
    BEGIN
      Job.GET("ProjectNo.");
      CheckSetup;
      IF Job."Build12 Id" = '' THEN
        ERROR(Text001);
      Link := STRSUBSTNO('%1/nl_NL/aannemers/project/%2', Build12Setup."Api Url",Job."Build12 Id");
      HYPERLINK(Link);
    END;

    PROCEDURE Project@1100529555("ProjectNo."@1100529503 : Code[20]) : Text;
    VAR
      Request@1100529501 : Text;
      Result@1100529500 : Text;
      Mes@1100529502 : Text;
      Job@1100529504 : Record 11072003;
      String@1100529505 : Text;
      Id@1100525000 : Text;
      Link@1100525001 : Text;
      JsonManagement@1100525002 : Codeunit 11125361;
      XmlDocument@1100527801 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      JsonConvert@1100527800 : DotNet "'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.JsonConvert";
    BEGIN

      Job.GET("ProjectNo.");
      CheckMendatoryFields(Job);
      CheckSetup;
      CheckToken(FALSE);


      String := STRSUBSTNO('%1 %2', Job.Description ,Job."Description 2");
      AddWebForm(Request, 'name', String);
      AddWebForm(Request, 'phase', 'Calculatie'); // Always phase Calculatie, API is only for Calculatie phase
      AddWebForm(Request, 'calcNumber', Job.GetEstimate);
      AddWebForm(Request, 'workNumber', Job."No.");
      AddWebForm(Request, 'address_1', Job.Address);
      AddWebForm(Request, 'address_2', Job."Address 2");
      AddWebForm(Request, 'zip', Job."Post Code");
      AddWebForm(Request, 'city', Job.City);
      AddWebForm(Request, 'countryCode', Job."Country/Region Code");

      Job.CALCFIELDS("Principal Name", "Name Project Manager", "Name Estimator", "Name Project Engineer", "Name Purchaser");

      AddWebForm(Request, 'client', Job."Principal Name");
      AddWebForm(Request, 'manager', Job."Name Project Manager");
      AddWebForm(Request, 'calculator', Job."Name Estimator");
      AddWebForm(Request, 'werkvoorbereider', Job."Name Project Engineer");
      AddWebForm(Request, 'inkoper', Job."Name Purchaser");
      AddWebForm(Request, 'externalProgram', Text007);

      Link := GETURL(CLIENTTYPE::Web, COMPANYNAME, OBJECTTYPE::Page, 11072003,Job);
      AddWebForm(Request, 'externalUrl', Link);

      IF NOT DoWebRequest(STRSUBSTNO('%1/project', UrlRestApiTxt) , 2, Request, Result) THEN
        GetFault;

      XmlDocument := JsonConvert.DeserializeXmlNode( Result,'root', FALSE);

      Id := XMLDOMManagement.FindNodeText(XmlDocument.DocumentElement,'id');
      Mes := XMLDOMManagement.FindNodeText(XmlDocument.DocumentElement,'name');

      MESSAGE(Text008, Mes);
      EXIT(Id);
    END;

    PROCEDURE DowloadProjectPurchaseAction@1100525001("ProjectNo."@1100525000 : Code[20];SyncCheked@1100525001 : Boolean);
    VAR
      Url@1100525002 : Text;
      Job@1100525003 : Record 11072003;
      ProjectPurchaseAction@1100528900 : Record 11012026;
      Request@1100525005 : Text;
      Result@1100525004 : Text;
      Time@1100525006 : DateTime;
      Name@1100525010 : Text;
      Address@1100525011 : Text;
      Zip@1100525012 : Code[20];
      City@1100525013 : Text;
      Phone@1100525014 : Text;
      CocNumber@1100525015 : Text[20];
      PurchaseActionName@1100525018 : Text;
      PurchaseActionId@1100525019 : Text;
      PurchaseActionCode@1100525020 : Text;
      ContactNo@1100525021 : Code[20];
      ResponseTempBlob@1100527800 : Record 99008535;
      XmlDocument@1100527802 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      JsonConvert@1100527803 : DotNet "'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.JsonConvert";
      XmlPurchaseAction@1100527804 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XmlSpecialist@1100527810 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XmlPurchaseActions@1100527806 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      XmlSpecialists@1100527808 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      i@1100527807 : Integer;
      j@1100527809 : Integer;
    BEGIN
      Job.GET("ProjectNo.");
      CheckSetup;
      CheckToken(FALSE);

      Url := STRSUBSTNO('%1/project/%2/communication/Calculatie/list',
                        UrlRestApiTxt,
                        Job."Build12 Id");

      IF SyncCheked THEN
        AddWebForm(Request, 'syncChecked', '1')
      ELSE
        AddWebForm(Request, 'syncChecked', '0');

      IF NOT DoWebRequest(Url, 2, Request, Result) THEN
        GetFault;

      XmlDocument := JsonConvert.DeserializeXmlNode('{"purchaseaction":' + Result + '}','root', TRUE);
      WITH XMLDOMManagement DO BEGIN
        FindNodes(XmlDocument.DocumentElement,'purchaseaction', XmlPurchaseActions);

        FOR i:= 0  TO XmlPurchaseActions.Count -1 DO
        BEGIN
          XmlPurchaseAction := XmlPurchaseActions.Item(i);

          CheckPurchaseAction("ProjectNo.",
                              FindNodeText(XmlPurchaseAction,'id'),
                              FindNodeText(XmlPurchaseAction,'name'),
                              FindNodeText(XmlPurchaseAction,'codes'));

          FindNodes(XmlPurchaseAction,'communication/specialist', XmlSpecialists);

          FOR j:= 0 TO XmlSpecialists.Count -1 DO
          BEGIN
            XmlSpecialist := XmlSpecialists.Item(j);
            ContactNo := FindExistingContactNo(FindNodeText(XmlSpecialist,'zip'),
                                                FindNodeText(XmlSpecialist,'cocNumber'));
            IF ContactNo <> '' THEN
              // check and add contact on purchase action
              CheckContactOnPurchaseAction("ProjectNo.",
                                           FindNodeText(XmlPurchaseAction,'id'),
                                           ContactNo);
          END;

        END;
      END;
      MESSAGE(Text015);
    END;

    PROCEDURE DownloadDocuments@1100525016("ProjectNo."@1100525000 : Code[20];SyncCheked@1100529102 : Boolean);
    VAR
      Url@1100525009 : Text;
      Request@1100525008 : Text;
      Result@1100525007 : Text;
      PurchaseActionId@1100529100 : Text;
      Time@1100525011 : DateTime;
      Job@1100525010 : Record 11072003;
      ProjectPurchaseAction@1100529101 : Record 11012026;
      XmlDocument@1100527800 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      JsonConvert@1100527801 : DotNet "'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.JsonConvert";
      XmlPurchaseAction@1100527803 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XmlCommunication@1100527806 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XmlPurchaseActions@1100527802 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      XmlCommunications@1100527805 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      i@1100527804 : Integer;
      j@1100527807 : Integer;
      XmlDoc@1100527809 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XmlDocs@1100527808 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
    BEGIN
      Build12Setup.GET;
      CheckSetup;
      CheckToken(FALSE);
      Job.GET("ProjectNo.");

      DowloadProjectPurchaseAction("ProjectNo.", SyncCheked);

      //get main documents
      Url := STRSUBSTNO('%1/project/%2/document/list',UrlRestApiTxt,Job."Build12 Id");
      AddWebForm(Request, 'phaseName', 'Calculatie');

      IF NOT DoWebRequest(Url, 2, Request, Result) THEN
        GetFault;

      XmlDocument := JsonConvert.DeserializeXmlNode('{"purchaseaction":' + Result + '}','root', TRUE);
      WITH XMLDOMManagement DO BEGIN
        FindNodes(XmlDocument.DocumentElement,'purchaseaction/documents', XmlDocs);

        FOR i:= 0 TO XmlDocs.Count -1 DO BEGIN
          XmlDoc := XmlDocs.Item(i);
          CheckDocument(FindNodeText(XmlDoc,'id') ,
                        'project',
                        Job.RECORDID,
                        FindNodeText(XmlDoc,'name'),
                        FindNodeText(XmlDoc,'extension'));
        END;

        //get communication list
        Url := STRSUBSTNO('%1/project/%2/communication/Calculatie/list',UrlRestApiTxt,Job."Build12 Id");
        Request := '';

        IF SyncCheked THEN
          AddWebForm(Request, 'syncChecked', '1')
        ELSE
          AddWebForm(Request, 'syncChecked', '0');

        IF NOT DoWebRequest(Url, 2, Request, Result) THEN
          GetFault;

        XmlDocument := JsonConvert.DeserializeXmlNode('{"purchaseaction":' + Result + '}','root', TRUE);
        FindNodes(XmlDocument.DocumentElement,'purchaseaction', XmlPurchaseActions);

        FOR i:= 0 TO XmlPurchaseActions.Count -1 DO BEGIN
          XmlPurchaseAction := XmlPurchaseActions.Item(i);
          ProjectPurchaseAction.GET(Job."No.", FindNodeText(XmlPurchaseAction,'id'));

          XMLDOMManagement.FindNodes(XmlPurchaseAction,'communication', XmlCommunications);

          FOR j:= 0 TO XmlCommunications.Count -1 DO BEGIN
            XmlCommunication := XmlCommunications.Item(j);

            GetCommunication(FindNodeText(XmlCommunication,'id'),
                             ProjectPurchaseAction.Code,
                             Job."Build12 Id",
                             ProjectPurchaseAction.RECORDID);
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE CheckDocument@1100525025(DocumentId@1100525000 : Text;DocumentType@1100525007 : Text;RecId@1100529106 : RecordID;FileName@1100527801 : Text;Extension@1100527800 : Text);
    VAR
      DocumentProperties@1100529103 : Record 11012746;
      DocumentLink@1100529105 : Record 11012747;
      File@1100529104 : Text;
      DocumentNo@1100525002 : Code[20];
      RecRef@1100525003 : RecordRef;
      Base64@1100527802 : BigText;
      Base64Txt@1100528300 : Text;
      ExternalDocumentManagement@1100527803 : Codeunit 11012403;
    BEGIN
      IF (DocumentType <> 'project') AND (DocumentType <> 'attachment') THEN
        EXIT;

      RecRef.OPEN(RecId.TABLENO);
      RecRef.GET(RecId);

      DocumentProperties.SETCURRENTKEY("Document No.");
      DocumentProperties.SETRANGE("Document No.", DocumentId);
      IF NOT DocumentProperties.FINDFIRST THEN BEGIN
        IF NOT (DownloadFileFrom12Build(DocumentId, DocumentType, Base64)) THEN BEGIN
          GetFault;
          EXIT;
        END;

        FileName := STRSUBSTNO('%1 (12Build).%2 ',FileName,Extension);
        Base64.GETSUBTEXT(Base64Txt, 1);
        DocumentNo := ExternalDocumentManagement.AddExternalDocumentWithContent(RecRef, FileName,
          Base64Txt, '', '', '', '', FileName, '', '', 0D, 0D, 0D, 0, '');
        DocumentProperties.GET(DocumentNo);
        DocumentProperties."Document No." := DocumentId;
        DocumentProperties.MODIFY(TRUE);
      END;

      DocumentLink.SETRANGE("Document No.", DocumentProperties."No.");
      DocumentLink.SETRANGE("Record ID", RecId);
      IF NOT DocumentLink.FINDFIRST THEN BEGIN
        DocumentProperties.GET(DocumentProperties."No.");
        DocumentProperties.CreateDocumentLink(RecId);
      END;
    END;

    LOCAL PROCEDURE GetDocument@1100529102(DocumentId@1100529100 : Text;VAR FileName@1100529101 : Text;VAR Extension@1100529102 : Text) : Boolean;
    VAR
      Url@1100529114 : Text;
      Request@1100529113 : Text;
      Result@1100529112 : Text;
      Deleted@1100529105 : Text;
      XmlDocument@1100527803 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      JsonConvert@1100527802 : DotNet "'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.JsonConvert";
      XmlNode@1100527801 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      Build12Setup.GET;
      CheckSetup;
      CheckToken(FALSE);

      Url := STRSUBSTNO('%1/document/%2',UrlRestApiTxt,DocumentId);

      IF NOT DoWebRequest(Url, 1, Request, Result) THEN
        GetFault;
      XmlDocument := JsonConvert.DeserializeXmlNode(Result,'root', FALSE);

      WITH XMLDOMManagement DO BEGIN
        FileName := FindNodeText(XmlDocument.DocumentElement,'name');
        Extension :=FindNodeText(XmlDocument.DocumentElement,'extension');
        Deleted := FindNodeText(XmlDocument.DocumentElement,'deleted');
      END;


      IF Deleted = '1' THEN
        EXIT(FALSE);
      IF Deleted = '0' THEN
        EXIT(TRUE);
    END;

    LOCAL PROCEDURE SetDocument@1100529109(DocumentId@1100529100 : Text;ExternalData@1100529101 : Text);
    VAR
      Url@1100529114 : Text;
      Request@1100529113 : Text;
      Result@1100529112 : Text;
      Deleted@1100529105 : Text;
    BEGIN
      Build12Setup.GET;
      CheckSetup;
      CheckToken(FALSE);

      Url := STRSUBSTNO('%1/document/%2',UrlRestApiTxt,DocumentId);

      AddWebForm(Request, 'externalData', ExternalData);

      IF NOT DoWebRequest(Url, 2, Request, Result) THEN
        GetFault;
    END;

    LOCAL PROCEDURE GetCommunication@1100529115(CommunicationId@1100529100 : Text;PurchaseActionId@1100529101 : Text;JobId@1100529110 : Text;PurchaseActionRecId@1100529114 : RecordID);
    VAR
      Url@1100529113 : Text;
      Request@1100529112 : Text;
      Result@1100529111 : Text;
      XmlDocument@1100527802 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XmlCommunication@1100527801 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XmlCommunications@1100527800 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      XmlAttachment@1100527806 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XmlAttachments@1100527805 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      JsonConvert@1100527803 : DotNet "'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.JsonConvert";
      i@1100527804 : Integer;
      Type@1100527808 : Text;
      FileName@1100527810 : Text;
      Extension@1100527809 : Text;
    BEGIN
      Build12Setup.GET;
      CheckSetup;
      CheckToken(FALSE);

      Url := STRSUBSTNO('%1/project/%2/communication/%3',UrlRestApiTxt,JobId, CommunicationId);

      IF NOT DoWebRequest(Url, 1, Request, Result) THEN
        GetFault;

      XmlDocument := JsonConvert.DeserializeXmlNode('{"communication":' + Result + '}','root', TRUE);

      WITH XMLDOMManagement DO BEGIN
        FindNodes(XmlDocument.DocumentElement,'communication/attachments', XmlAttachments);
        FOR i:= 0 TO XmlAttachments.Count -1 DO BEGIN
          XmlAttachment :=XmlAttachments.Item(i);
          Type:= FindNodeText(XmlAttachment,'type');

          IF ((Type = 'attachment') OR (Type = 'project')) THEN BEGIN
            IF (GetDocument(FindNodeText(XmlAttachment,'id'), FileName, Extension)) THEN
              CheckDocument(FindNodeText(XmlAttachment,'id'), Type, PurchaseActionRecId,FileName,Extension);
          END;
        END;

      END;
    END;

    [TryFunction]
    LOCAL PROCEDURE DownloadFileFrom12Build@1100529114(DocumentId@1100525000 : Text;DocumentType@1100525007 : Text;VAR Base64@1100527806 : BigText);
    VAR
      Url@1100525002 : Text;
      Convert@1100527804 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      MemoryStream@1100527805 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
      WebClient@1100527811 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.WebClient";
      Stream@1100527812 : DotNet "'mscorlib'.System.IO.Stream";
    BEGIN
      CheckToken(FALSE);
      Url := STRSUBSTNO('%1%2/file/%3/%4',Build12Setup."Api Url", UrlRestApiTxt,DocumentType,DocumentId);
      WebClient := WebClient.WebClient;
      WebClient.Headers.Add('X-Auth-Token', Build12Setup.Token);
      WebClient.Headers.Add('User-Agent', '4PS-Construct-REST-Service');

      Stream := WebClient.OpenRead(Url);
      MemoryStream := MemoryStream.MemoryStream;
      Stream.CopyTo(MemoryStream);
      Base64.ADDTEXT(Convert.ToBase64String(MemoryStream.ToArray));
    END;

    PROCEDURE CheckToken@1100529553(ForceNew@1100525001 : Boolean) : Boolean;
    VAR
      Request@1100529500 : Text;
      Result@1100529501 : Text;
      JsonConvert@1100527800 : DotNet "'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.JsonConvert";
      XmlDocument@1100527801 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      IF (Build12Setup.Token = '') OR (Build12Setup."Expiry Date" < GetUnixTime) OR ForceNew THEN BEGIN
        Build12Setup.GET;
        CheckSetup;
        AddWebForm(Request, 'login', Build12Setup.Login);
        AddWebForm(Request, 'apiKey', Build12Setup."Api Key");
        IF Build12Setup."Expiry Date" = 0 THEN
          AddWebForm(Request, 'forceNew', '1');

        IF NOT DoWebRequest(STRSUBSTNO('%1/tokens', UrlRestApiTxt), 2, Request, Result) THEN
          GetFault;

        XmlDocument := JsonConvert.DeserializeXmlNode(Result,'root', FALSE);

        Build12Setup.Token := XMLDOMManagement.FindNodeText(XmlDocument.DocumentElement,'token');
        EVALUATE(Build12Setup."Expiry Date", XMLDOMManagement.FindNodeText(XmlDocument.DocumentElement,'expireDate'));
        Build12Setup.MODIFY;
        COMMIT;
        EXIT(TRUE);
      END;
    END;

    [TryFunction]
    LOCAL PROCEDURE DoWebRequest@1100529500(FunctionName@1100529501 : Text;Method@1100529507 : 'Get,Post';Parameters@1100529502 : Text;VAR Response@1100529503 : Text);
    VAR
      HttpClient@1100529512 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpClient";
      StringContent@1100529511 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.StringContent";
      HttpRequestMessage@1100529510 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpRequestMessage";
      HttpMethod@1100529509 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpMethod";
      HttpResponseMessage@1100529508 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpResponseMessage";
      HttpStatusCode@1100529513 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpStatusCode";
      Encoding@1100529506 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
      Result@1100529505 : Text;
      StatusCode@1100529500 : Text;
      Status@1100529514 : Integer;
      ErrorMessage@1100529504 : Text;
      Url@1100529515 : Text;
      JsonManagement@1100525000 : Codeunit 11125361;
    BEGIN
      Url := Build12Setup."Api Url";
      Url += FunctionName;
      HttpClient := HttpClient.HttpClient;

      StringContent := StringContent.StringContent(Parameters, Encoding.UTF8, 'application/x-www-form-urlencoded');

      IF Method = 1 THEN
        HttpRequestMessage := HttpRequestMessage.HttpRequestMessage(HttpMethod.Get, Url);
      IF Method = 2 THEN BEGIN
        HttpRequestMessage := HttpRequestMessage.HttpRequestMessage(HttpMethod.Post, Url);
        HttpRequestMessage.Content := StringContent;
      END;
      HttpRequestMessage.Headers.Add('X-Auth-Token', Build12Setup.Token);
      HttpRequestMessage.Headers.Add('User-Agent', '4PS-Construct-REST-Service');
      HttpRequestMessage.Headers.Add('Accept', 'application/json');

      HttpResponseMessage := HttpResponseMessage.HttpResponseMessage;
      HttpResponseMessage := HttpClient.SendAsync(HttpRequestMessage).GetAwaiter().GetResult();

      Response := HttpResponseMessage.Content.ReadAsStringAsync().GetAwaiter().GetResult();
      StatusCode := HttpResponseMessage.StatusCode.ToString();

      IF NOT HttpResponseMessage.IsSuccessStatusCode THEN BEGIN
        JsonManagement.ReadFirstJSonValue(Response, 'message', ErrorMessage);
        ERROR(Text010, StatusCode, ErrorMessage);
      END;
    END;

    LOCAL PROCEDURE AddWebForm@1100529508(VAR Mes@1100529500 : Text;Key@1100529501 : Text;Value@1100529502 : Text);
    BEGIN
      IF (Key = '') OR (Value = '') THEN
        EXIT;

      IF Mes <> '' THEN
        Mes += '&';
      IF Key = 'zip' THEN
        ReplaceCharacter(Value, ' ', '');
      ReplaceCharacter(Value, '&', '%26');

      Mes += STRSUBSTNO('%1=%2',Key, Value)
    END;

    LOCAL PROCEDURE ReplaceCharacter@1100529523(VAR String@1100529500 : Text;Character@1100529501 : Text;NewValue@1100529502 : Text);
    VAR
      pos@1100529503 : Integer;
    BEGIN
      WHILE STRPOS(String,Character) <> 0 DO BEGIN
        pos := STRPOS(String,Character);
        String := DELSTR(String,pos,STRLEN(Character));
        String := INSSTR(String,DELCHR(FORMAT(NewValue),'=',','),pos);
      END;
    END;

    LOCAL PROCEDURE GetFault@1100529549();
    VAR
      DotNetExceptionHandler@1100529501 : Codeunit 1291;
      WebException@1100529500 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.WebException";
    BEGIN
      DotNetExceptionHandler.Collect;
      IF NOT DotNetExceptionHandler.CastToType(WebException,GETDOTNETTYPE(WebException)) THEN
        DotNetExceptionHandler.Rethrow;
    END;

    LOCAL PROCEDURE GetUnixTime@1100529526() : Integer;
    VAR
      Ticks@1100529500 : BigInteger;
      DateTime@1100529501 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.DateTime";
      DecTicks@1100529509 : Decimal;
      UnixTime@1100529502 : Integer;
    BEGIN
      DateTime := DateTime.UtcNow;
      Ticks := DateTime.Ticks;
      DateTime := DateTime.DateTime(1970,1,1);
      Ticks := Ticks - DateTime.Ticks;

      DecTicks := Ticks / 10000000;
      UnixTime := ROUND(DecTicks, 1, '>');
      EXIT(UnixTime);
    END;

    PROCEDURE CheckSetup@1100529518();
    BEGIN
      Build12Setup.GET;
      Build12Setup.TESTFIELD(Active, TRUE);
      Build12Setup.TESTFIELD("Api Url");
      Build12Setup.TESTFIELD(Login);
      Build12Setup.TESTFIELD("Api Key");
    END;

    PROCEDURE GetDeleteTxt@1100528310() : Text;
    BEGIN
      EXIT(DeleteTxt);
    END;

    PROCEDURE GetInsertTxt@1100528303() : Text;
    BEGIN
      EXIT(InsertTxt);
    END;

    PROCEDURE GetModifyTxt@1100528301() : Text;
    BEGIN
      EXIT(ModifyTxt);
    END;

    PROCEDURE Get12BuildTxt@1100527805() : Text;
    BEGIN
      EXIT(Build12Definition);
    END;

    PROCEDURE ImportContacts@1100527804();
    VAR
      Request@1100527809 : Text;
      Result@1100527808 : Text;
      Mes@1100527807 : Text;
      String@1100527805 : Text;
      Id@1100527804 : Text;
      URL@1100527803 : Text;
      JsonManagement@1100527802 : Codeunit 11125361;
      XmlDocument@1100527801 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      JsonConvert@1100527800 : DotNet "'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.JsonConvert";
      XmlContact@1100527810 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XmlCompany@1100527813 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XmlAddress@1100527812 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XmlContacts@1100527806 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      XmlBuildingAddress@1100527815 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      i@1100527811 : Integer;
      Build12ContactTemporary@1100527814 : TEMPORARY Record 11130001;
    BEGIN
      CheckSetup;
      CheckToken(FALSE);

      URL := STRSUBSTNO('%1/relation/list', UrlRestApiTxt);

      AddWebForm(Request, 'syncChecked', '1');

      IF NOT DoWebRequest(URL, 2, Request, Result) THEN
        GetFault;

      XmlDocument := JsonConvert.DeserializeXmlNode('{"contact":' + Result + '}','root', TRUE);
      WITH XMLDOMManagement DO BEGIN
        FindNodes(XmlDocument.DocumentElement,'contact', XmlContacts);

        FOR i:= 0  TO XmlContacts.Count -1 DO
        BEGIN
          XmlContact := XmlContacts.Item(i);

          FindNode(XmlContact, 'company', XmlCompany);
          FindNode(XmlContact, 'address', XmlAddress);
          FindNode(XmlContact, 'buildingAddress', XmlBuildingAddress);

          Build12ContactTemporary.Name := COPYSTR(FindNodeText(XmlCompany,'name'),1, MAXSTRLEN(Build12ContactTemporary.Name));
          Build12ContactTemporary."Build 12 Number" :=  COPYSTR(FindNodeText(XmlCompany,'id'),1, 20);
          Build12ContactTemporary.Address :=  COPYSTR(FindNodeText(XmlAddress,'address_1'),1, MAXSTRLEN(Build12ContactTemporary.Address));
          Build12ContactTemporary."Address 2" :=  COPYSTR(FindNodeText(XmlAddress,'address_2'),1, MAXSTRLEN(Build12ContactTemporary."Address 2"));
          Build12ContactTemporary."Post Code" := COPYSTR(FindNodeText(XmlAddress,'zip'),1,20);
          Build12ContactTemporary.City := COPYSTR(FindNodeText(XmlAddress,'city'),1, MAXSTRLEN(Build12ContactTemporary.City));
          Build12ContactTemporary."Country/Region Code" := UPPERCASE(COPYSTR(FindNodeText(XmlAddress,'countryCode'),1,10));
          Build12ContactTemporary."Phone No." := COPYSTR(FindNodeText(XmlCompany,'phone'),1,30);
          Build12ContactTemporary."COC Registration No." := COPYSTR(FindNodeText(XmlCompany,'cocNumber'),1,MAXSTRLEN(Build12ContactTemporary."COC Registration No."));
          Build12ContactTemporary."COC Location No." :=  COPYSTR(FindNodeText(XmlCompany,'locationNumber'),1,MAXSTRLEN(Build12ContactTemporary."COC Location No."));
          Build12ContactTemporary."Home Page" :=  COPYSTR(FindNodeText(XmlCompany,'website'),1,MAXSTRLEN(Build12ContactTemporary."Home Page"));

          Build12ContactTemporary."Visit Address" := COPYSTR(FindNodeText(XmlBuildingAddress,'address_1'),1, MAXSTRLEN(Build12ContactTemporary."Visit Address"));
          Build12ContactTemporary."Visit Address 2" := COPYSTR(FindNodeText(XmlBuildingAddress,'address_2'),1, MAXSTRLEN(Build12ContactTemporary."Visit Address 2"));
          Build12ContactTemporary."Visit Address City" := COPYSTR(FindNodeText(XmlBuildingAddress,'city'),1, MAXSTRLEN(Build12ContactTemporary."Visit Address City"));
          Build12ContactTemporary."Visit Address Post Code" := COPYSTR(FindNodeText(XmlBuildingAddress,'zip'),1, 20);
          Build12ContactTemporary."Visit Address Country/Region" := COPYSTR(FindNodeText(XmlBuildingAddress,'countryCode'),1, 10);

          AddOrUpdate12BuildContact(Build12ContactTemporary);

        END;
      END;
    END;

    PROCEDURE Match12BuildContactsWithExistingCompanyContacts@1100527808();
    VAR
      Contact@1100527800 : Record 5050;
      Build12Contact@1100527801 : Record 11130001;
      StringFunctions@1100527802 : Codeunit 11012273;
    BEGIN
      Build12Contact.SETRANGE(Status,Build12Contact.Status::Unlinked);
      Build12Contact.SETRANGE("Contact No.",'');
      IF (Build12Contact.FINDSET) THEN BEGIN
        REPEAT
          Contact.SETRANGE("COC Registration No.", Build12Contact."COC Registration No.");
          Contact.SETRANGE("Post Code",Build12Contact."Post Code");

          IF (Contact.FINDFIRST) THEN BEGIN
            Build12Contact."Contact No.":= Contact."No.";
            Build12Contact.Status := Build12Contact.Status::Open;
            Build12Contact.MODIFY;
          END;
        UNTIL Build12Contact.NEXT = 0;
      END;
    END;

    PROCEDURE CreateNewCompanyContactFrom12BuildContact@1100527806(VAR Build12Contact@1100527800 : Record 11130001);
    VAR
      Contact@1100527801 : Record 5050;
    BEGIN
      IF ((Build12Contact."Contact No." <> '') AND (Build12Contact.Status <> Build12Contact.Status::Unlinked)) THEN
        EXIT;

      CheckZipCode(Build12Contact."Post Code", Build12Contact.City);

      Contact.INIT;
      Contact.Type := Contact.Type::Company;
      Contact.InsertingIsAllowed(TRUE);
      Contact.InitNoSeriesCompany;
      Contact.INSERT(TRUE);
      TransferFieldsFrom12BuildContactToContact(Build12Contact, Contact);
      Contact.MODIFY(TRUE);

      Build12Contact."Contact No." := Contact."No.";
      Build12Contact.Status := Build12Contact.Status::Processed;
      Build12Contact.MODIFY(TRUE);
    END;

    PROCEDURE ProcessSelected12BuildContactsToCompanyContacts@1100527814(VAR Build12Contact@1100527800 : Record 11130001);
    VAR
      Contact@1100527801 : Record 5050;
    BEGIN
      IF (Build12Contact.FINDSET) THEN BEGIN
        REPEAT
          IF ((Build12Contact.IsLinked) AND (Build12Contact.Status = Build12Contact.Status::Open)) THEN BEGIN
              IF (Contact.GET(Build12Contact."Contact No.")) THEN BEGIN
                TransferFieldsFrom12BuildContactToContact(Build12Contact, Contact);
                Contact.MODIFY;
                Build12Contact.Status := Build12Contact.Status::Processed;
                Build12Contact.MODIFY;
              END
          END;

        UNTIL Build12Contact.NEXT = 0;

      END;
    END;

    PROCEDURE UpdateRelationData@1100527807(CompanyId@1100527800 : Text;Key@1100527801 : Text;Value@1100527802 : Text);
    VAR
      URL@1100527803 : Text;
      Request@1100527805 : Text;
      Result@1100527804 : Text;
    BEGIN
      CheckSetup;
      CheckToken(FALSE);

      URL := STRSUBSTNO('%1/relation/%2', UrlRestApiTxt,CompanyId);

      AddWebForm(Request, 'key', Key);
      AddWebForm(Request, 'value', Value);
      AddWebForm(Request, 'source', Text007);

      IF NOT DoWebRequest(URL, 2, Request, Result) THEN
        GetFault;
    END;

    LOCAL PROCEDURE "---Local--"@1100527802();
    BEGIN
    END;

    LOCAL PROCEDURE AddOrUpdate12BuildContact@1100527803(VAR Build12ContactTemporary@1100527812 : TEMPORARY Record 11130001);
    VAR
      Build12Contact@1100527806 : Record 11130001;
    BEGIN
      Build12Contact.SETRANGE("COC Registration No.", Build12ContactTemporary."COC Registration No.");
      Build12Contact.SETRANGE("Post Code", Build12ContactTemporary."Post Code");

      IF (Build12Contact.FINDFIRST) THEN BEGIN

        IF (Build12Contact.IsInSyncWithContact) OR (Build12Contact.Status = Build12Contact.Status::Closed)  THEN
          EXIT;

        Build12Contact.CopyAddressFieldsFromTempTable(Build12ContactTemporary);
        IF (Build12Contact.Status = Build12Contact.Status::Processed) THEN
          Build12Contact.Status := Build12Contact.Status::Open;
        Build12Contact.MODIFY;
      END
      ELSE
      BEGIN
        Build12Contact.INIT;
        Build12Contact.CopyAddressFieldsFromTempTable(Build12ContactTemporary);
        Build12Contact.Status := Build12Contact.Status::Unlinked;
        Build12Contact.INSERT;
      END;
    END;

    LOCAL PROCEDURE CheckCentralMgt@1100525010() : Boolean;
    VAR
      MarketingSetup@1100525000 : Record 5079;
      CompanyRelationsCentralMgt@1100525001 : Record 11012059;
    BEGIN
      IF NOT MarketingSetup.GET THEN
        ERROR('');
      IF MarketingSetup."Central Management" THEN
        IF NOT MarketingSetup."Allow Decentral Comp./Pers." THEN
          EXIT(TRUE);
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE CheckPurchaseAction@1100525018(ProjectNo@1100525004 : Code[20];Id@1100525000 : Code[10];Name@1100525001 : Text;Code@1100525002 : Text);
    VAR
      ProjectPurchaseAction@1100525003 : Record 11012026;
      PurchaseActionName@1100525005 : Text;
    BEGIN
      ProjectPurchaseAction.SETRANGE("Project No.", ProjectNo);
      ProjectPurchaseAction.SETRANGE(Code, Id);
      IF NOT ProjectPurchaseAction.FINDFIRST THEN BEGIN
        // add purchase action
        ProjectPurchaseAction."Project No." := ProjectNo;
        ProjectPurchaseAction.Code := Id;
        IF Code <> '' THEN
          PurchaseActionName := Code + ' ';
        PurchaseActionName := PurchaseActionName + Name;
        ProjectPurchaseAction.VALIDATE(Description, FORMAT(PurchaseActionName, 50, 0));
        ProjectPurchaseAction.INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE CheckContactOnPurchaseAction@1100525032(ProjectNo@1100525000 : Code[20];PurchaseActionNo@1100525001 : Code[10];ContactNo@1100525002 : Code[20]);
    VAR
      VendorsbyPurchaseAction@1100525003 : Record 11012068;
      ContactBusinessRelation@1100527800 : Record 5054;
    BEGIN

      IF (ContactBusinessRelation.FindByContact(ContactBusinessRelation."Link to Table"::Vendor, ContactNo)) THEN BEGIN
        VendorsbyPurchaseAction.SETRANGE("Project No.", ProjectNo);
        VendorsbyPurchaseAction.SETRANGE("Purchase Action", PurchaseActionNo);
        VendorsbyPurchaseAction.SETRANGE(Type, VendorsbyPurchaseAction.Type::Vendor);
        VendorsbyPurchaseAction.SETRANGE("Vendor No.", ContactBusinessRelation."No.");
        IF NOT VendorsbyPurchaseAction.FINDFIRST THEN BEGIN
          VendorsbyPurchaseAction."Project No." := ProjectNo;
          VendorsbyPurchaseAction."Purchase Action" := PurchaseActionNo;
          VendorsbyPurchaseAction.Type := VendorsbyPurchaseAction.Type::Vendor;
          VendorsbyPurchaseAction.VALIDATE("Vendor No.", ContactBusinessRelation."No.");
          VendorsbyPurchaseAction.INSERT(TRUE);
        END;
      END
      ELSE BEGIN
        VendorsbyPurchaseAction.SETRANGE("Project No.", ProjectNo);
        VendorsbyPurchaseAction.SETRANGE("Purchase Action", PurchaseActionNo);
        VendorsbyPurchaseAction.SETRANGE(Type, VendorsbyPurchaseAction.Type::Contact);
        VendorsbyPurchaseAction.SETRANGE("Vendor No.", ContactNo);
        IF NOT VendorsbyPurchaseAction.FINDFIRST THEN BEGIN
          VendorsbyPurchaseAction."Project No." := ProjectNo;
          VendorsbyPurchaseAction."Purchase Action" := PurchaseActionNo;
          VendorsbyPurchaseAction.Type := VendorsbyPurchaseAction.Type::Contact;
          VendorsbyPurchaseAction.VALIDATE("Vendor No.",ContactNo);
          VendorsbyPurchaseAction.INSERT(TRUE);
        END;
      END;
    END;

    LOCAL PROCEDURE CheckZipCode@1100527809(ZipCode@1100527800 : Code[20];City@1100527801 : Text);
    VAR
      PostCode@1100527802 : Record 225;
    BEGIN
      PostCode.SETRANGE(Code,ZipCode);
      IF (PostCode.FINDSET) THEN  EXIT;

      PostCode.INIT;
      PostCode.Code := ZipCode;
      PostCode.City := City;
      PostCode.INSERT;
    END;

    LOCAL PROCEDURE CheckMendatoryFields@1100527817(Job@1100527800 : Record 11072003);
    BEGIN
      IF Job."Build12 Id" <> '' THEN
        ERROR(Text002);

      IF Job.Description = '' THEN
        ERROR(Text003);

      IF Job."Post Code" = '' THEN
        ERROR(Text004);

      IF Job.City = '' THEN
         ERROR(Text005);

      IF Job."Country/Region Code" = '' THEN
         ERROR(Text006);
    END;

    LOCAL PROCEDURE FindExistingContactNo@1100525015(Zip@1100525003 : Code[20];CocNumber@1100525006 : Text[20]) : Code[20];
    VAR
      Contact@1100525000 : Record 5050;
      ContactZip@1100525007 : Text;
      Build12Zip@1100525008 : Text;
      CentralMgtCompany@1100525009 : Text;
    BEGIN
      Contact.SETRANGE("COC Registration No.", CocNumber);
      Contact.SETRANGE("Post Code", Zip);
      IF Contact.FINDFIRST THEN BEGIN
          EXIT(Contact."No.");
      END;
    END;

    PROCEDURE IsActive@1100527801() : Boolean;
    BEGIN
      IF (NOT Build12Setup.GET) THEN EXIT;
      EXIT (Build12Setup.Active);
    END;

    PROCEDURE GetSendTriggerText@1100527800() : Text;
    BEGIN
      EXIT(BUILD12SendTrigger);
    END;

    LOCAL PROCEDURE TransferFieldsFrom12BuildContactToContact@1100527810(VAR Build12Contact@1100527800 : Record 11130001;VAR Contact@1100527801 : Record 5050);
    BEGIN
      Contact."COC Registration No." := Build12Contact."COC Registration No.";
      Contact."COC Location No." := Build12Contact."COC Location No.";
      Contact."Post Code" := Build12Contact."Post Code";
      Contact.Name := COPYSTR(Build12Contact.Name,1,MAXSTRLEN(Contact.Name));
      Contact."Name 2" := COPYSTR(Build12Contact.Name,MAXSTRLEN(Contact.Name) + 1,MAXSTRLEN(Contact.Name) + MAXSTRLEN(Contact."Name 2"));
      Contact."Company Name" := Contact.Name;
      Contact."Company Name 2" := Contact."Name 2";
      Contact.City := Build12Contact.City;
      Contact.Address := Build12Contact.Address;
      Contact."Address 2" := Build12Contact."Address 2";
      Contact."Country/Region Code"  := Build12Contact."Country/Region Code";
      Contact."Phone No." := Build12Contact."Phone No.";
      Contact."Home Page" := Build12Contact."Home Page";

      Contact."Visit Address" := Build12Contact."Visit Address";
      Contact."Visit Address 2" := Build12Contact."Visit Address 2";
      Contact."Visit Address City" := Build12Contact."Visit Address City";
      Contact."Visit Address Country/Region" := Build12Contact."Visit Address Country/Region";
      Contact."Visit Address Post Code" := Build12Contact."Visit Address Post Code";
    END;

    BEGIN
    END.
  }
}

