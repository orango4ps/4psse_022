OBJECT Codeunit 11012570 Post Plant Hours Revenues
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    TableNo=11012573;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      PlantSetup@1100485000 : Record 11012550;
      PlantHourRec@1210190000 : Record 11012573;
      PlantHourLineRec@1210190001 : Record 11012574;
      Text000@1210190002 : TextConst 'DEU=Mîchten Sie die %1 buchen?;ENU=Do you want to post the %1?;NLD=Wilt u de %1 boeken?;NOR=Vil du bokfõre %1?;SVE=Vill du bokfîra %1?';
      PlantNoRec@1210190003 : Record 11012552;
      PlantLocationRec@1100485002 : Record 11012554;
      Text001@1100485003 : TextConst 'DEU=ist Null. FÅr keinen einzigen Tag wurde die Anzahl Stunden eingegeben;ENU=is zero, the number of hours are not entered;NLD=is nul, voor geen enkele dag is het aantal uren ingegeven;NOR=er null, antall timer er ikke angitt;SVE=Ñr noll, antal timmar har inte angetts';
      Text002@1100525000 : TextConst 'DEU=''%1'' mit ''%2 %3'' ist nicht gestattet wenn Mitarbeiter nicht eigegeben worden ist;ENU=''%1'' with ''%2 %3'' not allowed if employee is not fillerd;NLD=''%1'' met ''%2 %3'' niet toegestaan als werknemer niet gevuld is;NOR=''%1'' med ''%2 %3'' er ikke tillatt hvis ansatt ikke har fylt ut;SVE=''%1'' med ''%2 %3'' Ñr inte tillÜtet om anstÑlld inte har fyllts i';
      PlantRateCodeRec@1100525001 : Record 11020502;
      PurchHead@1210190004 : Record 38;
      PurchLine@1210190005 : Record 39;
      TmpPurchHead@1210190006 : TEMPORARY Record 38;
      Text003@1210190007 : TextConst 'DEU=Bestellung %1 konnte nicht gebucht werden.;ENU=Purchase Order %1 could not be posted;NLD=Inkooporder %1 kon niet worden geboekt;NOR=Innkjõpsordre %1 kunne ikke bokfõres;SVE=Inkîpsorder %1 kunde inte bokfîras';
      Text004@1210190008 : TextConst 'DEU=Stunden;ENU=Hours;NLD=Uren;NOR="Timer ";SVE=Timmar';
      Text005@1210190009 : TextConst 'DEU=Es wurde kein Anmietungspreis fÅr Stunden gefunden,  %1 ''%2-%3'', %4 ''%5'', %6 ''%7''.;ENU=No Rent Price fot Hours found, %1 ''%2-%3'', %4 ''%5'', %6 ''%7''.;NLD=Geen inhuurprijs voor uren gevonden, %1 ''%2-%3'', %4 ''%5'', %6 ''%7''.;NOR=Kunne ikke finne leiepris for timer, %1 ''%2-%3'', %4 ''%5'', %6 ''%7''.;SVE=Det gick inte att hitta nÜgot hyrpris fîr timmar, %1 ''%2-%3'', %4 ''%5'', %6 ''%7''.';
      Text006@1210190010 : TextConst 'DEU=Werkz.St.Ort;ENU=Plant Loc.;NLD=Mat.loc.;NOR=Maskinplassering;SVE=Maskinutplacering';
      Text007@1210190011 : TextConst 'DEU=Projekt;ENU=Project;NLD=Project;NOR=Prosjekt;SVE=Projekt';
      Text008@1210190012 : TextConst 'DEU=Serv.-Auftr.;ENU=Serv. Order;NLD=Serv.order;NOR=Serviceordre;SVE=Serv. Order';

    PROCEDURE Post@1210190000(VAR Rec@1210190001 : Record 11012573;Print@1210190000 : Boolean);
    BEGIN
      IF NOT CONFIRM(Text000,FALSE,PlantHourRec.TABLECAPTION) THEN
        EXIT;

      PlantHourRec.COPY(Rec);

      PlantSetup.GET;
      ClearTmpPurchOrder();

      WITH PlantHourLineRec DO BEGIN
        SETRANGE(Year,PlantHourRec.Year);
        SETRANGE(Week,PlantHourRec.Week);
        SETRANGE("Plant Type",PlantHourRec."Plant Type");
        SETRANGE("Plant No.",PlantHourRec."Plant No.");
        SETRANGE(Status,Status::Open);
        IF FINDSET(TRUE,FALSE) THEN
          REPEAT
            ProcessLine;
          UNTIL NEXT = 0;
      END;
      PostPurchaseOrders();

      IF Print THEN BEGIN
        COMMIT;
        PlantHourLineRec.SETRANGE(Status,PlantHourLineRec.Status::Posted);
        REPORT.RUN(REPORT::"Plant Hours Revenues", TRUE, TRUE, PlantHourLineRec);
      END;
    END;

    PROCEDURE PostBatch@1100525000(VAR LineRec@1210190001 : Record 11012574);
    BEGIN
      PlantHourLineRec.COPY(LineRec);
      PlantSetup.GET;
      ClearTmpPurchOrder();
      WITH PlantHourLineRec DO BEGIN
        SETRANGE(Status,Status::Open);
        IF FINDSET(TRUE,FALSE) THEN
          REPEAT
            ProcessLine;
          UNTIL NEXT = 0;
      END;
      PostPurchaseOrders();
    END;

    PROCEDURE PostHourAcc@1100485004(IYear@1100485000 : Integer;IWeek@1100525000 : Integer;IPlantType@1100525001 : Code[20];IPlantNo@1100525002 : Code[10];ILineNo@1100525003 : Integer);
    BEGIN
      PlantSetup.GET;
      // Do not 'ClearTmpPurchOrder' and 'PostPurchaseOrders' here because this function is called for each Hour Acc. Line,
      // so this is done once for a Hour Acc. Posting Run in codeunit C11012005.
      WITH PlantHourLineRec DO BEGIN
        RESET;
        SETRANGE(Year, IYear);
        SETRANGE(Week, IWeek);
        SETRANGE("Plant Type", IPlantType);
        SETRANGE("Plant No.", IPlantNo);
        SETRANGE("Line No.", ILineNo);
        SETRANGE(Status,Status::Open);
        IF FINDFIRST THEN
          ProcessLine;
      END;
    END;

    LOCAL PROCEDURE ProcessLine@1100485005();
    BEGIN
      WITH PlantHourLineRec DO BEGIN
        //Same tests in codeunit 11012003 Check Hour Line
        TESTFIELD("Plant Type");
        TESTFIELD("Plant No.");
        TESTFIELD("Plant Location");
        IF (Type IN [Type::Hours, Type::Expenses]) THEN
          TESTFIELD("Employee No.");
        IF (Type IN [Type::"Unmanned Hours", Type::Cost]) THEN
          TESTFIELD("Employee No.", '');
        IF Type IN [Type::Expenses, Type::Cost] THEN BEGIN
          TESTFIELD("Cost Object");
          TESTFIELD(Amount);
          "Rate Code" := '';
          Monday := 0;
          Tuesday := 0;
          Wednesday := 0;
          Thursday := 0;
          Friday := 0;
          Saturday := 0;
          Sunday := 0;
          "Total Line" := 0;
        END ELSE BEGIN
          IF (Monday=0) AND (Tuesday=0) AND (Wednesday=0) AND (Thursday=0) AND (Friday=0) AND (Saturday=0) AND (Sunday=0) THEN
            FIELDERROR("Total Line", Text001);
          IF PlantSetup."Rate Codes" THEN BEGIN
            TESTFIELD("Rate Code");
            PlantRateCodeRec.CheckPlantRateCode("Plant Location", "Rate Code", TRUE, '', 0);
            IF "Employee No." = '' THEN BEGIN
              //RateCodeRec.GET("Rate Code");
              PlantRateCodeRec.ReadPlantRateCode("Plant Location", "Rate Code", '');
              IF PlantRateCodeRec."Hour Rate from" = PlantRateCodeRec."Hour Rate from"::Employee THEN BEGIN
                FIELDERROR("Rate Code",
                  STRSUBSTNO(Text002,"Rate Code",PlantRateCodeRec.FIELDCAPTION("Hour Rate from"),PlantRateCodeRec."Hour Rate from"));
              END;
            END;
          END ELSE
            TESTFIELD("Rate Code", '');
          TESTFIELD("Cost Object", '');
          Amount := 0;
          "Unit Price" := 0;
          Quantity := 0;
        END;
        IF NOT PlantSetup.CheckElementMandatory("Plant Location", Element, '') THEN //*C004558
          TESTFIELD(Element);
        PlantLocationRec.GET("Plant Location");
        PlantLocationRec.CheckBlock(1,FALSE,TRUE);
        PlantNoRec.GET("Plant Type", "Plant No.");
        IF PlantNoRec.External AND PlantSetup."Plant Hire Orders (Hours)" AND
           (Type IN [Type::Hours, Type::"Unmanned Hours"])  //*C-019470.c
        THEN
          CreatePurchaseOrder();

        Status := Status::Posted;
        MODIFY;
      END;
    END;

    PROCEDURE ClearTmpPurchOrder@1210190002();
    BEGIN
      TmpPurchHead.RESET;
      TmpPurchHead.DELETEALL;
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@1210190001();
    VAR
      MaxLen@1210190000 : Integer;
    BEGIN
      IF (PlantHourLineRec."Resource Request No." <> '') AND (PlantHourLineRec."Resource Req. Receiv. Company" = '') THEN
        EXIT;  // Alrady done on Resource Request
      PlantNoRec.TESTFIELD(Vendor);
      PlantSetup.TESTFIELD("Cost Component Rent");
      PlantSetup.TESTFIELD("Plant Hours Unit of Measure");

      //* Purchase Order Header
      TmpPurchHead.RESET;
      TmpPurchHead.SETRANGE("Buy-from Vendor No.", PlantNoRec.Vendor);
      IF TmpPurchHead.FINDFIRST THEN BEGIN
        PurchHead.GET(TmpPurchHead."Document Type", TmpPurchHead."No.");
        TmpPurchHead."No. Printed" += 10000;  //* TmpPurchHead."No. Printed" is used for NextLineNo
        TmpPurchHead.MODIFY;
      END ELSE BEGIN
        PurchHead.INIT;
        PurchHead."Document Type" := PurchHead."Document Type"::Order;
        PurchHead."No." := '';
        PurchHead."Hours Hire Order Type" := PurchHead."Hours Hire Order Type"::Plant;
        PurchHead.INSERT(TRUE);

        PurchHead."Buy-from Vendor No." := PlantNoRec.Vendor;
        PurchHead.VALIDATE("Buy-from Vendor No.");
        PurchHead."Posting Date" := DWY2DATE(5, PlantHourLineRec.Week, PlantHourLineRec.Year);
        PurchHead."Document Date" := PurchHead."Posting Date";
        PurchHead."Amounts only" := FALSE;
        PurchHead."Invoice Conduction Note" := FALSE;
        PurchHead.MODIFY;

        TmpPurchHead := PurchHead;
        TmpPurchHead."No. Printed" := 10000;  //* TmpPurchHead."No. Printed" is used for NextLineNo
        TmpPurchHead.INSERT;
      END;

      //* Purchase Order Line
      PurchLine.INIT;
      PurchLine."Document Type" := PurchHead."Document Type";
      PurchLine."Document No." := PurchHead."No.";
      PurchLine."Line No." := TmpPurchHead."No. Printed";  //* NextLineNo
      PurchLine.INSERT(TRUE);
      PurchLine.InitRecord;
      PurchLine."Buy-from Vendor No." := PurchHead."Buy-from Vendor No.";
      PurchLine."Pay-to Vendor No." := PurchHead."Pay-to Vendor No.";
      PurchLine.Type := PurchLine.Type::"G/L Account";
      PurchLine."System-Created Entry" := TRUE;
      PurchLine."Posting Date" := DWY2DATE(PostingDateDayNo, PlantHourLineRec.Week, PlantHourLineRec.Year);
      PurchLine.VALIDATE("Plant Type", PlantHourLineRec."Plant Type");
      PurchLine.VALIDATE("Plant No.", PlantHourLineRec."Plant No.");
      PurchLine.VALIDATE("Cost Component Plant", PlantSetup."Cost Component Rent");
      PurchLine.VALIDATE("Unit of Measure Code", PlantSetup."Plant Hours Unit of Measure");
      PurchLine.VALIDATE(Quantity, PlantHourLineRec."Total Line");
      PurchLine.VALIDATE("Direct Unit Cost", 0);  //* Can already be determined on 'VALIDATES' but can be wrong
      PurchLine.VALIDATE("Line Discount %", 0);   //* (fi of another Unit). So reset before determine cost price.
      IF NOT PurchLine.UpdateDirectUnitCost(0) THEN
        ERROR(Text005,
          PurchLine.FIELDCAPTION("Plant No."), PurchLine."Plant Type", PurchLine."Plant No.",
          PurchLine.FIELDCAPTION("Unit of Measure Code"), PurchLine."Unit of Measure Code",
          PlantNoRec.FIELDCAPTION(Vendor), PurchLine."Pay-to Vendor No.");
      PurchLine.VALIDATE("Qty. to Receive", PurchLine.Quantity);
      PurchLine.Description := COPYSTR(
        Text004 + ' ' + FORMAT(PlantHourLineRec.Year) + '-' + FORMAT(PlantHourLineRec.Week) +
        ' ' + PurchLine.GetTranslatedPlantDesc(MAXSTRLEN(PurchLine.Description)),
        1, MAXSTRLEN(PurchLine.Description));
      MaxLen := MAXSTRLEN(PurchLine."Description 2");
      PurchLine."Description 2" :=
        COPYSTR(PlantHourLineRec.FIELDCAPTION("Plant Location") + ' ' + PlantHourLineRec."Plant Location", 1, MaxLen);
      IF PlantLocationRec."Project No." <> '' THEN BEGIN
        IF STRLEN(PurchLine."Description 2" +
          PlantLocationRec.FIELDCAPTION("Project No.") + PlantLocationRec."Project No.") + 3 <= MaxLen
        THEN
          PurchLine."Description 2" := PurchLine."Description 2" + ', ' +
            PlantLocationRec.FIELDCAPTION("Project No.") + ' ' + PlantLocationRec."Project No."
        ELSE
          PurchLine."Description 2" :=
            COPYSTR(Text006+PlantHourLineRec."Plant Location"+', '+Text007+' '+PlantLocationRec."Project No.", 1, MaxLen);
      END ELSE BEGIN
        IF PlantLocationRec."Service Order No." <> '' THEN BEGIN
          IF STRLEN(PurchLine."Description 2" +
            PlantLocationRec.FIELDCAPTION("Service Order No.") + PlantLocationRec."Service Order No.") + 3 <= MaxLen
          THEN
            PurchLine."Description 2" := PurchLine."Description 2" + ', ' +
              PlantLocationRec.FIELDCAPTION("Service Order No.") + ' ' + PlantLocationRec."Service Order No."
          ELSE
            PurchLine."Description 2" :=
              COPYSTR(Text006+PlantHourLineRec."Plant Location"+', '+Text008+' '+PlantLocationRec."Service Order No.", 1, MaxLen);
        END;
      END;
      PurchLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE PostingDateDayNo@1210190004() DayNo : Integer;
    BEGIN
      //* Determine Posting Date (as in R11012564)
      DayNo := 5;
      IF NOT (PlantHourLineRec.Type IN [PlantHourLineRec.Type::Expenses, PlantHourLineRec.Type::Cost]) THEN BEGIN
        IF PlantHourLineRec.Monday <> 0 THEN DayNo := 1;
        IF PlantHourLineRec.Tuesday <> 0 THEN DayNo := 2;
        IF PlantHourLineRec.Wednesday <> 0 THEN DayNo := 3;
        IF PlantHourLineRec.Thursday <> 0 THEN DayNo := 4;
        IF PlantHourLineRec.Friday <> 0 THEN DayNo := 5;
        IF PlantHourLineRec.Saturday <> 0 THEN DayNo := 6;
        IF PlantHourLineRec.Sunday <> 0 THEN DayNo := 7;
      END;
    END;

    PROCEDURE PostPurchaseOrders@1210190003();
    VAR
      PurchPost@1210190000 : Codeunit 90;
    BEGIN
      //* Post Receipts of the creates Purchase Orders (External Plant Hire Orders)
      //* As in C11012005 for External Employee Hire Orders
      TmpPurchHead.RESET;
      IF TmpPurchHead.FINDSET THEN BEGIN
        COMMIT; //Very important because PurchPost may cause an Error
        REPEAT
          PurchHead := TmpPurchHead;
          PurchHead.GET(TmpPurchHead."Document Type", TmpPurchHead."No.");
          PurchHead.Receive := TRUE;
          PurchHead.Invoice := FALSE;
          IF NOT PurchPost.RUN(PurchHead) THEN
            MESSAGE(Text003, TmpPurchHead."No.");
          TmpPurchHead.DELETE;
        UNTIL TmpPurchHead.NEXT = 0;
      END;
    END;

    BEGIN
    END.
  }
}

