OBJECT Codeunit 6086368 Remove Deprecated Documents
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EMW16.00.10.3.00.05;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            DeleteDocument;
          END;

  }
  CODE
  {
    VAR
      GlobalDocGUID@1160040000 : GUID;
      GlobalTableID@1160040001 : Integer;

    PROCEDURE DeleteDoc@1160040002(TableID@1160040001 : Integer;DocGUID@1160040000 : GUID) : Boolean;
    VAR
      RemoveDeprecatedCU@1160040002 : Codeunit 6086368;
    BEGIN
      RemoveDeprecatedCU.SetDocToDelete(TableID,DocGUID);
      IF RemoveDeprecatedCU.RUN THEN
        EXIT(TRUE);
    END;

    PROCEDURE SetDocToDelete@1160040000(TableID@1160040000 : Integer;DocGUID@1160040001 : GUID);
    BEGIN
      GlobalTableID := TableID;
      GlobalDocGUID := DocGUID;
    END;

    LOCAL PROCEDURE DeleteDocument@1160040003();
    VAR
      Expense@1160040003 : Record 6086320;
      Mileage@1160040002 : Record 6086338;
      ExpHeader@1160040001 : Record 6086339;
      ExpInbox@1160040007 : Record 6086323;
      MilInbox@1160040006 : Record 6086353;
      ExpHeaderInbox@1160040005 : Record 6086341;
      EMOnlineMgt@1160040004 : Codeunit 6086305;
      EmptyGUID@1160040000 : GUID;
    BEGIN
      IF (GlobalTableID = 0) OR (GlobalDocGUID = EmptyGUID) THEN
        ERROR('This is a developer error.The global parameters were not set properly.');

      CASE GlobalTableID OF
        DATABASE::Expense:
          BEGIN
            Expense.SETCURRENTKEY("Expense GUID");
            Expense.SETRANGE("Expense GUID",GlobalDocGUID);
            Expense.SETRANGE(Posted,FALSE);
            IF Expense.FINDFIRST THEN BEGIN
              Expense.Status := Expense.Status::Open;
              IF NOT Expense."Matched to Bank Transaction" THEN BEGIN
                Expense.DELETE(TRUE);
                COMMIT;
              END;
            END;

            //CLOSE ALL THE PENDING INBOX ENTRIES
            ExpInbox.SETCURRENTKEY("Expense GUID",Status);
            ExpInbox.SETRANGE("Expense GUID",GlobalDocGUID);
            ExpInbox.SETFILTER(Status,'<>%1',ExpInbox.Status::Accepted);
            ExpInbox.MODIFYALL(Status,ExpInbox.Status::Accepted);
            COMMIT;

            EMOnlineMgt.PhysicalDeleteDocFromCO(DATABASE::Expense,GlobalDocGUID,FALSE);
          END;
        DATABASE::Mileage:
          BEGIN
            Mileage.SETCURRENTKEY("Mileage GUID");
            Mileage.SETRANGE("Mileage GUID",GlobalDocGUID);
            Mileage.SETRANGE(Posted,FALSE);
            IF Mileage.FINDFIRST THEN BEGIN
              Mileage.Status := Expense.Status::Open;
              Mileage.DELETE(TRUE);
              COMMIT;
            END;

            //CLOSE ALL THE PENDING INBOX ENTRIES
            MilInbox.SETCURRENTKEY("Mileage GUID",Status);
            MilInbox.SETRANGE("Mileage GUID",GlobalDocGUID);
            MilInbox.SETFILTER(Status,'<>%1',MilInbox.Status::Accepted);
            MilInbox.MODIFYALL(Status,MilInbox.Status::Accepted);
            COMMIT;

            EMOnlineMgt.PhysicalDeleteDocFromCO(DATABASE::Mileage,GlobalDocGUID,FALSE);
          END;

        DATABASE::"Expense Header":
          BEGIN
            ExpHeader.SetHideUI;
            ExpHeader.SETCURRENTKEY("Exp. Header GUID");
            ExpHeader.SETRANGE("Exp. Header GUID",GlobalDocGUID);
            ExpHeader.SETRANGE(Posted,FALSE);
            IF ExpHeader.FINDFIRST THEN BEGIN
              ExpHeader.Status := ExpHeader.Status::Open;
              ExpHeader.DELETE(TRUE);
              COMMIT;
            END;

            //CLOSE ALL THE PENDING INBOX ENTRIES
            ExpHeaderInbox.SETCURRENTKEY("Exp. Header GUID",Status);
            ExpHeaderInbox.SETRANGE("Exp. Header GUID",GlobalDocGUID);
            ExpHeaderInbox.SETFILTER(Status,'<>%1',ExpHeaderInbox.Status::Accepted);
            ExpHeaderInbox.MODIFYALL(Status,ExpHeaderInbox.Status::Accepted);
            COMMIT;

            EMOnlineMgt.PhysicalDeleteDocFromCO(DATABASE::"Expense Header",GlobalDocGUID,FALSE);
          END;
      END;
    END;

    BEGIN
    END.
  }
}

