OBJECT Codeunit 11012553 Post Plant Order
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    TableNo=11012556;
    OnRun=BEGIN
            gTransportOrderRun := FALSE;
            OrderRec.COPY(Rec);
            Code;
            Rec := OrderRec;
          END;

  }
  CODE
  {
    VAR
      Text000@1100485018 : TextConst 'DEU=Es sind keine %1 oder %2 vorhanden. Mîchten Sie %3 trotzdem buchen?;ENU=There is no %1 present. Do you want to post the %2 anyway ?;NLD=Er is geen %1 aanwezig. Wilt u de %2 toch boeken?';
      Text001@11012008 : TextConst 'DEU=Anzahl muss 1 bei Werkzeugnr. %1 %2 sein.;ENU=Quantity must be 1 for Plant No. %1 %2.;NLD=Aantal moet 1 zijn bij materieelnr. %1 %2.;NOR=Antallet mÜ vëre 1 for maskinnr. %1 %2.;SVE=Antalet mÜste vara 1 fîr Maskinnr %1 %2.';
      Text002@11012009 : TextConst 'DEU=Anzahl darf keine 0 bei Werkzeug %1 sein.;ENU=Quantity could not be 0 for Plant %1;NLD=Aantal mag geen 0 zijn bij materieel %1.;NOR=Antallet kan ikke vëre 0 for maskin %1;SVE=Antalet fÜr inte vara 0 fîr Maskinen %1';
      Text003@11012010 : TextConst 'DEU=Von Werkzeugnr. ''%1 %2'' ist nicht genÅgend Lagermenge vorhanden.;ENU=There is unsufficient stock available for Plant No. ''%1 %2''.;NLD=Van materieelnr. ''%1 %2'' is onvoldoende voorraad aanwezig.;NOR=Det er utilstrekkelig artikkelbeholdning for maskinnr. %1 %2.;SVE=Det fîrekommer otillrÑcklig lagerbalans fîr Maskinnr %1 %2.';
      Text004@11012011 : TextConst 'DEU=Ab %3 ist von Werkzeugnr. ''%1 %2'' nicht genÅgend Lagermenge vorhanden.;ENU=There is unsufficient stock available for Plant No. ''%1 %2'' per %3.;NLD=Van materieelnr. ''%1 %2'' is onvoldoende voorraad aanwezig per %3.;NOR=Utilstrekkelig lagerbeholdning for maskinnr. ''%1 %2'' per %3.;SVE=Det fîrekommer otillrÑcklig lagerbalans fîr Maskinnr ''%1 %2'' per %3.';
      PlantSetup@11012000 : Record 11012550;
      GLSetupRec@1100485006 : Record 98;
      InventSetup@1100525005 : Record 313;
      OrderRec@11012001 : Record 11012556;
      OrderLineRec@11012002 : Record 11012557;
      InventoryRec@11012003 : Record 11012555;
      CostRec@11012004 : Record 11012558;
      InspecTypeRec@1100485015 : Record 11012562;
      PlantInspecTypeRec@1100485016 : Record 11012563;
      InspectionRec@1210190003 : Record 11012564;
      FromLocRec@1100485008 : Record 11012554;
      ToLocRec@1100485009 : Record 11012554;
      PlantRateCodeRec@1100525001 : Record 11020502;
      ItemRec@1100485014 : Record 27;
      ItemJnlLineRec@1100485002 : Record 83;
      TempPurchHeader@1100485019 : TEMPORARY Record 38;
      InventoryMngmnt@11012005 : Codeunit 11012566;
      ItemJnlPostLineCU@1100485007 : Codeunit 22;
      BlockingOrigLocChecked@11012006 : Boolean;
      Text005@1210190000 : TextConst 'DEU=%1 muss mit der Summe von %2, %3 und %4 in %5 %6 Åbereinstimmen;ENU=%1 must equal the Sum of %2, %3 and %4 in %5 %6;NLD=%1 moet gelijk zijn aan de som van %2, %3 en %4 in %5 %6;NOR=%1 mÜ stemme med summen av %2, %3 og %4 i %5 %6;SVE=%1 mÜste vara lika med summan av %2, %3 och %4 i %5 %6';
      Text006@1210190001 : TextConst 'DEU=Kein %1 fÅr Werkzeug %2 %3 vorhanden. Fortfahren?;ENU=No %1 present for Plant %2 %3. Continue ?;NLD=Geen %1 aanwezig voor materieel %2 %3. Doorgaan?;NOR=Det finnes ingen %1 for maskinen %2 %3. Vil du fortsette?;SVE=Det finns ingen %1 fîr Maskinen %2 %3. Vill du fortsÑtta?';
      Text007@1210190002 : TextConst 'DEU=Storniert;ENU=Cancelled;NLD=Geannuleerd;NOR=Annullert;SVE=Avbruten';
      Text008@1210190004 : TextConst 'DEU=Aut. inspiziert bei der Lieferung;ENU=Aut. Approved for Shipment;NLD=Aut. gekeurd bij verzending;NOR=Aut. Godkjent for leveranse;SVE=Beh. GodkÑnt fîr leverans';
      Text009@1100529000 : TextConst 'DEU=Kein %1 erstellt fÅr Werkzeug %2 %3. Fortfahren?;ENU=No %1 created for Plant %2 %3. Continue ?;NLD=Geen %1 aangemaakt voor materieel %2 %3. Doorgaan?;NOR=Ingen %1 opprettet for maskin %2 %3. Fortsette?';
      Text010@1100485000 : TextConst 'DEU=Von Werkzeugnr. ''%1 %2'', Tarifcode ''%4'' ist ab %3 nicht genÅgend Lagermenge vorhanden.;ENU=There is unsufficient stock available for Plant No. ''%1 %2'', Rate Code ''%4'' per %3.;NLD=Van materieelnr. ''%1 %2'', tariefcode ''%4'' is onvoldoende voorraad aanwezig per %3.;NOR=Det er utilstrekkelig artikkelbeholdning for maskinnr. ''%1 %2'', satskode ''%4'' per %3.;SVE=Det fîrekommer otillrÑcklig lagerbalans fîr Maskinnr ''%1 %2'', avgiftskod ''%4'' per %3.';
      Text011@1100485001 : TextConst 'DEU=FÅr Werkzeug-Nr. ''%1 %2'' ist zu wenig Bestand verfÅgbar, Tarifcode ''%3''.;ENU=There is unsufficient stock available for Plant No. ''%1 %2'', Rate Code ''%3''.;NLD=Van materieelnr. ''%1 %2'', tariefcode ''%3'' is onvoldoende voorraad aanwezig.';
      Text012@1100485003 : TextConst 'DEU=Artikelzeile(n) bei AnlagenauftrÑgen der Art ''%1'' unzulÑssig.;ENU="Item Line(s) not allowed on Plant Orders of Type ''%1''. ";NLD=Artikelregel(s) niet toegestaan bij materieelorders van de soort ''%1''.;NOR=Artikkelrader er ikke tillatt pÜ maskinordre av typen ''%1''.;SVE="Artikelrader Ñr inte tillÜtna pÜ Maskinsorder av typen ''%1''. "';
      gTransportOrderRun@1100485010 : Boolean;
      Text013@1100485011 : TextConst 'DEU=Status Depot (%1) von ''Ab Standort'' in der Zeile muss mit dem Status Depot (%2) von ''Ab Standort'' im Auftragskopf, Auftragszeile ''%3-%4'' Åbereinstimmen.;ENU=Status Depot (%1) of the ''From Location'' in the Line must be equal to status Depot (%2) of the ''From  location'' in the Order Header, in Order Line ''%3-%4''.;NLD=Status depot (%1) van de ''Van locatie'' in de regel moet gelijk zijn aan status depot (%2) van de ''Van locatie'' in de orderkop, in orderregel ''%3-%4''.;NOR=Statusdepot (%1) for raden ''fra lokasjon'' mÜ vëre samme som statusdepot (%2) for ''fra lokasjon'' i ordretittel pÜ ordrerad ''%3-%4''.;SVE=StatusdepÜ (%1) fîr raden ''frÜn lagerstÑlle'' mÜste vara samma som statusdepÜ (%2) fîr ''frÜn lagerstÑlle'' i orderrubriken pÜ orderraden ''%3-%4''.';
      Text014@1100485012 : TextConst 'DEU=ist ''%1'': Korrektur negativen Vorrats an einem Standort fÅr Verkauf/ZurÅckkauf-Werkzeug unzulÑssig;ENU=is ''%1'': Negative inventory correction on a locatie not allowed for sales/buy back plant;NLD=is ''%1'': Negatieve voorraad correctie op een locatie niet toegestaan voor verkoop/terugkoop materieel;NOR=er ''%1'': Negativ lagerbeholdningskorrigering pÜ en lokasjon er ikke tillatt for salg/tilbakekjõp for maskin;SVE=Ñr ''%1'': Negativ lagerkorrigering pÜ en plats Ñr inte tillÜtet fîr fîrsÑljning/Üterkîp fîr Maskin';
      Text015@1100485013 : TextConst 'DEU=ist ''%1'': Korrektur negativen Vorrats fÅr Verkauf/ZurÅckkauf-Werkzeug nur zulÑssig ab einem Depot;ENU=is ''%1'': Negative inventory correction for sales/buy back plant only allowed from a depot;NLD=is ''%1'': Negatieve voorraad correctie voor verkoop/terugkoop materieel alleen toegestaan vanaf een depot;NOR=er ''%1'': Negativ lagerbeholdningskorrigering for salg/tilbakekjõp for maskin er kun tillatt fra et depot;SVE=Ñr ''%1'': Negativ lagerkorrigering fîr fîrsÑljning/Üterkîp fîr Maskin Ñr endast tillÜtet frÜn en depÜ';
      Text016@1100485021 : TextConst 'DEU=ist gefÅllt (%1), aber es ist noch keine Bestellung erstellt worden.;ENU=is filled (%1), but there is not creaed a Purchase Order;NLD=is gevuld (%1), maar er is nog geen inkooporder aangemaakt;NOR=har fylt ut (%1), med det er ikke opprettet innkjõpsordre;SVE=har fyllts i (%1), med det finns ingen skapad inkîpsorder';
      Text017@1100525000 : TextConst 'DEU=Letzter AbfÅhr-Werkzeugauftrag des Transportauftrags ''%1'' wurde gebucht. Transportauftrag kann nicht auf ''Versendet'' gestellt werden, weil Transportauftragsdaten nicht eingetragen oder fehlerhaft sind.;ENU="Last removal-plantorder of transportorder ''%1'' is posted. Transportorder can not set to ''Sended'', because transportorder data is not filled/wrong. ";NLD="Laatste afvoer-materieelorder van transportorder ''%1'' is geboekt. Transportorder kan niet op ''Verzonden'' gezet worden, omdat transportordergegevens zijn niet gevuld/fout. ";NOR=Siste Fjerning Õ maskinordre av Transportordre ''%1'' er bokfõrt. Transportordren kan ikke angis som ''Sendt'' ettersom transportordredata ikke er fylt ut/e feilaktige.;SVE="Senaste borttagning Õ Maskinsorder av transportorder ''%1'' har bokfîrts. Transportordern kan inte anges som ''Skickad'' eftersom transportorderdata inte har fyllts i/Ñr felaktiga. "';
      Text018@1100525002 : TextConst 'DEU=Bei %1 von %2 Werkzeugauftragszeilen ist nur ''%3'' gefÅllt, aber ''%4'' ist Null.;ENU=On %1 of %2 plantorder lines only ''%3'' is filled, but ''%4'' is zero.;NLD=Bij %1 van %2 materieelorderregels is alleen ''%3'' gevuld, maar ''%4'' is nul.;NOR=Kun ''%3'' fylt ut pÜ %1 av %2 maskinordrerader, men ''%4'' er null.;SVE=Endast ''%3'' har fyllts i pÜ %1 av %2 Maskinsorderrader, men ''%4'' Ñr noll.';
      Text019@1100525003 : TextConst 'DEU=Buchen Werkzeugauftrag %1 unzulÑssig.;ENU=Post plantorder %1 not allowed.;NLD=Boeken materieelorder %1 niet toegestaan.;NOR=Det er ikke tillatt Ü bokfõre maskinordre %1.;SVE=Det Ñr inte tillÜtet att bokfîra Maskinsorder %1.';
      Text020@1100525004 : TextConst 'DEU=Mîchten Sie den Werkzeugauftrag %1 trotzdem buchen?;ENU=Do you want to post plantorder %1 anyway?;NLD=Wilt u materieelorder %1 toch boeken?;NOR=Vil du bokfõre maskinordre %1 likevel?;SVE=Vill du bokfîra Maskinsorder %1 i alla fall?';
      gChargePurchRun@1100409000 : Boolean;
      Text021@1100529001 : TextConst 'DEU=Keine Schadenskosten von den %1 von %2 Werkzeugauftragszeilen mit Schaden erstellt. Sind Sie sicher, dass Sie fortfahren mîchten?;ENU=From %1 of %2 plant order lines with damage no damage costs created. Are you sure, continue?;NLD=Bij %1 van %2 materieelorderregels met schade geen schadekosten aangemaakt. Weet u het zeker, doorgaan?;NOR=Fra %1 av %2 maskinordrerader med skade er ingen skadekostnader opprettet. Er du sikker, fortsette?';
      Text022@1100409001 : TextConst 'DEU=Buchung nicht zulÑssig. %1 ''%2'' ist gesperrt, %3 ''%4'' (%5).;ENU=Posting not allowed. %1 ''%2'' is blocked, %3 ''%4'' (%5).;NLD=Boeken niet toegestaan. %1 ''%2'' is geblokkeerd, %3 ''%4'' (%5).';
      Text023@1100529002 : TextConst 'DEU=''%1'' nicht vorhanden mit Art ''%2'';ENU=''%1'' not present with type ''%2'';NLD=''%1'' niet aanwezig met soort ''%2''';
      Text024@1100529003 : TextConst 'DEU=''%1'' darf nicht von Art ''%2'' sein;ENU=''%1'' may not be of type ''%2'';NLD=''%1'' mag niet van soort ''%2'' zijn';
      Text025@1100527000 : TextConst 'DEU=Werkzeugauftrag ≥Entfernen  kann nicht mehr retournieren als am Standort vorhanden.;ENU=Plant Order of the type Removal can not return more than present on the Location.;NLD=Afvoerorder kan niet meer afvoeren dan voorradig op de locatie.';

    PROCEDURE RunPostPlantOrderFromTransport@1100485001(VAR Rec@1100485000 : Record 11012556);
    BEGIN
      gTransportOrderRun := TRUE;
      OrderRec.COPY(Rec);
      Code;
      Rec := OrderRec;
    END;

    PROCEDURE Code@1();
    VAR
      OldOrderRec@1000000000 : Record 11012556;
      SalesRentalLogisticsMgt@1100485001 : Codeunit 11012143;
      MailStatusPOModified@1100529001 : Codeunit 11012588;
      InvtAdjmt@1100528501 : Codeunit 5895;
      lvCounter1@1100525000 : Integer;
      lvCounter2@1100525001 : Integer;
      lvText@1100525002 : Text[1024];
      OtherDepotToDepot@1100529000 : Boolean;
      RunInvtAdjmt@1100528500 : Boolean;
    BEGIN
      PlantSetup.GET;
      GLSetupRec.GET;
      InventSetup.GET;  //C006443.n

      WITH OrderRec DO BEGIN

        LOCKTABLE;

        TESTFIELD(Posted,FALSE);
        TESTFIELD("From Location");
        TESTFIELD("To Location");
        TESTFIELD("Transfer Date");
        IF (PlantSetup."Def. Transfer PO" = PlantSetup."Def. Transfer PO"::Yes) THEN BEGIN  //* See call 22454 (Dura Vermeer)
          IF NOT gChargePurchRun THEN BEGIN  //C005327.n (C001519) No check on Def. transfer date for these PO's
            TESTFIELD("Def. Transfer");
            TESTFIELD("Transfer Date", "Def. Transfer");
          END;
        END;
        IF PlantSetup."Extended Picking Procedure" OR PlantSetup."Transport Orders" THEN
          TESTFIELD(Status, Status::Released);
        IF ("Transport Cost for (Advice)" = "Transport Cost for (Advice)"::Project) AND (PlantSetup."Transport Orders") THEN
          TESTFIELD("Project No. (TP-Cost)");
        IF PlantSetup."Transport Status (Ext. Plan.)" AND
           (NOT ("Transport Status (Ext.)" IN
            ["Transport Status (Ext.)"::Open, "Transport Status (Ext.)"::Canceled, "Transport Status (Ext.)"::Finished]))
        THEN
          FIELDERROR("Transport Status (Ext.)");

        FromLocRec.GET("From Location");
        ToLocRec.GET("To Location");
        IF (Type <> Type::"Negative Inventory Correction") THEN
          CheckBlock("To Location",TRUE);
        CheckPOBlockedForPosting(OrderRec);  //C006416.n
        CheckElementMandatory(OrderRec);
        CheckReceiptRegistration(OrderRec);
        IF PlantSetup."Return Qty Not Greater Stock" THEN
          CheckMaxQuantityToRemove(OrderRec);

        OrderLineRec.RESET;
        OrderLineRec.SETRANGE("Plant Order No.","No.");
        //OrderLineRec.SETRANGE(Type, OrderLineRec.Type::Plant);
        OrderLineRec.SETFILTER(Type, '%1|%2', OrderLineRec.Type::Plant, OrderLineRec.Type::Item);
        //ItemLineRec.RESET;
        //ItemLineRec.SETRANGE("Plant Order No.", "No.");
        //ItemLineRec.SETRANGE(Type, ItemLineRec.Type::Item);
        //IF NOT OrderLineRec.FINDFIRST AND NOT ItemLineRec.FINDFIRST THEN BEGIN
        IF NOT OrderLineRec.FINDFIRST THEN BEGIN
          IF (NOT gTransportOrderRun) AND  //* Not needed in transport-run, is already done during 'Release Plant Order'
             (NOT gChargePurchRun) AND (NOT ("Resource Request No." <> '')) AND  //* These plant orders (can) have only cost lines
             GUIALLOWED
          THEN BEGIN
            IF NOT CONFIRM(STRSUBSTNO(Text000,OrderLineRec.TABLECAPTION, OrderRec.TABLECAPTION), FALSE) THEN
              ERROR('');
          END;
        END ELSE BEGIN
          IF (Type = Type::Removal) AND (PlantSetup."Removal with Qty. to Receive") AND (Status < Status::Released) THEN BEGIN
            OrderLineRec.SETRANGE(Quantity, 0);
            OrderLineRec.SETFILTER("Qty. to Receive", '>%1', 0);
            lvCounter1 := OrderLineRec.COUNT;
            OrderLineRec.SETRANGE(Quantity);           //* Reset filters
            OrderLineRec.SETRANGE("Qty. to Receive");  //*
            IF lvCounter1 > 0 THEN BEGIN
              lvCounter2 := OrderLineRec.COUNT;
              lvText := STRSUBSTNO(Text018, lvCounter1, lvCounter2,
                OrderLineRec.FIELDCAPTION("Qty. to Receive"), OrderLineRec.FIELDCAPTION(Quantity));
              IF lvCounter2 = lvCounter1 THEN
                ERROR(lvText + '\' + STRSUBSTNO(Text019, "No."));
              IF GUIALLOWED THEN BEGIN
                IF NOT CONFIRM(lvText + '\' + STRSUBSTNO(Text020, "No."), FALSE) THEN
                  ERROR('');
              END;
            END;
          END;
          CheckAdvancedRemoval;
          IF NOT PlantSetup."Extended Picking Procedure" THEN  //DP00241.n (C004697)
            CheckDamageCostPresent(OrderRec);   //Only check if not already done on release PO
        END;

        CostRec.RESET;
        CostRec.SETRANGE("Plant Order No.","No.");
        CostRec.SETFILTER(Type,'<>%1',CostRec.Type::Text);
        IF CostRec.FINDSET THEN BEGIN
          CheckOrigLocBlocked;
          REPEAT
            CheckLineCost;
          UNTIL CostRec.NEXT = 0;
        END;

        CreateAndPostPurchOrders(OrderLineRec);

        //ItemLineRec.RESET;
        //ItemLineRec.SETRANGE("Plant Order No.","No.");
        //ItemLineRec.SETRANGE(Type, ItemLineRec.Type::Item);
        //IF ItemLineRec.FINDSET THEN BEGIN
        //  IF Type = Type::"Other Transfers" THEN
        //    OtherDepotToDepot := OrderRec.IsOtherTransferDepotToDepot();  //*DP00183.n
        //  IF (NOT (Type IN [Type::Arrival, Type::Removal])) AND (NOT OtherDepotToDepot) THEN //*DP00183.c
        //    ERROR(Text012, Type);
        //  CheckOrigLocBlocked;
        //  PlantSetup.TESTFIELD("Source Code Item Delivery");
        //  REPEAT
        //    PostOrderItemLine();
        //    ItemLineRec."Qty. for Inventory" := 0;
        //    ItemLineRec.Posted := TRUE;
        //    IF Type <> Type::Removal THEN
        //      ItemLineRec."Plant Location (Posted)" := "To Location"
        //    ELSE
        //      ItemLineRec."Plant Location (Posted)" := "From Location";
        //    IF OtherDepotToDepot THEN //*DP00183.n
        //      ItemLineRec."Plant Location (Posted)" := '';  // Was filled with Plantlocation (<>Depot)
        //    ItemLineRec.MODIFY;
        //    //IF WebSite.FIND('-') THEN
        //    //  SynchMgt.ModifyPlantOrderItemLine(ItemLineRec,ItemLineRec);
        //  UNTIL ItemLineRec.NEXT = 0;
        //END;
        OrderLineRec.RESET;
        OrderLineRec.SETRANGE("Plant Order No.","No.");
        OrderLineRec.SETRANGE(Type, OrderLineRec.Type::Item);
        IF OrderLineRec.FINDFIRST THEN BEGIN
          IF Type = Type::"Other Transfers" THEN
            OtherDepotToDepot := OrderRec.IsOtherTransferDepotToDepot();  //*DP00183.n
          IF (NOT (Type IN [Type::Arrival, Type::Removal])) AND (NOT OtherDepotToDepot) THEN //*DP00183.c
            ERROR(Text012, Type);
          CheckOrigLocBlocked;
          PlantSetup.TESTFIELD("Source Code Item Delivery");
        END;

        OrderLineRec.RESET;
        OrderLineRec.SETRANGE("Plant Order No.","No.");
        IF OrderLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
          //DP00485.sn C006159
          IF PlantSetup."No Rent End Date L-L (proj.)" AND
             (Type = Type::"Other Transfers") AND (NOT "Rental Shift") AND
             (FromLocRec."Project No." <> '') AND (ToLocRec."Project No." <> '') AND
             (FromLocRec."Company Name" = ToLocRec."Company Name") AND (NOT FromLocRec.Depot)
          THEN BEGIN
            "Rental Shift" := TRUE;
            "Rental Startdate (To Location)" := "Transfer Date";
            "Rental Enddate (From Location)" := "Transfer Date" - 1;
            MODIFY;
          END;
          //C006159.2
          IF PlantSetup."No Rent End Date Cust.-Cust." AND
             (Type = Type::"Other Transfers") AND (NOT "Rental Shift") AND
             (FromLocRec."Customer No." <> '') AND (ToLocRec."Customer No." <> '') AND
             (FromLocRec."Company Name" = ToLocRec."Company Name") AND (FromLocRec."Company Name" = '') AND (NOT FromLocRec.Depot)
          THEN BEGIN
            "Rental Shift" := TRUE;
            "Rental Startdate (To Location)" := "Transfer Date";
            "Rental Enddate (From Location)" := "Transfer Date" - 1;
            MODIFY;
          END;
          //DP00485.en
          InventoryRec.LOCKTABLE;
          InventoryMngmnt.InitializeNegStockProcess();
          REPEAT
            IF OrderLineRec.Type = OrderLineRec.Type::Plant THEN
              ProcessOrderLine;
            OrderLineRec."Plant Location (Posted Item)" := '';
            IF OrderLineRec.Type = OrderLineRec.Type::Item THEN BEGIN
              RunInvtAdjmt := TRUE;
              PostOrderItemLine();
              IF Type <> Type::Removal THEN
                OrderLineRec."Plant Location (Posted Item)" := "To Location"
              ELSE
                OrderLineRec."Plant Location (Posted Item)" := "From Location";
              IF OtherDepotToDepot THEN //*DP00183.n
                OrderLineRec."Plant Location (Posted Item)" := '';  // Was filled with Plantlocation (<>Depot)
            END;
            CreatePlantOrderReceipt(OrderRec,OrderLineRec);
            IF (OrderLineRec.Type = OrderLineRec.Type::Text) AND (OrderLineRec.Element <> '') THEN
              OrderLineRec.Element := '';
            OrderLineRec."Qty. for Item Reservation" := 0;
            OrderLineRec.Posted := TRUE;
            OrderLineRec.MODIFY;
          UNTIL OrderLineRec.NEXT = 0;
          InventoryMngmnt.ProcessNegStockProcess();
        END;

        IF OrderRec."Sales Rental Order No." <> '' THEN
          SalesRentalLogisticsMgt.AdjustQuantRentalSide(OrderRec);

        OldOrderRec := OrderRec;

        Posted := TRUE;
        "Posting Date" := TODAY;
        Status := Status::Posted;
        "Posted by" := USERID;  //DP00241.n (16484)
        "Posted on" := CURRENTDATETIME;
        IF "Def. Transfer" <> "Transfer Date" THEN  //* See call 22454 (Dura Vermeer)
          "Def. Transfer" := "Transfer Date";

        MODIFY;

        CheckSetTransportOrderToSended();
        //IF WebSite.FIND('-') THEN
        //  SynchMgt.ModifyPlantOrder(OrderRec,OldOrderRec);

        IF (NOT (("Rental Free Order No." <> '') AND ("Rental Free Order Type" <> "Rental Free Order Type"::" "))) AND
           (NOT ReceiptPlantOrder(OrderRec))
        THEN BEGIN
          COMMIT;
          //DP00241.sn (31002)
          IF (NOT gChargePurchRun) AND ("Rental Free Order No." = '') THEN BEGIN
            CLEARLASTERROR;
            IF NOT MailStatusPOModified.RUN(OrderRec) THEN
              ERROR(GETLASTERRORTEXT);
          END;
          //DP00241.en (31002)
        END;

        IF RunInvtAdjmt THEN
          IF InventSetup."Automatic Cost Adjustment" <>
              InventSetup."Automatic Cost Adjustment"::Never
          THEN BEGIN
            InvtAdjmt.SetProperties(TRUE, InventSetup."Automatic Cost Posting");
            InvtAdjmt.MakeMultiLevelAdjmt;
          END;
      END;
    END;

    PROCEDURE ProcessOrderLine@3();
    VAR
      lvLineFromLocRec@1100485001 : Record 11012554;
      lvToLocation@1100485000 : Code[20];
      QtyZeroOnRemovalWithQtyReceive@1100525000 : Boolean;
    BEGIN
      WITH OrderLineRec DO BEGIN
        QtyZeroOnRemovalWithQtyReceive :=
          (OrderRec.Type = OrderRec.Type::Removal) AND
          (PlantSetup."Removal with Qty. to Receive") AND
          (Quantity = 0) AND ("Qty. to Receive" > 0);

        TESTFIELD("From Location");
        TESTFIELD("Plant Type");
        IF NOT QtyZeroOnRemovalWithQtyReceive THEN
          TESTFIELD("No.");
        TESTFIELD("Transfer Date");
        TESTFIELD("Transfer Date", OrderRec."Transfer Date");
        TESTFIELD("Set Code", '');
        TESTFIELD(Description);  //*33268
        IF NOT ((OrderRec.Type = OrderRec.Type::Removal) AND ("To Location" <> '')) THEN
          lvToLocation := OrderRec."To Location"
        ELSE BEGIN
          IF (OrderRec.Type <> OrderRec.Type::"Negative Inventory Correction") THEN
            CheckLocBlocked("To Location",TRUE);
          lvToLocation := "To Location";
        END;
        OrderLineRec.CheckPlantTypeBlocked();  //DP00485.n (C009313)
        OrderLineRec.CheckPlantNumberBlocked;
        IF OrderLineRec.Quantity < 0 THEN
          OrderLineRec.FIELDERROR(Quantity);  //DP00690 (only allowed for item)
        CALCFIELDS(Bulk);
        IF NOT QtyZeroOnRemovalWithQtyReceive THEN BEGIN
          IF NOT Bulk AND (Quantity <> 1) THEN
            ERROR(Text001,"Plant Type","No.");
          IF Bulk AND (Quantity = 0) THEN
            ERROR(Text002,"Plant Type");
        END;

        IF "Rental Type" = "Rental Type"::" " THEN
          FIELDERROR("Rental Type")
        ELSE
          OrderLineRec.CheckRentalType();

        IF (OrderRec.Type = OrderRec.Type::Removal) THEN BEGIN
          lvLineFromLocRec.GET("From Location");
          lvLineFromLocRec.TESTFIELD(Depot, FALSE);
        END;

        IF ("Rental Type" <> "Rental Type"::Rental) AND ("From Location" <> OrderRec."From Location") THEN BEGIN
          lvLineFromLocRec.GET("From Location");
          IF lvLineFromLocRec.Depot <> FromLocRec.Depot THEN
            ERROR(Text013, lvLineFromLocRec.Depot, FromLocRec.Depot, "Plant Order No.", "Line No.");
        END;

        IF (OrderRec.Type = OrderRec.Type::"Negative Inventory Correction") AND
           ("Rental Type" IN ["Rental Type"::Sales,"Rental Type"::"Buy Back","Rental Type"::"Buy Back and Sales"])
        THEN BEGIN
          IF NOT ToLocRec.Depot THEN
            FIELDERROR("Rental Type", STRSUBSTNO(Text014, "Rental Type"))
          ELSE BEGIN
            lvLineFromLocRec.GET("From Location");
            IF NOT lvLineFromLocRec.Depot THEN
              FIELDERROR("Rental Type", STRSUBSTNO(Text015, "Rental Type"))
          END;
        END;

        IF "Rental Type" IN ["Rental Type"::"Buy Back","Rental Type"::"Buy Back and Sales"] THEN
          CheckOrigLocBlocked;
        CheckElement(Element);
        IF (OrderRec.Type <> OrderRec.Type::"Negative Inventory Correction") AND (ToLocRec."Employee No." <> '') THEN BEGIN
          TESTFIELD("To Employee No.", ToLocRec."Employee No.");
          TESTFIELD("To Employee Company", ToLocRec."Company Name");
        END;

        SETFILTER("Date Filter",'..%1',"Transfer Date");
        SETRANGE("Plant Group Filter", "From Plant Group");
        IF "Rental Type" IN ["Rental Type"::Rental,"Rental Type"::Sales] THEN BEGIN
          //OLD IF NOT Bulk OR NOT PlantSetup."Negative Bulk Stock" THEN BEGIN
          IF NOT CheckNegativeStockAllowed(lvToLocation) THEN BEGIN
            IF PlantSetup."Rate Codes" OR ("From Rate Code" <> '') THEN BEGIN
              CALCFIELDS("Stock Rate Code on From Loc.");
              IF Quantity > "Stock Rate Code on From Loc." THEN
                ERROR(Text011, "Plant Type", "No.", "From Rate Code");
            END ELSE BEGIN
              CALCFIELDS("Stock Plant No. on From Loc.");
              IF Quantity > "Stock Plant No. on From Loc." THEN
                ERROR(Text003, "Plant Type", "No.");
            END;
          END;
        END;
        IF (OrderRec.Type <> OrderRec.Type::"Negative Inventory Correction") THEN BEGIN
          IF NOT ExitSoldSBBOnLoc() THEN BEGIN  //DP00241.n (26972)
            IF (NOT PlantSetup."Rate Codes") THEN
              TESTFIELD("To Rate Code", '');
            IF (PlantSetup."Rate Codes") THEN BEGIN
              //IF "Rental Type" IN ["Rental Type"::Sales,"Rental Type"::"Buy Back and Sales"] THEN  //C001216.o
              IF ("Rental Type" IN ["Rental Type"::Sales,"Rental Type"::"Buy Back and Sales"]) AND
                 (NOT OrderRec.IsOtherTransferDepotToDepot)
              THEN  //C001216.n
                TESTFIELD("To Rate Code", '')
              ELSE BEGIN
                TESTFIELD("To Rate Code");
                PlantRateCodeRec.CheckPlantRateCode(lvToLocation, "To Rate Code", TRUE, '', 0);
              END;
            END;
          END;  //DP00241.n (26972)
        END;
        IF QtyZeroOnRemovalWithQtyReceive THEN
          EXIT;
        IF OrderRec."Advanced Removal" AND ("Rental Type" = "Rental Type"::Rental) AND
          (("Quantity Inventory" <> 0) OR ("Quantity Damaged" <> 0) OR ("Quantity Exit" <> 0))
        THEN BEGIN
          IF OrderLineRec."Quantity Inventory" <> 0 THEN
            ManageInventory(lvToLocation, "Quantity Inventory");
          IF OrderLineRec."Quantity Damaged" <> 0 THEN BEGIN
            OrderRec.TESTFIELD("To Location Repair");
            ManageInventory(OrderRec."To Location Repair", "Quantity Damaged");
          END;
          IF OrderLineRec."Quantity Exit" <> 0 THEN BEGIN
            OrderRec.TESTFIELD("To Location Exit");
            ManageInventory(OrderRec."To Location Exit", "Quantity Exit");
          END;
        END ELSE
          ManageInventory(lvToLocation, Quantity);

        IF ("Plant Type" <> '' ) AND ("No." > '0') AND (OrderRec.Type = OrderRec.Type::Arrival) THEN BEGIN
          InspectionRec.RESET;
          InspectionRec.SETCURRENTKEY("Plant Type","Plant No.","Inspect before");
          InspectionRec.SETRANGE("Plant Type","Plant Type");
          InspectionRec.SETRANGE("Plant No.","No.");
          InspectionRec.SETRANGE("Inspection Result",InspectionRec."Inspection Result"::" ");

          PlantInspecTypeRec.RESET;
          PlantInspecTypeRec.SETRANGE("Plant Type", "Plant Type");
          IF PlantInspecTypeRec.FINDSET THEN BEGIN
            REPEAT
              IF InspecTypeRec.GET(PlantInspecTypeRec."Inspection Type") THEN BEGIN
                //IF InspecTypeRec."Aut. Approval for Shipment" AND (FORMAT(InspecTypeRec."Time Limit Warning") <> '') THEN BEGIN  //DP00614.o
                IF InspecTypeRec."Aut. Approval for Shipment" AND (FORMAT(InspecTypeRec."Time Limit Warning") <> '') AND
                   (InspecTypeRec."Inspection Based on" <> InspecTypeRec."Inspection Based on"::Quantity)
                THEN BEGIN  //DP00614.n
                  InspectionRec.SETRANGE("Inspection Type",InspecTypeRec.Code);
                  InspectionRec.SETFILTER("Date Filter",'%1..',CALCDATE(InspecTypeRec."Time Limit Warning","Transfer Date"));
                  InspectionRec.SETRANGE("Plant to Inspect",TRUE);
                  IF InspectionRec.FINDFIRST THEN BEGIN
                    InspectionRec."Inspected on" := "Transfer Date";
                    InspectionRec."Inspection Result" := InspectionRec."Inspection Result"::Approved;
                    InspectionRec.Comment := Text008;
                    InspectionRec.MODIFY(FALSE);  //* False!
                    InspectionRec.CreateNewInspections;
                  END;
                END;
              END;
            UNTIL PlantInspecTypeRec.NEXT = 0;
          END;
        END;
      END;
    END;

    PROCEDURE CheckNegativeStockAllowed@1100485002(ToLocation@1210190000 : Code[20]) : Boolean;
    VAR
      lvFromLocRec@1100485000 : Record 11012554;
    BEGIN
      WITH OrderLineRec DO BEGIN
        IF (NOT Bulk) OR ("No." <> '0') THEN  //* Bij uniek materieel en bij bulk materieel met volgnr.(extern mat.)
          EXIT(FALSE);                        //* geen neg. voorraad toegestaan. Alleen voor bulk met volgnr. '0'.
      //* 31-05-2006 Geen neg. voorraad toestaan bij (extern) bulk mat. met volgnr. nu ook van belang voor VJP en
      //* ophalen inhuurposten (bij inkoopfact.). Dat nu op basis van materieelvoorraad-tabel waar alleen records
      //* met aantal groter dan nul worden gelezen. Anders worden er daar teveel geteld.

        //*26721.sn
        IF (OrderRec.Type = OrderRec.Type::"Negative Inventory Correction") OR
           ((OrderRec.Type = OrderRec.Type::"Other Transfers") AND ("From Location" = ToLocation))
        THEN
          EXIT(FALSE);
        //*26721.en

        //*24451.o
        //IF NOT PlantSetup."Negative Bulk Stock" THEN BEGIN
        //  IF NOT PlantSetup."Negative Bulk Stock Depot" THEN
        //    EXIT(FALSE);
        //  lvFromLocRec.GET("From Location");
        //  IF NOT lvFromLocRec.Depot THEN
        //    EXIT(FALSE);
        //END;
        //EXIT(TRUE);

        //*24451.n
        IF PlantSetup."Negative Bulk Stock Location" OR PlantSetup."Negative Bulk Stock Depot" THEN BEGIN
          lvFromLocRec.GET("From Location");
          IF lvFromLocRec.Depot THEN
            EXIT(PlantSetup."Negative Bulk Stock Depot")
          ELSE
            EXIT(PlantSetup."Negative Bulk Stock Location");
        END;
        EXIT(FALSE);
      END;
    END;

    PROCEDURE ManageInventory@1210190000(ToLocation@1210190000 : Code[20];Quant@1210190001 : Decimal);
    VAR
      OrderType@1210190002 : 'Receipt,Plant Order,Exit Order';
      ToRateCode@1100529000 : Code[10];
      ExpectedReturnDepot@1100529001 : Code[20];
    BEGIN
      WITH OrderLineRec DO BEGIN
        ToRateCode := "To Rate Code";
        IF OrderRec."Receipt Registration (TR)" THEN  //DP01147
          ToRateCode := "Mobilization Rate Code";
        IF NOT ExitSoldSBBOnLoc() THEN BEGIN  //DP00241.n (26972)
          ExpectedReturnDepot := GetExpectedReturnDepot(OrderRec, OrderLineRec);
          InventoryMngmnt.SetPlantGroup("From Plant Group", "To Plant Group", OrderRec.Type = OrderRec.Type::Removal);
          IF NOT InventoryMngmnt.PostInventory(
            OrderType::"Plant Order","Plant Order No.","Line No.","From Location",
            ToLocation,"Plant Type","No.","Transfer Date",Quant,
            (OrderRec.Type= OrderRec.Type::"Negative Inventory Correction"),"Rental Type",
            "From Rate Code",ToRateCode,"To Employee No.","To Employee Company", "Original Arrival Order No.",
            "Sales Order Line No.", ExpectedReturnDepot)
          THEN BEGIN
            IF (NOT PlantSetup."Rate Codes") AND ("From Rate Code" = '') THEN
              ERROR(Text004,"Plant Type","No.","Transfer Date")
            ELSE
              ERROR(Text010,"Plant Type","No.","Transfer Date","From Rate Code");
          END;
        //DP00241.sn (26972)
        END ELSE BEGIN
          OrderLineRec."Buy Back Rate" := 0;
          InventoryMngmnt.SetPlantGroup("From Plant Group", "To Plant Group", OrderRec.Type = OrderRec.Type::Removal);
          IF NOT InventoryMngmnt.PostExitSoldSBBOnLocation(
            OrderType::"Plant Order","Plant Order No.","Line No.","From Location",
            "Plant Type","No.","Transfer Date",Quant, "Rental Type", "From Rate Code")
          THEN BEGIN
            IF (NOT PlantSetup."Rate Codes") AND ("From Rate Code" = '') THEN
              ERROR(Text004,"Plant Type","No.","Transfer Date")
            ELSE
              ERROR(Text010,"Plant Type","No.","Transfer Date","From Rate Code");
          END;
        END;
        //DP00241.en (26972)
      END;
    END;

    PROCEDURE CheckLineCost@4();
    BEGIN
      WITH CostRec DO BEGIN
        TESTFIELD("No.");
        CALCFIELDS(Bulk);
        IF Type = Type::Damage THEN BEGIN
          TESTFIELD("Plant Type");
          IF NOT Bulk THEN
            TESTFIELD("Plant No.");
        END;
        TESTFIELD(Quantity);
        IF ("Vendor No." <> '') AND ("Purchase Order No." = '') THEN
          FIELDERROR("Vendor No.", STRSUBSTNO(Text016, "Vendor No."));
        TESTFIELD(Description);  //*33268
        CheckElement(Element);
      END;
    END;

    PROCEDURE CheckOrigLocBlocked@2();
    BEGIN
      IF BlockingOrigLocChecked THEN
        EXIT;

      OrderRec.CheckBlock(OrderRec."From Location",TRUE);
      BlockingOrigLocChecked := TRUE;
    END;

    PROCEDURE CheckAdvancedRemovalOnReleasPO@1100485005(IPlantOrderRec@1100485000 : Record 11012556);
    BEGIN
      OrderRec := IPlantOrderRec;

      PlantSetup.GET;
      CheckAdvancedRemoval;
    END;

    PROCEDURE CheckAdvancedRemoval@1210190001();
    VAR
      lExitOrder@1210190001 : Record 11012559;
    BEGIN
      IF NOT OrderRec."Advanced Removal" THEN
        EXIT;

      WITH OrderLineRec DO BEGIN
        RESET;
        SETRANGE("Plant Order No.", OrderRec."No.");
        SETRANGE(Type,Type::Plant);
        SETRANGE("Rental Type", "Rental Type"::Rental);
        IF FINDSET THEN
          REPEAT
            IF PlantSetup."Split Mandatory For Adv. Rem." OR
               (("Quantity Inventory" <> 0) OR ("Quantity Damaged" <> 0) OR ("Quantity Exit" <> 0))
            THEN BEGIN

              IF Quantity <> ("Quantity Inventory" + "Quantity Damaged" + "Quantity Exit") THEN
                ERROR(
                  Text005, FIELDCAPTION(Quantity), FIELDCAPTION("Quantity Inventory"),
                  FIELDCAPTION("Quantity Damaged"), FIELDCAPTION("Quantity Exit"), FIELDCAPTION("Line No."), "Line No.");

              IF PlantSetup."Check Posting Advanced Removal" AND (NOT gTransportOrderRun) THEN BEGIN
                //* Not needed in transport-run, is already done during 'Release Plant Order'

                IF "Quantity Damaged" <> 0 THEN BEGIN
                  CostRec.SETRANGE("Plant Order No.", OrderRec."No.");
                  CostRec.SETRANGE("Plant Type", "Plant Type");
                  IF ("No." <> '') AND ("No." <> '0') THEN
                    CostRec.SETRANGE("Plant No.", "No.")
                  ELSE
                    CostRec.SETRANGE("Plant No.", '');
                  CostRec.SETRANGE(Type, CostRec.Type::Damage);
                  IF (NOT CostRec.FINDFIRST) AND GUIALLOWED THEN
                    IF NOT CONFIRM(Text006, FALSE, CostRec.TABLECAPTION, "Plant Type", "No.") THEN
                      ERROR(Text007);
                END;

                //DP00183.so
                //IF "Quantity Exit" <> 0 THEN BEGIN
                //  //IF NOT lExitOrder.GET(OrderRec."No.") THEN BEGIN  //*C-026307.o
                //  IF NOT lExitOrder.GET(OrderRec."Exit Order No.") OR (OrderRec."Exit Order No." = '') THEN BEGIN  //*C-026307.n
                //    IF NOT CONFIRM(Text006, FALSE, lExitOrder.TABLECAPTION, "Plant Type", "No.") THEN
                //      ERROR(Text007);
                //  END ELSE BEGIN
                //    //lExitOrderLine.SETRANGE("Exit-order No.", OrderRec."No.");  //*C-026307.o
                //    lExitOrderLine.SETRANGE("Exit-order No.", OrderRec."Exit Order No.");  //*C-026307.n
                //    lExitOrderLine.SETRANGE("Plant Type", "Plant Type");
                //    lExitOrderLine.SETRANGE("No.", "No.");
                //    lExitOrderLine.SETRANGE(Type, lExitOrderLine.Type::Plant);
                //    IF NOT lExitOrderLine.FINDFIRST THEN
                //      IF NOT CONFIRM(Text006, FALSE, lExitOrderLine.TABLECAPTION, "Plant Type", "No.") THEN
                //        ERROR(Text007);
                //  END;
                //END;
                //DP00183.eo
                //DP00183.sn
                IF ("Quantity Exit" <> 0) AND ("Exit Order No." = '') AND GUIALLOWED THEN BEGIN
                  IF NOT CONFIRM(Text009, FALSE, lExitOrder.TABLECAPTION, "Plant Type", "No.") THEN
                    ERROR(Text007);
                END;
                //DP00183.en
              END;
            END;
        UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE CheckDamageCostPresent@1100529000(PlantOrder@1100529000 : Record 11012556);
    VAR
      PlantOrderLine@1100529001 : Record 11012557;
      PlantOrderCostLine@1100529002 : Record 11012558;
      CounterPOLine@1100529003 : Integer;
      CounterNotPresent@1100529004 : Integer;
    BEGIN
      //DP00241 (C004697)
      IF (PlantOrder.Type <> PlantOrder.Type::Removal) OR (NOT PlantOrder."Advanced Removal") THEN
        EXIT;

      PlantOrderLine.SETRANGE("Plant Order No.", PlantOrder."No.");
      PlantOrderLine.SETRANGE(Type, PlantOrderLine.Type::Plant);
      PlantOrderLine.SETFILTER("Quantity Damaged", '<>%1', 0);
      IF PlantOrderLine.FINDSET THEN BEGIN
        PlantOrderCostLine.SETRANGE("Plant Order No.", PlantOrder."No.");
        REPEAT
          PlantOrderCostLine.SETRANGE("Plant Order Line No.", PlantOrderLine."Line No.");
          PlantOrderCostLine.SETRANGE(Type, PlantOrderCostLine.Type::Damage);
          IF PlantOrderCostLine.ISEMPTY THEN
            CounterNotPresent := CounterNotPresent + 1;
          CounterPOLine := CounterPOLine + 1;
        UNTIL PlantOrderLine.NEXT = 0;
        IF (CounterNotPresent > 0) AND GUIALLOWED THEN BEGIN
          IF NOT CONFIRM(Text021, FALSE , CounterNotPresent, CounterPOLine) THEN
            ERROR('');
        END;
      END;
    END;

    LOCAL PROCEDURE PostOrderItemLine@1100485004();
    VAR
      Location@1100529000 : Record 14;
      DimMgt@1100409000 : Codeunit 408;
      lvPlantOrderItemBuyBack@1100485001 : Boolean;
      lvDebitCreditFactor@1100485000 : Integer;
    BEGIN
      WITH OrderLineRec DO BEGIN
        TESTFIELD("Item No.");
        TESTFIELD(Quantity);
        TESTFIELD(Description);  //*33268
        //*DP00183.sn
        //TESTFIELD("Location Code");  //* Mandatory for OtherTransfer(D-D), but also for Arrival+Removal(?)  //C006443.o
        IF OrderRec.Type = OrderRec.Type::"Other Transfers" THEN BEGIN //Is always Depot->Depot (checked before calling function)
          TESTFIELD("Location Code");  //C006443.n  Always mandatory for OtherTransfer(D-D)
          TESTFIELD("New Location Code");
          Location.GET("New Location Code");
          IF Location."Bin Mandatory" THEN
            TESTFIELD("New Bin Code");
          OrderLineRec.CheckErrorOrResetNewLocationBin(0);  //Error mode
          IF Quantity < 0 THEN
            FIELDERROR(Quantity);
        END ELSE BEGIN
          IF "Resource Request Item Line Typ" <> "Resource Request Item Line Typ"::CostObject THEN BEGIN
            IF InventSetup."Location Mandatory" THEN  //C006443.n
              TESTFIELD("Location Code");             //C006443.n  For Arrival+Removal, mandatory depending on setup
            IF "Location Code" = '' THEN
              TESTFIELD("Bin Code", '')
            ELSE BEGIN
              Location.GET("Location Code");
              IF Location."Bin Mandatory" THEN
                TESTFIELD("Bin Code");
            END;
          END;
        END;
        CheckElement(Element);
        //*DP00183.en
        ItemRec.GET("Item No.");
        IF "Resource Request Item Line Typ" = "Resource Request Item Line Typ"::CostObject THEN
          EXIT;

        IF (OrderRec.Type = OrderRec.Type::Removal) AND ItemRec."Sales/Buy-Back Item (Plant)" THEN
          lvPlantOrderItemBuyBack := TRUE;

        IF OrderLineRec.ExitSoldSBBOnLoc() THEN  //DP00485 call 26972
          EXIT;

        ItemJnlLineRec.INIT;
        ItemJnlLineRec."Source Code" := PlantSetup."Source Code Item Delivery";
        ItemJnlLineRec."Line No." := "Line No.";
        ItemJnlLineRec."Document No." := "Plant Order No.";
        ItemJnlLineRec."Document Date" := TODAY;
        ItemJnlLineRec."Posting Date" := OrderRec."Transfer Date";
        IF OrderRec.Type <> OrderRec.Type::"Other Transfers" THEN BEGIN  //*DP00183.n
          IF OrderRec.Type <> OrderRec.Type::Removal THEN BEGIN
            lvDebitCreditFactor := 1;
            ItemJnlLineRec."Gen. Bus. Posting Group" := ToLocRec."Gen. Bus. Posting Group";
            ItemJnlLineRec."Source No." := ToLocRec."Customer No.";
            IF ToLocRec."Customer No." <> '' THEN
              ItemJnlLineRec."Source Type" := ItemJnlLineRec."Source Type"::Customer;
          END ELSE BEGIN
            lvDebitCreditFactor := -1;
            ItemJnlLineRec."Gen. Bus. Posting Group" := FromLocRec."Gen. Bus. Posting Group";
            ItemJnlLineRec."Source No." := FromLocRec."Customer No.";
            IF FromLocRec."Customer No." <> '' THEN
              ItemJnlLineRec."Source Type" := ItemJnlLineRec."Source Type"::Customer;
          END;
          ItemJnlLineRec."Entry Type" := ItemJnlLineRec."Entry Type"::Sale;
          IF lvPlantOrderItemBuyBack THEN BEGIN
            ItemJnlLineRec."Entry Type" := ItemJnlLineRec."Entry Type"::Purchase;
            lvDebitCreditFactor := 1;  //* Soort 'Inkoop', dus niet -1
          END;
        //*DP00183.sn
        END ELSE BEGIN
          lvDebitCreditFactor := 1;
          ItemJnlLineRec."Entry Type" := ItemJnlLineRec."Entry Type"::Transfer;
          ItemJnlLineRec."New Location Code" := "New Location Code";
          ItemJnlLineRec."New Bin Code" := "New Bin Code";
        END;
        //*DP00183.en
        ItemJnlLineRec."Location Code" := "Location Code";
        ItemJnlLineRec."Bin Code" := "Bin Code";
        ItemJnlLineRec."Item No." := "Item No.";
        ItemJnlLineRec.VALIDATE("Item No.");
        ItemJnlLineRec."Variant Code" := "Variant Code";
        ItemJnlLineRec.VALIDATE("Unit of Measure Code","Unit of Measure");
        ItemJnlLineRec.VALIDATE(Quantity, (Quantity * lvDebitCreditFactor));
        ItemJnlLineRec.VALIDATE("Unit Amount", "Sales Rate");
        ItemJnlLineRec.Description := Description;
        ItemJnlLineRec."Country/Region Code" := ToLocRec."Country/Region Code"; //hs
        ItemJnlLineRec."Country/Region of Origin/Dest." := FromLocRec."Country/Region Code";
        IF ItemJnlLineRec."Shortcut Dimension 1 Code" <> ItemRec."Global Dimension 1 Code" THEN BEGIN
          ItemJnlLineRec."Shortcut Dimension 1 Code" := ItemRec."Global Dimension 1 Code";
          DimMgt.ValidateShortcutDimValues(1,ItemJnlLineRec."Shortcut Dimension 1 Code",ItemJnlLineRec."Dimension Set ID");  //DP000387 n
        END;
        IF ItemJnlLineRec."Shortcut Dimension 2 Code" <> ItemRec."Global Dimension 2 Code" THEN BEGIN
          ItemJnlLineRec."Shortcut Dimension 2 Code" := ItemRec."Global Dimension 2 Code";
          DimMgt.ValidateShortcutDimValues(2,ItemJnlLineRec."Shortcut Dimension 2 Code",ItemJnlLineRec."Dimension Set ID");  //DP000387 n
        END;

        //* 21-10-2008  Melding 13088: Ook de rest van de artikeldimensies opvoeren
        // DIMENSION SET FIXED: Already done on Validate Item
        //lvDefaultDimRec.SETRANGE("Table ID", DATABASE::Item);
        //lvDefaultDimRec.SETRANGE("No.", "Item No.");
        //lvDefaultDimRec.SETFILTER("Dimension Value Code", '<>%1', '');
        //lvDefaultDimRec.SETFILTER("Value Posting", '<>%1', lvDefaultDimRec."Value Posting"::"No Code");
        //IF lvDefaultDimRec.FINDSET(FALSE,FALSE) THEN BEGIN
        //  REPEAT
        //    IF (lvDefaultDimRec."Dimension Code" <> GLSetupRec."Global Dimension 1 Code") AND
        //       (lvDefaultDimRec."Dimension Code" <> GLSetupRec."Global Dimension 2 Code")
        //    THEN
        //      InsertTmpJnlLineDim(lvDefaultDimRec."Dimension Code", lvDefaultDimRec."Dimension Value Code");
        //  UNTIL lvDefaultDimRec.NEXT = 0;
        //END;
        ItemJnlPostLineCU.SetPlantOrderBuyBackItem(lvPlantOrderItemBuyBack);
        ItemJnlPostLineCU.RunWithCheck(ItemJnlLineRec);
        ItemJnlPostLineCU.SetPlantOrderBuyBackItem(FALSE);
        PostWarehouseJnlLine(ItemJnlLineRec);
        PostProjectInventory(ItemJnlLineRec);
      END;
    END;

    LOCAL PROCEDURE PostWarehouseJnlLine@1100529006(ItemJnlLine@1100529000 : Record 83);
    VAR
      Location@1100529001 : Record 14;
      ItemJnlTemplate@1100529003 : Record 82;
      WhseJnlLine@1100529002 : Record 7311;
      WMSMgt@1100529004 : Codeunit 7302;
      WhseJnlPostLine@1100529005 : Codeunit 7301;
    BEGIN
      IF ItemJnlLine."Bin Code" <> '' THEN BEGIN
        Location.GET(ItemJnlLine."Location Code");
        IF Location."Bin Mandatory" THEN BEGIN
          IF WMSMgt.CreateWhseJnlLine(ItemJnlLine, ItemJnlTemplate.Type::Item, WhseJnlLine, FALSE) THEN BEGIN
            WhseJnlLine."Source No." := ItemJnlLineRec."Document No.";
            WMSMgt.CheckWhseJnlLine(WhseJnlLine, 1, 0, FALSE);
            WhseJnlPostLine.RUN(WhseJnlLine);
          END;
        END;
      END;
      IF (ItemJnlLine."Entry Type" = ItemJnlLine."Entry Type"::Transfer) AND (ItemJnlLine."New Bin Code" <> '') THEN BEGIN
        Location.GET(ItemJnlLine."New Location Code");
        IF Location."Bin Mandatory" THEN BEGIN
          IF WMSMgt.CreateWhseJnlLine(ItemJnlLine, ItemJnlTemplate.Type::Item, WhseJnlLine, TRUE) THEN BEGIN
            WhseJnlLine."Source No." := ItemJnlLineRec."Document No.";
            WMSMgt.CheckWhseJnlLine(WhseJnlLine, 1, 0, TRUE);
            WhseJnlPostLine.RUN(WhseJnlLine);
          END;
        END;
      END;
    END;

    PROCEDURE CreateAndPostPurchOrders@1100485003(VAR PlantOrderItemLine@1100485000 : Record 11012557);
    VAR
      PurchHeader@1100485001 : Record 38;
      PurchLine@1100485002 : Record 39;
      SKU@1100485005 : Record 5700;
      NewLineNo@1100485003 : Integer;
    BEGIN
      IF NOT (OrderRec.Type IN [OrderRec.Type::Arrival, OrderRec.Type::Removal]) THEN
        EXIT;

      TempPurchHeader.DELETEALL;

      PlantOrderItemLine.RESET;
      PlantOrderItemLine.SETRANGE("Plant Order No.", OrderRec."No.");
      PlantOrderItemLine.SETRANGE(Type, PlantOrderItemLine.Type::Item);
      IF PlantOrderItemLine.FINDSET THEN
        REPEAT
          IF SKU.GET(PlantOrderItemLine."Location Code", PlantOrderItemLine."Item No.", '') THEN
            IF SKU.Consignment THEN BEGIN
              TempPurchHeader.SETRANGE("Buy-from Vendor No.", SKU."Vendor No.");
              IF NOT TempPurchHeader.FINDFIRST THEN BEGIN
                PurchHeader."Document Type" := PurchHeader."Document Type"::Order;
                PurchHeader.INSERT(TRUE);
                PurchHeader.VALIDATE("Buy-from Vendor No.", SKU."Vendor No.");
                PurchHeader.VALIDATE("Location Code", PlantOrderItemLine."Location Code");
                PurchHeader.VALIDATE("Order Date", OrderRec."Transfer Date");
                PurchHeader.VALIDATE("Posting Date", OrderRec."Transfer Date");
                PurchHeader."Amounts only" := TRUE;
                PurchHeader.MODIFY;

                TempPurchHeader := PurchHeader;
                TempPurchHeader.INSERT;
              END;

              NewLineNo := 10000;
              PurchLine.SETRANGE("Document Type", TempPurchHeader."Document Type");
              PurchLine.SETRANGE("Document No.", TempPurchHeader."No.");
              IF PurchLine.FINDLAST THEN
                NewLineNo += PurchLine."Line No.";

              PurchLine.INIT;
              PurchLine."Document Type" := TempPurchHeader."Document Type";
              PurchLine."Document No." := TempPurchHeader."No.";
              PurchLine."Line No." := NewLineNo;
              PurchLine.Type := PurchLine.Type::Item;

              PurchLine."Order Date" := OrderRec."Transfer Date";
              PurchLine.VALIDATE("No.", PlantOrderItemLine."Item No.");
              PurchLine.VALIDATE("Location Code", PlantOrderItemLine."Location Code");
              //Direct Unit Cost will be filled by validating item no. and Location Code
              PurchLine.VALIDATE("Direct Unit Cost", PurchLine."Direct Unit Cost" * PlantOrderItemLine.Quantity);
              PurchLine."Amnt. to Receive" := PurchLine."Outst. Amount exc. VAT";
              PurchLine.INSERT(TRUE);
            END;
        UNTIL PlantOrderItemLine.NEXT = 0;

      TempPurchHeader.RESET;
      IF TempPurchHeader.FINDSET THEN
        REPEAT
          TempPurchHeader.Receive := TRUE;
          TempPurchHeader.Invoice := FALSE;
          PurchHeader := TempPurchHeader;
          CODEUNIT.RUN(CODEUNIT::"Purch.-Post", PurchHeader);
        UNTIL TempPurchHeader.NEXT = 0;
    END;

    PROCEDURE CheckSetTransportOrderToSended@1100525000();
    VAR
      lvTransPlantOrderRec@1100525000 : Record 11020509;
      lvTransPlantOrderRec2@1100525003 : Record 11020509;
      lvTransOrderRec@1100525001 : Record 11020505;
      lvTransOrderCU@1100525002 : Codeunit 11020501;
      lvTOStatusFrom@1100525004 : Option;
    BEGIN
      //* When the last removal-plantorder of a transportorder is posted then the transportorder
      //* will be set to 'Sended'. This depending on a plantsetup.
      //* Note: A plantorder can be present on more than one transportorder.

      IF (OrderRec.Type <> OrderRec.Type::Removal) OR gTransportOrderRun OR (NOT PlantSetup."Transport Orders") THEN
        EXIT;

      CASE PlantSetup."TO Sended On Post Last Remo.PO" OF
        PlantSetup."TO Sended On Post Last Remo.PO"::Open:     lvTOStatusFrom := lvTransOrderRec.Status::Open;
        PlantSetup."TO Sended On Post Last Remo.PO"::Printed:  lvTOStatusFrom := lvTransOrderRec.Status::Printed;
        PlantSetup."TO Sended On Post Last Remo.PO"::Released: lvTOStatusFrom := lvTransOrderRec.Status::Released;
        ELSE
          EXIT;
      END;

      lvTransPlantOrderRec.SETCURRENTKEY("Plant Order No.", "Transport Order No.");
      lvTransPlantOrderRec.SETRANGE("Plant Order No.", OrderRec."No.");
      IF lvTransPlantOrderRec.FINDSET(FALSE, FALSE) THEN BEGIN
        REPEAT
          IF lvTransOrderRec.GET(lvTransPlantOrderRec."Transport Order No.") THEN BEGIN
            IF (lvTransOrderRec.Status >= lvTOStatusFrom) AND
               (lvTransOrderRec.Status < lvTransOrderRec.Status::"PO Posted")
            THEN BEGIN
              lvTransPlantOrderRec2.SETRANGE("Transport Order No.", lvTransPlantOrderRec."Transport Order No.");
              lvTransPlantOrderRec2.SETFILTER("Status (PO)", '<>%1', lvTransPlantOrderRec."Status (PO)"::Posted);
              IF NOT lvTransPlantOrderRec2.FINDFIRST THEN BEGIN  //* If all PO's of the TO are posted
                IF NOT lvTransOrderCU.CheckTransOrderCommon(lvTransOrderRec, FALSE) THEN BEGIN
                  IF GUIALLOWED THEN
                    MESSAGE(Text017, lvTransOrderRec."No.");
                END ELSE BEGIN
                  lvTransOrderRec.Status:= lvTransOrderRec.Status::"PO Posted";
                  lvTransOrderRec.MODIFY;
                END;
              END;
            END;
          END;
        UNTIL lvTransPlantOrderRec.NEXT = 0;
      END;
    END;

    PROCEDURE CheckElementMandatory@1100525001(PlantOrder@1100525000 : Record 11012556);
    VAR
      PlantLoc@1100525001 : Record 11012554;
      Proj@1100525002 : Record 11072003;
      POLine@1100525003 : Record 11012557;
      CostLine@1100525004 : Record 11012558;
      POLine2@1100525005 : Record 11012557;
    BEGIN
      //* Function is also used in Release Plant Order (C11020503). See also OnValidate/OnLookup of field Element in the 3 tables.
      IF PlantOrder.Type = PlantOrder.Type::"Negative Inventory Correction" THEN
        EXIT;

      PlantSetup.GET;
      IF NOT PlantSetup."Plant - Element Mandatory" THEN
        EXIT;

      IF PlantOrder.Type <> PlantOrder.Type::Removal THEN
        PlantLoc.Code := PlantOrder."To Location"
      ELSE
        PlantLoc.Code := PlantOrder."From Location";
      IF PlantLoc.Code = '' THEN
        EXIT;
      IF NOT PlantLoc.GET(PlantLoc.Code) THEN
        EXIT;
      IF (PlantLoc."Project No." = '') OR (PlantLoc.Element <> '') THEN
        EXIT;
      IF PlantLoc."Company Name" <> '' THEN
        Proj.CHANGECOMPANY(PlantLoc."Company Name");
      IF NOT Proj.GET(PlantLoc."Project No.") THEN
        EXIT;
      IF NOT Proj."Posting Element Mandatory" THEN
        EXIT;

      POLine.SETRANGE("Plant Order No.", PlantOrder."No.");
      POLine.SETRANGE(Type, POLine.Type::Plant);
      POLine.SETRANGE(Element, '');
      IF (PlantOrder.Type = PlantOrder.Type::Removal) THEN
        POLine.SETRANGE("Rental Type", POLine."Rental Type"::"Buy Back");
      IF POLine.FINDFIRST THEN
        POLine.TESTFIELD(Element);

      CostLine.SETRANGE("Plant Order No.", PlantOrder."No.");
      CostLine.SETFILTER(Type, '<>%1', CostLine.Type::Text);
      CostLine.SETRANGE(Element, '');
      IF CostLine.FINDFIRST THEN
        CostLine.TESTFIELD(Element);

      IF PlantOrder.Type = PlantOrder.Type::"Other Transfers" THEN  //* Items only allowed on Arrival/Removal PO's
        EXIT;
      POLine2.SETRANGE("Plant Order No.", PlantOrder."No.");
      POLine2.SETRANGE(Type, POLine2.Type::Item);
      POLine2.SETRANGE(Element, '');
      IF POLine2.FINDFIRST THEN
        POLine2.TESTFIELD(Element);
    END;

    LOCAL PROCEDURE CheckElement@1100525003(Element@1100525000 : Code[20]);
    VAR
      PlantElementMgt@1100525001 : Codeunit 11012582;
    BEGIN
      IF Element <> '' THEN BEGIN
        IF (OrderRec.Type = OrderRec.Type::Removal) THEN
          PlantElementMgt.OnValidateElement(OrderRec."From Location" , Element, '', FALSE)
        ELSE
          PlantElementMgt.OnValidateElement(OrderRec."To Location" , Element, '', TRUE);
      END;
    END;

    PROCEDURE SetChargePurchRun@1100409002();
    BEGIN
      //C001519
      gChargePurchRun := TRUE;
    END;

    PROCEDURE CheckPOBlockedForPosting@1100409000(PlantOrder@1100409000 : Record 11012556);
    VAR
      PlantBlockCode@1100409001 : Record 11229879;
    BEGIN
      //C006416
      IF PlantOrder."Block Code" <> '' THEN BEGIN
        IF PlantBlockCode.GET(PlantOrder."Block Code") THEN BEGIN
          IF PlantBlockCode."Block Plant Order" IN
            [PlantBlockCode."Block Plant Order"::Post, PlantBlockCode."Block Plant Order"::Both]
          THEN
            ERROR(Text022, PlantOrder.TABLECAPTION, PlantOrder."No.",
              PlantOrder.FIELDCAPTION("Block Code"), PlantOrder."Block Code", PlantBlockCode.Description);
        END;
      END;
    END;

    PROCEDURE CheckReceiptRegistration@1100529001(PlantOrder@1100529000 : Record 11012556);
    VAR
      PlantOrderLine@1100529001 : Record 11012557;
      RateCode@1100529002 : Record 11020502;
    BEGIN
      //DP01147
      IF PlantOrder."Receipt Registration (TR)" THEN BEGIN
        IF NOT PlantOrder.ReceiptRegistrationTransportAllowed(FALSE) THEN
          PlantOrder.TESTFIELD("Receipt Registration (TR)", FALSE);
        PlantOrderLine.SETRANGE("Plant Order No.",PlantOrder."No.");
        PlantOrderLine.SETRANGE(Type, PlantOrderLine.Type::Plant);
        PlantOrderLine.SETRANGE("Rental Type", PlantOrderLine."Rental Type"::Rental);
        IF PlantOrderLine.FINDSET THEN BEGIN
          REPEAT
            PlantOrderLine.TESTFIELD("Mobilization Rate Code");
            // Transport Rate Code must exist with type 'Transport' and To Rate Code may not be of type 'Transport'
            RateCode.SETRANGE(Mobilization, TRUE);
            IF NOT RateCode.CheckPlantRateCode(PlantOrder."To Location",PlantOrderLine."Mobilization Rate Code",FALSE,'',2) THEN
              PlantOrderLine.FIELDERROR("Mobilization Rate Code", STRSUBSTNO(Text023, PlantOrderLine."Mobilization Rate Code", RateCode.FIELDCAPTION(Mobilization)));
            IF RateCode.CheckPlantRateCode(PlantOrder."To Location",PlantOrderLine."To Rate Code",FALSE,'',2) THEN
              PlantOrderLine.FIELDERROR("To Rate Code", STRSUBSTNO(Text024, PlantOrderLine."To Rate Code", RateCode.FIELDCAPTION(Mobilization)));
          UNTIL PlantOrderLine.NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE CreatePlantOrderReceipt@1100529002(PlantOrder@1100529000 : Record 11012556;PlantOrderLine@1100529001 : Record 11012557);
    VAR
      PlantOrderReceipt@1100529002 : Record 11020492;
    BEGIN
      //DP01147
      IF NOT PlantOrder."Receipt Registration (TR)" THEN
        EXIT;
      IF NOT (PlantOrderLine.Type IN [PlantOrderLine.Type::Plant, PlantOrderLine.Type::Item]) THEN
        EXIT;
      IF NOT PlantOrderReceipt.GET(PlantOrder."No.") THEN
        CreatePlantOrderReceiptHeader(PlantOrder);
      CreatePlantOrderReceiptLine(PlantOrderLine);
    END;

    LOCAL PROCEDURE CreatePlantOrderReceiptHeader@1100529004(PlantOrder@1100529000 : Record 11012556);
    VAR
      PlantOrderReceipt@1100529002 : Record 11020492;
    BEGIN
      PlantOrderReceipt.INIT;
      PlantOrderReceipt."Plant Order No." := PlantOrder."No.";
      PlantOrderReceipt.Type  := PlantOrder.Type;
      PlantOrderReceipt."Transfer Date" := PlantOrder."Transfer Date";
      PlantOrderReceipt."From Location" := PlantOrder."From Location";
      PlantOrderReceipt."To Location" := PlantOrder."To Location";
      PlantOrderReceipt.Status := PlantOrderReceipt.Status::Open;
      PlantOrderReceipt."Receipt Date" := 0D;
      PlantOrderReceipt.INSERT;
    END;

    LOCAL PROCEDURE CreatePlantOrderReceiptLine@1100529005(PlantOrderLine@1100529001 : Record 11012557);
    VAR
      PlantOrderReceiptLine@1100529002 : Record 11020493;
    BEGIN
      PlantOrderReceiptLine.INIT;
      PlantOrderReceiptLine."Plant Order No." :=  PlantOrderLine."Plant Order No.";
      PlantOrderReceiptLine."Plant Order Line No." := PlantOrderLine."Line No.";
      PlantOrderReceiptLine.Type := PlantOrderLine.Type;
      PlantOrderReceiptLine."Plant Type" := PlantOrderLine."Plant Type";
      PlantOrderReceiptLine."Plant No." := PlantOrderLine."No.";
      PlantOrderReceiptLine."Item No." := PlantOrderLine."Item No.";
      PlantOrderReceiptLine."Mobilization Rate Code" := PlantOrderLine."Mobilization Rate Code";
      PlantOrderReceiptLine.Quantity := PlantOrderLine.Quantity;
      PlantOrderReceiptLine."To Receive" := 0;
      PlantOrderReceiptLine."Unit of Measure" := PlantOrderLine."Unit of Measure";
      PlantOrderReceiptLine.INSERT;
    END;

    LOCAL PROCEDURE ReceiptPlantOrder@1100529003(PlantOrder@1100529000 : Record 11012556) : Boolean;
    VAR
      PlantOrderLine@1100529001 : Record 11012557;
    BEGIN
      IF (PlantOrder.Type = PlantOrder.Type::"Other Transfers") AND (PlantOrder."From Location" = PlantOrder."To Location") THEN BEGIN
        PlantOrderLine.SETRANGE("Plant Order No.", PlantOrder."No.");
        PlantOrderLine.SETRANGE(Type, PlantOrderLine.Type::Plant);
        PlantOrderLine.SETFILTER("Receipt No.", '<>%1', '');
        PlantOrderLine.SETFILTER("Receipt Line No.", '<>%1', 0);
        IF NOT PlantOrderLine.ISEMPTY THEN
          EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    PROCEDURE CheckMaxQuantityToRemove@1100527000(PlantOrder@1100527000 : Record 11012556);
    VAR
      PlantLocation@1100527001 : Record 11012554;
      PlantInventory@1100527002 : Record 11012555;
      PlantOrderLine@1100527004 : Record 11012557;
      LastPlantType@1100527003 : Code[20];
      ReturnQuantity@1100527005 : Decimal;
    BEGIN
      PlantLocation.GET(PlantOrder."From Location");

      PlantOrderLine.SETRANGE("Plant Order No.",PlantOrder."No.");
      IF PlantOrderLine.FINDSET THEN BEGIN
        REPEAT
          IF PlantOrderLine."Plant Type" <> LastPlantType THEN
            ReturnQuantity := PlantOrderLine.Quantity;
          LastPlantType := PlantOrderLine."Plant Type";

          PlantInventory.RESET;
          PlantInventory.SETRANGE(Removed,FALSE);
          PlantInventory.SETRANGE(Location,PlantOrder."From Location");
          PlantInventory.SETRANGE("Plant Type",PlantOrderLine."Plant Type");
          PlantInventory.CALCSUMS(Quantity);

          IF (ReturnQuantity > PlantInventory.Quantity) AND (NOT PlantLocation.Depot) THEN
            ERROR(Text025);
        UNTIL PlantOrderLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE PostProjectInventory@1100529600(ItemJournalLine@1100529600 : Record 83);
    VAR
      ProjectInventoryEntry@1100485001 : Record 11012670;
      ProjectInventoryPostLine@1100485000 : Codeunit 11012670;
    BEGIN
      IF OrderRec.Type = OrderRec.Type::"Other Transfers" THEN
        EXIT;
      IF (OrderLineRec.Type <> OrderLineRec.Type::Item) OR (NOT OrderLineRec."Project Stock") OR (OrderLineRec."Project No. (Inventory)" = '') THEN
        EXIT;
      IF NOT InventSetup.JobInventoryByStockRelease(OrderLineRec."Project No. (Inventory)") THEN
        EXIT;

      ProjectInventoryEntry.INIT;
      ProjectInventoryEntry."Document No." := ItemJournalLine."Document No.";
      ProjectInventoryEntry."Document Date" := ItemJournalLine."Document Date";
      ProjectInventoryEntry."Posting Date" := ItemJournalLine."Posting Date";
      ProjectInventoryEntry."Item No." := ItemJournalLine."Item No.";
      ProjectInventoryEntry."Variant Code" := ItemJournalLine."Variant Code";
      ProjectInventoryEntry.Description := ItemJournalLine.Description;
      ProjectInventoryEntry."Description 2" := ItemJournalLine."Description 2";
      ProjectInventoryEntry."Bin Code" := ItemJournalLine."Bin Code";
      ProjectInventoryEntry."Shelf No." := ItemJournalLine."Shelf No.";
      ProjectInventoryEntry.Quantity := ItemJournalLine.Quantity;
      IF ItemJournalLine."Entry Type" = ItemJournalLine."Entry Type"::Purchase THEN
        ProjectInventoryEntry.Quantity := - ProjectInventoryEntry.Quantity;
      ProjectInventoryEntry."Unit of Measure Code" := ItemJournalLine."Unit of Measure Code";
      ProjectInventoryEntry."Entry Type" := ProjectInventoryEntry."Entry Type"::StockReceipt;
      ProjectInventoryEntry."Cost Object" := ItemJournalLine."Shortcut Dimension 2 Code";
      ProjectInventoryEntry."Yard No." := ItemJournalLine."Yard No.";
      ProjectInventoryEntry."System No." := ItemJournalLine."System No.";
      ProjectInventoryEntry."Entity Type" := ItemJournalLine."Entity Type";
      ProjectInventoryEntry."Entity No." := ItemJournalLine."Entity No.";
      ProjectInventoryEntry."Gland Position" := ItemJournalLine."Cable Transit Pos.";
      ProjectInventoryEntry.Element := ItemJournalLine.Element;
      ProjectInventoryEntry."Plot No." := ItemJournalLine."Plot No.";
      ProjectInventoryEntry."Extension Contract" := ItemJournalLine."Extension Contract";

      ProjectInventoryEntry."Project No." := OrderLineRec."Project No. (Inventory)";
      IF InventSetup."Use Ship-to-Loc. Proj. Invt." AND (ItemJournalLine."Ship To Location" <> '') THEN
        ProjectInventoryEntry."Location Code" := ItemJournalLine."Ship To Location"
      ELSE
        ProjectInventoryEntry."Location Code" := ItemJournalLine."Location Code";
      IF OrderLineRec.Deliver <> OrderLineRec.Deliver::" " THEN BEGIN
        ProjectInventoryEntry.Deliver := OrderLineRec.Deliver;
        ProjectInventoryEntry."Ship To Location" := OrderLineRec."Ship To Location";
      END;

      ProjectInventoryPostLine.RunWithCheck(ProjectInventoryEntry);
    END;

    LOCAL PROCEDURE GetExpectedReturnDepot@1100529009(PlantOrder@1100529000 : Record 11012556;PlantOrderLine@1100529001 : Record 11012557) : Code[20];
    VAR
      PlantLocationFrom@1100529002 : Record 11012554;
      PlantLocationTo@1100529003 : Record 11012554;
      PlantInventory@1100529004 : Record 11012555;
    BEGIN
      CASE PlantOrder.Type OF
        PlantOrder.Type::Arrival:
          EXIT(PlantOrder."From Location");
        PlantOrder.Type::Removal:
          EXIT('');
        PlantOrder.Type::"Other Transfers":
          BEGIN
            PlantLocationTo.GET(PlantOrder."To Location");
            IF PlantLocationTo.Depot THEN
              EXIT('');
            PlantLocationFrom.GET(PlantOrder."From Location");
            IF PlantLocationFrom.Depot THEN
              EXIT(PlantOrder."From Location")
            ELSE BEGIN
              PlantInventory.SETCURRENTKEY(Removed, Location, "Plant Type", "Plant No.", "Rate Code", "Present from");
              PlantInventory.SETRANGE(Removed, FALSE);
              PlantInventory.SETRANGE(Location, PlantOrder."From Location");
              PlantInventory.SETRANGE("Plant Type", PlantOrderLine."Plant Type");
              PlantInventory.SETRANGE("Plant No.", PlantOrderLine."No.");
              PlantInventory.SETRANGE("Rate Code", PlantOrderLine."From Rate Code");
              PlantInventory.SETFILTER("Present from", '<=%1', PlantOrder."Transfer Date");
              PlantInventory.SETFILTER("Expected Return Depot", '<>%1', '');
              PlantInventory.SETFILTER(Quantity, '>0');
              IF PlantInventory.FINDLAST THEN
                EXIT(PlantInventory."Expected Return Depot");
            END;
          END;
        PlantOrder.Type::"Negative Inventory Correction":
          BEGIN
            PlantLocationTo.GET(PlantOrder."To Location");
            IF PlantLocationTo.Depot THEN
              EXIT('');
            PlantLocationFrom.GET(PlantOrder."From Location");
            IF PlantLocationFrom.Depot THEN
              EXIT(PlantOrder."From Location");
          END;
      END;
      EXIT;
    END;

    BEGIN
    END.
  }
}

