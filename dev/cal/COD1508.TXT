OBJECT Codeunit 1508 Notification Lifecycle Handler
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00,4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      NotificationLifecycleMgt@1000 : Codeunit 1511;

    [EventSubscriber(Table,37,OnAfterInsertEvent)]
    LOCAL PROCEDURE OnAfterSalesLineInsertSetRecId@2(VAR Rec@1000 : Record 37;RunTrigger@1001 : Boolean);
    BEGIN
      IF Rec.ISTEMPORARY OR NotificationLifecycleMgt.AreSubscribersDisabled THEN
        EXIT;

      NotificationLifecycleMgt.SetRecordID(Rec.RECORDID);
    END;

    [EventSubscriber(Table,37,OnAfterRenameEvent)]
    LOCAL PROCEDURE OnAfterSalesLineRenameUpdateRecId@3(VAR Rec@1000 : Record 37;VAR xRec@1001 : Record 37;RunTrigger@1002 : Boolean);
    BEGIN
      IF Rec.ISTEMPORARY OR NotificationLifecycleMgt.AreSubscribersDisabled THEN
        EXIT;

      NotificationLifecycleMgt.UpdateRecordID(xRec.RECORDID,Rec.RECORDID);
    END;

    [EventSubscriber(Table,37,OnAfterDeleteEvent)]
    LOCAL PROCEDURE OnAfterSalesLineDeleteRecall@4(VAR Rec@1000 : Record 37;RunTrigger@1001 : Boolean);
    BEGIN
      IF Rec.ISTEMPORARY OR NotificationLifecycleMgt.AreSubscribersDisabled THEN
        EXIT;

      NotificationLifecycleMgt.RecallNotificationsForRecord(Rec.RECORDID,FALSE);
    END;

    [EventSubscriber(Table,83,OnAfterInsertEvent)]
    LOCAL PROCEDURE OnAfterItemJournalInsertSetRecId@20(VAR Rec@1000 : Record 83;RunTrigger@1001 : Boolean);
    BEGIN
      IF Rec.ISTEMPORARY OR NotificationLifecycleMgt.AreSubscribersDisabled THEN
        EXIT;

      NotificationLifecycleMgt.SetRecordID(Rec.RECORDID);
    END;

    [EventSubscriber(Table,83,OnAfterRenameEvent)]
    LOCAL PROCEDURE OnAfterItemJournalRenameUpdateRecId@19(VAR Rec@1000 : Record 83;VAR xRec@1001 : Record 83;RunTrigger@1002 : Boolean);
    BEGIN
      IF Rec.ISTEMPORARY OR NotificationLifecycleMgt.AreSubscribersDisabled THEN
        EXIT;

      NotificationLifecycleMgt.UpdateRecordID(xRec.RECORDID,Rec.RECORDID);
    END;

    [EventSubscriber(Table,83,OnAfterDeleteEvent)]
    LOCAL PROCEDURE OnAfterItemJournalDeleteRecall@18(VAR Rec@1000 : Record 83;RunTrigger@1001 : Boolean);
    BEGIN
      IF Rec.ISTEMPORARY OR NotificationLifecycleMgt.AreSubscribersDisabled THEN
        EXIT;

      NotificationLifecycleMgt.RecallNotificationsForRecord(Rec.RECORDID,FALSE);
    END;

    [EventSubscriber(Table,5741,OnAfterInsertEvent)]
    LOCAL PROCEDURE OnAfterTransferLineInsertSetRecId@25(VAR Rec@1000 : Record 5741;RunTrigger@1001 : Boolean);
    BEGIN
      IF Rec.ISTEMPORARY OR NotificationLifecycleMgt.AreSubscribersDisabled THEN
        EXIT;

      NotificationLifecycleMgt.SetRecordID(Rec.RECORDID);
    END;

    [EventSubscriber(Table,5741,OnAfterRenameEvent)]
    LOCAL PROCEDURE OnAfterTransferLineRenameUpdateRecId@24(VAR Rec@1000 : Record 5741;VAR xRec@1001 : Record 5741;RunTrigger@1002 : Boolean);
    BEGIN
      IF Rec.ISTEMPORARY OR NotificationLifecycleMgt.AreSubscribersDisabled THEN
        EXIT;

      NotificationLifecycleMgt.UpdateRecordID(xRec.RECORDID,Rec.RECORDID);
    END;

    [EventSubscriber(Table,5741,OnAfterDeleteEvent)]
    LOCAL PROCEDURE OnAfterTransferLineDeleteRecall@23(VAR Rec@1000 : Record 5741;RunTrigger@1001 : Boolean);
    BEGIN
      IF Rec.ISTEMPORARY OR NotificationLifecycleMgt.AreSubscribersDisabled THEN
        EXIT;

      NotificationLifecycleMgt.RecallNotificationsForRecord(Rec.RECORDID,FALSE);
    END;

    [EventSubscriber(Table,5902,OnAfterInsertEvent)]
    LOCAL PROCEDURE OnAfterServiceLineInsertSetRecId@30(VAR Rec@1000 : Record 5902;RunTrigger@1001 : Boolean);
    BEGIN
      IF Rec.ISTEMPORARY OR NotificationLifecycleMgt.AreSubscribersDisabled THEN
        EXIT;

      NotificationLifecycleMgt.SetRecordID(Rec.RECORDID);
    END;

    [EventSubscriber(Table,5902,OnAfterRenameEvent)]
    LOCAL PROCEDURE OnAfterServiceLineRenameUpdateRecId@29(VAR Rec@1000 : Record 5902;VAR xRec@1001 : Record 5902;RunTrigger@1002 : Boolean);
    BEGIN
      IF Rec.ISTEMPORARY OR NotificationLifecycleMgt.AreSubscribersDisabled THEN
        EXIT;

      NotificationLifecycleMgt.UpdateRecordID(xRec.RECORDID,Rec.RECORDID);
    END;

    [EventSubscriber(Table,5902,OnAfterDeleteEvent)]
    LOCAL PROCEDURE OnAfterServiceLineDeleteRecall@28(VAR Rec@1000 : Record 5902;RunTrigger@1001 : Boolean);
    BEGIN
      IF Rec.ISTEMPORARY OR NotificationLifecycleMgt.AreSubscribersDisabled THEN
        EXIT;

      NotificationLifecycleMgt.RecallNotificationsForRecord(Rec.RECORDID,FALSE);
    END;

    [EventSubscriber(Table,11020401,OnAfterInsertEvent)]
    LOCAL PROCEDURE OnAfterJobPlanningLineInsertSetRecId@34(VAR Rec@1000 : Record 11020401;RunTrigger@1001 : Boolean);
    BEGIN
      IF Rec.ISTEMPORARY OR NotificationLifecycleMgt.AreSubscribersDisabled THEN
        EXIT;

      NotificationLifecycleMgt.SetRecordID(Rec.RECORDID);
    END;

    [EventSubscriber(Table,11020401,OnAfterRenameEvent)]
    LOCAL PROCEDURE OnAfterJobPlanningLineRenameUpdateRecId@33(VAR Rec@1000 : Record 11020401;VAR xRec@1001 : Record 11020401;RunTrigger@1002 : Boolean);
    BEGIN
      IF Rec.ISTEMPORARY OR NotificationLifecycleMgt.AreSubscribersDisabled THEN
        EXIT;

      NotificationLifecycleMgt.UpdateRecordID(xRec.RECORDID,Rec.RECORDID);
    END;

    [EventSubscriber(Table,11020401,OnAfterDeleteEvent)]
    LOCAL PROCEDURE OnAfterJobPlanningLineDeleteRecall@32(VAR Rec@1000 : Record 11020401;RunTrigger@1001 : Boolean);
    BEGIN
      IF Rec.ISTEMPORARY OR NotificationLifecycleMgt.AreSubscribersDisabled THEN
        EXIT;

      NotificationLifecycleMgt.RecallNotificationsForRecord(Rec.RECORDID,FALSE);
    END;

    [EventSubscriber(Table,901,OnAfterInsertEvent)]
    LOCAL PROCEDURE OnAfterAssemblyLineInsertSetRecId@37(VAR Rec@1000 : Record 901;RunTrigger@1001 : Boolean);
    BEGIN
      IF Rec.ISTEMPORARY OR NotificationLifecycleMgt.AreSubscribersDisabled THEN
        EXIT;

      NotificationLifecycleMgt.SetRecordID(Rec.RECORDID);
    END;

    [EventSubscriber(Table,901,OnAfterRenameEvent)]
    LOCAL PROCEDURE OnAfterAssemblyLineRenameUpdateRecId@36(VAR Rec@1000 : Record 901;VAR xRec@1001 : Record 901;RunTrigger@1002 : Boolean);
    BEGIN
      IF Rec.ISTEMPORARY OR NotificationLifecycleMgt.AreSubscribersDisabled THEN
        EXIT;

      NotificationLifecycleMgt.UpdateRecordID(xRec.RECORDID,Rec.RECORDID);
    END;

    [EventSubscriber(Table,901,OnAfterDeleteEvent)]
    LOCAL PROCEDURE OnAfterAssemblyLineDeleteRecall@35(VAR Rec@1000 : Record 901;RunTrigger@1001 : Boolean);
    BEGIN
      IF Rec.ISTEMPORARY OR NotificationLifecycleMgt.AreSubscribersDisabled THEN
        EXIT;

      NotificationLifecycleMgt.RecallNotificationsForRecord(Rec.RECORDID,FALSE);
    END;

    [EventSubscriber(Table,36,OnAfterInsertEvent)]
    LOCAL PROCEDURE OnAfterSalesHeaderInsertSetRecId@1(VAR Rec@1000 : Record 36;RunTrigger@1001 : Boolean);
    BEGIN
      IF Rec.ISTEMPORARY OR NotificationLifecycleMgt.AreSubscribersDisabled THEN
        EXIT;

      NotificationLifecycleMgt.SetRecordID(Rec.RECORDID);
    END;

    [EventSubscriber(Table,38,OnAfterInsertEvent)]
    LOCAL PROCEDURE OnAfterPurchaseHeaderInsertSetRecId@13(VAR Rec@1000 : Record 38;RunTrigger@1001 : Boolean);
    BEGIN
      IF Rec.ISTEMPORARY OR NotificationLifecycleMgt.AreSubscribersDisabled THEN
        EXIT;

      NotificationLifecycleMgt.SetRecordID(Rec.RECORDID);
    END;

    [EventSubscriber(Table,81,OnAfterInsertEvent)]
    LOCAL PROCEDURE OnAfterGenJnlLineInsertSetRecId@6(VAR Rec@1000 : Record 81;RunTrigger@1001 : Boolean);
    BEGIN
      IF Rec.ISTEMPORARY OR NotificationLifecycleMgt.AreSubscribersDisabled THEN
        EXIT;

      NotificationLifecycleMgt.SetRecordID(Rec.RECORDID);
    END;

    [EventSubscriber(Table,5965,OnAfterInsertEvent)]
    LOCAL PROCEDURE OnAfterServiceContractHeaderInsertSetRecId@9(VAR Rec@1000 : Record 5965;RunTrigger@1001 : Boolean);
    BEGIN
      IF Rec.ISTEMPORARY OR NotificationLifecycleMgt.AreSubscribersDisabled THEN
        EXIT;

      NotificationLifecycleMgt.SetRecordID(Rec.RECORDID);
    END;

    [EventSubscriber(Codeunit,312,OnNewCheckRemoveCustomerNotifications)]
    LOCAL PROCEDURE OnCustCheckCrLimitCheckRecallNotifs@5(RecId@1000 : RecordID;RecallCreditOverdueNotif@1002 : Boolean);
    VAR
      CustCheckCrLimit@1001 : Codeunit 312;
    BEGIN
      IF NotificationLifecycleMgt.AreSubscribersDisabled THEN
        EXIT;

      NotificationLifecycleMgt.RecallNotificationsForRecordWithAdditionalContext(
        RecId,CustCheckCrLimit.GetCreditLimitNotificationId,TRUE);
      IF RecallCreditOverdueNotif THEN
        NotificationLifecycleMgt.RecallNotificationsForRecordWithAdditionalContext(
          RecId,CustCheckCrLimit.GetOverdueBalanceNotificationId,TRUE);
    END;

    [EventSubscriber(Table,83,OnBeforeValidateEvent,"Entry Type")]
    LOCAL PROCEDURE OnItemJournalLineUpdateEntryTypeRecallItemNotif@31(VAR Rec@1000 : Record 83;VAR xRec@1001 : Record 83;CurrFieldNo@1002 : Integer);
    VAR
      ItemCheckAvail@1003 : Codeunit 311;
    BEGIN
      IF Rec.ISTEMPORARY OR NotificationLifecycleMgt.AreSubscribersDisabled THEN
        EXIT;

      IF  (Rec."Entry Type" <> Rec."Entry Type"::Sale) AND
         (xRec."Entry Type" <> Rec."Entry Type") AND (CurrFieldNo = Rec.FIELDNO("Entry Type"))
      THEN
        NotificationLifecycleMgt.RecallNotificationsForRecordWithAdditionalContext(
          Rec.RECORDID,ItemCheckAvail.GetItemAvailabilityNotificationId,TRUE);
    END;

    [EventSubscriber(Table,83,OnBeforeValidateEvent,Quantity)]
    LOCAL PROCEDURE OnItemJournalLineUpdateQtyTo0RecallItemNotif@7(VAR Rec@1000 : Record 83;VAR xRec@1001 : Record 83;CurrFieldNo@1002 : Integer);
    VAR
      ItemCheckAvail@1003 : Codeunit 311;
    BEGIN
      IF Rec.ISTEMPORARY OR NotificationLifecycleMgt.AreSubscribersDisabled THEN
        EXIT;

      IF (Rec.Quantity = 0) AND (xRec.Quantity <> Rec.Quantity) AND (CurrFieldNo = Rec.FIELDNO(Quantity)) THEN
        NotificationLifecycleMgt.RecallNotificationsForRecordWithAdditionalContext(
          Rec.RECORDID,ItemCheckAvail.GetItemAvailabilityNotificationId,TRUE);
    END;

    [EventSubscriber(Table,37,OnBeforeValidateEvent,Type)]
    LOCAL PROCEDURE OnSalesLineUpdateTypeRecallItemNotif@43(VAR Rec@1000 : Record 37;VAR xRec@1001 : Record 37;CurrFieldNo@1002 : Integer);
    VAR
      ItemCheckAvail@1003 : Codeunit 311;
    BEGIN
      IF Rec.ISTEMPORARY OR NotificationLifecycleMgt.AreSubscribersDisabled THEN
        EXIT;

      IF (Rec.Type <> Rec.Type::Item) AND (xRec.Type <> Rec.Type) AND (CurrFieldNo = Rec.FIELDNO(Type)) THEN
        NotificationLifecycleMgt.RecallNotificationsForRecordWithAdditionalContext(
          Rec.RECORDID,ItemCheckAvail.GetItemAvailabilityNotificationId,TRUE);
    END;

    [EventSubscriber(Table,37,OnBeforeValidateEvent,Quantity)]
    LOCAL PROCEDURE OnSalesLineUpdateQtyTo0RecallItemNotif@8(VAR Rec@1000 : Record 37;VAR xRec@1001 : Record 37;CurrFieldNo@1002 : Integer);
    VAR
      ItemCheckAvail@1003 : Codeunit 311;
    BEGIN
      IF Rec.ISTEMPORARY OR NotificationLifecycleMgt.AreSubscribersDisabled THEN
        EXIT;

      IF (Rec.Quantity = 0) AND (xRec.Quantity <> Rec.Quantity) AND (CurrFieldNo = Rec.FIELDNO(Quantity)) THEN
        NotificationLifecycleMgt.RecallNotificationsForRecordWithAdditionalContext(
          Rec.RECORDID,ItemCheckAvail.GetItemAvailabilityNotificationId,TRUE);
    END;

    [EventSubscriber(Table,5741,OnBeforeValidateEvent,Quantity)]
    LOCAL PROCEDURE OnTransferLineUpdateQtyTo0RecallItemNotif@14(VAR Rec@1000 : Record 5741;VAR xRec@1001 : Record 5741;CurrFieldNo@1002 : Integer);
    VAR
      ItemCheckAvail@1003 : Codeunit 311;
    BEGIN
      IF Rec.ISTEMPORARY OR NotificationLifecycleMgt.AreSubscribersDisabled THEN
        EXIT;

      IF (Rec.Quantity = 0) AND (xRec.Quantity <> Rec.Quantity) AND (CurrFieldNo = Rec.FIELDNO(Quantity)) THEN
        NotificationLifecycleMgt.RecallNotificationsForRecordWithAdditionalContext(
          Rec.RECORDID,ItemCheckAvail.GetItemAvailabilityNotificationId,TRUE);
    END;

    [EventSubscriber(Table,5902,OnBeforeValidateEvent,Type)]
    LOCAL PROCEDURE OnServiceLineUpdateTypeRecallItemNotif@49(VAR Rec@1000 : Record 5902;VAR xRec@1001 : Record 5902;CurrFieldNo@1002 : Integer);
    VAR
      ItemCheckAvail@1003 : Codeunit 311;
    BEGIN
      IF Rec.ISTEMPORARY OR NotificationLifecycleMgt.AreSubscribersDisabled THEN
        EXIT;

      IF (Rec.Type <> Rec.Type::Item) AND (xRec.Type <> Rec.Type) AND (CurrFieldNo = Rec.FIELDNO(Type)) THEN
        NotificationLifecycleMgt.RecallNotificationsForRecordWithAdditionalContext(
          Rec.RECORDID,ItemCheckAvail.GetItemAvailabilityNotificationId,TRUE);
    END;

    [EventSubscriber(Table,5902,OnBeforeValidateEvent,Quantity)]
    LOCAL PROCEDURE OnServiceLineUpdateQtyTo0RecallItemNotif@16(VAR Rec@1000 : Record 5902;VAR xRec@1001 : Record 5902;CurrFieldNo@1002 : Integer);
    VAR
      ItemCheckAvail@1003 : Codeunit 311;
    BEGIN
      IF Rec.ISTEMPORARY OR NotificationLifecycleMgt.AreSubscribersDisabled THEN
        EXIT;

      IF (Rec.Quantity = 0) AND (xRec.Quantity <> Rec.Quantity) AND (CurrFieldNo = Rec.FIELDNO(Quantity)) THEN
        NotificationLifecycleMgt.RecallNotificationsForRecordWithAdditionalContext(
          Rec.RECORDID,ItemCheckAvail.GetItemAvailabilityNotificationId,TRUE);
    END;

    [EventSubscriber(Table,11020401,OnBeforeValidateEvent,Type)]
    LOCAL PROCEDURE OnJobPlanningLineUpdateTypeRecallItemNotif@12(VAR Rec@1000 : Record 11020401;VAR xRec@1001 : Record 11020401;CurrFieldNo@1002 : Integer);
    VAR
      ItemCheckAvail@1003 : Codeunit 311;
    BEGIN
      IF Rec.ISTEMPORARY OR NotificationLifecycleMgt.AreSubscribersDisabled THEN
        EXIT;

      IF (Rec.Type <> Rec.Type::Item) AND (xRec.Type <> Rec.Type) AND (CurrFieldNo = Rec.FIELDNO(Type)) THEN
        NotificationLifecycleMgt.RecallNotificationsForRecordWithAdditionalContext(
          Rec.RECORDID,ItemCheckAvail.GetItemAvailabilityNotificationId,TRUE);
    END;

    [EventSubscriber(Table,11020401,OnBeforeValidateEvent,"Line Type")]
    LOCAL PROCEDURE OnJobPlanningLineUpdateLineTypeRecallItemNotif@10(VAR Rec@1000 : Record 11020401;VAR xRec@1001 : Record 11020401;CurrFieldNo@1002 : Integer);
    VAR
      ItemCheckAvail@1003 : Codeunit 311;
    BEGIN
      IF Rec.ISTEMPORARY OR NotificationLifecycleMgt.AreSubscribersDisabled THEN
        EXIT;

      IF (Rec."Line Type" = Rec."Line Type"::Billable) AND
         (xRec."Line Type" <> Rec."Line Type") AND (CurrFieldNo = Rec.FIELDNO("Line Type"))
      THEN
        NotificationLifecycleMgt.RecallNotificationsForRecordWithAdditionalContext(
          Rec.RECORDID,ItemCheckAvail.GetItemAvailabilityNotificationId,TRUE);
    END;

    [EventSubscriber(Table,11020401,OnBeforeValidateEvent,Quantity)]
    LOCAL PROCEDURE OnJobPlanningLineUpdateQtyTo0RecallItemNotif@22(VAR Rec@1000 : Record 11020401;VAR xRec@1001 : Record 11020401;CurrFieldNo@1002 : Integer);
    VAR
      ItemCheckAvail@1003 : Codeunit 311;
    BEGIN
      IF Rec.ISTEMPORARY OR NotificationLifecycleMgt.AreSubscribersDisabled THEN
        EXIT;

      IF (Rec.Quantity = 0) AND (xRec.Quantity <> Rec.Quantity) AND (CurrFieldNo = Rec.FIELDNO(Quantity)) THEN
        NotificationLifecycleMgt.RecallNotificationsForRecordWithAdditionalContext(
          Rec.RECORDID,ItemCheckAvail.GetItemAvailabilityNotificationId,TRUE);
    END;

    [EventSubscriber(Table,901,OnBeforeValidateEvent,"Unit of Measure Code")]
    LOCAL PROCEDURE OnAssemblyLineUpdateUnitOfMeasureCodeRecallItemNotif@27(VAR Rec@1000 : Record 901;VAR xRec@1001 : Record 901;CurrFieldNo@1002 : Integer);
    VAR
      ItemCheckAvail@1003 : Codeunit 311;
    BEGIN
      IF Rec.ISTEMPORARY OR NotificationLifecycleMgt.AreSubscribersDisabled THEN
        EXIT;

      IF (xRec."Unit of Measure Code" <> Rec."Unit of Measure Code") AND (CurrFieldNo = Rec.FIELDNO("Unit of Measure Code")) THEN
        NotificationLifecycleMgt.RecallNotificationsForRecordWithAdditionalContext(
          Rec.RECORDID,ItemCheckAvail.GetItemAvailabilityNotificationId,TRUE);
    END;

    [EventSubscriber(Table,901,OnBeforeValidateEvent,Type)]
    LOCAL PROCEDURE OnAssemblyLineUpdateTypeRecallItemNotif@11(VAR Rec@1000 : Record 901;VAR xRec@1001 : Record 901;CurrFieldNo@1002 : Integer);
    VAR
      ItemCheckAvail@1003 : Codeunit 311;
    BEGIN
      IF Rec.ISTEMPORARY OR NotificationLifecycleMgt.AreSubscribersDisabled THEN
        EXIT;

      IF (Rec.Type <> Rec.Type::Item) AND (xRec.Type <> Rec.Type) AND (CurrFieldNo = Rec.FIELDNO(Type)) THEN
        NotificationLifecycleMgt.RecallNotificationsForRecordWithAdditionalContext(
          Rec.RECORDID,ItemCheckAvail.GetItemAvailabilityNotificationId,TRUE);
    END;

    [EventSubscriber(Table,901,OnBeforeValidateEvent,"Quantity per")]
    LOCAL PROCEDURE OnAssemblyLineUpdateQuantityRecallItemNotif@21(VAR Rec@1000 : Record 901;VAR xRec@1001 : Record 901;CurrFieldNo@1002 : Integer);
    VAR
      ItemCheckAvail@1003 : Codeunit 311;
    BEGIN
      IF Rec.ISTEMPORARY OR NotificationLifecycleMgt.AreSubscribersDisabled THEN
        EXIT;

      IF (xRec."Quantity per" <> Rec."Quantity per") AND (CurrFieldNo = Rec.FIELDNO("Quantity per")) THEN
        NotificationLifecycleMgt.RecallNotificationsForRecordWithAdditionalContext(
          Rec.RECORDID,ItemCheckAvail.GetItemAvailabilityNotificationId,TRUE);
    END;

    [EventSubscriber(Codeunit,80,OnBeforePostSalesDoc)]
    LOCAL PROCEDURE OnBeforeSalesPost@44(VAR Sender@1000 : Codeunit 80;VAR SalesHeader@1001 : Record 36;CommitIsSuppressed@1002 : Boolean;PreviewMode@1003 : Boolean);
    BEGIN
      NotificationLifecycleMgt.DisableSubscribers;
    END;

    [EventSubscriber(Codeunit,80,OnAfterPostSalesDoc)]
    LOCAL PROCEDURE OnAfterSalesPost@45(VAR SalesHeader@1000 : Record 36;VAR GenJnlPostLine@1001 : Codeunit 12;SalesShptHdrNo@1002 : Code[20];RetRcpHdrNo@1003 : Code[20];SalesInvHdrNo@1004 : Code[20];SalesCrMemoHdrNo@1005 : Code[20];CommitIsSuppressed@1006 : Boolean);
    BEGIN
      NotificationLifecycleMgt.EnableSubscribers;
    END;

    [EventSubscriber(Codeunit,90,OnBeforePostPurchaseDoc)]
    LOCAL PROCEDURE OnBeforePurchPost@46(VAR Sender@1000 : Codeunit 90;VAR PurchaseHeader@1001 : Record 38;PreviewMode@1002 : Boolean;CommitIsSupressed@1003 : Boolean);
    BEGIN
      NotificationLifecycleMgt.DisableSubscribers;
    END;

    [EventSubscriber(Codeunit,90,OnAfterPostPurchaseDoc)]
    LOCAL PROCEDURE OnAfterPurchPost@47(VAR PurchaseHeader@1000 : Record 38;VAR GenJnlPostLine@1001 : Codeunit 12;PurchRcpHdrNo@1002 : Code[20];RetShptHdrNo@1003 : Code[20];PurchInvHdrNo@1004 : Code[20];PurchCrMemoHdrNo@1005 : Code[20];CommitIsSupressed@1006 : Boolean);
    BEGIN
      NotificationLifecycleMgt.EnableSubscribers;
    END;

    [EventSubscriber(Codeunit,900,OnBeforePost)]
    LOCAL PROCEDURE OnBeforeAssemblyPost@48(VAR AssemblyHeader@1000 : Record 900);
    BEGIN
      NotificationLifecycleMgt.DisableSubscribers;
    END;

    [EventSubscriber(Codeunit,900,OnAfterPost)]
    LOCAL PROCEDURE OnAfterAssemblyPost@50(VAR AssemblyHeader@1000 : Record 900);
    BEGIN
      NotificationLifecycleMgt.EnableSubscribers;
    END;

    [EventSubscriber(Codeunit,5980,OnBeforePostWithLines)]
    LOCAL PROCEDURE OnBeforeServicePost@55(VAR PassedServHeader@1000 : Record 5900;VAR PassedServLine@1001 : Record 5902;VAR PassedShip@1002 : Boolean;VAR PassedConsume@1003 : Boolean;VAR PassedInvoice@1004 : Boolean);
    BEGIN
      NotificationLifecycleMgt.DisableSubscribers;
    END;

    [EventSubscriber(Codeunit,5980,OnAfterPostWithLines)]
    LOCAL PROCEDURE OnAfterServicePost@56(VAR PassedServiceHeader@1000 : Record 5900);
    BEGIN
      NotificationLifecycleMgt.EnableSubscribers;
    END;

    [EventSubscriber(Page,41,OnOpenPageEvent)]
    LOCAL PROCEDURE OnOpenSalesQuote@65(VAR Rec@1000 : Record 36);
    BEGIN
      NotificationLifecycleMgt.EnableSubscribers;
    END;

    [EventSubscriber(Page,41,OnClosePageEvent)]
    LOCAL PROCEDURE OnCloseSalesQuote@66(VAR Rec@1000 : Record 36);
    BEGIN
      NotificationLifecycleMgt.EnableSubscribers;
    END;

    [EventSubscriber(Page,42,OnOpenPageEvent)]
    LOCAL PROCEDURE OnOpenSalesOrder@67(VAR Rec@1000 : Record 36);
    BEGIN
      NotificationLifecycleMgt.EnableSubscribers;
    END;

    [EventSubscriber(Page,42,OnClosePageEvent)]
    LOCAL PROCEDURE OnCloseSalesOrder@68(VAR Rec@1000 : Record 36);
    BEGIN
      NotificationLifecycleMgt.EnableSubscribers;
    END;

    [EventSubscriber(Page,43,OnOpenPageEvent)]
    LOCAL PROCEDURE OnOpenSalesInvoice@69(VAR Rec@1000 : Record 36);
    BEGIN
      NotificationLifecycleMgt.EnableSubscribers;
    END;

    [EventSubscriber(Page,43,OnClosePageEvent)]
    LOCAL PROCEDURE OnCloseSalesInvoice@70(VAR Rec@1000 : Record 36);
    BEGIN
      NotificationLifecycleMgt.EnableSubscribers;
    END;

    [EventSubscriber(Page,44,OnOpenPageEvent)]
    LOCAL PROCEDURE OnOpenSalesCreditMemo@71(VAR Rec@1000 : Record 36);
    BEGIN
      NotificationLifecycleMgt.EnableSubscribers;
    END;

    [EventSubscriber(Page,44,OnClosePageEvent)]
    LOCAL PROCEDURE OnCloseSalesCreditMemo@72(VAR Rec@1000 : Record 36);
    BEGIN
      NotificationLifecycleMgt.EnableSubscribers;
    END;

    [EventSubscriber(Page,49,OnOpenPageEvent)]
    LOCAL PROCEDURE OnOpenPurchaseQuote@73(VAR Rec@1000 : Record 38);
    BEGIN
      NotificationLifecycleMgt.EnableSubscribers;
    END;

    [EventSubscriber(Page,49,OnClosePageEvent)]
    LOCAL PROCEDURE OnClosePurchaseQuote@74(VAR Rec@1000 : Record 38);
    BEGIN
      NotificationLifecycleMgt.EnableSubscribers;
    END;

    [EventSubscriber(Page,50,OnOpenPageEvent)]
    LOCAL PROCEDURE OnOpenPurchaseOrder@75(VAR Rec@1000 : Record 38);
    BEGIN
      NotificationLifecycleMgt.EnableSubscribers;
    END;

    [EventSubscriber(Page,50,OnClosePageEvent)]
    LOCAL PROCEDURE OnClosePurchaseOrder@76(VAR Rec@1000 : Record 38);
    BEGIN
      NotificationLifecycleMgt.EnableSubscribers;
    END;

    [EventSubscriber(Page,51,OnOpenPageEvent)]
    LOCAL PROCEDURE OnOpenPurchaseInvoice@77(VAR Rec@1000 : Record 38);
    BEGIN
      NotificationLifecycleMgt.EnableSubscribers;
    END;

    [EventSubscriber(Page,51,OnClosePageEvent)]
    LOCAL PROCEDURE OnClosePurchaseInvoice@78(VAR Rec@1000 : Record 38);
    BEGIN
      NotificationLifecycleMgt.EnableSubscribers;
    END;

    [EventSubscriber(Page,52,OnOpenPageEvent)]
    LOCAL PROCEDURE OnOpenPurchaseCreditMemo@79(VAR Rec@1000 : Record 38);
    BEGIN
      NotificationLifecycleMgt.EnableSubscribers;
    END;

    [EventSubscriber(Page,52,OnClosePageEvent)]
    LOCAL PROCEDURE OnClosePurchaseCreditMemo@80(VAR Rec@1000 : Record 38);
    BEGIN
      NotificationLifecycleMgt.EnableSubscribers;
    END;

    [EventSubscriber(Page,900,OnOpenPageEvent)]
    LOCAL PROCEDURE OnOpenAssemblyOrder@81(VAR Rec@1000 : Record 900);
    BEGIN
      NotificationLifecycleMgt.EnableSubscribers;
    END;

    [EventSubscriber(Page,900,OnClosePageEvent)]
    LOCAL PROCEDURE OnCloseAssemblyOrder@82(VAR Rec@1000 : Record 900);
    BEGIN
      NotificationLifecycleMgt.EnableSubscribers;
    END;

    [EventSubscriber(Page,930,OnOpenPageEvent)]
    LOCAL PROCEDURE OnOpenAssemplyQuote@83(VAR Rec@1000 : Record 900);
    BEGIN
      NotificationLifecycleMgt.EnableSubscribers;
    END;

    [EventSubscriber(Page,930,OnClosePageEvent)]
    LOCAL PROCEDURE OnCloseAssemplyQuote@84(VAR Rec@1000 : Record 900);
    BEGIN
      NotificationLifecycleMgt.EnableSubscribers;
    END;

    [EventSubscriber(Page,519,OnOpenPageEvent)]
    LOCAL PROCEDURE OnOpenItemJournalLine@85(VAR Rec@1000 : Record 83);
    BEGIN
      NotificationLifecycleMgt.EnableSubscribers;
    END;

    BEGIN
    END.
  }
}

