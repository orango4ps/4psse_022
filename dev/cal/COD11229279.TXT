OBJECT Codeunit 11229279 Integration (GWP)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1100525000 : TextConst 'DEU=SeekDateTime nicht angegeben;ENU=SeekDateTime not given;NLD=SeekDateTime niet opgegeven';

    [External]
    PROCEDURE GetUrlFromConsignment@1100525000(ResourceNo@1100525000 : Code[20];SeekDateTime@1100525001 : DateTime;VAR URLFromCard@1100525002 : Text);
    VAR
      ConsignmentRoster@1100525003 : Record 11012865;
      Consignment@1100525004 : Record 11012863;
      ResourceWOP@1100525005 : Record 11229278;
      SeekDate@1100525006 : Date;
    BEGIN
      ResourceWOP.GET(ResourceNo);
      ResourceWOP.TESTFIELD(Type, ResourceWOP.Type::Employee);
      IF SeekDateTime = 0DT THEN
        ERROR(Text000);
      SeekDate := DT2DATE(SeekDateTime);

      ConsignmentRoster.CHANGECOMPANY(ResourceWOP.Company);
      ConsignmentRoster.SETRANGE("Employee No.", ResourceWOP."Source No.");
      ConsignmentRoster.SETFILTER("Start Date", '<=%1', SeekDate);
      ConsignmentRoster.SETFILTER("End Date", '>=%1', SeekDate);
      IF ConsignmentRoster.FINDFIRST THEN BEGIN
        Consignment.GET(ConsignmentRoster."Consignment Code");
        URLFromCard := GETURL(CLIENTTYPE::Windows, ResourceWOP.Company, OBJECTTYPE::Page, PAGE::"Consignment Roster", Consignment);
      END ELSE BEGIN
        URLFromCard := GETURL(CLIENTTYPE::Windows, ResourceWOP.Company, OBJECTTYPE::Page, PAGE::Consignments);
      END;
    END;

    [External]
    PROCEDURE GetUrlFromEmployeeAbsence@1100525001(ResourceNo@1100525002 : Code[20];SeekDateTime@1100525003 : DateTime;VAR URLFromCard@1100525000 : Text[250]);
    VAR
      ResourceWOP@1100525006 : Record 11229278;
      Employee@1100525001 : Record 5200;
      EmployeeAbsence@1100525004 : Record 5207;
      RecRef@1100525008 : RecordRef;
    BEGIN
      ResourceWOP.GET(ResourceNo);
      ResourceWOP.TESTFIELD(Type, ResourceWOP.Type::Employee);
      Employee.GET(ResourceWOP."Source No.");
      EmployeeAbsence.SETRANGE("Employee No.", ResourceWOP."Source No.");
      EmployeeAbsence.SETFILTER("To Date", '%1..', DT2DATE(SeekDateTime));
      RecRef.GETTABLE(EmployeeAbsence);
      URLFromCard := GetFilteredURL(ResourceWOP.Company, PAGE::"Employee Absence Lines (GWP)", RecRef, TRUE);
    END;

    [External]
    PROCEDURE GetUrlFromEmployeeQualifications@1100525002(ResourceNo@1100525002 : Code[20];VAR URLFromCard@1100525000 : Text[250]);
    VAR
      ResourceWOP@1100525003 : Record 11229278;
      Employee@1100525004 : Record 5200;
    BEGIN
      ResourceWOP.GET(ResourceNo);
      ResourceWOP.TESTFIELD(Type, ResourceWOP.Type::Employee);
      Employee.GET(ResourceWOP."Source No.");
      URLFromCard := GETURL(CLIENTTYPE::Windows, ResourceWOP.Company, OBJECTTYPE::Page, PAGE::"Employee Qualif. Card (GWP)", Employee);
    END;

    [External]
    PROCEDURE GetUrlForRepeatWorkOrder@1100525003(OriginalWorkOrderNo@1100525000 : Code[20];VAR URLFromCard@1100525001 : Text[250]);
    VAR
      WorkOrder@1100525002 : Record 11229279;
    BEGIN
      WorkOrder.GET(OriginalWorkOrderNo);
      URLFromCard := GETURL(CLIENTTYPE::Windows, WorkOrder."Source Company", OBJECTTYPE::Page, PAGE::"Repeat Work Order", WorkOrder);
    END;

    [External]
    PROCEDURE GetUrlForWorkOrder@1100525005(OriginalWorkOrderNo@1100525001 : Code[20];VAR URLFromCard@1100525000 : Text[250]);
    VAR
      WorkOrder@1100525002 : Record 11229279;
    BEGIN
      WorkOrder.GET(OriginalWorkOrderNo);
      URLFromCard := GETURL(CLIENTTYPE::Windows, WorkOrder."Source Company", OBJECTTYPE::Page, PAGE::"Work Order Card", WorkOrder) + '&mode=edit';
    END;

    [External]
    PROCEDURE CreateAbsence@1100528600(ResourceNo@1100528600 : Code[20];StartDateTime@1100528601 : DateTime;VAR ErrorMessage@1100528000 : Text) : Boolean;
    VAR
      ResourceWOP@1100528603 : Record 11229278;
      EmployeeAbsence@1100528602 : Record 5207;
      ToDateTime@1100525000 : DateTime;
    BEGIN
      ResourceWOP.GET(ResourceNo);
      ResourceWOP.TESTFIELD(Type, ResourceWOP.Type::Employee);
      ResourceWOP.TESTFIELD(Company, COMPANYNAME);

      StartDateTime := ROUNDDATETIME(StartDateTime, 15 * 60 * 1000);
      ToDateTime := StartDateTime + 1 * 60 * 60 * 1000;

      EmployeeAbsence.VALIDATE("Employee No.", ResourceWOP."Source No.");
      EmployeeAbsence.VALIDATE("From Date", DT2DATE(StartDateTime));
      EmployeeAbsence.VALIDATE("From Time", DT2TIME(StartDateTime));
      EmployeeAbsence.VALIDATE("To Date", DT2DATE(ToDateTime));
      EmployeeAbsence.VALIDATE("Until Time", DT2TIME(ToDateTime));
      EmployeeAbsence.INSERT(TRUE);

      EXIT(TRUE);
    END;

    [External]
    PROCEDURE DuplicateWorkOrder@1100528000(WorkOrderNo@1100528000 : Code[20];VAR NewWorkOrderNo@1100528002 : Code[20]) : Boolean;
    VAR
      WorkOrder@1100528001 : Record 11229279;
    BEGIN
      WorkOrder.GET(WorkOrderNo);
      NewWorkOrderNo := WorkOrder.DuplicateWorkorder(TRUE);
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE CreateFollowUpWorkOrder@1100525004(WorkOrderNo@1100525001 : Code[20];VAR NewWorkOrderNo@1100525000 : Code[20]) : Boolean;
    VAR
      WorkOrder@1100525002 : Record 11229279;
    BEGIN
      WorkOrder.GET(WorkOrderNo);
      NewWorkOrderNo := WorkOrder.CreateNextWorkOrder;
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE CreateNewWorkOrder@1100525006(SourceType@1100525003 : ',ServiceOrder,,,,,,,,,,Project';SourceNo@1100525002 : Code[20];WorkOrderNo@1100525001 : Code[20];VAR NewWorkOrderNo@1100525000 : Code[20]) : Boolean;
    VAR
      WorkOrder@1100525004 : Record 11229279;
      BaseWorkOrder@1100525005 : Record 11229279;
    BEGIN
      WorkOrder."Source Company" := COMPANYNAME;
      IF WorkOrderNo = '' THEN BEGIN
        WorkOrder.VALIDATE("Source Type", SourceType);
        WorkOrder.VALIDATE("Source No.", SourceNo);
      END ELSE BEGIN
        BaseWorkOrder.GET(WorkOrderNo);
        WorkOrder.VALIDATE("Source Type", BaseWorkOrder."Source Type");
        WorkOrder.VALIDATE("Source No.", BaseWorkOrder."Source No.");
      END;
      WorkOrder.INSERT(TRUE);
      NewWorkOrderNo := WorkOrder."No.";
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetFilterString@1100525007(IRecRef@1100525000 : RecordRef) Filter : Text;
    VAR
      FieldRef@1100525001 : FieldRef;
      FieldIndex@1100525002 : Integer;
    BEGIN
      FOR FieldIndex := 1 TO IRecRef.FIELDCOUNT DO BEGIN
        FieldRef := IRecRef.FIELDINDEX(FieldIndex);
        IF FieldRef.GETFILTER <> '' THEN BEGIN
          IF Filter <> '' THEN
            Filter += ' AND ';
          Filter += '''' + FieldRef.NAME + ''' IS ''' + FieldRef.GETFILTER + '''';
        END;
      END;
    END;

    LOCAL PROCEDURE GetFilteredURL@1100525013(ICompanyName@1100525001 : Text[50];IPageID@1100525003 : Integer;IRecRef@1100525004 : RecordRef;IEditMode@1100525000 : Boolean) URL : Text;
    VAR
      Filter@1100525002 : Text;
    BEGIN
      URL := GETURL(CLIENTTYPE::Windows, ICompanyName, OBJECTTYPE::Page, IPageID);
      IF IRecRef.HASFILTER THEN
        Filter := GetFilterString(IRecRef);
      IF Filter <> '' THEN
        URL += STRSUBSTNO('&$filter=%1', Filter);
      IF IEditMode THEN
        URL += '&mode=edit';
    END;

    [External]
    PROCEDURE SetFirmPlannedOnWorkOrder@1100525008(WorkOrderNo@1100525001 : Code[20];FirmPlanned@1100525002 : Boolean);
    VAR
      WorkOrder@1100525000 : Record 11229279;
    BEGIN
      WorkOrder.GET(WorkOrderNo);
      WorkOrder."Firm Planned" := FirmPlanned;
      WorkOrder.MODIFY(TRUE);
    END;

    [External]
    PROCEDURE ExportWorkOrderToFieldService@1100528500(WorkOrderNo@1100525001 : Code[20]);
    VAR
      WorkOrder@1100525000 : Record 11229279;
      SubcontPortSetup@1100526000 : Record 11126402;
      InstallationManagement@1100526001 : Codeunit 11012268;
    BEGIN
      WorkOrder.GET(WorkOrderNo);

      IF WorkOrder."Resource Type" = WorkOrder."Resource Type"::Employee THEN BEGIN
        WorkOrder.VALIDATE("Export to FSA", TRUE);
        WorkOrder.MODIFY(TRUE);
      END ELSE IF WorkOrder."Resource Type" = WorkOrder."Resource Type"::Subcontractor THEN BEGIN
        IF InstallationManagement.LicensePermissionForTableData(DATABASE::"Subcont.Port. Setup") THEN
          IF SubcontPortSetup.FINDFIRST AND SubcontPortSetup."Subcontracting Portal Active" THEN BEGIN
            WorkOrder.VALIDATE("Publish on Subcontr. Portal", TRUE);
            WorkOrder.MODIFY(TRUE);
          END;
      END;
    END;

    BEGIN
    END.
  }
}

