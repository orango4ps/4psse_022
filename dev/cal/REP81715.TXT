OBJECT Report 81715 AssNo503 part 2 recode
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PSSE,AssNo503;
  }
  PROPERTIES
  {
    Permissions=TableData 121=rm;
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  IF (newProjectType = '') OR (oldProjectType = '') THEN
                    ERROR('missing Project Type in selection');
                  IF (newProjectType = oldProjectType) THEN
                    ERROR('Project Type cannot be same in selection');

                  newProjectTypeRec.GET(newProjectType);
                  oldProjectTypeRec.GET(oldProjectType);

                  oldProjectTypeRec.TESTFIELD("WIP Account Labor");
                  oldProjectTypeRec.TESTFIELD("WIP Account Material");
                  oldProjectTypeRec.TESTFIELD("WIP Account Subcontracting");
                  oldProjectTypeRec.TESTFIELD("WIP Account Plant");
                  oldProjectTypeRec.TESTFIELD("WIP Account Sundry");

                  newProjectTypeRec.TESTFIELD("WIP Account Labor");
                  newProjectTypeRec.TESTFIELD("WIP Account Material");
                  newProjectTypeRec.TESTFIELD("WIP Account Subcontracting");
                  newProjectTypeRec.TESTFIELD("WIP Account Plant");
                  newProjectTypeRec.TESTFIELD("WIP Account Sundry");

                  dWindow.OPEN('Project  #1####################\'+
                               'Purchase #2####################');
                END;

  }
  DATASET
  {
    { 1000000000;;DataItem;                  ;
               DataItemTable=Table11072003;
               DataItemTableView=SORTING(No.)
                                 WHERE(Project Status=FILTER(..Administrative Finished));
               OnPreDataItem=BEGIN
                               SETRANGE("Project Type",oldProjectType);
                             END;

               OnAfterGetRecord=VAR
                                  cuSymbrio@1000000000 : Codeunit 11127975;
                                  xJob@1000000001 : Record 11072003;
                                BEGIN
                                  dWindow.UPDATE(1,"No.");
                                  dWindow.UPDATE(2,'');

                                  xJob.GET("No.");
                                  VALIDATE("Project Type", newProjectType);
                                  "Last Date Modified" := TODAY;
                                  "Time Last Modified" := TIME;
                                  "Modified by" := USERID;
                                  cuSymbrio.fnMarkJobForExportToSymbrio(Job,xJob);
                                  MODIFY(FALSE);
                                END;

               ReqFilterFields=No. }

    { 1000000001;1;DataItem;                 ;
               DataItemTable=Table39;
               DataItemTableView=SORTING(Job No.,Extension Contract);
               OnPreDataItem=BEGIN
                               SETRANGE("Job No.", Job."No.");
                               SETRANGE("Document Type","Document Type"::Order);
                               SETRANGE(Type,Type::"G/L Account");
                             END;

               OnAfterGetRecord=VAR
                                  xPLine@1000000000 : Record 39;
                                  PurchRcptLine@1000000001 : Record 121;
                                  PurchInvLine@1000000002 : Record 123;
                                  PurchCrMemoLine@1000000003 : Record 125;
                                  PurchaseHeader@1000000004 : Record 38;
                                  GLAcc@1000000005 : Record 15;
                                  l_Vendor@1000000006 : Record 23;
                                BEGIN
                                  PurchaseHeader.GET("Document Type","Document No.");
                                  IF PurchaseHeader.Status = PurchaseHeader.Status::Closed THEN
                                      CurrReport.SKIP;

                                  //fully invoived or not
                                  IF "Outstanding Amount" <>0 THEN
                                    IF ABS(ROUND("Quantity Invoiced",1)) >= ABS(ROUND(Quantity,1)) THEN
                                      CurrReport.SKIP;

                                  dWindow.UPDATE(2,"Document No.");

                                  //linked to an invoice?
                                  PurchRcptLine.SETCURRENTKEY("Order No.","Order Line No.");
                                  PurchRcptLine.SETRANGE("Order No.", "Document No.");
                                  PurchRcptLine.SETRANGE("Order Line No.", "Line No.");
                                  IF PurchRcptLine.FINDSET(FALSE) THEN
                                  REPEAT
                                    PurchInvLine.SETCURRENTKEY("Receipt No.","Receipt Line No.");
                                    PurchInvLine.SETRANGE("Receipt No.", PurchRcptLine."Document No.");
                                    PurchInvLine.SETRANGE("Receipt Line No.", PurchRcptLine."Line No.");
                                    IF PurchInvLine.FINDFIRST THEN
                                      CurrReport.SKIP;
                                    PurchCrMemoLine.SETCURRENTKEY("Receipt No.","Receipt Line No.");
                                    PurchCrMemoLine.SETRANGE("Receipt No.", PurchRcptLine."Document No.");
                                    PurchCrMemoLine.SETRANGE("Receipt Line No.", PurchRcptLine."Line No.");
                                    IF PurchCrMemoLine.FINDFIRST THEN
                                      CurrReport.SKIP;
                                  UNTIL PurchRcptLine.NEXT=0;

                                  SuspendStatusCheck(TRUE);
                                  xPLine.GET("Document Type","Document No.","Line No.");
                                  CASE "Cost Type" OF
                                    "Cost Type"::Labor:          IF "No." = oldProjectTypeRec."WIP Account Labor"          THEN "No." := newProjectTypeRec."WIP Account Labor";
                                    "Cost Type"::Material:       IF "No." = oldProjectTypeRec."WIP Account Material"       THEN "No." := newProjectTypeRec."WIP Account Material";
                                    "Cost Type"::Subcontracting: IF "No." = oldProjectTypeRec."WIP Account Subcontracting" THEN "No." := newProjectTypeRec."WIP Account Subcontracting";
                                    "Cost Type"::Plant:          IF "No." = oldProjectTypeRec."WIP Account Plant"          THEN "No." := newProjectTypeRec."WIP Account Plant";
                                    "Cost Type"::Sundry:         IF "No." = oldProjectTypeRec."WIP Account Sundry"         THEN "No." := newProjectTypeRec."WIP Account Sundry";
                                  END;
                                  IF xPLine."No." <> "No." THEN BEGIN

                                  //Qty. Rcd. Not Invoiced must be equal to '0'  in Purchase Line:
                                  //Document Type=Order, Document No.=12040400, Line No.=100000.
                                  //Current value is '1'.
                                  //project no: 3116003011

                                    //VALIDATE("No.");
                                    GLAcc.GET("No.");
                                    GLAcc.CheckGLAcc;
                                    "Gen. Prod. Posting Group" := GLAcc."Gen. Prod. Posting Group";
                                    IF GLAcc."VAT Prod. Posting Group" <> '' THEN
                                      "VAT Prod. Posting Group" := GLAcc."VAT Prod. Posting Group"
                                    ELSE
                                      "VAT Prod. Posting Group" := PurchaseHeader."VAT Prod. Posting Group";
                                        GetPlantPostingGroup;
                                    "Tax Group Code" := GLAcc."Tax Group Code";
                                    "Allow Invoice Disc." := FALSE;
                                    "Allow Item Charge Assignment" := FALSE;
                                    "Auto. Acc. Group" := GLAcc."Auto. Acc. Group";
                                    IF l_Vendor.GET(PurchaseHeader."Buy-from Vendor No.") THEN
                                      IF l_Vendor."VAT Prod. Posting Grp to lines" THEN
                                        VALIDATE("VAT Prod. Posting Group",l_Vendor."VAT Prod. Posting Group");
                                    MODIFY;

                                    PurchRcptLine.SETCURRENTKEY("Order No.","Order Line No.");
                                    PurchRcptLine.SETRANGE("Order No.","Document No.");
                                    PurchRcptLine.SETRANGE("Order Line No.","Line No.");
                                    IF PurchRcptLine.FINDSET(TRUE) THEN
                                    REPEAT
                                      PurchRcptLine."No." := "No.";
                                      PurchRcptLine."Gen. Prod. Posting Group" := "Gen. Prod. Posting Group";
                                      PurchRcptLine."VAT Prod. Posting Group" := "VAT Prod. Posting Group";
                                      PurchRcptLine."Tax Group Code" := "Tax Group Code";
                                      PurchRcptLine."Allow Invoice Disc." := "Allow Invoice Disc.";
                                      PurchRcptLine."Auto. Acc. Group" := "Auto. Acc. Group";
                                      PurchRcptLine."Posting Group" := "Posting Group";
                                      PurchRcptLine.MODIFY;
                                    UNTIL PurchRcptLine.NEXT=0;
                                  END;
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1000000000;;Container;
                  Name=Options;
                  ContainerType=ContentArea }

      { 1000000002;1;Field  ;
                  CaptionML=ENU=Old Project Type;
                  SourceExpr=oldProjectType;
                  TableRelation="Project Type" }

      { 1000000003;1;Field  ;
                  CaptionML=ENU=New Project Type;
                  SourceExpr=newProjectType;
                  TableRelation="Project Type" }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ExcelBuf@1000000001 : TEMPORARY Record 370;
      RowNo@1000000000 : Integer;
      TempControlProjectCost@1000000002 : TEMPORARY Record 11012047;
      ExcelBuf2@1000000003 : TEMPORARY Record 370;
      interimGLAcc@1000000004 : Code[20];
      newProjectType@1000000005 : Code[20];
      oldProjectType@1000000006 : Code[20];
      newProjectTypeRec@1000000008 : Record 11012009;
      oldProjectTypeRec@1000000007 : Record 11012009;
      dWindow@1000000009 : Dialog;

    BEGIN
    {
      RFC-187 AssNo503 - Reposting WIP to new project type

      "All open purchase orders and receipts on projects will be adjusted to the new gl-accounts";
      how do you want us to handle posted invoice-lines that are not yet approved in Symbrio?
      Posted in 4PS/NAV with an on-hold-code and might be rebooked by a journal when the approval arrives.

      This is only about purchase orders/invoices on projects, not for indirect purchases.
      Purchase orders for indirect cost will not be changed by this procedure.
      If there is an invoice linked to the order you don't do anything.
      If then in Symbrio they changes something, the system will generate a journal based on the cost object and this will go without a problem to the right g/l accounts in 4PS.
      I think it should be impossible to have a receipt on a purchase order without an invoice because of the way the Symbrio interface works but perhaps you should check anyway.
      If you find a receipt without an invoice that receipt AND the order should be changed.
    }
    END.
  }
  RDLDATA
  {
  }
}

