OBJECT Codeunit 11072073 Material Monitor Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            ERROR(Text11012000);
          END;

  }
  CODE
  {
    VAR
      CurrProject@1100525013 : Record 11072003;
      InventorySetup@1100525023 : Record 313;
      LastDisplayedMatMonCumLine@1100525018 : Record 11020577;
      MaterialMonitorSetup@1100525010 : Record 11020575;
      MatMonFilterset@1100525000 : Record 11020576;
      SelectedMatMonCumLine@1100525005 : Record 11020577;
      TempMatMon2Line@1100525001 : TEMPORARY Record 11020577;
      TempMatMon3Line@1100525002 : TEMPORARY Record 11020578;
      TempMatMon3DisplayLine@1100525015 : TEMPORARY Record 11020578;
      TempSection4AdviceOrderLine@1100525025 : TEMPORARY Record 11012055;
      TempProject@1100525003 : TEMPORARY Record 11072003;
      Text11012000@1100525008 : TextConst 'ENU=Material Monitor screen will use this codeunit.;NOR=Overv†kningsskjerm for materiale vil bruke denne kodeenheten';
      TempItem@1100525027 : TEMPORARY Record 27;
      TempItemUnitOfMeasure@1100526103 : TEMPORARY Record 5404;
      TempTradeItem@1100525028 : TEMPORARY Record 11012317;
      TempBaseItem@1100525029 : TEMPORARY Record 11012316;
      TempManufacturer@1100525031 : TEMPORARY Record 11012304;
      InventorySetupRead@1100525024 : Boolean;
      MatMonSettingsRead@1100525009 : Boolean;
      FirstTimeRunSect2@1100525020 : Boolean;
      FirstTimeRunSect3@1100525014 : Boolean;
      ChangeSelectedSection2Blocked@1100525022 : Boolean;
      RebuildData@1100525011 : Boolean;
      Section3ScreensOpen@1100525021 : Integer;
      FilterGroupValue@1100525007 : Integer;
      LastDet3RecNo@1100525012 : Integer;
      LastLine3No@1100525004 : Integer;
      StartDateFilter@1100525017 : Date;
      EndDateFilter@1100525016 : Date;
      Text11012003@1100525030 : TextConst 'ENU=Transactions prior period;NOR=Transaksjoner i forutg†ende periode';
      Text11012004@1100525032 : TextConst 'ENU=Item Availability per period \\is only usable for NAV item.;NOR=Artikkelens tilgjengelighet per periode \\kan kun brukes for NAV-artikkel.';
      Text11012006@1100526100 : TextConst 'ENU=No records selected.;NOR=Ingen poster valgt.';
      Text000@1100525033 : TextConst 'ENU=Finding Projects ...;NOR=Finner prosjekter ...';
      Text001@1210190000 : TextConst 'ENU=You are about to change the %1.\Are you sure?;NOR=Du er i ferd med † endre %1.\Er du sikker?';
      Text002@1100525035 : TextConst 'ENU=Finding Material Demand ...;NOR=Finner materialeettersp›rsel ...';
      Text003@1100525036 : TextConst 'ENU=Finding Planned Supply ...;NOR=Finner planlagt tilbud ...';
      Text004@1100525037 : TextConst 'ENU=Finding Available Supply ...;NOR=Finner tilgjengelig tilbud ...';
      Text010@1100525038 : TextConst 'ENU=Rebuilding Summary ...;NOR=Gjenoppbygger oppsummering ...';
      Text011@1100525006 : TextConst 'ENU=Calculating Summary ...';
      Text020@1100525039 : TextConst 'ENU=Nothing to create.;NOR=Det finnes ingenting † opprette.;SVE=Det finns inget att skapa.';
      Text021@1100526102 : TextConst 'ENU=Receipt Date changed with Requirement Date.;NOR=Kvitteringsdato endret med behovsdato';
      Text023@1100526104 : TextConst 'ENU=Requirement Date updated with %1 days.;NOR=Behovsdato oppdatert med %1 dager.';
      Window@1100525019 : Dialog;
      Text024@1100527450 : TextConst 'ENU="The Item Unit of Measure does not exist. Identification fields and values: Item No.=''%1'',Code=''%2''"';

    PROCEDURE "***SECTION 1 FUNCTIONS"@1100525017();
    BEGIN
    END;

    PROCEDURE A_LookupMainProjectFilter@1100526114(VAR MatMonUserSetup@1100525000 : Record 11020576);
    VAR
      Job@1100525002 : Record 11072003;
      JobList@1100525001 : Page 11072004;
    BEGIN
      WITH MatMonUserSetup DO BEGIN
        Job.FILTERGROUP(FilterGroupValue);
        Job.SETRANGE("Single/Main/Sub Project", Job."Single/Main/Sub Project"::"Main Project");
        Job.FILTERGROUP(0);
        JobList.LOOKUPMODE(TRUE);
        JobList.SETTABLEVIEW(Job);
        IF JobList.RUNMODAL = ACTION::LookupOK THEN BEGIN
          JobList.GetRecordSet(Job);
          MainProjectFilter := Job.GetSelectionFilter(Job);
        END;
      END;
    END;

    PROCEDURE A_LookupProjectFilter@1100525115(VAR MatMonUserSetup@1100525000 : Record 11020576);
    VAR
      Job@1100525002 : Record 11072003;
      JobList@1100525001 : Page 11072004;
    BEGIN
      WITH MatMonUserSetup DO BEGIN
        Job.FILTERGROUP(FilterGroupValue);
        Job.SETFILTER("Main Project", MainProjectFilter);
        IF (MainProjectFilter <> '') THEN
          Job.SETFILTER("Single/Main/Sub Project", '<>%1', Job."Single/Main/Sub Project"::"Main Project");
        Job.FILTERGROUP(0);
        JobList.LOOKUPMODE(TRUE);
        JobList.SETTABLEVIEW(Job);
        IF JobList.RUNMODAL = ACTION::LookupOK THEN BEGIN
          JobList.GetRecordSet(Job);
          ProjectFilter := Job.GetSelectionFilter(Job);
        END;
      END;
    END;

    PROCEDURE A_LookupElementFilter@1100526101(VAR MatMonUserSetup@1100525000 : Record 11020576);
    VAR
      ProjectElement@1100525002 : Record 11012010;
      ProjectElementList@1100525001 : Page 11012029;
    BEGIN
      WITH MatMonUserSetup DO BEGIN
        ProjectElement.FILTERGROUP(FilterGroupValue);
        ProjectElement.SETFILTER("Project No.", ProjectFilter);
        ProjectElement.FILTERGROUP(0);
        ProjectElementList.LOOKUPMODE(TRUE);
        ProjectElementList.SETTABLEVIEW(ProjectElement);
        IF ProjectElementList.RUNMODAL = ACTION::LookupOK THEN BEGIN
          ProjectElementList.GETRECORD(ProjectElement);
          ElementFilter := ProjectElement.Element;
        END;
      END;
    END;

    PROCEDURE A_LookupEntityTypeFilter@1100526105(VAR MatMonUserSetup@1100525000 : Record 11020576);
    VAR
      EntityType@1100525002 : Record 11012526;
      EntityTypeList@1100525001 : Page 11124845;
    BEGIN
      WITH MatMonUserSetup DO BEGIN
        EntityTypeList.LOOKUPMODE(TRUE);
        IF EntityTypeList.RUNMODAL = ACTION::LookupOK THEN BEGIN
          EntityTypeList.GETRECORD(EntityType);
          EntityTypeFilter := EntityTypeList.GetSelectionFilter;
        END;
      END;
    END;

    PROCEDURE A_LookupEntityFilter@1100526104(VAR MatMonUserSetup@1100525000 : Record 11020576);
    VAR
      AssemblyYardNumberObject@1100525001 : Record 11020596;
    BEGIN
      WITH MatMonUserSetup DO BEGIN
        IF (ProjectFilter <> '') THEN
          AssemblyYardNumberObject.SETFILTER("Project No.", ProjectFilter);
        IF (EntityTypeFilter <> '') THEN
          AssemblyYardNumberObject.SETFILTER("Entity Type", EntityTypeFilter);
        IF PAGE.RUNMODAL(PAGE::"Assembly Project Entity List", AssemblyYardNumberObject) = ACTION::LookupOK THEN
          EntityNoFilter := AssemblyYardNumberObject."Entity No.";
      END;
    END;

    PROCEDURE A_LookupBasicItemFilter@1100525001(VAR MatMonUserSetup@1100525003 : Record 11020576);
    VAR
      BasicItem@1100525002 : Record 11012316;
      BasicItemList@1100525000 : Page 11012333;
    BEGIN
      WITH MatMonUserSetup DO BEGIN
        BasicItemList.LOOKUPMODE(TRUE);
        IF BasicItemList.RUNMODAL = ACTION::LookupOK THEN BEGIN
          BasicItemList.GETRECORD(BasicItem);
          BasicItemFilter := BasicItem."Product Code";
        END;
      END;
    END;

    PROCEDURE A_LookupTradeItemFilter@1100525002(VAR MatMonUserSetup@1100525003 : Record 11020576);
    VAR
      TradeItem@1100525002 : Record 11012317;
      TradeItemList@1100525000 : Page 11012334;
    BEGIN
      WITH MatMonUserSetup DO BEGIN
        TradeItemList.LOOKUPMODE(TRUE);
        IF TradeItemList.RUNMODAL = ACTION::LookupOK THEN BEGIN
          TradeItemList.GETRECORD(TradeItem);
          TradeItemFilter := TradeItem."Product Code";
        END;
      END;
    END;

    PROCEDURE A_LookupItemFilter@1100525005(VAR MatMonUserSetup@1100525003 : Record 11020576);
    VAR
      Item@1100525002 : Record 27;
      ItemList@1100525000 : Page 31;
    BEGIN
      WITH MatMonUserSetup DO BEGIN
        ItemList.LOOKUPMODE(TRUE);
        IF ItemList.RUNMODAL = ACTION::LookupOK THEN BEGIN
          ItemList.GETRECORD(Item);
          ItemFilter := ItemList.GetSelectionFilter;
        END;
      END;
    END;

    PROCEDURE A_LookupItemCategoryFilter@1210190002(VAR MatMonUserSetup@1100525003 : Record 11020576);
    VAR
      ItemCategory@1100525002 : Record 5722;
      ItemCategoryList@1100525000 : Page 5730;
    BEGIN
      WITH MatMonUserSetup DO BEGIN
        ItemCategoryList.LOOKUPMODE(TRUE);
        IF ItemCategoryList.RUNMODAL = ACTION::LookupOK THEN BEGIN
          ItemCategoryList.GetRecordSet(ItemCategory);
          ItemCategoryFilter := ItemCategory.GetSelectionFilter(ItemCategory);
        END;
      END;
    END;

    PROCEDURE A_LookupCostObjectFilter@1210190001(VAR MatMonUserSetup@1100525003 : Record 11020576);
    VAR
      DimensionValue@1100525002 : Record 349;
      DimensionValueList@1100525000 : Page 537;
    BEGIN
      WITH MatMonUserSetup DO BEGIN
        DimensionValue.FILTERGROUP(FilterGroupValue);
        DimensionValue.SETRANGE("Global Dimension No.", 2);
        DimensionValue.SETRANGE("Cost Type", DimensionValue."Cost Type"::Material);
        DimensionValue.FILTERGROUP(0);
        DimensionValueList.LOOKUPMODE(TRUE);
        IF DimensionValueList.RUNMODAL = ACTION::LookupOK THEN BEGIN
          DimensionValueList.GETRECORD(DimensionValue);
          CostObjectFilter := DimensionValueList.GetSelectionFilter;
        END;
      END;
    END;

    PROCEDURE A_LookupLocationFilter@1100528301(VAR MatMonUserSetup@1100525003 : Record 11020576);
    VAR
      Location@1100525002 : Record 14;
      LocationList@1100525000 : Page 15;
    BEGIN
      WITH MatMonUserSetup DO BEGIN
        LocationList.LOOKUPMODE(TRUE);
        IF LocationList.RUNMODAL = ACTION::LookupOK THEN BEGIN
          LocationList.GETRECORD(Location);
          LocationFilter := LocationList.GetSelectionFilter;
        END;
      END;
    END;

    PROCEDURE A_ShowProjectCard@1100525060(ProjectNo@1100525003 : Code[20]);
    VAR
      Job@1100525002 : Record 11072003;
      JobCard@1100525000 : Page 11072003;
    BEGIN
      JobCard.LOOKUPMODE(TRUE);
      Job.FILTERGROUP(FilterGroupValue);
      Job.SETRANGE("No.",ProjectNo);
      Job.FILTERGROUP(0);
      JobCard.SETTABLEVIEW(Job);
      JobCard.RUNMODAL;
    END;

    PROCEDURE A_GetMatMonUser@1100525082(VAR MaterialMonitorUserSetup@1100525000 : Record 11020576);
    VAR
      MatMonUserSetup@1100525001 : Record 11020576;
    BEGIN
      WITH MatMonUserSetup DO BEGIN
        IF NOT GET(USERID) THEN BEGIN
          MatMonUserID := USERID;
          INIT;
          GetMatMonSettings;
        END;
        //Clear the next filter fields:
        ElementFilter := '';
        YardNoFilter := '';
        SystemNoFilter := '';
        EntityTypeFilter := '';
        EntityNoFilter := '';
        BasicItemFilter := '';
        TradeItemFilter := '';
        ItemFilter := '';
        DateFilter := '';
        UnbalanceWorkDate := WORKDATE; //kzwerver, 11121, n
        ShiftRequirementDate := 0; //kzwerver, 110124, n
        MaterialMonitorUserSetup := MatMonUserSetup;
      END;
    END;

    PROCEDURE A_GetCurrMatMonUser@1100525105(VAR MaterialMonitorUserSetup@1100525000 : Record 11020576);
    BEGIN
      MaterialMonitorUserSetup := MatMonFilterset
    END;

    PROCEDURE A_InitMatMonUser@1100525004(VAR MaterialMonitorUserSetup@1100525000 : Record 11020576);
    BEGIN
      //Function transmits /the user defined filter settings to this codeunit by means of the record MaterialMonitorUserSetup
      WITH MaterialMonitorUserSetup DO BEGIN
        FindStartEndFromDateFilter(DateFilter,StartDateFilter,EndDateFilter);
        MatMonFilterset := MaterialMonitorUserSetup;
      END;
      TempMatMon2Line.RESET;
      TempMatMon3Line.RESET;
      TempMatMon3DisplayLine.RESET;
      B_UnblockChangeSelectedSect2r;
      FilterGroupValue := 120;
      ChangeSelectedSection2Blocked := FALSE;
    END;

    PROCEDURE A_SaveMatMonUser@1100525084(MaterialMonitorUserSetup@1100525001 : Record 11020576);
    VAR
      MatMonUserSetup@1100525000 : Record 11020576;
    BEGIN
      WITH MatMonUserSetup DO BEGIN
        IF GET(USERID) THEN BEGIN
          //MatMonUserSetup := MaterialMonitorUserSetup;
          MatMonUserSetup.TRANSFERFIELDS(MaterialMonitorUserSetup);
          MODIFY;
        END ELSE BEGIN
          //MatMonUserSetup := MaterialMonitorUserSetup;
          MatMonUserSetup.TRANSFERFIELDS(MaterialMonitorUserSetup);
          INSERT;
        END;
      END;

      //Clear all Temp tables
      ClearTempTables(FALSE);
    END;

    PROCEDURE A_ValidateMatMonFilter@1100526117(MaterialMonitorUserSetup@1100526100 : Record 11020576);
    BEGIN
      //WITH MaterialMonitorUserSetup DO BEGIN
      //END;
    END;

    PROCEDURE A_RebuildData@1100525104() Rebuild : Boolean;
    BEGIN
      IF (RebuildData) THEN
        Rebuild := TRUE;
      EXIT(Rebuild);
    END;

    PROCEDURE "***SECTION 2 FUNCTIONS"@1100525018();
    BEGIN
    END;

    PROCEDURE B_FindRecord@1100525007(Which@1100525000 : Text[1024];VAR DisplayRec@1100525002 : Record 11020577) : Boolean;
    VAR
      TempMaterialMonitorCumulLine@1100525004 : TEMPORARY Record 11020577;
    BEGIN
      //All filters from MatMonFilterset are applied on section3 level except the next ones:
      // 1. Unbalance filters: Too Late/Early/Little/Much
      // 2. InNrOfDaysFilter
      // 3. SupplyPercOfDemand
      //These all need to be applied on section2 level.
      CADD_PostFilterSection2;

      //Save filters put unto TempMatMon2Line
      TempMaterialMonitorCumulLine.COPY(TempMatMon2Line);
      TempMatMon2Line := DisplayRec;

      //Also User requested filtering (via DisplayRec) should be used.
      IF FirstTimeRunSect2 THEN
        //do not copy this filters the first time, because then this was saved from screen itself
        TempMatMon2Line.COPYFILTERS(DisplayRec)
      ELSE
        //remove saved filters if fisrst time run
        DisplayRec.RESET;
      FirstTimeRunSect2 := TRUE;

      //Restore Unbalance filters on TempMatMon2Line saved into TempMaterialMonitorCumulLine
      TempMaterialMonitorCumulLine.COPYFILTER("Unbalance Type",TempMatMon2Line."Unbalance Type"); //kzwerver, 110120,n
      TempMaterialMonitorCumulLine.COPYFILTER("In Balance",TempMatMon2Line."In Balance");
      TempMaterialMonitorCumulLine.COPYFILTER(InNrOfDaysFilter,TempMatMon2Line.InNrOfDaysFilter);
      TempMaterialMonitorCumulLine.COPYFILTER(SupplyPercOfDemand,TempMatMon2Line.SupplyPercOfDemand);
      IF NOT TempMatMon2Line.FIND(Which) THEN
        EXIT(FALSE);
      DisplayRec := TempMatMon2Line;
      SelectedMatMonCumLine := DisplayRec;

      EXIT(TRUE);
    END;

    PROCEDURE B_NextRecord@1100525011(Steps@1100525000 : Integer;VAR DisplayRec@1100525001 : Record 11020577) : Integer;
    VAR
      NoOfSteps@1100525003 : Integer;
    BEGIN
      TempMatMon2Line := DisplayRec;
      NoOfSteps := TempMatMon2Line.NEXT(Steps);
      IF (NoOfSteps <> 0) THEN BEGIN
        DisplayRec := TempMatMon2Line;
        IF NOT ChangeSelectedSection2Blocked THEN
          SelectedMatMonCumLine := DisplayRec;
      END;
      EXIT(NoOfSteps);
    END;

    PROCEDURE B_UpdatQtySuggestedExtraAdvice@1100525042(MaterialMonitorCumulLine@1100525000 : Record 11020577);
    BEGIN
      //Pre:  User entered new value into field MaterialMonitorCumulLine."Qty (Suggested Extra Advice)"
      //Post: New value is processed into belonging record in codeunit recordset TempMatMon2Line
      WITH TempMatMon2Line DO BEGIN
        RESET;
        SETRANGE("Project No.", MaterialMonitorCumulLine."Project No.");
        SETRANGE("Element No.", MaterialMonitorCumulLine."Element No.");
        SETRANGE("Yard No.", MaterialMonitorCumulLine."Yard No.");
        SETRANGE("System No.", MaterialMonitorCumulLine."System No.");
        SETRANGE("Entity Type", MaterialMonitorCumulLine."Entity Type");
        SETRANGE("Entity No.", MaterialMonitorCumulLine."Entity No.");
        SETRANGE("Item No.", MaterialMonitorCumulLine."Item No.");
        SETRANGE("Basic Item", MaterialMonitorCumulLine."Basic Item");
        SETRANGE("Trade Item", MaterialMonitorCumulLine."Trade Item");
        SETRANGE("Base UOM", MaterialMonitorCumulLine."Base UOM");
        SETRANGE("Cost Object",MaterialMonitorCumulLine."Cost Object");
        SETRANGE("Item Category",MaterialMonitorCumulLine."Item Category");
        SETRANGE("Item Description",MaterialMonitorCumulLine."Item Description");
        FINDFIRST; //record must exist
        "Qty (Suggested Extra Advice)" := MaterialMonitorCumulLine."Qty (Suggested Extra Advice)";
        MODIFY;
        RESET;
      END;
    END;

    PROCEDURE B_UpdateReqDateFromShiftReqDat@1100526108(ShiftDays@1100526100 : Integer) : Boolean;
    BEGIN
      //kzwerver, 110125, n
      IF (NOT CONFIRM(Text001, FALSE, MatMonFilterset.FIELDCAPTION(ShiftRequirementDate))) THEN
        EXIT(FALSE);
      WITH TempMatMon2Line DO BEGIN
        IF FINDSET THEN BEGIN
          REPEAT
            UpdateDelDateInMatReqLines(TempMatMon2Line, ShiftDays);
          UNTIL (NEXT=0);
          MESSAGE(Text023, ShiftDays);
          EXIT(TRUE);
        END;
      END;
      EXIT(FALSE);
    END;

    PROCEDURE B_UpdateAdvDateWithDeliverDate@1100526111() : Boolean;
    VAR
      ProjectMaterialReqLine@1100526101 : Record 11012526;
    BEGIN
      //kzwerver, 110125, n
      WITH ProjectMaterialReqLine DO BEGIN
        //Apply MatMonFilterset filters
        SETFILTER("Project No.", MatMonFilterset.ProjectFilter);
        SETFILTER(Element, MatMonFilterset.ElementFilter);
        SETFILTER("Yard No.", MatMonFilterset.YardNoFilter);
        SETFILTER("System No.", MatMonFilterset.SystemNoFilter);
        SETFILTER("Entity Type", MatMonFilterset.EntityTypeFilter);
        SETFILTER("Entity No.", MatMonFilterset.EntityNoFilter);
        SETFILTER("Item No.", MatMonFilterset.ItemFilter);
        SETFILTER("Basic Item", MatMonFilterset.BasicItemFilter);
        SETFILTER("Trade Item", MatMonFilterset.TradeItemFilter);
        IF FINDSET THEN BEGIN
          REPEAT
            UpdateSupplyAdviceDate(ProjectMaterialReqLine);
          UNTIL (NEXT=0);
          MESSAGE(Text021);
          EXIT(TRUE);
        END;
      END;
      EXIT(FALSE);
    END;

    PROCEDURE B_UpdateCreateAdviceOrder@1100525092(MaterialMonitorCumulLine@1100525000 : Record 11020577);
    BEGIN
      //Pre:  User entered new value into field MaterialMonitorCumulLine.CreateAdvice
      //Post: New value is processed into belonging record in codeunit recordset TempMatMon2Line
      WITH TempMatMon2Line DO BEGIN
        SETRANGE("Project No.", MaterialMonitorCumulLine."Project No.");
        SETRANGE("Element No.", MaterialMonitorCumulLine."Element No.");
        SETRANGE("Yard No.", MaterialMonitorCumulLine."Yard No.");
        SETRANGE("System No.", MaterialMonitorCumulLine."System No.");
        SETRANGE("Entity Type", MaterialMonitorCumulLine."Entity Type");
        SETRANGE("Entity No.", MaterialMonitorCumulLine."Entity No.");
        SETRANGE("Item No.", MaterialMonitorCumulLine."Item No.");
        SETRANGE("Basic Item", MaterialMonitorCumulLine."Basic Item");
        SETRANGE("Trade Item", MaterialMonitorCumulLine."Trade Item");
        SETRANGE("Base UOM", MaterialMonitorCumulLine."Base UOM");
        SETRANGE("Cost Object",MaterialMonitorCumulLine."Cost Object");
        SETRANGE("Item Category",MaterialMonitorCumulLine."Item Category");
        SETRANGE("Item Description",MaterialMonitorCumulLine."Item Description");
        FINDFIRST; //record must exist
        CreateAdvice := MaterialMonitorCumulLine.CreateAdvice;
        //kzwerver, 110810, sn, #23034
        "Delivery Method" := MaterialMonitorCumulLine."Delivery Method";
        //kzwerver, 110810, en, #23034
        MODIFY;
        RESET;
      END;
    END;

    PROCEDURE B_CreateExtraAdviceOrders@1100525054() : Boolean;
    BEGIN
      //Pre:  User can select multiple records on Main Subform section2. Transferred by recordset: MaterialMonitorCumulLine
      //Post: For each of the selected records in this recordset an Advice Order will be created.
      WITH TempMatMon2Line DO BEGIN
        RESET;
        SETRANGE(CreateAdvice,TRUE);
        IF NOT FINDSET(TRUE,FALSE) THEN BEGIN
          MESSAGE(Text020);
          EXIT(FALSE);
        END;

        //kzwerver, 110810, c, #23034
        //DftShippingDate := GetEarliestDemandDate;
        //MatMonAdviceorderDefaults.SetParameters(DftShippingDate);
        //MatMonAdviceorderDefaults.LOOKUPMODE(TRUE);
        //IF MatMonAdviceorderDefaults.RUNMODAL=ACTION::LookupOK THEN
        //  MatMonAdviceorderDefaults.GetParameters(DftDeliver,DftLocation,DftShippingDate)
        //ELSE
        //  ERROR(Text11012001);
        REPEAT
          IF ("Qty (Suggested Extra Advice)" > 0) THEN
            B_CreateExtraAdviceOrder(TempMatMon2Line);
          VALIDATE(CreateAdvice, FALSE);
          MODIFY;
        UNTIL (NEXT=0);
      END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE B_CreateExtraAdviceOrder@1100525056(MaterialMonitorCumulLine@1100525000 : Record 11020577);
    VAR
      AdviceOrderLine@1100525002 : Record 11012055;
      PreferenceLocation@1100525003 : Record 11020353;
      NextLineNo@1100525001 : Integer;
    BEGIN
      //Pre:  User selected to create Advice Order based upon: "Qty (Suggested Extra Advice)"
      //Post: Advice Order will be created for selected MaterialMonitorCumulLine
      //
      //Note: If this function is changed, you have to check the function in
      //      Table Project Material Req. Line::CreateAdviceOrderLine
      WITH MaterialMonitorCumulLine DO BEGIN
        TempProject.GET("Project No.");
        AdviceOrderLine.SETRANGE("Record Type", AdviceOrderLine."Record Type"::Project);
        AdviceOrderLine.SETRANGE("Project No.", TempProject."No."); //This is the sub project
        IF AdviceOrderLine.FINDLAST THEN
          NextLineNo := AdviceOrderLine."Line No." + 10000
        ELSE
          NextLineNo := 10000;

        AdviceOrderLine.INIT;
        AdviceOrderLine."Record Type" := AdviceOrderLine."Record Type"::Project;
        AdviceOrderLine."Project No." := TempProject."No."; //This is the sub project
        AdviceOrderLine."Line No." := NextLineNo;
        AdviceOrderLine.InitRecord;
        AdviceOrderLine.VALIDATE(Element, "Element No.");
        AdviceOrderLine.VALIDATE("Item No.", "Item No.");
        AdviceOrderLine.VALIDATE("Vendor (Trade Item)", "Vendor (Trade Item)");
        AdviceOrderLine.VALIDATE("Trade Item", "Trade Item");
        AdviceOrderLine.VALIDATE(Manufacturer, Manufacturer);
        AdviceOrderLine.VALIDATE("Basic Item", "Basic Item");
        AdviceOrderLine.VALIDATE("Cost Object", "Cost Object");
        AdviceOrderLine."Variant Code" := '';
        AdviceOrderLine.Description := "Item Description";
        AdviceOrderLine."Description 2" := "Item Description2";
        AdviceOrderLine."Unit of Measure" := "Base UOM";
        AdviceOrderLine.VALIDATE(Deliver, "Delivery Method");
        AdviceOrderLine.VALIDATE("Quantity (Budget)", "Qty (Suggested Extra Advice)");
        AdviceOrderLine."Quantity (Advice)" := "Qty (Suggested Extra Advice)"; //kzwerver, 110427, c, #27053
        //AdviceOrderLine.VALIDATE("Ship To Location", Location); //kzwerver, 110427, o, #27063
        //AdviceOrderLine.EvaluateStartDate(ShippingDate); //kzwerver, 110427, o, #27063
        AdviceOrderLine."Yard No." := "Yard No.";
        AdviceOrderLine."Entity Type" := "Entity Type";
        AdviceOrderLine."System No." := "System No.";
        AdviceOrderLine."Entity No." := "Entity No.";
        //AdviceOrderLine."Cable Transit Pos." := ;
        AdviceOrderLine."Main Project No." := TempProject."Main Project";

        CASE AdviceOrderLine.Deliver OF
          AdviceOrderLine.Deliver::Location:  BEGIN
            PreferenceLocation.SETCURRENTKEY(Priority);
            PreferenceLocation.SETRANGE(Type, PreferenceLocation.Type::Job);
            PreferenceLocation.SETRANGE("No.", AdviceOrderLine."Project No.");
            IF (PreferenceLocation.FINDFIRST) THEN
              AdviceOrderLine."Ship To Location" := PreferenceLocation."Location Code";
          END;
        END;

        AdviceOrderLine."Created by" := USERID;
        AdviceOrderLine."Date Created" := TODAY;
        AdviceOrderLine."Modified by" := AdviceOrderLine."Created by";
        AdviceOrderLine."Last Date Modified" := AdviceOrderLine."Date Created";

        AdviceOrderLine.INSERT(FALSE);

        CopyPurchaseLineDetail(AdviceOrderLine); //kzwerver, 110606, n, #27784
      END;
    END;

    PROCEDURE B_DrllDwnQtyPECmaterialreqrmnt@1100525035(MaterialMonitorCumulLine@1100525003 : Record 11020577);
    VAR
      ProjectMaterialReqLine@1100525001 : Record 11012526;
      ProjectMatReqLineList@1100525000 : Page 11072352;
    BEGIN
      WITH MaterialMonitorCumulLine DO BEGIN
        ProjectMaterialReqLine.RESET;
        ProjectMaterialReqLine.FILTERGROUP(FilterGroupValue);
        ProjectMaterialReqLine.SETCURRENTKEY("Project No.","Yard No.","Item No.","Basic Item","Trade Item");
        ProjectMaterialReqLine.SETRANGE("Project No.","Project No.");
        IF ("Yard No."+"System No."+"Entity No." <> '') OR ("Entity Type" <> 0) THEN BEGIN //kzwerver, 121209, n
          ProjectMaterialReqLine.SETRANGE("Yard No.","Yard No.");
          ProjectMaterialReqLine.SETRANGE("System No.","System No.");
          ProjectMaterialReqLine.SETRANGE("Entity Type","Entity Type");
          ProjectMaterialReqLine.SETRANGE("Entity No.","Entity No.");
        END;
        ProjectMaterialReqLine.SETRANGE(Element,"Element No.");
        ProjectMaterialReqLine.SETRANGE("Basic Item","Basic Item");
        ProjectMaterialReqLine.SETRANGE(Manufacturer,Manufacturer);
        ProjectMaterialReqLine.SETRANGE("Trade Item","Trade Item");
        ProjectMaterialReqLine.SETRANGE("Vendor (Trade Item)", "Vendor (Trade Item)");
        ProjectMaterialReqLine.SETRANGE("Item No.","Item No.");
        ProjectMaterialReqLine.SETRANGE("Cost Object","Cost Object");
        ProjectMaterialReqLine.SETFILTER("Delivery Date",'..%1',EndDateFilter);
        ProjectMaterialReqLine.FILTERGROUP(0);

        ProjectMatReqLineList.LOOKUPMODE(TRUE);
        ProjectMatReqLineList.SETTABLEVIEW(ProjectMaterialReqLine);
        IF ProjectMatReqLineList.RUNMODAL = ACTION::LookupOK THEN;
      END;
    END;

    PROCEDURE B_DrllDwnQtyBudget@1100525040(MaterialMonitorCumulLine@1100525003 : Record 11020577);
    VAR
      BudgetLine@1100525001 : Record 11012001;
      BudgetList@1100525000 : Page 11012005;
    BEGIN
      WITH MaterialMonitorCumulLine DO BEGIN
        BudgetLine.RESET;
        BudgetLine.FILTERGROUP(FilterGroupValue);
        BudgetLine.SETCURRENTKEY("Project No.");
        BudgetLine.SETRANGE("Project No.","Project No.");
        BudgetLine.SETRANGE(Element,"Element No.");
        BudgetLine.SETRANGE("Cost Type",BudgetLine."Cost Type"::Material);
        BudgetLine.SETRANGE("Item No.","Item No.");
        BudgetLine.SETRANGE("Basic Item","Basic Item");
        BudgetLine.SETRANGE(Manufacturer,Manufacturer);
        BudgetLine.SETRANGE("Trade Item","Trade Item");
        BudgetLine.SETRANGE("Vendor (Trade Item)", "Vendor (Trade Item)");
        BudgetLine.SETRANGE("Cost Object", "Cost Object");
        BudgetLine.FILTERGROUP(0);

        BudgetList.LOOKUPMODE(TRUE);
        BudgetList.SETTABLEVIEW(BudgetLine);
        IF BudgetList.RUNMODAL = ACTION::LookupOK THEN;
      END;
    END;

    PROCEDURE B_DrllDwnQtyAdviceOrders@1100525043(MaterialMonitorCumulLine@1100525003 : Record 11020577);
    VAR
      AdviceOrderLine@1100525001 : Record 11012055;
      AdviceOrderLines@1100525000 : Page 11012122;
    BEGIN
      WITH MaterialMonitorCumulLine DO BEGIN
        AdviceOrderLine.RESET;
        AdviceOrderLine.FILTERGROUP(FilterGroupValue);
        AdviceOrderLine.SETCURRENTKEY("Project No.");
        AdviceOrderLine.SETRANGE("Project No.","Project No.");
        IF ("Yard No."+"System No."+"Entity No." <> '') OR ("Entity Type" <> 0) THEN BEGIN //kzwerver, 121209, n
          AdviceOrderLine.SETRANGE("Yard No.","Yard No.");
          AdviceOrderLine.SETRANGE("System No.","System No.");
          AdviceOrderLine.SETRANGE("Entity Type","Entity Type");
          AdviceOrderLine.SETRANGE("Entity No.","Entity No.");
        END;
        AdviceOrderLine.SETRANGE(Element,"Element No.");
        AdviceOrderLine.SETRANGE("Basic Item","Basic Item");
        AdviceOrderLine.SETRANGE(Manufacturer, Manufacturer);
        AdviceOrderLine.SETRANGE("Trade Item","Trade Item");
        AdviceOrderLine.SETRANGE("Vendor (Trade Item)", "Vendor (Trade Item)");
        AdviceOrderLine.SETRANGE("Item No.","Item No.");
        AdviceOrderLine.SETRANGE(Processed,FALSE);
        AdviceOrderLine.SETFILTER("Receipt Date",'..%1',EndDateFilter);
        AdviceOrderLine.FILTERGROUP(0);

        AdviceOrderLines.LOOKUPMODE(TRUE);
        AdviceOrderLines.SETTABLEVIEW(AdviceOrderLine);
        IF AdviceOrderLines.RUNMODAL = ACTION::LookupOK THEN;
      END;
    END;

    PROCEDURE B_DrllDwnQtyPurchaseOrders@1100525045(MaterialMonitorCumulLine@1100525003 : Record 11020577);
    VAR
      PurchaseLine@1100525001 : Record 39;
      PurchaseLines@1100525000 : Page 518;
    BEGIN
      WITH MaterialMonitorCumulLine DO BEGIN
        PurchaseLine.FILTERGROUP(FilterGroupValue);
        PurchaseLine.SETCURRENTKEY("Job No.");
        PurchaseLine.SETRANGE("Job No.","Project No.");
        PurchaseLine.SETRANGE(Element,"Element No.");
        PurchaseLine.SETRANGE("Basic Item","Basic Item");
        PurchaseLine.SETRANGE(Manufacturer, Manufacturer);
        PurchaseLine.SETRANGE("Trade Item","Trade Item");
        PurchaseLine.SETRANGE("Vendor (Trade Item)", "Vendor (Trade Item)");
        PurchaseLine.SETRANGE("Item No.","Item No.");
        PurchaseLine.SETRANGE("Shortcut Dimension 2 Code","Cost Object");
        PurchaseLine.SETFILTER("Outstanding Qty. (Base)",'<>%1',0);
        IF ("Yard No."+"System No."+"Entity No." <> '') OR ("Entity Type" <> 0) THEN //kzwerver, 121209, n
          PurchaseLine.SETRANGE("Entity Type","Entity Type");
        PurchaseLine.SETFILTER("Purchase Order Type",'%1|%2',
                               PurchaseLine."Purchase Order Type"::"Purchase Order",
                               PurchaseLine."Purchase Order Type"::"Return Order");
        PurchaseLine.SETRANGE("Document Type",PurchaseLine."Document Type"::Order);
        PurchaseLine.SETFILTER("Expected Receipt Date",'..%1',EndDateFilter);
        SetFilterPurchaseLineExtension(PurchaseLine, MaterialMonitorCumulLine);
        PurchaseLine.FILTERGROUP(0);
      END;

      PurchaseLines.LOOKUPMODE(TRUE);
      PurchaseLines.SETTABLEVIEW(PurchaseLine);
      IF PurchaseLines.RUNMODAL = ACTION::LookupOK THEN;
    END;

    PROCEDURE B_DrllDwnQtyBlanketOrders@1210190004(MaterialMonitorCumulLine@1100525003 : Record 11020577);
    VAR
      PurchaseLine@1100525001 : Record 39;
      PurchaseLines@1100525000 : Page 518;
    BEGIN
      WITH MaterialMonitorCumulLine DO BEGIN
        //PurchaseLine.FILTERGROUP(FilterGroupValue);
        PurchaseLine.SETCURRENTKEY("Job No.");
        PurchaseLine.SETRANGE("Job No.","Project No.");
        PurchaseLine.SETRANGE(Element,"Element No.");
        PurchaseLine.SETRANGE("Basic Item","Basic Item");
        PurchaseLine.SETRANGE(Manufacturer, Manufacturer);
        PurchaseLine.SETRANGE("Trade Item","Trade Item");
        PurchaseLine.SETRANGE("Vendor (Trade Item)", "Vendor (Trade Item)");
        PurchaseLine.SETRANGE("Item No.","Item No.");
        PurchaseLine.SETRANGE("Shortcut Dimension 2 Code","Cost Object");
        PurchaseLine.SETFILTER("Outstanding Qty. (Base)",'<>%1',0);
        IF ("Yard No."+"System No."+"Entity No." <> '') OR ("Entity Type" <> 0) THEN //kzwerver, 121209, n
          PurchaseLine.SETRANGE("Entity Type","Entity Type");
        PurchaseLine.SETFILTER("Purchase Order Type",'%1|%2',
                               PurchaseLine."Purchase Order Type"::"Purchase Order",
                               PurchaseLine."Purchase Order Type"::"Return Order");
        PurchaseLine.SETRANGE("Document Type", PurchaseLine."Document Type"::"Blanket Order");
        PurchaseLine.SETFILTER("Expected Receipt Date",'..%1',EndDateFilter);
        SetFilterPurchaseLineExtension(PurchaseLine, MaterialMonitorCumulLine);
        PurchaseLine.FILTERGROUP(0);
      END;

      PurchaseLines.LOOKUPMODE(TRUE);
      PurchaseLines.SETTABLEVIEW(PurchaseLine);
      IF PurchaseLines.RUNMODAL = ACTION::LookupOK THEN;
    END;

    PROCEDURE B_DrllDwnQtyReceived@1100525050(MaterialMonitorCumulLine@1100525003 : Record 11020577);
    VAR
      PurchRcptLine@1100525001 : Record 121;
      PurchReceiptLines@1100525000 : Page 5806;
    BEGIN
      WITH MaterialMonitorCumulLine DO BEGIN
        PurchRcptLine.RESET;
        PurchRcptLine.FILTERGROUP(FilterGroupValue);
        PurchRcptLine.SETCURRENTKEY("Job No.");
        PurchRcptLine.SETRANGE("Job No.","Project No.");
        IF ("Yard No."+"System No."+"Entity No." <> '') OR ("Entity Type" <> 0) THEN BEGIN //kzwerver, 121209, n
          PurchRcptLine.SETRANGE("Yard No.","Yard No.");
          PurchRcptLine.SETRANGE("System No.","System No.");
          PurchRcptLine.SETRANGE("Entity Type","Entity Type");
          PurchRcptLine.SETRANGE("Entity No.","Entity No.");
        END;
        PurchRcptLine.SETRANGE(Element,"Element No.");
        PurchRcptLine.SETRANGE("Basic Item","Basic Item");
        PurchRcptLine.SETRANGE(Manufacturer, Manufacturer);
        PurchRcptLine.SETRANGE("Trade Item","Trade Item");
        PurchRcptLine.SETRANGE("Vendor (Trade Item)", "Vendor (Trade Item)");
        PurchRcptLine.SETRANGE("Item No.","Item No.");
        PurchRcptLine.SETRANGE("Shortcut Dimension 2 Code","Cost Object");
        PurchRcptLine.SETFILTER("Posting Date",'..%1',EndDateFilter);
        PurchRcptLine.FILTERGROUP(0);

        PurchReceiptLines.LOOKUPMODE(TRUE);
        PurchReceiptLines.SETTABLEVIEW(PurchRcptLine);
        IF PurchReceiptLines.RUNMODAL = ACTION::LookupOK THEN;
      END;
    END;

    PROCEDURE B_DrllDwnQtyInventoryOrders@1100525053(MaterialMonitorCumulLine@1100525003 : Record 11020577);
    VAR
      ItemJournalLine@1100525001 : Record 83;
      ItemJournalLines@1100525000 : Page 519;
    BEGIN
      WITH MaterialMonitorCumulLine DO BEGIN
        ItemJournalLine.RESET;
        ItemJournalLine.FILTERGROUP(FilterGroupValue);
        //Possible keys
        // Job No.,Ship To Location,Line No.
      //Main Project No.,Job No.,Cost Component,Cost Type,Shortcut Dimension 2 Code,Production Order Amount,Ovh.Surch.Expected Costs (LC
        ItemJournalLine.SETCURRENTKEY("Job No.");
        ItemJournalLine.SETRANGE("Job No.","Project No.");
        IF ("Yard No."+"System No."+"Entity No." <> '') OR ("Entity Type" <> 0) THEN BEGIN //kzwerver, 121209, n
          ItemJournalLine.SETRANGE("Yard No.","Yard No.");
          ItemJournalLine.SETRANGE("System No.","System No.");
          ItemJournalLine.SETRANGE("Entity Type","Entity Type");
          ItemJournalLine.SETRANGE("Entity No.","Entity No.");
        END;
        ItemJournalLine.SETRANGE(Element,"Element No.");
        ItemJournalLine.SETRANGE("Item No.","Item No.");
        ItemJournalLine.FILTERGROUP(0);

        ItemJournalLines.LOOKUPMODE(TRUE);
        ItemJournalLines.SETTABLEVIEW(ItemJournalLine);
        IF ItemJournalLines.RUNMODAL = ACTION::LookupOK THEN;
      END;
    END;

    PROCEDURE B_DrllDwnQtyJobUsage@1100525055(MaterialMonitorCumulLine@1100525003 : Record 11020577);
    VAR
      ProjectInventoryEntry@1100525001 : Record 11012670;
      JobLedgerEntry@1100525004 : Record 11072005;
      JobLedgerEntries@1100525000 : Page 11072005;
    BEGIN
      WITH MaterialMonitorCumulLine DO BEGIN
        IF C_ProjectHoldsInventory("Project No.") THEN BEGIN
          ProjectInventoryEntry.RESET;
          ProjectInventoryEntry.SETCURRENTKEY("Project No.");
          ProjectInventoryEntry.FILTERGROUP(FilterGroupValue);
          ProjectInventoryEntry.SETRANGE("Project No.","Project No.");
          IF ("Yard No."+"System No."+"Entity No." <> '') OR ("Entity Type" <> 0) THEN BEGIN //kzwerver, 121209, n
            ProjectInventoryEntry.SETRANGE("Yard No.","Yard No.");
            ProjectInventoryEntry.SETRANGE("System No.","System No.");
            ProjectInventoryEntry.SETRANGE("Entity Type","Entity Type");
            ProjectInventoryEntry.SETRANGE("Entity No.","Entity No.");
          END;
          ProjectInventoryEntry.SETRANGE(Element,"Element No.");
          ProjectInventoryEntry.SETRANGE("Basic Item","Basic Item");
          ProjectInventoryEntry.SETRANGE(Manufacturer, Manufacturer);
          ProjectInventoryEntry.SETRANGE("Trade Item","Trade Item");
          ProjectInventoryEntry.SETRANGE("Vendor (Trade Item)", "Vendor (Trade Item)");
          ProjectInventoryEntry.SETRANGE("Item No.","Item No.");
          ProjectInventoryEntry.SETRANGE("Cost Object", "Cost Object");
          ProjectInventoryEntry.SETFILTER("Posting Date",'..%1',EndDateFilter);
          ProjectInventoryEntry.SETRANGE("Entry Type",ProjectInventoryEntry."Entry Type"::StockReceipt);
          ProjectInventoryEntry.FILTERGROUP(0);
          PAGE.RUNMODAL(PAGE::"Project Inventory List", ProjectInventoryEntry);
        END ELSE BEGIN
          JobLedgerEntry.RESET;
          //Possible keys:
          // Job No.,Element,Cost Type,Entry Type,Posting Date
          // Job No.,Cost Type,Entry Type,Posting Date,Purchase Action
          // Main Project No.,Job No.,Cost Type,Global Dimension 2 Code,Entry Type,Posting Date,Purchase Action
          // Main Project No.,Job No.,Entry Type,Engineering Global Dim 1 Code,Element,Cost Type,Global Dimension 2 Code,Posting Date
          JobLedgerEntry.SETCURRENTKEY("Job No.","Cost Type","Entry Type");
          JobLedgerEntry.FILTERGROUP(FilterGroupValue);
          JobLedgerEntry.SETRANGE("Job No.","Project No.");
          IF ("Yard No."+"System No."+"Entity No." <> '') OR ("Entity Type" <> 0) THEN BEGIN //kzwerver, 121209, n
            JobLedgerEntry.SETRANGE("Yard No.","Yard No.");
            JobLedgerEntry.SETRANGE("System No.","System No.");
            JobLedgerEntry.SETRANGE("Entity Type","Entity Type");
            JobLedgerEntry.SETRANGE("Entity No.","Entity No.");
          END;
          JobLedgerEntry.SETRANGE(Element,"Element No.");
          JobLedgerEntry.SETRANGE("Basic Item","Basic Item");
          JobLedgerEntry.SETRANGE(Manufacturer, Manufacturer);
          JobLedgerEntry.SETRANGE("Trade Item","Trade Item");
          JobLedgerEntry.SETRANGE("Vendor (Trade Item)", "Vendor (Trade Item)");
          JobLedgerEntry.SETRANGE("Item No.","Item No.");
          JobLedgerEntry.SETRANGE("Entry Type",JobLedgerEntry."Entry Type"::Usage);
          JobLedgerEntry.SETRANGE("Cost Type",JobLedgerEntry."Cost Type"::Material);
          JobLedgerEntry.SETRANGE("Vendor No.",STRSUBSTNO('%1',''));
          JobLedgerEntry.SETFILTER("Posting Date",'..%1',EndDateFilter);
          JobLedgerEntry.FILTERGROUP(0);

          JobLedgerEntries.LOOKUPMODE(TRUE);
          JobLedgerEntries.SETTABLEVIEW(JobLedgerEntry);
          IF JobLedgerEntries.RUNMODAL = ACTION::LookupOK THEN;
        END;
      END;
    END;

    PROCEDURE B_DrllDwnQtyDelJobInvent@1100525062(MaterialMonitorCumulLine@1100525003 : Record 11020577);
    VAR
      ProjectInventoryEntry@1100525001 : Record 11012670;
      ProjectInventoryEntries@1100525000 : Page 11012670;
    BEGIN
      WITH MaterialMonitorCumulLine DO BEGIN
        IF C_ProjectHoldsInventory("Project No.") THEN BEGIN
          ProjectInventoryEntry.RESET;
          ProjectInventoryEntry.SETCURRENTKEY("Project No.");
          ProjectInventoryEntry.FILTERGROUP(FilterGroupValue);
          ProjectInventoryEntry.SETRANGE("Project No.","Project No.");
          IF ("Yard No."+"System No."+"Entity No." <> '') OR ("Entity Type" <> 0) THEN BEGIN //kzwerver, 121209, n
            ProjectInventoryEntry.SETRANGE("Yard No.","Yard No.");
            ProjectInventoryEntry.SETRANGE("System No.","System No.");
            ProjectInventoryEntry.SETRANGE("Entity Type","Entity Type");
            ProjectInventoryEntry.SETRANGE("Entity No.","Entity No.");
          END;
          ProjectInventoryEntry.SETRANGE(Element,"Element No.");
          ProjectInventoryEntry.SETRANGE("Basic Item","Basic Item");
          ProjectInventoryEntry.SETRANGE(Manufacturer, Manufacturer);
          ProjectInventoryEntry.SETRANGE("Trade Item","Trade Item");
          ProjectInventoryEntry.SETRANGE("Vendor (Trade Item)", "Vendor (Trade Item)");
          ProjectInventoryEntry.SETRANGE("Item No.","Item No.");
          ProjectInventoryEntry.SETRANGE("Cost Object", "Cost Object");
          ProjectInventoryEntry.SETFILTER("Posting Date",'..%1',EndDateFilter);
          ProjectInventoryEntry.SETRANGE("Entry Type",ProjectInventoryEntry."Entry Type"::Delivery);
          ProjectInventoryEntry.FILTERGROUP(0);

          ProjectInventoryEntries.LOOKUPMODE(TRUE);
          ProjectInventoryEntries.SETTABLEVIEW(ProjectInventoryEntry);
          IF ProjectInventoryEntries.RUNMODAL = ACTION::LookupOK THEN;
        END;
      END;
    END;

    PROCEDURE B_DrllDwnQtyJobInventory@1100525016(MaterialMonitorCumulLine@1100525003 : Record 11020577);
    VAR
      ProjectInventoryEntry@1100525001 : Record 11012670;
      ProjectInventoryList@1100525000 : Page 11012673;
    BEGIN
      WITH MaterialMonitorCumulLine DO BEGIN
        IF C_ProjectHoldsInventory("Project No.") THEN BEGIN
          ProjectInventoryEntry.RESET;
          ProjectInventoryEntry.SETCURRENTKEY("Project No.");
          ProjectInventoryEntry.FILTERGROUP(FilterGroupValue);
          ProjectInventoryEntry.SETRANGE("Project No.","Project No.");
          IF ("Yard No."+"System No."+"Entity No." <> '') OR ("Entity Type" <> 0) THEN BEGIN //kzwerver, 121209, n
            ProjectInventoryEntry.SETRANGE("Yard No.","Yard No.");
            ProjectInventoryEntry.SETRANGE("System No.","System No.");
            ProjectInventoryEntry.SETRANGE("Entity Type","Entity Type");
            ProjectInventoryEntry.SETRANGE("Entity No.","Entity No.");
          END;
          ProjectInventoryEntry.SETRANGE(Element,"Element No.");
          ProjectInventoryEntry.SETRANGE("Basic Item","Basic Item");
          ProjectInventoryEntry.SETRANGE(Manufacturer, Manufacturer);
          ProjectInventoryEntry.SETRANGE("Trade Item","Trade Item");
          ProjectInventoryEntry.SETRANGE("Vendor (Trade Item)", "Vendor (Trade Item)");
          ProjectInventoryEntry.SETRANGE("Item No.","Item No.");
          ProjectInventoryEntry.SETRANGE("Cost Object", "Cost Object");
          ProjectInventoryEntry.SETFILTER("Posting Date",'..%1',EndDateFilter);
          ProjectInventoryEntry.SETFILTER("Entry Type",'%1|%2|%3',
            ProjectInventoryEntry."Entry Type"::Transfer,
            ProjectInventoryEntry."Entry Type"::"Positive Adjmt.",
            ProjectInventoryEntry."Entry Type"::"Negative Adjmt.");
          ProjectInventoryEntry.FILTERGROUP(0);

          ProjectInventoryList.LOOKUPMODE(TRUE);
          ProjectInventoryList.SETTABLEVIEW(ProjectInventoryEntry);
          IF ProjectInventoryList.RUNMODAL = ACTION::LookupOK THEN;
        END;
      END;
    END;

    PROCEDURE B_DrllDwnQtyDelNotJobInventory@1100525014(MaterialMonitorCumulLine@1100525003 : Record 11020577);
    VAR
      ProjectInventoryEntry@1100525001 : Record 11012670;
      ProjectInventoryList@1100525000 : Page 11012673;
    BEGIN
      WITH MaterialMonitorCumulLine DO BEGIN
        IF C_ProjectHoldsInventory("Project No.") THEN BEGIN
          ProjectInventoryEntry.RESET;
          ProjectInventoryEntry.SETCURRENTKEY("Project No.");
          ProjectInventoryEntry.FILTERGROUP(FilterGroupValue);
          ProjectInventoryEntry.SETRANGE("Project No.","Project No.");
          IF ("Yard No."+"System No."+"Entity No." <> '') OR ("Entity Type" <> 0) THEN BEGIN //kzwerver, 121209, n
            ProjectInventoryEntry.SETRANGE("Yard No.","Yard No.");
            ProjectInventoryEntry.SETRANGE("System No.","System No.");
            ProjectInventoryEntry.SETRANGE("Entity Type","Entity Type");
            ProjectInventoryEntry.SETRANGE("Entity No.","Entity No.");
          END;
          ProjectInventoryEntry.SETRANGE(Element,"Element No.");
          ProjectInventoryEntry.SETRANGE("Basic Item","Basic Item");
          ProjectInventoryEntry.SETRANGE(Manufacturer, Manufacturer);
          ProjectInventoryEntry.SETRANGE("Trade Item","Trade Item");
          ProjectInventoryEntry.SETRANGE("Vendor (Trade Item)", "Vendor (Trade Item)");
          ProjectInventoryEntry.SETRANGE("Item No.","Item No.");
          ProjectInventoryEntry.SETRANGE("Cost Object", "Cost Object");
          ProjectInventoryEntry.SETFILTER("Posting Date",'..%1',EndDateFilter);
          ProjectInventoryEntry.SETFILTER("Entry Type",'%1|%2|%3',
            ProjectInventoryEntry."Entry Type"::Receipt,
            ProjectInventoryEntry."Entry Type"::Delivery,
            ProjectInventoryEntry."Entry Type"::StockReceipt);
          ProjectInventoryEntry.FILTERGROUP(0);

          ProjectInventoryList.LOOKUPMODE(TRUE);
          ProjectInventoryList.SETTABLEVIEW(ProjectInventoryEntry);
          IF ProjectInventoryList.RUNMODAL = ACTION::LookupOK THEN;
        END;
      END;
    END;

    PROCEDURE B_DrllDwnQtyFreeInventory@1100525057(MaterialMonitorCumulLine@1100525003 : Record 11020577);
    VAR
      ItemLedgerEntry@1100525001 : Record 32;
      ItemLedgerEntries@1100525000 : Page 38;
    BEGIN
      WITH MaterialMonitorCumulLine DO BEGIN
        ItemLedgerEntry.RESET;
        ItemLedgerEntry.FILTERGROUP(FilterGroupValue);
        ItemLedgerEntry.SETCURRENTKEY("Item No.");
        ItemLedgerEntry.SETRANGE("Item No.","Item No.");
        ItemLedgerEntry.FILTERGROUP(0);

        ItemLedgerEntries.LOOKUPMODE(TRUE);
        ItemLedgerEntries.SETTABLEVIEW(ItemLedgerEntry);
        IF ItemLedgerEntries.RUNMODAL = ACTION::LookupOK THEN;
      END;
    END;

    PROCEDURE B_SetLastSelectedSection2Rec@1100525086(LastSelectedRec@1100525000 : Record 11020577);
    BEGIN
      IF NOT ChangeSelectedSection2Blocked THEN
        SelectedMatMonCumLine := LastSelectedRec;
      B_BlockChangeSelectedSection2r;
    END;

    PROCEDURE B_ShowInventoryLinesByItem@1100526134(MaterialMonitorCumulLine@1100525003 : Record 11020577);
    VAR
      ProjectInventoryEntry@1100525001 : Record 11012670;
      ProjectInventoryList@1100525000 : Page 11012673;
    BEGIN
      WITH MaterialMonitorCumulLine DO BEGIN
        IF ("Item No." = '') THEN BEGIN
          MESSAGE(Text11012006);
          EXIT;
        END;
        ProjectInventoryEntry.FILTERGROUP(FilterGroupValue);
        ProjectInventoryEntry.SETRANGE("Item No.", "Item No.");
        ProjectInventoryEntry.SETRANGE("Basic Item", "Basic Item");
        ProjectInventoryEntry.SETRANGE("Trade Item", "Trade Item");
        ProjectInventoryEntry.SETRANGE("Vendor (Trade Item)", "Vendor (Trade Item)");
        ProjectInventoryEntry.SETRANGE(Manufacturer, Manufacturer);
        ProjectInventoryEntry.SETFILTER("Project No.", '<>%1', '');
        ProjectInventoryEntry.FILTERGROUP(0);

        ProjectInventoryList.LOOKUPMODE(TRUE);
        ProjectInventoryList.SETTABLEVIEW(ProjectInventoryEntry);
        IF ProjectInventoryList.RUNMODAL = ACTION::LookupOK THEN;
      END;
    END;

    PROCEDURE B_ShowItemJournalLinesByItem@1100526128(MaterialMonitorCumulLine@1100525003 : Record 11020577);
    VAR
      ItemJournalLine@1100525001 : Record 83;
      ItemJournalLines@1100525000 : Page 519;
    BEGIN
      WITH MaterialMonitorCumulLine DO BEGIN
        IF ("Item No." = '') THEN BEGIN
          MESSAGE(Text11012006);
          EXIT;
        END;
        ItemJournalLine.FILTERGROUP(FilterGroupValue);
        ItemJournalLine.SETRANGE("Item No.", "Item No.");
        ItemJournalLine.SETFILTER("Job No.", '<>%1', '');
        ItemJournalLine.FILTERGROUP(0);

        ItemJournalLines.LOOKUPMODE(TRUE);
        ItemJournalLines.SETTABLEVIEW(ItemJournalLine);
        IF ItemJournalLines.RUNMODAL = ACTION::LookupOK THEN;
      END;
    END;

    PROCEDURE B_ShowPurchaseOrderLinesByItem@1100526124(MaterialMonitorCumulLine@1100525003 : Record 11020577);
    VAR
      PurchaseLine@1100525001 : Record 39;
      PurchaseLines@1100525000 : Page 518;
    BEGIN
      WITH MaterialMonitorCumulLine DO BEGIN
        IF ("Item No." = '') THEN BEGIN
          MESSAGE(Text11012006);
          EXIT;
        END;
        PurchaseLine.FILTERGROUP(FilterGroupValue);
        PurchaseLine.SETRANGE("Document Type", PurchaseLine."Document Type"::Order);
        PurchaseLine.SETRANGE("Item No.", "Item No.");
        PurchaseLine.SETRANGE("Basic Item", "Basic Item");
        PurchaseLine.SETRANGE("Trade Item", "Trade Item");
        PurchaseLine.SETRANGE("Vendor (Trade Item)", "Vendor (Trade Item)");
        PurchaseLine.SETRANGE(Manufacturer, Manufacturer);
        PurchaseLine.SETFILTER("Job No.", '<>%1', '');
        PurchaseLine.FILTERGROUP(0);

        PurchaseLines.LOOKUPMODE(TRUE);
        PurchaseLines.SETTABLEVIEW(PurchaseLine);
        IF PurchaseLines.RUNMODAL = ACTION::LookupOK THEN;
      END;
    END;

    PROCEDURE B_ShowAdviceOrderLinesByItem@1100526118(MaterialMonitorCumulLine@1100525003 : Record 11020577);
    VAR
      AdviceOrderLine@1100525001 : Record 11012055;
      AdviceOrderLines@1100525000 : Page 11012122;
    BEGIN
      WITH MaterialMonitorCumulLine DO BEGIN
        IF ("Item No." = '') THEN BEGIN
          MESSAGE(Text11012006);
          EXIT;
        END;
        AdviceOrderLine.FILTERGROUP(FilterGroupValue);
        AdviceOrderLine.SETRANGE("Record Type", AdviceOrderLine."Record Type"::Project);
        AdviceOrderLine.SETRANGE("Item No.", "Item No.");
        AdviceOrderLine.SETRANGE("Basic Item", "Basic Item");
        AdviceOrderLine.SETRANGE("Trade Item", "Trade Item");
        AdviceOrderLine.SETRANGE("Vendor (Trade Item)", "Vendor (Trade Item)");
        AdviceOrderLine.SETRANGE(Manufacturer, Manufacturer);
        AdviceOrderLine.SETFILTER("Project No.", '<>%1', '');
        AdviceOrderLine.FILTERGROUP(0);

        AdviceOrderLines.LOOKUPMODE(TRUE);
        AdviceOrderLines.SETTABLEVIEW(AdviceOrderLine);
        IF AdviceOrderLines.RUNMODAL = ACTION::LookupOK THEN;
      END;
    END;

    PROCEDURE B_ShowItemCard@1100526106(MaterialMonitorCumulLine@1100525003 : Record 11020577);
    VAR
      Item@1100525001 : Record 27;
      TradeItem@1100526101 : Record 11012317;
      BasicItem@1100526102 : Record 11012316;
      BasicItemList@1100525000 : Page 11012333;
      TradeItemList@1100525002 : Page 11012334;
      ItemCard@1100525004 : Page 30;
    BEGIN
      WITH MaterialMonitorCumulLine DO BEGIN
        IF ("Item No." = '') THEN BEGIN
          MESSAGE(Text11012006);
          EXIT;
        END;
        CASE TRUE OF
          "Basic Item" <> '': BEGIN
            BasicItem.FILTERGROUP(FilterGroupValue);
            BasicItem.SETRANGE("Product Code", "Item No.");
            BasicItem.SETRANGE(Manufacturer, Manufacturer);
            BasicItem.FILTERGROUP(0);

            BasicItemList.LOOKUPMODE(TRUE);
            BasicItemList.SETTABLEVIEW(BasicItem);
            IF BasicItemList.RUNMODAL = ACTION::LookupOK THEN;
          END;
          "Trade Item" <> '': BEGIN
            TradeItem.FILTERGROUP(FilterGroupValue);
            TradeItem.SETRANGE("Product Code", "Item No.");
            TradeItem.SETRANGE("Item Code", "Trade Item");
            TradeItem.SETRANGE(Vendor, "Vendor (Trade Item)");
            TradeItem.SETRANGE(Manufacturer, Manufacturer);
            TradeItem.FILTERGROUP(0);

            TradeItemList.LOOKUPMODE(TRUE);
            TradeItemList.SETTABLEVIEW(TradeItem);
            IF TradeItemList.RUNMODAL = ACTION::LookupOK THEN;
          END;
          ELSE BEGIN
            Item.FILTERGROUP(FilterGroupValue);
            Item.SETRANGE("No.", "Item No.");
            Item.FILTERGROUP(0);

            ItemCard.LOOKUPMODE(TRUE);
            ItemCard.SETTABLEVIEW(Item);
            IF ItemCard.RUNMODAL = ACTION::LookupOK THEN;
          END;
        END;
      END;
    END;

    PROCEDURE B_GetLastSelectedSection2Rec@1100525083(VAR SelectedRec@1100525000 : Record 11020577);
    BEGIN
      SelectedRec := SelectedMatMonCumLine;
    END;

    PROCEDURE B_SetLastDisplayedSection2Rec@1100525076(DisplayedRec@1100525000 : Record 11020577);
    BEGIN
      LastDisplayedMatMonCumLine := DisplayedRec;
    END;

    PROCEDURE B_GetLastDisplayedSection3Rec@1100525079(VAR DisplayedRec@1100525000 : Record 11020577);
    BEGIN
      DisplayedRec := LastDisplayedMatMonCumLine;
    END;

    PROCEDURE B_LastDisplayDiffersFromSelect@1100525078() : Boolean;
    BEGIN
      IF ((SelectedMatMonCumLine."Project No." <> LastDisplayedMatMonCumLine."Project No.") OR
          (SelectedMatMonCumLine."Element No." <> LastDisplayedMatMonCumLine."Element No.") OR
          (SelectedMatMonCumLine."Yard No." <> LastDisplayedMatMonCumLine."Yard No.") OR
          (SelectedMatMonCumLine."System No." <> LastDisplayedMatMonCumLine."System No.") OR
          (SelectedMatMonCumLine."Entity Type" <> LastDisplayedMatMonCumLine."Entity Type") OR
          (SelectedMatMonCumLine."Entity No." <> LastDisplayedMatMonCumLine."Entity No.") OR
          (SelectedMatMonCumLine."Item No." <> LastDisplayedMatMonCumLine."Item No.") OR
          (SelectedMatMonCumLine."Basic Item" <> LastDisplayedMatMonCumLine."Basic Item") OR
          (SelectedMatMonCumLine."Trade Item" <> LastDisplayedMatMonCumLine."Trade Item") OR
          (SelectedMatMonCumLine."Base UOM" <> LastDisplayedMatMonCumLine."Base UOM") OR
          (SelectedMatMonCumLine."Cost Object" <> LastDisplayedMatMonCumLine."Cost Object") OR
          (SelectedMatMonCumLine."Item Category" <> LastDisplayedMatMonCumLine."Item Category") OR
          (SelectedMatMonCumLine."Item Description" <> LastDisplayedMatMonCumLine."Item Description")) THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    PROCEDURE B_SetSection3IsOpen@1100525080(IsOpen@1100525000 : Boolean);
    BEGIN
      IF IsOpen THEN
        Section3ScreensOpen += 1
      ELSE
        IF (Section3ScreensOpen > 0) THEN
          Section3ScreensOpen -= 1;
    END;

    PROCEDURE B_GetSection3IsOpen@1100525081() : Boolean;
    BEGIN
      EXIT(Section3ScreensOpen > 0);
    END;

    PROCEDURE B_BlockChangeSelectedSection2r@1100525088();
    BEGIN
      ChangeSelectedSection2Blocked := TRUE;
    END;

    PROCEDURE B_UnblockChangeSelectedSect2r@1100525089();
    BEGIN
      ChangeSelectedSection2Blocked := FALSE;
    END;

    PROCEDURE B_Section2RecordsDiffer@1100525124(TotalLine1@1100525000 : Record 11020577;TotalLine2@1100525001 : Record 11020577) : Boolean;
    BEGIN
      IF ((TotalLine1."Project No." <> TotalLine2."Project No.") OR
          (TotalLine1."Element No." <> TotalLine2."Element No.") OR
          (TotalLine1."Yard No." <> TotalLine2."Yard No.") OR
          (TotalLine1."System No." <> TotalLine2."System No.") OR
          (TotalLine1."Entity Type" <> TotalLine2."Entity Type") OR
          (TotalLine1."Entity No." <> TotalLine2."Entity No.") OR
          (TotalLine1."Item No." <> TotalLine2."Item No.") OR
          (TotalLine1."Basic Item" <> TotalLine2."Basic Item") OR
          (TotalLine1."Trade Item" <> TotalLine2."Trade Item") OR
          (TotalLine1."Base UOM" <> TotalLine2."Base UOM") OR
          (TotalLine1."Cost Object" <> TotalLine2."Cost Object") OR
          (TotalLine1."Item Category" <> TotalLine2."Item Category") OR
          (TotalLine1."Item Description" <> TotalLine2."Item Description")) THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    PROCEDURE "***SECTION 3 FUNCTIONS"@1100525022();
    BEGIN
    END;

    PROCEDURE CA_UpdateMatMon@1100525000();
    BEGIN
      //Function called from Material Monitor Main form to synchronize between filterset (in MatMonFilterset) and
      //         the datasets in section2 and section3

      CAA_ClearDetailsSection3;
      CAB_FindDetailsSection3;
      CAC_ProcessDetailsAllSection3;
      CAD_RebuildSection2From3;

      //Clear Rebuild flag
      RebuildData := FALSE;
    END;

    PROCEDURE CAA_ClearDetailsSection3@1100525009();
    BEGIN
      //Clear all Temp tables
      ClearTempTables(TRUE);

      LastDet3RecNo := 0; //No. used to uniquely number TempMatMon3Line recs
    END;

    PROCEDURE CAB_FindDetailsSection3@1100525003();
    BEGIN
      //Function determines all demand and supply according user defined filterset.
      //Detailed information of these is kept in temp table TempMatMon3Line

      Window.OPEN('#1##############################');

      //Find all Projects to be used
      CABA_FindProjects;

      //Find all Demand within the found projects
      CABE_FindDemandMaterialReq;

      //Find all Supply within the found projects
      CABG_FindPlannedSupply;  //including Blanket Orders
      CABH_FindAvailableSupply;

      Window.CLOSE;
    END;

    LOCAL PROCEDURE CABA_FindProjects@1100525015();
    VAR
      Job@1100525000 : Record 11072003;
    BEGIN
      //Post: TempProject contains all ProjectNo.s (belonging to Jobs (that might be an Engineering Project) that should be used in MatMon

      Window.UPDATE(1,Text000);
      WITH Job DO BEGIN
        SETFILTER("Main Project", MatMonFilterset.MainProjectFilter);
        SETFILTER("No.", MatMonFilterset.ProjectFilter);
        IF FINDSET THEN BEGIN
          REPEAT
            TempProject := Job;
            IF TempProject.INSERT THEN;
          UNTIL (NEXT=0);
        END;
      END;
    END;

    PROCEDURE CABE_FindDemandMaterialReq@1100525013();
    BEGIN
      Window.UPDATE(1,Text002);
      WITH TempProject DO BEGIN
        RESET;
        IF FINDSET THEN BEGIN
          REPEAT
            CABEA_FindProjectMaterialReq(TempProject);
          UNTIL (NEXT=0);
        END;
      END;
    END;

    PROCEDURE CABEA_FindProjectMaterialReq@1100525039(Project@1100525000 : Record 11072003);
    VAR
      ProjectMaterialReqLine@1100525001 : Record 11012526;
      TempMMDetailLine@1100525002 : TEMPORARY Record 11020578;
      RecRef@1100525003 : RecordRef;
    BEGIN
      WITH ProjectMaterialReqLine DO BEGIN
        SETRANGE("Project No.", Project."No.");
        SETRANGE("Exclude Logistics", FALSE); //kzwerver, 110127, n
        IF MatMonFilterset.ElementFilter <> '' THEN
          SETFILTER(Element, MatMonFilterset.ElementFilter);
        IF MatMonFilterset.ItemFilter <> '' THEN
          SETFILTER("Item No.", MatMonFilterset.ItemFilter);
        SETRANGE("Delivery Date",0D,EndDateFilter);
        IF FINDSET THEN BEGIN
          TempMMDetailLine.INIT;
          TempMMDetailLine.DocumentName := TABLECAPTION;
          REPEAT
            RecRef.GETTABLE(ProjectMaterialReqLine);
            CABEAA_FillMatMonDetLine(ProjectMaterialReqLine, TempMMDetailLine, RecRef.RECORDID);
            CABEAB_InsertSection3(TempMMDetailLine);
          UNTIL (NEXT=0);
        END;
      END;
    END;

    PROCEDURE CABEAA_FillMatMonDetLine@1100525061(ProjectMaterialReqLine@1100525001 : Record 11012526;VAR MMDetLine@1100525000 : Record 11020578;RecID@1100525003 : RecordID);
    BEGIN
      WITH MMDetLine DO BEGIN
        "Project No." := ProjectMaterialReqLine."Project No.";
        "Element No." := ProjectMaterialReqLine.Element;
        "Yard No." := '';
        "System No." := '';
        "Entity Type" := 0;
        "Entity No." := '';
        IF (ProjectMaterialReqLine."Unique Traceable") OR (ProjectMaterialReqLine.Origin = ProjectMaterialReqLine.Origin::Import) THEN BEGIN
          "Yard No." := ProjectMaterialReqLine."Yard No.";
          "System No." := ProjectMaterialReqLine."System No.";
          "Entity Type" := ProjectMaterialReqLine."Entity Type";
          "Entity No." := ProjectMaterialReqLine."Entity No.";
        END;
        "Item No." := ProjectMaterialReqLine."Item No.";
        "Basic Item" := ProjectMaterialReqLine."Basic Item";
        Manufacturer := ProjectMaterialReqLine.Manufacturer;
        "Trade Item" := ProjectMaterialReqLine."Trade Item";
        "Vendor (Trade Item)" := ProjectMaterialReqLine."Vendor (Trade Item)";
        "Item Category" := '';
        IF (MaterialMonitorSetup."Use Item Category Filter") THEN
          "Item Category" := ProjectMaterialReqLine."Item Category Code";
        Location := '';
        TransactionDate := ProjectMaterialReqLine."Delivery Date";
        DocumentRecordID := RecID;
        "Manufacturer Name" := ProjectMaterialReqLine."Manufacturer Name";
        "Item Description" := ProjectMaterialReqLine.Description;
        "Item Description2" := ProjectMaterialReqLine.Description2;
        "Base UOM" := GetUOM("Item No.", "Basic Item", Manufacturer, "Trade Item", "Vendor (Trade Item)",
          ProjectMaterialReqLine."Unit of Measure");
        "Cost Object" := ProjectMaterialReqLine."Cost Object";
        "Qty (Budget)" := GetBudgetLineQuantity(ProjectMaterialReqLine); //kzwerver, 110323, n, #26056
        "Qty (Material Requirement)" := ProjectMaterialReqLine.Quantity *
          GetFactorUOM("Item No.", "Basic Item", Manufacturer, "Trade Item", "Vendor (Trade Item)",
            ProjectMaterialReqLine."Unit of Measure"); //kzwerver, 110208, c
        Quantity := -1 * "Qty (Material Requirement)"; //kzwerver, 110509, n, #27049
        DemandSupply := DemandSupply::Demand;
      END;
    END;

    PROCEDURE CABEAB_InsertSection3@1100525012(MMDetailLineParmFields@1100525000 : Record 11020578);
    BEGIN
      //Omit empty lines that can occur in PEC Engineering lines
      IF (MMDetailLineParmFields."Item No." +
          MMDetailLineParmFields."Basic Item" +
          MMDetailLineParmFields."Trade Item" +
          MMDetailLineParmFields."Cost Object" +
          MMDetailLineParmFields."Item Description" + //kzwerver, 110728, n, #28064
          MMDetailLineParmFields."Base UOM" = '') THEN
        EXIT;

      WITH TempMatMon3Line DO BEGIN
        RESET;
        SETRANGE("Project No.", MMDetailLineParmFields."Project No.");
        SETRANGE("Element No.", MMDetailLineParmFields."Element No.");
        SETRANGE("Yard No.", MMDetailLineParmFields."Yard No.");
        SETRANGE("System No.", MMDetailLineParmFields."System No.");
        SETRANGE("Entity Type", MMDetailLineParmFields."Entity Type");
        SETRANGE("Entity No.", MMDetailLineParmFields."Entity No.");
        SETRANGE("Item No.", MMDetailLineParmFields."Item No.");
        SETRANGE("Basic Item", MMDetailLineParmFields."Basic Item");
        SETRANGE("Trade Item", MMDetailLineParmFields."Trade Item");
        SETRANGE("Base UOM", MMDetailLineParmFields."Base UOM");
        SETRANGE("Cost Object", MMDetailLineParmFields."Cost Object");
        SETRANGE("Item Category", MMDetailLineParmFields."Item Category");
        SETRANGE("Item Description", MMDetailLineParmFields."Item Description");
        IF ((MMDetailLineParmFields.DemandSupply <> MMDetailLineParmFields.DemandSupply::" ") AND
            (MMDetailLineParmFields.TransactionDate < StartDateFilter)) THEN BEGIN
          //All lines with TransactionDate before Starting Date (of User indicated Datefilter-range) will be summed into ONE line
          //This Line will get Line No. 5000, so that it always will be the first (displayed) line in the primary key order
          SETRANGE("Line No.", 5000);
          IF NOT FINDFIRST THEN BEGIN
            //Create
            INIT;
            COPY(MMDetailLineParmFields);
            "Line No." := 5000; //This is a special record to accumulate all details prior to indicated Start Date
            "No." := LastDet3RecNo+1; //==prim.key
            LastDet3RecNo += 1;
            "Base UOM" := GetUOM("Item No.", "Basic Item", Manufacturer, "Trade Item", "Vendor (Trade Item)",
              MMDetailLineParmFields."Base UOM");
            DocumentName := Text11012003;
            INSERT;
          END ELSE BEGIN
            //Modify the record with LineNo=5000
            Quantity += MMDetailLineParmFields.Quantity;
            "Qty (Material Requirement)" += MMDetailLineParmFields."Qty (Material Requirement)";
            "Qty (Budget)" += MMDetailLineParmFields."Qty (Budget)";
            "Qty (Advice Orders)" += MMDetailLineParmFields."Qty (Advice Orders)";
            "Qty (Purchase Orders)" += MMDetailLineParmFields."Qty (Purchase Orders)";
            "Qty (Received)" += MMDetailLineParmFields."Qty (Received)";
            "Qty (Inventory Orders)" += MMDetailLineParmFields."Qty (Inventory Orders)";
            "Qty (Delivery Job Inventory)" += MMDetailLineParmFields."Qty (Delivery Job Inventory)";
            "Qty (Suggested Extra Advice)" += MMDetailLineParmFields."Qty (Suggested Extra Advice)";
            "Qty (Free Inventory)" += MMDetailLineParmFields."Qty (Free Inventory)";
            "Qty (Blanket Order)" += MMDetailLineParmFields."Qty (Blanket Order)";
            "Qty (Orders Cum.)" += MMDetailLineParmFields."Qty (Orders Cum.)";
            "Qty (Purch.Rcpt.)" += MMDetailLineParmFields."Qty (Purch.Rcpt.)";
            "Qty (Job Usage)" += MMDetailLineParmFields."Qty (Job Usage)";
            "Qty (Job Inventory)" += MMDetailLineParmFields."Qty (Job Inventory)";
            "Qty (Del. Note Job Inventory)" += MMDetailLineParmFields."Qty (Del. Note Job Inventory)"; //130325, kzwerver, n, #C005347
            "Qty (Free Inventory Location)" += MMDetailLineParmFields."Qty (Free Inventory Location)";
            MODIFY;
          END;
        END ELSE BEGIN
          //All detail records (on or after Start Date) in section3 are separately stored
          //Create
          COPY(MMDetailLineParmFields);
          "Line No." := LastLine3No + 10000;
          LastLine3No := LastLine3No + 10000;
          "No." := LastDet3RecNo+1;
          LastDet3RecNo += 1;
          INSERT;
        END;
      END;
    END;

    LOCAL PROCEDURE CABG_FindPlannedSupply@1100525037();
    BEGIN
      Window.UPDATE(1,Text003);
      WITH TempProject DO BEGIN
        RESET;
        IF FINDSET THEN BEGIN
          REPEAT
            CABGA_FindSupplyAdviceOrderPur(TempProject);
            CABGB_FindSupplyAdviceOrderInv(TempProject);
            CABGC_FindSupplyPurchaseOrder(TempProject);
            CABGD_FindSupplyItemJournal(TempProject);
          UNTIL (NEXT=0);
        END;
      END;
    END;

    PROCEDURE CABGA_FindSupplyAdviceOrderPur@1100525028(Project@1100525000 : Record 11072003);
    VAR
      AdviceOrderLine@1100525001 : Record 11012055;
      TempMMDetailLine@1100525003 : TEMPORARY Record 11020578;
      RecRef@1100525002 : RecordRef;
    BEGIN
      WITH AdviceOrderLine DO BEGIN
        SETRANGE("Project No.",Project."No.");
        //SETRANGE(Transaction,Transaction::Purchase);
        SETFILTER(Transaction,'%1|%2',Transaction::Purchase,Transaction::Requisition);
        SETRANGE("Cost Type","Cost Type"::Material);
        IF MatMonFilterset.ElementFilter <> '' THEN
          SETFILTER(Element, MatMonFilterset.ElementFilter);
        IF MatMonFilterset.ItemFilter <> '' THEN
          SETFILTER("Item No.", MatMonFilterset.ItemFilter);
        SETRANGE(Processed, FALSE); //kzwerver, 121128, n, #C004257
        SETRANGE("Receipt Date",0D,EndDateFilter);
        IF FINDSET THEN BEGIN
          TempMMDetailLine.INIT;
          TempMMDetailLine.DocumentName := TABLECAPTION + ' (' +FORMAT(Transaction) + ')';
          REPEAT
            RecRef.GETTABLE(AdviceOrderLine);
            CABGAA_FillMatMonDetLine(AdviceOrderLine,TempMMDetailLine,RecRef.RECORDID);
            CABEAB_InsertSection3(TempMMDetailLine);
          UNTIL (NEXT=0);
        END;
      END;
    END;

    PROCEDURE CABGAA_FillMatMonDetLine@1100525033(AdviceOrderLine@1100525001 : Record 11012055;VAR MMDetLine@1100525000 : Record 11020578;RecID@1100525003 : RecordID);
    VAR
      UOMfactor@1100526100 : Decimal;
    BEGIN
      WITH MMDetLine DO BEGIN
        "Project No." := AdviceOrderLine."Project No.";
        "Yard No." := AdviceOrderLine."Yard No.";
        "Element No." := AdviceOrderLine.Element;
        "System No." := AdviceOrderLine."System No.";
        "Entity Type" := AdviceOrderLine."Entity Type";
        "Entity No." := AdviceOrderLine."Entity No.";
        "Item No." := AdviceOrderLine."Item No.";
        "Basic Item" := AdviceOrderLine."Basic Item";
        "Trade Item" := AdviceOrderLine."Trade Item";
        "Vendor (Trade Item)" := AdviceOrderLine."Vendor (Trade Item)";
        "Item Category" := '';
        IF (MaterialMonitorSetup."Use Item Category Filter") THEN
          "Item Category" := AdviceOrderLine."Item Category Code";
        Location := AdviceOrderLine."Location Code";
        TransactionDate := AdviceOrderLine."Receipt Date";
        DocumentRecordID := RecID;
        DocumentLineNo := AdviceOrderLine."Line No.";
        DocumentDate := AdviceOrderLine."Date Created";
        Manufacturer := AdviceOrderLine.Manufacturer;
        "Manufacturer Name" := AdviceOrderLine."Manufacturer Name";
        "Item Description" := AdviceOrderLine.Description;
        "Item Description2" := AdviceOrderLine."Description 2";
        "Base UOM" := GetUOM("Item No.", "Basic Item", Manufacturer, "Trade Item", "Vendor (Trade Item)",
          AdviceOrderLine."Unit of Measure");
        "Cost Object" := AdviceOrderLine."Cost Object";
        UOMfactor := GetFactorUOM("Item No.", "Basic Item", Manufacturer, "Trade Item", "Vendor (Trade Item)",
          AdviceOrderLine."Unit of Measure");
        "Qty (Advice Orders)" := AdviceOrderLine."Quantity (Advice)" * UOMfactor; //kzwerver, 110208, c
        "Qty  Processed (Advice Orders)" := AdviceOrderLine."Quantity (Processed)" * UOMfactor; //kzwerver, 110208, c
        Quantity := "Qty (Advice Orders)"; //kzwerver, 110509, n, #27049
        DemandSupply := DemandSupply::Supply;
        CASE AdviceOrderLine.Transaction OF
          AdviceOrderLine.Transaction::Inventory:
            "Advice Order Transaction" := "Advice Order Transaction"::Inventory;
          AdviceOrderLine.Transaction::Purchase:
            "Advice Order Transaction" := "Advice Order Transaction"::Purchase;
          AdviceOrderLine.Transaction::Requisition:
            "Advice Order Transaction" := "Advice Order Transaction"::Purchase;
        END;
      END;
    END;

    PROCEDURE CABGB_FindSupplyAdviceOrderInv@1100525030(Project@1100525000 : Record 11072003);
    VAR
      AdviceOrderLine@1100525001 : Record 11012055;
      TempMMDetailLine@1100525003 : TEMPORARY Record 11020578;
      RecRef@1100525002 : RecordRef;
    BEGIN
      WITH AdviceOrderLine DO BEGIN
        SETRANGE("Project No.",Project."No.");
        IF MatMonFilterset.ElementFilter <> '' THEN
          SETFILTER(Element, MatMonFilterset.ElementFilter);
        IF MatMonFilterset.ItemFilter <> '' THEN
          SETFILTER("Item No.", MatMonFilterset.ItemFilter);
        SETRANGE(Transaction,Transaction::Inventory);
        SETRANGE("Cost Type","Cost Type"::Material);
        SETRANGE(Processed, FALSE); //kzwerver, 121128, n, #C004257
        SETRANGE("Receipt Date",0D,EndDateFilter);
        IF FINDSET THEN BEGIN
          TempMMDetailLine.INIT;
          TempMMDetailLine.DocumentName := TABLECAPTION + ' (' + FORMAT(Transaction) + ')';
          REPEAT
            RecRef.GETTABLE(AdviceOrderLine);
            CABGAA_FillMatMonDetLine(AdviceOrderLine,TempMMDetailLine,RecRef.RECORDID);
            CABEAB_InsertSection3(TempMMDetailLine);
          UNTIL (NEXT=0);
        END;
      END;
    END;

    PROCEDURE CABGC_FindSupplyPurchaseOrder@1100525032(Project@1100525000 : Record 11072003);
    VAR
      PurchaseHeader@1100525004 : Record 38;
      PurchaseLine@1100525001 : Record 39;
      TempMMDetailLine@1100525003 : TEMPORARY Record 11020578;
      RecRef@1100525002 : RecordRef;
    BEGIN
      WITH PurchaseLine DO BEGIN
        SETRANGE("Job No.",Project."No.");
        //SETRANGE("Document Type","Document Type"::Order);
        IF MatMonFilterset.ElementFilter <> '' THEN
          SETFILTER(Element, MatMonFilterset.ElementFilter);
        IF MatMonFilterset.ItemFilter <> '' THEN
          SETFILTER("Item No.", MatMonFilterset.ItemFilter);
        SETRANGE("Expected Receipt Date",0D,EndDateFilter);
        IF FINDSET THEN BEGIN
          PurchaseHeader.GET("Document Type","Document No.");
          IF (PurchaseHeader."Hours Hire Order Type" = 0) THEN BEGIN // 0 = no option value
            TempMMDetailLine.INIT;
            REPEAT
              IF ("Document Type" = "Document Type"::"Blanket Order") THEN
                TempMMDetailLine.DocumentName := FORMAT("Document Type") + ' ' + "Document No."
              ELSE
                TempMMDetailLine.DocumentName := FORMAT(PurchaseHeader."Purchase Order Type") + ' ' + "Document No.";
              RecRef.GETTABLE(PurchaseLine);
              CABGCA_FillMatMonDetLine(PurchaseLine,TempMMDetailLine,RecRef.RECORDID);
              CABEAB_InsertSection3(TempMMDetailLine);
            UNTIL (NEXT=0);
          END;
        END;
      END;
    END;

    PROCEDURE CABGCA_FillMatMonDetLine@1100525044(PurchaseLine@1100525001 : Record 39;VAR MMDetLine@1100525000 : Record 11020578;RecID@1100525003 : RecordID);
    VAR
      PurchaseLineExtension@1100526100 : Record 11020644;
    BEGIN
      WITH MMDetLine DO BEGIN
        "Project No." := PurchaseLine."Job No.";
        "Element No." := PurchaseLine.Element;
        PurchaseLineExtension.GetPurchLineExtension(
          PurchaseLine."Document Type", PurchaseLine."Document No.", PurchaseLine."Line No.");
        "Yard No." := PurchaseLineExtension."Yard No.";
        "System No." := PurchaseLineExtension."System No.";
        "Entity Type" := PurchaseLine."Entity Type";
        "Entity No." := PurchaseLineExtension."Entity No.";
        "Item No." := PurchaseLine."Item No.";
        "Basic Item" := PurchaseLine."Basic Item";
        "Trade Item" := PurchaseLine."Trade Item";
        "Vendor (Trade Item)" := PurchaseLine."Vendor (Trade Item)";
        Location := PurchaseLine."Location Code";
        "Item Category" := '';
        IF (MaterialMonitorSetup."Use Item Category Filter") THEN
          "Item Category" := PurchaseLine."Item Category Code";
        TransactionDate := PurchaseLine."Expected Receipt Date";
        DocumentRecordID := RecID;
        DocumentDocumentNo := PurchaseLine."Document No.";
        DocumentLineNo := PurchaseLine."Line No.";
        DocumentDate := PurchaseLine."Posting Date";
        Approved := ValidDate(PurchaseLine."Promised Receipt Date");
        Manufacturer := PurchaseLine.Manufacturer;
        "Manufacturer Name" := GetManufacturerName(Manufacturer);
        "Item Description" := PurchaseLine.Description;
        "Item Description2" := PurchaseLine."Description 2";
        "Base UOM" := GetUOM("Item No.", "Basic Item", Manufacturer, "Trade Item", "Vendor (Trade Item)",
          PurchaseLine."Unit of Measure Code");
        "Cost Object" := PurchaseLine."Shortcut Dimension 2 Code";
        IF (PurchaseLine."Document Type" <> PurchaseLine."Document Type"::"Blanket Order") THEN BEGIN
          Quantity := PurchaseLine."Outstanding Qty. (Base)"; //kzwerver, 110509, c, #27049
          "Qty (Purchase Orders)" := Quantity;
          "Qty (Blanket Order)" := 0;
        END ELSE BEGIN
          "Qty (Blanket Order)" := PurchaseLine."Outstanding Qty. (Base)"; //kzwerver, 110509, c, #27049
          //"Qty (Blanket Order)" := PurchaseLine.GetQuanToBeDelivered;
          "Qty (Purchase Orders)" := 0;
          Quantity := 0  ;
        END;
        DemandSupply := DemandSupply::Supply;
      END;
    END;

    PROCEDURE CABGD_FindSupplyItemJournal@1100525094(Project@1100525000 : Record 11072003);
    VAR
      ItemJournalLine@1100525004 : Record 83;
      TempMMDetailLine@1100525003 : TEMPORARY Record 11020578;
      RecRef@1100525002 : RecordRef;
    BEGIN
      WITH ItemJournalLine DO BEGIN
        SETRANGE("Job No.",Project."No.");
        IF MatMonFilterset.ElementFilter <> '' THEN
          SETFILTER(Element, MatMonFilterset.ElementFilter);
        IF FINDSET THEN BEGIN
          TempMMDetailLine.INIT;
          REPEAT
            RecRef.GETTABLE(ItemJournalLine);
            CABGDA_FillMatMonDetLine(ItemJournalLine,TempMMDetailLine,RecRef.RECORDID);
            CABEAB_InsertSection3(TempMMDetailLine);
          UNTIL (NEXT=0);
        END;
      END;
    END;

    PROCEDURE CABGDA_FillMatMonDetLine@1100525093(ItemJournalLine@1100525001 : Record 83;VAR MMDetLine@1100525000 : Record 11020578;RecID@1100525003 : RecordID);
    BEGIN
      WITH MMDetLine DO BEGIN
        "Project No." := ItemJournalLine."Job No.";
        "Yard No." := ItemJournalLine."Yard No.";
        "Element No." := ItemJournalLine.Element;
        "System No." := ItemJournalLine."System No.";
        "Entity Type" := ItemJournalLine."Entity Type";
        "Entity No." := ItemJournalLine."Entity No.";
        "Item No." := ItemJournalLine."Item No.";
        //"Basic Item" := ItemJournalLine."Basic Item"; //NOT AVALABLE
        //"Trade Item" := ItemJournalLine."Trade Item"; //NOT AVALABLE
        //"Vendor (Trade Item)" := ItemJournalLine."Vendor (Trade Item)"; //NOT AVALABLE
        Location := ItemJournalLine."Location Code";
        "Item Category" := '';
        IF (MaterialMonitorSetup."Use Item Category Filter") THEN
          "Item Category" := ItemJournalLine."Item Category Code";
        TransactionDate := ItemJournalLine."Delivery Date";
        DocumentRecordID := RecID;
        DocumentDocumentNo := ItemJournalLine."Document No.";
        DocumentLineNo := ItemJournalLine."Line No.";
        DocumentDate := ItemJournalLine."Delivery Date";
        DocumentName := ItemJournalLine.TABLECAPTION + ' ' + DocumentDocumentNo;
        //Approved := ValidDate(ItemJournalLine."Promised Receipt Date");
        //Manufacturer := ItemJournalLine.Manufacturer;
        "Item Description" := ItemJournalLine.Description;
        "Item Description2" := ItemJournalLine."Description 2";
        "Base UOM" := GetUOM("Item No.", "Basic Item", Manufacturer, "Trade Item", "Vendor (Trade Item)",
          ItemJournalLine."Unit of Measure Code");
        "Cost Object" := ItemJournalLine."Shortcut Dimension 2 Code";
        Quantity := ItemJournalLine."Quantity (Base)"; //kzwerver, 110509, c, #27049
        "Qty (Inventory Orders)" := Quantity; //kzwerver, 110509, c, #27049
        DemandSupply := DemandSupply::Supply;
      END;
    END;

    LOCAL PROCEDURE CABH_FindAvailableSupply@1100525036();
    BEGIN
      Window.UPDATE(1,Text004);
      WITH TempProject DO BEGIN
        RESET;
        IF FINDSET THEN BEGIN
          REPEAT
            IF C_ProjectHoldsInventory(TempProject."No.") THEN BEGIN
              CABHA_FindSupplyJobInventory(TempProject);
              CABHD_AddSupplyPurchReceipt(TempProject);
            END ELSE BEGIN
              CABHB_FindSupplyPurchReceipt(TempProject);
              CABHC_FindSupplyProjectInvent(TempProject);
            END;
          UNTIL (NEXT=0);
        END;
      END;
    END;

    PROCEDURE CABHA_FindSupplyJobInventory@1100525034(Project@1100525000 : Record 11072003);
    VAR
      ProjectInventoryEntry@1100525001 : Record 11012670;
      TempMMDetailLine@1100525003 : TEMPORARY Record 11020578;
      RecRef@1100525002 : RecordRef;
    BEGIN
      WITH ProjectInventoryEntry DO BEGIN
        SETRANGE("Project No.",Project."No.");
        //SETFILTER("Entry Type",'%1|%2|%3',"Entry Type"::StockReceipt,"Entry Type"::Receipt,"Entry Type"::Delivery);
        SETFILTER("Entry Type",'%1..%2', "Entry Type"::Receipt, "Entry Type"::Return); //kzwerver, 110727, c, #28277
        IF MatMonFilterset.ElementFilter <> '' THEN
          SETFILTER(Element, MatMonFilterset.ElementFilter);
        IF MatMonFilterset.ItemFilter <> '' THEN
          SETFILTER("Item No.", MatMonFilterset.ItemFilter);
        SETRANGE("Posting Date",0D,EndDateFilter);
        IF FINDSET THEN BEGIN
          TempMMDetailLine.INIT;
          REPEAT
            RecRef.GETTABLE(ProjectInventoryEntry);
            CABHAA_FillMatMonDetLine(ProjectInventoryEntry,TempMMDetailLine,RecRef.RECORDID);
            CABEAB_InsertSection3(TempMMDetailLine);
          UNTIL (NEXT=0);
        END;
      END;
    END;

    PROCEDURE CABHAA_FillMatMonDetLine@1100525038(ProjectInventoryEntry@1100525001 : Record 11012670;VAR MMDetLine@1100525000 : Record 11020578;RecID@1100525003 : RecordID);
    VAR
      Item@1210190000 : Record 27;
      UOMFactor@1210190001 : Decimal;
    BEGIN
      WITH MMDetLine DO BEGIN
        "Project No." := ProjectInventoryEntry."Project No.";
        "Yard No." := ProjectInventoryEntry."Yard No.";
        "Element No." := ProjectInventoryEntry.Element;
        "System No." := ProjectInventoryEntry."System No.";
        "Entity Type" := ProjectInventoryEntry."Entity Type";
        "Entity No." := ProjectInventoryEntry."Entity No.";
        "Item No." := ProjectInventoryEntry."Item No.";
        "Basic Item" := ProjectInventoryEntry."Basic Item";
        "Trade Item" := ProjectInventoryEntry."Trade Item";
        "Vendor (Trade Item)" := ProjectInventoryEntry."Vendor (Trade Item)";
        Location := ProjectInventoryEntry."Location Code";
        "Entry Type" := ProjectInventoryEntry."Entry Type";
        "Item Category" := '';
        IF (MaterialMonitorSetup."Use Item Category Filter") AND
           (Item.GET(ProjectInventoryEntry."Item No."))
        THEN
          "Item Category" := Item."Item Category Code";
        TransactionDate := ProjectInventoryEntry."Posting Date";
        DocumentRecordID := RecID;
        DocumentDocumentNo := ProjectInventoryEntry."Document No.";
        //"DocumentLineNo" := ;
        DocumentDate := ProjectInventoryEntry."Document Date";
        DocumentName := ProjectInventoryEntry.TABLECAPTION + ' (' + FORMAT(ProjectInventoryEntry."Entry Type") + ') '+
          DocumentDocumentNo;
        Manufacturer := ProjectInventoryEntry.Manufacturer;
        "Manufacturer Name" := GetManufacturerName(Manufacturer);
        "Item Description" := ProjectInventoryEntry.Description;
        "Item Description2" := ProjectInventoryEntry."Description 2";
        "Base UOM" := GetUOM("Item No.", "Basic Item", Manufacturer, "Trade Item", "Vendor (Trade Item)",
          ProjectInventoryEntry."Unit of Measure Code");
        "Cost Object" := ProjectInventoryEntry."Cost Object";
        "Qty (Job Inventory)" := 0;
        "Qty (Del. Note Job Inventory)" := 0; //130325, kzwerver, n, #C005347
        "Qty (Delivery Job Inventory)" := 0;
        "Qty (Job Usage)" := 0;
        Quantity := 0;
        UOMFactor := GetFactorUOM("Item No.", "Basic Item", Manufacturer, "Trade Item", "Vendor (Trade Item)",
          "Base UOM");
        DemandSupply := DemandSupply::Supply;
        //kzwerver,, 110616, sc
        CASE ProjectInventoryEntry."Entry Type" OF
          ProjectInventoryEntry."Entry Type"::Receipt: BEGIN
            "Qty (Del. Note Job Inventory)" := ProjectInventoryEntry.Quantity*UOMFactor; //130325, kzwerver, n, #C005347
          END;
          ProjectInventoryEntry."Entry Type"::Delivery,
          ProjectInventoryEntry."Entry Type"::Return: BEGIN
            "Qty (Del. Note Job Inventory)" := ProjectInventoryEntry.Quantity*UOMFactor; //130325, kzwerver, n, #C005347
            "Qty (Delivery Job Inventory)" := -1*(ProjectInventoryEntry.Quantity)*UOMFactor; //kzwerver, 110509, c, #27049
          END;
          ProjectInventoryEntry."Entry Type"::StockReceipt: BEGIN
            "Qty (Del. Note Job Inventory)" := ProjectInventoryEntry.Quantity*UOMFactor; //130325, kzwerver, n, #C005347
            "Qty (Job Usage)" := ProjectInventoryEntry.Quantity*UOMFactor; //kzwerver, 110509, c, #27049
            Quantity := "Qty (Job Usage)"*UOMFactor; //kzwerver, 110509, c, #27049
          END;
          //kzwerver, 110727, sn, #28277
          ProjectInventoryEntry."Entry Type"::Transfer: BEGIN
            "Qty (Del. Note Job Inventory)" := ProjectInventoryEntry.Quantity*UOMFactor;
            "Qty (Job Inventory)" := ProjectInventoryEntry.Quantity*UOMFactor;
            Quantity := ProjectInventoryEntry.Quantity*UOMFactor;
          END;
          ProjectInventoryEntry."Entry Type"::"Positive Adjmt.",
          ProjectInventoryEntry."Entry Type"::"Negative Adjmt.": BEGIN
            "Qty (Job Inventory)" := ProjectInventoryEntry.Quantity*UOMFactor;
            Quantity := ProjectInventoryEntry.Quantity*UOMFactor;
          END;
          //kzwerver, 110727, en, #28277
        END;
        //kzwerver,, 110616, ec
      END;
    END;

    PROCEDURE CABHB_FindSupplyPurchReceipt@1100525046(Project@1100525000 : Record 11072003);
    VAR
      PurchRcptLine@1100525001 : Record 121;
      PurchaseHeader@1210190000 : Record 38;
      TempMMDetailLine@1100525003 : TEMPORARY Record 11020578;
      RecRef@1100525002 : RecordRef;
    BEGIN
      WITH PurchRcptLine DO BEGIN
        SETRANGE("Job No.",Project."No.");
        IF MatMonFilterset.ElementFilter <> '' THEN
          SETFILTER(Element, MatMonFilterset.ElementFilter);
        IF MatMonFilterset.ItemFilter <> '' THEN
          SETFILTER("Item No.", MatMonFilterset.ItemFilter);
        SETRANGE("Posting Date",0D,EndDateFilter);
        IF FINDSET THEN BEGIN
          PurchaseHeader.GET(Type,"Order No.");
          IF (PurchaseHeader."Hours Hire Order Type" = 0) THEN BEGIN // 0 = no option value
            TempMMDetailLine.INIT;
            REPEAT
              RecRef.GETTABLE(PurchRcptLine);
              CABHBA_FillMatMonDetLine(PurchRcptLine,TempMMDetailLine,RecRef.RECORDID);
              CABEAB_InsertSection3(TempMMDetailLine);
            UNTIL (NEXT=0);
          END;
        END;
      END;
    END;

    PROCEDURE CABHBA_FillMatMonDetLine@1100525048(PurchRcptLine@1100525001 : Record 121;VAR MMDetLine@1100525000 : Record 11020578;RecID@1100525003 : RecordID);
    BEGIN
      WITH MMDetLine DO BEGIN
        "Project No." := PurchRcptLine."Job No.";
        "Yard No." := PurchRcptLine."Yard No.";
        "Element No." := PurchRcptLine.Element;
        "System No." := PurchRcptLine."System No.";
        "Entity Type" := PurchRcptLine."Entity Type";
        "Entity No." := PurchRcptLine."Entity No.";
        "Item No." := PurchRcptLine."Item No.";
        "Basic Item" := PurchRcptLine."Basic Item";
        "Trade Item" := PurchRcptLine."Trade Item";
        "Vendor (Trade Item)" := PurchRcptLine."Vendor (Trade Item)";
        Location := PurchRcptLine."Location Code";
        "Item Category" := '';
        IF (MaterialMonitorSetup."Use Item Category Filter") THEN
          "Item Category" := PurchRcptLine."Item Category Code";
        TransactionDate := PurchRcptLine."Posting Date";
        DocumentRecordID := RecID;
        DocumentDocumentNo := PurchRcptLine."Document No.";
        DocumentLineNo := PurchRcptLine."Line No.";
        DocumentDate := PurchRcptLine."Posting Date";
        DocumentName := PurchRcptLine.TABLECAPTION + ' ' + DocumentDocumentNo;
        Approved := ValidDate(PurchRcptLine."Promised Receipt Date");
        Manufacturer := PurchRcptLine.Manufacturer;
        "Manufacturer Name" := GetManufacturerName(Manufacturer);
        "Item Description" := PurchRcptLine.Description;
        "Item Description2" := PurchRcptLine."Description 2";
        "Base UOM" := GetUOM("Item No.", "Basic Item", Manufacturer, "Trade Item", "Vendor (Trade Item)",
          PurchRcptLine."Unit of Measure Code");
        "Cost Object" := PurchRcptLine."Shortcut Dimension 2 Code";
        "Qty (Received)" := PurchRcptLine."Quantity (Base)"; //kzwerver, 110509, c, #27049
        Quantity := "Qty (Received)";  //kzwerver, 110509, c, #27049
        DemandSupply := DemandSupply::Supply;
      END;
    END;

    PROCEDURE CABHC_FindSupplyProjectInvent@1100525023(Project@1100525000 : Record 11072003);
    VAR
      JobLedgerEntry@1100525001 : Record 11072005;
      TempMMDetailLine@1100525003 : TEMPORARY Record 11020578;
      RecRef@1100525002 : RecordRef;
    BEGIN
      WITH JobLedgerEntry DO BEGIN
        SETCURRENTKEY("Job No.","Cost Type","Entry Type","Posting Date");
        SETRANGE("Entry Type","Entry Type"::Usage);
        SETRANGE("Cost Type","Cost Type"::Material);
        SETRANGE("Job No.",Project."No.");
        SETRANGE("Vendor No.",'');
        IF MatMonFilterset.ElementFilter <> '' THEN
          SETFILTER(Element, MatMonFilterset.ElementFilter);
        IF MatMonFilterset.ItemFilter <> '' THEN
          SETFILTER("Item No.", MatMonFilterset.ItemFilter);
        SETRANGE("Posting Date",0D,EndDateFilter);
        IF FINDSET THEN BEGIN
          TempMMDetailLine.INIT;
          REPEAT
            RecRef.GETTABLE(JobLedgerEntry);
            CABHCA_FillMatMonDetLine(JobLedgerEntry,TempMMDetailLine,RecRef.RECORDID);
            CABEAB_InsertSection3(TempMMDetailLine);
          UNTIL (NEXT=0);
        END;
      END;
    END;

    PROCEDURE CABHCA_FillMatMonDetLine@1100525025(JobLedgerEntry@1100525001 : Record 11072005;VAR MMDetLine@1100525000 : Record 11020578;RecID@1100525003 : RecordID);
    VAR
      Item@1210190000 : Record 27;
    BEGIN
      WITH MMDetLine DO BEGIN
        "Project No." := JobLedgerEntry."Job No.";
        "Yard No." := JobLedgerEntry."Yard No.";
        "Element No." := JobLedgerEntry.Element;
        "System No." := JobLedgerEntry."System No.";
        "Entity Type" := JobLedgerEntry."Entity Type";
        "Entity No." := JobLedgerEntry."Entity No.";
        "Item No." := JobLedgerEntry."Item No.";
        "Basic Item" := JobLedgerEntry."Basic Item";
        "Trade Item" := JobLedgerEntry."Trade Item";
        "Vendor (Trade Item)" := JobLedgerEntry."Vendor (Trade Item)";
        Location := JobLedgerEntry."Location Code";
        "Item Category" := '';
        IF (MaterialMonitorSetup."Use Item Category Filter") AND
           (Item.GET(JobLedgerEntry."Item No."))
        THEN
          "Item Category" := Item."Item Category Code";
        TransactionDate := JobLedgerEntry."Posting Date";
        DocumentRecordID := RecID;
        DocumentDocumentNo := JobLedgerEntry."Document No.";
        DocumentLineNo := JobLedgerEntry."Document Line No.";
        DocumentDate := JobLedgerEntry."Document Date";
        DocumentName := JobLedgerEntry.TABLECAPTION + ' ' + DocumentDocumentNo;
        Manufacturer := JobLedgerEntry.Manufacturer;
        "Manufacturer Name" := GetManufacturerName(Manufacturer);
        "Item Description" := JobLedgerEntry.Description;
        "Item Description2" := JobLedgerEntry."Description 2";
        "Base UOM" := GetUOM("Item No.", "Basic Item", Manufacturer, "Trade Item", "Vendor (Trade Item)",
          JobLedgerEntry."Unit of Measure Code");
        "Cost Object" := JobLedgerEntry."Global Dimension 2 Code";
        Quantity := JobLedgerEntry."Quantity (Base)"; //kzwerver, 110509, c, #27049
        "Qty (Job Usage)" := Quantity; //kzwerver, 110509, c, #27049
        DemandSupply := DemandSupply::Supply;
      END;
    END;

    PROCEDURE CABHD_AddSupplyPurchReceipt@1100525047(Project@1100525000 : Record 11072003);
    VAR
      PurchRcptLine@1100525001 : Record 121;
      PurchaseHeader@1210190000 : Record 38;
      TempMMDetailLine@1100525003 : TEMPORARY Record 11020578;
      RecRef@1100525002 : RecordRef;
    BEGIN
      WITH PurchRcptLine DO BEGIN
        SETRANGE("Job No.",Project."No.");
        IF MatMonFilterset.ElementFilter <> '' THEN
          SETFILTER(Element, MatMonFilterset.ElementFilter);
        IF MatMonFilterset.ItemFilter <> '' THEN
          SETFILTER("Item No.", MatMonFilterset.ItemFilter);
        SETRANGE("Posting Date",0D,EndDateFilter);
        IF FINDSET THEN BEGIN
          PurchaseHeader.GET(Type,"Order No.");
          IF (PurchaseHeader."Hours Hire Order Type" = 0) THEN BEGIN // 0 = no option value
            TempMMDetailLine.INIT;
            REPEAT
              RecRef.GETTABLE(PurchRcptLine);
              CABHDA_FillMatMonDetLine(PurchRcptLine,TempMMDetailLine,RecRef.RECORDID);
              CABHDB_AddOrInsertSection3(TempMMDetailLine);
            UNTIL (NEXT=0);
          END;
        END;
      END;
    END;

    PROCEDURE CABHDA_FillMatMonDetLine@1100525085(PurchRcptLine@1100525001 : Record 121;VAR MMDetLine@1100525000 : Record 11020578;RecID@1100525003 : RecordID);
    BEGIN
      WITH MMDetLine DO BEGIN
        "Project No." := PurchRcptLine."Job No.";
        "Yard No." := PurchRcptLine."Yard No.";
        "Element No." := PurchRcptLine.Element;
        "System No." := PurchRcptLine."System No.";
        "Entity Type" := PurchRcptLine."Entity Type";
        "Entity No." := PurchRcptLine."Entity No.";
        "Item No." := PurchRcptLine."Item No.";
        "Basic Item" := PurchRcptLine."Basic Item";
        "Trade Item" := PurchRcptLine."Trade Item";
        "Vendor (Trade Item)" := PurchRcptLine."Vendor (Trade Item)";
        Location := PurchRcptLine."Location Code";
        "Item Category" := '';
        IF (MaterialMonitorSetup."Use Item Category Filter") THEN
          "Item Category" := PurchRcptLine."Item Category Code";
        TransactionDate := PurchRcptLine."Posting Date";
        DocumentRecordID := RecID;
        DocumentDocumentNo :=   PurchRcptLine."Order No."; //will be used to try adding this line to PO line
        DocumentLineNo := PurchRcptLine."Order Line No."; //will be used to try adding this line to PO line
        DocumentDate := PurchRcptLine."Posting Date";
        DocumentName := PurchRcptLine.TABLECAPTION + ' ' + DocumentDocumentNo;
        Approved := ValidDate(PurchRcptLine."Promised Receipt Date");
        Manufacturer := PurchRcptLine.Manufacturer;
        "Manufacturer Name" := GetManufacturerName(Manufacturer);
        "Item Description" := PurchRcptLine.Description;
        "Item Description2" := PurchRcptLine."Description 2";
        "Base UOM" := GetUOM("Item No.", "Basic Item", Manufacturer, "Trade Item", "Vendor (Trade Item)",
          PurchRcptLine."Unit of Measure Code");
        "Cost Object" := PurchRcptLine."Shortcut Dimension 2 Code";
        "Qty (Received)" := PurchRcptLine."Quantity (Base)"; //kzwerver, 110509, c, #27049
        //Quantity := PurchRcptLine.Quantity; //in this case this Quantity should NOT be used
        DemandSupply := DemandSupply::Supply;
      END;
    END;

    PROCEDURE CABHDB_AddOrInsertSection3@1100525111(MMDetailLineParmFields@1100525000 : Record 11020578);
    BEGIN
      //This function is a special variant of CABEAB_InsertSection3. It is meant to add Purchase Receipt Line data
      //to a possibly existing Purchase Order. If it does not exist then INSERT it.

      //Skip lines without any Item indication
      IF (MMDetailLineParmFields."Item No." +
          MMDetailLineParmFields."Basic Item" +
          MMDetailLineParmFields."Trade Item" +
          MMDetailLineParmFields."Cost Object" +
          MMDetailLineParmFields."Item Category" +
          MMDetailLineParmFields."Item Description" +
          MMDetailLineParmFields."Base UOM" = '') THEN
        EXIT;

      WITH TempMatMon3Line DO BEGIN
        RESET;
        SETRANGE("Project No.", MMDetailLineParmFields."Project No.");
        SETRANGE("Element No.", MMDetailLineParmFields."Element No.");
        SETRANGE("Yard No.", MMDetailLineParmFields."Yard No.");
        SETRANGE("System No.", MMDetailLineParmFields."System No.");
        SETRANGE("Entity Type", MMDetailLineParmFields."Entity Type");
        SETRANGE("Entity No.", MMDetailLineParmFields."Entity No.");
        SETRANGE("Item No.", MMDetailLineParmFields."Item No.");
        SETRANGE("Basic Item", MMDetailLineParmFields."Basic Item");
        SETRANGE("Trade Item", MMDetailLineParmFields."Trade Item");
        SETRANGE("Base UOM", MMDetailLineParmFields."Base UOM");
        SETRANGE("Cost Object", MMDetailLineParmFields."Cost Object");
        SETRANGE("Item Category", MMDetailLineParmFields."Item Category");
        SETRANGE("Item Description", MMDetailLineParmFields."Item Description");
        IF ((MMDetailLineParmFields.DemandSupply <> MMDetailLineParmFields.DemandSupply::" ") AND
            (MMDetailLineParmFields.TransactionDate < StartDateFilter)) THEN
          //All lines with TransactionDate before Starting Date (of User indicated Datefilter-range) will be summed into ONE line
          //This Line will get Line No. 5000, so that it always will be the first (displayed) line in the primary key order
          SETRANGE("Line No.", 5000)
        ELSE BEGIN
          //when lines should NOT be compressed on line 5000 then it should be split on DocumentDocmuentNo
          SETRANGE(DocumentDocumentNo,MMDetailLineParmFields.DocumentDocumentNo); //to find corresponding Purchase Order Line
          SETRANGE(DocumentLineNo,MMDetailLineParmFields.DocumentLineNo); //to find corresponding Purchase Order Line
        END;

        IF NOT FINDFIRST THEN BEGIN
          //Create
          INIT;
          COPY(MMDetailLineParmFields);
          "Base UOM" := GetUOM("Item No.",  "Basic Item", Manufacturer, "Trade Item", "Vendor (Trade Item)",
            MMDetailLineParmFields."Base UOM");
          IF ((MMDetailLineParmFields.DemandSupply <> MMDetailLineParmFields.DemandSupply::" ") AND
              (MMDetailLineParmFields.TransactionDate < StartDateFilter)) THEN BEGIN
            "Line No." := 5000; //This is a special record to accumulate all details prior to indicated Start Date
            DocumentName := Text11012003;
          END ELSE BEGIN
            "Line No." := LastLine3No + 10000;
            LastLine3No := LastLine3No + 10000;
          END;
          "No." := LastDet3RecNo+1;  //==prim.key
          LastDet3RecNo += 1;
          INSERT;
        END ELSE BEGIN
          //In case PO receipt this will be added to the found PO line or to the record with 5000 LineNo.
          "Qty (Received)" += MMDetailLineParmFields."Qty (Received)";
          MODIFY;
        END;
      END;
    END;

    PROCEDURE CAC_ProcessDetailsAllSection3@1100525116();
    VAR
      LastTempMatMon3Line@1100525008 : TEMPORARY Record 11020578;
      DemandDate@1100525005 : Date;
    BEGIN
      //Post: TempMatMon3 field "Unbalance Days" is filled
      WITH TempMatMon3Line DO BEGIN
        //1st Loop: preprocess EarliestDemandDate
        RESET;
        SETCURRENTKEY("Project No.","Element No.","Yard No.","System No.",
                      "Entity Type","Entity No.","Item No.","Basic Item","Trade Item","Base UOM");
        IF FINDSET THEN BEGIN
          REPEAT
            IF (C_Section3RecordsDiffer(TempMatMon3Line,LastTempMatMon3Line)) THEN BEGIN
              LastTempMatMon3Line := TempMatMon3Line;
              IF (DemandSupply = DemandSupply::Demand) THEN
                LastTempMatMon3Line.EarliestDemandDate := TransactionDate
              ELSE
                LastTempMatMon3Line.EarliestDemandDate := 0D;
              LastTempMatMon3Line.INSERT;
            END;
            IF (DemandSupply = DemandSupply::Demand) THEN
              IF ((TransactionDate < LastTempMatMon3Line.EarliestDemandDate) OR
                  (LastTempMatMon3Line.EarliestDemandDate = 0D)) THEN BEGIN
                LastTempMatMon3Line.EarliestDemandDate := TransactionDate;
                LastTempMatMon3Line.MODIFY;
              END;
          UNTIL (NEXT=0);
        END;

        //2nd loop: process LastTempMatMon3Line recordset into TempMatMon3Line recordset
        WITH LastTempMatMon3Line DO BEGIN
          RESET;
          IF FINDSET THEN BEGIN
            REPEAT
              TempMatMon3Line.SETRANGE("Project No.", "Project No.");
              TempMatMon3Line.SETRANGE("Element No.", "Element No.");
              TempMatMon3Line.SETRANGE("Yard No.", "Yard No.");
              TempMatMon3Line.SETRANGE("System No.", "System No.");
              TempMatMon3Line.SETRANGE("Entity Type", "Entity Type");
              TempMatMon3Line.SETRANGE("Entity No.", "Entity No.");
              TempMatMon3Line.SETRANGE("Item No.", "Item No.");
              TempMatMon3Line.SETRANGE("Basic Item", "Basic Item");
              TempMatMon3Line.SETRANGE("Trade Item", "Trade Item");
              TempMatMon3Line.SETRANGE("Base UOM", "Base UOM");
              IF TempMatMon3Line.FINDSET(TRUE,FALSE) THEN BEGIN
                REPEAT
                  TempMatMon3Line.EarliestDemandDate := EarliestDemandDate;
                  TempMatMon3Line.MODIFY;
                UNTIL (TempMatMon3Line.NEXT=0);
              END;
            UNTIL (NEXT=0);
          END;
          RESET;
          DELETEALL;
        END;

        //3rd loop: calculates "Unbalance Days"
        RESET;
        SETCURRENTKEY("Project No.","Element No.","Yard No.","System No.",
                      "Entity Type","Entity No.","Item No.","Basic Item","Trade Item","Base UOM");
        IF FINDSET THEN BEGIN
          REPEAT
            IF (C_Section3RecordsDiffer(TempMatMon3Line,LastTempMatMon3Line)) THEN BEGIN
              LastTempMatMon3Line := TempMatMon3Line;
              DemandDate := EarliestDemandDate;
            END;
            IF (DemandSupply = DemandSupply::Demand) THEN
                DemandDate := TransactionDate;
            IF (ValidDate(DemandDate)) AND (ValidDate(TransactionDate)) THEN
              "Unbalance Days" := TransactionDate - DemandDate;
            MODIFY;
          UNTIL (NEXT=0);
        END;
        RESET;
      END;
    END;

    PROCEDURE CAD_RebuildSection2From3@1100525049() : Boolean;
    BEGIN
      //This function should be called when the user changed one or more filter settings
      CADA_ClearDetailsSection2;
      TempMatMon3Line.RESET;
      IF (TempMatMon3Line.COUNT = 0) THEN
        EXIT(FALSE);
      CADB_ExtractSection2From3;
      CADC_FinishSection2;
      TempMatMon2Line.RESET;
      CADD_PostFilterSection2;
      EXIT(TRUE);
    END;

    PROCEDURE CADA_ClearDetailsSection2@1100525052();
    BEGIN
      //Clear section 2
      WITH TempMatMon2Line DO BEGIN
        //Clear table
        RESET;
        DELETEALL;
      END;
    END;

    PROCEDURE CADB_ExtractSection2From3@1100525008();
    VAR
      Window@1100525001 : Dialog;
      LastLine2No@1100525000 : Integer;
    BEGIN
      // Pre: Details section 3 have been determined for the Project defined in MatMonFilterset.ProjectFilter.
      //      User has indicated additional filters in MatMonFilterset.
      //Post: Only those section 3 records will be used to display in section2 that apply to ALL filters in MatMonFilterset
      //      Section 2 displays cumulative values per: "Project No."/"Element No."/"Yard No."/"System No."/
      //      "Entity Type"/"Entity Code"/"Item No."/"Basic Item"/"Trade Item"/"Base UOM"

      Window.OPEN(Text010);
      LastLine2No := 0;
      WITH TempMatMon3Line DO BEGIN
        RESET;
        SETCURRENTKEY("Project No.","Element No.","Yard No.","System No.",
                      "Entity Type","Entity No.","Item No.","Basic Item","Trade Item","Base UOM");
        //Apply MatMonFilterset filters
        SETFILTER("Project No.", MatMonFilterset.ProjectFilter);
        SETFILTER("Element No.", MatMonFilterset.ElementFilter);
        SETFILTER("Yard No.", MatMonFilterset.YardNoFilter);
        SETFILTER("System No.", MatMonFilterset.SystemNoFilter);
        SETFILTER("Entity Type", MatMonFilterset.EntityTypeFilter);
        SETFILTER("Entity No.", MatMonFilterset.EntityNoFilter);
        SETFILTER("Item No.", MatMonFilterset.ItemFilter);
        SETFILTER("Basic Item", MatMonFilterset.BasicItemFilter);
        SETFILTER("Trade Item", MatMonFilterset.TradeItemFilter);
        SETFILTER("Item Category", MatMonFilterset.ItemCategoryFilter);
        SETFILTER("Cost Object", MatMonFilterset.CostObjectFilter);
        //Some MatMonFilterset filters CANNOT be applied here but will be done later in CADD_PostFilterSection2

        IF FINDSET THEN BEGIN
          REPEAT
            //Detail records in section3 are unique within the following fields:
            TempMatMon2Line.SETRANGE("Project No.", "Project No.");
            TempMatMon2Line.SETRANGE("Element No.", "Element No.");
            TempMatMon2Line.SETRANGE("Yard No.", "Yard No.");
            TempMatMon2Line.SETRANGE("System No.", "System No.");
            TempMatMon2Line.SETRANGE("Entity Type", "Entity Type");
            TempMatMon2Line.SETRANGE("Entity No.", "Entity No.");
            TempMatMon2Line.SETRANGE("Cost Object", "Cost Object");
            TempMatMon2Line.SETRANGE("Item Category", "Item Category");
            CADBA_SetAdditionalFilters(TempMatMon3Line);
            TempMatMon2Line.SETRANGE("Base UOM", "Base UOM");

            IF (NOT TempMatMon2Line.FINDFIRST) THEN BEGIN
              //Create
              TempMatMon2Line.INIT;
              TempMatMon2Line.TRANSFERFIELDS(TempMatMon3Line);
              LastLine2No += 1;
              TempMatMon2Line."Detail LineNo." := LastLine2No; //==prim key
              TempMatMon2Line."Unbalance Days Min." := "Unbalance Days";
              TempMatMon2Line."Unbalance Days Max." := "Unbalance Days";
              TempMatMon2Line."Entry Type" := "Entry Type";
              TempMatMon2Line.INSERT;
            END ELSE BEGIN
              //Modify
              TempMatMon2Line."Qty (Material Requirement)" += "Qty (Material Requirement)";
              IF (TempMatMon2Line."Qty (Budget)" = 0) THEN //kzwerver, 110517, n, #27497
                TempMatMon2Line."Qty (Budget)" += "Qty (Budget)";
              TempMatMon2Line."Qty (Advice Orders)" += "Qty (Advice Orders)";
              TempMatMon2Line."Qty (Purchase Orders)" += "Qty (Purchase Orders)";
              TempMatMon2Line."Qty (Received)" += "Qty (Received)";
              TempMatMon2Line."Qty (Inventory Orders)" += "Qty (Inventory Orders)";
              TempMatMon2Line."Qty (Delivery Job Inventory)" += "Qty (Delivery Job Inventory)";
              TempMatMon2Line."Qty (Suggested Extra Advice)" += "Qty (Suggested Extra Advice)";
              TempMatMon2Line."Qty (Free Inventory)" += "Qty (Free Inventory)";
              TempMatMon2Line."Qty (Job Inventory)" += "Qty (Job Inventory)";
              TempMatMon2Line."Qty (Del. Note Job Inventory)" += "Qty (Del. Note Job Inventory)"; //130325, kzwerver, n, #C005347
              TempMatMon2Line."Qty (Job Usage)" += "Qty (Job Usage)";
              TempMatMon2Line."Qty (Blanket Order)" += "Qty (Blanket Order)";
              IF ("Unbalance Days" < TempMatMon2Line."Unbalance Days Min.") THEN
                TempMatMon2Line."Unbalance Days Min." := "Unbalance Days";
              IF ("Unbalance Days" > TempMatMon2Line."Unbalance Days Max.") THEN
                TempMatMon2Line."Unbalance Days Max." := "Unbalance Days";
              TempMatMon2Line.MODIFY;
            END;
            //store related Line No.
            IF "Compressed to LineNo." <> TempMatMon2Line."Detail LineNo." THEN BEGIN
              "Compressed to LineNo." := TempMatMon2Line."Detail LineNo.";
              MODIFY;
            END;
          UNTIL (NEXT=0);
        END;
      END;
      Window.CLOSE;
    END;

    PROCEDURE CADBA_SetAdditionalFilters@1100525010(MaterialMonitorDetailLine@1100525000 : Record 11020578);
    BEGIN
      //  Pre: TempMatMon2Line records are based upon TempMatMon3Line details. The section3 details are added based
      //       upon several filter criteria. One special adding criterium is the Item source: is it a NAVision-item,
      //       a Trade-item, or a Base-item? Or is it none of all and is it a special construction that uses Cost Object,
      //       Description and Unit of Measure to indicate the Item used? To determine the order to test which "Item No." is
      //       filled settings (in MaterialMonitorSetup) exists that indicate the order to be used.
      // Post: TempMatMon2Line is filtered additionaly according filling of Item No's and the settings in MaterialMonitorSetup.
      WITH MaterialMonitorDetailLine DO BEGIN
        //First filter special Item that uses Cost Object, Description and Unit of Measure to indicate the Item used
        IF (("Item No." = '') AND
            ("Trade Item" = '') AND
            ("Basic Item" = '') AND
            //("Cost Object" <> '') AND //kzwerver, 110728, o, #28064
            //("Item Category" <> '') AND //kzwerver, 110728, o, #28064
            ("Item Description" <> '')) THEN //kzwerver, 110728, c, #28064
            //("Base UOM" <> '')) THEN //kzwerver, 110728, o, #28064
        BEGIN
          TempMatMon2Line.SETRANGE("Item No.", "Item No.");
          TempMatMon2Line.SETRANGE("Trade Item", "Trade Item");
          TempMatMon2Line.SETRANGE("Basic Item", "Basic Item");
          TempMatMon2Line.SETRANGE("Item Description", "Item Description");
          TempMatMon2Line.SETRANGE("Base UOM", "Base UOM");
          EXIT;
        END;

        //remove filters
        TempMatMon2Line.SETRANGE("Item No.");
        TempMatMon2Line.SETRANGE("Trade Item");
        TempMatMon2Line.SETRANGE("Basic Item");
        TempMatMon2Line.SETRANGE("Item Description");
        TempMatMon2Line.SETRANGE("Base UOM");
        CASE MaterialMonitorSetup."Material Type Priority1" OF
          MaterialMonitorSetup."Material Type Priority1"::Item: BEGIN
            IF ("Item No." <> '') THEN BEGIN
              TempMatMon2Line.SETRANGE("Item No.", "Item No.");
              EXIT;
            END;
          END;
          MaterialMonitorSetup."Material Type Priority1"::"Trade Item": BEGIN
            IF ("Trade Item" <> '') THEN BEGIN
              TempMatMon2Line.SETRANGE("Trade Item", "Trade Item");
              EXIT;
            END;
          END;
          MaterialMonitorSetup."Material Type Priority1"::"Base Item": BEGIN
            IF ("Basic Item" <> '') THEN BEGIN
              TempMatMon2Line.SETRANGE("Basic Item", "Basic Item");
              EXIT;
            END;
          END;
        END;

        //when function was not left with EXIT, then check next priority
        CASE MaterialMonitorSetup."Material Type Priority2" OF
          MaterialMonitorSetup."Material Type Priority2"::Item: BEGIN
            IF ("Item No." <> '') THEN BEGIN
              TempMatMon2Line.SETRANGE("Item No.", "Item No.");
              EXIT;
            END;
          END;
          MaterialMonitorSetup."Material Type Priority2"::"Trade Item": BEGIN
            IF ("Trade Item" <> '') THEN BEGIN
              TempMatMon2Line.SETRANGE("Trade Item", "Trade Item");
              EXIT;
            END;
          END;
          MaterialMonitorSetup."Material Type Priority2"::"Base Item": BEGIN
            IF ("Basic Item" <> '') THEN BEGIN
              TempMatMon2Line.SETRANGE("Basic Item", "Basic Item");
              EXIT;
            END;
          END;
        END;

        //when function was not left with EXIT, then check next priority
        CASE MaterialMonitorSetup."Material Type Priority3" OF
          MaterialMonitorSetup."Material Type Priority3"::Item: BEGIN
            IF ("Item No." <> '') THEN BEGIN
              TempMatMon2Line.SETRANGE("Item No.", "Item No.");
              EXIT;
            END;
          END;
          MaterialMonitorSetup."Material Type Priority3"::"Trade Item": BEGIN
            IF ("Trade Item" <> '') THEN BEGIN
              TempMatMon2Line.SETRANGE("Trade Item", "Trade Item");
              EXIT;
            END;
          END;
          MaterialMonitorSetup."Material Type Priority3"::"Base Item": BEGIN
            IF ("Basic Item" <> '') THEN BEGIN
              TempMatMon2Line.SETRANGE("Basic Item", "Basic Item");
              EXIT;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE CADC_FinishSection2@1100525024();
    VAR
      Item@1100525002 : Record 27;
      TotalDemand@1100525000 : Decimal;
      TotalSupply@1100525001 : Decimal;
    BEGIN
      // Pre: Details section 3 have been determined
      //Post: Section 2 unbalance type / colors will be set
      Window.OPEN(Text011);
      WITH TempMatMon2Line DO BEGIN
        RESET;
        IF FINDSET(TRUE,FALSE) THEN BEGIN
          REPEAT
            //Blanket Orders will display only when any Demand exist
            //IF (("Qty (Blanket Order)" <> 0) AND (TotalDemand = 0) AND (TotalSupply = 0)) THEN //kzwerver, 110801, eo, #23203
            //  DELETE
            //ELSE BEGIN //kzwerver, 110801, eo, #23203
              IF ("Item No." <> '') THEN BEGIN
                Item.GET("Item No.");
                Item.CALCFIELDS(Inventory,"Qty. on Item Journal Project");
                "Qty (Free Inventory)" := Item.Inventory - Item."Qty. on Item Journal Project";
                "Qty (Item Journal)" := GetItemQtyItemJournalProject(TempMatMon2Line."Item No.", MatMonFilterset.ProjectFilter);
                "Qty (Item Inventory)" := GetItemQtyInventory(TempMatMon2Line."Item No.", MatMonFilterset.LocationFilter);
              END;
              TotalDemand := "Qty (Material Requirement)";
              TotalSupply :=
                "Qty (Advice Orders)" +
                "Qty (Purchase Orders)" +
                "Qty (Received)" +
                "Qty (Inventory Orders)" +
                "Qty (Job Inventory)" + //kzwerver, 110727, n, #28277
                "Qty (Job Usage)";
              "Too Little" := TotalDemand > TotalSupply + "Qty (Suggested Extra Advice)";
              "Too Much" := TotalDemand < TotalSupply + "Qty (Suggested Extra Advice)";
              IF (TotalDemand - TotalSupply > 0) THEN
                "Qty (Suggested Extra Advice)" := TotalDemand - TotalSupply;
              CADCA_CalcTooLateSection2(TempMatMon2Line,"Too Late","Too Early");
              InNrOfDaysFilter := CADCB_CalcInNrOfDaysFilter(TempMatMon2Line);
              IF (TotalDemand <> 0) THEN
                SupplyPercOfDemand := ABS(TotalSupply/TotalDemand)*100
              ELSE
                SupplyPercOfDemand := 0;
              IF (NOT "Too Little") AND (NOT "Too Much") AND (NOT "Too Early") AND (NOT "Too Late") THEN
                "In Balance" := TRUE;
              SetLineStyle("Too Late", "Too Little", "Too Much", "Too Early", "Line Style");
              SetUnbalanceType("Too Early", "Too Late", "Too Much", "Too Little", "In Balance", "Unbalance Type"); //kzwerver, 110119, n
              MODIFY;
            //END; //kzwerver, 110801, o, #23203
          UNTIL (NEXT=0);
        END;
      END;
      Window.CLOSE
    END;

    PROCEDURE CADD_PostFilterSection2@1100525073();
    BEGIN
      GetMatMonSettings;
      WITH TempMatMon2Line DO BEGIN
        SETFILTER("Unbalance Type", GetUnbalanceTypeFilter); //kzwerver, 110119, n

        //The next two filters are not applied on section3 level in function CADB_ExtractSection2From3, but on
        //section2 level
        IF (MatMonFilterset.NrOfDaysFilter <> 0) THEN
          SETRANGE(InNrOfDaysFilter,TRUE);
        IF (MatMonFilterset.PercQtyFilter <> 0) THEN
          SETFILTER(SupplyPercOfDemand,'%1..',ABS(MatMonFilterset.PercQtyFilter));

        IF NOT MatMonFilterset.DeliveredFilter THEN BEGIN
          IF FINDSET THEN
            REPEAT
              IF (("Qty (Material Requirement)" <> "Qty (Received)" + "Qty (Job Usage)") OR
                  ("Qty (Advice Orders)" <> 0) OR
                  ("Qty (Purchase Orders)" <> 0) OR
                  ("Qty (Inventory Orders)" <> 0)) THEN
                MARK(TRUE);
            UNTIL NEXT = 0;
          MARKEDONLY(TRUE);
        END;
      END;
    END;

    PROCEDURE CADCA_CalcTooLateSection2@1100525077(MaterialMonitorCumulLine@1100525000 : Record 11020577;VAR TooLate@1100525009 : Boolean;VAR TooEarly@1100525010 : Boolean);
    VAR
      TotalDemand@1100525005 : Decimal;
      CurrDemand@1100525006 : Decimal;
      DemandRead@1100525001 : Boolean;
      SupplyRead@1100525002 : Boolean;
      SupplyDate@1100525003 : Date;
      DemandDate@1100525004 : Date;
      LastDemandRead@1100525007 : Boolean;
      LastSupplyRead@1100525008 : Boolean;
      CurrSupply@1100525011 : Decimal;
      TotalSupply@1100525012 : Decimal;
    BEGIN
      // Pre: Section3 lines exist, but are NOT processed using function C_ProcessDetailsSection3
      //Post: Section2 line was indicated to be "Too Late" or NOT. System is trying too decide as soon as possible
      //      the Section2 line is "Too Late"=TRUE. Then it stops further checking.

      WITH TempMatMon3Line DO BEGIN
        RESET;
        SETCURRENTKEY("Project No.","Element No.","Yard No.","System No.",
                      "Entity Type","Entity No.","Item No.","Basic Item","Trade Item","Base UOM");
        SETRANGE("Project No.", MaterialMonitorCumulLine."Project No.");
        SETRANGE("Element No.", MaterialMonitorCumulLine."Element No.");
        SETRANGE("Yard No.", MaterialMonitorCumulLine."Yard No.");
        SETRANGE("System No.", MaterialMonitorCumulLine."System No.");
        SETRANGE("Entity Type", MaterialMonitorCumulLine."Entity Type");
        SETRANGE("Entity No.", MaterialMonitorCumulLine."Entity No.");
        SETRANGE("Item No.", MaterialMonitorCumulLine."Item No.");
        SETRANGE("Basic Item", MaterialMonitorCumulLine."Basic Item");
        SETRANGE("Trade Item", MaterialMonitorCumulLine."Trade Item");
        SETRANGE("Base UOM", MaterialMonitorCumulLine."Base UOM");
        IF NOT ISEMPTY THEN BEGIN
          SETCURRENTKEY(TransactionDate,DemandSupply,"Item No.","Basic Item","Trade Item","Base UOM");
          IF FINDSET THEN //read in new sorting order
          REPEAT
            CASE DemandSupply OF
              DemandSupply::" ":; //Skip Engineering Part lines
              DemandSupply::Demand: BEGIN
                CurrDemand := "Qty (Material Requirement)";
                TotalDemand += CurrDemand;
                IF LastDemandRead THEN BEGIN
                END;
                DemandDate := TransactionDate;
                IF SupplyRead THEN BEGIN //compare demand to supply
                  CheckSupplyVsDemandDate(DemandDate, SupplyDate,TooLate,TooEarly);
                  IF TooLate THEN
                    EXIT;
                END;
                DemandRead := TRUE;
                LastDemandRead := TRUE;
                LastSupplyRead := FALSE;
              END;
              DemandSupply::Supply: BEGIN
                SupplyDate := TransactionDate;
                CurrSupply := "Qty (Advice Orders)" +
                              "Qty (Purchase Orders)" +
                              "Qty (Received)" +
                              "Qty (Inventory Orders)" +
                              "Qty (Delivery Job Inventory)" +
                              "Qty (Suggested Extra Advice)";
                TotalSupply += CurrSupply;
                IF DemandRead THEN BEGIN
                  IF (TotalDemand >= TotalSupply) THEN BEGIN
                    CheckSupplyVsDemandDate(DemandDate, SupplyDate,TooLate,TooEarly);
                    CheckAgainstWorkdate(SupplyDate, TooLate, TooEarly);
                    IF TooLate THEN
                      EXIT;
                  END;
                END;
                SupplyRead := TRUE;
                LastDemandRead := FALSE;
                LastSupplyRead := TRUE;
              END;
            END;
          UNTIL (NEXT=0);
        END
      END;

      EXIT;
    END;

    PROCEDURE CADCB_CalcInNrOfDaysFilter@1100525113(MaterialMonitorCumulLine@1100525000 : Record 11020577) : Boolean;
    VAR
      FilterStart@1100525001 : Integer;
      FilterEnd@1100525002 : Integer;
    BEGIN
      WITH MaterialMonitorCumulLine DO BEGIN
        FilterStart := -ABS(MatMonFilterset.NrOfDaysFilter);
        FilterEnd := ABS(MatMonFilterset.NrOfDaysFilter);
        IF ("Unbalance Days Min." <= FilterStart) THEN
          EXIT(TRUE);
        IF ("Unbalance Days Max." >= FilterEnd) THEN
          EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    PROCEDURE C_FindRecord@1100525020(Which@1100525000 : Text[1024];VAR DisplayRec@1100525002 : Record 11020578) : Boolean;
    BEGIN
      //synchronize TempMatMon3DisplayLine recordset to the selected section2 line: SelectedMatMonCumLine
      TempMatMon3DisplayLine.RESET;
      IF TempMatMon3DisplayLine.FINDFIRST THEN;
      IF (SelectedMatMonCumLine."Detail LineNo." <> TempMatMon3DisplayLine."Compressed to LineNo.") THEN
        C_PrepareDetailRecords;

      TempMatMon3DisplayLine := DisplayRec;
      TempMatMon3DisplayLine.SETCURRENTKEY(TransactionDate,DemandSupply,"Item No.","Basic Item","Trade Item","Base UOM");
      IF FirstTimeRunSect3 THEN  //do not copy this filters the first time, because when this was saved from screen itself do not copy
        TempMatMon3DisplayLine.COPYFILTERS(DisplayRec)
      ELSE
        DisplayRec.RESET; //remove saved filters on first time run
      FirstTimeRunSect3 := TRUE;
      IF NOT TempMatMon3DisplayLine.FIND(Which) THEN
        EXIT(FALSE);

      DisplayRec := TempMatMon3DisplayLine;
      EXIT(TRUE);
    END;

    PROCEDURE C_NextRecord@1100525019(Steps@1100525000 : Integer;VAR DisplayRec@1100525001 : Record 11020578) : Integer;
    VAR
      NoOfSteps@1100525003 : Integer;
    BEGIN
      TempMatMon3DisplayLine := DisplayRec;
      NoOfSteps := TempMatMon3DisplayLine.NEXT(Steps);
      IF (NoOfSteps <> 0) THEN
        DisplayRec := TempMatMon3DisplayLine;
      EXIT(NoOfSteps);
    END;

    PROCEDURE C_PrepareDetailRecords@1100525021();
    BEGIN
      //Pre : This function is called when user requested to show Section3 detail form.
      //Post: A subset of TempMatMon3Line is written into TempMatMon3DisplayLine that will be displayed
      C_ProcessDetailDisplaySection3;
      C_SyncUnbalanceDaysSection3To2;
    END;

    PROCEDURE C_ProcessDetailDisplaySection3@1100525006();
    VAR
      TempSec3AdvCum@1100525015 : TEMPORARY Record 11020578;
      DemandComponentExist@1100525000 : Boolean;
      LastLineWasDemand@1100525006 : Boolean;
      QtyOrdersCum@1100525001 : Decimal;
      QtyExtraAdviceCum@1100525004 : Decimal;
      QtySuggestedExtraAdvice@1100525005 : Decimal;
      QtyUnbalance@1100525008 : Decimal;
      SumQtyUnbalance@1100525009 : Decimal;
      DemandDate@1100525002 : Date;
      SupplyDate@1100525003 : Date;
      LastTransactionDate@1100525007 : Date;
      LastSec3No@1100525016 : Integer;
      Supply@1100525017 : Boolean;
      MaxAdviceOrg@1100525020 : Decimal;
      FirstDemandDate@1100525019 : Date;
      FirstDemandDateFound@1100525021 : Boolean;
      QtyCorrExtraAdvice@1210190000 : Decimal;
    BEGIN
      //Pre : All details section3 were written TempMatMon3Line based upon filters in MatMonFilterset.
      //      To present section3 to user the records should be preprocessed: all values should be filled.
      //      From performance point of view this is NOT done on the complete base of TempMatMon3Line, there could
      //      be too many detail records. For that reason only the part to be displayed is preprocessed, just before it
      //      will be presented on the screen. This results in one disadvantage these details CANNOT be used to calculate
      //      the analogue recorddetails of TempMatMon2Line. These TempMatMon2Line details will be calculated independantly.
      //Post: Details section3 to be displayed are extracted from TempMatMon3Line and written to TempMatMon3DisplayLine.
      //      They should display values in correct order: sorted by date, values summed/counted correctly etc.
      //      Records must be read in presentation order and omitting field values can be calculated.

      //Fill TempMatMon3Display Lines recordset based upon TempMatMon3Line filtered by SelectedMatMonCumLine.
      TempMatMon3DisplayLine.RESET;
      TempMatMon3DisplayLine.DELETEALL;
      WITH TempMatMon3Line DO BEGIN
        RESET;
        SETFILTER(DemandSupply,'<>%1',TempMatMon3Line.DemandSupply::" ");
        SETRANGE("Compressed to LineNo.",SelectedMatMonCumLine."Detail LineNo.");
        IF FINDSET THEN BEGIN
          REPEAT
            TempMatMon3DisplayLine := TempMatMon3Line;
            TempMatMon3DisplayLine.INSERT;
          UNTIL (NEXT=0);
        END;
      END;

      //Sum "Qty (Suggested Extra Advice)" per TransactionDate; store in local Temp rec: TempSec3AdvCum
      TempSec3AdvCum.RESET;
      TempSec3AdvCum.DELETEALL;
      WITH TempMatMon3DisplayLine DO BEGIN
        RESET;
        SETCURRENTKEY(TransactionDate,DemandSupply,"Item No.","Basic Item","Trade Item","Base UOM");
        CALCSUMS(Quantity,"Qty (Suggested Extra Advice)");
        IF ((Quantity + "Qty (Suggested Extra Advice)") < 0) THEN
          MaxAdviceOrg := ABS(Quantity + "Qty (Suggested Extra Advice)"); //Max advisable quantity
        IF FINDSET THEN BEGIN
          REPEAT
            //Remember first DemandDate
            IF ((DemandSupply = DemandSupply::Demand) AND (NOT FirstDemandDateFound)) THEN BEGIN
              FirstDemandDate := TransactionDate;
              FirstDemandDateFound := TRUE;
            END;
            QtyOrdersCum += Quantity;
            //Keep track of "Qty (Suggested Extra Advice)" per TransactionDate in TempSec3AdvCum
            IF ((TransactionDate <> LastTransactionDate) OR
                ((TransactionDate = 0D) AND (LastTransactionDate = 0D))) THEN BEGIN
              QtySuggestedExtraAdvice := 0;
              LastTransactionDate := TransactionDate;
              TempSec3AdvCum := TempMatMon3DisplayLine;
              LastSec3No := TempSec3AdvCum."No.";
              TempSec3AdvCum."Compressed to LineNo." := LastSec3No;
              //use "Compressed to LineNo." to store the No.(else rename needed)
              TempSec3AdvCum.INSERT;
              Supply := (DemandSupply = DemandSupply::Supply);
              IF ((QtyOrdersCum + QtyExtraAdviceCum) < 0) THEN BEGIN
                QtySuggestedExtraAdvice := ABS(QtyOrdersCum + QtyExtraAdviceCum);
                QtyExtraAdviceCum += QtySuggestedExtraAdvice;
              END;
            END ELSE BEGIN
              IF (NOT Supply) THEN BEGIN
                Supply := (DemandSupply = DemandSupply::Supply);
                IF Supply THEN BEGIN
                  //advice order will be replaced to this line
                  LastSec3No := "No.";
                  TempSec3AdvCum."Compressed to LineNo." := LastSec3No;
                  //use "Compressed to LineNo." to store the No.(else rename needed)
                END;
              END;
              IF ((QtyOrdersCum + QtyExtraAdviceCum) <> 0) THEN BEGIN
                QtyCorrExtraAdvice := - (QtyOrdersCum + QtyExtraAdviceCum);
                IF ((QtySuggestedExtraAdvice + QtyCorrExtraAdvice) >= 0) THEN BEGIN
                  QtySuggestedExtraAdvice := QtySuggestedExtraAdvice + QtyCorrExtraAdvice;
                  QtyExtraAdviceCum := QtyExtraAdviceCum + QtyCorrExtraAdvice;
                END;
              END;
            END;
            //Maximize
            IF (QtySuggestedExtraAdvice > MaxAdviceOrg) THEN BEGIN
              QtyExtraAdviceCum -= QtySuggestedExtraAdvice;
              QtySuggestedExtraAdvice := MaxAdviceOrg;
              QtyExtraAdviceCum += QtySuggestedExtraAdvice;
            END;
            IF (MaxAdviceOrg >= QtySuggestedExtraAdvice) THEN
              TempSec3AdvCum."Qty (Suggested Extra Advice)" := QtySuggestedExtraAdvice;
            IF NOT TempSec3AdvCum.MODIFY THEN
              TempSec3AdvCum.INSERT;
          UNTIL (NEXT=0);
        END;
      END;
      //Process local Temp rec: TempSec3AdvCum into TempMatMon3DisplayLine
      WITH TempSec3AdvCum DO BEGIN
        RESET;
        IF FINDSET THEN BEGIN
          REPEAT
            TempMatMon3DisplayLine.SETRANGE("No.","Compressed to LineNo.");
            IF TempMatMon3DisplayLine.FINDFIRST THEN BEGIN
              TempMatMon3DisplayLine."Qty (Suggested Extra Advice)" := "Qty (Suggested Extra Advice)";
              TempMatMon3DisplayLine.MODIFY;
            END;
          UNTIL (NEXT=0);
        END;
      END;

      //Fill all TempMatMon3DisplayLine variables
      QtyOrdersCum := 0;
      QtyExtraAdviceCum := 0;
      WITH TempMatMon3DisplayLine DO BEGIN
        IF FirstDemandDateFound THEN
          DemandDate := FirstDemandDate; //use from last loop to be able to calc unbalance days on supply lines before 1st demand line
        RESET;
        SETCURRENTKEY(TransactionDate,DemandSupply,"Item No.","Basic Item","Trade Item","Base UOM");
        IF FINDSET THEN BEGIN
          REPEAT
            //Fill quantity + cumulative variables
            QtyOrdersCum += Quantity;
            "Qty (Orders Cum.)" := QtyOrdersCum + QtyExtraAdviceCum;
            "Qty (Purch.Rcpt.)" += "Qty (Received)";
            QtySuggestedExtraAdvice := "Qty (Suggested Extra Advice)";
            "Qty (Extra Advice Cum.)" := QtyExtraAdviceCum + "Qty (Suggested Extra Advice)";
            "Extra Advice" := ("Qty (Suggested Extra Advice)" > 0);

            //Fill Unbalance variables
            IF (DemandSupply = DemandSupply::Demand) THEN BEGIN
              DemandComponentExist := TRUE;
              LastLineWasDemand := TRUE;
              DemandDate := TransactionDate;
            END;
            IF (DemandSupply = DemandSupply::Supply) THEN BEGIN
              LastLineWasDemand := FALSE;
              SupplyDate := TransactionDate;
              "Too Early" := (NOT DemandComponentExist);  //Supply before any Demand results in "Too Early"=TRUE
              "Too Little" := QtyOrdersCum < 0;
              "Too Much" := QtyOrdersCum  > 0;
              "Unbalance Quantity" := QtyOrdersCum * -1;
              CheckSupplyVsDemandDate(DemandDate, SupplyDate,"Too Late","Too Early");
            END;

            //Fill "Unbalance Days" / "Unbalance Quantity"
            IF (ValidDate(DemandDate)) AND (ValidDate(TransactionDate)) THEN
              "Unbalance Days" := TransactionDate - DemandDate;
            CASE TRUE OF
              "Unbalance Days" < 0: BEGIN
                "Too Late" := FALSE;
                "Too Early" := TRUE;
              END;
              "Unbalance Days" = 0: BEGIN
                "Too Late" := FALSE;
                "Too Early" := FALSE;
              END;
              "Unbalance Days" > 0: BEGIN
                "Too Late" := TRUE;
                "Too Early" := FALSE;
              END;
            END;

            //In case user wants to see when a Transaction Date is before UnbalanceWorkDate
            IF (NOT "Too Late") THEN BEGIN //Only when "Too Late" is not already set
              IF (DemandSupply = DemandSupply::Supply) THEN BEGIN //only Supply components
                IF (TransactionDate < MatMonFilterset.UnbalanceWorkDate) THEN BEGIN //kzwerver, 110121, c
                  "Too Late" := TRUE;
                  "Too Early" := FALSE;
                END;
              END;
            END;

            //kzwerver, 110428, sn, #21751
            IF (DemandSupply = DemandSupply::Supply) AND
                ("Qty (Advice Orders)" = 0 )AND
                ("Qty  Processed (Advice Orders)" <> 0)
            THEN BEGIN //this is a processed advice order
              "Too Early" := FALSE;
              "Too Late" := FALSE;
              "Too Much" := FALSE;
              "Too Little" := FALSE;
              "In Balance" := TRUE;
              "Unbalance - time" := '';
              "Unbalance Days" := 0;
              "Unbalance - quantity" := '';
              "Unbalance Quantity" := 0;
            END;
            //kzwerver, 110428, en, #21751

            //Fill Unbalance - time/quantity variables
            CASE TRUE OF
              "Too Late":
                TempMatMon3DisplayLine."Unbalance - time" := TempMatMon3DisplayLine.FIELDCAPTION("Too Late");
              "Too Early":
                TempMatMon3DisplayLine."Unbalance - time" := TempMatMon3DisplayLine.FIELDCAPTION("Too Early");
            END;
            CASE TRUE OF
              "Too Little":
                TempMatMon3DisplayLine."Unbalance - quantity" := TempMatMon3DisplayLine.FIELDCAPTION("Too Little");
              "Too Much":
                TempMatMon3DisplayLine."Unbalance - quantity" := TempMatMon3DisplayLine.FIELDCAPTION("Too Much");
            END;

            //Remember Current line values
            SumQtyUnbalance += QtyUnbalance;

            SetLineStyle("Too Late",
                         "Too Little",
                         "Too Much",
                         "Too Early",
                         "Line Style");
            "Unbalance Days" := "Unbalance Days";
            MODIFY;
            QtyExtraAdviceCum += "Qty (Suggested Extra Advice)";
          UNTIL (NEXT=0);
        END;
      END;
    END;

    PROCEDURE C_SyncUnbalanceDaysSection3To2@1100525114();
    VAR
      ModSection2@1100525000 : Boolean;
    BEGIN
      //This function is called to synchronize Section3 Unbalance Days details to Section2
      //Pre : Function C_ProcessDetailsSection3 has been executed, which determines for recordset TempMatMon3DisplayLine
      //      the number of Unbalance Days into "Unbalance Days"
      //Post: Section2 details contain the maximum number of Unbalance Days of the corr. Section3 lines
      WITH TempMatMon3DisplayLine DO BEGIN
        RESET;
        SETFILTER("Unbalance Days",'<>%1',0);
        IF FINDSET THEN BEGIN
          TempMatMon2Line.RESET;
          REPEAT
            TempMatMon2Line.SETRANGE("Detail LineNo.","Compressed to LineNo.");
            IF TempMatMon2Line.FINDFIRST THEN BEGIN
              IF ("Unbalance Days" < TempMatMon2Line."Unbalance Days Min.") THEN BEGIN
                TempMatMon2Line."Unbalance Days Min." := "Unbalance Days";
                ModSection2 := TRUE;
              END;
              IF ("Unbalance Days" > TempMatMon2Line."Unbalance Days Max.") THEN BEGIN
                TempMatMon2Line."Unbalance Days Max." := "Unbalance Days";
                ModSection2 := TRUE;
              END;
              IF ModSection2 THEN BEGIN
                TempMatMon2Line.MODIFY;
                ModSection2 := FALSE;
              END;
            END;
          UNTIL (NEXT=0);
          TempMatMon2Line.RESET;
          CADD_PostFilterSection2;
        END;
        RESET;
      END;
    END;

    PROCEDURE C_ProjectHoldsInventory@1100525041(ProjectNo@1100525000 : Code[20]) : Boolean;
    BEGIN
      GetInventorySetup;
      IF (CurrProject."No." <> ProjectNo) THEN
        CurrProject.GET(ProjectNo);
      IF (CurrProject."No." <> '') AND
        (InventorySetup.JobInventoryByStockRelease(CurrProject."No.") OR InventorySetup.JobInventoryByLocationShelf(CurrProject."No."))
      THEN
        EXIT(TRUE);
    END;

    PROCEDURE C_SetSection3Form@1100525075();
    BEGIN
    END;

    PROCEDURE C_FormCaption@1100525095(MaterialMonitorCumulLine@1100525000 : Record 11020577) CaptionString : Text[100];
    BEGIN
      CaptionString := COPYSTR(': ' + MaterialMonitorCumulLine."Project No." +
                               ', ' + MaterialMonitorCumulLine."Element No." +
                               ', ' + MaterialMonitorCumulLine."Yard No." +
                               ', ' + MaterialMonitorCumulLine."System No." +
                               ', ' + FORMAT(MaterialMonitorCumulLine."Entity Type") +
                               ', ' + MaterialMonitorCumulLine."Entity No." +
                               ', ' + MaterialMonitorCumulLine."Item No." +
                               ', ' + MaterialMonitorCumulLine."Basic Item" +
                               ', ' + MaterialMonitorCumulLine."Trade Item" +
                               ', ' + MaterialMonitorCumulLine."Base UOM" +
                               ', ' + MaterialMonitorCumulLine."Cost Object" +
                               ', ' + MaterialMonitorCumulLine."Item Description",1,MAXSTRLEN(CaptionString));
    END;

    PROCEDURE C_UpdatQtySuggestedExtraAdvice@1100525087(MaterialMonitorDetailLine@1100525000 : Record 11020578);
    BEGIN
      //Pre:  User entered new value into field MaterialMonitorDetailLine."Qty (Suggested Extra Advice)"
      //Post: New value is processed into belonging record in codeunit recordset TempMatMon3Line
      WITH TempMatMon3Line DO BEGIN
        RESET;
        SETRANGE("No.",MaterialMonitorDetailLine."No.");
        FINDFIRST; //record must exist
        IF (MaterialMonitorDetailLine."Qty (Suggested Extra Advice)" > 0) THEN
          "Qty (Suggested Extra Advice)" := MaterialMonitorDetailLine."Qty (Suggested Extra Advice)";
        MODIFY;
        RESET;
        //update also displayed recordset TempMatMon3DisplayLine
        TempMatMon3DisplayLine.RESET;
        TempMatMon3DisplayLine.SETRANGE("No.","No.");
        TempMatMon3DisplayLine.FINDFIRST;
        IF (MaterialMonitorDetailLine."Qty (Suggested Extra Advice)" > 0) THEN
          TempMatMon3DisplayLine."Qty (Suggested Extra Advice)" := MaterialMonitorDetailLine."Qty (Suggested Extra Advice)";
        TempMatMon3DisplayLine.MODIFY;
        TempMatMon3DisplayLine.RESET;
        TempMatMon3DisplayLine.SETCURRENTKEY(TransactionDate,DemandSupply,"Item No.","Basic Item","Trade Item","Base UOM");
      END;
    END;

    PROCEDURE C_Section3RecordsDiffer@1100525127(DetailLine1@1100525000 : Record 11020578;DetailLine2@1100525001 : Record 11020578) : Boolean;
    BEGIN
      IF ((DetailLine1."Project No." <> DetailLine2."Project No.") OR
          (DetailLine1."Element No." <> DetailLine2."Element No.") OR
          (DetailLine1."Yard No." <> DetailLine2."Yard No.") OR
          (DetailLine1."System No." <> DetailLine2."System No.") OR
          (DetailLine1."Entity Type" <> DetailLine2."Entity Type") OR
          (DetailLine1."Entity No." <> DetailLine2."Entity No.") OR
          (DetailLine1."Item No." <> DetailLine2."Item No.") OR
          (DetailLine1."Basic Item" <> DetailLine2."Basic Item") OR
          (DetailLine1."Trade Item" <> DetailLine2."Trade Item") OR
          (DetailLine1."Base UOM" <> DetailLine2."Base UOM") OR
          (DetailLine1."Cost Object" <> DetailLine2."Cost Object") OR
          (DetailLine1."Item Category" <> DetailLine2."Item Category") OR
          (DetailLine1."Item Description" <> DetailLine2."Item Description")) THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    PROCEDURE "***SECTION 4 FUNCTIONS"@1100525097();
    BEGIN
    END;

    PROCEDURE D_FindRecord@1100525099(Which@1100525000 : Text[1024];VAR DisplayRec@1100525002 : Record 11012055) : Boolean;
    BEGIN
      TempSection4AdviceOrderLine := DisplayRec;
      TempSection4AdviceOrderLine.SETCURRENTKEY("Item No.",Manufacturer,"Basic Item","Vendor (Trade Item)","Trade Item",
                                                "Project No.",Element);
      IF NOT TempSection4AdviceOrderLine.FIND(Which) THEN
        EXIT(FALSE);
      DisplayRec := TempSection4AdviceOrderLine;
      EXIT(TRUE);
    END;

    PROCEDURE D_NextRecord@1100525098(Steps@1100525000 : Integer;VAR DisplayRec@1100525001 : Record 11012055) : Integer;
    VAR
      NoOfSteps@1100525003 : Integer;
    BEGIN
      TempSection4AdviceOrderLine := DisplayRec;
      NoOfSteps := TempSection4AdviceOrderLine.NEXT(Steps);
      IF (NoOfSteps <> 0) THEN
        DisplayRec := TempSection4AdviceOrderLine;
      EXIT(NoOfSteps);
    END;

    PROCEDURE D_FormCaption@1100525100(MaterialMonitorCumulLine@1100525000 : Record 11020577) CaptionString : Text[100];
    BEGIN
      CaptionString := COPYSTR(': ' + MaterialMonitorCumulLine."Project No." +
                               ', ' + MaterialMonitorCumulLine."Element No." +
                               ', ' + MaterialMonitorCumulLine."Yard No." +
                               ', ' + MaterialMonitorCumulLine."System No." +
                               ', ' + FORMAT(MaterialMonitorCumulLine."Entity Type") +
                               ', ' + MaterialMonitorCumulLine."Entity No." +
                               ', ' + MaterialMonitorCumulLine."Item No." +
                               ', ' + MaterialMonitorCumulLine."Basic Item" +
                               ', ' + MaterialMonitorCumulLine."Trade Item" +
                               ', ' + MaterialMonitorCumulLine."Base UOM" +
                               ', ' + MaterialMonitorCumulLine."Cost Object" +
                               ', ' + MaterialMonitorCumulLine."Item Category" +
                               ', ' + MaterialMonitorCumulLine."Item Description",1,MAXSTRLEN(CaptionString));
    END;

    PROCEDURE D_PrepareExtraAdviceOrders@1100525101();
    VAR
      AdviceOrderLine@1100525004 : Record 11012055;
      Job@1100525008 : Record 11072003;
      DftDeliver@1100525003 : ' ,Location,Project Location';
      DftLocation@1100525002 : Code[20];
      DftShippingDate@1100525001 : Date;
      NextLineNo@1100525005 : Integer;
      TempDateFormula@1100525000 : DateFormula;
    BEGIN
      //Pre:  User can select to create Advice Orders from section3 (containing recordset: TempMatMon3DisplayLine).
      //Post: For each of the records in this recordset an Advice Order will be created, when
      //      "Qty (Suggested Extra Advice)" > 0.
      WITH TempMatMon3DisplayLine DO BEGIN
        RESET;
        SETFILTER("Qty (Suggested Extra Advice)",'>0');
        IF FINDSET THEN BEGIN
          TempProject.RESET;
          TempProject.GET("Project No.");
          AdviceOrderLine.RESET;
          AdviceOrderLine.SETRANGE("Record Type", AdviceOrderLine."Record Type"::Project);
          AdviceOrderLine.SETRANGE("Project No.", TempProject."No."); //This is the sub project
          IF AdviceOrderLine.FINDLAST THEN
            NextLineNo := AdviceOrderLine."Line No." + 10000
          ELSE
            NextLineNo := 10000;
            //Create Advice Order set
          WITH TempSection4AdviceOrderLine DO BEGIN
            RESET;
            DELETEALL;
            REPEAT
              Job.GET(TempMatMon3DisplayLine."Project No.");
              DftDeliver := Job.Deliver;
              DftLocation := Job."Ship To Location";
              INIT;
              "Record Type" := "Record Type"::Project;
              "Project No." := TempMatMon3DisplayLine."Project No.";
              "Line No." := NextLineNo;
              NextLineNo += 10000;
              InitRecord;
              VALIDATE(Element, TempMatMon3DisplayLine."Element No.");
              VALIDATE("Item No.",TempMatMon3DisplayLine."Item No.");
              VALIDATE("Basic Item",TempMatMon3DisplayLine."Basic Item");
              VALIDATE(Manufacturer,TempMatMon3DisplayLine.Manufacturer);
              VALIDATE("Trade Item",TempMatMon3DisplayLine."Trade Item");
              VALIDATE("Vendor (Trade Item)",TempMatMon3DisplayLine."Vendor (Trade Item)");
              VALIDATE("Cost Object", TempMatMon3DisplayLine."Cost Object");
              "Manufacturer Name" := TempMatMon3DisplayLine."Manufacturer Name";
              "Quantity (Budget)" := TempMatMon3DisplayLine."Qty (Suggested Extra Advice)";
              "Quantity (Advice)" := TempMatMon3DisplayLine."Qty (Suggested Extra Advice)";
              "Unit of Measure" := TempMatMon3DisplayLine."Base UOM";
              Description := TempMatMon3DisplayLine."Item Description";
              Deliver := DftDeliver;
              "Location Code" := TempMatMon3DisplayLine.Location;
              "Item Category" := TempMatMon3DisplayLine."Item Category";
              "Ship To Location" := DftLocation;
              "Description 2" := TempMatMon3DisplayLine."Item Description2";
              "Created by" := USERID;
              "Date Created" := WORKDATE;
              "Yard No." := TempMatMon3DisplayLine."Yard No.";
              "Entity Type" := TempMatMon3DisplayLine."Entity Type";
              "System No." := TempMatMon3DisplayLine."System No.";
              "Entity No." := TempMatMon3DisplayLine."Entity No.";
              IF (TempMatMon3DisplayLine."Unbalance Days" > 0) THEN BEGIN
                EVALUATE(TempDateFormula,'<-'+ FORMAT(TempMatMon3DisplayLine."Unbalance Days") +'D>');
                DftShippingDate := CALCDATE(TempDateFormula,TempMatMon3DisplayLine.TransactionDate);
              END ELSE
                DftShippingDate := TempMatMon3DisplayLine.TransactionDate;
              EvaluateStartDate(DftShippingDate); //31907+C004646
              INSERT;
            UNTIL (TempMatMon3DisplayLine.NEXT=0);
          END;
        END;
      END;
    END;

    PROCEDURE D_UpdateAdviceOrder@1100525102(AdviceOrderLine@1100525000 : Record 11012055);
    BEGIN
      //Pre:  User entered new value into one or more fields of AdviceOrderLine
      //Post: New value is processed into belonging record in codeunit recordset TempSection4AdviceOrderLine
      WITH TempSection4AdviceOrderLine DO BEGIN
        RESET;
        SETRANGE("Project No.", AdviceOrderLine."Project No.");
        SETRANGE(Element, AdviceOrderLine.Element);
        SETRANGE("Yard No.", AdviceOrderLine."Yard No.");
        SETRANGE("System No.", AdviceOrderLine."System No.");
        SETRANGE("Entity Type", AdviceOrderLine."Entity Type");
        SETRANGE("Entity No.", AdviceOrderLine."Entity No.");
        SETRANGE("Item No.", AdviceOrderLine."Item No.");
        SETRANGE("Basic Item", AdviceOrderLine."Basic Item");
        SETRANGE("Trade Item", AdviceOrderLine."Trade Item");
        SETRANGE("Line No.", AdviceOrderLine."Line No.");
        FINDFIRST; //record must exist
        "Unit of Measure" := AdviceOrderLine."Unit of Measure";
        "Quantity (Budget)" := AdviceOrderLine."Quantity (Advice)";
        "Quantity (Advice)" := AdviceOrderLine."Quantity (Advice)";
        "Order Date" := AdviceOrderLine."Order Date";
        "Delivery Period" := AdviceOrderLine."Delivery Period";
        EvaluateStartDate(AdviceOrderLine."Receipt Date"); //31907+C004646
        Transaction := AdviceOrderLine.Transaction;
        "Location Code" := AdviceOrderLine."Location Code";
        MODIFY;
        RESET;
      END;
    END;

    PROCEDURE D_CreateExtraAdviceOrders@1100525103();
    VAR
      AdviceOrderLine@1100525004 : Record 11012055;
    BEGIN
      //Pre:  User selected to create Advice Orders from recordset shown in section4.
      //Post: For each of the records in this recordset an Advice Order will be created, when
      //      "Quantity (Advice)" > 0.
      WITH TempSection4AdviceOrderLine DO BEGIN
        RESET;
        SETFILTER("Quantity (Advice)",'>0');
        IF FINDSET(TRUE,FALSE) THEN BEGIN
          REPEAT
            AdviceOrderLine.COPY(TempSection4AdviceOrderLine);
            AdviceOrderLine.INSERT(TRUE);
            "Quantity (Advice)" := 0;
            MODIFY;

            CopyPurchaseLineDetail(AdviceOrderLine); //kzwerver, 110606, n, #27784
          UNTIL (NEXT=0);
          RebuildData := TRUE; //data will be rebuild due to advice order creation
          TempMatMon3DisplayLine.MODIFYALL("Qty (Suggested Extra Advice)",0);
        END;
        RESET;
        DELETEALL;
      END;
    END;

    PROCEDURE D_ShowDocument@1100525106(MaterialMonitorDetailLine@1100525000 : Record 11020578);
    VAR
      PurchaseLine@1100525007 : Record 39;
      ItemJournalLine@1100525011 : Record 83;
      EngineeringOrderLine@1100525003 : Record 11012526;
      AdviceOrderLine@1100525005 : Record 11012055;
      ProjectInventoryEntry@1100525010 : Record 11012670;
      RecordRef@1100525001 : RecordRef;
      TableNo@1100525002 : Integer;
      PurchaseLines@1100525004 : Page 518;
      AdviceOrderLines@1100525006 : Page 11012122;
      EngineeringOrderList@1100525008 : Page 11072352;
      ProjectInventoryEntries@1100525009 : Page 11012670;
    BEGIN
      WITH MaterialMonitorDetailLine DO BEGIN
        IF RecordRef.GET(DocumentRecordID) THEN BEGIN
          TableNo := RecordRef.NUMBER;
          CASE TableNo OF
            DATABASE::"Purchase Line":
              BEGIN
                RecordRef.SETTABLE(PurchaseLine);
                PurchaseLine.RESET;
                PurchaseLine.FILTERGROUP(FilterGroupValue);
                PurchaseLine.SETRANGE("Document Type",PurchaseLine."Document Type");
                PurchaseLine.SETRANGE("Document No.",PurchaseLine."Document No.");
                PurchaseLine.SETRANGE("Line No.",PurchaseLine."Line No.");
                PurchaseLine.FILTERGROUP(0);
                PurchaseLines.LOOKUPMODE(TRUE);
                PurchaseLines.SETTABLEVIEW(PurchaseLine);
                IF PurchaseLines.RUNMODAL = ACTION::LookupOK THEN;
              END;
            DATABASE::"Item Journal Line":
              BEGIN
                RecordRef.SETTABLE(ItemJournalLine);
                ItemJournalLine.RESET;
                ItemJournalLine.FILTERGROUP(FilterGroupValue);
                ItemJournalLine.SETRANGE("Journal Template Name", ItemJournalLine."Journal Template Name");
                ItemJournalLine.SETRANGE("Journal Batch Name", ItemJournalLine."Journal Batch Name");
                ItemJournalLine.SETRANGE("Line No.", ItemJournalLine."Line No.");
                ItemJournalLine.FILTERGROUP(0);
                PAGE.RUN(PAGE::"Item Journal Lines", ItemJournalLine);
              END;
            DATABASE::"Advice Order Line":
              BEGIN
                RecordRef.SETTABLE(AdviceOrderLine);
                AdviceOrderLine.FILTERGROUP(FilterGroupValue);
                AdviceOrderLine.SETCURRENTKEY("Project No.");
                AdviceOrderLine.SETRANGE("Project No.",AdviceOrderLine."Project No.");
                AdviceOrderLine.SETRANGE("Yard No.",AdviceOrderLine."Yard No.");
                AdviceOrderLine.SETRANGE("System No.",AdviceOrderLine."System No.");
                AdviceOrderLine.SETRANGE("Entity Type",AdviceOrderLine."Entity Type");
                AdviceOrderLine.SETRANGE("Entity No.",AdviceOrderLine."Entity No.");
                AdviceOrderLine.SETRANGE("Basic Item",AdviceOrderLine."Basic Item");
                AdviceOrderLine.SETRANGE("Trade Item",AdviceOrderLine."Trade Item");
                AdviceOrderLine.SETRANGE("Item No.",AdviceOrderLine."Item No.");
                AdviceOrderLine.SETRANGE("Unit of Measure",AdviceOrderLine."Unit of Measure");
                AdviceOrderLine.SETRANGE("Cost Object",AdviceOrderLine."Cost Object");
                AdviceOrderLine.SETRANGE(Description,AdviceOrderLine.Description);
                AdviceOrderLine.SETRANGE("Line No.",AdviceOrderLine."Line No.");
                AdviceOrderLine.FILTERGROUP(0);
                AdviceOrderLines.LOOKUPMODE(TRUE);
                AdviceOrderLines.SetBypassFiltering(TRUE);
                AdviceOrderLines.SETTABLEVIEW(AdviceOrderLine);
                IF AdviceOrderLines.RUNMODAL = ACTION::LookupOK THEN;
              END;
            DATABASE::"Project Material Req. Line":
              BEGIN
                RecordRef.SETTABLE(EngineeringOrderLine);
                EngineeringOrderLine.FILTERGROUP(FilterGroupValue);
                EngineeringOrderLine.SETRANGE("Project No.",EngineeringOrderLine."Project No.");
                EngineeringOrderLine.SETRANGE("Yard No.",EngineeringOrderLine."Yard No.");
                EngineeringOrderLine.SETRANGE("Entity Type",EngineeringOrderLine."Entity Type"); //kzwerver, 110324, n, #26068
                EngineeringOrderLine.SETRANGE("System No.",EngineeringOrderLine."System No."); //kzwerver, 110324, n, #26068
                EngineeringOrderLine.SETRANGE("Entity No.",EngineeringOrderLine."Entity No."); //kzwerver, 110324, n, #26068
                EngineeringOrderLine.SETRANGE("Line No.",EngineeringOrderLine."Line No.");
                EngineeringOrderLine.FILTERGROUP(0);
                EngineeringOrderList.LOOKUPMODE(TRUE);
                EngineeringOrderList.SETTABLEVIEW(EngineeringOrderLine);
                IF EngineeringOrderList.RUNMODAL = ACTION::LookupOK THEN;
              END;
            DATABASE::"Project Inventory Entry":
              BEGIN
                RecordRef.SETTABLE(ProjectInventoryEntry);
                ProjectInventoryEntry.FILTERGROUP(FilterGroupValue);
                ProjectInventoryEntry.SETRANGE("Entry No.",ProjectInventoryEntry."Entry No.");
                ProjectInventoryEntry.FILTERGROUP(0);
                ProjectInventoryEntries.LOOKUPMODE(TRUE);
                ProjectInventoryEntries.SETTABLEVIEW(ProjectInventoryEntry);
                IF ProjectInventoryEntries.RUNMODAL = ACTION::LookupOK THEN;
              END;
          END;
        END;
      END;
    END;

    PROCEDURE D_CreatePurchaseOrder@1100525109();
    VAR
      PurchaseOrder@1100525000 : Page 50;
    BEGIN
      PurchaseOrder.RUNMODAL;
    END;

    PROCEDURE D_ShowJobInventory@1100525110(JobNo@1100525001 : Code[20]);
    VAR
      ProjectInventoryDelivery@1100528400 : Page 11012671;
    BEGIN
      ProjectInventoryDelivery.SetJobNo(JobNo);
      ProjectInventoryDelivery.RUNMODAL;
    END;

    PROCEDURE "*** GENERAL FUNCTIONS"@1100525029();
    BEGIN
    END;

    LOCAL PROCEDURE GetMatMonSettings@1100525031();
    BEGIN
      IF NOT MatMonSettingsRead THEN BEGIN
        MaterialMonitorSetup.GET;
        MatMonSettingsRead := TRUE;
      END;
    END;

    LOCAL PROCEDURE GetInventorySetup@1100525096();
    BEGIN
      IF NOT InventorySetupRead THEN BEGIN
        InventorySetup.GET;
        InventorySetupRead := TRUE;
      END;
    END;

    PROCEDURE GetStyleFromOptionNo@1100528700(OptionNo@1100528700 : Integer) : Text;
    VAR
      MaterialMonitorSetup2@1100528701 : Record 11020575;
      RecRef@1100528703 : RecordRef;
      FldRef@1100528702 : FieldRef;
    BEGIN
      RecRef.GETTABLE(MaterialMonitorSetup2);
      FldRef := RecRef.FIELD(MaterialMonitorSetup2.FIELDNO("Style Too Early"));
      EXIT(SELECTSTR(OptionNo + 1, FldRef.OPTIONSTRING));
    END;

    LOCAL PROCEDURE SetLineStyle@1100525027(TooLate@1100525000 : Boolean;TooLittle@1100525002 : Boolean;TooMuch@1100525003 : Boolean;TooEarly@1100525004 : Boolean;VAR LineStyle@1100525005 : Integer);
    BEGIN
      GetMatMonSettings;
      CASE TRUE OF
        TooLate : LineStyle := MaterialMonitorSetup."Style Too Late";
        TooLittle : LineStyle := MaterialMonitorSetup."Style Too Little";
        TooMuch : LineStyle := MaterialMonitorSetup."Style Too Much";
        TooEarly : LineStyle := MaterialMonitorSetup."Style Too Early";
      END;
    END;

    LOCAL PROCEDURE CheckSupplyVsDemandDate@1100525064(DemandDate@1100525000 : Date;SupplyDate@1100525001 : Date;VAR TooLate@1100525002 : Boolean;VAR TooEarly@1100525003 : Boolean);
    VAR
      ValidSupplyDate@1100525004 : Boolean;
      ValidDemandDate@1100525005 : Boolean;
    BEGIN
      ValidSupplyDate := ValidDate(SupplyDate);
      ValidDemandDate := ValidDate(DemandDate);

      IF (ValidSupplyDate AND ValidDemandDate) THEN BEGIN
        TooLate := (SupplyDate > DemandDate);
        IF (NOT TooEarly) THEN
          TooEarly := (SupplyDate < DemandDate);
      END;
    END;

    PROCEDURE CheckAgainstWorkdate@1100525117(SupplyDate@1100525000 : Date;VAR TooLate@1100525001 : Boolean;VAR TooEarly@1100525002 : Boolean);
    BEGIN
      //kz IF MatMonFilterset.UnbalanceOnDate THEN BEGIN
        IF NOT TooLate THEN
          //IF SupplyDate < WORKDATE THEN BEGIN //kzwerver, 110121, o
          IF SupplyDate < MatMonFilterset.UnbalanceWorkDate THEN BEGIN //kzwerver, 110121, c
            TooLate := TRUE;
            TooEarly := FALSE;
          END;
      //kz END;
    END;

    LOCAL PROCEDURE ValidDate@1100525072(DateToCheck@1100525000 : Date) : Boolean;
    BEGIN
      IF (DateToCheck = 0D) THEN
        EXIT(FALSE);
      EXIT(TRUE);
    END;

    PROCEDURE FindStartEndFromDateFilter@1100525070(VAR DateFilter@1100525005 : Text[250];VAR RefDateFrom@1100525003 : Date;VAR RefDateTo@1100525004 : Date);
    VAR
      ValidateItems@1100525006 : Codeunit 11012033;
      RefDateLength@1100525001 : Integer;
      DotPos@1100525000 : Integer;
      RefDateFilter@1100525002 : Text[30];
      TmpDate@1100409000 : Date;
    BEGIN
      IF (EVALUATE(TmpDate, DateFilter)) THEN
        DateFilter := STRSUBSTNO('..%1', FORMAT(TmpDate));

      GetMatMonSettings;
      RefDateFilter := DateFilter;
      RefDateLength := STRLEN(RefDateFilter);
      DotPos := STRPOS(RefDateFilter,'..');

      IF ((DotPos > 1) AND (DotPos < RefDateLength-1)) THEN BEGIN
        EVALUATE(RefDateFrom,COPYSTR(RefDateFilter,1,DotPos-1));
        EVALUATE(RefDateTo,COPYSTR(RefDateFilter,DotPos+2,RefDateLength));
      END;
      IF ((DotPos > 1) AND (DotPos = RefDateLength-1)) THEN BEGIN
        EVALUATE(RefDateFrom,COPYSTR(RefDateFilter,1,RefDateLength-2));
        RefDateTo := 0D;
      END;
      IF (DotPos = 1) THEN BEGIN
        RefDateFrom := 0D;
        EVALUATE(RefDateTo,COPYSTR(RefDateFilter,3,RefDateLength));
      END;

      IF (RefDateLength = 0) THEN BEGIN
        RefDateFrom := 0D;
        RefDateTo := 0D;
      END;

      IF ((RefDateFrom = 0D) AND (RefDateTo = 0D)) THEN BEGIN
        RefDateTo := ValidateItems.CheckRefDateLevel('');
        RefDateTo := CALCDATE(MaterialMonitorSetup."Time Fence",RefDateTo);
        DateFilter := STRSUBSTNO('..%1',RefDateTo);
      END;
    END;

    PROCEDURE ShowItemAvailabilityByPeriods@1100525107(MatMonMgt@1100528300 : Codeunit 11072073);
    VAR
      Item@1100525001 : Record 27;
      ItemAvailabilityByPeriods@1100525000 : Page 157;
    BEGIN
      IF (SelectedMatMonCumLine."Item No." <> '') THEN BEGIN
        Item.RESET;
        Item.SETRANGE("No.",SelectedMatMonCumLine."Item No.");
        ItemAvailabilityByPeriods.SETTABLEVIEW(Item);
        ItemAvailabilityByPeriods.RUN;
      END ELSE
        ERROR(Text11012004);
    END;

    PROCEDURE CreateItemJournalLine@1100525108();
    VAR
      ItemJournal@1100525000 : Page 40;
    BEGIN
      ItemJournal.RUNMODAL;
    END;

    PROCEDURE GetUOM@1100526107(Item_NAV@1100525000 : Code[20];Item_Base@1100525001 : Code[20];BaseManufacturer@1210190000 : Code[15];Item_Trade@1100525002 : Code[20];TradeVendor@1210190001 : Code[15];OrgUOM@1100525003 : Code[10]) NewUOM : Code[10];
    VAR
      Item@1100525004 : Record 27;
      ItemBasic@1100525006 : Record 11012316;
      ItemTrade@1100525007 : Record 11012317;
    BEGIN
      NewUOM := OrgUOM; //Transaction UOM (will be returned when NAV=Trade=Base=empty)

      IF (Item_NAV <> '') THEN BEGIN
        IF NOT TempItem.GET(Item_NAV) THEN BEGIN
          Item.GET(Item_NAV);
          TempItem := Item;
          TempItem.INSERT;
        END;
        NewUOM := TempItem."Base Unit of Measure";
      END ELSE BEGIN
        IF ((Item_Base <> '') AND (Item_Trade = '')) THEN BEGIN
          IF NOT TempBaseItem.GET(BaseManufacturer, Item_Base) THEN BEGIN
            IF (NOT ItemBasic.GET(BaseManufacturer, Item_Base)) THEN
              EXIT;
            TempBaseItem := ItemBasic;
            TempBaseItem.INSERT;
          END;
          NewUOM := TempBaseItem."Application Unit";
        END;
        IF (Item_Trade <> '') THEN BEGIN
          IF NOT TempTradeItem.GET(TradeVendor, Item_Trade) THEN BEGIN
            IF (NOT ItemTrade.GET(TradeVendor, Item_Trade)) THEN
              EXIT;
            TempTradeItem := ItemTrade;
            TempTradeItem.INSERT;
          END;
          NewUOM := TempTradeItem."Application Unit";
        END;
      END;
    END;

    PROCEDURE GetFactorUOM@1100525119(Item_NAV@1100525000 : Code[20];Item_Base@1100525001 : Code[20];BaseManufacturer@1210190000 : Code[15];Item_Trade@1100525002 : Code[20];TradeVendor@1210190001 : Code[15];OrgUOM@1100525003 : Code[10]) NewFactorUOM : Decimal;
    VAR
      Item@1100525004 : Record 27;
      ItemBasic@1100525006 : Record 11012316;
      ItemTrade@1100525007 : Record 11012317;
      ItemUnitOfMeasure@1100526100 : Record 5404;
    BEGIN
      //kzwerver, 110208, n
      NewFactorUOM := 1;

      IF (Item_NAV <> '') THEN BEGIN
        IF NOT TempItem.GET(Item_NAV) THEN BEGIN
          Item.GET(Item_NAV);
          TempItem := Item;
          TempItem.INSERT;
        END;
        IF NOT TempItemUnitOfMeasure.GET(Item_NAV, OrgUOM) THEN BEGIN
          IF NOT ItemUnitOfMeasure.GET(Item_NAV, OrgUOM) THEN BEGIN
            Window.CLOSE;
            ERROR(Text024, Item_NAV, OrgUOM);
          END;
          TempItemUnitOfMeasure := ItemUnitOfMeasure;
          TempItemUnitOfMeasure.INSERT;
        END;
        NewFactorUOM := TempItemUnitOfMeasure."Qty. per Unit of Measure";
      END ELSE BEGIN
        IF ((Item_Base <> '') AND (Item_Trade = '')) THEN BEGIN
          IF NOT TempBaseItem.GET(BaseManufacturer, Item_Base) THEN BEGIN
            IF (NOT ItemBasic.GET(BaseManufacturer, Item_Base)) THEN
              EXIT;
            TempBaseItem := ItemBasic;
            TempBaseItem.INSERT;
          END;
          NewFactorUOM := TempBaseItem."Qty. per Unit of Measure";
        END;
        IF (Item_Trade <> '') THEN BEGIN
          IF NOT TempTradeItem.GET(TradeVendor, Item_Trade) THEN BEGIN
            IF (NOT ItemTrade.GET(TradeVendor, Item_Trade)) THEN
              EXIT;
            TempTradeItem := ItemTrade;
            TempTradeItem.INSERT;
          END;
          NewFactorUOM := TempTradeItem."Application Unit Quantity";
        END;
      END;
    END;

    LOCAL PROCEDURE ClearTempTables@1100525071(KeepThisCduRunning@1100525000 : Boolean);
    BEGIN
      //Clear section 3
      TempMatMon3Line.RESET;
      TempMatMon3Line.DELETEALL;

      TempProject.RESET;
      TempProject.DELETEALL;

      IF (NOT KeepThisCduRunning) THEN BEGIN
        TempItem.RESET;
        TempItem.DELETEALL;
        TempTradeItem.RESET;
        TempTradeItem.DELETEALL;
        TempBaseItem.RESET;
        TempBaseItem.DELETEALL;
        TempManufacturer.RESET;
        TempManufacturer.DELETEALL;
      END;
    END;

    PROCEDURE GetManufacturerName@1100525051(ManufacturerCode@1100525000 : Code[15]) : Text[100];
    VAR
      Manufacturer@1100525001 : Record 11012304;
    BEGIN
      TempManufacturer.INIT;
      IF (ManufacturerCode <> '') THEN BEGIN
        IF NOT TempManufacturer.GET(ManufacturerCode) THEN BEGIN
          IF Manufacturer.GET(ManufacturerCode) THEN BEGIN
            TempManufacturer := Manufacturer;
            TempManufacturer.INSERT;
          END;
        END;
        EXIT(TempManufacturer.Name);
      END;
    END;

    PROCEDURE GetEarliestDemandDate@1100526100() : Date;
    VAR
      EarliestDemandDate@1100526100 : Date;
    BEGIN
      TempMatMon2Line.RESET;
      TempMatMon2Line.SETRANGE(TempMatMon2Line.CreateAdvice,TRUE);
      IF TempMatMon2Line.FINDSET THEN BEGIN
        REPEAT
          IF TempMatMon3Line.GET(TempMatMon2Line."Detail LineNo.") THEN BEGIN
            IF (EarliestDemandDate = 0D) OR (TempMatMon3Line.EarliestDemandDate < EarliestDemandDate) THEN
              EarliestDemandDate := TempMatMon3Line.EarliestDemandDate;
          END;
        UNTIL (TempMatMon2Line.NEXT = 0)
      END;
      IF EarliestDemandDate = 0D THEN
        EarliestDemandDate := WORKDATE;
      EXIT(EarliestDemandDate);
    END;

    LOCAL PROCEDURE GetUnbalanceTypeFilter@1100530000() : Text[100];
    VAR
      UnbalanceTypeFilter@1100530000 : Text[100];
    BEGIN
      UnbalanceTypeFilter :=  '';
      IF (MatMonFilterset.TooEarly) THEN
        IF (UnbalanceTypeFilter = '') THEN UnbalanceTypeFilter :=  '*'+MatMonFilterset.FIELDNAME(TooEarly)+'*'
        ELSE UnbalanceTypeFilter += '|*' + MatMonFilterset.FIELDNAME(TooEarly)+'*';
      IF (MatMonFilterset.TooLate) THEN
        IF (UnbalanceTypeFilter = '') THEN UnbalanceTypeFilter :=  '*'+MatMonFilterset.FIELDNAME(TooLate)+'*'
        ELSE UnbalanceTypeFilter += '|*' + MatMonFilterset.FIELDNAME(TooLate)+'*';
      IF (MatMonFilterset.TooMuch) THEN
        IF (UnbalanceTypeFilter = '') THEN UnbalanceTypeFilter :=  '*'+MatMonFilterset.FIELDNAME(TooMuch)+'*'
        ELSE UnbalanceTypeFilter += '|*' + MatMonFilterset.FIELDNAME(TooMuch)+'*';
      IF (MatMonFilterset.TooLittle) THEN
        IF (UnbalanceTypeFilter = '') THEN UnbalanceTypeFilter :=  '*'+MatMonFilterset.FIELDNAME(TooLittle)+'*'
        ELSE UnbalanceTypeFilter += '|*' + MatMonFilterset.FIELDNAME(TooLittle)+'*';
      IF (MatMonFilterset.InBalance) THEN
        IF (UnbalanceTypeFilter = '') THEN UnbalanceTypeFilter :=  '*'+MatMonFilterset.FIELDNAME(InBalance)+'*'
        ELSE UnbalanceTypeFilter += '|*' + MatMonFilterset.FIELDNAME(InBalance)+'*';
      EXIT(UnbalanceTypeFilter);
    END;

    PROCEDURE SetUnbalanceType@1100525059(TooEarly@1100526101 : Boolean;TooLate@1100525000 : Boolean;TooMuch@1100526102 : Boolean;TooLittle@1100525002 : Boolean;InBalance@1100526100 : Boolean;VAR UnbalanceType@1100530000 : Text[100]);
    BEGIN
      UnbalanceType := '';
      IF TooEarly THEN
        IF (UnbalanceType = '') THEN UnbalanceType := MatMonFilterset.FIELDNAME(TooEarly)
        ELSE UnbalanceType += ' '+MatMonFilterset.FIELDNAME(TooEarly);
      IF TooLate THEN
        IF (UnbalanceType = '') THEN UnbalanceType := MatMonFilterset.FIELDNAME(TooLate)
        ELSE UnbalanceType += ' '+MatMonFilterset.FIELDNAME(TooLate);
      IF TooMuch THEN
        IF (UnbalanceType = '') THEN UnbalanceType := MatMonFilterset.FIELDNAME(TooMuch)
        ELSE UnbalanceType += ' '+MatMonFilterset.FIELDNAME(TooMuch);
      IF TooLittle THEN
        IF (UnbalanceType = '') THEN UnbalanceType := MatMonFilterset.FIELDNAME(TooLittle)
        ELSE UnbalanceType += ' '+MatMonFilterset.FIELDNAME(TooLittle);
      IF InBalance THEN
        IF (UnbalanceType = '') THEN UnbalanceType := MatMonFilterset.FIELDNAME(InBalance)
        ELSE UnbalanceType += ' '+MatMonFilterset.FIELDNAME(InBalance);
    END;

    PROCEDURE UpdateSupplyAdviceDate@1100526109(ProjectMaterialReqLine@1100526100 : Record 11012526);
    VAR
      AdviceOrderLine@1100526102 : Record 11012055;
    BEGIN
      WITH AdviceOrderLine DO BEGIN
        SETRANGE("Record Type", "Record Type"::Project);
        SETRANGE("Project No.", ProjectMaterialReqLine."Project No.");
        SETRANGE(Element, ProjectMaterialReqLine.Element);
        SETRANGE("Item No.", ProjectMaterialReqLine."Item No.");
        SETRANGE("Basic Item", ProjectMaterialReqLine."Basic Item");
        SETRANGE(Manufacturer, ProjectMaterialReqLine.Manufacturer);
        SETRANGE("Trade Item", ProjectMaterialReqLine."Trade Item");
        SETRANGE("Vendor (Trade Item)", ProjectMaterialReqLine."Vendor (Trade Item)");
        SETRANGE("Yard No.", ProjectMaterialReqLine."Yard No.");
        SETRANGE("System No.", ProjectMaterialReqLine."System No.");
        SETRANGE("Entity Type", ProjectMaterialReqLine."Entity Type");
        SETRANGE("Entity No.", ProjectMaterialReqLine."Entity No.");
        IF FINDSET THEN BEGIN
          REPEAT
            IF ("Process Status" = "Process Status"::Open) THEN BEGIN
              VALIDATE("Receipt Date", ProjectMaterialReqLine."Delivery Date");
              MODIFY;
            END;
          UNTIL (NEXT=0);
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateDelDateInMatReqLines@1100526110(MaterialMonitorCumulLine@1100526100 : Record 11020577;NoOfShiftDays@1100526101 : Integer);
    VAR
      ProjectMaterialReqLine@1100526102 : Record 11012526;
    BEGIN
      WITH TempMatMon3Line DO BEGIN
        SETRANGE("Compressed to LineNo.", MaterialMonitorCumulLine."Detail LineNo.");
        SETRANGE(DemandSupply, DemandSupply::Demand);
        IF FINDSET THEN BEGIN
          REPEAT
            ProjectMaterialReqLine.SETRANGE("Project No.", "Project No.");
            ProjectMaterialReqLine.SETRANGE("Yard No.", "Yard No.");
            ProjectMaterialReqLine.SETRANGE("Entity Type", "Entity Type");
            ProjectMaterialReqLine.SETRANGE("System No.", "System No.");
            ProjectMaterialReqLine.SETRANGE("Entity No.", "Entity No.");
            ProjectMaterialReqLine.SETRANGE("Item No.", "Item No.");
            ProjectMaterialReqLine.SETRANGE("Basic Item", "Basic Item");
            ProjectMaterialReqLine.SETRANGE(Manufacturer, Manufacturer);
            ProjectMaterialReqLine.SETRANGE("Trade Item", "Trade Item");
            ProjectMaterialReqLine.SETRANGE("Vendor (Trade Item)", "Vendor (Trade Item)");
            IF ProjectMaterialReqLine.FINDSET THEN BEGIN
              REPEAT
                ProjectMaterialReqLine."Delivery Date" := ProjectMaterialReqLine."Delivery Date" + NoOfShiftDays;
                ProjectMaterialReqLine.MODIFY;
              UNTIL (ProjectMaterialReqLine.NEXT=0);
            END;
          UNTIL (NEXT=0);
        END;
      END;
    END;

    LOCAL PROCEDURE SetFilterPurchaseLineExtension@1100526119(VAR PurchaseLine@1100526100 : Record 39;MaterialMonitorCumulLine@1100526101 : Record 11020577);
    VAR
      PurchaseLineExtension@1100526102 : Record 11020644;
      TempPurchaseLine@1210190000 : Record 39;
    BEGIN
      TempPurchaseLine.COPY(PurchaseLine);
      IF (TempPurchaseLine.FINDSET) THEN BEGIN
        REPEAT
          IF PurchaseLineExtension.GET(PurchaseLine."Document Type",
            PurchaseLine."Document No.", PurchaseLine."Line No.")
          THEN BEGIN
            IF (MaterialMonitorCumulLine."Yard No."+MaterialMonitorCumulLine."System No."+
                MaterialMonitorCumulLine."Entity No."= '')
            THEN //kzwerver, 121209, sn
              TempPurchaseLine.DELETE
            ELSE BEGIN
              IF ((PurchaseLineExtension."Yard No." <> MaterialMonitorCumulLine."Yard No.") OR
                 (PurchaseLineExtension."System No." <> MaterialMonitorCumulLine."System No.") OR
                 (PurchaseLineExtension."Entity No." <> MaterialMonitorCumulLine."Entity No."))
              THEN
                TempPurchaseLine.DELETE;
            END;
          END;
        UNTIL(TempPurchaseLine.NEXT = 0);
        PurchaseLine.COPY(TempPurchaseLine);
      END;
    END;

    LOCAL PROCEDURE GetBudgetLineQuantity@1210190006(ProjectMaterialReqLine@1210190000 : Record 11012526) : Decimal;
    VAR
      BudgetLine@1210190001 : Record 11012001;
      TotalQuantity@1210190002 : Decimal;
      Quantity@1210190003 : Decimal;
    BEGIN
      //kzwerver, 110323, n, #26056
      BudgetLine.SETRANGE("Project No.", ProjectMaterialReqLine."Project No.");
      BudgetLine.SETRANGE(Element, ProjectMaterialReqLine.Element);
      BudgetLine.SETRANGE("Cost Type", BudgetLine."Cost Type"::Material);
      BudgetLine.SETRANGE("Item No.", ProjectMaterialReqLine."Item No.");
      BudgetLine.SETRANGE("Basic Item",ProjectMaterialReqLine."Basic Item");
      BudgetLine.SETRANGE("Trade Item", ProjectMaterialReqLine."Trade Item");
      BudgetLine.SETRANGE("Vendor (Trade Item)", ProjectMaterialReqLine."Vendor (Trade Item)");
      BudgetLine.SETRANGE(Manufacturer, ProjectMaterialReqLine.Manufacturer);
      BudgetLine.SETRANGE("Cost Object", ProjectMaterialReqLine."Cost Object");
      IF (BudgetLine.FINDSET) THEN BEGIN
        REPEAT
          Quantity := BudgetLine.Quantity *
            GetFactorUOM(BudgetLine."Item No.", BudgetLine."Basic Item", BudgetLine.Manufacturer,
              BudgetLine."Trade Item", BudgetLine."Vendor (Trade Item)",
              BudgetLine."Unit of Measure");
          TotalQuantity += Quantity;
        UNTIL (BudgetLine.NEXT = 0);
        EXIT(TotalQuantity);
      END;
      EXIT(0.0);
    END;

    PROCEDURE CopyPurchaseLineDetail@1210190003(AdviceOrderLine@1100526100 : Record 11012055);
    VAR
      ProjectMaterialReqLine@1100526101 : Record 11012526;
      PurchaseLineDetail@1210190000 : Record 11020660;
      PurchaseLineDetailIsCopied@1210190001 : Boolean;
    BEGIN
      //kzwerver, 110606, n, #27784
      ProjectMaterialReqLine.SETCURRENTKEY("Project No.", "Yard No.", "Item No.", "Basic Item", "Trade Item",
        "Vendor (Trade Item)", Manufacturer, "Cost Object");  //db, 09-10-15
      ProjectMaterialReqLine.SETRANGE("Project No.", AdviceOrderLine."Project No.");
      ProjectMaterialReqLine.SETRANGE("Yard No.", AdviceOrderLine."Yard No.");
      ProjectMaterialReqLine.SETRANGE("Item No.", AdviceOrderLine."Item No.");
      ProjectMaterialReqLine.SETRANGE("Basic Item", AdviceOrderLine."Basic Item");
      ProjectMaterialReqLine.SETRANGE("Trade Item", AdviceOrderLine."Trade Item");
      ProjectMaterialReqLine.SETRANGE("Vendor (Trade Item)", AdviceOrderLine."Vendor (Trade Item)");
      ProjectMaterialReqLine.SETRANGE(Manufacturer, AdviceOrderLine.Manufacturer);
      ProjectMaterialReqLine.SETRANGE("Cost Object", AdviceOrderLine."Cost Object");
      //ProjectMaterialReqLine.SETRANGE("Processed (AdviceOrder)", FALSE);  //db.o, 09-10-15
      ProjectMaterialReqLine.SETRANGE(Description, AdviceOrderLine.Description);
      IF (ProjectMaterialReqLine.FINDSET) THEN BEGIN
        REPEAT
          PurchaseLineDetailIsCopied := PurchaseLineDetail.CopyLine(
            PurchaseLineDetail."Line Type"::"Material Requirement",
            PurchaseLineDetail."Record Type"::Project, ProjectMaterialReqLine."Project No.",
            ProjectMaterialReqLine."Yard No.", ProjectMaterialReqLine."System No.",
            ProjectMaterialReqLine."Entity Type", ProjectMaterialReqLine."Entity No.",
            '', '', ProjectMaterialReqLine."Line No.", PurchaseLineDetail."Line Type"::"Advice Order",
            '', AdviceOrderLine."Line No.", FALSE);
        UNTIL ((ProjectMaterialReqLine.NEXT = 0) OR PurchaseLineDetailIsCopied)
      END;
    END;

    PROCEDURE GetItemQtyItemJournalProject@1100528300(ItemNo@1100528306 : Code[20];ProjectFilter@1100528302 : Text[250]) : Decimal;
    VAR
      Item@1100528301 : Record 27;
      ItemJournalLine@1100528300 : Record 83;
      ProjectFilterQuantity@1100528304 : Decimal;
    BEGIN
      IF (ItemNo = '') THEN
        EXIT(0);
      IF (NOT Item.GET(ItemNo)) THEN
        EXIT(0);

      Item.CALCFIELDS("Qty. on Item Journal Project");

      IF (ProjectFilter <> '') THEN BEGIN
        ItemJournalLine.SETRANGE("Item No.", ItemNo);
        ItemJournalLine.SETRANGE("Entry Type", ItemJournalLine."Entry Type"::Sale);
        ItemJournalLine.SETFILTER("Service Order No.", '%1', '');
        ItemJournalLine.SETFILTER("Job No.", '%1', ProjectFilter);
        IF (ItemJournalLine.FINDSET) THEN BEGIN
          REPEAT
            ProjectFilterQuantity += ItemJournalLine.Quantity;
          UNTIL (ItemJournalLine.NEXT = 0);
        END;
      END;

      EXIT(Item."Qty. on Item Journal Project" - ProjectFilterQuantity);
    END;

    PROCEDURE GetItemQtyInventory@1100528302(ItemNo@1100528300 : Code[20];LocationFilter@1100528305 : Text[250]) : Decimal;
    VAR
      Item@1100528301 : Record 27;
      ItemLedgerEntry@1100528303 : Record 32;
      ItemInventory@1100528304 : Decimal;
    BEGIN
      IF (ItemNo = '') THEN
        EXIT(0);
      IF (NOT Item.GET(ItemNo)) THEN
        EXIT(0);

      ItemLedgerEntry.SETRANGE("Item No.", ItemNo);
      ItemLedgerEntry.SETFILTER("Location Code", LocationFilter);
      IF (ItemLedgerEntry.FINDSET) THEN BEGIN
        REPEAT
          ItemInventory += ItemLedgerEntry.Quantity;
        UNTIL (ItemLedgerEntry.NEXT = 0);
      END;

      EXIT(ItemInventory);
    END;

    BEGIN
    {
      Explanation:
      ============
      This codeunit belongs to the Material Monitor, which has been divided into 4 screen parts:
      A. Section 1: (Form 11124841  Material Monitor Main): contains the filterset defined in record MatMonFilterset.
      B. Section 2: (Form 11124842  Material Monitor Subform): fills itself with TempMatMon2Line.
      C. Section 3: (Form 11124843  Material Monitor Details): fills itself with TempMatMon3DisplayLine (is a subset of TempMatMon3Line).
      D. Section 4: (Form 11124844  Material Monitor Advice Orders): fills itself with TempSection4AdviceOrderLine (which is created upon
                    TempMatMon3DisplayLine).
      This codeunit will keep track of all these recordsets.
      The enumerated forms get their recordsets out of these recordsets in this codeunit.

      This codeunit keeps track of the following temp recordsets:
      ===========================================================
      TempMatMon2Line             - This table is kept in temp by this codeunit. This contains the set of Material Monitor Cumulative
                                    (Total) lines belonging to the current Material Monitor filter settings. This set will be used to fill
                                    section 2 Form.
                                    TempMatMon2Line."Detail LineNo." corresponds to the field in TempMatMon3Line."Compressed to LineNo.".
      TempMatMon3Line             - This table is kept in temp by this codeunit. This contains the set of Material Monitor Detail lines
                                    belonging to the current Material Monitor filter settings. This set will be used to fill Form
                                    with section 3.
                                    TempMatMon3Line."Compressed to LineNo." corresponds to the field in TempMatMon2Line."Detail LineNo.".
      TempMatMon3DisplayLine      - Extract from TempMatMon3Line, based upon SelectedMatMonCumLine (the record selected by the user to
                                    display detailed information for). Before displaying these records details are calculated.
      TempSection4AdviceOrderLine - Contains temp Advice Order Lines based upon the recordset in TempMatMon3DisplayLine. This recordset
                                    is being built and displayed upon user request from Section3 form.
      TempProject                 - This temptable contains all ProjectNo.s that should be used in MaterialMonitor

      Programstructure:
      =================
      1. Detail lines section3 will be rebuilt for ALL lines in Project, when:
          - from MatMon Main Form button "Update/Bijwerken" is selected
          - OR when Project-Filter changes
          - OR when Date Filter changes
         In order to rebuild section3 call function CA_UpdateMatMon.
      2. Rest of filters determines which part of the section3 Detail lines will be totalized in section2
          - changing one of the filters results in rebuilding section2 from section3;
          - BE AWARE: changing one of the filters results NOT in rebuiling section3 in this case
         In order to rebuild section2 from section3 call function: CAD_RebuildSection2From3.

      Functionstructure:
      ==================
      Functions in this codeunit has been divided into 3 categories:
        A=all functions used to build the main Material Monitor screen section1;
        B=all functions used to fill and use Material Monitor screen section2;
        C=all functions used to fill and use Material Monitor screen section3.
        D=all functions used to fill and use Material Monitor screen section4.
      Subfunctions have the same nameprefix as the function they have been called from
      (the first time). E.g. function CABHAA_FillMatMonDetLine is called from function CABHA_FindSupplyJobInventory.
    }
    END.
  }
}

