OBJECT Codeunit 1032 Job Planning Line-Reserve
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.01,4PS14.00;
  }
  PROPERTIES
  {
    Permissions=TableData 337=rimd,
                TableData 99000850=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Reserved quantity cannot be greater than %1.;NOR=Reservert antall kan ikke v‘re st›rre enn %1.;SVE=Reserverat antal kan inte vara st”rre „n %1.';
      Text002@1001 : TextConst '@@@=starts with "Planning Date";ENU=must be filled in when a quantity is reserved;NOR=m† fylles ut n†r et antall reserveres;SVE=ska fyllas i n„r ett antal „r reserverade';
      Text004@1003 : TextConst '@@@=starts with some field name;ENU=must not be changed when a quantity is reserved;NOR=skal ikke endres n†r et antall reserveres;SVE=f†r inte „ndras n„r ett antal „r reserverade';
      Text005@1004 : TextConst 'ENU=Codeunit is not initialized correctly.;NOR=Codeunit er ikke riktig initialisert.;SVE=Kodmodul har inte initierats p† ett korrekt s„tt.';
      CreateReservEntry@1005 : Codeunit 99000830;
      ReservEngineMgt@1006 : Codeunit 99000831;
      ReservMgt@1007 : Codeunit 99000845;
      SetFromType@1009 : ' ,Sales,Requisition Line,Purchase,Item Journal,BOM Journal,Item Ledger Entry,Service,Job';
      SetFromSubtype@1010 : Integer;
      SetFromID@1011 : Code[20];
      SetFromBatchName@1012 : Code[10];
      SetFromProdOrderLine@1013 : Integer;
      SetFromRefNo@1014 : Integer;
      SetFromVariantCode@1015 : Code[10];
      SetFromLocationCode@1016 : Code[10];
      SetFromSerialNo@1018 : Code[50];
      SetFromLotNo@1019 : Code[50];
      SetFromQtyPerUOM@1020 : Decimal;

    [External]
    PROCEDURE CreateReservation@1(JobPlanningLine@1000 : Record 11020401;Description@1001 : Text[100];ExpectedReceiptDate@1002 : Date;Quantity@1008 : Decimal;QuantityBase@1003 : Decimal;ForSerialNo@1005 : Code[50];ForLotNo@1004 : Code[50]);
    VAR
      PlanningDate@1007 : Date;
      SignFactor@1006 : Integer;
    BEGIN
      IF SetFromType = 0 THEN
        ERROR(Text005);

      JobPlanningLine.TESTFIELD(Type,JobPlanningLine.Type::Item);
      JobPlanningLine.TESTFIELD("No.");
      JobPlanningLine.TESTFIELD("Planning Date");

      JobPlanningLine.CALCFIELDS("Reserved Qty. (Base)");
      CheckReservedQtyBase(JobPlanningLine,QuantityBase);

      JobPlanningLine.TESTFIELD("Variant Code",SetFromVariantCode);
      JobPlanningLine.TESTFIELD("Location Code",SetFromLocationCode);

      SignFactor := -1;

      IF QuantityBase * SignFactor < 0 THEN
        PlanningDate := JobPlanningLine."Planning Date"
      ELSE BEGIN
        PlanningDate := ExpectedReceiptDate;
        ExpectedReceiptDate := JobPlanningLine."Planning Date";
      END;

      CreateReservEntry.CreateReservEntryFor(
        DATABASE::"Job Planning Line",JobPlanningLine.Status,
        JobPlanningLine."Job No.",'',0,JobPlanningLine."Job Contract Entry No.",JobPlanningLine."Qty. per Unit of Measure",
        Quantity,QuantityBase,ForSerialNo,ForLotNo);
      CreateReservEntry.CreateReservEntryFrom(
        SetFromType,SetFromSubtype,SetFromID,SetFromBatchName,SetFromProdOrderLine,SetFromRefNo,
        SetFromQtyPerUOM,SetFromSerialNo,SetFromLotNo);
      CreateReservEntry.CreateReservEntry(
        JobPlanningLine."No.",JobPlanningLine."Variant Code",JobPlanningLine."Location Code",
        Description,ExpectedReceiptDate,PlanningDate);

      SetFromType := 0;
    END;

    LOCAL PROCEDURE CreateBindingReservation@10(JobPlanningLine@1000 : Record 11020401;Description@1001 : Text[100];ExpectedReceiptDate@1002 : Date;Quantity@1008 : Decimal;QuantityBase@1003 : Decimal);
    BEGIN
      CreateReservation(JobPlanningLine,Description,ExpectedReceiptDate,Quantity,QuantityBase,'','');
    END;

    [External]
    PROCEDURE CreateReservationSetFrom@7(TrackingSpecificationFrom@1000 : Record 336);
    BEGIN
      WITH TrackingSpecificationFrom DO BEGIN
        SetFromType := "Source Type";
        SetFromSubtype := "Source Subtype";
        SetFromID := "Source ID";
        SetFromBatchName := "Source Batch Name";
        SetFromProdOrderLine := "Source Prod. Order Line";
        SetFromRefNo := "Source Ref. No.";
        SetFromVariantCode := "Variant Code";
        SetFromLocationCode := "Location Code";
        SetFromSerialNo := "Serial No.";
        SetFromLotNo := "Lot No.";
        SetFromQtyPerUOM := "Qty. per Unit of Measure";
      END;
    END;

    LOCAL PROCEDURE CheckReservedQtyBase@13(JobPlanningLine@1000 : Record 11020401;QuantityBase@1002 : Decimal);
    VAR
      IsHandled@1001 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeCheckReservedQtyBase(JobPlanningLine,IsHandled);
      IF IsHandled THEN
        EXIT;

      IF ABS(JobPlanningLine."Remaining Qty. (Base)") < ABS(JobPlanningLine."Reserved Qty. (Base)") + QuantityBase THEN
        ERROR(
          Text000,
          ABS(JobPlanningLine."Remaining Qty. (Base)") - ABS(JobPlanningLine."Reserved Qty. (Base)"));
    END;

    [External]
    PROCEDURE SetBinding@8(Binding@1000 : ' ,Order-to-Order');
    BEGIN
      CreateReservEntry.SetBinding(Binding);
    END;

    [External]
    PROCEDURE FilterReservFor@12(VAR FilterReservEntry@1000 : Record 337;JobPlanningLine@1001 : Record 11020401);
    BEGIN
      FilterReservEntry.SetSourceFilter(
        DATABASE::"Job Planning Line",JobPlanningLine.Status,JobPlanningLine."Job No.",JobPlanningLine."Job Contract Entry No.",FALSE);
      FilterReservEntry.SetSourceFilter2('',0);
    END;

    [External]
    PROCEDURE ReservQuantity@21(JobPlanningLine@1001 : Record 11020401;VAR QtyToReserve@1003 : Decimal;VAR QtyToReserveBase@1002 : Decimal);
    BEGIN
      CASE JobPlanningLine.Status OF
        JobPlanningLine.Status::Planning,
        JobPlanningLine.Status::Quote,
        JobPlanningLine.Status::Order,
        JobPlanningLine.Status::Completed:
          BEGIN
            QtyToReserve := JobPlanningLine."Remaining Qty.";
            QtyToReserveBase := JobPlanningLine."Remaining Qty. (Base)";
          END;
      END;

      OnAfterReservQuantity(JobPlanningLine,QtyToReserve,QtyToReserveBase);
    END;

    [External]
    PROCEDURE Caption@30(JobPlanningLine@1001 : Record 11020401) CaptionText@1000 : Text[80];
    BEGIN
      CaptionText :=
        STRSUBSTNO('%1 %2 %3',JobPlanningLine.Status,JobPlanningLine."Job No.",JobPlanningLine."No.");
    END;

    [External]
    PROCEDURE FindReservEntry@4(JobPlanningLine@1000 : Record 11020401;VAR ReservEntry@1001 : Record 337) : Boolean;
    BEGIN
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,FALSE);
      FilterReservFor(ReservEntry,JobPlanningLine);
      EXIT(ReservEntry.FINDLAST);
    END;

    [External]
    PROCEDURE VerifyChange@59(VAR NewJobPlanningLine@1000 : Record 11020401;VAR OldJobPlanningLine@1001 : Record 11020401);
    VAR
      JobPlanningLine@1005 : Record 11020401;
      ReservEntry@1002 : Record 337;
      ShowError@1003 : Boolean;
      HasError@1004 : Boolean;
    BEGIN
      IF (NewJobPlanningLine.Type <> NewJobPlanningLine.Type::Item) AND (OldJobPlanningLine.Type <> OldJobPlanningLine.Type::Item) THEN
        EXIT;
      IF NewJobPlanningLine."Job Contract Entry No." = 0 THEN
        IF NOT JobPlanningLine.GET(
             NewJobPlanningLine."Job No.",
             NewJobPlanningLine."Job Task No.",
             NewJobPlanningLine."Line No.")
        THEN
          EXIT;

      NewJobPlanningLine.CALCFIELDS("Reserved Qty. (Base)");
      ShowError := NewJobPlanningLine."Reserved Qty. (Base)" <> 0;

      IF NewJobPlanningLine."Usage Link" <> OldJobPlanningLine."Usage Link" THEN BEGIN
        IF ShowError THEN
          NewJobPlanningLine.FIELDERROR("Usage Link",Text004);
        HasError := TRUE;
      END;

      IF (NewJobPlanningLine."Planning Date" = 0D) AND (OldJobPlanningLine."Planning Date" <> 0D) THEN BEGIN
        IF ShowError THEN
          NewJobPlanningLine.FIELDERROR("Planning Date",Text002);
        HasError := TRUE;
      END;

      IF NewJobPlanningLine."No." <> OldJobPlanningLine."No." THEN BEGIN
        IF ShowError THEN
          NewJobPlanningLine.FIELDERROR("No.",Text004);
        HasError := TRUE;
      END;

      IF NewJobPlanningLine."Variant Code" <> OldJobPlanningLine."Variant Code" THEN BEGIN
        IF ShowError THEN
          NewJobPlanningLine.FIELDERROR("Variant Code",Text004);
        HasError := TRUE;
      END;

      IF NewJobPlanningLine."Location Code" <> OldJobPlanningLine."Location Code" THEN BEGIN
        IF ShowError THEN
          NewJobPlanningLine.FIELDERROR("Location Code",Text004);
        HasError := TRUE;
      END;

      IF NewJobPlanningLine."Bin Code" <> OldJobPlanningLine."Bin Code" THEN BEGIN
        IF ShowError THEN
          NewJobPlanningLine.FIELDERROR("Bin Code",Text004);
        HasError := TRUE;
      END;

      IF NewJobPlanningLine."Line No." <> OldJobPlanningLine."Line No." THEN
        HasError := TRUE;

      IF NewJobPlanningLine.Type <> OldJobPlanningLine.Type THEN BEGIN
        IF ShowError THEN
          NewJobPlanningLine.FIELDERROR(Type,Text004);
        HasError := TRUE;
      END;

      IF HasError THEN
        IF (NewJobPlanningLine."No." <> OldJobPlanningLine."No.") OR
           FindReservEntry(NewJobPlanningLine,ReservEntry)
        THEN BEGIN
          IF (NewJobPlanningLine."No." <> OldJobPlanningLine."No.") OR (NewJobPlanningLine.Type <> OldJobPlanningLine.Type) THEN BEGIN
            ReservMgt.SetJobPlanningLine(OldJobPlanningLine);
            ReservMgt.DeleteReservEntries(TRUE,0);
            ReservMgt.SetJobPlanningLine(NewJobPlanningLine);
          END ELSE BEGIN
            ReservMgt.SetJobPlanningLine(NewJobPlanningLine);
            ReservMgt.DeleteReservEntries(TRUE,0);
          END;
          ReservMgt.AutoTrack(NewJobPlanningLine."Remaining Qty. (Base)");
        END;

      IF HasError OR (NewJobPlanningLine."Planning Date" <> OldJobPlanningLine."Planning Date")
      THEN BEGIN
        AssignForPlanning(NewJobPlanningLine);
        IF (NewJobPlanningLine."No." <> OldJobPlanningLine."No.") OR
           (NewJobPlanningLine."Variant Code" <> OldJobPlanningLine."Variant Code") OR
           (NewJobPlanningLine."Location Code" <> OldJobPlanningLine."Location Code")
        THEN
          AssignForPlanning(OldJobPlanningLine);
      END;
    END;

    [External]
    PROCEDURE VerifyQuantity@2(VAR NewJobPlanningLine@1000 : Record 11020401;VAR OldJobPlanningLine@1001 : Record 11020401);
    VAR
      JobPlanningLine@1002 : Record 11020401;
    BEGIN
      WITH NewJobPlanningLine DO BEGIN
        IF Type <> Type::Item THEN
          EXIT;
        IF Status = OldJobPlanningLine.Status THEN
          IF "Line No." = OldJobPlanningLine."Line No." THEN
            IF "Quantity (Base)" = OldJobPlanningLine."Quantity (Base)" THEN
              EXIT;
        IF "Line No." = 0 THEN
          IF NOT JobPlanningLine.GET("Job No.","Job Task No.","Line No.") THEN
            EXIT;
        ReservMgt.SetJobPlanningLine(NewJobPlanningLine);
        IF "Qty. per Unit of Measure" <> OldJobPlanningLine."Qty. per Unit of Measure" THEN
          ReservMgt.ModifyUnitOfMeasure;
        IF "Remaining Qty. (Base)" * OldJobPlanningLine."Remaining Qty. (Base)" < 0 THEN
          ReservMgt.DeleteReservEntries(TRUE,0)
        ELSE
          ReservMgt.DeleteReservEntries(FALSE,"Remaining Qty. (Base)");
        ReservMgt.ClearSurplus;
        ReservMgt.AutoTrack("Remaining Qty. (Base)");
        AssignForPlanning(NewJobPlanningLine);
      END;
    END;

    [External]
    PROCEDURE TransferJobLineToItemJnlLine@35(VAR JobPlanningLine@1000 : Record 11020401;VAR NewItemJnlLine@1001 : Record 83;TransferQty@1002 : Decimal) : Decimal;
    VAR
      OldReservEntry@1003 : Record 337;
      ItemTrackingFilterIsSet@1009 : Boolean;
      EndLoop@1008 : Boolean;
      TrackedQty@1005 : Decimal;
      UnTrackedQty@1007 : Decimal;
      xTransferQty@1006 : Decimal;
    BEGIN
      IF NOT FindReservEntry(JobPlanningLine,OldReservEntry) THEN
        EXIT(TransferQty);

      // Store initial values
      OldReservEntry.CALCSUMS("Quantity (Base)");
      TrackedQty := -OldReservEntry."Quantity (Base)";
      xTransferQty := TransferQty;

      OldReservEntry.Lock;

      // Handle Item Tracking on job planning line:
      CLEAR(CreateReservEntry);
      IF NewItemJnlLine."Entry Type" = NewItemJnlLine."Entry Type"::"Negative Adjmt." THEN
        IF NewItemJnlLine.TrackingExists THEN BEGIN
          CreateReservEntry.SetNewSerialLotNo(NewItemJnlLine."Serial No.",NewItemJnlLine."Lot No.");
          // Try to match against Item Tracking on the job planning line:
          OldReservEntry.SetTrackingFilterFromItemJnlLine(NewItemJnlLine);
          IF OldReservEntry.ISEMPTY THEN
            OldReservEntry.ClearTrackingFilter
          ELSE
            ItemTrackingFilterIsSet := TRUE;
        END;

      NewItemJnlLine.TestItemFields(JobPlanningLine."No.",JobPlanningLine."Variant Code",JobPlanningLine."Location Code");

      IF TransferQty = 0 THEN
        EXIT;

      IF ReservEngineMgt.InitRecordSet2(OldReservEntry,NewItemJnlLine."Serial No.",NewItemJnlLine."Lot No.") THEN
        REPEAT
          OldReservEntry.TestItemFields(JobPlanningLine."No.",JobPlanningLine."Variant Code",JobPlanningLine."Location Code");

          TransferQty :=
            CreateReservEntry.TransferReservEntry(DATABASE::"Item Journal Line",
              NewItemJnlLine."Entry Type",NewItemJnlLine."Journal Template Name",NewItemJnlLine."Journal Batch Name",0,
              NewItemJnlLine."Line No.",NewItemJnlLine."Qty. per Unit of Measure",OldReservEntry,TransferQty);

          IF ReservEngineMgt.NEXTRecord(OldReservEntry) = 0 THEN
            IF ItemTrackingFilterIsSet THEN BEGIN
              OldReservEntry.ClearTrackingFilter;
              ItemTrackingFilterIsSet := FALSE;
              EndLoop := NOT ReservEngineMgt.InitRecordSet(OldReservEntry);
            END ELSE
              EndLoop := TRUE;
        UNTIL EndLoop OR (TransferQty = 0);

      // Handle remaining transfer quantity
      IF TransferQty <> 0 THEN BEGIN
        TrackedQty -= (xTransferQty - TransferQty);
        UnTrackedQty := JobPlanningLine."Remaining Qty. (Base)" - TrackedQty;
        IF TransferQty > UnTrackedQty THEN BEGIN
          ReservMgt.SetJobPlanningLine(JobPlanningLine);
          ReservMgt.DeleteReservEntries(FALSE,JobPlanningLine."Remaining Qty. (Base)");
        END;
      END;
      EXIT(TransferQty);
    END;

    [External]
    PROCEDURE DeleteLine@3(VAR JobPlanningLine@1000 : Record 11020401);
    BEGIN
      WITH JobPlanningLine DO BEGIN
        ReservMgt.SetJobPlanningLine(JobPlanningLine);
        ReservMgt.DeleteReservEntries(TRUE,0);
        CALCFIELDS("Reserved Qty. (Base)");
        AssignForPlanning(JobPlanningLine);
      END;
    END;

    LOCAL PROCEDURE AssignForPlanning@5(VAR JobPlanningLine@1000 : Record 11020401);
    VAR
      PlanningAssignment@1001 : Record 99000850;
    BEGIN
      WITH JobPlanningLine DO BEGIN
        IF Status <> Status::Order THEN
          EXIT;
        IF Type <> Type::Item THEN
          EXIT;
        IF "No." <> '' THEN
          PlanningAssignment.ChkAssignOne("No.","Variant Code","Location Code","Planning Date");
      END;
    END;

    [External]
    PROCEDURE BindToPurchase@6(JobPlanningLine@1000 : Record 11020401;PurchLine@1001 : Record 39;ReservQty@1002 : Decimal;ReservQtyBase@1003 : Decimal);
    VAR
      TrackingSpecification@1004 : Record 336;
      ReservationEntry@1005 : Record 337;
    BEGIN
      SetBinding(ReservationEntry.Binding::"Order-to-Order");
      TrackingSpecification.InitTrackingSpecification2(
        DATABASE::"Purchase Line",PurchLine."Document Type",PurchLine."Document No.",'',0,PurchLine."Line No.",
        PurchLine."Variant Code",PurchLine."Location Code",PurchLine."Qty. per Unit of Measure");
      CreateReservationSetFrom(TrackingSpecification);
      CreateBindingReservation(JobPlanningLine,PurchLine.Description,PurchLine."Expected Receipt Date",ReservQty,ReservQtyBase);
    END;

    [External]
    PROCEDURE BindToRequisition@9(JobPlanningLine@1003 : Record 11020401;ReqLine@1002 : Record 246;ReservQty@1001 : Decimal;ReservQtyBase@1000 : Decimal);
    VAR
      TrackingSpecification@1005 : Record 336;
      ReservationEntry@1004 : Record 337;
    BEGIN
      SetBinding(ReservationEntry.Binding::"Order-to-Order");
      TrackingSpecification.InitTrackingSpecification2(
        DATABASE::"Requisition Line",
        0,ReqLine."Worksheet Template Name",ReqLine."Journal Batch Name",0,ReqLine."Line No.",
        ReqLine."Variant Code",ReqLine."Location Code",ReqLine."Qty. per Unit of Measure");
      CreateReservationSetFrom(TrackingSpecification);
      CreateBindingReservation(JobPlanningLine,ReqLine.Description,ReqLine."Due Date",ReservQty,ReservQtyBase);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterReservQuantity@11(JobPlanningLine@1000 : Record 11020401;VAR QtyToReserve@1001 : Decimal;VAR QtyToReserveBase@1002 : Decimal);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCheckReservedQtyBase@14(JobPlanningLine@1000 : Record 11020401;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

