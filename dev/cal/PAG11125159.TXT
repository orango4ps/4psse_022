OBJECT Page 11125159 Contract Wizard
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Service Contract Wizard;
               NOR=Servicekontraktsguide;
               SVE=Servicekontraktsguide];
    InsertAllowed=No;
    DeleteAllowed=No;
    LinksAllowed=No;
    PageType=NavigatePage;
    UsageCategory=Tasks;
    OnInit=BEGIN
             tbContractEndingDateEnable := TRUE;
             tbContractDurationEnable := TRUE;
             NextEnable := TRUE;
             NewCustomerEnable := TRUE;
             CopyAddressCustEditable := FALSE;
           END;

    OnOpenPage=BEGIN
                 gvWizzardStepOpt:= gvWizzardStepOpt::NewOrExistingCust;
                 gvExistingCustOpt := gvExistingCustOpt::No;

                 //IF CentralDataManagement.InsertingCustomerIsAllowed THEN
                 //  gvExistingCustOpt := gvExistingCustOpt::No
                 //ELSE BEGIN
                 //  gvExistingCustOpt := gvExistingCustOpt::Yes;
                 //  NewCustomerEnable := FALSE;
                 //END;

                 ShowStep(TRUE);
               END;

    OnQueryClosePage=BEGIN
                       IF NOT FinishButtonUsed THEN
                         EXIT(CONFIRM(Text010));
                     END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 8       ;1   ;Action    ;
                      Name=Back;
                      CaptionML=[ENU=&Back;
                                 NOR=&Tilbake;
                                 SVE=&Tillbaka];
                      Enabled=BackEnable;
                      InFooterBar=Yes;
                      Image=PreviousRecord;
                      OnAction=BEGIN
                                 ShowStep(FALSE);
                                 //PerformPrevWizardStatus;
                                 PerfromPreviousWizardStep;
                                 ShowStep(TRUE);
                                 CurrPage.UPDATE(TRUE);
                               END;
                                }
      { 9       ;1   ;Action    ;
                      Name=Next;
                      CaptionML=[ENU=&Next;
                                 NOR=&Neste;
                                 SVE=&N„sta];
                      Enabled=NextEnable;
                      InFooterBar=Yes;
                      Image=NextRecord;
                      OnAction=BEGIN
                                 IF NOT CheckStatus THEN
                                   EXIT;
                                 ShowStep(FALSE);
                                 PerfromNextWizardStep;
                                 ShowStep(TRUE);
                                 CurrPage.UPDATE(TRUE);
                               END;
                                }
      { 10      ;1   ;Action    ;
                      Name=Finish;
                      CaptionML=[ENU=&Finish;
                                 NOR=&Fullf›r;
                                 SVE=&Slutf”r];
                      Enabled=FinishEnable;
                      InFooterBar=Yes;
                      Image=Completed;
                      OnAction=VAR
                                 lvServContrFrm@1100525001 : Page 11125146;
                               BEGIN
                                 IF NOT CheckStatus THEN
                                   EXIT;
                                 CurrPage.EDITABLE(FALSE);
                                 FinishWizard;
                                 COMMIT;
                                 lvServContrFrm.SETRECORD(gvServContractRec);
                                 lvServContrFrm.RUN;
                                 FinishButtonUsed := TRUE;
                                 CurrPage.CLOSE;
                               END;
                                }
      { 1100525059;1 ;Action    ;
                      CaptionML=[ENU=Objects;
                                 NOR=Objektoversikt;
                                 SVE=Serviceobjekt];
                      Promoted=Yes;
                      Visible=ObjectsActionVisible;
                      InFooterBar=Yes;
                      PromotedIsBig=Yes;
                      Image=WorkCenterLoad;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 PAGE.RUNMODAL(PAGE::"Contract Wizard Lines", gvTempContrWizRec);
                                 CurrPage.UPDATE(TRUE);
                               END;
                                }
      { 1100528604;1 ;Action    ;
                      CaptionML=[ENU=Relations;
                                 NOR=Relasjoner;
                                 SVE=Relationer];
                      Promoted=Yes;
                      Visible=RelatiesActionVisible;
                      InFooterBar=Yes;
                      Image=View;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 Contact@1100528600 : Record 5050;
                               BEGIN
                                 PAGE.RUNMODAL(0, Contact);
                               END;
                                }
      { 1100526200;1 ;Action    ;
                      CaptionML=[ENU=Search Customer;
                                 NOR=S›k kunde;
                                 SVE=S”k kund];
                      Promoted=Yes;
                      Visible=SearchCustomerActionVisible;
                      InFooterBar=Yes;
                      Image=Find;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 IF PAGE.RUNMODAL(PAGE::"Customer List", gvCustRec) = ACTION::LookupOK THEN BEGIN
                                   ShowStep(FALSE);
                                   gvExistingCustOpt := gvExistingCustOpt::Yes;
                                   PerfromNextWizardStep;
                                   ShowStep(TRUE);
                                 END ELSE BEGIN
                                   gvCustRec.RESET;
                                   gvCustRec.INIT;
                                   gvCustRec."No." := '';
                                 END;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1100525005;1;Group  ;
                Name=Step1;
                Visible=Step1Visible }

    { 1100525003;2;Field  ;
                CaptionClass=Text19042868;
                MultiLine=Yes }

    { 1100525000;2;Field  ;
                CaptionClass=Text19065496;
                MultiLine=Yes }

    { 1100525001;2;Field  ;
                Name=ExistingCustomer;
                CaptionML=[ENU=Do you want to create a Service Contract for new or existing Customer ?;
                           NOR=Vil du opprette en servicekontrakt for en ny eller eksisterende kunde?;
                           SVE=Vill du skapa ett servicekontrakt f”r nya eller befintliga kunder?];
                OptionCaptionML=[ENU=Existing Customer,New Customer;
                                 NOR=Eksisterende kunde,Ny kunde;
                                 SVE=Befintlig kund,Ny kund];
                SourceExpr=gvExistingCustOpt;
                Enabled=NewCustomerEnable;
                OnValidate=BEGIN
                             IF gvExistingCustOpt = gvExistingCustOpt::No THEN
                               NogvExistingCustOptOnValidate;
                           END;
                            }

    { 1100525015;1;Group  ;
                Name=Step2;
                Visible=Step2Visible }

    { 1100525014;2;Field  ;
                CaptionClass=Text19029598;
                MultiLine=Yes }

    { 1100525013;2;Field  ;
                Name=CustomerCode;
                CaptionML=[ENU=Customer No.;
                           NOR=Kundenr.;
                           SVE=Kundnr];
                SourceExpr=gvCustRec."No.";
                OnValidate=BEGIN
                             gvCustRec.GET(gvCustRec."No.");
                               gvCustRecNoOnAfterValidate;
                           END;

                OnLookup=BEGIN
                           gvCustRec.RESET;
                           IF PAGE.RUNMODAL(PAGE::"Customer List", gvCustRec) = ACTION::LookupOK THEN
                             CurrPage.UPDATE(TRUE);
                         END;
                          }

    { 1100525012;2;Field  ;
                CaptionML=[ENU=Name;
                           NOR=Navn;
                           SVE=Namn];
                SourceExpr=gvCustRec.Name;
                Editable=FALSE }

    { 1100525011;2;Field  ;
                CaptionML=[ENU=Name 2;
                           NOR=Navn 2;
                           SVE=Namn 2];
                SourceExpr=gvCustRec."Name 2";
                Editable=FALSE }

    { 1100525010;2;Field  ;
                CaptionML=[ENU=Address;
                           NOR=Adresse;
                           SVE=Adress];
                SourceExpr=gvCustRec.Address;
                Editable=FALSE }

    { 1100525009;2;Field  ;
                CaptionML=[ENU=Address 2;
                           NOR=Adresse 2;
                           SVE=Adress 2];
                SourceExpr=gvCustRec."Address 2";
                Editable=FALSE }

    { 1100525008;2;Field  ;
                CaptionML=[ENU=Post Code;
                           NOR=Postnr.;
                           SVE=Postnr];
                SourceExpr=gvCustRec."Post Code";
                Editable=FALSE }

    { 1100525007;2;Field  ;
                CaptionML=[ENU=City;
                           NOR=Sted;
                           SVE=Ort];
                SourceExpr=gvCustRec.City;
                Editable=FALSE }

    { 1100525006;2;Field  ;
                CaptionML=[ENU=Country/Region Code;
                           NOR=Lands-/regionkode;
                           SVE=Lands-/regionkod];
                SourceExpr=gvCustRec."Country/Region Code";
                Editable=FALSE }

    { 1100525004;2;Field  ;
                CaptionML=[ENU=Phone No.;
                           NOR=Telefonnr.;
                           SVE=Telefonnr];
                SourceExpr=gvCustRec."Phone No.";
                Editable=FALSE }

    { 1100525002;2;Field  ;
                CaptionML=[ENU=E-Mail;
                           NOR=E-Mail;
                           SVE=E-post];
                SourceExpr=gvCustRec."E-Mail";
                Editable=FALSE }

    { 2   ;1   ;Group     ;
                Name=Step3;
                Visible=Step3Visible }

    { 1100525034;2;Field  ;
                CaptionClass=Text19053343;
                MultiLine=Yes }

    { 1100525024;2;Field  ;
                Name=CustomerName;
                CaptionML=[ENU=Name;
                           NOR=Navn;
                           SVE=Namn];
                SourceExpr=gvCustNametxt }

    { 1100525025;2;Field  ;
                CaptionML=[ENU=Name 2;
                           NOR=Navn 2;
                           SVE=Namn 2];
                SourceExpr=gvCustName2Txt }

    { 1100525026;2;Field  ;
                CaptionML=[ENU=Address;
                           NOR=Adresse;
                           SVE=Adress];
                SourceExpr=gvCustAddressTxt }

    { 1100525027;2;Field  ;
                CaptionML=[ENU=Address 2;
                           NOR=Adresse 2;
                           SVE=Adress 2];
                SourceExpr=gvCustAddress2Txt }

    { 1100525028;2;Field  ;
                CaptionML=[ENU=Post Code;
                           NOR=Postnr;
                           SVE=Postnr];
                SourceExpr=gvCustPostCodeRec.Code;
                OnLookup=BEGIN
                           gvCustPostCodeRec.RESET;
                           IF PAGE.RUNMODAL(PAGE::"Post Codes",gvCustPostCodeRec) = ACTION::LookupOK THEN BEGIN
                             gvCustCityTxt := gvCustPostCodeRec.City;
                             CurrPage.UPDATE(TRUE);
                           END;
                         END;
                          }

    { 1100525029;2;Field  ;
                CaptionML=[ENU=City;
                           NOR=Poststed;
                           SVE=Ort];
                SourceExpr=gvCustCityTxt }

    { 1100525030;2;Field  ;
                CaptionML=[ENU=Country/Region Code;
                           NOR=Lands-/regionkode;
                           SVE=Lands-/regionkod];
                SourceExpr=gvCustCountryRec.Code;
                OnLookup=BEGIN
                           gvCustCountryRec.RESET;
                           IF PAGE.RUNMODAL(PAGE::"Countries/Regions",gvCustCountryRec) = ACTION::LookupOK THEN
                             CurrPage.UPDATE(TRUE);
                         END;
                          }

    { 1210190001;2;Field  ;
                CaptionML=[ENU=Phone No.;
                           NOR=Telefonnr.;
                           SVE=Telefonnr];
                SourceExpr=gvCustPhoneNo }

    { 1210190003;2;Field  ;
                CaptionML=[ENU=E-Mail;
                           NOR=E-Mail;
                           SVE=E-post];
                SourceExpr=gvCustEMail }

    { 1100525033;2;Field  ;
                CaptionML=[ENU=Customer Template;
                           NOR=Kundemal;
                           SVE=Kundmall];
                SourceExpr=gvCustTemplateRec.Code;
                OnLookup=BEGIN
                           gvCustTemplateRec.RESET;
                           IF PAGE.RUNMODAL(PAGE::"Customer Template List",gvCustTemplateRec) = ACTION::LookupOK THEN
                             CurrPage.UPDATE;
                         END;
                          }

    { 3   ;1   ;Group     ;
                Name=Step4;
                Visible=Step4Visible }

    { 1100525036;2;Field  ;
                Name=ExistingLocation;
                CaptionML=[ENU=Do you want to create a new Location ?;
                           NOR=Vil du opprette en ny lokasjon?;
                           SVE=Vill du skapa ett nytt lagerst„lle?];
                OptionCaptionML=[ENU=Existing Location,New Location;
                                 NOR=Eksisterende lokasjon,Ny lokasjon;
                                 SVE=Befintligt lagerst„lle,Nytt lagerst„lle];
                SourceExpr=gvExistingLocOpt;
                OnValidate=BEGIN
                             IF gvExistingLocOpt = gvExistingLocOpt::Yes THEN BEGIN
                               gvAddressDataFromCustBln := FALSE;
                               CopyAddressCustEditable := FALSE;
                             END ELSE
                               CopyAddressCustEditable := TRUE;
                           END;
                            }

    { 1100525041;2;Field  ;
                Name=CopyAddressCust;
                CaptionML=[ENU=Copy Visit Address from Customer ?;
                           SVE=Kopiera adress fr†n kund?];
                SourceExpr=gvAddressDataFromCustBln;
                Editable=CopyAddressCustEditable;
                OnValidate=BEGIN
                             EnableFields;
                             IF NOT gvAddressDataFromCustBln THEN
                               AddressCode := '';
                           END;
                            }

    { 1100525042;2;Field  ;
                CaptionML=[ENU=Address Code;
                           NOR=Adressekode;
                           SVE=Adresskod];
                SourceExpr=AddressCode;
                Editable=AddressCodeEditable;
                OnValidate=VAR
                             ShiptoAddress@1100525000 : Record 222;
                           BEGIN
                             IF (AddressCode <> '') AND (gvExistingCustOpt = gvExistingCustOpt::Yes) THEN BEGIN
                               ShiptoAddress.SETRANGE("Customer No.", gvCustRec."No.");
                               ShiptoAddress.SETRANGE("Project Address", TRUE);
                               ShiptoAddress.SETRANGE(Code, AddressCode);
                               ShiptoAddress.FINDFIRST;
                             END;
                           END;

                OnLookup=VAR
                           ShiptoAddress@1100525000 : Record 222;
                         BEGIN
                           IF (gvExistingCustOpt = gvExistingCustOpt::Yes) AND gvAddressDataFromCustBln THEN BEGIN
                             ShiptoAddress.SETRANGE("Customer No.", gvCustRec."No.");
                             ShiptoAddress.SETRANGE("Project Address", TRUE);
                             IF PAGE.RUNMODAL(0, ShiptoAddress) = ACTION::LookupOK THEN
                               AddressCode := ShiptoAddress.Code;
                           END;
                         END;
                          }

    { 18  ;1   ;Group     ;
                Name=Step5;
                Visible=Step5Visible }

    { 1100525038;2;Field  ;
                CaptionClass=Text19032744;
                MultiLine=Yes }

    { 1100525048;2;Field  ;
                Name=LocationCode;
                CaptionML=[ENU=Location No.;
                           NOR=Lokasjonsnr;
                           SVE=Lagerst„llenr];
                SourceExpr=gvLocRec."No.";
                OnValidate=BEGIN
                             gvLocRec.SETRANGE("Customer No.", gvCustRec."No.");
                             gvLocRec.GET(gvLocRec."No.");
                             gvLocRecNoOnAfterValidate;
                           END;

                OnLookup=BEGIN
                           gvLocRec.RESET;
                           gvLocRec.SETCURRENTKEY("Customer No.");
                           gvLocRec.SETRANGE("Customer No.", gvCustRec."No."); //mg, 14-01-11: M24862
                           IF PAGE.RUNMODAL(PAGE::"Service Location List", gvLocRec) = ACTION::LookupOK THEN
                             CurrPage.UPDATE(TRUE);
                         END;
                          }

    { 1100525049;2;Field  ;
                CaptionML=[ENU=Description;
                           NOR=Beskrivelse;
                           SVE=Beskrivning];
                SourceExpr=gvLocRec.Description;
                Editable=FALSE }

    { 1100525050;2;Field  ;
                CaptionML=[ENU=Description 2;
                           NOR=Beskrivelse 2;
                           SVE=Beskrivning 2];
                SourceExpr=gvLocRec."Description 2";
                Editable=FALSE }

    { 1100525051;2;Field  ;
                CaptionML=[ENU=Address;
                           NOR=Adresse;
                           SVE=Adress];
                SourceExpr=gvLocRec.Address;
                Editable=FALSE }

    { 1100525052;2;Field  ;
                CaptionML=[ENU=Address 2;
                           NOR=Adresse 2;
                           SVE=Adress 2];
                SourceExpr=gvLocRec."Address 2";
                Editable=FALSE }

    { 1100525053;2;Field  ;
                CaptionML=[ENU=Post Code;
                           NOR=Postnr;
                           SVE=Postnr];
                SourceExpr=gvLocRec."Post Code";
                Editable=FALSE }

    { 1100525054;2;Field  ;
                CaptionML=[ENU=City;
                           NOR=Poststed;
                           SVE=Ort];
                SourceExpr=gvLocRec.City;
                Editable=FALSE }

    { 1100525055;2;Field  ;
                CaptionML=[ENU=Country/Region Code;
                           NOR=Lands-/regionkode;
                           SVE=Lands-/regionkod];
                SourceExpr=gvLocRec."Country/Region Code";
                Editable=FALSE }

    { 1210190010;2;Field  ;
                CaptionML=[ENU=Phone No.;
                           NOR=Telefonnr.;
                           SVE=Telefonnr];
                SourceExpr=gvLocRec."Phone No.";
                Editable=FALSE }

    { 1210190008;2;Field  ;
                CaptionML=[ENU=E-Mail;
                           NOR=E-Mail;
                           SVE=E-post];
                SourceExpr=gvLocRec."E-Mail";
                Editable=FALSE }

    { 1100525040;2;Field  ;
                CaptionML=[ENU=No. of Objects;
                           NOR=Antall objekter;
                           SVE=Antal objekt];
                SourceExpr=ServiceLocationInfoMgt.GetNoOfRelatedObjects(gvLocRec."No.");
                Editable=false;
                OnLookup=BEGIN
                           gvLocRec.ShowRelatedObjects;
                         END;
                          }

    { 1100525035;1;Group  ;
                Name=Step6;
                Visible=Step6Visible }

    { 1100525032;2;Field  ;
                CaptionClass=Text19035834;
                MultiLine=Yes }

    { 1100525031;2;Field  ;
                CaptionML=[ENU=Description;
                           NOR=Beskrivelse;
                           SVE=Beskrivning];
                SourceExpr=gvLocDesctxt }

    { 1100525023;2;Field  ;
                CaptionML=[ENU=Description 2;
                           NOR=Beskrivelse 2;
                           SVE=Beskrivning 2];
                SourceExpr=gvLocDesc2Txt }

    { 1100525022;2;Field  ;
                CaptionML=[ENU=Address;
                           NOR=Adresse;
                           SVE=Adress];
                SourceExpr=gvLocAddressTxt }

    { 1100525021;2;Field  ;
                CaptionML=[ENU=Address 2;
                           NOR=Adresse 2;
                           SVE=Adress 2];
                SourceExpr=gvLocAddress2Txt }

    { 1100525020;2;Field  ;
                CaptionML=[ENU=Post Code;
                           NOR=Postnr.;
                           SVE=Postnr];
                SourceExpr=gvLocPostCodeRec.Code;
                OnLookup=BEGIN
                           gvLocPostCodeRec.RESET;
                           IF PAGE.RUNMODAL(PAGE::"Post Codes",gvLocPostCodeRec) = ACTION::LookupOK THEN BEGIN
                             gvLocCityTxt := gvLocPostCodeRec.City;
                             CurrPage.UPDATE(TRUE);
                           END;
                         END;
                          }

    { 1100525019;2;Field  ;
                CaptionML=[ENU=City;
                           NOR=Sted;
                           SVE=Ort];
                SourceExpr=gvLocCityTxt }

    { 1100525018;2;Field  ;
                CaptionML=[ENU=Country/Region Code;
                           NOR=Lands-/regionkode;
                           SVE=Lands-/regionkod];
                SourceExpr=gvLocCountryRec.Code;
                OnLookup=BEGIN
                           gvCustCountryRec.RESET;
                           IF PAGE.RUNMODAL(PAGE::"Countries/Regions",gvCustCountryRec) = ACTION::LookupOK THEN
                             CurrPage.UPDATE(TRUE);
                         END;
                          }

    { 1100525017;2;Field  ;
                CaptionML=[ENU=Phone No.;
                           NOR=Telefonnr.;
                           SVE=Telefonnr];
                SourceExpr=gvLocPhoneNo }

    { 1100525016;2;Field  ;
                CaptionML=[ENU=E-Mail;
                           NOR=E-Mail;
                           SVE=E-post];
                SourceExpr=gvLocEMail }

    { 1100409000;2;Field  ;
                SourceExpr=gvLocRec."Global Dimension 1 Code";
                CaptionClass='1,1,1';
                OnValidate=VAR
                             ServiceLocation@1100409001 : Record 11012801;
                             DimensionManagement@1210190001 : Codeunit 408;
                             DPA_IsHardFilter@1210190000 : Boolean;
                           BEGIN
                             DPA_IsHardFilter := ServiceLocation.DPA_SetFilters(CurrPage.OBJECTID(FALSE));
                             DimensionManagement.CheckDepartmAuthWithFilterType(
                               DATABASE::"Service Location", gvLocRec."Global Dimension 1 Code", DPA_IsHardFilter);
                           END;

                OnLookup=VAR
                           ServiceLocation@1100409005 : Record 11012801;
                           DimensionManagement@1100409004 : Codeunit 408;
                           DimensionValue@1100409002 : Record 349;
                           DPA_IsHardFilter@1100409003 : Boolean;
                         BEGIN
                           DimensionValue.SETRANGE("Global Dimension No.", 1);
                           IF PAGE.RUNMODAL(0, DimensionValue) = ACTION::LookupOK THEN BEGIN
                             DPA_IsHardFilter := ServiceLocation.DPA_SetFilters(CurrPage.OBJECTID(FALSE));
                             DimensionManagement.CheckDepartmAuthWithFilterType(
                               DATABASE::"Service Location", DimensionValue.Code, DPA_IsHardFilter);
                             gvLocRec.VALIDATE("Global Dimension 1 Code", DimensionValue.Code);
                           END;
                         END;
                          }

    { 1100409001;2;Field  ;
                CaptionML=[ENU=Territory;
                           NOR=Distrikt;
                           SVE=Territory];
                SourceExpr=gvLocTerritory;
                TableRelation=Territory }

    { 1100409002;2;Field  ;
                CaptionML=[ENU=Type;
                           NOR=Radtype;
                           SVE=Typ];
                SourceExpr=gvLocType;
                TableRelation=Type }

    { 1100525037;1;Group  ;
                Name=Step7;
                Visible=Step7Visible;
                GroupType=Group;
                InstructionalTextML=[ENU=Select Standard Objects;
                                     NOR=Velg standardobjekter;
                                     SVE=V„lj standardobjekt] }

    { 1100525039;2;Field  ;
                CaptionClass=Text19040000 }

    { 1100525060;1;Group  ;
                Name=Step8;
                Visible=Step8Visible }

    { 1100528602;2;Field  ;
                CaptionML=[ENU=Contract Template;
                           NOR=Kontraktsmal;
                           SVE=Kontraktmall];
                SourceExpr=gvServContractTemplCode;
                TableRelation="Service-Contract Template".Code;
                OnValidate=BEGIN
                             gvServContractTemplCodeOnAfter;
                           END;
                            }

    { 1100525091;2;Field  ;
                CaptionML=[ENU=Description;
                           NOR=Beskrivelse;
                           SVE=Beskrivning];
                SourceExpr=gvServContractRec.Description }

    { 1100525063;2;Field  ;
                CaptionML=[ENU=Description 2;
                           NOR=Beskrivelse 2;
                           SVE=Beskrivning 2];
                SourceExpr=gvServContractRec."Description 2" }

    { 1100525065;2;Field  ;
                CaptionML=[ENU=Status;
                           NOR=Status;
                           SVE=Status];
                OptionCaptionML=[ENU=Applied,Offered,Order,Invoicing Allowed,Expired,Closed;
                                 NOR=Anvendt,Tilbudt,Ordre,Fakturering Tillatt,Utg†tt;
                                 SVE=Till„mpad,Anbudsgiven,Order,Fakturering till†ten,Utg†ngen,St„ngd];
                SourceExpr=gvServContractRec.Status }

    { 1100528600;2;Field  ;
                CaptionML=[ENU=Contract Limit;
                           NOR=Kontraktgrense;
                           SVE=Kontraktgr„ns];
                OptionCaptionML=[ENU=Limited,Unlimited;
                                 NOR=Begrenset,Ubegrenset;
                                 SVE=Begr„nsad,obegr„nsad];
                SourceExpr=gvServContractRec."Contract Limit";
                OnValidate=BEGIN
                             gvServContractRecContractLimit;
                           END;
                            }

    { 1100525069;2;Field  ;
                CaptionML=[ENU=Starting Date;
                           NOR=Startdato;
                           SVE=Startdatum];
                SourceExpr=gvServContractRec."Starting Date";
                OnValidate=BEGIN
                             CalculateContractEndingDate;
                           END;
                            }

    { 1100525061;2;Field  ;
                Name=tbContractDuration;
                CaptionML=[ENU=Contract Duration;
                           NOR=Kontraktperiode;
                           SVE=Kontraktperiod];
                SourceExpr=gvServContractRec."Contract Duration";
                Enabled=tbContractDurationEnable;
                OnValidate=BEGIN
                             CalculateContractEndingDate;
                           END;
                            }

    { 1100525071;2;Field  ;
                Name=tbContractEndingDate;
                CaptionML=[ENU=Ending Date;
                           NOR=Sluttdato;
                           SVE=Slutdatum];
                SourceExpr=gvServContractRec."Ending Date";
                Enabled=tbContractEndingDateEnable }

    { 1100525089;2;Field  ;
                CaptionML=[ENU=Invoice Method;
                           NOR=Faktureringsmetode;
                           SVE=Faktureringsmetod];
                OptionCaptionML=[ENU=Forehand,Afterwards;
                                 NOR=P† f†rh†nd,Etterp†;
                                 SVE=F”rhand,Efter†t];
                SourceExpr=gvServContractRec."Invoice Period" }

  }
  CODE
  {
    VAR
      NormalizeAddressMgt@1100526207 : Codeunit 11012839;
      ServiceLocationInfoMgt@1100525028 : Codeunit 11012856;
      gvWizzardStepOpt@1100525000 : 'NewOrExistingCust,SelectCustomer,CreateCustomer,NewOrExistingLocation,SelectLocation,CreateLocation,CreateObjects,Contractdata';
      gvExistingCustOpt@1100525002 : 'Yes,No';
      gvExistingLocOpt@1100525013 : 'Yes,No';
      gvCustRec@1100525003 : Record 18;
      gvCustNametxt@1100525004 : Text[100];
      gvCustName2Txt@1100525005 : Text[50];
      gvCustAddressTxt@1100525006 : Text[100];
      gvCustAddress2Txt@1100525007 : Text[50];
      gvCustCityTxt@1100525009 : Text[50];
      gvCustTemplateRec@1100525011 : Record 5105;
      gvCustPostCodeRec@1100525012 : Record 225;
      gvCustCountryRec@1100525008 : Record 9;
      gvCustPhoneNo@1210190000 : Text[30];
      gvCustEMail@1210190001 : Text[80];
      gvAddressDataFromCustBln@1100525014 : Boolean;
      gvLocRec@1100525019 : Record 11012801;
      gvLocDesctxt@1100525018 : Text[100];
      gvLocDesc2Txt@1100525017 : Text[50];
      gvLocAddressTxt@1100525016 : Text[100];
      gvLocAddress2Txt@1100525015 : Text[50];
      gvLocCityTxt@1100525010 : Text[50];
      gvLocPostCodeRec@1100525021 : Record 225;
      gvLocCountryRec@1100525020 : Record 9;
      gvLocPhoneNo@1210190002 : Text[30];
      gvLocEMail@1210190003 : Text[80];
      gvLocTerritory@1100409000 : Code[10];
      gvLocType@1100409001 : Code[10];
      gvTempContrWizRec@1100525022 : TEMPORARY Record 11071698;
      gvServContractRec@1100525023 : Record 11012812;
      Text000@1100526200 : TextConst 'ENU=Select existing Customer or create New Code;NOR=Velg eksisterende kunde eller opprett ny kode.;SVE=V„lj befintlig kund eller skapa ny kod';
      Text001@1100526201 : TextConst 'ENU=Edit at least Name, Customer Template and valid Post Code for Customer;SVE=Redigera †tminstone namn och kundmall for kund';
      Text002@1100526202 : TextConst 'ENU=Edit at least Description for Service Location;NOR=Rediger i det minste beskrivelse for servicelokasjon;SVE=Redigera †tminstone beskrivning f”r serviceplats';
      Text003@1100526203 : TextConst 'ENU=Select existing Service Location or create New Code;NOR=Velg eksisterende servicelokasjon eller opprett ny kode;SVE=V„lj befintlig serviceplats eller skapa ny kod';
      Text004@1100526204 : TextConst 'ENU=Select Starting Date Service Contract;NOR=Velg startdato for servicekontrakt;SVE=V„lj startdatum f”r servicekontrakt';
      Text005@1100526205 : TextConst 'ENU=Select Ending Date Service Contract;NOR=Velg sluttdato for servicekontrakt;SVE=V„lj slutdatum f”r servicekontrakt';
      Text006@1100526206 : TextConst 'ENU=Use Next Address?\%1\%2 %3;NOR=Bruke neste adresse?\%1\%2 %3;SVE=Vill du anv„nda n„sta adress?\%1\%2 %3';
      Text007@1100526208 : TextConst 'ENU=Invalid Post Code - House No. combination;NOR=Ugyldig postkode/husnummer-kombinasjon;SVE=Ogiltig kombination av postnummer Í husnummer';
      Text008@1100528600 : TextConst 'ENU=%1 is an Invalid Post Code;NOR=%1 er en ugyldig postkode;SVE=%1 „r ett ogiltigt postnummer';
      Text009@1100528601 : TextConst 'ENU=Location already exists, continue with creating a new location?;NOR=Lokasjonen eksisterer allerede, fortsette og opprette en ny lokasjon?;SVE=Lagerst„lle finns redan. Forts„tt med att skapa en nytt lagerst„lle?';
      gvServContractTemplCode@1100528602 : Code[10];
      FinishButtonUsed@1210190004 : Boolean;
      Text010@1210190005 : TextConst 'ENU=Wizard not finished, cancel anyway?;NOR=Guiden er ikke ferdig, vil du avbryte likevel?;SVE=Guiden har inte slutf”rts, vill du avbryta „nd†?';
      CopyAddressCustEditable@19018689 : Boolean INDATASET;
      NewCustomerEnable@19020754 : Boolean INDATASET;
      Step1Visible@19067551 : Boolean INDATASET;
      Step2Visible@19067406 : Boolean INDATASET;
      Step3Visible@19067629 : Boolean INDATASET;
      Step4Visible@19067716 : Boolean INDATASET;
      Step5Visible@19067683 : Boolean INDATASET;
      Step6Visible@19067522 : Boolean INDATASET;
      Step7Visible@19067745 : Boolean INDATASET;
      Step8Visible@19067336 : Boolean INDATASET;
      FinishEnable@19079943 : Boolean INDATASET;
      BackEnable@19029006 : Boolean INDATASET;
      NextEnable@19007695 : Boolean INDATASET;
      tbContractDurationEnable@19056327 : Boolean INDATASET;
      tbContractEndingDateEnable@19078691 : Boolean INDATASET;
      Text666@19003950 : TextConst 'ENU=%1 is not a valid selection.;NOR=%1 er ikke et gyldig valg.;SVE=%1 „r inte ett giltigt val.';
      Text19053343@19068089 : TextConst 'ENU=You have chosen to create a Service Contract for a new Customer. Edit at least Name, Customer Template en valid Post Code.;SVE=Du har valt att skapa ett servicekontrakt f”r en ny kund. Redigera †tminstone namn och kundmall';
      Text19035834@19068784 : TextConst 'ENU=You have chosen to create a Service Contract for a new Location: edit Address Data.;NOR=Du har valgt † opprette en servicekontrakt for en ny lokasjon: Rediger adressedata;SVE=Du har valt att skapa ett servicekontrakt f”r ett nytt lagerst„lle: redigera adressdata.';
      Text19042868@19032496 : TextConst 'ENU=This wizard helps you to create a Service Contract.;NOR=Denne guiden hjelper deg med † opprette en servicekontrakt.;SVE=Den h„r guiden hj„lper dig att skapa ett servicekontrakt.';
      Text19065496@19044962 : TextConst 'ENU=When finishing this wizard new contract, customer, location and objects wil be created.;NOR=N†r denne guiden er ferdig opprettes ny kontrakt, ny kunde, ny lokasjon og nye objekter.;SVE=N„r denna guide har avslutats skapas ett nytt kontrakt, en ny kund, ett nytt lagerst„lle och nya objekt.';
      Text19029598@19070702 : TextConst 'ENU=You have chosen to create a Service Contract for an existing Customer: select customer.;NOR=Du har valgt † opprette en servicekontrakt for en ekisterende kunde: Velg kunde.;SVE=Du har valt att skapa ett servicekontrakt f”r en befintlig kund: v„lj kund.';
      Text19032744@19020026 : TextConst 'ENU=You have chosen to create a Service Contract for an existing Location: select Location;NOR=Du har valgt † opprette en servicekontrakt for en eksisterende lokasjon: Velg lokasjon;SVE=Du har valt att skapa ett servicekontrakt f”r ett befintligt lagerst„lle: v„lj lagerst„lle';
      ObjectsActionVisible@1100525024 : Boolean INDATASET;
      Text19040000@1100525025 : TextConst 'ENU=In this step standard objects can be selected to be assigned as objects to the contract.;NOR=P† dette steget kan standardobjekter tilordnes som objekter til kontrakten.;SVE=I denna etapp kan standardobjekt v„ljas f”r att tilldelas som objekt i kontraktet.';
      RelatiesActionVisible@1100525026 : Boolean INDATASET;
      SearchCustomerActionVisible@1100525027 : Boolean INDATASET;
      AddressCodeEditable@1100525001 : Boolean INDATASET;
      AddressCode@1100525029 : Code[10];

    LOCAL PROCEDURE ShowStep@2(Visible@1001 : Boolean);
    BEGIN
      ObjectsActionVisible := FALSE;
      RelatiesActionVisible := FALSE;
      SearchCustomerActionVisible := FALSE;

      CASE gvWizzardStepOpt OF
        gvWizzardStepOpt::NewOrExistingCust:
          BEGIN
            Step1Visible := Visible;
            IF Visible THEN BEGIN
              FinishEnable := FALSE;
              BackEnable := FALSE;
              NextEnable := TRUE;

              RelatiesActionVisible := TRUE;
              SearchCustomerActionVisible := TRUE;
            END;
          END;
        gvWizzardStepOpt::SelectCustomer:
          BEGIN
            Step2Visible := Visible;
            IF Visible THEN BEGIN
              FinishEnable := FALSE;
              BackEnable := TRUE;
              NextEnable := TRUE;
            END;
          END;
        gvWizzardStepOpt::CreateCustomer:
          BEGIN
            Step3Visible := Visible;
            IF Visible THEN BEGIN
              FinishEnable := FALSE;
              BackEnable := TRUE;
              NextEnable := TRUE;
            END;
          END;
        gvWizzardStepOpt::NewOrExistingLocation:
          BEGIN
            Step4Visible := Visible;
            IF Visible THEN BEGIN
              FinishEnable := FALSE;
              BackEnable := TRUE;
              NextEnable := TRUE;
            END;
          END;
        gvWizzardStepOpt::SelectLocation:
          BEGIN
            Step5Visible := Visible;
            IF Visible THEN BEGIN
              FinishEnable := FALSE;
              BackEnable := TRUE;
              NextEnable := TRUE;
            END;
          END;
        gvWizzardStepOpt::CreateLocation:
          BEGIN
            Step6Visible := Visible;
            IF Visible THEN BEGIN
              FinishEnable := FALSE;
              BackEnable := TRUE;
              NextEnable := TRUE;
            END;
          END;
        gvWizzardStepOpt::CreateObjects:
          BEGIN
            Step7Visible := Visible;
            IF Visible THEN BEGIN
              FinishEnable := FALSE;
              BackEnable := TRUE;
              NextEnable := TRUE;

              ObjectsActionVisible := TRUE;
            END;
          END;
        gvWizzardStepOpt::Contractdata:
          BEGIN
            Step8Visible := Visible;
            IF Visible THEN BEGIN
              FinishEnable := TRUE;
              BackEnable := TRUE;
              NextEnable := FALSE;
            END;
          END;
      END;
    END;

    PROCEDURE EnableFields@3();
    BEGIN
      tbContractDurationEnable := gvServContractRec."Contract Limit" = gvServContractRec."Contract Limit"::Limited;
      tbContractEndingDateEnable := gvServContractRec."Contract Limit" = gvServContractRec."Contract Limit"::Limited;
      AddressCodeEditable := gvAddressDataFromCustBln;
      CurrPage.UPDATE;
    END;

    PROCEDURE PerfromNextWizardStep@1100525000();
    VAR
      ObjectMgt@1100525000 : Codeunit 11012808;
      HouseNo@1100526204 : Code[30];
      HouseNoExt@1100526203 : Code[10];
      PostCode@1100526202 : Code[20];
      Address@1100526201 : Text[100];
      City@1100526200 : Text[30];
      FullAddress@1100528000 : Text[100];
    BEGIN
      CASE gvWizzardStepOpt OF
        gvWizzardStepOpt::NewOrExistingCust:
          BEGIN
            IF gvExistingCustOpt = gvExistingCustOpt::Yes THEN
              gvWizzardStepOpt := gvWizzardStepOpt::SelectCustomer;
            IF gvExistingCustOpt = gvExistingCustOpt::No THEN
              gvWizzardStepOpt := gvWizzardStepOpt::CreateCustomer;
          END;
        gvWizzardStepOpt::SelectCustomer:
          BEGIN
            IF gvCustRec."No." = '' THEN
              MESSAGE(Text000)
            ELSE
              gvWizzardStepOpt := gvWizzardStepOpt::NewOrExistingLocation;
          END;
        gvWizzardStepOpt::CreateCustomer:
          gvWizzardStepOpt := gvWizzardStepOpt::NewOrExistingLocation;
        gvWizzardStepOpt::NewOrExistingLocation:
          BEGIN
            DetermineLocationData;
            IF gvExistingLocOpt = gvExistingLocOpt::Yes THEN
              gvWizzardStepOpt := gvWizzardStepOpt::SelectLocation;
            IF gvExistingLocOpt = gvExistingLocOpt::No THEN
              gvWizzardStepOpt := gvWizzardStepOpt::CreateLocation;
          END;
        gvWizzardStepOpt::CreateLocation:
          BEGIN
            IF gvLocDesctxt = '' THEN
              MESSAGE(Text002)
            ELSE BEGIN
              HouseNo := NormalizeAddressMgt.DetermineHouseNo(gvLocAddressTxt, HouseNoExt);
              NormalizeAddressMgt.NormalizePostCode(gvLocPostCodeRec.Code, gvLocCountryRec.Code, PostCode);
              Address := gvLocAddressTxt;
              City := gvLocCityTxt;
              FullAddress := DELCHR(STRSUBSTNO('%1 %2 %3', Address, HouseNo, HouseNoExt), '>', ' ');

              IF (PostCode <> '') AND (Address <> '') AND
                ((FullAddress <> gvLocAddressTxt) OR (PostCode <> gvLocPostCodeRec.Code) OR (City <> gvLocCityTxt)) THEN BEGIN
                IF CONFIRM(Text006, TRUE, FullAddress, PostCode, City) THEN BEGIN
                  gvLocAddressTxt := FullAddress;
                  gvLocPostCodeRec.Code := PostCode;
                  gvLocCityTxt := City;
                  gvWizzardStepOpt := gvWizzardStepOpt::CreateObjects;
                END;
              END ELSE
                gvWizzardStepOpt := gvWizzardStepOpt::CreateObjects;
            END;
          END;
        gvWizzardStepOpt::SelectLocation:
          gvWizzardStepOpt := gvWizzardStepOpt::CreateObjects;
        gvWizzardStepOpt::CreateObjects:
          BEGIN
            gvWizzardStepOpt := gvWizzardStepOpt::Contractdata;
            ObjectMgt.FillDefaultContractData(gvServContractRec);
          END;
        gvWizzardStepOpt::Contractdata:
          BEGIN

          END;
      END;
    END;

    PROCEDURE PerfromPreviousWizardStep@1100525005();
    BEGIN
      CASE gvWizzardStepOpt OF
        gvWizzardStepOpt::SelectCustomer:
          gvWizzardStepOpt := gvWizzardStepOpt::NewOrExistingCust;
        gvWizzardStepOpt::CreateCustomer:
          gvWizzardStepOpt := gvWizzardStepOpt::NewOrExistingCust;
        gvWizzardStepOpt::NewOrExistingLocation:
          BEGIN
            IF gvExistingCustOpt = gvExistingCustOpt::Yes THEN
              gvWizzardStepOpt := gvWizzardStepOpt::SelectCustomer
            ELSE
              gvWizzardStepOpt := gvWizzardStepOpt::CreateCustomer;
          END;
        gvWizzardStepOpt::CreateLocation:
          gvWizzardStepOpt := gvWizzardStepOpt::NewOrExistingLocation;
        gvWizzardStepOpt::SelectLocation:
          gvWizzardStepOpt := gvWizzardStepOpt::NewOrExistingLocation;
        gvWizzardStepOpt::CreateObjects:
          IF gvExistingLocOpt = gvExistingLocOpt::Yes THEN
            gvWizzardStepOpt := gvWizzardStepOpt::SelectLocation
          ELSE
            gvWizzardStepOpt := gvWizzardStepOpt::CreateLocation;
        gvWizzardStepOpt::Contractdata:
         gvWizzardStepOpt := gvWizzardStepOpt::CreateObjects;
      END;
    END;

    PROCEDURE CheckStatus@1100525006() : Boolean;
    VAR
      PostCode@1100528602 : Code[20];
      HouseNo@1100528600 : Code[30];
      HouseNoExt@1100528601 : Code[10];
      Address@1100528605 : Text[100];
      City@1100528603 : Text[30];
      FullAddress@1100528000 : Text[100];
    BEGIN
      CASE gvWizzardStepOpt OF
        gvWizzardStepOpt::CreateCustomer:
          BEGIN
            IF (gvCustNametxt = '') OR (gvCustTemplateRec.Code = '') THEN BEGIN
              MESSAGE(Text001);
              EXIT;
            END;

            HouseNo := NormalizeAddressMgt.DetermineHouseNo(gvCustAddressTxt, HouseNoExt);
            NormalizeAddressMgt.NormalizePostCode(gvCustPostCodeRec.Code, gvCustCountryRec.Code, PostCode);
            Address := gvCustAddressTxt;
            City := gvCustCityTxt;
            FullAddress := DELCHR(STRSUBSTNO('%1 %2 %3', Address, HouseNo, HouseNoExt), '>', ' ');
            IF Address = '' THEN BEGIN
              MESSAGE(Text007);
              EXIT;
            END;

            IF (PostCode <> '') AND (Address <> '') AND
              ((FullAddress <> gvCustAddressTxt) OR (PostCode <> gvCustPostCodeRec.Code) OR (City <> gvCustCityTxt)) THEN
              IF CONFIRM(Text006, TRUE, FullAddress, PostCode, City) THEN BEGIN
                gvCustAddressTxt := FullAddress;
                gvCustPostCodeRec.Code := PostCode;
                gvCustCityTxt := City;
              END;
          END;

        gvWizzardStepOpt::CreateLocation:
          BEGIN
            HouseNo := NormalizeAddressMgt.DetermineHouseNo(gvLocAddressTxt, HouseNoExt);
            NormalizeAddressMgt.NormalizePostCode(gvLocPostCodeRec.Code, gvLocCountryRec.Code, PostCode);
            IF LocationExists(PostCode, HouseNo, HouseNoExt) THEN
              IF NOT CONFIRM(Text009) THEN
                EXIT;
          END;

        gvWizzardStepOpt::SelectLocation:
          IF gvLocRec."No." = '' THEN BEGIN
            MESSAGE(Text003);
            EXIT;
          END;

        gvWizzardStepOpt::Contractdata:
          BEGIN
            IF gvServContractRec."Starting Date" = 0D THEN BEGIN
              MESSAGE(Text004);
              EXIT;
            END;
            IF (gvServContractRec."Contract Limit" = gvServContractRec."Contract Limit"::Limited) AND
               (gvServContractRec."Ending Date" = 0D)
            THEN BEGIN
              MESSAGE(Text005);
              EXIT;
            END;
         END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE FinishWizard@1100525007();
    BEGIN
      IF gvExistingCustOpt = gvExistingCustOpt::No THEN
        CreateCustomer;
      IF gvExistingLocOpt = gvExistingLocOpt::No THEN
        CreateLocation;
      CreateContract;
      CreateObject;
    END;

    PROCEDURE CreateCustomer@1100525011();
    VAR
      CentralDataManagement@1100525002 : Codeunit 11012010;
      CreateCustomerCentralMgt@1100409000 : Codeunit 11012866;
      Customer@1100525000 : Record 18;
      SalesReceivablesSetup@1100525001 : Record 311;
    BEGIN
      WITH Customer DO BEGIN
        INIT;
        Name := gvCustNametxt;
        "Name 2" := gvCustName2Txt;
        Address :=  gvCustAddressTxt;
        "Address 2" := gvCustAddress2Txt;
        City := gvCustCityTxt;
        "Post Code" := gvCustPostCodeRec.Code;
        "Country/Region Code" := gvCustCountryRec.Code;
        "Phone No." := gvCustPhoneNo;
        "E-Mail" := gvCustEMail;
        IF CentralDataManagement.InsertingCustomerIsAllowed THEN BEGIN
          SalesReceivablesSetup.GET;
          "No. Series" := SalesReceivablesSetup."Customer Nos.";
          INSERT(TRUE);
          CreateCustFromTemplate(gvCustTemplateRec);
          MODIFY;
        END ELSE
          CreateCustomerCentralMgt.CreateCustomerInCentralCompany(Customer, gvCustTemplateRec.Code);
        gvCustRec := Customer;
      END;
    END;

    PROCEDURE CreateContract@1100525012();
    BEGIN
      gvServContractRec.INSERT(TRUE);
      gvServContractRec.VALIDATE("Customer No.", gvCustRec."No.");
      gvServContractRec.VALIDATE("Starting Date Control Period", gvServContractRec."Starting Date");
      gvServContractRec.MODIFY(TRUE);
    END;

    PROCEDURE CreateLocation@1100525013();
    VAR
      lvServLocRec@1100525000 : Record 11012801;
    BEGIN
      WITH lvServLocRec DO BEGIN
        INIT;
        VALIDATE(Description,gvLocDesctxt);
        "Description 2" := gvLocDesc2Txt;
        "Creation Date" := TODAY;
        Address := gvLocAddressTxt;
        "Address 2" := gvLocAddress2Txt;
        City := gvLocCityTxt;
        "Post Code" := gvLocPostCodeRec.Code;
        "Country/Region Code" := gvLocCountryRec.Code;
        "Phone No." := gvLocPhoneNo;
        "E-Mail" := gvLocEMail;
        "Customer No." := gvCustRec."No.";
        "Territory Code" := gvLocTerritory;
        Type := gvLocType;
        INSERT(TRUE);
        VALIDATE("Global Dimension 1 Code", gvLocRec."Global Dimension 1 Code");
        MODIFY(TRUE);
        gvLocRec := lvServLocRec;
      END;
    END;

    PROCEDURE CreateObject@1100525014();
    VAR
      ContractObjectMaintenance@1100525001 : Record 11071692;
      ServiceObject@1100525000 : Record 11071691;
      ContractObject@1100526200 : Record 11071702;
      CommentLine@1100528600 : Record 97;
      ServiceSetup@1100528602 : Record 11012800;
      ContractAmountsbyDate@1100528603 : Record 11071708;
      ObjectSpecificationMgt@1100528601 : Codeunit 11012848;
    BEGIN
      WITH gvTempContrWizRec DO BEGIN
        IF FINDFIRST THEN BEGIN
          REPEAT
            IF gvTempContrWizRec."Standard Object No." <> ''  THEN BEGIN
              ServiceObject.INIT;
              ServiceObject."No." := '';
              ServiceObject.INSERT(TRUE);

              ServiceObject.VALIDATE("Standard Object No.", gvTempContrWizRec."Standard Object No.");
              IF "Service Location No." <> '' THEN
                ServiceObject.VALIDATE("Service Location No.", "Service Location No.")
              ELSE
                ServiceObject.VALIDATE("Service Location No.", gvLocRec."No.");
              ServiceObject.Description := gvTempContrWizRec.Description;
              ServiceObject."Description 2" := gvTempContrWizRec."Description 2";
              ServiceObject."Warranty Starting Date Cust." := "Warranty Starting Date";
              ServiceObject."In use since" := "In use since";
              ServiceObject.Floor := gvTempContrWizRec.Floor;
              ServiceObject.Room := gvTempContrWizRec.Room;
              ServiceObject.Building := gvTempContrWizRec.Building;
              ServiceObject.MODIFY(TRUE);

              ServiceSetup.GET;
              IF gvTempContrWizRec."Year of Manufacture" <> 0 THEN BEGIN
                ServiceSetup.TESTFIELD("Spec. Code Year of Manufact.");
                ObjectSpecificationMgt.SetObjectSpecValue(ServiceObject."No.", ServiceSetup."Spec. Code Year of Manufact.",
                  FORMAT(gvTempContrWizRec."Year of Manufacture"));
              END;
              IF gvTempContrWizRec."Serial No." <> '' THEN BEGIN
                ServiceSetup.TESTFIELD("Spec. Code Serial No.");
                ObjectSpecificationMgt.SetObjectSpecValue(ServiceObject."No.", ServiceSetup."Spec. Code Serial No.",
                  gvTempContrWizRec."Serial No.");
              END;

              IF gvTempContrWizRec.Comment <> '' THEN BEGIN
                CommentLine."Table Name" := CommentLine."Table Name"::ServObject;
                CommentLine."No." := ServiceObject."No.";
                CommentLine."Line No." := 10000;
                CommentLine.Date := TODAY;
                CommentLine.Comment := gvTempContrWizRec.Comment;
                CommentLine.INSERT(TRUE);
              END;

              CLEAR(ContractObject);
              ContractObject.SetDoNotConfirmMaintenanceSchemeCreation(TRUE);
              ContractObject."Service Contract No."  := gvServContractRec."No.";
              ContractObject.VALIDATE("Service Object No.", ServiceObject."No.");
              ContractObject.VALIDATE("Starting Date", gvServContractRec."Starting Date");
              ContractObject.VALIDATE("Ending Date", gvServContractRec."Ending Date");
              ContractObject.VALIDATE("Invoice From", gvServContractRec."Starting Date");
              IF gvTempContrWizRec."Service Package" <> '' THEN
                ContractObject.VALIDATE("Service Package", gvTempContrWizRec."Service Package");
              IF ContractObject."Service Package" = '' THEN
                ContractObject.VALIDATE("Service Package", gvServContractRec."Service Package");
              ContractObject.INSERT(TRUE);

              IF "Price Agreement" <> 0 THEN BEGIN
                ContractAmountsbyDate.INIT;
                ContractAmountsbyDate.Type := ContractAmountsbyDate.Type::"Price Agreement";
                ContractAmountsbyDate."Service Contract No." := gvServContractRec."No.";
                ContractAmountsbyDate."Service Object No." := ServiceObject."No.";
                ContractAmountsbyDate."Index Date" := gvServContractRec."Starting Date";
                ContractAmountsbyDate.VALIDATE("Amount (LCY)", "Price Agreement");
                ContractAmountsbyDate.INSERT(TRUE);
              END;

              //mg.sc, 08-02-12: M33020
              IF gvTempContrWizRec."Starting Date Maintenance" <> 0D THEN BEGIN
                ContractObjectMaintenance.SETRANGE("Service Contract No.", ContractObject."Service Contract No.");
                ContractObjectMaintenance.SETRANGE("Object No.", ContractObject."Service Object No.");
                IF ContractObjectMaintenance.FINDSET THEN
                  REPEAT
                    IF gvTempContrWizRec."Starting Date Maintenance" <> 0D THEN
                      ContractObjectMaintenance.VALIDATE("Starting Date Maintenance", gvTempContrWizRec."Starting Date Maintenance")
                    ELSE
                      ContractObjectMaintenance.VALIDATE("Starting Date Maintenance", ContractObject."Starting Date");
                    ContractObjectMaintenance.MODIFY(TRUE);
                  UNTIL ContractObjectMaintenance.NEXT = 0;
              END;

              IF gvTempContrWizRec."Maintenance Scheme" <> '' THEN BEGIN
                IF NOT ContractObjectMaintenance.GET(
                    gvServContractRec."No.", ServiceObject."No.", gvTempContrWizRec."Maintenance Scheme")
                THEN BEGIN
                  ContractObjectMaintenance.INIT;
                  ContractObjectMaintenance."Service Contract No." := gvServContractRec."No.";
                  ContractObjectMaintenance."Line No." := gvTempContrWizRec."Line No.";
                  ContractObjectMaintenance."Maintenance Scheme" := gvTempContrWizRec."Maintenance Scheme";
                  ContractObjectMaintenance."Service Package" := ContractObject."Service Package";
                  ContractObjectMaintenance."Object No." := ServiceObject."No.";
                  ContractObjectMaintenance."Service Category" := ContractObject."Service Category (Contract)";
                  IF gvTempContrWizRec."Starting Date Maintenance" <> 0D THEN
                    ContractObjectMaintenance.VALIDATE("Starting Date Maintenance", gvTempContrWizRec."Starting Date Maintenance")
                  ELSE
                    ContractObjectMaintenance.VALIDATE("Starting Date Maintenance", ContractObject."Starting Date");
                  ContractObjectMaintenance.INSERT(TRUE);
                END;
              END; //ELSE
      //          ContractObject.FillDefaultMaintScheme(0);
              //mg.ec, 08-02-12: M33020
            END;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE LocationExists@1100528600(IPostCode@1100528600 : Code[20];IHouseNo@1100528601 : Code[30];IHouseNoExt@1100528602 : Code[10]) : Boolean;
    VAR
      ServiceLocation@1100528603 : Record 11012801;
    BEGIN
      ServiceLocation.SETCURRENTKEY("Post Code", "House No.", "House No. Ext.");
      ServiceLocation.SETRANGE("Post Code", IPostCode);
      ServiceLocation.SETRANGE("House No.", IHouseNo);
      ServiceLocation.SETRANGE("House No. Ext.", IHouseNoExt);
      EXIT(NOT ServiceLocation.ISEMPTY);
    END;

    LOCAL PROCEDURE gvCustRecNoOnAfterValidate@19005098();
    BEGIN
      CurrPage.UPDATE(TRUE);
    END;

    LOCAL PROCEDURE gvLocRecNoOnAfterValidate@19017395();
    BEGIN
      CurrPage.UPDATE(TRUE);
    END;

    LOCAL PROCEDURE CalculateContractEndingDate@19040596();
    BEGIN
      gvServContractRec."Ending Date" := 0D;
      IF (gvServContractRec."Starting Date" <> 0D) AND (FORMAT(gvServContractRec."Contract Duration") <> '') THEN
        gvServContractRec."Ending Date" := CALCDATE(gvServContractRec."Contract Duration",gvServContractRec."Starting Date")-1;
    END;

    LOCAL PROCEDURE gvServContractRecContractLimit@19008517();
    BEGIN
      IF gvServContractRec."Contract Limit" = gvServContractRec."Contract Limit"::Unlimited THEN BEGIN
        CLEAR(gvServContractRec."Contract Duration");
        gvServContractRec."Ending Date" := 0D;
      END;
      EnableFields;
    END;

    LOCAL PROCEDURE gvServContractTemplCodeOnAfter@19056389();
    VAR
      ServiceContractTemplate@1100528600 : Record 11071754;
    BEGIN
      ServiceContractTemplate.GET(gvServContractTemplCode);
      gvServContractRec.VALIDATE("Contract Template Code", gvServContractTemplCode);
      EnableFields;
    END;

    LOCAL PROCEDURE NogvExistingCustOptOnValidate@19028987();
    BEGIN
      IF NOT (NewCustomerEnable) THEN
        ERROR(Text666, gvExistingCustOpt);
    END;

    PROCEDURE DetermineLocationData@1100528601();
    VAR
      Contact@1100528601 : Record 5050;
      ShiptoAddress@1100528600 : Record 222;
    BEGIN
      CLEAR(gvLocPostCodeRec);
      CLEAR(gvLocCountryRec);
      IF NOT gvAddressDataFromCustBln THEN BEGIN
        gvLocDesctxt := '';
        gvLocDesc2Txt := '';
        gvLocAddressTxt := '';
        gvLocAddress2Txt := '';
        gvLocCityTxt := '';
        gvLocPhoneNo := '';
        gvLocEMail := '';
        gvLocTerritory := '';
        gvLocType := '';
        EXIT;
      END;
      IF gvExistingCustOpt = gvExistingCustOpt::Yes THEN BEGIN
        IF ShiptoAddress.GET(gvCustRec."No.", AddressCode) THEN BEGIN
          gvLocDesctxt := ShiptoAddress.Name;
          gvLocDesc2Txt := ShiptoAddress."Name 2";
          gvLocAddressTxt := ShiptoAddress.Address;
          gvLocAddress2Txt :=  ShiptoAddress."Address 2";
          gvLocCityTxt := ShiptoAddress.City;
          gvLocPhoneNo := ShiptoAddress."Phone No.";
          gvLocEMail := ShiptoAddress."E-Mail";
          gvLocTerritory := gvCustRec."Territory Code";
          gvLocType := '';
          IF NOT gvLocPostCodeRec.GET(ShiptoAddress."Post Code", ShiptoAddress.City) THEN
            MESSAGE(Text008, ShiptoAddress."Post Code");
          IF gvLocCountryRec.GET(ShiptoAddress."Country/Region Code") THEN;
        END ELSE BEGIN
          AddressCode := '';
          IF Contact.GetContactByCustomer(gvCustRec."No.", Contact, FALSE) AND (Contact."Visit Address" <> '')
          THEN BEGIN
            gvLocDesctxt := Contact.Name;
            gvLocDesc2Txt := Contact."Name 2";
            gvLocAddressTxt := Contact."Visit Address";
            gvLocAddress2Txt :=  Contact."Visit Address 2";
            gvLocCityTxt := Contact."Visit Address City";
            gvLocPhoneNo := Contact."Phone No.";
            gvLocEMail := Contact."E-Mail";
            gvLocTerritory := Contact."Territory Code";
            gvLocType := '';
            IF NOT gvLocPostCodeRec.GET(Contact."Visit Address Post Code", Contact."Visit Address City") THEN
              MESSAGE(Text008, Contact."Visit Address Post Code");
            IF gvLocCountryRec.GET(Contact."Visit Address Country/Region") THEN;
          END ELSE BEGIN
            gvLocDesctxt := gvCustRec.Name;
            gvLocDesc2Txt := gvCustRec."Name 2";
            gvLocAddressTxt := gvCustRec.Address;
            gvLocAddress2Txt :=  gvCustRec."Address 2";
            gvLocCityTxt := gvCustRec.City;
            gvLocPhoneNo := gvCustRec."Phone No.";
            gvLocEMail := gvCustRec."E-Mail";
            gvLocTerritory := gvCustRec."Territory Code";
            gvLocType := '';
            IF NOT gvLocPostCodeRec.GET(gvCustRec."Post Code", gvCustRec.City) THEN
              MESSAGE(Text008, gvCustRec."Post Code");
            IF gvLocCountryRec.GET(gvCustRec."Country/Region Code") THEN;
          END;
        END;
      END ELSE BEGIN
        gvLocDesctxt := gvCustNametxt;
        gvLocDesc2Txt := gvCustName2Txt;
        gvLocAddressTxt := gvCustAddressTxt;
        gvLocAddress2Txt :=  gvCustAddress2Txt;
        gvLocCityTxt := gvCustCityTxt;
        gvLocPostCodeRec := gvCustPostCodeRec;
        gvLocCountryRec := gvCustCountryRec;
        gvLocPhoneNo := gvCustPhoneNo;
        gvLocEMail := gvCustEMail;
        gvLocTerritory := '';
        gvLocType := '';
      END;
    END;

    BEGIN
    {
      4PS,16-01-2019, BC Put all actions InFooterBar for the WebClient. In WebClient no actions in ribbon for a NavigatePage.
    }
    END.
  }
}

