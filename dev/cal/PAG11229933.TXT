OBJECT Page 11229933 Bing Maps Resource Replan
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Bing Maps Ressource umplanen;
               ENU=Bing Maps Replan Resource;
               NLD=Bing Maps herplannen van resource];
    OnInit=BEGIN
             ServiceOrderTableIDText := FORMAT(DATABASE::"Service Order");
             EmployeeTableIDText := FORMAT(DATABASE::"Resource (WOP)");
             ServiceOrderTableIDInt := DATABASE::"Service Order";
             EmployeeTableIDInt := DATABASE::"Resource (WOP)";
           END;

  }
  CONTROLS
  {
    { 1100525000;;Container;
                Name=Container;
                CaptionML=[DEU=Container;
                           ENU=Container;
                           NLD=Container;
                           NOR=Container;
                           SVE=Beh†llare];
                ContainerType=ContentArea }

    { 1100525001;1;Field  ;
                Name=Map;
                CaptionML=[DEU=Karte;
                           ENU=Map;
                           NLD=Kaart];
                ControlAddIn=[Fps.Nav.Addin.BingMaps;PublicKeyToken=024bd013665211e9] }

  }
  CODE
  {
    VAR
      TmpResourceAvailPlanTimeBuff2@1100525000 : TEMPORARY Record 11071976;
      BingMapsHandler@1100525002 : Codeunit 11012485;
      ServiceOrder@1100525003 : Record 11012823;
      StartingTime@1100525004 : Time;
      EndingTime@1100525005 : Time;
      PlanTimeType@1100525006 : 'Daytime,Consignment';
      CalculateTravelTime@1100525007 : Boolean;
      LinkWorkOrders@1100525008 : Boolean;
      PlanSeqNo@1100525009 : ',1,2';
      EmployeeTableIDText@1100525010 : Text[30];
      ServiceOrderTableIDText@1100525011 : Text[30];
      Text001@1100525012 : TextConst 'DEU=Bing Maps konfigurieren.;ENU=Configure Bing Maps.;NLD=Stel Bing Maps in.';
      DisplayServiceOrder@1100525013 : Record 11012823;
      EmployeeTableIDInt@1100525014 : Integer;
      ServiceOrderTableIDInt@1100525015 : Integer;
      ServiceOrderExtension@1100525001 : Record 11071727;

    PROCEDURE setServiceOrderRecord@1100525001(ServiceOrderNo@1100525000 : Code[10]);
    BEGIN
      IF DisplayServiceOrder.GET(ServiceOrderNo) THEN
        IF NOT ServiceOrderExtension.GET(ServiceOrderNo) THEN
          CurrPage.CLOSE;
    END;

    PROCEDURE setNewRecord@1100525004(VAR TmpResourceAvailPlanTimeBuff@1100525000 : TEMPORARY Record 11071976);
    BEGIN
      TmpResourceAvailPlanTimeBuff2.COPY(TmpResourceAvailPlanTimeBuff, TRUE);
    END;

    LOCAL PROCEDURE setEmployeesBasedOnLastLocation@1100525002();
    VAR
      ServiceOrder@1100525000 : Record 11012823;
      ServiceLocation@1100525001 : Record 11012801;
      EmployeeExtension@1100528100 : Record 11229470;
      AddPinUsingPreviousLocation@1100528101 : Boolean;
      ResourceWOP@1100528102 : Record 11229278;
    BEGIN
      IF TmpResourceAvailPlanTimeBuff2.FINDSET THEN
        REPEAT
          IF ServiceOrder.GET(TmpResourceAvailPlanTimeBuff2."Prev. Service Order No.") THEN BEGIN
            TmpResourceAvailPlanTimeBuff2.CALCFIELDS("Resource Name");
            IF ServiceLocation.GET(ServiceOrder."Service Location No.") THEN
              IF (ServiceLocation.Latitude <> '') AND (ServiceLocation.Longitude <> '') THEN
                  CurrPage.Map.addPinToMapLatLng(TmpResourceAvailPlanTimeBuff2."Resource No.",
                    TmpResourceAvailPlanTimeBuff2."Resource Name", EmployeeTableIDText,
                    TmpResourceAvailPlanTimeBuff2."Resource Name", '', ServiceLocation.Latitude, ServiceLocation.Longitude)
              ELSE
                CurrPage.Map.addPinToMapCode(TmpResourceAvailPlanTimeBuff2."Resource No.",
                  TmpResourceAvailPlanTimeBuff2."Resource Name", EmployeeTableIDText,
                  TmpResourceAvailPlanTimeBuff2."Resource Name", '', ServiceLocation."Country/Region Code" +
                    ' ' + ServiceLocation.City + ' ' + ServiceLocation.Address)
          END
            ELSE
              IF (TmpResourceAvailPlanTimeBuff2."Prev. Address" <> '') AND (TmpResourceAvailPlanTimeBuff2."Prev. Post Code" <> '')
                    AND (TmpResourceAvailPlanTimeBuff2."Prev. City" <> '') THEN
                BEGIN
                  TmpResourceAvailPlanTimeBuff2.CALCFIELDS("Resource Name");
                  AddPinUsingPreviousLocation := TRUE;

                  IF ResourceWOP.GET(TmpResourceAvailPlanTimeBuff2."Resource No.") THEN
                    IF ResourceWOP.Type = ResourceWOP.Type::Employee THEN
                      IF EmployeeExtension.GET(ResourceWOP."Source No.") THEN BEGIN
                        IF (EmployeeExtension.Longitude <> '') AND (EmployeeExtension.Latitude <> '') THEN BEGIN
                          AddPinUsingPreviousLocation := FALSE;
                          CurrPage.Map.addPinToMapLatLng(
                            TmpResourceAvailPlanTimeBuff2."Resource No.",
                            TmpResourceAvailPlanTimeBuff2."Resource Name", EmployeeTableIDText,
                            TmpResourceAvailPlanTimeBuff2."Resource Name", '',
                            EmployeeExtension.Latitude, EmployeeExtension.Longitude)
                        END;
                      END;

                  IF AddPinUsingPreviousLocation THEN
                    CurrPage.Map.addPinToMapCode(
                      TmpResourceAvailPlanTimeBuff2."Resource No.",
                      TmpResourceAvailPlanTimeBuff2."Resource Name", EmployeeTableIDText,
                      TmpResourceAvailPlanTimeBuff2."Resource Name", '',
                      TmpResourceAvailPlanTimeBuff2."Prev. Post Code" + ' ' +
                      TmpResourceAvailPlanTimeBuff2."Prev. City" + ' ' +
                      TmpResourceAvailPlanTimeBuff2."Prev. Address");
                END
        UNTIL TmpResourceAvailPlanTimeBuff2.NEXT = 0;
    END;

    PROCEDURE setReplanOptions@1100525012(parServiceOrder@1100525006 : Record 11012823;parStartingTime@1100525005 : Time;parEndingTime@1100525004 : Time;parPlanTimeType@1100525003 : 'Daytime,Consignment';parCalculateTravelTime@1100525002 : Boolean;parLinkWorkOrders@1100525001 : Boolean;parPlanSeqNo@1100525000 : ',1,2');
    BEGIN
      ServiceOrder.SETFILTER("No.", parServiceOrder."No.");
      StartingTime := parStartingTime;
      EndingTime := parEndingTime;
      PlanTimeType := parPlanTimeType;
      CalculateTravelTime := parCalculateTravelTime;
      LinkWorkOrders := parLinkWorkOrders;
      PlanSeqNo := parPlanSeqNo;
    END;

    LOCAL PROCEDURE replanAction@1100525000(title@1100525007 : Code[20]);
    VAR
      PlanningAgreement@1100525006 : Record 11071729;
      ServiceOrderPlanManagement@1100525005 : Codeunit 11012868;
      PlanType@1100525004 : 'At Start,At End,Custom';
      CustomStartingTime@1100525003 : Time;
      FirstPossibleStartingTime@1100525002 : Time;
      LastPossibleEndingTime@1100525001 : Time;
      ExportToFSA@1100525000 : Boolean;
    BEGIN
      TmpResourceAvailPlanTimeBuff2.SETFILTER("Resource No.", title);
      TmpResourceAvailPlanTimeBuff2.FINDSET;
      TmpResourceAvailPlanTimeBuff2.CALCFIELDS("Resource Name");
      ServiceOrderPlanManagement.TestReplanAllowed(ServiceOrder);
      ServiceOrderPlanManagement.CheckMultipleWorkOrdersPerSO(ServiceOrder);
      ServiceOrderPlanManagement.AskShiftedStartTime(ServiceOrder, TmpResourceAvailPlanTimeBuff2, PlanType, CustomStartingTime, ExportToFSA);
      IF TmpResourceAvailPlanTimeBuff2."Planning Agreement Code" = '' THEN BEGIN
        FirstPossibleStartingTime := StartingTime;
        LastPossibleEndingTime := EndingTime;
      END ELSE BEGIN
        PlanningAgreement.SETRANGE(Code, TmpResourceAvailPlanTimeBuff2."Planning Agreement Code");
        PlanningAgreement.SETFILTER(Type, '%1|%2', PlanningAgreement.Type::Plan, PlanningAgreement.Type::Both);
        IF PlanningAgreement.FINDFIRST THEN BEGIN
          FirstPossibleStartingTime := PlanningAgreement."Starting Time";
          LastPossibleEndingTime := PlanningAgreement."Ending Time";
        END;
      END;
      ServiceOrderPlanManagement.ReplanServiceOrdersAddParams(ExportToFSA);
      ServiceOrderPlanManagement.ReplanServiceOrders(
      ServiceOrder, TmpResourceAvailPlanTimeBuff2."Resource No.", TmpResourceAvailPlanTimeBuff2."Plan Date",
      TmpResourceAvailPlanTimeBuff2."Plan Starting Time", TmpResourceAvailPlanTimeBuff2."Plan Ending Time",
      FirstPossibleStartingTime, LastPossibleEndingTime, PlanType, CustomStartingTime,
      PlanTimeType, CalculateTravelTime, LinkWorkOrders, PlanSeqNo, FALSE);
    END;

    LOCAL PROCEDURE addServiceOrderToMap@1100525015();
    VAR
      titleValue@1100525000 : Text;
      descriptionValue@1100525001 : Text;
      ReturnType@1100525002 : 'NAV,FSA';
    BEGIN
      titleValue := BingMapsHandler.GetValueFromField(DisplayServiceOrder.RECORDID, DATABASE::"Service Order",
        BingMapsHandler.GetFieldIDForTitle(ServiceOrderTableIDInt, ReturnType::NAV));
      descriptionValue := BingMapsHandler.BuildDescription(DisplayServiceOrder.RECORDID, ServiceOrderTableIDInt, ReturnType::NAV);

      IF (ServiceOrderExtension.Latitude <> '') AND (ServiceOrderExtension.Longitude <> '') THEN
          CurrPage.Map.addPinToMapLatLng(ServiceOrder."No.", titleValue, ServiceOrderTableIDText,
            descriptionValue, BingMapsHandler.GetColour(DisplayServiceOrder), ServiceOrderExtension.Latitude, ServiceOrderExtension.Longitude)
    END;

    EVENT Map@-1100525001::ControlAddInReady@20();
    VAR
      BingMapsSetup@1100525000 : Page 11127140;
    BEGIN
      IF BingMapsHandler.SetupIsDoneAndEnabled THEN
        CurrPage.Map.setApiKey(BingMapsHandler.GetApiKey(CurrPage.OBJECTID(FALSE)))
      ELSE
        BEGIN
          MESSAGE(Text001);
          BingMapsSetup.RUN;
          CurrPage.CLOSE;
        END;
    END;

    EVENT Map@-1100525001::MapLoaded@21();
    BEGIN
      CurrPage.Map.setExtraAction('Plan');
      CurrPage.Map.allowActionForType('Plan', EmployeeTableIDText);
      IF BingMapsHandler.DisplayAsPin(ServiceOrderTableIDInt) THEN
        CurrPage.Map.displayAsPin(ServiceOrderTableIDText);

      setEmployeesBasedOnLastLocation;
      addServiceOrderToMap;
    END;

    EVENT Map@-1100525001::PinAdded@22(no@1100528101 : Text;type@1100528100 : Text);
    BEGIN
      CurrPage.Map.setBestView;
    END;

    EVENT Map@-1100525001::AddLocationToSelection@23(no@1100528101 : Text;type@1100528100 : Text);
    BEGIN
    END;

    EVENT Map@-1100525001::RemoveLocationFromSelection@24(no@1100528101 : Text;type@1100528100 : Text);
    BEGIN
    END;

    EVENT Map@-1100525001::DirectionsReady@25(distance@1100528101 : Text;time@1100528100 : Text);
    BEGIN
    END;

    EVENT Map@-1100525001::DirectionsError@26();
    BEGIN
    END;

    EVENT Map@-1100525001::LocationUpdated@27(no@1100528103 : Text;type@1100528102 : Text;lat@1100528101 : Text;lng@1100528100 : Text);
    BEGIN
      EVALUATE(EmployeeTableIDText, type);
      BingMapsHandler.UpdateLocation(no, EmployeeTableIDInt, lat, lng);
    END;

    EVENT Map@-1100525001::LocationAdded@28(no@1100528103 : Text;type@1100528102 : Text;lat@1100528101 : Text;lng@1100528100 : Text);
    BEGIN
    END;

    EVENT Map@-1100525001::LocationRemoved@29(no@1100528101 : Text;type@1100528100 : Text);
    BEGIN
    END;

    EVENT Map@-1100525001::ExtraAction@30(action@1100528102 : Text;no@1100528101 : Text;type@1100528100 : Text);
    BEGIN
      IF action = 'Plan' THEN
        replanAction(no);
    END;

    EVENT Map@-1100525001::ZoomLevel@31(level@1100528100 : Text);
    BEGIN
    END;

    EVENT Map@-1100525001::RegisterEvent@32(no@1100528102 : Text;type@1100528101 : Text;eventname@1100528100 : Text);
    BEGIN
      BingMapsHandler.WriteToBingMapsLogUsingQuery(no, CurrPage.OBJECTID(FALSE), eventname, type);
    END;

    BEGIN
    END.
  }
}

