OBJECT Table 11071753 Service Order Inspection Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               IF "Line No." = 0 THEN
                 "Line No." := GetLastLineNo + 10000;
             END;

    OnDelete=BEGIN
               DeleteWorkOrderInspectionLines();
             END;

    CaptionML=[ENU=Service Order Inspection Line;
               NOR=Inspeksjonsrad for serviceordre;
               SVE=Inspektionsrad f”r serviceorder];
    LookupPageID=Page11125261;
    DrillDownPageID=Page11125261;
  }
  FIELDS
  {
    { 10  ;   ;Service Order No.   ;Code20        ;TableRelation="Service Order";
                                                   CaptionML=[ENU=Service Order No.;
                                                              NOR=Serviceordrenr.;
                                                              SVE=Serviceordernr];
                                                   Editable=No }
    { 20  ;   ;Service Object No.  ;Code20        ;TableRelation=Service-Object;
                                                   CaptionML=[ENU=Service Object No.;
                                                              NOR=Serviceobjektnr;
                                                              SVE=Serviceobjektnr];
                                                   Editable=No }
    { 30  ;   ;Maintenance Scheme Code;Code20     ;TableRelation=IF (Inspection Type=FILTER(<>Plant)) "Maintenance Scheme"
                                                                 ELSE IF (Inspection Type=CONST(Plant)) "SO Plant Maintenance Scheme"."Maintenance Scheme" WHERE (Service Order No.=FIELD(Service Order No.));
                                                   CaptionML=[ENU=Maintenance Scheme Code;
                                                              NOR=Kode for vedlikeholdsskjema;
                                                              SVE=Kod f”r underh†llsschema];
                                                   Editable=No }
    { 40  ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              NOR=Linjenr.;
                                                              SVE=Radnr];
                                                   Editable=No }
    { 50  ;   ;Inspection Type     ;Option        ;CaptionML=[ENU=Inspection Type;
                                                              NOR=Inspeksjonstype;
                                                              SVE=Inspektionstyp];
                                                   OptionCaptionML=ENU=Base Inspection List,Standard Object,Contract Object,Standard Object (Calls),Object (Calls),,,,,,,Service Order Object,Plant;
                                                   OptionString=Base Inspection List,Standard Object,Contract Object,Standard Object (Calls),Object (Calls),,,,,,,Service Order Object,Plant;
                                                   Editable=No }
    { 60  ;   ;Service Contract No.;Code20        ;TableRelation=Service-Contract;
                                                   CaptionML=[ENU=Service Contract No.;
                                                              NOR=Servicekontraktnr;
                                                              SVE=Servicekontraktnr];
                                                   Editable=No }
    { 70  ;   ;Code                ;Code20        ;TableRelation=IF (Inspection Type=CONST(Base Inspection List)) "Base Service Inspection List"
                                                                 ELSE IF (Inspection Type=CONST(Standard Object)) "Standard Object"
                                                                 ELSE IF (Inspection Type=CONST(Contract Object)) "Contract Object"."Service Object No." WHERE (Service Contract No.=FIELD(Service Contract No.))
                                                                 ELSE IF (Inspection Type=CONST("Standard Object (Calls)")) "Standard Object"
                                                                 ELSE IF (Inspection Type=CONST("Object (Calls)")) Service-Object
                                                                 ELSE IF (Inspection Type=CONST(Plant)) "Plant Number".No. WHERE (Plant Type=FIELD(Plant Type));
                                                   CaptionML=[ENU=Code;
                                                              NOR=Kode;
                                                              SVE=Kod];
                                                   Editable=No }
    { 75  ;   ;Belongs to Scheme   ;Code20        ;TableRelation="Maintenance Scheme";
                                                   CaptionML=[ENU=Belongs to Scheme;
                                                              NOR=H›rer til skjema;
                                                              SVE=Tillh”r schema];
                                                   Editable=No }
    { 80  ;   ;Index Date          ;Date          ;CaptionML=[ENU=Index Date;
                                                              NOR=Indeksdato;
                                                              SVE=Indexdatum];
                                                   Editable=No }
    { 85  ;   ;Inspection Line No. ;Integer       ;CaptionML=[ENU=Inspection Line No.;
                                                              NOR=Inspeksjonsrad nr.;
                                                              SVE=Inspektionsradnr];
                                                   Editable=No }
    { 90  ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                IF (xRec.Type <> Type) AND (Type = Type::Group) THEN BEGIN
                                                                  "Field Type" := "Field Type"::" ";
                                                                  "Unit Of Measure" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              NOR=Radtype;
                                                              SVE=Typ];
                                                   OptionCaptionML=[ENU=Group,Line;
                                                                    NOR=Gruppe,Rad;
                                                                    SVE=Grupp,Rad];
                                                   OptionString=Group,Line;
                                                   Editable=No }
    { 100 ;   ;Inspection Code     ;Code20        ;TableRelation=IF (Type=CONST(Group),
                                                                     Inspection Type=FILTER(<Plant)) "Service Inspection Group"
                                                                     ELSE IF (Type=CONST(Line),
                                                                              Inspection Type=FILTER(<Plant)) "Base Service Inspection Line"
                                                                              ELSE IF (Type=CONST(Group),
                                                                                       Inspection Type=CONST(Plant)) "Plant Inspection Group"
                                                                                       ELSE IF (Type=CONST(Line),
                                                                                                Inspection Type=CONST(Plant)) "Base Plant Inspection Line";
                                                   CaptionML=[ENU=Inspection Code;
                                                              NOR=Inspeksjonskode;
                                                              SVE=Inspektionskod];
                                                   Editable=No }
    { 110 ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning];
                                                   Editable=No }
    { 120 ;   ;Field Type          ;Option        ;OnValidate=BEGIN
                                                                IF "Field Type" = "Field Type"::" " THEN
                                                                  TESTFIELD(Type, Type::Group);

                                                                IF xRec."Field Type" <> "Field Type" THEN
                                                                  EVALUATE(Value, '');
                                                              END;

                                                   CaptionML=[ENU=Field Type;
                                                              NOR=Field Type;
                                                              SVE=Field Type];
                                                   OptionCaptionML=[ENU="Date,Value,Text,Option,Yes/No,,,,, ";
                                                                    SVE="Datum,V„rde,Text,Alternativ,Ja/Nej,,,,, "];
                                                   OptionString=[Date,Value,Text,Option,Yes/No,,,,, ];
                                                   Editable=No }
    { 130 ;   ;Value               ;Text80        ;OnValidate=BEGIN
                                                                EvaluateValue;
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF LookupValue(Value) THEN
                                                                VALIDATE(Value);
                                                            END;

                                                   CaptionML=[ENU=Value;
                                                              NOR=Verdi;
                                                              SVE=V„rde] }
    { 131 ;   ;Value (Date)        ;Date          ;OnValidate=BEGIN
                                                                Value := FORMAT("Value (Date)");
                                                              END;

                                                   CaptionML=ENU=Value (Date }
    { 132 ;   ;Value (Value)       ;Decimal       ;OnValidate=BEGIN
                                                                Value := FORMAT("Value (Value)", 0, 1);
                                                              END;

                                                   CaptionML=[ENU=Value (Value);
                                                              NOR=Verdi (Verdi);
                                                              SVE=V„rde (v„rde)];
                                                   BlankZero=Yes }
    { 140 ;   ;Unit Of Measure     ;Code10        ;TableRelation="Unit of Measure";
                                                   CaptionML=[ENU=Unit Of Measure;
                                                              NOR=Enhet;
                                                              SVE=Enhet];
                                                   Editable=No }
    { 150 ;   ;Inspection Group Code;Code10       ;TableRelation=IF (Inspection Type=FILTER(<Plant)) "Service Inspection Group"
                                                                 ELSE IF (Inspection Type=CONST(Plant)) "Plant Inspection Group";
                                                   CaptionML=[ENU=Inspection Group Code;
                                                              NOR=Inspeksjonsguppekode;
                                                              SVE=Inspektionsgruppskod];
                                                   Editable=No }
    { 160 ;   ;Mandatory           ;Boolean       ;CaptionML=[ENU=Mandatory;
                                                              NOR=Obligatorisk;
                                                              SVE=Obligatoriskt];
                                                   Editable=No }
    { 170 ;   ;Lower Value         ;Decimal       ;OnValidate=BEGIN
                                                                IF "Lower Value" <> 0 THEN
                                                                  TESTFIELD("Field Type", "Field Type"::Value);
                                                                TestUpperAndLowerValue;
                                                              END;

                                                   CaptionML=ENU=Lower Value;
                                                   BlankZero=Yes }
    { 180 ;   ;Upper Value         ;Decimal       ;OnValidate=BEGIN
                                                                IF "Upper Value" <> 0 THEN
                                                                  TESTFIELD("Field Type", "Field Type"::Value);
                                                                TestUpperAndLowerValue;
                                                              END;

                                                   CaptionML=ENU=Upper Value;
                                                   BlankZero=Yes }
    { 200 ;   ;Depending Condition ;Text250       ;CaptionML=ENU=Depending Condition;
                                                   Editable=No }
    { 210 ;   ;Dependency Effect   ;Option        ;CaptionML=ENU=Dependency Effect;
                                                   OptionCaptionML=ENU=" ,Enable Line,Disable Line";
                                                   OptionString=[ ,Enable Line,Disable Line];
                                                   Editable=No }
    { 220 ;   ;Id                  ;GUID          ;CaptionML=[ENU=Id;
                                                              SVE=ID];
                                                   Editable=No }
    { 230 ;   ;Depending on Id     ;Text50        ;CaptionML=ENU=Depending on Id;
                                                   Editable=No }
    { 250 ;   ;Comment             ;Text100       ;CaptionML=[ENU=Comment;
                                                              NOR=Kommentar;
                                                              SVE=Kommentar] }
    { 260 ;   ;Belongs to Base Insp. List;Code20  ;TableRelation="Base Service Inspection List";
                                                   CaptionML=ENU=Belongs to Base Inspection List }
    { 270 ;   ;Plant Type          ;Code20        ;TableRelation="Plant Type";
                                                   CaptionML=[ENU=Plant Type;
                                                              NOR=Maskintype;
                                                              SVE=Maskintyp] }
    { 280 ;   ;Description 2       ;Text50        ;CaptionML=[ENU=Description 2;
                                                              NOR=Beskrivelse 2;
                                                              SVE=Beskrivning 2];
                                                   Editable=No }
    { 300 ;   ;Dependency Condition Decimal 1;Decimal;
                                                   CaptionML=ENU=Dependency Condition Decimal 1 }
    { 310 ;   ;Dependency Condition Decimal 2;Decimal;
                                                   CaptionML=ENU=Dependency Condition Decimal 2 }
    { 320 ;   ;Dependency Condition Date 1;Date   ;CaptionML=ENU=Dependency Condition Date 1 }
    { 330 ;   ;Dependency Condition Date 2;Date   ;CaptionML=ENU=Dependency Condition Date 2 }
    { 340 ;   ;Dependency Condition Operation;Text30;
                                                   CaptionML=ENU=Dependency Condition Operation }
  }
  KEYS
  {
    {    ;Service Order No.,Service Object No.,Maintenance Scheme Code,Line No.;
                                                   Clustered=Yes }
    {    ;Service Order No.,Service Object No.,Maintenance Scheme Code,Inspection Group Code,Line No. }
    {    ;Service Object No.,Service Order No.,Line No. }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1100528600 : TextConst 'ENU=Option Value %1 not found;NOR=Alternativverdi %1 ikke funnet;SVE=Alternativv„rde %1 hittades inte';
      Text002@1100528601 : TextConst 'ENU=t;NOR=t;SVE=t';
      Text003@1100528602 : TextConst 'ENU=%1 must exceed %2;NOR=%1 m† overstige %2;SVE=%1 m†ste ”verskrida %2';

    PROCEDURE EvaluateValue@1100528600();
    VAR
      DummyDate@1100528600 : Date;
      DummyDecimal@1100528601 : Decimal;
    BEGIN
      "Value (Date)" := 0D;
      "Value (Value)" := 0;
      IF Value = '' THEN EXIT;
      CASE "Field Type" OF
        "Field Type"::Date:
          BEGIN
            IF LOWERCASE(Value) = Text002 THEN BEGIN
              Value := FORMAT(TODAY);
              "Value (Date)" := TODAY;
            END ELSE BEGIN
              EVALUATE(DummyDate, Value);
              Value := FORMAT(DummyDate);
              "Value (Date)" := DummyDate;
            END;
          END;
        "Field Type"::Value:
          BEGIN
            EVALUATE(DummyDecimal, Value);
            Value := FORMAT(DummyDecimal, 0, 1);
            "Value (Value)" := DummyDecimal;
          END;
        "Field Type"::Text:;
        "Field Type"::Option,
        "Field Type"::"Yes/No":
          Value := CheckOptionValue;
      END;
    END;

    PROCEDURE CheckOptionValue@1100528603() : Text[80];
    VAR
      BaseServiceInspectionOption@1100528600 : Record 11071749;
      BasePlantInspectionOption@1100528500 : Record 11072681;
    BEGIN
      IF "Inspection Type" <> "Inspection Type"::Plant THEN BEGIN
        EXIT(TryGetBaseServiceOptionValue("Inspection Code", Value));
      END ELSE BEGIN
        BasePlantInspectionOption.CHANGECOMPANY(GetPlantCompany);
        BasePlantInspectionOption.SETRANGE("Base Inspection Line Code", "Inspection Code");
        BasePlantInspectionOption.SETRANGE(Description, Value);
        IF BasePlantInspectionOption.FINDFIRST THEN BEGIN
          EXIT(BasePlantInspectionOption.Description);
        END;
        BasePlantInspectionOption.SETFILTER(Description, '@' + Value + '*');
        IF BasePlantInspectionOption.COUNT = 1 THEN BEGIN
          BasePlantInspectionOption.FINDFIRST;
          EXIT(BasePlantInspectionOption.Description);
        END;
        ERROR(Text001, Value);
      END;
    END;

    PROCEDURE TryGetBaseServiceOptionValue@1100528102(BaseInspectionLineCode@1100528101 : Code[10];DescriptionValue@1100528102 : Text[50]) : Text[80];
    VAR
      BaseServiceInspectionOption@1100528100 : Record 11071749;
    BEGIN
      BaseServiceInspectionOption.SETRANGE("Base Inspection Line Code", BaseInspectionLineCode);
      BaseServiceInspectionOption.SETRANGE(Description, DescriptionValue);
      IF BaseServiceInspectionOption.FINDFIRST THEN BEGIN
        EXIT(BaseServiceInspectionOption.Description);
      END;
      BaseServiceInspectionOption.SETFILTER(Description, '@' + DescriptionValue + '*');
      IF BaseServiceInspectionOption.COUNT = 1 THEN BEGIN
        BaseServiceInspectionOption.FINDFIRST;
        EXIT(BaseServiceInspectionOption.Description);
      END;
      ERROR(Text001, Value);
    END;

    PROCEDURE GetOptionDescriptionFromCode@1210190000(OptionCode@1210190000 : Code[10]) : Text[80];
    VAR
      BaseServiceInspectionOption@1100528600 : Record 11071749;
      BasePlantInspectionOption@1100528500 : Record 11072681;
    BEGIN
      IF "Inspection Type" <> "Inspection Type"::Plant THEN BEGIN
        BaseServiceInspectionOption.SETRANGE("Base Inspection Line Code", "Inspection Code");
        BaseServiceInspectionOption.SETRANGE(Code, OptionCode);
        IF BaseServiceInspectionOption.FINDFIRST THEN
          EXIT(BaseServiceInspectionOption.Description)
        ELSE
          EXIT(OptionCode);
      END ELSE BEGIN
        BasePlantInspectionOption.CHANGECOMPANY(GetPlantCompany);
        BasePlantInspectionOption.SETRANGE("Base Inspection Line Code", "Inspection Code");
        BasePlantInspectionOption.SETRANGE(Code, OptionCode);
        IF BasePlantInspectionOption.FINDFIRST THEN
          EXIT(BasePlantInspectionOption.Description)
        ELSE
          EXIT(OptionCode);
      END;
    END;

    PROCEDURE GetLastLineNo@1100528601() : Integer;
    VAR
      ServiceOrderInspectionLine@1100528600 : Record 11071753;
    BEGIN
      ServiceOrderInspectionLine := Rec;
      ServiceOrderInspectionLine.SETRECFILTER;
      ServiceOrderInspectionLine.SETRANGE("Line No.");
      IF ServiceOrderInspectionLine.FINDLAST THEN
        EXIT(ServiceOrderInspectionLine."Line No.");
    END;

    PROCEDURE ShowDocuments@1100528602();
    VAR
      DocumentFilters@1100528601 : Codeunit 11012432;
      RecRef@1100528600 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Rec);
      DocumentFilters.CreateTempFilterAndExecute1(RecRef, '', FALSE, FALSE);
    END;

    PROCEDURE GetNoOfDocuments@1100525000() : Integer;
    VAR
      DocumentLinkManagement@1100525001 : Codeunit 11012401;
      RecRef@1100525000 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Rec);
      EXIT(DocumentLinkManagement.GetInfo(RecRef))
    END;

    PROCEDURE GetNoOfDocumentsText@1100528604() : Text[30];
    VAR
      NoOfDocuments@1100528600 : Integer;
    BEGIN
      IF Type = Type::Line THEN
        NoOfDocuments := GetNoOfDocuments
      ELSE
        NoOfDocuments := 0;
      IF NoOfDocuments > 0 THEN
        EXIT(STRSUBSTNO('[%1]', NoOfDocuments));
    END;

    PROCEDURE DocumentsExists@1100525001() : Boolean;
    BEGIN
      EXIT(GetNoOfDocuments() > 0);
    END;

    LOCAL PROCEDURE TestUpperAndLowerValue@1100528607();
    BEGIN
      IF ("Lower Value" = 0) OR ("Upper Value" = 0) THEN
        EXIT;
      IF ("Upper Value" <> 0) AND ("Upper Value" < "Lower Value") THEN
        ERROR(Text003, FIELDCAPTION("Upper Value"), FIELDCAPTION("Lower Value"));
    END;

    PROCEDURE GetValue@1100528605() : Text;
    BEGIN
      CASE "Field Type" OF
        "Field Type"::Date:
          EXIT(FORMAT("Value (Date)"));
        "Field Type"::Value:
          IF Value = '' THEN
            EXIT('')
          ELSE
            EXIT(FORMAT("Value (Value)", 0, 1));
      ELSE
        EXIT(Value);
      END;
    END;

    PROCEDURE LookupValue@1100525002(VAR Value@1100525002 : Text) : Boolean;
    VAR
      BaseServiceInspectionOption@1100525001 : Record 11071749;
      BaseServiceInspectionOptionPAGE@1100525000 : Page 11125256;
      BasePlantInspectionOption@1100528500 : Record 11072681;
      BasePlantInspectionOptions@1100528501 : Page 11229865;
    BEGIN
      IF "Inspection Type" <> "Inspection Type"::Plant THEN BEGIN
        IF "Field Type" IN ["Field Type"::Option, "Field Type"::"Yes/No"] THEN BEGIN
          BaseServiceInspectionOption.SETRANGE("Base Inspection Line Code", "Inspection Code");
          BaseServiceInspectionOptionPAGE.SETTABLEVIEW(BaseServiceInspectionOption);
          BaseServiceInspectionOptionPAGE.EDITABLE := FALSE;
          BaseServiceInspectionOptionPAGE.LOOKUPMODE := TRUE;
          IF BaseServiceInspectionOptionPAGE.RUNMODAL = ACTION::LookupOK THEN BEGIN
            BaseServiceInspectionOptionPAGE.GETRECORD(BaseServiceInspectionOption);
            Value := BaseServiceInspectionOption.Description;
            EXIT(TRUE);
          END;
        END;
      END ELSE BEGIN
        IF "Field Type" IN ["Field Type"::Option, "Field Type"::"Yes/No"] THEN BEGIN
          BasePlantInspectionOption.CHANGECOMPANY(GetPlantCompany);
          BasePlantInspectionOption.SETRANGE("Base Inspection Line Code", "Inspection Code");
          BasePlantInspectionOptions.SETTABLEVIEW(BasePlantInspectionOption);
          BasePlantInspectionOptions.EDITABLE := FALSE;
          BasePlantInspectionOptions.LOOKUPMODE := TRUE;
          IF BasePlantInspectionOptions.RUNMODAL = ACTION::LookupOK THEN BEGIN
            BasePlantInspectionOptions.GETRECORD(BasePlantInspectionOption);
            Value := BasePlantInspectionOption.Description;
            EXIT(TRUE);
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE DeleteWorkOrderInspectionLines@1100526000();
    VAR
      WorkOrder@1100526001 : Record 11229279;
      WorkOrderInspectionLine@1100526000 : Record 11072558;
    BEGIN
      WorkOrder.SETRANGE("Source Company", CURRENTCOMPANY);
      WorkOrder.SETRANGE("Source Type", WorkOrder."Source Type"::ServiceOrder);
      WorkOrder.SETRANGE("Source No.", "Service Order No.");
      IF WorkOrder.FINDSET THEN
        REPEAT
          WorkOrderInspectionLine.SETRANGE("Work Order No.", WorkOrder."No.");
          WorkOrderInspectionLine.SETRANGE("Service Object No.", "Service Object No.");
          WorkOrderInspectionLine.SETRANGE("Maintenance Scheme Code", "Maintenance Scheme Code");
          WorkOrderInspectionLine.SETRANGE("Inspection Type", "Inspection Type");
          WorkOrderInspectionLine.SETRANGE(Type, Type);
          WorkOrderInspectionLine.SETRANGE("Inspection Code", "Inspection Code");
          WorkOrderInspectionLine.SETRANGE("Inspection Group Code", "Inspection Group Code");
          WorkOrderInspectionLine.DELETEALL;
        UNTIL WorkOrder.NEXT = 0;
    END;

    LOCAL PROCEDURE GetPlantCompany@1100529000() : Text;
    VAR
      ServiceOrder@1100529000 : Record 11012823;
    BEGIN
      IF "Service Order No." <> '' THEN BEGIN
        IF ServiceOrder.GET("Service Order No.") THEN BEGIN
          IF (ServiceOrder."Plant Company" <> '') AND (ServiceOrder."Plant Company" <> COMPANYNAME) THEN
            EXIT(ServiceOrder."Plant Company");
        END;
      END;
      EXIT(COMPANYNAME);
    END;

    PROCEDURE IsLineEditableBasedOnDependency@1100528106(DependingOnServiceOrderInspectionLine@1100528101 : Record 11071753;CurrentServiceOrderInspectionLine@1100528100 : Record 11071753) : Boolean;
    BEGIN
      CASE DependingOnServiceOrderInspectionLine."Field Type" OF
        "Field Type"::"Yes/No", "Field Type"::Option:
          EXIT(IsLineEditableBasedOnOptionDependency(DependingOnServiceOrderInspectionLine, CurrentServiceOrderInspectionLine));
        "Field Type"::Value:
          EXIT(IsLineEditableBasedOnValueDependency(DependingOnServiceOrderInspectionLine, CurrentServiceOrderInspectionLine));
        "Field Type"::Date:
          EXIT(IsLineEditableBasedOnDateDependency(DependingOnServiceOrderInspectionLine, CurrentServiceOrderInspectionLine));
      ELSE
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE IsLineEditableBasedOnOptionDependency@1100528104(DependingOnServiceOrderInspectionLine@1100528101 : Record 11071753;CurrentServiceOrderInspectionLine@1100528100 : Record 11071753) : Boolean;
    BEGIN
      CASE CurrentServiceOrderInspectionLine."Dependency Effect" OF
        "Dependency Effect"::"Enable Line":
          EXIT(DependingOnServiceOrderInspectionLine.Value = CurrentServiceOrderInspectionLine."Depending Condition");
        "Dependency Effect"::"Disable Line":
          EXIT(DependingOnServiceOrderInspectionLine.Value <> CurrentServiceOrderInspectionLine."Depending Condition");
      END;
    END;

    LOCAL PROCEDURE IsLineEditableBasedOnValueDependency@1100528101(DependingOnServiceOrderInspectionLine@1100528102 : Record 11071753;CurrentServiceOrderInspectionLine@1100528100 : Record 11071753) : Boolean;
    VAR
      ServiceOrderInspectionLine@1100528101 : Record 11071753;
      NumberFilter@1100528700 : Text;
      DateDecimalFilterParser@1100528701 : Codeunit 11012894;
    BEGIN
      NumberFilter := DateDecimalFilterParser.DecimalFilterToText(
        CurrentServiceOrderInspectionLine."Dependency Condition Decimal 1",
        CurrentServiceOrderInspectionLine."Dependency Condition Operation",
        CurrentServiceOrderInspectionLine."Dependency Condition Decimal 2");

      ServiceOrderInspectionLine.SETFILTER("Value (Value)", NumberFilter);
      EXIT(IsLineEditableBasedOnFilter(DependingOnServiceOrderInspectionLine, CurrentServiceOrderInspectionLine, ServiceOrderInspectionLine));
    END;

    LOCAL PROCEDURE IsLineEditableBasedOnDateDependency@1100528103(DependingOnServiceOrderInspectionLine@1100528102 : Record 11071753;CurrentServiceOrderInspectionLine@1100528100 : Record 11071753) : Boolean;
    VAR
      ServiceOrderInspectionLine@1100528101 : Record 11071753;
      DateFilter@1100528700 : Text;
      DateDecimalFilterParser@1100528701 : Codeunit 11012894;
    BEGIN
      DateFilter := DateDecimalFilterParser.DateFilterToText(
        CurrentServiceOrderInspectionLine."Dependency Condition Date 1",
        CurrentServiceOrderInspectionLine."Dependency Condition Operation",
        CurrentServiceOrderInspectionLine."Dependency Condition Date 2");

      ServiceOrderInspectionLine.SETFILTER("Value (Date)", DateFilter);
      EXIT(IsLineEditableBasedOnFilter(DependingOnServiceOrderInspectionLine, CurrentServiceOrderInspectionLine, ServiceOrderInspectionLine));
    END;

    LOCAL PROCEDURE IsLineEditableBasedOnFilter@1100528111(DependingOnServiceOrderInspectionLine@1100528101 : Record 11071753;CurrentServiceOrderInspectionLine@1100528100 : Record 11071753;VAR ServiceOrderInspectionLine@1100528102 : Record 11071753) : Boolean;
    VAR
      ServiceOrderInspectionLineEmpty@1100528103 : Boolean;
    BEGIN
      ServiceOrderInspectionLine.SETRANGE("Service Order No.", DependingOnServiceOrderInspectionLine."Service Order No.");
      ServiceOrderInspectionLine.SETRANGE("Service Object No.", DependingOnServiceOrderInspectionLine."Service Object No.");
      ServiceOrderInspectionLine.SETRANGE("Maintenance Scheme Code", DependingOnServiceOrderInspectionLine."Maintenance Scheme Code");
      ServiceOrderInspectionLine.SETRANGE("Line No.", DependingOnServiceOrderInspectionLine."Line No.");
      ServiceOrderInspectionLineEmpty := ServiceOrderInspectionLine.ISEMPTY;

      CASE CurrentServiceOrderInspectionLine."Dependency Effect" OF
        "Dependency Effect"::"Enable Line":
          EXIT(NOT ServiceOrderInspectionLineEmpty);
        "Dependency Effect"::"Disable Line":
          EXIT(ServiceOrderInspectionLineEmpty);
      END;
    END;

    BEGIN
    END.
  }
}

