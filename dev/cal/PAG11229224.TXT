OBJECT Page 11229224 Change Request Tasks Chart
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=énderungsanfrage Aufgabendiagramm;
               ENU=Change Request Tasks Chart;
               NLD=Wijzigingsverzoektaken grafiek;
               SVE=éndringsbegÑran uppgifter diagram];
    SaveValues=Yes;
    InsertAllowed=No;
    DeleteAllowed=No;
    SourceTable=Table485;
    PageType=ListPlus;
    UsageCategory=Tasks;
    OnInit=BEGIN
             PeriodType := PeriodType::Month;
             NoOfPeriods := 12;
             DetermineMeasurementIndexes;
           END;

    OnOpenPage=VAR
                 Date@1100409000 : Record 2000000007;
               BEGIN
                 Date."Period Start" := WORKDATE;
                 PeriodFormManagement.FindDate('=<', Date, PeriodType);
                 BaseDate := Date."Period Start";
               END;

    ActionList=ACTIONS
    {
      { 1100528615;  ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1100528614;1 ;Action    ;
                      CaptionML=[DEU=ZurÅck;
                                 ENU=Previous;
                                 NLD=Vorige;
                                 NOR=Forrige;
                                 SVE=FîregÜende];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=PreviousRecord;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 Date@1100409000 : Record 2000000007;
                               BEGIN
                                 Date."Period Start" := BaseDate;
                                 PeriodFormManagement.FindDate('<', Date, PeriodType);
                                 BaseDate := Date."Period Start";
                                 UpdateChart;
                               END;
                                }
      { 1100528613;1 ;Action    ;
                      CaptionML=[DEU=Weiter;
                                 ENU=Next;
                                 NLD=Volgende;
                                 NOR=Neste;
                                 SVE=NÑsta];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=NextRecord;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 Date@1100409000 : Record 2000000007;
                               BEGIN
                                 Date."Period Start" := BaseDate;
                                 PeriodFormManagement.FindDate('>', Date, PeriodType);
                                 BaseDate := Date."Period Start";
                                 UpdateChart;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1100528612;;Container;
                ContainerType=ContentArea }

    { 1100528611;1;Group  ;
                CaptionML=[DEU=Allgemein;
                           ENU=General;
                           NLD=Algemeen;
                           NOR=Generell;
                           SVE=AllmÑnt];
                GroupType=Group }

    { 1100409001;2;Field  ;
                CaptionML=[DEU=Debitorenfilter;
                           ENU=Customer Filter;
                           NLD=Klant filter;
                           NOR=Kundefilter;
                           SVE=Kundfilter];
                SourceExpr=CustomerFilter;
                TableRelation=Customer;
                OnValidate=BEGIN
                             UpdateChart;
                           END;
                            }

    { 1100409000;2;Field  ;
                CaptionML=[DEU=énderungsanfragenfilter;
                           ENU=Change Request Filter;
                           NLD=Wijzigingsverzoek filter;
                           SVE=éndringsbegÑransfilter];
                SourceExpr=ChangeRequestFilter;
                TableRelation="Change Request";
                OnValidate=BEGIN
                             UpdateChart;
                           END;
                            }

    { 1100528610;2;Field  ;
                CaptionML=[DEU=Filter fÅr verantwortliche Mitarbeiter;
                           ENU=Responsible Employee Filter;
                           NLD=Verantwoordelijk medewerker filter];
                SourceExpr=ResponsibleEmployeeFilter;
                TableRelation=Employee;
                OnValidate=BEGIN
                             UpdateChart;
                           END;
                            }

    { 1100528603;1;Group  ;
                CaptionML=[DEU=Diagramm;
                           ENU=Diagram;
                           NLD=Grafiek];
                GroupType=Group }

    { 1100528604;2;Field  ;
                Name=Chart;
                ControlAddIn=[Microsoft.Dynamics.Nav.Client.BusinessChart;PublicKeyToken=31bf3856ad364e35] }

    { 1100528602;1;Group  ;
                CaptionML=[DEU=Optionen;
                           ENU=Options;
                           NLD=Opties;
                           NOR=Alternativer;
                           SVE=Alternativ];
                GroupType=Group }

    { 1100528601;2;Field  ;
                CaptionML=[DEU=Anzeigen nach;
                           ENU=View by;
                           NLD=Weergeven per;
                           NOR=Vis per;
                           SVE=Visa per];
                OptionCaptionML=[DEU=Tag,Woche,Monat,Quartal,Jahr,Periode;
                                 ENU=Day,Week,Month,Quarter,Year,Period;
                                 NLD=Dag,Week,Maand,Kwartaal,Jaar,Periode;
                                 NOR=Dag,Uke,MÜned,Kvartal,èr,Periode;
                                 SVE=Dag,Vecka,MÜnad,Kvartal,èr,Period];
                SourceExpr=PeriodType;
                OnValidate=VAR
                             Date@1100409000 : Record 2000000007;
                           BEGIN
                             PeriodFormManagement.FindDate('=<>', Date, PeriodType);
                             UpdateChart;
                           END;
                            }

    { 1100528600;2;Field  ;
                CaptionML=[DEU=Anz. der Perioden;
                           ENU=No. Of Periods;
                           NLD=Aantal perioden];
                SourceExpr=NoOfPeriods;
                MinValue=1;
                MaxValue=12;
                OnValidate=BEGIN
                             UpdateChart;
                           END;
                            }

  }
  CODE
  {
    VAR
      PeriodFormManagement@1100528600 : Codeunit 359;
      PeriodType@1100528603 : ',Week,Month,Quarter,Year';
      Text000@1100528614 : TextConst 'DEU=Tag,Woche,Monat,Quartal,Jahr,Periode;ENU=Day,Week,Month,Quarter,Year,Period;NLD=Dag,Week,Maand,Kwartaal,Jaar,Periode;NOR=Dag,Uke,MÜned,Kvartal,èr,Periode;SVE=Dag,Vecka,MÜnad,Kvartal,èr,Period';
      BaseDate@1100528610 : Date;
      IndexNoReceived@1100409001 : Integer;
      IndexNoInProcess@1100409000 : Integer;
      IndexNoFinished@1100528609 : Integer;
      IndexNoDueDateEmpty@1100409002 : Integer;
      NoOfPeriods@1100528611 : Integer;
      ResponsibleEmployeeFilter@1100528617 : Text;
      ChangeRequestFilter@1100409004 : Text;
      CustomerFilter@1100409005 : Text;
      Text001@1100409003 : TextConst 'DEU=(Nicht geplant);ENU=" (Not Planned)";NLD=" (niet gepland)"';

    LOCAL PROCEDURE UpdateChart@1100528601();
    VAR
      ChangeRequestTask@1100409000 : Record 11072214;
      Date@1100528604 : Record 2000000007;
      Offset@1100528602 : Integer;
      ColumnName@1100528601 : Text[30];
    BEGIN
      Initialize;
      SetXAxis(GetPeriodTypeText(PeriodType), "Data Type"::String);
      AddMeasure(ChangeRequestTask.FIELDCAPTION(Task) + ' ('+ FORMAT(ChangeRequestTask.Status::Received) + ')',
        IndexNoReceived, "Data Type"::Integer, "Chart Type"::StackedColumn);
      AddMeasure(ChangeRequestTask.FIELDCAPTION(Task) + ' ('+ FORMAT(ChangeRequestTask.Status::"In Process") + ')',
        IndexNoInProcess, "Data Type"::Integer, "Chart Type"::StackedColumn);
      AddMeasure(ChangeRequestTask.FIELDCAPTION(Task) + ' ('+ FORMAT(ChangeRequestTask.Status::Finished) + ')',
        IndexNoFinished, "Data Type"::Integer, "Chart Type"::StackedColumn);
      IF (ResponsibleEmployeeFilter = '') THEN
        AddMeasure(ChangeRequestTask.FIELDCAPTION(Task) + FORMAT(Text001),
          IndexNoDueDateEmpty, "Data Type"::Integer, "Chart Type"::StackedColumn);

      Date."Period Start" := BaseDate;
      PeriodFormManagement.FindDate('=<>', Date, PeriodType);

      FOR Offset := 0 TO NoOfPeriods -1 DO BEGIN
        IF (Offset > 0) THEN
          PeriodFormManagement.NextDate(1, Date, PeriodType);
        ColumnName := PeriodFormManagement.CreatePeriodFormat(PeriodType, Date."Period Start");
        AddColumn(ColumnName);

        ChangeRequestTask.RESET;
        ChangeRequestTask.SETRANGE("Due Date", Date."Period Start", Date."Period End");
        IF (CustomerFilter <> '') THEN
          ChangeRequestTask.SETFILTER("Customer No.", CustomerFilter);
        IF (ChangeRequestFilter <> '') THEN
          ChangeRequestTask.SETFILTER("Change Request No.", ChangeRequestFilter);
        IF (ResponsibleEmployeeFilter <> '') THEN
          ChangeRequestTask.SETFILTER("Responsible Employee", ResponsibleEmployeeFilter);

        ChangeRequestTask.SETRANGE(Status, ChangeRequestTask.Status::Received);
        SetValueByIndex(IndexNoReceived -1, Offset, ChangeRequestTask.COUNT);

        ChangeRequestTask.SETRANGE(Status, ChangeRequestTask.Status::"In Process");
        SetValueByIndex(IndexNoInProcess -1, Offset, ChangeRequestTask.COUNT);

        ChangeRequestTask.SETRANGE(Status, ChangeRequestTask.Status::Finished);
        SetValueByIndex(IndexNoFinished -1, Offset, ChangeRequestTask.COUNT);

        IF (Offset = 0) AND (ResponsibleEmployeeFilter = '') THEN BEGIN
          ChangeRequestTask.SETRANGE("Due Date", 0D);
          ChangeRequestTask.SETRANGE("Responsible Employee");
          ChangeRequestTask.SETRANGE(Status);
          SetValueByIndex(IndexNoDueDateEmpty -1, Offset, ChangeRequestTask.COUNT);
        END;
      END;
      Update(CurrPage.Chart);
    END;

    LOCAL PROCEDURE GetPeriod@1100528604(IOffset@1100528600 : Integer;VAR ODate@1100528601 : Record 2000000007);
    BEGIN
      ODate."Period Start" := BaseDate;
      PeriodFormManagement.FindDate('=<>', ODate, PeriodType);
      IF (IOffset <> 0) THEN
        PeriodFormManagement.NextDate(IOffset, ODate, PeriodType);
    END;

    LOCAL PROCEDURE GetPeriodTypeText@1100528610(IPeriodType@1100528600 : Option) PeriodTypeText : Text;
    VAR
      OptionFieldTools@1100528601 : Codeunit 11012271;
    BEGIN
      OptionFieldTools.OptionValueToReadableOption(Text000, IPeriodType, PeriodTypeText);
    END;

    LOCAL PROCEDURE DetermineMeasurementIndexes@1100528611();
    BEGIN
      IndexNoReceived := 1;
      IndexNoInProcess := 2;
      IndexNoFinished := 3;
      IndexNoDueDateEmpty := 4;
    END;

    LOCAL PROCEDURE ShowTasks@1100528602(XIndex@1100528600 : Integer;MeasureIndex@1100409002 : Integer);
    VAR
      ChangeRequestTask@1100528602 : Record 11072214;
      Date@1100409000 : Record 2000000007;
      ChangeRequestTasks@1100409001 : Page 11126267;
    BEGIN
      IF (CustomerFilter <> '') THEN
        ChangeRequestTask.SETFILTER("Customer No.", CustomerFilter);
      IF (ChangeRequestFilter <> '') THEN
        ChangeRequestTask.SETFILTER("Change Request No.", ChangeRequestFilter);
      IF (ResponsibleEmployeeFilter <> '') THEN
        ChangeRequestTask.SETFILTER("Responsible Employee", ResponsibleEmployeeFilter);

      GetPeriod(XIndex, Date);
      CASE MeasureIndex OF
        1,2,3: BEGIN
          ChangeRequestTask.SETRANGE(Status, MeasureIndex-1);
          ChangeRequestTask.SETRANGE("Due Date", Date."Period Start", Date."Period End");
        END;
        4: BEGIN
          ChangeRequestTask.SETRANGE("Due Date", 0D);
        END;
      END;
      ChangeRequestTasks.SetUpdateHourBtnVisible(FALSE);
      ChangeRequestTasks.SetKeyFieldsVisible(TRUE);
      ChangeRequestTasks.EDITABLE(FALSE);
      ChangeRequestTasks.SETTABLEVIEW(ChangeRequestTask);
      ChangeRequestTasks.RUNMODAL;
    END;

    PROCEDURE SetResponsibleEmployeeFilter@1100409001(NewValue@1100409000 : Code[20]);
    BEGIN
      ResponsibleEmployeeFilter := NewValue;
    END;

    PROCEDURE SetChangeRequestFilter@1100409002(NewValue@1100409000 : Code[20]);
    BEGIN
      ChangeRequestFilter := NewValue;
    END;

    EVENT Chart@-1100528604::DataPointClicked@1(point@1100525000 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.BusinessChartDataPoint");
    BEGIN
      SetDrillDownIndexes(point);
      CASE "Drill-Down Measure Index" + 1 OF
        1,2,3:
          ShowTasks("Drill-Down X Index", "Drill-Down Measure Index" + 1);
        4:
          ShowTasks("Drill-Down X Index", "Drill-Down Measure Index" + 1);
      END;
    END;

    EVENT Chart@-1100528604::DataPointDoubleClicked@2(point@1100525000 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.BusinessChartDataPoint");
    BEGIN
    END;

    EVENT Chart@-1100528604::AddInReady@3();
    BEGIN
      UpdateChart;
    END;

    EVENT Chart@-1100528604::Refresh@4();
    BEGIN
    END;

    BEGIN
    END.
  }
}

