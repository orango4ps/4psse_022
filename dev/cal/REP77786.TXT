OBJECT Report 77786 Import NAV Translate Text File
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=TTool,4PSSE;
  }
  PROPERTIES
  {
    CaptionML=ENU=Import NAV Translate Text File;
    ProcessingOnly=Yes;
    OnPreReport=VAR
                  ImportFile@1100525000 : File;
                  InputStream@1100525001 : InStream;
                  String1@1100525002 : Text[1024];
                  String2@1100525003 : Text[1024];
                  String3@1000 : Text[1024];
                  d@1100525004 : Dialog;
                  LastTimeUpdated@1100525005 : Time;
                  Len@1100525006 : Integer;
                  MaxLen@1100525007 : Integer;
                  MaxCounter@1100525008 : Integer;
                  TTCaption@1100525009 : Record 77786;
                BEGIN
                  MaxLen := MAXSTRLEN(String1);

                  ImportFile.TEXTMODE := TRUE;
                  ImportFile.WRITEMODE := FALSE;
                  ImportFile.OPEN(FileName);
                  ImportFile.CREATEINSTREAM(InputStream);

                  d.OPEN('@1@@@@@@@@@@@@@@@@@@@@@@@');
                  MaxCounter := ImportFile.LEN;
                  LastTimeUpdated := TIME;

                  TTCaption.SETCURRENTKEY("Entry No.");
                  IF TTCaption.FINDLAST THEN
                    NextEntryNo := TTCaption."Entry No." + 1
                  ELSE
                    NextEntryNo := 1;

                  WHILE NOT InputStream.EOS DO BEGIN
                    Len := InputStream.READTEXT(String1);
                    IF (Len >= MaxLen) AND (NOT InputStream.EOS) THEN BEGIN
                      Len := InputStream.READTEXT(String2);
                      IF (Len >= MaxLen) AND (NOT InputStream.EOS) THEN
                      REPEAT
                        Len := InputStream.READTEXT(String3);
                      UNTIL (Len < MaxLen) OR (InputStream.EOS);
                    END
                    ELSE
                      String2 := '';

                   IF String1 <> '' THEN
                      ProcessLine(String1,String2);

                    IF (TIME - LastTimeUpdated) > 500 THEN BEGIN
                      LastTimeUpdated := TIME;
                      d.UPDATE(1,ROUND(ImportFile.POS / MaxCounter * 10000,1));
                    END;
                  END;

                  d.CLOSE;
                  ImportFile.CLOSE;
                END;

  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1100525000;;Container;
                  ContainerType=ContentArea }

      { 1100525001;1;Field  ;
                  Name=Translate Text File;
                  CaptionML=ENU=Translate Text File;
                  SourceExpr=FileName;
                  OnAssistEdit=VAR
                                 FileMgt@1100525000 : Codeunit 419;
                               BEGIN
                                 IF FileName = '' THEN
                                   FileName := '.txt';
                                 FileName := FileMgt.OpenFileDialog('Import Translate Text File',FileName,'');
                               END;
                                }

      { 1100525002;1;Field  ;
                  Name=Project Code;
                  CaptionML=ENU=Project Code;
                  SourceExpr=TTProject.Code;
                  TableRelation="TT NAV Project" }

      { 1100525005;1;Field  ;
                  Name=Skip Empty Captions;
                  CaptionML=ENU=Skip Empty Captions;
                  SourceExpr=SkipEmptyCaptions }

      { 1100525006;1;Field  ;
                  Name=Overwrite Existing Captions;
                  CaptionML=ENU=Overwrite Existing Captions;
                  SourceExpr=OverwriteExistingCaption }

      { 1000000000;1;Field  ;
                  CaptionML=ENU=Create Empty Captions;
                  SourceExpr=CreateEmptyCaptions }

      { 111280000;1;Field   ;
                  CaptionML=ENU=Skip Locked Captions;
                  SourceExpr=SkippedLocked }

      { 1100525007;1;Group  ;
                  CaptionML=[ENU=Advanced Settings;
                             SVE=Avancerade inst„llningar];
                  GroupType=Group }

      { 1100525003;2;Field  ;
                  Name=Only Import Language ID;
                  CaptionML=ENU=Only Import Language ID;
                  SourceExpr=OnlyImportLanguageCode }

      { 1100525004;2;Field  ;
                  Name=Insert as Language ID;
                  CaptionML=ENU=Insert as Language ID;
                  SourceExpr=InsertAsLanguageCode }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      FileName@1100525000 : Text[250];
      TTStringManagement@1100525001 : Codeunit 77780;
      OnlyImportLanguageCode@1100525002 : Code[10];
      InsertAsLanguageCode@1100525003 : Code[10];
      SkipEmptyCaptions@1100525004 : Boolean;
      OverwriteExistingCaption@1100525005 : Boolean;
      TTProject@1100525006 : Record 77782;
      NextEntryNo@1100525007 : Integer;
      FileManagement@1101285000 : Codeunit 419;
      CreateEmptyCaptions@1100525008 : Boolean;
      SkippedLocked@111280000 : Boolean;

    PROCEDURE ProcessLine@1100525000(CaptionString1@1100525000 : Text[1024];CaptionString2@1100525001 : Text[1024]);
    VAR
      TTObject@1100525002 : Record 77785;
      TTCaption1@1100525003 : Record 77786;
      TTCaption2@1100525004 : Record 77786;
      IDString@1100525005 : Code[1024];
      LanguagePos@1100525006 : Integer;
      LengthPos@1100525007 : Integer;
      CaptLen@1000 : Integer;
      LvObjectSignature@1001 : Code[20];
      TTLang@1100285000 : Record 77781;
      WindowsLanguage@1100285002 : Record 2000000045;
    BEGIN
      TTStringManagement.SplitObjectAndCaption(CaptionString1,IDString,CaptionString1);
      IF SkipEmptyCaptions AND (CaptionString1 + CaptionString2 = '') THEN
        EXIT;
      TTStringManagement.GetSignatureAndValue(IDString,TTObject.Signature,TTObject."ID Values");

      LanguagePos := STRPOS(TTObject.Signature,'A');
      IF LanguagePos <> 0 THEN
        TTCaption1."Language ID" := TTStringManagement.SelectString(LanguagePos,TTObject."ID Values")
      ELSE
        TTCaption1."Language ID" := '0';

      //>>PSSE.DL
      IF (TTCaption1."Language ID"<>'0') AND (NOT TTLang.GET(TTCaption1."Language ID")) THEN BEGIN
        TTLang.ID := TTCaption1."Language ID";
        IF WindowsLanguage.GET(TTLang.ID) THEN
          TTLang.Code := WindowsLanguage."Abbreviated Name";
        IF TTLang.INSERT THEN;
      END;
      //<<PSSE.DL

      IF OnlyImportLanguageCode <> '' THEN
        IF (TTCaption1."Language ID" <> OnlyImportLanguageCode) THEN
          EXIT;

      CaptLen := STRLEN(CaptionString1);

      IF CaptionString2 <> '' THEN BEGIN
        CaptionString1 := CaptionString1 + COPYSTR(CaptionString2, 1, MAXSTRLEN(CaptionString1)-CaptLen);
        CaptionString2 := '';
      END;
      TTCaption1.SetCaption(CaptionString1 + CaptionString2);

      LengthPos := STRPOS(TTObject.Signature,'L');
      IF NOT EVALUATE(TTObject.Length,TTStringManagement.SelectString(LengthPos,TTObject."ID Values")) THEN
        EXIT;

      IF LanguagePos <> 0 THEN BEGIN
        TTObject.ID :=
           COPYSTR(IDString,1,
             STRPOS(IDString,
               TTStringManagement.ElementSeparator +
               'A' + TTCaption1."Language ID" +
               TTStringManagement.ElementSeparator) - 1);
      END ELSE
        TTObject.ID :=
          COPYSTR(IDString,1,
            STRPOS(IDString,
              TTStringManagement.ElementSeparator +
              'L' + FORMAT(TTObject.Length)) - 1);

      //XMLport captions start with X
      IF STRPOS(TTObject.Signature,'X') = 1 THEN BEGIN
        LvObjectSignature := COPYSTR(TTObject.Signature,2,STRLEN(TTObject.Signature)-1);
        IF (STRPOS(LvObjectSignature,'X') <> 0) OR
           (STRPOS(LvObjectSignature,'V') <> 0)
        THEN
          EXIT;
      END ELSE BEGIN
        IF (STRPOS(TTObject.Signature,'X') <> 0) OR
           (STRPOS(TTObject.Signature,'V') <> 0)
        THEN
          EXIT;
      END;

      IF (LanguagePos = 0) AND (STRPOS(TTObject."ID Values", '2818') = 0)
      THEN
        EXIT;

      TTObject."Object Type" :=
        STRPOS('TFRDCXMN', COPYSTR(IDString,1,1));
      EVALUATE(TTObject."Object No.",TTStringManagement.SelectString(1,TTObject."ID Values"));

      TTObject.Locked := LOWERCASE(CaptionString1) = '{locked}';
      IF TTObject.INSERT THEN;

      IF TTObject.Locked AND SkippedLocked THEN
        EXIT;

      TTCaption1."Entry No." := NextEntryNo;
      NextEntryNo := NextEntryNo + 1;
      TTCaption1."Object ID" := TTObject.ID;
      TTCaption1.Length := TTObject.Length;
      TTCaption1.Status := TTCaption1.Status::Imported;
      TTCaption1.VALIDATE(TTCaption1.Caption1);
      IF (InsertAsLanguageCode <> '') AND
         (OnlyImportLanguageCode <> '')
      THEN
        TTCaption1."Language ID" := InsertAsLanguageCode;

      TTCaption1."Project Code" := TTProject.Code;
      IF NOT TTCaption1.INSERT(TRUE) THEN BEGIN
        IF TTCaption1.GetCaption <> '' THEN BEGIN
          TTCaption2.GET(TTCaption1."Project Code", TTCaption1."Language ID", TTCaption1."Object ID");
          IF OverwriteExistingCaption OR TTCaption2.ImportAllowed THEN BEGIN
            IF TTCaption2.GetCaption <> TTCaption1.GetCaption THEN
              TTCaption2.Status := TTCaption2.Status::Modified;
      //>>4PPSE
            IF OverwriteExistingCaption THEN
              TTCaption2.Status := TTCaption2.Status::Imported;
      //<<4PSSE
            TTCaption2.SetCaption(TTCaption1.GetCaption);
            TTCaption2.MODIFY(TRUE);
          END;
        END;
      END;

      IF CreateEmptyCaptions THEN BEGIN
        IF NOT TTCaption2.GET(TTCaption1."Project Code", TTProject."Target Language ID", TTCaption1."Object ID") THEN BEGIN
          CLEAR(TTCaption2);
          TTCaption2.INIT;
          TTCaption2."Project Code" := TTCaption1."Project Code";
          TTCaption2."Language ID" := TTProject."Target Language ID";
          TTCaption2."Object ID" := TTCaption1."Object ID";
          TTCaption2.Status := TTCaption2.Status::Generated;
          TTCaption2."Last Modified" := CURRENTDATETIME;
          TTCaption2."Modified By" := USERID;
          TTCaption2.INSERT(FALSE);
        END;
      END;
    END;

    PROCEDURE CRLF@1100525001() : Text[2];
    VAR
      CRLF@1100525000 : Text[2];
    BEGIN
      CRLF[1] := 13;
      CRLF[2] := 10;
      EXIT(CRLF);
    END;

    PROCEDURE SetTTProject@1100525004(locProject@1100525000 : Record 77782);
    BEGIN
      TTProject.GET(locProject.Code);
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

