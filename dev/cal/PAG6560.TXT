OBJECT Page 6560 Document Line Tracking
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.04,4PS14.00;
  }
  PROPERTIES
  {
    Editable=No;
    CaptionML=[ENU=Document Line Tracking;
               NOR=Sporing av dokumentlinje;
               SVE=Sp†rning av dokumentrad];
    SourceTable=Table265;
    DataCaptionExpr=DocumentCaption;
    PageType=List;
    OnInit=BEGIN
             ShowEnable := TRUE;
           END;

    OnOpenPage=BEGIN
                 IF (SourceDocNo = '') OR (SourceDocLineNo = 0) THEN
                   EXIT;

                 FindRecords;
               END;

    OnFindRecord=BEGIN
                   TempDocumentEntry := Rec;
                   IF NOT TempDocumentEntry.FIND(Which) THEN
                     EXIT(FALSE);
                   Rec := TempDocumentEntry;
                   EXIT(TRUE);
                 END;

    OnNextRecord=VAR
                   CurrentSteps@1000 : Integer;
                 BEGIN
                   TempDocumentEntry := Rec;
                   CurrentSteps := TempDocumentEntry.NEXT(Steps);
                   IF CurrentSteps <> 0 THEN
                     Rec := TempDocumentEntry;
                   EXIT(CurrentSteps);
                 END;

    ActionList=ACTIONS
    {
      { 15      ;0   ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 14      ;1   ;Action    ;
                      Name=Show;
                      CaptionML=[ENU=&Show;
                                 NOR=Vi&s;
                                 SVE=V&isa];
                      ToolTipML=[ENU=Show related document.;
                                 NOR=Vis relatert dokument.;
                                 SVE=Visa relaterat dokument.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Enabled=ShowEnable;
                      Image=View;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ShowRecords;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 13  ;0   ;Container ;
                ContainerType=ContentArea }

    { 12  ;1   ;Group     ;
                CaptionML=[ENU=General;
                           NOR=Generelt;
                           SVE=Allm„nt] }

    { 11  ;2   ;Field     ;
                Name=SourceDocLineNo;
                CaptionML=[ENU=Line No.;
                           NOR=Linjenr.;
                           SVE=Radnr];
                ToolTipML=[ENU=Specifies the number of the tracked line.;
                           NOR=Angir nummeret p† den sporede linjen.;
                           SVE=Anger numret p† den sp†rade raden.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=SourceDocLineNo;
                Editable=FALSE }

    { 10  ;2   ;Field     ;
                Name=DocLineType;
                CaptionML=[ENU=Type;
                           NOR=Type;
                           SVE=Typ];
                ToolTipML=[ENU="Specifies the type of the tracked document. ";
                           NOR="Angir typen sporet dokument. ";
                           SVE="Anger typen av det sp†rade dokument. "];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=DocLineType;
                Editable=FALSE }

    { 9   ;2   ;Field     ;
                Name=DocLineNo;
                CaptionML=[ENU=No.;
                           NOR=Nr.;
                           SVE=Nummer];
                ToolTipML=[ENU=Specifies the number of the tracked document line.;
                           NOR=Angir nummeret p† den sporede dokumentlinjen.;
                           SVE=Anger numret p† den sp†rade dokumentraden.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=DocLineNo;
                Editable=FALSE }

    { 8   ;2   ;Field     ;
                Name=DocLineDescription;
                CaptionML=[ENU=Description;
                           NOR=Beskrivelse;
                           SVE=Beskrivning];
                ToolTipML=[ENU=Specifies a description of the record.;
                           NOR=Angir en beskrivelse av posten.;
                           SVE=Anger en beskrivning av posten.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=DocLineDescription;
                Editable=FALSE }

    { 7   ;2   ;Field     ;
                Name=DocLineQuantity;
                CaptionML=[ENU=Quantity;
                           NOR=Antall;
                           SVE=Antal];
                ToolTipML=[ENU=Specifies the quantity on the tracked document line.;
                           NOR=Angir antallet p† den sporede dokumentlinjen.;
                           SVE=Anger antalet p† den sp†rade dokumentraden.];
                ApplicationArea=#Basic,#Suite;
                DecimalPlaces=0:5;
                SourceExpr=DocLineQuantity;
                Editable=FALSE }

    { 6   ;2   ;Field     ;
                Name=DocLineUnit;
                CaptionML=[ENU=Unit of Measure Code;
                           NOR=Enhetskode;
                           SVE=Enhetskod];
                ToolTipML=[ENU=Specifies the unit of measure that the item is shown in.;
                           NOR=Angir m†leenheten som varen vises i.;
                           SVE=Anger enheten som artikeln visas med.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=DocLineUnit;
                Editable=FALSE }

    { 5   ;1   ;Group     ;
                Editable=FALSE;
                GroupType=Repeater }

    { 4   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number that is assigned to the entry.;
                           NOR=Angir nummeret som er knyttet til posten.;
                           SVE=Anger numret som har tilldelats transaktionen.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Entry No.";
                Visible=FALSE }

    { 3   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the ID of the table that stores the tracked document line.;
                           NOR=Angir ID-en for tabellen som lagrer den sporede dokumentlinjen.;
                           SVE=Anger ID-numret f”r den tabell som inneh†ller den sp†rade dokumentraden.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Table ID";
                Visible=FALSE }

    { 2   ;2   ;Field     ;
                Name=Table Name;
                ToolTipML=[ENU=Specifies the name of the table that stores the tracked document line.;
                           NOR=Angir navnet p† tabellen som lagrer den sporede dokumentlinjen.;
                           SVE=Anger namnet p† den tabell som inneh†ller den sp†rade dokumentraden.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Table Name" }

    { 1   ;2   ;Field     ;
                DrillDown=Yes;
                ToolTipML=[ENU=Specifies how many records contain the tracked document line.;
                           NOR=Angir hvor mange poster som inneholder den sporede dokumentlinjen.;
                           SVE=Anger hur m†nga poster som inneh†ller den sp†rade dokumentraden.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="No. of Records";
                OnDrillDown=BEGIN
                              ShowRecords;
                            END;
                             }

  }
  CODE
  {
    VAR
      CountingRecordsMsg@1000 : TextConst 'ENU=Counting records...;NOR=Teller poster...;SVE=R„knar poster ...';
      SalesOrderLinesTxt@1001 : TextConst 'ENU=Sales Order Lines;NOR=Ordrelinjer;SVE=F”rs„ljningsorderrader';
      ArchivedSalesOrderLinesTxt@1002 : TextConst 'ENU=Archived Sales Order Lines;NOR=Arkiverte ordrelinjer;SVE=Arkiverade f”rs„ljningsorderrader';
      PostedSalesShipmentLinesTxt@1003 : TextConst 'ENU=Posted Sales Shipment Lines;NOR=Bokf›rte f›lgeseddellinjer;SVE=Bokf”rda f”rs.utleveransrader';
      PostedSalesInvoiceLinesTxt@1004 : TextConst 'ENU=Posted Sales Invoice Lines;NOR=Bokf›rte salgsfakt.linjer;SVE=Bokf”rda f”rs„ljningsfakturarader';
      PurchaseOrderLinesTxt@1005 : TextConst 'ENU=Purchase Order Lines;NOR=Bestillingslinjer;SVE=Ink”psorderrader';
      ArchivedPurchaseOrderLinesTxt@1006 : TextConst 'ENU=Archived Purchase Order Lines;NOR=Arkiverte bestillingslinjer;SVE=Arkiverade ink”psorderrader';
      PostedPurchaseReceiptLinesTxt@1007 : TextConst 'ENU=Posted Purchase Receipt Lines;NOR=Bokf›rte mottakslinjer;SVE=Bokf”rda inleveransrader';
      PostedPurchaseInvoiceLinesTxt@1008 : TextConst 'ENU=Posted Purchase Invoice Lines;NOR=Bokf›rte kj›psfakturalinjer;SVE=Bokf”rda ink”psfakturarader';
      NoSalesOrderMsg@1009 : TextConst 'ENU=There is no Sales Order / Archived Sales Order with this Document Number and Document Line No.;NOR=Det finnes ingen ordre eller arkivert ordre med dette bilagsnummeret og dokumentlinjenummeret;SVE=Det finns inga f”rs„ljningsorder/arkiverade f”rs„ljningsorder med detta dokumentnummer och dokumentradnummer';
      NoPurchaseOrderMsg@1011 : TextConst 'ENU=There is no Purchase Order / Archived Purchase Order with this Document Number and Document Line No.;NOR=Det finnes ingen bestilling eller arkivert bestilling med dette bilagsnummeret og dokumentlinjenummeret;SVE=Det finns inga ink”psorder/arkiverade ink”psorder med detta dokumentnummer och dokumentradnummer';
      ArchivedTxt@1012 : TextConst 'ENU=Archived;NOR=Arkivert;SVE=Arkiverat';
      BlanketSalesOrderLinesTxt@1013 : TextConst 'ENU=Blanket Sales Order Lines;NOR=Rammeordrelinjer;SVE=Rader p† avropsorder f”r f”rs„ljning';
      ArchivedBlanketSalesOrderLinesTxt@1014 : TextConst 'ENU=Archived Blanket Sales Order Lines;NOR=Arkiverte rammeordrelinjer;SVE=Arkiverade rader p† avropsorder f”r f”rs„ljning';
      BlanketPurchaseOrderLinesTxt@1015 : TextConst 'ENU=Blanket Purchase Order Lines;NOR=Rammebestillingslinjer;SVE=Rader p† avropsorder f”r ink”p';
      ArchivedBlanketPurchaseOrderLinesTxt@1016 : TextConst 'ENU=Archived Blanket Purchase Order Lines;NOR=Arkiverte rammebestillingslinjer;SVE=Arkiverade rader p† avropsorder f”r ink”p';
      SalesReturnOrderLinesTxt@1052 : TextConst 'ENU=Sales Return Order Lines;NOR=Ordrereturlinjer;SVE=Rader p† f”rs„ljningsreturorder';
      ArchivedSalesReturnOrderLinesTxt@1053 : TextConst 'ENU=Archived Sales Return Order Lines;NOR=Arkiverte ordrereturlinjer;SVE=Arkiverade rader p† f”rs„ljningsreturorder';
      PostedReturnReceiptLinesTxt@1054 : TextConst 'ENU=Posted Return Receipt Lines;NOR=Bokf. returseddellinjer;SVE=Bokf”rda returinleveransrader';
      PostedSalesCreditMemoLinesTxt@1055 : TextConst 'ENU=Posted Sales Credit Memo Lines;NOR=Bokf›rte salgskr.notalinjer;SVE=Bokf”rda f”rs„ljningskreditnotarader';
      PurchaseReturnOrderLinesTxt@1056 : TextConst 'ENU=Purchase Return Order Lines;NOR=Bestillingsreturlinjer;SVE=Rader p† ink”psreturorder';
      ArchivedPurchaseReturnOrderLinesTxt@1057 : TextConst 'ENU=Archived Purchase Return Order Lines;NOR=Arkiverte bestillingsreturlinjer;SVE=Arkiverade rader p† ink”psreturorder';
      PostedReturnShipmentLinesTxt@1058 : TextConst 'ENU=Posted Return Shipment Lines;NOR=Bokf›rte returforsendelseslinjer;SVE=Bokf”rda returutleveransrader';
      PostedPurchaseCreditMemoLinesTxt@1059 : TextConst 'ENU=Posted Purchase Credit Memo Lines;NOR=Bokf›rte kj›pskreditnotalinjer;SVE=Bokf”rda rader p† ink”pskreditnota';
      SalesLine@1017 : Record 37;
      SalesShptLine@1018 : Record 111;
      SalesInvLine@1019 : Record 113;
      SalesCrMemoLine@1020 : Record 115;
      SalesLineArchive@1021 : Record 11072056;
      PurchLine@1022 : Record 39;
      PurchRcptLine@1023 : Record 121;
      PurchInvLine@1024 : Record 123;
      PurchCrMemoLine@1025 : Record 125;
      PurchLineArchive@1026 : Record 11072058;
      TempDocumentEntry@1027 : TEMPORARY Record 265;
      ReturnReceiptLine@1050 : Record 6661;
      ReturnShipmentLine@1051 : Record 6651;
      BlanketSalesOrderLine@1028 : Record 37;
      BlanketSalesOrderLineArchive@1029 : Record 11072056;
      BlanketPurchOrderLine@1030 : Record 39;
      BlanketPurchOrderLineArchive@1031 : Record 11072058;
      Window@1032 : Dialog;
      SourceDocType@1033 : 'SalesOrder,PurchaseOrder,BlanketSalesOrder,BlanketPurchaseOrder,SalesShipment,PurchaseReceipt,SalesInvoice,PurchaseInvoice,SalesReturnOrder,PurchaseReturnOrder,SalesCreditMemo,PurchaseCreditMemo,ReturnReceipt,ReturnShipment';
      SourceDocNo@1034 : Code[20];
      SourceDocBlanketOrderNo@1035 : Code[20];
      SourceDocOrderNo@1036 : Code[20];
      SourceDocLineNo@1039 : Integer;
      SourceDocBlanketOrderLineNo@1040 : Integer;
      SourceDocOrderLineNo@1041 : Integer;
      DocumentCaption@1042 : Text[60];
      DocNo@1037 : Code[20];
      DocLineNo@1010 : Code[20];
      DocType@1043 : Text[30];
      DocArchive@1044 : Text[30];
      DocLineType@1045 : Text[30];
      DocLineDescription@1046 : Text[100];
      DocLineUnit@1047 : Text[10];
      DocLineQuantity@1048 : Decimal;
      DocExists@1049 : Boolean;
      ShowEnable@19017131 : Boolean INDATASET;
      UseBlanketOrderNo@1038 : Boolean;
      UseOrderNo@1060 : Boolean;

    [External]
    PROCEDURE SetDoc@1000(NewSourceDocType@1000 : 'SalesOrder,PurchaseOrder,BlanketSalesOrder,BlanketPurchaseOrder,SalesShipment,PurchaseReceipt,SalesInvoice,PurchaseInvoice,SalesReturnOrder,PurchaseReturnOrder,SalesCreditMemo,PurchaseCreditMemo,ReturnReceipt,ReturnShipment';NewDocNo@1001 : Code[20];NewSourceDocLineNo@1002 : Integer;NewDocBlanketOrderNo@1003 : Code[20];NewDocBlanketOrderLineNo@1004 : Integer;NewDocOrderNo@1005 : Code[20];NewDocOrderLineNo@1006 : Integer);
    BEGIN
      SourceDocType := NewSourceDocType;
      SourceDocNo := NewDocNo;
      SourceDocLineNo := NewSourceDocLineNo;
      SourceDocBlanketOrderNo := NewDocBlanketOrderNo;
      SourceDocBlanketOrderLineNo := NewDocBlanketOrderLineNo;
      SourceDocOrderNo := NewDocOrderNo;
      SourceDocOrderLineNo := NewDocOrderLineNo;

      UseBlanketOrderNo := ((SourceDocBlanketOrderNo <> '') AND (SourceDocBlanketOrderLineNo <> 0));
      UseOrderNo := ((SourceDocOrderNo <> '') AND (SourceDocOrderLineNo <> 0));

      Rec := Rec;
    END;

    LOCAL PROCEDURE FindRecords@1001();
    BEGIN
      WITH TempDocumentEntry DO BEGIN
        Window.OPEN(CountingRecordsMsg);
        DELETEALL;
        "Entry No." := 0;

        CASE SourceDocType OF
          SourceDocType::SalesOrder:
            FindRecordsForSalesOrder;
          SourceDocType::PurchaseOrder:
            FindRecordsForPurchOrder;
          SourceDocType::BlanketSalesOrder:
            FindRecordsForBlanketSalesOrder;
          SourceDocType::BlanketPurchaseOrder:
            FindRecordsForBlanketPurchOrder;
          SourceDocType::SalesShipment:
            FindRecordsForSalesShipment;
          SourceDocType::PurchaseReceipt:
            FindRecordsForPurchaseReceipt;
          SourceDocType::SalesInvoice:
            FindRecordsForSalesInvoice;
          SourceDocType::PurchaseInvoice:
            FindRecordsForPurchInvoice;
          SourceDocType::SalesReturnOrder:
            FindRecordsForSalesReturnOrder;
          SourceDocType::PurchaseReturnOrder:
            FindRecordsForPurchReturnOrder;
          SourceDocType::SalesCreditMemo:
            FindRecordsForSalesCreditMemo;
          SourceDocType::PurchaseCreditMemo:
            FindRecordsForPurchCreditMemo;
          SourceDocType::ReturnReceipt:
            FindRecordsForReturnReceipt;
          SourceDocType::ReturnShipment:
            FindRecordsForReturnShipment;
        END;

        GetDocumentData;

        IF DocNo = '' THEN
          CASE SourceDocType OF
            SourceDocType::SalesOrder:
              MESSAGE(NoSalesOrderMsg);
            SourceDocType::PurchaseOrder:
              MESSAGE(NoPurchaseOrderMsg);
          END;

        DocExists := FIND('-');
        ShowEnable := DocExists;
        CurrPage.UPDATE(FALSE);
        DocExists := FIND('-');
        IF DocExists THEN;
        Window.CLOSE;
      END;
    END;

    LOCAL PROCEDURE FindRecordsForSalesOrder@1();
    BEGIN
      IF UseBlanketOrderNo THEN
        FindRecordsRelatedToSalesBlanketOrder(SourceDocBlanketOrderNo,SourceDocBlanketOrderLineNo);

      FindRecordsRelatedToSalesOrder(SourceDocNo,SourceDocLineNo);
    END;

    LOCAL PROCEDURE FindRecordsForPurchOrder@3();
    BEGIN
      IF UseBlanketOrderNo THEN
        FindRecordsRelatedToPurchaseBlanketOrder(SourceDocBlanketOrderNo,SourceDocBlanketOrderLineNo);

      FindRecordsRelatedToPurchaseOrder(SourceDocNo,SourceDocLineNo);
    END;

    LOCAL PROCEDURE FindRecordsForBlanketSalesOrder@4();
    BEGIN
      FindRecordsRelatedToSalesBlanketOrder(SourceDocNo,SourceDocLineNo);

      FindSalesOrderLinesByBlanketOrder(SourceDocNo,SourceDocLineNo);
      FindSalesOrderLinesArchiveByBlanketOrder(SourceDocNo,SourceDocLineNo);
      FindSalesShipmentLinesByBlanketOrder(SourceDocNo,SourceDocLineNo);
      FindSalesInvoiceLinesByBlanketOrder(SourceDocNo,SourceDocLineNo);
    END;

    LOCAL PROCEDURE FindRecordsForBlanketPurchOrder@5();
    BEGIN
      FindRecordsRelatedToPurchaseBlanketOrder(SourceDocNo,SourceDocLineNo);

      FindPurchOrderLinesByBlanketOrder(SourceDocNo,SourceDocLineNo);
      FindPurchOrderLinesArchiveByBlanketOrder(SourceDocNo,SourceDocLineNo);
      FindPurchReceiptLinesByBlanketOrder(SourceDocNo,SourceDocLineNo);
      FindPurchInvoiceLinesByBlanketOrder(SourceDocNo,SourceDocLineNo);
    END;

    LOCAL PROCEDURE FindRecordsForSalesShipment@6();
    BEGIN
      IF UseBlanketOrderNo THEN
        FindRecordsRelatedToSalesBlanketOrder(SourceDocBlanketOrderNo,SourceDocBlanketOrderLineNo);

      IF UseOrderNo THEN
        FindRecordsRelatedToSalesOrder(SourceDocOrderNo,SourceDocOrderLineNo);
    END;

    LOCAL PROCEDURE FindRecordsForPurchaseReceipt@7();
    BEGIN
      IF UseBlanketOrderNo THEN
        FindRecordsRelatedToPurchaseBlanketOrder(SourceDocBlanketOrderNo,SourceDocBlanketOrderLineNo);

      IF UseOrderNo THEN
        FindRecordsRelatedToPurchaseOrder(SourceDocOrderNo,SourceDocOrderLineNo);
    END;

    LOCAL PROCEDURE FindRecordsForSalesInvoice@9();
    BEGIN
      IF UseBlanketOrderNo THEN
        FindRecordsRelatedToSalesBlanketOrder(SourceDocBlanketOrderNo,SourceDocBlanketOrderLineNo);

      IF UseOrderNo THEN
        FindRecordsRelatedToSalesOrder(SourceDocOrderNo,SourceDocOrderLineNo);
    END;

    LOCAL PROCEDURE FindRecordsForPurchInvoice@11();
    BEGIN
      IF UseBlanketOrderNo THEN
        FindRecordsRelatedToPurchaseBlanketOrder(SourceDocBlanketOrderNo,SourceDocBlanketOrderLineNo);

      IF UseOrderNo THEN
        FindRecordsRelatedToPurchaseOrder(SourceDocOrderNo,SourceDocOrderLineNo);
    END;

    LOCAL PROCEDURE FindRecordsForSalesReturnOrder@13();
    BEGIN
      FindRecordsRelatedToSalesReturnOrder(SourceDocNo,SourceDocLineNo);
    END;

    LOCAL PROCEDURE FindRecordsForPurchReturnOrder@14();
    BEGIN
      FindRecordsRelatedToPurchaseReturn(SourceDocNo,SourceDocLineNo);
    END;

    LOCAL PROCEDURE FindRecordsForSalesCreditMemo@15();
    BEGIN
      IF UseOrderNo THEN
        FindRecordsRelatedToSalesReturnOrder(SourceDocOrderNo,SourceDocOrderLineNo);
    END;

    LOCAL PROCEDURE FindRecordsForPurchCreditMemo@16();
    BEGIN
      IF UseOrderNo THEN
        FindRecordsRelatedToPurchaseReturn(SourceDocOrderNo,SourceDocOrderLineNo);
    END;

    LOCAL PROCEDURE FindRecordsForReturnReceipt@17();
    BEGIN
      IF UseBlanketOrderNo THEN
        FindRecordsRelatedToSalesReturnOrder(SourceDocBlanketOrderNo,SourceDocBlanketOrderLineNo);
    END;

    LOCAL PROCEDURE FindRecordsForReturnShipment@18();
    BEGIN
      IF UseBlanketOrderNo THEN
        FindRecordsRelatedToPurchaseReturn(SourceDocBlanketOrderNo,SourceDocBlanketOrderLineNo);
    END;

    LOCAL PROCEDURE FindRecordsRelatedToPurchaseBlanketOrder@44(DocNo@1002 : Code[20];DocLineNo@1001 : Integer);
    BEGIN
      FindPurchBlanketOrderLines(DocNo,DocLineNo);
      FindPurchBlanketOrderLinesArchive(DocNo,DocLineNo);
    END;

    LOCAL PROCEDURE FindRecordsRelatedToPurchaseOrder@45(DocNo@1002 : Code[20];DocLineNo@1001 : Integer);
    BEGIN
      FindPurchOrderLines(DocNo,DocLineNo);
      FindPurchOrderLinesArchive(DocNo,DocLineNo);
      FindPurchReceiptLinesByOrder(DocNo,DocLineNo);
      FindPurchInvoiceLinesByOrder(DocNo,DocLineNo);
    END;

    LOCAL PROCEDURE FindRecordsRelatedToPurchaseReturn@26(DocNo@1001 : Code[20];DocLineNo@1000 : Integer);
    BEGIN
      FindPurchReturnOrderLines(DocNo,DocLineNo);
      FindPurchReturnOrderLinesArchive(DocNo,DocLineNo);
      FindReturnShipmentLines(DocNo,DocLineNo);
      FindPurchCreditMemoLines(DocNo,DocLineNo);
    END;

    LOCAL PROCEDURE FindRecordsRelatedToSalesBlanketOrder@2(DocNo@1001 : Code[20];DocLineNo@1000 : Integer);
    BEGIN
      FindSalesBlanketOrderLines(DocNo,DocLineNo);
      FindSalesBlanketOrderLinesArchive(DocNo,DocLineNo);
    END;

    LOCAL PROCEDURE FindRecordsRelatedToSalesOrder@28(DocNo@1001 : Code[20];DocLineNo@1000 : Integer);
    BEGIN
      FindSalesOrderLines(DocNo,DocLineNo);
      FindSalesOrderLinesArchive(DocNo,DocLineNo);
      FindSalesShipmentLinesByOrder(DocNo,DocLineNo);
      FindSalesInvoiceLinesByOrder(DocNo,DocLineNo);
    END;

    LOCAL PROCEDURE FindRecordsRelatedToSalesReturnOrder@30(DocNo@1001 : Code[20];DocLineNo@1000 : Integer);
    BEGIN
      FindSalesReturnOrderLines(DocNo,DocLineNo);
      FindSalesReturnOrderLinesArchive(DocNo,DocLineNo);
      FindReturnReceiptLines(DocNo,DocLineNo);
      FindSalesCreditMemoLines(DocNo,DocLineNo);
    END;

    LOCAL PROCEDURE InsertIntoDocEntry@1002(DocTableID@1000 : Integer;DocType@1001 : Option;DocTableName@1002 : Text[50];DocNoOfRecords@1003 : Integer);
    BEGIN
      IF DocNoOfRecords = 0 THEN
        EXIT;

      TempDocumentEntry.INIT;
      TempDocumentEntry."Entry No." := TempDocumentEntry."Entry No." + 1;
      TempDocumentEntry."Table ID" := DocTableID;
      TempDocumentEntry."Document Type" := DocType;
      TempDocumentEntry."Table Name" := COPYSTR(DocTableName,1,MAXSTRLEN(TempDocumentEntry."Table Name"));
      TempDocumentEntry."No. of Records" := DocNoOfRecords;
      TempDocumentEntry.INSERT;
    END;

    LOCAL PROCEDURE GetDocumentData@1004();
    BEGIN
      DocType := '';
      DocNo := '';
      DocArchive := '';
      DocLineType := '';
      DocLineNo := '';
      DocLineDescription := '';
      DocLineQuantity := 0;
      DocLineUnit := '';

      AssignLineFieldFromDocument(SourceDocType);

      DocumentCaption := DELCHR(DocArchive + ' ' + DocType + ' ' + DocNo,'<',' ');
    END;

    LOCAL PROCEDURE ShowRecords@1005();
    BEGIN
      TempDocumentEntry := Rec;
      IF TempDocumentEntry.FIND THEN
        Rec := TempDocumentEntry;

      WITH TempDocumentEntry DO
        CASE "Table ID" OF
          DATABASE::"Sales Line":
            BEGIN
              IF "Document Type" = "Document Type"::"Blanket Order" THEN
                PAGE.RUNMODAL(PAGE::"Sales Lines",BlanketSalesOrderLine)
              ELSE
                PAGE.RUNMODAL(PAGE::"Sales Lines",SalesLine);
            END;
          DATABASE::"Sales Shipment Line":
            PAGE.RUNMODAL(0,SalesShptLine);
          DATABASE::"Sales Invoice Line":
            PAGE.RUNMODAL(0,SalesInvLine);
          DATABASE::"Sales Cr.Memo Line":
            PAGE.RUNMODAL(0,SalesCrMemoLine);
          DATABASE::"Sales Line Archive":
            BEGIN
              IF "Document Type" = "Document Type"::"Blanket Order" THEN
                PAGE.RUNMODAL(PAGE::"Sales Line Archive List",BlanketSalesOrderLineArchive)
              ELSE
                PAGE.RUNMODAL(PAGE::"Sales Line Archive List",SalesLineArchive);
            END;
          DATABASE::"Return Receipt Line":
            PAGE.RUNMODAL(0,ReturnReceiptLine);
          DATABASE::"Purchase Line":
            BEGIN
              IF "Document Type" = "Document Type"::"Blanket Order" THEN
                PAGE.RUNMODAL(PAGE::"Purchase Lines",BlanketPurchOrderLine)
              ELSE
                PAGE.RUNMODAL(PAGE::"Purchase Lines",PurchLine);
            END;
          DATABASE::"Purch. Rcpt. Line":
            PAGE.RUNMODAL(0,PurchRcptLine);
          DATABASE::"Purch. Inv. Line":
            PAGE.RUNMODAL(0,PurchInvLine);
          DATABASE::"Purch. Cr. Memo Line":
            PAGE.RUNMODAL(0,PurchCrMemoLine);
          DATABASE::"Purchase Line Archive":
            BEGIN
              IF "Document Type" = "Document Type"::"Blanket Order" THEN
                PAGE.RUNMODAL(PAGE::"Purchase Line Archive List",BlanketPurchOrderLineArchive)
              ELSE
                PAGE.RUNMODAL(PAGE::"Purchase Line Archive List",PurchLineArchive);
            END;
          DATABASE::"Return Shipment Line":
            PAGE.RUNMODAL(0,ReturnShipmentLine);
        END;
    END;

    LOCAL PROCEDURE AssignLineFieldFromDocument@48(SourceDocType@1000 : 'SalesOrder,PurchaseOrder,BlanketSalesOrder,BlanketPurchaseOrder,SalesShipment,PurchaseReceipt,SalesInvoice,PurchaseInvoice,SalesReturnOrder,PurchaseReturnOrder,SalesCreditMemo,PurchaseCreditMemo,ReturnReceipt,ReturnShipment');
    BEGIN
      CASE SourceDocType OF
        SourceDocType::SalesOrder:
          BEGIN
            WITH SalesLine DO
              IF FilteredRecordExist(GETFILTERS,ISEMPTY) THEN BEGIN
                FINDFIRST;
                AssignLineFields(
                  FORMAT("Document Type"),"Document No.",'',FORMAT(Type),"No.",Description,Quantity,"Unit of Measure Code");
                EXIT;
              END;
            WITH SalesLineArchive DO
              IF FilteredRecordExist(GETFILTERS,ISEMPTY) THEN BEGIN
                FINDFIRST;
                AssignLineFields(
                  FORMAT("Document Type"),"Document No.",ArchivedTxt,FORMAT(Type),"No.",Description,Quantity,"Unit of Measure Code");
              END;
          END;
        SourceDocType::BlanketSalesOrder:
          BEGIN
            WITH BlanketSalesOrderLine DO
              IF FilteredRecordExist(GETFILTERS,ISEMPTY) THEN BEGIN
                FINDFIRST;
                AssignLineFields(
                  FORMAT("Document Type"),"Document No.",'',FORMAT(Type),"No.",Description,Quantity,"Unit of Measure Code");
                EXIT;
              END;
            WITH BlanketSalesOrderLineArchive DO
              IF FilteredRecordExist(GETFILTERS,ISEMPTY) THEN BEGIN
                FINDFIRST;
                AssignLineFields(
                  FORMAT("Document Type"),"Document No.",ArchivedTxt,FORMAT(Type),"No.",Description,Quantity,"Unit of Measure Code");
              END;
          END;
        SourceDocType::PurchaseOrder,SourceDocType::PurchaseReturnOrder:
          BEGIN
            WITH PurchLine DO
              IF FilteredRecordExist(GETFILTERS,ISEMPTY) THEN BEGIN
                FINDFIRST;
                AssignLineFields(
                  FORMAT("Document Type"),"Document No.",'',FORMAT(Type),"No.",Description,Quantity,"Unit of Measure Code");
                EXIT;
              END;
            WITH PurchLineArchive DO
              IF FilteredRecordExist(GETFILTERS,ISEMPTY) THEN BEGIN
                FINDFIRST;
                AssignLineFields(
                  FORMAT("Document Type"),"Document No.",ArchivedTxt,FORMAT(Type),"No.",Description,Quantity,"Unit of Measure Code");
              END;
          END;
        SourceDocType::BlanketPurchaseOrder:
          BEGIN
            WITH BlanketPurchOrderLine DO
              IF FilteredRecordExist(GETFILTERS,ISEMPTY) THEN BEGIN
                FINDFIRST;
                AssignLineFields(
                  FORMAT("Document Type"),"Document No.",'',FORMAT(Type),"No.",Description,Quantity,"Unit of Measure Code");
                EXIT;
              END;
            WITH BlanketPurchOrderLineArchive DO
              IF FilteredRecordExist(GETFILTERS,ISEMPTY) THEN BEGIN
                FINDFIRST;
                AssignLineFields(
                  FORMAT("Document Type"),"Document No.",ArchivedTxt,FORMAT(Type),"No.",Description,Quantity,"Unit of Measure Code");
              END;
          END;
        SourceDocType::SalesShipment:
          WITH SalesShptLine DO
            IF FilteredRecordExist(GETFILTERS,ISEMPTY) THEN BEGIN
              FINDFIRST;
              AssignLineFields(TABLECAPTION,"Document No.",'',FORMAT(Type),"No.",Description,Quantity,"Unit of Measure Code");
            END;
        SourceDocType::PurchaseReceipt:
          WITH PurchRcptLine DO
            IF FilteredRecordExist(GETFILTERS,ISEMPTY) THEN BEGIN
              FINDFIRST;
              AssignLineFields(TABLECAPTION,"Document No.",'',FORMAT(Type),"No.",Description,Quantity,"Unit of Measure Code");
            END;
        SourceDocType::SalesInvoice:
          WITH SalesInvLine DO
            IF FilteredRecordExist(GETFILTERS,ISEMPTY) THEN BEGIN
              FINDFIRST;
              AssignLineFields(TABLECAPTION,"Document No.",'',FORMAT(Type),"No.",Description,Quantity,"Unit of Measure Code");
            END;
        SourceDocType::PurchaseInvoice:
          WITH PurchInvLine DO
            IF FilteredRecordExist(GETFILTERS,ISEMPTY) THEN BEGIN
              FINDFIRST;
              AssignLineFields(TABLECAPTION,"Document No.",'',FORMAT(Type),"No.",Description,Quantity,"Unit of Measure Code");
            END;
        SourceDocType::ReturnShipment:
          WITH ReturnShipmentLine DO
            IF FilteredRecordExist(GETFILTERS,ISEMPTY) THEN BEGIN
              FINDFIRST;
              AssignLineFields(TABLECAPTION,"Document No.",'',FORMAT(Type),"No.",Description,Quantity,"Unit of Measure Code");
            END;
        SourceDocType::PurchaseCreditMemo:
          WITH PurchCrMemoLine DO
            IF FilteredRecordExist(GETFILTERS,ISEMPTY) THEN BEGIN
              FINDFIRST;
              AssignLineFields(TABLECAPTION,"Document No.",'',FORMAT(Type),"No.",Description,Quantity,"Unit of Measure Code");
            END;
        SourceDocType::SalesReturnOrder:
          WITH SalesLine DO
            IF FilteredRecordExist(GETFILTERS,ISEMPTY) THEN BEGIN
              FINDFIRST;
              AssignLineFields(TABLECAPTION,"Document No.",'',FORMAT(Type),"No.",Description,Quantity,"Unit of Measure Code");
            END;
        SourceDocType::ReturnReceipt:
          WITH ReturnReceiptLine DO
            IF FilteredRecordExist(GETFILTERS,ISEMPTY) THEN BEGIN
              FINDFIRST;
              AssignLineFields(TABLECAPTION,"Document No.",'',FORMAT(Type),"No.",Description,Quantity,"Unit of Measure Code");
            END;
        SourceDocType::SalesCreditMemo:
          WITH SalesCrMemoLine DO
            IF FilteredRecordExist(GETFILTERS,ISEMPTY) THEN BEGIN
              FINDFIRST;
              AssignLineFields(TABLECAPTION,"Document No.",'',FORMAT(Type),"No.",Description,Quantity,"Unit of Measure Code");
            END;
      END;
    END;

    LOCAL PROCEDURE AssignLineFields@21(NewDocType@1000 : Text[30];NewDocNo@1001 : Code[20];NewDocArchive@1002 : Text[30];NewDocLineType@1003 : Text[30];NewDocLineItemNo@1004 : Code[20];NewDocLineDescription@1005 : Text[100];NewDocLineQuantity@1006 : Decimal;NewDocLineUnit@1007 : Code[10]);
    BEGIN
      DocType := NewDocType;
      DocNo := NewDocNo;
      DocArchive := NewDocArchive;
      DocLineType := NewDocLineType;
      DocLineNo := NewDocLineItemNo;
      DocLineDescription := NewDocLineDescription;
      DocLineQuantity := NewDocLineQuantity; // 5
      DocLineUnit := NewDocLineUnit;
    END;

    LOCAL PROCEDURE FindPurchCreditMemoLines@39(OrderNo@1001 : Code[20];OrderLineNo@1000 : Integer);
    BEGIN
      IF PurchCrMemoLine.READPERMISSION THEN BEGIN
        PurchCrMemoLine.RESET;
        PurchCrMemoLine.SETRANGE("Order No.",OrderNo);
        PurchCrMemoLine.SETRANGE("Order Line No.",OrderLineNo);
        InsertIntoDocEntry(DATABASE::"Purch. Cr. Memo Line",3,PostedPurchaseCreditMemoLinesTxt,PurchCrMemoLine.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindPurchOrderLines@36(DocNo@1001 : Code[20];DocLineNo@1000 : Integer);
    BEGIN
      IF PurchLine.READPERMISSION THEN BEGIN
        PurchLine.RESET;
        PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::Order);
        PurchLine.SETRANGE("Document No.",DocNo);
        PurchLine.SETRANGE("Line No.",DocLineNo);
        InsertIntoDocEntry(DATABASE::"Purchase Line",1,PurchaseOrderLinesTxt,PurchLine.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindPurchOrderLinesByBlanketOrder@37(BlanketOrderNo@1001 : Code[20];BlanketOrderLineNo@1000 : Integer);
    BEGIN
      IF PurchLine.READPERMISSION THEN BEGIN
        PurchLine.RESET;
        PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::Order);
        PurchLine.SETRANGE("Blanket Order No.",BlanketOrderNo);
        PurchLine.SETRANGE("Blanket Order Line No.",BlanketOrderLineNo);
        InsertIntoDocEntry(DATABASE::"Purchase Line",1,PurchaseOrderLinesTxt,PurchLine.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindPurchBlanketOrderLines@53(DocNo@1001 : Code[20];DocLineNo@1000 : Integer);
    BEGIN
      IF BlanketPurchOrderLine.READPERMISSION THEN BEGIN
        BlanketPurchOrderLine.RESET;
        BlanketPurchOrderLine.SETRANGE("Document Type",BlanketPurchOrderLine."Document Type"::"Blanket Order");
        BlanketPurchOrderLine.SETRANGE("Document No.",DocNo);
        BlanketPurchOrderLine.SETRANGE("Line No.",DocLineNo);
        InsertIntoDocEntry(DATABASE::"Purchase Line",4,BlanketPurchaseOrderLinesTxt,BlanketPurchOrderLine.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindPurchReturnOrderLines@50(DocNo@1001 : Code[20];DocLineNo@1000 : Integer);
    BEGIN
      IF PurchLine.READPERMISSION THEN BEGIN
        PurchLine.RESET;
        PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::"Return Order");
        PurchLine.SETRANGE("Document No.",DocNo);
        PurchLine.SETRANGE("Line No.",DocLineNo);
        InsertIntoDocEntry(DATABASE::"Purchase Line",5,PurchaseReturnOrderLinesTxt,PurchLine.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindPurchOrderLinesArchive@29(DocNo@1001 : Code[20];DocLineNo@1000 : Integer);
    BEGIN
      IF PurchLineArchive.READPERMISSION THEN BEGIN
        PurchLineArchive.RESET;
        PurchLineArchive.SETRANGE("Document Type",PurchLineArchive."Document Type"::Order);
        PurchLineArchive.SETRANGE("Document No.",DocNo);
        PurchLineArchive.SETRANGE("Line No.",DocLineNo);
        InsertIntoDocEntry(DATABASE::"Purchase Line Archive",1,ArchivedPurchaseOrderLinesTxt,PurchLineArchive.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindPurchBlanketOrderLinesArchive@55(DocNo@1001 : Code[20];DocLineNo@1000 : Integer);
    BEGIN
      IF BlanketPurchOrderLineArchive.READPERMISSION THEN BEGIN
        BlanketPurchOrderLineArchive.RESET;
        BlanketPurchOrderLineArchive.SETRANGE("Document Type",BlanketPurchOrderLineArchive."Document Type"::"Blanket Order");
        BlanketPurchOrderLineArchive.SETRANGE("Document No.",DocNo);
        BlanketPurchOrderLineArchive.SETRANGE("Line No.",DocLineNo);
        InsertIntoDocEntry(
          DATABASE::"Purchase Line Archive",4,ArchivedBlanketPurchaseOrderLinesTxt,BlanketPurchOrderLineArchive.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindPurchReturnOrderLinesArchive@67(DocNo@1001 : Code[20];DocLineNo@1000 : Integer);
    BEGIN
      IF PurchLineArchive.READPERMISSION THEN BEGIN
        PurchLineArchive.RESET;
        PurchLineArchive.SETRANGE("Document Type",PurchLineArchive."Document Type"::"Return Order");
        PurchLineArchive.SETRANGE("Document No.",DocNo);
        PurchLineArchive.SETRANGE("Line No.",DocLineNo);
        InsertIntoDocEntry(DATABASE::"Purchase Line Archive",5,ArchivedPurchaseReturnOrderLinesTxt,PurchLineArchive.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindPurchOrderLinesArchiveByBlanketOrder@40(BlanketOrderNo@1001 : Code[20];BlanketOrderLineNo@1000 : Integer);
    BEGIN
      IF PurchLineArchive.READPERMISSION THEN BEGIN
        PurchLineArchive.RESET;
        PurchLineArchive.SETRANGE("Document Type",PurchLineArchive."Document Type"::Order);
        PurchLineArchive.SETRANGE("Blanket Order No.",BlanketOrderNo);
        PurchLineArchive.SETRANGE("Blanket Order Line No.",BlanketOrderLineNo);
        InsertIntoDocEntry(DATABASE::"Purchase Line Archive",1,ArchivedPurchaseOrderLinesTxt,PurchLineArchive.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindPurchReceiptLinesByOrder@8(OrderNo@1001 : Code[20];OrderLineNo@1000 : Integer);
    BEGIN
      IF PurchRcptLine.READPERMISSION THEN BEGIN
        PurchRcptLine.RESET;
        PurchRcptLine.SETCURRENTKEY("Order No.","Order Line No.");
        PurchRcptLine.SETRANGE("Order No.",OrderNo);
        PurchRcptLine.SETRANGE("Order Line No.",OrderLineNo);
        InsertIntoDocEntry(DATABASE::"Purch. Rcpt. Line",0,PostedPurchaseReceiptLinesTxt,PurchRcptLine.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindPurchReceiptLinesByBlanketOrder@10(BlanketOrderNo@1001 : Code[20];BlanketOrderLineNo@1000 : Integer);
    BEGIN
      IF PurchRcptLine.READPERMISSION THEN BEGIN
        PurchRcptLine.RESET;
        PurchRcptLine.SETRANGE("Blanket Order No.",BlanketOrderNo);
        PurchRcptLine.SETRANGE("Blanket Order Line No.",BlanketOrderLineNo);
        InsertIntoDocEntry(DATABASE::"Purch. Rcpt. Line",0,PostedPurchaseReceiptLinesTxt,PurchRcptLine.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindPurchInvoiceLinesByOrder@19(OrderNo@1001 : Code[20];OrderLineNo@1000 : Integer);
    BEGIN
      IF PurchInvLine.READPERMISSION THEN BEGIN
        PurchInvLine.RESET;
        PurchInvLine.SETRANGE("Order No.",OrderNo);
        PurchInvLine.SETRANGE("Order Line No.",OrderLineNo);
        InsertIntoDocEntry(DATABASE::"Purch. Inv. Line",0,PostedPurchaseInvoiceLinesTxt,PurchInvLine.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindPurchInvoiceLinesByBlanketOrder@23(BlanketOrderNo@1001 : Code[20];BlanketOrderLineNo@1000 : Integer);
    BEGIN
      IF PurchInvLine.READPERMISSION THEN BEGIN
        PurchInvLine.RESET;
        PurchInvLine.SETRANGE("Blanket Order No.",BlanketOrderNo);
        PurchInvLine.SETRANGE("Blanket Order Line No.",BlanketOrderLineNo);
        InsertIntoDocEntry(DATABASE::"Purch. Inv. Line",0,PostedPurchaseInvoiceLinesTxt,PurchInvLine.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindReturnReceiptLines@31(ReturnOrderNo@1000 : Code[20];ReturnOrderLineNo@1001 : Integer);
    BEGIN
      IF ReturnReceiptLine.READPERMISSION THEN BEGIN
        ReturnReceiptLine.RESET;
        ReturnReceiptLine.SETRANGE("Return Order No.",ReturnOrderNo);
        ReturnReceiptLine.SETRANGE("Return Order Line No.",ReturnOrderLineNo);
        InsertIntoDocEntry(DATABASE::"Return Receipt Line",5,PostedReturnReceiptLinesTxt,ReturnReceiptLine.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindReturnShipmentLines@38(ReturnOrderNo@1001 : Code[20];ReturnOrderLineNo@1000 : Integer);
    BEGIN
      IF ReturnShipmentLine.READPERMISSION THEN BEGIN
        ReturnShipmentLine.RESET;
        ReturnShipmentLine.SETRANGE("Return Order No.",ReturnOrderNo);
        ReturnShipmentLine.SETRANGE("Return Order Line No.",ReturnOrderLineNo);
        InsertIntoDocEntry(DATABASE::"Return Shipment Line",5,PostedReturnShipmentLinesTxt,ReturnShipmentLine.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindSalesCreditMemoLines@34(OrderNo@1001 : Code[20];OrderLineNo@1000 : Integer);
    BEGIN
      IF SalesCrMemoLine.READPERMISSION THEN BEGIN
        SalesCrMemoLine.RESET;
        SalesCrMemoLine.SETRANGE("Order No.",OrderNo);
        SalesCrMemoLine.SETRANGE("Order Line No.",OrderLineNo);
        InsertIntoDocEntry(DATABASE::"Sales Cr.Memo Line",3,PostedSalesCreditMemoLinesTxt,SalesCrMemoLine.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindSalesOrderLines@32(DocNo@1001 : Code[20];DocLineNo@1000 : Integer);
    BEGIN
      IF SalesLine.READPERMISSION THEN BEGIN
        SalesLine.RESET;
        SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
        SalesLine.SETRANGE("Document No.",DocNo);
        SalesLine.SETRANGE("Line No.",DocLineNo);
        InsertIntoDocEntry(DATABASE::"Sales Line",1,SalesOrderLinesTxt,SalesLine.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindSalesOrderLinesByBlanketOrder@41(BlanketOrderNo@1001 : Code[20];BlanketOrderLineNo@1000 : Integer);
    BEGIN
      IF SalesLine.READPERMISSION THEN BEGIN
        SalesLine.RESET;
        SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
        SalesLine.SETRANGE("Blanket Order No.",BlanketOrderNo);
        SalesLine.SETRANGE("Blanket Order Line No.",BlanketOrderLineNo);
        InsertIntoDocEntry(DATABASE::"Sales Line",1,SalesOrderLinesTxt,SalesLine.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindSalesBlanketOrderLines@60(DocNo@1001 : Code[20];DocLineNo@1000 : Integer);
    BEGIN
      IF BlanketSalesOrderLine.READPERMISSION THEN BEGIN
        BlanketSalesOrderLine.RESET;
        BlanketSalesOrderLine.SETRANGE("Document Type",BlanketSalesOrderLine."Document Type"::"Blanket Order");
        BlanketSalesOrderLine.SETRANGE("Document No.",DocNo);
        BlanketSalesOrderLine.SETRANGE("Line No.",DocLineNo);
        InsertIntoDocEntry(DATABASE::"Sales Line",4,BlanketSalesOrderLinesTxt,BlanketSalesOrderLine.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindSalesReturnOrderLines@62(DocNo@1001 : Code[20];DocLineNo@1000 : Integer);
    BEGIN
      IF SalesLine.READPERMISSION THEN BEGIN
        SalesLine.RESET;
        SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::"Return Order");
        SalesLine.SETRANGE("Document No.",DocNo);
        SalesLine.SETRANGE("Line No.",DocLineNo);
        InsertIntoDocEntry(DATABASE::"Sales Line",5,SalesReturnOrderLinesTxt,SalesLine.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindSalesOrderLinesArchive@35(DocNo@1001 : Code[20];DocLineNo@1000 : Integer);
    BEGIN
      IF SalesLineArchive.READPERMISSION THEN BEGIN
        SalesLineArchive.RESET;
        SalesLineArchive.SETRANGE("Document Type",SalesLineArchive."Document Type"::Order);
        SalesLineArchive.SETRANGE("Document No.",DocNo);
        SalesLineArchive.SETRANGE("Line No.",DocLineNo);
        InsertIntoDocEntry(DATABASE::"Sales Line Archive",1,ArchivedSalesOrderLinesTxt,SalesLineArchive.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindSalesBlanketOrderLinesArchive@61(DocNo@1001 : Code[20];DocLineNo@1000 : Integer);
    BEGIN
      IF BlanketSalesOrderLineArchive.READPERMISSION THEN BEGIN
        BlanketSalesOrderLineArchive.RESET;
        BlanketSalesOrderLineArchive.SETRANGE("Document Type",BlanketSalesOrderLineArchive."Document Type"::"Blanket Order");
        BlanketSalesOrderLineArchive.SETRANGE("Document No.",DocNo);
        BlanketSalesOrderLineArchive.SETRANGE("Line No.",DocLineNo);
        InsertIntoDocEntry(DATABASE::"Sales Line Archive",4,ArchivedBlanketSalesOrderLinesTxt,BlanketSalesOrderLineArchive.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindSalesReturnOrderLinesArchive@63(DocNo@1001 : Code[20];DocLineNo@1000 : Integer);
    BEGIN
      IF SalesLineArchive.READPERMISSION THEN BEGIN
        SalesLineArchive.RESET;
        SalesLineArchive.SETRANGE("Document Type",SalesLineArchive."Document Type"::"Return Order");
        SalesLineArchive.SETRANGE("Document No.",DocNo);
        SalesLineArchive.SETRANGE("Line No.",DocLineNo);
        InsertIntoDocEntry(DATABASE::"Sales Line Archive",5,ArchivedSalesReturnOrderLinesTxt,SalesLineArchive.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindSalesOrderLinesArchiveByBlanketOrder@43(BlanketOrderNo@1001 : Code[20];BlanketOrderLineNo@1000 : Integer);
    BEGIN
      IF SalesLineArchive.READPERMISSION THEN BEGIN
        SalesLineArchive.RESET;
        SalesLineArchive.SETRANGE("Document Type",SalesLineArchive."Document Type"::Order);
        SalesLineArchive.SETRANGE("Blanket Order No.",BlanketOrderNo);
        SalesLineArchive.SETRANGE("Blanket Order Line No.",BlanketOrderLineNo);
        InsertIntoDocEntry(DATABASE::"Sales Line Archive",1,ArchivedSalesOrderLinesTxt,SalesLineArchive.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindSalesShipmentLinesByOrder@20(OrderNo@1001 : Code[20];OrderLineNo@1000 : Integer);
    BEGIN
      IF SalesShptLine.READPERMISSION THEN BEGIN
        SalesShptLine.RESET;
        SalesShptLine.SETRANGE("Order No.",OrderNo);
        SalesShptLine.SETRANGE("Order Line No.",OrderLineNo);
        InsertIntoDocEntry(DATABASE::"Sales Shipment Line",0,PostedSalesShipmentLinesTxt,SalesShptLine.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindSalesShipmentLinesByBlanketOrder@22(BlanketOrderNo@1001 : Code[20];BlanketOrderLineNo@1000 : Integer);
    BEGIN
      IF SalesShptLine.READPERMISSION THEN BEGIN
        SalesShptLine.RESET;
        SalesShptLine.SETRANGE("Blanket Order No.",BlanketOrderNo);
        SalesShptLine.SETRANGE("Blanket Order Line No.",BlanketOrderLineNo);
        InsertIntoDocEntry(DATABASE::"Sales Shipment Line",0,PostedSalesShipmentLinesTxt,SalesShptLine.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindSalesInvoiceLinesByOrder@25(OrderNo@1001 : Code[20];OrderLineNo@1000 : Integer);
    BEGIN
      IF SalesInvLine.READPERMISSION THEN BEGIN
        SalesInvLine.RESET;
        SalesInvLine.SETRANGE("Order No.",OrderNo);
        SalesInvLine.SETRANGE("Order Line No.",OrderLineNo);
        InsertIntoDocEntry(
          DATABASE::"Sales Invoice Line",0,PostedSalesInvoiceLinesTxt,SalesInvLine.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindSalesInvoiceLinesByBlanketOrder@27(BlanketOrderNo@1001 : Code[20];BlanketOrderLineNo@1000 : Integer);
    BEGIN
      IF SalesInvLine.READPERMISSION THEN BEGIN
        SalesInvLine.RESET;
        SalesInvLine.SETRANGE("Blanket Order No.",BlanketOrderNo);
        SalesInvLine.SETRANGE("Blanket Order Line No.",BlanketOrderLineNo);
        InsertIntoDocEntry(DATABASE::"Sales Invoice Line",0,PostedSalesInvoiceLinesTxt,SalesInvLine.COUNT);
      END;
    END;

    LOCAL PROCEDURE FilteredRecordExist@24(Filters@1000 : Text;IsEmpty@1001 : Boolean) : Boolean;
    BEGIN
      IF Filters = '' THEN
        EXIT(FALSE);

      EXIT(NOT IsEmpty);
    END;

    BEGIN
    END.
  }
}

