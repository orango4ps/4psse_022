OBJECT Table 11012671 Project Inventory Delivery
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               VALIDATE("Item Composition");
               CheckEntityNo;
             END;

    OnModify=BEGIN
               VALIDATE("Item Composition");
               ProjectInventoryDeliveryReserv.VerifyChange(Rec,xRec); //DP00121
               CheckEntityNo;
             END;

    OnDelete=BEGIN
               //DP00121
               ProjectInventoryDeliveryReserv.DeleteLine(Rec);

               CALCFIELDS("Reserved Qty. (Base)");
               TESTFIELD("Reserved Qty. (Base)",0);
             END;

    CaptionML=[ENU=Project Inventory Delivery;
               NOR=Leveranse av prosjektlager;
               SVE=Leverans av projektlager];
  }
  FIELDS
  {
    { 10  ;   ;Project No.         ;Code20        ;TableRelation=Job;
                                                   CaptionML=[ENU=Project No.;
                                                              NOR=Prosjektnr.;
                                                              SVE=Projektnr] }
    { 20  ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              NOR=Linjenr.;
                                                              SVE=Radnr] }
    { 30  ;   ;Posting Date        ;Date          ;OnValidate=BEGIN
                                                                ProjectInventoryDeliveryReserv.VerifyChange(Rec,xRec); //DP00121
                                                              END;

                                                   CaptionML=[ENU=Posting Date;
                                                              NOR=Bokf›ringsdato;
                                                              SVE=Bokf”ringsdatum] }
    { 40  ;   ;Entry Type          ;Option        ;InitValue=Delivery;
                                                   OnValidate=BEGIN
                                                                IF "Entry Type" = "Entry Type"::Delivery THEN BEGIN
                                                                  ProjSetupRec.GET;
                                                                  ProjRec.GET("Project No.");
                                                                  IF (ProjSetupRec."Provisions at Closure") THEN
                                                                    ProjRec.CheckProjectStatus(-1)
                                                                  ELSE
                                                                    ProjRec.CheckProjectStatus(1);
                                                                END ELSE BEGIN
                                                                  Deliver := Deliver::" ";
                                                                  "Ship To Location" := '';
                                                                END;

                                                                IF "Entry Type" <> "Entry Type"::Transfer THEN BEGIN
                                                                  "Create Advice Order" := FALSE;
                                                                  "New Project No." := '';
                                                                  "New Location Code" := '';
                                                                  "New Bin Code" := '';  //db, 02-11-10
                                                                  "New Shelf No." := '';
                                                                  "New Element" := '';
                                                                  "New Extension Contract" := '';
                                                                  "New Plot No." := '';
                                                                END;

                                                                ProjectInventoryDeliveryReserv.VerifyChange(Rec,xRec); //DP00121
                                                              END;

                                                   CaptionML=[ENU=Entry Type;
                                                              NOR=Posttype;
                                                              SVE=Transaktionstyp];
                                                   OptionCaptionML=[ENU=Delivery,Positive Adjmt.,Negative Adjmt.,Transfer;
                                                                    NOR=Leveranse,Positiv justering,Negativ justering,Overf›ring;
                                                                    SVE=Leverans,Positiv just.,Negativ just.,™verf”ring];
                                                   OptionString=Delivery,Positive Adjmt.,Negative Adjmt.,Transfer }
    { 50  ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   OnValidate=BEGIN
                                                                IF "Item No." <> '' THEN BEGIN
                                                                  Manufacturer := '';
                                                                  "Basic Item" := '';
                                                                  "Vendor (Trade Item)" := '';
                                                                  "Trade Item" := '';

                                                                  GetItem;
                                                                  Description := ItemRec.Description;
                                                                  VALIDATE("Unit of Measure Code", ItemRec."Base Unit of Measure");
                                                                END;
                                                                VALIDATE("Item Composition");

                                                                ProjectInventoryDeliveryReserv.VerifyChange(Rec,xRec); //DP00121
                                                              END;

                                                   CaptionML=[ENU=Item No.;
                                                              NOR=Varenr.;
                                                              SVE=Artikelnr] }
    { 55  ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Item No.));
                                                   OnValidate=BEGIN
                                                                VALIDATE("Item Composition");

                                                                ProjectInventoryDeliveryReserv.VerifyChange(Rec,xRec); //DP00121
                                                              END;

                                                   CaptionML=[ENU=Variant Code;
                                                              NOR=Variantkode;
                                                              SVE=Variantkod] }
    { 60  ;   ;Manufacturer        ;Code15        ;TableRelation="ETIM Vendor - Central Mgt";
                                                   OnValidate=BEGIN
                                                                IF Manufacturer <> '' THEN
                                                                  TESTFIELD("Item No.", '');

                                                                VALIDATE("Item Composition");
                                                              END;

                                                   CaptionML=[ENU=Manufacturer;
                                                              NOR=Produsent;
                                                              SVE=Tillverkare] }
    { 70  ;   ;Basic Item          ;Code20        ;TableRelation="Basic Item"."Product Code" WHERE (Manufacturer=FIELD(Manufacturer));
                                                   OnValidate=BEGIN
                                                                IF ("Basic Item" = '') THEN BEGIN
                                                                  VALIDATE("Item Composition");
                                                                  EXIT;
                                                                END;

                                                                TESTFIELD("Item No.", '');

                                                                IF ("Basic Item" <> xRec."Basic Item") THEN
                                                                  ValidateItem((ItemTypeOpt::"Basic Item"));
                                                                VALIDATE("Item Composition");
                                                              END;

                                                   CaptionML=[ENU=Basic Item;
                                                              NOR=Fabrikantartikkel;
                                                              SVE=Basartikel] }
    { 80  ;   ;Vendor (Trade Item) ;Code15        ;TableRelation="ETIM Vendor - Central Mgt";
                                                   OnValidate=VAR
                                                                TradeItemRec@1100525000 : Record 11012317;
                                                                lvExecValidate@1100485000 : Boolean;
                                                              BEGIN
                                                                IF ("Vendor (Trade Item)" = '') THEN BEGIN
                                                                  VALIDATE("Item Composition");
                                                                  EXIT;
                                                                END;

                                                                TESTFIELD("Item No.", '');

                                                                IF ("Vendor (Trade Item)" <> xRec."Vendor (Trade Item)") THEN BEGIN
                                                                  IF "Basic Item" <> '' THEN BEGIN
                                                                    "Trade Item" := '';
                                                                    lvExecValidate := TRUE;
                                                                  END;
                                                                  IF "Trade Item" <> '' THEN BEGIN
                                                                    VALIDATE("Trade Item");
                                                                    lvExecValidate := TRUE;
                                                                  END;
                                                                  //db.sn, 17-12-10: M18021
                                                                  IF lvExecValidate THEN BEGIN
                                                                    IF TradeItemRec.CheckReplaceVendor(
                                                                      xRec."Vendor (Trade Item)", xRec."Trade Item",
                                                                      "Vendor (Trade Item)", "Trade Item") THEN
                                                                      ValidateItem(ItemTypeOpt::"Trade Item")
                                                                    ELSE
                                                                      ValidateItem(ItemTypeOpt::"Trade Vendor");
                                                                  END;
                                                                  //db.en, 17-12-10: M18021
                                                                END;
                                                                VALIDATE("Item Composition");
                                                              END;

                                                   CaptionML=[ENU=Vendor (Trade Item);
                                                              NOR=Leverand›r (katalogartikkel);
                                                              SVE=Leverant”r (skaffningsartikel)] }
    { 90  ;   ;Trade Item          ;Code20        ;TableRelation="Trade Item"."Item Code" WHERE (Vendor=FIELD("Vendor (Trade Item)"));
                                                   OnValidate=BEGIN
                                                                IF ("Trade Item" = '') THEN BEGIN
                                                                  VALIDATE("Item Composition");
                                                                  EXIT;
                                                                END;

                                                                TESTFIELD("Item No.", '');

                                                                IF ("Trade Item" <> xRec."Trade Item") THEN
                                                                  ValidateItem((ItemTypeOpt::"Trade Item"));
                                                                VALIDATE("Item Composition");
                                                              END;

                                                   CaptionML=[ENU=Trade Item;
                                                              NOR=Katalogartikkel;
                                                              SVE=Anskaffningsartikel] }
    { 100 ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=[ENU=Global Dimension 1 Code;
                                                              NOR=Global dimensjon 1 - kode;
                                                              SVE=Global dimension 1 kod];
                                                   CaptionClass='1,1,1' }
    { 101 ;   ;Global Dimension 2 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   CaptionML=[ENU=Global Dimension 2 Code;
                                                              NOR=Global Dimensjon 2-kode;
                                                              SVE=Global dimension 2 kod];
                                                   CaptionClass='1,1,2' }
    { 110 ;   ;Description         ;Text100       ;OnValidate=BEGIN
                                                                VALIDATE("Item Composition");
                                                              END;

                                                   CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 115 ;   ;Description 2       ;Text50        ;OnValidate=BEGIN
                                                                VALIDATE("Item Composition");
                                                              END;

                                                   CaptionML=[ENU=Description 2;
                                                              NOR=Beskrivelse 2;
                                                              SVE=Beskrivning 2] }
    { 120 ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Inventory Quantity", "Receipt Quantity");
                                                                IF ("Location Code" <> xRec."Location Code") AND ("Location Code" <> '') THEN
                                                                  "Bin Code" := GetDefaultBin("Location Code");  //db, 02-11-10
                                                              END;

                                                   CaptionML=[ENU=Location Code;
                                                              NOR=Plasseringkode;
                                                              SVE=Lagerst„llekod] }
    { 130 ;   ;Shelf No.           ;Code20        ;TableRelation="Shelf per Location".Code WHERE (Location Code=FIELD(Location Code));
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Inventory Quantity", "Receipt Quantity");
                                                              END;

                                                   CaptionML=[ENU=Shelf No.;
                                                              NOR=Hyllenr.;
                                                              SVE=Hyllnr] }
    { 135 ;   ;Bin Code            ;Code20        ;OnValidate=VAR
                                                                WMSManagement@1001 : Codeunit 7302;
                                                                Location@1100526200 : Record 14;
                                                                PrefBin@1100525000 : Record 11020629;
                                                              BEGIN
                                                                //db, 02-11-10
                                                                WMSManagement.FindBin("Location Code","Bin Code",'');
                                                                TESTFIELD("Location Code");
                                                                IF "Bin Code" <> '' THEN BEGIN
                                                                  Location.GET("Location Code");
                                                                  Location.TESTFIELD("Bin Mandatory");
                                                                END;

                                                                PrefBin.CheckBinLocationBinding("Project No.",'',"Location Code","Bin Code");

                                                                ProjectInventoryDeliveryReserv.VerifyChange(Rec,xRec); //DP00121
                                                              END;

                                                   OnLookup=VAR
                                                              WMSManagement@1002 : Codeunit 7302;
                                                              BinCode@1000 : Code[20];
                                                            BEGIN
                                                              //db, 02-11-10
                                                              BinCode := WMSManagement.BinLookUpSpecific("Location Code","Item No.",'','',"Project No.",'',"Bin Code");
                                                              IF BinCode <> '' THEN
                                                                VALIDATE("Bin Code",BinCode);
                                                            END;

                                                   CaptionML=[ENU=Bin Code;
                                                              NOR=Hyllekode;
                                                              SVE=Lagerplatskod] }
    { 140 ;   ;Quantity            ;Decimal       ;OnValidate=VAR
                                                                Item@1100528600 : Record 27;
                                                              BEGIN
                                                                CheckProjectInventory(Rec);
                                                                IF (Quantity = 0) AND ("Employee No." <> '') THEN
                                                                  VALIDATE("Employee No.");

                                                                //DP00121.sn
                                                                IF "Item No." <> '' THEN BEGIN  //C004606.n
                                                                  Item.GET("Item No.");
                                                                  IF Item."Item Tracking Code" <> '' THEN
                                                                    ProjectInventoryDeliveryReserv.VerifyQuantity(Rec,xRec);
                                                                END;  //C004606.n
                                                                //DP00121.en
                                                              END;

                                                   CaptionML=[ENU=Delivery Quantity;
                                                              NOR=Leveranseantall;
                                                              SVE=Leveransantal];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 150 ;   ;Unit of Measure Code;Code10        ;TableRelation="Unit of Measure";
                                                   OnValidate=VAR
                                                                ItemUnitRec@1100525000 : Record 5404;
                                                              BEGIN
                                                                //db, 28-02-13: C005312 (changed table relation; due to problem with rename base-unit)
                                                                IF "Item No." <> '' THEN
                                                                  ItemUnitRec.GET("Item No.", "Unit of Measure Code");

                                                                CALCFIELDS("Inventory Quantity", "Receipt Quantity");
                                                              END;

                                                   CaptionML=[ENU=Unit of Measure Code;
                                                              NOR=Enhetskode;
                                                              SVE=Enhetskod] }
    { 160 ;   ;Employee No.        ;Code20        ;TableRelation=Employee;
                                                   OnValidate=BEGIN
                                                                IF (Quantity = 0) THEN
                                                                  "Employee No." := '';
                                                              END;

                                                   CaptionML=[ENU=Employee No.;
                                                              NOR=Ansattnr;
                                                              SVE=Anst„llningsnr] }
    { 170 ;   ;Deliver             ;Option        ;OnValidate=BEGIN
                                                                IF Deliver <> Deliver::" " THEN
                                                                  TESTFIELD("Entry Type", "Entry Type"::Delivery);

                                                                IF Deliver <> xRec.Deliver THEN
                                                                  "Ship To Location" := '';
                                                              END;

                                                   CaptionML=[ENU=Deliver;
                                                              NOR=Lever;
                                                              SVE=Leverera];
                                                   OptionCaptionML=[ENU=" ,Project Location,Location";
                                                                    NOR=" ,Prosjektplassering,Plassering";
                                                                    SVE=" ,Projektlagerst„lle,Lagerst„lle"];
                                                   OptionString=[ ,Project Location,Location] }
    { 175 ;   ;Ship To Location    ;Code10        ;TableRelation=IF (Deliver=CONST(Project Location)) "Project Location".Code WHERE (Project No.=FIELD(Project No.))
                                                                 ELSE IF (Deliver=CONST(Location)) Location.Code;
                                                   OnValidate=BEGIN
                                                                IF "Ship To Location" <> '' THEN
                                                                  TESTFIELD(Deliver);
                                                              END;

                                                   CaptionML=[ENU=Ship To Location;
                                                              NOR=Lever til lokasjon;
                                                              SVE=Leverera till lagerst„lle] }
    { 200 ;   ;New Project No.     ;Code20        ;TableRelation=Job;
                                                   OnValidate=BEGIN
                                                                IF "New Project No." <> '' THEN BEGIN
                                                                  TESTFIELD("Entry Type","Entry Type"::Transfer);
                                                                  ProjSetupRec.GET;
                                                                  ProjRec.GET("New Project No.");
                                                                  IF (ProjSetupRec."Provisions at Closure") THEN
                                                                    ProjRec.CheckProjectStatus(-1)
                                                                  ELSE
                                                                    ProjRec.CheckProjectStatus(1);

                                                                  IF "Create Advice Order" AND ("New Project No." = "Project No.") THEN
                                                                    "Create Advice Order" := FALSE;
                                                                END;

                                                                ProjectInventoryDeliveryReserv.VerifyChange(Rec,xRec); //DP00121
                                                              END;

                                                   CaptionML=[ENU=New Project No.;
                                                              NOR=Nytt prosjektnr.;
                                                              SVE=Nytt projektnr] }
    { 210 ;   ;New Location Code   ;Code10        ;TableRelation=Location;
                                                   OnValidate=BEGIN
                                                                IF "New Location Code" = '' THEN BEGIN
                                                                  "New Bin Code" := '';   //db, 14-12-10
                                                                  "New Shelf No." := '';  //db, 14-12-10
                                                                END ELSE
                                                                  TESTFIELD("Entry Type","Entry Type"::Transfer);

                                                                ProjectInventoryDeliveryReserv.VerifyChange(Rec,xRec); //DP00121
                                                              END;

                                                   CaptionML=[ENU=New Location Code;
                                                              NOR=Ny lokasjonskode;
                                                              SVE=Ny lagerst„llekod] }
    { 215 ;   ;New Bin Code        ;Code20        ;OnValidate=VAR
                                                                WMSManagement@1001 : Codeunit 7302;
                                                                Location@1100526200 : Record 14;
                                                              BEGIN
                                                                //db, 02-11-10
                                                                IF "New Bin Code" <> '' THEN BEGIN
                                                                  WMSManagement.FindBin("New Location Code","New Bin Code",'');
                                                                  TESTFIELD("New Location Code");
                                                                  IF "New Bin Code" <> '' THEN BEGIN
                                                                    Location.GET("New Location Code");
                                                                    Location.TESTFIELD("Bin Mandatory");
                                                                  END;
                                                                END;

                                                                ProjectInventoryDeliveryReserv.VerifyChange(Rec,xRec); //DP00121
                                                              END;

                                                   OnLookup=VAR
                                                              WMSManagement@1002 : Codeunit 7302;
                                                              BinCode@1000 : Code[20];
                                                            BEGIN
                                                              //db, 02-11-10
                                                              BinCode := WMSManagement.BinLookUpSpecific("New Location Code","Item No.",'','',"New Project No.",'',"New Bin Code");  //db, 01-09-11: M26935
                                                              IF BinCode <> '' THEN
                                                                VALIDATE("New Bin Code",BinCode);
                                                            END;

                                                   CaptionML=[ENU=New Bin Code;
                                                              NOR=Ny hyllekode;
                                                              SVE=Ny lagerplatskod] }
    { 220 ;   ;New Shelf No.       ;Code20        ;TableRelation="Shelf per Location".Code WHERE (Location Code=FIELD(New Location Code));
                                                   OnValidate=BEGIN
                                                                IF "New Shelf No." = '' THEN
                                                                  EXIT;

                                                                TESTFIELD("Entry Type","Entry Type"::Transfer);
                                                                TESTFIELD("New Location Code");

                                                                GetLocation("New Location Code");
                                                                LocRec.TESTFIELD("Directed Put-away and Pick",FALSE);
                                                              END;

                                                   CaptionML=[ENU=New Shelf No.;
                                                              NOR=Nytt Hyllenr.;
                                                              SVE=Nytt hyllnr] }
    { 221 ;   ;New Element         ;Code20        ;TableRelation="Project Element".Element WHERE (Project No.=FIELD(New Project No.));
                                                   OnValidate=BEGIN
                                                                //hbk,06-05-2010
                                                                IF "New Element" = '' THEN
                                                                  EXIT;

                                                                TESTFIELD("Entry Type","Entry Type"::Transfer);
                                                                FormatMgt.FormatElem("New Element",2,'');
                                                                ProjElemRec.GET("New Project No.", "New Element");
                                                                ProjElemRec.TESTFIELD(Blocked, FALSE);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=New Element;
                                                              NOR=Ny Element;
                                                              SVE=Nytt Element] }
    { 225 ;   ;Description New Element;Text50     ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project Element".Description WHERE (Project No.=FIELD(New Project No.),
                                                                                                           Element=FIELD(New Element)));
                                                   CaptionML=[ENU=Description New Element;
                                                              NOR=Beskrivelse, Nytt Element;
                                                              SVE=Beskrivning, nytt element];
                                                   Editable=No }
    { 230 ;   ;Create Advice Order ;Boolean       ;OnValidate=BEGIN
                                                                IF "Create Advice Order" THEN BEGIN
                                                                  TESTFIELD("Entry Type", "Entry Type"::Transfer);
                                                                  IF ("New Project No." = "Project No.") THEN
                                                                    "Create Advice Order" := FALSE;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Create Advice Order (From Project);
                                                              NOR=Opprette bestillingsunderlag (fra prosjekt);
                                                              SVE=Skapa best„llningsunderlag (fr†n projekt)];
                                                   Description=Only for transfer, for the 'From Project' }
    { 300 ;   ;Inventory Quantity  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Project Inventory Entry".Quantity WHERE (Project No.=FIELD(Project No.),
                                                                                                             Item Composition=FIELD(Item Composition),
                                                                                                             Location Code=FIELD(Location Code),
                                                                                                             Bin Code=FIELD(Bin Code),
                                                                                                             Shelf No.=FIELD(Shelf No.),
                                                                                                             Unit of Measure Code=FIELD(Unit of Measure Code),
                                                                                                             Element=FIELD(Element),
                                                                                                             Assembly Yard Number Object=FIELD(Assembly Yard Number Object),
                                                                                                             Receipt No.=FIELD(FILTER(Purchase Receipt No.)),
                                                                                                             Receipt Line No.=FIELD(FILTER(Purchase Rcpt. Line No. Filter)),
                                                                                                             Extension Contract=FIELD(Extension Contract),
                                                                                                             Plot No.=FIELD(Plot No.)));
                                                   CaptionML=[ENU=Inventory Quantity;
                                                              NOR=Lagerantall;
                                                              SVE=Lagerantal];
                                                   Editable=No }
    { 310 ;   ;Receipt Quantity    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Project Inventory Entry".Quantity WHERE (Project No.=FIELD(Project No.),
                                                                                                             Item Composition=FIELD(Item Composition),
                                                                                                             Location Code=FIELD(Location Code),
                                                                                                             Bin Code=FIELD(Bin Code),
                                                                                                             Shelf No.=FIELD(Shelf No.),
                                                                                                             Unit of Measure Code=FIELD(Unit of Measure Code),
                                                                                                             Entry Type=FILTER(Receipt),
                                                                                                             Element=FIELD(Element),
                                                                                                             Assembly Yard Number Object=FIELD(Assembly Yard Number Object),
                                                                                                             Receipt No.=FIELD(FILTER(Purchase Receipt No.)),
                                                                                                             Receipt Line No.=FIELD(FILTER(Purchase Rcpt. Line No. Filter)),
                                                                                                             Extension Contract=FIELD(Extension Contract),
                                                                                                             Plot No.=FIELD(Plot No.)));
                                                   CaptionML=[ENU=Receipt Quantity;
                                                              NOR=Kvittering, antall;
                                                              SVE=Inleverans, antal];
                                                   Editable=No }
    { 320 ;   ;Item Composition    ;Code120       ;OnValidate=BEGIN
                                                                FillItemComposition();
                                                                CALCFIELDS("Inventory Quantity", "Receipt Quantity");
                                                              END;

                                                   CaptionML=[ENU=Item Composition;
                                                              NOR=Artikkelsammensetning;
                                                              SVE=Artikel f”r offentligt ackord];
                                                   Editable=No }
    { 330 ;   ;Entity Type         ;Option        ;OnValidate=BEGIN
                                                                VALIDATE("Item Composition");
                                                              END;

                                                   CaptionML=[ENU=Entity Type;
                                                              NOR=Enhetstype;
                                                              SVE=Enhetstyp];
                                                   OptionCaptionML=[ENU=None,Cable,Device,Extra Need,Cable Transit,,,,,Position;
                                                                    NOR=Ingen,Kabel,Enhet,Ekstra behov,Kabeloverf›ring,,,,,Posisjon;
                                                                    SVE=Ingen,Kabel,Anordning,Extra behov,Kabel”verf”ring,,,,,Position];
                                                   OptionString=None,Cable,Device,ExtraNeed,Cable Transit,,,,,Position;
                                                   Editable=No }
    { 331 ;   ;System No.          ;Code20        ;OnValidate=BEGIN
                                                                VALIDATE("Item Composition");
                                                              END;

                                                   CaptionML=[ENU=System No.;
                                                              NOR=Systemnr;
                                                              SVE=Systemnr];
                                                   Editable=No }
    { 332 ;   ;Entity No.          ;Code20        ;OnValidate=BEGIN
                                                                VALIDATE("Item Composition");
                                                              END;

                                                   CaptionML=[ENU=Entity No.;
                                                              NOR=Enhetsnr;
                                                              SVE=Enhetsnr];
                                                   Editable=No }
    { 333 ;   ;Gland Position      ;Option        ;CaptionML=[ENU=Cable Gland Postion;
                                                              NOR=Pakkboksens posisjon;
                                                              SVE=Packboxens position];
                                                   OptionCaptionML=[ENU=" ,From Side,To Side";
                                                                    NOR=" ,Fra side,Til side";
                                                                    SVE=" ,Fr†n sida,Till sida"];
                                                   OptionString=[ ,From,To];
                                                   Editable=No }
    { 340 ;   ;Element             ;Code20        ;TableRelation="Project Element".Element WHERE (Project No.=FIELD(Project No.));
                                                   OnValidate=BEGIN
                                                                FormatMgt.FormatElem(Element,2,''); //hbk,06-05-2010
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Element;
                                                              NOR=Element;
                                                              SVE=Element] }
    { 345 ;   ;Description Element ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project Element".Description WHERE (Project No.=FIELD(Project No.),
                                                                                                           Element=FIELD(Element)));
                                                   CaptionML=[ENU=Description Element;
                                                              NOR=Beskrivelse, element;
                                                              SVE=Beskrivning, element];
                                                   Editable=No }
    { 350 ;   ;Anonymous           ;Boolean       ;CaptionML=[ENU=Anonymous;
                                                              NOR=Anonym;
                                                              SVE=Anonym] }
    { 370 ;   ;Purch. Detail No.   ;Code10        ;OnValidate=VAR
                                                                ProjectInventoryEntry@1100529000 : Record 11012670;
                                                              BEGIN
                                                                ProjectInventoryEntry.CheckDetailNoPrjInventDelivery(Rec);
                                                                VALIDATE("Item Composition");
                                                              END;

                                                   OnLookup=VAR
                                                              Text@1100529000 : Text;
                                                            BEGIN
                                                              Text := "Purch. Detail No.";
                                                              IF LookupDetailNo(Text) THEN BEGIN
                                                                IF Text <> "Purch. Detail No." THEN
                                                                  VALIDATE("Purch. Detail No.", Text);
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Purch. Detail No. }
    { 400 ;   ;Yard No.            ;Code20        ;OnValidate=BEGIN
                                                                VALIDATE("Item Composition");
                                                              END;

                                                   CaptionML=[ENU=Yard No.;
                                                              NOR=Plassnr;
                                                              SVE=Platsnr];
                                                   NotBlank=Yes }
    { 410 ;   ;Assembly Yard Number Object;Boolean;CaptionML=[ENU=Assembly Yard Number Object;
                                                              NOR=Monteringsverksted Nummerobjekt;
                                                              SVE=Montering av varvnummerobjekt] }
    { 500 ;   ;Reserved Qty. (Base);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("NS Reservation Entry"."Quantity (Base)" WHERE (Source ID=FIELD(Project No.),
                                                                                                                   Source Ref. No.=FIELD(Line No.),
                                                                                                                   Source Type=CONST(11012671),
                                                                                                                   Reservation Status=CONST(Reservation)));
                                                   CaptionML=[ENU=Reserved Qty. (Base);
                                                              NOR=Reservert antall (lagerenhet);
                                                              SVE=Reserverat antal (bas)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 510 ;   ;Purchase Receipt No.;Code20        ;TableRelation="Purch. Rcpt. Header" WHERE (Job No.=FIELD(Project No.));
                                                   CaptionML=ENU=Purch. Rcpt. No.;
                                                   Description=BI006;
                                                   Editable=No }
    { 511 ;   ;Purchase Rcpt. Line No.;Integer    ;TableRelation="Purch. Rcpt. Line"."Line No." WHERE (Document No.=FIELD(Purchase Receipt No.),
                                                                                                       Job No.=FIELD(Project No.));
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Purch. Rcpt. Line No.;
                                                   Description=BI006;
                                                   Editable=No }
    { 512 ;   ;Purchase Rcpt. Line No. Filter;Text30;
                                                   CaptionML=ENU=Purchase Rcpt. Line No. Filter;
                                                   Description=BI006;
                                                   Editable=No }
    { 540 ;   ;Shipped             ;Boolean       ;CaptionML=[ENU=Shipped;
                                                              NOR=Levert;
                                                              SVE=Levererat];
                                                   Description=BI006;
                                                   Editable=No }
    { 550 ;   ;Comments for Logistics;Text50      ;CaptionML=[ENU=Comments for Logistics;
                                                              NOR=Kommentarer for logistikk;
                                                              SVE=Kommentarer f”r logistik];
                                                   Description=BI003a }
    { 600 ;   ;Purchase Route Reference;Code20    ;OnLookup=VAR
                                                              lvRouteRefMgtCU@1100529400 : Codeunit 11012045;
                                                            BEGIN
                                                              lvRouteRefMgtCU.ShowReferenceList("Purchase Route Reference");
                                                            END;

                                                   CaptionML=[ENU=Purchase Route Reference;
                                                              NOR=Referanse for Innkj›psrute;
                                                              SVE=Referens f”r ink”psf”ljd];
                                                   Description=DP01137;
                                                   Editable=No }
    { 605 ;   ;Purchase Requisition No.;Code20    ;TableRelation="Purchase Requisition";
                                                   CaptionML=[ENU=Purchase Requisition No.;
                                                              SVE=Ink”psrekvisition nr];
                                                   Description=DP01137;
                                                   Editable=No }
    { 610 ;   ;Plant Type          ;Code20        ;TableRelation="Plant Type";
                                                   CaptionML=[ENU=Plant Type;
                                                              NOR=Maskintype;
                                                              SVE=Maskintyp];
                                                   Description=DP01137 }
    { 620 ;   ;Plant No.           ;Code10        ;TableRelation="Plant Number".No. WHERE (Plant Type=FIELD(Plant Type));
                                                   CaptionML=[ENU=Plant No.;
                                                              NOR=Maskinnr.;
                                                              SVE=Maskinnr];
                                                   Description=DP01137 }
    { 625 ;   ;Comment             ;Text50        ;CaptionML=[ENU=Comment;
                                                              NOR=Kommentar;
                                                              SVE=Kommentar];
                                                   Description=DP01137 }
    { 630 ;   ;Extension Contract  ;Code10        ;TableRelation="Extension Contract"."Contract No." WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=[ENU=Extension Contract;
                                                              SVE=ŽTA] }
    { 640 ;   ;Plot No.            ;Code10        ;TableRelation=Plot."Plot No." WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=[ENU=Plot No.;
                                                              SVE=Ritningnr] }
    { 650 ;   ;New Extension Contract;Code10      ;TableRelation="Extension Contract"."Contract No." WHERE (Project No.=FIELD(New Project No.));
                                                   OnValidate=BEGIN
                                                                IF "New Extension Contract" <> '' THEN
                                                                  TESTFIELD("Entry Type","Entry Type"::Transfer);
                                                              END;

                                                   CaptionML=[ENU=New Extension Contract;
                                                              SVE=Nytt ŽTA] }
    { 660 ;   ;New Plot No.        ;Code10        ;TableRelation=Plot."Plot No." WHERE (Project No.=FIELD(New Project No.));
                                                   OnValidate=BEGIN
                                                                IF "New Plot No." <> '' THEN
                                                                  TESTFIELD("Entry Type","Entry Type"::Transfer);
                                                              END;

                                                   CaptionML=[ENU=New Plot No.;
                                                              SVE=Nytt ritningnr] }
  }
  KEYS
  {
    {    ;Project No.,Line No.                    ;Clustered=Yes }
    {    ;Project No.,Deliver,Ship To Location     }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ProjSetupRec@1210190009 : Record 315;
      ProjRec@1210190002 : Record 11072003;
      ProjElemRec@1100525001 : Record 11012010;
      ItemRec@1010 : Record 27;
      LocRec@1210190006 : Record 14;
      ProjInventEntryRec@1210190000 : Record 11012670;
      ValidateCu@1210190003 : Codeunit 11012033;
      FormatMgt@1100525000 : Codeunit 11012022;
      ProjectInventoryDeliveryReserv@1100528600 : Codeunit 11012355;
      ItemTypeOpt@1210190001 : 'Item,Basic Item,Trade Item,Trade Vendor';
      Text000@1210190005 : TextConst 'ENU=Quantity is greater than the project inventory (%1) of Project ''%2'', Item ''%3'', Manufacturer ''%4'', Basic Item ''%5'', Vendor ''%6'', Trade Item ''%7'', Element ''%8'', %9';
      Text001@1210190007 : TextConst 'ENU=Location ''%1'', Bin ''%2'', Shelf ''%3'', Unit ''%4'' on the Date %5.;NOR=Plassering ''%1'', Lagerplass ''%2'', Hylle ''%3'', Enhet ''%4'' p† Datoen %5.;SVE=Lagerst„lle ''%1'', lagerplats ''%2'', hylla ''%3'', enhet ''%4'' p† datumet %5.';
      Text002@1210190008 : TextConst 'ENU=Location ''%1'',  Bin ''%2, Shelf ''%3'', Unit ''%4''.;NOR=Plassering ''%1'', Lagerplass ''%2'', Hylle ''%3'', Enhet ''%4''.;SVE=Lagerst„lle ''%1'', lagerplats ''%2'', hylla ''%3'', enhet ''%4''.';
      Text003@1100529400 : TextConst 'ENU=The related handling unit contains another line (%1, %2), which is not selected. Continue?';
      Text004@1100529401 : TextConst 'ENU=Some of selected lines has already been assigned to a Shipping Order. Continue?';
      Text005@1100529402 : TextConst 'ENU=All of selected lines has already been assigned to a Shipping Order.';

    PROCEDURE EmptyLine@5() : Boolean;
    BEGIN
      IF ("Entry Type" = "Entry Type"::Delivery) AND (Quantity = 0) THEN  // These lines are automatically added,
        EXIT(TRUE);                                                       // if quantity not filled then skip

      EXIT(
        ("Item No." = '') AND ("Basic Item" = '') AND ("Trade Item" = '') AND
        (Description = '') AND (Quantity = 0));
    END;

    LOCAL PROCEDURE GetItem@2();
    BEGIN
      IF ItemRec."No." <> "Item No." THEN
        ItemRec.GET("Item No.");
    END;

    LOCAL PROCEDURE GetLocation@7300(ILocation@1000 : Code[10]);
    BEGIN
      IF (ILocation = '') THEN
        CLEAR(LocRec)
      ELSE
        IF LocRec.Code <> ILocation THEN
          LocRec.GET(ILocation);
    END;

    PROCEDURE ValidateItem@6509(LTypeArtOpt@11012000 : 'Item,Basic Item,Trade Item,Trade Vendor');
    VAR
      lvDummyDat@11012001 : Date;
      lvDummyDec@1210190001 : Decimal;
      lvDummyCode@11012003 : Code[30];
      lvDummyItem@1210190000 : Code[20];
      lvRefDate@1100485002 : Date;
      lvDiscRef1@1100485001 : Code[20];
      lvDiscRef2@1100485000 : Code[20];
    BEGIN
      IF "Item No." <> '' THEN
        EXIT;

      lvDummyItem := '';

      ProjRec.GET("Project No.");
      lvRefDate := ValidateCu.GetRefDateProject(ProjRec);
      lvDiscRef1 := ProjRec."Purch Discount Term Group 1";
      lvDiscRef2 := ProjRec."Purch Discount Term Group 2";

      ValidateCu.ValidateItem(LTypeArtOpt, "Trade Item", lvDummyItem, Manufacturer, "Vendor (Trade Item)",
                                   "Basic Item", lvDummyCode, Description, "Unit of Measure Code", lvDummyDec,
                                   lvDummyDec, lvDummyDat, lvDummyDec, "Description 2", lvDummyCode,
                                   lvDiscRef1,lvDiscRef2,lvRefDate,'');

      VALIDATE("Item Composition");
    END;

    PROCEDURE CheckProjectInventory@1210190000(ProjInventDeliveryRec@1210190001 : Record 11012671);
    VAR
      lvQuantity@1210190000 : Decimal;
      lvQuantityOnDate@1210190003 : Decimal;
      lvTextStr@1210190002 : Text[250];
    BEGIN
      WITH ProjInventDeliveryRec DO BEGIN
        IF NOT ("Entry Type" IN ["Entry Type"::Delivery, "Entry Type"::"Negative Adjmt.", "Entry Type"::Transfer]) THEN
          EXIT;

        lvQuantity := 0;
        lvQuantityOnDate := 0;

        ProjInventEntryRec.RESET;
        ProjInventEntryRec.SETCURRENTKEY("Project No.", "Item Composition", "Extension Contract", "Plot No.");  //db, 02-11-10
        ProjInventEntryRec.SETRANGE("Project No.", "Project No.");
        ProjInventEntryRec.SETRANGE("Item Composition", "Item Composition");
      //ProjInventEntryRec.SETRANGE(Manufacturer, Manufacturer); //hbk,10-06-2010,TM4870-1
      //ProjInventEntryRec.SETRANGE("Vendor (Trade Item)", "Vendor (Trade Item)");  //db, 02-11-10
        ProjInventEntryRec.SETRANGE("Location Code", "Location Code");
        ProjInventEntryRec.SETRANGE("Bin Code", "Bin Code");  //db, 02-11-10
        ProjInventEntryRec.SETRANGE("Shelf No.", "Shelf No.");
        ProjInventEntryRec.SETRANGE("Unit of Measure Code", "Unit of Measure Code");
        ProjInventEntryRec.SETRANGE(Element,Element); //hbk,10-06-2010,TM4870-1
        ProjInventEntryRec.SETRANGE("Assembly Yard Number Object","Assembly Yard Number Object");
        ProjInventEntryRec.SETRANGE("Extension Contract", "Extension Contract");
        ProjInventEntryRec.SETRANGE("Plot No.", "Plot No.");
        //**4PS.sn BI006 KD 14-06-16
        IF "Purchase Rcpt. Line No. Filter" <> '' THEN BEGIN
          ProjInventEntryRec.SETRANGE("Receipt No.","Purchase Receipt No.");
          ProjInventEntryRec.SETRANGE("Receipt Line No.","Purchase Rcpt. Line No.");
        END;
        //**4PS.en BI006 KD 14-06-16
        IF ProjInventEntryRec.FIND('-') THEN BEGIN
          REPEAT
            lvQuantity := lvQuantity + ProjInventEntryRec.Quantity;
            IF ProjInventEntryRec."Posting Date" <= "Posting Date" THEN
              lvQuantityOnDate  := lvQuantityOnDate + ProjInventEntryRec.Quantity;
          UNTIL ProjInventEntryRec.NEXT = 0;
        END;

        IF "Purch. Detail No." <> '' THEN
          lvTextStr := STRSUBSTNO('%1 %2, ', FIELDCAPTION("Purch. Detail No."), "Purch. Detail No.");
        IF (Quantity > lvQuantityOnDate) THEN BEGIN
          lvTextStr := lvTextStr + STRSUBSTNO(Text001, "Location Code", "Bin Code", "Shelf No.", "Unit of Measure Code", "Posting Date");
          ERROR(Text000, lvQuantity, "Project No.", "Item No.", Manufacturer, "Basic Item", "Vendor (Trade Item)",
            "Trade Item", Element, lvTextStr); //hbk,10-06-10,TM4871: added element
        END;
        IF (Quantity > lvQuantity) THEN BEGIN
          lvTextStr := lvTextStr + STRSUBSTNO(Text002, "Location Code", "Bin Code", "Shelf No.", "Unit of Measure Code");
          ERROR(Text000, lvQuantity, "Project No.", "Item No.", Manufacturer, "Basic Item", "Vendor (Trade Item)",
            "Trade Item", Element, lvTextStr); //hbk,10-06-10,TM4871: added element
        END;
      END;
    END;

    PROCEDURE GetDefaultBin@1100526200(iLoc@1100526202 : Code[20]) : Code[20];
    VAR
      Location@1100526204 : Record 14;
      WMSManagement@1100526203 : Codeunit 7302;
      BinCode@1100526205 : Code[20];
    BEGIN
      //db, 02-11-10
      Location.GET(iLoc);
      IF Location."Bin Mandatory" AND NOT Location."Directed Put-away and Pick" THEN BEGIN
        BinCode := WMSManagement.GetDefaultBinLocation(
          "Project No.",'',"Location Code","Item No.",'',TRUE);  //db, 30-03-11
      END;

      EXIT(BinCode);
    END;

    PROCEDURE FillQtyWithInventoryQty@1210190001();
    BEGIN
      //kkleermaker, 110909, M29027
      IF FINDSET THEN
        REPEAT
          CALCFIELDS("Inventory Quantity");
          IF "Inventory Quantity" > 0 THEN BEGIN
            VALIDATE(Quantity, "Inventory Quantity");
            MODIFY;
          END;
        UNTIL NEXT = 0;
    END;

    PROCEDURE UpdateDeliveryLines@1100528800(iProjNo@1100528800 : Code[20]);
    VAR
      lvProjInventDeliveryRec@1210190002 : Record 11012671;
      lvProjInventEntryRec@1210190001 : Record 11012670;
      lvProjInventEntryRec2@1210190000 : Record 11012670;
      lvTmpProjInventDeliveryRec@1100525000 : TEMPORARY Record 11012671;
      NextLineNo@1100528801 : Integer;
    BEGIN
      WITH lvProjInventDeliveryRec DO BEGIN
        LOCKTABLE;
        RESET;
        SETRANGE("Project No.", iProjNo);
        SETFILTER("Purchase Rcpt. Line No. Filter", '<>%1', '');
        DELETEALL;

        SETRANGE("Entry Type", "Entry Type"::Delivery);
        SETRANGE(Quantity, 0);
        SETRANGE("Purchase Rcpt. Line No. Filter", ''); //**4PS.n BI006 KD 14-06-16
        IF FINDSET(TRUE,FALSE) THEN BEGIN
          REPEAT
            IF Deliver <> Deliver::" " THEN BEGIN
              lvTmpProjInventDeliveryRec := lvProjInventDeliveryRec;
              lvTmpProjInventDeliveryRec.INSERT;
            END;
            DELETE;
          UNTIL NEXT = 0;
        END;

        RESET;
        SETRANGE("Project No.", iProjNo);
        IF NOT FINDLAST THEN
          NextLineNo := 10000
        ELSE
          NextLineNo := "Line No." + 10000;
      END;

      WITH lvProjInventEntryRec DO BEGIN
        CLEAR(lvProjInventEntryRec2);
        RESET;
        SETCURRENTKEY("Project No.", "Item Composition", "Extension Contract", "Plot No.");  //db, 02-11-10
        SETRANGE("Project No.", iProjNo);
        IF FIND('-') THEN BEGIN
          REPEAT
            IF (lvProjInventEntryRec2."Project No." <> "Project No.") OR
               (lvProjInventEntryRec2."Item Composition" <> "Item Composition") OR
               (lvProjInventEntryRec2."Location Code" <> "Location Code") OR
               (lvProjInventEntryRec2."Bin Code" <> "Bin Code") OR  //db, 02-11-10
               (lvProjInventEntryRec2."Shelf No." <> "Shelf No.") OR
               (lvProjInventEntryRec2."Unit of Measure Code" <> "Unit of Measure Code") OR
               (lvProjInventEntryRec2.Element <> Element) OR //hbk,10-06-10,TM4870
               (lvProjInventEntryRec2."Assembly Yard Number Object" <> "Assembly Yard Number Object") OR
               (lvProjInventEntryRec2."Extension Contract" <> "Extension Contract") OR
               (lvProjInventEntryRec2."Plot No." <> "Plot No.")
            THEN BEGIN
              CALCFIELDS("Inventory Quantity");
      //        IF ("Inventory Quantity" > 0) THEN BEGIN
              // Negative inventories are created, i.a. because for all items empty and same 'Desc. 1' and different
              // 'Descr. 2' the 2nd description was not taken into account (call 5936 dd 7-12-2004, O2 already from 2004-Q1).
              // These were not visible anymore after 2nd description was added to index (via "Item Composition").
              // Therefore test changed into '<> 0'. One can correct inventory via pos./neg. corrections.
              IF ("Inventory Quantity" <> 0) THEN
                IF AddLine(
                     lvProjInventEntryRec,
                     lvTmpProjInventDeliveryRec,
                     lvProjInventDeliveryRec,
                     NextLineNo) THEN
                  NextLineNo := NextLineNo + 10000;
            END;
            lvProjInventEntryRec2 := lvProjInventEntryRec;
          UNTIL NEXT = 0;
        END;
      END;
      COMMIT;
    END;

    PROCEDURE OpenItemTrackingLines@1100528600();
    VAR
      ProjectInventoryDelivReserve@1100528600 : Codeunit 11012355;
    BEGIN
      //DP00121
      TESTFIELD("Item No.");
      TESTFIELD(Quantity);
      ProjectInventoryDelivReserve.CallItemTracking(Rec);
    END;

    PROCEDURE AddLine@1100409000(ProjectInventoryEntry@1100409000 : Record 11012670;VAR TmpStoredProjInventoryDelivery@1100409003 : TEMPORARY Record 11012671;VAR ProjectInventoryDelivery@1100409005 : Record 11012671;NextLineNo@1100409002 : Integer) : Boolean;
    BEGIN
      //DP00121
      WITH ProjectInventoryEntry DO BEGIN
        IF GetProjInventoryDeliveryLine(ProjectInventoryDelivery) THEN
          EXIT(FALSE);

        IF NextLineNo = 0 THEN BEGIN
          ProjectInventoryDelivery.RESET;
          ProjectInventoryDelivery.SETRANGE("Project No.", "Project No.");
          IF NOT ProjectInventoryDelivery.FINDLAST THEN
            NextLineNo := 10000
          ELSE
            NextLineNo := ProjectInventoryDelivery."Line No." + 10000;
        END;

        ProjectInventoryDelivery.INIT;
        ProjectInventoryDelivery."Project No." := "Project No.";
        ProjectInventoryDelivery."Line No." := NextLineNo;
        ProjectInventoryDelivery."Posting Date" := TODAY;
        ProjectInventoryDelivery."Entry Type" := ProjectInventoryDelivery."Entry Type"::Delivery;
        ProjectInventoryDelivery."Entity Type" := "Entity Type";
        ProjectInventoryDelivery."System No." := "System No.";
        ProjectInventoryDelivery."Entity No." := "Entity No.";
        ProjectInventoryDelivery."Gland Position" := "Gland Position";
        ProjectInventoryDelivery."Item No." := "Item No.";
        ProjectInventoryDelivery.Manufacturer := Manufacturer;
        ProjectInventoryDelivery."Basic Item" := "Basic Item";
        ProjectInventoryDelivery."Vendor (Trade Item)" := "Vendor (Trade Item)";
        ProjectInventoryDelivery."Trade Item" := "Trade Item";
        ProjectInventoryDelivery.Description := Description;
        ProjectInventoryDelivery."Description 2" := "Description 2";
        ProjectInventoryDelivery."Location Code" := "Location Code";
        ProjectInventoryDelivery."Bin Code" := "Bin Code";  //db, 02-11-10
        ProjectInventoryDelivery."Shelf No." := "Shelf No.";
        ProjectInventoryDelivery.Quantity := 0;
        ProjectInventoryDelivery."Unit of Measure Code" := "Unit of Measure Code";
        ProjectInventoryDelivery.Element := Element; //hbk,10-06-10,TM4870
        ProjectInventoryDelivery."Variant Code" := "Variant Code"; // X0.71
        ProjectInventoryDelivery."Purch. Detail No." := "Purch. Detail No.";  //DP00749
        ProjectInventoryDelivery."Global Dimension 1 Code" := '';
        ProjectInventoryDelivery."Global Dimension 2 Code" := "Cost Object";
        ProjectInventoryDelivery."Yard No." := "Yard No."; //**4PS.n
        ProjectInventoryDelivery."Assembly Yard Number Object" := "Assembly Yard Number Object";
        //DP01137.sn
        ProjectInventoryDelivery."Purchase Route Reference" := "Purchase Route Reference";
        ProjectInventoryDelivery."Purchase Requisition No." := "Purchase Requisition No.";
        ProjectInventoryDelivery."Plant Type" := "Plant Type";
        ProjectInventoryDelivery."Plant No." := "Plant No.";
        ProjectInventoryDelivery.Comment := Comment;
        //DP01137.en
        ProjectInventoryDelivery."Comments for Logistics" := "Comments for Logistics";
        ProjectInventoryDelivery."Extension Contract" := "Extension Contract";
        ProjectInventoryDelivery."Plot No." := "Plot No.";

        TmpStoredProjInventoryDelivery.SETRANGE("Project No.", "Project No.");
        TmpStoredProjInventoryDelivery.SETRANGE("Item Composition", "Item Composition");
        TmpStoredProjInventoryDelivery.SETRANGE("Location Code", "Location Code");
        TmpStoredProjInventoryDelivery.SETRANGE("Bin Code", "Bin Code");  //db, 02-11-10
        TmpStoredProjInventoryDelivery.SETRANGE("Shelf No.", "Shelf No.");
        TmpStoredProjInventoryDelivery.SETRANGE("Unit of Measure Code", "Unit of Measure Code");
        TmpStoredProjInventoryDelivery.SETRANGE("Entry Type", ProjectInventoryDelivery."Entry Type"::Delivery);
        TmpStoredProjInventoryDelivery.SETRANGE(Element,Element); //hbk,10-06-10,TM4870
        TmpStoredProjInventoryDelivery.SETRANGE("Assembly Yard Number Object", "Assembly Yard Number Object");
        TmpStoredProjInventoryDelivery.SETRANGE("Extension Contract", "Extension Contract");
        TmpStoredProjInventoryDelivery.SETRANGE("Plot No.", "Plot No.");
        IF TmpStoredProjInventoryDelivery.FINDFIRST THEN BEGIN
          ProjectInventoryDelivery.Deliver := TmpStoredProjInventoryDelivery.Deliver;
          ProjectInventoryDelivery."Ship To Location" := TmpStoredProjInventoryDelivery."Ship To Location";
        END;

        ProjectInventoryDelivery.INSERT(TRUE);
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CheckEntityNo@1100528401();
    VAR
      JobsSetup@1100528400 : Record 315;
    BEGIN
      IF "Entity Type" = "Entity Type"::None THEN
        EXIT;

      IF JobsSetup.GET AND
         JobsSetup."Entity No. Mandatory"
      THEN
        TESTFIELD("Entity No.");
    END;

    PROCEDURE FillItemComposition@1100529003();
    BEGIN
      "Item Composition" := ProjInventEntryRec.ProjInvItemComposition(
        "Item No.","Trade Item","Basic Item",Description,"Description 2","Yard No.",
        "Entity Type","System No.","Entity No.",Manufacturer,"Vendor (Trade Item)","Variant Code","Purch. Detail No.");
    END;

    PROCEDURE PurchaseDetailDescription@1100529000() : Text;
    VAR
      PurchaseLineDetail@1100529000 : Record 11020660;
    BEGIN
      EXIT(PurchaseLineDetail.PurchaseDetailDescription("Purch. Detail No."));
    END;

    PROCEDURE ShowDetailCard@1100529001();
    VAR
      PurchaseLineDetail@1100529000 : Record 11020660;
    BEGIN
      TESTFIELD("Purch. Detail No.");
      PurchaseLineDetail.ShowDetailCardOfDetailNo("Purch. Detail No.");
    END;

    PROCEDURE LookupDetailNo@1100529002(VAR Text@1100529002 : Text) : Boolean;
    VAR
      ProjectInventoryDelivery@1100529000 : Record 11012671;
      ProjectInventoryEntry@1100529001 : Record 11012670;
    BEGIN
      ProjectInventoryDelivery := Rec;
      ProjectInventoryDelivery."Purch. Detail No." := '*';
      ProjectInventoryDelivery.FillItemComposition();

      ProjectInventoryEntry.FILTERGROUP(9);
      ProjectInventoryEntry.SETRANGE("Project No.", "Project No.");
      ProjectInventoryEntry.SETRANGE("Extension Contract", "Extension Contract");
      ProjectInventoryEntry.SETRANGE("Plot No.", "Plot No.");
      ProjectInventoryEntry.SETFILTER("Purch. Detail No.", '<>%1', '');
      ProjectInventoryEntry.FILTERGROUP(0);
      ProjectInventoryEntry.SETFILTER("Item Composition", ProjectInventoryDelivery."Item Composition");
      ProjectInventoryEntry."Item Composition" := "Item Composition";
      ProjectInventoryEntry."Extension Contract" := "Extension Contract";
      ProjectInventoryEntry."Plot No." := "Plot No.";
      IF PAGE.RUNMODAL(PAGE::"Project Inventory List", ProjectInventoryEntry) = ACTION::LookupOK THEN BEGIN
        Text := ProjectInventoryEntry."Purch. Detail No.";
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    PROCEDURE ShowPurchaseOrder@1100529004();
    VAR
      ProjectInventEntry@1100529001 : Record 11012670;
    BEGIN
      ProjectInventEntry."Project No." := "Project No.";
      ProjectInventEntry."Item Composition" := "Item Composition";
      ProjectInventEntry.Manufacturer := Manufacturer;
      ProjectInventEntry."Vendor (Trade Item)" := "Vendor (Trade Item)";
      ProjectInventEntry."Location Code" := "Location Code";
      ProjectInventEntry."Bin Code" := "Bin Code";
      ProjectInventEntry."Shelf No." := "Shelf No.";
      ProjectInventEntry."Unit of Measure Code" := "Unit of Measure Code";
      ProjectInventEntry.Element := Element;
      ProjectInventEntry."Assembly Yard Number Object" := "Assembly Yard Number Object";
      ProjectInventEntry."Extension Contract" := "Extension Contract";
      ProjectInventEntry."Plot No." := "Plot No.";
      ProjectInventEntry.ShowPurchaseOrderOfInventoryLine();
    END;

    PROCEDURE UpdateLinesBasedOnReceipts@1100525000(ProjectNo@1100528800 : Code[20]);
    VAR
      ProjectInventoryEntry@1100529400 : Record 11012670;
      ProjectInventoryEntryTmp@1100529720 : TEMPORARY Record 11012670;
      ProjInventoryDelivery@1210190002 : Record 11012671;
      ProjInventoryDeliveryTmp@1100529723 : TEMPORARY Record 11012671;
      NextLineNo@1100528801 : Integer;
    BEGIN
      //**4PS.sn BI006 KD 14-06-16
      ProjectInventoryEntryTmp.RESET;
      ProjectInventoryEntryTmp.DELETEALL;

      WITH ProjInventoryDelivery DO BEGIN
        LOCKTABLE;
        RESET;
        SETRANGE("Project No.", ProjectNo);
        SETRANGE("Purchase Rcpt. Line No. Filter", '');
        DELETEALL;

        SETRANGE("Entry Type", "Entry Type"::Delivery);
        SETRANGE(Quantity, 0);
        SETRANGE("Purchase Receipt No.", '');
        SETRANGE("Purchase Rcpt. Line No.", 0);
        SETFILTER("Purchase Rcpt. Line No. Filter", '<>%1', '');
        IF FINDSET(TRUE,FALSE) THEN BEGIN
          REPEAT
            IF Deliver <> Deliver::" " THEN BEGIN
              ProjInventoryDeliveryTmp := ProjInventoryDelivery;
              ProjInventoryDeliveryTmp.INSERT;
            END;
            DELETE;
          UNTIL NEXT = 0;
        END;

        RESET;
        SETRANGE("Project No.", ProjectNo);
        SETRANGE("Entry Type", "Entry Type"::Delivery);
        SETFILTER("Purchase Rcpt. Line No. Filter", '<>%1', '');
        SETAUTOCALCFIELDS("Inventory Quantity");
        SETRANGE("Inventory Quantity", 0);
        IF FINDSET THEN
          DELETEALL;

        RESET;
        SETRANGE("Project No.", ProjectNo);
        IF NOT FINDLAST THEN
          NextLineNo := 10000
        ELSE
          NextLineNo := "Line No." + 10000;
      END;


      WITH ProjectInventoryEntry DO BEGIN
        RESET;
        SETCURRENTKEY("Project No.", "Item Composition", "Extension Contract", "Plot No.");
        SETRANGE("Project No.", ProjectNo);
        IF FINDSET THEN
          REPEAT
            ProjectInventoryEntryTmp.SETRANGE("Item Composition", "Item Composition");
            ProjectInventoryEntryTmp.SETRANGE("Location Code", "Location Code");
            ProjectInventoryEntryTmp.SETRANGE("Bin Code", "Bin Code");
            ProjectInventoryEntryTmp.SETRANGE("Shelf No.", "Shelf No.");
            ProjectInventoryEntryTmp.SETRANGE("Unit of Measure Code", "Unit of Measure Code");
            ProjectInventoryEntryTmp.SETRANGE(Element, Element);
            ProjectInventoryEntryTmp.SETRANGE("Assembly Yard Number Object", "Assembly Yard Number Object");
            ProjectInventoryEntryTmp.SETRANGE("Receipt No.", "Receipt No.");
            ProjectInventoryEntryTmp.SETRANGE("Receipt Line No.", "Receipt Line No.");
            ProjectInventoryEntryTmp.SETRANGE("Extension Contract", "Extension Contract");
            ProjectInventoryEntryTmp.SETRANGE("Plot No.", "Plot No.");
            IF ProjectInventoryEntryTmp.FINDFIRST THEN BEGIN
              ProjectInventoryEntryTmp.Quantity += Quantity;
              ProjectInventoryEntryTmp.MODIFY;
            END ELSE BEGIN
              ProjectInventoryEntryTmp := ProjectInventoryEntry;
              ProjectInventoryEntryTmp.INSERT;
            END;
          UNTIL NEXT = 0;
      END;

      WITH ProjectInventoryEntryTmp DO BEGIN
        RESET;
        SETRANGE(Quantity,0);
        DELETEALL;
        RESET;

        IF FINDSET THEN
          REPEAT
            IF AddLinePurchReceipt(
              ProjectInventoryEntryTmp,
              ProjInventoryDeliveryTmp,
              ProjInventoryDelivery,
              NextLineNo)
            THEN
              NextLineNo += 10000;
          UNTIL NEXT = 0;
      END;
      COMMIT;
      //**4PS.en BI006 KD 14-06-16
    END;

    PROCEDURE AddLinePurchReceipt@1100529726(ProjectInventoryEntry@1100409000 : Record 11012670;VAR TmpStoredProjInventoryDelivery@1100409003 : TEMPORARY Record 11012671;VAR ProjectInventoryDelivery@1100409005 : Record 11012671;NextLineNo@1100409002 : Integer) : Boolean;
    VAR
      PurchRcptLine@1100529720 : Record 121;
    BEGIN
      //**4PS.sn BI006 KD 14-06-16
      WITH ProjectInventoryEntry DO BEGIN
        IF GetProjInventoryDeliveryLineReceipt(ProjectInventoryDelivery) THEN
          EXIT(FALSE);

        IF NextLineNo = 0 THEN BEGIN
          ProjectInventoryDelivery.RESET;
          ProjectInventoryDelivery.SETRANGE("Project No.", "Project No.");
          IF NOT ProjectInventoryDelivery.FINDLAST THEN
            NextLineNo := 10000
          ELSE
            NextLineNo := ProjectInventoryDelivery."Line No." + 10000;
        END;

        ProjectInventoryDelivery.INIT;
        ProjectInventoryDelivery."Project No." := "Project No.";
        ProjectInventoryDelivery."Line No." := NextLineNo;
        ProjectInventoryDelivery."Entry Type" := ProjectInventoryDelivery."Entry Type"::Delivery;
        ProjectInventoryDelivery.INSERT;

        IF PurchRcptLine.GET("Receipt No.", "Receipt Line No.") THEN BEGIN
          ProjectInventoryDelivery."Posting Date" := PurchRcptLine."Posting Date";
          ProjectInventoryDelivery."Global Dimension 1 Code" := PurchRcptLine."Shortcut Dimension 1 Code";
          ProjectInventoryDelivery."Global Dimension 2 Code" := PurchRcptLine."Shortcut Dimension 2 Code";
        END ELSE BEGIN
          ProjectInventoryDelivery."Posting Date" := TODAY;
          ProjectInventoryDelivery."Global Dimension 1 Code" := "Global Dimension 1 Code";
          ProjectInventoryDelivery."Global Dimension 2 Code" := "Global Dimension 2 Code";
        END;

        ProjectInventoryDelivery."Purchase Receipt No." := "Receipt No.";
        ProjectInventoryDelivery."Purchase Rcpt. Line No." := "Receipt Line No.";
        ProjectInventoryDelivery."Purchase Rcpt. Line No. Filter" := FORMAT("Receipt Line No.");

        ProjectInventoryDelivery."Item No." := "Item No.";
        ProjectInventoryDelivery."Variant Code" := "Variant Code";
        ProjectInventoryDelivery.Manufacturer := Manufacturer;
        ProjectInventoryDelivery."Basic Item" := "Basic Item";
        ProjectInventoryDelivery."Vendor (Trade Item)" := "Vendor (Trade Item)";
        ProjectInventoryDelivery."Trade Item" := "Trade Item";
        ProjectInventoryDelivery.Description := Description;
        ProjectInventoryDelivery."Description 2" := "Description 2";
        ProjectInventoryDelivery."Location Code" := "Location Code";
        ProjectInventoryDelivery."Bin Code" := "Bin Code";
        ProjectInventoryDelivery."Shelf No." := "Shelf No.";
        ProjectInventoryDelivery."Employee No." := "Employee No.";
        ProjectInventoryDelivery.Element := Element;
        ProjectInventoryDelivery."Entity Type" := "Entity Type";
        ProjectInventoryDelivery."System No." := "System No.";
        ProjectInventoryDelivery."Entity No." := "Entity No.";
        ProjectInventoryDelivery."Gland Position" := "Gland Position";
        ProjectInventoryDelivery.Quantity := 0;
        ProjectInventoryDelivery."Unit of Measure Code" := "Unit of Measure Code";
        ProjectInventoryDelivery."Purch. Detail No." := "Purch. Detail No.";
        ProjectInventoryDelivery."Yard No." := "Yard No.";
        ProjectInventoryDelivery."Assembly Yard Number Object" := "Assembly Yard Number Object";
        ProjectInventoryDelivery."Purchase Route Reference" := "Purchase Route Reference";
        ProjectInventoryDelivery."Purchase Requisition No." := "Purchase Requisition No.";
        ProjectInventoryDelivery."Plant Type" := "Plant Type";
        ProjectInventoryDelivery."Plant No." := "Plant No.";
        ProjectInventoryDelivery.Comment := Comment;
        ProjectInventoryDelivery."Comments for Logistics" := "Comments for Logistics"; //**4PS.n BI003a KD 08-02-17
        ProjectInventoryDelivery.VALIDATE("Item Composition");
        ProjectInventoryDelivery."Extension Contract" := "Extension Contract";
        ProjectInventoryDelivery."Plot No." := "Plot No.";

        TmpStoredProjInventoryDelivery.SETRANGE("Project No.", "Project No.");
        TmpStoredProjInventoryDelivery.SETRANGE("Item Composition", "Item Composition");
        TmpStoredProjInventoryDelivery.SETRANGE("Location Code", "Location Code");
        TmpStoredProjInventoryDelivery.SETRANGE("Bin Code", "Bin Code");  //db, 02-11-10
        TmpStoredProjInventoryDelivery.SETRANGE("Shelf No.", "Shelf No.");
        TmpStoredProjInventoryDelivery.SETRANGE("Unit of Measure Code", "Unit of Measure Code");
        TmpStoredProjInventoryDelivery.SETRANGE("Entry Type", ProjectInventoryDelivery."Entry Type"::Delivery);
        TmpStoredProjInventoryDelivery.SETRANGE(Element,Element); //hbk,10-06-10,TM4870
        TmpStoredProjInventoryDelivery.SETRANGE("Assembly Yard Number Object", "Assembly Yard Number Object");
        TmpStoredProjInventoryDelivery.SETRANGE("Extension Contract","Extension Contract");
        TmpStoredProjInventoryDelivery.SETRANGE("Plot No.","Plot No.");
        IF TmpStoredProjInventoryDelivery.FINDFIRST THEN BEGIN
          ProjectInventoryDelivery.Deliver := TmpStoredProjInventoryDelivery.Deliver;
          ProjectInventoryDelivery."Ship To Location" := TmpStoredProjInventoryDelivery."Ship To Location";
        END;

        ProjectInventoryDelivery.MODIFY;
      END;
      EXIT(TRUE);
      //**4PS.en BI006 KD 14-06-16
    END;

    PROCEDURE GenerateShippingOrder@1100525001(VAR ProjInventoryDelivery@1100525000 : Record 11012671;VAR ShippingOrderNo@1100525006 : Code[20]);
    VAR
      ShippingOrderHeader@1100525001 : Record 11020623;
      ShippingOrderLine@1100525002 : Record 11071885;
      ProjInventEntryLoc@1100525007 : Record 11012670;
      ProjInventoryDelivery2@1100525003 : Record 11012671;
      PurchRcptHeader@1100529405 : Record 120;
      ShippingOrderMgt@1100525005 : Codeunit 11012254;
      ShippingOrderLineNo@1100525004 : Integer;
    BEGIN
      //**4PS.sn BI006 KD 14-06-16
      ProjInventoryDelivery.SETRANGE(Shipped,FALSE);
      IF ProjInventoryDelivery.ISEMPTY THEN
        EXIT;

      CheckHandlingUnitLines(ProjInventoryDelivery,ShippingOrderNo);

      IF ShippingOrderNo = '' THEN BEGIN
        ShippingOrderHeader.INIT;
        ShippingOrderHeader."Source Type" := ShippingOrderHeader."Source Type"::Project;
        ShippingOrderHeader.VALIDATE("Source No.",ProjInventoryDelivery."Project No.");
        ShippingOrderHeader."Posting Date" := TODAY;
        ShippingOrderHeader.INSERT(TRUE);
        ShippingOrderNo := ShippingOrderHeader."No.";
      END ELSE BEGIN
        ShippingOrderHeader.GET(ShippingOrderNo);
        ShippingOrderHeader.TESTFIELD("Source Type",ShippingOrderHeader."Source Type"::Project);
        ShippingOrderHeader.TESTFIELD("Source No.",ProjInventoryDelivery."Project No.");

        ShippingOrderLine.SETRANGE("Document No.",ShippingOrderHeader."No.");
        IF ShippingOrderLine.FINDLAST THEN
          ShippingOrderLineNo := ShippingOrderLine."Line No.";
      END;

      ProjInventEntryLoc.SETRANGE("Project No.",ProjInventoryDelivery."Project No.");

      ProjInventoryDelivery.FINDSET;
      REPEAT
        ShippingOrderLineNo += 10000;

        ShippingOrderLine.INIT;
        ShippingOrderLine."Document No." := ShippingOrderHeader."No.";
        ShippingOrderLine."Line No." := ShippingOrderLineNo;
        ShippingOrderLine."Source Line Type" := ShippingOrderLine."Source Line Type"::"Project Inventory Entry";
        ShippingOrderLine.INSERT;

        ProjInventEntryLoc.SETRANGE("Item Composition",ProjInventoryDelivery."Item Composition");
        ProjInventEntryLoc.SETRANGE("Location Code",ProjInventoryDelivery."Location Code");
        ProjInventEntryLoc.SETRANGE("Bin Code",ProjInventoryDelivery."Bin Code");
        ProjInventEntryLoc.SETRANGE("Shelf No.",ProjInventoryDelivery."Shelf No.");
        ProjInventEntryLoc.SETRANGE("Unit of Measure Code",ProjInventoryDelivery."Unit of Measure Code");
        ProjInventEntryLoc.SETRANGE(Element,ProjInventoryDelivery.Element);
        ProjInventEntryLoc.SETRANGE("Assembly Yard Number Object",ProjInventoryDelivery."Assembly Yard Number Object");
        ProjInventEntryLoc.SETRANGE("Extension Contract", ProjInventoryDelivery."Extension Contract");
        ProjInventEntryLoc.SETRANGE("Plot No.", ProjInventoryDelivery."Plot No.");
        ProjInventEntryLoc.SETRANGE("Receipt No.",ProjInventoryDelivery."Purchase Receipt No.");
        ProjInventEntryLoc.SETRANGE("Receipt Line No.",ProjInventoryDelivery."Purchase Rcpt. Line No.");
        ProjInventEntryLoc.SETFILTER("Purchase Receipt No. Filter",ProjInventoryDelivery."Purchase Receipt No.");
        ProjInventEntryLoc.SETFILTER("Purchase Rcpt. Line No. Filter",ProjInventoryDelivery."Purchase Rcpt. Line No. Filter");
        IF ProjInventEntryLoc.FINDFIRST THEN BEGIN
          ShippingOrderLine.VALIDATE("Source Line No.",ProjInventEntryLoc."Entry No.");
          ProjInventEntryLoc.CALCFIELDS("Inventory Quantity");
          ShippingOrderLine."Source Qty. to Ship" := ProjInventEntryLoc."Inventory Quantity";
          ShippingOrderLine.VALIDATE("Qty. to Ship", ShippingOrderMgt.GetQtyToShipSameSource(ShippingOrderLine, ProjInventEntryLoc."Inventory Quantity"));
          ShippingOrderLine."Line Amount" := 0;
          ShippingOrderLine.VALIDATE(Quantity,ProjInventEntryLoc.Quantity);
        END ELSE BEGIN
          ShippingOrderLine."Item No." := ProjInventoryDelivery."Item No.";
          ShippingOrderLine."Trade Item" := ProjInventoryDelivery."Trade Item";
          ShippingOrderLine."Basic Item" := ProjInventoryDelivery."Basic Item";
          ShippingOrderLine."Vendor (Trade Item)" := ProjInventoryDelivery."Vendor (Trade Item)";
          ShippingOrderLine.Manufacturer := ProjInventoryDelivery.Manufacturer;
          ShippingOrderMgt.CalcWeight(ShippingOrderLine);
          ProjInventoryDelivery.CALCFIELDS("Inventory Quantity");
          ShippingOrderLine.VALIDATE(Quantity,ProjInventoryDelivery."Inventory Quantity");
        END;
        ShippingOrderLine."Item Description" := ProjInventoryDelivery.Description;
        ShippingOrderLine."Item Description 2" := ProjInventoryDelivery."Description 2";

        // 4PS.sn 22-09-2016 UKR-C26351 VAKAT
        IF PurchRcptHeader.GET(ProjInventoryDelivery."Purchase Receipt No.") THEN
          ShippingOrderLine."Purchase Order Number" := PurchRcptHeader."Order No.";
        // 4PS.sn 22-09-2016 UKR-C26351 VAKAT

        ShippingOrderLine.MODIFY;

        ProjInventoryDelivery2 := ProjInventoryDelivery;
        ProjInventoryDelivery2.Shipped := TRUE;
        ProjInventoryDelivery2.MODIFY;
      UNTIL ProjInventoryDelivery.NEXT = 0;
      //**4PS.en BI006 KD 14-06-16
    END;

    PROCEDURE CheckProjInventoryDeliveryLines@1100529401(VAR ProjInventoryDelivery@1100525000 : Record 11012671) : Boolean;
    BEGIN
      //**4PS.sn BI006 KD 28-11-16
      ProjInventoryDelivery.SETRANGE(Shipped,FALSE);
      IF ProjInventoryDelivery.ISEMPTY THEN
        ERROR(Text005);

      ProjInventoryDelivery.SETRANGE(Shipped,TRUE);
      IF NOT ProjInventoryDelivery.ISEMPTY THEN
        IF NOT CONFIRM(Text004) THEN
          EXIT(FALSE);

      EXIT(TRUE);
      //**4PS.en BI006 KD 28-11-16
    END;

    LOCAL PROCEDURE CheckHandlingUnitLines@1100529400(VAR ProjInventoryDelivery@1100525000 : Record 11012671;ShippingOrderNo@1100525006 : Code[20]);
    VAR
      ShippingOrderLine@1100525002 : Record 11071885;
      ProjInventEntryLoc@1100525007 : Record 11012670;
      HandlingUnit@1100529404 : Record 11229321;
      PurchRcptLineHandUnit@1100529402 : Record 11229322;
      PurchRcptLineHandUnitTmp@1100529403 : TEMPORARY Record 11229322;
    BEGIN
      //**4PS.sn BI006 KD 27-10-16
      ProjInventoryDelivery.FINDSET;
      REPEAT
        IF ProjInventoryDelivery."Purchase Rcpt. Line No." <> 0 THEN BEGIN
          PurchRcptLineHandUnit.SETRANGE("Purch. Rcpt. No.",ProjInventoryDelivery."Purchase Receipt No.");
          PurchRcptLineHandUnit.SETRANGE("Purch. Rcpt. Line No.",ProjInventoryDelivery."Purchase Rcpt. Line No.");
          IF PurchRcptLineHandUnit.FINDSET THEN
            REPEAT
              IF HandlingUnit.GET(PurchRcptLineHandUnit."Handling Unit Code") THEN BEGIN
                HandlingUnit.MARK(TRUE);

                IF NOT PurchRcptLineHandUnitTmp.GET(PurchRcptLineHandUnit."Purch. Rcpt. No.",PurchRcptLineHandUnit."Purch. Rcpt. Line No.",PurchRcptLineHandUnit."Handling Unit Code")
                THEN BEGIN
                  PurchRcptLineHandUnitTmp := PurchRcptLineHandUnit;
                  PurchRcptLineHandUnitTmp.INSERT;
                END;
              END;
            UNTIL PurchRcptLineHandUnit.NEXT = 0;
        END;
      UNTIL ProjInventoryDelivery.NEXT = 0;

      IF ShippingOrderNo <> '' THEN BEGIN
        ShippingOrderLine.SETRANGE("Document No.",ShippingOrderNo);
        IF ShippingOrderLine.FINDSET THEN
          REPEAT
            IF ProjInventEntryLoc.GET(ShippingOrderLine."Source Line No.") THEN BEGIN
              PurchRcptLineHandUnit.SETRANGE("Purch. Rcpt. No.",ProjInventEntryLoc."Receipt No.");
              PurchRcptLineHandUnit.SETRANGE("Purch. Rcpt. Line No.",ProjInventEntryLoc."Receipt Line No.");
              IF PurchRcptLineHandUnit.FINDSET THEN
                REPEAT
                  IF HandlingUnit.GET(PurchRcptLineHandUnit."Handling Unit Code") THEN BEGIN
                    HandlingUnit.MARK(TRUE);

                    IF NOT PurchRcptLineHandUnitTmp.GET(PurchRcptLineHandUnit."Purch. Rcpt. No.",PurchRcptLineHandUnit."Purch. Rcpt. Line No.",PurchRcptLineHandUnit."Handling Unit Code")
                    THEN BEGIN
                      PurchRcptLineHandUnitTmp := PurchRcptLineHandUnit;
                      PurchRcptLineHandUnitTmp.INSERT;
                    END;
                  END;
                UNTIL PurchRcptLineHandUnit.NEXT = 0;
            END;
          UNTIL ShippingOrderLine.NEXT = 0;
      END;

      PurchRcptLineHandUnit.RESET;
      HandlingUnit.MARKEDONLY(TRUE);
      IF HandlingUnit.FINDSET THEN
        REPEAT
          PurchRcptLineHandUnit.SETRANGE("Handling Unit Code",HandlingUnit."No.");
          IF PurchRcptLineHandUnit.FINDSET THEN
            REPEAT
              IF NOT PurchRcptLineHandUnitTmp.GET(PurchRcptLineHandUnit."Purch. Rcpt. No.",PurchRcptLineHandUnit."Purch. Rcpt. Line No.",PurchRcptLineHandUnit."Handling Unit Code")
              THEN BEGIN
                IF NOT CONFIRM(Text003,FALSE,PurchRcptLineHandUnit."Purch. Rcpt. No.",PurchRcptLineHandUnit."Purch. Rcpt. Line No.") THEN
                  ERROR('');
                EXIT;
              END;
            UNTIL PurchRcptLineHandUnit.NEXT = 0;
        UNTIL HandlingUnit.NEXT = 0;
      //**4PS.en BI006 KD 27-10-16
    END;

    PROCEDURE GetHandlingUnitCode@1100525003() : Code[20];
    VAR
      PurchRcptLineHandUnit@1100525000 : Record 11229322;
    BEGIN
      //**4PS.sn BI006 KD 14-06-16
      IF ("Purchase Receipt No." = '') OR ("Purchase Rcpt. Line No." = 0) THEN
        EXIT('');

      PurchRcptLineHandUnit.SETRANGE("Purch. Rcpt. No.","Purchase Receipt No.");
      PurchRcptLineHandUnit.SETRANGE("Purch. Rcpt. Line No.","Purchase Rcpt. Line No.");
      IF PurchRcptLineHandUnit.ISEMPTY THEN
        EXIT('');

      IF PurchRcptLineHandUnit.COUNT = 1 THEN BEGIN
        PurchRcptLineHandUnit.FINDFIRST;
        EXIT(PurchRcptLineHandUnit."Handling Unit Code");
      END;

      EXIT('<' + FORMAT(PurchRcptLineHandUnit.COUNT) + '>');
      //**4PS.en BI006 KD 14-06-16
    END;

    PROCEDURE GetProjectInventory@1100529720(ProjInventDeliveryRec@1210190001 : Record 11012671;VAR ProjInventEntryTmp@1100529720 : TEMPORARY Record 11012670);
    VAR
      PurchRcptLineTmp@1100529723 : TEMPORARY Record 121;
      TotalQuantity@1100529721 : Decimal;
      QtyLoc@1100529722 : Decimal;
    BEGIN
      //**4PS.sn BI006 KD 15-12-16
      ProjInventEntryTmp.RESET;
      ProjInventEntryTmp.DELETEALL;

      WITH ProjInventDeliveryRec DO BEGIN
        TotalQuantity := Quantity;

        IF "Purchase Rcpt. Line No. Filter" <> '' THEN BEGIN
          CLEAR(ProjInventEntryTmp);
          ProjInventEntryTmp."Receipt No." := "Purchase Receipt No.";
          ProjInventEntryTmp."Receipt Line No." := "Purchase Rcpt. Line No.";
          ProjInventEntryTmp.Quantity := TotalQuantity;
          ProjInventEntryTmp.INSERT;
          EXIT;
        END;

        ProjInventEntryRec.RESET;
        ProjInventEntryRec.SETCURRENTKEY("Project No.", "Item Composition", "Extension Contract", "Plot No.");
        ProjInventEntryRec.SETRANGE("Project No.", "Project No.");
        ProjInventEntryRec.SETRANGE("Item Composition", "Item Composition");
        ProjInventEntryRec.SETRANGE("Location Code", "Location Code");
        ProjInventEntryRec.SETRANGE("Bin Code", "Bin Code");
        ProjInventEntryRec.SETRANGE("Shelf No.", "Shelf No.");
        ProjInventEntryRec.SETRANGE("Unit of Measure Code", "Unit of Measure Code");
        ProjInventEntryRec.SETRANGE(Element,Element);
        ProjInventEntryRec.SETRANGE("Assembly Yard Number Object","Assembly Yard Number Object");
        ProjInventEntryRec.SETRANGE("Extension Contract", "Extension Contract");
        ProjInventEntryRec.SETRANGE("Plot No.", "Plot No.");

        IF ProjInventEntryRec.FINDSET THEN BEGIN
          PurchRcptLineTmp.RESET;
          PurchRcptLineTmp.DELETEALL;

          REPEAT
            IF (ProjInventEntryRec."Receipt No." <> '') AND (ProjInventEntryRec."Receipt Line No." <> 0) THEN
              IF NOT PurchRcptLineTmp.GET(ProjInventEntryRec."Receipt No.", ProjInventEntryRec."Receipt Line No.") THEN BEGIN
                CLEAR(PurchRcptLineTmp);
                PurchRcptLineTmp."Document No." := ProjInventEntryRec."Receipt No.";
                PurchRcptLineTmp."Line No." := ProjInventEntryRec."Receipt Line No.";
                PurchRcptLineTmp."Item Rcpt. Entry No." := ProjInventEntryRec."Entry No.";
                IF ProjInventEntryRec."Entry Type" = ProjInventEntryRec."Entry Type"::Receipt THEN
                  PurchRcptLineTmp.Quantity := ProjInventEntryRec.Quantity;
                PurchRcptLineTmp."Quantity Invoiced" := ProjInventEntryRec.Quantity;
                PurchRcptLineTmp.INSERT;
              END ELSE BEGIN
                IF ProjInventEntryRec."Entry Type" = ProjInventEntryRec."Entry Type"::Receipt THEN
                  PurchRcptLineTmp.Quantity += ProjInventEntryRec.Quantity;
                PurchRcptLineTmp."Quantity Invoiced" += ProjInventEntryRec.Quantity;
                PurchRcptLineTmp.MODIFY;
              END;
          UNTIL ProjInventEntryRec.NEXT = 0;

          IF PurchRcptLineTmp.FINDSET THEN
            REPEAT
              IF "Entry Type" = "Entry Type"::"Positive Adjmt." THEN
                QtyLoc := PurchRcptLineTmp.Quantity - PurchRcptLineTmp."Quantity Invoiced"
              ELSE
                QtyLoc := PurchRcptLineTmp."Quantity Invoiced";

              IF QtyLoc > 0 THEN BEGIN
                ProjInventEntryTmp.INIT;
                ProjInventEntryTmp."Entry No." := PurchRcptLineTmp."Item Rcpt. Entry No.";
                ProjInventEntryTmp."Receipt No." := PurchRcptLineTmp."Document No.";
                ProjInventEntryTmp."Receipt Line No." := PurchRcptLineTmp."Line No.";

                IF TotalQuantity > QtyLoc THEN BEGIN
                  ProjInventEntryTmp.Quantity := QtyLoc;
                  TotalQuantity := TotalQuantity - QtyLoc;
                END ELSE BEGIN
                  ProjInventEntryTmp.Quantity := TotalQuantity;
                  TotalQuantity := 0;
                END;
                ProjInventEntryTmp.INSERT;

                IF TotalQuantity = 0 THEN
                  EXIT;
              END;
            UNTIL PurchRcptLineTmp.NEXT = 0;
        END;
      END;

      IF TotalQuantity <> 0 THEN BEGIN
        CLEAR(ProjInventEntryTmp);
        ProjInventEntryTmp.Quantity := TotalQuantity;
        ProjInventEntryTmp.INSERT;
      END;
      //**4PS.en BI006 KD 15-12-16
    END;

    PROCEDURE GetPurchaseOrderNo@1100529600() : Text;
    VAR
      TmpPurchaseHeader@1100529000 : TEMPORARY Record 38;
      PurchaseOrderCount@1100529605 : Integer;
    BEGIN
      SearchPurchaseOrders(TmpPurchaseHeader);
      IF TmpPurchaseHeader.FINDFIRST THEN BEGIN
        PurchaseOrderCount := TmpPurchaseHeader.COUNT;
        IF PurchaseOrderCount = 1 THEN
          EXIT(TmpPurchaseHeader."No.")
        ELSE
          EXIT('[' + FORMAT(PurchaseOrderCount) + ']');
      END;
      EXIT('');
    END;

    PROCEDURE DrillDownPurchaseOrder@1100529603();
    VAR
      TmpPurchaseHeader@1100529000 : TEMPORARY Record 38;
      PurchaseHeader@1100529603 : Record 38;
    BEGIN
      SearchPurchaseOrders(TmpPurchaseHeader);
      IF TmpPurchaseHeader.FINDSET THEN BEGIN
        REPEAT
          IF PurchaseHeader.GET(TmpPurchaseHeader."Document Type", TmpPurchaseHeader."No.") THEN
            PurchaseHeader.MARK(TRUE);
        UNTIL TmpPurchaseHeader.NEXT = 0;
        PurchaseHeader.MARKEDONLY(TRUE);
        IF PurchaseHeader.FINDFIRST THEN
          PAGE.RUNMODAL(0, PurchaseHeader);
      END;
    END;

    LOCAL PROCEDURE SearchPurchaseOrders@1100529005(VAR TmpPurchaseHeader@1100529001 : TEMPORARY Record 38);
    VAR
      ProjectInventoryEntry@1100529000 : Record 11012670;
    BEGIN
      TmpPurchaseHeader.DELETEALL;
      IF ("Project No." = '') OR ("Line No." = 0) THEN
        EXIT;
      ProjectInventoryEntry.SETCURRENTKEY(
        "Project No.", "Item Composition", "Extension Contract", "Plot No.", "Location Code", "Bin Code", "Shelf No.",
        "Unit of Measure Code", Element, "Assembly Yard Number Object", "Posting Date", "Entry Type");
      ProjectInventoryEntry.SETRANGE("Project No.", "Project No.");
      ProjectInventoryEntry.SETRANGE("Item Composition", "Item Composition");
      ProjectInventoryEntry.SETRANGE("Extension Contract", "Extension Contract");
      ProjectInventoryEntry.SETRANGE("Plot No.", "Plot No.");
      ProjectInventoryEntry.SETRANGE("Location Code", "Location Code");
      ProjectInventoryEntry.SETRANGE("Bin Code", "Bin Code");
      ProjectInventoryEntry.SETRANGE("Shelf No.", "Shelf No.");
      ProjectInventoryEntry.SETRANGE("Unit of Measure Code", "Unit of Measure Code");
      ProjectInventoryEntry.SETRANGE(Element, Element);
      ProjectInventoryEntry.SETRANGE("Assembly Yard Number Object", "Assembly Yard Number Object");
      IF ProjectInventoryEntry.FINDSET THEN BEGIN
        REPEAT
          ProjectInventoryEntry.CALCFIELDS("Order No.");
          IF ProjectInventoryEntry."Order No." <> '' THEN BEGIN
            IF NOT TmpPurchaseHeader.GET(TmpPurchaseHeader."Document Type"::Order, ProjectInventoryEntry."Order No.") THEN BEGIN
              TmpPurchaseHeader.INIT;
              TmpPurchaseHeader."Document Type" := TmpPurchaseHeader."Document Type"::Order;
              TmpPurchaseHeader."No." := ProjectInventoryEntry."Order No.";
              TmpPurchaseHeader.INSERT;
            END;
          END;
        UNTIL ProjectInventoryEntry.NEXT = 0;
      END;
    END;

    BEGIN
    {
      4PS01 HBK 06-05-2010 Added field Element
      4PS 14-06-16 UKR-C21173 KD: New project inventory screen (BI006) - Added fields "Purchase Receipt No.", "Purchase Rcpt. Line No.", "Purchase Rcpt. Line No. Filter", Shipped
                                                                         Added triggers UpdateLinesBasedOnReceipts, AddLinePurchReceipt, GenerateShippingOrder, CheckHandlingUnitLines, GetHandlingUnitCode
                                                                         Trigger CheckProjectInventory changed
                                                                         Fields "Inventory Quantity", "Receipt Quantity" changed: filters on Receipt No. and Receipt Line No. added
      4PS 06-09-2016 UKR-C26351 VAKAT Trigger GenerateShippingOrder changed
      4PS 08-02-17 UKR-C32789 KD: Comments for logistics (BI003a) - Field "Comments for Logistics" added; trigger AddLinePurchReceipt changed
    }
    END.
  }
}

