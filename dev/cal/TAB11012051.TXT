OBJECT Table 11012051 Error
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Error;
               NOR=Feil;
               SVE=Fel];
  }
  FIELDS
  {
    { 1   ;   ;Source Type         ;Option        ;CaptionML=[ENU=Source Type;
                                                              NOR=Kildetype;
                                                              SVE=Ursprungstyp];
                                                   OptionCaptionML=ENU=Hours Accounting,Import Budget,Finish Service-Project,PlantTest,ICM Export,Item,E-Plan,Absence,Read Documents,Hoursacc. Site manager,Maintenance Plan,Service-Prognosis,Contract Object,,Maintenance Appointment,Rental Unit,General,Mobile;
                                                   OptionString=Hours Accounting,Import Budget,Finish Service-Project,PlantTest,ICM Export,Item,E-Plan,Absence,Read Documents,Hoursacc. Site manager,Maintenance Plan,Service-Prognosis,Contract Object,,Maintenance Appointment,RentalUnit,General,Mobile }
    { 5   ;   ;User ID             ;Code50        ;TableRelation=User."User Name";
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=User ID;
                                                              NOR=Bruker-ID;
                                                              SVE=Anv„ndar-ID] }
    { 10  ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              NOR=Linjenr.;
                                                              SVE=Radnr] }
    { 20  ;   ;Employee No.        ;Code20        ;TableRelation=Employee.No.;
                                                   CaptionML=[ENU=Employee No.;
                                                              NOR=Ansattnr;
                                                              SVE=Anst„llningsnr] }
    { 21  ;   ;Name                ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Full Name" WHERE (No.=FIELD(Employee No.)));
                                                   CaptionML=[ENU=Name;
                                                              NOR=Navn;
                                                              SVE=Namn];
                                                   Editable=No }
    { 30  ;   ;Document No.        ;Code20        ;OnLookup=BEGIN
                                                              CASE "Source Type" OF
                                                                "Source Type"::"Hours Accounting":
                                                                  ShowHourAccountingAndRefreshErrors;
                                                                "Source Type"::"Hoursacc. Site manager":
                                                                  ShowSiteMngmntHourAccountingAndRefreshErrors;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Document No.;
                                                              NOR=Bilagsnr.;
                                                              SVE=Dokumentnr];
                                                   Editable=No }
    { 40  ;   ;Posting Date        ;Date          ;CaptionML=[ENU=Posting Date;
                                                              NOR=Bokf›ringsdato;
                                                              SVE=Bokf”ringsdatum];
                                                   Editable=No }
    { 50  ;   ;Error message       ;Text250       ;CaptionML=[ENU=Error message;
                                                              NOR=Feilmelding;
                                                              SVE=Felmeddelande] }
    { 60  ;   ;Description         ;Text100       ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 70  ;   ;Employer            ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee.Employer WHERE (No.=FIELD(Employee No.)));
                                                   CaptionML=[ENU=Employer;
                                                              NOR=Arbeidsgiver;
                                                              SVE=Arbetsgivare];
                                                   Editable=No }
    { 80  ;   ;External            ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee.External WHERE (No.=FIELD(Employee No.)));
                                                   CaptionML=[ENU=External;
                                                              NOR=Eksternt;
                                                              SVE=Externt];
                                                   Editable=No }
    { 90  ;   ;Project No.         ;Code20        ;TableRelation=Job.No.;
                                                   CaptionML=[ENU=Project No.;
                                                              NOR=Prosjektnr;
                                                              SVE=Projektnr] }
    { 100 ;   ;Service Contract No.;Code20        ;TableRelation=Service-Contract.No.;
                                                   CaptionML=[ENU=Service Contract No.;
                                                              NOR=Servicekontraktnr;
                                                              SVE=Servicekontraktnr] }
    { 110 ;   ;Service Order No.   ;Code20        ;TableRelation="Service Order".No.;
                                                   CaptionML=[ENU=Service Order No.;
                                                              NOR=Serviceordrenr;
                                                              SVE=Serviceordernr] }
    { 120 ;   ;Department Code     ;Code20        ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=[ENU=Global Dimension 1 Code;
                                                              NOR=Avdeling;
                                                              SVE=Department];
                                                   CaptionClass='1,1,1' }
    { 130 ;   ;Plant Location Code ;Code20        ;TableRelation="Plant Location";
                                                   CaptionML=[ENU=Plant Location Code;
                                                              NOR=Maskinplasseringskode;
                                                              SVE=Maskinutplaceringkod] }
    { 140 ;   ;Item No.            ;Code20        ;TableRelation=IF (Vendor No.=FILTER('')) Item.No.
                                                                 ELSE IF (Vendor No.=FILTER(<>'')) "Trade Item"."Item Code";
                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Item No.;
                                                              NOR=Varenr.;
                                                              SVE=Artikelnr] }
    { 150 ;   ;Vendor No.          ;Code20        ;TableRelation="ETIM Vendor - Central Mgt".Code;
                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Vendor No.;
                                                              NOR=Leverand›rnr.;
                                                              SVE=Leverant”rsnr] }
    { 160 ;   ;Service Location No.;Code20        ;TableRelation="Service Location".No.;
                                                   CaptionML=[ENU=Service Location No.;
                                                              NOR=Servicelokasjon Nr.;
                                                              SVE=Serviceplatsnr] }
    { 170 ;   ;Object No.          ;Code20        ;TableRelation=Service-Object;
                                                   CaptionML=[ENU=Object No.;
                                                              NOR=Objektnr.;
                                                              SVE=Objektnr] }
    { 180 ;   ;Serv. Contr. Ctrl. Period Code;Code10;
                                                   TableRelation="Service-Contract Ctrl. Period".Code WHERE (Service Contract No.=FIELD(Service Contract No.));
                                                   CaptionML=[ENU=Service Contract Control Period Code;
                                                              NOR=Servicekontrakt, Kode for Kontrollperiode] }
    { 190 ;   ;Rental Unit         ;Code20        ;TableRelation="Rental Unit"."Rental Unit" WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=[ENU=Rental Unit;
                                                              NOR=Leieenhet;
                                                              SVE=Uthyrningsenhet] }
    { 200 ;   ;Starting Date Package;Date         ;TableRelation="Rental Package"."Starting Date" WHERE (Project No.=FIELD(Project No.),
                                                                                                         Rental Unit=FIELD(Rental Unit));
                                                   CaptionML=[ENU=Starting Date Package;
                                                              NOR=Startdato for Pakke];
                                                   NotBlank=Yes }
    { 210 ;   ;House Model         ;Code20        ;DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=House Model;
                                                              SVE=Husmodell] }
    { 220 ;   ;Main Group          ;Code20        ;DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Main Group;
                                                              SVE=Huvudgrupp] }
    { 230 ;   ;Group               ;Code20        ;DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Group;
                                                              SVE=Grupp] }
    { 240 ;   ;Sub Group           ;Code20        ;DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Sub Group;
                                                              SVE=Undergrupp] }
    { 241 ;   ;Option              ;Code20        ;DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Option Code;
                                                              SVE=Alternativkod] }
  }
  KEYS
  {
    {    ;User ID,Source Type,Line No.            ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      DPA_Management@1100000999 : Codeunit 11012783;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(0);
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      //**4PS Generated Code - Do Not Change
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
      i@1100525004 : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      FOR i := 10 DOWNTO 0 DO BEGIN
        RecRef.FILTERGROUP(i);
        FILTERGROUP(i);
        SETVIEW(RecRef.GETVIEW(FALSE));
      END;

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
      FPSLicenseManagement@1100527400 : Codeunit 11229289;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT FPSLicenseManagement.LicenseAndReadPermissionForTable(DepartmentAuthorizObject) THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_FindRecWithDPAFilterAppld@1100000989();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN BEGIN
        FIND;
        EXIT;
      END;

      IF NOT DPA_Management.HasTableHardFilter(11012051) THEN BEGIN
        FIND;
        EXIT;
      END;

      DPA_SetFilters('Table 11012051');
      IF NOT FIND THEN
        DPA_Management.RaiseDPAErrorForTable(TABLECAPTION);
    END;

    PROCEDURE DPA_ChkDepartmentCodeAllowed@1100000990(IsHardFilter@1100526000 : Boolean);
    VAR
      DimensionManagement@1100526001 : Codeunit 408;
    BEGIN
      //**4PS Generated Code - Do Not Change
      DimensionManagement.CheckDepartmAuthWithFilterType(
        DATABASE::Error, "Department Code", IsHardFilter);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Department Code"));
    END;

    PROCEDURE DPA_SetDefaultDepartment@1100000996();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      DPA_Management.SetDepartmentCodeUser(TABLENAME, "Department Code");
    END;

    PROCEDURE InsertError@1100409000(SourceType@1100409000 : Option;ErrorMessage@1100409001 : Text[250]);
    VAR
      ErrorRec@1100409002 : Record 11012051;
      LineNo@1100409003 : Integer;
    BEGIN
      LineNo := 10000;
      ErrorRec.SETRANGE("User ID", USERID);
      ErrorRec.SETRANGE("Source Type", SourceType);
      IF ErrorRec.FINDLAST() THEN
        LineNo += ErrorRec."Line No.";

      ErrorRec."User ID" := USERID;
      ErrorRec."Source Type" := SourceType;
      ErrorRec."Line No." := LineNo;
      ErrorRec."Error message" := ErrorMessage;
      ErrorRec."Posting Date" := TODAY;
      ErrorRec.INSERT(TRUE);
    END;

    LOCAL PROCEDURE ShowHourAccountingAndRefreshErrors@1100528400();
    VAR
      HourAccounting@1100528401 : Record 11012038;
      CheckHourAccounting@1100528400 : Codeunit 11012002;
      HourAccountingFoundForDocumentNoAndPostingDate@1100528402 : Boolean;
    BEGIN
      ShowHourAccounting(HourAccountingFoundForDocumentNoAndPostingDate, HourAccounting);
      IF HourAccountingFoundForDocumentNoAndPostingDate THEN
        CheckHourAccounting.CheckHourAccountings(HourAccounting);
    END;

    LOCAL PROCEDURE ShowHourAccounting@1100528401(VAR HourAccountingFoundForDocumentNoAndPostingDate@1100528404 : Boolean;VAR HourAccounting@1100528401 : Record 11012038);
    VAR
      HourAccountingPage@1100528400 : Page 11012035;
      HourAccountingList@1100528402 : Page 11012039;
    BEGIN
      IF "Document No." = '' THEN
        EXIT;
      HourAccounting.SETRANGE("Document No.", "Document No.");
      HourAccounting.SETRANGE("Employee No.", "Employee No.");
      HourAccounting.SETRANGE("Posting Date", "Posting Date");
      HourAccountingFoundForDocumentNoAndPostingDate := HourAccounting.FINDFIRST;
      IF HourAccounting.COUNT = 1 THEN BEGIN
        HourAccountingPage.SETTABLEVIEW(HourAccounting);
        HourAccountingPage.RUNMODAL;
      END ELSE BEGIN
        HourAccountingList.SETTABLEVIEW(HourAccounting);
        HourAccountingList.RUNMODAL;
        IF NOT HourAccountingFoundForDocumentNoAndPostingDate THEN BEGIN
          HourAccounting.SETRANGE("Employee No.");
          HourAccountingFoundForDocumentNoAndPostingDate := HourAccounting.FINDFIRST;
        END;
      END;
    END;

    PROCEDURE DeleteOwnErrorListByErrorType@1100529900(ErrorType@1100529900 : Option);
    BEGIN
      RESET;
      SETRANGE("User ID", USERID);
      SETRANGE("Source Type", ErrorType);
      DELETEALL;
    END;

    PROCEDURE DisplayOwnErrorListByErrorType@1100529901(ErrorType@1100529900 : Option);
    BEGIN
      SETRANGE("User ID", USERID);
      SETRANGE("Source Type", "Source Type"::"Import Budget");
      IF FIND('-') THEN BEGIN
        PAGE.RUNMODAL(PAGE::Errors, Rec);
      END;
    END;

    LOCAL PROCEDURE ShowSiteMngmntHourAccountingAndRefreshErrors@1100527350();
    VAR
      SiteMngmntHourAccounting@1100527352 : Record 11012360;
      CheckSiteMngmntHourAccounting@1100527351 : Codeunit 11012181;
      SiteMngmntHourAccountingFound@1100527350 : Boolean;
    BEGIN
      ShowSiteMngmntHourAccounting(SiteMngmntHourAccountingFound, SiteMngmntHourAccounting);
      IF SiteMngmntHourAccountingFound THEN
        CheckSiteMngmntHourAccounting.CheckSiteMngHourAccountings(SiteMngmntHourAccounting);
    END;

    LOCAL PROCEDURE ShowSiteMngmntHourAccounting@1100527351(VAR SiteMngmntHourAccountingFound@1100527351 : Boolean;VAR SiteMngmntHourAccounting@1100527350 : Record 11012360);
    VAR
      SiteMngmntHourAccountingPage@1100527353 : Page 11072215;
      SiteMngmntHourAccountingList@1100527352 : Page 11072229;
    BEGIN
      IF "Document No." = '' THEN
        EXIT;
      SiteMngmntHourAccounting.SETRANGE("Document No.", "Document No.");
      SiteMngmntHourAccounting.SETRANGE("Employee No.", "Employee No.");
      SiteMngmntHourAccounting.SETRANGE("Posting Date", "Posting Date");
      SiteMngmntHourAccountingFound := SiteMngmntHourAccounting.FINDFIRST;

      IF SiteMngmntHourAccountingFound THEN BEGIN
        IF SiteMngmntHourAccounting.COUNT = 1 THEN BEGIN
          SiteMngmntHourAccountingPage.SETTABLEVIEW(SiteMngmntHourAccounting);
          SiteMngmntHourAccountingPage.RUNMODAL;
        END ELSE BEGIN
          SiteMngmntHourAccountingList.SETTABLEVIEW(SiteMngmntHourAccounting);
          SiteMngmntHourAccountingList.RUNMODAL;
        END;
      END ELSE BEGIN
        SiteMngmntHourAccounting.SETRANGE("Employee No.");
        SiteMngmntHourAccountingFound := SiteMngmntHourAccounting.FINDFIRST;
      END;
    END;

    BEGIN
    {
      Errors:
      - Hour Accounting
      - Import project budget
      - report service-project complete
      - secu-test
      - ICM-export
      - report plant location complete
      - Import documents
      - Hour Accounting Site Manager
      - Rental Unit (/Package)
    }
    END.
  }
}

