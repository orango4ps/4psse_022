OBJECT Table 11020275 WKA Check
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnDelete=VAR
               VendorWKACheck@1100485000 : Record 11020276;
             BEGIN
               VendorWKACheck.RESET;
               VendorWKACheck.SETRANGE(Code, Code);
               IF VendorWKACheck.FIND('-') THEN
                 IF CONFIRM(Text003, FALSE, VendorWKACheck.TABLECAPTION) THEN
                   VendorWKACheck.DELETEALL(TRUE)
                 ELSE
                   ERROR(Text004);
             END;

    CaptionML=[ENU=WKA Check;
               NOR=WKA-kontroll;
               SVE=WKA-kontroll];
    LookupPageID=Page11020330;
    DrillDownPageID=Page11020330;
  }
  FIELDS
  {
    { 10  ;   ;Code                ;Code20        ;CaptionML=[ENU=Code;
                                                              NOR=Kode;
                                                              SVE=Kod];
                                                   NotBlank=Yes }
    { 20  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 30  ;   ;Check Type          ;Option        ;OnValidate=BEGIN
                                                                CheckContainsAndCheckType;
                                                              END;

                                                   CaptionML=[ENU=Check Type;
                                                              NOR=Sjekktype;
                                                              SVE=Checktyp];
                                                   OptionCaptionML=[ENU=" ,Value,Due Date,Approved";
                                                                    NOR=" ,Verdi,Forfallsdato,Godkjent";
                                                                    SVE=" ,V„rde,F”rfallodatum,Godk„nt"];
                                                   OptionString=[ ,Value,Date,Approved] }
    { 40  ;   ;Mandatory           ;Boolean       ;CaptionML=[ENU=Mandatory;
                                                              NOR=Obligatorisk;
                                                              SVE=Obligatoriskt] }
    { 50  ;   ;Request             ;Boolean       ;CaptionML=[ENU=Request;
                                                              NOR=Foresp›rsel;
                                                              SVE=F”rfr†gan] }
    { 70  ;   ;Apply on Other Subcontractors;Boolean;
                                                   CaptionML=[ENU=Apply on Other Subcontractors;
                                                              NOR=Bruk p† Andre Underentrepren›rer;
                                                              SVE=Till„mpa p† andra underentrepren”rer] }
    { 80  ;   ;Apply on SWP        ;Boolean       ;CaptionML=[ENU=Apply on SWP;
                                                              NOR=Bruk p† SWP;
                                                              SVE=Till„mpa p† SWP] }
    { 85  ;   ;Apply on ACL        ;Boolean       ;CaptionML=ENU=Apply on ACL }
    { 90  ;   ;Apply on Security Fund;Boolean     ;CaptionML=[ENU=Apply on Security Fund;
                                                              NOR=Bruk p† Sikkerhetsfond;
                                                              SVE=Till„mpa p† s„kerhetsfond] }
    { 100 ;   ;Contains            ;Option        ;OnValidate=BEGIN
                                                                IF Contains > 0 THEN BEGIN
                                                                  CheckContainsAndCheckType;

                                                                  WKACheck.RESET;
                                                                  WKACheck.SETFILTER(Code, '<>%1', Code);
                                                                  WKACheck.SETRANGE(Contains, Contains);
                                                                  IF WKACheck.FINDFIRST THEN
                                                                    ERROR(Text001, FIELDCAPTION(Contains), Contains, TABLECAPTION);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Contains;
                                                              NOR=Inneholder;
                                                              SVE=Inneh†ller];
                                                   OptionCaptionML=[ENU=" ,Income Tax No.,Affiliation No.";
                                                                    NOR=" ,Inntektsskattnr.,Tilknytningsnr.";
                                                                    SVE=" ,Inkomstskattenr,Filialnr"];
                                                   OptionString=[ ,Income Tax No.,Affiliation No.];
                                                   BlankZero=Yes }
    { 110 ;   ;Apply on Empl. Agency;Boolean      ;CaptionML=ENU=Apply on Empl. Agency }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      WKACheck@1100485000 : Record 11020275;
      Text001@1100485001 : TextConst 'ENU=%1 %2 may only be used for one %3.;NOR=%1 %2 kan kun brukes for ‚n %3.;SVE=%1 %2 kan endast anv„ndas f”r en %3.';
      Text002@1100485002 : TextConst 'ENU=%1 must be %2 if %3 is %4;NOR=%1 m† v‘re %2 om %3 er %4;SVE=%1 m†ste vara %2 om %3 „r %4';
      VendorWkaCheck@1100485004 : Record 11020276;
      Vendor@1100485003 : Record 23;
      Text003@1100485005 : TextConst 'ENU=%1s are present. Do you still want to continue deleting?;NOR=%1(r) finnes. Vil du fortsette † fjerne?;SVE=%1s finns. Vill du fortfarande forts„tta att ta bort?';
      Text004@1100485006 : TextConst 'ENU=Deletion has been cancelled;NOR=Fjerningen er avbrutt;SVE=Borttagningen har avbrutits';

    PROCEDURE AddVendorWKAChecks@1100485000();
    BEGIN
      WKACheck.RESET;
      IF WKACheck.FIND('-') THEN
        REPEAT
          Vendor.SETFILTER("Subcontractor Type",'>%1',Vendor."Subcontractor Type"::" ");
          IF Vendor.FINDSET THEN
            REPEAT
              IF WKACheckApplicable(WKACheck, Vendor) THEN BEGIN
                VendorWkaCheck.INIT;
                VendorWkaCheck."Vendor No." := Vendor."No.";
                VendorWkaCheck.Code := WKACheck.Code;
                IF VendorWkaCheck.INSERT(TRUE) THEN;
              END;
            UNTIL Vendor.NEXT = 0;
        UNTIL WKACheck.NEXT = 0;
    END;

    PROCEDURE DeleteVendorWKAChecks@1100485004();
    BEGIN
      WKACheck.RESET;
      IF WKACheck.FIND('-') THEN
        REPEAT
          Vendor.SETFILTER("Subcontractor Type",'>%1',Vendor."Subcontractor Type"::" ");
          IF Vendor.FINDSET THEN
            REPEAT
              IF NOT WKACheckApplicable(WKACheck, Vendor) THEN BEGIN
                VendorWkaCheck.RESET;
                VendorWkaCheck.SETRANGE("Vendor No.", Vendor."No.");
                VendorWkaCheck.SETRANGE(Code, WKACheck.Code);
                VendorWkaCheck.SETRANGE("Extra Obligation Vendor", FALSE);
                IF VendorWkaCheck.FINDSET(TRUE,FALSE) THEN
                  REPEAT
                    VendorWkaCheck.DELETE(TRUE);
                  UNTIL VendorWkaCheck.NEXT = 0
              END;
            UNTIL Vendor.NEXT = 0;
        UNTIL WKACheck.NEXT = 0;
    END;

    PROCEDURE WKACheckApplicable@1100485001(IWKACheck@1100485001 : Record 11020275;IVendorRec@1100485000 : Record 23) : Boolean;
    BEGIN
      EXIT(
         (IWKACheck."Apply on Security Fund" AND IVendorRec."Security Fund") OR
         (IWKACheck."Apply on SWP" AND (IVendorRec."Subcontractor Type" = IVendorRec."Subcontractor Type"::"Self Employed") AND NOT IVendorRec."Security Fund") OR
         (IWKACheck."Apply on ACL" AND IVendorRec.ACL AND (IVendorRec."Subcontractor Type" = IVendorRec."Subcontractor Type"::" ") AND NOT IVendorRec."Security Fund") OR
         (IWKACheck."Apply on Other Subcontractors" AND (IVendorRec."Subcontractor Type" <> IVendorRec."Subcontractor Type"::"Self Employed") AND (NOT IVendorRec.ACL) AND (NOT IVendorRec."Security Fund")) OR
         (IWKACheck."Apply on Empl. Agency" AND (IVendorRec."Subcontractor Type" = IVendorRec."Subcontractor Type"::"Employment Agency")));
    END;

    PROCEDURE CheckContainsAndCheckType@1100485002();
    BEGIN
      IF (Contains > 0) AND ("Check Type" <> "Check Type"::Value) THEN BEGIN
        "Check Type" := "Check Type"::Value;
        ERROR(Text002, FIELDCAPTION("Check Type"), "Check Type", FIELDCAPTION(Contains), Contains);
      END;
    END;

    PROCEDURE SetWKAVendorFilters@1100485003(IVendorRec@1100485000 : Record 23);
    BEGIN
      SETRANGE("Apply on Security Fund");
      SETRANGE("Apply on SWP");
      SETRANGE("Apply on ACL");
      SETRANGE("Apply on Other Subcontractors");

      IF IVendorRec.ACL THEN BEGIN
        SETRANGE("Apply on ACL", TRUE);
      END ELSE BEGIN
        IF IVendorRec."Security Fund" THEN
          SETRANGE("Apply on Security Fund", TRUE)
        ELSE
          IF IVendorRec."Subcontractor Type" = IVendorRec."Subcontractor Type"::"Self Employed" THEN
            SETRANGE("Apply on SWP", TRUE)
          ELSE
            SETRANGE("Apply on Other Subcontractors", TRUE);
      END;
    END;

    BEGIN
    END.
  }
}

