OBJECT Page 11130228 Period Selection
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Periodenauswahl:;
               ENU=Period Selection;
               NLD=Periode selectie;
               NOR=Periodeutvalg:;
               SVE=Periodval:];
    SaveValues=No;
    LinksAllowed=No;
    PageType=StandardDialog;
    OnInit=BEGIN
             // Accounting period description should be not editable, only modify period via lookup.
             // If 'Editable' property of this field is set FALSE then no box with lookup button is shown.
             // With AccPeriodDescrEditable=FALSE this is only shown for client type 'Windows', so for other
             // client types it is set to TRUE. If this field is modified by user then value will be restored
             AccPeriodDescrEditable := (CURRENTCLIENTTYPE <> CLIENTTYPE::Windows);
           END;

    OnOpenPage=BEGIN
                 DetermineLanguage;
               END;

  }
  CONTROLS
  {
    { 1100525000;0;Container;
                ContainerType=ContentArea }

    { 1100409003;1;Group  ;
                CaptionML=[DEU=Buchhaltungsperiode;
                           ENU=Accounting Period;
                           NLD=Boekhoudperiode;
                           NOR=Bokf›ringsperiode;
                           SVE=Bokf”ringsperiod];
                Visible=PeriodMode;
                GroupType=Group }

    { 1100409000;2;Field  ;
                SourceExpr=AccPeriodDescription;
                Editable=AccPeriodDescrEditable;
                RowSpan=1;
                ColumnSpan=1;
                OnValidate=BEGIN
                             AccPeriodDescription := AccountingPeriod.Name;  //Restore, see OnInit
                           END;

                OnLookup=BEGIN
                           IF AccountingPeriod."Starting Date" = 0D THEN BEGIN
                             AccountingPeriod."Starting Date" := PickerDate;
                             AccountingPeriod.FIND('=<>');
                             AccountingPeriod.Name := '';
                           END;
                           IF PAGE.RUNMODAL(0, AccountingPeriod) = ACTION::LookupOK THEN BEGIN
                             AccPeriodDescription := AccountingPeriod.Name;
                             ValidateAccountingPeriod;
                           END;
                         END;

                ShowCaption=No }

    { 1100409004;1;Group  ;
                CaptionML=[DEU=Datum;
                           ENU=Date;
                           NLD=Datum;
                           NOR=Dato;
                           SVE=Datum];
                GroupType=Group }

    { 1100528700;2;Field  ;
                Name=DatePicker;
                CaptionClass='';
                ControlAddIn=[Fps.Nav.Addin.DateTimePicker;PublicKeyToken=024bd013665211e9] }

    { 1100525004;1;Group  ;
                CaptionML=[DEU=Start/Ende;
                           ENU=Start/End;
                           NLD=Start/Eind];
                Visible=PeriodMode;
                GroupType=Group }

    { 1100525003;2;Field  ;
                CaptionML=[DEU=Start ausw„hlen;
                           ENU=Select Start;
                           NLD=Start selecteren];
                SourceExpr=SelectStart;
                OnValidate=BEGIN
                             SelectEnd := (NOT SelectStart);
                             SetDatePickerOnStartOrtEnd;
                           END;
                            }

    { 1100525006;2;Field  ;
                CaptionML=[DEU=Ende ausw„hlen;
                           ENU=Select End;
                           NLD=Einde selecteren];
                SourceExpr=SelectEnd;
                OnValidate=BEGIN
                             SelectStart := (NOT SelectEnd);
                             SetDatePickerOnStartOrtEnd;
                           END;
                            }

    { 1100525001;2;Field  ;
                CaptionML=[DEU=Startdatum;
                           ENU=Starting Date;
                           NLD=Startdatum;
                           NOR=Startdato;
                           SVE=Startdatum];
                SourceExpr=StartingDate;
                Editable=FALSE;
                QuickEntry=FALSE }

    { 1100525002;2;Field  ;
                CaptionML=[DEU=Enddatum;
                           ENU=Einding Date;
                           NLD=Eindatum];
                SourceExpr=EndingDate;
                Editable=FALSE;
                QuickEntry=FALSE }

  }
  CODE
  {
    VAR
      AccountingPeriod@1100409000 : Record 50;
      PickerDate@1100525006 : Date;
      StartingDate@1100525001 : Date;
      EndingDate@1100525003 : Date;
      SelectStart@1100525000 : Boolean;
      SelectEnd@1100525002 : Boolean;
      AccPeriodDescrEditable@1100525008 : Boolean INDATASET;
      PeriodMode@1100525005 : Boolean INDATASET;
      Language@1100525004 : Text[2];
      AccPeriodDescription@1100409001 : Text;
      DatePickerControlAddInReady@1100527000 : Boolean;

    PROCEDURE SetDateSelection@1100525002(Date2@1100525000 : Date);
    BEGIN
      PickerDate := Date2;
      IF PickerDate = 0D THEN
        PickerDate := WORKDATE;
    END;

    PROCEDURE SetPeriodSelection@1100525000(StartingDate2@1100525000 : Date;EndingDate2@1100525001 : Date);
    BEGIN
      PeriodMode := TRUE;
      StartingDate := StartingDate2;
      EndingDate := EndingDate2;
      IF (StartingDate = 0D) AND (EndingDate = 0D) THEN BEGIN
        StartingDate := WORKDATE;
        EndingDate := WORKDATE;
      END ELSE BEGIN
        IF StartingDate = 0D THEN
          StartingDate := EndingDate;
        IF EndingDate = 0D THEN
          EndingDate := StartingDate;
      END;
      IF (EndingDate < StartingDate) THEN
        EndingDate := StartingDate;
      SelectStart := TRUE;
      PickerDate := StartingDate;
    END;

    PROCEDURE GetDateSelection@1100525003(VAR Date2@1100525000 : Date);
    BEGIN
      Date2 := PickerDate;
    END;

    PROCEDURE GetPeriodSelection@1100525004(VAR StartingDate2@1100525001 : Date;VAR EndingDate2@1100525000 : Date);
    BEGIN
      StartingDate2 := StartingDate;
      EndingDate2 := EndingDate;
    END;

    LOCAL PROCEDURE DetermineLanguage@1100525001();
    VAR
      WindowsLanguages@1100525000 : Record 2000000045;
    BEGIN
      IF WindowsLanguages.GET(GLOBALLANGUAGE) THEN BEGIN
        IF WindowsLanguages."Abbreviated Name" <> '' THEN
          Language :=  LOWERCASE(COPYSTR(WindowsLanguages."Abbreviated Name", 1, 2));
      END;
      IF Language = '' THEN
        Language := 'en';
    END;

    LOCAL PROCEDURE ValidateAccountingPeriod@1100409000();
    BEGIN
      StartingDate := AccountingPeriod."Starting Date";
      EndingDate := StartingDate;
      IF AccountingPeriod.NEXT <> 0 THEN BEGIN
        EndingDate := AccountingPeriod."Starting Date" - 1;
        AccountingPeriod.GET(StartingDate);
      END;
      SetDatePickerOnStartOrtEnd;
    END;

    LOCAL PROCEDURE SetDatePickerOnStartOrtEnd@1100525008();
    BEGIN
      IF SelectStart THEN
        PickerDate := StartingDate
      ELSE
        PickerDate := EndingDate;

      IF DatePickerControlAddInReady THEN
        CurrPage.DatePicker.SetDate(Date2DateText(PickerDate));
    END;

    LOCAL PROCEDURE Date2DateText@1100525005(Date@1100525000 : Date) : Text[10];
    BEGIN
      IF Date <> 0D THEN
        EXIT(FORMAT(Date, 10, '<Day,2>/<Month,2>/<Year4>'));
    END;

    LOCAL PROCEDURE DateText2Date@1100525006(DateText@1100525000 : Text[10]) : Date;
    VAR
      DayNo@1100525003 : Integer;
      MonthNo@1100525002 : Integer;
      YearNo@1100525001 : Integer;
    BEGIN
      IF DateText <> '' THEN BEGIN
        IF EVALUATE(DayNo, COPYSTR(DateText,1,2)) AND EVALUATE(MonthNo, COPYSTR(DateText,4,2)) AND EVALUATE(YearNo, COPYSTR(DateText,7,4)) THEN
          EXIT(DMY2DATE(DayNo, MonthNo, YearNo));
      END;
    END;

    EVENT DatePicker@-1100528700::ControlAddInReady@2();
    BEGIN
      CurrPage.DatePicker.DateTimePickerInitialize(Date2DateText(PickerDate), Language, 'DD/MM/YYYY');
      DatePickerControlAddInReady := TRUE;
    END;

    EVENT DatePicker@-1100528700::DateTimePickerOnChangeDate@3(date@1100528700 : Text);
    BEGIN
      PickerDate := DateText2Date(date);
      IF PeriodMode THEN BEGIN
        IF SelectStart THEN BEGIN
          StartingDate := PickerDate;
          IF EndingDate < StartingDate THEN
            EndingDate := StartingDate;
        END ELSE BEGIN
          EndingDate := PickerDate;
          IF EndingDate < StartingDate THEN
            StartingDate := EndingDate;
        END;
      END;
    END;

    BEGIN
    END.
  }
}

