OBJECT Table 7501 Item Attribute Value
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    DataCaptionFields=Value;
    OnDelete=VAR
               ItemAttrValueTranslation@1000 : Record 7503;
               ItemAttributeValueMapping@1001 : Record 7505;
             BEGIN
               IF HasBeenUsed THEN
                 IF NOT CONFIRM(DeleteUsedAttributeValueQst) THEN
                   ERROR('');
               ItemAttributeValueMapping.SETRANGE("Item Attribute ID","Attribute ID");
               ItemAttributeValueMapping.SETRANGE("Item Attribute Value ID",ID);
               ItemAttributeValueMapping.DELETEALL;

               ItemAttrValueTranslation.SETRANGE("Attribute ID","Attribute ID");
               ItemAttrValueTranslation.SETRANGE(ID,ID);
               ItemAttrValueTranslation.DELETEALL;
             END;

    CaptionML=[ENU=Item Attribute Value;
               NOR=Verdi for vareattributt];
    LookupPageID=Page7501;
  }
  FIELDS
  {
    { 1   ;   ;Attribute ID        ;Integer       ;TableRelation="Item Attribute".ID WHERE (Blocked=CONST(No));
                                                   CaptionML=[ENU=Attribute ID;
                                                              NOR=Attributt-ID];
                                                   NotBlank=Yes }
    { 2   ;   ;ID                  ;Integer       ;AutoIncrement=Yes;
                                                   CaptionML=[ENU=ID;
                                                              NOR=ID;
                                                              SVE=ID] }
    { 3   ;   ;Value               ;Text250       ;OnValidate=VAR
                                                                ItemAttribute@1000 : Record 7500;
                                                              BEGIN
                                                                IF xRec.Value = Value THEN
                                                                  EXIT;

                                                                TESTFIELD(Value);
                                                                IF HasBeenUsed THEN
                                                                  IF NOT CONFIRM(RenameUsedAttributeValueQst) THEN
                                                                    ERROR('');

                                                                CheckValueUniqueness(Rec,Value);
                                                                DeleteTranslationsConditionally(xRec,Value);

                                                                ItemAttribute.GET("Attribute ID");
                                                                IF IsNumeric(ItemAttribute) THEN
                                                                  EVALUATE("Numeric Value",Value);
                                                                IF ItemAttribute.Type = ItemAttribute.Type::Date THEN
                                                                  EVALUATE("Date Value",Value);
                                                              END;

                                                   CaptionML=[ENU=Value;
                                                              NOR=Verdi;
                                                              SVE=V„rde] }
    { 4   ;   ;Numeric Value       ;Decimal       ;OnValidate=VAR
                                                                ItemAttribute@1000 : Record 7500;
                                                              BEGIN
                                                                IF xRec."Numeric Value" = "Numeric Value" THEN
                                                                  EXIT;

                                                                ItemAttribute.GET("Attribute ID");
                                                                IF IsNumeric(ItemAttribute) THEN
                                                                  VALIDATE(Value,FORMAT("Numeric Value",0,9));
                                                              END;

                                                   CaptionML=[ENU=Numeric Value;
                                                              NOR=Numerisk verdi];
                                                   BlankZero=Yes }
    { 5   ;   ;Date Value          ;Date          ;OnValidate=VAR
                                                                ItemAttribute@1000 : Record 7500;
                                                              BEGIN
                                                                IF xRec."Date Value" = "Date Value" THEN
                                                                  EXIT;

                                                                ItemAttribute.GET("Attribute ID");
                                                                IF ItemAttribute.Type = ItemAttribute.Type::Date THEN
                                                                  VALIDATE(Value,FORMAT("Date Value"));
                                                              END;

                                                   CaptionML=[ENU=Date Value;
                                                              NOR=Datoverdi;
                                                              SVE=Datumv„rde] }
    { 6   ;   ;Blocked             ;Boolean       ;CaptionML=[ENU=Blocked;
                                                              NOR=Sperret;
                                                              SVE=Sp„rrad] }
    { 10  ;   ;Attribute Name      ;Text250       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Item Attribute".Name WHERE (ID=FIELD(Attribute ID)));
                                                   CaptionML=[ENU=Attribute Name;
                                                              NOR=Attributtnavn] }
  }
  KEYS
  {
    {    ;Attribute ID,ID                         ;Clustered=Yes }
    {    ;Value                                    }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;Value                                    }
    { 2   ;Brick               ;Attribute Name,Value                     }
  }
  CODE
  {
    VAR
      NameAlreadyExistsErr@1000 : TextConst '@@@=%1 - arbitrary name;ENU=The item attribute value with value ''%1'' already exists.;NOR=Verdien for vareattributtet med verdien %1 finnes allerede.';
      ReuseValueTranslationsQst@1001 : TextConst '@@@=%1 - arbitrary name,%2 - arbitrary name;ENU=There are translations for item attribute value ''%1''.\\Do you want to reuse these translations for the new value ''%2''?;NOR=Det finnes oversettelser for vareattributtets verdi %1.\\Vil du bruke disse oversettelsene for den nye verdien %2?';
      DeleteUsedAttributeValueQst@1003 : TextConst 'ENU=This item attribute value has been assigned to at least one item.\\Are you sure you want to delete it?;NOR=Verdien for dette vareattributtet har blitt tilordnet til minst ‚n vare.\\Er du sikker p† at du vil slette det?';
      RenameUsedAttributeValueQst@1002 : TextConst 'ENU=This item attribute value has been assigned to at least one item.\\Are you sure you want to rename it?;NOR=Verdien for dette vareattributtet har blitt tilordnet til minst ‚n vare.\\Er du sikker p† at du vil gi det nytt navn?';
      TransformationRule@1004 : Record 1237;

    [External]
    PROCEDURE LookupAttributeValue@24(AttributeID@1000 : Integer;VAR AttributeValueID@1001 : Integer);
    VAR
      ItemAttributeValue@1003 : Record 7501;
      ItemAttributeValues@1002 : Page 7501;
    BEGIN
      ItemAttributeValue.SETRANGE("Attribute ID",AttributeID);
      ItemAttributeValues.LOOKUPMODE := TRUE;
      ItemAttributeValues.SETTABLEVIEW(ItemAttributeValue);
      IF ItemAttributeValue.GET(AttributeID,AttributeValueID) THEN
        ItemAttributeValues.SETRECORD(ItemAttributeValue);
      IF ItemAttributeValues.RUNMODAL = ACTION::LookupOK THEN BEGIN
        ItemAttributeValues.GETRECORD(ItemAttributeValue);
        AttributeValueID := ItemAttributeValue.ID;
      END;
    END;

    [External]
    PROCEDURE GetAttributeNameInCurrentLanguage@2() : Text[250];
    VAR
      ItemAttribute@1000 : Record 7500;
    BEGIN
      IF ItemAttribute.GET("Attribute ID") THEN
        EXIT(ItemAttribute.GetNameInCurrentLanguage);
      EXIT('');
    END;

    [External]
    PROCEDURE GetValueInCurrentLanguage@4() : Text[250];
    VAR
      ItemAttribute@1000 : Record 7500;
      ValueTxt@1002 : Text;
    BEGIN
      ValueTxt := GetValueInCurrentLanguageWithoutUnitOfMeasure;

      IF ItemAttribute.GET("Attribute ID") THEN
        CASE ItemAttribute.Type OF
          ItemAttribute.Type::Integer,
          ItemAttribute.Type::Decimal:
            IF ValueTxt <> '' THEN
              EXIT(AppendUnitOfMeasure(ValueTxt,ItemAttribute));
        END;

      EXIT(ValueTxt);
    END;

    [External]
    PROCEDURE GetValueInCurrentLanguageWithoutUnitOfMeasure@12() : Text[250];
    VAR
      ItemAttribute@1000 : Record 7500;
    BEGIN
      IF ItemAttribute.GET("Attribute ID") THEN
        CASE ItemAttribute.Type OF
          ItemAttribute.Type::Option:
            EXIT(GetTranslatedName(GLOBALLANGUAGE));
          ItemAttribute.Type::Text:
            EXIT(Value);
          ItemAttribute.Type::Integer:
            IF Value <> '' THEN
              EXIT(FORMAT(Value));
          ItemAttribute.Type::Decimal:
            IF Value <> '' THEN
              EXIT(FORMAT("Numeric Value"));
          ItemAttribute.Type::Date:
            EXIT(FORMAT("Date Value"));
          ELSE BEGIN
            OnGetValueInCurrentLanguage(ItemAttribute,Rec);
            EXIT(Value);
          END;
        END;
      EXIT('');
    END;

    [External]
    PROCEDURE GetTranslatedName@3(LanguageID@1000 : Integer) : Text[250];
    VAR
      Language@1001 : Record 8;
    BEGIN
      Language.SETRANGE("Windows Language ID",LanguageID);
      IF Language.FINDFIRST THEN
        EXIT(GetTranslatedNameByLanguageCode(Language.Code));
      EXIT(Value);
    END;

    [External]
    PROCEDURE GetTranslatedNameByLanguageCode@19(LanguageCode@1000 : Code[10]) : Text[250];
    VAR
      ItemAttrValueTranslation@1001 : Record 7503;
    BEGIN
      IF NOT ItemAttrValueTranslation.GET("Attribute ID",ID,LanguageCode) THEN
        EXIT(Value);
      EXIT(ItemAttrValueTranslation.Name);
    END;

    LOCAL PROCEDURE CheckValueUniqueness@5(ItemAttributeValue@1000 : Record 7501;NameToCheck@1001 : Text[250]);
    BEGIN
      ItemAttributeValue.SETRANGE("Attribute ID","Attribute ID");
      ItemAttributeValue.SETFILTER(ID,'<>%1',ItemAttributeValue.ID);
      ItemAttributeValue.SETRANGE(Value,NameToCheck);
      IF NOT ItemAttributeValue.ISEMPTY THEN
        ERROR(NameAlreadyExistsErr,NameToCheck);
    END;

    LOCAL PROCEDURE DeleteTranslationsConditionally@7(ItemAttributeValue@1000 : Record 7501;NameToCheck@1001 : Text[250]);
    VAR
      ItemAttrValueTranslation@1002 : Record 7503;
    BEGIN
      IF (ItemAttributeValue.Value <> '') AND (ItemAttributeValue.Value <> NameToCheck) THEN BEGIN
        ItemAttrValueTranslation.SETRANGE("Attribute ID","Attribute ID");
        ItemAttrValueTranslation.SETRANGE(ID,ID);
        IF NOT ItemAttrValueTranslation.ISEMPTY THEN
          IF NOT CONFIRM(STRSUBSTNO(ReuseValueTranslationsQst,ItemAttributeValue.Value,NameToCheck)) THEN
            ItemAttrValueTranslation.DELETEALL;
      END;
    END;

    LOCAL PROCEDURE AppendUnitOfMeasure@1(String@1000 : Text;ItemAttribute@1001 : Record 7500) : Text;
    BEGIN
      IF ItemAttribute."Unit of Measure" <> '' THEN
        EXIT(STRSUBSTNO('%1 %2',String,FORMAT(ItemAttribute."Unit of Measure")));
      EXIT(String);
    END;

    [External]
    PROCEDURE HasBeenUsed@6() : Boolean;
    VAR
      ItemAttributeValueMapping@1000 : Record 7505;
      AttributeHasBeenUsed@1001 : Boolean;
    BEGIN
      ItemAttributeValueMapping.SETRANGE("Item Attribute ID","Attribute ID");
      ItemAttributeValueMapping.SETRANGE("Item Attribute Value ID",ID);
      AttributeHasBeenUsed := NOT ItemAttributeValueMapping.ISEMPTY;
      OnAfterHasBeenUsed(Rec,AttributeHasBeenUsed);
      EXIT(AttributeHasBeenUsed);
    END;

    PROCEDURE SetValueFilter@14(VAR ItemAttribute@1000 : Record 7500;FilterText@1001 : Text);
    VAR
      IndexOfOrCondition@1003 : Integer;
    BEGIN
      SETRANGE("Numeric Value");
      SETRANGE(Value);

      IF IsNumeric(ItemAttribute) THEN BEGIN
        SETFILTER("Numeric Value",FilterText);
        EXIT;
      END;

      IF ItemAttribute.Type = ItemAttribute.Type::Text THEN
        IF (STRPOS(FilterText,'*') = 0) AND (STRPOS(FilterText,'''') = 0) THEN BEGIN
          FilterText := STRSUBSTNO('@*%1*',LOWERCASE(FilterText));
          IndexOfOrCondition := STRPOS(FilterText,'|');
          IF IndexOfOrCondition > 0 THEN BEGIN
            TransformationRule.INIT;
            TransformationRule."Find Value" := '|';
            TransformationRule."Replace Value" := '*|@*';
            TransformationRule."Transformation Type" := TransformationRule."Transformation Type"::Replace;
            FilterText := TransformationRule.TransformText(FilterText);
          END
        END;

      SETFILTER(Value,FilterText);
    END;

    LOCAL PROCEDURE IsNumeric@8(VAR ItemAttribute@1000 : Record 7500) : Boolean;
    BEGIN
      EXIT(ItemAttribute.Type IN [ItemAttribute.Type::Integer,ItemAttribute.Type::Decimal]);
    END;

    [External]
    PROCEDURE LoadItemAttributesFactBoxData@15(KeyValue@1000 : Code[20]);
    VAR
      ItemAttributeValueMapping@1001 : Record 7505;
      ItemAttributeValue@1002 : Record 7501;
    BEGIN
      RESET;
      DELETEALL;
      ItemAttributeValueMapping.SETRANGE("Table ID",DATABASE::Item);
      ItemAttributeValueMapping.SETRANGE("No.",KeyValue);
      IF ItemAttributeValueMapping.FINDSET THEN
        REPEAT
          IF ItemAttributeValue.GET(ItemAttributeValueMapping."Item Attribute ID",ItemAttributeValueMapping."Item Attribute Value ID") THEN BEGIN
            TRANSFERFIELDS(ItemAttributeValue);
            OnLoadItemAttributesFactBoxDataOnBeforeInsert(ItemAttributeValueMapping,Rec);
            INSERT;
          END
        UNTIL ItemAttributeValueMapping.NEXT = 0;
    END;

    [External]
    PROCEDURE LoadCategoryAttributesFactBoxData@10(CategoryCode@1000 : Code[20]);
    VAR
      ItemAttributeValueMapping@1001 : Record 7505;
      ItemAttributeValue@1002 : Record 7501;
      ItemCategory@1003 : Record 5722;
    BEGIN
      RESET;
      DELETEALL;
      IF CategoryCode = '' THEN
        EXIT;
      ItemAttributeValueMapping.SETRANGE("Table ID",DATABASE::"Item Category");
      REPEAT
        ItemAttributeValueMapping.SETRANGE("No.",CategoryCode);
        IF ItemAttributeValueMapping.FINDSET THEN
          REPEAT
            IF ItemAttributeValue.GET(ItemAttributeValueMapping."Item Attribute ID",ItemAttributeValueMapping."Item Attribute Value ID") THEN
              IF NOT AttributeExists(ItemAttributeValue."Attribute ID") THEN BEGIN
                TRANSFERFIELDS(ItemAttributeValue);
                INSERT;
              END;
          UNTIL ItemAttributeValueMapping.NEXT = 0;
        IF ItemCategory.GET(CategoryCode) THEN
          CategoryCode := ItemCategory."Parent Category"
        ELSE
          CategoryCode := '';
      UNTIL CategoryCode = '';
    END;

    LOCAL PROCEDURE AttributeExists@9(AttributeID@1001 : Integer) AttribExist : Boolean;
    BEGIN
      SETRANGE("Attribute ID",AttributeID);
      AttribExist := NOT ISEMPTY;
      RESET;
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterHasBeenUsed@13(ItemAttributeValue@1000 : Record 7501;VAR AttributeHasBeenUsed@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnGetValueInCurrentLanguage@11(ItemAttribute@1000 : Record 7500;VAR ItemAttributeValue@1001 : Record 7501);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnLoadItemAttributesFactBoxDataOnBeforeInsert@16(VAR ItemAttributeValueMapping@1000 : Record 7505;ItemAttributeValue@1001 : Record 7501);
    BEGIN
    END;

    BEGIN
    END.
  }
}

