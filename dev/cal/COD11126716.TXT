OBJECT Codeunit 11126716 DSP Assignment Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    TableNo=11126715;
    OnRun=BEGIN
            DSPSetup.GET;
            GenericWebserviceSetup.GET;
            GenericWebServiceQueue := Rec;

            CASE "Method Name" OF
              DSPManagement.GetTcAssignment:                ProcessInboundAssignment;
              DSPManagement.GetTcAssignmentReady:           ProcessInboundAssignmentReady;
              DSPManagement.GetTcCancellation:              ProcessInboundCancellation;
              DSPManagement.GetTcStatusUpdate:              ProcessInboundStatusUpdate;
              DSPManagement.GetTcAdjustment:                ProcessOutboundAdjustment;
              DSPManagement.GetTcAssignmentInfo:            ProcessOutboundAssignmentInfo;
              DSPManagement.GetTcCancellationReady:         ProcessOutboundCancellationReady;
              DSPManagement.GetTcProcessCostPlus:           ProcessCostPlus;
              DSPManagement.GetTcProcessInvoice:            ProcessInvoice;
              DSPManagement.GetTcProcessServiceOrder:       ProcessServiceOrder;
              DSPManagement.GetTcProcessServiceOrderObject: ProcessServiceOrderObject;
              DSPManagement.GetTcProcessSupRecordingLines:  ProcessSupRecordingLines;
              ELSE
                ERROR(Text000, FIELDCAPTION("Method Name"), "Method Name");
            END;
          END;

  }
  CODE
  {
    VAR
      DSPSetup@1100529900 : Record 11126726;
      GenericWebserviceSetup@1100529902 : Record 11126728;
      GenericWebServiceQueue@1100528329 : Record 11126715;
      DocumentMgtSetup@1100528323 : Record 11071831;
      DSPManagement@1100529903 : Codeunit 11126714;
      DSPRequestManagement@1100528310 : Codeunit 11126222;
      DotnetFunctions@1100525000 : Codeunit 11126712;
      AlreadyProcessedTxt@1100525001 : TextConst 'ENU=%1 %2 is already processed.';
      AssignmentInfoTxt@1100528316 : TextConst 'ENU=AssignmentInfo';
      NOK@1100529904 : TextConst 'ENU=Not OK';
      OK@1100528347 : TextConst 'ENU=OK';
      TABLENOTXT@1100528345 : TextConst 'ENU=Table No.';
      Text000@1100529907 : TextConst 'ENU=%1 %2 unknown.';
      Text001@1100528339 : TextConst 'ENU=Error while sending object %1 to the Web Service.\\Error Code %2';
      Text002@1100528338 : TextConst 'ENU=%1 must have a value.';
      Text003@1100528803 : TextConst 'ENU=User Setup does not exists.';
      Text004@1100528802 : TextConst 'ENU="ServSetup.""Send Mail Using""::""NAS (SMTP)"" "';
      Text005@1100528807 : TextConst 'ENU=Service Order %1 is gewijzigd. Herziene opdracht %2 is verwerkt.';
      GenericWebserviceFunctions@1100525002 : Codeunit 11126711;
      ServiceUnitPriceManagement@1100528312 : Codeunit 11012846;
      XMLDOMManagement@1100528348 : Codeunit 6224;
      Counter@1100528352 : Integer;
      NodeCount@1100528350 : Integer;
      PrefCommon@1100528300 : Text;
      PrefCancelFinished@1100528307 : Text;
      PrefCancel@1100528302 : Text;
      PrefAssign@1100528304 : Text;
      PrefAssignReady@1100528308 : Text;
      PrefAdjust@1100528306 : Text;
      PrefOpdrInfo@1100528315 : Text;
      RootElement@1100528342 : Text;
      RootElementNamespace@1100528341 : Text;
      EmptyRecId@1100529906 : RecordID;
      RecId@1100528321 : RecordID;
      DnXmlDocument@1100528349 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      DnXmlNamespaceManager@1100528346 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
      DnXmlChildNode@1100528305 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DnXmlRootNode@1100528303 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      DnXmlNode@1100528301 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DnBasicHttpBinding@1100528337 : DotNet "'System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.ServiceModel.BasicHttpBinding";
      DnBasicHttpSecurityMode@1100528322 : DotNet "'System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.ServiceModel.BasicHttpSecurityMode";
      DnEndPointAddress@1100528320 : DotNet "'System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.ServiceModel.EndpointAddress";
      DnHttpClientCredentialType@1100528319 : DotNet "'System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.ServiceModel.HttpClientCredentialType";
      DnNetworkCredential@1100528318 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.NetworkCredential";
      DnWSMessageEncoding@1100528317 : DotNet "'System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.ServiceModel.WSMessageEncoding";
      DebugTxt@1100528309 : Text;
      Text006@1100528313 : TextConst 'ENU=%1 %2 is cancelled, ''Cancellation Ready'' sent to DSP.';

    PROCEDURE CreateObjects@1100528331(VAR DSPServiceObject@1100528303 : Record 11126722;ServiceOrderNo@1100528301 : Code[20]);
    VAR
      ContractObject@1100528305 : Record 11071702;
      ServiceObject@1100528300 : Record 11071691;
      ServiceOrder@1100528304 : Record 11012823;
      ServiceOrderObject@1100528302 : Record 11071724;
    BEGIN
      DSPSetup.GET;
      ServiceOrder.GET(ServiceOrderNo);
      IF (NOT DSPServiceObject.FINDSET) THEN EXIT;

      IF (ServiceOrder.Origin <> ServiceOrder.Origin::DSP) THEN BEGIN
        ServiceOrder.Origin := ServiceOrder.Origin::DSP;
        ServiceOrder.MODIFY;
      END;

      REPEAT
        ServiceObject.INIT;
        ServiceObject."No." := '';
        ServiceObject.INSERT(TRUE);

        ServiceObject.Status := DSPSetup."Status  Assignment Created";
        ServiceObject.VALIDATE("Standard Object No.", DSPServiceObject."Standard Object No.");
        ServiceObject."Dsp Origin" := ServiceObject."Dsp Origin"::Manual;
        ServiceObject."Dsp Discipline" := DSPServiceObject.Discipline;
        ServiceObject.MODIFY(TRUE);

        IF (ServiceOrder."Service Contract No." <> '') THEN BEGIN
          ContractObject.VALIDATE("Service Contract No.", ServiceOrder."Service Contract No.");
          ContractObject."Service Object No." := ServiceObject."No.";
          ContractObject.INSERT(TRUE);
        END;

        ServiceOrderObject.INIT;
        ServiceOrderObject.VALIDATE("Service Order No.", ServiceOrderNo);
        ServiceOrderObject."Object No." := ServiceObject."No.";
        ServiceOrderObject."Maintenance Scheme" := '';
        ServiceOrderObject.INSERT(TRUE);

        ServiceOrderObject.VALIDATE("Service Contract No.", ServiceOrder."Service Contract No.");
        ServiceOrderObject.VALIDATE("Standard Object No.", ServiceObject."Standard Object No.");
        ServiceOrderObject.MODIFY(TRUE);

        DSPManagement.UpdateReferencePoint(ServiceOrderObject."Object No.", DSPSetup."Reference Point New Object");
      UNTIL (DSPServiceObject.NEXT = 0);
    END;

    PROCEDURE ProcessRevisedAssignment@1100525044(EntryNo@1100525000 : BigInteger);
    VAR
      DSPAssignment@1100528800 : Record 11126740;
      ServiceOrderObject@1100528300 : Record 11071724;
      DocumentLinkManagement@1100528303 : Codeunit 11012401;
      SourceRecRef@1100528301 : RecordRef;
      TargetRecRef@1100528302 : RecordRef;
    BEGIN
      DSPAssignment.GET(EntryNo);
      IF (DSPAssignment."Processed On" <> 0DT) THEN
        ERROR(AlreadyProcessedTxt, DSPAssignment.TABLECAPTION, DSPAssignment."Assignment Id");

      DSPAssignment.GetXmlMessage(DnXmlDocument);
      GetGlobalVars(DSPAssignment."Version No.");

      IF (DSPManagement.ServiceOrderChanged(EntryNo)) THEN
        UpdateServiceOrderRevised(EntryNo);
      IF (DSPManagement.ServiceObjectChanged(EntryNo)) THEN
        UpdateServiceObjectRevised(EntryNo);
      IF (DSPManagement.SUPRecordingChanged(EntryNo)) THEN
        UpdateSupRecordingLinesRevised(EntryNo);
      IF (DSPManagement.ServiceTextChanged(EntryNo)) THEN
        UpdateServiceTextRevised(EntryNo);

      ServiceOrderObject.GET(DSPAssignment."Service Order No.", DSPAssignment."Object No.", '');
      UpdateObjectSpecificationsValues(DSPAssignment, ServiceOrderObject);

      SourceRecRef.GETTABLE(DSPAssignment);
      TargetRecRef.GETTABLE(ServiceOrderObject);
      DocumentLinkManagement.CopyDocLinks(SourceRecRef, TargetRecRef);

      DSPAssignment."Processed On" := CURRENTDATETIME;
      DSPAssignment.MODIFY;

      IF (GUIALLOWED) THEN
        MESSAGE(Text005, DSPAssignment."Service Order No.", FORMAT(DSPAssignment."No. Of Adjustments"));
    END;

    PROCEDURE ProcessCancellation@1100528807(DSPCancellation@1100528800 : Record 11126733);
    VAR
      ServiceOrder@1100528802 : Record 11012823;
      ServiceOrderObject@1100528300 : Record 11071724;
      ServiceObject@1100528301 : Record 11071691;
    BEGIN
      GetGlobalVars(DSPCancellation."Version No.");
      DSPCancellation.TESTFIELD(Status, DSPCancellation.Status::Released);
      ServiceOrder.GET(DSPCancellation."Service Order No.");
      ServiceOrderObject.GET(DSPCancellation."Service Order No.", DSPCancellation."Object No.");
      ServiceObject.GET(DSPCancellation."Object No.");

      SetSupRecordingLineToZero(DSPCancellation."Service Order No.", ServiceOrderObject."Object No.");

      ServiceObject.Status := DSPSetup."Status Assignment Cancelled";
      ServiceObject.MODIFY(TRUE);

      ServiceOrder."Dsp Order Type" := DSPManagement.GetServiceOrderDspOrderType(ServiceOrder."No.");
      ServiceOrder.MODIFY(TRUE);

      SendCancellationReadyRequest(DSPCancellation);

      DSPCancellation.Status := DSPCancellation.Status::Processed;
      DSPCancellation."Sent Ready Request To Dsp" := CURRENTDATETIME;
      DSPCancellation.MODIFY(TRUE);

      DSPManagement.UpdateReferencePoint(ServiceOrderObject."Object No.", DSPSetup."Ref. Point Cancellation");

      IF (AllServiceOrderObjectsCancelledByDsp(ServiceOrder."No.")) THEN BEGIN
        ServiceOrder.SetDontShowMenuOnStatusChange(TRUE);
        ServiceOrder.VALIDATE(Status, ServiceOrder.Status::Cancelled);
        ServiceOrder.HandleStatusChange;
        ServiceOrder.MODIFY(TRUE);
      END;
    END;

    PROCEDURE ReleaseCancellation@1100528804(DSPCancellation@1100528800 : Record 11126733);
    VAR
      ServiceOrder@1100528301 : Record 11012823;
      ServiceOrderObject@1100528300 : Record 11071724;
    BEGIN
      GetGlobalVars(DSPCancellation."Version No.");
      DSPCancellation.TESTFIELD(Status, DSPCancellation.Status::Received);
      DSPCancellation.Status := DSPCancellation.Status::Released;
      DSPCancellation.MODIFY;
    END;

    PROCEDURE SendAdjustmentMessage@1100525019(DSPAdjustmentMessage@1100525002 : Record 11126727);
    VAR
      DSPAssignment@1100528300 : Record 11126740;
      TempBlob@1100528301 : TEMPORARY Record 99008535;
    BEGIN
      DSPManagement.GetDspAssignmentByServiceOrderNoObjectNo(DSPAdjustmentMessage."Service Order No.", DSPAdjustmentMessage."Object No.", DSPAssignment);
      GetGlobalVars(DSPAssignment."Version No.");
      FillAdjustmentMessageRequest(DSPAdjustmentMessage);

      DotnetFunctions.SerializeToBlob(TempBlob, DnXmlDocument);
      CreateGenericWebServiceQueue(TempBlob, DSPAdjustmentMessage, DATABASE::"DSP Adjustment Message");

      DSPAdjustmentMessage."Sent To Dsp" := CURRENTDATETIME;
      DSPAdjustmentMessage."Xml Message" := TempBlob.Blob;
      DSPAdjustmentMessage.MODIFY;
    END;

    PROCEDURE SendAssignmentInfoMessage@1100528329(DSPAssignment@1100528300 : Record 11126740);
    BEGIN
      CreateNewTask(DSPManagement.GetTcAssignmentInfo, DSPAssignment.RECORDID, 2, COMPANYNAME);
    END;

    LOCAL PROCEDURE "---Locals---"@1100529900();
    BEGIN
    END;

    LOCAL PROCEDURE AllServiceOrderObjectsCancelledByDsp@1100528814(ServiceOrderNo@1100528800 : Code[20]) : Boolean;
    VAR
      ServiceOrderObject@1100528801 : Record 11071724;
    BEGIN
      ServiceOrderObject.SETRANGE("Service Order No.", ServiceOrderNo);
      IF ServiceOrderObject.FINDSET THEN
        REPEAT
          IF (NOT ServiceOrderObject.ProcessedDSPCancellationExists) THEN
            EXIT(FALSE);
        UNTIL (ServiceOrderObject.NEXT = 0);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CheckResponse@1100528335(DnXmlRequest@1100528303 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";DnXmlResponse@1100528301 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      ResponseCode@1100528300 : Text;
      Text001@1100528302 : TextConst 'ENU=Error in Object:%1';
    BEGIN
      ResponseCode := DSPManagement.FindNodeResponseCode(DnXmlResponse);
      IF (ResponseCode <> 'OK') THEN
        ERROR(Text001, DnXmlResponse.OuterXml);
    END;

    LOCAL PROCEDURE ConvertToDnObject@1100528304(VAR DnObject@1100528302 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object";RootTag@1100528301 : Text;RootNamespace@1100528300 : Text);
    VAR
      TempBlob@1100528303 : TEMPORARY Record 99008535;
    BEGIN
      IF (NOT GenericWebServiceQueue."Xml Message".HASVALUE) THEN
        ERROR(Text002, GenericWebServiceQueue.FIELDCAPTION("Xml Message"));

      GenericWebServiceQueue.CALCFIELDS("Xml Message");
      TempBlob.Blob := GenericWebServiceQueue."Xml Message";
      IF (RootTag <> '') THEN
        DotnetFunctions.DeSerializeFromBlob2(TempBlob, DnObject, RootTag, RootNamespace)
      ELSE
        DotnetFunctions.DeSerializeFromBlob(TempBlob, DnObject);
    END;

    LOCAL PROCEDURE CreateDspAssignment@1100525041() : BigInteger;
    VAR
      DSPAssignment@1100528802 : Record 11126740;
      NoOfAdjustments@1100528300 : Text;
    BEGIN
      DSPAssignment.INIT;
      DSPAssignment."Entry No." := 0;
      DSPAssignment."Agreement No." := XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="Contractnummer"]');
      DSPAssignment."Company Name" := DSPManagement.GetCompanyNameByAgreementNo(DSPAssignment."Agreement No.");
      DSPAssignment."Assignment Id" := XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="OpdrachtID"]');
      DSPAssignment."Version No." := XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="Versienummer"]');
      DSPAssignment."External Reference" := XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="ExterneReferentie"]');
      DSPAssignment.Operator := XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="Opdrachtgever"]');
      DSPAssignment.Contractor := XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="Opdrachtnemer"]');
      DSPAssignment."Cluster Id" := XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="ClusterID"]');
      DSPAssignment."Dsp Process" := XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="DSPProces"]');
      DSPAssignment."Type Connection Object" := XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="TypeAansluitobject"]');
      NoOfAdjustments := XMLDOMManagement.FindNodeText(DnXmlDocument,'//*[local-name()="AantalBijstellingen"]');
      IF (NoOfAdjustments <> '') THEN
        EVALUATE(DSPAssignment."No. Of Adjustments", NoOfAdjustments, 9);
      CASE TRUE OF
        (DSPManagement.GetDspVersionFirst(TRUE)  = DSPAssignment."Version No."): BEGIN
          DSPAssignment."Work Connection" := XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="AardWerkzaamheden"]');
          DSPAssignment."Work Type Connection" := XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="TypeAansluiting"]');
        END;
        (DSPManagement.GetDspVersionSecond(TRUE)  = DSPAssignment."Version No."): BEGIN
          DSPAssignment."Work Connection" := XMLDOMManagement.FindNodeText(DnXmlDocument,
            '//*[local-name()="Werkzaamheden"]/*[local-name()="Aansluiting"]');
          DSPAssignment."Work Type Connection" := XMLDOMManagement.FindNodeText(DnXmlDocument,
            '//*[local-name()="Werkzaamheden"]/*[local-name()="TypeAansluiting"]');
        END;
        ELSE ERROR(Text000, DSPAssignment.FIELDCAPTION("Version No."), DSPAssignment."Version No.");
      END;
      GenericWebServiceQueue.CALCFIELDS("Xml Message");
      DSPAssignment."Xml Message" := GenericWebServiceQueue."Xml Message";
      CASE TRUE OF
        (XMLDOMManagement.FindNodeCount(DnXmlDocument,
          '//*[local-name()="Leveradres"]/*[local-name()="Aansluiting"]/*[local-name()="AansluitingCAI"]') > 0):
          DSPAssignment.Discipline := DSPAssignment.Discipline::CAI;
        (XMLDOMManagement.FindNodeCount(DnXmlDocument,
          '//*[local-name()="Leveradres"]/*[local-name()="Aansluiting"]/*[local-name()="AansluitingKoper"]') > 0):
          DSPAssignment.Discipline := DSPAssignment.Discipline::Copper;
        (XMLDOMManagement.FindNodeCount(DnXmlDocument,
          '//*[local-name()="Leveradres"]/*[local-name()="Aansluiting"]/*[local-name()="AansluitingElektra"]') > 0):
          DSPAssignment.Discipline := DSPAssignment.Discipline::Electra;
        (XMLDOMManagement.FindNodeCount(DnXmlDocument,
          '//*[local-name()="Leveradres"]/*[local-name()="Aansluiting"]/*[local-name()="AansluitingGas"]') > 0):
          DSPAssignment.Discipline := DSPAssignment.Discipline::Gas;
        (XMLDOMManagement.FindNodeCount(DnXmlDocument,
          '//*[local-name()="Leveradres"]/*[local-name()="Aansluiting"]/*[local-name()="AansluitingGlas"]') > 0):
          DSPAssignment.Discipline := DSPAssignment.Discipline::Glass;
        (XMLDOMManagement.FindNodeCount(DnXmlDocument,
          '//*[local-name()="Leveradres"]/*[local-name()="Aansluiting"]/*[local-name()="AansluitingWater"]') > 0):
          DSPAssignment.Discipline := DSPAssignment.Discipline::Water;
      END;
      DSPAssignment."Connection Object Id" := DSPManagement.GetConnectionObjectId(
        XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="Leveradres"]/*[local-name()="Adres"]/*[local-name()="Postcode"]'),
        XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="Leveradres"]/*[local-name()="Adres"]/*[local-name()="Huisnummer"]'),
        XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="Leveradres"]/*[local-name()="Adres"]/*[local-name()="Toevoeging"]'));

      DSPAssignment.INSERT(TRUE);

      CreateDspAssignmentDocuments(DSPAssignment);
      EXIT(DSPAssignment."Entry No.");
    END;

    LOCAL PROCEDURE CreateDspAssignmentDocuments@1100528319(DSPAssignment@1100528302 : Record 11126740);
    VAR
      DocumentProperties@1100528304 : Record 11012746;
      Xpath@1100528300 : Text;
      DocNo@1100528301 : Code[20];
      DnXmlNodeList@1100528303 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
    BEGIN
      Xpath := '//*[local-name()="Bijlagen"]';
      NodeCount := XMLDOMManagement.FindNodeCount(DnXmlDocument, Xpath);
      IF (NodeCount = 0) THEN
        EXIT;

      FOR Counter := 1 TO NodeCount  DO BEGIN
        DocNo := DSPManagement.CreateDocument(DnXmlDocument, DSPAssignment.RECORDID, STRSUBSTNO('%1[%2]', Xpath, Counter));
        IF (DocumentProperties.GET(DocNo)) THEN BEGIN
          DocumentProperties.Reference := DSPAssignment."Connection Object Id";
          DocumentProperties.MODIFY;
        END;
      END;
    END;

    LOCAL PROCEDURE CreateDspAssignmentReady@1100528311() : BigInteger;
    VAR
      DSPAssignmentReady@1100528802 : Record 11126754;
      DSPAssignment@1100528300 : Record 11126740;
      ExternalReferenceText@1100528302 : Text;
      OStream@1100528301 : OutStream;
    BEGIN
      DSPAssignmentReady.INIT;
      DSPAssignmentReady."Entry No." := 0;
      DSPAssignmentReady."Assignment Id" := XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="OpdrachtID"]');
      DSPAssignmentReady."Version No." := XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="Versienummer"]');
      IF (LOWERCASE(XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="IsBetaalbaargesteld"]')) = 'true') THEN
        DSPAssignmentReady.Payable := TRUE;

      ExternalReferenceText := XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="ExterneReferentie"]');
      DSPAssignmentReady."External Reference".CREATEOUTSTREAM(OStream);
      OStream.WRITETEXT(ExternalReferenceText);

      DSPManagement.GetDspAssignmentByAssignmentId(DSPAssignmentReady."Assignment Id", DSPAssignment);
      DSPAssignmentReady."Service Order No." := DSPAssignment."Service Order No.";
      DSPAssignmentReady."Object No." := DSPAssignment."Object No.";

      GenericWebServiceQueue.CALCFIELDS("Xml Message");
      DSPAssignmentReady."Xml Message" := GenericWebServiceQueue."Xml Message";
      DSPAssignmentReady.INSERT(TRUE);

      CreateDspAssignmentReadyDocuments(DSPAssignmentReady);
      EXIT(DSPAssignmentReady."Entry No.");
    END;

    LOCAL PROCEDURE CreateDspAssignmentReadyDocuments@1100528312(DSPAssignmentReady@1100528302 : Record 11126754);
    VAR
      DSPAssignment@1100528305 : Record 11126740;
      DocumentProperties@1100528304 : Record 11012746;
      Xpath@1100528300 : Text;
      DocNo@1100528301 : Code[20];
      DnXmlNodeList@1100528303 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
    BEGIN
      Xpath := '//*[local-name()="Bijlagen"]';
      NodeCount := XMLDOMManagement.FindNodeCount(DnXmlDocument, Xpath);
      IF (NodeCount = 0) THEN
        EXIT;

      FOR Counter := 1 TO NodeCount  DO BEGIN
        DSPManagement.CreateDocument(DnXmlDocument, DSPAssignmentReady.RECORDID, STRSUBSTNO('%1[%2]', Xpath, Counter));
        IF (DocumentProperties.GET(DocNo)) THEN BEGIN
          DSPManagement.GetDspAssignmentByAssignmentId(DSPAssignmentReady."Assignment Id", DSPAssignment);
          DocumentProperties.Reference := DSPAssignment."Connection Object Id";
          DocumentProperties.MODIFY;
        END;
      END;
    END;

    LOCAL PROCEDURE CreateDspCancellation@1100528806() : BigInteger;
    VAR
      DSPCancellation@1100528303 : Record 11126733;
      DSPAssignment@1100528300 : Record 11126740;
      RemarkText@1100528301 : Text;
      OStream@1100528302 : OutStream;
    BEGIN
      DSPCancellation.INIT;
      DSPCancellation."Entry No." := 0;
      DSPCancellation."Assignment Id" := XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="OpdrachtID"]');
      DSPCancellation."Version No." := XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="Versienummer"]');
      DSPCancellation."Cancellation Reason No." := GetCancellationNoByDescription(XMLDOMManagement.FindNodeText(DnXmlDocument,
        '//*[local-name()="Annuleringreden"]'));

      RemarkText := XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="Opmerking"]');
      DSPCancellation.Remark.CREATEOUTSTREAM(OStream);
      OStream.WRITETEXT(RemarkText);

      DSPCancellation."Xml Message" := GenericWebServiceQueue."Xml Message";
      DSPManagement.GetDspAssignmentByAssignmentId(DSPCancellation."Assignment Id", DSPAssignment);
      DSPCancellation."Service Order No." := DSPAssignment."Service Order No.";
      DSPCancellation."Object No." := DSPAssignment."Object No.";
      DSPCancellation.INSERT(TRUE);

      CreateDspCancellationDocuments(DSPCancellation);
      EXIT(DSPCancellation."Entry No.");
    END;

    LOCAL PROCEDURE CreateDspCancellationDocuments@1100528303(DSPCancellation@1100528302 : Record 11126733);
    VAR
      DSPAssignment@1100528306 : Record 11126740;
      DocumentProperties@1100528305 : Record 11012746;
      Counter@1100528301 : Integer;
      DocNo@1100528304 : Code[20];
      Xpath@1100528303 : Text;
      DnList@1100528300 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1";
    BEGIN
      Xpath := '//*[local-name()="Annuleringbericht"]/*[local-name()="Bijlagen"]';
      NodeCount := XMLDOMManagement.FindNodeCount(DnXmlDocument, Xpath);
      IF (NodeCount = 0) THEN
        EXIT;

      FOR Counter := 1 TO NodeCount  DO BEGIN
        DocNo := DSPManagement.CreateDocument(DnXmlDocument, DSPCancellation.RECORDID,
          STRSUBSTNO('%1[%2]', Xpath, Counter));
        IF (DocumentProperties.GET(DocNo)) THEN BEGIN
          DSPManagement.GetDspAssignmentByAssignmentId(DSPCancellation."Assignment Id", DSPAssignment);
          DocumentProperties.Reference := DSPAssignment."Connection Object Id";
          DocumentProperties.MODIFY;
        END;
      END;
    END;

    LOCAL PROCEDURE CreateDspStatusUpdate@1100528332() : BigInteger;
    VAR
      DSPAssignment@1100528300 : Record 11126740;
      DSPStatusUpdate@1100528304 : Record 11126763;
      RemarkText@1100528301 : Text;
      OStream@1100528302 : OutStream;
    BEGIN
      DSPStatusUpdate."Assignment Id" := XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="OpdrachtID"]');
      DSPManagement.GetDspAssignmentByAssignmentId(DSPStatusUpdate."Assignment Id", DSPAssignment);
      CASE UPPERCASE(XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="BerichtType"]')) OF
        'AGA': DSPStatusUpdate."Message Type" := DSPStatusUpdate."Message Type"::AGA;
        'TG': DSPStatusUpdate."Message Type" := DSPStatusUpdate."Message Type"::TG;
        ELSE ERROR(Text000, DSPStatusUpdate.FIELDCAPTION("Message Type"), XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="BerichtType"]'));
      END;
      CASE UPPERCASE(XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="Status"]')) OF
        'GOEDGEKEURD': DSPStatusUpdate.Status := DSPStatusUpdate.Status::Approved;
        'AFGEKEURD': DSPStatusUpdate.Status := DSPStatusUpdate.Status::Denied;
        'INGEDIEND': DSPStatusUpdate.Status := DSPStatusUpdate.Status::Submitted;
        ELSE ERROR(Text000, DSPStatusUpdate.FIELDCAPTION(Status), XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="Status"]'));
      END;
      DSPStatusUpdate.AddRecord(DSPAssignment."Service Order No.", DSPAssignment."Object No.", DSPStatusUpdate."Message Type", DSPStatusUpdate.Status);

      EVALUATE(DSPStatusUpdate."Status Changed On", XMLDOMManagement.FindNodeText(DnXmlDocument,
        '//*[local-name()="UpdateDatum"]'), 9);

      RemarkText := XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="Opmerking"]');
      DSPStatusUpdate.Remark.CREATEOUTSTREAM(OStream);
      OStream.WRITETEXT(RemarkText);
      DSPStatusUpdate."Xml Message" := GenericWebServiceQueue."Xml Message";
      DSPStatusUpdate."Service Order No." := DSPAssignment."Service Order No.";
      DSPStatusUpdate."Object No." := DSPAssignment."Object No.";
      DSPStatusUpdate.MODIFY;

      EXIT(DSPStatusUpdate."Entry No.");
    END;

    LOCAL PROCEDURE CreateGenericWebServiceQueue@1100528301(VAR TempBlob@1100528304 : TEMPORARY Record 99008535;SourceTable@1100528300 : Variant;TableNo@1100528303 : Integer);
    VAR
      DSPAdjustmentMessage@1100528301 : Record 11126727;
      DSPCancellation@1100528302 : Record 11126733;
    BEGIN
      CASE TableNo OF
        DATABASE::"DSP Adjustment Message": BEGIN
          DSPAdjustmentMessage := SourceTable;
          GenericWebServiceQueue.CreateNewQueueEntry(DSPManagement.GetTcAdjustment, DSPAdjustmentMessage.RECORDID,
            2, COMPANYNAME);
        END;
        DATABASE::"DSP Cancellation": BEGIN
          DSPCancellation := SourceTable;
          GenericWebServiceQueue.CreateNewQueueEntry(DSPManagement.GetTcCancellationReady, DSPCancellation.RECORDID,
            2, COMPANYNAME);
        END;
        ELSE ERROR(Text000, TABLENOTXT, TableNo);
      END;
      GenericWebServiceQueue."Xml Message" := TempBlob.Blob;
      GenericWebServiceQueue.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateNewTask@1100525003(MethodName@1100525001 : Text;RelatedRecordId@1100529900 : RecordID;DirectionIn@1100529901 : Option;CompanyNameIn@1100528300 : Text);
    VAR
      GenericWebServiceQueue@1100528301 : Record 11126715;
    BEGIN
      DSPManagement.CreateNewTask(MethodName, RelatedRecordId, DirectionIn, CompanyNameIn);
    END;

    LOCAL PROCEDURE CreateServiceOrderInvoiceForObject@1100528336(ServiceOrder@1100528300 : Record 11012823;ServiceObject@1100525001 : Record 11071691);
    VAR
      ServiceOrderCostPlusEntry@1100528305 : Record 11012825;
      ServiceCollectiveList@1100528306 : Record 11071730;
      CreateServiceOrderInvoice@1100528302 : Report 11012778;
      ProcessCollectiveList@1100528307 : Report 11012859;
      ServiceCollectiveListMgt@1100528304 : Codeunit 11012850;
      CollectiveListNo@1100528303 : Code[20];
      RecalculateCollectiveList@1100528308 : Boolean;
    BEGIN
      //report 11012778
      //Service Order Cost Plus Entry - OnAfterGetRecord()
      ServiceOrderCostPlusEntry.SETRANGE("Service Order No.", ServiceOrder."No.");
      ServiceOrderCostPlusEntry.SETRANGE("Service Order Object No.", ServiceObject."No.");
      IF (NOT ServiceOrderCostPlusEntry.FINDSET(TRUE)) THEN
        EXIT;

      REPEAT
        ServiceOrderCostPlusEntry.CALCFIELDS("Service Contract No.");
        CollectiveListNo := ServiceCollectiveListMgt.FindCollectiveListNo(ServiceOrderCostPlusEntry."Customer No.",
          ServiceOrderCostPlusEntry."Bill-to Customer No.", '', ServiceOrderCostPlusEntry."Alternative Bill-to Address",
          ServiceOrder."Service Location No.", ServiceOrder."Service Contract No.",
          ServiceOrderCostPlusEntry."Service Order No.", TRUE);
        IF (CollectiveListNo = '') THEN
          CollectiveListNo := ServiceCollectiveListMgt.CreateCollectiveList(ServiceOrderCostPlusEntry."Customer No.",
            ServiceOrderCostPlusEntry."Bill-to Customer No.", '', ServiceOrderCostPlusEntry."Alternative Bill-to Address",
            ServiceOrder."Service Location No.", ServiceOrder."Service Contract No.",
            ServiceOrderCostPlusEntry."Service Order No.", TRUE,'');
        ServiceOrderCostPlusEntry.VALIDATE("Collective List No.", CollectiveListNo);
        ServiceOrderCostPlusEntry.MODIFY(TRUE);

        IF (ServiceCollectiveList.GET(ServiceOrderCostPlusEntry."Collective List No.")) THEN BEGIN
          ServiceOrder.SETCURRENTKEY("Collective List No.");
          ServiceOrder.SETRANGE("Collective List No.", ServiceOrderCostPlusEntry."Collective List No.");
          ServiceCollectiveList.MARK(TRUE);
        END;
      UNTIL (ServiceOrderCostPlusEntry.NEXT = 0);

      //OnAfterReport
      RecalculateCollectiveList := FALSE;

      ServiceCollectiveList.MARKEDONLY(TRUE);
      ServiceCollectiveList.SETRANGE(Status, ServiceCollectiveList.Status::Open);
      IF (ServiceCollectiveList.FINDSET(TRUE)) THEN BEGIN
        REPEAT
          IF RecalculateCollectiveList THEN
            ServiceCollectiveList.Recalculate
          ELSE
            ServiceCollectiveList.SetDontConfirmRecalculateAtRelease(TRUE);
          ServiceCollectiveList.VALIDATE(Status, ServiceCollectiveList.Status::Released);
          ServiceCollectiveList.MODIFY(TRUE);
        UNTIL (ServiceCollectiveList.NEXT = 0);
      END;

      COMMIT;

      ServiceCollectiveList.SETRANGE(Status);
      ProcessCollectiveList.SetDefaults(0, TRUE, RecalculateCollectiveList);
      IF (NOT ServiceCollectiveList.ISEMPTY) THEN BEGIN
        ProcessCollectiveList.SETTABLEVIEW(ServiceCollectiveList);
        ProcessCollectiveList.USEREQUESTPAGE := FALSE;
        ProcessCollectiveList.RUN;
      END;
    END;

    LOCAL PROCEDURE DetermineDspAssignmentProcessType@1100528829(EntryNo@1100528800 : BigInteger) : Text;
    VAR
      DSPAssignment@1100528802 : Record 11126740;
    BEGIN
      DSPAssignment.GET(EntryNo);
      IF (DSPAssignment."No. Of Adjustments" >= 1) THEN
        EXIT(DSPManagement.GetTcAdjustment);
      EXIT(DSPManagement.GetTcProcessServiceOrder);
    END;

    LOCAL PROCEDURE DspObjectSpecificationSettingExist@1100528823(DSPAssignment@1100528301 : Record 11126740;SpecCode@1100528804 : Code[20];VAR XmlElement@1100528300 : Text) : Boolean;
    VAR
      DSPObjSpecsSettings@1100528803 : Record 11126721;
    BEGIN
      DSPObjSpecsSettings.SETRANGE(Type, DSPObjSpecsSettings.Type::DSP);
      DSPObjSpecsSettings.SETRANGE(Version, DSPAssignment."Version No.");
      DSPObjSpecsSettings.SETRANGE("Specification Code", SpecCode);
      DSPObjSpecsSettings.SETRANGE(Discipline, DSPAssignment.Discipline);
      DSPObjSpecsSettings.SETRANGE(Enabled, TRUE);
      IF DSPObjSpecsSettings.FINDFIRST THEN BEGIN
        XmlElement := DSPObjSpecsSettings.Xpath;
        EXIT(TRUE);
      END;
      DSPObjSpecsSettings.SETRANGE(Discipline, 0);
      IF DSPObjSpecsSettings.FINDFIRST THEN BEGIN
        XmlElement := DSPObjSpecsSettings.Xpath;
        EXIT(TRUE);
      END;
      DSPObjSpecsSettings.SETRANGE(Version, '');
      DSPObjSpecsSettings.SETRANGE(Discipline, DSPAssignment.Discipline);
      IF DSPObjSpecsSettings.FINDFIRST THEN BEGIN
        XmlElement := DSPObjSpecsSettings.Xpath;
        EXIT(TRUE);
      END;
      DSPObjSpecsSettings.SETRANGE(Discipline, 0);
      IF DSPObjSpecsSettings.FINDFIRST THEN BEGIN
        XmlElement := DSPObjSpecsSettings.Xpath;
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE ExistConnectionObjectId@1100529901(ConnectionObjectID@1100529900 : Text[50];EntryNo@1100529902 : BigInteger;CompName@1100528300 : Text) : Boolean;
    VAR
      DSPAssignment@1100529901 : Record 11126740;
    BEGIN
      DSPAssignment.SETRANGE("Company Name", CompName);
      DSPAssignment.SETRANGE("Connection Object Id", ConnectionObjectID);
      DSPAssignment.SETFILTER("Entry No.", '<>%1', EntryNo);
      EXIT(DSPAssignment.FINDFIRST);
    END;

    LOCAL PROCEDURE FillAdjustmentMessageRequest@1100525015(DSPAdjustmentMessage@1100525000 : Record 11126727);
    VAR
      DSPAssignment@1100528303 : Record 11126740;
      ExplanationText@1100528301 : Text;
      IStream@1100528300 : InStream;
    BEGIN
      DSPManagement.GetDspAssignmentByServiceOrderNoObjectNo(DSPAdjustmentMessage."Service Order No.", DSPAdjustmentMessage."Object No.", DSPAssignment);

      DnXmlDocument := DnXmlDocument.XmlDocument();
      CASE DSPSetup."Dsp Partner" OF
        DSPManagement.GetTcDspPartnerM10:
          XMLDOMManagement.AddRootElementWithPrefix(DnXmlDocument, 'BijstellingberichtXOPType', '','', DnXmlRootNode);
        DSPManagement.GetTcDspPartnerOther:
          XMLDOMManagement.AddRootElementWithPrefix(DnXmlDocument, 'Bijstellingbericht', PrefAdjust, GetNsAdjust, DnXmlRootNode);
        ELSE
          ERROR(Text000, DSPSetup.FIELDCAPTION("Dsp Partner"), DSPSetup."Dsp Partner");
      END;
      XMLDOMManagement.AddElement(DnXmlRootNode, 'OpdrachtID', DSPAssignment."Assignment Id", GetNsCommon, DnXmlNode);
      XMLDOMManagement.AddElement(DnXmlRootNode, 'Versienummer', DSPAssignment."Version No.", GetNsCommon, DnXmlNode);
      FillAttachmentsAdjustmentMessage(DSPAdjustmentMessage, GetNsCommon);
      XMLDOMManagement.AddElement(DnXmlRootNode, 'AantalBijstellingen', FORMAT(GetAdjustmentCount(DSPAdjustmentMessage), 0, 9), GetNsAdjust, DnXmlNode);

      XMLDOMManagement.AddElement(DnXmlRootNode, 'Bijstelling', '', GetNsAdjust, DnXmlChildNode);
      XMLDOMManagement.AddElement(DnXmlChildNode, 'Bijstellingreden', DSPManagement.GetDspCode(1, DSPAdjustmentMessage."Adjustment Reason No."), GetNsAdjust, DnXmlNode);
      DSPAdjustmentMessage.CALCFIELDS(Explanation);
      DSPAdjustmentMessage.Explanation.CREATEINSTREAM(IStream);
      IStream.READ(ExplanationText);
      XMLDOMManagement.AddElement(DnXmlChildNode, 'Toelichting', ExplanationText, GetNsAdjust, DnXmlNode);

      FillContactpersonContractor;
    END;

    LOCAL PROCEDURE FillAttachmentsAdjustmentMessage@1100525011(DSPAdjustmentMessage@1100525007 : Record 11126727;NamespacePrefix@1100528301 : Text);
    VAR
      Recref@1100525003 : RecordRef;
      DocumentLinkManagement@1100525004 : Codeunit 11012401;
      AdjustmentMessage@1100528300 : Record 11126727;
      DocumentProperties@1100525005 : Record 11012746;
      DnList@1100525001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1";
    BEGIN
      Recref.GETTABLE(DSPAdjustmentMessage);
      DocumentLinkManagement.GetDocumentsComp(DocumentProperties, Recref, COMPANYNAME);
      DocumentProperties.MARKEDONLY(TRUE);
      IF (NOT DocumentProperties.FINDSET) THEN
        EXIT;

      REPEAT
        DSPManagement.CreateDnBijlageXopType(DocumentProperties, DnXmlRootNode, NamespacePrefix);
      UNTIL (DocumentProperties.NEXT = 0);
    END;

    LOCAL PROCEDURE FillAttachmentsCancellationReadyMessage@1100528315(DSPCancellation@1100525007 : Record 11126733;NamespacePrefix@1100528301 : Text);
    VAR
      Recref@1100525003 : RecordRef;
      DocumentLinkManagement@1100525004 : Codeunit 11012401;
      AdjustmentMessage@1100528300 : Record 11126727;
      DocumentProperties@1100525005 : Record 11012746;
      DnList@1100525001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1";
    BEGIN
      Recref.GETTABLE(DSPCancellation);
      DocumentLinkManagement.GetDocumentsComp(DocumentProperties, Recref, COMPANYNAME);
      DocumentProperties.MARKEDONLY(TRUE);
      IF (NOT DocumentProperties.FINDSET) THEN
        EXIT;

      REPEAT
        DSPManagement.CreateDnBijlageXopType(DocumentProperties, DnXmlRootNode, NamespacePrefix);
      UNTIL (DocumentProperties.NEXT = 0);
    END;

    LOCAL PROCEDURE FillCancellationReadyRequest@1100528813(DSPCancellation@1100525000 : Record 11126733);
    VAR
      DSPAssignment@1100528300 : Record 11126740;
      VersionNo@1100528301 : Decimal;
    BEGIN
      DSPManagement.GetDspAssignmentByAssignmentId(DSPCancellation."Assignment Id", DSPAssignment);

      DnXmlDocument := DnXmlDocument.XmlDocument();
      CASE DSPSetup."Dsp Partner" OF
        DSPManagement.GetTcDspPartnerM10:
          XMLDOMManagement.AddRootElementWithPrefix(DnXmlDocument, 'AnnuleringGereedberichtXOPType', '', '', DnXmlRootNode);
        DSPManagement.GetTcDspPartnerOther:
          XMLDOMManagement.AddRootElementWithPrefix(DnXmlDocument, 'AnnuleringGereedbericht', PrefCancelFinished, GetNsCancelFinished, DnXmlRootNode);
        ELSE
          ERROR(Text000, DSPSetup.FIELDCAPTION("Dsp Partner"), DSPSetup."Dsp Partner");
      END;

      XMLDOMManagement.AddElement(DnXmlRootNode, 'OpdrachtID', DSPAssignment."Assignment Id", GetNsCommon, DnXmlNode);
      XMLDOMManagement.AddElement(DnXmlRootNode, 'Versienummer', DSPAssignment."Version No.", GetNsCommon, DnXmlNode);
      FillAttachmentsCancellationReadyMessage(DSPCancellation, GetNsCommon);
      XMLDOMManagement.AddElement(DnXmlRootNode, 'AnnuleringGereed', 'OK', GetNsCancelFinished, DnXmlNode);
    END;

    LOCAL PROCEDURE FillContactpersonContractor@1100525007();
    VAR
      Employee@1100525001 : Record 5200;
      UserSetup@1100525002 : Record 91;
    BEGIN
      UserSetup.SETRANGE(UserSetup."User ID",USERID);
      IF (NOT UserSetup.FINDFIRST) THEN
        ERROR(Text003);

      IF (Employee.GET(UserSetup."Employee No.")) THEN BEGIN
        XMLDOMManagement.AddElement(DnXmlRootNode, 'ContactpersoonAannemer', '', GetNsAdjust, DnXmlChildNode);
        XMLDOMManagement.AddElement(DnXmlChildNode, 'Achternaam', Employee."Last Name", GetNsCommon, DnXmlNode);
        XMLDOMManagement.AddElement(DnXmlChildNode, 'Voorletters', Employee.Initials, GetNsCommon, DnXmlNode);
        XMLDOMManagement.AddElement(DnXmlChildNode, 'Tussenvoegsel', Employee."Middle Name", GetNsCommon, DnXmlNode);
        XMLDOMManagement.AddElement(DnXmlChildNode, 'Telefoonnummer', Employee."Phone No.", GetNsCommon, DnXmlNode);
        XMLDOMManagement.AddElement(DnXmlChildNode, 'Mobielnummer', Employee."Mobile Phone No.", GetNsCommon, DnXmlNode);
        XMLDOMManagement.AddElement(DnXmlChildNode, 'Emailadres', Employee."E-Mail", GetNsCommon, DnXmlNode);
      END;
    END;

    LOCAL PROCEDURE GetAdjustmentCount@1100528314(DSPAdjustmentMessageIn@1100528300 : Record 11126727) : Integer;
    VAR
      DSPAdjustmentMessage@1100528301 : Record 11126727;
    BEGIN
      DSPAdjustmentMessage.SETRANGE("Service Order No.", DSPAdjustmentMessageIn."Service Order No.");
      DSPAdjustmentMessage.SETRANGE("Object No.", DSPAdjustmentMessageIn."Object No.");
      EXIT(DSPAdjustmentMessage.COUNT);
    END;

    LOCAL PROCEDURE GetCancellationNoByDescription@1100528808(CancellationReason@1100528800 : Text[50]) : Integer;
    VAR
      DSPCode@1100528801 : Record 11126753;
    BEGIN
      DSPCode.SETRANGE(Type, DSPCode.Type::CancelReason);
      DSPCode.SETRANGE(Description, CancellationReason);
      IF DSPCode.FINDFIRST THEN
        EXIT(DSPCode."No.");
      EXIT(0);
    END;

    LOCAL PROCEDURE GetFirstPossibleStartingDate@1100528837() : Date;
    VAR
      StartDateTime@1100528300 : DateTime;
      WishWeek@1100528301 : Integer;
      WishYear@1100528303 : Integer;
    BEGIN
      EVALUATE(StartDateTime, XMLDOMManagement.FindNodeText(DnXmlDocument,
        '//*[local-name()="Levermoment"]/*[local-name()="WensdatumKlant"]'), 9);
      IF (StartDateTime <> 0DT) THEN BEGIN
        WishWeek := DATE2DWY(DT2DATE(StartDateTime), 2);
        WishYear := DATE2DMY(DT2DATE(StartDateTime), 3);
        EXIT(DWY2DATE(1, WishWeek, WishYear));
      END;
      EVALUATE(StartDateTime, XMLDOMManagement.FindNodeText(DnXmlDocument,
        '//*[local-name()="Levermoment"]/*[local-name()="Starttijdstip"]'), 9);
      IF (StartDateTime <> 0DT) THEN
        EXIT(DT2DATE(StartDateTime));
      EXIT(0D);
    END;

    LOCAL PROCEDURE GetGlobalVars@1100525038(VersionNo@1100528300 : Text);
    VAR
      VersionTxt@1100528301 : Text;
    BEGIN
      DSPSetup.GET;
      DSPSetup.TESTFIELD("Dsp Active", TRUE);
      DSPSetup.TESTFIELD("Default Company");

      VersionTxt := DSPManagement.GetDspVersionAsText(VersionNo);

      DocumentMgtSetup.GET;
      DSPManagement.CreateXmlNamespaceManager(DnXmlNamespaceManager);
      PrefCommon := DnXmlNamespaceManager.LookupPrefix(DSPManagement.GetNsAlgemeen(VersionTxt));
      PrefCancel := DnXmlNamespaceManager.LookupPrefix(DSPManagement.GetNsAnnulering(VersionTxt));
      PrefCancelFinished := DnXmlNamespaceManager.LookupPrefix(DSPManagement.GetNsAnnuleringGereed(VersionTxt));
      PrefAssign := DnXmlNamespaceManager.LookupPrefix(DSPManagement.GetNsOpdracht(VersionTxt));
      PrefAssignReady := DnXmlNamespaceManager.LookupPrefix(DSPManagement.GetNsOpdrachtGereed(VersionTxt));
      PrefAdjust := DnXmlNamespaceManager.LookupPrefix(DSPManagement.GetNsBijstelling(VersionTxt));
      IF (DSPSetup."Dsp Partner" = DSPManagement.GetTcDspPartnerM10) THEN BEGIN
        PrefOpdrInfo := DnXmlNamespaceManager.LookupPrefix(DSPManagement.GetNsOpdrachtInfo);
      END;
    END;

    LOCAL PROCEDURE GetNsCommon@1100528305() : Text;
    BEGIN
      EXIT(DnXmlNamespaceManager.LookupNamespace(PrefCommon));
    END;

    LOCAL PROCEDURE GetNsAdjust@1100528307() : Text;
    BEGIN
      EXIT(DnXmlNamespaceManager.LookupNamespace(PrefAdjust));
    END;

    LOCAL PROCEDURE GetNsCancelFinished@1100528308() : Text;
    BEGIN
      EXIT(DnXmlNamespaceManager.LookupNamespace(PrefCancelFinished));
    END;

    LOCAL PROCEDURE GetNsOpdrachtInfo@1100528328() : Text;
    BEGIN
      EXIT(DnXmlNamespaceManager.LookupNamespace(PrefOpdrInfo));
    END;

    LOCAL PROCEDURE GetOrderId@1100525001(AdjustmentMessageRequest@1100525001 : Record 11126727) : Code[30];
    VAR
      DSPManagement@1100529900 : Codeunit 11126714;
    BEGIN
      EXIT(DSPManagement.GetServiceOrderSpecLineValue(AdjustmentMessageRequest."Service Order No.", AdjustmentMessageRequest."Object No.", DSPManagement.GetTcOpdr));
    END;

    LOCAL PROCEDURE GetServiceLocation@1100528318(VAR ServiceLocation@1100528300 : Record 11012801);
    BEGIN
      ServiceLocation.SETRANGE("Post Code", XMLDOMManagement.FindNodeText(DnXmlDocument,
        '//*[local-name()="Leveradres"]/*[local-name()="Adres"]/*[local-name()="Postcode"]'));
      ServiceLocation.SETRANGE("House No.", XMLDOMManagement.FindNodeText(DnXmlDocument,
        '//*[local-name()="Leveradres"]/*[local-name()="Adres"]/*[local-name()="Huisnummer"]'));
      ServiceLocation.SETRANGE("House No. Ext.", DELCHR(XMLDOMManagement.FindNodeText(DnXmlDocument,
        '//*[local-name()="Leveradres"]/*[local-name()="Adres"]/*[local-name()="Toevoeging"]'), '<=>'));
      IF (NOT ServiceLocation.FINDFIRST) THEN
        ServiceLocation.INIT;
    END;

    LOCAL PROCEDURE ProcessCostPlus@1100528306();
    VAR
      DSPAssignmentReady@1100528301 : Record 11126754;
      SUPProduction@1100528309 : Record 11071773;
      RelatedRecId@1100528300 : RecordID;
    BEGIN
      RelatedRecId := GenericWebServiceQueue."Related Record ID";
      CASE TRUE OF
        RelatedRecId.TABLENO = DATABASE::"DSP Assignment Ready": BEGIN
          DSPAssignmentReady.GET(GenericWebServiceQueue."Related Record ID");
          SUPProduction.SETRANGE("Service Order No.", DSPAssignmentReady."Service Order No.");
          SUPProduction.SETRANGE("Object No.", DSPAssignmentReady."Object No.");
        END;
        RelatedRecId.TABLENO = DATABASE::"SUP Production": BEGIN
          SUPProduction.GET(RelatedRecId);
          SUPProduction.SETRANGE("Service Order No.", SUPProduction."Service Order No.");
          SUPProduction.SETRANGE("Object No.", SUPProduction."Object No.");
        END;
        ELSE
          ERROR(Text000, GenericWebServiceQueue."Method Name", RelatedRecId);
      END;

      SUPProduction.SETFILTER("Sent To Dsp", '<>%1', 0DT);
      SUPProduction.SETFILTER("Processed By Dsp", '<>%1', 0DT);
      SUPProduction.SETRANGE(Status, SUPProduction.Status::Approved);
      IF (SUPProduction.FINDSET) THEN
        REPEAT
          ServiceUnitPriceManagement.GenerateCostPlusEntries(SUPProduction);
        UNTIL (SUPProduction.NEXT = 0);
    END;

    LOCAL PROCEDURE ProcessInboundAssignment@1100525000();
    VAR
      DSPAssignment@1100528803 : Record 11126740;
      DSPAssignmentPrev@1100528804 : Record 11126740;
      EntryNo@1100528801 : BigInteger;
      DspProcessOrderType@1100528800 : Text;
    BEGIN
      GenericWebServiceQueue.GetXmlMessage(DnXmlDocument);
      GetGlobalVars(XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="Versienummer"]'));

      EntryNo := CreateDspAssignment;
      DSPAssignment.GET(EntryNo);

      GenericWebServiceQueue."Related Record ID" := DSPAssignment.RECORDID;
      GenericWebServiceQueue.MODIFY(TRUE);

      CASE DetermineDspAssignmentProcessType(EntryNo) OF
        DSPManagement.GetTcAdjustment: BEGIN
          IF (NOT DSPManagement.GetPreviousProcessedDspAssignment(DSPAssignment."Entry No.", DSPAssignmentPrev)) THEN
            DSPAssignment."Processed On" := CURRENTDATETIME
          ELSE BEGIN
            DSPAssignment."Service Order No." := DSPAssignmentPrev."Service Order No.";
            DSPAssignment."Object No." := DSPAssignmentPrev."Object No.";
          END;
          IF (DSPAssignment."No. Of Adjustments" > 0) THEN
            DSPManagement.UpdateReferencePoint(DSPAssignment."Object No.", DSPSetup."Reference Point Receive");
        END;
        ELSE BEGIN
          CreateNewTask(DSPManagement.GetTcProcessServiceOrder, DSPAssignment.RECORDID, 1, GenericWebServiceQueue."Company Name");
          CreateNewTask(DSPManagement.GetTcProcessServiceOrderObject, DSPAssignment.RECORDID, 1, GenericWebServiceQueue."Company Name");
          IF (XMLDOMManagement.FindNodeCount(DnXmlDocument, '//*[local-name()="Opdrachtregel"]') > 0) THEN
            CreateNewTask(DSPManagement.GetTcProcessSupRecordingLines, DSPAssignment.RECORDID, 1, GenericWebServiceQueue."Company Name");
          DSPAssignment."Processed On" := CURRENTDATETIME;
        END;
      END;

      DSPAssignment.MODIFY(TRUE);
      IF (DSPSetup."Dsp Partner" = DSPManagement.GetTcDspPartnerM10) THEN
        CreateNewTask(DSPManagement.GetTcAssignmentInfo, DSPAssignment.RECORDID, 2, GenericWebServiceQueue."Company Name");
    END;

    LOCAL PROCEDURE ProcessInboundAssignmentReady@1100528310();
    VAR
      DSPAssignment@1100528308 : Record 11126740;
      DSPAssignmentReady@1100528301 : Record 11126754;
      DSPOperator@1100528309 : Record 11126732;
      DSPStatusUpdate@1100528307 : Record 11126763;
      ServiceOrder@1100528302 : Record 11012823;
      ServiceOrderObject@1100528300 : Record 11071724;
      ServiceObject@1100528303 : Record 11071691;
      EntryNo@1100528304 : BigInteger;
      ExternalReferenceText@1100528305 : Text;
      IStream@1100528306 : InStream;
    BEGIN
      GenericWebServiceQueue.GetXmlMessage(DnXmlDocument);
      GetGlobalVars(XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="Versienummer"]'));

      EntryNo := CreateDspAssignmentReady;
      DSPAssignmentReady.GET(EntryNo);

      GenericWebServiceQueue."Related Record ID" := DSPAssignmentReady.RECORDID;
      GenericWebServiceQueue.MODIFY(TRUE);

      ServiceOrder.GET(DSPAssignmentReady."Service Order No.");
      ServiceOrderObject.GET(DSPAssignmentReady."Service Order No.", DSPAssignmentReady."Object No.", '');

      DSPAssignmentReady.CALCFIELDS("External Reference");
      DSPAssignmentReady."External Reference".CREATEINSTREAM(IStream);
      IStream.READTEXT(ExternalReferenceText);
      DSPManagement.SetServiceOrderSpecLineOldValue(DSPAssignmentReady."Service Order No.", DSPAssignmentReady."Object No.",
        DSPManagement.GetTcOpg, ExternalReferenceText);
      DSPAssignmentReady."Processed On" := CURRENTDATETIME;
      DSPAssignmentReady.MODIFY(TRUE);

      IF (DSPAssignmentReady.Payable) THEN BEGIN
        ServiceObject.GET(DSPAssignmentReady."Object No.");
        ServiceObject.Status := DSPSetup."Status Assignment Ready";
        ServiceObject.MODIFY;
      END;

      DSPStatusUpdate.AddRecord(DSPAssignmentReady."Service Order No.", DSPAssignmentReady."Object No.",
        DSPStatusUpdate."Message Type"::OG, DSPStatusUpdate.Status::Received);
      DSPManagement.UpdateReferencePoint(DSPAssignmentReady."Object No.", DSPSetup."Ref. Point Og Received");

      IF (DSPAssignmentReady.Payable) THEN BEGIN
        DSPManagement.GetDspAssignmentByAssignmentId(DSPAssignmentReady."Assignment Id", DSPAssignment);
        DSPOperator.GET(DSPAssignment.Operator);
        IF (DSPOperator."Invoice Start Point" = DSPOperator."Invoice Start Point"::OG) THEN BEGIN
          IF (DSPOperator."Create Cost Plus Directly") THEN BEGIN
            CreateNewTask(DSPManagement.GetTcProcessCostPlus, DSPAssignmentReady.RECORDID, 1, GenericWebServiceQueue."Company Name");
            IF (DSPOperator."Create Invoice Directly") THEN
              CreateNewTask(DSPManagement.GetTcProcessInvoice, DSPAssignmentReady.RECORDID, 1, GenericWebServiceQueue."Company Name");
          END;
        END;
      END
    END;

    LOCAL PROCEDURE ProcessInboundCancellation@1100525022();
    VAR
      DSPCancellation@1100528801 : Record 11126733;
      DSPSetup@1100528802 : Record 11126726;
      ServiceOrder@1100528300 : Record 11012823;
      EntryNo@1100528301 : BigInteger;
    BEGIN
      GenericWebServiceQueue.GetXmlMessage(DnXmlDocument);
      GetGlobalVars(XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="Versienummer"]'));

      EntryNo := CreateDspCancellation;
      DSPCancellation.GET(EntryNo);

      GenericWebServiceQueue."Related Record ID" := DSPCancellation.RECORDID;
      GenericWebServiceQueue.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ProcessInboundStatusUpdate@1100528330();
    VAR
      DSPAssignment@1100528304 : Record 11126740;
      DSPStatusUpdate@1100528303 : Record 11126763;
      DSPSetup@1100528302 : Record 11126726;
      ServiceOrder@1100528301 : Record 11012823;
      EntryNo@1100528300 : BigInteger;
    BEGIN
      GenericWebServiceQueue.GetXmlMessage(DnXmlDocument);
      DSPManagement.GetDspAssignmentByAssignmentId(XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="OpdrachtID"]'),
        DSPAssignment);
      GetGlobalVars(DSPAssignment."Version No.");

      EntryNo := CreateDspStatusUpdate;
      DSPStatusUpdate.GET(EntryNo);

      CASE DSPStatusUpdate."Message Type" OF
        DSPStatusUpdate."Message Type"::AGA: ProcessStatusUpdateAga(DSPStatusUpdate, DSPAssignment);
        DSPStatusUpdate."Message Type"::TG: ProcessStatusUpdateTg(DSPStatusUpdate, DSPAssignment);
      END;

      DSPStatusUpdate."Processed On" := CURRENTDATETIME;
      DSPStatusUpdate.MODIFY;

      GenericWebServiceQueue."Related Record ID" := DSPStatusUpdate.RECORDID;
      GenericWebServiceQueue.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ProcessInvoice@1100528316();
    VAR
      DSPAssignmentReady@1100528302 : Record 11126754;
      ServiceOrder@1100528300 : Record 11012823;
      ServiceObject@1100528304 : Record 11071691;
      SUPProduction@1100525000 : Record 11071773;
      RelatedRecId@1100528303 : RecordID;
    BEGIN
      RelatedRecId := GenericWebServiceQueue."Related Record ID";
      CASE TRUE OF
        RelatedRecId.TABLENO = DATABASE::"DSP Assignment Ready": BEGIN
          DSPAssignmentReady.GET(GenericWebServiceQueue."Related Record ID");
          ServiceOrder.GET(DSPAssignmentReady."Service Order No.");
          ServiceObject.GET(DSPAssignmentReady."Object No.");
        END;
        RelatedRecId.TABLENO = DATABASE::"SUP Production": BEGIN
          SUPProduction.GET(RelatedRecId);
          ServiceOrder.GET(SUPProduction."Service Order No.");
          ServiceObject.GET(SUPProduction."Object No.");
        END;
        ELSE
          ERROR(Text000, GenericWebServiceQueue."Method Name", RelatedRecId);
      END;

      CreateServiceOrderInvoiceForObject(ServiceOrder, ServiceObject);
    END;

    LOCAL PROCEDURE ProcessOutboundAdjustment@1100528309();
    VAR
      DSPAdjustmentMessage@1100528300 : Record 11126727;
      DSPAssignment@1100528305 : Record 11126740;
    BEGIN
      GenericWebServiceQueue.TESTFIELD(Direction, GenericWebServiceQueue.Direction::Outbound);
      DSPAdjustmentMessage.GET(GenericWebServiceQueue."Related Record ID");
      DSPManagement.GetDspAssignmentByServiceOrderNoObjectNo(DSPAdjustmentMessage."Service Order No.", DSPAdjustmentMessage."Object No.", DSPAssignment);
      GetGlobalVars(DSPAssignment."Version No.");

      CASE TRUE OF
        (DSPSetup."Dsp Partner" = DSPManagement.GetTcDspPartnerM10) AND (DSPManagement.GetDspVersionFirst(TRUE)  = DSPAssignment."Version No."):
          ProcessOutboundAdjustmentM10V1(DSPAdjustmentMessage, DSPAssignment);
        (DSPSetup."Dsp Partner" = DSPManagement.GetTcDspPartnerM10) AND (DSPManagement.GetDspVersionSecond(TRUE)  = DSPAssignment."Version No."):
          ProcessOutboundAdjustmentM10V2(DSPAdjustmentMessage, DSPAssignment);
        (DSPSetup."Dsp Partner" = DSPManagement.GetTcDspPartnerOther) AND (DSPManagement.GetDspVersionFirst(TRUE)  = DSPAssignment."Version No."):
          ProcessOutboundAdjustmentV1(DSPAdjustmentMessage, DSPAssignment);
        (DSPSetup."Dsp Partner" = DSPManagement.GetTcDspPartnerOther) AND (DSPManagement.GetDspVersionSecond(TRUE)  = DSPAssignment."Version No."):
          ProcessOutboundAdjustmentV2(DSPAdjustmentMessage, DSPAssignment);
        ELSE ERROR(Text000, DSPAssignment.FIELDCAPTION("Version No."), DSPAssignment."Version No.");
      END;

      DSPAdjustmentMessage.SetProcessedByDsp;

      DSPManagement.UpdateReferencePoint(DSPAdjustmentMessage."Object No.", DSPSetup."Reference Point Send");
    END;

    LOCAL PROCEDURE ProcessOutboundAdjustmentM10V1@1100528320(DSPAdjustmentMessage@1100528305 : Record 11126727;DSPAssignment@1100528300 : Record 11126740);
    VAR
      ConsumedWebService@1100528308 : Record 11229797;
      ConsumedWebServiceLine@1100528307 : Record 11229798;
      ResponseRec@1100528303 : TEMPORARY Record 99008535;
      RequestRec@1100528302 : TEMPORARY Record 99008535;
      TempBlob@1100528304 : TEMPORARY Record 99008535;
      ServiceName@1100528309 : Code[20];
      LineNo@1100528310 : Integer;
      VersionTxt@1100528306 : Text;
      M10WebClient@1100528312 : DotNet "'Motion10.Dsp.Nav4PSGatewayService, Version=1.33.0.0, Culture=neutral, PublicKeyToken=024bd013665211e9'.Motion10.Dsp.Nav4PSGatewayService.Nav4PSServiceClient";
      M10BijstellingBerichtRequest@1100528318 : DotNet "'Motion10.Dsp.Nav4PSGatewayService, Version=1.33.0.0, Culture=neutral, PublicKeyToken=024bd013665211e9'.Motion10.Dsp.Nav4PSGatewayService.BijstellingberichtXOPType";
      M10DspResponseType@1100528319 : DotNet "'Motion10.Dsp.Nav4PSGatewayService, Version=1.33.0.0, Culture=neutral, PublicKeyToken=024bd013665211e9'.Motion10.Dsp.Nav4PSGatewayService.DSPResponseType";
      ResponseCode@1100528301 : Text;
    BEGIN
      VersionTxt := DSPManagement.GetDspVersionAsText(DSPAssignment."Version No.");
      ServiceName := DSPManagement.GetDspPartnerServiceName(VersionTxt);
      LineNo := DSPManagement.GetSeqNoBijstelling;
      ConsumedWebService.GET(ServiceName);
      ConsumedWebServiceLine.GET(ServiceName, LineNo);
      DSPManagement.GetAdjustmentWs(RootElement, RootElementNamespace, VersionTxt);

      M10BijstellingBerichtRequest := M10BijstellingBerichtRequest.BijstellingberichtXOPType;
      IF (DSPSetup.Debug) THEN DotnetFunctions.SerializeToFile(M10BijstellingBerichtRequest, 'C:\Users\Public\Documents\BijstellingBericht1Empty.xml');
      GenericWebServiceQueue.CALCFIELDS("Xml Message");
      TempBlob.Blob := GenericWebServiceQueue."Xml Message";
      DotnetFunctions.DeSerializeFromBlob(TempBlob, M10BijstellingBerichtRequest);
      IF (DSPSetup.Debug) THEN DotnetFunctions.SerializeToFile(M10BijstellingBerichtRequest, 'C:\Users\Public\Documents\BijstellingBericht1.xml');

      DnBasicHttpBinding := DnBasicHttpBinding.BasicHttpBinding();
      DnBasicHttpBinding.Name := ConsumedWebService.Code;
      DnBasicHttpBinding.MaxReceivedMessageSize := 2147483647;
      DnBasicHttpBinding.MessageEncoding := DnWSMessageEncoding.Mtom;
      DnBasicHttpBinding.Security.Mode := DnBasicHttpSecurityMode.Transport;
      DnBasicHttpBinding.Security.Transport.ClientCredentialType := DnHttpClientCredentialType.Basic;
      DnEndPointAddress := DnEndPointAddress.EndpointAddress(ConsumedWebService."Web Service URL");
      M10WebClient := M10WebClient.Nav4PSServiceClient(DnBasicHttpBinding, DnEndPointAddress);
      M10WebClient.ClientCredentials.UserName.UserName := ConsumedWebService.Login;
      M10WebClient.ClientCredentials.UserName.Password := ConsumedWebService.Password;
      IF (DSPSetup.Debug) THEN DotnetFunctions.SerializeToFile(M10BijstellingBerichtRequest,'C:\Users\Public\Documents\BijstellingBericht1Request.xml');
      M10DspResponseType := M10WebClient.Bijstelling_OS_XOP(M10BijstellingBerichtRequest);
      IF (DSPSetup.Debug) THEN DotnetFunctions.SerializeToFile(M10DspResponseType, 'C:\Users\Public\Documents\BijstellingBericht1Response.xml');
      ResponseCode := FORMAT(M10DspResponseType.ResponseCode);

      DotnetFunctions.SerializeToBlob(RequestRec, M10BijstellingBerichtRequest);
      DotnetFunctions.SerializeToBlob(ResponseRec, M10DspResponseType);
      ConsumedWebServiceLine.AddCwsLogLine(RequestRec, ResponseRec, DSPAdjustmentMessage.RECORDID, DSPManagement.GetTcDsp);

      IF (ResponseCode <> 'OK') THEN
        ERROR(Text001, M10BijstellingBerichtRequest.ToString, ResponseCode);
    END;

    LOCAL PROCEDURE ProcessOutboundAdjustmentM10V2@1100528322(DSPAdjustmentMessage@1100528305 : Record 11126727;DSPAssignment@1100528300 : Record 11126740);
    VAR
      ConsumedWebService@1100528310 : Record 11229797;
      ConsumedWebServiceLine@1100528309 : Record 11229798;
      ResponseRec@1100528312 : TEMPORARY Record 99008535;
      RequestRec@1100528311 : TEMPORARY Record 99008535;
      TempBlob@1100528313 : TEMPORARY Record 99008535;
      ServiceName@1100528308 : Code[20];
      LineNo@1100528307 : Integer;
      VersionTxt@1100528306 : Text;
      ResponseCode@1100528301 : Text;
      M10WebClient@1100528304 : DotNet "'Motion10.Dsp.Nav4PSGatewayService134, Version=1.34.0.0, Culture=neutral, PublicKeyToken=024bd013665211e9'.Motion10.Dsp.Nav4PSGatewayService134.Nav4PSServiceClient";
      M10BijstellingBerichtRequest@1100528303 : DotNet "'Motion10.Dsp.Nav4PSGatewayService134, Version=1.34.0.0, Culture=neutral, PublicKeyToken=024bd013665211e9'.Motion10.Dsp.Nav4PSGatewayService134.BijstellingberichtXOPType";
      M10DspResponseType@1100528302 : DotNet "'Motion10.Dsp.Nav4PSGatewayService134, Version=1.34.0.0, Culture=neutral, PublicKeyToken=024bd013665211e9'.Motion10.Dsp.Nav4PSGatewayService134.DSPResponseType";
    BEGIN
      VersionTxt := DSPManagement.GetDspVersionAsText(DSPAssignment."Version No.");
      ServiceName := DSPManagement.GetDspPartnerServiceName(VersionTxt);
      LineNo := DSPManagement.GetSeqNoBijstelling;
      ConsumedWebService.GET(ServiceName);
      ConsumedWebServiceLine.GET(ServiceName, LineNo);

      DSPManagement.GetAdjustmentWs(RootElement, RootElementNamespace, VersionTxt);
      M10BijstellingBerichtRequest := M10BijstellingBerichtRequest.BijstellingberichtXOPType;
      IF (DSPSetup.Debug) THEN DotnetFunctions.SerializeToFile(M10BijstellingBerichtRequest, 'C:\Users\Public\Documents\BijstellingBericht2Empty.xml');
      DSPAdjustmentMessage.CALCFIELDS("Xml Message");
      GenericWebServiceQueue.CALCFIELDS("Xml Message");
      TempBlob.Blob := GenericWebServiceQueue."Xml Message";
      DotnetFunctions.DeSerializeFromBlob(TempBlob, M10BijstellingBerichtRequest);
      IF (DSPSetup.Debug) THEN DotnetFunctions.SerializeToFile(M10BijstellingBerichtRequest, 'C:\Users\Public\Documents\BijstellingBericht2.xml');

      DnBasicHttpBinding := DnBasicHttpBinding.BasicHttpBinding();
      DnBasicHttpBinding.Name := ConsumedWebService.Code;
      DnBasicHttpBinding.MaxReceivedMessageSize := 2147483647;
      DnBasicHttpBinding.MessageEncoding := DnWSMessageEncoding.Mtom;
      DnBasicHttpBinding.Security.Mode := DnBasicHttpSecurityMode.Transport;
      DnBasicHttpBinding.Security.Transport.ClientCredentialType := DnHttpClientCredentialType.Basic;
      DnEndPointAddress := DnEndPointAddress.EndpointAddress(ConsumedWebService."Web Service URL");
      M10WebClient := M10WebClient.Nav4PSServiceClient(DnBasicHttpBinding, DnEndPointAddress);
      M10WebClient.ClientCredentials.UserName.UserName := ConsumedWebService.Login;
      M10WebClient.ClientCredentials.UserName.Password := ConsumedWebService.Password;
      IF (DSPSetup.Debug) THEN DotnetFunctions.SerializeToFile(M10BijstellingBerichtRequest,'C:\Users\Public\Documents\BijstellingBericht2Request.xml');
      M10DspResponseType := M10WebClient.Bijstelling_OS_XOP(M10BijstellingBerichtRequest);
      IF (DSPSetup.Debug) THEN DotnetFunctions.SerializeToFile(M10DspResponseType, 'C:\Users\Public\Documents\BijstellingBericht2Response.xml');
      ResponseCode := FORMAT(M10DspResponseType.ResponseCode);

      DotnetFunctions.SerializeToBlob(RequestRec, M10BijstellingBerichtRequest);
      DotnetFunctions.SerializeToBlob(ResponseRec, M10DspResponseType);
      ConsumedWebServiceLine.AddCwsLogLine(RequestRec, ResponseRec, DSPAdjustmentMessage.RECORDID, DSPManagement.GetTcDsp);

      IF (ResponseCode <> 'OK') THEN
        ERROR(Text001, M10BijstellingBerichtRequest.ToString, ResponseCode);
    END;

    LOCAL PROCEDURE ProcessOutboundAdjustmentV1@1100528313(DSPAdjustmentMessage@1100528305 : Record 11126727;DSPAssignment@1100528300 : Record 11126740);
    VAR
      ConsumedWebServiceLine@1100528307 : Record 11229798;
      ResponseRec@1100528303 : TEMPORARY Record 99008535;
      RequestRec@1100528302 : TEMPORARY Record 99008535;
      DnXmlRequest@1100528301 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      DnXmlResponse@1100528304 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      MessageId@1100528311 : Text;
      TargetNode@1100528308 : Text;
    BEGIN
      DSPManagement.GetConsumedWebServiceLineByVersion(DSPAssignment."Version No.", DSPManagement.GetSeqNoBijstelling, ConsumedWebServiceLine);

      GenericWebServiceQueue.GetXmlMessage(DnXmlRequest);
      TargetNode := STRSUBSTNO('//%1:%2', ConsumedWebServiceLine."Prefix Method Namespace", ConsumedWebServiceLine."Request Root Tag");
      MessageId := STRSUBSTNO('%1 %2: %3', DSPManagement.GetTcDsp, ConsumedWebServiceLine."Method Name", GenericWebServiceQueue."Entry No.");

      DSPManagement.DebugSaveXml(DSPSetup, DnXmlRequest, ConsumedWebServiceLine."Method Name"+'Request.xml');
      DSPManagement.SendCws(ConsumedWebServiceLine, DnXmlRequest, DnXmlResponse, MessageId);
      DSPManagement.DebugSaveXml(DSPSetup, DnXmlResponse, ConsumedWebServiceLine."Method Name"+'Response.xml');

      DSPManagement.SerializeToBlob(ResponseRec, DnXmlResponse);
      ConsumedWebServiceLine.AddCwsLogLine(RequestRec, ResponseRec, DSPAdjustmentMessage.RECORDID, DSPManagement.GetTcDsp);
      CheckResponse(DnXmlRequest, DnXmlResponse);
    END;

    LOCAL PROCEDURE ProcessOutboundAdjustmentV2@1100528302(DSPAdjustmentMessage@1100528301 : Record 11126727;DSPAssignment@1100528300 : Record 11126740);
    BEGIN
      ProcessOutboundAdjustmentV1(DSPAdjustmentMessage, DSPAssignment);
    END;

    LOCAL PROCEDURE ProcessOutboundAssignmentInfo@1100528323();
    VAR
      DSPAssignment@1100528300 : Record 11126740;
    BEGIN
      GenericWebServiceQueue.TESTFIELD(Direction, GenericWebServiceQueue.Direction::Outbound);
      DSPAssignment.GET(GenericWebServiceQueue."Related Record ID");
      GetGlobalVars(DSPAssignment."Version No.");

      CASE TRUE OF
        (DSPSetup."Dsp Partner" = DSPManagement.GetTcDspPartnerM10) AND (DSPManagement.GetDspVersionFirst(TRUE)  = DSPAssignment."Version No."):
          ProcessOutboundAssignmentInfoM10V1(DSPAssignment);
        (DSPSetup."Dsp Partner" = DSPManagement.GetTcDspPartnerM10) AND (DSPManagement.GetDspVersionSecond(TRUE)  = DSPAssignment."Version No."):
           ProcessOutboundAssignmentInfoM10V2(DSPAssignment);
        ELSE ERROR(Text000, DSPAssignment.FIELDCAPTION("Version No."), DSPAssignment."Version No.");
      END;
    END;

    LOCAL PROCEDURE ProcessOutboundAssignmentInfoM10V1@1100528324(DSPAssignment@1100528310 : Record 11126740);
    VAR
      ConsumedWebService@1100528314 : Record 11229797;
      ConsumedWebServiceLine@1100528306 : Record 11229798;
      DSPAgreementSettings@1100528301 : Record 11126725;
      ResponseRec@1100528315 : TEMPORARY Record 99008535;
      RequestRec@1100528313 : TEMPORARY Record 99008535;
      TempBlob@1100528300 : TEMPORARY Record 99008535;
      ConsumedWebServiceMgt@1100528302 : Codeunit 11229310;
      LineNo@1100528307 : Integer;
      ServiceName@1100528304 : Code[20];
      VersionTxt@1100528305 : Text;
      M10WebClient@1100528309 : DotNet "'Motion10.Dsp.Nav4PSGatewayService, Version=1.33.0.0, Culture=neutral, PublicKeyToken=024bd013665211e9'.Motion10.Dsp.Nav4PSGatewayService.Nav4PSServiceClient";
      M10OpdrachtInfoType@1100528308 : DotNet "'Motion10.Dsp.Nav4PSGatewayService, Version=1.33.0.0, Culture=neutral, PublicKeyToken=024bd013665211e9'.Motion10.Dsp.Nav4PSGatewayService.OpdrachtInfoType";
      M10DspResponseType@1100528303 : DotNet "'Motion10.Dsp.Nav4PSGatewayService, Version=1.33.0.0, Culture=neutral, PublicKeyToken=024bd013665211e9'.Motion10.Dsp.Nav4PSGatewayService.CommonResponseType";
    BEGIN
      DSPAgreementSettings.GET(DSPAssignment."Agreement No.");
      VersionTxt := DSPManagement.GetDspVersionAsText(DSPAssignment."Version No.");
      ServiceName := DSPManagement.GetDspPartnerServiceName(VersionTxt);
      LineNo := DSPManagement.GetSeqNoAssignmentInfo;
      ConsumedWebService.GET(ServiceName);
      ConsumedWebServiceLine.GET(ServiceName, LineNo);

      M10OpdrachtInfoType := M10OpdrachtInfoType.OpdrachtInfoType();
      IF (DSPSetup.Debug) THEN DotnetFunctions.SerializeToFile(M10OpdrachtInfoType, 'C:\Users\Public\Documents\OpdrachtInfo1Empty.xml');
      M10OpdrachtInfoType.OpdrachtId := DSPAssignment."Assignment Id";
      M10OpdrachtInfoType.KostenPlaats := DSPAgreementSettings."Global Dimension 1 Code";
      DotnetFunctions.SerializeToBlob(TempBlob, M10OpdrachtInfoType);
      GenericWebServiceQueue."Xml Message" := TempBlob.Blob;
      GenericWebServiceQueue.MODIFY;
      IF (DSPSetup.Debug) THEN DotnetFunctions.SerializeToFile(M10OpdrachtInfoType, 'C:\Users\Public\Documents\OpdrachtInfo1.xml');

      DnBasicHttpBinding := DnBasicHttpBinding.BasicHttpBinding();
      DnBasicHttpBinding.Name := ConsumedWebService.Code;
      DnBasicHttpBinding.MaxReceivedMessageSize := 2147483647;
      DnBasicHttpBinding.MessageEncoding := DnWSMessageEncoding.Mtom;
      DnBasicHttpBinding.Security.Mode := DnBasicHttpSecurityMode.Transport;
      DnBasicHttpBinding.Security.Transport.ClientCredentialType := DnHttpClientCredentialType.Basic;
      DnEndPointAddress := DnEndPointAddress.EndpointAddress(ConsumedWebService."Web Service URL");

      M10WebClient := M10WebClient.Nav4PSServiceClient(DnBasicHttpBinding, DnEndPointAddress);
      M10WebClient.ClientCredentials.UserName.UserName := ConsumedWebService.Login;
      M10WebClient.ClientCredentials.UserName.Password := ConsumedWebService.Password;
      IF (DSPSetup.Debug) THEN DotnetFunctions.SerializeToFile(M10OpdrachtInfoType, 'C:\Users\Public\Documents\OpdrachtInfo1Request.xml');
      M10DspResponseType := M10WebClient.OpdrachtInfo(M10OpdrachtInfoType);
      IF (DSPSetup.Debug) THEN DotnetFunctions.SerializeToFile(M10DspResponseType, 'C:\Users\Public\Documents\OpdrachtInfo1Response.xml');

      DotnetFunctions.SerializeToBlob(RequestRec, DnXmlDocument);
      DotnetFunctions.SerializeToBlob(ResponseRec, M10DspResponseType);
      ConsumedWebServiceLine.AddCwsLogLine(RequestRec, ResponseRec, DSPAssignment.RECORDID, DSPManagement.GetTcDsp);

      IF (M10DspResponseType.ResponseCode <> 'OK') THEN
        ERROR(Text001, M10OpdrachtInfoType.ToString, M10DspResponseType.ResponseCode);
    END;

    LOCAL PROCEDURE ProcessOutboundAssignmentInfoM10V2@1100528327(DSPAssignment@1100528310 : Record 11126740);
    VAR
      ConsumedWebService@1100528314 : Record 11229797;
      ConsumedWebServiceLine@1100528306 : Record 11229798;
      DSPAgreementSettings@1100528301 : Record 11126725;
      ResponseRec@1100528311 : TEMPORARY Record 99008535;
      RequestRec@1100528300 : TEMPORARY Record 99008535;
      TempBlob@1100528312 : TEMPORARY Record 99008535;
      ConsumedWebServiceMgt@1100528302 : Codeunit 11229310;
      ServiceName@1100528304 : Code[20];
      VersionTxt@1100528305 : Text;
      LineNo@1100528307 : Integer;
      M10WebClient@1100528309 : DotNet "'Motion10.Dsp.Nav4PSGatewayService134, Version=1.34.0.0, Culture=neutral, PublicKeyToken=024bd013665211e9'.Motion10.Dsp.Nav4PSGatewayService134.Nav4PSServiceClient";
      M10OpdrachtInfoType@1100528308 : DotNet "'Motion10.Dsp.Nav4PSGatewayService134, Version=1.34.0.0, Culture=neutral, PublicKeyToken=024bd013665211e9'.Motion10.Dsp.Nav4PSGatewayService134.OpdrachtInfoType";
      M10DspResponseType@1100528303 : DotNet "'Motion10.Dsp.Nav4PSGatewayService134, Version=1.34.0.0, Culture=neutral, PublicKeyToken=024bd013665211e9'.Motion10.Dsp.Nav4PSGatewayService134.CommonResponseType";
    BEGIN
      DSPAgreementSettings.GET(DSPAssignment."Agreement No.");
      VersionTxt := DSPManagement.GetDspVersionAsText(DSPAssignment."Version No.");
      ServiceName := DSPManagement.GetDspPartnerServiceName(VersionTxt);
      LineNo := DSPManagement.GetSeqNoAssignmentInfo;
      ConsumedWebService.GET(ServiceName);
      ConsumedWebServiceLine.GET(ServiceName, LineNo);

      M10OpdrachtInfoType := M10OpdrachtInfoType.OpdrachtInfoType();
      IF (DSPSetup.Debug) THEN DotnetFunctions.SerializeToFile(M10OpdrachtInfoType, 'C:\Users\Public\Documents\OpdrachtInfo1Empty.xml');
      M10OpdrachtInfoType.OpdrachtId := DSPAssignment."Assignment Id";
      M10OpdrachtInfoType.KostenPlaats := DSPAgreementSettings."Global Dimension 1 Code";
      DotnetFunctions.SerializeToBlob(TempBlob, M10OpdrachtInfoType);
      GenericWebServiceQueue."Xml Message" := TempBlob.Blob;
      GenericWebServiceQueue.MODIFY;
      IF (DSPSetup.Debug) THEN DotnetFunctions.SerializeToFile(M10OpdrachtInfoType, 'C:\Users\Public\Documents\OpdrachtInfo2.xml');

      DnBasicHttpBinding := DnBasicHttpBinding.BasicHttpBinding();
      DnBasicHttpBinding.Name := ConsumedWebService.Code;
      DnBasicHttpBinding.MaxReceivedMessageSize := 2147483647;
      DnBasicHttpBinding.MessageEncoding := DnWSMessageEncoding.Mtom;
      DnBasicHttpBinding.Security.Mode := DnBasicHttpSecurityMode.Transport;
      DnBasicHttpBinding.Security.Transport.ClientCredentialType := DnHttpClientCredentialType.Basic;
      DnEndPointAddress := DnEndPointAddress.EndpointAddress(ConsumedWebService."Web Service URL");

      M10WebClient := M10WebClient.Nav4PSServiceClient(DnBasicHttpBinding, DnEndPointAddress);
      M10WebClient.ClientCredentials.UserName.UserName := ConsumedWebService.Login;
      M10WebClient.ClientCredentials.UserName.Password := ConsumedWebService.Password;
      IF (DSPSetup.Debug) THEN DotnetFunctions.SerializeToFile(M10OpdrachtInfoType, 'C:\Users\Public\Documents\OpdrachtInfo2Request.xml');
      M10DspResponseType := M10WebClient.OpdrachtInfo(M10OpdrachtInfoType);
      IF (DSPSetup.Debug) THEN DotnetFunctions.SerializeToFile(M10DspResponseType, 'C:\Users\Public\Documents\OpdrachtInfo2Response.xml');

      DotnetFunctions.SerializeToBlob(RequestRec, M10OpdrachtInfoType);
      DotnetFunctions.SerializeToBlob(ResponseRec, M10DspResponseType);
      ConsumedWebServiceLine.AddCwsLogLine(RequestRec, ResponseRec, DSPAssignment.RECORDID, DSPManagement.GetTcDsp);

      IF (M10DspResponseType.ResponseCode <> 'OK') THEN
        ERROR(Text001, M10OpdrachtInfoType.ToString, M10DspResponseType.ResponseCode);
    END;

    LOCAL PROCEDURE ProcessOutboundCancellationReady@1100528300();
    VAR
      DSPAssignment@1100528306 : Record 11126740;
      DSPCancellation@1100528300 : Record 11126733;
    BEGIN
      GenericWebServiceQueue.TESTFIELD(Direction, GenericWebServiceQueue.Direction::Outbound);
      DSPCancellation.GET(GenericWebServiceQueue."Related Record ID");
      DSPManagement.GetDspAssignmentByServiceOrderNoObjectNo(DSPCancellation."Service Order No.", DSPCancellation."Object No.", DSPAssignment);
      GetGlobalVars(DSPAssignment."Version No.");

      CASE TRUE OF
        (DSPSetup."Dsp Partner" = DSPManagement.GetTcDspPartnerM10) AND (DSPManagement.GetDspVersionFirst(TRUE)  = DSPAssignment."Version No."):
          ProcessOutboundCancellationReadyM10V1(DSPAssignment, DSPCancellation);
        (DSPSetup."Dsp Partner" = DSPManagement.GetTcDspPartnerM10) AND (DSPManagement.GetDspVersionSecond(TRUE)  = DSPAssignment."Version No."):
          ProcessOutboundCancellationReadyM10V2(DSPAssignment, DSPCancellation);
        (DSPSetup."Dsp Partner" = DSPManagement.GetTcDspPartnerOther) AND (DSPManagement.GetDspVersionFirst(TRUE)  = DSPAssignment."Version No."):
          ProcessOutboundCancellationReadyV2(DSPAssignment, DSPCancellation);
        (DSPSetup."Dsp Partner" = DSPManagement.GetTcDspPartnerOther) AND (DSPManagement.GetDspVersionSecond(TRUE)  = DSPAssignment."Version No."):
          ProcessOutboundCancellationReadyV2(DSPAssignment, DSPCancellation);
        ELSE ERROR(Text000, DSPAssignment.FIELDCAPTION("Version No."), DSPAssignment."Version No.");
      END;

      DSPCancellation."Processed Ready Request By Dsp" := CURRENTDATETIME;
      DSPCancellation.MODIFY(TRUE);

      DSPManagement.UpdateReferencePoint(DSPCancellation."Object No.", DSPSetup."Ref. Point Cancellation Ready");
    END;

    LOCAL PROCEDURE ProcessOutboundCancellationReadyM10V1@1100528326(DSPAssignment@1100528306 : Record 11126740;DSPCancellation@1100528300 : Record 11126733);
    VAR
      ConsumedWebService@1100528308 : Record 11229797;
      ConsumedWebServiceLine@1100528305 : Record 11229798;
      ResponseRec@1100528310 : TEMPORARY Record 99008535;
      RequestRec@1100528309 : TEMPORARY Record 99008535;
      TempBlob@1100528307 : TEMPORARY Record 99008535;
      ServiceName@1100528314 : Code[20];
      LineNo@1100528313 : Integer;
      VersionTxt@1100528312 : Text;
      ResponseCode@1100528301 : Text;
      M10WebClient@1100528304 : DotNet "'Motion10.Dsp.Nav4PSGatewayService, Version=1.33.0.0, Culture=neutral, PublicKeyToken=024bd013665211e9'.Motion10.Dsp.Nav4PSGatewayService.Nav4PSServiceClient";
      M10AnnuleringGereedBerichtRequest@1100528303 : DotNet "'Motion10.Dsp.Nav4PSGatewayService, Version=1.33.0.0, Culture=neutral, PublicKeyToken=024bd013665211e9'.Motion10.Dsp.Nav4PSGatewayService.AnnuleringGereedberichtXOPType";
      M10DspResponseType@1100528302 : DotNet "'Motion10.Dsp.Nav4PSGatewayService, Version=1.33.0.0, Culture=neutral, PublicKeyToken=024bd013665211e9'.Motion10.Dsp.Nav4PSGatewayService.DSPResponseType";
    BEGIN
      VersionTxt := DSPManagement.GetDspVersionAsText(DSPAssignment."Version No.");
      ServiceName := DSPManagement.GetDspPartnerServiceName(VersionTxt);
      LineNo := DSPManagement.GetSeqNoAnnuleringGereed;
      ConsumedWebService.GET(ServiceName);
      ConsumedWebServiceLine.GET(ServiceName, LineNo);
      DSPManagement.GetCancellationReadyWs(RootElement, RootElementNamespace, VersionTxt);

      M10AnnuleringGereedBerichtRequest := M10AnnuleringGereedBerichtRequest.AnnuleringGereedberichtXOPType();
      GenericWebServiceQueue.CALCFIELDS("Xml Message");
      TempBlob.Blob := GenericWebServiceQueue."Xml Message";
      IF (DSPSetup.Debug) THEN DotnetFunctions.SerializeToFile(M10AnnuleringGereedBerichtRequest, 'C:\Users\Public\Documents\AnnuleringGereedBericht1Empty.xml');
      DotnetFunctions.DeSerializeFromBlob(TempBlob, M10AnnuleringGereedBerichtRequest);
      IF (DSPSetup.Debug) THEN DotnetFunctions.SerializeToFile(M10AnnuleringGereedBerichtRequest, 'C:\Users\Public\Documents\AnnuleringGereedBericht1.xml');

      DnBasicHttpBinding := DnBasicHttpBinding.BasicHttpBinding();
      DnBasicHttpBinding.Name := ConsumedWebService.Code;
      DnBasicHttpBinding.MaxReceivedMessageSize := 2147483647;
      DnBasicHttpBinding.MessageEncoding := DnWSMessageEncoding.Mtom;
      DnBasicHttpBinding.Security.Mode := DnBasicHttpSecurityMode.Transport;
      DnBasicHttpBinding.Security.Transport.ClientCredentialType := DnHttpClientCredentialType.Basic;
      DnEndPointAddress := DnEndPointAddress.EndpointAddress(ConsumedWebService."Web Service URL");
      M10WebClient := M10WebClient.Nav4PSServiceClient(DnBasicHttpBinding, DnEndPointAddress);
      M10WebClient.ClientCredentials.UserName.UserName := ConsumedWebService.Login;
      M10WebClient.ClientCredentials.UserName.Password := ConsumedWebService.Password;
      IF (DSPSetup.Debug) THEN DotnetFunctions.SerializeToFile(M10AnnuleringGereedBerichtRequest,'C:\Users\Public\Documents\AnnuleringGereedBericht1Request.xml');
      M10DspResponseType := M10WebClient.AnnuleringGereed_OS_XOP(M10AnnuleringGereedBerichtRequest);
      IF (DSPSetup.Debug) THEN DotnetFunctions.SerializeToFile(M10DspResponseType, 'C:\Users\Public\Documents\AnnuleringGereedBericht1Response.xml');
      ResponseCode := FORMAT(M10DspResponseType.ResponseCode);

      DotnetFunctions.SerializeToBlob(RequestRec, M10AnnuleringGereedBerichtRequest);
      DotnetFunctions.SerializeToBlob(ResponseRec, M10DspResponseType);
      ConsumedWebServiceLine.AddCwsLogLine(RequestRec, ResponseRec, DSPCancellation.RECORDID, DSPManagement.GetTcDsp);

      IF (ResponseCode <> 'OK') THEN
        ERROR(Text001, M10AnnuleringGereedBerichtRequest.ToString, ResponseCode);
    END;

    LOCAL PROCEDURE ProcessOutboundCancellationReadyM10V2@1100528325(DSPAssignment@1100528308 : Record 11126740;DSPCancellation@1100528307 : Record 11126733);
    VAR
      ConsumedWebService@1100528305 : Record 11229797;
      ConsumedWebServiceLine@1100528300 : Record 11229798;
      ResponseRec@1100528312 : TEMPORARY Record 99008535;
      RequestRec@1100528311 : TEMPORARY Record 99008535;
      TempBlob@1100528313 : TEMPORARY Record 99008535;
      ServiceName@1100528310 : Code[20];
      LineNo@1100528309 : Integer;
      VersionTxt@1100528306 : Text;
      ResponseCode@1100528304 : Text;
      M10WebClient@1100528303 : DotNet "'Motion10.Dsp.Nav4PSGatewayService134, Version=1.34.0.0, Culture=neutral, PublicKeyToken=024bd013665211e9'.Motion10.Dsp.Nav4PSGatewayService134.Nav4PSServiceClient";
      M10AnnuleringGereedBerichtRequest@1100528302 : DotNet "'Motion10.Dsp.Nav4PSGatewayService134, Version=1.34.0.0, Culture=neutral, PublicKeyToken=024bd013665211e9'.Motion10.Dsp.Nav4PSGatewayService134.AnnuleringGereedberichtXOPType";
      M10DspResponseType@1100528301 : DotNet "'Motion10.Dsp.Nav4PSGatewayService134, Version=1.34.0.0, Culture=neutral, PublicKeyToken=024bd013665211e9'.Motion10.Dsp.Nav4PSGatewayService134.DSPResponseType";
    BEGIN
      VersionTxt := DSPManagement.GetDspVersionAsText(DSPAssignment."Version No.");
      ServiceName := DSPManagement.GetDspPartnerServiceName(VersionTxt);
      LineNo := DSPManagement.GetSeqNoAnnuleringGereed;
      ConsumedWebService.GET(ServiceName);
      ConsumedWebServiceLine.GET(ServiceName, LineNo);
      DSPManagement.GetCancellationReadyWs(RootElement, RootElementNamespace, VersionTxt);

      M10AnnuleringGereedBerichtRequest := M10AnnuleringGereedBerichtRequest.AnnuleringGereedberichtXOPType();
      GenericWebServiceQueue.CALCFIELDS("Xml Message");
      TempBlob.Blob := GenericWebServiceQueue."Xml Message";
      IF (DSPSetup.Debug) THEN DotnetFunctions.SerializeToFile(M10AnnuleringGereedBerichtRequest, 'C:\Users\Public\Documents\AnnuleringGereedBericht2Empty.xml');
      DotnetFunctions.DeSerializeFromBlob(TempBlob, M10AnnuleringGereedBerichtRequest);
      IF (DSPSetup.Debug) THEN DotnetFunctions.SerializeToFile(M10AnnuleringGereedBerichtRequest, 'C:\Users\Public\Documents\AnnuleringGereedBericht2.xml');

      DnBasicHttpBinding := DnBasicHttpBinding.BasicHttpBinding();
      DnBasicHttpBinding.Name := ConsumedWebService.Code;
      DnBasicHttpBinding.MaxReceivedMessageSize := 2147483647;
      DnBasicHttpBinding.MessageEncoding := DnWSMessageEncoding.Mtom;
      DnBasicHttpBinding.Security.Mode := DnBasicHttpSecurityMode.Transport;
      DnBasicHttpBinding.Security.Transport.ClientCredentialType := DnHttpClientCredentialType.Basic;
      DnEndPointAddress := DnEndPointAddress.EndpointAddress(ConsumedWebService."Web Service URL");
      M10WebClient := M10WebClient.Nav4PSServiceClient(DnBasicHttpBinding, DnEndPointAddress);
      M10WebClient.ClientCredentials.UserName.UserName := ConsumedWebService.Login;
      M10WebClient.ClientCredentials.UserName.Password := ConsumedWebService.Password;
      IF (DSPSetup.Debug) THEN DotnetFunctions.SerializeToFile(M10AnnuleringGereedBerichtRequest,'C:\Users\Public\Documents\AnnuleringGereedBericht2Request.xml');
      M10DspResponseType := M10WebClient.AnnuleringGereed_OS_XOP(M10AnnuleringGereedBerichtRequest);
      IF (DSPSetup.Debug) THEN DotnetFunctions.SerializeToFile(M10DspResponseType, 'C:\Users\Public\Documents\AnnuleringGereedBericht2Response.xml');
      ResponseCode := FORMAT(M10DspResponseType.ResponseCode);

      DotnetFunctions.SerializeToBlob(RequestRec, M10AnnuleringGereedBerichtRequest);
      DotnetFunctions.SerializeToBlob(ResponseRec, M10DspResponseType);
      ConsumedWebServiceLine.AddCwsLogLine(RequestRec, ResponseRec, DSPCancellation.RECORDID, DSPManagement.GetTcDsp);

      IF (ResponseCode <> 'OK') THEN
        ERROR(Text001, M10AnnuleringGereedBerichtRequest.ToString, ResponseCode);
    END;

    LOCAL PROCEDURE ProcessOutboundCancellationReadyV1@1100528341(DSPAssignment@1100528306 : Record 11126740;DSPCancellation@1100528300 : Record 11126733);
    VAR
      ConsumedWebServiceLine@1100528305 : Record 11229798;
      ResponseRec@1100528310 : TEMPORARY Record 99008535;
      RequestRec@1100528309 : TEMPORARY Record 99008535;
      MessageId@1100528304 : Text;
      DnXmlRequest@1100528303 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      DnXmlResponse@1100528301 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      TargetNode@1100528307 : Text;
    BEGIN
      DSPManagement.GetConsumedWebServiceLineByVersion(DSPAssignment."Version No.", DSPManagement.GetSeqNoAnnuleringGereed, ConsumedWebServiceLine);

      GenericWebServiceQueue.CALCFIELDS("Xml Message");
      RequestRec.Blob := GenericWebServiceQueue."Xml Message";
      DSPManagement.GetXmlDocument(RequestRec,DnXmlRequest);
      TargetNode := STRSUBSTNO('//%1:%2', ConsumedWebServiceLine."Prefix Method Namespace", ConsumedWebServiceLine."Request Root Tag");
      MessageId := STRSUBSTNO('%1 %2: %3', DSPManagement.GetTcDsp, ConsumedWebServiceLine."Method Name", GenericWebServiceQueue."Entry No.");

      DSPManagement.DebugSaveXml(DSPSetup, DnXmlRequest, ConsumedWebServiceLine."Method Name"+'Request.xml');
      DSPManagement.SendCws(ConsumedWebServiceLine, DnXmlRequest, DnXmlResponse, MessageId);
      DSPManagement.DebugSaveXml(DSPSetup, DnXmlResponse, ConsumedWebServiceLine."Method Name"+'Response.xml');

      DSPManagement.SerializeToBlob(ResponseRec, DnXmlResponse);
      ConsumedWebServiceLine.AddCwsLogLine(RequestRec, ResponseRec, DSPCancellation.RECORDID, DSPManagement.GetTcDsp);
      CheckResponse(DnXmlRequest, DnXmlResponse);
    END;

    LOCAL PROCEDURE ProcessOutboundCancellationReadyV2@1100528340(DSPAssignment@1100528301 : Record 11126740;DSPCancellation@1100528300 : Record 11126733);
    BEGIN
      ProcessOutboundCancellationReadyV1(DSPAssignment, DSPCancellation);
    END;

    LOCAL PROCEDURE ProcessServiceOrder@1100525013();
    VAR
      DSPAgreementSettings@1100528301 : Record 11126725;
      DSPAssignment@1100528304 : Record 11126740;
      DSPLIPRequest@1100528303 : Record 11126755;
      DSPLIPRequestLine@1100528302 : Record 11126756;
      ServiceOrder@1100525002 : Record 11012823;
      DSPRequestManagement@1100528305 : Codeunit 11126222;
      ServiceOrderNo@1100528300 : Code[20];
    BEGIN
      DSPAssignment.GET(GenericWebServiceQueue."Related Record ID");
      DSPAssignment.GetXmlMessage(DnXmlDocument);
      GetGlobalVars(DSPAssignment."Version No.");
      DSPAgreementSettings.GET(DSPAssignment."Agreement No.");
      DSPAgreementSettings.TESTFIELD("Service Contract No.");

      ServiceOrderNo := DSPManagement.GetServiceOrderNo(DSPAssignment."Connection Object Id", DSPAssignment."Cluster Id");
      IF (ServiceOrderNo = '') THEN BEGIN
        ServiceOrder.INIT;
        ServiceOrder.VALIDATE("No.", '');
        ServiceOrder.INSERT(TRUE);
        ServiceOrderNo := ServiceOrder."No.";

        ServiceOrder.VALIDATE("Service Contract No.", DSPAgreementSettings."Service Contract No.");
        ServiceOrder."First Possible Starting Date":= GetFirstPossibleStartingDate;
        IF (DSPSetup."Default Order Type DSP" <> '') THEN
          ServiceOrder.VALIDATE("Order Type", DSPSetup."Default Order Type DSP");
        ServiceOrder.MODIFY;
      END ELSE
        ServiceOrder.GET(ServiceOrderNo);

      DSPAssignment."Service Order No." := ServiceOrderNo;
      DSPAssignment."Processed On" := CURRENTDATETIME;
      DSPAssignment.MODIFY;

      UpdateServiceOrder(ServiceOrder, DSPAssignment, DSPAgreementSettings);

      DSPLIPRequest.SETRANGE("Request Id", DSPAssignment."Cluster Id");
      IF (DSPLIPRequest.FINDLAST) THEN BEGIN
        DSPLIPRequestLine.SETRANGE("Entry No.", DSPLIPRequest."Entry No.");
        DSPLIPRequestLine.SETRANGE("Connection Object Id", DSPAssignment."Connection Object Id");
        DSPLIPRequestLine.SETRANGE("Processed On", 0DT);
        DSPLIPRequestLine.SETRANGE("Service Order No.", '');
        DSPLIPRequestLine.SETRANGE("Assignment Id" , '');
        IF (DSPLIPRequestLine.FINDSET(TRUE)) THEN  BEGIN
          DSPLIPRequest.GET(DSPLIPRequestLine."Entry No.");
          REPEAT
            DSPRequestManagement.CreateTaskServiceObjects2(DSPLIPRequest, DSPLIPRequestLine);
            DSPLIPRequestLine."Service Order No." := ServiceOrderNo;
            DSPLIPRequestLine.MODIFY(TRUE);
          UNTIL (DSPLIPRequestLine.NEXT = 0);
        END;
      END;
    END;

    LOCAL PROCEDURE ProcessServiceOrderObject@1100529904();
    VAR
      DSPAgreementSettings@1100528311 : Record 11126725;
      DSPAssignment@1100528308 : Record 11126740;
      DSPLIPRequestLine@1100528310 : Record 11126756;
      ContractObject@1100528306 : Record 11071702;
      ServiceContract@1100528305 : Record 11012812;
      ServiceObject@1100528304 : Record 11071691;
      ServiceOrderObject@1100529902 : Record 11071724;
      CopyObject@1100528303 : Codeunit 11012804;
      DocumentLinkManagement@1100528300 : Codeunit 11012401;
      SourceRecRef@1100528301 : RecordRef;
      TargetRecRef@1100528302 : RecordRef;
      ObjectNo@1100528309 : Code[20];
    BEGIN
      DSPAssignment.GET(GenericWebServiceQueue."Related Record ID");
      GetGlobalVars(DSPAssignment."Version No.");
      DSPAssignment.GetXmlMessage(DnXmlDocument);
      DSPAgreementSettings.GET(DSPAssignment."Agreement No.");
      ServiceContract.GET(DSPAgreementSettings."Service Contract No.");

      ObjectNo := DSPAssignment."Object No.";
      IF (ObjectNo = '') THEN BEGIN
        ObjectNo := DSPManagement.GetServiceOrderObjectNoLip(DSPAssignment);
        IF (ObjectNo = '') THEN BEGIN
          ServiceObject.INIT;
          ServiceObject."No." := '';
          ServiceObject.INSERT(TRUE);
          ObjectNo := ServiceObject."No.";

          ServiceObject.VALIDATE("Standard Object No.", DSPManagement.GetDspServiceObjectStandardObjectCode(DSPAssignment.Discipline));
          ServiceObject.Status := DSPSetup."Status  Assignment Created";
          UpdateServiceObject(ServiceObject, DSPAssignment);

          IF (DSPAgreementSettings."Service Contract No." <> '') THEN BEGIN
            ContractObject.VALIDATE("Service Contract No.", DSPAgreementSettings."Service Contract No.");
            ContractObject."Service Object No." := ObjectNo;
            ContractObject.INSERT(TRUE);
          END;

          ServiceOrderObject.INIT;
          ServiceOrderObject.VALIDATE("Service Order No.", DSPAssignment."Service Order No.");
          ServiceOrderObject."Object No." := ObjectNo;
          ServiceOrderObject."Maintenance Scheme" := '';
          ServiceOrderObject.INSERT(TRUE);

          ServiceOrderObject.VALIDATE("Service Contract No.", DSPAgreementSettings."Service Contract No.");
          ServiceOrderObject.VALIDATE("Standard Object No.", ServiceObject."Standard Object No.");
          ServiceOrderObject.MODIFY(TRUE);

          DSPManagement.UpdateReferencePoint(ServiceOrderObject."Object No.", DSPSetup."Reference Point New Object");

          SourceRecRef.GETTABLE(DSPAssignment);
          TargetRecRef.GETTABLE(ServiceOrderObject);
          DocumentLinkManagement.CopyDocLinks(SourceRecRef, TargetRecRef);
        END ELSE BEGIN
          ServiceObject.GET(ObjectNo);
          ServiceObject.Status := DSPSetup."Status  Assignment Created";
          ServiceObject."Standard Object No." := DSPManagement.GetDspServiceObjectStandardObjectCode(DSPAssignment.Discipline);
          UpdateServiceObject(ServiceObject, DSPAssignment);

          IF (DSPAgreementSettings."Service Contract No." <> '') THEN BEGIN
            ContractObject.GET(DSPAgreementSettings."Service Contract No.", ObjectNo);
            ContractObject.VALIDATE("Service Contract No.", DSPAgreementSettings."Service Contract No.");
            ContractObject.MODIFY(TRUE);
          END;

          ServiceOrderObject.GET(DSPAssignment."Service Order No.", ObjectNo, '');
          ServiceOrderObject.VALIDATE("Service Contract No.", DSPAgreementSettings."Service Contract No.");
          ServiceOrderObject.MODIFY(TRUE);

          DSPManagement.UpdateReferencePoint(ServiceOrderObject."Object No.", DSPSetup."Reference Point New Object");

          SourceRecRef.GETTABLE(DSPAssignment);
          TargetRecRef.GETTABLE(ServiceOrderObject);
          DocumentLinkManagement.CopyDocLinks(SourceRecRef, TargetRecRef);
        END;
        UpdateObjectSpecificationsValues(DSPAssignment, ServiceOrderObject);
      END;

      DSPAssignment."Object No." := ObjectNo;
      DSPAssignment.MODIFY(TRUE);

      IF (XMLDOMManagement.FindNode(DnXmlDocument, '//*[local-name()="Opmerking"]/*[local-name()="OpmerkingReden"]', DnXmlNode))
      THEN BEGIN
        DSPManagement.AddServiceTextToServiceOrder(DSPAssignment."Service Order No.", 90, DSPAssignment.Operator);
        DSPManagement.AddServiceTextToServiceOrder(DSPAssignment."Service Order No.", 90, STRSUBSTNO('%1 %2',
        DSPManagement.FindNodeOpmerkingOpmerkingReden(DnXmlDocument), DSPManagement.FindNodeOpmerkingToelichting(DnXmlDocument)));
      END;

      DSPLIPRequestLine.SETRANGE("Connection Object Id", DSPAssignment."Connection Object Id");
      DSPLIPRequestLine.SETRANGE("Service Order No.", DSPAssignment."Service Order No.");
      DSPLIPRequestLine.SETRANGE("Object No.", DSPAssignment."Object No.");
      DSPLIPRequestLine.SETRANGE("Assignment Id" , '');
      DSPLIPRequestLine.SETRANGE(Discipline, DSPAssignment.Discipline);
      IF (DSPLIPRequestLine.FINDFIRST) THEN BEGIN
        DSPLIPRequestLine."Object No." := DSPAssignment."Object No.";
        DSPLIPRequestLine."Assignment Id" := DSPAssignment."Assignment Id";
        DSPLIPRequestLine.MODIFY(TRUE);
      END;

      DSPManagement.SetServiceOrderDspOrderType(DSPAssignment."Service Order No.");
    END;

    LOCAL PROCEDURE ProcessStatusUpdateAga@1100528333(DSPStatusUpdate@1100528300 : Record 11126763;DSPAssignment@1100528301 : Record 11126740);
    BEGIN
      CASE DSPStatusUpdate.Status OF
        DSPStatusUpdate.Status::Approved:
          DSPManagement.UpdateReferencePoint2(DSPAssignment."Object No.", DSPSetup."Ref. Point Aga Approved", DSPStatusUpdate."Status Changed On");
        DSPStatusUpdate.Status::Denied:
          DSPManagement.UpdateReferencePoint2(DSPAssignment."Object No.", DSPSetup."Ref. Point Aga Denied", DSPStatusUpdate."Status Changed On");
        DSPStatusUpdate.Status::Submitted:
          DSPManagement.UpdateReferencePoint(DSPAssignment."Object No.", DSPSetup."Ref. Point Aga Submitted");
      END;
    END;

    LOCAL PROCEDURE ProcessStatusUpdateTg@1100528334(DSPStatusUpdate@1100528301 : Record 11126763;DSPAssignment@1100528300 : Record 11126740);
    BEGIN
      CASE DSPStatusUpdate.Status OF
        DSPStatusUpdate.Status::Approved:
          DSPManagement.UpdateReferencePoint2(DSPAssignment."Object No.", DSPSetup."Ref. Point Tg Approved", DSPStatusUpdate."Status Changed On");
        DSPStatusUpdate.Status::Denied:
          DSPManagement.UpdateReferencePoint2(DSPAssignment."Object No.", DSPSetup."Ref. Point Tg Denied", DSPStatusUpdate."Status Changed On");
        DSPStatusUpdate.Status::Submitted:
          DSPManagement.UpdateReferencePoint(DSPAssignment."Object No.", DSPSetup."Ref. Point Tg Submitted");
      END;
    END;

    LOCAL PROCEDURE ProcessSupRecordingLines@1100525047();
    VAR
      DSPAssignment@1100528801 : Record 11126740;
      ServiceOrder@1100528804 : Record 11012823;
      ServiceOrderExtension@1100528803 : Record 11071727;
    BEGIN
      DSPAssignment.GET(GenericWebServiceQueue."Related Record ID");
      GetGlobalVars(DSPAssignment."Version No.");
      DSPAssignment.GetXmlMessage(DnXmlDocument);
      ServiceOrder.GET(DSPAssignment."Service Order No.");
      ServiceOrderExtension.GetServOrderExtension(ServiceOrder."No.");
      ServiceOrderExtension.TESTFIELD("Price Book Code");

      ProcessSupRecordingLine(DSPAssignment, ServiceOrder, ServiceOrderExtension);
    END;

    LOCAL PROCEDURE ProcessSupRecordingLine@1100528317(DSPAssignment@1100528300 : Record 11126740;ServiceOrder@1100528301 : Record 11012823;ServiceOrderExtension@1100528302 : Record 11071727);
    VAR
      SUPProductionLine@1100528309 : Record 11071774;
      SUPRecordingLine@1100528306 : Record 11071772;
      Counter@1100528305 : Integer;
      Xpath@1100528307 : Text;
      XpathForLoop@1100528308 : Text;
      Quantity@1100528304 : Decimal;
      DescriptionText@1100528310 : Text;
      DnXmlNodeList@1100528303 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
    BEGIN
      Xpath := '//*[local-name()="Opdrachtbericht"]/*[local-name()="Opdrachtregel"]';
      NodeCount := XMLDOMManagement.FindNodeCount(DnXmlDocument, Xpath);
      IF (NodeCount = 0) THEN EXIT;

      FOR Counter := 1 TO NodeCount DO BEGIN
        SUPProductionLine.SETRANGE("Service Order No.", ServiceOrder."No.");
        SUPProductionLine.SETRANGE("Object No.", DSPAssignment."Object No.");
        IF (NOT SUPProductionLine.FINDFIRST) THEN SUPProductionLine.INIT;

        XpathForLoop := STRSUBSTNO('%1[%2]', Xpath, Counter);
        SUPRecordingLine.INIT;
        SUPRecordingLine.VALIDATE("Service Order No.", DSPAssignment."Service Order No.");
        SUPRecordingLine."Line No." := DSPManagement.GetSUPLineNo(DSPAssignment."Service Order No.");
        SUPRecordingLine.VALIDATE("Price Book Type", ServiceOrder."Price Book Type");
        SUPRecordingLine.VALIDATE("Price Book Code", ServiceOrderExtension."Price Book Code");
        SUPRecordingLine.VALIDATE("Index Date", ServiceOrderExtension."Price Book Index Date");
        CASE TRUE OF
          (DSPManagement.GetDspVersionFirst(TRUE)  = DSPAssignment."Version No."):
            SUPRecordingLine.VALIDATE("Unit Price Code", XMLDOMManagement.FindNodeText(DnXmlDocument, XpathForLoop + '/*[local-name()="Opdrachtregel"]'));
          (DSPManagement.GetDspVersionSecond(TRUE)  = DSPAssignment."Version No."):
            SUPRecordingLine.VALIDATE("Unit Price Code", XMLDOMManagement.FindNodeText(DnXmlDocument, XpathForLoop + '/*[local-name()="Bestekcode"]'));
          ELSE ERROR(Text000, DSPAssignment.FIELDCAPTION("Version No."), DSPAssignment."Version No.");
        END;
        IF (SUPProductionLine.Description <> '') THEN
          SUPRecordingLine.Description := SUPProductionLine.Description
        ELSE BEGIN
          DescriptionText := XMLDOMManagement.FindNodeText(DnXmlDocument, XpathForLoop + '/*[local-name()="Omschrijving"]');
          SUPRecordingLine.Description := COPYSTR(DescriptionText, 1, MAXSTRLEN(SUPRecordingLine.Description));
          IF (STRLEN(DescriptionText) > MAXSTRLEN(SUPRecordingLine.Description)) THEN
            SUPRecordingLine."Description 2" := COPYSTR(DescriptionText, MAXSTRLEN(SUPRecordingLine.Description) + 1, MAXSTRLEN(SUPRecordingLine."Description 2"));
        END;
        EVALUATE(Quantity, XMLDOMManagement.FindNodeText(DnXmlDocument, XpathForLoop + '/*[local-name()="Aantal"]'), 9);
        SUPRecordingLine.VALIDATE("Recording Quantity", Quantity);
        SUPRecordingLine.VALIDATE("Bill-to Customer No.", DSPManagement.GetCustomerNo(DSPAssignment.Operator));
        SUPRecordingLine."Object No." := DSPAssignment."Object No.";
        SUPRecordingLine.TESTFIELD("Object No.");
        SUPRecordingLine.INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE SendCancellationReadyRequest@1100528812(DSPCancellation@1100525002 : Record 11126733);
    VAR
      TempBlob@1100528300 : TEMPORARY Record 99008535;
    BEGIN
      FillCancellationReadyRequest(DSPCancellation);

      DotnetFunctions.SerializeToBlob(TempBlob, DnXmlDocument);
      CreateGenericWebServiceQueue(TempBlob, DSPCancellation, DATABASE::"DSP Cancellation");
    END;

    LOCAL PROCEDURE SetSupRecordingLineToZero@1100528803(IServiceOrderNo@1100528800 : Code[20];IServiceOrderObjectNo@1100528801 : Code[20]);
    VAR
      SUPRecordingLine@1100528802 : Record 11071772;
    BEGIN
      SUPRecordingLine.SETRANGE("Service Order No.", IServiceOrderNo);
      SUPRecordingLine.SETRANGE("Object No.", IServiceOrderObjectNo);
      IF (NOT SUPRecordingLine.FINDSET(TRUE)) THEN EXIT;

      REPEAT
        SUPRecordingLine.CALCFIELDS("Production Recording Quantity");
        IF (SUPRecordingLine."Production Recording Quantity" = 0) THEN BEGIN
          SUPRecordingLine.VALIDATE("Pre-Recording Quantity", 0);
          SUPRecordingLine.VALIDATE("Recording Quantity", 0);
          SUPRecordingLine.MODIFY;
        END;
      UNTIL (SUPRecordingLine.NEXT = 0);
    END;

    LOCAL PROCEDURE UpdateSupRecordingLinesRevised@1100528839(EntryNo@1100528805 : BigInteger);
    VAR
      DSPAssignment@1100528804 : Record 11126740;
      ServiceOrder@1100528802 : Record 11012823;
      ServiceOrderExtension@1100528801 : Record 11071727;
      SUPRecordingLine@1100528300 : Record 11071772;
    BEGIN
      DSPAssignment.GET(EntryNo);
      ServiceOrder.GET(DSPAssignment."Service Order No.");
      ServiceOrderExtension.GetServOrderExtension(DSPAssignment."Service Order No.");
      IF ServiceOrderExtension."Price Book Code" = '' THEN
        EXIT;

      SUPRecordingLine.SETRANGE("Service Order No.", DSPAssignment."Service Order No.");
      SUPRecordingLine.SETRANGE("Object No.", DSPAssignment."Object No.");
      SUPRecordingLine.ClearSUPRecordingLineNoFromAdviceOrderLine(FALSE);
      SUPRecordingLine.DELETEALL;

      ProcessSupRecordingLine(DSPAssignment, ServiceOrder, ServiceOrderExtension);
    END;

    LOCAL PROCEDURE UpdateServiceObjectRevised@1100528338(EntryNo@1100525000 : BigInteger);
    VAR
      DSPAssignment@1100528303 : Record 11126740;
      ServiceObject@1100528302 : Record 11071691;
    BEGIN
      DSPAssignment.GET(EntryNo);
      ServiceObject.GET(DSPAssignment."Object No.");
      UpdateServiceObject(ServiceObject, DSPAssignment);
    END;

    LOCAL PROCEDURE UpdateServiceOrderRevised@1100525060(EntryNo@1100525000 : BigInteger);
    VAR
      ServiceOrder@1100525002 : Record 11012823;
      DSPAssignment@1100528800 : Record 11126740;
    BEGIN
      DSPAssignment.GET(EntryNo);
      ServiceOrder.GET(DSPAssignment."Service Order No.");
      ServiceOrder."Post Code" := XMLDOMManagement.FindNodeText(DnXmlDocument,
        '//*[local-name()="Leveradres"]/*[local-name()="Adres"]/*[local-name()="Postcode"]');
      ServiceOrder.Address := DSPManagement.GetServiceOrderAddress(
        XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="Leveradres"]/*[local-name()="Adres"]/*[local-name()="Straat"]'),
        XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="Leveradres"]/*[local-name()="Adres"]/*[local-name()="Huisnummer"]'),
        XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="Leveradres"]/*[local-name()="Adres"]/*[local-name()="Toevoeging"]'));
      ServiceOrder.City := XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="Leveradres"]/*[local-name()="Adres"]/*[local-name()="Plaats"]');
      ServiceOrder."Contact Name" := DSPManagement.ConstructContactName(
        XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="ContactpersoonKlant"]/*[local-name()="Aanhef"]'),
        XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="ContactpersoonKlant"]/*[local-name()="Voorletters"]'),
        XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="ContactpersoonKlant"]/*[local-name()="Tussenvoegsel"]'),
        XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="ContactpersoonKlant"]/*[local-name()="Achternaam"]'));
      ServiceOrder."E-Mail" := XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="ContactpersoonKlant"]/*[local-name()="Emailadres"]');
      ServiceOrder."Phone No." := DSPManagement.FindNodeContactpersoonKlantTelefoonnummer(DnXmlDocument);
      ServiceOrder."Mobile Phone No." := DSPManagement.FindNodeContactpersoonKlantMobielnummer(DnXmlDocument);
      ServiceOrder.MODIFY;
    END;

    LOCAL PROCEDURE UpdateServiceTextRevised@1100525061(EntryNo@1100528800 : BigInteger);
    VAR
      DSPAssignment@1100528801 : Record 11126740;
    BEGIN
      DSPAssignment.GET(EntryNo);
      DSPManagement.AddServiceTextToServiceOrder(DSPAssignment."Service Order No.", 90, STRSUBSTNO('%1 %2',
        DSPManagement.FindNodeOpmerkingOpmerkingReden(DnXmlDocument),DSPManagement.FindNodeOpmerkingToelichting(DnXmlDocument)));
    END;

    LOCAL PROCEDURE UpdateObjectSpecificationsValues@1100525078(DSPAssignment@1100525001 : Record 11126740;ServiceOrderObject@1100528800 : Record 11071724) : Boolean;
    VAR
      ServiceOrderObjSpecLine@1100525000 : Record 11071782;
      Xpath@1100528806 : Text;
    BEGIN
      ServiceOrderObjSpecLine.SETRANGE("Service Order No.", ServiceOrderObject."Service Order No.");
      ServiceOrderObjSpecLine.SETRANGE("Service Object No.", ServiceOrderObject."Object No.");
      ServiceOrderObjSpecLine.SETRANGE(Type,ServiceOrderObjSpecLine.Type::Line);
      IF (NOT ServiceOrderObjSpecLine.FINDSET) THEN
        EXIT;

      REPEAT
        IF DspObjectSpecificationSettingExist(DSPAssignment, ServiceOrderObjSpecLine."Specification Code", Xpath) THEN BEGIN
          IF (XMLDOMManagement.FindNode(DnXmlDocument, Xpath, DnXmlNode)) THEN BEGIN
            ServiceOrderObjSpecLine.VALIDATE("Old Value", COPYSTR(XMLDOMManagement.FindNodeText(DnXmlDocument, Xpath), 1,
              MAXSTRLEN(ServiceOrderObjSpecLine."Old Value")));
            ServiceOrderObjSpecLine.VALIDATE("New Value", '');
            ServiceOrderObjSpecLine.MODIFY(TRUE);
          END;
        END;
      UNTIL ServiceOrderObjSpecLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateServiceObject@1100528337(VAR ServiceObject@1100528301 : Record 11071691;DSPAssignment@1100528303 : Record 11126740);
    BEGIN
      ServiceObject.Description := COPYSTR(DSPAssignment."Work Connection", 1, MAXSTRLEN(ServiceObject.Description));
      IF (DSPAssignment."Type Connection Object" <> '') THEN
        ServiceObject.Description := COPYSTR(DSPAssignment."Type Connection Object", 1, MAXSTRLEN(ServiceObject.Description));
      ServiceObject."Description 2" := COPYSTR(DSPAssignment."Work Type Connection", 1, MAXSTRLEN(ServiceObject."Description 2"));
      ServiceObject."Dsp Assignment Id" := DSPAssignment."Assignment Id";
      ServiceObject."Dsp Cluster Id" := DSPAssignment."Cluster Id";
      ServiceObject."Dsp Connection Object Id" := DSPAssignment."Connection Object Id";
      ServiceObject."Dsp Discipline" := DSPAssignment.Discipline;
      ServiceObject."Dsp Operator" := DSPAssignment.Operator;
      ServiceObject."Dsp Origin" := ServiceObject."Dsp Origin"::DSP;
      ServiceObject."Dsp Version No." := DSPAssignment."Version No.";
      ServiceObject.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateServiceOrder@1100528321(VAR ServiceOrder@1100528300 : Record 11012823;DSPAssignment@1100528303 : Record 11126740;DSPAgreementSettings@1100528302 : Record 11126725);
    VAR
      ServiceLocation@1100528301 : Record 11012801;
    BEGIN
      IF (ServiceOrder.Description = '') THEN
        ServiceOrder.Description := COPYSTR(DSPAssignment."Work Connection", 1, MAXSTRLEN(ServiceOrder.Description));
      IF (ServiceOrder."Description 2" = '') THEN
        ServiceOrder."Description 2" := COPYSTR(DSPAssignment."Work Type Connection", 1, MAXSTRLEN(ServiceOrder."Description 2"));

      ServiceOrder."Post Code" := XMLDOMManagement.FindNodeText(DnXmlDocument,
        '//*[local-name()="Leveradres"]/*[local-name()="Adres"]/*[local-name()="Postcode"]');
      ServiceOrder.Address := DSPManagement.GetServiceOrderAddress(
        XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="Leveradres"]/*[local-name()="Adres"]/*[local-name()="Straat"]'),
        XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="Leveradres"]/*[local-name()="Adres"]/*[local-name()="Huisnummer"]'),
        XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="Leveradres"]/*[local-name()="Adres"]/*[local-name()="Toevoeging"]'));
      ServiceOrder.City := XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="Leveradres"]/*[local-name()="Adres"]/*[local-name()="Plaats"]');
      ServiceOrder."Contact Name" := DSPManagement.ConstructContactName(
        XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="ContactpersoonKlant"]/*[local-name()="Aanhef"]'),
        XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="ContactpersoonKlant"]/*[local-name()="Voorletters"]'),
        XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="ContactpersoonKlant"]/*[local-name()="Tussenvoegsel"]'),
        XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="ContactpersoonKlant"]/*[local-name()="Achternaam"]'));
      ServiceOrder."E-Mail" := XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="ContactpersoonKlant"]/*[local-name()="Emailadres"]');
      ServiceOrder."Phone No." := DSPManagement.FindNodeContactpersoonKlantTelefoonnummer(DnXmlDocument);
      ServiceOrder."Mobile Phone No." := DSPManagement.FindNodeContactpersoonKlantMobielnummer(DnXmlDocument);
      ServiceOrder."Starting Date" :=  GetFirstPossibleStartingDate;

      ServiceOrder.Origin := ServiceOrder.Origin::DSP;
      ServiceOrder."Dsp Production Cluster Id" := DSPAssignment."Cluster Id";
      ServiceOrder."Dsp Cluster Id" := DSPAssignment."Cluster Id";
      ServiceOrder."Dsp Connection Object Id" := DSPAssignment."Connection Object Id";

      GetServiceLocation(ServiceLocation);
      IF (ServiceLocation."No." <> '') THEN
        ServiceOrder.VALIDATE("Service Location No.", ServiceLocation."No.");

      ServiceOrder."Territory Code" := DSPManagement.GetRegionCode(DSPAssignment."Agreement No.");
      ServiceOrder."VAT Prod. Posting Group" := DSPSetup."Default VAT Prod. Post. Group";
      ServiceOrder."Global Dimension 1 Code" := DSPAgreementSettings."Global Dimension 1 Code";
      ServiceOrder."Department Code (Other)" := DSPAgreementSettings."Global Dimension 1 Code";

      ServiceOrder.MODIFY(TRUE);
    END;

    EVENT DnXmlRootNode@1100528303::NodeInserting@94(sender@1100528301 : Variant;e@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DnXmlRootNode@1100528303::NodeInserted@95(sender@1100528301 : Variant;e@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DnXmlRootNode@1100528303::NodeRemoving@96(sender@1100528301 : Variant;e@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DnXmlRootNode@1100528303::NodeRemoved@97(sender@1100528301 : Variant;e@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DnXmlRootNode@1100528303::NodeChanging@98(sender@1100528301 : Variant;e@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DnXmlRootNode@1100528303::NodeChanged@99(sender@1100528301 : Variant;e@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    BEGIN
    END.
  }
}

