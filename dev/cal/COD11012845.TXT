OBJECT Codeunit 11012845 Create Service Control
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    TableNo=11012812;
    Permissions=TableData 11071756=rimd,
                TableData 11071757=rimd,
                TableData 11071758=rimd,
                TableData 11071759=rimd,
                TableData 11071760=rimd,
                TableData 11071761=rimd,
                TableData 11071762=rimd,
                TableData 11071763=rimd,
                TableData 11071764=rimd,
                TableData 11071765=rimd,
                TableData 11071766=rimd,
                TableData 11071988=rim,
                TableData 11071996=rim;
    OnRun=VAR
            ServiceContract@1100525000 : Record 11012812;
          BEGIN
            TestServiceControlMethod;
            ServiceContract.COPY(Rec);
            CreateSingleContractControl(ServiceContract."Control Build Date", ServiceContract."Control Build Time", ServiceContract);
          END;

  }
  CODE
  {
    VAR
      TmpLastSCCategoryControl@1100528606 : TEMPORARY Record 11071988;
      TmpLastSCCategoryPrognosisText@1100528607 : TEMPORARY Record 11071996;
      ProgressDialog@1100528600 : Dialog;
      Text001@1100528601 : TextConst 'DEU=Fortsetzung Aufbau öberwachung:\\Debitoren                    @1@@@@@@@@@@@\VertrÑge                 @2@@@@@@@@@@@\Modifikationen              @3@@@@@@@@@@@\Ersatz               @4@@@@@@@@@@@\ServiceauftrÑge (Åbrige)    @5@@@@@@@@@@@;ENU=Control Build Progress:\\Customers                @1@@@@@@@@@@@\Contracts                @2@@@@@@@@@@@\Modifications            @3@@@@@@@@@@@\Replacements             @4@@@@@@@@@@@\Service Order Other      @5@@@@@@@@@@@;NLD=Voortgang opbouw bewaking:\\Klanten                    @1@@@@@@@@@@@\Contracten                 @2@@@@@@@@@@@\Modificaties               @3@@@@@@@@@@@\Vervangingen               @4@@@@@@@@@@@\Serviceorders (overig)     @5@@@@@@@@@@@';
      Text002@1100528603 : TextConst 'DEU=Kein Berichtdatum angegeben;ENU=Select Reporting Date on Option Tab;NLD=Geen rapportagedatum opgegeven;NOR=Velg rapporteringsdato pÜ fanen alternativer;SVE=VÑlj rapporteringsdatum pÜ alternativfliken';
      Text003@1100528602 : TextConst 'DEU=muss sein: Auftrag, Fakturierung gestattet oder Abgelaufen;ENU=must be: Order, Invoicing Allowed or Expired;NLD=moet zijn: Opdracht, Factureren toegestaan of Vervallen;NOR=MÜ vëre: Ordre, Fakturering tillatt eller utgÜtt';
      Text004@1100528604 : TextConst 'DEU=Fortschritt:\Periode @1@@@@@@@@@@@\Vereinbarung @2@@@@@@@@@@@;ENU=Progress:\Period    @1@@@@@@@@@@@\Agreement @2@@@@@@@@@@@;NLD=Voortgang:\Periode   @1@@@@@@@@@@@\Afspraak  @2@@@@@@@@@@@';
      Text005@1100525000 : TextConst 'DEU=Sie mÅssen %1 angeben.;ENU=You must specify %1;NLD=%1 moet worden opgegeven;NOR=Du mÜ spesifisere %1.;SVE=Du mÜste specificera %1.';
      NoContractDetailProgress@1100525001 : Boolean;
      Text006@1100525002 : TextConst 'DEU="%1=''%2''";ENU="%1=''%2''";NLD="%1=''%2''";SVE="%1=''%2''"';
      Text007@1100525003 : TextConst 'DEU=in;ENU=in;NLD=in;SVE=i';
      Text008@1100528605 : TextConst 'DEU=Sie mÅssen die Servicekategorie angeben;ENU=You must specify Service Category;NLD=Servicecategorieân moeten worden opgegeven';

    PROCEDURE CreateServiceControl@1100526219(VAR ICustomer@1100526205 : Record 18;IReportingDate@1100526200 : Date;IReportingTime@1210190000 : Time;IInclExpiredContracts@1100528600 : Boolean);
    VAR
      RecordCount@1100528601 : Integer;
      RecordCounter@1100528602 : Integer;
    BEGIN
      IF NOT ICustomer.FINDSET THEN
        EXIT;
      TestServiceControlMethod;

      RemoveFinanceControlLines(IReportingDate);

      IF GUIALLOWED THEN
        ProgressDialog.OPEN(Text001);

      RecordCount := ICustomer.COUNT;
      REPEAT
        RecordCounter += 1;
        IF GUIALLOWED THEN BEGIN
          ProgressDialog.UPDATE(1, ROUND(RecordCounter * 9999 / RecordCount, 1));
          ProgressDialog.UPDATE(2, 0);
          ProgressDialog.UPDATE(3, 0);
          ProgressDialog.UPDATE(4, 0);
          ProgressDialog.UPDATE(5, 0);
        END;
        IF IReportingDate = 0D THEN
          ERROR(Text002);

        CreateContractControl(ICustomer."No.", IReportingDate, IReportingTime, IInclExpiredContracts);
        CreateModifications(ICustomer, IReportingDate, IReportingTime);
        CreateReplacements(ICustomer, IReportingDate, IReportingTime);
        CreateServiceOrderOther(ICustomer, IReportingDate, IReportingTime);
      UNTIL ICustomer.NEXT = 0;
      CreateContractControl('', IReportingDate, IReportingTime, IInclExpiredContracts);
      IF GUIALLOWED THEN
        ProgressDialog.CLOSE;
    END;

    LOCAL PROCEDURE CreateContractControl@1100526200(ICustomerNo@1100526206 : Code[20];IReportingDate@1100526212 : Date;IReportingTime@1210190000 : Time;IInclExpiredContracts@1100528600 : Boolean);
    VAR
      ServiceContract@1100526209 : Record 11012812;
      RecordCount@1100528613 : Integer;
      RecordCounter@1100528614 : Integer;
    BEGIN
      ServiceContract.SETCURRENTKEY("Customer No.");
      ServiceContract.SETRANGE("Customer No.",  ICustomerNo);
      ServiceContract.SETFILTER("Starting Date", '<>%1', 0D);
      IF IInclExpiredContracts THEN
        ServiceContract.SETFILTER(Status, '%1|%2|%3', ServiceContract.Status::Order, ServiceContract.Status::"Invoicing Allowed", ServiceContract.Status::Expired)
      ELSE
        ServiceContract.SETFILTER(Status, '%1|%2', ServiceContract.Status::Order, ServiceContract.Status::"Invoicing Allowed");
      IF ServiceContract.FINDSET THEN BEGIN
        RecordCount := ServiceContract.COUNT;
        REPEAT
          RecordCounter += 1;
          IF GUIALLOWED THEN
            ProgressDialog.UPDATE(2, ROUND(RecordCounter * 9999 / RecordCount, 1));

          CreateControlWithLog(ServiceContract, IReportingDate, IReportingTime, FALSE);
        UNTIL ServiceContract.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CreateSingleContractControl@1100528608(IReportingDate@1100528607 : Date;IReportingTime@1210190001 : Time;IServiceContract@1100528600 : Record 11012812) : Boolean;
    VAR
      ContractControlPeriod@1100528601 : Record 11071746;
      ServiceOrder@1100528613 : Record 11012823;
      ServiceOrderObject@1100528618 : Record 11071724;
      ServiceContractControl@1100528615 : Record 11071762;
      ServiceControlPeriod@1210190000 : Record 11071755;
      ServiceContractCtrlPeriod@1100409000 : Record 11071746;
      ServiceContractCtrlBudget@1100525006 : Record 11071759;
      GetMaintenanceSalesAndCost@1100528603 : Codeunit 11012827;
      NoOfDaysYear@1100528602 : Integer;
      StartingDateControlPeriod@1100528605 : Date;
      EndingDateControlPeriod@1100528604 : Date;
      BudgetLineType@1100525005 : 'Budget,Budget Calls,Budget Additional,Revenue Calls,Revenue Additional,Revenue ';
      Work@1100528614 : ' ,Contract,Modification,Replacement';
      SCControlCreated@1100528616 : Boolean;
      CreatePeriodsUntil@1100409001 : Date;
      RecordCount@1100528611 : Integer;
      RecordCounter@1100528612 : Integer;
      LaborAmount@1100525000 : Decimal;
      MaterialAmount@1100528606 : Decimal;
      SubcontractingAmount@1100528609 : Decimal;
      PlantAmount@1100528610 : Decimal;
      SundryAmount@1100528617 : Decimal;
      Hours@1100525001 : Decimal;
      TotalCost@1100525002 : Decimal;
      SurchargeAmount@1100525003 : Decimal;
      FinishedPercentage@1100525004 : Decimal;
      AdditionalCost@1100528608 : Boolean;
    BEGIN
      SaveLastSCCategoryControl(IReportingDate, IServiceContract."No.");
      RemoveSCControlLines(IReportingDate, IServiceContract."No.");

      IServiceContract.SETRECFILTER;
      IF NOT IServiceContract.FINDFIRST THEN EXIT;
      IServiceContract.TESTFIELD("Control Period Interval");
      IServiceContract.TESTFIELD("Starting Date");
      IServiceContract.TESTFIELD("Starting Date Control Period");
      IF NOT (IServiceContract.Status IN [
        IServiceContract.Status::Order, IServiceContract.Status::"Invoicing Allowed", IServiceContract.Status::Expired]) THEN
        IServiceContract.FIELDERROR(Status, Text003);
      IF IServiceContract."Ending Date" = 0D THEN
        CreatePeriodsUntil := CALCDATE(IServiceContract."Control Period Interval", IReportingDate)
      ELSE
        CreatePeriodsUntil := IServiceContract."Ending Date";
      ServiceContractCtrlPeriod.UpdateControlPeriodsUntil(IServiceContract."No.", CreatePeriodsUntil, TRUE);

      ServiceOrder.SETCURRENTKEY("Service Contract No.");
      ContractControlPeriod.SETRANGE("Service Contract No.", IServiceContract."No.");
      ContractControlPeriod.SETRANGE("Date Finished", 0D);
      ContractControlPeriod.SETFILTER("Starting Date", '<>%1', 0D);
      ContractControlPeriod.SETFILTER("Ending Date", '<>%1', 0D);
      IF ContractControlPeriod.FINDSET THEN BEGIN
        RecordCount := ContractControlPeriod.COUNT;
        IF GUIALLOWED AND NOT NoContractDetailProgress THEN
          ProgressDialog.OPEN(Text004);
        REPEAT
          RecordCounter += 1;
          IF GUIALLOWED AND NOT NoContractDetailProgress THEN
            ProgressDialog.UPDATE(1, ROUND(RecordCounter * 9999 / RecordCount, 1));

          NoOfDaysYear := GetMaintenanceSalesAndCost.NoOfDaysPerYear(ContractControlPeriod."Starting Date");
          StartingDateControlPeriod := ContractControlPeriod."Starting Date";
          EndingDateControlPeriod := ContractControlPeriod."Ending Date";

          CreateMaintenance(
            IServiceContract, IReportingDate, IReportingTime, ContractControlPeriod.Code, StartingDateControlPeriod, EndingDateControlPeriod, NoOfDaysYear,
            IServiceContract."Customer No.", IServiceContract."Global Dimension 1 Code", IServiceContract."Contract Group");

          //Create Control Lines from Call Orders and Additional Orders
          ServiceOrder.SETRANGE("Service Contract No.", IServiceContract."No.");
          ServiceOrder.SETRANGE("Service Control Period Date", StartingDateControlPeriod, EndingDateControlPeriod);
          ServiceOrder.SETFILTER("Source Type", '%1|%2', ServiceOrder."Source Type"::Call, ServiceOrder."Source Type"::Direct);
          ServiceOrder.SETFILTER(Status, '<>%1', ServiceOrder.Status::Cancelled);
          IF ServiceOrder.FINDSET THEN
            REPEAT
              InsertSOControlLine(
                IReportingDate, IReportingTime, ServiceOrder."No.", Work::Contract, IServiceContract."No.",
                ServiceOrder."Service Control Period Date", ServiceOrder."Source Type", IServiceContract."Customer No.",
                IServiceContract."Global Dimension 1 Code", IServiceContract."Contract Group", '', ServiceOrder.GetServiceCategory);
            UNTIL ServiceOrder.NEXT = 0;

          //Create Control Lines Contract Orders
          ServiceOrder.SETRANGE("Service Contract No.", IServiceContract."No.");
          ServiceOrder.SETRANGE("Service Control Period Date", StartingDateControlPeriod, EndingDateControlPeriod);
          ServiceOrder.SETRANGE("Source Type", ServiceOrder."Source Type"::Contract);
          ServiceOrder.SETFILTER(Status, '<>%1', ServiceOrder.Status::Cancelled);
          IF ServiceOrder.FINDSET THEN
            REPEAT
              InsertSOControlLine(
                IReportingDate, IReportingTime, ServiceOrder."No.", Work::Contract, IServiceContract."No.",
                ServiceOrder."Service Control Period Date", ServiceOrder."Source Type", IServiceContract."Customer No.",
                IServiceContract."Global Dimension 1 Code", IServiceContract."Contract Group", '', ServiceOrder.GetServiceCategory);
              CLEAR(ServiceOrderObject);
              ServiceOrderObject.SETRANGE("Service Order No.", ServiceOrder."No.");
              IF NOT ServiceOrderObject.FINDSET THEN; //Could be no objects available with old service orders
              REPEAT
                FOR AdditionalCost := FALSE TO TRUE DO BEGIN
                  IF IServiceContract."Budget Based on" IN [
                    IServiceContract."Budget Based on"::"Maintenance Scheme", IServiceContract."Budget Based on"::"Category + Maintenance Scheme"]
                  THEN
                    CalcBudgetOfSO(
                      ServiceOrder."No.", ServiceOrder."Service Contract No.", ServiceOrderObject."Object No.", ServiceOrderObject."Maintenance Scheme",
                      AdditionalCost, LaborAmount, MaterialAmount, SubcontractingAmount, PlantAmount, SundryAmount, Hours, TotalCost,
                      SurchargeAmount, FinishedPercentage);
                  IF NOT AdditionalCost THEN
                    InsertSCBudgetLine(
                      IReportingDate, IServiceContract."No.", ServiceOrderObject."Object No.", ServiceOrder."No.", ServiceOrder."Service Control Period Date",
                      TotalCost, Hours, LaborAmount, SurchargeAmount, FinishedPercentage,
                      BudgetLineType::Budget, '', ServiceOrder.GetServiceCategory, ServiceOrder.Status <> ServiceOrder.Status::Finished,
                      '', '', ServiceContractCtrlBudget)
                  ELSE
                    IF (TotalCost <> 0) OR (LaborAmount <> 0) OR (Hours <> 0) THEN
                      InsertSOBudgetLine(
                        IReportingDate, ServiceOrder."No.", ServiceOrderObject."Object No.", ServiceOrderObject."Maintenance Scheme", 1,
                        ServiceOrder."Service Contract No.", ServiceOrder."Service Control Period Date", ServiceOrder."Source Type"::Contract, TotalCost, Hours, LaborAmount, SurchargeAmount,
                        FinishedPercentage, ServiceOrder."Customer No.", ServiceOrder."Global Dimension 1 Code",
                        IServiceContract."Contract Group", TRUE, 0, '');
                  IF NOT AdditionalCost THEN BEGIN
                    IF GetBudgetCostCalls(
                      IServiceContract."No.", ServiceOrder."Service Control Period Date", EndingDateControlPeriod,
                      LaborAmount, MaterialAmount, SubcontractingAmount, PlantAmount, SundryAmount, TotalCost, Hours, SurchargeAmount)
                    THEN BEGIN
                      ServiceContractCtrlBudget.INIT;
                        InsertSCBudgetLine(
                          IReportingDate, IServiceContract."No.", ServiceOrderObject."Object No.", ServiceOrder."No.", ServiceOrder."Service Control Period Date",
                          TotalCost, Hours, LaborAmount, SurchargeAmount, FinishedPercentage,
                          BudgetLineType::"Budget Calls", '', ServiceOrder.GetServiceCategory, ServiceOrder.Status <> ServiceOrder.Status::Finished,
                          '', '', ServiceContractCtrlBudget)
                    END;
                  END;
                END;
              UNTIL ServiceOrderObject.NEXT = 0;
            UNTIL ServiceOrder.NEXT = 0;
          InsertSCControlLine(
            IReportingDate, IReportingTime, IServiceContract."No.", ContractControlPeriod.Code, IServiceContract."Customer No.",
            IServiceContract."Global Dimension 1 Code", IServiceContract."Contract Group", ServiceContractControl);

          SCControlCreated := TRUE;
        UNTIL ContractControlPeriod.NEXT = 0;
        IF GUIALLOWED AND NOT NoContractDetailProgress THEN
          ProgressDialog.CLOSE;
      END;
      InsertSCCategoryControlLine(IReportingDate, IReportingTime, IServiceContract);

      InsertSCControlRevenueLine(IReportingDate, IServiceContract);
      InsertContractGroupControlLine(IReportingDate, IReportingTime, IServiceContract."Contract Group");
      InsertGlobalDim1ControlLine(IReportingDate, IReportingTime, IServiceContract."Global Dimension 1 Code");

      ServiceControlPeriod.SETRANGE("Date Finished", 0D);
      ServiceControlPeriod.SETFILTER("Starting Date", '<>%1', 0D);
      ServiceControlPeriod.SETFILTER("Ending Date", '<>%1', 0D);
      IF ServiceControlPeriod.FINDSET THEN BEGIN
        REPEAT
          InsertCustomerControlLine(IReportingDate, IReportingTime, IServiceContract."Customer No.", ServiceControlPeriod.Code);
        UNTIL ServiceControlPeriod.NEXT = 0;
      END;
      EXIT(SCControlCreated);
    END;

    LOCAL PROCEDURE CreateMaintenance@1100526212(IServiceContract@1100526203 : Record 11012812;IReportingDate@1100526208 : Date;IReportingTime@1210190000 : Time;IControlPeriodCode@1100528604 : Code[10];IDateFilterStart@1100526201 : Date;IDateFilterEnd@1100526200 : Date;INoOfDaysYear@1100526209 : Integer;ICustomerNo@1100526211 : Code[20];IGlobalDim1@1100526210 : Code[20];IContractGroup@1100526202 : Code[20]);
    VAR
      ContractObject@1100526204 : Record 11071702;
      ServiceContractCtrlBudget@1100528602 : Record 11071759;
      ServiceCategory@1100528601 : Record 11071985;
      NoDaysInt@1100526205 : Integer;
      Revenue@1100526206 : Decimal;
      GetMaintenanceSalesAndCost@1100526207 : Codeunit 11012827;
      BudgetLineType@1100528609 : 'Budget,Budget Calls,Budget Additional,Revenue Calls,Revenue Additional,Revenue';
      RevenueForCalls@1100528612 : Decimal;
      DateFilterEnd@1100525000 : Date;
      SourceType@1100528603 : 'Contract,Calls,Direct';
    BEGIN
      ServiceCategory.SETRANGE("Service Contract No.", IServiceContract."No.");
      //CASE IServiceContract."Budget Based on" OF
      //  IServiceContract."Budget Based on"::"Maintenance Scheme":
      IF NOT ServiceCategory.FINDSET THEN
        ServiceCategory.INIT;
      REPEAT
        Revenue :=
          GetMaintenanceSalesAndCost.CalculateContractRevenue(IServiceContract."No.", ServiceCategory.Code, IDateFilterStart, IDateFilterEnd);
        // Budget Revenue Calls
        RevenueForCalls := ROUND(Revenue * IServiceContract.GetPercentageShareCalls(IDateFilterEnd) / 100);

        IF RevenueForCalls <> 0 THEN
          InsertSCBudgetLine(
            IReportingDate, IServiceContract."No.", '', '', IDateFilterEnd, RevenueForCalls, 0, 0, 0, 0,
            BudgetLineType::"Revenue Calls", '', ServiceCategory.Code,
            TRUE, '', '', ServiceContractCtrlBudget); // Revenue (Calls)

        // Budget Revenue - Budget Revenue Calls
        IF Revenue - RevenueForCalls <> 0 THEN
          InsertSCBudgetLine(
            IReportingDate, IServiceContract."No.", '', '', IDateFilterEnd, Revenue - RevenueForCalls, 0, 0, 0, 0,
            BudgetLineType::Revenue, '', ServiceCategory.Code,
            TRUE, '', '', ServiceContractCtrlBudget); // Revenue

        CASE IServiceContract."Budget Based on" OF
          IServiceContract."Budget Based on"::"Maintenance Scheme":
            IF SCBudgetLinesVersionCallsExists(IServiceContract."No.", IDateFilterEnd) THEN
              InsertSCBudgetCalls(IReportingDate, IServiceContract."No.", IDateFilterStart, IDateFilterEnd);
          IServiceContract."Budget Based on"::"Category + Maintenance Scheme":
            FOR SourceType := SourceType::Calls TO SourceType::Direct DO
              InsertSCCategoryBudget(
                IReportingDate, IServiceContract."No.", ServiceCategory.Code, SourceType,
                IControlPeriodCode, IDateFilterStart, IDateFilterEnd);
          IServiceContract."Budget Based on"::Category:
            FOR SourceType := SourceType::Contract TO SourceType::Direct DO
              InsertSCCategoryBudget(
                IReportingDate, IServiceContract."No.", ServiceCategory.Code, SourceType,
                IControlPeriodCode, IDateFilterStart, IDateFilterEnd);
        END;
      UNTIL ServiceCategory.NEXT = 0;

      ContractObject.SETRANGE("Service Contract No.", IServiceContract."No.");
      ContractObject.SETFILTER("Starting Date", '<=%1', IDateFilterEnd);
      IF ContractObject.FINDSET THEN BEGIN
        REPEAT
          IF IServiceContract."Invoice Type" = IServiceContract."Invoice Type"::Dynamic THEN
            ContractObject.TESTFIELD("Invoice From");
          DateFilterEnd := IDateFilterEnd;
          IF (ContractObject."Ending Date" > 0D) AND (ContractObject."Ending Date" <= IDateFilterEnd) THEN
            DateFilterEnd := ContractObject."Ending Date";
          UpdateSCArrangements(ContractObject, DateFilterEnd);
        UNTIL ContractObject.NEXT = 0;
      END;

      CreateMaintenanceControl(IServiceContract, IReportingDate, IReportingTime, IDateFilterStart, DateFilterEnd, INoOfDaysYear, NoDaysInt);
    END;

    LOCAL PROCEDURE UpdateSCArrangements@1100528632(IContractObject@1100528600 : Record 11071702;IDateFilterEnd@1100528602 : Date);
    VAR
      ContractObjectMaintenance@1100528601 : Record 11071692;
    BEGIN
      ContractObjectMaintenance.SETRANGE("Service Contract No.", IContractObject."Service Contract No.");
      ContractObjectMaintenance.SETRANGE("Object No.", IContractObject."Service Object No.");
      IF ContractObjectMaintenance.FINDSET THEN
        REPEAT
          ContractObjectMaintenance.UpdateServiceContractArr(IDateFilterEnd, TRUE, FALSE, FALSE);
        UNTIL ContractObjectMaintenance.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateMaintenanceControl@1100526210(IServiceContract@1100526200 : Record 11012812;IReportingDate@1100526209 : Date;IReportingTime@1210190003 : Time;IDateFilterStart@1100526208 : Date;IDateFilterEnd@1100526207 : Date;INoOfDaysYear@1100526211 : Integer;INoDaysInt@1100526203 : Integer);
    VAR
      ServiceContractArrangement@1100526201 : Record 11071705;
      ServiceObject@1100526202 : Record 11071691;
      ServiceContractCtrlBudget@1100528608 : Record 11071759;
      ServiceOrder@1100526206 : Record 11012823;
      MaintenanceManagement@1100528600 : Codeunit 11012829;
      LaborAmount@1100528601 : Decimal;
      Hours@1100528602 : Decimal;
      Material@1100528603 : Decimal;
      Subcontracting@1100528604 : Decimal;
      Plant@1100528605 : Decimal;
      Sundry@1100528606 : Decimal;
      TotalCost@1100528607 : Decimal;
      SurchargeAmount@1100528610 : Decimal;
      FinishedPercentage@1100528617 : Decimal;
      BudgetLineType@1100528614 : 'Budget,Budget Calls,Budget Additional,Revenue Calls,Revenue Additional,Revenue ';
      BudgetPercReleased@1210190000 : Decimal;
      DepartmentCode@1100528620 : Code[20];
      RecordCount@1100528612 : Integer;
      RecordCounter@1100528609 : Integer;
      Discipline@1100528616 : Code[10];
      TradeSpeciality@1100528619 : Code[10];
    BEGIN
      BudgetPercReleased := GetRelPercBudgetPrognContract(IServiceContract, IReportingDate, IDateFilterStart, IDateFilterEnd);

      ServiceContractArrangement.SETRANGE("Service Contract No.", IServiceContract."No.");
      ServiceContractArrangement.SETRANGE("Theoretical Maintenance Date", IDateFilterStart, IDateFilterEnd);
      ServiceContractArrangement.SETRANGE(Cancelled, FALSE);
      ServiceContractArrangement.SETRANGE("Service Order No.", '');
      IF ServiceContractArrangement.FINDSET THEN BEGIN
        RecordCount := ServiceContractArrangement.COUNT;
        REPEAT
          LaborAmount := 0;
          Hours := 0;
          Material := 0;
          Subcontracting := 0;
          Sundry := 0;
          Plant := 0;
          TotalCost := 0;
          SurchargeAmount := 0;
          FinishedPercentage := 0;
          SurchargeAmount := 0;

          IF GUIALLOWED AND NOT NoContractDetailProgress THEN
            ProgressDialog.UPDATE(2, ROUND(RecordCounter * 9999 / RecordCount, 1));

          ServiceContractArrangement.CALCFIELDS("Planned Maintenance Date", "Service Package", "Maintenance Proposal No.");
          ServiceObject.GET(ServiceContractArrangement."Object No.");
          DepartmentCode := ServiceObject.GetDepartmentCode(IServiceContract."No.");

          CASE IServiceContract."Budget Based on" OF
            IServiceContract."Budget Based on"::"Maintenance Scheme",
            IServiceContract."Budget Based on"::"Category + Maintenance Scheme":
              BEGIN
                MaintenanceManagement.CalcBudgetLines2(
                  6, ServiceContractArrangement."Object No.", ServiceContractArrangement."Maintenance Scheme",
                  ServiceContractArrangement."Service Contract No.",
                  ServiceContractArrangement."Theoretical Maintenance Date", ServiceObject.Quantity, DepartmentCode, 2,
                  0, TRUE, ServiceOrder."Source Type"::Contract,
                  LaborAmount, Hours, Material, Subcontracting, Plant, Sundry, TotalCost, SurchargeAmount);
                FinishedPercentage := ProgressFinished(ServiceContractArrangement.Finished);
              END;
          END;

          ServiceContractArrangement.GetDisciplineTradeSpeciality(Discipline, TradeSpeciality);
          InsertSCBudgetLine(
            IReportingDate, ServiceContractArrangement."Service Contract No.", ServiceContractArrangement."Object No.",
            ServiceContractArrangement."Service Order No.", ServiceContractArrangement."Theoretical Maintenance Date",
            TotalCost, Hours, LaborAmount, SurchargeAmount, FinishedPercentage, BudgetLineType::Budget,
            ServiceContractArrangement."Maintenance Proposal No.", ServiceContractArrangement."Service Category",
            TRUE, Discipline, TradeSpeciality, ServiceContractCtrlBudget);

          // Budget Cost Calls
          IF GetBudgetCostCalls(
            ServiceContractArrangement."Service Contract No.", ServiceContractArrangement."Theoretical Maintenance Date", IDateFilterEnd,
            LaborAmount, Material, Subcontracting, Plant, Sundry, TotalCost, Hours, SurchargeAmount)
          THEN BEGIN
            ServiceContractCtrlBudget.INIT;
            InsertSCBudgetLine(
              IReportingDate, IServiceContract."No.", ServiceContractArrangement."Object No.", '',
              ServiceContractArrangement."Theoretical Maintenance Date",
              TotalCost, Hours, LaborAmount, SurchargeAmount,
              BudgetPercReleased, BudgetLineType::"Budget Calls",
              ServiceContractArrangement."Maintenance Proposal No.", ServiceContractArrangement."Service Category",
              TRUE, Discipline, TradeSpeciality, ServiceContractCtrlBudget);
          END;

          // Additional Cost go to Additional
          CASE IServiceContract."Budget Based on" OF
            IServiceContract."Budget Based on"::"Maintenance Scheme",
            IServiceContract."Budget Based on"::"Category + Maintenance Scheme":
              BEGIN
                LaborAmount := 0;
                Hours := 0;
                Material := 0;
                Subcontracting := 0;
                Plant := 0;
                Sundry := 0;
                TotalCost := 0;
                SurchargeAmount := 0;
                MaintenanceManagement.CalcBudgetLines2(
                  6, ServiceContractArrangement."Object No.", ServiceContractArrangement."Maintenance Scheme",
                  ServiceContractArrangement."Service Contract No.",
                  ServiceContractArrangement."Theoretical Maintenance Date", ServiceObject.Quantity, DepartmentCode, 1,
                  0, TRUE, ServiceOrder."Source Type"::Contract,
                  LaborAmount, Hours, Material, Subcontracting, Plant, Sundry, TotalCost, SurchargeAmount);
                FinishedPercentage := ProgressFinished(ServiceContractArrangement.Finished);
                IF (TotalCost <> 0) OR (Hours <> 0) OR (LaborAmount <> 0) OR (SurchargeAmount <> 0) THEN
                  InsertSOBudgetLine(
                    IReportingDate, '', ServiceContractArrangement."Object No.", ServiceContractArrangement."Maintenance Scheme", 1,
                    IServiceContract."No.", IDateFilterStart, ServiceOrder."Source Type"::Contract, TotalCost, Hours, LaborAmount, SurchargeAmount,
                    FinishedPercentage, IServiceContract."Customer No.", IServiceContract."Global Dimension 1 Code",
                    IServiceContract."Contract Group", TRUE, 0, ServiceContractArrangement."Service Category");
                  IF GetBudgetCostCalls(
                    ServiceContractArrangement."Service Contract No.", ServiceContractArrangement."Theoretical Maintenance Date", IDateFilterEnd,
                    LaborAmount, Material, Subcontracting, Plant, Sundry, TotalCost, Hours, SurchargeAmount)
                  THEN
                    InsertSOBudgetLine(
                      IReportingDate, '', ServiceContractArrangement."Object No.", ServiceContractArrangement."Maintenance Scheme", 1,
                      IServiceContract."No.", IDateFilterStart, ServiceOrder."Source Type"::Contract, TotalCost, Hours, LaborAmount, SurchargeAmount,
                      FinishedPercentage, IServiceContract."Customer No.", IServiceContract."Global Dimension 1 Code",
                      IServiceContract."Contract Group", TRUE, 0, ServiceContractArrangement."Service Category");
              END;
          END;
          RecordCounter += 1;
        UNTIL ServiceContractArrangement.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CreateModifications@1100526206(ICustomer@1100526204 : Record 18;IReportingDate@1100526202 : Date;IReportingTime@1210190001 : Time);
    VAR
      ServiceControlPeriod@1100528613 : Record 11071755;
      ObjectModificationLine@1100526205 : Record 11071701;
      ObjectModification@1100526206 : Record 11071700;
      ServiceOrder@1100526207 : Record 11012823;
      ServiceObject@1100528615 : Record 11071691;
      MaintenanceManagement@1100528600 : Codeunit 11012829;
      Work@1100528612 : ' ,Contract,Modification,Replacement';
      LaborAmount@1100528607 : Decimal;
      Hours@1100528606 : Decimal;
      Material@1100528605 : Decimal;
      Subcontracting@1100528604 : Decimal;
      Plant@1100528603 : Decimal;
      Sundry@1100528602 : Decimal;
      TotalCost@1100528601 : Decimal;
      SurchargeAmount@1100528608 : Decimal;
      BudgetLineType@1100528609 : 'Budget,Budget Calls,Budget Additional,Revenue Calls,Revenue Additional,Revenue ';
      RecordCount@1100528610 : Integer;
      RecordCounter@1100528611 : Integer;
      DepartmentCode@1100528616 : Code[20];
    BEGIN
      ServiceControlPeriod.SETRANGE("Date Finished", 0D);
      ServiceControlPeriod.SETFILTER("Starting Date", '<>%1', 0D);
      ServiceControlPeriod.SETFILTER("Ending Date", '<>%1', 0D);
      IF NOT ServiceControlPeriod.FINDFIRST THEN EXIT;
      REPEAT
        InsertCustomerControlLine(IReportingDate, IReportingTime, ICustomer."No.", ServiceControlPeriod.Code);
        ObjectModificationLine.SETFILTER("Execution Date", ServiceControlPeriod.GetControlPeriodFilterText);
        ObjectModificationLine.SETRANGE("Customer No.", ICustomer."No.");
        IF ObjectModificationLine.FINDFIRST THEN BEGIN
          InsertModificationControlLine(
            IReportingDate, IReportingTime, ObjectModificationLine."Modification No.", ServiceControlPeriod.Code);
          RecordCount := ObjectModificationLine.COUNT;
          REPEAT
            RecordCounter += 1;
            IF GUIALLOWED THEN
              ProgressDialog.UPDATE(3, ROUND(RecordCounter * 9999 / RecordCount, 1));

            ObjectModification.GET(ObjectModificationLine."Modification No.");
            IF NOT ServiceObject.GET(ObjectModificationLine."Object No.") THEN
              ServiceObject.INIT;
            DepartmentCode :=ServiceObject.GetDepartmentCode(ObjectModificationLine."Service Contract No.");

            SurchargeAmount := 0;
            MaintenanceManagement.CalcBudgetLines2(
              1, ObjectModificationLine."Modification No.", '', '', ObjectModificationLine."Execution Date",
              ObjectModificationLine."Object Quantity", DepartmentCode, 1,
              0, TRUE, ServiceOrder."Source Type"::Modification,
              LaborAmount, Hours, Material, Subcontracting, Plant, Sundry, TotalCost, SurchargeAmount);

            ObjectModificationLine.CALCFIELDS("Service Order Status", Finished);
            IF ServiceOrder.GET(ObjectModificationLine."Service Order No.") THEN BEGIN
              IF ServiceOrder.Status <> ServiceOrder.Status::Cancelled THEN BEGIN
                InsertSOControlLine(
                  IReportingDate, IReportingTime, ObjectModificationLine."Service Order No.", Work::Modification,
                  ObjectModificationLine."Modification No.", ObjectModificationLine."Execution Date",
                  ServiceOrder."Source Type", ICustomer."No.", ServiceOrder."Global Dimension 1 Code", '', '', ServiceOrder."Service Category");
              END;
            END ELSE
              InsertModBudgetLine(
                IReportingDate, ObjectModificationLine."Modification No.", ObjectModificationLine."Execution Date",
                TotalCost, Hours, LaborAmount, ProgressFinished(ObjectModificationLine.Finished), ICustomer."No.",
                '', BudgetLineType::Budget);
          UNTIL ObjectModificationLine.NEXT = 0;
        END;
      UNTIL ServiceControlPeriod.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateReplacements@1100526238(ICustomer@1100526203 : Record 18;IReportingDate@1100526200 : Date;IReportingTime@1210190001 : Time);
    VAR
      ServiceControlPeriod@1100528608 : Record 11071755;
      ReplacementLine@1100526205 : Record 11071710;
      StandardObject@1100526209 : Record 11020334;
      ServiceOrder@1100526211 : Record 11012823;
      ServiceObject@1100528617 : Record 11071691;
      MaintenanceManagement@1100528600 : Codeunit 11012829;
      Work@1100528614 : ' ,Contract,Modification,Replacement';
      LaborAmount@1100528607 : Decimal;
      Hours@1100528606 : Decimal;
      Material@1100528605 : Decimal;
      Subcontracting@1100528604 : Decimal;
      Plant@1100528603 : Decimal;
      Sundry@1100528602 : Decimal;
      TotalCost@1100528601 : Decimal;
      SurchargeAmount@1100528613 : Decimal;
      BudgetLineType@1100528609 : 'Budget,Budget Calls,Budget Additional,Revenue Calls,Revenue Additional,Revenue ';
      RecordCount@1100528611 : Integer;
      RecordCounter@1100528612 : Integer;
      DepartmentCode@1100528618 : Code[20];
    BEGIN
      ServiceControlPeriod.SETRANGE("Date Finished", 0D);
      ServiceControlPeriod.SETFILTER("Starting Date", '<>%1', 0D);
      ServiceControlPeriod.SETFILTER("Ending Date", '<>%1', 0D);
      IF NOT ServiceControlPeriod.FINDFIRST THEN EXIT;
      REPEAT
        InsertCustomerControlLine(IReportingDate, IReportingTime, ICustomer."No.", ServiceControlPeriod.Code);
        ReplacementLine.SETRANGE("Customer No.", ICustomer."No.");
        ReplacementLine.SETFILTER("Replacement Date", ServiceControlPeriod.GetControlPeriodFilterText);
        IF ReplacementLine.FINDSET THEN BEGIN
          RecordCount := ReplacementLine.COUNT;
          REPEAT
            InsertReplacementControlLine(IReportingDate, IReportingTime, ReplacementLine."Replacement No.", ServiceControlPeriod.Code);
            IF NOT ServiceObject.GET(ReplacementLine."Object No.") THEN
              ServiceObject.INIT;
            DepartmentCode := ServiceObject.GetDepartmentCode(ReplacementLine."Contract No. Replacement");

            RecordCounter += 1;
            IF GUIALLOWED THEN
              ProgressDialog.UPDATE(4, ROUND(RecordCounter * 9999 / RecordCount, 1));

            ReplacementLine.CALCFIELDS("Standard Object No.", "Service Order Status", Finished);
            SurchargeAmount := 0;
            MaintenanceManagement.CalcBudgetLines2(
              3, ReplacementLine."Standard Object No.", '', '', ReplacementLine."Replacement Date",
              ReplacementLine."Object Quantity", DepartmentCode, 1,
              0, TRUE, ServiceOrder."Source Type"::Replacement,
              LaborAmount, Hours, Material, Subcontracting, Plant, Sundry, TotalCost, SurchargeAmount);

            StandardObject.GET(ReplacementLine."Standard Object No.");
            IF ServiceOrder.GET(ReplacementLine."Service Order No.") THEN BEGIN
              IF ServiceOrder.Status <> ServiceOrder.Status::Cancelled THEN BEGIN
                InsertSOControlLine(
                  IReportingDate, IReportingTime, ReplacementLine."Service Order No.", Work::Replacement,
                  ReplacementLine."Replacement No.", ReplacementLine."Replacement Date", ServiceOrder."Source Type",
                  ServiceOrder."Customer No.", ServiceOrder."Global Dimension 1 Code", '', '', ServiceOrder."Service Category");
              END;
            END ELSE
              InsertReplBudgetLine(
                IReportingDate, ReplacementLine."Replacement No.", ReplacementLine."Replacement Date",
                TotalCost, Hours, LaborAmount, ProgressFinished(ReplacementLine.Finished), ICustomer."No.",
                '', BudgetLineType::Budget);

          UNTIL ReplacementLine.NEXT = 0;
        END;
      UNTIL ServiceControlPeriod.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateServiceOrderOther@1100526209(ICustomer@1100526208 : Record 18;IReportingDate@1100526205 : Date;IReportingTime@1210190000 : Time);
    VAR
      ServiceControlPeriod@1100528600 : Record 11071755;
      ServiceOrder@1100526200 : Record 11012823;
      Work@1100526201 : ' ,Contract,Modification,Replacement';
      RecordCount@1100528601 : Integer;
      RecordCounter@1100528602 : Integer;
    BEGIN
      ServiceControlPeriod.SETRANGE("Date Finished", 0D);
      ServiceControlPeriod.SETFILTER("Starting Date", '<>%1', 0D);
      ServiceControlPeriod.SETFILTER("Ending Date", '<>%1', 0D);
      IF NOT ServiceControlPeriod.FINDSET THEN EXIT;
      REPEAT
        InsertCustomerControlLine(IReportingDate, IReportingTime, ICustomer."No.", ServiceControlPeriod.Code);

        ServiceOrder.SETCURRENTKEY("Customer No.");
        ServiceOrder.SETRANGE("Customer No.", ICustomer."No.");
        ServiceOrder.SETFILTER("Service Control Period Date", ServiceControlPeriod.GetControlPeriodFilterText);
        ServiceOrder.SETFILTER("Source Type", '%1|%2', ServiceOrder."Source Type"::Call, ServiceOrder."Source Type"::Direct);
        ServiceOrder.SETFILTER("Service Contract No.", '%1', '');
        IF ServiceOrder.FINDSET THEN BEGIN
          RecordCount := ServiceOrder.COUNT;
          REPEAT
            RecordCounter += 1;
            IF GUIALLOWED THEN
              ProgressDialog.UPDATE(5, ROUND(RecordCounter * 9999 / RecordCount, 1));

            InsertSOControlLine(
              IReportingDate, IReportingTime, ServiceOrder."No.", Work::" ", ServiceOrder."No.",
              ServiceOrder."Service Control Period Date", ServiceOrder."Source Type", ServiceOrder."Customer No.",
              ServiceOrder."Global Dimension 1 Code", '', '', ServiceOrder."Service Category");
          UNTIL ServiceOrder.NEXT = 0;
        END;
      UNTIL ServiceControlPeriod.NEXT = 0;
    END;

    LOCAL PROCEDURE InsertSOBudgetLine@1100526204(IReportingDate@1100528602 : Date;IServiceOrderNo@1100528603 : Code[20];IObjectNo@1100528605 : Code[20];IMaintenanceScheme@1100528606 : Code[20];IWork@1100526215 : ' ,Contract,Modification,Replacement';INo@1100526204 : Code[20];IServiceControlPeriodDate@1100526206 : Date;ISourceType@1100528604 : Option;IAmount@1100526201 : Decimal;IHours@1100526203 : Decimal;ILaborAmount@1100526208 : Decimal;ISurcharge@1100528608 : Decimal;IFinishedPerc@1100528601 : Decimal;ICustomerNo@1100526212 : Code[20];IGlobalDim1Cde@1100526217 : Code[20];IContractGroupCde@1100526218 : Code[20];IAdditional@1210190000 : Boolean;IBudgetType@1210190001 : 'Budget,Revenue';IServiceCategory@1100528609 : Code[10]);
    VAR
      ServiceOrderControlBudget@1100526209 : Record 11071757;
      ServiceOrder@1100528600 : Record 11012823;
      ServiceContract@1100528607 : Record 11012812;
      LineNo@1100526214 : Integer;
    BEGIN
      ServiceOrderControlBudget.SETRANGE("Reporting Date", IReportingDate);
      ServiceOrderControlBudget.SETRANGE("Service Order No.", IServiceOrderNo);
      IF ServiceOrderControlBudget.FINDLAST THEN
        LineNo := ServiceOrderControlBudget."Line No." + 10000
      ELSE
        LineNo := 10000;

      IF ServiceOrder.GET(IServiceOrderNo) THEN
        IServiceControlPeriodDate := ServiceOrder."Service Control Period Date";

      ServiceOrderControlBudget.RESET;
      ServiceOrderControlBudget.INIT;
      ServiceOrderControlBudget."Reporting Date" := IReportingDate;
      ServiceOrderControlBudget.VALIDATE("Service Order No.", IServiceOrderNo);
      IF ServiceContract.IsAlwaysCloseOrdersAllowed(ServiceOrder."Service Contract No.", ServiceOrder."Source Type") THEN
        ServiceOrderControlBudget.Status := ServiceOrder.Status::Finished
      ELSE
        ServiceOrderControlBudget.Status := ServiceOrder.Status;
      ServiceOrderControlBudget."Source Type" := ISourceType;
      ServiceOrderControlBudget."Service Control Period Date" := IServiceControlPeriodDate;
      ServiceOrderControlBudget."Line No." := LineNo;
      ServiceOrderControlBudget.Work := IWork;
      ServiceOrderControlBudget.VALIDATE("No.", INo);
      ServiceOrderControlBudget.Amount := IAmount - ILaborAmount;
      ServiceOrderControlBudget.Finished := IFinishedPerc = 100;
      ServiceOrderControlBudget."Allowed Amount" := (ServiceOrderControlBudget.Amount / 100) * IFinishedPerc;
      ServiceOrderControlBudget."Customer No." := ICustomerNo;
      ServiceOrderControlBudget."Global Dimension 1 Code" := IGlobalDim1Cde;
      ServiceOrderControlBudget."Contract Group" := IContractGroupCde;
      ServiceOrderControlBudget.Additional :=
        IAdditional OR ((ISourceType = ServiceOrder."Source Type"::Direct) AND (IWork = IWork::Contract));
      ServiceOrderControlBudget.Surcharge := FALSE;
      ServiceOrderControlBudget."Budget Type" := IBudgetType;
      IF ServiceOrder.GET(IServiceOrderNo) THEN BEGIN
        ServiceOrderControlBudget.Discipline := ServiceOrder.Discipline;
        ServiceOrderControlBudget."Trade Speciality" := ServiceOrder."Trade Speciality";
        ServiceOrderControlBudget."Territory Code" := ServiceOrder."Territory Code";
        ServiceOrderControlBudget."Service Location No." := ServiceOrder."Service Location No.";
      END;
      ServiceOrderControlBudget."Service Object No." := IObjectNo;
      ServiceOrderControlBudget."Maintenance Scheme" := IMaintenanceScheme;
      IF IServiceCategory = '' THEN
        IServiceCategory := ServiceOrder."Service Category";
      ServiceOrderControlBudget."Service Category" := IServiceCategory;
      ServiceOrderControlBudget."Base Service Order" := ServiceOrder."Base Service Order";
      ServiceOrderControlBudget.INSERT(TRUE);

      IF ISurcharge <> 0 THEN BEGIN
        LineNo += 10000;
        ServiceOrderControlBudget."Line No." := LineNo;
        ServiceOrderControlBudget.Amount := ISurcharge;
        ServiceOrderControlBudget.Hours := 0;
        ServiceOrderControlBudget."Labor Amount" := 0;
        ServiceOrderControlBudget.Finished := IFinishedPerc = 100;
        ServiceOrderControlBudget."Allowed Amount" := (ServiceOrderControlBudget.Amount / 100) * IFinishedPerc;
        ServiceOrderControlBudget."Allowed Hours" := 0;
        ServiceOrderControlBudget."Allowed Labor Amount" := 0;
        ServiceOrderControlBudget.Surcharge := TRUE;
        ServiceOrderControlBudget.INSERT(TRUE);
      END;

      //Next ServiceOrderControlBudget is also needed for No. of Arrangements (Finished) and No. of Arrangements (Planned)
      IF NOT IAdditional THEN BEGIN
        LineNo += 10000;
        ServiceOrderControlBudget."Line No." := LineNo;
        ServiceOrderControlBudget.Amount := ILaborAmount;
        ServiceOrderControlBudget.Hours := IHours;
        ServiceOrderControlBudget."Labor Amount" := ILaborAmount;
        ServiceOrderControlBudget."Allowed Amount" := (ServiceOrderControlBudget.Amount / 100) * IFinishedPerc;
        ServiceOrderControlBudget."Allowed Hours" := (ServiceOrderControlBudget.Hours / 100) * IFinishedPerc;
        ServiceOrderControlBudget."Allowed Labor Amount" := (ServiceOrderControlBudget."Labor Amount" / 100) * IFinishedPerc;
        ServiceOrderControlBudget.Surcharge := FALSE;
        ServiceOrderControlBudget."Cost Type" := ServiceOrderControlBudget."Cost Type"::Labor;
        ServiceOrderControlBudget.INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE InsertSOControlLine@1100526202(IReportingDate@1100528602 : Date;IReportingTime@1210190000 : Time;IServiceOrderNo@1100528601 : Code[20];IWork@1100526207 : ' ,Contract,Modification,Replacement';INo@1100526202 : Code[20];IServiceControlPeriodeDate@1100528603 : Date;ISourceType@1100528600 : 'Call,Contract,Direct,Estimate,,,Modification,Replacement';ICustomerNo@1100526206 : Code[20];IGlobalDim1@1100526209 : Code[20];IContractGroup@1100526208 : Code[20];IBaseServiceOrderNo@1100528605 : Code[20];IServiceCategory@1100528606 : Code[10]);
    VAR
      ServiceOrderControl@1100526200 : Record 11071758;
      ServiceOrder@1100528604 : Record 11012823;
    BEGIN
      IF ServiceOrder.GET(IServiceOrderNo) THEN
        IServiceControlPeriodeDate := ServiceOrder."Service Control Period Date";

      ServiceOrderControl.SETRANGE("Reporting Date", IReportingDate);
      ServiceOrderControl.SETRANGE("Service Order No.", IServiceOrderNo);
      IF NOT ServiceOrderControl.ISEMPTY THEN
        EXIT;

      ServiceOrderControl.INIT;
      ServiceOrderControl."Reporting Date" := IReportingDate;
      ServiceOrderControl."Reporting Time" := IReportingTime;
      ServiceOrderControl."Service Order No." := IServiceOrderNo;
      ServiceOrderControl.Status := ServiceOrder.Status;
      ServiceOrderControl."Service Control Period Date" := IServiceControlPeriodeDate;
      ServiceOrderControl.Work := IWork;
      ServiceOrderControl."No." := INo;
      ServiceOrderControl."Customer No." := ICustomerNo;
      ServiceOrderControl."Global Dimension 1 Code" := IGlobalDim1;
      ServiceOrderControl."Contract Group" := IContractGroup;
      ServiceOrderControl."Source Type" := ISourceType;
      ServiceOrderControl."Service Category" := IServiceCategory;
      ServiceOrderControl."Actual Preclosure Result" := CalculatePreclosureAmountOrder(IServiceOrderNo);
      ServiceOrderControl."Paid Revenue" := CalculatePaidAmnt(IServiceOrderNo, 1, 0D, 0D);
      ServiceOrderControl.INSERT(TRUE);

      InsertGlobalDim1ControlLine(IReportingDate, IReportingTime, IGlobalDim1);

      CalculateOpenHours(
        IReportingDate, IServiceOrderNo, IServiceControlPeriodeDate, ISourceType, IWork, INo, ICustomerNo, IGlobalDim1, IContractGroup, TRUE);
      CalculateOpenHours(
        IReportingDate, IServiceOrderNo, IServiceControlPeriodeDate, ISourceType, IWork, INo, ICustomerNo, IGlobalDim1, IContractGroup, FALSE);

      CalculateOpenHoursSurcharge(
        IReportingDate, IServiceOrderNo, IServiceControlPeriodeDate, ISourceType, IWork, INo, ICustomerNo, IGlobalDim1, IContractGroup, TRUE);
      CalculateOpenHoursSurcharge(
        IReportingDate, IServiceOrderNo, IServiceControlPeriodeDate, ISourceType, IWork, INo, ICustomerNo, IGlobalDim1, IContractGroup, FALSE);

      CalculateActualCost(
        IReportingDate, IServiceOrderNo, IServiceControlPeriodeDate, ISourceType, IWork, INo, ICustomerNo, IGlobalDim1, IContractGroup, TRUE);
      CalculateActualCost(
        IReportingDate, IServiceOrderNo, IServiceControlPeriodeDate, ISourceType, IWork, INo, ICustomerNo, IGlobalDim1, IContractGroup, FALSE);

      CalculateOpenInventAmount(
        IReportingDate, IServiceOrderNo, IServiceControlPeriodeDate, ISourceType, IWork, INo, ICustomerNo, IGlobalDim1, IContractGroup, TRUE);
      CalculateOpenInventAmount(
        IReportingDate, IServiceOrderNo, IServiceControlPeriodeDate, ISourceType, IWork, INo, ICustomerNo, IGlobalDim1,
        IContractGroup, FALSE);

      CalculateOpenInventSurcharge(
        IReportingDate, IServiceOrderNo, IServiceControlPeriodeDate, ISourceType, IWork, INo, ICustomerNo, IGlobalDim1, IContractGroup, TRUE);
      CalculateOpenInventSurcharge(
        IReportingDate, IServiceOrderNo, IServiceControlPeriodeDate, ISourceType, IWork, INo, ICustomerNo, IGlobalDim1, IContractGroup, FALSE);

      CalculateOpenPurchase(
        IReportingDate, IServiceOrderNo, IServiceControlPeriodeDate, ISourceType, IWork, INo, ICustomerNo, IGlobalDim1, IContractGroup, TRUE);
      CalculateOpenPurchase(
        IReportingDate, IServiceOrderNo, IServiceControlPeriodeDate, ISourceType, IWork, INo, ICustomerNo, IGlobalDim1, IContractGroup, FALSE);

      CalculateReceivedNotInvoiced(
        IReportingDate, IServiceOrderNo, IServiceControlPeriodeDate, ISourceType, IWork, INo, ICustomerNo, IGlobalDim1, IContractGroup, TRUE);
      CalculateReceivedNotInvoiced(
        IReportingDate, IServiceOrderNo, IServiceControlPeriodeDate, ISourceType, IWork, INo, ICustomerNo, IGlobalDim1, IContractGroup, FALSE);

      CalculateOpenPurchaseOverhOpen(
        IReportingDate, IServiceOrderNo, IServiceControlPeriodeDate, ISourceType, IWork, INo, ICustomerNo, IGlobalDim1, IContractGroup, TRUE);
      CalculateOpenPurchaseOverhOpen(
        IReportingDate, IServiceOrderNo, IServiceControlPeriodeDate, ISourceType, IWork, INo, ICustomerNo, IGlobalDim1, IContractGroup, FALSE);

      CalculateOpenPurchaseOverhRnI(
        IReportingDate, IServiceOrderNo, IServiceControlPeriodeDate, ISourceType, IWork, INo, ICustomerNo, IGlobalDim1, IContractGroup, TRUE);
      CalculateOpenPurchaseOverhRnI(
        IReportingDate, IServiceOrderNo, IServiceControlPeriodeDate, ISourceType, IWork, INo, ICustomerNo, IGlobalDim1, IContractGroup, FALSE);

      CalculateRevenueServiceOrders(
        IReportingDate, IServiceOrderNo, IServiceControlPeriodeDate, ISourceType, IWork, INo, ICustomerNo, IGlobalDim1, IContractGroup, TRUE);
      CalculateRevenueServiceOrders(
        IReportingDate, IServiceOrderNo, IServiceControlPeriodeDate, ISourceType, IWork, INo, ICustomerNo, IGlobalDim1, IContractGroup, FALSE);

      CalculateInvoiceInProcess(
        IReportingDate, IServiceOrderNo, IServiceControlPeriodeDate, ISourceType, IWork, INo, ICustomerNo, IGlobalDim1, IContractGroup, TRUE);
      CalculateInvoiceInProcess(
        IReportingDate, IServiceOrderNo, IServiceControlPeriodeDate, ISourceType, IWork, INo, ICustomerNo, IGlobalDim1, IContractGroup, FALSE);

      CalculateCreditMemoInProcess(
        IReportingDate, IServiceOrderNo, IServiceControlPeriodeDate, ISourceType, IWork, INo, ICustomerNo, IGlobalDim1, IContractGroup, TRUE);
      CalculateCreditMemoInProcess(
        IReportingDate, IServiceOrderNo, IServiceControlPeriodeDate, ISourceType, IWork, INo, ICustomerNo, IGlobalDim1, IContractGroup, FALSE);

      IF (ISourceType = ISourceType::Direct) OR (IServiceCategory = '') THEN BEGIN
        CalculateBudget(
          IReportingDate, IServiceOrderNo, IServiceControlPeriodeDate, ISourceType, IWork, INo, ICustomerNo, IGlobalDim1, IContractGroup, TRUE);
        CalculateBudget(
          IReportingDate, IServiceOrderNo, IServiceControlPeriodeDate, ISourceType, IWork, INo, ICustomerNo, IGlobalDim1, IContractGroup, FALSE);
      END;

      IF ISourceType = ISourceType::Direct THEN
        CalculateBudgetRevenue(
          IReportingDate, IServiceOrderNo, IServiceControlPeriodeDate, ISourceType, IWork, INo, ICustomerNo, IGlobalDim1, IContractGroup);
    END;

    LOCAL PROCEDURE InsertSCBudgetLine@1100528603(IReportingDate@1100528602 : Date;IServiceContractNo@1100528603 : Code[20];IServiceObjectNo@1100528807 : Code[20];IServiceOrderNo@1100528608 : Code[20];IReferenceDate@1100528600 : Date;IAmount@1100526201 : Decimal;IHours@1100526203 : Decimal;ILaborAmount@1100526208 : Decimal;ISurchargeAmount@1100528616 : Decimal;IFinishedPerc@1100528601 : Decimal;IBudgetType@1100528604 : 'Budget,Budget Calls,Budget Additional,Revenue Calls,Revenue Additional,Revenue';IMaintenanceProposalCode@1100528610 : Code[20];IServiceCategory@1100528607 : Code[10];IUseInPreclosureResult@1100528907 : Boolean;IDiscipline@1100528615 : Code[10];ITradeSpeciality@1100528617 : Code[10];VAR OServiceContractCtrlBudget@1100528605 : Record 11071759);
    VAR
      ServiceContract@1100528800 : Record 11012812;
      ServiceContractCtrlBudget@1100528606 : Record 11071759;
      ServiceOrder@1100528614 : Record 11012823;
      ServiceLocation@1100528613 : Record 11012801;
      LineNo@1100528609 : Integer;
    BEGIN
      ServiceContractCtrlBudget.SETRANGE("Reporting Date", IReportingDate);
      ServiceContractCtrlBudget.SETRANGE("Service Contract No.", IServiceContractNo);
      IF ServiceContractCtrlBudget.FINDLAST THEN
        LineNo := ServiceContractCtrlBudget."Line No." + 10000
      ELSE
        LineNo := 10000;

      IF NOT ServiceOrder.GET(IServiceOrderNo) THEN
        ServiceOrder.INIT;

      ServiceContractCtrlBudget.RESET;
      ServiceContractCtrlBudget.INIT;
      ServiceContractCtrlBudget."Reporting Date" := IReportingDate;
      ServiceContractCtrlBudget.VALIDATE("Service Contract No.", IServiceContractNo);
      ServiceContractCtrlBudget.VALIDATE("Service Object No.", IServiceObjectNo);
      IF ServiceContractCtrlBudget."Service Location No." = '' THEN
        ServiceContractCtrlBudget."Service Location No." := ServiceOrder."Service Location No.";
      IF ServiceOrder.GET(IServiceOrderNo) THEN BEGIN
        ServiceContractCtrlBudget.Discipline := ServiceOrder.Discipline;
        ServiceContractCtrlBudget."Trade Speciality" := ServiceOrder."Trade Speciality";
        ServiceContractCtrlBudget."Territory Code" := ServiceOrder."Territory Code"
      END ELSE BEGIN
        ServiceContractCtrlBudget.Discipline := IDiscipline;
        ServiceContractCtrlBudget."Trade Speciality" := ITradeSpeciality;
        IF ServiceLocation.GET(ServiceContractCtrlBudget."Service Location No.") THEN
          ServiceContractCtrlBudget."Territory Code" := ServiceLocation."Territory Code";
      END;
      ServiceContractCtrlBudget."Reference Date" := IReferenceDate;
      ServiceContractCtrlBudget."Line No." := LineNo;
      ServiceContractCtrlBudget.Status := ServiceOrder.Status;
      IF ServiceOrder.GET(IServiceOrderNo) THEN BEGIN
        IF ServiceContract.IsAlwaysCloseOrdersAllowed(ServiceOrder."Service Contract No.", ServiceOrder."Source Type") THEN BEGIN
          ServiceContractCtrlBudget.Status := ServiceOrder.Status::Finished;
          IUseInPreclosureResult := FALSE;
        END;
        IF ServiceOrder."Base Service Order" THEN
          ServiceContractCtrlBudget."Budget Maintenance Source" := ServiceContractCtrlBudget."Budget Maintenance Source"::"Base Service Order"
        ELSE
          ServiceContractCtrlBudget."Budget Maintenance Source" := ServiceContractCtrlBudget."Budget Maintenance Source"::"Next Service Order";
      END ELSE BEGIN
        CASE IBudgetType OF
          IBudgetType::Budget:
            IF ServiceContract.IsAlwaysCloseOrdersAllowed(IServiceContractNo, ServiceOrder."Source Type"::Contract) THEN
              IUseInPreclosureResult := FALSE;
          IBudgetType::"Budget Calls":
            IF ServiceContract.IsAlwaysCloseOrdersAllowed(IServiceContractNo, ServiceOrder."Source Type"::Call) THEN
              IUseInPreclosureResult := FALSE;
        END;
        ServiceContractCtrlBudget."Budget Maintenance Source" := ServiceContractCtrlBudget."Budget Maintenance Source"::"Maintenance Scheme";
      END;
      ServiceContractCtrlBudget.Amount := IAmount;
      ServiceContractCtrlBudget.Hours := IHours;
      ServiceContractCtrlBudget."Labor Amount" := ILaborAmount;
      ServiceContractCtrlBudget."Amount (Other)" := IAmount - ILaborAmount;
      ServiceContractCtrlBudget.Finished := IFinishedPerc = 100;
      ServiceContractCtrlBudget."Allowed Amount" := (ServiceContractCtrlBudget.Amount / 100) * IFinishedPerc;
      ServiceContractCtrlBudget."Allowed Hours" := (ServiceContractCtrlBudget.Hours / 100) * IFinishedPerc;
      ServiceContractCtrlBudget."Allowed Labor Amount" := (ServiceContractCtrlBudget."Labor Amount" / 100) * IFinishedPerc;
      IF IUseInPreclosureResult THEN BEGIN
        ServiceContractCtrlBudget."Amount (Preclosure)" := ServiceContractCtrlBudget.Amount;
        ServiceContractCtrlBudget."Hours (Preclosure)" := ServiceContractCtrlBudget.Hours;
        ServiceContractCtrlBudget."Labor Amount (Preclosure)" := ServiceContractCtrlBudget."Labor Amount";
        ServiceContractCtrlBudget."Allowed Amount (Preclosure)" := ServiceContractCtrlBudget."Allowed Amount";
        ServiceContractCtrlBudget."Allowed Hours (Preclosure)" := ServiceContractCtrlBudget."Allowed Hours";
        ServiceContractCtrlBudget."Allowed Labor Amount (Precl.)" := ServiceContractCtrlBudget."Allowed Labor Amount";
      END;
      ServiceContractCtrlBudget."Budget Type" := IBudgetType;
      ServiceContractCtrlBudget."Service Order No." := IServiceOrderNo;
      ServiceContractCtrlBudget."Maintenance Proposal No." := IMaintenanceProposalCode;
      ServiceContractCtrlBudget."Service Category" := IServiceCategory;
      ServiceContractCtrlBudget.INSERT(TRUE);
      OServiceContractCtrlBudget := ServiceContractCtrlBudget;

      IF ISurchargeAmount <> 0 THEN BEGIN
        ServiceContractCtrlBudget."Line No." := LineNo + 1000;
        ServiceContractCtrlBudget.Amount := ISurchargeAmount;
        ServiceContractCtrlBudget."Amount (Other)" := ISurchargeAmount;
        ServiceContractCtrlBudget.Hours := 0;
        ServiceContractCtrlBudget."Labor Amount" := 0;
        ServiceContractCtrlBudget.Finished := IFinishedPerc = 100;
        ServiceContractCtrlBudget."Allowed Amount" := (ServiceContractCtrlBudget.Amount / 100) * IFinishedPerc;
        ServiceContractCtrlBudget."Allowed Hours" := (ServiceContractCtrlBudget.Hours / 100) * IFinishedPerc;
        ServiceContractCtrlBudget."Allowed Labor Amount" := (ServiceContractCtrlBudget."Labor Amount" / 100) * IFinishedPerc;
        IF IUseInPreclosureResult THEN BEGIN
          ServiceContractCtrlBudget."Amount (Preclosure)" := ServiceContractCtrlBudget.Amount;
          ServiceContractCtrlBudget."Hours (Preclosure)" := ServiceContractCtrlBudget.Hours;
          ServiceContractCtrlBudget."Labor Amount (Preclosure)" := ServiceContractCtrlBudget."Labor Amount";
          ServiceContractCtrlBudget."Allowed Amount (Preclosure)" := ServiceContractCtrlBudget."Allowed Amount";
          ServiceContractCtrlBudget."Allowed Hours (Preclosure)" := ServiceContractCtrlBudget."Allowed Hours";
          ServiceContractCtrlBudget."Allowed Labor Amount (Precl.)" := ServiceContractCtrlBudget."Allowed Labor Amount";
        END;
        ServiceContractCtrlBudget.Surcharge := TRUE;
        ServiceContractCtrlBudget."Budget Type" := IBudgetType;
        ServiceContractCtrlBudget.INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE InsertSCControlLine@1100528601(IReportingDate@1100528600 : Date;IReportingTime@1210190000 : Time;IServiceContractNo@1100528601 : Code[20];IControlPeriodCode@1100528602 : Code[10];ICustomerNo@1100528603 : Code[20];IGlobalDimension1Code@1100528604 : Code[20];IContractGroup@1100528605 : Code[20];VAR OServiceContractControl@1100528610 : Record 11071762);
    VAR
      ServiceContractControl@1100528607 : Record 11071762;
      ContractControlPeriod@1100528606 : Record 11071746;
      ServiceContract@1100528608 : Record 11012812;
      GetMaintenanceSalesAndCost@1100528609 : Codeunit 11012827;
      DummyAmount@1100528800 : Decimal;
    BEGIN
      ContractControlPeriod.GET(IServiceContractNo, IControlPeriodCode);
      ServiceContract.GET(IServiceContractNo);

      ServiceContractControl.INIT;
      ServiceContractControl."Reporting Date" := IReportingDate;
      ServiceContractControl."Reporting Time" := IReportingTime;
      ServiceContractControl."Service Contract No." := IServiceContractNo;
      ServiceContractControl.VALIDATE("Control Period Code", IControlPeriodCode);
      ServiceContractControl."Customer No." := ICustomerNo;
      ServiceContractControl."Global Dimension 1 Code" := IGlobalDimension1Code;
      ServiceContractControl."Contract Group" := IContractGroup;

      GetMaintenanceSalesAndCost.GetInstallmentAmountWithUpdate(ServiceContract,
        ServiceContractControl."Installment Amount", DummyAmount, ServiceContractControl."Contract Amount",
        ContractControlPeriod."Starting Date", ContractControlPeriod."Ending Date", TRUE);
      ServiceContractControl."Contract Revenue" :=
        CalculateRevenueContract(ServiceContract."No.", ContractControlPeriod."Starting Date",
          ContractControlPeriod."Ending Date", ServiceContractControl."Closed Contract Revenue");
      ServiceContractControl."Contract Revenue (Calls)" :=
        ROUND(
          ServiceContractControl."Contract Revenue" *
          ServiceContract.GetPercentageShareCalls(ContractControlPeriod."Ending Date") / 100);
      ServiceContractControl."Closed Contract Rev. (Calls)" :=
        ROUND(
          ServiceContractControl."Closed Contract Revenue" *
          ServiceContract.GetPercentageShareCalls(ContractControlPeriod."Ending Date") / 100);
      ServiceContractControl."Contract Revenue (Maint.)" :=
        ServiceContractControl."Contract Revenue" - ServiceContractControl."Contract Revenue (Calls)";
      ServiceContractControl."Closed Contract Rev. (Maint.)" :=
        ServiceContractControl."Closed Contract Revenue" - ServiceContractControl."Closed Contract Rev. (Calls)";

      IF ServiceContract."Invoice Type" = ServiceContract."Invoice Type"::Dynamic THEN
        ServiceContractControl."Dynamic Invoice Amount" :=
          GetMaintenanceSalesAndCost.CalculateContractRevenue(
            IServiceContractNo, '', ContractControlPeriod."Starting Date", ContractControlPeriod."Ending Date");

      ServiceContractControl."Actual Preclosure Result" :=
        CalculatePreclosureAmountContract(IServiceContractNo, ContractControlPeriod."Starting Date", ContractControlPeriod."Ending Date");

      ServiceContractControl."Paid Contract Revenue" :=
        CalculatePaidAmnt(IServiceContractNo, 0, ContractControlPeriod."Starting Date", ContractControlPeriod."Ending Date");
      ServiceContractControl."Paid Contract Rev. (Calls)" :=
        ROUND(
          ServiceContractControl."Paid Contract Revenue" *
          ServiceContract.GetPercentageShareCalls(ContractControlPeriod."Ending Date") / 100);
      ServiceContractControl."Paid Contract Rev. (Maint.)" :=
        ServiceContractControl."Paid Contract Revenue" - ServiceContractControl."Paid Contract Rev. (Calls)";

      ServiceContractControl.INSERT;

      OServiceContractControl := ServiceContractControl;
    END;

    LOCAL PROCEDURE InsertSCCategoryControlLine@1100528631(IReportingDate@1100528600 : Date;IReportingTime@1210190000 : Time;IServiceContract@1100528601 : Record 11012812);
    VAR
      ContractControlPeriod@1100528602 : Record 11071746;
      ServiceCategory@1100528603 : Record 11071985;
      SCCategoryControl@1100528607 : Record 11071988;
      ServiceContract@1100528608 : Record 11012812;
      GetMaintenanceSalesAndCost@1100528609 : Codeunit 11012827;
      DummyAmount@1100528800 : Decimal;
    BEGIN
      ServiceContract.GET(IServiceContract."No.");

      ContractControlPeriod.SETRANGE("Service Contract No.", IServiceContract."No.");
      ContractControlPeriod.SETRANGE("Date Finished", 0D);
      ContractControlPeriod.SETFILTER("Starting Date", '<>%1', 0D);
      ContractControlPeriod.SETFILTER("Ending Date", '<>%1', 0D);
      IF ContractControlPeriod.FINDSET THEN
        REPEAT
          ServiceCategory.SETRANGE("Service Contract No.", IServiceContract."No.");
          IF ServiceCategory.FINDSET THEN
            REPEAT
              SCCategoryControl.INIT;
              SCCategoryControl."Reporting Date" := IReportingDate;
              SCCategoryControl."Reporting Time" := IReportingTime;
              SCCategoryControl."Service Contract No." := ServiceContract."No.";
              SCCategoryControl."Service Category" := ServiceCategory.Code;
              SCCategoryControl.VALIDATE("Control Period Code", ContractControlPeriod.Code);
              SCCategoryControl."Customer No." := ServiceContract."Customer No.";
              SCCategoryControl."Global Dimension 1 Code" := ServiceContract."Global Dimension 1 Code";
              SCCategoryControl."Contract Group" := ServiceContract."Contract Group";

              GetMaintenanceSalesAndCost.GetInstallmentAmountByCategoryWithUpdate(ServiceContract,
                ServiceCategory.Code, SCCategoryControl."Installment Amount", DummyAmount, SCCategoryControl."Contract Amount",
                ContractControlPeriod."Starting Date", ContractControlPeriod."Ending Date", TRUE);
              SCCategoryControl."Contract Revenue" :=
                ROUND(CalculateRevenueContract(
                  ServiceContract."No.", ContractControlPeriod."Starting Date", ContractControlPeriod."Ending Date", SCCategoryControl."Closed Contract Revenue") *
                  ServiceContract.GetCategoryDivisionPercentage(ServiceCategory.Code, ContractControlPeriod."Ending Date") / 100);
              SCCategoryControl."Contract Revenue (Calls)" :=
                ROUND(
                  SCCategoryControl."Contract Revenue" *
                  ServiceContract.GetPercentageShareCalls(ContractControlPeriod."Ending Date") / 100);
              SCCategoryControl."Closed Contract Rev. (Calls)" :=
                ROUND(
                  SCCategoryControl."Closed Contract Revenue" *
                  ServiceContract.GetPercentageShareCalls(ContractControlPeriod."Ending Date") / 100);
              SCCategoryControl."Contract Revenue (Maint.)" :=
                SCCategoryControl."Contract Revenue" - SCCategoryControl."Contract Revenue (Calls)";
              SCCategoryControl."Closed Contract Rev. (Maint.)" :=
                SCCategoryControl."Closed Contract Revenue" - SCCategoryControl."Closed Contract Rev. (Calls)";

              IF ServiceContract."Invoice Type" = ServiceContract."Invoice Type"::Dynamic THEN
                SCCategoryControl."Dynamic Invoice Amount" :=
                  ROUND(GetMaintenanceSalesAndCost.CalculateContractRevenue(ServiceContract."No.",
                  ServiceCategory.Code, ContractControlPeriod."Starting Date", ContractControlPeriod."Ending Date") *
                  ServiceContract.GetCategoryDivisionPercentage(ServiceCategory.Code, ContractControlPeriod."Ending Date") / 100);
              DetermineLastPrognosisValues(SCCategoryControl);
              SCCategoryControl.INSERT(TRUE);
            UNTIL ServiceCategory.NEXT = 0;
        UNTIL ContractControlPeriod.NEXT = 0;
    END;

    LOCAL PROCEDURE InsertSCControlRevenueLine@1100528613(IReportingDate@1100528601 : Date;IServiceContract@1100528600 : Record 11012812);
    VAR
      ServiceContract@1100528605 : Record 11012812;
      ServiceControlPeriod@1100528603 : Record 11071755;
      ServiceContractControlRev@1100528602 : Record 11071786;
      ServiceCategory@1100528606 : Record 11071985;
      GetMaintenanceSalesAndCost@1100528604 : Codeunit 11012827;
      DummyAmount@1100528800 : Decimal;
      DivisionPercentage@1100528607 : Decimal;
    BEGIN
      ServiceContract.GET(IServiceContract."No.");
      ServiceControlPeriod.SETRANGE("Date Finished", 0D);
      ServiceControlPeriod.SETFILTER("Starting Date", '<>%1', 0D);
      ServiceControlPeriod.SETFILTER("Ending Date", '<>%1', 0D);
      IF ServiceControlPeriod.FINDSET THEN
        REPEAT
          IF NOT ServiceContractControlRev.GET(IReportingDate, IServiceContract."No.", ServiceControlPeriod.Code) THEN BEGIN
            ServiceContractControlRev.INIT;
            ServiceContractControlRev."Reporting Date" := IReportingDate;
            ServiceContractControlRev."Service Contract No." := IServiceContract."No.";
            ServiceContractControlRev."Customer No." := IServiceContract."Customer No.";
            ServiceContractControlRev."Global Dimension 1 Code" := IServiceContract."Global Dimension 1 Code";
            ServiceContractControlRev."Contract Group" := IServiceContract."Contract Group";
            ServiceContractControlRev.VALIDATE("Control Period Code", ServiceControlPeriod.Code);

            CASE ServiceContract."Budget Based on" OF
              ServiceContract."Budget Based on"::"Maintenance Scheme":
                BEGIN
                  GetMaintenanceSalesAndCost.GetInstallmentAmountWithUpdate(IServiceContract,
                    ServiceContractControlRev."Installment Amount", ServiceContractControlRev."Contract Amount", DummyAmount,
                    ServiceControlPeriod."Starting Date", ServiceControlPeriod."Ending Date", TRUE);
                  ServiceContractControlRev."Contract Revenue" :=
                    CalculateRevenueContract(
                      IServiceContract."No.", ServiceControlPeriod."Starting Date", ServiceControlPeriod."Ending Date", ServiceContractControlRev."Closed Contract Revenue");
                  ServiceContractControlRev."Contract Revenue (Calls)" :=
                    ROUND(
                      ServiceContractControlRev."Contract Revenue" *
                      ServiceContract.GetPercentageShareCalls(ServiceControlPeriod."Ending Date") / 100);
                  ServiceContractControlRev."Closed Contract Rev. (Calls)" :=
                    ROUND(
                      ServiceContractControlRev."Closed Contract Revenue" *
                      ServiceContract.GetPercentageShareCalls(ServiceControlPeriod."Ending Date") / 100);
                  ServiceContractControlRev."Contract Revenue (Maint.)" :=
                    ServiceContractControlRev."Contract Revenue" - ServiceContractControlRev."Contract Revenue (Calls)";
                  ServiceContractControlRev."Closed Contract Rev. (Maint.)" :=
                    ServiceContractControlRev."Closed Contract Revenue" - ServiceContractControlRev."Closed Contract Rev. (Calls)";

                  IF ServiceContract."Invoice Type" = ServiceContract."Invoice Type"::Dynamic THEN
                    ServiceContractControlRev."Dynamic Invoice Amount" :=
                      GetMaintenanceSalesAndCost.CalculateContractRevenue(IServiceContract."No.", '', ServiceControlPeriod."Starting Date",
                      ServiceControlPeriod."Ending Date");

                  ServiceContractControlRev.INSERT;
                END;
              ServiceContract."Budget Based on"::Category:
                BEGIN
                  ServiceCategory.SETRANGE("Service Contract No.", IServiceContract."No.");
                  IF ServiceCategory.FINDSET THEN
                    REPEAT
                      ServiceContractControlRev."Service Category" := ServiceCategory.Code;
                      GetMaintenanceSalesAndCost.GetInstallmentAmountByCategoryWithUpdate(IServiceContract, ServiceCategory.Code,
                        ServiceContractControlRev."Installment Amount", ServiceContractControlRev."Contract Amount", DummyAmount,
                        ServiceControlPeriod."Starting Date", ServiceControlPeriod."Ending Date", TRUE);
                      DivisionPercentage := ServiceContract.GetCategoryDivisionPercentage(ServiceCategory.Code, ServiceControlPeriod."Ending Date");
                      ServiceContractControlRev."Contract Revenue" :=
                        ROUND(
                          CalculateRevenueContract(
                            IServiceContract."No.", ServiceControlPeriod."Starting Date", ServiceControlPeriod."Ending Date",
                            ServiceContractControlRev."Closed Contract Revenue") *
                          DivisionPercentage / 100);
                      ServiceContractControlRev."Contract Revenue (Calls)" :=
                        ROUND(
                          ServiceContractControlRev."Contract Revenue" *
                          ServiceContract.GetPercentageShareCalls(ServiceControlPeriod."Ending Date") / 100);
                      ServiceContractControlRev."Closed Contract Rev. (Calls)" :=
                        ROUND(
                          ServiceContractControlRev."Closed Contract Revenue" *
                          ServiceContract.GetPercentageShareCalls(ServiceControlPeriod."Ending Date") / 100);
                      ServiceContractControlRev."Contract Revenue (Maint.)" :=
                        ServiceContractControlRev."Contract Revenue" - ServiceContractControlRev."Contract Revenue (Calls)";
                      ServiceContractControlRev."Closed Contract Rev. (Maint.)" :=
                        ServiceContractControlRev."Closed Contract Revenue" - ServiceContractControlRev."Closed Contract Rev. (Calls)";

                      IF ServiceContract."Invoice Type" = ServiceContract."Invoice Type"::Dynamic THEN
                        ServiceContractControlRev."Dynamic Invoice Amount" :=
                          GetMaintenanceSalesAndCost.CalculateContractRevenue(IServiceContract."No.", ServiceCategory.Code,
                          ServiceControlPeriod."Starting Date", ServiceControlPeriod."Ending Date");

                      ServiceContractControlRev.INSERT;
                    UNTIL ServiceCategory.NEXT = 0;
                END;
            END;
          END;
        UNTIL ServiceControlPeriod.NEXT = 0;
    END;

    PROCEDURE RemoveSCControlLines@1100528609(IReportingDate@1100528600 : Date;IServiceContractNo@1100528602 : Code[20]);
    VAR
      ServiceContractControl@1100528601 : Record 11071762;
      SCCategoryControl@1100528603 : Record 11071988;
    BEGIN
      ServiceContractControl.SETRANGE("Reporting Date", IReportingDate);
      ServiceContractControl.SETRANGE("Service Contract No.", IServiceContractNo);
      ServiceContractControl.DELETEALL(TRUE);

      SCCategoryControl.SETRANGE("Reporting Date", IReportingDate);
      SCCategoryControl.SETRANGE("Service Contract No.", IServiceContractNo);
      SCCategoryControl.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE InsertModBudgetLine@1100528611(IReportingDate@1100528602 : Date;IModificationNo@1100528603 : Code[20];IReferenceDate@1100528600 : Date;IAmount@1100526201 : Decimal;IHours@1100526203 : Decimal;ILaborAmount@1100526208 : Decimal;IFinishedPerc@1100528601 : Decimal;ICustomerNo@1100526212 : Code[20];IGlobalDim1Cde@1100526217 : Code[20];IBudgetType@1100528604 : Option);
    VAR
      ObjectModificationBudget@1100526209 : Record 11071760;
      LineNo@1100526214 : Integer;
    BEGIN
      ObjectModificationBudget.SETRANGE("Reporting Date", IReportingDate);
      ObjectModificationBudget.SETRANGE("Modification No.", IModificationNo);
      IF ObjectModificationBudget.FINDLAST THEN
        LineNo := ObjectModificationBudget."Line No." + 10000
      ELSE
        LineNo := 10000;

      ObjectModificationBudget.RESET;
      ObjectModificationBudget.INIT;
      ObjectModificationBudget."Reporting Date" := IReportingDate;
      ObjectModificationBudget."Modification No." := IModificationNo;
      ObjectModificationBudget."Reference Date" := IReferenceDate;
      ObjectModificationBudget."Line No." := LineNo;
      ObjectModificationBudget.Amount := IAmount;
      ObjectModificationBudget.Hours := IHours;
      ObjectModificationBudget."Labor Amount" := ILaborAmount;
      ObjectModificationBudget.Finished := IFinishedPerc = 100;
      ObjectModificationBudget."Allowed Amount" := (ObjectModificationBudget.Amount / 100) * IFinishedPerc;
      ObjectModificationBudget."Allowed Hours" := (ObjectModificationBudget.Hours / 100) * IFinishedPerc;
      ObjectModificationBudget."Allowed Labor Amount" := (ObjectModificationBudget."Labor Amount" / 100) * IFinishedPerc;
      ObjectModificationBudget."Customer No." := ICustomerNo;
      ObjectModificationBudget."Global Dimension 1 Code" := IGlobalDim1Cde;
      ObjectModificationBudget."Budget Type" := IBudgetType;
      ObjectModificationBudget.INSERT(TRUE);
    END;

    LOCAL PROCEDURE InsertReplBudgetLine@1100528614(IReportingDate@1100528602 : Date;IReplacementNo@1100528603 : Code[20];IReferenceDate@1100528600 : Date;IAmount@1100526201 : Decimal;IHours@1100526203 : Decimal;ILaborAmount@1100526208 : Decimal;IFinishedPerc@1100528601 : Decimal;ICustomerNo@1100526212 : Code[20];IGlobalDim1Cde@1100526217 : Code[20];IBudgetType@1100528604 : Option);
    VAR
      ObjectReplacementBudget@1100526209 : Record 11071761;
      LineNo@1100526214 : Integer;
    BEGIN
      ObjectReplacementBudget.SETRANGE("Reporting Date", IReportingDate);
      ObjectReplacementBudget.SETRANGE("Replacement No.", IReplacementNo);
      IF ObjectReplacementBudget.FINDLAST THEN
        LineNo := ObjectReplacementBudget."Line No." + 10000
      ELSE
        LineNo := 10000;

      ObjectReplacementBudget.RESET;
      ObjectReplacementBudget.INIT;
      ObjectReplacementBudget."Reporting Date" := IReportingDate;
      ObjectReplacementBudget."Replacement No." := IReplacementNo;
      ObjectReplacementBudget."Reference Date" := IReferenceDate;
      ObjectReplacementBudget."Line No." := LineNo;
      ObjectReplacementBudget.Amount := IAmount;
      ObjectReplacementBudget.Hours := IHours;
      ObjectReplacementBudget."Labor Amount" := ILaborAmount;
      ObjectReplacementBudget.Finished := IFinishedPerc = 100;
      ObjectReplacementBudget."Allowed Amount" := (ObjectReplacementBudget.Amount / 100) * IFinishedPerc;
      ObjectReplacementBudget."Allowed Hours" := (ObjectReplacementBudget.Hours / 100) * IFinishedPerc;
      ObjectReplacementBudget."Allowed Labor Amount" := (ObjectReplacementBudget."Labor Amount" / 100) * IFinishedPerc;
      ObjectReplacementBudget."Customer No." := ICustomerNo;
      ObjectReplacementBudget."Global Dimension 1 Code" := IGlobalDim1Cde;
      ObjectReplacementBudget."Budget Type" := IBudgetType;
      ObjectReplacementBudget.INSERT(TRUE);
    END;

    LOCAL PROCEDURE InsertCustomerControlLine@1100528606(IReportingDate@1100528600 : Date;IReportingTime@1210190000 : Time;ICustomerNo@1100528601 : Code[20];IControlPeriodCode@1100528602 : Code[10]);
    VAR
      ServiceControlCustomer@1100528607 : Record 11071763;
    BEGIN
      IF ICustomerNo = '' THEN EXIT;
      IF ServiceControlCustomer.GET(IReportingDate, ICustomerNo, IControlPeriodCode) THEN EXIT;

      ServiceControlCustomer."Reporting Date" := IReportingDate;
      ServiceControlCustomer."Reporting Time" := IReportingTime;
      ServiceControlCustomer."Customer No." := ICustomerNo;
      ServiceControlCustomer.VALIDATE("Control Period Code", IControlPeriodCode);
      ServiceControlCustomer.INSERT;
    END;

    LOCAL PROCEDURE InsertModificationControlLine@1100528604(IReportingDate@1100528600 : Date;IReportingTime@1210190000 : Time;IModificationNo@1100528601 : Code[20];IControlPeriodCode@1100528602 : Code[10]);
    VAR
      ServiceControlModification@1100528603 : Record 11071765;
    BEGIN
      IF ServiceControlModification.GET(IReportingDate, IModificationNo, IControlPeriodCode) THEN EXIT;

      ServiceControlModification."Reporting Date" := IReportingDate;
      ServiceControlModification."Reporting Time" := IReportingTime;
      ServiceControlModification."Modification No." := IModificationNo;
      ServiceControlModification.VALIDATE("Control Period Code", IControlPeriodCode);
      ServiceControlModification.INSERT;
    END;

    LOCAL PROCEDURE InsertReplacementControlLine@1100528610(IReportingDate@1100528600 : Date;IReportingTime@1210190000 : Time;IReplacementNo@1100528601 : Code[20];IControlPeriodCode@1100528602 : Code[10]);
    VAR
      ServiceControlReplacement@1100528603 : Record 11071766;
    BEGIN
      IF ServiceControlReplacement.GET(IReportingDate, IReplacementNo, IControlPeriodCode) THEN EXIT;

      ServiceControlReplacement."Reporting Date" := IReportingDate;
      ServiceControlReplacement."Reporting Time" := IReportingTime;
      ServiceControlReplacement."Replacement No." := IReplacementNo;
      ServiceControlReplacement.VALIDATE("Control Period Code", IControlPeriodCode);
      ServiceControlReplacement.INSERT;
    END;

    LOCAL PROCEDURE InsertGlobalDim1ControlLine@1100528607(IReportingDate@1100528600 : Date;IReportingTime@1210190000 : Time;IGlobalDimension1Code@1100528601 : Code[20]);
    VAR
      ServiceControlPeriod@1100528604 : Record 11071755;
      ServiceControlGlobalDim1@1100528603 : Record 11071764;
    BEGIN
      ServiceControlPeriod.SETRANGE("Date Finished", 0D);
      ServiceControlPeriod.SETFILTER("Starting Date", '<>%1', 0D);
      ServiceControlPeriod.SETFILTER("Ending Date", '<>%1', 0D);
      IF ServiceControlPeriod.FINDSET THEN
        REPEAT
          IF NOT ServiceControlGlobalDim1.GET(IReportingDate, IGlobalDimension1Code, ServiceControlPeriod.Code) THEN BEGIN
            ServiceControlGlobalDim1."Reporting Date" := IReportingDate;
            ServiceControlGlobalDim1."Reporting Time" := IReportingTime;
            ServiceControlGlobalDim1."Global Dimension 1 Code" := IGlobalDimension1Code;
            ServiceControlGlobalDim1.VALIDATE("Control Period Code", ServiceControlPeriod.Code);
            ServiceControlGlobalDim1.INSERT;
          END;
        UNTIL ServiceControlPeriod.NEXT = 0;
    END;

    LOCAL PROCEDURE InsertContractGroupControlLine@1100528617(IReportingDate@1100528600 : Date;IReportingTime@1210190000 : Time;IContractGroupCode@1100528601 : Code[20]);
    VAR
      ServiceControlPeriod@1100528604 : Record 11071755;
      ServiceControlContractGroup@1100528603 : Record 11071787;
    BEGIN
      ServiceControlPeriod.SETRANGE("Date Finished", 0D);
      ServiceControlPeriod.SETFILTER("Starting Date", '<>%1', 0D);
      ServiceControlPeriod.SETFILTER("Ending Date", '<>%1', 0D);
      IF ServiceControlPeriod.FINDSET THEN
        REPEAT
          IF NOT ServiceControlContractGroup.GET(IReportingDate, IContractGroupCode, ServiceControlPeriod.Code) THEN BEGIN
            ServiceControlContractGroup."Reporting Date" := IReportingDate;
            ServiceControlContractGroup."Reporting Time" := IReportingTime;
            ServiceControlContractGroup."Contract Group" := IContractGroupCode;
            ServiceControlContractGroup.VALIDATE("Control Period Code", ServiceControlPeriod.Code);
            ServiceControlContractGroup.INSERT;
          END;
        UNTIL ServiceControlPeriod.NEXT = 0;
    END;

    LOCAL PROCEDURE InsertControlPeriodFinance@1100528612(IReportingDate@1100528600 : Date;IControlPeriodCode@1100528601 : Code[10]);
    VAR
      ServiceControlPeriodFinance@1100528602 : Record 11071775;
    BEGIN
      IF ServiceControlPeriodFinance.GET(IReportingDate, IControlPeriodCode) THEN EXIT;

      ServiceControlPeriodFinance."Reporting Date" := IReportingDate;
      ServiceControlPeriodFinance.VALIDATE("Control Period Code", IControlPeriodCode);
      ServiceControlPeriodFinance.INSERT;
    END;

    PROCEDURE RemoveFinanceControlLines@1100528602(IReportingDate@1100528600 : Date);
    VAR
      ServiceOrderControl@1100528601 : Record 11071758;
      ServiceControlCustomer@1100528604 : Record 11071763;
      ServiceControlGlobalDim1@1100528605 : Record 11071764;
      ServiceControlContractGroup@1100528608 : Record 11071787;
      ServiceControlModification@1100528606 : Record 11071765;
      ServiceControlReplacement@1100528607 : Record 11071766;
    BEGIN
      ServiceOrderControl.SETRANGE("Reporting Date", IReportingDate);
      ServiceOrderControl.DELETEALL(TRUE);

      ServiceControlCustomer.SETRANGE("Reporting Date", IReportingDate);
      ServiceControlCustomer.DELETEALL(TRUE);

      ServiceControlGlobalDim1.SETRANGE("Reporting Date", IReportingDate);
      ServiceControlGlobalDim1.DELETEALL(TRUE);

      ServiceControlContractGroup.SETRANGE("Reporting Date", IReportingDate);
      ServiceControlContractGroup.DELETEALL(TRUE);

      ServiceControlModification.SETRANGE("Reporting Date", IReportingDate);
      ServiceControlModification.DELETEALL(TRUE);

      ServiceControlReplacement.SETRANGE("Reporting Date", IReportingDate);
      ServiceControlReplacement.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE CalculateOpenHoursSurcharge@1100526218(IReportingDate@1100528609 : Date;IServiceOrderNo@1100528608 : Code[20];IServiceControlPeriodeDate@1100528607 : Date;ISourceType@1100528611 : 'Call,Contract,Direct,Estimate,,,Modification,Replacement';IWork@1100528606 : ' ,Contract,Modification,Replacement';INo@1100528605 : Code[20];ICustomerNo@1100528604 : Code[20];IGlobalDim1@1100528603 : Code[20];IContractGroup@1100528601 : Code[20];IAdditional@1100528600 : Boolean);
    VAR
      HourAccountingSurcharge@1100528602 : Record 11020308;
      DataSource@1100526204 : 'Service Ledger,Hour Accounting,Hour Accounting Surcharge,Inventory,Purchase Control,Sales Line,Cost Plus Entry';
      CostType@1100526200 : ' ,Labor,Material,Subcontracting,Plant,Sundry';
      Type@1100528610 : 'Revenue,Cost,Surcharge Soft,Surcharge Firm,Open Purchase,Received not Invoiced,Hours';
    BEGIN
      HourAccountingSurcharge.SETCURRENTKEY(
        "Service Order No.", "Cost Type", "Cost Object", "Cost Component", "Posting Date", "Additional Cost (Service)");
      HourAccountingSurcharge.SETRANGE("Service Order No.", IServiceOrderNo);
      HourAccountingSurcharge.SETRANGE("Additional Cost (Service)", IAdditional);
      HourAccountingSurcharge.SETRANGE("Cost Type", HourAccountingSurcharge."Cost Type"::Labor);
      HourAccountingSurcharge.CALCSUMS("Overhead Surcharge Service");
      IF HourAccountingSurcharge."Overhead Surcharge Service" <> 0 THEN
        InsertOrderCostRevenue(
          IReportingDate, IServiceOrderNo, IServiceControlPeriodeDate, ISourceType, IWork, INo, DataSource::"Hour Accounting",
          HourAccountingSurcharge."Overhead Surcharge Service", 0, HourAccountingSurcharge."Overhead Surcharge Service", 0,
          0, 0, IAdditional, CostType::Labor, Type::"Surcharge Firm", ICustomerNo, IGlobalDim1, IContractGroup);
      HourAccountingSurcharge.SETFILTER("Cost Type", '<>%1', HourAccountingSurcharge."Cost Type"::Labor);
      HourAccountingSurcharge.CALCSUMS("Overhead Surcharge Service");
      IF HourAccountingSurcharge."Overhead Surcharge Service" <> 0 THEN
        InsertOrderCostRevenue(
          IReportingDate, IServiceOrderNo, IServiceControlPeriodeDate, ISourceType, IWork, INo, DataSource::"Hour Accounting",
          HourAccountingSurcharge."Overhead Surcharge Service", 0, HourAccountingSurcharge."Overhead Surcharge Service", 0,
          0, 0, IAdditional, CostType::" ", Type::"Surcharge Firm", ICustomerNo, IGlobalDim1, IContractGroup);
    END;

    LOCAL PROCEDURE CalculateActualCost@1100526226(IReportingDate@1100528609 : Date;IServiceOrderNo@1100528608 : Code[20];IServiceControlPeriodeDate@1100528607 : Date;ISourceType@1100528611 : 'Call,Contract,Direct,Estimate,,,Modification,Replacement';IWork@1100528606 : ' ,Contract,Modification,Replacement';INo@1100528605 : Code[20];ICustomerNo@1100528604 : Code[20];IGlobalDim1@1100528603 : Code[20];IContractGroup@1100528601 : Code[20];IAdditional@1100528600 : Boolean);
    VAR
      ServiceLedgerEntry@1100528602 : Record 11012819;
      DataSource@1100526204 : 'Service Ledger,Hour Accounting,Hour Accounting Surcharge,Inventory,Purchase Control,Sales Line,Cost Plus Entry';
      CostType@1100526202 : ' ,Labor,Material,Subcontracting,Plant,Sundry';
      Type@1100528610 : 'Revenue,Cost,Surcharge Soft,Surcharge Firm,Open Purchase,Received not Invoiced,Hours';
    BEGIN
      ServiceLedgerEntry.SETCURRENTKEY(
        "Service Order No.", "Source Type", "Cost Type", "Global Dimension 2 Code", "Cost Component", "Additional Cost",
        "Cost Present", "Revenue Present", "Posting Date");
      ServiceLedgerEntry.SETRANGE("Service Order No.", IServiceOrderNo);
      ServiceLedgerEntry.SETRANGE("Additional Cost", IAdditional);
      //ServiceLedgerEntry.SETRANGE("Cost Present", TRUE);
      ServiceLedgerEntry.SETRANGE("Cost Type", ServiceLedgerEntry."Cost Type"::Labor);
      ServiceLedgerEntry.CALCSUMS("Total Cost (LCY)", Quantity, "Closed Costs");
      IF (ServiceLedgerEntry."Total Cost (LCY)" <> 0) OR (ServiceLedgerEntry."Closed Costs" <> 0) THEN
        InsertOrderCostRevenue(
          IReportingDate, IServiceOrderNo, IServiceControlPeriodeDate, ISourceType, IWork, INo, DataSource::"Service Ledger",
          ServiceLedgerEntry."Total Cost (LCY)", ServiceLedgerEntry.Quantity, ServiceLedgerEntry."Total Cost (LCY)", -ServiceLedgerEntry."Closed Costs",
          0, 0, IAdditional, CostType::Labor, Type::Cost, ICustomerNo, IGlobalDim1, IContractGroup);
      ServiceLedgerEntry.SETFILTER("Cost Type", '<>%1', ServiceLedgerEntry."Cost Type"::Labor);
      ServiceLedgerEntry.CALCSUMS("Total Cost (LCY)", "Closed Costs");
      IF (ServiceLedgerEntry."Total Cost (LCY)" <> 0) OR (ServiceLedgerEntry."Closed Costs" <> 0) THEN
        InsertOrderCostRevenue(
          IReportingDate, IServiceOrderNo, IServiceControlPeriodeDate, ISourceType, IWork, INo, DataSource::"Service Ledger",
          ServiceLedgerEntry."Total Cost (LCY)", 0, 0, -ServiceLedgerEntry."Closed Costs", 0, 0, IAdditional, CostType::" ", Type::Cost, ICustomerNo,
          IGlobalDim1, IContractGroup);
    END;

    LOCAL PROCEDURE CalculateOpenHours@1100526231(IReportingDate@1100528609 : Date;IServiceOrderNo@1100528608 : Code[20];IServiceControlPeriodeDate@1100528607 : Date;ISourceType@1100528611 : 'Call,Contract,Direct,Estimate,,,Modification,Replacement';IWork@1100528606 : ' ,Contract,Modification,Replacement';INo@1100528605 : Code[20];ICustomerNo@1100528604 : Code[20];IGlobalDim1@1100528603 : Code[20];IContractGroup@1100528601 : Code[20];IAdditional@1100528600 : Boolean);
    VAR
      HourAccountingLine@1100528602 : Record 11012039;
      DataSource@1100526204 : 'Service Ledger,Hour Accounting,Hour Accounting Surcharge,Inventory,Purchase Control,Sales Line,Cost Plus Entry';
      CostType@1100526200 : ' ,Labor,Material,Subcontracting,Plant,Sundry';
      Type@1100528610 : 'Revenue,Cost,Surcharge Soft,Surcharge Firm,Open Purchase,Received not Invoiced,Hours';
    BEGIN
      HourAccountingLine.SETCURRENTKEY(
        "Service Order No.", "Cost Type", "Cost Object", "Cost Component", "Posting Date", "Additional Cost (Service)");
      HourAccountingLine.SETRANGE("Service Order No.", IServiceOrderNo);
      HourAccountingLine.SETRANGE("Additional Cost (Service)", IAdditional);
      HourAccountingLine.SETRANGE("Cost Type", HourAccountingLine."Cost Type"::Labor);
      HourAccountingLine.CALCSUMS("Total Line", "Amount (LCY)");
      IF HourAccountingLine."Amount (LCY)" <> 0 THEN
        InsertOrderCostRevenue(
          IReportingDate, IServiceOrderNo, IServiceControlPeriodeDate, ISourceType, IWork, INo, DataSource::"Hour Accounting",
          HourAccountingLine."Amount (LCY)", HourAccountingLine."Total Line", HourAccountingLine."Amount (LCY)", 0, 0,
          0, IAdditional, CostType::Labor, Type::Cost, ICustomerNo, IGlobalDim1, IContractGroup);
      HourAccountingLine.SETFILTER("Cost Type", '<>%1', HourAccountingLine."Cost Type"::Labor);
      HourAccountingLine.CALCSUMS("Amount (LCY)");
      IF HourAccountingLine."Amount (LCY)" <> 0 THEN
        InsertOrderCostRevenue(
          IReportingDate, IServiceOrderNo, IServiceControlPeriodeDate, ISourceType, IWork, INo, DataSource::"Hour Accounting",
          HourAccountingLine."Amount (LCY)", 0, 0, 0, 0, 0, IAdditional, CostType::" ", Type::Cost, ICustomerNo, IGlobalDim1, IContractGroup);
    END;

    LOCAL PROCEDURE CalculateOpenInventAmount@1100526239(IReportingDate@1100528608 : Date;IServiceOrderNo@1100528607 : Code[20];IServiceControlPeriodeDate@1100528606 : Date;ISourceType@1100528610 : 'Call,Contract,Direct,Estimate,,,Modification,Replacement';IWork@1100528605 : ' ,Contract,Modification,Replacement';INo@1100528604 : Code[20];ICustomerNo@1100528603 : Code[20];IGlobalDim1@1100528602 : Code[20];IContractGroup@1100528601 : Code[20];IAdditional@1100528600 : Boolean);
    VAR
      ItemJournalLine@1100526202 : Record 83;
      DataSource@1100526204 : 'Service Ledger,Hour Accounting,Hour Accounting Surcharge,Inventory,Purchase Control,Sales Line,Cost Plus Entry';
      CostType@1100526200 : ' ,Labor,Material,Subcontracting,Plant,Sundry';
      Type@1100528609 : 'Revenue,Cost,Surcharge Soft,Surcharge Firm,Open Purchase,Received not Invoiced,Hours';
    BEGIN
      ItemJournalLine.SETCURRENTKEY(
        "Service Order No.", "Cost Type", "Shortcut Dimension 2 Code", "Cost Component", "Service Control Year", "Posting Date",
        "Additional Cost (Service)");
      ItemJournalLine.SETRANGE("Service Order No.", IServiceOrderNo);
      ItemJournalLine.SETRANGE("Additional Cost (Service)", IAdditional);
      ItemJournalLine.SETRANGE("Cost Type", ItemJournalLine."Cost Type"::Labor);
      ItemJournalLine.CALCSUMS(Quantity, Amount);
      IF ItemJournalLine.Amount <> 0 THEN
        InsertOrderCostRevenue(
          IReportingDate, IServiceOrderNo, IServiceControlPeriodeDate, ISourceType, IWork, INo, DataSource::Inventory,
          ItemJournalLine.Amount, ItemJournalLine.Quantity, ItemJournalLine.Amount, 0, 0, 0, IAdditional, CostType::Labor, Type::Cost,
          ICustomerNo, IGlobalDim1, IContractGroup);
      ItemJournalLine.SETFILTER("Cost Type", '<>%1', ItemJournalLine."Cost Type"::Labor);
      ItemJournalLine.CALCSUMS(Amount);
      IF ItemJournalLine.Amount <> 0 THEN
        InsertOrderCostRevenue(
          IReportingDate, IServiceOrderNo, IServiceControlPeriodeDate, ISourceType, IWork, INo, DataSource::Inventory,
          ItemJournalLine.Amount, 0, 0, 0, 0, 0, IAdditional, CostType::" ", Type::Cost, ICustomerNo, IGlobalDim1, IContractGroup);
    END;

    LOCAL PROCEDURE CalculateOpenInventSurcharge@1100526245(IReportingDate@1100528608 : Date;IServiceOrderNo@1100528607 : Code[20];IServiceControlPeriodeDate@1100528606 : Date;ISourceType@1100528610 : 'Call,Contract,Direct,Estimate,,,Modification,Replacement';IWork@1100528605 : ' ,Contract,Modification,Replacement';INo@1100528604 : Code[20];ICustomerNo@1100528603 : Code[20];IGlobalDim1@1100528602 : Code[20];IContractGroup@1100528601 : Code[20];IAdditional@1100528600 : Boolean);
    VAR
      ItemJournalSurcharge@1100526202 : Record 11020585;
      DataSource@1100526204 : 'Service Ledger,Hour Accounting,Hour Accounting Surcharge,Inventory,Purchase Control,Sales Line,Cost Plus Entry';
      CostType@1100526200 : ' ,Labor,Material,Subcontracting,Plant,Sundry';
      Type@1100528609 : 'Revenue,Cost,Surcharge Soft,Surcharge Firm,Open Purchase,Received not Invoiced,Hours';
    BEGIN
      ItemJournalSurcharge.SETCURRENTKEY(
        "Service Order No.", "Cost Type", "Shortcut Dimension 2 Code", "Cost Component", "Service Control Year", "Posting Date",
        "Additional Cost (Service)");
      ItemJournalSurcharge.SETRANGE("Service Order No.", IServiceOrderNo);
      ItemJournalSurcharge.SETRANGE("Additional Cost (Service)", IAdditional);
      ItemJournalSurcharge.SETRANGE("Cost Type", ItemJournalSurcharge."Cost Type"::Labor);
      ItemJournalSurcharge.CALCSUMS("Overhead Surcharge Service");
      IF ItemJournalSurcharge."Overhead Surcharge Service" <> 0 THEN
        InsertOrderCostRevenue(
          IReportingDate, IServiceOrderNo, IServiceControlPeriodeDate, ISourceType, IWork, INo, DataSource::Inventory,
          ItemJournalSurcharge."Overhead Surcharge Service", 0, 0, 0, 0, 0, IAdditional, CostType::Labor, Type::"Surcharge Firm", ICustomerNo,
          IGlobalDim1, IContractGroup);
      ItemJournalSurcharge.SETFILTER("Cost Type", '<>%1', ItemJournalSurcharge."Cost Type"::Labor);
      ItemJournalSurcharge.CALCSUMS("Overhead Surcharge Service");
      IF ItemJournalSurcharge."Overhead Surcharge Service" <> 0 THEN
        InsertOrderCostRevenue(
          IReportingDate, IServiceOrderNo, IServiceControlPeriodeDate, ISourceType, IWork, INo, DataSource::Inventory,
          ItemJournalSurcharge."Overhead Surcharge Service", 0, ItemJournalSurcharge."Overhead Surcharge Service", 0, 0,
          0, IAdditional, CostType::" ", Type::"Surcharge Firm", ICustomerNo, IGlobalDim1, IContractGroup);
    END;

    LOCAL PROCEDURE CalculateOpenPurchase@1100526207(IReportingDate@1100528608 : Date;IServiceOrderNo@1100528607 : Code[20];IServiceControlPeriodeDate@1100528606 : Date;ISourceType@1100528610 : 'Call,Contract,Direct,Estimate,,,Modification,Replacement';IWork@1100528605 : ' ,Contract,Modification,Replacement';INo@1100528604 : Code[20];ICustomerNo@1100528603 : Code[20];IGlobalDim1@1100528602 : Code[20];IContractGroup@1100528601 : Code[20];IAdditional@1100528600 : Boolean);
    VAR
      PurchaseOrderControlLine@1100526202 : Record 11020221;
      DataSource@1100526204 : 'Service Ledger,Hour Accounting,Hour Accounting Surcharge,Inventory,Purchase Control,Sales Line,Cost Plus Entry';
      CostType@1100526200 : ' ,Labor,Material,Subcontracting,Plant,Sundry';
      Type@1100528609 : 'Revenue,Cost,Surcharge Soft,Surcharge Firm,Open Purchase,Received not Invoiced,Hours';
    BEGIN
      PurchaseOrderControlLine.SETCURRENTKEY(
        "Service Order No.", "Cost Component", "Cost Type", "Shortcut Dimension 2 Code", "Line Type",Date, "Additional Cost (Service)");
      PurchaseOrderControlLine.SETRANGE("Service Order No.", IServiceOrderNo);
      PurchaseOrderControlLine.SETRANGE("Additional Cost (Service)", IAdditional);
      PurchaseOrderControlLine.SETRANGE("Cost Type", PurchaseOrderControlLine."Cost Type"::Labor);
      PurchaseOrderControlLine.CALCSUMS("Outstanding Amount", "Outstanding Hours");
      IF PurchaseOrderControlLine."Outstanding Amount" <> 0 THEN
        InsertOrderCostRevenue(
          IReportingDate, IServiceOrderNo, IServiceControlPeriodeDate, ISourceType, IWork, INo, DataSource::"Purchase Control",
          PurchaseOrderControlLine."Outstanding Amount", PurchaseOrderControlLine."Outstanding Hours",
          PurchaseOrderControlLine."Outstanding Amount", 0, 0,
          0, IAdditional, CostType::Labor, Type::"Open Purchase", ICustomerNo, IGlobalDim1, IContractGroup);
      PurchaseOrderControlLine.SETFILTER("Cost Type", '<>%1', PurchaseOrderControlLine."Cost Type"::Labor);
      PurchaseOrderControlLine.CALCSUMS("Outstanding Amount");
      IF PurchaseOrderControlLine."Outstanding Amount" <> 0 THEN
        InsertOrderCostRevenue(
          IReportingDate, IServiceOrderNo, IServiceControlPeriodeDate, ISourceType, IWork, INo, DataSource::"Purchase Control",
          PurchaseOrderControlLine."Outstanding Amount", 0, 0, 0, 0, 0, IAdditional, CostType::" ", Type::"Open Purchase", ICustomerNo,
          IGlobalDim1, IContractGroup);
    END;

    LOCAL PROCEDURE CalculateReceivedNotInvoiced@1100526229(IReportingDate@1100528608 : Date;IServiceOrderNo@1100528607 : Code[20];IServiceControlPeriodeDate@1100528606 : Date;ISourceType@1100528610 : 'Call,Contract,Direct,Estimate,,,Modification,Replacement';IWork@1100528605 : ' ,Contract,Modification,Replacement';INo@1100528604 : Code[20];ICustomerNo@1100528603 : Code[20];IGlobalDim1@1100528602 : Code[20];IContractGroup@1100528601 : Code[20];IAdditional@1100528600 : Boolean);
    VAR
      PurchaseOrderControlLine@1100526202 : Record 11020221;
      DataSource@1100526204 : 'Service Ledger,Hour Accounting,Hour Accounting Surcharge,Inventory,Purchase Control,Sales Line,Cost Plus Entry';
      CostType@1100526200 : ' ,Labor,Material,Subcontracting,Plant,Sundry';
      Type@1100528609 : 'Revenue,Cost,Surcharge Soft,Surcharge Firm,Open Purchase,Received not Invoiced,Hours';
    BEGIN
      PurchaseOrderControlLine.SETCURRENTKEY(
        "Service Order No.", "Cost Component", "Cost Type", "Shortcut Dimension 2 Code", "Line Type", Date,
        "Additional Cost (Service)");
      PurchaseOrderControlLine.SETRANGE("Service Order No.", IServiceOrderNo);
      PurchaseOrderControlLine.SETRANGE("Additional Cost (Service)", IAdditional);
      PurchaseOrderControlLine.SETRANGE("Cost Type", PurchaseOrderControlLine."Cost Type"::Labor);
      PurchaseOrderControlLine.CALCSUMS("Amt. Rcd. Not Invoiced", "Hours Rcd. Not Invoiced");
      IF PurchaseOrderControlLine."Amt. Rcd. Not Invoiced" <> 0 THEN
        InsertOrderCostRevenue(
          IReportingDate, IServiceOrderNo, IServiceControlPeriodeDate, ISourceType, IWork, INo, DataSource::"Purchase Control",
          PurchaseOrderControlLine."Amt. Rcd. Not Invoiced", PurchaseOrderControlLine."Hours Rcd. Not Invoiced",
          PurchaseOrderControlLine."Amt. Rcd. Not Invoiced", 0, 0, 0, IAdditional, CostType::Labor, Type::"Received not Invoiced", ICustomerNo, IGlobalDim1, IContractGroup);
      PurchaseOrderControlLine.SETFILTER("Cost Type", '<>%1', PurchaseOrderControlLine."Cost Type"::Labor);
      PurchaseOrderControlLine.CALCSUMS("Amt. Rcd. Not Invoiced");
      IF PurchaseOrderControlLine."Amt. Rcd. Not Invoiced" <> 0 THEN
        InsertOrderCostRevenue(
          IReportingDate, IServiceOrderNo, IServiceControlPeriodeDate, ISourceType, IWork, INo, DataSource::"Purchase Control",
          PurchaseOrderControlLine."Amt. Rcd. Not Invoiced", 0, 0, 0, 0, 0, IAdditional, CostType::" ", Type::"Received not Invoiced", ICustomerNo, IGlobalDim1, IContractGroup);
    END;

    LOCAL PROCEDURE CalculateOpenPurchaseOverhOpen@1100526215(IReportingDate@1100528608 : Date;IServiceOrderNo@1100528607 : Code[20];IServiceControlPeriodeDate@1100528606 : Date;ISourceType@1100528610 : 'Call,Contract,Direct,Estimate,,,Modification,Replacement';IWork@1100528605 : ' ,Contract,Modification,Replacement';INo@1100528604 : Code[20];ICustomerNo@1100528603 : Code[20];IGlobalDim1@1100528602 : Code[20];IContractGroup@1100528601 : Code[20];IAdditional@1100528600 : Boolean);
    VAR
      PurchaseOrderControlLine@1100526202 : Record 11020221;
      DataSource@1100526204 : 'Service Ledger,Hour Accounting,Hour Accounting Surcharge,Inventory,Purchase Control,Sales Line,Cost Plus Entry';
      CostType@1100526200 : ' ,Labor,Material,Subcontracting,Plant,Sundry';
      Type@1100528609 : 'Revenue,Cost,Surcharge Soft,Surcharge Firm,Open Purchase,Received not Invoiced,Hours';
    BEGIN
      PurchaseOrderControlLine.SETCURRENTKEY(
        "Service Order No.", "Cost Component", "Cost Type", "Shortcut Dimension 2 Code", "Line Type", Date,
        "Additional Cost (Service)");
      PurchaseOrderControlLine.SETRANGE("Service Order No.", IServiceOrderNo);
      PurchaseOrderControlLine.SETRANGE("Additional Cost (Service)", IAdditional);
      PurchaseOrderControlLine.SETRANGE("Cost Type", PurchaseOrderControlLine."Cost Type"::Labor);
      PurchaseOrderControlLine.CALCSUMS("Overhead Surcharge Soft");
      IF PurchaseOrderControlLine."Overhead Surcharge Soft" <> 0 THEN
        InsertOrderCostRevenue(
          IReportingDate, IServiceOrderNo, IServiceControlPeriodeDate, ISourceType, IWork, INo, DataSource::"Purchase Control",
          PurchaseOrderControlLine."Overhead Surcharge Soft", 0, PurchaseOrderControlLine."Overhead Surcharge Soft", 0, 0,
          0, IAdditional, CostType::Labor, Type::"Surcharge Soft", ICustomerNo, IGlobalDim1, IContractGroup);
      PurchaseOrderControlLine.SETFILTER("Cost Type", '<>%1', PurchaseOrderControlLine."Cost Type"::Labor);
      PurchaseOrderControlLine.CALCSUMS("Overhead Surcharge Soft");
      IF PurchaseOrderControlLine."Overhead Surcharge Soft" <> 0 THEN
        InsertOrderCostRevenue(
          IReportingDate, IServiceOrderNo, IServiceControlPeriodeDate, ISourceType, IWork, INo, DataSource::"Purchase Control",
          PurchaseOrderControlLine."Overhead Surcharge Soft", 0, 0, 0, 0, 0, IAdditional, CostType::" ", Type::"Surcharge Soft",
          ICustomerNo, IGlobalDim1, IContractGroup);
    END;

    LOCAL PROCEDURE CalculateOpenPurchaseOverhRnI@1100526222(IReportingDate@1100528608 : Date;IServiceOrderNo@1100528607 : Code[20];IServiceControlPeriodeDate@1100528606 : Date;ISourceType@1100528610 : 'Call,Contract,Direct,Estimate,,,Modification,Replacement';IWork@1100528605 : ' ,Contract,Modification,Replacement';INo@1100528604 : Code[20];ICustomerNo@1100528603 : Code[20];IGlobalDim1@1100528602 : Code[20];IContractGroup@1100528601 : Code[20];IAdditional@1100528600 : Boolean);
    VAR
      PurchaseOrderControlLine@1100526202 : Record 11020221;
      DataSource@1100526207 : 'Service Ledger,Hour Accounting,Hour Accounting Surcharge,Inventory,Purchase Control,Sales Line,Cost Plus Entry';
      CostType@1100526206 : ' ,Labor,Material,Subcontracting,Plant,Sundry';
      Type@1100528609 : 'Revenue,Cost,Surcharge Soft,Surcharge Firm,Open Purchase,Received not Invoiced,Hours';
    BEGIN
      PurchaseOrderControlLine.SETCURRENTKEY(
        "Service Order No.", "Cost Component", "Cost Type", "Shortcut Dimension 2 Code", "Line Type", Date,
        "Additional Cost (Service)");
      PurchaseOrderControlLine.SETRANGE("Service Order No.", IServiceOrderNo);
      PurchaseOrderControlLine.SETRANGE("Additional Cost (Service)", IAdditional);
      PurchaseOrderControlLine.SETRANGE("Cost Type", PurchaseOrderControlLine."Cost Type"::Labor);
      PurchaseOrderControlLine.CALCSUMS("Overhead Surcharge Firm");
      IF PurchaseOrderControlLine."Overhead Surcharge Firm" <> 0 THEN
        InsertOrderCostRevenue(
          IReportingDate, IServiceOrderNo, IServiceControlPeriodeDate, ISourceType, IWork, INo, DataSource::"Purchase Control",
          PurchaseOrderControlLine."Overhead Surcharge Firm", 0, PurchaseOrderControlLine."Overhead Surcharge Firm", 0, 0,
          0, IAdditional, CostType::Labor, Type::"Surcharge Firm", ICustomerNo, IGlobalDim1, IContractGroup);
      PurchaseOrderControlLine.SETFILTER("Cost Type", '<>%1', PurchaseOrderControlLine."Cost Type"::Labor);
      PurchaseOrderControlLine.CALCSUMS("Overhead Surcharge Firm");
      IF PurchaseOrderControlLine."Overhead Surcharge Firm" <> 0 THEN
        InsertOrderCostRevenue(
          IReportingDate, IServiceOrderNo, IServiceControlPeriodeDate, ISourceType, IWork, INo, DataSource::"Purchase Control",
          PurchaseOrderControlLine."Overhead Surcharge Firm", 0, 0, 0, 0, 0, IAdditional, CostType::" ", Type::"Surcharge Firm",
          ICustomerNo, IGlobalDim1, IContractGroup);
    END;

    LOCAL PROCEDURE CalculateRevenueServiceOrders@1100526236(IReportingDate@1100528608 : Date;IServiceOrderNo@1100528607 : Code[20];IServiceControlPeriodeDate@1100528606 : Date;ISourceType@1100528610 : 'Call,Contract,Direct,Estimate,,,Modification,Replacement';IWork@1100528605 : ' ,Contract,Modification,Replacement';INo@1100528604 : Code[20];ICustomerNo@1100528603 : Code[20];IGlobalDim1@1100528602 : Code[20];IContractGroup@1100528601 : Code[20];IAdditional@1100528600 : Boolean);
    VAR
      ServiceLedgerEntry@1100526202 : Record 11012819;
      DataSource@1100526207 : 'Service Ledger,Hour Accounting,Hour Accounting Surcharge,Inventory,Purchase Control,Sales Line,Cost Plus Entry';
      CostType@1100526206 : ' ,Labor,Material,Subcontracting,Plant,Sundry';
      Type@1100528609 : 'Revenue,Cost,Surcharge Soft,Surcharge Firm,Open Purchase,Received not Invoiced,Hours';
    BEGIN
      ServiceLedgerEntry.SETCURRENTKEY(
        "Service Order No.", "Source Type", "Cost Type", "Global Dimension 2 Code", "Cost Component", "Additional Cost");
      ServiceLedgerEntry.SETRANGE("Service Order No.", IServiceOrderNo);
      ServiceLedgerEntry.SETRANGE("Additional Cost", IAdditional);
      ServiceLedgerEntry.CALCSUMS("Total Revenue (LCY)", "Closed Revenues");
      IF ServiceLedgerEntry."Total Revenue (LCY)" <> 0 THEN
        InsertOrderCostRevenue(
          IReportingDate, IServiceOrderNo, IServiceControlPeriodeDate, ISourceType, IWork, INo, DataSource::"Service Ledger",
          0, 0, 0, 0, ServiceLedgerEntry."Total Revenue (LCY)", ServiceLedgerEntry."Closed Revenues", IAdditional, CostType::" ", Type::Revenue,
          ICustomerNo, IGlobalDim1, IContractGroup);
    END;

    PROCEDURE CalculateRevenueContract@1100526220(IServiceContractNo@1100526200 : Code[20];IDateFilterStart@1100526203 : Date;IDateFilterEnd@1100526202 : Date;VAR OClosedRevenue@1100528600 : Decimal) lvRevenueDec : Decimal;
    VAR
      ServiceLedgerEntry@1100526201 : Record 11012819;
    BEGIN
      ServiceLedgerEntry.SETCURRENTKEY("Service Contract No.", "Service Order No.", "Service Control Period Date");
      ServiceLedgerEntry.SETRANGE("Service Contract No.", IServiceContractNo);
      ServiceLedgerEntry.SETRANGE("Service Order No.", '');
      ServiceLedgerEntry.SETRANGE("Service Control Period Date", IDateFilterStart, IDateFilterEnd);
      ServiceLedgerEntry.CALCSUMS("Total Revenue (LCY)", "Closed Revenues");
      OClosedRevenue := ServiceLedgerEntry."Closed Revenues";
      EXIT(ServiceLedgerEntry."Total Revenue (LCY)");
    END;

    LOCAL PROCEDURE CalculatePaidAmnt@1100409008(No@1100409000 : Code[20];Level@1100409006 : 'Contract,Order';IDateFilterStart@1100528601 : Date;IDateFilterEnd@1100528600 : Date) : Decimal;
    VAR
      ServiceLedgerEntry@1100409001 : Record 11012819;
      GenericTempTable@1100409002 : TEMPORARY Record 11020579;
      CustLedgerEntry@1100409003 : Record 21;
      PercPaid@1100409004 : Decimal;
      Paid@1100409005 : Decimal;
    BEGIN
      CASE Level OF
        Level::Order:
          BEGIN
            ServiceLedgerEntry.SETCURRENTKEY("Service Order No.","Source Type","Cost Type","Global Dimension 2 Code","Cost Component",
              "Additional Cost","Cost Present","Revenue Present","Posting Date");
            ServiceLedgerEntry.SETRANGE("Service Order No.", No);
          END;
        Level::Contract:
          BEGIN
            ServiceLedgerEntry.SETCURRENTKEY("Service Contract No.", "Posting Date");
            ServiceLedgerEntry.SETRANGE("Service Contract No.", No);
            ServiceLedgerEntry.SETRANGE("Service Order No.", '');
            ServiceLedgerEntry.SETRANGE("Posting Date", IDateFilterStart, IDateFilterEnd);
          END;
      END;
      ServiceLedgerEntry.SETRANGE("Revenue Present", TRUE);
      ServiceLedgerEntry.SETFILTER("Document Type", '%1|%2', ServiceLedgerEntry."Document Type"::"Sales Invoice", ServiceLedgerEntry."Document Type"::"Sales Credit Memo");
      IF ServiceLedgerEntry.FINDSET THEN BEGIN
        REPEAT
          IF NOT GenericTempTable.GET(ServiceLedgerEntry."Document No.") THEN BEGIN
            GenericTempTable.INIT;
            GenericTempTable."Key Code1" := ServiceLedgerEntry."Document No.";
            GenericTempTable.Dec1 := ServiceLedgerEntry."Total Revenue (LCY)";
            GenericTempTable.INSERT;
          END ELSE BEGIN
            GenericTempTable.Dec1 += ServiceLedgerEntry."Total Revenue (LCY)";
            GenericTempTable.MODIFY;
          END;
        UNTIL ServiceLedgerEntry.NEXT = 0;
      END;

      IF GenericTempTable.FINDFIRST THEN BEGIN
        REPEAT
          CustLedgerEntry.SETCURRENTKEY("Document No.");
          CustLedgerEntry.SETRANGE("Document No.", GenericTempTable."Key Code1");
          CustLedgerEntry.SETFILTER("Document Type", '%1|%2', CustLedgerEntry."Document Type"::Invoice, CustLedgerEntry."Document Type"::"Credit Memo");
          IF CustLedgerEntry.FINDFIRST THEN BEGIN
            CustLedgerEntry.CALCFIELDS("Amount (LCY)", "Remaining Amt. (LCY)");
            IF CustLedgerEntry."Amount (LCY)" <> 0 THEN BEGIN
              PercPaid := (-1 * GenericTempTable.Dec1) / CustLedgerEntry."Amount (LCY)";
              Paid := Paid + ROUND((PercPaid * (CustLedgerEntry."Amount (LCY)" - CustLedgerEntry."Remaining Amt. (LCY)")), 0.01);
            END;
          END;
        UNTIL GenericTempTable.NEXT = 0;
      END;


      EXIT(-Paid);
    END;

    LOCAL PROCEDURE CalculatePreclosureAmountContract@1100528627(IServiceContractNo@1100528601 : Code[20];IDateFilterStart@1100528603 : Date;IDateFilterEnd@1100528602 : Date) : Decimal;
    VAR
      ServiceLedgerEntry@1100528600 : Record 11012819;
    BEGIN
      ServiceLedgerEntry.SETCURRENTKEY("Service Contract No.", "Posting Date");
      ServiceLedgerEntry.SETRANGE("Service Contract No.", IServiceContractNo);
      ServiceLedgerEntry.SETRANGE("Posting Date", IDateFilterStart, IDateFilterEnd);
      ServiceLedgerEntry.CALCSUMS("Actual Preclosure Result");
      EXIT(ServiceLedgerEntry."Actual Preclosure Result");
    END;

    LOCAL PROCEDURE CalculatePreclosureAmountOrder@1100528630(IServiceOrderNo@1100528601 : Code[20]) : Decimal;
    VAR
      ServiceLedgerEntry@1100528600 : Record 11012819;
    BEGIN
      ServiceLedgerEntry.SETCURRENTKEY("Service Order No.", "Posting Date");
      ServiceLedgerEntry.SETRANGE("Service Order No.", IServiceOrderNo);
      ServiceLedgerEntry.SETRANGE("Service Contract No.", '');
      ServiceLedgerEntry.CALCSUMS("Actual Preclosure Result");
      EXIT(ServiceLedgerEntry."Actual Preclosure Result");
    END;

    LOCAL PROCEDURE CalculateCostPlus@1100526242(IReportingDate@1100528608 : Date;IServiceOrderNo@1100528607 : Code[20];IServiceControlPeriodeDate@1100528606 : Date;ISourceType@1100528610 : 'Call,Contract,Direct,Estimate,,,Modification,Replacement';IWork@1100528605 : ' ,Contract,Modification,Replacement';INo@1100528604 : Code[20];ICustomerNo@1100528603 : Code[20];IGlobalDim1@1100528602 : Code[20];IContractGroup@1100528601 : Code[20];IAdditional@1100528600 : Boolean) CostPlusDec : Decimal;
    VAR
      ServiceOrderCostPlusEntry@1100526202 : Record 11012825;
      DataSource@1100526207 : 'Service Ledger,Hour Accounting,Hour Accounting Surcharge,Inventory,Purchase Control,Sales Line,Cost Plus Entry';
      CostType@1100526206 : ' ,Labor,Material,Subcontracting,Plant,Sundry';
      Type@1100528609 : 'Revenue,Cost,Surcharge Soft,Surcharge Firm,Open Purchase,Received not Invoiced,Hours';
    BEGIN
      ServiceOrderCostPlusEntry.SETCURRENTKEY("Service Order No.", Invoiced, Chargeable, "Additional Cost");
      ServiceOrderCostPlusEntry.SETRANGE("Service Order No.", IServiceOrderNo);
      ServiceOrderCostPlusEntry.SETRANGE("Additional Cost", IAdditional);
      ServiceOrderCostPlusEntry.SETRANGE(Invoiced, FALSE);
      ServiceOrderCostPlusEntry.SETRANGE(Chargeable, TRUE);
      ServiceOrderCostPlusEntry.CALCSUMS("Invoice Price (LCY)");
      IF ServiceOrderCostPlusEntry."Invoice Price (LCY)" <> 0 THEN
        InsertOrderCostRevenue(
          IReportingDate, IServiceOrderNo, IServiceControlPeriodeDate, ISourceType, IWork, INo, DataSource::"Cost Plus Entry",
          0, 0, 0, 0, ServiceOrderCostPlusEntry."Invoice Price (LCY)", 0, IAdditional, CostType::" ", Type::Revenue,
          ICustomerNo, IGlobalDim1, IContractGroup);
    END;

    LOCAL PROCEDURE CalculateInvoiceInProcess@1100526259(IReportingDate@1100528608 : Date;IServiceOrderNo@1100528607 : Code[20];IServiceControlPeriodeDate@1100528606 : Date;ISourceType@1100528610 : 'Call,Contract,Direct,Estimate,,,Modification,Replacement';IWork@1100528605 : ' ,Contract,Modification,Replacement';INo@1100528604 : Code[20];ICustomerNo@1100528603 : Code[20];IGlobalDim1@1100528602 : Code[20];IContractGroup@1100528601 : Code[20];IAdditional@1100528600 : Boolean);
    VAR
      SalesLine@1100526202 : Record 37;
      DataSource@1100526207 : 'Service Ledger,Hour Accounting,Hour Accounting Surcharge,Inventory,Purchase Control,Sales Line,Cost Plus Entry';
      CostType@1100526206 : ' ,Labor,Material,Subcontracting,Plant,Sundry';
      Type@1100528609 : 'Revenue,Cost,Surcharge Soft,Surcharge Firm,Open Purchase,Received not Invoiced,Hours';
    BEGIN
      SalesLine.SETCURRENTKEY(
        "Document Type", "Service Invoice", "Service Order No.", "Base Service Order No.", "Cost Plus Line No.",
        "Additional Cost (Service)");
      SalesLine.SETRANGE("Document Type", SalesLine."Document Type"::Invoice);
      SalesLine.SETRANGE("Service Invoice", TRUE);
      SalesLine.SETRANGE("Service Order No.", IServiceOrderNo);
      SalesLine.SETRANGE("Additional Cost (Service)", IAdditional);
      SalesLine.CALCSUMS("Amount (LCY)");
      IF SalesLine."Amount (LCY)" <> 0 THEN
        InsertOrderCostRevenue(
          IReportingDate, IServiceOrderNo, IServiceControlPeriodeDate, ISourceType, IWork, INo, DataSource::"Sales Line",
          0, 0, 0, 0, SalesLine."Amount (LCY)", 0, IAdditional, CostType::" ", Type::Revenue,
          ICustomerNo, IGlobalDim1, IContractGroup);
    END;

    LOCAL PROCEDURE CalculateCreditMemoInProcess@1100526275(IReportingDate@1100528608 : Date;IServiceOrderNo@1100528607 : Code[20];IServiceControlPeriodeDate@1100528606 : Date;ISourceType@1100528610 : 'Call,Contract,Direct,Estimate,,,Modification,Replacement';IWork@1100528605 : ' ,Contract,Modification,Replacement';INo@1100528604 : Code[20];ICustomerNo@1100528603 : Code[20];IGlobalDim1@1100528602 : Code[20];IContractGroup@1100528601 : Code[20];IAdditional@1100528600 : Boolean);
    VAR
      SalesLine@1100526202 : Record 37;
      DataSource@1100526206 : 'Service Ledger,Hour Accounting,Hour Accounting Surcharge,Inventory,Purchase Control,Sales Line,Cost Plus Entry';
      CostType@1100526207 : ' ,Labor,Material,Subcontracting,Plant,Sundry';
      Type@1100528609 : 'Revenue,Cost,Surcharge Soft,Surcharge Firm,Open Purchase,Received not Invoiced,Hours';
    BEGIN
      SalesLine.SETCURRENTKEY(
        "Document Type", "Service Invoice", "Service Order No.", "Base Service Order No.", "Cost Plus Line No.",
        "Additional Cost (Service)");
      SalesLine.SETRANGE("Document Type", SalesLine."Document Type"::"Credit Memo");
      SalesLine.SETRANGE("Service Invoice", TRUE);
      SalesLine.SETRANGE("Service Order No.", IServiceOrderNo);
      SalesLine.SETRANGE("Additional Cost (Service)", IAdditional);
      SalesLine.CALCSUMS("Amount (LCY)");
      IF SalesLine."Amount (LCY)" <> 0 THEN
        InsertOrderCostRevenue(
          IReportingDate, IServiceOrderNo, IServiceControlPeriodeDate, ISourceType, IWork, INo, DataSource::"Sales Line",
          0, 0, 0, 0, -SalesLine."Amount (LCY)", 0, IAdditional, CostType::" ", Type::Revenue,
          ICustomerNo, IGlobalDim1, IContractGroup);
    END;

    LOCAL PROCEDURE CalculateBudget@1100526211(IReportingDate@1100528601 : Date;IServiceOrderNo@1210190011 : Code[20];IServiceControlPeriodeDate@1210190010 : Date;ISourceType@1210190009 : 'Call,Contract,Direct,Estimate,,,Modification,Replacement';IWork@1210190008 : ' ,Contract,Modification,Replacement';INo@1210190007 : Code[20];ICustomerNo@1210190004 : Code[20];IGlobalDim1@1210190003 : Code[20];IContractGroup@1210190002 : Code[20];IAdditional@1210190001 : Boolean);
    VAR
      ServiceOrderObject@1100528600 : Record 11071724;
    BEGIN
      IF (ISourceType = ISourceType::Contract) AND IAdditional THEN
        EXIT;

      ServiceOrderObject.SETRANGE("Service Order No.", IServiceOrderNo);
      IF (ISourceType = ISourceType::Contract) AND ServiceOrderObject.FINDSET THEN BEGIN
        REPEAT
          CalculateBudgetByObject(
            IReportingDate, IServiceOrderNo, ServiceOrderObject."Object No.", ServiceOrderObject."Maintenance Scheme",
            IServiceControlPeriodeDate, ISourceType, IWork, INo, ICustomerNo, IGlobalDim1, IContractGroup, IAdditional);
        UNTIL ServiceOrderObject.NEXT = 0;
      END ELSE BEGIN
        CalculateBudgetByObject(
          IReportingDate, IServiceOrderNo, '', '',
          IServiceControlPeriodeDate, ISourceType, IWork, INo, ICustomerNo, IGlobalDim1, IContractGroup, IAdditional);
      END;
    END;

    LOCAL PROCEDURE CalculateBudgetByObject@1100528635(IReportingDate@1100528601 : Date;IServiceOrderNo@1210190011 : Code[20];IServiceObjectNo@1100528605 : Code[20];IMaintenanceScheme@1100528606 : Code[20];IServiceControlPeriodeDate@1210190010 : Date;ISourceType@1210190009 : 'Call,Contract,Direct,Estimate,,,Modification,Replacement';IWork@1210190008 : ' ,Contract,Modification,Replacement';INo@1210190007 : Code[20];ICustomerNo@1210190004 : Code[20];IGlobalDim1@1210190003 : Code[20];IContractGroup@1210190002 : Code[20];IAdditional@1210190001 : Boolean);
    VAR
      ServiceOrderBudgetLine@1100526201 : Record 11012875;
      ServiceOrderObject@1100528600 : Record 11071724;
      SOBudgetLineType@1210190000 : 'Budget,Revenue';
      TotalAmount@1100528604 : Decimal;
      TotalHours@1100528603 : Decimal;
      TotalLabor@1100528602 : Decimal;
      TotalSurcharge@1100528609 : Decimal;
      FinishedAmount@1210190005 : Decimal;
      FinishedPerc@1210190006 : Decimal;
    BEGIN
      ServiceOrderBudgetLine.SETRANGE("Service Order No.", IServiceOrderNo);
      ServiceOrderBudgetLine.SETRANGE("Budget Type", ServiceOrderBudgetLine."Budget Type"::Order);
      IF IServiceObjectNo <> '' THEN
        ServiceOrderBudgetLine.SETRANGE("Object No.", IServiceObjectNo);
      IF IMaintenanceScheme <> '' THEN
        ServiceOrderBudgetLine.SETRANGE("Maintenance Scheme", IMaintenanceScheme);
      ServiceOrderBudgetLine.SETRANGE("Additional Cost", IAdditional);
      IF ServiceOrderBudgetLine.FINDSET THEN BEGIN
        REPEAT
          IF NOT ServiceOrderBudgetLine."Surcharge Line" THEN BEGIN
            TotalAmount += ServiceOrderBudgetLine.Amount;
            TotalHours += ServiceOrderBudgetLine.Hours;
            IF ServiceOrderBudgetLine."Cost Type" = ServiceOrderBudgetLine."Cost Type"::Labor THEN
              TotalLabor += ServiceOrderBudgetLine.Amount;
          END ELSE
            TotalSurcharge += ServiceOrderBudgetLine.Amount;
          IF ServiceOrderBudgetLine.Finished THEN
            FinishedAmount += ServiceOrderBudgetLine.Amount;
        UNTIL ServiceOrderBudgetLine.NEXT = 0;

        IF (TotalAmount + TotalSurcharge) <> 0 THEN
          FinishedPerc := FinishedAmount / (TotalAmount + TotalSurcharge) * 100;
      END;
      IF (ServiceOrderBudgetLine.ISEMPTY) OR (TotalAmount + TotalSurcharge = 0) THEN
        IF ServiceOrderObject.GET(IServiceOrderNo, IServiceObjectNo, IMaintenanceScheme) THEN
          IF ServiceOrderObject.Finished THEN
            FinishedPerc := 100;

      InsertSOBudgetLine(
        IReportingDate, IServiceOrderNo, IServiceObjectNo, IMaintenanceScheme, IWork, INo, IServiceControlPeriodeDate, ISourceType,
        TotalAmount, TotalHours, TotalLabor, TotalSurcharge, FinishedPerc, ICustomerNo, IGlobalDim1, IContractGroup,
        IAdditional, SOBudgetLineType::Budget, '');
    END;

    LOCAL PROCEDURE CalculateBudgetRevenue@1210190012(IReportingDate@1210190009 : Date;IServiceOrderNo@1210190008 : Code[20];IServiceControlPeriodeDate@1210190007 : Date;ISourceType@1210190006 : 'Call,Contract,Direct,Estimate,,,Modification,Replacement';IWork@1210190005 : ' ,Contract,Modification,Replacement';INo@1210190004 : Code[20];ICustomerNo@1210190003 : Code[20];IGlobalDim1@1210190002 : Code[20];IContractGroup@1210190001 : Code[20]);
    VAR
      ServiceOrder@1210190010 : Record 11012823;
      ServiceOrderCostPlusEntry@1210190012 : Record 11012825;
      Amount@1210190011 : Decimal;
      SOBudgetLineType@1210190013 : 'Budget,Revenue';
    BEGIN
      ServiceOrder.GET(IServiceOrderNo);
      CASE ServiceOrder."Settlement Method" OF
        ServiceOrder."Settlement Method"::"Fixed Price":
          Amount := ServiceOrder."Order Amount (LCY)";
        ServiceOrder."Settlement Method"::"Cost Plus":
          BEGIN
            ServiceOrderCostPlusEntry.SETCURRENTKEY("Service Order No.", Invoiced, Chargeable, "Additional Cost");
            ServiceOrderCostPlusEntry.SETRANGE("Service Order No.", IServiceOrderNo);
      //      ServiceOrderCostPlusEntry.SETRANGE("Additional Cost", IAdditional);
            ServiceOrderCostPlusEntry.SETRANGE(Invoiced, TRUE);
            ServiceOrderCostPlusEntry.CALCSUMS("Invoice Price (LCY)");
            Amount := ServiceOrderCostPlusEntry."Invoice Price (LCY)";

            ServiceOrderCostPlusEntry.SETRANGE(Invoiced, FALSE);
            ServiceOrderCostPlusEntry.SETRANGE(Chargeable, TRUE);
            ServiceOrderCostPlusEntry.CALCSUMS("Invoice Price (LCY)");
            Amount += ServiceOrderCostPlusEntry."Invoice Price (LCY)";
          END;
      END;

      IF Amount <> 0 THEN
        InsertSOBudgetLine(
          IReportingDate, IServiceOrderNo, '', '', IWork, INo, IServiceControlPeriodeDate, ISourceType, Amount, 0, 0, 0, 0, ICustomerNo,
          IGlobalDim1, IContractGroup, TRUE, SOBudgetLineType::Revenue, ''); // Revenue
    END;

    LOCAL PROCEDURE InsertOrderCostRevenue@1100526213(IReportingDate@1100528601 : Date;IServiceOrderNo@1100528602 : Code[20];IServiceControlPeriodeDate@1100528603 : Date;ISourceType@1100528609 : Option;IWork@1100526211 : ' ,Contract,Modification,Replacement';INo@1100526200 : Code[20];IDataSource@1100526204 : 'Service Ledger,Hour Accounting,Hour Accounting Surcharge,Inventory,Purchase Control,Sales Line,Cost Plus Entry';ICostAmount@1100528605 : Decimal;IHours@1100528606 : Decimal;ICostAmountLabor@1100528610 : Decimal;IClosedCostAmount@1100528611 : Decimal;IRevenues@1100528607 : Decimal;IClosedRevenues@1100528612 : Decimal;IAdditional@1100526205 : Boolean;ICostType@1100526210 : ' ,Labor,Material,Subcontracting,Plant,Sundry';IType@1100528600 : 'Revenue,Cost,Surcharge Soft,Surcharge Firm,Open Purchase,Received not Invoiced,Hours';ICustomerNo@1100526214 : Code[20];IGlobalDim1@1100526213 : Code[20];IContractGroup@1100526212 : Code[20]);
    VAR
      ServiceOrderCostRevenue@1100526209 : Record 11071756;
      ServiceOrder@1100525000 : Record 11012823;
      ServiceOrderControl@1100528608 : Record 11071758;
      ServiceContract@1100528800 : Record 11012812;
      LineNo@1100528604 : Integer;
    BEGIN
      ServiceOrderCostRevenue.INIT;
      ServiceOrderCostRevenue.SETRANGE("Reporting Date", IReportingDate);
      ServiceOrderCostRevenue.SETRANGE("Service Order No.", IServiceOrderNo);
      IF ServiceOrderCostRevenue.FINDLAST THEN
        LineNo := ServiceOrderCostRevenue."Line No." + 10000
      ELSE
        LineNo := 10000;

      ServiceOrder.GET(IServiceOrderNo);

      IF NOT ServiceOrderControl.GET(IReportingDate, IServiceOrderNo, IServiceControlPeriodeDate, IWork, INo) THEN
        ServiceOrderControl.INIT;

      ServiceOrderCostRevenue.RESET;
      ServiceOrderCostRevenue.INIT;
      ServiceOrderCostRevenue."Reporting Date" := IReportingDate;
      ServiceOrderCostRevenue."Service Order No." := IServiceOrderNo;
      IF ServiceContract.IsAlwaysCloseOrdersAllowed(ServiceOrder."Service Contract No.", ServiceOrder."Source Type") THEN
        ServiceOrderCostRevenue.Status := ServiceOrder.Status::Finished
      ELSE
        ServiceOrderCostRevenue.Status := ServiceOrder.Status;
      ServiceOrderCostRevenue."Service Control Period Date" := IServiceControlPeriodeDate;
      ServiceOrderCostRevenue."Line No." := LineNo;
      ServiceOrderCostRevenue.Work := IWork;
      ServiceOrderCostRevenue.VALIDATE("No.", INo);
      ServiceOrderCostRevenue."Data Source" := IDataSource;
      ServiceOrderCostRevenue."Cost Amount" := ICostAmount;
      ServiceOrderCostRevenue."Cost Amount (Labor)" := ICostAmountLabor;
      ServiceOrderCostRevenue."Cost Amount (Other)" := ICostAmount - ICostAmountLabor;
      ServiceOrderCostRevenue.Hours := IHours;
      ServiceOrderCostRevenue.Revenues := IRevenues;
      ServiceOrderCostRevenue.Additional :=
        IAdditional OR ((ISourceType = ServiceOrder."Source Type"::Direct) AND (IWork = IWork::Contract));
      ServiceOrderCostRevenue."Cost Type" := ICostType;
      ServiceOrderCostRevenue."Customer No." := ICustomerNo;
      ServiceOrderCostRevenue."Global Dimension 1 Code" := IGlobalDim1;
      ServiceOrderCostRevenue."Contract Group" := IContractGroup;
      ServiceOrderCostRevenue."Data Source" := IDataSource;
      ServiceOrderCostRevenue.Type := IType;
      ServiceOrderCostRevenue."Source Type" := ISourceType;
      ServiceOrderCostRevenue.Discipline := ServiceOrder.Discipline;
      ServiceOrderCostRevenue."Trade Speciality" := ServiceOrder."Trade Speciality";
      ServiceOrderCostRevenue."Territory Code" := ServiceOrder."Territory Code";
      ServiceOrderCostRevenue."Service Category" := ServiceOrderControl."Service Category";
      ServiceOrderCostRevenue."Closed Cost Amount" := IClosedCostAmount;
      ServiceOrderCostRevenue."Closed Revenues" := IClosedRevenues;
      ServiceOrderCostRevenue."Service Location No." := ServiceOrder."Service Location No.";
      ServiceOrderCostRevenue.INSERT;
    END;

    LOCAL PROCEDURE ProgressFinished@1100528625(IFinished@1100528600 : Boolean) OPercentage : Decimal;
    BEGIN
      IF IFinished THEN
        OPercentage := 100;
    END;

    LOCAL PROCEDURE ContractPrognosisExists@1100528600(VAR OContractPrognosis@1100528600 : Record 11071699;IIndexDate@1100528601 : Date;IContractNo@1100528602 : Code[20];IBudgetSalesRate@1100528603 : 'Budget,Revenue') PrognosisPresent : Boolean;
    BEGIN
      OContractPrognosis.SETRANGE(Code, IContractNo);
      EXIT(OContractPrognosis.FINDFIRST);
    END;

    LOCAL PROCEDURE GetRelPercBudgetPrognContract@1100528616(IServiceContract@1100528600 : Record 11012812;IReportingDate@1100528605 : Date;IStartPeriodDate@1100528601 : Date;IEndPeriodDate@1100528610 : Date) : Decimal;
    VAR
      SCBudgetCallsRelease@1100528602 : Record 11071699;
    BEGIN
      EXIT(SCBudgetCallsRelease.CalcTotalReleasePerc(IServiceContract."No.", IStartPeriodDate, IReportingDate, IEndPeriodDate));
    END;

    PROCEDURE CalcPrognosisAndAverageRate@1100526221(IHoursBudget@1100526201 : Decimal;IAllowdHours@1100526200 : Decimal;IActualHours@1100526202 : Decimal;IActualLaborCost@1100526203 : Decimal;IActualCost@1100526204 : Decimal;ICostBudget@1100526205 : Decimal;ILaborBudget@1100526206 : Decimal;VAR OHoursPrognosis@1100526207 : Decimal;VAR OPrognosisEnd@1100526208 : Decimal;VAR OBudgetRate@1100526209 : Decimal;VAR OAverageRate@1100526210 : Decimal;VAR OHoursPrognosisEndResult@1100528604 : Decimal;VAR OPrognosisEndResult@1100528603 : Decimal);
    VAR
      ServiceSetup@1100528605 : Record 11012800;
      PrognosisPercentage@1100526211 : Decimal;
      PercentageToGo@1100526212 : Decimal;
      HoursToGo@1100526213 : Decimal;
      LaborPrognosisEnd@1210190001 : Decimal;
      LaborPrognosis@1210190002 : Decimal;
      BudgetOther@1100528600 : Decimal;
      ActualOther@1100528601 : Decimal;
      PrognosisEndOther@1100528602 : Decimal;
    BEGIN
      ServiceSetup.GET;
      IF IHoursBudget <> 0 THEN BEGIN
        PrognosisPercentage := (IAllowdHours / IHoursBudget) * 100;
        PercentageToGo := 100 - PrognosisPercentage;
        IF ServiceSetup."Calc. Prognosis Based On" = ServiceSetup."Calc. Prognosis Based On"::"Actual Hours" THEN BEGIN
          IF (PrognosisPercentage <> 0) AND (IActualHours <> 0) THEN
            HoursToGo := (IActualHours / PrognosisPercentage) * PercentageToGo
          ELSE
            HoursToGo := IHoursBudget;
        END ELSE
          IF IHoursBudget - IActualHours >= 0 THEN
            HoursToGo := IHoursBudget * PercentageToGo / 100 //mg.c, 05-01-12: M32007
          ELSE
            HoursToGo := 0;

        OBudgetRate := ILaborBudget / IHoursBudget;
      END ELSE BEGIN
        PrognosisPercentage := 0;
        PercentageToGo := 100;
        HoursToGo := 0;
        OBudgetRate := 0;
      END;

      OHoursPrognosis := HoursToGo + IActualHours;
      IF IActualHours <> 0 THEN
        OAverageRate := IActualLaborCost / IActualHours
      ELSE
        OAverageRate := 0;

      IF OAverageRate <> 0 THEN
        LaborPrognosis := OAverageRate * HoursToGo
      ELSE
        LaborPrognosis := OBudgetRate * HoursToGo;

      LaborPrognosisEnd := LaborPrognosis + IActualLaborCost;
      BudgetOther := ICostBudget - ILaborBudget;
      ActualOther := IActualCost - IActualLaborCost;

      IF ActualOther > BudgetOther THEN
        PrognosisEndOther := ActualOther
      ELSE
        PrognosisEndOther := BudgetOther;

      OPrognosisEnd := LaborPrognosisEnd + PrognosisEndOther;

      OHoursPrognosisEndResult := IHoursBudget - OHoursPrognosis;
      OPrognosisEndResult := ICostBudget - OPrognosisEnd;
    END;

    LOCAL PROCEDURE CalcBudgetOfSO@1100528605(IServiceOrderNo@1100528600 : Code[20];IServiceContractNo@1100525000 : Code[20];IObjectNo@1100528601 : Code[20];IMaintenanceSchemeCode@1100528602 : Code[20];IAdditional@1100528614 : Boolean;VAR OLaborAmount@1100528603 : Decimal;VAR OMaterialAmount@1100528607 : Decimal;VAR OSubcontractingAmount@1100528608 : Decimal;VAR OPlantAmount@1100528611 : Decimal;VAR OSundryAmount@1100528613 : Decimal;VAR OHours@1100528604 : Decimal;VAR OTotalCost@1100528609 : Decimal;VAR OSurcharge@1100528610 : Decimal;VAR OFinishedPercentage@1100528605 : Decimal);
    VAR
      ServiceOrderBudgetLine@1100528612 : Record 11012875;
      FinishedAmount@1100528606 : Decimal;
    BEGIN
      OLaborAmount := 0;
      OMaterialAmount := 0;
      OSubcontractingAmount := 0;
      OPlantAmount := 0;
      OSundryAmount := 0;
      OHours := 0;
      OTotalCost := 0;
      OSurcharge := 0;
      OFinishedPercentage := 0;

      ServiceOrderBudgetLine.SETRANGE("Budget Type", ServiceOrderBudgetLine."Budget Type"::Order);
      ServiceOrderBudgetLine.SETRANGE("Service Order No.", IServiceOrderNo);
      ServiceOrderBudgetLine.SETRANGE("Service Contract No.", IServiceContractNo);
      IF IObjectNo <> '' THEN
        ServiceOrderBudgetLine.SETRANGE("Object No.", IObjectNo);
      IF IMaintenanceSchemeCode <> '' THEN
        ServiceOrderBudgetLine.SETRANGE("Maintenance Scheme", IMaintenanceSchemeCode);
      ServiceOrderBudgetLine.SETRANGE("Additional Cost", IAdditional);
      IF ServiceOrderBudgetLine.FINDSET THEN BEGIN
        REPEAT
          IF NOT ServiceOrderBudgetLine."Surcharge Line" THEN BEGIN
            OTotalCost += ServiceOrderBudgetLine.Amount;
            OHours += ServiceOrderBudgetLine.Hours;
            CASE ServiceOrderBudgetLine."Cost Type" OF
              ServiceOrderBudgetLine."Cost Type"::Labor:
                OLaborAmount += ServiceOrderBudgetLine.Amount;
              ServiceOrderBudgetLine."Cost Type"::Material:
                OMaterialAmount += ServiceOrderBudgetLine.Amount;
              ServiceOrderBudgetLine."Cost Type"::Subcontracting:
                OSubcontractingAmount += ServiceOrderBudgetLine.Amount;
              ServiceOrderBudgetLine."Cost Type"::Plant:
                OPlantAmount += ServiceOrderBudgetLine.Amount;
              ServiceOrderBudgetLine."Cost Type"::Sundry:
                OSundryAmount += ServiceOrderBudgetLine.Amount;
            END;
          END ELSE
            OSurcharge += ServiceOrderBudgetLine.Amount;
          IF ServiceOrderBudgetLine.Finished THEN
            FinishedAmount += ServiceOrderBudgetLine.Amount;
        UNTIL ServiceOrderBudgetLine.NEXT = 0;

        IF (OTotalCost + OSurcharge) <> 0 THEN
          OFinishedPercentage := FinishedAmount / (OTotalCost + OSurcharge) * 100;
      END;
    END;

    LOCAL PROCEDURE SCBudgetLinesVersionCallsExists@1100528618(IServiceContractNo@1100528601 : Code[20];IIndexDate@1100528602 : Date) : Boolean;
    VAR
      SCBudgetLineVersionCalls@1100528600 : Record 11071929;
    BEGIN
      SCBudgetLineVersionCalls.SETRANGE("Service Contract No.", IServiceContractNo);
      SCBudgetLineVersionCalls.SETFILTER("Index Date", '<=%1', IIndexDate);
      EXIT(NOT SCBudgetLineVersionCalls.ISEMPTY);
    END;

    PROCEDURE InsertSCBudgetCalls@1100528620(IReportingDate@1100528615 : Date;IServiceContractNo@1100528600 : Code[20];IDateFilterStart@1100528601 : Date;IDateFilterEnd@1100528602 : Date);
    VAR
      ServiceContract@1100528619 : Record 11012812;
      ServiceOrder@1100528608 : Record 11012823;
      ServiceContractCtrlBudget@1100528618 : Record 11071759;
      SCBudgetVersionCalls@1100528620 : Record 11071928;
      GetMaintenanceSalesAndCost@1100528605 : Codeunit 11012827;
      ServiceSurchargeManagement@1100528607 : Codeunit 11012834;
      NoOfDaysPerYear@1100528603 : Integer;
      BudgetPercReleased@1100528604 : Decimal;
      SurchargeAmount@1100528606 : Decimal;
      BudgetLineType@1100528617 : 'Budget,Budget Calls,Budget Additional,Revenue Calls,Revenue Additional,Revenue ';
      Factor@1100528609 : Decimal;
    BEGIN
      ServiceContract.GET(IServiceContractNo);
      BudgetPercReleased := GetRelPercBudgetPrognContract(ServiceContract, IReportingDate, IDateFilterStart, IDateFilterEnd);

      NoOfDaysPerYear := GetMaintenanceSalesAndCost.NoOfDaysPerYear(IDateFilterStart);

      SCBudgetVersionCalls.SETRANGE("Service Contract No.", IServiceContractNo);
      SCBudgetVersionCalls.SETFILTER("Index Date", '<=%1', IDateFilterEnd);
      IF NOT SCBudgetVersionCalls.FINDLAST THEN
        EXIT;

      SCBudgetVersionCalls.CALCFIELDS("Cost Amount", Hours, "Cost Amount (Material)", "Cost Amount (Labor)",
        "Cost Amount (Subcontr.)", "Cost Amount (Plant)", "Cost Amount (Sundry)");

      SurchargeAmount := ServiceSurchargeManagement.CalculateSCSurchargeAmount(
        IServiceContractNo, ServiceOrder."Source Type"::Contract,
        IDateFilterEnd,
        SCBudgetVersionCalls."Cost Amount (Labor)",
        SCBudgetVersionCalls."Cost Amount (Material)",
        SCBudgetVersionCalls."Cost Amount (Subcontr.)",
        SCBudgetVersionCalls."Cost Amount (Plant)",
        SCBudgetVersionCalls."Cost Amount (Sundry)",
        SCBudgetVersionCalls."Cost Amount");

      Factor := GetMaintenanceSalesAndCost.NoOfDaysInterval(ServiceContract, IDateFilterStart, IDateFilterEnd) / NoOfDaysPerYear;

      InsertSCBudgetLine(
        IReportingDate, IServiceContractNo, '', '', IDateFilterStart,
        ROUND(SCBudgetVersionCalls."Cost Amount" * Factor),
        ROUND(SCBudgetVersionCalls.Hours * Factor),
        ROUND(SCBudgetVersionCalls."Cost Amount (Labor)" * Factor),
        ROUND(SurchargeAmount * Factor),
        BudgetPercReleased, BudgetLineType::"Budget Calls", '', '', TRUE, '', '', ServiceContractCtrlBudget);
    END;

    LOCAL PROCEDURE InsertSCCategoryBudget@1100528634(IReportingDate@1100528615 : Date;IServiceContractNo@1100528600 : Code[20];IServiceCategory@1100528610 : Code[10];ISourceType@1100528611 : 'Contract,Calls,Direct';IControlPeriodCode@1100528616 : Code[10];IDateFilterStart@1100528601 : Date;IDateFilterEnd@1100528602 : Date);
    VAR
      ServiceContract@1100528619 : Record 11012812;
      ServiceOrder@1100528608 : Record 11012823;
      ServiceContractCtrlBudget@1100528618 : Record 11071759;
      SCBudgetVersion@1100528604 : Record 11071990;
      GetMaintenanceSalesAndCost@1100528605 : Codeunit 11012827;
      SCControlbyPeriodMgt@1100529600 : Codeunit 11012885;
      NoOfDaysPerYear@1100528603 : Integer;
      SurchargeAmount@1100528606 : Decimal;
      Factor@1100528609 : Decimal;
    BEGIN
      ServiceContract.GET(IServiceContractNo);
      NoOfDaysPerYear := GetMaintenanceSalesAndCost.NoOfDaysPerYear(IDateFilterStart);

      SCBudgetVersion.SETRANGE("Service Contract No.", IServiceContractNo);
      SCBudgetVersion.SETRANGE("Source Type", ISourceType);
      SCBudgetVersion.SETFILTER("Index Date", '<=%1', IDateFilterEnd);
      IF NOT SCBudgetVersion.FINDLAST THEN
        EXIT;
      SCBudgetVersion.SETFILTER("Service Category Filter", IServiceCategory);
      SCBudgetVersion.CALCFIELDS("Cost Amount", Hours, "Cost Amount (Material)", "Cost Amount (Labor)",
        "Cost Amount (Subcontr.)", "Cost Amount (Plant)", "Cost Amount (Sundry)");

      SurchargeAmount := SCControlbyPeriodMgt.GetSCBudgetVersionSurchargeAmount(
        SCBudgetVersion, ISourceType, IDateFilterEnd, IServiceCategory, FALSE, 0, FALSE, '');

      Factor := GetMaintenanceSalesAndCost.NoOfDaysInterval(ServiceContract, IDateFilterStart, IDateFilterEnd) / NoOfDaysPerYear;

      IF ISourceType <> ISourceType::Direct THEN
        InsertSCBudgetLine(
          IReportingDate, IServiceContractNo, '', '', IDateFilterStart,
          ROUND(SCBudgetVersion."Cost Amount" * Factor),
          ROUND(SCBudgetVersion.Hours * Factor),
          ROUND(SCBudgetVersion."Cost Amount (Labor)" * Factor),
          ROUND(SurchargeAmount * Factor),
          0, ISourceType, '', IServiceCategory, TRUE, '', '', ServiceContractCtrlBudget)
      ELSE
        InsertSOBudgetLine(
          IReportingDate, '', '', '', 1, IServiceContractNo, IDateFilterStart, ServiceOrder."Source Type"::Direct,
          ROUND(SCBudgetVersion."Cost Amount" * Factor), ROUND(SCBudgetVersion.Hours * Factor),
          ROUND(SCBudgetVersion."Cost Amount (Labor)" * Factor), ROUND(SurchargeAmount * Factor),
          0, ServiceContract."Customer No.", ServiceContract."Global Dimension 1 Code",
          ServiceContract."Contract Group", TRUE, 0, IServiceCategory);
    END;

    LOCAL PROCEDURE UpdateControlPeriods@1100528615(VAR ICustomer@1100528600 : Record 18;VAR IReportingDate@1100528602 : Date);
    VAR
      Customer@1100528601 : Record 18;
      ServiceContractCtrlPeriod@1100528604 : Record 11071746;
      ServiceContract@1100528605 : Record 11012812;
      CreatePeriodsUntil@1100528603 : Date;
    BEGIN
      Customer.COPY(ICustomer);
      IF NOT Customer.FINDSET THEN
        EXIT;
      REPEAT
        ServiceContract.SETCURRENTKEY("Customer No.");
        ServiceContract.SETRANGE("Customer No.", Customer."No.");
        ServiceContract.SETFILTER("Starting Date", '<>%1', 0D);
        ServiceContract.SETFILTER(Status, '%1|%2|%3',
          ServiceContract.Status::Order, ServiceContract.Status::"Invoicing Allowed", ServiceContract.Status::Expired);
        IF ServiceContract.FINDSET THEN
          REPEAT
            IF ServiceContract."Ending Date" = 0D THEN
              CreatePeriodsUntil := CALCDATE(ServiceContract."Control Period Interval", IReportingDate)
            ELSE
              CreatePeriodsUntil := ServiceContract."Ending Date";
            ServiceContractCtrlPeriod.UpdateControlPeriodsUntil(ServiceContract."No.", CreatePeriodsUntil, TRUE);
          UNTIL ServiceContract.NEXT = 0;
      UNTIL Customer.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateServiceContractArr@1100528619(VAR ICustomer@1100528600 : Record 18);
    VAR
      Customer@1100528601 : Record 18;
      ServiceContract@1100528602 : Record 11012812;
      ContractObject@1100528604 : Record 11071702;
      ContractObjectMaintenance@1100528603 : Record 11071692;
      ServiceContractCtrlPeriod@1100528605 : Record 11071746;
      DateFilterEnd@1100528606 : Date;
      RecordCounter@1100528607 : Integer;
      RecordCount@1100528608 : Integer;
    BEGIN
      Customer.COPY(ICustomer);
      IF NOT Customer.FINDSET THEN
        EXIT;
      RecordCount := Customer.COUNT;
      REPEAT
        RecordCounter += 1;

        ServiceContract.SETCURRENTKEY("Customer No.");
        ServiceContract.SETRANGE("Customer No.", Customer."No.");
        ServiceContract.SETFILTER("Starting Date", '<>%1', 0D);
        ServiceContract.SETFILTER(Status, '%1|%2|%3',
          ServiceContract.Status::Order, ServiceContract.Status::"Invoicing Allowed", ServiceContract.Status::Expired);
        IF ServiceContract.FINDSET THEN
          REPEAT
            ServiceContractCtrlPeriod.SETRANGE("Service Contract No.", ServiceContract."No.");
            ServiceContractCtrlPeriod.SETRANGE("Date Finished", 0D);
            IF ServiceContractCtrlPeriod.FINDLAST THEN BEGIN
              DateFilterEnd := ServiceContractCtrlPeriod."Ending Date";
              ContractObject.SETRANGE("Service Contract No.", ServiceContract."No.");
              IF ContractObject.FINDSET THEN
                REPEAT
                  ContractObjectMaintenance.SETRANGE("Service Contract No.", ContractObject."Service Contract No.");
                  ContractObjectMaintenance.SETRANGE("Object No.", ContractObject."Service Object No.");
                  IF ContractObjectMaintenance.FINDSET THEN
                    REPEAT
                      ContractObjectMaintenance.UpdateServiceContractArr(DateFilterEnd, FALSE, FALSE, FALSE);
                    UNTIL ContractObjectMaintenance.NEXT = 0;
                UNTIL ContractObject.NEXT = 0;
            END;
          UNTIL ServiceContract.NEXT = 0;
      UNTIL Customer.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckContract@1100528621(IServiceContractNo@1100528600 : Code[20];IReportingDate@1100528604 : Date;IReportingTime@1100528603 : Time) : Boolean;
    VAR
      ServiceContract@1100528601 : Record 11012812;
      ContractObject@1100528602 : Record 11071702;
      ContractObjectMaintenance@1100528606 : Record 11071692;
      ServiceContractCtrlPeriod@1100528607 : Record 11071746;
      ServiceCategory@1100528608 : Record 11071985;
      RecRef@1100528605 : RecordRef;
    BEGIN
      IF ServiceContract.GET(IServiceContractNo) THEN BEGIN
        RecRef.GETTABLE(ServiceContract);
        IF NOT (ServiceContract.Status IN [
          ServiceContract.Status::Order, ServiceContract.Status::"Invoicing Allowed", ServiceContract.Status::Expired])
        THEN
          LogControlMessageWithRef(
            ServiceContract."No.",
            STRSUBSTNO('%1 ' + Text003,
              ServiceContract.FIELDCAPTION(Status)),
            IReportingDate, IReportingTime, RecRef);
        IF ServiceContract."Starting Date" = 0D THEN
          LogControlMessageWithRef(
            ServiceContract."No.",
            STRSUBSTNO(Text005, ServiceContract.FIELDCAPTION("Starting Date")),
            IReportingDate, IReportingTime, RecRef);
        IF FORMAT(ServiceContract."Starting Date Control Period") = '' THEN
          LogControlMessageWithRef(
            ServiceContract."No.",
            STRSUBSTNO(Text005, ServiceContract.FIELDCAPTION("Starting Date Control Period")),
            IReportingDate, IReportingTime, RecRef);
        IF FORMAT(ServiceContract."Control Period Interval") = '' THEN
          LogControlMessageWithRef(
            ServiceContract."No.",
            STRSUBSTNO(Text005, ServiceContract.FIELDCAPTION("Control Period Interval")),
            IReportingDate, IReportingTime, RecRef);

        ContractObject.SETRANGE("Service Contract No.", IServiceContractNo);
        IF ContractObject.FINDSET THEN
          REPEAT
            RecRef.GETTABLE(ContractObject);
            IF ServiceContract."Invoice Type" = ServiceContract."Invoice Type"::Dynamic THEN
              IF ContractObject."Invoice From" = 0D THEN
                LogControlMessageWithRef(
                  ServiceContract."No.",
                  STRSUBSTNO(Text005, ContractObject.FIELDCAPTION("Invoice From")),
                  IReportingDate, IReportingTime, RecRef);
            IF ContractObject."Starting Date" = 0D THEN
              LogControlMessageWithRef(
                ServiceContract."No.",
                STRSUBSTNO(Text005, ContractObject.FIELDCAPTION("Starting Date")),
                IReportingDate, IReportingTime, RecRef);

            ContractObjectMaintenance.SETRANGE("Service Contract No.", ContractObject."Service Contract No.");
            ContractObjectMaintenance.SETRANGE("Object No.", ContractObject."Service Object No.");
            IF ContractObjectMaintenance.FINDSET THEN
              REPEAT
                RecRef.GETTABLE(ContractObjectMaintenance);
                IF ContractObjectMaintenance."Starting Date Maintenance" = 0D THEN
                  LogControlMessageWithRef(
                    ServiceContract."No.",
                    STRSUBSTNO(Text005, ContractObjectMaintenance.FIELDCAPTION("Starting Date Maintenance")),
                    IReportingDate, IReportingTime, RecRef);
                IF FORMAT(ContractObjectMaintenance."Maintenance Interval") = '' THEN
                  LogControlMessageWithRef(
                    ServiceContract."No.",
                    STRSUBSTNO(Text005, ContractObjectMaintenance.FIELDCAPTION("Maintenance Interval")),
                    IReportingDate, IReportingTime, RecRef);
              UNTIL ContractObjectMaintenance.NEXT = 0;
          UNTIL ContractObject.NEXT = 0;

        ServiceContractCtrlPeriod.SETRANGE("Service Contract No.", IServiceContractNo);
        ServiceContractCtrlPeriod.SETRANGE("Date Finished", 0D);
        IF ServiceContractCtrlPeriod.FINDSET THEN
          REPEAT
            RecRef.GETTABLE(ServiceContractCtrlPeriod);
            IF ServiceContractCtrlPeriod."Starting Date" = 0D THEN
              LogControlMessageWithRef(
                ServiceContract."No.",
                STRSUBSTNO(Text005, ServiceContractCtrlPeriod.FIELDCAPTION("Starting Date")),
                IReportingDate, IReportingTime, RecRef);
            IF ServiceContractCtrlPeriod."Ending Date" = 0D THEN
              LogControlMessageWithRef(
                ServiceContract."No.",
                STRSUBSTNO(Text005, ServiceContractCtrlPeriod.FIELDCAPTION("Ending Date")),
                IReportingDate, IReportingTime, RecRef);
          UNTIL ServiceContractCtrlPeriod.NEXT = 0;

        IF ServiceContract."Budget Based on" IN
          [ServiceContract."Budget Based on"::Category, ServiceContract."Budget Based on"::"Category + Maintenance Scheme"]
        THEN BEGIN
          ServiceCategory.SETRANGE("Service Contract No.", IServiceContractNo);
          IF ServiceCategory.ISEMPTY THEN
            LogControlMessageWithRef(
              ServiceContract."No.",
              STRSUBSTNO(Text008),
              IReportingDate, IReportingTime, RecRef);
        END;
      END;
      ServiceContract.CALCFIELDS("No. of Control Messages");
      EXIT(ServiceContract."No. of Control Messages" = 0);
    END;

    PROCEDURE CreateControlWithLog@1100528624(VAR IServiceContract@1100528600 : Record 11012812;IReportingDate@1100528605 : Date;IReportingTime@1100528604 : Time;ISingleContract@1100528601 : Boolean);
    VAR
      CreateServiceControl@1100528602 : Codeunit 11012845;
      ErrorMsg@1100528603 : Text[250];
    BEGIN
      TestServiceControlMethod;
      ClearOldControlMessages(IServiceContract."No.");
      IServiceContract."Control Build Date" := IReportingDate;
      IServiceContract."Control Build Time" := IReportingTime;
      IServiceContract.MODIFY;
      IF CheckContract(IServiceContract."No.", IReportingDate, IReportingTime) THEN BEGIN
        IF NOT ISingleContract THEN
          CreateServiceControl.SetNoContractDetailProgress(TRUE);
        COMMIT; // Next statement needs a commit
        IF NOT CreateServiceControl.RUN(IServiceContract) THEN BEGIN
          ErrorMsg := COPYSTR(GETLASTERRORTEXT, 1, MAXSTRLEN(ErrorMsg));
          LogControlMessage(IServiceContract."No.", ErrorMsg, IReportingDate, IReportingTime);
          CLEARLASTERROR;
        END;
      END;
    END;

    LOCAL PROCEDURE LogControlMessage@1100528623(IServiceContractNo@1100528601 : Code[20];IMessage@1100528600 : Text[250];IReportingDate@1100528605 : Date;IReportingTime@1100528604 : Time);
    VAR
      ServiceContractControlMsg@1100528602 : Record 11071956;
      LineNo@1100528603 : Integer;
    BEGIN
      IF IMessage = '' THEN
        EXIT;
      ServiceContractControlMsg.SETRANGE("Service Contract No.", IServiceContractNo);
      IF ServiceContractControlMsg.FINDLAST THEN
        LineNo := ServiceContractControlMsg."Line No.";
      LineNo += 10000;

      ServiceContractControlMsg.VALIDATE("Service Contract No.", IServiceContractNo);
      ServiceContractControlMsg."Line No." := LineNo;
      ServiceContractControlMsg."Log Date" := IReportingDate;
      ServiceContractControlMsg."Log Time" := IReportingTime;
      ServiceContractControlMsg.VALIDATE(Message, IMessage);
      ServiceContractControlMsg.INSERT(TRUE);
    END;

    LOCAL PROCEDURE LogControlMessageWithRef@1100528628(IServiceContractNo@1100528601 : Code[20];IMessage@1100528600 : Text[250];IReportingDate@1100528605 : Date;IReportingTime@1100528604 : Time;IRecRef@1100528606 : RecordRef);
    VAR
      FieldRef@1100528607 : FieldRef;
      KeyRef@1100528608 : KeyRef;
      i@1100528609 : Integer;
    BEGIN
      IF IMessage = '' THEN
        EXIT;
      IMessage := STRSUBSTNO('%1 %2 %3 ', IMessage, Text007, IRecRef.CAPTION);
      KeyRef := IRecRef.KEYINDEX(1);
      FOR i := 1 TO KeyRef.FIELDCOUNT DO BEGIN
        FieldRef := KeyRef.FIELDINDEX(i);
        IF i > 1 THEN
          IMessage := IMessage + ', ';
        IMessage := IMessage + STRSUBSTNO(Text006, FieldRef.CAPTION, FieldRef.VALUE);
      END;

      LogControlMessage(IServiceContractNo, IMessage, IReportingDate, IReportingTime);
    END;

    LOCAL PROCEDURE ClearOldControlMessages@1100528622(IServiceContractNo@1100528600 : Code[20]);
    VAR
      ServiceContractControlMsg@1100528601 : Record 11071956;
    BEGIN
      ServiceContractControlMsg.SETRANGE("Service Contract No.", IServiceContractNo);
      ServiceContractControlMsg.DELETEALL(TRUE);
    END;

    PROCEDURE SetNoContractDetailProgress@1100528626(INoContractDetailProgress@1100528600 : Boolean);
    BEGIN
      NoContractDetailProgress := INoContractDetailProgress;
    END;

    LOCAL PROCEDURE SaveLastSCCategoryControl@1100528629(IReportingDate@1100528601 : Date;IServiceContractNo@1100528602 : Code[20]);
    VAR
      SCCategoryControl@1100528600 : Record 11071988;
      SCCategoryPrognosisText@1100528603 : Record 11071996;
    BEGIN
      TmpLastSCCategoryControl.RESET;
      TmpLastSCCategoryControl.DELETEALL;

      SCCategoryControl.SETFILTER("Reporting Date", '<=%1', IReportingDate);
      SCCategoryControl.SETRANGE("Service Contract No.", IServiceContractNo);
      IF SCCategoryControl.FINDLAST THEN BEGIN
        SCCategoryControl.SETRANGE("Reporting Date", SCCategoryControl."Reporting Date");
        IF SCCategoryControl.FINDSET THEN
          REPEAT
            TmpLastSCCategoryControl := SCCategoryControl;
            TmpLastSCCategoryControl.INSERT;
          UNTIL SCCategoryControl.NEXT = 0;
      END;

      TmpLastSCCategoryPrognosisText.RESET;
      TmpLastSCCategoryPrognosisText.DELETEALL;

      SCCategoryPrognosisText.SETFILTER("Reporting Date", '<=%1', IReportingDate);
      SCCategoryPrognosisText.SETRANGE("Service Contract No.", IServiceContractNo);
      IF SCCategoryPrognosisText.FINDLAST THEN BEGIN
        SCCategoryPrognosisText.SETRANGE("Reporting Date", SCCategoryPrognosisText."Reporting Date");
        IF SCCategoryPrognosisText.FINDSET THEN
          REPEAT
            TmpLastSCCategoryPrognosisText := SCCategoryPrognosisText;
            TmpLastSCCategoryPrognosisText.INSERT;
          UNTIL SCCategoryPrognosisText.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE DetermineLastPrognosisValues@1100528641(VAR IOSCCategoryControl@1100528600 : Record 11071988);
    VAR
      DestSCCategoryPrognosisText@1100528603 : Record 11071996;
    BEGIN
      TmpLastSCCategoryControl.SETRANGE("Service Contract No.", IOSCCategoryControl."Service Contract No.");
      TmpLastSCCategoryControl.SETRANGE("Service Category", IOSCCategoryControl."Service Category");
      TmpLastSCCategoryControl.SETRANGE("Control Period Code", IOSCCategoryControl."Control Period Code");
      IF TmpLastSCCategoryControl.FINDLAST THEN BEGIN
        IOSCCategoryControl.CALCFIELDS(
          "Actual Hours (Maintenance)", "Actual Cost (Labor) (Maint.)", "Actual Cost (Other) (Maint.)",
          "Actual Hours (Calls)", "Actual Cost (Labor) (Calls)", "Actual Cost (Other) (Calls)",
          "Actual Hours (Additional)", "Actual Cost (Labor) (Add.)", "Actual Cost (Other) (Add.)",
          "Revenue (Maintenance)", "Revenue (Calls)", "Revenue (Additional)");

        IOSCCategoryControl.VALIDATE("Prognosis Hours (Maint.)",
          TmpLastSCCategoryControl."Prognosis Total Hours (Maint.)" -
          IOSCCategoryControl."Actual Hours (Maintenance)");

        IOSCCategoryControl.VALIDATE("Prognosis Labor (Maint.)",
          TmpLastSCCategoryControl."Prognosis Total Labor (Maint.)" -
          IOSCCategoryControl."Actual Cost (Labor) (Maint.)");

        IOSCCategoryControl.VALIDATE("Prognosis Other (Maint.)",
          TmpLastSCCategoryControl."Prognosis Total Other (Maint.)" -
          IOSCCategoryControl."Actual Cost (Other) (Maint.)");

        IOSCCategoryControl.VALIDATE("Prognosis Revenue (Maint.)",
          TmpLastSCCategoryControl."Prognosis Total Rev. (Maint.)" -
          IOSCCategoryControl."Contract Revenue (Maint.)" - IOSCCategoryControl."Revenue (Maintenance)");

        IOSCCategoryControl.VALIDATE("Prognosis Hours (Calls)",
          TmpLastSCCategoryControl."Prognosis Total Hours (Calls)" -
          IOSCCategoryControl."Actual Hours (Calls)");

        IOSCCategoryControl.VALIDATE("Prognosis Labor (Calls)",
          TmpLastSCCategoryControl."Prognosis Total Labor (Calls)" -
          IOSCCategoryControl."Actual Cost (Labor) (Calls)");

        IOSCCategoryControl.VALIDATE("Prognosis Other (Calls)",
          TmpLastSCCategoryControl."Prognosis Total Other (Calls)" -
          IOSCCategoryControl."Actual Cost (Other) (Calls)");

        IOSCCategoryControl.VALIDATE("Prognosis Revenue (Calls)",
          TmpLastSCCategoryControl."Prognosis Total Rev. (Calls)" -
          IOSCCategoryControl."Contract Revenue (Calls)" - IOSCCategoryControl."Revenue (Calls)");

        IOSCCategoryControl.VALIDATE("Prognosis Hours (Add.)",
          TmpLastSCCategoryControl."Prognosis Total Hours (Add.)" -
          IOSCCategoryControl."Actual Hours (Additional)");

        IOSCCategoryControl.VALIDATE("Prognosis Labor (Add.)",
          TmpLastSCCategoryControl."Prognosis Total Labor (Add.)" -
          IOSCCategoryControl."Actual Cost (Labor) (Add.)");

        IOSCCategoryControl.VALIDATE("Prognosis Other (Add.)",
          TmpLastSCCategoryControl."Prognosis Total Other (Add.)" -
          IOSCCategoryControl."Actual Cost (Other) (Add.)");

        IOSCCategoryControl.VALIDATE("Prognosis Revenue (Add.)",
          TmpLastSCCategoryControl."Prognosis Total Rev. (Add.)" -
          IOSCCategoryControl."Revenue (Additional)");

        IOSCCategoryControl."Prognosis Modified on" := TmpLastSCCategoryControl."Prognosis Modified on";
        IOSCCategoryControl."Prognosis Modified by" := TmpLastSCCategoryControl."Prognosis Modified by";
      END;

      TmpLastSCCategoryPrognosisText.SETRANGE("Service Contract No.", IOSCCategoryControl."Service Contract No.");
      TmpLastSCCategoryPrognosisText.SETRANGE("Service Category", IOSCCategoryControl."Service Category");
      TmpLastSCCategoryPrognosisText.SETRANGE("Control Period Code", IOSCCategoryControl."Control Period Code");
      IF TmpLastSCCategoryPrognosisText.FINDSET THEN
        REPEAT
          DestSCCategoryPrognosisText := TmpLastSCCategoryPrognosisText;
          DestSCCategoryPrognosisText."Reporting Date" := IOSCCategoryControl."Reporting Date";
          DestSCCategoryPrognosisText.INSERT;
        UNTIL TmpLastSCCategoryPrognosisText.NEXT = 0;
    END;

    LOCAL PROCEDURE GetBudgetCostCalls@1100528633(IServiceContractNo@1100528600 : Code[20];IIndexDate@1100528601 : Date;IDateFilterEnd@1100528602 : Date;VAR IOLaborAmount@1100528603 : Decimal;VAR IOMaterial@1100528604 : Decimal;VAR IOSubcontracting@1100528605 : Decimal;VAR IOPlant@1100528606 : Decimal;VAR IOSundry@1100528607 : Decimal;VAR IOTotalCost@1100528608 : Decimal;VAR IOHours@1100528609 : Decimal;VAR OSurchargeAmount@1100528610 : Decimal) : Boolean;
    VAR
      ServiceContract@1100528612 : Record 11012812;
      ServiceOrder@1100528614 : Record 11012823;
      ServiceSurchargeManagement@1100528613 : Codeunit 11012834;
      PercentageShareCalls@1100528611 : Decimal;
    BEGIN
      ServiceContract.GET(IServiceContractNo);
      IF ServiceContract."Budget Based on" <> ServiceContract."Budget Based on"::"Maintenance Scheme" THEN
        EXIT;
      IF SCBudgetLinesVersionCallsExists(IServiceContractNo, IIndexDate) THEN
        EXIT(FALSE);
      PercentageShareCalls := ServiceContract.GetPercentageShareCalls(IDateFilterEnd);
      IF PercentageShareCalls = 0 THEN
        EXIT(FALSE);
      IOLaborAmount := ROUND(IOLaborAmount * PercentageShareCalls / 100);
      IOMaterial := ROUND(IOMaterial * PercentageShareCalls / 100);
      IOSubcontracting := ROUND(IOSubcontracting * PercentageShareCalls / 100);
      IOPlant := ROUND(IOPlant * PercentageShareCalls / 100);
      IOSundry := ROUND(IOSundry * PercentageShareCalls / 100);
      IOTotalCost := ROUND(IOTotalCost * PercentageShareCalls / 100);
      IOHours := ROUND(IOHours * PercentageShareCalls / 100);
      OSurchargeAmount := ServiceSurchargeManagement.CalculateSCSurchargeAmount(
        IServiceContractNo, ServiceOrder."Source Type"::Contract, IIndexDate,
        IOLaborAmount, IOMaterial, IOSubcontracting, IOPlant, IOSundry, IOTotalCost);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE TestServiceControlMethod@1100528636();
    VAR
      ServiceSetup@1100528600 : Record 11012800;
    BEGIN
      ServiceSetup.GET;
      ServiceSetup.TESTFIELD("Service Control Method", ServiceSetup."Service Control Method"::Snapshot);
    END;

    BEGIN
    END.
  }
}

