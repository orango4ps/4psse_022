OBJECT Codeunit 11020221 XML Format (4PS)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE FormatBoolean@1100485004(IBoolean@1100485000 : Boolean) : Text[30];
    BEGIN
      //EXIT(FORMAT(IBoolean, 0, 9));  //* XML-Format (9): 0/1
      // In NAV2013 FORMAT(IBoolean, 0, 9) returns 'true/false' instead of '0/1'.
      IF IBoolean THEN
        EXIT('1')
      ELSE
        EXIT('0');
    END;

    PROCEDURE FormatInteger@1100525000(Value@1100525000 : Integer) : Text;
    BEGIN
      EXIT(FORMAT(Value, 0, 9));
    END;

    PROCEDURE FormatDecimal@1100485000(IDecimal@1100485000 : Decimal) : Text[30];
    BEGIN
      EXIT(FORMAT(IDecimal, 0, 9));    //* XML-Format (9): Decimalsign '.'
    END;

    PROCEDURE FormatOptionNo@1100485003(IOption@1100485000 : Option) : Text[30];
    BEGIN
      EXIT(FORMAT(IOption, 0, 9));  //* XML-Format (9): Option No. (0..)
    END;

    PROCEDURE FormatDate@1100485001(IDate@1100485000 : Date) : Text[30];
    BEGIN
      EXIT(FORMAT(IDate, 0, 9));  //* XML-Format (9): YYYY-MM-DD
    END;

    PROCEDURE FormatTime@1100485002(ITime@1100485000 : Time) : Text[30];
    BEGIN
      //* Format: HH:MM:SS
      EXIT(FORMAT(ITime, 0, '<Hours24>:<Minutes,2>:<Seconds,2>'));
    END;

    PROCEDURE FormatDateAndTime@1100485007(IDate@1100485000 : Date;ITime@1100485001 : Time) : Text[30];
    BEGIN
      IF ((IDate = 0D) AND (ITime = 0T)) THEN
        EXIT('');
      EXIT(FormatDate(IDate) + ' ' + FormatTime(ITime));
    END;

    PROCEDURE FormatDateTime@1100529000(IDateTime@1100485000 : DateTime) : Text[30];
    BEGIN
      EXIT(FORMAT(IDateTime, 0, 9));  //* XML-Format (9)
    END;

    PROCEDURE FormatDuration@1100528600(ITime@1100528600 : Time) : Text[30];
    BEGIN
      EXIT(FORMAT(ITime, 0, 'PT<Hours24>H<Minutes>M<Seconds>S'));
    END;

    PROCEDURE EvaluateBoolean@1100485012(IText@1100485000 : Text[30];VAR OBoolean@1100485001 : Boolean) : Boolean;
    BEGIN
      OBoolean := FALSE;
      IF EVALUATE(OBoolean, IText, 9) THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE EvaluateInteger@1100485011(IText@1100485000 : Text[30];VAR OInteger@1100485001 : Integer) : Boolean;
    BEGIN
      OInteger := 0;
      IF EVALUATE(OInteger, IText, 9) THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE EvaluateDecimal@1100485009(IText@1100485000 : Text[30];VAR ODecimal@1100485001 : Decimal) : Boolean;
    BEGIN
      ODecimal := 0;
      IF EVALUATE(ODecimal, IText, 9) THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE EvaluateDate@1100485005(IText@1100485000 : Text[30];VAR ODate@1100485001 : Date) : Boolean;
    BEGIN
      ODate := 0D;
      IF EVALUATE(ODate, IText, 9) THEN
        EXIT(TRUE);
      IF EVALUATE(ODate, IText) THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    PROCEDURE EvaluateTime@1100485006(IText@1100485000 : Text[30];VAR OTime@1100485001 : Time) : Boolean;
    BEGIN
      OTime := 0T;
      IF EVALUATE(OTime, IText, 9) THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE EvaluateDateAndTime@1100485008(IText@1100485000 : Text[30];VAR ODate@1100485001 : Date;VAR OTime@1100485002 : Time) : Boolean;
    VAR
      lvTextDate@1100485003 : Text[30];
      lvTextTime@1100485004 : Text[30];
      lvPos@1100485005 : Integer;
    BEGIN
      ODate := 0D;
      OTime := 0T;
      IText := DELCHR(IText, '<>', ' ');
      lvPos := STRPOS(IText, 'T');
      IF lvPos = 0 THEN
        lvPos := STRPOS(IText, ' ');
      IF lvPos > 1 THEN BEGIN
        lvTextDate := COPYSTR(IText,1, lvPos-1);
        lvTextTime := COPYSTR(IText,lvPos+1);
      END;
      IF EvaluateDate(lvTextDate, ODate) THEN BEGIN
        IF EvaluateTime(lvTextTime, OTime) THEN
          EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE EvaluateDateTime@1100485010(IText@1100485000 : Text[30];VAR ODateTime@1100485001 : DateTime) : Boolean;
    BEGIN
      ODateTime := 0DT;
      IF EVALUATE(ODateTime, IText, 9) THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE EvaluateOption@1100528100(IText@1100528101 : Text[30];VAR OOption@1100528100 : Option) : Boolean;
    BEGIN
      OOption := 0;
      IF EVALUATE(OOption, IText, 9) THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE FormatXMLDateTime@1000000007(Text@1000000000 : Text[30]) : DateTime;
    VAR
      Year@1000000001 : Integer;
      Month@1000000002 : Integer;
      Day@1000000003 : Integer;
      TmpTime@1000000007 : Time;
      TmpDate@1000000008 : Date;
    BEGIN
      EVALUATE(Year,DELSTR(Text,5));
      Text := DELSTR(Text,1,5);
      EVALUATE(Month,DELSTR(Text,3));
      Text := DELSTR(Text,1,3);
      EVALUATE(Day,DELSTR(Text,3));
      TmpDate := DMY2DATE(Day,Month,Year);
      Text := DELSTR(Text,1,3); //hh:mm:ss
      EVALUATE(TmpTime,Text);
      EXIT(CREATEDATETIME(TmpDate,TmpTime))
    END;

    PROCEDURE FormatXMLInteger@1000000005(Text@1000000000 : Text[30]) Integer : Integer;
    BEGIN
      IF Text <> '' THEN
        EVALUATE(Integer,Text);
    END;

    PROCEDURE FormatXMLDecimal@1000000008(Text@1000000000 : Text[30]) TmpDecimal : Decimal;
    BEGIN
      //This function converts a XML Data Type "Integer"
      //Text  :Represents arbitrary precision numbers.
      IF Text <> '' THEN
        EVALUATE(TmpDecimal,Text);
    END;

    PROCEDURE EvaluateXMLTimeToTimezoneTime@1100529906(InDate@1100529900 : Text[10];InTime@1100529901 : Text[20];VAR OutTime@1100528500 : Time) : Boolean;
    VAR
      ProcessingDateTime@1100529902 : Text[31];
      CalculatedDateTime@1100529903 : DateTime;
    BEGIN
      IF (STRPOS(InTime, 'Z') = 0) AND (STRPOS(InTime, '+') = 0) THEN
        IF EVALUATE(OutTime, InTime) THEN BEGIN
          EXIT(TRUE);
        END;

      ProcessingDateTime := InDate+'T'+InTime;
      IF EVALUATE(CalculatedDateTime, ProcessingDateTime, 9) THEN
        IF EVALUATE(OutTime, FORMAT(CalculatedDateTime,0,'<Hours24,2>:<Minutes,2>:<Seconds,2>')) THEN
          EXIT(TRUE);

      EXIT(FALSE);
    END;

    BEGIN
    END.
  }
}

