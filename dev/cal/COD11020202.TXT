OBJECT Codeunit 11020202 Plot Activities Schedule
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      text001@1100485001 : TextConst 'DEU=Mîchten ProduktionsstÑnde fÅr Projekt %1 erstellen?;ENU=Would you like to create current progress state for project %1?;NLD="Wilt u productiestanden aanmaken voor project %1 ?  ";NOR=Vil du opprette gjeldende status pÜ fremdrift for prosjekt %1?;SVE=Vill du skapa aktuell fîrloppsstatus fîr projekt %1?';
      Text002@1100485002 : TextConst 'DEU=FÅr Projekt %1 Produktionsdatum %2 ist Produktion erstellt;ENU=Fabrication made for project %1 with productiondate %2;NLD=Voor project %1 productiedatum %2 is productie aangemaakt;NOR=Produksjon gjort for prosjekt %1 med produksjonsdato %2;SVE=Tillverkning gîrs fîr projekt %1 med produktionsdatum %2';
      Text003@1100485000 : TextConst 'DEU=FÅr Projekt %1 muss "Fertigungsstand per" Element - KostentrÑger oder KostentrÑger Åbereinstimmen.;ENU=For Project %1 the value of Progress Method must be Element - Cost Object or Cost Object.;NLD=Voor Project %1 moet "Productiestand per" gelijk zijn Element - Kostendrager of Kostendrager.;NOR=For prosjekt %1 mÜ verdien av fremdriftsmetoden vëre Element Õ Kostobjekt eller Kostobjekt.;SVE=Fîr projektet %1 mÜste vÑrdet av fîrloppsmetoden vara Element Õ kostnadsobjekt eller Kostnadsobjekt.';

    PROCEDURE ScheduleByReferenceActivity@1100485004(VAR PlotActRec@1100485001 : Record 11020274;ModifyStartDateOrDateFormula@1100485000 : 'Startdate,Dateformula');
    VAR
      i@1100485002 : Integer;
      LeadPlotActRec@1100485003 : Record 11020274;
      lActDefaultsRec@1100485004 : Record 11020281;
    BEGIN
      WITH PlotActRec DO BEGIN
        IF NOT "Reference Activity" THEN BEGIN
          IF (PlotActRec."Cost Object Filter" <> '') AND (PlotActRec."Planned Hours" = 0) THEN BEGIN
            "Starting/Ending Date" := 0D;
            "Week and Date" := '';
            DeletePlanRecords(PlotActRec);
          END ELSE BEGIN
            LeadPlotActRec.SETRANGE("Project No.","Project No.");
            LeadPlotActRec.SETRANGE("Plot No.","Plot No.");
            LeadPlotActRec.SETRANGE("Reference Activity",TRUE);
            IF LeadPlotActRec.FINDSET THEN BEGIN
              IF LeadPlotActRec."Starting/Ending Date" <> 0D THEN BEGIN
                CASE ModifyStartDateOrDateFormula OF
                  ModifyStartDateOrDateFormula::Startdate:
                    BEGIN
                      IF lActDefaultsRec.GET("Activity Code") THEN BEGIN
                        IF lActDefaultsRec."Base Calendar" <> '' THEN BEGIN
                          IF LeadPlotActRec."Starting/Ending Date" > "Starting/Ending Date" THEN
                            "Starting/Ending Date" := CheckCalendarDate(lActDefaultsRec."Base Calendar","Starting/Ending Date",0)
                          ELSE
                            "Starting/Ending Date" := CheckCalendarDate(lActDefaultsRec."Base Calendar","Starting/Ending Date",1);
                        END;
                      END;
                      FillWeekDate(PlotActRec);
                      SplitActivity(PlotActRec);
                      i :=  "Starting/Ending Date" - LeadPlotActRec."Starting/Ending Date";
                      EVALUATE(PlotActRec."Interval in rel  to Reference", FORMAT(STRSUBSTNO('<%1D>',i)))  //db, 15-03-11
                    END;
                  ModifyStartDateOrDateFormula::Dateformula:
                    BEGIN
                      IF (FORMAT("Interval in rel  to Reference")<> '') AND (LeadPlotActRec."Starting/Ending Date"<> 0D) THEN BEGIN
                        "Starting/Ending Date" := CALCDATE("Interval in rel  to Reference",LeadPlotActRec."Starting/Ending Date");
                        IF lActDefaultsRec.GET("Activity Code") THEN BEGIN
                          IF lActDefaultsRec."Base Calendar" <> '' THEN BEGIN
                            IF LeadPlotActRec."Starting/Ending Date" > "Starting/Ending Date" THEN
                              "Starting/Ending Date" := CheckCalendarDate(lActDefaultsRec."Base Calendar","Starting/Ending Date",0)
                            ELSE
                              "Starting/Ending Date" := CheckCalendarDate(lActDefaultsRec."Base Calendar","Starting/Ending Date",1);
                          END;
                        END;
                        FillWeekDate(PlotActRec);
                        SplitActivity(PlotActRec);
                      END;
                    END;
                END;
              END;
            END;
          END;
        END ELSE BEGIN
          IF "Starting/Ending Date" <> 0D THEN BEGIN
            CASE ModifyStartDateOrDateFormula OF
              ModifyStartDateOrDateFormula::Startdate:
                BEGIN
                  IF lActDefaultsRec.GET("Activity Code") THEN
                    IF lActDefaultsRec."Base Calendar" <> '' THEN
                      "Starting/Ending Date" := CheckCalendarDate(lActDefaultsRec."Base Calendar","Starting/Ending Date",1);
                  FillWeekDate(PlotActRec);
                  SplitActivity(PlotActRec);
                  ReCalcAllDates(PlotActRec);
                END;
              ModifyStartDateOrDateFormula::Dateformula:
                BEGIN
                  IF (FORMAT("Interval in rel  to Reference") <> '') AND ("Starting/Ending Date" <> 0D) THEN BEGIN
                    "Starting/Ending Date" := CALCDATE("Interval in rel  to Reference","Starting/Ending Date");
                    IF lActDefaultsRec.GET("Activity Code") THEN BEGIN
                      IF lActDefaultsRec."Base Calendar" <> '' THEN BEGIN
                        IF LeadPlotActRec."Starting/Ending Date" > "Starting/Ending Date" THEN
                          "Starting/Ending Date" := CheckCalendarDate(lActDefaultsRec."Base Calendar","Starting/Ending Date",0)
                        ELSE
                          "Starting/Ending Date" := CheckCalendarDate(lActDefaultsRec."Base Calendar","Starting/Ending Date",1);
                      END;
                    END;
                    FillWeekDate(PlotActRec);
                    SplitActivity(PlotActRec);
                    ReCalcAllDates(PlotActRec);
                 END;
              END;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE CheckCalendarDate@1210190011(CalendarCode@1210190002 : Code[10];lPlandate@1210190003 : Date;BackwardsFowards@1100485000 : 'Backwards,Forwards') : Date;
    VAR
      CalendarMgmt@1210190000 : Codeunit 7600;
      NonWorking@1210190001 : Boolean;
      DescTxt@1210190004 : Text[30];
    BEGIN
      NonWorking := TRUE;
      WHILE NonWorking DO BEGIN
        NonWorking := CalendarMgmt.CheckDateStatus(CalendarCode,lPlandate,DescTxt);
        IF NonWorking THEN BEGIN
          CASE BackwardsFowards OF
            BackwardsFowards::Backwards:lPlandate := lPlandate - 1;
            BackwardsFowards::Forwards:lPlandate := lPlandate + 1;
          END;
        END ELSE
          EXIT(lPlandate);
      END;
    END;

    PROCEDURE ReCalcAllDates@1100485010(LeadPlotActRec@1100485008 : Record 11020274);
    VAR
      PlotActRec@1100485000 : Record 11020274;
      IntervalInt@1100485001 : Integer;
      i@1100485002 : Integer;
      BackWards@1100485004 : Boolean;
      CalendarMgmt@1100485005 : Codeunit 7600;
      lActDefaultsRec@1100485006 : Record 11020281;
      DescTxt@1100485007 : Text[30];
    BEGIN
      WITH PlotActRec DO BEGIN
        SETRANGE("Project No.",LeadPlotActRec."Project No.");
        SETRANGE("Plot No.",LeadPlotActRec."Plot No.");
        SETRANGE("Reference Activity",FALSE);
        IF FINDSET(TRUE, FALSE) THEN BEGIN
          REPEAT
            IF (PlotActRec."Cost Object Filter" <> '') AND (PlotActRec."Planned Hours" = 0) THEN BEGIN
              "Starting/Ending Date" := 0D;
              "Week and Date" := '';
              MODIFY;
              DeletePlanRecords(PlotActRec);
            END ELSE BEGIN
              "Starting/Ending Date" := CALCDATE("Interval in rel  to Reference",LeadPlotActRec."Starting/Ending Date");
              IF lActDefaultsRec.GET("Activity Code") THEN BEGIN
                IF lActDefaultsRec."Base Calendar" <> '' THEN BEGIN
                  IntervalInt :=  LeadPlotActRec."Starting/Ending Date" - "Starting/Ending Date";
                  IF IntervalInt < 0 THEN BEGIN
                    IntervalInt := IntervalInt * -1;
                    BackWards := FALSE;
                  END ELSE
                    BackWards := TRUE;
                  i := 0;
                  WHILE i <> IntervalInt DO BEGIN
                    i := i + 1;
                    IF BackWards THEN BEGIN
                      IF CalendarMgmt.CheckDateStatus(lActDefaultsRec."Base Calendar",
                        LeadPlotActRec."Starting/Ending Date" - i,DescTxt) THEN BEGIN
                        "Starting/Ending Date" := "Starting/Ending Date" - 1;
                        IntervalInt := IntervalInt + 1;
                      END;
                    END ELSE BEGIN
                      IF CalendarMgmt.CheckDateStatus(lActDefaultsRec."Base Calendar",
                        LeadPlotActRec."Starting/Ending Date" + i,DescTxt) THEN BEGIN
                        "Starting/Ending Date" := "Starting/Ending Date" + 1;
                        IntervalInt := IntervalInt + 1;
                      END;
                    END;
                  END;
                END;
              END;
              FillWeekDate(PlotActRec);
              MODIFY;
              SplitActivity(PlotActRec);
            END;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE SplitActivity@1100485006(PlotActRec@1100485002 : Record 11020274);
    VAR
      EstimatedHours@1100485000 : Decimal;
      lastplandate@1100485001 : Date;
    BEGIN
      WITH PlotActRec DO BEGIN
        DeletePlanRecords(PlotActRec);
        //EstimatedHours := CalculateEstimatedHours(PlotActRec);
        EstimatedHours := "Planned Hours";
        lastplandate := "Starting/Ending Date";
        IF ("Average Capacity per Day" <> 0) AND (EstimatedHours <> 0) THEN BEGIN
          WHILE EstimatedHours > "Average Capacity per Day" DO BEGIN
            InsertPlanRecord(PlotActRec,lastplandate,"Average Capacity per Day");
            EstimatedHours := EstimatedHours - "Average Capacity per Day";
          END;
          InsertPlanRecord(PlotActRec,lastplandate,EstimatedHours);
        END ELSE
          InsertPlanRecord(PlotActRec,lastplandate,EstimatedHours);
      END;
    END;

    PROCEDURE InsertPlanRecord@1100485007(PlotActRec@1100485000 : Record 11020274;VAR LastPlanDate@1100485002 : Date;lHours@1100485004 : Decimal);
    VAR
      PlotActPlanLines@1100485001 : Record 11020282;
      lActDefaultsRec@1100485003 : Record 11020281;
    BEGIN
      WITH PlotActRec DO BEGIN
        PlotActPlanLines.INIT;
        PlotActPlanLines."Project No." := "Project No.";
        PlotActPlanLines."Plot No." := "Plot No.";
        CASE "Start/Enddate" OF
          "Start/Enddate"::Startdate:
            BEGIN
              PlotActPlanLines."Plan Date" := LastPlanDate;
              IF lActDefaultsRec.GET("Activity Code") THEN
                IF lActDefaultsRec."Base Calendar" <> '' THEN
                  PlotActPlanLines."Plan Date" := CheckCalendarDate(lActDefaultsRec."Base Calendar",PlotActPlanLines."Plan Date",1);
              LastPlanDate := PlotActPlanLines."Plan Date" + 1;
            END;
          "Start/Enddate"::Enddate:
            BEGIN
              PlotActPlanLines."Plan Date" := LastPlanDate;
              IF lActDefaultsRec.GET("Activity Code") THEN
                IF lActDefaultsRec."Base Calendar" <> '' THEN
                  PlotActPlanLines."Plan Date" := CheckCalendarDate(lActDefaultsRec."Base Calendar",PlotActPlanLines."Plan Date",0);
              LastPlanDate := PlotActPlanLines."Plan Date" - 1;
            END;
        END;
        PlotActPlanLines."Activity Code" := "Activity Code";
        PlotActPlanLines.Hours := lHours;
        PlotActPlanLines.Finished := PlotActRec.Finished;
        PlotActPlanLines.INSERT;
      END;
    END;

    PROCEDURE DeletePlanRecords@1100485026(PlotActRec@1100485001 : Record 11020274);
    VAR
      PlotActPlanLines@1100485000 : Record 11020282;
    BEGIN
      PlotActPlanLines.SETRANGE("Project No.",PlotActRec."Project No.");
      PlotActPlanLines.SETRANGE("Plot No.",PlotActRec."Plot No.");
      PlotActPlanLines.SETRANGE("Activity Code",PlotActRec."Activity Code");
      PlotActPlanLines.DELETEALL;
    END;

    PROCEDURE CalculateEstimatedHours@1100485002(PlotActRec@1100485002 : Record 11020274;ExtBln@1100485003 : Boolean) Hours : Decimal;
    VAR
      EstDataByPlot@1100485000 : Record 11020273;
      EstLineRec@1100485001 : Record 11072072;
      RecipeLine@1210190000 : Record 11072075;
    BEGIN
      WITH PlotActRec DO BEGIN
        IF "Cost Object Filter" <> '' THEN BEGIN
          EstDataByPlot.SETRANGE("Project No.","Project No.");
          EstDataByPlot.SETRANGE("Plot No.","Plot No.");
          EstDataByPlot.SETRANGE(Extension,ExtBln);
          IF EstDataByPlot.FINDSET THEN BEGIN
            REPEAT
              EstLineRec.RESET;  //db, 25-04-13: C007134
              EstLineRec.SETRANGE("Estimate No.",EstDataByPlot."Estimate No.");
              EstLineRec.SETRANGE("Sub-Estimate No.",EstDataByPlot."Sub Estimate No");
              EstLineRec.SETFILTER("Cost Object Labor","Cost Object Filter");
              IF EstLineRec.FINDSET THEN BEGIN
                REPEAT
                  Hours := Hours + (EstLineRec.Hours * EstDataByPlot.Frequency);
                UNTIL EstLineRec.NEXT = 0;
              END;
              EstLineRec.SETRANGE("Cost Object Labor");
              EstLineRec.SETFILTER(Recipe,'<>%1','');
              IF EstLineRec.FINDSET THEN BEGIN
                REPEAT
                  RecipeLine.SETRANGE("Estimate No.",EstLineRec."Estimate No.");
                  RecipeLine.SETRANGE("Sub-Estimate No.",EstLineRec."Sub-Estimate No.");
                  RecipeLine.SETRANGE("Part Group",EstLineRec."Part Group");
                  RecipeLine.SETRANGE(Part,EstLineRec.Part);
                  RecipeLine.SETRANGE("Estimate Line",EstLineRec."Line No.");
                  RecipeLine.SETFILTER("Cost Object Labor","Cost Object Filter");
                  IF RecipeLine.FINDSET THEN BEGIN
                    REPEAT
                      Hours := Hours + (RecipeLine.Hours * EstDataByPlot.Frequency);
                    UNTIL RecipeLine.NEXT = 0;
                  END;
                UNTIL EstLineRec.NEXT = 0;
              END;
            UNTIL EstDataByPlot.NEXT = 0;
          END;
          EXIT(Hours);
        END ELSE
          EXIT(0);
      END;
    END;

    PROCEDURE FillWeekDate@1100485000(VAR PlotActRec@1100485000 : Record 11020274);
    VAR
      WeekNo@1100485001 : Integer;
      DayNo@1100485002 : Integer;
    BEGIN
      IF PlotActRec."Starting/Ending Date" <> 0D THEN BEGIN
        WeekNo := DATE2DWY(PlotActRec."Starting/Ending Date", 2);
        DayNo := DATE2DWY(PlotActRec."Starting/Ending Date", 1);
        PlotActRec."Week and Date" := STRSUBSTNO('W%1/%2',WeekNo,DayNo);
      END;
    END;

    PROCEDURE CreateProduction@1100485001(JobRec@1100485000 : Record 11072003;ProgrDate@1100485010 : Date);
    VAR
      PlotActRec@1100485009 : Record 11020274;
      ProgressRec@1100485006 : Record 11012036;
      ProgressPerc@1100485005 : Decimal;
      ProgressLineRec@1100485004 : Record 11012037;
      DimValueRec@1100485002 : Record 349;
      HelpTable@1100485001 : TEMPORARY Record 11020287;
    BEGIN
      IF JobRec."Progress Method" = JobRec."Progress Method"::"Budget Line" THEN
        ERROR(Text003, JobRec."No.");
      JobRec.TESTFIELD("Progress Registry",JobRec."Progress Registry"::Percentages);
      IF NOT ProgressRec.GET(JobRec."No.",ProgrDate) THEN BEGIN
        ProgressRec.INIT;
        ProgressRec."Project No." := JobRec."No.";
        ProgressRec."Progress Date" := ProgrDate;
        ProgressRec.FillCreated();
        ProgressRec.INSERT;
      END;

      CODEUNIT.RUN(CODEUNIT::"Create Progress Lines",ProgressRec);

      DimValueRec.SETRANGE("Global Dimension No.",2);
      DimValueRec.SETRANGE("Cost Type",DimValueRec."Cost Type"::Labor);
      PlotActRec.SETRANGE("Project No.",JobRec."No.");
      IF PlotActRec.FINDSET THEN BEGIN
        REPEAT
          DimValueRec.SETFILTER(Code,PlotActRec."Cost Object Filter");
          IF DimValueRec.FINDSET THEN BEGIN
            REPEAT
              IF NOT HelpTable.GET(JobRec."No.",DimValueRec.Code) THEN BEGIN
                HelpTable.INIT;
                HelpTable."Project No." := JobRec."No.";
                HelpTable."Cost Object" := DimValueRec.Code;
                HelpTable.INSERT;
              END;
              HelpTable.Budget := HelpTable.Budget + PlotActRec."Planned Hours";
              IF PlotActRec.Finished THEN
                HelpTable.Finished := HelpTable.Finished + PlotActRec."Planned Hours"
              ELSE BEGIN
                IF (PlotActRec."Production quantity" <> 0) AND (PlotActRec."Quantity finished" <> 0) THEN BEGIN
                  ProgressPerc := (PlotActRec."Quantity finished" / PlotActRec."Production quantity") * 100;
                  HelpTable.Finished := HelpTable.Finished + ((PlotActRec."Planned Hours"/100) * ProgressPerc);
                END;
              END;
              HelpTable.MODIFY;
            UNTIL DimValueRec.NEXT = 0;
          END;
        UNTIL PlotActRec.NEXT = 0;
      END;


      IF HelpTable.FINDSET THEN BEGIN
        REPEAT
          ProgressPerc := 0;
          IF HelpTable.Budget <> 0 THEN
            ProgressPerc := (HelpTable.Finished / HelpTable.Budget) * 100;
          ProgressLineRec.SETCURRENTKEY("Project No.","Progress Date",Element,"Cost Object");
          ProgressLineRec.SETRANGE("Project No.",JobRec."No.");
          ProgressLineRec.SETRANGE("Progress Date",ProgressRec."Progress Date");
          ProgressLineRec.SETRANGE("Cost Type",ProgressLineRec."Cost Type"::Labor);
          ProgressLineRec.SETRANGE("Cost Object",HelpTable."Cost Object");
          IF ProgressLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
            REPEAT
              ProgressLineRec.VALIDATE("Cumulative Progress %",ProgressPerc);
              ProgressLineRec.MODIFY(TRUE);
            UNTIL ProgressLineRec.NEXT = 0;
          END;
        UNTIL HelpTable.NEXT = 0;
      END;
      HelpTable.DELETEALL;
    END;

    PROCEDURE CreateProductionSingleProject@1100485009(JobRec@1100485001 : Record 11072003;ProgrDate@1100485000 : Date);
    BEGIN
      IF CONFIRM(STRSUBSTNO(text001,JobRec."No.",TRUE)) THEN BEGIN
        CreateProduction(JobRec,ProgrDate);
        MESSAGE(STRSUBSTNO(Text002,JobRec."No.",ProgrDate));
      END;
    END;

    PROCEDURE CheckCommentsPresent@1100485003(ProjectCde@1100485001 : Code[20];PlotCde@1100485002 : Code[20]) Present : Boolean;
    VAR
      CommentRec@1100485000 : Record 11012518;
    BEGIN
      CommentRec.SETRANGE("Project No.",ProjectCde);
      CommentRec.SETRANGE("Plot No.",PlotCde);
      EXIT(CommentRec.FINDFIRST);
    END;

    PROCEDURE StartComment@1100485008(ProjectCde@1100485003 : Code[20];PlotCde@1100485002 : Code[20]);
    VAR
      CommentRec@1100485001 : Record 11012518;
      CommentPage@1100485000 : Page 11012493;
    BEGIN
      CommentRec.SETRANGE("Project No.",ProjectCde);
      CommentRec.SETRANGE("Plot No.",PlotCde);
      CommentPage.SETTABLEVIEW(CommentRec);
      CommentPage.RUNMODAL;
    END;

    BEGIN
    END.
  }
}

