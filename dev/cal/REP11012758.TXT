OBJECT Report 11012758 Select Try-Out Successor
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00,4PSSE;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Select Try-Out Successor;
               NOR=Velg prospektetterf›lger;
               SVE=V„lj anbudsefterf”ljare];
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   CRMSetup.GET;
                 END;

    OnPostReport=BEGIN
                   StartUpdate;
                 END;

  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnInit=BEGIN
               UpdateProjecNoInPlantLocation := TRUE;
             END;

    }
    CONTROLS
    {
      { 1100525004;0;Container;
                  ContainerType=ContentArea }

      { 1100525003;1;Group  ;
                  CaptionML=[ENU=General;
                             NOR=Generell;
                             SVE=Allm„nt];
                  GroupType=Group }

      { 1100525002;2;Field  ;
                  Name=CurrSeries;
                  AssistEdit=Yes;
                  CaptionML=[ENU=No. Series;
                             NOR=Nr-serie;
                             SVE=Nr-serie];
                  SourceExpr=CurrSeries;
                  Editable=FALSE;
                  OnAssistEdit=BEGIN
                                 CheckSeries(TRUE);
                               END;
                                }

      { 1100525001;2;Field  ;
                  Name=NewCode;
                  CaptionML=[ENU=Try-out Successor;
                             NOR=Etterf›lger (prospekt);
                             SVE=Efterf”ljare, anbud];
                  NotBlank=Yes;
                  SourceExpr=NewCode;
                  CaptionClass=ActionName;
                  Editable=NewCodeEditable;
                  OnValidate=BEGIN
                               NewCodeOnAfterValidate;
                             END;
                              }

      { 1100529400;2;Field  ;
                  CaptionML=ENU=Service Survey Template Code;
                  SourceExpr=ServiceSurveyTemplateCode;
                  TableRelation="Service Survey Template";
                  Visible=ServiceSurveyTemplateCodeVisible;
                  OnValidate=BEGIN
                               IF (ServiceSurveyTemplateCode <> '') AND (ServiceSurveyNo <> '') THEN
                                 ServiceSurveyNo := '';
                             END;
                              }

      { 1100528600;2;Field  ;
                  CaptionML=[ENU=Service Survey No.;
                             NOR=Servicekartleggingsnr.;
                             SVE=Servicekartl„ggningsnr];
                  SourceExpr=ServiceSurveyNo;
                  TableRelation="Service Survey";
                  Visible=ServiceSurveyNoVisible;
                  OnValidate=BEGIN
                               IF (ServiceSurveyNo <> '') AND (ServiceSurveyTemplateCode <> '') THEN
                                 ServiceSurveyTemplateCode := '';
                             END;
                              }

      { 1100528601;2;Field  ;
                  CaptionML=ENU=Service Contract Template Code;
                  SourceExpr=ServiceContractTemplateCode;
                  TableRelation="Service-Contract Template";
                  Visible=ServiceContractTemplateCodeVisible }

      { 1100529000;2;Field  ;
                  CaptionML=ENU=Update Project No. in Plant Location;
                  SourceExpr=UpdateProjecNoInPlantLocation;
                  Visible=UpdateProjecNoInPlantLocationAllowed }

      { 1000000000;2;Field  ;
                  CaptionML=[ENU=Get Cost Centre from No. Series;
                             NOR="Hent kostnadsst„lle fra Nr-serie ";
                             SVE=H„mta kostnadsst„lle fr†n Nr-serie];
                  SourceExpr=UseNoSeriesCostCentre;
                  Visible=UseNoSeriesCostCentreVisible;
                  Enabled=UseNoSeriesCostCentreEnabled }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      SuccFilter@1100525022 : Code[20];
      SuccQuote@1100525021 : Boolean;
      ServiceSurveyTemplateCode@1100529400 : Code[20];
      ServiceSurveyTemplateCodeVisible@1100529402 : Boolean INDATASET;
      ServiceSurveyNo@1100528600 : Code[20];
      ServiceSurveyNoVisible@1100528601 : Boolean INDATASET;
      ServiceContractTemplateCode@1100528602 : Code[20];
      ServiceContractTemplateCodeVisible@1100528603 : Boolean INDATASET;
      NewCode@1100525020 : Code[20];
      CurrSeries@1100525019 : Code[20];
      gvAction@1100525017 : Integer;
      gvTryOut@1100525016 : Code[20];
      gvTryOutQuote@1100525015 : Code[20];
      gvTryOutLine@1100525014 : Integer;
      NoSeriesMgt@1100525013 : Codeunit 396;
      RiskOpportunityManagement@1100528800 : Codeunit 11229282;
      JobSetup@1100525010 : Record 315;
      ServSetup@1100525009 : Record 11012800;
      CRMSetup@1100525008 : Record 5079;
      TryoutRec@1100525007 : Record 11012750;
      TryoutQuoteRec@1100525006 : Record 11012758;
      TryoutSuccRec@1100525005 : Record 11012761;
      NoSeries@1100525004 : Record 308;
      ActionName@1100525003 : Text[50];
      TryoutRespPersRec@1100525002 : Record 11012756;
      NewCodeEditable@1100525001 : Boolean INDATASET;
      Text000@1100525024 : TextConst 'ENU=%1 %2 is created;NOR=%1 %2 er opprettet;SVE=%1 %2 har skapats';
      Text001@1100525023 : TextConst 'ENU=New code is empty, %1 can not be created.;NOR=Den nye koden er tom. Kan ikke opprette %1.;SVE=Den nya koden „r tom. Det g†r inte att skapa %1.';
      gvTryoutSuccessorRec@1100528900 : Record 11012761;
      UpdateProjecNoInPlantLocation@1100529000 : Boolean;
      UpdateProjecNoInPlantLocationAllowed@1100529001 : Boolean INDATASET;
      UseNoSeriesCostCentre@1100285500 : Boolean;
      UseNoSeriesCostCentreVisible@1100285501 : Boolean INDATASET;
      UseNoSeriesCostCentreEnabled@1100285502 : Boolean INDATASET;

    PROCEDURE SetSelection@1100485001(lvAction@1100485000 : Integer;lvTryOutSuccesorRec@1100485001 : Record 11012761);
    VAR
      ProjRec@1100485007 : Record 11072003;
      ServOrderRec@1100485006 : Record 11012823;
      ServLocRec@1100485005 : Record 11012801;
      ServContrRec@1100485004 : Record 11012812;
      ServiceSurvey@1210190000 : Record 11071803;
      ServiceCall@1100528600 : Record 11012822;
    BEGIN
      CRMSetup.GET;
      gvAction := lvAction;
      gvTryOut := lvTryOutSuccesorRec."Try-out No.";
      gvTryOutQuote := lvTryOutSuccesorRec."Try-out Quote";
      gvTryOutLine := lvTryOutSuccesorRec."Line No.";
      gvTryoutSuccessorRec := lvTryOutSuccesorRec;

      ServiceSurveyNoVisible := FALSE;
      ServiceSurveyTemplateCodeVisible := FALSE;
      ServiceContractTemplateCodeVisible := FALSE;
      //4PSSE.sn UKR-C25015
      UseNoSeriesCostCentreVisible := FALSE;
      UseNoSeriesCostCentreEnabled := TRUE;
      //4PSSE.en
      CASE gvAction OF
        20,21,22:
          BEGIN
            ActionName := ProjRec.TABLECAPTION;
            UpdateProjecNoInPlantLocationAllowed := CheckUpdateProjectInPlantLocationAllowed;
            UseNoSeriesCostCentreVisible := TRUE;  //4PSSE.n UKR-C25015
            UseNoSeriesCostCentre := TRUE;         //160823 ITERO.AC RFC124
          END;
        30: ActionName := ServOrderRec.TABLECAPTION;
        31: ActionName := ServLocRec.TABLECAPTION;
        32:
          BEGIN
            ActionName := ServContrRec.TABLECAPTION;
            ServiceContractTemplateCodeVisible := TRUE;
          END;
        33:
          BEGIN
            ActionName := ServiceSurvey.TABLECAPTION;
            ServiceSurveyNoVisible := TRUE;
            ServiceSurveyTemplateCodeVisible := TRUE;
          END;
        34: ActionName := ServiceCall.TABLECAPTION;
      END;

      IF gvTryOutQuote <> '' THEN BEGIN
        SuccQuote := TRUE;
        SuccFilter := gvTryOutQuote;
      END ELSE BEGIN
        SuccQuote := FALSE;
        SuccFilter := gvTryOut;
      END;

      IF CRMSetup."Inherit No. at Successor" THEN BEGIN
        CurrSeries := '';
        NewCode := SuccFilter;
        NewCodeEditable := FALSE;
      END ELSE BEGIN
        CheckSeries(FALSE);
        NewCodeEditable := CheckSeriesManual;
      END;
    END;

    PROCEDURE StartUpdate@1100485000();
    BEGIN
      IF CurrSeries <> '' THEN
        DetermineNewCode(TRUE);
      IF NewCode = '' THEN
        ERROR(Text001, ActionName);
      CASE gvAction OF
        20,21,22: GenerateProject;
        30: GenerateServiceOrder;
        31: GenerateServiceLocation;
        32: GenerateServiceContract;
        33: GenerateServiceSurvey;
        34: GenerateServiceCall;
      END;
    END;

    PROCEDURE GenerateProject@1210190001();
    VAR
      ProjRec@1210190000 : Record 11072003;
      ProjCustRec@1210190001 : Record 11012005;
      Cust@1210190002 : Record 18;
      lvTryoutLineRec@1100485003 : Record 11012755;
      lvContactTypeRec@1100485000 : Record 11012757;
      lvContactBusRelRec@1100485001 : Record 5054;
      ContactFeatureType@1100525000 : Record 11012753;
      RiskOpportunitySchedule@1100528800 : Record 11229900;
      BillToCustBl@1100485002 : Boolean;
      ProjCust@1100485004 : Code[20];
      "***4PSSE.I012***"@1100285000 : Integer;
      ROTInformation@1100285001 : Record 11128101;
      ROTInformation2@1100285500 : Record 11128101;
      TryOutCode@1100528801 : Code[20];
      lvGlobalDim1Code@1100285501 : Code[20];
    BEGIN
      BillToCustBl := FALSE;

      ProjRec.INIT;
      ProjRec."No." := NewCode;
      ProjRec."No. Series" := CurrSeries;
      ProjRec."Small Project" := (gvAction = 21);
      ProjRec."Assembly Project" := (gvAction = 22); //kzwerver, 110527, n, #27456
      IF SuccQuote THEN
        ProjRec.SetCopyFeaturesFrom(ContactFeatureType."Relation Type"::"Try-out Quote", SuccFilter)
      ELSE
        ProjRec.SetCopyFeaturesFrom(ContactFeatureType."Relation Type"::"Try-out", SuccFilter);

      ProjRec.INSERT(TRUE);

      ProjRec."Project Type" := ProjRec.DetProjectTypeSeriesSimple(COMPANYNAME);

      IF SuccQuote = FALSE THEN BEGIN
        TryoutRec.GET(SuccFilter);
        IF NOT CRMSetup."Generate Project allowed" THEN
          TryoutRec.TESTFIELD(Order,TRUE);

        ProjRec.VALIDATE(Description, TryoutRec.Description);
        ProjRec."Description 2" := TryoutRec."Description 2";
        ProjRec.Address := TryoutRec.Address;
        ProjRec."Address 2" := TryoutRec."Address 2";
        ProjRec.City := TryoutRec.City;
        ProjRec."Post Code" := TryoutRec."Post Code";
        ProjRec.County := TryoutRec.County;
        ProjRec."Country/Region Code":= TryoutRec."Country/Region Code";
        ProjRec."Territory Code":= TryoutRec."Territory Code";
        ProjRec."Starting Date" := TryoutRec."Expected Starting Date";
        ProjRec."Ending Date" := TryoutRec."Expected End Date";
        ProjRec."Salesperson Code" := TryoutRec."Salesperson Code"; //C007070

        lvTryoutLineRec.SETRANGE("Try-out No.",TryoutRec.Code);
        IF lvTryoutLineRec.FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            IF lvContactTypeRec.GET(lvTryoutLineRec."Contact Type") THEN;
            IF lvContactTypeRec.Principal THEN BEGIN
              lvContactBusRelRec.SETRANGE("Link to Table",lvContactBusRelRec."Link to Table"::Customer);
              lvContactBusRelRec.SETRANGE("Contact No.",lvTryoutLineRec."Contact No.");
              IF lvContactBusRelRec.FINDFIRST THEN BEGIN
                InsertProjectPrincipal(lvContactBusRelRec."No.",ProjRec."No.");
                IF NOT BillToCustBl THEN BEGIN
                  ProjRec."Bill-to Customer No." := lvContactBusRelRec."No.";
                  BillToCustBl := TRUE;
                END;
              END;
            END;
          UNTIL lvTryoutLineRec.NEXT = 0
        END;

        //>> 160823 ITERO.AC RFC124 Get "Global Dimension 1 Code" from No.Series
        //IF TryoutRec."Global Dimension 1 Code" <> '' THEN  //4PSSE.o UKR-C25015
        //IF (TryoutRec."Global Dimension 1 Code" <> '') AND (NOT UseNoSeriesCostCentre) THEN  //4PSSE.n
        //  ProjRec.VALIDATE("Global Dimension 1 Code", TryoutRec."Global Dimension 1 Code");
        lvGlobalDim1Code := GetDepartmentCodeFromNoSeries(CurrSeries);
        IF (UseNoSeriesCostCentre) AND (lvGlobalDim1Code <> '') THEN
          ProjRec.VALIDATE("Global Dimension 1 Code", lvGlobalDim1Code)
        ELSE
          ProjRec.VALIDATE("Global Dimension 1 Code", TryoutRec."Global Dimension 1 Code");
        //<< 160823 ITERO.AC
        ProjRec.MODIFY;
        GenerateProjRespPers(TryoutRec.Code, ProjRec."No.");

      END ELSE BEGIN
        TryoutQuoteRec.GET(SuccFilter);

        // *** 4PSSE.I012 130710 <<
        ROTInformation.RESET();
        ROTInformation.SETRANGE(Type, ROTInformation.Type::"Try-Out Quote");
        ROTInformation.SETRANGE("Document No.", TryoutQuoteRec.Code);
        IF ROTInformation.FINDSET(FALSE) THEN REPEAT
           ROTInformation2 := ROTInformation;  // 140205 NEW
           ROTInformation2.Type := ROTInformation.Type::Project; // 140205: Changed variable to RotInformation2
           ROTInformation2."Document No." := ProjRec."No.";      // 140205: Changed variable to RotInformation2
           ROTInformation2.INSERT();                             // 140205: Changed variable to RotInformation2
        UNTIL ROTInformation.NEXT = 0;
        // *** 4PSSE.I012 130710 >>

        IF TryoutQuoteRec."Installment Scheme Project" <> '' THEN
          ProjRec."Settlement Method" := ProjRec."Settlement Method"::"Fixed Price";

        ProjCust := GetCustomer(TryoutQuoteRec."Contact No.");
        IF ProjCust <> '' THEN BEGIN
          Cust.GET(ProjCust);
          ProjCustRec.INIT;
          ProjCustRec."Project No." := ProjRec."No.";
          ProjCustRec.VALIDATE(Principal, ProjCust);
          ProjCustRec.CopySalesSurcharges(Cust);  //*27663.n
          //>> 151127 ITERO.AC IME404
          //IF TryoutQuoteRec."Bill-to Customer No." <> '' THEN BEGIN
            //ProjCustRec.VALIDATE("Bill-to Customer No.", TryoutQuoteRec."Bill-to Customer No.");
          IF TryoutQuoteRec."Bill-to Customer No." <> '' THEN BEGIN
            ProjCustRec.VALIDATE("Bill-to Customer No.", TryoutQuoteRec."Bill-to Customer No.");
          END ELSE BEGIN
            ProjCustRec.VALIDATE("Bill-to Customer No.", ProjCust);
          END;
          //<< 151127 ITERO.AC IME404
          ProjCustRec."Bill-to Name" := TryoutQuoteRec."Bill-to Name";
          ProjCustRec."Bill-to Name 2" := TryoutQuoteRec."Bill-to Name 2";
          ProjCustRec."Bill-to Address" := TryoutQuoteRec."Bill-to Address";
          ProjCustRec."Bill-to Address 2" := TryoutQuoteRec."Bill-to Address 2";
          ProjCustRec."Bill-to Post Code" := TryoutQuoteRec."Bill-to Post Code";
          ProjCustRec."Bill-to City" := TryoutQuoteRec."Bill-to City";
          ProjCustRec."Contact Person No." := TryoutQuoteRec."Contact Person No.";
          ProjCustRec."Contact Person Name" := TryoutQuoteRec."Contact Person Name";
          ProjCustRec."Bill-to Contact Person" := TryoutQuoteRec."Bill-to Contact No (Person)";
          ProjCustRec."Bill-to Contact Person Name" := TryoutQuoteRec."Bill-to Contact Name";
          IF ProjRec."Settlement Method" = ProjRec."Settlement Method"::"Fixed Price" THEN BEGIN
            ProjCustRec."Generate Installments" := TRUE;
            ProjCustRec."Installment Scheme" := TryoutQuoteRec."Installment Scheme Project";
          END;
          ProjCustRec."Order Date" := TryoutQuoteRec."Order Date";
          IF ProjCustRec."Currency Code" <> TryoutQuoteRec."Currency Code" THEN
            ProjCustRec.VALIDATE("Currency Code", TryoutQuoteRec."Currency Code");
          ProjCustRec.VALIDATE("Contract Amount", TryoutQuoteRec."Offered Amount (FCY)");
          ProjCustRec.INSERT(TRUE);
          ProjRec.VALIDATE("Bill-to Customer No.", ProjCust);
        END;

        ProjRec.VALIDATE(Description, TryoutQuoteRec.Description);
        ProjRec."Description 2" := TryoutQuoteRec."Description 2";
        ProjRec.Address := TryoutQuoteRec.Address;
        ProjRec."Address 2" := TryoutQuoteRec."Address 2";
        ProjRec.City := TryoutQuoteRec.City;
        ProjRec."Post Code" := TryoutQuoteRec."Post Code";
        ProjRec.County := TryoutQuoteRec.County;
        ProjRec."Country/Region Code":= TryoutQuoteRec."Country/Region Code";
        ProjRec."Territory Code":= TryoutQuoteRec."Territory Code";
        ProjRec.Discipline := TryoutQuoteRec.Discipline;
        ProjRec.Contact := TryoutQuoteRec."Contact Person No.";
        IF ProjRec.Contact <> '' THEN BEGIN
          TryoutQuoteRec.CALCFIELDS("Contact Phone 2", "Contact Mobile Phone",
            "Contact Fax", "Contact E-Mail");
          ProjRec."Phone No." := TryoutQuoteRec."Phone No.";
          //ProjRec."Phone No. 2" := TryoutQuoteRec."Contact Phone 2";
          ProjRec."Mobile Phone No." := TryoutQuoteRec."Contact Mobile Phone";
          ProjRec."Fax No." := TryoutQuoteRec."Contact Fax";
          //ProjRec."E-Mail" := TryoutQuoteRec."Contact E-Mail";
        END;
        ProjRec."Starting Date" := TryoutQuoteRec."Expected Starting Date";
        ProjRec."Ending Date" := TryoutQuoteRec."Expected End Date";
        ProjRec."Salesperson Code" := TryoutQuoteRec."Salesperson Code"; //C007070
        IF TryoutQuoteRec.Estimator <> '' THEN
          ProjRec.Estimator := TryoutQuoteRec.Estimator;
        ProjRec."Service Warranty Code" := TryoutQuoteRec."Service Warranty Code"; //DP00121
        //>> 160823 ITERO.AC RFC124 Get "Global Dimension 1 Code" from No.Series
        //IF TryoutQuoteRec."Global Dimension 1 Code" <> '' THEN  //4PSSE.o UKR-C25015
        //IF (TryoutQuoteRec."Global Dimension 1 Code" <> '') AND (NOT UseNoSeriesCostCentre) THEN  //4PSSE.n
        //  ProjRec.VALIDATE("Global Dimension 1 Code", TryoutQuoteRec."Global Dimension 1 Code");
        lvGlobalDim1Code := GetDepartmentCodeFromNoSeries(CurrSeries);
        IF (UseNoSeriesCostCentre) AND (lvGlobalDim1Code <> '') THEN
          ProjRec.VALIDATE("Global Dimension 1 Code", lvGlobalDim1Code)
        ELSE
          ProjRec.VALIDATE("Global Dimension 1 Code", TryoutQuoteRec."Global Dimension 1 Code");
        //<< 160823 ITERO.AC
        ProjRec.MODIFY;
        CopyResponsiblePersonsFromTryoutQuote(TryoutQuoteRec.Code, ProjRec."No.");
        UpdateResponsibility(ProjRec."No.",ProjRec.Estimator);
      END;

      //DP00732.sn
      IF SuccQuote THEN
        TryOutCode := TryoutQuoteRec."Try-out No."
      ELSE
        TryOutCode := TryoutRec.Code;

      RiskOpportunitySchedule.SETRANGE(Source, 1);
        RiskOpportunitySchedule.SETRANGE("Source Code", TryOutCode);
      IF RiskOpportunitySchedule.FINDLAST THEN
        RiskOpportunityManagement.CopyScheduleBetweenSources(1, TryOutCode,RiskOpportunitySchedule.Date,0,ProjRec."No.",RiskOpportunitySchedule.Date);
      //DP00732.en

      TryoutSuccRec.GET(gvTryOut, gvTryOutQuote, gvTryOutLine);
      TryoutSuccRec."Project No." := ProjRec."No.";
      TryoutSuccRec.MODIFY;

      IF UpdateProjecNoInPlantLocation AND UpdateProjecNoInPlantLocationAllowed THEN
        UpdateProjectPlantlocations(ProjRec);

      COMMIT;
      MESSAGE(Text000, ProjRec.TABLECAPTION, ProjRec."No.");
    END;

    PROCEDURE GenerateServiceOrder@1210190006();
    VAR
      ServiceSetup@1210190001 : Record 11012800;
      ServOrderRec@1210190000 : Record 11012823;
    BEGIN
      ServiceSetup.GET;

      ServOrderRec.INIT;
      ServOrderRec."No." := NewCode;
      ServOrderRec."No. Series" := CurrSeries;
      ServOrderRec.INSERT(TRUE);

      IF SuccQuote = FALSE THEN BEGIN
        TryoutRec.GET(SuccFilter);
        ServOrderRec.VALIDATE(Description, TryoutRec.Description);
        ServOrderRec."Description 2" := TryoutRec."Description 2";
        ServOrderRec.Address := TryoutRec.Address;
        ServOrderRec."Address 2" := TryoutRec."Address 2";
        ServOrderRec.City := TryoutRec.City;
        ServOrderRec."Post Code" := TryoutRec."Post Code";
        ServOrderRec."Territory Code":= TryoutRec."Territory Code";
        //C003246.sn
        IF TryoutRec."Expected Starting Date" <> 0D THEN
          ServOrderRec."Starting Date" := TryoutRec."Expected Starting Date";
        IF TryoutRec."Expected End Date" <> 0D THEN
          ServOrderRec."Ending Date" := TryoutRec."Expected End Date";
        ServOrderRec."First Possible Starting Date" := ServOrderRec."Starting Date";
        ServOrderRec."Last Possible Ending Date" := ServOrderRec."Ending Date";
        //C003246.en
        IF TryoutRec."Global Dimension 1 Code" <> '' THEN
          ServOrderRec.VALIDATE("Global Dimension 1 Code", TryoutRec."Global Dimension 1 Code");
        ServOrderRec.MODIFY;
      END ELSE BEGIN
        TryoutQuoteRec.GET(SuccFilter);

        IF TryoutQuoteRec."Installment Scheme Service" <> '' THEN
          ServOrderRec."Settlement Method" := ServOrderRec."Settlement Method"::"Fixed Price";

        TryoutQuoteRec.CALCFIELDS("Contact Person Name");
        ServOrderRec.VALIDATE(Description, TryoutQuoteRec.Description);
        ServOrderRec."Description 2" := TryoutQuoteRec."Description 2";
        ServOrderRec.VALIDATE("Customer No.", GetCustomer(TryoutQuoteRec."Contact No."));
        IF TryoutQuoteRec."Service Location" <> '' THEN
          ServOrderRec.VALIDATE("Service Location No.", TryoutQuoteRec."Service Location");
        ServOrderRec.Address := TryoutQuoteRec.Address;
        ServOrderRec."Address 2":= TryoutQuoteRec."Address 2";
        ServOrderRec.City := TryoutQuoteRec.City;
        ServOrderRec."Post Code" := TryoutQuoteRec."Post Code";
        ServOrderRec."Territory Code":= TryoutQuoteRec."Territory Code";
        ServOrderRec."Contact Name" := TryoutQuoteRec."Contact Person Name";
        IF ServOrderRec."Contact Name" <> '' THEN BEGIN
          TryoutQuoteRec.CALCFIELDS("Contact Phone", "Contact Phone 2", "Contact Mobile Phone",
            "Contact Fax", "Contact E-Mail");
          ServOrderRec."Phone No." := TryoutQuoteRec."Contact Phone";
          ServOrderRec."Phone No. 2" := TryoutQuoteRec."Contact Phone 2";
          ServOrderRec."Mobile Phone No." := TryoutQuoteRec."Contact Mobile Phone";
          ServOrderRec."Fax No." := TryoutQuoteRec."Contact Fax";
          ServOrderRec."E-Mail" := TryoutQuoteRec."Contact E-Mail";
        END;
        IF TryoutQuoteRec."Global Dimension 1 Code" <> '' THEN
          ServOrderRec.VALIDATE("Global Dimension 1 Code", TryoutQuoteRec."Global Dimension 1 Code");
        IF TryoutQuoteRec."Bill-to Customer No." <> '' THEN
          ServOrderRec.VALIDATE("Bill-to Customer No.", TryoutQuoteRec."Bill-to Customer No.");
        IF TryoutQuoteRec."Contact Person No." <> '' THEN
          ServOrderRec."Contact Person No."   := TryoutQuoteRec."Contact Person No.";
        IF TryoutQuoteRec."Bill-to Contact No (Person)" <> '' THEN
          ServOrderRec."Bill-to Contact Person" := TryoutQuoteRec."Bill-to Contact No (Person)";
        IF (ServOrderRec."Settlement Method" = ServOrderRec."Settlement Method"::"Fixed Price") THEN BEGIN
          ServOrderRec."Installment Scheme" := TryoutQuoteRec."Installment Scheme Service";
          ServOrderRec.VALIDATE("Order Amount", TryoutQuoteRec."Offered Amount (LCY)");
        END;
        ServOrderRec."Service Warranty Code" := TryoutQuoteRec."Service Warranty Code"; //DP00121
        ServOrderRec."Your Reference" := TryoutQuoteRec."Your reference";
        //C003246.sn
        IF TryoutQuoteRec."Expected Starting Date" <> 0D THEN
          ServOrderRec."Starting Date" := TryoutQuoteRec."Expected Starting Date";
        IF TryoutQuoteRec."Expected End Date" <> 0D THEN
          ServOrderRec."Ending Date" := TryoutQuoteRec."Expected End Date";
        ServOrderRec."First Possible Starting Date" := ServOrderRec."Starting Date";
        ServOrderRec."Last Possible Ending Date" := ServOrderRec."Ending Date";
        //C003246.en
        ServOrderRec.VALIDATE("Order Manager", TryoutQuoteRec."Salesperson Code");
        ServOrderRec."Commision Date" := TryoutQuoteRec."Order Date";
        ServOrderRec.MODIFY;
      END;

      TryoutSuccRec.GET(gvTryOut, gvTryOutQuote, gvTryOutLine);
      TryoutSuccRec."Service Order No." := ServOrderRec."No.";
      TryoutSuccRec.MODIFY;

      COMMIT;
      MESSAGE(Text000, ServOrderRec.TABLECAPTION, ServOrderRec."No.");
    END;

    LOCAL PROCEDURE GenerateServiceCall@1100528601();
    VAR
      ServiceSetup@1100528601 : Record 11012800;
      ServiceCall@1100528600 : Record 11012822;
    BEGIN
      ServiceSetup.GET;

      ServiceCall.INIT;
      ServiceCall."No." := NewCode;
      ServiceCall."No. Series" := CurrSeries;
      ServiceCall.INSERT(TRUE);

      IF SuccQuote = FALSE THEN BEGIN
        TryoutRec.GET(SuccFilter);
        ServiceCall.VALIDATE(Description, TryoutRec.Description);
        ServiceCall.Address := TryoutRec.Address;
        ServiceCall."Address 2" := TryoutRec."Address 2";
        ServiceCall.City := TryoutRec.City;
        ServiceCall."Post Code" := TryoutRec."Post Code";
        ServiceCall."Territory Code":= TryoutRec."Territory Code";
        IF TryoutRec."Global Dimension 1 Code" <> '' THEN
          ServiceCall.VALIDATE("Global Dimension 1 Code", TryoutRec."Global Dimension 1 Code");
        ServiceCall.MODIFY;
      END ELSE BEGIN
        TryoutQuoteRec.GET(SuccFilter);

        TryoutQuoteRec.CALCFIELDS("Contact Person Name");
        ServiceCall.VALIDATE(Description, TryoutQuoteRec.Description);
        ServiceCall.VALIDATE("Customer No.", GetCustomer(TryoutQuoteRec."Contact No."));
        IF TryoutQuoteRec."Service Location" <> '' THEN
          ServiceCall.VALIDATE("Service Location No.", TryoutQuoteRec."Service Location");
        ServiceCall.Address := TryoutQuoteRec.Address;
        ServiceCall."Address 2":= TryoutQuoteRec."Address 2";
        ServiceCall.City := TryoutQuoteRec.City;
        ServiceCall."Post Code" := TryoutQuoteRec."Post Code";
        ServiceCall."Territory Code":= TryoutQuoteRec."Territory Code";
        ServiceCall."Contact Name" := TryoutQuoteRec."Contact Person Name";
        IF ServiceCall."Contact Name" <> '' THEN BEGIN
          TryoutQuoteRec.CALCFIELDS("Contact Phone", "Contact Phone 2", "Contact Mobile Phone",
            "Contact Fax", "Contact E-Mail");
          ServiceCall."Phone No." := TryoutQuoteRec."Contact Phone";
          ServiceCall."Phone No. 2" := TryoutQuoteRec."Contact Phone 2";
          ServiceCall."Mobile Phone No." := TryoutQuoteRec."Contact Mobile Phone";
          ServiceCall."Fax No." := TryoutQuoteRec."Contact Fax";
          ServiceCall."E-Mail" := TryoutQuoteRec."Contact E-Mail";
        END;
        IF TryoutQuoteRec."Global Dimension 1 Code" <> '' THEN
          ServiceCall.VALIDATE("Global Dimension 1 Code", TryoutQuoteRec."Global Dimension 1 Code");
        IF TryoutQuoteRec."Bill-to Customer No." <> '' THEN
          ServiceCall.VALIDATE("Bill-to Customer No.", TryoutQuoteRec."Bill-to Customer No.");
        ServiceCall."Your Reference" := TryoutQuoteRec."Your reference";
        ServiceCall.MODIFY;
      END;

      TryoutSuccRec.GET(gvTryOut, gvTryOutQuote, gvTryOutLine);
      TryoutSuccRec."Service Call No." := ServiceCall."No.";
      TryoutSuccRec.MODIFY;

      COMMIT;
      MESSAGE(Text000, ServiceCall.TABLECAPTION, ServiceCall."No.");
    END;

    PROCEDURE GenerateServiceLocation@1210190002();
    VAR
      ServiceSetup@1210190001 : Record 11012800;
      ServLocRec@1210190000 : Record 11012801;
    BEGIN
      ServiceSetup.GET;

      ServLocRec.INIT;
      ServLocRec."No." := NewCode;
      ServLocRec."No. Series" := CurrSeries;
      ServLocRec.INSERT(TRUE);

      IF SuccQuote = FALSE THEN BEGIN
        TryoutRec.GET(SuccFilter);
        ServLocRec.VALIDATE(Description, TryoutRec.Description);
        ServLocRec."Description 2" := TryoutRec."Description 2";
        ServLocRec.Address := TryoutRec.Address;
        ServLocRec."Address 2" := TryoutRec."Address 2";
        ServLocRec.City := TryoutRec.City;
        ServLocRec."Post Code" := TryoutRec."Post Code";
        ServLocRec.County := TryoutRec.County;
        ServLocRec."Country/Region Code":= TryoutRec."Country/Region Code";
        ServLocRec."Territory Code":= TryoutRec."Territory Code";
        ServLocRec."Location Manager"  := TryoutRec."Salesperson Code";
        IF TryoutRec."Global Dimension 1 Code" <> '' THEN
          ServLocRec.VALIDATE("Global Dimension 1 Code", TryoutRec."Global Dimension 1 Code");
        ServLocRec.MODIFY;
      END ELSE BEGIN
        TryoutQuoteRec.GET(SuccFilter);
        TryoutQuoteRec.CALCFIELDS("Contact Person Name");
        ServLocRec.VALIDATE(Description, TryoutQuoteRec.Description);
        ServLocRec."Description 2" := TryoutQuoteRec."Description 2";
        ServLocRec.VALIDATE("Customer No.", GetCustomer(TryoutQuoteRec."Contact No."));
        ServLocRec.Address := TryoutQuoteRec.Address;
        ServLocRec."Address 2" := TryoutQuoteRec."Address 2";
        ServLocRec.City := TryoutQuoteRec.City;
        ServLocRec."Post Code" := TryoutQuoteRec."Post Code";
        ServLocRec.County := TryoutQuoteRec.County;
        ServLocRec."Country/Region Code":= TryoutQuoteRec."Country/Region Code";
        ServLocRec."Territory Code":= TryoutQuoteRec."Territory Code";
        ServLocRec."Contact Name" := TryoutQuoteRec."Contact Person Name";
        IF ServLocRec."Contact Name" <> '' THEN BEGIN
          TryoutQuoteRec.CALCFIELDS("Contact Phone", "Contact Phone 2", "Contact Mobile Phone",
            "Contact Fax", "Contact E-Mail");
          ServLocRec."Phone No." := TryoutQuoteRec."Contact Phone";
          ServLocRec."Phone No. 2" := TryoutQuoteRec."Contact Phone 2";
          ServLocRec."Mobile Phone No." := TryoutQuoteRec."Contact Mobile Phone";
          ServLocRec."Fax No." := TryoutQuoteRec."Contact Fax";
          ServLocRec."E-Mail" := TryoutQuoteRec."Contact E-Mail";
        END;
        IF TryoutQuoteRec.Estimator <> '' THEN
          ServLocRec.Estimator := TryoutQuoteRec.Estimator;
        ServLocRec."Location Manager"  := TryoutQuoteRec."Salesperson Code";
        IF TryoutQuoteRec."Global Dimension 1 Code" <> '' THEN
          ServLocRec.VALIDATE("Global Dimension 1 Code", TryoutQuoteRec."Global Dimension 1 Code");
        ServLocRec.MODIFY;
      END;

      TryoutSuccRec.GET(gvTryOut, gvTryOutQuote, gvTryOutLine);
      TryoutSuccRec."Service Location No." := ServLocRec."No.";
      TryoutSuccRec.MODIFY;

      COMMIT;
      MESSAGE(Text000, ServLocRec.TABLECAPTION, ServLocRec."No.");
    END;

    PROCEDURE GenerateServiceContract@1210190004();
    VAR
      ServiceSetup@1210190001 : Record 11012800;
      ServContrRec@1210190000 : Record 11012812;
      RiskOpportunitySchedule@1100529700 : Record 11229900;
      TryOutCode@1100529701 : Code[20];
    BEGIN
      ServiceSetup.GET;

      ServContrRec.INIT;
      ServContrRec."No." := NewCode;
      ServContrRec."No. Series" := CurrSeries;
      IF ServiceContractTemplateCode <> '' THEN
        ServContrRec.VALIDATE("Contract Template Code", ServiceContractTemplateCode);
      ServContrRec.INSERT(TRUE);

      IF ServContrRec."Service Type" = '' THEN
        ServContrRec."Service Type" := ServContrRec.DetServiceTypeSeriesSimple;

      IF SuccQuote = FALSE THEN BEGIN
        TryoutRec.GET(SuccFilter);
        ServContrRec.VALIDATE(Description, TryoutRec.Description);
        ServContrRec."Description 2" := TryoutRec."Description 2";
        ServContrRec."Contract Manager"  := TryoutRec."Salesperson Code";
        IF TryoutRec."Global Dimension 1 Code" <> '' THEN
          ServContrRec.VALIDATE("Global Dimension 1 Code", TryoutRec."Global Dimension 1 Code");
        ServContrRec.MODIFY;
      END ELSE BEGIN
        TryoutQuoteRec.GET(SuccFilter);
        TryoutQuoteRec.CALCFIELDS("Contact Person Name");
        ServContrRec.VALIDATE(Description, TryoutQuoteRec.Description);
        ServContrRec."Description 2" := TryoutQuoteRec."Description 2";
        ServContrRec.VALIDATE("Customer No.", GetCustomer(TryoutQuoteRec."Contact No."));
        ServContrRec."Contact Name" := TryoutQuoteRec."Contact Person Name";
        IF ServContrRec."Contact Name" <> '' THEN BEGIN
          TryoutQuoteRec.CALCFIELDS("Contact Phone", "Contact Phone 2", "Contact Mobile Phone",
            "Contact Fax", "Contact E-Mail");
          ServContrRec."Phone No." := TryoutQuoteRec."Contact Phone";
          ServContrRec."Phone No. 2" := TryoutQuoteRec."Contact Phone 2";
          ServContrRec."Mobile Phone No." := TryoutQuoteRec."Contact Mobile Phone";
          ServContrRec."Fax No." := TryoutQuoteRec."Contact Fax";
          ServContrRec."E-Mail" := TryoutQuoteRec."Contact E-Mail";
        END;
        ServContrRec."Contract Manager"  := TryoutQuoteRec."Salesperson Code";
        IF TryoutQuoteRec."Global Dimension 1 Code" <> '' THEN
          ServContrRec.VALIDATE("Global Dimension 1 Code", TryoutQuoteRec."Global Dimension 1 Code");
        ServContrRec.VALIDATE("Bill-to Customer No. (CP)", TryoutQuoteRec."Bill-to Customer No.");
        ServContrRec."Bill-to Name (Cost Plus)" := TryoutQuoteRec."Bill-to Name";
        ServContrRec."Bill-to Name 2 (Cost Plus)" := TryoutQuoteRec."Bill-to Name 2";
        ServContrRec."Bill-to Address (Cost Plus)" := TryoutQuoteRec."Bill-to Address";
        ServContrRec."Bill-to Address 2 (Cost Plus)" := TryoutQuoteRec."Bill-to Address 2";
        ServContrRec."Bill-to Post Code (Cost Plus)" := TryoutQuoteRec."Bill-to Post Code";
        ServContrRec."Bill-to City (Cost Plus)" := TryoutQuoteRec."Bill-to City";
        ServContrRec."Contact Person"   := TryoutQuoteRec."Contact Person No.";
        ServContrRec."Contact Person Name" := TryoutQuoteRec."Contact Person Name";
        ServContrRec."Bill-to Contact Person (CP)" := TryoutQuoteRec."Bill-to Contact No (Person)";
        ServContrRec."Bill-to Cont. Person Name (CP)" := TryoutQuoteRec."Bill-to Contact Name";
        ServContrRec.VALIDATE("Bill-to Customer No. (Contr.)", TryoutQuoteRec."Bill-to Customer No.");
        ServContrRec."Bill-to Name (Contract)" := TryoutQuoteRec."Bill-to Name";
        ServContrRec."Bill-to Name 2 (Contract)" := TryoutQuoteRec."Bill-to Name 2";
        ServContrRec."Bill-to Address (Contract)" := TryoutQuoteRec."Bill-to Address";
        ServContrRec."Bill-to Address 2 (Contract)" := TryoutQuoteRec."Bill-to Address 2";
        ServContrRec."Bill-to Post Code (Contract)" := TryoutQuoteRec."Bill-to Post Code";
        ServContrRec."Bill-to City (Contract)" := TryoutQuoteRec."Bill-to City";
        ServContrRec."Your Reference" := TryoutQuoteRec."Your reference";
        ServContrRec.MODIFY;
      END;

      IF SuccQuote THEN
        TryOutCode := TryoutQuoteRec."Try-out No."
      ELSE
        TryOutCode := TryoutRec.Code;

      RiskOpportunitySchedule.SETRANGE(Source, 1);
        RiskOpportunitySchedule.SETRANGE("Source Code", TryOutCode);
      IF RiskOpportunitySchedule.FINDLAST THEN
        RiskOpportunityManagement.CopyScheduleBetweenSources(1, TryOutCode,RiskOpportunitySchedule.Date,2,ServContrRec."No.",RiskOpportunitySchedule.Date);

      TryoutSuccRec.GET(gvTryOut, gvTryOutQuote, gvTryOutLine);
      TryoutSuccRec."Service Contract No." := ServContrRec."No.";
      TryoutSuccRec.MODIFY;

      COMMIT;
      MESSAGE(Text000, ServContrRec.TABLECAPTION, ServContrRec."No.");
    END;

    PROCEDURE GenerateServiceSurvey@1100528600();
    VAR
      OriginalServiceSurvey@1100528602 : Record 11071803;
      ServiceSurvey@1100528600 : Record 11071803;
      ServiceSurveyTemplate@1100529400 : Record 11072289;
      ServiceSurveyLocation@1100528603 : Record 11071804;
      ServiceSurveyManagement@1100528601 : Codeunit 11012852;
      LocationCode@1100528604 : Code[10];
    BEGIN
      ServiceSurvey.INIT;
      ServiceSurvey."No." := NewCode;
      ServiceSurvey."No. Series" := CurrSeries;
      IF ServiceSurveyNo <> '' THEN BEGIN
        OriginalServiceSurvey.GET(ServiceSurveyNo);
        ServiceSurveyManagement.CopySurvey(OriginalServiceSurvey, NewCode, '');
        ServiceSurvey.GET(NewCode);
      END ELSE IF ServiceSurveyTemplateCode <> '' THEN BEGIN
        IF ServiceSurveyTemplate.GET(ServiceSurveyTemplateCode) THEN BEGIN
          ServiceSurvey."Template Code" := ServiceSurveyTemplateCode;
          ServiceSurvey."Summary Sheet (Cost)" := ServiceSurveyTemplate."Summary Sheet (Cost)";
          ServiceSurvey."Summary Sheet Seq. No. (Cost)" := ServiceSurveyTemplate."Summary Sheet Seq. No. (Cost)";
          ServiceSurvey.TRANSFERFIELDS(ServiceSurveyTemplate, FALSE);
        END;
        ServiceSurvey.INSERT(TRUE);
      END ELSE
        ServiceSurvey.INSERT(TRUE);

      IF SuccQuote = FALSE THEN BEGIN
        TryoutRec.GET(SuccFilter);
        ServiceSurvey.VALIDATE(Description, TryoutRec.Description);
        ServiceSurvey."Description 2" := TryoutRec."Description 2";
        ServiceSurvey.MODIFY;
      END ELSE BEGIN
        TryoutQuoteRec.GET(SuccFilter);
        TryoutQuoteRec.CALCFIELDS("Contact Person Name");
        ServiceSurvey.VALIDATE(Description, TryoutQuoteRec.Description);
        ServiceSurvey."Description 2" := TryoutQuoteRec."Description 2";
        ServiceSurvey.VALIDATE("Contact No. (Company)", TryoutQuoteRec."Contact No.");
        ServiceSurvey.VALIDATE("Contact No. (Person)", TryoutQuoteRec."Contact Person No.");
        ServiceSurvey.VALIDATE("Customer No.", GetCustomer(TryoutQuoteRec."Contact No."));
        //DP00978.sn
        ServiceSurvey."Register Date" := TryoutQuoteRec."Register Date";
        IF TryoutQuoteRec.Estimator <> '' THEN
          ServiceSurvey.Estimator := TryoutQuoteRec.Estimator;
        //DP00978.en
        ServiceSurvey.MODIFY;
      END;

      TryoutSuccRec.GET(gvTryOut, gvTryOutQuote, gvTryOutLine);

      IF TryoutSuccRec."Service Contract No." <> '' THEN BEGIN
        ServiceSurvey.VALIDATE("Existing Contract No.", TryoutSuccRec."Service Contract No.");
        ServiceSurvey.MODIFY(TRUE);
      END;

      IF TryoutSuccRec."Service Location No." <> '' THEN BEGIN
        ServiceSurveyLocation.SETRANGE("Survey No.", ServiceSurvey."No.");
        IF ServiceSurveyLocation.FINDLAST THEN
          LocationCode := ServiceSurveyLocation."Location Code"
        ELSE
          LocationCode := '000';
        LocationCode := INCSTR(LocationCode);
        ServiceSurveyLocation.INIT;
        ServiceSurveyLocation."Survey No." := ServiceSurvey."No.";
        ServiceSurveyLocation."Location Code" := LocationCode;
        ServiceSurveyLocation.INSERT(TRUE);
        ServiceSurveyLocation.SetAutoConfirmServiceLocationSelection(TRUE);
        ServiceSurveyLocation.VALIDATE("Service Location No.", TryoutSuccRec."Service Location No.");
        ServiceSurveyLocation.MODIFY(TRUE);
      END;

      TryoutSuccRec."Service Survey No." := ServiceSurvey."No.";
      TryoutSuccRec.MODIFY;

      COMMIT;
      MESSAGE(Text000, ServiceSurvey.TABLECAPTION, ServiceSurvey."No.");
    END;

    PROCEDURE InsertProjectPrincipal@1100485003(lvCustomer@1210190001 : Code[20];lvProject@1100485000 : Code[20]);
    VAR
      ProjRec@1100485001 : Record 11072003;
      ProjPrincipalRec@1210190000 : Record 11012005;
      CommRec@1210190002 : Record 11012020;
      SettlRec@1210190003 : Record 11012021;
    BEGIN
      IF lvCustomer = '' THEN
        EXIT;

      JobSetup.GET;
      ProjRec.GET(lvProject);

      IF NOT ProjPrincipalRec.GET(lvProject, lvCustomer) THEN BEGIN
        ProjPrincipalRec.INIT;
        ProjPrincipalRec."Project No." := lvProject;
        ProjPrincipalRec.VALIDATE(Principal, lvCustomer);
        ProjPrincipalRec."Cost Plus Customer" := TRUE;
        IF ProjPrincipalRec."Cost Object" = '' THEN
          ProjPrincipalRec."Cost Object" := JobSetup."Cost Object Cost Plus";
        IF ProjPrincipalRec."VAT Prod. Posting Group" = '' THEN
          ProjPrincipalRec."VAT Prod. Posting Group" := JobSetup."VAT Prod. Post Group";
        ProjPrincipalRec.VALIDATE("Bill-to Customer No.", TryoutQuoteRec."Bill-to Customer No.");
        ProjPrincipalRec."Bill-to Name" := TryoutQuoteRec."Bill-to Name";
        ProjPrincipalRec."Bill-to Name 2" := TryoutQuoteRec."Bill-to Name 2";
        ProjPrincipalRec."Bill-to Address" := TryoutQuoteRec."Bill-to Address";
        ProjPrincipalRec."Bill-to Address 2" := TryoutQuoteRec."Bill-to Address 2";
        ProjPrincipalRec."Bill-to Post Code" := TryoutQuoteRec."Bill-to Post Code";
        ProjPrincipalRec."Bill-to City" := TryoutQuoteRec."Bill-to City";
        ProjPrincipalRec.INSERT(TRUE);
      END;

      CommRec.RESET;
      CommRec.SETRANGE("Project No.", lvProject);
      CommRec.SETRANGE(Principal, lvCustomer);
      IF NOT CommRec.FINDLAST THEN BEGIN
        CommRec.INIT;
        CommRec."Project No." := lvProject;
        CommRec.Principal := lvCustomer;
        CommRec."No." := '1';
        CommRec.Text := ProjRec.Text;
        CommRec.Description := ProjRec.Description;
        //CommRec."Collect Invoices By" := JobSetup."Default Collect Invoices By"; //from customer, is done in InitRecord
        CommRec.InitRecord();
        CommRec.INSERT;
      END;

      SettlRec.RESET;
      SettlRec.SETRANGE("Project No.", lvProject);
      SettlRec.SETRANGE(Principal, lvCustomer);
      SettlRec.SETRANGE("Commission No.", CommRec."No.");
      IF NOT SettlRec.FINDLAST THEN BEGIN
        SettlRec.INIT;
        SettlRec."Project No." := lvProject;
        SettlRec.Principal := lvCustomer;
        SettlRec."Commission No." := CommRec."No.";
        SettlRec."No." := '1';
        SettlRec.Description := ProjRec.Description;
        SettlRec.Text := ProjRec.Text;
        SettlRec."Reference Date" := TODAY;
        SettlRec.INSERT;
        SettlRec.InsertDefCustAgreementLines(
          SettlRec."Project No.", SettlRec.Principal, SettlRec."Commission No.", SettlRec."No.", SettlRec."Reference Date");
      END;
    END;

    PROCEDURE GetCustomer@1210190003(lvContact@1210190000 : Code[20]) : Code[20];
    VAR
      ContBusRel@1210190001 : Record 5054;
    BEGIN
      ContBusRel.RESET;
      ContBusRel.SETCURRENTKEY("Contact No.", "Business Relation Code");
      ContBusRel.SETRANGE("Contact No.", lvContact);
      ContBusRel.SETRANGE("Link to Table", ContBusRel."Link to Table"::Customer);
      IF ContBusRel.FIND('-') THEN
        EXIT(ContBusRel."No.");

      EXIT('');
    END;

    PROCEDURE CheckSeries@1210190005(lvAssistEdit@1100485000 : Boolean);
    VAR
      ServiceSourceTypeSetup@1210190001 : Record 11071726;
    BEGIN
      CASE gvAction OF
        20:
          BEGIN
            JobSetup.GET;
            JobSetup.TESTFIELD("Job Nos.");
            CurrSeries := JobSetup."Job Nos.";
          END;
        21:
          BEGIN
            JobSetup.GET;
            JobSetup.TESTFIELD("Small Project Nos.");
            CurrSeries := JobSetup."Small Project Nos.";
          END;
        22: //kzwerver, 110527, n, #27456
          BEGIN
            JobSetup.GET;
            JobSetup.TESTFIELD("Assembly Project Nos.");
            CurrSeries := JobSetup."Assembly Project Nos.";
          END;
        30:
          BEGIN
            ServiceSourceTypeSetup.GET(ServiceSourceTypeSetup."Source Type"::Direct);
            ServiceSourceTypeSetup.TESTFIELD("No. Series");
            CurrSeries := ServiceSourceTypeSetup."No. Series";
          END;
        31:
          BEGIN
            ServSetup.GET;
            ServSetup.TESTFIELD("Service Location Nos.");
            CurrSeries := ServSetup."Service Location Nos.";
          END;
        32:
          BEGIN
            ServSetup.GET;
            ServSetup.TESTFIELD("Service Contract Nos.");
            CurrSeries := ServSetup."Service Contract Nos.";
          END;
        33:
          BEGIN
            ServSetup.GET;
            ServSetup.TESTFIELD("Survey Nos.");
            CurrSeries := ServSetup."Survey Nos.";
          END;
        34:
          BEGIN
            ServSetup.GET;
            ServSetup.TESTFIELD("Call Nos.");
            CurrSeries := ServSetup."Call Nos.";
          END;
      END;

      IF lvAssistEdit = FALSE THEN  //C024158
        IF CheckMoreSeries THEN
          lvAssistEdit := TRUE;

      IF lvAssistEdit = TRUE THEN
        NoSeriesMgt.SelectSeries(CurrSeries, CurrSeries, CurrSeries);

      DetermineNewCode(FALSE);

      IF CRMSetup."Inherit No. at Successor" THEN BEGIN
        CurrSeries := '';
        NewCode := SuccFilter;
        NewCodeEditable := FALSE;
      END ELSE BEGIN
        NewCodeEditable := CheckSeriesManual;
      END;
    END;

    PROCEDURE CheckSeriesManual@1100485006() : Boolean;
    VAR
      NoSeries@1100485000 : Record 308;
    BEGIN
      IF NOT NoSeries.GET(CurrSeries) THEN
        EXIT(TRUE);
      EXIT(NoSeries."Manual Nos.");
    END;

    PROCEDURE CheckSeriesDefaultNos@1100525001() : Boolean;
    VAR
      NoSeries@1100485000 : Record 308;
    BEGIN
      IF CurrSeries = '' THEN
        EXIT(FALSE);
      IF NOT NoSeries.GET(CurrSeries) THEN
        EXIT(FALSE);
      EXIT(NoSeries."Default Nos.");
    END;

    PROCEDURE DetermineNewCode@1000000000(lvUpdate@1100485000 : Boolean);
    BEGIN
      IF CheckSeriesDefaultNos THEN BEGIN
        CLEAR(NoSeriesMgt);
        NewCode := NoSeriesMgt.GetNextNo(CurrSeries,0D,lvUpdate);
      END ELSE BEGIN
        IF CurrSeries <> '' THEN
          NewCode := '';
      END;
    END;

    PROCEDURE CheckNewCode@1100485002();
    VAR
      lvText000@1100485000 : TextConst 'ENU=%1 %2 already exists;NOR=%1 %2 finnes allerede.;SVE=%1 %2 finns redan.';
      EstRec@1100485001 : Record 11012151;
      ProjRec@1100485002 : Record 11072003;
      ServOrderRec@1100485003 : Record 11012823;
      ServLocRec@1100485004 : Record 11012801;
      ServContrRec@1100485005 : Record 11012812;
      ServiceSurvey@1210190000 : Record 11071803;
      ServiceCall@1100528600 : Record 11012822;
    BEGIN
      CASE gvAction OF
        10,12: IF EstRec.GET(NewCode) THEN ERROR(lvText000, EstRec.TABLECAPTION, NewCode);
        20,21,22: IF ProjRec.GET(NewCode) THEN ERROR(lvText000, ProjRec.TABLECAPTION, NewCode);
        30: IF ServOrderRec.GET(NewCode) THEN ERROR(lvText000, ServOrderRec.TABLECAPTION, NewCode);
        31: IF ServLocRec.GET(NewCode) THEN ERROR(lvText000, ServLocRec.TABLECAPTION, NewCode);
        32: IF ServContrRec.GET(NewCode) THEN ERROR(lvText000, ServContrRec.TABLECAPTION, NewCode);
        33: IF ServiceSurvey.GET(NewCode) THEN ERROR(lvText000, ServiceSurvey.TABLECAPTION, NewCode);
        34: IF ServiceCall.GET(NewCode) THEN ERROR(lvText000, ServiceCall.TABLECAPTION, NewCode);
      END;
    END;

    PROCEDURE GenerateProjRespPers@1100525000(TryOutNo@1100525000 : Code[20];ProjectNo@1100525001 : Code[20]);
    VAR
      ProjRespPersRec@1100525003 : Record 11012040;
    BEGIN
      TryoutRespPersRec.SETRANGE("Try-out", TryOutNo);
      IF TryoutRespPersRec.FINDSET THEN
        REPEAT
          ProjRespPersRec.INIT;
          ProjRespPersRec."Project No." := ProjectNo;
          ProjRespPersRec."Line No." := ProjRespPersRec."Line No." + 10000;
          ProjRespPersRec.Responsibility := TryoutRespPersRec.Responsibility;
          ProjRespPersRec."Employee No." := TryoutRespPersRec.Employee;
          ProjRespPersRec.INSERT(TRUE);
        UNTIL TryoutRespPersRec.NEXT = 0;
    END;

    LOCAL PROCEDURE NewCodeOnAfterValidate@19056113();
    BEGIN
      CheckNewCode;
      CurrSeries := '';
      //4PSSE.sn  UKR-C25015
      UseNoSeriesCostCentre := FALSE;
      UseNoSeriesCostCentreEnabled := FALSE;
      //4PSSE.en
    END;

    PROCEDURE UpdateResponsibility@1100525003(IProjNo@1210190000 : Code[20];INewEmplNo@1100525002 : Code[20]);
    VAR
      lvProjRespPersRec@1100525004 : Record 11012040;
      lvProjRespPersRec2@1100525006 : Record 11012040;
      lvRespCode@1100525003 : Code[10];
    BEGIN
      JobSetup.GET;
      lvRespCode := JobSetup."Responsibility Estimator";

      IF (lvRespCode = '') OR (INewEmplNo = '') THEN
        EXIT;

      lvProjRespPersRec.SETCURRENTKEY("Employee No.", Responsibility, "Project No.");
      lvProjRespPersRec.SETRANGE("Project No.", IProjNo);
      lvProjRespPersRec.SETRANGE(Responsibility, lvRespCode);
      lvProjRespPersRec2.SETCURRENTKEY("Employee No.", Responsibility, "Project No.");
      lvProjRespPersRec2.SETRANGE("Project No.", IProjNo);
      lvProjRespPersRec2.SETRANGE(Responsibility, lvRespCode);

      lvProjRespPersRec.SETRANGE("Employee No.", INewEmplNo);
      IF NOT lvProjRespPersRec.FINDFIRST THEN BEGIN
        lvProjRespPersRec2.RESET;
        lvProjRespPersRec2.SETRANGE("Project No.", IProjNo);
        IF NOT lvProjRespPersRec2.FINDLAST THEN
          lvProjRespPersRec2."Line No." := 0;
        lvProjRespPersRec.RESET;
        lvProjRespPersRec.INIT;
        lvProjRespPersRec."Project No." := IProjNo;
        lvProjRespPersRec."Line No." := lvProjRespPersRec2."Line No." + 10000;
        lvProjRespPersRec.Responsibility := lvRespCode;
        lvProjRespPersRec."Employee No." := INewEmplNo;
        lvProjRespPersRec.INSERT;
      END;
    END;

    PROCEDURE CheckMoreSeries@1100525002() : Boolean;
    VAR
      SerieRelation@1100525000 : Record 310;
    BEGIN
      //C024158
      SerieRelation.SETRANGE(Code, CurrSeries);
      IF SerieRelation.FIND('-') THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    LOCAL PROCEDURE CopyResponsiblePersonsFromTryoutQuote@1100527000(TryoutQuoteNo@1100527000 : Code[20];ProjectNo@1100527002 : Code[20]);
    VAR
      TryoutQuoteResponsPerson@1100527001 : Record 11125867;
      ProjectResponsiblePerson@1100527003 : Record 11012040;
    BEGIN
      TryoutQuoteResponsPerson.SETRANGE("Try-out Quote No.", TryoutQuoteNo);
      IF TryoutQuoteResponsPerson.FINDSET THEN
        REPEAT
          ProjectResponsiblePerson.INIT;
          ProjectResponsiblePerson."Project No." := ProjectNo;
          ProjectResponsiblePerson."Line No." += 10000;
          ProjectResponsiblePerson.Responsibility := TryoutQuoteResponsPerson.Responsibility;
          ProjectResponsiblePerson."Employee No." := TryoutQuoteResponsPerson."Employee No.";
          ProjectResponsiblePerson.INSERT(TRUE);
        UNTIL TryoutQuoteResponsPerson.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckUpdateProjectInPlantLocationAllowed@1100529000() : Boolean;
    VAR
      PlantManagementCompany@1100529000 : Record 11020586;
      PlantLocation@1100529001 : Record 11012554;
    BEGIN
      PlantManagementCompany.SETFILTER("Plant Company", '<>%1', '');
      IF PlantManagementCompany.FINDSET THEN BEGIN
        REPEAT
          SetPlantLocationFilters(PlantManagementCompany."Plant Company", PlantLocation);
          IF NOT PlantLocation.ISEMPTY THEN
            EXIT(TRUE);
        UNTIL PlantManagementCompany.NEXT = 0;
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE UpdateProjectPlantlocations@1100529004(Project@1100529000 : Record 11072003);
    VAR
      PlantManagementCompany@1100529002 : Record 11020586;
      PlantLocation@1100529001 : Record 11012554;
    BEGIN
      PlantManagementCompany.SETFILTER("Plant Company", '<>%1', '');
      IF PlantManagementCompany.FINDSET THEN BEGIN
        REPEAT
          SetPlantLocationFilters(PlantManagementCompany."Plant Company", PlantLocation);
          IF PlantLocation.FINDSET(TRUE,FALSE) THEN BEGIN
            REPEAT
              PlantLocation."Project No." := Project."No.";
              PlantLocation."Starting Date" := Project."Starting Date";
              PlantLocation."Ending Date" := Project."Ending Date";
              PlantLocation.MODIFY(FALSE);
            UNTIL PlantLocation.NEXT = 0;
          END;
        UNTIL PlantManagementCompany.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE SetPlantLocationFilters@1100529006(PlantCompany@1100529001 : Text;VAR PlantLocation@1100529000 : Record 11012554);
    BEGIN
      PlantLocation.RESET;
      PlantLocation.CHANGECOMPANY(PlantCompany);
      PlantLocation.SETCURRENTKEY("Company Name", "Try-out Quote No.");
      IF PlantCompany = COMPANYNAME THEN
        PlantLocation.SETRANGE("Company Name", '')
      ELSE
        PlantLocation.SETRANGE("Company Name", COMPANYNAME);
      PlantLocation.SETRANGE("Try-out Quote No.", gvTryOutQuote);
      PlantLocation.SETRANGE("Project No.", '');
    END;

    LOCAL PROCEDURE GetDepartmentCodeFromNoSeries@1000000001(NoSeriesCode@1000000000 : Code[10]) : Code[20];
    BEGIN
      // 160823 ITERO.AC RFC124 Function that returns department code from No. Series
      IF NoSeries.GET(NoSeriesCode) THEN BEGIN
        IF NoSeries."Department Code" <> '' THEN
          EXIT(NoSeries."Department Code")
        ELSE
          EXIT('');
      END;
      EXIT('');
    END;

    BEGIN
    {
      DP01849: GenerateEstimate moved to new report 11012760.
      *** 4PSSE.I012 ***
      130710 Added code under GenerateEstimate() and GenerateProject() to copy ROT information
      140205 MarHAm Corrected ROT-handeling where only one row was copied
      150320 ITERO.MH Added Extended rot information
      151127 ITERO.AC IME404 GenerateProject(): Use customer from Contact Business Relation as Bill-to customer if blank in Try-out Quote (in order to get all alternative invoicing addresses for the new Project Principal )
      4PSSE 28-07-2016 UKR-C25015 OTRO: Checker for taking Global Dimension Code 1 from No Series
      160823 ITERO.AC RFC124 Get "Global Dimension 1 Code" from No.Series, also changed CaptionML for new checkbox in request page
    }
    END.
  }
  RDLDATA
  {
  }
}

