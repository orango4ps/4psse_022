OBJECT Codeunit 137 OCR Inc. Doc. via Job Queue
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW111.00;
  }
  PROPERTIES
  {
    TableNo=472;
    Permissions=TableData 472=rimd;
    OnRun=VAR
            IncomingDocument@1000 : Record 130;
            SendIncomingDocumentToOCR@1003 : Codeunit 133;
            RecRef@1001 : RecordRef;
          BEGIN
            TESTFIELD("Record ID to Process");
            RecRef.GET("Record ID to Process");
            RecRef.SETTABLE(IncomingDocument);
            IncomingDocument.FIND;
            SetJobQueueStatus(IncomingDocument,IncomingDocument."Job Queue Status"::Processing);

            CASE IncomingDocument."OCR Status" OF
              IncomingDocument."OCR Status"::Ready:
                IF NOT SendIncomingDocumentToOCR.TrySendToOCR(IncomingDocument) THEN BEGIN
                  SetJobQueueStatus(IncomingDocument,IncomingDocument."Job Queue Status"::Error);
                  ERROR(GETLASTERRORTEXT);
                END;
              IncomingDocument."OCR Status"::Sent,IncomingDocument."OCR Status"::"Awaiting Verification":
                IF NOT (SendIncomingDocumentToOCR.TryRetrieveFromOCR(IncomingDocument) AND
                        (IncomingDocument."OCR Status" = IncomingDocument."OCR Status"::Success))
                THEN BEGIN
                  SetJobQueueStatus(IncomingDocument,IncomingDocument."Job Queue Status"::Processing);
                  ERROR(GETLASTERRORTEXT);
                END;
            END;

            SetJobQueueStatus(IncomingDocument,IncomingDocument."Job Queue Status"::" ");
          END;

  }
  CODE
  {
    VAR
      OCRSendReceiveDescriptionTxt@1000 : TextConst '@@@="%1 = document type, %2 = document number. Example: Post Purchase Order 1234.";ENU=OCR Incoming Document No. %1.;NOR=Innkommende dokumentnr. for OCR: %1.;SVE=Inkommande dokument-nr f”r OCR %1.';
      IncomingDocumentScheduledMsg@1001 : TextConst '@@@="%1=document type, %2=number, e.g. Order 123  or Invoice 234.";ENU=Incoming Document No. %1 has been scheduled for OCR.;NOR=Innkommende dokumentnr. %1 er planlagt for OCR.;SVE=Inkommande dokumentnr %1 har blivit schemalagt f”r OCR.';
      WrongJobQueueStatusErr@1003 : TextConst '@@@="%1 = document type, %2 = document number. Example: Purchase Order 1234 or Invoice 1234.";ENU=Incoming Document No. %1 cannot be processed because it has already been scheduled for OCR. Choose the Remove from Job Queue action to reset the job queue status and then OCR again.;NOR=Innkommende dokumentnr. %1 kan ikke behandles fordi det allerede er planlagt for OCR. Velg handlingen Fjern fra jobbk› for † tilbakestille jobbk›statusen, og gjennomf›r deretter OCR-prosessen p† nytt.;SVE=Det g†r inte att behandla inkommande dokumentnr %1 eftersom det redan schemalagts f”r OCR. V„lj Ta bort fr†n jobbk” f”r att †terst„lla jobbk”statusen och schemal„gg f”r OCR p† nytt.';

    LOCAL PROCEDURE SetJobQueueStatus@5(VAR IncomingDocument@1001 : Record 130;NewStatus@1000 : Option);
    BEGIN
      IncomingDocument.LOCKTABLE;
      IF IncomingDocument.FIND THEN BEGIN
        IncomingDocument."Job Queue Status" := NewStatus;
        IncomingDocument.MODIFY;
        COMMIT;
      END;
    END;

    [External]
    PROCEDURE EnqueueIncomingDoc@1(VAR IncomingDocument@1000 : Record 130);
    BEGIN
      WITH IncomingDocument DO BEGIN
        IF NOT ("Job Queue Status" IN ["Job Queue Status"::" ","Job Queue Status"::Error]) THEN
          ERROR(WrongJobQueueStatusErr,"Entry No.");
        IF Status = Status::New THEN
          CODEUNIT.RUN(CODEUNIT::"Release Incoming Document",IncomingDocument);

        "Job Queue Status" := "Job Queue Status"::Scheduled;
        "Job Queue Entry ID" := EnqueueJobEntry(IncomingDocument);
        MODIFY;
        MESSAGE(IncomingDocumentScheduledMsg,"Entry No.");
      END;
    END;

    LOCAL PROCEDURE EnqueueJobEntry@3(IncomingDocument@1001 : Record 130) : GUID;
    VAR
      JobQueueEntry@1000 : Record 472;
    BEGIN
      WITH JobQueueEntry DO BEGIN
        "Object Type to Run" := "Object Type to Run"::Codeunit;
        "Object ID to Run" := CODEUNIT::"OCR Inc. Doc. via Job Queue";
        "Record ID to Process" := IncomingDocument.RECORDID;
        // Set Timeout to prevent the Job Queue from hanging (eg. as a result of a printer dialog).
        "Maximum No. of Attempts to Run" := 10;
        "Rerun Delay (sec.)" := 5;
        Priority := 1000;
        Description :=
          COPYSTR(STRSUBSTNO(OCRSendReceiveDescriptionTxt,IncomingDocument."Entry No."),1,MAXSTRLEN(Description));
        "Notify On Success" := TRUE;
        CODEUNIT.RUN(CODEUNIT::"Job Queue - Enqueue",JobQueueEntry);
        EXIT(ID);
      END;
    END;

    [External]
    PROCEDURE CancelQueueEntry@2(VAR IncomingDocument@1000 : Record 130);
    VAR
      JobQueueEntry@1002 : Record 472;
    BEGIN
      WITH IncomingDocument DO BEGIN
        IF "Job Queue Status" = "Job Queue Status"::" " THEN
          EXIT;
        IF NOT ISNULLGUID("Job Queue Entry ID") THEN
          JobQueueEntry.SETRANGE(ID,"Job Queue Entry ID");
        JobQueueEntry.SETRANGE("Record ID to Process",RECORDID);
        IF NOT JobQueueEntry.ISEMPTY THEN
          JobQueueEntry.DELETEALL(TRUE);
        "Job Queue Status" := "Job Queue Status"::" ";
        MODIFY;
      END;
    END;

    BEGIN
    END.
  }
}

