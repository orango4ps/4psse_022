OBJECT Report 952 Suggest Job Jnl. Lines
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.04,4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Projekt Buch.-Blattzeilen vorschlagen;
               ENU=Suggest Job Jnl. Lines;
               NLD=Projectdagboekregels voorstellen;
               NOR=ForeslÜ prosjektkladdelinjer];
    ProcessingOnly=Yes;
    OnPostReport=VAR
                   NoSeriesMgt@1002 : Codeunit 396;
                   TimeSheetMgt@1003 : Codeunit 950;
                   NextDocNo@1001 : Code[20];
                   LineNo@1000 : Integer;
                   QtyToPost@1004 : Decimal;
                 BEGIN
                   DateFilter := TimeSheetMgt.GetDateFilter(StartingDate,EndingDate);
                   FillTimeSheetLineBuffer;

                   IF TempTimeSheetLine.FINDSET THEN BEGIN
                     JobJnlLine.LOCKTABLE;
                     JobJnlTemplate.GET(JobJnlLine."Journal Template Name");
                     JobJnlBatch.GET(JobJnlLine."Journal Template Name",JobJnlLine."Journal Batch Name");
                     IF JobJnlBatch."No. Series" = '' THEN
                       NextDocNo := ''
                     ELSE
                       NextDocNo := NoSeriesMgt.GetNextNo(JobJnlBatch."No. Series",TempTimeSheetLine."Time Sheet Starting Date",FALSE);

                     JobJnlLine.SETRANGE("Journal Template Name",JobJnlLine."Journal Template Name");
                     JobJnlLine.SETRANGE("Journal Batch Name",JobJnlLine."Journal Batch Name");
                     IF JobJnlLine.FINDLAST THEN;
                     LineNo := JobJnlLine."Line No.";

                     REPEAT
                       TimeSheetHeader.GET(TempTimeSheetLine."Time Sheet No.");
                       TimeSheetDetail.SETRANGE("Time Sheet No.",TempTimeSheetLine."Time Sheet No.");
                       TimeSheetDetail.SETRANGE("Time Sheet Line No.",TempTimeSheetLine."Line No.");
                       IF DateFilter <> '' THEN
                         TimeSheetDetail.SETFILTER(Date,DateFilter);
                       TimeSheetDetail.SETFILTER(Quantity,'<>0');
                       TimeSheetDetail.SETRANGE(Posted,FALSE);
                       IF TimeSheetDetail.FINDSET THEN
                         REPEAT
                           QtyToPost := TimeSheetDetail.GetMaxQtyToPost;
                           IF QtyToPost <> 0 THEN BEGIN
                             JobJnlLine.INIT;
                             LineNo := LineNo + 10000;
                             JobJnlLine."Line No." := LineNo;
                             JobJnlLine."Time Sheet No." := TimeSheetDetail."Time Sheet No.";
                             JobJnlLine."Time Sheet Line No." := TimeSheetDetail."Time Sheet Line No.";
                             JobJnlLine."Time Sheet Date" := TimeSheetDetail.Date;
                             JobJnlLine.VALIDATE("Job No.",TimeSheetDetail."Job No.");
                             JobJnlLine."Source Code" := JobJnlTemplate."Source Code";
                             IF TimeSheetDetail."Job Task No." <> '' THEN
                               JobJnlLine.VALIDATE("Job Task No.",TimeSheetDetail."Job Task No.");
                             JobJnlLine.VALIDATE(Type,JobJnlLine.Type::Resource);
                             JobJnlLine.VALIDATE("No.",TimeSheetHeader."Resource No.");
                             IF TempTimeSheetLine."Work Type Code" <> '' THEN
                               JobJnlLine.VALIDATE("Work Type Code",TempTimeSheetLine."Work Type Code");
                             JobJnlLine.VALIDATE("Posting Date",TimeSheetDetail.Date);
                             JobJnlLine."Document No." := NextDocNo;
                             NextDocNo := INCSTR(NextDocNo);
                             JobJnlLine."Posting No. Series" := JobJnlBatch."Posting No. Series";
                             JobJnlLine.Description := TempTimeSheetLine.Description;
                             JobJnlLine.VALIDATE(Quantity,QtyToPost);
                             JobJnlLine.VALIDATE(Chargeable,TempTimeSheetLine.Chargeable);
                             JobJnlLine."Reason Code" := JobJnlBatch."Reason Code";
                             OnAfterTransferTimeSheetDetailToJobJnlLine(JobJnlLine,JobJnlTemplate,TempTimeSheetLine,TimeSheetDetail,JobJnlBatch);
                             JobJnlLine.INSERT;
                           END;
                         UNTIL TimeSheetDetail.NEXT = 0;
                     UNTIL TempTimeSheetLine.NEXT = 0;
                   END;
                 END;

  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DEU=Optionen;
                             ENU=Options;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 2   ;2   ;Field     ;
                  Name=StartingDate;
                  CaptionML=[DEU=Startdatum;
                             ENU=Starting Date;
                             NLD=Begindatum;
                             NOR=Startdato;
                             SVE=Startdatum];
                  ToolTipML=[DEU=Gibt das Datum an, ab dem fÅr den Bericht oder die Stapelverarbeitung Informationen verarbeitet werden.;
                             ENU=Specifies the date from which the report or batch job processes information.;
                             NLD=Hiermee wordt de datum opgegeven vanaf wanneer het rapport of de batchverwerking informatie verwerkt.;
                             NOR=Angir datoen som rapporten eller kjõrselen behandler informasjon fra.;
                             SVE=Anger datumet frÜn vilket rapporten eller batch-jobbet bearbetar information.];
                  ApplicationArea=#Jobs;
                  SourceExpr=StartingDate }

      { 1   ;2   ;Field     ;
                  Name=EndingDate;
                  CaptionML=[DEU=Enddatum;
                             ENU=Ending Date;
                             NLD=Einddatum;
                             NOR=Sluttdato;
                             SVE=Slutdatum];
                  ToolTipML=[DEU=Gibt das Datum an, bis zu dem fÅr den Bericht oder die Stapelverarbeitung Informationen verarbeitet werden.;
                             ENU=Specifies the date to which the report or batch job processes information.;
                             NLD=Hiermee wordt de datum opgegeven tot wanneer het rapport of de batchverwerking informatie verwerkt.;
                             NOR=Angir datoen som rapporten eller kjõrselen behandler informasjon til.;
                             SVE=Anger datumet till vilket rapporten eller batch-jobbet bearbetar information.];
                  ApplicationArea=#Jobs;
                  SourceExpr=EndingDate }

      { 3   ;2   ;Field     ;
                  Name=ResourceNoFilter;
                  CaptionML=[DEU=Ressourcennr.-Filter;
                             ENU=Resource No. Filter;
                             NLD=Resourcenr.-filter;
                             NOR=Ressursnr.filter];
                  ToolTipML=[DEU=Gibt die Ressourcennummer an, fÅr die die Stapelverarbeitung Projektzeilen vorschlÑgt.;
                             ENU=Specifies the resource number that the batch job will suggest job lines for.;
                             NLD=Hiermee wordt het resourcenummer opgegeven waarvoor de batchverwerking projectregels voorstelt.;
                             NOR=Angir ressursnummeret som kjõrselen foreslÜr prosjektlinjer for.];
                  ApplicationArea=#Jobs;
                  SourceExpr=ResourceNoFilter;
                  TableRelation=Resource }

      { 4   ;2   ;Field     ;
                  Name=JobNoFilter;
                  CaptionML=[DEU=Projektnr.-Filter;
                             ENU=Job No. Filter;
                             NLD=Taaknr.-filter;
                             NOR=Jobbnummerfilter;
                             SVE=Filter fîr projektnr];
                  ToolTipML=[DEU=Gibt einen Filter fÅr die Projektnummern an, die im Bericht berÅcksichtigt werden sollen.;
                             ENU=Specifies a filter for the job numbers that will be included in the report.;
                             NLD=Hiermee wordt een filter opgegeven voor de projectnummers die in het rapport worden opgenomen.;
                             NOR=Angir et filter for prosjektnumrene som skal vëre med i rapporten.];
                  ApplicationArea=#Jobs;
                  SourceExpr=JobNoFilter;
                  TableRelation=Job }

      { 5   ;2   ;Field     ;
                  Name=JobTaskNoFilter;
                  CaptionML=[DEU=Projektaufgabennr.-Filter;
                             ENU=Job Task No. Filter;
                             NLD=Projecttaaknr.-filter;
                             NOR=Filter for prosjektoppgavenr.;
                             SVE=Filter fîr projektaktivitetsnr];
                  ToolTipML=[DEU=Gibt einen Filter fÅr die Projektaufgabennummern an, die im Bericht berÅcksichtigt werden sollen.;
                             ENU=Specifies a filter for the job task numbers that will be included in the report.;
                             NLD=Hiermee wordt een filter opgegeven voor de projecttaaknummers die in het rapport worden opgenomen.;
                             NOR=Angir et filter for prosjektoppgavenumrene som skal vëre med i rapporten.];
                  ApplicationArea=#Jobs;
                  SourceExpr=JobTaskNoFilter;
                  OnLookup=VAR
                             JobTask@1000 : Record 11072600;
                           BEGIN
                             JobTask.FILTERGROUP(2);
                             IF JobNoFilter <> '' THEN
                               JobTask.SETFILTER("Job No.",JobNoFilter);
                             JobTask.FILTERGROUP(0);
                             IF PAGE.RUNMODAL(PAGE::"Job Task List",JobTask) = ACTION::LookupOK THEN
                               JobTask.TESTFIELD("Job Task Type",JobTask."Job Task Type"::Posting);
                             JobTaskNoFilter := JobTask."Job Task No.";
                           END;
                            }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      JobJnlLine@1012 : Record 11072008;
      JobJnlBatch@1011 : Record 11072011;
      JobJnlTemplate@1010 : Record 11072007;
      TimeSheetHeader@1009 : Record 950;
      TimeSheetLine@1008 : Record 951;
      TempTimeSheetLine@1007 : TEMPORARY Record 951;
      TimeSheetDetail@1006 : Record 952;
      ResourceNoFilter@1005 : Code[1024];
      JobNoFilter@1013 : Code[1024];
      JobTaskNoFilter@1015 : Code[1024];
      StartingDate@1001 : Date;
      EndingDate@1000 : Date;
      DateFilter@1002 : Text[30];

    [External]
    PROCEDURE SetJobJnlLine@1(NewJobJnlLine@1000 : Record 11072008);
    BEGIN
      JobJnlLine := NewJobJnlLine;
    END;

    [External]
    PROCEDURE InitParameters@2(NewJobJnlLine@1000 : Record 11072008;NewResourceNoFilter@1003 : Code[1024];NewJobNoFilter@1005 : Code[1024];NewJobTaskNoFilter@1004 : Code[1024];NewStartingDate@1001 : Date;NewEndingDate@1002 : Date);
    BEGIN
      JobJnlLine := NewJobJnlLine;
      ResourceNoFilter := NewResourceNoFilter;
      JobNoFilter := NewJobNoFilter;
      JobTaskNoFilter := NewJobTaskNoFilter;
      StartingDate := NewStartingDate;
      EndingDate := NewEndingDate;
    END;

    LOCAL PROCEDURE FillTimeSheetLineBuffer@3();
    VAR
      SkipLine@1000 : Boolean;
    BEGIN
      IF ResourceNoFilter <> '' THEN
        TimeSheetHeader.SETFILTER("Resource No.",ResourceNoFilter);
      IF DateFilter <> '' THEN BEGIN
        TimeSheetHeader.SETFILTER("Starting Date",DateFilter);
        TimeSheetHeader.SETFILTER("Starting Date",'..%1',TimeSheetHeader.GETRANGEMAX("Starting Date"));
        TimeSheetHeader.SETFILTER("Ending Date",DateFilter);
        TimeSheetHeader.SETFILTER("Ending Date",'%1..',TimeSheetHeader.GETRANGEMIN("Ending Date"));
      END;

      IF TimeSheetHeader.FINDSET THEN
        REPEAT
          TimeSheetLine.SETRANGE("Time Sheet No.",TimeSheetHeader."No.");
          TimeSheetLine.SETRANGE(Type,TimeSheetLine.Type::Job);
          TimeSheetLine.SETRANGE(Status,TimeSheetLine.Status::Approved);
          IF JobNoFilter <> '' THEN
            TimeSheetLine.SETFILTER("Job No.",JobNoFilter);
          IF JobTaskNoFilter <> '' THEN
            TimeSheetLine.SETFILTER("Job Task No.",JobTaskNoFilter);
          TimeSheetLine.SETRANGE(Posted,FALSE);
          IF TimeSheetLine.FINDSET THEN
            REPEAT
              TempTimeSheetLine := TimeSheetLine;
              OnBeforeInsertTempTimeSheetLine(JobJnlLine,TimeSheetHeader,TempTimeSheetLine,SkipLine);
              IF NOT SkipLine THEN
                TempTimeSheetLine.INSERT;
            UNTIL TimeSheetLine.NEXT = 0;
        UNTIL TimeSheetHeader.NEXT = 0;
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInsertTempTimeSheetLine@4(JobJournalLine@1000 : Record 11072008;TimeSheetHeader@1001 : Record 950;VAR TempTimeSheetLine@1002 : TEMPORARY Record 951;VAR SkipLine@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterTransferTimeSheetDetailToJobJnlLine@5(VAR JobJournalLine@1000 : Record 11072008;JobJournalTemplate@1001 : Record 11072007;VAR TempTimeSheetLine@1002 : TEMPORARY Record 951;TimeSheetDetail@1003 : Record 952;JobJournalBatch@1004 : Record 11072011);
    BEGIN
    END;

    BEGIN
    {
      4PS, Objects renumbered
    }
    END.
  }
  RDLDATA
  {
  }
}

