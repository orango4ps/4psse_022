OBJECT Codeunit 11020511 IMOS Outbound Document Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=VAR
            PartnerAgreement@1000000000 : Record 11020547;
          BEGIN
            PartnerAgreement.SETRANGE(Active,TRUE);
            PartnerAgreement.SETRANGE(Direction,PartnerAgreement.Direction::Outbound);
            PartnerAgreement.SETFILTER("Codeunit No.",'<>%1',0);

            IF PartnerAgreement.FIND('-') THEN BEGIN
              REPEAT
                SendDocuments(PartnerAgreement);
              UNTIL PartnerAgreement.NEXT = 0;
            END;
          END;

  }
  CODE
  {
    VAR
      IMOSSetup@1000000003 : Record 11020549;
      TempCodeunitInterface@1000000006 : TEMPORARY Record 11020534;
      OutboundDocMgt@1000000004 : Codeunit 11020511;
      XMLDOMDocument@1000000000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      ProcessingInstruction@1000000001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlProcessingInstruction";
      FileProtocolMgt@1100485001 : Codeunit 11020512;
      Text001@1100485002 : TextConst 'DEU=Ausgehender Beleg stimmt nicht mit Schema Åberein (%1);ENU=Outbound Document does not match validation schema (%1);NLD=Uitgaand document klopt niet met validatieschema (%1);NOR=UtgÜende dokument matcher ikke Valideringsskjema (%1);SVE=UtgÜende dokument matchar inte valideringsschema (%1)';
      Text002@1100525000 : TextConst 'DEU=Ausgehender Beleg nicht erstellt;ENU=Outbound document not created;NLD=Uitgaand document niet aangemaakt';

    PROCEDURE SendDocuments@1000000010(PartnerAgreement@1000000000 : Record 11020547);
    VAR
      OutboundDocument@1000000001 : Record 11020543;
      SendDate@1000000003 : Date;
      SendTime@1000000002 : Time;
      DocumentIdentifier@1000000004 : Text[30];
      ParseError@1100485000 : Text[1024];
    BEGIN
      SendDate := TODAY;
      SendTime := TIME;
      IMOSSetup.GET;

      WITH OutboundDocument DO BEGIN
        SETRANGE("Agreement Code",PartnerAgreement."Agreement Code");
        SETFILTER(Status,'<>%1',Status::Sent);
        SETFILTER("No. Resent",'<%1',IMOSSetup."Maximum Retry Documents");
        IF NOT FIND('-') THEN
          EXIT;

        REPEAT
          SendDocument2(OutboundDocument,PartnerAgreement,SendDate,SendTime,DocumentIdentifier);
          IF NOT PartnerAgreement."Combine Documents" THEN BEGIN
            IF NOT PartnerAgreement.ValidateAgreementXMLDocument(PartnerAgreement,XMLDOMDocument,ParseError) THEN
              ERROR(Text001,ParseError);
            IF ISNULL(XMLDOMDocument) THEN
              ERROR(Text002);
            FileProtocolMgt.SendXML(PartnerAgreement,XMLDOMDocument,DocumentIdentifier);
            OutboundDocMgt.AskSetOutboundDocIsSent(TRUE,OutboundDocument);
            COMMIT;
            CLEAR(XMLDOMDocument);
          END;
        UNTIL NEXT=0;

        IF PartnerAgreement."Combine Documents" THEN BEGIN
          IF NOT PartnerAgreement.ValidateAgreementXMLDocument(PartnerAgreement,XMLDOMDocument,ParseError) THEN
            ERROR(Text001,ParseError);
          FileProtocolMgt.SendXML(PartnerAgreement,XMLDOMDocument,DocumentIdentifier);
          IF OutboundDocument.FIND('-') THEN
            REPEAT
              OutboundDocMgt.AskSetOutboundDocIsSent(TRUE,OutboundDocument);
            UNTIL OutboundDocument.NEXT=0;
          COMMIT;
          CLEAR(XMLDOMDocument);
        END;
      END;
    END;

    PROCEDURE SendDocument@1000000012(OutboundDocument@1000000000 : Record 11020543);
    VAR
      PartnerAgreement@1000000001 : Record 11020547;
      DocumentIdentifier@1000000003 : Text[30];
      ParseError@1100485000 : Text[1024];
    BEGIN
      WITH OutboundDocument DO BEGIN
        PartnerAgreement.GET("Agreement Code");
        SendDocument2(OutboundDocument,PartnerAgreement,TODAY,TIME,DocumentIdentifier);
        IF NOT PartnerAgreement.ValidateAgreementXMLDocument(PartnerAgreement,XMLDOMDocument,ParseError) THEN
          ERROR(Text001,ParseError);
        IF ISNULL(XMLDOMDocument) THEN
          ERROR(Text002);
        FileProtocolMgt.SendXML(PartnerAgreement,XMLDOMDocument,DocumentIdentifier);
        OutboundDocMgt.AskSetOutboundDocIsSent(TRUE,OutboundDocument);
      END;
    END;

    LOCAL PROCEDURE SendDocument2@1000000009(VAR OutboundDocument@1000000000 : Record 11020543;PartnerAgreement@1000000005 : Record 11020547;SendDate@1000000002 : Date;SendTime@1000000004 : Time;VAR DocumentIdentifier@1000000008 : Text[30]);
    VAR
      XMLDOMNode@1000000007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLDOMDocument2@1000000006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      WITH OutboundDocument DO BEGIN
        "Date Sent" := SendDate;
        "Time Sent" := SendTime;
        "No. Resent" += 1;
        MODIFY;
        COMMIT;
      END;

      CLEAR(TempCodeunitInterface);
      TempCodeunitInterface.Action := TempCodeunitInterface.Action::"Send Document";
      TempCodeunitInterface.SetPartnerAgreement(PartnerAgreement);
      TempCodeunitInterface.SetOutboundDocument(OutboundDocument);
      TempCodeunitInterface."Date Sent" := SendDate;
      TempCodeunitInterface."Time Sent" := SendTime;
      CODEUNIT.RUN(PartnerAgreement."Codeunit No.",TempCodeunitInterface);

      TempCodeunitInterface.INSERT;
      TempCodeunitInterface.GetXMLDocument(XMLDOMDocument2);
      TempCodeunitInterface.DELETE;

      IF PartnerAgreement."Combine Documents" THEN BEGIN
        IF ISNULL(XMLDOMDocument) THEN
          OutboundDocMgt.InitOutboundXMLDocument(XMLDOMDocument,PartnerAgreement,XMLDOMNode);

        IF NOT ISNULL(XMLDOMDocument2) THEN BEGIN
          XMLDOMNode := XMLDOMDocument2.DocumentElement;
          XMLDOMDocument.DocumentElement.AppendChild(XMLDOMNode);
        END;
      END ELSE BEGIN
        XMLDOMDocument := XMLDOMDocument.XmlDocument;
        XMLDOMDocument := XMLDOMDocument2;
      END;

      DocumentIdentifier := TempCodeunitInterface."XML Document Identifier";
    END;

    PROCEDURE AskSetOutboundDocIsSent@1000000003(IsSent@1000000001 : Boolean;OutboundDocument@1000000000 : Record 11020543);
    BEGIN
      IF IsSent THEN
        OutboundDocument.Status := OutboundDocument.Status::Sent
      ELSE
        OutboundDocument.Status := OutboundDocument.Status::Unsent;

      MaintainOutboundDocStatus(OutboundDocument);
    END;

    LOCAL PROCEDURE MaintainOutboundDocStatus@1000000002(OutboundDocument@1000000000 : Record 11020543);
    VAR
      JobNoticeMgtCU@1000000001 : Codeunit 11020513;
    BEGIN
      IMOSSetup.GET;
      WITH OutboundDocument DO BEGIN
        CASE "Source Type" OF
          DATABASE::"Outbound Job Notice (iMOS)":
            JobNoticeMgtCU.OutMgtMaintainStatus(OutboundDocument);
        END;

        IF (IMOSSetup."Delete Sent Documents") AND (OutboundDocument.Status = OutboundDocument.Status::Sent) THEN
          DELETE
        ELSE
          MODIFY;
      END;
    END;

    PROCEDURE InsertOutboundDocument@1(AgreementCode@1000000000 : Code[10];SourceType@1000000001 : Integer;SourceNo@1000000002 : Integer) : Integer;
    VAR
      SourceRecordID@1000000003 : RecordID;
    BEGIN
      InsertOutboundDocument2(AgreementCode,SourceType,SourceNo,SourceRecordID);
    END;

    PROCEDURE InsertOutboundDocument2@1000000004(AgreementCode@1000000000 : Code[10];SourceType@1000000001 : Integer;SourceNo@1000000002 : Integer;SourceRecordID@1000000004 : RecordID) : Integer;
    VAR
      OutboundDocument@1000000003 : Record 11020543;
    BEGIN
      WITH OutboundDocument DO BEGIN
        LOCKTABLE;
        IF FIND('+') THEN;
        "Entry No." += 1;
        INIT;
        "Source Type" := SourceType;
        "Source No." := SourceNo;
        "Source Record ID" := SourceRecordID;
        "Agreement Code" := AgreementCode;
        Status := OutboundDocument.Status::Unsent;
        "Date Sent" := TODAY;
        "Time Sent" := TIME;
        INSERT;
        EXIT("Entry No.");
      END;
    END;

    PROCEDURE InitOutboundXMLDocument@1000000007(VAR XMLDOMDocument@1000000003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";PartnerAgreement@1000000001 : Record 11020547;VAR NewXMLDomNode@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      CurXMLDomNode@1000000002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      PartnerAgreement.TESTFIELD("XML Document Namespace");
      PartnerAgreement.TESTFIELD("XML Document Name");

      XMLDOMDocument := XMLDOMDocument.XmlDocument;

      ProcessingInstruction := XMLDOMDocument.CreateProcessingInstruction('xml', 'version="1.0" encoding="UTF-8"');
      XMLDOMDocument.AppendChild(ProcessingInstruction);

      CurXMLDomNode := XMLDOMDocument.CreateElement(PartnerAgreement."XML Document Name", PartnerAgreement."XML Document Namespace");
      NewXMLDomNode := XMLDOMDocument.AppendChild(CurXMLDomNode);
    END;

    BEGIN
    END.
  }
}

