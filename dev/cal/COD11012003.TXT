OBJECT Codeunit 11012003 Check Hour Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00,4PSSE;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@11012012 : TextConst 'ENU=Number of hours (%1) is not equal to norm hours (%2).;NOR=Antall timer (%1) stemmer ikke i forhold til normert tid (%2).;SVE=Antal timmar (%1) „r inte lika med normtiden (%2).';
      Text002@11012014 : TextConst 'ENU=cannot be a closing date;NOR=kan ikke v‘re en avslutningsdato;SVE=kan inte vara ett avslutsdatum';
      Text003@11012015 : TextConst 'ENU=is not within your range of allowed posting dates;NOR=%1 er ikke i ditt tillatte intervall for bokf›ringsdatoer;SVE=%1 „r inte i det till†tna intervallet f”r bokf”ringsdatum';
      GLSetup@1210190010 : Record 98;
      HumanResourcesSetup@1210190009 : Record 5218;
      JobsSetup@1100525006 : Record 315;
      ServiceSetup@1100525000 : Record 11012800;
      ReceivingProjSetup@1210190016 : Record 315;
      UserSetup@1210190002 : Record 91;
      PlantSetup@1100485010 : Record 11012550;
      HourLineRec@1210190005 : Record 11012039;
      ProjRec@11012001 : Record 11072003;
      ProjTypeRec@1210190007 : Record 11012009;
      ProjElemRec@1100485004 : Record 11012010;
      ServOrderRec@1210190001 : Record 11012823;
      ServTypeRec@1210190011 : Record 11012814;
      DimValRec@11012002 : Record 349;
      EmplRec@1210190003 : Record 5200;
      TradeGroupRec@1210190004 : Record 11012015;
      ProjExpBalAccRec@1210190012 : Record 11012053;
      CostCodeRec@1210190014 : Record 11012083;
      WageComponentRec@1210190013 : Record 11012014;
      RentalUnitRec@1100485000 : Record 11012940;
      PlantLocationRec@1100485011 : Record 11012554;
      PlantTypeRec@1100525002 : Record 11012551;
      PlantNoRec@1100525003 : Record 11012552;
      PlantRateCodeRec@1100525004 : Record 11020502;
      PlantCostCompRec@1100525005 : Record 11012575;
      AllowPostingFrom@11012009 : Date;
      AllowPostingTo@11012010 : Date;
      DimMgt@11012016 : Codeunit 408;
      WIPAcc@1210190015 : Code[20];
      Text004@1210190017 : TextConst 'ENU=may not be filled if Supplying Company is filled;NOR=kan ikke v‘re fylt ut hvis Leverende selskap er fylt ut;SVE=f†r inte vara ifyllt om Levererande F”retag har fyllts i';
      gvVendorCde@1100525001 : Code[20];
      HoursEmployeeOtherCompanies@1210190018 : Decimal;
      Text005@1100485001 : TextConst 'ENU=Norm hours are not controlled for broken weeks.;NOR=Normtid er ikke kontrollert for brutte uker;SVE=Normtid kontrolleras inte mot brutna veckor.';
      gvGiveMessage@1100485002 : Boolean;
      Text006@1100485003 : TextConst 'ENU=%1 has no Sales Price;NOR=%1 har ingen salgspris;SVE=%1 har inget f”rs„ljningspris';
      Text007@1100525007 : TextConst 'ENU=%1 has no Cost Price;NOR=%1 har ingen selvkost;SVE=%1 har inget sj„lvkostnadspris';
      Text008@1100528700 : TextConst 'ENU=Number of hours (%1) is not equal to norm hours (%2). %3 %4, date %5.;NOR=Antall timer (%1) stemmer ikke i forhold til normert tid (%2). %3 %4, dato %5;SVE=Antal timmar (%1) „r inte lika med normtiden (%2). %3 %4, datum %5.';

    [External]
    PROCEDURE RunCheck@1100485001(VAR Rec@1100485000 : Record 11012039);
    BEGIN
      HourLineRec := Rec;
      Code;
      Rec := HourLineRec;
    END;

    PROCEDURE Code@1();
    VAR
      lvHourRec@1100485005 : Record 11012038;
      ResourceRequest@1100529000 : Record 11124901;
      ErrMsg@1100528700 : Text[1024];
    BEGIN
      HumanResourcesSetup.GET;
      JobsSetup.GET;

      WITH HourLineRec DO BEGIN
        CALCFIELDS("Component Type");

        //Skip empty lines
        IF EmptyLine THEN
          EXIT;

        //Test Fields
        TESTFIELD(Year);
        TESTFIELD(Week);
        TESTFIELD("Document No.");
        TESTFIELD("Posting Date");
        TESTFIELD("Hour Set",'');
        IF "Cost Type" = "Cost Type"::Plant THEN BEGIN
          IF NOT (Type IN [Type::Project, Type::Plant, Type::Service]) THEN //mg.c, 20-09-11: M27549
            FIELDERROR("Cost Type");
          //IF "Connection No." > 0 THEN     //*C-019491.o
          //  TESTFIELD("Employee No.", ''); //*C-019491.o
          IF NOT (Type IN [Type::Project, Type::Service]) THEN //C004448.n
            TESTFIELD(External,FALSE);
        END ELSE BEGIN
          TESTFIELD("Employee No.");
          //TESTFIELD("Wage Component"); //#C012006.o
        END;

        lCheckCompanyIC;
        CheckLeave;

        IF Type = Type::Plant THEN BEGIN
          //#C013613.sn
          IF HumanResourcesSetup.SalaryApplicationIsLosaCobra OR
             HumanResourcesSetup.SalaryApplicationIsLosaCTB OR
             HumanResourcesSetup.SalaryApplicationIsLosaKraan THEN
            TESTFIELD("Cost Object");
          //#C013613.en
          //Similar tests in codeunit 11012570 Post Plant Hours Revenues and codeunit 11012571 Plant Hours Costs-Post
          PlantSetup.GET;
          TESTFIELD("Plant Type");
          IF "Plant Location" <> '' THEN //25-01-06 Plant No is only needed for revenues
            TESTFIELD("Plant No.");
          TESTFIELD("Employee No.");

          IF "Plant Location" = '' THEN BEGIN
            TESTFIELD("Cost Component Plant");
            //TESTFIELD("Component Type", "Component Type"::Hours);  //*C-019484.o
            //TESTFIELD("Total Line");  //*C-019484.o
            //*C-019484.sn
            IF "Component Type" <> "Component Type"::Expenses THEN
              TESTFIELD("Total Line")
            ELSE BEGIN
              TESTFIELD(Quantity);
              TESTFIELD(Amount);
              TESTFIELD("Cost Object");
            END
            //*C-019484.en
          END ELSE BEGIN
            IF "Component Type" = "Component Type"::Expenses THEN BEGIN
              TESTFIELD(Quantity);  //*C-019484.n
              TESTFIELD(Amount);    //*C-019484.n
              TESTFIELD("Cost Object");
              TESTFIELD("Cost Component Plant");
            END ELSE BEGIN
              TESTFIELD("Cost Component Plant");
              TESTFIELD("Total Line");
              IF PlantSetup."Rate Codes" THEN
                TESTFIELD("Plant Rate Code")
              ELSE
                TESTFIELD("Plant Rate Code", '');
            END;
            IF NOT PlantSetup.CheckElementMandatory("Plant Location", Element, "Receiving Company") THEN //*C004558
              TESTFIELD(Element);
            PlantLocationRec.GET("Plant Location");
            PlantLocationRec.CheckBlockFromOtherCompany(1, FALSE, TRUE, "Receiving Company");
          END;
          PlantTypeRec.GET("Plant Type");
          HourLineRec.ValidatePlantNo; //**4PS,SR, 12-12-13 Call C004021
          IF "Plant No." <> '' THEN
            PlantNoRec.GET("Plant Type", "Plant No.");
          IF "Plant Rate Code" <> '' THEN
            //PlantRateCodeRec.GET("Plant Rate Code");
            PlantRateCodeRec.CheckPlantRateCode("Plant Location", "Plant Rate Code", TRUE,"Receiving Company",0);
          IF "Cost Component Plant" <> '' THEN
            PlantCostCompRec.GET("Cost Component Plant");
          IF HumanResourcesSetup."Wage Comp. Mandatory for Plant" THEN
            TESTFIELD("Wage Component");
        END;

        //No support for
        IF HumanResourcesSetup.SalaryApplicationIsMercash THEN
          TESTFIELD("Supplying Company",''); //Employee Intercompany not supported for Mercash.
        IF ("Supplying Company" <> '') AND ("Receiving Company" <> '') THEN
          FIELDERROR("Receiving Company", Text004); //'Double IC' not supported.
        IF Type = Type::Service THEN
          TESTFIELD("Supplying Company", ''); //Employee IC not supported for Service

        //IF "Cost Type" <> "Cost Type"::Plant THEN //#C012006.o
        IF ("Wage Component" <> '') THEN //#C012006.n
          WageComponentRec.GET("Wage Component")
        ELSE
          CLEAR(WageComponentRec);

        IF "Employee No." <> '' THEN
          EmplRec.GET("Employee No.")
        ELSE
          CLEAR(EmplRec);

        TESTFIELD(External,EmplRec.External);
        IF External THEN BEGIN
          TESTFIELD("Supplying Company",''); //No External Employees of other Companies allowed
          TESTFIELD(Employer);
        END;

        DimMgt.SetCompany("Receiving Company");
        DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, "Cost Object" <> '', "Project No.");
        CheckCostType(TRUE);  //C005137.c

        CASE Type OF
          Type::Project:
            BEGIN
              TESTFIELD("Project No.");
              TESTFIELD("Cost Object");
              TESTFIELD("Service Order No.", '');
              TESTFIELD("Service Contract No.", '');
              TESTFIELD("Cost Code", '');
              CheckProject;
              IF ProjRec."Posting Element Mandatory" THEN
                TESTFIELD(Element);
              IF Element <> '' THEN BEGIN //Call 6564
                ProjElemRec.GET("Project No.", Element);
                ProjElemRec.CheckProjectElementBlocked;
                ProjElemRec.CheckProjectElementBlockedPerWeek(HourLineRec);
              END;
              IF JobsSetup."Cost Component Mandatory" THEN
                TESTFIELD("Cost Component");
              IF EmplRec."No." <> '' THEN
                EmplRec.TESTFIELD("Trade Association");
            END;
          Type::Service:
            BEGIN
              TESTFIELD("Service Order No.");
              TESTFIELD("Project No.",'');
              TESTFIELD("Cost Code", '');
              TESTFIELD("Cost Object");
              CheckService;
              ServiceSetup.GET;
              IF ServiceSetup."Cost Component Mandatory" THEN
                TESTFIELD("Cost Component");
              IF EmplRec."No." <> '' THEN
                EmplRec.TESTFIELD("Trade Association");
            END;
          Type::Indirect:
            BEGIN
              TESTFIELD("Project No." , '');
              TESTFIELD("Service Order No.", '');
              TESTFIELD("Service Contract No.", '');
              IF "Calculate Wage Costs" = "Calculate Wage Costs"::"Fixed Rate" THEN BEGIN
                TESTFIELD("Cost Code");
                CostCodeRec.GET("Cost Code");
                IF NOT CostCodeRec."No Ledger Entry" THEN BEGIN
                  CostCodeRec.TESTFIELD("Account No.");
                  EmplRec.TESTFIELD("Trade Association");
                  TradeGroupRec.GET(EmplRec."Trade Association");
                  TradeGroupRec.TESTFIELD("Wage Coverage Account");
                  //Check Cost Price Indirect Hours
                  IF HumanResourcesSetup."Cost Price Check" AND ("Component Type" = "Component Type"::Hours) AND
                     (HourLineRec."Unit Cost (LCY)" = 0) THEN
                    FIELDERROR("Employee No.", STRSUBSTNO(Text007, "Employee No."));
                END;
              END ELSE
                IF HumanResourcesSetup."Exchange Salary Application" THEN
                  TESTFIELD("Cost Code");
            END;
          Type::ResourceRequest:
            BEGIN
              TESTFIELD("Resource Request No.");
              TESTFIELD("Cost Object");
              TESTFIELD("Project No.", '');
              TESTFIELD("Service Order No.", '');
              TESTFIELD("Service Contract No.", '');
              TESTFIELD("Cost Code", '');
              TESTFIELD("Supplying Company", '');
              IF "Employee No." <> '' THEN
                EmplRec.TESTFIELD("Trade Association");
              ResourceRequest.CHANGECOMPANY("Resource Req. Receiv. Company");
              ResourceRequest.GET("Resource Request No.");
              ResourceRequest.TESTFIELD("Request Type");
            END;
        END;

        IF ("Rental Unit" <> '')  THEN
          RentalUnitRec.GET("Project No.", "Rental Unit");

        //Check norm hours
        IF ("Wage Component" <> '') THEN //#C012006.n
          CheckNormPostingHours(HourLineRec, TRUE, FALSE, ErrMsg);

        //Check Sales Price Present
        CheckSalesPrice;

        //Check Cost Price Direct Hours
        CheckCostPriceDirectHours(HourLineRec);

        //Check posting date
        IF "Posting Date" <> NORMALDATE("Posting Date") THEN
          FIELDERROR("Posting Date", Text002);

        IF (AllowPostingFrom = 0D) AND (AllowPostingTo = 0D) THEN BEGIN
          IF USERID <> '' THEN
            IF UserSetup.GET(USERID) THEN BEGIN
              AllowPostingFrom := UserSetup."Allow Posting From";
              AllowPostingTo := UserSetup."Allow Posting To";
            END;
          IF (AllowPostingFrom = 0D) AND (AllowPostingTo = 0D) THEN BEGIN
            GLSetup.GET;
            AllowPostingFrom := GLSetup."Allow Posting From";
            AllowPostingTo := GLSetup."Allow Posting To";
          END;
          IF AllowPostingTo = 0D THEN
            AllowPostingTo := 99991231D;
        END;

        IF ("Posting Date" < AllowPostingFrom) OR ("Posting Date" > AllowPostingTo) THEN
      //>>RFCF141
          //FIELDERROR("Posting Date",Text003);
          FIELDERROR("Posting Date",STRSUBSTNO(Text003,"Posting Date"));
      //<<RFC141

        lvHourRec.GET(Year,Week,"Employee No.");
        lvHourRec.VALIDATE("Employee No."); //db, 12-07-07: check Status and Termination Date
      END;
    END;

    [External]
    PROCEDURE lCheckCompanyIC@32();
    BEGIN
      ReceivingProjSetup.CHANGECOMPANY(HourLineRec."Receiving Company");
      ProjRec.CHANGECOMPANY(HourLineRec."Receiving Company");
      ProjElemRec.CHANGECOMPANY(HourLineRec."Receiving Company");
      ProjTypeRec.CHANGECOMPANY(HourLineRec."Receiving Company");
      ServOrderRec.CHANGECOMPANY(HourLineRec."Receiving Company");
      ServTypeRec.CHANGECOMPANY(HourLineRec."Receiving Company");
      CostCodeRec.CHANGECOMPANY(HourLineRec."Receiving Company");
      DimValRec.CHANGECOMPANY(HourLineRec."Receiving Company");
      RentalUnitRec.CHANGECOMPANY(HourLineRec."Receiving Company");
      PlantSetup.CHANGECOMPANY(HourLineRec."Receiving Company");
      PlantLocationRec.CHANGECOMPANY(HourLineRec."Receiving Company");
      PlantTypeRec.CHANGECOMPANY(HourLineRec."Receiving Company");
      PlantNoRec.CHANGECOMPANY(HourLineRec."Receiving Company");
      PlantRateCodeRec.CHANGECOMPANY(HourLineRec."Receiving Company");
      PlantCostCompRec.CHANGECOMPANY(HourLineRec."Receiving Company");

      EmplRec.CHANGECOMPANY(HourLineRec."Supplying Company");
      TradeGroupRec.CHANGECOMPANY(HourLineRec."Supplying Company");

      ReceivingProjSetup.GET;
    END;

    [External]
    PROCEDURE CheckProject@1210190002();
    VAR
      lvCompName@1100485000 : Text[50];
    BEGIN
      WITH HourLineRec DO BEGIN
        DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, TRUE, "Project No.");

        ProjRec.GET("Project No.");
        ProjRec.TESTFIELD("Project Type");
        ProjTypeRec.GET(ProjRec."Project Type");

        CheckProjectStatus;

        GLSetup.GET;
        IF HourLineRec."Receiving Company" <> '' THEN
          lvCompName := HourLineRec."Receiving Company"
        ELSE
          lvCompName := COMPANYNAME;

        IF External AND (Employer <> '') THEN
          gvVendorCde := Employer
        ELSE
          gvVendorCde := '';

        WIPAcc := ProjTypeRec.GetWipAcc(ProjRec."Project Type",
                                        DimValRec."Cost Type",
                                        ProjRec."Project Status",
                                        ReceivingProjSetup."Provisions at Closure",
                                        lvCompName,
                                        DimValRec."Cost Type",
                                        gvVendorCde,
                                        '');
        CASE "Component Type" OF
          "Component Type"::Hours:
            IF "Cost Type" = "Cost Type"::Plant THEN
              DimValRec.TESTFIELD("Balance Account Plant Hours")
            ELSE
              IF ProjTypeRec."Wage Coverage Account" = '' THEN BEGIN
                EmplRec.TESTFIELD("Trade Association");
                TradeGroupRec.GET(EmplRec."Trade Association");
                TradeGroupRec.TESTFIELD("Wage Coverage Account");
              END;
          "Component Type"::Expenses:
            BEGIN
              IF NOT ProjExpBalAccRec.GET(ProjRec."Project Type", "Wage Component") THEN
                ProjExpBalAccRec.INIT;
              IF ProjExpBalAccRec."Balance Account" = '' THEN
                WageComponentRec.TESTFIELD("Bal. Account No.");
            END;
        END;
      END;
    END;

    [External]
    PROCEDURE CheckService@1210190000();
    VAR
      lvCompName@1100525000 : Text[50];
    BEGIN
      WITH HourLineRec DO BEGIN
        DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, TRUE, "Project No.");

        ServOrderRec.GET("Service Order No.");
        ServOrderRec.TestServiceContractMandatory;
        IF ServOrderRec.IsServiceContractMandatory THEN
          TESTFIELD("Service Contract No.", ServOrderRec."Service Contract No.");
        IF "Additional Cost (Service)" THEN BEGIN
          ServOrderRec.TESTFIELD("Service Type (Other)");
          ServTypeRec.GET(ServOrderRec."Service Type (Other)");
        END ELSE BEGIN
          ServOrderRec.TESTFIELD("Service Type");
          ServTypeRec.GET(ServOrderRec."Service Type");
        END;
        IF HourLineRec."Receiving Company" <> '' THEN
          lvCompName := HourLineRec."Receiving Company"
        ELSE
          lvCompName := COMPANYNAME;
        IF External AND (Employer <> '') THEN
          gvVendorCde := Employer
        ELSE
          gvVendorCde := '';

        WIPAcc := ServTypeRec.GetWipAcc(
          ServTypeRec.Code,
          DimValRec."Cost Type",
          lvCompName,
          DimValRec."Cost Type",
          gvVendorCde,
          '');

        CASE "Component Type" OF
          "Component Type"::Hours:
            IF ServTypeRec."Wage Coverage Account" = '' THEN BEGIN
              EmplRec.TESTFIELD("Trade Association");
              TradeGroupRec.GET(EmplRec."Trade Association");
              TradeGroupRec.TESTFIELD("Wage Coverage Account");
            END;
          "Component Type"::Expenses:
            BEGIN
                WageComponentRec.TESTFIELD("Bal. Account No.");
            END;
        END;
      END;
    END;

    [External]
    PROCEDURE GetHoursOtherCompanies@1210190001(VAR Rec@1210190003 : Record 11012039) : Decimal;
    BEGIN
      EXIT(LocalGetHoursOtherCompanies(Rec, -1));
    END;

    [External]
    PROCEDURE GetHoursOtherCompaniesPerDay@1100528710(VAR Rec@1100528701 : Record 11012039;DayOfWeek@1100528700 : Integer) : Decimal;
    BEGIN
      EXIT(LocalGetHoursOtherCompanies(Rec, DayOfWeek));
    END;

    LOCAL PROCEDURE LocalGetHoursOtherCompanies@1100528709(VAR Rec@1100528701 : Record 11012039;DayOfWeek@1100528700 : Integer) TotHours : Decimal;
    VAR
      lHourLine@1100528706 : Record 11012039;
      lPostedHourLine@1100528705 : Record 11012085;
      lIntercompanyRelationRec@1100528704 : Record 11012057;
      lICEntry@1100528703 : Record 11012058;
      lPostedHourLineSourceCompany@1100528702 : Record 11012085;
    BEGIN
      HumanResourcesSetup.GET; //Necessary because function can be called from outside
      IF NOT HumanResourcesSetup."Norm Check All Companies" THEN
        EXIT(0);

      lIntercompanyRelationRec.SETFILTER("Supplying Company", '<>%1', COMPANYNAME);
      lIntercompanyRelationRec.SETRANGE("Receiving Company", COMPANYNAME);
      IF lIntercompanyRelationRec.FINDSET THEN
        REPEAT
          //Read unposted hours in all the other companies
          lHourLine.RESET;
          lHourLine := Rec;
          lHourLine.CHANGECOMPANY(lIntercompanyRelationRec."Supplying Company");
          lHourLine.SETRANGE(Year, Rec.Year);
          lHourLine.SETRANGE(Week, Rec.Week);
          lHourLine.SETRANGE("Employee No.", Rec."Employee No.");
          IF lHourLine."Supplying Company" = '' THEN
            lHourLine.SETRANGE("Supplying Company", COMPANYNAME) //Read own employee in other companies
          ELSE
            IF lIntercompanyRelationRec."Supplying Company" = lHourLine."Supplying Company" THEN
              lHourLine.SETFILTER("Supplying Company", '%1', '') //Read external employee in his own company
            ELSE
              lHourLine.SETRANGE("Supplying Company", lHourLine."Supplying Company"); //Read external employee in other companies
          IF lHourLine.FINDFIRST THEN BEGIN
            lHourLine.CALCFIELDS(
              "Normal Hours",
              "Total Monday", "Total Tuesday", "Total Wednesday",
              "Total Thursday", "Total Friday", "Total Saturday", "Total Sunday");
            CASE DayOfWeek OF
              1 : TotHours := TotHours + lHourLine."Total Monday";
              2 : TotHours := TotHours + lHourLine."Total Tuesday";
              3 : TotHours := TotHours + lHourLine."Total Wednesday";
              4 : TotHours := TotHours + lHourLine."Total Thursday";
              5 : TotHours := TotHours + lHourLine."Total Friday";
              6 : TotHours := TotHours + lHourLine."Total Saturday";
              7 : TotHours := TotHours + lHourLine."Total Sunday";
              ELSE
                TotHours := TotHours + lHourLine."Normal Hours";
            END;
          END;

          //Read posted hours in supplying company only (to prevent duplicate reads)
          lHourLine := Rec;
          IF lHourLine."Supplying Company" = lIntercompanyRelationRec."Supplying Company" THEN BEGIN
            lPostedHourLine.SETCURRENTKEY(Year,Week,"Employee No.",Overtime,"Cost Type");
            lPostedHourLine.CHANGECOMPANY(lIntercompanyRelationRec."Supplying Company");
            lPostedHourLine.SETRANGE(Year, lHourLine.Year);
            lPostedHourLine.SETRANGE(Week, lHourLine.Week);
            lPostedHourLine.SETRANGE("Employee No.", lHourLine."Employee No.");
            IF lPostedHourLine.FINDFIRST THEN BEGIN
              lPostedHourLine.CALCFIELDS(
                "Normal Hours",
                "Total Monday", "Total Tuesday", "Total Wednesday",
                "Total Thursday", "Total Friday", "Total Saturday", "Total Sunday");
              CASE DayOfWeek OF
                1 : TotHours := TotHours + lPostedHourLine."Total Monday";
                2 : TotHours := TotHours + lPostedHourLine."Total Tuesday";
                3 : TotHours := TotHours + lPostedHourLine."Total Wednesday";
                4 : TotHours := TotHours + lPostedHourLine."Total Thursday";
                5 : TotHours := TotHours + lPostedHourLine."Total Friday";
                6 : TotHours := TotHours + lPostedHourLine."Total Saturday";
                7 : TotHours := TotHours + lPostedHourLine."Total Sunday";
                ELSE
                  TotHours := TotHours + lPostedHourLine."Normal Hours";
              END;
            END;

          END;
        UNTIL lIntercompanyRelationRec.NEXT = 0;

      //Read Semi-posted Intercompany Hours
      lHourLine := Rec;
      lICEntry.SETCURRENTKEY("Post in Company","IC Hours Tag No.", "Document No.", "Employee No.");
      IF lHourLine."Supplying Company" = '' THEN
        lICEntry.SETRANGE("Post in Company", COMPANYNAME)
      ELSE
        lICEntry.SETRANGE("Post in Company", lHourLine."Supplying Company");
      lICEntry.SETFILTER("IC Hours Tag No.", '>0');
      lICEntry.SETRANGE("Employee No.", lHourLine."Employee No.");
      lICEntry.SETRANGE("Document No.", lHourLine."Document No.");
      IF lICEntry.FINDSET THEN
        REPEAT
          lPostedHourLineSourceCompany.CHANGECOMPANY(lICEntry."Receiving Company");
          lPostedHourLineSourceCompany.SETCURRENTKEY("Receiving Company", "IC Tag No.");
          lPostedHourLineSourceCompany.SETFILTER("Receiving Company", '%1', '');
          lPostedHourLineSourceCompany.SETRANGE("IC Tag No.", lICEntry."IC Hours Tag No.");
          lPostedHourLineSourceCompany.SETRANGE("Component Type", lPostedHourLineSourceCompany."Component Type"::Hours);
          lPostedHourLineSourceCompany.SETRANGE(Overtime, FALSE);
          lPostedHourLineSourceCompany.SETFILTER("Cost Type", '%1|%2',
            lPostedHourLineSourceCompany."Cost Type"::Labor, lPostedHourLineSourceCompany."Cost Type"::Sundry);
          IF lPostedHourLineSourceCompany.FINDFIRST THEN BEGIN
            CASE DayOfWeek OF
              1 : TotHours := TotHours + lPostedHourLineSourceCompany.Monday;
              2 : TotHours := TotHours + lPostedHourLineSourceCompany.Tuesday;
              3 : TotHours := TotHours + lPostedHourLineSourceCompany.Wednesday;
              4 : TotHours := TotHours + lPostedHourLineSourceCompany.Thursday;
              5 : TotHours := TotHours + lPostedHourLineSourceCompany.Friday;
              6 : TotHours := TotHours + lPostedHourLineSourceCompany.Saturday;
              7 : TotHours := TotHours + lPostedHourLineSourceCompany.Sunday
              ELSE
                TotHours := TotHours + lPostedHourLineSourceCompany."Total Line";
            END;
          END;
        UNTIL lICEntry.NEXT = 0;
    END;

    [External]
    PROCEDURE SetGiveMessage@1100485000(GiveMessageNew@1100285000 : Boolean);
    BEGIN
      // SESB.I025 KD 11.07.2013 >>
      // gvGiveMessage := TRUE;
      gvGiveMessage := GiveMessageNew;
      // SESB.I025 KD 11.07.2013 <<
    END;

    [External]
    PROCEDURE CheckSalesPrice@1100485002();
    VAR
      lProjCostPlusEntry@1100485003 : Record 11012019;
      lProjPrincipalRec@1100485002 : Record 11012005;
      lDimValRec@1100485001 : Record 349;
      lExtContrRec@1100485004 : Record 11012004;
    BEGIN
      WITH HourLineRec DO BEGIN

        IF (Type <> Type::Project) OR NOT HumanResourcesSetup."Sales Price Check" THEN
          EXIT;

        IF WageComponentRec.GET("Wage Component") THEN
          IF NOT WageComponentRec.Chargeable THEN
            EXIT;

        IF "Extension Contract" <> '' THEN BEGIN
          lExtContrRec.CHANGECOMPANY("Receiving Company");
          lExtContrRec.GET("Project No.", "Extension Contract");
          IF lExtContrRec."Settlement Method" = lExtContrRec."Settlement Method"::"Fixed Price" THEN
            EXIT;
        END ELSE
          IF ProjRec."Settlement Method" = ProjRec."Settlement Method"::"Fixed Price" THEN
            EXIT;

        //Functions in table Proj Cost Plus are used to calculate Req. Rev. Amount (= expected Sales Amount)
        CLEAR(lProjCostPlusEntry);
        lProjCostPlusEntry."Project No." := "Project No.";

        //Find the Cost Plus Principal
        lProjPrincipalRec.SETRANGE("Project No.", "Project No.");
        lProjPrincipalRec.SETRANGE("Cost Plus Customer",TRUE);
        IF lProjPrincipalRec.FINDFIRST THEN
          lProjCostPlusEntry.Principal := lProjPrincipalRec.Principal;

        lProjCostPlusEntry."Extension Contract" := "Extension Contract";
        lProjCostPlusEntry.Quantity := Quantity;
        lProjCostPlusEntry."Employee No." := "Employee No.";
        DimMgt.GetDimValueRec(2, "Cost Object", lDimValRec, FALSE, "Project No.");
        lProjCostPlusEntry."Cost Object" := "Cost Object";
        lProjCostPlusEntry."Wage Component" := "Wage Component";
        lProjCostPlusEntry.Element := Element;
        lProjCostPlusEntry."Extension Contract" := "Extension Contract";
        lProjCostPlusEntry.GetBasicPrice;
        IF lProjCostPlusEntry."Basic Price (LCY)" = 0 THEN
          FIELDERROR("Cost Object", STRSUBSTNO(Text006, "Cost Object"));

      END;
    END;

    [External]
    PROCEDURE CheckNormPostingHours@1100528701(HourAccountingLine@1100528700 : Record 11012039;CheckBeforePost@1100528703 : Boolean;ReturnErrMsg@1100528701 : Boolean;VAR ErrMsg@1100528702 : Text[1024]) : Boolean;
    BEGIN
      // Function can be called form outside the codeunit
      HumanResourcesSetup.GET;

      IF (HumanResourcesSetup."Norm Check Posting Hours" = HumanResourcesSetup."Norm Check Posting Hours"::"Per week") THEN
        EXIT(CheckNormPostingHoursPerWeek(HourAccountingLine, CheckBeforePost, ReturnErrMsg, ErrMsg));

      IF (HumanResourcesSetup."Norm Check Posting Hours" = HumanResourcesSetup."Norm Check Posting Hours"::"Per day") THEN
        EXIT(CheckNormPostingHoursPerDay(HourAccountingLine, ReturnErrMsg, ErrMsg));

      //4PSSE
      IF (HumanResourcesSetup."Norm Check Posting Hours" = HumanResourcesSetup."Norm Check Posting Hours"::"All days per Week") THEN
        EXIT(CheckNormPostingHoursAllDaysPerWeek(HourAccountingLine, ReturnErrMsg, ErrMsg));

      EXIT(TRUE);
    END;

    [External]
    PROCEDURE CheckNormPostingHoursPerWeek@1100528702(HourAccountingLine@1100528700 : Record 11012039;CheckBeforePost@1100528710 : Boolean;ReturnErrMsg@1100528708 : Boolean;VAR ErrMsg@1100528709 : Text[1024]) : Boolean;
    VAR
      Employee@1100528701 : Record 5200;
      HoursEmployeeOtherCompanies@1100528707 : Decimal;
      TotalHours@1100528702 : Decimal;
      StartDate@1100528703 : Date;
      EndDate@1100528704 : Date;
      MonthIn@1100528705 : Integer;
      MonthOut@1100528706 : Integer;
    BEGIN
      // Function can be called form outside the codeunit
      IF HourAccountingLine."Component Type" <> HourAccountingLine."Component Type"::Hours THEN
        EXIT(TRUE);
      IF HourAccountingLine."Employee No." = '' THEN
        EXIT(TRUE);

      IF HourAccountingLine."Supplying Company" <> '' THEN
        Employee.CHANGECOMPANY(HourAccountingLine."Supplying Company");
      IF HourAccountingLine."Employee No." <> '' THEN
        Employee.GET(HourAccountingLine."Employee No.");

      IF NOT (Employee."Account Hours" = Employee."Account Hours"::"Required according to Norm") THEN
        EXIT(TRUE);

      HumanResourcesSetup.GET;

      HourAccountingLine.CALCFIELDS("Normal Hours", "Posted Normal Hours");
      IF HourAccountingLine."Supplying Company" <> '' THEN
        HourAccountingLine."Posted Normal Hours" := 0;

      HoursEmployeeOtherCompanies := GetHoursOtherCompanies(HourAccountingLine);

      TotalHours := HourAccountingLine."Normal Hours" + HourAccountingLine."Posted Normal Hours" + HoursEmployeeOtherCompanies;
      TotalHours := ROUND(TotalHours, 0.01, '=');    //C007973.n

      IF CheckBeforePost THEN BEGIN
        IF (TotalHours <> 0) AND (Employee."Norm Hours" <> TotalHours) THEN BEGIN
          IF (NOT HumanResourcesSetup."Soft Norm Check") OR (Employee."Norm Hours" < TotalHours) THEN BEGIN
            IF ReturnErrMsg THEN BEGIN
              ErrMsg := STRSUBSTNO(Text000, TotalHours, Employee."Norm Hours");
              EXIT(FALSE);
            END ELSE
              HourAccountingLine.FIELDERROR(
                "Employee No.", STRSUBSTNO(Text000, TotalHours, Employee."Norm Hours"));
          END ELSE BEGIN
            StartDate := DWY2DATE(1, HourAccountingLine.Week, HourAccountingLine.Year);
            EndDate := DWY2DATE(7, HourAccountingLine.Week, HourAccountingLine.Year);
            MonthIn := DATE2DMY(StartDate, 2);
            MonthOut := DATE2DMY(EndDate, 2);
            IF MonthIn = MonthOut THEN BEGIN
              IF ReturnErrMsg THEN BEGIN
                ErrMsg := STRSUBSTNO(Text000, TotalHours, Employee."Norm Hours");
                EXIT(FALSE);
              END ELSE
                HourAccountingLine.FIELDERROR(
                  "Employee No.", STRSUBSTNO(Text000, TotalHours, Employee."Norm Hours"));
            END ELSE BEGIN
              IF gvGiveMessage THEN BEGIN
                MESSAGE(Text005);
                gvGiveMessage := FALSE;
              END;
            END;
          END;
        END;
      END ELSE BEGIN
        IF Employee."Norm Hours" <> TotalHours THEN
          IF ReturnErrMsg THEN BEGIN
            ErrMsg := STRSUBSTNO(Text000, TotalHours, Employee."Norm Hours");
            EXIT(FALSE);
          END ELSE
            HourAccountingLine.FIELDERROR(
              "Employee No.", STRSUBSTNO(Text000, TotalHours, Employee."Norm Hours"));
      END;

      EXIT(TRUE);
    END;

    [External]
    PROCEDURE CheckNormPostingHoursPerDay@1100528700(HourAccountingLine@1100528700 : Record 11012039;ReturnErrMsg@1100528709 : Boolean;VAR ErrMsg@1100528710 : Text[1024]) : Boolean;
    VAR
      Employee@1100528708 : Record 5200;
      PostedHourLine@1100528704 : Record 11012085;
      DayOfWeek@1100528701 : Integer;
      NormalHours@1100528702 : Decimal;
      PostedNormalHours@1100528703 : Decimal;
      NormHours@1100528705 : Decimal;
      TotalHours@1100528706 : Decimal;
      HoursEmployeeOtherCompanies@1100528707 : Decimal;
      Text001@1100285000 : TextConst 'ENU=Number of hours (%1) is not equal to norm hours (%2) for Employee (%3), date: (%4);NOR=Antall timer (%1) stemmer ikke i forhold til Normtid (%2) for Ansatt (%3), Dato: (%4);SVE=Antal timmar (%1) „r inte lika med normtid (%2) f”r anst„lld (%3), datum: (%4)';
      DateWeekend@1100285001 : Date;
    BEGIN
      // Function can be called form outside the codeunit
      IF HourAccountingLine."Component Type" <> HourAccountingLine."Component Type"::Hours THEN
        EXIT(TRUE);
      IF HourAccountingLine."Employee No." = '' THEN
        EXIT(TRUE);

      IF HourAccountingLine."Supplying Company" <> '' THEN
        Employee.CHANGECOMPANY(HourAccountingLine."Supplying Company");
      IF HourAccountingLine."Employee No." <> '' THEN
        Employee.GET(HourAccountingLine."Employee No.");

      IF NOT (Employee."Account Hours" = Employee."Account Hours"::"Required according to Norm") THEN
        EXIT(TRUE);

      HourAccountingLine.CALCFIELDS(
        "Total Monday", "Total Tuesday", "Total Wednesday",
        "Total Thursday", "Total Friday", "Total Saturday", "Total Sunday");

      FOR DayOfWeek := 1 TO 7 DO BEGIN
        CASE DayOfWeek OF
          1 : NormalHours := HourAccountingLine."Total Monday";
          2 : NormalHours := HourAccountingLine."Total Tuesday";
          3 : NormalHours := HourAccountingLine."Total Wednesday";
          4 : NormalHours := HourAccountingLine."Total Thursday";
          5 : NormalHours := HourAccountingLine."Total Friday";
          6 : NormalHours := HourAccountingLine."Total Saturday";
          7 : NormalHours := HourAccountingLine."Total Sunday";
        END;

        PostedNormalHours := 0;
        IF HourAccountingLine."Supplying Company" = '' THEN BEGIN
          PostedHourLine.SETRANGE(Year, HourAccountingLine.Year);
          PostedHourLine.SETRANGE(Week, HourAccountingLine.Week);
          PostedHourLine.SETRANGE("Employee No.", HourAccountingLine."Employee No.");
          IF PostedHourLine.FINDFIRST THEN BEGIN
            PostedHourLine.CALCFIELDS(
              "Total Monday", "Total Tuesday", "Total Wednesday",
              "Total Thursday", "Total Friday", "Total Saturday", "Total Sunday");
            CASE DayOfWeek OF
              1 : PostedNormalHours := PostedHourLine."Total Monday";
              2 : PostedNormalHours := PostedHourLine."Total Tuesday";
              3 : PostedNormalHours := PostedHourLine."Total Wednesday";
              4 : PostedNormalHours := PostedHourLine."Total Thursday";
              5 : PostedNormalHours := PostedHourLine."Total Friday";
              6 : PostedNormalHours := PostedHourLine."Total Saturday";
              7 : PostedNormalHours := PostedHourLine."Total Sunday";
            END;
          END;
        END;

        HoursEmployeeOtherCompanies := GetHoursOtherCompaniesPerDay(HourAccountingLine, DayOfWeek);

        TotalHours := NormalHours + PostedNormalHours + HoursEmployeeOtherCompanies;
        TotalHours := ROUND(TotalHours, 0.01, '=');    //C007973.n

        //>> I047 ITERO 130917
        //NormHours := GetNormHoursPerDay(HourAccountingLine."Employee No.", DayOfWeek,DWY2DATE(DayOfWeek, HourAccountingLine.Week, HourAccountingLine.Year),HourAccountingLine."Supplying Company");
        NormHours := GetNormHoursPerDay(HourAccountingLine."Employee No.", DayOfWeek, DWY2DATE(DayOfWeek, HourAccountingLine.Week, HourAccountingLine.Year), HourAccountingLine."Supplying Company");
        //<<

        IF (TotalHours <> 0) AND (NormHours <> TotalHours) THEN
          IF ReturnErrMsg THEN BEGIN
            ErrMsg := STRSUBSTNO(Text008,
              //NormHours, TotalHours,
              TotalHours, NormHours,
              HourAccountingLine.FIELDCAPTION("Employee No."),
              HourAccountingLine."Employee No.",
              DWY2DATE(DayOfWeek, HourAccountingLine.Week, HourAccountingLine.Year));
            EXIT(FALSE);
          END ELSE
            ERROR(Text008,
              //NormHours, TotalHours,
              TotalHours, NormHours,
              HourAccountingLine.FIELDCAPTION("Employee No."),
              HourAccountingLine."Employee No.",
              DWY2DATE(DayOfWeek, HourAccountingLine.Week, HourAccountingLine.Year))
      END;

      EXIT(TRUE);
    END;

    PROCEDURE CheckNormPostingHoursAllDaysPerWeek@1100285500(HourAccountingLine@1100528700 : Record 11012039;ReturnErrMsg@1100528709 : Boolean;VAR ErrMsg@1100528710 : Text[1024]) : Boolean;
    VAR
      Employee@1100528708 : Record 5200;
      PostedHourLine@1100528704 : Record 11012085;
      DayOfWeek@1100528701 : Integer;
      NormalHours@1100528702 : Decimal;
      PostedNormalHours@1100528703 : Decimal;
      NormHours@1100528705 : Decimal;
      TotalHours@1100528706 : Decimal;
      HoursEmployeeOtherCompanies@1100528707 : Decimal;
      Text001@1100285000 : TextConst 'ENU=Number of hours (%1) is not equal to norm hours (%2) for Employee (%3), date: (%4);NOR=Antall timer (%1) stemmer ikke i forhold til Normtid (%2) for Ansatt (%3), Dato: (%4);SVE=Antal timmar (%1) „r inte lika med normtid (%2) f”r anst„lld (%3), datum: (%4)';
      DateWeekend@1100285001 : Date;
      lvHourAccountingLine@1100285500 : Record 11012039;
      lvWageComponent@1100285100 : Record 11012014;
    BEGIN
      // Function can be called form outside the codeunit
      IF HourAccountingLine."Component Type" <> HourAccountingLine."Component Type"::Hours THEN
        EXIT(TRUE);

      IF HourAccountingLine."Supplying Company" <> '' THEN
        Employee.CHANGECOMPANY(HourAccountingLine."Supplying Company");
      IF HourAccountingLine."Employee No." <> '' THEN
        Employee.GET(HourAccountingLine."Employee No.");

      IF NOT ((Employee."Account Hours" = Employee."Account Hours"::"Required according to Norm") AND
              (NOT Employee.External))
      THEN
        EXIT(TRUE);

      HourAccountingLine.CALCFIELDS(
        "Total Monday"  , "Total Tuesday", "Total Wednesday",
        "Total Thursday", "Total Friday" , "Total Saturday" , "Total Sunday");
      //
      CLEAR(lvHourAccountingLine);
      lvHourAccountingLine.SETRANGE(Year             , HourAccountingLine.Year);
      lvHourAccountingLine.SETRANGE(Week             , HourAccountingLine.Week);
      lvHourAccountingLine.SETRANGE("Employee No."   , HourAccountingLine."Employee No.");
      lvHourAccountingLine.SETRANGE(Overtime         , FALSE);
      //>>IME424x
      //lvHourAccountingLine.SETFILTER("Component Type", '<%1', HourAccountingLine."Component Type" :: Expenses);
      //<<IME424x
      //
      FOR DayOfWeek := 1 TO 7 DO BEGIN
        NormalHours := 0;
        CASE DayOfWeek OF
          1 : BEGIN
                //NormalHours := HourAccountingLine."Total Monday";
                IF HourAccountingLine."Total Monday" <> 0 THEN
                   NormalHours := HourAccountingLine."Total Monday"
                ELSE BEGIN
                //>>IME424x
                  //IF lvHourAccountingLine.FINDFIRST THEN REPEAT
                  IF lvHourAccountingLine.FINDSET(FALSE) THEN REPEAT
                    IF lvWageComponent.GET(lvHourAccountingLine."Wage Component") THEN
                      IF lvWageComponent."Component Type" < lvWageComponent."Component Type"::Expenses THEN
                //<<IME424x
                     NormalHours := NormalHours + lvHourAccountingLine.Monday;
                  UNTIL lvHourAccountingLine.NEXT = 0;
                END;
              END;
          2 : BEGIN
                //NormalHours := HourAccountingLine."Total Tuesday";
                IF HourAccountingLine."Total Tuesday" <> 0 THEN
                   NormalHours := HourAccountingLine."Total Tuesday"
                ELSE BEGIN
                //>>IME424x
                  //IF lvHourAccountingLine.FINDFIRST THEN REPEAT
                  IF lvHourAccountingLine.FINDSET(FALSE) THEN REPEAT
                    IF lvWageComponent.GET(lvHourAccountingLine."Wage Component") THEN
                      IF lvWageComponent."Component Type" < lvWageComponent."Component Type"::Expenses THEN
                //<<IME424x
                     NormalHours := NormalHours + lvHourAccountingLine.Tuesday;
                  UNTIL lvHourAccountingLine.NEXT = 0;
                END;
              END;
          3 : BEGIN
                //NormalHours := HourAccountingLine."Total Wednesday";
                IF HourAccountingLine."Total Wednesday" <> 0 THEN
                   NormalHours := HourAccountingLine."Total Wednesday"
                ELSE BEGIN
                //>>IME424x
                  //IF lvHourAccountingLine.FINDFIRST THEN REPEAT
                  IF lvHourAccountingLine.FINDSET(FALSE) THEN REPEAT
                    IF lvWageComponent.GET(lvHourAccountingLine."Wage Component") THEN
                      IF lvWageComponent."Component Type" < lvWageComponent."Component Type"::Expenses THEN
                //<<IME424x
                     NormalHours := NormalHours + lvHourAccountingLine.Wednesday;
                  UNTIL lvHourAccountingLine.NEXT = 0;
                END;
              END;
          4 : BEGIN
                //NormalHours := HourAccountingLine."Total Thursday";
                IF HourAccountingLine."Total Thursday" <> 0 THEN
                   NormalHours := HourAccountingLine."Total Thursday"
                ELSE BEGIN
                //>>IME424x
                  //IF lvHourAccountingLine.FINDFIRST THEN REPEAT
                  IF lvHourAccountingLine.FINDSET(FALSE) THEN REPEAT
                    IF lvWageComponent.GET(lvHourAccountingLine."Wage Component") THEN
                      IF lvWageComponent."Component Type" < lvWageComponent."Component Type"::Expenses THEN
                //<<IME424x
                     NormalHours := NormalHours + lvHourAccountingLine.Thursday;
                  UNTIL lvHourAccountingLine.NEXT = 0;
                END;
              END;
          5 : BEGIN
                //NormalHours := HourAccountingLine."Total Friday";
                IF HourAccountingLine."Total Friday" <> 0 THEN
                   NormalHours := HourAccountingLine."Total Friday"
                ELSE BEGIN
                //>>IME424x
                  //IF lvHourAccountingLine.FINDFIRST THEN REPEAT
                  IF lvHourAccountingLine.FINDSET(FALSE) THEN REPEAT
                    IF lvWageComponent.GET(lvHourAccountingLine."Wage Component") THEN
                      IF lvWageComponent."Component Type" < lvWageComponent."Component Type"::Expenses THEN
                //<<IME424x
                     NormalHours := NormalHours + lvHourAccountingLine.Friday;
                  UNTIL lvHourAccountingLine.NEXT = 0;
                END;
              END;
          6 : BEGIN
                //NormalHours := HourAccountingLine."Total Saturday";
                IF HourAccountingLine."Total Saturday" <> 0 THEN
                   NormalHours := HourAccountingLine."Total Saturday"
                ELSE BEGIN
                //>>IME424x
                  //IF lvHourAccountingLine.FINDFIRST THEN REPEAT
                  IF lvHourAccountingLine.FINDSET(FALSE) THEN REPEAT
                    IF lvWageComponent.GET(lvHourAccountingLine."Wage Component") THEN
                      IF lvWageComponent."Component Type" < lvWageComponent."Component Type"::Expenses THEN
                //<<IME424x
                     NormalHours := NormalHours + lvHourAccountingLine.Saturday;
                  UNTIL lvHourAccountingLine.NEXT = 0;
                END;
              END;
          7 : BEGIN
                //NormalHours := HourAccountingLine."Total Sunday";
                IF HourAccountingLine."Total Sunday" <> 0 THEN
                   NormalHours := HourAccountingLine."Total Sunday"
                ELSE BEGIN
                //>>IME424x
                  //IF lvHourAccountingLine.FINDFIRST THEN REPEAT
                  IF lvHourAccountingLine.FINDSET(FALSE) THEN REPEAT
                    IF lvWageComponent.GET(lvHourAccountingLine."Wage Component") THEN
                      IF lvWageComponent."Component Type" < lvWageComponent."Component Type"::Expenses THEN
                //<<IME424x
                     NormalHours := NormalHours + lvHourAccountingLine.Sunday;
                  UNTIL lvHourAccountingLine.NEXT = 0;
                END;
              END;
        END;//Case

        PostedNormalHours := 0;
        IF HourAccountingLine."Supplying Company" = '' THEN BEGIN
          PostedHourLine.SETRANGE(Year, HourAccountingLine.Year);
          PostedHourLine.SETRANGE(Week, HourAccountingLine.Week);
          PostedHourLine.SETRANGE("Employee No.", HourAccountingLine."Employee No.");
          IF PostedHourLine.FINDFIRST THEN BEGIN
            PostedHourLine.CALCFIELDS(
              "Total Monday", "Total Tuesday", "Total Wednesday",
              "Total Thursday", "Total Friday", "Total Saturday", "Total Sunday");
            CASE DayOfWeek OF
              1 : PostedNormalHours := PostedHourLine."Total Monday";
              2 : PostedNormalHours := PostedHourLine."Total Tuesday";
              3 : PostedNormalHours := PostedHourLine."Total Wednesday";
              4 : PostedNormalHours := PostedHourLine."Total Thursday";
              5 : PostedNormalHours := PostedHourLine."Total Friday";
              6 : PostedNormalHours := PostedHourLine."Total Saturday";
              7 : PostedNormalHours := PostedHourLine."Total Sunday";
            END;
          END;
        END;

        HoursEmployeeOtherCompanies := GetHoursOtherCompaniesPerDay(HourAccountingLine, DayOfWeek);

        TotalHours := NormalHours + PostedNormalHours + HoursEmployeeOtherCompanies;

        //>> I047 ITERO 130917
        //NormHours := GetNormHoursPerDay(HourAccountingLine."Employee No.", DayOfWeek,DWY2DATE(DayOfWeek, HourAccountingLine.Week, HourAccountingLine.Year),HourAccountingLine."Supplying Company");
        NormHours := GetNormHoursPerDay(HourAccountingLine."Employee No.", DayOfWeek, DWY2DATE(DayOfWeek, HourAccountingLine.Week, HourAccountingLine.Year), HourAccountingLine."Supplying Company");
        //<<

        //IF (TotalHours <> 0) AND (NormHours <> TotalHours) THEN
        IF (NormHours <> TotalHours) THEN
          IF ReturnErrMsg THEN BEGIN
            ErrMsg := STRSUBSTNO(Text008,
              //NormHours, TotalHours,
              TotalHours, NormHours,
              HourAccountingLine.FIELDCAPTION("Employee No."),
              HourAccountingLine."Employee No.",
              DWY2DATE(DayOfWeek, HourAccountingLine.Week, HourAccountingLine.Year));
            EXIT(FALSE);
          END ELSE
            ERROR(Text008,
              //NormHours, TotalHours,
              TotalHours, NormHours,
              HourAccountingLine.FIELDCAPTION("Employee No."),
              HourAccountingLine."Employee No.",
              DWY2DATE(DayOfWeek, HourAccountingLine.Week, HourAccountingLine.Year))
      END;

      EXIT(TRUE);
    END;

    [External]
    PROCEDURE GetNormHoursPerDay@1100528717(EmployeeNo@1100528700 : Code[20];DayOfWeek@1100528701 : Integer;EffectiveDate@1100528702 : Date;Company@1100528703 : Text[50]) : Decimal;
    VAR
      EmployeeTimeTable@1100528704 : Record 11012923;
      HourAccountingLine@1100285000 : Record 11012039;
    BEGIN
      //>> I047 ITERO 130917 Changed calculation of normhours IMSE47

      //IF Company <> '' THEN
        //EmployeeTimeTable.CHANGECOMPANY(Company);
      //EmployeeTimeTable.SETRANGE("Employee No.", EmployeeNo);
      //EmployeeTimeTable.SETFILTER("Effective Date", '..%1', EffectiveDate);
      //IF EmployeeTimeTable.FINDLAST THEN BEGIN
        //CASE DayOfWeek OF
          //1 : EXIT(EmployeeTimeTable.Monday);
          //2 : EXIT(EmployeeTimeTable.Tuesday);
          //3 : EXIT(EmployeeTimeTable.Wednesday);
          //4 : EXIT(EmployeeTimeTable.Thursday);
          //5 : EXIT(EmployeeTimeTable.Friday);
          //6 : EXIT(EmployeeTimeTable.Saturday);
          //7 : EXIT(EmployeeTimeTable.Sunday);
        //END;
      //END;

      HourAccountingLine.SETRANGE(Year,DATE2DWY(EffectiveDate,3));
      HourAccountingLine.SETRANGE(Week,DATE2DWY(EffectiveDate,2));
      HourAccountingLine.SETRANGE("Employee No.",EmployeeNo);
      IF HourAccountingLine.FINDSET THEN BEGIN
        CASE DayOfWeek OF
          1: EXIT(HourAccountingLine.GetNormHourMon);
          2: EXIT(HourAccountingLine.GetNormHourTue);
          3: EXIT(HourAccountingLine.GetNormHourWed);
          4: EXIT(HourAccountingLine.GetNormHourThu);
          5: EXIT(HourAccountingLine.GetNormHourFri);
          6: EXIT(HourAccountingLine.GetNormHourSat);
          7: EXIT(HourAccountingLine.GetNormHourSun);

        END;
      END;

      //<<
    END;

    [External]
    PROCEDURE CheckCostPriceDirectHours@1100527000(VAR HourAccountingLine@1100527000 : Record 11012039);
    VAR
      HumanResourcesSetup@1100527001 : Record 5218;
    BEGIN
      HumanResourcesSetup.GET;

      WITH HourAccountingLine DO BEGIN
        IF HumanResourcesSetup."Cost Price Check" AND ("Component Type" = "Component Type"::Hours) AND
          ("Unit Cost (LCY)" = 0) AND (Type <> Type::Indirect)
        THEN BEGIN
          HourAccountingLine.CalcRateAndAmount;
          IF "Unit Cost (LCY)" = 0 THEN
            IF "Cost Type" = "Cost Type"::Plant THEN
              FIELDERROR("Cost Object", STRSUBSTNO(Text007, "Cost Object"))
            ELSE
              FIELDERROR("Employee No.", STRSUBSTNO(Text007, "Employee No."));
        END;
      END;
    END;

    BEGIN
    {
      4PS01 JD, 8 aug 2007, Call 5990, "Posting Element Mandatory" also on project card.
      4PS02 JD, 12-10-07, Call 10390, External Rental Rate replace by separate table.

      SESB.I025 Automatic posting of hours
         KD 11.07.2013 Trigger SetGiveMessage changed - parameter GiveMessageNew added

      I047 ITERO 130917 Changed calculation of normhours IMSE47. Function: GetNormHoursPerDay

      140313  ITERO.GH IME106 Added function CheckNormPostingHoursAllDaysPerWeek
      160225 ITERO.DL IME424x repace 'findfirst then repeat' (causes locking) with 'findset(false) then repeat'
      160905 ITERO.DL RFC141 Booking of time report in closed period, clarify Text003
    }
    END.
  }
}

