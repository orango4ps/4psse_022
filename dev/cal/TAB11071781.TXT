OBJECT Table 11071781 Object Specification Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               CentralDataManagement.EditObjectSpecificationLine(Rec, 1, xRec);
               IF BORG AND NOT DontCheckBORGUser THEN
                 BORGManagement.TestBORGUser;
             END;

    OnModify=BEGIN
               CentralDataManagement.EditObjectSpecificationLine(Rec, 2, xRec);
               IF BORG AND (xRec."Specification Code" <> '') THEN
                 BORGManagement.TestBORGUser;
             END;

    OnDelete=BEGIN
               CentralDataManagement.EditObjectSpecificationLine(Rec, 4, xRec);
               IF BORG THEN
                 BORGManagement.TestBORGUser;
             END;

    CaptionML=[ENU=Object Specification Line;
               NOR=Objektspesifikasjonsrad;
               SVE=Objektspecifikationsrad];
    LookupPageID=Page11126085;
    DrillDownPageID=Page11126085;
  }
  FIELDS
  {
    { 10  ;   ;Specification Type  ;Option        ;CaptionML=[ENU=Specification Type;
                                                              NOR=Spesifikasjonstype;
                                                              SVE=Specifikationstyp];
                                                   OptionCaptionML=[ENU=Standard Object,Object,Object Line;
                                                                    NOR=Standardobjekt,Objekt,Objektrad];
                                                   OptionString=Standard Object,Object,Object Line;
                                                   Editable=No }
    { 20  ;   ;Code                ;Code20        ;TableRelation=IF (Specification Type=CONST(Standard Object)) "Standard Object"
                                                                 ELSE IF (Specification Type=CONST(Object)) Service-Object;
                                                   OnValidate=VAR
                                                                MainRec@1100528600 : Record 11071781;
                                                              BEGIN
                                                                IF Code <> xRec.Code THEN BEGIN
                                                                  MainRec := xRec;
                                                                  IF MainRec.FIND THEN
                                                                    CentralDataManagement.EditObjectSpecificationLine(Rec, 3, xRec);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Code;
                                                              NOR=Kode;
                                                              SVE=Kod];
                                                   Editable=No }
    { 25  ;   ;Object Line No.     ;Integer       ;CaptionML=[ENU=Object Line No.;
                                                              NOR=Objektradnr.];
                                                   Editable=No }
    { 30  ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              NOR=Linjenr.;
                                                              SVE=Radnummer];
                                                   Editable=No }
    { 40  ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                IF (xRec.Type <> Type) AND (Type = Type::Group) THEN BEGIN
                                                                  "Field Type" := "Field Type"::" ";
                                                                  "Unit Of Measure" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              NOR=Radtype;
                                                              SVE=Typ];
                                                   OptionCaptionML=[ENU=Group,Line;
                                                                    NOR=Gruppe,Rad;
                                                                    SVE=Grupp,Rad];
                                                   OptionString=Group,Line }
    { 50  ;   ;Specification Code  ;Code10        ;TableRelation=IF (Type=CONST(Group)) "Object Specification Group"
                                                                 ELSE IF (Type=CONST(Line),
                                                                          Specification Type=CONST(Standard Object)) "Base Object Specification Line"
                                                                          ELSE IF (Type=CONST(Line),
                                                                                   Specification Type=CONST(Object)) "Base Object Specification Line" WHERE (Level=CONST(Object));
                                                   OnValidate=VAR
                                                                ObjectSpecificationGroup@1100528601 : Record 11071778;
                                                                BaseObjectSpecificationLine@1100528600 : Record 11071779;
                                                              BEGIN
                                                                CASE Type OF
                                                                  Type::Group:
                                                                    BEGIN
                                                                      ObjectSpecificationGroup.GET("Specification Code");
                                                                      VALIDATE(Description, ObjectSpecificationGroup.Description);
                                                                    END;
                                                                  Type::Line:
                                                                    BEGIN
                                                                      BaseObjectSpecificationLine.GET("Specification Code");
                                                                      VALIDATE(Description, BaseObjectSpecificationLine.Description);
                                                                      VALIDATE("Field Type", BaseObjectSpecificationLine."Field Type");
                                                                      VALIDATE("Unit Of Measure", BaseObjectSpecificationLine."Unit Of Measure");
                                                                      VALIDATE("Object Level", BaseObjectSpecificationLine.Level = BaseObjectSpecificationLine.Level::Object);
                                                                      BORG := BaseObjectSpecificationLine.BORG;
                                                                      IF BORG AND (CurrFieldNo = FIELDNO("Specification Code")) THEN
                                                                        BORGManagement.TestBORGUser;
                                                                      Value := '';
                                                                    END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Specification Code;
                                                              NOR=Spesifikasjonskode;
                                                              SVE=Specifikationskod] }
    { 60  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 70  ;   ;Field Type          ;Option        ;OnValidate=BEGIN
                                                                IF "Field Type" = "Field Type"::" " THEN
                                                                  TESTFIELD(Type, Type::Group);
                                                              END;

                                                   CaptionML=[ENU=Field Type;
                                                              NOR=Felttype;
                                                              SVE=Field Type];
                                                   OptionCaptionML=[ENU="Date,Value,Text,Option, ";
                                                                    NOR="Dato,Verdi,Tekst,Alternativ, ";
                                                                    SVE="Datum,V„rde,Text,Alternativ, "];
                                                   OptionString=[Date,Value,Text,Option, ];
                                                   Editable=No }
    { 80  ;   ;Unit Of Measure     ;Code10        ;TableRelation="Unit of Measure";
                                                   CaptionML=[ENU=Unit Of Measure;
                                                              NOR=Enhet;
                                                              SVE=Enhet];
                                                   Editable=No }
    { 90  ;   ;Value               ;Text80        ;OnValidate=BEGIN
                                                                IF "Specification Type" <> "Specification Type"::Object THEN
                                                                  IF Value <> '' THEN
                                                                    TESTFIELD("Object Level", FALSE);
                                                                EvaluateValue;
                                                                IF BORG THEN
                                                                  Value := BORGManagement.EncodeValue(Value);
                                                                ApplySMAgreements;
                                                              END;

                                                   OnLookup=BEGIN
                                                              HandleLookupValue;
                                                            END;

                                                   CaptionML=[ENU=Value;
                                                              NOR=Verdi;
                                                              SVE=V„rde] }
    { 100 ;   ;Visible for Field Service;Boolean  ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Base Object Specification Line"."Visible for Field Service" WHERE (Code=FIELD(Specification Code)));
                                                   CaptionML=[ENU=Visible for Field Service;
                                                              NOR=Synlig for feltservice;
                                                              SVE=Visas f”r f„ltservice];
                                                   Editable=No }
    { 110 ;   ;Editable by Field Service;Boolean  ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Base Object Specification Line"."Editable by Field Service" WHERE (Code=FIELD(Specification Code)));
                                                   CaptionML=[ENU=Editable by Field Service;
                                                              NOR=Redigerbar gjennom feltservice;
                                                              SVE=Redigerbar genom f„ltservice];
                                                   Editable=No }
    { 120 ;   ;Object Level        ;Boolean       ;OnValidate=VAR
                                                                BaseObjectSpecificationLine@1210190000 : Record 11071779;
                                                              BEGIN
                                                                IF (xRec."Object Level" <> "Object Level") AND "Object Level" THEN BEGIN
                                                                  TESTFIELD(Value, '');
                                                                  IF BaseObjectSpecificationLine.GET("Specification Code") THEN
                                                                    IF BaseObjectSpecificationLine.Level = BaseObjectSpecificationLine.Level::"Standard Object" THEN
                                                                      BaseObjectSpecificationLine.FIELDERROR(Level, Text003);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Object Level;
                                                              NOR=Objektniv†;
                                                              SVE=Objektniv†] }
    { 130 ;   ;Value (Date)        ;Date          ;OnValidate=BEGIN
                                                                IF NOT BORG THEN
                                                                  Value := FORMAT("Value (Date)");
                                                              END;

                                                   CaptionML=[ENU=Value (Date);
                                                              NOR=Verdi (Dato);
                                                              SVE=Valuteringsdag] }
    { 140 ;   ;Value (Value)       ;Decimal       ;OnValidate=BEGIN
                                                                IF NOT BORG THEN
                                                                  Value := FORMAT("Value (Value)", 0, 1);
                                                              END;

                                                   CaptionML=[ENU=Value (Value);
                                                              NOR=Verdi (Verdi);
                                                              SVE=V„rde (v„rde)];
                                                   BlankZero=Yes }
    { 150 ;   ;BORG                ;Boolean       ;OnValidate=VAR
                                                                BORGManagement@1100528600 : Codeunit 11012859;
                                                                DecodedValue@1100528601 : Text[80];
                                                                Decoded@1100528602 : Boolean;
                                                              BEGIN
                                                                IF xRec.BORG <> BORG THEN BEGIN
                                                                  BORGManagement.TestBORGUser;
                                                                  IF BORG THEN
                                                                    Value := BORGManagement.EncodeValue(Value)
                                                                  ELSE BEGIN
                                                                    DecodedValue := BORGManagement.DecodeValue(Value, TRUE, Decoded);
                                                                    IF NOT Decoded THEN
                                                                      ERROR(Text004);
                                                                    VALIDATE(Value, DecodedValue);
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=BORG;
                                                              NOR=BORG] }
    { 160 ;   ;Publish on Service Portal;Boolean  ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Base Object Specification Line"."Publish on Service Portal" WHERE (Code=FIELD(Specification Code)));
                                                   CaptionML=[ENU=Publish on Portal;
                                                              NOR=Publiser p† Serviceportal;
                                                              SVE=Publicera p† serviceportalen];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Specification Type,Code,Object Line No.,Line No.;
                                                   Clustered=Yes }
    {    ;Code,Specification Type                  }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1100528601 : TextConst 'ENU=Option Value %1 not found;NOR=Alternativverdi %1 ikke funnet;SVE=Alternativv„rde %1 hittades inte';
      Text002@1100528600 : TextConst 'ENU=t;NOR=t;SVE=t';
      Text003@1210190000 : TextConst 'ENU=is not Object;NOR=er ikke Objekt';
      CentralDataManagement@1100528602 : Codeunit 11012010;
      BORGManagement@1100528603 : Codeunit 11012859;
      Text004@1100528604 : TextConst 'ENU=Vaue not decoded;NOR=Verdi er ikke dekodet';
      DontCheckBORGUser@1100409000 : Boolean;
      Text005@1100528605 : TextConst 'ENU=First select records;NOR=Marker poster f›rst;SVE=Markera f”rst poster';
      Text006@1100528606 : TextConst 'ENU=Selected Lines do not contain Object Level Specifications';
      Text007@1100528607 : TextConst 'ENU=%1 Objects updated';

    PROCEDURE GetObjSpecificationGroupCode@1100528601() : Code[10];
    VAR
      ObjectSpecificationLine@1100528600 : Record 11071781;
      BaseObjectSpecificationLine@1100528900 : Record 11071779;
    BEGIN
      ObjectSpecificationLine.SETRANGE("Specification Type", "Specification Type");
      ObjectSpecificationLine.SETRANGE(Code, Code);
      ObjectSpecificationLine.SETFILTER("Line No.", '<%1', "Line No.");
      ObjectSpecificationLine.SETRANGE(Type, Type::Group);
      ObjectSpecificationLine.SETRANGE("Object Line No.", "Object Line No.");
      IF ObjectSpecificationLine.FINDLAST THEN
        EXIT(ObjectSpecificationLine."Specification Code");

      //DP00118.sn
      IF BaseObjectSpecificationLine.GET("Specification Code") THEN
        EXIT(BaseObjectSpecificationLine."Specification Group Code");
      //DP00118.en
    END;

    PROCEDURE EvaluateValue@1100528603();
    VAR
      DummyDate@1100528600 : Date;
      DummyDecimal@1100528601 : Decimal;
    BEGIN
      "Value (Date)" := 0D;
      "Value (Value)" := 0;
      IF Value = '' THEN EXIT;
      CASE "Field Type" OF
        "Field Type"::Date:
          BEGIN
            IF LOWERCASE(Value) = Text002 THEN BEGIN
              Value := FORMAT(TODAY);
              IF NOT BORG THEN
                "Value (Date)" := TODAY;
            END ELSE BEGIN
              EVALUATE(DummyDate, Value);
              Value := FORMAT(DummyDate);
              IF NOT BORG THEN
                "Value (Date)" := DummyDate;
            END;
          END;
        "Field Type"::Value:
          BEGIN
            EVALUATE(DummyDecimal, Value);
            Value := FORMAT(DummyDecimal, 0, 1);
            IF NOT BORG THEN
              "Value (Value)" := DummyDecimal;
          END;
        "Field Type"::Text:;
        "Field Type"::Option:
          Value := CheckOptionValue;
      END;
    END;

    PROCEDURE CheckOptionValue@1100528604() : Text[80];
    VAR
      BaseObjectSpecificationOpt@1100528600 : Record 11071780;
    BEGIN
      BaseObjectSpecificationOpt.SETRANGE("Base Object Spec. Line Code", "Specification Code");
      BaseObjectSpecificationOpt.SETRANGE(Description, Value);
      IF BaseObjectSpecificationOpt.FINDFIRST THEN
        EXIT(BaseObjectSpecificationOpt.Description);
      BaseObjectSpecificationOpt.SETFILTER(Description, '@' + Value + '*');
      IF BaseObjectSpecificationOpt.COUNT = 1 THEN BEGIN
        BaseObjectSpecificationOpt.FINDFIRST;
        EXIT(BaseObjectSpecificationOpt.Description);
      END;
      ERROR(Text001, Value);
    END;

    PROCEDURE HandleLookupSpecificationCode@1100528600(Edit@1100528600 : Boolean);
    VAR
      ObjectSpecificationGroup@1100528601 : Record 11071778;
      BaseObjectSpecificationLine@1100528602 : Record 11071779;
    BEGIN
      CASE Type OF
        Type::Group:
          BEGIN
            IF PAGE.RUNMODAL(0, ObjectSpecificationGroup) = ACTION::LookupOK THEN
              IF Edit THEN
                VALIDATE("Specification Code", ObjectSpecificationGroup.Code);
          END;
        Type::Line:
          BEGIN
            BaseObjectSpecificationLine.SETFILTER("Specification Group Code", '%1|%2', '', GetObjSpecificationGroupCode);
            IF PAGE.RUNMODAL(0, BaseObjectSpecificationLine) = ACTION::LookupOK THEN
              IF Edit THEN BEGIN
                VALIDATE("Specification Code", BaseObjectSpecificationLine.Code);
                VALIDATE("Object Level", BaseObjectSpecificationLine.Level = BaseObjectSpecificationLine.Level::Object);
              END;
          END;
      END;
    END;

    PROCEDURE GetValue@1100528602(VAR ODecoded@1100528601 : Boolean) : Text[80];
    BEGIN
      ODecoded := TRUE;
      IF NOT BORG THEN BEGIN
        CASE "Field Type" OF
          "Field Type"::Date:
            EXIT(FORMAT("Value (Date)"));
          "Field Type"::Value:
            IF "Value (Value)" <> 0 THEN
              EXIT(FORMAT("Value (Value)", 0, 1))
            ELSE
              EXIT('');
        ELSE
          EXIT(Value);
        END;
      END;
      EXIT(BORGManagement.DecodeValue(Value, FALSE, ODecoded));
    END;

    PROCEDURE HandleLookupValue@1100528605();
    VAR
      BaseObjectSpecificationOpt@1100528600 : Record 11071780;
      BORGUserManagement@1100528601 : Codeunit 11012861;
    BEGIN
      IF BORG THEN
        IF BORGUserManagement.IsBorgEmplTimedOut THEN
          EXIT;
      IF "Field Type" = "Field Type"::Option THEN BEGIN
        BaseObjectSpecificationOpt.SETRANGE("Base Object Spec. Line Code", "Specification Code");
        IF PAGE.RUNMODAL(0, BaseObjectSpecificationOpt) = ACTION::LookupOK THEN
          VALIDATE(Value, BaseObjectSpecificationOpt.Description);
      END;
    END;

    PROCEDURE SetDontCheckBORGUser@1100409001(IDontCheckBORGUser@1100409000 : Boolean);
    BEGIN
      DontCheckBORGUser := IDontCheckBORGUser;
    END;

    PROCEDURE ApplySMAgreements@1100528606();
    VAR
      ServiceSetup@1100528603 : Record 11012800;
      ServiceContract@1100528602 : Record 11012812;
      ContractObject@1100528601 : Record 11071702;
      MaintenanceManagement@1100528600 : Codeunit 11012829;
    BEGIN
      IF "Specification Type" <> "Specification Type"::Object THEN
        EXIT;
      ServiceSetup.GET;
      IF (ServiceSetup."Spec. Code Year of Manufact." <> '') AND
         ("Specification Code" = ServiceSetup."Spec. Code Year of Manufact.")
      THEN BEGIN
        IF MODIFY(TRUE) THEN; // Needed for HandleSMAgreement();
        MaintenanceManagement.GetActualContractDSForObject(Code, TODAY, ServiceContract);
        IF ServiceContract.FINDSET THEN
          REPEAT
            IF ContractObject.GET(ServiceContract."No.", Code) THEN BEGIN
              ContractObject.HandleSMAgreement(TRUE, TRUE);
              ContractObject.MODIFY(TRUE);
            END;
          UNTIL ServiceContract.NEXT = 0;
      END;
    END;

    PROCEDURE AddToServiceObjects@1100528607(VAR IObjectSpecificationLine@1100528600 : Record 11071781);
    VAR
      ServiceObject@1100528602 : Record 11071691;
      ObjectSpecificationLine@1100528603 : Record 11071781;
      DummyObjectSpecificationLine@1100528601 : Record 11071781;
      ObjectSpecificationMgt@1100528604 : Codeunit 11012848;
      NoOfServiceObject@1100528605 : Integer;
    BEGIN
      ObjectSpecificationLine.COPY(IObjectSpecificationLine);
      IF NOT ObjectSpecificationLine.FINDSET THEN
        ERROR(Text005);
      ObjectSpecificationLine.TESTFIELD("Specification Type", ObjectSpecificationLine."Specification Type"::"Standard Object");
      ObjectSpecificationLine.SETRANGE("Object Level", TRUE);
      ObjectSpecificationLine.SETRANGE(Type, ObjectSpecificationLine.Type::Line);
      IF ObjectSpecificationLine.ISEMPTY THEN
        ERROR(Text006);
      ServiceObject.SETCURRENTKEY("Standard Object No.");
      ServiceObject.SETRANGE("Standard Object No.", ObjectSpecificationLine.Code);
      IF ServiceObject.FINDSET THEN
        REPEAT
          IF ObjectSpecificationLine.FINDSET THEN
            REPEAT
              ObjectSpecificationMgt.FindOrCreateObjectSpecGroup(ServiceObject."No.",
                ObjectSpecificationLine.GetObjSpecificationGroupCode, DummyObjectSpecificationLine);
              ObjectSpecificationMgt.FindOrCreateObjectSpec(
                ServiceObject."No.", ObjectSpecificationLine."Specification Code", DummyObjectSpecificationLine);
            UNTIL ObjectSpecificationLine.NEXT = 0;
          NoOfServiceObject += 1;
        UNTIL ServiceObject.NEXT = 0;
      IF GUIALLOWED THEN
        MESSAGE(Text007, NoOfServiceObject);
    END;

    PROCEDURE AddToServiceObjectsFromMaterialInventory@1100527550(VAR IObjectSpecificationLine@1100527550 : Record 11071781);
    VAR
      ObjectMaterialInventory@1100527551 : Record 11071712;
      ObjectSpecificationMgt@1100527552 : Codeunit 11012848;
      ServiceObject@1100527553 : Record 11071691;
      ObjectSpecificationLine@1100527554 : Record 11071781;
      ObjectMaterialInventory2@1100527555 : Record 11071712;
      DummyObjectSpecificationLine@1100527556 : Record 11071781;
      NoOfServiceObject@1100527557 : Integer;
    BEGIN
      IF NOT IObjectSpecificationLine.FINDSET THEN
        ERROR(Text005);
      ObjectMaterialInventory.SETRANGE(Code, IObjectSpecificationLine.Code);
      ObjectMaterialInventory.SETRANGE("Line No.", IObjectSpecificationLine."Object Line No.");
      ObjectMaterialInventory.SETRANGE(Type, ObjectMaterialInventory.Type::"Standard Object");
      IF NOT ObjectMaterialInventory.FINDFIRST THEN
        EXIT;
      ServiceObject.SETCURRENTKEY("Standard Object No.");
      ServiceObject.SETRANGE("Standard Object No.", IObjectSpecificationLine.Code);
      IF ServiceObject.FINDSET THEN
        REPEAT
          ObjectSpecificationLine.COPY(IObjectSpecificationLine);
          ObjectMaterialInventory2.SETRANGE(Code, ServiceObject."No.");
          ObjectMaterialInventory2.SETRANGE("Line No.", ObjectMaterialInventory."Line No.");
          ObjectMaterialInventory2.SETRANGE("Item No.", ObjectMaterialInventory."Item No.");
          ObjectMaterialInventory2.SETRANGE(Manufacturer, ObjectMaterialInventory.Manufacturer);
          ObjectMaterialInventory2.SETRANGE("Basic Item", ObjectMaterialInventory."Basic Item");
          ObjectMaterialInventory2.SETRANGE("Vendor (Trade Item)", ObjectMaterialInventory."Vendor (Trade Item)");
          ObjectMaterialInventory2.SETRANGE("Trade Item", ObjectMaterialInventory."Trade Item");
          IF NOT ObjectMaterialInventory2.ISEMPTY THEN
            REPEAT
              ObjectSpecificationMgt.FindOrCreateObjectSpecGroupForMaterialInv(ServiceObject."No.", ObjectSpecificationLine.GetObjSpecificationGroupCode, DummyObjectSpecificationLine, ObjectMaterialInventory."Line No.");
              ObjectSpecificationMgt.FindOrCreateObjectSpecForMaterialInv(ServiceObject."No.", ObjectSpecificationLine."Specification Code", DummyObjectSpecificationLine, ObjectMaterialInventory."Line No.");
            UNTIL ObjectSpecificationLine.NEXT = 0;
          NoOfServiceObject += 1;
        UNTIL ServiceObject.NEXT = 0;
      IF GUIALLOWED THEN
        MESSAGE(Text007, NoOfServiceObject);
    END;

    BEGIN
    END.
  }
}

