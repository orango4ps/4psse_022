OBJECT Codeunit 11012306 Webshop Item Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    Permissions=TableData 11012315=rim,
                TableData 11012317=rim;
    OnRun=VAR
            TotalNoOfRec@1100528600 : Integer;
            NoOfItemsToReplace@1100528601 : Integer;
          BEGIN
            UpdateTradeItemInfoFrom2ba(
              '', FALSE, TotalNoOfRec, NoOfItemsToReplace);
          END;

  }
  CODE
  {
    VAR
      Text000@1100525000 : TextConst 'ENU=The 2ba Link is not (correct) enabled.;NOR=2. lenken er ikke (korrekt) aktivert.;SVE=2da l„nken „r inte (korrekt) aktiverad.';
      Text001@1100528301 : TextConst 'ENU=Vendor %1 is not used for %2s.;NOR=Leverand›r %1 brukes ikke for %2.;SVE=Leverant”r %1 anv„nds inte f”r %2.';
      Text002@1100528302 : TextConst 'ENU=Can not process Item basket (Table %1 is not implemented).;NOR=Kan ikke behandle artikkelkurv (tabell %1 er ikke iverksatt).;SVE=Kan inte behandla artikelkorg (tabell %1 har inte implementerats).';
      Text003@1100528304 : TextConst 'ENU=@1@@@@@@@@@@@@@@@@@@@@@@@@@@;SVE=@1@@@@@@@@@@@@@@@@@@@@@@@@@@';
      Text004@1100528305 : TextConst 'ENU=Records Read         #2#####\;SVE=L„sta poster         #2#####\';
      Text005@1100528310 : TextConst 'ENU=Records Processed #3#####\\;SVE=Behandlade poster  #3#####\\';
      Window@1100528308 : Dialog;
      Text006@1100529102 : TextConst 'ENU=The Webselect Link is not (correct) enabled.';
      ClientWebShop@1100528601 : DotNet "'Fps.WebshopBasketConnector, Version=1.0.0.2, Culture=neutral, PublicKeyToken=024bd013665211e9'.Fps.WebshopBasketConnector.WebShop" RUNONCLIENT;
      ClientBasketItem@1100528600 : DotNet "'Fps.WebshopBasketConnector, Version=1.0.0.2, Culture=neutral, PublicKeyToken=024bd013665211e9'.Fps.WebshopBasketConnector.BasketItem" RUNONCLIENT;
      Text007@1100528602 : TextConst 'ENU=There is no license for the 2BA Unifeed Interface';
      ClientBasketItemArrayList@1100528400 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.ArrayList" RUNONCLIENT;
      ServerWebShop@1100528803 : DotNet "'Fps.WebshopBasketConnector, Version=1.0.0.2, Culture=neutral, PublicKeyToken=024bd013665211e9'.Fps.WebshopBasketConnector.WebShop";
      ServerBasketItem@1100528802 : DotNet "'Fps.WebshopBasketConnector, Version=1.0.0.2, Culture=neutral, PublicKeyToken=024bd013665211e9'.Fps.WebshopBasketConnector.BasketItem";
      ServerBasketItemArrayList@1100528401 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.ArrayList";
      WebShopType@1100528402 : 'Tu,2ba';
      ClientAvailable@1100528403 : Boolean;
      ClientAvailableHasBeenFilled@1100528404 : Boolean;
      Text008@1100528405 : TextConst 'ENU=Webshop 2ba';
      Text009@1100528406 : TextConst 'ENU=Update Trade Items via 2ba Web Service';
      Text010@1100528407 : TextConst 'ENU=Webshop TU';
      Text011@1100528408 : TextConst 'ENU=Update Trade Items via 2ba Web Service with Vendor Filter %1';
      MarkedTradeItem@1100528900 : TEMPORARY Record 11012317;

    LOCAL PROCEDURE InitializeFor2ba@1100528300();
    BEGIN
      Test2BALicence;

      ClearWebShop;
      ClearBasketItem;

      InitWebshopFor2ba;

      IF Is2BAEnabled(TRUE) THEN
        SetOAuthClientCredentials2ba;
    END;

    LOCAL PROCEDURE InitializeForTu@1100529100(VendorNo@1100529101 : Code[20];ShipToLocation@1100529102 : Code[20];ShortCutDimension1Code@1100529103 : Code[20];ProjectCode@1100529104 : Code[20];ETIMVendorNo@1100529105 : Code[20]);
    VAR
      UserNameForVendor@1100529106 : Text[30];
      ICMCustomer@1100529107 : Text[30];
      PasswordForVendor@1100529108 : Text[30];
    BEGIN
      ClearWebShop;
      ClearBasketItem;

      ICMCustomer := GetICMCustData(
        VendorNo, ETIMVendorNo, ShipToLocation, ShortCutDimension1Code,
        ProjectCode, UserNameForVendor, PasswordForVendor);

      IF (ICMCustomer <> '') AND (UserNameForVendor <> '') AND (PasswordForVendor <> '') THEN BEGIN
        InitWebshopForTu(UserNameForVendor, PasswordForVendor, ICMCustomer);
      END ELSE
        ERROR(Text006);
    END;

    PROCEDURE Is2BAEnabled@1100525002(ShowError@1100528300 : Boolean) : Boolean;
    VAR
      "2BASetup"@1100525000 : Record 11012742;
    BEGIN
      IF "2BASetup".GET AND
         ("2BASetup"."User Name" <> '') AND
         ("2BASetup".Password <> '')
      THEN
        EXIT(TRUE);

      IF ShowError THEN
        ERROR(Text000);
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE GetUserName2ba@1100528306() : Text[30];
    VAR
      "2BASetup"@1100529100 : Record 11012742;
    BEGIN
      "2BASetup".GET;
      EXIT("2BASetup"."User Name");
    END;

    LOCAL PROCEDURE GetUserNameTu@1100529101(ETIMVendorNo@1100529101 : Code[20]) : Text[30];
    VAR
      ETIMVendor@1100529100 : Record 11012313;
    BEGIN
      IF ETIMVendor.GET(ETIMVendorNo) THEN
        EXIT(ETIMVendor."User Name");
    END;

    LOCAL PROCEDURE GetPassword2ba@1100528305() : Text[30];
    VAR
      "2BASetup"@1100525000 : Record 11012742;
    BEGIN
      "2BASetup".GET;
      EXIT("2BASetup".Password);
    END;

    LOCAL PROCEDURE GetPasswordTu@1100529102(ETIMVendorNo@1100529101 : Code[20]) : Text[30];
    VAR
      ETIMVendor@1100529100 : Record 11012313;
    BEGIN
      IF ETIMVendor.GET(ETIMVendorNo) THEN
        EXIT(ETIMVendor.Password);
    END;

    LOCAL PROCEDURE GetMainVendorCode@1100528303(AlternativeVendorCode@1100528300 : Code[20]) : Code[20];
    VAR
      ETIMVendorCentralMgt@1100528302 : Record 11012304;
      ETIMVendorLocalMgt@1100528303 : Record 11012313;
      VendorCode@1100409000 : Code[20];
    BEGIN
      VendorCode := AlternativeVendorCode;
      ETIMVendorCentralMgt.SETCURRENTKEY("Alternative Vendor Code");
      ETIMVendorCentralMgt.SETRANGE("Alternative Vendor Code", AlternativeVendorCode);
      IF ETIMVendorCentralMgt.FINDFIRST THEN
        VendorCode := ETIMVendorCentralMgt.Code;
      ETIMVendorCentralMgt.RESET;

      IF ETIMVendorLocalMgt.GET(AlternativeVendorCode) THEN BEGIN
        IF ETIMVendorLocalMgt."Display Trade Items"  THEN
          EXIT(VendorCode);
        EXIT('');
      END;

      ETIMVendorCentralMgt.GET(AlternativeVendorCode);
      IF NOT ETIMVendorCentralMgt."Display Trade Items" THEN
        EXIT('');
      EXIT(VendorCode);
    END;

    LOCAL PROCEDURE GetAndCheckAlternatVendorCode@1100528302(MainVendorCode@1100528300 : Code[20]) : Code[20];
    VAR
      ETIMVendorCentralMgt@1100528302 : Record 11012304;
      ETIMVendorLocalMgt@1100528303 : Record 11012313;
    BEGIN
      IF ETIMVendorCentralMgt.GET(MainVendorCode) THEN
        IF ETIMVendorCentralMgt."Alternative Vendor Code" <> '' THEN
          MainVendorCode := ETIMVendorCentralMgt."Alternative Vendor Code";
      ETIMVendorCentralMgt.RESET;

      IF ETIMVendorLocalMgt.GET(MainVendorCode) THEN BEGIN
        IF ETIMVendorLocalMgt."Display Trade Items" AND (ETIMVendorLocalMgt."Vendor (Purchase)" <> '') THEN
          EXIT(MainVendorCode);
        EXIT('');
      END;

      ETIMVendorCentralMgt.GET(MainVendorCode);
      IF NOT ETIMVendorCentralMgt."Display Trade Items" OR (ETIMVendorCentralMgt."Vendor (Purchase)" = '') THEN
        EXIT('');
      EXIT(MainVendorCode);
    END;

    PROCEDURE ShowTradeItemInformationVia2ba@1100528601(IVendorNo@1100528600 : Code[15];ITradeItemNo@1100528601 : Code[20]);
    VAR
      TradeItem@1100528602 : Record 11012317;
    BEGIN
      TradeItem.GET(IVendorNo, ITradeItemNo);
      TradeItem.TESTFIELD("Maintained by 2ba");
      TradeItem.TESTFIELD("Trade Item Guid (2ba)");
      InitializeFor2ba;
      ShowTradeItemInfoFrom2baObject(TradeItem);
      RemoveSelectionList(WebShopType::"2ba");
    END;

    PROCEDURE RunModalDialogForOneItem@1100528301(VAR VendorTradeItem@1100528300 : Code[20];VAR TradeItem@1100528301 : Code[20]);
    BEGIN
      UpdateTradeItemDataForOneItem(VendorTradeItem, TradeItem, TRUE);
    END;

    PROCEDURE UpdateTradeItemDataForOneItem@1100528700(VAR VendorTradeItem@1100528701 : Code[20];VAR TradeItem@1100528700 : Code[20];RunModalDialog@1100528707 : Boolean);
    VAR
      TradeItemRec@1100528706 : Record 11012317;
      TmpTradeItemRec@1100528705 : TEMPORARY Record 11012317;
      ItemImportLog@1100528704 : Record 11012335;
      StartDateTime@1100528703 : DateTime;
      VendorCode@1100528702 : Code[20];
    BEGIN
      InitializeFor2ba;

      IF RunModalDialog THEN BEGIN
        SetFiltersFor2baUnifeed(VendorTradeItem, TradeItem);
        ShowWebshop(WebShopType::"2ba");
      END ELSE BEGIN
        VendorCode := GetMainVendorCode(VendorTradeItem);
        AddItemToPriceList2baByVendorGLNAndTradeItemNo(VendorCode, TradeItem);
        FetchPriceList2ba;
      END;
      RemoveSelectionList(WebShopType::"2ba");

      SetBasketItem(0);

      IF GetTradeItemNoOfBasketItem <> '' THEN BEGIN
        VendorCode := GetVendorGlnOfBasketItem;
        IF VendorCode <> '' THEN BEGIN
          VendorTradeItem := GetAndCheckAlternatVendorCode(VendorCode);
          IF VendorTradeItem = '' THEN
            ERROR(Text001, VendorCode, TradeItemRec.TABLECAPTION);
        END;

        TradeItem :=  GetTradeItemNoOfBasketItem;
        StartDateTime := CURRENTDATETIME;
        ProcessTradeItem(TmpTradeItemRec, VendorTradeItem, TradeItem, WebShopType::"2ba");
        ItemImportLog.UpdateLogbook(
          Text008, 1, 1, ItemImportLog."Source Type"::Item, StartDateTime);
      END;
    END;

    PROCEDURE RunModalDialogForMultipleItems@1100528309(IVendorTradeItem@1100528300 : Code[20];ITradeItemNo@1100528301 : Code[20];IRecRef@1100528309 : RecordRef);
    VAR
      TmpTradeItem@1100528306 : TEMPORARY Record 11012317;
      EtimVendorHasUserName@1100529100 : Boolean;
      EtimVendorNo@1100529105 : Code[20];
      ShipToLocation@1100529101 : Code[20];
      ShortCutDimension1Code@1100529102 : Code[20];
      ProjectNo@1100529103 : Code[20];
      VendorNo@1100529104 : Code[20];
    BEGIN
      GetInitialParams(IRecRef, EtimVendorHasUserName, EtimVendorNo, VendorNo, ShipToLocation, ProjectNo, ShortCutDimension1Code);

      IF EtimVendorHasUserName THEN
        RunModalDialogForMultipleItemsTu(
          EtimVendorNo, VendorNo, ShipToLocation, ProjectNo, ShortCutDimension1Code, IVendorTradeItem,
          ITradeItemNo, TmpTradeItem)
      ELSE
        IF Is2BAEnabled(FALSE) THEN
          RunModalDialogForMultipleItems2ba(IVendorTradeItem, ITradeItemNo, TmpTradeItem);

      SELECTLATESTVERSION;

      IF NOT TmpTradeItem.ISEMPTY THEN
        HandleChoosenTradeItems(TmpTradeItem, IRecRef);
    END;

    LOCAL PROCEDURE RunModalDialogForMultipleItemsTu@1100528414(ETIMVendorNo@1100528400 : Code[20];VendorNo@1100528405 : Code[20];ShipToLocation@1100528404 : Code[20];ProjectNo@1100528402 : Code[20];ShortcutDimension1Code@1100528403 : Code[20];VendorTradeItem@1100528300 : Code[20];TradeItemNo@1100528301 : Code[20];VAR TmpTradeItem@1100528401 : TEMPORARY Record 11012317);
    VAR
      ItemImportLog@1100528407 : Record 11012335;
      StartDateTime@1100528406 : DateTime;
      ItemCount@1100528304 : Integer;
      Counter@1100528305 : Integer;
    BEGIN
      //Because now we only support 1 vendor (the TU), if the user name is filled, it is the TU
      InitializeForTu(VendorNo, ShipToLocation, ShortcutDimension1Code, ProjectNo, ETIMVendorNo);
      ShowWebshop(WebShopType::Tu);
      ItemCount := GetNumberOfBasketItems;
      StartDateTime:= CURRENTDATETIME;
      FOR Counter := 0 TO ItemCount - 1 DO BEGIN
        SetBasketItem(Counter);
        IF (GetTradeItemNoOfBasketItem <> '') THEN BEGIN
          TradeItemNo := GetTradeItemNoOfBasketItem;
          IF NOT TmpTradeItem.GET(VendorTradeItem, TradeItemNo) THEN
            ProcessTradeItem(TmpTradeItem, VendorTradeItem, TradeItemNo, WebShopType::Tu);
        END;
      END;
      IF ItemCount > 0 THEN
        ItemImportLog.UpdateLogbook(
          Text010, ItemCount, ItemCount, ItemImportLog."Source Type"::Item, StartDateTime);
    END;

    LOCAL PROCEDURE RunModalDialogForMultipleItems2ba@1100528416(VendorTradeItem@1100528300 : Code[20];TradeItemNo@1100528301 : Code[20];VAR TmpTradeItem@1100528401 : TEMPORARY Record 11012317);
    VAR
      TradeItem@1100528303 : Record 11012317;
      ItemImportLog@1100528400 : Record 11012335;
      StartDateTime@1100528402 : DateTime;
      ItemCount@1100528304 : Integer;
      Counter@1100528305 : Integer;
      VendorGLN@1100529104 : Code[20];
    BEGIN
      InitializeFor2ba;
      SetFiltersFor2baUnifeed(VendorTradeItem, TradeItemNo);
      ShowWebshop(WebShopType::"2ba");
      RemoveSelectionList(WebShopType::"2ba");
      ItemCount := GetNumberOfBasketItems;
      StartDateTime:= CURRENTDATETIME;
      FOR Counter := 0 TO ItemCount - 1 DO BEGIN
        SetBasketItem(Counter);
        IF GetTradeItemNoOfBasketItem <> '' THEN BEGIN
          TradeItemNo := GetTradeItemNoOfBasketItem;
          VendorGLN := GetVendorGlnOfBasketItem;
          IF VendorGLN <> '' THEN BEGIN
            VendorTradeItem := GetAndCheckAlternatVendorCode(VendorGLN);
            IF VendorTradeItem = '' THEN
              MESSAGE(Text001, VendorGLN, TradeItem.TABLECAPTION)
            ELSE
              ProcessTradeItem(TmpTradeItem, VendorTradeItem, TradeItemNo, WebShopType::"2ba");
          END;
        END;
      END;
      IF ItemCount > 0 THEN
        ItemImportLog.UpdateLogbook(
          Text008, ItemCount, ItemCount, ItemImportLog."Source Type"::Item, StartDateTime);
    END;

    LOCAL PROCEDURE SetFiltersFor2baUnifeed@1100529414(VendorTradeItem@1100529401 : Code[20];TradeItemCode@1100529400 : Code[20]);
    VAR
      TradeItem@1100529402 : Record 11012317;
      VendorCode@1100529403 : Code[20];
    BEGIN
      IF VendorTradeItem <> '' THEN BEGIN
        VendorCode := GetMainVendorCode(VendorTradeItem);
        IF (VendorCode = '') THEN
          ERROR(Text001, VendorTradeItem, TradeItem.TABLECAPTION);
      END;
      IF TradeItemCode <> '' THEN BEGIN
          IF (TradeItem.GET(VendorTradeItem, TradeItemCode)) THEN BEGIN
            IF TradeItem."GTIN Code (Item)" <> '' THEN
              SetSearchDescription(TradeItem."GTIN Code (Item)")
            ELSE
              SetSearchDescription(TradeItem."Item Code");
          END ELSE
            SetSearchDescription(TradeItemCode);
      END;
    END;

    LOCAL PROCEDURE ProcessTradeItem@1100526204(VAR TmpTradeItem@1100528302 : TEMPORARY Record 11012317;VendorCode@1100526201 : Code[20];ItemCode@1100528300 : Code[20];WebShopType2@1100528400 : Integer);
    VAR
      TradeItem@1100528303 : Record 11012317;
      DatetimeMgt@1100409001 : Codeunit 11020218;
      ItemDataUpdated@1100528404 : Boolean;
      PriceHistoryUpdated@1100528403 : Boolean;
      ItemToReplaceAdded@1100528402 : Boolean;
    BEGIN
      UpdateTradeItemDataAndPriceHistory(
        TradeItem, VendorCode, ItemCode, WebShopType2,
        ItemDataUpdated, PriceHistoryUpdated, ItemToReplaceAdded);

      TmpTradeItem.COPY(TradeItem);
      TmpTradeItem."Import Date-Time" := DatetimeMgt.Datetime(TODAY, TIME);
      TmpTradeItem."Quantity Per Price" := GetItemQuantityOfBasketItem;
      TmpTradeItem.INSERT;
      TmpTradeItem.MARK(TRUE);
      //C060176.sn
      MarkedTradeItem := TmpTradeItem;
      MarkedTradeItem.INSERT;
      MarkedTradeItem.MARK(TRUE);
      //C060176.en
    END;

    PROCEDURE UpdateTradeItemDataAndPriceHistory@1100528413(VAR TradeItem@1100528403 : Record 11012317;VendorCode@1100528402 : Code[20];ItemCode@1100528401 : Code[20];WebShopType2@1100528400 : Integer;VAR ItemDataUpdated@1100528405 : Boolean;VAR PriceHistoryUpdated@1100528406 : Boolean;VAR ItemToReplaceAdded@1100528407 : Boolean);
    VAR
      TradeItemBeforeImport@1100528409 : Record 11012317;
      ItemToReplace@1100528404 : Record 11012322;
      ImportTradeItem@1100528408 : Record 11012333;
      TradeItem2@1100528412 : Record 11012317;
      ImportItemData@1100528410 : Codeunit 11012300;
      MessageTradeItemExists@1100528411 : Boolean;
    BEGIN
      // Property Local has been set to No to make it possible to write test code for this function.
      IF TradeItemBeforeImport.GET(VendorCode, ItemCode) THEN;
      UpdateTradeItem(TradeItem, VendorCode, ItemCode, WebShopType2);
      ItemDataUpdated := (FORMAT(TradeItem) <> FORMAT(TradeItemBeforeImport));
      IF (TradeItem."Item Code (Successor)" <> '') AND
         TradeItem2.GET(VendorCode, TradeItem."Item Code (Successor)")
      THEN
        ItemToReplaceAdded := ItemToReplace.ReplaceTradeItem(TradeItem, FALSE)
      ELSE
        ItemToReplaceAdded := FALSE;

      SELECTLATESTVERSION;

      CreateImportTradeItem(TradeItem, ImportTradeItem);
      ImportItemData.DoChecksOnTradeItem(ImportTradeItem, TradeItemBeforeImport, MessageTradeItemExists);

      PriceHistoryUpdated := UpdatePriceHistory(TradeItem);

      IF NOT (ItemDataUpdated OR PriceHistoryUpdated OR ItemToReplaceAdded OR MessageTradeItemExists) THEN
        ImportTradeItem.DELETE;
    END;

    LOCAL PROCEDURE UpdateTradeItem@1100528402(VAR TradeItem@1100528302 : Record 11012317;VendorCode@1100526201 : Code[20];ItemCode@1100528300 : Code[20];WebShopType2@1100528400 : Integer);
    VAR
      ItemSetup@1100528600 : Record 11012300;
      CostObject@1100409000 : Code[20];
      ItemDescription@1100528301 : Text[250];
      GrossPrice@1100528500 : Decimal;
      NetPrice@1100528501 : Decimal;
    BEGIN
      ItemSetup.GET;
      IF NOT TradeItem.GET(VendorCode, ItemCode) THEN BEGIN
        TradeItem.INIT;
        TradeItem.Vendor := VendorCode;
        TradeItem."Item Code" := ItemCode;
        TradeItem.INSERT;
      END;

      CASE WebShopType2 OF
        WebShopType::"2ba":
          BEGIN
            TradeItem.Manufacturer := GetManufacturerOfBasketItem;
            TradeItem."Product Code" := GetProductCodeOfBasketItem;
            IF EVALUATE(TradeItem."Delivery Period", GetDeliveryPeriodOfBasketItem) THEN;
            TradeItem."Delivery Time ID" := GetDeliveryTimeIDOfBasketItem;
            TradeItem."Discount Group Code" := GetDiscountGroupCodeOfBasketItem;
            TradeItem."Factor Price-Purchase Unit" := GetFactorPricePurchaseUnitOfBasketItem;
            TradeItem."Starting Date Price" := CalculateDate(GetStartingDatePriceOfBasketItem, TODAY);
            TradeItem."Maintained by 2ba" := TRUE;
            TradeItem."Trade Item Guid (2ba)" := GetTradeItemGuidOfBasketItem;
            TradeItem."Product ID Guid (2ba)" := GetProductIDGuidOfBasketItem;
            TradeItem."Status Code" := GetStatusCodeOfBasketItem;
            IF TradeItem."Status Code" = '130' THEN
              TradeItem.Expired := TRUE;
            TradeItem."CBS Code" := GetCBSCodeOfBasketItem;
          END;
        WebShopType::Tu:
          BEGIN
            TradeItem."Discount Group Code" := GetDiscountGroupCodeOfBasketItem;
            TradeItem."Factor Price-Purchase Unit" := GetQtyPerUnitOfMeasureOfBasketItem;
          END;
      END;

      TradeItem."GTIN Code (Item)" := GetGtinOfBasketItem;
      ItemDescription := COPYSTR(GetItemDescriptionOfBasketItem, 1, MAXSTRLEN(ItemDescription));
      TradeItem."Item Description" := COPYSTR(ItemDescription, 1, MAXSTRLEN(TradeItem."Item Description"));
      IF (STRLEN(ItemDescription) > MAXSTRLEN(TradeItem."Item Description")) THEN
        TradeItem."Item Description 2" :=
          COPYSTR(ItemDescription, MAXSTRLEN(TradeItem."Item Description") + 1, MAXSTRLEN(TradeItem."Item Description 2"));
      CASE ItemSetup."Adjust Item Description" OF
        ItemSetup."Adjust Item Description"::ToUpper:
          BEGIN
            TradeItem."Item Description" := UPPERCASE(TradeItem."Item Description");
            TradeItem."Item Description 2" := UPPERCASE(TradeItem."Item Description 2");
          END;
        ItemSetup."Adjust Item Description"::ToLower:
          BEGIN
            TradeItem."Item Description" := LOWERCASE(TradeItem."Item Description");
            TradeItem."Item Description 2" := LOWERCASE(TradeItem."Item Description 2");
          END;
      END;
      IF TradeItem."Search Argument" = '' THEN
        TradeItem."Search Argument" := COPYSTR(TradeItem."Item Description", 1, MAXSTRLEN(TradeItem."Search Argument"));
      TradeItem."Application Unit Quantity" := GetApplicationUnitQuantityOfBasketItem;
      TradeItem."Application ID" := GetApplicationIDOfBasketItem;
      TradeItem."Packaging Code" := GetPackagingCodeOfBasketItem;
      TradeItem."Order ID" := GetOrderIDOfBasketItem;
      TradeItem."Minimum Order Quantity" := GetMinimumOrderQuantityOfBasketItem;
      TradeItem."Lot Size Quantity" := GetLotSizeQuantityOfBasketItem;

      IF TradeItem."Starting Date Price" = 0D THEN
        TradeItem."Starting Date Price" := TODAY;
      //C038538.sn
      NetPrice := GetNetPriceOfBasketItem;
      GrossPrice := GetGrossPriceOfBasketItem;
      TradeItem."Gross Price" := GrossPrice;
      ConvertNetPriceToGrossPrice(TradeItem, GrossPrice, NetPrice);
      //C038538.en
      TradeItem."Quantity Per Price" := GetQuantityPerPriceOfBasketItem;
      TradeItem."Price ID" := GetPriceIDOfBasketItem;

      IF (TradeItem."Cost Object" = '') OR (NOT TradeItem."Cost Object changed Manually") THEN BEGIN
        CostObject := TradeItem.GetDefaultCostObject(FALSE);
        IF CostObject <> '' THEN
          TradeItem."Cost Object" := CostObject;
      END;
      CostObject := TradeItem.GetDefaultCostObject(TRUE);
      IF CostObject <> '' THEN
        TradeItem."Cost Object (Removal)" := CostObject;
      TradeItem.GetUnitData();
      TradeItem.GetRefDateHistPrice();
      IF TradeItem."Starting Date Price" > TradeItem."Price Reference Date" THEN
        TradeItem."Price Reference Date" := TradeItem."Starting Date Price";
      TradeItem."GTIN Code (Successor)" := GetSuccessorGTINOfBasketItem;
      TradeItem."Item Code (Successor)" := GetSuccessorTradeItemCodeOfBasketItem;
      TradeItem."Import Date-Time" := 0;

      TradeItem.MODIFY;
    END;

    LOCAL PROCEDURE CreateImportTradeItem@1100528409(TradeItem@1100528400 : Record 11012317;VAR ImportTradeItem@1100528401 : Record 11012333);
    VAR
      ImportTradeItem2@1100528403 : Record 11012333;
      LastLineNo@1100528402 : Integer;
    BEGIN
      IF ImportTradeItem2.FINDLAST THEN
        LastLineNo := ImportTradeItem2."Line No.";

      CLEAR(ImportTradeItem);
      ImportTradeItem.TRANSFERFIELDS(TradeItem);
      ImportTradeItem."Line No." := LastLineNo + 1;
      ImportTradeItem."Import Type" := ImportTradeItem."Import Type"::"Web Service";
      ImportTradeItem."Exclude from update" := TRUE;
      ImportTradeItem.INSERT;
    END;

    PROCEDURE UpdatePriceHistory@1100485011(ITradeItem@1100409000 : Record 11012317) : Boolean;
    VAR
      PriceHistoryTradeItem@1100409001 : Record 11012315;
    BEGIN
      PriceHistoryTradeItem.SETRANGE(Vendor, ITradeItem.Vendor);
      PriceHistoryTradeItem.SETRANGE("Item Code", ITradeItem."Item Code");
      PriceHistoryTradeItem.SETRANGE("Starting Date", 0D, ITradeItem."Starting Date Price");
      IF PriceHistoryTradeItem.FINDLAST THEN BEGIN
        IF (PriceHistoryTradeItem."Quantity Per Price" = ITradeItem."Quantity Per Price") AND
           (PriceHistoryTradeItem."Price ID" = ITradeItem."Price ID") AND
           (PriceHistoryTradeItem.Expired = ITradeItem.Expired) AND
           (PriceHistoryTradeItem."Gross Price" = ITradeItem."Gross Price")
        THEN
          EXIT(FALSE);
      END;
      IF NOT PriceHistoryTradeItem.GET(ITradeItem.Vendor, ITradeItem."Item Code", ITradeItem."Starting Date Price") THEN BEGIN
        PriceHistoryTradeItem.INIT;
        PriceHistoryTradeItem.Vendor := ITradeItem.Vendor;
        PriceHistoryTradeItem."Item Code" := ITradeItem."Item Code";
        PriceHistoryTradeItem."Starting Date" := ITradeItem."Starting Date Price";
        PriceHistoryTradeItem.INSERT;
      END;

      PriceHistoryTradeItem."Gross Price" := ITradeItem."Gross Price";
      PriceHistoryTradeItem."Quantity Per Price" := ITradeItem."Quantity Per Price";
      PriceHistoryTradeItem."Price ID" := ITradeItem."Price ID";
      PriceHistoryTradeItem.Expired := ITradeItem.Expired;
      PriceHistoryTradeItem.MODIFY;
      EXIT(TRUE);
    END;

    PROCEDURE UpdateTradeItemInfoFrom2ba@1100525000(VendorFilter@1100528400 : Text;DeleteExistingImportData@1100528401 : Boolean;VAR OTotalNoOfRec@1100528600 : Integer;VAR ONoOfItemsToReplace@1100528604 : Integer) : Integer;
    VAR
      TradeItem@1100525001 : Record 11012317;
      ItemImportLog@1100528402 : Record 11012335;
      ImportTradeItem@1100528404 : Record 11012333;
      StartDateTime@1100528403 : DateTime;
      LogDescription@1100528405 : Text;
      Counter@1100528302 : Integer;
      TotalTradeItemCount@1100528300 : Integer;
      NoOfUpdatedItems@1100528602 : Integer;
    BEGIN
      TradeItem.SETRANGE("Maintained by 2ba", TRUE);
      TradeItem.SETFILTER("Trade Item Guid (2ba)", '<>%1', ''); //mg, 03-06-2015: C023785
      IF VendorFilter <> '' THEN
        TradeItem.SETFILTER(Vendor, VendorFilter);
      IF NOT TradeItem.FINDSET THEN
        EXIT;

      InitializeFor2ba;
      OTotalNoOfRec := TradeItem.COUNT;

      IF GUIALLOWED THEN
        Window.OPEN(Text004 + Text005 + Text003);

      IF DeleteExistingImportData THEN BEGIN
        ImportTradeItem.SETRANGE("Import Type", ImportTradeItem."Import Type"::"Web Service");
        IF VendorFilter <> '' THEN
          ImportTradeItem.SETFILTER(Vendor, VendorFilter);
        ImportTradeItem.DELETEALL(TRUE);
      END;

      StartDateTime := CURRENTDATETIME;
      REPEAT
        Counter += 1;
        IF GUIALLOWED THEN BEGIN
          Window.UPDATE(1, ROUND(Counter / OTotalNoOfRec * 10000, 1));
          Window.UPDATE(2, Counter);
        END;

        AddItemToPriceList2baByTradeItemGuid(TradeItem."Trade Item Guid (2ba)");
        IF Counter MOD 100 = 0 THEN BEGIN
          SetOAuthClientCredentials2ba;
          FetchPriceList2ba;
          UpdateTradeItemsFrom2ba(
            TotalTradeItemCount, NoOfUpdatedItems, ONoOfItemsToReplace);
          COMMIT;
        END;
      UNTIL TradeItem.NEXT = 0;

      IF Counter MOD 100 <> 0 THEN BEGIN
        FetchPriceList2ba;
        UpdateTradeItemsFrom2ba(
          TotalTradeItemCount, NoOfUpdatedItems, ONoOfItemsToReplace);
      END;

      RemoveSelectionList(WebShopType::"2ba");
      IF VendorFilter <> '' THEN
        LogDescription := COPYSTR(STRSUBSTNO(Text011, VendorFilter), 1, MAXSTRLEN(ItemImportLog.Description))
      ELSE
        LogDescription := Text009;
      ItemImportLog.UpdateLogbook(
        LogDescription, TotalTradeItemCount, TotalTradeItemCount, ItemImportLog."Source Type"::Item, StartDateTime);
      IF GUIALLOWED THEN
        Window.CLOSE;

      EXIT(NoOfUpdatedItems);
    END;

    LOCAL PROCEDURE UpdateTradeItemsFrom2ba@1100525003(VAR TotalTradeItemCount@1100528600 : Integer;VAR ONoOfUpdatedItems@1100528301 : Integer;VAR ONoOfItemsToReplace@1100528604 : Integer);
    VAR
      ETIMVendorCentralMgt@1100525003 : Record 11012304;
      TradeItem@1100528602 : Record 11012317;
      Counter@1100525002 : Integer;
      TradeItemCount@1100528300 : Integer;
      VendorCode@1100528603 : Code[20];
      ItemCode@1100529400 : Code[20];
      PriceHistoryUpdated@1100528400 : Boolean;
      ItemDataUpdated@1100528401 : Boolean;
      ItemToReplaceAdded@1100528403 : Boolean;
    BEGIN
      TradeItemCount := GetNumberOfBasketItems;
      IF TradeItemCount <= 0 THEN
        EXIT;

      FOR Counter := 0 TO TradeItemCount - 1 DO BEGIN
        IF GUIALLOWED THEN
          Window.UPDATE(3, TotalTradeItemCount + Counter + 1);
        SetBasketItem(Counter);
        IF GetVendorGlnOfBasketItem <> '' THEN
          VendorCode := ETIMVendorCentralMgt.GetVendorFromGLN(GetVendorGlnOfBasketItem)
        ELSE
          VendorCode := '';
        ItemCode := GetTradeItemNoOfBasketItem;
        IF (VendorCode <> '') AND TradeItem.GET(VendorCode, ItemCode) THEN BEGIN
          UpdateTradeItemDataAndPriceHistory(
            TradeItem, VendorCode, ItemCode, WebShopType::"2ba",
            ItemDataUpdated, PriceHistoryUpdated, ItemToReplaceAdded);
          IF ItemDataUpdated OR PriceHistoryUpdated THEN
            ONoOfUpdatedItems += 1;
          IF ItemToReplaceAdded THEN
            ONoOfItemsToReplace += 1;
        END;
      END;
      TotalTradeItemCount += TradeItemCount;
    END;

    LOCAL PROCEDURE CalculateDate@1100525005(DateText@1100525000 : Text[30];DefaultDate@1100525004 : Date) : Date;
    VAR
      YearNo@1100525001 : Integer;
      MonthNo@1100525002 : Integer;
      DayNo@1100525003 : Integer;
    BEGIN
      IF (DateText <> '') AND
         (EVALUATE(YearNo, COPYSTR(DateText, 1, 4))) AND
         (EVALUATE(MonthNo, COPYSTR(DateText, 5, 2))) AND
         (EVALUATE(DayNo, COPYSTR(DateText, 7, 2)))
      THEN
        EXIT(DMY2DATE(DayNo, MonthNo, YearNo));

      EXIT(DefaultDate);
    END;

    LOCAL PROCEDURE GetICMCustData@1210190000(VendorNo@1100409000 : Code[20];ETIMVendorNo@1100528400 : Code[20];ShipToLocation@1100409001 : Code[20];ShortcutDimension1Code@1100529102 : Code[20];ProjectCode@1100529103 : Code[20];VAR UserName@1100528401 : Text[30];VAR Password@1100528402 : Text[30]) @1210190001 : Code[20];
    VAR
      lvICMCustomerRec@1100485000 : Record 11012129;
      ICMCustCodeFoundOnProjectLevel@1100528700 : Boolean;
      CustCode@1100529100 : Code[20];
      Vendor@1100529101 : Record 23;
      ICMCustCodeFoundOnDimensiLevel@1100529104 : Boolean;
    BEGIN
      lvICMCustomerRec.RESET;
      lvICMCustomerRec.SETRANGE(Vendor, VendorNo);
      lvICMCustomerRec.SETFILTER(Project, '%1', '');
      lvICMCustomerRec.SETFILTER("Global Dimension 1 Code", '%1', '');
      lvICMCustomerRec.SETFILTER("ICM Customer No.", '<>%1', '');
      IF lvICMCustomerRec.FIND('-') THEN
        CustCode := lvICMCustomerRec."ICM Customer No.";

      ICMCustCodeFoundOnProjectLevel := FALSE;
      IF ProjectCode <> '' THEN BEGIN
        lvICMCustomerRec.SETRANGE(Project, ProjectCode);
        IF (ShipToLocation <> '') THEN BEGIN
          lvICMCustomerRec.SETRANGE("Project Location", ShipToLocation);
          IF lvICMCustomerRec.FIND('-') THEN BEGIN
            CustCode := lvICMCustomerRec."ICM Customer No.";
            ICMCustCodeFoundOnProjectLevel := TRUE;
          END ELSE BEGIN
            lvICMCustomerRec.SETFILTER("Project Location", '%1', '');
            IF lvICMCustomerRec.FIND('-') THEN BEGIN
              CustCode := lvICMCustomerRec."ICM Customer No.";
              ICMCustCodeFoundOnProjectLevel := TRUE;
            END;
          END;
        END ELSE BEGIN
          lvICMCustomerRec.SETFILTER("Project Location", '%1', '');
          IF lvICMCustomerRec.FIND('-') THEN BEGIN
            CustCode := lvICMCustomerRec."ICM Customer No.";
            ICMCustCodeFoundOnProjectLevel := TRUE;
          END;
        END;
      END;

      ICMCustCodeFoundOnDimensiLevel := FALSE;
      IF (NOT ICMCustCodeFoundOnProjectLevel) AND (ShortcutDimension1Code <> '') THEN BEGIN
        lvICMCustomerRec.RESET;
        lvICMCustomerRec.SETRANGE(Vendor, VendorNo);
        lvICMCustomerRec.SETFILTER(Project, '%1', '');
        lvICMCustomerRec.SETFILTER("Global Dimension 1 Code", ShortcutDimension1Code);
        lvICMCustomerRec.SETFILTER("ICM Customer No.", '<>%1', '');
        IF lvICMCustomerRec.FINDFIRST THEN BEGIN
          CustCode := lvICMCustomerRec."ICM Customer No.";
          ICMCustCodeFoundOnDimensiLevel := TRUE;
        END;
      END;

      IF ICMCustCodeFoundOnProjectLevel OR ICMCustCodeFoundOnDimensiLevel THEN BEGIN
        UserName := lvICMCustomerRec."User Name";
        Password := lvICMCustomerRec.Password;
      END;
      IF (UserName = '') OR (Password = '') THEN BEGIN
        IF Vendor.GET(VendorNo) THEN
          CustCode := Vendor."ICM Customer No.";
        UserName := GetUserNameTu(ETIMVendorNo);
        Password := GetPasswordTu(ETIMVendorNo);
      END;

      CustCode := PADSTR(CustCode,10,' ');
      EXIT(CustCode);
    END;

    LOCAL PROCEDURE CheckLinksAreEnabled@1100525004(TULinkIsEnabled@1100525000 : Boolean) : Boolean;
    BEGIN
      EXIT(Is2BAEnabled(FALSE) OR TULinkIsEnabled);
    END;

    LOCAL PROCEDURE GetNavisionVendorForEtimVendor@1100525006(ETIMVendorNo@1100525001 : Code[20]) : Code[20];
    VAR
      ETIMVendor@1100525000 : Record 11012313;
    BEGIN
      //db, 11-03-14
      IF ETIMVendor.GET(ETIMVendorNo) THEN
        EXIT(ETIMVendor."Vendor (Purchase)");
    END;

    LOCAL PROCEDURE GetInitialParams@1100528602(IRecRef@1100528600 : RecordRef;VAR OEtimVendorHasUserName@1100528601 : Boolean;VAR OEtimVendorNo@1100528602 : Code[20];VAR OVendorNo@1100528603 : Code[20];VAR OShipToLocation@1100528604 : Code[20];VAR OProjectCode@1100528606 : Code[20];VAR OShortCutDimension1Code@1100528607 : Code[20]);
    VAR
      AdviceOrderLine@1100528605 : Record 11012055;
      ProjectCostPlusEntry@1100528608 : Record 11012019;
      ServiceOrderCostPlusEntry@1100528609 : Record 11012825;
      ServiceOrder@1100528610 : Record 11012823;
      Estimate@1100528612 : Record 11012151;
      EstimateLine@1100528613 : Record 11072072;
      PurchaseLine@1100528614 : Record 39;
      PurchaseHeader@1100528615 : Record 38;
      BudgetLine@1100528616 : Record 11012001;
      ServiceOrderBudgetLine@1100528617 : Record 11012875;
      EstRcpLine@1100525001 : Record 11072075;
      BaseRcpLine@1100525000 : Record 11020582;
      MaintSchemeVersionLine@1100528618 : Record 11071744;
      ServSurvObjectAddAct@1100528619 : Record 11071814;
      ServiceSurvey@1100528620 : Record 11071803;
      SalesLine@1100528200 : Record 37;
      SalesHeader@1100528201 : Record 36;
      RequisitionLine@1100528202 : Record 246;
      ProjectMaterialReqLine@1100528400 : Record 11012526;
      ItemtoReplace@1100528900 : Record 11012322;
    BEGIN
      CASE IRecRef.NUMBER OF
        DATABASE::"Advice Order Line":
          BEGIN
            IRecRef.SETTABLE(AdviceOrderLine);
            OEtimVendorHasUserName := GetUserNameTu(AdviceOrderLine."Vendor (Trade Item)") <> '';
            OEtimVendorNo := AdviceOrderLine."Vendor (Trade Item)";
            IF AdviceOrderLine.Vendor = '' THEN  //C036698
              OVendorNo := GetNavisionVendorForEtimVendor(OEtimVendorNo)
            ELSE
              OVendorNo := AdviceOrderLine.Vendor;
            OShipToLocation := AdviceOrderLine."Ship To Location";
            OProjectCode := AdviceOrderLine."Project No.";
            OShortCutDimension1Code := AdviceOrderLine."Global Dimension 1 Code";
          END;
        DATABASE::"Project Cost Plus Entry":
          BEGIN
            IRecRef.SETTABLE(ProjectCostPlusEntry);
            OEtimVendorHasUserName := GetUserNameTu(ProjectCostPlusEntry."Vendor (Trade Item)") <> '';
            OEtimVendorNo := ProjectCostPlusEntry."Vendor (Trade Item)";
            IF ProjectCostPlusEntry.Vendor = '' THEN  //C036698
              OVendorNo := GetNavisionVendorForEtimVendor(OEtimVendorNo)
            ELSE
              OVendorNo := ProjectCostPlusEntry.Vendor;
            OProjectCode := ProjectCostPlusEntry."Project No.";
            OShortCutDimension1Code := ProjectCostPlusEntry."Global Dimension 1 Code";
          END;
        DATABASE::"Service Order Cost Plus Entry":
          BEGIN
            IRecRef.SETTABLE(ServiceOrderCostPlusEntry);
            OEtimVendorHasUserName := GetUserNameTu(ServiceOrderCostPlusEntry."Vendor (Trade Item)") <> '';
            OEtimVendorNo := ServiceOrderCostPlusEntry."Vendor (Trade Item)";
            OVendorNo := GetNavisionVendorForEtimVendor(OEtimVendorNo);
            ServiceOrder.GET(ServiceOrderCostPlusEntry. "Service Order No.");
            OShortCutDimension1Code := ServiceOrder."Global Dimension 1 Code";
          END;
        DATABASE::"Estimate Line":
          BEGIN
            IRecRef.SETTABLE(EstimateLine);
            OEtimVendorHasUserName := GetUserNameTu(EstimateLine."Vendor (Trade Item)") <> '';
            OEtimVendorNo := EstimateLine."Vendor (Trade Item)";
            IF EstimateLine.Vendor = '' THEN  //C036698
              OVendorNo := GetNavisionVendorForEtimVendor(OEtimVendorNo)
            ELSE
              OVendorNo := EstimateLine.Vendor;
            Estimate.GET(EstimateLine. "Estimate No.");
            OShortCutDimension1Code := Estimate."Global Dimension 1 Code";  //db, 12-05-14
          END;
        DATABASE::"Estimate Recipe Line":  //db, 12-05-15: C022731
          BEGIN
            IRecRef.SETTABLE(EstRcpLine);
            OEtimVendorHasUserName := GetUserNameTu(EstRcpLine."Vendor (Trade Item)") <> '';
            OEtimVendorNo := EstRcpLine."Vendor (Trade Item)";
            IF EstRcpLine.Vendor = '' THEN  //C036698
              OVendorNo := GetNavisionVendorForEtimVendor(OEtimVendorNo)
            ELSE
              OVendorNo := EstRcpLine.Vendor;
            Estimate.GET(EstRcpLine. "Estimate No.");
            OShortCutDimension1Code := Estimate."Global Dimension 1 Code";
          END;
        DATABASE::"Base Recipe Line":  //db, 12-05-15: C022731
          BEGIN
            IRecRef.SETTABLE(BaseRcpLine);
            OEtimVendorHasUserName := GetUserNameTu(BaseRcpLine."Vendor (Trade Item)") <> '';
            OEtimVendorNo := BaseRcpLine."Vendor (Trade Item)";
            IF BaseRcpLine.Vendor = '' THEN  //C036698
              OVendorNo := GetNavisionVendorForEtimVendor(OEtimVendorNo)
            ELSE
              OVendorNo := BaseRcpLine.Vendor;
          END;
        DATABASE::"Item to Replace":  //C060176
          BEGIN
            IRecRef.SETTABLE(ItemtoReplace);
            OEtimVendorHasUserName := GetUserNameTu(ItemtoReplace."Vendor (New)") <> '';
            OEtimVendorNo := ItemtoReplace."Vendor (New)";
            IF ItemtoReplace."Vendor (New)" = '' THEN
              OVendorNo := GetNavisionVendorForEtimVendor(OEtimVendorNo)
            ELSE
              OVendorNo := ItemtoReplace."Vendor (New)";
          END;
        DATABASE::"Purchase Line":
          BEGIN
            IRecRef.SETTABLE(PurchaseLine);
            OEtimVendorHasUserName := GetUserNameTu(PurchaseLine."Vendor (Trade Item)") <> '';
            OEtimVendorNo := PurchaseLine."Vendor (Trade Item)";
            PurchaseHeader.GET(PurchaseLine."Document Type", PurchaseLine."Document No.");
            OShipToLocation := PurchaseHeader."Ship-to Location";
            OVendorNo := PurchaseLine."Buy-from Vendor No.";
            OProjectCode := PurchaseLine."Job No.";
            OShortCutDimension1Code := PurchaseLine."Shortcut Dimension 1 Code";
          END;
        DATABASE::"Budget Line":
          BEGIN
            IRecRef.SETTABLE(BudgetLine);
            OEtimVendorHasUserName := GetUserNameTu(BudgetLine."Vendor (Trade Item)") <> '';
            OEtimVendorNo := BudgetLine."Vendor (Trade Item)";
            IF BudgetLine.Vendor = '' THEN  //C036698
              OVendorNo := GetNavisionVendorForEtimVendor(OEtimVendorNo)
            ELSE
              OVendorNo := BudgetLine.Vendor;
            OProjectCode := BudgetLine."Project No.";
            OShortCutDimension1Code := BudgetLine."Department Code";
          END;
        DATABASE::"Service Order Budget Line":
          BEGIN
            IRecRef.SETTABLE(ServiceOrderBudgetLine);
            OEtimVendorHasUserName := GetUserNameTu(ServiceOrderBudgetLine."Vendor (Trade Item)") <> '';
            OEtimVendorNo := ServiceOrderBudgetLine."Vendor (Trade Item)";
            IF ServiceOrderBudgetLine.Vendor = '' THEN  //C036698
              OVendorNo := GetNavisionVendorForEtimVendor(OEtimVendorNo)
            ELSE
              OVendorNo := ServiceOrderBudgetLine.Vendor;
            ServiceOrder.GET(ServiceOrderBudgetLine."Service Order No.");
            OShortCutDimension1Code := ServiceOrder."Global Dimension 1 Code";
          END;
        DATABASE::"Maint. Scheme Version Line":
          BEGIN
            IRecRef.SETTABLE(MaintSchemeVersionLine);
            OEtimVendorHasUserName := GetUserNameTu(MaintSchemeVersionLine."Vendor (Trade Item)") <> '';
            OEtimVendorNo := MaintSchemeVersionLine."Vendor (Trade Item)";
            IF MaintSchemeVersionLine.Vendor = '' THEN  //C036698
              OVendorNo := GetNavisionVendorForEtimVendor(OEtimVendorNo)
            ELSE
              OVendorNo := MaintSchemeVersionLine.Vendor;
          END;
        DATABASE::"Serv. Surv. Object Add. Act.":
          BEGIN
            IRecRef.SETTABLE(ServSurvObjectAddAct);
            OEtimVendorHasUserName := GetUserNameTu(ServSurvObjectAddAct."Vendor (Trade Item)") <> '';
            OEtimVendorNo := ServSurvObjectAddAct."Vendor (Trade Item)";
            IF ServSurvObjectAddAct.Vendor = '' THEN  //C036698
              OVendorNo := GetNavisionVendorForEtimVendor(OEtimVendorNo)
            ELSE
              OVendorNo := ServSurvObjectAddAct.Vendor;
            ServiceSurvey.GET(ServSurvObjectAddAct."Survey No.");
            OShortCutDimension1Code := ServiceSurvey."Global Dimension 1 Code";
          END;
        DATABASE::"Sales Line":
          BEGIN
            IRecRef.SETTABLE(SalesLine);
            OEtimVendorHasUserName := GetUserNameTu(SalesLine."Vendor (Trade Item)") <> '';
            OEtimVendorNo := SalesLine."Vendor (Trade Item)";
            OVendorNo := GetNavisionVendorForEtimVendor(OEtimVendorNo);  //C036698
            SalesHeader.GET(SalesLine."Document Type", SalesLine."Document No.");
            OProjectCode := SalesLine."Job No.";
            OShortCutDimension1Code := SalesLine."Shortcut Dimension 1 Code";
          END;
        DATABASE::"Requisition Line":
          BEGIN
            IRecRef.SETTABLE(RequisitionLine);
            OEtimVendorHasUserName := GetUserNameTu(RequisitionLine."Vendor (Trade Item)") <> '';
            OEtimVendorNo := RequisitionLine."Vendor (Trade Item)";
            IF RequisitionLine."Vendor No." = '' THEN  //C036698
              OVendorNo := GetNavisionVendorForEtimVendor(OEtimVendorNo)
            ELSE
              OVendorNo := RequisitionLine."Vendor No.";
            OShipToLocation := RequisitionLine."Ship To Location";
            OProjectCode := RequisitionLine."Project No.";
            OShortCutDimension1Code := RequisitionLine."Shortcut Dimension 1 Code";
          END;
        DATABASE::"Project Material Req. Line":
          BEGIN
            IRecRef.SETTABLE(ProjectMaterialReqLine);
            OEtimVendorHasUserName := GetUserNameTu(ProjectMaterialReqLine."Vendor (Trade Item)") <> '';
            OEtimVendorNo := ProjectMaterialReqLine."Vendor (Trade Item)";
            IF ProjectMaterialReqLine."Preferred Vendor" = '' THEN
              OVendorNo := GetNavisionVendorForEtimVendor(OEtimVendorNo)
            ELSE
              OVendorNo := ProjectMaterialReqLine."Preferred Vendor";
            OProjectCode := ProjectMaterialReqLine."Project No.";
          END;
        ELSE
          ERROR(Text002, IRecRef.NAME);
      END;
    END;

    LOCAL PROCEDURE HandleChoosenTradeItems@1100528605(VAR ITmpTradeItem@1100528600 : TEMPORARY Record 11012317;IRecRef@1100528602 : RecordRef);
    VAR
      TmpTradeItem@1100528601 : TEMPORARY Record 11012317;
      AdviceOrderLine@1100528603 : Record 11012055;
      ProjectCostPlusEntry@1100528605 : Record 11012019;
      ServiceOrderCostPlusEntry@1100528606 : Record 11012825;
      EstimateLine@1100528608 : Record 11072072;
      PurchaseLine@1100528609 : Record 39;
      BudgetLine@1100528610 : Record 11012001;
      ServiceOrderBudgetLine@1100528611 : Record 11012875;
      MultipleCopyManagement@1100528604 : Codeunit 11012068;
      EstRcpLine@1100525001 : Record 11072075;
      BaseRcpLine@1100525000 : Record 11020582;
      MaintSchemeVersionLine@1100528612 : Record 11071744;
      ServSurvObjectAddAct@1100528613 : Record 11071814;
      SalesLine@1100528200 : Record 37;
      RequisitionLine@1100528201 : Record 246;
      ProjectMaterialReqLine@1100528400 : Record 11012526;
    BEGIN
      TmpTradeItem.COPY(ITmpTradeItem, TRUE);

      TmpTradeItem.SETCURRENTKEY("Import Date-Time");
      IF TmpTradeItem.ISEMPTY THEN
        EXIT;
      CASE IRecRef.NUMBER OF
        DATABASE::"Advice Order Line":
          BEGIN
            IRecRef.SETTABLE(AdviceOrderLine);
            MultipleCopyManagement.SetSelectionItem(IRecRef.NUMBER,
              AdviceOrderLine."Project No.", AdviceOrderLine.Element, AdviceOrderLine."Extension Contract",
              AdviceOrderLine."Service Order No.", AdviceOrderLine."Record Type", '', '',
              AdviceOrderLine."Line No.", '', '', 0D);
            MultipleCopyManagement.CopyTradeItems(TmpTradeItem, TRUE);
          END;
        DATABASE::"Project Cost Plus Entry":
          BEGIN
            IRecRef.SETTABLE(ProjectCostPlusEntry);
            MultipleCopyManagement.SetSelectionItem(IRecRef.NUMBER,
              ProjectCostPlusEntry."Project No.", ProjectCostPlusEntry.Principal,
              ProjectCostPlusEntry."Commission No.", ProjectCostPlusEntry."Settl.Sheet No.",
              0, '', '', ProjectCostPlusEntry."Line No.", '', '', 0D);
            MultipleCopyManagement.CopyTradeItems(TmpTradeItem, TRUE);
          END;
        DATABASE::"Service Order Cost Plus Entry":
          BEGIN
            IRecRef.SETTABLE(ServiceOrderCostPlusEntry);
            MultipleCopyManagement.SetSelectionItem(IRecRef.NUMBER,
              ServiceOrderCostPlusEntry."Service Order No.", '', '', '',
              0, '', '', ServiceOrderCostPlusEntry."Line No.", '', '', 0D);
            MultipleCopyManagement.CopyTradeItems(TmpTradeItem, TRUE);
          END;
        DATABASE::"Estimate Line":
          BEGIN
            IRecRef.SETTABLE(EstimateLine);
            MultipleCopyManagement.SetSelectionItem(IRecRef.NUMBER,
              EstimateLine."Estimate No.", EstimateLine."Sub-Estimate No.", EstimateLine.Part, '', 0, '',
              EstimateLine."Part Group", EstimateLine."Line No.", '', '', 0D);
            MultipleCopyManagement.CopyTradeItems(TmpTradeItem, TRUE);
          END;
        DATABASE::"Estimate Recipe Line":  //db, 12-05-15: C022731
          BEGIN
            IRecRef.SETTABLE(EstRcpLine);
            MultipleCopyManagement.SetSelectionItem(IRecRef.NUMBER,
              EstRcpLine."Estimate No.", EstRcpLine."Sub-Estimate No.", EstRcpLine.Part, EstRcpLine.Recipe,
              EstRcpLine."Estimate Line", EstRcpLine."Recipe Group",
              EstRcpLine."Part Group", EstRcpLine."Line No.", '', '', 0D);
            MultipleCopyManagement.CopyTradeItems(TmpTradeItem, TRUE);
          END;
        DATABASE::"Base Recipe Line":  //db, 12-05-15: C022731
          BEGIN
            IRecRef.SETTABLE(BaseRcpLine);
            MultipleCopyManagement.SetSelectionItem(IRecRef.NUMBER,
              '', '', '', BaseRcpLine.Recipe, 0, BaseRcpLine."Recipe Group",
              '', BaseRcpLine."Line No.", '', '', 0D);
            MultipleCopyManagement.CopyTradeItems(TmpTradeItem, TRUE);
          END;
        DATABASE::"Item to Replace":  //C060176
          BEGIN
            //no copy of selection to this table; just return filter to starting page
          END;
        DATABASE::"Purchase Line":
          BEGIN
            IRecRef.SETTABLE(PurchaseLine);
            MultipleCopyManagement.SetSelectionItem(IRecRef.NUMBER,
              PurchaseLine."Document No.", PurchaseLine.Element, '', PurchaseLine."Job No.",
              PurchaseLine."Document Type", PurchaseLine."Service Order No.", '',
              PurchaseLine."Line No.", '', '', 0D);
            MultipleCopyManagement.CopyTradeItems(TmpTradeItem, TRUE);
          END;
        DATABASE::"Budget Line":
          BEGIN
            IRecRef.SETTABLE(BudgetLine);
            MultipleCopyManagement.SetSelectionItem(IRecRef.NUMBER,
              BudgetLine."Project No.", BudgetLine."Extension Contract", BudgetLine.Adjustment, BudgetLine.Element,
              0, BudgetLine.Option, '', BudgetLine."Line No.", '', '', 0D);
            MultipleCopyManagement.CopyTradeItems(TmpTradeItem, TRUE);
          END;
        DATABASE::"Service Order Budget Line":
          BEGIN
            IRecRef.SETTABLE(ServiceOrderBudgetLine);
            MultipleCopyManagement.SetSelectionItem(IRecRef.NUMBER,
              ServiceOrderBudgetLine."Service Order No.", ServiceOrderBudgetLine."Object No.", ServiceOrderBudgetLine."Maintenance Scheme", '',
              0, '', '', ServiceOrderBudgetLine."Line No.", '', '', 0D);
            MultipleCopyManagement.CopyTradeItems(TmpTradeItem, TRUE);
          END;
        DATABASE::"Maint. Scheme Version Line":
          BEGIN
            IRecRef.SETTABLE(MaintSchemeVersionLine);
            MultipleCopyManagement.SetSelectionItem(IRecRef.NUMBER,
            //Line Type,Type Code,Belongs to Scheme,Index Date,Line No.
              MaintSchemeVersionLine."Type Code", MaintSchemeVersionLine."Belongs to Scheme", '', '',
              MaintSchemeVersionLine."Line Type", '', '', MaintSchemeVersionLine."Line No.", '', '', MaintSchemeVersionLine."Index Date");
            MultipleCopyManagement.CopyTradeItems(TmpTradeItem, TRUE);
          END;
        DATABASE::"Serv. Surv. Object Add. Act.":
          BEGIN
            IRecRef.SETTABLE(ServSurvObjectAddAct);
            MultipleCopyManagement.SetSelectionItem(IRecRef.NUMBER,
              ServSurvObjectAddAct."Survey No.", ServSurvObjectAddAct."Location Code", ServSurvObjectAddAct."Maintenance Scheme Code", '',
              ServSurvObjectAddAct."Seq. No.", '', '', ServSurvObjectAddAct."Line No.", '', '', 0D);
            MultipleCopyManagement.CopyTradeItems(TmpTradeItem, TRUE);
          END;
        DATABASE::"Sales Line":
          BEGIN
            IRecRef.SETTABLE(SalesLine);
            MultipleCopyManagement.SetSelectionItem(IRecRef.NUMBER,
              SalesLine."Document No.", SalesLine.Element, '', SalesLine."Job No.",
              SalesLine."Document Type", SalesLine."Service Order No.", '',
              SalesLine."Line No.", '', '', 0D);
            MultipleCopyManagement.CopyTradeItems(TmpTradeItem, TRUE);
          END;
        DATABASE::"Requisition Line":
          BEGIN
            IRecRef.SETTABLE(RequisitionLine);
            MultipleCopyManagement.SetSelectionItem(IRecRef.NUMBER,
              RequisitionLine."Worksheet Template Name", RequisitionLine.Element, RequisitionLine."Journal Batch Name", RequisitionLine."Project No.",
              0, RequisitionLine."Service Order No.", '',
              RequisitionLine."Line No.", '', '', 0D);
            MultipleCopyManagement.CopyTradeItems(TmpTradeItem, TRUE);
          END;
        DATABASE::"Project Material Req. Line":
          BEGIN
            IRecRef.SETTABLE(ProjectMaterialReqLine);
            MultipleCopyManagement.SetSelectionItem(IRecRef.NUMBER,
              ProjectMaterialReqLine."Project No.", ProjectMaterialReqLine."Yard No.", ProjectMaterialReqLine."System No.",
              ProjectMaterialReqLine."Entity No.", ProjectMaterialReqLine."Entity Type", ProjectMaterialReqLine.Element, '',
              ProjectMaterialReqLine."Line No.", '', '', 0D);
            MultipleCopyManagement.CopyTradeItems(TmpTradeItem, TRUE);
          END;
        ELSE
          ERROR(Text002, IRecRef.NAME);
      END;
    END;

    PROCEDURE Test2BALicence@1100528603();
    VAR
      LicensePermission@1100528600 : Record 2000000043;
    BEGIN
      IF NOT LicensePermission.GET(LicensePermission."Object Type"::Codeunit, CODEUNIT::"2ba Unifeed License") OR
         (LicensePermission."Execute Permission" = LicensePermission."Execute Permission"::" ")
      THEN
        ERROR(Text007);
    END;

    LOCAL PROCEDURE AddItemToPriceList2baByTradeItemGuid@1100528872(TradeItemGuid2ba@1100528800 : Text[36]);
    VAR
      ClientBasketItem2@1100528401 : DotNet "'Fps.WebshopBasketConnector, Version=1.0.0.2, Culture=neutral, PublicKeyToken=024bd013665211e9'.Fps.WebshopBasketConnector.BasketItem" RUNONCLIENT;
      ServerBasketItem2@1100528400 : DotNet "'Fps.WebshopBasketConnector, Version=1.0.0.2, Culture=neutral, PublicKeyToken=024bd013665211e9'.Fps.WebshopBasketConnector.BasketItem";
    BEGIN
      IF NOT TradeItemGuidIsValid(TradeItemGuid2ba) THEN
        EXIT;
      IF ClientIsAvailable THEN BEGIN
        ClientBasketItem2 := ClientBasketItem2.BasketItem;
        ClientBasketItem2.TradeItemGuid(TradeItemGuid2ba);
        ClientWebShop.AddItemToPriceList(ClientBasketItem2);
      END ELSE BEGIN
        ServerBasketItem2 := ServerBasketItem2.BasketItem;
        ServerBasketItem2.TradeItemGuid(TradeItemGuid2ba);
        ServerWebShop.AddItemToPriceList(ServerBasketItem2);
      END;
    END;

    LOCAL PROCEDURE AddItemToPriceList2baByVendorGLNAndTradeItemNo@1100528422(VendorGLN@1100528800 : Code[20];TradeItemNo@1100528402 : Code[20]);
    VAR
      ClientBasketItem2@1100528401 : DotNet "'Fps.WebshopBasketConnector, Version=1.0.0.2, Culture=neutral, PublicKeyToken=024bd013665211e9'.Fps.WebshopBasketConnector.BasketItem" RUNONCLIENT;
      ServerBasketItem2@1100528400 : DotNet "'Fps.WebshopBasketConnector, Version=1.0.0.2, Culture=neutral, PublicKeyToken=024bd013665211e9'.Fps.WebshopBasketConnector.BasketItem";
    BEGIN
      IF ClientIsAvailable THEN BEGIN
        ClientBasketItem2 := ClientBasketItem2.BasketItem;
        ClientBasketItem2.VendorGln(VendorGLN);
        ClientBasketItem2.TradeItemNo(TradeItemNo);
        ClientWebShop.AddItemToPriceList(ClientBasketItem2);
      END ELSE BEGIN
        ServerBasketItem2 := ServerBasketItem2.BasketItem;
        ServerBasketItem2.VendorGln(VendorGLN);
        ServerBasketItem2.TradeItemNo(TradeItemNo);
        ServerWebShop.AddItemToPriceList(ServerBasketItem2);
      END;
    END;

    LOCAL PROCEDURE FetchPriceList2ba@1100528874();
    BEGIN
      IF ClientIsAvailable THEN
        ClientBasketItemArrayList := ClientWebShop.FetchPriceList
      ELSE
        ServerBasketItemArrayList := ServerWebShop.FetchPriceList;
    END;

    LOCAL PROCEDURE ClearWebShop@1100528831();
    BEGIN
      IF ClientIsAvailable THEN
        IF NOT ISNULL(ClientWebShop) THEN CLEAR(ClientWebShop)
      ELSE
        IF NOT ISNULL(ServerWebShop) THEN CLEAR(ServerWebShop);
    END;

    LOCAL PROCEDURE InitWebshopForTu@1100528837(UserNameForVendor@1100528403 : Text[30];PasswordForVendor@1100528402 : Text[30];ICMCustomer@1100528404 : Text[30]);
    VAR
      ClientWebshopType@1100528400 : DotNet "'Fps.WebshopBasketConnector, Version=1.0.0.2, Culture=neutral, PublicKeyToken=024bd013665211e9'.Fps.WebshopBasketConnector.WebShop+ShopTypes" RUNONCLIENT;
      ServerWebshopType@1100528401 : DotNet "'Fps.WebshopBasketConnector, Version=1.0.0.2, Culture=neutral, PublicKeyToken=024bd013665211e9'.Fps.WebshopBasketConnector.WebShop+ShopTypes";
      BrowserURL@1100528405 : Text;
      BasketURL@1100528406 : Text;
    BEGIN
      BrowserURL := 'https://www.technischeunie.nl/basket';
      BasketURL := 'https://www.technischeunie.nl/getbasket';
      IF ClientIsAvailable THEN BEGIN
        ClientWebShop := ClientWebShop.WebShop();
        ClientWebShop.Initialize(ClientWebshopType.Tu, BrowserURL, BasketURL, UserNameForVendor, PasswordForVendor, ICMCustomer);
      END ELSE BEGIN
        ServerWebShop := ServerWebShop.WebShop();
        ServerWebShop.Initialize(ServerWebshopType.Tu, BrowserURL, BasketURL, UserNameForVendor, PasswordForVendor, ICMCustomer);
      END;
    END;

    LOCAL PROCEDURE InitWebshopFor2ba@1100528805();
    VAR
      ClientWebshopType@1100528400 : DotNet "'Fps.WebshopBasketConnector, Version=1.0.0.2, Culture=neutral, PublicKeyToken=024bd013665211e9'.Fps.WebshopBasketConnector.WebShop+ShopTypes" RUNONCLIENT;
      ServerWebshopType@1100528401 : DotNet "'Fps.WebshopBasketConnector, Version=1.0.0.2, Culture=neutral, PublicKeyToken=024bd013665211e9'.Fps.WebshopBasketConnector.WebShop+ShopTypes";
      BrowserUrl@1100528402 : Text;
      BasketUrl@1100528403 : Text;
      SelectionListGuid@1100528404 : Text[36];
    BEGIN
      BrowserUrl := 'https://unifeed.2ba.nl/';
      BasketUrl := 'https://api.2ba.nl';
      SelectionListGuid := CREATEGUID;
      IF ClientIsAvailable THEN BEGIN
        ClientWebShop := ClientWebShop.WebShop();
        ClientWebShop.Initialize(ClientWebshopType.Tba, BrowserUrl, BasketUrl, GetUserName2ba, GetPassword2ba, '');
        ClientWebShop.SelectionListName(SelectionListGuid);
      END ELSE BEGIN
        ServerWebShop := ServerWebShop.WebShop();
        ServerWebShop.Initialize(ServerWebshopType.Tba, BrowserUrl, BasketUrl, GetUserName2ba, GetPassword2ba, '');
        ServerWebShop.SelectionListName(SelectionListGuid);
      END;
    END;

    LOCAL PROCEDURE SetOAuthClientCredentials2ba@1100528824();
    VAR
      ClientId@1100528400 : Text;
      ClientSecret@1100528401 : Text;
      AuthorizeUrl@1100528402 : Text;
    BEGIN
      ClientId := '4PS_CONSTRUCT';
      ClientSecret := 'E84SfjPOJTkSIvCGL987YT3M';
      AuthorizeUrl := 'https://authorize.2ba.nl/OAuth/Token';
      IF ClientIsAvailable THEN
        ClientWebShop.SetOAuthClientCredentials(ClientId, ClientSecret, AuthorizeUrl)
      ELSE
        ServerWebShop.SetOAuthClientCredentials(ClientId, ClientSecret, AuthorizeUrl);
    END;

    PROCEDURE ConnectTradeItemTo2ba@1100528423(TradeItem@1100528400 : Record 11012317;VAR Initialized@1100528403 : Boolean;VAR ModifyCount@1100528401 : Integer);
    VAR
      EmptyGuid@1100528402 : GUID;
      VendorCode@1100528302 : Code[20];
      TradeItemVendor@1100528201 : Code[20];
      TradeItemCode@1100528202 : Code[20];
      TradeItemGuidOfBasketItem@1100528100 : Text;
    BEGIN
      VendorCode := GetMainVendorCode(TradeItem.Vendor);
      IF (VendorCode = '') THEN
        EXIT;

      IF NOT Initialized THEN BEGIN
        InitializeFor2ba;
        Initialized := TRUE;
      END;

      AddItemToPriceList2baByVendorGLNAndTradeItemNo(VendorCode, TradeItem."Item Code");
      FetchPriceList2ba;
      RemoveSelectionList(WebShopType::"2ba");

      IF GetNumberOfBasketItems <> 1 THEN
        EXIT;

      SetBasketItem(0);
      TradeItemGuidOfBasketItem := GetTradeItemGuidOfBasketItem;
      IF TradeItemGuidOfBasketItem <> '' THEN
        IF TradeItemGuidOfBasketItem <> EmptyGuid THEN BEGIN
          VendorCode := GetVendorGlnOfBasketItem;
          IF VendorCode <> '' THEN BEGIN
            TradeItemVendor := GetAndCheckAlternatVendorCode(VendorCode);
            IF TradeItemVendor = '' THEN
              EXIT;
          END;
          TradeItemCode := GetTradeItemNoOfBasketItem;
          IF (TradeItemVendor = TradeItem.Vendor) AND
             (TradeItemCode = TradeItem."Item Code") THEN
          BEGIN
            TradeItem."Maintained by 2ba" := TRUE;
            TradeItem."Trade Item Guid (2ba)" := GetTradeItemGuidOfBasketItem;
            TradeItem."Product ID Guid (2ba)" := GetProductIDGuidOfBasketItem;
            ModifyCount += 1;
            TradeItem.MODIFY(TRUE);
          END;
        END;
    END;

    LOCAL PROCEDURE SetSearchDescription@1100528808(GTINCodeProduct@1100528800 : Code[20]);
    BEGIN
      IF ClientIsAvailable THEN
        ClientWebShop.SearchDescription(GTINCodeProduct)
      ELSE
        ServerWebShop.SearchDescription(GTINCodeProduct);
    END;

    LOCAL PROCEDURE ShowWebshop@1100528816(WebShopType2@1100528403 : Integer);
    BEGIN
      IF ClientIsAvailable THEN BEGIN
        ClientWebShop.ShowBrowser;
        ClientBasketItemArrayList := ClientWebShop.GetBasketItems;
      END ELSE BEGIN
        ServerWebShop.ShowBrowser;
        ServerBasketItemArrayList := ServerWebShop.GetBasketItems;
      END;
    END;

    LOCAL PROCEDURE ShowTradeItemInfoFrom2baObject@1100528806(TradeItem@1100528800 : Record 11012317);
    BEGIN
      InitializeFor2ba;
      SetFiltersFor2baUnifeed(TradeItem.Vendor, TradeItem."Item Code");
      ShowWebshop(WebShopType::"2ba");
      RemoveSelectionList(WebShopType::"2ba");
    END;

    LOCAL PROCEDURE GetNumberOfBasketItems@1100528804() : Integer;
    BEGIN
      IF ClientIsAvailable THEN
        EXIT(ClientBasketItemArrayList.Count)
      ELSE
        EXIT(ServerBasketItemArrayList.Count);
    END;

    LOCAL PROCEDURE RemoveSelectionList@1100528406(WebShopType2@1100528401 : Integer);
    VAR
      SelectionListName@1100528400 : Text;
    BEGIN
      IF ClientIsAvailable THEN BEGIN
        SelectionListName := ClientWebShop.SelectionListName;
        IF SelectionListName <> '' THEN
          ClientWebShop.DeleteBasket(SelectionListName);
      END ELSE BEGIN
        SelectionListName := ServerWebShop.SelectionListName;
        IF SelectionListName <> '' THEN
          ServerWebShop.DeleteBasket(SelectionListName);
      END;
    END;

    LOCAL PROCEDURE ClearBasketItem@1100528834();
    BEGIN
      IF ClientIsAvailable THEN
        IF NOT ISNULL(ClientBasketItem) THEN CLEAR(ClientBasketItem)
      ELSE
        IF NOT ISNULL(ServerBasketItem) THEN CLEAR(ServerBasketItem);
    END;

    LOCAL PROCEDURE SetBasketItem@1100528814(Counter@1100528800 : Integer);
    BEGIN
      IF ClientIsAvailable THEN
        ClientBasketItem := ClientBasketItemArrayList.Item(Counter)
      ELSE
        ServerBasketItem := ServerBasketItemArrayList.Item(Counter);
    END;

    LOCAL PROCEDURE GetTradeItemNoOfBasketItem@1100528818() : Code[20];
    VAR
      TradeItemNo@1100528400 : Code[100];
    BEGIN
      IF ClientIsAvailable THEN
        TradeItemNo := ClientBasketItem.TradeItemNo
      ELSE
        TradeItemNo := ServerBasketItem.TradeItemNo;
      TradeItemNo := COPYSTR(TradeItemNo, 1, 20);
      EXIT(TradeItemNo);
    END;

    LOCAL PROCEDURE GetVendorGlnOfBasketItem@1100528400() : Code[20];
    VAR
      VendorGln@1100528400 : Code[100];
    BEGIN
      IF ClientIsAvailable THEN
        VendorGln := ClientBasketItem.VendorGln
      ELSE
        VendorGln := ServerBasketItem.VendorGln;
      VendorGln := COPYSTR(VendorGln, 1, 20);
      EXIT(VendorGln);
    END;

    LOCAL PROCEDURE GetGtinOfBasketItem@1100528855() ResultCode : Code[20];
    VAR
      ResultCodeLength@1100529700 : Integer;
      Gtin@1100528400 : Code[100];
    BEGIN
      IF ClientIsAvailable THEN
        Gtin := ClientBasketItem.Gtin
      ELSE
        Gtin := ServerBasketItem.Gtin;
      ResultCode := COPYSTR(Gtin, 1, 20);

      IF DELCHR(ResultCode,'=','0') = '' THEN BEGIN
        ResultCode := '';
        EXIT;
      END;

      ResultCodeLength := 14;
      WHILE STRLEN(ResultCode) < ResultCodeLength DO
        ResultCode := '0' + ResultCode;
      EXIT(ResultCode);
    END;

    LOCAL PROCEDURE GetManufacturerOfBasketItem@1100528405() : Code[15];
    VAR
      Manufacturer@1100528400 : Code[100];
    BEGIN
      IF ClientIsAvailable THEN
        Manufacturer := ClientBasketItem.Manufacturer
      ELSE
        Manufacturer := ServerBasketItem.Manufacturer;
      Manufacturer := COPYSTR(Manufacturer, 1, 15);
      EXIT(Manufacturer);
    END;

    LOCAL PROCEDURE GetProductCodeOfBasketItem@1100528404() : Code[20];
    VAR
      ProductCode@1100528500 : Code[100];
    BEGIN
      IF ClientIsAvailable THEN
        ProductCode := ClientBasketItem.ProductCode
      ELSE
        ProductCode := ServerBasketItem.ProductCode;
      IF ProductCode <> '' THEN
        ProductCode := COPYSTR(ProductCode, 1, 20);
      EXIT(ProductCode);
    END;

    LOCAL PROCEDURE GetItemDescriptionOfBasketItem@1100528857() : Text;
    BEGIN
      IF ClientIsAvailable THEN
        EXIT(ClientBasketItem.ItemDescription)
      ELSE
        EXIT(ServerBasketItem.ItemDescription);
    END;

    LOCAL PROCEDURE GetItemQuantityOfBasketItem@1100528412() : Decimal;
    BEGIN
      IF ClientIsAvailable THEN
        EXIT(ClientBasketItem.ItemQuantity)
      ELSE
        EXIT(ServerBasketItem.ItemQuantity);
    END;

    LOCAL PROCEDURE GetApplicationUnitQuantityOfBasketItem@1100528858() : Decimal;
    BEGIN
      IF ClientIsAvailable THEN
        EXIT(ClientBasketItem.ApplicationUnitQuantity)
      ELSE
        EXIT(ServerBasketItem.ApplicationUnitQuantity);
    END;

    LOCAL PROCEDURE GetApplicationIDOfBasketItem@1100528859() : Code[10];
    VAR
      ApplicationID@1100528400 : Code[100];
    BEGIN
      IF ClientIsAvailable THEN
        ApplicationID := ClientBasketItem.ApplicationId
      ELSE
        ApplicationID := ServerBasketItem.ApplicationId;
      ApplicationID := COPYSTR(ApplicationID, 1, 10);
      EXIT(ApplicationID);
    END;

    LOCAL PROCEDURE GetPackagingCodeOfBasketItem@1100528860() : Code[10];
    VAR
      PackagingCode@1100528400 : Code[100];
    BEGIN
      IF ClientIsAvailable THEN
        PackagingCode := ClientBasketItem.PackagingCode
      ELSE
        PackagingCode := ServerBasketItem.PackagingCode;
      PackagingCode := COPYSTR(PackagingCode, 1, 10);
      EXIT(PackagingCode);
    END;

    LOCAL PROCEDURE GetOrderIDOfBasketItem@1100528861() : Code[10];
    VAR
      OrderID@1100528400 : Code[100];
    BEGIN
      IF ClientIsAvailable THEN
        OrderID := ClientBasketItem.OrderId
      ELSE
        OrderID := ServerBasketItem.OrderId;
      OrderID := COPYSTR(OrderID, 1, 10);
      EXIT(OrderID);
    END;

    LOCAL PROCEDURE GetMinimumOrderQuantityOfBasketItem@1100528862() : Decimal;
    BEGIN
      IF ClientIsAvailable THEN
        EXIT(ClientBasketItem.MinimumOrderQuantity)
      ELSE
        EXIT(ServerBasketItem.MinimumOrderQuantity);
    END;

    LOCAL PROCEDURE GetLotSizeQuantityOfBasketItem@1100528863() : Decimal;
    BEGIN
      IF ClientIsAvailable THEN
        EXIT(ClientBasketItem.LotSizeQuantity)
      ELSE
        EXIT(ServerBasketItem.LotSizeQuantity);
    END;

    LOCAL PROCEDURE GetDeliveryPeriodOfBasketItem@1100528408() : Text;
    BEGIN
      IF ClientIsAvailable THEN
        EXIT(ClientBasketItem.DeliveryPeriod)
      ELSE
        EXIT(ServerBasketItem.DeliveryPeriod);
    END;

    LOCAL PROCEDURE GetDeliveryTimeIDOfBasketItem@1100528407() : Code[10];
    VAR
      DeliveryTimeID@1100528400 : Code[100];
    BEGIN
      IF ClientIsAvailable THEN
        DeliveryTimeID := ClientBasketItem.DeliveryTimeId
      ELSE
        DeliveryTimeID := ServerBasketItem.DeliveryTimeId;
      DeliveryTimeID := COPYSTR(DeliveryTimeID, 1, 10);
      EXIT(DeliveryTimeID);
    END;

    LOCAL PROCEDURE GetDiscountGroupCodeOfBasketItem@1100528864() : Code[35];
    VAR
      DiscountGroupCode@1100528400 : Code[100];
    BEGIN
      IF ClientIsAvailable THEN
        DiscountGroupCode := ClientBasketItem.DiscountGroupCode
      ELSE
        DiscountGroupCode := ServerBasketItem.DiscountGroupCode;
      DiscountGroupCode := COPYSTR(DiscountGroupCode, 1, 35);
      EXIT(DiscountGroupCode);
    END;

    LOCAL PROCEDURE GetFactorPricePurchaseUnitOfBasketItem@1100528411() : Decimal;
    BEGIN
      IF ClientIsAvailable THEN
        EXIT(ClientBasketItem.FactorPricePurchaseUnit)
      ELSE
        EXIT(ServerBasketItem.FactorPricePurchaseUnit);
    END;

    LOCAL PROCEDURE GetStartingDatePriceOfBasketItem@1100528410() : Text[30];
    VAR
      StartingDatePrice@1100528400 : Text;
    BEGIN
      IF ClientIsAvailable THEN
        StartingDatePrice := ClientBasketItem.StartingDatePrice
      ELSE
        StartingDatePrice := ServerBasketItem.StartingDatePrice;
      StartingDatePrice := COPYSTR(StartingDatePrice, 1, 30);
      EXIT(StartingDatePrice);
    END;

    LOCAL PROCEDURE GetQtyPerUnitOfMeasureOfBasketItem@1100528865() : Decimal;
    BEGIN
      IF ClientIsAvailable THEN
        EXIT(ClientBasketItem.QtyPerUnitOfMeasure)
      ELSE
        EXIT(ServerBasketItem.QtyPerUnitOfMeasure);
    END;

    LOCAL PROCEDURE GetPriceIDOfBasketItem@1100528868() : Code[10];
    VAR
      PriceID@1100528400 : Code[100];
    BEGIN
      IF ClientIsAvailable THEN
        PriceID := ClientBasketItem.PriceId
      ELSE
        PriceID := ServerBasketItem.PriceId;
      PriceID := COPYSTR(PriceID, 1, 10);
      EXIT(PriceID);
    END;

    LOCAL PROCEDURE GetGrossPriceOfBasketItem@1100528869() : Decimal;
    BEGIN
      IF ClientIsAvailable THEN
        EXIT(ClientBasketItem.GrossPrice)
      ELSE
        EXIT(ServerBasketItem.GrossPrice);
    END;

    LOCAL PROCEDURE GetNetPriceOfBasketItem@1100528500() : Decimal;
    BEGIN
      //C038538
      IF ClientIsAvailable THEN
        EXIT(ClientBasketItem.NetPrice)
      ELSE
        EXIT(ServerBasketItem.NetPrice);
    END;

    LOCAL PROCEDURE GetQuantityPerPriceOfBasketItem@1100528870() : Decimal;
    BEGIN
      IF ClientIsAvailable THEN
        EXIT(ClientBasketItem.QuantityPerPrice)
      ELSE
        EXIT(ServerBasketItem.QuantityPerPrice);
    END;

    LOCAL PROCEDURE GetTradeItemGuidOfBasketItem@1100528415() : Text[36];
    VAR
      TradeItemGuid@1100528400 : Text;
    BEGIN
      IF ClientIsAvailable THEN
        TradeItemGuid := RemoveBracesFromGuid(ClientBasketItem.TradeItemGuid)
      ELSE
        TradeItemGuid := RemoveBracesFromGuid(ServerBasketItem.TradeItemGuid);
      TradeItemGuid := COPYSTR(TradeItemGuid, 1, 36);
      EXIT(TradeItemGuid);
    END;

    LOCAL PROCEDURE GetProductIDGuidOfBasketItem@1100528421() : Text[36];
    VAR
      ProductIdGuid@1100528400 : Text;
    BEGIN
      IF ClientIsAvailable THEN
        ProductIdGuid := RemoveBracesFromGuid(ClientBasketItem.ProductIdGuid)
      ELSE
        ProductIdGuid := RemoveBracesFromGuid(ServerBasketItem.ProductIdGuid);
      ProductIdGuid := COPYSTR(ProductIdGuid, 1, 36);
      EXIT(ProductIdGuid);
    END;

    LOCAL PROCEDURE GetStatusCodeOfBasketItem@1100528420() : Code[10];
    VAR
      StatusCode@1100528400 : Code[100];
    BEGIN
      //84E = new product, 94E = deprecated, 130 = Expired
      IF ClientIsAvailable THEN
        StatusCode := ClientBasketItem.StatusCode
      ELSE
        StatusCode := ServerBasketItem.StatusCode;
      StatusCode := COPYSTR(StatusCode, 1, 10);
      EXIT(StatusCode)
    END;

    LOCAL PROCEDURE GetSuccessorGTINOfBasketItem@1100528419() : Code[20];
    VAR
      SuccessorGTIN@1100528400 : Code[100];
    BEGIN
      //Name of DotNet function is not correct.
      //It returns content of tag SuccessorGTIN of TradeItemModel.
      IF ClientIsAvailable THEN
        SuccessorGTIN := ClientBasketItem.SubstitutionByGtin
      ELSE
        SuccessorGTIN := ServerBasketItem.SubstitutionByGtin;
      SuccessorGTIN := COPYSTR(SuccessorGTIN, 1, 20);
      EXIT(SuccessorGTIN);
    END;

    LOCAL PROCEDURE GetSuccessorTradeItemCodeOfBasketItem@1100528418() : Code[20];
    VAR
      SuccessorTradeItemCode@1100528400 : Code[100];
    BEGIN
      //Name of DotNet function is not correct.
      //It returns content of tag SuccessorTradeItemCode of TradeItemModel.
      IF ClientIsAvailable THEN
        SuccessorTradeItemCode := ClientBasketItem.SubstitutionByProductcode
      ELSE
        SuccessorTradeItemCode := ServerBasketItem.SubstitutionByProductcode;
      SuccessorTradeItemCode := COPYSTR(SuccessorTradeItemCode, 1, 20);
      EXIT(SuccessorTradeItemCode);
    END;

    LOCAL PROCEDURE RemoveBracesFromGuid@1100528403(OriginalGuid@1100528400 : Text) ResultingGuid : Text;
    BEGIN
      IF OriginalGuid <> '' THEN
        ResultingGuid := DELCHR(OriginalGuid, '<>', '{}');
    END;

    LOCAL PROCEDURE ClientIsAvailable@1100528401() : Boolean;
    VAR
      FileManagement@1100528400 : Codeunit 419;
    BEGIN
      IF NOT ClientAvailableHasBeenFilled THEN BEGIN
        ClientAvailable := FileManagement.ClientAvailable;
        ClientAvailableHasBeenFilled := TRUE;
      END;

      EXIT(ClientAvailable)
    END;

    PROCEDURE SetClientBasketItem@1100528417(ClientBasketItem2@1100528401 : DotNet "'Fps.WebshopBasketConnector, Version=1.0.0.2, Culture=neutral, PublicKeyToken=024bd013665211e9'.Fps.WebshopBasketConnector.BasketItem" RUNONCLIENT);
    BEGIN
      // This function makes it possible to write test code for the function UpdateTradeItemDataAndPriceHistory.
      IF ClientIsAvailable THEN
        ClientBasketItem := ClientBasketItem2;
    END;

    LOCAL PROCEDURE ConvertNetPriceToGrossPrice@1100528501(VAR TradeItem@1100528501 : Record 11012317;GrossPrice@1100528502 : Decimal;NetPrice@1100528503 : Decimal);
    VAR
      EtimVendor@1100528500 : Record 11012304;
    BEGIN
      //C038538
      IF NOT EtimVendor.GET(TradeItem.Vendor) THEN EtimVendor.INIT;
      IF EtimVendor."Alternative Vendor Code" <> '' THEN
        IF NOT EtimVendor.GET(EtimVendor."Alternative Vendor Code") THEN EtimVendor.INIT;
      IF EtimVendor.Code = '8714253035000' THEN BEGIN
        //db, 30-11-18: Oosterberg levert voor sommige artikelen een nettoprijs aan zonder brutoprijs
        //deze nettoprijs is beslist geen inkoopprijs, maar een adviesprijs en dient als brutoprijs opgevat te worden.
        IF (GrossPrice = 0) AND (NetPrice <> 0) THEN BEGIN
          TradeItem."Gross Price" := NetPrice;
          TradeItem."Net Price" := GrossPrice;
        END;
      END;
    END;

    LOCAL PROCEDURE TradeItemGuidIsValid@1100528424(TradeItemGuid@1100528400 : Text[36]) : Boolean;
    VAR
      TradeItemGuid2@1100528401 : GUID;
    BEGIN
      IF EVALUATE(TradeItemGuid2, TradeItemGuid) THEN
        EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetCBSCodeOfBasketItem@1100530700() : Code[20];
    VAR
      CBSCode@1100528400 : Code[100];
    BEGIN
      IF ClientIsAvailable THEN
        CBSCode := ClientBasketItem.CBSNumber
      ELSE
        CBSCode := ServerBasketItem.CBSNumber;
      CBSCode := COPYSTR(CBSCode, 1, 20);
      EXIT(CBSCode);
    END;

    PROCEDURE GetMarkedItemsForAssistEdit@1100528900(VAR TradeItem@1100528900 : Record 11012317);
    BEGIN
      TradeItem.COPY(MarkedTradeItem);  //C060176
    END;

    BEGIN
    END.
  }
}

