OBJECT Codeunit 5458 Graph Collection Mgt - Contact
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      JSONManagement@1000 : Codeunit 5459;
      WebsiteType@1003 : 'Other,Home,Work,Blog,Profile';
      PhoneType@1002 : 'Home,Business,Mobile,Other,Assistant,HomeFax,BusinessFax,OtherFax,Pager,Radio';
      AddressType@1004 : 'Unknown,Home,Business,Other';
      BusinessType@1005 : 'Company,Individual';
      FlagStatusOption@1001 : 'NotFlagged,Complete,Flagged';
      PropertyIdErr@1006 : TextConst '@@@="%1 and %2 are a string like: ''Integer {47ac1412-279b-41cb-891e-58904a94a48b} Name IsCustomer'' ";ENU=The PropertyId is not correct. Expected: %1, Actual %2.;NOR=PropertyId er ikke riktig. Forventet %1, faktisk %2.';
      BusinessTypePropertyIdTxt@1007 : TextConst '@@@={Locked};ENU=String {bdba944b-fc2b-47a1-8ba4-cafc4ae13ea2} Name BusinessType;NOR=String {bdba944b-fc2b-47a1-8ba4-cafc4ae13ea2} Name BusinessType';
      IsCustomerPropertyIdTxt@1008 : TextConst '@@@={Locked};ENU=Integer {47ac1412-279b-41cb-891e-58904a94a48b} Name IsCustomer;NOR=Integer {47ac1412-279b-41cb-891e-58904a94a48b} Name IsCustomer';
      IsVendorPropertyIdTxt@1009 : TextConst '@@@={Locked};ENU=Integer {ccf57c46-c10e-41bb-b8c5-362b185d2f98} Name IsVendor;NOR=Integer {ccf57c46-c10e-41bb-b8c5-362b185d2f98} Name IsVendor';
      IsBankPropertyIdTxt@1010 : TextConst '@@@={Locked};ENU=Integer {a8ef117a-16d9-4cc6-965a-d2fbe0177e61} Name IsBank;NOR=Integer {a8ef117a-16d9-4cc6-965a-d2fbe0177e61} Name IsBank';
      IsNavCreatedPropertyIdTxt@1014 : TextConst '@@@={Locked};ENU=Integer {6023a623-3b6c-492d-9ef5-811850c088ac} Name IsNavCreated;NOR=Integer {6023a623-3b6c-492d-9ef5-811850c088ac} Name IsNavCreated';
      IsLeadPropertyIdTxt@1011 : TextConst '@@@={Locked};ENU=Integer {37829b75-e5e4-4582-ae12-36f754e4bd7b} Name IsLead;NOR=Integer {37829b75-e5e4-4582-ae12-36f754e4bd7b} Name IsLead';
      IsContactPropertyIdTxt@1012 : TextConst '@@@={Locked};ENU=Integer {f4be2302-782e-483d-8ba4-26fb6535f665} Name IsContact;NOR=Integer {f4be2302-782e-483d-8ba4-26fb6535f665} Name IsContact';
      IsPartnerPropertyIdTxt@1013 : TextConst '@@@={Locked};ENU=Integer {65ebabde-6946-455f-b918-a88ee36182a9} Name IsPartner;NOR=Integer {65ebabde-6946-455f-b918-a88ee36182a9} Name IsPartner';
      NavIntegrationIdTxt@1015 : TextConst '@@@={Locked};ENU=String {d048f561-4dd0-443c-a8d8-f397fb74f1df} Name NavIntegrationId;NOR=String {d048f561-4dd0-443c-a8d8-f397fb74f1df} Name NavIntegrationId';

    [External]
    PROCEDURE GetEmailAddress@6(Index@1001 : Integer;VAR Name@1002 : Text;VAR Address@1003 : Text);
    VAR
      JObject@1007 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      CLEAR(Name);
      CLEAR(Address);
      IF Index >= JSONManagement.GetCollectionCount THEN
        EXIT;

      JSONManagement.GetJObjectFromCollectionByIndex(JObject,Index);
      JSONManagement.GetStringPropertyValueFromJObjectByName(JObject,'Name',Name);
      JSONManagement.GetStringPropertyValueFromJObjectByName(JObject,'Address',Address);
    END;

    [External]
    PROCEDURE AddEmailAddress@5(Name@1000 : Text;Address@1001 : Text);
    VAR
      JObject@1002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      IF Address = '' THEN
        EXIT;

      JObject := JObject.JObject;
      JSONManagement.AddJPropertyToJObject(JObject,'Name',Name);
      JSONManagement.AddJPropertyToJObject(JObject,'Address',Address);
      JSONManagement.AddJObjectToCollection(JObject);
    END;

    [External]
    PROCEDURE UpdateEmailAddress@76(EmailAddressesString@1003 : Text;Index@1002 : Integer;Address@1000 : Text) : Text;
    VAR
      JObject@1001 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      JSONManagement.InitializeCollection(EmailAddressesString);
      IF Index > JSONManagement.GetCollectionCount THEN // cannot add where index would leave empty slots.
        EXIT(EmailAddressesString);

      IF JSONManagement.GetJObjectFromCollectionByIndex(JObject,Index) THEN BEGIN
        JSONManagement.ReplaceOrAddJPropertyInJObject(JObject,'Name','');
        JSONManagement.ReplaceOrAddJPropertyInJObject(JObject,'Address',Address)
      END ELSE
        AddEmailAddress('',Address);

      EXIT(JSONManagement.WriteCollectionToString);
    END;

    [External]
    PROCEDURE GetWebsiteByIndex@8(Index@1000 : Integer;VAR Type@1004 : Option;VAR Address@1003 : Text;VAR DisplayName@1002 : Text;VAR Name@1001 : Text);
    VAR
      JObject@1007 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      IF Index >= JSONManagement.GetCollectionCount THEN
        EXIT;

      JSONManagement.GetJObjectFromCollectionByIndex(JObject,Index);
      JSONManagement.GetEnumPropertyValueFromJObjectByName(JObject,'Type',Type);
      JSONManagement.GetStringPropertyValueFromJObjectByName(JObject,'Address',Address);
      JSONManagement.GetStringPropertyValueFromJObjectByName(JObject,'DisplayName',DisplayName);
      JSONManagement.GetStringPropertyValueFromJObjectByName(JObject,'Name',Name);
    END;

    LOCAL PROCEDURE GetWebsiteByType@81(Type@1003 : Option;VAR Address@1002 : Text;VAR DisplayName@1001 : Text;VAR Name@1000 : Text);
    VAR
      JObject@1004 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      WebsiteType := Type;
      IF NOT JSONManagement.GetJObjectFromCollectionByPropertyValue(JObject,'Type',FORMAT(WebsiteType,0,0)) THEN
        EXIT;
      JSONManagement.GetStringPropertyValueFromJObjectByName(JObject,'Address',Address);
      JSONManagement.GetStringPropertyValueFromJObjectByName(JObject,'DisplayName',DisplayName);
      JSONManagement.GetStringPropertyValueFromJObjectByName(JObject,'Name',Name);
    END;

    [External]
    PROCEDURE AddWebsite@10(Type@1000 : Option;Address@1001 : Text;DisplayName@1002 : Text;Name@1003 : Text);
    VAR
      JObject@1004 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      IF Address = '' THEN
        EXIT;
      JObject := JObject.JObject;
      WebsiteType := Type;
      JSONManagement.AddJPropertyToJObject(JObject,'Type',FORMAT(WebsiteType,0,0));
      JSONManagement.AddJPropertyToJObject(JObject,'Address',Address);
      JSONManagement.AddJPropertyToJObject(JObject,'DisplayName',DisplayName);
      JSONManagement.AddJPropertyToJObject(JObject,'Name',Name);
      JSONManagement.AddJObjectToCollection(JObject);
    END;

    [External]
    PROCEDURE UpdateWebsite@78(Type@1000 : Option;Address@1001 : Text);
    VAR
      JObject@1004 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      WebsiteType := Type;
      IF NOT JSONManagement.GetJObjectFromCollectionByPropertyValue(JObject,'Type',FORMAT(WebsiteType,0,0)) THEN BEGIN
        IF Address = '' THEN
          EXIT;
        JObject := JObject.JObject;
        JSONManagement.AddJObjectToCollection(JObject);
      END ELSE
        JObject.Remove('Type');
      JSONManagement.ReplaceOrAddJPropertyInJObject(JObject,'Address',Address);
    END;

    [External]
    PROCEDURE GetImAddress@17(Index@1000 : Integer;VAR ImAddress@1001 : Text);
    VAR
      JObject@1004 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      IF Index >= JSONManagement.GetCollectionCount THEN
        EXIT;

      JSONManagement.GetJObjectFromCollectionByIndex(JObject,Index);
      JSONManagement.GetStringValueFromJObject(JObject,ImAddress);
    END;

    [External]
    PROCEDURE AddImAddress@18(ImAddress@1000 : Text);
    VAR
      JObject@1001 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      IF ImAddress = '' THEN
        EXIT;

      JObject := JObject.JObject;
      JSONManagement.AddJValueToJObject(JObject,ImAddress);
      JSONManagement.AddJObjectToCollection(JObject);
    END;

    [External]
    PROCEDURE GetPhoneByIndex@26(Index@1000 : Integer;VAR Type@1001 : Option;VAR Number@1002 : Text);
    VAR
      JObject@1005 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      IF Index >= JSONManagement.GetCollectionCount THEN
        EXIT;

      JSONManagement.GetJObjectFromCollectionByIndex(JObject,Index);
      JSONManagement.GetEnumPropertyValueFromJObjectByName(JObject,'Type',Type);
      JSONManagement.GetStringPropertyValueFromJObjectByName(JObject,'Number',Number);
    END;

    [External]
    PROCEDURE GetPhoneByType@60(Type@1001 : Option;VAR Number@1002 : Text);
    VAR
      JObject@1005 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      PhoneType := Type;
      IF NOT JSONManagement.GetJObjectFromCollectionByPropertyValue(JObject,'Type',FORMAT(PhoneType,0,0)) THEN
        EXIT;

      JSONManagement.GetStringPropertyValueFromJObjectByName(JObject,'Number',Number);
    END;

    [External]
    PROCEDURE AddPhone@27(Type@1001 : Option;Number@1000 : Text);
    VAR
      JObject@1002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      PhoneType := Type;
      IF Number = '' THEN
        EXIT;

      JObject := JObject.JObject;
      JSONManagement.AddJPropertyToJObject(JObject,'Type',FORMAT(PhoneType,0,0));
      JSONManagement.AddJPropertyToJObject(JObject,'Number',Number);
      JSONManagement.AddJObjectToCollection(JObject);
    END;

    [External]
    PROCEDURE GetPostalAddressByIndex@23(Index@1001 : Integer;VAR Type@1002 : Option;VAR PostOfficeBox@1003 : Text;VAR Street@1000 : Text;VAR City@1004 : Text;VAR State@1008 : Text;VAR CountryOrRegion@1009 : Text;VAR PostalCode@1010 : Text);
    VAR
      JObject@1007 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      IF Index >= JSONManagement.GetCollectionCount THEN
        EXIT;

      JSONManagement.GetJObjectFromCollectionByIndex(JObject,Index);
      JSONManagement.GetEnumPropertyValueFromJObjectByName(JObject,'Type',Type);
      JSONManagement.GetStringPropertyValueFromJObjectByName(JObject,'PostOfficeBox',PostOfficeBox);
      JSONManagement.GetStringPropertyValueFromJObjectByName(JObject,'Street',Street);
      JSONManagement.GetStringPropertyValueFromJObjectByName(JObject,'City',City);
      JSONManagement.GetStringPropertyValueFromJObjectByName(JObject,'State',State);
      JSONManagement.GetStringPropertyValueFromJObjectByName(JObject,'CountryOrRegion',CountryOrRegion);
      JSONManagement.GetStringPropertyValueFromJObjectByName(JObject,'PostalCode',PostalCode);
    END;

    LOCAL PROCEDURE GetPostalAddressByType@41(Type@1005 : Option;VAR Address@1009 : Text[100];VAR Address2@1008 : Text[50];VAR City@1004 : Text[30];VAR County@1003 : Text[30];VAR CountryRegionCode@1002 : Code[10];VAR PostCode@1001 : Code[20]);
    VAR
      JObject@1006 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      value@1007 : Text;
    BEGIN
      AddressType := Type;
      IF NOT JSONManagement.GetJObjectFromCollectionByPropertyValue(JObject,'Type',FORMAT(AddressType,0,0)) THEN
        EXIT;

      JSONManagement.GetStringPropertyValueFromJObjectByName(JObject,'Street',value);
      SplitStreet(value,Address,Address2);
      JSONManagement.GetStringPropertyValueFromJObjectByName(JObject,'City',value);
      City := COPYSTR(value,1,MAXSTRLEN(value));
      JSONManagement.GetStringPropertyValueFromJObjectByName(JObject,'State',value);
      County := COPYSTR(value,1,MAXSTRLEN(value));
      JSONManagement.GetStringPropertyValueFromJObjectByName(JObject,'CountryOrRegion',value);
      CountryRegionCode := FindCountryRegionCode(value);
      JSONManagement.GetStringPropertyValueFromJObjectByName(JObject,'PostalCode',value);
      PostCode := COPYSTR(value,1,MAXSTRLEN(PostCode));
    END;

    [External]
    PROCEDURE AddPostalAddress@20(Type@1007 : Option;PostOfficeBox@1006 : Text;Street@1005 : Text;City@1004 : Text;State@1002 : Text;CountryOrRegion@1001 : Text;PostalCode@1000 : Text);
    VAR
      JObject@1003 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      JObject := JObject.JObject;
      AddressType := Type;
      JSONManagement.AddJPropertyToJObject(JObject,'Type',FORMAT(AddressType,0,0));
      JSONManagement.AddJPropertyToJObject(JObject,'PostOfficeBox',PostOfficeBox);
      JSONManagement.AddJPropertyToJObject(JObject,'Street',Street);
      JSONManagement.AddJPropertyToJObject(JObject,'City',City);
      JSONManagement.AddJPropertyToJObject(JObject,'State',State);
      JSONManagement.AddJPropertyToJObject(JObject,'CountryOrRegion',CountryOrRegion);
      JSONManagement.AddJPropertyToJObject(JObject,'PostalCode',PostalCode);
      JSONManagement.AddJObjectToCollection(JObject);
    END;

    [External]
    PROCEDURE GetChildren@11(Index@1000 : Integer;VAR Child@1001 : Text);
    VAR
      JObject@1004 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      IF Index >= JSONManagement.GetCollectionCount THEN
        EXIT;

      JSONManagement.GetJObjectFromCollectionByIndex(JObject,Index);
      JSONManagement.GetStringValueFromJObject(JObject,Child);
    END;

    [External]
    PROCEDURE AddChildren@9(Child@1000 : Text);
    VAR
      JObject@1001 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      IF Child = '' THEN
        EXIT;

      JObject := JObject.JObject;
      JSONManagement.AddJValueToJObject(JObject,Child);
      JSONManagement.AddJObjectToCollection(JObject);
    END;

    [External]
    PROCEDURE GetFlag@30(VAR CompletedDateTime@1000 : Text;VAR CompletedTimeZone@1007 : Text;VAR DueDateTime@1001 : Text;VAR DueTimeZone@1008 : Text;VAR StartDateTime@1002 : Text;VAR StartTimeZone@1009 : Text;VAR FlagStatus@1003 : Option);
    VAR
      JsonObject@1004 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      JObjectVariant@1010 : Variant;
    BEGIN
      JSONManagement.GetJSONObject(JsonObject);
      IF JSONManagement.GetPropertyValueFromJObjectByName(JsonObject,'CompletedDateTime',JObjectVariant) THEN BEGIN
        JSONManagement.GetStringPropertyValueFromJObjectByName(JObjectVariant,'CompletedDateTime',CompletedDateTime);
        JSONManagement.GetStringPropertyValueFromJObjectByName(JObjectVariant,'CompletedTimeZone',CompletedTimeZone);
      END;
      IF JSONManagement.GetPropertyValueFromJObjectByName(JsonObject,'DueDateTime',JObjectVariant) THEN BEGIN;
        JSONManagement.GetStringPropertyValueFromJObjectByName(JObjectVariant,'DateTime',DueDateTime);
        JSONManagement.GetStringPropertyValueFromJObjectByName(JObjectVariant,'TimeZone',DueTimeZone);
      END;
      IF JSONManagement.GetPropertyValueFromJObjectByName(JsonObject,'StartDateTime',JObjectVariant) THEN BEGIN;
        JSONManagement.GetStringPropertyValueFromJObjectByName(JObjectVariant,'DateTime',StartDateTime);
        JSONManagement.GetStringPropertyValueFromJObjectByName(JObjectVariant,'TimeZone',StartTimeZone);
      END;

      JSONManagement.GetEnumPropertyValueFromJObjectByName(JsonObject,'FlagStatus',FlagStatusOption);
      FlagStatus := FlagStatusOption;
    END;

    [External]
    PROCEDURE AddFlag@31(CompletedDateTime@1007 : Text;CompletedTimeZone@1006 : Text;DueDateTime@1005 : Text;DueTimeZone@1003 : Text;StartDateTime@1002 : Text;StartTimeZone@1001 : Text;FlagStatus@1000 : Option);
    VAR
      JObject@1004 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      JsonObject@1008 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      JSONManagement.GetJSONObject(JsonObject);

      JObject := JObject.JObject;
      JSONManagement.AddJPropertyToJObject(JObject,'DateTime',CompletedDateTime);
      JSONManagement.AddJPropertyToJObject(JObject,'TimeZone',CompletedTimeZone);
      JSONManagement.AddJObjectToJObject(JsonObject,'CompletedDateTime',JObject);
      JObject := JObject.JObject;

      JSONManagement.AddJPropertyToJObject(JObject,'DateTime',DueDateTime);
      JSONManagement.AddJPropertyToJObject(JObject,'TimeZone',DueTimeZone);
      JSONManagement.AddJObjectToJObject(JsonObject,'DueDateTime',JObject);
      JObject := JObject.JObject;
      JSONManagement.AddJPropertyToJObject(JObject,'DateTime',StartDateTime);
      JSONManagement.AddJPropertyToJObject(JObject,'TimeZone',StartTimeZone);
      JSONManagement.AddJObjectToJObject(JsonObject,'StartDateTime',JObject);
      FlagStatusOption := FlagStatus;
      JSONManagement.AddJPropertyToJObject(JsonObject,'FlagStatus',FORMAT(FlagStatusOption,0,0));
    END;

    [External]
    PROCEDURE GetCategory@15(Index@1001 : Integer;VAR Category@1002 : Text);
    VAR
      JObject@1007 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      IF Index >= JSONManagement.GetCollectionCount THEN
        EXIT;

      JSONManagement.GetJObjectFromCollectionByIndex(JObject,Index);
      JSONManagement.GetStringValueFromJObject(JObject,Category);
    END;

    [External]
    PROCEDURE AddCategory@12(Category@1000 : Text);
    VAR
      JObject@1003 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      JObject := JObject.JObject;
      JSONManagement.AddJValueToJObject(JObject,Category);
      JSONManagement.AddJObjectToCollection(JObject);
    END;

    LOCAL PROCEDURE HasPostalAddress@42(Type@1000 : Option) : Boolean;
    VAR
      JObject@1001 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      AddressType := Type;
      EXIT(JSONManagement.GetJObjectFromCollectionByPropertyValue(JObject,'Type',FORMAT(AddressType,0,0)))
    END;

    [External]
    PROCEDURE HasHomeAddressOrPhone@43(PostalAddressesString@1000 : Text;PhonesString@1002 : Text;WebsitesString@1006 : Text) : Boolean;
    VAR
      HasAddress@1004 : Boolean;
      HasPhones@1007 : Boolean;
    BEGIN
      JSONManagement.InitializeCollection(PostalAddressesString);
      HasAddress := HasPostalAddress(AddressType::Home);
      JSONManagement.InitializeCollection(PhonesString);
      HasPhones := HasPhone(PhoneType::Home) OR HasPhone(PhoneType::HomeFax);
      JSONManagement.InitializeCollection(WebsitesString);
      EXIT(HasAddress OR HasPhones OR HasWebsite(WebsiteType::Home));
    END;

    [External]
    PROCEDURE HasBusinessAddressOrPhone@53(PostalAddressesString@1000 : Text;PhonesString@1002 : Text;WebsitesString@1006 : Text) : Boolean;
    VAR
      HasAddress@1001 : Boolean;
      HasPhones@1007 : Boolean;
    BEGIN
      JSONManagement.InitializeCollection(PostalAddressesString);
      HasAddress := HasPostalAddress(AddressType::Business);
      JSONManagement.InitializeCollection(PhonesString);
      HasPhones := HasPhone(PhoneType::Business) OR HasPhone(PhoneType::BusinessFax);
      JSONManagement.InitializeCollection(WebsitesString);
      EXIT(HasAddress OR HasPhones OR HasWebsite(WebsiteType::Work));
    END;

    [External]
    PROCEDURE HasBusinessAddress@100(PostalAddressesString@1000 : Text) : Boolean;
    BEGIN
      JSONManagement.InitializeCollection(PostalAddressesString);
      EXIT(HasPostalAddress(AddressType::Business));
    END;

    [External]
    PROCEDURE HasOtherAddressOrPhone@75(PostalAddressesString@1000 : Text;PhonesString@1002 : Text;WebsitesString@1006 : Text) : Boolean;
    VAR
      HasAddress@1001 : Boolean;
      HasPhones@1007 : Boolean;
    BEGIN
      JSONManagement.InitializeCollection(PostalAddressesString);
      HasAddress := HasPostalAddress(AddressType::Other);
      JSONManagement.InitializeCollection(PhonesString);
      HasPhones := HasPhone(PhoneType::Other) OR HasPhone(PhoneType::OtherFax);
      JSONManagement.InitializeCollection(WebsitesString);
      EXIT(HasAddress OR HasPhones OR HasWebsite(WebsiteType::Other));
    END;

    LOCAL PROCEDURE UpdatePostalAddress@56(Type@1010 : Option;Address@1005 : Text[100];Address2@1007 : Text[50];City@1004 : Text[30];County@1003 : Text[30];CountryRegionCode@1002 : Code[10];PostCode@1001 : Code[20]);
    VAR
      JObject@1006 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      AddressType := Type;
      IF (Address = '') AND (Address2 = '') AND (City = '') AND (County = '') AND (PostCode = '') THEN BEGIN
        IF JSONManagement.GetJObjectFromCollectionByPropertyValue(JObject,'Type',FORMAT(AddressType,0,0)) THEN
          JObject.Remove;
        EXIT;
      END;

      IF NOT JSONManagement.GetJObjectFromCollectionByPropertyValue(JObject,'Type',FORMAT(AddressType,0,0)) THEN BEGIN
        JObject := JObject.JObject;
        JSONManagement.AddJPropertyToJObject(JObject,'Type',FORMAT(AddressType,0,0));
        JSONManagement.AddJObjectToCollection(JObject);
        JSONManagement.GetJObjectFromCollectionByPropertyValue(JObject,'Type',FORMAT(AddressType,0,0));
      END;
      JSONManagement.ReplaceOrAddJPropertyInJObject(JObject,'Street',ConcatenateStreet(Address,Address2));
      JSONManagement.ReplaceOrAddJPropertyInJObject(JObject,'City',City);
      JSONManagement.ReplaceOrAddJPropertyInJObject(JObject,'State',County);
      JSONManagement.ReplaceOrAddJPropertyInJObject(JObject,'CountryOrRegion',CountryRegionCode);
      JSONManagement.ReplaceOrAddJPropertyInJObject(JObject,'PostalCode',PostCode);
    END;

    [External]
    PROCEDURE UpdateHomeAddress@1(PostalAddressesString@1000 : Text;Address@1007 : Text[100];Address2@1005 : Text[50];City@1004 : Text[30];County@1003 : Text[30];CountryRegionCode@1002 : Code[10];PostCode@1001 : Code[20]) : Text;
    BEGIN
      JSONManagement.InitializeCollection(PostalAddressesString);
      UpdatePostalAddress(AddressType::Home,Address,Address2,City,County,CountryRegionCode,PostCode);
      EXIT(JSONManagement.WriteCollectionToString);
    END;

    [External]
    PROCEDURE UpdateBusinessAddress@61(PostalAddressesString@1000 : Text;Address@1007 : Text[100];Address2@1005 : Text[50];City@1004 : Text[30];County@1003 : Text[30];CountryRegionCode@1002 : Code[10];PostCode@1001 : Code[20]) : Text;
    BEGIN
      JSONManagement.InitializeCollection(PostalAddressesString);
      UpdatePostalAddress(AddressType::Business,Address,Address2,City,County,CountryRegionCode,PostCode);
      EXIT(JSONManagement.WriteCollectionToString);
    END;

    [External]
    PROCEDURE UpdateOtherAddress@64(PostalAddressesString@1000 : Text;Address@1007 : Text[100];Address2@1005 : Text[50];City@1004 : Text[30];County@1003 : Text[30];CountryRegionCode@1002 : Code[10];PostCode@1001 : Code[20]) : Text;
    BEGIN
      JSONManagement.InitializeCollection(PostalAddressesString);
      UpdatePostalAddress(AddressType::Other,Address,Address2,City,County,CountryRegionCode,PostCode);
      EXIT(JSONManagement.WriteCollectionToString);
    END;

    [External]
    PROCEDURE GetHomeAddress@38(PostalAddressesString@1005 : Text;VAR Address@1007 : Text[100];VAR Address2@1004 : Text[50];VAR City@1003 : Text[30];VAR County@1002 : Text[30];VAR CountryRegionCode@1001 : Code[10];VAR PostCode@1000 : Code[20]);
    BEGIN
      JSONManagement.InitializeCollection(PostalAddressesString);
      GetPostalAddressByType(AddressType::Home,Address,Address2,City,County,CountryRegionCode,PostCode);
    END;

    [External]
    PROCEDURE GetBusinessAddress@39(PostalAddressesString@1005 : Text;VAR Address@1007 : Text[100];VAR Address2@1004 : Text[50];VAR City@1003 : Text[30];VAR County@1002 : Text[30];VAR CountryRegionCode@1001 : Code[10];VAR PostCode@1000 : Code[20]);
    BEGIN
      JSONManagement.InitializeCollection(PostalAddressesString);
      GetPostalAddressByType(AddressType::Business,Address,Address2,City,County,CountryRegionCode,PostCode);
    END;

    [External]
    PROCEDURE GetOtherAddress@40(PostalAddressesString@1005 : Text;VAR Address@1007 : Text[100];VAR Address2@1004 : Text[50];VAR City@1003 : Text[30];VAR County@1002 : Text[30];VAR CountryRegionCode@1001 : Code[10];VAR PostCode@1000 : Code[20]);
    BEGIN
      JSONManagement.InitializeCollection(PostalAddressesString);
      GetPostalAddressByType(AddressType::Other,Address,Address2,City,County,CountryRegionCode,PostCode);
    END;

    LOCAL PROCEDURE HasPhone@77(Type@1000 : Option) : Boolean;
    VAR
      JObject@1001 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      PhoneType := Type;
      EXIT(JSONManagement.GetJObjectFromCollectionByPropertyValue(JObject,'Type',FORMAT(PhoneType,0,0)));
    END;

    LOCAL PROCEDURE UpdatePhone@45(Type@1001 : Option;Number@1000 : Text);
    VAR
      JObject@1002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      PhoneType := Type;
      IF NOT JSONManagement.GetJObjectFromCollectionByPropertyValue(JObject,'Type',FORMAT(PhoneType,0,0)) THEN BEGIN
        IF Number = '' THEN
          EXIT;
        JObject := JObject.JObject;
        JSONManagement.AddJPropertyToJObject(JObject,'Type',FORMAT(PhoneType,0,0));
        JSONManagement.AddJObjectToCollection(JObject);
        JSONManagement.GetJObjectFromCollectionByPropertyValue(JObject,'Type',FORMAT(PhoneType,0,0))
      END;
      JSONManagement.ReplaceOrAddJPropertyInJObject(JObject,'Number',Number);
    END;

    [External]
    PROCEDURE UpdateHomePhone@46(PhonesString@1000 : Text;Number@1001 : Text) : Text;
    BEGIN
      JSONManagement.InitializeCollection(PhonesString);
      UpdatePhone(PhoneType::Home,Number);
      EXIT(JSONManagement.WriteCollectionToString);
    END;

    [External]
    PROCEDURE UpdateBusinessPhone@48(PhonesString@1001 : Text;Number@1000 : Text) : Text;
    BEGIN
      JSONManagement.InitializeCollection(PhonesString);
      UpdatePhone(PhoneType::Business,Number);
      EXIT(JSONManagement.WriteCollectionToString);
    END;

    [External]
    PROCEDURE UpdateMobilePhone@49(PhonesString@1001 : Text;Number@1000 : Text) : Text;
    BEGIN
      JSONManagement.InitializeCollection(PhonesString);
      UpdatePhone(PhoneType::Mobile,Number);
      EXIT(JSONManagement.WriteCollectionToString);
    END;

    [External]
    PROCEDURE UpdateOtherPhone@50(PhonesString@1001 : Text;Number@1000 : Text) : Text;
    BEGIN
      JSONManagement.InitializeCollection(PhonesString);
      UpdatePhone(PhoneType::Other,Number);
      EXIT(JSONManagement.WriteCollectionToString);
    END;

    [External]
    PROCEDURE UpdateAssistantPhone@52(PhonesString@1001 : Text;Number@1000 : Text) : Text;
    BEGIN
      JSONManagement.InitializeCollection(PhonesString);
      UpdatePhone(PhoneType::Assistant,Number);
      EXIT(JSONManagement.WriteCollectionToString);
    END;

    [External]
    PROCEDURE UpdateHomeFaxPhone@54(PhonesString@1001 : Text;Number@1000 : Text) : Text;
    BEGIN
      JSONManagement.InitializeCollection(PhonesString);
      UpdatePhone(PhoneType::HomeFax,Number);
      EXIT(JSONManagement.WriteCollectionToString);
    END;

    [External]
    PROCEDURE UpdateBusinessFaxPhone@55(PhonesString@1001 : Text;Number@1000 : Text) : Text;
    BEGIN
      JSONManagement.InitializeCollection(PhonesString);
      UpdatePhone(PhoneType::BusinessFax,Number);
      EXIT(JSONManagement.WriteCollectionToString);
    END;

    [External]
    PROCEDURE UpdateOtherFaxPhone@57(PhonesString@1001 : Text;Number@1000 : Text) : Text;
    BEGIN
      JSONManagement.InitializeCollection(PhonesString);
      UpdatePhone(PhoneType::OtherFax,Number);
      EXIT(JSONManagement.WriteCollectionToString);
    END;

    [External]
    PROCEDURE UpdatePagerPhone@58(PhonesString@1001 : Text;Number@1000 : Text) : Text;
    BEGIN
      JSONManagement.InitializeCollection(PhonesString);
      UpdatePhone(PhoneType::Pager,Number);
      EXIT(JSONManagement.WriteCollectionToString);
    END;

    [External]
    PROCEDURE UpdateRadioPhone@59(PhonesString@1001 : Text;Number@1000 : Text) : Text;
    BEGIN
      JSONManagement.InitializeCollection(PhonesString);
      UpdatePhone(PhoneType::Radio,Number);
      EXIT(JSONManagement.WriteCollectionToString);
    END;

    [External]
    PROCEDURE GetHomePhone@74(PhonesString@1000 : Text;VAR Number@1001 : Text);
    BEGIN
      JSONManagement.InitializeCollection(PhonesString);
      GetPhoneByType(PhoneType::Home,Number);
    END;

    [External]
    PROCEDURE GetBusinessPhone@73(PhonesString@1001 : Text;VAR Number@1000 : Text);
    BEGIN
      JSONManagement.InitializeCollection(PhonesString);
      GetPhoneByType(PhoneType::Business,Number);
    END;

    [External]
    PROCEDURE GetMobilePhone@72(PhonesString@1001 : Text;VAR Number@1000 : Text);
    BEGIN
      JSONManagement.InitializeCollection(PhonesString);
      GetPhoneByType(PhoneType::Mobile,Number);
    END;

    [External]
    PROCEDURE GetOtherPhone@71(PhonesString@1001 : Text;VAR Number@1000 : Text);
    BEGIN
      JSONManagement.InitializeCollection(PhonesString);
      GetPhoneByType(PhoneType::Other,Number);
    END;

    [External]
    PROCEDURE GetAssistantPhone@70(PhonesString@1001 : Text;VAR Number@1000 : Text);
    BEGIN
      JSONManagement.InitializeCollection(PhonesString);
      GetPhoneByType(PhoneType::Assistant,Number);
    END;

    [External]
    PROCEDURE GetHomeFaxPhone@69(PhonesString@1001 : Text;VAR Number@1000 : Text);
    BEGIN
      JSONManagement.InitializeCollection(PhonesString);
      GetPhoneByType(PhoneType::HomeFax,Number);
    END;

    [External]
    PROCEDURE GetBusinessFaxPhone@68(PhonesString@1001 : Text;VAR Number@1000 : Text);
    BEGIN
      JSONManagement.InitializeCollection(PhonesString);
      GetPhoneByType(PhoneType::BusinessFax,Number);
    END;

    [External]
    PROCEDURE GetOtherFaxPhone@67(PhonesString@1001 : Text;VAR Number@1000 : Text);
    BEGIN
      JSONManagement.InitializeCollection(PhonesString);
      GetPhoneByType(PhoneType::OtherFax,Number);
    END;

    [External]
    PROCEDURE GetPagerPhone@66(PhonesString@1001 : Text;VAR Number@1000 : Text);
    BEGIN
      JSONManagement.InitializeCollection(PhonesString);
      GetPhoneByType(PhoneType::Pager,Number);
    END;

    [External]
    PROCEDURE GetRadioPhone@65(PhonesString@1001 : Text;VAR Number@1000 : Text);
    BEGIN
      JSONManagement.InitializeCollection(PhonesString);
      GetPhoneByType(PhoneType::Radio,Number);
    END;

    LOCAL PROCEDURE HasWebsite@89(Type@1002 : Option) : Boolean;
    VAR
      JObject@1001 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      WebsiteType := Type;
      EXIT(JSONManagement.GetJObjectFromCollectionByPropertyValue(JObject,'Type',FORMAT(WebsiteType,0,0)));
    END;

    [External]
    PROCEDURE GetWorkWebsite@79(WebsitesString@1000 : Text;VAR Address@1001 : Text[80]);
    VAR
      Name@1003 : Text;
      DisplayName@1004 : Text;
    BEGIN
      JSONManagement.InitializeCollection(WebsitesString);
      GetWebsiteByType(WebsiteType::Work,Address,Name,DisplayName);
    END;

    [External]
    PROCEDURE GetHomeWebsite@82(WebsitesString@1000 : Text;VAR Address@1001 : Text[80]);
    VAR
      Name@1003 : Text;
      DisplayName@1004 : Text;
    BEGIN
      JSONManagement.InitializeCollection(WebsitesString);
      GetWebsiteByType(WebsiteType::Home,Address,Name,DisplayName);
    END;

    [External]
    PROCEDURE UpdateWorkWebsite@80(WebsitesString@1001 : Text;Address@1000 : Text[80]) : Text;
    BEGIN
      JSONManagement.InitializeCollection(WebsitesString);
      UpdateWebsite(WebsiteType::Work,Address);
      EXIT(JSONManagement.WriteCollectionToString);
    END;

    [External]
    PROCEDURE UpdateHomeWebsite@85(WebsitesString@1001 : Text;Address@1000 : Text[80]) : Text;
    BEGIN
      JSONManagement.InitializeCollection(WebsitesString);
      UpdateWebsite(WebsiteType::Home,Address);
      EXIT(JSONManagement.WriteCollectionToString);
    END;

    [External]
    PROCEDURE HasBusinessType@3(BusinessTypeString@1000 : Text) : Boolean;
    BEGIN
      EXIT(HasExtendedProperty(BusinessTypeString,BusinessTypePropertyIdTxt));
    END;

    [TryFunction]
    [External]
    PROCEDURE TryGetBusinessTypeValue@7(BusinessTypeString@1000 : Text;VAR Value@1003 : Text);
    VAR
      JsonObject@1004 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      PropertyId@1002 : Text;
    BEGIN
      JSONManagement.InitializeObject(BusinessTypeString);
      JSONManagement.GetJSONObject(JsonObject);
      JSONManagement.GetStringPropertyValueFromJObjectByName(JsonObject,'PropertyId',PropertyId);
      IF NOT (PropertyId = BusinessTypePropertyIdTxt) THEN
        ERROR(PropertyIdErr,BusinessTypePropertyIdTxt,PropertyId);
      JSONManagement.GetStringPropertyValueFromJObjectByName(JsonObject,'Value',Value);
      EVALUATE(BusinessType,Value,0);
    END;

    [External]
    PROCEDURE GetBusinessType@33(BusinessTypeString@1001 : Text;VAR Type@1000 : Option);
    VAR
      JsonObject@1002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      PropertyId@1003 : Text;
    BEGIN
      JSONManagement.InitializeObject(BusinessTypeString);
      JSONManagement.GetJSONObject(JsonObject);
      IF JSONManagement.GetStringPropertyValueFromJObjectByName(JsonObject,'PropertyId',PropertyId) THEN
        IF PropertyId = BusinessTypePropertyIdTxt THEN BEGIN
          JSONManagement.GetEnumPropertyValueFromJObjectByName(JsonObject,'Value',BusinessType);
          Type := BusinessType;
          EXIT;
        END;

      Type := BusinessType::Individual;
    END;

    [External]
    PROCEDURE AddBusinessType@34(Type@1000 : Option) : Text;
    VAR
      JsonObject@1002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      JSONManagement.InitializeEmptyObject;
      JSONManagement.GetJSONObject(JsonObject);
      BusinessType := Type;
      JSONManagement.AddJPropertyToJObject(JsonObject,'PropertyId',BusinessTypePropertyIdTxt);
      JSONManagement.AddJPropertyToJObject(JsonObject,'Value',FORMAT(BusinessType,0,0));
      EXIT(JSONManagement.WriteObjectToString);
    END;

    LOCAL PROCEDURE HasExtendedProperty@14(ExtendedPropertyString@1000 : Text;ExpectedPropertyId@1001 : Text) : Boolean;
    VAR
      JsonObject@1003 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      PropertyId@1002 : Text;
    BEGIN
      JSONManagement.InitializeObject(ExtendedPropertyString);
      JSONManagement.GetJSONObject(JsonObject);
      IF JSONManagement.GetStringPropertyValueFromJObjectByName(JsonObject,'PropertyId',PropertyId) THEN
        EXIT(ExpectedPropertyId = PropertyId);
    END;

    LOCAL PROCEDURE GetExtendedPropertyBoolValue@16(ExtendedPropertyString@1001 : Text;ExpectedPropertyId@1000 : Text;VAR Value@1002 : Text);
    VAR
      JsonObject@1004 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      PropertyId@1003 : Text;
      BooleanValue@1005 : Boolean;
    BEGIN
      JSONManagement.InitializeObject(ExtendedPropertyString);
      JSONManagement.GetJSONObject(JsonObject);
      JSONManagement.GetStringPropertyValueFromJObjectByName(JsonObject,'PropertyId',PropertyId);
      IF NOT (PropertyId = ExpectedPropertyId) THEN
        ERROR(PropertyIdErr,ExpectedPropertyId,PropertyId);
      JSONManagement.GetStringPropertyValueFromJObjectByName(JsonObject,'Value',Value);
      EVALUATE(BooleanValue,Value,2);
    END;

    [External]
    PROCEDURE HasIsCustomer@13(IsCustomerString@1000 : Text) : Boolean;
    BEGIN
      EXIT(HasExtendedProperty(IsCustomerString,IsCustomerPropertyIdTxt));
    END;

    [External]
    PROCEDURE GetIsCustomer@83(IsCustomerString@1001 : Text) IsCustomer : Boolean;
    VAR
      JsonObject@1000 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      PropertyId@1003 : Text;
    BEGIN
      JSONManagement.InitializeObject(IsCustomerString);
      JSONManagement.GetJSONObject(JsonObject);

      IF JSONManagement.GetStringPropertyValueFromJObjectByName(JsonObject,'PropertyId',PropertyId) THEN
        IF PropertyId = IsCustomerPropertyIdTxt THEN BEGIN
          JSONManagement.GetBoolPropertyValueFromJObjectByName(JsonObject,'Value',IsCustomer);
          EXIT(IsCustomer);
        END;

      EXIT(FALSE);
    END;

    [TryFunction]
    [External]
    PROCEDURE TryGetIsCustomerValue@63(IsCustomerString@1000 : Text;VAR Value@1001 : Text);
    BEGIN
      GetExtendedPropertyBoolValue(IsCustomerString,IsCustomerPropertyIdTxt,Value);
    END;

    [External]
    PROCEDURE AddIsCustomer@47(IsCustomer@1000 : Boolean) : Text;
    VAR
      JsonObject@1001 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      JSONManagement.InitializeEmptyObject;
      JSONManagement.GetJSONObject(JsonObject);

      JSONManagement.AddJPropertyToJObject(JsonObject,'PropertyId',IsCustomerPropertyIdTxt);
      JSONManagement.AddJPropertyToJObject(JsonObject,'Value',FORMAT(IsCustomer,0,2));

      EXIT(JSONManagement.WriteObjectToString);
    END;

    [External]
    PROCEDURE HasIsVendor@21(IsVendorString@1000 : Text) : Boolean;
    BEGIN
      EXIT(HasExtendedProperty(IsVendorString,IsVendorPropertyIdTxt));
    END;

    [External]
    PROCEDURE GetIsVendor@92(IsVendorString@1001 : Text) IsVendor : Boolean;
    VAR
      JsonObject@1000 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      PropertyId@1003 : Text;
    BEGIN
      JSONManagement.InitializeObject(IsVendorString);
      JSONManagement.GetJSONObject(JsonObject);

      IF JSONManagement.GetStringPropertyValueFromJObjectByName(JsonObject,'PropertyId',PropertyId) THEN
        IF PropertyId = IsVendorPropertyIdTxt THEN BEGIN
          JSONManagement.GetBoolPropertyValueFromJObjectByName(JsonObject,'Value',IsVendor);
          EXIT(IsVendor);
        END;
      EXIT(FALSE);
    END;

    [TryFunction]
    [External]
    PROCEDURE TryGetIsVendorValue@19(IsVendorString@1000 : Text;VAR Value@1001 : Text);
    BEGIN
      GetExtendedPropertyBoolValue(IsVendorString,IsVendorPropertyIdTxt,Value);
    END;

    [External]
    PROCEDURE AddIsVendor@91(IsVendor@1000 : Boolean) : Text;
    VAR
      JsonObject@1001 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      JSONManagement.InitializeEmptyObject;
      JSONManagement.GetJSONObject(JsonObject);

      JSONManagement.AddJPropertyToJObject(JsonObject,'PropertyId',IsVendorPropertyIdTxt);
      JSONManagement.AddJPropertyToJObject(JsonObject,'Value',FORMAT(IsVendor,0,2));

      EXIT(JSONManagement.WriteObjectToString);
    END;

    [External]
    PROCEDURE HasIsBank@22(IsBankString@1000 : Text) : Boolean;
    BEGIN
      EXIT(HasExtendedProperty(IsBankString,IsBankPropertyIdTxt));
    END;

    [External]
    PROCEDURE GetIsBank@90(IsBankString@1001 : Text) IsBank : Boolean;
    VAR
      JsonObject@1000 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      PropertyId@1003 : Text;
    BEGIN
      JSONManagement.InitializeObject(IsBankString);
      JSONManagement.GetJSONObject(JsonObject);

      IF JSONManagement.GetStringPropertyValueFromJObjectByName(JsonObject,'PropertyId',PropertyId) THEN
        IF PropertyId = IsBankPropertyIdTxt THEN BEGIN
          JSONManagement.GetBoolPropertyValueFromJObjectByName(JsonObject,'Value',IsBank);
          EXIT(IsBank);
        END;
      EXIT(FALSE);
    END;

    [TryFunction]
    [External]
    PROCEDURE TryGetIsBankValue@93(IsBankString@1000 : Text;VAR Value@1001 : Text);
    BEGIN
      GetExtendedPropertyBoolValue(IsBankString,IsBankPropertyIdTxt,Value);
    END;

    [External]
    PROCEDURE AddIsBank@84(IsBank@1000 : Boolean) : Text;
    VAR
      JsonObject@1001 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      JSONManagement.InitializeEmptyObject;
      JSONManagement.GetJSONObject(JsonObject);

      JSONManagement.AddJPropertyToJObject(JsonObject,'PropertyId',IsBankPropertyIdTxt);
      JSONManagement.AddJPropertyToJObject(JsonObject,'Value',FORMAT(IsBank,0,2));

      EXIT(JSONManagement.WriteObjectToString);
    END;

    [External]
    PROCEDURE GetIsNavCreated@101(IsNavCreatedString@1001 : Text) IsNavCreated : Boolean;
    VAR
      JsonObject@1000 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      PropertyId@1003 : Text;
    BEGIN
      JSONManagement.InitializeObject(IsNavCreatedString);
      JSONManagement.GetJSONObject(JsonObject);

      IF JSONManagement.GetStringPropertyValueFromJObjectByName(JsonObject,'PropertyId',PropertyId) THEN
        IF PropertyId = IsNavCreatedPropertyIdTxt THEN BEGIN
          JSONManagement.GetBoolPropertyValueFromJObjectByName(JsonObject,'Value',IsNavCreated);
          EXIT(IsNavCreated);
        END;
      EXIT(FALSE);
    END;

    [External]
    PROCEDURE AddIsNavCreated@102(IsNavCreated@1000 : Boolean) : Text;
    VAR
      JsonObject@1001 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      JSONManagement.InitializeEmptyObject;
      JSONManagement.GetJSONObject(JsonObject);

      JSONManagement.AddJPropertyToJObject(JsonObject,'PropertyId',IsNavCreatedPropertyIdTxt);
      JSONManagement.AddJPropertyToJObject(JsonObject,'Value',FORMAT(IsNavCreated,0,2));

      EXIT(JSONManagement.WriteObjectToString);
    END;

    [External]
    PROCEDURE GetNavIntegrationId@62(NavIntegrationIdString@1001 : Text) NavIntegrationId : GUID;
    VAR
      JsonObject@1000 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      PropertyId@1003 : Text;
    BEGIN
      JSONManagement.InitializeObject(NavIntegrationIdString);
      JSONManagement.GetJSONObject(JsonObject);
      IF JSONManagement.GetStringPropertyValueFromJObjectByName(JsonObject,'PropertyId',PropertyId) THEN
        IF PropertyId = NavIntegrationIdTxt THEN
          JSONManagement.GetGuidPropertyValueFromJObjectByName(JsonObject,'Value',NavIntegrationId);

      EXIT(NavIntegrationId);
    END;

    [External]
    PROCEDURE AddNavIntegrationId@103(IntegrationId@1000 : GUID) : Text;
    VAR
      JsonObject@1001 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      JSONManagement.InitializeEmptyObject;
      JSONManagement.GetJSONObject(JsonObject);
      JSONManagement.AddJPropertyToJObject(JsonObject,'PropertyId',NavIntegrationIdTxt);
      JSONManagement.AddJPropertyToJObject(JsonObject,'Value',IntegrationId);

      EXIT(JSONManagement.WriteObjectToString);
    END;

    [External]
    PROCEDURE HasIsContact@24(IsContactString@1000 : Text) : Boolean;
    BEGIN
      EXIT(HasExtendedProperty(IsContactString,IsContactPropertyIdTxt));
    END;

    [External]
    PROCEDURE GetIsContact@32(IsContactString@1001 : Text) IsContact : Boolean;
    VAR
      JsonObject@1000 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      PropertyId@1003 : Text;
    BEGIN
      JSONManagement.InitializeObject(IsContactString);
      JSONManagement.GetJSONObject(JsonObject);

      IF JSONManagement.GetStringPropertyValueFromJObjectByName(JsonObject,'PropertyId',PropertyId) THEN
        IF PropertyId = IsContactPropertyIdTxt THEN BEGIN
          JSONManagement.GetBoolPropertyValueFromJObjectByName(JsonObject,'Value',IsContact);
          EXIT(IsContact);
        END;

      EXIT(FALSE);
    END;

    [TryFunction]
    [External]
    PROCEDURE TryGetIsContactValue@97(IsContactString@1000 : Text;VAR Value@1001 : Text);
    BEGIN
      GetExtendedPropertyBoolValue(IsContactString,IsContactPropertyIdTxt,Value);
    END;

    [External]
    PROCEDURE AddIsContact@29(IsContact@1000 : Boolean) : Text;
    VAR
      JsonObject@1001 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      JSONManagement.InitializeEmptyObject;
      JSONManagement.GetJSONObject(JsonObject);

      JSONManagement.AddJPropertyToJObject(JsonObject,'PropertyId',IsContactPropertyIdTxt);
      JSONManagement.AddJPropertyToJObject(JsonObject,'Value',FORMAT(IsContact,0,2));

      EXIT(JSONManagement.WriteObjectToString);
    END;

    [External]
    PROCEDURE HasIsLead@25(IsLeadString@1000 : Text) : Boolean;
    BEGIN
      EXIT(HasExtendedProperty(IsLeadString,IsLeadPropertyIdTxt));
    END;

    [External]
    PROCEDURE GetIsLead@35(IsLeadString@1001 : Text) IsLead : Boolean;
    VAR
      JsonObject@1000 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      PropertyId@1003 : Text;
    BEGIN
      JSONManagement.InitializeObject(IsLeadString);
      JSONManagement.GetJSONObject(JsonObject);

      IF JSONManagement.GetStringPropertyValueFromJObjectByName(JsonObject,'PropertyId',PropertyId) THEN
        IF PropertyId = IsLeadPropertyIdTxt THEN BEGIN
          JSONManagement.GetBoolPropertyValueFromJObjectByName(JsonObject,'Value',IsLead);
          EXIT(IsLead);
        END;

      EXIT(FALSE);
    END;

    [TryFunction]
    [External]
    PROCEDURE TryGetIsLeadValue@98(IsLeadString@1000 : Text;VAR Value@1001 : Text);
    BEGIN
      GetExtendedPropertyBoolValue(IsLeadString,IsLeadPropertyIdTxt,Value);
    END;

    [External]
    PROCEDURE HasIsPartner@28(IsPartnerString@1000 : Text) : Boolean;
    BEGIN
      EXIT(HasExtendedProperty(IsPartnerString,IsPartnerPropertyIdTxt));
    END;

    [External]
    PROCEDURE GetIsPartner@36(IsPartnerString@1001 : Text) IsPartner : Boolean;
    VAR
      JsonObject@1000 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      PropertyId@1003 : Text;
    BEGIN
      JSONManagement.InitializeObject(IsPartnerString);
      JSONManagement.GetJSONObject(JsonObject);

      IF JSONManagement.GetStringPropertyValueFromJObjectByName(JsonObject,'PropertyId',PropertyId) THEN
        IF PropertyId = IsPartnerPropertyIdTxt THEN BEGIN
          JSONManagement.GetBoolPropertyValueFromJObjectByName(JsonObject,'Value',IsPartner);
          EXIT(IsPartner);
        END;

      EXIT(FALSE);
    END;

    [TryFunction]
    [External]
    PROCEDURE TryGetIsPartnerValue@99(IsPartnerString@1000 : Text;VAR Value@1001 : Text);
    BEGIN
      GetExtendedPropertyBoolValue(IsPartnerString,IsPartnerPropertyIdTxt,Value);
    END;

    [External]
    PROCEDURE ConcatenateStreet@86(Address@1000 : Text;Address2@1001 : Text) : Text;
    VAR
      CrLf@1002 : Text[2];
    BEGIN
      IF Address2 = '' THEN
        EXIT(Address);

      CrLf[1] := 13;
      CrLf[2] := 10;
      EXIT(Address + CrLf + Address2);
    END;

    [External]
    PROCEDURE SplitStreet@87(Street@1001 : Text;VAR Address@1002 : Text[100];VAR Address2@1003 : Text[50]);
    VAR
      CrLf@1000 : Text[2];
      NewLinePos@1004 : Integer;
    BEGIN
      CrLf[1] := 13;
      CrLf[2] := 10;
      NewLinePos := STRPOS(Street,CrLf);
      IF NewLinePos = 0 THEN BEGIN
        Address := COPYSTR(Street,1,MAXSTRLEN(Address));
        EXIT;
      END;

      IF NewLinePos > MAXSTRLEN(Address) THEN
        Address := COPYSTR(Street,1,MAXSTRLEN(Address))
      ELSE
        Address := COPYSTR(Street,1,NewLinePos - 1);
      Address2 := COPYSTR(Street,NewLinePos + 2);
    END;

    [External]
    PROCEDURE FindCountryRegionCode@88(CountryOrRegion@1001 : Text) : Code[10];
    VAR
      CountryRegion@1000 : Record 9;
      Regex@1002 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Regex";
      Match@1005 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Match";
      Matches@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.MatchCollection";
      Abbreviation@1004 : Text;
    BEGIN
      IF CountryOrRegion = '' THEN
        EXIT('');

      IF STRLEN(CountryOrRegion) <= MAXSTRLEN(CountryRegion.Code) THEN
        IF CountryRegion.GET(CountryOrRegion) THEN
          EXIT(CountryRegion.Code);

      CountryRegion.SETRANGE(Name,CountryOrRegion);
      IF CountryRegion.COUNT = 1 THEN BEGIN
        CountryRegion.FINDFIRST;
        EXIT(CountryRegion.Code);
      END;

      IF STRPOS(CountryOrRegion,' ') > 0 THEN BEGIN
        Matches := Regex.Matches(CountryOrRegion,'\b([A-Z])');
        IF Matches.Count > 0 THEN BEGIN
          FOREACH Match IN Matches DO
            Abbreviation += Match.Value;
          IF CountryRegion.GET(Abbreviation) THEN
            EXIT(CountryRegion.Code);
        END;
      END;

      CountryRegion.INIT;
      CountryRegion.Code := COPYSTR(CountryOrRegion,1,MAXSTRLEN(CountryRegion.Code));
      CountryRegion.Name := COPYSTR(CountryOrRegion,1,MAXSTRLEN(CountryRegion.Name));
      CountryRegion.INSERT(TRUE);
      EXIT(CountryRegion.Code);
    END;

    [External]
    PROCEDURE GetContactComments@96(Contact@1000 : Record 5050) : Text;
    VAR
      RlshpMgtCommentLine@1001 : Record 5061;
      CommentString@1002 : Text;
      CrLf@1003 : Text[2];
    BEGIN
      CrLf[1] := 13;
      CrLf[2] := 10;
      RlshpMgtCommentLine.SETRANGE("Table Name",RlshpMgtCommentLine."Table Name"::Contact);
      RlshpMgtCommentLine.SETRANGE("No.",Contact."No.");
      IF RlshpMgtCommentLine.FINDSET THEN
        REPEAT
          IF (CommentString <> '') OR (RlshpMgtCommentLine.Comment = '') THEN
            CommentString += CrLf;
          CommentString += RlshpMgtCommentLine.Comment;
        UNTIL RlshpMgtCommentLine.NEXT = 0;
      EXIT(CommentString);
    END;

    [External]
    PROCEDURE SetContactComments@95(Contact@1000 : Record 5050;PersonalNotes@1001 : Text);
    VAR
      RlshpMgtCommentLine@1002 : Record 5061;
    BEGIN
      RlshpMgtCommentLine.SETRANGE("Table Name",RlshpMgtCommentLine."Table Name"::Contact);
      RlshpMgtCommentLine.SETRANGE("No.",Contact."No.");
      IF NOT RlshpMgtCommentLine.ISEMPTY THEN
        RlshpMgtCommentLine.DELETEALL;
      IF PersonalNotes <> '' THEN BEGIN
        RlshpMgtCommentLine."Table Name" := RlshpMgtCommentLine."Table Name"::Contact;
        RlshpMgtCommentLine."No." := Contact."No.";
        RlshpMgtCommentLine.Date := TODAY;
        InsertNextContactCommentLine(RlshpMgtCommentLine,PersonalNotes);
      END;
    END;

    LOCAL PROCEDURE InsertNextContactCommentLine@94(VAR RlshpMgtCommentLine@1000 : Record 5061;RemainingPersonalNotes@1001 : Text);
    VAR
      CrLf@1002 : Text[2];
      CrLfPos@1003 : Integer;
    BEGIN
      CrLf[1] := 13;
      CrLf[2] := 10;
      CrLfPos := STRPOS(RemainingPersonalNotes,CrLf);

      IF (CrLfPos <> 0) AND (CrLfPos <= MAXSTRLEN(RlshpMgtCommentLine.Comment) + 1) THEN BEGIN
        RlshpMgtCommentLine.Comment := COPYSTR(RemainingPersonalNotes,1,CrLfPos - 1);
        RemainingPersonalNotes := COPYSTR(RemainingPersonalNotes,CrLfPos + 2);
      END ELSE BEGIN
        RlshpMgtCommentLine.Comment := COPYSTR(RemainingPersonalNotes,1,MAXSTRLEN(RlshpMgtCommentLine.Comment));
        RemainingPersonalNotes := COPYSTR(RemainingPersonalNotes,MAXSTRLEN(RlshpMgtCommentLine.Comment) + 1);
      END;

      RlshpMgtCommentLine."Line No." += 10000;
      RlshpMgtCommentLine.INSERT;
      RlshpMgtCommentLine.Date := 0D;
      IF RemainingPersonalNotes <> '' THEN
        InsertNextContactCommentLine(RlshpMgtCommentLine,RemainingPersonalNotes);
    END;

    [External]
    PROCEDURE InitializeCollection@4(JSONString@1000 : Text);
    BEGIN
      JSONManagement.InitializeCollection(JSONString);
    END;

    [External]
    PROCEDURE InitializeObject@2(JSONString@1000 : Text);
    BEGIN
      JSONManagement.InitializeObject(JSONString);
    END;

    [External]
    PROCEDURE IsBlankOrEmptyJsonObject@37(JSONString@1000 : Text) : Boolean;
    VAR
      JSONManagement2@1002 : Codeunit 5459;
      EmptyJsonObjectString@1001 : Text;
    BEGIN
      JSONManagement2.InitializeEmptyObject;
      EmptyJsonObjectString := JSONManagement2.WriteObjectToString;
      EXIT((JSONString = '') OR (JSONString = EmptyJsonObjectString));
    END;

    [External]
    PROCEDURE WriteCollectionToString@44() : Text;
    BEGIN
      EXIT(JSONManagement.WriteCollectionToString);
    END;

    [External]
    PROCEDURE WriteObjectToString@51() : Text;
    BEGIN
      EXIT(JSONManagement.WriteObjectToString);
    END;

    BEGIN
    END.
  }
}

