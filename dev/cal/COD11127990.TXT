OBJECT Codeunit 11127990 Symbrio Job Queue Objects
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PSSE;
  }
  PROPERTIES
  {
    TableNo=472;
    Permissions=TableData 11127978=rm;
    OnRun=VAR
            Parameter@1100285408 : Text[260];
            ParamStr@1100285407 : Text[260];
            SepPosition@1100285406 : Integer;
            b_runBatch@1100285405 : Boolean;
            b_importOrd@1100285404 : Boolean;
            b_importInv@1100285403 : Boolean;
            b_procOrd@1100285402 : Boolean;
            b_procInv@1100285401 : Boolean;
            b_exportData@1100285400 : Boolean;
          BEGIN
            SleepTime := 1500;
            //>>150508
            ParamStr := UPPERCASE("Parameter String");
            IF ParamStr = '' THEN BEGIN
              b_runBatch := TRUE;
              b_importOrd := TRUE;
              b_importInv := TRUE;
              b_procOrd := TRUE;
              b_procInv := TRUE;
              b_exportData := TRUE;
            END ELSE BEGIN
              REPEAT
                SepPosition := STRPOS(ParamStr,',');
                IF SepPosition > 0 THEN
                  Parameter := COPYSTR(ParamStr,1,SepPosition - 1)
                ELSE
                  Parameter := ParamStr;

                CASE Parameter OF
                  'RUNBATCH':   b_runBatch := TRUE;
                  'IMPORTORD':  b_importOrd := TRUE;
                  'IMPORTINV':  b_importInv := TRUE;
                  'PROCORD':    b_procOrd := TRUE;
                  'PROCINV':    b_procInv := TRUE;
                  'EXPORTDATA': b_exportData := TRUE;
                  'NOINVPOST':  BEGIN
                                  b_runBatch := TRUE;
                                  b_importOrd := TRUE;
                                  b_importInv := TRUE;
                                  b_procOrd := TRUE;
                                  b_exportData := TRUE;
                                END;
                END;
              ParamStr := COPYSTR(ParamStr,SepPosition + 1);
              UNTIL SepPosition = 0;
            END;
            //<<150508


            IF b_runBatch THEN BEGIN
            //>>ENH-SYM-005
              RunBatch;
              SLEEP(SleepTime);
            //<<ENH-SYM-005
            END;

            IF b_importOrd THEN BEGIN
              CLEARLASTERROR;  //140220 SYM982
              IF NOT ImportOrders.RUN THEN BEGIN     //has COMMIT!
                LogLastError('ImportOrders');
                EXIT;
              END;
            END;

            IF b_importInv THEN BEGIN
              SLEEP(SleepTime);
              ImportInvoices.SetExitOnError(TRUE);  //140220 SYM982
              IF NOT ImportInvoices.RUN THEN BEGIN        //has COMMIT!
                LogLastError('ImportInvoices');
                EXIT;
              END;
            END;

            IF b_procOrd THEN BEGIN
              SLEEP(SleepTime);
              IF NOT ProcessAllOrders.RUN THEN BEGIN
                LogLastError('ProcessAllOrders');
                EXIT;
              END;
            END;

            IF b_procInv THEN BEGIN
              SLEEP(SleepTime);
              IF NOT ProcessAllInvoices.RUN THEN BEGIN
                LogLastError('ProcessAllInvoices');
                EXIT;
              END;
            END;

            IF b_exportData THEN BEGIN
              SLEEP(SleepTime);
              IF NOT ExportSymbrioData.RUN THEN BEGIN  // Has COMMIT!
                LogLastError('ExportSymbrioData');
                EXIT;
              END;
            END;


            //ENH-SYM-004
            DeleteLogEntries;
          END;

  }
  CODE
  {
    VAR
      ProcessAllOrders@1100285500 : Codeunit 11127982;
      ImportOrders@1100285501 : Codeunit 11127984;
      SymbrioErrorLog@1100285502 : Record 11127987;
      ProcessAllInvoices@1100285503 : Codeunit 11127986;
      ImportInvoices@1100285504 : Codeunit 11127988;
      ExportSymbrioData@1100285505 : Codeunit 11127985;
      ErrorMessage@1100285506 : Text;
      SleepTime@1100285508 : Integer;

    PROCEDURE RunBatch@1100285502();
    VAR
      BatchList@1100285501 : Record 11127989;
    BEGIN
      //ENH-SYM-005
      //>>IME424x
      //IF BatchList.FINDFIRST THEN REPEAT
      IF BatchList.FINDSET(FALSE) THEN REPEAT
      //<<IME424x
        IF EXISTS(DELCHR(BatchList."File Path and Name",'<>','"')) THEN
          RunBatchLine(BatchList);
      UNTIL BatchList.NEXT = 0;
    END;

    PROCEDURE RunBatchLine@1100285503(BatchList@1100285500 : Record 11127989);
    VAR
      Process@1100285502 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process";
    BEGIN
      //ENH-SYM-005
      Process                     := Process.Process;
      Process.EnableRaisingEvents := TRUE;
      Process                     := Process.Start(BatchList."File Path and Name");
      Process.WaitForExit;
    END;

    PROCEDURE LogLastError@1100285500(FunctionName@1100285501 : Text[30]);
    VAR
      ErrorString@1100285500 : Text;
    BEGIN
      ErrorString := FunctionName + ': ' + GETLASTERRORTEXT;
      IF STRLEN(ErrorString) > 250 THEN
        ErrorString := COPYSTR(ErrorString,1,250);

      //>>140220 SYM982 Itero.DL, error handling
      //SymbrioErrorLog.InsertNewErrorLine(ErrorString,GETLASTERRORCODE,'');
      SymbrioErrorLog.InsertNewErrorLine(ErrorString,GETLASTERRORCODE,COPYSTR(GETLASTERRORCALLSTACK,1,250));
      CLEARLASTERROR;
      //<<140220 SYM982 Itero.DL, error handling
    END;

    PROCEDURE DeleteLogEntries@1100285501();
    VAR
      SymbrioSetup@1100285500 : Record 11127975;
      JobQueueLogEntry@1100285501 : Record 474;
      JobQueueEntry@1100285502 : Record 472;
      DeleteEntriesOlderXDaysTxt@1100285503 : Text;
      DeleteEntriesOlderXDaysDT@1100285504 : DateTime;
      SymbrioExportQueue@1100285505 : Record 11127988;
    BEGIN
      //ENH-SYM-004
      SymbrioSetup.GET;
      IF SymbrioSetup."Delete Entries Older X Days" = 0 THEN
        EXIT;

      DeleteEntriesOlderXDaysTxt := '-'+FORMAT(SymbrioSetup."Delete Entries Older X Days",0,1)+'<D>';
      DeleteEntriesOlderXDaysDT := CREATEDATETIME(CALCDATE(DeleteEntriesOlderXDaysTxt),0T);

      JobQueueLogEntry.SETCURRENTKEY(ID);
      JobQueueEntry.SETFILTER(Status, '<>%1&<>%2',JobQueueEntry.Status::Error,JobQueueEntry.Status::"On Hold");
      JobQueueEntry.SETRANGE("Object Type to Run",JobQueueEntry."Object Type to Run"::Codeunit);
      JobQueueEntry.SETRANGE("Object ID to Run",11127990);
      IF JobQueueEntry.FINDSET(FALSE) THEN
      REPEAT
        JobQueueLogEntry.SETRANGE(ID,JobQueueEntry.ID);
        JobQueueLogEntry.SETRANGE("Start Date/Time",0DT,DeleteEntriesOlderXDaysDT);
        JobQueueLogEntry.SETFILTER("End Date/Time",'<>%1',0DT);
        IF NOT JobQueueLogEntry.ISEMPTY THEN
          JobQueueLogEntry.DELETEALL(FALSE);
      UNTIL JobQueueEntry.NEXT=0;

      SymbrioErrorLog.RESET;
      SymbrioErrorLog.SETRANGE("Error Timestamp",0DT,DeleteEntriesOlderXDaysDT);
      IF NOT SymbrioErrorLog.ISEMPTY THEN
        SymbrioErrorLog.DELETEALL(FALSE);

      // SYM048/036/040 150218
      SymbrioExportQueue.RESET();
      SymbrioExportQueue.SETRANGE("Error Occured", TRUE);
      SymbrioExportQueue.DELETEALL(FALSE);
    END;

    BEGIN
    {
      140219 ITERO.LP Earier undocumented. Changed the structure on how to run the different codeunits.
      140220 ITERO.DL added GETLASTERRORCALLSTACK + CLEARLASTERROR
      140220 SYM982 Itero.DL, error handling
      140306 ITERO.DL reorder of jobs, continue with next step every time
      140428 ITERO.DL ENHSYM004 cleanup of log entries based on setup
                      ENHSYM005 Make SYM Batch Run (cod 81620) part of the standard solution
      150218 ITERO.MH Added deletion of symbrio exprot queue errors.
      150508 ITERO.DL Added support for parameterstring from JobQueue
      160225 ITERO.DL IME424x repace 'findfirst then repeat' (causes locking) with 'findset(false) then repeat'
    }
    END.
  }
}

