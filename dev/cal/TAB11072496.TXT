OBJECT Table 11072496 SAF-T Mapping Range
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVNO14.04 (10676);
  }
  PROPERTIES
  {
    OnDelete=VAR
               SAFTGLAccountMapping@1100285100 : Record 11072494;
               SAFTExportHeader@1100285101 : Record 11128518;
             BEGIN
               SAFTExportHeader.SETRANGE("Mapping Range Code", Code);
               IF NOT SAFTExportHeader.ISEMPTY() THEN
                 IF CONFIRM(SAFTExportsExistsErr) THEN
                   SAFTExportHeader.DELETEALL(TRUE)
                 ELSE
                   ERROR('');
               SAFTGLAccountMapping.SETRANGE("Mapping Range Code", Code);
               IF NOT SAFTGLAccountMapping.ISEMPTY() THEN
                 IF CONFIRM(MappingExistQst) THEN
                   SAFTGLAccountMapping.DELETEALL(TRUE)
                 ELSE
                   ERROR('');
             END;

    CaptionML=[ENU=SAF-T Mapping Range;
               NOR=SAF-T-tilordningsomr†de];
    LookupPageID=Page11127611;
    DrillDownPageID=Page11127611;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;CaptionML=[ENU=Code;
                                                              NOR=Kode;
                                                              SVE=Kod];
                                                   NotBlank=Yes }
    { 2   ;   ;Mapping Type        ;Option        ;OnValidate=VAR
                                                                SAFTGLAccountMapping@1100285100 : Record 11072494;
                                                                SAFTMappingHelper@1100285101 : Codeunit 11020362;
                                                              BEGIN
                                                                IF "Mapping Type" <> xRec."Mapping Type" THEN BEGIN
                                                                  SAFTMappingHelper.VerifyNoMappingDone(xRec);
                                                                  SAFTGLAccountMapping.SETRANGE("Mapping Range Code", Code);
                                                                  SAFTGLAccountMapping.MODIFYALL("Mapping Type", "Mapping Type");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Mapping Type;
                                                              NOR=Tilordningstype];
                                                   OptionString=None,Two Digit Standard Account,Four Digit Standard Account,Income Statement }
    { 3   ;   ;Starting Date       ;Date          ;OnValidate=BEGIN
                                                                CheckDateConsistency;
                                                                IF "Starting Date" = 0D THEN
                                                                  "Range Type" := 0
                                                                ELSE BEGIN
                                                                  "Accounting Period" := 0D;
                                                                  "Range Type" := "Range Type"::"Date Range";
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Starting Date;
                                                              NOR=Startdato;
                                                              SVE=Startdatum] }
    { 4   ;   ;Ending Date         ;Date          ;OnValidate=BEGIN
                                                                CheckDateConsistency();
                                                                IF "Ending Date" = 0D THEN
                                                                  "Range Type" := 0
                                                                ELSE BEGIN
                                                                  "Accounting Period" := 0D;
                                                                  "Range Type" := "Range Type"::"Date Range";
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Ending Date;
                                                              NOR=Sluttdato;
                                                              SVE=Slutdatum] }
    { 5   ;   ;Range Type          ;Option        ;CaptionML=[ENU=Range Type;
                                                              NOR=Omr†detype];
                                                   OptionString=None,Accounting Period,Date Range;
                                                   Editable=No }
    { 6   ;   ;Accounting Period   ;Date          ;OnValidate=VAR
                                                                AccountingPeriod@1100285100 : Record 50;
                                                              BEGIN
                                                                IF "Accounting Period" = 0D THEN
                                                                  "Range Type" := 0
                                                                ELSE BEGIN
                                                                  "Range Type" := "Range Type"::"Accounting Period";
                                                                  AccountingPeriod.GET("Accounting Period");
                                                                  "Starting Date" := AccountingPeriod."Starting Date";
                                                                  "Ending Date" := AccountingPeriod.GetFiscalYearEndDate("Starting Date");
                                                                  IF "Ending Date" = 0D THEN
                                                                    ERROR(CannotSelectAccPeriodWithoutEndingDateErr);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Accounting Period;
                                                              NOR=Regnskapsperiode;
                                                              SVE=Bokf”ringsperiod] }
    { 7   ;   ;Include Incoming Balance;Boolean   ;CaptionML=[ENU=Include Incoming Balance;
                                                              NOR=Ta med inng†ende saldo] }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      DatesAreNotCorrectErr@1100285100 : TextConst 'ENU=Starting date cannot be before ending date.';
      MappingExistQst@1100285101 : TextConst 'ENU=One or more G/L Account already mapped. Do you want to remove the mapping range?';
      SAFTExportsExistsErr@1100285102 : TextConst 'ENU=One or more SAF-T exports exist for the mapping range. Do you want to remove the mapping range?';
      CannotSelectAccPeriodWithoutEndingDateErr@1100285103 : TextConst 'ENU=You cannot select the accounting period that does not have the ending date.';

    PROCEDURE CheckMappingIsStandardAccount@1100285111();
    BEGIN
      IF NOT IsStandardAccountMapping THEN
        FIELDERROR("Mapping Type");
    END;

    PROCEDURE IsStandardAccountMapping@1100285112() : Boolean;
    BEGIN
      EXIT("Mapping Type" IN ["Mapping Type"::"Two Digit Standard Account", "Mapping Type"::"Four Digit Standard Account"]);
    END;

    PROCEDURE GetSAFTMappingSourceTypeByMappingType@1100285113() : Integer;
    VAR
      SAFTMappingSourceType@1100285100 : 'None,Two Digit Standard Account,Four Digit Standard Account,Income Statement,Standard Tax Code';
    BEGIN
      CASE "Mapping Type" OF
        "Mapping Type"::"Two Digit Standard Account":
            EXIT(SAFTMappingSourceType::"Two Digit Standard Account");
        "Mapping Type"::"Four Digit Standard Account":
            EXIT(SAFTMappingSourceType::"Four Digit Standard Account");
        "Mapping Type"::"Income Statement":
            EXIT(SAFTMappingSourceType::"Income Statement");
      END;
    END;

    LOCAL PROCEDURE CheckDateConsistency@1100285114();
    BEGIN
      IF ("Starting Date" <> 0D) AND ("Ending Date" <> 0D) AND ("Starting Date" > "Ending Date") THEN
        ERROR(DatesAreNotCorrectErr);
    END;

    BEGIN
    {
      191003 ORANGO.DL RFC194 implement SAF-T from BC14 CU04 (NAVNO14.04) NorwegianSAFT-extension
      191112 ORANGO.DL updates from BC14.CU06
    }
    END.
  }
}

