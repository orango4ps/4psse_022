OBJECT Codeunit 11012472 Xrm 4PS Subscribers
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      MappingMustBeSetForGUIDFieldErr@1100528500 : TextConst '@@@=%1 and %2 are table IDs, %3 and %4 are field captions.;DEU=Tabelle %1 muss Tabelle %2 zugeordnet werden, um einen Wert zwischen den Feldern %3 und %4 zu Åbertragen.;ENU=Table %1 must be mapped to table %2 to transfer value between fields %3  and %4.;NLD=Tabel %1 moet aan tabel %2 zijn toegewezen om de waarde over te brengen tussen de velden %3 en %4.;SVE=Tabellen %1 mÜste mappas till tabellen %2 fîr att îverfîra vÑrdet mellan fÑlten %3 och %4.';

    [EventSubscriber(Codeunit,5345,OnBeforeTransferRecordFields)]
    PROCEDURE OnBeforeTransferRecordFields@54(SourceRecordRef@1001 : RecordRef;VAR DestinationRecordRef@1002 : RecordRef);
    VAR
      IntegrationMgt@1000000000 : Codeunit 5150;
    BEGIN
      CASE GetSourceDestCode(SourceRecordRef,DestinationRecordRef) OF
      //THIS FOR EXAMPLE IF NEEDED LATER
        '?-CRM ?': //The source-dest identifier, i.e. '<the NAV table name>-CRM <the crm table name>'
          BEGIN
            //put any specific programming needed to move/translate values between 4PS-CRM fields here
          END;
      END;
    END;

    [EventSubscriber(Codeunit,5336,OnTransferFieldData)]
    PROCEDURE OnTransferFieldData@22(SourceFieldRef@1000 : FieldRef;DestinationFieldRef@1001 : FieldRef;VAR NewValue@1002 : Variant;VAR IsValueFound@1003 : Boolean;VAR NeedsConversion@1004 : Boolean);
    VAR
      IntegrationTableMapping@1006 : Record 5335;
      OptionValue@1005 : Integer;
    BEGIN
      //put any specific programming needed to move/translate values between 4PS-CRM fields here
      //BELOW SHOWN FOR EXAMPLE!
      // IF ConvertTableToOption(SourceFieldRef,OptionValue) THEN BEGIN
      //  NewValue := OptionValue;
      //  IsValueFound := TRUE;
      //  NeedsConversion := TRUE;
      //  EXIT;
      // END;
      //
      // IF AreFieldsRelatedToMappedTables(SourceFieldRef,DestinationFieldRef,IntegrationTableMapping) THEN BEGIN
      //  IsValueFound := FindNewValueForCoupledRecordPK(IntegrationTableMapping,SourceFieldRef,DestinationFieldRef,NewValue);
      //  NeedsConversion := FALSE;
      // END;
    END;

    [EventSubscriber(Codeunit,5345,OnAfterTransferRecordFields)]
    PROCEDURE OnAfterTransferRecordFields@35(SourceRecordRef@1002 : RecordRef;VAR DestinationRecordRef@1001 : RecordRef;VAR AdditionalFieldsWereModified@1000 : Boolean;DestinationIsInserted@1003 : Boolean);
    BEGIN
      CASE GetSourceDestCode(SourceRecordRef,DestinationRecordRef) OF
        '?-CRM ?':
          BEGIN
            //put any specific programming needed to move/translate values between 4PS-CRM fields here
          END;
      END;
    END;

    [EventSubscriber(Codeunit,5345,OnBeforeInsertRecord)]
    PROCEDURE OnBeforeInsertRecord@42(SourceRecordRef@1001 : RecordRef;VAR DestinationRecordRef@1000 : RecordRef);
    VAR
      IntegrationMgt@1000000000 : Codeunit 5150;
      Contact@1000000001 : Record 5050;
    BEGIN
      //put any programming needed before inserting a record here
      CASE GetSourceDestCode(SourceRecordRef,DestinationRecordRef) OF
        'Contact-CRM Account':
          BEGIN
            SourceRecordRef.SETTABLE(Contact);
            InsertUpdateIntegrationRecord(SourceRecordRef, DATI2VARIANT(Contact."Last Date Modified", Contact."Last Time Modified"));
          END;
        'Contact Feature-CRM Feature':
          UpdateCRMFeatureBeforeInsert(SourceRecordRef, DestinationRecordRef);
        'Contact Feature Type-CRM Feature Type':
          UpdateCRMFeatureTypeBeforeInsert(SourceRecordRef, DestinationRecordRef);
        'Try-out Line-CRM Connection':
          UpdateCRMConnectionBeforeInsert(SourceRecordRef,DestinationRecordRef);
      END;
    END;

    [EventSubscriber(Codeunit,5345,OnAfterInsertRecord)]
    PROCEDURE OnAfterInsertRecord@45(SourceRecordRef@1001 : RecordRef;DestinationRecordRef@1000 : RecordRef);
    BEGIN
      CASE GetSourceDestCode(SourceRecordRef,DestinationRecordRef) OF
        '?-CRM ?':
          BEGIN
            //put any specific programming needed after inserting a record here
          END;
      END;
    END;

    [EventSubscriber(Codeunit,5345,OnBeforeModifyRecord)]
    PROCEDURE OnBeforeModifyRecord@49(SourceRecordRef@1001 : RecordRef;VAR DestinationRecordRef@1002 : RecordRef);
    BEGIN
      CASE GetSourceDestCode(SourceRecordRef,DestinationRecordRef) OF
        '?-CRM ?':
          BEGIN
            //put any specific programming needed before updating a record here
          END;
      END;
    END;

    [EventSubscriber(Codeunit,5345,OnAfterModifyRecord)]
    PROCEDURE OnAfterModifyRecord@51(SourceRecordRef@1001 : RecordRef;VAR DestinationRecordRef@1002 : RecordRef);
    BEGIN
      CASE GetSourceDestCode(SourceRecordRef,DestinationRecordRef) OF
        '?-CRM ?':
          BEGIN
            //put any specific programming needed after updating a record here
          END;
      END;
    END;

    [EventSubscriber(Codeunit,5340,OnQueryPostFilterIgnoreRecord)]
    PROCEDURE OnQueryPostFilterIgnoreRecord@1000000014(SourceRecordRef@1001 : RecordRef;VAR IgnoreRecord@1002 : Boolean);
    BEGIN
      //after filtering to get the record that should be synchronised
      //add any additional programming needed to ignore records that should not be synchronised, but
      //that cannot be included in a filter
      CASE SourceRecordRef.NUMBER OF
        DATABASE::"Contact Feature Type":
          IgnoreRecord := HandleContactFeatureTypeQueryPostFilterIgnoreRecord(SourceRecordRef);
        DATABASE::"Try-out Line":
          IgnoreRecord := HandleTryoutLineQueryPostFilterIgnoreRecord(SourceRecordRef);
      END;
    END;

    [EventSubscriber(Codeunit,5345,OnFindUncoupledDestinationRecord)]
    PROCEDURE OnFindUncoupledDestinationRecord@46(SourceRecordRef@1001 : RecordRef;VAR DestinationRecordRef@1002 : RecordRef;VAR DestinationIsDeleted@1003 : Boolean;VAR DestinationFound@1004 : Boolean);
    BEGIN
      CASE GetSourceDestCode(SourceRecordRef,DestinationRecordRef) OF
        'Contact Feature-CRM Feature':;
        '?-CRM ?':
          BEGIN
            //put any specific programming needed to find the target record if there is no coupling
           //FOR EXAMPLE DestinationFound := CRMFeatureFindUncoupledDestinationRecord(SourceRecordRef,DestinationRecordRef);
          END;
      END;
    END;

    LOCAL PROCEDURE GetSourceDestCode@38(SourceRecordRef@1001 : RecordRef;DestinationRecordRef@1000 : RecordRef) : Text;
    BEGIN
      //needed to reproduce local function in Microsoft code unit
      IF (SourceRecordRef.NUMBER <> 0) AND (DestinationRecordRef.NUMBER <> 0) THEN
        EXIT(STRSUBSTNO('%1-%2',SourceRecordRef.NAME,DestinationRecordRef.NAME));
      EXIT('');
    END;

    LOCAL PROCEDURE UpdateCRMFeatureBeforeInsert@1000000018(SourceRecordRef@1000000000 : RecordRef;DestRecordRef@1000000001 : RecordRef);
    VAR
      CRMFeature@1000000006 : Record 11124936;
      ContactFeatureGroup@1000000005 : Record 11012751;
      ContactFeature@1000000004 : Record 11012752;
      CRMIntegrationRecord@1000000003 : Record 5331;
      CRMFeatureGroupId@1000000002 : GUID;
      CRMFeatureGroup@1000000007 : Record 11124935;
    BEGIN
      //Handle synchronising Contact Featre to CRM Feature
      //specifically, setting the parent CRM Feature Group for the CRM Feature
      SourceRecordRef.SETTABLE(ContactFeature);
      DestRecordRef.SETTABLE(CRMFeature);

      // Get the NAV and CRM feature groups
      ContactFeatureGroup.GET(ContactFeature."Feature Group");
      IF NOT CRMIntegrationRecord.FindIDFromRecordID(ContactFeatureGroup.RECORDID,CRMFeatureGroupId) THEN
        ERROR('There is no coupled Feature Group for the Feature %1', ContactFeatureGroup.Description);

      // Initialize the CRM feature from NAV
      IF CRMFeatureGroup.GET(CRMFeatureGroupId) THEN
        CRMFeature.fps_FeatureGroupId := CRMFeatureGroupId
      ELSE
        ERROR('The coupled CRM Feature Group for Contact Feature Group %1 could not be found', ContactFeatureGroup.Description);

      DestRecordRef.GETTABLE(CRMFeature);
    END;

    LOCAL PROCEDURE UpdateCRMFeatureGroupAfterUpsertRecord@4(SourceRecordRef@1002 : RecordRef;DestinationRecordRef@1003 : RecordRef);
    VAR
      CRMFeatureGroup@1000 : Record 11124935;
      ContactFeatureGroup@1005 : Record 11012751;
      ContactFeature@1016 : Record 11012752;
      CRMIntegrationTableSynch@1017 : Codeunit 5340;
      SourceLinesRecordRef@1018 : RecordRef;
    BEGIN
      //When a feature group is updated, we want to automatically update all its Features
      SourceRecordRef.SETTABLE(ContactFeatureGroup);
      DestinationRecordRef.SETTABLE(CRMFeatureGroup);

      ContactFeature.SETRANGE("Feature Group",ContactFeatureGroup.Description);
      IF ContactFeature.FINDFIRST THEN BEGIN
        SourceLinesRecordRef.GETTABLE(ContactFeature);
        CRMIntegrationTableSynch.SynchRecordsToIntegrationTable(SourceLinesRecordRef,FALSE,FALSE);
      END;
    END;

    LOCAL PROCEDURE CRMFeatureFindUncoupledDestinationRecord@1000000019(SourceRecordRef@1002 : RecordRef;VAR DestinationRecordRef@1003 : RecordRef) DestinationFound : Boolean;
    VAR
      CRMFeature@1004 : Record 11124936;
      DescriptionFieldRef@1000000000 : FieldRef;
      ContactFeature@1000000001 : Record 11012752;
      CodeFieldRef@1000000002 : FieldRef;
    BEGIN
      //Used to try to find target record if there is no coupling available, by using key field values
      DescriptionFieldRef := SourceRecordRef.FIELD(ContactFeature.FIELDNO(Description));
      CRMFeature.fps_FeatureGroupIdName := FORMAT(DescriptionFieldRef.VALUE);
      CodeFieldRef := SourceRecordRef.FIELD(ContactFeature.FIELDNO(Code));
      CRMFeature.fps_code := FORMAT(CodeFieldRef.VALUE);
      IF CRMFeature.FINDFIRST THEN
        DestinationFound := DestinationRecordRef.GET(CRMFeature.RECORDID);
    END;

    LOCAL PROCEDURE UpdateCRMFeatureTypeBeforeInsert@1000000020(SourceRecordRef@1000000000 : RecordRef;DestRecordRef@1000000001 : RecordRef);
    VAR
      CRMFeatureType@1000000006 : Record 11124937;
      ContactFeatureGroup@1000000005 : Record 11012751;
      ContactFeature@1000000004 : Record 11012752;
      CRMIntegrationRecord@1000000003 : Record 5331;
      CRMFeatureGroupId@1000000002 : GUID;
      CRMFeatureGroup@1000000007 : Record 11124935;
      CRMFeature@1000000008 : Record 11124936;
      Tryout@1000000009 : Record 11012750;
      CRMOpportunity@1000000010 : Record 5343;
      ContactFeatureType@1000000011 : Record 11012753;
      CRMFeatureId@1000000012 : GUID;
      CRMOpportunityId@1000000013 : GUID;
    BEGIN
      //Handles linking the feature type to its parent try-out, feature group and feature records.
      SourceRecordRef.SETTABLE(ContactFeatureType);
      DestRecordRef.SETTABLE(CRMFeatureType);

      // Get the NAV and CRM feature groups
      ContactFeatureGroup.GET(ContactFeatureType."Feature Group");
      IF NOT CRMIntegrationRecord.FindIDFromRecordID(ContactFeatureGroup.RECORDID,CRMFeatureGroupId) THEN
        ERROR('There is no coupled CRM Feature Group for the Contact Feature Type %1 on Try-out %2', ContactFeatureType.Feature, Tryout.Code);

      // Initialize the CRM feature Type from NAV
      IF CRMFeatureGroup.GET(CRMFeatureGroupId) THEN
        CRMFeatureType.fps_FeatureGroupId := CRMFeatureGroupId
      ELSE
        ERROR('The coupled CRM Feature Group for Contact Feature Group %1 could not be found', ContactFeatureGroup.Description);

      IF ContactFeature.GET(ContactFeatureType."Feature Group",ContactFeatureType.Feature) THEN
        BEGIN
          IF NOT CRMIntegrationRecord.FindIDFromRecordID(ContactFeature.RECORDID,CRMFeatureId) THEN
            ERROR('There is no coupled CRM Feature for the Contact Feature Type %1 on Try-out %2', ContactFeatureType.Feature, Tryout.Code);
        END;

      IF CRMFeature.GET(CRMFeatureId) THEN
         CRMFeatureType.fps_FeatureId := CRMFeatureId
      ELSE
        ERROR('The coupled CRM Feature for Contact Feature %1 could not be found', ContactFeature.Code);

      IF Tryout.GET(ContactFeatureType.Code) THEN
        BEGIN
          IF NOT CRMIntegrationRecord.FindIDFromRecordID(Tryout.RECORDID,CRMOpportunityId) THEN
            ERROR('There is no coupled Try-out for the Contact Feature Type %1 on Try-out %2', ContactFeatureType.Feature, Tryout.Code);
        END;

      IF CRMOpportunity.GET(CRMOpportunityId) THEN
        CRMFeatureType.fps_OpportunityId := CRMOpportunityId
      ELSE
        ERROR('The coupled CRM Opportunity for Try-out %1 could not be found', Tryout.Code);

      DestRecordRef.GETTABLE(CRMFeatureType);
    END;

    LOCAL PROCEDURE HandleContactFeatureTypeQueryPostFilterIgnoreRecord@1000000026(SourceRecordRef@1001 : RecordRef) IgnoreRecord : Boolean;
    VAR
      ContactFeatureType@1003 : Record 11012753;
      Tryout@1000000000 : Record 11012750;
      CRMIntegrationRecord@1000000001 : Record 5331;
      CRMId@1000000002 : GUID;
      Contact@1000000003 : Record 5050;
    BEGIN
      //Ignore, don't try to sync this feature type record to CRM IF the parent record,
      //try-out or contact, is not already synchronised to CRM.
      SourceRecordRef.SETTABLE(ContactFeatureType);
      IF ContactFeatureType."Relation Type" = ContactFeatureType."Relation Type"::"Try-out" THEN
        BEGIN
          Tryout.GET(ContactFeatureType.Code);
          IF NOT CRMIntegrationRecord.FindIDFromRecordID(Tryout.RECORDID,CRMId) THEN
            IgnoreRecord := TRUE;
        END
      ELSE
        BEGIN
          Contact.GET(ContactFeatureType.Code);
          IF NOT CRMIntegrationRecord.FindIDFromRecordID(Contact.RECORDID,CRMId) THEN
            IgnoreRecord := TRUE;
        END;
    END;

    LOCAL PROCEDURE UpdateCRMConnectionBeforeInsert@1000000029(SourceRecordRef@1000000000 : RecordRef;DestRecordRef@1000000001 : RecordRef);
    VAR
      CRMConnection@1000000006 : Record 11124938;
      Tryout@1000000005 : Record 11012750;
      TryoutLine@1000000004 : Record 11012755;
      CRMIntegrationRecord@1000000003 : Record 5331;
      CRMOpportunityId@1000000002 : GUID;
      CRMOpportunity@1000000007 : Record 5343;
      CRMContactId@1000000008 : GUID;
      CRMContact@1000000009 : Record 5342;
      Contact@1000000010 : Record 5050;
      CRMConnectionRole@1000000011 : Record 11124939;
    BEGIN
      //handles linking the "CRM connection" record to its parent try-out and contact records
      IF SourceRecordRef.NUMBER = DATABASE::"Try-out Line" THEN
         BEGIN
          SourceRecordRef.SETTABLE(TryoutLine);
          DestRecordRef.SETTABLE(CRMConnection);

          // Get the NAV and CRM records
          Tryout.GET(TryoutLine."Try-out No.");
          IF NOT CRMIntegrationRecord.FindIDFromRecordID(Tryout.RECORDID,CRMOpportunityId) THEN
            ERROR('There is no coupled CRM Opportunity for the Try-out %1', Tryout.Code);

          // Initialize the CRM from NAV
          IF CRMOpportunity.GET(CRMOpportunityId) THEN
            BEGIN
              CRMConnection.Record1Id := CRMOpportunityId;
              CRMConnection.Record1IdObjectTypeCode := CRMConnection.Record1IdObjectTypeCode::opportunity;
            END
          ELSE
            ERROR('The coupled CRM Opportunity for Try-out %1 could not be found', Tryout.Code);

          Contact.GET(TryoutLine."Contact Person No.");
          IF NOT CRMIntegrationRecord.FindIDFromRecordID(Contact.RECORDID,CRMContactId) THEN
            ERROR('There is no coupled CRM Contact (person) for the Contact %1 in NAV', Contact.Name);

          IF CRMContact.GET(CRMContactId) THEN
            BEGIN
              CRMConnection.Record2Id := CRMContactId;
              CRMConnection.Record2IdObjectTypeCode := CRMConnection.Record2IdObjectTypeCode::contact;
            END
          ELSE
            ERROR('The coupled CRM Contact for Contact %1 could not be found', Contact.Name);

          //Set the default CRM connection role
          CRMConnectionRole.SETRANGE(Name,'Stakeholder','Stakeholder');
          IF CRMConnectionRole.FINDFIRST THEN
            CRMConnection.Record2RoleId := CRMConnectionRole.ConnectionRoleId;

          DestRecordRef.GETTABLE(CRMConnection);
        END;
    END;

    LOCAL PROCEDURE HandleTryoutLineQueryPostFilterIgnoreRecord@1000000030(SourceRecordRef@1001 : RecordRef) IgnoreRecord : Boolean;
    VAR
      TryoutLine@1003 : Record 11012755;
      Tryout@1000000000 : Record 11012750;
      CRMIntegrationRecord@1000000001 : Record 5331;
      CRMOpportunityId@1000000002 : GUID;
      Contact@1000000003 : Record 5050;
      CRMContactId@1000000004 : GUID;
    BEGIN
      //ignore a try-out line if its try-out header is not in CRM
      SourceRecordRef.SETTABLE(TryoutLine);
      Tryout.GET(TryoutLine."Try-out No.");
      IF NOT CRMIntegrationRecord.FindIDFromRecordID(Tryout.RECORDID,CRMOpportunityId) THEN
        IgnoreRecord := TRUE
      ELSE BEGIN
        Contact.GET(TryoutLine."Contact Person No.");
        IF NOT CRMIntegrationRecord.FindIDFromRecordID(Contact.RECORDID,CRMContactId) THEN
          IgnoreRecord := TRUE;
      END;
    END;

    LOCAL PROCEDURE InsertUpdateIntegrationRecord@16(RecRef@1000 : RecordRef;IntegrationLastModified@1001 : DateTime);
    VAR
      IntegrationRecord@1002 : Record 5151;
      IntegrationManagement@1000000000 : Codeunit 5150;
    BEGIN
      //NOTE: This local function copied from Microsoft code unit 5341 at NAV 2017 build 17501
      IF IntegrationManagement.IsIntegrationRecord(RecRef.NUMBER) THEN
        WITH IntegrationRecord DO BEGIN
          SETRANGE("Record ID",RecRef.RECORDID);
          IF FINDFIRST THEN BEGIN
            // Handle exceptions where entities change state and should not be integrated.
            "Modified On" := IntegrationLastModified;
            MODIFY;
          END ELSE BEGIN
            // Handle exceptions where entities should not be integrated.
            RESET;
            INIT;
            "Integration ID" := CREATEGUID;
            "Record ID" := RecRef.RECORDID;
            "Table ID" := RecRef.NUMBER;
            "Modified On" := IntegrationLastModified;
            INSERT;
          END;
        END;
    END;

    LOCAL PROCEDURE AreFieldsRelatedToMappedTables@37(SourceFieldRef@1001 : FieldRef;DestinationFieldRef@1000 : FieldRef;VAR IntegrationTableMapping@1007 : Record 5335) : Boolean;
    VAR
      SourceTableID@1002 : Integer;
      DestinationTableID@1003 : Integer;
      Direction@1004 : Integer;
    BEGIN
      //NOTE: This local function copied from Microsoft code unit 5341 at NAV 2017 build 17501
      IF (SourceFieldRef.RELATION <> 0) AND (DestinationFieldRef.RELATION <> 0) THEN BEGIN
        SourceTableID := SourceFieldRef.RELATION;
        DestinationTableID := DestinationFieldRef.RELATION;
        IF FORMAT(DestinationFieldRef.TYPE) = 'GUID' THEN BEGIN
          IntegrationTableMapping.SETRANGE("Table ID",SourceTableID);
          IntegrationTableMapping.SETRANGE("Integration Table ID",DestinationTableID);
          Direction := IntegrationTableMapping.Direction::ToIntegrationTable;
        END ELSE BEGIN
          IntegrationTableMapping.SETRANGE("Table ID",DestinationTableID);
          IntegrationTableMapping.SETRANGE("Integration Table ID",SourceTableID);
          Direction := IntegrationTableMapping.Direction::FromIntegrationTable;
        END;
        IF IntegrationTableMapping.FINDFIRST THEN BEGIN
          IntegrationTableMapping.Direction := Direction;
          EXIT(TRUE);
        END;
        ERROR(
          MappingMustBeSetForGUIDFieldErr,
          SourceFieldRef.RELATION,DestinationFieldRef.RELATION,SourceFieldRef.NAME,DestinationFieldRef.NAME);
      END;
    END;

    LOCAL PROCEDURE ConvertTableToOption@47(SourceFieldRef@1000 : FieldRef;VAR OptionValue@1001 : Integer) TableIsMapped : Boolean;
    VAR
      CRMOptionMapping@1003 : Record 5334;
      RecordRef@1002 : RecordRef;
      RecID@1006 : RecordID;
    BEGIN
      //NOTE: This local function copied from Microsoft code unit 5341 at NAV 2017 build 17501
      TableIsMapped := FALSE;
      OptionValue := 0;
      IF IsTableMappedToCRMOption(SourceFieldRef.RELATION) THEN BEGIN
        TableIsMapped := TRUE;
        IF FindRecordIDByPK(SourceFieldRef.RELATION,SourceFieldRef.VALUE,RecID) THEN BEGIN
          CRMOptionMapping.SETRANGE("Record ID",RecID);
          IF CRMOptionMapping.FINDFIRST THEN
            OptionValue := CRMOptionMapping."Option Value";
        END;
        RecordRef.CLOSE;
      END;
      EXIT(TableIsMapped);
    END;

    LOCAL PROCEDURE IsTableMappedToCRMOption@48(TableID@1000 : Integer) : Boolean;
    VAR
      CRMOptionMapping@1001 : Record 5334;
    BEGIN
      //NOTE: This local function copied from Microsoft code unit 5341 at NAV 2017 build 17501
      CRMOptionMapping.SETRANGE("Table ID",TableID);
      EXIT(NOT CRMOptionMapping.ISEMPTY);
    END;

    LOCAL PROCEDURE FindRecordIDByPK@50(TableID@1000 : Integer;PrimaryKey@1001 : Variant;VAR RecID@1002 : RecordID) Found : Boolean;
    VAR
      RecordRef@1005 : RecordRef;
      KeyRef@1004 : KeyRef;
      FieldRef@1003 : FieldRef;
    BEGIN
      //NOTE: This local function copied from Microsoft code unit 5341 at NAV 2017 build 17501
      RecordRef.OPEN(TableID);
      KeyRef := RecordRef.KEYINDEX(1);
      FieldRef := KeyRef.FIELDINDEX(1);
      FieldRef.SETRANGE(PrimaryKey);
      Found := RecordRef.FINDFIRST;
      RecID := RecordRef.RECORDID;
      RecordRef.CLOSE;
    END;

    BEGIN
    {
      4PS PD(metx) 20-12-2017 XRM-4PS Integration. Initial release. This unit handles specific copying of tables and fields between systems.
      4PS PD(uk) 20-01-2019 XRM-4PS Integration changes.
    }
    END.
  }
}

