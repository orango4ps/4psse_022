OBJECT Codeunit 11012355 Proj. Invent. Delivery-Reserve
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1100528603 : TextConst 'DEU=muss ausgefÅllt sein, wenn eine Menge reserviert ist;ENU=must be filled in when a quantity is reserved;NLD=moet ingevuld worden als er reserveringen zijn.;NOR=MÜ fylles ut nÜr et antall er reservert;SVE=ska fyllas i nÑr ett antal Ñr reserverade';
      Text004@1100528601 : TextConst 'DEU=darf nicht geÑndert werden, wenn eine Menge reserviert ist;ENU=must not be changed when a quantity is reserved;NLD=mag niet gewijzigd worden als er reserveringen zijn.;NOR=skal ikke endres nÜr et antall reserveres;SVE=fÜr inte Ñndras nÑr ett antal Ñr reserverade';
      Text11012000@1100528602 : TextConst 'DEU=FÅr Artikel %1 in %2 wurde Artikelverfolgung definiert.\Sie mÅssen die vorhandene Artikelverfolgung lîschen, bevor die %2 bearbeitet oder gelîscht werden kînnen.;ENU=Item tracking is defined for item %1 in the %2.\You must delete the existing item tracking before modifying or deleting the %2.;NLD=Artikeltracering is gedefinieerd voor de %1 in %2.\U moet de bestaande artikeltracering verwijderen voor u de %2 wijzigt of verwijdert.;NOR=Varesporing er definert for %1 i %2.\Du mÜ fjerne eksisterende artikkelsporing fõr du kan endre eller fjerne%2.;SVE=ArtikelspÜrning har definierats fîr %1 i %2.\Du mÜste ta bort befintlig artikelspÜrning innan du kan Ñndra eller ta bort %2.';
      ReservMgt@1100528604 : Codeunit 99000845;
      DeleteItemTracking@1100528605 : Boolean;

    PROCEDURE FilterReservFor@1100528605(VAR FilterReservEntry@1000 : Record 11071900;ProjectInventoryDelivery@1100528600 : Record 11012671);
    BEGIN
      FilterReservEntry.SETCURRENTKEY(
        "Source ID","Source Ref. No.","Source Type","Source Subtype",
        "Source Batch Name","Source Prod. Order Line","Reservation Status",
        "Shipment Date","Expected Receipt Date");

      FilterReservEntry.SETRANGE("Source Type",DATABASE::"Project Inventory Delivery");
      FilterReservEntry.SETRANGE("Source Subtype",GetSourceSubtype(ProjectInventoryDelivery));
      FilterReservEntry.SETRANGE("Source ID",ProjectInventoryDelivery."Project No.");
      FilterReservEntry.SETRANGE("Source Ref. No.",ProjectInventoryDelivery."Line No.");
    END;

    PROCEDURE FindReservEntry@1100528606(ProjectInventoryDelivery@1000 : Record 11012671) : Boolean;
    VAR
      NSReservEntry@1100528600 : Record 11071900;
    BEGIN
      FilterReservFor(NSReservEntry,ProjectInventoryDelivery);
      EXIT(NSReservEntry.FINDLAST);
    END;

    PROCEDURE ReservEntryExist@11(ProjectInventoryDelivery@1100528601 : Record 11012671) : Boolean;
    VAR
      NSReservEntry@1100528600 : Record 11071900;
    BEGIN
      FilterReservFor(NSReservEntry, ProjectInventoryDelivery);
      EXIT(NOT NSReservEntry.ISEMPTY);
    END;

    PROCEDURE FindTrackingSpecification@1100528607(ProjectInventoryDelivery@1100528600 : Record 11012671) : Boolean;
    VAR
      NSTrackingSpecification@1100528602 : Record 11071901;
    BEGIN
      NSTrackingSpecification.SETCURRENTKEY(
        "Source ID","Source Type","Source Subtype","Source Batch Name",
        "Source Prod. Order Line","Source Ref. No.");

      NSTrackingSpecification.SETRANGE("Source Type",DATABASE::"Project Inventory Delivery");
      NSTrackingSpecification.SETRANGE("Source Subtype",GetSourceSubtype(ProjectInventoryDelivery));
      NSTrackingSpecification.SETRANGE("Source ID",ProjectInventoryDelivery."Project No.");
      NSTrackingSpecification.SETRANGE("Source Ref. No.",ProjectInventoryDelivery."Line No.");

      EXIT(NSTrackingSpecification.FINDLAST);
    END;

    PROCEDURE VerifyChange@62(VAR NewProjectInventoryDelivery@1100528602 : Record 11012671;VAR OldProjectInventoryDelivery@1100528601 : Record 11012671);
    VAR
      ProjectInventoryDelivery@1100528600 : Record 11012671;
      ItemTrackManagement@1006 : Codeunit 6500;
      ShowError@1003 : Boolean;
      HasError@1004 : Boolean;
      SNRequired@1007 : Boolean;
      LNRequired@1008 : Boolean;
    BEGIN
      IF NewProjectInventoryDelivery."Line No." = 0 THEN
        IF NOT ProjectInventoryDelivery.GET(
                 NewProjectInventoryDelivery."Project No.",
                 NewProjectInventoryDelivery."Line No.")
        THEN
          EXIT;

      NewProjectInventoryDelivery.CALCFIELDS("Reserved Qty. (Base)");
      ShowError := (NewProjectInventoryDelivery."Reserved Qty. (Base)" <> 0);

      IF NewProjectInventoryDelivery."Posting Date" = 0D THEN
        IF ShowError THEN
          NewProjectInventoryDelivery.FIELDERROR("Posting Date",Text001)
        ELSE
          HasError := TRUE;

      IF NewProjectInventoryDelivery."Item No." <> OldProjectInventoryDelivery."Item No." THEN
        IF ShowError THEN
          NewProjectInventoryDelivery.FIELDERROR("Item No.",Text004)
        ELSE
          HasError := TRUE;

      IF NewProjectInventoryDelivery."Entry Type" <> OldProjectInventoryDelivery."Entry Type" THEN
        IF ShowError THEN
          NewProjectInventoryDelivery.FIELDERROR("Entry Type",Text004)
        ELSE
          HasError := TRUE;

      IF (NewProjectInventoryDelivery."Entry Type" = NewProjectInventoryDelivery."Entry Type"::Transfer) AND
         (NewProjectInventoryDelivery.Quantity < 0)
      THEN BEGIN
        IF (NewProjectInventoryDelivery."New Location Code" <> OldProjectInventoryDelivery."New Location Code") THEN
          IF ShowError THEN
            NewProjectInventoryDelivery.FIELDERROR("New Location Code",Text004)
          ELSE
            HasError := TRUE;
        IF NewProjectInventoryDelivery."New Bin Code" <> OldProjectInventoryDelivery."New Bin Code" THEN BEGIN
          ItemTrackManagement.CheckWhseItemTrkgSetup(NewProjectInventoryDelivery."Item No.",SNRequired,LNRequired,FALSE);
          IF SNRequired OR LNRequired THEN
            IF ShowError THEN
              NewProjectInventoryDelivery.FIELDERROR("New Bin Code",Text004)
            ELSE
              HasError := TRUE;
        END
      END ELSE BEGIN
        IF (NewProjectInventoryDelivery."Location Code" <> OldProjectInventoryDelivery."Location Code") THEN
          IF ShowError THEN
            NewProjectInventoryDelivery.FIELDERROR("Location Code",Text004)
          ELSE
            HasError := TRUE;
        IF NewProjectInventoryDelivery."Bin Code" <> OldProjectInventoryDelivery."Bin Code" THEN BEGIN
          ItemTrackManagement.CheckWhseItemTrkgSetup(NewProjectInventoryDelivery."Item No.",SNRequired,LNRequired,FALSE);
          IF SNRequired OR LNRequired THEN
            IF ShowError THEN
              NewProjectInventoryDelivery.FIELDERROR("Bin Code",Text004)
            ELSE
              HasError := TRUE;
        END
      END;
      IF NewProjectInventoryDelivery."Variant Code" <> OldProjectInventoryDelivery."Variant Code" THEN
        IF ShowError THEN
          NewProjectInventoryDelivery.FIELDERROR("Variant Code",Text004)
        ELSE
          HasError := TRUE;
      IF NewProjectInventoryDelivery."Line No." <> OldProjectInventoryDelivery."Line No." THEN
        HasError := TRUE;

      IF NewProjectInventoryDelivery."Project No." <> OldProjectInventoryDelivery."Project No." THEN
        IF ShowError THEN
          NewProjectInventoryDelivery.FIELDERROR("Project No.",Text004)
        ELSE
          HasError := TRUE;

      IF HasError THEN
        IF FindReservEntry(OldProjectInventoryDelivery) OR FindTrackingSpecification(OldProjectInventoryDelivery) THEN
          ERROR(Text11012000,OldProjectInventoryDelivery."Item No.",OldProjectInventoryDelivery.TABLECAPTION);
    END;

    PROCEDURE VerifyQuantity@3(VAR NewProjectInventoryDelivery@1001 : Record 11012671;VAR OldProjectInventoryDelivery@1000 : Record 11012671);
    VAR
      ProjectInventoryDelivery@1100528600 : Record 11012671;
    BEGIN
      WITH NewProjectInventoryDelivery DO BEGIN
        IF "Line No." = OldProjectInventoryDelivery."Line No." THEN
          IF Quantity = OldProjectInventoryDelivery.Quantity THEN
            EXIT;
        IF "Line No." = 0 THEN
          IF NOT ProjectInventoryDelivery.GET("Project No.","Line No.") THEN
            EXIT;

        ReservMgt.SetProjectInventoryDelivery(NewProjectInventoryDelivery,GetSourceSubtype(ProjectInventoryDelivery));
        IF Quantity * OldProjectInventoryDelivery.Quantity < 0 THEN
          ReservMgt.DeleteNSReservEntries(TRUE,0)
        ELSE
          ReservMgt.DeleteNSReservEntries(FALSE,Quantity);
      END;
    END;

    PROCEDURE DeleteLineConfirm@20(VAR ProjectInventoryDelivery@1000 : Record 11012671) : Boolean;
    BEGIN
      IF NOT ReservEntryExist(ProjectInventoryDelivery) THEN
        EXIT(TRUE);

      ReservMgt.SetProjectInventoryDelivery(ProjectInventoryDelivery,GetSourceSubtype(ProjectInventoryDelivery));
      IF ReservMgt.DeleteItemTrackingConfirm THEN
        DeleteItemTracking := TRUE;

      EXIT(DeleteItemTracking);
    END;

    PROCEDURE DeleteLine@2(VAR ProjectInventoryDelivery@1100528600 : Record 11012671);
    BEGIN
      ReservMgt.SetProjectInventoryDelivery(ProjectInventoryDelivery,GetSourceSubtype(ProjectInventoryDelivery));
      IF DeleteItemTracking THEN
        ReservMgt.SetItemTrackingHandling(1); // Allow Deletion
      ReservMgt.DeleteNSReservEntries(TRUE,0);
    END;

    PROCEDURE CallItemTracking@1100528602(VAR ProjectInventoryDelivery@1003 : Record 11012671);
    VAR
      TrackingSpecification@1001 : Record 336;
      ItemTrackingForm@1002 : Page 6510;
    BEGIN
      InitTrackingSpecification(ProjectInventoryDelivery,TrackingSpecification,FALSE);
      ItemTrackingForm.SetCalledFromNonStock(TRUE, ProjectInventoryDelivery."Project No.", '');
      ItemTrackingForm.SetSourceSpec(TrackingSpecification,ProjectInventoryDelivery."Posting Date");
      ItemTrackingForm.RUNMODAL;
    END;

    LOCAL PROCEDURE InitTrackingSpecification@1100528603(VAR ProjectInventoryDelivery@1100528600 : Record 11012671;VAR TrackingSpecification@1003 : Record 336;Consume@1000 : Boolean);
    BEGIN
      TrackingSpecification.INIT;
      TrackingSpecification."Source Type" := DATABASE::"Project Inventory Delivery";
      WITH ProjectInventoryDelivery DO BEGIN
        TrackingSpecification."Item No." := "Item No.";
        TrackingSpecification."Location Code" := "Location Code";
        TrackingSpecification.Description := Description;
        TrackingSpecification."Variant Code" := "Variant Code";
        TrackingSpecification."Source Subtype" := GetSourceSubtype(ProjectInventoryDelivery);
        TrackingSpecification."Source ID" := "Project No.";
        TrackingSpecification."Source Batch Name" := '';
        TrackingSpecification."Source Prod. Order Line" := 0;
        TrackingSpecification."Source Ref. No." := "Line No.";
        TrackingSpecification."Quantity (Base)" := Quantity;
        TrackingSpecification."Qty. to Handle" := Quantity;
        TrackingSpecification."Qty. to Handle (Base)" := Quantity;
        TrackingSpecification."Qty. to Invoice" := 0;
        TrackingSpecification."Qty. to Invoice (Base)" := 0;
        TrackingSpecification."Quantity Handled (Base)" := 0;
        TrackingSpecification."Quantity Invoiced (Base)" := 0;
        TrackingSpecification."Qty. per Unit of Measure" := 1;
      END;
    END;

    LOCAL PROCEDURE GetSourceSubtype@1100528608(ProjectInventoryDelivery@1100528600 : Record 11012671) SourceSubtype : Integer;
    BEGIN
      WITH ProjectInventoryDelivery DO
        CASE "Entry Type" OF
          "Entry Type"::Delivery,
          "Entry Type"::"Negative Adjmt.":
            SourceSubtype := 1;
          "Entry Type"::"Positive Adjmt.":
            SourceSubtype := 2;
          "Entry Type"::Transfer:
            SourceSubtype := 3;
        END;
    END;

    BEGIN
    END.
  }
}

