OBJECT Table 6085730 Purch. Allocation Header
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=DCW17.00.00.5.00,4PS14.00;
  }
  PROPERTIES
  {
    Permissions=TableData 6085730=md,
                TableData 6085731=imd;
    OnInsert=BEGIN
               DCSetup.GET;

               IF "No." = '' THEN BEGIN
                 TestNoSeries;
                 NoSeriesMgt.InitSeries(DCSetup."Purch. Allocation Nos.",xRec."No. Series","Posting Date","No.","No. Series");
               END;

               IF NOT SkipCopyDim THEN
                 UpdateFieldFromPurchHeader;
             END;

    OnModify=BEGIN
               TESTFIELD(Status,Status::Open);
             END;

    OnDelete=VAR
               PurchAllocLine@161024012 : Record 6085731;
             BEGIN
               CASE Status OF
                 Status::Posted:
                   ERROR(Text002);
                 Status::Reversed:
                   ERROR(Text006);
               END;

               PurchAllocLine.SETRANGE("Document No.","No.");
               PurchAllocLine.DELETEALL(TRUE);
             END;

    CaptionML=[DEU=Einkaufszuordnungskopf;
               ENU=Purchase Allocation Header;
               NLD=Inkoopallocatie Header];
    LookupPageID=Page6085732;
    DrillDownPageID=Page6085732;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  DCSetup.GET;
                                                                  NoSeriesMgt.TestManual(DCSetup."Purch. Allocation Nos.");
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[DEU=Nr.;
                                                              ENU=No.;
                                                              NLD=Nr.;
                                                              NOR=Nr.;
                                                              SVE=Nr] }
    { 2   ;   ;Document Type       ;Option        ;CaptionML=[DEU=Belegart;
                                                              ENU=Document Type;
                                                              NLD=Documentsoort;
                                                              NOR=Bilagstype;
                                                              SVE=Dokumenttyp];
                                                   OptionCaptionML=[DEU=Angebot,Auftrag,Rechnung,Gutschrift,Rahmenauftrag,Reklamation;
                                                                    ENU=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order;
                                                                    NLD=Offerte,Order,Factuur,Creditnota,Raamcontract,Retourorder;
                                                                    NOR=Tilbud,Ordre,Faktura,Kreditnota,Rammeordre,Returordre;
                                                                    SVE=Offert,Order,Faktura,Kreditnota,Avropsorder,Returorder];
                                                   OptionString=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order;
                                                   Editable=No }
    { 3   ;   ;Document No.        ;Code20        ;TableRelation="Purchase Header".No. WHERE (Document Type=FIELD(Document Type));
                                                   OnValidate=BEGIN
                                                                IF "No." <> '' THEN
                                                                  UpdateFieldFromPurchHeader;
                                                              END;

                                                   CaptionML=[DEU=Belegnr.;
                                                              ENU=Document No.;
                                                              NLD=Documentnr.;
                                                              NOR=Bilagsnr.;
                                                              SVE=Dokumentnr];
                                                   Editable=No }
    { 4   ;   ;Posting Date        ;Date          ;OnValidate=BEGIN
                                                                IF "Currency Code" <> '' THEN BEGIN
                                                                  UpdateCurrencyFactor;
                                                                  IF "Currency Factor" <> xRec."Currency Factor" THEN BEGIN
                                                                    IF CONFIRM(Text003,FALSE) THEN
                                                                      VALIDATE("Currency Factor")
                                                                    ELSE
                                                                      "Currency Factor" := xRec."Currency Factor";
                                                                    END;
                                                                END;
                                                              END;

                                                   CaptionML=[DEU=Buchungsdatum;
                                                              ENU=Posting Date;
                                                              NLD=Boekingsdatum;
                                                              NOR=Bokf›ringsdato;
                                                              SVE=Bokf”ringsdatum] }
    { 7   ;   ;Pay-to Vendor No.   ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=[DEU=Zahlung an Kred.-Nr.;
                                                              ENU=Pay-to Vendor No.;
                                                              NLD=Betalen aan;
                                                              NOR=Betal til-levrd.nr.;
                                                              SVE=Betalningsleverant”rsnr];
                                                   Editable=No }
    { 8   ;   ;Pay-to Name         ;Text50        ;CaptionML=[DEU=Zahlung an Name;
                                                              ENU=Pay-to Name;
                                                              NLD=Factuurnaam;
                                                              NOR=Betal til-navn;
                                                              SVE=Betalningsnamn] }
    { 9   ;   ;Vendor Invoice No.  ;Code35        ;CaptionML=[DEU=Kred.-Rechnungsnr.;
                                                              ENU=Vendor Invoice No.;
                                                              NLD=Factuurnr. leverancier;
                                                              NOR=Leverand›rs fakturanr.;
                                                              SVE=Leverant”rens fakturanr] }
    { 10  ;   ;Vendor Cr. Memo No. ;Code35        ;CaptionML=[DEU=Kred.-Gutschriftsnr.;
                                                              ENU=Vendor Cr. Memo No.;
                                                              NLD=Creditnotanr. leverancier;
                                                              NOR=Leverand›rs kreditnotanr.;
                                                              SVE=Leverant”rens kreditnotanr] }
    { 11  ;   ;Vendor Posting Group;Code20        ;TableRelation="Vendor Posting Group";
                                                   CaptionML=[DEU=Kreditorenbuchungsgruppe;
                                                              ENU=Vendor Posting Group;
                                                              NLD=Leveranciersboekingsgroep;
                                                              NOR=Leverand›rsbokf›ringsmal;
                                                              SVE=Leverant”rsbokf”ringsmall] }
    { 12  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                IF "Currency Code" <> xRec."Currency Code" THEN BEGIN
                                                                  UpdateCurrencyFactor;
                                                                  RecreatePurchAllocLines;
                                                                END;
                                                              END;

                                                   CaptionML=[DEU=W„hrungscode;
                                                              ENU=Currency Code;
                                                              NLD=Valutacode;
                                                              NOR=Valutakode;
                                                              SVE=Valutakod] }
    { 13  ;   ;Currency Factor     ;Decimal       ;OnValidate=BEGIN
                                                                UpdateCurrencyFactor;
                                                                RecreatePurchAllocLines;
                                                              END;

                                                   CaptionML=[DEU=W„hrungsfaktor;
                                                              ENU=Currency Factor;
                                                              NLD=Valutafactor;
                                                              NOR=Valutafaktor;
                                                              SVE=Valutafaktor] }
    { 14  ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=[DEU=Nummernserie;
                                                              ENU=No. Series;
                                                              NLD=Nr.-reeksen;
                                                              NOR=Nr.serie;
                                                              SVE=Nr-serie] }
    { 15  ;   ;Status              ;Option        ;CaptionML=[DEU=Status;
                                                              ENU=Status;
                                                              NLD=Status;
                                                              NOR=Status;
                                                              SVE=Status];
                                                   OptionCaptionML=[DEU=Offen,Gebucht,Umgekehrt;
                                                                    ENU=Open,Posted,Reversed;
                                                                    NLD=Open,Geboekt,Reversed];
                                                   OptionString=Open,Posted,Reversed;
                                                   Editable=No }
    { 16  ;   ;Gen. Bus. Posting Group;Code20     ;TableRelation="Gen. Business Posting Group";
                                                   CaptionML=[DEU=Gesch„ftsbuchungsgruppe;
                                                              ENU=Gen. Bus. Posting Group;
                                                              NLD=Bedrijfsboekingsgroep;
                                                              NOR=Bokf›ringsgruppe - firma;
                                                              SVE=Gen. r”relsebokf”ringsmall] }
    { 17  ;   ;VAT Bus. Posting Group;Code20      ;TableRelation="VAT Business Posting Group";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF (xRec."Pay-to Vendor No." = "Pay-to Vendor No.") AND
                                                                   (xRec."VAT Bus. Posting Group" <> "VAT Bus. Posting Group")
                                                                THEN
                                                                  RecreatePurchAllocLines;
                                                              END;

                                                   CaptionML=[DEU=MwSt.-Gesch„ftsbuchungsgruppe;
                                                              ENU=VAT Bus. Posting Group;
                                                              NLD=Btw-bedrijfsboekingsgroep;
                                                              NOR=Mva-bokf›ringsgruppe - firma;
                                                              SVE=Moms r”relsebokf”ringsmall] }
    { 18  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=[DEU=Shortcutdimensionscode 1;
                                                              ENU=Shortcut Dimension 1 Code;
                                                              NLD=Shortcutdimensie 1;
                                                              NOR=Snarvei Dimensjon 1 kode;
                                                              SVE=Genv„g dimension 1 kod];
                                                   Editable=No;
                                                   CaptionClass='1,2,1' }
    { 19  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   CaptionML=[DEU=Shortcutdimensionscode 2;
                                                              ENU=Shortcut Dimension 2 Code;
                                                              NLD=Shortcutdimensie 2;
                                                              NOR=Snarveisdimensjon 2 - kode;
                                                              SVE=Genv„g dimension 2 kod];
                                                   Editable=No;
                                                   CaptionClass='1,2,2' }
    { 20  ;   ;Applies-to Doc. No. ;Code20        ;TableRelation="Purch. Allocation Header";
                                                   CaptionML=[DEU=Ausgleich mit Belegnr.;
                                                              ENU=Applies-to Doc. No.;
                                                              NLD=Vereffeningsnr.;
                                                              NOR=Utligningsbilagsnr.;
                                                              SVE=Kopplas till ver.nr];
                                                   Editable=No }
    { 21  ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   CaptionML=[DEU=Dimensionssatz-ID;
                                                              ENU=Dimension Set ID;
                                                              NLD=Dimensieset-id;
                                                              NOR=Dimensjonssett-ID;
                                                              SVE=Dimensionsupps„ttnings-ID] }
    { 70  ;   ;VAT Registration No.;Text20        ;CaptionML=[DEU=USt-IdNr.;
                                                              ENU=VAT Registration No.;
                                                              NLD=Btw-nummer;
                                                              SVE=Momsregistreringsnr];
                                                   Editable=No }
    { 78  ;   ;VAT Country/Region Code;Code10     ;TableRelation=Country/Region;
                                                   CaptionML=[DEU=MwSt.-L„nder-/Regionscode;
                                                              ENU=VAT Country/Region Code;
                                                              NLD=Btw-land-/regiocode;
                                                              SVE=Momskod f”r land/region];
                                                   Editable=No }
    { 100 ;   ;Buy-from Vendor No. ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=[DEU=Eink. von Kred.-Nr.;
                                                              ENU=Buy-from Vendor No.;
                                                              NLD=Orderleveranciersnr.;
                                                              SVE=Ink”psleverant”rsnr];
                                                   Editable=No }
    { 126 ;   ;Pay-to IC Partner Code;Code20      ;TableRelation="IC Partner";
                                                   CaptionML=[DEU=Zahlung an IC-Partnercode;
                                                              ENU=Pay-to IC Partner Code;
                                                              NLD=IC-partnercode (bet. aan lev.);
                                                              SVE=Konc.int. partnerkod f”r bet.];
                                                   Editable=No }
    { 11012001;;Job No.            ;Code20        ;TableRelation=Job;
                                                   CaptionML=[DEU=Projektnr.;
                                                              ENU=Job No.;
                                                              NLD=Projectnr.;
                                                              NOR=Prosjektnr;
                                                              SVE=Projektnr] }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Document Type,Document No.               }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      DCSetup@161024012 : Record 6085573;
      CurrExchRate@161024014 : Record 330;
      NoSeriesMgt@161024013 : Codeunit 396;
      Text001@161024018 : TextConst 'DEU=Betrag einschl. MwSt. auf Einkaufszuweisung %1 entspricht nicht Betrag einschl. MwSt. auf dem importierten Beleg.;ENU=Amount Incl. VAT (%2) on purchase allocation %1 does not match Amount Incl. VAT (%3) on the imported document.;NLD=Bedrag incl. btw (%2) op inkooptoewijzing %1 komt niet overeen met Bedrag incl. btw (%3) van het geimporteerde document.';
      Text002@161024016 : TextConst 'DEU=Eine gebuchte Einkaufszuweisung kann nicht gel”scht werden, sondern muss umgekehrt werden.;ENU=A posted purchase allocation cannot be deleted. It must be reversed.;NLD=Een geboekte inkooptoewijzing kan niet worden verwijderd, maar moet worden teruggedraaid.';
      Text003@161024015 : TextConst 'DEU=M”chten Sie den Wechselkurs „ndern?;ENU=Do you want to update the exchange rate?;NLD=Wilt u de wisselkoers bijwerken?;NOR=Vil du oppdatere valutakursen?;SVE=Vill du uppdatera valutakursen?';
      Text004@6085573 : TextConst 'DEU=Sie haben unter Umst„nden eine Dimension ge„ndert.\\M”chten Sie die Zeilen aktualisieren?;ENU=You may have changed a dimension.\\Do you want to update the lines?;NLD=U hebt mogelijk een dimensie gewijzigd.\\Wilt u de regels bijwerken?;NOR=Du kan ha endret en dimensjon.\\Vil du oppdatere linjene?;SVE=Du kanske har „ndrat en dimension.\\Vill du uppdatera raderna?';
      Text005@1000 : TextConst 'DEU=Einkaufszuordnung, %1 %2;ENU=Purchase Allocation, %1 %2;NLD=Inkoopallocatie, %1 %2';
      SkipCopyDim@1160040000 : Boolean;
      Text006@1160040001 : TextConst 'DEU=Eine umgekehrte Einkaufszuweisung kann nicht gel”scht werden.;ENU=A reversed purchase allocation cannot be deleted.;NLD=Een omgekeerde inkoopallocatie kan niet verwijderd worden.';

    PROCEDURE AssistEdit@1070002(OldInwRegHeader@1070000 : Record 6085730) : Boolean;
    BEGIN
      DCSetup.GET;
      TestNoSeries;
      IF NoSeriesMgt.SelectSeries(DCSetup."Purch. Allocation Nos.",OldInwRegHeader."No. Series","No. Series") THEN BEGIN
        DCSetup.GET;
        TestNoSeries;
        NoSeriesMgt.SetSeries("No.");
        EXIT(TRUE);
      END;
    END;

    PROCEDURE TestNoSeries@1070003();
    BEGIN
      DCSetup.TESTFIELD("Purch. Allocation Nos.");
    END;

    PROCEDURE UpdateCurrencyFactor@1070000();
    BEGIN
      IF "Currency Code" <> '' THEN BEGIN
        //**4PS.so
        //"Currency Factor" := CurrExchRate.ExchangeRate("Posting Date","Currency Code");
        //**4PS.eo
        //**4PS.sn
        "Currency Factor" := CurrExchRate.ExchangeRate(0,'',"Posting Date","Currency Code",FALSE);
        //**4PS.en
      END ELSE
        "Currency Factor" := 0;
    END;

    PROCEDURE UpdateFieldFromPurchHeader@161024012();
    VAR
      PurchHeader@161024012 : Record 38;
    BEGIN
      IF NOT PurchHeader.GET("Document Type","Document No.") THEN
        EXIT;

      PurchHeader.TESTFIELD("Pay-to Vendor No.");
      "Pay-to Vendor No." := PurchHeader."Pay-to Vendor No.";
      "Pay-to Name" := PurchHeader."Pay-to Name";
      "Posting Date" := PurchHeader."Posting Date";
      "Vendor Invoice No." := PurchHeader."Vendor Invoice No.";
      "Vendor Cr. Memo No." := PurchHeader."Vendor Cr. Memo No.";
      "Vendor Posting Group" := PurchHeader."Vendor Posting Group";
      "Gen. Bus. Posting Group" := PurchHeader."Gen. Bus. Posting Group";
      "VAT Bus. Posting Group" := PurchHeader."VAT Bus. Posting Group";
      "Currency Code" := PurchHeader."Currency Code";
      "Currency Factor" := PurchHeader."Currency Factor";
      "Pay-to IC Partner Code" := PurchHeader."Pay-to IC Partner Code";
      "Buy-from Vendor No." := PurchHeader."Buy-from Vendor No.";
      "VAT Country/Region Code" := PurchHeader."VAT Country/Region Code";
      "VAT Registration No." := PurchHeader."VAT Registration No.";
      "Dimension Set ID" := PurchHeader."Dimension Set ID";
      "Job No." := PurchHeader."Job No."; //**4PS
    END;

    PROCEDURE RecreatePurchAllocLines@4();
    VAR
      PurchAllocLineTmp@1001 : TEMPORARY Record 6085731;
      PurchAllocLine@6085573 : Record 6085731;
      TempInteger@1003 : TEMPORARY Record 2000000026;
      ChangeLogMgt@1011 : Codeunit 423;
      RecRef@1010 : RecordRef;
      xRecRef@1009 : RecordRef;
    BEGIN
      PurchAllocLine.LOCKTABLE;
      xRecRef.GETTABLE(xRec);
      MODIFY;
      RecRef.GETTABLE(Rec);

      PurchAllocLine.RESET;
      PurchAllocLine.SETRANGE("Document No.","No.");
      IF PurchAllocLine.FINDSET THEN BEGIN
        REPEAT
          PurchAllocLineTmp := PurchAllocLine;
          PurchAllocLineTmp.INSERT;
        UNTIL PurchAllocLine.NEXT = 0;

        PurchAllocLine.DELETEALL(TRUE);

        PurchAllocLineTmp.FINDSET;
        REPEAT
          PurchAllocLine.INIT;
          PurchAllocLine."Line No." := PurchAllocLineTmp."Line No.";
          PurchAllocLine.INSERT;
          PurchAllocLine."G/L Account No." := PurchAllocLineTmp."G/L Account No.";
          PurchAllocLine."Gen. Bus. Posting Group" := PurchAllocLineTmp."Gen. Bus. Posting Group";
          PurchAllocLine."Gen. Prod. Posting Group" := PurchAllocLineTmp."Gen. Prod. Posting Group";
          PurchAllocLine."VAT Bus. Posting Group" := PurchAllocLineTmp."VAT Bus. Posting Group";
          PurchAllocLine."VAT Prod. Posting Group" := PurchAllocLineTmp."VAT Prod. Posting Group";
          PurchAllocLine."VAT Calculation Type" := PurchAllocLineTmp."VAT Calculation Type";
          PurchAllocLine."VAT %" := PurchAllocLineTmp."VAT %";
          PurchAllocLine.Description := PurchAllocLineTmp.Description;
          PurchAllocLine."Currency Code" := PurchAllocLineTmp."Currency Code";
          PurchAllocLine."Shortcut Dimension 1 Code" := PurchAllocLineTmp."Shortcut Dimension 1 Code";
          PurchAllocLine."Shortcut Dimension 2 Code" := PurchAllocLineTmp."Shortcut Dimension 2 Code";
          PurchAllocLine."Dimension Set ID" := PurchAllocLineTmp."Dimension Set ID";
          PurchAllocLine."Job No." := PurchAllocLineTmp."Job No."; //**4PS
          PurchAllocLine.MODIFY(TRUE);
        UNTIL PurchAllocLine.NEXT = 0;
      END;

      ChangeLogMgt.LogModification(RecRef);
    END;

    PROCEDURE AutoCreateLines@161024013();
    VAR
      PurchHeader@161024014 : Record 38;
      PurchLine@161024013 : Record 39;
      GLSetup@161024031 : Record 98;
      GLPostSetupDCInfo@161024016 : Record 6085771;
      VendPostingGroupDCInfo@1160040002 : Record 6085768;
      Document@161024022 : Record 6085590;
      Field@161024023 : Record 6085580;
      PurchSetup@161024030 : Record 312;
      PurchAllocLine@161024032 : Record 6085731;
      CaptureMgt@161024026 : Codeunit 6085576;
      PurchDocMgt@161024018 : Codeunit 6085709;
      DimMgt@1160040001 : Codeunit 408;
      DCAppMgt@1160040003 : Codeunit 6085722;
      GLAccountNo@161024017 : Code[20];
      LineAmount@161024015 : Decimal;
      ImportAmtExclVAT@161024019 : Decimal;
      ImportAmtInclVAT@161024020 : Decimal;
      FieldAmtExclVAT@1160040004 : Decimal;
      LinesAmountInclVAT@161024027 : Decimal;
      TempAmount@161024021 : Decimal;
      FAPostingGroup@1000000000 : Record 5606;
      TestForVATDiff@1160040007 : Boolean;
      VATDiffOK@1160040005 : Boolean;
    BEGIN
      //The code has been merged but contained errors that could prevent import
      //and the code has been put in comments. Use Shift+Ctrl+O to Uncomment
      TESTFIELD(Status,Status::Open);

      PurchAllocLine.SETRANGE("Document No.","No.");
      PurchAllocLine.DELETEALL(TRUE);

      DCSetup.GET;
      GLSetup.GET;

      PurchHeader.GET("Document Type","Document No.");

      "Currency Code" := PurchHeader."Currency Code";
      "Currency Factor" := PurchHeader."Currency Factor";
      MODIFY;

      PurchDocMgt.GetDocumentHeaderAmounts(PurchHeader,ImportAmtExclVAT,ImportAmtInclVAT,TempAmount,TempAmount);

      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","Document No.");
      PurchLine.SETFILTER("Line Amount",'<>%1',0);

      CASE TRUE OF
        // System has been set up to use the accounts and amounts on Purchase Lines
        (DCSetup."Purch. Alloc. Amounts to Use" = DCSetup."Purch. Alloc. Amounts to Use"::"Use Lines or Imported Amounts") AND
          NOT PurchLine.ISEMPTY:
        BEGIN
          PurchLine.FINDSET;
          REPEAT
            IF PurchLine.Type = PurchLine.Type::"G/L Account" THEN BEGIN
              DCSetup.GET;
              IF DCSetup."Purch. Alloc. G/L Account Type" = DCSetup."Purch. Alloc. G/L Account Type"::"Use Posting Setup" THEN BEGIN
                GLPostSetupDCInfo.GET(PurchLine."Gen. Bus. Posting Group",PurchLine."Gen. Prod. Posting Group");
                GLPostSetupDCInfo.TESTFIELD("Purch. Account (Allocation)");
                GLAccountNo := GLPostSetupDCInfo."Purch. Account (Allocation)";
              END ELSE
                GLAccountNo := PurchLine."No.";
            END ELSE BEGIN
              //**4PS.sn
              CASE PurchLine.Type OF
                PurchLine.Type::"Fixed Asset" :
                  BEGIN
                    FAPostingGroup.GET(PurchLine."Posting Group");
                    FAPostingGroup.TESTFIELD("Acquisition Cost Account");
                    GLAccountNo := FAPostingGroup."Acquisition Cost Account";
                  END;
                ELSE BEGIN
                //**4PS.en
                  GLPostSetupDCInfo.GET(PurchLine."Gen. Bus. Posting Group",PurchLine."Gen. Prod. Posting Group");
                  //META001
                  //GLPostSetupDCInfo.TESTFIELD("Purch. Allocation Account");
                  //GLAccountNo := GLPostSetupDCInfo."Purch. Allocation Account";
                  GLPostSetupDCInfo.TESTFIELD(GLPostSetupDCInfo."Purch. Account (Allocation)");
                  GLAccountNo := GLPostSetupDCInfo."Purch. Account (Allocation)";
                  //META001
              //**4PS.sn
                END;
              END;
              //**4PS.en
            END;

            PurchAllocLine.INIT;
            PurchAllocLine."Document No." := "No.";
            PurchAllocLine."Line No." := PurchLine."Line No.";
            PurchAllocLine.INSERT;
            PurchAllocLine."G/L Account No." := GLAccountNo;
            PurchAllocLine."Gen. Bus. Posting Group" := PurchLine."Gen. Bus. Posting Group";
            PurchAllocLine."Gen. Prod. Posting Group" := PurchLine."Gen. Prod. Posting Group";
            PurchAllocLine."VAT Bus. Posting Group" := PurchLine."VAT Bus. Posting Group";
            PurchAllocLine."VAT Prod. Posting Group" := PurchLine."VAT Prod. Posting Group";
            PurchAllocLine."VAT Calculation Type" := PurchLine."VAT Calculation Type";
            PurchAllocLine."VAT Identifier" := PurchLine."VAT Identifier";
            PurchAllocLine."VAT %" := PurchLine."VAT %";
            PurchAllocLine."Currency Code" := "Currency Code";

            IF PurchHeader."Prices Including VAT" THEN
              PurchAllocLine.VALIDATE("Amount Including VAT",PurchLine."Line Amount")
            ELSE
              PurchAllocLine.VALIDATE(Amount,PurchLine."Line Amount");

            PurchAllocLine.VALIDATE("VAT Difference",PurchLine."VAT Difference");
            PurchAllocLine.VALIDATE(Description,COPYSTR(PurchLine.Description,1,MAXSTRLEN(PurchAllocLine.Description)));
            PurchAllocLine."Shortcut Dimension 1 Code" := PurchLine."Shortcut Dimension 1 Code";
            PurchAllocLine."Shortcut Dimension 2 Code" := PurchLine."Shortcut Dimension 2 Code";
            PurchAllocLine."Dimension Set ID" := PurchLine."Dimension Set ID";
            //**4PS.sn
            PurchAllocLine."Job No." := PurchLine."Job No.";
            PurchAllocLine.Quantity := PurchLine.Quantity;
            PurchAllocLine."Unit of Measure Code" := PurchLine."Unit of Measure Code";
            PurchAllocLine."Purchase Action" := PurchLine."Purchase Action";
            //**4PS.en
            PurchAllocLine.MODIFY(TRUE);
          UNTIL PurchLine.NEXT = 0;
        END;

        // This will return true if the source of the purchase document is a DC Document
        PurchDocMgt.GetPurchaseDocument(PurchHeader,Document):
          BEGIN
            Field.SETRANGE("Template No.",Document."Template No.");
            Field.SETRANGE(Type,Field.Type::Header);
            Field.SETRANGE("Data Type",Field."Data Type"::Number);
            Field.SETFILTER("Transfer Amount to Document",'<>%1',Field."Transfer Amount to Document"::" ");

            IF Field.FINDSET THEN
              REPEAT
                FieldAmtExclVAT := CaptureMgt.GetDecimal(Document,Field.Type,Field.Code,0);

                // FIND POTENTIAL AMOUNTS (FROM OTHER TEMPLATE FIELDS) TO BE SUBTRACTED
                FieldAmtExclVAT -= CaptureMgt.GetAmountToSubtract(Document,Field);

                IF FieldAmtExclVAT <> 0 THEN BEGIN
                  IF Field."Purch. Alloc. G/L Account No." <> '' THEN
                    GLAccountNo := Field."Purch. Alloc. G/L Account No."
                  ELSE BEGIN
                    VendPostingGroupDCInfo.GET("Vendor Posting Group");
                    VendPostingGroupDCInfo.TESTFIELD("Purch. Account (Allocation)");
                    GLAccountNo := VendPostingGroupDCInfo."Purch. Account (Allocation)";
                  END;

                  CreateLine(GLAccountNo,FieldAmtExclVAT);
                END;
              UNTIL Field.NEXT = 0;

              TestForVATDiff := TRUE;
            END;

        // Imported amount is not 0, but it is not a DC Document - then it is a eDocument
        ImportAmtExclVAT <> 0:
          BEGIN
            VendPostingGroupDCInfo.GET("Vendor Posting Group");
            VendPostingGroupDCInfo.TESTFIELD("Purch. Account (Allocation)");
            GLAccountNo := VendPostingGroupDCInfo."Purch. Account (Allocation)";

            CreateLine(GLAccountNo,ImportAmtExclVAT);

            TestForVATDiff := TRUE;
          END;

        ELSE
          EXIT;
      END;

      IF TestForVATDiff THEN BEGIN
        PurchAllocLine.SETRANGE("Document No.","No.");
        PurchAllocLine.CALCSUMS("Amount Including VAT");
        LinesAmountInclVAT := PurchAllocLine."Amount Including VAT";

        IF ImportAmtInclVAT <> LinesAmountInclVAT THEN BEGIN
          PurchSetup.GET;
          IF PurchSetup."Allow VAT Difference" THEN BEGIN
            GLSetup.GET;
            IF GLSetup."Max. VAT Difference Allowed" >= ABS(ImportAmtInclVAT - LinesAmountInclVAT) THEN BEGIN
              PurchAllocLine.RESET;
              PurchAllocLine.SETRANGE("Document No.","No.");
              PurchAllocLine.FINDFIRST;
              PurchAllocLine.VALIDATE("VAT Difference",ImportAmtInclVAT - LinesAmountInclVAT);
              PurchAllocLine.MODIFY(TRUE);
              VATDiffOK := TRUE;
            END;
          END;

          IF NOT VATDiffOK THEN
            MESSAGE(Text001,"No.",DCAppMgt.FormatAmount(LinesAmountInclVAT,"Currency Code"),
              DCAppMgt.FormatAmount(ImportAmtInclVAT,"Currency Code"));
        END;
      END;
    END;

    PROCEDURE CreateLine@1160040014(GLAccountNo@1160040000 : Code[20];Amount@1160040003 : Decimal);
    VAR
      GLAcc@1160040001 : Record 15;
      PurchAllocLine@1160040002 : Record 6085731;
      DimMgt@1160040005 : Codeunit 408;
      CurrLineNo@6085573 : Integer;
    BEGIN
      GLAcc.GET(GLAccountNo);
      GLAcc.TESTFIELD("Gen. Prod. Posting Group");
      GLAcc.TESTFIELD("VAT Prod. Posting Group");

      PurchAllocLine.SETRANGE("Document No.","No.");
      IF PurchAllocLine.FINDLAST THEN
        CurrLineNo := PurchAllocLine."Line No."
      ELSE
        CurrLineNo := 0;

      PurchAllocLine.INIT;
      PurchAllocLine."Document No." := "No.";
      PurchAllocLine."Line No." := CurrLineNo + 10000;
      PurchAllocLine.INSERT;
      PurchAllocLine.SetupNewLine;
      PurchAllocLine.VALIDATE("G/L Account No.",GLAccountNo);
      PurchAllocLine.VALIDATE(Description,
        COPYSTR(STRSUBSTNO(Text005,"Document Type","Document No."),1,MAXSTRLEN(PurchAllocLine.Description)));
      PurchAllocLine.VALIDATE("Gen. Bus. Posting Group","Gen. Bus. Posting Group");
      PurchAllocLine.VALIDATE("VAT Bus. Posting Group","VAT Bus. Posting Group");
      PurchAllocLine.VALIDATE(Amount,Amount);
      PurchAllocLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
      PurchAllocLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
      PurchAllocLine."Dimension Set ID" := "Dimension Set ID";
      PurchAllocLine.MODIFY(TRUE);
    END;

    PROCEDURE ReverseAll@161024015(PurchHeader@161024012 : Record 38);
    VAR
      PurchAllocHeader@161024013 : Record 6085730;
    BEGIN
      PurchAllocHeader.SETCURRENTKEY("Document Type","Document No.");
      PurchAllocHeader.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchAllocHeader.SETRANGE("Document No.",PurchHeader."No.");
      PurchAllocHeader.SETRANGE(Status,PurchAllocHeader.Status::Posted);
      IF PurchAllocHeader.FINDSET(TRUE,TRUE) THEN
        REPEAT
          CODEUNIT.RUN(CODEUNIT::"Purch. Alloc.-Reverse",PurchAllocHeader);
        UNTIL PurchAllocHeader.NEXT = 0;

      PurchAllocHeader.SETRANGE(Status,PurchAllocHeader.Status::Open);
      PurchAllocHeader.DELETEALL(TRUE);
    END;

    PROCEDURE ShowDocDim@32();
    VAR
      DimMgt@6085573 : Codeunit 408;
      OldDimSetID@1000 : Integer;
    BEGIN
      IF Status <> Status::Open THEN BEGIN
        DimMgt.ShowDimensionSet("Dimension Set ID",STRSUBSTNO('%1',"No."));
        EXIT;
      END;

      OldDimSetID := "Dimension Set ID";
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet2(
          "Dimension Set ID",STRSUBSTNO('%1',"No."),
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");

      IF OldDimSetID <> "Dimension Set ID" THEN BEGIN
        MODIFY;
        IF AllocLinesExist THEN
          UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      END;
    END;

    PROCEDURE SetSkipCopyDim@1160040000(NewSkipCopyDim@1160040000 : Boolean);
    BEGIN
      SkipCopyDim := NewSkipCopyDim;
    END;

    LOCAL PROCEDURE UpdateAllLineDim@34(NewParentDimSetID@1000 : Integer;OldParentDimSetID@1001 : Integer);
    VAR
      PurchAllocLine@6085573 : Record 6085731;
      DimMgt@6085574 : Codeunit 408;
      NewDimSetID@1002 : Integer;
    BEGIN
      // Update all lines with changed dimensions.

      IF NewParentDimSetID = OldParentDimSetID THEN
        EXIT;
      IF NOT CONFIRM(Text004) THEN
        EXIT;

      PurchAllocLine.SETRANGE("Document No.","No.");
      PurchAllocLine.LOCKTABLE;
      IF PurchAllocLine.FINDSET(TRUE,FALSE) THEN
        REPEAT
          NewDimSetID := DimMgt.GetDeltaDimSetID(PurchAllocLine."Dimension Set ID",NewParentDimSetID,OldParentDimSetID);
          IF PurchAllocLine."Dimension Set ID" <> NewDimSetID THEN BEGIN
            PurchAllocLine."Dimension Set ID" := NewDimSetID;
            PurchAllocLine.MODIFY;
          END;
        UNTIL PurchAllocLine.NEXT = 0;
    END;

    PROCEDURE AllocLinesExist@3() : Boolean;
    VAR
      PurchAllocLine@6085573 : Record 6085731;
    BEGIN
      PurchAllocLine.RESET;
      PurchAllocLine.SETRANGE("Document No.","No.");
      EXIT(NOT PurchAllocLine.ISEMPTY);
    END;

    BEGIN
    {
      4PS New Field 'Job No.'
      4PS Changed Handling of Fixed Assets
      4PS Create Purchase Alloctation per Purchase Line aan not based on Allocation Buffer.
      META001 04-09-2018 Continia-Upgrade BNJ Function AutoCreateLines modified to refer to changed field name.
    }
    END.
  }
}

