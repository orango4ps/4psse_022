OBJECT Codeunit 12013589 Exflow-Check Head
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EXF510000,EXFFI1.01,4PS;
  }
  PROPERTIES
  {
    TableNo=12013587;
    Permissions=TableData 36=m,
                TableData 37=m,
                TableData 39=imd,
                TableData 49=imd,
                TableData 93=imd,
                TableData 94=imd,
                TableData 110=imd,
                TableData 111=imd,
                TableData 120=imd,
                TableData 121=imd,
                TableData 122=imd,
                TableData 123=imd,
                TableData 124=imd,
                TableData 125=imd,
                TableData 223=imd,
                TableData 357=imd,
                TableData 359=imd,
                TableData 6507=ri,
                TableData 6508=rid,
                TableData 6650=imd,
                TableData 6651=imd;
    OnRun=VAR
            PurchHeader2@1011 : Record 38;
            PurchLine@1100285002 : Record 39;
            ExfPurchDocLine@1100285000 : Record 12013588;
            Vend@1100285001 : Record 23;
            PurchSetup@1100285003 : Record 312;
            PurchDocWarning@1100285005 : Record 12013636;
            PerformCheck@1100285004 : Boolean;
            ExFlowSetup@1100285022 : Record 12013601;
            GenJnlCheckLine@1100285011 : Codeunit 11;
            ExDimMgt@1100285010 : Codeunit 12013605;
            ExCheckHeadLine@1100285006 : Codeunit 12013642;
            GLSetup@1101285000 : Record 98;
          BEGIN
            IF "Block Document" = "Block Document"::Creation THEN
              ERROR(EXF133);

            CheckDuplicateDocNo(Rec);

            TESTFIELD("Document Type");
            TESTFIELD("Buy-from Vendor No.");
            TESTFIELD("Pay-to Vendor No.");
            TESTFIELD("Posting Date");
            TESTFIELD("Document Date");
            TESTFIELD("Vendor Posting Group");

            PurchSetup.GET;
            GetCurrency(Rec);
            ExFlowSetup.GET;
            IF ExFlowSetup."File storage type" = ExFlowSetup."File storage type"::Filesystem THEN
              ExFlowSetup.TESTFIELD("Path to Used Invoices");

            Vend.GET("Buy-from Vendor No.");
            Vend.CheckBlockedVendOnDocs(Vend,FALSE);
            IF "Pay-to Vendor No." <> "Buy-from Vendor No." THEN BEGIN
              Vend.GET("Pay-to Vendor No.");
              Vend.CheckBlockedVendOnDocs(Vend,FALSE);
            END;

            CALCFIELDS("Amount Including VAT");
            IF "Amount Including VAT" < 0 THEN
              ERROR(EXF136);

            IF "Order No." <> '' THEN BEGIN
              IF "Document Type" = "Document Type"::Invoice THEN
                IF NOT PurchHeader2.GET(PurchHeader2."Document Type"::Order, "Order No.") THEN
                  ERROR(STRSUBSTNO(EXF138, EXF139, "Order No."));
              IF "Document Type" = "Document Type"::"Credit Memo" THEN
                IF NOT PurchHeader2.GET(PurchHeader2."Document Type"::"Return Order", "Order No.") THEN
                  ERROR(STRSUBSTNO(EXF138, EXF140, "Order No."));

              IF ExFlowSetup."Order Applies-to" <> ExFlowSetup."Order Applies-to"::"Order not used" THEN BEGIN
                PerformCheck := TRUE;

                IF ExFlowSetup."Order Applies-to" = ExFlowSetup."Order Applies-to"::"Purch Order Lines" THEN BEGIN
                  ExfPurchDocLine.RESET;
                  ExfPurchDocLine.SETRANGE("Inbound Document No.", "Inbound Document No.");
                  ExfPurchDocLine.SETFILTER("Order No.", '<>%1', '');
                  PerformCheck := NOT ExfPurchDocLine.FINDFIRST;
                END;

                IF PerformCheck THEN BEGIN
                  IF PurchHeader2."Buy-from Vendor No." <> "Buy-from Vendor No." THEN
                    ERROR(STRSUBSTNO(EXF143,FIELDCAPTION("Buy-from Vendor No.")));

                  IF PurchHeader2."Pay-to Vendor No." <> "Pay-to Vendor No." THEN
                    ERROR(STRSUBSTNO(EXF143,FIELDCAPTION("Pay-to Vendor No.")));

                  IF PurchHeader2."Currency Code" <> "Currency Code" THEN
                    ERROR(STRSUBSTNO(EXF143,FIELDCAPTION("Currency Code")));
                END;
              END;
            END
            ELSE
              IF (ExFlowSetup."Order Applies-to" <> ExFlowSetup."Order Applies-to"::"Order not used") THEN
                IF ("Contract No." = 0) AND ("Order No. (Import)" <> '') THEN BEGIN
                  IF "Document Type" = "Document Type"::Invoice THEN
                    IF NOT PurchHeader2.GET(PurchHeader2."Document Type"::Order, "Order No. (Import)") THEN
                      IF NOT MatchedOrderLineExist(Rec) THEN
                        ERROR(STRSUBSTNO(EXF138, EXF139, "Order No. (Import)"));
                  IF "Document Type" = "Document Type"::"Credit Memo" THEN
                    IF NOT PurchHeader2.GET(PurchHeader2."Document Type"::"Return Order", "Order No. (Import)") THEN
                      IF NOT MatchedOrderLineExist(Rec) THEN
                        ERROR(STRSUBSTNO(EXF138, EXF140, "Order No. (Import)"));
                END;

            IF ExFlowSetup."Check Accounting Periods" THEN BEGIN
              IF GenJnlCheckLine.DateNotAllowed("Posting Date") THEN
                FIELDERROR("Posting Date",Text045);
            END;

            CheckImageExists(Rec);

            IF PurchSetup."Ext. Doc. No. Mandatory" THEN BEGIN
              IF "Vendor Document No." = '' THEN
                ERROR(EXF131);
            END;

            IF "Document Type" = "Document Type"::Invoice THEN
              IF STRLEN("Vendor Document No.") > MAXSTRLEN(PurchHeader2."Vendor Invoice No.") THEN
                ERROR(STRSUBSTNO(EXF137,STRLEN("Vendor Document No."),MAXSTRLEN(PurchHeader2."Vendor Invoice No.")));
            IF "Document Type" = "Document Type"::"Credit Memo" THEN
              IF STRLEN("Vendor Document No.") > MAXSTRLEN(PurchHeader2."Vendor Cr. Memo No.") THEN
                ERROR(STRSUBSTNO(EXF137,STRLEN("Vendor Document No."),MAXSTRLEN(PurchHeader2."Vendor Cr. Memo No.")));

            IF ExFlowSetup."Match Vendor Currency Code" THEN BEGIN
              IF Vend."No." <> "Pay-to Vendor No." THEN
                Vend.GET("Pay-to Vendor No.");
              IF Vend."Currency Code" <> "Currency Code" THEN
                ERROR(STRSUBSTNO(EXF130,Vend."Currency Code","Currency Code","Inbound Document No."));
            END;

            IF ExFlowSetup."Check Dimensions" THEN
              ExDimMgt.ImpHeadCCDocDimToTempDocDim(Rec);

            CheckFactoring(Rec);

              //4PSFI_EXFFI1.01+
              GLSetup.GET;
              IF GLSetup."Finnish localization active" THEN BEGIN

              //+EXFFI1.01 Check of Invoice Message and check Referencenumber
              IF "Invoice Message" = '' THEN
                ERROR(EXF9001);
              IF ("Message Type" = 0) AND ("Invoice Message"<>'') THEN
                CheckInvoiceReference("Invoice Message");
              //-EXFFI1.01

              END;
              //4PSFI_EXFFI1.01-

              CheckPrepaymentInvoice(Rec);

            IF ExFlowSetup."Check Reference" THEN
              CheckRef(Rec);

            CheckContract(Rec);

            PurchDocWarning.RESET;
            PurchDocWarning.SETRANGE("Inbound Document No.", "Inbound Document No.");
            PurchDocWarning.SETRANGE("Action Type", 0);
            IF PurchDocWarning.FINDFIRST THEN
              ERROR(EXF145);

            IF CheckPrePostLine(Rec,ExFlowSetup) THEN BEGIN
              ExCheckHeadLine.CheckLinesExist(Rec,ExFlowSetup);
              ExCheckHeadLine.CheckAmounts(Rec,ExFlowSetup);
            END;
          END;

  }
  CODE
  {
    VAR
      EXF117@1100285008 : TextConst 'ENU=%1 (%2) is not equal to total VAT of lines (%3);SVE=%1 (%2) ”verensst„mmer ej med momssumman av raderna (%3)';
      EXF118@1100285007 : TextConst 'ENU=%1 (%2) is not equal to total of on lines (%3);SVE=%1 (%2) ”verensst„mmer ej med summan av raderna (%3)';
      Text021@1017 : TextConst 'ENU=VAT Amount;SVE=Momsbelopp';
      Text022@1018 : TextConst 'ENU=%1% VAT;SVE=%1% moms';
      Text045@1155 : TextConst 'ENU=is not within your range of allowed posting dates.;SVE=„r inte i ditt till†tna intervall f”r bokf”ringsdatum.';
      EXF119@1100285021 : TextConst 'ENU=PDF File can not be found in current import path;SVE=Kan ej hitta PDF-fil i importkatalog';
      EXF120@1100285022 : TextConst 'ENU=Reference is missing;SVE=Referens finns ej';
      EXF122@1100285027 : TextConst 'ENU=Duplicate Posted Invoice!;SVE=Dubblett bokf”rd faktura!';
      EXF123@1100285006 : TextConst 'ENU=Duplicate Posted Credit Memo!;SVE=Dubblett bokf”rd kreditnota!';
      EXF124@1100285025 : TextConst 'ENU=Duplicate Invoice (the duplicate is under open Invoices)!;SVE=Dubblett faktura (dubbletten finns under ”ppna fakturor)!';
      EXF125@1100285024 : TextConst 'ENU=Duplicate Credit Memo (the duplicate is under open Credit Memos)!;SVE=Dubblett kreditnota (dubbletten finns under ”ppna kreditnotor)!';
      EXF126@1100285029 : TextConst 'ENU=Duplicate Import Header in Journal Batch %1 - occurence %2!;SVE=Dubblett i import journalen %1 - f”rekomst %2!';
      EXF128@1100285030 : TextConst 'ENU=This invoice is flagged as Factoring and is thus not allowed to be created!;SVE=Denna faktura „r m„rkt som Factoring och kan d„rf”r inte skapas!';
      EXF130@1100285032 : TextConst 'ENU=The Vendor''s currency code %1 must match the currency code %2 on the import document no %3!;SVE=Leverant”rens valutakod %1 m†ste matcha mot valutakoden %2 i import dokumentet %3!';
      EXF131@1100285033 : TextConst 'ENU=Vendor Document No. must not be blank!;SVE=Leverant”rens dokumentnr. kan ej vara blankt!';
      EXF133@1100285034 : TextConst 'ENU=This document is marked as blocked for creation!;SVE=Detta dokument „r m„rkt med stoppad f”r skapning!';
      EXF134@1100285035 : TextConst 'ENU=Reference is not tied to a First Approver code or Template Rule Code!;SVE=Referensen „r inte knyten till en F”rsta Attestant kod eller Attestregel kod!';
      EXF136@1100285037 : TextConst 'ENU=Total amount cannot be negative!;SVE=Total beloppet kan ej vara negativt!';
      EXF137@1100285038 : TextConst 'ENU=Vendor Document No. contains %1 characters but %2 is the maximum allowed!;SVE=Leverant”rens dokument nr inneh†ller %1 tecken men det maximalt till†tna antalet „r %2!';
      EXF138@1100285003 : TextConst 'ENU=Document %1 %2 does not exist!;SVE=Dokument %1 %2 finns ej!';
      EXF139@1100285004 : TextConst 'ENU=Order;SVE=Order';
      EXF140@1100285005 : TextConst 'ENU=Return Order;SVE=Returorder';
      EXF143@1100285009 : TextConst 'ENU=Order and Invoice differs in field %1 - this prevents invoice from being matched against order!;SVE=Order och faktura skiljer sig i f„lt %1 - detta f”rhindrar att ordern och fakturan matchas mot varandra!';
      EXF145@1100285011 : TextConst 'ENU=There are warning messages not yet accepted!;SVE=D„r finns varningsmeddelanden som inte „r accepterade!';
      EXF146@1100285012 : TextConst 'ENU=Prepayment predefined account must be used for prepayment Invoices;SVE=F”rslagskonto f”r f”rskott m†ste anv„ndas f”r f”rskottsfakturor';
      EXF147@1100285013 : TextConst 'ENU=Contract Matching is not supported for Prepayment Invoices.;SVE=Kontraksmatchning st”djs ej av f”rskottsfaktura.';
      EXF135@1100285010 : TextConst 'ENU=Invoice is missing Invoice Lines.;SVE=Fakturan saknar fakturarader.';
      EXF9001@1101285000 : TextConst 'ENU=Invoice Message cannot be blank!';
      EXF9002@1101285003 : TextConst 'ENU=Reference numer is incorrect, check invoice message!';
      EXF9003@1101285002 : TextConst 'ENU=Invoice reference number must be at least 2 characters!';
      EXF9004@1101285001 : TextConst 'ENU=Dynamics NAV is not supporting RF reference';

    LOCAL PROCEDURE GetCurrency@17(VAR ExfPurchDocHead@1100285000 : Record 12013587);
    VAR
      Currency@1100285001 : Record 4;
    BEGIN
      WITH ExfPurchDocHead DO
        IF "Currency Code" = '' THEN
          Currency.InitRoundingPrecision
        ELSE BEGIN
          Currency.GET("Currency Code");
          Currency.TESTFIELD("Amount Rounding Precision");
        END;
    END;

    PROCEDURE CheckRef@1100285003(VAR EXPurchDocHeader@1100285001 : Record 12013587);
    VAR
      Ref@1100285000 : Record 12013632;
    BEGIN
      WITH EXPurchDocHeader DO
        IF Ref.GET(Reference) THEN BEGIN
          IF (Ref."First Approver" = '') AND (Ref."Template Rule" = '') THEN BEGIN
            ERROR(EXF134);
          END;
        END ELSE
          ERROR(EXF120);
    END;

    PROCEDURE CheckDuplicateDocNo@3(EXPurchDocHeader@1100285001 : Record 12013587);
    VAR
      EXPurchDocHeader2@1100285003 : Record 12013587;
      PurchHeader@1100285000 : Record 38;
      OldVendLedgEntry@1100285005 : Record 25;
      Vendor@1100285004 : Record 23;
      ExFlowSEMgt@1100285008 : Codeunit 12013598;
      VendorDocNo@1100285002 : Code[40];
      TempNo@1100285006 : Integer;
      DupFound@1100285007 : Boolean;
    BEGIN
      WITH EXPurchDocHeader DO BEGIN
        VendorDocNo := "Vendor Document No.";

        IF ("Pay-to Vendor No." = '') OR (VendorDocNo = '') THEN
          EXIT;

        Vendor.GET("Pay-to Vendor No.");
        IF ExFlowSEMgt.CheckNoDuplicateControl(Vendor) THEN
          EXIT;

        EXPurchDocHeader2.RESET;
        EXPurchDocHeader2.SETCURRENTKEY("Vendor Document No.");
        EXPurchDocHeader2.SETRANGE("Document Type", "Document Type");
        EXPurchDocHeader2.SETRANGE("Pay-to Vendor No.", "Pay-to Vendor No.");
        EXPurchDocHeader2.SETRANGE("Vendor Document No.", VendorDocNo);
        IF EXPurchDocHeader2.COUNT <> 1 THEN BEGIN
          TempNo := 0;
          EXPurchDocHeader2.FINDSET;
          DupFound := FALSE;
          REPEAT
            TempNo := TempNo + 1;
            IF EXPurchDocHeader2."Inbound Document No." = "Inbound Document No." THEN
              DupFound := TRUE
            ELSE
              IF EXPurchDocHeader2.NEXT = 0 THEN
                DupFound := TRUE;
          UNTIL DupFound;

          EXPurchDocHeader2.SETFILTER("Inbound Document No.", '<>%1', "Inbound Document No.");
          EXPurchDocHeader2.FINDFIRST;

          ERROR(STRSUBSTNO(EXF126,EXPurchDocHeader2."Journal Batch Name",TempNo));
        END;

        IF "Document Type" = "Document Type"::Invoice THEN BEGIN
          OldVendLedgEntry.RESET;
          OldVendLedgEntry.SETCURRENTKEY("External Document No.");
          OldVendLedgEntry.SETRANGE("External Document No.", VendorDocNo);
          OldVendLedgEntry.SETRANGE("Document Type", OldVendLedgEntry."Document Type"::Invoice);
          OldVendLedgEntry.SETRANGE("Vendor No.", "Pay-to Vendor No.");
          IF NOT OldVendLedgEntry.ISEMPTY THEN
            ERROR(EXF122);

          PurchHeader.RESET;
          PurchHeader.SETCURRENTKEY("Vendor Invoice No.");
          PurchHeader.SETRANGE("Document Type", PurchHeader."Document Type"::Invoice);
          PurchHeader.SETRANGE("Pay-to Vendor No.", "Pay-to Vendor No.");
          PurchHeader.SETRANGE("Vendor Invoice No.", VendorDocNo);
          IF PurchHeader.FINDFIRST THEN
            IF NOT CheckPrePost(PurchHeader) THEN
               ERROR(EXF124);
        END
        ELSE BEGIN
          OldVendLedgEntry.RESET;
          OldVendLedgEntry.SETCURRENTKEY("External Document No.");
          OldVendLedgEntry.SETRANGE("External Document No.", VendorDocNo);
          OldVendLedgEntry.SETRANGE("Document Type", OldVendLedgEntry."Document Type"::"Credit Memo");
          OldVendLedgEntry.SETRANGE("Vendor No.", "Pay-to Vendor No.");
          IF NOT OldVendLedgEntry.ISEMPTY THEN
            ERROR(EXF123);

          PurchHeader.RESET;
          PurchHeader.SETCURRENTKEY("Vendor Cr. Memo No.");
          PurchHeader.SETRANGE("Document Type", PurchHeader."Document Type"::"Credit Memo");
          PurchHeader.SETRANGE("Pay-to Vendor No.", "Pay-to Vendor No.");
          PurchHeader.SETRANGE("Vendor Cr. Memo No.", VendorDocNo);
          IF PurchHeader.FINDFIRST THEN
            IF NOT CheckPrePost(PurchHeader) THEN
               ERROR(EXF125);
        END;
      END;
    END;

    PROCEDURE CheckFactoring@1100285004(EXPurchDocHeader@1100285000 : Record 12013587);
    BEGIN
      IF EXPurchDocHeader.Factoring THEN
        ERROR(EXF128);
    END;

    PROCEDURE CheckImageExists@1100285005(EXPurchDocHeader@1100285000 : Record 12013587);
    BEGIN
      IF EXPurchDocHeader."Image Buffer ID" = 0 THEN
        ERROR(EXF119);
    END;

    LOCAL PROCEDURE CheckPrepaymentInvoice@1100285000(VAR ExfPurchDocHead@1100285000 : Record 12013587);
    VAR
      ExflowSetup@1100285001 : Record 12013601;
    BEGIN
      IF ExfPurchDocHead."ExFlow Document Type" <> ExfPurchDocHead."ExFlow Document Type"::"Prepayment Invoice" THEN
        EXIT;

      ExflowSetup.GET;
      ExflowSetup.TESTFIELD("Prepmt. Predefined Account");
      ExflowSetup.TESTFIELD("VAT Prod. Posting Group 0%");

      ExfPurchDocHead.TESTFIELD("Prepayment Order No.");

      IF ExfPurchDocHead."Prop. Line G/L Account" <> ExflowSetup."Prepmt. Predefined Account" THEN
        ERROR(EXF146);
    END;

    LOCAL PROCEDURE CheckContract@1100285001(VAR ExfPurchDocHead@1100285000 : Record 12013587);
    VAR
      ExContract@1100285001 : Record 12013633;
    BEGIN
      IF ExfPurchDocHead."Contract No." = 0 THEN
        EXIT;

      IF ExfPurchDocHead."Buy-from Vendor No." = '' THEN
        EXIT;

      IF ExfPurchDocHead."ExFlow Document Type" = ExfPurchDocHead."ExFlow Document Type"::"Prepayment Invoice" THEN
        ERROR(EXF147);

      ExContract.RESET;
      ExContract.SETRANGE("Contract No.",ExfPurchDocHead."Contract No.");
      ExContract.SETRANGE("Vendor No.",ExfPurchDocHead."Buy-from Vendor No.");
      ExContract.FINDFIRST;
    END;

    LOCAL PROCEDURE MatchedOrderLineExist@1100285002(ExfPurchDocHead@1100285000 : Record 12013587) : Boolean;
    VAR
      ExPurchDocLine@1100285001 : Record 12013588;
    BEGIN
      ExPurchDocLine.RESET;
      ExPurchDocLine.SETRANGE("Inbound Document No.");
      ExPurchDocLine.SETFILTER("Order Line No.",'<>%1',0);
      EXIT(NOT ExPurchDocLine.ISEMPTY);
    END;

    LOCAL PROCEDURE CheckPrePost@1100285006(PurchHeader@1100285000 : Record 38) : Boolean;
    VAR
      ExfPurchDocHeader@1100285001 : Record 12013587;
    BEGIN
      ExfPurchDocHeader.SETRANGE("Document Type",PurchHeader."Document Type");
      ExfPurchDocHeader.SETRANGE("Pre Post No.", PurchHeader."No.");
      ExfPurchDocHeader.SETRANGE("Pre Posting",ExfPurchDocHeader."Pre Posting"::"Pre Posted");
      EXIT(NOT ExfPurchDocHeader.ISEMPTY);
    END;

    LOCAL PROCEDURE CheckPrePostLine@1100285009(VAR ExfPurchDocHead@1100285000 : Record 12013587;ExFlowSetup@1100285001 : Record 12013601) : Boolean;
    BEGIN
      IF (ExfPurchDocHead."Pre Posting" = ExfPurchDocHead."Pre Posting"::"Pre Post") AND (ExFlowSetup."Automatic Reg. of Inwards" = ExFlowSetup."Automatic Reg. of Inwards"::"Values from Lines") THEN
        EXIT(TRUE);
    END;

    PROCEDURE CheckInvoiceReference@2(PurchInvReference@1090001 : Text[70]);
    VAR
      DefaultNo@1000000006 : Code[20];
      Multiplicand@1000000005 : Integer;
      CheckValue@1000000004 : Integer;
      RoundNumber@1000000003 : Integer;
      NumberLen@1000000002 : Integer;
      Counter@1000000001 : Integer;
      Length@1000000000 : Integer;
      OrigCheckValue@1000000008 : Text[30];
      CheckValueChar@1000000007 : Text[2];
      RFChr@1000000009 : Text[2];
      RFReftxt@1000000010 : Text[25];
      RFRefNo@1000000011 : BigInteger;
      RFMod@1000000012 : Integer;
      RFCheck@1000000013 : Integer;
      RFChecktxt@1000000015 : Text[2];
      RFCheckDigits@1000000014 : Text[2];
    BEGIN
      Length := STRLEN(PurchInvReference);
      IF Length < 2 THEN
        ERROR(EXF9003);

      RFChr := COPYSTR(PurchInvReference,1,2);


      OrigCheckValue := COPYSTR(PurchInvReference,Length);
      PurchInvReference := COPYSTR(PurchInvReference,1,Length-1);
      NumberLen := STRLEN(PurchInvReference);

      CLEAR(Multiplicand);
      CLEAR(CheckValue);

      IF RFChr <>'RF' THEN
        BEGIN
          FOR Counter := 1 TO NumberLen DO
            BEGIN
              CASE Counter OF
                1,4,7,10,13,16,19:
                  BEGIN
                    EVALUATE(Multiplicand,COPYSTR(PurchInvReference,NumberLen+1-Counter,1));
                    CheckValue := CheckValue + Multiplicand * 7;
                  END;
                2,5,8,11,14,17,20:
                  BEGIN
                    EVALUATE(Multiplicand,COPYSTR(PurchInvReference,NumberLen+1-Counter,1));
                    CheckValue := CheckValue + Multiplicand * 3;
                  END;
                3,6,9,12,15,18:
                  BEGIN
                    EVALUATE(Multiplicand,COPYSTR(PurchInvReference,NumberLen+1-Counter,1));
                    CheckValue := CheckValue + Multiplicand * 1;
                  END;
              END;
            END;

          RoundNumber := ROUND(CheckValue, 10, '>');
          CheckValue := RoundNumber - CheckValue;
          CheckValueChar := FORMAT(CheckValue,1);

          IF NOT(CheckValueChar = OrigCheckValue) THEN
            ERROR(EXF9002);
        END
      ELSE
        BEGIN
          RFReftxt := COPYSTR(PurchInvReference,5) + '2715'+COPYSTR(PurchInvReference,3,2);
          EVALUATE(RFRefNo,RFReftxt);
          RFCheck := RFRefNo MOD 97;
          IF (RFRefNo MOD 97<>1) THEN;
            ERROR(EXF9004);
        END;
    END;

    BEGIN
    END.
  }
}

