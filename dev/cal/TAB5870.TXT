OBJECT Table 5870 BOM Buffer
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.03;
  }
  PROPERTIES
  {
    Permissions=;
    DataCaptionFields=No.,Description;
    ReplicateData=No;
    CaptionML=[ENU=BOM Buffer;
               NOR=Stykklistebuffer];
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;AutoIncrement=Yes;
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Entry No.;
                                                              NOR=Lõpenr.;
                                                              SVE=Lîpnr] }
    { 2   ;   ;Type                ;Option        ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Type;
                                                              NOR=Type;
                                                              SVE=Typ];
                                                   OptionCaptionML=[ENU=,Item,Machine Center,Work Center,Resource;
                                                                    NOR=,Vare,Maskinsenter,Arbeidssenter,Ressurs];
                                                   OptionString=,Item,Machine Center,Work Center,Resource }
    { 3   ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST(Item)) Item
                                                                 ELSE IF (Type=CONST(Machine Center)) "Machine Center"
                                                                 ELSE IF (Type=CONST(Work Center)) "Work Center"
                                                                 ELSE IF (Type=CONST(Resource)) Resource;
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=No.;
                                                              NOR=Nr.;
                                                              SVE=Nr] }
    { 5   ;   ;Description         ;Text100       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 6   ;   ;Unit of Measure Code;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE (Item No.=FIELD(No.))
                                                                 ELSE IF (Type=CONST(Resource)) "Resource Unit of Measure".Code WHERE (Resource No.=FIELD(No.));
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Unit of Measure Code;
                                                              NOR=Enhetskode;
                                                              SVE=Enhetskod] }
    { 7   ;   ;Variant Code        ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Variant".Code WHERE (Item No.=FIELD(No.));
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Variant Code;
                                                              NOR=Variantkode;
                                                              SVE=Variantkod] }
    { 8   ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Location Code;
                                                              NOR=Lokasjonskode;
                                                              SVE=LagerstÑllekod] }
    { 9   ;   ;Replenishment System;Option        ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Replenishment System;
                                                              NOR=Etterfyllingssystem;
                                                              SVE=èteranskaffningssystem];
                                                   OptionCaptionML=[ENU=Purchase,Prod. Order,Transfer,Assembly;
                                                                    NOR=Kjõp,Prod.ordre,Overfõring,Montering;
                                                                    SVE=Inkîp,Prod.order,ôverfîring,Montering];
                                                   OptionString=Purchase,Prod. Order,Transfer,Assembly }
    { 10  ;   ;Indentation         ;Integer       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Indentation;
                                                              NOR=Innrykking;
                                                              SVE=Indrag] }
    { 11  ;   ;Is Leaf             ;Boolean       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Is Leaf;
                                                              NOR=Er blad] }
    { 13  ;   ;Bottleneck          ;Boolean       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Bottleneck;
                                                              NOR=Flaskehals] }
    { 15  ;   ;Routing No.         ;Code20        ;TableRelation="Routing Header";
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Routing No.;
                                                              NOR=Rutenr.;
                                                              SVE=Operationsfîljdsnr] }
    { 16  ;   ;Production BOM No.  ;Code20        ;TableRelation="Production BOM Header";
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Production BOM No.;
                                                              NOR=Produksjonsstykklistenr.;
                                                              SVE=Prod.struktursnr] }
    { 20  ;   ;Lot Size            ;Decimal       ;AccessByPermission=TableData 5405=R;
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Lot Size;
                                                              NOR=Partistõrrelse;
                                                              SVE=Partistorlek];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 21  ;   ;Low-Level Code      ;Integer       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Low-Level Code;
                                                              NOR=LavnivÜkode;
                                                              SVE=LÑgsta-nivÜ-kod];
                                                   Editable=No }
    { 22  ;   ;Rounding Precision  ;Decimal       ;InitValue=1;
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Rounding Precision;
                                                              NOR=Avrundingspresisjon;
                                                              SVE=Avrundning];
                                                   DecimalPlaces=0:5 }
    { 30  ;   ;Qty. per Parent     ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Qty. per Parent;
                                                              NOR=Ant. per overordnet];
                                                   DecimalPlaces=0:5 }
    { 31  ;   ;Qty. per Top Item   ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Qty. per Top Item;
                                                              NOR=Ant. per toppvare];
                                                   DecimalPlaces=0:5 }
    { 32  ;   ;Able to Make Top Item;Decimal      ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Able to Make Top Item;
                                                              NOR=Kan lage toppvare];
                                                   DecimalPlaces=0:5 }
    { 33  ;   ;Able to Make Parent ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Able to Make Parent;
                                                              NOR=Kan lage overordnet];
                                                   DecimalPlaces=0:5 }
    { 35  ;   ;Available Quantity  ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Available Quantity;
                                                              NOR=Disponibelt antall;
                                                              SVE=Disponibelt antal];
                                                   DecimalPlaces=0:5 }
    { 36  ;   ;Gross Requirement   ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Gross Requirement;
                                                              NOR=Bruttobehov;
                                                              SVE=Bruttobehov];
                                                   DecimalPlaces=0:5 }
    { 37  ;   ;Scheduled Receipts  ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Scheduled Receipts;
                                                              NOR=Tidsplanlagte mottak;
                                                              SVE=Planenliga inleveranser];
                                                   DecimalPlaces=0:5 }
    { 38  ;   ;Unused Quantity     ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Unused Quantity;
                                                              NOR=Ubrukt antall];
                                                   DecimalPlaces=0:5 }
    { 40  ;   ;Lead Time Calculation;DateFormula  ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Lead Time Calculation;
                                                              NOR=Beregning av leveringstid;
                                                              SVE=LedtidsberÑkning] }
    { 41  ;   ;Lead-Time Offset    ;DateFormula   ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Lead-Time Offset;
                                                              NOR=Forskyvning av leveringstid;
                                                              SVE=Ledtidsfîrskjutning] }
    { 42  ;   ;Rolled-up Lead-Time Offset;Integer ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Rolled-up Lead-Time Offset;
                                                              NOR=Opprullert forskyvning av leveringstid] }
    { 43  ;   ;Needed by Date      ;Date          ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Needed by Date;
                                                              NOR=Trengs innen dato;
                                                              SVE=Behîvs den] }
    { 45  ;   ;Safety Lead Time    ;DateFormula   ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Safety Lead Time;
                                                              NOR=Sikkerhetsleveringstid;
                                                              SVE=SÑkerhetsledtid] }
    { 50  ;   ;Unit Cost           ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Unit Cost;
                                                              NOR=Enhetskost;
                                                              SVE=Styckkostnad];
                                                   AutoFormatType=2 }
    { 52  ;   ;Indirect Cost %     ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Indirect Cost %;
                                                              NOR=Indirekte kost-%;
                                                              SVE=Indirekt kostnad %];
                                                   DecimalPlaces=0:5 }
    { 54  ;   ;Overhead Rate       ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Overhead Rate;
                                                              NOR=Sats for indirekte kostnader;
                                                              SVE=Omkostnad];
                                                   AutoFormatType=2 }
    { 55  ;   ;Scrap %             ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Scrap %;
                                                              NOR=Vrak-%;
                                                              SVE=Kassation %];
                                                   BlankZero=Yes }
    { 56  ;   ;Scrap Qty. per Parent;Decimal      ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Scrap Qty. per Parent;
                                                              NOR=Vrakantall per overordnet];
                                                   DecimalPlaces=0:5 }
    { 57  ;   ;Scrap Qty. per Top Item;Decimal    ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Scrap Qty. per Top Item;
                                                              NOR=Vrakantall per toppvare];
                                                   DecimalPlaces=0:5 }
    { 59  ;   ;Resource Usage Type ;Option        ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Resource Usage Type;
                                                              NOR=Ressursbrukstype;
                                                              SVE=Resursfîrbrukningstyp];
                                                   OptionCaptionML=[ENU=Direct,Fixed;
                                                                    NOR=Direkte,Fast;
                                                                    SVE=Direkt,Fast];
                                                   OptionString=Direct,Fixed }
    { 61  ;   ;Single-Level Material Cost;Decimal ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Single-Level Material Cost;
                                                              NOR=Materialkostn. - enkeltnivÜ;
                                                              SVE=En-nivÜ materialkostnad];
                                                   DecimalPlaces=2:5;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 62  ;   ;Single-Level Capacity Cost;Decimal ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Single-Level Capacity Cost;
                                                              NOR=Kapasitetskostn. - enkeltnivÜ;
                                                              SVE=En-nivÜ kapacitetskostnad];
                                                   DecimalPlaces=2:5;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 63  ;   ;Single-Level Subcontrd. Cost;Decimal;
                                                   AccessByPermission=TableData 99000758=R;
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Single-Level Subcontrd. Cost;
                                                              NOR=Underlevrd.kostn - enkeltnivÜ;
                                                              SVE=En-nivÜ underleverantîrkost.];
                                                   DecimalPlaces=2:5;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 64  ;   ;Single-Level Cap. Ovhd Cost;Decimal;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Single-Level Cap. Ovhd Cost;
                                                              NOR=Indir. kap.kostn - enkeltnivÜ;
                                                              SVE=En-nivÜ kap.overheadkost.];
                                                   DecimalPlaces=2:5;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 65  ;   ;Single-Level Mfg. Ovhd Cost;Decimal;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Single-Level Mfg. Ovhd Cost;
                                                              NOR=Indir. prod.kostn - enkeltnivÜ;
                                                              SVE=En-nivÜ mat.overheadkost.];
                                                   DecimalPlaces=2:5;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 66  ;   ;Single-Level Scrap Cost;Decimal    ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Single-Level Scrap Cost;
                                                              NOR=Vrakkost pÜ enkeltnivÜ];
                                                   DecimalPlaces=2:5;
                                                   BlankZero=Yes }
    { 71  ;   ;Rolled-up Material Cost;Decimal    ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Rolled-up Material Cost;
                                                              NOR=Opprullert materialkost;
                                                              SVE=Uppsum. materialkost.];
                                                   DecimalPlaces=2:5;
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 72  ;   ;Rolled-up Capacity Cost;Decimal    ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Rolled-up Capacity Cost;
                                                              NOR=Opprullert kapasitetskost;
                                                              SVE=Uppsum. kapacitetskost.];
                                                   DecimalPlaces=2:5;
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 73  ;   ;Rolled-up Subcontracted Cost;Decimal;
                                                   AccessByPermission=TableData 99000758=R;
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Rolled-up Subcontracted Cost;
                                                              NOR=Underlever.kostn. - opprullert;
                                                              SVE=Uppsummerad underentreprenadkostnad];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 74  ;   ;Rolled-up Capacity Ovhd. Cost;Decimal;
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Rolled-up Capacity Ovhd. Cost;
                                                              NOR=Opprullert indir. kap.kostn.];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 75  ;   ;Rolled-up Mfg. Ovhd Cost;Decimal   ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Rolled-up Mfg. Ovhd Cost;
                                                              NOR=Opprullert indir. prod.kostn.;
                                                              SVE=Uppsum. tillverkn.overh.kost];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 76  ;   ;Rolled-up Scrap Cost;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Rolled-up Scrap Cost;
                                                              NOR=Opprullert varkkost];
                                                   DecimalPlaces=2:5;
                                                   BlankZero=Yes }
    { 81  ;   ;Total Cost          ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Total Cost;
                                                              NOR=Kostbelõp;
                                                              SVE=Total kostnad];
                                                   DecimalPlaces=2:5;
                                                   BlankZero=Yes }
    { 82  ;   ;BOM Unit of Measure Code;Code10    ;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE (Item No.=FIELD(No.))
                                                                 ELSE IF (Type=CONST(Resource)) "Resource Unit of Measure".Code WHERE (Resource No.=FIELD(No.));
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=BOM Unit of Measure Code;
                                                              NOR=Enhetskode for stykkliste] }
    { 83  ;   ;Qty. per BOM Line   ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Qty. per BOM Line;
                                                              NOR=Ant. per stykklistelinje];
                                                   DecimalPlaces=0:5 }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
    {    ;Low-Level Code                           }
    {    ;Type,No.,Indentation                    ;SumIndexFields=Able to Make Parent }
    {    ;Total Cost                               }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      GLSetup@1009 : Record 98;
      Text001@1008 : TextConst 'ENU=The Low-level Code for Item %1 has not been calculated.;NOR=LavnivÜkoden for varen %1 er ikke beregnet.';
      Text002@1007 : TextConst 'ENU=The Quantity per. field in the BOM for Item %1 has not been set.;NOR=Feltet Antall per i stykklisten for varen %1 er ikke angitt.';
      Text003@1006 : TextConst 'ENU=Routing %1 has not been certified.;NOR=Ruten %1 er ikke sertifisert.';
      Text004@1005 : TextConst 'ENU=Production BOM %1 has not been certified.;NOR=Produksjonsstykklisten %1 er ikke sertifisert.';
      Text005@1004 : TextConst 'ENU=Item %1 is not a BOM. Therefore, the Replenishment System field must be set to Purchase.;NOR=Varen %1 er ikke en stykkliste. Feltet Etterfyllingssystem mÜ derfor settes til Kjõp.';
      Text006@1003 : TextConst 'ENU=Replenishment System for Item %1 is Assembly, but the item is not an assembly BOM. Verify that this is correct.;NOR=Etterfyllingsystem for varen %1 er Montering, men varen er ikke en Monteringsstykkliste. Kontroller at dette er riktig.';
      Text007@1002 : TextConst 'ENU=Replenishment System for Item %1 is Prod. Order, but the item does not have a production BOM. Verify that this is correct.;NOR=Etterfyllingssystem for varen %1 er Prod.ordre, men varen har ikke en produksjonsstykkliste. Kontroller at dette er riktig.';
      Text008@1001 : TextConst 'ENU=Item %1 is a BOM, but the Replenishment System field is not set to Assembly or Prod. Order. Verify that the value is correct.;NOR=Varen %1 er en stykkliste, men feltet Etterfyllingssystem er ikke satt til Montering eller Prod.ordre. Kontroller at verdien er riktig.';
      UOMMgt@1000 : Codeunit 5402;
      GLSetupRead@1010 : Boolean;

    [External]
    PROCEDURE TransferFromItem@4(VAR EntryNo@1003 : Integer;Item@1001 : Record 27;DemandDate@1002 : Date);
    BEGIN
      INIT;
      EntryNo += 1;
      "Entry No." := EntryNo;
      Type := Type::Item;

      InitFromItem(Item);

      "Qty. per Parent" := 1;
      "Qty. per Top Item" := 1;
      "Needed by Date" := DemandDate;
      Indentation := 0;

      OnTransferFromItemCopyFields(Rec,Item);
      INSERT(TRUE);
    END;

    [External]
    PROCEDURE TransferFromAsmHeader@7(VAR EntryNo@1001 : Integer;AsmHeader@1003 : Record 900);
    VAR
      BOMItem@1000 : Record 27;
    BEGIN
      INIT;
      EntryNo += 1;
      "Entry No." := EntryNo;
      Type := Type::Item;

      BOMItem.GET(AsmHeader."Item No.");
      InitFromItem(BOMItem);

      "Qty. per Parent" := 1;
      "Qty. per Top Item" := 1;
      "Unit of Measure Code" := AsmHeader."Unit of Measure Code";
      "Location Code" := AsmHeader."Location Code";
      "Variant Code" := AsmHeader."Variant Code";
      "Needed by Date" := AsmHeader."Due Date";
      Indentation := 0;

      OnTransferFromAsmHeaderCopyFields(Rec,AsmHeader);
      INSERT(TRUE);
    END;

    [External]
    PROCEDURE TransferFromAsmLine@8(VAR EntryNo@1001 : Integer;AsmLine@1000 : Record 901);
    VAR
      BOMItem@1002 : Record 27;
    BEGIN
      INIT;
      EntryNo += 1;
      "Entry No." := EntryNo;
      Type := Type::Item;

      BOMItem.GET(AsmLine."No.");
      InitFromItem(BOMItem);

      "Qty. per Parent" := AsmLine."Quantity per";
      "Qty. per Top Item" := AsmLine."Quantity per";
      "Unit of Measure Code" := AsmLine."Unit of Measure Code";
      "Location Code" := AsmLine."Location Code";
      "Variant Code" := AsmLine."Variant Code";
      "Needed by Date" := AsmLine."Due Date";
      "Lead-Time Offset" := AsmLine."Lead-Time Offset";
      Indentation := 1;

      OnTransferFromAsmLineCopyFields(Rec,AsmLine);
      INSERT(TRUE);
    END;

    [External]
    PROCEDURE TransferFromBOMComp@5(VAR EntryNo@1003 : Integer;BOMComp@1002 : Record 90;NewIndentation@1004 : Integer;ParentQtyPer@1001 : Decimal;ParentScrapQtyPer@1005 : Decimal;NeedByDate@1008 : Date;ParentLocationCode@1006 : Code[10]);
    VAR
      BOMItem@1000 : Record 27;
      BOMRes@1007 : Record 156;
    BEGIN
      INIT;
      EntryNo += 1;
      "Entry No." := EntryNo;

      CASE BOMComp.Type OF
        BOMComp.Type::Item:
          BEGIN
            BOMItem.GET(BOMComp."No.");
            InitFromItem(BOMItem);
          END;
        BOMComp.Type::Resource:
          BEGIN
            BOMRes.GET(BOMComp."No.");
            InitFromRes(BOMRes);
            "Resource Usage Type" := BOMComp."Resource Usage Type";
          END;
      END;

      Description := BOMComp.Description;
      "Qty. per Parent" := BOMComp."Quantity per";
      "Qty. per Top Item" := ROUND(BOMComp."Quantity per" * ParentQtyPer,UOMMgt.QtyRndPrecision);

      "Scrap Qty. per Top Item" :=
        "Qty. per Top Item" - ROUND((ParentQtyPer - ParentScrapQtyPer) * "Qty. per Parent",UOMMgt.QtyRndPrecision);

      "Unit of Measure Code" := BOMComp."Unit of Measure Code";
      "Variant Code" := BOMComp."Variant Code";
      "Location Code" := ParentLocationCode;
      "Lead-Time Offset" := BOMComp."Lead-Time Offset";
      "Needed by Date" := NeedByDate;
      Indentation := NewIndentation;

      OnTransferFromBOMCompCopyFields(Rec,BOMComp);
      INSERT(TRUE);
    END;

    [External]
    PROCEDURE TransferFromProdComp@6(VAR EntryNo@1007 : Integer;ProdBOMLine@1000 : Record 99000772;NewIndentation@1003 : Integer;ParentQtyPer@1002 : Decimal;ParentScrapQtyPer@1006 : Decimal;ParentScrapPct@1017 : Decimal;NeedByDate@1001 : Date;ParentLocationCode@1005 : Code[10];ParentItem@1009 : Record 27;BOMQtyPerUOM@1008 : Decimal);
    VAR
      BOMItem@1004 : Record 27;
      UOMMgt@1010 : Codeunit 5402;
      CostCalculationMgt@1020 : Codeunit 5836;
    BEGIN
      INIT;
      EntryNo += 1;
      "Entry No." := EntryNo;
      Type := Type::Item;

      BOMItem.GET(ProdBOMLine."No.");
      InitFromItem(BOMItem);

      IF ParentItem."Lot Size" = 0 THEN
        ParentItem."Lot Size" := 1;

      Description := ProdBOMLine.Description;
      "Qty. per Parent" :=
        CostCalculationMgt.CalcCompItemQtyBase(
          ProdBOMLine,WORKDATE,
          CostCalculationMgt.CalcQtyAdjdForBOMScrap(ParentItem."Lot Size",ParentScrapPct),ParentItem."Routing No.",TRUE) /
        UOMMgt.GetQtyPerUnitOfMeasure(BOMItem,ProdBOMLine."Unit of Measure Code") /
        BOMQtyPerUOM / ParentItem."Lot Size";
      "Qty. per Top Item" := ROUND(ParentQtyPer * "Qty. per Parent",UOMMgt.QtyRndPrecision);
      "Qty. per Parent" := ROUND("Qty. per Parent",UOMMgt.QtyRndPrecision);

      "Scrap Qty. per Parent" := "Qty. per Parent" - (ProdBOMLine.Quantity / BOMQtyPerUOM);
      "Scrap Qty. per Top Item" :=
        "Qty. per Top Item" -
        ROUND((ParentQtyPer - ParentScrapQtyPer) * ("Qty. per Parent" - "Scrap Qty. per Parent"),UOMMgt.QtyRndPrecision);
      "Scrap Qty. per Parent" := ROUND("Scrap Qty. per Parent",UOMMgt.QtyRndPrecision);

      "Qty. per BOM Line" := ProdBOMLine."Quantity per";
      "Unit of Measure Code" := ProdBOMLine."Unit of Measure Code";
      "Variant Code" := ProdBOMLine."Variant Code";
      "Location Code" := ParentLocationCode;
      "Lead-Time Offset" := ProdBOMLine."Lead-Time Offset";
      "Needed by Date" := NeedByDate;
      Indentation := NewIndentation;

      OnTransferFromProdCompCopyFields(Rec,ProdBOMLine,ParentItem,ParentQtyPer);
      INSERT(TRUE);
    END;

    [External]
    PROCEDURE TransferFromProdOrderLine@26(VAR EntryNo@1001 : Integer;ProdOrderLine@1003 : Record 5406);
    VAR
      BOMItem@1000 : Record 27;
    BEGIN
      INIT;
      EntryNo += 1;
      "Entry No." := EntryNo;
      Type := Type::Item;

      BOMItem.GET(ProdOrderLine."Item No.");
      InitFromItem(BOMItem);

      "Scrap %" := ProdOrderLine."Scrap %";
      "Production BOM No." := ProdOrderLine."Production BOM No.";
      "Qty. per Parent" := 1;
      "Qty. per Top Item" := 1;
      "Unit of Measure Code" := ProdOrderLine."Unit of Measure Code";
      "Variant Code" := ProdOrderLine."Variant Code";
      "Location Code" := ProdOrderLine."Location Code";
      "Needed by Date" := ProdOrderLine."Due Date";
      Indentation := 0;

      OnTransferFromProdOrderLineCopyFields(Rec,ProdOrderLine);
      INSERT(TRUE);
    END;

    [External]
    PROCEDURE TransferFromProdOrderComp@25(VAR EntryNo@1003 : Integer;ProdOrderComp@1000 : Record 5407);
    VAR
      BOMItem@1002 : Record 27;
    BEGIN
      INIT;
      EntryNo += 1;
      "Entry No." := EntryNo;
      Type := Type::Item;

      BOMItem.GET(ProdOrderComp."Item No.");
      InitFromItem(BOMItem);

      "Qty. per Parent" := ProdOrderComp."Quantity per";
      "Qty. per Top Item" := ProdOrderComp."Quantity per";
      "Unit of Measure Code" := ProdOrderComp."Unit of Measure Code";
      "Variant Code" := ProdOrderComp."Variant Code";
      "Location Code" := ProdOrderComp."Location Code";
      "Needed by Date" := ProdOrderComp."Due Date";
      "Lead-Time Offset" := ProdOrderComp."Lead-Time Offset";
      Indentation := 1;

      OnTransferFromProdOrderCompCopyFields(Rec,ProdOrderComp);
      INSERT(TRUE);
    END;

    [External]
    PROCEDURE TransferFromProdRouting@14(VAR EntryNo@1007 : Integer;RoutingLine@1000 : Record 99000764;NewIndentation@1005 : Integer;ParentQtyPer@1004 : Decimal;NeedByDate@1003 : Date;ParentLocationCode@1002 : Code[10]);
    VAR
      MachineCenter@1001 : Record 99000758;
      WorkCenter@1006 : Record 99000754;
    BEGIN
      INIT;
      EntryNo += 1;
      "Entry No." := EntryNo;

      CASE RoutingLine.Type OF
        RoutingLine.Type::"Machine Center":
          BEGIN
            MachineCenter.GET(RoutingLine."No.");
            InitFromMachineCenter(MachineCenter);
          END;
        RoutingLine.Type::"Work Center":
          BEGIN
            WorkCenter.GET(RoutingLine."No.");
            InitFromWorkCenter(WorkCenter);
          END;
      END;

      Description := RoutingLine.Description;
      "Qty. per Parent" := CalcQtyPerParentFromProdRouting(RoutingLine);
      "Qty. per Top Item" := "Qty. per Parent" * ParentQtyPer;
      "Location Code" := ParentLocationCode;
      "Needed by Date" := NeedByDate;
      Indentation := NewIndentation;

      OnTransferFromProdRoutingCopyFields(Rec,RoutingLine);
      INSERT(TRUE);
    END;

    LOCAL PROCEDURE InitFromItem@19(Item@1001 : Record 27);
    VAR
      SKU@1003 : Record 5700;
      VersionMgt@1000 : Codeunit 99000756;
      VersionCode@1002 : Code[20];
    BEGIN
      Type := Type::Item;
      "No." := Item."No.";
      Description := Item.Description;
      "Unit of Measure Code" := Item."Base Unit of Measure";

      "Production BOM No." := Item."Production BOM No.";
      "Routing No." := Item."Routing No.";
      IF GetSKUFromFilter(SKU,"No.") THEN
        "Replenishment System" := SKU."Replenishment System"
      ELSE
        "Replenishment System" := Item."Replenishment System";
      IF "Replenishment System" = "Replenishment System"::"Prod. Order" THEN BEGIN
        VersionCode := VersionMgt.GetBOMVersion("Production BOM No.",WORKDATE,TRUE);
        "BOM Unit of Measure Code" := VersionMgt.GetBOMUnitOfMeasure("Production BOM No.",VersionCode);
      END;

      "Lot Size" := Item."Lot Size";
      "Scrap %" := Item."Scrap %";
      "Indirect Cost %" := Item."Indirect Cost %";
      "Overhead Rate" := Item."Overhead Rate";
      "Low-Level Code" := Item."Low-Level Code";
      "Rounding Precision" := Item."Rounding Precision";
      "Lead Time Calculation" := Item."Lead Time Calculation";
      "Safety Lead Time" := Item."Safety Lead Time";

      SETRANGE("Location Code");
      SETRANGE("Variant Code");
    END;

    [External]
    PROCEDURE InitFromRes@3(Res@1000 : Record 156);
    BEGIN
      Type := Type::Resource;
      "No." := Res."No.";
      Description := Res.Name;
      "Unit of Measure Code" := Res."Base Unit of Measure";
      "Replenishment System" := "Replenishment System"::Transfer;
      "Is Leaf" := TRUE;
    END;

    [External]
    PROCEDURE InitFromMachineCenter@10(MachineCenter@1000 : Record 99000758);
    VAR
      WorkCenter@1001 : Record 99000754;
    BEGIN
      Type := Type::"Machine Center";
      "No." := MachineCenter."No.";
      Description := MachineCenter.Name;
      IF MachineCenter."Work Center No." <> '' THEN BEGIN
        WorkCenter.GET(MachineCenter."Work Center No.");
        "Unit of Measure Code" := WorkCenter."Unit of Measure Code";
      END;

      "Replenishment System" := "Replenishment System"::Transfer;
      "Is Leaf" := TRUE;
    END;

    [External]
    PROCEDURE InitFromWorkCenter@11(WorkCenter@1000 : Record 99000754);
    BEGIN
      Type := Type::"Work Center";
      "No." := WorkCenter."No.";
      Description := WorkCenter.Name;
      "Unit of Measure Code" := WorkCenter."Unit of Measure Code";

      "Replenishment System" := "Replenishment System"::Transfer;
      "Is Leaf" := TRUE;
    END;

    LOCAL PROCEDURE SetAbleToMakeToZeroIfNegative@1();
    BEGIN
      IF "Able to Make Parent" < 0 THEN
        "Able to Make Parent" := 0;
      IF "Able to Make Top Item" < 0 THEN
        "Able to Make Top Item" := 0;
    END;

    [External]
    PROCEDURE UpdateAbleToMake@2(AvailQty@1000 : Decimal);
    VAR
      Item@1001 : Record 27;
      UOMMgt@1002 : Codeunit 5402;
      QtyPerUOM@1003 : Decimal;
    BEGIN
      QtyPerUOM := 1;
      IF Type = Type::Item THEN BEGIN
        Item.GET("No.");
        QtyPerUOM := UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code");
      END;

      IF "Is Leaf" THEN BEGIN
        IF "Qty. per Parent" <> 0 THEN
          "Able to Make Parent" := ROUND(AvailQty / ("Qty. per Parent" * QtyPerUOM),UOMMgt.QtyRndPrecision);
        IF "Qty. per Top Item" <> 0 THEN
          "Able to Make Top Item" := ROUND(AvailQty / ("Qty. per Top Item" * QtyPerUOM),UOMMgt.QtyRndPrecision);
      END ELSE
        IF Indentation = 0 THEN BEGIN
          "Able to Make Parent" := "Able to Make Parent";
          "Able to Make Top Item" := "Able to Make Top Item";
        END ELSE BEGIN
          IF "Qty. per Parent" <> 0 THEN
            "Able to Make Parent" :=
              ROUND((AvailQty + "Able to Make Parent") / ("Qty. per Parent" * QtyPerUOM),UOMMgt.QtyRndPrecision);
          IF "Qty. per Top Item" <> 0 THEN
            "Able to Make Top Item" :=
              ROUND(AvailQty / ("Qty. per Top Item" * QtyPerUOM) + "Able to Make Top Item",UOMMgt.QtyRndPrecision);
        END;

      SetAbleToMakeToZeroIfNegative;
    END;

    [External]
    PROCEDURE AddMaterialCost@20(SingleLvlCostAmt@1001 : Decimal;RolledUpCostAmt@1000 : Decimal);
    BEGIN
      "Single-Level Material Cost" += SingleLvlCostAmt;
      "Rolled-up Material Cost" += RolledUpCostAmt;
    END;

    [External]
    PROCEDURE AddCapacityCost@9(SingleLvlCostAmt@1001 : Decimal;RolledUpCostAmt@1000 : Decimal);
    BEGIN
      "Single-Level Capacity Cost" += SingleLvlCostAmt;
      "Rolled-up Capacity Cost" += RolledUpCostAmt;
    END;

    [External]
    PROCEDURE AddSubcontrdCost@18(SingleLvlCostAmt@1001 : Decimal;RolledUpCostAmt@1000 : Decimal);
    BEGIN
      "Single-Level Subcontrd. Cost" += SingleLvlCostAmt;
      "Rolled-up Subcontracted Cost" += RolledUpCostAmt;
    END;

    [External]
    PROCEDURE AddCapOvhdCost@17(SingleLvlCostAmt@1001 : Decimal;RolledUpCostAmt@1000 : Decimal);
    BEGIN
      "Single-Level Cap. Ovhd Cost" += SingleLvlCostAmt;
      "Rolled-up Capacity Ovhd. Cost" += RolledUpCostAmt;
    END;

    [External]
    PROCEDURE AddMfgOvhdCost@12(SingleLvlCostAmt@1001 : Decimal;RolledUpCostAmt@1000 : Decimal);
    BEGIN
      "Single-Level Mfg. Ovhd Cost" += SingleLvlCostAmt;
      "Rolled-up Mfg. Ovhd Cost" += RolledUpCostAmt;
    END;

    [External]
    PROCEDURE AddScrapCost@23(SingleLvlCostAmt@1001 : Decimal;RolledUpCostAmt@1000 : Decimal);
    BEGIN
      "Single-Level Scrap Cost" += SingleLvlCostAmt;
      "Rolled-up Scrap Cost" += RolledUpCostAmt;
    END;

    [External]
    PROCEDURE GetItemCosts@13();
    VAR
      Item@1000 : Record 27;
      UOMMgt@1001 : Codeunit 5402;
    BEGIN
      TESTFIELD(Type,Type::Item);
      Item.GET("No.");

      Item.CALCFIELDS("Assembly BOM");
      IF ("Replenishment System" = "Replenishment System"::Purchase) OR
         (("Routing No." = '') AND ("Production BOM No." = '') AND (NOT Item."Assembly BOM"))
      THEN
        "Unit Cost" := Item."Unit Cost";
      "Single-Level Material Cost" := "Unit Cost";
      "Rolled-up Material Cost" := "Single-Level Material Cost";

      IF "Qty. per Parent" <> 0 THEN
        "Single-Level Scrap Cost" := "Single-Level Material Cost" * "Scrap Qty. per Parent" / "Qty. per Parent";
      IF "Qty. per Top Item" <> 0 THEN
        "Rolled-up Scrap Cost" := "Rolled-up Material Cost" * "Scrap Qty. per Top Item" / "Qty. per Top Item";
      RoundCosts(UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code") * "Qty. per Top Item");
    END;

    [External]
    PROCEDURE GetResCosts@15();
    VAR
      Res@1000 : Record 156;
      UOMMgt@1001 : Codeunit 5402;
    BEGIN
      TESTFIELD(Type,Type::Resource);
      Res.GET("No.");

      "Unit Cost" := Res."Unit Cost";
      "Indirect Cost %" := Res."Indirect Cost %";

      "Single-Level Capacity Cost" := Res."Direct Unit Cost";
      "Single-Level Cap. Ovhd Cost" := Res."Unit Cost" - Res."Direct Unit Cost";

      "Rolled-up Capacity Cost" := Res."Direct Unit Cost";
      "Rolled-up Capacity Ovhd. Cost" := Res."Unit Cost" - Res."Direct Unit Cost";

      IF "Resource Usage Type" = "Resource Usage Type"::Fixed THEN
        RoundCosts(UOMMgt.GetResQtyPerUnitOfMeasure(Res,"Unit of Measure Code") * "Qty. per Parent")
      ELSE
        RoundCosts(UOMMgt.GetResQtyPerUnitOfMeasure(Res,"Unit of Measure Code") * "Qty. per Top Item");
    END;

    LOCAL PROCEDURE GetSKUFromFilter@42(VAR SKU@1000 : Record 5700;ItemNo@1003 : Code[20]) : Boolean;
    VAR
      LocationFilter@1001 : Text;
      VariantFilter@1002 : Text;
    BEGIN
      LocationFilter := GETFILTER("Location Code");
      IF STRLEN(LocationFilter) > MAXSTRLEN("Location Code") THEN
        EXIT(FALSE);

      VariantFilter := GETFILTER("Variant Code");
      IF STRLEN(VariantFilter) > MAXSTRLEN("Variant Code") THEN
        EXIT(FALSE);

      EXIT(SKU.GET(LocationFilter,ItemNo,VariantFilter));
    END;

    [External]
    PROCEDURE RoundCosts@77(ShareOfTotalCost@1003 : Decimal);
    BEGIN
      "Single-Level Material Cost" := RoundUnitAmt("Single-Level Material Cost",ShareOfTotalCost);
      "Single-Level Capacity Cost" := RoundUnitAmt("Single-Level Capacity Cost",ShareOfTotalCost);
      "Single-Level Subcontrd. Cost" := RoundUnitAmt("Single-Level Subcontrd. Cost",ShareOfTotalCost);
      "Single-Level Cap. Ovhd Cost" := RoundUnitAmt("Single-Level Cap. Ovhd Cost",ShareOfTotalCost);
      "Single-Level Mfg. Ovhd Cost" := RoundUnitAmt("Single-Level Mfg. Ovhd Cost",ShareOfTotalCost);
      "Single-Level Scrap Cost" := RoundUnitAmt("Single-Level Scrap Cost",ShareOfTotalCost);

      "Rolled-up Material Cost" := RoundUnitAmt("Rolled-up Material Cost",ShareOfTotalCost);
      "Rolled-up Capacity Cost" := RoundUnitAmt("Rolled-up Capacity Cost",ShareOfTotalCost);
      "Rolled-up Subcontracted Cost" := RoundUnitAmt("Rolled-up Subcontracted Cost",ShareOfTotalCost);
      "Rolled-up Capacity Ovhd. Cost" := RoundUnitAmt("Rolled-up Capacity Ovhd. Cost",ShareOfTotalCost);
      "Rolled-up Mfg. Ovhd Cost" := RoundUnitAmt("Rolled-up Mfg. Ovhd Cost",ShareOfTotalCost);
      "Rolled-up Scrap Cost" := RoundUnitAmt("Rolled-up Scrap Cost",ShareOfTotalCost);
    END;

    LOCAL PROCEDURE RoundUnitAmt@39(Amt@1001 : Decimal;ShareOfCost@1000 : Decimal) : Decimal;
    BEGIN
      GetGLSetup;
      EXIT(ROUND(Amt * ShareOfCost,GLSetup."Unit-Amount Rounding Precision"));
    END;

    [External]
    PROCEDURE CalcOvhdCost@21();
    VAR
      Item@1002 : Record 27;
      UOMMgt@1001 : Codeunit 5402;
      LotSize@1000 : Decimal;
    BEGIN
      LotSize := 1;
      IF "Lot Size" <> 0 THEN
        LotSize := "Lot Size";

      Item.GET("No.");

      "Overhead Rate" :=
        RoundUnitAmt("Overhead Rate",UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code") * "Qty. per Top Item");

      "Single-Level Mfg. Ovhd Cost" +=
        (("Single-Level Material Cost" +
          "Single-Level Capacity Cost" +
          "Single-Level Subcontrd. Cost" +
          "Single-Level Cap. Ovhd Cost") *
         "Indirect Cost %" / 100) +
        ("Overhead Rate" * LotSize);
      "Single-Level Mfg. Ovhd Cost" := RoundUnitAmt("Single-Level Mfg. Ovhd Cost",1);

      "Rolled-up Mfg. Ovhd Cost" +=
        (("Rolled-up Material Cost" +
          "Rolled-up Capacity Cost" +
          "Rolled-up Subcontracted Cost" +
          "Rolled-up Capacity Ovhd. Cost" +
          "Rolled-up Mfg. Ovhd Cost") *
         "Indirect Cost %" / 100) +
        ("Overhead Rate" * LotSize);
      "Rolled-up Mfg. Ovhd Cost" := RoundUnitAmt("Rolled-up Mfg. Ovhd Cost",1);
    END;

    [External]
    PROCEDURE CalcDirectCost@27() : Decimal;
    BEGIN
      EXIT(
        "Single-Level Material Cost" +
        "Single-Level Capacity Cost" +
        "Single-Level Subcontrd. Cost");
    END;

    [External]
    PROCEDURE CalcIndirectCost@24() : Decimal;
    BEGIN
      EXIT("Single-Level Mfg. Ovhd Cost" + "Single-Level Cap. Ovhd Cost");
    END;

    [External]
    PROCEDURE CalcUnitCost@16();
    BEGIN
      "Total Cost" := CalcDirectCost + CalcIndirectCost;
      "Unit Cost" := 0;
      IF "Qty. per Top Item" <> 0 THEN
        "Unit Cost" := ROUND("Total Cost" / "Qty. per Top Item",0.00001);
    END;

    LOCAL PROCEDURE CalcQtyPerParentFromProdRouting@41(RoutingLine@1000 : Record 99000764) : Decimal;
    VAR
      WorkCenter@1008 : Record 99000754;
      CalendarMgt@1001 : Codeunit 99000755;
      BaseQty@1002 : Decimal;
      SetupTimeFactor@1003 : Decimal;
      RunTimeFactor@1004 : Decimal;
      WaitTimeFactor@1005 : Decimal;
      MoveTimeFactor@1006 : Decimal;
      CurrentTimeFactor@1007 : Decimal;
    BEGIN
      SetupTimeFactor := CalendarMgt.TimeFactor(RoutingLine."Setup Time Unit of Meas. Code");
      RunTimeFactor := CalendarMgt.TimeFactor(RoutingLine."Run Time Unit of Meas. Code");
      WaitTimeFactor := CalendarMgt.TimeFactor(RoutingLine."Wait Time Unit of Meas. Code");
      MoveTimeFactor := CalendarMgt.TimeFactor(RoutingLine."Move Time Unit of Meas. Code");

      BaseQty :=
        RoutingLine."Setup Time" * SetupTimeFactor + RoutingLine."Run Time" * RunTimeFactor +
        RoutingLine."Wait Time" * WaitTimeFactor + RoutingLine."Move Time" * MoveTimeFactor;

      IF "Unit of Measure Code" = '' THEN BEGIN
        // select base UOM from Setup/Run/Wait/Move UOMs
        CurrentTimeFactor := SetupTimeFactor;
        "Unit of Measure Code" := RoutingLine."Setup Time Unit of Meas. Code";
        IF CurrentTimeFactor > RunTimeFactor THEN BEGIN
          CurrentTimeFactor := RunTimeFactor;
          "Unit of Measure Code" := RoutingLine."Run Time Unit of Meas. Code";
        END;
        IF CurrentTimeFactor > WaitTimeFactor THEN BEGIN
          CurrentTimeFactor := WaitTimeFactor;
          "Unit of Measure Code" := RoutingLine."Wait Time Unit of Meas. Code";
        END;
        IF CurrentTimeFactor > MoveTimeFactor THEN BEGIN
          CurrentTimeFactor := MoveTimeFactor;
          "Unit of Measure Code" := RoutingLine."Move Time Unit of Meas. Code";
        END;
      END;

      IF NOT WorkCenter.GET(RoutingLine."Work Center No.") THEN
        WorkCenter.INIT;
      EXIT(ROUND(BaseQty / CalendarMgt.TimeFactor("Unit of Measure Code"),WorkCenter."Calendar Rounding Precision"));
    END;

    LOCAL PROCEDURE IsLowLevelOk@33(LogWarning@1000 : Boolean;VAR BOMWarningLog@1005 : Record 5874) : Boolean;
    VAR
      Item@1004 : Record 27;
    BEGIN
      IF Type <> Type::Item THEN
        EXIT(TRUE);
      IF "No." = '' THEN
        EXIT(TRUE);

      Item.GET("No.");
      IF TraverseIsLowLevelOk(Item) THEN
        EXIT(TRUE);

      IF LogWarning THEN
        BOMWarningLog.SetWarning(STRSUBSTNO(Text001,Item."No."),DATABASE::Item,Item.GETPOSITION);
    END;

    LOCAL PROCEDURE TraverseIsLowLevelOk@36(ParentItem@1000 : Record 27) : Boolean;
    VAR
      ParentBOMBuffer@1001 : Record 5870;
      ChildItem@1004 : Record 27;
    BEGIN
      IF Type <> Type::Item THEN
        EXIT(TRUE);
      IF "No." = '' THEN
        EXIT(TRUE);

      ParentItem.GET("No.");
      ParentBOMBuffer := Rec;
      WHILE (NEXT <> 0) AND (ParentBOMBuffer.Indentation < Indentation) DO
        IF (ParentBOMBuffer.Indentation + 1 = Indentation) AND (Type = Type::Item) AND ("No." <> '') THEN BEGIN
          ChildItem.GET("No.");
          IF ParentItem."Low-Level Code" >= ChildItem."Low-Level Code" THEN BEGIN
            Rec := ParentBOMBuffer;
            EXIT(FALSE);
          END;
        END;

      Rec := ParentBOMBuffer;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE IsQtyPerOk@32(LogWarning@1000 : Boolean;VAR BOMWarningLog@1004 : Record 5874) : Boolean;
    VAR
      Item@1002 : Record 27;
      CopyOfBOMBuffer@1001 : Record 5870;
      ProdBOMHeader@1005 : Record 99000771;
    BEGIN
      IF "Qty. per Parent" <> 0 THEN
        EXIT(TRUE);
      IF "No." = '' THEN
        EXIT(TRUE);
      IF Indentation = 0 THEN
        EXIT(TRUE);
      IF Type IN [Type::"Machine Center",Type::"Work Center"] THEN
        EXIT(TRUE);

      IF LogWarning THEN BEGIN
        CopyOfBOMBuffer.COPY(Rec);
        RESET;
        SETRANGE(Indentation,0,Indentation);
        SETRANGE(Type,Type::Item);
        WHILE (NEXT(-1) <> 0) AND (Indentation >= CopyOfBOMBuffer.Indentation) DO
          ;
        IF "Entry No." <> CopyOfBOMBuffer."Entry No." THEN BEGIN
          Item.GET("No.");
          Item.CALCFIELDS("Assembly BOM");
          IF Item."Assembly BOM" THEN
            BOMWarningLog.SetWarning(STRSUBSTNO(Text002,Item."No."),DATABASE::Item,Item.GETPOSITION)
          ELSE
            IF ProdBOMHeader.GET(Item."Production BOM No.") THEN
              BOMWarningLog.SetWarning(STRSUBSTNO(Text002,Item."No."),DATABASE::"Production BOM Header",ProdBOMHeader.GETPOSITION)
        END;
        COPY(CopyOfBOMBuffer);
      END;
    END;

    LOCAL PROCEDURE IsProdBOMOk@31(LogWarning@1001 : Boolean;VAR BOMWarningLog@1002 : Record 5874) : Boolean;
    VAR
      ProdBOMHeader@1000 : Record 99000771;
    BEGIN
      IF "Production BOM No." = '' THEN
        EXIT(TRUE);
      ProdBOMHeader.GET("Production BOM No.");
      IF ProdBOMHeader.Status = ProdBOMHeader.Status::Certified THEN
        EXIT(TRUE);

      IF LogWarning THEN
        BOMWarningLog.SetWarning(STRSUBSTNO(Text004,ProdBOMHeader."No."),DATABASE::"Production BOM Header",ProdBOMHeader.GETPOSITION);
    END;

    LOCAL PROCEDURE IsRoutingOk@30(LogWarning@1000 : Boolean;VAR BOMWarningLog@1002 : Record 5874) : Boolean;
    VAR
      RoutingHeader@1001 : Record 99000763;
    BEGIN
      IF "Routing No." = '' THEN
        EXIT(TRUE);
      RoutingHeader.GET("Routing No.");
      IF RoutingHeader.Status = RoutingHeader.Status::Certified THEN
        EXIT(TRUE);

      IF LogWarning THEN
        BOMWarningLog.SetWarning(STRSUBSTNO(Text003,RoutingHeader."No."),DATABASE::"Routing Header",RoutingHeader.GETPOSITION);
    END;

    LOCAL PROCEDURE IsReplenishmentOk@29(LogWarning@1000 : Boolean;VAR BOMWarningLog@1002 : Record 5874) : Boolean;
    VAR
      Item@1001 : Record 27;
    BEGIN
      IF Type <> Type::Item THEN
        EXIT(TRUE);
      IF "No." = '' THEN
        EXIT(TRUE);

      Item.GET("No.");
      IF "Is Leaf" THEN BEGIN
        IF Item."Replenishment System" IN ["Replenishment System"::Purchase,"Replenishment System"::Transfer] THEN
          EXIT(TRUE);
        IF LogWarning THEN
          BOMWarningLog.SetWarning(STRSUBSTNO(Text005,Item."No."),DATABASE::Item,Item.GETPOSITION);
      END ELSE BEGIN
        IF Item."Replenishment System" IN ["Replenishment System"::"Prod. Order","Replenishment System"::Assembly] THEN
          EXIT(IsBOMOk(LogWarning,BOMWarningLog));
        IF LogWarning THEN
          BOMWarningLog.SetWarning(STRSUBSTNO(Text008,Item."No."),DATABASE::Item,Item.GETPOSITION);
      END;
    END;

    LOCAL PROCEDURE IsBOMOk@28(LogWarning@1001 : Boolean;VAR BOMWarningLog@1002 : Record 5874) : Boolean;
    VAR
      Item@1000 : Record 27;
    BEGIN
      IF Type <> Type::Item THEN
        EXIT(TRUE);
      IF "No." = '' THEN
        EXIT(TRUE);

      Item.GET("No.");
      CASE Item."Replenishment System" OF
        Item."Replenishment System"::Assembly:
          BEGIN
            Item.CALCFIELDS("Assembly BOM");
            IF Item."Assembly BOM" THEN
              EXIT(TRUE);
            IF LogWarning THEN
              BOMWarningLog.SetWarning(STRSUBSTNO(Text006,Item."No."),DATABASE::Item,Item.GETPOSITION);
          END;
        Item."Replenishment System"::"Prod. Order":
          BEGIN
            IF Item."Production BOM No." <> '' THEN
              EXIT(TRUE);
            IF LogWarning THEN
              BOMWarningLog.SetWarning(STRSUBSTNO(Text007,Item."No."),DATABASE::Item,Item.GETPOSITION);
          END;
        ELSE
          EXIT(TRUE);
      END;
    END;

    [External]
    PROCEDURE IsLineOk@34(LogWarning@1000 : Boolean;VAR BOMWarningLog@1001 : Record 5874) : Boolean;
    BEGIN
      EXIT(
        IsLowLevelOk(LogWarning,BOMWarningLog) AND
        IsQtyPerOk(LogWarning,BOMWarningLog) AND
        IsProdBOMOk(LogWarning,BOMWarningLog) AND
        IsRoutingOk(LogWarning,BOMWarningLog) AND
        IsReplenishmentOk(LogWarning,BOMWarningLog));
    END;

    [External]
    PROCEDURE AreAllLinesOk@35(VAR BOMWarningLog@1000 : Record 5874) IsOk : Boolean;
    VAR
      CopyOfBOMBuffer@1001 : Record 5870;
    BEGIN
      IsOk := TRUE;
      CopyOfBOMBuffer.COPY(Rec);

      BOMWarningLog.RESET;
      BOMWarningLog.DELETEALL;

      RESET;
      IF FINDSET THEN
        REPEAT
          IF NOT IsLineOk(TRUE,BOMWarningLog) THEN
            IsOk := FALSE;
        UNTIL NEXT = 0;
      COPY(CopyOfBOMBuffer);
    END;

    LOCAL PROCEDURE GetGLSetup@37();
    BEGIN
      IF GLSetupRead THEN
        EXIT;
      GLSetup.GET;
      GLSetupRead := TRUE;
    END;

    [External]
    PROCEDURE SetLocationVariantFiltersFrom@38(VAR ItemFilter@1000 : Record 27);
    BEGIN
      SETFILTER("Location Code",ItemFilter.GETFILTER("Location Filter"));
      SETFILTER("Variant Code",ItemFilter.GETFILTER("Variant Filter"));
    END;

    [Integration]
    LOCAL PROCEDURE OnTransferFromItemCopyFields@22(VAR BOMBuffer@1000 : Record 5870;Item@1001 : Record 27);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnTransferFromAsmHeaderCopyFields@40(VAR BOMBuffer@1000 : Record 5870;AssemblyHeader@1001 : Record 900);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnTransferFromAsmLineCopyFields@43(VAR BOMBuffer@1000 : Record 5870;AssemblyLine@1001 : Record 901);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnTransferFromBOMCompCopyFields@44(VAR BOMBuffer@1000 : Record 5870;BOMComponent@1001 : Record 90);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnTransferFromProdCompCopyFields@49(VAR BOMBuffer@1001 : Record 5870;ProductionBOMLine@1000 : Record 99000772;ParentItem@1002 : Record 27;ParentQtyPer@1003 : Decimal);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnTransferFromProdOrderLineCopyFields@45(VAR BOMBuffer@1000 : Record 5870;ProdOrderLine@1001 : Record 5406);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnTransferFromProdOrderCompCopyFields@46(VAR BOMBuffer@1000 : Record 5870;ProdOrderComponent@1001 : Record 5407);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnTransferFromProdRoutingCopyFields@47(VAR BOMBuffer@1000 : Record 5870;RoutingLine@1001 : Record 99000764);
    BEGIN
    END;

    BEGIN
    END.
  }
}

