OBJECT Codeunit 11012027 Post Invoice Approval
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00,4PSSE;
  }
  PROPERTIES
  {
    Permissions=TableData 25=imd,
                TableData 120=imd,
                TableData 121=imd,
                TableData 122=imd,
                TableData 123=imd,
                TableData 124=imd,
                TableData 125=imd,
                TableData 6507=ri,
                TableData 6508=rid;
    OnRun=BEGIN
            PostApproval(gPrint);
          END;

  }
  CODE
  {
    VAR
      Text000@11012040 : TextConst 'ENU=Posting Invoices   #1########## @2@@@@@@@@@@@@@;NOR=Bokf›rer fakturaer    #1########## @2@@@@@@@@@@@@@;SVE=Bokf”r fakturor    #1########## @2@@@@@@@@@@@@@';
      Text001@1100485021 : TextConst 'ENU=%1 is posted.;SVE=%1 „r bokf”rd.';
      Text002@1100485022 : TextConst 'ENU=Invoice can not be posted.;NOR=Faktura kan ikke bokf›res.;SVE=Fakturan kan inte bokf”ras.';
      Text003@11012043 : TextConst 'ENU=must have the same sign as the receipt;NOR=m† ha samme fortegn som mottaket;SVE=m†ste ha samma tecken som inleveransen';
      Text004@1100485009 : TextConst 'ENU=Balance Invoice to be approved of invoice ''%1'' differs (too much) from Balance Approval.;NOR=Balansen for fakturaen som skal godkjennes for faktura ''%1'' skiller seg (for mye) fra Godkjent Balanse.;SVE=Balansen f”r fakturan som ska godk„nnas f”r faktura ''%1'' skiljer sig (f”r mycket) fr†n balansgodk„nnandet.';
      Text005@11012045 : TextConst 'ENU="You cannot post this purchase order before the associated sales orders have been invoiced. ";NOR=Du kan ikke bokf›re denne Innkj›psordre f›r koblede Salgsordre er fakturert.;SVE="Du kan inte bokf”ra denna ink”psorder f”re kopplade f”rs.order har fakturerats. "';
      GLSetup@1000000010 : Record 98;
      ProjSetup@1210190012 : Record 315;
      PurchSetup@1210190013 : Record 312;
      VendLedgerEntry@11012002 : Record 25;
      ApprovLineRec@11012003 : Record 11012032;
      GLJournTemplRec@11012006 : Record 80;
      GLReg@11012010 : Record 45;
      GenJnlLine@11012012 : Record 81;
      GenJnlLine2@11012013 : Record 81;
      JobJnlLine@11012015 : Record 11072008;
      ServJnlLine@1210190016 : Record 11012820;
      ProjRec@11012019 : Record 11072003;
      JobRec@1210190006 : Record 11072003;
      ProjTypeRec@1210190019 : Record 11012009;
      ServOrderRec@1210190011 : Record 11012823;
      ICRec@11012022 : Record 11012057;
      ICEntryRec@11012023 : Record 11012058;
      PurchLine@11012030 : Record 39;
      PurchRcptLine@11012026 : Record 121;
      PurchRcptHeader@11012027 : Record 120;
      InvHeaderRec@11012001 : Record 122;
      PurchInvLineRec@11012032 : Record 123;
      CredHeaderRec@11012004 : Record 124;
      CredMemLineRec@11012033 : Record 125;
      Currency@11012034 : Record 4;
      CurrencyExchRate@11012035 : Record 330;
      SurchargePostingBuffer@1000000009 : ARRAY [2] OF TEMPORARY Record 49;
      ComplWIPPostingBuffer@1100485003 : ARRAY [2] OF TEMPORARY Record 49;
      PlantLedgerEntry@1210190000 : Record 11012572;
      GLAcc@1210190018 : Record 15;
      ItemJnlLine@1210190005 : Record 83;
      TmpPreRegWipInvLineRec@1100485008 : TEMPORARY Record 123;
      TmpPlantLocChargePO@1100409000 : TEMPORARY Record 11012579;
      TempTrackingSpecification@1100529000 : TEMPORARY Record 336;
      DocumentCaptureSetup@1100528401 : Record 6085573;
      DeferralPostBuffer@1100529602 : ARRAY [2] OF Record 1703;
      TempDeferralHeader@1100529601 : TEMPORARY Record 1701;
      TempDeferralLine@1100529600 : TEMPORARY Record 1702;
      GenJnlPostLine@1000000008 : Codeunit 12;
      JobJnlPostLine@1000000007 : Codeunit 11072003;
      ServJnlPostLine@1210190017 : Codeunit 11012802;
      ItemJnlPostLine@1210190004 : Codeunit 22;
      DimMgt@1000000006 : Codeunit 408;
      PostPlantEntry@1210190001 : Codeunit 11012569;
      PurchPostCU@1210190003 : Codeunit 90;
      ReservePurchInvApprLine@1100529001 : Codeunit 11012363;
      DeferralUtilities@1100529603 : Codeunit 1720;
      Window@11012000 : Dialog;
      StatusCounter@11012018 : Integer;
      NoOfLines@11012005 : Integer;
      Counter@11012009 : Integer;
      "Invoice Counter"@11012008 : Integer;
      "Invoice Counter Ok"@11012007 : Integer;
      MarginAmnt@1100485011 : Decimal;
      MarginPerc@1100485010 : Decimal;
      QtyToBeInvoiced@11012029 : Decimal;
      QtyToBeInvoicedBase@11012028 : Decimal;
      AmntToBeInvoiced@1210190008 : Decimal;
      RemQtyToBeInvoiced@11012025 : Decimal;
      RemQtyToBeInvoicedBase@11012024 : Decimal;
      RemAmntToBeInvoiced@1210190007 : Decimal;
      GLRegNo@11012011 : Integer;
      PurchInvLineNo@11012048 : Integer;
      CredMemoLineNo@11012047 : Integer;
      PurchVarianceCorrectionLineNo@1210190014 : Integer;
      JobLedgEntryNo@1100529002 : Integer;
      ServLedgEntryNo@1100529003 : Integer;
      Text030@1100485001 : TextConst 'ENU=Line %1 of the receipt %2, which you are attempting to invoice, has already been invoiced.;NOR=Linje %1 p† mottaksseddel %2, som du pr›ver † fakturere, er allerede fakturert.;SVE=Rad %1 p† inleveransen %2 som du f”rs”ker att fakturera har redan fakturerats.';
      Text031@1100485002 : TextConst 'ENU=The quantity %1 you are attempting to invoice is greater than the quantity in Line %2 of Receipt %3;NOR=Kvantumet du fors›ker † fakturere er st›rre enn antallet i leveransen %1.;SVE=Antalet som du f”rs”ker att fakturera „r st”rre „n antalet i inleveransen %1.';
      Text032@1000000005 : TextConst 'ENU=The combination of dimensions used in %1 %2 is blocked. %3;NOR=Kombinasjonen av dimensjonene som brukes i %1 %2, er sperret. %3;SVE=Kombinationen av dimensioner anv„nda i %1 %2 „r sp„rrad. %3';
      Text033@1000000004 : TextConst 'ENU=The combination of dimensions used in %1 %2, line no. %3 is blocked. %4;NOR=Kombinasjonen av dimensjoner brukt i %1 %2, radnr %3 er blokkert. %4;SVE=Kombinationen av dimensioner i %1 %2, radnr %3 „r sp„rrad. %4';
      Text035@1000000002 : TextConst 'ENU=The dimensions used in %1 %2, line no. %3 are invalid. %4;NOR=Dimensjonene brukt i %1 %2, radnr %3 er ugyldige. %4;SVE=Dimensionerna anv„nda i %1 %2, radnr %3 „r ogiltiga. %4';
      AmountsOnly@1210190002 : Boolean;
      BalanceAccountInvLineFound@1100525003 : Boolean;
      PreRegisteredWIP@1100485006 : Boolean;
      DoPreRegisterWipContra@1100485007 : Boolean;
      gPrint@1100485015 : Boolean;
      BatchRun@1100485016 : Boolean;
      gDocTypeOpt@1100485000 : 'Purchase Invoice,Credit Memo';
      Text036@1100485017 : TextConst 'ENU=%1 %2 could not be approved, there are open Consent Lines.;SVE=%1 %2 kan inte godk„nnas, det finns ”ppna godk„nnanderader.';
      UseAccountNoForProjLedg@1100525002 : Boolean;
      Text039@1100525006 : TextConst 'ENU=VAT Difference is greater than allowed;NOR=Mva.-differansen er st›rre enn tillatt;SVE=Momsskillnaden „r st”rre „n till†tet';
      Text042@1100525007 : TextConst 'ENU=%1 %2: %3;NOR=%1 %2: %3;SVE=%1 %2: %3';
      Text043@1210190009 : TextConst 'ENU=Posting purchase diffence not possible.;NOR=Det er ikke mulig † bokf›re innkj›psdifferanse;SVE=Det „r inte m”jligt att bokf”ra ink”psdifferans';
      Text044@1210190020 : TextConst 'ENU=%1 not the same in all lines.;NOR=%1 er ikke samme i alle rader.;SVE=%1 „r inte samma i alla filer';
      Text045@1210190021 : TextConst 'ENU=%1 not filled in all lines or not empty in all lines.;NOR=%1 er ikke fylt ut i alle rader eller ikke tomme i alle rader.;SVE=%1 „r inte ifylld p† alla eller inga rader.';
      Text046@1210190022 : TextConst 'ENU=%1 not present for %2 ''%3'' and %4 ''%5'' in %6.;NOR=%1 mangler for %2 ''%3'' og %4 ''%5'' i %6.;SVE=%1 saknas f”r %2 ''%3'' och %4 ''%5'' i %6.';
      ApprovalsMgt@1100528200 : Codeunit 1535;
      InvtSetup@1100525008 : Record 313;
      InvtAdjmt@1100525004 : Codeunit 5895;
      TempValueEntryRelation@1100525000 : TEMPORARY Record 6508;
      BalanceAccountInvLineDimSetId@1100525001 : Integer;
      DCSetupRead@1100528400 : Boolean;
      Text047@1100409001 : TextConst 'ENU=must not be greater than %1;SVE=f†r inte vara st”rre „n %1';
      Text048@1100529605 : TextConst 'ENU=You must create a deferral schedule because you have specified the deferral code %2 in line %1.;NOR=Du m† opprette en tidsplan for periodisering fordi du har angitt periodiseringskoden %2 i linje %1.;SVE=Du m†ste skapa ett periodiseringsschema eftersom du har angett periodiseringskod %2 p† rad %1.';
      Text049@1100529604 : TextConst 'ENU=Deferral amounts cannot be 0. Line: %1, Deferral Template: %2.;NOR=Periodiseringsbel›p kan ikke v‘re 0. Linje: %1, periodiseringsmal: %2.;SVE=Periodiseringsbelopp f†r inte vara 0. Rad: %1, Periodiseringsmall: %2.';
      Text050@1100529608 : TextConst 'ENU=Deferral Code must not be specified when the document is an intercompany transaction.;SVE=Kod f”r periodisering f†r inte anges vid koncernintern transaktion.';
      PostedDeferralAmount@1100529612 : Decimal;
      PostedDeferralAmountLCY@1100529611 : Decimal;
      GetGLSetup@1100285000 : Record 98;
      LastLineRetrieved@1100285002 : Boolean;
      RoundingLineInserted@1100285001 : Boolean;
      TotalApprovLine@1100285004 : Record 11012032;
      InvAppLine@1100285003 : Record 11012032;
      VendPostingGr@1100285005 : Record 93;
      RoundingLineNo@1100285006 : Integer;
      LoanJnlPostLine@1100528500 : Codeunit 11012627;

    PROCEDURE Post@1(Rec@11012000 : Record 11012032;Print@11012001 : Boolean);
    BEGIN
      CLEARALL;
      GLSetup.GET;

      ApprovLineRec.COPY(Rec);
      gPrint := Print;
      gDocTypeOpt := ApprovLineRec."Document Type";

      IF gDocTypeOpt = gDocTypeOpt::"Purchase Invoice" THEN BEGIN
        InvHeaderRec.GET(ApprovLineRec."Document No.");
        InvHeaderRec.TESTFIELD("Invoice Approved",FALSE);

        IF NOT InvHeaderRec.PostingAllowedInDMSStatus THEN
          InvHeaderRec.FIELDERROR("DMS Status");
      END ELSE BEGIN
        CredHeaderRec.GET(ApprovLineRec."Document No.");
        CredHeaderRec.TESTFIELD("Credit Memo Approved",FALSE);

        IF NOT CredHeaderRec.PostingAllowedInDMSStatus THEN
          CredHeaderRec.FIELDERROR("DMS Status");
      END;

      PostApproval(gPrint);
    END;

    [External]
    PROCEDURE SetBatch@1100485011(iDocTypeOpt@1100485003 : 'Purchase Invoice,Credit Memo';iPrint@1100485002 : Boolean;iInvHeaderRec@1100485001 : Record 122;iCredHeaderRec@1100485000 : Record 124);
    BEGIN
      CLEARALL;
      GLSetup.GET;
      BatchRun := TRUE;
      gDocTypeOpt := iDocTypeOpt;
      gPrint := iPrint;
      IF gDocTypeOpt = gDocTypeOpt::"Purchase Invoice" THEN
        InvHeaderRec := iInvHeaderRec
      ELSE
        CredHeaderRec := iCredHeaderRec;
    END;

    LOCAL PROCEDURE PostApproval@1100485001(Print@1100485000 : Boolean);
    VAR
      OnHoldCode@1100525002 : Code[3];
      ApprovalsBridge4PSConstruct@1100528200 : Codeunit 11125348;
      OnHoldCodeLines@1100528201 : Code[3];
    BEGIN
      GLSetup.GET;
      IF NOT BatchRun THEN
        Window.OPEN(Text000);

      IF gDocTypeOpt = gDocTypeOpt::"Purchase Invoice" THEN BEGIN
        GLJournTemplRec.GET(InvHeaderRec."Journal Template");
        ApprovLineRec.SETRANGE("Journal Template Name",InvHeaderRec."Journal Template");
        ApprovLineRec.SETRANGE("Document Type",ApprovLineRec."Document Type"::"Purchase Invoice");
        ApprovLineRec.SETRANGE("Document No.",InvHeaderRec."No.");
      END ELSE BEGIN
        GLJournTemplRec.GET(CredHeaderRec."Journal Template");
        ApprovLineRec.SETRANGE("Journal Template Name",CredHeaderRec."Journal Template");
        ApprovLineRec.SETRANGE("Document Type",ApprovLineRec."Document Type"::"Credit Memo");
        ApprovLineRec.SETRANGE("Document No.",CredHeaderRec."No.");
      END;

      GLJournTemplRec.TESTFIELD(GLJournTemplRec."Source Code");
      GLJournTemplRec.TESTFIELD("Bal. Account No.");

      NoOfLines := ApprovLineRec.COUNT;
      Counter := 0;
      "Invoice Counter" := 0;
      "Invoice Counter Ok" := 0;

      PurchSetup.GET;
      IF PurchSetup."Release Invoice Appr. Required" THEN
        IF gDocTypeOpt = gDocTypeOpt::"Purchase Invoice" THEN
          InvHeaderRec.TESTFIELD("Status (Approval)", InvHeaderRec."Status (Approval)"::Released)
        ELSE
          CredHeaderRec.TESTFIELD("Status (Approval)", CredHeaderRec."Status (Approval)"::Released);
      IF PurchSetup."Block Appr. Inv. w. Cons.Lines" THEN
        IF gDocTypeOpt = gDocTypeOpt::"Purchase Invoice" THEN BEGIN
          InvHeaderRec.CALCFIELDS("Open Approval Entry");
          IF InvHeaderRec."Open Approval Entry" THEN BEGIN
            IF NOT BatchRun THEN
              Window.CLOSE;
            ERROR(Text036, InvHeaderRec.TABLECAPTION, ApprovLineRec."Document No.");
          END;
        END ELSE BEGIN
          CredHeaderRec.CALCFIELDS("Open Approval Entry");
          IF CredHeaderRec."Open Approval Entry" THEN BEGIN
            IF NOT BatchRun THEN
              Window.CLOSE;
            ERROR(Text036, CredHeaderRec.TABLECAPTION, ApprovLineRec."Document No.");
          END;
        END;

      IF PurchSetup."VAT Indicator (Purchase)" = PurchSetup."VAT Indicator (Purchase)"::"No VAT" THEN BEGIN
        ApprovLineRec.CALCFIELDS(Balance);
        ApprovLineRec.CALCSUMS("Amount Including VAT");
        IF gDocTypeOpt = gDocTypeOpt::"Purchase Invoice" THEN BEGIN
          InvHeaderRec.CALCFIELDS("Amount VAT");
          InvHeaderRec.CALCFIELDS("Amount VAT Balance Due"); //C-017311 Use this field instead of "Amount VAT"
          IF NOT PurchSetup."Allow VAT Difference" AND
             ((ApprovLineRec."Amount Including VAT" - ApprovLineRec.Balance) <>
              InvHeaderRec."Amount VAT Balance Due") THEN
            ERROR(Text039);
          IF ABS(ApprovLineRec."Amount Including VAT" - ApprovLineRec.Balance -
             InvHeaderRec."Amount VAT Balance Due") >
             GLSetup."Max. VAT Difference Allowed" THEN
            ERROR(Text039);
        END ELSE BEGIN
          CredHeaderRec.CALCFIELDS(Amount);
          CredHeaderRec.CALCFIELDS("Balance Due"); //C-017311 Use these instead of "Amount invl. VAT" and "Amount".
          CredHeaderRec.CALCFIELDS("Balance Due incl. VAT");
          IF NOT PurchSetup."Allow VAT Difference" AND
             ((ApprovLineRec."Amount Including VAT" - ApprovLineRec.Balance) <>
              (CredHeaderRec."Balance Due incl. VAT" - CredHeaderRec."Balance Due" )) THEN
            ERROR(Text039);
          IF ABS(ApprovLineRec."Amount Including VAT" - ApprovLineRec.Balance -
             (CredHeaderRec."Balance Due incl. VAT" - CredHeaderRec."Balance Due")) >
             GLSetup."Max. VAT Difference Allowed" THEN
            ERROR(Text039);
        END;
      END;

      //Determine Journal No.
      IF Print THEN BEGIN
        GLReg.LOCKTABLE;
        IF GLReg.FIND('+') THEN
          GLRegNo := GLReg."No." + 1
        ELSE
          GLRegNo := 1;
      END;

      ApprovLineRec.FINDSET(TRUE, FALSE);
      CheckApprovalLine();
      "Invoice Counter" := "Invoice Counter" + 1;
      IF gDocTypeOpt = gDocTypeOpt::"Purchase Invoice" THEN BEGIN
        //>>140124 Apply Rounding for invoice
        PrePostRoundingOff(InvHeaderRec);
        //<<
        InvHeaderRec.CALCFIELDS("Balance Due");
        ApprovLineRec.CALCFIELDS(Balance);
        OnHoldCodeLines := '';
        IF CheckInvoiceMargin(InvHeaderRec, ApprovLineRec, 0) THEN BEGIN
          InvHeaderRec."Invoice Approved" := TRUE;
          IF NOT ApprovalsMgt.OpenApprovalEntryPurchInv(InvHeaderRec) THEN
            IF NOT InvHeaderRec."Remain On Hold" THEN
              InvHeaderRec."On Hold" := '';
          InvHeaderRec.MODIFY;

          VendLedgerEntry.SETCURRENTKEY("Document No.");
          VendLedgerEntry.SETRANGE("Vendor No.",InvHeaderRec."Pay-to Vendor No.");
          VendLedgerEntry.SETRANGE("Document No.",InvHeaderRec."No.");
          VendLedgerEntry.SETRANGE("Document Type",VendLedgerEntry."Document Type"::Invoice);
          IF VendLedgerEntry.FIND('-') THEN BEGIN
            VendLedgerEntry.Approved := TRUE;
            IF NOT ApprovalsMgt.OpenApprovalEntryPurchInv(InvHeaderRec) THEN
              IF NOT InvHeaderRec."Remain On Hold" THEN
                VendLedgerEntry."On Hold" := '';
            VendLedgerEntry.MODIFY;
          END;
          AmountsOnly := InvHeaderRec."Amounts only";
          PreRegisteredWIP := InvHeaderRec."Preregister WIP";
          OnHoldCodeFromInvoiceApprovalLines(ApprovLineRec, OnHoldCodeLines);
          PostApprovalLines;
        END;
        OnHoldCode := InvHeaderRec.DetermineOnHoldCode;
        IF OnHoldCodeLines <> '' THEN
          OnHoldCode := OnHoldCodeLines;

        IF OnHoldCode <> InvHeaderRec."On Hold" THEN BEGIN
          UpdateOnHoldOfInvHeaderRec(OnHoldCode);
          UpdateOnHoldOfVendLedgerEntry(OnHoldCode);
        END;
      END ELSE BEGIN
        //>>140124 Apply Rounding for cr.memo
        PrePostRoundingOffCredit(CredHeaderRec);
        //<<
        CredHeaderRec.CALCFIELDS("Balance Due");
        ApprovLineRec.CALCFIELDS(Balance);
        IF CheckCreditMemoMargin(CredHeaderRec, ApprovLineRec) THEN BEGIN
          CredHeaderRec."Credit Memo Approved" := TRUE;
          IF NOT ApprovalsMgt.OpenApprovalEntryPurchCrm(CredHeaderRec) THEN
          IF NOT CredHeaderRec."Remain On Hold" THEN
            CredHeaderRec."On Hold" := '';
          CredHeaderRec.MODIFY;

          VendLedgerEntry.SETCURRENTKEY("Document No.");
          VendLedgerEntry.SETRANGE("Vendor No.",CredHeaderRec."Pay-to Vendor No.");
          VendLedgerEntry.SETRANGE("Document No.",CredHeaderRec."No.");
          VendLedgerEntry.SETRANGE("Document Type",VendLedgerEntry."Document Type"::"Credit Memo");
          IF VendLedgerEntry.FIND('-') THEN BEGIN
            VendLedgerEntry.Approved := TRUE;
            IF NOT ApprovalsMgt.OpenApprovalEntryPurchCrm(CredHeaderRec) THEN
              IF NOT CredHeaderRec."Remain On Hold" THEN
                VendLedgerEntry."On Hold" := '';
            VendLedgerEntry.MODIFY;
          END;
          AmountsOnly := CredHeaderRec."Amounts only";
          PreRegisteredWIP := CredHeaderRec."Preregister WIP";
          PostApprovalLines;
        END;
      END;

      InsertValueEntryRelation; //C008671

      PostCurrencyFluctuation; //C043197

      // Inventory Adjustment
      InvtSetup.GET;
      IF InvtSetup."Automatic Cost Adjustment" <>
         InvtSetup."Automatic Cost Adjustment"::Never
      THEN BEGIN
        InvtAdjmt.SetProperties(TRUE,InvtSetup."Automatic Cost Posting");
        InvtAdjmt.SetFromPurchInvoicePosting(TRUE);
        InvtAdjmt.MakeMultiLevelAdjmt;
      END;

      //**4PS.sn DC
      IF gDocTypeOpt = gDocTypeOpt::"Purchase Invoice" THEN
        ApprovalsBridge4PSConstruct.SendApprovalRequest(InvHeaderRec)
      ELSE
        ApprovalsBridge4PSConstruct.SendApprovalRequest(CredHeaderRec);
      //**4PS.en DC

      COMMIT;
      CLEAR(GenJnlPostLine);
      CLEAR(JobJnlPostLine);
      CLEAR(LoanJnlPostLine);

      IF NOT BatchRun THEN BEGIN
        Window.CLOSE;
        IF "Invoice Counter Ok" > 0 THEN
          MESSAGE(Text001,FORMAT(ApprovLineRec."Document Type")) //C008671
        ELSE
          MESSAGE(Text002);
      END;

      IF Print THEN
        PrintInvApproval;
    END;

    [External]
    PROCEDURE CheckApprovalLine@1210190009();
    VAR
      ErrorCounter@1100525000 : Integer;
      ErrorTxt@1100525001 : ARRAY [99] OF Text[250];
      lvTradeItemRec@1210190002 : Record 11012317;
      lvItemRec@1210190001 : Record 27;
      lvTariffNo@1210190000 : Code[20];
      ServiceOrder@1100527300 : Record 11012823;
    BEGIN
      WITH ApprovLineRec DO BEGIN
        IF (Quantity <> 0) OR (Amount <> 0) OR ("Shortcut Dimension 2 Code" <> '') OR
           ("Project No." <> '') OR ("Service Order No." <> '') OR ("Plant Type" <> '')
        THEN
          TESTFIELD("Account No.");

        CASE Type OF
          Type::"G/L Account":
            IF ("Account No." <> '') THEN BEGIN
              GLAcc.CHANGECOMPANY("Receiving Company");
              GLAcc.GET("Account No.");
            END;
          Type::"Fixed Asset":
            TESTFIELD("Receiving Company",'');
        END;

        CompletionControl(ApprovLineRec, ErrorCounter, ErrorTxt);
        IF ErrorCounter > 0 THEN
          ERROR(Text042, ApprovLineRec."Document No.", ApprovLineRec."Line No.", ErrorTxt[1]);

        IF CheckIntrastat THEN BEGIN
          IF ("Project No." <> '') OR ("Service Order No." <> '') THEN BEGIN
            IF ("Item No." ='') AND ("Trade Item" = '') AND ("Cost Type" = "Cost Type"::Material) THEN BEGIN
              IF Type = Type::"G/L Account" THEN
                TESTFIELD("Tariff No.");
            END;
            IF ("Item No." <> '') OR ("Trade Item" <> '') THEN BEGIN
              lvTariffNo := '';
              IF "Trade Item" <> '' THEN BEGIN
                IF NOT lvTradeItemRec.GET("Vendor (Trade Item)", "Trade Item") THEN
                  lvTradeItemRec.INIT;
                lvTariffNo := lvTradeItemRec."CBS Code";
              END;
              IF (lvTariffNo = '') AND ("Item No." <> '') THEN BEGIN
                  IF NOT lvItemRec.GET("Item No.") THEN
                    lvItemRec.INIT;
                  lvTariffNo := lvItemRec."Tariff No.";
              END;
              IF lvTariffNo = '' THEN
                TESTFIELD("Tariff No.");
            END;
          END;
        END;

        IF "Service Order No." <> '' THEN BEGIN
          CheckCompanyIC;
          ServiceOrder.CHANGECOMPANY("Receiving Company");
          ServiceOrder.GET("Service Order No.");
          ServiceOrder.CheckStatus(1);
        END;

        ApprovLineRec.ValidatePlantNo();
      END;
    END;

    PROCEDURE PostApprovalLines@2();
    VAR
      VATPostingSetup@1100485005 : Record 325;
      lvGenJnlLineRec@1100485004 : Record 81;
      lvApprovLineRec@1100485001 : Record 11012032;
      lvDimValRec@1100525002 : Record 349;
      TempInvoicingSpecification@1100529001 : TEMPORARY Record 336;
      ItemEntryRelation@1100529002 : Record 6507;
      ItemTrackingMgt@1100529004 : Codeunit 6500;
      lvIsPosted@1100525001 : Boolean;
      lVATPerc@1100485000 : Decimal;
      lVATBaseAmount@1100485003 : Decimal;
      lVATAmount@1100485002 : Decimal;
      TrackingSpecificationExists@1100529000 : Boolean;
      EndLoop@1100529003 : Boolean;
    BEGIN
      IF NOT BatchRun THEN
        Window.UPDATE(1,ApprovLineRec."Document No.");

      SurchargePostingBuffer[1].DELETEALL;
      ComplWIPPostingBuffer[1].DELETEALL;

      PurchSetup.GET;
      CheckBalAccountInvoiceLine(GLJournTemplRec."Bal. Account No.");
      IF PreRegisteredWIP THEN
        CheckAndReadPreregisterdWip();

      IF NOT AmountsOnly THEN BEGIN  //IF Amounts only item not allowed
        ApprovLineRec.FILTERGROUP(9);
        ApprovLineRec.SETRANGE("Receiving Company", '');
        ApprovLineRec.SETFILTER("Item No.", '<>%1', '');
        ApprovLineRec.SETRANGE("Project No.", '');
        ApprovLineRec.SETRANGE("Service Order No.", '');
        ApprovLineRec.SETRANGE("Plant Type", '');
        IF ApprovLineRec.FINDFIRST THEN BEGIN
          REPEAT
            InitGJNL;

            RemQtyToBeInvoiced := ApprovLineRec.Quantity;
            RemQtyToBeInvoicedBase := ApprovLineRec.QtyBase();
            IF RemQtyToBeInvoiced = 0 THEN
              TrackingSpecificationExists := FALSE
            ELSE
              TrackingSpecificationExists :=
                ReservePurchInvApprLine.RetrieveInvoiceSpecification(ApprovLineRec,TempInvoicingSpecification);
            EndLoop := FALSE;
            PurchRcptLine.RESET;
            PurchRcptLine.SETRANGE("Document No.",ApprovLineRec."Receipt No.");
            PurchRcptLine.SETRANGE("Line No.",ApprovLineRec."Receipt Line No.");
            IF PurchRcptLine.FINDSET THEN BEGIN
              REPEAT
                IF TrackingSpecificationExists THEN BEGIN
                  //ItemEntryRelation.GET(TempInvoicingSpecification."Appl.-to Item Entry"); //C008671.o
                  ItemEntryRelation.GET(TempInvoicingSpecification."Item Ledger Entry No."); //C008671.n
                  PurchRcptLine.GET(ItemEntryRelation."Source ID",ItemEntryRelation."Source Ref. No.");
                  IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Purchase Invoice" THEN BEGIN //C016264.n
                    QtyToBeInvoiced := TempInvoicingSpecification."Qty. to Invoice";
                    QtyToBeInvoicedBase := TempInvoicingSpecification."Qty. to Invoice (Base)";
                  //C016264.sn
                  END ELSE BEGIN
                    QtyToBeInvoiced := -1 * TempInvoicingSpecification."Qty. to Invoice";
                    QtyToBeInvoicedBase := -1 * TempInvoicingSpecification."Qty. to Invoice (Base)";
                  END;
                  //C016264.en
                END ELSE BEGIN
                  ItemEntryRelation."Item Entry No." := PurchRcptLine."Item Rcpt. Entry No.";
                  QtyToBeInvoiced := RemQtyToBeInvoiced;
                  QtyToBeInvoicedBase := RemQtyToBeInvoicedBase;
                END;
                IF ABS(QtyToBeInvoiced) > ABS(PurchRcptLine.Quantity - PurchRcptLine."Quantity Invoiced") THEN BEGIN
                  QtyToBeInvoiced := PurchRcptLine.Quantity - PurchRcptLine."Quantity Invoiced";
                  QtyToBeInvoicedBase := PurchRcptLine."Quantity (Base)" - PurchRcptLine."Qty. Invoiced (Base)";
                END;
                IF TrackingSpecificationExists THEN BEGIN
                  ItemTrackingMgt.AdjustQuantityRounding(
                    RemQtyToBeInvoiced, QtyToBeInvoiced,
                    RemQtyToBeInvoicedBase, QtyToBeInvoicedBase);
                END;
                RemQtyToBeInvoiced := RemQtyToBeInvoiced - QtyToBeInvoiced;
                RemQtyToBeInvoicedBase := RemQtyToBeInvoicedBase - QtyToBeInvoicedBase;
                PostItemJnlLine(
                  QtyToBeInvoiced, QtyToBeInvoicedBase,
                  ItemEntryRelation."Item Entry No.", TempInvoicingSpecification);
                IF TrackingSpecificationExists THEN
                  EndLoop := (TempInvoicingSpecification.NEXT = 0)
                ELSE
                  EndLoop := (PurchRcptLine.NEXT = 0) OR (ABS(RemQtyToBeInvoiced) <= ABS(PurchLine."Qty. to Receive"))
              UNTIL EndLoop;
            END ELSE BEGIN
              QtyToBeInvoiced := ApprovLineRec.Quantity;
              QtyToBeInvoicedBase := ApprovLineRec.QtyBase();
              PostItemJnlLine(
                  QtyToBeInvoiced, QtyToBeInvoicedBase,
                  ItemEntryRelation."Item Entry No.", TempInvoicingSpecification);
            END;
            IF TrackingSpecificationExists THEN
              SaveInvoiceSpecification(TempInvoicingSpecification);
          UNTIL ApprovLineRec.NEXT = 0;
        END;
        ApprovLineRec.SETRANGE("Receiving Company");  //Reset filter (group 9)
        ApprovLineRec.SETRANGE("Item No.");
        ApprovLineRec.SETRANGE("Project No.");
        ApprovLineRec.SETRANGE("Service Order No.");
        ApprovLineRec.SETRANGE("Plant Type");
        ApprovLineRec.FILTERGROUP(0);
        InsertTrackingSpecification();
      END;
      //C004829.en

      TmpPlantLocChargePO.DELETEALL;  //C001519.n
      ApprovLineRec.FIND('-');
      REPEAT
        UseAccountNoForProjLedg := FALSE;
        InitGJNL;

        IF ApprovLineRec."Receiving Company" = '' THEN BEGIN
          HandleDeferrals;
          //C004829.sn  Moved from previous repeat loop to this one
          IF (ApprovLineRec."Item No." <> '') AND
             ((ApprovLineRec."Project No." <> '') OR (ApprovLineRec."Service Order No." <> '') OR
              (ApprovLineRec."Plant Type" <> ''))
          THEN
            CheckUpdateItemPrice(ApprovLineRec);
          //C004829.en

          IF (ApprovLineRec.Amount <> 0) AND
             (PurchSetup."VAT Indicator (Purchase)" = PurchSetup."VAT Indicator (Purchase)"::"No VAT") THEN
          BEGIN
            //(pro forma) VAT amount must be calculated for each of the following 3 postings
            CalcProFormaVat(lVATPerc, lVATBaseAmount, lVATAmount, VATPostingSetup);
            //
            IF GenJnlLine."Job No." <> '' THEN BEGIN
              UseAccountNoForProjLedg := TRUE;
              IF (JobRec."VAT Indicator (Purchase)" = JobRec."VAT Indicator (Purchase)"::VAT) THEN BEGIN
                lvGenJnlLineRec := GenJnlLine;

                IF (lVATAmount <> 0) THEN BEGIN
                  GenJnlLine."VAT Bus. Posting Group" := VATPostingSetup."VAT Bus. Posting Group";
                  GenJnlLine."VAT Prod. Posting Group" := VATPostingSetup."VAT Prod. Posting Group";
                  GenJnlLine."Tax Area Code" := InvHeaderRec."Tax Area Code";
                  GenJnlLine."Tax Liable" := InvHeaderRec."Tax Liable";
                  GenJnlLine."Gen. Posting Type" := GenJnlLine."Gen. Posting Type"::Purchase;
                  GenJnlLine."VAT Calculation Type" := VATPostingSetup."VAT Calculation Type";
                  GenJnlLine."VAT Base Amount" := lVATBaseAmount;
                  GenJnlLine."VAT Base Discount %" := InvHeaderRec."VAT Base Discount %";
                  GenJnlLine."Source Curr. VAT Base Amount" := GenJnlLine."VAT Base Amount";
                  GenJnlLine."VAT Amount" := lVATAmount;
                  GenJnlLine."Source Curr. VAT Amount" := GenJnlLine."VAT Amount";
                  GenJnlLine."Source Currency Amount" := GenJnlLine.Amount;
                  GenJnlLine."VAT Posting" := GenJnlLine."VAT Posting"::"Manual VAT Entry";
                  IF VATPostingSetup."VAT Calculation Type" <> VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT" THEN BEGIN
                    GenJnlLine."Bal. Account No." := '';
                    SetGenJnlLineDeferralAmounts(GenJnlLine);
                    //posting 1
                    GenJnlPostLine.RunWithCheck(GenJnlLine);
                    GenJnlLine := lvGenJnlLineRec;

                    GenJnlLine."Account No." := GenJnlLine."Bal. Account No.";
                    GenJnlLine."Bal. Account No." := '';
                    GenJnlLine."Job No." := '';

                    GenJnlLine.Amount := (GenJnlLine.Amount + lVATAmount) * -1;

                    IF (GenJnlLine."Currency Code" = '') OR (GenJnlLine.Amount = 0) THEN
                      GenJnlLine."Amount (LCY)" := GenJnlLine.Amount
                    ELSE
                      GenJnlLine."Amount (LCY)" := ROUND(CurrencyExchRate.ExchangeAmtFCYToLCY(
                                                         1, ApprProjectNo, ApprovLineRec."Posting Date", ApprCurrencyCode,
                                                         GenJnlLine.Amount, ApprovCurrencyFactor, FALSE));

                  END;
                END;
                //posting 1 and 2
                IF PostedDeferralAmount <> 0 THEN BEGIN
                  GenJnlLine."Bal. Account No." := '';
                  SetGenJnlLineDeferralAmounts(GenJnlLine);
                  GenJnlPostLine.RunWithCheck(GenJnlLine);
                  GenJnlLine := lvGenJnlLineRec;

                  GenJnlLine."Account No." := GenJnlLine."Bal. Account No.";
                  GenJnlLine."Bal. Account No." := '';
                  GenJnlLine."Job No." := '';
                  GenJnlLine.Amount := -GenJnlLine.Amount;
                  GenJnlLine."Amount (LCY)" := - GenJnlLine."Amount (LCY)";
                END;

                GenJnlPostLine.RunWithCheck(GenJnlLine);
                GenJnlLine := lvGenJnlLineRec;
              END ELSE BEGIN
                //WIP posting on project on Cost object VAT (is estimated at)
                // Divide line in 3 : Costs / 'VAT' and reverse entry
                lvGenJnlLineRec := GenJnlLine;
                GenJnlLine."Bal. Account No." := '';
                SetGenJnlLineDeferralAmounts(GenJnlLine);
                GenJnlPostLine.RunWithCheck(GenJnlLine); //posting 1, Costs

                GenJnlLine := lvGenJnlLineRec;
                GenJnlLine."VAT-Indication" := TRUE;
                GenJnlLine.Amount := lVATAmount;
                IF VATPostingSetup."VAT Calculation Type" = VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT" THEN BEGIN
                  GenJnlLine."Bal. Account No." := VATPostingSetup."Reverse Chrg. VAT Acc.";
                  lVATAmount := 0;
                END ELSE BEGIN
                  GenJnlLine."Bal. Account No." := '';
                END;
                IF (GenJnlLine."Currency Code" = '') OR (GenJnlLine.Amount = 0) THEN
                  GenJnlLine."Amount (LCY)" := GenJnlLine.Amount
                ELSE
                  GenJnlLine."Amount (LCY)" := ROUND(CurrencyExchRate.ExchangeAmtFCYToLCY(
                                                     1, ApprProjectNo, ApprovLineRec."Posting Date", ApprCurrencyCode,
                                                     GenJnlLine.Amount, ApprovCurrencyFactor, FALSE));

                DimMgt.GetDimValueRec(2, GenJnlLine."Shortcut Dimension 2 Code", lvDimValRec, FALSE, '');

                CASE lvDimValRec."Cost Type" OF
                  lvDimValRec."Cost Type"::Labor:
                    BEGIN
                      PurchSetup.TESTFIELD("VAT Cost Object Labor");
                      GenJnlLine."Shortcut Dimension 2 Code" := PurchSetup."VAT Cost Object Labor";
                    END;
                  lvDimValRec."Cost Type"::Material:
                    BEGIN
                      PurchSetup.TESTFIELD("VAT Cost Object Material");
                      GenJnlLine."Shortcut Dimension 2 Code" := PurchSetup."VAT Cost Object Material";
                    END;
                  lvDimValRec."Cost Type"::Subcontracting:
                    BEGIN
                      PurchSetup.TESTFIELD("VAT Cost Object Subcontracting");
                      GenJnlLine."Shortcut Dimension 2 Code" := PurchSetup."VAT Cost Object Subcontracting";
                    END;
                  lvDimValRec."Cost Type"::Plant:
                    BEGIN
                      PurchSetup.TESTFIELD("VAT Cost Object Plant");
                      GenJnlLine."Shortcut Dimension 2 Code" := PurchSetup."VAT Cost Object Plant";
                    END;
                  lvDimValRec."Cost Type"::Sundry:
                    BEGIN
                      PurchSetup.TESTFIELD("VAT Cost Object Sundry");
                      GenJnlLine."Shortcut Dimension 2 Code" := PurchSetup."VAT Cost Object Sundry";
                    END;
                END;
                GenJnlLine.ValidateShortcutDimCode(2,GenJnlLine."Shortcut Dimension 2 Code");

                //posting 2 VAT
                GenJnlPostLine.RunWithCheck(GenJnlLine);

                IF GenJnlLine."Job No." <> '' THEN BEGIN
                  GenJnlLine."Bal. Account No." := lvGenJnlLineRec."Bal. Account No.";
                  lvApprovLineRec := ApprovLineRec;

                  ApprovLineRec.Quantity := 1;
                  IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Credit Memo" THEN
                    GenJnlLine."Amount (LCY)" := GenJnlLine."Amount (LCY)" * -1;

                  ApprovLineRec."Unit of Measure Code" := '';
                  IF VATPostingSetup."VAT Calculation Type" = VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT" THEN BEGIN
                    ApprovLineRec.Price := GenJnlLine."Amount (LCY)" * -1;
                    ApprovLineRec.Amount := GenJnlLine."Amount (LCY)" * -1;
                  END ELSE BEGIN
                    ApprovLineRec.Price := GenJnlLine."Amount (LCY)";
                    ApprovLineRec.Amount := GenJnlLine."Amount (LCY)";
                  END;
                  PostProject(UseAccountNoForProjLedg);
                  PostComplementaryWIPCostProj;
                  ApprovLineRec := lvApprovLineRec;
                END;

                GenJnlLine := lvGenJnlLineRec;

                GenJnlLine.Amount := (GenJnlLine.Amount + lVATAmount) * -1;
                IF (GenJnlLine."Currency Code" = '') OR (GenJnlLine.Amount = 0) THEN
                  GenJnlLine."Amount (LCY)" := GenJnlLine.Amount
                ELSE
                  GenJnlLine."Amount (LCY)" := ROUND(CurrencyExchRate.ExchangeAmtFCYToLCY(
                                                     1, ApprProjectNo, ApprovLineRec."Posting Date", ApprCurrencyCode,
                                                     GenJnlLine.Amount, ApprovCurrencyFactor, FALSE));
                GenJnlLine."Account No." := GenJnlLine."Bal. Account No.";
                GenJnlLine."Bal. Account No." := '';
                GenJnlLine."Job No." := '';
                //posting 3
                GenJnlPostLine.RunWithCheck(GenJnlLine);
                GenJnlLine := lvGenJnlLineRec;
              END;
            END ELSE BEGIN
             // divide line in 3 : Costs + 'VAT' + reverse entry
                lvGenJnlLineRec := GenJnlLine;
                GenJnlLine."Bal. Account No." := '';
                SetGenJnlLineDeferralAmounts(GenJnlLine);
                GenJnlPostLine.RunWithCheck(GenJnlLine); //posting 1, Costs

                GenJnlLine := lvGenJnlLineRec;
                GenJnlLine."VAT-Indication" := TRUE;
                GenJnlLine.Amount := lVATAmount;

                IF VATPostingSetup."VAT Calculation Type" = VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT" THEN BEGIN
                  GenJnlLine."Bal. Account No." := VATPostingSetup."Reverse Chrg. VAT Acc.";
                  lVATAmount := 0;
                END ELSE BEGIN
                  GenJnlLine."Bal. Account No." := '';
                END;

                IF (GenJnlLine."Currency Code" = '') OR (GenJnlLine.Amount = 0) THEN
                  GenJnlLine."Amount (LCY)" := GenJnlLine.Amount
                ELSE
                  GenJnlLine."Amount (LCY)" := ROUND(CurrencyExchRate.ExchangeAmtFCYToLCY(
                                                     1, ApprProjectNo, ApprovLineRec."Posting Date", ApprCurrencyCode,
                                                     GenJnlLine.Amount, ApprovCurrencyFactor, FALSE));

                GenJnlPostLine.RunWithCheck(GenJnlLine); //posting 2, VAT amount

                GenJnlLine := lvGenJnlLineRec;

                GenJnlLine.Amount := (GenJnlLine.Amount + lVATAmount) * -1;
                IF (GenJnlLine."Currency Code" = '') OR (GenJnlLine.Amount = 0) THEN
                  GenJnlLine."Amount (LCY)" := GenJnlLine.Amount
                ELSE
                  GenJnlLine."Amount (LCY)" := ROUND(CurrencyExchRate.ExchangeAmtFCYToLCY(
                                                     1, ApprProjectNo, ApprovLineRec."Posting Date", ApprCurrencyCode,
                                                     GenJnlLine.Amount, ApprovCurrencyFactor, FALSE));
                GenJnlLine."Account No." := GenJnlLine."Bal. Account No.";
                GenJnlLine."Bal. Account No." := '';

                GenJnlPostLine.RunWithCheck(GenJnlLine); //posting 3, reverse posting received invoices
                GenJnlLine := lvGenJnlLineRec;
            END;
          END ELSE BEGIN
            lvIsPosted := FALSE;
            IF PreRegisteredWIP AND DoPreRegisterWipContra THEN BEGIN
              IF NOT IsTextLine() THEN BEGIN
                ContraPostPreRegisteredWIP();
                SetGenJnlLineDeferralAmounts(GenJnlLine);
                GenJnlPostLine.RunWithCheck(GenJnlLine);
                lvIsPosted := TRUE;
              END;
            END;
            IF (NOT lvIsPosted) THEN BEGIN
              IF (NOT BalanceAccountInvLineFound) OR (GenJnlLine."Bal. Account No." = '') OR
                (GenJnlLine."Bal. Account No." <> GLJournTemplRec."Bal. Account No.")
              THEN BEGIN
                SetGenJnlLineDeferralAmounts(GenJnlLine);
                GenJnlPostLine.RunWithCheck(GenJnlLine);
              END ELSE BEGIN
                SplitGenJnlPostInDebitCredit();
                UseAccountNoForProjLedg := TRUE;
              END;
            END;
          END;
        END ELSE BEGIN
          IF ApprovLineRec."Deferral Code" <> '' THEN
            ERROR(Text050);
          IF PreRegisteredWIP AND DoPreRegisterWipContra AND (NOT IsTextLine()) THEN  //*C000264
            ContraPostPreRegisteredWIP();  //*C000264
          ICRec.GET(COMPANYNAME,ApprovLineRec."Receiving Company");
          GenJnlLine."Account No." := ICRec.GetICAccountOfCurrentCompany;
          GenJnlLine."Receiving Company" := ApprovLineRec."Receiving Company"; //C036794.n
          GenJnlLine."Job No." := '';
          GenJnlLine.Element := '';
          GenJnlLine."Extension Contract" := '';
          GenJnlLine."Employee No." := '';
          GenJnlLine."Purchase Action" := '';
          GenJnlLine."Service Order No." := '';
          GenJnlLine."Service Contract No." := '';
          GenJnlLine."Service Location No." := '';
          GenJnlLine."Service Category" := '';
          GenJnlLine."Rental Unit" := '';
          GenJnlLine."Shortcut Dimension 1 Code" := '';
          GenJnlLine."Shortcut Dimension 2 Code" := '';
          GenJnlLine."Dimension Set ID" := 0;
          GenJnlLine."System-Created Entry" := TRUE;

          GenJnlLine.CreateDim(
            DimMgt.TypeToTableID1(GenJnlLine."Account Type"),GenJnlLine."Account No.",
            DimMgt.TypeToTableID1(GenJnlLine."Bal. Account Type"),GenJnlLine."Bal. Account No.",
            0,'',0,'',
            0,'',
            0,'',0,'',0,'');

          ICRec.AddICRelationDimsOfCurrentCompany(
            GenJnlLine."Dimension Set ID",GenJnlLine."Shortcut Dimension 1 Code",GenJnlLine."Shortcut Dimension 2 Code");

          IF (NOT BalanceAccountInvLineFound) OR (GenJnlLine."Bal. Account No." = '') OR
            (GenJnlLine."Bal. Account No." <> GLJournTemplRec."Bal. Account No.")
          THEN BEGIN
            GenJnlPostLine.RunWithCheck(GenJnlLine);
          END ELSE BEGIN
            SplitGenJnlPostInDebitCredit();
          END;

          CreateICEntry;
        END;
        StatusCounter:=StatusCounter+1;

        IF NOT BatchRun THEN
          Window.UPDATE(2,ROUND(StatusCounter/NoOfLines*10000,1));

        JobLedgEntryNo := 0;   //C004829.n
        ServLedgEntryNo := 0;  //C004829.n
        IF GenJnlLine."Job No." <> '' THEN BEGIN
          PostProject(UseAccountNoForProjLedg);
          PostComplementaryWIPCostProj;
          PostSurcharge(0);
        END;
        IF GenJnlLine."Service Order No." <> '' THEN BEGIN
          PostService;
          PostComplementaryWIPCostServ;
          PostSurcharge(1);
        END;
        IF ApprovLineRec."Plant Type" <> '' THEN
          PostPlant;
        IF ApprovLineRec."Plant No." <> '' THEN
          UpdatePlantNoPurchPrice();
        IF ((ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Purchase Invoice") OR
            (ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Credit Memo")) AND
           (ApprovLineRec."Ext. Rented Plant Invoiced to" <> 0D)
        THEN
          UpdatePlantNoExtRentDate();
        PostLoan;

        //Update Purchase Invoice Lines
        PostPurchInvLine;
        //Update Receipt
        IF ApprovLineRec."Receipt No." <> '' THEN
          PostReceipt;
        ApprovLineRec.DELETE(TRUE);

      UNTIL ApprovLineRec.NEXT = 0;

      PostPlantOrderChargePurch();  //C001519.n

      IF SurchargePostingBuffer[1].FIND('-') THEN
        REPEAT
          GenJnlLine2.INIT;
          GenJnlLine2."Source Code" := GenJnlLine."Source Code";
          GenJnlLine2."Reason Code":= GenJnlLine."Reason Code";
          GenJnlLine2."Account Type" := GenJnlLine2."Account Type"::"G/L Account";
          GenJnlLine2."Account No." := SurchargePostingBuffer[1]."G/L Account";
          //"Gen. Bus. Posting Group" carries Posting Date
          EVALUATE(GenJnlLine2."Posting Date", SurchargePostingBuffer[1]."Gen. Bus. Posting Group");
          GenJnlLine2."Interest Date" := GenJnlLine."Interest Date";
          IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Purchase Invoice" THEN
            GenJnlLine2."Document Type" := GenJnlLine2."Document Type"::Invoice
          ELSE
            GenJnlLine2."Document Type" := GenJnlLine2."Document Type"::"Credit Memo";
          GenJnlLine2."Document No." := GenJnlLine."Document No.";
          GenJnlLine2."System-Created Entry" := TRUE;
          GenJnlLine2."Document Date" := GenJnlLine."Document Date";
          GenJnlLine2.Description := SurchargePostingBuffer[1].Description;
          GenJnlLine2."Description 2" := SurchargePostingBuffer[1]."Description 2";
          //* Field SurchargePostingBuffer[1]."Bal. Account No." was never filled. Field now used for Element because
          //* element not in key. So "Bal. Account No." not filled here anymore.
          //GenJnlLine2."Bal. Account No." := SurchargePostingBuffer[1]."Bal. Account No.";
          GenJnlLine2.Amount := SurchargePostingBuffer[1].Amount;
          GenJnlLine2.VALIDATE(Amount);
          GenJnlLine2."Shortcut Dimension 1 Code" := SurchargePostingBuffer[1]."Global Dimension 1 Code";
          GenJnlLine2."Shortcut Dimension 2 Code" := SurchargePostingBuffer[1]."Global Dimension 2 Code";
          GenJnlLine2."Dimension Set ID" := SurchargePostingBuffer[1]."Dimension Set ID";
          GenJnlLine2."Employee No." := SurchargePostingBuffer[1]."Employee No.";
          GenJnlLine2."Cost Component" := SurchargePostingBuffer[1]."Cost Component";
          GenJnlLine2."Job No." := SurchargePostingBuffer[1]."Job No.";
          GenJnlLine2.Element := SurchargePostingBuffer[1].Element;
          GenJnlLine2."Extension Contract" := GenJnlLine."Extension Contract";
          GenJnlLine2."Service Order No." := SurchargePostingBuffer[1]."Service Order No.";
          GenJnlLine2.GetServiceCategory;
          GenJnlLine2."Service Contract No." := SurchargePostingBuffer[1]."Service Contract No.";
          GenJnlLine2."Service Location No." := GenJnlLine."Service Location No.";
          GenJnlLine2."Origin Type" := SurchargePostingBuffer[1]."Origin Type";

          //FIELD "Buy-Back Item (Plant Order)" USED FOR OTHER PURPOSE
          GenJnlLine2."Skip WIP Check" := SurchargePostingBuffer[1]."Buy-Back Item (Plant Order)";

          GenJnlPostLine.RunWithCheck(GenJnlLine2);
        UNTIL SurchargePostingBuffer[1].NEXT = 0;
      SurchargePostingBuffer[1].DELETEALL;

      IF ComplWIPPostingBuffer[1].FIND('-') THEN
        REPEAT
          GenJnlLine2.INIT;
          GenJnlLine2."Source Code" := GenJnlLine."Source Code";
          GenJnlLine2."Reason Code" := GenJnlLine."Reason Code";
          GenJnlLine2."Account Type" := GenJnlLine2."Account Type"::"G/L Account";
          GenJnlLine2."Account No." := ComplWIPPostingBuffer[1]."G/L Account";
          GenJnlLine2."Posting Date" := ComplWIPPostingBuffer[1]."Posting Date";
          IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Purchase Invoice" THEN
            GenJnlLine2."Document Type" := GenJnlLine2."Document Type"::Invoice
          ELSE
            GenJnlLine2."Document Type" := GenJnlLine2."Document Type"::"Credit Memo";
          GenJnlLine2."Document No." := GenJnlLine."Document No.";
          GenJnlLine2."System-Created Entry" := TRUE;
          GenJnlLine2."Document Date" := GenJnlLine."Document Date";
          GenJnlLine2.Description := ComplWIPPostingBuffer[1].Description;
          GenJnlLine2."Description 2" := ComplWIPPostingBuffer[1]."Description 2";
        //GenJnlLine2."Bal. Account No." := ComplWIPPostingBuffer[1]."Bal. Account No."; //C024228
          GenJnlLine2.Amount := ComplWIPPostingBuffer[1].Amount;
          GenJnlLine2.VALIDATE(Amount);
          GenJnlLine2."Shortcut Dimension 1 Code" := ComplWIPPostingBuffer[1]."Global Dimension 1 Code";
          GenJnlLine2."Shortcut Dimension 2 Code" := ComplWIPPostingBuffer[1]."Global Dimension 2 Code";
          GenJnlLine2."Dimension Set ID" := ComplWIPPostingBuffer[1]."Dimension Set ID";
          GenJnlLine2."Closed Project No." := ComplWIPPostingBuffer[1]."Job No.";
          GenJnlLine2."Closed Service Contract No." := ComplWIPPostingBuffer[1]."Service Contract No.";
          GenJnlLine2."Closed Service Order No." := ComplWIPPostingBuffer[1]."Service Order No.";
          GenJnlLine2."Origin Type" := ComplWIPPostingBuffer[1]."Origin Type";
          GenJnlLine2."Cost Component" := GenJnlLine."Cost Component";
          GenJnlPostLine.RunWithCheck(GenJnlLine2);
        UNTIL ComplWIPPostingBuffer[1].NEXT = 0;
      ComplWIPPostingBuffer[1].DELETEALL;

      "Invoice Counter Ok" := "Invoice Counter Ok" + 1;
    END;

    PROCEDURE PostProject@3(UseAccountNo@1100525000 : Boolean);
    VAR
      GLSetup@1100525002 : Record 98;
      Currency@1100529600 : Record 4;
      TotalCostLCY@1100525001 : Decimal;
    BEGIN
      JobJnlLine.INIT;
      JobJnlLine."Posting Date" := GenJnlLine."Posting Date";
      JobJnlLine."Document Date" := GenJnlLine."Document Date";
      JobJnlLine."Reason Code" := GenJnlLine."Reason Code";
      JobJnlLine."Job No." := GenJnlLine."Job No.";
      JobJnlLine.Element := GenJnlLine.Element;
      JobJnlLine."Plot No." := GenJnlLine."Plot No.";
      JobJnlLine."Extension Contract" := GenJnlLine."Extension Contract";
      JobJnlLine."Employee No." := GenJnlLine."Employee No.";
      JobJnlLine."Wage Component" := GenJnlLine."Wage Component";

      IF UseAccountNo THEN
        JobJnlLine."No." := GenJnlLine."Account No."
      ELSE
        JobJnlLine."No." := GenJnlLine."Bal. Account No.";

      IF PreRegisteredWIP AND (JobJnlLine."No." = '') THEN
        JobJnlLine."No." := GenJnlLine."Account No.";

      JobJnlLine.Description := GenJnlLine.Description;
      JobJnlLine."Description 2" := GenJnlLine."Description 2";
      JobJnlLine."Posting Group" := GenJnlLine."Posting Group";
      JobJnlLine."Shortcut Dimension 1 Code" := GenJnlLine."Shortcut Dimension 1 Code";
      JobJnlLine."Shortcut Dimension 2 Code" := GenJnlLine."Shortcut Dimension 2 Code";
      JobJnlLine."Dimension Set ID" := GenJnlLine."Dimension Set ID";
      JobJnlLine."Cost Component" := GenJnlLine."Cost Component";
      JobJnlLine."Gen. Bus. Posting Group" := GenJnlLine."Gen. Bus. Posting Group";
      JobJnlLine."Gen. Prod. Posting Group" := GenJnlLine."Gen. Prod. Posting Group";
      JobJnlLine."Entry Type" := JobJnlLine."Entry Type"::Usage;
      JobJnlLine."Document No." := GenJnlLine."Document No.";
      JobJnlLine."External Document No." := GenJnlLine."External Document No.";
      JobJnlLine.Type := JobJnlLine.Type::"G/L Account";
      IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Purchase Invoice" THEN BEGIN
        JobJnlLine.Quantity := ApprovLineRec.Quantity;
        JobJnlLine.Vendor := InvHeaderRec."Buy-from Vendor No.";
        JobJnlLine."Source Currency Code" := InvHeaderRec."Currency Code";
      END ELSE BEGIN
        JobJnlLine.Quantity := ApprovLineRec.Quantity * -1;
        JobJnlLine.Vendor := CredHeaderRec."Buy-from Vendor No.";
        JobJnlLine."Source Currency Code" := CredHeaderRec."Currency Code";
      END;
      JobJnlLine."Unit of Measure Code" := ApprovLineRec."Unit of Measure Code";
      JobJnlLine."Direct Unit Cost (LCY)" := PriceInLCY(ApprovLineRec.Price);
      IF AmountsOnly THEN BEGIN
        IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Purchase Invoice" THEN BEGIN
          JobJnlLine."Total Cost (LCY)" := PriceInLCY(ApprovLineRec.Amount);
          JobJnlLine."Total Cost" := ApprovLineRec.Amount;
        END ELSE BEGIN
          JobJnlLine."Total Cost (LCY)" := -PriceInLCY(ApprovLineRec.Amount);
          JobJnlLine."Total Cost" := -ApprovLineRec.Amount;
        END;
      END ELSE BEGIN
        GLSetup.GET;
        TotalCostLCY := ROUND(
          (JobJnlLine."Direct Unit Cost (LCY)" * JobJnlLine.Quantity),
          GLSetup."Amount Rounding Precision");
        JobJnlLine."Total Cost (LCY)" := TotalCostLCY;
        IF JobJnlLine."Source Currency Code" = '' THEN
          JobJnlLine."Total Cost" := TotalCostLCY
        ELSE BEGIN
          Currency.Initialize(JobJnlLine."Source Currency Code");
          JobJnlLine."Total Cost" := ROUND(ApprovLineRec.Price * JobJnlLine.Quantity, Currency."Amount Rounding Precision");
        END;
      END;
      JobJnlLine."Source Code" := GenJnlLine."Source Code";
      //JobJnlLine."Post Job Entry Only" := FALSE; //Removed in NAV2009
      JobJnlLine."Posting No. Series" := GenJnlLine."Posting No. Series";

      JobJnlLine."Service Order No." := GenJnlLine."Service Order No.";
      JobJnlLine."Service Location No." := GenJnlLine."Service Location No.";
      JobJnlLine."Service Contract No." := GenJnlLine."Service Contract No.";
      JobJnlLine."Rental Unit" := GenJnlLine."Rental Unit";
      JobJnlLine."Item No." := GenJnlLine."Item No.";
      JobJnlLine."Basic Item" := GenJnlLine."Basic Item";
      JobJnlLine."Trade Item":= GenJnlLine."Trade Item";
      JobJnlLine.Manufacturer := GenJnlLine.Manufacturer;
      JobJnlLine."Vendor (Trade Item)" := GenJnlLine."Vendor (Trade Item)";
      JobJnlLine."Purchase Action" := GenJnlLine."Purchase Action";
      JobJnlLine."Sales Price Purch. Order" := ApprovLineRec."Sales Price";
      JobJnlLine."Cost Plus Entry Created" := ApprovLineRec."Cost Plus Entry Created";
      IF (ApprovLineRec."Receipt No." <> '') THEN
        IF PurchRcptLine.GET(ApprovLineRec."Receipt No.",ApprovLineRec."Receipt Line No.") THEN
          JobJnlLine."Execution Date" := PurchRcptLine."Posting Date";
      IF JobJnlLine."Execution Date" = 0D THEN
        JobJnlLine."Execution Date" := JobJnlLine."Posting Date";
      JobJnlLine."Removal Contribution" := ApprovLineRec."Removal Contribution";
      JobJnlLine."Tariff No." := ApprovLineRec."Tariff No.";
      IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Purchase Invoice" THEN BEGIN
        JobJnlLine."Country/Region Code" := InvHeaderRec."Country/Region of Origin";
        JobJnlLine."Country/Region of Origin/Dest." := InvHeaderRec."Country/Region of Destination";
      END ELSE BEGIN
        JobJnlLine."Country/Region Code" := CredHeaderRec."Country/Region of Origin";
        JobJnlLine."Country/Region of Origin/Dest." := CredHeaderRec."Country/Region of Destination";
      END;
      JobJnlLine."Qty. per Unit of Measure" := ApprovLineRec."Qty. per Unit of Measure"; //C009984
      JobJnlLine."FSC Type Code" := ApprovLineRec."FSC Type Code";  //DP00129
      JobJnlLine.Comment := GetCommentForProjEntry(ApprovLineRec, MAXSTRLEN(JobJnlLine.Comment));
      JobJnlPostLine.RunWithCheck(JobJnlLine);
      JobLedgEntryNo := JobJnlPostLine.GetJobLedgEntryNo;  //C004829.n

      JobJnlLine."Sales Price Purch. Order" := 0;
      JobJnlLine.Comment := '';
    END;

    [External]
    PROCEDURE PostService@1210190003();
    VAR
      GLSetup@1100525001 : Record 98;
      TotalCostLCY@1100525000 : Decimal;
    BEGIN
      ServJnlLine.INIT;
      ServJnlLine."Service Contract No." := ApprovLineRec."Service Contract No.";
      ServJnlLine.VALIDATE("Service Order No.", ApprovLineRec."Service Order No.");
      ServJnlLine."Service Location No." := ApprovLineRec."Service Location No.";
      IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Credit Memo" THEN
        ServJnlLine."Document Type" := ServJnlLine."Document Type"::"Purchase Credit Memo"
      ELSE
        ServJnlLine."Document Type" := ServJnlLine."Document Type"::"Purchase Invoice";
      ServJnlLine."Document No." := GenJnlLine."Document No.";
      ServJnlLine."G/L Account" := ApprovLineRec."Account No.";
      ServJnlLine."Posting Date" := ApprovLineRec."Posting Date";
      ServJnlLine."Shortcut Dimension 1 Code" := ApprovLineRec."Shortcut Dimension 1 Code";
      ServJnlLine."Shortcut Dimension 2 Code" := ApprovLineRec."Shortcut Dimension 2 Code";
      ServJnlLine."Dimension Set ID" := ApprovLineRec."Dimension Set ID";
      ServJnlLine."Cost Component" := ApprovLineRec."Cost Component";
      ServJnlLine.Description := ApprovLineRec.Description;
      ServJnlLine."Description 2" := ApprovLineRec."Description 2";
      IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Purchase Invoice" THEN BEGIN
        ServJnlLine.Quantity := ApprovLineRec.Quantity;
        ServJnlLine."Vendor No." := InvHeaderRec."Buy-from Vendor No.";
      END ELSE BEGIN
        ServJnlLine.Quantity := ApprovLineRec.Quantity * -1;
        ServJnlLine."Vendor No." := CredHeaderRec."Buy-from Vendor No.";
      END;
      ServJnlLine."Unit of Measure Code" := ApprovLineRec."Unit of Measure Code";
      ServJnlLine.VALIDATE("Unit Cost (LCY)", PriceInLCY(ApprovLineRec.Price));
      ServJnlLine."Entry Type" := ServJnlLine."Entry Type"::Usage; //C022170.n
      IF AmountsOnly THEN BEGIN
        IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Purchase Invoice" THEN
          ServJnlLine.VALIDATE("Total Cost (LCY)", PriceInLCY(ApprovLineRec.Amount))
        ELSE
          ServJnlLine.VALIDATE("Total Cost (LCY)", -PriceInLCY(ApprovLineRec.Amount))
      END ELSE BEGIN
        GLSetup.GET;
        TotalCostLCY := ROUND(
          (ServJnlLine."Unit Cost (LCY)" * ServJnlLine.Quantity),
          GLSetup."Amount Rounding Precision");
        ServJnlLine.VALIDATE("Total Cost (LCY)", TotalCostLCY);
      END;
      ServJnlLine."Reason Code" := GenJnlLine."Reason Code";
      ServJnlLine."Source Code" := GenJnlLine."Source Code";
      ServJnlLine."Item No." := ApprovLineRec."Item No.";
      ServJnlLine."Basic Item" := ApprovLineRec."Basic Item";
      ServJnlLine."Trade Item" := ApprovLineRec."Trade Item";
      ServJnlLine."Vendor (Trade Item)" := ApprovLineRec."Vendor (Trade Item)";
      ServJnlLine.Manufacturer := ApprovLineRec.Manufacturer;
      ServJnlLine."Project No." := ApprovLineRec."Project No.";
      ServJnlLine."Additional Cost" := ApprovLineRec."Additional Cost (Service)";
      ServJnlLine."Sales Price Purch. Order" := ApprovLineRec."Sales Price";
      ServJnlLine."Cost Plus Entry Created" := ApprovLineRec."Cost Plus Entry Created";
      IF (ApprovLineRec."Receipt No." <> '') THEN
        IF PurchRcptLine.GET(ApprovLineRec."Receipt No.",ApprovLineRec."Receipt Line No.") THEN
          ServJnlLine."Execution Date" := PurchRcptLine."Posting Date";
      IF ServJnlLine."Execution Date" = 0D THEN
        ServJnlLine."Execution Date" := ServJnlLine."Posting Date";
      ServJnlLine."Removal Contribution" := ApprovLineRec."Removal Contribution";
      ServJnlLine."Tariff No." := ApprovLineRec."Tariff No.";
      IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Purchase Invoice" THEN BEGIN
        ServJnlLine."Country/Region Code" := InvHeaderRec."Country/Region of Origin";
        ServJnlLine."Country/Region of Origin/Dest." := InvHeaderRec."Country/Region of Destination";
      END ELSE BEGIN
        ServJnlLine."Country/Region Code" := CredHeaderRec."Country/Region of Origin";
        ServJnlLine."Country/Region of Origin/Dest." := CredHeaderRec."Country/Region of Destination";
      END;
      ServJnlLine."Qty. per Unit of Measure" := ApprovLineRec."Qty. per Unit of Measure"; //C009984

      ServJnlPostLine.RunWithCheck(ServJnlLine);
      ServLedgEntryNo := ServJnlPostLine.GetServLedgEntryNo; //DP00727
      ServJnlLine."Sales Price Purch. Order" := 0;
    END;

    [External]
    PROCEDURE PostPlant@1210190000();
    VAR
      PlantSetup@1100485000 : Record 11012550;
      lvPlantTypeRec@1100525000 : Record 11012551;
      PlantCostComp@1100409002 : Record 11012575;
      InsertPlantOrderMgt@1100409000 : Codeunit 11012552;
      Immediately@1100409003 : Integer;
      PlantOrderNo@1100409001 : Code[20];
    BEGIN
      IF (ApprovLineRec."Plant Type" = '') OR (ApprovLineRec."Receiving Company" <> '') THEN
        EXIT;

      ApprovLineRec.TESTFIELD("Cost Component Plant");

      PlantSetup.GET;
      IF PlantSetup."Integration Fixed Assets" THEN BEGIN
        lvPlantTypeRec.GET(ApprovLineRec."Plant Type");
        IF lvPlantTypeRec."Integration Fixed Assets" THEN BEGIN
          IF (ApprovLineRec.CheckPlantAcqOrRent() = 1) THEN
            EXIT;
        END;
      END;

      WITH PlantLedgerEntry DO BEGIN
        INIT;
        "Document No." := GenJnlLine."Document No.";
        "Posting Date" := ApprovLineRec."Posting Date";
        "Document Date" := GenJnlLine."Document Date";
        "Account No." := ApprovLineRec."Account No.";
        Description := ApprovLineRec.Description;
        "Description 2" := ApprovLineRec."Description 2";
        Quantity := ApprovLineRec.Quantity;
        "Direct Unit Cost" := PriceInLCY(ApprovLineRec.Price);
        "Unit Cost" := "Direct Unit Cost";
        Currency.InitRoundingPrecision;
        "Total Cost" := ROUND(PriceInLCY(ApprovLineRec.Amount), Currency."Amount Rounding Precision");
        "Unit of Measure Code" := ApprovLineRec."Unit of Measure Code";
        "Department Code" := ApprovLineRec."Shortcut Dimension 1 Code";
        "Cost Object" := ApprovLineRec."Shortcut Dimension 2 Code";
        "Dimension Set ID" := ApprovLineRec."Dimension Set ID";
        "Source Code" := GenJnlLine."Source Code";
        "Reason Code" := GenJnlLine."Reason Code";
        "No. Series" := GenJnlLine."Posting No. Series";
        "Plant Type" := ApprovLineRec."Plant Type";
        "Plant No." := ApprovLineRec."Plant No.";
        "Cost Component" := ApprovLineRec."Cost Component Plant";
        //"Plant Posting Group" := GenJnlLine."Posting Group";  //*27818.o

        IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Purchase Invoice" THEN BEGIN
          "Vendor No." := InvHeaderRec."Buy-from Vendor No.";
          "Country/Region Code" := InvHeaderRec."VAT Country/Region Code";
        END ELSE BEGIN
          "Vendor No." := CredHeaderRec."Buy-from Vendor No.";
          "Country/Region Code" := CredHeaderRec."VAT Country/Region Code";
          Quantity := Quantity * -1;
          "Total Cost" := "Total Cost" * -1;
        END;
        IF "Plant Type" <> '' THEN BEGIN
          IF lvPlantTypeRec.GET("Plant Type") THEN
            "Plant Posting Group" := lvPlantTypeRec.PlantPostingGrp("Plant No.", '', '');
        END;
        PostPlantEntry.RUN(PlantLedgerEntry);
      END;
      CheckPlantNoPosted();

      //C001519.sn
      IF (ApprovLineRec."Cost Component Plant" <> '') THEN BEGIN
        PlantCostComp.GET(ApprovLineRec."Cost Component Plant");
        IF PlantCostComp."Charge Purchase" THEN BEGIN
          ApprovLineRec.TESTFIELD("Plant Location");
          PlantOrderNo := '';
          IF PlantCostComp."Immediately Post Charge Purch." THEN
            Immediately := 1;
          IF TmpPlantLocChargePO.GET(ApprovLineRec."Plant Location", Immediately) THEN
            PlantOrderNo := TmpPlantLocChargePO."Document No.";
          InsertPlantOrderMgt.InsertPlantOrderOnChargePurch(PlantOrderNo,ApprovLineRec."Plant Location",PlantLedgerEntry,PlantCostComp);
          IF NOT TmpPlantLocChargePO.GET(ApprovLineRec."Plant Location", Immediately) THEN BEGIN
            TmpPlantLocChargePO.INIT;
            TmpPlantLocChargePO.Location := ApprovLineRec."Plant Location";
            TmpPlantLocChargePO."Line No." := Immediately;
              // Field used for 'Immediately Posting' of the created Plant Order(s)
            TmpPlantLocChargePO."Delete Remainder" := PlantSetup."Extended Picking Procedure";
              //Field used for 'Release Plant Order' needed
            TmpPlantLocChargePO."Document No." := PlantOrderNo;  // Doc.No is used for Plant Order No.
            TmpPlantLocChargePO.INSERT;
          END;
        END;
      END;
      //C001519.en
    END;

    [External]
    PROCEDURE PostPlantOrderChargePurch@1100409001();
    VAR
      PlantOrder@1100409001 : Record 11012556;
      ExtentedPlantOrdeFunc@1100409000 : Codeunit 11020503;
      PostPlantOrder@1100409002 : Codeunit 11012553;
    BEGIN
      //C001519
      TmpPlantLocChargePO.RESET;
      TmpPlantLocChargePO.SETRANGE("Line No.", 1);
      IF TmpPlantLocChargePO.FINDSET THEN BEGIN
        REPEAT
          PlantOrder.GET(TmpPlantLocChargePO."Document No.");
          IF TmpPlantLocChargePO."Delete Remainder" THEN BEGIN
            ExtentedPlantOrdeFunc.SetChargePurchRun();
            ExtentedPlantOrdeFunc.RunReleasePlantOrder(PlantOrder);
          END;
          PostPlantOrder.SetChargePurchRun();
          PostPlantOrder.RUN(PlantOrder);
        UNTIL TmpPlantLocChargePO.NEXT = 0;
      END;
      TmpPlantLocChargePO.RESET;
      TmpPlantLocChargePO.DELETEALL;
    END;

    [External]
    PROCEDURE PostSurcharge@1210191009(Origin@1210190000 : 'Project,Service');
    VAR
      PostingMgt@1100525001 : Codeunit 11012360;
    BEGIN
      PostingMgt.SetPostingFromApprovalLine(ApprovLineRec,GenJnlLine);
      PostingMgt.BufferSurcharges(
        Origin,GenJnlLine,JobJnlLine,ServJnlLine,JobJnlPostLine,ServJnlPostLine,SurchargePostingBuffer,ComplWIPPostingBuffer);
    END;

    PROCEDURE PostReceipt@5();
    BEGIN
      IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Credit Memo" THEN
        IF AmountsOnly THEN
          ApprovLineRec.Amount := ApprovLineRec.Amount * -1
        ELSE
          ApprovLineRec.Quantity := ApprovLineRec.Quantity * -1;

      IF AmountsOnly THEN BEGIN
        RemAmntToBeInvoiced := ApprovLineRec.Amount;
        RemQtyToBeInvoiced := 0;
        RemQtyToBeInvoicedBase := 0;
      END ELSE BEGIN
        RemAmntToBeInvoiced :=0;
        RemQtyToBeInvoiced := ApprovLineRec.Quantity;
        RemQtyToBeInvoicedBase := ApprovLineRec.Quantity;
      END;

      PurchRcptLine.RESET;
      PurchRcptLine.SETRANGE("Document No.",ApprovLineRec."Receipt No.");
      PurchRcptLine.SETRANGE("Line No.",ApprovLineRec."Receipt Line No.");
      IF PurchRcptLine.FINDSET(TRUE, FALSE) THEN
        REPEAT
          IF AmountsOnly OR
            (NOT AmountsOnly AND (PurchRcptLine."Quantity Invoiced" <> PurchRcptLine.Quantity))
          THEN BEGIN
            PurchRcptHeader.GET(PurchRcptLine."Document No.");
            IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Purchase Invoice" THEN
              PurchRcptHeader.TESTFIELD("Pay-to Vendor No.", InvHeaderRec."Pay-to Vendor No.")
            ELSE
              PurchRcptHeader.TESTFIELD("Pay-to Vendor No.", CredHeaderRec."Pay-to Vendor No.");

            IF (PurchRcptLine.Type = PurchRcptLine.Type::"G/L Account") THEN BEGIN
              IF (JobRec."Project Status" = ProjRec."Project Status"::Finished) AND
                 (ProjSetup."Provisions at Closure") AND
                 (ApprovLineRec."Project No." <> '') AND
                 (ApprovLineRec."Shortcut Dimension 2 Code" <> '')
              THEN BEGIN
                CASE ApprovLineRec."Cost Type" OF
                  ApprovLineRec."Cost Type"::Labor:
                    ApprovLineRec.TESTFIELD("Account No.",ProjTypeRec."Provision Account Labor");
                  ApprovLineRec."Cost Type"::Material:
                    ApprovLineRec.TESTFIELD("Account No.",ProjTypeRec."Provision Account Material");
                  ApprovLineRec."Cost Type"::Subcontracting:
                    ApprovLineRec.TESTFIELD("Account No.",ProjTypeRec."Provision Account Subcontr.");
                  ApprovLineRec."Cost Type"::Plant:
                    ApprovLineRec.TESTFIELD("Account No.",ProjTypeRec."Provision Account Plant");
                  ApprovLineRec."Cost Type"::Sundry:
                    ApprovLineRec.TESTFIELD("Account No.",ProjTypeRec."Provision Account Sundry");
                  ELSE
                    ApprovLineRec.TESTFIELD("Account No.",PurchRcptLine."No.");
                END;
              END ELSE BEGIN
                ApprovLineRec.TESTFIELD("Account No.",PurchRcptLine."No.");
              END;
            END;

            IF AmountsOnly THEN BEGIN
              AmntToBeInvoiced := RemAmntToBeInvoiced;
              IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Credit Memo" THEN BEGIN
                IF PurchRcptLine."Received (line)" < 0 THEN BEGIN
                  IF ABS(AmntToBeInvoiced) > ABS(PurchRcptLine."Received (line)" - PurchRcptLine."Invoiced (line)") THEN
                    AmntToBeInvoiced := -(PurchRcptLine."Received (line)" - PurchRcptLine."Invoiced (line)");
                END ELSE
                  IF ABS(AmntToBeInvoiced) > ABS(PurchRcptLine."Invoiced (line)") THEN
                    AmntToBeInvoiced := -PurchRcptLine."Invoiced (line)";
              END ELSE
                IF ABS(AmntToBeInvoiced) > ABS(PurchRcptLine."Received (line)" - PurchRcptLine."Invoiced (line)") THEN
                  AmntToBeInvoiced := PurchRcptLine."Received (line)" - PurchRcptLine."Invoiced (line)";
              RemAmntToBeInvoiced := RemAmntToBeInvoiced - AmntToBeInvoiced;
              PurchRcptLine."Invoiced (line)" := PurchRcptLine."Invoiced (line)" + AmntToBeInvoiced;
              PurchRcptLine."Amnt. Rcd. Not Invoiced" :=
                PurchRcptLine."Received (line)" - PurchRcptLine."Invoiced (line)";
            END ELSE BEGIN
              IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Purchase Invoice" THEN BEGIN
                IF ApprovLineRec.Quantity * PurchRcptLine.Quantity < 0 THEN
                  ApprovLineRec.FIELDERROR(Quantity,Text003);
              END;

              QtyToBeInvoiced := RemQtyToBeInvoiced;
              QtyToBeInvoicedBase := RemQtyToBeInvoicedBase;

              IF ABS(QtyToBeInvoiced) >
                ABS(PurchRcptLine.Quantity - PurchRcptLine."Quantity Invoiced")
              THEN BEGIN
                QtyToBeInvoiced := PurchRcptLine.Quantity - PurchRcptLine."Quantity Invoiced";
                QtyToBeInvoicedBase := PurchRcptLine."Quantity (Base)" - PurchRcptLine."Qty. Invoiced (Base)";
              END;

              RemQtyToBeInvoiced := RemQtyToBeInvoiced - QtyToBeInvoiced;
              RemQtyToBeInvoicedBase := RemQtyToBeInvoicedBase - QtyToBeInvoicedBase;
              PurchRcptLine."Quantity Invoiced" := PurchRcptLine."Quantity Invoiced" + QtyToBeInvoiced;
              PurchRcptLine."Qty. Invoiced (Base)" := PurchRcptLine."Qty. Invoiced (Base)" + QtyToBeInvoicedBase;
              PurchRcptLine."Qty. Rcd. Not Invoiced" := PurchRcptLine.Quantity - PurchRcptLine."Quantity Invoiced";
              PurchRcptLine."Invoiced (line)" := PurchRcptLine."Invoiced (line)" + (QtyToBeInvoiced * ApprovLineRec.Price);
            END;
            PurchRcptHeader.GET(ApprovLineRec."Receipt No.");
            IF PurchRcptHeader."Currency Code" = '' THEN
              Currency.InitRoundingPrecision
            ELSE BEGIN
              PurchRcptHeader.TESTFIELD("Currency Factor");
              Currency.GET(PurchRcptHeader."Currency Code");
              Currency.TESTFIELD("Amount Rounding Precision");
            END;
            PurchRcptLine."Invoiced (line)" :=
              ROUND(PurchRcptLine."Invoiced (line)", Currency."Amount Rounding Precision");
            IF (PurchRcptHeader."Currency Code" = '') OR (PurchRcptLine."Invoiced (line)" = 0) THEN
              PurchRcptLine."Invoiced (LCY) (line)" := PurchRcptLine."Invoiced (line)"
            ELSE
              PurchRcptLine."Invoiced (LCY) (line)" :=
                ROUND(
                  CurrencyExchRate.ExchangeAmtFCYToLCY(
                    1, PurchRcptHeader."Job No.", ApprovLineRec."Posting Date", PurchRcptHeader."Currency Code",
                    PurchRcptLine."Invoiced (line)", PurchRcptHeader."Currency Factor", FALSE));

            //C008850 sn
            IF AmountsOnly THEN BEGIN
              PurchRcptLine."Amnt. Rcd. Not Invoiced (LCY)" :=
                PurchRcptLine."Amount (LCY)" - PurchRcptLine."Invoiced (LCY) (line)";
            END ELSE BEGIN
              PurchRcptLine."Amnt. Rcd. Not Invoiced" :=
                PurchRcptLine."Received (line)" - PurchRcptLine."Invoiced (line)";
              PurchRcptLine."Amnt. Rcd. Not Invoiced (LCY)" :=
                PurchRcptLine."Amount (LCY)" - PurchRcptLine."Invoiced (LCY) (line)";
            END;
            //C008850 en

            PurchRcptLine.MODIFY;
          END;
        UNTIL (PurchRcptLine.NEXT = 0) OR
              (AmountsOnly AND (ABS(RemAmntToBeInvoiced) <= ABS(ApprovLineRec.Amount))) OR
              (NOT AmountsOnly AND (ABS(RemQtyToBeInvoiced) <= ABS(ApprovLineRec.Quantity)))
      ELSE
        IF ApprovLineRec."Document Type" <> ApprovLineRec."Document Type"::"Credit Memo" THEN
          ERROR(
            Text030,
            PurchRcptLine."Line No.",PurchRcptLine."Document No.");

      IF ABS(RemQtyToBeInvoiced) > 0 THEN
        IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Purchase Invoice" THEN
          ERROR(
            Text031,
            ApprovLineRec.Description,
            ApprovLineRec."Receipt Line No.",
            ApprovLineRec."Receipt No.");

      //Update Order Line
      PurchRcptLine.GET(ApprovLineRec."Receipt No.",ApprovLineRec."Receipt Line No.");
      PurchLine.GET(PurchLine."Document Type"::Order,PurchRcptLine."Order No.",PurchRcptLine."Order Line No.");
      PurchLine."Quantity Invoiced" := PurchLine."Quantity Invoiced" + ApprovLineRec.Quantity;
      PurchLine."Qty. Invoiced (Base)" := PurchLine."Qty. Invoiced (Base)" + ApprovLineRec.Quantity;
      IF PurchRcptLine.Quantity * PurchRcptLine."Qty. Rcd. Not Invoiced" < 0 THEN
        ERROR(
          Text005,
          PurchLine."Document No.");

      //  C009469 sn DP00556
      IF (PurchLine.Quantity * PurchLine."Quantity Invoiced" < 0) OR
         (ABS(PurchLine.Quantity) < ABS(PurchLine."Quantity Invoiced"))
      THEN
        PurchLine.FIELDERROR("Quantity Invoiced",STRSUBSTNO(Text047, PurchLine.FIELDCAPTION(Quantity)));
      //  C009469 en

      IF AmountsOnly THEN BEGIN
        PurchLine."Amnt. Invoiced" := PurchLine."Amnt. Invoiced" + ApprovLineRec.Amount;
        PurchLine.UpdateVATAmounts;
        PurchLine.InitOutstandingAmount;
        PurchLine.InitAmntToReceive;
        PurchLine.InitAmntToInvoice;
      END ELSE BEGIN
        PurchLine.InitQtyToInvoice;
        PurchLine.InitOutstanding;
        IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Credit Memo" THEN
          PurchLine."Amnt. Invoiced" := PurchLine."Amnt. Invoiced" - ApprovLineRec.Amount
        ELSE
          PurchLine."Amnt. Invoiced" := PurchLine."Amnt. Invoiced" + ApprovLineRec.Amount;
      END;

      PurchLine."Modified by" := USERID; //DP00469
      PurchLine."Last Date Modified" := TODAY;//DP00469
      PurchLine.MODIFY;
      PurchPostCU.CheckCloseHeader(PurchLine);
      PurchLine.CreatePurchOrderControl(FALSE);

      //Update Balance on Receipt Header
      PurchRcptHeader.GET(ApprovLineRec."Receipt No.");
      PurchRcptHeader.CALCFIELDS(Received, Invoiced);
      PurchRcptHeader."Received Not Invoiced" := PurchRcptHeader.Received - PurchRcptHeader.Invoiced;
      PurchRcptHeader.MODIFY;
    END;

    PROCEDURE PostPurchInvLine@6();
    BEGIN
      IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Purchase Invoice" THEN BEGIN
        IF PurchInvLineNo = 0 THEN BEGIN
          PurchInvLineRec.SETRANGE("Document No.",ApprovLineRec."Document No.");
          IF PurchInvLineRec.FINDLAST THEN
            PurchInvLineNo := PurchInvLineRec."Line No." + 10000
          ELSE
            PurchInvLineNo := 10000;
        END;

        PurchInvLineRec.INIT;
        PurchInvLineRec."Document No." := ApprovLineRec."Document No.";
        PurchInvLineRec."Line No." := PurchInvLineNo;
        PurchInvLineNo := PurchInvLineNo + 10000;
        PurchInvLineRec."Buy-from Vendor No." := InvHeaderRec."Buy-from Vendor No.";
        IF IsTextLine() THEN
          PurchInvLineRec.Type := PurchInvLineRec.Type::" "
        ELSE
          PurchInvLineRec.Type := PurchInvLineRec.Type::"G/L Account";
        PurchInvLineRec."No." := ApprovLineRec."Account No.";
        PurchInvLineRec.Description := ApprovLineRec.Description;
        PurchInvLineRec."Description 2" := ApprovLineRec."Description 2";
        PurchInvLineRec.Quantity := ApprovLineRec.Quantity;
        PurchInvLineRec."Unit of Measure Code" := ApprovLineRec."Unit of Measure Code";
        PurchInvLineRec."Direct Unit Cost" := ApprovLineRec.Price;
        PurchInvLineRec."Approved Amount" :=  ApprovLineRec.Amount;
        IF (ApprCurrencyCode = '') OR (ApprovLineRec.Amount = 0) THEN
          PurchInvLineRec."Amount (LCY)" := ApprovLineRec.Amount
        ELSE
          PurchInvLineRec."Amount (LCY)" :=
            ROUND(
              CurrencyExchRate.ExchangeAmtFCYToLCY(
                1, ApprProjectNo, ApprovLineRec."Posting Date", ApprCurrencyCode,
                ApprovLineRec.Amount, ApprovCurrencyFactor, FALSE));

        PurchInvLineRec."Receiving Company" := ApprovLineRec."Receiving Company";
        PurchInvLineRec."Job No." := ApprovLineRec."Project No.";
        PurchInvLineRec."Shortcut Dimension 1 Code" := ApprovLineRec."Shortcut Dimension 1 Code";
        PurchInvLineRec."Shortcut Dimension 2 Code" := ApprovLineRec."Shortcut Dimension 2 Code";
        PurchInvLineRec."Dimension Set ID" := ApprovLineRec."Dimension Set ID";
        PurchInvLineRec."Approval Date" := ApprovLineRec."Posting Date";
        PurchInvLineRec."Receipt No." := ApprovLineRec."Receipt No.";
        PurchInvLineRec."Receipt Line No." := ApprovLineRec."Receipt Line No.";
        PurchInvLineRec."Item No." := ApprovLineRec."Item No.";
        PurchInvLineRec."Basic Item" := ApprovLineRec."Basic Item";
        PurchInvLineRec."Trade Item" := ApprovLineRec."Trade Item";
        PurchInvLineRec.Manufacturer := ApprovLineRec.Manufacturer;
        PurchInvLineRec."Vendor (Trade Item)" := ApprovLineRec."Vendor (Trade Item)";
        PurchInvLineRec."Vendor Item No." := ApprovLineRec."Vendor Item No.";
        PurchInvLineRec.Element := ApprovLineRec.Element;
        PurchInvLineRec."Extension Contract" := ApprovLineRec."Extension Contract";
        PurchInvLineRec."Plot No." := ApprovLineRec."Plot No.";
        PurchInvLineRec."Employee No." := ApprovLineRec."Employee No.";
        PurchInvLineRec."Wage Component" := ApprovLineRec."Wage Component";
        PurchInvLineRec."Service Order No." := ApprovLineRec."Service Order No.";
        PurchInvLineRec."Service Contract No." := ApprovLineRec."Service Contract No.";
        PurchInvLineRec."Service Location No." := ApprovLineRec."Service Location No.";
        PurchInvLineRec."Rental Unit" := ApprovLineRec."Rental Unit";
        PurchInvLineRec."Cost Type" := ApprovLineRec."Cost Type";
        PurchInvLineRec."Plant Type" := ApprovLineRec."Plant Type";
        PurchInvLineRec."Plant No." := ApprovLineRec."Plant No.";
        PurchInvLineRec."Plant Location" := ApprovLineRec."Plant Location";
        PurchInvLineRec."Cost Component Plant" := ApprovLineRec."Cost Component Plant";
        PurchInvLineRec."Cost Component" := ApprovLineRec."Cost Component";
        PurchInvLineRec."Posting Group" := ApprovLineRec."Posting Group";
        PurchInvLineRec."Approval Entry" := TRUE;
        PurchInvLineRec."Induction Note No." := ApprovLineRec."Induction Note No.";
        PurchInvLineRec."Purchase Action" := ApprovLineRec."Purchase Action";
        IF ApprovLineRec.Type = ApprovLineRec.Type::"Fixed Asset" THEN
          FillPurInvLineForFixedAsset();
        PurchInvLineRec."Posting Date" := ApprovLineRec."Posting Date";
        PurchInvLineRec."Purchase Route Reference" := ApprovLineRec."Purchase Route Reference";
        PurchInvLineRec."VAT Bus. Posting Group" := ApprovLineRec."VAT Bus. Posting Group";
        PurchInvLineRec."VAT Prod. Posting Group" := ApprovLineRec."VAT Prod. Posting Group";
        PurchInvLineRec."FSC Type Code" := ApprovLineRec."FSC Type Code";
        // C006270.sn
        PurchInvLineRec."Tariff No." := ApprovLineRec."Tariff No.";
        PurchInvLineRec."Gross Weight" :=  ApprovLineRec."Gross Weight";
        PurchInvLineRec."Net Weight" := ApprovLineRec."Net Weight";
        // C006270.en
        PurchInvLineRec."Expense Allowance Scheme" := ApprovLineRec."Expense Allowance Scheme";  //C013068
        PurchInvLineRec."Generated Retention Line" := ApprovLineRec."Generated Retention Line"; //DP01406
        PurchInvLineRec."Deferral Code" := ApprovLineRec."Deferral Code";
        PurchInvLineRec."Loan Code" := ApprovLineRec."Loan Code";
        PurchInvLineRec."Loan Type" := ApprovLineRec."Loan Type";

        PurchInvLineRec.INSERT;

        UpdateTempValueEntryRelation(STRSUBSTNO('%1',ApprovLineRec."Line No."), PurchInvLineRec.RowID1); //C008671
        InsertNSItemTrackingRelation(ApprovLineRec,PurchInvLineRec.RowID1); //C004829
        CreatePostedDeferralScheduleFromPurchDoc(PurchInvLineRec.GetDocumentType,
          InvHeaderRec."No.", PurchInvLineRec."Line No.", InvHeaderRec."Posting Date", InvHeaderRec."Buy-from Vendor No.");
      END;

      IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Credit Memo" THEN BEGIN
        IF CredMemoLineNo = 0 THEN BEGIN
          CredMemLineRec.SETRANGE("Document No.",ApprovLineRec."Document No.");
          IF CredMemLineRec.FINDLAST THEN
            CredMemoLineNo := CredMemLineRec."Line No." + 10000
          ELSE
            CredMemoLineNo := 10000;
        END;

        CredMemLineRec.INIT;
        CredMemLineRec."Document No." := ApprovLineRec."Document No.";
        CredMemLineRec."Line No." := CredMemoLineNo;
        CredMemoLineNo := CredMemoLineNo + 10000;
        CredMemLineRec."Buy-from Vendor No." := CredHeaderRec."Buy-from Vendor No.";
        IF IsTextLine() THEN
          CredMemLineRec.Type := CredMemLineRec.Type::" "
        ELSE
          CredMemLineRec.Type := CredMemLineRec.Type::"G/L Account";
        CredMemLineRec."No." := ApprovLineRec."Account No.";
        CredMemLineRec.Description := ApprovLineRec.Description;
        CredMemLineRec."Description 2" := ApprovLineRec."Description 2";
        CredMemLineRec.Quantity := ApprovLineRec.Quantity;
        CredMemLineRec."Unit of Measure Code" := ApprovLineRec."Unit of Measure Code";
        CredMemLineRec."Direct Unit Cost" := ApprovLineRec.Price;
        CredMemLineRec."Approved Amount" := ApprovLineRec.Amount;
        IF (ApprCurrencyCode = '') OR (ApprovLineRec.Amount = 0) THEN
          CredMemLineRec."Amount (LCY)" := ApprovLineRec.Amount
        ELSE
          CredMemLineRec."Amount (LCY)" :=
            ROUND(
              CurrencyExchRate.ExchangeAmtFCYToLCY(
                1, ApprProjectNo, ApprovLineRec."Posting Date", ApprCurrencyCode,
                ApprovLineRec.Amount, ApprovCurrencyFactor, FALSE));

        CredMemLineRec."Receiving Company" := ApprovLineRec."Receiving Company";
        CredMemLineRec."Job No." := ApprovLineRec."Project No.";
        CredMemLineRec."Shortcut Dimension 1 Code" := ApprovLineRec."Shortcut Dimension 1 Code";
        CredMemLineRec."Shortcut Dimension 2 Code" := ApprovLineRec."Shortcut Dimension 2 Code";
        CredMemLineRec."Dimension Set ID" := ApprovLineRec."Dimension Set ID";
        CredMemLineRec."Approval Date" := ApprovLineRec."Posting Date";
        CredMemLineRec."Receipt No." := ApprovLineRec."Receipt No.";
        CredMemLineRec."Receipt Line No." := ApprovLineRec."Receipt Line No.";
        CredMemLineRec."Item No." := ApprovLineRec."Item No.";
        CredMemLineRec."Basic Item" := ApprovLineRec."Basic Item";
        CredMemLineRec."Trade Item" := ApprovLineRec."Trade Item";
        CredMemLineRec.Manufacturer := ApprovLineRec.Manufacturer;
        CredMemLineRec."Vendor (Trade Item)" := ApprovLineRec."Vendor (Trade Item)";
        CredMemLineRec."Vendor Item No." := ApprovLineRec."Vendor Item No.";
        CredMemLineRec.Element := ApprovLineRec.Element;
        CredMemLineRec."Extension Contract" := ApprovLineRec."Extension Contract";
        CredMemLineRec."Plot No." := ApprovLineRec."Plot No.";
        CredMemLineRec."Employee No." := ApprovLineRec."Employee No.";
        CredMemLineRec."Wage Component" := ApprovLineRec."Wage Component";
        CredMemLineRec."Service Order No." := ApprovLineRec."Service Order No.";
        CredMemLineRec."Service Contract No." := ApprovLineRec."Service Contract No.";
        CredMemLineRec."Service Location No." := ApprovLineRec."Service Location No.";
        CredMemLineRec."Rental Unit" := ApprovLineRec."Rental Unit";
        CredMemLineRec."Cost Type" := ApprovLineRec."Cost Type";
        CredMemLineRec."Plant Type" := ApprovLineRec."Plant Type";
        CredMemLineRec."Plant No." := ApprovLineRec."Plant No.";
        CredMemLineRec."Plant Location" := ApprovLineRec."Plant Location";
        CredMemLineRec."Cost Component Plant" := ApprovLineRec."Cost Component Plant";
        CredMemLineRec."Cost Component" := ApprovLineRec."Cost Component";
        CredMemLineRec."Posting Group" := ApprovLineRec."Posting Group";
        CredMemLineRec."Approval Entry" := TRUE;
        CredMemLineRec."Purchase Action" := ApprovLineRec."Purchase Action";
        IF ApprovLineRec.Type = ApprovLineRec.Type::"Fixed Asset" THEN
          FillCredMemLineForFixedAsset();
        CredMemLineRec."Posting Date" := ApprovLineRec."Posting Date";
        CredMemLineRec."Purchase Route Reference" := ApprovLineRec."Purchase Route Reference";
        CredMemLineRec."VAT Bus. Posting Group" := ApprovLineRec."VAT Bus. Posting Group";
        CredMemLineRec."VAT Prod. Posting Group" := ApprovLineRec."VAT Prod. Posting Group";
        CredMemLineRec."FSC Type Code" := ApprovLineRec."FSC Type Code";
        CredMemLineRec."Expense Allowance Scheme" := ApprovLineRec."Expense Allowance Scheme";  //C013068
        CredMemLineRec."Deferral Code" := ApprovLineRec."Deferral Code";
        CredMemLineRec."Loan Code" := ApprovLineRec."Loan Code";
        CredMemLineRec."Loan Type" := ApprovLineRec."Loan Type";

        CredMemLineRec.INSERT;

        UpdateTempValueEntryRelation(STRSUBSTNO('%1',ApprovLineRec."Line No."), CredMemLineRec.RowID1); //C008671
        InsertNSItemTrackingRelation(ApprovLineRec,CredMemLineRec.RowID1); //C004829
        CreatePostedDeferralScheduleFromPurchDoc(CredMemLineRec.GetDocumentType,
          CredHeaderRec."No.", CredMemLineRec."Line No.", CredHeaderRec."Posting Date", CredHeaderRec."Buy-from Vendor No.");
      END;
    END;

    LOCAL PROCEDURE PostItemJnlLine@1210190002(QtyToBeInvoiced@1100529000 : Decimal;QtyToBeInvoicedBase@1100529001 : Decimal;ItemLedgShptEntryNo@1100529002 : Integer;TrackingSpecification@1100529003 : Record 336);
    BEGIN
      IF ApprovLineRec."Receipt No." <> '' THEN
        IF PurchRcptLine.GET(ApprovLineRec."Receipt No.", ApprovLineRec."Receipt Line No.") THEN
          IF PurchRcptLine.Type = PurchRcptLine.Type::"G/L Account" THEN
            EXIT; //No Item Posting for G/L

      ItemJnlLine.INIT;
      ItemJnlLine."Document No." := ApprovLineRec."Document No.";
      IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Purchase Invoice" THEN BEGIN
        //ItemJnlLine."Posting Date" := InvHeaderRec."Posting Date";
        ItemJnlLine."Document Date" := InvHeaderRec."Document Date";
        ItemJnlLine."Source Posting Group" := InvHeaderRec."Vendor Posting Group";
        ItemJnlLine."Salespers./Purch. Code" := InvHeaderRec."Purchaser Code";
        ItemJnlLine."Country/Region Code" := InvHeaderRec."VAT Country/Region Code";
        ItemJnlLine."Reason Code" := InvHeaderRec."Reason Code";
        ItemJnlLine."Posting No. Series" := InvHeaderRec."No. Series";
        ItemJnlLine."External Document No." := InvHeaderRec."Vendor Invoice No.";
        ItemJnlLine."Source Currency Code" := InvHeaderRec."Currency Code";
      END ELSE BEGIN
        //ItemJnlLine."Posting Date" := CredHeaderRec."Posting Date";
        ItemJnlLine."Document Date" := CredHeaderRec."Document Date";
        ItemJnlLine."Source Posting Group" := CredHeaderRec."Vendor Posting Group";
        ItemJnlLine."Salespers./Purch. Code" := CredHeaderRec."Purchaser Code";
        ItemJnlLine."Country/Region Code" := CredHeaderRec."VAT Country/Region Code";
        ItemJnlLine."Reason Code" := CredHeaderRec."Reason Code";
        ItemJnlLine."Posting No. Series" := CredHeaderRec."No. Series";
        ItemJnlLine."External Document No." := CredHeaderRec."Vendor Cr. Memo No.";
        ItemJnlLine."Source Currency Code" := CredHeaderRec."Currency Code";
      END;
      ItemJnlLine."Posting Date" := ApprovLineRec."Posting Date";
      ItemJnlLine."Item No." := ApprovLineRec."Item No.";
      ItemJnlLine.Description := ApprovLineRec.Description;
      ItemJnlLine."Description 2" := ApprovLineRec."Description 2";
      ItemJnlLine."Shortcut Dimension 1 Code" := ApprovLineRec."Shortcut Dimension 1 Code";
      ItemJnlLine."Shortcut Dimension 2 Code" := ApprovLineRec."Shortcut Dimension 2 Code";
      ItemJnlLine."Dimension Set ID" := ApprovLineRec."Dimension Set ID";
      ItemJnlLine."Cost Component" := ApprovLineRec."Cost Component";
      ItemJnlLine."Location Code" := ApprovLineRec."Location Code";
      ItemJnlLine."Bin Code" := ApprovLineRec."Bin Code";
      ItemJnlLine."Variant Code" := ApprovLineRec."Variant Code";
      ItemJnlLine."Inventory Posting Group" := ApprovLineRec."Posting Group";
      ItemJnlLine."Gen. Bus. Posting Group" := ApprovLineRec."Gen. Bus. Posting Group";
      ItemJnlLine."Gen. Prod. Posting Group" := ApprovLineRec."Gen. Prod. Posting Group";
      ItemJnlLine."Transaction Type" := ApprovLineRec."Transaction Type";
      ItemJnlLine."Inventory Posting Group" := ApprovLineRec."Posting Group";
      ItemJnlLine."Transport Method" := ApprovLineRec."Transport Method";
      ItemJnlLine."Entry/Exit Point" := ApprovLineRec."Entry Point";
      ItemJnlLine.Area := ApprovLineRec.Area;
      ItemJnlLine."Transaction Specification" := ApprovLineRec."Transaction Specification";
      ItemJnlLine."Entry Type" := ItemJnlLine."Entry Type"::Purchase;
      ItemJnlLine."FSC Type Code" := ApprovLineRec."FSC Type Code";

      ItemJnlLine."Unit Cost" := ApprovLineRec.Price;
      //C007139.sn
      IF (ApprCurrencyCode <> '') AND (ItemJnlLine."Unit Cost" <> 0) THEN
        ItemJnlLine."Unit Cost" :=
          ROUND(CurrencyExchRate.ExchangeAmtFCYToLCY(
            1, ApprProjectNo, ApprovLineRec."Posting Date", ApprCurrencyCode, ItemJnlLine."Unit Cost", ApprovCurrencyFactor, FALSE));
      //C007139.en
      ItemJnlLine."Unit Cost (ACY)" := ItemJnlLine."Unit Cost";

      IF ApprovLineRec."Receipt No." = '' THEN BEGIN
        ItemJnlLine."Location Code" := ApprovLineRec."Location Code";
        IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Purchase Invoice" THEN BEGIN
          ItemJnlLine.Quantity := QtyToBeInvoiced;               //C004829.n
          ItemJnlLine."Quantity (Base)" := QtyToBeInvoicedBase;  //C004829.n
        END ELSE BEGIN
          ItemJnlLine.Quantity := -QtyToBeInvoiced;               //C004829.n
          ItemJnlLine."Quantity (Base)" := -QtyToBeInvoicedBase;  //C004829.n
        END;
        ItemJnlLine."Invoice No." := ApprovLineRec."Document No.";
        IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Purchase Invoice" THEN
          ItemJnlLine."Source No." := InvHeaderRec."Buy-from Vendor No."
        ELSE
          ItemJnlLine."Source No." := CredHeaderRec."Buy-from Vendor No.";
      END ELSE BEGIN
        ItemJnlLine."Source No." := ApprovLineRec."Buy-from Vendor No.";
      END;

      PurchSetup.GET;
      IF PurchSetup."Exact Cost Reversing Mandatory" THEN
        IF ApprovLineRec."Document Type" IN [ApprovLineRec."Document Type"::"Credit Memo"] THEN BEGIN
          IF PurchLine.Quantity > 0 THEN
            ApprovLineRec.TESTFIELD("Appl.-to Item Entry");
        END ELSE BEGIN
          IF PurchLine.Quantity < 0 THEN
            ApprovLineRec.TESTFIELD("Appl.-to Item Entry");
        END;

      ItemJnlLine."Applies-to Entry" := ApprovLineRec."Appl.-to Item Entry";
      ItemJnlLine."Unit of Measure Code" := ApprovLineRec."Unit of Measure Code";
      ItemJnlLine."Qty. per Unit of Measure" := ApprovLineRec."Qty. per Unit of Measure";
      IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Purchase Invoice" THEN BEGIN
        ItemJnlLine."Invoiced Quantity" := QtyToBeInvoiced;         //C004829.n
        ItemJnlLine."Invoiced Qty. (Base)" := QtyToBeInvoicedBase;  //C004829.n
      END ELSE BEGIN
        ItemJnlLine."Invoiced Quantity" := -QtyToBeInvoiced;         //C004829.n
        ItemJnlLine."Invoiced Qty. (Base)" := -QtyToBeInvoicedBase;  //C004829.n
      END;
      ItemJnlLine."Value Entry Type" := ItemJnlLine."Value Entry Type"::"Direct Cost";
      ItemJnlLine.Amount := ItemJnlLine."Invoiced Quantity" * ItemJnlLine."Unit Cost" ;
      ItemJnlLine."Source Type" := ItemJnlLine."Source Type"::Vendor;
      ItemJnlLine."Source Code" := ApprovLineRec."Source Code";
      ItemJnlLine."Indirect Cost %" := ApprovLineRec."Indirect Cost %";
      //C004829.sn
      ItemJnlLine."Serial No." := TrackingSpecification."Serial No.";
      ItemJnlLine."Lot No." := TrackingSpecification."Lot No.";
      ItemJnlLine."Item Shpt. Entry No." := ItemLedgShptEntryNo;
      //C004829.en

      IF ApprovLineRec."Receipt No." <> '' THEN BEGIN
        PurchRcptLine.GET(ApprovLineRec."Receipt No.",ApprovLineRec."Receipt Line No.");
        IF PurchRcptLine."Prod. Order No." <> '' THEN BEGIN
          ItemJnlLine."Order Type" := ItemJnlLine."Order Type"::Production;
          ItemJnlLine."Order No." := PurchRcptLine."Prod. Order No.";
          ItemJnlLine."Order Line No." := PurchRcptLine."Prod. Order Line No.";
          ItemJnlLine.Subcontracting := TRUE;
          ItemJnlLine."Output Quantity (Base)" := ItemJnlLine."Invoiced Qty. (Base)";
          ItemJnlLine."Entry Type" := ItemJnlLine."Entry Type"::Output;
          ItemJnlLine."Document No." := PurchRcptLine."Prod. Order No.";
          ItemJnlLine.Type := ItemJnlLine.Type::"Work Center";
          ItemJnlLine."No." := PurchRcptLine."Work Center No.";
          ItemJnlLine."Routing No." := PurchRcptLine."Routing No.";
          ItemJnlLine."Routing Reference No." := PurchRcptLine."Routing Reference No.";
          ItemJnlLine."Operation No." := PurchRcptLine."Operation No.";
          ItemJnlLine."Work Center No." := PurchRcptLine."Work Center No.";
          ItemJnlLine."Unit Cost Calculation" := ItemJnlLine."Unit Cost Calculation"::Units;
        END;
      END;
      ItemJnlPostLine.RunWithCheck(ItemJnlLine);

      ItemJnlPostLine.CollectValueEntryRelation(TempValueEntryRelation,STRSUBSTNO('%1',ApprovLineRec."Line No.")); //C008671
    END;

    PROCEDURE InitGJNL@7();
    BEGIN
      GenJnlLine.INIT;
      Counter := Counter+1;
      GenJnlLine."Line No." := Counter;
      IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Purchase Invoice" THEN BEGIN
        GenJnlLine."Document Type" := GenJnlLine."Document Type"::Invoice;
        GenJnlLine."Document Date" := InvHeaderRec."Document Date";
        GenJnlLine."External Document No." := InvHeaderRec."Vendor Invoice No."; //DP01406
      END ELSE BEGIN
        GenJnlLine."Document Type" := GenJnlLine."Document Type"::"Credit Memo";
        GenJnlLine."Document Date" := CredHeaderRec."Document Date";
      END;
      GenJnlLine."Source Code" := GLJournTemplRec."Source Code";
      IF  ApprovLineRec."Reason Code" <> '' THEN
        GenJnlLine."Reason Code" := ApprovLineRec."Reason Code"   //C019819
      ELSE
        GenJnlLine."Reason Code" := GLJournTemplRec."Reason Code";
      GenJnlLine."Document No." := ApprovLineRec."Document No.";
      GenJnlLine.Description := ApprovLineRec.Description;
      GenJnlLine."Description 2" := ApprovLineRec."Description 2";
      GenJnlLine."Job No." := ApprovLineRec."Project No.";
      GenJnlLine.Element := ApprovLineRec.Element;
      GenJnlLine."Plot No." := ApprovLineRec."Plot No.";
      GenJnlLine."Extension Contract" := ApprovLineRec."Extension Contract";
      GenJnlLine."Employee No." := ApprovLineRec."Employee No.";
      GenJnlLine."Wage Component" := ApprovLineRec."Wage Component";
      GenJnlLine.Quantity := ApprovLineRec.Quantity;
      GenJnlLine."Unit of Measure Code" := ApprovLineRec."Unit of Measure Code";
      GenJnlLine."Shortcut Dimension 1 Code" := ApprovLineRec."Shortcut Dimension 1 Code";
      GenJnlLine."Shortcut Dimension 2 Code" := ApprovLineRec."Shortcut Dimension 2 Code";
      GenJnlLine."Dimension Set ID" := ApprovLineRec."Dimension Set ID";
      GenJnlLine."Journal Template Name" := ApprovLineRec."Journal Template Name";
      GenJnlLine."Account Type" := GenJnlLine."Account Type"::"G/L Account";
      GenJnlLine."Posting Date" := ApprovLineRec."Posting Date";
      GenJnlLine."Interest Date" := ApprovLineRec."Interest Date";
      GenJnlLine."Account No." := ApprovLineRec."Account No.";
      GenJnlLine."Bal. Account Type" := GenJnlLine."Bal. Account Type"::"G/L Account";
      IF ((ApprovLineRec."Account No." <> '') OR (ApprovLineRec.Amount <> 0)) AND (NOT PreRegisteredWIP) THEN
        GenJnlLine."Bal. Account No." := GLJournTemplRec."Bal. Account No.";
      GenJnlLine."Plant Type" := ApprovLineRec."Plant Type";
      GenJnlLine."Plant No." := ApprovLineRec."Plant No.";
      GenJnlLine."Cost Component Plant" := ApprovLineRec."Cost Component Plant";
      GenJnlLine."Cost Component" := ApprovLineRec."Cost Component";
      GenJnlLine."Posting Group" := ApprovLineRec."Posting Group";
      GenJnlLine."Service Order No." := ApprovLineRec."Service Order No.";
      GenJnlLine.GetServiceCategory;
      GenJnlLine."Service Location No." := ApprovLineRec."Service Location No.";
      GenJnlLine."Service Contract No." := ApprovLineRec."Service Contract No.";
      GenJnlLine."Rental Unit" := ApprovLineRec."Rental Unit";
      GenJnlLine."Item No." := ApprovLineRec."Item No.";
      GenJnlLine."Basic Item" := ApprovLineRec."Basic Item";
      GenJnlLine."Trade Item" := ApprovLineRec."Trade Item";
      GenJnlLine.Manufacturer := ApprovLineRec.Manufacturer;
      GenJnlLine."Vendor (Trade Item)" := ApprovLineRec."Vendor (Trade Item)";
      GenJnlLine."Purchase Action" := ApprovLineRec."Purchase Action";
      GenJnlLine."FSC Type Code" := ApprovLineRec."FSC Type Code";
      // 4PSSE Itero.BSL 2013-09-18 BEGIN
      GenJnlLine."Periodic Template Code" := ApprovLineRec."Periodic Template Code";
      GenJnlLine."Periodic Starting Date" := ApprovLineRec."Periodic Starting Date";
      // 4PSSE Itero.BSL 2013-09-18 END

      IF ApprovLineRec.Type = ApprovLineRec.Type::"Fixed Asset" THEN
        FillGenJnlLineForFixedAsset();

      GenJnlLine."Source Type" := GenJnlLine."Source Type"::Vendor;
      IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Purchase Invoice" THEN BEGIN
        GenJnlLine.Amount := ApprovLineRec.Amount;
        GenJnlLine."Source No." := InvHeaderRec."Buy-from Vendor No.";
      END ELSE BEGIN
        GenJnlLine.Amount := ApprovLineRec.Amount * -1;
        GenJnlLine."Source No." := CredHeaderRec."Buy-from Vendor No.";
      END;

      //190506
      GenJnlLine.VALIDATE(Amount);
      //190506

      GenJnlLine."System-Created Entry" := TRUE;
      GenJnlLine."Currency Code" := ApprCurrencyCode;
      IF (GenJnlLine."Currency Code" = '') OR (GenJnlLine.Amount = 0) THEN
        GenJnlLine."Amount (LCY)" := GenJnlLine.Amount
      ELSE
        GenJnlLine."Amount (LCY)" :=
          ROUND(
            CurrencyExchRate.ExchangeAmtFCYToLCY(
              1, ApprProjectNo, ApprovLineRec."Posting Date", ApprCurrencyCode,
              GenJnlLine.Amount, ApprovCurrencyFactor, FALSE));

      //190506
      GenJnlLine.VALIDATE("Amount (LCY)");
      //190506

      GenJnlLine."Intercompany Transaction" := (ApprovLineRec."Receiving Company" <> '');

      //DP01406.sn
      GenJnlLine."Source Currency Code" := ApprCurrencyCode;
      GenJnlLine."Source Currency Amount" := GenJnlLine.Amount;
      IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Purchase Invoice" THEN BEGIN
        GenJnlLine.SetCurrencyFactor(InvHeaderRec."Currency Code",InvHeaderRec."Currency Factor");
        IF (ApprovLineRec."Generated Retention Line") OR
           (ApprovLineRec."Applies-to Retention ID" <> 0) THEN
        BEGIN
          GenJnlLine."Sell-to/Buy-from No." := InvHeaderRec."Buy-from Vendor No.";
          GenJnlLine."Retention Entry Type" := GenJnlLine."Retention Entry Type"::Purchase;
          GenJnlLine."Source No." := InvHeaderRec."Buy-from Vendor No.";
          IF ApprovLineRec."Generated Retention Line" THEN BEGIN
            GenJnlLine."Retention Entry Document Type" := GenJnlLine."Retention Entry Document Type"::Invoice;
            GenJnlLine."Subcontract No." := InvHeaderRec."Subcontract No.";
            GenJnlLine."Closed Project No." := InvHeaderRec."Job No.";
          END ELSE BEGIN
            GenJnlLine."Retention Entry Document Type" := GenJnlLine."Retention Entry Document Type"::Closure;
            GenJnlLine."Applies-to Retention ID" := ApprovLineRec."Applies-to Retention ID";
          END;
        END;
      END ELSE
        GenJnlLine.SetCurrencyFactor(CredHeaderRec."Currency Code",CredHeaderRec."Currency Factor");
      //DP01406.en

      CheckProject;
    END;

    PROCEDURE CreateICEntry@9();
    VAR
      ICCounter@11012000 : Integer;
    BEGIN
      ICEntryRec.LOCKTABLE;
      IF ICEntryRec.FIND('+') THEN
        ICCounter := ICEntryRec."Line No."
      ELSE
        ICCounter := 0;

      ICEntryRec.INIT;
      ICEntryRec."Line No." := ICCounter + 1;
      ICEntryRec."Post in Company" := ApprovLineRec."Receiving Company";
      ICEntryRec."Supplying Company" := COMPANYNAME;
      ICEntryRec."Receiving Company" := ApprovLineRec."Receiving Company";
      ICEntryRec."Account No." := ICRec."Receiving Company IC Account";
      ICEntryRec."Account Type" := ICEntryRec."Account Type"::"G/L Account";
      ICEntryRec."Bal. Account No." := ApprovLineRec."Account No.";
      ICEntryRec.Description := ApprovLineRec.Description;
      ICEntryRec."Description 2" := ApprovLineRec."Description 2";
      ICEntryRec."Project No." := ApprovLineRec."Project No.";
      ICEntryRec.Element := ApprovLineRec.Element;
      ICEntryRec."Extension Contract" := ApprovLineRec."Extension Contract";
      ICEntryRec."Employee No." := ApprovLineRec."Employee No.";
      ICEntryRec."Item No." := ApprovLineRec."Item No.";
      ICEntryRec."Basic Item" := ApprovLineRec."Basic Item";
      ICEntryRec."Trade Item" := ApprovLineRec."Trade Item";
      ICEntryRec.Manufacturer := ApprovLineRec.Manufacturer;
      ICEntryRec."Vendor (Trade Item)" := ApprovLineRec."Vendor (Trade Item)";
      ICEntryRec."Global Dimension 1 Code" := ApprovLineRec."Shortcut Dimension 1 Code";
      ICEntryRec."Cost Object" := ApprovLineRec."Shortcut Dimension 2 Code";
      ICEntryRec."Dimension Set ID" := ApprovLineRec."Dimension Set ID";

      ICEntryRec.Quantity := ApprovLineRec.Quantity;
      ICEntryRec."Unit of Measure Code" := ApprovLineRec."Unit of Measure Code";
      //DP02206.sn
      ICEntryRec.Price := ApprovLineRec.Price;
      ICEntryRec.Amount := ApprovLineRec.Amount;  //excl.VAT
      //DP02206.en
      IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Credit Memo" THEN BEGIN
        ICEntryRec.Price := ICEntryRec.Price * -1;
        ICEntryRec.Amount := ICEntryRec.Amount * -1;
      END;
      ICEntryRec."Document No." := ApprovLineRec."Document No.";
      ICEntryRec."Vendor No." := VendLedgerEntry."Vendor No.";
      ICEntryRec."Posting Date" := ApprovLineRec."Posting Date";
      ICEntryRec."Interest Date" := ApprovLineRec."Interest Date";
      ICEntryRec."Service Order No." := ApprovLineRec."Service Order No.";
      ICEntryRec."Service Location No." := ApprovLineRec."Service Location No.";
      ICEntryRec."Service Contract No." := ApprovLineRec."Service Contract No.";
      ICEntryRec."Additional Cost (Service)" := ApprovLineRec."Additional Cost (Service)";
      IF ApprovLineRec."Plant Type" <> '' THEN
        ApprovLineRec.TESTFIELD("Cost Component Plant");
      ICEntryRec."Plant Type" := ApprovLineRec."Plant Type";
      ICEntryRec."Plant No." := ApprovLineRec."Plant No.";
      ICEntryRec."Cost Component Plant" := ApprovLineRec."Cost Component Plant";
      ICEntryRec."Cost Component" := ApprovLineRec."Cost Component";
      ICEntryRec."Posting Group" := ApprovLineRec."Posting Group";

      ICEntryRec.TESTFIELD("Account No.");
      ICEntryRec.TESTFIELD("Bal. Account No.");
      IF ICEntryRec."Project No." <> '' THEN
        ICEntryRec.TESTFIELD("Cost Object");

      ICEntryRec.CheckProjStatusReceivingComp();
      ICEntryRec.CheckProjElemBlockedRecComp();

      ICEntryRec.AddICRelationDims(ICRec);

      IF ICEntryRec."Global Dimension 1 Code" <> '' THEN
        ICEntryRec.CheckGlobalDimAllowed(1, ICEntryRec."Global Dimension 1 Code");
      IF ICEntryRec."Cost Object" <> '' THEN
        ICEntryRec.CheckGlobalDimAllowed(2, ICEntryRec."Cost Object");

      ICEntryRec.INSERT(TRUE);
      ICEntryRec."Currency Code" := GLSetup.GetCurrencyCode(ApprCurrencyCode);  //DP02206
      ICEntryRec.MODIFY;
      CheckDimValuePosting(ApprovLineRec."Line No.");
    END;

    PROCEDURE ApprCurrencyCode@8() : Code[10];
    BEGIN
      IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Purchase Invoice" THEN
        EXIT(InvHeaderRec."Currency Code")
      ELSE
        EXIT(CredHeaderRec."Currency Code");
    END;

    PROCEDURE ApprovCurrencyFactor@11() : Decimal;
    BEGIN
      IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Purchase Invoice" THEN
        EXIT(InvHeaderRec."Currency Factor")
      ELSE
        EXIT(CredHeaderRec."Currency Factor");
    END;

    [External]
    PROCEDURE ApprProjectNo@1100529600() : Code[20];
    BEGIN
      IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Purchase Invoice" THEN
        EXIT(InvHeaderRec."Job No.")
      ELSE
        EXIT(CredHeaderRec."Job No.");
    END;

    PROCEDURE PriceInLCY@10(ApprovPrice@11012000 : Decimal) : Decimal;
    BEGIN
      IF (ApprCurrencyCode = '') OR (ApprovPrice = 0) THEN
        EXIT(ApprovPrice)
      ELSE
        EXIT(
          ROUND(
            CurrencyExchRate.ExchangeAmtFCYToLCY(
              1, ApprProjectNo, ApprovLineRec."Posting Date", ApprCurrencyCode,
              ApprovPrice, ApprovCurrencyFactor, FALSE), 0.00001));
    END;

    LOCAL PROCEDURE CheckDimComb@30(LineNo@1000 : Integer);
    BEGIN
      IF NOT DimMgt.CheckDimIDComb(ApprovLineRec."Dimension Set ID") THEN
        IF LineNo = 0 THEN
          ERROR(
            Text032,
            ApprovLineRec."Document Type",ApprovLineRec."Document No.",DimMgt.GetDimCombErr)
        ELSE
          ERROR(
            Text033,
            ApprovLineRec."Document Type",ApprovLineRec."Document No.",LineNo,DimMgt.GetDimCombErr);
    END;

    LOCAL PROCEDURE CheckDimValuePosting@28(LineNo@1000 : Integer);
    VAR
      TableIDArr@1002 : ARRAY [10] OF Integer;
      NumberArr@1003 : ARRAY [10] OF Code[20];
    BEGIN
      IF LineNo <> 0 THEN BEGIN
        TableIDArr[1] := DimMgt.TypeToTableID3(1);
        NumberArr[1] := ApprovLineRec."Account No.";
        TableIDArr[2] := DATABASE::Job;
        NumberArr[2] := ApprovLineRec."Project No.";
        DimMgt.SetCompany(ApprovLineRec."Receiving Company");
        IF NOT DimMgt.CheckDimValuePosting(TableIDArr,NumberArr,ApprovLineRec."Dimension Set ID") THEN
          ERROR(
            Text035,
            ApprovLineRec."Document Type",ApprovLineRec."Document No.",LineNo,DimMgt.GetDimValuePostingErr);
      END;
    END;

    [External]
    PROCEDURE CheckPlantNoPosted@1210190007();
    VAR
      lvPlantSetupRec@1210190000 : Record 11012550;
      lvPlantNoRec@1210190001 : Record 11012552;
      lvPostPlantNumberCU@1210190002 : Codeunit 11012550;
    BEGIN
      IF (ApprovLineRec."Plant Type" = '') OR (ApprovLineRec."Plant No." = '') OR (ApprovLineRec."Receiving Company" <> '') THEN
        EXIT;
      lvPlantSetupRec.GET;
      IF NOT lvPlantSetupRec."Integration Fixed Assets" THEN
        EXIT;
      IF NOT lvPlantNoRec.GET(ApprovLineRec."Plant Type", ApprovLineRec."Plant No.") THEN
        EXIT;
      IF lvPlantNoRec.Posted THEN
        EXIT;

      IF (lvPlantSetupRec."Post On FA Acquisition") AND
        (lvPlantSetupRec."Cost Component Acquisition" = ApprovLineRec."Cost Component Plant") THEN
          lvPostPlantNumberCU.RUN(lvPlantNoRec)
        ELSE
          lvPlantNoRec.TESTFIELD(Posted, TRUE);
    END;

    [External]
    PROCEDURE UpdatePlantNoPurchPrice@1100485002();
    VAR
      lvPlantNoRec@1100485000 : Record 11012552;
    BEGIN
      IF (gDocTypeOpt <> gDocTypeOpt::"Purchase Invoice") OR (ApprovLineRec."Receiving Company" <> '') THEN
        EXIT;
      IF (ApprovLineRec."Plant Type" = '') OR (ApprovLineRec."Plant No." = '') OR (ApprovLineRec."Cost Component Plant" = '') THEN
        EXIT;

      IF (ApprovLineRec.CheckPlantAcqOrRent() <> 1) THEN
        EXIT;
      IF NOT lvPlantNoRec.GET(ApprovLineRec."Plant Type", ApprovLineRec."Plant No.") THEN
        EXIT;

      IF (lvPlantNoRec."Purchase Price" = 0) THEN BEGIN
        lvPlantNoRec."Purchase Price" := ApprovLineRec.Price;
        lvPlantNoRec.MODIFY;
      END;
    END;

    [External]
    PROCEDURE FillGenJnlLineForFixedAsset@1210190005();
    BEGIN
      GenJnlLine."Account Type" :=  GenJnlLine."Account Type"::"Fixed Asset";
      GenJnlLine."FA Posting Date" := ApprovLineRec."Posting Date";
      IF ApprovLineRec."FA Posting Type" <> ApprovLineRec."FA Posting Type"::Maintenance THEN
        GenJnlLine."FA Posting Type" :=  GenJnlLine."FA Posting Type"::"Acquisition Cost"
      ELSE
        GenJnlLine."FA Posting Type" :=  GenJnlLine."FA Posting Type"::Maintenance;
      GenJnlLine."Depreciation Book Code" := ApprovLineRec."Depreciation Book Code";
      GenJnlLine."Depr. until FA Posting Date":= ApprovLineRec."Depr. until FA Posting Date";
      GenJnlLine."Depr. Acquisition Cost":= ApprovLineRec."Depr. Acquisition Cost";
      GenJnlLine."Insurance No.":= ApprovLineRec."Insurance No.";
      GenJnlLine."Budgeted FA No.":= ApprovLineRec."Budgeted FA No.";
    END;

    [External]
    PROCEDURE FillPurInvLineForFixedAsset@1210190006();
    BEGIN
      PurchInvLineRec.Type := PurchInvLineRec.Type::"Fixed Asset";
      PurchInvLineRec."FA Posting Date" := ApprovLineRec."Posting Date";
      PurchInvLineRec."FA Posting Type" := ApprovLineRec."FA Posting Type";
      PurchInvLineRec."Depreciation Book Code" := ApprovLineRec."Depreciation Book Code";
      PurchInvLineRec."Depr. until FA Posting Date":= ApprovLineRec."Depr. until FA Posting Date";
      PurchInvLineRec."Depr. Acquisition Cost":= ApprovLineRec."Depr. Acquisition Cost";
      PurchInvLineRec."Insurance No.":= ApprovLineRec."Insurance No.";
      PurchInvLineRec."Budgeted FA No.":= ApprovLineRec."Budgeted FA No.";
    END;

    [External]
    PROCEDURE FillCredMemLineForFixedAsset@1210190004();
    BEGIN
      CredMemLineRec.Type := PurchInvLineRec.Type::"Fixed Asset";
      CredMemLineRec."FA Posting Date" := ApprovLineRec."Posting Date";
      CredMemLineRec."FA Posting Type" := ApprovLineRec."FA Posting Type";
      CredMemLineRec."Depreciation Book Code" := ApprovLineRec."Depreciation Book Code";
      CredMemLineRec."Depr. until FA Posting Date":= ApprovLineRec."Depr. until FA Posting Date";
      CredMemLineRec."Depr. Acquisition Cost":= ApprovLineRec."Depr. Acquisition Cost";
      CredMemLineRec."Insurance No.":= ApprovLineRec."Insurance No.";
      CredMemLineRec."Budgeted FA No.":= ApprovLineRec."Budgeted FA No.";
    END;

    [External]
    PROCEDURE CheckProject@1210190010();
    BEGIN
      IF ApprovLineRec."Project No." = '' THEN
        EXIT;

      IF ApprovLineRec."Receiving Company" <> '' THEN BEGIN
        ProjSetup.CHANGECOMPANY(ApprovLineRec."Receiving Company");
        JobRec.CHANGECOMPANY(ApprovLineRec."Receiving Company");
        ProjTypeRec.CHANGECOMPANY(ApprovLineRec."Receiving Company");
      END ELSE BEGIN
        ProjSetup.CHANGECOMPANY(COMPANYNAME);
        JobRec.CHANGECOMPANY(COMPANYNAME);
        ProjTypeRec.CHANGECOMPANY(COMPANYNAME);
      END;
      ProjSetup.GET;
      IF NOT JobRec.GET(ApprovLineRec."Project No.") THEN JobRec.INIT;
      IF JobRec."Posting Element Mandatory" THEN
        ApprovLineRec.TESTFIELD(Element);
      IF NOT ProjTypeRec.GET(JobRec."Project Type") THEN ProjTypeRec.INIT;
    END;

    [External]
    PROCEDURE CheckCreditMemoMargin@1210190015(PurchCrMemoHdr@1210190000 : Record 124;VAR InvoiceApprovalLine@1210190002 : Record 11012032) : Boolean;
    VAR
      PurchInvHeader@1210190001 : Record 122;
    BEGIN
      PurchInvHeader."Buy-from Vendor No." := PurchCrMemoHdr."Buy-from Vendor No.";
      PurchInvHeader."Journal Template" :=  PurchCrMemoHdr."Journal Template";
      PurchInvHeader."No." := PurchCrMemoHdr."No.";
      PurchInvHeader."Shortcut Dimension 1 Code" := PurchCrMemoHdr."Shortcut Dimension 1 Code";
      PurchInvHeader."Balance Due" := PurchCrMemoHdr."Balance Due";
      EXIT(CheckInvoiceMargin(PurchInvHeader, InvoiceApprovalLine, 1));
    END;

    [External]
    PROCEDURE CheckInvoiceMargin@1210190008(PurchInvHeader@1210190009 : Record 122;VAR InvoiceApprovalLine@1210190014 : Record 11012032;DocumentType@1210190017 : 'Purchase Invoice,Purchase Credit Memo') : Boolean;
    VAR
      lvGenPostSetupRec@1210190012 : Record 252;
      PurchSetup@1210190011 : Record 312;
      lvVendRec@1210190000 : Record 23;
      lvApprovLineRec@1210190004 : Record 11012032;
      PurchInvoiceLine@1210190018 : Record 123;
      PurchCredMemLine@1210190019 : Record 125;
      lvPostingDate@1100485001 : Date;
      lvProjRelated@1210190008 : Boolean;
      lvMarginOk@1100485000 : Boolean;
      lvMarginAmount@1210190001 : Decimal;
      lvMarginPerc@1210190002 : Decimal;
      lvDiffAmount@1210190003 : Decimal;
      lvAmountHeader@1210190005 : Decimal;
      lvAmountLines@1210190006 : Decimal;
      lvReceivingComp@1210190015 : Code[30];
      lvShortcutDim1@1210190016 : Code[20];
      lvBusGroup@1210190013 : Code[10];
      lvProdGroup@1210190007 : Code[10];
      lvText11012000@1210190010 : TextConst 'ENU=Correction purchace variance;NOR=Rettelse av innkj›psavvik;SVE=R„ttning av ink”psavvikelse';
      FieldCaptionText@1210190020 : Text[100];
    BEGIN
      PurchVarianceCorrectionLineNo := -1;

      lvVendRec.GET(PurchInvHeader."Buy-from Vendor No.");
      lvMarginAmount := lvVendRec."Invoice/Receipt Margin Amount";
      lvMarginPerc := lvVendRec."Invoice/Receipt Margin Perc.";
      IF (lvMarginAmount = 0) AND (lvMarginPerc = 0) THEN BEGIN
        PurchSetup.GET;
        lvMarginAmount := PurchSetup."Margin Amount (Header)";
        lvMarginPerc := PurchSetup."Margin % (Header)";
      END;
      MarginAmnt := lvMarginAmount;  //* Put in global, because now also used
      MarginPerc := lvMarginPerc;    //* for testing on margin of lines

      lvAmountHeader := PurchInvHeader."Balance Due";
      lvAmountLines := InvoiceApprovalLine.Balance;
      IF (lvAmountHeader = lvAmountLines) THEN
        EXIT(TRUE);

      lvMarginOk := TRUE;
      IF (lvMarginAmount = 0) AND (lvMarginPerc = 0) THEN
        lvMarginOk := FALSE;

      lvDiffAmount := lvAmountHeader - lvAmountLines;
      IF (lvMarginAmount <> 0) AND (ABS(lvDiffAmount) > lvMarginAmount) THEN
        lvMarginOk := FALSE;
      IF (lvMarginPerc <> 0) THEN BEGIN
        IF (lvAmountLines = 0) THEN
          lvMarginOk := FALSE
        ELSE BEGIN
          IF (ABS(lvDiffAmount / lvAmountLines * 100)  > lvMarginPerc) THEN
            lvMarginOk := FALSE;
        END;
      END;
      IF NOT lvMarginOk THEN BEGIN
        ERROR(Text004, InvoiceApprovalLine."Document No.");
        EXIT(FALSE);
      END;

      lvApprovLineRec.RESET;
      lvApprovLineRec.SETRANGE("Journal Template Name", PurchInvHeader."Journal Template");
      lvApprovLineRec.SETRANGE("Document Type", DocumentType);
      lvApprovLineRec.SETRANGE("Document No.", PurchInvHeader."No.");
      lvApprovLineRec.SETFILTER("Account No.", '<>%1', ''); //C013677.n
      IF NOT lvApprovLineRec.FIND('-') THEN
        EXIT(FALSE);
      lvReceivingComp := lvApprovLineRec."Receiving Company";
      lvShortcutDim1 := lvApprovLineRec."Shortcut Dimension 1 Code";
      lvBusGroup := lvApprovLineRec."Gen. Bus. Posting Group";
      lvProdGroup := lvApprovLineRec."Gen. Prod. Posting Group";
      lvProjRelated := (lvApprovLineRec."Project No." <> '');
      lvPostingDate := 0D;

      REPEAT
        IF (lvApprovLineRec."Receiving Company" <> lvReceivingComp) THEN
          ERROR(Text043 + ' ' + Text044, lvApprovLineRec.FIELDCAPTION("Receiving Company"));
        IF (lvProjRelated <> (lvApprovLineRec."Project No." <> '')) THEN
          ERROR(Text043 + ' ' + Text045, lvApprovLineRec.FIELDCAPTION("Project No."));
        IF (lvShortcutDim1 <> '') AND (lvApprovLineRec."Shortcut Dimension 1 Code" <> lvShortcutDim1) THEN
          lvShortcutDim1 := '';
        IF lvApprovLineRec."Posting Date" > lvPostingDate THEN
          lvPostingDate := lvApprovLineRec."Posting Date";
      UNTIL (lvApprovLineRec.NEXT = 0);

      IF DocumentType <> DocumentType::"Purchase Credit Memo" THEN BEGIN
        PurchInvoiceLine.SETRANGE("Document No.", PurchInvHeader."No.");
        PurchInvoiceLine.SETRANGE(Type, PurchInvoiceLine.Type::"G/L Account");
        PurchInvoiceLine.SETFILTER("No.", '<>%1', '');
        PurchInvoiceLine.SETRANGE("Approval Entry", FALSE);
        IF PurchInvoiceLine.FINDFIRST THEN BEGIN
          lvBusGroup := PurchInvoiceLine."Gen. Bus. Posting Group";
          lvProdGroup := PurchInvoiceLine."Gen. Prod. Posting Group";
        END;
      END ELSE BEGIN
        PurchCredMemLine.SETRANGE("Document No.", PurchInvHeader."No.");
        PurchCredMemLine.SETRANGE(Type, PurchCredMemLine.Type::"G/L Account");
        PurchCredMemLine.SETFILTER("No.", '<>%1', '');
        PurchCredMemLine.SETRANGE("Approval Entry", FALSE);
        IF PurchCredMemLine.FINDFIRST THEN BEGIN
          lvBusGroup := PurchCredMemLine."Gen. Bus. Posting Group";
          lvProdGroup := PurchCredMemLine."Gen. Prod. Posting Group";
        END;
      END;

      IF NOT lvGenPostSetupRec.GET(lvBusGroup, lvProdGroup) THEN BEGIN
        IF NOT lvProjRelated THEN
          FieldCaptionText := lvGenPostSetupRec.FIELDCAPTION("Purchase Variance Account")
        ELSE
          FieldCaptionText := lvGenPostSetupRec.FIELDCAPTION("Purch. Variance Acc.(Projects)");
        ERROR(Text043 + ' ' + Text046,
         FieldCaptionText,
         lvGenPostSetupRec.FIELDCAPTION("Gen. Bus. Posting Group"), lvBusGroup,
         lvGenPostSetupRec.FIELDCAPTION("Gen. Prod. Posting Group"), lvProdGroup,
         lvGenPostSetupRec.TABLECAPTION);
      END;
      IF NOT lvProjRelated THEN
        lvGenPostSetupRec.TESTFIELD("Purchase Variance Account")
      ELSE
        lvGenPostSetupRec.TESTFIELD("Purch. Variance Acc.(Projects)");

      lvApprovLineRec.RESET;
      lvApprovLineRec.SETRANGE("Journal Template Name", PurchInvHeader."Journal Template");
      lvApprovLineRec.SETRANGE("Document Type", DocumentType);
      lvApprovLineRec.SETRANGE("Document No.", PurchInvHeader."No.");
      lvApprovLineRec.FIND('+');  //Read last 'Line No.'
      //
      lvApprovLineRec.INIT;
      lvApprovLineRec."Document Type" := DocumentType;
      lvApprovLineRec."Document No." := PurchInvHeader."No.";
      lvApprovLineRec."Line No." := lvApprovLineRec."Line No." + 10000;
      lvApprovLineRec.VALIDATE(Type, lvApprovLineRec.Type::"G/L Account");
      lvApprovLineRec."Receiving Company" := lvReceivingComp;
      lvApprovLineRec."System-Created Entry" := TRUE;
      IF lvProjRelated THEN
        lvApprovLineRec.VALIDATE("Account No.", lvGenPostSetupRec."Purch. Variance Acc.(Projects)")
      ELSE
        lvApprovLineRec.VALIDATE("Account No.", lvGenPostSetupRec."Purchase Variance Account");
      lvApprovLineRec."Plant Type" := '';  // Clear the field after validate of the account!
      IF (lvApprovLineRec."Shortcut Dimension 1 Code" = '') AND (PurchInvHeader."Shortcut Dimension 1 Code" <> '') THEN
        lvApprovLineRec."Shortcut Dimension 1 Code" := PurchInvHeader."Shortcut Dimension 1 Code";
      IF (lvShortcutDim1 <> '') THEN
        lvApprovLineRec.VALIDATE("Shortcut Dimension 1 Code", lvShortcutDim1);
      lvApprovLineRec.VALIDATE("Buy-from Vendor No.", PurchInvHeader."Buy-from Vendor No.");
      lvApprovLineRec."Gen. Bus. Posting Group" := lvBusGroup;
      lvApprovLineRec."Gen. Prod. Posting Group" := lvProdGroup;
      lvApprovLineRec.Description := lvText11012000;
      lvApprovLineRec.VALIDATE(Quantity, 1);
      lvApprovLineRec.VALIDATE(Amount, lvDiffAmount);
      lvApprovLineRec.INSERT(TRUE);

      IF (lvPostingDate <> 0D) AND (lvPostingDate <> lvApprovLineRec."Posting Date") THEN BEGIN
        lvApprovLineRec."Posting Date" := lvPostingDate;
        lvApprovLineRec.MODIFY;
      END;

      PurchVarianceCorrectionLineNo := lvApprovLineRec."Line No.";
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetCurrency@17(lvCurrCode@1210190000 : Code[10]);
    BEGIN
      IF lvCurrCode = '' THEN BEGIN
        Currency.InitRoundingPrecision;
      END ELSE BEGIN
        Currency.GET(lvCurrCode);
        Currency.TESTFIELD("Unit-Amount Rounding Precision");
      END;
    END;

    [External]
    PROCEDURE CheckUpdateItemPrice@1210190012(InvoiceApprovalLine@1210190001 : Record 11012032);
    VAR
      Item@1210190000 : Record 27;
      CurrFactor@1210190002 : Decimal;
      Amnt@1210190003 : Decimal;
    BEGIN
      WITH InvoiceApprovalLine DO BEGIN
        //C037885.sn
        GLSetup.GET;
        PurchSetup.GET;
        //IF PurchSetup."Price Agreement" = PurchSetup."Price Agreement"::" " THEN EXIT;
        //C037885.en
        IF ("Item No." <> '') AND ("Trade Item" + "Basic Item" = '') THEN BEGIN
          Item.GET("Item No.");
          IF Item."Costing Method" <> Item."Costing Method"::Standard THEN BEGIN
            IF "Document Type" = "Document Type"::"Purchase Invoice" THEN BEGIN
              InvHeaderRec.GET("Document No.");
              CurrFactor := InvHeaderRec."Currency Factor";
              GetCurrency(InvHeaderRec."Currency Code");
            END ELSE BEGIN
              CredHeaderRec.GET("Document No.");
              CurrFactor := CredHeaderRec."Currency Factor";
              GetCurrency(CredHeaderRec."Currency Code");
            END;
            IF CurrFactor = 0 THEN CurrFactor := 1;
            //Convert amount invoice approval (in document currency) to company currency (item card)
            Amnt := ROUND(Price / CurrFactor, GLSetup."Unit-Amount Rounding Precision");
            Item.VALIDATE("Last Direct Cost", Amnt);
            Item.MODIFY(TRUE);
          END;
        END;
      END;
    END;

    [External]
    PROCEDURE UpdatePlantNoExtRentDate@1100485012();
    VAR
      PlantSetup@1100525000 : Record 11012550;
      lvPlantNoRec@1100485000 : Record 11012552;
      lvRentEntryRec@1100525004 : Record 11012535;
      lvSaveDate@1100525001 : Date;
      lvStartDate@1100525002 : Date;
      lvEndDate@1100525003 : Date;
    BEGIN
      //C008018.c  Function modified, must be the same as in C90 (same function)
      IF (ApprovLineRec."Receiving Company" = '') AND (ApprovLineRec."Ext. Rented Plant Invoiced to" <> 0D) AND
         (ApprovLineRec."Plant Type" <> '') AND (ApprovLineRec."Plant No." <> '') AND (ApprovLineRec."Cost Component Plant" <> '')
      THEN BEGIN
        PlantSetup.GET;
        IF ApprovLineRec."Cost Component Plant" <> PlantSetup."Cost Component Rent" THEN
          EXIT;
        IF lvPlantNoRec.GET(ApprovLineRec."Plant Type", ApprovLineRec."Plant No.") THEN BEGIN
          IF lvPlantNoRec.External THEN BEGIN
            lvSaveDate := lvPlantNoRec."Ext. Rented Invoiced to";
            lvRentEntryRec.GetExtRentPeriod(lvPlantNoRec.Vendor,lvPlantNoRec."Plant Type",lvPlantNoRec."No.",lvStartDate,lvEndDate);
            //* Enddate (removal date) is only filled if the plant is completely removed (bulk can be removed in parts)
            IF ApprovLineRec."Ext. Rented Plant Invoiced to" >= lvPlantNoRec."Ext. Rented Invoiced to" THEN BEGIN
              lvPlantNoRec."Ext. Rented Invoiced to" := ApprovLineRec."Ext. Rented Plant Invoiced to";
              IF (lvEndDate <> 0D) AND (lvPlantNoRec."Ext. Rented Invoiced to" > lvEndDate) THEN
                lvPlantNoRec."Ext. Rented Invoiced to" := lvEndDate;
            END ELSE BEGIN
              IF (lvEndDate <> 0D) AND (lvPlantNoRec."Ext. Rented Invoiced to" > lvEndDate) THEN
                lvPlantNoRec."Ext. Rented Invoiced to" := lvEndDate;
            END;
            IF lvPlantNoRec."Ext. Rented Invoiced to" <> lvSaveDate THEN
              lvPlantNoRec.MODIFY;
          END;
        END;
      END;
    END;

    [External]
    PROCEDURE PostComplementaryWIPCostProj@1100485006();
    VAR
      Vendor@1100528500 : Record 23;
      ProjectType@1100485003 : Record 11012009;
    BEGIN
      IF JobJnlLine."Total Cost (LCY)" = 0 THEN
        EXIT;

      IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Purchase Invoice" THEN BEGIN
        IF InvHeaderRec."Pay-to Vendor No." = '' THEN
          EXIT
        ELSE
          Vendor.GET(InvHeaderRec."Pay-to Vendor No.");
      END ELSE BEGIN
        IF CredHeaderRec."Pay-to Vendor No." = '' THEN
          EXIT
        ELSE
          Vendor.GET(CredHeaderRec."Pay-to Vendor No.");
      END;

      ProjRec.GET(ApprovLineRec."Project No.");
      ProjRec.TESTFIELD("Project Type");
      ProjectType.GET(ProjRec."Project Type");
      IF NOT ProjectType."Post Complementary Costs" THEN
        EXIT;

      //Post Debit Line
      CLEAR(ComplWIPPostingBuffer[1]);
      ComplWIPPostingBuffer[1]."G/L Account" := ProjectType.GetComplWIPCoverAcc(ApprovLineRec."Cost Type"-1,Vendor."Vendor Posting Group",'');
      ComplWIPPostingBuffer[1].Amount := -JobJnlLine."Total Cost (LCY)";

      IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Purchase Invoice" THEN
        ComplWIPPostingBuffer[1].Description := InvHeaderRec."Posting Description"
      ELSE
        ComplWIPPostingBuffer[1].Description := CredHeaderRec."Posting Description";

      ComplWIPPostingBuffer[1]."Job No." :=  ProjRec."No.";
      ComplWIPPostingBuffer[1]."Global Dimension 1 Code" := JobJnlLine."Shortcut Dimension 1 Code";
      ComplWIPPostingBuffer[1]."Global Dimension 2 Code" := JobJnlLine."Shortcut Dimension 2 Code";
      ComplWIPPostingBuffer[1]."Dimension Set ID" := JobJnlLine."Dimension Set ID";
      ComplWIPPostingBuffer[1]."VAT Prod. Posting Group" := FORMAT(ApprovLineRec."Posting Date");
      ComplWIPPostingBuffer[1]."Posting Date" := ApprovLineRec."Posting Date";
      UpdateComplWIPPostingBuffer;

      //Post Credit Line
      ComplWIPPostingBuffer[1]."G/L Account" := ProjectType.GetComplWipAcc(ApprovLineRec."Cost Type"-1,Vendor."Vendor Posting Group",'');
      ComplWIPPostingBuffer[1].Amount := JobJnlLine."Total Cost (LCY)";
      ComplWIPPostingBuffer[1]."Job No." := ProjRec."No.";
      UpdateComplWIPPostingBuffer;
    END;

    [External]
    PROCEDURE PostComplementaryWIPCostServ@1100485007();
    VAR
      Vendor@1100485002 : Record 23;
      ServiceType@1100528500 : Record 11012814;
    BEGIN
      IF ServJnlLine."Total Cost (LCY)" = 0 THEN
        EXIT;

      IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Purchase Invoice" THEN BEGIN
        IF InvHeaderRec."Pay-to Vendor No." = '' THEN
          EXIT
        ELSE
          Vendor.GET(InvHeaderRec."Pay-to Vendor No.");
      END ELSE BEGIN
        IF CredHeaderRec."Pay-to Vendor No." = '' THEN
          EXIT
        ELSE
          Vendor.GET(CredHeaderRec."Pay-to Vendor No.");
      END;

      ServOrderRec.GET(ApprovLineRec."Service Order No.");
      ServOrderRec.TESTFIELD("Service Type");
      ServiceType.GET(ServOrderRec."Service Type");
      IF NOT ServiceType."Post Complementary Costs" THEN
        EXIT;

      //Post Debit Line
      CLEAR(ComplWIPPostingBuffer[1]);
      ComplWIPPostingBuffer[1]."G/L Account" := ServiceType.GetComplWIPCoverAcc(ApprovLineRec."Cost Type"-1,Vendor."Vendor Posting Group",'',ServOrderRec);
      ComplWIPPostingBuffer[1].Amount := -ServJnlLine."Total Cost (LCY)";

      IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Purchase Invoice" THEN
        ComplWIPPostingBuffer[1].Description := InvHeaderRec."Posting Description"
      ELSE
        ComplWIPPostingBuffer[1].Description := CredHeaderRec."Posting Description";

      ComplWIPPostingBuffer[1]."Service Order No." := ServOrderRec."No.";
      ComplWIPPostingBuffer[1]."Service Contract No." := ServOrderRec."Service Contract No.";
      ComplWIPPostingBuffer[1]."Global Dimension 1 Code" := ServJnlLine."Shortcut Dimension 1 Code";
      ComplWIPPostingBuffer[1]."Global Dimension 2 Code" := ServJnlLine."Shortcut Dimension 2 Code";
      ComplWIPPostingBuffer[1]."Dimension Set ID" := ServJnlLine."Dimension Set ID";
      ComplWIPPostingBuffer[1]."VAT Prod. Posting Group" := FORMAT(ApprovLineRec."Posting Date");
      ComplWIPPostingBuffer[1]."Posting Date" := ApprovLineRec."Posting Date";
      UpdateComplWIPPostingBuffer;

      //Post Credit Line
      ComplWIPPostingBuffer[1]."G/L Account" := ServiceType.GetComplWipAcc(ApprovLineRec."Cost Type"-1,Vendor."Vendor Posting Group",'');
      ComplWIPPostingBuffer[1].Amount := ServJnlLine."Total Cost (LCY)";
      ComplWIPPostingBuffer[1]."Service Order No." := ServOrderRec."No.";
      ComplWIPPostingBuffer[1]."Service Contract No." := ServOrderRec."Service Contract No.";
      UpdateComplWIPPostingBuffer;
    END;

    [External]
    PROCEDURE UpdateComplWIPPostingBuffer@1100485004();
    BEGIN
      ComplWIPPostingBuffer[2] := ComplWIPPostingBuffer[1];
      IF ComplWIPPostingBuffer[2].FIND THEN BEGIN
        ComplWIPPostingBuffer[2].Amount :=
          ComplWIPPostingBuffer[2].Amount + ComplWIPPostingBuffer[1].Amount;
        ComplWIPPostingBuffer[2].MODIFY;
      END ELSE
        ComplWIPPostingBuffer[1].INSERT;
    END;

    [External]
    PROCEDURE CalcProFormaVat@1100485003(VAR lVATPerc@1100485002 : Decimal;VAR lVATBaseAmount@1100485003 : Decimal;VAR lVATAmount@1100485004 : Decimal;VAR VATPostingSetup@1100485005 : Record 325);
    VAR
      lVATBaseDiscount@1100525000 : Decimal;
    BEGIN
      VATPostingSetup.INIT;

      IF ApprovLineRec."VAT Bus. Posting Group" = '' THEN BEGIN
        //ApprovLineRec."VAT Bus. Posting Group" is introduced in 4.00-008-07.
        IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Credit Memo" THEN BEGIN
          IF NOT VATPostingSetup.GET(CredHeaderRec."VAT Bus. Posting Group", CredHeaderRec."VAT Prod. Posting Group") THEN
            VATPostingSetup.INIT;
          lVATBaseDiscount := CredHeaderRec."VAT Base Discount %";
        END ELSE BEGIN
          IF NOT VATPostingSetup.GET(InvHeaderRec."VAT Bus. Posting Group", InvHeaderRec."VAT Prod. Posting Group") THEN
            VATPostingSetup.INIT;
          lVATBaseDiscount := InvHeaderRec."VAT Base Discount %";
        END;
        lVATPerc := VATPostingSetup."VAT %";
        lVATBaseAmount := ROUND(
          ApprovLineRec.Amount * (1 - lVATBaseDiscount / 100),
          Currency."Amount Rounding Precision");
        lVATAmount := ROUND(lVATBaseAmount  * lVATPerc  / 100,Currency."Amount Rounding Precision");
      END ELSE BEGIN
        VATPostingSetup.GET(ApprovLineRec."VAT Bus. Posting Group", ApprovLineRec."VAT Prod. Posting Group");
        IF (NOT ApprovLineRec."Manually VAT Posting")  AND
           (ApprovLineRec."VAT Calculation Type" = ApprovLineRec."VAT Calculation Type"::"Reverse Charge VAT") THEN
        BEGIN
          lVATPerc := VATPostingSetup."VAT %";
          lVATBaseAmount := ApprovLineRec."VAT Base Amount";
          lVATAmount := ROUND(lVATBaseAmount * lVATPerc / 100, Currency."Amount Rounding Precision");
        END ELSE BEGIN
          lVATPerc := ApprovLineRec."VAT %";
          lVATBaseAmount := ApprovLineRec."VAT Base Amount";
          lVATAmount := ApprovLineRec."Amount Including VAT" - ApprovLineRec.Amount;
        END;
      END;

      IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Credit Memo" THEN BEGIN
        lVATBaseAmount := -1 * lVATBaseAmount;
        lVATAmount := -1 * lVATAmount;
      END;
    END;

    [External]
    PROCEDURE CheckBalAccountInvoiceLine@1100525003(IBalanceAccountNo@1100525002 : Code[20]);
    VAR
      lvPurchInvLineRec@1100525001 : Record 123;
      lvCredMemLineRec@1100525000 : Record 125;
    BEGIN
      BalanceAccountInvLineFound := FALSE;
      BalanceAccountInvLineDimSetId := 0;  //C015476

      IF IBalanceAccountNo = '' THEN
        EXIT;

      IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Purchase Invoice" THEN BEGIN
        lvPurchInvLineRec.SETRANGE("Document No.", ApprovLineRec."Document No.");
        lvPurchInvLineRec.SETRANGE("No.", IBalanceAccountNo);
        BalanceAccountInvLineFound := lvPurchInvLineRec.FINDFIRST;
        BalanceAccountInvLineDimSetId := lvPurchInvLineRec."Dimension Set ID";   //C015476
      END ELSE BEGIN
        lvCredMemLineRec.SETRANGE("Document No.", ApprovLineRec."Document No.");
        lvCredMemLineRec.SETRANGE("No.", IBalanceAccountNo);
        BalanceAccountInvLineFound := lvCredMemLineRec.FINDFIRST;
        BalanceAccountInvLineDimSetId := lvCredMemLineRec."Dimension Set ID";    //C015476
      END;
    END;

    [External]
    PROCEDURE SplitGenJnlPostInDebitCredit@1100525001();
    VAR
      lvGenJnlLineRec2@1100525001 : Record 81;
      ExpenseAllowanceSchemeEntry@1100528601 : Record 11020683;
      lvEntryNo@1100528600 : Integer;
    BEGIN
      lvGenJnlLineRec2 := GenJnlLine;
      lvGenJnlLineRec2."Bal. Account No." := '';
      SetGenJnlLineDeferralAmounts(lvGenJnlLineRec2);
      lvEntryNo := GenJnlPostLine.RunWithCheck(lvGenJnlLineRec2);

      IF ApprovLineRec."Expense Allowance Scheme" THEN BEGIN
        ExpenseAllowanceSchemeEntry."G/L Entry No." := lvEntryNo;
        IF ExpenseAllowanceSchemeEntry.INSERT THEN ;
      END;

      lvGenJnlLineRec2 := GenJnlLine;
      Counter := Counter + 1;
      lvGenJnlLineRec2."Line No." := Counter;
      lvGenJnlLineRec2."Account Type" := GenJnlLine."Account Type"::"G/L Account";
      lvGenJnlLineRec2."Account No." := GenJnlLine."Bal. Account No.";
      lvGenJnlLineRec2."Bal. Account No." := '';
      lvGenJnlLineRec2."Shortcut Dimension 1 Code" := '';
      lvGenJnlLineRec2."Shortcut Dimension 2 Code" := '';
      lvGenJnlLineRec2."Dimension Set ID" := 0;
      lvGenJnlLineRec2."Job No." := '';
      lvGenJnlLineRec2.Element := '';
      lvGenJnlLineRec2."Plot No." := '';
      lvGenJnlLineRec2."Extension Contract" := '';
      lvGenJnlLineRec2."Plant Type" := '';
      lvGenJnlLineRec2."Plant No." := '';
      lvGenJnlLineRec2."Cost Component Plant" := '';
      lvGenJnlLineRec2."Cost Component" := '';
      lvGenJnlLineRec2."Posting Group" := '';
      lvGenJnlLineRec2."Service Order No." := '';
      lvGenJnlLineRec2."Service Location No." := '';
      lvGenJnlLineRec2."Service Contract No." := '';
      lvGenJnlLineRec2."Service Category" := '';
      lvGenJnlLineRec2."Rental Unit" := '';
      lvGenJnlLineRec2."Item No." := '';
      lvGenJnlLineRec2."Basic Item" := '';
      lvGenJnlLineRec2."Trade Item" := '';
      lvGenJnlLineRec2.Manufacturer := '';
      lvGenJnlLineRec2."Vendor (Trade Item)" := '';
      lvGenJnlLineRec2."Purchase Action" := '';
      lvGenJnlLineRec2."Depreciation Book Code" := '';
      lvGenJnlLineRec2."FA Posting Type" := 0;
      lvGenJnlLineRec2."Retention Entry Type" := 0; //DP01406
      lvGenJnlLineRec2."Receiving Company" := '';  //C044514
      lvGenJnlLineRec2.Amount := -lvGenJnlLineRec2.Amount;
      lvGenJnlLineRec2."Amount (LCY)" := -lvGenJnlLineRec2."Amount (LCY)";
      lvGenJnlLineRec2."Source Currency Amount" := -lvGenJnlLineRec2."Source Currency Amount";

      //C015476 sn
      IF BalanceAccountInvLineFound AND (BalanceAccountInvLineDimSetId <> 0 )THEN BEGIN
        lvGenJnlLineRec2."Dimension Set ID" := BalanceAccountInvLineDimSetId;
        DimMgt.UpdateGlobalDimFromDimSetID(
          BalanceAccountInvLineDimSetId,
          lvGenJnlLineRec2."Shortcut Dimension 1 Code",
          lvGenJnlLineRec2."Shortcut Dimension 2 Code");
      END;
      //C015476 en
      // 4PSSE Itero.BSL 2013-09-18 BEGIN
      lvGenJnlLineRec2."Periodic Template Code" := '';
      lvGenJnlLineRec2."Periodic Starting Date" := 0D;
      // 4PSSE Itero.BSL 2013-09-18 END

      GenJnlPostLine.RunWithCheck(lvGenJnlLineRec2);
    END;

    [External]
    PROCEDURE CheckAndReadPreregisterdWip@1100525002();
    VAR
      lvPurchInvLineRec@1100525001 : Record 123;
      lvCredMemLineRec@1100525000 : Record 125;
    BEGIN
      DoPreRegisterWipContra := FALSE;
      TmpPreRegWipInvLineRec.RESET;
      TmpPreRegWipInvLineRec.DELETEALL;

      IF PurchSetup."Preregistration WIP Account" <> '' THEN BEGIN
        IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Purchase Invoice" THEN BEGIN
          lvPurchInvLineRec.SETRANGE("Document No.", ApprovLineRec."Document No.");
          lvPurchInvLineRec.SETRANGE("No.", PurchSetup."Preregistration WIP Account");
          lvPurchInvLineRec.SETFILTER("Job No.", '<>%1', '');  //* WIP only possible when project
          lvPurchInvLineRec.SETFILTER(Amount, '<>%1', 0);
          IF lvPurchInvLineRec.FINDSET(FALSE, FALSE) THEN BEGIN
            REPEAT
              TmpPreRegWipInvLineRec.TRANSFERFIELDS(lvPurchInvLineRec);
              TmpPreRegWipInvLineRec.INSERT;
            UNTIL lvPurchInvLineRec.NEXT = 0;
          END;
        END ELSE BEGIN
          lvCredMemLineRec.SETRANGE("Document No.", ApprovLineRec."Document No.");
          lvCredMemLineRec.SETRANGE("No.", PurchSetup."Preregistration WIP Account");
          lvCredMemLineRec.SETFILTER("Job No.", '<>%1', '');
          lvCredMemLineRec.SETFILTER(Amount, '<>%1', 0);
          IF lvCredMemLineRec.FINDSET(FALSE, FALSE) THEN BEGIN
            REPEAT
              TmpPreRegWipInvLineRec.TRANSFERFIELDS(lvCredMemLineRec);
              TmpPreRegWipInvLineRec.INSERT;
            UNTIL lvCredMemLineRec.NEXT = 0;
          END;
        END;
      END;

      TmpPreRegWipInvLineRec.RESET;
      IF TmpPreRegWipInvLineRec.FINDFIRST THEN
        DoPreRegisterWipContra := TRUE
      ELSE
        PreRegisteredWIP := FALSE;
    END;

    [External]
    PROCEDURE ContraPostPreRegisteredWIP@1100525004();
    VAR
      lvGenJnlLineRec@1100525000 : Record 81;
      lvGLAccRec@1100525003 : Record 15;
      lvText11012001@1100525004 : TextConst 'ENU=Contra posting;NOR=Kontrabokf›ring;SVE=Kontrabokf”ring';
    BEGIN
      TmpPreRegWipInvLineRec.RESET;
      IF TmpPreRegWipInvLineRec.FINDSET(TRUE,FALSE) THEN BEGIN
        lvGLAccRec.GET(PurchSetup."Preregistration WIP Account");
        REPEAT
          lvGenJnlLineRec.INIT;
          Counter := Counter + 1;
          lvGenJnlLineRec."Line No." := Counter;
          IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Purchase Invoice" THEN
            lvGenJnlLineRec."Document Type" := lvGenJnlLineRec."Document Type"::Invoice
          ELSE
            lvGenJnlLineRec."Document Type" := lvGenJnlLineRec."Document Type"::"Credit Memo";
          lvGenJnlLineRec."Source Code" := GLJournTemplRec."Source Code";
          lvGenJnlLineRec."Reason Code" := GLJournTemplRec."Reason Code";
          lvGenJnlLineRec."Document No." := ApprovLineRec."Document No.";
          lvGenJnlLineRec.Description := COPYSTR(lvText11012001 + ' ' + lvGLAccRec.Name, 1, MAXSTRLEN(lvGenJnlLineRec.Description));
          lvGenJnlLineRec."Job No." := TmpPreRegWipInvLineRec."Job No.";
          lvGenJnlLineRec."Shortcut Dimension 1 Code" := TmpPreRegWipInvLineRec."Shortcut Dimension 1 Code";
          lvGenJnlLineRec."Shortcut Dimension 2 Code" := TmpPreRegWipInvLineRec."Shortcut Dimension 2 Code";
          lvGenJnlLineRec."Dimension Set ID" := TmpPreRegWipInvLineRec."Dimension Set ID";
          lvGenJnlLineRec."Journal Template Name" := ApprovLineRec."Journal Template Name";
          lvGenJnlLineRec."Posting Date" := ApprovLineRec."Posting Date";
          lvGenJnlLineRec."Document Date" := GenJnlLine."Document Date";
          lvGenJnlLineRec."Account Type" := lvGenJnlLineRec."Account Type"::"G/L Account";
          lvGenJnlLineRec."Account No." := PurchSetup."Preregistration WIP Account";
          lvGenJnlLineRec."Posting Group" := TmpPreRegWipInvLineRec."Posting Group";
          lvGenJnlLineRec.Amount := TmpPreRegWipInvLineRec.Amount;
          IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Purchase Invoice" THEN
            lvGenJnlLineRec.Amount := lvGenJnlLineRec.Amount * -1;
          lvGenJnlLineRec."System-Created Entry" := TRUE;
          lvGenJnlLineRec."Currency Code" := ApprCurrencyCode;
          IF (lvGenJnlLineRec."Currency Code" = '') OR (lvGenJnlLineRec.Amount = 0) THEN
            lvGenJnlLineRec."Amount (LCY)" := lvGenJnlLineRec.Amount
          ELSE
            lvGenJnlLineRec."Amount (LCY)" := ROUND(
              CurrencyExchRate.ExchangeAmtFCYToLCY(
                1, ApprProjectNo, lvGenJnlLineRec."Posting Date", ApprCurrencyCode,
                lvGenJnlLineRec.Amount, ApprovCurrencyFactor, FALSE));

          GenJnlPostLine.RunWithCheck(lvGenJnlLineRec);
          TmpPreRegWipInvLineRec.DELETE;
        UNTIL TmpPreRegWipInvLineRec.NEXT = 0;
      END;
      DoPreRegisterWipContra := FALSE;
    END;

    [External]
    PROCEDURE GetInvoiceCounterOk@1100485015() : Integer;
    BEGIN
      EXIT("Invoice Counter Ok");
    END;

    [External]
    PROCEDURE PrintInvApproval@1100485013();
    BEGIN
      IF GLReg.GET(GLRegNo) THEN BEGIN
        IF BatchRun THEN
          EXIT;
        GLReg.SETRECFILTER;
        REPORT.RUN(GLJournTemplRec."Posting Report ID",FALSE,FALSE,GLReg);
      END;
    END;

    [External]
    PROCEDURE GetGLRegNoAndReportID@1100525007(VAR GLRegNumber@1100525000 : Integer;VAR ReportID@1100525001 : Integer) : Boolean;
    BEGIN
      GLRegNumber := 0;
      ReportID := 0;
      IF gPrint AND BatchRun THEN BEGIN
        GLRegNumber := GLRegNo;
        ReportID := GLJournTemplRec."Posting Report ID";
      END;
      EXIT((GLRegNumber > 0) AND (ReportID > 0));
    END;

    [External]
    PROCEDURE IsTextLine@1100485005() : Boolean;
    BEGIN
      WITH ApprovLineRec DO
        EXIT(
          (Quantity = 0) AND (Amount = 0) AND ("Shortcut Dimension 2 Code" = '') AND  ("Account No." = '') AND
          ("Project No." = '') AND ("Service Order No." = '') AND ("Plant Type" = ''));
    END;

    LOCAL PROCEDURE UpdateOnHoldOfInvHeaderRec@1100525006(OnHoldCode@1100525000 : Code[3]);
    BEGIN
      InvHeaderRec.VALIDATE("On Hold", OnHoldCode);
      InvHeaderRec.MODIFY;
    END;

    LOCAL PROCEDURE UpdateOnHoldOfVendLedgerEntry@1100525009(OnHoldCode@1100525000 : Code[3]);
    BEGIN
      VendLedgerEntry.SETCURRENTKEY("Document No.");
      VendLedgerEntry.SETRANGE("Vendor No.", InvHeaderRec."Pay-to Vendor No.");
      VendLedgerEntry.SETRANGE("Document No.", InvHeaderRec."No.");
      VendLedgerEntry.SETRANGE("Document Type", VendLedgerEntry."Document Type"::Invoice);
      IF VendLedgerEntry.FINDFIRST THEN BEGIN
        VendLedgerEntry.VALIDATE("On Hold", OnHoldCode);
        VendLedgerEntry.MODIFY;
      END;
    END;

    [External]
    PROCEDURE CheckIntrastat@1210190020() : Boolean;
    VAR
      CountryRegion@1210190000 : Record 9;
      IntraStatCodeOrig@1210190001 : Code[10];
      IntraStatCodeDest@1210190002 : Code[10];
    BEGIN
      IF gDocTypeOpt = gDocTypeOpt::"Purchase Invoice" THEN BEGIN
        IF (InvHeaderRec."Country/Region of Origin" = '') OR (InvHeaderRec."Country/Region of Destination" = '') THEN
          EXIT(FALSE);

        IF InvHeaderRec."Country/Region of Origin" = InvHeaderRec."Country/Region of Destination" THEN
          EXIT(FALSE);

        IntraStatCodeOrig := '';
        IntraStatCodeDest := '';
        IF CountryRegion.GET(InvHeaderRec."Country/Region of Origin") THEN
          IntraStatCodeOrig := CountryRegion."Intrastat Code";
        IF CountryRegion.GET(InvHeaderRec."Country/Region of Destination") THEN
          IntraStatCodeDest := CountryRegion."Intrastat Code";

      END ELSE BEGIN
        IF (CredHeaderRec."Country/Region of Origin" = '') OR (CredHeaderRec."Country/Region of Destination" = '') THEN
          EXIT(FALSE);

        IF CredHeaderRec."Country/Region of Origin" = CredHeaderRec."Country/Region of Destination" THEN
          EXIT(FALSE);

        IntraStatCodeOrig := '';
        IntraStatCodeDest := '';
        IF CountryRegion.GET(CredHeaderRec."Country/Region of Origin") THEN
          IntraStatCodeOrig := CountryRegion."Intrastat Code";
        IF CountryRegion.GET(CredHeaderRec."Country/Region of Destination") THEN
          IntraStatCodeDest := CountryRegion."Intrastat Code";
      END;

      IF (IntraStatCodeOrig = '') OR (IntraStatCodeDest = '') THEN
        EXIT(FALSE);
      IF (IntraStatCodeOrig <> IntraStatCodeDest) THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE GetCommentForProjEntry@1100409002(InvApprLine@1100409000 : Record 11012032;MaxLen@1100409001 : Integer) : Text[100];
    VAR
      PurchCommentLine@1100409002 : Record 43;
      PurchReceiptLine@1100409003 : Record 121;
      PurchOrderLine@1100409004 : Record 39;
    BEGIN
      // In Approval line has no field Comment or Comment Lines, so determine comment from order line (via receipt No).
      IF InvApprLine."Receipt No." = '' THEN
        EXIT('');
      IF NOT PurchReceiptLine.GET(InvApprLine."Receipt No.", InvApprLine."Receipt Line No.") THEN
        EXIT('');
      IF PurchReceiptLine."Order No." = '' THEN
        EXIT('');
      IF NOT PurchOrderLine.GET(
        PurchOrderLine."Document Type"::Order, PurchReceiptLine."Order No.", PurchReceiptLine."Order Line No.")
      THEN
        EXIT('');

      PurchCommentLine.SETRANGE("Document Type", PurchCommentLine."Document Type"::Order);
      PurchCommentLine.SETRANGE("No.", PurchOrderLine."Document No.");
      PurchCommentLine.SETRANGE("Document Line No.", PurchOrderLine."Line No.");
      PurchCommentLine.SETFILTER(Comment, '<>%1', '');
      IF PurchCommentLine.FINDFIRST THEN
        EXIT(COPYSTR(PurchCommentLine.Comment, 1, MaxLen));
      EXIT('');
    END;

    [External]
    PROCEDURE CheckApprovalLineDMS@1100525010(Rec@1100525000 : Record 11012032);
    BEGIN
      ApprovLineRec.COPY(Rec);
      CheckApprovalLine();
    END;

    LOCAL PROCEDURE SaveInvoiceSpecification@33(VAR TempInvoicingSpecification@1000 : TEMPORARY Record 336);
    BEGIN
      //C004829.n  Copied from Cu90
      TempInvoicingSpecification.RESET;
      IF TempInvoicingSpecification.FINDSET THEN BEGIN
        REPEAT
          TempInvoicingSpecification."Quantity Invoiced (Base)" += TempInvoicingSpecification."Qty. to Invoice (Base)";
          TempTrackingSpecification := TempInvoicingSpecification;
          TempTrackingSpecification."Buffer Status" := TempTrackingSpecification."Buffer Status"::MODIFY;
          IF NOT (TempTrackingSpecification.INSERT) THEN BEGIN
            TempTrackingSpecification.GET(TempInvoicingSpecification."Entry No.");
            TempTrackingSpecification."Qty. to Invoice (Base)" += TempInvoicingSpecification."Qty. to Invoice (Base)";
            IF TempInvoicingSpecification."Qty. to Invoice (Base)" = TempInvoicingSpecification."Quantity Invoiced (Base)" THEN
              TempTrackingSpecification."Quantity Invoiced (Base)" += TempInvoicingSpecification."Quantity Invoiced (Base)"
            ELSE
              TempTrackingSpecification."Quantity Invoiced (Base)" += TempInvoicingSpecification."Qty. to Invoice (Base)";
            TempTrackingSpecification."Qty. to Invoice" += TempInvoicingSpecification."Qty. to Invoice";
            TempTrackingSpecification.MODIFY;
          END;
        UNTIL TempInvoicingSpecification.NEXT = 0;
        TempInvoicingSpecification.DELETEALL;
      END;
    END;

    LOCAL PROCEDURE InsertTrackingSpecification@35();
    VAR
      TrackingSpecification@1000 : Record 336;
    BEGIN
      //C004829.n  Copied from Cu90
      TempTrackingSpecification.RESET;
      IF TempTrackingSpecification.FINDSET THEN BEGIN
        REPEAT
          TrackingSpecification := TempTrackingSpecification;
          TrackingSpecification."Buffer Status" := 0;
          TrackingSpecification.InitQtyToShip;
          TrackingSpecification.Correction := FALSE;
          TrackingSpecification."Quantity actual Handled (Base)" := 0;
          IF TempTrackingSpecification."Buffer Status" = TempTrackingSpecification."Buffer Status"::MODIFY THEN
            TrackingSpecification.MODIFY
          ELSE
            TrackingSpecification.INSERT;
        UNTIL TempTrackingSpecification.NEXT = 0;
        TempTrackingSpecification.DELETEALL;
      END;

      ReservePurchInvApprLine.UpdateItemTrackingAfterPosting(ApprovLineRec);
    END;

    [External]
    PROCEDURE InsertNSItemTrackingRelation@1100528500(InvApprLine@1100528501 : Record 11012032;RowID@1100528503 : Text[100]);
    VAR
      NSReservationEntry@1100528502 : Record 11071900;
      NSItemTrackingRelation@1100528504 : Record 11071905;
      NSItemTrackingEntry@1100525000 : Record 11071902;
      Item@1100525002 : Record 27;
      PurchPost@1100525001 : Codeunit 90;
    BEGIN
      //C004829.n  Copied from Cu90
      NSReservationEntry.SETCURRENTKEY(
        "Source ID","Source Ref. No.","Source Type","Source Subtype");
      NSReservationEntry.SETRANGE("Source ID", InvApprLine."Document No.");
      NSReservationEntry.SETRANGE("Source Ref. No.", InvApprLine."Line No.");
      NSReservationEntry.SETRANGE("Source Type", DATABASE::"Invoice Approval Line");
      NSReservationEntry.SETRANGE("Source Subtype", InvApprLine."Document Type");
      IF NSReservationEntry.FINDSET(TRUE) THEN
        REPEAT
          IF NSReservationEntry."Item Ledger Entry No." <> 0 THEN BEGIN
      //C016406.sn
            IF NSItemTrackingRelation.GET(NSReservationEntry."Item Ledger Entry No.") THEN BEGIN
              //Must be second invoice. Adjust the first and create new
              NSItemTrackingEntry.GET(NSReservationEntry."Item Ledger Entry No.");
              NSItemTrackingEntry.Quantity -= NSReservationEntry."Qty. to Handle (Base)";
              NSItemTrackingEntry."Remaining Quantity" -= NSReservationEntry."Qty. to Handle (Base)";
              NSItemTrackingEntry.MODIFY;

              Item.GET(InvApprLine."Item No.");
              NSReservationEntry."Item Ledger Entry No." := 0;
              PurchRcptHeader.GET(PurchRcptLine."Document No.");
              PurchPost.PostNSItemTrackingEntry(FALSE,NSReservationEntry,PurchRcptLine,Item,PurchRcptHeader."Posting Date",TRUE);
            END;
      //C016406.en
            NSItemTrackingRelation."Item Tracking Entry No." := NSReservationEntry."Item Ledger Entry No.";
            NSItemTrackingRelation."Source RowId" := RowID;
            NSItemTrackingRelation."Project Ledger Entry No." := JobLedgEntryNo;
            NSItemTrackingRelation."Service Ledger Entry No." := ServLedgEntryNo;
            NSItemTrackingRelation.INSERT;
            NSReservationEntry.DELETE;
          END;
        UNTIL NSReservationEntry.NEXT = 0;
    END;

    [External]
    PROCEDURE UpdateTempValueEntryRelation@1100525011(RowIDApprovalLine@1100525000 : Text;RowIDPosted@1100525001 : Text);
    BEGIN
      //C008671
      TempValueEntryRelation.SETRANGE("Source RowId", RowIDApprovalLine);
      TempValueEntryRelation.MODIFYALL("Source RowId", RowIDPosted);
    END;

    LOCAL PROCEDURE InsertValueEntryRelation@40();
    VAR
      ValueEntryRelation@1000 : Record 6508;
    BEGIN
      //C008671
      TempValueEntryRelation.RESET;
      IF TempValueEntryRelation.FINDSET THEN BEGIN
        REPEAT
          ValueEntryRelation := TempValueEntryRelation;
          ValueEntryRelation.INSERT;
        UNTIL TempValueEntryRelation.NEXT = 0;
        TempValueEntryRelation.DELETEALL;
      END;
    END;

    LOCAL PROCEDURE IsDocumentCaptureActive@1100528203() : Boolean;
    VAR
      FPSLicenseManagement@1100527400 : Codeunit 11229289;
    BEGIN
      IF NOT DCSetupRead THEN BEGIN
        IF NOT FPSLicenseManagement.LicenseAndReadPermissionForTable(DocumentCaptureSetup) THEN
          EXIT(FALSE);
        IF DocumentCaptureSetup.GET THEN;
        DCSetupRead := TRUE;
      END;
      EXIT(DocumentCaptureSetup."Document Nos." <> '');
    END;

    LOCAL PROCEDURE PostCurrencyFluctuation@1100525000();
    VAR
      GLEntry@1100525000 : Record 17;
      AmountToPost@1100525001 : Decimal;
    BEGIN
      //C043197
      IF ApprCurrencyCode = '' THEN
        EXIT;

      GLEntry.SETRANGE("Document No.", ApprovLineRec."Document No.");
      GLEntry.SETRANGE("G/L Account No.", GLJournTemplRec."Bal. Account No.");
      GLEntry.CALCSUMS(Amount);
      AmountToPost := -GLEntry.Amount;
      IF AmountToPost = 0 THEN
        EXIT;

      GLEntry.FINDFIRST;

      WITH GenJnlLine DO BEGIN
        InitNewLine(
          ApprovLineRec."Posting Date",0D,GLEntry.Description,
          GLEntry."Global Dimension 1 Code",GLEntry."Global Dimension 2 Code",
          GLEntry."Dimension Set ID",'');

        IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Purchase Invoice" THEN BEGIN
          "Document Type" := "Document Type"::Invoice;
          "Document Date" := InvHeaderRec."Document Date";
          GetCurrency(InvHeaderRec."Currency Code");
        END ELSE BEGIN
          "Document Type" := "Document Type"::"Credit Memo";
          "Document Date" := CredHeaderRec."Document Date";
          GetCurrency(CredHeaderRec."Currency Code");
        END;

        "Source Code" := GLJournTemplRec."Source Code";
        IF ApprovLineRec."Reason Code" <> '' THEN
          "Reason Code" := ApprovLineRec."Reason Code"
        ELSE
          "Reason Code" := GLJournTemplRec."Reason Code";
        "Document No." := ApprovLineRec."Document No.";
        "Account Type" := "Account Type"::"G/L Account";
        "Account No." := GLJournTemplRec."Bal. Account No.";
        "System-Created Entry" := TRUE;
        Amount := AmountToPost;
        "Source Currency Amount" := AmountToPost;
        "Amount (LCY)" := AmountToPost;
        "Bal. Account Type" := "Bal. Account Type"::"G/L Account";

        IF AmountToPost > 0 THEN BEGIN
          Currency.TESTFIELD("Unrealized Gains Acc.");
          "Bal. Account No." := Currency."Unrealized Gains Acc."
        END ELSE BEGIN
          Currency.TESTFIELD("Unrealized Losses Acc.");
          "Bal. Account No." := Currency."Unrealized Losses Acc."
        END;

        GenJnlPostLine.RunWithCheck(GenJnlLine);
      END;
    END;

    LOCAL PROCEDURE HandleDeferrals@1100529602();
    VAR
      GenJournalLineLoc@1100529603 : Record 81;
      DeferralAccount@1100529600 : Code[20];
      OriginalDeferralAmount@1100529601 : Decimal;
    BEGIN
      TempDeferralHeader.DELETEALL;
      TempDeferralLine.DELETEALL;
      PostedDeferralAmount := 0;
      PostedDeferralAmountLCY := 0;

      IF ApprovLineRec."Deferral Code" = '' THEN
        EXIT;

      OriginalDeferralAmount := ApprovLineRec.GetDeferralAmount;
      IF OriginalDeferralAmount = 0 THEN
        EXIT;
      IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Credit Memo" THEN
        OriginalDeferralAmount := - OriginalDeferralAmount;

      CalcDeferralAmounts;
      FillDeferralPostingBuffer(DeferralAccount);
      IF PostedDeferralAmount = 0 THEN
        EXIT;

      IF OriginalDeferralAmount = PostedDeferralAmount THEN BEGIN
        GenJnlLine."Deferral Code" := ApprovLineRec."Deferral Code";
        GenJnlLine."Deferral Line No." := ApprovLineRec."Line No.";
        GenJnlLine."Account No." := DeferralAccount;
        PostedDeferralAmount := 0;
        PostedDeferralAmountLCY := 0;
      END ELSE BEGIN
        GenJournalLineLoc := GenJnlLine;
        GenJournalLineLoc."Deferral Code" := ApprovLineRec."Deferral Code";
        GenJournalLineLoc."Deferral Line No." := ApprovLineRec."Line No.";
        GenJournalLineLoc."Account No." := DeferralAccount;
        GenJournalLineLoc.Amount := PostedDeferralAmount;
        GenJournalLineLoc."Amount (LCY)" := PostedDeferralAmountLCY;
        GenJournalLineLoc."Bal. Account No." := '';
        GenJnlPostLine.RunWithCheck(GenJournalLineLoc);
      END;
    END;

    LOCAL PROCEDURE CalcDeferralAmounts@173();
    VAR
      HeaderLoc@1100529600 : Record 122;
      DeferralHeader@1004 : Record 1701;
      DeferralLine@1005 : Record 1702;
      TotalAmountLCY@1009 : Decimal;
      TotalAmount@1010 : Decimal;
      TotalDeferralCount@1007 : Integer;
      DeferralCount@1008 : Integer;
      UseDate@1001 : Date;
    BEGIN
      IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Purchase Invoice" THEN BEGIN
        HeaderLoc."Currency Code" := InvHeaderRec."Currency Code";
        HeaderLoc."Currency Factor" := InvHeaderRec."Currency Factor";
      END ELSE BEGIN
        HeaderLoc."Currency Code" := CredHeaderRec."Currency Code";
        HeaderLoc."Currency Factor" := CredHeaderRec."Currency Factor";
      END;

      IF ApprovLineRec."Posting Date" = 0D THEN
        UseDate := WORKDATE
      ELSE
        UseDate := ApprovLineRec."Posting Date";

      IF DeferralHeader.GET(
           DeferralUtilities.GetPurchDeferralDocType, ApprovLineRec."Journal Template Name", '',
           ApprovLineRec."Document Type", ApprovLineRec."Document No.", ApprovLineRec."Line No.")
      THEN BEGIN
        TempDeferralHeader := DeferralHeader;
        IF (TempDeferralHeader."Amount to Defer" = 0) OR (HeaderLoc."Currency Code" = '') THEN
          TempDeferralHeader."Amount to Defer (LCY)" := TempDeferralHeader."Amount to Defer"
        ELSE
          TempDeferralHeader."Amount to Defer (LCY)" :=
            ROUND(
              CurrencyExchRate.ExchangeAmtFCYToLCY(
                1, ApprovLineRec."Project No.",
                UseDate, HeaderLoc."Currency Code",
                TempDeferralHeader."Amount to Defer", HeaderLoc."Currency Factor", FALSE));
        TempDeferralHeader.INSERT;

        WITH DeferralLine DO BEGIN
          SETRANGE("Deferral Doc. Type", DeferralUtilities.GetPurchDeferralDocType);
          SETRANGE("Gen. Jnl. Template Name", ApprovLineRec."Journal Template Name");
          SETRANGE("Gen. Jnl. Batch Name", '');
          SETRANGE("Document Type", ApprovLineRec."Document Type");
          SETRANGE("Document No.", ApprovLineRec."Document No.");
          SETRANGE("Line No.", ApprovLineRec."Line No.");
          IF FINDSET THEN BEGIN
            TotalDeferralCount := COUNT;
            REPEAT
              TempDeferralLine.INIT;
              TempDeferralLine := DeferralLine;
              DeferralCount := DeferralCount + 1;

              IF DeferralCount = TotalDeferralCount THEN BEGIN
                TempDeferralLine.Amount := TempDeferralHeader."Amount to Defer" - TotalAmount;
                TempDeferralLine."Amount (LCY)" := TempDeferralHeader."Amount to Defer (LCY)" - TotalAmountLCY;
              END ELSE BEGIN
                IF (TempDeferralHeader."Amount to Defer" = 0) OR (HeaderLoc."Currency Code" = '') THEN
                  TempDeferralLine."Amount (LCY)" := TempDeferralLine.Amount
                ELSE
                  TempDeferralLine."Amount (LCY)" :=
                    ROUND(
                      CurrencyExchRate.ExchangeAmtFCYToLCY(
                        1, ApprovLineRec."Project No.",
                        UseDate, HeaderLoc."Currency Code",
                        TempDeferralLine.Amount, HeaderLoc."Currency Factor", FALSE));
                TotalAmount := TotalAmount + TempDeferralLine.Amount;
                TotalAmountLCY := TotalAmountLCY + TempDeferralLine."Amount (LCY)";
              END;
              TempDeferralLine.INSERT;
            UNTIL NEXT = 0;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE FillDeferralPostingBuffer@1100529601(VAR DeferralAccount@1003 : Code[20]);
    VAR
      DeferralTemplate@1007 : Record 1700;
    BEGIN
      PostedDeferralAmount := 0;
      PostedDeferralAmountLCY := 0;
      IF ApprovLineRec."Deferral Code" = '' THEN
        EXIT;

      DeferralTemplate.GET(ApprovLineRec."Deferral Code");
      DeferralTemplate.TESTFIELD("Deferral Account");
      DeferralAccount := DeferralTemplate."Deferral Account";

      IF TempDeferralHeader.GET(DeferralUtilities.GetPurchDeferralDocType, ApprovLineRec."Journal Template Name", '',
            ApprovLineRec."Document Type", ApprovLineRec."Document No.", ApprovLineRec."Line No.")
      THEN BEGIN
        IF TempDeferralHeader."Amount to Defer" <> 0 THEN BEGIN
          TempDeferralLine.SETRANGE("Deferral Doc. Type", DeferralUtilities.GetPurchDeferralDocType);
          TempDeferralLine.SETRANGE("Gen. Jnl. Template Name", ApprovLineRec."Journal Template Name");
          TempDeferralLine.SETRANGE("Gen. Jnl. Batch Name", '');
          TempDeferralLine.SETRANGE("Document Type", ApprovLineRec."Document Type");
          TempDeferralLine.SETRANGE("Document No.", ApprovLineRec."Document No.");
          TempDeferralLine.SETRANGE("Line No.", ApprovLineRec."Line No.");

          IF TempDeferralLine.FINDSET THEN
            REPEAT
              IF (TempDeferralLine."Amount (LCY)" <> 0) OR (TempDeferralLine.Amount <> 0) THEN BEGIN
                DeferralPostBuffer[1].PrepareInvoiceApproval(ApprovLineRec);
                DeferralPostBuffer[1].Amount := TempDeferralLine.Amount;
                DeferralPostBuffer[1]."Amount (LCY)" := TempDeferralLine."Amount (LCY)";
                DeferralPostBuffer[1]."Sales/Purch Amount (LCY)" := TempDeferralLine."Amount (LCY)";
                DeferralPostBuffer[1]."Sales/Purch Amount" := TempDeferralLine.Amount;
                IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Credit Memo" THEN
                  DeferralPostBuffer[1].ReverseAmounts;
                DeferralPostBuffer[1]."G/L Account" := ApprovLineRec."Account No.";
                DeferralPostBuffer[1]."Deferral Account" := DeferralAccount;
                DeferralPostBuffer[1]."Posting Date" := TempDeferralLine."Posting Date";
                DeferralPostBuffer[1].Description := TempDeferralLine.Description;
                DeferralPostBuffer[1]."Period Description" := DeferralTemplate."Period Description";
                DeferralPostBuffer[1]."Deferral Line No." := ApprovLineRec."Line No.";
                DeferralPostBuffer[1]."Dimension Set ID" := ApprovLineRec."Dimension Set ID";
                DeferralPostBuffer[1]."Global Dimension 1 Code" := ApprovLineRec."Shortcut Dimension 1 Code";
                DeferralPostBuffer[1]."Global Dimension 2 Code" := ApprovLineRec."Shortcut Dimension 2 Code";
                UpdDeferralPostBuffer;
                PostedDeferralAmount += DeferralPostBuffer[1].Amount;
                PostedDeferralAmountLCY += DeferralPostBuffer[1]."Amount (LCY)";
              END ELSE
                ERROR(Text049, ApprovLineRec."Account No.", ApprovLineRec."Deferral Code");
            UNTIL TempDeferralLine.NEXT = 0

          ELSE
            ERROR(Text048, ApprovLineRec."Account No.", ApprovLineRec."Deferral Code");
        END ELSE
          ERROR(Text048, ApprovLineRec."Account No.", ApprovLineRec."Deferral Code");
      END ELSE
        ERROR(Text048, ApprovLineRec."Account No.", ApprovLineRec."Deferral Code");
    END;

    LOCAL PROCEDURE UpdDeferralPostBuffer@124();
    BEGIN
      DeferralPostBuffer[2] := DeferralPostBuffer[1];
      IF DeferralPostBuffer[2].FIND THEN BEGIN
        DeferralPostBuffer[2].Amount += DeferralPostBuffer[1].Amount;
        DeferralPostBuffer[2]."Amount (LCY)" += DeferralPostBuffer[1]."Amount (LCY)";
        DeferralPostBuffer[2]."Sales/Purch Amount" += DeferralPostBuffer[1]."Sales/Purch Amount";
        DeferralPostBuffer[2]."Sales/Purch Amount (LCY)" += DeferralPostBuffer[1]."Sales/Purch Amount (LCY)";

        IF NOT DeferralPostBuffer[1]."System-Created Entry" THEN
          DeferralPostBuffer[2]."System-Created Entry" := FALSE;
        IF IsCombinedDeferralZero THEN
          DeferralPostBuffer[2].DELETE
        ELSE
          DeferralPostBuffer[2].MODIFY;
      END ELSE
        DeferralPostBuffer[1].INSERT;
    END;

    LOCAL PROCEDURE IsCombinedDeferralZero@130() : Boolean;
    BEGIN
      IF (DeferralPostBuffer[2].Amount = 0) AND (DeferralPostBuffer[2]."Amount (LCY)" = 0) AND
         (DeferralPostBuffer[2]."Sales/Purch Amount" = 0) AND (DeferralPostBuffer[2]."Sales/Purch Amount (LCY)" = 0)
      THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE CreatePostedDeferralScheduleFromPurchDoc@169(NewDocumentType@1007 : Integer;NewDocumentNo@1003 : Code[20];NewLineNo@1002 : Integer;PostingDate@1000 : Date;BuyFromVendNo@1100529600 : Code[20]);
    VAR
      PostedDeferralHeader@1006 : Record 1704;
      PostedDeferralLine@1005 : Record 1705;
      DeferralTemplate@1004 : Record 1700;
      DeferralAccount@1001 : Code[20];
    BEGIN
      IF ApprovLineRec."Deferral Code" = '' THEN
        EXIT;

      IF DeferralTemplate.GET(ApprovLineRec."Deferral Code") THEN
        DeferralAccount := DeferralTemplate."Deferral Account";

      IF TempDeferralHeader.GET(
           DeferralUtilities.GetPurchDeferralDocType, ApprovLineRec."Journal Template Name", '',
           ApprovLineRec."Document Type", ApprovLineRec."Document No.", ApprovLineRec."Line No.")
      THEN BEGIN
        PostedDeferralHeader.InitFromDeferralHeader(TempDeferralHeader, '', '', NewDocumentType,
          NewDocumentNo, NewLineNo, DeferralAccount, BuyFromVendNo, PostingDate);
        WITH TempDeferralLine DO BEGIN
          SETRANGE("Deferral Doc. Type", DeferralUtilities.GetPurchDeferralDocType);
          SETRANGE("Gen. Jnl. Template Name", ApprovLineRec."Journal Template Name");
          SETRANGE("Gen. Jnl. Batch Name", '');
          SETRANGE("Document Type", ApprovLineRec."Document Type");
          SETRANGE("Document No.", ApprovLineRec."Document No.");
          SETRANGE("Line No.", ApprovLineRec."Line No.");
          IF FINDSET THEN
            REPEAT
              PostedDeferralLine.InitFromDeferralLine(
                TempDeferralLine, '', '', NewDocumentType, NewDocumentNo, NewLineNo, DeferralAccount);
            UNTIL NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE SetGenJnlLineDeferralAmounts@1100529614(VAR GenJournalLineLoc@1100529600 : Record 81);
    BEGIN
      IF PostedDeferralAmount <> 0 THEN BEGIN
        GenJournalLineLoc.Amount -= PostedDeferralAmount;
        GenJournalLineLoc."Amount (LCY)" -= PostedDeferralAmountLCY;
        PostedDeferralAmount := 0;
        PostedDeferralAmountLCY := 0;
      END;
    END;

    PROCEDURE PrePostRoundingOff@1100288000(pPurchInvHeader@1100288000 : Record 122);
    VAR
      InvApprovalLine@1100288001 : Record 11012032;
      BiggestLineNo@1100288002 : Integer;
    BEGIN
      //140124 Apply Rounding
      PurchSetup.GET;
      IF NOT PurchSetup."Approval Invoice Rounding" THEN
        EXIT;

      GetGLSetup.GET;
      WITH pPurchInvHeader DO
        IF "Currency Code" = '' THEN
          Currency.InitRoundingPrecision
        ELSE BEGIN
          Currency.GET("Currency Code");
          Currency.TESTFIELD("Amount Rounding Precision");
        END;

      RoundingLineInserted := FALSE;
      LastLineRetrieved := FALSE;
      CLEAR(TotalApprovLine);

      InvApprovalLine.SETRANGE("Journal Template Name",pPurchInvHeader."Journal Template");
      InvApprovalLine.SETRANGE("Document Type",InvApprovalLine."Document Type"::"Purchase Invoice");
      InvApprovalLine.SETRANGE("Document No.",pPurchInvHeader."No.");
      IF InvApprovalLine.FINDLAST THEN
        BiggestLineNo := InvApprovalLine."Line No.";
      IF InvApprovalLine.FIND('-') THEN
      REPEAT
        IF RoundingLineInserted THEN
          LastLineRetrieved := TRUE
        ELSE BEGIN
          TotalApprovLine.Amount += InvApprovalLine.Amount; //Including VAT";
          InvAppLine.GET(InvApprovalLine."Journal Template Name",InvApprovalLine."Document Type",
          InvApprovalLine."Document No.",InvApprovalLine."Line No.");

          IF InvApprovalLine.NEXT = 0 THEN
            LastLineRetrieved := TRUE;

          IF LastLineRetrieved THEN BEGIN
            InvAppLine."Line No." := BiggestLineNo;
            InvoiceRounding(pPurchInvHeader);
            IF InvAppLine."Line No." <> BiggestLineNo THEN BEGIN
              GLAcc.GET(InvAppLine."Account No.");
              InvAppLine.Description := GLAcc.Name;
              InvAppLine.INSERT;
            END;
          END;
        END;
      UNTIL LastLineRetrieved;
      CLEAR(TotalApprovLine);
    END;

    LOCAL PROCEDURE InvoiceRounding@12(pPurchInvHeader@1100285000 : Record 122);
    VAR
      InvoiceRoundingAmount@1001 : Decimal;
      NextLineNo@1002 : Integer;
      SavedStatusCheckSuspended@1100409000 : Boolean;
    BEGIN
      //140124 Apply Rounding
      //>> 140328 ITERO.SB Changed rounding calc.
      Currency.TESTFIELD("Invoice Rounding Precision");
      pPurchInvHeader.CALCFIELDS("Balance Due");
      IF pPurchInvHeader."Balance Due"=TotalApprovLine.Amount THEN
        EXIT;
      //>> 140424 ITERO.SB New calc. of invoice rounding amount
      InvoiceRoundingAmount :=
        -ROUND(
          TotalApprovLine.Amount// Including VAT"             line
          -pPurchInvHeader."Balance Due",// Including VAT",          head
          Currency."Amount Rounding Precision",
          Currency.InvoiceRoundingDirection);
      //<<

      IF InvoiceRoundingAmount = 0 THEN
        EXIT;

      IF InvoiceRoundingAmount > Currency."Invoice Rounding Precision" THEN
        EXIT;

      IF InvoiceRoundingAmount*-1 > Currency."Invoice Rounding Precision" THEN
        EXIT;
      //<<
      //IF InvoiceRoundingAmount <> 0 THEN BEGIN
        VendPostingGr.GET(pPurchInvHeader."Vendor Posting Group");
        VendPostingGr.TESTFIELD("Invoice Rounding Account");
        WITH InvAppLine DO BEGIN
          INIT;
          NextLineNo := "Line No." + 10000;
          "System-Created Entry" := TRUE;
          "Line No." := NextLineNo;
          VALIDATE(Type,Type::"G/L Account");
          VALIDATE("Account No.",VendPostingGr."Invoice Rounding Account");
          VALIDATE(Quantity,1);
          InvAppLine.VALIDATE("Posting Date",TODAY);
          IF InvHeaderRec."Prices Including VAT" THEN
            VALIDATE("Unit Cost",InvoiceRoundingAmount)
          ELSE
            VALIDATE(
              "Unit Cost",
              ROUND(
                InvoiceRoundingAmount /
                (1 + (1 - pPurchInvHeader."VAT Base Discount %" / 100) * "VAT %" / 100),
                Currency."Amount Rounding Precision"));
          VALIDATE(Amount,InvoiceRoundingAmount);
          "Line No." := NextLineNo;
      //    DocDim2.SETRANGE("Table ID",DATABASE::"Purchase Line");
      //    DocDim2.SETRANGE("Document Type",DocDim."Document Type"::Invoice);
      //    DocDim2.SETRANGE("Document No.",pPurchInvHeader."No.");
      //    DocDim2.SETRANGE("Line No.","Line No.");
      //    IF DocDim2.FINDSET THEN
      //      REPEAT
      //        TempDocDim := DocDim2;
      //        TempDocDim.INSERT;
      //      UNTIL DocDim2.NEXT = 0;
          LastLineRetrieved := FALSE;
          RoundingLineInserted := TRUE;
          RoundingLineNo := "Line No.";
         END;
      //END;
    END;

    PROCEDURE PrePostRoundingOffCredit@1100285001(pCreMemoHeader@1100288000 : Record 124);
    VAR
      InvApprovalLine@1100288001 : Record 11012032;
      BiggestLineNo@1100288002 : Integer;
    BEGIN
      //140124 Apply Rounding for cr.memo
      PurchSetup.GET;
      IF NOT PurchSetup."Approval Invoice Rounding" THEN
        EXIT;


      GetGLSetup.GET;
      WITH pCreMemoHeader DO
        IF "Currency Code" = '' THEN
          Currency.InitRoundingPrecision
        ELSE BEGIN
          Currency.GET("Currency Code");
          Currency.TESTFIELD("Amount Rounding Precision");
        END;

      RoundingLineInserted := FALSE;
      LastLineRetrieved := FALSE;
      CLEAR(TotalApprovLine);

      InvApprovalLine.SETRANGE("Journal Template Name",pCreMemoHeader."Journal Template");
      InvApprovalLine.SETRANGE("Document Type",InvApprovalLine."Document Type"::"Credit Memo");
      InvApprovalLine.SETRANGE("Document No.",pCreMemoHeader."No.");
      IF InvApprovalLine.FINDLAST THEN
        BiggestLineNo := InvApprovalLine."Line No.";
      IF InvApprovalLine.FIND('-') THEN
      REPEAT
        IF RoundingLineInserted THEN
          LastLineRetrieved := TRUE
        ELSE BEGIN
          TotalApprovLine.Amount += InvApprovalLine.Amount;
          TotalApprovLine."Amount Including VAT" += InvApprovalLine."Amount Including VAT";
          InvAppLine.GET(InvApprovalLine."Journal Template Name",InvApprovalLine."Document Type",
          InvApprovalLine."Document No.",InvApprovalLine."Line No.");

          IF InvApprovalLine.NEXT = 0 THEN
            LastLineRetrieved := TRUE;

          IF LastLineRetrieved THEN BEGIN
            InvAppLine."Line No." := BiggestLineNo;
            pCreMemoHeader.CALCFIELDS("Balance Due");
            InvoiceRoundingCredit(pCreMemoHeader);
            IF InvAppLine."Line No." <> BiggestLineNo THEN BEGIN
              GLAcc.GET(InvAppLine."Account No.");
              InvAppLine.Description := GLAcc.Name;
              InvAppLine.INSERT;
            END;
          END;
        END;
      UNTIL LastLineRetrieved;
      CLEAR(TotalApprovLine);
    END;

    LOCAL PROCEDURE InvoiceRoundingCredit@1100285000(pCreMemoHeader@1100285000 : Record 124);
    VAR
      InvoiceRoundingAmount@1001 : Decimal;
      NextLineNo@1002 : Integer;
      SavedStatusCheckSuspended@1100409000 : Boolean;
    BEGIN
      //140124 Apply Rounding for cr.memo
      //>> 140328 ITERO.SB
      pCreMemoHeader.CALCFIELDS("Balance Due");
      IF pCreMemoHeader."Balance Due"=TotalApprovLine.Amount THEN
        EXIT;
      //<<
      Currency.TESTFIELD("Invoice Rounding Precision");
      //>> 140424 ITERO.SB New calc. of invoice rounding amount
      InvoiceRoundingAmount :=
        -ROUND(
          TotalApprovLine.Amount// Including VAT"
          -pCreMemoHeader."Balance Due",// Including VAT",          head
          Currency."Amount Rounding Precision",
            Currency.InvoiceRoundingDirection);

      IF InvoiceRoundingAmount = 0 THEN
        EXIT;

      IF InvoiceRoundingAmount > Currency."Invoice Rounding Precision" THEN
        EXIT;

      IF InvoiceRoundingAmount*-1 > Currency."Invoice Rounding Precision" THEN
        EXIT;


      VendPostingGr.GET(CredHeaderRec."Vendor Posting Group");
      VendPostingGr.TESTFIELD("Invoice Rounding Account");
      WITH InvAppLine DO BEGIN
        INIT;
        NextLineNo := "Line No." + 10000;
        "System-Created Entry" := TRUE;
        "Line No." := NextLineNo;
        VALIDATE(Type,Type::"G/L Account");
        VALIDATE("Account No.",VendPostingGr."Invoice Rounding Account");
        VALIDATE(Quantity,1);
        InvAppLine.VALIDATE("Posting Date",TODAY);
        IF CredHeaderRec."Prices Including VAT" THEN
          VALIDATE("Unit Cost",InvoiceRoundingAmount)
        ELSE
          VALIDATE(
            "Unit Cost",
            ROUND(
              InvoiceRoundingAmount /
              (1 + (1 - CredHeaderRec."VAT Base Discount %" / 100) * "VAT %" / 100),
              Currency."Amount Rounding Precision"));
        VALIDATE(Amount,InvoiceRoundingAmount);
        "Line No." := NextLineNo;
      {
        DocDim2.SETRANGE("Table ID",DATABASE::"Purchase Line");
        DocDim2.SETRANGE("Document Type",DocDim."Document Type"::"Credit Memo");
        DocDim2.SETRANGE("Document No.",pCreMemoHeader."No.");
        DocDim2.SETRANGE("Line No.","Line No.");
        IF DocDim2.FINDSET THEN
          REPEAT
            TempDocDim := DocDim2;
            TempDocDim.INSERT;
          UNTIL DocDim2.NEXT = 0;
      }
        LastLineRetrieved := FALSE;
        RoundingLineInserted := TRUE;
        RoundingLineNo := "Line No.";
       END;
    END;

    PROCEDURE PostPeriodicService@1100285002();
    VAR
      PeriodicTemplate@1100285008 : Record 11128015;
      PerPostDate@1100285007 : Date;
      PeriodicCount@1100285006 : Integer;
      CalcDateExpr@1100285005 : Code[10];
      PerDiffSum@1100285004 : Decimal;
      PerDiff@1100285003 : Decimal;
      PerDiffSumAddCur@1100285002 : Decimal;
      PerDiffAddCur@1100285001 : Decimal;
    BEGIN
      // 140326 ITERO.SB
      PeriodicTemplate.GET(ApprovLineRec."Periodic Template Code");
      PeriodicTemplate.TESTFIELD("No. of Periods");
      PeriodicTemplate.TESTFIELD(Interval);
      PeriodicTemplate.TESTFIELD("Temp. G/L Acc.");

      ServJnlLine.INIT;
      ServJnlLine."Service Contract No." := ApprovLineRec."Service Contract No.";
      ServJnlLine."Service Order No." := ApprovLineRec."Service Order No.";
      ServJnlLine."Service Location No." := ApprovLineRec."Service Location No.";
      //ServJnlLine.Installation := ApprovLineRec."Service Installation";
      //ServJnlLine."Installation Part" := ApprovLineRec."Service Installation Part";
      IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Credit Memo" THEN
        ServJnlLine."Document Type" := ServJnlLine."Document Type"::"Purchase Credit Memo"
      ELSE
        ServJnlLine."Document Type" := ServJnlLine."Document Type"::"Purchase Invoice";
      ServJnlLine."Document No." := GenJnlLine."Document No.";
      ServJnlLine."G/L Account" := ApprovLineRec."Account No.";
      ServJnlLine."Posting Date" := ApprovLineRec."Posting Date";
      ServJnlLine."Shortcut Dimension 1 Code" := ApprovLineRec."Shortcut Dimension 1 Code";
      ServJnlLine."Shortcut Dimension 2 Code" := ApprovLineRec."Shortcut Dimension 2 Code";
      ServJnlLine."Cost Component" := ApprovLineRec."Cost Component";
      ServJnlLine.Description := PeriodicTemplate.Description;//ApprovLineRec.Description;
      ServJnlLine."Description 2" := ApprovLineRec."Description 2";  //**4PS02.n
      IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Purchase Invoice" THEN BEGIN
        ServJnlLine.Quantity := ApprovLineRec.Quantity;
        ServJnlLine."Vendor No." := InvHeaderRec."Buy-from Vendor No.";
      END ELSE BEGIN
        ServJnlLine.Quantity := ApprovLineRec.Quantity * -1;
        ServJnlLine."Vendor No." := CredHeaderRec."Buy-from Vendor No.";
      END;
      ServJnlLine."Unit of Measure Code" := ApprovLineRec."Unit of Measure Code";
      ServJnlLine.VALIDATE("Unit Cost (LCY)", -PriceInLCY(ApprovLineRec.Price));
      IF AmountsOnly THEN BEGIN
        IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Purchase Invoice" THEN
          ServJnlLine.VALIDATE("Total Cost (LCY)", -PriceInLCY(ApprovLineRec.Amount))
        ELSE
          ServJnlLine.VALIDATE("Total Cost (LCY)", PriceInLCY(ApprovLineRec.Amount))
      END ELSE
        ServJnlLine.VALIDATE("Total Cost (LCY)", -ServJnlLine."Unit Cost (LCY)" * ServJnlLine.Quantity);
      ServJnlLine."Reason Code" := GenJnlLine."Reason Code";
      ServJnlLine."Source Code" := GenJnlLine."Source Code";
      ServJnlLine."Item No." := ApprovLineRec."Item No.";
      ServJnlLine."Basic Item" := ApprovLineRec."Basic Item";
      ServJnlLine."Trade Item" := ApprovLineRec."Trade Item";
      ServJnlLine."Vendor (Trade Item)" := ApprovLineRec."Vendor (Trade Item)";
      ServJnlLine.Manufacturer := ApprovLineRec.Manufacturer;
      ServJnlLine."Project No." := ApprovLineRec."Project No.";
      ServJnlLine."Additional Cost" := ApprovLineRec."Additional Cost (Service)";  //db, 24-11-05
      ServJnlLine."Sales Price Purch. Order" := ApprovLineRec."Sales Price";
      ServJnlLine."Cost Plus Entry Created" := ApprovLineRec."Cost Plus Entry Created";
      IF (ApprovLineRec."Receipt No." <> '') THEN
        IF PurchRcptLine.GET(ApprovLineRec."Receipt No.",ApprovLineRec."Receipt Line No.") THEN
          ServJnlLine."Execution Date" := PurchRcptLine."Posting Date";
      IF ServJnlLine."Execution Date" = 0D THEN
        ServJnlLine."Execution Date" := ServJnlLine."Posting Date";
      ServJnlLine."Removal Contribution" := ApprovLineRec."Removal Contribution";  //db, 07-12-10: M22790
      //M29056 sn
      ServJnlLine."Tariff No." := ApprovLineRec."Tariff No.";
      IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Purchase Invoice" THEN BEGIN
        ServJnlLine."Country/Region Code" := InvHeaderRec."Country/Region of Origin";
        ServJnlLine."Country/Region of Origin/Dest." := InvHeaderRec."Country/Region of Destination";
      END ELSE BEGIN
        ServJnlLine."Country/Region Code" := CredHeaderRec."Country/Region of Origin";
        ServJnlLine."Country/Region of Origin/Dest." := CredHeaderRec."Country/Region of Destination";
      END;
      //M29056 en

      ServJnlPostLine.RunWithCheck(ServJnlLine);
      ///Slut f”rsta raden

      CLEAR(PerDiff);
      CLEAR(PerDiffSum);
      FOR PeriodicCount := 1 TO PeriodicTemplate."No. of Periods" DO
      BEGIN
        IF PeriodicCount = 1 THEN
          IF ApprovLineRec."Periodic Starting Date" = 0D THEN
            PerPostDate := GenJnlLine."Posting Date"
          ELSE
            PerPostDate := ApprovLineRec."Periodic Starting Date"
        ELSE
          PerPostDate := CALCDATE(PeriodicTemplate.Interval, PerPostDate);

        //IF GenJnlCheckLine.DateNotAllowed(PerPostDate) THEN
          //ERROR(Text100,PerPostDate);

        PerDiffSum := PerDiffSum +
                      ROUND(PriceInLCY(ApprovLineRec.Amount) / PeriodicTemplate."No. of Periods",
                            GLSetup."Amount Rounding Precision");

        //PerDiffSumAddCur := PerDiffSumAddCur +
          //            ROUND("Source Currency Amount" / PeriodicTemplate."No. of Periods",
            //                Currency."Amount Rounding Precision");
        //IF "Periodic Count" = "Periodic Template"."No. of Periods" THEN
        IF PeriodicCount = PeriodicTemplate."No. of Periods" THEN BEGIN
          PerDiff := PriceInLCY(ApprovLineRec.Amount) - PerDiffSum;
          //PerDiffAddCur := "Source Currency Amount" - PerDiffSumAddCur;
        END;
        //S„tt in 3 rader med 100 p† varje..
        ServJnlLine.INIT;
        ServJnlLine."Service Contract No." := ApprovLineRec."Service Contract No.";
        ServJnlLine."Service Order No." := ApprovLineRec."Service Order No.";
        ServJnlLine."Service Location No." := ApprovLineRec."Service Location No.";
      //  ServJnlLine.Installation := ApprovLineRec."Service Installation";
      //  ServJnlLine."Installation Part" := ApprovLineRec."Service Installation Part";
        IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Credit Memo" THEN
          ServJnlLine."Document Type" := ServJnlLine."Document Type"::"Purchase Credit Memo"
        ELSE
          ServJnlLine."Document Type" := ServJnlLine."Document Type"::"Purchase Invoice";
        ServJnlLine."Document No." := GenJnlLine."Document No.";
        ServJnlLine."G/L Account" := ApprovLineRec."Account No.";
        ServJnlLine."Posting Date" := PerPostDate;//ApprovLineRec."Posting Date";
        ServJnlLine."Shortcut Dimension 1 Code" := ApprovLineRec."Shortcut Dimension 1 Code";
        ServJnlLine."Shortcut Dimension 2 Code" := ApprovLineRec."Shortcut Dimension 2 Code";
        ServJnlLine."Cost Component" := ApprovLineRec."Cost Component";
        ServJnlLine.Description := PeriodicTemplate.Description;//ApprovLineRec.Description;
        ServJnlLine."Description 2" := ApprovLineRec."Description 2";  //**4PS02.n
        IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Purchase Invoice" THEN BEGIN
          ServJnlLine.Quantity := ApprovLineRec.Quantity;
          ServJnlLine."Vendor No." := InvHeaderRec."Buy-from Vendor No.";
        END ELSE BEGIN
          ServJnlLine.Quantity := ApprovLineRec.Quantity * -1;
          ServJnlLine."Vendor No." := CredHeaderRec."Buy-from Vendor No.";
        END;
        ServJnlLine."Unit of Measure Code" := ApprovLineRec."Unit of Measure Code";
        ServJnlLine.VALIDATE("Unit Cost (LCY)", PriceInLCY(ApprovLineRec.Price)/PeriodicTemplate."No. of Periods");
        IF AmountsOnly THEN BEGIN
          IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Purchase Invoice" THEN
            ServJnlLine.VALIDATE("Total Cost (LCY)", (PriceInLCY(ApprovLineRec.Amount)/PeriodicTemplate."No. of Periods")+PerDiff)
          ELSE
            ServJnlLine.VALIDATE("Total Cost (LCY)", (-PriceInLCY(ApprovLineRec.Amount)/PeriodicTemplate."No. of Periods")+PerDiff)
        END ELSE
          ServJnlLine.VALIDATE("Total Cost (LCY)", (ServJnlLine."Unit Cost (LCY)" * ServJnlLine.Quantity)+PerDiff);
        ServJnlLine."Reason Code" := GenJnlLine."Reason Code";
        ServJnlLine."Source Code" := GenJnlLine."Source Code";
        ServJnlLine."Item No." := ApprovLineRec."Item No.";
        ServJnlLine."Basic Item" := ApprovLineRec."Basic Item";
        ServJnlLine."Trade Item" := ApprovLineRec."Trade Item";
        ServJnlLine."Vendor (Trade Item)" := ApprovLineRec."Vendor (Trade Item)";
        ServJnlLine.Manufacturer := ApprovLineRec.Manufacturer;
        ServJnlLine."Project No." := ApprovLineRec."Project No.";
        ServJnlLine."Additional Cost" := ApprovLineRec."Additional Cost (Service)";  //db, 24-11-05
        ServJnlLine."Sales Price Purch. Order" := ApprovLineRec."Sales Price";
        ServJnlLine."Cost Plus Entry Created" := ApprovLineRec."Cost Plus Entry Created";
        IF (ApprovLineRec."Receipt No." <> '') THEN
          IF PurchRcptLine.GET(ApprovLineRec."Receipt No.",ApprovLineRec."Receipt Line No.") THEN
            ServJnlLine."Execution Date" := PurchRcptLine."Posting Date";
        IF ServJnlLine."Execution Date" = 0D THEN
          ServJnlLine."Execution Date" := ServJnlLine."Posting Date";
        ServJnlLine."Removal Contribution" := ApprovLineRec."Removal Contribution";  //db, 07-12-10: M22790
        //M29056 sn
        ServJnlLine."Tariff No." := ApprovLineRec."Tariff No.";
        IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Purchase Invoice" THEN BEGIN
          ServJnlLine."Country/Region Code" := InvHeaderRec."Country/Region of Origin";
          ServJnlLine."Country/Region of Origin/Dest." := InvHeaderRec."Country/Region of Destination";
        END ELSE BEGIN
          ServJnlLine."Country/Region Code" := CredHeaderRec."Country/Region of Origin";
          ServJnlLine."Country/Region of Origin/Dest." := CredHeaderRec."Country/Region of Destination";
        END;
        //M29056 en

        ServJnlPostLine.RunWithCheck(ServJnlLine);
        IF PeriodicCount < PeriodicTemplate."No. of Periods" THEN
          PostSurcharge(1);
      END;
      ApprovLineRec.VALIDATE(ApprovLineRec."Periodic Template Code",'');
    END;

    PROCEDURE PostPeriodicProject@1100285003(UseAccountNo@1100285010 : Boolean);
    VAR
      PeriodicTemplate@1100285007 : Record 11128015;
      PerPostDate@1100285006 : Date;
      PeriodicCount@1100285005 : Integer;
      CalcDateExpr@1100285004 : Code[10];
      PerDiffSum@1100285003 : Decimal;
      PerDiff@1100285002 : Decimal;
      PerDiffSumAddCur@1100285001 : Decimal;
      PerDiffAddCur@1100285000 : Decimal;
    BEGIN
      // 140326 ITERO.SB
      PeriodicTemplate.GET(ApprovLineRec."Periodic Template Code");
      PeriodicTemplate.TESTFIELD("No. of Periods");
      PeriodicTemplate.TESTFIELD(Interval);
      PeriodicTemplate.TESTFIELD("Temp. G/L Acc.");


      JobJnlLine.INIT;
      JobJnlLine."Posting Date" := GenJnlLine."Posting Date";
      JobJnlLine."Document Date" := GenJnlLine."Document Date";
      JobJnlLine."Reason Code" := GenJnlLine."Reason Code";
      JobJnlLine."Job No." := GenJnlLine."Job No.";
      JobJnlLine.Element := GenJnlLine.Element;
      JobJnlLine."Plot No." := GenJnlLine."Plot No.";
      JobJnlLine."Extension Contract" := GenJnlLine."Extension Contract";
      JobJnlLine."Employee No." := GenJnlLine."Employee No.";
      JobJnlLine."Wage Component" := GenJnlLine."Wage Component";

      IF UseAccountNo THEN
        JobJnlLine."No." := GenJnlLine."Account No."
      ELSE
        JobJnlLine."No." := GenJnlLine."Bal. Account No.";

      IF PreRegisteredWIP AND (JobJnlLine."No." = '') THEN
        JobJnlLine."No." := GenJnlLine."Account No.";

      JobJnlLine.Description := PeriodicTemplate.Description;//GenJnlLine.Description;
      JobJnlLine."Description 2" := GenJnlLine."Description 2";  //**4PS02.n
      JobJnlLine."Posting Group" := GenJnlLine."Posting Group";
      JobJnlLine."Shortcut Dimension 1 Code" := GenJnlLine."Shortcut Dimension 1 Code";
      JobJnlLine."Shortcut Dimension 2 Code" := GenJnlLine."Shortcut Dimension 2 Code";
      JobJnlLine."Cost Component" := GenJnlLine."Cost Component";
      JobJnlLine."Gen. Bus. Posting Group" := GenJnlLine."Gen. Bus. Posting Group";
      JobJnlLine."Gen. Prod. Posting Group" := GenJnlLine."Gen. Prod. Posting Group";
      JobJnlLine."Entry Type" := JobJnlLine."Entry Type"::Usage;
      JobJnlLine."Document No." := GenJnlLine."Document No.";
      JobJnlLine."External Document No." := GenJnlLine."External Document No.";
      JobJnlLine.Type := JobJnlLine.Type::"G/L Account";
      IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Purchase Invoice" THEN BEGIN
        JobJnlLine.Quantity := ApprovLineRec.Quantity;
        JobJnlLine.Vendor := InvHeaderRec."Buy-from Vendor No.";
      END ELSE BEGIN
        JobJnlLine.Quantity := ApprovLineRec.Quantity * -1;
        JobJnlLine.Vendor := CredHeaderRec."Buy-from Vendor No.";
      END;
      JobJnlLine."Unit of Measure Code" := ApprovLineRec."Unit of Measure Code";
      JobJnlLine."Direct Unit Cost (LCY)" := -PriceInLCY(ApprovLineRec.Price);
      IF AmountsOnly THEN BEGIN
        IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Purchase Invoice" THEN
          JobJnlLine."Total Cost (LCY)" := -PriceInLCY(ApprovLineRec.Amount)
        ELSE
          JobJnlLine."Total Cost (LCY)" := PriceInLCY(ApprovLineRec.Amount)
      END ELSE
        JobJnlLine."Total Cost (LCY)" := JobJnlLine."Direct Unit Cost (LCY)" * JobJnlLine.Quantity;
      JobJnlLine."Source Code" := GenJnlLine."Source Code";
      //JobJnlLine."Post Job Entry Only" := FALSE; //Removed in NAV2009
      JobJnlLine."Posting No. Series" := GenJnlLine."Posting No. Series";

      JobJnlLine."Service Order No." := GenJnlLine."Service Order No.";
      //JobJnlLine."Service Installation" := GenJnlLine."Service Installation";
      //JobJnlLine."Service Installation Part" := GenJnlLine."Service Installation Part";
      JobJnlLine."Service Location No." := GenJnlLine."Service Location No.";
      JobJnlLine."Service Contract No." := GenJnlLine."Service Contract No.";
      JobJnlLine."Rental Unit" := GenJnlLine."Rental Unit";
      JobJnlLine."Item No." := GenJnlLine."Item No.";
      JobJnlLine."Basic Item" := GenJnlLine."Basic Item";
      JobJnlLine."Trade Item":= GenJnlLine."Trade Item";
      JobJnlLine.Manufacturer := GenJnlLine.Manufacturer;
      JobJnlLine."Vendor (Trade Item)" := GenJnlLine."Vendor (Trade Item)";
      JobJnlLine."Purchase Action" := GenJnlLine."Purchase Action";
      JobJnlLine."Sales Price Purch. Order" := ApprovLineRec."Sales Price";
      JobJnlLine."Cost Plus Entry Created" := ApprovLineRec."Cost Plus Entry Created";
      //IF (ApprovLineRec."Employee No." <> '') AND (ApprovLineRec."Receipt No." <> '') THEN  //*10927.o
      IF (ApprovLineRec."Receipt No." <> '') THEN  //*10927.n
        IF PurchRcptLine.GET(ApprovLineRec."Receipt No.",ApprovLineRec."Receipt Line No.") THEN
          JobJnlLine."Execution Date" := PurchRcptLine."Posting Date";
      IF JobJnlLine."Execution Date" = 0D THEN  //*10927.n
        JobJnlLine."Execution Date" := JobJnlLine."Posting Date";  //*10927.n
      JobJnlLine."Removal Contribution" := ApprovLineRec."Removal Contribution";  //db, 07-12-10: M22790
       //M29056 sn
      JobJnlLine."Tariff No." := ApprovLineRec."Tariff No.";
      IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Purchase Invoice" THEN BEGIN
        JobJnlLine."Country/Region Code" := InvHeaderRec."Country/Region of Origin";
        JobJnlLine."Country/Region of Origin/Dest." := InvHeaderRec."Country/Region of Destination";
      END ELSE BEGIN
        JobJnlLine."Country/Region Code" := CredHeaderRec."Country/Region of Origin";
        JobJnlLine."Country/Region of Origin/Dest." := CredHeaderRec."Country/Region of Destination";
      END;
      //M29056 en
      JobJnlLine."FSC Type Code" := ApprovLineRec."FSC Type Code";  //DP00129
      JobJnlLine.Comment := GetCommentForProjEntry(ApprovLineRec, MAXSTRLEN(JobJnlLine.Comment));  //*34602.n
      JobJnlPostLine.RunWithCheck(JobJnlLine);

      CLEAR(PerDiff);
      CLEAR(PerDiffSum);
      FOR PeriodicCount := 1 TO PeriodicTemplate."No. of Periods" DO
      BEGIN
        IF PeriodicCount = 1 THEN
          IF ApprovLineRec."Periodic Starting Date" = 0D THEN
            PerPostDate := GenJnlLine."Posting Date"
          ELSE
            PerPostDate := ApprovLineRec."Periodic Starting Date"
        ELSE
          PerPostDate := CALCDATE(PeriodicTemplate.Interval, PerPostDate);

        //IF GenJnlCheckLine.DateNotAllowed(PerPostDate) THEN
          //ERROR(Text100,PerPostDate);

        PerDiffSum := PerDiffSum +
                      ROUND(PriceInLCY(ApprovLineRec.Amount) / PeriodicTemplate."No. of Periods",
                            GLSetup."Amount Rounding Precision");

        //PerDiffSumAddCur := PerDiffSumAddCur +
          //            ROUND("Source Currency Amount" / PeriodicTemplate."No. of Periods",
            //                Currency."Amount Rounding Precision");
        //IF "Periodic Count" = "Periodic Template"."No. of Periods" THEN
        IF PeriodicCount = PeriodicTemplate."No. of Periods" THEN BEGIN
          PerDiff := PriceInLCY(ApprovLineRec.Amount) - PerDiffSum;
          //PerDiffAddCur := "Source Currency Amount" - PerDiffSumAddCur;
        END;

        //en rad f”r varje period
        JobJnlLine.INIT;
        JobJnlLine."Posting Date" := PerPostDate;//GenJnlLine."Posting Date";
        JobJnlLine."Document Date" := GenJnlLine."Document Date";
        JobJnlLine."Reason Code" := GenJnlLine."Reason Code";
        JobJnlLine."Job No." := GenJnlLine."Job No.";
        JobJnlLine.Element := GenJnlLine.Element;
        JobJnlLine."Plot No." := GenJnlLine."Plot No.";
        JobJnlLine."Extension Contract" := GenJnlLine."Extension Contract";
        JobJnlLine."Employee No." := GenJnlLine."Employee No.";
        JobJnlLine."Wage Component" := GenJnlLine."Wage Component";

        IF UseAccountNo THEN
          JobJnlLine."No." := GenJnlLine."Account No."
        ELSE
          JobJnlLine."No." := GenJnlLine."Bal. Account No.";

        IF PreRegisteredWIP AND (JobJnlLine."No." = '') THEN
          JobJnlLine."No." := GenJnlLine."Account No.";

        JobJnlLine.Description := PeriodicTemplate.Description;//GenJnlLine.Description;
        JobJnlLine."Description 2" := GenJnlLine."Description 2";  //**4PS02.n
        JobJnlLine."Posting Group" := GenJnlLine."Posting Group";
        JobJnlLine."Shortcut Dimension 1 Code" := GenJnlLine."Shortcut Dimension 1 Code";
        JobJnlLine."Shortcut Dimension 2 Code" := GenJnlLine."Shortcut Dimension 2 Code";
        JobJnlLine."Cost Component" := GenJnlLine."Cost Component";
        JobJnlLine."Gen. Bus. Posting Group" := GenJnlLine."Gen. Bus. Posting Group";
        JobJnlLine."Gen. Prod. Posting Group" := GenJnlLine."Gen. Prod. Posting Group";
        JobJnlLine."Entry Type" := JobJnlLine."Entry Type"::Usage;
        JobJnlLine."Document No." := GenJnlLine."Document No.";
        JobJnlLine."External Document No." := GenJnlLine."External Document No.";
        JobJnlLine.Type := JobJnlLine.Type::"G/L Account";
        IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Purchase Invoice" THEN BEGIN
          JobJnlLine.Quantity := ApprovLineRec.Quantity;
          JobJnlLine.Vendor := InvHeaderRec."Buy-from Vendor No.";
        END ELSE BEGIN
          JobJnlLine.Quantity := ApprovLineRec.Quantity * -1;
          JobJnlLine.Vendor := CredHeaderRec."Buy-from Vendor No.";
        END;
        JobJnlLine."Unit of Measure Code" := ApprovLineRec."Unit of Measure Code";
        JobJnlLine."Direct Unit Cost (LCY)" := PriceInLCY(ApprovLineRec.Price)/PeriodicTemplate."No. of Periods";
        IF AmountsOnly THEN BEGIN
          IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Purchase Invoice" THEN
            JobJnlLine."Total Cost (LCY)" := (PriceInLCY(ApprovLineRec.Amount)/PeriodicTemplate."No. of Periods")+PerDiff
          ELSE
            JobJnlLine."Total Cost (LCY)" := (-PriceInLCY(ApprovLineRec.Amount)/PeriodicTemplate."No. of Periods")+PerDiff
        END ELSE
            JobJnlLine."Total Cost (LCY)" := (JobJnlLine."Direct Unit Cost (LCY)" * JobJnlLine.Quantity)+PerDiff;
        JobJnlLine."Source Code" := GenJnlLine."Source Code";
        //JobJnlLine."Post Job Entry Only" := FALSE; //Removed in NAV2009
        JobJnlLine."Posting No. Series" := GenJnlLine."Posting No. Series";

        JobJnlLine."Service Order No." := GenJnlLine."Service Order No.";
      //  JobJnlLine."Service Installation" := GenJnlLine."Service Installation";
      //  JobJnlLine."Service Installation Part" := GenJnlLine."Service Installation Part";
        JobJnlLine."Service Location No." := GenJnlLine."Service Location No.";
        JobJnlLine."Service Contract No." := GenJnlLine."Service Contract No.";
        JobJnlLine."Rental Unit" := GenJnlLine."Rental Unit";
        JobJnlLine."Item No." := GenJnlLine."Item No.";
        JobJnlLine."Basic Item" := GenJnlLine."Basic Item";
        JobJnlLine."Trade Item":= GenJnlLine."Trade Item";
        JobJnlLine.Manufacturer := GenJnlLine.Manufacturer;
        JobJnlLine."Vendor (Trade Item)" := GenJnlLine."Vendor (Trade Item)";
        JobJnlLine."Purchase Action" := GenJnlLine."Purchase Action";
        JobJnlLine."Sales Price Purch. Order" := ApprovLineRec."Sales Price";
        JobJnlLine."Cost Plus Entry Created" := ApprovLineRec."Cost Plus Entry Created";
        //IF (ApprovLineRec."Employee No." <> '') AND (ApprovLineRec."Receipt No." <> '') THEN  //*10927.o
        IF (ApprovLineRec."Receipt No." <> '') THEN  //*10927.n
          IF PurchRcptLine.GET(ApprovLineRec."Receipt No.",ApprovLineRec."Receipt Line No.") THEN
            JobJnlLine."Execution Date" := PurchRcptLine."Posting Date";
        IF JobJnlLine."Execution Date" = 0D THEN  //*10927.n
          JobJnlLine."Execution Date" := JobJnlLine."Posting Date";  //*10927.n
        JobJnlLine."Removal Contribution" := ApprovLineRec."Removal Contribution";  //db, 07-12-10: M22790
         //M29056 sn
        JobJnlLine."Tariff No." := ApprovLineRec."Tariff No.";
        IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Purchase Invoice" THEN BEGIN
          JobJnlLine."Country/Region Code" := InvHeaderRec."Country/Region of Origin";
          JobJnlLine."Country/Region of Origin/Dest." := InvHeaderRec."Country/Region of Destination";
        END ELSE BEGIN
          JobJnlLine."Country/Region Code" := CredHeaderRec."Country/Region of Origin";
          JobJnlLine."Country/Region of Origin/Dest." := CredHeaderRec."Country/Region of Destination";
        END;
        //M29056 en
        JobJnlLine."FSC Type Code" := ApprovLineRec."FSC Type Code";  //DP00129
        JobJnlLine.Comment := GetCommentForProjEntry(ApprovLineRec, MAXSTRLEN(JobJnlLine.Comment));  //*34602.n
        JobJnlPostLine.RunWithCheck(JobJnlLine);

      IF PeriodicCount < PeriodicTemplate."No. of Periods" THEN
        PostSurcharge(0);
      END;

      ApprovLineRec.VALIDATE(ApprovLineRec."Periodic Template Code",'');
    END;

    LOCAL PROCEDURE PostLoan@1100528501();
    VAR
      LoanLedgerEntry@1100528503 : Record 11229444;
    BEGIN
      //**4PS
      IF (ApprovLineRec."Loan Code" = '') THEN
        EXIT;

      WITH LoanLedgerEntry DO BEGIN
        INIT;
        "Document No." := GenJnlLine."Document No.";
        Type := Type::Purchase;
        "Posting Date" := ApprovLineRec."Posting Date";
        "Document Date" := GenJnlLine."Document Date";
        "Account No." := ApprovLineRec."Account No.";
        "Loan Code" := ApprovLineRec."Loan Code";
        "Loan Type" := ApprovLineRec."Loan Type";
        Description := ApprovLineRec.Description;
        Quantity := ApprovLineRec.Quantity;

        IF ApprovLineRec."Document Type" = ApprovLineRec."Document Type"::"Purchase Invoice" THEN BEGIN
          "Amount (LCY)" := PriceInLCY(ApprovLineRec.Amount);
          Amount := ApprovLineRec.Amount;
        END ELSE BEGIN
          "Amount (LCY)" := -PriceInLCY(ApprovLineRec.Amount);
          Amount := -ApprovLineRec.Amount;
        END;

        "Currency Code" := ApprCurrencyCode;
        "Global Dimension 1 Code" := ApprovLineRec."Shortcut Dimension 1 Code";
        "Global Dimension 2 Code" := ApprovLineRec."Shortcut Dimension 2 Code";
        "Dimension Set ID" := ApprovLineRec."Dimension Set ID";

        LoanJnlPostLine.RUN(LoanLedgerEntry);
      END;
    END;

    LOCAL PROCEDURE OnHoldCodeFromInvoiceApprovalLines@1100528201(InvoiceApprovalLine@1100528201 : Record 11012032;VAR OnHold@1100528202 : Code[3]);
    VAR
      InvoiceApprovalLine2@1100528200 : Record 11012032;
    BEGIN
      InvoiceApprovalLine2.SETRANGE("Journal Template Name", InvoiceApprovalLine."Journal Template Name");
      InvoiceApprovalLine2.SETRANGE("Document Type",InvoiceApprovalLine."Document Type");
      InvoiceApprovalLine2.SETRANGE("Document No.",InvoiceApprovalLine."Document No.");
      InvoiceApprovalLine2.SETFILTER("On Hold", '<>%1', '');
      IF InvoiceApprovalLine2.FINDFIRST THEN
        OnHold := InvoiceApprovalLine2."On Hold";
    END;

    BEGIN
    {
      //C004829  Item tracking for approval. Copied from Cu90 and modified for approval
      4PS05 KK, 19 november 2010, On hold when no contract returned or when no letter of credit returned.
      //C004829  Item tracking for approval. Copied from C90 and modified for approval
      4PSSE Itero.BSL Periodic Template
      140124 ITERO.SB Apply Rounding
      140218 ITERO.DL altered "Invoice Rounding" to "Approval Invoice Rounding"

      ITERO.DL, 140219, removed CONS13, V13
      140303 ITERO.DL, changed InvoiceRounding-calculation
      140326 ITERO.SB Handle periodic periods when posting project/service
      140328 ITERO.SB Changed rounding calculation
      140424 ITERO.SB New calc. of invoice rounding amount (Inv + CreMemo.)
      190506 ORANGO.PR Correction for periodic template posting
    }
    END.
  }
}

