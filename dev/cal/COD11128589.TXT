OBJECT Codeunit 11128589 FIK Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVDK8.00 (13650);
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      FIKLengthErr@1060000 : TextConst '@@@="%1=Field,%2=Value";ENU=Payment Reference for %1 cannot be longer than %2.';
      WrongCheckCypherErr@1060001 : TextConst 'ENU=The Payment Reference that you entered does not have the correct control cipher.';
      FIKPmtErr@1060002 : TextConst 'ENU=The selected payment method is not a FIK payment.';
      WeightFIK71Txt@1060003 : TextConst 'ENU=12121212121212;SVE=12121212121212';
      WeightFIK04Txt@1060004 : TextConst 'ENU=212121212121212;SVE=212121212121212';
      PmtReferenceErr@1060005 : TextConst '@@@="%1=Name of selected payment method";ENU=Payment Reference should be blank for payment method %1.';

    PROCEDURE CreateFIKCheckSum@1060001(String@1060000 : Text;Weight@1060002 : Text;VAR Total@1060008 : Integer;VAR CheckSum@1060009 : Integer) : Integer;
    VAR
      StringDigit@1060001 : Integer;
      WeightDigit@1060003 : Integer;
      ProductDigit@1060005 : Integer;
    BEGIN
      EVALUATE(StringDigit,COPYSTR(String,1,1));
      EVALUATE(WeightDigit,COPYSTR(Weight,1,1));
      ProductDigit := StringDigit * WeightDigit;
      IF ProductDigit >= 10 THEN
        Total += 1 + (ProductDigit MOD 10)
      ELSE
        Total += ProductDigit;

      IF STRLEN(String) > 1 THEN BEGIN
        String := COPYSTR(String,2,STRLEN(String) - 1);
        Weight := COPYSTR(Weight,2,STRLEN(Weight) - 1);
        CreateFIKCheckSum(String,Weight,Total,CheckSum);
      END ELSE BEGIN
        CheckSum := 10 - (Total MOD 10);
        IF CheckSum = 10 THEN
          CheckSum := 0;
      END;
      EXIT(CheckSum);
    END;

    LOCAL PROCEDURE ValidateFIKCheckSum@1060002(FikString@1060000 : Text;Weight@1060004 : Text) : Boolean;
    VAR
      ActualCheckSum@1060001 : Text;
      Total@1060002 : Integer;
      ExpectedCheckSum@1060003 : Integer;
    BEGIN
      ActualCheckSum := COPYSTR(FikString,STRLEN(FikString),1);
      FikString := COPYSTR(FikString,1,STRLEN(FikString) - 1);
      CreateFIKCheckSum(FikString,Weight,Total,ExpectedCheckSum);
      EXIT(ActualCheckSum = FORMAT(ExpectedCheckSum));
    END;

    PROCEDURE EvaluateFIK@1060000(PaymentReference@1060002 : Text;PaymentMethodCode@1060000 : Code[10]) : Text;
    VAR
      PaymentMethod@1060001 : Record 289;
      Result@1060003 : Boolean;
    BEGIN
      IF PaymentReference = '' THEN
        EXIT;
      Result := FALSE;
      PaymentMethod.GET(PaymentMethodCode);
      CASE PaymentMethod."Payment Type Validation" OF
        PaymentMethod."Payment Type Validation"::"FIK 71":
          BEGIN
            IF STRLEN(PaymentReference) > 15 THEN
              ERROR(FIKLengthErr,PaymentMethod."Payment Type Validation"::"FIK 71",15);
            PaymentReference := PADSTR('',15 - STRLEN(PaymentReference),'0') + PaymentReference;
            Result := ValidateFIKCheckSum(PaymentReference,WeightFIK71Txt);
          END;
        PaymentMethod."Payment Type Validation"::"FIK 04":
          BEGIN
            PaymentReference := PADSTR('',16 - STRLEN(PaymentReference),'0') + PaymentReference;
            Result := ValidateFIKCheckSum(PaymentReference,WeightFIK04Txt);
          END;
        PaymentMethod."Payment Type Validation"::"FIK 01",PaymentMethod."Payment Type Validation"::"FIK 73":
          ERROR(PmtReferenceErr,PaymentMethod."Payment Type Validation");
        ELSE
          ERROR(FIKPmtErr);
      END;
      IF NOT Result THEN
        ERROR(WrongCheckCypherErr);
      EXIT(PaymentReference);
    END;

    BEGIN
    END.
  }
}

