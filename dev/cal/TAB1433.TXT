OBJECT Table 1433 Net Promoter Score
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.04;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    CaptionML=[ENU=Net Promoter Score;
               NOR=Poeng i anbefalingssystem];
  }
  FIELDS
  {
    { 1   ;   ;User SID            ;GUID          ;DataClassification=EndUserPseudonymousIdentifiers;
                                                   CaptionML=[ENU=User SID;
                                                              NOR=Bruker-SID;
                                                              SVE=Anv„ndar-SID] }
    { 4   ;   ;Last Request Time   ;DateTime      ;CaptionML=[ENU=Last Request Time;
                                                              NOR=Klokkeslett for siste foresp›rsel] }
    { 5   ;   ;Send Request        ;Boolean       ;CaptionML=[ENU=Send Request;
                                                              NOR=Send foresp›rsel] }
  }
  KEYS
  {
    {    ;User SID                                ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      NpsCategoryTxt@1000 : TextConst '@@@={Locked};ENU=AL NPS Prompt;NOR=AL NPS Prompt';
      FailedToUpdateNPSTxt@1001 : TextConst '@@@={Locked};ENU=Failed to update NPS on %1.;NOR=Failed to update NPS on %1.';
      FailedToGetNPSRecordTxt@1002 : TextConst '@@@={Locked};ENU=Failed to get updated NPS record after SelectLatestVersion.;NOR=Failed to get updated NPS record after SelectLatestVersion.';
      OldVersionOfNPSRecordTxt@1003 : TextConst '@@@={Locked};ENU=Old version of the NPS version was - USERSID %1, LastRequestTime %2, SendRequest %3.;NOR=Old version of the NPS version was - USERSID %1, LastRequestTime %2, SendRequest %3.';
      DisablingNPSRecordTxt@1004 : TextConst '@@@={Locked};ENU=Disabling NPS record - USERSID %1.;NOR=Disabling NPS record - USERSID %1.';
      FailedToUpdateNPSForUserTxt@1005 : TextConst '@@@={Locked};ENU=Failed to update NPS on %1. USERSID %2.;NOR=Failed to update NPS on %1. USERSID %2.';

    [External]
    PROCEDURE UpdateRequestSendingStatus@1();
    VAR
      NetPromoterScoreMgt@1003 : Codeunit 1432;
    BEGIN
      IF NOT NetPromoterScoreMgt.IsNpsSupported THEN
        EXIT;

      IF NOT GET(USERSECURITYID) THEN BEGIN
        INIT;
        "User SID" := USERSECURITYID;
        "Last Request Time" := CURRENTDATETIME;
        "Send Request" := TRUE;
        IF NOT INSERT THEN
          LogUpdateError('Insert');
      END ELSE BEGIN
        "Last Request Time" := CURRENTDATETIME;
        "Send Request" := TRUE;
        IF NOT MODIFY THEN
          LogUpdateError('Modify');
      END;
    END;

    [External]
    PROCEDURE DisableRequestSending@2();
    VAR
      NetPromoterScoreMgt@1000 : Codeunit 1432;
    BEGIN
      IF NOT NetPromoterScoreMgt.IsNpsSupported THEN
        EXIT;

      IF NOT GET(USERSECURITYID) THEN
        EXIT;

      "Send Request" := FALSE;
      SENDTRACETAG(
        '00009NW',NpsCategoryTxt,VERBOSITY::Normal,STRSUBSTNO(DisablingNPSRecordTxt,USERSECURITYID),
        DATACLASSIFICATION::EndUserPseudonymousIdentifiers);
      MODIFY;
    END;

    [External]
    PROCEDURE ShouldSendRequest@3() : Boolean;
    BEGIN
      IF NOT GET(USERSECURITYID) THEN
        EXIT(TRUE);

      EXIT("Send Request");
    END;

    LOCAL PROCEDURE LogUpdateError@4(Operation@1000 : Text);
    BEGIN
      SENDTRACETAG(
        '00009NX',NpsCategoryTxt,VERBOSITY::Warning,STRSUBSTNO(FailedToUpdateNPSTxt,Operation),DATACLASSIFICATION::SystemMetadata);

      SENDTRACETAG(
        '00009O6',NpsCategoryTxt,VERBOSITY::Warning,STRSUBSTNO(FailedToUpdateNPSForUserTxt,Operation,USERSECURITYID),
        DATACLASSIFICATION::EndUserPseudonymousIdentifiers);
      SELECTLATESTVERSION;

      IF NOT GET(USERSECURITYID) THEN BEGIN
        SENDTRACETAG(
          '00009NY',NpsCategoryTxt,VERBOSITY::Warning,FailedToGetNPSRecordTxt,DATACLASSIFICATION::SystemMetadata);
        EXIT;
      END;

      SENDTRACETAG(
        '00009NZ',NpsCategoryTxt,VERBOSITY::Normal,STRSUBSTNO(OldVersionOfNPSRecordTxt,"User SID","Last Request Time","Send Request"),
        DATACLASSIFICATION::EndUserPseudonymousIdentifiers);
    END;

    BEGIN
    END.
  }
}

