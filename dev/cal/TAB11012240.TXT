OBJECT Table 11012240 Parcel
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    DataCaptionFields=No.,Description;
    OnInsert=VAR
               CurrentDate@1210190000 : Date;
             BEGIN
               // 31617.sn
               ParcelSetup.GET;

               IF "No." = '' THEN BEGIN
                 TestNoSeries;
                 CurrentDate := WORKDATE;
                 NoSeriesMgt.InitSeries(GetNoSeriesCode,xRec."No. Series",CurrentDate,"No.","No. Series");
               END;
               // 31617.en

               CheckContactFeatures;  //**4PS.n
               // 31536.sn
               "Creation Date" := TODAY;
               "Last Date Modified" := "Creation Date";
               "Modified by" := USERID;
               // 31536.en
             END;

    OnModify=BEGIN
               // 31536.sn
               "Last Date Modified" := TODAY;
               "Modified by" := USERID;
               // 31536.en
             END;

    OnDelete=VAR
               CommentLine@1100525000 : Record 97;
             BEGIN
               CommentLine.SETRANGE("Table Name", CommentLine."Table Name"::Parcel);
               CommentLine.SETRANGE("No.", "No.");
               CommentLine.DELETEALL;
             END;

    OnRename=BEGIN
               "Last Date Modified" := TODAY;  // 31536.n
             END;

    CaptionML=[ENU=Parcel;
               NOR=Pakke;
               SVE=Paket];
    LookupPageID=Page11071945;
    DrillDownPageID=Page11071945;
  }
  FIELDS
  {
    { 10  ;   ;No.                 ;Code20        ;CaptionML=[ENU=No.;
                                                              NOR=Nr.;
                                                              SVE=Nr] }
    { 20  ;   ;Description         ;Text30        ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 30  ;   ;Location            ;Text100       ;CaptionML=[ENU=Location;
                                                              NOR=Lokasjon;
                                                              SVE=Lagerst„lle] }
    { 40  ;   ;City                ;Text30        ;CaptionML=[ENU=City;
                                                              NOR=Poststed;
                                                              SVE=Ort] }
    { 50  ;   ;Date                ;Date          ;CaptionML=[ENU=Purchase Date;
                                                              NOR=Innkj›psdato;
                                                              SVE=Ink”psdatum] }
    { 60  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Comment Line" WHERE (Table Name=CONST(Parcel),
                                                                                           No.=FIELD(No.)));
                                                   CaptionML=[ENU=Comment;
                                                              NOR=Merknad;
                                                              SVE=Kommentar];
                                                   Editable=No }
    { 80  ;   ;Bank Guarantee No.  ;Code10        ;CaptionML=[ENU=Bank Guarantee No.;
                                                              NOR=Bankgarantinr.;
                                                              SVE=Bankgarantinr] }
    { 90  ;   ;Bank Guarantee Amnt.;Decimal       ;CaptionML=[ENU=Bank Guarantee Amount.;
                                                              NOR=Bankgarantibel›p;
                                                              SVE=Bankgarantibelopp.] }
    { 100 ;   ;Bank Guarantee Start;Date          ;CaptionML=[ENU=Bank Guarantee Start;
                                                              NOR=Bankgaranti start;
                                                              SVE=Bankgaranti startar] }
    { 110 ;   ;Bank Guarantee End  ;Date          ;CaptionML=[ENU=Bank Guarantee End;
                                                              NOR=Bankgaranti slutt;
                                                              SVE=Bankgaranti upph”r] }
    { 160 ;   ;Expected Realisation Date;Date     ;CaptionML=[ENU=Expected Realisation Date;
                                                              NOR=Forventet realiseringsdato;
                                                              SVE=F”rv„ntat realiseringsdatum] }
    { 170 ;   ;User                ;Code20        ;TableRelation="Parcel User".User WHERE (Parcel No.=FIELD(No.));
                                                   CaptionML=[ENU=User;
                                                              NOR=Bruker;
                                                              SVE=Anv„ndare] }
    { 185 ;   ;Size                ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Parcel Register Number".Size WHERE (Parcel No.=FIELD(No.)));
                                                   CaptionML=[ENU=Size (in square meters);
                                                              NOR=St›rrelse (i kvadratmeter);
                                                              SVE=Storlek (i kvadratmeter)];
                                                   Editable=No }
    { 200 ;   ;Participation       ;Decimal       ;InitValue=100;
                                                   CaptionML=[ENU=Participation (in %);
                                                              NOR=Deltakelse (i %);
                                                              SVE=Deltagande (i %)];
                                                   DecimalPlaces=0:2;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 220 ;   ;Seller              ;Code20        ;TableRelation="Parcel Contact"."Contact No." WHERE (Parcel No.=FIELD(No.),
                                                                                                       Type=CONST(seller));
                                                   CaptionML=[ENU=Seller;
                                                              NOR=Selger;
                                                              SVE=S„ljare] }
    { 230 ;   ;Reciprocity         ;Code20        ;TableRelation="Parcel Contact"."Contact No." WHERE (Parcel No.=FIELD(No.),
                                                                                                       Type=CONST(reciprocity));
                                                   CaptionML=[ENU=Reciprocity;
                                                              NOR=Gjensidighet;
                                                              SVE=™msesidighet] }
    { 240 ;   ;Seller Name         ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Parcel Contact"."Contact Name" WHERE (Parcel No.=FIELD(No.),
                                                                                                             Type=CONST(seller),
                                                                                                             Contact No.=FIELD(Seller)));
                                                   CaptionML=[ENU=Seller Name;
                                                              NOR=Selgers navn;
                                                              SVE=S„ljarens namn];
                                                   Editable=No }
    { 250 ;   ;Reciprocity Name    ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Parcel Contact"."Contact Name" WHERE (Parcel No.=FIELD(No.),
                                                                                                             Type=CONST(reciprocity),
                                                                                                             Contact No.=FIELD(Reciprocity)));
                                                   CaptionML=[ENU=Reciprocity Name;
                                                              NOR=Navn p† gjensidighet;
                                                              SVE=Namn p† ”msesidighet];
                                                   Editable=No }
    { 260 ;   ;User Name           ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Parcel User"."User Name" WHERE (Parcel No.=FIELD(No.),
                                                                                                       User=FIELD(User)));
                                                   CaptionML=[ENU=User Name;
                                                              NOR=Brukernavn;
                                                              SVE=Anv„ndarnamn];
                                                   Editable=No }
    { 270 ;   ;Participant         ;Code20        ;TableRelation="Parcel Contact"."Contact No." WHERE (Parcel No.=FIELD(No.),
                                                                                                       Type=CONST(participant));
                                                   CaptionML=[ENU=Participant;
                                                              NOR=Deltager;
                                                              SVE=Deltagare] }
    { 280 ;   ;Participant Name    ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Parcel Contact"."Contact Name" WHERE (Parcel No.=FIELD(No.),
                                                                                                             Type=CONST(participant),
                                                                                                             Contact No.=FIELD(Participant)));
                                                   CaptionML=[ENU=Participant Name;
                                                              NOR=Navn p† deltager;
                                                              SVE=Deltagarens namn];
                                                   Editable=No }
    { 290 ;   ;Purchase Price      ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Parcel Purchase Price".Amount WHERE (Parcel No.=FIELD(No.)));
                                                   CaptionML=[ENU=Purchase Price;
                                                              NOR=Kj›pspris;
                                                              SVE=Ink”pspris];
                                                   Editable=No }
    { 300 ;   ;Related Project No. ;Code20        ;TableRelation=Job.No.;
                                                   CaptionML=[ENU=Related Project No.;
                                                              NOR=Relatert prosjektnr.;
                                                              SVE=Relaterat projektnr] }
    { 310 ;   ;Related Project Description;Text100;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Job.Description WHERE (No.=FIELD(Related Project No.)));
                                                   CaptionML=[ENU=Related Project Description;
                                                              NOR=Relatert prosjektbeskrivelse;
                                                              SVE=Relaterad projektbeskrivning];
                                                   Editable=No }
    { 320 ;   ;Parcel Project      ;Code10        ;TableRelation="Parcel Project".No.;
                                                   CaptionML=[ENU=Parcel Project;
                                                              NOR=Pakkeprosjekt;
                                                              SVE=Paketprojekt] }
    { 351 ;   ;Freehold            ;Boolean       ;CaptionML=[ENU=Freehold;
                                                              NOR=Selveier;
                                                              SVE=Full besittningsr„tt] }
    { 400 ;   ;Bank Guaran. Ending Date Desc.;Text50;
                                                   CaptionML=[ENU=Bank Guaran. Ending Date Desc.;
                                                              NOR=Bankgar. Sluttdatobeskrivelse;
                                                              SVE=Bankgaranti Beskrivning f”r slutdatum] }
    { 410 ;   ;Split Results       ;Boolean       ;CaptionML=[ENU=Split Results;
                                                              NOR=Del resultater;
                                                              SVE=Dela resultat] }
    { 500 ;   ;Value Calculation Method;Option    ;CaptionML=[ENU=Value Calculation Method;
                                                              NOR=Metode for verdikalkulering;
                                                              SVE=Metod f”r v„rdeber„kning];
                                                   OptionCaptionML=[ENU=Land-bound,Not Land-bound;
                                                                    NOR=Jordbundet, ikke jordbundet;
                                                                    SVE=Markbunden,icke markbunden];
                                                   OptionString=Land-bound,Not Land-bound }
    { 510 ;   ;No. of Units        ;Decimal       ;CaptionML=[ENU=No. of Units;
                                                              NOR=Antall enheter;
                                                              SVE=Antal enheter];
                                                   DecimalPlaces=0:0 }
    { 520 ;   ;Expected Revenue per Unit;Decimal  ;CaptionML=[ENU=Expected Revenue per Unit;
                                                              NOR=Forventet inntekt per enhet;
                                                              SVE=F”rv„ntade int„kter per enhet] }
    { 530 ;   ;Gross Floor Space (m2);Decimal     ;CaptionML=[ENU=Gross Floor Space (m2);
                                                              NOR=Brutto areal (m2);
                                                              SVE=Bruttoutrymme (m2)] }
    { 550 ;   ;Price per m2 Gross Floor Space;Decimal;
                                                   CaptionML=[ENU=Price per m2 Gross Floor Space;
                                                              NOR=Pris per m2 for bruttoareal;
                                                              SVE=Pris per m2, bruttoutrymme] }
    { 560 ;   ;Creation Date       ;Date          ;CaptionML=[ENU=Creation Date;
                                                              NOR=Opprettet den;
                                                              SVE=Uppl„ggningsdatum];
                                                   Editable=No }
    { 565 ;   ;Last Date Modified  ;Date          ;CaptionML=[ENU=Last Date Modified;
                                                              NOR=Endret den;
                                                              SVE=Uppdateringsdatum];
                                                   Editable=No }
    { 570 ;   ;Modified by         ;Code50        ;TableRelation=User."User Name";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Modified by;
                                                              NOR=Endret av;
                                                              SVE=Žndrad av];
                                                   Editable=No }
    { 575 ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              NOR=Nr.serie;
                                                              SVE=Nr-serie];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Parcel Project,No.                       }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1100485000 : TextConst 'ENU=Intrest cannot be calculated for parcel %1 because there is no rate defined on %2.;NOR=Rente kan ikke beregnes for pakke %1 fordi det ikke er definert noen sats p† %2.;SVE=R„nta kan inte ber„knas f”r paket %1 eftersom det inte finns en definierad avgift p† %2.';
      Text002@1210190000 : TextConst 'ENU=The Parcel %1 already exists.;NOR=Pakken %1 finnes allerede;SVE=Paketet %1 finns redan.';
      Parcel@1210190001 : Record 11012240;
      ParcelSetup@1210190003 : Record 11012251;
      NoSeriesMgt@1210190002 : Codeunit 396;

    PROCEDURE ShowFeatures@1100485000();
    VAR
      lContactFeatureTypeRec@1100485000 : Record 11012753;
    BEGIN
      TESTFIELD("No.");
      lContactFeatureTypeRec."Relation Type" := lContactFeatureTypeRec."Relation Type"::Parcel;
      lContactFeatureTypeRec.Code := "No.";
      lContactFeatureTypeRec.SETRANGE("Relation Type", lContactFeatureTypeRec."Relation Type");
      lContactFeatureTypeRec.SETRANGE(Code, lContactFeatureTypeRec.Code);
      PAGE.RUNMODAL(PAGE::"Contact Feature Type", lContactFeatureTypeRec);
    END;

    PROCEDURE GetPhase@1100485001(iDate@1100485000 : Date) CurrPhase : Code[10];
    VAR
      lvPhaseHistRec@1100485001 : Record 11012242;
    BEGIN
      lvPhaseHistRec.SETRANGE("Parcel No.", "No.");
      lvPhaseHistRec.SETFILTER("Date Effective", '<=%1', iDate);
      IF lvPhaseHistRec.FINDLAST THEN
        CurrPhase := lvPhaseHistRec."Phase No."
      ELSE
        CurrPhase := '';
    END;

    PROCEDURE GetType@1100485002(iDate@1100485000 : Date) CurrType : Code[10];
    VAR
      lvTypeHistRec@1100485001 : Record 11012244;
    BEGIN
      lvTypeHistRec.SETRANGE("Parcel No.", "No.");
      lvTypeHistRec.SETFILTER("Date Effective", '<=%1', iDate);
      IF lvTypeHistRec.FINDLAST THEN
        CurrType := lvTypeHistRec."Type No."
      ELSE
        CurrType := '';
    END;

    PROCEDURE GetSize@1100525002() : Decimal;
    BEGIN
      CALCFIELDS(Size);
      EXIT(Size);
    END;

    PROCEDURE GetAllocPerc@1100525003(Date@1100525001 : Date) : Decimal;
    VAR
      ParcelAllocPercPerPhaseType@1100525000 : Record 11012256;
    BEGIN
      ParcelAllocPercPerPhaseType.SETRANGE("Phase No.", GetPhase(Date));
      ParcelAllocPercPerPhaseType.SETRANGE("Type No.", GetType(Date));
      ParcelAllocPercPerPhaseType.SETFILTER("Reference Date", '<=%1', Date);

      IF ParcelAllocPercPerPhaseType.FINDLAST THEN
        EXIT(ParcelAllocPercPerPhaseType."Unit Revenue Allocation %");
    END;

    PROCEDURE GetPrice@1100525001(Date@1100525000 : Date) : Decimal;
    VAR
      ParcelPricePerPhaseType@1100525001 : Record 11012250;
    BEGIN
      ParcelPricePerPhaseType.SETRANGE("Phase No.", GetPhase(Date));
      ParcelPricePerPhaseType.SETRANGE("Type No.", GetType(Date));
      ParcelPricePerPhaseType.SETFILTER("Reference Date", '<=%1', Date);

      IF ParcelPricePerPhaseType.FINDLAST THEN
        EXIT(ParcelPricePerPhaseType.Price);
    END;

    PROCEDURE GetValue@1100485003(iDate@1100485000 : Date) CurrValue : Decimal;
    BEGIN
      CASE "Value Calculation Method" OF
        "Value Calculation Method"::"Land-bound":
          BEGIN
            CALCFIELDS(Size);
            CurrValue := Size * GetPrice(iDate);
          END;
        "Value Calculation Method"::"Not Land-bound":
          BEGIN
            CurrValue :=
              ("No. of Units" * "Expected Revenue per Unit" * (GetAllocPerc(iDate) / 100)) +
              ("Gross Floor Space (m2)" * "Price per m2 Gross Floor Space");
          END;
      END;
    END;

    PROCEDURE GetParticipationValue@1100525000(Date@1100525000 : Date) : Decimal;
    BEGIN
      // Call 12842
      EXIT(GetValue(Date) * (Participation / 100));
    END;

    PROCEDURE GetPurchaseCosts@1100485004(iDate@1100485000 : Date) CurrCosts : Decimal;
    VAR
      lvJobLedgerRec@1100485001 : Record 11072005;
      lvParcelMgntSetupRec@1100485002 : Record 11012251;
    BEGIN
      lvParcelMgntSetupRec.GET;
      lvJobLedgerRec.SETCURRENTKEY("Main Project No.","Job No.","Cost Component","Extension Contract",
                                   Element,"Cost Type","Global Dimension 2 Code","Entry Type","Posting Date");
      lvJobLedgerRec.SETRANGE("Job No.", "Related Project No.");
      lvJobLedgerRec.SETFILTER("Posting Date", '<=%1', iDate);
      lvJobLedgerRec.SETRANGE("Entry Type", lvJobLedgerRec."Entry Type"::Usage);
      lvJobLedgerRec.SETRANGE("Cost Component", lvParcelMgntSetupRec."Cost Component Purchase");
      lvJobLedgerRec.CALCSUMS("Total Cost (LCY)");
      CurrCosts := lvJobLedgerRec."Total Cost (LCY)";
    END;

    PROCEDURE GetOtherCosts@1100485006(iDate@1100485000 : Date) CurrCosts : Decimal;
    VAR
      lvJobLedgerRec@1100485001 : Record 11072005;
      lvParcelMgntSetupRec@1100485002 : Record 11012251;
    BEGIN
      lvParcelMgntSetupRec.GET;
      lvJobLedgerRec.SETCURRENTKEY("Main Project No.","Job No.","Cost Component","Extension Contract",
                                   Element,"Cost Type","Global Dimension 2 Code","Entry Type","Posting Date");
      lvJobLedgerRec.SETRANGE("Job No.", "Related Project No.");
      lvJobLedgerRec.SETFILTER("Posting Date", '<=%1', iDate);
      lvJobLedgerRec.SETRANGE("Entry Type", lvJobLedgerRec."Entry Type"::Usage);
      lvJobLedgerRec.SETFILTER("Cost Component", '<>%1', lvParcelMgntSetupRec."Cost Component Purchase");
      lvJobLedgerRec.CALCSUMS("Total Cost (LCY)");
      CurrCosts := lvJobLedgerRec."Total Cost (LCY)";
    END;

    PROCEDURE GetPrognosis@1100485005(iDate@1100485000 : Date) CurrProg : Decimal;
    VAR
      lvProgRec@1100485001 : Record 11012252;
    BEGIN
      lvProgRec.SETRANGE("Parcel No.", "No.");
      lvProgRec.SETFILTER("Prognosis Date", '<=%1', iDate);
      IF lvProgRec.FINDLAST THEN
        CurrProg := lvProgRec.Prognosis
      ELSE
        CurrProg := 0;
    END;

    PROCEDURE GetDeferredPayment@1100485007(iDate@1100485000 : Date) CurrAmount : Decimal;
    VAR
      lvDefPayRec@1100485001 : Record 11012248;
    BEGIN
      lvDefPayRec.SETRANGE("Parcel No.", "No.");
      lvDefPayRec.SETCURRENTKEY("Parcel No.","Payment Date");
      IF iDate > TODAY THEN
        //When iDate in future, include postponed payments from TODAY
        //because these are not in project entries yet
        lvDefPayRec.SETFILTER("Payment Date", '%1..', TODAY)
      ELSE
        //When iDate in past,  include postponed payments from iDate
        //payments between iDate and WORKDATE are already posted, but they
        //are retrieved from here and not from project entries
        lvDefPayRec.SETFILTER("Payment Date", '%1..', iDate);
      lvDefPayRec.CALCSUMS(Amount);
      CurrAmount := lvDefPayRec.Amount;
    END;

    PROCEDURE GetInterest@1100485008(iDate@1100485000 : Date) CurrInterest : Decimal;
    VAR
      lvJobLedgerRec@1100485001 : Record 11072005;
      lvDefPayRec@1100485002 : Record 11012248;
      lvPurchPriceRec@1100485003 : Record 11012247;
    BEGIN
      //** Loop through all costs and determine interest for each
      CurrInterest := 0;

      //** Purchase prices
      lvPurchPriceRec.SETRANGE("Parcel No.", "No.");
      lvPurchPriceRec.SETFILTER("Purchase Date", '<=%1', iDate);
      IF lvPurchPriceRec.FINDSET THEN BEGIN
        REPEAT
          lvPurchPriceRec.TESTFIELD("Purchase Date");
          CurrInterest += GetInterestOneValue(lvPurchPriceRec."Purchase Date", iDate, lvPurchPriceRec.Amount);
        UNTIL lvPurchPriceRec.NEXT = 0;
      END;

      //** Project entries
      lvJobLedgerRec.SETCURRENTKEY("Main Project No.","Job No.","Cost Component","Extension Contract",
                                   Element,"Cost Type","Global Dimension 2 Code","Entry Type","Posting Date");
      lvJobLedgerRec.SETRANGE("Job No.", "Related Project No.");
      lvJobLedgerRec.SETFILTER("Posting Date", '<=%1', iDate);
      lvJobLedgerRec.SETRANGE("Entry Type", lvJobLedgerRec."Entry Type"::Usage);
      IF lvJobLedgerRec.FINDSET THEN
        REPEAT
          CurrInterest += GetInterestOneValue(lvJobLedgerRec."Posting Date", iDate, lvJobLedgerRec."Total Cost");
        UNTIL lvJobLedgerRec.NEXT = 0;

      //** Prognosis
      //** No interest calculation for prognosis, because not clear from which date (is not equal to
      //** the creation date of the prognosis). Potential it is possible to enter an interest date at the prognosis,
      //** then it is possible to calculate the interest.

      //** Deferred Payment
      IF iDate > WORKDATE THEN BEGIN
        lvDefPayRec.SETRANGE("Parcel No.", "No.");
        lvDefPayRec.SETCURRENTKEY("Parcel No.","Payment Date");
        lvDefPayRec.SETFILTER("Payment Date", '%1..%2', WORKDATE, iDate);
        IF lvDefPayRec.FINDSET THEN
          REPEAT
            CurrInterest += GetInterestOneValue(lvDefPayRec."Payment Date", iDate, lvDefPayRec.Amount);
          UNTIL lvDefPayRec.NEXT = 0;
      END ELSE BEGIN
        //** when iDate in past, then there are no postponed payments which are not present in
        //** project entries and for which interest still needs to be calculated
      END;
    END;

    PROCEDURE GetInterestOneValue@1100485010(iStartDate@1100485000 : Date;iEndDate@1100485001 : Date;iValue@1100485002 : Decimal) CurrInterest : Decimal;
    VAR
      lvYear@1100485003 : Integer;
      lvYearStart@1100485004 : Date;
      lvInterestRec@1100485005 : Record 11012253;
      lvNextInterestRec@1100485008 : Record 11012253;
      lvInterestStart@1100485006 : Date;
      lvDays@1100485007 : Integer;
      lvDaysInYear@1100485009 : Integer;
      lvIntrestPeriod@1100485010 : Decimal;
      lvInterestEnd@1100485011 : Date;
      lvBaseValue@1100485012 : Decimal;
    BEGIN
      //** Calculate composite interest for 1 amount for a period. We calculate year interest,
      //** so no interest over the interest of current year.
      CurrInterest := 0;

      //** Loop through years
      lvYear := DATE2DMY(iStartDate, 3);
      lvYearStart := iStartDate;
      REPEAT
        lvBaseValue := iValue + CurrInterest;
        lvIntrestPeriod := 0;
        //** Loop through interest periodes
        lvInterestRec.SETFILTER("Date Effective", '<=%1', lvYearStart);
        IF NOT lvInterestRec.FINDLAST THEN
          ERROR(Text001, "No.", lvYearStart);
        IF lvYear < DATE2DMY(iEndDate, 3) THEN
          lvInterestRec.SETRANGE("Date Effective", lvYearStart, DMY2DATE(31,12,lvYear))
        ELSE
          lvInterestRec.SETRANGE("Date Effective", lvYearStart, iEndDate);
        REPEAT
          //startdate of interest period:
          lvInterestStart := lvInterestRec."Date Effective";
          IF lvInterestStart < lvYearStart THEN
            lvInterestStart := lvYearStart;

          //enddate of interest period
          IF lvYear < DATE2DMY(iEndDate, 3) THEN
            lvInterestEnd := DMY2DATE(31,12,lvYear)
          ELSE
            lvInterestEnd := iEndDate;
          lvNextInterestRec.SETFILTER("Date Effective", '>%1&<=%2', lvInterestStart, lvInterestEnd);
          IF lvNextInterestRec.FINDFIRST THEN
            lvInterestEnd := lvNextInterestRec."Date Effective"
          ELSE BEGIN
            IF lvYear < DATE2DMY(iEndDate, 3) THEN
              lvInterestEnd := DMY2DATE(1,1,lvYear + 1)
            ELSE
              lvInterestEnd := iEndDate;
          END;

          //number of days on which interest should be paid:
          lvDays := lvInterestEnd - lvInterestStart;

          //days in this year:
          lvDaysInYear := DMY2DATE(1,1,lvYear + 1) - DMY2DATE(1,1,lvYear);

          //interest to pay in this period
          lvIntrestPeriod := lvBaseValue * (lvInterestRec.Rate/100) * lvDays / lvDaysInYear;
          CurrInterest += lvIntrestPeriod;
        UNTIL lvInterestRec.NEXT = 0;

        lvYear += 1;
        lvYearStart := DMY2DATE(1,1,lvYear);
      UNTIL lvYear > DATE2DMY(iEndDate, 3);
    END;

    PROCEDURE ShowTodos@1100525004();
    VAR
      ToDo@1100525000 : Record 5080;
    BEGIN
      //**4PS
      ToDo.SETCURRENTKEY("Parcel No.", Date, Closed);
      ToDo.SETRANGE("Parcel No.", "No.");
      ToDo.SETRANGE("System To-do Type", ToDo."System To-do Type"::Organizer);
      PAGE.RUNMODAL(PAGE::"Task List", ToDo);
    END;

    PROCEDURE CheckContactFeatures@1100485009();
    VAR
      ContactFeatRec@1100485000 : Record 11012753;
      FPSLicenseManagement@1100527400 : Codeunit 11229289;
    BEGIN
      //**4PS
      IF NOT FPSLicenseManagement.LicenseAndReadPermissionForTable(ContactFeatRec) THEN
        EXIT;

      //Create features
      ContactFeatRec.SETRANGE(Code, "No.");
      ContactFeatRec.Code := "No.";
      ContactFeatRec.SETRANGE("Relation Type", ContactFeatRec."Relation Type"::Parcel);
      ContactFeatRec."Relation Type" := ContactFeatRec."Relation Type"::Parcel;
      IF ContactFeatRec.ISEMPTY THEN
        ContactFeatRec.CreateFeatureTypes;
    END;

    PROCEDURE AssistEdit@1(OldParcel@1210190000 : Record 11012240) : Boolean;
    VAR
      Parcel2@1210190001 : Record 11012240;
    BEGIN
      // 31617.n
      WITH Parcel DO BEGIN
        COPY(Rec);
        ParcelSetup.GET;
        TestNoSeries;
        IF NoSeriesMgt.SelectSeries(GetNoSeriesCode,OldParcel."No. Series","No. Series") THEN BEGIN
          NoSeriesMgt.SetSeries("No.");
          IF Parcel2.GET("No.") THEN
            ERROR(Text002,LOWERCASE("No."));
          Rec := Parcel;
          EXIT(TRUE);
        END;
      END;
    END;

    LOCAL PROCEDURE TestNoSeries@6() : Boolean;
    BEGIN
      // 31617.n
      ParcelSetup.TESTFIELD("No. Series Parcels");
    END;

    LOCAL PROCEDURE GetNoSeriesCode@9() : Code[10];
    BEGIN
      // 31617.n
      EXIT(ParcelSetup."No. Series Parcels");
    END;

    BEGIN
    {
      4PS01, JD, Call 12195, 23-06-2008, Value of a parcel is always 0, although size and value per m2 is specified.
    }
    END.
  }
}

