OBJECT Codeunit 11012841 Service Order Info Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TxtIsNotPlantServiceOrder@1100528800 : TextConst 'DEU=Serviceauftrag %1 ist kein Werkzeug-Serviceauftrag.;ENU=Service Order %1 is not a Plant Service Order.;NLD=Serviceorder %1 is geen materieel serviceorder.';
      TxtIsPlantServiceOrder@1100528801 : TextConst 'DEU=Serviceauftrag %1 ist ein Werkzeug-Serviceauftrag;ENU=Service Order %1 is a Plant Service Order;NLD=Serviceorder %1 is een materieel serviceorder';
      FPSLicenseManagement@1100527400 : Codeunit 11229289;
      Text001@1100528201 : TextConst 'DEU=Nur die Postenliste wird angezeigt, ohne erwartete Kosten;ENU=Only Entry List will be displayed without expected costs;NLD=Alleen overzicht van posten wordt getoond zonder verwachte kosten';
      Text002@1100528200 : TextConst 'DEU=Nur die Postenliste wird angezeigt, ohne erwartete Ertr„ge.;ENU=Only Entry List will be displayed without expected revenues.;NLD=Alleen overzicht van posten wordt getoond zonder verwachte opbrengsten.';

    PROCEDURE GetNoOfOpenPurchaseLines@1210190000(IServiceOrderNo@1210190001 : Code[20]) : Integer;
    VAR
      PurchaseLine@1210190000 : Record 39;
    BEGIN
      IF IServiceOrderNo = '' THEN EXIT(0);  //C026680
      PurchaseLine.SETCURRENTKEY("Document Type","Service Order No.");
      PurchaseLine.SETRANGE("Service Order No.", IServiceOrderNo);
      PurchaseLine.SETRANGE("Document Type", PurchaseLine."Document Type"::Order);
      PurchaseLine.SETFILTER("Outstanding Quantity", '<>%1', 0);
      EXIT(PurchaseLine.COUNT);
    END;

    PROCEDURE ShowOpenPurchaseLines@1210190006(IServiceOrderNo@1210190001 : Code[20]);
    VAR
      PurchaseLine@1210190000 : Record 39;
    BEGIN
      IF IServiceOrderNo = '' THEN EXIT;
      PurchaseLine.SETCURRENTKEY("Document Type","Service Order No.");
      PurchaseLine.FILTERGROUP(4);
      PurchaseLine.SETRANGE("Document Type", PurchaseLine."Document Type"::Order);
      PurchaseLine.SETRANGE("Service Order No.", IServiceOrderNo);
      PurchaseLine.FILTERGROUP(0);
      PurchaseLine.SETFILTER("Outstanding Quantity", '<>%1', 0);
      PAGE.RUNMODAL(0, PurchaseLine);
    END;

    PROCEDURE GetNoOfOpenItemJournalLines@1210190001(IServiceOrderNo@1210190000 : Code[20]) : Integer;
    VAR
      ItemJournalLine@1210190001 : Record 83;
    BEGIN
      //C026176.sn
      IF IServiceOrderNo = '' THEN
        EXIT(0);
      //C026176.en

      ItemJournalLine.SETCURRENTKEY("Service Order No.");
      ItemJournalLine.SETRANGE("Service Order No.", IServiceOrderNo);
      EXIT(ItemJournalLine.COUNT);
    END;

    PROCEDURE ShowOpenItemJournalLines@1210190002(IServiceOrderNo@1210190000 : Code[20]);
    VAR
      ItemJournalLine@1210190001 : Record 83;
    BEGIN
      ItemJournalLine.SETCURRENTKEY("Service Order No.");
      ItemJournalLine.SETRANGE("Service Order No.", IServiceOrderNo);
      PAGE.RUNMODAL(0, ItemJournalLine);
    END;

    PROCEDURE GetNoOfServiceTextLines@1100525000(INo@1100525001 : Code[20];ITextType@1100525000 : 'Problem,Internal,Resolve,Cause,Invoice,Report Procedure,Contract Terms,Invoice Agreements') : Integer;
    VAR
      ServiceText@1100525002 : Record 11012882;
    BEGIN
      //C026176.sn
      IF INo = '' THEN
        EXIT(0);
      //C026176.en

      FilterServiceTextLines(INo, ITextType, ServiceText);
      EXIT(ServiceText.COUNT);
    END;

    PROCEDURE GetNoOfServiceTextLinesAsText@1100528619(INo@1100525001 : Code[20];ITextType@1100525000 : 'Problem,Internal,Resolve,Cause,Invoice,Report Procedure,Contract Terms,Invoice Agreements') : Text;
    VAR
      ServiceText@1100525002 : Record 11012882;
      NoOfRecords@1100528600 : Integer;
    BEGIN
      //C026176.sn
      IF INo = '' THEN
        EXIT('');
      //C026176.en

      FilterServiceTextLines(INo, ITextType, ServiceText);
      NoOfRecords := ServiceText.COUNT;
      IF NoOfRecords <> 0 THEN
        EXIT(STRSUBSTNO('[%1]', NoOfRecords));
    END;

    PROCEDURE ShowServiceTextLines@1100525001(INo@1100525001 : Code[20];ITextType@1100525000 : 'Problem,Internal,Resolve,Cause,Invoice,Report Procedure,Contract Terms,Invoice Agreements');
    VAR
      ServiceText@1100525002 : Record 11012882;
      ServiceText2Page@1100409000 : Page 11125206;
    BEGIN
      FilterServiceTextLines(INo, ITextType, ServiceText);
      ServiceText2Page.SETTABLEVIEW(ServiceText);
      ServiceText2Page.EDITABLE(
        NOT (ITextType IN [ITextType::"Report Procedure", ITextType::"Contract Terms", ITextType::"Invoice Agreements"]));
      ServiceText2Page.RUNMODAL;
    END;

    PROCEDURE EditServiceTextLines@1100528614(INo@1100525001 : Code[20];ITextType@1100525000 : 'Problem,Internal,Resolve,Cause,Invoice,Report Procedure,Contract Terms,Invoice Agreements');
    VAR
      ServiceText@1100525002 : Record 11012882;
      ServiceText2Page@1100409000 : Page 11125206;
    BEGIN
      FilterServiceTextLines(INo, ITextType, ServiceText);
      ServiceText2Page.SETTABLEVIEW(ServiceText);
      //ServiceText2Page.EDITABLE(
      //  NOT (ITextType IN [ITextType::"Report Procedure", ITextType::"Contract Terms", ITextType::"Invoice Agreements"]));
      ServiceText2Page.RUNMODAL;
    END;

    PROCEDURE FilterServiceTextLines@1100525002(INo@1100525001 : Code[20];ITextType@1100525000 : 'Problem,Internal,Resolve,Cause,Invoice,Report Procedure,Contract Terms,Invoice Agreements';VAR OServiceText@1100525002 : Record 11012882);
    BEGIN
      OServiceText.RESET;
      OServiceText.FILTERGROUP(4);
      OServiceText.SETRANGE("No.", INo);
      CASE ITextType OF
        ITextType::Problem:
          BEGIN
            OServiceText.SETRANGE("Table Name", OServiceText."Table Name"::"Service Order");
            OServiceText.SETRANGE("Table Field", 90);
          END;
        ITextType::Internal:
          BEGIN
            OServiceText.SETRANGE("Table Name", OServiceText."Table Name"::"Service Order");
            OServiceText.SETRANGE("Table Field", 91);
          END;
        ITextType::Resolve:
          BEGIN
            OServiceText.SETRANGE("Table Name", OServiceText."Table Name"::"Service Order");
            OServiceText.SETRANGE("Table Field", 92);
          END;
        ITextType::Cause:
          BEGIN
            OServiceText.SETRANGE("Table Name", OServiceText."Table Name"::"Service Order");
            OServiceText.SETRANGE("Table Field", 94);
          END;
        ITextType::Invoice:
          BEGIN
            OServiceText.SETRANGE("Table Name", OServiceText."Table Name"::"Service Order");
            OServiceText.SETRANGE("Table Field", 93);
          END;
        ITextType::"Report Procedure":
          BEGIN
            OServiceText.SETRANGE("Table Name", OServiceText."Table Name"::"Service Location");
            OServiceText.SETRANGE("Table Field", 0);
          END;
        ITextType::"Contract Terms":
          BEGIN
            OServiceText.SETRANGE("Table Name", OServiceText."Table Name"::"Service Contract");
            OServiceText.SETRANGE("Table Field", 0);
          END;
        ITextType::"Invoice Agreements":
          BEGIN
            OServiceText.SETRANGE("Table Name", OServiceText."Table Name"::"Service Contract");
            OServiceText.SETRANGE("Table Field", 630);
          END;
      END;
      OServiceText.FILTERGROUP(0);
    END;

    PROCEDURE GetNoOfGeneralTextLines@1100525007(ICode@1100525001 : Code[20];ITextType@1100525000 : 'Job,Customer') : Integer;
    VAR
      GeneralText@1100525002 : Record 11020260;
    BEGIN
      FilterGeneralTextLines(ICode, ITextType, GeneralText);
      EXIT(GeneralText.COUNT);
    END;

    PROCEDURE ShowGeneralTextLines@1100525008(ICode@1100525001 : Code[20];ITextType@1100525000 : 'Job,Customer';ShowCode@1100529600 : Boolean);
    VAR
      GeneralText@1100525002 : Record 11020260;
      GeneralTextFRM@1100525003 : Page 11126493;
    BEGIN
      FilterGeneralTextLines(ICode, ITextType, GeneralText);
      GeneralTextFRM.SetShowCode(ShowCode);
      GeneralTextFRM.SETTABLEVIEW(GeneralText);
      GeneralTextFRM.EDITABLE(NOT (ITextType IN [ITextType::Customer]));
      GeneralTextFRM.RUNMODAL;
    END;

    PROCEDURE FilterGeneralTextLines@1100525009(ICode@1100525001 : Code[20];ITextType@1100525000 : 'Job,Customer';VAR OGeneralText@1100525002 : Record 11020260);
    BEGIN
      OGeneralText.RESET;
      OGeneralText.FILTERGROUP(4);
      OGeneralText.SETRANGE(Code, ICode);
      CASE ITextType OF
        ITextType::Job:
          BEGIN
            OGeneralText.SETRANGE(Table, OGeneralText.Table::Job);
            OGeneralText.SETRANGE("Table Line No.", 0);
          END;
        ITextType::Customer:
          BEGIN
            OGeneralText.SETRANGE(Table, OGeneralText.Table::Customer);
            OGeneralText.SETRANGE("Table Line No.", 0);
          END;
      END;
      OGeneralText.FILTERGROUP(0);
    END;

    PROCEDURE GetNoOfCommentLines@1100525023(IServiceOrderNo@1100525000 : Code[20]) : Integer;
    VAR
      CommentLine@1100525001 : Record 97;
    BEGIN
      //C026176.sn
      IF IServiceOrderNo = '' THEN
        EXIT(0);
      //C026176.en

      FilterCommentLines(IServiceOrderNo, CommentLine);
      EXIT(CommentLine.COUNT);
    END;

    PROCEDURE ShowCommentLines@1100525024(IServiceOrderNo@1100525000 : Code[20]);
    VAR
      CommentLine@1100525001 : Record 97;
    BEGIN
      FilterCommentLines(IServiceOrderNo, CommentLine);
      PAGE.RUNMODAL(PAGE::"Comment Sheet", CommentLine);
    END;

    PROCEDURE FilterCommentLines@1100525025(IServiceOrderNo@1100525000 : Code[20];VAR OCommentLine@1100525001 : Record 97);
    BEGIN
      OCommentLine.RESET;
      OCommentLine.FILTERGROUP(4);
      OCommentLine.SETRANGE("Table Name", OCommentLine."Table Name"::"Service Order");
      OCommentLine.SETRANGE("No.", IServiceOrderNo);
      OCommentLine.FILTERGROUP(0);
    END;

    PROCEDURE GetNoOfTerms@1100525013(ICustomerNo@1100525000 : Code[20];IServiceContractNo@1100525001 : Code[20]) : Integer;
    BEGIN
      //C026176.sn
      IF (ICustomerNo = '') AND (IServiceContractNo = '') THEN
        EXIT(0);
      //C026176.en

      IF IServiceContractNo <> '' THEN
        EXIT(GetNoOfServiceTextLines(IServiceContractNo, 6))
      ELSE
        EXIT(GetNoOfGeneralTextLines(ICustomerNo, 1));
    END;

    PROCEDURE GetNoOfTermsAsText@1100528622(ICustomerNo@1100525000 : Code[20];IServiceContractNo@1100525001 : Code[20]) : Text;
    VAR
      NoOfRecords@1100528600 : Integer;
    BEGIN
      IF IServiceContractNo <> '' THEN
        NoOfRecords := GetNoOfServiceTextLines(IServiceContractNo, 6)
      ELSE
        NoOfRecords := GetNoOfGeneralTextLines(ICustomerNo, 1);
      IF NoOfRecords <> 0 THEN
        EXIT(STRSUBSTNO('[%1]', NoOfRecords));
    END;

    PROCEDURE ShowTerms@1100525014(ICustomerNo@1100525001 : Code[20];IServiceContractNo@1100525000 : Code[20]);
    BEGIN
      IF IServiceContractNo <> '' THEN
        ShowServiceTextLines(IServiceContractNo, 6)
      ELSE
        ShowGeneralTextLines(ICustomerNo, 1, FALSE);
    END;

    PROCEDURE GetNoOfDebriefTextLines@1100525003(IServiceOrderNo@1100525000 : Code[20]) : Integer;
    VAR
      DebriefText@1100525001 : Record 11012886;
    BEGIN
      //C026176.sn
      IF IServiceOrderNo = '' THEN
        EXIT(0);
      //C026176.en

      FilterDebriefTextLines(IServiceOrderNo, DebriefText);
      EXIT(DebriefText.COUNT);
    END;

    PROCEDURE ShowDebriefTextLines@1100525004(IServiceOrderNo@1100525000 : Code[20]);
    VAR
      DebriefText@1100525001 : Record 11012886;
    BEGIN
      FilterDebriefTextLines(IServiceOrderNo, DebriefText);
      PAGE.RUNMODAL(PAGE::"Debrief Text", DebriefText);
    END;

    LOCAL PROCEDURE FilterDebriefTextLines@1100525005(IServiceOrderNo@1100525000 : Code[20];VAR ODebriefText@1100525001 : Record 11012886);
    BEGIN
      ODebriefText.RESET;
      ODebriefText.FILTERGROUP(4);  //C014804
      ODebriefText.SETRANGE(Type, ODebriefText.Type::ServiceOrder);
      ODebriefText.SETRANGE("No.", IServiceOrderNo);
      ODebriefText.FILTERGROUP(0);
    END;

    PROCEDURE GetLimitedDebriefText@1100525027(IServiceOrderNo@1100528600 : Code[20];ILimitNoOfChars@1100528602 : Integer) : Text;
    VAR
      DebriefText@1100525000 : Record 11012886;
      FullText@1100528604 : Text;
    BEGIN
      FilterDebriefTextLines(IServiceOrderNo, DebriefText);
      DebriefText.SETFILTER(Comment, '<>%1', '');
      IF DebriefText.FINDSET THEN
        REPEAT
          IF FullText <> '' THEN
            FullText := FullText + ' ';
          FullText := FullText + DebriefText.Comment;
        UNTIL DebriefText.NEXT = 0;
      EXIT(COPYSTR(FullText, 1, ILimitNoOfChars));
    END;

    PROCEDURE ShowServOrderCostPlusEntries@1100528610(IServiceOrderNo@1100528601 : Code[20]);
    VAR
      ServiceOrderCostPlusEntry@1100528600 : Record 11012825;
    BEGIN
      ServiceOrderCostPlusEntry.FILTERGROUP(4);
      ServiceOrderCostPlusEntry.SETRANGE("Service Order No.", IServiceOrderNo);
      ServiceOrderCostPlusEntry.FILTERGROUP(0);
      PAGE.RUNMODAL(0, ServiceOrderCostPlusEntry);
    END;

    PROCEDURE GetBaseOrderCostRevenue@1100528600(IBaseServiceOrderNo@1100528600 : Code[20];VAR OBudgetAmount@1100528602 : Decimal;VAR OBudgetHours@1100528617 : Decimal;VAR OActualCost@1100528603 : Decimal;VAR OActualHours@1100528619 : Decimal;VAR OOpenPurchase@1100528604 : Decimal;VAR OReceivedNotInvoicedPurchase@1100528605 : Decimal;VAR OOpenAmountHours@1100528606 : Decimal;VAR OOpenHours@1100528618 : Decimal;VAR OReceivedNotInvoicedHours@1100528607 : Decimal;VAR OOpenInventory@1100528608 : Decimal;VAR ORevenue@1100528609 : Decimal;VAR OInvoicePrice@1100528610 : Decimal;VAR OInvoiceInProcess@1100528611 : Decimal;VAR OInvoicedPrice@1100528612 : Decimal;VAR OOpenOvhSurchSoftPurchase@1100528613 : Decimal;VAR OOpenOvhSurchFirmPurchase@1100528616 : Decimal;VAR OOpenOvhSurchHours@1100528614 : Decimal;VAR OOpenOvhSurchInventory@1100528615 : Decimal;VAR OInvoiceCost@1100409000 : Decimal);
    VAR
      ServiceOrder@1100528601 : Record 11012823;
    BEGIN
      OBudgetAmount := 0;
      OBudgetHours := 0;
      OActualCost := 0;
      OActualHours := 0;
      OOpenPurchase := 0;
      OReceivedNotInvoicedPurchase := 0;
      OOpenAmountHours := 0;
      OOpenHours := 0;
      OReceivedNotInvoicedHours := 0;
      OOpenInventory := 0;
      ORevenue := 0;
      OInvoicePrice := 0;
      OInvoiceInProcess := 0;
      OInvoicedPrice := 0;
      OOpenOvhSurchSoftPurchase := 0;
      OOpenOvhSurchFirmPurchase := 0;
      OOpenOvhSurchHours := 0;
      OOpenOvhSurchInventory := 0;
      OInvoiceCost := 0;

      ServiceOrder.SETCURRENTKEY("Base Service Order No.");
      ServiceOrder.SETRANGE("Base Service Order No.", IBaseServiceOrderNo);
      IF ServiceOrder.FINDSET THEN
        REPEAT
          ServiceOrder.CALCFIELDS(
            "Budget Amount", "Budget Hours", "Actual Costs", "Actual Hours", "Open (Purchase)", "Received/Not Invoiced", "Open Amount (Hours)", "Open Hours",
            "Received/Not Inv. Hours", "Open (Inventory)", Revenues, "Invoice Price", "Invoice in Process",
            "Invoiced Price", "Open Ovh. Surch. Soft (Purch.)", "Open Ovh. Surch. Firm (Purch.)",
            "Open Ovh. Surch. (Hours)", "Open Ovh. Surch. (Inventory)", "Invoice Cost");

          OBudgetAmount += ServiceOrder."Budget Amount";
          OBudgetHours += ServiceOrder."Budget Hours";
          OActualCost += ServiceOrder."Actual Costs";
          OActualHours += ServiceOrder."Actual Hours";
          OOpenPurchase += ServiceOrder."Open (Purchase)";
          OReceivedNotInvoicedPurchase += ServiceOrder."Received/Not Invoiced";
          OOpenAmountHours += ServiceOrder."Open Amount (Hours)";
          OOpenHours += ServiceOrder."Open Hours";
          OReceivedNotInvoicedHours += ServiceOrder."Received/Not Inv. Hours";
          OOpenInventory += ServiceOrder."Open (Inventory)";
          ORevenue += ServiceOrder.Revenues;
          OInvoicePrice += ServiceOrder."Invoice Price";
          OInvoiceInProcess += ServiceOrder."Invoice in Process";
          OInvoicedPrice += ServiceOrder."Invoiced Price";
          OOpenOvhSurchSoftPurchase += ServiceOrder."Open Ovh. Surch. Soft (Purch.)";
          OOpenOvhSurchFirmPurchase += ServiceOrder."Open Ovh. Surch. Firm (Purch.)";
          OOpenOvhSurchHours += ServiceOrder."Open Ovh. Surch. (Hours)";
          OOpenOvhSurchInventory += ServiceOrder."Open Ovh. Surch. (Inventory)";
          OInvoiceCost += ServiceOrder."Invoice Cost";
        UNTIL ServiceOrder.NEXT = 0;
    END;

    PROCEDURE GetBaseOrderCostRevenue2@1100528200(IBaseServiceOrderNo@1100528600 : Code[20];VAR OBudgetHoursPlant@1100528617 : Decimal;VAR OOpenHoursSiteMngmnt@1100528200 : Decimal;VAR OInvoicedLCY@1100528201 : Decimal;VAR OChargedonProject@1100528202 : Decimal;VAR OChargedonProjectCost@1100528203 : Decimal;VAR OInvoiceInProcessLCY@1100528204 : Decimal;VAR OCreditMemoInProcess@1100528206 : Decimal;VAR OLatestExpectedReceiptDate@1100528207 : Date;VAR OPreRecordingAmount@1100528208 : Decimal;VAR ORecordingAmount@1100528209 : Decimal;VAR OProductionAmount@1100528210 : Decimal;VAR OChargedtoPlant@1100528211 : Decimal;VAR OChargedtoPlantLocation@1100528212 : Decimal);
    VAR
      ServiceOrder@1100528601 : Record 11012823;
      ServiceUnitPriceManagement@1100528213 : Codeunit 11012846;
    BEGIN
      OBudgetHoursPlant := 0;
      OOpenHoursSiteMngmnt := 0;
      OInvoicedLCY := 0;
      OChargedonProject := 0;
      OChargedonProjectCost := 0;
      OInvoiceInProcessLCY := 0;
      OCreditMemoInProcess := 0;
      OLatestExpectedReceiptDate := 0D;
      OPreRecordingAmount := 0;
      ORecordingAmount := 0;
      OProductionAmount := 0;
      OChargedtoPlant := 0;
      OChargedtoPlantLocation := 0;

      ServiceOrder.SETCURRENTKEY("Base Service Order No.");
      ServiceOrder.SETRANGE("Base Service Order No.", IBaseServiceOrderNo);
      IF ServiceOrder.FINDSET THEN
        REPEAT
          ServiceOrder.CALCFIELDS(
            "Budget Hours Plant", "Open Hours (Site Mngmnt.)", "Invoiced (LCY)",
            "Charged on Project","Charged on Project (Cost)", "Credit Memo in Process",
            "Latest Expected Receipt Date",
            "Pre-Recording Amount", "Recording Amount", "Charged to Plant", "Charged to Plant Location");

          OBudgetHoursPlant += ServiceOrder."Budget Hours Plant";
          OOpenHoursSiteMngmnt += ServiceOrder."Open Hours (Site Mngmnt.)";
          OInvoicedLCY += ServiceOrder."Invoiced (LCY)";
          OChargedonProject += ServiceOrder."Charged on Project";
          OChargedonProjectCost += ServiceOrder."Charged on Project (Cost)";
          OInvoiceInProcessLCY += ServiceOrder.GetInvoiceInProcessLCY;
          OCreditMemoInProcess += ServiceOrder."Credit Memo in Process";
          IF ServiceOrder."Latest Expected Receipt Date" > OLatestExpectedReceiptDate THEN
            OLatestExpectedReceiptDate := ServiceOrder."Latest Expected Receipt Date";
          OPreRecordingAmount += ServiceOrder."Pre-Recording Amount";
          ORecordingAmount += ServiceOrder."Recording Amount";
          OProductionAmount += ServiceUnitPriceManagement.GetProductionAmount(ServiceOrder."No.");
          OChargedtoPlant += ServiceOrder."Charged to Plant";
          OChargedtoPlantLocation += ServiceOrder."Charged to Plant Location";

        UNTIL ServiceOrder.NEXT = 0;
    END;

    PROCEDURE ShowBaseOrderCPEToInvoice@1100528601(IBaseServiceOrderNo@1100528601 : Code[20]);
    VAR
      ServiceOrderCostPlusEntry@1100528600 : Record 11012825;
    BEGIN
      ServiceOrderCostPlusEntry.SETCURRENTKEY("Base Service Order No.");
      ServiceOrderCostPlusEntry.FILTERGROUP(4);
      ServiceOrderCostPlusEntry.SETRANGE("Base Service Order No.", IBaseServiceOrderNo);
      ServiceOrderCostPlusEntry.SETRANGE(Chargeable, TRUE);
      ServiceOrderCostPlusEntry.SETRANGE(Invoiced, FALSE);
      ServiceOrderCostPlusEntry.FILTERGROUP(0);
      PAGE.RUN(0, ServiceOrderCostPlusEntry);
    END;

    PROCEDURE ShowBaseOrderInvoiceInProcess@1100528602(IBaseServiceOrderNo@1100528601 : Code[20]);
    VAR
      SalesLine@1100528600 : Record 37;
    BEGIN
      SalesLine.SETCURRENTKEY("Document Type", "Service Invoice", "Service Order No.", "Base Service Order No.");
      SalesLine.FILTERGROUP(4);
      SalesLine.SETRANGE("Document Type", SalesLine."Document Type"::Invoice);
      SalesLine.SETRANGE("Service Invoice", TRUE);
      SalesLine.SETRANGE("Base Service Order No.", IBaseServiceOrderNo);
      SalesLine.FILTERGROUP(0);
      PAGE.RUN(0, SalesLine);
    END;

    PROCEDURE ShowBaseOrderBudgetLines@1100528603(IBaseServiceOrderNo@1100528600 : Code[20]);
    VAR
      ServiceOrderBudgetLine@1100528601 : Record 11012875;
      ServiceOrder@1100528602 : Record 11012823;
    BEGIN
      ServiceOrder.SETCURRENTKEY("Base Service Order No.");
      ServiceOrder.SETRANGE("Base Service Order No.", IBaseServiceOrderNo);
      IF ServiceOrder.FINDSET THEN
        REPEAT
          ServiceOrderBudgetLine.SETRANGE("Budget Type", ServiceOrderBudgetLine."Budget Type"::Order);
          ServiceOrderBudgetLine.SETRANGE("Service Order No.", ServiceOrder."No.");
          IF ServiceOrderBudgetLine.FINDSET THEN
            REPEAT
              ServiceOrderBudgetLine.MARK(TRUE);
            UNTIL ServiceOrderBudgetLine.NEXT = 0;
        UNTIL ServiceOrder.NEXT = 0;
      ServiceOrderBudgetLine.SETRANGE("Service Order No.");
      ServiceOrderBudgetLine.MARKEDONLY(TRUE);
      PAGE.RUN(0, ServiceOrderBudgetLine);
    END;

    PROCEDURE ShowBaseOrderBudgetHourLines@1100528626(IBaseServiceOrderNo@1100528600 : Code[20]);
    VAR
      ServiceOrderBudgetLine@1100528601 : Record 11012875;
      ServiceOrder@1100528602 : Record 11012823;
    BEGIN
      ServiceOrder.SETCURRENTKEY("Base Service Order No.");
      ServiceOrder.SETRANGE("Base Service Order No.", IBaseServiceOrderNo);
      IF ServiceOrder.FINDSET THEN
        REPEAT
          ServiceOrderBudgetLine.SETRANGE("Budget Type", ServiceOrderBudgetLine."Budget Type"::Order);
          ServiceOrderBudgetLine.SETRANGE("Service Order No.", ServiceOrder."No.");
          ServiceOrderBudgetLine.SETRANGE("Cost Type", ServiceOrderBudgetLine."Cost Type"::Labor);
          IF ServiceOrderBudgetLine.FINDSET THEN
            REPEAT
              ServiceOrderBudgetLine.MARK(TRUE);
            UNTIL ServiceOrderBudgetLine.NEXT = 0;
        UNTIL ServiceOrder.NEXT = 0;
      ServiceOrderBudgetLine.SETRANGE("Service Order No.");
      ServiceOrderBudgetLine.MARKEDONLY(TRUE);
      PAGE.RUN(0, ServiceOrderBudgetLine);
    END;

    PROCEDURE ShowBaseOrderBudgetPlantLines@1100528201(IBaseServiceOrderNo@1100528600 : Code[20]);
    VAR
      ServiceOrderBudgetLine@1100528601 : Record 11012875;
      ServiceOrder@1100528602 : Record 11012823;
    BEGIN
      ServiceOrder.SETCURRENTKEY("Base Service Order No.");
      ServiceOrder.SETRANGE("Base Service Order No.", IBaseServiceOrderNo);
      IF ServiceOrder.FINDSET THEN
        REPEAT
          ServiceOrderBudgetLine.SETRANGE("Budget Type", ServiceOrderBudgetLine."Budget Type"::Order);
          ServiceOrderBudgetLine.SETRANGE("Service Order No.", ServiceOrder."No.");
          ServiceOrderBudgetLine.SETRANGE("Cost Type", ServiceOrderBudgetLine."Cost Type"::Plant);
          IF ServiceOrderBudgetLine.FINDSET THEN
            REPEAT
              ServiceOrderBudgetLine.MARK(TRUE);
            UNTIL ServiceOrderBudgetLine.NEXT = 0;
        UNTIL ServiceOrder.NEXT = 0;
      ServiceOrderBudgetLine.SETRANGE("Service Order No.");
      ServiceOrderBudgetLine.MARKEDONLY(TRUE);
      PAGE.RUN(0, ServiceOrderBudgetLine);
    END;

    PROCEDURE ShowBaseOrderOpenPurchase@1100528604(IBaseServiceOrderNo@1100528600 : Code[20];IUseCopyFunctionality@1100525002 : Boolean);
    VAR
      ServiceOrder@1100525000 : Record 11012823;
      OpenPurchListBaseOrderFRM@1100525001 : Page 11020479;
    BEGIN
      ServiceOrder.SETCURRENTKEY("Base Service Order No.");
      ServiceOrder.SETRANGE("Base Service Order No.", IBaseServiceOrderNo);
      OpenPurchListBaseOrderFRM.LOOKUPMODE(TRUE);
      IF IUseCopyFunctionality THEN
        OpenPurchListBaseOrderFRM.SetSelection(DATABASE::"Service Order Cost Plus Entry", IBaseServiceOrderNo);
      OpenPurchListBaseOrderFRM.SETTABLEVIEW(ServiceOrder);
      OpenPurchListBaseOrderFRM.RUNMODAL;
    END;

    PROCEDURE ShowBaseOrderOpenAmountHours@1100528605(IBaseServiceOrderNo@1100528600 : Code[20]);
    VAR
      HourAccountingLine@1100528601 : Record 11012039;
      HourAccountingLinesFRM@1100525000 : Page 11012277;
    BEGIN
      HourAccountingLine.SETCURRENTKEY("Base Service Order No.");
      HourAccountingLine.SETRANGE("Base Service Order No.", IBaseServiceOrderNo);
      HourAccountingLinesFRM.SetSelection(DATABASE::"Service Order Cost Plus Entry", IBaseServiceOrderNo, '', '', '', TRUE);
      HourAccountingLinesFRM.SETTABLEVIEW(HourAccountingLine);
      HourAccountingLinesFRM.RUNMODAL();
    END;

    PROCEDURE ShowBaseOrderOpenInventory@1100528606(IBaseServiceOrderNo@1100528600 : Code[20]);
    VAR
      ItemJournalLine@1100528601 : Record 83;
      ItemJournalLinesFRM@1100525000 : Page 519;
    BEGIN
      ItemJournalLine.SETCURRENTKEY("Base Service Order No.");
      ItemJournalLine.SETRANGE("Base Service Order No.", IBaseServiceOrderNo);
      ItemJournalLinesFRM.SetSelection(DATABASE::"Service Order Cost Plus Entry", IBaseServiceOrderNo, '', '', '', 0, 0, FALSE);
      ItemJournalLinesFRM.SETTABLEVIEW(ItemJournalLine);
      ItemJournalLinesFRM.RUNMODAL();
    END;

    PROCEDURE ShowBaseOrderActual@1100528607(IBaseServiceOrderNo@1100528600 : Code[20]);
    VAR
      ServiceLedgerEntry@1100528601 : Record 11012819;
    BEGIN
      ServiceLedgerEntry.SETCURRENTKEY("Base Service Order No.");
      ServiceLedgerEntry.SETRANGE("Base Service Order No.", IBaseServiceOrderNo);
      ServiceLedgerEntry.SETRANGE("Cost Present", TRUE);
      PAGE.RUN(0, ServiceLedgerEntry);
    END;

    PROCEDURE ShowBaseOrderActualHours@1100528625(IBaseServiceOrderNo@1100528600 : Code[20]);
    VAR
      ServiceLedgerEntry@1100528601 : Record 11012819;
    BEGIN
      ServiceLedgerEntry.SETCURRENTKEY("Base Service Order No.");
      ServiceLedgerEntry.SETRANGE("Base Service Order No.", IBaseServiceOrderNo);
      ServiceLedgerEntry.SETRANGE("Cost Present", TRUE);
      ServiceLedgerEntry.SETRANGE("Cost Type", ServiceLedgerEntry."Cost Type"::Labor);
      PAGE.RUN(0, ServiceLedgerEntry);
    END;

    PROCEDURE ShowBaseOrderSiteMngmntHours@1100528202(IBaseServiceOrderNo@1100528200 : Code[20]);
    VAR
      ServiceOrder@1100528201 : Record 11012823;
      SiteMngmntHoursLine@1100528202 : Record 11012361;
    BEGIN
      ServiceOrder.SETCURRENTKEY("Base Service Order No.");
      ServiceOrder.SETRANGE("Base Service Order No.", IBaseServiceOrderNo);
      IF ServiceOrder.FINDSET THEN
        REPEAT
          SiteMngmntHoursLine.SETFILTER(Status, '<%1', SiteMngmntHoursLine.Status::Posted);
          SiteMngmntHoursLine.SETRANGE(Type, SiteMngmntHoursLine.Type::Service);
          SiteMngmntHoursLine.SETRANGE("Receiving Company", '');
          SiteMngmntHoursLine.SETRANGE("Object No.", ServiceOrder."No.");
          IF SiteMngmntHoursLine.FINDSET THEN
            REPEAT
              SiteMngmntHoursLine.MARK(TRUE);
            UNTIL SiteMngmntHoursLine.NEXT = 0;
        UNTIL ServiceOrder.NEXT = 0;
      SiteMngmntHoursLine.SETRANGE("Object No.");
      SiteMngmntHoursLine.MARKEDONLY(TRUE);
      PAGE.RUN(0, SiteMngmntHoursLine);
    END;

    PROCEDURE ShowBaseOrderInvoiceCost@1100409003(IBaseServiceOrderNo@1100528600 : Code[20]);
    VAR
      ServiceLedgerEntry@1100528601 : Record 11012819;
    BEGIN
      ServiceLedgerEntry.SETCURRENTKEY("Base Service Order No.");
      ServiceLedgerEntry.SETRANGE("Base Service Order No.", IBaseServiceOrderNo);
      ServiceLedgerEntry.SETRANGE("Cost Present", TRUE);
      ServiceLedgerEntry.SETRANGE(Chargeable, TRUE);
      ServiceLedgerEntry.SETRANGE("Cost Plus Entry Created", FALSE);
      PAGE.RUN(0, ServiceLedgerEntry);
    END;

    PROCEDURE ShowBaseOrderRevenue@1100528608(IBaseServiceOrderNo@1100528600 : Code[20]);
    VAR
      ServiceLedgerEntry@1100528601 : Record 11012819;
    BEGIN
      ServiceLedgerEntry.SETCURRENTKEY("Base Service Order No.");
      ServiceLedgerEntry.SETRANGE("Base Service Order No.", IBaseServiceOrderNo);
      ServiceLedgerEntry.SETRANGE("Revenue Present", TRUE);
      PAGE.RUN(0, ServiceLedgerEntry);
    END;

    PROCEDURE ShowBaseOrderCostPlusEntries@1100528609(IBaseServiceOrderNo@1100528601 : Code[20]);
    VAR
      ServiceOrderCostPlusEntry@1100528600 : Record 11012825;
    BEGIN
      ServiceOrderCostPlusEntry.FILTERGROUP(4);
      ServiceOrderCostPlusEntry.SETCURRENTKEY("Base Service Order No.");
      ServiceOrderCostPlusEntry.SETRANGE("Base Service Order No.", IBaseServiceOrderNo);
      ServiceOrderCostPlusEntry.FILTERGROUP(0);
      PAGE.RUN(PAGE::"Service Order Cost Plus SF3", ServiceOrderCostPlusEntry);
    END;

    PROCEDURE ShowBaseOrderInvoiced@1100528203(IBaseServiceOrderNo@1100528600 : Code[20]);
    VAR
      ServiceLedgerEntry@1100528601 : Record 11012819;
    BEGIN
      ServiceLedgerEntry.SETCURRENTKEY("Base Service Order No.");
      ServiceLedgerEntry.SETRANGE("Base Service Order No.", IBaseServiceOrderNo);
      ServiceLedgerEntry.SETRANGE("Cost Type", ServiceLedgerEntry."Cost Type"::Revenues);
      PAGE.RUN(0, ServiceLedgerEntry);
    END;

    PROCEDURE ShowBaseOrderChargedOnProject@1100528204(IBaseServiceOrderNo@1100528600 : Code[20]);
    VAR
      ServiceLedgerEntry@1100528601 : Record 11012819;
    BEGIN
      ServiceLedgerEntry.SETCURRENTKEY("Base Service Order No.");
      ServiceLedgerEntry.SETRANGE("Base Service Order No.", IBaseServiceOrderNo);
      ServiceLedgerEntry.SETRANGE("Transfer to Project", ServiceLedgerEntry."Transfer to Project"::Processed);
      PAGE.RUN(0, ServiceLedgerEntry);
    END;

    PROCEDURE ShowBaseOrderServiceEntries@1100528205(IBaseServiceOrderNo@1100528202 : Code[20];IType@1100528201 : Integer);
    VAR
      ServiceLedgerEntry@1100528200 : Record 11012819;
    BEGIN
      ServiceLedgerEntry.SETCURRENTKEY("Base Service Order No.");
      ServiceLedgerEntry.SETRANGE("Base Service Order No.", IBaseServiceOrderNo);
      IF IType = 0 THEN BEGIN
        ServiceLedgerEntry.SETRANGE("Cost Present", TRUE);
        MESSAGE(Text001);
      END ELSE BEGIN
        ServiceLedgerEntry.SETRANGE("Revenue Present", TRUE);
        MESSAGE(Text002);
      END;
      PAGE.RUNMODAL(PAGE::"Service Entry List", ServiceLedgerEntry);
    END;

    PROCEDURE ShowBaseOrderSUPRecordingLines@1100528206(IBaseServiceOrderNo@1100528200 : Code[20]);
    VAR
      ServiceOrder@1100528201 : Record 11012823;
      SUPRecordingLine@1100528202 : Record 11071772;
    BEGIN
      ServiceOrder.SETCURRENTKEY("Base Service Order No.");
      ServiceOrder.SETRANGE("Base Service Order No.", IBaseServiceOrderNo);
      IF ServiceOrder.FINDSET THEN
        REPEAT
          SUPRecordingLine.SETRANGE("Service Order No.", ServiceOrder."No.");
          IF SUPRecordingLine.FINDSET THEN
            REPEAT
              SUPRecordingLine.MARK(TRUE);
            UNTIL SUPRecordingLine.NEXT = 0;
        UNTIL ServiceOrder.NEXT = 0;
      SUPRecordingLine.SETRANGE("Service Order No.");
      SUPRecordingLine.MARKEDONLY(TRUE);
      PAGE.RUN(0, SUPRecordingLine);
    END;

    PROCEDURE ShowBaseOrderSUPProductionLines@1100528207(IBaseServiceOrderNo@1100528200 : Code[20]);
    VAR
      ServiceOrder@1100528201 : Record 11012823;
      SUPProductionLine@1100528202 : Record 11071774;
    BEGIN
      ServiceOrder.SETCURRENTKEY("Base Service Order No.");
      ServiceOrder.SETRANGE("Base Service Order No.", IBaseServiceOrderNo);
      IF ServiceOrder.FINDSET THEN
        REPEAT
          SUPProductionLine.SETRANGE("Service Order No.", ServiceOrder."No.");
          IF SUPProductionLine.FINDSET THEN
            REPEAT
              SUPProductionLine.MARK(TRUE);
            UNTIL SUPProductionLine.NEXT = 0;
        UNTIL ServiceOrder.NEXT = 0;
      SUPProductionLine.SETRANGE("Service Order No.");
      SUPProductionLine.MARKEDONLY(TRUE);
      PAGE.RUN(0, SUPProductionLine);
    END;

    PROCEDURE ShowBaseOrderPlantEntries@1100528208(IBaseServiceOrderNo@1100528200 : Code[20];IOnlyLocation@1100528203 : Boolean);
    VAR
      ServiceOrder@1100528201 : Record 11012823;
      PlantLedgerEntry@1100528202 : Record 11012572;
    BEGIN
      ServiceOrder.SETCURRENTKEY("Base Service Order No.");
      ServiceOrder.SETRANGE("Base Service Order No.", IBaseServiceOrderNo);

      PlantLedgerEntry.SETCURRENTKEY("Service Order No.","Cost Object");
      PlantLedgerEntry.SETRANGE("Plant Invoice Origin", PlantLedgerEntry."Plant Invoice Origin"::"Service Order");
      IF IOnlyLocation THEN
        PlantLedgerEntry.SETFILTER("Plant Location", '<>%1', '');

      IF ServiceOrder.FINDSET THEN
        REPEAT
          PlantLedgerEntry.SETRANGE("Service Order No.", ServiceOrder."No.");
          IF PlantLedgerEntry.FINDSET THEN
            REPEAT
              PlantLedgerEntry.MARK(TRUE);
            UNTIL PlantLedgerEntry.NEXT = 0;
        UNTIL ServiceOrder.NEXT = 0;
      PlantLedgerEntry.SETRANGE("Service Order No.");
      PlantLedgerEntry.MARKEDONLY(TRUE);
      PAGE.RUN(0, PlantLedgerEntry);
    END;

    PROCEDURE GetNoOfOpenPurchLinesBaseOrder@1100409001(IBaseServiceOrderNo@1210190001 : Code[20]) : Integer;
    VAR
      PurchaseLine@1210190000 : Record 39;
    BEGIN
      IF IBaseServiceOrderNo = '' THEN EXIT(0);   //C026680
      PurchaseLine.SETCURRENTKEY("Base Service Order No.");
      PurchaseLine.SETRANGE("Base Service Order No.", IBaseServiceOrderNo);
      PurchaseLine.SETRANGE("Document Type", PurchaseLine."Document Type"::Order);
      PurchaseLine.SETFILTER("Outstanding Quantity", '<>%1', 0);
      EXIT(PurchaseLine.COUNT);
    END;

    PROCEDURE ShowOpenPurchaseLinesBaseOrder@1100409006(IBaseServiceOrderNo@1210190001 : Code[20]);
    VAR
      PurchaseLine@1210190000 : Record 39;
    BEGIN
      IF IBaseServiceOrderNo = '' THEN EXIT;
      PurchaseLine.SETCURRENTKEY("Base Service Order No.");
      PurchaseLine.FILTERGROUP(4);
      PurchaseLine.SETRANGE("Document Type", PurchaseLine."Document Type"::Order);
      PurchaseLine.SETRANGE("Base Service Order No.", IBaseServiceOrderNo);
      PurchaseLine.FILTERGROUP(0);
      PurchaseLine.SETFILTER("Outstanding Quantity", '<>%1', 0);
      PAGE.RUNMODAL(0, PurchaseLine);
    END;

    PROCEDURE GetNoOfRNIPurchLinesBaseOrder@1100409015(IBaseServiceOrderNo@1210190001 : Code[20]) : Integer;
    VAR
      PurchaseLine@1210190000 : Record 39;
    BEGIN
      IF IBaseServiceOrderNo = '' THEN EXIT(0);  //C026680
      PurchaseLine.SETCURRENTKEY("Base Service Order No.");
      PurchaseLine.SETRANGE("Base Service Order No.", IBaseServiceOrderNo);
      PurchaseLine.SETRANGE("Document Type", PurchaseLine."Document Type"::Order);
      PurchaseLine.SETFILTER("Qty. Rcd. Not Invoiced", '<>%1', 0);
      EXIT(PurchaseLine.COUNT);
    END;

    PROCEDURE ShowRNIPurchaseLinesBaseOrder@1100409013(IBaseServiceOrderNo@1210190001 : Code[20]);
    VAR
      PurchaseLine@1210190000 : Record 39;
    BEGIN
      IF IBaseServiceOrderNo = '' THEN EXIT;
      PurchaseLine.SETCURRENTKEY("Base Service Order No.");
      PurchaseLine.FILTERGROUP(4);
      PurchaseLine.SETRANGE("Document Type", PurchaseLine."Document Type"::Order);
      PurchaseLine.SETRANGE("Base Service Order No.", IBaseServiceOrderNo);
      PurchaseLine.FILTERGROUP(0);

      PurchaseLine.SETFILTER("Qty. Rcd. Not Invoiced", '<>%1', 0);
      PAGE.RUNMODAL(0, PurchaseLine);
    END;

    PROCEDURE GetNoOfRNIPurchLinesServiceOrder@1100528631(IServiceOrderNo@1210190001 : Code[20]) : Integer;
    VAR
      PurchaseLine@1210190000 : Record 39;
      ServiceOrder@1100528600 : Record 11012823;
    BEGIN
      IF IServiceOrderNo = '' THEN
        EXIT(0);  //C026680
      IF NOT ServiceOrder.GET(IServiceOrderNo) THEN
        EXIT(0);
      PurchaseLine.SETCURRENTKEY("Base Service Order No.");
      PurchaseLine.SETRANGE("Base Service Order No.", ServiceOrder."Base Service Order No.");
      PurchaseLine.SETRANGE("Service Order No.", IServiceOrderNo);
      PurchaseLine.SETRANGE("Document Type", PurchaseLine."Document Type"::Order);
      PurchaseLine.SETFILTER("Qty. Rcd. Not Invoiced", '<>%1', 0);
      EXIT(PurchaseLine.COUNT);
    END;

    PROCEDURE ShowRNIPurchaseLinesServiceOrder@1100528630(IServiceOrderNo@1210190001 : Code[20]);
    VAR
      PurchaseLine@1210190000 : Record 39;
      ServiceOrder@1100528600 : Record 11012823;
    BEGIN
      IF IServiceOrderNo = '' THEN
        EXIT;
      IF NOT ServiceOrder.GET(IServiceOrderNo) THEN
        EXIT;
      PurchaseLine.SETCURRENTKEY("Base Service Order No.");
      PurchaseLine.FILTERGROUP(4);
      PurchaseLine.SETRANGE("Document Type", PurchaseLine."Document Type"::Order);
      PurchaseLine.SETRANGE("Base Service Order No.", ServiceOrder."Base Service Order No.");
      PurchaseLine.SETRANGE("Service Order No.", IServiceOrderNo);
      PurchaseLine.FILTERGROUP(0);

      PurchaseLine.SETFILTER("Qty. Rcd. Not Invoiced", '<>%1', 0);
      PAGE.RUNMODAL(0, PurchaseLine);
    END;

    PROCEDURE GetNoOfOpenItemJnlLnsBaseOrder@1100409000(IBaseServiceOrderNo@1210190000 : Code[20]) : Integer;
    VAR
      ItemJournalLine@1210190001 : Record 83;
    BEGIN
      //C026176.sn
      IF IBaseServiceOrderNo = '' THEN
        EXIT(0);
      //C026176.en

      ItemJournalLine.SETCURRENTKEY("Base Service Order No.");
      ItemJournalLine.SETRANGE("Base Service Order No.", IBaseServiceOrderNo);
      EXIT(ItemJournalLine.COUNT);
    END;

    PROCEDURE ShowOpenItemJnlLinesBaseOrder@1100409008(IBaseServiceOrderNo@1210190000 : Code[20]);
    VAR
      ItemJournalLine@1210190001 : Record 83;
    BEGIN
      ItemJournalLine.SETCURRENTKEY("Base Service Order No.");
      ItemJournalLine.SETRANGE("Base Service Order No.", IBaseServiceOrderNo);
      PAGE.RUNMODAL(0, ItemJournalLine);
    END;

    PROCEDURE GetDSHistorySOs@1100409010(IServiceLocationNo@1100409001 : Code[20];VAR OServiceOrder@1100409000 : Record 11012823);
    VAR
      ServiceLocationInfoMgt@1100409003 : Codeunit 11012856;
    BEGIN
      ServiceLocationInfoMgt.GetDataSetHistorySOs(IServiceLocationNo, OServiceOrder)
    END;

    PROCEDURE GetNoOfHistorySOs@1100409009(IServiceLocationNo@1100409001 : Code[20]) : Integer;
    VAR
      ServiceOrder@1100409002 : Record 11012823;
    BEGIN
      //C026176.sn
      IF IServiceLocationNo = '' THEN
        EXIT(0);
      //C026176.en

      GetDSHistorySOs(IServiceLocationNo, ServiceOrder);
      EXIT(ServiceOrder.COUNT);
    END;

    PROCEDURE ShowHistorySOs@1100409007(IServiceLocationNo@1100409001 : Code[20]);
    VAR
      ServiceOrder@1100409002 : Record 11012823;
    BEGIN
      GetDSHistorySOs(IServiceLocationNo, ServiceOrder);
      PAGE.RUN(0, ServiceOrder);
    END;

    PROCEDURE GetDSOpenMaintSOs@1100409005(IServiceLocationNo@1100409002 : Code[20];VAR OServiceOrder@1100409000 : Record 11012823);
    VAR
      ServiceLocationInfoMgt@1100409004 : Codeunit 11012856;
    BEGIN
      ServiceLocationInfoMgt.GetDSOpenSOsBySourceType(IServiceLocationNo, OServiceOrder."Source Type"::Contract, OServiceOrder)
    END;

    PROCEDURE GetNoOfOpenMaintSOs@1100409004(IServiceLocationNo@1100409001 : Code[20]) : Integer;
    VAR
      ServiceOrder@1100409002 : Record 11012823;
    BEGIN
      //C026176.sn
      IF IServiceLocationNo = '' THEN
        EXIT(0);
      //C026176.en

      GetDSOpenMaintSOs(IServiceLocationNo, ServiceOrder);
      EXIT(ServiceOrder.COUNT);
    END;

    PROCEDURE ShowOpenMaintSOs@1100409002(IServiceLocationNo@1100409001 : Code[20]);
    VAR
      ServiceOrder@1100409002 : Record 11012823;
    BEGIN
      GetDSOpenMaintSOs(IServiceLocationNo, ServiceOrder);
      PAGE.RUN(0, ServiceOrder);
    END;

    PROCEDURE GetPlantCompanyDataset@1100409012(IServiceOrderNo@1100409000 : Code[20];VAR OPlantManagementCompany@1100409002 : Record 11020586);
    VAR
      PlantLocation@1100409001 : Record 11012554;
      ServiceSetup@1100409004 : Record 11012800;
      CompanyData@1100409005 : Record 11020674;
      PlantLocationCode@1100409003 : Code[20];
    BEGIN
      IF OPlantManagementCompany.FINDSET THEN BEGIN
        ServiceSetup.GET;
        IF CompanyData.GET(COMPANYNAME) THEN;
        REPEAT
          PlantLocation.CHANGECOMPANY(OPlantManagementCompany."Plant Company");
          CASE ServiceSetup."Build Plant Location Code from" OF
            ServiceSetup."Build Plant Location Code from"::ServNo:
              PlantLocationCode := IServiceOrderNo;
            ServiceSetup."Build Plant Location Code from"::CompNoServNo:
              PlantLocationCode := CompanyData."Company No." + IServiceOrderNo;
            ELSE
              PlantLocationCode := '';
          END;
          IF (PlantLocationCode <> '') AND PlantLocation.GET(PlantLocationCode) THEN
            OPlantManagementCompany.MARK(TRUE);
        UNTIL OPlantManagementCompany.NEXT = 0;
      END;

      OPlantManagementCompany.MARKEDONLY(TRUE);
    END;

    PROCEDURE ShowPlantCompanies@1100409014(IServiceOrderNo@1100409000 : Code[20]);
    VAR
      TmpLinkedPlantLocation@1100409002 : TEMPORARY Record 11012657;
    BEGIN
      //GetPlantCompanyDataset(IServiceOrderNo, PlantManagementCompany);
      //PAGE.RUNMODAL(0, PlantManagementCompany);

      TmpLinkedPlantLocation.FILTERGROUP(4);
      TmpLinkedPlantLocation.SETRANGE("Link Type", TmpLinkedPlantLocation."Link Type"::"Service Order");
      TmpLinkedPlantLocation."Link Type" := TmpLinkedPlantLocation."Link Type"::"Service Order";
      TmpLinkedPlantLocation.FILTERGROUP(0);
      TmpLinkedPlantLocation."Service Order No." := IServiceOrderNo;
      PAGE.RUNMODAL(PAGE::"Linked Plant Location List", TmpLinkedPlantLocation);
    END;

    PROCEDURE GetNoOfPlantLocations@1100409011(IServiceOrderNo@1100409002 : Code[20]) : Integer;
    VAR
      PlantManagementCompany@1100409000 : Record 11020586;
    BEGIN
      //C026176.sn
      IF IServiceOrderNo = '' THEN
        EXIT(0);
      //C026176.en

      GetPlantCompanyDataset(IServiceOrderNo, PlantManagementCompany);
      EXIT(PlantManagementCompany.COUNT);
    END;

    PROCEDURE GetFirstLineServiceText@1100409017(IServiceOrderNo@1100409002 : Code[20];IFieldType@1100409001 : 'Problem,Internal,Resolve,Cause,Invoice,Report Procedure,Contract Terms,Invoice Agreements') : Text[80];
    VAR
      ServiceText@1100409000 : Record 11012882;
    BEGIN
      FilterServiceTextLines(IServiceOrderNo, IFieldType, ServiceText);
      ServiceText.SETFILTER(Comment, '<>%1', '');
      IF ServiceText.FINDFIRST THEN
        EXIT(ServiceText.Comment);
    END;

    PROCEDURE GetFirstLineProblemText@1100409016(IServiceOrderNo@1100409000 : Code[20]) : Text[80];
    VAR
      FieldType@1100409001 : 'Problem,Internal,Resolve,Cause,Invoice,Report Procedure,Contract Terms,Invoice Agreements';
    BEGIN
      EXIT(GetFirstLineServiceText(IServiceOrderNo, FieldType::Problem));
    END;

    PROCEDURE GetFirstLineInternalText@1100409018(IServiceOrderNo@1100409000 : Code[20]) : Text[80];
    VAR
      FieldType@1100409001 : 'Problem,Internal,Resolve,Cause,Invoice,Report Procedure,Contract Terms,Invoice Agreements';
    BEGIN
      EXIT(GetFirstLineServiceText(IServiceOrderNo, FieldType::Internal));
    END;

    PROCEDURE GetFirstLineCauseText@1100529400(IServiceOrderNo@1100409000 : Code[20]) : Text[80];
    VAR
      FieldType@1100409001 : 'Problem,Internal,Resolve,Cause,Invoice,Report Procedure,Contract Terms,Invoice Agreements';
    BEGIN
      EXIT(GetFirstLineServiceText(IServiceOrderNo, FieldType::Cause));
    END;

    PROCEDURE GetFirstLineSolutionText@1100525029(IServiceOrderNo@1100409000 : Code[20]) : Text[80];
    VAR
      FieldType@1100409001 : 'Problem,Internal,Resolve,Cause,Invoice,Report Procedure,Contract Terms,Invoice Agreements';
    BEGIN
      EXIT(GetFirstLineServiceText(IServiceOrderNo, FieldType::Resolve));  //C026664
    END;

    PROCEDURE GetLimitedServiceText@1100528615(IServiceOrderNo@1100528600 : Code[20];IFieldType@1100528601 : 'Problem,Internal,Resolve,Cause,Invoice,Report Procedure,Contract Terms,Invoice Agreements';ILimitNoOfChars@1100528602 : Integer) : Text;
    VAR
      ServiceText@1100528603 : Record 11012882;
      FullText@1100528604 : Text;
    BEGIN
      FilterServiceTextLines(IServiceOrderNo, IFieldType, ServiceText);
      ServiceText.SETFILTER(Comment, '<>%1', '');
      IF ServiceText.FINDSET THEN
        REPEAT
          IF FullText <> '' THEN
            FullText := FullText + ' ';
          FullText := FullText + ServiceText.Comment;
        UNTIL ServiceText.NEXT = 0;
      EXIT(COPYSTR(FullText, 1, ILimitNoOfChars));
    END;

    PROCEDURE GetLimitedInternalText@1100528620(IServiceOrderNo@1100528601 : Code[20];ILimitNoOfChars@1100528602 : Integer) : Text;
    VAR
      FieldType@1100528600 : 'Problem,Internal,Resolve,Cause,Invoice,Report Procedure,Contract Terms,Invoice Agreements';
    BEGIN
      EXIT(GetLimitedServiceText(IServiceOrderNo, FieldType::Internal, ILimitNoOfChars));
    END;

    PROCEDURE GetLimitedCauseText@1100525026(IServiceOrderNo@1100528602 : Code[20];ILimitNoOfChars@1100528601 : Integer) : Text;
    VAR
      FieldType@1100528600 : 'Problem,Internal,Resolve,Cause,Invoice,Report Procedure,Contract Terms,Invoice Agreements';
    BEGIN
      EXIT(GetLimitedServiceText(IServiceOrderNo, FieldType::Cause, ILimitNoOfChars));
    END;

    PROCEDURE GetLimitedSolutionText@1100528621(IServiceOrderNo@1100528602 : Code[20];ILimitNoOfChars@1100528601 : Integer) : Text;
    VAR
      FieldType@1100528600 : 'Problem,Internal,Resolve,Cause,Invoice,Report Procedure,Contract Terms,Invoice Agreements';
    BEGIN
      EXIT(GetLimitedServiceText(IServiceOrderNo, FieldType::Resolve, ILimitNoOfChars));
    END;

    PROCEDURE GetLimitedInvoiceText@1100525028(IServiceOrderNo@1100528602 : Code[20];ILimitNoOfChars@1100528601 : Integer) : Text;
    VAR
      FieldType@1100528600 : 'Problem,Internal,Resolve,Cause,Invoice,Report Procedure,Contract Terms,Invoice Agreements';
    BEGIN
      EXIT(GetLimitedServiceText(IServiceOrderNo, FieldType::Invoice, ILimitNoOfChars));
    END;

    PROCEDURE CollectSOInvoicesBy@1100525006(ICustomerNo@1100525000 : Code[20]) : Text[50];
    VAR
      Customer@1100525001 : Record 18;
    BEGIN
      IF ICustomerNo = '' THEN
        EXIT;
      IF NOT Customer.GET(ICustomerNo) THEN
        EXIT;
      EXIT(FORMAT(Customer."Collect SO Invoices By"));
    END;

    LOCAL PROCEDURE GetSOObjectDS@1100528613(IServiceOrderNo@1100528601 : Code[20];VAR OServiceOrderObject@1100528600 : Record 11071724);
    BEGIN
      OServiceOrderObject.RESET;
      OServiceOrderObject.SETRANGE("Service Order No.", IServiceOrderNo);
    END;

    PROCEDURE GetSOObjectNo@1100528611(IServiceOrderNo@1100528600 : Code[20]) : Code[20];
    VAR
      ServiceOrderObject@1100528601 : Record 11071724;
      NoOfObjects@1100528602 : Integer;
    BEGIN
      GetSOObjectDS(IServiceOrderNo, ServiceOrderObject);
      NoOfObjects := ServiceOrderObject.COUNT;
      CASE NoOfObjects OF
        0: EXIT;
        1: BEGIN
             ServiceOrderObject.FINDFIRST;
             EXIT(ServiceOrderObject."Object No.");
           END;
      ELSE
        EXIT(STRSUBSTNO('[%1]', NoOfObjects));
      END;
    END;

    PROCEDURE GetSOObjectDescription@1100528616(IServiceOrderNo@1100528600 : Code[20]) : Text[100];
    VAR
      ServiceOrderObject@1100528602 : Record 11071724;
    BEGIN
      GetSOObjectDS(IServiceOrderNo, ServiceOrderObject);
      IF ServiceOrderObject.COUNT = 1 THEN BEGIN
        ServiceOrderObject.FINDFIRST;
        ServiceOrderObject.CALCFIELDS("Object Description");
        EXIT(ServiceOrderObject."Object Description");
      END;
    END;

    PROCEDURE ShowSOObjects@1100528612(IServiceOrderNo@1100528600 : Code[20]);
    VAR
      ServiceOrderObject@1100528601 : Record 11071724;
    BEGIN
      GetSOObjectDS(IServiceOrderNo, ServiceOrderObject);
      PAGE.RUNMODAL(0, ServiceOrderObject);
    END;

    PROCEDURE GetSOSameContractDS@1100525010(IServiceContractNo@1100525000 : Code[20];VAR OServiceOrder@1100525001 : Record 11012823);
    BEGIN
      OServiceOrder.RESET;
      OServiceOrder.SETCURRENTKEY("Service Contract No.");
      OServiceOrder.SETRANGE("Service Contract No.", IServiceContractNo);
    END;

    PROCEDURE GetNoOfSOSameContract@1100525015(IServiceContractNo@1100525001 : Code[20]) : Integer;
    VAR
      ServiceOrder@1100525000 : Record 11012823;
    BEGIN
      //C026176.sn
      IF IServiceContractNo = '' THEN
        EXIT(0);
      //C026176.en

      GetSOSameContractDS(IServiceContractNo, ServiceOrder);
      EXIT(ServiceOrder.COUNT);
    END;

    PROCEDURE ShowSOSameContract@1100525018(IServiceContractNo@1100525000 : Code[20]);
    VAR
      ServiceOrder@1100525001 : Record 11012823;
    BEGIN
      GetSOSameContractDS(IServiceContractNo, ServiceOrder);
      PAGE.RUNMODAL(0, ServiceOrder);
    END;

    PROCEDURE GetSOSameLocationDS@1100525011(IServiceLocationNo@1100525000 : Code[20];VAR OServiceOrder@1100525001 : Record 11012823);
    BEGIN
      OServiceOrder.RESET;
      OServiceOrder.SETCURRENTKEY("Service Location No.");
      OServiceOrder.SETRANGE("Service Location No.", IServiceLocationNo);
    END;

    PROCEDURE GetNoOfSOSameLocation@1100525016(IServiceLocationNo@1100525000 : Code[20]) : Integer;
    VAR
      ServiceOrder@1100525001 : Record 11012823;
    BEGIN
      //C026176.sn
      IF IServiceLocationNo = '' THEN
        EXIT(0);
      //C026176.en

      GetSOSameLocationDS(IServiceLocationNo, ServiceOrder);
      EXIT(ServiceOrder.COUNT);
    END;

    PROCEDURE ShowSOSameLocation@1100525019(IServiceLocationNo@1100525000 : Code[20]);
    VAR
      ServiceOrder@1100525001 : Record 11012823;
    BEGIN
      GetSOSameLocationDS(IServiceLocationNo, ServiceOrder);
      PAGE.RUNMODAL(0, ServiceOrder);
    END;

    PROCEDURE GetSOSameCallDS@1100525012(IServiceCallNo@1100525000 : Code[20];VAR OServiceOrder@1100525001 : Record 11012823);
    BEGIN
      OServiceOrder.RESET;
      OServiceOrder.SETCURRENTKEY("Call No.");
      OServiceOrder.SETRANGE("Call No.", IServiceCallNo);
    END;

    PROCEDURE GetNoOfSOSameCall@1100525017(IServiceCallNo@1100525000 : Code[20]) : Integer;
    VAR
      ServiceOrder@1100525001 : Record 11012823;
    BEGIN
      //C026176.sn
      IF IServiceCallNo = '' THEN
        EXIT(0);
      //C026176.en

      GetSOSameCallDS(IServiceCallNo, ServiceOrder);
      EXIT(ServiceOrder.COUNT)
    END;

    PROCEDURE ShowSOSameCall@1100525020(IServiceCallNo@1100525000 : Code[20]);
    VAR
      ServiceOrder@1100525001 : Record 11012823;
    BEGIN
      GetSOSameCallDS(IServiceCallNo, ServiceOrder);
      PAGE.RUNMODAL(0, ServiceOrder);
    END;

    PROCEDURE GetNoOfWorkOrders@1100525021(ServiceOrderNo@1100525000 : Code[20]) : Integer;
    VAR
      WorkOrder@1100525001 : Record 11229279;
    BEGIN
      //DP00465
      IF ServiceOrderNo = '' THEN
        EXIT(0);
      WorkOrder.SETCURRENTKEY("Source Company", "Source Type", "Source No.");
      WorkOrder.SETRANGE("Source Company", COMPANYNAME);
      WorkOrder.SETRANGE("Source Type", WorkOrder."Source Type"::ServiceOrder);
      WorkOrder.SETRANGE("Source No.", ServiceOrderNo);
      EXIT(WorkOrder.COUNT);
    END;

    PROCEDURE ShowSOWorkOrders@1100525022(ServiceOrderNo@1100525000 : Code[20]);
    VAR
      WorkOrder@1100528600 : Record 11229279;
      WorkOrders@1100525001 : Page 11229284;
    BEGIN
      //DP00465
      IF ServiceOrderNo = '' THEN
        EXIT;
      WorkOrders.SetSelections(WorkOrder."Source Type"::ServiceOrder, ServiceOrderNo, '');
      WorkOrders.RUNMODAL;
    END;

    PROCEDURE GetSOStandardObjectDS@1100528618(IServiceOrderNo@1100528600 : Code[20];VAR OStandardObject@1100528603 : Record 11020334);
    VAR
      ServiceOrderObject@1100528602 : Record 11071724;
    BEGIN
      OStandardObject.RESET;
      ServiceOrderObject.SETRANGE("Service Order No.", IServiceOrderNo);
      IF ServiceOrderObject.FINDSET THEN
        REPEAT
          IF ServiceOrderObject."Standard Object No." <> '' THEN BEGIN
            OStandardObject."No." := ServiceOrderObject."Standard Object No.";
            OStandardObject.MARK(TRUE);
          END;
        UNTIL ServiceOrderObject.NEXT = 0;
      OStandardObject.MARKEDONLY(TRUE);
    END;

    PROCEDURE GetSOStandardObjectNo@1100528617(IServiceOrderNo@1100528600 : Code[20];VAR OStandardObjectDescription@1100528601 : Text[100]) : Code[20];
    VAR
      StandardObject@1100528602 : Record 11020334;
    BEGIN
      OStandardObjectDescription := '';
      GetSOStandardObjectDS(IServiceOrderNo, StandardObject);
      CASE StandardObject.COUNT OF
        0: EXIT;
        1:
          BEGIN
            StandardObject.FIND('=');
            OStandardObjectDescription := StandardObject.Description;
            EXIT(StandardObject."No.");
          END;
      ELSE
        EXIT(STRSUBSTNO('[%1]', StandardObject.COUNT));
      END;
    END;

    PROCEDURE ShowSOStandardObjects@1100528624(IServiceOrderNo@1100528600 : Code[20]);
    VAR
      StandardObject@1100528601 : Record 11020334;
    BEGIN
      GetSOStandardObjectDS(IServiceOrderNo, StandardObject);
      PAGE.RUNMODAL(0, StandardObject);
    END;

    PROCEDURE TestPlantServiceOrder@1100528800(ServiceOrderNo@1100528801 : Code[20];IsPlantServiceOrder@1100528800 : Boolean);
    VAR
      ServiceOrder@1100528802 : Record 11012823;
    BEGIN
      IF ServiceOrder.GET(ServiceOrderNo) THEN
        IF ServiceOrder.IsPlantServiceOrder <> IsPlantServiceOrder THEN
          IF IsPlantServiceOrder THEN
            ERROR(TxtIsNotPlantServiceOrder, ServiceOrderNo)
          ELSE
            ERROR(TxtIsPlantServiceOrder, ServiceOrderNo);
    END;

    PROCEDURE ShowContractDiscountTerms@1100528623(IServiceOrderNo@1100528600 : Code[20];IObjectNo@1100528601 : Code[20]);
    VAR
      ServiceOrder@1100528602 : Record 11012823;
      ContractObject@1100528604 : Record 11071702;
      ServicePackage@1100528606 : Record 11012806;
      ServiceContractDiscountTerm@1100528608 : Record 11012828;
      ServicePackageCode@1100528603 : Code[10];
      ServicePackageFilter@1100528607 : Text;
    BEGIN
      ServiceOrder.GET(IServiceOrderNo);
      ServiceOrder.TESTFIELD("Service Contract No.");
      IF IObjectNo = '' THEN
        ServicePackageCode := ServiceOrder."Service Package";
      IF ContractObject.GET(ServiceOrder."Service Contract No.", IObjectNo) THEN
        ServicePackageCode := ContractObject."Service Package";
      ServicePackage.GET(ServicePackageCode);
      IF (ServicePackage."Service Package Contract" <> '') OR
         (ServicePackage."Service Package Call" <> '') OR
         (ServicePackage."Service Package Direct" <> '')
      THEN BEGIN
        ServicePackageFilter := ServicePackage."Service Package Contract";
        IF ServicePackage."Service Package Call" <> '' THEN BEGIN
          IF ServicePackageFilter <> '' THEN
            ServicePackageFilter += '|';
          ServicePackageFilter += ServicePackage."Service Package Call";
        END;
        IF ServicePackage."Service Package Direct" <> '' THEN BEGIN
          IF ServicePackageFilter <> '' THEN
            ServicePackageFilter += '|';
          ServicePackageFilter += ServicePackage."Service Package Direct";
        END;
      END ELSE
        ServicePackageFilter := ServicePackageCode;

      ServiceContractDiscountTerm.SETRANGE("Service Contract No.", ServiceOrder."Service Contract No.");
      ServiceContractDiscountTerm.SETFILTER("Service Package", ServicePackageFilter);
      ServiceContractDiscountTerm.SETRANGE("Source Type", ServiceOrder."Source Type");
      PAGE.RUNMODAL(0, ServiceContractDiscountTerm);
    END;

    PROCEDURE NoOfResourcesByServiceOrder@1100528627(IServiceOrderNo@1100528600 : Code[20]) NoOfResources : Integer;
    VAR
      WorkOrder@1100528601 : Record 11229279;
      TmpResourceWOP@1100528602 : TEMPORARY Record 11229278;
    BEGIN
      //C026176.sn
      IF IServiceOrderNo = '' THEN
        EXIT(0);
      //C026176.en

      WorkOrder.SETCURRENTKEY("Source Company", "Source Type", "Source No.");
      WorkOrder.SETRANGE("Source Company", COMPANYNAME);
      WorkOrder.SETRANGE("Source Type", WorkOrder."Source Type"::ServiceOrder);
      WorkOrder.SETRANGE("Source No.", IServiceOrderNo);
      WorkOrder.SETFILTER(WorkOrder."Resource No.", '<>%1','');
      IF WorkOrder.FINDSET THEN BEGIN
        REPEAT
          TmpResourceWOP."No." := WorkOrder."Resource No.";
          IF TmpResourceWOP.INSERT THEN;
        UNTIL WorkOrder.NEXT = 0;
        NoOfResources := TmpResourceWOP.COUNT;
      END;
    END;

    PROCEDURE GetLeadingResourceByServiceOrder@1100528628(IServiceOrderNo@1100528600 : Code[20];VAR OLeadingResourceNo@1100528601 : Code[20];VAR OLeadingResourceName@1100528602 : Text[50]);
    VAR
      WorkOrder@1100528603 : Record 11229279;
    BEGIN
      OLeadingResourceNo := '';
      OLeadingResourceName := '';
      WorkOrder.SETRANGE("Source Company", COMPANYNAME);
      WorkOrder.SETRANGE("Source Type", WorkOrder."Source Type"::ServiceOrder);
      WorkOrder.SETRANGE("Source No.", IServiceOrderNo);
      WorkOrder.SETRANGE("Leading Resource", FALSE);
      IF WorkOrder.ISEMPTY THEN
        WorkOrder.SETRANGE("Leading Resource");
      IF WorkOrder.FINDSET THEN
        IF WorkOrder.NEXT = 0 THEN BEGIN
          WorkOrder.CALCFIELDS("Resource Name");
          OLeadingResourceNo := WorkOrder."Resource No.";
          OLeadingResourceName := WorkOrder."Resource Name";
        END;
    END;

    PROCEDURE GetNoOfAdviceOrderLines@1100525031(IServiceOrderNo@1210190000 : Code[20];CheckFinished@1100525000 : Boolean) : Integer;
    VAR
      AdviceOrderLine@1210190001 : Record 11012055;
    BEGIN
      //DP01015
      IF IServiceOrderNo = '' THEN
        EXIT(0);

      AdviceOrderLine.SETCURRENTKEY("Service Order No.");
      AdviceOrderLine.SETRANGE("Service Order No.", IServiceOrderNo);
      AdviceOrderLine.SETRANGE(Processed, CheckFinished);
      EXIT(AdviceOrderLine.COUNT);
    END;

    PROCEDURE ShowAdviceOrderLines@1100525030(IServiceOrderNo@1210190000 : Code[20];CheckFinished@1100525000 : Boolean);
    VAR
      AdviceOrderLine@1210190001 : Record 11012055;
      AdviceOrderPage@1100525001 : Page 11012122;
    BEGIN
      //DP01015
      AdviceOrderLine.SETCURRENTKEY("Service Order No.");
      AdviceOrderLine.SETRANGE("Service Order No.", IServiceOrderNo);
      AdviceOrderLine.SETRANGE(Processed, CheckFinished);
      AdviceOrderPage.EDITABLE(CheckFinished=FALSE);
      AdviceOrderPage.SetBypassFiltering(CheckFinished);
      AdviceOrderPage.SETTABLEVIEW(AdviceOrderLine);
      AdviceOrderPage.RUNMODAL;
    END;

    PROCEDURE GetTotalsOfServiceOrders@1100528629(VAR IJobNo@1100528600 : Code[20];VAR ONoOfServiceOrders@1100528200 : Integer;VAR OActualCosts@1100528601 : Decimal;VAR OActualHours@1100528602 : Decimal;VAR OOpenAmountHours@1100528603 : Decimal;VAR OOpenHours@1100528605 : Decimal;VAR OOpenPurchase@1100528606 : Decimal;VAR OReceivedNotInvoiced@1100528607 : Decimal;VAR OOpenInventory@1100528608 : Decimal;VAR OOpenOvhSurchFirmPurch@1100528609 : Decimal;VAR OOpenOvhSurchHours@1100528610 : Decimal;VAR OOpenOvhSurchInventory@1100528611 : Decimal);
    VAR
      ServiceOrder@1100528604 : Record 11012823;
      JobRelatedServiceOrder@1100528201 : Record 11229339;
    BEGIN
      ONoOfServiceOrders := 0;
      OActualCosts := 0;
      OActualHours := 0;
      OOpenAmountHours := 0;
      OOpenHours := 0;
      OOpenPurchase := 0;
      OReceivedNotInvoiced := 0;
      OOpenInventory := 0;
      OOpenOvhSurchFirmPurch := 0;
      OOpenOvhSurchHours := 0;
      OOpenOvhSurchInventory := 0;

      IF JobRelatedServiceOrder.ISEMPTY THEN
        EXIT;

      JobRelatedServiceOrder.SETRANGE("Job No.", IJobNo);
      IF JobRelatedServiceOrder.FINDSET THEN
        REPEAT
          IF ServiceOrder.CHANGECOMPANY(JobRelatedServiceOrder."Company Service Order") THEN
            IF ServiceOrder.GET(JobRelatedServiceOrder."Service Order No.") THEN BEGIN
              ONoOfServiceOrders += 1;

              ServiceOrder.CALCFIELDS(
                "Actual Costs","Actual Hours","Open Amount (Hours)","Open Hours","Open (Purchase)",
                "Received/Not Invoiced","Open (Inventory)","Open Ovh. Surch. Firm (Purch.)",
                "Open Ovh. Surch. (Hours)","Open Ovh. Surch. (Inventory)");
              OActualCosts += ServiceOrder."Actual Costs";
              OActualHours += ServiceOrder."Actual Hours";
              OOpenAmountHours += ServiceOrder."Open Amount (Hours)";
              OOpenHours += ServiceOrder."Open Hours";
              OOpenPurchase += ServiceOrder."Open (Purchase)";
              OReceivedNotInvoiced += ServiceOrder."Received/Not Invoiced";
              OOpenInventory += ServiceOrder."Open (Inventory)";
              OOpenOvhSurchFirmPurch += ServiceOrder."Open Ovh. Surch. Firm (Purch.)";
              OOpenOvhSurchHours += ServiceOrder."Open Ovh. Surch. (Hours)";
              OOpenOvhSurchInventory += ServiceOrder."Open Ovh. Surch. (Inventory)";
            END;
        UNTIL JobRelatedServiceOrder.NEXT = 0;
    END;

    PROCEDURE GetTotalProductionValue@1100529500(IServiceOrderNo@1100529500 : Code[20]) TotalProductionValue : Decimal;
    VAR
      SUPProduction@1100529501 : Record 11071773;
    BEGIN
      SUPProduction.SETRANGE("Service Order No.", IServiceOrderNo);
      SUPProduction.SETRANGE(Status, SUPProduction.Status::Approved);
      IF SUPProduction.FINDSET THEN
        REPEAT
          SUPProduction.CALCFIELDS("Total Production Value");
          TotalProductionValue += SUPProduction."Total Production Value";
        UNTIL SUPProduction.NEXT = 0;
    END;

    PROCEDURE GetNoOfINSBOUMaintStatusMessages@1100528801(IServiceOrderNo@1100528800 : Code[20]) : Decimal;
    VAR
      INSBOUMessageQueue@1100528801 : Record 11072353;
    BEGIN
      IF NOT FPSLicenseManagement.LicenseAndReadPermissionForTable(INSBOUMessageQueue) THEN
        EXIT;
      INSBOUMessageQueue.SETRANGE("Document Type", INSBOUMessageQueue."Document Type"::ServiceOrder);
      INSBOUMessageQueue.SETRANGE("Document No.", IServiceOrderNo);
      EXIT(INSBOUMessageQueue.COUNT);
    END;

    PROCEDURE ShowNoOfOpenINSBOUMaintStatusMessages@1100528802(IServiceOrderNo@1210190001 : Code[20]);
    VAR
      INSBOUMessageQueue@1210190000 : Record 11072353;
    BEGIN
      IF NOT FPSLicenseManagement.LicenseAndReadPermissionForTable(INSBOUMessageQueue) THEN
        EXIT;
      IF IServiceOrderNo = '' THEN EXIT;
      INSBOUMessageQueue.SETRANGE("Document Type", INSBOUMessageQueue."Document Type"::ServiceOrder);
      INSBOUMessageQueue.SETRANGE("Document No.", IServiceOrderNo);
      PAGE.RUNMODAL(0, INSBOUMessageQueue);
    END;

    PROCEDURE GetNoOfServiceOrderStatusLines@1100525034(ServiceOrderNo@1100525000 : Code[20]) : Integer;
    VAR
      ServiceOrderStatusText@1100525001 : Record 11072550;
    BEGIN
      IF ServiceOrderNo = '' THEN
        EXIT(0);
      FilterServiceOrderStatusLines(ServiceOrderNo, ServiceOrderStatusText);
      EXIT(ServiceOrderStatusText.COUNT);
    END;

    PROCEDURE ShowServiceOrderStatusLines@1100525033(ServiceOrderNo@1100525000 : Code[20]);
    VAR
      ServiceOrderStatusText@1100525002 : Record 11072550;
    BEGIN
      FilterServiceOrderStatusLines(ServiceOrderNo, ServiceOrderStatusText);
      PAGE.RUNMODAL(PAGE::"Service Order Status Text", ServiceOrderStatusText);
    END;

    LOCAL PROCEDURE FilterServiceOrderStatusLines@1100525032(ServiceOrderNo@1100525000 : Code[20];VAR ServiceOrderStatusText@1100525001 : Record 11072550);
    BEGIN
      ServiceOrderStatusText.RESET;
      ServiceOrderStatusText.FILTERGROUP(4);
      ServiceOrderStatusText.SETRANGE("Service Order No.", ServiceOrderNo);
      ServiceOrderStatusText.FILTERGROUP(0);
    END;

    LOCAL PROCEDURE GetActiveWarrantyDiscTerms@1100528637(IServiceOrderNo@1100528603 : Code[20];IReferenceDate@1100528602 : Date;ICostTypeFilter@1100528601 : ' ,Labor,Material,Subcontracting,Plant,Sundry';IType@1100528600 : 'Customer,Vendor';IShowWarrantyDiscTermsOfObjects@1100528400 : Boolean;VAR OServWarrDiscountTerm@1100528604 : Record 11071811);
    VAR
      ServiceOrder@1100528605 : Record 11012823;
      ServiceOrderObject@1100528608 : Record 11071724;
      ServiceObject@1100528606 : Record 11071691;
      WarrantyCode@1100528607 : Code[10];
      WarrantyStartingDate@1100528609 : Date;
      OriginalWarrantyExpirationDate@1100528611 : Date;
    BEGIN
      OServWarrDiscountTerm.RESET;
      ServiceOrderObject.SETRANGE("Service Order No.", IServiceOrderNo);
      IF ServiceOrder.GET(IServiceOrderNo) THEN BEGIN
        IF IType = IType::Customer THEN
          MarkServWarrDiscountTermsOfWarrantyCode(
            IReferenceDate, ICostTypeFilter, ServiceOrder."Service Warranty Code",
            ServiceOrder.GetStartingDate, 0D, OServWarrDiscountTerm);
        IF IShowWarrantyDiscTermsOfObjects THEN
          IF ServiceOrderObject.FINDSET THEN
            REPEAT
              IF NOT ServiceObject.GET(ServiceOrderObject."Object No.") THEN
                ServiceObject.INIT;
              CASE IType OF
                IType::Customer:
                  IF ServiceObject."Warranty Code Customer" <> '' THEN
                    WarrantyCode := ServiceObject."Warranty Code Customer";
                IType::Vendor:
                  IF ServiceObject."Warranty Code Vendor" <> '' THEN
                    WarrantyCode := ServiceObject."Warranty Code Vendor";
              END;

              IF IType = IType::Customer THEN BEGIN
                WarrantyStartingDate := ServiceObject."Warranty Starting Date Cust.";
                OriginalWarrantyExpirationDate := ServiceObject."Warranty Exp. Date Customer";
              END ELSE BEGIN
                WarrantyStartingDate := ServiceObject."Warranty Starting Date Vendor";
                OriginalWarrantyExpirationDate := ServiceObject."Warranty Exp. Date Vendor";
              END;

              MarkServWarrDiscountTermsOfWarrantyCode(
                IReferenceDate, ICostTypeFilter, WarrantyCode, WarrantyStartingDate,
                OriginalWarrantyExpirationDate, OServWarrDiscountTerm);
            UNTIL ServiceOrderObject.NEXT = 0;
      END;
      OServWarrDiscountTerm.MARKEDONLY(TRUE);
    END;

    LOCAL PROCEDURE MarkServWarrDiscountTermsOfWarrantyCode@1100528400(IReferenceDate@1100528406 : Date;ICostTypeFilter@1100528405 : ' ,Labor,Material,Subcontracting,Plant,Sundry';IWarrantyCode@1100528403 : Code[10];IWarrantyStartingDate@1100528402 : Date;IOriginalWarrantyExpirationDate@1100528401 : Date;VAR OServWarrDiscountTerm@1100528404 : Record 11071811);
    VAR
      WarrantyExpirationDate@1100528400 : Date;
    BEGIN
      IF IWarrantyCode = '' THEN
        EXIT;
      OServWarrDiscountTerm.SETRANGE("Warranty Code", IWarrantyCode);
      IF ICostTypeFilter <> ICostTypeFilter::" " THEN
        OServWarrDiscountTerm.SETFILTER("Cost Type", '%1|%2', ICostTypeFilter::" ", ICostTypeFilter);
      IF OServWarrDiscountTerm.FINDSET AND (IWarrantyStartingDate <> 0D) THEN BEGIN
        REPEAT
          WarrantyExpirationDate := IOriginalWarrantyExpirationDate;
          IF WarrantyExpirationDate = 0D THEN
            WarrantyExpirationDate := CALCDATE(OServWarrDiscountTerm.Period, IWarrantyStartingDate);
          IF (IReferenceDate >= IWarrantyStartingDate) AND (IReferenceDate <= WarrantyExpirationDate) THEN
            OServWarrDiscountTerm.MARK(TRUE);
        UNTIL OServWarrDiscountTerm.NEXT = 0;
      END;
      OServWarrDiscountTerm.SETRANGE("Warranty Code");
    END;

    PROCEDURE GetNoOfActiveWarrantyDiscTerms@1100528633(IServiceOrderNo@1100528601 : Code[20];IReferenceDate@1100528603 : Date;IType@1100409000 : 'Customer,Vendor') : Integer;
    VAR
      ServiceOrder@1100528602 : Record 11012823;
      ServWarrDiscountTerm@1100528600 : Record 11071811;
    BEGIN
      IF NOT ServiceOrder.GET(IServiceOrderNo) THEN
        EXIT;
      GetActiveWarrantyDiscTerms(IServiceOrderNo, IReferenceDate, 0, IType, TRUE, ServWarrDiscountTerm);
      EXIT(ServWarrDiscountTerm.COUNT);
    END;

    PROCEDURE ShowActiveWarrantyDiscTerms@1100528632(IServiceOrderNo@1100528601 : Code[20];IReferenceDate@1100528603 : Date;ICostTypeFilter@1100528605 : ' ,Labor,Material,Subcontracting,Plant,Sundry';IType@1100409000 : 'Customer,Vendor';IShowWarrantyDiscTermsOfObjects@1100528400 : Boolean) : Integer;
    VAR
      ServiceOrder@1100528606 : Record 11012823;
      ServWarrDiscountTerm@1100528600 : Record 11071811;
      ServWarrDiscountTermsFRM@1100528604 : Page 11126119;
    BEGIN
      IF NOT ServiceOrder.GET(IServiceOrderNo) THEN
        EXIT;
      GetActiveWarrantyDiscTerms(IServiceOrderNo, IReferenceDate, ICostTypeFilter, IType, IShowWarrantyDiscTermsOfObjects, ServWarrDiscountTerm);
      ServWarrDiscountTermsFRM.SetSelection('', IServiceOrderNo, NOT IShowWarrantyDiscTermsOfObjects);
      ServWarrDiscountTermsFRM.SETTABLEVIEW(ServWarrDiscountTerm);
      ServWarrDiscountTermsFRM.RUN;
    END;

    PROCEDURE ShowPlantRequest@1100529700(ServiceOrderNo@1100529700 : Code[20]);
    VAR
      PlantRequestSMF@1100528000 : Record 11125529;
    BEGIN
      PlantRequestSMF.FILTERGROUP(2);
      PlantRequestSMF.SETRANGE("Source Type", PlantRequestSMF."Source Type"::"Service Order");
      PlantRequestSMF.SETRANGE("Source No.", ServiceOrderNo);
      PlantRequestSMF.FILTERGROUP(0);
      PAGE.RUNMODAL(PAGE::"Plant Request List (SMF)", PlantRequestSMF);
    END;

    PROCEDURE GetNoOfFSAStatusReasons@1100527000(ServiceOrderNo@1100527001 : Code[20]) : Integer;
    VAR
      WorkOrder@1100527000 : Record 11229279;
    BEGIN
      IF ServiceOrderNo = '' THEN
        EXIT(0);
      FilterFSAStatusReasons(ServiceOrderNo, WorkOrder);
      EXIT(WorkOrder.COUNT);
    END;

    PROCEDURE ShowFSAStatusReasons@1100527001(ServiceOrderNo@1100527000 : Code[20]);
    VAR
      WorkOrder@1100527001 : Record 11229279;
      WorkOrders@1100527002 : Page 11229284;
    BEGIN
      FilterFSAStatusReasons(ServiceOrderNo, WorkOrder);
      WorkOrders.SetSelections(WorkOrder."Source Type"::ServiceOrder, ServiceOrderNo, '');
      WorkOrders.SETTABLEVIEW(WorkOrder);
      WorkOrders.RUNMODAL;
    END;

    LOCAL PROCEDURE FilterFSAStatusReasons@1100527002(ServiceOrderNo@1100527000 : Code[20];VAR WorkOrder@1100527001 : Record 11229279);
    BEGIN
      WorkOrder.FILTERGROUP(4);
      WorkOrder.SETRANGE("Source Company", COMPANYNAME);
      WorkOrder.SETRANGE("Source Type", WorkOrder."Source Type"::ServiceOrder);
      WorkOrder.SETRANGE("Source No.", ServiceOrderNo);
      WorkOrder.SETFILTER("Fld Srv Status Reason Desc.", '<>%1', '');
      WorkOrder.FILTERGROUP(0);
    END;

    PROCEDURE GetFilteredCustomerAnalysis@1100528634(ICustomerNo@1100528602 : Code[20];IServiceContractNo@1100528605 : Code[20];IAnalysisType@1100528601 : 'Problem,Cause,Solution';VAR OCustomerServiceAnalysis@1100528600 : Record 11071728);
    VAR
      ServiceAnalysis@1100528603 : Record 11012842;
      ServiceContractInfoMgt@1100528604 : Codeunit 11012842;
      ProblemCodeFilter@1100528606 : Text;
    BEGIN
      IF ICustomerNo = '' THEN
        EXIT;
      OCustomerServiceAnalysis.SETRANGE("Analysis Type", OCustomerServiceAnalysis."Analysis Type"::Problem);
      OCustomerServiceAnalysis.SETRANGE("Customer No.", ICustomerNo);
      ServiceContractInfoMgt.GetFilteredAnalysisByContract(IServiceContractNo, ServiceAnalysis."Analysis Type"::Problem, ServiceAnalysis);
      IF IServiceContractNo <> '' THEN
        ServiceAnalysis.SETRANGE("Contract Analysis Code", TRUE);
      IF ServiceAnalysis.MARKEDONLY OR (ServiceAnalysis.GETFILTERS <> '') THEN
        IF ServiceAnalysis.FINDSET THEN
          REPEAT
            IF ProblemCodeFilter <> '' THEN
              ProblemCodeFilter += '|';
            ProblemCodeFilter += ServiceAnalysis.Code;
          UNTIL ServiceAnalysis.NEXT = 0;
      IF ProblemCodeFilter <> '' THEN
        OCustomerServiceAnalysis.SETFILTER("Standard Analysis Code", ProblemCodeFilter);
    END;

    PROCEDURE FindServiceLocation@1100528500(IPostCode@1100528602 : Code[10];IHouseNo@1100528600 : Code[10];IHouseNoExt@1100528601 : Code[10];VAR OServiceLocation@1100528604 : Record 11012801) : Boolean;
    BEGIN
      OServiceLocation.RESET;
      OServiceLocation.SETCURRENTKEY("Post Code");
      OServiceLocation.SETRANGE("Post Code", IPostCode);
      OServiceLocation.SETRANGE("House No.", IHouseNo);
      OServiceLocation.SETRANGE("House No. Ext.", IHouseNoExt);
      IF NOT OServiceLocation.FINDFIRST THEN
        CLEAR(OServiceLocation);
      EXIT(OServiceLocation."No." <> '');
    END;

    LOCAL PROCEDURE GetActiveContractDiscountTerms@1100527400(IServiceOrderNo@1100527408 : Code[20];IReferenceDate@1100527409 : Date;VAR OServiceContractDiscountTerm@1100527405 : Record 11012828);
    VAR
      ServiceContract@1100527403 : Record 11012812;
      ServiceOrder@1100527406 : Record 11012823;
      TmpServicePackage@1100528602 : TEMPORARY Record 11012806;
      ContractObject@1100528600 : Record 11071702;
      ServiceOrderObject@1100528601 : Record 11071724;
      ServiceContractNo@1100527400 : Code[20];
      StartDiscountDate@1100527411 : Date;
      ExpirationDiscountDate@1100527410 : Date;
      ServicePackageFilter@1100528603 : Text;
    BEGIN
      OServiceContractDiscountTerm.RESET;
      OServiceContractDiscountTerm.MARKEDONLY(TRUE);

      ServiceOrder.GET(IServiceOrderNo);
      ServiceContractNo := ServiceOrder."Service Contract No.";
      IF ServiceContractNo = '' THEN
        EXIT;
      IF NOT ServiceContract.GET(ServiceContractNo) THEN
        EXIT;

      ContractObject.SETRANGE("Service Contract No.", ServiceContractNo);
      ContractObject.SETFILTER("Starting Date", '<=%1', IReferenceDate);
      ContractObject.SETFILTER("Ending Date", '%1|>%2', 0D, IReferenceDate);

      ServiceOrderObject.SETRANGE("Service Order No.", IServiceOrderNo);
      IF ServiceOrderObject.FINDSET THEN BEGIN
        REPEAT
          ContractObject."Service Contract No." := ServiceContractNo;
          ContractObject."Service Object No." := ServiceOrderObject."Object No.";
          ContractObject.MARK(TRUE);
        UNTIL ServiceOrderObject.NEXT = 0;
      END;
      ContractObject.MARKEDONLY(TRUE); //If there are no service order objects then use service package of service contract

      IF ContractObject.FINDSET THEN BEGIN
        REPEAT
          AddServicePackageToTmp(ContractObject."Service Package", ServiceOrder."Source Type", TmpServicePackage);
        UNTIL ContractObject.NEXT = 0;
      END ELSE
        AddServicePackageToTmp(ServiceContract."Service Package", ServiceOrder."Source Type", TmpServicePackage);

      IF TmpServicePackage.FINDSET THEN
        REPEAT
          IF ServicePackageFilter <> '' THEN
            ServicePackageFilter += '|';
          ServicePackageFilter += TmpServicePackage.Code;
        UNTIL TmpServicePackage.NEXT = 0;

      OServiceContractDiscountTerm.RESET;
      OServiceContractDiscountTerm.SETRANGE("Service Contract No.", ServiceContractNo);
      OServiceContractDiscountTerm.SETFILTER("Service Package", ServicePackageFilter);
      OServiceContractDiscountTerm.SETFILTER("Source Type", '%1|%2', OServiceContractDiscountTerm."Source Type"::None, ServiceOrder."Source Type");
      IF OServiceContractDiscountTerm.FINDSET THEN
          REPEAT
            StartDiscountDate := OServiceContractDiscountTerm."Starting Date Discount";
            IF FORMAT(OServiceContractDiscountTerm."Discount Period") <> '' THEN BEGIN
              ExpirationDiscountDate := CALCDATE(OServiceContractDiscountTerm."Discount Period", StartDiscountDate);
              IF (IReferenceDate >= StartDiscountDate) AND (IReferenceDate <= ExpirationDiscountDate) THEN
                OServiceContractDiscountTerm.MARK(TRUE);
            END;
            IF FORMAT(OServiceContractDiscountTerm."Discount Period") = '' THEN BEGIN
              IF IReferenceDate >= StartDiscountDate THEN
                OServiceContractDiscountTerm.MARK(TRUE);
            END;
          UNTIL OServiceContractDiscountTerm.NEXT = 0;
      OServiceContractDiscountTerm.MARKEDONLY(TRUE);
    END;

    LOCAL PROCEDURE AddServicePackageToTmp@1100528642(IServicePackageCode@1100528600 : Code[20];ISourceType@1100528603 : 'Call,Contract,Direct,Estimate,None';VAR OTmpServicePackage@1100528601 : Record 11012806);
    VAR
      ServicePackage@1100528602 : Record 11012806;
    BEGIN
      IF ServicePackage.GET(IServicePackageCode) THEN BEGIN
        IF (ServicePackage."Service Package Contract" <> '') OR
           (ServicePackage."Service Package Call" <> '') OR
           (ServicePackage."Service Package Direct" <> '')
        THEN BEGIN
          IF (ServicePackage."Service Package Contract" <> '') AND (ISourceType = ISourceType::Contract) THEN BEGIN
            OTmpServicePackage.Code := ServicePackage."Service Package Contract";
            IF OTmpServicePackage.INSERT THEN;
          END;
          IF (ServicePackage."Service Package Call" <> '') AND (ISourceType = ISourceType::Call) THEN BEGIN
            OTmpServicePackage.Code := ServicePackage."Service Package Call";
            IF OTmpServicePackage.INSERT THEN;
          END;
          IF (ServicePackage."Service Package Direct" <> '') AND (ISourceType = ISourceType::Direct) THEN BEGIN
            OTmpServicePackage.Code := ServicePackage."Service Package Direct";
            IF OTmpServicePackage.INSERT THEN;
          END;
        END ELSE BEGIN
          OTmpServicePackage.Code := IServicePackageCode;
          IF OTmpServicePackage.INSERT THEN;
        END;
      END;
    END;

    PROCEDURE GetNoOfActiveContractDiscountTerms@1100527402(IServiceOrderNo@1100527402 : Code[20];IRefenceDate@1100527406 : Date) : Integer;
    VAR
      ServiceContractDiscountTerm@1100527401 : Record 11012828;
    BEGIN
      GetActiveContractDiscountTerms(IServiceOrderNo, IRefenceDate, ServiceContractDiscountTerm);
      EXIT(ServiceContractDiscountTerm.COUNT);
    END;

    PROCEDURE ShowActiveContractDiscountTerms@1100527403(IServiceOrderNo@1100527402 : Code[20];IRefenceDate@1100527407 : Date);
    VAR
      ServiceContractDiscountTermFRM@1100527401 : Page 11012836;
      ServiceContractDiscountTerm@1100527404 : Record 11012828;
    BEGIN
      GetActiveContractDiscountTerms(IServiceOrderNo, IRefenceDate, ServiceContractDiscountTerm);
      //ServiceContractDiscountTermFRM.SetSelections('', ISourceType);
      ServiceContractDiscountTermFRM.SETTABLEVIEW(ServiceContractDiscountTerm);
      ServiceContractDiscountTermFRM.RUN;
    END;

    PROCEDURE GetNoOfWorkOrderDocuments@1100526000(ServiceOrderNo@1100526004 : Code[20]) Result : Integer;
    VAR
      ServiceOrder@1100526002 : Record 11012823;
      WorkOrder@1100526001 : Record 11229279;
      RecRef@1100526003 : RecordRef;
      DocumentLinkManagement@1100526000 : Codeunit 11012401;
    BEGIN
      IF ServiceOrderNo = '' THEN
        EXIT;
      ServiceOrder.GET(ServiceOrderNo);
      WorkOrder.SETRANGE("Source Company", COMPANYNAME);
      WorkOrder.SETRANGE("Source Type", WorkOrder."Source Type"::ServiceOrder);
      WorkOrder.SETRANGE("Source No.", ServiceOrder."No.");
      IF WorkOrder.FINDSET THEN
        REPEAT
          RecRef.GETTABLE(WorkOrder);
          Result += DocumentLinkManagement.GetInfo(RecRef);
        UNTIL WorkOrder.NEXT = 0;
    END;

    PROCEDURE ShowWorkOrderDocuments@1100526001(ServiceOrderNo@1100526000 : Code[20]);
    VAR
      ServiceOrder@1100526005 : Record 11012823;
      WorkOrder@1100526001 : Record 11229279;
      DocumentFilters@1100526002 : Codeunit 11012432;
      RecRef@1100526003 : RecordRef;
      RecRefAdditional@1100526004 : RecordRef;
    BEGIN
      IF ServiceOrderNo = '' THEN
        EXIT;
      ServiceOrder.GET(ServiceOrderNo);
      WorkOrder.SETRANGE("Source Company", COMPANYNAME);
      WorkOrder.SETRANGE("Source Type", WorkOrder."Source Type"::ServiceOrder);
      WorkOrder.SETRANGE("Source No.", ServiceOrder."No.");
      IF NOT WorkOrder.FINDFIRST THEN EXIT;
      RecRefAdditional.GETTABLE(WorkOrder);
      DocumentFilters.CreateTempFilterAndExecute5(RecRef, RecRefAdditional, ServiceOrder."Global Dimension 1 Code", FALSE, TRUE);
    END;

    BEGIN
    END.
  }
}

