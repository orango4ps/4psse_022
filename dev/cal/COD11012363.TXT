OBJECT Codeunit 11012363 Purch. Inv.Appr. Line-Reserve
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    Permissions=TableData 337=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text003@1003 : TextConst 'DEU=darf nicht geÑndert werden, wenn eine Menge reserviert ist;ENU=must not be changed when a quantity is reserved;NLD=mag niet gewijzigd worden als er reserveringen zijn.;NOR=skal ikke endres nÜr et antall reserveres;SVE=fÜr inte Ñndras nÑr ett antal Ñr reserverade';
      CreateReservEntry@1006 : Codeunit 99000830;
      ReservEngineMgt@1007 : Codeunit 99000831;
      ReservMgt@1008 : Codeunit 99000845;
      ItemTrackingMgt@1022 : Codeunit 6500;
      ApplySpecificItemTracking@1023 : Boolean;
      OverruleItemTracking@1024 : Boolean;
      Text11012000@1100528600 : TextConst 'DEU=FÅr Artikel %1 in %2 wurde Artikelverfolgung definiert.\Sie mÅssen die vorhandene Artikelverfolgung lîschen, bevor die %2 bearbeitet oder gelîscht werden kînnen.;ENU=Item tracking is defined for item %1 in the %2.\You must delete the existing item tracking before modifying or deleting the %2.;NLD=Artikeltracering is gedefinieerd voor artikel %1 in de %2.\U moet de bestaande artikeltracering verwijderen voor u de %2 wijzigt of verwijdert.;NOR=Varesporing er definert for %1 i %2.\Du mÜ fjerne eksisterende artikkelsporing fõr du kan endre eller fjerne%2.;SVE=ArtikelspÜrning har definierats fîr %1 i %2.\Du mÜste ta bort befintlig artikelspÜrning innan du kan Ñndra eller ta bort %2.';

    PROCEDURE FilterReservFor@10(VAR FilterReservEntry@1000 : Record 337;InvApprLine@1001 : Record 11012032);
    BEGIN
      FilterReservEntry.SETRANGE("Source Type",DATABASE::"Invoice Approval Line");
      FilterReservEntry.SETRANGE("Source Subtype",InvApprLine."Document Type");
      FilterReservEntry.SETRANGE("Source ID",InvApprLine."Document No.");
      FilterReservEntry.SETRANGE("Source Batch Name",'');
      FilterReservEntry.SETRANGE("Source Prod. Order Line",0);
      FilterReservEntry.SETRANGE("Source Ref. No.",InvApprLine."Line No.");
    END;

    PROCEDURE Caption@28(InvApprLine@1001 : Record 11012032) CaptionText@1000 : Text[80];
    BEGIN
      CaptionText :=
        STRSUBSTNO('%1 %2 %3',InvApprLine."Document Type",InvApprLine."Document No.",InvApprLine."Item No.");
    END;

    PROCEDURE FindReservEntry@4(InvApprLine@1000 : Record 11012032;VAR ReservEntry@1001 : Record 337) : Boolean;
    BEGIN
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,FALSE);
      FilterReservFor(ReservEntry,InvApprLine);
      EXIT(ReservEntry.FINDLAST);
    END;

    PROCEDURE VerifyChange@61(VAR NewInvApprLine@1000 : Record 11012032;VAR OldInvApprLine@1001 : Record 11012032);
    VAR
      InvApprLine@1005 : Record 11012032;
      TempReservEntry@1002 : Record 337;
      ShowError@1003 : Boolean;
      HasError@1004 : Boolean;
    BEGIN
      IF (NewInvApprLine."Item No." = '') AND (OldInvApprLine."Item No." = '') THEN
        EXIT;
      IF NewInvApprLine."Line No." = 0 THEN
        IF NOT InvApprLine.GET(NewInvApprLine."Journal Template Name",
          NewInvApprLine."Document Type", NewInvApprLine."Document No.", NewInvApprLine."Line No.")
        THEN
          EXIT;

      //C008671
      //ShowError := FindReservEntry(OldInvApprLine,TempReservEntry);
      //IF NOT ShowError THEN
      //  ShowError := (FindNSReservEntry(OldInvApprLine) OR FindNSTrackingSpecification(OldInvApprLine));
      NewInvApprLine.CALCFIELDS("Reserved Qty. (Base)");
      ShowError := InvApprLine."Reserved Qty. (Base)" <> 0;
      IF NOT ShowError THEN BEGIN
        NewInvApprLine.CALCFIELDS("Reserved NS Qty. (Base)");
        ShowError := NewInvApprLine."Reserved NS Qty. (Base)" <> 0;
      END;
      //

      IF NewInvApprLine."Item No." <> OldInvApprLine."Item No." THEN
        IF ShowError THEN
          NewInvApprLine.FIELDERROR("Item No.",Text003)
        ELSE
          HasError := TRUE;
      IF NewInvApprLine."Variant Code" <> OldInvApprLine."Variant Code" THEN
        IF ShowError THEN
          NewInvApprLine.FIELDERROR("Variant Code",Text003)
        ELSE
          HasError := TRUE;
      IF (NewInvApprLine."Location Code" <> OldInvApprLine."Location Code") THEN
        IF ShowError THEN
          NewInvApprLine.FIELDERROR("Location Code",Text003)
        ELSE
          HasError := TRUE;
      IF NewInvApprLine."Line No." <> OldInvApprLine."Line No." THEN
        HasError := TRUE;
      IF NewInvApprLine."Project No." <> OldInvApprLine."Project No." THEN
        IF ShowError THEN
          NewInvApprLine.FIELDERROR("Project No.",Text003)
        ELSE
          HasError := TRUE;
      IF NewInvApprLine."Service Order No." <> OldInvApprLine."Service Order No." THEN
        IF ShowError THEN
          NewInvApprLine.FIELDERROR("Service Order No.",Text003)
        ELSE
          HasError := TRUE;

      IF HasError THEN
        IF FindReservEntry(OldInvApprLine,TempReservEntry) OR
           FindNSReservEntry(OldInvApprLine) OR FindNSTrackingSpecification(OldInvApprLine) THEN //C008671
          ERROR(Text11012000,OldInvApprLine."Item No.",OldInvApprLine.TABLECAPTION);
    END;

    PROCEDURE VerifyQuantity@1(VAR NewInvApprLine@1000 : Record 11012032;VAR OldInvApprLine@1001 : Record 11012032);
    VAR
      InvApprLine@1002 : Record 11012032;
    BEGIN
      WITH NewInvApprLine DO BEGIN
        IF ("Document Type" = "Document Type"::"Purchase Invoice") AND ("Receipt No." = '') THEN
          EXIT;
        IF ("Document Type" = "Document Type"::"Credit Memo") AND ("Receipt No." = '') THEN
          EXIT;

        IF "Item No." = '' THEN
          EXIT;
        IF "Line No." = OldInvApprLine."Line No." THEN
          IF Quantity = OldInvApprLine.Quantity THEN
            EXIT;
        IF "Line No." = 0 THEN
          IF NOT InvApprLine.GET("Journal Template Name", "Document Type", "Document No.", "Line No.") THEN
            EXIT;
        ReservMgt.SetPurchInvApprLine(NewInvApprLine);
        IF "Qty. per Unit of Measure" <> OldInvApprLine."Qty. per Unit of Measure" THEN
          ReservMgt.ModifyUnitOfMeasure;

        IF ("Project No." + "Service Order No.") = '' THEN BEGIN
          IF Quantity * OldInvApprLine.Quantity < 0 THEN
            ReservMgt.DeleteReservEntries(TRUE,0)
          ELSE
            ReservMgt.DeleteReservEntries(FALSE,QtyBase());
          ReservMgt.ClearSurplus;
        END ELSE BEGIN
          IF Quantity * OldInvApprLine.Quantity < 0 THEN
            ReservMgt.DeleteNSReservEntries(TRUE,0)
          ELSE
            ReservMgt.DeleteNSReservEntries(FALSE,QtyBase());
        END;
      END;
    END;

    PROCEDURE TransferApprLineToItemJnlLine@32(VAR InvApprLine@1000 : Record 11012032;VAR ItemJnlLine@1001 : Record 83;TransferQty@1002 : Decimal;VAR CheckApplToItemEntry@1004 : Boolean) : Decimal;
    VAR
      OldReservEntry@1003 : Record 337;
      OldReservEntry2@1005 : Record 337;
    BEGIN
      IF NOT FindReservEntry(InvApprLine,OldReservEntry) THEN
        EXIT(TransferQty);

      OldReservEntry.Lock;
      // Handle Item Tracking on drop shipment:
      CLEAR(CreateReservEntry);
      IF ApplySpecificItemTracking AND (ItemJnlLine."Applies-to Entry" <> 0) THEN
        CreateReservEntry.SetApplyToEntryNo(ItemJnlLine."Applies-to Entry");

      IF OverruleItemTracking THEN
        IF (ItemJnlLine."Serial No." <> '') OR (ItemJnlLine."Lot No." <> '') THEN BEGIN
          CreateReservEntry.SetNewSerialLotNo(ItemJnlLine."Serial No.",ItemJnlLine."Lot No.");
          CreateReservEntry.SetOverruleItemTracking(TRUE);
          // Try to match against Item Tracking on the purchase order line:
          OldReservEntry.SETRANGE("Serial No.",ItemJnlLine."Serial No.");
          OldReservEntry.SETRANGE("Lot No.",ItemJnlLine."Lot No.");
          IF OldReservEntry.ISEMPTY THEN
            EXIT(TransferQty);
        END;

      ItemJnlLine.TESTFIELD("Item No.",InvApprLine."Item No.");
      ItemJnlLine.TESTFIELD("Variant Code",InvApprLine."Variant Code");
      ItemJnlLine.TESTFIELD("Location Code",InvApprLine."Location Code");

      IF TransferQty = 0 THEN
        EXIT;

      IF ItemJnlLine."Invoiced Quantity" <> 0 THEN
        CreateReservEntry.SetUseQtyToInvoice(TRUE);

      IF ReservEngineMgt.InitRecordSet(OldReservEntry) THEN BEGIN
        REPEAT
          OldReservEntry.TESTFIELD("Item No.",InvApprLine."Item No.");
          OldReservEntry.TESTFIELD("Variant Code",InvApprLine."Variant Code");
          OldReservEntry.TESTFIELD("Location Code",InvApprLine."Location Code");
          IF CheckApplToItemEntry AND
             (OldReservEntry."Reservation Status" = OldReservEntry."Reservation Status"::Reservation)
          THEN BEGIN
            OldReservEntry2.GET(OldReservEntry."Entry No.",NOT OldReservEntry.Positive);
            OldReservEntry2.TESTFIELD("Source Type",DATABASE::"Item Ledger Entry");
          END;

          TransferQty := CreateReservEntry.TransferReservEntry(DATABASE::"Item Journal Line",
            ItemJnlLine."Entry Type",ItemJnlLine."Journal Template Name",
            ItemJnlLine."Journal Batch Name",0,ItemJnlLine."Line No.",
            ItemJnlLine."Qty. per Unit of Measure",OldReservEntry,TransferQty);

        UNTIL (ReservEngineMgt.NEXTRecord(OldReservEntry) = 0) OR (TransferQty = 0);
        CheckApplToItemEntry := FALSE;
      END;
      EXIT(TransferQty);
    END;

    PROCEDURE DeleteLine@2(VAR InvApprLine@1000 : Record 11012032);
    BEGIN
      WITH InvApprLine DO BEGIN
        ReservMgt.SetPurchInvApprLine(InvApprLine);
        ReservMgt.DeleteReservEntries(TRUE,0);
        DeleteInvoiceSpecFromLine(InvApprLine);
        ReservMgt.ClearActionMessageReferences;
        ReservMgt.DeleteNSReservEntries(TRUE,0); //**4PS.n DP00121
      END;
    END;

    PROCEDURE CallItemTracking@12(VAR InvApprLine@1003 : Record 11012032);
    VAR
      TrackingSpecification@1001 : Record 336;
      ItemTrackingForm@1002 : Page 6510;
    BEGIN
      InitTrackingSpecification(InvApprLine,TrackingSpecification);
      IF ((InvApprLine."Document Type" = InvApprLine."Document Type"::"Purchase Invoice") AND
          (InvApprLine."Receipt No." <> '')) OR
         ((InvApprLine."Document Type" = InvApprLine."Document Type"::"Credit Memo") AND
          (InvApprLine."Receipt No." <> ''))
      THEN
        ItemTrackingForm.SetFormRunMode(2); // Combined shipment/receipt
      IF (InvApprLine."Project No." + InvApprLine."Service Order No.") <> '' THEN
        ItemTrackingForm.SetCalledFromNonStock(TRUE, InvApprLine."Project No.", InvApprLine."Service Order No.");
      //**4PS.en
      ItemTrackingForm.SetSourceSpec(TrackingSpecification,InvApprLine."Posting Date");
      ItemTrackingForm.RUNMODAL;
    END;

    PROCEDURE InitTrackingSpecification@11(VAR InvApprLine@1001 : Record 11012032;VAR TrackingSpecification@1003 : Record 336);
    BEGIN
      TrackingSpecification.INIT;
      TrackingSpecification."Source Type" := DATABASE::"Invoice Approval Line";
      WITH InvApprLine DO BEGIN
        TrackingSpecification."Item No." := "Item No.";
        TrackingSpecification."Location Code" := "Location Code";
        TrackingSpecification.Description := Description;
        TrackingSpecification."Variant Code" := "Variant Code";
        TrackingSpecification."Source Subtype" := "Document Type";
        TrackingSpecification."Source ID" := "Document No.";
        TrackingSpecification."Source Batch Name" := '';
        TrackingSpecification."Source Prod. Order Line" := 0;
        TrackingSpecification."Source Ref. No." := "Line No.";
        TrackingSpecification."Quantity (Base)" := InvApprLine.QtyBase();
        TrackingSpecification."Qty. to Invoice (Base)" := InvApprLine.QtyBase();
        TrackingSpecification."Qty. to Invoice" := Quantity;
        TrackingSpecification."Quantity Invoiced (Base)" := 0;
        TrackingSpecification."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
        TrackingSpecification."Bin Code" := "Bin Code";
        TrackingSpecification."Qty. to Handle (Base)" := InvApprLine.QtyBase();
        TrackingSpecification."Quantity Handled (Base)" := 0;
        TrackingSpecification."Qty. to Handle" := Quantity;
      END;
    END;

    PROCEDURE RetrieveInvoiceSpecification@9(VAR InvApprLine@1004 : Record 11012032;VAR TempInvoicingSpecification@1001 : TEMPORARY Record 336) OK@1003 : Boolean;
    VAR
      SourceSpecification@1000 : Record 336;
    BEGIN
      IF (InvApprLine."Item No." = '') OR ((InvApprLine."Project No." + InvApprLine."Service Order No.") <> '') THEN
        EXIT;
      IF (InvApprLine."Receipt No." <> '') THEN
        OK := RetrieveInvoiceSpecification2(InvApprLine,TempInvoicingSpecification)
      ELSE BEGIN
        InitTrackingSpecification(InvApprLine,SourceSpecification);
        OK := ItemTrackingMgt.RetrieveInvoiceSpecification(SourceSpecification,
          TempInvoicingSpecification);
      END;
    END;

    LOCAL PROCEDURE RetrieveInvoiceSpecification2@1013(VAR InvApprLine@1002 : Record 11012032;VAR TempInvoicingSpecification@1001 : TEMPORARY Record 336) OK@1003 : Boolean;
    VAR
      TrackingSpecification@1000 : Record 336;
      ReservEntry@1004 : Record 337;
    BEGIN
      // Used for combined receipt/return:
      IF (InvApprLine."Item No." = '') OR ((InvApprLine."Project No." + InvApprLine."Service Order No.") <> '') THEN
        EXIT;
      IF NOT FindReservEntry(InvApprLine,ReservEntry) THEN
        EXIT;
      ReservEntry.FINDSET;
      REPEAT
        ReservEntry.TESTFIELD("Reservation Status",ReservEntry."Reservation Status"::Prospect);
        //C008671.so Due to change in standard NAV 2013
        //ReservEntry.TESTFIELD("Appl.-to Item Entry");
        //TrackingSpecification.GET(ReservEntry."Appl.-to Item Entry");
        //C008671.eo
        //C008671.sn
        ReservEntry.TESTFIELD("Item Ledger Entry No.");
        TrackingSpecification.GET(ReservEntry."Item Ledger Entry No.");
        //C008671.en
        TempInvoicingSpecification := TrackingSpecification;
        TempInvoicingSpecification."Qty. to Invoice (Base)" :=
          ReservEntry."Qty. to Invoice (Base)";
        TempInvoicingSpecification."Qty. to Invoice" :=
          ROUND(ReservEntry."Qty. to Invoice (Base)"/ReservEntry."Qty. per Unit of Measure",0.00001);
        TempInvoicingSpecification."Buffer Status" := TempInvoicingSpecification."Buffer Status"::MODIFY;
        TempInvoicingSpecification.INSERT;
        ReservEntry.DELETE;
      UNTIL ReservEntry.NEXT = 0;

      OK := TempInvoicingSpecification.FINDFIRST;
    END;

    LOCAL PROCEDURE DeleteInvoiceSpecFromLine@19(InvApprLine@1002 : Record 11012032);
    VAR
      TrackingSpecification@1001 : Record 336;
      NSTrackingSpecification@1100528600 : Record 11071901;
    BEGIN
      TrackingSpecification.SETCURRENTKEY("Source ID","Source Type",
        "Source Subtype","Source Batch Name","Source Prod. Order Line","Source Ref. No.");
      TrackingSpecification.SETRANGE("Source ID",InvApprLine."Document No.");
      TrackingSpecification.SETRANGE("Source Type",DATABASE::"Invoice Approval Line");
      TrackingSpecification.SETRANGE("Source Subtype",InvApprLine."Document Type");
      TrackingSpecification.SETRANGE("Source Batch Name",'');
      TrackingSpecification.SETRANGE("Source Prod. Order Line",0);
      TrackingSpecification.SETRANGE("Source Ref. No.",InvApprLine."Line No.");
      IF TrackingSpecification.FINDSET THEN
        REPEAT
          TrackingSpecification.DELETE;
        UNTIL TrackingSpecification.NEXT = 0;

      //**4PS.sn DP00121
      NSTrackingSpecification.SETCURRENTKEY("Source ID","Source Type",
        "Source Subtype","Source Batch Name","Source Prod. Order Line","Source Ref. No.");
      NSTrackingSpecification.SETRANGE("Source ID",InvApprLine."Document No.");
      NSTrackingSpecification.SETRANGE("Source Type",DATABASE::"Invoice Approval Line");
      NSTrackingSpecification.SETRANGE("Source Subtype",InvApprLine."Document Type");
      NSTrackingSpecification.SETRANGE("Source Batch Name",'');
      NSTrackingSpecification.SETRANGE("Source Prod. Order Line",0);
      NSTrackingSpecification.SETRANGE("Source Ref. No.",InvApprLine."Line No.");
      IF NSTrackingSpecification.FINDSET THEN
        REPEAT
          NSTrackingSpecification.DELETE;
        UNTIL NSTrackingSpecification.NEXT = 0;
      //**4PS.en
    END;

    PROCEDURE UpdateItemTrackingAfterPosting@13(InvApprLine@1000 : Record 11012032);
    VAR
      ReservEntry@1003 : Record 337;
      CreateReservEntry@1001 : Codeunit 99000830;
    BEGIN
      // Used for updating Quantity to Handle and Quantity to Invoice after posting
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,FALSE);
      ReservEntry.SETRANGE("Source Type",DATABASE::"Invoice Approval Line");
      ReservEntry.SETRANGE("Source Subtype",InvApprLine."Document Type");
      ReservEntry.SETRANGE("Source ID",InvApprLine."Document No.");
      ReservEntry.SETRANGE("Source Batch Name",'');
      ReservEntry.SETRANGE("Source Prod. Order Line",0);
      CreateReservEntry.UpdateItemTrackingAfterPosting(ReservEntry);
    END;

    PROCEDURE SetApplySpecificItemTracking@16(ApplySpecific@1000 : Boolean);
    BEGIN
      ApplySpecificItemTracking := ApplySpecific;
    END;

    PROCEDURE SetOverruleItemTracking@18(Overrule@1000 : Boolean);
    BEGIN
      OverruleItemTracking := Overrule;
    END;

    PROCEDURE FindNSReservEntry@1100528600(InvApprLine@1000 : Record 11012032) : Boolean;
    VAR
      NSReservEntry@1100528600 : Record 11071900;
    BEGIN
      //**4PS DP00121
      FilterNSReservFor(NSReservEntry,InvApprLine);
      EXIT(NSReservEntry.FINDLAST);
    END;

    PROCEDURE FilterNSReservFor@1100528601(VAR FilterReservEntry@1000 : Record 11071900;InvApprLine@1001 : Record 11012032);
    BEGIN
      //**4PS DP00121
      FilterReservEntry.SETCURRENTKEY(
        "Source ID","Source Ref. No.","Source Type","Source Subtype",
        "Source Batch Name","Source Prod. Order Line","Reservation Status",
        "Shipment Date","Expected Receipt Date");

      FilterReservEntry.SETRANGE("Source Type",DATABASE::"Invoice Approval Line");
      FilterReservEntry.SETRANGE("Source Subtype",InvApprLine."Document Type");
      FilterReservEntry.SETRANGE("Source ID",InvApprLine."Document No.");
      FilterReservEntry.SETRANGE("Source Batch Name",'');
      FilterReservEntry.SETRANGE("Source Prod. Order Line",0);
      FilterReservEntry.SETRANGE("Source Ref. No.",InvApprLine."Line No.");
    END;

    PROCEDURE FindNSTrackingSpecification@1100528602(InvApprLine@1100528601 : Record 11012032) : Boolean;
    VAR
      NSTrackingSpecification@1100528602 : Record 11071901;
    BEGIN
      //**4PS DP00121
      NSTrackingSpecification.SETCURRENTKEY(
        "Source ID","Source Type","Source Subtype","Source Batch Name",
        "Source Prod. Order Line","Source Ref. No.");

      NSTrackingSpecification.SETRANGE("Source Type",DATABASE::"Invoice Approval Line");
      NSTrackingSpecification.SETRANGE("Source Subtype",InvApprLine."Document Type");
      NSTrackingSpecification.SETRANGE("Source ID",InvApprLine."Document No.");
      NSTrackingSpecification.SETRANGE("Source Batch Name",'');
      NSTrackingSpecification.SETRANGE("Source Prod. Order Line",0);
      NSTrackingSpecification.SETRANGE("Source Ref. No.",InvApprLine."Line No.");

      EXIT(NSTrackingSpecification.FINDLAST);
    END;

    BEGIN
    {
      C004829  Copied from C99000834 Purch. Line-Reserve, and modified for approval
    }
    END.
  }
}

