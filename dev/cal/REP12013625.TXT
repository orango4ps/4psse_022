OBJECT Report 12013625 Import Users to User Comp
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EXF510000;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Import ExFlow Users from Excel;
               SVE=Importera ExFlow-anv„ndare fr†n Excel];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  ReadExcelSheet;
                  AnalyzeData;
                END;

    OnPostReport=BEGIN
                   IF RecNo > 0 THEN
                     MESSAGE(Text004, NoOfUsers);
                 END;

  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1100285008;0;Container;
                  ContainerType=ContentArea }

      { 1100285007;1;Group  ;
                  CaptionML=[ENU=Options;
                             SVE=Alternativ] }

      { 1100285006;2;Group  ;
                  CaptionML=[ENU=Import from;
                             SVE=Importera fr†n] }

      { 1   ;3   ;Field     ;
                  CaptionML=[ENU=Workbook File Name;
                             SVE=Arbetsbok filnamn];
                  SourceExpr=FileName;
                  OnValidate=BEGIN
                               FileNameOnAfterValidate;
                             END;

                  OnAssistEdit=BEGIN
                                 UploadFile;
                               END;
                                }

      { 3   ;3   ;Field     ;
                  CaptionML=[ENU=Worksheet Name;
                             SVE=Kalkylbladet];
                  SourceExpr=SheetName;
                  OnAssistEdit=BEGIN
                                 IF ISSERVICETIER THEN
                                   SheetName := ExcelBuf.SelectSheetsName(UploadedFileName)
                                 ELSE
                                   SheetName := ExcelBuf.SelectSheetsName(FileName);
                               END;
                                }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text004@1004 : TextConst 'ENU=EX User Company table has been successfully updated with %1 entries.;SVE=Det gick bra att uppdatera EX UserCompany med %1 transaktioner.';
      Text006@1006 : TextConst 'ENU=Import Excel File;SVE=Importera Excel-fil';
      Text007@1007 : TextConst 'ENU=Analyzing Data...\\;SVE=Analyserar data...\\';
      ExcelBuf@1027 : Record 370;
      FileName@1037 : Text[250];
      SheetName@1038 : Text[250];
      TotalRecNo@1044 : Integer;
      RecNo@1045 : Integer;
      Window@1046 : Dialog;
      UserComp@1100285000 : Record 12013641;
      ID@1100285001 : Code[50];
      NoOfUsers@1100285002 : Integer;
      CurrLine@1100285003 : Integer;
      EXF01@1100285004 : TextConst 'ENU=User ID missinge in Excel!;SVE=Anv„ndar-ID saknas i Excel-arket!';
      UploadedFileName@1100285005 : Text[1024];
      ExFlowFileMgt@1100285006 : Codeunit 12013602;

    LOCAL PROCEDURE ReadExcelSheet@1();
    BEGIN
      ExcelBuf.OpenBook(FileName,SheetName);
      ExcelBuf.ReadSheet;
    END;

    LOCAL PROCEDURE AnalyzeData@2();
    BEGIN
      Window.OPEN(
        Text007 +
        '@1@@@@@@@@@@@@@@@@@@@@@@@@@\');
      Window.UPDATE(1,0);
      TotalRecNo := ExcelBuf.COUNT;
      RecNo := 0;
      NoOfUsers := 0;
      CurrLine := 0;

      ExcelBuf.RESET;
      ExcelBuf.SETRANGE("Row No.", 2, TotalRecNo);
      IF ExcelBuf.FIND('-') THEN BEGIN
        REPEAT
          RecNo := RecNo + 1;
          Window.UPDATE(1,ROUND(RecNo / TotalRecNo * 10000,1));

          IF CurrLine <> ExcelBuf."Row No." THEN
            BEGIN
              CurrLine := ExcelBuf."Row No.";

              IF ExcelBuf."Column No." <> 1 THEN
                ERROR(EXF01);

              IF UserComp."User ID" <> '' THEN
                BEGIN
                  UserComp.MODIFY;
                  UserComp.CreateApprovalGroups(UserComp."User ID");
                END;
            END;

          CASE ExcelBuf."Column No." OF
            1 :
              BEGIN
                ID := ExcelBuf."Cell Value as Text";
                NoOfUsers := NoOfUsers + 1;

                IF NOT UserComp.GET( ID) THEN
                  BEGIN
                    UserComp.INIT;
                    UserComp."User ID" := ID;
                    UserComp.INSERT(TRUE);
                  END;
              END;

            2 :
              UserComp."User Name" := ExcelBuf."Cell Value as Text";

            3 :
              IF UPPERCASE(ExcelBuf."Cell Value as Text") = 'YES' THEN
                UserComp.Superior := TRUE;

            4 :
              UserComp."E-mail ExFlow" := ExcelBuf."Cell Value as Text";

            6 :
              BEGIN
                IF UPPERCASE(ExcelBuf."Cell Value as Text") = 'SUPERUSER' THEN
                  UserComp."User Level" := UserComp."User Level"::SuperUser
                ELSE
                  IF UPPERCASE(ExcelBuf."Cell Value as Text") = 'USER' THEN
                    UserComp."User Level" := UserComp."User Level"::User
                  ELSE
                    UserComp."User Level" := UserComp."User Level"::PowerUser;
              END;
          END;
        UNTIL ExcelBuf.NEXT = 0;

        IF UserComp."User ID" <> '' THEN
          BEGIN
            UserComp.MODIFY;
            UserComp.CreateApprovalGroups(UserComp."User ID");
          END;

      END;

      Window.CLOSE;
    END;

    LOCAL PROCEDURE FormatData@8(TextToFormat@1000 : Text[250]) : Text[250];
    VAR
      FormatInteger@1001 : Integer;
      FormatDecimal@1002 : Decimal;
      FormatDate@1003 : Date;
    BEGIN
      CASE TRUE OF
        EVALUATE(FormatInteger,TextToFormat):
          EXIT(FORMAT(FormatInteger));
        EVALUATE(FormatDecimal,TextToFormat):
          EXIT(FORMAT(FormatDecimal));
        EVALUATE(FormatDate,TextToFormat):
          EXIT(FORMAT(FormatDate));
        ELSE
          EXIT(TextToFormat);
      END;
    END;

    LOCAL PROCEDURE FileNameOnAfterValidate@19040090();
    BEGIN
      UploadFile;
    END;

    PROCEDURE UploadFile@6();
    BEGIN
      ExFlowFileMgt.FileNameFromDialog(UploadedFileName,Text006,2,'',0);
      FileName := UploadedFileName;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

