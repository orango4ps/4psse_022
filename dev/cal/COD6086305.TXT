OBJECT Codeunit 6086305 EM Online Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EMW16.00.10.3.00.08;
  }
  PROPERTIES
  {
    Permissions=TableData 6086300=rimd,
                TableData 6086320=rimd,
                TableData 6086338=rimd,
                TableData 6086345=rimd,
                TableData 6086346=rimd;
    OnRun=BEGIN
            Code;
          END;

  }
  CODE
  {
    VAR
      OnlineMgt@1160040005 : Codeunit 6192772;
      SyncLogEntryNo@1160040036 : BigInteger;
      HttpActions@1160040001 : 'PUT,DELETE,GET';
      BatchMode@1160040026 : Boolean;
      ActivatedMsg@1160040010 : TextConst 'DEU=Die Bankvereinbarung wurde aktiviert.;ENU=The Bank Agreement was activated.;NLD=De bankovereenkomst is geactiveerd.';
      BankTransWithErrMsg@1160040009 : TextConst 'DEU=Im Banktransaktionseingang befinden sich ein oder mehrere EingÑnge, die manuell verarbeitet werden mÅssen.;ENU=There are one or more entries in the Bank Transaction Inbox that needs to be processed manually.;NLD=Er zijn ÇÇn of meerdere banktransacties in de inbox die handmatig verwerkt dienen te worden.';
      CannotLoadFile@1160040018 : TextConst 'DEU=Konnte die Datei %1 nicht finden.;ENU=Could not find the file %1.;NLD=Kan bestand %1 niet vinden.';
      ErrBothFromAndToHome@1160040021 : TextConst 'DEU=Wenn FromHome konfiguriert wurde, muss auch ToHome konfiguriert werden und andersherum.;ENU=If FromHome is configured ToHome needs to be configured too and vice versa.;NLD=Als Van huis geconfigureerd is moet Naar huis ook geconfigureerd zijn en vice versa.';
      ExpHeaderWithErrMsg@1160040024 : TextConst 'DEU=Es gibt einen oder mehreren Ausgleiche im Ausgleich-Posteingang, die manuell verarbeitet werden mÅssen.;ENU=There are one or more settlements in the Settlement Inbox that needs to be processed manually.;NLD=Er zijn ÇÇn of meerdere afrekeningen in het afrekeningen postvak-in die handmatig verwerkt dienen te worden.';
      ExpWithErrMsg@1160040007 : TextConst 'DEU=Im Kosteneingang befinden sich eine oder mehrere Kostenpositionen, die manuell verarbeitet werden mÅssen.;ENU=There are one or more expenses in the Expense Inbox that needs to be processed manually.;NLD=Er zijn ÇÇn of meerdere uitgaven in de inbox die handmatig verwerkt dienen te worden.';
      MilWithErrMsg@1160040028 : TextConst 'DEU=Es gibt eine oder mehrere Kilometerleistungen im Ausgleich-Posteingang, die manuell verarbeitet werden mÅssen.;ENU=There are one or more mileage in the Mileage Inbox that needs to be processed manually.;NLD=Er zijn ÇÇn of meerdere kilometrages in het afrekeningen postvak-in die handmatig verwerkt dienen te worden.';
      MissingMandatoryFieldErr@1160040015 : TextConst 'DEU=Es wurden nicht alle Pflichtfelder konfiguriert. Die vollstÑndige Liste der zu konfigurierenden Pflichtfelder fÅr %2 ist: %1.;ENU=Not all mandatory fields have been configured. The full list of mandatory fields to be configured for %1 is: %2.;NLD=Niet alle verplichte velden zijn geconfigureerd. De volledige lijst met verplicht te configureren veldenfor %1 is: %2.';
      NewBankTransMsg@1160040003 : TextConst 'DEU=%1 neue Banktransaktionen importiert.;ENU=%1 new bank transactions imported.;NLD=%1 nieuwe banktransacties geãmporteerd.';
      NewUpdateExpHeaderMsg@1160040017 : TextConst 'DEU=Das Feld %1 wurde mehrfach konfiguriert. Das ist nicht zulÑssig.;ENU=%1 new or updated settlements imported.;NLD=%1 nieuwe of bijgewerkte uitgavekoppen geãmporteerd.';
      NewUpdateExpMsg@1160040002 : TextConst 'DEU=%1 neue oder aktualisierte Kostenpositionen importiert.;ENU=%1 new or updated expenses imported.;NLD=%1 nieuwe of bijgewerkte uitgaven geãmporteerd.';
      NewUpdateMileMsg@1160040019 : TextConst 'DEU=%1 neue oder aktualisierte Kilometerleistung importiert.;ENU=%1 new or updated mileage imported.;NLD=%1 nieuwe of kilometrage geãmporteerd.';
      NoOfExpensesTxt@1160040013 : TextConst 'DEU=Anzahl der Kostenpositionen: %1;ENU=Number of Expenses: %1;NLD=Aantal uitgaven: %1';
      NoOfMileageTxt@1160040014 : TextConst 'DEU=%1 in %2 muss gleich sein wie %3 in %4.;ENU=Number of Mileage: %1;NLD=Hoeveelheid kilometrages: %1';
      NoOfSettlementsTxt@1160040037 : TextConst 'DEU=Anzahl Ausgleiche: %1;ENU=Number of Settlements: %1;NLD=Aantal afrekeningen: %1';
      PrefixId@1160040008 : TextConst 'DEU=id-;ENU=id-;NLD=id-';
      SyncMsg@1160040016 : TextConst 'DEU=Synchronisiert mit Continia Online;ENU=Synchronizing with Continia Online\\ #1##############################\ @2@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@;NLD=Synchroniseren met Continia Online \\ #1##############################\ @2@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@';
      SyncWithCOCompletedMsg@1160040000 : TextConst 'DEU=Synchronisierung mit Continia Online ist abgeschlossen\-----------------------------------------------------------------------;ENU=Synchronization with Continia Online has completed\-----------------------------------------------------------------------;NLD=Synchronisatie met Continia Online is voltooid\-----------------------------------------------------------------------';
      Text000@1160040038 : TextConst 'DEU=Cloud einrichten;ENU=Setup Cloud;NLD=Cloud instellen';
      Text001@1160040030 : TextConst 'DEU=Ausgleiche herunterladen;ENU=Downloading Settlements;NLD=Vereffeningen downloaden';
      Text002@1160040031 : TextConst 'DEU=Ausgaben herunterladen;ENU=Downloading Expenses;NLD=Uitgaven downloaden';
      Text003@1160040032 : TextConst 'DEU=Banktransaktionen herunterladen;ENU=Downloading Bank transactions;NLD=Banktransacties downloaden';
      Text004@1160040033 : TextConst 'DEU=Kilometerleistung herunterladen;ENU=Downloading Mileage;NLD=Kilometrage downloaden';
      Text005@1160040034 : TextConst 'DEU=Nachverarbeitung;ENU=Post Processing;NLD=Naverwerking';
      Text006@1160040035 : TextConst 'DEU=Dimensionen erneut versenden an Continia Online;ENU=Re-sending Dimensions to Continia Online;NLD=Dimensies opnieuw verzenden naar Continia Online';
      Text008@1160040012 : TextConst 'DEU=%1 wurde aktiviert fÅr %2.;ENU=%1 has been activated for %2.;NLD=%1 is geactiveerd voor %2.';
      UnableToUpdateExp@1160040027 : TextConst 'DEU=Diese Kostenposition hat eine neue Version in Continia Online.\\Bitte synchronisieren Sie, bevor Sie Ihre énderungen wiederholen.;ENU=This expense has a newer version in Continia Online.\\Please synchronize first and redo your changes.;NLD=Deze uitgave heeft een nieuwere versie in Continia Online.\\Synchroniseer a.u.b. alvorens u uw wijzigingen opnieuw doorvoert.';
      UnableToUpdateMil@1160040023 : TextConst 'DEU=Diese Kilometerleistung hat eine neue Version in Continia Online.\\Bitte, synchronisieren Sie, bevor Sie Ihre éndernungen erneut ausfÅhren.;ENU=This mileage has a newer version in Continia Online.\\Please synchronize first and redo your changes.;NLD=Deze kilometrage heeft een nieuwere versie in Continia Online.\\Synchroniseer a. u. b. alvorens u uw wijzigingen opnieuw doorvoert.';
      UnableToUpdateSet@1160040029 : TextConst 'DEU=Dieser Ausgleich hat eine neuere Version in Continia Online.\\Bitte, synchronisieren Sie, bevor Sie Ihre énderungen erneut ausfÅhren.;ENU=This settlement has a newer version in Continia Online.\\Please synchronize first and redo your changes.;NLD=Deze afrekening heeft een nieuwere versie in Continia Online.\\Synchroniseer a. u. b. alvorens u uw wijzigingen opnieuw doorvoert.';
      WarningMsg@1160040004 : TextConst 'DEU=WARNUNG.;ENU=WARNING.;NLD=WAARSCHUWING.';

    LOCAL PROCEDURE Code@1160040103();
    VAR
      SynchronizationLog@1160040011 : Record 6086301;
      XmlDoc@1160040010 : Codeunit 6192800;
      Window@1160040009 : Dialog;
      DisplayMsg@1160040008 : Text[1024];
      NoofTransactions@1160040005 : Integer;
      NoOfExpenses@1160040004 : Integer;
      NoOfExpensesProcessed@1160040003 : Integer;
      NoOfExpHeaders@1160040007 : Integer;
      NoOfExpHeadersProcessed@1160040006 : Integer;
      NoOfMileage@1160040002 : Integer;
      NoOfMileageProcessed@1160040001 : Integer;
      NoOfTransactionsProcessed@1160040000 : Integer;
    BEGIN
      IF GUIALLOWED THEN
        Window.OPEN(SyncMsg);

      IsCompanyActive(TRUE);

      // SETUP CLOUD
      IF GUIALLOWED THEN BEGIN
        Window.UPDATE(1,Text000);
        Window.UPDATE(2,ROUND(1 / 7 * 10000,1));
      END;
      SyncLogEntryNo := SynchronizationLog.StartLogEntry;

      SynchronizationLog.LOCKTABLE; //PREVENT SLOW CONNECTION SYNCH. THAT ENDS UP IN DEADLOCK ANYWAY
      SetupCloud;

      OnlineMgt.ExecuteRequest(GetNewDocumentsUrl,HttpActions::GET,TRUE,XmlDoc);
      SynchronizationLog.LogCOSyncEnded(SyncLogEntryNo);
      COMMIT; //SETUP ALTERATION SO FAR

      // DOWNLOADING SETTLEMENTS
      IF GUIALLOWED THEN BEGIN
        Window.UPDATE(1,Text001);
        Window.UPDATE(2,ROUND(2 / 7 * 10000,1));
      END;
      NoOfExpHeaders := GetExpenseHeaderFiles(XmlDoc);
      NoOfExpHeadersProcessed := ProcessExpHeaderInbox;

      // DOWNLOADING EXPENSES
      IF GUIALLOWED THEN BEGIN
        Window.UPDATE(1,Text002);
        Window.UPDATE(2,ROUND(3 / 7 * 10000,1));
      END;
      NoOfExpenses := GetExpenseFiles(XmlDoc);
      NoOfExpensesProcessed := ProcessExpenseInbox;

      // DOWNLOADING BANK TRANSACTIONS
      IF GUIALLOWED THEN BEGIN
        Window.UPDATE(1,Text003);
        Window.UPDATE(2,ROUND(4 / 7 * 10000,1));
      END;
      GetCardHolders;
      IF ReGet THEN
        NoofTransactions := GetNotConfirmedTransactions;
      NoofTransactions := NoofTransactions + GetNewTransactions;
      NoOfTransactionsProcessed := ProcessTransactionInbox;
      MatchAndCommit;

      // DOWNLOADING MILEAGE
      IF GUIALLOWED THEN BEGIN
        Window.UPDATE(1,Text004);
        Window.UPDATE(2,ROUND(5 / 7 * 10000,1));
      END;
      NoOfMileage := GetMileageFiles(XmlDoc);
      COMMIT;

      NoOfMileageProcessed := ProcessMileageInbox;

      // POST PROCESSING
      IF GUIALLOWED THEN BEGIN
        Window.UPDATE(1,Text005);
        Window.UPDATE(2,ROUND(6 / 7 * 10000,1));
      END;
      RemoveDeprecatedDocuments(XmlDoc);
      PostProcessSettlements(XmlDoc);
      RecalculateMileageAndCommit;

      //RE-SENDING DIMENSIONS TO CO
      IF GUIALLOWED THEN BEGIN
        Window.UPDATE(1,Text006);
        Window.UPDATE(2,ROUND(7 / 7 * 10000,1));
      END;
      IF NOT CODEUNIT.RUN(CODEUNIT::"Send New Conf. Values to CO") THEN;

      IF GUIALLOWED THEN
        Window.CLOSE;

      IF GUIALLOWED AND NOT BatchMode THEN BEGIN
        DisplayMsg := SyncWithCOCompletedMsg;
        IF NoOfExpHeaders <> 0 THEN
          DisplayMsg := DisplayMsg + '\' + STRSUBSTNO(NewUpdateExpHeaderMsg,NoOfExpHeaders);

        IF NoOfExpHeaderInboxWithError <> 0 THEN BEGIN
          DisplayMsg := DisplayMsg + '\\' + WarningMsg;
          DisplayMsg := DisplayMsg + '\' + STRSUBSTNO(ExpHeaderWithErrMsg,NoOfExpHeaderInboxWithError);
        END;

        IF NoOfExpenses <> 0 THEN
          DisplayMsg := DisplayMsg + '\' + STRSUBSTNO(NewUpdateExpMsg,NoOfExpenses);

        IF NoofTransactions <> 0 THEN
          DisplayMsg := DisplayMsg + '\' + STRSUBSTNO(NewBankTransMsg,NoofTransactions);

        IF (NoOfExpInboxWithError <> 0) OR (NoOfBankTransInboxWithError <> 0) THEN BEGIN
          DisplayMsg := DisplayMsg + '\\' + WarningMsg;
          IF NoOfExpInboxWithError <> 0 THEN
            DisplayMsg := DisplayMsg + '\' + STRSUBSTNO(ExpWithErrMsg,NoOfExpInboxWithError);

          IF NoOfBankTransInboxWithError <> 0 THEN
            DisplayMsg := DisplayMsg + '\' + STRSUBSTNO(BankTransWithErrMsg,NoOfBankTransInboxWithError);
        END;

        IF NoOfMileage <> 0 THEN
          DisplayMsg := DisplayMsg + '\' + STRSUBSTNO(NewUpdateMileMsg,NoOfMileage);

        IF NoOfMilInboxWithError <> 0 THEN BEGIN
          DisplayMsg := DisplayMsg + '\\' + WarningMsg;
          DisplayMsg := DisplayMsg + '\' + STRSUBSTNO(MilWithErrMsg,NoOfMilInboxWithError);
        END;

        MESSAGE(DisplayMsg);
      END;

      SynchronizationLog.FinalizeLogEntry(SyncLogEntryNo);
    END;

    PROCEDURE TestConnection@1160040070();
    VAR
      ContinaOnline@1160040000 : Codeunit 6192772;
    BEGIN
      ContinaOnline.TestConnection;
    END;

    PROCEDURE IsCompanyActive@1160040146(ShowError@1160040001 : Boolean) : Boolean;
    VAR
      LicenseMgt@1160040000 : Codeunit 6192773;
      AboutEM@1000 : Codeunit 6086306;
    BEGIN
      EXIT(LicenseMgt.IsActive('CEM',AboutEM.FullProductName,AboutEM.ShortProductName,ShowError,AboutEM.ObjectVersion));
    END;

    PROCEDURE ActivateCompany@1160040083() : Boolean;
    VAR
      Expense@1160040001 : Record 6086320;
      Mileage@1160040006 : Record 6086338;
      ExpHeader@1160040007 : Record 6086339;
      AboutMgt@1160040002 : Codeunit 6086306;
      LicenseMgt@1160040000 : Codeunit 6192773;
      LicenseInfo@1160040004 : ARRAY [100] OF Text[250];
      i@1160040005 : Integer;
      UserSelection@1160040003 : 'New Company,New Test Company,Reactivate';
    BEGIN
      i := LicenseMgt.GetStandardLicenseInfo(LicenseInfo);
      LicenseInfo[i + 1] := STRSUBSTNO(NoOfExpensesTxt,Expense.COUNT);
      LicenseInfo[i + 2] := STRSUBSTNO(NoOfMileageTxt,Mileage.COUNT);
      LicenseInfo[i + 3] := STRSUBSTNO(NoOfSettlementsTxt,ExpHeader.COUNT);

      UserSelection := LicenseMgt.ActivateProduct('CEM',AboutMgt.ObjectVersion,AboutMgt.FullProductName,LicenseInfo);

      MESSAGE(Text008,AboutMgt.FullProductName,COMPANYNAME);
      EXIT(TRUE);
    END;

    PROCEDURE DeactivateCompany@6085573();
    VAR
      LicenseMgt@1160040000 : Codeunit 6192773;
    BEGIN
      LicenseMgt.DeactivateCompanyInNAV(TRUE);
    END;

    PROCEDURE CreateNewSettlement@1160040094() : GUID;
    VAR
      XmlDoc@1160040000 : Codeunit 6192800;
    BEGIN
      IsCompanyActive(TRUE);
      OnlineMgt.ExecuteRequest(GetCreateNewSettlementUrl,HttpActions::GET,TRUE,XmlDoc);
      EXIT(GetGuid(XmlDoc,'SettlementList/Settlement'));
    END;

    PROCEDURE UpdateSettlement@1160040095(ExpHeader@1160040000 : Record 6086339) NewVersionNo : Text[100];
    VAR
      XmlLib@1160040004 : Codeunit 6085573;
      XmlDoc@1160040003 : Codeunit 6192800;
      XmlNode@1160040002 : Codeunit 6192801;
    BEGIN
      IsCompanyActive(TRUE);
      XmlDoc.CreateNode(XmlNode,'element','Settlement','');

      XmlLib.SetXmlNodeAttr(XmlNode,'EmployeeNo',ExpHeader."Continia User ID");
      XmlLib.SetXmlNodeAttr(XmlNode,'Description',ExpHeader.Description);
      XmlLib.SetXmlNodeAttr(XmlNode,'UserId',ExpHeader.GetEmployeeEmail);
      XmlLib.SetXmlNodeAttr(XmlNode,'SettlementNo',ExpHeader."No.");
      XmlLib.SetXmlNodeAttr(XmlNode,'DocumentVersionNo',ExpHeader."Continia Online Version No.");
      XmlDoc.AppendChild(XmlNode);

      AddSettlementDimsToXmlNode(ExpHeader,XmlNode);

      IF NOT OnlineMgt.ExecuteRequest(GetSettlementUpdateExistingUrl(ExpHeader."Exp. Header GUID"),HttpActions::PUT,FALSE,XmlDoc) THEN
        ShowErrorMsg(OnlineMgt.GetLastErrorText);

      NewVersionNo := GetSettlementNewVersionNo(XmlDoc);

      SetSettlementUploadComplete(ExpHeader);
      COMMIT;
    END;

    LOCAL PROCEDURE SetSettlementUploadComplete@1160040100(ExpHeader@1160040000 : Record 6086339);
    VAR
      XmlDoc@1160040001 : Codeunit 6192800;
    BEGIN
      IsCompanyActive(TRUE);
      CLEAR(XmlDoc);
      OnlineMgt.ExecuteRequest(GetAppUploadCompleteUrl(ExpHeader."Exp. Header GUID"),HttpActions::PUT,FALSE,XmlDoc);
    END;

    LOCAL PROCEDURE ProcessExpHeaderInbox@1160040046() Cnt : Integer;
    VAR
      ExpHeaderInbox@1160040000 : Record 6086341;
      Process@1160040001 : Codeunit 6086383;
    BEGIN
      ExpHeaderInbox.SETFILTER(Status,'%1',ExpHeaderInbox.Status::Pending);
      IF ExpHeaderInbox.ISEMPTY THEN
        ExpHeaderInbox.SETFILTER(Status,'<>%1',ExpHeaderInbox.Status::Accepted);

      IF ExpHeaderInbox.FINDFIRST THEN
        REPEAT
          Cnt += 1;
          Process.RUN(ExpHeaderInbox);
          COMMIT;
        UNTIL ExpHeaderInbox.NEXT = 0;
    END;

    PROCEDURE CreateNewExpense@1160040047() ExpenseGuid : GUID;
    VAR
      XmlDoc@1160040000 : Codeunit 6192800;
    BEGIN
      IsCompanyActive(TRUE);
      OnlineMgt.ExecuteRequest(GetCreateNewExpenseUrl,HttpActions::GET,TRUE,XmlDoc);
      EXIT(GetGuid(XmlDoc,'ReceiptList/Receipt'));
    END;

    PROCEDURE UpdateExpense@1160040058(Expense@1160040000 : Record 6086320;VAR ExpAllocationTemp@1160040001 : TEMPORARY Record 6086321) NewVersionNo : Text[100];
    VAR
      XmlLib@1160040004 : Codeunit 6085573;
      XmlDoc@1160040003 : Codeunit 6192800;
      XmlNode@1160040002 : Codeunit 6192801;
      EmptyGUID@1160040012 : GUID;
    BEGIN
      IsCompanyActive(TRUE);

      XmlDoc.CreateNode(XmlNode,'element','Receipt','');

      XmlLib.SetXmlNodeAttr(XmlNode,'EmployeeNo',Expense."Continia User ID");
      XmlLib.SetXmlNodeAttr(XmlNode,'Description',Expense.Description);
      XmlLib.SetXmlNodeAttr(XmlNode,'DocumentDate',FORMAT(Expense."Document Date",0,9));
      XmlLib.SetXmlNodeAttr(XmlNode,'CountryRegion',Expense."Country/Region Code");
      XmlLib.SetXmlNodeAttr(XmlNode,'CurrencyCode',GetCurrencyCode(Expense."Currency Code"));
      XmlLib.SetXmlNodeAttr(XmlNode,'Amount',FORMAT(Expense.Amount,0,9));
      XmlLib.SetXmlNodeAttr(XmlNode,'ReceiptType',Expense."Expense Type");
      XmlLib.SetXmlNodeAttr(XmlNode,'UserId',Expense.GetEmployeeEmail);
      XmlLib.SetXmlNodeAttr(XmlNode,'DocumentVersionNo',Expense."Continia Online Version No.");
      IF Expense."Expense Header GUID" <> EmptyGUID THEN
        XmlLib.SetXmlNodeAttr(XmlNode,'SettlementId',OnlineMgt.GetGUIDAsText(Expense."Expense Header GUID"));
      IF Expense."Matched to Bank Transaction" THEN
        XmlLib.SetXmlNodeAttr(XmlNode,'BankTransaction',OnlineMgt.GetBoolAsText(Expense."Matched to Bank Transaction"));
      XmlDoc.AppendChild(XmlNode);

      AddExpenseDimensionsToXmlNode(Expense,XmlNode);
      AddAttendeesToXmlNode(XmlNode,DATABASE::Expense,Expense."Entry No.");

      AddExpenseAllocationsToXmlNode(Expense,ExpAllocationTemp,XmlNode);
      IF NOT OnlineMgt.ExecuteRequest(GetExpenseUpdateExistingUrl(Expense."Expense GUID"),HttpActions::PUT,FALSE,XmlDoc) THEN
        ShowErrorMsg(OnlineMgt.GetLastErrorText);

      NewVersionNo := GetExpenseNewVersionNo(XmlDoc);
      IF Expense."Transfer Attachments to CO" THEN
        SendAttachments(DATABASE::Expense,Expense."Entry No.",Expense."Expense GUID");

      SetUploadComplete(Expense);
      COMMIT;
    END;

    LOCAL PROCEDURE SendAttachments@1160040064(TableID@1160040004 : Integer;DocRefNo@1160040005 : Integer;DocGUID@1160040008 : GUID);
    VAR
      TempFile@1000 : TEMPORARY Record 6085608;
      EMAttachment@1160040001 : Record 6086359;
      OnlineMgtLocal@1160040002 : Codeunit 6192772;
      XmlDoc@1160040003 : Codeunit 6192800;
    BEGIN
      IsCompanyActive(TRUE);
      EMAttachment.SETRANGE("Table ID",TableID);
      EMAttachment.SETRANGE("Document Type",0);
      EMAttachment.SETRANGE("Document No.",'');
      EMAttachment.SETRANGE("Doc. Ref. No.",DocRefNo);
      IF EMAttachment.FINDFIRST THEN BEGIN
        REPEAT
          EMAttachment.GetAttachment(TempFile);
          OnlineMgtLocal.AddFileToBatchUpload(TempFile.GetFilePath,EMAttachment."File Name");
        UNTIL EMAttachment.NEXT = 0;

        OnlineMgtLocal.BatchUploadFiles(UploadFilesUrl(DocGUID,TableID),TRUE);
      END ELSE BEGIN
        CLEAR(XmlDoc);
        OnlineMgt.ExecuteRequest(GetDeleteFilesUrl(DocGUID,TableID),HttpActions::PUT,FALSE,XmlDoc);
      END;
    END;

    LOCAL PROCEDURE SetUploadComplete@1160040066(Expense@1160040000 : Record 6086320);
    VAR
      XmlDoc@1160040001 : Codeunit 6192800;
    BEGIN
      IsCompanyActive(TRUE);
      CLEAR(XmlDoc);
      OnlineMgt.ExecuteRequest(GetAppUploadCompleteUrl(Expense."Expense GUID"),HttpActions::PUT,FALSE,XmlDoc);
    END;

    PROCEDURE DeprecateExpense@1160040078(ExpenseGuid@1160040000 : GUID;COVersionNo@1160040003 : Text[100];ShowError@1160040002 : Boolean) Success : Boolean;
    VAR
      XmlDoc@1160040001 : Codeunit 6192800;
    BEGIN
      IsCompanyActive(TRUE);
      CLEAR(XmlDoc);

      //IF VERSION IS SPECIFIED, CO WILL CHECK IT
      IF COVersionNo <> '' THEN
        BuildVersionNoElement(DATABASE::Expense,COVersionNo,XmlDoc);

      Success := OnlineMgt.ExecuteRequest(GetExpenseDeprecateUrl(ExpenseGuid),HttpActions::PUT,FALSE,XmlDoc);

      IF ShowError THEN
        IF NOT Success THEN
          ShowErrorMsg(OnlineMgt.GetLastErrorText);
    END;

    LOCAL PROCEDURE GetGuid@1160040059(XmlDoc@1160040001 : Codeunit 6192800;Attribute@1160040004 : Text[30]) : GUID;
    VAR
      DocumentElement@1160040005 : Codeunit 6192801;
      XMLNodeList@1160040000 : Codeunit 6192802;
      ExpenseGUID@1160040003 : GUID;
      i@1160040002 : Integer;
    BEGIN
      CLEAR(XMLNodeList);
      XmlDoc.GetDocumentElement(DocumentElement);
      DocumentElement.SelectNodes(XMLNodeList,Attribute);
      FOR i := 0 TO XMLNodeList.Count - 1 DO
        ExpenseGUID := OnlineMgt.GetAttribAsGuid(XMLNodeList,'Id',i);
      EXIT(ExpenseGUID);
    END;

    LOCAL PROCEDURE GetExpenseHeaderFiles@1160040104(VAR XmlDoc@1160040005 : Codeunit 6192800) Cnt : Integer;
    VAR
      ExpHeader@1160040031 : Record 6086339;
      ExpHeaderInbox@1160040000 : Record 6086341;
      DocumentElement@1160040003 : Codeunit 6192801;
      ExpHeaderNode@1160040012 : Codeunit 6192801;
      XMLNodeList@1160040002 : Codeunit 6192802;
      TextValue@1160040013 : Text[1024];
      ExpHeaderGUID@1160040001 : GUID;
      ImportCounter@1160040010 : Integer;
      LastEntryNo@1160040007 : Integer;
    BEGIN
      IF NOT XmlDoc.HasChildnodes THEN
        EXIT;

      XmlDoc.GetDocumentElement(DocumentElement);
      IF NOT DocumentElement.SelectNodes(XMLNodeList,'SettlementList/Settlement') THEN
        EXIT;

      FOR Cnt := 0 TO XMLNodeList.Count - 1 DO BEGIN
        IF LastEntryNo = 0 THEN BEGIN
          ExpHeaderInbox.LOCKTABLE;
          IF ExpHeaderInbox.FINDLAST THEN
            LastEntryNo := ExpHeaderInbox."Entry No.";
        END;
        LastEntryNo += 1;
        ImportCounter += 1;

        ExpHeaderGUID := OnlineMgt.GetAttribAsGuid(XMLNodeList,'Id',Cnt);

        ExpHeader.SETCURRENTKEY("Exp. Header GUID");
        ExpHeader.SETRANGE("Exp. Header GUID",ExpHeaderGUID);
        IF NOT ExpHeader.FINDFIRST THEN
          CLEAR(ExpHeader);

        ExpHeaderInbox.INIT;
        ExpHeaderInbox."Entry No." := LastEntryNo;
        ExpHeaderInbox."Expense Header Type" := ExpHeader."Document Type"::Settlement;
        ExpHeaderInbox."Expense Header No." := ExpHeader."No.";
        ExpHeaderInbox."Exp. Header GUID" := ExpHeaderGUID;

        ExpHeaderInbox.Status := ExpHeaderInbox.Status::Pending;
        ExpHeaderInbox."Continia User ID" := FindEmployeeFromEmail(OnlineMgt.GetAttribAsCode(XMLNodeList,'EmployeeNo',Cnt));

        OnlineMgt.GetAttribAsText(XMLNodeList,'Description',Cnt,TextValue);
        ExpHeaderInbox.Description := COPYSTR(TextValue,1,MAXSTRLEN(ExpHeaderInbox.Description));

        OnlineMgt.GetAttribAsText(XMLNodeList,'Description2',Cnt,TextValue);
        ExpHeaderInbox."Description 2" := COPYSTR(TextValue,1,MAXSTRLEN(ExpHeaderInbox."Description 2"));
        IF NOT ExpHeaderInbox.INSERT(TRUE) THEN
          ExpHeaderInbox.MODIFY;

        ExpHeaderInbox."Expense Header Completed" := OnlineMgt.GetAttribAsBool(XMLNodeList,'DocumentCompleted',Cnt);
        OnlineMgt.GetAttribAsText(XMLNodeList,'DocumentVersionNo',Cnt,ExpHeaderInbox."Continia Online Version No.");

        CLEAR(ExpHeaderNode);
        XMLNodeList.GetItem(ExpHeaderNode,Cnt);

        ReadSettlementDimensions(ExpHeaderNode,ExpHeaderInbox);

        ExpHeaderInbox.MODIFY;
        COMMIT;

      END;
      Cnt := ImportCounter;
    END;

    LOCAL PROCEDURE GetExpenseFiles@1160040010(XmlDoc@1160040005 : Codeunit 6192800) Cnt : Integer;
    VAR
      TempFile@1000 : TEMPORARY Record 6085608;
      ExpSetup@1160040013 : Record 6086300;
      Expense@1160040031 : Record 6086320;
      ExpenseInbox@1160040000 : Record 6086323;
      ConfigField@1160040008 : Record 6086346;
      EMAttachmentInbox@1160040021 : Record 6086363;
      AttachmentNode@1160040019 : Codeunit 6192801;
      DocumentElement@1160040003 : Codeunit 6192801;
      ExpenseNode@1160040012 : Codeunit 6192801;
      AttachmentNodeList@1160040018 : Codeunit 6192802;
      EMDocFileSys@1160040006 : Codeunit 6086397;
      XMLNodeList@1160040002 : Codeunit 6192802;
      Dummytext@1160040029 : Text[1024];
      FileLink@1160040004 : Text[1024];
      Filename@1160040033 : Text[1024];
      ToEmail@1160040009 : Text[1024];
      ExpenseGUID@1160040001 : GUID;
      Count2@1160040016 : Integer;
      ImportCounter@1160040010 : Integer;
      LastEntryNo@1160040007 : Integer;
    BEGIN
      IF NOT XmlDoc.HasChildnodes THEN
        EXIT;

      XmlDoc.GetDocumentElement(DocumentElement);
      IF NOT DocumentElement.SelectNodes(XMLNodeList,'ReceiptList/Receipt') THEN
        EXIT;

      FOR Cnt := 0 TO XMLNodeList.Count - 1 DO BEGIN
        IF LastEntryNo = 0 THEN BEGIN
          ExpSetup.GET;
          ExpenseInbox.LOCKTABLE;
          IF ExpenseInbox.FINDLAST THEN
            LastEntryNo := ExpenseInbox."Entry No.";
        END;
        LastEntryNo += 1;
        ImportCounter += 1;
        ExpenseGUID := OnlineMgt.GetAttribAsGuid(XMLNodeList,'Id',Cnt);

        CLEAR(ExpenseNode);
        XMLNodeList.GetItem(ExpenseNode,Cnt);

        Expense.SETCURRENTKEY("Expense GUID");
        Expense.SETRANGE("Expense GUID",ExpenseGUID);
        IF NOT Expense.FINDFIRST THEN
          CLEAR(Expense);

        ExpenseInbox.INIT;
        ExpenseInbox."Entry No." := LastEntryNo;
        ExpenseInbox."Expense Entry No." := Expense."Entry No.";
        ExpenseInbox."Expense GUID" := ExpenseGUID;

        ExpenseInbox.Status := ExpenseInbox.Status::Pending;
        ExpenseInbox."Continia User ID" := FindEmployeeFromEmail(OnlineMgt.GetAttribAsCode(XMLNodeList,'EmployeeNo',Cnt));

        OnlineMgt.GetAttribAsText(XMLNodeList,'Description',Cnt,Dummytext);
        ExpenseInbox.Description := COPYSTR(Dummytext,1,MAXSTRLEN(ExpenseInbox.Description));

        OnlineMgt.GetAttribAsText(XMLNodeList,'Description2',Cnt,Dummytext);
        ExpenseInbox."Description 2" := COPYSTR(Dummytext,1,MAXSTRLEN(ExpenseInbox."Description 2"));

        ExpenseInbox."Document Date" := OnlineMgt.GetAttribAsDateUTC(XMLNodeList,'DocumentDate',Cnt);

        ExpenseInbox."Country/Region Code" :=
          GetAttribAsCodeLength(XMLNodeList,'CountryRegion',Cnt,
           MAXSTRLEN(ExpenseInbox."Country/Region Code"));

        ExpenseInbox."Currency Code" :=
          GetCurrencyCodeFromXML(
          GetAttribAsCodeLength(XMLNodeList,'CurrencyCode',
           Cnt,MAXSTRLEN(ExpenseInbox."Currency Code")));

        ExpenseInbox.Amount := OnlineMgt.GetAttribAsDecimal(XMLNodeList,'Amount',Cnt);
        ExpenseInbox."Expense Type" := OnlineMgt.GetAttribAsCode(XMLNodeList,'ReceiptType',Cnt);
        OnlineMgt.GetAttribAsText(XMLNodeList,'ToEmail',Cnt,ToEmail);

        ExpenseInbox."Expense Completed" := OnlineMgt.GetAttribAsBool(XMLNodeList,'DocumentCompleted',Cnt);
        OnlineMgt.GetAttribAsText(XMLNodeList,'DocumentVersionNo',Cnt,ExpenseInbox."Continia Online Version No.");
        ExpenseInbox."Expense Header GUID" := OnlineMgt.GetAttribAsGuid(XMLNodeList,'SettlementId',Cnt);

        IF ToEmail <> '' THEN
          ExpenseInbox."Transaction ID" := ExtractIdfromEmail(ToEmail);

        ExpenseInbox."Imported Date/Time" := CURRENTDATETIME;
        ExpenseInbox."Imported by User ID" := USERID;
        IF NOT ExpenseInbox.INSERT THEN
          ExpenseInbox.MODIFY;

        ReadExpDimensions(ExpenseNode,ExpenseInbox);

        ConfigField.SETRANGE("Field Code",'CASH/PRIVATE CARD');
        IF ConfigField.ISEMPTY THEN
          ExpenseInbox."Cash/Private Card" := TRUE;

        ReadExpAllocations(ExpenseNode,ExpenseInbox);

        IF ExpenseNode.SelectSingleNode(AttachmentNode,'Attachments') THEN
          IF AttachmentNode.SelectNodes(AttachmentNodeList,'Attachment') THEN
            FOR Count2 := 0 TO AttachmentNodeList.Count - 1 DO BEGIN
              OnlineMgt.GetAttribAsText(AttachmentNodeList,'AttachmentLink',Count2,FileLink);
              OnlineMgt.GetAttribAsText(AttachmentNodeList,'OriginalFilename',Count2,Filename);
              Filename := EMDocFileSys.CorrectAndShortenFilename(Filename);

              IF FileLink <> '' THEN BEGIN
                EMAttachmentInbox.INIT;
                EMAttachmentInbox."Table ID" := DATABASE::"Expense Inbox";
                EMAttachmentInbox."Document Type" := 0;
                EMAttachmentInbox."Document No." := '';
                EMAttachmentInbox."Doc. Ref. No." := ExpenseInbox."Entry No.";
                EMAttachmentInbox."File Name" := Filename;
                EMAttachmentInbox.INSERT(TRUE);

                OnlineMgt.DownloadFile(FileLink,'',TempFile,FALSE);
                EMAttachmentInbox.SetAttachment(TempFile);
              END;
            END;

        ReadExpAttendees(ExpenseNode,DATABASE::"Expense Inbox",ExpenseInbox."Entry No.");

        ExpenseInbox.MODIFY;
        COMMIT;

        MarkDownloadedDocument(DATABASE::Expense,ExpenseGUID,TRUE);
      END;
      Cnt := ImportCounter;
    END;

    LOCAL PROCEDURE ProcessExpenseInbox@1160040000() Cnt : Integer;
    VAR
      ExpenseInbox@1160040000 : Record 6086323;
      Process@1160040001 : Codeunit 6086307;
    BEGIN
      ExpenseInbox.SETFILTER(Status,'%1',ExpenseInbox.Status::Pending);
      IF ExpenseInbox.ISEMPTY THEN
        ExpenseInbox.SETFILTER(Status,'<>%1',ExpenseInbox.Status::Accepted);

      IF ExpenseInbox.FINDFIRST THEN
        REPEAT
          Cnt += 1;
          Process.RUN(ExpenseInbox);
          COMMIT;
        UNTIL ExpenseInbox.NEXT = 0;
    END;

    LOCAL PROCEDURE ProcessTransactionInbox@1160040033() Count : Integer;
    VAR
      BankTransactionInbox@1160040003 : Record 6086331;
      Process@1160040002 : Codeunit 6086309;
      dt@1160040000 : DateTime;
    BEGIN
      BankTransactionInbox.SETFILTER(Status, '%1',BankTransactionInbox.Status::Pending);
      IF BankTransactionInbox.ISEMPTY THEN BEGIN
        BankTransactionInbox.SETFILTER(Status, '<>%1',BankTransactionInbox.Status::Accepted);
        BankTransactionInbox.SETFILTER("Try Processed Date/Time",'%1|<%2',dt,CREATEDATETIME(CALCDATE('<-1D>',TODAY),TIME));
      END;
      IF BankTransactionInbox.FINDFIRST THEN
        REPEAT
          Count += 1;
          Process.RUN(BankTransactionInbox);
          COMMIT;
        UNTIL BankTransactionInbox.NEXT = 0;
    END;

    LOCAL PROCEDURE GetNewTransactions@1160040027() : Integer;
    VAR
      ExpenseMgt@1160040000 : Record 6086300;
      XmlDoc@1160040001 : Codeunit 6192800;
      NumberTransactions@1160040002 : Integer;
    BEGIN
      IsCompanyActive(TRUE);

      ExpenseMgt.GET;
      ExpenseMgt."Re-Get Transactions" := TRUE;
      ExpenseMgt.MODIFY;
      COMMIT;

      OnlineMgt.ExecuteRequest(GetNewTransactionUrl,HttpActions::GET,TRUE,XmlDoc);
      NumberTransactions := GetTransactionsFiles(XmlDoc);

      ExpenseMgt."Re-Get Transactions" := FALSE;
      ExpenseMgt.MODIFY;
      COMMIT;
      EXIT(NumberTransactions);
    END;

    LOCAL PROCEDURE GetNotConfirmedTransactions@1160040087() : Integer;
    VAR
      XmlDoc@1160040001 : Codeunit 6192800;
    BEGIN
      IsCompanyActive(TRUE);
      OnlineMgt.ExecuteRequest(GetNotConfirmedTransactionUrl,HttpActions::GET,TRUE,XmlDoc);
      EXIT(GetTransactionsFiles(XmlDoc));
    END;

    LOCAL PROCEDURE GetTransactionsFiles@1160040020(XmlDoc@1160040005 : Codeunit 6192800) Cnt : Integer;
    VAR
      ExpSetup@1160040013 : Record 6086300;
      BankTransactionInbox@1160040000 : Record 6086331;
      CardHolder@1160040008 : Record 6086380;
      DocumentElement@1160040006 : Codeunit 6192801;
      XMLNodeList@1160040002 : Codeunit 6192802;
      DocDateTime@1160040003 : DateTime;
      BankTransactionID@1160040004 : Text[50];
      ExpEntryNo@1160040001 : Integer;
      ImportCounter@1160040010 : Integer;
      LastEntryNo@1160040007 : Integer;
      StatementTransaction@1000 : Boolean;
    BEGIN
      IF NOT XmlDoc.HasChildnodes THEN
        EXIT;

      XmlDoc.GetDocumentElement(DocumentElement);
      IF NOT DocumentElement.SelectNodes(XMLNodeList,'Transaction') THEN
        EXIT;

      FOR Cnt := 0 TO XMLNodeList.Count - 1 DO BEGIN
        IF LastEntryNo = 0 THEN BEGIN
          ExpSetup.GET;
          BankTransactionInbox.LOCKTABLE;
          IF BankTransactionInbox.FINDLAST THEN
            LastEntryNo := BankTransactionInbox."Entry No.";
        END;
        LastEntryNo += 1;

        OnlineMgt.GetAttribAsText(XMLNodeList,'BankEntryId',Cnt,BankTransactionID);
        StatementTransaction := OnlineMgt.GetAttribAsBool(XMLNodeList,'BankReconciliationTransaction',Cnt);
        ExpEntryNo := OnlineMgt.GetAttribAsInt(XMLNodeList,'InternalId',Cnt);
        IF NOT BankTransactionInbox.IsDuplicateFromBank(BankTransactionID,StatementTransaction) THEN BEGIN
          ImportCounter += 1;
          BankTransactionInbox.SETCURRENTKEY("Entry No.");
          BankTransactionInbox.SETRANGE("Entry No.",ExpEntryNo);
          IF BankTransactionInbox.ISEMPTY THEN BEGIN
            BankTransactionInbox.INIT;
            BankTransactionInbox."Entry No." := ExpEntryNo;
            BankTransactionInbox."Card No." := OnlineMgt.GetAttribAsCode(XMLNodeList,'CardId',Cnt);
            OnlineMgt.GetAttribAsText(XMLNodeList,'CardName',Cnt,BankTransactionInbox."Card Name");
            IF BankTransactionInbox."Card Name" = '' THEN
              IF CardHolder.GET(BankTransactionInbox."Card No.") THEN
                  BankTransactionInbox."Card Name" := CardHolder."Card Name";

            OnlineMgt.GetAttribAsText(XMLNodeList,'EmployeeNo',Cnt,BankTransactionInbox."Employee No.");

            DocDateTime := OnlineMgt.GetAttribAsDateTime(XMLNodeList,'DocumentDate',Cnt);
            IF DT2DATE(DocDateTime) < 19000101D THEN
              BankTransactionInbox."Document Date" := 19000101D
            ELSE
              BankTransactionInbox."Document Date" := DT2DATE(DocDateTime);
            BankTransactionInbox."Document Time" := DT2TIME(DocDateTime);

            BankTransactionInbox."Posting Date" := OnlineMgt.GetAttribAsDateUTC(XMLNodeList,'PostingDate',Cnt);
            IF BankTransactionInbox."Posting Date" <= 19000101D THEN
              BankTransactionInbox."Posting Date" := BankTransactionInbox."Document Date";

            BankTransactionInbox."Currency Code" := GetCurrencyCodeFromXML(OnlineMgt.GetAttribAsCode(XMLNodeList,'CurrencyCode',Cnt));
            BankTransactionInbox."Currency Exch. Rate" := OnlineMgt.GetAttribAsDecimal(XMLNodeList,'CurrencyExchRate',Cnt);
            BankTransactionInbox.Amount := OnlineMgt.GetAttribAsDecimal(XMLNodeList,'Amount',Cnt);
            BankTransactionInbox."Bank-Currency Amount" := OnlineMgt.GetAttribAsDecimal(XMLNodeList,'AmountLCY',Cnt);

            // SOME AMOUNTS ARE NOT FILLED
            IF BankTransactionInbox."Currency Code" = '' THEN BEGIN
              IF (BankTransactionInbox.Amount <> 0) AND (BankTransactionInbox."Bank-Currency Amount" = 0) THEN
                BankTransactionInbox."Bank-Currency Amount" := BankTransactionInbox.Amount;

              IF (BankTransactionInbox."Bank-Currency Amount" <> 0) AND (BankTransactionInbox.Amount = 0) THEN
                BankTransactionInbox.Amount := BankTransactionInbox."Bank-Currency Amount";
            END;

            BankTransactionInbox."Entry Type" := OnlineMgt.GetAttribAsInt(XMLNodeList,'EntryType',Cnt);
            BankTransactionInbox."Business Category ID" := OnlineMgt.GetAttribAsCode(XMLNodeList,'BusinessCategoryId',Cnt);
            BankTransactionInbox."Business No." := OnlineMgt.GetAttribAsCode(XMLNodeList,'BusinessNo',Cnt);

            BankTransactionInbox."Bank Code" := OnlineMgt.GetAttribAsCode(XMLNodeList,'BankNameShort',Cnt);
            IF UPPERCASE(BankTransactionInbox."Bank Code") <> 'TEST' THEN
              BankTransactionInbox."Bank Country/Region" := OnlineMgt.GetAttribAsCode(XMLNodeList,'BankCountry',Cnt);

            BankTransactionInbox."Agreement ID" := OnlineMgt.GetAttribAsCode(XMLNodeList,'AgreementNumber',Cnt);

            OnlineMgt.GetAttribAsText(XMLNodeList,'BusinessName',Cnt,BankTransactionInbox."Business Name");
            OnlineMgt.GetAttribAsText(XMLNodeList,'BusinessAddress',Cnt,BankTransactionInbox."Business Address");
            BankTransactionInbox."Business Country/Region" := OnlineMgt.GetAttribAsCode(XMLNodeList,'BusinessCountryRegion',Cnt);

            BankTransactionInbox."Transaction Type" := BankTransactionInbox."Transaction Type"::Normal;
            IF (BankTransactionInbox."Card Name" = '') AND (BankTransactionInbox."Business No." = '') AND
               (BankTransactionInbox."Business Category ID" = '')
            THEN
              BankTransactionInbox."Transaction Type" := BankTransactionInbox."Transaction Type"::Balancing;
            BankTransactionInbox."Bank Statement Transaction" := StatementTransaction;

            BankTransactionInbox."Transaction ID" := BankTransactionID;
            BankTransactionInbox."Imported Date/Time" := CURRENTDATETIME;
            BankTransactionInbox."Imported by User ID" := UPPERCASE(USERID);
            BankTransactionInbox.INSERT(TRUE);

            COMMIT;
          END;
        END;

        MarkDownloadedTransaction(ExpEntryNo);
      END;

      Cnt := ImportCounter;
    END;

    LOCAL PROCEDURE GetCardHolders@1160040026();
    VAR
      ExpenseMgt@1160040000 : Record 6086300;
      XmlDoc@1160040001 : Codeunit 6192800;
      NumberTransactions@1160040002 : Integer;
    BEGIN
      //CARD NAMES ARE ONLY RECEIVED ONCE
      IsCompanyActive(TRUE);
      OnlineMgt.ExecuteRequest(GetCardHoldersUrl,HttpActions::GET,TRUE,XmlDoc);
      ReadCardHolders(XmlDoc);
      COMMIT;
    END;

    LOCAL PROCEDURE ReadCardHolders@1160040016(XmlDoc@1160040005 : Codeunit 6192800);
    VAR
      CardHolder@1160040000 : Record 6086380;
      DocumentElement@1160040006 : Codeunit 6192801;
      XMLNodeList@1160040002 : Codeunit 6192802;
      XmlDocConfirm@1160040004 : Codeunit 6192800;
      Cnt@1160040001 : Integer;
      CardHolderID@1160040003 : Text[50];
    BEGIN
      IF NOT XmlDoc.HasChildnodes THEN
        EXIT;

      XmlDoc.GetDocumentElement(DocumentElement);
      IF NOT DocumentElement.SelectNodes(XMLNodeList,'CardHolder') THEN
        EXIT;

      CreateCardHolderConfirmXMLRoot(XmlDocConfirm);

      FOR Cnt := 0 TO XMLNodeList.Count - 1 DO BEGIN
        CardHolder.LOCKTABLE;

        OnlineMgt.GetAttribAsText(XMLNodeList,'Id',Cnt,CardHolderID);
        CardHolder."Card No." := OnlineMgt.GetAttribAsCode(XMLNodeList,'CardNumber',Cnt);
        OnlineMgt.GetAttribAsText(XMLNodeList,'CardHolderName',Cnt,CardHolder."Card Name");
        IF NOT CardHolder.INSERT THEN
          CardHolder.MODIFY; //UPDATES ARE EXPECTED

        AddIDToCardHolderConfirmXML(XmlDocConfirm,CardHolderID);
      END;

      COMMIT;
      MarkDownloadedCardHolders(XmlDocConfirm);
    END;

    PROCEDURE CreateCardHolderConfirmXMLRoot@1160040009(VAR XmlDocConfirm@1160040000 : Codeunit 6192800);
    VAR
      XmlNode@1160040001 : Codeunit 6192801;
    BEGIN
      XmlDocConfirm.GetDocumentElement(XmlNode);
      XmlDocConfirm.CreateNode(XmlNode,'element','Items','');
      XmlDocConfirm.AppendChild(XmlNode);
    END;

    PROCEDURE AddIDToCardHolderConfirmXML@1160040018(VAR XmlDocConfirm@1160040000 : Codeunit 6192800;CardHolderID@1160040001 : Text[50]);
    VAR
      XmlLib@1160040003 : Codeunit 6085573;
      XmlNode@1160040002 : Codeunit 6192801;
      XmlNode2@1160040004 : Codeunit 6192801;
    BEGIN
      XmlDocConfirm.GetDocumentElement(XmlNode);

      XmlDocConfirm.CreateNode(XmlNode2,'element','Item','');
      XmlLib.SetXmlNodeAttr(XmlNode2,'Id',CardHolderID);
      XmlNode.AppendChild(XmlNode2);
    END;

    LOCAL PROCEDURE MarkDownloadedCardHolders@1160040007(VAR XmlDocConfirm@1160040002 : Codeunit 6192800);
    VAR
      XmlLib@1160040004 : Codeunit 6085573;
      XmlNode@1160040001 : Codeunit 6192801;
      XmlNode2@1160040000 : Codeunit 6192801;
    BEGIN
      OnlineMgt.ExecuteRequest(GetConfirmCardHolderUrl,HttpActions::PUT,FALSE,XmlDocConfirm);
      CLEAR(XmlDocConfirm);
    END;

    LOCAL PROCEDURE SetExpSetup@1160040053();
    VAR
      ContiniaUser@1160040005 : Record 6086001;
      ContiniaUserSetup@1160040007 : Record 6086002;
      EMSetup@1160040000 : Record 6086300;
      ContUserCreditCard@1160040008 : Record 6086311;
      XmlLib@1160040003 : Codeunit 6085573;
      XmlDoc@1160040002 : Codeunit 6192800;
      UserNode@1160040006 : Codeunit 6192801;
      UsersNode@1160040004 : Codeunit 6192801;
      XmlNode@1160040001 : Codeunit 6192801;
    BEGIN
      IsCompanyActive(TRUE);
      EMSetup.GET;

      XmlDoc.CreateNode(XmlNode,'element','Setup','');

      EMSetup.TESTFIELD("Default Web/App Language");
      XmlLib.SetXmlNodeAttr(XmlNode,'DefaultLCID',FORMAT(GetLanguageID(EMSetup."Default Web/App Language")));
      XmlLib.SetXmlNodeAttr(XmlNode,'MileageEnabled',OnlineMgt.GetBoolAsText(EMSetup."Enable Mileage"));
      XmlLib.SetXmlNodeAttr(XmlNode,'ExpenseEnabled',OnlineMgt.GetBoolAsText(TRUE));
      XmlLib.SetXmlNodeAttr(XmlNode,'SettlementEnabled',OnlineMgt.GetBoolAsText(EMSetup."Enable Settlement"));
      XmlLib.SetXmlNodeAttr(XmlNode,'AllowBrowse',OnlineMgt.GetBoolAsText(TRUE));
      XmlLib.SetXmlNodeAttr(XmlNode,'ShowApproved',OnlineMgt.GetBoolAsText(TRUE));
      XmlLib.SetXmlNodeAttr(XmlNode,'ShowRejected',OnlineMgt.GetBoolAsText(TRUE));

      IF EMSetup."Picture Size" < 500 THEN
        EMSetup."Picture Size" := 1000;
      XmlLib.SetXmlNodeAttr(XmlNode,'PictureSize',FORMAT(EMSetup."Picture Size"));

      IF EMSetup."Picture Quality (%)" = 0 THEN
        EMSetup."Picture Quality (%)" := 100;
      IF EMSetup."Picture Quality (%)" < 50 THEN
        EMSetup."Picture Quality (%)" := 80;
      XmlLib.SetXmlNodeAttr(XmlNode,'PictureQuality',FORMAT(EMSetup."Picture Quality (%)"));

      XmlLib.SetXmlNodeAttr(XmlNode,'DistanceUnit',OnlineMgt.GetIntAsText(EMSetup."Distance Unit"));
      XmlLib.SetXmlNodeAttr(XmlNode,'TravelTimeUnit',OnlineMgt.GetIntAsText(0)); // Always Minutes
      XmlDoc.AppendChild(XmlNode);

      //Add users
      ContiniaUserSetup.SETRANGE("Expense Management User",TRUE);
      IF ContiniaUserSetup.FINDSET THEN BEGIN
        XmlDoc.CreateNode(UsersNode,'element','Users','');
        XmlNode.AppendChild(UsersNode);
        REPEAT
          ContiniaUser.GET(ContiniaUserSetup."Continia User ID");

          XmlDoc.CreateNode(UserNode,'element','User','');
          XmlLib.SetXmlNodeAttr(UserNode,'UserId',ContiniaUser."E-Mail");
          XmlLib.SetXmlNodeAttr(UserNode,'CorporateCreditCard',
            OnlineMgt.GetBoolAsText(ContUserCreditCard.HasUserCreditCard(ContiniaUserSetup."Continia User ID")));
          UsersNode.AppendChild(UserNode);
        UNTIL ContiniaUserSetup.NEXT = 0;
      END;

      OnlineMgt.ExecuteRequest(GetSetupUrl,HttpActions::PUT,TRUE,XmlDoc);
    END;

    LOCAL PROCEDURE GetLanguageID@1160040056(Language@1160040000 : Code[10]) : Integer;
    VAR
      LanguageRec@1160040001 : Record 8;
    BEGIN
      IF LanguageRec.GET(Language) THEN
        EXIT(LanguageRec."Windows Language ID");
      EXIT(1033);
    END;

    PROCEDURE SetAgreement@1160040043();
    VAR
      Agreement@1160040003 : Record 6086315;
      XmlLib@1160040002 : Codeunit 6085573;
      XmlDoc@1160040001 : Codeunit 6192800;
      XmlNode@1160040000 : Codeunit 6192801;
      XmlNode2@1160040006 : Codeunit 6192801;
      Counter@1160040007 : Integer;
    BEGIN
      IsCompanyActive(TRUE);
      IF Agreement.FINDFIRST THEN BEGIN
        XmlDoc.CreateNode(XmlNode2,'element','CompanyAgreements','');
        XmlDoc.AppendChild(XmlNode2);
        Counter := 0;
        REPEAT
          CLEAR(XmlNode);
          XmlDoc.CreateNode(XmlNode,'element','CompanyAgreement','');
          XmlLib.SetXmlNodeAttr(XmlNode,'BankName',Agreement."Bank Code");
          XmlLib.SetXmlNodeAttr(XmlNode,'AgreementNumber',Agreement."Agreement ID");
          XmlNode2.AppendChild(XmlNode);
        UNTIL Agreement.NEXT <= 0;

        OnlineMgt.ExecuteRequest(GetAgreementUrl,HttpActions::PUT,TRUE,XmlDoc);
        Counter += 1;
        CLEAR(XmlDoc);
      END;
      MESSAGE(ActivatedMsg);
    END;

    PROCEDURE SetupCloud@1160040014();
    BEGIN
      IsCompanyActive(TRUE);
      SetExpSetup;
      IF SetupFields THEN BEGIN
        SetupValues;
        SetupValueAccess;
        SetupFieldDependencies;
      END;
    END;

    LOCAL PROCEDURE SetupFields@1160040125() : Boolean;
    VAR
      Language@1160040012 : Record 8;
      EMSetup@1160040002 : Record 6086300;
      SynchronizationLog@1160040019 : Record 6086301;
      FieldType@1160040001 : Record 6086345;
      ConfigField@1160040000 : Record 6086346;
      PrimaryFieldSetup@1160040010 : Record 6086346;
      FieldTranslation@1160040003 : Record 6086352;
      XmlLib@1160040008 : Codeunit 6085573;
      XmlDoc@1160040007 : Codeunit 6192800;
      CaptionsNode@1160040017 : Codeunit 6192801;
      DocumentNode@1160040005 : Codeunit 6192801;
      FieldSetupNode@1160040013 : Codeunit 6192801;
      RootNode@1160040006 : Codeunit 6192801;
      TranslationNode@1160040014 : Codeunit 6192801;
      EmptyDT@1160040004 : DateTime;
      LastUploadDateTime@1160040018 : DateTime;
      MandatoryFieldsNumber@1160040011 : Integer;
      PrevConfFieldType@1160040016 : Integer;
      UploadFields@1160040009 : Boolean;
    BEGIN
      IsCompanyActive(TRUE);
      EMSetup.GET;
      IF EMSetup."Force Field Update in CO" THEN BEGIN
        UploadFields := TRUE;
        EMSetup."Force Field Update in CO" := FALSE;
        EMSetup.MODIFY;
      END;

      LastUploadDateTime := SynchronizationLog.GetLastFieldSynchDT;

      IF NOT UploadFields THEN
        IF ConfigField.FINDFIRST THEN
          REPEAT
            FieldType.GET(ConfigField."Field Code");
            IF (LastUploadDateTime = EmptyDT) OR
               (FieldType."Last Update Date/Time" > LastUploadDateTime)
            THEN
              UploadFields := TRUE;

            //EVERY DAY BECAUSE TRIGGERS MIGHT BE DEACTIVATED
            IF DT2DATE(LastUploadDateTime) = TODAY - 1 THEN
              UploadFields := TRUE;
          UNTIL (ConfigField.NEXT = 0) OR UploadFields;

      IF NOT UploadFields THEN
        EXIT;

      ConfigField.SETRANGE(Type,ConfigField.Type::Expense);
      ConfigField.SETFILTER("Field Code",'%1|%2|%3|%4','DOCUMENT DATE','CURRENCY','AMOUNT','EXPENSE TYPE');
      IF ConfigField.COUNT < 4 THEN
        ERROR(MissingMandatoryFieldErr,ConfigField.GETFILTER("Field Code"),ConfigField.GETFILTER(Type));

      IF EMSetup."Enable Mileage" THEN BEGIN
        ConfigField.SETRANGE(Type,ConfigField.Type::Mileage);
        IF EMSetup."Enable 60 day rule" THEN BEGIN
          MandatoryFieldsNumber := 7;
          ConfigField.SETFILTER("Field Code",'%1|%2|%3|%4|%5|%6|%7',
            'DOCUMENT DATE','DESCRIPTION','FROM','TO','DISTANCE','FROMHOME','TOHOME');
        END ELSE BEGIN
          MandatoryFieldsNumber := 5;
          ConfigField.SETFILTER("Field Code",'%1|%2|%3|%4|%5','DOCUMENT DATE','DESCRIPTION','FROM','TO','DISTANCE');
        END;

        IF ConfigField.COUNT < MandatoryFieldsNumber THEN
          ERROR(MissingMandatoryFieldErr,ConfigField.GETFILTER("Field Code"),ConfigField.GETFILTER(Type));
      END;

      PrevConfFieldType := -1;
      ConfigField.RESET;
      IF ConfigField.FINDSET THEN BEGIN
        XmlDoc.CreateNode(RootNode,'element','FieldSetups','');
        XmlDoc.AppendChild(RootNode);

        REPEAT
          FieldType.GET(ConfigField."Field Code");

          // CREATE HEADERS
          IF PrevConfFieldType <> ConfigField.Type THEN BEGIN
            CLEAR(DocumentNode);

            CASE ConfigField.Type OF

              ConfigField.Type::Expense:
                BEGIN
                  XmlDoc.CreateNode(DocumentNode,'element','Expense','');
                  RootNode.AppendChild(DocumentNode);
                END;

              ConfigField.Type::Mileage:
                BEGIN
                  XmlDoc.CreateNode(DocumentNode,'element','Mileage','');
                  RootNode.AppendChild(DocumentNode);
                END;

              ConfigField.Type::Settlement:
                BEGIN
                  XmlDoc.CreateNode(DocumentNode,'element','Settlement','');
                  RootNode.AppendChild(DocumentNode);
                END;
            END;

            PrevConfFieldType := ConfigField.Type;
          END;

          // FIELD CHECKS
          IF (ConfigField.Type = ConfigField.Type::Mileage) AND EMSetup."Enable Mileage" THEN
            IF ConfigField."Field Code" IN ['FromHome','ToHome'] THEN
              BothFromAndToHome(ConfigField."Field Code" = 'FromHome',ConfigField."Field Code" = 'ToHome');

          // ADD THE FIELDS TO THE SETUP
          CLEAR(FieldSetupNode);
          XmlDoc.CreateNode(FieldSetupNode,'element','FieldSetup','');

          XmlLib.SetXmlNodeAttr(FieldSetupNode,'FieldName',FieldType.Code);
          XmlLib.SetXmlNodeAttr(FieldSetupNode,'FieldType',OnlineMgt.GetIntAsText(FieldType.Type));
          IF (FieldType.Type = FieldType.Type::Text) OR
             (FieldType.Type = FieldType.Type::Code)
          THEN
            FieldType.TESTFIELD(Length);
          XmlLib.SetXmlNodeAttr(FieldSetupNode,'Length',OnlineMgt.GetIntAsText(FieldType.Length));

          IF FieldType."Decimal Places" <> '' THEN
            XmlLib.SetXmlNodeAttr(FieldSetupNode,'DecimalPlaces',FieldType."Decimal Places");
          XmlLib.SetXmlNodeAttr(FieldSetupNode,'FieldCaption',FieldType.GetFieldCaptionForApp);
          XmlLib.SetXmlNodeAttr(FieldSetupNode,'Mandatory',OnlineMgt.GetBoolAsText(FieldType.Mandatory));
          XmlLib.SetXmlNodeAttr(FieldSetupNode,'Editable',OnlineMgt.GetBoolAsText(FieldType.Editable));
          IF FieldType.GetParentFieldTypeCode <> '' THEN BEGIN
            XmlLib.SetXmlNodeAttr(FieldSetupNode,'PrimaryField',FieldType.GetParentFieldTypeCode);
            PrimaryFieldSetup.SETRANGE(Type,ConfigField.Type);
            PrimaryFieldSetup.SETRANGE("Field Code",FieldType.GetParentFieldTypeCode);
            PrimaryFieldSetup.FINDFIRST;
          END;

          XmlLib.SetXmlNodeAttr(FieldSetupNode,'Order',FORMAT(ConfigField."Field Order"));
          XmlLib.SetXmlNodeAttr(FieldSetupNode,'DefaultVisibility',
            OnlineMgt.GetBoolAsText(NOT ConfigField."Hide visibility by default"));

          SynchronizationLog.UpdateFieldSynch(SyncLogEntryNo);

          XmlLib.SetXmlNodeAttr(FieldSetupNode,'CreationTime',FORMAT(LastUploadDateTime,0,9));

          FieldTranslation.SETRANGE("Field Type Code",FieldType.Code);
          IF FieldTranslation.FINDFIRST THEN BEGIN
            CLEAR(CaptionsNode);
            XmlDoc.CreateNode(CaptionsNode,'element','Captions','');
            REPEAT
              CLEAR(TranslationNode);
              IF Language.GET(FieldTranslation."Language Code") THEN BEGIN
                XmlDoc.CreateNode(TranslationNode,'element','Caption','');
                XmlLib.SetXmlNodeAttr(TranslationNode,'FieldCaption',FieldTranslation.Translation);
                FieldTranslation.TESTFIELD("Language Code");
                Language.GET(FieldTranslation."Language Code");
                XmlLib.SetXmlNodeAttr(TranslationNode,'Id',OnlineMgt.GetIntAsText(Language."Windows Language ID"));
                CaptionsNode.AppendChild(TranslationNode);
              END;
              FieldSetupNode.AppendChild(CaptionsNode);
            UNTIL FieldTranslation.NEXT = 0;
          END;

          DocumentNode.AppendChild(FieldSetupNode);

        UNTIL ConfigField.NEXT = 0;
      END;

      OnlineMgt.ExecuteRequest(GetFieldUrl,HttpActions::PUT,TRUE,XmlDoc);

      CLEAR(XmlDoc);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE SetupValues@1160040032();
    VAR
      EMSetup@1160040002 : Record 6086300;
      FieldType@1160040009 : Record 6086345;
      ConfiguredField@1160040010 : Record 6086346;
      LookupValues@1160040000 : Record 6086347;
      XmlLib@1160040007 : Codeunit 6085573;
      XmlDoc@1160040008 : Codeunit 6192800;
      XmlNode@1160040006 : Codeunit 6192801;
      XmlNode2@1160040005 : Codeunit 6192801;
      XmlNode3@1160040001 : Codeunit 6192801;
      CreationDT@1160040012 : DateTime;
      EmptyDT@1160040011 : DateTime;
    BEGIN
      IsCompanyActive(TRUE);
      EMSetup.GET;
      FieldType.CalcLookupValForAllFields;

      LookupValues.SETCURRENTKEY("Field Type Code");

      XmlDoc.CreateNode(XmlNode2,'element','Fields','');
      XmlDoc.AppendChild(XmlNode2);

      IF LookupValues.FINDFIRST THEN
        REPEAT
          // EXPORT FIELDVALUE
          FieldType.GET(LookupValues."Field Type Code");
          ConfiguredField.SETRANGE("Field Code",FieldType.Code);
          IF ConfiguredField.FINDFIRST THEN BEGIN
            CLEAR(XmlNode);
            XmlDoc.CreateNode(XmlNode,'element','Field','');
            XmlLib.SetXmlNodeAttr(XmlNode,'FieldName',LookupValues."Field Type Code");
            IF FieldType."Last Update Date/Time" = EmptyDT THEN
              CreationDT := CURRENTDATETIME
            ELSE
              CreationDT := FieldType."Last Update Date/Time";

            XmlLib.SetXmlNodeAttr(XmlNode,'CreationTime',FORMAT(CreationDT,0,9));

            XmlNode2.AppendChild(XmlNode);
            LookupValues.SETRANGE("Field Type Code",LookupValues."Field Type Code");
            IF LookupValues.FINDFIRST THEN BEGIN
              CLEAR(XmlNode3);
              REPEAT
                XmlDoc.CreateNode(XmlNode3,'element','FieldValue','');
                XmlLib.SetXmlNodeAttr(XmlNode3,'FieldName',LookupValues."Field Type Code");
                IF LookupValues."Parent Field Type Code" <> '' THEN
                  XmlLib.SetXmlNodeAttr(XmlNode3,'PrimaryCode',LookupValues."Parent Field Type Code");
                XmlLib.SetXmlNodeAttr(XmlNode3,'Code',LookupValues.Code);
                XmlLib.SetXmlNodeAttr(XmlNode3,'Description',LookupValues.Description);
                XmlNode.AppendChild(XmlNode3);
              UNTIL LookupValues.NEXT <= 0;
            END;
          END;
          LookupValues.SETRANGE("Field Type Code",LookupValues."Field Type Code");
          LookupValues.FINDLAST;
          LookupValues.SETRANGE("Field Type Code");
        UNTIL LookupValues.NEXT = 0;

      OnlineMgt.ExecuteRequest(GetLookupUrl,HttpActions::PUT,TRUE,XmlDoc);
      CLEAR(XmlDoc);
    END;

    LOCAL PROCEDURE SetupValueAccess@1160040030();
    VAR
      ContiniaUser@1160040003 : Record 6086001;
      LookupValueAccess@1160040000 : Record 6086336;
      FieldType@1160040009 : Record 6086345;
      XmlLib@1160040007 : Codeunit 6085573;
      XmlDoc@1160040008 : Codeunit 6192800;
      XmlNode2@1160040002 : Codeunit 6192801;
      XmlNode3@1160040001 : Codeunit 6192801;
    BEGIN
      LookupValueAccess.SETCURRENTKEY("Field Type Code");

      XmlDoc.CreateNode(XmlNode2,'element','AccessSetup','');
      XmlDoc.AppendChild(XmlNode2);

      IF LookupValueAccess.FINDFIRST THEN
        REPEAT
          FieldType.GET(LookupValueAccess."Field Type Code");
          CLEAR(XmlNode3);
          XmlDoc.CreateNode(XmlNode3,'element','Access','');
          XmlLib.SetXmlNodeAttr(XmlNode3,'FieldName',LookupValueAccess."Field Type Code");
          IF LookupValueAccess."Parent Field Type Code" <> '' THEN
            XmlLib.SetXmlNodeAttr(XmlNode3,'PrimaryCode',LookupValueAccess."Parent Field Type Code");
          XmlLib.SetXmlNodeAttr(XmlNode3,'ValueCode',LookupValueAccess."Value Code");
          IF LookupValueAccess.Type = LookupValueAccess.Type::User THEN
            XmlLib.SetXmlNodeAttr(XmlNode3,'Type','User')
          ELSE
            XmlLib.SetXmlNodeAttr(XmlNode3,'Type','Group');

          IF LookupValueAccess.Type = LookupValueAccess.Type::User THEN BEGIN
            ContiniaUser.GET(LookupValueAccess.Code);
            XmlLib.SetXmlNodeAttr(XmlNode3,'User',ContiniaUser."E-Mail");
          END ELSE
            XmlLib.SetXmlNodeAttr(XmlNode3,'User',LookupValueAccess.Code);
          XmlNode2.AppendChild(XmlNode3);
        UNTIL LookupValueAccess.NEXT = 0;

      OnlineMgt.ExecuteRequest(GetAccessSetupUrl,HttpActions::PUT,TRUE,XmlDoc);
      CLEAR(XmlDoc);
    END;

    LOCAL PROCEDURE SetupFieldDependencies@1160040036();
    VAR
      ExpenseType@1160040002 : Record 6086307;
      FieldType@1160040001 : Record 6086345;
      DefaultDimTemp@1160040000 : TEMPORARY Record 6086368;
      XmlLib@1160040008 : Codeunit 6085573;
      EMDimMgt@1160040015 : Codeunit 6086318;
      XmlDoc@1160040009 : Codeunit 6192800;
      XmlNode@1160040006 : Codeunit 6192801;
      XmlNode2@1160040005 : Codeunit 6192801;
      XmlNode3@1160040003 : Codeunit 6192801;
      FieldValueType@1160040004 : 'Specific Value,All Values';
    BEGIN
      IsCompanyActive(TRUE);
      EMDimMgt.GetAllDefaultDimensions(DefaultDimTemp);

      XmlDoc.CreateNode(XmlNode,'element','FieldDependencies','');
      XmlDoc.AppendChild(XmlNode);

      DefaultDimTemp.SETFILTER("Value Posting",'>%1',0);
      IF DefaultDimTemp.FINDSET THEN
        REPEAT
          IF FieldType.FieldDependencyConfigured(
             FieldType.GetFieldTypeFromDefaultDim(DefaultDimTemp."Table ID"),FieldType.GetFieldFromDim(DefaultDimTemp."Dimension Code"))
          THEN BEGIN
            CLEAR(XmlNode2);
            XmlDoc.CreateNode(XmlNode2,'element','FieldDependency','');
            XmlLib.SetXmlNodeAttr(XmlNode2,'FieldName',FieldType.GetFieldTypeFromDefaultDim(DefaultDimTemp."Table ID"));
            XmlLib.SetXmlNodeAttr(XmlNode2,'FieldNameValue',DefaultDimTemp."No.");
            XmlLib.SetXmlNodeAttr(XmlNode2,'FieldValueType',OnlineMgt.GetIntAsText(FieldValueType::"Specific Value"));
            XmlLib.SetXmlNodeAttr(XmlNode2,'ReferenceFieldName',FieldType.GetFieldFromDim(DefaultDimTemp."Dimension Code"));
            IF DefaultDimTemp."Value Posting" = DefaultDimTemp."Value Posting"::"Same Code" THEN
              XmlLib.SetXmlNodeAttr(XmlNode2,'ReferenceFieldValue',DefaultDimTemp."Dimension Value Code");
            XmlLib.SetXmlNodeAttr(XmlNode2,'ReferenceType',OnlineMgt.GetIntAsText(DefaultDimTemp."Value Posting" - 1));
            XmlNode.AppendChild(XmlNode2);
          END;
        UNTIL DefaultDimTemp.NEXT = 0;

      //OTHER FIELDS DEPENDENCIES - EXPENSE TYPE
      FieldType.RESET;
      FieldType.SETRANGE(Type,FieldType.Type::Attendees);
      IF FieldType.FINDFIRST THEN BEGIN

        ExpenseType.SETRANGE("Attendees Required",TRUE);
        IF ExpenseType.FINDSET THEN
          IF FieldType.FieldDependencyConfigured(FieldType.GetFieldTypeFromDefaultDim(DATABASE::"Expense Type"),FieldType.Code) THEN
            REPEAT
              CLEAR(XmlNode3);
              XmlDoc.CreateNode(XmlNode3,'element','FieldDependency','');
              XmlLib.SetXmlNodeAttr(XmlNode3,'FieldName',FieldType.GetFieldTypeFromDefaultDim(DATABASE::"Expense Type"));
              XmlLib.SetXmlNodeAttr(XmlNode3,'FieldNameValue',ExpenseType.Code);
              XmlLib.SetXmlNodeAttr(XmlNode3,'FieldValueType',OnlineMgt.GetIntAsText(FieldValueType::"Specific Value"));
              XmlLib.SetXmlNodeAttr(XmlNode3,'ReferenceFieldName',FieldType.Code);
              XmlLib.SetXmlNodeAttr(
                XmlNode3,'ReferenceType',OnlineMgt.GetIntAsText(DefaultDimTemp."Value Posting"::"Code Mandatory" - 1));
              XmlNode.AppendChild(XmlNode3);
            UNTIL ExpenseType.NEXT = 0;
      END;

      OnlineMgt.ExecuteRequest(GetFieldDependencyUrl,HttpActions::PUT,TRUE,XmlDoc);
      CLEAR(XmlDoc);
    END;

    LOCAL PROCEDURE ExtractIdfromEmail@1160040037(email@1160040000 : Text[1024]) transaction : Integer;
    VAR
      d@1160040001 : Integer;
    BEGIN
      d := STRPOS(email,'@');
      IF d <> 0 THEN BEGIN
        email := COPYSTR(email,1,d-1);
        d := STRPOS(email,PrefixId);
        IF d <> 0 THEN
          IF EVALUATE(transaction,COPYSTR(email,d + STRLEN(PrefixId))) THEN
            EXIT(transaction);
      END;
      EXIT(0);
    END;

    LOCAL PROCEDURE SetUploadUrl@1160040042(Bank@1160040000 : Code[20];Countrycode@1160040001 : Code[20];ReconciliationFile@1160040002 : Boolean) : Text[1024];
    VAR
      ReconParam@1160040003 : Text[100];
    BEGIN
      IF Countrycode = '' THEN
        Countrycode := 'DK';

      IF ReconciliationFile THEN
        ReconParam := '?IsBankReconciliation=true';

      EXIT(GetTransactionUrl + Bank + '/' + Countrycode + '/upload' + ReconParam);
    END;

    LOCAL PROCEDURE UploadFilesUrl@1160040071(DocumentGUID@1160040000 : GUID;TableID@1160040001 : Integer) : Text[1024];
    BEGIN
      CASE TableID OF
        DATABASE::Expense:
          EXIT(GetCompanyUrl + '/NAVApp/' + OnlineMgt.GetGUIDAsText(DocumentGUID) + '/uploadfiles');
        DATABASE::Mileage:
          EXIT(GetCompanyUrl + '/NAVApp/mileage/' + OnlineMgt.GetGUIDAsText(DocumentGUID) + '/uploadfiles');
      END;
    END;

    PROCEDURE UploadBankFile@1160040038(Bank@1160040001 : Record 6086314;VAR TempFile@1160040000 : TEMPORARY Record 6085608;ReconciliationFile@1160040002 : Boolean);
    BEGIN
      IsCompanyActive(TRUE);
      IF NOT TempFile.Data.HASVALUE THEN
        ERROR(CannotLoadFile,TempFile.GetFilePath);
      OnlineMgt.UploadFile(TempFile,SetUploadUrl(Bank.Code,Bank."Country/Region Code",ReconciliationFile),TRUE,TRUE);
    END;

    PROCEDURE GetBanks@1160040041() cnt : Integer;
    VAR
      Bank@1160040002 : Record 6086314;
      XmlDoc@1160040000 : Codeunit 6192800;
      DocumentElement@1160040003 : Codeunit 6192801;
      XMLNodeList@1160040001 : Codeunit 6192802;
    BEGIN
      OnlineMgt.ExecuteRequest(GetBanksUrl,HttpActions::GET,FALSE,XmlDoc);

      XmlDoc.GetDocumentElement(DocumentElement);
      IF DocumentElement.SelectNodes(XMLNodeList,'Bank') THEN
        FOR cnt := 0 TO XMLNodeList.Count - 1 DO BEGIN
          CLEAR(Bank);
          Bank.Code := OnlineMgt.GetAttribAsCode(XMLNodeList,'BankShort',cnt);
          OnlineMgt.GetAttribAsText(XMLNodeList,'BankName',cnt,Bank.Name);
          IF UPPERCASE(Bank.Code) <> 'TEST' THEN
            Bank."Country/Region Code" := OnlineMgt.GetAttribAsCode(XMLNodeList,'CountryCode',cnt);
          IF NOT Bank.INSERT THEN
            Bank.MODIFY;
        END;

      EXIT(cnt);
    END;

    LOCAL PROCEDURE NoOfExpInboxWithError@1160040055() : Integer;
    VAR
      ExpenseInbox@1160040000 : Record 6086323;
    BEGIN
      ExpenseInbox.SETCURRENTKEY(Status);
      ExpenseInbox.SETRANGE(Status,ExpenseInbox.Status::Error);
      EXIT(ExpenseInbox.COUNT);
    END;

    LOCAL PROCEDURE NoOfBankTransInboxWithError@1160040057() : Integer;
    VAR
      BankTransInbox@1160040000 : Record 6086331;
    BEGIN
      BankTransInbox.SETCURRENTKEY(Status);
      BankTransInbox.SETRANGE(Status,BankTransInbox.Status::Error);
      EXIT(BankTransInbox.COUNT);
    END;

    LOCAL PROCEDURE NoOfMilInboxWithError@1160040008() : Integer;
    VAR
      MileageInbox@1160040000 : Record 6086353;
    BEGIN
      MileageInbox.SETCURRENTKEY(Status);
      MileageInbox.SETRANGE(Status,MileageInbox.Status::Error);
      EXIT(MileageInbox.COUNT);
    END;

    LOCAL PROCEDURE NoOfExpHeaderInboxWithError@1160040122() : Integer;
    VAR
      ExpHeaderInbox@1160040000 : Record 6086341;
    BEGIN
      ExpHeaderInbox.SETCURRENTKEY(Status);
      ExpHeaderInbox.SETRANGE(Status,ExpHeaderInbox.Status::Error);
      EXIT(ExpHeaderInbox.COUNT);
    END;

    LOCAL PROCEDURE MatchAndCommit@1160040054();
    VAR
      Matching@1160040000 : Codeunit 6086311;
    BEGIN
      Matching.TryMatch;
      COMMIT;
    END;

    LOCAL PROCEDURE MarkDownloadedTransaction@1160040012(TransactionId@1160040003 : Integer);
    VAR
      XmlLib@1160040004 : Codeunit 6085573;
      XmlDoc@1160040005 : Codeunit 6192800;
      XmlNode@1160040001 : Codeunit 6192801;
      XmlNode2@1160040000 : Codeunit 6192801;
    BEGIN
      IsCompanyActive(TRUE);
      XmlDoc.CreateNode(XmlNode2,'element','transactions','');
      XmlDoc.AppendChild(XmlNode2);

      XmlDoc.CreateNode(XmlNode,'element','Transaction','');
      XmlLib.SetXmlNodeAttr(XmlNode,'Downloaded',OnlineMgt.GetBoolAsText(TRUE));
      XmlNode2.AppendChild(XmlNode);

      OnlineMgt.ExecuteRequest(GetConfirmTransactionUrl(TransactionId),HttpActions::PUT,FALSE,XmlDoc);

      CLEAR(XmlDoc);
    END;

    LOCAL PROCEDURE GetAttribAsCodeLength@1160040073(XMLNodeList@1160040001 : Codeunit 6192802;AttribName@1160040003 : Text[30];Pos@1160040004 : Integer;MaxLenght@1160040000 : Integer) Result : Code[1024];
    VAR
      AttribText@1160040005 : Text[1024];
    BEGIN
      IF OnlineMgt.GetAttribAsText(XMLNodeList,AttribName,Pos,AttribText) THEN
        EVALUATE(Result,AttribText);
      Result := COPYSTR(Result,1,MaxLenght);
    END;

    LOCAL PROCEDURE GetCurrencyCodeFromXML@1160040074(CurrencyCode@1160040000 : Code[10]) : Code[10];
    VAR
      GeneralLedgerSetup@1160040001 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;

      IF CurrencyCode = GeneralLedgerSetup."LCY Code" THEN
        EXIT('');

      EXIT(CurrencyCode);
    END;

    LOCAL PROCEDURE GetCurrencyCode@1160040077(CurrencyCode@1160040000 : Code[10]) : Code[10];
    VAR
      GeneralLedgerSetup@1160040001 : Record 98;
    BEGIN
      IF CurrencyCode = '' THEN BEGIN
        GeneralLedgerSetup.GET;
        EXIT(GeneralLedgerSetup."LCY Code");
      END;

      EXIT(CurrencyCode);
    END;

    LOCAL PROCEDURE FindEmployeeFromEmail@1160040023(Email@1160040000 : Text[250]) : Code[50];
    VAR
      ContiniaUser@1160040001 : Record 6086001;
      EMSetup@1160040003 : Record 6086300;
      CaptureMgt@1160040002 : Codeunit 6085576;
    BEGIN
      EMSetup.GET;

      IF Email = '' THEN
        EXIT;

      ContiniaUser.SETFILTER("E-Mail",
        COPYSTR('@' + CaptureMgt.ReplaceIllegalFilterCharacters(Email,TRUE,0),1,MAXSTRLEN(ContiniaUser."E-Mail")));
      IF ContiniaUser.FINDFIRST THEN
        EXIT(ContiniaUser."User ID");

      EXIT(COPYSTR(Email,1,50));
    END;

    PROCEDURE ConfigFieldActive@1160040001(ConfigType@1160040002 : Integer;Code@1160040001 : Code[20]) : Boolean;
    VAR
      FieldType@1160040004 : Record 6086345;
      ConfigField@1160040000 : Record 6086346;
      Emdim@1160040003 : Record 6086360;
    BEGIN
      ConfigField.SETRANGE(Type,ConfigType);
      ConfigField.SETRANGE("Field Code",Code);
      IF NOT ConfigField.ISEMPTY THEN
        EXIT(TRUE);
      FieldType.Code := Emdim.GetFieldFromDim(Code);
      IF FieldType.Code = '' THEN
        EXIT(FALSE);
      ConfigField.SETRANGE("Field Code",FieldType.Code);
      EXIT(NOT ConfigField.ISEMPTY);
    END;

    PROCEDURE IsSyncRequired@1160040003(Expense@1160040000 : Record 6086320) : Boolean;
    VAR
      SynchronizationLog@1160040005 : Record 6086301;
      FieldType@1160040002 : Record 6086345;
      ParentFieldType@1160040003 : Record 6086345;
      ConfiguredField@1160040004 : Record 6086346;
      LookupValue@1160040001 : Record 6086347;
    BEGIN
      IF ConfiguredField.FINDFIRST THEN
        REPEAT
          FieldType.GET(ConfiguredField."Field Code");
          IF FieldType."Last Update Date/Time" > SynchronizationLog.GetLastFieldSynchDT THEN BEGIN
            FieldType.CALCFIELDS("No. of Lookup Values");
            IF FieldType."No. of Lookup Values" > 0 THEN
              IF FieldType.GetParentFieldTypeCode = '' THEN BEGIN
                IF NOT LookupValue.GET(FieldType.Code,'',ValueOfField(Expense,FieldType)) THEN
                  EXIT(TRUE);
              END ELSE BEGIN
                ParentFieldType.GET(FieldType.GetParentFieldTypeCode);
                IF NOT LookupValue.GET(FieldType.Code,ValueOfField(Expense,ParentFieldType),ValueOfField(Expense,FieldType)) THEN
                  EXIT(TRUE);
              END;
          END;
        UNTIL ConfiguredField.NEXT = 0;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE ValueOfField@1160040015(Expense@1160040001 : Record 6086320;FieldType@1160040000 : Record 6086345) : Text[250];
    VAR
      EMDim@1160040002 : Record 6086360;
      DimCode@1160040003 : Code[20];
    BEGIN
      CASE FieldType.Code OF
        'COUNTRY/REGION':
          EXIT(Expense."Country/Region Code");
        'CURRENCY':
          EXIT(Expense."Currency Code");
        'EXPENSE TYPE':
          EXIT(Expense."Expense Type");
        'EMPLOYEE NO.':
          EXIT(Expense."Continia User ID");
        'JOBNO':
          EXIT(Expense."Job No.");
        'TASK':
          EXIT(Expense."Job Task No.");
      END;

      EMDim.SETCURRENTKEY("Table ID","Document Type","Document No.","Doc. Ref. No.");
      EMDim.SETRANGE("Table ID",DATABASE::Expense);
      EMDim.SETRANGE("Document Type",0);
      EMDim.SETRANGE("Document No.",'');
      EMDim.SETRANGE("Doc. Ref. No.",Expense."Entry No.");
      DimCode := FieldType.GetDimCode;
      IF DimCode <> '' THEN BEGIN
        EMDim.SETRANGE("Dimension Code",DimCode);
        IF EMDim.FINDFIRST THEN
          EXIT(EMDim."Dimension Value Code");
      END ELSE BEGIN
        EMDim.SETRANGE("Field Code",FieldType.Code);
        IF EMDim.FINDFIRST THEN
          EXIT(EMDim."Field Value");
      END;

      EXIT('');
    END;

    LOCAL PROCEDURE MapToOnlineValue@1160040019(FieldCode@1160040000 : Code[20];Value@1160040001 : Text[250]) : Text[250];
    VAR
      FieldType@1160040002 : Record 6086345;
      DateParserMgt@1160040007 : Codeunit 6085586;
      DecVar@1160040005 : Decimal;
      BoolVar@1160040003 : Boolean;
    BEGIN
      IF NOT FieldType.GET(FieldCode) THEN
        EXIT(Value);
      IF FieldType.Type = FieldType.Type::Boolean THEN BEGIN
        IF EVALUATE(BoolVar,Value,9) THEN;
        EXIT(OnlineMgt.GetBoolAsText(BoolVar));
      END;
      IF FieldType.Type = FieldType.Type::Date THEN BEGIN
        DateParserMgt.ParseUTC(Value);
        EXIT(FORMAT(DateParserMgt.GetDate,0,9));
      END;
      IF FieldType.Type = FieldType.Type::Decimal THEN BEGIN
        IF EVALUATE(DecVar,Value,9) THEN;
        EXIT(FORMAT(DecVar,0,9));
      END;
      EXIT(Value);
    END;

    PROCEDURE CreateNewMileage@1160040025() : GUID;
    VAR
      XmlDoc@1160040000 : Codeunit 6192800;
    BEGIN
      IsCompanyActive(TRUE);
      OnlineMgt.ExecuteRequest(GetCreateNewMileageUrl,HttpActions::GET,TRUE,XmlDoc);
      EXIT(GetGuid(XmlDoc,'MileageList/Mileage'));
    END;

    PROCEDURE UpdateMileage@1160040021(Mileage@1160040000 : Record 6086338) NewVersionNo : Text[100];
    VAR
      EmSetup@1160040010 : Record 6086300;
      XmlLib@1160040004 : Codeunit 6085573;
      XmlDoc@1160040003 : Codeunit 6192800;
      XmlNode@1160040002 : Codeunit 6192801;
      EmptyGUID@1160040009 : GUID;
    BEGIN
      IsCompanyActive(TRUE);
      EmSetup.GET;

      XmlDoc.CreateNode(XmlNode,'element','Mileage','');
      XmlLib.SetXmlNodeAttr(XmlNode,'EmployeeNo',Mileage."Continia User ID");
      XmlLib.SetXmlNodeAttr(XmlNode,'Description',Mileage.Description);
      XmlLib.SetXmlNodeAttr(XmlNode,'DocumentDate',FORMAT(Mileage."Registration Date",0,9));
      XmlLib.SetXmlNodeAttr(XmlNode,'From',Mileage."From Address");
      XmlLib.SetXmlNodeAttr(XmlNode,'To',Mileage."To Address");
      IF Mileage."From Home" THEN
        XmlLib.SetXmlNodeAttr(XmlNode,'FromHome',FORMAT(1,0,9));
      IF Mileage."To Home" THEN
        XmlLib.SetXmlNodeAttr(XmlNode,'ToHome',FORMAT(1,0,9));
      XmlLib.SetXmlNodeAttr(XmlNode,'TravelTime',FORMAT(Mileage."Travel Time",0,9));
      XmlLib.SetXmlNodeAttr(XmlNode,'DistanceUnit',OnlineMgt.GetIntAsText(EmSetup."Distance Unit"));
      XmlLib.SetXmlNodeAttr(XmlNode,'Distance',FORMAT(Mileage."Total Distance",0,9));
      XmlLib.SetXmlNodeAttr(XmlNode,'CalculatedDistance',FORMAT(Mileage."Calculated Distance",0,9));
      XmlLib.SetXmlNodeAttr(XmlNode,'UserId',Mileage.GetEmployeeEmail);
      XmlLib.SetXmlNodeAttr(XmlNode,'DocumentVersionNo',Mileage."Continia Online Version No.");
      IF Mileage."Expense Header GUID" <> EmptyGUID THEN
        XmlLib.SetXmlNodeAttr(XmlNode,'SettlementId',OnlineMgt.GetGUIDAsText(Mileage."Expense Header GUID"));
      XmlDoc.AppendChild(XmlNode);

      AddMileageDimensionsToXmlNode(Mileage,XmlNode);
      AddAttendeesToXmlNode(XmlNode,DATABASE::Mileage,Mileage."Entry No.");

      IF NOT OnlineMgt.ExecuteRequest(UpdateExistingUrlMileage(Mileage."Mileage GUID"),HttpActions::PUT,FALSE,XmlDoc) THEN
        ShowErrorMsg(OnlineMgt.GetLastErrorText);

      NewVersionNo := GetMileageNewVersionNo(XmlDoc);

      IF Mileage."Transfer Attachments to CO" THEN
        SendAttachments(DATABASE::Mileage,Mileage."Entry No.",Mileage."Mileage GUID");

      SetUploadCompleteMileage(Mileage);
      COMMIT;
    END;

    LOCAL PROCEDURE ProcessMileageInbox@1160040028() Count : Integer;
    VAR
      MileageInbox@1160040000 : Record 6086353;
      Process@1160040001 : Codeunit 6086341;
    BEGIN
      MileageInbox.SETFILTER(Status,'%1',MileageInbox.Status::Pending);
      IF MileageInbox.ISEMPTY THEN
        MileageInbox.SETFILTER(Status,'<>%1',MileageInbox.Status::Accepted);

      IF MileageInbox.FINDFIRST THEN
        REPEAT
          Count += 1;
          Process.RUN(MileageInbox);
          COMMIT;
        UNTIL MileageInbox.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateExistingUrlMileage@1160040062(ExpenseGUID@1160040000 : GUID) : Text[1024];
    BEGIN
      EXIT(GetCompanyUrl + '/mileage/' + OnlineMgt.GetGUIDAsText(ExpenseGUID) + '/updateexisting');
    END;

    LOCAL PROCEDURE GetMileageFiles@1160040045(XmlDoc@1160040005 : Codeunit 6192800) Cnt : Integer;
    VAR
      TempFile@1000 : TEMPORARY Record 6085608;
      ExpSetup@1160040013 : Record 6086300;
      Mileage@1160040031 : Record 6086338;
      MileageInbox@1160040000 : Record 6086353;
      EMAttachmentInbox@1160040021 : Record 6086363;
      AttachmentNode@1160040019 : Codeunit 6192801;
      DocumentElement@1160040003 : Codeunit 6192801;
      MileageNode@1160040012 : Codeunit 6192801;
      AttachmentNodeList@1160040018 : Codeunit 6192802;
      XMLNodeList@1160040002 : Codeunit 6192802;
      EMDocFileSys@1160040006 : Codeunit 6086397;
      Dummytext@1160040029 : Text[1024];
      FileLink@1160040004 : Text[1024];
      Filename@1160040033 : Text[1024];
      MileageGUID@1160040001 : GUID;
      Count2@1160040016 : Integer;
      DistanceUnit@1160040020 : Integer;
      ImportCounter@1160040010 : Integer;
      LastEntryNo@1160040007 : Integer;
      TimeUnit@1160040023 : Integer;
    BEGIN
      IF NOT XmlDoc.HasChildnodes THEN
        EXIT;

      XmlDoc.GetDocumentElement(DocumentElement);
      IF NOT DocumentElement.SelectNodes(XMLNodeList,'MileageList/Mileage') THEN
        EXIT;

      FOR Cnt := 0 TO XMLNodeList.Count - 1 DO BEGIN
        IF LastEntryNo = 0 THEN BEGIN
          ExpSetup.GET;
          MileageInbox.LOCKTABLE;
          IF MileageInbox.FINDLAST THEN
            LastEntryNo := MileageInbox."Entry No.";
        END;
        LastEntryNo += 1;
        ImportCounter += 1;
        MileageGUID := OnlineMgt.GetAttribAsGuid(XMLNodeList,'Id',Cnt);

        CLEAR(MileageNode);
        XMLNodeList.GetItem(MileageNode,Cnt);

        Mileage.SETCURRENTKEY("Mileage GUID");
        Mileage.SETRANGE("Mileage GUID",MileageGUID);
        IF NOT Mileage.FINDFIRST THEN
          CLEAR(Mileage);

        MileageInbox.INIT;
        MileageInbox."Entry No." := LastEntryNo;
        MileageInbox."Mileage Entry No." := Mileage."Entry No.";
        MileageInbox."Mileage GUID" := MileageGUID;

        MileageInbox.Status := MileageInbox.Status::Pending;
        MileageInbox."Continia User ID" := FindEmployeeFromEmail(OnlineMgt.GetAttribAsCode(XMLNodeList,'EmployeeNo',Cnt));

        OnlineMgt.GetAttribAsText(XMLNodeList,'Description',Cnt,Dummytext);
        MileageInbox.Description := COPYSTR(Dummytext,1,MAXSTRLEN(MileageInbox.Description));
        OnlineMgt.GetAttribAsText(XMLNodeList,'From',Cnt,MileageInbox."From Address");
        OnlineMgt.GetAttribAsText(XMLNodeList,'To',Cnt,MileageInbox."To Address");

        MileageInbox."Registration Date" := OnlineMgt.GetAttribAsDateUTC(XMLNodeList,'DocumentDate',Cnt);
        MileageInbox."Total Distance" := OnlineMgt.GetAttribAsDecimal(XMLNodeList,'Distance',Cnt);
        MileageInbox."Calculated Distance" := OnlineMgt.GetAttribAsDecimal(XMLNodeList,'CalculatedDistance',Cnt);
        MileageInbox.VALIDATE("From Home",OnlineMgt.GetAttribAsInt(XMLNodeList,'FromHome',Cnt) = 1);
        MileageInbox.VALIDATE("To Home",OnlineMgt.GetAttribAsInt(XMLNodeList,'ToHome',Cnt) = 1);

        MileageInbox."Mileage Completed" := OnlineMgt.GetAttribAsBool(XMLNodeList,'DocumentCompleted',Cnt);
        OnlineMgt.GetAttribAsText(XMLNodeList,'DocumentVersionNo',Cnt,MileageInbox."Continia Online Version No.");
        MileageInbox."Expense Header GUID" := OnlineMgt.GetAttribAsGuid(XMLNodeList,'SettlementId',Cnt);

        MileageInbox."Travel Time" := OnlineMgt.GetAttribAsDecimal(XMLNodeList,'TravelTime',Cnt);
        TimeUnit := OnlineMgt.GetAttribAsDecimal(XMLNodeList,'TravelTimeUnit',Cnt);
        DistanceUnit := OnlineMgt.GetAttribAsDecimal(XMLNodeList,'DistanceUnit',Cnt);
        IF TimeUnit = 1 THEN
          MileageInbox."Travel Time" := MileageInbox."Travel Time" * 60; // convert from hours to minutes
        IF DistanceUnit <> ExpSetup."Distance Unit" THEN BEGIN
          MileageInbox.ConvertDistance(DistanceUnit,MileageInbox."Total Distance");
          MileageInbox.ConvertDistance(DistanceUnit,MileageInbox."Calculated Distance");
        END;

        MileageInbox."Imported Date/Time" := CURRENTDATETIME;
        MileageInbox."Imported by User ID" := USERID;
        IF MileageInbox."Date Created" = 0D THEN
          MileageInbox."Date Created" := TODAY;
        IF NOT MileageInbox.INSERT THEN
          MileageInbox.MODIFY;

        ReadMilDimensions(MileageNode,MileageInbox);

        CLEAR(AttachmentNodeList);
        IF MileageNode.SelectSingleNode(AttachmentNode,'Attachments') THEN
          IF AttachmentNode.SelectNodes(AttachmentNodeList,'Attachment') THEN
            FOR Count2 := 0 TO AttachmentNodeList.Count - 1 DO BEGIN
              OnlineMgt.GetAttribAsText(AttachmentNodeList,'AttachmentLink',Count2,FileLink);
              OnlineMgt.GetAttribAsText(AttachmentNodeList,'OriginalFilename',Count2,Filename);
              Filename := EMDocFileSys.CorrectAndShortenFilename(Filename);

              IF FileLink <> '' THEN BEGIN
                EMAttachmentInbox.INIT;
                EMAttachmentInbox."Table ID" := DATABASE::"Mileage Inbox";
                EMAttachmentInbox."Document Type" := 0;
                EMAttachmentInbox."Document No." := '';
                EMAttachmentInbox."Doc. Ref. No." := MileageInbox."Entry No.";
                EMAttachmentInbox."File Name" := Filename;
                EMAttachmentInbox.INSERT(TRUE);

                OnlineMgt.DownloadFile(FileLink,'',TempFile,FALSE);
                EMAttachmentInbox.SetAttachment(TempFile);
              END;
            END;

        ReadExpAttendees(MileageNode,DATABASE::"Mileage Inbox",MileageInbox."Entry No.");

        MileageInbox.MODIFY;
        COMMIT;

        MarkDownloadedDocument(DATABASE::Mileage,MileageGUID,TRUE);
      END;
      Cnt := ImportCounter;
    END;

    LOCAL PROCEDURE SetUploadCompleteMileage@1160040063(Mileage@1160040000 : Record 6086338);
    VAR
      XmlDoc@1160040001 : Codeunit 6192800;
    BEGIN
      IsCompanyActive(TRUE);
      CLEAR(XmlDoc);
      OnlineMgt.ExecuteRequest(GetAppUploadCompleteUrl(Mileage."Mileage GUID"),HttpActions::PUT,FALSE,XmlDoc);
    END;

    PROCEDURE DeprecateMileage@1160040017(MileageGuid@1160040000 : GUID;COVersionNo@1160040003 : Text[100];ShowError@1160040002 : Boolean) Success : Boolean;
    VAR
      XmlDoc@1160040001 : Codeunit 6192800;
    BEGIN
      IsCompanyActive(TRUE);
      CLEAR(XmlDoc);

      //IF VERSION IS SPECIFIED, CO WILL CHECK IT
      IF COVersionNo <> '' THEN
        BuildVersionNoElement(DATABASE::Mileage,COVersionNo,XmlDoc);

      Success := OnlineMgt.ExecuteRequest(GetMileageDeprecateUrl(MileageGuid),HttpActions::PUT,FALSE,XmlDoc);

      IF ShowError THEN
        IF NOT Success THEN
          ShowErrorMsg(OnlineMgt.GetLastErrorText);
    END;

    LOCAL PROCEDURE BothFromAndToHome@1160040086(FromHome@1160040000 : Boolean;ToHome@1160040001 : Boolean);
    VAR
      ConfiguredFields@1160040002 : Record 6086346;
    BEGIN
      ConfiguredFields.SETRANGE(Type,ConfiguredFields.Type::Mileage);
      IF FromHome THEN
        ConfiguredFields.SETRANGE("Field Code",'ToHome');
      IF ToHome THEN
        ConfiguredFields.SETRANGE("Field Code",'FromHome');
      IF NOT ConfiguredFields.FINDFIRST THEN
        ERROR(ErrBothFromAndToHome);
    END;

    LOCAL PROCEDURE ReGet@1160040092() : Boolean;
    VAR
      ExpensMgt@1160040000 : Record 6086300;
    BEGIN
      ExpensMgt.GET;
      EXIT(ExpensMgt."Re-Get Transactions");
    END;

    PROCEDURE DeprecateSettlement@1160040065(SettlementGuid@1160040000 : GUID;COVersionNo@1160040003 : Text[100];ShowError@1160040002 : Boolean) Success : Boolean;
    VAR
      XmlDoc@1160040001 : Codeunit 6192800;
    BEGIN
      IsCompanyActive(TRUE);
      CLEAR(XmlDoc);

      //IF VERSION IS SPECIFIED, CO WILL CHECK IT
      IF COVersionNo <> '' THEN
        BuildVersionNoElement(DATABASE::"Expense Header",COVersionNo,XmlDoc);

      Success := OnlineMgt.ExecuteRequest(GetSettlementDeprecateUrl(SettlementGuid),HttpActions::PUT,FALSE,XmlDoc);

      IF ShowError THEN
        IF NOT Success THEN
          ShowErrorMsg(OnlineMgt.GetLastErrorText);
    END;

    PROCEDURE PhysicalDeleteDocFromCO@1160040124(TableID@1160040003 : Integer;DocumentGuid@1160040000 : GUID;ShowError@1160040002 : Boolean);
    VAR
      XmlDoc@1160040001 : Codeunit 6192800;
    BEGIN
      // PHYSICAL DELETION FROM ONLINE (FORCED);
      IsCompanyActive(TRUE);

      CLEAR(XmlDoc);
      OnlineMgt.ExecuteRequest(GetDocumentDeleteUrl(TableID,DocumentGuid),HttpActions::PUT,ShowError,XmlDoc);
    END;

    PROCEDURE "-- Url handling Start --"@1160040076();
    BEGIN
    END;

    LOCAL PROCEDURE GetBaseUrl@1160040024() : Text[1024];
    BEGIN
      EXIT(GetBaseServerUrl + 'api/v2/');
    END;

    LOCAL PROCEDURE GetTransactionBaseUrl@1160040093() : Text[1024];
    BEGIN
      EXIT(GetBaseServerUrl + 'api/v1/');
    END;

    PROCEDURE GetBaseServerUrl@1160040081() : Text[1024];
    BEGIN
      IF OnlineMgt.IsDemo THEN
        EXIT('https://democem.continiaonline.com/')
      ELSE
        IF OnlineMgt.IsDev THEN
          EXIT('https://devcem.continiaonline.com/')
        ELSE
          EXIT('https://cem.continiaonline.com/');
    END;

    PROCEDURE GetCompanyUrl@1160040029() : Text[1024];
    BEGIN
      EXIT(GetBaseUrl + 'company/' + OnlineMgt.GetCompanyGUID);
    END;

    LOCAL PROCEDURE GetTransactionCompanyUrl@1160040067() : Text[1024];
    BEGIN
      EXIT(GetTransactionBaseUrl + 'company/' + OnlineMgt.GetCompanyGUID);
    END;

    LOCAL PROCEDURE GetSettlementUrl@1160040102() : Text[1024];
    BEGIN
      EXIT(GetCompanyUrl + '/Settlement/');
    END;

    LOCAL PROCEDURE GetCreateNewSettlementUrl@1160040098() : Text[1024];
    BEGIN
      EXIT(GetSettlementUrl + 'createnew');
    END;

    LOCAL PROCEDURE GetSettlementUpdateExistingUrl@1160040099(SettlemnentGUID@1160040000 : GUID) : Text[1024];
    BEGIN
      EXIT(GetCompanyUrl + '/settlement/' + OnlineMgt.GetGUIDAsText(SettlemnentGUID) + '/updateexisting');
    END;

    PROCEDURE GetSettlementReminderUrl@1160040031(ExpHeader@1160040000 : Record 6086339) : Text[1024];
    BEGIN
      EXIT(GetBaseServerUrl + 'settlement/' + OnlineMgt.GetCompanyGUID + '/' + OnlineMgt.GetGUIDAsText(ExpHeader."Exp. Header GUID"));
    END;

    LOCAL PROCEDURE GetExpenseUrl@1160040022() : Text[1024];
    BEGIN
      EXIT(GetCompanyUrl + '/receipt/');
    END;

    LOCAL PROCEDURE GetCreateNewExpenseUrl@1160040051() : Text[1024];
    BEGIN
      EXIT(GetExpenseUrl + 'createnew');
    END;

    PROCEDURE GetExpenseReminderUrl@1160040082(Expense@1160040000 : Record 6086320) : Text[1024];
    BEGIN
      EXIT(GetBaseServerUrl + 'receipt/' + OnlineMgt.GetCompanyGUID + '/' + OnlineMgt.GetGUIDAsText(Expense."Expense GUID"));
    END;

    LOCAL PROCEDURE GetExpenseUpdateExistingUrl@1160040060(ExpenseGUID@1160040000 : GUID) : Text[1024];
    BEGIN
      EXIT(GetCompanyUrl + '/receipt/' + OnlineMgt.GetGUIDAsText(ExpenseGUID) + '/updateexisting');
    END;

    LOCAL PROCEDURE GetExpenseDeprecateUrl@1160040079(ExpenseGUID@1160040000 : GUID) : Text[1024];
    BEGIN
      EXIT(GetCompanyUrl + '/receipt/' + OnlineMgt.GetGUIDAsText(ExpenseGUID) + '/deprecate');
    END;

    LOCAL PROCEDURE GetAppUploadCompleteUrl@1160040072(DocumentGUID@1160040000 : GUID) : Text[1024];
    BEGIN
      EXIT(GetAppUrl + '/' + OnlineMgt.GetGUIDAsText(DocumentGUID) + '/SetUploadComplete');
    END;

    LOCAL PROCEDURE GetBanksUrl@1160040039() : Text[1024];
    BEGIN
      EXIT(GetTransactionUrl + '/GetBanks/');
    END;

    LOCAL PROCEDURE GetAgreementUrl@1160040040() : Text[1024];
    BEGIN
      EXIT(GetTransactionUrl + '/CompanyBankAgreementData');
    END;

    LOCAL PROCEDURE GetAppUrl@1160040050() : Text[1024];
    BEGIN
      EXIT(GetCompanyUrl + '/NAVApp/');
    END;

    LOCAL PROCEDURE GetFieldUrl@1160040048() : Text[1024];
    BEGIN
      EXIT(GetAppUrl + 'FieldSetup');
    END;

    LOCAL PROCEDURE GetFieldDependencyUrl@1160040096() : Text[1024];
    BEGIN
      EXIT(GetAppUrl + 'fielddependencies');
    END;

    LOCAL PROCEDURE GetLookupUrl@1160040049() : Text[1024];
    BEGIN
      EXIT(GetAppUrl + 'FieldsAndLookups');
    END;

    LOCAL PROCEDURE GetSetupUrl@1160040052() : Text[1024];
    BEGIN
      EXIT(GetAppUrl + 'Setup');
    END;

    LOCAL PROCEDURE GetAccessSetupUrl@1160040069() : Text[1024];
    BEGIN
      EXIT(GetAppUrl + 'AccessSetup');
    END;

    LOCAL PROCEDURE GetMileageUrl@1160040061() : Text[1024];
    BEGIN
      EXIT(GetCompanyUrl + '/mileage/');
    END;

    PROCEDURE GetMileageReminderUrl@1160040085(Mileage@1160040000 : Record 6086338) : Text[1024];
    BEGIN
      EXIT(GetBaseServerUrl + 'mileage/' + OnlineMgt.GetCompanyGUID + '/' + OnlineMgt.GetGUIDAsText(Mileage."Mileage GUID"));
    END;

    LOCAL PROCEDURE GetCreateNewMileageUrl@1160040034() : Text[1024];
    BEGIN
      EXIT(GetMileageUrl + 'createnew');
    END;

    LOCAL PROCEDURE GetTransactionUrl@1160040013() : Text[1024];
    BEGIN
      EXIT(GetTransactionCompanyUrl + '/transaction/');
    END;

    LOCAL PROCEDURE GetConfirmTransactionUrl@1160040088(Id@1160040000 : Integer) : Text[1024];
    BEGIN
      EXIT(GetTransactionCompanyUrl + '/transaction/' + DELCHR(FORMAT(Id)));
    END;

    LOCAL PROCEDURE GetNewTransactionUrl@1160040011() : Text[1024];
    BEGIN
      EXIT(GetTransactionUrl + 'new');
    END;

    LOCAL PROCEDURE GetMileageDeprecateUrl@1160040006(ExpenseGUID@1160040000 : GUID) : Text[1024];
    BEGIN
      EXIT(GetCompanyUrl + '/mileage/' + OnlineMgt.GetGUIDAsText(ExpenseGUID) + '/deprecate');
    END;

    LOCAL PROCEDURE GetDeleteFilesUrl@1160040005(DocumentGUID@1160040000 : GUID;TableID@1160040001 : Integer) : Text[1024];
    BEGIN
      CASE TableID OF
        DATABASE::Expense:
          EXIT(GetAppUrl + OnlineMgt.GetGUIDAsText(DocumentGUID) + '/deletefilesfromreceipt');
        DATABASE::Mileage:
          EXIT(GetAppUrl + '/Mileage/' + OnlineMgt.GetGUIDAsText(DocumentGUID) + '/DeleteFilesFromMileage');
      END;
    END;

    LOCAL PROCEDURE GetNotConfirmedTransactionUrl@1160040089() : Text[1024];
    BEGIN
      EXIT(GetTransactionUrl + 'sentnotconfirmed');
    END;

    LOCAL PROCEDURE GetSettlementDeprecateUrl@1160040068(DocGUID@1160040000 : GUID) : Text[1024];
    BEGIN
      EXIT(GetCompanyUrl + '/settlement/' + OnlineMgt.GetGUIDAsText(DocGUID) + '/deprecate');
    END;

    LOCAL PROCEDURE GetNewDocumentsUrl@1160040111() : Text[1024];
    BEGIN
      EXIT(GetCompanyUrl + '/documents/documents');
    END;

    PROCEDURE GetDocumentDeleteUrl@1160040113(TableID@1160040002 : Integer;DocumentGUID@1160040001 : GUID) : Text[1024];
    BEGIN
      EXIT(GetDocumentSpecificUrl(TableID,DocumentGUID) + '/delete');
    END;

    LOCAL PROCEDURE GetDocumentSpecificUrl@1160040116(TableID@1160040001 : Integer;DocumentGUID@1160040000 : GUID) Url : Text[1024];
    BEGIN
      Url := GetCompanyUrl;

      CASE TableID OF
        DATABASE::Expense:
          Url := Url + '/Receipt/';
        DATABASE::Mileage:
          Url := Url + '/Mileage/';
        DATABASE::"Expense Header":
          Url := Url + '/Settlement/';
      END;

      Url := Url + OnlineMgt.GetGUIDAsText(DocumentGUID);
    END;

    LOCAL PROCEDURE GetDocumentConfirmUploadUrl@1160040118(TableID@1160040002 : Integer;DocumentGUID@1160040001 : GUID) : Text[1024];
    BEGIN
      EXIT(GetDocumentSpecificUrl(TableID,DocumentGUID) + '/confirm');
    END;

    PROCEDURE GetCardHoldersUrl@1160040075() : Text[1024];
    BEGIN
      EXIT(GetTransactionUrl + 'CardHolders/new');
    END;

    PROCEDURE GetConfirmCardHolderUrl@1160040044() : Text[1024];
    BEGIN
      EXIT(GetTransactionUrl + 'CardHolders/Confirm');
    END;

    PROCEDURE "-- Url handling Stop --"@1160040004();
    BEGIN
    END;

    PROCEDURE ForceFieldUpdateInCO@1160040090();
    VAR
      EMSetup@1160040000 : Record 6086300;
    BEGIN
      EMSetup.GET;
      EMSetup."Force Field Update in CO" := TRUE;
      EMSetup.MODIFY;
    END;

    LOCAL PROCEDURE AttendeesEnabledFor@1160040035(TableID@1160040001 : Integer) : Boolean;
    VAR
      ConfiguredField@1160040000 : Record 6086346;
    BEGIN
      EXIT(ConfiguredField.AttendeesEnabledFor(TableID));
    END;

    LOCAL PROCEDURE RemoveDeprecatedDocuments@1160040107(XmlDoc@1160040004 : Codeunit 6192800);
    VAR
      RemoveDeprecatedCU@1160040008 : Codeunit 6086368;
      DocumentElement@1160040005 : Codeunit 6192801;
      XMLNodeList@1160040007 : Codeunit 6192802;
      DocumentGUID@1160040001 : GUID;
      Cnt@1160040006 : Integer;
    BEGIN
      IF NOT XmlDoc.HasChildnodes THEN
        EXIT;

      CLEAR(XMLNodeList);
      XmlDoc.GetDocumentElement(DocumentElement);
      IF DocumentElement.SelectNodes(XMLNodeList,'DeprecatedReceiptList/DeprecatedReceipt') THEN
        FOR Cnt := 0 TO XMLNodeList.Count - 1 DO BEGIN
          DocumentGUID := OnlineMgt.GetAttribAsGuid(XMLNodeList,'Id',Cnt);
          RemoveDeprecatedCU.DeleteDoc(DATABASE::Expense,DocumentGUID);
        END;

      CLEAR(XMLNodeList);
      XmlDoc.GetDocumentElement(DocumentElement);
      IF DocumentElement.SelectNodes(XMLNodeList,'DeprecatedMileageList/DeprecatedMileage') THEN
        FOR Cnt := 0 TO XMLNodeList.Count - 1 DO BEGIN
          DocumentGUID := OnlineMgt.GetAttribAsGuid(XMLNodeList,'Id',Cnt);
          RemoveDeprecatedCU.DeleteDoc(DATABASE::Mileage,DocumentGUID);
        END;

      CLEAR(XMLNodeList);
      XmlDoc.GetDocumentElement(DocumentElement);
      IF DocumentElement.SelectNodes(XMLNodeList,'DeprecatedSettlementList/DeprecatedSettlement') THEN
        FOR Cnt := 0 TO XMLNodeList.Count - 1 DO BEGIN
          DocumentGUID := OnlineMgt.GetAttribAsGuid(XMLNodeList,'Id',Cnt);
          RemoveDeprecatedCU.DeleteDoc(DATABASE::"Expense Header",DocumentGUID);
        END;
    END;

    LOCAL PROCEDURE GetSettlementNewVersionNo@1160040105(XmlDoc@1160040000 : Codeunit 6192800) : Text[100];
    BEGIN
      EXIT(GetNewVersionNo(XmlDoc,'SettlementResponseModel','Settlement'));
    END;

    LOCAL PROCEDURE GetExpenseNewVersionNo@1160040106(XmlDoc@1160040000 : Codeunit 6192800) : Text[100];
    BEGIN
      EXIT(GetNewVersionNo(XmlDoc,'UpdateResponseModel','Receipt'));
    END;

    LOCAL PROCEDURE GetMileageNewVersionNo@1160040115(XmlDoc@1160040000 : Codeunit 6192800) : Text[100];
    BEGIN
      EXIT(GetNewVersionNo(XmlDoc,'MileageResponseModel','Mileage'));
    END;

    LOCAL PROCEDURE GetNewVersionNo@1160040084(XmlDoc@1160040000 : Codeunit 6192800;RootNodeName@1160040001 : Text[100];NodeName@1160040002 : Text[100]) NewVersionNo : Text[100];
    VAR
      XmlLib@1160040004 : Codeunit 6085573;
      XmlNode@1160040003 : Codeunit 6192801;
    BEGIN
      CLEAR(XmlNode);
      IF XmlDoc.SelectSingleNode(XmlNode,RootNodeName) THEN
        NewVersionNo := XmlLib.GetNodeAttrib(XmlNode,NodeName,'DocumentVersionNo');
    END;

    LOCAL PROCEDURE MarkDownloadedDocument@1160040120(TableID@1160040002 : Integer;DocumentGUID@1160040001 : GUID;ShowError@1160040000 : Boolean);
    VAR
      XmlDoc@1160040003 : Codeunit 6192800;
    BEGIN
      IsCompanyActive(TRUE);
      OnlineMgt.ExecuteRequest(GetDocumentConfirmUploadUrl(TableID,DocumentGUID),HttpActions::PUT,ShowError,XmlDoc);
    END;

    LOCAL PROCEDURE ShowErrorMsg@1160040119(ErrorMsg@1160040000 : Text[1024]);
    BEGIN
      CASE ErrorMsg OF
        'EXP-UNABLE-TO-DELETE',
        'EXP-UNABLE-TO-UPDATE',
        'EXP-UNABLE-DEPR-DOCVER':
          ErrorMsg := UnableToUpdateExp;
        'MIL-UNABLE-TO-DELETE',
        'MIL-UNABLE-TO-UPDATE',
        'MIL-UNABLE-DEPR-DOCVER':
          ErrorMsg := UnableToUpdateMil;
        'SET-UNABLE-TO-DELETE',
        'SET-UNABLE-TO-UPDATE',
        'SET-UNABLE-DEPR-DOCVER':
          ErrorMsg := UnableToUpdateSet;
      END;

      ERROR(ErrorMsg);
    END;

    LOCAL PROCEDURE PostProcessSettlements@1160040121(VAR XmlDoc@1160040005 : Codeunit 6192800);
    VAR
      EMSetup@1160040003 : Record 6086300;
      ExpHeader@1160040004 : Record 6086339;
      EMApprovalsBridge@1160040000 : Codeunit 6086369;
      ExpHeaderValidate@1160040006 : Codeunit 6086381;
      DocumentElement@1160040007 : Codeunit 6192801;
      XMLNodeList@1160040002 : Codeunit 6192802;
      ExpHeaderGUID@1160040001 : GUID;
      Cnt@1160040016 : Integer;
    BEGIN
      IsCompanyActive(TRUE);
      IF NOT XmlDoc.HasChildnodes THEN
        EXIT;

      CLEAR(XMLNodeList);
      XmlDoc.GetDocumentElement(DocumentElement);
      IF NOT DocumentElement.SelectNodes(XMLNodeList,'SettlementList/Settlement') THEN
        EXIT;

      FOR Cnt := 0 TO XMLNodeList.Count - 1 DO BEGIN
        EMSetup.GET;

        //CONFIRM DOWNLOADED
        ExpHeaderGUID := OnlineMgt.GetAttribAsGuid(XMLNodeList,'Id',Cnt);
        MarkDownloadedDocument(DATABASE::"Expense Header",ExpHeaderGUID,TRUE);

        //AUTO SEND FOR APPROVAL
        ExpHeader.SETCURRENTKEY("Exp. Header GUID");
        ExpHeader.SETRANGE("Exp. Header GUID",ExpHeaderGUID);
        ExpHeader.SETRANGE("Expense Header Completed",TRUE);
        IF ExpHeader.FINDFIRST THEN BEGIN
          ExpHeaderValidate.CheckWithoutInboxValidation(ExpHeader);
          IF EMSetup."Auto Submit Sttl. for Approval" THEN
            IF EMApprovalsBridge.IsApprovalsWorkflowEnabled(DATABASE::"Expense Header",ExpHeader."No.") THEN
              EMApprovalsBridge.SendNonGUISttlApprovalRequest(ExpHeader,TRUE);
        END;
      END;
    END;

    PROCEDURE GetCEMOnlineUrl@1160040123() : Text[250];
    BEGIN
      CASE TRUE OF
        OnlineMgt.IsDev:
          EXIT('https://devcem.continiaonline.com');
        OnlineMgt.IsDemo:
          EXIT('https://democem.continiaonline.com');
        ELSE
          EXIT('https://cem.continiaonline.com');
      END;
    END;

    LOCAL PROCEDURE BuildVersionNoElement@1160040110(TableID@1160040006 : Integer;COVersionNo@1160040004 : Text[100];VAR XmlDoc@1160040002 : Codeunit 6192800);
    VAR
      XmlLib@1160040000 : Codeunit 6085573;
      XmlNode@1160040001 : Codeunit 6192801;
    BEGIN
      CASE TableID OF
        DATABASE::Expense:
          XmlDoc.CreateNode(XmlNode,'element','Receipt','');
        DATABASE::Mileage:
          XmlDoc.CreateNode(XmlNode,'element','Mileage','');
        DATABASE::"Expense Header":
          XmlDoc.CreateNode(XmlNode,'element','Settlement','');
      END;

      XmlLib.SetXmlNodeAttr(XmlNode,'DocumentVersionNo',COVersionNo);
      XmlDoc.AppendChild(XmlNode);
    END;

    LOCAL PROCEDURE RecalculateMileageAndCommit@6086300();
    VAR
      MilRate@6086300 : Record 6086370;
    BEGIN
      MilRate.RecalcMilAcrossComp;
      COMMIT;
    END;

    LOCAL PROCEDURE AddExpenseDimensionsToXmlNode@1160040129(Expense@1160040005 : Record 6086320;VAR XmlNode@1160040008 : Codeunit 6192801);
    VAR
      ConfigField@1160040006 : Record 6086346;
      EMDim@1160040004 : Record 6086360;
      XmlLib@1160040007 : Codeunit 6085573;
      XmlDoc@6086300 : Codeunit 6192800;
      DimNode@1160040002 : Codeunit 6192801;
      DimsNode@1160040001 : Codeunit 6192801;
      DimAdded@1160040003 : Boolean;
    BEGIN
      DimAdded := FALSE;
      CLEAR(DimsNode);
      XmlNode.GetOwnerDocument(XmlDoc);
      XmlDoc.CreateNode(DimsNode,'element','Dims','');

      EMDim.SETCURRENTKEY("Table ID","Document Type","Document No.","Doc. Ref. No.");
      EMDim.SETRANGE("Table ID",DATABASE::Expense);
      EMDim.SETRANGE("Document Type",0);
      EMDim.SETRANGE("Document No.",'');
      EMDim.SETRANGE("Doc. Ref. No.",Expense."Entry No.");
      IF EMDim.FINDFIRST THEN
        REPEAT
          CLEAR(DimNode);
          XmlDoc.CreateNode(DimNode,'element','Dim','');
          IF EMDim."Dimension Code" <> '' THEN BEGIN
            IF ConfigFieldActive(ConfigField.Type::Expense,EMDim."Dimension Code") THEN BEGIN
              XmlLib.SetXmlNodeAttr(DimNode,'FieldName',EMDim.GetFieldFromDim(EMDim."Dimension Code"));
              XmlLib.SetXmlNodeAttr(DimNode,'FieldValue',EMDim."Dimension Value Code");
              DimsNode.AppendChild(DimNode);
              DimAdded := TRUE;
            END;
          END ELSE BEGIN
            XmlLib.SetXmlNodeAttr(DimNode,'FieldName',EMDim."Field Code");
            XmlLib.SetXmlNodeAttr(DimNode,'FieldValue',MapToOnlineValue(EMDim."Field Code",EMDim."Field Value"));
            DimsNode.AppendChild(DimNode);
            DimAdded := TRUE;
          END;
        UNTIL EMDim.NEXT = 0;

      IF AddAdminCommentToXmlNode(DATABASE::Expense,Expense."Admin Comment",DimsNode) THEN
        DimAdded := TRUE;

      IF AddJobToXmlNode(DATABASE::Expense,Expense."Job No.",Expense."Job Task No.",Expense.Billable,DimsNode) THEN
        DimAdded := TRUE;

      IF AddCashPrivateToXmlNode(DATABASE::Expense,Expense."Cash/Private Card",DimsNode) THEN
        DimAdded := TRUE;

      IF Expense.Status = Expense.Status::Released THEN
        IF AddApprovalStatusToXmlNode(Expense."No Refund",DimsNode) THEN
          DimAdded := TRUE;

      IF DimAdded THEN
        XmlNode.AppendChild(DimsNode);
    END;

    LOCAL PROCEDURE AddJobToXmlNode@1160040126(TableID@1160040005 : Integer;JobNo@1160040009 : Code[20];JobTaskNo@1160040010 : Code[20];JobBillable@1160040011 : Boolean;VAR XmlNode@1160040008 : Codeunit 6192801) DimAdded : Boolean;
    VAR
      XmlLib@1160040007 : Codeunit 6085573;
      XmlDoc@6086300 : Codeunit 6192800;
      JobNode@1160040002 : Codeunit 6192801;
    BEGIN
      IF (JobNo = '') OR (JobTaskNo = '') THEN
        EXIT(FALSE);

      XmlNode.GetOwnerDocument(XmlDoc);
      IF ConfigFieldActive(GetConfigTypeFromTableID(TableID),'JOBNO') THEN BEGIN
        XmlDoc.CreateNode(JobNode,'element','Dim','');
        XmlLib.SetXmlNodeAttr(JobNode,'FieldName','JOBNO');
        XmlLib.SetXmlNodeAttr(JobNode,'FieldValue',JobNo);
        XmlNode.AppendChild(JobNode);
        DimAdded := TRUE;
      END;

      IF ConfigFieldActive(GetConfigTypeFromTableID(TableID),'TASK') THEN BEGIN
        XmlDoc.CreateNode(JobNode,'element','Dim','');
        XmlLib.SetXmlNodeAttr(JobNode,'FieldName','TASK');
        XmlLib.SetXmlNodeAttr(JobNode,'FieldValue',JobTaskNo);
        XmlNode.AppendChild(JobNode);
        DimAdded := TRUE;
      END;

      IF ConfigFieldActive(GetConfigTypeFromTableID(TableID),'BILLABLE') THEN BEGIN
        XmlDoc.CreateNode(JobNode,'element','Dim','');
        XmlLib.SetXmlNodeAttr(JobNode,'FieldName','BILLABLE');
        XmlLib.SetXmlNodeAttr(JobNode,'FieldValue',OnlineMgt.GetBoolAsText(JobBillable));
        XmlNode.AppendChild(JobNode);
        DimAdded := TRUE;
      END;

      EXIT(DimAdded);
    END;

    LOCAL PROCEDURE AddCashPrivateToXmlNode@1160040134(TableID@1160040003 : Integer;CashPrivate@1160040001 : Boolean;VAR XmlNode@1160040008 : Codeunit 6192801) : Boolean;
    VAR
      XmlLib@1160040007 : Codeunit 6085573;
      XmlDoc@6086300 : Codeunit 6192800;
      DimNode@1160040002 : Codeunit 6192801;
    BEGIN
      IF NOT ConfigFieldActive(GetConfigTypeFromTableID(TableID),'CASH/PRIVATE CARD') THEN
        EXIT(FALSE);

      XmlNode.GetOwnerDocument(XmlDoc);
      XmlDoc.CreateNode(DimNode,'element','Dim','');
      XmlLib.SetXmlNodeAttr(DimNode,'FieldName','CASH/PRIVATE CARD');
      XmlLib.SetXmlNodeAttr(DimNode,'FieldValue',OnlineMgt.GetBoolAsText(CashPrivate));
      XmlNode.AppendChild(DimNode);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE AddApprovalStatusToXmlNode@1160040135(NoRefund@1160040001 : Boolean;VAR XmlNode@1160040000 : Codeunit 6192801) : Boolean;
    VAR
      XmlLib@1160040004 : Codeunit 6085573;
      XmlDoc@6086300 : Codeunit 6192800;
      DimNode@1160040002 : Codeunit 6192801;
    BEGIN
      XmlNode.GetOwnerDocument(XmlDoc);
      XmlDoc.CreateNode(DimNode,'element','Dim','');
      XmlLib.SetXmlNodeAttr(DimNode,'FieldName','APPROVAL STATUS');
      IF NoRefund THEN
        XmlLib.SetXmlNodeAttr(DimNode,'FieldValue','Rejected')
      ELSE
        XmlLib.SetXmlNodeAttr(DimNode,'FieldValue','Approved');
      XmlNode.AppendChild(DimNode);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE AddVehicleToXmlNode@1160040136(VehicleCode@1160040001 : Code[20];VAR XmlNode@1160040000 : Codeunit 6192801) : Boolean;
    VAR
      XmlLib@1160040002 : Codeunit 6085573;
      XmlDoc@1160040004 : Codeunit 6192800;
      DimNode@1160040003 : Codeunit 6192801;
    BEGIN
      IF VehicleCode = '' THEN
        EXIT(FALSE);

      IF NOT ConfigFieldActive(GetConfigTypeFromTableID(DATABASE::Mileage),'VEHICLE') THEN
        EXIT(FALSE);

      XmlNode.GetOwnerDocument(XmlDoc);
      XmlDoc.CreateNode(DimNode,'element','Dim','');
      XmlLib.SetXmlNodeAttr(DimNode,'FieldName','VEHICLE');
      XmlLib.SetXmlNodeAttr(DimNode,'FieldValue',VehicleCode);
      XmlNode.AppendChild(DimNode);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE AddVehicleRegNoToXmlNode@1160040133(VehicleRegNo@1160040001 : Text[30];VAR XmlNode@1160040000 : Codeunit 6192801) : Boolean;
    VAR
      XmlLib@1160040002 : Codeunit 6085573;
      XmlDoc@1160040004 : Codeunit 6192800;
      DimNode@1160040003 : Codeunit 6192801;
    BEGIN
      IF VehicleRegNo = '' THEN
        EXIT(FALSE);

      IF NOT ConfigFieldActive(GetConfigTypeFromTableID(DATABASE::Mileage),'VEHICLE REG. NO.') THEN
        EXIT(FALSE);

      XmlNode.GetOwnerDocument(XmlDoc);
      XmlDoc.CreateNode(DimNode,'element','Dim','');
      XmlLib.SetXmlNodeAttr(DimNode,'FieldName','VEHICLE REG. NO.');
      XmlLib.SetXmlNodeAttr(DimNode,'FieldValue',VehicleRegNo);
      XmlNode.AppendChild(DimNode);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE AddSettlementDimsToXmlNode@1160040131(ExpHeader@1160040005 : Record 6086339;VAR XmlNode@1160040008 : Codeunit 6192801);
    VAR
      ConfigField@1160040006 : Record 6086346;
      EMDim@1160040004 : Record 6086360;
      XmlLib@1160040007 : Codeunit 6085573;
      XmlDoc@1160040000 : Codeunit 6192800;
      DimNode@1160040002 : Codeunit 6192801;
      DimsNode@1160040001 : Codeunit 6192801;
      DimAdded@1160040003 : Boolean;
    BEGIN
      DimAdded := FALSE;
      CLEAR(DimsNode);
      XmlNode.GetOwnerDocument(XmlDoc);
      XmlDoc.CreateNode(DimsNode,'element','Dims','');

      EMDim.SETCURRENTKEY("Table ID","Document Type","Document No.","Doc. Ref. No.");
      EMDim.SETRANGE("Table ID",DATABASE::"Expense Header");
      EMDim.SETRANGE("Document Type",ExpHeader."Document Type");
      EMDim.SETRANGE("Document No.",ExpHeader."No.");
      EMDim.SETRANGE("Doc. Ref. No.",0);
      IF EMDim.FINDFIRST THEN
        REPEAT
          CLEAR(DimNode);
          XmlDoc.CreateNode(DimNode,'element','Dim','');
          IF EMDim."Dimension Code" <> '' THEN BEGIN
            IF ConfigFieldActive(ConfigField.Type::Settlement,EMDim."Dimension Code") THEN BEGIN
              XmlLib.SetXmlNodeAttr(DimNode,'FieldName',EMDim.GetFieldFromDim(EMDim."Dimension Code"));
              XmlLib.SetXmlNodeAttr(DimNode,'FieldValue',EMDim."Dimension Value Code");
              DimsNode.AppendChild(DimNode);
              DimAdded := TRUE;
            END;
          END ELSE BEGIN
            XmlLib.SetXmlNodeAttr(DimNode,'FieldName',EMDim."Field Code");
            XmlLib.SetXmlNodeAttr(DimNode,'FieldValue',MapToOnlineValue(EMDim."Field Code",EMDim."Field Value"));
            DimsNode.AppendChild(DimNode);
            DimAdded := TRUE;
          END;
        UNTIL EMDim.NEXT = 0;

      IF AddAdminCommentToXmlNode(DATABASE::"Expense Header",ExpHeader."Admin Comment",DimsNode) THEN
        DimAdded := TRUE;

      IF AddJobToXmlNode(DATABASE::"Expense Header",ExpHeader."Job No.",ExpHeader."Job Task No.",ExpHeader.Billable,DimsNode) THEN
        DimAdded := TRUE;

      IF ConfigFieldActive(ConfigField.Type::Settlement,'CURRENCY') THEN BEGIN
        XmlDoc.CreateNode(DimNode,'element','Dim','');
        XmlLib.SetXmlNodeAttr(DimNode,'FieldName','CURRENCY');
        XmlLib.SetXmlNodeAttr(DimNode,'FieldValue',GetCurrencyCode(ExpHeader."Currency Code"));
        DimsNode.AppendChild(DimNode);
        DimAdded := TRUE;
      END;

      IF ExpHeader."Country/Region Code" <> '' THEN
        IF ConfigFieldActive(ConfigField.Type::Settlement,'Country/Region') THEN BEGIN
          XmlDoc.CreateNode(DimNode,'element','Dim','');
          XmlLib.SetXmlNodeAttr(DimNode,'FieldName','COUNTRY/REGION');
          XmlLib.SetXmlNodeAttr(DimNode,'FieldValue',ExpHeader."Country/Region Code");
          DimsNode.AppendChild(DimNode);
          DimAdded := TRUE;
        END;

      IF ExpHeader.Status = ExpHeader.Status::Released THEN
        IF AddApprovalStatusToXmlNode(FALSE,DimsNode) THEN //TEST
          DimAdded := TRUE;

      IF DimAdded THEN
        XmlNode.AppendChild(DimsNode);
    END;

    LOCAL PROCEDURE AddMileageDimensionsToXmlNode@1160040132(Mileage@1160040005 : Record 6086338;VAR XmlNode@1160040008 : Codeunit 6192801);
    VAR
      ConfigField@1160040006 : Record 6086346;
      EMDim@1160040004 : Record 6086360;
      XmlLib@1160040007 : Codeunit 6085573;
      XmlDoc@1160040000 : Codeunit 6192800;
      DimNode@1160040002 : Codeunit 6192801;
      DimsNode@1160040001 : Codeunit 6192801;
      DimAdded@1160040003 : Boolean;
    BEGIN
      DimAdded := FALSE;
      XmlNode.GetOwnerDocument(XmlDoc);
      XmlDoc.CreateNode(DimsNode,'element','Dims','');

      EMDim.SETCURRENTKEY("Table ID","Document Type","Document No.","Doc. Ref. No.");
      EMDim.SETRANGE("Table ID",DATABASE::Mileage);
      EMDim.SETRANGE("Document Type",0);
      EMDim.SETRANGE("Document No.",'');
      EMDim.SETRANGE("Doc. Ref. No.",Mileage."Entry No.");
      IF EMDim.FINDFIRST THEN
        REPEAT
          CLEAR(DimNode);
          XmlDoc.CreateNode(DimNode,'element','Dim','');
          IF EMDim."Dimension Code" <> '' THEN BEGIN
            IF ConfigFieldActive(ConfigField.Type::Mileage,EMDim."Dimension Code") THEN BEGIN
              XmlLib.SetXmlNodeAttr(DimNode,'FieldName',EMDim.GetFieldFromDim(EMDim."Dimension Code"));
              XmlLib.SetXmlNodeAttr(DimNode,'FieldValue',EMDim."Dimension Value Code");
              DimsNode.AppendChild(DimNode);
              DimAdded := TRUE;
            END;
          END ELSE BEGIN
            XmlLib.SetXmlNodeAttr(DimNode,'FieldName',EMDim."Field Code");
            XmlLib.SetXmlNodeAttr(DimNode,'FieldValue',MapToOnlineValue(EMDim."Field Code",EMDim."Field Value"));
            DimsNode.AppendChild(DimNode);
            DimAdded := TRUE;
          END;
        UNTIL EMDim.NEXT = 0;

      IF AddAdminCommentToXmlNode(DATABASE::Mileage,Mileage."Admin Comment",DimsNode) THEN
        DimAdded := TRUE;

      IF AddJobToXmlNode(DATABASE::Mileage,Mileage."Job No.",Mileage."Job Task No.",Mileage.Billable,DimsNode) THEN
        DimAdded := TRUE;

      IF AddVehicleToXmlNode(Mileage."Vehicle Code",DimsNode) THEN
        DimAdded := TRUE;

      IF AddVehicleRegNoToXmlNode(Mileage."Vehicle Code",DimsNode) THEN
        DimAdded := TRUE;

      IF Mileage.Status = Mileage.Status::Released THEN
        IF AddApprovalStatusToXmlNode(Mileage."No Refund",DimsNode) THEN
          DimAdded := TRUE;

      IF DimAdded THEN
        XmlNode.AppendChild(DimsNode);
    END;

    LOCAL PROCEDURE GetConfigTypeFromTableID@1160040128(TableID@1160040000 : Integer) : Integer;
    VAR
      ConfigField@1160040001 : Record 6086346;
    BEGIN
      CASE TableID OF
        DATABASE::Expense :
          EXIT(ConfigField.Type::Expense);
        DATABASE::Mileage :
          EXIT(ConfigField.Type::Mileage);
        DATABASE::"Expense Header" :
          EXIT(ConfigField.Type::Settlement);
      END;
    END;

    LOCAL PROCEDURE ReadExpDimensions@1160040137(VAR ExpenseNode@1160040000 : Codeunit 6192801;VAR ExpenseInbox@1160040001 : Record 6086323);
    VAR
      ConfigField@1160040005 : Record 6086346;
      DimsNode@1160040002 : Codeunit 6192801;
      XmlDimNodeList@1160040003 : Codeunit 6192802;
      FieldValue@1160040008 : Text[250];
      FieldNameCode@1160040007 : Code[20];
      Count2@1160040006 : Integer;
    BEGIN
      DeleteAllEMDimInbox(DATABASE::"Expense Inbox",ExpenseInbox."Entry No.");

      IF ConfigFieldActive(ConfigField.Type::Expense,'JOBNO') THEN
        ExpenseInbox."Job No." := '';
      IF ConfigFieldActive(ConfigField.Type::Expense,'TASK') THEN
        ExpenseInbox."Job Task No." := '';
      IF NOT ConfigField.IsConfiguredFieldForTable(DATABASE::Expense,'BILLABLE') THEN
        ExpenseInbox.VALIDATE(Billable,TRUE);

      IF NOT ExpenseNode.SelectSingleNode(DimsNode,'Dims') THEN
        EXIT;

      IF NOT DimsNode.SelectNodes(XmlDimNodeList,'Dim') THEN
        EXIT;

      FOR Count2 := 0 TO XmlDimNodeList.Count - 1 DO BEGIN
        FieldNameCode := OnlineMgt.GetAttribAsCode(XmlDimNodeList,'FieldName',Count2);

        FieldValue := '';
        OnlineMgt.GetAttribAsText(XmlDimNodeList,'FieldValue',Count2,FieldValue);

        CASE UPPERCASE(FieldNameCode) OF
          'CASH/PRIVATE CARD':
            ExpenseInbox."Cash/Private Card" := OnlineMgt.GetAttribAsBool(XmlDimNodeList,'FieldValue',Count2);
          'JOBNO':
            ExpenseInbox."Job No." := OnlineMgt.GetAttribAsCode(XmlDimNodeList,'FieldValue',Count2);
          'TASK':
            ExpenseInbox."Job Task No." := OnlineMgt.GetAttribAsCode(XmlDimNodeList,'FieldValue',Count2);
          'BILLABLE':
            ExpenseInbox.Billable := OnlineMgt.GetAttribAsBool(XmlDimNodeList,'FieldValue',Count2);
          'ADMINCOMMENT':
            ExpenseInbox."Admin Comment" := FieldValue;
        END;

        IF NOT (FieldNameCode IN ['JOBNO','TASK','CASH/PRIVATE CARD','BILLABLE','ADMINCOMMENT']) THEN BEGIN
          InsertEMDimInbox(DATABASE::"Expense Inbox",ExpenseInbox."Entry No.",FieldNameCode,FieldValue);
          IF GetGlobalDimValue(1,FieldNameCode,FieldValue) <> '' THEN
            ExpenseInbox."Global Dimension 1 Code" := GetGlobalDimValue(1,FieldNameCode,FieldValue);
          IF GetGlobalDimValue(2,FieldNameCode,FieldValue) <> '' THEN
            ExpenseInbox."Global Dimension 2 Code" := GetGlobalDimValue(2,FieldNameCode,FieldValue);
        END;
      END;
    END;

    LOCAL PROCEDURE ReadMilDimensions@1160040144(VAR MileageNode@1160040000 : Codeunit 6192801;VAR MileageInbox@1160040001 : Record 6086353);
    VAR
      ConfigField@1160040005 : Record 6086346;
      DimsNode@1160040002 : Codeunit 6192801;
      XmlDimNodeList@1160040003 : Codeunit 6192802;
      FieldValue@1160040008 : Text[250];
      FieldNameCode@1160040007 : Code[20];
      Count2@1160040006 : Integer;
    BEGIN
      DeleteAllEMDimInbox(DATABASE::"Mileage Inbox",MileageInbox."Entry No.");

      IF ConfigFieldActive(ConfigField.Type::Mileage,'JOBNO') THEN
        MileageInbox."Job No." := '';
      IF ConfigFieldActive(ConfigField.Type::Mileage,'TASK') THEN
        MileageInbox."Job Task No." := '';
      IF ConfigFieldActive(ConfigField.Type::Mileage,'VEHICLE') THEN
        MileageInbox."Vehicle Code" := '';
      IF ConfigFieldActive(ConfigField.Type::Mileage,'VEHICLE REG. NO.') THEN
        MileageInbox."Vehicle Registration No." := '';
      IF NOT ConfigField.IsConfiguredFieldForTable(DATABASE::Mileage,'BILLABLE') THEN
        MileageInbox.VALIDATE(Billable,TRUE);

      IF NOT MileageNode.SelectSingleNode(DimsNode,'Dims') THEN
        EXIT;

      IF NOT DimsNode.SelectNodes(XmlDimNodeList,'Dim') THEN
        EXIT;

      FOR Count2 := 0 TO XmlDimNodeList.Count - 1 DO BEGIN
        FieldNameCode := OnlineMgt.GetAttribAsCode(XmlDimNodeList,'FieldName',Count2);

        FieldValue := '';
        OnlineMgt.GetAttribAsText(XmlDimNodeList,'FieldValue',Count2,FieldValue);

        CASE UPPERCASE(FieldNameCode) OF
          'JOBNO':
            MileageInbox."Job No." := OnlineMgt.GetAttribAsCode(XmlDimNodeList,'FieldValue',Count2);
          'TASK':
            MileageInbox."Job Task No." := OnlineMgt.GetAttribAsCode(XmlDimNodeList,'FieldValue',Count2);
          'VEHICLE':
            MileageInbox."Vehicle Code" := FieldValue;
          'BILLABLE':
            MileageInbox.Billable := OnlineMgt.GetAttribAsBool(XmlDimNodeList,'FieldValue',Count2);
          'VEHICLE REG. NO.':
            MileageInbox."Vehicle Registration No." :=
              UPPERCASE(COPYSTR(FieldValue,1,MAXSTRLEN(MileageInbox."Vehicle Registration No.")));
          'ADMINCOMMENT':
            MileageInbox."Admin Comment" := FieldValue;
        END;

        IF NOT (FieldNameCode IN ['JOBNO','TASK','CASH/PRIVATE CARD','VEHICLE','BILLABLE','VEHICLE REG. NO.','ADMINCOMMENT']) THEN BEGIN
          InsertEMDimInbox(DATABASE::"Mileage Inbox",MileageInbox."Entry No.",FieldNameCode,FieldValue);
          IF GetGlobalDimValue(1,FieldNameCode,FieldValue) <> '' THEN
            MileageInbox."Global Dimension 1 Code" := GetGlobalDimValue(1,FieldNameCode,FieldValue);
          IF GetGlobalDimValue(2,FieldNameCode,FieldValue) <> '' THEN
            MileageInbox."Global Dimension 2 Code" := GetGlobalDimValue(2,FieldNameCode,FieldValue);
        END;
      END;
    END;

    LOCAL PROCEDURE ReadSettlementDimensions@1160040145(VAR ExpHeaderNode@1160040000 : Codeunit 6192801;VAR ExpHeaderInbox@1160040001 : Record 6086341);
    VAR
      ConfigField@1160040005 : Record 6086346;
      DimsNode@1160040002 : Codeunit 6192801;
      XmlDimNodeList@1160040003 : Codeunit 6192802;
      FieldValue@1160040008 : Text[250];
      FieldNameCode@1160040007 : Code[20];
      Cnt@1160040006 : Integer;
    BEGIN
      DeleteAllEMDimInbox(DATABASE::"Expense Header Inbox",ExpHeaderInbox."Entry No.");

      IF ConfigFieldActive(ConfigField.Type::Settlement,'JOBNO') THEN
        ExpHeaderInbox."Job No." := '';
      IF ConfigFieldActive(ConfigField.Type::Settlement,'TASK') THEN
        ExpHeaderInbox."Job Task No." := '';
      IF ConfigFieldActive(ConfigField.Type::Settlement,'CURRENCY') THEN
        ExpHeaderInbox."Currency Code" := '';
      IF ConfigFieldActive(ConfigField.Type::Settlement,'COUNTRY/REGION') THEN
        ExpHeaderInbox."Country/Region Code" := '';
      IF NOT ConfigField.IsConfiguredFieldForTable(DATABASE::"Expense Header",'BILLABLE') THEN
        ExpHeaderInbox.VALIDATE(Billable,TRUE);

      IF NOT ExpHeaderNode.SelectSingleNode(DimsNode,'Dims') THEN
        EXIT;

      IF NOT DimsNode.SelectNodes(XmlDimNodeList,'Dim') THEN
        EXIT;

      FOR Cnt := 0 TO XmlDimNodeList.Count - 1 DO BEGIN
        FieldNameCode := OnlineMgt.GetAttribAsCode(XmlDimNodeList,'FieldName',Cnt);

        FieldValue := '';
        OnlineMgt.GetAttribAsText(XmlDimNodeList,'FieldValue',Cnt,FieldValue);

        CASE UPPERCASE(FieldNameCode) OF
          'JOBNO':
            ExpHeaderInbox."Job No." := OnlineMgt.GetAttribAsCode(XmlDimNodeList,'FieldValue',Cnt);
          'TASK':
            ExpHeaderInbox."Job Task No." := OnlineMgt.GetAttribAsCode(XmlDimNodeList,'FieldValue',Cnt);
          'CURRENCY':
            ExpHeaderInbox."Currency Code" := GetCurrencyCodeFromXML(OnlineMgt.GetAttribAsCode(XmlDimNodeList,'FieldValue',Cnt));
          'COUNTRY/REGION':
            ExpHeaderInbox."Country/Region Code" := OnlineMgt.GetAttribAsCode(XmlDimNodeList,'FieldValue',Cnt);
          'BILLABLE':
            ExpHeaderInbox.Billable := OnlineMgt.GetAttribAsBool(XmlDimNodeList,'FieldValue',Cnt);
          'ADMINCOMMENT':
            ExpHeaderInbox."Admin Comment" := FieldValue;
        END;

        IF NOT (FieldNameCode IN ['JOBNO','TASK','CURRENCY','COUNTRY/REGION','BILLABLE','ADMINCOMMENT']) THEN BEGIN
          InsertEMDimInbox(DATABASE::"Expense Header Inbox",ExpHeaderInbox."Entry No.",FieldNameCode,FieldValue);
          IF GetGlobalDimValue(1,FieldNameCode,FieldValue) <> '' THEN
            ExpHeaderInbox."Global Dimension 1 Code" := GetGlobalDimValue(1,FieldNameCode,FieldValue);
          IF GetGlobalDimValue(2,FieldNameCode,FieldValue) <> '' THEN
            ExpHeaderInbox."Global Dimension 2 Code" := GetGlobalDimValue(2,FieldNameCode,FieldValue);
        END;
      END;
    END;

    LOCAL PROCEDURE InsertEMDimInbox@1160040140(TableID@1160040006 : Integer;InboxEntryNo@1160040005 : Integer;FieldNameCode@1160040001 : Code[20];FieldValue@1160040000 : Text[250]);
    VAR
      FieldType@1160040002 : Record 6086345;
      EMDimInbox@1160040003 : Record 6086362;
      DimCode@1160040004 : Code[20];
    BEGIN
      IF FieldType.GET(FieldNameCode) AND (FieldValue <> '') THEN BEGIN
        CLEAR(EMDimInbox);
        DimCode := FieldType.GetDimCode;
        IF DimCode <> '' THEN BEGIN
          EMDimInbox."Dimension Code" := DimCode;
          EMDimInbox."Dimension Value Code" := UPPERCASE(FieldValue);
        END ELSE BEGIN
          EMDimInbox."Field Code" := FieldNameCode;
          EMDimInbox."Field Value" := FieldValue;
        END;

        EMDimInbox."Table ID" := TableID;
        EMDimInbox."Document Type" := 0;
        EMDimInbox."Document No." := '';
        EMDimInbox."Doc. Ref. No." := InboxEntryNo;
        IF NOT EMDimInbox.INSERT THEN
          EMDimInbox.MODIFY;
      END;
    END;

    LOCAL PROCEDURE GetGlobalDimValue@1160040143(GlobalDimNo@1160040003 : Integer;FieldNameCode@1160040001 : Code[20];FieldValue@1160040000 : Text[250]) : Code[20];
    VAR
      GLSetup@1160040005 : Record 98;
      FieldType@1160040002 : Record 6086345;
      DimCode@1160040004 : Code[20];
    BEGIN
      IF FieldValue = '' THEN
        EXIT;

      IF NOT FieldType.GET(FieldNameCode) THEN
        EXIT;

      DimCode := FieldType.GetDimCode;
      IF DimCode <> '' THEN BEGIN
        GLSetup.GET;
        IF (GlobalDimNo = 1) AND (GLSetup."Global Dimension 1 Code" = DimCode) THEN
          EXIT(FieldValue);
        IF (GlobalDimNo = 2) AND (GLSetup."Global Dimension 2 Code" = DimCode) THEN
          EXIT(FieldValue);
      END;
    END;

    LOCAL PROCEDURE DeleteAllEMDimInbox@1160040141(TableID@1160040000 : Integer;InboxEntryNo@1160040001 : Integer);
    VAR
      EMDimInbox@1160040002 : Record 6086362;
    BEGIN
      EMDimInbox.SETRANGE("Table ID",TableID);
      EMDimInbox.SETRANGE("Document Type",0);
      EMDimInbox.SETRANGE("Document No.",'');
      EMDimInbox.SETRANGE("Doc. Ref. No.",InboxEntryNo);
      EMDimInbox.DELETEALL;
    END;

    LOCAL PROCEDURE AddExpenseAllocationsToXmlNode@1160040130(Expense@1160040001 : Record 6086320;VAR ExpAllocationTemp@1160040007 : TEMPORARY Record 6086321;VAR XmlNode@1160040000 : Codeunit 6192801);
    VAR
      ExpAllocation@1160040002 : Record 6086321;
      XmlLib@1160040006 : Codeunit 6085573;
      XmlDoc@1160040005 : Codeunit 6192800;
      AllocationNode@1160040004 : Codeunit 6192801;
      AllocationsNode@1160040003 : Codeunit 6192801;
    BEGIN
      IF ExpAllocationTemp.ISEMPTY THEN BEGIN
        ExpAllocation.SETRANGE("Expense Entry No.",Expense."Entry No.");
        IF ExpAllocation.FINDSET THEN
          REPEAT
            ExpAllocationTemp.TRANSFERFIELDS(ExpAllocation);
            ExpAllocationTemp.INSERT;
          UNTIL ExpAllocation.NEXT = 0;
      END;

      XmlNode.GetOwnerDocument(XmlDoc);
      IF ExpAllocationTemp.FINDSET THEN BEGIN
        XmlDoc.CreateNode(AllocationsNode,'element','Allocations','');

        REPEAT
          CLEAR(AllocationNode);
          XmlDoc.CreateNode(AllocationNode,'element','ReceiptAllocation','');
          XmlLib.SetXmlNodeAttr(AllocationNode,'Description',ExpAllocationTemp.Description);
          XmlLib.SetXmlNodeAttr(AllocationNode,'Amount',FORMAT(ExpAllocationTemp.Amount,0,9));
          XmlLib.SetXmlNodeAttr(AllocationNode,'ReceiptType',ExpAllocationTemp."Expense Type");
          XmlLib.SetXmlNodeAttr(AllocationNode,'Order',FORMAT(ExpAllocationTemp."Entry No."));

          AddAttendeesToXmlNode(AllocationNode,DATABASE::"Expense Allocation",ExpAllocationTemp."Entry No.");
          AddExpAllocationDimsToXmlNode(ExpAllocationTemp,AllocationNode);

          AllocationsNode.AppendChild(AllocationNode);
        UNTIL ExpAllocationTemp.NEXT = 0;

        XmlNode.AppendChild(AllocationsNode);
        ExpAllocationTemp.DELETEALL;
      END;
    END;

    LOCAL PROCEDURE AddExpAllocationDimsToXmlNode@1160040138(ExpAllocation@1160040005 : Record 6086321;VAR XmlNode@1160040008 : Codeunit 6192801);
    VAR
      ConfigField@1160040006 : Record 6086346;
      EMAllocationDim@1160040004 : Record 6086357;
      XmlLib@1160040007 : Codeunit 6085573;
      XmlDoc@1160040000 : Codeunit 6192800;
      DimNode@1160040002 : Codeunit 6192801;
      DimsNode@1160040001 : Codeunit 6192801;
      DimAdded@1160040003 : Boolean;
    BEGIN
      CLEAR(DimsNode);
      XmlNode.GetOwnerDocument(XmlDoc);
      XmlDoc.CreateNode(DimsNode,'element','Dims','');

      EMAllocationDim.SETRANGE("Expense Allocation Entry No.",ExpAllocation."Entry No.");
      IF EMAllocationDim.FINDFIRST THEN
        REPEAT
          CLEAR(DimNode);
          XmlDoc.CreateNode(DimNode,'element','Dim','');

          IF ConfigFieldActive(ConfigField.Type::Expense,EMAllocationDim."Dimension Code") OR
             ConfigFieldActive(ConfigField.Type::Expense,EMAllocationDim."Field Code")
          THEN BEGIN
            IF EMAllocationDim."Dimension Code" <> '' THEN BEGIN
              XmlLib.SetXmlNodeAttr(DimNode,'FieldName',EMAllocationDim.GetFieldFromDim(EMAllocationDim."Dimension Code"));
              XmlLib.SetXmlNodeAttr(DimNode,'FieldValue',EMAllocationDim."Dimension Value Code");
            END ELSE BEGIN
              XmlLib.SetXmlNodeAttr(DimNode,'FieldName',EMAllocationDim."Field Code");
              XmlLib.SetXmlNodeAttr(DimNode,'FieldValue',EMAllocationDim."Field Value");
            END;

            DimsNode.AppendChild(DimNode);
            DimAdded := TRUE;
          END;

        UNTIL EMAllocationDim.NEXT = 0;

      IF AddAdminCommentToXmlNode(DATABASE::Expense,ExpAllocation."Admin Comment",DimsNode) THEN
        DimAdded := TRUE;

      IF AddCashPrivateToXmlNode(DATABASE::Expense,ExpAllocation."Cash/Private Card",DimsNode) THEN
        DimAdded := TRUE;

      IF AddJobToXmlNode(DATABASE::Expense,ExpAllocation."Job No.",ExpAllocation."Job Task No.",ExpAllocation.Billable,DimsNode) THEN
        DimAdded := TRUE;

      IF DimAdded THEN
        XmlNode.AppendChild(DimsNode);
    END;

    LOCAL PROCEDURE ReadExpAllocations@1160040147(VAR ExpenseNode@1160040000 : Codeunit 6192801;VAR ExpenseInbox@1160040001 : Record 6086323);
    VAR
      ExpAllocInbox@1160040005 : Record 6086322;
      AllocationsNode@1160040002 : Codeunit 6192801;
      ExpAllocationNode@1160040009 : Codeunit 6192801;
      AllocationsNodeList@1160040003 : Codeunit 6192802;
      LongText@1160040004 : Text[1024];
      Cnt@1160040006 : Integer;
    BEGIN
      DeleteAllocForInboxEntry(DATABASE::"Expense Inbox",ExpenseInbox."Entry No.");

      IF NOT ExpenseNode.SelectSingleNode(AllocationsNode,'Allocations') THEN
        EXIT;

      IF NOT AllocationsNode.SelectNodes(AllocationsNodeList,'ReceiptAllocation') THEN
        EXIT;

      FOR Cnt := 0 TO AllocationsNodeList.Count - 1 DO BEGIN
        CLEAR(ExpAllocInbox);
        ExpAllocInbox."Entry No." := ExpAllocInbox.GetLastEntryNo + 1;
        ExpAllocInbox."Table ID" := DATABASE::"Expense Inbox";
        ExpAllocInbox."Inbox Entry No." := ExpenseInbox."Entry No.";
        ExpAllocInbox."Continia User ID" := ExpenseInbox."Continia User ID";
        ExpAllocInbox."Document Date" := ExpenseInbox."Document Date";
        ExpAllocInbox."Date Created" := TODAY;
        ExpAllocInbox."Cash/Private Card" := ExpenseInbox."Cash/Private Card";
        ExpAllocInbox."Country/Region Code" := ExpenseInbox."Country/Region Code";
        ExpAllocInbox.Modified := TRUE; //OTHERWISE IT WILL BE DELETED

        OnlineMgt.GetAttribAsText(AllocationsNodeList,'Description',Cnt,LongText);
        ExpAllocInbox.Description := COPYSTR(LongText,1,MAXSTRLEN(ExpenseInbox.Description));

        OnlineMgt.GetAttribAsText(AllocationsNodeList,'Description2',Cnt,LongText);
        ExpAllocInbox."Description 2" := COPYSTR(LongText,1,MAXSTRLEN(ExpenseInbox."Description 2"));

        ExpAllocInbox."Document Date" := OnlineMgt.GetAttribAsDateUTC(AllocationsNodeList,'DocumentDate',Cnt);

        ExpAllocInbox.VALIDATE(Amount,OnlineMgt.GetAttribAsDecimal(AllocationsNodeList,'Amount',Cnt));
        ExpAllocInbox."Expense Type" := OnlineMgt.GetAttribAsCode(AllocationsNodeList,'ReceiptType',Cnt);
        ExpAllocInbox.INSERT;

        AllocationsNodeList.GetItem(ExpAllocationNode,Cnt);
        ReadExpAllocDimensions(ExpAllocationNode,ExpAllocInbox);
        ReadExpAttendees(ExpAllocationNode,DATABASE::"Expense Allocation Inbox",ExpAllocInbox."Entry No.");

        ExpAllocInbox.MODIFY;
      END;
    END;

    LOCAL PROCEDURE ReadExpAllocDimensions@1160040127(VAR ExpenseNode@1160040000 : Codeunit 6192801;VAR ExpAllocInbox@1160040001 : Record 6086322);
    VAR
      ConfigField@1160040005 : Record 6086346;
      DimsNode@1160040002 : Codeunit 6192801;
      XmlDimNodeList@1160040003 : Codeunit 6192802;
      FieldValue@1160040008 : Text[250];
      FieldNameCode@1160040007 : Code[20];
      Cnt@1160040006 : Integer;
    BEGIN
      DeleteAllEMDimInbox(DATABASE::"Expense Allocation Inbox",ExpAllocInbox."Entry No.");

      IF ConfigFieldActive(ConfigField.Type::Expense,'JOBNO') THEN
        ExpAllocInbox."Job No." := '';
      IF ConfigFieldActive(ConfigField.Type::Expense,'TASK') THEN
        ExpAllocInbox."Job Task No." := '';
      IF NOT ConfigField.IsConfiguredFieldForTable(DATABASE::Expense,'BILLABLE') THEN
        ExpAllocInbox.VALIDATE(Billable,TRUE);

      IF NOT ExpenseNode.SelectSingleNode(DimsNode,'Dims') THEN
        EXIT;

      IF NOT DimsNode.SelectNodes(XmlDimNodeList,'Dim') THEN
        EXIT;

      FOR Cnt := 0 TO XmlDimNodeList.Count - 1 DO BEGIN
        FieldNameCode := OnlineMgt.GetAttribAsCode(XmlDimNodeList,'FieldName',Cnt);

        FieldValue := '';
        OnlineMgt.GetAttribAsText(XmlDimNodeList,'FieldValue',Cnt,FieldValue);

        CASE UPPERCASE(FieldNameCode) OF
          'JOBNO':
            ExpAllocInbox."Job No." := OnlineMgt.GetAttribAsCode(XmlDimNodeList,'FieldValue',Cnt);
          'TASK':
            ExpAllocInbox."Job Task No." := OnlineMgt.GetAttribAsCode(XmlDimNodeList,'FieldValue',Cnt);
          'BILLABLE':
            ExpAllocInbox.Billable := OnlineMgt.GetAttribAsBool(XmlDimNodeList,'FieldValue',Cnt);
          'ADMINCOMMENT':
            ExpAllocInbox."Admin Comment" := FieldValue;
        END;

        IF NOT (FieldNameCode IN ['JOBNO','TASK','CASH/PRIVATE CARD','BILLABLE','ADMINCOMMENT']) THEN BEGIN
          InsertEMDimInbox(DATABASE::"Expense Allocation Inbox",ExpAllocInbox."Entry No.",FieldNameCode,FieldValue);

          IF GetGlobalDimValue(1,FieldNameCode,FieldValue) <> '' THEN
            ExpAllocInbox."Global Dimension 1 Code" := GetGlobalDimValue(1,FieldNameCode,FieldValue);
          IF GetGlobalDimValue(2,FieldNameCode,FieldValue) <> '' THEN
            ExpAllocInbox."Global Dimension 2 Code" := GetGlobalDimValue(2,FieldNameCode,FieldValue);
        END;
      END;
    END;

    LOCAL PROCEDURE DeleteAllocForInboxEntry@1160040148(TableID@1160040000 : Integer;InboxEntryNo@1160040001 : Integer);
    VAR
      EMAllocInbox@1160040002 : Record 6086322;
    BEGIN
      EMAllocInbox.SETRANGE("Table ID",TableID);
      EMAllocInbox.SETRANGE("Inbox Entry No.",InboxEntryNo);
      EMAllocInbox.DELETEALL;
    END;

    LOCAL PROCEDURE AddAdminCommentToXmlNode@1160040002(TableID@1160040003 : Integer;AdminComment@1160040001 : Text[250];VAR XmlNode@1160040008 : Codeunit 6192801) : Boolean;
    VAR
      XmlLib@1160040007 : Codeunit 6085573;
      XmlDoc@6086300 : Codeunit 6192800;
      DimNode@1160040002 : Codeunit 6192801;
    BEGIN
      IF NOT ConfigFieldActive(GetConfigTypeFromTableID(TableID),'ADMINCOMMENT') THEN
        EXIT(FALSE);

      XmlNode.GetOwnerDocument(XmlDoc);
      XmlDoc.CreateNode(DimNode,'element','Dim','');
      XmlLib.SetXmlNodeAttr(DimNode,'FieldName','ADMINCOMMENT');
      XmlLib.SetXmlNodeAttr(DimNode,'FieldValue',AdminComment);
      XmlNode.AppendChild(DimNode);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ReadExpAttendees@1160040139(VAR ExpenseNode@1160040000 : Codeunit 6192801;TableID@1160040001 : Integer;DocRefNo@1160040002 : Integer);
    VAR
      AttendeesInbox@1160040003 : Record 6086325;
      AttendeesNode@1160040005 : Codeunit 6192801;
      AttendeesNodeList@1160040004 : Codeunit 6192802;
      FieldValue@1160040007 : Text[250];
      Cnt@1160040006 : Integer;
    BEGIN
      CASE TableID OF
        DATABASE::"Expense Inbox",DATABASE::"Expense Allocation Inbox":
          IF NOT AttendeesEnabledFor(DATABASE::Expense) THEN
            EXIT;
        DATABASE::"Mileage Inbox":
          IF NOT AttendeesEnabledFor(DATABASE::Mileage) THEN
            EXIT;
      END;

      AttendeesInbox.SETRANGE("Table ID",TableID);
      AttendeesInbox.SETRANGE("Doc. Ref. No.",DocRefNo);
      AttendeesInbox.DELETEALL;

      IF NOT ExpenseNode.SelectSingleNode(AttendeesNode,'Attendees') THEN
        EXIT;

      IF NOT AttendeesNode.SelectNodes(AttendeesNodeList,'Attendee') THEN
        EXIT;

      FOR Cnt := 0 TO AttendeesNodeList.Count - 1 DO BEGIN
        AttendeesInbox."Table ID" := TableID;
        AttendeesInbox."Doc. Ref. No." := DocRefNo;
        AttendeesInbox."Entry No." := Cnt + 1;
        AttendeesInbox.Type := OnlineMgt.GetAttribAsInt(AttendeesNodeList,'Type',Cnt);
        IF OnlineMgt.GetAttribAsText(AttendeesNodeList,'Name',Cnt,FieldValue) THEN
          AttendeesInbox.Name := FieldValue;
        IF OnlineMgt.GetAttribAsText(AttendeesNodeList,'Company',Cnt,FieldValue) THEN
          AttendeesInbox."Company Name" := FieldValue;
        AttendeesInbox.INSERT;
      END;
    END;

    LOCAL PROCEDURE AddAttendeesToXmlNode@1160040142(VAR XmlNode@1160040000 : Codeunit 6192801;TableID@1160040001 : Integer;DocRefNo@1160040002 : Integer);
    VAR
      ExpAttendee@1160040004 : Record 6086308;
      XmlLib@1160040007 : Codeunit 6085573;
      XmlDoc@1160040003 : Codeunit 6192800;
      AttendeeNode@1160040006 : Codeunit 6192801;
      AttendeesNode@1160040005 : Codeunit 6192801;
    BEGIN
      IF NOT AttendeesEnabledFor(TableID) THEN
        EXIT;

      IF TableID = DATABASE::"Expense Allocation" THEN
        IF NOT AttendeesEnabledFor(DATABASE::Expense) THEN
          EXIT;

      XmlNode.GetOwnerDocument(XmlDoc);

      ExpAttendee.SETRANGE("Table ID",TableID);
      ExpAttendee.SETRANGE("Doc. Ref. No.",DocRefNo);
      IF ExpAttendee.FINDFIRST THEN BEGIN
        CLEAR(AttendeeNode);
        CLEAR(AttendeesNode);
        XmlDoc.CreateNode(AttendeesNode,'element','Attendees','');
        REPEAT
          XmlDoc.CreateNode(AttendeeNode,'element','Attendee','');
          XmlLib.SetXmlNodeAttr(AttendeeNode,'Type',OnlineMgt.GetIntAsText(ExpAttendee.Type));
          XmlLib.SetXmlNodeAttr(AttendeeNode,'Name',ExpAttendee.Name);
          XmlLib.SetXmlNodeAttr(AttendeeNode,'Company',ExpAttendee."Company Name");
          AttendeesNode.AppendChild(AttendeeNode);
        UNTIL ExpAttendee.NEXT = 0;
        XmlNode.AppendChild(AttendeesNode);
      END;
    END;

    BEGIN
    END.
  }
}

