OBJECT Codeunit 11020218 Datetime Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Day@1100528800 : TextConst 'DEU=Tag;ENU=Day;NLD=dag;NOR=Dag;SVE=Dag';
      Week@1100528801 : TextConst 'DEU=Woche;ENU=Week;NLD=week;NOR=Uke;SVE=Vecka';
      Month@1100528802 : TextConst 'DEU=Monat;ENU=Month;NLD=maand;NOR=MÜned;SVE=MÜnad';
      Quarter@1100528803 : TextConst 'DEU=Quartal;ENU=Quarter;NLD=kwartaal;NOR=Kvartal;SVE=Kvartal';
      Year@1100528804 : TextConst 'DEU=Jahr;ENU=Year;NLD=jaar;NOR=èr;SVE=èr';
      WeekDay@1100528805 : TextConst 'DEU=Wochentag;ENU=Weekday;NLD=weekdag;NOR=Ukedag;SVE=Veckodag';
      Current@1100528806 : TextConst 'DEU=Aktuell;ENU=Current;NLD=huidige;SVE=Lîpande (innevarande)';
      Days@1100528813 : TextConst 'DEU=Tage;ENU=Days;NLD=dagen;NOR=Dager;SVE=dagar';
      Weeks@1100528812 : TextConst 'DEU=Wochen;ENU=Weeks;NLD=weken';
      Months@1100528811 : TextConst 'DEU=Monate;ENU=Months;NLD=maanden;SVE=MÜnader';
      Quarters@1100528810 : TextConst 'DEU=Quartale;ENU=Quarters;NLD=kwartalen';
      Years@1100528809 : TextConst 'DEU=Jahre;ENU=Years;NLD=jaren';
      WeekDays@1100528808 : TextConst 'DEU=Wochentage;ENU=Weekdays;NLD=weekdagen';

    PROCEDURE Datetime@4(Date@1000 : Date;Time@1001 : Time) : Decimal;
    BEGIN
      IF (Date = 0D) THEN
        EXIT(0);

      IF Time = 0T THEN
        EXIT((Date-00000101D) * 86.4)
      ELSE
        EXIT(((Date-00000101D) * 86.4) + (Time - 000000T)/1000000);
    END;

    PROCEDURE Datetime2Time@5(Datetime@1000 : Decimal) : Time;
    BEGIN
      IF Datetime = 0 THEN
        EXIT(0T);
      EXIT(000000T + (Datetime MOD 86.4) * 1000000);
    END;

    PROCEDURE Datetime2Date@6(Datetime@1000 : Decimal) : Date;
    BEGIN
      IF Datetime = 0 THEN
        EXIT(0D);
      EXIT(00000101D + ROUND(Datetime/86.4,1,'<'));
    END;

    PROCEDURE OLDDatetime2Text@1(Datetime@1000 : Decimal) : Text[260];
    BEGIN
      //db, 17-08-10: M16611
      IF Datetime = 0 THEN
        EXIT('')
      ELSE
        EXIT(STRSUBSTNO('%1 %2',Datetime2Date(Datetime),Datetime2Time(Datetime)));
    END;

    PROCEDURE Datetime2Text@1100525000(Datetime@1100525000 : DateTime) : Text[260];
    BEGIN
      //db, 17-08-10: M16611
      IF Datetime = 0DT THEN
        EXIT('')
      ELSE
        EXIT(STRSUBSTNO('%1 %2',DT2DATE(Datetime),DT2TIME(Datetime)));
    END;

    PROCEDURE OLDText2Datetime@2(Text@1000 : Text[260]) : Decimal;
    VAR
      Pos@1001 : Integer;
      Date@1002 : Date;
      Time@1003 : Time;
    BEGIN
      Text := DELCHR(Text,'<>',' ');
      IF STRLEN(Text) = 0 THEN
        EXIT(0);

      Pos := STRPOS(Text,' ');
      IF Pos = 0 THEN
        Pos := STRPOS(Text,'+');
      IF Pos > 0 THEN BEGIN
        EVALUATE(Date,COPYSTR(Text,1,Pos - 1));
        EVALUATE(Time,COPYSTR(Text,Pos + 1));
      END ELSE BEGIN
        EVALUATE(Date,Text);
        Time := 000000T;
      END;

      EXIT(Datetime(Date,Time));
    END;

    PROCEDURE Text2Datetime@1100528900(Text@1000 : Text[260]) : DateTime;
    VAR
      Pos@1001 : Integer;
      Date@1002 : Date;
      Time@1003 : Time;
    BEGIN
      //db, 27-08-12: W014185
      Text := DELCHR(Text,'<>',' ');
      IF STRLEN(Text) = 0 THEN
        EXIT(0DT);

      Pos := STRPOS(Text,' ');
      IF Pos = 0 THEN
        Pos := STRPOS(Text,'+');
      IF Pos > 0 THEN BEGIN
        EVALUATE(Date,COPYSTR(Text,1,Pos - 1));
        EVALUATE(Time,COPYSTR(Text,Pos + 1));
      END ELSE BEGIN
        EVALUATE(Date,Text);
        Time := 000000T;
      END;

      EXIT(CREATEDATETIME(Date, Time));
    END;

    PROCEDURE TranslateDateFormula@1100528806(IDateFormula@1100528812 : DateFormula;VAR ODateFormula@1100528814 : Text);
    VAR
      DateFormulaDay@1100528811 : DateFormula;
      DateFormulaDayText@1100528810 : Text;
      DateFormulaWeek@1100528809 : DateFormula;
      DateFormulaWeekText@1100528808 : Text;
      DateFormulaWeekDay@1100528818 : DateFormula;
      DateFormulaWeekDayText@1100528819 : Text;
      DateFormulaMonth@1100528807 : DateFormula;
      DateFormulaMonthText@1100528806 : Text;
      DateFormulaQuarter@1100528805 : DateFormula;
      DateFormulaQuarterText@1100528804 : Text;
      DateFormulaYear@1100528803 : DateFormula;
      DateFormulaYearText@1100528802 : Text;
      DateFormulaStringToTranslate@1100528815 : Text;
      DateFormulaStringPartToTranslate@1100528817 : Text;
      DateFormulaCurrentDay@1100528820 : DateFormula;
      DateFormulaCurrentDayText@1100528825 : Text;
      DateFormulaCurrentWeek@1100528821 : DateFormula;
      DateFormulaCurrentWeekText@1100528826 : Text;
      DateFormulaCurrentMonth@1100528822 : DateFormula;
      DateFormulaCurrentMonthText@1100528827 : Text;
      DateFormulaCurrentQuarter@1100528823 : DateFormula;
      DateFormulaCurrentQuarterText@1100528828 : Text;
      DateFormulaCurrentYear@1100528824 : DateFormula;
      DateFormulaCurrentYearText@1100528829 : Text;
      p@1100528830 : Integer;
      rp@1100528816 : Integer;
    BEGIN
      //convert to local language
      EVALUATE(DateFormulaDay,'<1D>');
      EVALUATE(DateFormulaWeek,'<1W>');
      EVALUATE(DateFormulaMonth,'<1M>');
      EVALUATE(DateFormulaQuarter,'<1Q>');
      EVALUATE(DateFormulaYear,'<1Y>');
      EVALUATE(DateFormulaWeekDay, '<1WD>');
      EVALUATE(DateFormulaCurrentDay, '<CD>');
      EVALUATE(DateFormulaCurrentWeek, '<CW>');
      EVALUATE(DateFormulaCurrentMonth, '<CM>');
      EVALUATE(DateFormulaCurrentQuarter, '<CQ>');
      EVALUATE(DateFormulaCurrentYear, '<CY>');

      //convert DateFormula to string
      DateFormulaDayText := FORMAT(DateFormulaDay);
      DateFormulaWeekText := FORMAT(DateFormulaWeek);
      DateFormulaMonthText := FORMAT(DateFormulaMonth);
      DateFormulaQuarterText := FORMAT(DateFormulaQuarter);
      DateFormulaYearText := FORMAT(DateFormulaYear);
      DateFormulaWeekDayText := FORMAT(DateFormulaWeekDay);
      DateFormulaCurrentDayText := FORMAT(DateFormulaCurrentDay);
      DateFormulaCurrentWeekText := FORMAT(DateFormulaCurrentWeek);
      DateFormulaCurrentMonthText := FORMAT(DateFormulaCurrentMonth);
      DateFormulaCurrentQuarterText := FORMAT(DateFormulaCurrentQuarter);
      DateFormulaCurrentYearText := FORMAT(DateFormulaCurrentYear);

      //remove '1' from DateFormula string
      DateFormulaDayText := DELCHR(DateFormulaDayText, '=', '1');
      DateFormulaWeekText := DELCHR(DateFormulaWeekText, '=', '1');
      DateFormulaMonthText := DELCHR(DateFormulaMonthText, '=', '1');
      DateFormulaQuarterText := DELCHR(DateFormulaQuarterText, '=', '1');
      DateFormulaYearText := DELCHR(DateFormulaYearText, '=', '1');
      DateFormulaWeekDayText := DELCHR(DateFormulaWeekDayText, '=', '1');

      //convert DateFormula to translate, to string
      DateFormulaStringToTranslate := FORMAT(IDateFormula);

      p := 1;  //position for processing string
      rp := 1; //position for replacing characters

      WHILE (p <= STRLEN(DateFormulaStringToTranslate)) DO BEGIN
        IF NOT (DateFormulaStringToTranslate[p] IN ['0'..'9','-','+']) THEN BEGIN
          IF IsNextPositionALetter(DateFormulaStringToTranslate, p+1) THEN BEGIN
            DateFormulaStringPartToTranslate := FORMAT(DateFormulaStringToTranslate[p]) + FORMAT(DateFormulaStringToTranslate[p+1]);
            rp := p;
            p += 1;
          END ELSE BEGIN
            DateFormulaStringPartToTranslate := FORMAT(DateFormulaStringToTranslate[p]);
            rp := p;
          END;

          CASE DateFormulaStringPartToTranslate OF

            DateFormulaDayText: ReplaceCharacters(DateFormulaStringToTranslate, 'D', rp, 1);
            DateFormulaWeekText: ReplaceCharacters(DateFormulaStringToTranslate, 'W', rp, 1);
            DateFormulaMonthText: ReplaceCharacters(DateFormulaStringToTranslate, 'M', rp, 1);
            DateFormulaQuarterText: ReplaceCharacters(DateFormulaStringToTranslate, 'Q', rp, 1);
            DateFormulaYearText: ReplaceCharacters(DateFormulaStringToTranslate, 'Y', rp, 1);
            DateFormulaWeekDayText: ReplaceCharacters(DateFormulaStringToTranslate, 'WD', rp, 2);
            DateFormulaCurrentDayText: ReplaceCharacters(DateFormulaStringToTranslate, 'CD', rp, 2);
            DateFormulaCurrentWeekText: ReplaceCharacters(DateFormulaStringToTranslate, 'CW', rp, 2);
            DateFormulaCurrentMonthText: ReplaceCharacters(DateFormulaStringToTranslate, 'CM', rp, 2);
            DateFormulaCurrentQuarterText: ReplaceCharacters(DateFormulaStringToTranslate, 'CQ', rp, 2);
            DateFormulaCurrentYearText: ReplaceCharacters(DateFormulaStringToTranslate, 'CY', rp, 2);
          END;
        END;
        p += 1;
      END;

      ODateFormula := DateFormulaStringToTranslate;
    END;

    PROCEDURE TranslateDateFormulaToFullText@1100528800(IDateFormula@1100528812 : DateFormula;VAR ODateFormula@1100528814 : Text);
    VAR
      DateFormulaDay@1100528811 : DateFormula;
      DateFormulaDayText@1100528810 : Text;
      DateFormulaWeek@1100528809 : DateFormula;
      DateFormulaWeekText@1100528808 : Text;
      DateFormulaWeekDay@1100528818 : DateFormula;
      DateFormulaWeekDayText@1100528819 : Text;
      DateFormulaMonth@1100528807 : DateFormula;
      DateFormulaMonthText@1100528806 : Text;
      DateFormulaQuarter@1100528805 : DateFormula;
      DateFormulaQuarterText@1100528804 : Text;
      DateFormulaYear@1100528803 : DateFormula;
      DateFormulaYearText@1100528802 : Text;
      DateFormulaStringToTranslate@1100528815 : Text;
      DateFormulaStringPartToTranslate@1100528817 : Text;
      DateFormulaCurrentDay@1100528820 : DateFormula;
      DateFormulaCurrentDayText@1100528825 : Text;
      DateFormulaCurrentWeek@1100528821 : DateFormula;
      DateFormulaCurrentWeekText@1100528826 : Text;
      DateFormulaCurrentMonth@1100528822 : DateFormula;
      DateFormulaCurrentMonthText@1100528827 : Text;
      DateFormulaCurrentQuarter@1100528823 : DateFormula;
      DateFormulaCurrentQuarterText@1100528828 : Text;
      DateFormulaCurrentYear@1100528824 : DateFormula;
      DateFormulaCurrentYearText@1100528829 : Text;
      p@1100528830 : Integer;
      rp@1100528816 : Integer;
      pp@1100528800 : Integer;
      pptext@1100528801 : Text;
    BEGIN
      //convert to local language
      EVALUATE(DateFormulaDay,'<1D>');
      EVALUATE(DateFormulaWeek,'<1W>');
      EVALUATE(DateFormulaMonth,'<1M>');
      EVALUATE(DateFormulaQuarter,'<1Q>');
      EVALUATE(DateFormulaYear,'<1Y>');
      EVALUATE(DateFormulaWeekDay, '<1WD>');
      EVALUATE(DateFormulaCurrentDay, '<CD>');
      EVALUATE(DateFormulaCurrentWeek, '<CW>');
      EVALUATE(DateFormulaCurrentMonth, '<CM>');
      EVALUATE(DateFormulaCurrentQuarter, '<CQ>');
      EVALUATE(DateFormulaCurrentYear, '<CY>');

      //convert DateFormula to string
      DateFormulaDayText := FORMAT(DateFormulaDay);
      DateFormulaWeekText := FORMAT(DateFormulaWeek);
      DateFormulaMonthText := FORMAT(DateFormulaMonth);
      DateFormulaQuarterText := FORMAT(DateFormulaQuarter);
      DateFormulaYearText := FORMAT(DateFormulaYear);
      DateFormulaWeekDayText := FORMAT(DateFormulaWeekDay);
      DateFormulaCurrentDayText := FORMAT(DateFormulaCurrentDay);
      DateFormulaCurrentWeekText := FORMAT(DateFormulaCurrentWeek);
      DateFormulaCurrentMonthText := FORMAT(DateFormulaCurrentMonth);
      DateFormulaCurrentQuarterText := FORMAT(DateFormulaCurrentQuarter);
      DateFormulaCurrentYearText := FORMAT(DateFormulaCurrentYear);

      //remove '1' from DateFormula string
      DateFormulaDayText := DELCHR(DateFormulaDayText, '=', '1');
      DateFormulaWeekText := DELCHR(DateFormulaWeekText, '=', '1');
      DateFormulaMonthText := DELCHR(DateFormulaMonthText, '=', '1');
      DateFormulaQuarterText := DELCHR(DateFormulaQuarterText, '=', '1');
      DateFormulaYearText := DELCHR(DateFormulaYearText, '=', '1');
      DateFormulaWeekDayText := DELCHR(DateFormulaWeekDayText, '=', '1');

      //convert DateFormula to translate, to string
      DateFormulaStringToTranslate := FORMAT(IDateFormula);

      p := 1;  //position for processing string
      rp := 1; //position for replacing characters
      pp := 0; //pluralization 1 = singular >1 = plural

      WHILE (p <= STRLEN(DateFormulaStringToTranslate)) DO BEGIN
        IF (DateFormulaStringToTranslate[p] IN ['0'..'9']) THEN
          pptext := pptext + FORMAT(DateFormulaStringToTranslate[p]);
        IF NOT (DateFormulaStringToTranslate[p] IN ['0'..'9','-','+']) THEN BEGIN
          IF IsNextPositionALetter(DateFormulaStringToTranslate, p+1) THEN BEGIN
            DateFormulaStringPartToTranslate := FORMAT(DateFormulaStringToTranslate[p]) + FORMAT(DateFormulaStringToTranslate[p+1]);
            rp := p;
            p += 1;
          END ELSE BEGIN
            DateFormulaStringPartToTranslate := FORMAT(DateFormulaStringToTranslate[p]);
            rp := p;
          END;

          IF EVALUATE(pp,pptext) THEN;

          CASE pp OF
            1:
              BEGIN
                CASE DateFormulaStringPartToTranslate OF
                  DateFormulaDayText: ReplaceCharacters(DateFormulaStringToTranslate, ' ' + Day, rp, 1);
                  DateFormulaWeekText: ReplaceCharacters(DateFormulaStringToTranslate, ' '+ Week, rp, 1);
                  DateFormulaMonthText: ReplaceCharacters(DateFormulaStringToTranslate, ' ' + Month, rp, 1);
                  DateFormulaQuarterText: ReplaceCharacters(DateFormulaStringToTranslate, ' ' + Quarter, rp, 1);
                  DateFormulaYearText: ReplaceCharacters(DateFormulaStringToTranslate, ' ' + Year, rp, 1);
                  DateFormulaWeekDayText: ReplaceCharacters(DateFormulaStringToTranslate, ' ' + WeekDay, rp, 2);
                  DateFormulaCurrentDayText: ReplaceCharacters(DateFormulaStringToTranslate, Current + ' ' + Day, rp, 2);
                  DateFormulaCurrentWeekText: ReplaceCharacters(DateFormulaStringToTranslate, Current + ' ' + Week, rp, 2);
                  DateFormulaCurrentMonthText: ReplaceCharacters(DateFormulaStringToTranslate, Current + ' ' + Month, rp, 2);
                  DateFormulaCurrentQuarterText: ReplaceCharacters(DateFormulaStringToTranslate, Current + ' ' + Quarter, rp, 2);
                  DateFormulaCurrentYearText: ReplaceCharacters(DateFormulaStringToTranslate, Current + ' ' + Year, rp, 2);
                END;
              END;
            ELSE
              BEGIN
                CASE DateFormulaStringPartToTranslate OF
                  DateFormulaDayText: ReplaceCharacters(DateFormulaStringToTranslate, ' ' + Days, rp, 1);
                  DateFormulaWeekText: ReplaceCharacters(DateFormulaStringToTranslate, ' ' + Weeks, rp, 1);
                  DateFormulaMonthText: ReplaceCharacters(DateFormulaStringToTranslate, ' ' + Months, rp, 1);
                  DateFormulaQuarterText: ReplaceCharacters(DateFormulaStringToTranslate, ' ' + Quarters, rp, 1);
                  DateFormulaYearText: ReplaceCharacters(DateFormulaStringToTranslate, ' ' + Years, rp, 1);
                  DateFormulaWeekDayText: ReplaceCharacters(DateFormulaStringToTranslate, ' ' + WeekDays, rp, 2);
                  DateFormulaCurrentDayText: ReplaceCharacters(DateFormulaStringToTranslate, Current + ' ' + Day, rp, 2);
                  DateFormulaCurrentWeekText: ReplaceCharacters(DateFormulaStringToTranslate, Current + ' ' + Week, rp, 2);
                  DateFormulaCurrentMonthText: ReplaceCharacters(DateFormulaStringToTranslate, Current + ' ' + Month, rp, 2);
                  DateFormulaCurrentQuarterText: ReplaceCharacters(DateFormulaStringToTranslate, Current + ' ' + Quarter, rp, 2);
                  DateFormulaCurrentYearText: ReplaceCharacters(DateFormulaStringToTranslate, Current + ' ' + Year, rp, 2);
                END;
              END;
            pptext := '';
            pp := 0;
          END;
        END;
        p += 1;
      END;

      ODateFormula := DateFormulaStringToTranslate;
    END;

    LOCAL PROCEDURE IsNextPositionALetter@1100528805(DateFormulaStringToTranslate@1100528800 : Text;p@1100528801 : Integer) : Boolean;
    BEGIN
       IF p >=  STRLEN(DateFormulaStringToTranslate) THEN
        EXIT(FALSE);
       IF NOT (DateFormulaStringToTranslate[p] IN ['0'..'9','-','+']) THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    LOCAL PROCEDURE ReplaceCharacters@1100528809(VAR DateFormulaStringToTranslate@1100528800 : Text;DateFormulaText@1100528801 : Text;rp@1100528802 : Integer;NoOfCharacters@1100528803 : Integer);
    BEGIN
      DateFormulaStringToTranslate := DELSTR(DateFormulaStringToTranslate, rp, NoOfCharacters);
      DateFormulaStringToTranslate := INSSTR(DateFormulaStringToTranslate, DateFormulaText, rp);
    END;

    PROCEDURE GetTimestamp@1100528400() Timestamp : Text[50];
    BEGIN
      Timestamp := FORMAT(CURRENTDATETIME);
      Timestamp := DELCHR(Timestamp,'=','+"&/,.;:-_(){}#!?$\');
    END;

    PROCEDURE ConvertDateFormulaToTimesPerYear@1100525010(PeriodFormula@1100525000 : DateFormula) : Decimal;
    VAR
      CurrentLanguage@1100528600 : Integer;
      PeriodFormText@1100525001 : Text[30];
      NumberPart@1100485001 : Decimal;
      PeriodPart@1100485002 : Text[30];
    BEGIN
      CurrentLanguage := GLOBALLANGUAGE;
      GLOBALLANGUAGE(1033);
      PeriodFormText := FORMAT(PeriodFormula);
      GLOBALLANGUAGE(CurrentLanguage);
      IF PeriodFormText = '' THEN
        EXIT(1);

      PeriodPart := DELCHR(PeriodFormText, '=', '0123456789');
      IF (PeriodPart = '') THEN
        EXIT(0);

      EVALUATE(NumberPart, COPYSTR(PeriodFormText,1,STRPOS(PeriodFormText,PeriodPart) - 1));
      IF NumberPart = 0 THEN
        EXIT(0);

      CASE PeriodPart OF
        'D': EXIT(365/NumberPart);  //day
        'W': EXIT(52/NumberPart);   //week
        'M': EXIT(12/NumberPart);   //month
        'Q': EXIT(4/NumberPart);    //quarter
        'Y': EXIT(1/NumberPart);    //year
      END;
    END;

    PROCEDURE DurationToHours@1100528647(IDuration@1100528600 : Duration) : Decimal;
    BEGIN
      EXIT(IDuration / 1000 / 60 / 60);
    END;

    PROCEDURE HoursToDuration@1100528655(IHours@1100528600 : Decimal) : Duration;
    BEGIN
      EXIT(ROUND(IHours * 60 * 60 * 1000, 1));
    END;

    PROCEDURE RoundHoursByMinutes@1100528681(IHours@1100528600 : Decimal;IMinutes@1100528601 : Integer) : Decimal;
    BEGIN
      EXIT(ROUND(IHours * 60, IMinutes) / 60);
    END;

    PROCEDURE RoundDurationByMinutes@1100528683(IDuration@1100528600 : Duration;IMinutes@1100528601 : Integer) : Duration;
    BEGIN
      EXIT(ROUND(IDuration / 1000 / 60, IMinutes) * 60 * 1000);
    END;

    PROCEDURE RoundDurationByMinutesDown@1100528600(IDuration@1100528600 : Duration;IMinutes@1100528601 : Integer) : Duration;
    BEGIN
      EXIT(ROUND(IDuration / 1000 / 60, IMinutes, '<') * 60 * 1000);
    END;

    BEGIN
    END.
  }
}

