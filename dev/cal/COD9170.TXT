OBJECT Codeunit 9170 Conf./Personalization Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.04,4PSSE;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            InitializeProfiles;
          END;

  }
  CODE
  {
    VAR
      DeleteConfigurationChangesQst@1000 : TextConst 'ENU=This will delete all configuration changes made for this profile.  Do you want to continue?;NOR=Dette vil slette alle konfigurasjonsendringer som er gjort for denne profilen. Vil du fortsette?;SVE=Du kommer att ta bort alla konfigurations„ndringar som gjorts f”r den h„r profilen. Vill du forts„tta?';
      DeletePersonalizationChangesQst@1001 : TextConst 'ENU=This will delete all personalization changes made by this user.  Do you want to continue?;NOR=Dette vil slette alle tilpasningsendringer som er gjort av denne brukeren. Vil du fortsette?;SVE=Du kommer att ta bort alla anpassnings„ndringar som den h„r anv„ndaren har gjort. Vill du forts„tta?';
      NoDeleteProfileErr@1044 : TextConst 'ENU=You cannot delete a profile with default Role Center.;NOR=Du kan ikke slette en profil med standard rollesenter.;SVE=Du kan inte ta bort en profil med standard-Rollcenter.';
      AccountingManagerProfileTxt@1043 : TextConst 'ENU=Accounting Manager;NOR=Regnskapssjef;SVE=Redovisningschef';
      AccountingManagerDescriptionTxt@1042 : TextConst 'ENU=Accounting Manager;NOR=Regnskapssjef;SVE=Redovisningschef';
      APCoordinatorProfileTxt@1041 : TextConst 'ENU=AP Coordinator;NOR=Innkj›psansvarlig;SVE=LR-handl„ggare';
      APCoordinatorDescriptionTxt@1040 : TextConst 'ENU=Accounts Payable Coordinator;NOR=Innkj›psansvarlig;SVE=Handl„ggare';
      ARAdministratorProfileTxt@1039 : TextConst 'ENU=AR Administrator;NOR=Kundeansvarlig;SVE=KR-handl„ggare';
      ARAdministratorDescriptionTxt@1038 : TextConst 'ENU=Accounts Receivable Administrator;NOR=Kundeansvarlig;SVE=Kundreskontraadministrat”r';
      BookkeeperProfileTxt@1037 : TextConst 'ENU=Bookkeeper;NOR=Regnskapsf›rer;SVE=Bokf”ringsansvarig';
      BookkeeperDescriptionTxt@1036 : TextConst 'ENU=Bookkeeper;NOR=Regnskapsf›rer;SVE=Bokf”ringsansvarig';
      SalesManagerProfileTxt@1035 : TextConst 'ENU=Sales Manager;NOR=Salgssjef;SVE=F”rs„ljningschef';
      SalesManagerDescriptionTxt@1034 : TextConst 'ENU=Sales Manager;NOR=Salgssjef;SVE=F”rs„ljningschef';
      OrderProcessorProfileTxt@1033 : TextConst 'ENU=Order Processor;NOR=Ordrebehandler;SVE=Orderhandl„ggare';
      SalesOrderProcessorDescriptionTxt@1032 : TextConst 'ENU="Sales Order Processor ";NOR=Ordrebehandler;SVE=F”rs„ljningsorderhandl„ggare';
      PurchasingAgentProfileTxt@1031 : TextConst 'ENU=Purchasing Agent;NOR=Innkj›per;SVE=Ink”psagent';
      PurchasingAgentDescriptionTxt@1030 : TextConst 'ENU=Purchasing Agent;NOR=Innkj›per;SVE=Ink”psagent';
      ShippingandReceivingWMSProfileTxt@1029 : TextConst 'ENU=Shipping and Receiving - WMS;NOR=LEVERING OG MOTTAK - LA;SVE=Lev. och inl. - lagerst.syst.';
      ShippingandReceivingWMSDescriptionTxt@1028 : TextConst 'ENU=Shipping and Receiving - Warehouse Management System;NOR=Levering og mottak - lagerstyringssystem;SVE=Leverans och inleverans - lagerstyrningssystem';
      ShippingandReceivingProfileTxt@1027 : TextConst 'ENU=Shipping and Receiving;NOR=Levering og mottak;SVE=Leverans och inleverans';
      ShippingandReceivingDescriptionTxt@1026 : TextConst 'ENU=Shipping and Receiving - Order-by-Order;NOR=Levering og mottak - ordre for ordre;SVE=Leverans och inleverans - order-f”r-order';
      WarehouseWorkerWMSProfileTxt@1025 : TextConst 'ENU=Warehouse Worker - WMS;NOR=LAGERMEDARBEIDER - LA;SVE=Lagerarbetare - lagerst.syst.';
      WarehouseWorkerWMSDescriptionTxt@1024 : TextConst 'ENU=Warehouse Worker - Warehouse Management System;NOR=Lagermedarbeider - lagerstyringssystem;SVE=Lagerarbetare - lagerstyrningssystem';
      ProductionPlannerProfileTxt@1023 : TextConst 'ENU=Production Planner;NOR=Produksjonsplanlegger;SVE=Produktionsplanerare';
      ProductionPlannerDescriptionTxt@1022 : TextConst 'ENU=Production Planner;NOR=Produksjonsplanlegger;SVE=Produktionsplanerare';
      ShopSupervisorProfileTxt@1021 : TextConst 'ENU=Shop Supervisor;NOR=Verkstedleder;SVE=Produktionsansvarig';
      ShopSupervisorDescriptionTxt@1020 : TextConst 'ENU=Shop Supervisor - Manufacturing Comprehensive;NOR=Verkstedleder - Manufacturing Comprehensive;SVE=Produktionsansvarig - Manufacturing Comprehensive';
      ShopSupervisorFoundationProfileTxt@1019 : TextConst 'ENU=Shop Supervisor - Foundation;NOR=VERKSTEDLEDER - FOUNDATION;SVE=Produk.ansvarig - Foundation';
      ShopSupervisorFoundationDescriptionTxt@1018 : TextConst 'ENU=Shop Supervisor - Manufacturing Foundation;NOR=Verkstedleder - Manufacturing Foundation;SVE=Produktionsansvarig - Manufacturing Foundation';
      MachineOperatorProfileTxt@1017 : TextConst 'ENU=Machine Operator;NOR=Maskinoperat›r;SVE=Maskinoperat”r';
      MachineOperatorDescriptionTxt@1016 : TextConst 'ENU=Machine Operator - Manufacturing Comprehensive;NOR=Maskinoperat›r - omfattende produksjon;SVE=Maskinoperat”r - Manufacturing Comprehensive';
      ResourceManagerProfileTxt@1015 : TextConst 'ENU=Resource Manager;NOR=Ressursansvarlig;SVE=Resurshanterare';
      ResourceManagerDescriptionTxt@1014 : TextConst 'ENU=Resource Manager;NOR=Ressursansvarlig;SVE=Resurshanterare';
      ProjectManagerProfileTxt@1013 : TextConst 'ENU=Project Manager;NOR=Prosjektleder;SVE=Projektchef';
      ProjectManagerDescriptionTxt@1012 : TextConst 'ENU=Project Manager;NOR=Prosjektleder;SVE=Projektchef';
      DispatcherProfileTxt@1011 : TextConst 'ENU=Dispatcher;NOR=Ordrefordeler;SVE=Avs„ndare';
      DispatcherDescriptionTxt@1010 : TextConst 'ENU=Dispatcher - Customer Service;NOR=Ordrefordeler - kundeservice;SVE=Avs„ndare - Kundservice';
      OutboundTechnicianProfileTxt@1009 : TextConst 'ENU=Outbound Technician;NOR=Utetekniker;SVE=F„lttekniker';
      OutboundTechnicianDescriptionTxt@1008 : TextConst 'ENU=Outbound Technician - Customer Service;NOR=Utetekniker - kundeservice;SVE=F„lttekniker - Kundservice';
      ITManagerProfileTxt@1007 : TextConst 'ENU=IT Manager;NOR=IT-sjef;SVE=IT-chef';
      ITManagerDescriptionTxt@1006 : TextConst 'ENU=IT Manager;NOR=IT-sjef;SVE=IT-chef';
      PresidentProfileTxt@1005 : TextConst 'ENU=President;NOR=ADM. DIR.;SVE="VD "';
      PresidentDescriptionTxt@1004 : TextConst 'ENU="President ";NOR="Adm. dir. ";SVE="VD "';
      PresidentSBProfileTxt@1003 : TextConst 'ENU=President - Small Business;NOR=Adm. dir. - sm†bedrifter;SVE=VD - mindre f”retag';
      PresidentSBDescriptionTxt@1002 : TextConst 'ENU=President - Small Business;NOR=Adm. dir. - sm†bedrifter;SVE=VD - mindre f”retag';
      RapidStartServicesProfileTxt@1045 : TextConst 'ENU=RapidStart Services;NOR=RAPIDSTART SERVICES;SVE=RAPIDSTART SERVICES';
      RapidStartServicesDescriptionTxt@1046 : TextConst 'ENU=RapidStart Services Implementer;NOR=RapidStart Services Implementer;SVE=RapidStart Services Implementer';
      AccountingServicesTxt@1105 : TextConst 'ENU=Accounting Services;NOR=Regnskapstjenester;SVE=Redovisningstj„nster';
      AccountingServicesDescriptionTxt@1104 : TextConst 'ENU=Profile for users that have outsourced their Accounting;NOR=Profil for brukere som har utkontrahert regnskapsf›ringen;SVE=Profil f”r anv„ndare som har lagt ut sin redovisning';
      SecurityAdministratorTxt@1103 : TextConst 'ENU=Security Administrator;NOR=Sikkerhetsadministrator;SVE=S„kerhetsadministrat”r';
      SecurityAdministratorDescriptionTxt@1102 : TextConst 'ENU=Administration of users, user groups and permissions;NOR=Administrasjon av brukere, brukergrupper og tillatelser;SVE=Administration av anv„ndare, anv„ndargrupper och beh”righeter';
      AccountantTxt@1106 : TextConst 'ENU=Accountant;NOR=Revisor;SVE=Revisor';
      AccountantDescriptionTxt@1107 : TextConst 'ENU=Accountant;NOR=Revisor;SVE=Revisor';
      BusinessManagerIDTxt@1085 : TextConst 'ENU=Business Manager;NOR=Forretningsleder;SVE=Chef';
      BusinessManagerDescriptionTxt@1086 : TextConst 'ENU=Business Manager;NOR=Forretningsleder;SVE=Chef';
      SalesRelationManagerIDTxt@1112 : TextConst 'ENU=Sales and Relationship Manager;NOR=Sjef for salg og relasjoner;SVE=F”rs.- och kundhanteringschef';
      CannotDeleteDefaultUserProfileErr@1047 : TextConst 'ENU=You cannot delete this profile because it is set up as a default profile for one or more users or user groups.;NOR=Du kan ikke slette denne profilen fordi den er konfigurert som en standardprofil for en eller flere brukere eller brukergrupper.;SVE=Du kan inte ta bort den h„r profilen eftersom den har st„llts in som standardprofil f”r en eller flera anv„ndare eller anv„ndargrupper.';
      XMLDOMManagement@1067 : Codeunit 6224;
      RegEx@1056 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Regex";
      CultureInfo@1054 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.CultureInfo";
      Convert@1053 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      InstalledLanguages@1098 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.StringCollection";
      DetectedLanguages@1055 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.StringCollection";
      InfoForCompletionMessage@1091 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.StringCollection";
      CurrentProfileID@1050 : Code[30];
      CurrentProfileDescription@1079 : Text[250];
      CurrentPageID@1049 : Integer;
      CurrentPersonalizationID@1048 : Code[40];
      ProfileResxFileNotFoundTxt@1060 : TextConst '@@@=Tells the user that translated UI strings for a profile could not be found in a specific language.;ENU=%1  for Profile %2.;NOR=%1 for profilen %2.;SVE=%1 f”r profil %2.';
      ProfileResxFileNotFoundMsg@1077 : TextConst '@@@=Tells the user that translated UI strings for a given profile could not be found for one or more languages.;ENU=Could not find translated resources for the following language(s)\%1\This can happen if Profile ID is translated between languages.;NOR=Finner ikke oversatte ressurser for f›lgende spr†k\%1\Dette kan skje hvis profil-ID-en er oversatt mellom ulike spr†k.;SVE=Det gick inte att hitta ”versatta resurser f”r f”ljande spr†k\%1\Det h„r kan h„nda om profil-ID ”vers„tts mellan olika spr†k.';
      AttributesNodeNameTxt@1071 : TextConst '@@@={Locked};ENU=Attributes;NOR=Attributes;SVE=Attributes';
      NodeNodeNameTxt@1070 : TextConst '@@@={Locked};ENU=Node;NOR=Node;SVE=Node';
      NodesNodeNameTxt@1069 : TextConst '@@@={Locked};ENU=Nodes;NOR=Nodes;SVE=Nodes';
      CaptionMLAttributeNameTxt@1068 : TextConst '@@@={Locked};ENU=CaptionML;NOR=CaptionML;SVE=CaptionML';
      idLowerAttributeNameTxt@1066 : TextConst '@@@={Locked};ENU=id;NOR=id;SVE=id';
      NameAttributeNameLowerTxt@1065 : TextConst '@@@={Locked};ENU=name;NOR=name;SVE=name';
      ValueAttributeNameTxt@1063 : TextConst '@@@={Locked};ENU=value;NOR=value;SVE=value';
      RegexAppendCaptionMLTxt@1062 : TextConst '@@@={Locked};ENU="%1=%2";NOR="%1=%2";SVE="%1=%2"';
      ReplaceCaptionMLPatternTxt@1061 : TextConst '@@@={Locked};ENU="%1=.+?(?=;[A-Z]{3}=|$)";NOR="%1=.+?(?=;[A-Z]{3}=|$)";SVE="%1=.+?(?=;[A-Z]{3}=|$)"';
      RemoveCaptionMLPatternTxt@1076 : TextConst '@@@={Locked};ENU="%1=.+?(?<=;)(?=[A-Z]{3}=)|;%1=.+?(?=;[A-Z]{3}=|$)";NOR="%1=.+?(?<=;)(?=[A-Z]{3}=)|;%1=.+?(?=;[A-Z]{3}=|$)";SVE="%1=.+?(?<=;)(?=[A-Z]{3}=)|;%1=.+?(?=;[A-Z]{3}=|$)"';
      ExtractCaptionMLPatternTxt@1078 : TextConst '@@@={Locked};ENU="[A-Z]{3}(?==)|(?<=[A-Z]{3}=).+?(?=;[A-Z]{3}=|$)";NOR="[A-Z]{3}(?==)|(?<=[A-Z]{3}=).+?(?=;[A-Z]{3}=|$)";SVE="[A-Z]{3}(?==)|(?<=[A-Z]{3}=).+?(?=;[A-Z]{3}=|$)"';
      LanguagePatternTxt@1059 : TextConst '@@@={Locked};ENU="%1=";NOR="%1=";SVE="%1="';
      SelectImportFolderMsg@1058 : TextConst 'ENU=Select a folder to import translations from.;NOR=Velg en mappe † importere oversettelser fra.;SVE=V„lj en mapp att importera ”vers„ttningar fr†n.';
      SelectExportFolderMsg@1072 : TextConst 'ENU=Select a folder to export translations to.;NOR=Velg en mappe † eksportere oversettelser til.;SVE=V„lj en mapp att exportera ”vers„ttningar till.';
      SelectRemoveLanguageMsg@1074 : TextConst 'ENU=Select the language to remove profile translations for.;NOR=Velg spr†ket du vil fjerne profiloversettelser for.;SVE=V„lj spr†ket som profil”vers„ttningar ska tas bort f”r.';
      SelectRemoveLanguageTxt@1075 : TextConst '@@@={Locked};ENU=%1 - %2,;NOR=%1 - %2,;SVE=%1 - %2,';
      ProfileIDTxt@1051 : TextConst '@@@={Locked};ENU=Profile ID;NOR=Profile ID;SVE=Profile ID';
      ProfileIDCommentTxt@1082 : TextConst '@@@={Locked};ENU=Profile ID field from table 2000000074;NOR=Profile ID field from table 2000000074;SVE=Profile ID field from table 2000000074';
      ProfileDescriptionTxt@1052 : TextConst '@@@={Locked};ENU=Profile Description;NOR=Profile Description;SVE=Profile Description';
      ProfileDescriptionCommentTxt@1083 : TextConst '@@@={Locked};ENU=Description field from table 2000000074;NOR=Description field from table 2000000074;SVE=Description field from table 2000000074';
      ExportResxFormatTxt@1080 : TextConst '@@@={Locked};ENU="%1;%2;%3";NOR="%1;%2;%3";SVE="%1;%2;%3"';
      ExportResxCommentFormatTxt@1081 : TextConst '@@@={Locked};ENU=Page: %1 - PersonalizationId: %2 - ControlGuid: %3;NOR=Page: %1 - PersonalizationId: %2 - ControlGuid: %3;SVE=Page: %1 - PersonalizationId: %2 - ControlGuid: %3';
      ZipFileEntryTxt@1057 : TextConst '@@@={Locked};ENU=%1\%2.resx;NOR=%1\%2.resx;SVE=%1\%2.resx';
      ZipFileFormatNameTxt@1064 : TextConst '@@@={Locked};ENU=%1.zip;NOR=%1.zip;SVE=%1.zip';
      ZipFileNameTxt@1084 : TextConst 'ENU=ProfileResources;NOR=Profilressurser;SVE=Profilresurser';
      Mode@1073 : 'None,Import,Export,Remove';
      SelectTranslatedResxFileTxt@1089 : TextConst 'ENU=Select a zip file with translated resources.;NOR=Velg en ZIP-fil med oversatte ressurser.;SVE=V„lj en ZIP-fil med ”versatta resurser.';
      ImportCompleteMsg@1090 : TextConst '@@@=User must restart the client to see the imported translations.;ENU=Import completed. Restart the client to apply changes.;NOR=Importen er fullf›rt. Start klienten p† nytt for † ta i bruk endringene.;SVE=Import klar. Starta om klienten f”r att till„mpa „ndringarna.';
      ExportCompleteMsg@1092 : TextConst 'ENU=Export completed.;NOR=Eksporten er fullf›rt.;SVE=Export klar.';
      ExportNoEntriesFoundMsg@1094 : TextConst 'ENU=No entries found to export.;NOR=Fant ingen poster † eksportere.;SVE=Inga poster hittades f”r export.';
      RemoveCompleteMsg@1093 : TextConst 'ENU=Remove completed.;NOR=Fjerningen er fullf›rt.;SVE=Borttagning klar.';
      CompletionMessageMsg@1095 : TextConst '@@@={Locked};ENU=%1\%2;NOR=%1\%2;SVE=%1\%2';
      NoImportResourcesFoundMsg@1096 : TextConst '@@@="%1 = User selected folder. ";ENU=No resources found to import.;NOR=Fant ingen ressurser † importere.;SVE=Inga resurser hittades f”r import.';
      NoImportResourcesFoundForProfileMsg@1097 : TextConst '@@@="%1 = Profile ID";ENU=No resources found to import for Profile %1.;NOR=Fant ingen ressurser † importere for profilen %1.;SVE=Inga resurser hittades f”r import f”r profil %1.';
      NoDefaultProfileErr@1087 : TextConst 'ENU=No default profile set.;NOR=Ingen standard profilsett.;SVE=Ingen standardprofil har angetts.';
      ZipArchiveFileNameTxt@1100 : TextConst 'ENU=Profiles.zip;NOR=Profiles.zip;SVE=Profiles.zip';
      ZipArchiveFilterTxt@1099 : TextConst '@@@={Locked};ENU=Zip File (*.zip)|*.zip;NOR=Zip File (*.zip)|*.zip;SVE=Zip File (*.zip)|*.zip';
      ZipArchiveSaveDialogTxt@1088 : TextConst 'ENU=Export Profiles;NOR=Eksporter profiler;SVE=Exportera profiler';
      ZipArchiveProgressMsg@1101 : TextConst '@@@=Exporting profile: ORDER PROCESSOR;ENU=Exporting profile: #1######;NOR=Eksporterer profil: #1######;SVE=Exporterar profil: #1######';
      O365SalesTxt@1109 : TextConst 'ENU=O365 Sales;NOR=O365 Salg;SVE=O365 F”rs„ljning';
      O365SalesDescriptionTxt@1108 : TextConst 'ENU=O365 Sales Activities;NOR=Aktiviteter for O365 Salg;SVE=O365 F”rs„ljning - aktiviteter';
      TeamMemberTxt@1110 : TextConst 'ENU=Team Member;NOR=Teammedlem;SVE=Team Member';
      TeamMemberDescriptionTxt@1111 : TextConst 'ENU=Team Member;NOR=Teammedlem;SVE=Team Member';
      TenantProfileCantBeExportedErr@1114 : TextConst 'ENU=A Tenant Scope Profile does not support Export operation.;NOR=En profil for leietakeromfang st›tter ikke eksportoperasjon.';
      DoYouWantToContinue@1100285100 : TextConst 'ENU=Do you want to continue?;NOR=Vil du fortsette?;SVE=Vill du forts„tta?';

    [Internal]
    PROCEDURE InitializeProfiles@20();
    VAR
      Profile@1100 : Record 2000000072;
    BEGIN
      Profile.LOCKTABLE;
      IF NOT Profile.ISEMPTY THEN
        EXIT;
      InsertProfile(AccountingManagerProfileTxt,AccountingManagerDescriptionTxt,9001);
      InsertProfile(APCoordinatorProfileTxt,APCoordinatorDescriptionTxt,9002);
      InsertProfile(ARAdministratorProfileTxt,ARAdministratorDescriptionTxt,9003);
      InsertProfile(BookkeeperProfileTxt,BookkeeperDescriptionTxt,9004);
      InsertProfile(SalesManagerProfileTxt,SalesManagerDescriptionTxt,9005);
      InsertDefaultProfile(OrderProcessorProfileTxt,SalesOrderProcessorDescriptionTxt,9006);
      InsertProfile(PurchasingAgentProfileTxt,PurchasingAgentDescriptionTxt,9007);
      InsertProfile(ShippingandReceivingWMSProfileTxt,ShippingandReceivingWMSDescriptionTxt,9000);
      InsertProfile(ShippingandReceivingProfileTxt,ShippingandReceivingDescriptionTxt,9008);
      InsertProfile(WarehouseWorkerWMSProfileTxt,WarehouseWorkerWMSDescriptionTxt,9009);
      InsertProfile(ProductionPlannerProfileTxt,ProductionPlannerDescriptionTxt,9010);
      InsertProfile(ShopSupervisorProfileTxt,ShopSupervisorDescriptionTxt,9012);
      InsertProfile(ShopSupervisorFoundationProfileTxt,ShopSupervisorFoundationDescriptionTxt,9011);
      InsertProfile(MachineOperatorProfileTxt,MachineOperatorDescriptionTxt,9013);
      InsertProfile(ResourceManagerProfileTxt,ResourceManagerDescriptionTxt,9014);
      InsertProfile(ProjectManagerProfileTxt,ProjectManagerDescriptionTxt,9015);
      InsertProfile(DispatcherProfileTxt,DispatcherDescriptionTxt,9016);
      InsertProfile(OutboundTechnicianProfileTxt,OutboundTechnicianDescriptionTxt,9017);
      InsertProfile(ITManagerProfileTxt,ITManagerDescriptionTxt,9018);
      InsertProfile(PresidentProfileTxt,PresidentDescriptionTxt,9019);
      InsertProfile(PresidentSBProfileTxt,PresidentSBDescriptionTxt,9020);
      InsertProfile(RapidStartServicesProfileTxt,RapidStartServicesDescriptionTxt,9021);
      InsertProfile(BusinessManagerIDTxt,BusinessManagerDescriptionTxt,9022);
      InsertProfile(AccountingServicesTxt,AccountingServicesDescriptionTxt,9023);
      InsertProfile(SecurityAdministratorTxt,SecurityAdministratorDescriptionTxt,9024);
      InsertProfile(AccountantTxt,AccountantDescriptionTxt,9027);
      InsertProfile(O365SalesTxt,O365SalesDescriptionTxt,9029);
      InsertProfile(TeamMemberTxt,TeamMemberDescriptionTxt,9028);
      OnInitializeProfiles;
      COMMIT;
    END;

    [External]
    PROCEDURE InsertProfileExtended@51(ProfileID@1000 : Code[30];Description@1001 : Text[250];RoleCenterID@1002 : Integer;Default@1003 : Boolean);
    VAR
      Profile@1101 : Record 2000000178;
      AllObj@1102 : Record 2000000038;
    BEGIN
      IF NOT AllObj.GET(AllObj."Object Type"::Page,RoleCenterID) THEN
        EXIT;

      Profile.INIT;
      Profile."Profile ID" := ProfileID;
      Profile.Description := Description;
      Profile."Role Center ID" := RoleCenterID;
      Profile."Default Role Center" := Default;
      Profile.Scope := Profile.Scope::System;
      Profile.INSERT;
    END;

    [External]
    PROCEDURE InsertProfile@21(ProfileID@1000 : Code[30];Description@1001 : Text[250];RoleCenterID@1002 : Integer);
    BEGIN
      InsertProfileExtended(ProfileID,Description,RoleCenterID,FALSE);
    END;

    [External]
    PROCEDURE InsertDefaultProfile@50(ProfileID@1000 : Code[30];Description@1001 : Text[250];RoleCenterID@1002 : Integer);
    BEGIN
      InsertProfileExtended(ProfileID,Description,RoleCenterID,TRUE);
    END;

    [External]
    PROCEDURE DefaultRoleCenterID@22() : Integer;
    VAR
      IdentityManagement@1001 : Codeunit 9801;
      PermissionManager@1002 : Codeunit 9002;
      AzureADUserManagement@1003 : Codeunit 9010;
      RoleCenterID@1000 : Integer;
    BEGIN
      IF PermissionManager.SoftwareAsAService THEN
        IF AzureADUserManagement.TryGetAzureUserPlanRoleCenterId(RoleCenterID,USERSECURITYID) THEN;

      IF RoleCenterID = 0 THEN
        RoleCenterID := PAGE::"Business Manager Role Center"; // BUSINESS MANAGER

      IF IdentityManagement.IsInvAppId THEN
        RoleCenterID := PAGE::"O365 Sales Activities RC"; // O365 Sales Activities RC

      OnAfterGetDefaultRoleCenter(RoleCenterID);
      EXIT(RoleCenterID);
    END;

    [External]
    PROCEDURE GetProfileHavingDefaultRoleCenter@41(VAR DefaultProfile@1001 : Record 2000000178);
    BEGIN
      DefaultProfile.SETRANGE("Role Center ID",DefaultRoleCenterID);
      IF DefaultProfile.FINDFIRST THEN;
    END;

    [External]
    PROCEDURE GetDefaultProfile@61(VAR DefaultProfile@1001 : Record 2000000178);
    BEGIN
      DefaultProfile.SETRANGE("Default Role Center",TRUE);
      IF DefaultProfile.FINDFIRST THEN;
    END;

    [External]
    PROCEDURE GetCurrentProfileID@31() : Code[30];
    VAR
      CurrentProfileID@1000 : Code[30];
    BEGIN
      CurrentProfileID := GetCurrentProfileIDNoError;
      IF CurrentProfileID = '' THEN
        ERROR(NoDefaultProfileErr);

      EXIT(CurrentProfileID);
    END;

    [External]
    PROCEDURE GetCurrentProfileIDNoError@39() : Code[30];
    VAR
      UserPersonalization@1000 : Record 2000000073;
      Profile@1002 : Record 2000000178;
    BEGIN
      IF UserPersonalization.GET(USERSECURITYID) THEN
        IF UserPersonalization."Profile ID" <> '' THEN
          EXIT(UserPersonalization."Profile ID");

      Profile.SETRANGE("Default Role Center",TRUE);
      IF Profile.FINDFIRST THEN
        EXIT(Profile."Profile ID");

      EXIT('');
    END;

    [External]
    PROCEDURE SetCurrentProfileID@40(ProfileID@1001 : Code[30]);
    VAR
      UserPersonalization@1003 : Record 2000000073;
      PrevProfileID@1000 : Code[30];
    BEGIN
      IF UserPersonalization.GET(USERSECURITYID) THEN BEGIN
        PrevProfileID := UserPersonalization."Profile ID";
        UserPersonalization."Profile ID" := ProfileID;
        UserPersonalization.MODIFY(TRUE);
      END ELSE BEGIN
        UserPersonalization.INIT;
        UserPersonalization."User SID" := USERSECURITYID;
        UserPersonalization."Profile ID" := ProfileID;
        UserPersonalization.INSERT(TRUE);
      END;

      OnProfileChanged(PrevProfileID,ProfileID);
    END;

    [External]
    PROCEDURE GetCurrentProfile@69(VAR AllProfile@1001 : Record 2000000178);
    BEGIN
      GetCurrentProfileNoError(AllProfile);
      IF AllProfile.ISEMPTY THEN
        ERROR(NoDefaultProfileErr);
    END;

    [External]
    PROCEDURE GetCurrentProfileNoError@68(VAR AllProfile@1001 : Record 2000000178) : Boolean;
    VAR
      UserPersonalization@1000 : Record 2000000073;
    BEGIN
      IF UserPersonalization.GET(USERSECURITYID) THEN
        IF UserPersonalization."Profile ID" <> '' THEN
          EXIT(AllProfile.GET(UserPersonalization.Scope,UserPersonalization."App ID",UserPersonalization."Profile ID"));

      AllProfile.SETRANGE("Default Role Center",TRUE);
      EXIT(AllProfile.FINDFIRST);
    END;

    [External]
    PROCEDURE IsCurrentProfile@71(Scope@1000 : Option;AppID@1002 : GUID;ProfileID@1003 : Code[30]) : Boolean;
    VAR
      AllProfile@1001 : Record 2000000178;
    BEGIN
      IF NOT GetCurrentProfileNoError(AllProfile) THEN
        EXIT(FALSE);

      EXIT((AllProfile.Scope = Scope) AND (AllProfile."App ID" = AppID) AND (AllProfile."Profile ID" = ProfileID));
    END;

    [External]
    PROCEDURE SetCurrentProfile@67(AllProfile@1001 : Record 2000000178);
    VAR
      UserPersonalization@1003 : Record 2000000073;
      PrevAllProfile@1000 : Record 2000000178;
    BEGIN
      IF UserPersonalization.GET(USERSECURITYID) THEN BEGIN
        IF PrevAllProfile.GET(UserPersonalization.Scope,UserPersonalization."App ID",UserPersonalization."Profile ID") THEN;
        UserPersonalization."Profile ID" := AllProfile."Profile ID";
        UserPersonalization.Scope := AllProfile.Scope;
        UserPersonalization."App ID" := AllProfile."App ID";
        UserPersonalization.MODIFY(TRUE);
      END ELSE BEGIN
        UserPersonalization.INIT;
        UserPersonalization."User SID" := USERSECURITYID;
        UserPersonalization."Profile ID" := AllProfile."Profile ID";
        UserPersonalization.Scope := AllProfile.Scope;
        UserPersonalization."App ID" := AllProfile."App ID";
        UserPersonalization.INSERT(TRUE);
      END;

      OnProfileChanged(PrevAllProfile."Profile ID",AllProfile."Profile ID");
    END;

    [External]
    PROCEDURE CopyProfile@45(Profile@1035 : Record 2000000178;NewProfileID@1036 : Code[30];NewProfileScope@1000 : 'System,Tenant');
    VAR
      NewProfile@1037 : Record 2000000178;
      ProfileMetadata@1040 : Record 2000000074;
      NewProfileMetadata@1038 : Record 2000000074;
    BEGIN
      NewProfile.INIT;
      NewProfile.VALIDATE("Profile ID",NewProfileID);
      NewProfile.TESTFIELD("Profile ID");
      NewProfile.VALIDATE(Description,Profile.Description);
      NewProfile.VALIDATE("Role Center ID",Profile."Role Center ID");
      NewProfile.VALIDATE(Scope,NewProfileScope);
      NewProfile.INSERT;

      IF (Profile.Scope = Profile.Scope::System) AND (NewProfileScope = Profile.Scope::System) THEN BEGIN
        ProfileMetadata.SETRANGE("Profile ID",Profile."Profile ID");
        IF ProfileMetadata.FINDSET THEN
          REPEAT
            ProfileMetadata.CALCFIELDS("Page Metadata Delta");

            NewProfileMetadata.INIT;
            NewProfileMetadata.COPY(ProfileMetadata);
            NewProfileMetadata."Profile ID" := NewProfileID;
            NewProfileMetadata.INSERT;
          UNTIL ProfileMetadata.NEXT = 0;
      END;

      CopyProfilePageMetadata(Profile,NewProfile);

      OnAfterCopyProfile(Profile,NewProfile);
    END;

    [External]
    PROCEDURE ClearProfileConfiguration@1(Profile@1000 : Record 2000000178);
    VAR
      ProfileMetadata@1001 : Record 2000000074;
    BEGIN
      IF NOT CONFIRM(DeleteConfigurationChangesQst) THEN
        EXIT;
      IF Profile.Scope = Profile.Scope::System THEN BEGIN
        ProfileMetadata.SETRANGE("Profile ID",Profile."Profile ID");
        ProfileMetadata.DELETEALL(TRUE);
      END
    END;

    [External]
    PROCEDURE ClearUserPersonalization@2(User@1000 : Record 2000000073);
    VAR
      UserMetadata@1001 : Record 2000000075;
      UserPageMetadata@1002 : Record 2000000188;
      ObjectOptions@1101285000 : Record 2000000196;
    BEGIN
      IF NOT CONFIRM(DeletePersonalizationChangesQst) THEN
        EXIT;

      UserMetadata.SETRANGE("User SID",User."User SID");
      UserMetadata.DELETEALL(TRUE);

      UserPageMetadata.SETRANGE("User SID",User."User SID");
      UserPageMetadata.DELETEALL(TRUE);

      //>>4PSSE, 170817
      ObjectOptions.SETRANGE("User Name",User."User ID");
      ObjectOptions.DELETEALL(TRUE);
      //<<4PSSE
    END;

    [Internal]
    PROCEDURE ExportProfilesInZipFile@37(VAR Profile@1000 : Record 2000000178);
    VAR
      FileMgt@1003 : Codeunit 419;
      Window@1004 : Dialog;
      FileName@1002 : Text;
      ZipArchive@1001 : Text;
    BEGIN
      IF Profile.FINDSET THEN BEGIN
        ZipArchive := FileMgt.CreateZipArchiveObject;
        Window.OPEN(ZipArchiveProgressMsg);

        REPEAT
          Window.UPDATE(1,Profile."Profile ID");
          FileName := FileMgt.ServerTempFileName('xml');

          ExportProfiles(FileName,Profile);

          FileMgt.AddFileToZipArchive(FileName,Profile."Profile ID" + '.xml');
          FileMgt.DeleteServerFile(FileName);
        UNTIL Profile.NEXT = 0;

        Window.CLOSE;
        FileMgt.CloseZipArchive;

        FileMgt.DownloadHandler(ZipArchive,ZipArchiveSaveDialogTxt,'',ZipArchiveFilterTxt,ZipArchiveFileNameTxt);
        FileMgt.DeleteServerFile(ZipArchive);
      END;
    END;

    [Internal]
    PROCEDURE ExportProfiles@3(FileName@1000 : Text;Profile@1001 : Record 2000000178);
    VAR
      SystemProfile@1004 : Record 2000000072;
      FileOutStream@1002 : OutStream;
      ProfileFile@1003 : File;
    BEGIN
      IF Profile.Scope = Profile.Scope::Tenant THEN
        ERROR(TenantProfileCantBeExportedErr);

      ProfileFile.CREATE(FileName);
      ProfileFile.CREATEOUTSTREAM(FileOutStream);
      SystemProfile.GET(Profile."Profile ID");
      SystemProfile.SETRECFILTER;
      XMLPORT.EXPORT(XMLPORT::"Profile Import/Export",FileOutStream,SystemProfile);
      ProfileFile.CLOSE;
    END;

    [Internal]
    PROCEDURE ImportProfiles@4(FileName@1000 : Text);
    VAR
      FileInStream@1001 : InStream;
      ProfileFile@1002 : File;
    BEGIN
      ProfileFile.OPEN(FileName);
      ProfileFile.CREATEINSTREAM(FileInStream);
      XMLPORT.IMPORT(XMLPORT::"Profile Import/Export",FileInStream);
      ProfileFile.CLOSE;
    END;

    [Internal]
    PROCEDURE ChangeDefaultRoleCenter@24(Profile@1000 : Record 2000000178);
    BEGIN
      ChangeSystemProfileDefaultRoleCenter(Profile);
      ChangeTenantProfileDefaultRoleCenter(Profile);
    END;

    [External]
    PROCEDURE ValidateDeleteProfile@25(Profile@1112 : Record 2000000178);
    VAR
      UserPersonalization@1000 : Record 2000000073;
      UserGroup@1001 : Record 9000;
    BEGIN
      IF Profile."Default Role Center" THEN
        ERROR(NoDeleteProfileErr);

      UserPersonalization.SETRANGE("Profile ID",Profile."Profile ID");
      UserPersonalization.SETRANGE("App ID",Profile."App ID");
      UserPersonalization.SETRANGE(Scope,Profile.Scope);

      IF NOT UserPersonalization.ISEMPTY THEN
        IF NOT CONFIRM(CannotDeleteDefaultUserProfileErr+'\'+DoYouWantToContinue) THEN  //4PSSE
          ERROR(CannotDeleteDefaultUserProfileErr);

      UserGroup.SETRANGE("Default Profile ID",Profile."Profile ID");
      UserGroup.SETRANGE("Default Profile App ID",Profile."App ID");
      UserGroup.SETRANGE("Default Profile Scope",Profile.Scope);

      IF NOT UserGroup.ISEMPTY THEN
        ERROR(CannotDeleteDefaultUserProfileErr);
    END;

    [Internal]
    PROCEDURE ImportTranslatedResources@7(VAR Profile@1002 : Record 2000000178;ResourcesZipFileOrFolder@1000 : Text;ShowCompletionMessage@1003 : Boolean);
    VAR
      BaseProfile@1005 : Record 2000000072;
      FileManagement@1004 : Codeunit 419;
      ServerFolder@1001 : Text;
    BEGIN
      IF Profile.FINDSET THEN BEGIN
        InitializeDotnetVariables;
        ServerFolder := CopyResourcesToServer(ResourcesZipFileOrFolder);
        REPEAT
          IF ReadResourceFiles(Profile."Profile ID",ServerFolder) THEN BEGIN
            Mode := Mode::Import;
            IF BaseProfile.GET(Profile."Profile ID") THEN
              ProcessConfigurationMetadata(BaseProfile);
          END;
        UNTIL Profile.NEXT = 0;

        FileManagement.ServerRemoveDirectory(ServerFolder,TRUE);

        IF ShowCompletionMessage THEN
          GetCompletionMessage(TRUE);
      END;
    END;

    [Internal]
    PROCEDURE ImportTranslatedResourcesWithFolderSelection@12(VAR Profile@1000 : Record 2000000178);
    VAR
      FileManagement@1002 : Codeunit 419;
      ResourceFolder@1001 : Text;
    BEGIN
      IF FileManagement.CanRunDotNetOnClient THEN
        ResourceFolder := SelectResourceImportFolder;
      IF (ResourceFolder <> '') OR FileManagement.IsWebClient THEN
        ImportTranslatedResources(Profile,ResourceFolder,TRUE);
    END;

    [Internal]
    PROCEDURE ExportTranslatedResources@13(VAR Profile@1002 : Record 2000000178;ResourceFolder@1003 : Text);
    VAR
      SystemProfile@1004 : Record 2000000072;
      FileManagement@1000 : Codeunit 419;
      FolderExists@1001 : Boolean;
    BEGIN
      IF Profile.FINDSET THEN BEGIN
        InitializeDotnetVariables;
        IF FileManagement.CanRunDotNetOnClient THEN
          FolderExists := FileManagement.ClientDirectoryExists(ResourceFolder);
        IF FileManagement.IsWebClient OR FolderExists THEN BEGIN
          Mode := Mode::Export;
          REPEAT
            SystemProfile.RESET;
            SystemProfile.GET(Profile."Profile ID");
            ClearResourcesForProfile(SystemProfile."Profile ID");
            ProcessConfigurationMetadata(SystemProfile);
            ExportResourceFiles(ResourceFolder,SystemProfile."Profile ID")
          UNTIL Profile.NEXT = 0
        END;
      END;
    END;

    [Internal]
    PROCEDURE ExportTranslatedResourcesWithFolderSelection@9(VAR Profile@1000 : Record 2000000178);
    VAR
      FileManagement@1002 : Codeunit 419;
      ResourceFolder@1001 : Text;
    BEGIN
      IF FileManagement.CanRunDotNetOnClient THEN
        ResourceFolder := SelectResourceExportFolder;
      IF (ResourceFolder <> '') OR FileManagement.IsWebClient THEN BEGIN
        ExportTranslatedResources(Profile,ResourceFolder);
        GetCompletionMessage(TRUE);
      END;
    END;

    [Internal]
    PROCEDURE RemoveTranslatedResources@15(VAR Profile@1002 : Record 2000000178;Language@1001 : Text[3]);
    VAR
      BaseProfile@1000 : Record 2000000072;
    BEGIN
      IF Profile.FINDSET THEN
        IF Language <> '' THEN BEGIN
          InitializeDotnetVariables;
          AppendDetectedLanguage(Language);
          Mode := Mode::Remove;

          REPEAT
            IF BaseProfile.GET(Profile."Profile ID") THEN
              ProcessConfigurationMetadata(BaseProfile);
          UNTIL Profile.NEXT = 0
        END;
    END;

    [Internal]
    PROCEDURE RemoveTranslatedResourcesWithLanguageSelection@23(VAR Profile@1000 : Record 2000000178);
    VAR
      LanguageToRemove@1001 : Text[3];
    BEGIN
      LanguageToRemove := SelectLanguageToRemove;
      IF LanguageToRemove <> '' THEN BEGIN
        RemoveTranslatedResources(Profile,LanguageToRemove);
        GetCompletionMessage(TRUE);
      END;
    END;

    LOCAL PROCEDURE ProcessConfigurationMetadata@19(Profile@1000 : Record 2000000072);
    VAR
      ProfileMetadata@1002 : Record 2000000074;
      ProfileConfigurationDOM@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      ProfileMetadata.SETRANGE("Profile ID",Profile."Profile ID");
      IF ProfileMetadata.FINDSET(TRUE) THEN BEGIN
        REPEAT
          LoadProfileMetadata(ProfileMetadata,ProfileConfigurationDOM);
          CurrentProfileID := ProfileMetadata."Profile ID";
          CurrentProfileDescription := Profile.Description;
          CurrentPageID := ProfileMetadata."Page ID";
          CurrentPersonalizationID := ProfileMetadata."Personalization ID";
          ParseConfiguration(ProfileConfigurationDOM);
          UpdateProfileConfigurationRecord(ProfileMetadata,ProfileConfigurationDOM);
        UNTIL ProfileMetadata.NEXT = 0
      END;
    END;

    [External]
    PROCEDURE SelectResourceImportFolder@34() Folder : Text;
    VAR
      FileManagement@1001 : Codeunit 419;
    BEGIN
      IF FileManagement.CanRunDotNetOnClient THEN
        FileManagement.SelectFolderDialog(SelectImportFolderMsg,Folder);
    END;

    [External]
    PROCEDURE SelectResourceExportFolder@26() Folder : Text;
    VAR
      FileManagement@1001 : Codeunit 419;
    BEGIN
      IF FileManagement.CanRunDotNetOnClient THEN
        FileManagement.SelectFolderDialog(SelectExportFolderMsg,Folder);
    END;

    [External]
    PROCEDURE SelectLanguageToRemove@29() : Text[3];
    VAR
      WindowsLanguage@1000 : Record 2000000045;
      Options@1002 : Text;
      Selected@1001 : Integer;
    BEGIN
      FilterToInstalledLanguages(WindowsLanguage);
      IF WindowsLanguage.FINDSET THEN BEGIN
        REPEAT
          Options += STRSUBSTNO(SelectRemoveLanguageTxt,WindowsLanguage."Abbreviated Name",WindowsLanguage.Name);
        UNTIL WindowsLanguage.NEXT = 0;

        Selected := STRMENU(Options,0,SelectRemoveLanguageMsg);
        IF Selected > 0 THEN
          EXIT(COPYSTR(SELECTSTR(Selected,Options),1,3));
      END;

      EXIT('');
    END;

    [External]
    PROCEDURE FilterToInstalledLanguages@32(VAR WindowsLanguage@1000 : Record 2000000045);
    BEGIN
      // Filter is the same used by the Select Language dialog in the Windows client
      WindowsLanguage.SETRANGE("Globally Enabled",TRUE);
      WindowsLanguage.SETRANGE("Localization Exist",TRUE);
      WindowsLanguage.SETFILTER("Language ID",'<> %1',1034);
      WindowsLanguage.FINDSET;
    END;

    LOCAL PROCEDURE IsLanguageInstalled@35(LanguageName@1000 : Text) : Boolean;
    VAR
      WindowsLanguage@1001 : Record 2000000045;
    BEGIN
      IF InstalledLanguages.Count = 0 THEN BEGIN
        FilterToInstalledLanguages(WindowsLanguage);
        IF WindowsLanguage.FINDSET THEN BEGIN
          REPEAT
            InstalledLanguages.Add(CultureInfo.GetCultureInfo(WindowsLanguage."Language ID").Name);
          UNTIL WindowsLanguage.NEXT = 0
        END;
      END;

      EXIT(InstalledLanguages.Contains(LanguageName));
    END;

    LOCAL PROCEDURE ReadResourceFiles@43(ProfileID@1001 : Code[30];ServerFolder@1016 : Text) : Boolean;
    VAR
      ProfileResourceImportExport@1015 : Record 9170;
      WindowsLanguage@1020 : Record 2000000045;
      FileManagement@1009 : Codeunit 419;
      ResxReader@1000 : DotNet "'System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Resources.ResXResourceReader";
      Enumerator@1004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IDictionaryEnumerator";
      KeySplits@1012 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      Directory@1003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Directory";
      DirectoryInfo@1011 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.DirectoryInfo";
      Directories@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      Dir@1006 : Text;
      DirName@1002 : Text;
      FileName@1010 : Text;
      Language@1008 : Text[3];
      BaseProfileID@1017 : Code[30];
      i@1007 : Integer;
      ResourceCount@1013 : Integer;
    BEGIN
      ClearResourcesForProfile(ProfileID);

      IF (ServerFolder = '') OR (NOT FileManagement.ServerDirectoryExists(ServerFolder)) THEN
        EXIT(FALSE);

      Directories := Directory.GetDirectories(ServerFolder);
      FOR i := 0 TO Directories.Length - 1 DO BEGIN
        Dir := Directories.GetValue(i);
        DirName := DirectoryInfo.DirectoryInfo(Dir).Name;
        IF IsLanguageInstalled(DirName) THEN BEGIN
          Language := CultureInfo.GetCultureInfo(DirName).ThreeLetterWindowsLanguageName;
          AppendDetectedLanguage(Language);
          FilterToInstalledLanguages(WindowsLanguage);
          BaseProfileID := TranslateProfileID(ProfileID,WindowsLanguage,1033);
          FileName := FileManagement.CombinePath(Dir,BaseProfileID + '.Resx');
          IF FileManagement.ServerFileExists(FileName) THEN BEGIN
            ResxReader := ResxReader.ResXResourceReader(FileName);
            Enumerator := ResxReader.GetEnumerator;
            WHILE Enumerator.MoveNext DO BEGIN
              KeySplits := RegEx.Split(Convert.ToString(Enumerator.Key),';');
              IF KeySplits.Length = 3 THEN
                ProfileResourceImportExport.InsertRec(
                  ProfileID,Convert.ToInt32(KeySplits.GetValue(0)),Convert.ToString(KeySplits.GetValue(1)),
                  Convert.ToString(KeySplits.GetValue(2)),Language,Convert.ToString(Enumerator.Value));
            END;
          END ELSE
            InfoForCompletionMessage.Add(STRSUBSTNO(ProfileResxFileNotFoundTxt,Language,ProfileID));
        END;
      END;

      ResourceCount := CountResourcesForProfile(ProfileID);
      IF ResourceCount = 0 THEN
        InfoForCompletionMessage.Add(STRSUBSTNO(NoImportResourcesFoundForProfileMsg,ProfileID));

      EXIT(ResourceCount > 0);
    END;

    LOCAL PROCEDURE SetTranslationParameters@38(VAR WindowsLanguage@1002 : Record 2000000045;ProfileIDTxt@1001 : Text;TempLanguage@1003 : Integer;TranslateToLanguageID@1000 : Integer) TranslatedProfileID : Code[30];
    BEGIN
      CASE ProfileIDTxt OF
        AccountingManagerProfileTxt:
          BEGIN
            SetGlobalLanguage(TranslateToLanguageID);
            TranslatedProfileID := COPYSTR(AccountingManagerProfileTxt,1,MAXSTRLEN(TranslatedProfileID));
          END;
        APCoordinatorProfileTxt:
          BEGIN
            SetGlobalLanguage(TranslateToLanguageID);
            TranslatedProfileID := COPYSTR(APCoordinatorProfileTxt,1,MAXSTRLEN(TranslatedProfileID));
          END;
        ARAdministratorProfileTxt:
          BEGIN
            SetGlobalLanguage(TranslateToLanguageID);
            TranslatedProfileID := COPYSTR(ARAdministratorProfileTxt,1,MAXSTRLEN(TranslatedProfileID));
          END;
        BookkeeperProfileTxt:
          BEGIN
            SetGlobalLanguage(TranslateToLanguageID);
            TranslatedProfileID := COPYSTR(BookkeeperProfileTxt,1,MAXSTRLEN(TranslatedProfileID));
          END;
        SalesManagerProfileTxt:
          BEGIN
            SetGlobalLanguage(TranslateToLanguageID);
            TranslatedProfileID := COPYSTR(SalesManagerProfileTxt,1,MAXSTRLEN(TranslatedProfileID));
          END;
        OrderProcessorProfileTxt:
          BEGIN
            SetGlobalLanguage(TranslateToLanguageID);
            TranslatedProfileID := COPYSTR(OrderProcessorProfileTxt,1,MAXSTRLEN(TranslatedProfileID));
          END;
        PurchasingAgentProfileTxt:
          BEGIN
            SetGlobalLanguage(TranslateToLanguageID);
            TranslatedProfileID := COPYSTR(PurchasingAgentProfileTxt,1,MAXSTRLEN(TranslatedProfileID));
          END;
        ShippingandReceivingWMSProfileTxt:
          BEGIN
            SetGlobalLanguage(TranslateToLanguageID);
            TranslatedProfileID := COPYSTR(ShippingandReceivingWMSProfileTxt,1,MAXSTRLEN(TranslatedProfileID));
          END;
        ShippingandReceivingProfileTxt:
          BEGIN
            SetGlobalLanguage(TranslateToLanguageID);
            TranslatedProfileID := COPYSTR(ShippingandReceivingProfileTxt,1,MAXSTRLEN(TranslatedProfileID));
          END;
        WarehouseWorkerWMSProfileTxt:
          BEGIN
            SetGlobalLanguage(TranslateToLanguageID);
            TranslatedProfileID := COPYSTR(WarehouseWorkerWMSProfileTxt,1,MAXSTRLEN(TranslatedProfileID));
          END;
        ProductionPlannerProfileTxt:
          BEGIN
            SetGlobalLanguage(TranslateToLanguageID);
            TranslatedProfileID := COPYSTR(ProductionPlannerProfileTxt,1,MAXSTRLEN(TranslatedProfileID));
          END;
        ShopSupervisorProfileTxt:
          BEGIN
            SetGlobalLanguage(TranslateToLanguageID);
            TranslatedProfileID := COPYSTR(ShopSupervisorProfileTxt,1,MAXSTRLEN(TranslatedProfileID));
          END;
        ShopSupervisorFoundationProfileTxt:
          BEGIN
            SetGlobalLanguage(TranslateToLanguageID);
            TranslatedProfileID := COPYSTR(ShopSupervisorFoundationProfileTxt,1,MAXSTRLEN(TranslatedProfileID));
          END;
        MachineOperatorProfileTxt:
          BEGIN
            SetGlobalLanguage(TranslateToLanguageID);
            TranslatedProfileID := COPYSTR(MachineOperatorProfileTxt,1,MAXSTRLEN(TranslatedProfileID));
          END;
        ResourceManagerProfileTxt:
          BEGIN
            SetGlobalLanguage(TranslateToLanguageID);
            TranslatedProfileID := COPYSTR(ResourceManagerProfileTxt,1,MAXSTRLEN(TranslatedProfileID));
          END;
        ProjectManagerProfileTxt:
          BEGIN
            SetGlobalLanguage(TranslateToLanguageID);
            TranslatedProfileID := COPYSTR(ProjectManagerProfileTxt,1,MAXSTRLEN(TranslatedProfileID));
          END;
        DispatcherProfileTxt:
          BEGIN
            SetGlobalLanguage(TranslateToLanguageID);
            TranslatedProfileID := COPYSTR(DispatcherProfileTxt,1,MAXSTRLEN(TranslatedProfileID));
          END;
        OutboundTechnicianProfileTxt:
          BEGIN
            SetGlobalLanguage(TranslateToLanguageID);
            TranslatedProfileID := COPYSTR(OutboundTechnicianProfileTxt,1,MAXSTRLEN(TranslatedProfileID));
          END;
        ITManagerProfileTxt:
          BEGIN
            SetGlobalLanguage(TranslateToLanguageID);
            TranslatedProfileID := COPYSTR(ITManagerProfileTxt,1,MAXSTRLEN(TranslatedProfileID));
          END;
        PresidentProfileTxt:
          BEGIN
            SetGlobalLanguage(TranslateToLanguageID);
            TranslatedProfileID := COPYSTR(PresidentProfileTxt,1,MAXSTRLEN(TranslatedProfileID));
          END;
        PresidentSBProfileTxt:
          BEGIN
            SetGlobalLanguage(TranslateToLanguageID);
            TranslatedProfileID := COPYSTR(PresidentSBProfileTxt,1,MAXSTRLEN(TranslatedProfileID));
          END;
        RapidStartServicesProfileTxt:
          BEGIN
            SetGlobalLanguage(TranslateToLanguageID);
            TranslatedProfileID := COPYSTR(RapidStartServicesProfileTxt,1,MAXSTRLEN(TranslatedProfileID));
          END;
        BusinessManagerIDTxt:
          BEGIN
            SetGlobalLanguage(TranslateToLanguageID);
            TranslatedProfileID := COPYSTR(BusinessManagerIDTxt,1,MAXSTRLEN(TranslatedProfileID));
          END;
        AccountingServicesTxt:
          BEGIN
            SetGlobalLanguage(TranslateToLanguageID);
            TranslatedProfileID := COPYSTR(AccountingServicesTxt,1,MAXSTRLEN(TranslatedProfileID));
          END;
        SecurityAdministratorTxt:
          BEGIN
            SetGlobalLanguage(TranslateToLanguageID);
            TranslatedProfileID := COPYSTR(SecurityAdministratorTxt,1,MAXSTRLEN(TranslatedProfileID));
          END;
        TeamMemberTxt:
          BEGIN
            SetGlobalLanguage(TranslateToLanguageID);
            TranslatedProfileID := COPYSTR(TeamMemberTxt,1,MAXSTRLEN(TranslatedProfileID));
          END;
      END;
      WindowsLanguage.GET(TempLanguage); // Other profiles will match same language
    END;

    [External]
    PROCEDURE TranslateProfileID@10(ProfileID@1001 : Code[30];VAR WindowsLanguage@1002 : Record 2000000045;TranslateToLanguageID@1003 : Integer) TranslatedProfileID : Code[30];
    VAR
      CurrentLanguage@1000 : Integer;
      TempLanguage@1004 : Integer;
      ProfileIDTxt@1005 : Text;
    BEGIN
      CurrentLanguage := GLOBALLANGUAGE;

      REPEAT
        TempLanguage := WindowsLanguage."Language ID";
        SetGlobalLanguage(TempLanguage);
        CASE ProfileID OF
          UPPERCASE(AccountingManagerProfileTxt):
            ProfileIDTxt := AccountingManagerProfileTxt;
          UPPERCASE(APCoordinatorProfileTxt):
            ProfileIDTxt := APCoordinatorProfileTxt;
          UPPERCASE(ARAdministratorProfileTxt):
            ProfileIDTxt := ARAdministratorProfileTxt;
          UPPERCASE(BookkeeperProfileTxt):
            ProfileIDTxt := BookkeeperProfileTxt;
          UPPERCASE(SalesManagerProfileTxt):
            ProfileIDTxt := SalesManagerProfileTxt;
          UPPERCASE(OrderProcessorProfileTxt):
            ProfileIDTxt := OrderProcessorProfileTxt;
          UPPERCASE(PurchasingAgentProfileTxt):
            ProfileIDTxt := PurchasingAgentProfileTxt;
          UPPERCASE(ShippingandReceivingWMSProfileTxt):
            ProfileIDTxt := ShippingandReceivingWMSProfileTxt;
          UPPERCASE(ShippingandReceivingProfileTxt):
            ProfileIDTxt := ShippingandReceivingProfileTxt;
          UPPERCASE(WarehouseWorkerWMSProfileTxt):
            ProfileIDTxt := WarehouseWorkerWMSProfileTxt;
          UPPERCASE(ProductionPlannerProfileTxt):
            ProfileIDTxt := ProductionPlannerProfileTxt;
          UPPERCASE(ShopSupervisorProfileTxt):
            ProfileIDTxt := ShopSupervisorProfileTxt;
          UPPERCASE(ShopSupervisorFoundationProfileTxt):
            ProfileIDTxt := ShopSupervisorFoundationProfileTxt;
          UPPERCASE(MachineOperatorProfileTxt):
            ProfileIDTxt := MachineOperatorProfileTxt;
          UPPERCASE(ResourceManagerProfileTxt):
            ProfileIDTxt := ResourceManagerProfileTxt;
          UPPERCASE(ProjectManagerProfileTxt):
            ProfileIDTxt := ProjectManagerProfileTxt;
          UPPERCASE(DispatcherProfileTxt):
            ProfileIDTxt := DispatcherProfileTxt;
          UPPERCASE(OutboundTechnicianProfileTxt):
            ProfileIDTxt := OutboundTechnicianProfileTxt;
          UPPERCASE(ITManagerProfileTxt):
            ProfileIDTxt := ITManagerProfileTxt;
          UPPERCASE(PresidentProfileTxt):
            ProfileIDTxt := PresidentProfileTxt;
          UPPERCASE(PresidentSBProfileTxt):
            ProfileIDTxt := PresidentSBProfileTxt;
          UPPERCASE(RapidStartServicesProfileTxt):
            ProfileIDTxt := RapidStartServicesProfileTxt;
          UPPERCASE(BusinessManagerIDTxt):
            ProfileIDTxt := BusinessManagerIDTxt;
          UPPERCASE(AccountingServicesTxt):
            ProfileIDTxt := AccountingServicesTxt;
          UPPERCASE(SecurityAdministratorTxt):
            ProfileIDTxt := SecurityAdministratorTxt;
          UPPERCASE(TeamMemberTxt):
            ProfileIDTxt := TeamMemberTxt;
        END;
        OnTranslateProfileID(ProfileID,ProfileIDTxt);
        TranslatedProfileID :=
          SetTranslationParameters(WindowsLanguage,ProfileIDTxt,TempLanguage,TranslateToLanguageID);
      UNTIL (WindowsLanguage.NEXT = 0) OR (TranslatedProfileID <> '');

      SetGlobalLanguage(CurrentLanguage);
      IF TranslatedProfileID = '' THEN
        TranslatedProfileID := ProfileID;
    END;

    LOCAL PROCEDURE SetGlobalLanguage@47(LanguageID@1000 : Integer);
    BEGIN
      IF GLOBALLANGUAGE <> LanguageID THEN
        GLOBALLANGUAGE := LanguageID;
    END;

    LOCAL PROCEDURE CopyResourcesToServer@36(ResourcesZipFileOrFolder@1001 : Text) ServerFolder : Text;
    VAR
      FileManagement@1000 : Codeunit 419;
      ServerFile@1002 : Text;
    BEGIN
      IF FileManagement.IsWebClient THEN
        ServerFile := FileManagement.UploadFile(SelectTranslatedResxFileTxt,'*.zip');

      IF FileManagement.CanRunDotNetOnClient THEN BEGIN
        IF FileManagement.ClientDirectoryExists(ResourcesZipFileOrFolder) THEN BEGIN
          ServerFolder := FileManagement.UploadClientDirectorySilent(ResourcesZipFileOrFolder,'*.resx',TRUE);
          IF ServerFolder = '' THEN
            InfoForCompletionMessage.Add(NoImportResourcesFoundMsg);
          EXIT;
        END;
        IF ResourcesZipFileOrFolder = '' THEN
          ServerFile := FileManagement.UploadFile(SelectTranslatedResxFileTxt,'*.zip');
        IF FileManagement.GetExtension(ResourcesZipFileOrFolder) = 'zip' THEN
          ServerFile := FileManagement.UploadFileToServer(ResourcesZipFileOrFolder);
      END;

      IF ServerFile <> '' THEN BEGIN
        ServerFolder := FileManagement.ServerCreateTempSubDirectory;
        FileManagement.ExtractZipFile(ServerFile,ServerFolder);
        FileManagement.DeleteServerFile(ServerFile);
      END;
    END;

    LOCAL PROCEDURE ExportResourceFiles@18(ResourceFolder@1016 : Text;ProfileID@1001 : Code[30]);
    VAR
      ProfileResourceImportExport@1015 : Record 9170;
      WindowsLanguage@1018 : Record 2000000045;
      FileManagement@1002 : Codeunit 419;
      CurrentDir@1006 : Text;
      ZipArchiveName@1010 : Text;
      ZipFileEntry@1005 : Text;
      ServerFileName@1004 : Text;
      i@1007 : Integer;
      CurrentLanguage@1014 : Text;
      CultureName@1003 : Text;
      CanRunDotNetOnClient@1008 : Boolean;
    BEGIN
      CanRunDotNetOnClient := FileManagement.CanRunDotNetOnClient;

      IF NOT CanRunDotNetOnClient THEN
        ZipArchiveName := FileManagement.CreateZipArchiveObject;

      FOR i := 0 TO DetectedLanguages.Count - 1 DO BEGIN
        CurrentLanguage := DetectedLanguages.Item(i);
        ProfileResourceImportExport.SETRANGE("Profile ID",ProfileID);
        ProfileResourceImportExport.SETRANGE("Abbreviated Language Name",CurrentLanguage);

        IF ProfileResourceImportExport.FINDFIRST THEN BEGIN
          WindowsLanguage.SETRANGE("Abbreviated Name",CurrentLanguage);
          WindowsLanguage.FINDFIRST;
          CultureName := CultureInfo.GetCultureInfo(WindowsLanguage."Language ID").Name;
          CurrentDir := FileManagement.CombinePath(ResourceFolder,CultureName);

          ServerFileName := FileManagement.ServerTempFileName('.Resx');
          AppendToResxFile(ProfileResourceImportExport,ProfileID,ServerFileName);

          IF NOT CanRunDotNetOnClient THEN BEGIN
            ZipFileEntry := STRSUBSTNO(ZipFileEntryTxt,CultureName,ProfileID);
            FileManagement.AddFileToZipArchive(ServerFileName,ZipFileEntry);
          END ELSE BEGIN
            FileManagement.CreateClientDirectory(CurrentDir);
            FileManagement.DownloadToFile(ServerFileName,FileManagement.CombinePath(CurrentDir,ProfileID + '.Resx'));
          END;
          FileManagement.DeleteServerFile(ServerFileName);
        END ELSE
          InfoForCompletionMessage.Add(ExportNoEntriesFoundMsg);
      END;

      IF NOT CanRunDotNetOnClient THEN BEGIN
        FileManagement.CloseZipArchive;
        FileManagement.DownloadHandler(ZipArchiveName,'','','',STRSUBSTNO(ZipFileFormatNameTxt,ZipFileNameTxt));
      END;
    END;

    LOCAL PROCEDURE AppendToResxFile@5(VAR ProfileResourceImportExport@1002 : Record 9170;ProfileID@1004 : Code[30];ServerFileName@1003 : Text);
    VAR
      ResxWriter@1001 : DotNet "'System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Resources.ResXResourceWriter";
      ResxDataNode@1000 : DotNet "'System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Resources.ResXDataNode";
      Key@1006 : Text;
      Comment@1005 : Text;
    BEGIN
      ResxWriter := ResxWriter.ResXResourceWriter(ServerFileName);
      ResxDataNode := ResxDataNode.ResXDataNode(ProfileIDTxt,ProfileID);
      ResxDataNode.Comment := ProfileIDCommentTxt;
      ResxWriter.AddResource(ResxDataNode);
      ResxDataNode := ResxDataNode.ResXDataNode(ProfileDescriptionTxt,CurrentProfileDescription);
      ResxDataNode.Comment := ProfileDescriptionCommentTxt;
      ResxWriter.AddResource(ResxDataNode);

      REPEAT
        Key := STRSUBSTNO(ExportResxFormatTxt,
            ProfileResourceImportExport."Page ID",
            ProfileResourceImportExport."Personalization ID",
            ProfileResourceImportExport."Control GUID");

        Comment := STRSUBSTNO(ExportResxCommentFormatTxt,
            ProfileResourceImportExport."Page ID",
            ProfileResourceImportExport."Personalization ID",
            ProfileResourceImportExport."Control GUID");

        ResxDataNode := ResxDataNode.ResXDataNode(Key,ProfileResourceImportExport.Value);
        ResxDataNode.Comment := Comment;
        ResxWriter.AddResource(ResxDataNode);
      UNTIL ProfileResourceImportExport.NEXT = 0;

      ResxWriter.Close;
    END;

    LOCAL PROCEDURE LoadProfileMetadata@101(ProfileMetadata@1000 : Record 2000000074;VAR ObjectDOM@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      InStr@1004 : InStream;
    BEGIN
      ProfileMetadata.CALCFIELDS("Page Metadata Delta");
      ProfileMetadata."Page Metadata Delta".CREATEINSTREAM(InStr);
      XMLDOMManagement.LoadXMLDocumentFromInStream(InStr,ObjectDOM);
    END;

    LOCAL PROCEDURE ParseConfiguration@113(VAR ProfileConfigurationDOM@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      ChangeNodeList@1004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      ChangeNode@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DeltaNode@1006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ChangeType@1001 : Text;
      i@1002 : Integer;
    BEGIN
      DeltaNode := ProfileConfigurationDOM.DocumentElement;
      ChangeNodeList := DeltaNode.FirstChild.ChildNodes;

      FOR i := 0 TO ChangeNodeList.Count - 1 DO BEGIN
        ChangeNode := ChangeNodeList.ItemOf(i);
        ChangeType := ChangeNode.Name;
        CASE LOWERCASE(ChangeType) OF
          'add':
            ParseAdd(ProfileConfigurationDOM,ChangeNode);
          'update':
            ParseUpdate(ChangeNode);
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateProfileConfigurationRecord@28(VAR ProfileMetadata@1000 : Record 2000000074;ProfileConfigurationDOM@1005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      OutStr@1004 : OutStream;
    BEGIN
      IF NOT (Mode IN [Mode::Import,Mode::Remove]) THEN
        EXIT;
      ProfileMetadata."Page Metadata Delta".CREATEOUTSTREAM(OutStr);
      ProfileConfigurationDOM.Save(OutStr);
      ProfileMetadata.MODIFY;
    END;

    LOCAL PROCEDURE ParseAdd@65(XmlDocument@1006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR XmlNode@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      NodeNode@1005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      XMLDOMManagement.FindNode(XmlNode,NodeNodeNameTxt,NodeNode);
      ParseAddNode(XmlDocument,NodeNode);
    END;

    LOCAL PROCEDURE ParseAddNode@6(XmlDocument@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR XmlNode@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      NodeNode@1009 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      NodesNode@1006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ControlGuid@1000 : Text;
      i@1005 : Integer;
    BEGIN
      ControlGuid := XMLDOMManagement.GetAttributeValue(XmlNode,idLowerAttributeNameTxt);
      ProcessAddNodes(XmlNode,COPYSTR(ControlGuid,1,40));

      NodesNode := XmlNode.SelectSingleNode(NodesNodeNameTxt);
      FOR i := 0 TO NodesNode.ChildNodes.Count - 1 DO BEGIN
        NodeNode := NodesNode.ChildNodes.ItemOf(i);
        ParseAddNode(XmlDocument,NodeNode);
      END;
    END;

    LOCAL PROCEDURE ParseUpdate@128(VAR XmlNode@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      CaptionMLAttribute@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlAttribute";
      ControlGuid@1004 : Text;
      CaptionMLValue@1003 : Text;
    BEGIN
      IF XMLDOMManagement.GetAttributeValue(XmlNode,NameAttributeNameLowerTxt) <> CaptionMLAttributeNameTxt THEN
        EXIT;

      IF NOT XMLDOMManagement.FindAttribute(XmlNode,CaptionMLAttribute,ValueAttributeNameTxt) THEN
        EXIT;

      ControlGuid := XMLDOMManagement.GetAttributeValue(XmlNode,idLowerAttributeNameTxt);

      CaptionMLValue := CaptionMLAttribute.Value;
      CASE Mode OF
        Mode::Export:
          BEGIN
            ExtractCaptions(COPYSTR(ControlGuid,1,40),CaptionMLValue);
            EXIT;
          END;
        Mode::Import:
          CaptionMLValue := AppendCaptions(COPYSTR(ControlGuid,1,40),CaptionMLValue);
        Mode::Remove:
          CaptionMLValue := RemoveCaptions(CaptionMLValue);
      END;

      CaptionMLAttribute.Value(CaptionMLValue);
    END;

    LOCAL PROCEDURE ProcessAddNodes@14(NodeNode@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";ControlGuid@1014 : Code[40]);
    VAR
      AttributesNode@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      AttributeNode@1004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      CaptionMLAttribute@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlAttribute";
      Attribute@1006 : Text;
      CaptionMLValue@1013 : Text;
      i@1003 : Integer;
    BEGIN
      IF XMLDOMManagement.FindNode(NodeNode,AttributesNodeNameTxt,AttributesNode) THEN
        FOR i := 0 TO AttributesNode.ChildNodes.Count - 1 DO BEGIN
          AttributeNode := AttributesNode.ChildNodes.ItemOf(i);
          Attribute := XMLDOMManagement.GetAttributeValue(AttributeNode,NameAttributeNameLowerTxt);
          IF Attribute = CaptionMLAttributeNameTxt THEN BEGIN
            IF NOT XMLDOMManagement.FindAttribute(AttributeNode,CaptionMLAttribute,ValueAttributeNameTxt) THEN
              EXIT;
            CaptionMLValue := CaptionMLAttribute.Value;
            IF CaptionMLValue <> '' THEN BEGIN
              CASE Mode OF
                Mode::Export:
                  BEGIN
                    ExtractCaptions(ControlGuid,CaptionMLValue);
                    EXIT;
                  END;
                Mode::Import:
                  CaptionMLValue := AppendCaptions(ControlGuid,CaptionMLValue);
                Mode::Remove:
                  CaptionMLValue := RemoveCaptions(CaptionMLValue);
              END;
              CaptionMLAttribute.Value(CaptionMLValue);
              EXIT;
            END;
          END;
        END;
    END;

    LOCAL PROCEDURE AppendCaptions@27(ControlGuid@1000 : Code[40];OriginalCaptionML@1004 : Text) : Text;
    VAR
      ProfileResourceImportExport@1001 : Record 9170;
      Pattern@1006 : Text;
      Translation@1008 : Text;
      Language@1009 : Text;
      Position@1007 : Integer;
      i@1005 : Integer;
    BEGIN
      FOR i := 0 TO DetectedLanguages.Count - 1 DO BEGIN
        Language := DetectedLanguages.Item(i);
        IF FindProfileLanguageResourcesImp(ProfileResourceImportExport,ControlGuid,Language) THEN BEGIN
          Translation := ProfileResourceImportExport.Value;
          Position := STRPOS(OriginalCaptionML,STRSUBSTNO(LanguagePatternTxt,Language));

          IF Position > 0 THEN BEGIN
            Pattern := STRSUBSTNO(ReplaceCaptionMLPatternTxt,Language);
            OriginalCaptionML := RegEx.Replace(OriginalCaptionML,Pattern,STRSUBSTNO(RegexAppendCaptionMLTxt,Language,Translation));
          END ELSE
            OriginalCaptionML += STRSUBSTNO(';%1=%2',Language,Translation);
        END;
      END;

      EXIT(OriginalCaptionML);
    END;

    LOCAL PROCEDURE RemoveCaptions@8(OriginalCaptionML@1004 : Text) : Text;
    VAR
      Pattern@1006 : Text;
      Language@1009 : Text;
      Position@1007 : Integer;
    BEGIN
      Language := DetectedLanguages.Item(0);

      Position := STRPOS(OriginalCaptionML,STRSUBSTNO(LanguagePatternTxt,Language));
      IF Position > 0 THEN BEGIN
        Pattern := STRSUBSTNO(RemoveCaptionMLPatternTxt,Language);
        OriginalCaptionML := RegEx.Replace(OriginalCaptionML,Pattern,'');
      END;

      EXIT(OriginalCaptionML);
    END;

    LOCAL PROCEDURE ExtractCaptions@11(ControlGuid@1000 : Code[40];OriginalCaptionML@1004 : Text);
    VAR
      ProfileResourceImportExport@1001 : Record 9170;
      Matches@1002 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.MatchCollection";
      AbbreviatedLanguageName@1006 : Text[3];
      Caption@1007 : Text[250];
      i@1005 : Integer;
    BEGIN
      Matches := RegEx.Matches(OriginalCaptionML,ExtractCaptionMLPatternTxt);

      FOR i := 0 TO Matches.Count - 1 DO BEGIN
        AbbreviatedLanguageName := Matches.Item(i).Value;
        AppendDetectedLanguage(AbbreviatedLanguageName);
        i += 1;
        Caption := Matches.Item(i).Value;

        ProfileResourceImportExport.InsertRec(
          CurrentProfileID,CurrentPageID,CurrentPersonalizationID,ControlGuid,AbbreviatedLanguageName,Caption);
      END;
    END;

    LOCAL PROCEDURE FindProfileLanguageResourcesImp@16(VAR ProfileResourceImportExport@1001 : Record 9170;ControlGuid@1002 : Code[40];language@1000 : Text) : Boolean;
    BEGIN
      ProfileResourceImportExport.SETRANGE("Abbreviated Language Name",language);
      ProfileResourceImportExport.SETRANGE("Profile ID",CurrentProfileID);
      ProfileResourceImportExport.SETRANGE("Page ID",CurrentPageID);
      ProfileResourceImportExport.SETRANGE("Personalization ID",CurrentPersonalizationID);
      ProfileResourceImportExport.SETRANGE("Control GUID",ControlGuid);
      EXIT(ProfileResourceImportExport.FINDFIRST);
    END;

    LOCAL PROCEDURE ClearResourcesForProfile@17(ProfileID@1000 : Code[30]);
    VAR
      ProfileResourceImportExport@1001 : Record 9170;
    BEGIN
      ProfileResourceImportExport.SETRANGE("Profile ID",ProfileID);
      ProfileResourceImportExport.DELETEALL;
    END;

    LOCAL PROCEDURE CountResourcesForProfile@46(ProfileID@1000 : Code[30]) : Integer;
    VAR
      ProfileResourceImportExport@1001 : Record 9170;
    BEGIN
      ProfileResourceImportExport.SETRANGE("Profile ID",ProfileID);
      EXIT(ProfileResourceImportExport.COUNT);
    END;

    LOCAL PROCEDURE InitializeDotnetVariables@59();
    BEGIN
      DetectedLanguages := DetectedLanguages.StringCollection;
      InfoForCompletionMessage := InfoForCompletionMessage.StringCollection;
      InstalledLanguages := InstalledLanguages.StringCollection;
    END;

    LOCAL PROCEDURE AppendDetectedLanguage@33(AbbreviatedLanguageName@1000 : Text[3]);
    BEGIN
      IF NOT DetectedLanguages.Contains(AbbreviatedLanguageName) THEN
        DetectedLanguages.Add(AbbreviatedLanguageName);
    END;

    [External]
    PROCEDURE GetCompletionMessage@30(ShowAsMessage@1001 : Boolean) CompleteMessage : Text;
    VAR
      AdditionalInfo@1000 : Text;
    BEGIN
      AdditionalInfo := GetAdditionalInfo;

      CASE Mode OF
        Mode::Export:
          BEGIN
            IF AdditionalInfo <> '' THEN
              CompleteMessage := AdditionalInfo
            ELSE
              CompleteMessage := ExportCompleteMsg;
          END;
        Mode::Import:
          BEGIN
            IF AdditionalInfo <> '' THEN BEGIN
              AdditionalInfo := STRSUBSTNO(ProfileResxFileNotFoundMsg,AdditionalInfo);
              CompleteMessage := STRSUBSTNO(CompletionMessageMsg,ImportCompleteMsg,AdditionalInfo);
            END ELSE
              CompleteMessage := ImportCompleteMsg;
          END;
        Mode::Remove:
          BEGIN
            IF AdditionalInfo <> '' THEN
              CompleteMessage := AdditionalInfo
            ELSE
              CompleteMessage := RemoveCompleteMsg;
          END;
        ELSE
          CompleteMessage := AdditionalInfo;
      END;

      IF ShowAsMessage AND (CompleteMessage <> '') THEN
        MESSAGE(CompleteMessage);
    END;

    LOCAL PROCEDURE GetAdditionalInfo@42() ErrorMessage : Text;
    VAR
      i@1000 : Integer;
    BEGIN
      IF InfoForCompletionMessage.Count > 0 THEN BEGIN
        FOR i := 0 TO InfoForCompletionMessage.Count - 1 DO
          ErrorMessage += InfoForCompletionMessage.Item(i) + '\';
        ErrorMessage := DELCHR(ErrorMessage,'>','\');
      END;
    END;

    [External]
    PROCEDURE ValidateTimeZone@44(VAR TimeZoneText@1000 : Text);
    VAR
      TimeZone@1001 : Record 2000000164;
    BEGIN
      TimeZone.GET(FindTimeZoneNo(TimeZoneText));
      TimeZoneText := TimeZone.ID;
    END;

    [External]
    PROCEDURE LookupTimeZone@48(VAR TimeZoneText@1000 : Text) : Boolean;
    VAR
      TimeZone@1001 : Record 2000000164;
    BEGIN
      TimeZone."No." := FindTimeZoneNo(TimeZoneText);
      IF PAGE.RUNMODAL(PAGE::"Time Zones",TimeZone) = ACTION::LookupOK THEN BEGIN
        TimeZoneText := TimeZone.ID;
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE FindTimeZoneNo@49(TimeZoneText@1000 : Text) : Integer;
    VAR
      TimeZone@1001 : Record 2000000164;
    BEGIN
      TimeZone.SETRANGE(ID,TimeZoneText);
      IF NOT TimeZone.FINDFIRST THEN BEGIN
        TimeZone.SETFILTER(ID,'''@*' + TimeZoneText + '*''');
        TimeZone.FIND('=<>');
      END;
      EXIT(TimeZone."No.");
    END;

    [External]
    PROCEDURE CopyProfilePageMetadata@63(OldProfile@1000 : Record 2000000178;NewProfile@1001 : Record 2000000178);
    VAR
      ProfilePageMetadata@1002 : Record 2000000186;
      NewProfilePageMetadata@1003 : Record 2000000186;
      TenantProfilePageMetadata@1004 : Record 2000000187;
      NewTenantProfilePageMetadata@1005 : Record 2000000187;
    BEGIN
      IF OldProfile.Scope = OldProfile.Scope::System THEN BEGIN
        ProfilePageMetadata.SETRANGE("Profile ID",OldProfile."Profile ID");
        IF ProfilePageMetadata.FINDSET THEN
          IF NewProfile.Scope = NewProfile.Scope::System THEN
            REPEAT
              ProfilePageMetadata.CALCFIELDS("Page Metadata","Page AL");

              NewProfilePageMetadata.INIT;
              NewProfilePageMetadata.COPY(ProfilePageMetadata);
              NewProfilePageMetadata."Profile ID" := NewProfile."Profile ID";
              NewProfilePageMetadata.INSERT;
            UNTIL ProfilePageMetadata.NEXT = 0
          ELSE
            REPEAT
              TenantProfilePageMetadata.CALCFIELDS("Page Metadata","Page AL");

              NewTenantProfilePageMetadata.INIT;
              NewTenantProfilePageMetadata."Profile ID" := NewProfile."Profile ID";
              NewTenantProfilePageMetadata."Page ID" := ProfilePageMetadata."Page ID";
              NewTenantProfilePageMetadata."Page AL" := ProfilePageMetadata."Page AL";
              NewTenantProfilePageMetadata."Page Metadata" := ProfilePageMetadata."Page Metadata";
              NewTenantProfilePageMetadata.INSERT;
            UNTIL ProfilePageMetadata.NEXT = 0;
      END;

      IF (OldProfile.Scope = OldProfile.Scope::Tenant) AND
         (NewProfile.Scope = NewProfile.Scope::Tenant)
      THEN BEGIN
        TenantProfilePageMetadata.SETFILTER("Profile ID",OldProfile."Profile ID");
        TenantProfilePageMetadata.SETFILTER("App ID",OldProfile."App ID");
        IF TenantProfilePageMetadata.FINDSET THEN
          REPEAT
            TenantProfilePageMetadata.CALCFIELDS("Page Metadata","Page AL");

            NewTenantProfilePageMetadata.INIT;
            NewTenantProfilePageMetadata.COPY(TenantProfilePageMetadata);
            NewTenantProfilePageMetadata."Profile ID" := NewProfile."Profile ID";
            NewTenantProfilePageMetadata.INSERT;
          UNTIL TenantProfilePageMetadata.NEXT = 0;
      END;
    END;

    [External]
    PROCEDURE HideSandboxProfiles@54(VAR AllProfile@1000 : Record 2000000178);
    VAR
      PermissionManager@1001 : Codeunit 9002;
    BEGIN
      IF PermissionManager.SoftwareAsAService AND
         NOT PermissionManager.IsSandboxConfiguration
      THEN BEGIN
        AllProfile.FILTERGROUP(2);
        AllProfile.SETFILTER("Role Center ID",GetBuiltInSaaSProfilesFilter + '|10000..');
        AllProfile.FILTERGROUP(0);
      END;
    END;

    [External]
    PROCEDURE GetBuiltInSaaSProfilesFilter@55() RoleCenterFilter : Text;
    VAR
      PageNos@1000 : ARRAY [12] OF Integer;
      i@1001 : Integer;
    BEGIN
      PageNos[1] := PAGE::"Order Processor Role Center";
      PageNos[2] := PAGE::"Job Project Manager RC";
      PageNos[3] := PAGE::"Business Manager Role Center";
      PageNos[4] := PAGE::"Security Admin Role Center";
      PageNos[5] := PAGE::"Sales & Relationship Mgr. RC";
      PageNos[6] := PAGE::"Accountant Role Center";
      PageNos[7] := PAGE::"Team Member Role Center";
      PageNos[8] := PAGE::"Service Dispatcher Role Center";
      PageNos[9] := PAGE::"Production Planner Role Center";
      PageNos[10] := PAGE::"Whse. WMS Role Center";
      PageNos[11] := PAGE::"Whse. Basic Role Center";
      PageNos[12] := PAGE::"Whse. Worker WMS Role Center";

      FOR i := 1 TO ARRAYLEN(PageNos) DO
        RoleCenterFilter := RoleCenterFilter + '|' + FORMAT(PageNos[i]);
      RoleCenterFilter := DELSTR(RoleCenterFilter,1,1);
      OnGetBuiltInRoleCenterFilter(RoleCenterFilter);
    END;

    [External]
    PROCEDURE GetSettingsPageID@64() : Integer;
    BEGIN
      EXIT(PAGE::"My Settings");
    END;

    [External]
    PROCEDURE RaiseOnOpenRoleCenterEvent@72();
    BEGIN
      OnRoleCenterOpen;
    END;

    [EventSubscriber(Codeunit,2000000006,GetDefaultRoleCenterID)]
    LOCAL PROCEDURE GetDefaultRoleCenterID@60(VAR ID@1000 : Integer);
    BEGIN
      ID := DefaultRoleCenterID;
    END;

    [EventSubscriber(Codeunit,2000000006,OpenSettings)]
    LOCAL PROCEDURE OpenSettings@62();
    VAR
      SettingsPageID@1001 : Integer;
      Handled@1000 : Boolean;
    BEGIN
      SettingsPageID := GetSettingsPageID;
      OnBeforeOpenSettings(SettingsPageID,Handled);
      IF NOT Handled THEN
        PAGE.RUN(SettingsPageID);
    END;

    [Integration]
    LOCAL PROCEDURE OnInitializeProfiles@56();
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnProfileChanged@53(PrevProfileID@1001 : Code[30];ProfileID@1000 : Code[30]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCopyProfile@57(VAR AllProfile@1000 : Record 2000000178;NewAllProfile@1001 : Record 2000000178);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterGetDefaultRoleCenter@52(VAR DefaultRoleCenterID@1000 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnRoleCenterOpen@58();
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeOpenSettings@66(VAR SettingsPageID@1001 : Integer;VAR Handled@1000 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnGetBuiltInRoleCenterFilter@70(VAR RoleCenterFilter@1000 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnTranslateProfileID@83(ProfileID@1000 : Code[30];VAR ProfileIDTxt@1001 : Text);
    BEGIN
    END;

    PROCEDURE GetSalesAndRelationshipMgrProfile@78() : Code[30];
    BEGIN
      EXIT(SalesRelationManagerIDTxt);
    END;

    PROCEDURE GetBusinessManagerProfile@73() : Code[30];
    BEGIN
      EXIT(BusinessManagerIDTxt);
    END;

    PROCEDURE GetAccountantProfile@74() : Code[30];
    BEGIN
      EXIT(AccountantTxt);
    END;

    PROCEDURE GetProjectManagerProfile@75() : Code[30];
    BEGIN
      EXIT(ProjectManagerProfileTxt);
    END;

    PROCEDURE GetOrderProcessorProfile@76() : Code[30];
    BEGIN
      EXIT(OrderProcessorProfileTxt);
    END;

    PROCEDURE GetProductionPlannerProfile@77() : Code[30];
    BEGIN
      EXIT(ProductionPlannerProfileTxt);
    END;

    [Internal]
    PROCEDURE ChangeSystemProfileDefaultRoleCenter@79(Profile@1000 : Record 2000000178);
    VAR
      SystemProfile@1001 : Record 2000000072;
    BEGIN
      IF Profile.Scope = Profile.Scope::System THEN BEGIN
        SystemProfile.SETRANGE("Default Role Center",TRUE);
        IF SystemProfile.FINDSET THEN
          REPEAT
            IF NOT (SystemProfile."Profile ID" = Profile."Profile ID") THEN BEGIN
              SystemProfile."Default Role Center" := FALSE;
              SystemProfile.MODIFY;
            END;
          UNTIL SystemProfile.NEXT = 0;
      END;
    END;

    [External]
    PROCEDURE ChangeTenantProfileDefaultRoleCenter@80(Profile@1001 : Record 2000000178);
    VAR
      TenantProfile@1000 : Record 2000000177;
    BEGIN
      TenantProfile.SETRANGE("Default Role Center",TRUE);
      IF TenantProfile.FINDSET THEN
        REPEAT
          IF NOT ((TenantProfile."App ID" = Profile."App ID") AND
                  (TenantProfile."Profile ID" = Profile."Profile ID") AND
                  (Profile.Scope = Profile.Scope::Tenant))
          THEN BEGIN
            TenantProfile."Default Role Center" := FALSE;
            TenantProfile.MODIFY;
          END;
        UNTIL TenantProfile.NEXT = 0;
    END;

    PROCEDURE ChangePersonalizationForUserGroupMembers@81(UserGroupCode@1002 : Code[20];OldProfileID@1003 : Code[30];NewProfileID@1004 : Code[30]);
    VAR
      UserGroupMember@1001 : Record 9001;
      UserPersonalization@1000 : Record 2000000073;
    BEGIN
      UserGroupMember.SETRANGE("User Group Code",UserGroupCode);
      IF UserGroupMember.FINDSET THEN BEGIN
        REPEAT
          UserPersonalization.GET(UserGroupMember."User Security ID");
          IF (UserPersonalization."Profile ID" = OldProfileID) AND
             (NOT UserHasOtherUserGroupsSupportingProfile(UserGroupMember."User Security ID",OldProfileID,UserGroupCode))
          THEN BEGIN
            UserPersonalization.VALIDATE("Profile ID",NewProfileID);
            UserPersonalization.MODIFY(TRUE);
          END;
        UNTIL UserGroupMember.NEXT = 0
      END;
    END;

    LOCAL PROCEDURE UserHasOtherUserGroupsSupportingProfile@82(UserSecurityID@1001 : GUID;ProfileID@1002 : Code[30];UserGroupCode@1004 : Code[20]) : Boolean;
    VAR
      UserGroupMember@1000 : Record 9001;
      UserGroup@1003 : Record 9000;
    BEGIN
      UserGroupMember.SETRANGE("User Security ID",UserSecurityID);
      UserGroupMember.SETFILTER("User Group Code",'<>%1',UserGroupCode);
      IF UserGroupMember.FINDSET THEN BEGIN
        REPEAT
          IF UserGroup.GET(UserGroupMember."User Group Code") AND
             (UserGroup."Default Profile ID" = ProfileID)
          THEN
            EXIT(TRUE);
        UNTIL UserGroupMember.NEXT = 0;
      END;
      EXIT(FALSE);
    END;

    BEGIN
    END.
  }
}

