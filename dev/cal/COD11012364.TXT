OBJECT Codeunit 11012364 Operating System Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1100409000 : TextConst 'DEU=Funktion %1 kann nicht von einem Webservice angerufen werden.;ENU=Function %1 cannot be called by a web service.;NLD=Functie %1 kan niet aangeroepen worden door een webservice.;NOR=Funksjonen %1 kan ikke tilkalles via WebService.;SVE=Funktionen %1 kan inte anropas via WebService.';
      Text001@1100525000 : TextConst 'DEU=Unbekannter Name %1 in Funktion ClientEnviron.;ENU=Unknown name %1 in function ClientEnviron.;NLD=Onbekende naam %1 in functie ClientEnviron.';
      Text002@1100525001 : TextConst 'DEU=Farbwert kann nicht berechnet werden.;ENU=Color Value cannot be calculated.;NLD=Kleurwaarde kan niet berekend worden.;SVE=F„rgv„rde kan inte ber„knas.';
      Text003@1100529900 : TextConst 'DEU="Farbwert kann nicht berechnet werden.\\Wert = %1";ENU="Color Value cannot be calculated.\\Value = %1";NLD="Kleurwaarde kan niet berekend worden.\\Waarde = %1";SVE="F„rgv„rde kan inte ber„knas.\\V„rde = %1"';

    PROCEDURE ClientEnviron@1100525028(Name@1100525002 : Text[30]) : Text[1024];
    VAR
      Environment@1100525003 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Environment" RUNONCLIENT;
      SpecialFolder@1100525001 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Environment+SpecialFolder" RUNONCLIENT;
      FileManagement@1100528700 : Codeunit 419;
    BEGIN
      IF NOT FileManagement.IsWindowsClient AND
         (UPPERCASE(Name) = 'TEMP')
      THEN
        EXIT(FileManagement.ServerTempFolderName);

      CASE UPPERCASE(Name) OF
        'TEMP',
        'SYSTEMROOT',
        'WINDIR':
          EXIT(FORMAT(Environment.GetEnvironmentVariable(Name)));
        'DESKTOP':
          EXIT(FORMAT(Environment.GetFolderPath(SpecialFolder.Desktop)));
        'APPDATA':
          EXIT(FORMAT(Environment.GetFolderPath(SpecialFolder.ApplicationData)));
        ELSE
          ERROR(Text001, Name);
      END;
    END;

    PROCEDURE ClientShell@1210190011(ProgramFileAbsPathName@1100525500 : Text;Args@1100525000 : Text;RunModally@1100525501 : Boolean;UseShellExecute@1100528400 : Boolean) : Integer;
    VAR
      StdIn@1100525001 : Text;
      StdOut@1100525002 : Text;
      StdErr@1100525003 : Text;
    BEGIN
      EXIT(RunClientProcess(ProgramFileAbsPathName, Args, RunModally, UseShellExecute, StdIn, StdOut, StdErr));
    END;

    PROCEDURE RunClientProcess@1100528001(ProgramFileAbsPathName@1100525012 : Text;Args@1100525008 : Text;RunModally@1100525000 : Boolean;UseShellExecute@1100528400 : Boolean;StdIn@1100528003 : Text;VAR StdOut@1100528002 : Text;VAR StdErr@1100528001 : Text) : Integer;
    VAR
      SysDiagnosticsProcess@1100528005 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      SysDiagnosticsStartInfo@1100528004 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.ProcessStartInfo" RUNONCLIENT;
    BEGIN
      IF NOT GUIALLOWED THEN
        ERROR(Text000, 'RunClientProcess');

      StdOut := '';
      StdErr := '';
      SysDiagnosticsStartInfo := SysDiagnosticsStartInfo.ProcessStartInfo;
      SysDiagnosticsStartInfo.FileName(ProgramFileAbsPathName);
      SysDiagnosticsStartInfo.Arguments(Args);
      IF NOT UseShellExecute THEN BEGIN
        SysDiagnosticsStartInfo.UseShellExecute(FALSE);
        SysDiagnosticsStartInfo.RedirectStandardOutput(TRUE);
        SysDiagnosticsStartInfo.RedirectStandardError(TRUE);
        SysDiagnosticsStartInfo.RedirectStandardInput(TRUE);
        SysDiagnosticsStartInfo.CreateNoWindow(TRUE);
      END;

      SysDiagnosticsProcess := SysDiagnosticsProcess.Process;
      SysDiagnosticsProcess.StartInfo(SysDiagnosticsStartInfo);
      SysDiagnosticsProcess.Start;

      IF (StdIn <> '') AND NOT UseShellExecute THEN BEGIN
        SysDiagnosticsProcess.StandardInput.Write(StdIn);
        SysDiagnosticsProcess.StandardInput.Close;
      END;

      IF RunModally THEN BEGIN
        IF NOT UseShellExecute THEN BEGIN
          StdOut := SysDiagnosticsProcess.StandardOutput.ReadToEnd;
          StdErr := SysDiagnosticsProcess.StandardError.ReadToEnd;
        END;
        SysDiagnosticsProcess.WaitForExit;

        EXIT(SysDiagnosticsProcess.ExitCode);
      END
    END;

    PROCEDURE ServerShell@1100525001(ProgramFileAbsPathName@1100525500 : Text;Args@1100525000 : Text;RunModally@1100525501 : Boolean) : Integer;
    VAR
      SysDiagnosticsProcess@1100525002 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process";
      SysDiagnosticsStartInfo@1100525001 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.ProcessStartInfo";
    BEGIN
      // TODO kkleermaker: This function is only used by codeunit DataWarehouse - Projects v3 (11020215).
      // At this moment it is not clear yet if and how DataWarehouse will be used in NAV2013.
      // Maybe this function can be removed when this is clear.
      SysDiagnosticsStartInfo := SysDiagnosticsStartInfo.ProcessStartInfo;
      SysDiagnosticsStartInfo.FileName(ProgramFileAbsPathName);
      SysDiagnosticsStartInfo.Arguments(Args);
      SysDiagnosticsStartInfo.CreateNoWindow(TRUE);

      SysDiagnosticsProcess := SysDiagnosticsProcess.Process;
      SysDiagnosticsProcess.StartInfo(SysDiagnosticsStartInfo);
      SysDiagnosticsProcess.Start;

      IF RunModally THEN BEGIN
        SysDiagnosticsProcess.WaitForExit;
        EXIT(SysDiagnosticsProcess.ExitCode);
      END;
    END;

    PROCEDURE ExecuteBatchFileOnClient@1100525047(Command@1100525001 : Text[1024]) Result : Boolean;
    VAR
      BatchFile@1100525004 : File;
      FileMgt@1210190000 : Codeunit 419;
      ShortBatchFileName@1210190001 : Text[260];
      ServerBatchFileName@1100525005 : Text[260];
      ClientBatchFileName@1210190002 : Text[260];
      ResultCode@1100525003 : Integer;
    BEGIN
      // This function is meant to "catch" errors when an operation on the file system is done.
      // We tried to do this via "Codeunit.RUN", but that is not allowed in a transaction.
      // It is not possible to solve this problem with the FileSystemObject or DotNet variables,
      // because the file handling methods throw errors and do not return true or false.
      //
      // Example:
      // In the classic client you could use the following code to remove a file on the client
      // without throwing an error:
      //    IF ERASE(FileName) THEN;
      // In the RTC this is not possible, because ERASE can only be used to remove a file from the server.
      // Therefore we call method ExecuteBatchFileOnClient to remove a file from the server.

      IF NOT GUIALLOWED THEN
        ERROR(Text000, 'ExecuteBatchFileOnClient');

      ShortBatchFileName := STRSUBSTNO('tempbatchfile%1', CREATEGUID);
      ServerBatchFileName := STRSUBSTNO('%1%2', TEMPORARYPATH, ShortBatchFileName);

      BatchFile.TEXTMODE := TRUE;
      BatchFile.WRITEMODE := TRUE;
      BatchFile.CREATE(ServerBatchFileName);
      BatchFile.WRITE(Command);
      BatchFile.CLOSE;

      ClientBatchFileName :=
        STRSUBSTNO('%1%2.bat', FileMgt.ClientTempFolderName, ShortBatchFileName);

      FileMgt.DownloadToFile(ServerBatchFileName, ClientBatchFileName);

      ResultCode := ClientShell(STRSUBSTNO('"%1"', ClientBatchFileName),'',  TRUE, FALSE);
      IF ResultCode = 0 THEN
        Result := TRUE;

      IF NOT FILE.ERASE(ServerBatchFileName) THEN;
      FileMgt.DeleteClientFile4PS(ClientBatchFileName, TRUE);
    END;

    PROCEDURE ChooseColor@1100525000(Color@1100525001 : Integer) ResultColor : Integer;
    VAR
      ColorSelection@1100525002 : Page 11126598;
      BitConverter@1100528103 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.BitConverter";
      BitArray@1100528104 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      R@1100528105 : Integer;
      G@1100528106 : Integer;
      B@1100528107 : Integer;
      Pos1@1100525003 : Integer;
      Pos2@1100525004 : Integer;
      ColorRGB@1100525000 : Text[30];
    BEGIN
      BitArray := BitConverter.GetBytes(Color);
      R := BitArray.GetValue(2); //implicit conversion to int //T006234.c
      G := BitArray.GetValue(1);
      B := BitArray.GetValue(0); //T006234.c
      ColorRGB := STRSUBSTNO('rgb(%1, %2, %3)', R, G,B);

      ColorSelection.SetColorSelection(ColorRGB);
      IF ColorSelection.RUNMODAL <> ACTION::OK THEN
        ERROR('');
      ColorSelection.GetColorSelection(ColorRGB);

      ResultColor := Color;
      ColorRGB := LOWERCASE(ColorRGB);
      Pos1 := STRPOS(ColorRGB, '(');
      CASE COPYSTR(ColorRGB, 1, Pos1-1) OF
        'rgb','rgba': BEGIN
          ColorRGB := DELCHR(ColorRGB);
          Pos2 := STRPOS(ColorRGB, ')');
          IF (Pos1 * Pos2) > 0 THEN BEGIN
            IF EVALUATE(R, SELECTSTR(1, COPYSTR(ColorRGB, Pos1+1, Pos2-Pos1-1))) AND
               EVALUATE(G, SELECTSTR(2, COPYSTR(ColorRGB, Pos1+1, Pos2-Pos1-1))) AND
               EVALUATE(B, SELECTSTR(3, COPYSTR(ColorRGB, Pos1+1, Pos2-Pos1-1)))
            THEN
              ResultColor := (R * 256 * 256) + (G * 256) + B; //T006234.c
          END;
        END;
        ELSE
          MESSAGE(Text003, ColorRGB);
      END;
    END;

    PROCEDURE GetHexColor@1100525002(DecColor@1100525000 : Integer) HexColor : Code[6];
    VAR
      Convert@1100525002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
    BEGIN
      HexColor := Convert.ToString(DecColor, 16);
      IF (STRLEN(HexColor) > 6) THEN
        ERROR(Text002);
      WHILE (STRLEN(HexColor) < 6) DO BEGIN
        HexColor := '0' + HexColor;
      END;
      EXIT(HexColor);
    END;

    BEGIN
    END.
  }
}

