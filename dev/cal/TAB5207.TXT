OBJECT Table 5207 Employee Absence
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.01,4PS14.00;
  }
  PROPERTIES
  {
    DataCaptionFields=Employee No.;
    OnInsert=BEGIN
               EmployeeAbsence.SETCURRENTKEY("Entry No.");
               IF EmployeeAbsence.FINDLAST THEN
                 "Entry No." := EmployeeAbsence."Entry No." + 1
               ELSE BEGIN
                 CheckBaseUOM;
                 "Entry No." := 1;
               END;

               //**4PS.sn
               TestForPlannedWorkOrders;
               //**4PS.en
             END;

    OnModify=BEGIN
               //**4PS.sn
               TESTFIELD("Calendar Entry", FALSE);
               TestForPlannedWorkOrders;
               //**4PS.en
             END;

    OnDelete=VAR
               HumanResourceCommentLine@1100525000 : Record 5208;
               SDWorxCobraIDAssociation@1100528500 : Record 11012389;
             BEGIN
               //**4PS.sn
               HumanResourceCommentLine.SETRANGE("Table Name",HumanResourceCommentLine."Table Name"::"Employee Absence");
               HumanResourceCommentLine.SETRANGE("Table Line No.","Entry No.");
               IF NOT HumanResourceCommentLine.ISEMPTY THEN
                 HumanResourceCommentLine.DELETEALL(TRUE);
               SDWorxCobraIDAssociation.SETRANGE(Type, SDWorxCobraIDAssociation.Type::PersonLeave);
               SDWorxCobraIDAssociation.SETRANGE("NAV No.", FORMAT("Entry No."));
               IF SDWorxCobraIDAssociation.FINDFIRST THEN
                 SDWorxCobraIDAssociation.DELETE;
               //**4PS.en
             END;

    CaptionML=[ENU=Employee Absence;
               NOR=Ansattes frav‘r];
    LookupPageID=Page5211;
    DrillDownPageID=Page5211;
  }
  FIELDS
  {
    { 1   ;   ;Employee No.        ;Code20        ;TableRelation=Employee;
                                                   OnValidate=BEGIN
                                                                Employee.GET("Employee No.");
                                                                IF Employee."Privacy Blocked" THEN
                                                                  ERROR(BlockedErr);
                                                              END;

                                                   CaptionML=[ENU=Employee No.;
                                                              NOR=Ansattnr.;
                                                              SVE=Anst„llningsnr];
                                                   NotBlank=Yes }
    { 2   ;   ;Entry No.           ;Integer       ;CaptionML=[ENU=Entry No.;
                                                              NOR=L›penr.;
                                                              SVE=L”pnr] }
    { 3   ;   ;From Date           ;Date          ;OnValidate=BEGIN
                                                                //**4PS.sn
                                                                IF xRec."From Date" = "To Date" THEN
                                                                  "To Date" := "From Date";
                                                                CheckToDateExceedsFromDate;
                                                                UpdateHours;
                                                                //**4PS.e
                                                              END;

                                                   CaptionML=[ENU=From Date;
                                                              NOR=Fra dato;
                                                              SVE=Fr†n datum] }
    { 4   ;   ;To Date             ;Date          ;OnValidate=BEGIN
                                                                //**4PS.sn
                                                                CheckToDateExceedsFromDate;
                                                                UpdateHours;
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=[ENU=To Date;
                                                              NOR=Til dato;
                                                              SVE=Till datum] }
    { 5   ;   ;Cause of Absence Code;Code10       ;TableRelation="Cause of Absence";
                                                   OnValidate=BEGIN
                                                                CauseOfAbsence.GET("Cause of Absence Code");
                                                                CauseOfAbsence.TESTFIELD("Unit of Measure Code"); //**4PS.n
                                                                Description := CauseOfAbsence.Description;
                                                                VALIDATE("Unit of Measure Code",CauseOfAbsence."Unit of Measure Code");
                                                                VALIDATE("Cost Code", CauseOfAbsence."Cost Code"); //**4PS.n
                                                              END;

                                                   CaptionML=[ENU=Cause of Absence Code;
                                                              NOR=Kode frav‘rs†rsak;
                                                              SVE=Kod f”r Orsak till fr†nvaro] }
    { 6   ;   ;Description         ;Text100       ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 7   ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                "Quantity (Base)" := CalcBaseQty(Quantity);
                                                              END;

                                                   CaptionML=[ENU=Quantity;
                                                              NOR=Antall;
                                                              SVE=Antal];
                                                   DecimalPlaces=0:5;
                                                   Description=4PS: Not editable (use from and until time);
                                                   Editable=No }
    { 8   ;   ;Unit of Measure Code;Code10        ;TableRelation="Human Resource Unit of Measure";
                                                   OnValidate=BEGIN
                                                                HumanResUnitOfMeasure.GET("Unit of Measure Code");
                                                                "Qty. per Unit of Measure" := HumanResUnitOfMeasure."Qty. per Unit of Measure";
                                                                VALIDATE(Quantity);
                                                              END;

                                                   CaptionML=[ENU=Unit of Measure Code;
                                                              NOR=Enhetskode;
                                                              SVE=Enhetskod] }
    { 11  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Human Resource Comment Line" WHERE (Table Name=CONST(Employee Absence),
                                                                                                          Table Line No.=FIELD(Entry No.)));
                                                   CaptionML=[ENU=Comment;
                                                              NOR=Merknad;
                                                              SVE=Kommentar];
                                                   Editable=No }
    { 12  ;   ;Quantity (Base)     ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE(Quantity,"Quantity (Base)");
                                                              END;

                                                   CaptionML=[ENU=Quantity (Base);
                                                              NOR=Antall (lagerenhet);
                                                              SVE=Antal (bas)];
                                                   DecimalPlaces=0:5;
                                                   Description=4PS: Not editable;
                                                   Editable=No }
    { 13  ;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=[ENU=Qty. per Unit of Measure;
                                                              NOR=Antall per enhet;
                                                              SVE=Antal per enhet];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 11012001;;From Time          ;Time          ;OnValidate=BEGIN
                                                                //**4PS
                                                                CheckUntilTimeExceedsFromTime();
                                                                UpdateHours;
                                                              END;

                                                   CaptionML=[ENU=From Time;
                                                              SVE=Fr†n tid] }
    { 11012002;;Until Time         ;Time          ;OnValidate=BEGIN
                                                                //**4PS
                                                                CheckUntilTimeExceedsFromTime();
                                                                UpdateHours;
                                                              END;

                                                   CaptionML=[ENU=To Time;
                                                              SVE=Till tid] }
    { 11012003;;Calendar Entry     ;Boolean       ;CaptionML=[ENU=Calendar Entry;
                                                              SVE=Kalendertransaktion] }
    { 11012004;;Last Name          ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Last Name" WHERE (No.=FIELD(Employee No.)));
                                                   CaptionML=[ENU=Last Name;
                                                              SVE=Efternamn];
                                                   Editable=No }
    { 11012010;;Global Dimension 1 Code;Code20    ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Global Dimension 1 Code" WHERE (No.=FIELD(Employee No.)));
                                                   TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=[ENU=Global Dimension 1 Code;
                                                              SVE=Global dimension 1 kod];
                                                   Editable=No;
                                                   CaptionClass='1,1,1' }
    { 11012020;;Cost Code          ;Code10        ;TableRelation="Cost Code";
                                                   CaptionML=[ENU=Cost Code;
                                                              SVE=Kostnadskod] }
    { 11012025;;Hour/Day Code      ;Code20        ;CaptionML=ENU=Hour/Day Code;
                                                   Editable=No }
    { 11012030;;Employee Contract No.;Code20      ;CaptionML=ENU=Employee Contract No.;
                                                   Editable=No }
    { 11012040;;Service Contract No.;Code20       ;TableRelation=Service-Contract;
                                                   CaptionML=[ENU=Service Contract No.;
                                                              SVE=Servicekontraktnr];
                                                   Editable=No }
    { 11012050;;Contract Cluster   ;Code20        ;TableRelation="Service Cluster";
                                                   OnLookup=VAR
                                                              ServiceContract@1100528601 : Record 11012812;
                                                              ServiceCluster@1100528600 : Record 11071742;
                                                            BEGIN
                                                              IF "Service Contract No." <> '' THEN BEGIN
                                                                ServiceContract.GET("Service Contract No.");
                                                                IF ServiceContract."Use Contract Clusters" THEN BEGIN
                                                                  ServiceCluster.SETRANGE(Type, ServiceCluster.Type::Contract);
                                                                  ServiceCluster.SETRANGE("Type Code", "Service Contract No.");
                                                                  ServiceCluster.SETRANGE("Source Type", ServiceCluster."Source Type"::" ");
                                                                END ELSE BEGIN
                                                                  ServiceCluster.SETRANGE(Type, ServiceCluster.Type::" ");
                                                                  ServiceCluster.SETRANGE("Type Code", '');
                                                                  ServiceCluster.SETRANGE("Source Type", ServiceCluster."Source Type"::" ");
                                                                END;
                                                                PAGE.RUNMODAL(0, ServiceCluster);
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Contract Cluster;
                                                   Editable=No }
    { 11012055;;Contract Cluster Description;Text50;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Cluster".Description WHERE (Type=CONST(Contract),
                                                                                                           Type Code=FIELD(Service Contract No.),
                                                                                                           Code=FIELD(Contract Cluster)));
                                                   CaptionML=ENU=Contract Cluster Description;
                                                   Editable=No }
    { 11012060;;Contract Cluster Seqn.;Integer    ;TableRelation="Service Cluster Seq."."Seq. No.";
                                                   OnLookup=VAR
                                                              ServiceContract@1100528601 : Record 11012812;
                                                              ServiceClusterSeq@1100528600 : Record 11071966;
                                                            BEGIN
                                                              IF "Service Contract No." <> '' THEN BEGIN
                                                                ServiceContract.GET("Service Contract No.");
                                                                IF ServiceContract."Use Contract Clusters" THEN BEGIN
                                                                  ServiceClusterSeq.SETRANGE(Type, ServiceClusterSeq.Type::Contract);
                                                                  ServiceClusterSeq.SETRANGE("Type Code", "Service Contract No.");
                                                                  ServiceClusterSeq.SETRANGE("Source Type", ServiceClusterSeq."Source Type"::" ");
                                                                  ServiceClusterSeq.SETRANGE("Cluster Code", "Contract Cluster");
                                                                END ELSE BEGIN
                                                                  ServiceClusterSeq.SETRANGE(Type, ServiceClusterSeq.Type::" ");
                                                                  ServiceClusterSeq.SETRANGE("Type Code", '');
                                                                  ServiceClusterSeq.SETRANGE("Source Type", ServiceClusterSeq."Source Type"::" ");
                                                                  ServiceClusterSeq.SETRANGE("Cluster Code", "Contract Cluster");
                                                                END;
                                                                PAGE.RUNMODAL(0, ServiceClusterSeq);
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Contract Cluster Seqn.;
                                                   Editable=No }
    { 11012070;;Plannable          ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Cause of Absence".Plannable WHERE (Code=FIELD(Cause of Absence Code)));
                                                   CaptionML=ENU=Plannable;
                                                   Editable=No }
    { 11012080;;Full Name          ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Full Name" WHERE (No.=FIELD(Employee No.)));
                                                   CaptionML=[ENU=Full Name;
                                                              SVE=Fullst„ndigt namn];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
    {    ;Employee No.,From Date                  ;SumIndexFields=Quantity,Quantity (Base) }
    {    ;Employee No.,Cause of Absence Code,From Date;
                                                   SumIndexFields=Quantity,Quantity (Base) }
    {    ;Cause of Absence Code,From Date         ;SumIndexFields=Quantity,Quantity (Base) }
    {    ;From Date,To Date                        }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      CauseOfAbsence@1000 : Record 5206;
      Employee@1001 : Record 5200;
      EmployeeAbsence@1002 : Record 5207;
      HumanResUnitOfMeasure@1003 : Record 5220;
      BlockedErr@1004 : TextConst 'ENU=You cannot register absence because the employee is blocked due to privacy.;NOR=Du kan ikke registrere frav‘r fordi den ansatte er sperret p† grunn av personvern.';
      UOMMgt@1005 : Codeunit 5402;
      DateRec@1210190009 : Record 2000000007;
      Text11012007@1100525000 : TextConst 'ENU=%1 must exceed %2;SVE=%1 m†ste ”verskrida %2';
      Text11012008@1100525001 : TextConst 'ENU=%1 exceeds %2';
      DPA_Management@1100000999 : Codeunit 11012783;
      Text11012009@1100528600 : TextConst 'ENU=Notice: Employee %1 already planned for Work Order %2 between %3 %4 and %5 %6';

    LOCAL PROCEDURE CalcBaseQty@14(Qty@1000 : Decimal) : Decimal;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      EXIT(ROUND(Qty * "Qty. per Unit of Measure",UOMMgt.QtyRndPrecision));
    END;

    LOCAL PROCEDURE CheckBaseUOM@1();
    VAR
      HumanResourcesSetup@1000 : Record 5218;
    BEGIN
      HumanResourcesSetup.GET;
      HumanResourcesSetup.TESTFIELD("Base Unit of Measure");
    END;

    PROCEDURE CheckToDateExceedsFromDate@1100525001();
    BEGIN
      //**4PS
      CASE TRUE OF
        "From Date" = 0D: EXIT;
        "To Date" = 0D: EXIT;
        "From Date" <= "To Date": EXIT;
      END;
      ERROR(STRSUBSTNO(Text11012008, FIELDCAPTION("From Date"), FIELDCAPTION("To Date")));
    END;

    LOCAL PROCEDURE CheckUntilTimeExceedsFromTime@1100525000();
    BEGIN
      //**4PS
      CASE TRUE OF
        "From Date" = 0D: EXIT;
        "To Date" = 0D: EXIT;
        "From Time" = 0T: EXIT;
        "Until Time" = 0T: EXIT;
        "From Time" < "Until Time": EXIT;
        "From Date" < "To Date": EXIT;  //Call C005916 n
      END;
      ERROR(STRSUBSTNO(Text11012007, FIELDCAPTION("Until Time"), FIELDCAPTION("From Time")));
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(0);
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      //**4PS Generated Code - Do Not Change
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
      i@1100525004 : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      FOR i := 10 DOWNTO 0 DO BEGIN
        RecRef.FILTERGROUP(i);
        FILTERGROUP(i);
        SETVIEW(RecRef.GETVIEW(FALSE));
      END;

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
      FPSLicenseManagement@1100528500 : Codeunit 11229289;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT FPSLicenseManagement.LicenseAndReadPermissionForTable(DepartmentAuthorizObject) THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_FindRecWithDPAFilterAppld@1100000989();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN BEGIN
        FIND;
        EXIT;
      END;

      IF NOT DPA_Management.HasTableHardFilter(5207) THEN BEGIN
        FIND;
        EXIT;
      END;

      DPA_SetFilters('Table 5207');
      IF NOT FIND THEN
        DPA_Management.RaiseDPAErrorForTable(TABLECAPTION);
    END;

    PROCEDURE DPA_ChkDepartmentCodeAllowed@1100000990(IsHardFilter@1100526000 : Boolean);
    VAR
      DimensionManagement@1100526001 : Codeunit 408;
    BEGIN
      //**4PS Generated Code - Do Not Change
      DimensionManagement.CheckDepartmAuthWithFilterType(
        DATABASE::"Employee Absence", "Global Dimension 1 Code", IsHardFilter);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Global Dimension 1 Code"));
    END;

    PROCEDURE DPA_SetDefaultDepartment@1100000996();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      DPA_Management.SetDepartmentCodeUser(TABLENAME, "Global Dimension 1 Code");
    END;

    PROCEDURE ResourceSchedule@1100525002(EmplNo@1100525000 : Code[20]) : Boolean;
    VAR
      Resource@1100525001 : Record 11229278;
    BEGIN
      //**4PS
      WITH Resource DO BEGIN
        SETCURRENTKEY(Type, Company, "Source No.");
        SETRANGE(Type, Type::Employee);
        SETRANGE(Company, COMPANYNAME);
        SETRANGE("Source No.", EmplNo);
        IF FINDFIRST THEN
          EXIT(Schedule IN [Schedule::ServiceOrder, Schedule::Project, Schedule::Both]);
      END;
    END;

    PROCEDURE TestForPlannedWorkOrders@1100528601();
    VAR
      WorkOrder@1100528602 : Record 11229279;
      Employee@1100528601 : Record 5200;
      ResourceNo@1100528600 : Code[20];
      FromDateTime@1100528603 : DateTime;
      UntilTime@1100528606 : Time;
      UntilDateTime@1100528604 : DateTime;
    BEGIN
      //**4PS
      CALCFIELDS(Plannable);
      IF Plannable THEN
        EXIT;
      IF NOT Employee.GET("Employee No.") THEN
        EXIT;
      ResourceNo := Employee.GetResourceNo;
      IF ResourceNo = '' THEN
        EXIT;
      WorkOrder.SETCURRENTKEY("Resource No.");
      WorkOrder.SETRANGE("Resource No.", ResourceNo);
      FromDateTime := CREATEDATETIME("From Date", "From Time");
      UntilTime := "Until Time";
      IF UntilTime = 0T THEN
        UntilTime := 235959.999T;
      UntilDateTime := CREATEDATETIME("To Date", UntilTime);
      WorkOrder.SETFILTER("Starting Date/Time", '<>%1&<%2', 0DT, UntilDateTime);
      WorkOrder.SETFILTER("Ending Date/Time", '>=%1', FromDateTime);
      IF WorkOrder.FINDFIRST THEN
        MESSAGE(Text11012009, "Employee No.", WorkOrder."No.", DT2DATE(WorkOrder."Starting Date/Time"), DT2TIME(WorkOrder."Starting Date/Time"), DT2DATE(WorkOrder."Ending Date/Time"), DT2TIME(WorkOrder."Ending Date/Time"));
    END;

    LOCAL PROCEDURE UpdateHours@1100528407();
    VAR
      WeekDay@1100528401 : Integer;
    BEGIN
      //**4PS
      Quantity := 0;

      IF ("From Date" = 0D) OR ("To Date" = 0D) THEN
        EXIT;

      IF ("From Time" = 0T) AND ("Until Time" > 0T) THEN
        EXIT;

      IF ("From Time" > 0T) AND ("Until Time" = 0T) THEN
        EXIT;

      DateRec.SETRANGE("Period Type", DateRec."Period Type"::Date);
      DateRec.SETRANGE("Period Start", "From Date", "To Date");
      IF DateRec.FINDSET THEN BEGIN
        REPEAT
          WeekDay := DATE2DWY(DateRec."Period Start", 1);
          Quantity += GetHoursFromEmployeeAbsenceEntryForWeekDay(DateRec."Period Start", Rec, WeekDay);
        UNTIL DateRec.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE GetHoursFromEmployeeAbsenceEntryForWeekDay@1100528413(CurrentDate@1100528403 : Date;EmployeeAbsence@1100528400 : Record 5207;WeekDay@1100528402 : Integer) Hours : Decimal;
    BEGIN
      //**4PS
      Hours := CalcEmployeeAbsenceHours(EmployeeAbsence, CurrentDate, WeekDay);
    END;

    PROCEDURE CalcEmployeeAbsenceHours@1100528408(EmployeeAbsence@1100528400 : Record 5207;CurrentDate@1100528401 : Date;WeekDay@1100528402 : Integer) AbsenceHours : Decimal;
    VAR
      NormalWorkFrom@1100528406 : Time;
      NormalWorkUntil@1100528407 : Time;
      NormalPauseFrom@1100528408 : Time;
      NormalPauseUntil@1100528409 : Time;
      AbsenceFromTime@1100528403 : Time;
      AbsenceUntilTime@1100528411 : Time;
      NormalHours@1100528405 : Decimal;
    BEGIN
      //**4PS
      GetNormalEmployeeWorkingTimeForWeekDay(
        EmployeeAbsence."Employee No.", NOT EmployeeAbsence."Calendar Entry", CurrentDate,
        WeekDay, NormalHours, NormalWorkFrom, NormalWorkUntil, NormalPauseFrom, NormalPauseUntil);

      IF (EmployeeAbsence."From Time" > NormalWorkFrom) AND
         (EmployeeAbsence."From Date" = CurrentDate)
      THEN
        AbsenceFromTime := EmployeeAbsence."From Time";

      IF (EmployeeAbsence."Until Time" > 0T) AND
         (EmployeeAbsence."Until Time" < NormalWorkUntil) AND
         (EmployeeAbsence."To Date" = CurrentDate)
      THEN
        AbsenceUntilTime := EmployeeAbsence."Until Time";

      AbsenceHours := CalcActualWorkingHours(
        NormalHours, NormalWorkFrom, NormalWorkUntil, NormalPauseFrom, NormalPauseUntil,
        AbsenceFromTime, AbsenceUntilTime, FALSE);
    END;

    LOCAL PROCEDURE DateTime2Time@1100528412(DateTime@1100528400 : DateTime) Time : Time;
    BEGIN
      //**4PS
      IF CREATEDATETIME(DT2DATE(DateTime), 0T) = DateTime THEN
        Time:= 0T // 00:00T is considered to be 0T (undefined).
      ELSE
        Time:= DT2TIME(DateTime);
    END;

    LOCAL PROCEDURE GetNormalEmployeeWorkingTimeForWeekDay@1100528415(EmployeeNo@1100528407 : Code[20];SkipNonWorkingDay@1100528418 : Boolean;CurrentDate@1100528406 : Date;WeekDay@1100528405 : Integer;VAR NormalHours@1100528404 : Decimal;VAR NormalWorkFrom@1100528400 : Time;VAR NormalWorkUntil@1100528401 : Time;VAR NormalPauseFrom@1100528402 : Time;VAR NormalPauseUntil@1100528403 : Time);
    VAR
      EmployeeTimeTable@1100528409 : Record 11012923;
      HumanResourcesSetup@1100528408 : Record 5218;
      CompanyInformation@1100528410 : Record 79;
      BaseCalendar@1100528411 : Record 11072014;
      CalendarManagement@1100528412 : Codeunit 7600;
      Description@1100528413 : Text;
      WorkDay@1100528414 : Boolean;
    BEGIN
      //**4PS
      NormalHours := 0;
      NormalWorkFrom := 0T;
      NormalWorkUntil := 0T;
      NormalPauseFrom := 0T;
      NormalPauseUntil := 0T;

      WorkDay := TRUE;
      IF CompanyInformation.GET THEN;
      IF BaseCalendar.GET(CompanyInformation."Base Calendar Code") THEN
        WorkDay := NOT CalendarManagement.CheckDateStatus(
          CompanyInformation."Base Calendar Code", CurrentDate, Description);
      IF NOT WorkDay AND SkipNonWorkingDay THEN
        EXIT;

      EmployeeTimeTable.SETRANGE("Employee No.", EmployeeNo);
      EmployeeTimeTable.SETFILTER("Effective Date", '<%1', CurrentDate);
      IF EmployeeTimeTable.FINDLAST THEN
        EmployeeTimeTable.GetWorkingTimeForWeekDay(
          WeekDay, NormalHours, NormalWorkFrom, NormalWorkUntil, NormalPauseFrom, NormalPauseUntil)
      ELSE BEGIN
        IF BaseCalendar.Code <> '' THEN
          BaseCalendar.GetWorkingTimeForWeekDay(
            WeekDay, NormalHours, NormalWorkFrom, NormalWorkUntil, NormalPauseFrom, NormalPauseUntil);
        IF NormalHours = 0 THEN BEGIN
          HumanResourcesSetup.GET;
          HumanResourcesSetup.TESTFIELD("Norm Hours");
          NormalHours := HumanResourcesSetup."Norm Hours";
          NormalWorkFrom := HumanResourcesSetup."Starting Time";
          NormalWorkUntil := HumanResourcesSetup."Finishing Time";
        END;
      END;
    END;

    LOCAL PROCEDURE CalcActualWorkingHours@1100528418(NormalHours@1100528400 : Decimal;NormalWorkFrom@1100528401 : Time;NormalWorkUntil@1100528402 : Time;NormalPauseFrom@1100528405 : Time;NormalPauseUntil@1100528406 : Time;ActualWorkingFromTime@1100528403 : Time;ActualWorkingUntilTime@1100528404 : Time;AllowMoreThanNormalHours@1100528407 : Boolean) ActualWorkingHours : Decimal;
    BEGIN
      //**4PS
      IF (NormalPauseFrom > 0T) AND
         (NormalPauseUntil > 0T)
      THEN
        ActualWorkingHours := CalcActualWorkingHoursForKnownPause(
          NormalHours, NormalWorkFrom, NormalWorkUntil, NormalPauseFrom, NormalPauseUntil,
          ActualWorkingFromTime, ActualWorkingUntilTime, AllowMoreThanNormalHours)
      ELSE
        ActualWorkingHours := CalcActualWorkingHoursForUnknownPause(
          NormalHours, NormalWorkFrom, NormalWorkUntil, ActualWorkingFromTime, ActualWorkingUntilTime,
          AllowMoreThanNormalHours);
    END;

    LOCAL PROCEDURE CalcActualWorkingHoursForKnownPause@1100528430(NormalHours@1100528400 : Decimal;NormalWorkFrom@1100528401 : Time;NormalWorkUntil@1100528402 : Time;NormalPauseFrom@1100528405 : Time;NormalPauseUntil@1100528406 : Time;ActualWorkingFromTime@1100528403 : Time;ActualWorkingUntilTime@1100528404 : Time;AllowMoreThanNormalHours@1100528411 : Boolean) ActualWorkingHours : Decimal;
    VAR
      StartTime@1100528407 : Time;
      EndTime@1100528408 : Time;
      HoursBeforePause@1100528409 : Decimal;
      HoursAfterPause@1100528410 : Decimal;
    BEGIN
      //**4PS
      StartTime := DetermineStartTime(NormalWorkFrom, ActualWorkingFromTime, AllowMoreThanNormalHours);
      EndTime := DetermineEndTime(NormalWorkUntil, ActualWorkingUntilTime, AllowMoreThanNormalHours);
      IF (StartTime = 0T) OR
         (EndTime = 0T)
      THEN BEGIN
        ActualWorkingHours := NormalHours;
        EXIT;
      END;

      IF StartTime < NormalPauseFrom THEN BEGIN
        IF EndTime > NormalPauseFrom THEN
          HoursBeforePause := (NormalPauseFrom - StartTime)/3600000
        ELSE
          HoursBeforePause := (EndTime - StartTime)/3600000;
        IF HoursBeforePause < 0 THEN
          HoursBeforePause := 0;
      END;

      IF EndTime > NormalPauseUntil THEN BEGIN
        IF StartTime < NormalPauseUntil THEN
          HoursAfterPause := (EndTime - NormalPauseUntil)/3600000
        ELSE
          HoursAfterPause := (EndTime - StartTime)/3600000;
        IF HoursAfterPause < 0 THEN
          HoursAfterPause := 0;
      END;

      ActualWorkingHours := HoursBeforePause + HoursAfterPause;
    END;

    LOCAL PROCEDURE CalcActualWorkingHoursForUnknownPause@1100528431(NormalHours@1100528400 : Decimal;NormalWorkFrom@1100528401 : Time;NormalWorkUntil@1100528402 : Time;ActualWorkingFromTime@1100528403 : Time;ActualWorkingUntilTime@1100528404 : Time;AllowMoreThanNormalHours@1100528408 : Boolean) ActualWorkingHours : Decimal;
    VAR
      PauseFrom@1100528405 : Time;
      PauseUntil@1100528407 : Time;
      PauseDuration@1100528406 : Decimal;
    BEGIN
      //**4PS
      //Assumption: Pause starts at 12:00 when it is not specified.
      PauseFrom := DT2TIME(CREATEDATETIME(TODAY, 0T)) + 12 * 3600000;
      IF (NormalHours > 0) AND
         (NormalWorkFrom > 0T) AND
         (NormalWorkUntil > 0T)
      THEN
        PauseDuration := ROUND(NormalWorkUntil - NormalWorkFrom - (NormalHours * 3600000), 1);

      IF PauseDuration > 0 THEN
        PauseUntil := PauseFrom + PauseDuration
      ELSE
        PauseUntil := PauseFrom;

      ActualWorkingHours := CalcActualWorkingHoursForKnownPause(
        NormalHours, NormalWorkFrom, NormalWorkUntil, PauseFrom, PauseUntil,
        ActualWorkingFromTime, ActualWorkingUntilTime, AllowMoreThanNormalHours);
    END;

    LOCAL PROCEDURE DetermineStartTime@1100528411(NormalWorkFrom@1100528402 : Time;ActualWorkingFromTime@1100528401 : Time;AllowMoreThanNormalHours@1100528400 : Boolean) StartTime : Time;
    BEGIN
      //**4PS
      IF ActualWorkingFromTime = 0T THEN BEGIN
        StartTime := NormalWorkFrom;
        EXIT;
      END;

      IF ActualWorkingFromTime > NormalWorkFrom THEN
        StartTime := ActualWorkingFromTime
      ELSE
        IF AllowMoreThanNormalHours THEN
          StartTime := ActualWorkingFromTime
        ELSE
          StartTime := NormalWorkFrom;
    END;

    LOCAL PROCEDURE DetermineEndTime@1100528417(NormalWorkUntil@1100528402 : Time;ActualWorkingUntilTime@1100528401 : Time;AllowMoreThanNormalHours@1100528400 : Boolean) EndTime : Time;
    BEGIN
      //**4PS
      IF ActualWorkingUntilTime = 0T THEN BEGIN
        EndTime := NormalWorkUntil;
        EXIT;
      END;

      IF ActualWorkingUntilTime < NormalWorkUntil THEN
        EndTime := ActualWorkingUntilTime
      ELSE
        IF AllowMoreThanNormalHours THEN
          EndTime := ActualWorkingUntilTime
        ELSE
          EndTime := NormalWorkUntil;
    END;

    PROCEDURE ReadEmployeeAbsenceCode@1100528508(EmployeeNo@1100528500 : Code[20];Date@1100528501 : Date;NotPlannableOnly@1100528503 : Boolean) : Code[10];
    VAR
      EmployeeAbsence@1100528502 : Record 5207;
    BEGIN
      //**4PS
      EmployeeAbsence.SETCURRENTKEY("Employee No.");
      EmployeeAbsence.SETRANGE("Employee No.",EmployeeNo);
      IF NotPlannableOnly THEN
        EmployeeAbsence.SETRANGE(Plannable, FALSE);
      EmployeeAbsence.SETRANGE("From Date",0D,Date);
      EmployeeAbsence.SETFILTER("To Date",'>=%1|%2',Date,0D);
      IF EmployeeAbsence.FINDFIRST THEN
        EXIT(EmployeeAbsence."Cause of Absence Code");
    END;

    BEGIN
    END.
  }
}

