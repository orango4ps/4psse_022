OBJECT Codeunit 6085583 Navigate Document Capture
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=DCW13.70.00.5.00.07,4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@6085576 : TextConst 'DEU=Document Capture -Beleg;ENU=Document Capture Document;NLD=Document Capture Document';
      Text002@6085575 : TextConst 'DEU=Document Capture-Datei;ENU=Document Capture File;NLD=Document Capture Bestand';
      Text003@6085574 : TextConst 'DEU=Einkauf VerteilungsschlÅssel;ENU=Purchase Allocation;NLD=Inkoopallocatie;SVE=Inkîpstilldelning';
      Text004@6085573 : TextConst 'DEU=Einkauf Zuordnung Eingabe;ENU=Purchase Allocation Entry;NLD=Inkoopallocatiepost';

    PROCEDURE FindRecords@161024012(VAR DocEntry@161024014 : Record 265;DocNoFilter@161024013 : Code[250];PostingDateFilter@161024012 : Text[250]);
    VAR
      TempDoc@161024017 : TEMPORARY Record 6085590;
      PurchInvHeader@1001 : Record 122 SECURITYFILTERING(Filtered);
      PurchCrMemoHeader@1002 : Record 124 SECURITYFILTERING(Filtered);
      PurchAllocHeader@161024015 : Record 6085730 SECURITYFILTERING(Filtered);
      PurchAllocEntry@161024016 : Record 6085732 SECURITYFILTERING(Filtered);
      DCNavEntry@1160040000 : Record 6086014;
      PurchHeaderArchive@1003 : Record 11072057 SECURITYFILTERING(Filtered);
      CEMProxy@1160040001 : Codeunit 6085782;
      CEDOProxy@1160040002 : Codeunit 6085800;
      Count@1000 : Integer;
      DCDocument@1160040003 : Record 6085590 SECURITYFILTERING(Filtered);
    BEGIN
      //DCDocument.SETPERMISSIONFILTER;  Not supported from NAV 2013 and forward
      IF DCDocument.READPERMISSION THEN BEGIN
        FilterDocuments(TempDoc,DocNoFilter,PostingDateFilter);

        TempDoc.SETRANGE("File Type",TempDoc."File Type"::OCR);
        Count := TempDoc.COUNT;
        InsertIntoDocEntry(DocEntry,DATABASE::"DC Document",0,Text001,Count);

        TempDoc.SETRANGE("File Type");
        Count := TempDoc.COUNT;
        InsertIntoDocEntry(DocEntry,DATABASE::"DC Document" + 1,0,Text002,Count);
      END;

      //PurchInvHeader.SETPERMISSIONFILTER;  Not supported from NAV 2013 and forward
      IF PurchInvHeader.READPERMISSION THEN BEGIN
        PurchInvHeader.RESET;
        //PurchInvHeader.SETPERMISSIONFILTER;  Not supported from NAV 2013 and forward
        PurchInvHeader.SETFILTER("No.",DocNoFilter);
        PurchInvHeader.SETFILTER("Posting Date",PostingDateFilter);
      END;

      //PurchCrMemoHeader.SETPERMISSIONFILTER;  Not supported from NAV 2013 and forward
      IF PurchCrMemoHeader.READPERMISSION THEN BEGIN
        PurchCrMemoHeader.RESET;
        //PurchCrMemoHeader.SETPERMISSIONFILTER;  Not supported from NAV 2013 and forward
        PurchCrMemoHeader.SETFILTER("No.",DocNoFilter);
        PurchCrMemoHeader.SETFILTER("Posting Date",PostingDateFilter);
      END;

      //PurchAllocHeader.SETPERMISSIONFILTER;  Not supported from NAV 2013 and forward
      IF PurchAllocHeader.READPERMISSION THEN BEGIN
        PurchAllocHeader.SETFILTER("No.",DocNoFilter);
        PurchAllocHeader.SETFILTER("Posting Date",PostingDateFilter);
        Count := PurchAllocHeader.COUNT;

        IF PurchInvHeader.READPERMISSION THEN
          IF PurchInvHeader.FINDSET THEN
            REPEAT
              PurchAllocHeader.RESET;
              //PurchAllocHeader.SETPERMISSIONFILTER;  Not supported from NAV 2013 and forward
              PurchAllocHeader.SETRANGE("Document Type",PurchAllocHeader."Document Type"::Invoice);
              PurchAllocHeader.SETRANGE("Document No.",PurchInvHeader."Pre-Assigned No.");
              Count += PurchAllocHeader.COUNT;
            UNTIL PurchInvHeader.NEXT = 0;

        IF PurchCrMemoHeader.READPERMISSION THEN
          IF PurchCrMemoHeader.FINDSET THEN
            REPEAT
              PurchAllocHeader.RESET;
              //PurchAllocHeader.SETPERMISSIONFILTER;  Not supported from NAV 2013 and forward
              PurchAllocHeader.SETRANGE("Document Type",PurchAllocHeader."Document Type"::"Credit Memo");
              PurchAllocHeader.SETRANGE("Document No.",PurchCrMemoHeader."Pre-Assigned No.");
              Count += PurchAllocHeader.COUNT;
            UNTIL PurchCrMemoHeader.NEXT = 0;

        InsertIntoDocEntry(DocEntry,DATABASE::"Purch. Allocation Header",0,Text003,Count);
      END;

      //PurchAllocEntry.SETPERMISSIONFILTER;  Not supported from NAV 2013 and forward
      IF PurchAllocEntry.READPERMISSION THEN BEGIN
        PurchAllocEntry.SETCURRENTKEY("Document No.","Posting Date");
        PurchAllocEntry.SETFILTER("Document No.",DocNoFilter);
        PurchAllocEntry.SETFILTER("Posting Date",PostingDateFilter);
        Count := PurchAllocEntry.COUNT;

        IF PurchInvHeader.READPERMISSION THEN
          IF PurchInvHeader.FINDSET THEN
            REPEAT
              PurchAllocEntry.RESET;
              //PurchAllocEntry.SETPERMISSIONFILTER;  Not supported from NAV 2013 and forward
              PurchAllocEntry.SETCURRENTKEY("Source Type","Source No.");
              PurchAllocEntry.SETRANGE("Source Type",PurchAllocEntry."Source Type"::Invoice);
              PurchAllocEntry.SETRANGE("Source No.",PurchInvHeader."Pre-Assigned No.");
              Count += PurchAllocEntry.COUNT;
            UNTIL PurchInvHeader.NEXT = 0;

        IF PurchCrMemoHeader.READPERMISSION THEN
          IF PurchCrMemoHeader.FINDSET THEN
            REPEAT
              PurchAllocEntry.RESET;
              //PurchAllocEntry.SETPERMISSIONFILTER;  Not supported from NAV 2013 and forward
              PurchAllocEntry.SETCURRENTKEY("Source Type","Source No.");
              PurchAllocEntry.SETRANGE("Source Type",PurchAllocHeader."Document Type"::"Credit Memo");
              PurchAllocEntry.SETRANGE("Source No.",PurchCrMemoHeader."Pre-Assigned No.");
              Count += PurchAllocEntry.COUNT;
            UNTIL PurchCrMemoHeader.NEXT = 0;

        InsertIntoDocEntry(DocEntry,DATABASE::"Purch. Alloc. Entry",0,Text004,Count);
      END;

      //PurchHeaderArchive.SETPERMISSIONFILTER;  Not supported from NAV 2013 and forward
      IF PurchHeaderArchive.READPERMISSION THEN BEGIN
        Count := 0;
        IF PurchInvHeader.READPERMISSION THEN
          IF PurchInvHeader.FINDSET THEN
            REPEAT
              PurchHeaderArchive.RESET;
              //PurchHeaderArchive.SETPERMISSIONFILTER;  Not supported from NAV 2013 and forward
              PurchHeaderArchive.SETRANGE("Document Type",PurchHeaderArchive."Document Type"::Invoice);
              PurchHeaderArchive.SETRANGE("No.",PurchInvHeader."Pre-Assigned No.");
              Count += PurchHeaderArchive.COUNT;
            UNTIL PurchInvHeader.NEXT = 0;

        IF PurchCrMemoHeader.READPERMISSION THEN
          IF PurchCrMemoHeader.FINDSET THEN
            REPEAT
              PurchHeaderArchive.RESET;
              //PurchHeaderArchive.SETPERMISSIONFILTER;  Not supported from NAV 2013 and forward
              PurchHeaderArchive.SETRANGE("Document Type",PurchHeaderArchive."Document Type"::"Credit Memo");
              PurchHeaderArchive.SETRANGE("No.",PurchCrMemoHeader."Pre-Assigned No.");
              Count += PurchHeaderArchive.COUNT;
            UNTIL PurchCrMemoHeader.NEXT = 0;

        IF Count <> 0 THEN
          InsertIntoDocEntry(DocEntry,DATABASE::"Purchase Header Archive",0,PurchHeaderArchive.TABLECAPTION,Count);
      END;

      IF CEMProxy.IsCEMEnabled(FALSE) THEN BEGIN
        DCNavEntry."Doc. No. Filter" := DocNoFilter;
        DCNavEntry."Posting Date Filter" := PostingDateFilter;
        CODEUNIT.RUN(6086322,DCNavEntry);
        IF DCNavEntry."No. of Records" > 0 THEN
          InsertIntoDocEntry(DocEntry,DCNavEntry."Table ID",DCNavEntry."Document Type",DCNavEntry."Table Name",
            DCNavEntry."No. of Records");
        CODEUNIT.RUN(6086302,DCNavEntry);
        IF DCNavEntry."No. of Records" > 0 THEN
          InsertIntoDocEntry(DocEntry,DCNavEntry."Table ID",DCNavEntry."Document Type",DCNavEntry."Table Name",
            DCNavEntry."No. of Records");
        CODEUNIT.RUN(6086317,DCNavEntry);
        IF DCNavEntry."No. of Records" > 0 THEN
          InsertIntoDocEntry(DocEntry,DCNavEntry."Table ID",DCNavEntry."Document Type",DCNavEntry."Table Name",
            DCNavEntry."No. of Records");
        CODEUNIT.RUN(6086326,DCNavEntry);
        IF DCNavEntry."No. of Records" > 0 THEN
          InsertIntoDocEntry(DocEntry,DCNavEntry."Table ID",DCNavEntry."Document Type",DCNavEntry."Table Name",
            DCNavEntry."No. of Records");
      END;

      IF CEDOProxy.IsCEDOEnabled THEN
        CEDOProxy.AddCEDOEntry(DocEntry,DocNoFilter,PostingDateFilter);
    END;

    LOCAL PROCEDURE InsertIntoDocEntry@3(VAR DocEntry@161024012 : Record 265;DocTableID@1000 : Integer;DocType@1003 : Option;DocTableName@1001 : Text[1024];DocNoOfRecords@1002 : Integer);
    BEGIN
      WITH DocEntry DO BEGIN
        IF DocNoOfRecords = 0 THEN
          EXIT;
        INIT;
        "Entry No." := "Entry No." + 1;
        "Table ID" := DocTableID;
        "Document Type" := DocType;
        "Table Name" := COPYSTR(DocTableName,1,MAXSTRLEN("Table Name"));
        "No. of Records" := DocNoOfRecords;
        INSERT;
      END;
    END;

    PROCEDURE ShowRecords@161024013(VAR DocEntry@161024012 : Record 265;DocNoFilter@161024014 : Code[250];PostingDateFilter@161024013 : Text[250]);
    VAR
      TempDoc@161024015 : TEMPORARY Record 6085590;
      PurchInvHeader@1001 : Record 122 SECURITYFILTERING(Filtered);
      PurchCrMemoHeader@1000 : Record 124 SECURITYFILTERING(Filtered);
      Doc@161024018 : Record 6085590;
      PurchAllocHeader@161024016 : Record 6085730;
      PurchAllocEntry@161024017 : Record 6085732;
      PurchHeaderArchive@1004 : Record 11072057;
      DCNavEntry@1160040000 : Record 6086014;
      CEMProxy@1160040001 : Codeunit 6085782;
      CEDOProxy@1160040002 : Codeunit 6085800;
      PurchInvHeaderFound@1003 : Boolean;
      PurchCrMemoHeaderFound@1002 : Boolean;
    BEGIN
      CASE DocEntry."Table ID" OF
        DATABASE::"DC Document":
          BEGIN
            FilterDocuments(TempDoc,DocNoFilter,PostingDateFilter);
            TempDoc.SETRANGE("File Type",TempDoc."File Type"::OCR);

            IF TempDoc.COUNT = 1 THEN BEGIN
              TempDoc.FINDFIRST;
              Doc.GET(TempDoc."No.");
              PAGE.RUN(PAGE::"Document Card",Doc)
            END ELSE
              PAGE.RUN(PAGE::"Document List",TempDoc);
          END;

        DATABASE::"DC Document" + 1:
          BEGIN
            FilterDocuments(TempDoc,DocNoFilter,PostingDateFilter);
            IF TempDoc.COUNT = 1 THEN BEGIN
              TempDoc.FINDFIRST;
              Doc.GET(TempDoc."No.");
              Doc.OpenPdfFile;
            END ELSE BEGIN
              CASE TempDoc."File Type" OF
                //TempDoc."File Type"::OCR : PAGE.RUN(PAGE::"Document List",TempDoc); //**4PS.o
                TempDoc."File Type"::OCR : PAGE.RUN(PAGE::"Document List (DC)",TempDoc); //**4PS.n
                TempDoc."File Type"::Miscellaneous : PAGE.RUN(PAGE::"File List",TempDoc);
              END;
            END;
          END;

        DATABASE::"Purch. Allocation Header":
          BEGIN
            IF PurchInvHeader.READPERMISSION THEN BEGIN
              PurchInvHeader.RESET;
              PurchInvHeader.SETFILTER("No.",DocNoFilter);
              PurchInvHeader.SETFILTER("Posting Date",PostingDateFilter);
              PurchInvHeaderFound := PurchInvHeader.FINDSET;
            END;

            IF PurchCrMemoHeader.READPERMISSION THEN BEGIN
              PurchCrMemoHeader.RESET;
              PurchCrMemoHeader.SETFILTER("No.",DocNoFilter);
              PurchCrMemoHeader.SETFILTER("Posting Date",PostingDateFilter);
              PurchCrMemoHeaderFound := PurchCrMemoHeader.FINDSET;
            END;

            IF PurchInvHeaderFound OR PurchCrMemoHeaderFound THEN BEGIN
              IF PurchInvHeaderFound THEN
                REPEAT
                  PurchAllocHeader.SETRANGE("Document Type",PurchAllocHeader."Document Type"::Invoice);
                  PurchAllocHeader.SETRANGE("Document No.",PurchInvHeader."Pre-Assigned No.");
                  IF PurchAllocHeader.FINDSET THEN
                    REPEAT
                      IF NOT PurchAllocHeader.MARK THEN
                        PurchAllocHeader.MARK(TRUE);
                    UNTIL PurchAllocHeader.NEXT = 0;
                UNTIL PurchInvHeader.NEXT = 0;

              IF PurchCrMemoHeaderFound THEN
                REPEAT
                  PurchAllocHeader.SETRANGE("Document Type",PurchAllocHeader."Document Type"::"Credit Memo");
                  PurchAllocHeader.SETRANGE("Document No.",PurchCrMemoHeader."Pre-Assigned No.");
                  IF PurchAllocHeader.FINDSET THEN
                    REPEAT
                      IF NOT PurchAllocHeader.MARK THEN
                        PurchAllocHeader.MARK(TRUE);
                    UNTIL PurchAllocHeader.NEXT = 0;
                UNTIL PurchCrMemoHeader.NEXT = 0;

              PurchAllocHeader.SETRANGE("Document Type");
              PurchAllocHeader.SETRANGE("Document No.");

              PurchAllocHeader.SETFILTER("No.",DocNoFilter);
              PurchAllocHeader.SETFILTER("Posting Date",PostingDateFilter);
              IF PurchAllocHeader.FINDSET THEN
                REPEAT
                  IF NOT PurchAllocHeader.MARK THEN
                    PurchAllocHeader.MARK(TRUE);
                UNTIL PurchAllocHeader.NEXT = 0;

              PurchAllocHeader.SETRANGE("No.");
              PurchAllocHeader.SETRANGE("Posting Date");
              PurchAllocHeader.MARKEDONLY(TRUE);
            END ELSE BEGIN
              PurchAllocHeader.RESET;
              PurchAllocHeader.SETFILTER("No.",DocNoFilter);
              PurchAllocHeader.SETFILTER("Posting Date",PostingDateFilter);
            END;

            IF PurchAllocHeader.COUNT = 1 THEN
              PAGE.RUN(PAGE::"Purch. Allocation",PurchAllocHeader)
            ELSE
              PAGE.RUN(0,PurchAllocHeader);
          END;

        DATABASE::"Purch. Alloc. Entry":
          BEGIN
            IF PurchInvHeader.READPERMISSION THEN BEGIN
              PurchInvHeader.RESET;
              PurchInvHeader.SETFILTER("No.",DocNoFilter);
              PurchInvHeader.SETFILTER("Posting Date",PostingDateFilter);
              PurchInvHeaderFound := PurchInvHeader.FINDSET;
            END;

            IF PurchCrMemoHeader.READPERMISSION THEN BEGIN
              PurchCrMemoHeader.RESET;
              PurchCrMemoHeader.SETFILTER("No.",DocNoFilter);
              PurchCrMemoHeader.SETFILTER("Posting Date",PostingDateFilter);
              PurchCrMemoHeaderFound := PurchCrMemoHeader.FINDSET;
            END;

            IF PurchInvHeaderFound OR PurchCrMemoHeaderFound THEN BEGIN
              IF PurchInvHeaderFound THEN
                REPEAT
                  PurchAllocEntry.SETCURRENTKEY("Source Type","Source No.");
                  PurchAllocEntry.SETRANGE("Source Type",PurchAllocEntry."Source Type"::Invoice);
                  PurchAllocEntry.SETRANGE("Source No.",PurchInvHeader."Pre-Assigned No.");
                  IF PurchAllocEntry.FINDSET THEN
                    REPEAT
                      IF NOT PurchAllocEntry.MARK THEN
                        PurchAllocEntry.MARK(TRUE);
                    UNTIL PurchAllocEntry.NEXT = 0;
                UNTIL PurchInvHeader.NEXT = 0;

              IF PurchCrMemoHeaderFound THEN
                REPEAT
                  PurchAllocEntry.SETCURRENTKEY("Source Type","Source No.");
                  PurchAllocEntry.SETRANGE("Source Type",PurchAllocHeader."Document Type"::"Credit Memo");
                  PurchAllocEntry.SETRANGE("Source No.",PurchCrMemoHeader."Pre-Assigned No.");
                  IF PurchAllocEntry.FINDSET THEN
                    REPEAT
                      IF NOT PurchAllocEntry.MARK THEN
                        PurchAllocEntry.MARK(TRUE);
                    UNTIL PurchAllocEntry.NEXT = 0;
                UNTIL PurchCrMemoHeader.NEXT = 0;

              PurchAllocEntry.SETRANGE("Source Type");
              PurchAllocEntry.SETRANGE("Source No.");

              PurchAllocEntry.SETCURRENTKEY("Document No.","Posting Date");
              PurchAllocEntry.SETFILTER("Document No.",DocNoFilter);
              PurchAllocEntry.SETFILTER("Posting Date",PostingDateFilter);
              IF PurchAllocEntry.FINDSET THEN
                REPEAT
                  IF NOT PurchAllocEntry.MARK THEN
                    PurchAllocEntry.MARK(TRUE);
                UNTIL PurchAllocEntry.NEXT = 0;

              PurchAllocEntry.SETRANGE("Document No.");
              PurchAllocEntry.SETRANGE("Posting Date");
              PurchAllocEntry.MARKEDONLY(TRUE);
              PAGE.RUN(0,PurchAllocEntry);
            END ELSE BEGIN
              PurchAllocEntry.SETCURRENTKEY("Document No.","Posting Date");
              PurchAllocEntry.SETFILTER("Document No.",DocNoFilter);
              PurchAllocEntry.SETFILTER("Posting Date",PostingDateFilter);
              PAGE.RUN(0,PurchAllocEntry);
            END;
          END;

        DATABASE::"Purchase Header Archive":
          BEGIN
            IF PurchInvHeader.READPERMISSION THEN BEGIN
              PurchInvHeader.RESET;
              PurchInvHeader.SETFILTER("No.",DocNoFilter);
              PurchInvHeader.SETFILTER("Posting Date",PostingDateFilter);
              PurchInvHeaderFound := PurchInvHeader.FINDSET;
            END;

            IF PurchCrMemoHeader.READPERMISSION THEN BEGIN
              PurchCrMemoHeader.RESET;
              PurchCrMemoHeader.SETFILTER("No.",DocNoFilter);
              PurchCrMemoHeader.SETFILTER("Posting Date",PostingDateFilter);
              PurchCrMemoHeaderFound := PurchCrMemoHeader.FINDSET;
            END;

            IF PurchInvHeaderFound OR PurchCrMemoHeaderFound THEN BEGIN
              IF PurchInvHeaderFound THEN
                REPEAT
                  PurchHeaderArchive.SETRANGE("Document Type",PurchHeaderArchive."Document Type"::Invoice);
                  PurchHeaderArchive.SETRANGE("No.",PurchInvHeader."Pre-Assigned No.");
                  IF PurchHeaderArchive.FINDSET THEN
                    REPEAT
                      IF NOT PurchHeaderArchive.MARK THEN
                        PurchHeaderArchive.MARK(TRUE);
                    UNTIL PurchHeaderArchive.NEXT = 0;
                UNTIL PurchInvHeader.NEXT = 0;

              IF PurchCrMemoHeaderFound THEN
                REPEAT
                  PurchHeaderArchive.SETRANGE("Document Type",PurchHeaderArchive."Document Type"::"Credit Memo");
                  PurchHeaderArchive.SETRANGE("No.",PurchCrMemoHeader."Pre-Assigned No.");
                  IF PurchHeaderArchive.FINDSET THEN
                    REPEAT
                      IF NOT PurchHeaderArchive.MARK THEN
                        PurchHeaderArchive.MARK(TRUE);
                    UNTIL PurchHeaderArchive.NEXT = 0;
                UNTIL PurchCrMemoHeader.NEXT = 0;

              PurchHeaderArchive.SETRANGE("No.");
              PurchHeaderArchive.SETRANGE("Posting Date");
              PurchHeaderArchive.MARKEDONLY(TRUE);
            END ELSE BEGIN
              PurchHeaderArchive.SETFILTER("No.",DocNoFilter);
              PurchHeaderArchive.SETFILTER("Posting Date",PostingDateFilter);
            END;
            IF PurchHeaderArchive.COUNT = 1 THEN BEGIN
              CASE PurchHeaderArchive."Document Type" OF
                PurchHeaderArchive."Document Type"::Invoice:
                  PAGE.RUN(PAGE::"Purchase Invoice Archive",PurchHeaderArchive);
                PurchHeaderArchive."Document Type"::"Credit Memo":
                  PAGE.RUN(PAGE::"Purchase Credit Memo Archive",PurchHeaderArchive);
              END;
            END ELSE
              IF PurchHeaderArchive.COUNT > 1 THEN
                PAGE.RUN(PAGE::"Purchase List Archive DC",PurchHeaderArchive);
          END;

        ELSE
          BEGIN
            IF CEMProxy.IsCEMEnabled(FALSE) THEN BEGIN
              DCNavEntry.TRANSFERFIELDS(DocEntry);
              DCNavEntry."Doc. No. Filter" := DocNoFilter;
              DCNavEntry."Posting Date Filter" := PostingDateFilter;
              CODEUNIT.RUN(6086325,DCNavEntry);
            END;

            IF CEDOProxy.IsCEDOEnabled THEN
              CEDOProxy.ShowCEDOEntry(DocEntry,DocNoFilter,PostingDateFilter);
          END;
      END;
    END;

    PROCEDURE FilterDocuments@161024014(VAR Doc2@161024014 : TEMPORARY Record 6085590;DocNoFilter@161024013 : Code[250];PostingDateFilter@161024012 : Text[250]);
    VAR
      PurchHeader@1160040001 : Record 38;
      PurchInvHeader@1160040000 : Record 122;
      PurchCrMemoHdr@1160040002 : Record 124;
      PurchRcpHeader@1160040005 : Record 120;
      RetShptHeader@1160040006 : Record 6650;
      SalesHeader@1160040009 : Record 36;
      SalesInvHeader@1160040004 : Record 112;
      SalesCrMemoHdr@1160040007 : Record 114;
      SalesShipHeader@1160040003 : Record 110;
      RetRcpHeader@1160040008 : Record 6660;
    BEGIN
      // *********************************************************************************************************************************
      // Filter records that have been created from first creating a document
      // and then been posted to another document
      // *********************************************************************************************************************************
      FilterDocAndTable(Doc2,
        DATABASE::"Purch. Inv. Header",                // Record table potentially associated to a Document.
        PurchInvHeader.FIELDNO("No."),                 // Field 1 in Record table.
        PurchInvHeader.FIELDNO("Posting Date"),        // Field 2 in Record table.
        DocNoFilter,                                   // Filter 1
        PostingDateFilter,                             // Filter 2
        DATABASE::"Purchase Header",                   // "Created Doc. Type" of Document table.
        PurchHeader."Document Type"::Invoice,          // "Created Doc. Sub Type" of Document table.
        PurchInvHeader.FIELDNO("Pre-Assigned No."));   // Field link between Record table and Document table.

      FilterDocAndTable(Doc2,
        DATABASE::"Purch. Inv. Header",
        PurchInvHeader.FIELDNO("No."),
        PurchInvHeader.FIELDNO("Posting Date"),
        DocNoFilter,
        PostingDateFilter,
        DATABASE::"Purchase Header",
        PurchHeader."Document Type"::Order,
        PurchInvHeader.FIELDNO("Order No."));

      FilterDocAndTable(Doc2,
        DATABASE::"Purch. Rcpt. Header",
        PurchRcpHeader.FIELDNO("No."),
        PurchRcpHeader.FIELDNO("Posting Date"),
        DocNoFilter,
        PostingDateFilter,
        DATABASE::"Purchase Header",
        PurchHeader."Document Type"::Order,
        PurchRcpHeader.FIELDNO("Order No."));

      FilterDocAndTable(Doc2,
        DATABASE::"Purch. Cr. Memo Hdr.",
        PurchCrMemoHdr.FIELDNO("No."),
        PurchCrMemoHdr.FIELDNO("Posting Date"),
        DocNoFilter,
        PostingDateFilter,
        DATABASE::"Purchase Header",
        PurchHeader."Document Type"::"Credit Memo",
        PurchCrMemoHdr.FIELDNO("Pre-Assigned No."));

      FilterDocAndTable(Doc2,
        DATABASE::"Purch. Cr. Memo Hdr.",
        PurchCrMemoHdr.FIELDNO("No."),
        PurchCrMemoHdr.FIELDNO("Posting Date"),
        DocNoFilter,
        PostingDateFilter,
        DATABASE::"Purchase Header",
        PurchHeader."Document Type"::"Return Order",
        PurchCrMemoHdr.FIELDNO("Return Order No."));

      FilterDocAndTable(Doc2,
        DATABASE::"Return Shipment Header",
        RetShptHeader.FIELDNO("No."),
        RetShptHeader.FIELDNO("Posting Date"),
        DocNoFilter,
        PostingDateFilter,
        DATABASE::"Purchase Header",
        PurchHeader."Document Type"::"Return Order",
        RetShptHeader.FIELDNO("Return Order No."));

      FilterDocAndTable(Doc2,
        DATABASE::"Sales Invoice Header",
        SalesInvHeader.FIELDNO("No."),
        SalesInvHeader.FIELDNO("Posting Date"),
        DocNoFilter,
        PostingDateFilter,
        DATABASE::"Sales Header",
        SalesHeader."Document Type"::Invoice,
        SalesInvHeader.FIELDNO("Pre-Assigned No."));

      FilterDocAndTable(Doc2,
        DATABASE::"Sales Invoice Header",
        SalesInvHeader.FIELDNO("No."),
        SalesInvHeader.FIELDNO("Posting Date"),
        DocNoFilter,
        PostingDateFilter,
        DATABASE::"Sales Header",
        SalesHeader."Document Type"::Order,
        SalesInvHeader.FIELDNO("Order No."));

      FilterDocAndTable(Doc2,
        DATABASE::"Sales Shipment Header",
        SalesShipHeader.FIELDNO("No."),
        SalesShipHeader.FIELDNO("Posting Date"),
        DocNoFilter,
        PostingDateFilter,
        DATABASE::"Sales Header",
        SalesHeader."Document Type"::Order,
        SalesShipHeader.FIELDNO("Order No."));

      FilterDocAndTable(Doc2,
        DATABASE::"Sales Cr.Memo Header",
        SalesCrMemoHdr.FIELDNO("No."),
        SalesCrMemoHdr.FIELDNO("Posting Date"),
        DocNoFilter,
        PostingDateFilter,
        DATABASE::"Sales Header",
        SalesHeader."Document Type"::"Credit Memo",
        SalesCrMemoHdr.FIELDNO("Pre-Assigned No."));

      FilterDocAndTable(Doc2,
        DATABASE::"Sales Cr.Memo Header",
        SalesCrMemoHdr.FIELDNO("No."),
        SalesCrMemoHdr.FIELDNO("Posting Date"),
        DocNoFilter,
        PostingDateFilter,
        DATABASE::"Sales Header",
        SalesHeader."Document Type"::"Return Order",
        SalesCrMemoHdr.FIELDNO("Return Order No."));

      FilterDocAndTable(Doc2,
        DATABASE::"Return Receipt Header",
        RetRcpHeader.FIELDNO("No."),
        RetRcpHeader.FIELDNO("Posting Date"),
        DocNoFilter,
        PostingDateFilter,
        DATABASE::"Sales Header",
        SalesHeader."Document Type"::"Return Order",
        RetRcpHeader.FIELDNO("Return Order No."));

      // *********************************************************************************************************************************
      // Filter records registrered directly to a document and therefor filter the following tables based on the document no.
      // *********************************************************************************************************************************
      FilterDoc(Doc2,DATABASE::"Purch. Inv. Header",DocNoFilter);
      FilterDoc(Doc2,DATABASE::"Purch. Rcpt. Header",DocNoFilter);
      FilterDoc(Doc2,DATABASE::"Purch. Cr. Memo Hdr.",DocNoFilter);
      FilterDoc(Doc2,DATABASE::"Return Shipment Header",DocNoFilter);

      FilterDoc(Doc2,DATABASE::"Sales Invoice Header",DocNoFilter);
      FilterDoc(Doc2,DATABASE::"Sales Shipment Header",DocNoFilter);
      FilterDoc(Doc2,DATABASE::"Sales Cr.Memo Header",DocNoFilter);
      FilterDoc(Doc2,DATABASE::"Return Receipt Header",DocNoFilter);
      FilterDoc(Doc2,DATABASE::"Issued Reminder Header",DocNoFilter);
      FilterDoc(Doc2,DATABASE::"Issued Fin. Charge Memo Header",DocNoFilter);

      FilterDoc(Doc2,DATABASE::"Production Order",DocNoFilter);

      FilterDoc(Doc2,DATABASE::"Transfer Shipment Header",DocNoFilter);
      FilterDoc(Doc2,DATABASE::"Transfer Receipt Header",DocNoFilter);

      FilterDoc(Doc2,DATABASE::"Service Header",DocNoFilter);
      FilterDoc(Doc2,DATABASE::"G/L Entry",DocNoFilter);
      FilterDoc(Doc2,DATABASE::"Cust. Ledger Entry",DocNoFilter);
      FilterDoc(Doc2,DATABASE::"Vendor Ledger Entry",DocNoFilter);
      FilterDoc(Doc2,DATABASE::"Item Ledger Entry",DocNoFilter);
      FilterDoc(Doc2,DATABASE::"Res. Ledger Entry",DocNoFilter);
      FilterDoc(Doc2,DATABASE::"Job Ledger Entry",DocNoFilter);
      FilterDoc(Doc2,DATABASE::"Value Entry",DocNoFilter);
      FilterDoc(Doc2,DATABASE::"Bank Account Ledger Entry",DocNoFilter);
      FilterDoc(Doc2,DATABASE::"Check Ledger Entry",DocNoFilter);
      FilterDoc(Doc2,DATABASE::"FA Ledger Entry",DocNoFilter);
      FilterDoc(Doc2,DATABASE::"Maintenance Ledger Entry",DocNoFilter);
      FilterDoc(Doc2,DATABASE::"Service Ledger Entry",DocNoFilter);
      FilterDoc(Doc2,DATABASE::"Warranty Ledger Entry",DocNoFilter);
      FilterDoc(Doc2,DATABASE::"Warehouse Entry",DocNoFilter);
    END;

    LOCAL PROCEDURE FilterDoc@1160040000(VAR Doc2@1160040005 : Record 6085590;TableNo@1160040000 : Integer;DocIDFilter@1160040004 : Code[250]);
    VAR
      RecRef@1160040006 : RecordRef SECURITYFILTERING(Filtered);
    BEGIN
      IF FilterRecRef(RecRef,TableNo,0,0,'','') THEN
        AddDoc(Doc2,0,TableNo,0,DocIDFilter,'');
    END;

    LOCAL PROCEDURE FilterDocAndTable@1160040005(VAR Doc2@6085585 : Record 6085590;TableNo@6085584 : Integer;Fld1@6085583 : Integer;Fld2@6085582 : Integer;Val1@6085581 : Text[250];Val2@6085580 : Text[250];DocType@6085579 : Integer;SubType@6085578 : Integer;DocIDFieldNo@6085577 : Integer);
    VAR
      RecRef@6085575 : RecordRef SECURITYFILTERING(Filtered);
      FieldRef@6085574 : FieldRef;
      FieldRef2@6085573 : FieldRef;
    BEGIN
      IF FilterRecRef(RecRef,TableNo,Fld1,Fld2,Val1,Val2) THEN
        REPEAT
          FieldRef := RecRef.FIELD(DocIDFieldNo);

          IF (TableNo IN [DATABASE::"Purch. Inv. Header",DATABASE::"Purch. Cr. Memo Hdr."]) AND
            (DocType = DATABASE::"Purchase Header") AND (SubType IN [1,5])  // 1 = Order, 5 = Return Order
          THEN BEGIN
            // Field 68 = Vendor Invoice No., Field 69 = Vendor Cr. Memo No.
            IF TableNo = DATABASE::"Purch. Inv. Header" THEN
              FieldRef2 := RecRef.FIELD(68)
            ELSE
              FieldRef2 := RecRef.FIELD(69);

            AddDoc(Doc2,0,DocType,SubType,FORMAT(FieldRef.VALUE),FORMAT(FieldRef2.VALUE));
          END ELSE
            AddDoc(Doc2,0,DocType,SubType,FORMAT(FieldRef.VALUE),'');
        UNTIL RecRef.NEXT = 0;
    END;

    LOCAL PROCEDURE FilterRecRef@1160040007(VAR RecRef@1160040000 : RecordRef;TableNo@1160040006 : Integer;FieldNo1@1160040003 : Integer;FieldNo2@1160040004 : Integer;Val1@1160040001 : Text[250];Val2@1160040002 : Text[250]) : Boolean;
    BEGIN
      RecRef.OPEN(TableNo);
      //RecRef.SETPERMISSIONFILTER;  Not supported from NAV 2013 and forward

      IF NOT RecRef.READPERMISSION THEN
        EXIT(FALSE);

      FilterFieldRef(RecRef,FieldNo1,Val1);
      FilterFieldRef(RecRef,FieldNo2,Val2);

      EXIT(RecRef.FINDFIRST);
    END;

    LOCAL PROCEDURE FilterFieldRef@1160040019(VAR RecRef@1160040000 : RecordRef;FldNo@1160040001 : Integer;Value@1160040002 : Text[250]);
    VAR
      FieldRef@1160040003 : FieldRef;
    BEGIN
      IF FldNo = 0 THEN
        EXIT;

      FieldRef := RecRef.FIELD(FldNo);
      FieldRef.SETFILTER(Value);
    END;

    LOCAL PROCEDURE AddDoc@1160040009(VAR Doc2@1160040000 : Record 6085590;RecIDTreeID@1160040004 : Integer;DocType@1160040001 : Integer;DocSubType@1160040002 : Integer;DocIDFilter@1160040003 : Text[250];ExtDocNo@6085577 : Code[35]);
    VAR
      Doc@1160040005 : Record 6085590 SECURITYFILTERING(Filtered);
      PurchaseHeader@6085574 : Record 38;
      PurchDocManagement@6085576 : Codeunit 6085709;
      ExtDocNoOnDocument@6085575 : Code[50];
      IncludeDocument@6085573 : Boolean;
      DocumentExcluded@6085578 : Boolean;
      DocIDFilter2@1100529600 : Text[250];
    BEGIN
      IF RecIDTreeID > 0 THEN BEGIN
        //Doc.SETPERMISSIONFILTER;  Not supported from NAV 2013 and forward
        Doc.SETCURRENTKEY("Source Record ID Tree ID");
        Doc.SETRANGE("Source Record ID Tree ID",RecIDTreeID);

        IF Doc.FINDSET THEN
          REPEAT
            IF NOT Doc2.GET(Doc."No.") THEN BEGIN
              Doc2 := Doc;
              Doc2.INSERT;
            END;
          UNTIL Doc.NEXT = 0;
      END ELSE BEGIN
        //Doc.SETPERMISSIONFILTER;  Not supported from NAV 2013 and forward
        Doc.SETCURRENTKEY("Created Doc. Type","Created Doc. Subtype","Created Doc. ID","Created Doc. Ref. No.");
        IF DocType > 0 THEN
          Doc.SETRANGE("Created Doc. Type",DocType);
        Doc.SETRANGE("Created Doc. Subtype",DocSubType);
        //Doc.SETRANGE("Created Doc. ID",DocIDFilter); //**4PS.o
        //**4PS.sn
        DocIDFilter2 := DocIDFilter;
        IF STRLEN(DocIDFilter) > MAXSTRLEN(Doc."Created Doc. ID") THEN
          IF (COPYSTR(DocIDFilter, 1, 1) = '''') AND (COPYSTR(DocIDFilter, STRLEN(DocIDFilter)) = '''') THEN
            DocIDFilter2 := COPYSTR(DocIDFilter, 2, STRLEN(DocIDFilter) - 2);
        IF STRLEN(DocIDFilter2) > MAXSTRLEN(Doc."Created Doc. ID") THEN
          Doc.SETFILTER("Created Doc. ID", DocIDFilter2)
        ELSE
          Doc.SETRANGE("Created Doc. ID", DocIDFilter2);
        //**4PS.en

        DocumentExcluded := FALSE;
        IF Doc.FINDSET THEN BEGIN
          REPEAT
            IF NOT Doc2.GET(Doc."No.") THEN BEGIN
              IncludeDocument := TRUE;
              IF (ExtDocNo <> '') AND (DocType = DATABASE::"Purchase Header") AND
                (DocSubType IN [PurchaseHeader."Document Type"::Order,PurchaseHeader."Document Type"::"Return Order"])
              THEN BEGIN
                ExtDocNoOnDocument := PurchDocManagement.GetDocumentNo(Doc);
                IF DocSubType = PurchaseHeader."Document Type"::Order THEN BEGIN
                  IF ExtDocNo <> ExtDocNoOnDocument THEN BEGIN
                    IncludeDocument := FALSE;
                    DocumentExcluded := TRUE;
                  END;
                END ELSE BEGIN
                  IF ExtDocNo <> ExtDocNoOnDocument THEN BEGIN
                    IncludeDocument := FALSE;
                    DocumentExcluded := TRUE;
                  END;
                END;
              END;

              IF IncludeDocument THEN BEGIN
                Doc2 := Doc;
                Doc2.INSERT;
              END;
            END;
          UNTIL Doc.NEXT = 0;

      // No document is found in above loop if the external document no. is changed on the PO before the PO is posted.
      // In this situation, we show all potential documents instead of showing no documents.
          IF DocumentExcluded THEN
            IF Doc2.ISEMPTY THEN
              IF Doc.FINDSET THEN
                REPEAT
                  IF NOT Doc2.GET(Doc."No.") THEN BEGIN
                    Doc2 := Doc;
                    Doc2.INSERT;
                  END;
                UNTIL Doc.NEXT = 0;
        END;
      END;
    END;

    BEGIN
    END.
  }
}

