OBJECT Codeunit 11128590 Export BankData Fixed Width
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVDK9.00 (13660);
  }
  PROPERTIES
  {
    TableNo=1226;
    Permissions=TableData 1220=rimd,
                TableData 1221=rimd,
                TableData 1226=rimd;
    OnRun=VAR
            DataLines@1060003 : Text;
            FooterLine@1060001 : Text;
            HeaderLine@1060000 : Text;
          BEGIN
            FindDefinition;
            DefineLineCharacteristics;

            HeaderLine := PrepareHeaderLine(Rec);
            DataLines := PrepareDataLines("Data Exch Entry No.");
            FooterLine := PrepareFooterLine(Rec);

            WriteToBlob("Data Exch Entry No.",HeaderLine,DataLines,FooterLine);
          END;

  }
  CODE
  {
    VAR
      NotSameDueDateForAllLinesErr@1060000 : TextConst 'ENU=The Transfer Date value should be the same for all payment export data within the specified filters: %1.';
      DataExchDef@1060006 : Record 1222;
      Delimiter@1060004 : Text;
      Separator@1060003 : Text;

    LOCAL PROCEDURE FindDefinition@1060007();
    BEGIN
      DataExchDef.SETRANGE(Type,DataExchDef.Type::"Payment Export");
      DataExchDef.SETRANGE("Reading/Writing Codeunit",CODEUNIT::"Export BankData Fixed Width");
      DataExchDef.FINDFIRST;
    END;

    LOCAL PROCEDURE DefineLineCharacteristics@1060000();
    BEGIN
      Separator := DataExchDef.ColumnSeparatorChar;
      Delimiter := '"';
    END;

    LOCAL PROCEDURE GetTransferDate@1060024(VAR PaymentExportData@1060000 : Record 1226) : Text;
    VAR
      PaymentExportData2@1060001 : Record 1226;
    BEGIN
      PaymentExportData2.COPYFILTERS(PaymentExportData);
      PaymentExportData2.SETRANGE("Data Exch Entry No.",PaymentExportData."Data Exch Entry No.");
      PaymentExportData2.SETFILTER("Transfer Date",'<>%1',PaymentExportData."Transfer Date");

      IF NOT PaymentExportData2.ISEMPTY THEN
        ERROR(NotSameDueDateForAllLinesErr,PaymentExportData.GETFILTERS);

      EXIT(FORMAT(PaymentExportData."Transfer Date",0,'<Year4><Month,2><Day,2>'));
    END;

    LOCAL PROCEDURE GetLineCount@1060031(PaymentExportData@1060000 : Record 1226) : Text;
    BEGIN
      EXIT(FORMAT(PaymentExportData."Line No.",0,'<Integer,6><Filler Character,0>'));
    END;

    LOCAL PROCEDURE GetTotalAmount@1060036(PaymentExportData@1060000 : Record 1226) : Text;
    BEGIN
      EXIT(FORMAT(100 * PaymentExportData.Amount,0,'<Integer,13><Filler Character,0><Sign,1><Filler Character,+>'));
    END;

    LOCAL PROCEDURE PrepareHeaderLine@1060010(VAR PaymentExportData@1060000 : Record 1226) HeaderLine : Text;
    BEGIN
      HeaderLine := Delimiter + 'IB000000000000' + Delimiter + Separator;
      HeaderLine += Delimiter + GetTransferDate(PaymentExportData) + Delimiter + Separator;
      HeaderLine += Delimiter + PADSTR('',90,' ') + Delimiter + Separator;
      HeaderLine += Delimiter + PADSTR('',255,' ') + Delimiter + Separator;
      HeaderLine += Delimiter + PADSTR('',255,' ') + Delimiter + Separator;
      HeaderLine += Delimiter + PADSTR('',255,' ') + Delimiter;
    END;

    LOCAL PROCEDURE PrepareDataLines@1060011(DataExchEntryNo@1060000 : Integer) : Text;
    VAR
      TempBlob@1060002 : Record 99008535;
    BEGIN
      GenerateDataLines(DataExchEntryNo,TempBlob);
      EXIT(RetrieveDataLines(TempBlob));
    END;

    LOCAL PROCEDURE GenerateDataLines@1060001(DataExchEntryNo@1060000 : Integer;VAR TempBlob@1060001 : Record 99008535);
    VAR
      DataExchField@1060005 : Record 1221;
      ExportGenericFixedWidth@1060006 : XMLport 1231;
      OutputStream@1060003 : OutStream;
    BEGIN
      TempBlob.Blob.CREATEOUTSTREAM(OutputStream);
      DataExchField.SETRANGE("Data Exch. No.",DataExchEntryNo);

      ExportGenericFixedWidth.SETTABLEVIEW(DataExchField);
      ExportGenericFixedWidth.FIELDDELIMITER(Delimiter);
      ExportGenericFixedWidth.FIELDSEPARATOR(Separator);
      ExportGenericFixedWidth.SETDESTINATION(OutputStream);
      ExportGenericFixedWidth.EXPORT;
    END;

    LOCAL PROCEDURE RetrieveDataLines@1060005(VAR TempBlob@1060000 : Record 99008535) DataLines : Text;
    VAR
      InputStream@1060002 : InStream;
      CarriageReturn@1060001 : Char;
      DataLine@1060003 : Text;
      LineFeed@1060004 : Char;
    BEGIN
      TempBlob.Blob.CREATEINSTREAM(InputStream);
      CarriageReturn := 13;
      LineFeed := 10;

      REPEAT
        InputStream.READTEXT(DataLine);
        DataLines += DataLine;
        IF NOT InputStream.EOS THEN
          DataLines += FORMAT(CarriageReturn) + FORMAT(LineFeed);
      UNTIL InputStream.EOS;
    END;

    LOCAL PROCEDURE PrepareFooterLine@1060012(VAR PaymentExportData@1060000 : Record 1226) FooterLine : Text;
    BEGIN
      FooterLine := Delimiter + 'IB999999999999' + Delimiter + Separator;
      FooterLine += Delimiter + GetTransferDate(PaymentExportData) + Delimiter + Separator;
      FooterLine += Delimiter + GetLineCount(PaymentExportData) + Delimiter + Separator;
      FooterLine += Delimiter + GetTotalAmount(PaymentExportData) + Delimiter + Separator;
      FooterLine += Delimiter + PADSTR('',64,' ') + Delimiter + Separator;
      FooterLine += Delimiter + PADSTR('',255,' ') + Delimiter + Separator;
      FooterLine += Delimiter + PADSTR('',255,' ') + Delimiter + Separator;
      FooterLine += Delimiter + PADSTR('',255,' ') + Delimiter;
    END;

    LOCAL PROCEDURE WriteToBlob@1060002(DataExchEntryNo@1060001 : Integer;Header@1060005 : Text;Body@1060004 : Text;Footer@1060003 : Text);
    VAR
      DataExch@1060000 : Record 1220;
      OutStream@1060002 : OutStream;
    BEGIN
      DataExch.GET(DataExchEntryNo);
      DataExch."File Content".CREATEOUTSTREAM(OutStream);

      OutStream.WRITETEXT(Header);
      OutStream.WRITETEXT;
      OutStream.WRITETEXT(Body);
      OutStream.WRITETEXT;
      OutStream.WRITETEXT(Footer);

      DataExch.MODIFY;
    END;

    BEGIN
    END.
  }
}

