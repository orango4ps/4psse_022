OBJECT Codeunit 99000815 Reservation-Check Date Confl.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.03,4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'DEU=Die énderung fÅhrt zu einem Datumskonflikt bei vorhandenen Reservierungen.\;ENU=The change leads to a date conflict with existing reservations.\;NLD=De wijziging veroorzaakt een datumconflict met bestaande reserveringen.\;NOR=Denne endringen medfõrer en datokonflikt med eksisterende reservasjoner.\;SVE=éndringen leder till en datumkonflikt med befintliga reservationer.\';
      Text001@1001 : TextConst 'DEU=Reservierte Menge (Basis): %1, Datum %2\;ENU=Reserved quantity (Base): %1, Date %2\;NLD=Geres. aantal (Basis): %1, Datum %2\;NOR=Reservert antall (lagernh.): %1, Dato %2\;SVE=Reserverat antal (bas): %1, datum %2\';
      Text002@1002 : TextConst 'DEU=Stornieren oder Ñndern Sie die Reservierungen und versuchen Sie es erneut.;ENU=Cancel or change reservations and try again.;NLD=Annuleer of wijzig de reserveringen en probeer opnieuw.;NOR=Avbryt eller endre reservasjoner og prõv pÜ nytt.;SVE=Avbryt eller Ñndra reservation och fîrsîk igen.';
      ReservEntry@1003 : Record 337;
      ReservEngineMgt@1004 : Codeunit 99000831;
      ReserveSalesLine@1005 : Codeunit 99000832;
      ReservePurchLine@1006 : Codeunit 99000834;
      ReserveReqLine@1007 : Codeunit 99000833;
      ReserveItemJnlLine@1008 : Codeunit 99000835;
      ReserveProdOrderLine@1009 : Codeunit 99000837;
      ReserveProdOrderComp@1010 : Codeunit 99000838;
      AssemblyHeaderReserve@1017 : Codeunit 925;
      AssemblyLineReserve@1016 : Codeunit 926;
      ReservePlanningComponent@1011 : Codeunit 99000840;
      ReserveTransLine@1012 : Codeunit 99000836;
      ServLineReserve@1013 : Codeunit 99000842;
      JobPlanningLineReserve@1015 : Codeunit 1032;
      ReservMgt@1014 : Codeunit 99000845;
      DateConflictMsg@1019 : TextConst '@@@=%1: Field(Reserved Quantity (Base)), %2: Field(Due Date);DEU=Die énderung fÅhrt zu einem Datumskonflikt mit einer bestehenden Reservierung an %2 fÅr %1 Einheiten.\ \Die Reservierungen wurden storniert. Der Fertigungsauftrag muss neu geplant werden.;ENU=The change causes a date conflict with an existing reservation on %2 for %1 units.\ \The reservations have been canceled. The production order must be replanned.;NLD=De wijziging veroorzaakt een datumconflict met een bestaande reservering op %2 voor %1 eenheden.\ \De reserveringen zijn geannuleerd. De productieorder moet opnieuw worden gepland.;NOR=Endringene fõrer til en datokonflikt med en eksisterende reservasjon den %2 for %1 enheter.\ \Reservasjonene er annullert. Produksjonsordren mÜ planlegges pÜ nytt.;SVE=éndringen orsakar en datumkonflikt med en befintlig reservation den %2 fîr %1 enheter.\ \Reservationerna har annullerats. Produktionsordern mÜste planeras om.';

    [External]
    PROCEDURE SalesLineCheck@2(SalesLine@1000 : Record 37;ForceRequest@1001 : Boolean);
    BEGIN
      IF NOT ReserveSalesLine.FindReservEntry(SalesLine,ReservEntry) THEN
        EXIT;
      IF DateConflict(SalesLine."Shipment Date",ForceRequest) THEN
        IF ForceRequest THEN
          IssueError(SalesLine."Shipment Date");
      UpdateDate(ReservEntry,SalesLine."Shipment Date");
      ReservMgt.SetSalesLine(SalesLine);
      ReservMgt.ClearSurplus;
      ReservMgt.AutoTrack(SalesLine."Outstanding Qty. (Base)");
    END;

    [External]
    PROCEDURE PurchLineCheck@7(PurchLine@1000 : Record 39;ForceRequest@1001 : Boolean);
    BEGIN
      IF NOT ReservePurchLine.FindReservEntry(PurchLine,ReservEntry) THEN
        EXIT;
      IF DateConflict(PurchLine."Expected Receipt Date",ForceRequest) THEN
        IF ForceRequest THEN
          IssueError(PurchLine."Expected Receipt Date");
      UpdateDate(ReservEntry,PurchLine."Expected Receipt Date");
      ReservMgt.SetPurchLine(PurchLine);
      ReservMgt.ClearSurplus;
      ReservMgt.AutoTrack(PurchLine."Outstanding Qty. (Base)");
    END;

    [External]
    PROCEDURE ItemJnlLineCheck@4(ItemJnlLine@1000 : Record 83;ForceRequest@1001 : Boolean);
    BEGIN
      IF NOT ReserveItemJnlLine.FindReservEntry(ItemJnlLine,ReservEntry) THEN
        EXIT;
      IF DateConflict(ItemJnlLine."Posting Date",ForceRequest) THEN
        IF ForceRequest THEN
          IssueError(ItemJnlLine."Posting Date");
      UpdateDate(ReservEntry,ItemJnlLine."Posting Date");
      ReservMgt.SetItemJnlLine(ItemJnlLine);
      ReservMgt.ClearSurplus;
      ReservMgt.AutoTrack(ItemJnlLine."Quantity (Base)");
    END;

    [External]
    PROCEDURE ReqLineCheck@8(ReqLine@1000 : Record 246;ForceRequest@1001 : Boolean);
    BEGIN
      IF NOT ReserveReqLine.FindReservEntry(ReqLine,ReservEntry) THEN
        EXIT;
      IF DateConflict(ReqLine."Due Date",ForceRequest) THEN
        IF ForceRequest THEN
          IssueError(ReqLine."Due Date");
      UpdateDate(ReservEntry,ReqLine."Due Date");
      ReservMgt.SetReqLine(ReqLine);
      ReservMgt.ClearSurplus;
      ReservMgt.AutoTrack(ReqLine."Quantity (Base)");
    END;

    [External]
    PROCEDURE ProdOrderLineCheck@9(ProdOrderLine@1000 : Record 5406;ForceRequest@1001 : Boolean);
    BEGIN
      IF NOT ReserveProdOrderLine.FindReservEntry(ProdOrderLine,ReservEntry) THEN
        EXIT;
      IF DateConflict(ProdOrderLine."Due Date",ForceRequest) THEN
        IF ForceRequest THEN
          IssueError(ProdOrderLine."Due Date");
      UpdateDate(ReservEntry,ProdOrderLine."Due Date");
      ReservMgt.SetProdOrderLine(ProdOrderLine);
      ReservMgt.ClearSurplus;
      ReservMgt.AutoTrack(ProdOrderLine."Remaining Qty. (Base)");
    END;

    [External]
    PROCEDURE ProdOrderComponentCheck@10(ProdOrderComp@1000 : Record 5407;ForceRequest@1002 : Boolean;IsCritical@1001 : Boolean) : Boolean;
    BEGIN
      IF NOT ReserveProdOrderComp.FindReservEntry(ProdOrderComp,ReservEntry) THEN
        EXIT(FALSE);
      IF DateConflict(ProdOrderComp."Due Date",ForceRequest) THEN
        IF ForceRequest THEN
          IF IsCritical THEN
            IssueError(ProdOrderComp."Due Date")
          ELSE
            IssueWarning(ProdOrderComp."Due Date");
      UpdateDate(ReservEntry,ProdOrderComp."Due Date");
      ReservMgt.SetProdOrderComponent(ProdOrderComp);
      ReservMgt.ClearSurplus;
      ReservMgt.AutoTrack(ProdOrderComp."Remaining Qty. (Base)");
      EXIT(ForceRequest);
    END;

    [External]
    PROCEDURE AssemblyHeaderCheck@15(AssemblyHeader@1000 : Record 900;ForceRequest@1001 : Boolean);
    BEGIN
      IF NOT AssemblyHeaderReserve.FindReservEntry(AssemblyHeader,ReservEntry) THEN
        EXIT;
      IF DateConflict(AssemblyHeader."Due Date",ForceRequest) THEN
        IF ForceRequest THEN
          IssueError(AssemblyHeader."Due Date");
      UpdateDate(ReservEntry,AssemblyHeader."Due Date");
      ReservMgt.SetAssemblyHeader(AssemblyHeader);
      ReservMgt.ClearSurplus;
      ReservMgt.AutoTrack(AssemblyHeader."Remaining Quantity (Base)");
    END;

    [External]
    PROCEDURE AssemblyLineCheck@14(AssemblyLine@1000 : Record 901;ForceRequest@1001 : Boolean);
    BEGIN
      IF NOT AssemblyLineReserve.FindReservEntry(AssemblyLine,ReservEntry) THEN
        EXIT;
      IF DateConflict(AssemblyLine."Due Date",ForceRequest) THEN
        IF ForceRequest THEN
          IssueError(AssemblyLine."Due Date");
      UpdateDate(ReservEntry,AssemblyLine."Due Date");
      ReservMgt.SetAssemblyLine(AssemblyLine);
      ReservMgt.ClearSurplus;
      ReservMgt.AutoTrack(AssemblyLine."Remaining Quantity (Base)");
    END;

    [External]
    PROCEDURE PlanningComponentCheck@12(PlanningComponent@1000 : Record 99000829;ForceRequest@1001 : Boolean);
    BEGIN
      IF NOT ReservePlanningComponent.FindReservEntry(PlanningComponent,ReservEntry) THEN
        EXIT;
      IF DateConflict(PlanningComponent."Due Date",ForceRequest) THEN
        IF ForceRequest THEN
          IssueError(PlanningComponent."Due Date");
      UpdateDate(ReservEntry,PlanningComponent."Due Date");
      ReservMgt.SetPlanningComponent(PlanningComponent);
      ReservMgt.ClearSurplus;
      ReservMgt.AutoTrack(PlanningComponent."Net Quantity (Base)");
    END;

    [External]
    PROCEDURE TransferLineCheck@11(TransLine@1000 : Record 5741);
    VAR
      ResEntryFound@1003 : Boolean;
      ForceRequest@1002 : Boolean;
      Direction@1001 : 'Outbound,Inbound';
    BEGIN
      IF ReserveTransLine.FindReservEntry(TransLine,ReservEntry,Direction::Outbound) THEN BEGIN
        ResEntryFound := TRUE;
        ForceRequest := TRUE;
        IF DateConflict(TransLine."Shipment Date",ForceRequest) THEN
          IF ForceRequest THEN
            IssueError(TransLine."Shipment Date");
        UpdateDate(ReservEntry,TransLine."Shipment Date");
      END;

      IF ReserveTransLine.FindInboundReservEntry(TransLine,ReservEntry) THEN BEGIN
        ResEntryFound := TRUE;
        ForceRequest := TRUE;
        IF DateConflict(TransLine."Receipt Date",ForceRequest) THEN
          IF ForceRequest THEN
            IssueError(TransLine."Receipt Date");
        UpdateDate(ReservEntry,TransLine."Receipt Date");
      END;
      IF NOT ResEntryFound THEN
        EXIT;
      ReservMgt.SetTransferLine(TransLine,Direction);
      ReservMgt.ClearSurplus;
      ReservMgt.AutoTrack(TransLine."Outstanding Qty. (Base)");
    END;

    [External]
    PROCEDURE ServiceInvLineCheck@5(ServLine@1000 : Record 5902;ForceRequest@1001 : Boolean);
    BEGIN
      IF NOT ServLineReserve.FindReservEntry(ServLine,ReservEntry) THEN
        EXIT;
      IF DateConflict(ServLine."Needed by Date",ForceRequest) THEN
        IF ForceRequest THEN
          IssueError(ServLine."Needed by Date");
      UpdateDate(ReservEntry,ServLine."Needed by Date");
      ReservMgt.SetServLine(ServLine);
      ReservMgt.ClearSurplus;
      ReservMgt.AutoTrack(ServLine."Outstanding Qty. (Base)");
    END;

    [External]
    PROCEDURE JobPlanningLineCheck@13(JobPlanningLine@1000 : Record 11020401;ForceRequest@1001 : Boolean);
    BEGIN
      IF NOT JobPlanningLineReserve.FindReservEntry(JobPlanningLine,ReservEntry) THEN
        EXIT;
      IF DateConflict(JobPlanningLine."Planning Date",ForceRequest) THEN
        IF ForceRequest THEN
          IssueError(JobPlanningLine."Planning Date");
      UpdateDate(ReservEntry,JobPlanningLine."Planning Date");
      ReservMgt.SetJobPlanningLine(JobPlanningLine);
      ReservMgt.ClearSurplus;
      ReservMgt.AutoTrack(JobPlanningLine."Remaining Qty. (Base)");
    END;

    LOCAL PROCEDURE UpdateDate@1(VAR FilterReservEntry@1000 : Record 337;Date@1001 : Date);
    VAR
      ForceModifyShipmentDate@1002 : Boolean;
    BEGIN
      FilterReservEntry.SETRANGE("Reservation Status");
      IF NOT FilterReservEntry.FIND('-') THEN
        EXIT;

      REPEAT
        OnUpdateDateFilterReservEntryLoop(FilterReservEntry,ForceModifyShipmentDate,Date);
        IF FilterReservEntry."Quantity (Base)" < 0 THEN
          IF (FilterReservEntry."Expected Receipt Date" <> 0D) AND
             (Date < FilterReservEntry."Expected Receipt Date") AND NOT ForceModifyShipmentDate
          THEN
            IF (FilterReservEntry.Binding <> FilterReservEntry.Binding::"Order-to-Order") AND
               FilterReservEntry.TrackingExists
            THEN
              ReservEngineMgt.SplitTrackingConnection(FilterReservEntry,Date)
            ELSE
              IF SameProdOrderAutoReserve(FilterReservEntry) THEN
                ReservEngineMgt.ModifyExpectedReceiptDate(FilterReservEntry,Date)
              ELSE
                ReservEngineMgt.CloseReservEntry(FilterReservEntry,FALSE,FALSE)
          ELSE
            ReservEngineMgt.ModifyShipmentDate(FilterReservEntry,Date)
        ELSE
          IF ((FilterReservEntry."Shipment Date" <> 0D) AND
              (FilterReservEntry."Shipment Date" < Date))
          THEN
            IF (FilterReservEntry.Binding <> FilterReservEntry.Binding::"Order-to-Order") AND
               FilterReservEntry.TrackingExists
            THEN
              ReservEngineMgt.SplitTrackingConnection(FilterReservEntry,Date)
            ELSE
              ReservEngineMgt.CloseReservEntry(FilterReservEntry,FALSE,FALSE)
          ELSE
            ReservEngineMgt.ModifyExpectedReceiptDate(FilterReservEntry,Date);
      UNTIL FilterReservEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE DateConflict@3(Date@1001 : Date;VAR ForceRequest@1002 : Boolean) IsConflict@1000 : Boolean;
    VAR
      ReservEntry2@1003 : Record 337;
    BEGIN
      ReservEntry2.COPY(ReservEntry);

      IF NOT ReservEntry2.FINDFIRST THEN
        EXIT(FALSE);

      IF ReservEntry2."Quantity (Base)" < 0 THEN
        ReservEntry2.SETFILTER("Expected Receipt Date",'>%1',Date)
      ELSE
        IF Date <> 0D THEN
          ReservEntry2.SETRANGE("Shipment Date",00000101D,Date - 1);

      IF ReservEntry2.ISEMPTY THEN
        EXIT(FALSE);

      IsConflict := TRUE;

      // Don't look at tracking and surplus:
      ReservEntry2.SETRANGE("Reservation Status",ReservEntry2."Reservation Status"::Reservation);

      ForceRequest := NOT ReservEntry2.ISEMPTY AND ForceRequest;

      EXIT(IsConflict);
    END;

    LOCAL PROCEDURE IssueError@6(NewDate@1000 : Date);
    VAR
      ReservQty@1001 : Decimal;
    BEGIN
      ReservQty := CalcReservQty(NewDate);
      ERROR(Text000 + Text001 + Text002,ReservQty,NewDate);
    END;

    LOCAL PROCEDURE IssueWarning@17(NewDate@1000 : Date);
    VAR
      ReservQty@1001 : Decimal;
    BEGIN
      ReservQty := CalcReservQty(NewDate);
      MESSAGE(DateConflictMsg,ReservQty,NewDate);
    END;

    LOCAL PROCEDURE CalcReservQty@1010(NewDate@1102601000 : Date) : Decimal;
    VAR
      ReservEntry2@1102601002 : Record 337;
      CreateReservEntry@1001 : Codeunit 99000830;
      ReservDueDate@1102601004 : Date;
      ReservExpectDate@1102601005 : Date;
      SumValue@1102601001 : Decimal;
    BEGIN
      ReservEntry2.COPY(ReservEntry);
      ReservDueDate := NewDate;
      ReservExpectDate := NewDate;

      IF NOT ReservEntry2.FIND('-') THEN
        EXIT(0);
      IF ReservEntry2."Quantity (Base)" < 0 THEN
        ReservExpectDate := 0D
      ELSE
        ReservDueDate := DMY2DATE(31,12,9999);

      REPEAT
        SumValue += ReservEntry2."Quantity (Base)";
        IF ReservEntry2."Quantity (Base)" < 0 THEN BEGIN
          IF ReservEntry2."Expected Receipt Date" <> 0D THEN  // Item ledger entries will be 0D.
            IF (ReservEntry2."Expected Receipt Date" > ReservExpectDate) AND
               (ReservEntry2."Expected Receipt Date" > ReservDueDate)
            THEN
              ReservExpectDate := ReservEntry2."Expected Receipt Date";
        END ELSE BEGIN
          IF ReservEntry2."Shipment Date" <> 0D THEN          // Item ledger entries will be 0D.
            IF (ReservEntry2."Shipment Date" < ReservDueDate) AND (ReservEntry2."Shipment Date" < ReservExpectDate) THEN
              ReservDueDate := ReservEntry2."Shipment Date";
        END;
      UNTIL ReservEntry2.NEXT = 0;

      EXIT(CreateReservEntry.SignFactor(ReservEntry2) * SumValue);
    END;

    LOCAL PROCEDURE SameProdOrderAutoReserve@16(FilterReservEntry@1000 : Record 337) : Boolean;
    VAR
      ProdOrderLineReservationEntry@1001 : Record 337;
    BEGIN
      IF FilterReservEntry."Source Type" = DATABASE::"Prod. Order Component" THEN
        IF ProdOrderLineReservationEntry.GET(FilterReservEntry."Entry No.",NOT FilterReservEntry.Positive) THEN
          IF ProdOrderLineReservationEntry."Source Type" = DATABASE::"Prod. Order Line" THEN
            IF FilterReservEntry."Source ID" = ProdOrderLineReservationEntry."Source ID" THEN
              EXIT(ProdOrderLineReservationEntry."Source Prod. Order Line" = GetSuppliedByLineNoByReservationEntry(FilterReservEntry));
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE GetSuppliedByLineNoByReservationEntry@18(ReservationEntry@1001 : Record 337) : Integer;
    VAR
      ProdOrderComponent@1000 : Record 5407;
    BEGIN
      WITH ReservationEntry DO
        ProdOrderComponent.GET("Source Subtype","Source ID","Source Prod. Order Line","Source Ref. No.");
      EXIT(ProdOrderComponent."Supplied-by Line No.");
    END;

    [Integration]
    LOCAL PROCEDURE OnUpdateDateFilterReservEntryLoop@19(VAR ReservationEntry@1000 : Record 337;VAR ForceModifyShipmentDate@1001 : Boolean;Date@1002 : Date);
    BEGIN
    END;

    BEGIN
    END.
  }
}

