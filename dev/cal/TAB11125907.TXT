OBJECT Table 11125907 Gen. Issue
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=VAR
               GenChecklistSetup@1100528701 : Record 11125905;
               UserSetup@1100528703 : Record 91;
               Resource@1100528704 : Record 11229278;
               NoSeriesMgt@1100528700 : Codeunit 396;
               LinkedTo@1100528702 : RecordID;
             BEGIN
               IF "No." = '' THEN BEGIN
                 GenChecklistSetup.GET;
                 GenChecklistSetup.TESTFIELD("Issue Nos.");
                 NoSeriesMgt.InitSeries(GenChecklistSetup."Issue Nos.", xRec."No. Series", 0D, "No.", "No. Series");
               END;

               IF GetLinkedToFromFilter(LinkedTo) THEN
                 InsertLink(LinkedTo);

               "Created On" := CURRENTDATETIME;
               IF UserSetup.GET(USERID) THEN BEGIN
                 Resource.SETRANGE(Type, Resource.Type::Employee);
                 Resource.SETRANGE(Company, COMPANYNAME);
                 Resource.SETRANGE("Source No.", UserSetup."Employee No.");
                 IF Resource.FINDFIRST THEN
                   VALIDATE("Created By", Resource."No.");
               END;
             END;

    OnDelete=VAR
               GenIssueLink@1100528700 : Record 11125908;
               DocumentLink@1100528701 : Record 11012747;
               RecRef@1100528702 : RecordRef;
             BEGIN
               GenIssueLink.SETRANGE("Issue No.", "No.");
               GenIssueLink.DELETEALL(TRUE);

               RecRef.GETTABLE(Rec);
               DocumentLink.SETRANGE("Table No.", RecRef.NUMBER);
               DocumentLink.SETRANGE("Record ID", RecRef.RECORDID);
               DocumentLink.DELETEALL;
             END;

    CaptionML=ENU=Generic Issue;
    LookupPageID=Page11127330;
  }
  FIELDS
  {
    { 10  ;   ;No.                 ;Code20        ;DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=No.;
                                                              SVE=Nr] }
    { 20  ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=No. Series;
                                                              SVE=Nr-serie];
                                                   Editable=No }
    { 30  ;   ;Description         ;Text50        ;DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Description;
                                                              SVE=Beskrivning] }
    { 40  ;   ;Status              ;Option        ;InitValue=Open;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Status;
                                                              SVE=Status];
                                                   OptionCaptionML=ENU=,,Open,,,,,In Progress,,,,,On Hold,,,,,Finished;
                                                   OptionString=,,Open,,,,,InProgress,,,,,OnHold,,,,,Finished }
    { 50  ;   ;Solution Deadline   ;Date          ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Solution Deadline }
    { 60  ;   ;Issue Type          ;Code20        ;TableRelation="Gen. Issue Type".Code;
                                                   OnValidate=BEGIN
                                                                IF "Issue Type" <> xRec."Issue Type" THEN BEGIN
                                                                  CheckOnExistingChecklistCopyForIssue;
                                                                  CreateChecklistCopyForIssue;
                                                                END;
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Issue Type }
    { 70  ;   ;Responsible Person  ;Code20        ;TableRelation="Resource (WOP)".No. WHERE (Type=FILTER(Subcontractor|Employee));
                                                   OnValidate=VAR
                                                                Resource@1100528700 : Record 11229278;
                                                              BEGIN
                                                                IF "Responsible Person" <> '' THEN BEGIN
                                                                  GetFilteredResources(GetProjectNo, Resource);
                                                                  Resource.SETRANGE("No.", "Responsible Person");
                                                                  Resource.SETRANGE(Company, COMPANYNAME);
                                                                  Resource.FINDFIRST;
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              Resource@1100528700 : Record 11229278;
                                                            BEGIN
                                                              GetFilteredResources(GetProjectNo, Resource);
                                                              IF PAGE.RUNMODAL(0, Resource) = ACTION::LookupOK THEN
                                                                VALIDATE("Responsible Person", Resource."No.");
                                                            END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Responsible Person;
                                                              SVE=Ansvarig person] }
    { 80  ;   ;Created On          ;DateTime      ;DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Created On;
                                                              SVE=Skapades];
                                                   Editable=No }
    { 90  ;   ;Created By          ;Code20        ;TableRelation="Resource (WOP)".No. WHERE (Type=FILTER(Employee|Subcontractor));
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Created By;
                                                              SVE=Skapad av];
                                                   Editable=No }
    { 800 ;   ;Linked To Filter    ;RecordID      ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Linked To Filter }
    { 810 ;   ;Linked To Exists    ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Gen. Issue Link" WHERE (Issue No.=FIELD(No.),
                                                                                              Linked To=FIELD(Linked To Filter)));
                                                   CaptionML=;
                                                   Editable=No }
    { 900 ;   ;Linked To Table No. Filter;Integer ;FieldClass=FlowFilter;
                                                   CaptionML= }
    { 910 ;   ;Linked To Key 1 Filter;Code20      ;FieldClass=FlowFilter;
                                                   CaptionML= }
    { 920 ;   ;Linked To Key 2 Filter;Code20      ;FieldClass=FlowFilter;
                                                   CaptionML= }
    { 930 ;   ;Linked To Key 3 Filter;Code20      ;FieldClass=FlowFilter;
                                                   CaptionML= }
    { 940 ;   ;Linked To Key 4 Filter;Code20      ;FieldClass=FlowFilter;
                                                   CaptionML= }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1100528700 : TextConst 'ENU=There is already a checklist copy linked to this issue. Do you want to delete it?';
      Text001@1100528701 : TextConst 'ENU=Checklist copy %1 has been created for this issue.';

    LOCAL PROCEDURE InsertLink@1100528500(LinkedTo@1100528504 : RecordID);
    VAR
      GenIssueLink@1100528500 : Record 11125908;
      LineNo@1100528501 : Integer;
    BEGIN
      LineNo := 10000;
      GenIssueLink.SETRANGE("Issue No.", "No.");
      IF GenIssueLink.FINDLAST THEN
        LineNo += GenIssueLink."Line No.";
      GenIssueLink.INIT;
      GenIssueLink.RESET;
      GenIssueLink."Issue No." := "No.";
      GenIssueLink."Line No." := LineNo;
      GenIssueLink.VALIDATE("Linked To", LinkedTo);
      GenIssueLink.INSERT;
    END;

    LOCAL PROCEDURE GetLinkedToFromFilter@1100528502(VAR LinkedTo@1100528501 : RecordID) Ret : Boolean;
    VAR
      CurrentFilterGroup@1100528500 : Integer;
    BEGIN
      CurrentFilterGroup := FILTERGROUP;
      FILTERGROUP(4);
      IF GETFILTER("Linked To Filter") <> '' THEN
        Ret := EVALUATE(LinkedTo, GETFILTER("Linked To Filter"));
      FILTERGROUP(CurrentFilterGroup);
      EXIT(Ret);
    END;

    LOCAL PROCEDURE CheckOnExistingChecklistCopyForIssue@1100528700();
    VAR
      GenChecklistCopyLink@1100528700 : Record 11125904;
      GenChecklistCopy@1100528701 : Record 11125902;
    BEGIN
      IF NOT GUIALLOWED THEN
        EXIT;
      GenChecklistCopyLink.SETRANGE("Linked To", RECORDID);
      IF GenChecklistCopyLink.FINDFIRST THEN
        IF CONFIRM(Text000) THEN BEGIN
          IF GenChecklistCopy.GET(GenChecklistCopyLink."Checklist Copy No.") THEN
            GenChecklistCopy.DELETE(TRUE);
        END;
    END;

    LOCAL PROCEDURE CreateChecklistCopyForIssue@1100528701();
    VAR
      GenIssueType@1100528701 : Record 11125909;
      GenChecklistCopy@1100528700 : Record 11125902;
    BEGIN
      IF "Issue Type" = '' THEN
        EXIT;

      IF NOT GenIssueType.GET("Issue Type") THEN
        EXIT;

      IF GenIssueType."Checklist Code" = '' THEN
        EXIT;

      GenChecklistCopy.INIT;
      GenChecklistCopy.VALIDATE("Checklist Code", GenIssueType."Checklist Code");
      GenChecklistCopy.VALIDATE(Date, TODAY);
      GenChecklistCopy.FILTERGROUP(4);
      GenChecklistCopy.SETRANGE("Linked To Filter", RECORDID);
      GenChecklistCopy.FILTERGROUP(0);
      GenChecklistCopy.INSERT(TRUE);

      IF GUIALLOWED THEN
        MESSAGE(Text001, GenChecklistCopy."No.");
    END;

    PROCEDURE GetFilteredResources@1100528702(ProjectNo@1100528707 : Code[20];VAR Resource@1100528704 : Record 11229278);
    VAR
      ProjectResponsiblePerson@1100528703 : Record 11012040;
      ProjectAuthority@1100528705 : Record 11020216;
      Vendor@1100528706 : Record 23;
    BEGIN
      Resource.SETFILTER(Type, '%1|%2', Resource.Type::Employee, Resource.Type::Subcontractor);
      Resource.SETRANGE(Company, COMPANYNAME);

      IF ProjectNo <> '' THEN BEGIN
        IF Resource.FINDSET THEN
          REPEAT
            CASE Resource.Type OF
              Resource.Type::Employee:
                BEGIN
                  ProjectResponsiblePerson.SETRANGE("Project No.", ProjectNo);
                  ProjectResponsiblePerson.SETRANGE("Employee No.", Resource."Source No.");
                  IF NOT ProjectResponsiblePerson.ISEMPTY THEN
                    Resource.MARK(TRUE);
                END;
              Resource.Type::Subcontractor:
                BEGIN
                  IF Resource."Source No. 2" <> '' THEN BEGIN
                    ProjectAuthority.SETRANGE("Project No.", ProjectNo);
                    ProjectAuthority.SETRANGE("Contact Person No.", Resource."Source No. 2");
                    IF NOT ProjectAuthority.ISEMPTY THEN
                      Resource.MARK(TRUE);
                  END;
                END;
            END;
          UNTIL Resource.NEXT = 0;
        Resource.MARKEDONLY(TRUE);
      END;
    END;

    LOCAL PROCEDURE GetProjectNo@1100528706() ProjectNo : Code[20];
    VAR
      LinkedTo@1100528701 : RecordID;
      GenIssueLink@1100528700 : Record 11125908;
    BEGIN
      IF GetLinkedToFromFilter(LinkedTo) THEN
        ProjectNo := GetProjectNoFromLinks(LinkedTo);

      IF ProjectNo = '' THEN BEGIN
        GenIssueLink.SETRANGE("Issue No.", "No.");
        IF GenIssueLink.FINDFIRST THEN
          ProjectNo := GetProjectNoFromLinks(GenIssueLink."Linked To");
      END;
    END;

    LOCAL PROCEDURE GetProjectNoFromLinks@1100528703(LinkedTo@1100528708 : RecordID) : Code[20];
    VAR
      RecRef@1100528702 : RecordRef;
      Job@1100528701 : Record 11072003;
      ProjectElement@1100528706 : Record 11012010;
      Plot@1100528707 : Record 11012500;
      GenChecklistCopyLine@1100528703 : Record 11125903;
      GenChecklistCopy@1100528704 : Record 11125902;
      GenChecklistCopyLink@1100528705 : Record 11125904;
      ProjectNo@1100528709 : Code[20];
    BEGIN
      CASE LinkedTo.TABLENO OF
        DATABASE::Job:
          BEGIN
            RecRef.OPEN(LinkedTo.TABLENO);
            IF NOT RecRef.GET(LinkedTo) THEN
              EXIT;
            RecRef.SETTABLE(Job);
            EXIT(Job."No.");
          END;
        DATABASE::"Project Element":
          BEGIN
            RecRef.OPEN(LinkedTo.TABLENO);
            IF NOT RecRef.GET(LinkedTo) THEN
              EXIT;
            RecRef.SETTABLE(ProjectElement);
            EXIT(ProjectElement."Project No.");
          END;
        DATABASE::Plot:
          BEGIN
            RecRef.OPEN(LinkedTo.TABLENO);
            IF NOT RecRef.GET(LinkedTo) THEN
              EXIT;
            RecRef.SETTABLE(Plot);
            EXIT(Plot."Project No.");
          END;
        DATABASE::"Gen. Checklist Copy Line":
          BEGIN
            RecRef.OPEN(LinkedTo.TABLENO);
            IF NOT RecRef.GET(LinkedTo) THEN
              EXIT;
            RecRef.SETTABLE(GenChecklistCopyLine);
            IF NOT GenChecklistCopy.GET(GenChecklistCopyLine."Checklist Copy No.") THEN
              EXIT;
            GenChecklistCopyLink.SETRANGE("Checklist Copy No.", GenChecklistCopy."No.");
            IF GenChecklistCopyLink.FINDSET THEN
              REPEAT
                ProjectNo := GetProjectNoFromLinks(GenChecklistCopyLink."Linked To");
                IF ProjectNo <> '' THEN
                  EXIT(ProjectNo);
              UNTIL GenChecklistCopyLink.NEXT = 0;
          END;
      END;
    END;

    PROCEDURE GetDetailedDescriptionID@1100528705() : Integer;
    BEGIN
      EXIT(10);
    END;

    PROCEDURE GetSolutionDescriptionID@1100528704() : Integer;
    BEGIN
      EXIT(20);
    END;

    PROCEDURE GetCommentsID@1100528714() : Integer;
    BEGIN
      EXIT(30);
    END;

    BEGIN
    END.
  }
}

