OBJECT Page 11130783 Documents SF APPS WS
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=;
    SourceTable=Table11012746;
    PageType=List;
    OnFindRecord=VAR
                   DocumentProperties@1100526001 : Record 11012746;
                   RecRef@1100526002 : RecordRef;
                   KeyRef@1100526003 : KeyRef;
                   FldRef@1100526007 : FieldRef;
                   ParentTableNo@1100526004 : Integer;
                   ParentTableKey@1100526005 : ARRAY [4] OF Code[20];
                   I@1100526006 : Integer;
                 BEGIN
                   FILTERGROUP(4);
                   IF EVALUATE(ParentTableNo, GETFILTER("Parent Table No. Filter")) THEN;
                   ParentTableKey[1] := TrimQuotes(GETFILTER("Parent Table Key 1 Filter"));
                   ParentTableKey[2] := TrimQuotes(GETFILTER("Parent Table Key 2 Filter"));
                   ParentTableKey[3] := TrimQuotes(GETFILTER("Parent Table Key 3 Filter"));
                   ParentTableKey[4] := TrimQuotes(GETFILTER("Parent Table Key 4 Filter"));
                   FILTERGROUP(0);

                   DocumentProperties.COPY(Rec);
                   DocumentProperties.CLEARMARKS;

                   IF (ParentTableNo <> 0) AND (ParentTableKey[1] <> '') THEN BEGIN
                     RecRef.OPEN(ParentTableNo);
                     I := 1;
                     KeyRef := RecRef.KEYINDEX(1);
                     REPEAT
                       FldRef := KeyRef.FIELDINDEX(I);
                       FldRef.SETRANGE(ParentTableKey[I]);
                       I += 1;
                     UNTIL (I > KeyRef.FIELDCOUNT) OR (I > 4);
                     IF RecRef.FINDFIRST THEN
                       FilterSourceTable(RecRef, DocumentProperties)
                     ELSE
                       DocumentProperties.MARKEDONLY(TRUE);
                   END ELSE
                     DocumentProperties.MARKEDONLY(TRUE);

                   Rec.CLEARMARKS;
                   Rec.COPY(DocumentProperties);

                   EXIT(FIND(Which));
                 END;

    OnAfterGetRecord=BEGIN
                       GetDptVersion();
                     END;

  }
  CONTROLS
  {
    { 1100526000;0;Container;
                ContainerType=ContentArea }

    { 1100526001;1;Group  ;
                Name=Group;
                GroupType=Repeater }

    { 1100526002;2;Field  ;
                Name=DocumentNo;
                SourceExpr="No." }

    { 1100526019;2;Field  ;
                Name=Description;
                SourceExpr=Description }

    { 1100526016;2;Field  ;
                Name=FileName;
                SourceExpr=GetFileName }

    { 1100526010;2;Field  ;
                Name=DocumentType;
                SourceExpr="Document Type" }

    { 1100526005;2;Field  ;
                Name=CreationDate;
                SourceExpr="Creation Date" }

    { 1100526004;2;Field  ;
                Name=MajorVersion;
                SourceExpr=DptMajor }

    { 1100526003;2;Field  ;
                Name=MinorVersion;
                SourceExpr=DptMinor }

    { 1100526006;2;Field  ;
                Name=FileSizeInBytes;
                SourceExpr=GetFileSize }

  }
  CODE
  {
    VAR
      DptMinor@1100526001 : Text;
      DptMajor@1100526000 : Text;

    LOCAL PROCEDURE GetDptVersion@1100526000();
    VAR
      DPTDocumentVersion@1100526000 : Record 11229944;
      StringFunctions@1100526001 : Codeunit 11012273;
      SplitArray@1100526002 : ARRAY [10] OF Text;
    BEGIN
      DptMajor := '0';
      DptMinor := '0';
      DPTDocumentVersion.SETRANGE("Source Type", "Document Portal Source Type");
      DPTDocumentVersion.SETRANGE("Source Code", "Document Portal Source No.");
      DPTDocumentVersion.SETRANGE("Document No.", "No.");
      IF NOT DPTDocumentVersion.FINDLAST THEN
        EXIT;

      StringFunctions.SplitString(DPTDocumentVersion.Version, '.', SplitArray);
      IF SplitArray[1] <> '' THEN
        DptMajor := SplitArray[1];

      IF SplitArray[2] <> '' THEN
        DptMinor := SplitArray[2];
    END;

    LOCAL PROCEDURE FilterSourceTable@1100526001(RecRef@1100526000 : RecordRef;VAR DocumentProperties@1100526002 : Record 11012746);
    VAR
      DocumentLink@1100526001 : Record 11012747;
    BEGIN
      DocumentLink.SETCURRENTKEY("Record ID");
      DocumentLink.SETFILTER("Record ID", STRSUBSTNO('''%1''', RecRef.RECORDID));
      DocumentLink.SETRANGE("Internal Company", COMPANYNAME);
      IF DocumentLink.FINDSET THEN
        REPEAT
          IF DocumentProperties.GET(DocumentLink."Document No.") THEN BEGIN
            IF DocumentProperties."Available for Field Service" THEN
              DocumentProperties.MARK(TRUE);
          END;
        UNTIL DocumentLink.NEXT = 0;

      DocumentProperties.MARKEDONLY(TRUE);
    END;

    LOCAL PROCEDURE GetFileName@1100526002() : Text;
    BEGIN
      EXIT(FileNameShort);
    END;

    LOCAL PROCEDURE GetFileSize@1100526003() : Integer;
    VAR
      DocumentManagementWebservice@1100526000 : Codeunit 11012405;
      ErrorMessage@1100526001 : Text;
    BEGIN
      IF "Document Service URL" <> '' THEN
        EXIT(-1); // If the file is stored in the cloud, calculating the size is a huge performance hit.
      EXIT(DocumentManagementWebservice.GetDocumentSizeInBytes("No.", ErrorMessage));
    END;

    LOCAL PROCEDURE TrimQuotes@1100526004(String@1100526000 : Text) : Text;
    VAR
      SingleQuoteChar@1100526001 : Char;
      SingleQuoteText@1100526002 : Text;
    BEGIN
      SingleQuoteChar := 39; //single quote
      SingleQuoteText := FORMAT(SingleQuoteChar);
      String := DELCHR(String, '<', SingleQuoteText);
      String := DELCHR(String, '>', SingleQuoteText);
      EXIT(String);
    END;

    BEGIN
    END.
  }
}

