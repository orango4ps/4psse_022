OBJECT Codeunit 11012607 UAR Hour Acc. Functions
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1210190008 : TextConst 'DEU=öberlappung Stunden von Mitarbeiter ''%1'' fÅr %2 von Woche %3-%4, in den Zeilen %5 und %6%7.;ENU=Overlap hours of employee ''%1'' on %2 of week %3-%4, in the lines %5 and %6%7.;NLD=Overlap uren van werknemer ''%1'' op %2 van week %3-%4, in de regels %5 en %6%7.;SVE=ôverlapp restimmar fîr anstÑlld ''%1'' pÜ %2 i veckan %3-%4, pÜ raderna %5 och %6%7.';
      Text002@1210190007 : TextConst 'DEU=öberlappung Stunden von Mitarbeiter ''%1'' fÅr %2 von Woche %3-%4 mit den Stunden des vorigen Tages, in den Zeilen %5 und %6%7.;ENU=Overlap hours of employee ''%1'' on %2 of week %3-%4 with the hours of the previous day, in the lines %5 and %6%7.;NLD=Overlap uren van werknemer ''%1'' op %2 van week %3-%4 met de uren van de vorige dag, in de regels %5 en %6%7.;SVE=ôverlappningstimmar fîr anstÑlld ''%1'' pÜ %2 i veckan %3-%4 med timmar frÜn fîregÜende dag, pÜ raderna %5 och %6%7.';
      Text003@1210190006 : TextConst 'DEU=öberlappung Stunden von Mitarbeiter ''%1'' fÅr %2 von Woche %3-%4 mit den Stunden des nÑchsten Tages, in den Zeilen %5 und %6%7.;ENU=Overlap hours of employee ''%1'' on %2 of week %3-%4 with hours of the next day, in the lines %5 and %6%7.;NLD=Overlap uren van werknemer ''%1'' op %2 van week %3-%4 met de uren van de volgende dag, in de regels %5 en %6%7.;SVE=ôverlappningstimmar fîr anstÑlld ''%1'' pÜ %2 i veckan %3-%4 med timmar av nÑsta dag, i raderna %5 och %6%7.';
      Text004@1210190001 : TextConst 'DEU=Gebuchte Stunden;ENU=posted hours;NLD=geboekte uren;SVE=Bokfîrda timmar';
      Text005@1210190011 : TextConst 'DEU=öberlappung Pause von Mitarbeiter ''%1'' fÅr %2 von Woche %3-%4, Stundenzeile %5, in den Zeilen %6 und %7.;ENU=Overlap pause of employee ''%1'' on %2 of week %3-%4, hour line %5, in the lines %6 and %7.;NLD=Overlap pauze van werknemer ''%1'' op %2 van week %3-%4, urenregel %5, in de regels %6 en %7.;SVE=ôverlappningspaus fîr anstÑlld ''%1'' pÜ %2 i veckan %3-%4, timrad %5, pÜ raderna %6 och %7.';
      Text006@1210190005 : TextConst 'DEU=Pause von Mitarbeiter ''%1'' fÅr %2 von Woche %3-%4 liegt nicht innerhalb der Arbeitszeit, in Stundenzeile %5, Zeile %6.;ENU=Pause of employee ''%1'' on %2 of week %3-%4 not within working hours, in hour line %5, line %6.;NLD=Pauze van werknemer ''%1'' op %2 van week %3-%4 ligt niet in een werktijd, in urenregel %5, regel %6.;SVE=Paus fîr anstÑlld ''%1'' pÜ %2 i veckan %3-%4, inte inom arbetstid, pÜ timrad %5, rad %6.';
      UARHourAccountingSetup@1210190000 : Record 11012600;
      DummyHourAccLineRec@1210190003 : Record 11012610;
      DummyHourAccPauseRec@1210190004 : Record 11012611;
      TmpHourAccAutPauseRec@1210190027 : TEMPORARY Record 11012610;
      DummyInteger@1210190002 : Integer;
      DummyBoolean@1210190010 : Boolean;
      TypeMode@1210190009 : 'HourLine,Pause';
      PauseMonday@1210190018 : Decimal;
      PauseTuesday@1210190017 : Decimal;
      PauseWednesday@1210190016 : Decimal;
      PauseThursday@1210190015 : Decimal;
      PauseFriday@1210190014 : Decimal;
      PauseSaturday@1210190013 : Decimal;
      PauseSunday@1210190012 : Decimal;
      Text007@1210190026 : TextConst 'DEU=vorige Woche;ENU=previous week;NLD=vorige week;SVE=FîregÜende vecka';
      HoursStartAutomPause@1210190028 : Decimal;
      HoursEndAutomPause@1210190029 : Decimal;

    PROCEDURE TimeFormatHhMmCheck@1210190000(VAR IOTime@1210190000 : Time);
    VAR
      lvSeconds@1210190001 : Integer;
      lvThousands@1210190002 : Integer;
    BEGIN
      IF IOTime = 0T THEN
        EXIT;

      IF EVALUATE(lvSeconds, FORMAT(IOTime,0,'<Seconds>')) OR
         EVALUATE(lvThousands, FORMAT(IOTime,0,'<Thousands>'))
      THEN BEGIN
        IF (lvSeconds <> 0) OR (lvThousands <> 0) THEN
          EVALUATE(IOTime, FORMAT(IOTime,0,'<Hours24,2>') + ' ' + FORMAT(IOTime,0,'<Minutes,2>'));
      END;
    END;

    PROCEDURE GetDayText@1210190005(IDayNo@1210190000 : Integer) : Text[30];
    VAR
      lvText001@1210190007 : TextConst 'DEU=Montag;ENU=monday;NLD=maandag;SVE=mÜndag';
      lvText002@1210190006 : TextConst 'DEU=Dienstag;ENU=tuesday;NLD=dinsdag;SVE=tisdag';
      lvText003@1210190005 : TextConst 'DEU=Mittwoch;ENU=wednesday;NLD=woensdag;SVE=onsdag';
      lvText004@1210190004 : TextConst 'DEU=Donnerstag;ENU=thursday;NLD=donderdag;SVE=torsdag';
      lvText005@1210190003 : TextConst 'DEU=Freitag;ENU=friday;NLD=vrijdag;SVE=fredag';
      lvText006@1210190002 : TextConst 'DEU=Samstag;ENU=saterday;NLD=zaterdag;SVE=lîrdag';
      lvText007@1210190001 : TextConst 'DEU=Sonntag;ENU=sunday;NLD=zondag;SVE=sîndag';
      lvDayText@1210190008 : Text[30];
    BEGIN
      CASE IDayNo OF
        1: lvDayText := lvText001;
        2: lvDayText := lvText002;
        3: lvDayText := lvText003;
        4: lvDayText := lvText004;
        5: lvDayText := lvText005;
        6: lvDayText := lvText006;
        7: lvDayText := lvText007;
      END;

      EXIT(lvDayText);
    END;

    PROCEDURE CheckOverlapFrom@1210190008(IDayNo@1210190000 : Integer;IRec@1210190001 : Record 11012610);
    BEGIN
      WITH IRec DO BEGIN
        CASE IDayNo OF
          1: IF ("Monday From" <> 0T) AND ("Monday To" = 0T) THEN "Monday To" := "Monday From";
          2: IF ("Tuesday From" <> 0T) AND ("Tuesday To" = 0T) THEN "Tuesday To" := "Tuesday From";
          3: IF ("Wednesday From" <> 0T) AND ("Wednesday To" = 0T) THEN "Wednesday To" := "Wednesday From";
          4: IF ("Thursday From" <> 0T) AND ("Thursday To" = 0T) THEN "Thursday To" := "Thursday From";
          5: IF ("Friday From" <> 0T) AND ("Friday To" = 0T) THEN "Friday To" := "Friday From";
          6: IF ("Saturday From" <> 0T) AND ("Saturday To" = 0T) THEN "Saturday To" := "Saturday From";
          7: IF ("Sunday From" <> 0T) AND ("Sunday To" = 0T) THEN "Sunday To" := "Sunday From";
        END;
      END;

      CheckOverlap(IDayNo, IRec);
    END;

    PROCEDURE CheckOverlap@1210190003(IDayNo@1210190000 : Integer;IRec@1210190001 : Record 11012610);
    VAR
      lvHourAccLineRec@1210190002 : Record 11012610;
      lvPostedHourAccLineRec@1210190014 : Record 11012614;
      lvPrevWeekRec@1210190015 : Record 11012601;
      lvPrevTimesFilled@1210190011 : Boolean;
      lvCurrTimesFilled@1210190010 : Boolean;
      lvNextTimesFilled@1210190009 : Boolean;
      lvIntPrevStart@1210190008 : Integer;
      lvIntPrevEnd@1210190007 : Integer;
      lvIntCurrStart@1210190006 : Integer;
      lvIntCurrEnd@1210190005 : Integer;
      lvIntNextStart@1210190004 : Integer;
      lvIntNextEnd@1210190003 : Integer;
      lvIntStartTime@1210190012 : Integer;
      lvIntEndTime@1210190013 : Integer;
      lvFirstDayNoOfWeek@1210190016 : Integer;
      lvLastDayNoOfWeek@1210190017 : Integer;
    BEGIN
      UARHourAccountingSetup.GET;
      IF UARHourAccountingSetup."Skip Check Hours Overlap" THEN
        EXIT;

      ConvertStartEndTimesToInteger(IDayNo, TypeMode::HourLine, TRUE, IRec, DummyHourAccPauseRec,
        lvPrevTimesFilled, lvCurrTimesFilled, lvNextTimesFilled,
        lvIntPrevStart, lvIntPrevEnd, lvIntCurrStart, lvIntCurrEnd, lvIntNextStart, lvIntNextEnd);

      IF NOT lvCurrTimesFilled THEN
        EXIT;

      lvIntStartTime := lvIntCurrStart;
      lvIntEndTime   := lvIntCurrEnd;

      CheckOverlapTime(IDayNo, IRec, IRec."Line No.", FALSE, FALSE,
        lvIntStartTime, lvIntEndTime, lvPrevTimesFilled, FALSE, lvNextTimesFilled,
        lvIntPrevStart, lvIntPrevEnd, lvIntCurrStart, lvIntCurrEnd, lvIntNextStart, lvIntNextEnd);

      lvHourAccLineRec.SETRANGE(Year, IRec.Year);
      lvHourAccLineRec.SETRANGE(Week, IRec.Week);
      lvHourAccLineRec.SETRANGE("Employee No.", IRec."Employee No.");
      lvHourAccLineRec.SETFILTER("Line No.", '<>%1', IRec."Line No.");
      IF lvHourAccLineRec.FIND('-') THEN BEGIN
        REPEAT
          ConvertStartEndTimesToInteger(IDayNo, TypeMode::HourLine, TRUE, lvHourAccLineRec, DummyHourAccPauseRec,
            lvPrevTimesFilled, lvCurrTimesFilled, lvNextTimesFilled,
            lvIntPrevStart, lvIntPrevEnd, lvIntCurrStart, lvIntCurrEnd, lvIntNextStart, lvIntNextEnd);
          CheckOverlapTime(IDayNo, IRec, lvHourAccLineRec."Line No.", FALSE, FALSE,
            lvIntStartTime, lvIntEndTime,
            lvPrevTimesFilled, lvCurrTimesFilled, lvNextTimesFilled,
            lvIntPrevStart, lvIntPrevEnd, lvIntCurrStart, lvIntCurrEnd, lvIntNextStart, lvIntNextEnd);
        UNTIL lvHourAccLineRec.NEXT = 0;
      END;

      lvPostedHourAccLineRec.SETRANGE(Year, IRec.Year);
      lvPostedHourAccLineRec.SETRANGE(Week, IRec.Week);
      lvPostedHourAccLineRec.SETRANGE("Employee No.", IRec."Employee No.");
      IF lvPostedHourAccLineRec.FIND('-') THEN BEGIN
        REPEAT
          lvHourAccLineRec.TRANSFERFIELDS(lvPostedHourAccLineRec);
          ConvertStartEndTimesToInteger(IDayNo, TypeMode::HourLine, TRUE, lvHourAccLineRec, DummyHourAccPauseRec,
            lvPrevTimesFilled, lvCurrTimesFilled, lvNextTimesFilled,
            lvIntPrevStart, lvIntPrevEnd, lvIntCurrStart, lvIntCurrEnd, lvIntNextStart, lvIntNextEnd);
          CheckOverlapTime(IDayNo, IRec, lvPostedHourAccLineRec."Line No.", TRUE, FALSE,
            lvIntStartTime, lvIntEndTime,
            lvPrevTimesFilled, lvCurrTimesFilled, lvNextTimesFilled,
            lvIntPrevStart, lvIntPrevEnd, lvIntCurrStart, lvIntCurrEnd, lvIntNextStart, lvIntNextEnd);
        UNTIL lvPostedHourAccLineRec.NEXT = 0;
      END;

      // Check overlap with last day of previous week.
      lvFirstDayNoOfWeek := 6;   // First day of the week (Saturday)
      lvLastDayNoOfWeek := 5;    // Last day of the week (friday)
      IF IDayNo = lvFirstDayNoOfWeek THEN BEGIN  // If first day of the week then also check in previous week
        IF IRec.Week = 1 THEN
          lvPrevWeekRec.SETRANGE(Year, (IRec.Year - 1))
        ELSE BEGIN
          lvPrevWeekRec.SETRANGE(Year, IRec.Year);
          lvPrevWeekRec.SETFILTER(Week, '<%1', IRec.Week);
        END;
        IF lvPrevWeekRec.FIND('+') THEN BEGIN
          lvHourAccLineRec.RESET;
          lvHourAccLineRec.SETRANGE(Year, lvPrevWeekRec.Year);
          lvHourAccLineRec.SETRANGE(Week, lvPrevWeekRec.Week);
          lvHourAccLineRec.SETRANGE("Employee No.", IRec."Employee No.");
          IF lvHourAccLineRec.FIND('-') THEN BEGIN
            REPEAT
              ConvertStartEndTimesToInteger(lvLastDayNoOfWeek, TypeMode::HourLine, TRUE, lvHourAccLineRec, DummyHourAccPauseRec,
                lvPrevTimesFilled, lvCurrTimesFilled, lvNextTimesFilled,
                lvIntPrevStart, lvIntPrevEnd, lvIntCurrStart, lvIntCurrEnd, lvIntNextStart, lvIntNextEnd);
              lvIntCurrStart := lvIntCurrStart - 2400;
              lvIntCurrEnd :=  lvIntCurrEnd - 2400;
              CheckOverlapTime(IDayNo, IRec, lvHourAccLineRec."Line No.", FALSE, TRUE,
                lvIntStartTime, lvIntEndTime,
                FALSE, lvCurrTimesFilled, FALSE,
                lvIntPrevStart, lvIntPrevEnd, lvIntCurrStart, lvIntCurrEnd, lvIntNextStart, lvIntNextEnd);
            UNTIL lvHourAccLineRec.NEXT = 0;
          END;

          lvPostedHourAccLineRec.RESET;
          lvPostedHourAccLineRec.SETRANGE(Year, lvPrevWeekRec.Year);
          lvPostedHourAccLineRec.SETRANGE(Week, lvPrevWeekRec.Week);
          lvPostedHourAccLineRec.SETRANGE("Employee No.", IRec."Employee No.");
          IF lvPostedHourAccLineRec.FIND('-') THEN BEGIN
            REPEAT
              lvHourAccLineRec.TRANSFERFIELDS(lvPostedHourAccLineRec);
              ConvertStartEndTimesToInteger(lvLastDayNoOfWeek, TypeMode::HourLine, TRUE, lvHourAccLineRec, DummyHourAccPauseRec,
                lvPrevTimesFilled, lvCurrTimesFilled, lvNextTimesFilled,
                lvIntPrevStart, lvIntPrevEnd, lvIntCurrStart, lvIntCurrEnd, lvIntNextStart, lvIntNextEnd);
              lvIntCurrStart := lvIntCurrStart - 2400;
              lvIntCurrEnd :=  lvIntCurrEnd - 2400;
              CheckOverlapTime(IDayNo, IRec, lvPostedHourAccLineRec."Line No.", TRUE, TRUE,
                lvIntStartTime, lvIntEndTime,
                FALSE, lvCurrTimesFilled, FALSE,
                lvIntPrevStart, lvIntPrevEnd, lvIntCurrStart, lvIntCurrEnd, lvIntNextStart, lvIntNextEnd);
            UNTIL lvPostedHourAccLineRec.NEXT = 0;
          END;
        END;
      END;
    END;

    PROCEDURE CheckPauseOverlapFrom@1210190009(IDayNo@1210190000 : Integer;UARHourAccPause@1210190001 : Record 11012611);
    BEGIN
      WITH UARHourAccPause DO BEGIN
        CASE IDayNo OF
          1: IF ("Monday From" <> 0T) AND ("Monday To" = 0T) THEN "Monday To" := "Monday From";
          2: IF ("Tuesday From" <> 0T) AND ("Tuesday To" = 0T) THEN "Tuesday To" := "Tuesday From";
          3: IF ("Wednesday From" <> 0T) AND ("Wednesday To" = 0T) THEN "Wednesday To" := "Wednesday From";
          4: IF ("Thursday From" <> 0T) AND ("Thursday To" = 0T) THEN "Thursday To" := "Thursday From";
          5: IF ("Friday From" <> 0T) AND ("Friday To" = 0T) THEN "Friday To" := "Friday From";
          6: IF ("Saturday From" <> 0T) AND ("Saturday To" = 0T) THEN "Saturday To" := "Saturday From";
          7: IF ("Sunday From" <> 0T) AND ("Sunday To" = 0T) THEN "Sunday To" := "Sunday From";
        END;
      END;

      CheckPauseOverlap(IDayNo, UARHourAccPause);
    END;

    PROCEDURE CheckPauseOverlap@1210190001(IDayNo@1210190000 : Integer;IRec@1210190001 : Record 11012611);
    VAR
      lvHourAccPauseRec@1210190002 : Record 11012611;
      lvCurrTimesFilled@1210190013 : Boolean;
      lvIntCurrStart@1210190009 : Integer;
      lvIntCurrEnd@1210190008 : Integer;
      lvIntStartTime@1210190004 : Integer;
      lvIntEndTime@1210190003 : Integer;
    BEGIN
      UARHourAccountingSetup.GET;
      IF UARHourAccountingSetup."Skip Check Hours Overlap" THEN
        EXIT;

      ConvertStartEndTimesToInteger(IDayNo, TypeMode::Pause, FALSE, DummyHourAccLineRec, IRec,
        DummyBoolean, lvCurrTimesFilled, DummyBoolean,
        DummyInteger, DummyInteger, lvIntCurrStart, lvIntCurrEnd, DummyInteger, DummyInteger);

      IF NOT lvCurrTimesFilled THEN
        EXIT;

      lvIntStartTime := lvIntCurrStart;
      lvIntEndTime   := lvIntCurrEnd;

      lvHourAccPauseRec.SETRANGE(Year, IRec.Year);
      lvHourAccPauseRec.SETRANGE(Week, IRec.Week);
      lvHourAccPauseRec.SETRANGE("Employee No.", IRec."Employee No.");
      lvHourAccPauseRec.SETRANGE("Hour Acc. Line No.", IRec."Hour Acc. Line No.");
      lvHourAccPauseRec.SETFILTER("Line No.", '<>%1', IRec."Line No.");
      IF lvHourAccPauseRec.FIND('-') THEN BEGIN
        REPEAT
          ConvertStartEndTimesToInteger(IDayNo, TypeMode::Pause, FALSE, DummyHourAccLineRec, lvHourAccPauseRec,
            DummyBoolean, lvCurrTimesFilled, DummyBoolean,
            DummyInteger, DummyInteger, lvIntCurrStart, lvIntCurrEnd, DummyInteger, DummyInteger);
          CheckPauseOverlapTime(IDayNo, IRec, lvHourAccPauseRec."Line No.",
            lvIntStartTime, lvIntEndTime, lvCurrTimesFilled, lvIntCurrStart, lvIntCurrEnd);
        UNTIL lvHourAccPauseRec.NEXT = 0;
      END;
    END;

    PROCEDURE CheckPauseDuringWorktimeFrom@1210190013(IDayNo@1210190000 : Integer;IRec@1210190001 : Record 11012611);
    BEGIN
      WITH IRec DO BEGIN
        CASE IDayNo OF
          1: IF ("Monday From" <> 0T) AND ("Monday To" = 0T) THEN "Monday To" := "Monday From";
          2: IF ("Tuesday From" <> 0T) AND ("Tuesday To" = 0T) THEN "Tuesday To" := "Tuesday From";
          3: IF ("Wednesday From" <> 0T) AND ("Wednesday To" = 0T) THEN "Wednesday To" := "Wednesday From";
          4: IF ("Thursday From" <> 0T) AND ("Thursday To" = 0T) THEN "Thursday To" := "Thursday From";
          5: IF ("Friday From" <> 0T) AND ("Friday To" = 0T) THEN "Friday To" := "Friday From";
          6: IF ("Saturday From" <> 0T) AND ("Saturday To" = 0T) THEN "Saturday To" := "Saturday From";
          7: IF ("Sunday From" <> 0T) AND ("Sunday To" = 0T) THEN "Sunday To" := "Sunday From";
        END;
      END;

      CheckPauseDuringWorktime(IDayNo, IRec);
    END;

    PROCEDURE CheckPauseDuringWorktime@1210190017(IDayNo@1210190000 : Integer;IRec@1210190001 : Record 11012611);
    VAR
      lvHourAccLineRec@1210190002 : Record 11012610;
      lvCurrTimesFilled@1210190008 : Boolean;
      lvIntCurrStart@1210190006 : Integer;
      lvIntCurrEnd@1210190005 : Integer;
      lvIntStartTime@1210190004 : Integer;
      lvIntEndTime@1210190003 : Integer;
    BEGIN
      // Pause must be in working time. Note: Pause in travel time not allowed.

      ConvertStartEndTimesToInteger(IDayNo, TypeMode::Pause, FALSE, DummyHourAccLineRec, IRec,
        DummyBoolean, lvCurrTimesFilled, DummyBoolean,
        DummyInteger, DummyInteger, lvIntCurrStart, lvIntCurrEnd, DummyInteger, DummyInteger);

      IF NOT lvCurrTimesFilled THEN
        EXIT;

      lvIntStartTime := lvIntCurrStart;
      lvIntEndTime   := lvIntCurrEnd;

      lvHourAccLineRec.SETRANGE(Year, IRec.Year);
      lvHourAccLineRec.SETRANGE(Week, IRec.Week);
      lvHourAccLineRec.SETRANGE("Employee No.", IRec."Employee No.");
      lvHourAccLineRec.SETRANGE("Line No.", IRec."Hour Acc. Line No.");
      IF lvHourAccLineRec.FIND('-') THEN BEGIN
        ConvertStartEndTimesToInteger(IDayNo, TypeMode::HourLine, FALSE, lvHourAccLineRec, DummyHourAccPauseRec,
          DummyBoolean, lvCurrTimesFilled, DummyBoolean,
          DummyInteger, DummyInteger, lvIntCurrStart, lvIntCurrEnd, DummyInteger, DummyInteger);

        IF lvCurrTimesFilled AND (lvIntStartTime < lvIntCurrStart) THEN BEGIN
          lvIntStartTime := lvIntStartTime + 2400;
          lvIntEndTime   := lvIntEndTime + 2400;
        END;

        IF CheckPauseInWorktime(lvIntStartTime, lvIntEndTime, lvCurrTimesFilled, lvIntCurrStart, lvIntCurrEnd) THEN
          EXIT;  //OK
      END;

      ERROR(Text006, IRec."Employee No.", GetDayText(IDayNo), IRec.Year, IRec.Week, IRec."Hour Acc. Line No.", IRec."Line No.");
    END;

    LOCAL PROCEDURE CheckOverlapTime@1210190007(IDayNo@1210190002 : Integer;IRec@1210190000 : Record 11012610;ILineNo2@1210190001 : Integer;IPosted@1210190014 : Boolean;IWithPrevWeek@1210190016 : Boolean;IIntStartTime@1210190004 : Integer;IIntEndTime@1210190003 : Integer;IPrevTimesFilled@1210190013 : Boolean;ICurrTimesFilled@1210190012 : Boolean;INextTimesFilled@1210190011 : Boolean;IIntPrevStart@1210190010 : Integer;IIntPrevEnd@1210190009 : Integer;IIntCurrStart@1210190008 : Integer;IIntCurrEnd@1210190007 : Integer;IIntNextStart@1210190006 : Integer;IIntNextEnd@1210190005 : Integer);
    VAR
      lvInfoText@1210190015 : Text[100];
    BEGIN
      IF IPosted OR IWithPrevWeek THEN
        lvInfoText := ' (';
      IF IPosted THEN
        lvInfoText := lvInfoText + Text004;
      IF IWithPrevWeek THEN BEGIN
        IF IPosted THEN
          lvInfoText := lvInfoText + ' ';
        lvInfoText := lvInfoText + Text007;
      END;
      IF IPosted OR IWithPrevWeek THEN
        lvInfoText := lvInfoText + ')';

      IF ICurrTimesFilled THEN BEGIN
        IF (IIntEndTime > IIntCurrStart) AND (IIntStartTime < IIntCurrEnd) THEN
          ERROR(Text001, IRec."Employee No.", GetDayText(IDayNo), IRec.Year, IRec.Week, IRec."Line No.", ILineNo2, lvInfoText);
      END;

      IF IPrevTimesFilled THEN BEGIN
        IF (IIntEndTime > IIntPrevStart) AND (IIntStartTime < IIntPrevEnd) THEN
          ERROR(Text002, IRec."Employee No.", GetDayText(IDayNo), IRec.Year, IRec.Week, IRec."Line No.", ILineNo2, lvInfoText);
      END;

      IF INextTimesFilled THEN BEGIN
        IF (IIntEndTime > IIntNextStart) AND (IIntStartTime < IIntNextEnd) THEN
          ERROR(Text003, IRec."Employee No.", GetDayText(IDayNo), IRec.Year, IRec.Week, IRec."Line No.", ILineNo2, lvInfoText);
      END;
    END;

    LOCAL PROCEDURE CheckPauseOverlapTime@1210190026(IDayNo@1210190002 : Integer;IRec@1210190000 : Record 11012611;ILineNo2@1210190001 : Integer;IIntStartTime@1210190004 : Integer;IIntEndTime@1210190003 : Integer;ICurrTimesFilled@1210190012 : Boolean;IIntCurrStart@1210190008 : Integer;IIntCurrEnd@1210190007 : Integer);
    BEGIN
      IF ICurrTimesFilled THEN BEGIN
        IF (IIntEndTime >= IIntCurrStart) AND (IIntStartTime <= IIntCurrEnd) THEN
          ERROR(Text005, IRec."Employee No.", GetDayText(IDayNo), IRec.Year, IRec.Week,
           IRec."Hour Acc. Line No.", IRec."Line No.", ILineNo2);
      END;
    END;

    LOCAL PROCEDURE CheckPauseInWorktime@1210190020(IIntStartTime@1210190005 : Integer;IIntEndTime@1210190004 : Integer;ICurrTimesFilled@1210190003 : Boolean;IIntCurrStart@1210190001 : Integer;IIntCurrEnd@1210190000 : Integer) : Boolean;
    BEGIN
      // Pause     : IIntStartTime .. IIntEndTime
      // Work Time : IIntCurrStart .. IIntCurrEnd

      IF ICurrTimesFilled THEN BEGIN
        IF (IIntStartTime >= IIntCurrStart) AND (IIntEndTime <= IIntCurrEnd) THEN
          EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE ConvertStartEndTimesToInteger@1210190006(IDayNo@1210190000 : Integer;ITypeMode@1210190003 : 'HourLine,Pause';ITravelIncl@1210190019 : Boolean;ILineRec@1210190001 : Record 11012610;IPauseRec@1210190002 : Record 11012611;VAR OPrevTimesFilled@1210190026 : Boolean;VAR OCurrTimesFilled@1210190027 : Boolean;VAR ONextTimesFilled@1210190028 : Boolean;VAR OIntPrevStart@1210190020 : Integer;VAR OIntPrevEnd@1210190021 : Integer;VAR OIntCurrStart@1210190022 : Integer;VAR OIntCurrEnd@1210190023 : Integer;VAR OIntNextStart@1210190024 : Integer;VAR OIntNextEnd@1210190025 : Integer);
    VAR
      lvPrevStart@1210190018 : Time;
      lvPrevEnd@1210190017 : Time;
      lvPrevTo@1210190016 : Decimal;
      lvPrevBack@1210190015 : Decimal;
      lvCurrStart@1210190014 : Time;
      lvCurrEnd@1210190013 : Time;
      lvCurrTo@1210190012 : Decimal;
      lvCurrBack@1210190011 : Decimal;
      lvNextStart@1210190010 : Time;
      lvNextEnd@1210190009 : Time;
      lvNextTo@1210190008 : Decimal;
      lvNextBack@1210190007 : Decimal;
      lvPrevDateMode@1210190006 : Integer;
      lvCurrDateMode@1210190005 : Integer;
      lvNextDateMode@1210190004 : Integer;
    BEGIN
      OPrevTimesFilled := FALSE;
      OCurrTimesFilled := FALSE;
      ONextTimesFilled := FALSE;
      OIntPrevStart := 0;
      OIntPrevEnd := 0;
      OIntCurrStart := 0;
      OIntCurrEnd := 0;
      OIntNextStart := 0;
      OIntNextEnd := 0;

      IF (ITypeMode = ITypeMode::HourLine) THEN BEGIN
        CASE IDayNo OF
          1:
            BEGIN
              lvPrevStart := ILineRec."Sunday From";
              lvPrevEnd   := ILineRec."Sunday To";
              lvPrevTo    := ILineRec."Sunday Travel To";
              lvPrevBack  := ILineRec."Sunday Travel Back";
              lvCurrStart := ILineRec."Monday From";
              lvCurrEnd   := ILineRec."Monday To";
              lvCurrTo    := ILineRec."Monday Travel To";
              lvCurrBack  := ILineRec."Monday Travel Back";
              lvNextStart := ILineRec."Tuesday From";
              lvNextEnd   := ILineRec."Tuesday To";
              lvNextTo    := ILineRec."Tuesday Travel To";
              lvNextBack  := ILineRec."Tuesday Travel Back";
            END;
          2:
            BEGIN
              lvPrevStart := ILineRec."Monday From";
              lvPrevEnd   := ILineRec."Monday To";
              lvPrevTo    := ILineRec."Monday Travel To";
              lvPrevBack  := ILineRec."Monday Travel Back";
              lvCurrStart := ILineRec."Tuesday From";
              lvCurrEnd   := ILineRec."Tuesday To";
              lvCurrTo    := ILineRec."Tuesday Travel To";
              lvCurrBack  := ILineRec."Tuesday Travel Back";
              lvNextStart := ILineRec."Wednesday From";
              lvNextEnd   := ILineRec."Wednesday To";
              lvNextTo    := ILineRec."Wednesday Travel To";
              lvNextBack  := ILineRec."Wednesday Travel Back";
            END;
          3:
            BEGIN
              lvPrevStart := ILineRec."Tuesday From";
              lvPrevEnd   := ILineRec."Tuesday To";
              lvPrevTo    := ILineRec."Tuesday Travel To";
              lvPrevBack  := ILineRec."Tuesday Travel Back";
              lvCurrStart := ILineRec."Wednesday From";
              lvCurrEnd   := ILineRec."Wednesday To";
              lvCurrTo    := ILineRec."Wednesday Travel To";
              lvCurrBack  := ILineRec."Wednesday Travel Back";
              lvNextStart := ILineRec."Thursday From";
              lvNextEnd   := ILineRec."Thursday To";
              lvNextTo    := ILineRec."Thursday Travel To";
              lvNextBack  := ILineRec."Thursday Travel Back";
            END;
          4:
            BEGIN
              lvPrevStart := ILineRec."Wednesday From";
              lvPrevEnd   := ILineRec."Wednesday To";
              lvPrevTo    := ILineRec."Wednesday Travel To";
              lvPrevBack  := ILineRec."Wednesday Travel Back";
              lvCurrStart := ILineRec."Thursday From";
              lvCurrEnd   := ILineRec."Thursday To";
              lvCurrTo    := ILineRec."Thursday Travel To";
              lvCurrBack  := ILineRec."Thursday Travel Back";
              lvNextStart := ILineRec."Friday From";
              lvNextEnd   := ILineRec."Friday To";
              lvNextTo    := ILineRec."Friday Travel To";
              lvNextBack  := ILineRec."Friday Travel Back";
            END;
          5:
            BEGIN
              lvPrevStart := ILineRec."Thursday From";
              lvPrevEnd   := ILineRec."Thursday To";
              lvPrevTo    := ILineRec."Thursday Travel To";
              lvPrevBack  := ILineRec."Thursday Travel Back";
              lvCurrStart := ILineRec."Friday From";
              lvCurrEnd   := ILineRec."Friday To";
              lvCurrTo    := ILineRec."Friday Travel To";
              lvCurrBack  := ILineRec."Friday Travel Back";
              lvNextStart := ILineRec."Saturday From";
              lvNextEnd   := ILineRec."Saturday To";
              lvNextTo    := ILineRec."Saturday Travel To";
              lvNextBack  := ILineRec."Saturday Travel Back";
            END;
          6:
            BEGIN
              lvPrevStart := ILineRec."Friday From";
              lvPrevEnd   := ILineRec."Friday To";
              lvPrevTo    := ILineRec."Friday Travel To";
              lvPrevBack  := ILineRec."Friday Travel Back";
              lvCurrStart := ILineRec."Saturday From";
              lvCurrEnd   := ILineRec."Saturday To";
              lvCurrTo    := ILineRec."Saturday Travel To";
              lvCurrBack  := ILineRec."Saturday Travel Back";
              lvNextStart := ILineRec."Sunday From";
              lvNextEnd   := ILineRec."Sunday To";
              lvNextTo    := ILineRec."Sunday Travel To";
              lvNextBack  := ILineRec."Sunday Travel Back";
            END;
          7:
            BEGIN
              lvPrevStart := ILineRec."Saturday From";
              lvPrevEnd   := ILineRec."Saturday To";
              lvPrevTo    := ILineRec."Saturday Travel To";
              lvPrevBack  := ILineRec."Saturday Travel Back";
              lvCurrStart := ILineRec."Sunday From";
              lvCurrEnd   := ILineRec."Sunday To";
              lvCurrTo    := ILineRec."Sunday Travel To";
              lvCurrBack  := ILineRec."Sunday Travel Back";
              lvNextStart := ILineRec."Monday From";
              lvNextEnd   := ILineRec."Monday To";
              lvNextTo    := ILineRec."Monday Travel To";
              lvNextBack  := ILineRec."Monday Travel Back";
            END;
        END;
      END ELSE BEGIN
        CASE IDayNo OF
          1:
            BEGIN
              lvCurrStart := IPauseRec."Monday From";
              lvCurrEnd   := IPauseRec."Monday To";
            END;
          2:
            BEGIN
              lvCurrStart := IPauseRec."Tuesday From";
              lvCurrEnd   := IPauseRec."Tuesday To";
            END;
          3:
            BEGIN
              lvCurrStart := IPauseRec."Wednesday From";
              lvCurrEnd   := IPauseRec."Wednesday To";
            END;
          4:
            BEGIN
              lvCurrStart := IPauseRec."Thursday From";
              lvCurrEnd   := IPauseRec."Thursday To";
            END;
          5:
            BEGIN
              lvCurrStart := IPauseRec."Friday From";
              lvCurrEnd   := IPauseRec."Friday To";
            END;
          6:
            BEGIN
              lvCurrStart := IPauseRec."Saturday From";
              lvCurrEnd   := IPauseRec."Saturday To";
            END;
          7:
            BEGIN
              lvCurrStart := IPauseRec."Sunday From";
              lvCurrEnd   := IPauseRec."Sunday To";
            END;
        END;
      END;

      IF (IDayNo = 6) OR (ITypeMode = ITypeMode::Pause) THEN BEGIN
        lvPrevStart := 0T;
        lvPrevEnd   := 0T;
        lvPrevTo    := 0;
        lvPrevBack  := 0;
      END;
      IF (IDayNo = 5) OR (ITypeMode = ITypeMode::Pause) THEN BEGIN
        lvNextStart := 0T;
        lvNextEnd   := 0T;
        lvNextTo    := 0;
        lvNextBack  := 0;
      END;

      IF (NOT ITravelIncl) OR (ITypeMode = ITypeMode::Pause) THEN BEGIN
        lvPrevTo    := 0;
        lvPrevBack  := 0;
        lvCurrTo    := 0;
        lvCurrBack  := 0;
        lvNextTo    := 0;
        lvNextBack  := 0;
      END;

      // Determine the 'Date Mode' for the endtimes.  If the endtime is less than the starttime, then the endtime is in the
      // next day (see also comment in 'TimeToInteger'). Note: For the starttime these are always -1/0/1.
      lvPrevDateMode := -1;
      lvCurrDateMode := 0;
      lvNextDateMode := 1;

      IF (lvPrevStart <> 0T) AND (lvPrevEnd <> 0T) THEN BEGIN
        OPrevTimesFilled := TRUE;
        OIntPrevStart := TimeToInteger(lvPrevStart, lvPrevTo, lvPrevDateMode, -1);
        IF (lvPrevEnd < lvPrevStart) THEN
          lvPrevDateMode := lvPrevDateMode + 1;
        OIntPrevEnd := TimeToInteger(lvPrevEnd, lvPrevBack, lvPrevDateMode,  1);
      END;
      IF (lvCurrStart <> 0T) AND (lvCurrEnd <> 0T) THEN BEGIN
        OCurrTimesFilled := TRUE;
        OIntCurrStart := TimeToInteger(lvCurrStart, lvCurrTo, lvCurrDateMode, -1);
        IF (lvCurrEnd < lvCurrStart) THEN
          lvCurrDateMode := lvCurrDateMode + 1;
        OIntCurrEnd := TimeToInteger(lvCurrEnd, lvCurrBack, lvCurrDateMode,  1);
      END;
      IF (lvNextStart <> 0T) AND (lvNextEnd <> 0T) THEN BEGIN
        ONextTimesFilled := TRUE;
        OIntNextStart := TimeToInteger(lvNextStart, lvNextTo, lvNextDateMode, -1);
        IF (lvNextEnd < lvNextStart) THEN
          lvNextDateMode := lvNextDateMode + 1;
        OIntNextEnd := TimeToInteger(lvNextEnd, lvNextBack, lvNextDateMode,  1);
      END;
    END;

    PROCEDURE TimeToInteger@1210190004(ITime@1210190000 : Time;ITravel@1210190001 : Decimal;IDateMode@1210190002 : Integer;IFactor@1210190003 : Integer) : Integer;
    VAR
      lvHours@1210190007 : Integer;
      lvMinutes@1210190006 : Integer;
      lvTravelHours@1210190004 : Integer;
      lvTravelMinutes@1210190005 : Integer;
    BEGIN
      // Function: make a integer of the time. Note: Can be negative (before current day) or greater than 2400 (after current day).
      // Date Mode: -1 = Previous Date, 0 = Current Date, 1 = Next Date, 2 = Day after Next Date
      // Factor: -1 = (Start) Time minus Travel Hours (To), 1 = (End) Time plus Travel Hours (To)

      EVALUATE(lvHours, FORMAT(ITime,0,'<Hours24>'));
      EVALUATE(lvMinutes, FORMAT(ITime,0,'<Minutes>'));
      IF (ITravel > 0) THEN BEGIN
        lvTravelHours :=  ROUND(ITravel, 1, '<');
        lvTravelMinutes := ROUND(((ITravel-lvTravelHours) * 60), 1);
        lvHours := lvHours + (IFactor * lvTravelHours);
        lvMinutes := lvMinutes + (IFactor * lvTravelMinutes);
        IF (lvMinutes < 0) THEN BEGIN
          lvHours := lvHours - 1;
          lvMinutes := lvMinutes + 60;
        END;
        IF (lvMinutes >= 60) THEN BEGIN
          lvHours := lvHours + 1;
          lvMinutes := lvMinutes - 60;
        END;
      END;

      EXIT(((100 * lvHours) + lvMinutes) + (IDateMode * 2400));
    END;

    PROCEDURE CalculateHours@1210190002(VAR UARHourAccountingLine@1210190000 : Record 11012610;IHourAccPauseRec@1210190001 : Record 11012611;ICalledFrom@1210190002 : Code[10]);
    VAR
      lvHourAccPauseRec@1210190015 : Record 11012611;
    BEGIN
      PauseMonday := 0;
      PauseTuesday := 0;
      PauseWednesday := 0;
      PauseThursday := 0;
      PauseFriday := 0;
      PauseSaturday := 0;
      PauseSunday := 0;

      WITH UARHourAccountingLine DO BEGIN
        "Hours Monday" := CalcHoursWithinStartEndTime("Monday From", "Monday To");
        "Hours Tuesday" := CalcHoursWithinStartEndTime("Tuesday From", "Tuesday To");
        "Hours Wednesday" := CalcHoursWithinStartEndTime("Wednesday From", "Wednesday To");
        "Hours Thursday" := CalcHoursWithinStartEndTime("Thursday From", "Thursday To");
        "Hours Friday" := CalcHoursWithinStartEndTime("Friday From", "Friday To");
        "Hours Saturday" := CalcHoursWithinStartEndTime("Saturday From", "Saturday To");
        "Hours Sunday" := CalcHoursWithinStartEndTime("Sunday From", "Sunday To");
      END;

      IF (ICalledFrom = 'PAUSE-INS') OR (ICalledFrom = 'PAUSE-MOD') THEN
        CalculatePauseHours(UARHourAccountingLine, IHourAccPauseRec);

      WITH lvHourAccPauseRec DO BEGIN
        SETRANGE(Year, UARHourAccountingLine.Year);
        SETRANGE(Week, UARHourAccountingLine.Week);
        SETRANGE("Employee No.", UARHourAccountingLine."Employee No.");
        SETRANGE("Hour Acc. Line No.", UARHourAccountingLine."Line No.");
        IF (ICalledFrom = 'PAUSE-INS') OR (ICalledFrom = 'PAUSE-MOD') OR (ICalledFrom = 'PAUSE-DEL') THEN
          SETFILTER("Line No.", '<>%1', IHourAccPauseRec."Line No.");
        IF FINDSET THEN
          REPEAT
            CalculatePauseHours(UARHourAccountingLine, lvHourAccPauseRec);
          UNTIL NEXT = 0;
      END;

      WITH UARHourAccountingLine DO BEGIN
        IF ("Hours Monday" <> 0) AND (PauseMonday <>0) THEN BEGIN
            "Hours Monday" := "Hours Monday" - PauseMonday;
        END;
        IF ("Hours Tuesday" <> 0) AND (PauseTuesday <>0) THEN BEGIN
            "Hours Tuesday" := "Hours Tuesday" - PauseTuesday;
        END;
        IF ("Hours Wednesday" <> 0) AND (PauseWednesday <>0) THEN BEGIN
            "Hours Wednesday" := "Hours Wednesday" - PauseWednesday;
        END;
        IF ("Hours Thursday" <> 0) AND (PauseThursday <>0) THEN BEGIN
            "Hours Thursday" := "Hours Thursday" - PauseThursday;
        END;
        IF ("Hours Friday" <> 0) AND (PauseFriday <>0) THEN BEGIN
            "Hours Friday" := "Hours Friday" - PauseFriday;
        END;
        IF ("Hours Saturday" <> 0) AND (PauseSaturday <>0) THEN BEGIN
            "Hours Saturday" := "Hours Saturday" - PauseSaturday;
        END;
        IF ("Hours Sunday" <> 0) AND (PauseSunday <>0) THEN BEGIN
            "Hours Sunday" := "Hours Sunday" - PauseSunday;
        END;

        Hours := "Hours Monday" + "Hours Tuesday" + "Hours Wednesday" +
          "Hours Thursday" + "Hours Friday" + "Hours Saturday" + "Hours Sunday";
      END;
    END;

    PROCEDURE CalculatePauseHours@1210190010(IHourAccLineRec@1210190000 : Record 11012610;IHourAccPauseRec@1210190001 : Record 11012611);
    BEGIN
      WITH IHourAccPauseRec DO BEGIN
        IF (IHourAccLineRec."Hours Monday" <> 0) AND ("Monday From" <> 0T) AND ("Monday To" <> 0T) THEN
          PauseMonday := PauseMonday + CalcHoursWithinStartEndTime("Monday From", "Monday To");
        IF (IHourAccLineRec."Hours Tuesday" <> 0) AND ("Tuesday From" <> 0T) AND ("Tuesday To" <> 0T) THEN
          PauseTuesday := PauseTuesday + CalcHoursWithinStartEndTime("Tuesday From", "Tuesday To");
        IF (IHourAccLineRec."Hours Wednesday" <> 0) AND ("Wednesday From" <> 0T) AND ("Wednesday To" <> 0T) THEN
          PauseWednesday := PauseWednesday + CalcHoursWithinStartEndTime("Wednesday From", "Wednesday To");
        IF (IHourAccLineRec."Hours Thursday" <> 0) AND ("Thursday From" <> 0T) AND ("Thursday To" <> 0T) THEN
          PauseThursday := PauseThursday + CalcHoursWithinStartEndTime("Thursday From", "Thursday To");
        IF (IHourAccLineRec."Hours Friday" <> 0) AND ("Friday From" <> 0T) AND ("Friday To" <> 0T) THEN
          PauseFriday := PauseFriday + CalcHoursWithinStartEndTime("Friday From", "Friday To");
        IF (IHourAccLineRec."Hours Saturday" <> 0) AND ("Saturday From" <> 0T) AND ("Saturday To" <> 0T) THEN
          PauseSaturday := PauseSaturday + CalcHoursWithinStartEndTime("Saturday From", "Saturday To");
        IF (IHourAccLineRec."Hours Sunday" <> 0) AND ("Sunday From" <> 0T) AND ("Sunday To" <> 0T) THEN
          PauseSunday := PauseSunday + CalcHoursWithinStartEndTime("Sunday From", "Sunday To");
      END;
    END;

    PROCEDURE CalcHoursWithinStartEndTime@1210190011(IStartTime@1210190000 : Time;IEndTime@1210190001 : Time) : Decimal;
    VAR
      lvStartHour@1210190006 : Integer;
      lvStartMinute@1210190005 : Integer;
      lvEndHour@1210190004 : Integer;
      lvEndMinute@1210190003 : Integer;
      lvHours@1210190002 : Decimal;
    BEGIN
      IF (IStartTime = 0T) OR (IEndTime = 0T) THEN
        EXIT(0);

      EVALUATE(lvStartHour, FORMAT(IStartTime,0,'<Hours24>'));
      EVALUATE(lvStartMinute, FORMAT(IStartTime,0,'<Minutes>'));
      EVALUATE(lvEndHour, FORMAT(IEndTime,0,'<Hours24>'));
      EVALUATE(lvEndMinute, FORMAT(IEndTime,0,'<Minutes>'));

      IF IStartTime <= IEndTime THEN
        lvHours := lvEndHour - lvStartHour - (lvStartMinute / 60) + (lvEndMinute / 60)
      ELSE
        lvHours := (24 - lvStartHour) - (lvStartMinute / 60) + lvEndHour + (lvEndMinute / 60);

      EXIT(lvHours);
    END;

    PROCEDURE BuildAutomaticPause@1210190014(IYear@1210190000 : Integer;IWeek@1210190001 : Integer;IEmployeeNo@1210190002 : Code[20]);
    VAR
      lvHourAccLineRec@1210190003 : Record 11012610;
      lvHourAccPauseRec@1210190004 : Record 11012611;
      lvProjRec@1210190006 : Record 11072003;
      lvDayFactor@1210190005 : Integer;
      lvFirstStartTime@1210190007 : Integer;
      lvFirstStartTimeSave@1210190016 : Integer;
      lvStartTime@1210190008 : Integer;
      lvPrevStartTime@1210190009 : Integer;
      lvPrevEndTime@1210190010 : Integer;
      lvMinuteGap@1210190011 : Integer;
      lvFirstRecord@1210190013 : Boolean;
      lvAutPauseAllowed@1210190012 : Boolean;
      lvPauseBln@1210190015 : ARRAY [7] OF Boolean;
      lvTotalHours@1210190014 : Decimal;
      lvUarTask@1100485000 : Code[20];
    BEGIN
      UARHourAccountingSetup.GET;
      IF (UARHourAccountingSetup."Default No. of Hours Pause" = 0) OR
         (UARHourAccountingSetup."Pause after Start Work Time" = 0) OR
         (UARHourAccountingSetup."Min. WorkTime Pause Deduction" = 0) OR
         (UARHourAccountingSetup."UAR Task Worked Hours" = '')
      THEN
        EXIT;

      HoursStartAutomPause := UARHourAccountingSetup."Pause after Start Work Time";
      HoursEndAutomPause := UARHourAccountingSetup."Pause after Start Work Time" + UARHourAccountingSetup."Default No. of Hours Pause";

      TmpHourAccAutPauseRec.RESET;
      TmpHourAccAutPauseRec.SETRANGE(Year, IYear);
      TmpHourAccAutPauseRec.SETRANGE(Week, IWeek);
      TmpHourAccAutPauseRec.SETRANGE("Employee No.", IEmployeeNo);

      TmpHourAccAutPauseRec.DELETEALL;

      WITH lvHourAccLineRec DO BEGIN
        RESET;
        SETRANGE(Year, IYear);
        SETRANGE(Week, IWeek);
        SETRANGE("Employee No.", IEmployeeNo);
        IF FIND('-') THEN BEGIN
          REPEAT
            IF (Type = Type::Service) AND ("Project No." = '') THEN
              lvUarTask := UARHourAccountingSetup."UAR Task Worked Hours"
            ELSE BEGIN
              IF "Receiving Company" = '' THEN
                lvProjRec.CHANGECOMPANY(COMPANYNAME)
              ELSE
                lvProjRec.CHANGECOMPANY("Receiving Company");
              IF NOT lvProjRec.GET("Project No.") THEN
                lvProjRec.INIT;
              lvUarTask := lvProjRec."UAR Task";
            END;
            CLEAR(lvPauseBln);
            lvHourAccPauseRec.SETRANGE(Year, Year);
            lvHourAccPauseRec.SETRANGE(Week, Week);
            lvHourAccPauseRec.SETRANGE("Employee No.", "Employee No.");
            lvHourAccPauseRec.SETRANGE("Hour Acc. Line No.", "Line No.");
            IF lvHourAccPauseRec.FIND('-') THEN BEGIN
              REPEAT
                IF (lvHourAccPauseRec."Monday From" <> 0T) OR (lvHourAccPauseRec."Monday To" <> 0T) THEN lvPauseBln[1] := TRUE;
                IF (lvHourAccPauseRec."Tuesday From" <> 0T) OR (lvHourAccPauseRec."Tuesday To" <> 0T) THEN lvPauseBln[2] := TRUE;
                IF (lvHourAccPauseRec."Wednesday From" <> 0T) OR (lvHourAccPauseRec."Wednesday To" <> 0T) THEN lvPauseBln[3] := TRUE;
                IF (lvHourAccPauseRec."Thursday From" <> 0T) OR (lvHourAccPauseRec."Thursday To" <> 0T) THEN lvPauseBln[4] := TRUE;
                IF (lvHourAccPauseRec."Friday From" <> 0T) OR (lvHourAccPauseRec."Friday To" <> 0T) THEN lvPauseBln[5] := TRUE;
                IF (lvHourAccPauseRec."Saturday From" <> 0T) OR (lvHourAccPauseRec."Saturday To" <> 0T) THEN lvPauseBln[6] := TRUE;
                IF (lvHourAccPauseRec."Sunday From" <> 0T) OR (lvHourAccPauseRec."Sunday To" <> 0T) THEN lvPauseBln[7] := TRUE;
              UNTIL lvHourAccPauseRec.NEXT = 0;
            END;

            TmpHourAccAutPauseRec.INIT;
            TmpHourAccAutPauseRec.Year := Year;
            TmpHourAccAutPauseRec.Week := Week;
            TmpHourAccAutPauseRec."Employee No." := "Employee No.";
            TmpHourAccAutPauseRec."Hours Monday" := "Line No.";
            TmpHourAccAutPauseRec."Project No." := lvUarTask;
            TmpHourAccAutPauseRec."Tuesday From" := 0T;
            TmpHourAccAutPauseRec."Tuesday To" := 0T;

            IF ("Monday From" <> 0T) AND ("Monday To" <> 0T) THEN BEGIN
              lvDayFactor := 2;
              TmpHourAccAutPauseRec."Line No." := TimeToInteger("Monday From", 0, 0, 1) + (lvDayFactor * 2400);
              IF ("Monday To" < "Monday From") THEN lvDayFactor := lvDayFactor + 1;
              TmpHourAccAutPauseRec."Monday Travel To" := TimeToInteger("Monday To", 0, 0, 1) + (lvDayFactor * 2400);
              TmpHourAccAutPauseRec.Element := '';
              IF lvPauseBln[1] THEN
                TmpHourAccAutPauseRec.Element := 'Pause';
              TmpHourAccAutPauseRec."Monday From" := "Monday From";
              TmpHourAccAutPauseRec."Monday To" := "Monday To";
              TmpHourAccAutPauseRec."Monday Travel Back" := 1;
              TmpHourAccAutPauseRec.Hours := CalcHoursWithinStartEndTime("Monday From", "Monday To");
              TmpHourAccAutPauseRec.INSERT;
            END;

            IF ("Tuesday From" <> 0T) AND ("Tuesday To" <> 0T) THEN BEGIN
              lvDayFactor := 3;
              TmpHourAccAutPauseRec."Line No." := TimeToInteger("Tuesday From", 0, 0, 1) + (lvDayFactor * 2400);
              IF ("Tuesday To" < "Tuesday From") THEN lvDayFactor := lvDayFactor + 1;
              TmpHourAccAutPauseRec."Monday Travel To" := TimeToInteger("Tuesday To", 0, 0, 1) + (lvDayFactor * 2400);
              TmpHourAccAutPauseRec.Element := '';
              IF lvPauseBln[2] THEN
                TmpHourAccAutPauseRec.Element := 'Pause';
              TmpHourAccAutPauseRec."Monday From" := "Tuesday From";
              TmpHourAccAutPauseRec."Monday To" := "Tuesday To";
              TmpHourAccAutPauseRec."Monday Travel Back" := 2;
              TmpHourAccAutPauseRec.Hours := CalcHoursWithinStartEndTime("Tuesday From", "Tuesday To");
              TmpHourAccAutPauseRec.INSERT;
            END;

            IF ("Wednesday From" <> 0T) AND ("Wednesday To" <> 0T) THEN BEGIN
              lvDayFactor := 4;
              TmpHourAccAutPauseRec."Line No." := TimeToInteger("Wednesday From", 0, 0, 1) + (lvDayFactor * 2400);
              IF ("Wednesday To" < "Wednesday From") THEN lvDayFactor := lvDayFactor + 1;
              TmpHourAccAutPauseRec."Monday Travel To" := TimeToInteger("Wednesday To", 0, 0, 1) + (lvDayFactor * 2400);
              TmpHourAccAutPauseRec.Element := '';
              IF lvPauseBln[3] THEN
                TmpHourAccAutPauseRec.Element := 'Pause';
              TmpHourAccAutPauseRec."Monday From" := "Wednesday From";
              TmpHourAccAutPauseRec."Monday To" := "Wednesday To";
              TmpHourAccAutPauseRec."Monday Travel Back" := 3;
              TmpHourAccAutPauseRec.Hours := CalcHoursWithinStartEndTime("Wednesday From", "Wednesday To");
              TmpHourAccAutPauseRec.INSERT;
            END;

            IF ("Thursday From" <> 0T) AND ("Thursday To" <> 0T) THEN BEGIN
              lvDayFactor := 5;
              TmpHourAccAutPauseRec."Line No." := TimeToInteger("Thursday From", 0, 0, 1) + (lvDayFactor * 2400);
              IF ("Thursday To" < "Thursday From") THEN lvDayFactor := lvDayFactor + 1;
              TmpHourAccAutPauseRec."Monday Travel To" := TimeToInteger("Thursday To", 0, 0, 1) + (lvDayFactor * 2400);
              TmpHourAccAutPauseRec.Element := '';
              IF lvPauseBln[4] THEN
                TmpHourAccAutPauseRec.Element := 'Pause';
              TmpHourAccAutPauseRec."Monday From" := "Thursday From";
              TmpHourAccAutPauseRec."Monday To" := "Thursday To";
              TmpHourAccAutPauseRec."Monday Travel Back" := 4;
              TmpHourAccAutPauseRec.Hours := CalcHoursWithinStartEndTime("Thursday From", "Thursday To");
              TmpHourAccAutPauseRec.INSERT;
            END;

            IF ("Friday From" <> 0T) AND ("Friday To" <> 0T) THEN BEGIN
              lvDayFactor := 6;
              TmpHourAccAutPauseRec."Line No." := TimeToInteger("Friday From", 0, 0, 1) + (lvDayFactor * 2400);
              IF ("Friday To" < "Friday From") THEN lvDayFactor := lvDayFactor + 1;
              TmpHourAccAutPauseRec."Monday Travel To" := TimeToInteger("Friday To", 0, 0, 1) + (lvDayFactor * 2400);
              TmpHourAccAutPauseRec.Element := '';
              IF lvPauseBln[5] THEN
                TmpHourAccAutPauseRec.Element := 'Pause';
              TmpHourAccAutPauseRec."Monday From" := "Friday From";
              TmpHourAccAutPauseRec."Monday To" := "Friday To";
              TmpHourAccAutPauseRec."Monday Travel Back" := 5;
              TmpHourAccAutPauseRec.Hours := CalcHoursWithinStartEndTime("Friday From", "Friday To");
              TmpHourAccAutPauseRec.INSERT;
            END;

            IF ("Saturday From" <> 0T) AND ("Saturday To" <> 0T) THEN BEGIN
              lvDayFactor := 0;
              TmpHourAccAutPauseRec."Line No." := TimeToInteger("Saturday From", 0, 0, 1) + (lvDayFactor * 2400);
              IF ("Saturday To" < "Saturday From") THEN lvDayFactor := lvDayFactor + 1;
              TmpHourAccAutPauseRec."Monday Travel To" := TimeToInteger("Saturday To", 0, 0, 1) + (lvDayFactor * 2400);
              TmpHourAccAutPauseRec.Element := '';
              IF lvPauseBln[6] THEN
                TmpHourAccAutPauseRec.Element := 'Pause';
              TmpHourAccAutPauseRec."Monday From" := "Saturday From";
              TmpHourAccAutPauseRec."Monday To" := "Saturday To";
              TmpHourAccAutPauseRec."Monday Travel Back" := 6;
              TmpHourAccAutPauseRec.Hours := CalcHoursWithinStartEndTime("Saturday From", "Saturday To");
              TmpHourAccAutPauseRec.INSERT;
            END;

            IF ("Sunday From" <> 0T) AND ("Sunday To" <> 0T) THEN BEGIN
              lvDayFactor := 1;
              TmpHourAccAutPauseRec."Line No." := TimeToInteger("Sunday From", 0, 0, 1) + (lvDayFactor * 2400);
              IF ("Sunday To" < "Sunday From") THEN lvDayFactor := lvDayFactor + 1;
              TmpHourAccAutPauseRec."Monday Travel To" := TimeToInteger("Sunday To", 0, 0, 1) + (lvDayFactor * 2400);
              TmpHourAccAutPauseRec.Element := '';
              IF lvPauseBln[7] THEN
                TmpHourAccAutPauseRec.Element := 'Pause';
              TmpHourAccAutPauseRec."Monday From" := "Sunday From";
              TmpHourAccAutPauseRec."Monday To" := "Sunday To";
              TmpHourAccAutPauseRec."Monday Travel Back" := 7;
              TmpHourAccAutPauseRec.Hours := CalcHoursWithinStartEndTime("Sunday From", "Sunday To");
              TmpHourAccAutPauseRec.INSERT;
            END;

          UNTIL NEXT = 0;
        END;
      END;

      WITH TmpHourAccAutPauseRec DO BEGIN
        IF FIND('-') THEN BEGIN
          lvFirstRecord := TRUE;
          lvAutPauseAllowed :=TRUE;
          lvFirstStartTime := "Line No.";
          lvFirstStartTimeSave := lvFirstStartTime;
          lvTotalHours := 0;
          lvMinuteGap := 0;
          REPEAT
            lvStartTime := "Line No.";
            IF NOT lvFirstRecord THEN BEGIN
              lvMinuteGap :=(((lvStartTime - (lvStartTime MOD 100)) - (lvPrevEndTime - (lvPrevEndTime MOD 100)) ) * 60 / 100) +
                            (lvStartTime MOD 100) - (lvPrevEndTime MOD 100);
            END;
            //* Project is in tijdelijke tabel gevuld met de taak
            IF ("Project No." <> UARHourAccountingSetup."UAR Task Worked Hours") OR (lvMinuteGap > 1) THEN BEGIN
              IF NOT lvFirstRecord THEN BEGIN
                UpdateAutomaticPause(TmpHourAccAutPauseRec, lvAutPauseAllowed, lvFirstStartTime, lvPrevStartTime, lvTotalHours);
                GET(IYear,IWeek,IEmployeeNo,lvStartTime);  // Restore
                IF (lvAutPauseAllowed) AND (NOT (lvTotalHours < UARHourAccountingSetup."Min. WorkTime Pause Deduction")) THEN
                  lvAutPauseAllowed := FALSE;
              END;
              IF ("Project No." <> UARHourAccountingSetup."UAR Task Worked Hours") THEN
                UpdateAutomaticPause(TmpHourAccAutPauseRec, FALSE, lvStartTime, lvStartTime, 0);
              lvFirstStartTime := lvStartTime;
              lvTotalHours := 0;
            END;
            IF lvFirstRecord THEN BEGIN
              lvMinuteGap := 0;
              lvFirstRecord := FALSE;
            END;
            IF lvMinuteGap > 240 THEN BEGIN  //* New Day
              lvAutPauseAllowed := TRUE;
              lvFirstStartTime := lvStartTime;
              lvFirstStartTimeSave := lvFirstStartTime;
              lvTotalHours := 0;
              lvMinuteGap := 0;
            END;
            IF (Element <> '') THEN BEGIN
              lvAutPauseAllowed := FALSE;
              lvFirstStartTime := lvFirstStartTimeSave;
            END;

            lvTotalHours := lvTotalHours + Hours;
            lvPrevStartTime := lvStartTime;
            lvPrevEndTime := "Monday Travel To";
          UNTIL NEXT = 0;
          IF ("Project No." = UARHourAccountingSetup."UAR Task Worked Hours") THEN
            UpdateAutomaticPause(TmpHourAccAutPauseRec, lvAutPauseAllowed, lvFirstStartTime, lvPrevStartTime, lvTotalHours);
        END;
      END;
    END;

    PROCEDURE UpdateAutomaticPause@1210190015(VAR ITmpRec@1210190000 : TEMPORARY Record 11012610;IAutomPause@1210190008 : Boolean;IStartTime@1210190001 : Integer;IEndTime@1210190002 : Integer;ITotalHours@1210190003 : Decimal);
    VAR
      lvPrevHours@1210190004 : Decimal;
      lvHoursUptoCurr@1210190005 : Decimal;
      lvHrsAfterStart@1210190006 : Decimal;
      lvDefaultPauseHrs@1210190007 : Decimal;
    BEGIN
      WITH ITmpRec DO BEGIN
        SETRANGE("Line No.", IStartTime, IEndTime);

        IF (NOT IAutomPause) OR (ITotalHours < UARHourAccountingSetup."Min. WorkTime Pause Deduction") THEN BEGIN
          DELETEALL;
          SETRANGE("Line No.");  // Reset filter
          EXIT;
        END;

        IF FIND('-') THEN BEGIN
          REPEAT
            lvPrevHours :=(((("Line No." - ("Line No." MOD 100)) - (IStartTime - (IStartTime MOD 100)) ) * 60 / 100) +
                           ("Line No." MOD 100) - (IStartTime MOD 100)) / 60 ;
            lvHoursUptoCurr := lvPrevHours + Hours;
            IF (HoursEndAutomPause >=lvPrevHours) AND (HoursStartAutomPause <= lvHoursUptoCurr) AND (Hours > 0) THEN BEGIN
              lvHrsAfterStart := HoursStartAutomPause - lvPrevHours;
              IF lvHrsAfterStart < 0 THEN
                lvHrsAfterStart :=0;

              lvDefaultPauseHrs := HoursEndAutomPause - HoursStartAutomPause;
              IF (lvPrevHours > HoursStartAutomPause) THEN
                lvDefaultPauseHrs := lvDefaultPauseHrs - (lvPrevHours - HoursStartAutomPause);
              IF (HoursEndAutomPause > lvHoursUptoCurr) THEN
                lvDefaultPauseHrs := lvDefaultPauseHrs - (HoursEndAutomPause - lvHoursUptoCurr);

              IF (lvDefaultPauseHrs > 0) THEN BEGIN
                "Tuesday Travel To" := lvDefaultPauseHrs;
                "Tuesday From" := TimeAddedWithNoOfHours("Monday From", lvHrsAfterStart);
                "Tuesday To" := TimeAddedWithNoOfHours("Tuesday From", lvDefaultPauseHrs);
                MODIFY;
              END;
            END ELSE
              DELETE;
          UNTIL NEXT = 0;
        END;
        SETRANGE("Line No.");  // Reset filter
      END;
    END;

    PROCEDURE CheckAutomaticPause@1210190012(IHourAccLineRec@1210190000 : Record 11012610;IDayNo@1210190003 : Integer;VAR OStartTimeAP@1210190002 : Time;VAR OEndTimeAP@1210190001 : Time) : Boolean;
    BEGIN
      WITH IHourAccLineRec DO BEGIN
        TmpHourAccAutPauseRec.SETRANGE(Year, Year);
        TmpHourAccAutPauseRec.SETRANGE(Week, Week);
        TmpHourAccAutPauseRec.SETRANGE("Employee No.", "Employee No.");
        TmpHourAccAutPauseRec.SETRANGE("Hours Monday", "Line No.");
        TmpHourAccAutPauseRec.SETRANGE("Monday Travel Back", IDayNo);
        IF NOT TmpHourAccAutPauseRec.FIND('-') THEN
          EXIT(FALSE);

        IF (TmpHourAccAutPauseRec."Tuesday From" = 0T) OR (TmpHourAccAutPauseRec."Tuesday To" = 0T) THEN
          EXIT(FALSE);

        OStartTimeAP := TmpHourAccAutPauseRec."Tuesday From";
        OEndTimeAP := TmpHourAccAutPauseRec."Tuesday To";
        EXIT(TRUE);
      END;
    END;

    PROCEDURE RecalculateNumberOfHours@1210190019(VAR IOHourAccLineRec@1210190002 : Record 11012610;ICalledFrom@1210190003 : Code[10]);
    VAR
      lvHourAccLineRec@1210190001 : Record 11012610;
      lvDummyHourAccPauseRec@1210190000 : Record 11012611;
    BEGIN
      WITH lvHourAccLineRec DO BEGIN
        lvHourAccLineRec := IOHourAccLineRec;
        CalculateHours(lvHourAccLineRec, lvDummyHourAccPauseRec, ICalledFrom);
        CalculateHoursMinusAutomPause(lvHourAccLineRec);
        IF (Hours <> IOHourAccLineRec.Hours) OR
           ("Hours Monday" <> IOHourAccLineRec."Hours Monday") OR
           ("Hours Tuesday" <> IOHourAccLineRec."Hours Tuesday") OR
           ("Hours Wednesday" <> IOHourAccLineRec."Hours Wednesday") OR
           ("Hours Thursday" <> IOHourAccLineRec."Hours Thursday") OR
           ("Hours Friday" <> IOHourAccLineRec."Hours Friday") OR
           ("Hours Saturday" <> IOHourAccLineRec."Hours Saturday") OR
           ("Hours Sunday" <> IOHourAccLineRec."Hours Sunday")
        THEN BEGIN
          IOHourAccLineRec.Hours := Hours;
          IOHourAccLineRec."Hours Monday" := "Hours Monday";
          IOHourAccLineRec."Hours Tuesday" := "Hours Tuesday";
          IOHourAccLineRec."Hours Wednesday" := "Hours Wednesday";
          IOHourAccLineRec."Hours Thursday" := "Hours Thursday";
          IOHourAccLineRec."Hours Friday" := "Hours Friday";
          IOHourAccLineRec."Hours Saturday" := "Hours Saturday";
          IOHourAccLineRec."Hours Sunday" := "Hours Sunday";
          IOHourAccLineRec.MODIFY(FALSE); //Trigger must be 'False' otherwise hours will be calculated without Autom. Pause Deduction
        END;
      END;
    END;

    PROCEDURE CalculateHoursMinusAutomPause@1210190018(VAR IHourAccLineRec@1210190000 : Record 11012610);
    VAR
      lvDayNo@1210190001 : Integer;
    BEGIN
      WITH IHourAccLineRec DO BEGIN
        TmpHourAccAutPauseRec.SETRANGE(Year, Year);
        TmpHourAccAutPauseRec.SETRANGE(Week, Week);
        TmpHourAccAutPauseRec.SETRANGE("Employee No.", "Employee No.");
        TmpHourAccAutPauseRec.SETRANGE("Hours Monday", "Line No.");

        FOR lvDayNo := 1 TO 7 DO BEGIN
          TmpHourAccAutPauseRec.SETRANGE("Monday Travel Back", lvDayNo);
          IF TmpHourAccAutPauseRec.FIND('-') THEN BEGIN
            IF (TmpHourAccAutPauseRec."Tuesday From" <> 0T) AND (TmpHourAccAutPauseRec."Tuesday To" <> 0T) THEN BEGIN
              CASE lvDayNo OF
                1: "Hours Monday" := "Hours Monday" - TmpHourAccAutPauseRec."Tuesday Travel To";
                2: "Hours Tuesday" := "Hours Tuesday" - TmpHourAccAutPauseRec."Tuesday Travel To";
                3: "Hours Wednesday" := "Hours Wednesday" - TmpHourAccAutPauseRec."Tuesday Travel To";
                4: "Hours Thursday" := "Hours Thursday" - TmpHourAccAutPauseRec."Tuesday Travel To";
                5: "Hours Friday" := "Hours Friday" - TmpHourAccAutPauseRec."Tuesday Travel To";
                6: "Hours Saturday" := "Hours Saturday" - TmpHourAccAutPauseRec."Tuesday Travel To";
                7: "Hours Sunday" := "Hours Sunday" - TmpHourAccAutPauseRec."Tuesday Travel To";
              END
            END;
          END;
        END;
        Hours := "Hours Monday" + "Hours Tuesday" + "Hours Wednesday" +
                 "Hours Thursday" + "Hours Friday" + "Hours Saturday" + "Hours Sunday";
      END;
    END;

    PROCEDURE TimeAddedWithNoOfHours@1210190016(ITime@1210190000 : Time;INoOfHours@1210190001 : Decimal) : Time;
    VAR
      lvHour@1210190003 : Integer;
      lvMinute@1210190002 : Integer;
      lvHoursToAdd@1210190004 : Integer;
      lvMinutesToAdd@1210190005 : Integer;
      lvTime@1210190006 : Time;
    BEGIN
      IF INoOfHours <= 0 THEN
        EXIT(ITime);

      EVALUATE(lvHour, FORMAT(ITime,0,'<Hours24>'));
      EVALUATE(lvMinute, FORMAT(ITime,0,'<Minutes>'));

      lvHoursToAdd := ROUND(INoOfHours, 1, '<');
      lvMinutesToAdd := ROUND( ((INoOfHours - lvHoursToAdd) * 60), 1);

      lvHour := lvHour + lvHoursToAdd;
      IF lvHour >= 24 THEN
        lvHour := lvHour - 24;

      lvMinute := lvMinute + lvMinutesToAdd;
      IF lvMinute >= 60 THEN BEGIN
        lvHour := lvHour + 1;
        IF lvHour >= 24 THEN
          lvHour := lvHour - 24;
        lvMinute := lvMinute - 60;
      END;

      EVALUATE(lvTime, FORMAT(lvHour) + ' ' + FORMAT(lvMinute));
      EXIT(lvTime);
    END;

    BEGIN
    END.
  }
}

