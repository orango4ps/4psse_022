OBJECT Codeunit 130400 CAL Test Runner
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    TableNo=130401;
    Subtype=TestRunner;
    TestIsolation=Codeunit;
    OnRun=BEGIN
            IF CALTestSuite.GET("Test Suite") THEN BEGIN
              CALTestLine.COPY(Rec);
              CALTestLine.SETRANGE("Test Suite","Test Suite");
              RunTests;
            END;
          END;

  }
  CODE
  {
    VAR
      CALTestSuite@1028 : Record 130400;
      CALTestLine@1106000008 : Record 130401;
      CALTestLineFunction@1000 : Record 130401;
      CALTestMgt@1106000005 : Codeunit 130401;
      CALTestRunnerPublisher@1030 : Codeunit 130403;
      Window@1002 : Dialog;
      CompanyWorkDate@1029 : Date;
      TestRunNo@1027 : Integer;
      MaxLineNo@1021 : Integer;
      MinLineNo@1022 : Integer;
      Filter@1001 : Text;
      ExecutingTestsMsg@1003 : TextConst '@@@={Locked};ENU=Executing Tests...\;NLD=Executing Tests...\';
      TestSuiteMsg@1004 : TextConst '@@@={Locked};ENU=Test Suite    #1###################\;NLD=Test Suite    #1###################\';
      TestCodeunitMsg@1012 : TextConst '@@@={Locked};ENU=Test Codeunit #2################### @3@@@@@@@@@@@@@\;NLD=Test Codeunit #2################### @3@@@@@@@@@@@@@\';
      TestFunctionMsg@1013 : TextConst '@@@={Locked};ENU=Test Function #4################### @5@@@@@@@@@@@@@\;NLD=Test Function #4################### @5@@@@@@@@@@@@@\';
      NoOfResultsMsg@1005 : TextConst '@@@={Locked};ENU=No. of Results with:\;NLD=No. of Results with:\';
      WindowUpdateDateTime@1007 : DateTime;
      WindowIsOpen@1006 : Boolean;
      WindowTestSuite@1014 : Code[10];
      WindowTestGroup@1010 : Text;
      WindowTestCodeunit@1009 : Text;
      WindowTestFunction@1008 : Text;
      WindowTestSuccess@1015 : Integer;
      WindowTestFailure@1016 : Integer;
      WindowTestSkip@1017 : Integer;
      SuccessMsg@1018 : TextConst '@@@={Locked};ENU="    Success   #6######\";NLD="    Success   #6######\"';
      FailureMsg@1019 : TextConst '@@@={Locked};ENU="    Failure   #7######\";NLD="    Failure   #7######\"';
      SkipMsg@1020 : TextConst '@@@={Locked};ENU="    Skip      #8######\";NLD="    Skip      #8######\"';
      WindowNoOfTestCodeunitTotal@1011 : Integer;
      WindowNoOfFunctionTotal@1023 : Integer;
      WindowNoOfTestCodeunit@1025 : Integer;
      WindowNoOfFunction@1024 : Integer;

    LOCAL PROCEDURE RunTests@1106000002();
    VAR
      CALTestResult@1000 : Record 130405;
      CodeCoverageMgt@1001 : Codeunit 9990;
    BEGIN
      WITH CALTestLine DO BEGIN
        OpenWindow;
        MODIFYALL(Result,Result::" ");
        MODIFYALL("First Error",'');
        COMMIT;
        TestRunNo := CALTestResult.LastTestRunNo + 1;
        CompanyWorkDate := WORKDATE;
        Filter := GETVIEW;
        WindowNoOfTestCodeunitTotal := CountTestCodeunitsToRun(CALTestLine);
        SETRANGE("Line Type","Line Type"::Codeunit);
        IF FIND('-') THEN
          REPEAT
            IF UpdateTCM THEN
              CodeCoverageMgt.Start(TRUE);

            MinLineNo := "Line No.";
            MaxLineNo := GetMaxCodeunitLineNo(WindowNoOfFunctionTotal);
            IF Run THEN
              WindowNoOfTestCodeunit += 1;
            WindowNoOfFunction := 0;

            IF CALTestMgt.ISPUBLISHMODE THEN
              DeleteChildren;

            CODEUNIT.RUN("Test Codeunit");

            IF UpdateTCM THEN BEGIN
              CodeCoverageMgt.Stop;
              CALTestMgt.ExtendTestCoverage("Test Codeunit");
            END;
          UNTIL NEXT = 0;

        CloseWindow;
      END;
    END;

    [External]
    PROCEDURE OnBeforeTestRun@1102601000(CodeunitID@1102601000 : Integer;CodeunitName@1102601001 : Text[30];FunctionName@1102601002 : Text[128];FunctionTestPermissions@1102601003 : TestPermissions) : Boolean;
    BEGIN
      CALTestRunnerPublisher.SetSeed(1);
      APPLICATIONAREA('');
      WORKDATE := CompanyWorkDate;
      UpDateWindow(
        CALTestLine."Test Suite",CALTestLine.Name,CodeunitName,FunctionName,
        WindowTestSuccess,WindowTestFailure,WindowTestSkip,
        WindowNoOfTestCodeunitTotal,WindowNoOfFunctionTotal,
        WindowNoOfTestCodeunit,WindowNoOfFunction);

      InitCodeunitLine;

      IF FunctionName = '' THEN BEGIN
        CALTestLine.Result := CALTestLine.Result::" ";
        CALTestLine."Start Time" := CURRENTDATETIME;
        EXIT(TRUE);
      END;

      IF CALTestMgt.ISPUBLISHMODE THEN
        AddTestMethod(FunctionName)
      ELSE BEGIN
        IF NOT TryFindTestFunctionInGroup(FunctionName) THEN
          EXIT(FALSE);

        InitTestFunctionLine;
        IF NOT CALTestLineFunction.Run OR NOT CALTestLine.Run THEN
          EXIT(FALSE);

        UpDateWindow(
          CALTestLine."Test Suite",CALTestLine.Name,CodeunitName,FunctionName,
          WindowTestSuccess,WindowTestFailure,WindowTestSkip,
          WindowNoOfTestCodeunitTotal,WindowNoOfFunctionTotal,
          WindowNoOfTestCodeunit,WindowNoOfFunction + 1);
      END;

      IF FunctionName = 'OnRun' THEN
        EXIT(TRUE);
      EXIT(CALTestMgt.ISTESTMODE);
    END;

    PROCEDURE OnAfterTestRun@1102601001(CodeunitID@1102601002 : Integer;CodeunitName@1102601001 : Text[30];FunctionName@1102601000 : Text[128];FunctionTestPermissions@1102601004 : TestPermissions;IsSuccess@1102601003 : Boolean);
    BEGIN
      IF (FunctionName <> '') AND (FunctionName <> 'OnRun') THEN
        IF IsSuccess THEN
          UpDateWindow(
            WindowTestSuite,WindowTestGroup,WindowTestCodeunit,WindowTestFunction,
            WindowTestSuccess + 1,WindowTestFailure,WindowTestSkip,
            WindowNoOfTestCodeunitTotal,WindowNoOfFunctionTotal,
            WindowNoOfTestCodeunit,WindowNoOfFunction)
        ELSE
          UpDateWindow(
            WindowTestSuite,WindowTestGroup,WindowTestCodeunit,WindowTestFunction,
            WindowTestSuccess,WindowTestFailure + 1,WindowTestSkip,
            WindowNoOfTestCodeunitTotal,WindowNoOfFunctionTotal,
            WindowNoOfTestCodeunit,WindowNoOfFunction);

      UpdateCodeunitLine(IsSuccess);

      IF FunctionName = '' THEN
        EXIT;

      UpdateTestFunctionLine(IsSuccess);

      COMMIT;
      APPLICATIONAREA('');
      CLEARLASTERROR;
    END;

    [External]
    PROCEDURE AddTestMethod@4(FunctionName@1000 : Text[128]);
    BEGIN
      WITH CALTestLineFunction DO BEGIN
        CALTestLineFunction := CALTestLine;
        "Line No." := MaxLineNo + 1;
        "Line Type" := "Line Type"::"Function";
        VALIDATE("Function",FunctionName);
        Run := CALTestLine.Run;
        "Start Time" := CURRENTDATETIME;
        "Finish Time" := CURRENTDATETIME;
        INSERT(TRUE);
      END;
      MaxLineNo := MaxLineNo + 1;
    END;

    [External]
    PROCEDURE InitCodeunitLine@11();
    BEGIN
      WITH CALTestLine DO BEGIN
        IF CALTestMgt.ISTESTMODE AND (Result = Result::" ") THEN
          Result := Result::Skipped;
        "Finish Time" := CURRENTDATETIME;
        MODIFY;
      END;
    END;

    PROCEDURE UpdateCodeunitLine@5(IsSuccess@1001 : Boolean);
    BEGIN
      WITH CALTestLine DO BEGIN
        IF CALTestMgt.ISPUBLISHMODE AND IsSuccess THEN
          Result := Result::" "
        ELSE
          IF Result <> Result::Failure THEN
            IF IsSuccess THEN
              Result := Result::Success
            ELSE BEGIN
              "First Error" := COPYSTR(GETLASTERRORTEXT,1,MAXSTRLEN("First Error"));
              Result := Result::Failure
            END;
        "Finish Time" := CURRENTDATETIME;
        MODIFY;
      END;
    END;

    [External]
    PROCEDURE InitTestFunctionLine@8();
    BEGIN
      WITH CALTestLineFunction DO BEGIN
        "Start Time" := CURRENTDATETIME;
        "Finish Time" := "Start Time";
        Result := Result::Skipped;
        MODIFY;
      END;
    END;

    PROCEDURE UpdateTestFunctionLine@6(IsSuccess@1001 : Boolean);
    VAR
      CALTestResult@1000 : Record 130405;
    BEGIN
      WITH CALTestLineFunction DO BEGIN
        IF IsSuccess THEN
          Result := CALTestLine.Result::Success
        ELSE BEGIN
          "First Error" := COPYSTR(GETLASTERRORTEXT,1,MAXSTRLEN("First Error"));
          Result := Result::Failure
        END;
        "Finish Time" := CURRENTDATETIME;
        MODIFY;

        CALTestResult.Add(CALTestLineFunction,TestRunNo);
      END;
    END;

    [External]
    PROCEDURE TryFindTestFunctionInGroup@9(FunctionName@1000 : Text[128]) : Boolean;
    BEGIN
      WITH CALTestLineFunction DO BEGIN
        RESET;
        SETVIEW(Filter);
        SETRANGE("Test Suite",CALTestLine."Test Suite");
        SETRANGE("Test Codeunit",CALTestLine."Test Codeunit");
        SETRANGE("Function",FunctionName);
        IF FIND('-') THEN
          REPEAT
            IF "Line No." IN [MinLineNo..MaxLineNo] THEN
              EXIT(TRUE);
          UNTIL NEXT = 0;
        EXIT(FALSE);
      END;
    END;

    [External]
    PROCEDURE CountTestCodeunitsToRun@7(VAR CALTestLine@1000 : Record 130401) NoOfTestCodeunits : Integer;
    BEGIN
      IF NOT CALTestMgt.ISTESTMODE THEN
        EXIT;

      WITH CALTestLine DO BEGIN
        SETRANGE("Line Type","Line Type"::Codeunit);
        SETRANGE(Run,TRUE);
        NoOfTestCodeunits := COUNT;
      END;
    END;

    [External]
    PROCEDURE UpdateTCM@1() : Boolean;
    BEGIN
      EXIT(CALTestMgt.ISTESTMODE AND CALTestSuite."Update Test Coverage Map");
    END;

    LOCAL PROCEDURE OpenWindow@59();
    BEGIN
      IF NOT CALTestMgt.ISTESTMODE THEN
        EXIT;

      Window.OPEN(
        ExecutingTestsMsg +
        TestSuiteMsg +
        TestCodeunitMsg +
        TestFunctionMsg +
        NoOfResultsMsg +
        SuccessMsg +
        FailureMsg +
        SkipMsg);
      WindowIsOpen := TRUE;
    END;

    LOCAL PROCEDURE UpDateWindow@31(NewWindowTestSuite@1000 : Code[10];NewWindowTestGroup@1004 : Text;NewWindowTestCodeunit@1003 : Text;NewWindowTestFunction@1001 : Text;NewWindowTestSuccess@1006 : Integer;NewWindowTestFailure@1005 : Integer;NewWindowTestSkip@1002 : Integer;NewWindowNoOfTestCodeunitTotal@1010 : Integer;NewWindowNoOfFunctionTotal@1009 : Integer;NewWindowNoOfTestCodeunit@1008 : Integer;NewWindowNoOfFunction@1007 : Integer);
    BEGIN
      IF NOT CALTestMgt.ISTESTMODE THEN
        EXIT;

      WindowTestSuite := NewWindowTestSuite;
      WindowTestGroup := NewWindowTestGroup;
      WindowTestCodeunit := NewWindowTestCodeunit;
      WindowTestFunction := NewWindowTestFunction;
      WindowTestSuccess := NewWindowTestSuccess;
      WindowTestFailure := NewWindowTestFailure;
      WindowTestSkip := NewWindowTestSkip;

      WindowNoOfTestCodeunitTotal := NewWindowNoOfTestCodeunitTotal;
      WindowNoOfFunctionTotal := NewWindowNoOfFunctionTotal;
      WindowNoOfTestCodeunit := NewWindowNoOfTestCodeunit;
      WindowNoOfFunction := NewWindowNoOfFunction;

      IF IsTimeForUpdate THEN BEGIN
        IF NOT WindowIsOpen THEN
          OpenWindow;
        Window.UPDATE(1,WindowTestSuite);
        Window.UPDATE(2,WindowTestCodeunit);
        Window.UPDATE(4,WindowTestFunction);
        Window.UPDATE(6,WindowTestSuccess);
        Window.UPDATE(7,WindowTestFailure);
        Window.UPDATE(8,WindowTestSkip);

        IF NewWindowNoOfTestCodeunitTotal <> 0 THEN
          Window.UPDATE(3,ROUND(NewWindowNoOfTestCodeunit / NewWindowNoOfTestCodeunitTotal * 10000,1));
        IF NewWindowNoOfFunctionTotal <> 0 THEN
          Window.UPDATE(5,ROUND(NewWindowNoOfFunction / NewWindowNoOfFunctionTotal * 10000,1));
      END;
    END;

    LOCAL PROCEDURE CloseWindow@2();
    BEGIN
      IF NOT CALTestMgt.ISTESTMODE THEN
        EXIT;

      IF WindowIsOpen THEN BEGIN
        Window.CLOSE;
        WindowIsOpen := FALSE;
      END;
    END;

    LOCAL PROCEDURE IsTimeForUpdate@69() : Boolean;
    BEGIN
      IF TRUE IN [WindowUpdateDateTime = 0DT,CURRENTDATETIME - WindowUpdateDateTime >= 1000] THEN BEGIN
        WindowUpdateDateTime := CURRENTDATETIME;
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    BEGIN
    END.
  }
}

