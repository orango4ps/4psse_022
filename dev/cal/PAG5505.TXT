OBJECT Page 5505 Sales Quote Entity
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    CaptionML=[@@@={Locked};
               ENU=salesQuotes;
               NOR=salesQuotes;
               SVE=salesQuotes];
    SourceTable=Table5505;
    DelayedInsert=Yes;
    PageType=API;
    ChangeTrackingAllowed=Yes;
    EntitySetName=salesQuotes;
    EntityName=salesQuote;
    OnOpenPage=BEGIN
                 CheckPermissions;
               END;

    OnAfterGetRecord=VAR
                       GraphMgtSalesQuoteBuffer@1000 : Codeunit 5506;
                     BEGIN
                       SetCalculatedFields;
                       IF HasWritePermission THEN
                         GraphMgtSalesQuoteBuffer.RedistributeInvoiceDiscounts(Rec);
                     END;

    OnNewRecord=BEGIN
                  ClearCalculatedFields;
                END;

    OnInsertRecord=VAR
                     GraphMgtSalesQuoteBuffer@1001 : Codeunit 5506;
                   BEGIN
                     CheckCustomerSpecified;
                     ProcessBillingPostalAddress;

                     GraphMgtSalesQuoteBuffer.PropagateOnInsert(Rec,TempFieldBuffer);
                     SetDates;

                     UpdateDiscount;

                     SetCalculatedFields;

                     EXIT(FALSE);
                   END;

    OnModifyRecord=VAR
                     GraphMgtSalesQuoteBuffer@1000 : Codeunit 5506;
                   BEGIN
                     IF xRec.Id <> Id THEN
                       ERROR(CannotChangeIDErr);

                     ProcessBillingPostalAddress;

                     GraphMgtSalesQuoteBuffer.PropagateOnModify(Rec,TempFieldBuffer);
                     UpdateDiscount;

                     SetCalculatedFields;

                     EXIT(FALSE);
                   END;

    OnDeleteRecord=VAR
                     GraphMgtSalesQuoteBuffer@1000 : Codeunit 5506;
                   BEGIN
                     GraphMgtSalesQuoteBuffer.PropagateOnDelete(Rec);

                     EXIT(FALSE);
                   END;

    ODataKeyFields=Id;
  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Name=Group;
                GroupType=Repeater }

    { 18  ;2   ;Field     ;
                Name=id;
                CaptionML=[@@@={Locked};
                           ENU=id;
                           NOR=id;
                           SVE=id];
                ApplicationArea=#All;
                SourceExpr=Id;
                Editable=FALSE;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO(Id));
                           END;
                            }

    { 19  ;2   ;Field     ;
                Name=number;
                CaptionML=[@@@={Locked};
                           ENU=Number;
                           NOR=Number;
                           SVE=Number];
                ApplicationArea=#All;
                SourceExpr="No.";
                Editable=FALSE;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("No."));
                           END;
                            }

    { 29  ;2   ;Field     ;
                Name=externalDocumentNumber;
                CaptionML=[@@@={Locked};
                           ENU=externalDocumentNumber;
                           NOR=externalDocumentNumber;
                           SVE=externalDocumentNumber];
                ApplicationArea=#All;
                SourceExpr="External Document No.";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("External Document No."))
                           END;
                            }

    { 10  ;2   ;Field     ;
                Name=documentDate;
                CaptionML=[@@@={Locked};
                           ENU=documentDate;
                           NOR=documentDate;
                           SVE=documentDate];
                ApplicationArea=#All;
                SourceExpr="Document Date";
                OnValidate=BEGIN
                             DocumentDateVar := "Document Date";
                             DocumentDateSet := TRUE;

                             RegisterFieldSet(FIELDNO("Document Date"));
                           END;
                            }

    { 9   ;2   ;Field     ;
                Name=dueDate;
                CaptionML=[@@@={Locked};
                           ENU=dueDate;
                           NOR=dueDate;
                           SVE=dueDate];
                ApplicationArea=#All;
                SourceExpr="Due Date";
                OnValidate=BEGIN
                             DueDateVar := "Due Date";
                             DueDateSet := TRUE;

                             RegisterFieldSet(FIELDNO("Due Date"));
                           END;
                            }

    { 7   ;2   ;Field     ;
                Name=customerId;
                CaptionML=[@@@={Locked};
                           ENU=customerId;
                           NOR=customerId;
                           SVE=customerId];
                ApplicationArea=#All;
                SourceExpr="Customer Id";
                OnValidate=VAR
                             O365SalesInvoiceMgmt@1000 : Codeunit 2310;
                           BEGIN
                             Customer.SETRANGE(Id,"Customer Id");
                             IF NOT Customer.FINDFIRST THEN
                               ERROR(CouldNotFindCustomerErr);

                             O365SalesInvoiceMgmt.EnforceCustomerTemplateIntegrity(Customer);

                             "Sell-to Customer No." := Customer."No.";
                             RegisterFieldSet(FIELDNO("Customer Id"));
                             RegisterFieldSet(FIELDNO("Sell-to Customer No."));
                           END;
                            }

    { 6   ;2   ;Field     ;
                Name=contactId;
                CaptionML=[@@@={Locked};
                           ENU=contactId;
                           NOR=contactId;
                           SVE=contactId];
                ApplicationArea=#All;
                SourceExpr="Contact Graph Id";
                OnValidate=VAR
                             Contact@1000 : Record 5050;
                             Customer@1001 : Record 18;
                             GraphIntContact@1003 : Codeunit 5461;
                           BEGIN
                             RegisterFieldSet(FIELDNO("Contact Graph Id"));

                             IF "Contact Graph Id" = '' THEN
                               ERROR(ContactIdHasToHaveValueErr);

                             IF NOT GraphIntContact.FindOrCreateCustomerFromGraphContactSafe("Contact Graph Id",Customer,Contact) THEN
                               EXIT;

                             UpdateCustomerFromGraphContactId(Customer);

                             IF Contact."Company No." = Customer."No." THEN BEGIN
                               VALIDATE("Sell-to Contact No.",Contact."No.");
                               VALIDATE("Sell-to Contact",Contact.Name);

                               RegisterFieldSet(FIELDNO("Sell-to Contact No."));
                               RegisterFieldSet(FIELDNO("Sell-to Contact"));
                             END;
                           END;
                            }

    { 5   ;2   ;Field     ;
                Name=customerNumber;
                CaptionML=[@@@={Locked};
                           ENU=customerNumber;
                           NOR=customerNumber;
                           SVE=customerNumber];
                ApplicationArea=#All;
                SourceExpr="Sell-to Customer No.";
                OnValidate=VAR
                             O365SalesInvoiceMgmt@1000 : Codeunit 2310;
                           BEGIN
                             IF Customer."No." <> '' THEN BEGIN
                               IF Customer."No." <> "Sell-to Customer No." THEN
                                 ERROR(CustomerValuesDontMatchErr);
                               EXIT;
                             END;

                             IF NOT Customer.GET("Sell-to Customer No.") THEN
                               ERROR(CouldNotFindCustomerErr);

                             O365SalesInvoiceMgmt.EnforceCustomerTemplateIntegrity(Customer);

                             "Customer Id" := Customer.Id;
                             RegisterFieldSet(FIELDNO("Customer Id"));
                             RegisterFieldSet(FIELDNO("Sell-to Customer No."));
                           END;
                            }

    { 4   ;2   ;Field     ;
                Name=customerName;
                CaptionML=[@@@={Locked};
                           ENU=customerName;
                           NOR=customerName;
                           SVE=customerName];
                ApplicationArea=#All;
                SourceExpr="Sell-to Customer Name";
                Editable=FALSE }

    { 3   ;2   ;Field     ;
                Name=billingPostalAddress;
                CaptionML=[@@@={Locked};
                           ENU=billingPostalAddress;
                           NOR=billingPostalAddress;
                           SVE=billingPostalAddress];
                ToolTipML=[ENU=Specifies the billing address of the Sales Invoice.;
                           NOR=Angir fakturaadressen for salgsfakturaen.;
                           SVE=Anger faktureringsadressen i f”rs„ljningsfakturan.];
                ApplicationArea=#All;
                SourceExpr=BillingPostalAddressJSONText;
                OnValidate=BEGIN
                             BillingPostalAddressSet := TRUE;
                           END;

                ODataEDMType=POSTALADDRESS }

    { 26  ;2   ;Field     ;
                Name=currencyId;
                CaptionML=[@@@={Locked};
                           ENU=CurrencyId;
                           NOR=CurrencyId;
                           SVE=CurrencyId];
                ApplicationArea=#All;
                SourceExpr="Currency Id";
                OnValidate=BEGIN
                             IF "Currency Id" = BlankGUID THEN
                               "Currency Code" := ''
                             ELSE BEGIN
                               Currency.SETRANGE(Id,"Currency Id");
                               IF NOT Currency.FINDFIRST THEN
                                 ERROR(CurrencyIdDoesNotMatchACurrencyErr);

                               "Currency Code" := Currency.Code;
                             END;

                             RegisterFieldSet(FIELDNO("Currency Id"));
                             RegisterFieldSet(FIELDNO("Currency Code"));
                           END;
                            }

    { 20  ;2   ;Field     ;
                Name=currencyCode;
                CaptionML=[@@@={Locked};
                           ENU=currencyCode;
                           NOR=currencyCode;
                           SVE=currencyCode];
                ApplicationArea=#All;
                SourceExpr=CurrencyCodeTxt;
                OnValidate=BEGIN
                             "Currency Code" :=
                               GraphMgtGeneralTools.TranslateCurrencyCodeToNAVCurrencyCode(
                                 LCYCurrencyCode,COPYSTR(CurrencyCodeTxt,1,MAXSTRLEN(LCYCurrencyCode)));

                             IF Currency.Code <> '' THEN BEGIN
                               IF Currency.Code <> "Currency Code" THEN
                                 ERROR(CurrencyValuesDontMatchErr);
                               EXIT;
                             END;

                             IF "Currency Code" = '' THEN
                               "Currency Id" := BlankGUID
                             ELSE BEGIN
                               IF NOT Currency.GET("Currency Code") THEN
                                 ERROR(CurrencyCodeDoesNotMatchACurrencyErr);

                               "Currency Id" := Currency.Id;
                             END;

                             RegisterFieldSet(FIELDNO("Currency Id"));
                             RegisterFieldSet(FIELDNO("Currency Code"));
                           END;
                            }

    { 25  ;2   ;Field     ;
                Name=paymentTermsId;
                CaptionML=[@@@={Locked};
                           ENU=PaymentTermsId;
                           NOR=PaymentTermsId;
                           SVE=PaymentTermsId];
                ApplicationArea=#All;
                SourceExpr="Payment Terms Id";
                OnValidate=BEGIN
                             IF "Payment Terms Id" = BlankGUID THEN
                               "Payment Terms Code" := ''
                             ELSE BEGIN
                               PaymentTerms.SETRANGE(Id,"Payment Terms Id");
                               IF NOT PaymentTerms.FINDFIRST THEN
                                 ERROR(PaymentTermsIdDoesNotMatchAPaymentTermsErr);

                               "Payment Terms Code" := PaymentTerms.Code;
                             END;

                             RegisterFieldSet(FIELDNO("Payment Terms Id"));
                             RegisterFieldSet(FIELDNO("Payment Terms Code"));
                           END;
                            }

    { 27  ;2   ;Field     ;
                Name=shipmentMethodId;
                CaptionML=[@@@={Locked};
                           ENU=ShipmentMethodId;
                           NOR=ShipmentMethodId;
                           SVE=ShipmentMethodId];
                ApplicationArea=#All;
                SourceExpr="Shipment Method Id";
                OnValidate=BEGIN
                             IF "Shipment Method Id" = BlankGUID THEN
                               "Shipment Method Code" := ''
                             ELSE BEGIN
                               ShipmentMethod.SETRANGE(Id,"Shipment Method Id");
                               IF NOT ShipmentMethod.FINDFIRST THEN
                                 ERROR(ShipmentMethodIdDoesNotMatchAShipmentMethodErr);

                               "Shipment Method Code" := ShipmentMethod.Code;
                             END;

                             RegisterFieldSet(FIELDNO("Shipment Method Id"));
                             RegisterFieldSet(FIELDNO("Shipment Method Code"));
                           END;
                            }

    { 11  ;2   ;Field     ;
                Name=salesperson;
                CaptionML=[@@@={Locked};
                           ENU=salesperson;
                           NOR=salesperson;
                           SVE=salesperson];
                ApplicationArea=#All;
                SourceExpr="Salesperson Code";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Salesperson Code"));
                           END;
                            }

    { 8   ;2   ;Part      ;
                Name=salesQuoteLines;
                CaptionML=[@@@={Locked};
                           ENU=Lines;
                           NOR=Lines;
                           SVE=Lines];
                ApplicationArea=#All;
                SubPageLink=Document Id=FIELD(Id);
                PagePartID=Page5506;
                EntitySetName=salesQuoteLines;
                EntityName=salesQuoteLine;
                PartType=Page }

    { 12  ;2   ;Part      ;
                Name=pdfDocument;
                CaptionML=[@@@={Locked};
                           ENU=PDF Document;
                           NOR=PDF Document;
                           SVE=PDF Document];
                ApplicationArea=#All;
                SubPageLink=Document Id=FIELD(Id);
                PagePartID=Page5529;
                EntitySetName=pdfDocument;
                EntityName=pdfDocument;
                PartType=Page }

    { 14  ;2   ;Field     ;
                Name=discountAmount;
                CaptionML=[@@@={Locked};
                           ENU=discountAmount;
                           NOR=discountAmount;
                           SVE=discountAmount];
                ApplicationArea=#All;
                SourceExpr="Invoice Discount Amount";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Invoice Discount Amount"));
                             InvoiceDiscountAmount := "Invoice Discount Amount";
                             DiscountAmountSet := TRUE;
                           END;
                            }

    { 22  ;2   ;Field     ;
                Name=totalAmountExcludingTax;
                CaptionML=[@@@={Locked};
                           ENU=totalAmountExcludingTax;
                           NOR=totalAmountExcludingTax;
                           SVE=totalAmountExcludingTax];
                ApplicationArea=#All;
                SourceExpr=Amount;
                Editable=FALSE }

    { 21  ;2   ;Field     ;
                Name=totalTaxAmount;
                CaptionML=[@@@={Locked};
                           ENU=totalTaxAmount;
                           NOR=totalTaxAmount;
                           SVE=totalTaxAmount];
                ToolTipML=[ENU=Specifies the total tax amount for the sales invoice.;
                           NOR=Angir det totale mva-bel›pet for salgsfakturaen.;
                           SVE=Anger f”rs„ljningsfakturans totala momsbelopp.];
                ApplicationArea=#All;
                SourceExpr="Total Tax Amount";
                Editable=FALSE;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Total Tax Amount"));
                           END;
                            }

    { 17  ;2   ;Field     ;
                Name=totalAmountIncludingTax;
                CaptionML=[@@@={Locked};
                           ENU=totalAmountIncludingTax;
                           NOR=totalAmountIncludingTax;
                           SVE=totalAmountIncludingTax];
                ApplicationArea=#All;
                SourceExpr="Amount Including VAT";
                Editable=FALSE;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Amount Including VAT"));
                           END;
                            }

    { 16  ;2   ;Field     ;
                Name=status;
                CaptionML=[@@@={Locked};
                           ENU=status;
                           NOR=status;
                           SVE=status];
                ToolTipML=[ENU=Specifies the status of the Sales Quote (Draft,Sent,Accepted).;
                           NOR=Angir statusen for tilbudet (Kladd,Sendt,Godtatt).;
                           SVE=Anger status f”r f”rs„ljningsofferten (Utkast, Skickad, Accepterad).];
                ApplicationArea=#All;
                SourceExpr=Status;
                Editable=FALSE;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO(Status));
                           END;
                            }

    { 28  ;2   ;Field     ;
                Name=sentDate;
                CaptionML=[@@@={Locked};
                           ENU=sentDate;
                           NOR=sentDate;
                           SVE=sentDate];
                ApplicationArea=#All;
                SourceExpr="Quote Sent to Customer" }

    { 23  ;2   ;Field     ;
                Name=validUntilDate;
                CaptionML=[@@@={Locked};
                           ENU=validUntilDate;
                           NOR=validUntilDate;
                           SVE=validUntilDate];
                ApplicationArea=#All;
                SourceExpr="Quote Valid Until Date";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Quote Valid Until Date"));
                           END;
                            }

    { 24  ;2   ;Field     ;
                Name=acceptedDate;
                CaptionML=[@@@={Locked};
                           ENU=acceptedDate;
                           NOR=acceptedDate;
                           SVE=acceptedDate];
                ApplicationArea=#All;
                SourceExpr="Quote Accepted Date";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Quote Accepted Date"));
                           END;
                            }

    { 15  ;2   ;Field     ;
                Name=lastModifiedDateTime;
                CaptionML=[@@@={Locked};
                           ENU=lastModifiedDateTime;
                           NOR=lastModifiedDateTime;
                           SVE=lastModifiedDateTime];
                ApplicationArea=#All;
                SourceExpr="Last Modified Date Time";
                Editable=FALSE }

  }
  CODE
  {
    VAR
      TempFieldBuffer@1004 : TEMPORARY Record 8450;
      Customer@1006 : Record 18;
      Currency@1013 : Record 4;
      PaymentTerms@1014 : Record 3;
      ShipmentMethod@1021 : Record 10;
      GraphMgtGeneralTools@1002 : Codeunit 5465;
      LCYCurrencyCode@1003 : Code[10];
      BillingPostalAddressJSONText@1000 : Text;
      CurrencyCodeTxt@1001 : Text;
      BillingPostalAddressSet@1005 : Boolean;
      CouldNotFindCustomerErr@1008 : TextConst '@@@={Locked};ENU=The customer cannot be found.;NOR=The customer cannot be found.;SVE=The customer cannot be found.';
      ContactIdHasToHaveValueErr@1007 : TextConst '@@@={Locked};ENU=Contact Id must have a value set.;NOR=Contact Id must have a value set.;SVE=Contact Id must have a value set.';
      CannotChangeIDErr@1009 : TextConst '@@@={Locked};ENU=The id cannot be changed.;NOR=The id cannot be changed.;SVE=The id cannot be changed.';
      CustomerNotProvidedErr@1024 : TextConst '@@@={Locked};ENU=A customerNumber or a customerId must be provided.;NOR=A customerNumber or a customerId must be provided.;SVE=A customerNumber or a customerId must be provided.';
      CustomerValuesDontMatchErr@1025 : TextConst '@@@={Locked};ENU=The customer values do not match to a specific Customer.;NOR=The customer values do not match to a specific Customer.;SVE=The customer values do not match to a specific Customer.';
      SalesQuotePermissionsErr@1023 : TextConst 'ENU=You do not have permissions to read Sales Quotes.;NOR=Du har ikke tillatelser til † lese tilbud.;SVE=Du saknar beh”righet att l„sa f”rs„ljningsofferter.';
      CurrencyValuesDontMatchErr@1012 : TextConst '@@@={Locked};ENU=The currency values do not match to a specific Currency.;NOR=The currency values do not match to a specific Currency.;SVE=The currency values do not match to a specific Currency.';
      CurrencyIdDoesNotMatchACurrencyErr@1011 : TextConst '@@@={Locked};ENU=The "currencyId" does not match to a Currency.;NOR=The "currencyId" does not match to a Currency.;SVE=The "currencyId" does not match to a Currency.';
      CurrencyCodeDoesNotMatchACurrencyErr@1010 : TextConst '@@@={Locked};ENU=The "currencyCode" does not match to a Currency.;NOR=The "currencyCode" does not match to a Currency.;SVE=The "currencyCode" does not match to a Currency.';
      PaymentTermsIdDoesNotMatchAPaymentTermsErr@1016 : TextConst '@@@={Locked};ENU=The "paymentTermsId" does not match to a Payment Terms.;NOR=The "paymentTermsId" does not match to a Payment Terms.;SVE=The "paymentTermsId" does not match to a Payment Terms.';
      ShipmentMethodIdDoesNotMatchAShipmentMethodErr@1019 : TextConst '@@@={Locked};ENU=The "shipmentMethodId" does not match to a Shipment Method.;NOR=The "shipmentMethodId" does not match to a Shipment Method.;SVE=The "shipmentMethodId" does not match to a Shipment Method.';
      DiscountAmountSet@1027 : Boolean;
      InvoiceDiscountAmount@1026 : Decimal;
      BlankGUID@1022 : GUID;
      DocumentDateSet@1031 : Boolean;
      DocumentDateVar@1030 : Date;
      DueDateSet@1029 : Boolean;
      DueDateVar@1028 : Date;
      CannotFindQuoteErr@1037 : TextConst '@@@={Locked};ENU=The quote cannot be found.;NOR=The quote cannot be found.;SVE=The quote cannot be found.';
      EmptyEmailErr@1036 : TextConst '@@@={Locked};ENU=The send-to email is empty. Specify email either for the customer or for the quote in email preview.;NOR=The send-to email is empty. Specify email either for the customer or for the quote in email preview.;SVE=The send-to email is empty. Specify email either for the customer or for the quote in email preview.';
      MailNotConfiguredErr@1035 : TextConst '@@@={Locked};ENU=An email account must be configured to send emails.;NOR=An email account must be configured to send emails.;SVE=An email account must be configured to send emails.';
      HasWritePermission@1015 : Boolean;

    LOCAL PROCEDURE SetCalculatedFields@6();
    VAR
      GraphMgtSalesQuote@1000 : Codeunit 5505;
    BEGIN
      BillingPostalAddressJSONText := GraphMgtSalesQuote.BillToCustomerAddressToJSON(Rec);
      CurrencyCodeTxt := GraphMgtGeneralTools.TranslateNAVCurrencyCodeToCurrencyCode(LCYCurrencyCode,"Currency Code");
    END;

    LOCAL PROCEDURE ClearCalculatedFields@10();
    BEGIN
      CLEAR(BillingPostalAddressJSONText);
      CLEAR(DiscountAmountSet);
      CLEAR(InvoiceDiscountAmount);

      TempFieldBuffer.DELETEALL;
    END;

    LOCAL PROCEDURE RegisterFieldSet@11(FieldNo@1000 : Integer);
    VAR
      LastOrderNo@1001 : Integer;
    BEGIN
      LastOrderNo := 1;
      IF TempFieldBuffer.FINDLAST THEN
        LastOrderNo := TempFieldBuffer.Order + 1;

      CLEAR(TempFieldBuffer);
      TempFieldBuffer.Order := LastOrderNo;
      TempFieldBuffer."Table ID" := DATABASE::"Sales Quote Entity Buffer";
      TempFieldBuffer."Field ID" := FieldNo;
      TempFieldBuffer.INSERT;
    END;

    LOCAL PROCEDURE CheckCustomerSpecified@1();
    BEGIN
      IF ("Sell-to Customer No." = '') AND
         ("Customer Id" = BlankGUID)
      THEN
        ERROR(CustomerNotProvidedErr);
    END;

    LOCAL PROCEDURE ProcessBillingPostalAddress@5();
    VAR
      GraphMgtSalesQuote@1000 : Codeunit 5505;
    BEGIN
      IF NOT BillingPostalAddressSet THEN
        EXIT;

      GraphMgtSalesQuote.ProcessComplexTypes(Rec,BillingPostalAddressJSONText);

      IF xRec."Sell-to Address" <> "Sell-to Address" THEN
        RegisterFieldSet(FIELDNO("Sell-to Address"));

      IF xRec."Sell-to Address 2" <> "Sell-to Address 2" THEN
        RegisterFieldSet(FIELDNO("Sell-to Address 2"));

      IF xRec."Sell-to City" <> "Sell-to City" THEN
        RegisterFieldSet(FIELDNO("Sell-to City"));

      IF xRec."Sell-to Country/Region Code" <> "Sell-to Country/Region Code" THEN
        RegisterFieldSet(FIELDNO("Sell-to Country/Region Code"));

      IF xRec."Sell-to Post Code" <> "Sell-to Post Code" THEN
        RegisterFieldSet(FIELDNO("Sell-to Post Code"));

      IF xRec."Sell-to County" <> "Sell-to County" THEN
        RegisterFieldSet(FIELDNO("Sell-to County"));
    END;

    LOCAL PROCEDURE UpdateCustomerFromGraphContactId@2(VAR Customer@1001 : Record 18);
    VAR
      O365SalesInvoiceMgmt@1002 : Codeunit 2310;
      UpdateCustomer@1000 : Boolean;
    BEGIN
      UpdateCustomer := "Sell-to Customer No." = '';
      IF NOT UpdateCustomer THEN BEGIN
        TempFieldBuffer.RESET;
        TempFieldBuffer.SETRANGE("Field ID",FIELDNO("Customer Id"));
        UpdateCustomer := NOT TempFieldBuffer.FINDFIRST;
        TempFieldBuffer.RESET;
      END;

      IF UpdateCustomer THEN BEGIN
        VALIDATE("Customer Id",Customer.Id);
        VALIDATE("Sell-to Customer No.",Customer."No.");
        RegisterFieldSet(FIELDNO("Customer Id"));
        RegisterFieldSet(FIELDNO("Sell-to Customer No."));
      END;

      O365SalesInvoiceMgmt.EnforceCustomerTemplateIntegrity(Customer);
    END;

    LOCAL PROCEDURE CheckPermissions@4();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Quote);
      IF NOT SalesHeader.READPERMISSION THEN
        ERROR(SalesQuotePermissionsErr);

      HasWritePermission := SalesHeader.WRITEPERMISSION;
    END;

    LOCAL PROCEDURE UpdateDiscount@3();
    VAR
      SalesHeader@1002 : Record 36;
      GraphMgtSalesQuoteBuffer@1003 : Codeunit 5506;
      SalesCalcDiscountByType@1000 : Codeunit 56;
    BEGIN
      IF NOT DiscountAmountSet THEN BEGIN
        GraphMgtSalesQuoteBuffer.RedistributeInvoiceDiscounts(Rec);
        EXIT;
      END;

      SalesHeader.GET(SalesHeader."Document Type"::Quote,"No.");
      SalesCalcDiscountByType.ApplyInvDiscBasedOnAmt(InvoiceDiscountAmount,SalesHeader);
    END;

    LOCAL PROCEDURE SetDates@8();
    VAR
      GraphMgtSalesQuoteBuffer@1000 : Codeunit 5506;
    BEGIN
      IF NOT (DueDateSet OR DocumentDateSet) THEN
        EXIT;

      TempFieldBuffer.RESET;
      TempFieldBuffer.DELETEALL;

      IF DocumentDateSet THEN BEGIN
        "Document Date" := DocumentDateVar;
        RegisterFieldSet(FIELDNO("Document Date"));
      END;

      IF DueDateSet THEN BEGIN
        "Due Date" := DueDateVar;
        RegisterFieldSet(FIELDNO("Due Date"));
      END;

      GraphMgtSalesQuoteBuffer.PropagateOnModify(Rec,TempFieldBuffer);
      FIND;
    END;

    LOCAL PROCEDURE GetQuote@36(VAR SalesHeader@1000 : Record 36);
    BEGIN
      SalesHeader.SETRANGE(Id,Id);
      IF NOT SalesHeader.FINDFIRST THEN
        ERROR(CannotFindQuoteErr);
    END;

    LOCAL PROCEDURE CheckSmtpMailSetup@30();
    VAR
      O365SetupEmail@1001 : Codeunit 2135;
    BEGIN
      IF NOT O365SetupEmail.SMTPEmailIsSetUp THEN
        ERROR(MailNotConfiguredErr);
    END;

    LOCAL PROCEDURE CheckSendToEmailAddress@21();
    BEGIN
      IF GetSendToEmailAddress = '' THEN
        ERROR(EmptyEmailErr);
    END;

    LOCAL PROCEDURE GetSendToEmailAddress@26() : Text[250];
    VAR
      EmailAddress@1000 : Text[250];
    BEGIN
      EmailAddress := GetDocumentEmailAddress;
      IF EmailAddress <> '' THEN
        EXIT(EmailAddress);
      EmailAddress := GetCustomerEmailAddress;
      EXIT(EmailAddress);
    END;

    LOCAL PROCEDURE GetCustomerEmailAddress@24() : Text[250];
    BEGIN
      IF NOT Customer.GET("Sell-to Customer No.") THEN
        EXIT('');
      EXIT(Customer."E-Mail");
    END;

    LOCAL PROCEDURE GetDocumentEmailAddress@58() : Text[250];
    VAR
      EmailParameter@1002 : Record 9510;
    BEGIN
      IF NOT EmailParameter.GET("No.","Document Type",EmailParameter."Parameter Type"::Address) THEN
        EXIT('');
      EXIT(EmailParameter."Parameter Value");
    END;

    LOCAL PROCEDURE SendQuote@34(VAR SalesHeader@1000 : Record 36);
    VAR
      DummyO365SalesDocument@1003 : Record 2103;
      LinesInstructionMgt@1002 : Codeunit 1320;
      O365SendResendInvoice@1001 : Codeunit 2104;
      GraphIntBusinessProfile@1004 : Codeunit 5442;
    BEGIN
      O365SendResendInvoice.CheckDocumentIfNoItemsExists(SalesHeader,FALSE,DummyO365SalesDocument);
      LinesInstructionMgt.SalesCheckAllLinesHaveQuantityAssigned(SalesHeader);
      CheckSmtpMailSetup;
      CheckSendToEmailAddress;
      GraphIntBusinessProfile.SyncFromGraphSynchronously;

      SalesHeader.SETRECFILTER;
      SalesHeader.EmailRecords(FALSE);
    END;

    LOCAL PROCEDURE SetActionResponse@47(VAR ActionContext@1004 : DotNet "'Microsoft.Dynamics.Nav.Ncl, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Runtime.WebServiceActionContext";VAR SalesHeader@1000 : Record 36);
    VAR
      ODataActionManagement@1003 : Codeunit 6711;
    BEGIN
      ODataActionManagement.AddKey(FIELDNO(Id),SalesHeader.Id);
      IF SalesHeader."Document Type" = SalesHeader."Document Type"::Invoice THEN
        ODataActionManagement.SetDeleteResponseLocation(ActionContext,PAGE::"Sales Invoice Entity")
      ELSE
        ODataActionManagement.SetDeleteResponseLocation(ActionContext,PAGE::"Sales Quote Entity");
    END;

    [ServiceEnabled]
    [External]
    PROCEDURE MakeInvoice@15(VAR ActionContext@1000 : DotNet "'Microsoft.Dynamics.Nav.Ncl, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Runtime.WebServiceActionContext");
    VAR
      SalesHeader@1001 : Record 36;
      SalesQuoteToInvoice@1005 : Codeunit 1305;
    BEGIN
      GetQuote(SalesHeader);
      SalesHeader.SETRECFILTER;
      SalesQuoteToInvoice.RUN(SalesHeader);
      SalesQuoteToInvoice.GetSalesInvoiceHeader(SalesHeader);
      SetActionResponse(ActionContext,SalesHeader);
    END;

    [ServiceEnabled]
    [External]
    PROCEDURE Send@17(VAR ActionContext@1000 : DotNet "'Microsoft.Dynamics.Nav.Ncl, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Runtime.WebServiceActionContext");
    VAR
      SalesHeader@1005 : Record 36;
    BEGIN
      GetQuote(SalesHeader);
      SendQuote(SalesHeader);
      SetActionResponse(ActionContext,SalesHeader);
    END;

    BEGIN
    END.
  }
}

