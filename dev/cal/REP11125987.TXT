OBJECT Report 11125987 Export QA Deviations to Excel
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Abweichungen nach Excel exportieren;
               ENU=Export QA Deviations to Excel;
               NLD=KAM-afwijkingen naar Excel exporteren;
               SVE=Exportera kvalitetssÑkringsavvikelser till Excel];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  MakeExcelInfo();
                END;

    OnPostReport=BEGIN
                   CreateExcelBook();
                 END;

  }
  DATASET
  {
    { 1391;    ;DataItem;                    ;
               DataItemTable=Table11125986;
               OnAfterGetRecord=BEGIN
                                  "QA Deviation".CALCFIELDS("Name Created by");
                                  MakeExcelDataBody;
                                END;

               ReqFilterFields=No.,Source Type,Source No. }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ExcelBuf@1100525000 : Record 370;
      Text000@1100525002 : TextConst 'DEU=Daten;ENU=Data;NLD=Gegevens;NOR=Data;SVE=Data';
      Text001@1100525003 : TextConst 'DEU=Abweichungen nach Excel exportieren;ENU=Export QA Deviations to Excel;NLD=KAM-afwijkingen naar Excel exporteren;SVE=Exportera kvalitetssÑkringsavvikelser till Excel';
      Text002@1100525001 : TextConst 'DEU=Mandantenname;ENU=Company Name;NLD=Bedrijfsnaam;NOR=Navn pÜ selskap;SVE=Fîretagsnamn';
      Text003@1100525004 : TextConst 'DEU=Berichtsnr.;ENU=Report No.;NLD=Lijstnr.;NOR=Rapportnr.;SVE=Rapportnr';
      Text004@1100525005 : TextConst 'DEU=Berichtsname;ENU=Report Name;NLD=Lijstnaam;NOR=Rapportnavn;SVE=Rapportnamn';
      Text005@1100525006 : TextConst 'DEU=Benutzer-ID;ENU=User ID;NLD=Gebruikers-id;NOR=Bruker-ID;SVE=AnvÑndar-ID';
      Text006@1100525007 : TextConst 'DEU=Datum;ENU=Date;NLD=Datum;NOR=Dato;SVE=Datum';
      Text007@1100525009 : TextConst 'DEU=Entwurfcodes;ENU=Subject Codes;NLD=Onderwerpcodes;SVE=émneskoder';
      Text008@1100525010 : TextConst 'DEU=Konsequenzencodes;ENU=Consequence Codes;NLD=Consequentiecodes;SVE=Fîljdkoder';
      Text009@1100525011 : TextConst 'DEU=Prozessteilcodes;ENU=Process Phase Codes;NLD=Procesdeelcodes;SVE=Behandla faskoder';
      Text010@1100525012 : TextConst 'DEU=Beschreibungstext Abweichung;ENU=Deviation Text;NLD=Omschrijvingstekst afwijking;SVE=Avvikelsetext';
      Text011@1100525013 : TextConst 'DEU=Ursachentext;ENU=Cause Text;NLD=Oorzaaktekst;NOR=èrsakstekst;SVE=Orsakstext';
      Text012@1100525014 : TextConst 'DEU=Lîsungstext;ENU=Measure Text;NLD=Oplossingstekst;SVE=MÜttext';
      Text013@1100525015 : TextConst 'DEU=Umfangstext;ENU=Impact Text;NLD=Omvangstekst;SVE=///Impact Text';
      Text014@1100525016 : TextConst 'DEU=OperationalitÑtstext;ENU=Applicability Text;NLD=Operationaliteitstekst;SVE=TillÑmpningstext';
      Text015@1100525017 : TextConst 'DEU=Vorbeugungsmassnahmentext;ENU=Preventive Measure Text;NLD=Preventieve maatregeltekst;SVE=Text fîr fîrebyggande ÜtgÑrder';

    LOCAL PROCEDURE MakeExcelInfo@1100525000();
    BEGIN
      ExcelBuf.SetUseInfoSheet;
      ExcelBuf.AddInfoColumn(FORMAT(Text002),FALSE,TRUE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddInfoColumn(COMPANYNAME,FALSE,FALSE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.NewRow;
      ExcelBuf.AddInfoColumn(FORMAT(Text004),FALSE,TRUE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddInfoColumn(FORMAT(Text001),FALSE,FALSE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.NewRow;
      ExcelBuf.AddInfoColumn(FORMAT(Text003),FALSE,TRUE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddInfoColumn(REPORT::"Export QA Deviations to Excel",FALSE,FALSE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.NewRow;
      ExcelBuf.AddInfoColumn(FORMAT(Text005),FALSE,TRUE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddInfoColumn(USERID,FALSE,FALSE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.NewRow;
      ExcelBuf.AddInfoColumn(FORMAT(Text006),FALSE,TRUE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddInfoColumn(TODAY,FALSE,FALSE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Date);
      ExcelBuf.ClearNewRow;
      MakeExcelDataHeader;
    END;

    LOCAL PROCEDURE MakeExcelDataHeader@1100525002();
    BEGIN
      ExcelBuf.AddColumn("QA Deviation".FIELDCAPTION("No."),FALSE,'',TRUE,FALSE,TRUE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddColumn("QA Deviation".FIELDCAPTION(Description),FALSE,'',TRUE,FALSE,TRUE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddColumn("QA Deviation".FIELDCAPTION("Source Type"),FALSE,'',TRUE,FALSE,TRUE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddColumn("QA Deviation".FIELDCAPTION("Source No."),FALSE,'',TRUE,FALSE,TRUE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddColumn("QA Deviation".FIELDCAPTION("Created by"),FALSE,'',TRUE,FALSE,TRUE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddColumn("QA Deviation".FIELDCAPTION("Name Created by"),FALSE,'',TRUE,FALSE,TRUE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddColumn("QA Deviation".FIELDCAPTION("Creation Date"),FALSE,'',TRUE,FALSE,TRUE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddColumn("QA Deviation".FIELDCAPTION(Type),FALSE,'',TRUE,FALSE,TRUE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddColumn("QA Deviation".FIELDCAPTION(Cause),FALSE,'',TRUE,FALSE,TRUE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddColumn("QA Deviation".FIELDCAPTION("Project Phase"),FALSE,'',TRUE,FALSE,TRUE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddColumn("QA Deviation".FIELDCAPTION("Calling Contact"),FALSE,'',TRUE,FALSE,TRUE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddColumn("QA Deviation".FIELDCAPTION("Observation Date"),FALSE,'',TRUE,FALSE,TRUE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddColumn("QA Deviation".FIELDCAPTION("Settlement Text"),FALSE,'',TRUE,FALSE,TRUE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddColumn("QA Deviation".FIELDCAPTION(Cost),FALSE,'',TRUE,FALSE,TRUE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddColumn("QA Deviation".FIELDCAPTION("Cost Text"),FALSE,'',TRUE,FALSE,TRUE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddColumn(FORMAT(Text007),FALSE,'',TRUE,FALSE,TRUE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddColumn(FORMAT(Text008),FALSE,'',TRUE,FALSE,TRUE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddColumn(FORMAT(Text009),FALSE,'',TRUE,FALSE,TRUE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddColumn("QA Deviation".FIELDCAPTION(Status),FALSE,'',TRUE,FALSE,TRUE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddColumn("QA Deviation".FIELDCAPTION(Fixed),FALSE,'',TRUE,FALSE,TRUE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddColumn("QA Deviation".FIELDCAPTION("Complaint No."),FALSE,'',TRUE,FALSE,TRUE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddColumn(FORMAT(Text010),FALSE,'',TRUE,FALSE,TRUE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddColumn(FORMAT(Text011),FALSE,'',TRUE,FALSE,TRUE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddColumn(FORMAT(Text012),FALSE,'',TRUE,FALSE,TRUE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddColumn(FORMAT(Text013),FALSE,'',TRUE,FALSE,TRUE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddColumn(FORMAT(Text014),FALSE,'',TRUE,FALSE,TRUE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddColumn(FORMAT(Text015),FALSE,'',TRUE,FALSE,TRUE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddColumn("QA Deviation".FIELDCAPTION("No. Series"),FALSE,'',TRUE,FALSE,TRUE,'',ExcelBuf."Cell Type"::Text);
    END;

    LOCAL PROCEDURE MakeExcelDataBody@1100525003();
    VAR
      QADeviationTextLine@1100525000 : Record 11125987;
    BEGIN
      ExcelBuf.NewRow;
      ExcelBuf.AddColumn("QA Deviation"."No.",FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddColumn("QA Deviation".Description,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddColumn(FORMAT("QA Deviation"."Source Type"),FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddColumn("QA Deviation"."Source No.",FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddColumn("QA Deviation"."Created by",FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddColumn("QA Deviation"."Name Created by",FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddColumn("QA Deviation"."Creation Date",FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Date);
      ExcelBuf.AddColumn("QA Deviation".Type,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddColumn("QA Deviation".Cause,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddColumn("QA Deviation"."Project Phase",FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddColumn("QA Deviation"."Calling Contact",FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddColumn("QA Deviation"."Observation Date",FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Date);
      ExcelBuf.AddColumn("QA Deviation"."Settlement Text",FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddColumn("QA Deviation".Cost,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Number);
      ExcelBuf.AddColumn("QA Deviation"."Cost Text",FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddColumn(GetMultiOptionValuesString(1),FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddColumn(GetMultiOptionValuesString(2),FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddColumn(GetMultiOptionValuesString(3),FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddColumn("QA Deviation".Status,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddColumn("QA Deviation".Fixed,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddColumn("QA Deviation"."Complaint No.",FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddColumn(GetText(QADeviationTextLine.Type::"Deviation Description"),FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddColumn(GetText(QADeviationTextLine.Type::Cause),FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddColumn(GetText(QADeviationTextLine.Type::Measure),FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddColumn(GetText(QADeviationTextLine.Type::Impact),FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddColumn(GetText(QADeviationTextLine.Type::Applicability),FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Text);
      ExcelBuf.AddColumn(GetText(QADeviationTextLine.Type::"Preventive Measure"),FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Text);
    END;

    LOCAL PROCEDURE CreateExcelBook@1100525001();
    BEGIN
      ExcelBuf.CreateBookAndOpenExcel('',Text000,Text001,COMPANYNAME,USERID);
      ERROR('');
    END;

    LOCAL PROCEDURE CrLf@1100525015() NewLineString : Text[2];
    BEGIN
      NewLineString[1] := 10;
      NewLineString[2] := 13;
    END;

    LOCAL PROCEDURE GetMultiOptionValuesString@1100525006(OptionType@1100525000 : Integer) SubjectCodesString : Text[250];
    VAR
      DevSelectedOption@1100525001 : Record 11125994;
    BEGIN
      DevSelectedOption.SETRANGE("Deviation No.", "QA Deviation"."No.");
      CASE OptionType OF
        1: DevSelectedOption.SETRANGE(Type, DevSelectedOption.Type::Subjects);
        2: DevSelectedOption.SETRANGE(Type, DevSelectedOption.Type::Consequences);
        3: DevSelectedOption.SETRANGE(Type, DevSelectedOption.Type::ProcessPhases);
        ELSE
          EXIT('');
      END;
      IF NOT DevSelectedOption.FINDSET THEN
        EXIT('');
      REPEAT
        DevSelectedOption.CALCFIELDS(Description);
        SubjectCodesString :=
          AddLineToString(
            SubjectCodesString,
            DevSelectedOption.Description,
            MAXSTRLEN(SubjectCodesString));
      UNTIL DevSelectedOption.NEXT = 0;
    END;

    LOCAL PROCEDURE AddLineToString@1100525016(OriginalString@1100525000 : Text[1024];Line@1100525001 : Text[1024];MaxLength@1100525002 : Integer) NewString : Text[1024];
    BEGIN
      IF OriginalString = '' THEN
        NewString := COPYSTR(Line, 1, MaxLength)
      ELSE
        IF (STRLEN(OriginalString) + STRLEN(CrLf) >= MaxLength) THEN
          NewString := OriginalString
        ELSE
          NewString :=
            OriginalString + CrLf +
            COPYSTR(Line, 1, MaxLength - STRLEN(CrLf) - STRLEN(OriginalString));
    END;

    LOCAL PROCEDURE GetText@1100525029(Type@1100525001 : Integer) Text : Text[250];
    VAR
      QADeviationTextLine@1100525000 : Record 11125987;
    BEGIN
      QADeviationTextLine.SETRANGE("Deviation No.", "QA Deviation"."No.");
      QADeviationTextLine.SETRANGE(Type, Type);
      IF NOT QADeviationTextLine.FINDSET THEN
        EXIT('');

      REPEAT
        Text :=
          AddLineToString(
            Text,
            QADeviationTextLine.Text,
            MAXSTRLEN(Text));
      UNTIL QADeviationTextLine.NEXT = 0;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

