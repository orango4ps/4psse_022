OBJECT Codeunit 1225 Unixtimestamp Transformation
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW111.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      UNIXTimeStampDescTxt@1001 : TextConst 'ENU=Transforming UNIX timestamp to text format.;NOR=Transformerer UNIX-tidsstempel til tekstformat.;SVE=Omvandlar UNIX-tidst„mpeln till textformat.';
      UNIXTimeStampTxt@1000 : TextConst '@@@={Locked};ENU=UNIXTIMESTAMP;NOR=UNIXTIMESTAMP;SVE=UNIXTIMESTAMP';

    [EventSubscriber(Table,1237,OnTransformation)]
    LOCAL PROCEDURE TransformUnixtimestampOnTransformation@2(TransformationCode@1000 : Code[20];InputText@1001 : Text;VAR OutputText@1002 : Text);
    BEGIN
      IF TransformationCode <> GetUnixTimestampCode THEN
        EXIT;
      IF NOT TryConvert2BigInteger(InputText,OutputText) THEN
        OutputText := ''
    END;

    [EventSubscriber(Table,1237,OnCreateTransformationRules)]
    LOCAL PROCEDURE InsertUnixtimestampOnCreateTransformationRules@3();
    VAR
      TransformationRule@1000 : Record 1237;
    BEGIN
      TransformationRule.InsertRec(
        GetUnixTimestampCode,UNIXTimeStampDescTxt,TransformationRule."Transformation Type"::Custom,0,0,'','');
    END;

    [TryFunction]
    LOCAL PROCEDURE TryConvert2BigInteger@1(InputText@1004 : Text;VAR OutputText@1000 : Text);
    VAR
      TypeHelper@1002 : Codeunit 10;
      TempBinteger@1001 : BigInteger;
    BEGIN
      EVALUATE(TempBinteger,InputText);
      OutputText := FORMAT(TypeHelper.EvaluateUnixTimestamp(TempBinteger),0,9);
    END;

    [External]
    PROCEDURE GetUnixTimestampCode@24() : Code[20];
    BEGIN
      EXIT(UNIXTimeStampTxt);
    END;

    BEGIN
    END.
  }
}

