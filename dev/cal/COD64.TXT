OBJECT Codeunit 64 Sales-Get Shipment
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.03,4PS14.00;
  }
  PROPERTIES
  {
    TableNo=37;
    OnRun=BEGIN
            SalesHeader.GET("Document Type","Document No.");
            SalesHeader.TESTFIELD("Document Type",SalesHeader."Document Type"::Invoice);
            SalesHeader.TESTFIELD(Status,SalesHeader.Status::Open);
            SalesHeader.CheckGeneratedInvoice; //**4PS.n

            SalesShptLine.SETCURRENTKEY("Bill-to Customer No.");
            SalesShptLine.SETRANGE("Bill-to Customer No.",SalesHeader."Bill-to Customer No.");
            SalesShptLine.SETRANGE("Sell-to Customer No.",SalesHeader."Sell-to Customer No.");
            SalesShptLine.SETFILTER("Qty. Shipped Not Invoiced",'<>0');
            SalesShptLine.SETRANGE("Currency Code",SalesHeader."Currency Code");
            SalesShptLine.SETRANGE("Authorized for Credit Card",FALSE);
            //**4PS.sn
            IF SalesHeader."Related Sales Order No." <> '' THEN
              SalesShptLine.SETRANGE("Order No.", SalesHeader."Related Sales Order No.");
            //**4PS.en
            OnRunAfterFilterSalesShpLine(SalesShptLine,SalesHeader);

            GetShipments.SETTABLEVIEW(SalesShptLine);
            GetShipments.SetSalesHeader(SalesHeader);
            GetShipments.LOOKUPMODE := TRUE;
            IF GetShipments.RUNMODAL <> ACTION::Cancel THEN;
          END;

  }
  CODE
  {
    VAR
      Text001@1000 : TextConst 'ENU=The %1 on the %2 %3 and the %4 %5 must be the same.;NOR=%1 p† %2 %3 og %4 %5 m† v‘re lik.;SVE=%1 p† %2 %3 och %4 %5 m†ste vara samma.';
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      SalesShptHeader@1003 : Record 110;
      SalesShptLine@1004 : Record 111;
      UOMMgt@1008 : Codeunit 5402;
      GetShipments@1005 : Page 5708;
      Text002@1007 : TextConst 'ENU=Creating Sales Invoice Lines\;NOR=Oppretter salgsfakturalinjer\;SVE=F”rs„ljningsfakturarader skapas\';
      Text003@1006 : TextConst 'ENU=Inserted lines             #1######;NOR=Innsatte linjer            #1######;SVE=Infogade rader          #1######';

    [External]
    PROCEDURE CreateInvLines@1(VAR SalesShptLine2@1000 : Record 111);
    VAR
      Window@1006 : Dialog;
      LineCount@1005 : Integer;
      TransferLine@1001 : Boolean;
      PrepmtAmtToDeductRounding@1002 : Decimal;
    BEGIN
      WITH SalesShptLine2 DO BEGIN
        SETFILTER("Qty. Shipped Not Invoiced",'<>0');
        IF FINDSET THEN BEGIN
          SalesLine.LOCKTABLE;
          SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
          SalesLine.SETRANGE("Document No.",SalesHeader."No.");
          SalesLine."Document Type" := SalesHeader."Document Type";
          SalesLine."Document No." := SalesHeader."No.";
          Window.OPEN(Text002 + Text003);
          OnBeforeInsertLines(SalesHeader);

          REPEAT
            LineCount := LineCount + 1;
            Window.UPDATE(1,LineCount);
            IF SalesShptHeader."No." <> "Document No." THEN BEGIN
              SalesShptHeader.GET("Document No.");
              TransferLine := TRUE;
              IF SalesShptHeader."Currency Code" <> SalesHeader."Currency Code" THEN BEGIN
                MESSAGE(
                  Text001,
                  SalesHeader.FIELDCAPTION("Currency Code"),
                  SalesHeader.TABLECAPTION,SalesHeader."No.",
                  SalesShptHeader.TABLECAPTION,SalesShptHeader."No.");
                TransferLine := FALSE;
              END;
              IF SalesShptHeader."Bill-to Customer No." <> SalesHeader."Bill-to Customer No." THEN BEGIN
                MESSAGE(
                  Text001,
                  SalesHeader.FIELDCAPTION("Bill-to Customer No."),
                  SalesHeader.TABLECAPTION,SalesHeader."No.",
                  SalesShptHeader.TABLECAPTION,SalesShptHeader."No.");
                TransferLine := FALSE;
              END;
              OnBeforeTransferLineToSalesDoc(SalesShptHeader,SalesShptLine2,SalesHeader,TransferLine);
            END;
            IF TransferLine THEN BEGIN
              SalesShptLine := SalesShptLine2;
              SalesShptLine.TESTFIELD("VAT Bus. Posting Group",SalesHeader."VAT Bus. Posting Group");
            //SalesShptLine.InsertInvLineFromShptLine(SalesLine); //**4PS.o
              SalesShptLine.InsertInvLineFromShptLine(SalesLine, FALSE); //**4PS.n
              CalcUpdatePrepmtAmtToDeductRounding(SalesShptLine,SalesLine,PrepmtAmtToDeductRounding);
              IF Type = Type::"Charge (Item)" THEN
                GetItemChargeAssgnt(SalesShptLine2,SalesLine."Qty. to Invoice");
            END;
            OnAfterInsertLine(SalesShptLine,SalesLine);
          UNTIL NEXT = 0;

          OnAfterInsertLines(SalesHeader);
          CalcInvoiceDiscount(SalesLine);

          IF TransferLine THEN
            AdjustPrepmtAmtToDeductRounding(SalesLine,PrepmtAmtToDeductRounding);
        END;
      END;
    END;

    [External]
    PROCEDURE SetSalesHeader@2(VAR SalesHeader2@1000 : Record 36);
    BEGIN
      SalesHeader.GET(SalesHeader2."Document Type",SalesHeader2."No.");
      SalesHeader.TESTFIELD("Document Type",SalesHeader."Document Type"::Invoice);
    END;

    [External]
    PROCEDURE GetItemChargeAssgnt@5800(VAR SalesShptLine@1000 : Record 111;QtyToInvoice@1003 : Decimal);
    VAR
      SalesOrderLine@1001 : Record 37;
      ItemChargeAssgntSales@1002 : Record 5809;
      IsHandled@1004 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeGetItemChargeAssgnt(SalesShptLine,QtyToInvoice,IsHandled);
      IF IsHandled THEN
        EXIT;

      IF NOT SalesOrderLine.GET(SalesOrderLine."Document Type"::Order,SalesShptLine."Order No.",SalesShptLine."Order Line No.") THEN
        EXIT;

      ItemChargeAssgntSales.LOCKTABLE;
      ItemChargeAssgntSales.RESET;
      ItemChargeAssgntSales.SETRANGE("Document Type",SalesOrderLine."Document Type");
      ItemChargeAssgntSales.SETRANGE("Document No.",SalesOrderLine."Document No.");
      ItemChargeAssgntSales.SETRANGE("Document Line No.",SalesOrderLine."Line No.");
      IF ItemChargeAssgntSales.FINDFIRST THEN BEGIN
        ItemChargeAssgntSales.CALCSUMS("Qty. to Assign");
        IF ItemChargeAssgntSales."Qty. to Assign" <> 0 THEN
          CopyItemChargeAssgnt(
            SalesOrderLine,SalesShptLine,ItemChargeAssgntSales."Qty. to Assign",QtyToInvoice / ItemChargeAssgntSales."Qty. to Assign");
      END;
    END;

    LOCAL PROCEDURE CopyItemChargeAssgnt@5801(SalesOrderLine@1000 : Record 37;SalesShptLine@1001 : Record 111;QtyToAssign@1002 : Decimal;QtyFactor@1008 : Decimal);
    VAR
      SalesShptLine2@1003 : Record 111;
      SalesLine2@1004 : Record 37;
      ItemChargeAssgntSales@1005 : Record 5809;
      ItemChargeAssgntSales2@1006 : Record 5809;
      InsertChargeAssgnt@1007 : Boolean;
      LineQtyToAssign@1009 : Decimal;
    BEGIN
      WITH SalesOrderLine DO BEGIN
        ItemChargeAssgntSales.SETRANGE("Document Type","Document Type");
        ItemChargeAssgntSales.SETRANGE("Document No.","Document No.");
        ItemChargeAssgntSales.SETRANGE("Document Line No.","Line No.");
        IF ItemChargeAssgntSales.FINDSET THEN
          REPEAT
            IF ItemChargeAssgntSales."Qty. to Assign" <> 0 THEN BEGIN
              ItemChargeAssgntSales2 := ItemChargeAssgntSales;
              ItemChargeAssgntSales2."Qty. to Assign" :=
                ROUND(QtyFactor * ItemChargeAssgntSales2."Qty. to Assign",UOMMgt.QtyRndPrecision);
              SalesLine2.SETRANGE("Shipment No.",SalesShptLine."Document No.");
              SalesLine2.SETRANGE("Shipment Line No.",SalesShptLine."Line No.");
              IF SalesLine2.FINDSET THEN
                REPEAT
                  SalesLine2.CALCFIELDS("Qty. to Assign");
                  InsertChargeAssgnt := SalesLine2."Qty. to Assign" <> SalesLine2.Quantity;
                UNTIL (SalesLine2.NEXT = 0) OR InsertChargeAssgnt;

              IF InsertChargeAssgnt THEN BEGIN
                ItemChargeAssgntSales2."Document Type" := SalesLine2."Document Type";
                ItemChargeAssgntSales2."Document No." := SalesLine2."Document No.";
                ItemChargeAssgntSales2."Document Line No." := SalesLine2."Line No.";
                ItemChargeAssgntSales2."Qty. Assigned" := 0;
                LineQtyToAssign :=
                  ItemChargeAssgntSales2."Qty. to Assign" - GetQtyAssignedInNewLine(ItemChargeAssgntSales2);
                InsertChargeAssgnt := LineQtyToAssign <> 0;
                IF InsertChargeAssgnt THEN BEGIN
                  IF ABS(QtyToAssign) < ABS(LineQtyToAssign) THEN
                    ItemChargeAssgntSales2."Qty. to Assign" := QtyToAssign;
                  IF ABS(SalesLine2.Quantity - SalesLine2."Qty. to Assign") <
                     ABS(LineQtyToAssign)
                  THEN
                    ItemChargeAssgntSales2."Qty. to Assign" :=
                      SalesLine2.Quantity - SalesLine2."Qty. to Assign";
                  ItemChargeAssgntSales2.VALIDATE("Unit Cost");

                  IF ItemChargeAssgntSales2."Applies-to Doc. Type" = "Document Type" THEN BEGIN
                    ItemChargeAssgntSales2."Applies-to Doc. Type" := SalesLine2."Document Type";
                    ItemChargeAssgntSales2."Applies-to Doc. No." := SalesLine2."Document No.";
                    SalesShptLine2.SETCURRENTKEY("Order No.","Order Line No.");
                    SalesShptLine2.SETRANGE("Order No.",ItemChargeAssgntSales."Applies-to Doc. No.");
                    SalesShptLine2.SETRANGE("Order Line No.",ItemChargeAssgntSales."Applies-to Doc. Line No.");
                    SalesShptLine2.SETFILTER(Quantity,'<>0');
                    IF SalesShptLine2.FINDFIRST THEN BEGIN
                      SalesLine2.SETCURRENTKEY("Document Type","Shipment No.","Shipment Line No.");
                      SalesLine2.SETRANGE("Document Type","Document Type"::Invoice);
                      SalesLine2.SETRANGE("Shipment No.",SalesShptLine2."Document No.");
                      SalesLine2.SETRANGE("Shipment Line No.",SalesShptLine2."Line No.");
                      IF SalesLine2.FINDFIRST AND (SalesLine2.Quantity <> 0) THEN
                        ItemChargeAssgntSales2."Applies-to Doc. Line No." := SalesLine2."Line No."
                      ELSE
                        InsertChargeAssgnt := FALSE;
                    END ELSE
                      InsertChargeAssgnt := FALSE;
                  END;
                END;
              END;

              IF InsertChargeAssgnt AND (ItemChargeAssgntSales2."Qty. to Assign" <> 0) THEN BEGIN
                ItemChargeAssgntSales2.INSERT;
                QtyToAssign := QtyToAssign - ItemChargeAssgntSales2."Qty. to Assign";
              END;
            END;
          UNTIL ItemChargeAssgntSales.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE GetQtyAssignedInNewLine@4(ItemChargeAssgntSales@1000 : Record 5809) : Decimal;
    BEGIN
      WITH ItemChargeAssgntSales DO BEGIN
        SETRANGE("Document Type","Document Type");
        SETRANGE("Document No.","Document No.");
        SETRANGE("Document Line No.","Document Line No.");
        SETRANGE("Applies-to Doc. Type","Applies-to Doc. Type");
        SETRANGE("Applies-to Doc. No.","Applies-to Doc. No.");
        SETRANGE("Applies-to Doc. Line No.","Applies-to Doc. Line No.");
        CALCSUMS("Qty. to Assign");
        EXIT("Qty. to Assign");
      END;
    END;

    LOCAL PROCEDURE CalcInvoiceDiscount@3(VAR SalesLine@1000 : Record 37);
    VAR
      SalesReceivablesSetup@1001 : Record 311;
      SalesCalcDiscount@1002 : Codeunit 60;
    BEGIN
      SalesReceivablesSetup.GET;
      IF SalesReceivablesSetup."Calc. Inv. Discount" THEN BEGIN
        SalesCalcDiscount.CalculateInvoiceDiscountOnLine(SalesLine);
        OnAfterCalcInvoiceDiscount(SalesLine);
      END;
    END;

    LOCAL PROCEDURE CalcUpdatePrepmtAmtToDeductRounding@9(SalesShptLine@1005 : Record 111;SalesLine@1002 : Record 37;VAR RoundingAmount@1004 : Decimal);
    VAR
      SalesOrderLine@1003 : Record 37;
      Fraction@1001 : Decimal;
      FractionAmount@1000 : Decimal;
      IsHandled@1006 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeCalcUpdatePrepmtAmtToDeductRounding(SalesShptLine,SalesLine,RoundingAmount,IsHandled);
      IF IsHandled THEN
        EXIT;

      IF (SalesLine."Prepayment %" > 0) AND (SalesLine."Prepayment %" < 100) AND
         (SalesLine."Document Type" = SalesLine."Document Type"::Invoice)
      THEN BEGIN
        SalesOrderLine.GET(SalesOrderLine."Document Type"::Order,SalesShptLine."Order No.",SalesShptLine."Order Line No.");
        Fraction := SalesShptLine.Quantity / SalesOrderLine.Quantity;
        FractionAmount := Fraction * SalesOrderLine."Prepmt Amt to Deduct";
        RoundingAmount += SalesLine."Prepmt Amt to Deduct" - FractionAmount;
      END;
    END;

    LOCAL PROCEDURE AdjustPrepmtAmtToDeductRounding@19(VAR SalesLine@1000 : Record 37;RoundingAmount@1001 : Decimal);
    BEGIN
      IF ROUND(RoundingAmount) <> 0 THEN BEGIN
        SalesLine."Prepmt Amt to Deduct" -= ROUND(RoundingAmount);
        SalesLine.MODIFY;
      END;
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCalcInvoiceDiscount@11(VAR SalesLine@1000 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInsertLine@10(VAR SalesShptLine@1000 : Record 111;VAR SalesLine@1001 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInsertLines@6(VAR SalesHeader@1000 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCalcUpdatePrepmtAmtToDeductRounding@12(SalesShipmentLine@1000 : Record 111;SalesLine@1001 : Record 37;VAR RoundingAmount@1003 : Decimal;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInsertLines@8(VAR SalesHeader@1000 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeGetItemChargeAssgnt@13(VAR SalesShipmentLine@1000 : Record 111;QtyToInvoice@1001 : Decimal;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeTransferLineToSalesDoc@7(VAR SalesShipmentHeader@1000 : Record 110;VAR SalesShipmentLine@1001 : Record 111;VAR SalesHeader@1002 : Record 36;VAR TransferLine@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnRunAfterFilterSalesShpLine@5(VAR SalesShptLine@1000 : Record 111;SalesHeader@1001 : Record 36);
    BEGIN
    END;

    BEGIN
    END.
  }
}

