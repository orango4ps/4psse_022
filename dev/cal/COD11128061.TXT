OBJECT Codeunit 11128061 VP Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=PE9.01.part (12048858),4PSSE;
  }
  PROPERTIES
  {
    Permissions=TableData 21=rimd,
                TableData 25=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      PEB001@1100570000 : TextConst 'ENU=%1 is not correct.;NOR=%1 er ikke riktig.;SVE=%1 Ñr felaktigt.';
      PEB002@1070002 : TextConst 'ENU=%1 %2 already exist in %3 %4;NOR=%1 %2 finnes allerede i %3 %4;SVE=%1 %2 finns redan i %3 %4';
      PEB003@1070012 : TextConst 'ENU=The value for the parameter is too long for the function %1. The value is %2.;NOR=Verdien for parameteren er for lang for funksjonen %1. Verdien er %2.;SVE=VÑrdet fîr parametern Ñr fîr lÜngt fîr funktionen %1. VÑrdet Ñr %2.';
      PEB004@1070075 : TextConst 'ENU=Create %1 with File Name:\%2;NOR=Opprett %1 med filnavn:\%2;SVE=Skapa %1 med filnamnet:\%2';
      PEB005@1070076 : TextConst 'ENU=Description Created from %1 too long\%2\50 char. is maximum.;NOR=Beskrivelsen opprettet fra %1 for lang.\%2\Max.lengde er 50 tegn.;SVE=Beskrivningen skapad frÜn %1 fîr lÜng.\%2\Max.lÑngden Ñr 50 tecken.';
      PEB006@1070077 : TextConst 'ENU=%1 %2 will be partly paid. Then "%3" must not be blank.;NOR=%1 %2 blir delbetalt. %3 kan ikke vëre tom.;SVE=%1 %2 blir delbetalad. %3 fÜr inte vara tomt.';
      PEB007@1070078 : TextConst 'ENU="File %1 created with:\Name=%2\Amount=%3";NOR="Filen %1 er opprettet med:\ navn=%2.\Belõp=%3";SVE="Filen %1 har skapats med:\ Namn=%2.\Belopp=%3"';
      PEB008@1070079 : TextConst 'ENU=\\Remaining amount for partly payment is posted with Document No.:\From %4\To %5.;NOR=\\GjenstÜende belõp for delbetaling er bokfõrt med dokumentnr:\Fra %4\Til %5.;SVE=\\èterstÜende belopp fîr delbetalning har bokfîrts med dokumentnr:\FrÜn %4\Till %5.';
      PEB009@1070080 : TextConst 'ENU=%1 for %2 %3, can not be more than %4.;NOR=%1 for %2 %3 kan ikke vëre mer enn %4.;SVE=%1 fîr %2 %3 fÜr inte vara mer Ñn %4.';
      PEB010@1100570001 : TextConst 'ENU=%1 has reached its maximum of 999999 in table %2;SVE=%1har nÜtt sitt max 999999 i tabell %2';
      PEB011@1100570002 : TextConst 'ENU=LCY Currency %1 is not supported in the Banking module;SVE=BVA valuta %1 stîds inte fîr LB Sverige';
      gSetUpOK@1100570003 : Boolean;
      gVPSetup@1100570004 : Record 11128066;
      gGeneralLedgerSetup@1100570005 : Record 98;
      PEB012@1100570006 : TextConst 'ENU=There is no Lines;SVE=Det finns inga rader';
      PEB013@1100570007 : TextConst 'ENU=File for "%1" with Pack No %2 is already created.\\Do you want to create the file again with name\%3?;NOR=Filen for %1 med pakkenr %2 er allerede opprettet.\\Vil du opprette filen igjen med navnet\%3?;SVE=Filen fîr %1 med buntnr %2 har redan skapats.\\Vill du skapa filen igen med namnet\%3?';
      PEB014@12047958 : TextConst 'ENU=Both %1 and %2 must not be blank, vendor %3;SVE=BÜde %1 och %2 fÜr inte vara blanka,leverantîr %3';
      PEB015@12047959 : TextConst 'ENU=may not be completed;SVE=fÜr inte vara ifyllt';
      PEB016@1100570009 : TextConst 'ENU=It must be same Currency Code. for %1 %2;SVE=Det mÜste vara samma valutakod fîr %1 %2';
      PEB017@1100570010 : TextConst 'ENU=Total Amount (%1) must not Negative for %2 %3;SVE=Totalt belopp (%1)  fÜr inte vara negativt fîr %2 %3';
      PEB018@1100570011 : TextConst 'ENU=You must Select more than one Line;SVE=Du mÜste markera minst tvÜ rader';
      PEB020@1100570008 : TextConst 'ENU=It must be same Vendor No. for %1 %2;SVE=Det mÜste vara samma leverantîr fîr %1 %2';
      PEB021@12047960 : TextConst 'ENU=Merging No.%1 has different %2s, it is not permissible;SVE=Samsorteringsnr %1 har olika %2er, det Ñr inte tillÜtet';
      PEB022@12047961 : TextConst 'ENU=Merging is not allowed;SVE=Samsortering Ñr inte tillÜtet';
      PEB023@12047962 : TextConst 'ENU=Customer payment is not allowed;SVE=Kundbetalningar Ñr inte tillÜtna';
      PEB024@12047963 : TextConst 'ENU=Customer Payment for %1 "%2" Type of file is not allowed.\The only File Type supporting Customer Payments is:\11128062 "VP File BG Sweden";SVE=Kundbetalning med filtyp %1 "%2" stîds inte.\Den enda filtyp som stîdjer kundbetalning Ñr:\11128062 "VP File BG Sweden"';
      gGiroType@12047964 : Record 11128061;
      PEB025@12047965 : TextConst 'ENU=Currency %1 is not allowed for the file format;SVE=Valuta %1 Ñr inte tillÜten fîr filformatet';
      gNotAllowedChars@12047966 : Text;
      PEB026@12047967 : TextConst 'ENU=%1 No. %2 has different %3;SVE=%1 nr %2 har olika %3';
      PEB027@12047968 : TextConst 'ENU=Merge All Lines,Merge Credit Memo Settlement;SVE=Samsortera alla rader,Samsortera kreditnoteavrÑkning';
      PEB029@12047970 : TextConst 'ENU=Function is not supported fîr this Client type;SVE=Funktionen stîds inte fîr denna klienttyp';
      PEB030@12047971 : TextConst 'ENU=Country Code %1 is not correct, it must be two characters long;SVE=Landskod %1  Ñr inte korrekt, den mÜste vara tvÜ tecken lÜng';

    PROCEDURE CreatePack@1070004(pGiroType@1070000 : Record 11128061);
    VAR
      GenJournalLine@1070004 : Record 81;
      VendLedgerEntry@1070002 : Record 25;
      CustLedgerEntry@1100570003 : Record 21;
      Currency@1070003 : Record 4;
      NoSeriesMgt@1070008 : Codeunit 396;
      GenJnlPostLine@1070009 : Codeunit 12;
      DimMgt@1070010 : Codeunit 408;
      AmountToPay@1070011 : Decimal;
      DocNo@1070012 : Code[20];
      Desc@1070013 : Text[250];
      FromDocNo@1070014 : Code[20];
      ToDocNo@1070015 : Code[20];
      CurrFactor@1070016 : Decimal;
      Pack@1070017 : Record 11128079;
      PaySuggLine@1100570000 : Record 11128065;
      Window@1100570004 : Dialog;
      NoOfRec@1100570005 : Integer;
      i@1100570006 : Integer;
      Vendor@1100570008 : Record 23;
      Cust@1100570007 : Record 18;
      VPPackEntry@1100570002 : Record 11128063;
      LastLedEntryNo@1100570001 : Integer;
      VendorBankAccount@12047958 : Record 288;
      CustBankAccount@1100570009 : Record 287;
    BEGIN
      pGiroType.TESTFIELD(Filename);

      SetGiroType(pGiroType);

      gVPSetup.LOCKTABLE;
      IF NOT gVPSetup.GET THEN BEGIN
        gVPSetup.INIT;
        gVPSetup.INSERT;
      END;
      gVPSetup."Pack No." += 1;
      gVPSetup.MODIFY;

      Pack.INIT;
      Pack."Entry No." := gVPSetup."Pack No.";
      Pack."Giro Type Code" := pGiroType.Code;
      Pack.Date := TODAY;
      Pack.Time := TIME;

      IF GUIALLOWED THEN
        IF NOT CONFIRM(PEB004,FALSE,pGiroType.Description,SetFileName(Pack,pGiroType.Filename)) THEN
          ERROR('');

      Pack.INSERT;

      // Vendor Ledger Entries
      PaySuggLine.RESET;
      PaySuggLine.SETRANGE("Giro Type Code",pGiroType.Code);
      PaySuggLine.SETFILTER("No.", '<>%1', '');
      IF NOT PaySuggLine.FINDSET THEN
        ERROR(PEB012);

      IF GUIALLOWED THEN
        Window.OPEN('@1@@@@@@@@@@@@@@@@@@@@@@@@@');
      NoOfRec := PaySuggLine.COUNT;
      WITH PaySuggLine DO BEGIN
        SETRANGE(Type, Type::Vendor);
        IF FINDSET THEN REPEAT
          i += 1;
          IF GUIALLOWED THEN
            Window.UPDATE(1,ROUND((i/NoOfRec*10000),1.0));
          TESTFIELD("Ledger Entry No.");
          VendLedgerEntry.GET("Ledger Entry No.");

          TESTFIELD("Currency Code",GetPayToCurrencyCode(VendLedgerEntry."Currency Code"));
          AmountToPay := 0;
          VendLedgerEntry.CALCFIELDS("Remaining Amount","Remaining Amt. (LCY)","Amount (LCY)",Amount);
          AmountToPay := -CalcAmountToPayGJLrec(PaySuggLine);

          IF AmountToPay <> -"Remaining Amount" THEN BEGIN // Part.Payment
            gVPSetup.TESTFIELD("Source Code Part. Payment");
            gVPSetup.TESTFIELD("Description Part. Payment");
            IF ABS(AmountToPay) < ABS("Remaining Amount") THEN
              ERROR(PEB009,FIELDCAPTION("Remaining Amount"),VendLedgerEntry."Document Type",
                    VendLedgerEntry."Document No.",VendLedgerEntry.FIELDCAPTION("Remaining Amount"));
            IF "Due Date Next Payment" = 0D THEN
              ERROR(PEB006,VendLedgerEntry."Document Type",VendLedgerEntry."Document No.",FIELDCAPTION("Due Date Next Payment"));
            gVPSetup.TESTFIELD("Part. Pay. Nos.");
            DocNo := NoSeriesMgt.GetNextNo(gVPSetup."Part. Pay. Nos.",WORKDATE,TRUE);
            FromDocNo := DocNo;
            gVPSetup.TESTFIELD("Part. Pay. Bal- Account No");
            Desc := STRSUBSTNO(gVPSetup."Description Part. Payment"
                       ,VendLedgerEntry."Document Type",VendLedgerEntry."Document No.");
            IF STRLEN(Desc) > 50 THEN
              ERROR(PEB005,gVPSetup.FIELDCAPTION("Description Part. Payment"));
            IF VendLedgerEntry."Currency Code" <> '' THEN
              IF VendLedgerEntry.Amount <> 0 THEN
                CurrFactor := (VendLedgerEntry."Amount (LCY)" / VendLedgerEntry.Amount)
              ELSE
                CLEAR(CurrFactor);
            GenJournalLine.INIT;
            GenJournalLine."Document No." := DocNo;
            GenJournalLine.VALIDATE("Posting Date",WORKDATE);
            GenJournalLine.VALIDATE("Account Type",GenJournalLine."Account Type"::Vendor);
            GenJournalLine.VALIDATE("Account No.",VendLedgerEntry."Vendor No.");
            GenJournalLine.VALIDATE("Currency Code",VendLedgerEntry."Currency Code");
            GenJournalLine.VALIDATE(Amount,-VendLedgerEntry."Remaining Amount");
            IF VendLedgerEntry."Currency Code" <> '' THEN
              GenJournalLine.VALIDATE("Amount (LCY)",GenJournalLine.Amount *  CurrFactor);
            GenJournalLine."Applies-to Doc. Type" := VendLedgerEntry."Document Type";
            GenJournalLine."Applies-to Doc. No." := VendLedgerEntry."Document No.";
            GenJournalLine."Applies-to ID" := '';
            GenJournalLine."External Document No." := VendLedgerEntry."External Document No.";
            GenJournalLine."Document Type" := GenJournalLine."Document Type"::Payment;
            GenJournalLine.VALIDATE("Bal. Account No.",gVPSetup."Part. Pay. Bal- Account No");
            GenJournalLine.Description := Desc;
            GenJournalLine."Source Code" := gVPSetup."Source Code Part. Payment";
            GenJnlPostLine.RunWithCheck(GenJournalLine);

            GenJournalLine.INIT;
            GenJournalLine."Document No." := DocNo;
            GenJournalLine.VALIDATE("Posting Date",WORKDATE);
            GenJournalLine.VALIDATE("Account Type",GenJournalLine."Account Type"::Vendor);
            GenJournalLine.VALIDATE("Account No.",VendLedgerEntry."Vendor No.");
            GenJournalLine.VALIDATE("Currency Code",VendLedgerEntry."Currency Code");
            GenJournalLine.VALIDATE(Amount,-"Remaining Amount");
            IF VendLedgerEntry."Currency Code" <> '' THEN
              GenJournalLine.VALIDATE("Amount (LCY)",GenJournalLine.Amount *  CurrFactor);
            GenJournalLine."External Document No." := VendLedgerEntry."External Document No.";
            GenJournalLine."Document Type" := GenJournalLine."Document Type"::" ";
            GenJournalLine.VALIDATE("Bal. Account No.",gVPSetup."Part. Pay. Bal- Account No");
            GenJournalLine.Description := Desc;
            GenJournalLine."Ext. Doc. No. not Mandatory" := TRUE;
            GenJournalLine."Source Code" := gVPSetup."Source Code Part. Payment";
            GenJnlPostLine.RunWithCheck(GenJournalLine);
            LastLedEntryNo := GetLastGLEntyNo;


            GenJournalLine.INIT;
            DocNo := NoSeriesMgt.GetNextNo(gVPSetup."Part. Pay. Nos.",WORKDATE,TRUE);
            GenJournalLine."Document No." := DocNo;
            GenJournalLine.VALIDATE("Posting Date",WORKDATE);
            GenJournalLine.VALIDATE("Account Type",GenJournalLine."Account Type"::Vendor);
            GenJournalLine.VALIDATE("Account No.",VendLedgerEntry."Vendor No.");
            GenJournalLine.VALIDATE("Currency Code",VendLedgerEntry."Currency Code");
            GenJournalLine.VALIDATE(Amount,AmountToPay + "Remaining Amount");
            IF VendLedgerEntry."Currency Code" <> '' THEN
              GenJournalLine.VALIDATE("Amount (LCY)",GenJournalLine.Amount *  CurrFactor);
            GenJournalLine."External Document No." := VendLedgerEntry."External Document No.";
            GenJournalLine."Document Type" := GenJournalLine."Document Type"::" ";
            GenJournalLine.VALIDATE("Bal. Account No.",gVPSetup."Part. Pay. Bal- Account No");
            GenJournalLine.VALIDATE("Due Date","Due Date Next Payment");
            GenJournalLine.Description := Desc;
            GenJournalLine."Ext. Doc. No. not Mandatory" := TRUE;
            GenJournalLine."Source Code" := gVPSetup."Source Code Part. Payment";
            GenJnlPostLine.RunWithCheck(GenJournalLine);
            ToDocNo := DocNo;
          END ELSE
            LastLedEntryNo := VendLedgerEntry."Entry No.";

          VendLedgerEntry.GET(LastLedEntryNo);


          IF VendLedgerEntry."VP Pack No." <> 0 THEN
            ERROR(PEB002,FORMAT(VendLedgerEntry."Document Type"),VendLedgerEntry."Document No.",
                  VendLedgerEntry.FIELDCAPTION("VP Pack No."), VendLedgerEntry."VP Pack No.");
          VendLedgerEntry."Due Date" := "Due Date/Payment Date";
          VendLedgerEntry."VP Pack No." := Pack."Entry No.";

          //4PSSE, ORANGO.EE 181011 RFC1078
          VendLedgerEntry."Last VP Pack No." := Pack."Entry No.";

          VendLedgerEntry.MODIFY;

          CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",VendLedgerEntry);

          VPPackEntry.INIT;
          VPPackEntry."Pack Entry No." := Pack."Entry No.";
          VPPackEntry."Ledger Entry No." := VendLedgerEntry."Entry No.";
          VPPackEntry.Type := VPPackEntry.Type::Vendor;
          VPPackEntry."No." := VendLedgerEntry."Vendor No.";
          VPPackEntry."Bank Account Code" := "Recipient Bank Account";
          VPPackEntry."Code for Bank of Sweden" := "Code for Bank of Sweden";
          VPPackEntry."Currency Account" := "Currency Account";

          VendorBankAccount.GET(VPPackEntry."No.",VPPackEntry."Bank Account Code");
          IF VendorBankAccount."Payment Relation" = VendorBankAccount."Payment Relation"::Foreign THEN BEGIN
            IF VPPackEntry."Currency Account" THEN
              VPPackEntry."Payment from Currency Code" := GetPayFromCurrencyCode(VendLedgerEntry."Currency Code")
            ELSE
              VPPackEntry."Payment from Currency Code" := GetLCYCode;
          END ELSE // Domesic
            VPPackEntry."Payment from Currency Code" := GetLCYCode;

          VPPackEntry."Payment to Currency Code" := GetPayToCurrencyCode(VendLedgerEntry."Currency Code");
          VPPackEntry."Payment Relation" := VendorBankAccount."Payment Relation";
          VPPackEntry."Merging No." := "Merging No.";
          VPPackEntry.INSERT;
        UNTIL NEXT = 0;
        DELETEALL(TRUE);
      END;

      // Customer Ledger Entries
      PaySuggLine.RESET;
      PaySuggLine.SETRANGE("Giro Type Code",pGiroType.Code);
      PaySuggLine.SETFILTER("No.", '<>%1', '');

      IF GUIALLOWED THEN
        Window.OPEN('@1@@@@@@@@@@@@@@@@@@@@@@@@@');
      NoOfRec := PaySuggLine.COUNT;
      WITH PaySuggLine DO BEGIN
        SETRANGE(Type, Type::Customer);
        IF FINDSET THEN REPEAT
          i += 1;
          IF GUIALLOWED THEN
            Window.UPDATE(1,ROUND((i/NoOfRec*10000),1.0));
          TESTFIELD("Ledger Entry No.");
          CustLedgerEntry.GET("Ledger Entry No.");

          TESTFIELD("Currency Code",GetPayToCurrencyCode(CustLedgerEntry."Currency Code"));
          AmountToPay := 0;
          CustLedgerEntry.CALCFIELDS("Remaining Amount","Remaining Amt. (LCY)",Amount);
          AmountToPay := -CalcAmountToPayGJLrec(PaySuggLine);

          IF AmountToPay <> -"Remaining Amount" THEN BEGIN // Part.Payment
            gVPSetup.TESTFIELD("Source Code Part. Payment");
            gVPSetup.TESTFIELD("Description Part. Payment");
            IF ABS(AmountToPay) < ABS("Remaining Amount") THEN
              ERROR(PEB009,FIELDCAPTION("Remaining Amount"),CustLedgerEntry."Document Type",
                    CustLedgerEntry."Document No.",CustLedgerEntry.FIELDCAPTION("Remaining Amount"));
            IF "Due Date Next Payment" = 0D THEN
              ERROR(PEB006,CustLedgerEntry."Document Type",CustLedgerEntry."Document No.",FIELDCAPTION("Due Date Next Payment"));
            gVPSetup.TESTFIELD("Part. Pay. Nos.");
            DocNo := NoSeriesMgt.GetNextNo(gVPSetup."Part. Pay. Nos.",WORKDATE,TRUE);
            FromDocNo := DocNo;
            gVPSetup.TESTFIELD("Part. Pay. Bal- Account No");
            Desc := STRSUBSTNO(gVPSetup."Description Part. Payment"
                       ,CustLedgerEntry."Document Type",CustLedgerEntry."Document No.");
            IF STRLEN(Desc) > 50 THEN
              ERROR(PEB005,gVPSetup.FIELDCAPTION("Description Part. Payment"));
            IF CustLedgerEntry."Currency Code" <> '' THEN
              IF CustLedgerEntry.Amount <> 0 THEN
                CurrFactor := (CustLedgerEntry."Remaining Amt. (LCY)" / CustLedgerEntry.Amount)
              ELSE
                CLEAR(CurrFactor);
            GenJournalLine.INIT;
            GenJournalLine."Document No." := DocNo;
            GenJournalLine.VALIDATE("Posting Date",WORKDATE);
            GenJournalLine.VALIDATE("Account Type",GenJournalLine."Account Type"::Customer);
            GenJournalLine.VALIDATE("Account No.",CustLedgerEntry."Customer No.");
            GenJournalLine.VALIDATE("Currency Code",CustLedgerEntry."Currency Code");
            GenJournalLine.VALIDATE(Amount,-CustLedgerEntry."Remaining Amount");
            GenJournalLine."Applies-to Doc. Type" := CustLedgerEntry."Document Type";
            GenJournalLine."Applies-to Doc. No." := CustLedgerEntry."Document No.";
            GenJournalLine."Applies-to ID" := '';
            GenJournalLine."External Document No." := CustLedgerEntry."External Document No.";
            GenJournalLine."Document Type" := GenJournalLine."Document Type"::" ";
            GenJournalLine.VALIDATE("Bal. Account No.",gVPSetup."Part. Pay. Bal- Account No");
            GenJournalLine.Description := Desc;
            GenJournalLine."Source Code" := gVPSetup."Source Code Part. Payment";
            GenJnlPostLine.RunWithCheck(GenJournalLine);

            GenJournalLine.INIT;
            GenJournalLine."Document No." := DocNo;
            GenJournalLine.VALIDATE("Posting Date",WORKDATE);
            GenJournalLine.VALIDATE("Account Type",GenJournalLine."Account Type"::Customer);
            GenJournalLine.VALIDATE("Account No.",CustLedgerEntry."Customer No.");
            GenJournalLine.VALIDATE("Currency Code",CustLedgerEntry."Currency Code");
            GenJournalLine.VALIDATE(Amount,-"Remaining Amount");
            IF CustLedgerEntry."Currency Code" <> '' THEN
              GenJournalLine.VALIDATE("Amount (LCY)",GenJournalLine.Amount *  CurrFactor);
            GenJournalLine."External Document No." := CustLedgerEntry."External Document No.";
            GenJournalLine."Document Type" := GenJournalLine."Document Type"::" ";
            GenJournalLine.VALIDATE("Bal. Account No.",gVPSetup."Part. Pay. Bal- Account No");
            GenJournalLine.Description := Desc;
            GenJournalLine."Ext. Doc. No. not Mandatory" := TRUE;
            GenJournalLine."Source Code" := gVPSetup."Source Code Part. Payment";
            GenJnlPostLine.RunWithCheck(GenJournalLine);
            LastLedEntryNo := GetLastGLEntyNo;


            GenJournalLine.INIT;
            DocNo := NoSeriesMgt.GetNextNo(gVPSetup."Part. Pay. Nos.",WORKDATE,TRUE);
            GenJournalLine."Document No." := DocNo;
            GenJournalLine.VALIDATE("Posting Date",WORKDATE);
            GenJournalLine.VALIDATE("Account Type",GenJournalLine."Account Type"::Customer);
            GenJournalLine.VALIDATE("Account No.",CustLedgerEntry."Customer No.");
            GenJournalLine.VALIDATE("Currency Code",CustLedgerEntry."Currency Code");
            GenJournalLine.VALIDATE(Amount,AmountToPay + "Remaining Amount");
            IF CustLedgerEntry."Currency Code" <> '' THEN
              GenJournalLine.VALIDATE("Amount (LCY)",GenJournalLine.Amount *  CurrFactor);
            GenJournalLine."External Document No." := CustLedgerEntry."External Document No.";
            GenJournalLine."Document Type" := GenJournalLine."Document Type"::" ";
            GenJournalLine.VALIDATE("Bal. Account No.",gVPSetup."Part. Pay. Bal- Account No");
            GenJournalLine.VALIDATE("Due Date","Due Date Next Payment");
            GenJournalLine.Description := Desc;
            GenJournalLine."Ext. Doc. No. not Mandatory" := TRUE;
            GenJournalLine."Source Code" := gVPSetup."Source Code Part. Payment";
            GenJnlPostLine.RunWithCheck(GenJournalLine);
            ToDocNo := DocNo;
          END ELSE
            LastLedEntryNo := CustLedgerEntry."Entry No.";

          CustLedgerEntry.GET(LastLedEntryNo);


          IF CustLedgerEntry."VP Pack No." <> 0 THEN
            ERROR(PEB002,FORMAT(CustLedgerEntry."Document Type"),CustLedgerEntry."Document No.",
                  CustLedgerEntry.FIELDCAPTION("VP Pack No."), CustLedgerEntry."VP Pack No.");
          CustLedgerEntry."Due Date" := "Due Date/Payment Date";
          CustLedgerEntry."VP Pack No." := Pack."Entry No.";
          CustLedgerEntry.MODIFY;

          CODEUNIT.RUN(CODEUNIT::"Cust. Entry-Edit",CustLedgerEntry);

          VPPackEntry.INIT;
          VPPackEntry."Pack Entry No." := Pack."Entry No.";
          VPPackEntry."Ledger Entry No." := CustLedgerEntry."Entry No.";
          VPPackEntry.Type := VPPackEntry.Type::Customer;
          VPPackEntry."No." := CustLedgerEntry."Customer No.";
          VPPackEntry."Bank Account Code" := "Recipient Bank Account";
          VPPackEntry."Code for Bank of Sweden" := "Code for Bank of Sweden";
          VPPackEntry."Currency Account" := "Currency Account";

          CustBankAccount.GET(VPPackEntry."No.",VPPackEntry."Bank Account Code");
          IF CustBankAccount."Payment Relation" = CustBankAccount."Payment Relation"::Foreign THEN BEGIN
            IF CustBankAccount."Currency Account" THEN
              VPPackEntry."Payment from Currency Code" := GetPayFromCurrencyCode(CustLedgerEntry."Currency Code")
            ELSE
              VPPackEntry."Payment from Currency Code" := GetLCYCode;
          END ELSE // Domestic
            VPPackEntry."Payment from Currency Code" := GetLCYCode;

          VPPackEntry."Payment to Currency Code" := GetPayToCurrencyCode(CustLedgerEntry."Currency Code");
          VPPackEntry."Payment Relation" := CustBankAccount."Payment Relation";
          VPPackEntry."Merging No." := "Merging No.";
          VPPackEntry.INSERT;
        UNTIL NEXT = 0;
        DELETEALL(TRUE);
      END;

      IF GUIALLOWED THEN
        Window.CLOSE;

      CleanUpPack;

      CreateFileFromPack(Pack);

      COMMIT;

      Pack.FIND;
      IF GUIALLOWED THEN BEGIN
        IF FromDocNo = '' THEN
          MESSAGE(PEB007,pGiroType.Description,SetFileName(Pack,pGiroType.Filename),Pack."Total Amount (LCY)")
        ELSE
          MESSAGE(PEB007+PEB008,pGiroType.Description,SetFileName(Pack,pGiroType.Filename),Pack."Total Amount (LCY)",FromDocNo,ToDocNo);
      END;
    END;

    PROCEDURE ClosePack@12047962(pStatus@12047961 : ' ,Closed,Deleted';VAR pvVPPack@12047959 : Record 11128079);
    VAR
      VPPackEntry@12047958 : Record 11128063;
      VendorLedgerEntry@12047960 : Record 25;
      CustLedgerEntry@1100570000 : Record 21;
    BEGIN
      VPPackEntry.RESET;
      VPPackEntry.SETRANGE("Pack Entry No.",pvVPPack."Entry No.");
      VPPackEntry.SETRANGE(Type,VPPackEntry.Type::Vendor);
      IF VPPackEntry.FINDSET THEN REPEAT
        VendorLedgerEntry.GET(VPPackEntry."Ledger Entry No.");

        IF VendorLedgerEntry.Open THEN
          VPPackEntry.Status := VPPackEntry.Status::Deleted
        ELSE
          VPPackEntry.Status := VPPackEntry.Status::Closed;
        VPPackEntry.MODIFY;

        IF VendorLedgerEntry."VP Pack No." <> 0 THEN BEGIN
          CLEAR(VendorLedgerEntry."VP Pack No.");
          VendorLedgerEntry.MODIFY;
        END;

      UNTIL VPPackEntry.NEXT = 0;

      VPPackEntry.RESET;
      VPPackEntry.SETRANGE("Pack Entry No.",pvVPPack."Entry No.");
      VPPackEntry.SETRANGE(Type,VPPackEntry.Type::Customer);
      IF VPPackEntry.FINDSET THEN REPEAT
        CustLedgerEntry.GET(VPPackEntry."Ledger Entry No.");

        IF CustLedgerEntry.Open THEN
          VPPackEntry.Status := VPPackEntry.Status::Deleted
        ELSE
          VPPackEntry.Status := VPPackEntry.Status::Closed;
        VPPackEntry.MODIFY;

        IF CustLedgerEntry."VP Pack No." <> 0 THEN BEGIN
          CLEAR(CustLedgerEntry."VP Pack No.");
          CustLedgerEntry.MODIFY;
        END;

      UNTIL VPPackEntry.NEXT = 0;

      pvVPPack.Status := pStatus;
      pvVPPack.TESTFIELD(Status);
      pvVPPack.MODIFY;
    END;

    PROCEDURE "GetIBAN/BankccountNo"@12047960(pVendorBankAccount@12047958 : Record 288) : Text;
    BEGIN
      IF (pVendorBankAccount."Payment Type" = pVendorBankAccount."Payment Type"::Account) AND (pVendorBankAccount."Bank Account No." = '') AND (pVendorBankAccount.IBAN = '') THEN
        ERROR(PEB014,pVendorBankAccount.FIELDCAPTION(IBAN),pVendorBankAccount.FIELDCAPTION("Bank Account No."),pVendorBankAccount."Vendor No.");

      IF pVendorBankAccount.IBAN <> '' THEN BEGIN
        IF pVendorBankAccount."Bank Branch No." <> '' THEN
          pVendorBankAccount.FIELDERROR("Bank Branch No.",PEB015);
        EXIT(pVendorBankAccount.IBAN)
      END ELSE
        EXIT(pVendorBankAccount."Bank Account No.");
    END;

    PROCEDURE GetVendGiroNo@1070006(VAR pVendor@1070000 : Record 23;VAR pCurrency@1070003 : Record 4) : Code[7];
    VAR
      PaymentNo@1100570000 : Record 11128064;
    BEGIN
      PaymentNo.RESET;
      PaymentNo.SETCURRENTKEY("Currency Code",Type,"No.");
      PaymentNo.SETRANGE("Currency Code",pCurrency.Code);
      PaymentNo.SETRANGE(Type,PaymentNo.Type::Vendor);
      PaymentNo.SETRANGE("No.",pVendor."No.");
      IF NOT PaymentNo.FINDFIRST THEN BEGIN
        PaymentNo.RESET;
        IF NOT PaymentNo.FINDLAST THEN
          CLEAR(PaymentNo);
        PaymentNo.INIT;
        PaymentNo."Payment No." += 1;
        PaymentNo."Currency Code" := pCurrency.Code;
        PaymentNo.Type := PaymentNo.Type::Vendor;
        PaymentNo."No." := pVendor."No.";
        PaymentNo.INSERT;
        IF PaymentNo."Payment No." > 999999 THEN
          ERROR(PEB010,PaymentNo.FIELDCAPTION("Payment No."),PaymentNo.TABLECAPTION);
      END;

      EXIT(NFL(FORMAT(PaymentNo."Payment No."),6) +  SumCheck10(NFL(FORMAT(PaymentNo."Payment No."),6) + '0'));
    END;

    PROCEDURE GetGiroNo@1100570017(pType@1070000 : Integer;pNo@12047958 : Code[20];pCurrency@1070003 : Record 4) : Code[7];
    VAR
      PaymentNo@1100570000 : Record 11128064;
    BEGIN
      PaymentNo.RESET;
      PaymentNo.SETCURRENTKEY("Currency Code",Type,"No.");
      PaymentNo.SETRANGE("Currency Code",pCurrency.Code);
      PaymentNo.SETRANGE(Type,pType);
      PaymentNo.SETRANGE("No.",pNo);
      IF NOT PaymentNo.FINDFIRST THEN BEGIN
        PaymentNo.RESET;
        IF NOT PaymentNo.FINDLAST THEN
          CLEAR(PaymentNo);
        PaymentNo.INIT;
        PaymentNo."Payment No." += 1;
        PaymentNo."Currency Code" := pCurrency.Code;
        PaymentNo.Type := pType;
        PaymentNo."No." := pNo;
        PaymentNo.INSERT;
        IF PaymentNo."Payment No." > 999999 THEN
          ERROR(PEB010,PaymentNo.FIELDCAPTION("Payment No."),PaymentNo.TABLECAPTION);
      END;

      EXIT(NFL(FORMAT(PaymentNo."Payment No."),6) +  SumCheck10(NFL(FORMAT(PaymentNo."Payment No."),6) + '0'));
    END;

    PROCEDURE IsLocalCurr@1070044(pCurrencyCode@1070000 : Code[10]) : Boolean;
    BEGIN
      EXIT(GetPayToCurrencyCode(pCurrencyCode) = GetLCYCode);
    END;

    PROCEDURE CalcAmountToPayGJLrec@1070043(pPaySuggLine@1070000 : Record 11128065) : Decimal;
    VAR
      VendLedgerEntry@1070001 : Record 25;
      CustLedgerEntry@1100570000 : Record 21;
    BEGIN
      pPaySuggLine.TESTFIELD("Ledger Entry No.");
      IF pPaySuggLine.Type = pPaySuggLine.Type::Vendor THEN BEGIN
        VendLedgerEntry.GET(pPaySuggLine."Ledger Entry No.");
        VendLedgerEntry."Due Date" := pPaySuggLine."Due Date/Payment Date";
        EXIT(-CalcVendAmountToPay(VendLedgerEntry));
      END;
      IF pPaySuggLine.Type = pPaySuggLine.Type::Customer THEN BEGIN
        CustLedgerEntry.GET(pPaySuggLine."Ledger Entry No.");
        CustLedgerEntry."Due Date" := pPaySuggLine."Due Date/Payment Date";
        EXIT(-CalcCustAmountToPay(CustLedgerEntry));
      END;
    END;

    PROCEDURE CalcVendAmountToPay@1070041(VendLedgerEntry@1070000 : Record 25) : Decimal;
    BEGIN
      WITH VendLedgerEntry DO BEGIN
        CALCFIELDS("Remaining Amount");
        IF ("Document Type" = "Document Type"::Invoice) AND
           ("Due Date" <= "Pmt. Discount Date") THEN
          EXIT("Remaining Amount" - "Remaining Pmt. Disc. Possible")
        ELSE
          EXIT("Remaining Amount");
      END;
    END;

    PROCEDURE CalcVendAmountToPayLCY@1070042(VendLedgerEntry@1070000 : Record 25) : Decimal;
    VAR
      CurrencyExchangeRate@1100570000 : Record 330;
    BEGIN
      WITH VendLedgerEntry DO BEGIN
        CALCFIELDS("Remaining Amount","Remaining Amt. (LCY)");
        IF ("Document Type" = "Document Type"::Invoice) AND
           ("Due Date" <= "Pmt. Discount Date") THEN
        BEGIN
          IF "Remaining Amount" <> "Remaining Amt. (LCY)" THEN
            EXIT("Remaining Amt. (LCY)" - ROUND(
                    CurrencyExchangeRate.ExchangeAmtFCYToLCY(
                    0,'',TODAY,"Currency Code",
                    "Remaining Pmt. Disc. Possible",CurrencyExchangeRate.ExchangeRate(0,'',TODAY,"Currency Code",FALSE),FALSE)))
          ELSE
            EXIT("Remaining Amount" - "Remaining Pmt. Disc. Possible");
        END ELSE
          EXIT("Remaining Amt. (LCY)");
      END;
    END;

    PROCEDURE CalcCustAmountToPay@1100570016(CustLedgerEntry@1070000 : Record 21) : Decimal;
    BEGIN
      WITH CustLedgerEntry DO BEGIN
        CALCFIELDS("Remaining Amount");
        IF ("Document Type" = "Document Type"::"Credit Memo") AND
           ("Due Date" <= "Pmt. Discount Date") THEN
          EXIT("Remaining Amount" - "Remaining Pmt. Disc. Possible")
        ELSE
          EXIT("Remaining Amount");
      END;
    END;

    PROCEDURE CalcCustAmountToPayLCY@1100570015(CustLedgerEntry@1070000 : Record 21) : Decimal;
    VAR
      CurrencyExchangeRate@1100570000 : Record 330;
    BEGIN
      WITH CustLedgerEntry DO BEGIN
        CALCFIELDS("Remaining Amount","Remaining Amt. (LCY)");
        IF ("Document Type" = "Document Type"::Invoice) AND
           ("Due Date" <= "Pmt. Discount Date") THEN
        BEGIN
          IF "Remaining Amount" <> "Remaining Amt. (LCY)" THEN
            EXIT("Remaining Amt. (LCY)" - ROUND(
                    CurrencyExchangeRate.ExchangeAmtFCYToLCY(
                    0,'',TODAY,"Currency Code",
                    "Remaining Pmt. Disc. Possible",CurrencyExchangeRate.ExchangeRate(0,'',TODAY,"Currency Code",FALSE),FALSE)))
          ELSE
            EXIT("Remaining Amount" - "Remaining Pmt. Disc. Possible");
        END ELSE
          EXIT("Remaining Amt. (LCY)");
      END;
    END;

    PROCEDURE CleanUpPack@1070000();
    VAR
      VendLedgerEntry@1070001 : Record 25;
      CustLedgerEntry@12047960 : Record 21;
      Pack@1070002 : Record 11128079;
      NoVendLedgFound@12047958 : Boolean;
      NoCustLedgFound@12047959 : Boolean;
    BEGIN
      Pack.RESET;
      Pack.SETRANGE(Status,Pack.Status::" ");
      VendLedgerEntry.RESET;
      VendLedgerEntry.SETCURRENTKEY("VP Pack No.");
      CustLedgerEntry.RESET;
      CustLedgerEntry.SETCURRENTKEY("VP Pack No.");
      IF Pack.FIND('-') THEN REPEAT
        VendLedgerEntry.SETRANGE("VP Pack No.",Pack."Entry No.");
        CustLedgerEntry.SETRANGE("VP Pack No.",Pack."Entry No.");
        NoVendLedgFound := NOT VendLedgerEntry.FINDFIRST;
        NoCustLedgFound := NOT CustLedgerEntry.FINDFIRST;

        IF NoVendLedgFound AND NoCustLedgFound THEN
          ClosePack(Pack.Status::Closed,Pack);

      UNTIL Pack.NEXT = 0;
    END;

    PROCEDURE CreateFileFromPackConfirm@1100570010(VAR pvVPPack@1100570000 : Record 11128079);
    VAR
      GiroType@1100570001 : Record 11128061;
    BEGIN
      GiroType.GET(pvVPPack."Giro Type Code");
      GiroType.TESTFIELD("Codeunit No.");
      GiroType.TESTFIELD(Filename);
      IF NOT CONFIRM(PEB013,FALSE,pvVPPack."Giro Type Code",pvVPPack."Entry No.",SetFileName(pvVPPack,GiroType.Filename)) THEN
        EXIT;
      CreateFileFromPack(pvVPPack);
    END;

    PROCEDURE CreateFileFromPack@1100570002(VAR pvVPPack@1100570000 : Record 11128079);
    VAR
      GiroType@1100570001 : Record 11128061;
    BEGIN
      GiroType.GET(pvVPPack."Giro Type Code");
      GiroType.TESTFIELD("Codeunit No.");
      CODEUNIT.RUN(GiroType."Codeunit No.", pvVPPack);
    END;

    PROCEDURE Date2Text@1070025(Date@1070000 : Date;Length@1070001 : Integer) @1070002 : Text[8];
    BEGIN
      IF (Length < 1) AND (Length > 8) THEN
        ERROR(PEB003,Length);
      IF Date <> 0D THEN
        EXIT(COPYSTR(FORMAT(Date,0,'<Year4,4><Month,2><Day,2>'),8-Length+1))
      ELSE
        EXIT(PADSTR('',Length));
    END;

    PROCEDURE Dec2TextBGForeign@1070024(Amount@1070000 : Decimal) @1070001 : Text[30];
    VAR
      DecText@1070002 : Text[30];
    BEGIN
      DecText := FORMAT(ROUND(Amount) * 100);
      DecText := DELCHR(DecText,'=',DELCHR(DecText,'=','0123456789'));
      IF Amount < 0 THEN
        EXIT(COPYSTR(DecText,1,STRLEN(DecText) - 1) +
             CONVERTSTR(COPYSTR(DecText,STRLEN(DecText), 1),'0123456789','-JKLMNOPQR'));
      EXIT(DecText);
    END;

    PROCEDURE ClearText@1070026(Text@1070000 : Text[250]) @1070001 : Text[250];
    VAR
      TextTmp@1070002 : Text[30];
    BEGIN
      EXIT(DELCHR(Text,'=',DELCHR(Text,'=','0123456789')));
    END;

    PROCEDURE NFL@1070027(Text@1070000 : Text[250];Length@1070001 : Integer) : Text[250];
    BEGIN
      Text := DELCHR(Text,'<>');
      IF (Length < 1) AND (Length > 250) THEN
        ERROR(PEB003,'NFL',Length);
      IF STRLEN(Text) > Length THEN
        Text := COPYSTR(Text,STRLEN(Text)-Length+1);
      EXIT(PADSTR('', Length - STRLEN(Text),'0') + Text);
    END;

    PROCEDURE NFR@1070028(Text@1070000 : Text[250];Length@1070001 : Integer) : Text[250];
    BEGIN
      Text := DELCHR(Text,'<>');
      IF (Length < 1) AND (Length > 250) THEN
        ERROR(PEB003,'NFR',Length);
      EXIT(PADSTR(Text,Length,'0'));
    END;

    PROCEDURE TFL@1070029(Text@1070000 : Text[250];Length@1070001 : Integer) : Text[250];
    VAR
      TextUt@1070002 : Text[40];
    BEGIN
      Text := DELCHR(Text,'<>');
      IF (Length < 1) AND (Length > 250) THEN
        ERROR(PEB003,'TFL',Length);
      Text := COPYSTR(Text,1,Length);
      EXIT(PADSTR('', Length - STRLEN(Text),' ') + Text);
    END;

    PROCEDURE TFR@1070030(Text@1070000 : Text[250];Length@1070001 : Integer) : Text[250];
    VAR
      TextUt@1070002 : Text[40];
    BEGIN
      Text := DELCHR(Text,'<>');
      IF (Length < 1) AND (Length > 250) THEN
        ERROR(PEB003,'TFR',Length);
      EXIT(UPPERCASE(PADSTR(Text,Length)));
    END;

    PROCEDURE BLK@1070031(Length@1070000 : Integer) : Text[250];
    VAR
      TextUt@1070001 : Text[40];
    BEGIN
      IF (Length < 1) AND (Length > 250) THEN
        ERROR(PEB003,'BLK',Length);
      EXIT(PADSTR('',Length));
    END;

    PROCEDURE SumCheck10@1070032(Code@1070000 : Code[20]) : Code[1];
    VAR
      ChSum@1070001 : Decimal;
      C@1070002 : Decimal;
      i@1070003 : Integer;
    BEGIN
      Code := COPYSTR(NFL(ClearText(Code),20), 1, 19);
      CLEAR(ChSum);
      FOR i := 1 TO 19 DO BEGIN
        EVALUATE(C, COPYSTR(Code, i, 1));
        ChSum := ChSum + ((C * (( i MOD 2) + 1)) MOD 10);
        ChSum := ChSum + ((C * (( i MOD 2) + 1)) DIV 10);
      END;
      ChSum := (10 - (ChSum MOD 10)) MOD 10;
      EXIT(FORMAT(ChSum));
    END;

    PROCEDURE SumCheck10Control@1070033(Code@1070000 : Code[20]) : Boolean;
    BEGIN
      EXIT(COPYSTR(Code,STRLEN(Code),1) = SumCheck10(Code));
    END;

    PROCEDURE Value1@1070002(Dec@1070000 : Decimal;Length@1070001 : Integer) : Text[250];
    BEGIN
      EXIT(NFL(ClearText(FORMAT(ROUND(Dec,1.0))),Length));
    END;

    PROCEDURE Value100@1070034(Dec@1070000 : Decimal;Length@1070001 : Integer) : Text[250];
    BEGIN
      IF Dec = 0 THEN
        EXIT(NFL('000',Length));
      EXIT(NFL(ClearText(FORMAT(ROUND(Dec)*100)),Length));
    END;

    PROCEDURE FillField@1070035(Field1@1070000 : Text[250];Field2@1070001 : Text[250]) : Text[250];
    BEGIN
      IF Field1 <> '' THEN
        EXIT(Field1);
      EXIT(Field2);
    END;

    PROCEDURE NegativeSign@1070036(Dec@1070000 : Decimal) : Text[1];
    BEGIN
      IF Dec < 0 THEN
        EXIT('-')
      ELSE
        EXIT(' ');
    END;

    PROCEDURE CheckGiroNr@1100570001(GiroNo@1100570001 : Code[20]);
    BEGIN
      GetSetup;

      IF GiroNo = '' THEN
        EXIT;
      IF NOT gVPSetup."Check Giro Account" THEN
        EXIT;

      IF NOT SumCheck10Control(GiroNo) THEN
        ERROR(PEB001,GiroNo);
    END;

    PROCEDURE GetSEKEURCurrencyCode@1100570005() : Code[10];
    BEGIN
      GetSetup;
      CASE GetLCYCode OF
       'SEK','EUR': EXIT(GetLCYCode);
       ELSE
         ERROR(PEB011,GetLCYCode);
      END;
    END;

    PROCEDURE CheckSEKEURCurrency@12047968(pPack@12047959 : Record 11128079;pCurrencyFilter@12047960 : Text);
    VAR
      VPPackEntry@12047958 : Record 11128063;
    BEGIN
      GetSEKEURCurrencyCode;

      VPPackEntry.RESET;
      VPPackEntry.SETRANGE("Pack Entry No.",pPack."Entry No.");
      VPPackEntry.SETFILTER("Payment Relation",'<>%1',VPPackEntry."Payment Relation"::Foreign);
      VPPackEntry.SETFILTER("Payment to Currency Code",pCurrencyFilter);
      IF VPPackEntry.FINDFIRST THEN
        ERROR(PEB025,VPPackEntry."Payment to Currency Code");
    END;

    PROCEDURE GetPayFromCurrencyCode@12047959(pCurrencyCode@12047958 : Code[10]) : Code[10];
    BEGIN
      IF pCurrencyCode <> '' THEN
        EXIT(pCurrencyCode);

      EXIT(GetLCYCode);
    END;

    PROCEDURE GetPayToCurrencyCode@12047967(pCurrencyCode@12047958 : Code[10]) : Code[10];
    BEGIN
      GetSetup;
      IF pCurrencyCode <> '' THEN
        EXIT(pCurrencyCode);

      EXIT(gGeneralLedgerSetup."LCY Code");
    END;

    PROCEDURE GetCountryCode@12047961(pCountryCode@12047958 : Code[20]) : Code[20];
    BEGIN
      IF pCountryCode <> '' THEN BEGIN
        IF STRLEN(pCountryCode) <> 2 THEN
          ERROR(PEB030,pCountryCode);
        EXIT(pCountryCode);
      END;

      GetSetup;
      gGeneralLedgerSetup.TESTFIELD("Local Country Code");

      IF STRLEN(gGeneralLedgerSetup."Local Country Code") <> 2 THEN
        ERROR(PEB030,gGeneralLedgerSetup."Local Country Code");

      EXIT(gGeneralLedgerSetup."Local Country Code");
    END;

    PROCEDURE IsEURCurr@1100570003(pCurrencyCode@1100570001 : Code[10]) : Boolean;
    BEGIN
      GetSetup;
      CASE GetLCYCode OF
       'SEK': EXIT('EUR' = pCurrencyCode);
       'EUR': EXIT(IsLocalCurr(pCurrencyCode));
       ELSE
         ERROR(PEB011,GetLCYCode);
      END;
    END;

    PROCEDURE IsSEKCurr@1100570007(pCurrencyCode@1100570001 : Code[10]) : Boolean;
    BEGIN
      EXIT(GetPayFromCurrencyCode(pCurrencyCode) = 'SEK');
    END;

    PROCEDURE GetSetup@1100570006();
    BEGIN
      IF gSetUpOK THEN
        EXIT;
      gVPSetup.GET;
      gGeneralLedgerSetup.GET;
      gGeneralLedgerSetup.TESTFIELD("LCY Code");
      gSetUpOK := TRUE;
    END;

    PROCEDURE MMDD@1000000032(date@1000000000 : Date) : Code[4];
    BEGIN
      IF date = 0D THEN
        EXIT('    ')
      ELSE
        EXIT(FORMAT(date,0,'<Month,2><Day,2>'));
    END;

    PROCEDURE YYMMDD@1000000014(Date@1000000000 : Date) : Text[6];
    BEGIN
      IF Date = 0D THEN
        EXIT('      ')
      ELSE
        EXIT(FORMAT(Date,0,'<year,2><month,2><day,2>'));
    END;

    PROCEDURE GetCodeUnitCaption@1100570008(pCodeUnitNo@1100570001 : Integer) : Text;
    VAR
      Object@1100570000 : Record 2000000001;
    BEGIN
      IF NOT Object.GET(Object.Type::Codeunit,'',pCodeUnitNo) THEN
        EXIT('')
      ELSE BEGIN
        Object.CALCFIELDS(Caption);
        EXIT(Object.Caption);
      END;
    END;

    PROCEDURE InsertVPGiroTypeLines@1100570009();
    VAR
      VPGiroType@1100570000 : Record 11128061;
    BEGIN
      IF NOT VPGiroType.ISEMPTY THEN
        EXIT;
      InsertVPGiroTypeLine('INRIKES','Inrikes',0);
      InsertVPGiroTypeLine('UTRIKES','Utrikes',0);
    END;

    LOCAL PROCEDURE InsertVPGiroTypeLine@1100570011(pCode@1100570001 : Code[10];pDescription@1100570002 : Text[50];pCodeUnitNo@1100570003 : Integer);
    VAR
      VPGiroType@1100570000 : Record 11128061;
    BEGIN
      VPGiroType.INIT;
      VPGiroType.Code := pCode;
      VPGiroType.Description := pDescription;
      VPGiroType."Codeunit No." := pCodeUnitNo;
      IF GetCodeUnitCaption(pCodeUnitNo) = '' THEN
        VPGiroType."Codeunit No." := 0;
      VPGiroType.INSERT;
    END;

    PROCEDURE SetFileName@12047958(pVPPack@12047959 : Record 11128079;pFileName@12047958 : Text) : Text;
    VAR
      FileMgt@12047960 : Codeunit 419;
      TextMgt@12047961 : Codeunit 11128088;
    BEGIN
      // %1 = Pack No
      // %2 = Giro Type Code
      // %3 = Date

      IF NOT FileMgt.CanRunDotNetOnClient THEN BEGIN
        pFileName := TextMgt.SelectStr2(-1,pFileName,'\');
        EXIT(CONVERTSTR(STRSUBSTNO(pFileName,pVPPack."Entry No.",pVPPack."Giro Type Code",FORMAT(pVPPack.Date,0,'<year,2><month,2><day,2>')),' ','_'));
      END ELSE
        EXIT(STRSUBSTNO(pFileName,pVPPack."Entry No.",pVPPack."Giro Type Code",FORMAT(pVPPack.Date,0,'<year,2><month,2><day,2>')));
    END;

    PROCEDURE MergePayments@1100570012(VAR pvPaymntSuggLine@1100570000 : Record 11128065);
    VAR
      PaymntSuggLine@1100570001 : Record 11128065;
      PaymntSuggLine2@1100570002 : Record 11128065;
      NextMergeNo@1100570003 : Integer;
      TotAmount@1100570004 : Decimal;
      PosLine@1100570005 : Boolean;
      NegLine@1100570006 : Boolean;
    BEGIN
      // HÑmta nÑsta kopplingsnr
      PaymntSuggLine.RESET;
      PaymntSuggLine.SETCURRENTKEY("Merging No.");
      PaymntSuggLine.SETFILTER("Merging No.",'<>0');
      IF PaymntSuggLine.FINDLAST THEN
        NextMergeNo := PaymntSuggLine."Merging No." + 1
      ELSE
        NextMergeNo := 1;

      // Uppdatera alla markerade rader med numret
      PaymntSuggLine.RESET;
      PaymntSuggLine.COPY(pvPaymntSuggLine);
      IF PaymntSuggLine.COUNT <= 1 THEN
        ERROR(PEB018);
      IF PaymntSuggLine.FINDFIRST THEN REPEAT
        PaymntSuggLine.TESTFIELD("Merging No.",0);
        PaymntSuggLine."Merging No." := NextMergeNo;
        PaymntSuggLine.MODIFY;
      UNTIL PaymntSuggLine.NEXT = 0;

      // Gîr kontroller
      PaymntSuggLine.RESET;
      PaymntSuggLine.SETCURRENTKEY("Merging No.");
      PaymntSuggLine.SETRANGE("Merging No.",NextMergeNo);
      IF PaymntSuggLine.FINDFIRST THEN BEGIN
        PaymntSuggLine2 := PaymntSuggLine;
        REPEAT
          IF PaymntSuggLine."No." <> PaymntSuggLine2."No." THEN
            ERROR(PEB020,PaymntSuggLine.FIELDCAPTION("Merging No."),NextMergeNo);
          IF PaymntSuggLine."Currency Code" <> PaymntSuggLine2."Currency Code" THEN
            ERROR(PEB016,PaymntSuggLine.FIELDCAPTION("Merging No."),NextMergeNo);

          TotAmount += PaymntSuggLine."Remaining Amount";
          PaymntSuggLine2 := PaymntSuggLine;

          IF NOT PosLine THEN
            PosLine := PaymntSuggLine."Remaining Amount" > 0;

          IF NOT NegLine THEN
            NegLine := PaymntSuggLine."Remaining Amount" < 0;

        UNTIL PaymntSuggLine.NEXT = 0;
      END;

      IF TotAmount < 0 THEN
        ERROR(PEB017,TotAmount,PaymntSuggLine.FIELDCAPTION("Merging No."),PaymntSuggLine."Merging No.");
    END;

    PROCEDURE DeMergePayments@1100570013(VAR pvPaymntSuggLine@1100570000 : Record 11128065);
    VAR
      PaymntSuggLine@1100570001 : Record 11128065;
      PaymntSuggLine2@1100570002 : Record 11128065;
    BEGIN
      // Om redan kopplat, koppla loss alla transaktioner
      IF pvPaymntSuggLine."Merging No." <> 0 THEN BEGIN
        PaymntSuggLine.RESET;
        PaymntSuggLine.SETCURRENTKEY("Merging No.");
        PaymntSuggLine.SETRANGE("Merging No.",pvPaymntSuggLine."Merging No.");
        IF PaymntSuggLine.FINDFIRST THEN REPEAT
          PaymntSuggLine2 := PaymntSuggLine;
          PaymntSuggLine2."Merging No." := 0;
          PaymntSuggLine2.MODIFY;
        UNTIL PaymntSuggLine.NEXT = 0;
      END;
    END;

    PROCEDURE AutoMergePayments@1100570014(VAR pvPaymntSuggLine@1100570001 : Record 11128065);
    VAR
      tPaymntSuggLine@1100570000 : TEMPORARY Record 11128065;
      PaymntSuggLine@1100570005 : Record 11128065;
      NegAmount@1100570002 : Decimal;
      PosAmount@1100570003 : Decimal;
      NextMergeNo@1100570006 : Integer;
      Selection@12047958 : Integer;
    BEGIN
      Selection := STRMENU(PEB027,1);
      IF Selection = 0 THEN
        EXIT;
      WITH pvPaymntSuggLine DO BEGIN
        // Radera eventuella kopplingar
        IF FINDFIRST THEN REPEAT
          tPaymntSuggLine.SETRANGE("Merging No.","Merging No.");
          IF (NOT tPaymntSuggLine.FINDFIRST) AND ("Merging No." <> 0) THEN BEGIN
            tPaymntSuggLine := pvPaymntSuggLine;
            tPaymntSuggLine.INSERT;
          END;
        UNTIL NEXT = 0;

        tPaymntSuggLine.RESET;
        IF tPaymntSuggLine.FINDSET THEN REPEAT
          DeMergePayments(tPaymntSuggLine);
        UNTIL tPaymntSuggLine.NEXT = 0;

        tPaymntSuggLine.RESET;
        tPaymntSuggLine.DELETEALL;
        SETCURRENTKEY("No.","Currency Code","Remaining Amount");
        IF FINDFIRST THEN REPEAT
          SETRANGE("No.","No.");
          SETRANGE("Currency Code","Currency Code");
          IF FINDFIRST THEN REPEAT
            IF "Remaining Amount" < 0 THEN
              NegAmount += ABS("Remaining Amount")
            ELSE
              PosAmount += "Remaining Amount";

            tPaymntSuggLine := pvPaymntSuggLine;
            tPaymntSuggLine.INSERT;

            IF ((Selection = 1 ) AND (PosAmount > NegAmount)) OR
               ((Selection = 2 ) AND (PosAmount > NegAmount) AND (NegAmount > 0)) THEN BEGIN
              tPaymntSuggLine.RESET;
              PosAmount := 0;
              NegAmount := 0;
              IF tPaymntSuggLine.FINDSET THEN BEGIN
                NextMergeNo += 1;
                REPEAT
                  PaymntSuggLine.GET(tPaymntSuggLine."Giro Type Code",tPaymntSuggLine."Line No.");
                  PaymntSuggLine."Merging No." := NextMergeNo;
                  PaymntSuggLine.MODIFY;
                UNTIL tPaymntSuggLine.NEXT = 0;
              END;
            END;
          UNTIL NEXT = 0;
          FINDLAST;
          SETRANGE("No.");
          SETRANGE("Currency Code");
          tPaymntSuggLine.RESET;
          tPaymntSuggLine.DELETEALL;
          PosAmount := 0;
          NegAmount := 0;
        UNTIL NEXT = 0;
        SETRANGE("No.");
        SETRANGE("Currency Code");
        FINDFIRST;
      END;
    END;

    PROCEDURE GetPaymentEntries@12047963(VAR pvVPPackEntry@12047959 : Record 11128063;VAR pvtLedgerEntryPayment@12047958 : TEMPORARY Record 11128074;VAR pvtLedgerEntry@12047961 : TEMPORARY Record 11128074;pMergeAllowed@12047966 : Boolean;pCustomerAllowed@12047967 : Boolean) : Boolean;
    VAR
      VendLedgerEntry@12047960 : Record 25;
      tMergingHeader@12047962 : TEMPORARY Record 2000000026;
      CustLedgerEntry@12047963 : Record 21;
      Vendor@12047964 : Record 23;
      Customer@12047965 : Record 18;
      lGeneralLedgerSetup@1101285000 : Record 98;
    BEGIN
      IF NOT pvVPPackEntry.FINDSET THEN
        EXIT(FALSE);

      lGeneralLedgerSetup.GET;

      REPEAT
        CASE pvVPPackEntry.Type OF
          pvVPPackEntry.Type::Vendor:
            BEGIN
              VendLedgerEntry.GET(pvVPPackEntry."Ledger Entry No.");  // Get Vendor Leadger Entry
              pvtLedgerEntry."Entry No." := VendLedgerEntry."Entry No.";
              pvtLedgerEntry.Type := pvVPPackEntry.Type;
              pvtLedgerEntry."No." := VendLedgerEntry."Vendor No.";
              pvtLedgerEntry."Posting Date" := VendLedgerEntry."Posting Date";
              pvtLedgerEntry."Document Type" := VendLedgerEntry."Document Type";
              pvtLedgerEntry."Document No." := VendLedgerEntry."Document No.";
              pvtLedgerEntry."Currency Code" := GetPayToCurrencyCode(VendLedgerEntry."Currency Code");
              pvtLedgerEntry."Remaining Amount" := CalcVendAmountToPay(VendLedgerEntry);
              pvtLedgerEntry."Remaining Amt. (LCY)" := CalcVendAmountToPayLCY(VendLedgerEntry);
              pvtLedgerEntry.Open := VendLedgerEntry.Open;
              pvtLedgerEntry."Due Date" := VendLedgerEntry."Due Date";
              pvtLedgerEntry."External Document No." := VendLedgerEntry."External Document No.";
              pvtLedgerEntry."Merging No." := pvVPPackEntry."Merging No.";
              pvtLedgerEntry."Bank Account Code" := pvVPPackEntry."Bank Account Code";
              pvtLedgerEntry."Code for Bank of Sweden" := pvVPPackEntry."Code for Bank of Sweden";
              pvtLedgerEntry."OCR No." :=  VendLedgerEntry."OCR No.";

      //<<RFC155
              IF lGeneralLedgerSetup."Norwegian Localization Active" THEN BEGIN
                pvtLedgerEntry."OCR No." := VendLedgerEntry.KID;
                pvtLedgerEntry."Code for Bank of Sweden" := VendLedgerEntry."Payment Type Code Abroad";
                //VendLedgerEntry."Specification (Norges Bank)"
              END;
      //<<RFC155
      //>>RFC148
              IF pvtLedgerEntry."OCR No." = '' THEN
                pvtLedgerEntry."OCR No." := COPYSTR(VendLedgerEntry."Payment Reference",1,MAXSTRLEN(pvtLedgerEntry."OCR No."));
      //<<RFC148

              Vendor.GET(pvtLedgerEntry."No.");
              pvtLedgerEntry.Name := Vendor.Name;
              pvtLedgerEntry.Address := Vendor.Address;
              pvtLedgerEntry."Address 2" := Vendor."Address 2";
              pvtLedgerEntry."Post Code" := Vendor."Post Code";
              pvtLedgerEntry.City := Vendor.City;

              pvtLedgerEntry.INSERT;
              IF pvtLedgerEntry."Merging No." <> 0 THEN BEGIN
                IF NOT pMergeAllowed THEN
                  ERROR(PEB022);
                tMergingHeader.INIT;
                tMergingHeader.Number := pvtLedgerEntry."Merging No.";
                IF tMergingHeader.INSERT THEN;
              END ELSE BEGIN
                pvtLedgerEntryPayment := pvtLedgerEntry;
                pvtLedgerEntryPayment.INSERT;
              END;
            END;
          pvVPPackEntry.Type::Customer:
            BEGIN
              IF NOT pCustomerAllowed THEN
                ERROR(PEB023);
              IF pvtLedgerEntry."Merging No." <> 0 THEN
                ERROR(PEB022);

              CustLedgerEntry.GET(pvVPPackEntry."Ledger Entry No.");  // Get Customer Leadger Entry
              pvtLedgerEntry."Entry No." := CustLedgerEntry."Entry No.";
              pvtLedgerEntry.Type := pvVPPackEntry.Type;
              pvtLedgerEntry."No." := CustLedgerEntry."Customer No.";
              pvtLedgerEntry."Posting Date" := CustLedgerEntry."Posting Date";
              pvtLedgerEntry."Document Type" := CustLedgerEntry."Document Type";
              pvtLedgerEntry."Document No." := CustLedgerEntry."Document No.";
              pvtLedgerEntry."Currency Code" := GetPayToCurrencyCode(CustLedgerEntry."Currency Code");
              pvtLedgerEntry."Remaining Amount" := CalcCustAmountToPay(CustLedgerEntry);
              pvtLedgerEntry."Remaining Amt. (LCY)" := CalcCustAmountToPayLCY(CustLedgerEntry);
              pvtLedgerEntry.Open := CustLedgerEntry.Open;
              pvtLedgerEntry."Due Date" := CustLedgerEntry."Due Date";
              pvtLedgerEntry."External Document No." := CustLedgerEntry."External Document No.";
              pvtLedgerEntry."Merging No." := pvVPPackEntry."Merging No.";
              pvtLedgerEntry."Bank Account Code" := pvVPPackEntry."Bank Account Code";
              pvtLedgerEntry."Code for Bank of Sweden" := pvVPPackEntry."Code for Bank of Sweden";

              Customer.GET(pvtLedgerEntry."No.");
              pvtLedgerEntry.Name := Customer.Name;
              pvtLedgerEntry.Address := Customer.Address;
              pvtLedgerEntry."Address 2" := Customer."Address 2";
              pvtLedgerEntry."Post Code" := Customer."Post Code";
              pvtLedgerEntry.City := Customer.City;
              pvtLedgerEntry.INSERT;

              pvtLedgerEntryPayment := pvtLedgerEntry;
              pvtLedgerEntryPayment.INSERT;
            END;
              ELSE
                ERROR('%1 is not supported',pvVPPackEntry.Type);
        END;
      UNTIL pvVPPackEntry.NEXT = 0;

      IF pvtLedgerEntry.COUNT = 0 THEN
        EXIT(FALSE);

      // Merging Entries
      tMergingHeader.RESET;
      IF tMergingHeader.FINDSET THEN REPEAT
        pvtLedgerEntry.RESET;
        pvtLedgerEntry.SETRANGE("Merging No.",tMergingHeader.Number);
        pvtLedgerEntry.FINDSET;

        pvtLedgerEntryPayment := pvtLedgerEntry;
        pvtLedgerEntryPayment."Remaining Amount" := 0;
        pvtLedgerEntryPayment."Remaining Amt. (LCY)" := 0;
        REPEAT
          IF pvtLedgerEntryPayment."Due Date" <> pvtLedgerEntry."Due Date" THEN
            ERROR(PEB026,pvtLedgerEntry.FIELDCAPTION("Merging No."),pvtLedgerEntry."Merging No.",pvtLedgerEntry.FIELDCAPTION("Due Date"));

          IF pvtLedgerEntryPayment."Currency Code" <> pvtLedgerEntry."Currency Code" THEN
            ERROR(PEB026,pvtLedgerEntry.FIELDCAPTION("Merging No."),pvtLedgerEntry."Merging No.",pvtLedgerEntry.FIELDCAPTION("Currency Code"));

          IF NOT ((pvtLedgerEntryPayment.Type = pvtLedgerEntry.Type) AND (pvtLedgerEntryPayment."No." = pvtLedgerEntry."No.")) THEN
            ERROR(PEB021,tMergingHeader.Number,Vendor.TABLECAPTION);
          pvtLedgerEntryPayment."Remaining Amount" += pvtLedgerEntry."Remaining Amount";
          pvtLedgerEntryPayment."Remaining Amt. (LCY)" += pvtLedgerEntry."Remaining Amt. (LCY)";
        UNTIL pvtLedgerEntry.NEXT = 0;
        pvtLedgerEntryPayment.INSERT;
      UNTIL tMergingHeader.NEXT = 0;

      EXIT(TRUE);
    END;

    PROCEDURE FillTempPackEntry@12047964(VAR pvtPackEntry@12047958 : TEMPORARY Record 11128063);
    VAR
      PackEntry@12047959 : Record 11128063;
      CustLedgerEntry@12047960 : Record 21;
      Customer@12047963 : Record 18;
      VendorLedgerEntry@12047961 : Record 25;
      Vendor@12047962 : Record 23;
    BEGIN
      PackEntry.COPYFILTERS(pvtPackEntry);
      IF NOT PackEntry.FINDSET THEN
        EXIT;

      pvtPackEntry.RESET;
      pvtPackEntry.DELETEALL;

      REPEAT
        pvtPackEntry := PackEntry;
        CASE PackEntry.Type OF
          PackEntry.Type::Vendor:
            BEGIN
              VendorLedgerEntry.GET(PackEntry."Ledger Entry No.");
              Vendor.GET(VendorLedgerEntry."Vendor No.");
              pvtPackEntry.Name := Vendor.Name;
              pvtPackEntry."Document No." := VendorLedgerEntry."Document No.";
              pvtPackEntry.Open := VendorLedgerEntry.Open;
              pvtPackEntry."Due Date" := VendorLedgerEntry."Due Date";
              pvtPackEntry."External Document No." := VendorLedgerEntry."External Document No.";
              VendorLedgerEntry.CALCFIELDS(Amount,"Remaining Amount");
              pvtPackEntry.Amount := VendorLedgerEntry.Amount;
              pvtPackEntry."Remaining Amount" := VendorLedgerEntry."Remaining Amount";
            END;
          PackEntry.Type::Customer:
            BEGIN
              CustLedgerEntry.GET(PackEntry."Ledger Entry No.");
              Customer.GET(CustLedgerEntry."Customer No.");
              pvtPackEntry.Name := Customer.Name;
              pvtPackEntry."Document No." := CustLedgerEntry."Document No.";
              pvtPackEntry.Open := CustLedgerEntry.Open;
              pvtPackEntry."Due Date" := CustLedgerEntry."Due Date";
              pvtPackEntry."External Document No." := CustLedgerEntry."External Document No.";
              CustLedgerEntry.CALCFIELDS(Amount,"Remaining Amount");
              pvtPackEntry.Amount := CustLedgerEntry.Amount;
              pvtPackEntry."Remaining Amount" := CustLedgerEntry."Remaining Amount";
            END;
          ELSE
            ERROR('Type "%1" stîds ej', PackEntry.Type);
        END;

        pvtPackEntry.INSERT;
      UNTIL PackEntry.NEXT = 0;

      pvtPackEntry.FINDFIRST;
    END;

    PROCEDURE CheckCustomerPaymentAllowed@12047965(pPack@12047959 : Record 11128079;pVPPackEntry@12047958 : Record 11128063);
    VAR
      GiroType@12047960 : Record 11128061;
    BEGIN
      GiroType.GET(pPack."Giro Type Code");
      IF pVPPackEntry.Type = pVPPackEntry.Type::Vendor THEN
        EXIT;

      ERROR(PEB024,GiroType."Codeunit No.",GetCodeUnitCaption(GiroType."Codeunit No."));
    END;

    PROCEDURE SetGiroType@12047966(pGiroType@12047958 : Record 11128061);
    BEGIN
      gGiroType := pGiroType;
    END;

    PROCEDURE GetLCYCode@12047969() : Code[10];
    BEGIN
      GetSetup;
      IF gGiroType.Code = '' THEN
        ERROR('gGiroType is not set in CU11128061 "VP Management"');
      IF gGiroType."Currency Code" = '' THEN
        EXIT(gGeneralLedgerSetup."LCY Code")
      ELSE
        EXIT(gGiroType."Currency Code");
    END;

    PROCEDURE DayIsBankHoliday@12047972(pDate@1100570000 : Date) : Boolean;
    BEGIN
      IF pDate = 0D THEN
        EXIT(FALSE);
      CASE TRUE OF
        (DATE2DWY(pDate,1) = 6) OR (DATE2DWY(pDate,1) = 7) : EXIT(TRUE);  // Saturday or Sunday
        (DATE2DMY(pDate,1) = 1) AND (DATE2DMY(pDate,2) = 1) : EXIT(TRUE); // New Year's Day
        (DATE2DMY(pDate,1) = 1) AND (DATE2DMY(pDate,2) = 5) : EXIT(TRUE); // Walpurgis, Fisrt of May
        (DATE2DMY(pDate,1) = 6) AND (DATE2DMY(pDate,2) = 6) : EXIT(TRUE); // National Day
        (DATE2DMY(pDate,1) = 24) AND (DATE2DMY(pDate,2) = 12) : EXIT(TRUE); // Christmas Eve
        (DATE2DMY(pDate,1) = 25) AND (DATE2DMY(pDate,2) = 12) : EXIT(TRUE); // Christmas Day
        (DATE2DMY(pDate,1) = 26) AND (DATE2DMY(pDate,2) = 12) : EXIT(TRUE); // Boxing Day
        (DATE2DMY(pDate,1) = 31) AND (DATE2DMY(pDate,2) = 12) : EXIT(TRUE); // New Year's Eve
        (GetEasterSunday(DATE2DMY(pDate,3)) - 2 = pDate) : EXIT(TRUE); // Good Friday
        (GetEasterSunday(DATE2DMY(pDate,3)) + 1 = pDate) : EXIT(TRUE); // Easter Monday
        (GetEasterSunday(DATE2DMY(pDate,3)) + 39 = pDate) : EXIT(TRUE); // Ascension
        IsMidsummerEve(pDate) : EXIT(TRUE); // Midsummer
        ELSE
          EXIT(FALSE);
      END;
    END;

    PROCEDURE GetEasterSunday@12047971(pCalendarYear@1100570000 : Integer) : Date;
    VAR
      jh@1100570001 : Integer;
      j@1100570002 : Integer;
      a@1100570003 : Integer;
      b@1100570004 : Integer;
      c@1100570005 : Integer;
      p@1100570006 : Integer;
      q@1100570007 : Integer;
      d@1100570008 : Integer;
      e@1100570009 : Integer;
      k@1100570010 : Integer;
    BEGIN
      jh := pCalendarYear DIV 100;
      j := pCalendarYear MOD 100;
      a := pCalendarYear MOD 19;
      b := pCalendarYear MOD 4;
      c := pCalendarYear MOD 7;
      p := (15 + jh - jh DIV 3 - jh DIV 4) MOD 30;
      q := (jh - jh DIV 4 + 4) MOD 7;
      d := (19 * a + p) MOD 30;
      e := (2 * b + 4 * c + 6 * d + q) MOD 7;
      IF (d = 29) AND (e = 6) THEN
        k := 50 ELSE
      IF (d = 28) AND (e = 6) AND (a > 10) THEN
        k := 49
      ELSE
        k := 22 + d + e;
      IF k <= 31 THEN
        EXIT(DMY2DATE(k,3,100 * jh + j))
      ELSE
        EXIT(DMY2DATE(k-31,4,100 * jh + j));
    END;

    PROCEDURE IsMidsummerEve@12047970(pDate@1100570000 : Date) : Boolean;
    BEGIN
      CASE TRUE OF
        (DATE2DWY(pDate,1) <> 5) : EXIT(FALSE); // Not Friday
        (DATE2DMY(pDate,2) <> 6) : EXIT(FALSE); // Not June
        (DATE2DMY(pDate,1) < 19) : EXIT(FALSE); // Before 19:e
        (DATE2DMY(pDate,1) > 25) : EXIT(FALSE); // After 25:e
        ELSE
          EXIT(TRUE);
      END;
    END;

    PROCEDURE GetInitalDueDateFromVPSuggestionLine@12047973(pPaymentSuggLine@12047958 : Record 11128065) : Date;
    VAR
      CustLedgerEntry@12047959 : Record 21;
      VendLedgerEntry@12047960 : Record 25;
    BEGIN
      WITH pPaymentSuggLine DO BEGIN
        IF "Ledger Entry No." = 0 THEN
          EXIT(0D);
        CASE Type OF
          Type::Customer:
           BEGIN
             CustLedgerEntry.GET("Ledger Entry No.");
             EXIT(GetCustomerInitialDueDate(CustLedgerEntry));
           END;
          Type::Vendor:
           BEGIN
             VendLedgerEntry.GET("Ledger Entry No.");
             EXIT(GetVendorInitialDueDate(VendLedgerEntry));
           END;
        END;
        EXIT(0D);
      END;
    END;

    PROCEDURE GetVendorInitialDueDate@1000000028(pVendorLedgerEntry@1000000000 : Record 25) : Date;
    VAR
      PurchInvHeader@1000000004 : Record 122;
      PurchCrMemoHdr@1000000005 : Record 124;
    BEGIN
      // PEB0074
      CASE pVendorLedgerEntry."Document Type" OF
        pVendorLedgerEntry."Document Type"::Invoice:
          BEGIN
            WITH PurchInvHeader DO BEGIN
              IF GET(pVendorLedgerEntry."Document No.") THEN BEGIN
                EXIT("Due Date");
              END ELSE
                EXIT(pVendorLedgerEntry."Due Date");
            END;
          END;
        pVendorLedgerEntry."Document Type"::"Credit Memo":
          BEGIN
            WITH PurchCrMemoHdr DO BEGIN
              IF GET(pVendorLedgerEntry."Document No.") THEN BEGIN
                EXIT("Due Date");
              END ELSE
                EXIT(pVendorLedgerEntry."Due Date");
            END;
          END;
        ELSE
          EXIT(pVendorLedgerEntry."Due Date");
      END;
      // 0074
    END;

    PROCEDURE GetCustomerInitialDueDate@1000000029(pCustLedgerEntry@1000000000 : Record 21) : Date;
    VAR
      SalesInvoiceHeader@1000000004 : Record 112;
      SalesCrMemoHeader@1000000005 : Record 114;
    BEGIN
      // PEB0074
      CASE pCustLedgerEntry."Document Type" OF
        pCustLedgerEntry."Document Type"::Invoice:
          BEGIN
            WITH SalesInvoiceHeader DO BEGIN
              IF GET(pCustLedgerEntry."Document No.") THEN BEGIN
                EXIT("Due Date");
              END ELSE
                EXIT(pCustLedgerEntry."Due Date");
            END;
          END;
        pCustLedgerEntry."Document Type"::"Credit Memo":
          BEGIN
            WITH SalesCrMemoHeader DO BEGIN
              IF GET(pCustLedgerEntry."Document No.") THEN BEGIN
                EXIT("Due Date");
              END ELSE
                EXIT(pCustLedgerEntry."Due Date");
            END;
          END;
        ELSE
          EXIT(pCustLedgerEntry."Due Date");
      END;
      // 0074
    END;

    PROCEDURE T81_GetDescription@1100570019(VAR pvGenJournalLine@1100570000 : Record 81);
    VAR
      CustLedgEntry@1100570001 : Record 21;
      PEB011@1100570009 : TextConst 'ENU=%1 %2 allowance customer;NOR=%1 %2 avdrag kunde;SVE=%1 %2 avdrag kund';
      PEB012@1100570004 : TextConst 'ENU=%1 %2 payment vendor;SVE=%1 %2 betalning lev.';
      PEB013@1100570007 : TextConst 'ENU=%1 %2 Customer Payment;NOR=%1 %2 innbetaling kunde;SVE=%1 %2 inbetalning kund';
      PEB014@1100570006 : TextConst 'ENU=%1 %2 allowance vendor;SVE=%1 %2 avdrag lev.';
      VendLedgEntry@1100570014 : Record 25;
    BEGIN
      // T81
      WITH pvGenJournalLine DO BEGIN
        IF Amount > 0 THEN BEGIN
          IF "Account Type" = "Account Type"::Customer THEN
            Description := STRSUBSTNO(PEB011,"Applies-to Doc. No.",CustLedgEntry."Document Type");
          IF "Account Type" = "Account Type"::Vendor THEN
            Description := STRSUBSTNO(PEB012,"Applies-to Doc. No.",VendLedgEntry."Document Type");
        END ELSE BEGIN
          IF "Account Type" = "Account Type"::Customer THEN
            Description := STRSUBSTNO(PEB013,"Applies-to Doc. No.",CustLedgEntry."Document Type");
          IF "Account Type" = "Account Type"::Vendor THEN
            Description := STRSUBSTNO(PEB014,"Applies-to Doc. No.",VendLedgEntry."Document Type");
        END;
      END;
    END;

    PROCEDURE CleanTxt@12047974(pText@1000000000 : Text) rText : Text;
    VAR
      i@1000000001 : Integer;
    BEGIN
      IF gNotAllowedChars = '' THEN BEGIN
        FOR i := 1 TO 31 DO
          gNotAllowedChars[i] := i;
      END;
      EXIT(DELCHR(pText, '=', gNotAllowedChars));
    END;

    PROCEDURE ClearNonNumeric@1000000004(pText@1000 : Text[1024]) : Text[1024];
    BEGIN
      EXIT(DELCHR(pText,'=',DELCHR(pText,'=','0123456789')));
    END;

    LOCAL PROCEDURE GetLastGLEntyNo@12047976() : Integer;
    VAR
      GLEntry@12047958 : Record 17;
    BEGIN
      GLEntry.FINDLAST;
      EXIT(GLEntry."Entry No.");
    END;

    PROCEDURE CheckSupportForDotNetComponents@12047977();
    VAR
      FileMgt@12047958 : Codeunit 419;
    BEGIN
      IF NOT FileMgt.CanRunDotNetOnClient THEN
        ERROR(PEB029);
    END;

    PROCEDURE SearchNameFromGiro@12047985(pVendBankAcc@1100570000 : Record 288);
    VAR
      Vendor@1100570001 : Record 23;
      VendBankAcc@1100570002 : Record 288;
      VPManagement@12047958 : Codeunit 11128061;
      PEB001@12047959 : TextConst 'ENU=%1 is not correct. For Vendor No. %2;SVE=%1 Ñr felaktigt. Fîr leverantîr %2';
    BEGIN
      GetSetup;
      gVPSetup.GET;
      WITH pVendBankAcc DO BEGIN
        IF ("Bank Giro No." <> '') AND gVPSetup."Check Giro Account" THEN
          IF NOT VPManagement.SumCheck10Control("Bank Giro No.") THEN
            ERROR(PEB001,FIELDCAPTION("Bank Giro No."),"Vendor No.");

        IF ("Plus Giro No." <> '') AND gVPSetup."Check Giro Account" THEN
          IF NOT VPManagement.SumCheck10Control("Plus Giro No.") THEN
            ERROR(PEB001,FIELDCAPTION("Plus Giro No."),"Vendor No.");
      END;

      IF NOT Vendor.GET(pVendBankAcc."Vendor No.") THEN
        EXIT;

      // If Giro is used on another rec it is blanked
      IF gVPSetup."Vendor Search Name" <> gVPSetup."Vendor Search Name"::Name THEN BEGIN
        VendBankAcc.RESET;
        VendBankAcc.SETRANGE("Vendor No.",pVendBankAcc."Vendor No.");
        VendBankAcc.SETFILTER(Code,'<>%1',pVendBankAcc.Code);
        IF VendBankAcc.FINDSET THEN REPEAT
          VendBankAcc."Bank Giro No." := '';
          VendBankAcc."Plus Giro No." := '';
          VendBankAcc.MODIFY;
        UNTIL VendBankAcc.NEXT = 0;
      END;

      WITH pVendBankAcc DO BEGIN
        CASE gVPSetup."Vendor Search Name" OF
          gVPSetup."Vendor Search Name"::"Plus Giro No.":
            BEGIN
              IF ("Plus Giro No." <> '') THEN
                Vendor."Search Name" := ClearNonNumeric("Plus Giro No.")
              ELSE
                IF ("Bank Giro No." <> '') THEN
                  Vendor."Search Name" := ClearNonNumeric("Bank Giro No.")
                ELSE
                  Vendor."Search Name" := Vendor.Name;
              Vendor.MODIFY;
            END;
          gVPSetup."Vendor Search Name"::"Bank Giro No.":
            BEGIN
              IF ("Bank Giro No." <> '') THEN
                Vendor."Search Name" := ClearNonNumeric("Bank Giro No.")
              ELSE
                IF ("Plus Giro No." <> '') THEN
                  Vendor."Search Name" := ClearNonNumeric("Plus Giro No.")
                ELSE
                  Vendor."Search Name" := Vendor.Name;
              Vendor.MODIFY;
            END;
        END;
      END;
    END;

    LOCAL PROCEDURE GetVendorNoByBankOrPlusGiro@12047986(VAR PurchaseHeader@12047958 : Record 38) : Boolean;
    VAR
      VendorBankAccount@12047960 : Record 288;
      SearchString@12047959 : Text;
      PEB001@12047961 : TextConst 'ENU=There is no %1 for %2 %3;SVE=Det finns inget %1 till %2 %3';
    BEGIN
      SearchString := PurchaseHeader."Buy-from Vendor Name";
      IF SearchString = '' THEN
        EXIT(FALSE);

      IF DELCHR(SearchString,'=','-0123456789') <> '' THEN
        EXIT(FALSE);

      IF STRLEN(DELCHR(SearchString,'=',DELCHR(SearchString,'=','-'))) <> 1 THEN
        EXIT(FALSE);

      // Plusgiro
      IF COPYSTR(SearchString,STRLEN(SearchString) - 1,1) = '-' THEN BEGIN
        VendorBankAccount.RESET;
        VendorBankAccount.SETRANGE("Plus Giro No.",SearchString);
        IF NOT VendorBankAccount.FINDFIRST THEN
          ERROR(PEB001,VendorBankAccount.TABLECAPTION,VendorBankAccount.FIELDCAPTION("Plus Giro No."),SearchString);
      END ELSE BEGIN
      // Bankgiro
        VendorBankAccount.RESET;
        VendorBankAccount.SETRANGE("Bank Giro No.",SearchString);
        IF NOT VendorBankAccount.FINDFIRST THEN
          ERROR(PEB001,VendorBankAccount.TABLECAPTION,VendorBankAccount.FIELDCAPTION("Bank Giro No."),SearchString);
      END;

      WITH PurchaseHeader DO BEGIN
        VALIDATE("Buy-from Vendor No.",VendorBankAccount."Vendor No.");

        // Number is better than Name to Next Function on "Pay-to Name" on Table 38 (It is uniquely)
        "Pay-to Name" := VendorBankAccount."Vendor No.";

        IF "Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo","Document Type"::Order] THEN
          VALIDATE("Recipient Bank Account",VendorBankAccount.Code);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE UpdateSearchNameFromVendors@12047988(VAR pvMiscSetup@12047960 : Record 11128066);
    VAR
      Vendor@1100570001 : Record 23;
      VendBankAcc@1100570002 : Record 288;
      DialogMgt@12047958 : Codeunit 11128076;
      i@12047959 : Integer;
    BEGIN
      pvMiscSetup.MODIFY;
      GetSetup;

      DialogMgt.Open('@1@@@@@@@@@@@@@@@');
      DialogMgt.InitProgressbar(1,Vendor.COUNT);
      IF Vendor.FINDSET THEN REPEAT
        DialogMgt.UpdateProgressbarValue(1,i);

        CLEAR(VendBankAcc);
        VendBankAcc.RESET;
        VendBankAcc.SETRANGE("Vendor No.",Vendor."No.");
          CASE gVPSetup."Vendor Search Name" OF
            gVPSetup."Vendor Search Name"::"Plus Giro No.":
              BEGIN
                VendBankAcc.SETFILTER("Bank Giro No.",'<>%1','');
                VendBankAcc.SETRANGE("Plus Giro No.");
                IF VendBankAcc.FINDFIRST THEN BEGIN
                  UpdateSearchNameForVendor(VendBankAcc,Vendor);
                  Vendor.MODIFY;
                END;

                VendBankAcc.SETFILTER("Plus Giro No.",'<>%1','');
                VendBankAcc.SETRANGE("Bank Giro No.");
                IF VendBankAcc.FINDFIRST THEN BEGIN
                  UpdateSearchNameForVendor(VendBankAcc,Vendor);
                  Vendor.MODIFY;
                END;
              END;
            gVPSetup."Vendor Search Name"::"Bank Giro No.":
              BEGIN
                VendBankAcc.SETFILTER("Plus Giro No.",'<>%1','');
                VendBankAcc.SETRANGE("Bank Giro No.");
                IF VendBankAcc.FINDFIRST THEN BEGIN
                  UpdateSearchNameForVendor(VendBankAcc,Vendor);
                  Vendor.MODIFY;
                END;

                VendBankAcc.SETFILTER("Bank Giro No.",'<>%1','');
                VendBankAcc.SETRANGE("Plus Giro No.");
                IF VendBankAcc.FINDFIRST THEN BEGIN
                  UpdateSearchNameForVendor(VendBankAcc,Vendor);
                  Vendor.MODIFY;
                END;
              END;
            gVPSetup."Vendor Search Name"::Name:
              BEGIN
                CLEAR(VendBankAcc);
              END;
          END;
          // If there is no Bank Account for Vendor ("Vendor Search Name" = Name)
          IF VendBankAcc.Code = '' THEN BEGIN
              UpdateSearchNameForVendor(VendBankAcc,Vendor);
              Vendor.MODIFY;
          END;

      UNTIL Vendor.NEXT = 0;
      DialogMgt.Close;
    END;

    LOCAL PROCEDURE UpdateSearchNameForVendor@12047987(VAR pvVendBankAcc@12047958 : Record 288;VAR pvVendor@12047959 : Record 23);
    BEGIN
      GetSetup;
      WITH pvVendBankAcc DO BEGIN
        CASE gVPSetup."Vendor Search Name" OF
          gVPSetup."Vendor Search Name"::"Plus Giro No.":
            BEGIN
              IF ("Plus Giro No." <> '') THEN
                pvVendor."Search Name" := ClearNonNumeric("Plus Giro No.")
              ELSE
                IF ("Bank Giro No." <> '') THEN
                  pvVendor."Search Name" := ClearNonNumeric("Bank Giro No.")
                ELSE
                  pvVendor."Search Name" := pvVendor.Name;
            END;
          gVPSetup."Vendor Search Name"::"Bank Giro No.":
            BEGIN
              IF ("Bank Giro No." <> '') THEN
                pvVendor."Search Name" := ClearNonNumeric("Bank Giro No.")
              ELSE
                IF ("Plus Giro No." <> '') THEN
                  pvVendor."Search Name" := ClearNonNumeric("Plus Giro No.")
                ELSE
                  pvVendor."Search Name" := pvVendor.Name;
            END;
          gVPSetup."Vendor Search Name"::Name:
            BEGIN
              pvVendor."Search Name" := pvVendor.Name;
            END;
        END;
      END;
    END;

    [EventSubscriber(Codeunit,90,OnBeforePostVendorEntry)]
    LOCAL PROCEDURE C90_BeforePostVendorEntry@1100570004(VAR GenJnlLine@1100570000 : Record 81;VAR PurchHeader@1100570001 : Record 38;VAR TotalPurchLine@1100570002 : Record 39;VAR TotalPurchLineLCY@1100570003 : Record 39);
    BEGIN
      GenJnlLine."OCR No." := PurchHeader."OCR No.";
      GenJnlLine."Recipient Bank Account" := PurchHeader."Recipient Bank Account";
    END;

    LOCAL PROCEDURE C103_OnBeforeCustLedgEntryModify@12047981(VAR CustLedgEntry@12047958 : Record 21;FromCustLedgEntry@12047959 : Record 21);
    BEGIN
      CustLedgEntry."Auto Giro Journal No." := FromCustLedgEntry."Auto Giro Journal No.";
    END;

    LOCAL PROCEDURE C113_OnBeforeVendLedgEntryModify@12047979(VAR VendLedgEntry@12047958 : Record 25;FromVendLedgEntry@12047959 : Record 25);
    BEGIN
      VendLedgEntry."OCR No." := FromVendLedgEntry."OCR No.";
    END;

    [EventSubscriber(Table,21,OnBeforeModifyEvent)]
    PROCEDURE T21_OnBeforeModifyEvent@12047975(VAR Rec@12047959 : Record 21;VAR xRec@12047960 : Record 21;RunTrigger@12047961 : Boolean);
    VAR
      VPPackEntry@12047958 : Record 11128063;
    BEGIN
      IF Rec.ISTEMPORARY THEN
        EXIT;

      IF NOT Rec.Open THEN BEGIN
        Rec."Auto Giro Journal No." := 0;

        Rec."VP Pack No." := 0;
        VPPackEntry.SETRANGE(Type, VPPackEntry.Type::Customer);
        VPPackEntry.SETRANGE("Ledger Entry No.",Rec."Entry No.");
        VPPackEntry.SETFILTER(Status,'<>%1',VPPackEntry.Status::Closed);  //4PSSE, performance
        IF VPPackEntry.FINDSET THEN REPEAT
          VPPackEntry.Status := VPPackEntry.Status::Closed;
          VPPackEntry.MODIFY;
        UNTIL VPPackEntry.NEXT = 0;
      END;
    END;

    [EventSubscriber(Table,25,OnAfterCopyVendLedgerEntryFromGenJnlLine)]
    LOCAL PROCEDURE T25_OnAfterCopyVendLedgerEntryFromGenJnlLine@12047980(VAR VendorLedgerEntry@12047958 : Record 25;GenJournalLine@12047959 : Record 81);
    BEGIN
      VendorLedgerEntry."OCR No." := GenJournalLine."OCR No.";
    END;

    [EventSubscriber(Table,25,OnBeforeModifyEvent)]
    PROCEDURE T25_OnBeforeModifyEvent@1100570000(VAR Rec@12047959 : Record 25;VAR xRec@12047960 : Record 25;RunTrigger@12047961 : Boolean);
    VAR
      VPPackEntry@12047958 : Record 11128063;
    BEGIN
      IF Rec.ISTEMPORARY THEN
        EXIT;

      IF NOT Rec.Open THEN BEGIN
        Rec."VP Pack No." := 0;

        VPPackEntry.SETRANGE(Type, VPPackEntry.Type::Vendor);
        VPPackEntry.SETRANGE("Ledger Entry No.",Rec."Entry No.");
        VPPackEntry.SETFILTER(Status,'<>%1',VPPackEntry.Status::Closed);  //4PSSE, performance
        IF VPPackEntry.FINDSET THEN REPEAT
          VPPackEntry.Status := VPPackEntry.Status::Closed;
          VPPackEntry.MODIFY;
        UNTIL VPPackEntry.NEXT = 0;
      END;
    END;

    [EventSubscriber(Table,38,OnBeforeValidateEvent,"Buy-from Vendor Name")]
    LOCAL PROCEDURE T38_OnBeforeValidateEventBuyfromVendorName@12047994(VAR Rec@12047958 : Record 38;VAR xRec@12047959 : Record 38;CurrFieldNo@12047960 : Integer);
    BEGIN
      GetVendorNoByBankOrPlusGiro(Rec);
    END;

    [EventSubscriber(Table,287,OnBeforeValidateEvent,"Plus Giro No.")]
    LOCAL PROCEDURE T287_OnBeforeValidateEventPlusGiroNo@12047978(VAR Rec@12047958 : Record 287;VAR xRec@12047959 : Record 287;CurrFieldNo@12047960 : Integer);
    VAR
      VPSetup@12047962 : Record 11128066;
      PEB001@12047963 : TextConst 'ENU=%1 is not correct. For Customer No. %2;SVE=%1 Ñr felaktigt. Fîr kund %2';
    BEGIN
      VPSetup.GET;
      IF (Rec."Plus Giro No." <> '') AND VPSetup."Check Giro Account" THEN
        IF NOT SumCheck10Control(Rec."Plus Giro No.") THEN
          ERROR(PEB001,Rec.FIELDCAPTION("Plus Giro No."),Rec."Customer No.");
    END;

    [EventSubscriber(Table,287,OnBeforeValidateEvent,"Bank Account No.")]
    LOCAL PROCEDURE T287_OnBeforeValidateEventBankAccountNo@12047984(VAR Rec@12047960 : Record 287;VAR xRec@12047961 : Record 287;CurrFieldNo@12047962 : Integer);
    VAR
      VPSetup@12047958 : Record 11128066;
      PEB001@12047959 : TextConst 'ENU=%1 is not correct. For Customer No. %2;SVE=%1 Ñr felaktigt. Fîr kund %2';
    BEGIN
      VPSetup.GET;
      IF (Rec."Bank Giro No." <> '') AND VPSetup."Check Giro Account" THEN
        IF NOT SumCheck10Control(Rec."Bank Giro No.") THEN
          ERROR(PEB001,Rec.FIELDCAPTION("Bank Giro No."),Rec."Customer No.");
    END;

    [EventSubscriber(Table,287,OnBeforeValidateEvent,"Account Payment with Advising")]
    LOCAL PROCEDURE T287_OnBeforeValidateEventAccountPaymentwithAdvising@12047990(VAR Rec@12047958 : Record 287;VAR xRec@12047959 : Record 287;CurrFieldNo@12047960 : Integer);
    VAR
      Customer@12047961 : Record 18;
    BEGIN
      IF Rec."Account Payment with Advising" THEN BEGIN
        Customer.GET(Rec."Customer No.");
        Customer.TESTFIELD(Name);
        Customer.TESTFIELD(City);
        Customer.TESTFIELD("Post Code");
      END;
    END;

    [EventSubscriber(Table,288,OnBeforeValidateEvent,"Bank Giro No.")]
    LOCAL PROCEDURE T288_OnBeforeValidateEventBankGiroNo@12047983(VAR Rec@12047958 : Record 288;VAR xRec@12047959 : Record 288;CurrFieldNo@12047960 : Integer);
    BEGIN

      SearchNameFromGiro(Rec);
    END;

    [EventSubscriber(Table,288,OnBeforeValidateEvent,"Plus Giro No.")]
    LOCAL PROCEDURE T288_OnBeforeValidateEventPlusGiroNo@12047982(VAR Rec@12047958 : Record 288;VAR xRec@12047959 : Record 288;CurrFieldNo@12047960 : Integer);
    BEGIN
      SearchNameFromGiro(Rec);
    END;

    [EventSubscriber(Table,288,OnBeforeValidateEvent,"Account Payment with Advising")]
    LOCAL PROCEDURE T288_OnBeforeValidateEventAccountPaymentwithAdvising@12047989(VAR Rec@12047958 : Record 288;VAR xRec@12047959 : Record 288;CurrFieldNo@12047960 : Integer);
    VAR
      Vendor@12047961 : Record 23;
    BEGIN
      IF Rec."Account Payment with Advising" THEN BEGIN
        Vendor.GET(Rec."Vendor No.");
        Vendor.TESTFIELD(Name);
        Vendor.TESTFIELD(City);
        Vendor.TESTFIELD("Post Code");
      END;
    END;

    BEGIN
    {
      190212 ORANGO.DL part upgrade to PE8.08
      160929 ITERO.DL RFC155 The new file format (pain001) for supplier payments does not support Norwegian requirements
      160929 ITERO.DL RFC148 handle Payment Reference for more countries
      181011 ORANGO.EE RFC1078
      190627 ORANGO.DL #24730 upgrade to 8.11 after bug found
    }
    END.
  }
}

