OBJECT Codeunit 11012230 Estimate Buffer Mgt
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Gap@1100485015 : Integer;
      MarkedLines@1100485014 : Integer;
      CurrLino@1100485013 : Integer;
      PrevLino@1100485012 : Integer;
      gvEst@1100485011 : Code[20];
      gvSubEst@1100485010 : Code[20];
      gvPartGrp@1100485009 : Code[20];
      gvPart@1100485008 : Code[20];
      gvEstLine@1100485007 : Integer;
      gvRcpGrp@1100485006 : Code[20];
      gvRcp@1100485005 : Code[20];
      gvRcpLine@1100485004 : Integer;
      Text001@1100485016 : TextConst 'DEU=%1 Zeilen kopiert;ENU=%1 Lines copied;NLD=%1 regels gekopieerd;NOR=%1 rader er kopiert;SVE=%1 rader har kopierats';
      gvDest@1100485001 : Integer;
      Text002@1100525000 : TextConst 'DEU=Markieren Sie zuerst die Datens„tze mit Ctrl+F1;ENU=First select line(s).;NLD=Selecteer eerst regel(s).;NOR=Velg rad(er) f›rst.;SVE=V„lj f”rst rad(er).';
      gvSalesDocType@1100525001 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order,Invoice Proposal';
      gvSalesDocno@1100525002 : Code[20];
      gvSalesline@1100525003 : Integer;
      Text003@1100528900 : TextConst 'DEU=Nur Austausch zwischen Standardteilen zul„ssig.;ENU=Only exchange between standard parts allowed.;NLD=Alleen uitwisseling tussen standaard onderdelen toegestaan.';
      SelectMarkedLines@1100528502 : Boolean;
      SelectDestination@1100528501 : Boolean;
      ApplySort@1100528901 : Boolean;
      CopyPriceAgreement@1100528500 : Boolean;

    PROCEDURE CopyToBuffer@1210190005(lvAction@1100485002 : Integer;VAR EstLineRec@1100485000 : Record 11072072;VAR EstRcpLineRec@1100485003 : Record 11072075;VAR PartLineRec@1100485005 : Record 11072076;VAR BaseRcpLineRec@1100528900 : Record 11020582;VAR SalesRcpLineRec@1100525001 : Record 11229789);
    VAR
      lvEstLineRec@1100485001 : Record 11072072;
      lvEstRcpLineRec@1100485004 : Record 11072075;
      lvPartLineRec@1100485007 : Record 11072076;
      lvBaseRcpLineRec@1100528901 : Record 11020582;
      lvSalesRcpLineRec@1100525000 : Record 11229789;
      BufferRec@1100485006 : Record 11012195;
    BEGIN
      IF lvAction = 0 THEN BEGIN
        lvEstLineRec.COPY(EstLineRec);
        WITH lvEstLineRec DO BEGIN
          IF NOT FINDSET THEN BEGIN
            MESSAGE(Text002);
          END ELSE BEGIN
            REPEAT
              BufferRec.INIT;
              BufferRec."User ID" := USERID;
              BufferRec."Estimate No." := "Estimate No.";
              BufferRec."Sub-Estimate No." := "Sub-Estimate No.";
              BufferRec."Part Group" := "Part Group";
              BufferRec.Part := Part;
              BufferRec."Estimate Line" := "Line No.";
              BufferRec.Description := Description;
              BufferRec."Recipe Group" := "Recipe Group";
              BufferRec.Recipe := Recipe;
              BufferRec.FillDateTimeCreated;  //DP01931
              IF BufferRec.INSERT THEN BEGIN
                BufferRec.Description := Description;
                BufferRec.MODIFY;
              END;
            UNTIL NEXT = 0;
          END;
        END;
        EstLineRec.CLEARMARKS;
      END;

      IF lvAction = 1 THEN BEGIN
        lvEstRcpLineRec.COPY(EstRcpLineRec);
        WITH lvEstRcpLineRec DO BEGIN
          IF NOT FINDSET THEN BEGIN
            MESSAGE(Text002);
          END ELSE BEGIN
            REPEAT
              BufferRec.INIT;
              BufferRec."User ID" := USERID;
              BufferRec."Estimate No." := "Estimate No.";
              BufferRec."Sub-Estimate No." := "Sub-Estimate No.";
              BufferRec."Part Group" := "Part Group";
              BufferRec.Part := Part;
              BufferRec."Estimate Line" := "Estimate Line";
              BufferRec.Description := Description;
              BufferRec."Recipe Group" := "Recipe Group";
              BufferRec.Recipe := Recipe;
              BufferRec."Recipe Line" := "Line No.";
              BufferRec.FillDateTimeCreated;  //DP01931
              IF BufferRec.INSERT THEN BEGIN
                BufferRec.Description := Description;
                BufferRec.MODIFY;
              END;
            UNTIL NEXT = 0;
          END;
        END;
        EstRcpLineRec.CLEARMARKS;
      END;

      IF lvAction = 2 THEN BEGIN
        lvPartLineRec.COPY(PartLineRec);
        WITH lvPartLineRec DO BEGIN
          IF NOT FINDSET THEN BEGIN
            MESSAGE(Text002);
          END ELSE BEGIN
            REPEAT
              BufferRec.INIT;
              BufferRec."User ID" := USERID;
              BufferRec."Part Group" := "Part Group";
              BufferRec.Part := Part;
              BufferRec."Estimate Line" := "Line No.";
              BufferRec.Description := Description;
              BufferRec.FillDateTimeCreated;  //DP01931
              IF BufferRec.INSERT THEN BEGIN
                BufferRec.Description := Description;
                BufferRec.MODIFY;
              END;
            UNTIL NEXT = 0;
          END;
        END;
        PartLineRec.CLEARMARKS;
      END;

      IF lvAction = 3 THEN BEGIN
        lvBaseRcpLineRec.COPY(BaseRcpLineRec);
        WITH lvBaseRcpLineRec DO BEGIN
          IF NOT FINDSET THEN BEGIN
            MESSAGE(Text002);
          END ELSE BEGIN
            REPEAT
              BufferRec.INIT;
              BufferRec."User ID" := USERID;
              BufferRec.Description := Description;
              BufferRec."Recipe Group" := "Recipe Group";
              BufferRec.Recipe := Recipe;
              BufferRec."Recipe Line" := "Line No.";
              BufferRec.FillDateTimeCreated;  //DP01931
              IF BufferRec.INSERT THEN BEGIN
                BufferRec.Description := Description;
                BufferRec.MODIFY;
              END;
            UNTIL NEXT = 0;
          END;
        END;
        BaseRcpLineRec.CLEARMARKS;
      END;

      IF lvAction = 4 THEN BEGIN
        lvSalesRcpLineRec.COPY(SalesRcpLineRec);
        WITH lvSalesRcpLineRec DO BEGIN
          IF NOT FINDSET THEN BEGIN
            MESSAGE(Text002);
          END ELSE BEGIN
            REPEAT
              BufferRec.INIT;
              BufferRec."User ID" := USERID;
              BufferRec."Sales Document Type" := "Sales Document Type";
              BufferRec."Sales Document No." := "Sales Document No.";
              BufferRec."Sales Line No." := "Sales Line No.";
              BufferRec.Description := Description;
              BufferRec."Recipe Group" := "Recipe Group";
              BufferRec.Recipe := Recipe;
              BufferRec."Recipe Line" := "Line No.";
              BufferRec.FillDateTimeCreated;  //DP01931
              IF BufferRec.INSERT THEN BEGIN
                BufferRec.Description := Description;
                BufferRec.MODIFY;
              END;
            UNTIL NEXT = 0;
          END;
        END;
        SalesRcpLineRec.CLEARMARKS;
      END;
    END;

    PROCEDURE CopyFromBuffer@1210190006(lvAction@1100485001 : Integer;EstLineRec@1100485000 : Record 11072072;EstRcpLineRec@1100485002 : Record 11072075;PartLineRec@1100485003 : Record 11072076;BaseRcpLineRec@1100528900 : Record 11020582;SalesRcpLineRec@1100525000 : Record 11229789);
    VAR
      BufferRec@1100485004 : Record 11012195;
    BEGIN
      IF lvAction = 0 THEN
        WITH EstLineRec DO
          SetSelection("Estimate No.", "Sub-Estimate No.", "Part Group", Part, "Line No.", 0, '', 0, '', '', 0);

      IF lvAction = 1 THEN
        WITH EstRcpLineRec DO
          SetSelection("Estimate No.", "Sub-Estimate No.", "Part Group", Part, "Estimate Line", 0, '', 0, "Recipe Group", Recipe, "Line No.");

      IF lvAction = 2 THEN
        WITH PartLineRec DO
          SetSelection('', '', "Part Group", Part, "Line No.", 0, '', 0, '', '', 0);

      IF lvAction = 3 THEN
        WITH BaseRcpLineRec DO
          SetSelection('', '', '', '', 0, 0, '', 0, "Recipe Group", Recipe, "Line No.");

      IF lvAction = 4 THEN
        WITH SalesRcpLineRec DO
          SetSelection('', '', '', '', 0, "Sales Document Type", "Sales Document No.", "Sales Line No.", "Recipe Group", Recipe, "Line No.");

      CopyLines(BufferRec);
    END;

    PROCEDURE ShowBuffer@1210190007(lvAction@1100485002 : Integer;EstLineRec@1100485000 : Record 11072072;EstRcpLineRec@1100485001 : Record 11072075;PartLineRec@1100485005 : Record 11072076;BaseRcpLineRec@1100528900 : Record 11020582;SalesRcpLineRec@1100525001 : Record 11229789);
    VAR
      BufferRec@1100485004 : Record 11012195;
      BufferFrm@1100525000 : Page 11012250;
    BEGIN
      BufferRec.FILTERGROUP(2);
      //DP01855.sn
      IF (lvAction = 0) OR (lvAction = 1) THEN
        BufferRec.SETFILTER("Estimate No.", '<>%1', '');
      IF (lvAction = 2) OR (lvAction = 3) THEN BEGIN
        BufferRec.SETFILTER("Estimate No.", '%1', '');
        BufferRec.SETFILTER("Sales Document No.", '%1', '');
        IF (lvAction = 2) THEN
          BufferRec.SETFILTER(Part, '<>%1', '');
        IF (lvAction = 3) THEN
          BufferRec.SETFILTER(Recipe, '<>%1', '');
      END;
      IF (lvAction = 4) THEN
        BufferRec.SETFILTER("Sales Document No.", '<>%1', '');
      //DP01855.en
      BufferRec.SETRANGE("User ID", USERID);
      BufferRec.FILTERGROUP(0);

      IF lvAction = 0 THEN
        WITH EstLineRec DO
          BufferFrm.SetSelection("Estimate No.", "Sub-Estimate No.", "Part Group", Part, "Line No.", '', '', 0, 0,'',0);

      IF lvAction = 1 THEN
        WITH EstRcpLineRec DO
          BufferFrm.SetSelection("Estimate No.", "Sub-Estimate No.", "Part Group", Part, "Estimate Line", "Recipe Group", Recipe, "Line No.", 0, '', 0);

      IF lvAction = 2 THEN
        WITH PartLineRec DO
          BufferFrm.SetSelection('', '', "Part Group", Part, "Line No.", '', '', 0, 0, '', 0);

      IF lvAction = 3 THEN
        WITH BaseRcpLineRec DO
          BufferFrm.SetSelection('', '', '', '', 0, "Recipe Group", Recipe, "Line No.", 0, '', 0);

      IF lvAction = 4 THEN
        WITH SalesRcpLineRec DO
          BufferFrm.SetSelection('', '', '', '', 0, "Recipe Group", Recipe, "Line No.", "Sales Document Type", "Sales Document No.", "Sales Line No.");

      BufferFrm.SETTABLEVIEW(BufferRec);
      BufferFrm.RUNMODAL;
      CLEAR(BufferFrm);
    END;

    PROCEDURE SetSelection@1210190004(lvEst@1210190000 : Code[20];lvSubEst@1210190001 : Code[20];lvPartGrp@1210190002 : Code[20];lvPart@1210190003 : Code[20];lvEstLine@1210190004 : Integer;lvSalesDocType@1100525002 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order,Invoice Proposal';lvSalesDocno@1100525001 : Code[20];lvSalesline@1100525000 : Integer;lvRcpGrp@1100485000 : Code[20];lvRcp@1100485001 : Code[20];lvRcpLine@1100485002 : Integer);
    BEGIN
      gvEst := lvEst;
      gvSubEst := lvSubEst;
      gvPartGrp := lvPartGrp;
      gvPart := lvPart;
      gvEstLine := lvEstLine;
      gvSalesDocType := lvSalesDocType;
      gvSalesDocno := lvSalesDocno;
      gvSalesline := lvSalesline;
      gvRcpGrp := lvRcpGrp;
      gvRcp := lvRcp;
      gvRcpLine := lvRcpLine;

      IF gvSalesDocno = '' THEN BEGIN
        IF gvEst = '' THEN BEGIN
          IF gvRcp = '' THEN
            gvDest := 20
          ELSE
            gvDest := 10;
        END ELSE BEGIN
          IF gvRcp = '' THEN
            gvDest := 0
          ELSE
            gvDest := 1;
        END;
      END ELSE BEGIN
        gvDest := 100;
      END;
    END;

    PROCEDURE SetBufferOptions@1100528900(iSelectMarkedLines@1100528502 : Boolean;iSelectDestination@1100528501 : Boolean;iApplySort@1100528900 : Boolean;iCopyPriceAgreement@1100528500 : Boolean);
    BEGIN
      //DP01855
      SelectMarkedLines := iSelectMarkedLines;
      SelectDestination := iSelectDestination;
      ApplySort := iApplySort;
      CopyPriceAgreement := iCopyPriceAgreement;
    END;

    PROCEDURE SortBufferLines@1100528902();
    VAR
      EstimateBufferLine@1100528901 : Record 11012195;
      EstimateBufferLine2@1100528900 : Record 11012195;
      LastNo@1100528903 : Integer;
    BEGIN
      //DP01931
      EstimateBufferLine.SETCURRENTKEY("User ID", "Estimate No.");
      EstimateBufferLine.SETRANGE("User ID", USERID);
      EstimateBufferLine.MODIFYALL("Seq. No.", 0);
      //
      EstimateBufferLine.SETCURRENTKEY("User ID", "Seq. No.", "Date-Time Created");
      EstimateBufferLine.SETRANGE("Seq. No.", 0);
      IF EstimateBufferLine.FINDSET THEN BEGIN
        REPEAT
          EstimateBufferLine2 := EstimateBufferLine;
          EstimateBufferLine2."Seq. No." := LastNo + 1;
          LastNo := EstimateBufferLine2."Seq. No.";
          EstimateBufferLine2.MODIFY;
        UNTIL EstimateBufferLine.NEXT = 0;
      END;
    END;

    PROCEDURE CopyLines@1210190000(VAR BufferRec@1100485004 : Record 11012195);
    VAR
      EstRec@1210190002 : Record 11012151;
      EstPartRec@1210190000 : Record 11072073;
      StdPartRec@1100485006 : Record 11012169;
      OrigEstLineRec@1210190001 : Record 11072072;
      DestEstLineRec@1210190003 : Record 11072072;
      RcpRec@1100485001 : Record 11020581;
      OrigRcpLineRec@1100485002 : Record 11072075;
      DestRcpLineRec@1100485003 : Record 11072075;
      OrigPartLineRec@1100485007 : Record 11072076;
      DestPartLineRec@1100485008 : Record 11072076;
      lvBufferRec@1100485005 : Record 11012195;
      OrigBaseRcpLineRec@1100528901 : Record 11020582;
      DestBaseRcpLineRec@1100528900 : Record 11020582;
      SalesRcpRec@1100525000 : Record 11229788;
      OrgSalesRecipeLine@1100528500 : Record 11229789;
      DestSalesRecipeLine@1100528501 : Record 11229789;
      EstSetup@1100409000 : Record 11012150;
      CreatedLines@1100528502 : Integer;
    BEGIN
      EstSetup.GET;  //C020959
      lvBufferRec.COPY(BufferRec);
      WITH BufferRec DO BEGIN
        IF ApplySort THEN
          SETCURRENTKEY("User ID", "Seq. No.", "Date-Time Created");  //DP01931
        IF SelectMarkedLines = FALSE THEN BEGIN  //DP01855
          SETRANGE("User ID", USERID);
          SETRANGE(Store, FALSE);
          //DP01855.sn
          CASE gvDest OF
            0,1: //estimate line + estimate recipe line
              BEGIN
                SETFILTER("Estimate No.", '<>%1', '');
              END;
            10: //base recipe line
              BEGIN
                SETFILTER("Estimate No.", '%1', '');
                SETFILTER("Sales Document No.", '%1', '');
                SETFILTER(Part, '%1', '');
                SETFILTER(Recipe, '<>%1', '');
              END;
            20: //base part line
              BEGIN
                SETFILTER("Estimate No.", '%1', '');
                SETFILTER("Sales Document No.", '%1', '');
                SETFILTER(Recipe, '%1', '');
                SETFILTER(Part, '<>%1', '');
              END;
            100:  //sales recipe line
              BEGIN
                SETFILTER("Estimate No.", '%1', '');
                SETFILTER("Sales Document No.", '<>%1', '');
              END;
          END;
          //DP01855.en
          IF NOT FINDSET THEN
            EXIT;
        END ELSE BEGIN
          IF NOT FINDSET THEN BEGIN
            MESSAGE(Text002);
            EXIT;
          END;
        END;

        MarkedLines := COUNT;
        CurrLino := 0;
        PrevLino := 0;
        Gap := 0;
        CLEAR(RcpRec);
        CLEAR(SalesRcpRec);
        CLEAR(StdPartRec);
        CLEAR(EstPartRec);

        CASE gvDest OF
          0,  //estimate line
          1:  //estimate recipe line
            BEGIN
              EstPartRec."Estimate No." := gvEst;
              EstPartRec."Sub-Estimate No." := gvSubEst;
              EstPartRec."Part Group" := gvPartGrp;
              EstPartRec.Part := gvPart;
              IF SelectDestination THEN BEGIN
                EstPartRec.SETRANGE("Estimate No.", gvEst);
                IF PAGE.RUNMODAL(0, EstPartRec) <> ACTION::LookupOK THEN EXIT;
              END ELSE BEGIN
                IF gvDest = 0 THEN
                  CurrLino := gvEstLine;
                IF gvDest = 1 THEN BEGIN
                  CurrLino := gvRcpLine;
                  RcpRec."Recipe Group" := gvRcpGrp;
                  RcpRec."No." := gvRcp;
                END;
              END;
              IF gvDest = 0 THEN
                DetermineLino(
                  EstPartRec."Estimate No.", EstPartRec."Sub-Estimate No.",
                  EstPartRec."Part Group", EstPartRec.Part, CurrLino,
                  0, '', 0,
                  '', '', 0);
              IF gvDest = 1 THEN
                DetermineLino(
                  gvEst, gvSubEst,
                  gvPartGrp, gvPart, gvEstLine,
                  0, '', 0,
                  RcpRec."Recipe Group", RcpRec."No.", CurrLino);
              EstRec.GET(EstPartRec."Estimate No.");
              EstRec.TESTFIELD(Fixed, FALSE);
            END;
          10:  //standard recipe line
            BEGIN
              RcpRec."Recipe Group" := gvRcpGrp;
              RcpRec."No." := gvRcp;
              IF SelectDestination THEN BEGIN
                RcpRec.SETRANGE("Recipe Group", gvRcpGrp);
                IF PAGE.RUNMODAL(0, RcpRec) <> ACTION::LookupOK THEN EXIT;
              END ELSE BEGIN
                CurrLino := gvRcpLine;
              END;
              DetermineLino(
                gvEst, gvSubEst,
                gvPartGrp, gvPart, gvEstLine,
                0, '', 0,
                RcpRec."Recipe Group", RcpRec."No.", CurrLino);
              RcpRec.GET(RcpRec."Recipe Group", RcpRec."No.");
              RcpRec.TESTFIELD(Fixed, FALSE);
            END;
          20:  //standart part line
            BEGIN
              StdPartRec."Part Group" := gvPartGrp;
              StdPartRec.Code := gvPart;
              IF SelectDestination THEN BEGIN
                StdPartRec.SETRANGE("Part Group", gvPartGrp);
                IF PAGE.RUNMODAL(0, StdPartRec) <> ACTION::LookupOK THEN EXIT;
              END ELSE BEGIN
                CurrLino := gvEstLine;
              END;
              DetermineLino('', '', StdPartRec."Part Group", StdPartRec.Code, 0,
               0, '', 0,
               '', '', 0);
            END;
          100:  //sales recipe line
            BEGIN
              SalesRcpRec."Sales Document Type" := gvSalesDocType;
              SalesRcpRec."Sales Document No." := gvSalesDocno;
              SalesRcpRec."Sales Line No." := gvSalesline;
              SalesRcpRec."Recipe Group" := gvRcpGrp;
              SalesRcpRec."No." := gvRcp;
              IF SelectDestination THEN BEGIN
                //RcpRec.SETRANGE("Recipe Group", gvRcpGrp);
                //IF PAGE.RUNMODAL(0, RcpRec) <> ACTION::LookupOK THEN EXIT;
                ERROR('Select Destination for Sales Recipe not implemented');
              END ELSE BEGIN
                CurrLino := gvRcpLine;
              END;
              DetermineLino(
                gvEst, gvSubEst,
                gvPartGrp, gvPart, gvEstLine,
                SalesRcpRec."Sales Document Type",SalesRcpRec."Sales Document No.",SalesRcpRec."Sales Line No.",
                SalesRcpRec."Recipe Group", SalesRcpRec."No.", CurrLino);
              SalesRcpRec.GET(
                SalesRcpRec."Sales Document Type",
                SalesRcpRec."Sales Document No.",
                SalesRcpRec."Sales Line No.",
                SalesRcpRec."Recipe Group",
                SalesRcpRec."No.");
              SalesRcpRec.TESTFIELD(Fixed, FALSE);
            END;

        END;

        REPEAT
          IF (gvEst = '') AND (gvRcp = '') THEN BEGIN
            //voorlopig alleen uitwisselen tussen standaard onderdelen onderling
            IF ("Estimate No." = '') AND (Recipe = '') THEN BEGIN
              IF OrigPartLineRec.GET("Part Group", Part, "Estimate Line") THEN BEGIN
                DestPartLineRec := OrigPartLineRec;
                DestPartLineRec."Part Group" := StdPartRec."Part Group";
                DestPartLineRec.Part := StdPartRec.Code;
                DestPartLineRec."Line No." := CurrLino + Gap;
                CurrLino := DestPartLineRec."Line No.";
                DestPartLineRec.INSERT(TRUE);
                CreatedLines := CreatedLines + 1;  //DP01855
              END;
            END ELSE BEGIN
              IF gvDest = 20 THEN ERROR(Text003);
            END;
          END;
          IF gvEst <> '' THEN BEGIN
            IF (gvRcp = '') OR (SelectDestination = TRUE) THEN BEGIN
              //tijdelijk: selecteren bestemming werkt alleen voor onderdeel, niet voor recept(=calc.regel)
              //bestemming: calculatieregel
              IF "Recipe Line" = 0 THEN BEGIN
                //oorsprong: calculatieregel
                IF OrigEstLineRec.GET(
                  "Estimate No.", "Sub-Estimate No.",
                  "Part Group", Part, "Estimate Line") THEN
                BEGIN
                  DestEstLineRec := OrigEstLineRec;
                  DestEstLineRec."Estimate No." := EstPartRec."Estimate No.";
                  DestEstLineRec."Sub-Estimate No." := EstPartRec."Sub-Estimate No.";
                  DestEstLineRec."Part Group" := EstPartRec."Part Group";
                  DestEstLineRec.Part := EstPartRec.Part;
                  DestEstLineRec."Line No." := CurrLino + Gap;
                  CurrLino := DestEstLineRec."Line No.";
                  DestEstLineRec.INSERT(TRUE);
                  CreatedLines := CreatedLines + 1;  //DP01855
                  DestEstLineRec.Description := OrigEstLineRec.Description;  //C046429
                  DestEstLineRec."Unit of Measure" := OrigEstLineRec."Unit of Measure";  //C044586
                  //C016435.sn
                  IF OrigEstLineRec."Surcharge % Labor" <> 0 THEN
                    DestEstLineRec."Surcharge % Labor" := OrigEstLineRec."Surcharge % Labor";
                  IF OrigEstLineRec."Surcharge % Price" <> 0 THEN
                    DestEstLineRec."Surcharge % Price" :=  OrigEstLineRec."Surcharge % Price";
                  //C016435.en
                  //DP01855.sn
                  IF CopyPriceAgreement THEN BEGIN
                    DestEstLineRec."Price Agreement" := OrigEstLineRec."Price Agreement";
                    DestEstLineRec."Norm Agreement" := OrigEstLineRec."Norm Agreement";
                    DestEstLineRec."Price Agreement (Sales)" := OrigEstLineRec."Price Agreement (Sales)";
                    DestEstLineRec."Norm Agreement (Sales)" := OrigEstLineRec."Norm Agreement (Sales)";
                  END;
                  //DP01855.en
                  //C040083.sn
                  DestEstLineRec.Norm := OrigEstLineRec.Norm;
                  DestEstLineRec."Norm (Sales)" := OrigEstLineRec."Norm (Sales)";
                  DestEstLineRec."Production Rate" := OrigEstLineRec."Production Rate";
                  DestEstLineRec."Production Rate (Sales)" := OrigEstLineRec."Production Rate (Sales)";
                  //C040083.en
                  IF EstSetup."Copy Norm Group from Target" THEN  //C009772
                    CheckDefaultNormGroup(DestEstLineRec, DestRcpLineRec, FALSE);
                  IF DestEstLineRec."Currency Code" = '' THEN
                    DestEstLineRec.VALIDATE("Gross Price")
                  ELSE BEGIN
                    DestEstLineRec.SetSkipValidateFCY(TRUE);
                    DestEstLineRec.VALIDATE("Gross Price (FCY)");
                  END;
                  GetSalesDiscountEstLine(DestEstLineRec);  //C006745
                  IF PriceMethodBasedOnSurcharge(DestEstLineRec."Estimate No.") THEN //C063348
                    DestEstLineRec.InitSalesFromCost(FALSE);  //C020959+C041108
                  DestEstLineRec.CalculateTotals;
                  DestEstLineRec.MODIFY;
                  CopyDetails(
                    OrigEstLineRec."Estimate No.", OrigEstLineRec."Sub-Estimate No.",
                    OrigEstLineRec."Part Group", OrigEstLineRec.Part, OrigEstLineRec."Line No.", '', '', 0,
                    DestEstLineRec."Estimate No.", DestEstLineRec."Sub-Estimate No.",
                    DestEstLineRec."Part Group", DestEstLineRec.Part, DestEstLineRec."Line No.", '', '', 0,
                    (Recipe<>''));
                END;
              END ELSE BEGIN
                //oorsprong: receptregel
                IF OrigRcpLineRec.GET(
                  "Estimate No.", "Sub-Estimate No.",
                  "Part Group", Part, "Estimate Line",
                  "Recipe Group", Recipe, "Recipe Line") THEN
                BEGIN
                  DestEstLineRec."Estimate No." := EstPartRec."Estimate No.";
                  DestEstLineRec."Sub-Estimate No." := EstPartRec."Sub-Estimate No.";
                  DestEstLineRec."Part Group" := EstPartRec."Part Group";
                  DestEstLineRec.Part := EstPartRec.Part;
                  DestEstLineRec."Line No." := CurrLino + Gap;
                  CurrLino := DestEstLineRec."Line No.";
                  AssignRecipeToEstimateLine(DestEstLineRec, OrigRcpLineRec);
                  DestEstLineRec.INSERT(TRUE);
                  CreatedLines := CreatedLines + 1;  //DP01855
                  DestEstLineRec.Description := OrigRcpLineRec.Description;  //C046429
                  DestEstLineRec."Unit of Measure" := OrigRcpLineRec."Unit of Measure";  //C044586
                  //C016435.sn
                  IF OrigRcpLineRec."Surcharge % Labor" <> 0 THEN
                    DestEstLineRec."Surcharge % Labor" := OrigRcpLineRec."Surcharge % Labor";
                  IF OrigRcpLineRec."Surcharge % Price" <> 0 THEN
                    DestEstLineRec."Surcharge % Price" :=  OrigRcpLineRec."Surcharge % Price";
                  //C016435.en
                  //DP01855.sn
                  IF CopyPriceAgreement THEN BEGIN
                    DestEstLineRec."Price Agreement" := OrigRcpLineRec."Price Agreement";
                    DestEstLineRec."Norm Agreement" := OrigRcpLineRec."Norm Agreement";
                    DestEstLineRec."Price Agreement (Sales)" := OrigRcpLineRec."Price Agreement (Sales)";
                    DestEstLineRec."Norm Agreement (Sales)" := OrigRcpLineRec."Norm Agreement (Sales)";
                  END;
                  //DP01855.en
                  //C040083.sn
                  DestEstLineRec.Norm := OrigRcpLineRec.Norm;
                  DestEstLineRec."Norm (Sales)" := OrigRcpLineRec."Norm (Sales)";
                  DestEstLineRec."Production Rate" := OrigRcpLineRec."Production Rate";
                  DestEstLineRec."Production Rate (Sales)" := OrigRcpLineRec."Production Rate (Sales)";
                  //C040083.en
                  IF EstSetup."Copy Norm Group from Target" THEN  //C009772
                    CheckDefaultNormGroup(DestEstLineRec, DestRcpLineRec, FALSE);
                  IF DestEstLineRec."Currency Code" = '' THEN
                    DestEstLineRec.VALIDATE("Gross Price")
                  ELSE BEGIN
                    DestEstLineRec.SetSkipValidateFCY(TRUE);
                    DestEstLineRec.VALIDATE("Gross Price (FCY)");
                  END;
                  GetSalesDiscountEstLine(DestEstLineRec);  //C006745
                  IF PriceMethodBasedOnSurcharge(DestEstLineRec."Estimate No.") THEN //C063348
                    DestEstLineRec.InitSalesFromCost(FALSE);  //C020959+C041108
                  DestEstLineRec.CalculateTotals;
                  DestEstLineRec.MODIFY;
                  CopyDetails(
                    OrigRcpLineRec."Estimate No.", OrigRcpLineRec."Sub-Estimate No.",
                    OrigRcpLineRec."Part Group", OrigRcpLineRec.Part, OrigRcpLineRec."Estimate Line",
                    OrigRcpLineRec."Recipe Group", OrigRcpLineRec.Recipe, OrigRcpLineRec."Line No.",
                    DestEstLineRec."Estimate No.", DestEstLineRec."Sub-Estimate No.",
                    DestEstLineRec."Part Group", DestEstLineRec.Part, DestEstLineRec."Line No.", '', '', 0,
                    FALSE);
                END;
              END;
            END ELSE BEGIN
              //bestemming: receptregel (calculatie)
              //tijdelijk: werkt alleen zonder selectie bestemming
              IF "Recipe Line" = 0 THEN BEGIN
                //oorsprong: calculatieregel
                IF OrigEstLineRec.GET(
                  "Estimate No.", "Sub-Estimate No.",
                  "Part Group", Part, "Estimate Line") THEN
                BEGIN
                  DestRcpLineRec.INIT;
                  DestRcpLineRec."Estimate No." := gvEst;
                  DestRcpLineRec."Sub-Estimate No." := gvSubEst;
                  DestRcpLineRec."Part Group" := gvPartGrp;
                  DestRcpLineRec.Part := gvPart;
                  DestRcpLineRec."Estimate Line" := gvEstLine;
                  DestRcpLineRec."Recipe Group" := RcpRec."Recipe Group";
                  DestRcpLineRec.Recipe := RcpRec."No.";
                  DestRcpLineRec."Line No." := CurrLino + Gap;
                  CurrLino := DestRcpLineRec."Line No.";
                  AssignEstimateToRecipeLine(DestRcpLineRec, OrigEstLineRec);
                  DestRcpLineRec.INSERT(TRUE);
                  CreatedLines := CreatedLines + 1;  //DP01855
                  DestRcpLineRec.Description := OrigEstLineRec.Description;  //C046429
                  DestRcpLineRec."Unit of Measure" := OrigEstLineRec."Unit of Measure";  //C044586
                  //C016435.sn
                  IF OrigEstLineRec."Surcharge % Labor" <> 0 THEN
                    DestRcpLineRec."Surcharge % Labor" := OrigEstLineRec."Surcharge % Labor";
                  IF OrigEstLineRec."Surcharge % Price" <> 0 THEN
                    DestRcpLineRec."Surcharge % Price" :=  OrigEstLineRec."Surcharge % Price";
                  //C016435.en
                  //DP01855.sn
                  IF CopyPriceAgreement THEN BEGIN
                    DestRcpLineRec."Price Agreement" := OrigEstLineRec."Price Agreement";
                    DestRcpLineRec."Norm Agreement" := OrigEstLineRec."Norm Agreement";
                    DestRcpLineRec."Price Agreement (Sales)" := OrigEstLineRec."Price Agreement (Sales)";
                    DestRcpLineRec."Norm Agreement (Sales)" := OrigEstLineRec."Norm Agreement (Sales)";
                  END;
                  //DP01855.en
                  //C040083.sn
                  DestRcpLineRec.Norm := OrigEstLineRec.Norm;
                  DestRcpLineRec."Norm (Sales)" := OrigEstLineRec."Norm (Sales)";
                  DestRcpLineRec."Production Rate" := OrigEstLineRec."Production Rate";
                  DestRcpLineRec."Production Rate (Sales)" := OrigEstLineRec."Production Rate (Sales)";
                  //C040083.en
                  IF EstSetup."Copy Norm Group from Target" THEN  //C009772
                    CheckDefaultNormGroup(DestEstLineRec, DestRcpLineRec, TRUE);
                  IF DestEstLineRec."Currency Code" = '' THEN
                    DestRcpLineRec.VALIDATE("Gross Price")
                  ELSE BEGIN
                    DestEstLineRec.SetSkipValidateFCY(TRUE);
                    DestEstLineRec.VALIDATE("Gross Price (FCY)");
                  END;
                  GetSalesDiscountRcpLine(DestRcpLineRec);  //C006745
                  IF PriceMethodBasedOnSurcharge(DestRcpLineRec."Estimate No.") THEN //C063348
                    DestRcpLineRec.InitSalesFromCost(FALSE);  //C020959+C041108
                  DestRcpLineRec.CalculateTotals;
                  DestRcpLineRec.MODIFY;
                  CopyDetails(
                    OrigEstLineRec."Estimate No.", OrigEstLineRec."Sub-Estimate No.",
                    OrigEstLineRec."Part Group", OrigEstLineRec.Part, OrigEstLineRec."Line No.",
                    '', '', 0,
                    DestRcpLineRec."Estimate No.", DestRcpLineRec."Sub-Estimate No.",
                    DestRcpLineRec."Part Group", DestRcpLineRec.Part, DestRcpLineRec."Estimate Line",
                    DestRcpLineRec."Recipe Group", DestRcpLineRec.Recipe, DestRcpLineRec."Line No.",
                    FALSE);
                END;
              END ELSE BEGIN
                //oorsprong: receptregel
                IF OrigRcpLineRec.GET(
                  "Estimate No.", "Sub-Estimate No.",
                  "Part Group", Part, "Estimate Line",
                  "Recipe Group", Recipe, "Recipe Line") THEN
                BEGIN
                  DestRcpLineRec := OrigRcpLineRec;
                  DestRcpLineRec."Estimate No." := gvEst;
                  DestRcpLineRec."Sub-Estimate No." := gvSubEst;
                  DestRcpLineRec."Part Group" := gvPartGrp;
                  DestRcpLineRec.Part := gvPart;
                  DestRcpLineRec."Estimate Line" := gvEstLine;
                  DestRcpLineRec."Recipe Group" := RcpRec."Recipe Group";
                  DestRcpLineRec.Recipe := RcpRec."No.";
                  DestRcpLineRec."Line No." := CurrLino + Gap;
                  CurrLino := DestRcpLineRec."Line No.";
                  DestRcpLineRec.INSERT(TRUE);
                  CreatedLines := CreatedLines + 1;  //DP01855
                  DestRcpLineRec.Description := OrigRcpLineRec.Description;  //C046429
                  DestRcpLineRec."Unit of Measure" := OrigRcpLineRec."Unit of Measure";  //C044586
                  //C016435.sn
                  IF OrigRcpLineRec."Surcharge % Labor" <> 0 THEN
                    DestRcpLineRec."Surcharge % Labor" := OrigRcpLineRec."Surcharge % Labor";
                  IF OrigRcpLineRec."Surcharge % Price" <> 0 THEN
                    DestRcpLineRec."Surcharge % Price" :=  OrigRcpLineRec."Surcharge % Price";
                  //C016435.en
                  //DP01855.sn
                  IF CopyPriceAgreement THEN BEGIN
                    DestRcpLineRec."Price Agreement" := OrigRcpLineRec."Price Agreement";
                    DestRcpLineRec."Norm Agreement" := OrigRcpLineRec."Norm Agreement";
                    DestRcpLineRec."Price Agreement (Sales)" := OrigRcpLineRec."Price Agreement (Sales)";
                    DestRcpLineRec."Norm Agreement (Sales)" := OrigRcpLineRec."Norm Agreement (Sales)";
                  END;
                  //DP01855.en
                  //C040083.sn
                  DestRcpLineRec.Norm := OrigRcpLineRec.Norm;
                  DestRcpLineRec."Norm (Sales)" := OrigRcpLineRec."Norm (Sales)";
                  DestRcpLineRec."Production Rate" := OrigRcpLineRec."Production Rate";
                  DestRcpLineRec."Production Rate (Sales)" := OrigRcpLineRec."Production Rate (Sales)";
                  //C040083.en
                  IF EstSetup."Copy Norm Group from Target" THEN  //C009772
                    CheckDefaultNormGroup(DestEstLineRec, DestRcpLineRec, TRUE);
                  IF DestEstLineRec."Currency Code" = '' THEN
                    DestRcpLineRec.VALIDATE("Gross Price")
                  ELSE BEGIN
                    DestEstLineRec.SetSkipValidateFCY(TRUE);
                    DestEstLineRec.VALIDATE("Gross Price (FCY)");
                  END;
                  GetSalesDiscountRcpLine(DestRcpLineRec);  //C006745
                  IF PriceMethodBasedOnSurcharge(DestRcpLineRec."Estimate No.") THEN //C063348
                    DestRcpLineRec.InitSalesFromCost(FALSE);  //C020959+C041108
                  DestRcpLineRec.CalculateTotals;
                  DestRcpLineRec.MODIFY;
                  CopyDetails(
                    OrigRcpLineRec."Estimate No.", OrigRcpLineRec."Sub-Estimate No.",
                    OrigRcpLineRec."Part Group", OrigRcpLineRec.Part, OrigRcpLineRec."Estimate Line",
                    OrigRcpLineRec."Recipe Group", OrigRcpLineRec.Recipe, OrigRcpLineRec."Line No.",
                    DestRcpLineRec."Estimate No.", DestRcpLineRec."Sub-Estimate No.",
                    DestRcpLineRec."Part Group", DestRcpLineRec.Part, DestRcpLineRec."Estimate Line",
                    DestRcpLineRec."Recipe Group", DestRcpLineRec.Recipe, DestRcpLineRec."Line No.",
                    FALSE);
                END;
              END;
            END;
          END ELSE BEGIN
            IF ("Sales Document No." <> '') AND (gvDest = 100) THEN BEGIN
              //DP01855
              IF OrgSalesRecipeLine.GET("Sales Document Type", "Sales Document No.", "Sales Line No.", "Recipe Group", Recipe, "Recipe Line") THEN BEGIN
                DestSalesRecipeLine := OrgSalesRecipeLine;
                DestSalesRecipeLine."Sales Document Type" := gvSalesDocType;
                DestSalesRecipeLine."Sales Document No." := gvSalesDocno;
                DestSalesRecipeLine."Sales Line No." := gvSalesline;
                DestSalesRecipeLine."Recipe Group" := gvRcpGrp;
                DestSalesRecipeLine.Recipe := gvRcp;
                DestSalesRecipeLine."Line No." := CurrLino + Gap;
                CurrLino := DestSalesRecipeLine."Line No.";
                DestSalesRecipeLine.INSERT(TRUE);
                CreatedLines := CreatedLines + 1;  //DP01855
              END;
            END ELSE BEGIN
              //bestemming: receptregel (standaard)
              IF "Recipe Line" = 0 THEN BEGIN
                //oorsprong: calculatieregel
                IF OrigEstLineRec.GET(
                  "Estimate No.", "Sub-Estimate No.",
                  "Part Group", Part, "Estimate Line") THEN
                BEGIN
                  DestBaseRcpLineRec.INIT;
                  AssignEstimateToRecipeLine(DestRcpLineRec, OrigEstLineRec);
                  DestBaseRcpLineRec.TRANSFERFIELDS(DestRcpLineRec);
                  DestBaseRcpLineRec."Recipe Group" := RcpRec."Recipe Group";
                  DestBaseRcpLineRec.Recipe := RcpRec."No.";
                  DestBaseRcpLineRec."Line No." := CurrLino + Gap;
                  CurrLino := DestBaseRcpLineRec."Line No.";
                  DestBaseRcpLineRec.INSERT(TRUE);
                  CreatedLines := CreatedLines + 1;  //DP01855
                  DestBaseRcpLineRec.Description := OrigEstLineRec.Description;  //C046429
                  DestBaseRcpLineRec."Unit of Measure" := OrigEstLineRec."Unit of Measure";  //C044586
                  //DP01855.sn
                  IF CopyPriceAgreement THEN BEGIN
                    DestBaseRcpLineRec."Price Agreement" := OrigEstLineRec."Price Agreement";
                    DestBaseRcpLineRec."Norm Agreement" := OrigEstLineRec."Norm Agreement";
                    DestBaseRcpLineRec."Price Agreement (Sales)" := OrigEstLineRec."Price Agreement (Sales)";
                    DestBaseRcpLineRec."Norm Agreement (Sales)" := OrigEstLineRec."Norm Agreement (Sales)";
                  END;
                  //DP01855.en
                  //C040083.sn
                  DestBaseRcpLineRec.Norm := OrigEstLineRec.Norm;
                  //DestBaseRcpLineRec."Norm (Sales)" := OrigEstLineRec."Norm (Sales)";
                  DestBaseRcpLineRec."Production Rate" := OrigEstLineRec."Production Rate";
                  //DestBaseRcpLineRec."Production Rate (Sales)" := OrigEstLineRec."Production Rate (Sales)";
                  //C040083.en
                  DestBaseRcpLineRec.CalculateTotals;
                  DestBaseRcpLineRec.MODIFY;
                  CopyDetails(
                    OrigEstLineRec."Estimate No.", OrigEstLineRec."Sub-Estimate No.",
                    OrigEstLineRec."Part Group", OrigEstLineRec.Part, OrigEstLineRec."Line No.",
                    '', '', 0,
                    '', '',
                    '', '', 0,
                    DestBaseRcpLineRec."Recipe Group", DestBaseRcpLineRec.Recipe, DestBaseRcpLineRec."Line No.",
                    FALSE);
                END;
              END ELSE BEGIN
                //oorsprong: receptregel
                IF OrigBaseRcpLineRec.GET("Recipe Group", Recipe, "Recipe Line") THEN
                BEGIN
                  DestBaseRcpLineRec := OrigBaseRcpLineRec;  //C050220
                  DestBaseRcpLineRec."Recipe Group" := RcpRec."Recipe Group";
                  DestBaseRcpLineRec.Recipe := RcpRec."No.";
                  DestBaseRcpLineRec."Line No." := CurrLino + Gap;
                  CurrLino := DestBaseRcpLineRec."Line No.";
                  DestBaseRcpLineRec.INSERT(TRUE);
                  CreatedLines := CreatedLines + 1;  //DP01855
                  DestBaseRcpLineRec.Description := OrigBaseRcpLineRec.Description;  //C046429
                  DestBaseRcpLineRec."Unit of Measure" := OrigBaseRcpLineRec."Unit of Measure";  //C044586
                  //DP01855.sn
                  IF CopyPriceAgreement THEN BEGIN
                    DestBaseRcpLineRec."Price Agreement" := OrigBaseRcpLineRec."Price Agreement";
                    DestBaseRcpLineRec."Norm Agreement" := OrigBaseRcpLineRec."Norm Agreement";
                    DestBaseRcpLineRec."Price Agreement (Sales)" := OrigBaseRcpLineRec."Price Agreement (Sales)";
                    DestBaseRcpLineRec."Norm Agreement (Sales)" := OrigBaseRcpLineRec."Norm Agreement (Sales)";
                  END;
                  //DP01855.en
                  //C040083.sn
                  DestBaseRcpLineRec.Norm := OrigBaseRcpLineRec.Norm;
                  //DestBaseRcpLineRec."Norm (Sales)" := OrigBaseRcpLineRec."Norm (Sales)";
                  DestBaseRcpLineRec."Production Rate" := OrigBaseRcpLineRec."Production Rate";
                  //DestBaseRcpLineRec."Production Rate (Sales)" := OrigBaseRcpLineRec."Production Rate (Sales)";
                  //C040083.en
                  DestBaseRcpLineRec.CalculateTotals;
                  DestBaseRcpLineRec.MODIFY;
                  CopyDetails(
                    '', '',
                    '', '', 0,
                    OrigBaseRcpLineRec."Recipe Group", OrigBaseRcpLineRec.Recipe, OrigBaseRcpLineRec."Line No.",
                    '', '',
                    '', '', 0,
                    DestBaseRcpLineRec."Recipe Group", DestBaseRcpLineRec.Recipe, DestBaseRcpLineRec."Line No.",
                    FALSE);
                END;
              END;
            END;
          END;
        UNTIL NEXT = 0;
        IF SelectMarkedLines = FALSE THEN BEGIN  //DP01855
          DELETEALL;
        END ELSE BEGIN
          MARKEDONLY(FALSE);
          MESSAGE(Text001, CreatedLines);  //DP01855
        END;
      END;
      BufferRec.CLEARMARKS;
    END;

    PROCEDURE DetermineLino@1100485003(lvEst@1100485008 : Code[20];lvSubEst@1100485007 : Code[20];lvPartGrp@1100485006 : Code[20];lvPart@1100485005 : Code[20];lvEstLine@1100485004 : Integer;lvSalesDocType@1100525002 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order,Invoice Proposal';lvSalesDocno@1100525001 : Code[20];lvSalesline@1100525000 : Integer;lvRcpGrp@1100485003 : Code[20];lvRcp@1100485002 : Code[20];lvRcpLine@1100485001 : Integer);
    VAR
      lvEstLineRec@1100485000 : Record 11072072;
      lvEstRcpLineRec@1100485009 : Record 11072075;
      lvPartLineRec@1100485010 : Record 11072076;
      lvBaseRcpLineRec@1100528900 : Record 11020582;
      lvSalesRcpLineRec@1100525003 : Record 11229789;
    BEGIN
      IF (lvEst = '') AND (lvRcp = '') THEN BEGIN
        WITH lvPartLineRec DO BEGIN
          LOCKTABLE;
          SETRANGE("Part Group", lvPartGrp);
          SETRANGE(Part, lvPart);
          IF GET(lvPartGrp, lvPart, CurrLino) THEN BEGIN
            SETFILTER("Line No.", '<%1', CurrLino);
            IF FINDLAST THEN PrevLino := "Line No.";
            SETRANGE("Line No.");
            CheckGap;
          END;
          IF Gap = 0 THEN BEGIN
            Gap := 10000;
            IF FINDLAST THEN
              CurrLino := "Line No.";
          END;
        END;
        EXIT;
      END;

      IF lvRcp = '' THEN BEGIN
        WITH lvEstLineRec DO BEGIN
          LOCKTABLE;
          SETRANGE("Estimate No.", lvEst);
          SETRANGE("Sub-Estimate No.", lvSubEst);
          SETRANGE("Part Group", lvPartGrp);
          SETRANGE(Part, lvPart);
          IF GET(lvEst, lvSubEst, lvPartGrp, lvPart, CurrLino) THEN BEGIN
            SETFILTER("Line No.", '<%1', CurrLino);
            IF FINDLAST THEN PrevLino := "Line No.";
            SETRANGE("Line No.");
            CheckGap;
          END;
          IF Gap = 0 THEN BEGIN
            Gap := 10000;
            IF FINDLAST THEN
              CurrLino := "Line No.";
          END;
        END;
      END ELSE BEGIN
        IF lvEst = '' THEN BEGIN
          IF lvSalesDocno ='' THEN BEGIN
            WITH lvBaseRcpLineRec DO BEGIN
              LOCKTABLE;
              SETRANGE("Recipe Group", lvRcpGrp);
              SETRANGE(Recipe, lvRcp);
              IF GET(lvRcpGrp, lvRcp, CurrLino) THEN BEGIN
                SETFILTER("Line No.", '<%1', CurrLino);
                IF FINDLAST THEN PrevLino := "Line No.";
                SETRANGE("Line No.");
                CheckGap;
              END;
              IF Gap = 0 THEN BEGIN
                Gap := 10000;
                IF FINDLAST THEN
                  CurrLino := "Line No.";
              END;
            END;
          END ELSE BEGIN
            WITH lvSalesRcpLineRec DO BEGIN
              LOCKTABLE;
              SETRANGE("Sales Document Type", lvSalesDocType);
              SETRANGE("Sales Document No.", lvSalesDocno);
              SETRANGE("Sales Line No.", lvSalesline);
              SETRANGE("Recipe Group", lvRcpGrp);
              SETRANGE(Recipe, lvRcp);
              IF GET(lvSalesDocType,lvSalesDocno,lvSalesline, lvRcpGrp, lvRcp, CurrLino) THEN BEGIN
                SETFILTER("Line No.", '<%1', CurrLino);
                IF FINDLAST THEN PrevLino := "Line No.";
                SETRANGE("Line No.");
                CheckGap;
              END;
              IF Gap = 0 THEN BEGIN
                Gap := 10000;
                IF FINDLAST THEN
                  CurrLino := "Line No.";
              END;
            END;
          END;
        END ELSE BEGIN
          WITH lvEstRcpLineRec DO BEGIN
            LOCKTABLE;
            SETRANGE("Estimate No.", lvEst);
            SETRANGE("Sub-Estimate No.", lvSubEst);
            SETRANGE("Part Group", lvPartGrp);
            SETRANGE(Part, lvPart);
            SETRANGE("Estimate Line", lvEstLine);
            SETRANGE("Recipe Group", lvRcpGrp);
            SETRANGE(Recipe, lvRcp);
            IF GET(lvEst, lvSubEst, lvPartGrp, lvPart, lvEstLine, lvRcpGrp, lvRcp, CurrLino) THEN BEGIN
              SETFILTER("Line No.", '<%1', CurrLino);
              IF FINDLAST THEN PrevLino := "Line No.";
              SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF FINDLAST THEN
                CurrLino := "Line No.";
            END;
          END;
        END;
      END;
    END;

    PROCEDURE CheckGap@1100485002();
    BEGIN
      Gap := ROUND((CurrLino - PrevLino) / (MarkedLines + 1), 1);
      IF (Gap * MarkedLines) >= (CurrLino - PrevLino) THEN Gap := 0;
      CurrLino := PrevLino;
    END;

    PROCEDURE AssignEstimateToRecipeLine@1100485004(VAR RcpLineRec@1100485000 : Record 11072075;EstLineRec@1100485001 : Record 11072072);
    BEGIN
      WITH RcpLineRec DO BEGIN
        "Cost Type (Price)" := EstLineRec."Cost Type (Price)";
        "Cost Type (Hours)" := EstLineRec."Cost Type (Hours)";  //C040083
        Description := EstLineRec.Description;
        Quantity := EstLineRec.Quantity;
        "Quantity (Sales)" := EstLineRec."Quantity (Sales)";
        "Unit of Measure" := EstLineRec."Unit of Measure";
        "Norm Group" := EstLineRec."Norm Group";
        "Norm Group (Sales)" := EstLineRec."Norm Group (Sales)";
        "Sub Operation Code" := EstLineRec."Sub Operation Code";
        Norm := EstLineRec.Norm;
        "Norm (Sales)" := EstLineRec."Norm (Sales)";
        "Production Rate" := EstLineRec."Production Rate";  //C040083
        "Production Rate (Sales)" := EstLineRec."Production Rate (Sales)";  //C040083
        "Rate Code" := EstLineRec."Rate Code";
        "Cost Rate" := EstLineRec."Cost Rate";
        "Sales Rate" := EstLineRec."Sales Rate";
        "Wage Component" := EstLineRec."Wage Component";  //DP00236
        "Net Cost Price" := EstLineRec."Net Cost Price";
        "Project No." := EstLineRec."Project No.";
        Element := EstLineRec.Element;
        "Project Planning Activity Code" := EstLineRec."Project Planning Activity Code";
        "Cost Object Labor" := EstLineRec."Cost Object Labor";
        "Cost Object Price" := EstLineRec."Cost Object Price";
        "Cost Component" := EstLineRec."Cost Component";
        "Item No." := EstLineRec."Item No.";
        "Basic Item" := EstLineRec."Basic Item";
        "Trade Item" := EstLineRec."Trade Item";
        "Vendor (Trade Item)" := EstLineRec."Vendor (Trade Item)";
        Manufacturer := EstLineRec.Manufacturer;
        "Gross Price" := EstLineRec."Gross Price";
        "Purchase Discount %" := EstLineRec."Purchase Discount %";
        "Net Sales Price" := EstLineRec."Net Sales Price";
        "Sales Discount %" := EstLineRec."Sales Discount %";
        "Price Reference Date" := EstLineRec."Price Reference Date";
        "Rate Type" := EstLineRec."Rate Type";
        "Team Size" := EstLineRec."Team Size";
        "Time Quantity" := EstLineRec."Time Quantity";
        "Unit of Time" := EstLineRec."Unit of Time";
        "Surcharge %" := EstLineRec."Surcharge %";
        "Surcharge Type" := EstLineRec."Surcharge Type";
        "Line Status" := EstLineRec."Line Status";
        Length := EstLineRec.Length;
        Width := EstLineRec.Width;
        Height := EstLineRec.Height;
        "Adjustment Factor Hours" := EstLineRec."Adjustment Factor Hours";
        "Adjustment Factor Price" := EstLineRec."Adjustment Factor Price";
        "Adj. Factor Hours (Sales)" := EstLineRec."Adj. Factor Hours (Sales)";  //DP00555
        "Cum. Adj. Factor Hours" := EstLineRec."Cum. Adj. Factor Hours";
        "Cum. Adj. Factor Price" := EstLineRec."Cum. Adj. Factor Price";
        "Cum. Adj. Factor Hours (Sales)" := EstLineRec."Cum. Adj. Factor Hours (Sales)";  //DP00555
        "External Text" := EstLineRec."External Text";
        "External Text Block" := EstLineRec."External Text Block";
        "Internal Text" := EstLineRec."Internal Text";
        "Internal Text Block" := EstLineRec."Internal Text Block";
        "Ask for Quote" := EstLineRec."Ask for Quote";
        "Purchase Route Reference" := EstLineRec."Purchase Route Reference";
        "Document No." := EstLineRec."Document No.";
        Code := EstLineRec.Code;
        "Price Agreement" := EstLineRec."Price Agreement";
        "Norm Agreement" := EstLineRec."Norm Agreement";
        "Price Agreement (Sales)" := EstLineRec."Price Agreement (Sales)";
        "Norm Agreement (Sales)" := EstLineRec."Norm Agreement (Sales)";
        Vendor := EstLineRec.Vendor;
        Subcontractor := EstLineRec.Subcontractor;
        "Subcontracting Activity" := EstLineRec."Subcontracting Activity";  //DP01492-2
        "Buy Back Price" := EstLineRec."Buy Back Price";
        "Buy Back %" := EstLineRec."Buy Back %";
        "Purchase Discount %" := EstLineRec."Purchase Discount %";
        "Sales Discount %" := EstLineRec."Sales Discount %";
        Weight := EstLineRec.Weight;
        Discipline := EstLineRec.Discipline;
        "Trade Speciality" := EstLineRec."Trade Speciality";
        "Trade Expertise" := EstLineRec."Trade Expertise";
        "Removal Contribution" := EstLineRec."Removal Contribution";
        "Scheme Code" := EstLineRec."Scheme Code";
        Comments := EstLineRec.Comments;
        Supply := EstLineRec.Supply;
        "Comments for Logistics" := EstLineRec."Comments for Logistics";
        "Material Sheet" := EstLineRec."Material Sheet";
        "Plant Rates in Hours":= EstLineRec."Plant Rates in Hours";  //DP01492-5
        "Plant Type" := EstLineRec."Plant Type";
        "Plant Price Type" := EstLineRec."Plant Price Type";
        "Start Rental Period" := EstLineRec."Start Rental Period";
        "End Rental Period" := EstLineRec."End Rental Period";
        "Rental Period Formula" := EstLineRec."Rental Period Formula";
        "Rental Time Units" := EstLineRec."Rental Time Units";
        Admicode := EstLineRec.Admicode;
        //DP01676.sn
        "Purchase Action" := EstLineRec."Purchase Action";
        "Purchase Phase" := EstLineRec."Purchase Phase";
        //DP01676.en
        "Object Type" := EstLineRec."Object Type";
        "Object Brand" := EstLineRec."Object Brand";
        "Surcharge % Labor" := EstLineRec."Surcharge % Labor";  //C016435
        "Surcharge % Price" := EstLineRec."Surcharge % Price";  //C016435
        "Quantity Sheet Feature" := EstLineRec."Quantity Sheet Feature";  //DP00686
      END;
    END;

    PROCEDURE AssignRecipeToEstimateLine@1100485001(VAR EstLineRec@1100485000 : Record 11072072;RcpLineRec@1100485001 : Record 11072075);
    BEGIN
      WITH EstLineRec DO BEGIN
        "Cost Type (Price)" := RcpLineRec."Cost Type (Price)";
        "Cost Type (Hours)" := RcpLineRec."Cost Type (Hours)";  //C040083
        Description := RcpLineRec.Description;
        Quantity := RcpLineRec.Quantity;
        "Quantity (Sales)" := RcpLineRec."Quantity (Sales)";
        "Unit of Measure" := RcpLineRec."Unit of Measure";
        "Norm Group" := RcpLineRec."Norm Group";
        "Norm Group (Sales)" := RcpLineRec."Norm Group (Sales)";
        "Sub Operation Code" := RcpLineRec."Sub Operation Code";
        Norm := RcpLineRec.Norm;
        "Norm (Sales)" := RcpLineRec."Norm (Sales)";
        "Production Rate" := RcpLineRec."Production Rate";  //C040083
        "Production Rate (Sales)" := RcpLineRec."Production Rate (Sales)";  //C040083
        "Rate Code" := RcpLineRec."Rate Code";
        "Cost Rate" := RcpLineRec."Cost Rate";
        "Sales Rate" := RcpLineRec."Sales Rate";
        "Wage Component" := RcpLineRec."Wage Component";  //DP00236
        "Net Cost Price" := RcpLineRec."Net Cost Price";
        "Project No." := RcpLineRec."Project No.";
        Element := RcpLineRec.Element;
        "Project Planning Activity Code" := RcpLineRec."Project Planning Activity Code";
        "Cost Object Labor" := RcpLineRec."Cost Object Labor";
        "Cost Object Price" := RcpLineRec."Cost Object Price";
        "Cost Component" := RcpLineRec."Cost Component";
        "Item No." := RcpLineRec."Item No.";
        "Basic Item" := RcpLineRec."Basic Item";
        "Trade Item" := RcpLineRec."Trade Item";
        "Vendor (Trade Item)" := RcpLineRec."Vendor (Trade Item)";
        Manufacturer := RcpLineRec.Manufacturer;
        "Gross Price" := RcpLineRec."Gross Price";
        "Purchase Discount %" := RcpLineRec."Purchase Discount %";
        "Net Sales Price" := RcpLineRec."Net Sales Price";
        "Sales Discount %" := RcpLineRec."Sales Discount %";
        "Price Reference Date" := RcpLineRec."Price Reference Date";
        "Rate Type" := RcpLineRec."Rate Type";
        "Team Size" := RcpLineRec."Team Size";
        "Time Quantity" := RcpLineRec."Time Quantity";
        "Unit of Time" := RcpLineRec."Unit of Time";
        "Surcharge %" := RcpLineRec."Surcharge %";
        "Surcharge Type" := RcpLineRec."Surcharge Type";
        "Line Status" := RcpLineRec."Line Status";
        Length := RcpLineRec.Length;
        Width := RcpLineRec.Width;
        Height := RcpLineRec.Height;
        "Adjustment Factor Hours" := RcpLineRec."Adjustment Factor Hours";
        "Adjustment Factor Price" := RcpLineRec."Adjustment Factor Price";
        "Adj. Factor Hours (Sales)" := RcpLineRec."Adj. Factor Hours (Sales)";  //DP00555
        "Cum. Adj. Factor Hours" := RcpLineRec."Cum. Adj. Factor Hours";
        "Cum. Adj. Factor Price" := RcpLineRec."Cum. Adj. Factor Price";
        "Cum. Adj. Factor Hours (Sales)" := RcpLineRec."Cum. Adj. Factor Hours (Sales)";  //DP00555
        "External Text" := RcpLineRec."External Text";
        "External Text Block" := RcpLineRec."External Text Block";
        "Internal Text" := RcpLineRec."Internal Text";
        "Internal Text Block" := RcpLineRec."Internal Text Block";
        "Ask for Quote" := RcpLineRec."Ask for Quote";
        "Purchase Route Reference" := RcpLineRec."Purchase Route Reference";
        "Document No." := RcpLineRec."Document No.";
        Code := RcpLineRec.Code;
        "Price Agreement" := RcpLineRec."Price Agreement";
        "Norm Agreement" := RcpLineRec."Norm Agreement";
        "Price Agreement (Sales)" := RcpLineRec."Price Agreement (Sales)";
        "Norm Agreement (Sales)" := RcpLineRec."Norm Agreement (Sales)";
        Vendor := RcpLineRec.Vendor;
        Subcontractor := RcpLineRec.Subcontractor;
        "Subcontracting Activity" := RcpLineRec."Subcontracting Activity";  //DP01492-2
        "Buy Back Price" := RcpLineRec."Buy Back Price";
        "Buy Back %" := RcpLineRec."Buy Back %";
        "Purchase Discount %" := RcpLineRec."Purchase Discount %";
        "Sales Discount %" := RcpLineRec."Sales Discount %";
        Weight := RcpLineRec.Weight;
        Discipline := RcpLineRec.Discipline;
        "Trade Speciality" := RcpLineRec."Trade Speciality";
        "Trade Expertise" := RcpLineRec."Trade Expertise";
        "Removal Contribution" := RcpLineRec."Removal Contribution";
        "Scheme Code" := RcpLineRec."Scheme Code";
        Comments := RcpLineRec.Comments;
        Supply := RcpLineRec.Supply;
        "Comments for Logistics" := RcpLineRec."Comments for Logistics";
        "Material Sheet" := RcpLineRec."Material Sheet";
        "Plant Rates in Hours":= RcpLineRec."Plant Rates in Hours";  //DP01492-5
        "Plant Type" := RcpLineRec."Plant Type";
        "Plant Price Type" := RcpLineRec."Plant Price Type";
        "Start Rental Period" := RcpLineRec."Start Rental Period";
        "End Rental Period" := RcpLineRec."End Rental Period";
        "Rental Period Formula" := RcpLineRec."Rental Period Formula";
        "Rental Time Units" := RcpLineRec."Rental Time Units";
        Admicode := RcpLineRec.Admicode;
        //DP01676.sn
        "Purchase Action" := RcpLineRec."Purchase Action";
        "Purchase Phase" := RcpLineRec."Purchase Phase";
        //DP01676.en
        "Object Type" := RcpLineRec."Object Type";
        "Object Brand" := RcpLineRec."Object Brand";
        "Surcharge % Labor" := RcpLineRec."Surcharge % Labor";  //C016435
        "Surcharge % Price" := RcpLineRec."Surcharge % Price";  //C016435
        "Quantity Sheet Feature" := RcpLineRec."Quantity Sheet Feature";  //DP00686
      END;
    END;

    PROCEDURE GetSalesDiscountEstLine@1100525001(VAR EstLineRec@1100525007 : Record 11072072);
    VAR
      ValidateCu@1100525008 : Codeunit 11012033;
      lvEstRec@1100525000 : Record 11012151;
      lvRefDate@1100525006 : Date;
      lvDiscRef1@1100525005 : Code[20];
      lvDiscRef2@1100525004 : Code[20];
      lvRefPrio@1100525003 : Code[10];
      lvDiscType@1100525001 : 'Purchase,Sales';
    BEGIN
      //C006745
      WITH EstLineRec DO BEGIN
        lvEstRec.GET("Estimate No.");
        GetReferenceData(lvRefDate, lvDiscRef1, lvDiscRef2, lvEstRec, lvDiscType::Sales);
        lvRefPrio := ValidateCu.GetRefPrioEstimate(lvEstRec, lvDiscType::Sales);
        ValidateCu.GetSalesDiscount(
          lvEstRec."Customer No.", "Item No.", "Basic Item", "Trade Item", Manufacturer, "Vendor (Trade Item)",
          "Net Sales Price", "Sales Discount %", "Gross Price", lvRefDate, lvEstRec."Customer Disc. Group",
          lvDiscRef1, lvDiscRef2, lvRefPrio);
        VALIDATE("Net Sales Price");
        UpdateSalesPriceFromCostPrice;  //C019587
        CalculateTotals;
      END;
    END;

    PROCEDURE GetSalesDiscountRcpLine@1100525000(VAR RcpLineRec@1100525007 : Record 11072075);
    VAR
      ValidateCu@1100525008 : Codeunit 11012033;
      lvEstRec@1100525000 : Record 11012151;
      lvRefDate@1100525006 : Date;
      lvDiscRef1@1100525005 : Code[20];
      lvDiscRef2@1100525004 : Code[20];
      lvRefPrio@1100525003 : Code[10];
      lvDiscType@1100525001 : 'Purchase,Sales';
    BEGIN
      //C006745
      WITH RcpLineRec DO BEGIN
        lvEstRec.GET("Estimate No.");
        GetReferenceData(lvRefDate, lvDiscRef1, lvDiscRef2, lvEstRec, lvDiscType::Sales);
        lvRefPrio := ValidateCu.GetRefPrioEstimate(lvEstRec, lvDiscType::Sales);
        ValidateCu.GetSalesDiscount(
          lvEstRec."Customer No.", "Item No.", "Basic Item", "Trade Item", Manufacturer, "Vendor (Trade Item)",
          "Net Sales Price", "Sales Discount %", "Gross Price", lvRefDate, lvEstRec."Customer Disc. Group",
          lvDiscRef1, lvDiscRef2, lvRefPrio);
        UpdateSalesPriceFromCostPrice;  //C019587
        CalculateTotals;
      END;
    END;

    PROCEDURE CopyDetails@1100528901(EstFrom@1210190013 : Code[20];SubEstFrom@1210190011 : Code[20];PartGrpFrom@1210190009 : Code[20];EstPartFrom@1210190007 : Code[20];EstLineFrom@1210190005 : Integer;RecipeGrpFrom@1210190003 : Code[20];RecipeFrom@1210190001 : Code[20];RecipeLineFrom@1100485000 : Integer;EstTo@1210190012 : Code[20];SubEstTo@1210190010 : Code[20];PartGrpTo@1210190008 : Code[20];EstPartTo@1210190006 : Code[20];EstLineTo@1210190004 : Integer;RecipeGrpTo@1210190002 : Code[20];RecipeTo@1210190000 : Code[20];RecipeLineTo@1100485001 : Integer;CopyRecipeLine@1100528900 : Boolean);
    VAR
      EstimateLine@1100528921 : Record 11072072;
      BaseRecipeLine@1100528901 : Record 11020582;
      BaseRecipeLine2@1100528926 : Record 11020582;
      EstimateRecipeLine@1100528917 : Record 11072075;
      EstimateRecipeLine2@1100528916 : Record 11072075;
      TextRec@1100528915 : Record 11020595;
      TextRec2@1100528914 : Record 11020595;
      EstCodeRec@1100528913 : Record 11229772;
      EstCodeRec2@1100528912 : Record 11229772;
      ChrgRec@1100528911 : Record 11229771;
      ChrgRec2@1100528910 : Record 11229771;
      QuanSheetRec@1100528909 : Record 11012186;
      QuanSheetRec2@1100528908 : Record 11012186;
      QuanModelRec@1100528907 : Record 11012197;
      QuanModelRec2@1100528906 : Record 11012197;
      EstSetup@1100525000 : Record 11012150;
    BEGIN
      EstSetup.GET;  //C009772
      IF CopyRecipeLine = TRUE THEN BEGIN
        IF (EstFrom = '') AND (EstTo = '') THEN BEGIN
          IF RecipeGrpFrom <> '' THEN
            BaseRecipeLine.SETRANGE("Recipe Group",RecipeGrpFrom);
          IF RecipeFrom <> '' THEN
            BaseRecipeLine.SETRANGE(Recipe,RecipeFrom);
          IF RecipeLineFrom <> 0 THEN
            BaseRecipeLine.SETRANGE("Line No.",RecipeLineFrom);
          IF BaseRecipeLine.FINDSET THEN BEGIN
            REPEAT
              BaseRecipeLine2.COPY(BaseRecipeLine);
              IF (RecipeGrpFrom + RecipeFrom) <> (RecipeGrpTo + RecipeTo) THEN BEGIN
                BaseRecipeLine2."Recipe Group" := RecipeGrpTo;
                IF RecipeTo <> '' THEN
                  BaseRecipeLine2.Recipe := RecipeTo;
              END;
              BaseRecipeLine2.INSERT(TRUE);
              BaseRecipeLine2."Attached to Line No." := BaseRecipeLine."Attached to Line No.";  //C051625: cleared by insert-trigger
              BaseRecipeLine2.Description := BaseRecipeLine.Description;  //C046429
              BaseRecipeLine2."Unit of Measure" := BaseRecipeLine."Unit of Measure";  //C044586
              BaseRecipeLine2."Norm Agreement" := BaseRecipeLine."Norm Agreement";
              BaseRecipeLine2."Price Agreement" := BaseRecipeLine."Price Agreement";
              BaseRecipeLine2."Norm Agreement (Sales)" := BaseRecipeLine."Norm Agreement (Sales)";
              BaseRecipeLine2."Price Agreement (Sales)" := BaseRecipeLine."Price Agreement (Sales)";
              //C040083.sn
              BaseRecipeLine2.Norm := BaseRecipeLine.Norm;
              //BaseRecipeLine2."Norm (Sales)" := BaseRecipeLine."Norm (Sales)";
              BaseRecipeLine2."Production Rate" := BaseRecipeLine."Production Rate";
              //BaseRecipeLine2."Production Rate (Sales)" := BaseRecipeLine."Production Rate (Sales)";
              //C040083.en
              BaseRecipeLine2.MODIFY(TRUE);
            UNTIL BaseRecipeLine.NEXT = 0;
          END;
        END ELSE BEGIN
          IF (EstFrom <> '') AND (EstTo <> '') THEN BEGIN
            EstimateRecipeLine.SETRANGE("Estimate No.",EstFrom);
            EstimateRecipeLine.SETRANGE("Sub-Estimate No.",SubEstFrom);
            EstimateRecipeLine.SETRANGE("Part Group",PartGrpFrom);
            EstimateRecipeLine.SETRANGE(Part,EstPartFrom);
            EstimateRecipeLine.SETRANGE("Estimate Line",EstLineFrom);
            IF RecipeGrpFrom <> '' THEN
              EstimateRecipeLine.SETRANGE("Recipe Group",RecipeGrpFrom);
            IF RecipeFrom <> '' THEN
              EstimateRecipeLine.SETRANGE(Recipe,RecipeFrom);
            IF RecipeLineFrom <> 0 THEN
              EstimateRecipeLine.SETRANGE("Line No.",RecipeLineFrom);
            IF EstimateRecipeLine.FINDSET THEN BEGIN
              REPEAT
                EstimateRecipeLine2.COPY(EstimateRecipeLine);
                EstimateRecipeLine2."Estimate No." := EstTo;
                EstimateRecipeLine2."Sub-Estimate No." := SubEstTo;
                EstimateRecipeLine2."Part Group" := PartGrpTo;
                EstimateRecipeLine2.Part := EstPartTo;
                EstimateRecipeLine2."Estimate Line" := EstLineTo;
                IF (RecipeGrpFrom + RecipeFrom) <> (RecipeGrpTo + RecipeTo) THEN BEGIN
                  EstimateRecipeLine2."Recipe Group" := RecipeGrpTo;
                  IF RecipeTo <> '' THEN
                    EstimateRecipeLine2.Recipe := RecipeTo;
                END;
                EstimateRecipeLine2.SetSkipLinkedRecipe(TRUE);  //C053864
                EstimateRecipeLine2.INSERT(TRUE);
                EstimateRecipeLine2.SetSkipLinkedRecipe(FALSE);  //C053864
                EstimateRecipeLine2."Attached to Line No." := EstimateRecipeLine."Attached to Line No.";  //C051625: cleared by insert-trigger
                EstimateRecipeLine2.Description := EstimateRecipeLine.Description;  //C046429
                EstimateRecipeLine2."Unit of Measure" := EstimateRecipeLine."Unit of Measure";  //C044586
                //C055577.sn
                IF EstimateRecipeLine."Surcharge % Labor" <> 0 THEN
                  EstimateRecipeLine2."Surcharge % Labor" := EstimateRecipeLine."Surcharge % Labor";
                IF EstimateRecipeLine."Surcharge % Price" <> 0 THEN
                  EstimateRecipeLine2."Surcharge % Price" :=  EstimateRecipeLine."Surcharge % Price";
                IF CopyPriceAgreement THEN BEGIN
                  EstimateRecipeLine2."Norm Agreement" := EstimateRecipeLine."Norm Agreement";
                  EstimateRecipeLine2."Price Agreement" := EstimateRecipeLine."Price Agreement";
                  EstimateRecipeLine2."Norm Agreement (Sales)" := EstimateRecipeLine."Norm Agreement (Sales)";
                  EstimateRecipeLine2."Price Agreement (Sales)" := EstimateRecipeLine."Price Agreement (Sales)";
                END;
                //C055577.en
                //C040083.sn
                EstimateRecipeLine2.Norm := EstimateRecipeLine.Norm;
                EstimateRecipeLine2."Norm (Sales)" := EstimateRecipeLine."Norm (Sales)";
                EstimateRecipeLine2."Production Rate" := EstimateRecipeLine."Production Rate";
                EstimateRecipeLine2."Production Rate (Sales)" := EstimateRecipeLine."Production Rate (Sales)";
                //C040083.en
                //C009772.sn
                IF EstSetup."Copy Norm Group from Target" THEN
                  CheckDefaultNormGroup(EstimateLine, EstimateRecipeLine2, TRUE);
                //C009772.en
                //C055577.sn
                IF EstimateRecipeLine2."Currency Code" = '' THEN
                  EstimateRecipeLine2.VALIDATE("Gross Price")
                ELSE BEGIN
                  EstimateRecipeLine2.SetSkipValidateFCY(TRUE);
                  EstimateRecipeLine2.VALIDATE("Gross Price (FCY)");
                END;
                GetSalesDiscountRcpLine(EstimateRecipeLine2);
                IF PriceMethodBasedOnSurcharge(EstimateRecipeLine2."Estimate No.") THEN //C063348
                  EstimateRecipeLine2.InitSalesFromCost(FALSE);
                //C055577.en
                EstimateRecipeLine2.CalculateTotals;  //C040083
                EstimateRecipeLine2.MODIFY(TRUE);
              UNTIL EstimateRecipeLine.NEXT = 0;
              EstimateRecipeLine2.UpdateEstLines;
            END;
          END ELSE BEGIN
            IF (EstFrom <> '') AND (EstTo = '') THEN BEGIN  //copy estimate recipe to base recipe
              EstimateRecipeLine.SETRANGE("Estimate No.",EstFrom);
              EstimateRecipeLine.SETRANGE("Sub-Estimate No.",SubEstFrom);
              EstimateRecipeLine.SETRANGE("Part Group",PartGrpFrom);
              EstimateRecipeLine.SETRANGE(Part,EstPartFrom);
              EstimateRecipeLine.SETRANGE("Estimate Line",EstLineFrom);
              IF RecipeGrpFrom <> '' THEN
                EstimateRecipeLine.SETRANGE("Recipe Group",RecipeGrpFrom);
              IF RecipeFrom <> '' THEN
                EstimateRecipeLine.SETRANGE(Recipe,RecipeFrom);
              IF RecipeLineFrom <> 0 THEN
                EstimateRecipeLine.SETRANGE("Line No.",RecipeLineFrom);
              IF EstimateRecipeLine.FINDSET THEN BEGIN
                REPEAT
                  BaseRecipeLine2.TRANSFERFIELDS(EstimateRecipeLine);
                  IF (RecipeGrpFrom + RecipeFrom) <> (RecipeGrpTo + RecipeTo) THEN BEGIN
                    BaseRecipeLine2."Recipe Group" := RecipeGrpTo;
                    IF RecipeTo <> '' THEN
                      BaseRecipeLine2.Recipe := RecipeTo;
                  END;
                  BaseRecipeLine2.INSERT(TRUE);
                  BaseRecipeLine2."Attached to Line No." := EstimateRecipeLine."Attached to Line No.";  //C051625: cleared by insert-trigger
                  BaseRecipeLine2.Description := EstimateRecipeLine.Description;  //C046429
                  BaseRecipeLine2."Unit of Measure" := EstimateRecipeLine."Unit of Measure";  //C044586
                  BaseRecipeLine2.MODIFY;
                UNTIL EstimateRecipeLine.NEXT = 0;
              END;
            END ELSE BEGIN
              IF (EstFrom = '') AND (EstTo <> '') THEN BEGIN  //copy base recipe to estimate recipe
                //C042683
                IF RecipeGrpFrom <> '' THEN
                  BaseRecipeLine.SETRANGE("Recipe Group",RecipeGrpFrom);
                IF RecipeFrom <> '' THEN
                  BaseRecipeLine.SETRANGE(Recipe,RecipeFrom);
                IF RecipeLineFrom <> 0 THEN
                  BaseRecipeLine.SETRANGE("Line No.",RecipeLineFrom);
                IF BaseRecipeLine.FINDSET THEN BEGIN
                  REPEAT
                    EstimateRecipeLine.TRANSFERFIELDS(BaseRecipeLine);
                    EstimateRecipeLine."Estimate No." := gvEst;
                    EstimateRecipeLine."Sub-Estimate No." := gvSubEst;
                    EstimateRecipeLine."Part Group" := gvPartGrp;
                    EstimateRecipeLine.Part := gvPart;
                    EstimateRecipeLine."Estimate Line" := gvEstLine;
                    EstimateRecipeLine."Recipe Group" := gvRcpGrp;
                    EstimateRecipeLine.Recipe := gvRcp;
                    EstimateRecipeLine.INSERT(TRUE);
                    EstimateRecipeLine."Attached to Line No." := BaseRecipeLine."Attached to Line No.";  //C051625: cleared by insert-trigger
                    EstimateRecipeLine.Description := BaseRecipeLine.Description;  //C046429
                    EstimateRecipeLine."Unit of Measure" := BaseRecipeLine."Unit of Measure";  //C044586
                    EstimateRecipeLine."Norm Agreement" := BaseRecipeLine."Norm Agreement";
                    EstimateRecipeLine."Price Agreement" := BaseRecipeLine."Price Agreement";
                    EstimateRecipeLine."Norm Agreement (Sales)" := BaseRecipeLine."Norm Agreement (Sales)";
                    EstimateRecipeLine."Price Agreement (Sales)" := BaseRecipeLine."Price Agreement (Sales)";
                    EstimateRecipeLine.Norm := BaseRecipeLine.Norm;
                    EstimateRecipeLine."Norm (Sales)" := EstimateRecipeLine.Norm;
                    EstimateRecipeLine."Production Rate" := BaseRecipeLine."Production Rate";
                    EstimateRecipeLine."Production Rate (Sales)" := EstimateRecipeLine."Production Rate";
                    EstimateRecipeLine.CalculateTotals;
                    EstimateRecipeLine.MODIFY(TRUE);
                  UNTIL BaseRecipeLine.NEXT = 0;
                END;
              END;
            END;
          END;
        END;
      END;

      IF CopyRecipeLine = TRUE THEN BEGIN
        ChrgRec.SETRANGE("Estimate No.",EstFrom);
        ChrgRec.SETRANGE("Sub-Estimate No.",SubEstFrom);
        ChrgRec.SETRANGE("Part Group",PartGrpFrom);
        ChrgRec.SETRANGE(Part,EstPartFrom);
        ChrgRec.SETRANGE("Recipe Line",EstLineFrom);
        IF RecipeGrpFrom <> '' THEN
          ChrgRec.SETRANGE("Recipe Group",RecipeGrpFrom);
        IF RecipeFrom <> '' THEN
          ChrgRec.SETRANGE(Recipe,RecipeFrom);
        IF RecipeLineFrom <> 0 THEN
          ChrgRec.SETRANGE("Recipe Line",RecipeLineFrom);
        IF ChrgRec.FINDSET THEN BEGIN
          REPEAT
            ChrgRec2.COPY(ChrgRec);
            ChrgRec2."Estimate No." := EstTo;
            ChrgRec2."Sub-Estimate No." := SubEstTo;
            ChrgRec2."Part Group" := PartGrpTo;
            ChrgRec2.Part := EstPartTo;
            ChrgRec2."Recipe Line" := EstLineTo;
            IF (RecipeGrpFrom + RecipeFrom) <> (RecipeGrpTo + RecipeTo) THEN BEGIN
              ChrgRec2."Recipe Group" := RecipeGrpTo;
              IF RecipeTo <> '' THEN
                ChrgRec2.Recipe := RecipeTo;
              IF RecipeLineTo <> 0 THEN
                ChrgRec2."Recipe Line" := RecipeLineTo;
            END;
            ChrgRec2.INSERT(TRUE);  //C010706
          UNTIL ChrgRec.NEXT = 0;
        END;
      END;

      QuanSheetRec.SETRANGE("Estimate No.",EstFrom);
      QuanSheetRec.SETRANGE("Sub-Estimate No.",SubEstFrom);
      QuanSheetRec.SETRANGE("Part Group",PartGrpFrom);
      QuanSheetRec.SETRANGE(Part,EstPartFrom);
      QuanSheetRec.SETRANGE("Estimate Line",EstLineFrom);
      IF RecipeGrpFrom <> '' THEN
        QuanSheetRec.SETRANGE("Recipe Group",RecipeGrpFrom);
      IF RecipeFrom <> '' THEN
        QuanSheetRec.SETRANGE(Recipe,RecipeFrom);
      IF RecipeLineFrom <> 0 THEN
        QuanSheetRec.SETRANGE("Recipe Line",RecipeLineFrom);
      IF QuanSheetRec.FINDSET THEN BEGIN
        REPEAT
          QuanSheetRec2.COPY(QuanSheetRec);
          QuanSheetRec2."Estimate No." := EstTo;
          QuanSheetRec2."Sub-Estimate No." := SubEstTo;
          QuanSheetRec2."Part Group" := PartGrpTo;
          QuanSheetRec2.Part := EstPartTo;
          QuanSheetRec2."Estimate Line" := EstLineTo;
          IF (RecipeGrpFrom + RecipeFrom) <> (RecipeGrpTo + RecipeTo) THEN BEGIN
            QuanSheetRec2."Recipe Group" := RecipeGrpTo;
            IF RecipeTo <> '' THEN
              QuanSheetRec2.Recipe := RecipeTo;
            IF RecipeLineTo <> 0 THEN
              QuanSheetRec2."Recipe Line" := RecipeLineTo;
          END;
          QuanSheetRec2.INSERT;
        UNTIL QuanSheetRec.NEXT = 0;
      END;

      QuanModelRec.SETRANGE("Estimate No.",EstFrom);
      QuanModelRec.SETRANGE("Sub-Estimate No.",SubEstFrom);
      QuanModelRec.SETRANGE("Part Group",PartGrpFrom);
      QuanModelRec.SETRANGE(Part,EstPartFrom);
      QuanModelRec.SETRANGE("Estimate Line",EstLineFrom);
      IF QuanModelRec.FINDSET THEN BEGIN
        REPEAT
          QuanModelRec2.COPY(QuanModelRec);
          QuanModelRec2."Estimate No." := EstTo;
          QuanModelRec2."Sub-Estimate No." := SubEstTo;
          QuanModelRec2."Part Group" := PartGrpTo;
          QuanModelRec2.Part := EstPartTo;
          QuanModelRec2."Estimate Line" := EstLineTo;
          QuanModelRec2.INSERT;
        UNTIL QuanModelRec.NEXT = 0;
      END;

      TextRec.SETRANGE("Estimate No.",EstFrom);
      TextRec.SETRANGE("Sub-Estimate No.",SubEstFrom);
      TextRec.SETRANGE("Part Group",PartGrpFrom);
      TextRec.SETRANGE(Part,EstPartFrom);
      TextRec.SETRANGE("Estimate Line No.",EstLineFrom);
      IF EstFrom <> '' THEN BEGIN
        //text only available for recipe header (or estimate line with recipecode)
        TextRec.SETRANGE(Group, '');
        TextRec.SETRANGE("No.", '');
        IF RecipeLineFrom <> 0 THEN
          TextRec.SETFILTER("Line No.", '<%1', 0);  //disable copy from buffer for recipe line;
      END ELSE BEGIN
        IF RecipeGrpFrom <> '' THEN
          TextRec.SETRANGE(Group,RecipeGrpFrom);
        IF RecipeFrom <> '' THEN
          TextRec.SETRANGE("No.",RecipeFrom);
      END;
      IF TextRec.FINDSET THEN BEGIN
        REPEAT
          TextRec2.COPY(TextRec);
          TextRec2."Estimate No." := EstTo;
          TextRec2."Sub-Estimate No." := SubEstTo;
          TextRec2."Part Group" := PartGrpTo;
          TextRec2.Part := EstPartTo;
          TextRec2."Estimate Line No." := EstLineTo;
          IF (RecipeGrpFrom + RecipeFrom) <> (RecipeGrpTo + RecipeTo) THEN BEGIN
            TextRec2.Group := RecipeGrpTo;
            IF RecipeTo <> '' THEN
              TextRec2."No." := RecipeTo;
            //IF RecipeLineTo <> 0 THEN
            //  TextRec2."Recipe Line" := RecipeLineTo;
          END;
          //IF TextRec2.INSERT THEN;  //db, 06-12-11 (error with copy text from estimate line, while copy recipe lines from buffer)
        UNTIL TextRec.NEXT = 0;
      END;

      EstCodeRec.SETRANGE("Estimate No.",EstFrom);
      EstCodeRec.SETRANGE("Sub-Estimate No.",SubEstFrom);
      EstCodeRec.SETRANGE("Part Group",PartGrpFrom);
      EstCodeRec.SETRANGE(Part,EstPartFrom);
      EstCodeRec.SETRANGE("Estimate Line",EstLineFrom);
      IF RecipeGrpFrom <> '' THEN
        EstCodeRec.SETRANGE("Recipe Group",RecipeGrpFrom);
      IF RecipeFrom <> '' THEN
        EstCodeRec.SETRANGE(Recipe,RecipeFrom);
      IF RecipeLineFrom <> 0 THEN
        EstCodeRec.SETRANGE("Recipe Line",RecipeLineFrom);
      IF EstCodeRec.FINDSET THEN BEGIN
        REPEAT
          EstCodeRec2.COPY(EstCodeRec);
          EstCodeRec2."Estimate No." := EstTo;
          EstCodeRec2."Sub-Estimate No." := SubEstTo;
          EstCodeRec2."Part Group" := PartGrpTo;
          EstCodeRec2.Part := EstPartTo;
          EstCodeRec2."Estimate Line" := EstLineTo;
          IF ((RecipeGrpFrom + RecipeFrom) <> (RecipeGrpTo + RecipeTo)) OR
             (RecipeLineFrom <> RecipeLineTo) THEN BEGIN  //DP01855
            EstCodeRec2."Recipe Group" := RecipeGrpTo;
            IF RecipeTo <> '' THEN
              EstCodeRec2.Recipe := RecipeTo;
            IF RecipeLineTo <> 0 THEN
              EstCodeRec2."Recipe Line" := RecipeLineTo;
          END;
          EstCodeRec2.INSERT;
        UNTIL EstCodeRec.NEXT = 0;
      END;
    END;

    PROCEDURE CheckDefaultNormGroup@1100525002(VAR DestEstLineRec@1100525011 : Record 11072072;VAR DestRcpLineRec@1100525010 : Record 11072075;RcpBln@1100525005 : Boolean);
    VAR
      EstRecTo@1100525001 : Record 11012151;
      SubEstRecTo@1100525000 : Record 11072074;
      EstPartRecTo@1100525002 : Record 11072073;
      EstTo@1100525006 : Code[20];
      SubEstTo@1100525007 : Code[20];
      PartGrpTo@1100525008 : Code[20];
      PartTo@1100525009 : Code[20];
      NormGroup@1100525003 : Code[20];
      NormGroupSales@1100525004 : Code[20];
    BEGIN
      //C009772
      IF RcpBln THEN BEGIN
        EstTo := DestRcpLineRec."Estimate No.";
        SubEstTo := DestRcpLineRec."Sub-Estimate No.";
        PartGrpTo := DestRcpLineRec."Part Group";
        PartTo := DestRcpLineRec.Part;
      END ELSE BEGIN
        EstTo := DestEstLineRec."Estimate No.";
        SubEstTo := DestEstLineRec."Sub-Estimate No.";
        PartGrpTo := DestEstLineRec."Part Group";
        PartTo := DestEstLineRec.Part;
      END;

      EstRecTo.GET(EstTo);
      SubEstRecTo.GET(EstTo,SubEstTo);
      EstPartRecTo.GET(EstTo,SubEstTo,PartGrpTo,PartTo);

      IF EstPartRecTo."Norm Group" <> '' THEN
        NormGroup := EstPartRecTo."Norm Group"
      ELSE
        IF SubEstRecTo."Norm Group" <> '' THEN
          NormGroup := SubEstRecTo."Norm Group"
        ELSE
          NormGroup := EstRecTo."Norm Group";

      IF EstPartRecTo."Norm Group (Sales)" <> '' THEN
        NormGroupSales := EstPartRecTo."Norm Group (Sales)"
      ELSE
        IF SubEstRecTo."Norm Group (Sales)" <> '' THEN
          NormGroupSales := SubEstRecTo."Norm Group (Sales)"
        ELSE
          NormGroupSales := EstRecTo."Norm Group (Sales)";

      IF RcpBln THEN BEGIN
        IF NormGroup <> '' THEN
          DestRcpLineRec.VALIDATE("Norm Group", NormGroup);
        IF NormGroupSales <> '' THEN
          DestRcpLineRec.VALIDATE("Norm Group (Sales)", NormGroupSales);
      END ELSE BEGIN
        IF NormGroup <> '' THEN
          DestEstLineRec.VALIDATE("Norm Group", NormGroup);
        IF NormGroupSales <> '' THEN
          DestEstLineRec.VALIDATE("Norm Group (Sales)", NormGroupSales);
      END;
    END;

    LOCAL PROCEDURE PriceMethodBasedOnSurcharge@1100528903(EstimateNo@1100528900 : Code[20]) : Boolean;
    VAR
      Estimate@1100528901 : Record 11012151;
      EstimateSetup@1100528902 : Record 11012150;
    BEGIN
      //C063348
      IF NOT Estimate.GET(EstimateNo) THEN Estimate.INIT;
      IF Estimate."Item Sales Price Based On" = Estimate."Item Sales Price Based On"::GrossMin THEN
        EXIT(FALSE);

      EstimateSetup.GET;
      EXIT(EstimateSetup."Init Sales From Cost");
    END;

    BEGIN
    {
      db, 24-11-14: maintenance interval/relation removed
    }
    END.
  }
}

