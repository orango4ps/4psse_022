OBJECT Report 99001043 Exchange Production BOM Item
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.04;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Fert.-StÅckliste Artikel ersetzen;
               ENU=Exchange Production BOM Item;
               NLD=Prod.-stuklijstartikel vervangen;
               NOR=Bytt ut prod.stykklistevare;
               SVE=Byt ut artikel i prod.struktur];
    ApplicationArea=#Manufacturing;
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   Recertify := TRUE;
                   CopyRoutingLink := TRUE;
                 END;

    OnPreReport=BEGIN
                  IF StartingDate = 0D THEN
                    ERROR(Text000);

                  IF Type[1] = Type[1]::" " THEN
                    ERROR(Text001);

                  IF No[1] = '' THEN
                    ERROR(Text002);

                  IF (Type[1] = Type[2]) AND (No[1] = No[2]) THEN
                    ERROR(ItemBOMExchangeErr,SELECTSTR(Type[1] + 1,TypeTxt),No[1],SELECTSTR(Type[2] + 1,TypeTxt),No[2]);
                END;

    UsageCategory=Tasks;
  }
  DATASET
  {
    { 5444;    ;DataItem;                    ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number);
               MaxIteration=1;
               OnPostDataItem=VAR
                                ProdBOMHeader2@1000 : Record 99000771;
                                FirstVersion@1001 : Boolean;
                              BEGIN
                                Window.OPEN(
                                  Text004 +
                                  Text005);

                                Window.UPDATE(1,SELECTSTR(Type[1] + 1,TypeTxt));
                                Window.UPDATE(2,No[1]);

                                ProdBOMLine.SETCURRENTKEY(Type,"No.");
                                ProdBOMLine.SETRANGE(Type,Type[1]);
                                ProdBOMLine.SETRANGE("No.",No[1]);

                                IF ProdBOMLine.FIND('+') THEN
                                  REPEAT
                                    FirstVersion := TRUE;
                                    ProdBOMHeader.GET(ProdBOMLine."Production BOM No.");
                                    IF ProdBOMLine."Version Code" <> '' THEN BEGIN
                                      ProdBOMVersionList.GET(
                                        ProdBOMLine."Production BOM No.",ProdBOMLine."Version Code");
                                      ProdBOMHeader.Status := ProdBOMVersionList.Status;
                                      ProdBOMHeader2 := ProdBOMHeader;
                                      ProdBOMHeader2."Unit of Measure Code" := ProdBOMVersionList."Unit of Measure Code";
                                    END ELSE BEGIN
                                      ProdBOMVersionList.SETRANGE("Production BOM No.");
                                      ProdBOMVersionList."Version Code" := '';
                                      ProdBOMHeader2 := ProdBOMHeader;
                                    END;

                                    IF IsActiveBOMVersion(ProdBOMHeader,ProdBOMLine) THEN BEGIN
                                      Window.UPDATE(3,ProdBOMLine."Production BOM No.");
                                      IF NOT CreateNewVersion THEN BEGIN
                                        IF ProdBOMLine."Version Code" <> '' THEN BEGIN
                                          ProdBOMVersionList.Status := ProdBOMVersionList.Status::"Under Development";
                                          ProdBOMVersionList.MODIFY;
                                          ProdBOMVersionList.MARK(TRUE);
                                        END ELSE BEGIN
                                          ProdBOMHeader.Status := ProdBOMHeader.Status::"Under Development";
                                          ProdBOMHeader.MODIFY;
                                          ProdBOMHeader.MARK(TRUE);
                                        END;
                                      END ELSE BEGIN
                                        IF ProdBOMLine."Production BOM No." <> ProdBOMLine2."Production BOM No." THEN BEGIN
                                          ProdBOMVersionList.SETRANGE("Production BOM No.",ProdBOMLine."Production BOM No.");

                                          IF ProdBOMVersionList.FIND('+') THEN
                                            ProdBOMVersionList."Version Code" := IncrementVersionNo(ProdBOMVersionList."Production BOM No.")
                                          ELSE BEGIN
                                            ProdBOMVersionList."Production BOM No." := ProdBOMLine."Production BOM No.";
                                            ProdBOMVersionList."Version Code" := '1';
                                          END;
                                          ProdBOMVersionList.Description := ProdBOMHeader2.Description;
                                          ProdBOMVersionList.VALIDATE("Starting Date",StartingDate);
                                          ProdBOMVersionList."Unit of Measure Code" := ProdBOMHeader2."Unit of Measure Code";
                                          ProdBOMVersionList."Last Date Modified" := TODAY;
                                          ProdBOMVersionList.Status := ProdBOMVersionList.Status::New;
                                          IF  ProdBOMHeader2."Version Nos." <> '' THEN BEGIN
                                            ProdBOMVersionList."No. Series" := ProdBOMHeader2."Version Nos.";
                                            ProdBOMVersionList."Version Code" := '';
                                            ProdBOMVersionList.INSERT(TRUE);
                                          END ELSE
                                            ProdBOMVersionList.INSERT;
                                          ProdBOMVersionList.MARK(TRUE);
                                          ProdBOMLine3.RESET;
                                          ProdBOMLine3.SETRANGE("Production BOM No.",ProdBOMLine."Production BOM No.");
                                          ProdBOMLine3.SETRANGE("Version Code",ProdBOMLine."Version Code");
                                          IF ProdBOMLine3.FIND('-') THEN
                                            REPEAT
                                              IF (ProdBOMLine.Type <> ProdBOMLine3.Type) OR
                                                 (ProdBOMLine."No." <> ProdBOMLine3."No.")
                                              THEN BEGIN
                                                ProdBOMLine2 := ProdBOMLine3;
                                                ProdBOMLine2."Version Code" := ProdBOMVersionList."Version Code";
                                                ProdBOMLine2.INSERT;
                                              END;
                                            UNTIL ProdBOMLine3.NEXT = 0;
                                        END ELSE
                                          FirstVersion := FALSE;
                                      END;

                                      IF (No[2] <> '') AND FirstVersion THEN
                                        IF CreateNewVersion THEN BEGIN
                                          ProdBOMLine3.SETCURRENTKEY("Production BOM No.","Version Code");
                                          ProdBOMLine3.SETRANGE(Type,Type[1]);
                                          ProdBOMLine3.SETRANGE("No.",No[1]);
                                          ProdBOMLine3.SETRANGE("Production BOM No.",ProdBOMLine."Production BOM No.");
                                          ProdBOMLine3.SETRANGE("Version Code",ProdBOMLine."Version Code");
                                          IF ProdBOMLine3.FIND('-') THEN
                                            REPEAT
                                              ProdBOMLine2 := ProdBOMLine3;
                                              ProdBOMLine2."Version Code" := ProdBOMVersionList."Version Code";
                                              ProdBOMLine2.VALIDATE(Type,Type[2]);
                                              ProdBOMLine2.VALIDATE("No.",No[2]);
                                              ProdBOMLine2.VALIDATE("Quantity per",ProdBOMLine3."Quantity per" * QtyMultiply);
                                              IF CopyRoutingLink THEN
                                                ProdBOMLine2.VALIDATE("Routing Link Code",ProdBOMLine3."Routing Link Code");
                                              CopyPositionFields(ProdBOMLine2,ProdBOMLine3);
                                              ProdBOMLine2."Ending Date" := 0D;
                                              OnBeforeInsertNewProdBOMLine(ProdBOMLine2,ProdBOMLine3);
                                              ProdBOMLine2.INSERT;
                                            UNTIL ProdBOMLine3.NEXT = 0;
                                        END ELSE BEGIN
                                          ProdBOMLine3.SETRANGE("Production BOM No.",ProdBOMLine."Production BOM No.");
                                          ProdBOMLine3.SETRANGE("Version Code",ProdBOMVersionList."Version Code");
                                          IF NOT ProdBOMLine3.FIND('+') THEN
                                            CLEAR(ProdBOMLine3);
                                          ProdBOMLine3."Line No." := ProdBOMLine3."Line No." + 10000;
                                          ProdBOMLine2 := ProdBOMLine;
                                          ProdBOMLine2."Version Code" := ProdBOMVersionList."Version Code";
                                          ProdBOMLine2."Line No." := ProdBOMLine3."Line No.";
                                          ProdBOMLine2.VALIDATE(Type,Type[2]);
                                          ProdBOMLine2.VALIDATE("No.",No[2]);
                                          ProdBOMLine2.VALIDATE("Quantity per",ProdBOMLine."Quantity per" * QtyMultiply);
                                          IF CopyRoutingLink THEN
                                            ProdBOMLine2.VALIDATE("Routing Link Code",ProdBOMLine."Routing Link Code");
                                          IF NOT CreateNewVersion THEN
                                            ProdBOMLine2."Starting Date" := StartingDate;
                                          CopyPositionFields(ProdBOMLine2,ProdBOMLine3);
                                          ProdBOMLine2."Ending Date" := 0D;
                                          OnBeforeInsertNewProdBOMLine(ProdBOMLine2,ProdBOMLine3);
                                          ProdBOMLine2.INSERT;
                                          IF DeleteExcComp THEN
                                            ProdBOMLine.DELETE(TRUE)
                                          ELSE BEGIN
                                            ProdBOMLine."Ending Date" := StartingDate - 1;
                                            ProdBOMLine.MODIFY;
                                          END;
                                        END;
                                    END;
                                  UNTIL ProdBOMLine.NEXT(-1) = 0;
                              END;
                               }

    { 5317;    ;DataItem;RecertifyLoop       ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number);
               MaxIteration=1;
               OnAfterGetRecord=BEGIN
                                  IF Recertify THEN BEGIN
                                    ProdBOMHeader.MARKEDONLY(TRUE);
                                    IF ProdBOMHeader.FIND('-') THEN
                                      REPEAT
                                        ProdBOMHeader.VALIDATE(Status,ProdBOMHeader.Status::Certified);
                                        ProdBOMHeader.MODIFY;
                                      UNTIL ProdBOMHeader.NEXT = 0;

                                    ProdBOMVersionList.SETRANGE("Production BOM No.");
                                    ProdBOMVersionList.MARKEDONLY(TRUE);
                                    IF ProdBOMVersionList.FIND('-') THEN
                                      REPEAT
                                        ProdBOMVersionList.VALIDATE(Status,ProdBOMVersionList.Status::Certified);
                                        ProdBOMVersionList.MODIFY;
                                      UNTIL ProdBOMVersionList.NEXT = 0;
                                  END;
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnInit=BEGIN
               DeleteExchangedComponentEditab := TRUE;
               CreateNewVersionEditable := TRUE;
               CreateNewVersion := TRUE;
               QtyMultiply := 1;
               StartingDate := WORKDATE;
             END;

      OnOpenPage=BEGIN
                   CreateNewVersionEditable := NOT DeleteExcComp;
                   DeleteExchangedComponentEditab := NOT CreateNewVersion;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DEU=Optionen;
                             ENU=Options;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 4   ;2   ;Group     ;
                  CaptionML=[DEU=Ersetze;
                             ENU=Exchange;
                             NLD=Uitwisselen;
                             NOR=Bytt ut;
                             SVE=Byt] }

      { 5   ;3   ;Field     ;
                  Name=ExchangeType;
                  CaptionML=[DEU=Art;
                             ENU=Type;
                             NLD=Soort;
                             NOR=Type;
                             SVE=Typ];
                  ToolTipML=[DEU=Gibt an, was ausgewechselt werden muss: Artikel oder FertigungsstÅckliste.;
                             ENU=Specifies what is to be exchanged here - Item or Production BOM.;
                             NLD=Hiermee wordt opgegeven wat moet worden uitgewisseld: artikel of productiestuklijst.;
                             NOR=Angir hva som skal byttes ut - vare eller produksjonsstykkliste.;
                             SVE=Anger vad som ska bytas ut, en artikel- eller produktionsstruktur.];
                  OptionCaptionML=[DEU=" ,Artikel,PhantomstÅckliste";
                                   ENU=" ,Item,Production BOM";
                                   NLD=" ,Artikel,Productiestuklijst";
                                   NOR=" ,Vare,Produksjonsstykkliste";
                                   SVE=" ,Artikel,Prod.struktur"];
                  ApplicationArea=#Manufacturing;
                  SourceExpr=Type[1];
                  OnValidate=BEGIN
                               No[1] := '';
                             END;
                              }

      { 1   ;3   ;Field     ;
                  Name=ExchangeNo;
                  CaptionML=[DEU=Nr.;
                             ENU=No.;
                             NLD=Nr.;
                             NOR=Nr.;
                             SVE=Nr];
                  ToolTipML=[DEU=Gibt die Nummer des Artikels an.;
                             ENU=Specifies the number of the item.;
                             NLD=Hiermee wordt het nummer van het artikel opgegeven.;
                             NOR=Angir nummeret pÜ varen.;
                             SVE=Anger artikelns nummer.];
                  ApplicationArea=#Manufacturing;
                  SourceExpr=No[1];
                  OnValidate=BEGIN
                               IF Type[1] = Type::" " THEN
                                 ERROR(Text006);

                               CASE Type[1] OF
                                 Type[1]::Item:
                                   Item.GET(No[1]);
                                 Type[1]::"Production BOM":
                                   ProdBOMHeader.GET(No[1]);
                               END;
                             END;

                  OnLookup=BEGIN
                             CASE Type[1] OF
                               Type[1]::Item:
                                 IF PAGE.RUNMODAL(0,Item) = ACTION::LookupOK THEN BEGIN
                                   Text := Item."No.";
                                   EXIT(TRUE);
                                 END;
                               Type[1]::"Production BOM":
                                 IF PAGE.RUNMODAL(0,ProdBOMHeader) = ACTION::LookupOK THEN BEGIN
                                   Text := ProdBOMHeader."No.";
                                   EXIT(TRUE);
                                 END;
                             END;
                           END;
                            }

      { 8   ;2   ;Group     ;
                  CaptionML=[DEU=Durch;
                             ENU=With;
                             NLD=Met;
                             NOR=Med;
                             SVE=Med] }

      { 12  ;3   ;Field     ;
                  Name=WithType;
                  CaptionML=[DEU=Art;
                             ENU=Type;
                             NLD=Soort;
                             NOR=Type;
                             SVE=Typ];
                  ToolTipML=[DEU=Gibt Ihre neue Auswahl an, die ersetzt, was Sie im Feld  Datenaustauschart  selektiert haben: Artikel oder FertigungsstÅckliste.;
                             ENU=Specifies your new selection that will replace what you selected in the Exchange Type field - Item or Production BOM.;
                             NLD=Hiermee wordt uw nieuwe selectie opgegeven die vervangt wat u in het veld Uit te wisselen soort hebt geselecteerd: artikel of productiestuklijst.;
                             NOR=Angir ditt nye valg som skal erstatte det du valgte i feltet Bytt ut type - vare eller produksjonsstykkliste.;
                             SVE=Anger vad som ska ersÑtta det du har valt i fÑltet Byt typ, en artikel- eller produktionsstruktur.];
                  OptionCaptionML=[DEU=" ,Artikel,PhantomstÅckliste";
                                   ENU=" ,Item,Production BOM";
                                   NLD=" ,Artikel,Productiestuklijst";
                                   NOR=" ,Vare,Produksjonsstykkliste";
                                   SVE=" ,Artikel,Prod.struktur"];
                  ApplicationArea=#Manufacturing;
                  SourceExpr=Type[2];
                  OnValidate=BEGIN
                               No[2] := '';
                             END;
                              }

      { 9   ;3   ;Field     ;
                  Name=WithNo;
                  CaptionML=[DEU=Nr.;
                             ENU=No.;
                             NLD=Nr.;
                             NOR=Nr.;
                             SVE=Nr];
                  ToolTipML=[DEU=Gibt die Nummer des Artikels an.;
                             ENU=Specifies the number of the item.;
                             NLD=Hiermee wordt het nummer van het artikel opgegeven.;
                             NOR=Angir nummeret pÜ varen.;
                             SVE=Anger artikelns nummer.];
                  ApplicationArea=#Manufacturing;
                  SourceExpr=No[2];
                  OnValidate=BEGIN
                               IF Type[1] = Type::" " THEN
                                 ERROR(Text006);

                               CASE Type[2] OF
                                 Type[2]::Item:
                                   Item.GET(No[2]);
                                 Type[2]::"Production BOM":
                                   ProdBOMHeader.GET(No[2]);
                               END;
                             END;

                  OnLookup=BEGIN
                             CASE Type[2] OF
                               Type[2]::Item:
                                 IF PAGE.RUNMODAL(0,Item) = ACTION::LookupOK THEN BEGIN
                                   Text := Item."No.";
                                   EXIT(TRUE);
                                 END;
                               Type[2]::"Production BOM":
                                 IF PAGE.RUNMODAL(0,ProdBOMHeader) = ACTION::LookupOK THEN BEGIN
                                   Text := ProdBOMHeader."No.";
                                   EXIT(TRUE);
                                 END;
                             END;
                             EXIT(FALSE);
                           END;
                            }

      { 15  ;2   ;Field     ;
                  Name=Create New Version;
                  CaptionML=[DEU=Neue Version erstellen;
                             ENU=Create New Version;
                             NLD=Nieuwe versie maken;
                             NOR=Opprett ny versjon;
                             SVE=Skapa ny version];
                  ToolTipML=[DEU=Gibt an, ob Sie den Austausch in einer neuen Version ausfÅhren mîchten.;
                             ENU=Specifies if you want to make the exchange in a new version.;
                             NLD=Hiermee wordt opgegeven of u de uitwisseling wilt uitvoeren in een nieuwe versie.;
                             NOR=Angir om du vil foreta byttet i en ny versjon.;
                             SVE=Anger om du vill gîra bytet i en ny version.];
                  ApplicationArea=#Manufacturing;
                  SourceExpr=CreateNewVersion;
                  Editable=CreateNewVersionEditable;
                  OnValidate=BEGIN
                               CreateNewVersionOnAfterValidat;
                             END;
                              }

      { 13  ;2   ;Field     ;
                  Name=MultiplyQtyWith;
                  CaptionML=[DEU=Menge multiplizieren mit;
                             ENU=Multiply Qty. with;
                             NLD=Aantal vermenigvuldigen met;
                             NOR=Gang ant. med;
                             SVE=Multipelkvantitet];
                  ToolTipML=[DEU=Gibt den Wert einer geÑnderten Anzahl an. Wenn die Anzahl gleich bleiben muss, tragen Sie 1 ein. Wenn Sie z.B. 2 eintragen, wird die neue Anzahl hinsichtlich der ursprÅnglichen Anzahl verdoppelt.;
                             ENU=Specifies the value of a quantity change here. If the quantity is to remain the same, enter 1 here. If you enter 2, the new quantities doubled in comparison with original quantity.;
                             NLD=Hiermee wordt hier de waarde van een gewijzigd aantal opgegeven. Als het aantal hetzelfde moet blijven, voert u 1 in. Als u bijvoorbeeld 2 invoert, wordt het nieuwe aantal verdubbeld ten opzichte van het oorspronkelijke aantal.;
                             NOR=Angir verdien av en antallsendring. Hvis antallet skal vëre det samme, angir du 1. Hvis du angir 2, dobles det nye antallet sammenlignet med det opprinnelige antallet.;
                             SVE=Anger vÑrdet fîr antalsfîrÑndringen. Skriv 1 om antalet ska vara detsamma. Om du anger 2, dubbleras antalet jÑmfîrt med det ursprungliga antalet.];
                  ApplicationArea=#Manufacturing;
                  DecimalPlaces=0:5;
                  SourceExpr=QtyMultiply }

      { 3   ;2   ;Field     ;
                  Name=StartingDate;
                  CaptionML=[DEU=Startdatum;
                             ENU=Starting Date;
                             NLD=Begindatum;
                             NOR=Startdato;
                             SVE=Startdatum];
                  ToolTipML=[DEU=Gibt das Datum an, ab dem die énderungen wirksam werden sollen.;
                             ENU=Specifies the date from which these changes are to become valid.;
                             NLD=Hiermee wordt de datum opgegeven vanaf wanneer de wijzigingen van kracht moeten worden.;
                             NOR=Angir fra hvilken dato disse endringene skal vëre gyldige.;
                             SVE=Anger frÜn och med vilket datum Ñndringarna ska vara giltiga.];
                  ApplicationArea=#Manufacturing;
                  SourceExpr=StartingDate }

      { 19  ;2   ;Field     ;
                  Name=Recertify;
                  CaptionML=[DEU=Zertifizieren;
                             ENU=Recertify;
                             NLD=Opnieuw certificeren;
                             NOR=Bekreft pÜ nytt;
                             SVE=GodkÑnn];
                  ToolTipML=[DEU=Gibt an, ob die FertigungsstÅckliste nach der énderung zertifiziert werden muss.;
                             ENU=Specifies if you want the production BOM to be certified after the change.;
                             NLD=Hiermee wordt opgegeven of de productiestuklijst moet worden gecertificeerd na de wijziging.;
                             NOR=Angir om du vil at produksjonsstykklisten skal bekreftes etter endringen.;
                             SVE=Anger om du vill att produktionsstrukturen ska godkÑnnas efter Ñndringen.];
                  ApplicationArea=#Manufacturing;
                  SourceExpr=Recertify }

      { 17  ;2   ;Field     ;
                  Name=CopyRoutingLink;
                  CaptionML=[DEU=Verbindung kopieren;
                             ENU=Copy Routing Link;
                             NLD=Bewerkingsplankoppeling kopiâren;
                             NOR=Kopier rutekobling;
                             SVE=Kopiera oper.fîljdslÑnk];
                  ToolTipML=[DEU=Gibt an, ob Sie mîchten, dass die ArbeitsplanverknÅpfung kopiert werden soll.;
                             ENU=Specifies whether or not you want the routing link copied.;
                             NLD=Hiermee wordt opgegeven of u wilt dat de bewerkingsplankoppeling wordt gekopieerd.;
                             NOR=Angir om du vil at rutekoblingen skal kopieres eller ikke.;
                             SVE=Anger om du vill att operationsfîljdslÑnken ska kopieras eller inte.];
                  ApplicationArea=#Manufacturing;
                  SourceExpr=CopyRoutingLink }

      { 21  ;2   ;Field     ;
                  Name=Delete Exchanged Component;
                  CaptionML=[DEU=Ausgetauschte Komp. lîschen;
                             ENU=Delete Exchanged Component;
                             NLD=Vervangen materiaal verwijderen;
                             NOR=Slett komponent som er byttet ut;
                             SVE=Ta bort utbytt komponent];
                  ToolTipML=[DEU=Gibt an, ob Sie mîchten, dass das zu ersetzende Material gelîscht wird.;
                             ENU=Specifies whether you want the exchanged component deleted.;
                             NLD=Hiermee wordt opgegeven of u wilt dat het vervangen materiaal wordt verwijderd.;
                             NOR=Angir om du vil at den byttede komponenten skal slettes eller ikke.;
                             SVE=Anger om du vill att den utbytta komponenten ska tas bort.];
                  ApplicationArea=#Manufacturing;
                  SourceExpr=DeleteExcComp;
                  Editable=DeleteExchangedComponentEditab;
                  OnValidate=BEGIN
                               DeleteExcCompOnAfterValidate;
                             END;
                              }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'DEU=Sie mÅssen ein Startdatum eing.;ENU=You must enter a Starting Date.;NLD=U moet een Begindatum opgeven.;NOR=Du mÜ angi en startdato.;SVE=Du mÜste ange ett startdatum.';
      Text001@1001 : TextConst 'DEU=Sie mÅssen die Art der zu ersetzenden Position angeben.;ENU=You must enter the Type to exchange.;NLD=U moet de te vervangen Soort invullen.;NOR=Du mÜ angi hvilken type som skal byttes ut.;SVE=Du mÜste ange vilken typ som ska bytas ut.';
      Text002@1002 : TextConst 'DEU=Sie mÅssen die Nr. der zu ersetzenden Position angeben.;ENU=You must enter the No. to exchange.;NLD=U moet de te vervangen Nr. invullen.;NOR=Du mÜ angi hvilket nr. som skal byttes ut.;SVE=Du mÜste ange det nr som ska bytas ut.';
      ItemBOMExchangeErr@1003 : TextConst '@@@=%1 and %3 are strings (''Item'' or ''Production BOM''), %2 and %4 are either an Item No. or a Production BOM Header No. (Code[20]);DEU=Sie kînnen %1 %2 nicht mit %3 %4 ersetzen.;ENU=You cannot exchange %1 %2 with %3 %4.;NLD=U kunt %1 %2 niet vervangen door %3 %4.;NOR=Du kan ikke bytte ut %1 %2 med %3 %4.;SVE=Du kan inte byta ut %1 %2 med %3 %4.';
      Text004@1004 : TextConst 'DEU=Ersetze                 #1########## #2############\;ENU=Exchanging #1########## #2############\;NLD=Vervangen               #1########## #2############\;NOR=Bytter ut               #1########## #2############\;SVE=Byter                   #1########## #2############\';
      Text005@1005 : TextConst 'DEU=Fert.-StÅcklistennr.    #3############;ENU=Production BOM No.      #3############;NLD=Prod.-stuklijstnr.      #3############;NOR=Prod.stykklistenr.      #3############;SVE=Prod.strukturnr         #3############';
      Text006@1006 : TextConst 'DEU=Art muss eingegeben werden.;ENU=Type must be entered.;NLD=Soort moet ingevuld worden.;NOR=Du mÜ angi type.;SVE=Typ mÜste anges.';
      Item@1007 : Record 27;
      ProdBOMHeader@1008 : Record 99000771;
      ProdBOMVersionList@1009 : Record 99000779;
      ProdBOMLine@1010 : Record 99000772;
      ProdBOMLine2@1011 : Record 99000772;
      ProdBOMLine3@1012 : Record 99000772;
      Window@1013 : Dialog;
      Type@1014 : ARRAY [2] OF ' ,Item,Production BOM';
      No@1015 : ARRAY [2] OF Code[20];
      QtyMultiply@1016 : Decimal;
      CreateNewVersion@1017 : Boolean;
      StartingDate@1018 : Date;
      Recertify@1019 : Boolean;
      TypeTxt@1020 : TextConst 'DEU=" ,Artikel,PhantomstÅckliste";ENU=" ,Item,Production BOM";NLD=" ,Artikel,Prod.-stuklijst";NOR=" ,Vare,Produksjonsstykkliste";SVE=" ,Artikel,Prod.struktur"';
      CopyRoutingLink@1021 : Boolean;
      DeleteExcComp@1022 : Boolean;
      CreateNewVersionEditable@19037184 : Boolean INDATASET;
      DeleteExchangedComponentEditab@19075716 : Boolean INDATASET;

    LOCAL PROCEDURE CreateNewVersionOnAfterValidat@19007803();
    BEGIN
      CreateNewVersionEditable := NOT DeleteExcComp;
      DeleteExchangedComponentEditab := NOT CreateNewVersion;
    END;

    LOCAL PROCEDURE DeleteExcCompOnAfterValidate@19039897();
    BEGIN
      CreateNewVersionEditable := NOT DeleteExcComp;
      DeleteExchangedComponentEditab := NOT CreateNewVersion;
    END;

    LOCAL PROCEDURE IsActiveBOMVersion@1(ProdBOMHeader@1000 : Record 99000771;ProdBOMLine@1003 : Record 99000772) : Boolean;
    VAR
      VersionManagement@1002 : Codeunit 99000756;
    BEGIN
      IF ProdBOMHeader.Status = ProdBOMHeader.Status::Closed THEN
        EXIT(FALSE);

      EXIT(ProdBOMLine."Version Code" = VersionManagement.GetBOMVersion(ProdBOMLine."Production BOM No.",StartingDate,TRUE));
    END;

    LOCAL PROCEDURE IncrementVersionNo@5(ProductionBOMNo@1000 : Code[20]) Result : Code[20];
    VAR
      ProductionBOMVersion@1001 : Record 99000779;
    BEGIN
      ProductionBOMVersion.SETRANGE("Production BOM No.",ProductionBOMNo);
      IF ProductionBOMVersion.FINDLAST THEN BEGIN
        Result := INCSTR(ProductionBOMVersion."Version Code");
        ProductionBOMVersion.SETRANGE("Version Code",Result);
        WHILE NOT ProductionBOMVersion.ISEMPTY DO BEGIN
          Result := INCSTR(Result);
          IF Result = '' THEN
            EXIT(Result);
          ProductionBOMVersion.SETRANGE("Version Code",Result);
        END;
      END;
    END;

    LOCAL PROCEDURE CopyPositionFields@3(VAR ProdBOMLineCopyTo@1001 : Record 99000772;ProdBOMLineCopyFrom@1000 : Record 99000772);
    BEGIN
      IF (ProdBOMLineCopyTo.Type <> ProdBOMLineCopyTo.Type::Item) OR (ProdBOMLineCopyFrom.Type <> ProdBOMLineCopyFrom.Type::Item) THEN
        EXIT;
      ProdBOMLineCopyTo.VALIDATE(Position,ProdBOMLineCopyFrom.Position);
      ProdBOMLineCopyTo.VALIDATE("Position 2",ProdBOMLineCopyFrom."Position 2");
      ProdBOMLineCopyTo.VALIDATE("Position 3",ProdBOMLineCopyFrom."Position 3");
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInsertNewProdBOMLine@2(VAR ProductionBOMLine@1000 : Record 99000772;FromProductionBOMLine@1001 : Record 99000772);
    BEGIN
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

