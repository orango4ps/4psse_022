OBJECT Table 11020502 Plant Rate Code
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               PlantSetupRec.GET;
               PlantSetupRec.TESTFIELD("Rate Codes", TRUE);
             END;

    OnRename=BEGIN
               RenameRateCode();
             END;

    CaptionML=[ENU=Rate Code;
               NOR=Avgiftskode;
               SVE=Avgiftskod];
    LookupPageID=Page11020504;
  }
  FIELDS
  {
    { 10  ;   ;Code                ;Code10        ;CaptionML=[ENU=Code;
                                                              NOR=Kode;
                                                              SVE=Kod];
                                                   NotBlank=Yes }
    { 20  ;   ;Description         ;Text30        ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 30  ;   ;Percentage          ;Decimal       ;InitValue=100;
                                                   CaptionML=[ENU=Percentage;
                                                              NOR=Prosent;
                                                              SVE=Procent];
                                                   MinValue=0 }
    { 40  ;   ;Hour Rate from      ;Option        ;CaptionML=[ENU=Hour Rate from;
                                                              NOR=Timesats fra;
                                                              SVE=Timavgift fr†n];
                                                   OptionCaptionML=[ENU=Plant,Employee;
                                                                    NOR=Maskin,Ansatt;
                                                                    SVE=Maskin,anst„lld];
                                                   OptionString=Plant,Employee }
    { 60  ;   ;Mobilization        ;Boolean       ;CaptionML=ENU=Mobilization }
    { 100 ;   ;Copy to Location    ;Boolean       ;CaptionML=[ENU=Copy to Location;
                                                              NOR=Kopier til lokasjon;
                                                              SVE=Kopiera till lagerst„lle] }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      PlantSetupRec@1100525000 : Record 11012550;
      Text001@1100525001 : TextConst 'ENU=Rate Codeis ''%1'' already present.;NOR=Satskode ''%1'' finnes allerede.;SVE=Avgiftskod ''%1'' finns redan.';
      PercentageFilter@1100525002 : Text[30];

    PROCEDURE CheckPlantRateCode@1100525002(PlantLocation@1100525000 : Code[20];PlantRateCode@1100525001 : Code[10];ErrorMode@1100525002 : Boolean;PlantCompany@1100525003 : Text[30];ApplyMobilizationFilter@1100529000 : 'NoFilter,FilterFalse,FilterTrue') : Boolean;
    VAR
      PlantRateCodeRec@1100525004 : Record 11020502;
      PlantLocRateCodeRec@1100525005 : Record 11020551;
      MobilizationFilter@1100529001 : Boolean;
    BEGIN
      //* Option value ApplyMobilizationFilter: 0=No filter, 1=Filter on False, 2=Filter on true
      IF ApplyMobilizationFilter = ApplyMobilizationFilter::FilterTrue THEN
        MobilizationFilter := TRUE;
      IF NOT RateCodesByLocation(PlantLocation, PlantCompany) THEN BEGIN
        IF (PlantCompany <> '') AND (PlantCompany <> COMPANYNAME) THEN
          PlantRateCodeRec.CHANGECOMPANY(PlantCompany);
        IF ErrorMode THEN
          PlantRateCodeRec.GET(PlantRateCode)
        ELSE BEGIN
          IF NOT PlantRateCodeRec.GET(PlantRateCode) THEN
            EXIT(FALSE);
        END;
        IF (ApplyMobilizationFilter <> ApplyMobilizationFilter::NoFilter) AND (PlantRateCodeRec.Mobilization <> MobilizationFilter) THEN BEGIN
          IF ErrorMode THEN
            PlantRateCodeRec.TESTFIELD(Mobilization, MobilizationFilter);
          EXIT(FALSE);
        END;
      END ELSE BEGIN
        IF (PlantCompany <> '') AND (PlantCompany <> COMPANYNAME) THEN
          PlantLocRateCodeRec.CHANGECOMPANY(PlantCompany);
        IF ErrorMode THEN
          PlantLocRateCodeRec.GET(PlantLocation, PlantRateCode)
        ELSE BEGIN
          IF NOT PlantLocRateCodeRec.GET(PlantLocation, PlantRateCode) THEN
            EXIT(FALSE);
        END;
        IF (ApplyMobilizationFilter <> ApplyMobilizationFilter::NoFilter) AND (PlantLocRateCodeRec.Mobilization <> MobilizationFilter) THEN BEGIN
          IF ErrorMode THEN
            PlantLocRateCodeRec.TESTFIELD(Mobilization, MobilizationFilter);
          EXIT(FALSE);
        END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE GetDefaultRateCodeRental@1100525008(PlantLocation@1100525000 : Code[20];ErrorMode@1100525002 : Boolean;PlantCompany@1100525003 : Text[30]) : Code[10];
    VAR
      PlantSetup@1100525001 : Record 11012550;
      PlantLocRateCode@1100525005 : Record 11020551;
    BEGIN
      //DP00485 C009408
      IF (PlantCompany <> '') AND (PlantCompany <> COMPANYNAME) THEN
        PlantSetup.CHANGECOMPANY(PlantCompany);
      PlantSetup.GET;
      IF PlantSetup."Rate Codes" THEN BEGIN
        IF NOT RateCodesByLocation(PlantLocation, PlantCompany) THEN BEGIN
          IF ErrorMode THEN
            PlantSetup.TESTFIELD("Default Rate Code Rental");
          EXIT(PlantSetup."Default Rate Code Rental");
        END ELSE BEGIN
          IF (PlantCompany <> '') AND (PlantCompany <> COMPANYNAME) THEN
            PlantLocRateCode.CHANGECOMPANY(PlantCompany);
          PlantLocRateCode.SETRANGE(Location, PlantLocation);
          PlantLocRateCode.SETRANGE("Default Rate Code Rental", TRUE);
          IF ErrorMode THEN BEGIN
            PlantLocRateCode.FINDFIRST;
            PlantLocRateCode.TESTFIELD("Rate Code");
            EXIT(PlantLocRateCode."Rate Code");
          END ELSE BEGIN
            IF PlantLocRateCode.FINDFIRST THEN
              EXIT(PlantLocRateCode."Rate Code");
          END;
        END;
      END;
      EXIT('');
    END;

    PROCEDURE ReadPlantRateCode@1100525003(PlantLocation@1100525000 : Code[20];PlantRateCode@1100525001 : Code[10];PlantCompany@1100525003 : Text[30]) : Boolean;
    VAR
      PlantRateCodeRec@1100525004 : Record 11020502;
      PlantLocRateCodeRec@1100525005 : Record 11020551;
      LevelRateCode@1100525002 : Integer;
    BEGIN
      LevelRateCode := ReadPlantRateCodeLevel(PlantLocation,PlantRateCode,PlantCompany,PlantRateCodeRec,PlantLocRateCodeRec);
      CASE LevelRateCode OF
        1:
          BEGIN
            Rec := PlantRateCodeRec;
            EXIT(TRUE);
          END;
        2:
          BEGIN
            INIT;
            Code := PlantLocRateCodeRec."Rate Code";
            Description := PlantLocRateCodeRec.Description;
            Percentage := PlantLocRateCodeRec.Percentage;
            "Hour Rate from" := PlantLocRateCodeRec."Hour Rate from";
            Mobilization := PlantLocRateCodeRec.Mobilization;
            EXIT(TRUE);
          END;
      END;
      EXIT(FALSE);
    END;

    PROCEDURE ReadPlantRateCodeLevel@1100525004(PlantLocation@1100525000 : Code[20];PlantRateCode@1100525001 : Code[10];PlantCompany@1100525003 : Text[30];VAR PlantRateCodeRec@1100525004 : Record 11020502;VAR PlantLocRateCodeRec@1100525002 : Record 11020551) : Integer;
    BEGIN
      //* Return values
      //* - Level: 0=Rate code not found, 1=Rate code found on standard level, 2=Rate code found on location level
      //* - PlantRateCodeRec only if level=1, else init values
      //* - PlantLocRateCodeRec only if level=2, else init values

      PlantRateCodeRec.RESET;
      PlantLocRateCodeRec.RESET;
      PlantRateCodeRec.INIT;
      PlantLocRateCodeRec.INIT;

      IF NOT RateCodesByLocation(PlantLocation, PlantCompany) THEN BEGIN
        IF (PlantCompany <> '') AND (PlantCompany <> COMPANYNAME) THEN
          PlantRateCodeRec.CHANGECOMPANY(PlantCompany);
        IF PlantRateCodeRec.GET(PlantRateCode) THEN
          EXIT(1);
      END ELSE BEGIN
        IF (PlantCompany <> '') AND (PlantCompany <> COMPANYNAME) THEN
          PlantLocRateCodeRec.CHANGECOMPANY(PlantCompany);
        IF PlantLocRateCodeRec.GET(PlantLocation, PlantRateCode) THEN
          EXIT(2);
      END;
      EXIT(0);
    END;

    PROCEDURE ExpandRateCodeOnInput@1100525006(VAR Text@1100525000 : Text[10];PlantLocation@1100525002 : Code[20];PlantCompany@1100525003 : Text[30]);
    VAR
      PlantRateCodeRec@1100525005 : Record 11020502;
      PlantLocRateCodeRec@1100525004 : Record 11020551;
      AlphaNumeric@1100525008 : Boolean;
      Pos@1100525006 : Integer;
      Len@1100525007 : Integer;
      RateCode@1100525001 : Code[10];
    BEGIN
      //* Because of 'Rate codes by location' the TableRelation on 'Rate Code' fields are deleted,
      //* therefore the standard 'Expand function' on input for alpha numeric codes does not work.
      RateCode := Text;
      IF RateCode = '' THEN
        EXIT;

      Len := STRLEN(RateCode);
      REPEAT
        Pos := Pos + 1;
        IF COPYSTR(RateCode, Pos, 1) IN ['A'..'Z'] THEN
          AlphaNumeric := TRUE;
      UNTIL (Pos = Len) OR AlphaNumeric;
      IF NOT AlphaNumeric THEN
        EXIT;
      IF CheckPlantRateCode(PlantLocation, RateCode, FALSE, PlantCompany, 0) THEN
        EXIT;

      IF NOT RateCodesByLocation(PlantLocation, PlantCompany) THEN BEGIN
        IF (PlantCompany <> '') AND (PlantCompany <> COMPANYNAME) THEN
          PlantRateCodeRec.CHANGECOMPANY(PlantCompany);
        PlantRateCodeRec.SETFILTER(Code, RateCode + '*');
        IF PlantRateCodeRec.FINDFIRST THEN
          Text := PlantRateCodeRec.Code;
      END ELSE BEGIN
        IF (PlantCompany <> '') AND (PlantCompany <> COMPANYNAME) THEN
          PlantLocRateCodeRec.CHANGECOMPANY(PlantCompany);
        PlantLocRateCodeRec.SETRANGE(Location, PlantLocation);
        PlantLocRateCodeRec.SETFILTER("Rate Code", RateCode + '*');
        IF PlantLocRateCodeRec.FINDFIRST THEN
          Text := PlantLocRateCodeRec."Rate Code";
      END;
    END;

    PROCEDURE LookupPlantRateWithPercFilter@1100525007(PlantLocation@1100525000 : Code[20];PlantRateCode@1100525001 : Code[10];EditableMode@1100525002 : Boolean;PlantCompany@1100525003 : Text[30];PercFilter@1100525004 : Text[30]) : Code[10];
    BEGIN
      //Used for Rental Free Orders. There only with percentage 0% (start rental free) or unequal 0% (end rental free) allowed.
      PercentageFilter := PercFilter;
      EXIT(LookupPlantRateCode(PlantLocation, PlantRateCode, EditableMode, PlantCompany, 0));
    END;

    PROCEDURE LookupPlantRateCode@1100525000(PlantLocation@1100525000 : Code[20];PlantRateCode@1100525001 : Code[10];EditableMode@1100525002 : Boolean;PlantCompany@1100525003 : Text[30];ApplyMobilizationFilter@1100529001 : 'NoFilter,FilterFalse,FilterTrue') : Code[10];
    VAR
      PlantRateCodeRec@1100525004 : Record 11020502;
      PlantLocRateCodeRec@1100525005 : Record 11020551;
      MobilizationFilter@1100529000 : Boolean;
      PercFilter@1100525006 : Text[30];
    BEGIN
      //* Option value ApplyMobilizationFilter: 0=No filter, 1=Filter on False, 2=Filter on true
      IF ApplyMobilizationFilter = ApplyMobilizationFilter::FilterTrue THEN
        MobilizationFilter := TRUE;
      IF PercentageFilter <> '' THEN BEGIN
        PercFilter := PercentageFilter;
        PercentageFilter := '';
      END;
      IF NOT RateCodesByLocation(PlantLocation, PlantCompany) THEN BEGIN
        IF (PlantCompany <> '') AND (PlantCompany <> COMPANYNAME) THEN
          PlantRateCodeRec.CHANGECOMPANY(PlantCompany);
        PlantRateCodeRec.Code := PlantRateCode;
        IF ApplyMobilizationFilter <> ApplyMobilizationFilter::NoFilter THEN
          PlantRateCodeRec.SETRANGE(Mobilization, MobilizationFilter);
        IF PercFilter <> '' THEN
          PlantRateCodeRec.SETFILTER(Percentage, PercFilter);
        IF PAGE.RUNMODAL(0, PlantRateCodeRec) = ACTION::LookupOK THEN BEGIN
          IF EditableMode AND (PlantRateCodeRec.Code <> '') THEN
            EXIT(PlantRateCodeRec.Code);
        END;
      END ELSE BEGIN
        IF (PlantCompany <> '') AND (PlantCompany <> COMPANYNAME) THEN
          PlantLocRateCodeRec.CHANGECOMPANY(PlantCompany);
        PlantLocRateCodeRec.FILTERGROUP(9);
        PlantLocRateCodeRec.SETRANGE(Location, PlantLocation);
        PlantLocRateCodeRec.FILTERGROUP(0);
        IF ApplyMobilizationFilter <> ApplyMobilizationFilter::NoFilter THEN
          PlantLocRateCodeRec.SETRANGE(Mobilization, MobilizationFilter);
        IF PercFilter <> '' THEN
          PlantLocRateCodeRec.SETFILTER(Percentage, PercFilter);
        PlantLocRateCodeRec.Location := PlantLocation;
        PlantLocRateCodeRec."Rate Code" := PlantRateCode;
        IF PAGE.RUNMODAL(0, PlantLocRateCodeRec) = ACTION::LookupOK THEN BEGIN
          IF EditableMode AND (PlantLocRateCodeRec.Location = PlantLocation) AND (PlantLocRateCodeRec."Rate Code" <> '') THEN
            EXIT(PlantLocRateCodeRec."Rate Code");
        END;
      END;
      EXIT(PlantRateCode);
    END;

    PROCEDURE RateCodesByLocation@1100525001(PlantLocation@1100525000 : Code[20];PlantCompany@1100525002 : Text[30]) : Boolean;
    VAR
      PlantLocRec@1100525001 : Record 11012554;
    BEGIN
      IF PlantLocation = '' THEN
        EXIT(FALSE);
      IF (PlantCompany <> '') AND (PlantCompany <> COMPANYNAME) THEN
        PlantLocRec.CHANGECOMPANY(PlantCompany);
      IF NOT PlantLocRec.GET(PlantLocation) THEN
        EXIT(FALSE);
      EXIT(PlantLocRec."Rate Codes by Location");
    END;

    PROCEDURE RenameRateCode@1100525005();
    VAR
      PlantRateCodeRec@1100525001 : Record 11020502;
      SalesLineRec@1100525000 : Record 37;
      SalesInvoiceLineRec@1100525002 : Record 113;
      SalesCredMemLineRec@1100525003 : Record 115;
      HourAccLineRec@1100525004 : Record 11012039;
      PostedHourAccLineRec@1100525005 : Record 11012085;
      HourAccSurchRec@1100525006 : Record 11020308;
      PlantInventRec@1100525007 : Record 11012555;
      PlantInventRec2@1100525019 : Record 11012555;
      ExitOrderLineRec@1100525008 : Record 11012560;
      ReturnLossOrderLineRec@1100525023 : Record 11012656;
      PlantOrderRec@1100525009 : Record 11012556;
      PlantOrderLineRec@1100525010 : Record 11012557;
      PlantOrderReceiptLine@1100529000 : Record 11020493;
      RentalCorrRec@1100525011 : Record 11012565;
      RentalCorrLineRec@1100525012 : Record 11012566;
      PlantHrsRevLineRec@1100525013 : Record 11012574;
      PlantRequestRec@1100525014 : Record 11020520;
      PlantReqLineRec@1100525015 : Record 11020521;
      PlantRentalFreeOrderRec@1100525022 : Record 11020552;
      PlantRentalFreeOrderLineRec@1100525021 : Record 11020553;
      PlantLedgEntryRec@1100525016 : Record 11012572;
      PlantRateCompEntryRec@1100525017 : Record 11020501;
      SalesPlantInvoiceHistRec@1100525018 : Record 11012788;
      SalesPlantInvoiceHistRec2@1100525020 : Record 11012788;
    BEGIN
      //* See also table "Plant Location Rate Code" (T11020551)
      //* Because some locations can have "Rate Codes" by location the TableRelation can not be used anymore.
      //* Therefore in all tables with Rate Codes the property TableRelation is deleted.
      //* So rename is done here for standard Rate Codes (if not "Rate Codes by Location" for the plant location).
      IF (Code = xRec.Code) OR (xRec.Code = '') THEN
        EXIT;
      IF PlantRateCodeRec.GET(Code) THEN
        ERROR(Text001, Code);


      SalesLineRec.SETRANGE("Plant Rate Code", xRec.Code);
      IF SalesLineRec.FINDSET(TRUE,FALSE) THEN BEGIN
        REPEAT
          IF NOT RateCodesByLocation(SalesLineRec."Plant Location", '') THEN BEGIN
            SalesLineRec."Plant Rate Code" := Code;
            SalesLineRec.MODIFY(FALSE);
          END;
        UNTIL SalesLineRec.NEXT = 0;
      END;

      SalesInvoiceLineRec.SETRANGE("Plant Rate Code", xRec.Code);
      IF SalesInvoiceLineRec.FINDSET(TRUE,FALSE) THEN BEGIN
        REPEAT
          IF NOT RateCodesByLocation(SalesInvoiceLineRec."Plant Location", '') THEN BEGIN
            SalesInvoiceLineRec."Plant Rate Code" := Code;
            SalesInvoiceLineRec.MODIFY(FALSE);
          END;
        UNTIL SalesInvoiceLineRec.NEXT = 0;
      END;

      SalesCredMemLineRec.SETRANGE("Plant Rate Code", xRec.Code);
      IF SalesCredMemLineRec.FINDSET(TRUE,FALSE) THEN BEGIN
        REPEAT
          IF NOT RateCodesByLocation(SalesCredMemLineRec."Plant Location", '') THEN BEGIN
            SalesCredMemLineRec."Plant Rate Code" := Code;
            SalesCredMemLineRec.MODIFY(FALSE);
          END;
        UNTIL SalesCredMemLineRec.NEXT = 0;
      END;

      HourAccLineRec.SETRANGE("Plant Rate Code", xRec.Code);
      HourAccLineRec.SETRANGE("Receiving Company", '');
      IF HourAccLineRec.FINDSET(TRUE,FALSE) THEN BEGIN
        REPEAT
          IF NOT RateCodesByLocation(HourAccLineRec."Plant Location", '') THEN BEGIN
            HourAccLineRec."Plant Rate Code" := Code;
            HourAccLineRec.MODIFY(FALSE);
          END;
        UNTIL HourAccLineRec.NEXT = 0;
      END;

      PostedHourAccLineRec.SETCURRENTKEY("Receiving Company");
      PostedHourAccLineRec.SETRANGE("Plant Rate Code", xRec.Code);
      PostedHourAccLineRec.SETRANGE("Receiving Company", '');
      IF PostedHourAccLineRec.FINDSET(TRUE,FALSE) THEN BEGIN
        REPEAT
          IF NOT RateCodesByLocation(PostedHourAccLineRec."Plant Location", '') THEN BEGIN
            PostedHourAccLineRec."Plant Rate Code" := Code;
            PostedHourAccLineRec.MODIFY(FALSE);
          END;
        UNTIL PostedHourAccLineRec.NEXT = 0;
      END;

      HourAccSurchRec.SETRANGE("Plant Rate Code", xRec.Code);
      HourAccSurchRec.SETRANGE("Receiving Company", '');
      IF HourAccSurchRec.FINDSET(TRUE,FALSE) THEN BEGIN
        REPEAT
          IF NOT RateCodesByLocation(HourAccSurchRec."Plant Location", '') THEN BEGIN
            HourAccSurchRec."Plant Rate Code" := Code;
            HourAccSurchRec.MODIFY(FALSE);
          END;
        UNTIL HourAccSurchRec.NEXT = 0;
      END;

      PlantHrsRevLineRec.SETRANGE("Rate Code", xRec.Code);
      IF PlantHrsRevLineRec.FINDSET(TRUE,FALSE) THEN BEGIN
        REPEAT
          IF NOT RateCodesByLocation(PlantHrsRevLineRec."Plant Location", '') THEN BEGIN
            PlantHrsRevLineRec."Rate Code" := Code;
            PlantHrsRevLineRec.MODIFY(FALSE);
          END;
        UNTIL PlantHrsRevLineRec.NEXT = 0;
      END;

      PlantInventRec.SETRANGE("Rate Code", xRec.Code);  //* Rate Code in index1
      IF PlantInventRec.FINDSET(TRUE,FALSE) THEN BEGIN
        REPEAT
          IF NOT RateCodesByLocation(PlantInventRec.Location, '') THEN BEGIN
            PlantInventRec2 := PlantInventRec;
            PlantInventRec2."Rate Code" := Code;
            PlantInventRec2.INSERT(FALSE);
            //
            PlantInventRec.DELETE(FALSE);
          END;
        UNTIL PlantInventRec.NEXT = 0;
      END;

      SalesPlantInvoiceHistRec.SETRANGE("Rate Code", xRec.Code);  //* Rate Code in index1
      IF SalesPlantInvoiceHistRec.FINDSET(TRUE,FALSE) THEN BEGIN  //* Granule 'Sales Rental Orders'
        REPEAT
          IF NOT RateCodesByLocation(SalesPlantInvoiceHistRec.Location, '') THEN BEGIN
            SalesPlantInvoiceHistRec2 := SalesPlantInvoiceHistRec;
            SalesPlantInvoiceHistRec2."Rate Code" := Code;
            SalesPlantInvoiceHistRec2.INSERT(FALSE);
            //
            SalesPlantInvoiceHistRec.DELETE(FALSE);
          END;
        UNTIL SalesPlantInvoiceHistRec.NEXT = 0;
      END;

      ExitOrderLineRec.SETRANGE("From Rate Code", xRec.Code);
      IF ExitOrderLineRec.FINDSET(TRUE,FALSE) THEN BEGIN
        REPEAT
          IF NOT RateCodesByLocation(ExitOrderLineRec."From Location", '') THEN BEGIN
            ExitOrderLineRec."From Rate Code" := Code;
            ExitOrderLineRec.MODIFY(FALSE);
          END;
        UNTIL ExitOrderLineRec.NEXT = 0;
      END;

      ReturnLossOrderLineRec.SETRANGE("To Rate Code", xRec.Code);
      IF ReturnLossOrderLineRec.FINDSET(TRUE,FALSE) THEN BEGIN
        REPEAT
          IF NOT RateCodesByLocation(ReturnLossOrderLineRec."To Location", '') THEN BEGIN
            ReturnLossOrderLineRec."To Rate Code" := Code;
            ReturnLossOrderLineRec.MODIFY(FALSE);
          END;
        UNTIL ReturnLossOrderLineRec.NEXT = 0;
      END;

      PlantOrderLineRec.SETRANGE("From Rate Code", xRec.Code);
      PlantOrderLineRec.SETRANGE(Type, PlantOrderLineRec.Type::Plant);
      PlantOrderLineRec.SETRANGE("Rental Type", PlantOrderLineRec."Rental Type"::Rental);
      IF PlantOrderLineRec.FINDSET(TRUE,FALSE) THEN BEGIN
        REPEAT
          IF NOT RateCodesByLocation(PlantOrderLineRec."From Location", '') THEN BEGIN
            PlantOrderLineRec."From Rate Code" := Code;
            PlantOrderLineRec.MODIFY(FALSE);
          END;
        UNTIL PlantOrderLineRec.NEXT = 0;
      END;
      //
      PlantOrderLineRec.RESET;
      PlantOrderLineRec.SETRANGE("To Rate Code", xRec.Code);
      PlantOrderLineRec.SETRANGE(Type, PlantOrderLineRec.Type::Plant);
      PlantOrderLineRec.SETRANGE("Rental Type", PlantOrderLineRec."Rental Type"::Rental);
      IF PlantOrderLineRec.FINDSET(TRUE,FALSE) THEN BEGIN
        REPEAT
          IF PlantOrderRec.GET(PlantOrderLineRec."Plant Order No.") THEN BEGIN
            IF NOT RateCodesByLocation(PlantOrderLineRec.GetToLocationCode(), '') THEN BEGIN
              PlantOrderLineRec."To Rate Code" := Code;
              PlantOrderLineRec.MODIFY(FALSE);
            END;
          END;
        UNTIL PlantOrderLineRec.NEXT = 0;
      END;
      //
      PlantOrderLineRec.RESET;
      PlantOrderLineRec.SETRANGE("Mobilization Rate Code", xRec.Code);
      PlantOrderLineRec.SETRANGE(Type, PlantOrderLineRec.Type::Plant);
      PlantOrderLineRec.SETRANGE("Rental Type", PlantOrderLineRec."Rental Type"::Rental);
      IF PlantOrderLineRec.FINDSET(TRUE,FALSE) THEN BEGIN
        REPEAT
          IF NOT RateCodesByLocation(PlantOrderLineRec."To Location", '') THEN BEGIN
            PlantOrderLineRec."Mobilization Rate Code" := Code;
            PlantOrderLineRec.MODIFY(FALSE);
            PlantOrderReceiptLine.SETRANGE("Plant Order No.", PlantOrderLineRec."Plant Order No.");
            PlantOrderReceiptLine.SETRANGE("Plant Order Line No.", PlantOrderLineRec."Line No.");
            IF PlantOrderReceiptLine.FINDFIRST THEN BEGIN
              PlantOrderReceiptLine."Mobilization Rate Code" := Code;
              PlantOrderReceiptLine.MODIFY(FALSE);
            END;
          END;
        UNTIL PlantOrderLineRec.NEXT = 0;
      END;

      RentalCorrLineRec.SETRANGE("Debit Rate Code", xRec.Code);
      RentalCorrLineRec.SETRANGE(Type, RentalCorrLineRec.Type::Plant);
      RentalCorrLineRec.SETRANGE("Debit Rental Type", RentalCorrLineRec."Debit Rental Type"::Rental);
      IF RentalCorrLineRec.FINDSET(TRUE,FALSE) THEN BEGIN
        REPEAT
          IF RentalCorrRec.GET(RentalCorrLineRec."Rental  Correction No.") THEN BEGIN
            IF NOT RateCodesByLocation(RentalCorrRec."Debit Location", '') THEN BEGIN
              RentalCorrLineRec."Debit Rate Code" := Code;
              RentalCorrLineRec.MODIFY(FALSE);
            END;
          END;
        UNTIL RentalCorrLineRec.NEXT = 0;
      END;
      //
      RentalCorrLineRec.RESET;
      RentalCorrLineRec.SETRANGE("Credit Rate Code", xRec.Code);
      RentalCorrLineRec.SETRANGE(Type, RentalCorrLineRec.Type::Plant);
      RentalCorrLineRec.SETRANGE("Credit Rental Type", RentalCorrLineRec."Credit Rental Type"::Rental);
      IF RentalCorrLineRec.FINDSET(TRUE,FALSE) THEN BEGIN
        REPEAT
          IF RentalCorrRec.GET(RentalCorrLineRec."Rental  Correction No.") THEN BEGIN
            IF NOT RateCodesByLocation(RentalCorrRec."Credit Location", '') THEN BEGIN
              RentalCorrLineRec."Credit Rate Code" := Code;
              RentalCorrLineRec.MODIFY(FALSE);
            END;
          END;
        UNTIL RentalCorrLineRec.NEXT = 0;
      END;

      PlantReqLineRec.SETRANGE("Rate Code", xRec.Code);
      PlantReqLineRec.SETRANGE(Type, PlantReqLineRec.Type::Plant);
      IF PlantReqLineRec.FINDSET(TRUE,FALSE) THEN BEGIN
        REPEAT
          IF PlantRequestRec.GET(PlantReqLineRec."Plant Request No.") THEN BEGIN
            IF ((PlantRequestRec.Type = PlantRequestRec.Type::Removal) AND
                (NOT RateCodesByLocation(PlantRequestRec."From Location", ''))) OR
               ((PlantRequestRec.Type <>PlantRequestRec.Type::Removal) AND
                (NOT RateCodesByLocation(PlantRequestRec."To Location", '')))
            THEN BEGIN
              PlantReqLineRec."Rate Code" := Code;
              PlantReqLineRec.MODIFY(FALSE);
            END;
          END;
        UNTIL PlantReqLineRec.NEXT = 0;
      END;

      PlantRentalFreeOrderLineRec.SETRANGE("From Rate Code", xRec.Code);
      IF PlantRentalFreeOrderLineRec.FINDSET(TRUE,FALSE) THEN BEGIN
        REPEAT
          IF PlantRentalFreeOrderRec.GET(PlantRentalFreeOrderLineRec."Rental Free Order No.") THEN BEGIN
            IF NOT RateCodesByLocation(PlantRentalFreeOrderRec."Plant Location", '') THEN BEGIN
              PlantRentalFreeOrderLineRec."From Rate Code" := Code;
              PlantRentalFreeOrderLineRec.MODIFY(FALSE);
            END;
          END;
        UNTIL PlantRentalFreeOrderLineRec.NEXT = 0;
      END;
      //
      PlantRentalFreeOrderLineRec.RESET;
      PlantRentalFreeOrderLineRec.SETRANGE("To Rate Code", xRec.Code);
      IF PlantRentalFreeOrderLineRec.FINDSET(TRUE,FALSE) THEN BEGIN
        REPEAT
          IF PlantRentalFreeOrderRec.GET(PlantRentalFreeOrderLineRec."Rental Free Order No.") THEN BEGIN
            IF NOT RateCodesByLocation(PlantRentalFreeOrderRec."Plant Location", '') THEN BEGIN
              PlantRentalFreeOrderLineRec."To Rate Code" := Code;
              PlantRentalFreeOrderLineRec.MODIFY(FALSE);
            END;
          END;
        UNTIL PlantRentalFreeOrderLineRec.NEXT = 0;
      END;

      PlantLedgEntryRec.SETRANGE("Rate Code", xRec.Code);
      IF PlantLedgEntryRec.FINDSET(TRUE,FALSE) THEN BEGIN
        REPEAT
          IF NOT RateCodesByLocation(PlantLedgEntryRec."Plant Location", '') THEN BEGIN
            PlantLedgEntryRec."Rate Code" := Code;
            PlantLedgEntryRec.MODIFY(FALSE);
          END;
        UNTIL PlantLedgEntryRec.NEXT = 0;
      END;

      PlantRateCompEntryRec.SETRANGE("Rate Code", xRec.Code);
      IF PlantRateCompEntryRec.FINDSET(TRUE,FALSE) THEN BEGIN
        REPEAT
          IF PlantLedgEntryRec.GET(PlantRateCompEntryRec."Plant Ledger Entry No.") THEN BEGIN
            IF PlantRateCompEntryRec."Rate Code" <> PlantLedgEntryRec."Rate Code" THEN BEGIN
              PlantRateCompEntryRec."Rate Code" := PlantLedgEntryRec."Rate Code";
              PlantRateCompEntryRec.MODIFY(FALSE);
            END;
          END;
        UNTIL PlantRateCompEntryRec.NEXT = 0;
      END;
    END;

    BEGIN
    END.
  }
}

