OBJECT Report 11012144 Transfer Ledger Entries
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00,4PSSE;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Transfer Ledger Entries;
               NOR=Overf›r reskontrotransaksjoner;
               SVE=™verf”r reskontratransaktioner];
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   UserSetup.GET(USERID);
                   UserSetup.TESTFIELD("Transfer Entries Allowed", TRUE);  //DP00850
                 END;

    OnPreReport=BEGIN
                  IF SelectJobEntries THEN BEGIN
                    IF FromProject = '' THEN
                      ERROR(Text001);
                    IF ToProject = '' THEN
                      ERROR(Text002);
                    // RFC-212
                    IF ToProject = FromProject THEN BEGIN
                      IF FromExtension = ToExtension THEN
                       IF CONFIRM(Text010, FALSE)=FALSE THEN  //DP00850
                       ERROR(Text003);
                    END;
                    //ToProject = FromProject THEN
                    //  IF CONFIRM(Text010, FALSE)=FALSE THEN  //DP00850
                    //  ERROR(Text003);
                    // RFC-212


                    JobRec.GET(ToProject);
                    IF JobRec."Project Status" > JobRec."Project Status"::"Technical Finished" THEN
                      ERROR(Text004, JobRec."No.");
                  END;

                  IF SelectServEntries THEN BEGIN
                    IF FromServOrder = '' THEN
                      IF ConvertOrderKind OR (FromServContract = '') THEN
                        ERROR(Text011);
                    IF ToServOrder = '' THEN
                      IF ToServContract = '' THEN
                        ERROR(Text012);
                    IF (ToServOrder = FromServOrder) AND (FromServContract = ToServContract) THEN
                      IF NOT CONFIRM(Text020, ConvertCostComp) THEN  //DP00850
                        ERROR(Text013);

                    IF ToServOrder <> '' THEN BEGIN
                      ServOrderRec.GET(ToServOrder);
                      IF ServOrderRec.Status > ServOrderRec.Status::"Technical Finished" THEN
                        ERROR(Text014, ServOrderRec."No.");
                    END;
                  END;
                END;

  }
  DATASET
  {
    { 5612;    ;DataItem;                    ;
               DataItemTable=Table11072005;
               DataItemTableView=SORTING(Job No.);
               OnPreDataItem=VAR
                               NextLineNo@1100485000 : Integer;
                             BEGIN
                               IF NOT SelectJobEntries THEN
                                 CurrReport.BREAK;

                               SETRANGE("Job No.",FromProject);
                               IF FromExtension <> '' THEN
                                 SETRANGE("Extension Contract", FromExtension);
                               IF FromElement <> '' THEN
                                 SETRANGE(Element, FromElement);  //DP00850
                               //>> #23487
                               IF FromCostObject <> '' THEN
                                 SETRANGE("Global Dimension 2 Code", FromCostObject)
                               ELSE //<< #23487
                                 SETFILTER("Global Dimension 2 Code",'<>%1', '');

                               SETRANGE(Surcharge, FALSE);
                               //4PS 28-07-2016 UKR-C24729 sn
                               IF DocumentNumbeFilter <> '' THEN
                                 SETFILTER("Document No.", DocumentNumbeFilter);
                               //4PS 28-07-2016 UKR-C24729 en

                               NextLineNo := 0;

                               //call 27865
                               IF TryOutNo <> '' THEN
                                 SETRANGE("Try-out No.", TryOutNo);
                             END;

               OnAfterGetRecord=BEGIN
                                  FillGenJnlLineWithJobEntry(-1,FromProject, FromExtension, FromElement, FromCostObject); //#23487
                                  FillGenJnlLineWithJobEntry(1,ToProject, ToExtension, ToElement, ToCostObject); //#23487
                                END;
                                 }

    { 1373;    ;DataItem;                    ;
               DataItemTable=Table11012823;
               DataItemTableView=SORTING(No.);
               OnPreDataItem=BEGIN
                               IF NOT ConvertOrderKind THEN
                                 CurrReport.BREAK;

                               ServSetup.GET;
                               ServSetup.TESTFIELD("Add.Cost Based On Contr.Disc.", TRUE);

                               SETRANGE("No.", FromServOrder);
                               IF FromOrderKind <> '' THEN
                                 SETFILTER("Order Kind", FromOrderKind);
                             END;

               OnAfterGetRecord=BEGIN
                                  VALIDATE("Order Kind", ToOrderKind);
                                  VALIDATE("Additional Cost (Labor)", AddCostLabor);
                                  VALIDATE("Additional Cost (Material)", AddCostMat);
                                  VALIDATE("Additional Cost (Subc)", AddCostSubc);
                                  VALIDATE("Additional Cost (Plant)", AddCostPlant);
                                  VALIDATE("Additional Cost (Sundry)", AddCostSundry);
                                  MODIFY(TRUE);
                                END;
                                 }

    { 4723;    ;DataItem;                    ;
               DataItemTable=Table11012819;
               DataItemTableView=SORTING(Service Order No.);
               OnPreDataItem=BEGIN
                               IF NOT SelectServEntries THEN
                                 CurrReport.BREAK;

                               IF FromServOrder = '' THEN BEGIN
                                 SETRANGE("Service Contract No.", FromServContract);
                                 SETRANGE("Cost Type", "Cost Type"::Revenues);
                               END;
                               SETRANGE("Service Order No.", FromServOrder);
                               IF FromCostComp <> '' THEN
                                 SETFILTER("Cost Component", FromCostComp);  //db, 04-02-10
                               SETFILTER("Global Dimension 2 Code", '<>%1', '');
                               SETRANGE(Surcharge, FALSE);

                               //4PS 28-07-2016 UKR-C24729 sn
                               IF DocumentNumbeFilter <> '' THEN
                                 SETFILTER("Document No.", DocumentNumbeFilter);
                               //4PS 28-07-2016 UKR-C24729 en

                               NextLineNo := 0;
                             END;

               OnAfterGetRecord=BEGIN
                                  FillGenJnlLineWithServiceEntry(-1, FromServOrder, FromServContract);
                                  FillGenJnlLineWithServiceEntry(1, ToServOrder, ToServContract);
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnOpenPage=BEGIN
                   //ServSetup.GET;  //db , 11-01-13: C004555 (avoid license problem)
                   //IF ServSetup."Add.Cost Based On Contr.Disc." = FALSE THEN BEGIN
                     AddCostLabor := FALSE;
                     AddCostMat := FALSE;
                     AddCostSubc := FALSE;
                     AddCostPlant := FALSE;
                     AddCostSundry := FALSE;
                   //END;

                   IF gvServOrder <> '' THEN BEGIN
                     SelectServEntries := TRUE;
                     FromServOrder := gvServOrder;
                     ToServOrder := gvServOrder;

                     ConvertOrderKind := TRUE;
                     DeriveCostComp := TRUE;
                     ServOrderRec.GET(FromServOrder);
                     FromOrderKind := ServOrderRec."Order Kind";
                     ToOrderKind := ServOrderRec."Order Kind";
                     CheckToOrderKind;

                     ConvertCostComp := TRUE;
                     ValidateOrderKind(0);
                     ValidateOrderKind(1);
                   END;

                   ClearSelection;
                   PostingDate := WORKDATE;  //db, 06-08-15
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 1100485010;2;Field  ;
                  Name=SelectJobEntries;
                  CaptionML=[ENU=Transfer Job Ledger Entries;
                             NOR=Overf›r reskontrotransaksjoner for jobb;
                             SVE=™verf”r jobbreskontratransaktioner];
                  SourceExpr=SelectJobEntries;
                  OnValidate=BEGIN
                               ClearSelection;
                             END;
                              }

      { 1100485008;2;Field  ;
                  Name=SelectServEntries;
                  CaptionML=[ENU=Transfer Service Ledger Entries;
                             NOR=Overf›r reskontrotransaksjoner for service;
                             SVE=™verf”r servicereskontratransaktioner];
                  SourceExpr=SelectServEntries;
                  OnValidate=BEGIN
                               IF NOT SelectServEntries THEN BEGIN
                                 ConvertCostComp := FALSE;
                                 ConvertOrderKind := FALSE;
                               END;

                               ClearSelection;
                             END;
                              }

      { 1100525005;2;Field  ;
                  Name=ConvertOrderKind;
                  CaptionML=[ENU=Convert Order Kind;
                             NOR=Konverter ordretype;
                             SVE=Konvertera typ av order];
                  SourceExpr=ConvertOrderKind;
                  OnValidate=BEGIN
                               ClearSelection;
                             END;
                              }

      { 1100525007;2;Field  ;
                  Name=ConvertCostComp;
                  CaptionML=[ENU=Convert Cost Component;
                             NOR=Konverter kostnadskomponent;
                             SVE=Konvertera kostnadsdel];
                  SourceExpr=ConvertCostComp;
                  OnValidate=BEGIN
                               ClearSelection;
                             END;
                              }

      { 1100525015;2;Field  ;
                  Name=DeriveCostComp;
                  CaptionML=[ENU=Cost Component based on Additional Cost;
                             NOR=Kostdel basert p† tilleggskoster;
                             SVE=Kostnadsdel baserat p† till„ggskostnader];
                  SourceExpr=DeriveCostComp }

      { 1100285100;2;Field  ;
                  Name=ConvertCostObjekt;
                  CaptionML=[ENU=Convert Cost Objekt;
                             SVE=Konvertera kostnadsobjekt];
                  SourceExpr=ConvertCostObject;
                  OnValidate=BEGIN
                               ClearSelection;
                             END;
                              }

      { 1100525009;1;Group  ;
                  CaptionML=[ENU=Select From;
                             NOR=Velg fra;
                             SVE=V„lj fr†n];
                  GroupType=Group }

      { 1100485000;2;Field  ;
                  Name=FromProject;
                  CaptionML=[ENU=Project;
                             NOR=Prosjekt;
                             SVE=Projekt];
                  SourceExpr=FromProject;
                  TableRelation=Job;
                  Enabled=ProjectEditable;
                  Editable=ProjectEditable;
                  LookupPageID=Job List;
                  OnValidate=BEGIN
                               //>> 160818 ITERO.AC RFC066 Enable field "DocumentNumbeFilter" if project no. (from project) is filled
                               IF FromProject <> '' THEN
                                 DocumentNumberEnabled := TRUE
                               ELSE
                                 DocumentNumberEnabled := FALSE;
                               //<< 160818 ITERO.AC RFC066
                             END;
                              }

      { 1100525001;2;Field  ;
                  Name=FromElement;
                  CaptionML=[ENU=Element;
                             NOR=Element;
                             SVE=Element];
                  SourceExpr=FromElement;
                  Enabled=ProjectEditable;
                  Editable=ProjectEditable;
                  OnValidate=BEGIN
                               IF FromElement <> '' THEN
                                 ProjElemRec.GET(FromProject, FromElement);
                             END;

                  OnLookup=BEGIN
                             //db, 06-08-15
                             IF FromProject <> '' THEN BEGIN
                               ProjElemRec."Project No." := FromProject;
                               ProjElemRec.Element := FromElement;
                               ProjElemRec.SETRANGE("Project No.", FromProject);
                               IF PAGE.RUNMODAL(0, ProjElemRec) = ACTION::LookupOK THEN
                                 FromElement := ProjElemRec.Element;
                             END;
                           END;
                            }

      { 1210190000;2;Field  ;
                  Name=FromExtension;
                  CaptionML=[ENU=Extension Contract;
                             NOR=ETA;
                             SVE=ŽTA];
                  SourceExpr=FromExtension;
                  Enabled=ProjectEditable;
                  Editable=ProjectEditable;
                  OnValidate=BEGIN
                               IF FromExtension <> '' THEN
                                 ExtRec.GET(FromProject, FromExtension);
                             END;

                  OnLookup=BEGIN
                             IF FromProject <> '' THEN BEGIN
                               ExtRec."Project No." := FromProject;
                               ExtRec."Contract No." := FromExtension;
                               ExtRec.SETRANGE("Project No.", FromProject);
                               IF PAGE.RUNMODAL(0, ExtRec) = ACTION::LookupOK THEN
                                 FromExtension := ExtRec."Contract No.";
                             END;
                           END;
                            }

      { 1100485006;2;Field  ;
                  Name=FromServOrder;
                  CaptionML=[ENU=Service Order;
                             NOR=Serviceordre;
                             SVE=Serviceorder];
                  SourceExpr=FromServOrder;
                  TableRelation="Service Order";
                  Enabled=ServOrderEditable;
                  Editable=ServOrderEditable;
                  LookupPageID=Service-Order List;
                  OnValidate=BEGIN
                               IF SelectServEntries THEN
                                 IF FromServOrder = '' THEN
                                   FromServContractEditable := TRUE
                                 ELSE BEGIN
                                   FromServContractEditable := FALSE;
                                   ServOrderRec.GET(FromServOrder);
                                   FromServContract := ServOrderRec."Service Contract No.";
                                 END;
                             END;
                              }

      { 1100529600;2;Field  ;
                  Name=FromServContract;
                  CaptionML=[ENU=Service Contract;
                             SVE=Servicekontrakt];
                  SourceExpr=FromServContract;
                  TableRelation=Service-Contract;
                  Enabled=FromServContractEditable;
                  Editable=FromServContractEditable }

      { 1100525004;2;Field  ;
                  Name=FromOrderKind;
                  CaptionML=[ENU=Order Kind;
                             NOR=Type ordre;
                             SVE=Typ av order];
                  SourceExpr=FromOrderKind;
                  Enabled=OrderKindEditable;
                  Editable=OrderKindEditable;
                  OnValidate=BEGIN
                               ValidateOrderKind(0);
                             END;

                  OnLookup=BEGIN
                             OrderIndicationRec.SETRANGE(Indication, OrderIndicationRec.Indication::Kind);
                             IF PAGE.RUNMODAL(0, OrderIndicationRec) = ACTION::LookupOK THEN BEGIN
                               FromOrderKind := OrderIndicationRec.Code;
                               ValidateOrderKind(0);
                             END;
                           END;
                            }

      { 1210190023;2;Field  ;
                  Name=FromCostComp;
                  CaptionML=[ENU=Cost Component;
                             NOR=Kostnadskomponent;
                             SVE=Kostnadskomponent];
                  SourceExpr=FromCostComp;
                  TableRelation="Cost Component";
                  Enabled=CostCompEditable;
                  Editable=CostCompEditable;
                  OnLookup=VAR
                             CostCompPage@1100525002 : Page 11012055;
                           BEGIN
                             CostCompPage.LOOKUPMODE(TRUE);
                             IF CostCompPage.RUNMODAL = ACTION::LookupOK THEN BEGIN
                               Text += CostCompPage.GetSelectionFilter;
                               EXIT(TRUE);
                             END;
                           END;
                            }

      { 1100285101;2;Field  ;
                  Name=FromCostObject;
                  CaptionML=[ENU=FromCostObject;
                             SVE=Fr†n kostnadsobjekt];
                  SourceExpr=FromCostObject;
                  TableRelation="Dimension Value".Code;
                  Enabled=CostObjectEditable;
                  Editable=CostObjectEditable }

      { 1210190002;2;Field  ;
                  Name=TryOutFilter;
                  CaptionML=[ENU=Try-Out;
                             NOR=Prospekt;
                             SVE=Anbud];
                  SourceExpr=TryOutNo;
                  TableRelation=Try-out;
                  Enabled=ProjectEditable;
                  Editable=ProjectEditable;
                  LookupPageID=Try-out List }

      { 1100528001;2;Field  ;
                  CaptionML=[ENU="Document Number ";
                             NOR=Verifikationsnummer;
                             SVE="Verifikationsnummer "];
                  SourceExpr=DocumentNumbeFilter;
                  Enabled=DocumentNumberEnabled;
                  OnLookup=VAR
                             JobLElv@1100525000 : Record 11072005;
                           BEGIN
                             //4PS 28-07-2016 UKR-C24729 sn
                             IF FromProject <> '' THEN
                               JobLElv.SETRANGE("Job No.",FromProject);
                             IF FromExtension <> '' THEN
                               JobLElv.SETRANGE("Extension Contract", FromExtension);

                                 IF PAGE.RUNMODAL(0,JobLElv) = ACTION::LookupOK THEN
                                  BEGIN
                                    Text := JobLElv."Document No.";
                                    EXIT(TRUE);
                                  END
                                 ELSE EXIT(FALSE);

                             //ERROR(STRSUBSTNO(Text24729,Text001,Text002 ));
                             //4PS 28-07-2016 UKR-C24729 en
                           END;
                            }

      { 1100525006;1;Group  ;
                  CaptionML=[ENU=Select To;
                             NOR=Velg til;
                             SVE=V„lj till];
                  GroupType=Group }

      { 1100485003;2;Field  ;
                  Name=ToProject;
                  CaptionML=[ENU=Project;
                             NOR=Prosjekt;
                             SVE=Projekt];
                  SourceExpr=ToProject;
                  TableRelation=Job;
                  Enabled=ProjectEditable;
                  Editable=ProjectEditable;
                  LookupPageID=Job List }

      { 1100525002;2;Field  ;
                  Name=ToElement;
                  CaptionML=[ENU=Element;
                             NOR=Element;
                             SVE=Element];
                  SourceExpr=ToElement;
                  Enabled=ProjectEditable;
                  Editable=ProjectEditable;
                  OnValidate=BEGIN
                               IF ToElement <> '' THEN
                                 ProjElemRec.GET(ToProject, ToElement);
                             END;

                  OnLookup=BEGIN
                             //db, 06-08-15
                             IF ToProject <> '' THEN BEGIN
                               ProjElemRec."Project No." := ToProject;
                               ProjElemRec.Element := ToElement;
                               ProjElemRec.SETRANGE("Project No.", ToProject);
                               IF PAGE.RUNMODAL(0, ProjElemRec) = ACTION::LookupOK THEN
                                 ToElement := ProjElemRec.Element;
                             END;
                           END;
                            }

      { 1210190001;2;Field  ;
                  Name=ToExtension;
                  CaptionML=[ENU=Extension Contract;
                             NOR=ETA;
                             SVE=ŽTA];
                  SourceExpr=ToExtension;
                  Enabled=ProjectEditable;
                  Editable=ProjectEditable;
                  OnValidate=BEGIN
                               IF ToExtension <> '' THEN
                                 ExtRec.GET(ToProject, ToExtension);
                             END;

                  OnLookup=BEGIN
                             IF ToProject <> '' THEN BEGIN
                               ExtRec."Project No." := ToProject;
                               ExtRec."Contract No." := ToExtension;
                               ExtRec.SETRANGE("Project No.", ToProject);
                               IF PAGE.RUNMODAL(0, ExtRec) = ACTION::LookupOK THEN
                                 ToExtension := ExtRec."Contract No.";
                             END;
                           END;
                            }

      { 1100485002;2;Field  ;
                  Name=ToServOrder;
                  CaptionML=[ENU=Service Order;
                             NOR=Serviceordre;
                             SVE=Serviceorder];
                  SourceExpr=ToServOrder;
                  TableRelation="Service Order";
                  Enabled=ServOrderEditable;
                  Editable=ServOrderEditable;
                  LookupPageID=Service-Order List;
                  OnValidate=BEGIN
                               IF SelectServEntries THEN
                                 IF ToServOrder = '' THEN
                                   ToServContractEditable := TRUE
                                 ELSE BEGIN
                                   ToServContractEditable := FALSE;
                                   ServOrderRec.GET(ToServOrder);
                                   ToServContract := ServOrderRec."Service Contract No.";
                                 END;
                             END;
                              }

      { 1100529601;2;Field  ;
                  Name=ToServContract;
                  CaptionML=[ENU=Service Contract;
                             SVE=Servicekontrakt];
                  SourceExpr=ToServContract;
                  TableRelation=Service-Contract;
                  Enabled=ToServContractEditable;
                  Editable=ToServContractEditable }

      { 1100525000;2;Field  ;
                  Name=ToOrderKind;
                  CaptionML=[ENU=Order Kind;
                             NOR=Type ordre;
                             SVE=Typ av order];
                  SourceExpr=ToOrderKind;
                  Enabled=OrderKindEditable;
                  Editable=OrderKindEditable;
                  OnValidate=BEGIN
                               ValidateOrderKind(1);
                               CheckToOrderKind;
                             END;

                  OnLookup=BEGIN
                             OrderIndicationRec.SETRANGE(Indication, OrderIndicationRec.Indication::Kind);
                             IF PAGE.RUNMODAL(0, OrderIndicationRec) = ACTION::LookupOK THEN BEGIN
                               ToOrderKind := OrderIndicationRec.Code;
                               ValidateOrderKind(1);
                               CheckToOrderKind;
                             END;
                           END;
                            }

      { 1210190022;2;Field  ;
                  Name=ToCostComp;
                  CaptionML=[ENU=Cost Component;
                             NOR=Kostnadskomponent;
                             SVE=Kostnadsdel];
                  SourceExpr=ToCostComp;
                  TableRelation="Cost Component";
                  Enabled=CostCompEditable;
                  Editable=CostCompEditable }

      { 1100285102;2;Field  ;
                  Name=ToCostObject;
                  CaptionML=[ENU=ToCostObject;
                             SVE=Till kostnadsobjekt];
                  SourceExpr=ToCostObject;
                  TableRelation="Dimension Value".Code;
                  Enabled=CostObjectEditable;
                  Editable=CostObjectEditable }

      { 1100525008;2;Field  ;
                  Name=PostingDate;
                  CaptionML=[ENU=Posting Date;
                             NOR=Bokf›ringsdato;
                             SVE=Bokf”ringsdatum];
                  SourceExpr=PostingDate }

      { 1100525010;2;Field  ;
                  Name=NumMarkJob;
                  CaptionML=ENU=Marked Entry (Project);
                  SourceExpr=NumMarkProject;
                  Enabled=ProjectEditable;
                  Editable=FALSE;
                  OnAssistEdit=BEGIN
                                 SelectEntryProject;  //DP00850
                               END;
                                }

      { 1100525011;2;Field  ;
                  Name=NumMarkService;
                  CaptionML=ENU=Marked Entry (Service);
                  SourceExpr=NumMarkService;
                  Enabled=ServOrderEditable;
                  Editable=FALSE;
                  OnAssistEdit=BEGIN
                                 SelectEntryService;  //DP00850
                               END;
                                }

      { 1100525003;1;Group  ;
                  CaptionML=[ENU=Additonal cost;
                             NOR=Ekstra kost;
                             SVE=Extra kostnad];
                  GroupType=Group }

      { 1100525012;2;Field  ;
                  Name=AddCostLabor;
                  CaptionML=[ENU=Additional Cost;
                             NOR=Tilleggskoster;
                             SVE=Till„ggskostnader];
                  SourceExpr=AddCostLabor;
                  Enabled=AddCostLaborEditable;
                  Editable=AddCostLaborEditable }

      { 1100525014;2;Field  ;
                  Name=AddCostMat;
                  CaptionML=[ENU=Additional Cost (Material);
                             NOR=Tilleggskoster (materiale);
                             SVE=Till„ggskostnader (material)];
                  SourceExpr=AddCostMat;
                  Enabled=AddCostMatEditable;
                  Editable=AddCostMatEditable }

      { 1100525016;2;Field  ;
                  Name=AddCostSubc;
                  CaptionML=[ENU=Additional Cost (Subcontracting);
                             NOR=Tilleggskoster (underenrepen›r);
                             SVE=Till„ggskostnader (underentreprenad)];
                  SourceExpr=AddCostSubc;
                  Enabled=AddCostSubcEditable;
                  Editable=AddCostSubcEditable }

      { 1100525018;2;Field  ;
                  Name=AddCostPlant;
                  CaptionML=[ENU=Additional Cost (Plant);
                             NOR=Tilleggskoster (Maskin);
                             SVE=Till„ggskostnader (Maskin)];
                  SourceExpr=AddCostPlant;
                  Enabled=AddCostPlantEditable;
                  Editable=AddCostPlantEditable }

      { 1100525021;2;Field  ;
                  Name=AddCostSundry;
                  CaptionML=[ENU=Additional Cost (Sundry);
                             NOR=Tilleggskoster (diverse);
                             SVE=Till„ggskostnader (diverse)];
                  SourceExpr=AddCostSundry;
                  Enabled=AddCostSundryEditable;
                  Editable=AddCostSundryEditable }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      JobRec@1100485005 : Record 11072003;
      ServSetup@1100525013 : Record 11012800;
      ServOrderRec@1100485015 : Record 11012823;
      CostCompRec@1100525000 : Record 11012012;
      OrderIndicationRec@1100525007 : Record 11012837;
      GenJnlLine@1100485007 : Record 81;
      ExtRec@1100525018 : Record 11012004;
      ProjElemRec@1100527300 : Record 11012010;
      ToProject@1100485001 : Code[20];
      Text001@1100485002 : TextConst 'ENU=Enter From Project.;NOR=Angi fra prosjekt.;SVE=Ange fr†n projekt.';
      Text002@1100485003 : TextConst 'ENU=Enter To Project.;NOR=Angi til prosjekt.;SVE=Ange till projekt.';
      Text003@1100485004 : TextConst 'ENU=Enter a different To Project.;NOR=Angi et annet Til-prosjekt.;SVE=Ange ett annat Till-projekt.';
      Text004@1100485006 : TextConst 'ENU=Project %1 is Finished.;NOR=Prosjektet %1 er sluttf›rt.;SVE=Projektet %1 har slutf”rts.';
      ToServOrder@1100485012 : Code[20];
      ToServContract@1100529601 : Code[20];
      ToCostComp@1100525001 : Code[20];
      ToOrderKind@1100525005 : Code[10];
      FromProject@1100525017 : Code[20];
      FromServOrder@1100525016 : Code[20];
      FromServContract@1100529600 : Code[10];
      FromCostComp@1100525006 : Code[20];
      FromOrderKind@1100525002 : Code[10];
      JournalTemplateName@1100485009 : Code[10];
      JournalBatchName@1100485008 : Code[10];
      NextLineNo@1100485010 : Integer;
      SelectJobEntries@1100485013 : Boolean;
      SelectServEntries@1100485014 : Boolean;
      Text011@1100485019 : TextConst 'ENU=Enter From Service Order.;NOR=Angi Fra serviceordre.;SVE=Ange fr†n serviceorder.';
      Text012@1100485018 : TextConst 'ENU=EnterTo Service Order.;NOR=Angi Til serviceordre.;SVE=Ange till serviceorder.';
      Text013@1100485017 : TextConst 'ENU=Enter a different To Service Order.;NOR=Angi en annen Til-serviceordre.;SVE=Ange en annan Till-serviceorder.';
      Text014@1100485016 : TextConst 'ENU=Serviceorder %1 is Finished.;NOR=Serviceordre %1 er sluttf›rt.;SVE=Serviceorder %1 har slutf”rts.';
      ConvertCostComp@1100525003 : Boolean;
      ConvertOrderKind@1100525004 : Boolean;
      DeriveCostComp@1100525015 : Boolean;
      AddCostLabor@1100525008 : Boolean;
      AddCostMat@1100525009 : Boolean;
      AddCostSubc@1100525010 : Boolean;
      AddCostPlant@1100525011 : Boolean;
      AddCostSundry@1100525012 : Boolean;
      gvServOrder@1100525014 : Code[20];
      FromExtension@1210190001 : Code[20];
      ToExtension@1210190000 : Code[20];
      FromElement@1100525021 : Code[20];
      ToElement@1100525020 : Code[20];
      PostingDate@1100525022 : Date;
      TryOutNo@1210190006 : Code[20];
      AddCostLaborEditable@1210190010 : Boolean INDATASET;
      AddCostMatEditable@1210190011 : Boolean INDATASET;
      AddCostSubcEditable@1210190012 : Boolean INDATASET;
      AddCostPlantEditable@1210190013 : Boolean INDATASET;
      AddCostSundryEditable@1210190014 : Boolean INDATASET;
      ProjectEditable@1210190015 : Boolean INDATASET;
      ServOrderEditable@1210190017 : Boolean INDATASET;
      FromServContractEditable@1100529602 : Boolean INDATASET;
      ToServContractEditable@1100529603 : Boolean INDATASET;
      OrderKindEditable@1210190019 : Boolean INDATASET;
      CostCompEditable@1210190021 : Boolean INDATASET;
      NumMarkProject@1100525023 : Integer;
      NumMarkService@1100525027 : Integer;
      TmpJobEntry@1100525019 : TEMPORARY Record 11072005;
      TmpServEntry@1100525028 : TEMPORARY Record 11012819;
      UserSetup@1100525024 : Record 91;
      Text010@1100525025 : TextConst 'ENU=Do you want to transfer Entries for same Project?';
      Text020@1100525026 : TextConst 'ENU=Do you want to transfer Entries for same Service Order?';
      DocumentNumbeFilter@1100285500 : Code[100];
      Text24729@1100285501 : TextConst 'ENU=Fields %1 and %2 should be filled;NOR=Felt % 1 og % 2 skal fylles;SVE=F„lt % 1 och % 2  ska fyllas';
      DocumentNumberEnabled@1100285502 : Boolean INDATASET;
      ConvertCostObject@1100285100 : Boolean;
      FromCostObject@1100285101 : Code[10];
      ToCostObject@1100285102 : Code[10];
      CostObjectEditable@1100285103 : Boolean INDATASET;

    PROCEDURE FillGenJnlLineWithJobEntry@1100485000(lFactor@1100485000 : Integer;lProject@1100485001 : Code[20];lExtension@1210190000 : Code[20];lElement@1100525000 : Code[20];lCostObject@1100285100 : Code[20]);
    VAR
      Customer@1100285101 : Record 18;
      SalesInvoiceHeader@1100285102 : Record 112;
    BEGIN
      WITH "Job Ledger Entry" DO BEGIN
        IF NumMarkProject <> 0 THEN
          IF NOT TmpJobEntry.GET("Entry No.") THEN EXIT;  //DP00850

        GenJnlLine."Journal Template Name" := JournalTemplateName;
        GenJnlLine."Journal Batch Name" := JournalBatchName;

        IF NextLineNo = 0 THEN BEGIN
          GenJnlLine.SETRANGE("Journal Template Name",JournalTemplateName);
          GenJnlLine.SETRANGE("Journal Batch Name",JournalBatchName);
          IF GenJnlLine.FIND('+') THEN BEGIN
            NextLineNo := GenJnlLine."Line No.";
            NextLineNo :=  NextLineNo + 10000;
          END ELSE
            NextLineNo := 1;
        END;

        GenJnlLine.INIT;
        GenJnlLine."Journal Template Name" := JournalTemplateName;
        GenJnlLine."Journal Batch Name" := JournalBatchName;

        GenJnlLine."Line No." := NextLineNo;
        NextLineNo :=  NextLineNo + 10000;

        GenJnlLine."Posting Date" := PostingDate;  //DP00850
        GenJnlLine."Document Date" := "Document Date" ;
        GenJnlLine."Document No." := "Document No.";
        GenJnlLine."Account Type" :=  GenJnlLine."Account Type"::"G/L Account";
        GenJnlLine.VALIDATE("Job No.", lProject);
        //DP00850.sn
        IF lElement = '' THEN BEGIN
          IF (FromElement <> '') AND (ToElement = '') THEN
            GenJnlLine.Element := ''
          ELSE
            GenJnlLine.Element := Element;
        END ELSE
          GenJnlLine.VALIDATE(Element, lElement);
        //DP00850.en
        IF lExtension = '' THEN BEGIN
          IF (FromExtension <> '') AND (ToExtension = '') THEN
            GenJnlLine."Extension Contract" := ''
          ELSE
            GenJnlLine."Extension Contract" := "Extension Contract";
        END ELSE
          GenJnlLine.VALIDATE("Extension Contract", lExtension);

        GenJnlLine."Purchase Action" := "Purchase Action";
        GenJnlLine."Service Order No." := "Service Order No.";
        GenJnlLine.GetServiceCategory;
        GenJnlLine."Service Contract No." := "Service Contract No.";
        GenJnlLine."Service Location No." := "Service Location No." ;
        GenJnlLine."Additional Cost (Service)" := "Additional Cost (Service)";
        GenJnlLine."Employee No." := "Employee No.";
        GenJnlLine."Wage Component" := "Wage Component";
        GenJnlLine."Cost Component" := "Cost Component";
        GenJnlLine."Item No." := "Item No." ;
        GenJnlLine.Manufacturer := Manufacturer;
        GenJnlLine."Basic Item" := "Basic Item";
        GenJnlLine."Vendor (Trade Item)" := "Vendor (Trade Item)";
        GenJnlLine."Trade Item" := "Trade Item";
        GenJnlLine."Vendor Posting Group" := "Vendor Posting Group";

        GenJnlLine.VALIDATE("Shortcut Dimension 1 Code", "Global Dimension 1 Code");

        //>> #23487
        //GenJnlLine.VALIDATE("Shortcut Dimension 2 Code", "Global Dimension 2 Code");
          IF lCostObject = '' THEN BEGIN
          IF (FromCostObject <> '') AND (ToCostObject = '') THEN
            GenJnlLine."Shortcut Dimension 2 Code" := ''
          ELSE
            GenJnlLine.VALIDATE("Shortcut Dimension 2 Code", "Global Dimension 2 Code");
        END ELSE
          GenJnlLine.VALIDATE("Shortcut Dimension 2 Code", lCostObject);
        //<< #23487

        IF lFactor < 0 THEN  //db, 19-05-15: C015449 (get original dim1 disturbed by validate dim2)
          GenJnlLine.VALIDATE("Shortcut Dimension 1 Code", "Global Dimension 1 Code");

        GenJnlLine.VALIDATE(Quantity, Quantity * lFactor);
        GenJnlLine."Unit of Measure Code" := "Unit of Measure Code";
        GenJnlLine."External Document No." := "External Document No.";
        GenJnlLine.Description := Description;
        GenJnlLine."Description 2" := "Description 2";  //db, 04-12-12

        IF "Cost Type" = "Cost Type"::Revenues THEN
          GenJnlLine.VALIDATE(Amount, "Total Price (LCY)" * lFactor)
        ELSE
          GenJnlLine.VALIDATE(Amount, "Total Cost (LCY)" * lFactor);

        //db.sn, 01-07-09: M15531
        GenJnlLine."Gen. Bus. Posting Group" := '';
        GenJnlLine."Gen. Prod. Posting Group" := '';
        GenJnlLine."VAT Bus. Posting Group" := '';
        GenJnlLine."VAT Prod. Posting Group" := '';
        //db.en, 01-07-09: M15531

        GenJnlLine."Source Code" := "Source Code"; //djn, 12-01-15: C020210
        GenJnlLine."Advance Payment" := "Advance Payment";
        //>>190425
        CASE "Source Code" OF
          'SALES': BEGIN
            GenJnlLine."Source Type" := GenJnlLine."Source Type"::Customer;
            GenJnlLine."Source No." := "Job Ledger Entry".Principal;
          END;
          'PURCHASES': BEGIN
            //>>190219
            GenJnlLine."Source Type" := GenJnlLine."Source Type"::Vendor;
            GenJnlLine."Source No." := "Job Ledger Entry"."Vendor No.";
            //<<190219
          END;
        END;
        //<<190425

        GenJnlLine.INSERT(TRUE);
      END;
    END;

    PROCEDURE FillGenJnlLineWithServiceEntry@1100485006(lFactor@1100485000 : Integer;lServOrder@1100485001 : Code[20];lServiceContract@1100529600 : Code[20]);
    VAR
      CopyBln@1100525000 : Boolean;
    BEGIN
      WITH "Service-Ledger Entry" DO BEGIN
        IF NumMarkService <> 0 THEN
          IF NOT TmpServEntry.GET("Entry No.") THEN EXIT;  //DP00850

        CopyBln := lFactor > 0;  //db, 04-02-10
        IF "Cost Type" = "Cost Type"::Revenues THEN
          lFactor := -lFactor;  //db, 04-09-09: M16322

        GenJnlLine."Journal Template Name" := JournalTemplateName;
        GenJnlLine."Journal Batch Name" := JournalBatchName;

        IF NextLineNo = 0 THEN BEGIN
          GenJnlLine.SETRANGE("Journal Template Name",JournalTemplateName);
          GenJnlLine.SETRANGE("Journal Batch Name",JournalBatchName);
          IF GenJnlLine.FIND('+') THEN BEGIN
            NextLineNo := GenJnlLine."Line No.";
            NextLineNo :=  NextLineNo + 10000;
          END ELSE
            NextLineNo := 1;
        END;

        GenJnlLine.INIT;
        GenJnlLine."Journal Template Name" := JournalTemplateName;
        GenJnlLine."Journal Batch Name" := JournalBatchName;

        GenJnlLine."Line No." := NextLineNo;
        NextLineNo :=  NextLineNo + 10000;

        GenJnlLine."Posting Date" := PostingDate;  //DP00850
        GenJnlLine."Document Date" := "Posting Date";
        GenJnlLine."Document No." := "Document No.";
        GenJnlLine."Account Type" :=  GenJnlLine."Account Type"::"G/L Account";
        GenJnlLine."Job No." := "Project No.";
        IF lServOrder = '' THEN
          GenJnlLine.VALIDATE("Service Contract No.", lServiceContract)
        ELSE
          GenJnlLine.VALIDATE("Service Order No.", lServOrder);
      //GenJnlLine."Service Contract No." := "Service Contract No.";  //db, 29-10-07 (melding 10485)
      //GenJnlLine."Service Location No." := "Service Location No." ;
        GenJnlLine."Employee No." := "Employee No.";
        GenJnlLine."Wage Component" := "Wage Component";
        GenJnlLine."Item No." := "Item No." ;
        GenJnlLine.Manufacturer := Manufacturer;
        GenJnlLine."Basic Item" := "Basic Item";
        GenJnlLine."Vendor (Trade Item)" := "Vendor (Trade Item)";
        GenJnlLine."Trade Item" := "Trade Item";
        GenJnlLine."Vendor Posting Group" := "Vendor Posting Group";

        GenJnlLine.VALIDATE("Shortcut Dimension 1 Code", "Global Dimension 1 Code");
        //db.sn, 15-03-10
        IF CopyBln THEN BEGIN
          GenJnlLine."Shortcut Dimension 2 Code" := "Global Dimension 2 Code"; //db, 19-03-10
          GenJnlLine.CheckAdditionalCostService(GenJnlLine.FIELDNO("Service Order No."));
          IF GenJnlLine."Service Order No." = '' THEN
            GenJnlLine.VALIDATE("Service Contract No.")
          ELSE
            GenJnlLine.VALIDATE("Service Order No.");
          GenJnlLine.VALIDATE("Shortcut Dimension 2 Code", "Global Dimension 2 Code");
        END ELSE BEGIN
          GenJnlLine.VALIDATE("Shortcut Dimension 2 Code", "Global Dimension 2 Code");
          GenJnlLine."Additional Cost (Service)" := "Additional Cost";
          GenJnlLine."Cost Component" := "Cost Component";
          GenJnlLine."Service Category" := "Service Category";
        END;
        //db.en, 15-03-10
        IF lFactor < 0 THEN  //db, 19-05-15: C015449 (get original dim1 disturbed by validate dim2)
          GenJnlLine.VALIDATE("Shortcut Dimension 1 Code", "Global Dimension 1 Code");
        GenJnlLine.VALIDATE(Quantity, Quantity * lFactor);
        GenJnlLine."Unit of Measure Code" := "Unit of Measure Code";
        GenJnlLine.Description := Description;
        GenJnlLine."Description 2" := "Description 2";  //db, 04-12-12

        IF "Cost Type" = "Cost Type"::Revenues THEN
          GenJnlLine.VALIDATE(Amount, "Total Revenue (LCY)" * lFactor)
        ELSE
          GenJnlLine.VALIDATE(Amount, "Total Cost (LCY)" * lFactor);

        //db.sn, 01-07-09: M15531
        GenJnlLine."Gen. Bus. Posting Group" := '';
        GenJnlLine."Gen. Prod. Posting Group" := '';
        GenJnlLine."VAT Bus. Posting Group" := '';
        GenJnlLine."VAT Prod. Posting Group" := '';
        //db.en, 01-07-09: M15531

        GenJnlLine.INSERT(TRUE);

        //db.sn, 04-02-10
        IF (ToCostComp <> '') AND CopyBln THEN BEGIN
          CostCompRec.GET(ToCostComp);
          IF GenJnlLine."Additional Cost (Service)" AND
             DeriveCostComp AND
             (CostCompRec."Cost Component (Add.Cost)" <> '') THEN BEGIN
             CostCompRec.GET(CostCompRec."Cost Component (Add.Cost)");
          END;
          GenJnlLine."Cost Component" := CostCompRec.Code;
          GenJnlLine."Additional Cost (Service)" := CostCompRec."Additional Cost (Service)";  //db, 23-03-10
          GenJnlLine.MODIFY;
        END;
        //db.en, 04-02-10
      END;
    END;

    PROCEDURE SetSelection@1100485004(iJournalTemplateName@1100485001 : Code[10];iJournalBatchName@1100485002 : Code[10]);
    BEGIN
      JournalTemplateName := iJournalTemplateName;
      JournalBatchName := iJournalBatchName;
    END;

    PROCEDURE SetSelectionService@1100525001(iServOrder@1100525000 : Code[20]);
    BEGIN
      gvServOrder := iServOrder;
    END;

    PROCEDURE ClearSelection@1100485001();
    BEGIN
      IF NOT SelectJobEntries THEN BEGIN
        FromProject := '';
        ToProject := '';
        FromExtension := '';
        ToExtension := '';
        FromElement := '';
        ToElement := '';
      END;

      IF NOT SelectServEntries THEN BEGIN
        FromServOrder := '';
        ToServOrder := '';
        FromServContract := '';
        ToServContract := '';
      END ELSE BEGIN
        ServSetup.GET;  //db, 11-01-13: C004555
        IF ConvertOrderKind THEN BEGIN
          IF FromServOrder = '' THEN
            FromServContract := '';
          IF ToServOrder = '' THEN
            ToServContract := '';
        END;
      END;

      IF NOT ConvertCostComp THEN BEGIN
        FromCostComp := '';
        ToCostComp := '';
      END;

      IF NOT ConvertOrderKind THEN BEGIN
        FromOrderKind := '';
        ToOrderKind := '';
      END;

      //>>#23487
      IF ConvertCostObject = FALSE THEN BEGIN
        FromCostObject  := '';
        ToCostObject    := '';
      END;
      //<<#23487

      DeriveCostComp := ConvertOrderKind;
      IF ServSetup."Add.Cost Based On Contr.Disc." THEN BEGIN
        AddCostLaborEditable := ConvertOrderKind;
        AddCostMatEditable := ConvertOrderKind;
        AddCostSubcEditable := ConvertOrderKind;
        AddCostPlantEditable := ConvertOrderKind;
        AddCostSundryEditable := ConvertOrderKind;
      END;

      ProjectEditable := SelectJobEntries;
      ServOrderEditable := SelectServEntries;
      FromServContractEditable := SelectServEntries AND (FromServOrder = '') AND NOT ConvertOrderKind;
      ToServContractEditable := SelectServEntries AND (ToServOrder = '') AND NOT ConvertOrderKind;
      OrderKindEditable := ConvertOrderKind;
      CostCompEditable := ConvertCostComp;
      CostObjectEditable := ProjectEditable AND ConvertCostObject; //#23487
    END;

    PROCEDURE CheckToOrderKind@1100525000();
    BEGIN
      ServSetup.GET;  //db, 11-01-13: C004555
      IF NOT ServSetup."Add.Cost Based On Contr.Disc." THEN
        EXIT;

      ServOrderRec.GET(ToServOrder);
      ServOrderRec."Order Kind" := ToOrderKind;
      ServOrderRec.CheckContrDiscAdditionalCost;
      IF ServSetup."Add.Cost Based On Contr.Disc." THEN BEGIN
        AddCostLabor := ServOrderRec."Additional Cost (Labor)";
        AddCostMat := ServOrderRec."Additional Cost (Material)";
        AddCostSubc := ServOrderRec."Additional Cost (Subc)";
        AddCostPlant := ServOrderRec."Additional Cost (Plant)";
        AddCostSundry := ServOrderRec."Additional Cost (Sundry)";
      END;
    END;

    PROCEDURE ValidateOrderKind@1100525002(lvAction@1100525001 : Integer);
    BEGIN
      IF lvAction = 0 THEN BEGIN
        IF FromOrderKind = '' THEN
          OrderIndicationRec.INIT  //db, 09-04-10
        ELSE
          OrderIndicationRec.GET(OrderIndicationRec.Indication::Kind, FromOrderKind);
        FromCostComp := OrderIndicationRec."Cost Component";
        IF CostCompRec.GET(FromCostComp) THEN BEGIN
          IF CostCompRec."Cost Component (Add.Cost)" <> '' THEN
            FromCostComp := FromCostComp + '|'+ CostCompRec."Cost Component (Add.Cost)" ;
        END;
      END;

      IF lvAction = 1 THEN BEGIN
        IF ToOrderKind = '' THEN
          OrderIndicationRec.INIT  //db, 09-04-10
        ELSE
          OrderIndicationRec.GET(OrderIndicationRec.Indication::Kind, ToOrderKind);
        ToCostComp := OrderIndicationRec."Cost Component";
      END;
    END;

    LOCAL PROCEDURE SelectEntryProject@1100525003();
    VAR
      JobEntryRec@1100525004 : Record 11072005;
      JobEntryFrm@1100525003 : Page 11072005;
      CompName@1100525000 : Text[50];
    BEGIN
      //DP00850
      CompName := COMPANYNAME;
      JobEntryFrm.SetSelection(DATABASE::"Gen. Journal Line",
        '','','','',0,'','',0,CompName);

      IF NumMarkProject <> 0 THEN
        JobEntryFrm.SetMarkedLines(TmpJobEntry);

      JobEntryRec.SETCURRENTKEY("Job No.", "Cost Type", "Global Dimension 2 Code");
      JobEntryRec.SETRANGE(Surcharge, FALSE);
      JobEntryRec.SETFILTER("Job No.", FromProject);
      JobEntryRec.SETFILTER(Element, FromElement);
      JobEntryRec.SETFILTER("Extension Contract", FromExtension);
      JobEntryFrm.SETTABLEVIEW(JobEntryRec);
      JobEntryFrm.RUNMODAL;

      JobEntryFrm.GetMarkedLines(TmpJobEntry);
      NumMarkProject := TmpJobEntry.COUNT;
    END;

    LOCAL PROCEDURE SelectEntryService@1100525004();
    VAR
      ServEntryRec@1100525002 : Record 11012819;
      ServEntryFrm@1100525001 : Page 11012826;
    BEGIN
      //DP00850
      ServEntryFrm.SetSelection(DATABASE::"Gen. Journal Line",
        '','','','',0,'','',0);

      IF NumMarkService <> 0 THEN
        ServEntryFrm.SetMarkedLines(TmpServEntry);

      ServEntryRec.SETCURRENTKEY("Service Order No.");
      ServEntryRec.SETRANGE(Surcharge, FALSE);
      ServEntryRec.SETFILTER("Service Order No.", FromServOrder);
      ServEntryRec.SETFILTER("Order Kind", FromOrderKind);
      ServEntryRec.SETFILTER("Cost Component", FromCostComp);
      ServEntryFrm.SETTABLEVIEW(ServEntryRec);
      ServEntryFrm.RUNMODAL;

      ServEntryFrm.GetMarkedLines(TmpServEntry);
      NumMarkService := TmpServEntry.COUNT;
    END;

    BEGIN
    {
      db, 07-08-15: DP00850 adjustment in same project (to change cost object, element or extension) with selection on marked entry.
      4PS 28-07-2016 UKR-C24729 DKRO: Added LookUpCode and Field "Document No." to request page (RFC-066)
      160818 ITERO.AC RFC066 Minor adjustments, moved Document No field in request page and enable/disable depending on project no (from) is filled or not
      170412 ITERO.PR RFC-212 Allow to post in projects(Extension Contract)
      190219 ORANGO.DL Support #22815 incl vendor no in job ledger entry
      190404 ORANGO.FH Support #23487 Added functionality to convert Cost Object
      190425 ORANGO.FH Support #23917 incl Principal no in job ledger entry
    }
    END.
  }
  RDLDATA
  {
  }
}

