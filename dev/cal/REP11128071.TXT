OBJECT Report 11128071 To Autogiro Journal
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=PE4.06 (12047966);
  }
  PROPERTIES
  {
    Permissions=TableData 21=rimd;
    CaptionML=[ENU=To Auto Giro Journal;
               SVE=Till autogirojournal];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  gWindow.OPEN(PEB001);

                  gAutoGiroJnl.LOCKTABLE;
                  gAutoGiroJnl.SETRANGE("Pack Type",gAutoGiroJnl."Pack Type"::"Direct Debit");
                  IF gAutoGiroJnl.FIND('+') THEN
                    gNextEntryNo := gAutoGiroJnl."No." + 1
                  ELSE
                    gNextEntryNo := 1;
                END;

    OnPostReport=BEGIN
                   WITH "Gen. Journal Line" DO BEGIN
                     gGenJnlLine2.COPYFILTERS("Gen. Journal Line");
                     gGenJnlLine2.SETFILTER("Account No.",'<>%1','');
                     IF gGenJnlLine2.FIND('+') THEN; // Note last line item
                     DELETEALL;
                   END;

                   gAutoGiroJnl.INIT;
                   gAutoGiroJnl."Pack Type" := gAutoGiroJnl."Pack Type"::"Direct Debit";
                   gAutoGiroJnl."No." := gNextEntryNo;
                   gAutoGiroJnl."Giro Type" := gAutoGiroType;
                   gAutoGiroJnl.INSERT;
                   gWindow.CLOSE;
                 END;

  }
  DATASET
  {
    { 7024;    ;DataItem;                    ;
               DataItemTable=Table81;
               DataItemTableView=SORTING(Journal Template Name,Journal Batch Name,Line No.)
                                 WHERE(Account Type=CONST(Customer));
               OnPreDataItem=BEGIN
                               IF gAutoGiroType = gAutoGiroType::" " THEN
                                 ERROR(PEB002);
                               gCustomer."Auto Giro Type" := gAutoGiroType;
                               IF NOT CONFIRM(PEB003, TRUE, gCustomer."Auto Giro Type") THEN
                                 ERROR('');
                               SETFILTER("Account No.", '<>%1', '');
                             END;

               OnAfterGetRecord=BEGIN
                                  gWindow.UPDATE(1,"Account No.");
                                  gWindow.UPDATE(2,FORMAT("Applies-to Doc. Type")+' '+"Applies-to Doc. No.");

                                  IF NOT gCustomer.GET("Account No.") THEN
                                    CurrReport.SKIP;
                                  gCustomer.TESTFIELD("Approval Status",gCustomer."Approval Status"::Accepted);
                                  gCustLedgerEntry.SETCURRENTKEY("Document No.");
                                  gCustLedgerEntry.SETRANGE("Document Type", "Applies-to Doc. Type");
                                  gCustLedgerEntry.SETRANGE("Document No.", "Applies-to Doc. No.");
                                  gCustLedgerEntry.SETRANGE("Customer No.", "Account No.");
                                  IF gCustLedgerEntry.FIND('-') THEN BEGIN
                                    gCustLedgerEntry.CALCFIELDS("Remaining Amount");
                                    gAmountToPay := -gCustLedgerEntry."Remaining Amount";
                                    IF gCustLedgerEntry."Auto Giro Journal No." <> 0 THEN
                                      ERROR(PEB004,FORMAT("Applies-to Doc. Type"),"Applies-to Doc. No.",
                                            gCustLedgerEntry.FIELDCAPTION("Auto Giro Journal No."), gCustLedgerEntry."Auto Giro Journal No.");
                                    gAmountToPay := 0;
                                    IF ("Document Type" = "Document Type"::Payment) AND
                                       (gCustLedgerEntry."Document Type" = gCustLedgerEntry."Document Type"::Invoice) AND
                                       ("Due Date" <= gCustLedgerEntry."Pmt. Discount Date")
                                    THEN
                                      gAmountToPay := gCustLedgerEntry."Remaining Amount" - gCustLedgerEntry."Original Pmt. Disc. Possible"
                                    ELSE
                                      gAmountToPay := gCustLedgerEntry."Remaining Amount";

                                    IF gAmountToPay <> -Amount THEN
                                      ERROR(PEB005, gCustLedgerEntry.FIELDCAPTION("Remaining Amount"), FIELDCAPTION(Amount),
                                             FORMAT("Applies-to Doc. Type"),"Applies-to Doc. No.", -gCustLedgerEntry."Remaining Amount");

                                    gCustLedgerEntry."Auto Giro Journal No." := gNextEntryNo;
                                    gCustLedgerEntry."Due Date" := "Due Date";
                                    CODEUNIT.RUN(CODEUNIT::"Cust. Entry-Edit",gCustLedgerEntry);
                                    gCustLedgerEntry.MODIFY;
                                  END;
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1000000000;;Container;
                  Name=Cont;
                  ContainerType=ContentArea }

      { 1100570000;1;Group  ;
                  CaptionML=[ENU=Options;
                             NOR=Alternativer;
                             SVE=Alternativ];
                  GroupType=Group }

      { 1000000001;2;Field  ;
                  CaptionML=[ENU=Auto Giro Type;
                             SVE=Autogireringstyp];
                  OptionCaptionML=[ENU=" ,BG Sweden,PG Sweden";
                                   NOR=" ,BG Sverige,PG Sverige";
                                   SVE=" ,BG Sverige,PG Sverige"];
                  SourceExpr=gAutoGiroType }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      gAutoGiroJnl@1000 : Record 11128078;
      gNextEntryNo@1001 : Integer;
      gWindow@1002 : Dialog;
      gCustLedgerEntry@1003 : Record 21;
      gAutoGiroType@1004 : ' ,BG Sweden,PG Sweden';
      gGenJnlLine2@1005 : Record 81;
      gGenJnlLine3@1006 : Record 81;
      gAmountToPay@1007 : Decimal;
      gCustomer@1008 : Record 18;
      PEB001@1009 : TextConst 'ENU=Customer          #1################\Document      #2###########################\;SVE=Kund              #1################\Dokument      #2###########################\';
      PEB002@1010 : TextConst 'ENU=Enter Auto Giro Type;SVE=Du m†ste ange autogireringstyp';
      PEB003@1011 : TextConst 'ENU=Is Auto Giro type %1;SVE=Skall autogireringstyp vara %1?';
      PEB004@1013 : TextConst 'ENU=%1 %2 already exist in %3 %4;NOR=%1 %2 finnes allerede i %3 %4;SVE=%1 %2 finns redan i %3 %4.';
      PEB005@1014 : TextConst 'ENU=%1 for Customer Ledger Entry and %2 in journal for incoming Payment Journal\   must be the same for %3 %4. The amount should be %5.;SVE=%1 p† kundreskontratransaktionen och %2 i inbetalningsjournalen\m†ste vara samma p† %3 %4. Beloppet skall vara %5.';

    BEGIN
    {
      PEB *** Begin ***
      PEB0006 Autogiro
      PEB
      PEB *** End ***
    }
    END.
  }
  RDLDATA
  {
  }
}

