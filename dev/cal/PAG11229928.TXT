OBJECT Page 11229928 Bing Maps Service Location
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Bing Maps-Servicestandort;
               ENU=Bing Maps Service Location;
               NLD=Bing maps service locatie];
    SourceTable=Table11012801;
    OnInit=BEGIN
             ServiceLocationTableIDText := FORMAT(DATABASE::"Service Location");
             ServiceLocationTableIDInt := DATABASE::"Service Location";
             DisplayMultipleLocations := FALSE;
           END;

  }
  CONTROLS
  {
    { 1100525000;;Container;
                Name=Container;
                CaptionML=[DEU=Container;
                           ENU=Container;
                           NLD=Container;
                           NOR=Container;
                           SVE=Beh†llare];
                ContainerType=ContentArea }

    { 1100525001;1;Field  ;
                Name=Map;
                CaptionML=[DEU=Karte;
                           ENU=Map;
                           NLD=Kaart];
                ControlAddIn=[Fps.Nav.Addin.BingMaps;PublicKeyToken=024bd013665211e9] }

  }
  CODE
  {
    VAR
      BingMapsHandler@1100525000 : Codeunit 11012485;
      Text001@1100525001 : TextConst 'DEU=Konfigurieren Sie Bing Maps.;ENU=Please configure Bing Maps.;NLD=Stel Bing Maps in.';
      ServiceLocationTableIDText@1100525002 : Text[30];
      Text003@1100525004 : TextConst 'DEU=Verschieben;ENU=Move;NLD=Verplaats';
      DisplayMultipleLocations@1100525005 : Boolean;
      ServiceLocation@1100525006 : Record 11012801;
      ServiceLocationTableIDInt@1100525007 : Integer;

    PROCEDURE setLocation@1100525000(record@1100525000 : Record 11012801);
    BEGIN
      Rec := record;
      ServiceLocation.COPY(record, FALSE);
    END;

    LOCAL PROCEDURE addServiceLocationToMap@1100525001(location@1100525002 : Record 11012801);
    VAR
      titleValue@1100525000 : Text;
      descriptionValue@1100525001 : Text;
      ReturnType@1100525004 : 'NAV,FSA';
    BEGIN
      titleValue := BingMapsHandler.GetValueFromField(location.RECORDID, ServiceLocationTableIDInt,
                      BingMapsHandler.GetFieldIDForTitle(ServiceLocationTableIDInt, ReturnType::NAV));
      descriptionValue := BingMapsHandler.BuildDescription(location.RECORDID, ServiceLocationTableIDInt, ReturnType::NAV);
      IF (location.Latitude <> '') AND (location.Longitude <> '') THEN
        CurrPage.Map.addPinToMapLatLng(location."No.", titleValue, ServiceLocationTableIDText, descriptionValue,
          '', location.Latitude, location.Longitude)
      ELSE
        BEGIN
          CurrPage.Map.addPinToMapCode(location."No.", titleValue, ServiceLocationTableIDText, descriptionValue, '',
            STRSUBSTNO('%1 %2 %3', location.City, location.Address, location."Post Code"));
        END;
    END;

    PROCEDURE setLocations@1100525003(record@1100525000 : Record 11012801);
    BEGIN
      Rec := record;
      ServiceLocation.COPY(record, FALSE);
      DisplayMultipleLocations := TRUE;
    END;

    EVENT Map@-1100525001::ControlAddInReady@20();
    VAR
      BingMapsSetup@1100525000 : Page 11127140;
    BEGIN
      IF BingMapsHandler.SetupIsDoneAndEnabled THEN
        CurrPage.Map.setApiKey(BingMapsHandler.GetApiKey(CurrPage.OBJECTID(FALSE)))
      ELSE
        BEGIN
          MESSAGE(Text001);
          BingMapsSetup.RUN;
          CurrPage.CLOSE;
        END;
    END;

    EVENT Map@-1100525001::MapLoaded@21();
    BEGIN
      CurrPage.Map.allowEditFor(ServiceLocationTableIDText, Text003);
      IF BingMapsHandler.DisplayAsPin(ServiceLocationTableIDInt) THEN
        CurrPage.Map.displayAsPin(ServiceLocationTableIDText);
      IF DisplayMultipleLocations = TRUE THEN
        REPEAT
          addServiceLocationToMap(ServiceLocation);
        UNTIL ServiceLocation.NEXT = 0
      ELSE BEGIN
        addServiceLocationToMap(ServiceLocation);
        CurrPage.Map.setCenter(ServiceLocation.Latitude, ServiceLocation.Longitude);
      END;
    END;

    EVENT Map@-1100525001::PinAdded@22(no@1100525001 : Text;type@1100525000 : Text);
    BEGIN
      IF DisplayMultipleLocations = TRUE THEN
        CurrPage.Map.setBestView
      ELSE
        CurrPage.Map.setZoom(BingMapsHandler.GetZoomLevel);
    END;

    EVENT Map@-1100525001::AddLocationToSelection@23(no@1100525001 : Text;type@1100525000 : Text);
    BEGIN
    END;

    EVENT Map@-1100525001::RemoveLocationFromSelection@24(no@1100525001 : Text;type@1100525000 : Text);
    BEGIN
    END;

    EVENT Map@-1100525001::DirectionsReady@25(distance@1100525001 : Text;time@1100525000 : Text);
    BEGIN
    END;

    EVENT Map@-1100525001::DirectionsError@26();
    BEGIN
    END;

    EVENT Map@-1100525001::LocationUpdated@27(no@1100525003 : Text;type@1100525002 : Text;lat@1100525001 : Text;lng@1100525000 : Text);
    VAR
      TableInteger@1100525004 : Integer;
    BEGIN
      EVALUATE(TableInteger, type);
      BingMapsHandler.UpdateLocation(no, TableInteger, lat, lng);
    END;

    EVENT Map@-1100525001::LocationAdded@28(no@1100525003 : Text;type@1100525002 : Text;lat@1100525001 : Text;lng@1100525000 : Text);
    VAR
      TableInteger@1100525004 : Integer;
    BEGIN
      EVALUATE(TableInteger, type);
      BingMapsHandler.UpdateLocation(no, TableInteger, lat, lng);
    END;

    EVENT Map@-1100525001::LocationRemoved@29(no@1100525001 : Text;type@1100525000 : Text);
    BEGIN
    END;

    EVENT Map@-1100525001::ExtraAction@30(action@1100525002 : Text;no@1100525001 : Text;type@1100525000 : Text);
    BEGIN
    END;

    EVENT Map@-1100525001::ZoomLevel@31(level@1100525000 : Text);
    VAR
      levelInteger@1100525001 : Integer;
    BEGIN
      IF EVALUATE(levelInteger, level) THEN
        BingMapsHandler.SetZoomLevel(levelInteger);
    END;

    EVENT Map@-1100525001::RegisterEvent@32(no@1100528102 : Text;type@1100528101 : Text;eventname@1100528100 : Text);
    BEGIN
      BingMapsHandler.WriteToBingMapsLogUsingQuery(no, CurrPage.OBJECTID(FALSE), eventname, type);
    END;

    BEGIN
    END.
  }
}

