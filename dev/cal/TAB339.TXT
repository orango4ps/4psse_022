OBJECT Table 339 Item Application Entry
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.04;
  }
  PROPERTIES
  {
    Permissions=TableData 339=rm,
                TableData 343=ri;
    CaptionML=[ENU=Item Application Entry;
               NOR=Vareutligningspost;
               SVE=Artikelkopplingstransaktion];
    LookupPageID=Page506;
    DrillDownPageID=Page506;
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;CaptionML=[ENU=Entry No.;
                                                              NOR=L›penr.;
                                                              SVE=L”pnr] }
    { 2   ;   ;Item Ledger Entry No.;Integer      ;TableRelation="Item Ledger Entry";
                                                   CaptionML=[ENU=Item Ledger Entry No.;
                                                              NOR=Varepostnr.;
                                                              SVE=Artikeltrans.l”pnr] }
    { 3   ;   ;Inbound Item Entry No.;Integer     ;TableRelation="Item Ledger Entry";
                                                   CaptionML=[ENU=Inbound Item Entry No.;
                                                              NOR=Inng†ende varel›penr.;
                                                              SVE=Ankommande artikeltrans.nr] }
    { 4   ;   ;Outbound Item Entry No.;Integer    ;TableRelation="Item Ledger Entry";
                                                   CaptionML=[ENU=Outbound Item Entry No.;
                                                              NOR=Utg†ende varel›penr.;
                                                              SVE=Avg†ende artikeltrans.nr] }
    { 11  ;   ;Quantity            ;Decimal       ;CaptionML=[ENU=Quantity;
                                                              NOR=Antall;
                                                              SVE=Antal];
                                                   DecimalPlaces=0:5 }
    { 21  ;   ;Posting Date        ;Date          ;CaptionML=[ENU=Posting Date;
                                                              NOR=Bokf›ringsdato;
                                                              SVE=Bokf”ringsdatum] }
    { 23  ;   ;Transferred-from Entry No.;Integer ;TableRelation="Item Ledger Entry";
                                                   CaptionML=[ENU=Transferred-from Entry No.;
                                                              NOR=Overf›rt fra-l›penr.;
                                                              SVE=™verf”rd fr†n l”pnr] }
    { 25  ;   ;Creation Date       ;DateTime      ;CaptionML=[ENU=Creation Date;
                                                              NOR=Opprettet den;
                                                              SVE=Uppl„ggningsdatum] }
    { 26  ;   ;Created By User     ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              UserMgt@1000 : Codeunit 418;
                                                            BEGIN
                                                              UserMgt.LookupUserID("Created By User");
                                                            END;

                                                   TestTableRelation=No;
                                                   DataClassification=EndUserIdentifiableInformation;
                                                   CaptionML=[ENU=Created By User;
                                                              NOR=Opprettet av bruker;
                                                              SVE=Skapades av] }
    { 27  ;   ;Last Modified Date  ;DateTime      ;CaptionML=[ENU=Last Modified Date;
                                                              NOR=Siste endringsdato;
                                                              SVE=Žndrades senast] }
    { 28  ;   ;Last Modified By User;Code50       ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              UserMgt@1000 : Codeunit 418;
                                                            BEGIN
                                                              UserMgt.LookupUserID("Last Modified By User");
                                                            END;

                                                   TestTableRelation=No;
                                                   DataClassification=EndUserIdentifiableInformation;
                                                   CaptionML=[ENU=Last Modified By User;
                                                              NOR=Sist endret av bruker;
                                                              SVE=Žndrades senast av] }
    { 5800;   ;Cost Application    ;Boolean       ;CaptionML=[ENU=Cost Application;
                                                              NOR=Kostutligning;
                                                              SVE=Kost.koppling] }
    { 5804;   ;Output Completely Invd. Date;Date  ;CaptionML=[ENU=Output Completely Invd. Date;
                                                              NOR=Avgang fullstendig fakturert den;
                                                              SVE=Datum f„rdigt faktrd utfl”de] }
    { 5805;   ;Outbound Entry is Updated;Boolean  ;InitValue=No;
                                                   CaptionML=[ENU=Outbound Entry is Updated;
                                                              NOR=Utg†ende post er oppdatert;
                                                              SVE=Utg†ende transaktion har uppdaterats] }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
    {    ;Inbound Item Entry No.,Item Ledger Entry No.,Outbound Item Entry No.,Cost Application }
    {    ;Outbound Item Entry No.,Item Ledger Entry No.,Cost Application,Transferred-from Entry No. }
    {    ;Transferred-from Entry No.,Cost Application }
    {    ;Inbound Item Entry No.,Outbound Item Entry No.,Cost Application }
    {    ;Item Ledger Entry No.,Output Completely Invd. Date }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1000 : TextConst 'ENU=You have to run the %1 batch job, before you can revalue %2 %3.;NOR=Du m† kj›re kj›rselen %1 f›r du kan revaluere %2 %3.;SVE=Du m†ste k”ra batch-jobbet %1 innan du kan omv„rdera %2 %3.';
      TempVisitedItemApplnEntry@1001 : TEMPORARY Record 339;
      ItemLedgEntryInChainNo@1003 : TEMPORARY Record 2000000026;
      TrackChain@1002 : Boolean;
      MaxValuationDate@1004 : Date;

    [External]
    PROCEDURE AppliedOutbndEntryExists@43(InbndItemLedgEntryNo@1001 : Integer;CostApplication@1000 : Boolean;FilterOnOnlyCostNotAdjusted@1002 : Boolean) : Boolean;
    BEGIN
      RESET;
      SETCURRENTKEY(
        "Inbound Item Entry No.","Item Ledger Entry No.","Outbound Item Entry No.","Cost Application");
      SETRANGE("Inbound Item Entry No.",InbndItemLedgEntryNo);
      SETFILTER("Item Ledger Entry No.",'<>%1',InbndItemLedgEntryNo);
      SETFILTER("Outbound Item Entry No.",'<>%1',0);
      IF CostApplication THEN
        SETRANGE("Cost Application",TRUE);

      IF FilterOnOnlyCostNotAdjusted THEN
        SETRANGE("Outbound Entry is Updated",FALSE);

      EXIT(FINDSET);
    END;

    [External]
    PROCEDURE AppliedInbndTransEntryExists@45(InbndItemLedgEntryNo@1001 : Integer;CostApplication@1002 : Boolean) : Boolean;
    BEGIN
      RESET;
      SETCURRENTKEY("Inbound Item Entry No.","Item Ledger Entry No.");
      SETRANGE("Inbound Item Entry No.",InbndItemLedgEntryNo);
      IF ISEMPTY THEN
        EXIT(FALSE);

      RESET;
      SETCURRENTKEY("Transferred-from Entry No.","Cost Application");
      SETRANGE("Transferred-from Entry No.",InbndItemLedgEntryNo);
      IF CostApplication THEN
        SETRANGE("Cost Application",TRUE);
      EXIT(FINDSET);
    END;

    [External]
    PROCEDURE AppliedInbndEntryExists@49(OutbndItemLedgEntryNo@1001 : Integer;CostApplication@1000 : Boolean) : Boolean;
    BEGIN
      RESET;
      SETCURRENTKEY(
        "Outbound Item Entry No.","Item Ledger Entry No.","Cost Application","Transferred-from Entry No.");
      SETRANGE("Outbound Item Entry No.",OutbndItemLedgEntryNo);
      SETFILTER("Item Ledger Entry No.",'<>%1',OutbndItemLedgEntryNo);
      SETRANGE("Transferred-from Entry No.",0);
      IF CostApplication THEN
        SETRANGE("Cost Application",TRUE);
      EXIT(FINDSET);
    END;

    [External]
    PROCEDURE AppliedFromEntryExists@3(InbndItemLedgEntryNo@1001 : Integer) : Boolean;
    BEGIN
      RESET;
      SETCURRENTKEY("Outbound Item Entry No.","Item Ledger Entry No.");
      SETFILTER("Outbound Item Entry No.",'<>%1',0);
      SETRANGE("Item Ledger Entry No.",InbndItemLedgEntryNo);
      EXIT(FINDSET);
    END;

    [External]
    PROCEDURE CheckAppliedFromEntryToAdjust@1(InbndItemLedgEntryNo@1000 : Integer);
    VAR
      OutbndItemLedgEntry@1001 : Record 32;
      ObjTransl@1002 : Record 377;
    BEGIN
      IF AppliedFromEntryExists(InbndItemLedgEntryNo) THEN
        REPEAT
          OutbndItemLedgEntry.GET("Outbound Item Entry No.");
          IF OutbndItemLedgEntry."Applied Entry to Adjust" THEN
            ERROR(
              Text001,
              ObjTransl.TranslateObject(ObjTransl."Object Type"::Report,REPORT::"Adjust Cost - Item Entries"),
              OutbndItemLedgEntry.TABLECAPTION,InbndItemLedgEntryNo);
        UNTIL NEXT = 0;
    END;

    [External]
    PROCEDURE CostReceiver@2() : Integer;
    BEGIN
      IF "Outbound Item Entry No." = 0 THEN
        EXIT(0);
      IF "Item Ledger Entry No." = "Outbound Item Entry No." THEN
        EXIT("Outbound Item Entry No.");
      IF "Item Ledger Entry No." = "Inbound Item Entry No." THEN
        EXIT("Inbound Item Entry No.");
      EXIT(0);
    END;

    [External]
    PROCEDURE Fixed@4() Result : Boolean;
    VAR
      InboundItemLedgerEntry@1000 : Record 32;
      OutboundItemLedgerEntry@1001 : Record 32;
      IsHandled@1002 : Boolean;
    BEGIN
      OnBeforeFixed(Rec,Result,IsHandled);
      IF IsHandled THEN
        EXIT(Result);

      IF "Outbound Item Entry No." = 0 THEN
        EXIT(FALSE);
      IF NOT InboundItemLedgerEntry.GET("Inbound Item Entry No.") THEN
        EXIT(TRUE);
      IF InboundItemLedgerEntry."Applies-to Entry" = "Outbound Item Entry No." THEN
        EXIT(TRUE);
      IF NOT OutboundItemLedgerEntry.GET("Outbound Item Entry No.") THEN
        EXIT(TRUE);
      IF OutboundItemLedgerEntry."Applies-to Entry" = "Inbound Item Entry No." THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    [External]
    PROCEDURE InsertHistory@5() : Integer;
    VAR
      ItemApplnEntryHistory@1000 : Record 343;
      EntryNo@1001 : Integer;
    BEGIN
      ItemApplnEntryHistory.SETCURRENTKEY("Primary Entry No.");
      IF NOT ItemApplnEntryHistory.FINDLAST THEN
        EntryNo := 1;
      EntryNo := ItemApplnEntryHistory."Primary Entry No.";
      ItemApplnEntryHistory.TRANSFERFIELDS(Rec,TRUE);
      ItemApplnEntryHistory."Deleted Date" := CURRENTDATETIME;
      ItemApplnEntryHistory."Deleted By User" := USERID;
      ItemApplnEntryHistory."Primary Entry No." := EntryNo + 1;
      ItemApplnEntryHistory.INSERT;
      EXIT(ItemApplnEntryHistory."Primary Entry No.");
    END;

    [External]
    PROCEDURE CostApplication@50() : Boolean;
    BEGIN
      EXIT((Quantity > 0) AND ("Item Ledger Entry No." = "Inbound Item Entry No."))
    END;

    [External]
    PROCEDURE CheckIsCyclicalLoop@9(CheckItemLedgEntry@1004 : Record 32;FromItemLedgEntry@1005 : Record 32) : Boolean;
    BEGIN
      IF CheckItemLedgEntry."Entry No." = FromItemLedgEntry."Entry No." THEN
        EXIT(TRUE);
      TempVisitedItemApplnEntry.DELETEALL;
      ItemLedgEntryInChainNo.DELETEALL;

      IF FromItemLedgEntry.Positive THEN BEGIN
        IF CheckCyclicFwdToAppliedOutbnds(CheckItemLedgEntry,FromItemLedgEntry."Entry No.") THEN
          EXIT(TRUE);
        EXIT(CheckCyclicFwdToInbndTransfers(CheckItemLedgEntry,FromItemLedgEntry."Entry No."));
      END;
      IF FromItemLedgEntry."Entry Type" = FromItemLedgEntry."Entry Type"::Consumption THEN
        IF CheckCyclicProdCyclicalLoop(CheckItemLedgEntry,FromItemLedgEntry) THEN
          EXIT(TRUE);
      IF FromItemLedgEntry."Entry Type" = FromItemLedgEntry."Entry Type"::"Assembly Consumption" THEN
        IF CheckCyclicAsmCyclicalLoop(CheckItemLedgEntry,FromItemLedgEntry) THEN
          EXIT(TRUE);
      EXIT(CheckCyclicFwdToAppliedInbnds(CheckItemLedgEntry,FromItemLedgEntry."Entry No."));
    END;

    LOCAL PROCEDURE CheckCyclicProdCyclicalLoop@1100(CheckItemLedgEntry@1000 : Record 32;ItemLedgEntry@1304 : Record 32) : Boolean;
    BEGIN
      IF NOT IsItemEverOutput(ItemLedgEntry."Item No.") THEN
        EXIT(FALSE);

      IF ItemLedgEntry."Order Type" <> ItemLedgEntry."Order Type"::Production THEN
        EXIT(FALSE);
      IF ItemLedgEntry."Entry Type" = ItemLedgEntry."Entry Type"::Output THEN
        EXIT(FALSE);
      IF ItemLedgEntry.Positive THEN
        EXIT(FALSE);
      IF (CheckItemLedgEntry."Entry Type" = CheckItemLedgEntry."Entry Type"::Output) AND
         (ItemLedgEntry."Order Type" = CheckItemLedgEntry."Order Type") AND
         (ItemLedgEntry."Order No." = CheckItemLedgEntry."Order No.") AND
         (ItemLedgEntry."Order Line No." = CheckItemLedgEntry."Order Line No.")
      THEN
        EXIT(TRUE);

      ItemLedgEntry.SETCURRENTKEY("Order Type","Order No.","Order Line No.","Entry Type");
      ItemLedgEntry.SETRANGE("Order Type",ItemLedgEntry."Order Type");
      ItemLedgEntry.SETRANGE("Order No.",ItemLedgEntry."Order No.");
      ItemLedgEntry.SETRANGE("Order Line No.",ItemLedgEntry."Order Line No.");
      ItemLedgEntry.SETRANGE("Entry Type",ItemLedgEntry."Entry Type"::Output);
      IF MaxValuationDate <> 0D THEN
        ItemLedgEntry.SETRANGE("Posting Date",0D,MaxValuationDate);
      IF ItemLedgEntry.FINDSET THEN
        REPEAT
          IF TrackChain THEN
            IF NOT ItemLedgEntryInChainNo.GET(ItemLedgEntry."Entry No.") THEN BEGIN
              ItemLedgEntryInChainNo.Number := ItemLedgEntry."Entry No.";
              ItemLedgEntryInChainNo.INSERT;
            END;

          IF ItemLedgEntry."Entry No." = CheckItemLedgEntry."Entry No." THEN
            EXIT(TRUE);

          IF ItemLedgEntry.Positive THEN
            IF CheckCyclicFwdToAppliedOutbnds(CheckItemLedgEntry,ItemLedgEntry."Entry No.") THEN
              EXIT(TRUE);
        UNTIL ItemLedgEntry.NEXT = 0;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE CheckCyclicAsmCyclicalLoop@1101(CheckItemLedgEntry@1000 : Record 32;ItemLedgEntry@1304 : Record 32) : Boolean;
    BEGIN
      IF ItemLedgEntry."Order Type" <> ItemLedgEntry."Order Type"::Assembly THEN
        EXIT(FALSE);
      IF ItemLedgEntry."Entry Type" = ItemLedgEntry."Entry Type"::"Assembly Output" THEN
        EXIT(FALSE);
      IF ItemLedgEntry.Positive THEN
        EXIT(FALSE);
      IF (CheckItemLedgEntry."Entry Type" = CheckItemLedgEntry."Entry Type"::"Assembly Output") AND
         (ItemLedgEntry."Order Type" = CheckItemLedgEntry."Order Type") AND
         (ItemLedgEntry."Order No." = CheckItemLedgEntry."Order No.")
      THEN
        EXIT(TRUE);

      ItemLedgEntry.SETCURRENTKEY("Order Type","Order No.","Order Line No.","Entry Type");
      ItemLedgEntry.SETRANGE("Order Type",ItemLedgEntry."Order Type");
      ItemLedgEntry.SETRANGE("Order No.",ItemLedgEntry."Order No.");
      ItemLedgEntry.SETRANGE("Entry Type",ItemLedgEntry."Entry Type"::"Assembly Output");
      IF MaxValuationDate <> 0D THEN
        ItemLedgEntry.SETRANGE("Posting Date",0D,MaxValuationDate);
      IF ItemLedgEntry.FINDSET THEN
        REPEAT
          IF TrackChain THEN
            IF NOT ItemLedgEntryInChainNo.GET(ItemLedgEntry."Entry No.") THEN BEGIN
              ItemLedgEntryInChainNo.Number := ItemLedgEntry."Entry No.";
              ItemLedgEntryInChainNo.INSERT;
            END;

          IF ItemLedgEntry."Entry No." = CheckItemLedgEntry."Entry No." THEN
            EXIT(TRUE);

          IF ItemLedgEntry.Positive THEN
            IF CheckCyclicFwdToAppliedOutbnds(CheckItemLedgEntry,ItemLedgEntry."Entry No.") THEN
              EXIT(TRUE);
        UNTIL ItemLedgEntry.NEXT = 0;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE CheckCyclicFwdToAppliedOutbnds@11(CheckItemLedgEntry@1002 : Record 32;EntryNo@1000 : Integer) : Boolean;
    VAR
      ItemApplnEntry@1001 : Record 339;
    BEGIN
      IF ItemApplnEntry.AppliedOutbndEntryExists(EntryNo,FALSE,FALSE) THEN
        EXIT(CheckCyclicFwdToAppliedEntries(CheckItemLedgEntry,ItemApplnEntry,EntryNo,TRUE));
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE CheckCyclicFwdToAppliedInbnds@7(CheckItemLedgEntry@1002 : Record 32;EntryNo@1001 : Integer) : Boolean;
    VAR
      ItemApplnEntry@1000 : Record 339;
    BEGIN
      IF ItemApplnEntry.AppliedInbndEntryExists(EntryNo,FALSE) THEN
        EXIT(CheckCyclicFwdToAppliedEntries(CheckItemLedgEntry,ItemApplnEntry,EntryNo,FALSE));
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE CheckCyclicFwdToInbndTransfers@6(CheckItemLedgEntry@1001 : Record 32;EntryNo@1000 : Integer) : Boolean;
    VAR
      ItemApplnEntry@1002 : Record 339;
    BEGIN
      IF ItemApplnEntry.AppliedInbndTransEntryExists(EntryNo,FALSE) THEN
        EXIT(CheckCyclicFwdToAppliedEntries(CheckItemLedgEntry,ItemApplnEntry,EntryNo,FALSE));
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE CheckCyclicFwdToProdOutput@1264(CheckItemLedgEntry@1000 : Record 32;EntryNo@1670 : Integer) : Boolean;
    VAR
      ItemLedgEntry@1991 : Record 32;
    BEGIN
      IF NOT ItemLedgEntry.GET(EntryNo) THEN
        EXIT(FALSE);
      EXIT(CheckCyclicProdCyclicalLoop(CheckItemLedgEntry,ItemLedgEntry));
    END;

    LOCAL PROCEDURE CheckCyclicFwdToAsmOutput@1102(CheckItemLedgEntry@1000 : Record 32;EntryNo@1670 : Integer) : Boolean;
    VAR
      ItemLedgEntry@1991 : Record 32;
    BEGIN
      IF NOT ItemLedgEntry.GET(EntryNo) THEN
        EXIT(FALSE);
      EXIT(CheckCyclicAsmCyclicalLoop(CheckItemLedgEntry,ItemLedgEntry));
    END;

    LOCAL PROCEDURE CheckCyclicFwdToAppliedEntries@8(CheckItemLedgEntry@1001 : Record 32;VAR ItemApplnEntry@1005 : Record 339;FromEntryNo@1002 : Integer;IsPositiveToNegativeFlow@1009 : Boolean) : Boolean;
    VAR
      ToEntryNo@1008 : Integer;
    BEGIN
      IF EntryIsVisited(FromEntryNo) THEN
        EXIT(FALSE);

      REPEAT
        IF IsPositiveToNegativeFlow THEN
          ToEntryNo := ItemApplnEntry."Outbound Item Entry No."
        ELSE
          ToEntryNo := ItemApplnEntry."Inbound Item Entry No.";

        IF CheckLatestItemLedgEntryValuationDate(ItemApplnEntry."Item Ledger Entry No.",MaxValuationDate) THEN BEGIN
          IF TrackChain THEN
            IF NOT ItemLedgEntryInChainNo.GET(ToEntryNo) THEN BEGIN
              ItemLedgEntryInChainNo.Number := ToEntryNo;
              ItemLedgEntryInChainNo.INSERT;
            END;

          IF ToEntryNo = CheckItemLedgEntry."Entry No." THEN
            EXIT(TRUE);
          IF CheckCyclicFwdToAppliedOutbnds(CheckItemLedgEntry,ToEntryNo) THEN
            EXIT(TRUE);
          IF CheckCyclicFwdToAppliedInbnds(CheckItemLedgEntry,ToEntryNo) THEN
            EXIT(TRUE);
          IF CheckCyclicFwdToProdOutput(CheckItemLedgEntry,ToEntryNo) THEN
            EXIT(TRUE);
          IF CheckCyclicFwdToAsmOutput(CheckItemLedgEntry,ToEntryNo) THEN
            EXIT(TRUE);
        END;
      UNTIL ItemApplnEntry.NEXT = 0;
      EXIT(CheckCyclicFwdToInbndTransfers(CheckItemLedgEntry,FromEntryNo));
    END;

    LOCAL PROCEDURE EntryIsVisited@10(EntryNo@1000 : Integer) : Boolean;
    BEGIN
      WITH TempVisitedItemApplnEntry DO BEGIN
        IF GET(EntryNo) THEN BEGIN
          // This is to take into account quantity flows from an inbound entry to an inbound transfer
          IF Quantity = 2 THEN
            EXIT(TRUE);
          Quantity := Quantity + 1;
          MODIFY;
          EXIT(FALSE);
        END;
        INIT;
        "Entry No." := EntryNo;
        Quantity := Quantity + 1;
        INSERT;
        EXIT(FALSE);
      END;
    END;

    [External]
    PROCEDURE GetVisitedEntries@15(FromItemLedgEntry@1000 : Record 32;VAR ItemLedgEntryInChain@1001 : Record 32;WithinValuationDate@1004 : Boolean);
    VAR
      ToItemLedgEntry@1002 : Record 32;
      DummyItemLedgEntry@1003 : Record 32;
      AvgCostAdjmtEntryPoint@1005 : Record 5804;
      ValueEntry@1006 : Record 5802;
    BEGIN
      MaxValuationDate := 0D;
      IF WithinValuationDate THEN BEGIN
        ValueEntry.SETCURRENTKEY("Item Ledger Entry No.","Valuation Date");
        ValueEntry.SETRANGE("Item Ledger Entry No.",FromItemLedgEntry."Entry No.");
        ValueEntry.FINDLAST;
        AvgCostAdjmtEntryPoint.SETRANGE("Item No.",FromItemLedgEntry."Item No.");
        IF NOT AvgCostAdjmtEntryPoint.IsAvgCostCalcTypeItem(ValueEntry."Valuation Date") THEN BEGIN
          AvgCostAdjmtEntryPoint.SETRANGE("Variant Code",FromItemLedgEntry."Variant Code");
          AvgCostAdjmtEntryPoint.SETRANGE("Location Code",FromItemLedgEntry."Location Code");
        END;
        AvgCostAdjmtEntryPoint.SETRANGE("Valuation Date",ValueEntry."Valuation Date",DMY2DATE(31,12,9999));
        IF AvgCostAdjmtEntryPoint.FINDFIRST THEN
          MaxValuationDate := AvgCostAdjmtEntryPoint."Valuation Date"
      END;

      TrackChain := TRUE;
      ItemLedgEntryInChain.RESET;
      ItemLedgEntryInChain.DELETEALL;
      DummyItemLedgEntry.INIT;
      DummyItemLedgEntry."Entry No." := -1;
      CheckIsCyclicalLoop(DummyItemLedgEntry,FromItemLedgEntry);
      IF ItemLedgEntryInChainNo.FINDSET THEN
        REPEAT
          ToItemLedgEntry.GET(ItemLedgEntryInChainNo.Number);
          ItemLedgEntryInChain := ToItemLedgEntry;
          ItemLedgEntryInChain.INSERT;
        UNTIL ItemLedgEntryInChainNo.NEXT = 0;
    END;

    [External]
    PROCEDURE OutboundApplied@12(EntryNo@1002 : Integer;SameType@1005 : Boolean) : Decimal;
    VAR
      Applications@1001 : Record 339;
      ItemEntry@1000 : Record 32;
      OriginalEntry@1004 : Record 32;
      Quantity@1003 : Decimal;
    BEGIN
      IF NOT OriginalEntry.GET(EntryNo) THEN
        EXIT(0);
      IF OriginalEntry."Entry Type" = OriginalEntry."Entry Type"::Transfer THEN
        EXIT(0);
      Applications.SETCURRENTKEY("Outbound Item Entry No.");
      Applications.SETRANGE("Outbound Item Entry No.",EntryNo);
      Applications.SETRANGE("Item Ledger Entry No.",EntryNo);
      Quantity := 0;
      IF Applications.FINDSET THEN
        REPEAT
          IF ItemEntry.GET(Applications."Inbound Item Entry No.") THEN
            IF SameType THEN BEGIN
              IF ItemEntry."Entry Type" = OriginalEntry."Entry Type" THEN
                Quantity := Quantity + Applications.Quantity
            END ELSE
              Quantity := Quantity + Applications.Quantity;
        UNTIL Applications.NEXT <= 0;
      EXIT(Quantity);
    END;

    [External]
    PROCEDURE InboundApplied@13(EntryNo@1002 : Integer;SameType@1005 : Boolean) : Decimal;
    VAR
      Applications@1001 : Record 339;
      ItemEntry@1000 : Record 32;
      OriginalEntry@1004 : Record 32;
      Quantity@1003 : Decimal;
    BEGIN
      IF NOT OriginalEntry.GET(EntryNo) THEN
        EXIT(0);
      IF OriginalEntry."Entry Type" = OriginalEntry."Entry Type"::Transfer THEN
        EXIT(0);
      Applications.SETCURRENTKEY("Inbound Item Entry No.");
      Applications.SETFILTER("Outbound Item Entry No.",'<>%1',0);
      Applications.SETRANGE("Inbound Item Entry No.",EntryNo);
      IF OriginalEntry.Quantity < 0 THEN
        Applications.SETRANGE("Item Ledger Entry No.",EntryNo);
      Quantity := 0;
      IF Applications.FINDSET THEN
        REPEAT
          IF ItemEntry.GET(Applications."Outbound Item Entry No.") THEN
            IF SameType THEN BEGIN
              IF (ItemEntry."Entry Type" = OriginalEntry."Entry Type") OR
                 (ItemEntry."Applies-to Entry" <> 0)
              THEN
                Quantity := Quantity + Applications.Quantity
            END ELSE
              Quantity := Quantity + Applications.Quantity;
        UNTIL Applications.NEXT = 0;
      EXIT(Quantity);
    END;

    [External]
    PROCEDURE Returned@14(EntryNo@1002 : Integer) : Decimal;
    BEGIN
      EXIT(-OutboundApplied(EntryNo,TRUE) - InboundApplied(EntryNo,TRUE));
    END;

    [External]
    PROCEDURE ExistsBetween@1102601000(ILE1@1102601000 : Integer;ILE2@1102601001 : Integer) : Boolean;
    VAR
      Applications@1102601002 : Record 339;
    BEGIN
      Applications.SETRANGE("Inbound Item Entry No.",ILE1);
      Applications.SETRANGE("Outbound Item Entry No.",ILE2);
      IF NOT Applications.ISEMPTY THEN
        EXIT(TRUE);
      Applications.SETRANGE("Inbound Item Entry No.",ILE2);
      Applications.SETRANGE("Outbound Item Entry No.",ILE1);
      EXIT(NOT Applications.ISEMPTY);
    END;

    LOCAL PROCEDURE IsItemEverOutput@16(ItemNo@1000 : Code[20]) : Boolean;
    VAR
      ItemLedgEntry@1001 : Record 32;
    BEGIN
      ItemLedgEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgEntry.SETRANGE("Entry Type",ItemLedgEntry."Entry Type"::Output);
      EXIT(NOT ItemLedgEntry.ISEMPTY);
    END;

    [External]
    PROCEDURE SetOutboundsNotUpdated@110(ItemLedgEntry@1000 : Record 32);
    VAR
      ItemApplnEntry@1001 : Record 339;
    BEGIN
      IF NOT (ItemLedgEntry."Applied Entry to Adjust" OR ItemLedgEntry.Open) THEN
        EXIT;

      IF ItemLedgEntry.Quantity < 0 THEN
        EXIT;

      ItemApplnEntry.SETRANGE("Inbound Item Entry No.",ItemLedgEntry."Entry No.");
      ItemApplnEntry.MODIFYALL("Outbound Entry is Updated",FALSE);
    END;

    [External]
    PROCEDURE SetInboundToUpdated@84(ItemLedgEntry@1000 : Record 32);
    VAR
      ItemApplnEntry@1001 : Record 339;
    BEGIN
      ItemApplnEntry.SETRANGE("Outbound Item Entry No.",ItemLedgEntry."Entry No.");
      IF ItemLedgEntry."Completely Invoiced" THEN
        IF ItemApplnEntry.COUNT = 1 THEN BEGIN
          ItemApplnEntry.FINDFIRST;
          ItemApplnEntry."Outbound Entry is Updated" := TRUE;
          ItemApplnEntry.MODIFY;
        END;
    END;

    [External]
    PROCEDURE IsAppliedFromIncrease@17(InbndItemLedgEntryNo@1001 : Integer) : Boolean;
    BEGIN
      RESET;
      SETCURRENTKEY(
        "Inbound Item Entry No.","Item Ledger Entry No.","Outbound Item Entry No.","Cost Application");
      SETRANGE("Inbound Item Entry No.",InbndItemLedgEntryNo);
      SETRANGE("Item Ledger Entry No.",InbndItemLedgEntryNo);
      SETFILTER("Outbound Item Entry No.",'<>%1',0);
      SETRANGE("Cost Application",TRUE);
      EXIT(FINDFIRST);
    END;

    [External]
    PROCEDURE IsOutbndItemApplEntryCostApplication@400(OutboundItemLedgEntryNo@1000 : Integer) : Boolean;
    VAR
      ItemApplicationEntry@1001 : Record 339;
    BEGIN
      ItemApplicationEntry.SETCURRENTKEY("Outbound Item Entry No.","Item Ledger Entry No.","Cost Application");
      ItemApplicationEntry.SETRANGE("Outbound Item Entry No.",OutboundItemLedgEntryNo);
      ItemApplicationEntry.SETRANGE("Item Ledger Entry No.",OutboundItemLedgEntryNo);
      ItemApplicationEntry.SETRANGE("Cost Application",FALSE);
      EXIT(ItemApplicationEntry.ISEMPTY);
    END;

    LOCAL PROCEDURE CheckLatestItemLedgEntryValuationDate@18(ItemLedgerEntryNo@1000 : Integer;MaxDate@1001 : Date) : Boolean;
    VAR
      ValueEntry@1002 : Record 5802;
    BEGIN
      IF MaxDate = 0D THEN
        EXIT(TRUE);
      ValueEntry.SETCURRENTKEY("Item Ledger Entry No.","Valuation Date");
      ValueEntry.SETRANGE("Item Ledger Entry No.",ItemLedgerEntryNo);
      ValueEntry.FINDLAST;
      EXIT(ValueEntry."Valuation Date" <= MaxDate);
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeFixed@19(ItemApplicationEntry@1000 : Record 339;VAR Result@1001 : Boolean;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

