OBJECT Report 11012270 Fill Prognosis from Ass. Cap.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Prognose aus zugeordneter Kapazit„t pro Aktion eingeben;
               ENU=Fill Prognosis from Assigned Activity Capacity;
               NLD=Prognose vanuit toegekende capaciteit per activiteit vullen;
               NOR=Fyll ut prognose fra tilordnet aktivitetskapasitet;
               SVE=Fyll i prognos fr†n tilldelad aktivitetskapacitet];
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   GLSetupRec.GET;
                 END;

    OnPreReport=BEGIN
                  IF ProjectNo <> '' THEN
                    PrognRec.GET(ProjectNo, PrognosisDate);
                  IF PrognosisDate = 0D THEN
                    ERROR(Text001, PrognRec.FIELDCAPTION("Prognosis Date"));

                  IF StartingDatePlanning = 0D THEN
                    StartingDatePlanning := PrognosisDate;

                  Window.OPEN(Text000);
                END;

    OnPostReport=BEGIN
                   Window.CLOSE;
                 END;

  }
  DATASET
  {
    { 8019;    ;DataItem;                    ;
               DataItemTable=Table11072003;
               DataItemTableView=SORTING(No.);
               OnPreDataItem=BEGIN
                               IF ProjectNo <> '' THEN
                                 SETRANGE("No.", ProjectNo);
                             END;

               OnAfterGetRecord=BEGIN
                                  Window.UPDATE(1, "No.");
                                  IF NOT PrognRec.GET("No.", PrognosisDate) THEN
                                    CurrReport.SKIP;
                                END;
                                 }

    { 5362;1   ;DataItem;CostTypeNo          ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=FILTER(1|4));
               OnAfterGetRecord=BEGIN
                                  PrognLineRec.RESET;
                                  PrognLineRec.SETRANGE("Project No.", Job."No.");
                                  PrognLineRec.SETRANGE("Prognosis Date", PrognosisDate);
                                  CASE Number OF
                                    1: PrognLineRec.SETRANGE("Cost Type", PrognLineRec."Cost Type"::Labor);
                                    4: PrognLineRec.SETRANGE("Cost Type", PrognLineRec."Cost Type"::Plant);
                                  ELSE
                                    CurrReport.SKIP;
                                  END;
                                  IF NOT PrognLineRec.FINDFIRST THEN
                                    CurrReport.SKIP;

                                  Window.UPDATE(2, PrognLineRec."Cost Type");

                                  AssignedCapRec.RESET;
                                  AssignedCapRec.SETCURRENTKEY("Project No.", "Resource Type");
                                  AssignedCapRec.SETRANGE("Project No.", Job."No.");
                                  CASE Number OF
                                    1: AssignedCapRec.SETRANGE("Resource Type", AssignedCapRec."Resource Type"::Employee);
                                    4: AssignedCapRec.SETRANGE("Resource Type", AssignedCapRec."Resource Type"::Plant);
                                  END;
                                  IF AssignedCapRec.ISEMPTY THEN  //* Only if there is something of project / resource type
                                    CurrReport.SKIP;

                                  TmpTotal1Rec.RESET;
                                  TmpTotal1Rec.DELETEALL;
                                  TmpTotal2Rec.RESET;
                                  TmpTotal2Rec.DELETEALL;
                                  TmpTotal3Rec.RESET;
                                  TmpTotal3Rec.DELETEALL;
                                  TmpRateRec.RESET;
                                  TmpRateRec.DELETEALL;
                                END;
                                 }

    { 2271;2   ;DataItem;                    ;
               DataItemTable=Table11012431;
               DataItemTableView=SORTING(Project No.,Code)
                                 WHERE(Code=FILTER(<>''));
               OnAfterGetRecord=BEGIN
                                  Window.UPDATE(3, Code);
                                END;

               DataItemLinkReference=Job;
               DataItemLink=Project No.=FIELD(No.) }

    { 5115;3   ;DataItem;                    ;
               DataItemTable=Table11012001;
               DataItemTableView=SORTING(Project No.,Project Planning Activity No.,Cost Object);
               OnPreDataItem=BEGIN
                               Window.UPDATE(4, TABLECAPTION);

                               CASE CostTypeNo.Number OF
                                 1: SETRANGE("Cost Type", "Cost Type"::Labor);
                                 4: SETRANGE("Cost Type", "Cost Type"::Plant);
                               END;
                             END;

               OnAfterGetRecord=BEGIN
                                  UpdateTmpTotal1("Cost Type", "Cost Object", Element, "Project Planning Activity".Code, "Amount (LCY)");
                                  UpdateTmpTotal2("Project Planning Activity".Code, "Amount (LCY)");
                                END;

               DataItemLinkReference=Project Planning Activity;
               DataItemLink=Project No.=FIELD(Project No.),
                            Project Planning Activity No.=FIELD(No.) }

    { 2010;3   ;DataItem;                    ;
               DataItemTable=Table11125711;
               DataItemTableView=SORTING(Project No.,Activity Code,Resource Type,Date);
               OnPreDataItem=BEGIN
                               Window.UPDATE(4, TABLECAPTION);

                               CASE CostTypeNo.Number OF
                                 1: SETRANGE("Resource Type", "Resource Type"::Employee);
                                 4: SETRANGE("Resource Type", "Resource Type"::Plant);
                               END;

                               SETFILTER(Date, '>=%1', StartingDatePlanning);
                             END;

               OnAfterGetRecord=BEGIN
                                  UpdateTmpTotal3("Project Planning Activity".Code, "Resource Type", "Resource Code", "Plant No.", Hours);
                                END;

               DataItemLinkReference=Project Planning Activity;
               DataItemLink=Project No.=FIELD(Project No.),
                            Activity Code=FIELD(Code) }

    { 5975;2   ;DataItem;                    ;
               DataItemTable=Table11012035;
               DataItemTableView=SORTING(Project No.,Prognosis Date,Cost Type,Element,Cost Object)
                                 WHERE(Cost Object=FILTER(<>''));
               OnPreDataItem=BEGIN
                               Window.UPDATE(4, TABLECAPTION);

                               CASE CostTypeNo.Number OF
                                 1: SETRANGE("Cost Type", "Cost Type"::Labor);
                                 4: SETRANGE("Cost Type", "Cost Type"::Plant);
                               END;

                               SETRANGE("Prognosis Date", PrognRec."Prognosis Date"); //call C000619
                             END;

               OnAfterGetRecord=VAR
                                  TotalHours@1100525001 : Decimal;
                                  TotalAmount@1100525000 : Decimal;
                                  UnitPrice@1100525002 : Decimal;
                                BEGIN
                                  GetTotalHoursAndTotalAmount("Cost Object", Element, TotalHours, TotalAmount);

                                  //* Fill fields without 'Validate'
                                  Quantity := ROUND(TotalHours, 0.00001);
                                  "Amount incl. Surcharge" := ROUND(TotalAmount, GLSetupRec."Amount Rounding Precision");
                                  IF Quantity <> 0 THEN
                                    UnitPrice := ROUND(("Amount incl. Surcharge" / Quantity), GLSetupRec."Unit-Amount Rounding Precision");
                                  IF "Cost Type" = "Cost Type"::Labor THEN
                                    Rate := UnitPrice
                                  ELSE
                                    Price := UnitPrice;
                                  CalculatePrognosisFields();
                                  MODIFY(FALSE);
                                END;

               DataItemLinkReference=Job;
               DataItemLink=Project No.=FIELD(No.) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnOpenPage=BEGIN
                   StartingDatePlanning := PrognosisDate;
                 END;

    }
    CONTROLS
    {
      { 1100525000;;Container;
                  ContainerType=ContentArea }

      { 1100525001;1;Group  ;
                  CaptionML=[DEU=Optionen;
                             ENU=Options;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ];
                  GroupType=Group }

      { 1100525002;2;Field  ;
                  Name=Planning Date from;
                  CaptionML=[DEU=Planungsdatum ab;
                             ENU=Planning Date from;
                             NLD=Planningsdatum vanaf;
                             NOR=Planleggingsdato fra;
                             SVE=Planeringsdatum fr†n];
                  SourceExpr=StartingDatePlanning }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      GLSetupRec@1100525015 : Record 98;
      PrognRec@1100525006 : Record 11012034;
      PrognLineRec@1100525000 : Record 11012035;
      AssignedCapRec@1100525005 : Record 11125711;
      EmplRec@1100525012 : Record 5200;
      DimValRec@1100525013 : Record 349;
      TmpTotal1Rec@1100525009 : TEMPORARY Record 11012217;
      TmpTotal2Rec@1100525010 : TEMPORARY Record 11012217;
      TmpTotal3Rec@1100525011 : TEMPORARY Record 11012217;
      TmpRateRec@1100525007 : TEMPORARY Record 11012217;
      DimMgt@1100525014 : Codeunit 408;
      SearchPlantRate@1100525008 : Codeunit 11012567;
      Window@1100525016 : Dialog;
      StartingDatePlanning@1100525003 : Date;
      PrognosisDate@1100525002 : Date;
      ProjectNo@1100525001 : Code[20];
      Text000@1100525017 : TextConst 'DEU=Projekt     #1############\Kostenart #2############\Aktivit„t  #3############\Verarbeiten   #4#########################;ENU=Project   #1############\Cost Type #2############\Activity  #3############\Process   #4#########################;NLD=Project     #1############\Kostensoort #2############\Activiteit  #3############\Verwerken   #4#########################;NOR=Prosjekt #1############\Kostnadstype #2############\Aktivitet #3############\Prosesser #4#########################;SVE=Projekt   #1############\Kostnadstyp #2############\Aktivitet  #3############\Process   #4#########################';
      Text001@1100525004 : TextConst 'DEU=%1 unbekannt.;ENU=%1 unknown.;NLD=%1 onbekend.;NOR=%1 ukjent;SVE=%1 „r ok„nd.';

    PROCEDURE SetSelection@1100525001(ProjNo@1100525000 : Code[20];PrognDate@1100525001 : Date);
    BEGIN
      ProjectNo := ProjNo;
      PrognosisDate := PrognDate;
    END;

    PROCEDURE UpdateTmpTotal1@1100525000(CostType@1100525004 : Option;CostObject@1100525001 : Code[20];ElemCode@1100525002 : Code[20];ActCode@1100525000 : Code[20];BudgetAmount@1100525003 : Decimal);
    BEGIN
      IF ElemCode <> '' THEN BEGIN
        IF NOT PrognLineRec.GET(Job."No.", PrognRec."Prognosis Date", CostType, ElemCode, CostObject) THEN
          ElemCode := '';
      END;

      WITH TmpTotal1Rec DO BEGIN  //* Total 1: Budget total by CostObject (/ Element) / Activity
        IF NOT GET(CostObject, ElemCode, ActCode) THEN BEGIN
          INIT;
          "Code 1" := CostObject;
          "Code 2" := ElemCode;
          "Code 3" := ActCode;
          Value := BudgetAmount;
          INSERT;
        END ELSE BEGIN
          Value := Value + BudgetAmount;
          MODIFY;
        END;
      END;
    END;

    PROCEDURE UpdateTmpTotal2@1100525002(ActCode@1100525005 : Code[20];BudgetAmount@1100525003 : Decimal);
    BEGIN
      WITH TmpTotal2Rec DO BEGIN  //* Total 2: Budget total by Activity
        IF NOT GET(ActCode, '', '') THEN BEGIN
          INIT;
          "Code 1" := ActCode;
          "Code 2" := '';
          "Code 3" := '';
          Value := BudgetAmount;
          INSERT;
        END ELSE BEGIN
          Value := Value + BudgetAmount;
          MODIFY;
        END;
      END;
    END;

    PROCEDURE UpdateTmpTotal3@1100525004(ActCode@1100525005 : Code[20];ResourceType@1100525000 : Option;ResourceCode@1100525001 : Code[20];PlantNo@1100525002 : Code[20];PlannedHours@1100525003 : Decimal);
    BEGIN
      IF ResourceType <> "Assigned Activ. Cap. by Day"."Resource Type"::Plant THEN
        PlantNo := '';
      WITH TmpTotal3Rec DO BEGIN  //* Total 3: Capacity planning total by Activity / Resource(employee or plant)
        IF NOT GET(ActCode, ResourceCode, PlantNo) THEN BEGIN
          INIT;
          "Code 1" := ActCode;
          "Code 2" := ResourceCode;  //* Employee No. or Plant Type
          "Code 3" := PlantNo;
          Value := PlannedHours;
          INSERT;
        END ELSE BEGIN
          Value := Value + PlannedHours;
          MODIFY;
        END;
      END;
    END;

    PROCEDURE GetTotalHoursAndTotalAmount@1100525003(CostObject@1100525001 : Code[20];ElemCode@1100525002 : Code[20];VAR TotalHours@1100525004 : Decimal;VAR TotalAmount@1100525003 : Decimal);
    VAR
      PlanHours@1100525000 : Decimal;
    BEGIN
      TotalHours := 0;
      TotalAmount := 0;

      TmpTotal1Rec.RESET;
      TmpTotal1Rec.SETRANGE("Code 1", CostObject);
      TmpTotal1Rec.SETRANGE("Code 2", ElemCode);
      IF TmpTotal1Rec.FINDSET THEN BEGIN
        TmpTotal3Rec.RESET;
        REPEAT
          IF TmpTotal2Rec.GET(TmpTotal1Rec."Code 3", '', '') THEN BEGIN  //* Activity
            IF TmpTotal2Rec.Value <> 0 THEN BEGIN
              TmpTotal3Rec.SETRANGE("Code 1", TmpTotal1Rec."Code 3");  //* Activity
              IF TmpTotal3Rec.FINDSET THEN BEGIN
                REPEAT
                  PlanHours := (TmpTotal1Rec.Value / TmpTotal2Rec.Value) * TmpTotal3Rec.Value;
                  TotalHours := TotalHours + PlanHours;
                  TotalAmount := TotalAmount + (PlanHours * GetRate(TmpTotal3Rec."Code 2", TmpTotal3Rec."Code 3", CostObject));
                UNTIL TmpTotal3Rec.NEXT = 0;
              END;
            END;
          END;
        UNTIL TmpTotal1Rec.NEXT = 0;
      END;
    END;

    PROCEDURE GetRate@1100525006(ResourceCode@1100525001 : Code[20];PlantNo@1100525000 : Code[20];CostObject@1100525002 : Code[20]) : Decimal;
    BEGIN
      IF "Prognosis Line"."Cost Type" <> "Prognosis Line"."Cost Type"::Plant THEN
        PlantNo := '';
      IF NOT TmpRateRec.GET(ResourceCode, PlantNo, '') THEN BEGIN
        TmpRateRec.INIT;
        TmpRateRec."Code 1" := ResourceCode;  //* Employee No. or Plant Type
        TmpRateRec."Code 2" := PlantNo;       //* Only for Cost Type 'Plant'
        TmpRateRec."Code 3" := '';
        CASE "Prognosis Line"."Cost Type" OF
          "Prognosis Line"."Cost Type"::Labor:
            TmpRateRec.Value := GetEmployeeCostPrice(ResourceCode, CostObject, "Prognosis Line"."Project No.");
          "Prognosis Line"."Cost Type"::Plant:
            TmpRateRec.Value := SearchPlantRate.Rate('', ResourceCode, PlantNo, '', PrognosisDate, 3, 0, '');
        END;
        TmpRateRec.INSERT
      END;
      EXIT(TmpRateRec.Value);
    END;

    PROCEDURE GetEmployeeCostPrice@1100485032(EmplNo@1100525001 : Code[20];CostObject@1100525002 : Code[20];ProjNo@1100525003 : Code[20]) : Decimal;
    VAR
      HourLineRec@1100525000 : Record 11012039;
      Fcurrency@1100525004 : Boolean;
    BEGIN
      //* There is no codeunit for determine the cost price of an employee.
      //* This is only done in the Hour Accounting Line (T11012039). So get the price via record of T11012039.
      //* In future this must be a codeunit (action PS).
      HourLineRec.INIT;
      HourLineRec."Employee No." := EmplNo;
      HourLineRec."Cost Object" := CostObject;
      HourLineRec."Project No." := ProjNo;
      HourLineRec.Type := HourLineRec.Type::Project;
      HourLineRec."Posting Date" := PrognRec."Prognosis Date";
      HourLineRec."Receiving Company" := COMPANYNAME;
      HourLineRec."Supplying Company" := COMPANYNAME;

      HourLineRec.External := FALSE;
      IF EmplRec.GET(EmplNo) THEN
        HourLineRec.External := EmplRec.External;

      DimMgt.GetDimValueRec(2, CostObject, DimValRec, FALSE, '');
      HourLineRec."Wage Component" := DimValRec."Wage Component";

      EXIT(HourLineRec.GetCostPrice(FALSE, Fcurrency));
    END;

    BEGIN
    {
      BUDGET
      CostObject  Activity  Amount
      K1          A1        60
      K1          A1        40
      K2          A1        90
      K2          A1        60
      K1          A2        100
      K1          A2        100
      K2          A2        100
      K2          A2        100
      K2          A2        100

      BUDGET TOTALS: CostObject / Activity
      CostObject  Activity  Amount
      K1          A1        100    (T1a)
      K1          A2        200    (T1b)
      K2          A1        150    (T1c)
      K2          A2        300    (T1d)

      BUDGET TOTALS: Activity
      Activity  Amount
      A1        250                (T2a)
      A2        500                (T2b)

      CAPACITY PLANNING TOTALS: Activity / Employee (or Activity / Plant)
      Activity  Employee  Hours                CostPrice-Empl
      A1        1         10                   80                   (T3a)
      A1        2         15                   85                   (T3b)
      A2        1         5                    80                   (T3c)
      A2        4         25                   90                   (T3d)

      PROGNOSIS: CostObject K1 + K2
      K1
        Read budget totals by CostObject / Activity for K1
          T1a / T2a = 100/250  (rato budget amount: T1a on costobject K1 is 100/250 part of activity A1)
            Read capacity planning totals for activity A1 (from each record this part)
            100/250 * 10 =  4 uur (4*80 = 320,-)
            100/250 * 15 =  6 uur (6*85 = 510,-)
          T1b / T2b = 200/500
            Read capacity planning totals for activity A2
            200/500 *  5 =  2 uur (2*80 = 160,-)
            200/500 * 25 = 10 uur (10*90= 900,-)
      K2
        Read budget totals by CostObject / Activity for K1
          T1c / T2a = 150/250
            Read capacity planning totals for activity A1
            150/250 * 10 =  6 uur (4*80 = 320,-)
            150/250 * 15 =  9 uur (6*85 = 510,-)
          T1d / T2b = 300/500
            Read capacity planning totals for activity A2
            300/500 *  5 =  3 uur (2*80 = 160,-)
            300/500 * 25 = 15 uur (10*90= 900,-)
      CostObject  Quantity  Amount
      K1          22        1890
      K2          33        3835
    }
    END.
  }
  RDLDATA
  {
  }
}

