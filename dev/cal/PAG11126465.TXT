OBJECT Page 11126465 Replan Service Order
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=(Re)Plan Service Order;
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    SourceTable=Table11071976;
    DataCaptionExpr='';
    PageType=Card;
    SourceTableTemporary=Yes;
    PromotedActionCategoriesML=ENU=New,Process,Report,Date Filter,Route;
    OnInit=VAR
             FPSLicenseManagement@1100527600 : Codeunit 11229289;
             BingMapsSetup@1100527601 : Record 11072390;
           BEGIN
             ServiceSetup.GET;
             MaxNoOfResults := ServiceSetup."Default Max. No. of Results";
             PlanWindowInDays := ServiceSetup."Default Plan Window";
             IF PlanWindowInDays < 1 THEN
               PlanWindowInDays := 1;
             PlanSeqNo := 1;

             PlanningAgreementCodeEnabled := TRUE;
             FPStartingDateEnabled := TRUE;
             StartingTimeEnabled := TRUE;
             LPEndingDateEnabled := TRUE;
             EndingTimeEnabled := TRUE;
             ResourceFilterEnabled := TRUE;

             CalculateTravelTimeEnabled := FALSE;

             IF FPSLicenseManagement.LicenseAndReadPermissionForTable(BingMapsSetup) THEN
               CalculateTravelTimeEnabled := TRUE;
           END;

    OnOpenPage=BEGIN
                 UpdateResourceAvailPlanTimes;
               END;

    ActionList=ACTIONS
    {
      { 1100528623;  ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1100528624;1 ;Action    ;
                      CaptionML=ENU=Open Work by Service Location;
                      Promoted=Yes;
                      Enabled=OpenWorkbyServiceLocationEnabled;
                      PromotedIsBig=Yes;
                      Image=CalculateLines;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 ServiceOrderPlanManagement@1100528603 : Codeunit 11012868;
                                 OpenWorkloadbyServLocPAGE@1100528600 : Page 11126466;
                                 ServiceOrder2@1100528601 : Record 11012823;
                                 MergedServiceOrder@1100528602 : Record 11012823;
                               BEGIN
                                 OpenWorkloadbyServLocPAGE.SetOpenWorkloadData(ServiceLocation, ServiceOrder, 180);
                                 OpenWorkloadbyServLocPAGE.LOOKUPMODE := TRUE;
                                 IF OpenWorkloadbyServLocPAGE.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                   OpenWorkloadbyServLocPAGE.GetSelectedServiceOrderDS(ServiceOrder2);
                                   IF NOT ServiceOrder2.FINDSET THEN
                                     ERROR(Text000);
                                   ServiceOrderPlanManagement.MergeServiceOrderDataSets(ServiceOrder, ServiceOrder2, MergedServiceOrder);
                                   SetReplanData(MergedServiceOrder, SeekDate, PlanWindowInDays, PlanTimeType, StartedFromOpenWorkload, CalculateTravelTime, TRUE, FALSE);
                                   UpdateResourceAvailPlanTimes;
                                   CurrPage.UPDATE(FALSE);
                                 END;
                               END;
                                }
      { 1100528678;1 ;Action    ;
                      CaptionML=ENU=Refresh Available Plan Times;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Refresh;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 UpdateResourceAvailPlanTimes;
                               END;
                                }
      { 1100528646;1 ;Action    ;
                      CaptionML=ENU=(Re)plan;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Replan;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 PlanningAgreement@1100525002 : Record 11071729;
                                 ServiceOrderPlanManagement@1100528600 : Codeunit 11012868;
                                 PlanType@1100528602 : 'At Start,At End,Custom';
                                 CustomStartingTime@1100528603 : Time;
                                 FirstPossibleStartingTime@1100525000 : Time;
                                 LastPossibleEndingTime@1100525001 : Time;
                                 ExportToFSA@1100528604 : Boolean;
                               BEGIN
                                 ServiceOrderPlanManagement.TestReplanAllowed(ServiceOrder);
                                 ServiceOrderPlanManagement.CheckMultipleWorkOrdersPerSO(ServiceOrder);
                                 ServiceOrderPlanManagement.AskShiftedStartTime(ServiceOrder, Rec, PlanType, CustomStartingTime, ExportToFSA);
                                 IF "Planning Agreement Code" = '' THEN BEGIN
                                   FirstPossibleStartingTime := StartingTime;
                                   LastPossibleEndingTime := EndingTime;
                                 END ELSE BEGIN
                                   PlanningAgreement.SETRANGE(Code, "Planning Agreement Code");
                                   PlanningAgreement.SETFILTER(Type, '%1|%2', PlanningAgreement.Type::Plan, PlanningAgreement.Type::Both);
                                   IF PlanningAgreement.FINDFIRST THEN BEGIN
                                     FirstPossibleStartingTime := PlanningAgreement."Starting Time";
                                     LastPossibleEndingTime := PlanningAgreement."Ending Time";
                                   END;
                                 END;
                                 ServiceOrderPlanManagement.ReplanServiceOrdersAddParams(ExportToFSA);
                                 ServiceOrderPlanManagement.ReplanServiceOrders(
                                   ServiceOrder, "Resource No.", "Plan Date", "Plan Starting Time", "Plan Ending Time",
                                   FirstPossibleStartingTime, LastPossibleEndingTime, PlanType, CustomStartingTime,
                                   PlanTimeType, CalculateTravelTime, LinkWorkOrders, PlanSeqNo, FALSE);
                                 COMMIT;
                                 SetReplanData(ServiceOrder, SeekDate, PlanWindowInDays, PlanTimeType, StartedFromOpenWorkload, CalculateTravelTime, FALSE, FALSE);
                                 UpdateResourceAvailPlanTimes;
                                 CurrPage.UPDATE(FALSE);
                               END;
                                }
      { 1100528650;1 ;Action    ;
                      CaptionML=[ENU=Graphical Work Order Planning;
                                 NOR=Graphical Work Order Planning;
                                 SVE=Grafisk arbetsorderplanering];
                      RunObject=Codeunit 11012120;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Planning;
                      PromotedCategory=New }
      { 1100525002;1 ;ActionGroup;
                      CaptionML=[ENU=Bing Maps;
                                 NOR=Bing-kart;
                                 SVE=Bing Maps] }
      { 1100528618;2 ;Action    ;
                      AccessByPermission=TableData 11072390=R;
                      CaptionML=[ENU=Show on Map;
                                 NOR=Vis p† kart;
                                 SVE=Visa p† karta];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Map;
                      PromotedCategory=Category5;
                      OnAction=VAR
                                 BingMapsServiceLocation@1100525000 : Page 11229928;
                                 ServiceLocation@1100525001 : Record 11012801;
                               BEGIN
                                 ServiceLocation.GET(CurrentServiceOrder."Service Location No.");
                                 BingMapsServiceLocation.setLocation(ServiceLocation);
                                 BingMapsServiceLocation.RUNMODAL;
                               END;
                                }
      { 1100528645;2 ;Action    ;
                      AccessByPermission=TableData 11072390=R;
                      CaptionML=ENU=Show Navigation;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Map;
                      PromotedCategory=Category5;
                      OnAction=VAR
                                 BingMapsNavigationResSO@1100525000 : Page 11229934;
                                 TmpServiceLocation@1100525001 : Record 11012801;
                               BEGIN
                                 IF "Prev. Address" <> '' THEN BEGIN
                                   TmpServiceLocation.GET(ServiceOrder."Service Location No.");
                                   BingMapsNavigationResSO.setInfo(TmpServiceLocation.Address, TmpServiceLocation."Post Code", TmpServiceLocation.City,
                                     "Prev. Address", "Prev. Post Code", "Prev. City", TmpServiceLocation."No.", "Resource No.");
                                   BingMapsNavigationResSO.RUNMODAL;
                                 END
                                 ELSE
                                   MESSAGE(Text003);
                               END;
                                }
      { 1100525001;2 ;Action    ;
                      AccessByPermission=TableData 11072390=R;
                      CaptionML=ENU=Show Employees on Map;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Map;
                      PromotedCategory=Category5;
                      OnAction=VAR
                                 BingMapsEmployeeLocations@1100525000 : Page 11229933;
                               BEGIN
                                 BingMapsEmployeeLocations.setNewRecord(Rec);
                                 BingMapsEmployeeLocations.setReplanOptions(CurrentServiceOrder, StartingTime,
                                   EndingTime, PlanTimeType, CalculateTravelTime, LinkWorkOrders, PlanSeqNo);
                                 BingMapsEmployeeLocations.setServiceOrderRecord(ServiceOrder."No.");
                                 BingMapsEmployeeLocations.RUNMODAL;
                               END;
                                }
      { 1100525003;2 ;Action    ;
                      AccessByPermission=TableData 11072390=R;
                      CaptionML=ENU=Show Nearby Orders;
                      Image=Map;
                      OnAction=VAR
                                 BingMapsNearbyOrders@1100525000 : Page 11229932;
                                 BingMapsHandler@1100525001 : Codeunit 11012485;
                                 tempLatitude@1100525002 : Text;
                                 tempLongitude@1100525003 : Text;
                               BEGIN
                                 IF BingMapsHandler.GetLatLngFromAddress(tempLatitude, tempLongitude, ServiceOrder.Address, ServiceOrder.City, ServiceOrder."Post Code") THEN BEGIN
                                   BingMapsNearbyOrders.setOriginalLatLng(tempLatitude, tempLongitude);
                                   BingMapsNearbyOrders.RUNMODAL;
                                 END ELSE
                                   MESSAGE(Text004);
                               END;
                                }
      { 1100528626;1 ;ActionGroup;
                      CaptionML=[ENU=Days;
                                 NOR=Dager;
                                 SVE=dagar] }
      { 1100528627;2 ;Action    ;
                      CaptionML=[ENU=Previous Day;
                                 NOR=Forrige dag;
                                 SVE=F”reg†ende dag];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=PreviousRecord;
                      PromotedCategory=Category4;
                      OnAction=BEGIN
                                 SetReplanData(ServiceOrder, SeekDate -1, PlanWindowInDays, PlanTimeType, StartedFromOpenWorkload, CalculateTravelTime, FALSE, TRUE);
                                 UpdateResourceAvailPlanTimes;
                               END;
                                }
      { 1100528629;2 ;Action    ;
                      CaptionML=[ENU=Today;
                                 NOR=I DAG;
                                 SVE=Dagens datum];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Calendar;
                      PromotedCategory=Category4;
                      OnAction=BEGIN
                                 SetReplanData(ServiceOrder, TODAY, PlanWindowInDays, PlanTimeType, StartedFromOpenWorkload, CalculateTravelTime, FALSE, TRUE);
                                 UpdateResourceAvailPlanTimes;
                               END;
                                }
      { 1100528628;2 ;Action    ;
                      CaptionML=[ENU=Next Day;
                                 NOR=Neste dag;
                                 SVE=N„sta dag];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=NextRecord;
                      PromotedCategory=Category4;
                      OnAction=BEGIN
                                 SetReplanData(ServiceOrder, SeekDate +1, PlanWindowInDays, PlanTimeType, StartedFromOpenWorkload, CalculateTravelTime, FALSE, TRUE);
                                 UpdateResourceAvailPlanTimes;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1100528600;;Container;
                ContainerType=ContentArea }

    { 1100528603;1;Group  ;
                CaptionML=[ENU=General;
                           NOR=Generell;
                           SVE=Allm„nt];
                GroupType=Group }

    { 1100528601;2;Field  ;
                CaptionML=[ENU=Service Order No.;
                           NOR=Serviceordrenr;
                           SVE=Serviceordernr];
                SourceExpr=GetServiceOrderNo;
                Editable=FALSE;
                OnDrillDown=VAR
                              ServiceOrderListPlanPAGE@1100528600 : Page 11130495;
                            BEGIN
                              ServiceOrderListPlanPAGE.SETTABLEVIEW(ServiceOrder);
                              ServiceOrderListPlanPAGE.LOOKUPMODE := TRUE;
                              ServiceOrderListPlanPAGE.SetRemoveFromListVisible(TRUE);
                              IF ServiceOrderListPlanPAGE.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                ServiceOrderListPlanPAGE.GetActiveDataSet(ServiceOrder);
                                SetReplanData(ServiceOrder, SeekDate, PlanWindowInDays, PlanTimeType, StartedFromOpenWorkload, CalculateTravelTime, TRUE, FALSE);
                                CurrPage.UPDATE(FALSE);
                                UpdateResourceAvailPlanTimes;
                              END;
                            END;
                             }

    { 1100528610;2;Field  ;
                CaptionML=[ENU=Address;
                           NOR=Adresse;
                           SVE=Adress];
                SourceExpr=CurrentServiceOrder.Address;
                Editable=FALSE }

    { 1100528611;2;Field  ;
                CaptionML=[ENU=Address 2;
                           NOR=Adresse 2;
                           SVE=Adress 2];
                SourceExpr=CurrentServiceOrder."Address 2";
                Importance=Additional;
                Editable=FALSE }

    { 1100528613;2;Field  ;
                CaptionML=[ENU=Post Code;
                           NOR=Postnr;
                           SVE=Postnr];
                SourceExpr=CurrentServiceOrder."Post Code";
                Editable=FALSE }

    { 1100528612;2;Field  ;
                CaptionML=[ENU=City;
                           NOR=Poststed;
                           SVE=Ort];
                SourceExpr=CurrentServiceOrder.City;
                Editable=FALSE }

    { 1100528619;2;Field  ;
                CaptionML=[ENU=Employee No.;
                           NOR=Ansattnr;
                           SVE=Anst„llningsnr];
                SourceExpr=CurrentServiceOrder."Employee No.";
                TableRelation="Resource (WOP)";
                Editable=FALSE }

    { 1100528620;2;Field  ;
                CaptionML=[ENU=Employee Name;
                           NOR=Navn p† ansatt;
                           SVE=Namn p† anst„lld];
                SourceExpr=CurrentServiceOrder."Employee Name";
                Importance=Additional;
                Editable=FALSE }

    { 1100528621;2;Field  ;
                CaptionML=[ENU=Territory Code;
                           NOR=Distriktskode;
                           SVE=Distriktskod];
                SourceExpr=CurrentServiceOrder."Territory Code";
                Editable=FALSE }

    { 1100528647;2;Field  ;
                CaptionML=[ENU=Starting Date;
                           NOR=Startdato;
                           SVE=Startdatum];
                SourceExpr=CurrentServiceOrder."Starting Date";
                Editable=FALSE }

    { 1100528648;2;Field  ;
                CaptionML=[ENU=Start Time;
                           NOR=Starttid;
                           SVE=Starttid];
                SourceExpr=CurrentServiceOrder."Starting Time";
                Editable=FALSE }

    { 1100528649;2;Field  ;
                CaptionML=[ENU=Ending Time;
                           NOR=Sluttid;
                           SVE=Sluttid];
                SourceExpr=CurrentServiceOrder."Ending Time";
                Editable=FALSE }

    { 1100528608;2;Field  ;
                CaptionML=[ENU=First Possible Starting Date;
                           NOR=F›rste mulige dato for oppstart;
                           SVE=F”rsta m”jliga startdatum];
                SourceExpr=CurrentServiceOrder."First Possible Starting Date";
                Importance=Additional;
                Editable=FALSE }

    { 1100528675;2;Field  ;
                CaptionML=[ENU=First Possible Starting Time;
                           NOR=F›rste mulige tid for oppstart;
                           SVE=F”rsta m”jliga starttid];
                SourceExpr=CurrentServiceOrder."First Possible Starting Time";
                Importance=Additional;
                Editable=FALSE }

    { 1100528676;2;Field  ;
                CaptionML=[ENU=Last Possible Ending Date;
                           NOR=Siste mulig tid for avslutning;
                           SVE=Senast m”jliga slutdatum];
                SourceExpr=CurrentServiceOrder."Last Possible Ending Date";
                Importance=Additional;
                Editable=FALSE }

    { 1100528677;2;Field  ;
                CaptionML=[ENU=Last Possible Ending Time;
                           NOR=Siste mulige tid for avslutning;
                           SVE=Senast m”jliga sluttid];
                SourceExpr=CurrentServiceOrder."Last Possible Ending Time";
                Importance=Additional;
                Editable=FALSE }

    { 1100528672;2;Field  ;
                CaptionML=[ENU=Next Deadline;
                           NOR=Neste deadline;
                           SVE=N„sta deadline];
                SourceExpr=CurrentServiceOrder."Next Deadline";
                Editable=FALSE }

    { 1100528666;2;Field  ;
                CaptionML=[ENU=Firm Planned;
                           NOR=Fast planlagt;
                           SVE=Fast planerad];
                SourceExpr=CurrentServiceOrder."Firm Planned";
                OnValidate=BEGIN
                             IF ServiceOrder.FINDSET(TRUE) THEN
                               REPEAT
                                 ServiceOrder.VALIDATE("Firm Planned", CurrentServiceOrder."Firm Planned");
                                 ServiceOrder.MODIFY;
                               UNTIL ServiceOrder.NEXT = 0;
                             SetReplanData(ServiceOrder, SeekDate, PlanWindowInDays, PlanTimeType, StartedFromOpenWorkload, CalculateTravelTime, FALSE, FALSE);
                             UpdateResourceAvailPlanTimes;
                             EnableFields;
                           END;
                            }

    { 1100528606;2;Field  ;
                CaptionML=ENU=Total Duration Time;
                SourceExpr=TotalDurationTime;
                OnValidate=BEGIN
                             UpdateTotalDurationTime(TotalDurationTime, ServiceOrder);
                             UpdateResourceAvailPlanTimes;
                           END;
                            }

    { 1100525000;2;Field  ;
                CaptionML=[ENU=Maintenance Scheme Code;
                           NOR=Kode for vedlikeholdsskjema;
                           SVE=Kod f”r underh†llsschema];
                SourceExpr=CommonMaintSchemeCode;
                Editable=FALSE;
                OnDrillDown=VAR
                              ServiceOrderPlanManagement@1100525000 : Codeunit 11012868;
                            BEGIN
                              ServiceOrderPlanManagement.ShowServiceOrderObjects(ServiceOrder);
                            END;
                             }

    { 1100528661;2;Field  ;
                CaptionML=[ENU=Maintenance Scheme Description;
                           NOR=Beskrivelse av vedlikeholdskjema;
                           SVE=Beskrivning av underh†llsschema];
                SourceExpr=CommonMaintSchemeDescription;
                Importance=Additional;
                Editable=FALSE }

    { 1100528674;2;Field  ;
                CaptionML=[ENU=Disciplines;
                           NOR=Disipliner;
                           SVE=Discipliner];
                SourceExpr=ServiceDisciplinesText;
                Importance=Additional;
                Editable=FALSE }

    { 1100528679;2;Field  ;
                CaptionML=[ENU=Trade Specialities;
                           NOR=SNI-nummer;
                           SVE=SNI-nummer];
                SourceExpr=ServiceTradeSpecialityText;
                Importance=Additional;
                Editable=FALSE }

    { 1100528662;2;Field  ;
                CaptionML=ENU=Link Work Orders;
                SourceExpr=LinkWorkOrders }

    { 1100528644;1;Group  ;
                CaptionML=ENU=Available Plan Times;
                GroupType=Group }

    { 1100528614;2;Group  ;
                GroupType=Repeater }

    { 1100528643;3;Field  ;
                SourceExpr="Resource No.";
                Editable=FALSE }

    { 1100528669;3;Field  ;
                SourceExpr="Resource Company" }

    { 1100528642;3;Field  ;
                SourceExpr="Resource Name";
                Editable=FALSE }

    { 1100528641;3;Field  ;
                SourceExpr="Plan Day";
                Editable=FALSE }

    { 1100528640;3;Field  ;
                SourceExpr="Plan Date";
                Editable=FALSE }

    { 1100528639;3;Field  ;
                SourceExpr="Plan Starting Time";
                Editable=FALSE }

    { 1100528638;3;Field  ;
                SourceExpr="Plan Ending Time";
                Editable=FALSE }

    { 1100528670;3;Field  ;
                SourceExpr="Planning Agreement Code" }

    { 1100528671;3;Field  ;
                SourceExpr="Planning Agreement Description";
                Visible=FALSE }

    { 1100528653;3;Field  ;
                SourceExpr="Watch Code";
                Editable=FALSE }

    { 1100528654;3;Field  ;
                SourceExpr="Watch Description" }

    { 1100528637;3;Field  ;
                SourceExpr="Available Hours";
                Editable=FALSE }

    { 1100528658;3;Field  ;
                SourceExpr="Travel Time from Prev. Address" }

    { 1100528664;3;Field  ;
                SourceExpr="Travel Dist. from Prev. Addr." }

    { 1100528636;3;Field  ;
                SourceExpr="Prev. Service Order No.";
                Editable=FALSE }

    { 1100528635;3;Field  ;
                SourceExpr="Prev. Address";
                Editable=FALSE }

    { 1100528634;3;Field  ;
                SourceExpr="Prev. Address 2";
                Visible=FALSE;
                Editable=FALSE }

    { 1100528633;3;Field  ;
                SourceExpr="Prev. Post Code";
                Editable=FALSE }

    { 1100528632;3;Field  ;
                SourceExpr="Prev. City";
                Editable=FALSE }

    { 1100528659;3;Field  ;
                SourceExpr="Travel Time to Next Address" }

    { 1100528663;3;Field  ;
                SourceExpr="Travel Dist. to Next Address" }

    { 1100528625;3;Field  ;
                SourceExpr="Next Service Order No.";
                Editable=FALSE }

    { 1100528617;3;Field  ;
                SourceExpr="Next Address";
                Editable=FALSE }

    { 1100528615;3;Field  ;
                SourceExpr="Next Address 2";
                Visible=FALSE;
                Editable=FALSE }

    { 1100528616;3;Field  ;
                SourceExpr="Next Post Code";
                Editable=FALSE }

    { 1100528602;3;Field  ;
                SourceExpr="Next City";
                Editable=FALSE }

    { 1100528665;3;Field  ;
                SourceExpr="Travel Calculation Status" }

    { 1100528609;1;Group  ;
                CaptionML=[ENU=Filters;
                           NOR=Filtre;
                           SVE=Filter];
                GroupType=Group }

    { 1100528607;2;Field  ;
                CaptionML=ENU=Plan Seq. No.;
                SourceExpr=PlanSeqNo;
                OnValidate=BEGIN
                             UpdateResourceAvailPlanTimes;
                           END;
                            }

    { 1100528605;2;Field  ;
                CaptionML=ENU=Seek Date;
                SourceExpr=SeekDate;
                OnValidate=BEGIN
                             UpdateResourceAvailPlanTimes;
                           END;
                            }

    { 1100528667;2;Field  ;
                CaptionML=[ENU=First Possible Starting Date;
                           NOR=F›rste mulige dato for oppstart;
                           SVE=F”rsta m”jliga startdatum];
                SourceExpr=FirstPossibleStartingDate;
                Enabled=FPStartingDateEnabled;
                OnValidate=BEGIN
                             UpdateResourceAvailPlanTimes;
                           END;
                            }

    { 1100528668;2;Field  ;
                CaptionML=[ENU=Last Possible Ending Date;
                           NOR=Siste mulig tid for avslutning;
                           SVE=Senast m”jliga slutdatum];
                SourceExpr=LastPossibleEndingDate;
                Enabled=LPEndingDateEnabled;
                OnValidate=BEGIN
                             UpdateResourceAvailPlanTimes;
                           END;
                            }

    { 1100528655;2;Field  ;
                CaptionML=[ENU=Planning Agreement;
                           NOR=Planleggingsavtale;
                           SVE=Planeringsavtal];
                SourceExpr=PlanningAgreementCode;
                TableRelation="Planning Agreement" WHERE (Type=FILTER(Plan|Both));
                Enabled=PlanningAgreementCodeEnabled;
                OnValidate=BEGIN
                             IF PlanningAgreementCode <> '' THEN BEGIN
                               UpdateStartingEndingTimes;
                               UpdateResourceAvailPlanTimes;
                             END;
                           END;
                            }

    { 1100528656;2;Field  ;
                CaptionML=[ENU=Starting Time;
                           NOR=Starttid;
                           SVE=Starttid];
                SourceExpr=StartingTime;
                Enabled=StartingTimeEnabled;
                OnValidate=BEGIN
                             UpdateResourceAvailPlanTimes;
                           END;
                            }

    { 1100528657;2;Field  ;
                CaptionML=[ENU=Ending Time;
                           NOR=Sluttid;
                           SVE=Sluttid];
                SourceExpr=EndingTime;
                Enabled=EndingTimeEnabled;
                OnValidate=BEGIN
                             UpdateResourceAvailPlanTimes;
                           END;
                            }

    { 1100528604;2;Field  ;
                CaptionML=ENU=Plan Window;
                SourceExpr=PlanWindowInDays;
                MinValue=1;
                OnValidate=BEGIN
                             UpdateResourceAvailPlanTimes;
                           END;
                            }

    { 1100528622;2;Field  ;
                CaptionML=[ENU=Employee Filter;
                           NOR=Ansattfilter;
                           SVE=Personalfilter];
                SourceExpr=ResourceFilter;
                TableRelation="Resource (WOP)" WHERE (Type=CONST(Employee),
                                                      Schedule=FILTER(ServiceOrder|Both));
                Enabled=ResourceFilterEnabled;
                OnValidate=BEGIN
                             UpdateResourceAvailPlanTimes;
                           END;
                            }

    { 1100528651;2;Field  ;
                CaptionML=[ENU=Post Code Filter;
                           NOR=Postkodefilter;
                           SVE=Postnrfilter];
                SourceExpr=PostCodeFilter;
                OnValidate=BEGIN
                             UpdateResourceAvailPlanTimes;
                           END;

                OnAssistEdit=BEGIN
                               PostCodeFilter := COPYSTR(CurrentServiceOrder."Post Code", 1, 2) + '*';
                               UpdateResourceAvailPlanTimes;
                             END;
                              }

    { 1100528652;2;Field  ;
                CaptionML=ENU=Plan Time Type;
                OptionCaptionML=ENU=Regular Work Time,Consigment Time;
                SourceExpr=PlanTimeType;
                OnValidate=BEGIN
                             UpdateResourceAvailPlanTimes;
                           END;
                            }

    { 1100528660;2;Field  ;
                CaptionML=ENU=Calculate Travel Time with Bing Maps;
                SourceExpr=CalculateTravelTime;
                Visible=CalculateTravelTimeEnabled;
                Enabled=CalculateTravelTimeEnabled;
                OnValidate=BEGIN
                             UpdateResourceAvailPlanTimes;
                           END;
                            }

    { 1100528673;2;Field  ;
                CaptionML=ENU=Max. No. of Results;
                BlankZero=Yes;
                SourceExpr=MaxNoOfResults;
                OnValidate=BEGIN
                             UpdateResourceAvailPlanTimes;
                           END;
                            }

    { 1100528630;;Container;
                CaptionML=[ENU=Information;
                           NOR=Informasjon;
                           SVE=Information];
                ContainerType=FactBoxArea }

    { 1100528631;1;Part   ;
                Name=ReplanServiceOrderFB;
                CaptionML=[ENU=Information;
                           NOR=Informasjon;
                           SVE=Information];
                PagePartID=Page11229238;
                PartType=Page }

  }
  CODE
  {
    VAR
      CurrentServiceOrder@1100528609 : Record 11012823;
      ServiceOrder@1100528600 : Record 11012823;
      ServiceLocation@1100528613 : Record 11012801;
      TotalDurationTime@1100528601 : Decimal;
      SeekDate@1100528602 : Date;
      PlanWindowInDays@1100528603 : Integer;
      ResourceFilter@1100528610 : Text[250];
      PostCodeFilter@1100528607 : Text[250];
      NoOfServiceOrders@1100528608 : Integer;
      Text000@1100528611 : TextConst 'ENU=No Lines Selected';
      PlanTimeType@1100528612 : 'Daytime,Consignment';
      StartedFromOpenWorkload@1100528614 : Boolean;
      OpenWorkbyServiceLocationEnabled@1100528615 : Boolean INDATASET;
      PlanningAgreementCode@1100528617 : Code[10];
      FirstPossibleStartingDate@1100528626 : Date;
      StartingTime@1100528616 : Time;
      LastPossibleEndingDate@1100528627 : Date;
      EndingTime@1100528618 : Time;
      CalculateTravelTime@1100528619 : Boolean;
      Text001@1100528620 : TextConst 'ENU=Calculating Travel Time over several days is discouraged due to performance, continue anyway?';
      CommonMaintSchemeCode@1100525000 : Code[20];
      CommonMaintSchemeDescription@1100528621 : Text[50];
      LinkWorkOrders@1100528622 : Boolean;
      FPStartingDateEnabled@1100528628 : Boolean INDATASET;
      StartingTimeEnabled@1100528623 : Boolean INDATASET;
      LPEndingDateEnabled@1100528629 : Boolean INDATASET;
      EndingTimeEnabled@1100528624 : Boolean INDATASET;
      PlanningAgreementCodeEnabled@1100528625 : Boolean INDATASET;
      ResourceFilterEnabled@1100528632 : Boolean;
      PlanSeqNo@1100528604 : ',1,2';
      MaxNoOfResults@1100528630 : Integer;
      ServiceDisciplinesText@1100528631 : Text[250];
      Text002@1100409000 : TextConst 'ENU=There are FLS VisiTour Orders in this set of Orders. These Orders can not be planned in NAV.';
      ServiceTradeSpecialityText@1100528605 : Text[250];
      Text003@1100525001 : TextConst 'ENU=No location information available for employee.';
      Text004@1100525002 : TextConst 'ENU=No location data usable for current service order.';
      ServiceSetup@1100528500 : Record 11012800;
      CalculateTravelTimeEnabled@1100527601 : Boolean;

    PROCEDURE SetReplanData@1100528600(VAR IServiceOrder@1100528600 : Record 11012823;ISeekDate@1100528603 : Date;IPlanWindowInDays@1100528602 : Integer;IPlanTimeType@1100528606 : 'Daytime,Consignment';IStartedFromOpenWorkload@1100528607 : Boolean;ICalculateTravelTime@1100528608 : Boolean;IInitFilters@1100528609 : Boolean;IRecalcLinkedWorkOrders@1100528610 : Boolean);
    VAR
      ServiceOrderPlanManagement@1100528601 : Codeunit 11012868;
    BEGIN
      CheckForFLSOrders(IServiceOrder);
      IServiceOrder.SETRANGE("FLS VisiTour ID", 0);
      IF IInitFilters THEN BEGIN
        IF IRecalcLinkedWorkOrders THEN
          ServiceOrderPlanManagement.GetServiceOrdersByLinkedWorkorder(IServiceOrder, ServiceOrder, LinkWorkOrders)
        ELSE
          ServiceOrder.COPY(IServiceOrder);
        ServiceOrderPlanManagement.GetServiceLocationDSFromServiceOrders(ServiceOrder, ServiceLocation);
        NoOfServiceOrders := ServiceOrder.COUNT;
        PlanTimeType := IPlanTimeType;
        TotalDurationTime := ServiceOrderPlanManagement.GetTotalDurationTime(IServiceOrder);
        PlanningAgreementCode := ServiceOrderPlanManagement.GetPlanningAgreementCode(IServiceOrder);
        StartedFromOpenWorkload := IStartedFromOpenWorkload;
        CalculateTravelTime := ICalculateTravelTime;
        IF CalculateTravelTime AND (IPlanWindowInDays > 2) THEN
          CalculateTravelTime := FALSE;
        CommonMaintSchemeCode := ServiceOrderPlanManagement.GetSOCommonMaintSchemeDescription(ServiceOrder, CommonMaintSchemeDescription);
      END;
      CurrPage.ReplanServiceOrderFB.PAGE.SetPageData(ServiceLocation, 180, ServiceOrder);
      ServiceOrderPlanManagement.GetCommonServiceOrderData(ServiceOrder, CurrentServiceOrder);
      ServiceDisciplinesText := ServiceOrderPlanManagement.GetDisciplineFilter(ServiceOrder);
      ServiceTradeSpecialityText := ServiceOrderPlanManagement.GetTradeSpecialityFilter(ServiceOrder);
      ServiceOrderPlanManagement.GetSOCommonStartingEndingTimeWindow(
        ServiceOrder, FirstPossibleStartingDate, StartingTime, LastPossibleEndingDate, EndingTime);
      UpdateStartingEndingTimes;
      IF ISeekDate < FirstPossibleStartingDate THEN
        SeekDate := FirstPossibleStartingDate
      ELSE
        SeekDate := ISeekDate;
      ResourceFilter := ServiceOrderPlanManagement.DetermineResourceFilterAndDatesByCluster(ServiceOrder, FirstPossibleStartingDate, LastPossibleEndingDate);
      StartingTime := 0T;
      EndingTime := 0T;

      EnableFields;
    END;

    LOCAL PROCEDURE GetServiceOrderNo@1100528601() : Code[20];
    BEGIN
      CASE NoOfServiceOrders OF
        0: EXIT('');
        1:
          BEGIN
            ServiceOrder.FINDFIRST;
            EXIT(ServiceOrder."No.");
          END;
      ELSE
        EXIT(STRSUBSTNO('[%1]', NoOfServiceOrders));
      END;
    END;

    PROCEDURE UpdateResourceAvailPlanTimes@1100528605();
    VAR
      ServiceOrderPlanManagement@1100528600 : Codeunit 11012868;
    BEGIN
      TestConflictingValues;
      ServiceOrderPlanManagement.GetAvailablePlanTimeBuffer(
        ServiceOrder, SeekDate, FirstPossibleStartingDate, StartingTime, LastPossibleEndingDate, EndingTime, PlanWindowInDays,
        ResourceFilter, PostCodeFilter, PlanTimeType, 0, CalculateTravelTime, PlanSeqNo, MaxNoOfResults, FALSE, Rec);
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE EnableFields@1100528603();
    BEGIN
      OpenWorkbyServiceLocationEnabled := NOT StartedFromOpenWorkload;
      PlanningAgreementCodeEnabled := NOT CurrentServiceOrder."Firm Planned";
      FPStartingDateEnabled := NOT CurrentServiceOrder."Firm Planned";
      StartingTimeEnabled := NOT CurrentServiceOrder."Firm Planned";
      LPEndingDateEnabled := NOT CurrentServiceOrder."Firm Planned";
      EndingTimeEnabled := NOT CurrentServiceOrder."Firm Planned";
      ResourceFilterEnabled := ResourceFilter = '';
    END;

    PROCEDURE UpdateStartingEndingTimes@1100528604();
    VAR
      PlanningAgreement@1100528600 : Record 11071729;
    BEGIN
      IF PlanningAgreementCode <> '' THEN BEGIN
        PlanningAgreement.SETRANGE(Code, PlanningAgreementCode);
        PlanningAgreement.SETFILTER(Type, '%1|%2', PlanningAgreement.Type::Plan, PlanningAgreement.Type::Both);
        PlanningAgreement.FINDFIRST;
        StartingTime := PlanningAgreement."Starting Time";
        EndingTime := PlanningAgreement."Ending Time";
      END;
    END;

    PROCEDURE TestConflictingValues@1100528606();
    BEGIN
      IF CalculateTravelTime AND (PlanWindowInDays > 2) THEN
        IF NOT CONFIRM(Text001) THEN
          ERROR('');
    END;

    PROCEDURE UpdateTotalDurationTime@1100528609(INewTotalDurationTime@1100528600 : Decimal;VAR IServiceOrder@1100528601 : Record 11012823);
    VAR
      ServiceOrder@1100528604 : Record 11012823;
      ServiceOrderPlanManagement@1100528603 : Codeunit 11012868;
      OldTotalDurationTime@1100528602 : Decimal;
      Factor@1100528605 : Decimal;
    BEGIN
      ServiceOrder.COPY(IServiceOrder);
      OldTotalDurationTime := ServiceOrderPlanManagement.GetTotalDurationTime(ServiceOrder);
      IF (OldTotalDurationTime = 0) AND (IServiceOrder.COUNT > 1) THEN
        EXIT;
      IF OldTotalDurationTime <> 0 THEN
        Factor := INewTotalDurationTime / OldTotalDurationTime;
      IF ServiceOrder.FINDSET(TRUE) THEN
        REPEAT
          IF Factor <> 0 THEN
            ServiceOrder.VALIDATE("Duration Time", ServiceOrder."Duration Time" * Factor)
          ELSE
            ServiceOrder.VALIDATE("Duration Time", INewTotalDurationTime);
          ServiceOrder.MODIFY(TRUE);
        UNTIL ServiceOrder.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckForFLSOrders@1100409000(VAR IServiceOrder@1100409000 : Record 11012823);
    BEGIN
      IServiceOrder.SETFILTER("FLS VisiTour ID", '>%1', 0);
      IF NOT IServiceOrder.ISEMPTY THEN
        ERROR(Text002);
    END;

    BEGIN
    END.
  }
}

