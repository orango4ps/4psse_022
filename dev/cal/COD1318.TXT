OBJECT Codeunit 1318 Trial Balance Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ColumnLayoutArr@1019 : ARRAY [9,2] OF Record 334;
      AccScheduleLineArr@1018 : ARRAY [9] OF Record 85;
      AccScheduleLine@1017 : Record 85;
      TempColumnLayout@1016 : TEMPORARY Record 334;
      AccSchedManagement@1015 : Codeunit 8;
      PeriodType@1012 : 'Day,Week,Month,Quarter,Year,Accounting Period';
      CurrentColumnLayoutName@1001 : Code[10];
      CurrentAccScheduleName@1000 : Code[10];
      LessRowsThanExpectedErr@1002 : TextConst 'ENU=The Trial Balance chart is not set up correctly. There are fewer rows in the account schedules than expected.;NOR=R†balanse-diagrammet er ikke riktig konfigurert. Det finnes f‘rre rader enn forventet i kontoskjemaene.;SVE=R†balansf”rteckningen „r inte korrekt. Kontouppst„llningen har f„rre rader „n f”rv„ntat.';
      MoreRowsThanExpectedErr@1003 : TextConst 'ENU=The Trial Balance chart is not set up correctly. There are more rows in the account schedules than expected.;NOR=R†balanse-diagrammet er ikke riktig konfigurert. Det finnes flere rader enn forventet i kontoskjemaene.;SVE=R†balansf”rteckningen „r inte korrekt. Kontouppst„llningen har fler rader „n f”rv„ntat.';

    [External]
    PROCEDURE LoadData@7(VAR DescriptionsArr@1003 : ARRAY [9] OF Text[100];VAR ValuesArr@1002 : ARRAY [9,2] OF Decimal;VAR PeriodCaptionTxt@1001 : ARRAY [2] OF Text;NoOfColumns@1004 : Integer);
    BEGIN
      PeriodType := PeriodType::"Accounting Period";
      Initialize;
      AccSchedManagement.FindPeriod(AccScheduleLine,'',PeriodType);
      UpdateArrays(DescriptionsArr,ValuesArr,PeriodCaptionTxt,NoOfColumns);
    END;

    LOCAL PROCEDURE Initialize@1();
    VAR
      TrialBalanceSetup@1000 : Record 1312;
    BEGIN
      TrialBalanceSetup.GET;
      TrialBalanceSetup.TESTFIELD("Account Schedule Name");
      TrialBalanceSetup.TESTFIELD("Column Layout Name");

      CurrentColumnLayoutName := TrialBalanceSetup."Column Layout Name";
      CurrentAccScheduleName := TrialBalanceSetup."Account Schedule Name";

      AccSchedManagement.CopyColumnsToTemp(CurrentColumnLayoutName,TempColumnLayout);
      AccSchedManagement.OpenSchedule(CurrentAccScheduleName,AccScheduleLine);
      AccSchedManagement.OpenColumns(CurrentColumnLayoutName,TempColumnLayout);
      AccSchedManagement.CheckAnalysisView(CurrentAccScheduleName,CurrentColumnLayoutName,TRUE);
    END;

    LOCAL PROCEDURE UpdateArrays@131(VAR DescriptionsArr@1002 : ARRAY [9] OF Text[100];VAR ValuesArr@1001 : ARRAY [9,2] OF Decimal;VAR PeriodCaptionTxt@1000 : ARRAY [2] OF Text;NoOfColumns@1008 : Integer);
    VAR
      Offset@1007 : Integer;
      Counter@1006 : Integer;
      FromDate@1005 : Date;
      ToDate@1004 : Date;
      FiscalStartDate@1003 : Date;
      I@1009 : Integer;
      TempNoOfColumns@1010 : Integer;
    BEGIN
      CLEAR(PeriodCaptionTxt);
      Counter := 0;

      IF AccScheduleLine.FINDSET THEN
        REPEAT
          Counter := Counter + 1;
          IF Counter > ARRAYLEN(ValuesArr,1) THEN
            ERROR(MoreRowsThanExpectedErr);

          DescriptionsArr[Counter] := AccScheduleLine.Description;

          IF NoOfColumns = 1 THEN
            Offset := 1
          ELSE
            Offset := 2;

          IF NoOfColumns > Offset THEN
            TempNoOfColumns := Offset
          ELSE
            TempNoOfColumns := NoOfColumns;

          IF AccScheduleLine.Totaling = '' THEN
            FOR I := Offset - NoOfColumns + 1 TO Offset DO
              ValuesArr[Counter,I] := 0;

          IF TempColumnLayout.FINDSET THEN
            REPEAT
              ValuesArr[Counter,Offset] := AccSchedManagement.CalcCell(AccScheduleLine,TempColumnLayout,FALSE);
              ColumnLayoutArr[Counter,Offset] := TempColumnLayout;
              AccScheduleLineArr[Counter] := AccScheduleLine;
              AccSchedManagement.CalcColumnDates(TempColumnLayout,FromDate,ToDate,FiscalStartDate);
              PeriodCaptionTxt[Offset] := STRSUBSTNO('%1..%2',FromDate,ToDate);
              Offset := Offset - 1;
              TempNoOfColumns := TempNoOfColumns - 1;
            UNTIL (TempColumnLayout.NEXT = 0) OR (TempNoOfColumns = 0);
        UNTIL AccScheduleLine.NEXT = 0;

      IF Counter < ARRAYLEN(ValuesArr,1) THEN
        ERROR(LessRowsThanExpectedErr);
    END;

    [External]
    PROCEDURE DrillDown@5(RowNo@1001 : Integer;ColumnNo@1000 : Integer);
    BEGIN
      TempColumnLayout := ColumnLayoutArr[RowNo,ColumnNo];
      AccScheduleLine := AccScheduleLineArr[RowNo];
      AccSchedManagement.DrillDown(TempColumnLayout,AccScheduleLine,PeriodType::Month);
    END;

    [External]
    PROCEDURE NextPeriod@8(VAR DescriptionsArr@1001 : ARRAY [9] OF Text[100];VAR ValuesArr@1000 : ARRAY [9,2] OF Decimal;VAR PeriodCaptionTxt@1003 : ARRAY [2] OF Text;NoOfColumns@1002 : Integer);
    BEGIN
      UpdatePeriod(DescriptionsArr,ValuesArr,PeriodCaptionTxt,'>=',NoOfColumns);
    END;

    [External]
    PROCEDURE PreviousPeriod@9(VAR DescriptionsArr@1001 : ARRAY [9] OF Text[100];VAR ValuesArr@1000 : ARRAY [9,2] OF Decimal;VAR PeriodCaptionTxt@1002 : ARRAY [2] OF Text;NoOfColumns@1003 : Integer);
    BEGIN
      UpdatePeriod(DescriptionsArr,ValuesArr,PeriodCaptionTxt,'<=',NoOfColumns);
    END;

    LOCAL PROCEDURE UpdatePeriod@6(VAR DescriptionsArr@1003 : ARRAY [9] OF Text[100];VAR ValuesArr@1002 : ARRAY [9,2] OF Decimal;VAR PeriodCaptionTxt@1001 : ARRAY [2] OF Text;SearchText@1000 : Text[3];NoOfColumns@1004 : Integer);
    BEGIN
      AccSchedManagement.FindPeriod(AccScheduleLine,SearchText,PeriodType);
      UpdateArrays(DescriptionsArr,ValuesArr,PeriodCaptionTxt,NoOfColumns);
    END;

    BEGIN
    END.
  }
}

