OBJECT Codeunit 11020360 SAF-T Installation
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVNO14.04 (10670);
  }
  PROPERTIES
  {
    OnRun=BEGIN
            // NavApp.GetCurrentModuleInfo(AppInfo);
            // if (AppInfo.DataVersion() <> Version.Create('0.0.0.0')) then
            //  exit;
            //
            SetupSAFT();
          END;

  }
  CODE
  {

    [EventSubscriber(Codeunit,2,OnCompanyInitialize,"",Skip,Skip)]
    LOCAL PROCEDURE CompanyInitialize@1100285101();
    BEGIN
      SetupSAFT;
    END;

    LOCAL PROCEDURE SetupSAFT@1100285102();
    VAR
      SAFTMappingHelper@1100285100 : Codeunit 11020362;
      DataUpgradeMgt@1100285107 : Codeunit 9900;
      InstallationManagement@1100285106 : Codeunit 11012268;
      CompanyDataUpgradeLog@1100285105 : Record 11229360;
      NewCompany@1100285104 : Boolean;
      NewDatabase@1100285103 : Boolean;
      TypeOfLog@1100285102 : 'Execute,No License Permission,New Company';
      StartDateTime@1100285101 : DateTime;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(140010670) THEN
        EXIT;
      InstallationManagement.InitDataUpgradeLog(DATABASE::"SAF-T Setup",TypeOfLog,StartDateTime,NewCompany);
      IF TypeOfLog IN [TypeOfLog::Execute, TypeOfLog::"New Company"] THEN BEGIN

        ApplyEvaluationClassificationsForPrivacy();
        SAFTMappingHelper.InsertDefaultNoSeriesInSAFTSetup();
        InsertDefaultMappingSources();
        SAFTMappingHelper.InsertSAFTSourceCodes();
        ImportMappingCodesIfSaaS();
        SAFTMappingHelper.UpdateMasterDataWithNoSeries();
        SAFTMappingHelper.UpdateSAFTSourceCodesBySetup();
        SAFTMappingHelper.AddSAFTAssistedSetup();

      END;
      CompanyDataUpgradeLog.InsertLog(140010670,StartDateTime,TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE ApplyEvaluationClassificationsForPrivacy@1100285103();
    VAR
      Company@1100285100 : Record 2000000006;
    BEGIN
      Company.GET(COMPANYNAME());
      IF NOT Company."Evaluation Company" THEN
        EXIT;

      // DataClassificationMgt.SetTableFieldsToNormal(Database::"SAF-T Setup");
      // DataClassificationMgt.SetTableFieldsToNormal(Database::"SAF-T Source Code");
      // DataClassificationMgt.SetTableFieldsToNormal(Database::"SAF-T Mapping Source");
      // DataClassificationMgt.SetTableFieldsToNormal(Database::"SAF-T Mapping Category");
      // DataClassificationMgt.SetTableFieldsToNormal(Database::"SAF-T Mapping");
      // DataClassificationMgt.SetTableFieldsToNormal(Database::"SAF-T G/L Account Mapping");
      // DataClassificationMgt.SetTableFieldsToNormal(Database::"SAF-T Mapping Range");
      // DataClassificationMgt.SetTableFieldsToNormal(Database::"SAF-T Export Setup");
      // DataClassificationMgt.SetTableFieldsToNormal(Database::"SAF-T Export Header");
      // DataClassificationMgt.SetTableFieldsToNormal(Database::"SAF-T Export Line");
    END;

    LOCAL PROCEDURE ImportMappingCodesIfSaaS@1100285106();
    VAR
      SAFTMappingSource@1100285100 : Record 11072497;
      SAFTXMLImport@1100285101 : Codeunit 11020361;
      PermissionManager@1100285102 : Codeunit 9002;
    BEGIN
      IF NOT PermissionManager.SoftwareAsAService THEN
        EXIT;

      IF NOT SAFTMappingSource.FINDSET THEN
        EXIT;

      REPEAT
        SAFTXMLImport.ImportFromMappingSource(SAFTMappingSource);
      UNTIL SAFTMappingSource.NEXT = 0;
    END;

    LOCAL PROCEDURE InsertDefaultMappingSources@1100285107();
    VAR
      SAFTSetup@1100285100 : Record 11072490;
      SAFTMappingSourceType@1100285101 : 'None,Two Digit Standard Account,Four Digit Standard Account,Income Statement,Standard Tax Code';
    BEGIN
      IF NOT SAFTSetup.GET THEN
        SAFTSetup.INSERT;
      InsertMappingSource(SAFTMappingSourceType::"Two Digit Standard Account", 'General_Ledger_Standard_Accounts_2_character.xml');
      InsertMappingSource(SAFTMappingSourceType::"Four Digit Standard Account", 'General_Ledger_Standard_Accounts_4_character.xml');
      InsertMappingSource(SAFTMappingSourceType::"Income Statement", 'KA_Grouping_Category_Code.xml');
      InsertMappingSource(SAFTMappingSourceType::"Income Statement", 'RF-1167_Grouping_Category_Code.xml');
      InsertMappingSource(SAFTMappingSourceType::"Income Statement", 'RF-1175_Grouping_Category_Code.xml');
      InsertMappingSource(SAFTMappingSourceType::"Income Statement", 'RF-1323_Grouping_Category_Code.xml');
      InsertMappingSource(SAFTMappingSourceType::"Standard Tax Code", 'Standard_Tax_Codes.xml');
    END;

    LOCAL PROCEDURE InsertMappingSource@1100285108(SAFTMappingSourceType@1100285100 : Integer;SourceNo@1100285101 : Code[50]);
    VAR
      SAFTMappingSource@1100285102 : Record 11072497;
    BEGIN
      SAFTMappingSource.INIT;
      SAFTMappingSource."Source Type" := SAFTMappingSourceType;
      SAFTMappingSource."Source No." := SourceNo;
      IF NOT SAFTMappingSource.FIND THEN
        SAFTMappingSource.INSERT;
    END;

    BEGIN
    {
      191003 ORANGO.DL RFC194 implement SAF-T from BC14 CU04 (NAVNO14.04) NorwegianSAFT-extension
      191112 ORANGO.DL updates from BC14.CU06
    }
    END.
  }
}

