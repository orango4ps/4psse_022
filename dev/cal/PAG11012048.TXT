OBJECT Page 11012048 Settlement Sheet Cost Plus SF
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00,4PSSE;
  }
  PROPERTIES
  {
    Permissions=TableData 11072003=rm;
    CaptionML=[ENU=Lines;
               NOR=Rader;
               SVE=Rader];
    SourceTable=Table11012019;
    DelayedInsert=Yes;
    PageType=ListPart;
    AutoSplitKey=Yes;
    OnInit=BEGIN
             "Cost ComponentEditable" := TRUE;
             "Vendor (Trade Item)Visible" := TRUE;
             ManufacturerVisible := TRUE;
             "Trade ItemVisible" := TRUE;
             "Basic ItemVisible" := TRUE;
           END;

    OnOpenPage=VAR
                 RecRef@1100285100 : RecordRef;
                 FPSLicenseManagement@1100527400 : Codeunit 11229289;
               BEGIN
                 ProjSetup.GET;
                 IF NOT FPSLicenseManagement.LicenseAndReadPermissionForTable(ItemSetup) THEN BEGIN
                   "Basic ItemVisible" := (FALSE);
                   "Trade ItemVisible" := (FALSE);
                   ManufacturerVisible := (FALSE);
                   "Vendor (Trade Item)Visible" := (FALSE);
                 END;

                 ProjSetup.GET();
                 "Cost ComponentEditable" := (ProjSetup."Cost Component Editable");

                 IF ProjRec.GET("Project No.") THEN
                   IF ProjRec.CostControlNeedsBuild THEN //call 32237
                     IF CONFIRM(Text010, FALSE) THEN //call 32237
                       ProjRec.BuildCostControl; //Check if this is possible.

                 //>>RFC085
                 RecRef.GETTABLE(Rec);
                 IF RecRef.ISTEMPORARY THEN
                   CurrPage.EDITABLE(FALSE);
                 //<<RFC085
               END;

    OnAfterGetRecord=BEGIN
                       InvoicedPricePrLedgerHideValue := FALSE;
                       InvoicedQuantityPrLedgerHideVa := FALSE;
                       GetEmployee;
                       {
                       //*22849.so  Not only for Labor. Must be the same as in F11012043 (modified for call 10927)
                       IF ("Cost Type" = "Cost Type"::Labor) AND
                          ("Source Document" = '') AND
                          ("Entry No. Project Ledger" = 0) THEN
                         "Execution DateEditable" := TRUE
                       ELSE
                         "Execution DateEditable" := FALSE;
                       }
                       InvoicedQuantityPrLedgerOnForm;
                       InvoicedPricePrLedgerOnFormat;
                       RecipeHeader := "Recipe Header"; //DP01183
                     END;

    OnNewRecord=BEGIN
                  //CheckModifyAllowed(FALSE); //**4PS01.n     Call 13976: Replaced by set subform editable in the header (F11012046)
                  DetermineVATProdPostingGroup;
                  GetCurrency;  //DP00887
                  //T003311
                  SetSkipDetermineChargeable(FALSE);
                  DetermineChargeable;
                  //
                END;

    OnInsertRecord=BEGIN
                     SetSkipDetermineChargeable(TRUE); //T003311
                     CheckSetSmallProjStatusFinish();
                   END;

    OnModifyRecord=BEGIN
                     CheckSetSmallProjStatusFinish();
                   END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1906587504;1 ;ActionGroup;
                      CaptionML=[ENU=F&unctions;
                                 NOR=Fu&nksjon;
                                 SVE=F&unktion] }
      { 1900004404;2 ;Action    ;
                      CaptionML=[ENU=Generate Cost Plus Entries;
                                 NOR=Opprette selvkosttransaksjoner;
                                 SVE=Generera redovisade sj„lvkostnader];
                      Image=SelectEntries;
                      OnAction=BEGIN
                                 GetProjectEntry("Project No.", Principal, "Commission No.", "Settl.Sheet No.");
                               END;
                                }
      { 1907335004;2 ;Action    ;
                      CaptionML=[ENU=Compress Cost Plus Entries;
                                 NOR=Komprimer rapportert selvkost;
                                 SVE=Komprimera redovisade sj„lvkostnader];
                      Image=Compress;
                      OnAction=BEGIN
                                 Compress("Project No.", Principal, "Commission No.", "Settl.Sheet No.");
                               END;
                                }
      { 1905210204;2 ;Action    ;
                      CaptionML=[ENU=Get Operation Lines;
                                 NOR=Hent innsatsrader;
                                 SVE=H„mta insatsrader];
                      Image=GetLines;
                      OnAction=BEGIN
                                 InsertOperationLines("Project No.",Principal,"Commission No.","Settl.Sheet No.","Reference Date");
                               END;
                                }
      { 1902558104;2 ;Action    ;
                      ShortCutKey=F7;
                      CaptionML=[ENU=Filter Not Invoiced Only;
                                 NOR=Filtrer kun ikke fakturert;
                                 SVE=Filtrera endast inte fakturerad];
                      Image=Filter;
                      OnAction=BEGIN
                                 SetFilterInvoiced;
                               END;
                                }
      { 1210190003;2 ;Action    ;
                      ShortCutKey=Shift+Ctrl+R;
                      CaptionML=[ENU=Comment Lines (Settlement Sheet Line);
                                 NOR=Kommentarrader (Oppgj›rsskjemarad);
                                 SVE=Kommentarsrader (rad med avr„kningsark)];
                      Image=Comment;
                      OnAction=BEGIN
                                 EditCommentLines();
                               END;
                                }
      { 1100529400;2 ;Action    ;
                      Name=SelectRecipe;
                      CaptionML=[ENU=Select Recipes;
                                 NOR=Velg Maler;
                                 SVE=V„lj mallar];
                      Image=ReceiptLines;
                      OnAction=BEGIN
                                 LookupRecipe(TRUE);  //DP01183
                               END;
                                }
      { 1100529404;2 ;Action    ;
                      Name=ExpandRecipe;
                      ShortCutKey=Shift+Ctrl+X;
                      CaptionML=[ENU=Collapse/Expand Recipe;
                                 SVE=Visa/d”lj mall];
                      Image=ExplodeBOM;
                      OnAction=BEGIN
                                 HandleRecipeLevel;  //DP01183
                               END;
                                }
      { 1100294000;2 ;Action    ;
                      CaptionML=[ENU=Line Comments;
                                 NOR=Linjekommentarer;
                                 SVE=Radkommentarer];
                      Image=Comment;
                      OnAction=BEGIN
                                 ShowLineComments(FALSE); // SESB.I039 VKO 30.07.2013
                               END;
                                }
      { 1100409000;2 ;Action    ;
                      CaptionML=[ENU=Insert project comments;
                                 SVE=H„mta projektkommentarer];
                      Image=GetLines;
                      OnAction=BEGIN
                                 InsertCommentlinesProject("Project No.",Principal,"Commission No.","Settl.Sheet No.");
                               END;
                                }
      { 1100285300;2 ;Action    ;
                      CaptionML=[ENU=Show Purch. Invoice/Credit Memo;
                                 SVE=Visa ink”psfaktura/kredit];
                      Image=Document;
                      OnAction=VAR
                                 RecRef@1210190001 : RecordRef;
                                 DocumentFilters@1210190000 : Codeunit 11012432;
                                 SourceCodeSetup@1000000001 : Record 242;
                                 PurchInvHeader@1000000000 : Record 122;
                                 PurchCredHeader@1100285300 : Record 124;
                                 DocumentFilter@1000000003 : Record 11012073;
                                 GlobalTempDocumentProperties@1000000002 : TEMPORARY Record 11012746;
                               BEGIN
                                 //160324
                                 IF PurchInvHeader.GET("Source Document") THEN
                                   RecRef.GETTABLE(PurchInvHeader)
                                 ELSE
                                   IF PurchCredHeader.GET("Source Document") THEN
                                     RecRef.GETTABLE(PurchCredHeader)
                                   ELSE
                                   RecRef.GETTABLE(Rec);

                                 DocumentFilters.CreateTemporaryFilter(RecRef, DocumentFilter);
                                 COMMIT;

                                 DocumentFilters.ApplyDocumentFilter(DocumentFilter, GlobalTempDocumentProperties);
                                 GlobalTempDocumentProperties.SETRANGE("From Filter Form", FALSE);
                                 CASE GlobalTempDocumentProperties.COUNT OF
                                   0:
                                     CASE RecRef.NUMBER OF
                                      122: BEGIN PurchInvHeader.SETRECFILTER; PurchInvHeader.PrintRecords(TRUE); END;
                                      124: BEGIN PurchCredHeader.SETRECFILTER; PurchCredHeader.PrintRecords(TRUE,FALSE); END;
                                     END;

                                   1:  GlobalTempDocumentProperties.OpenDocument;
                                   ELSE
                                   PAGE.RUNMODAL(0, GlobalTempDocumentProperties);
                                 END;
                                 //<<160603
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 2   ;2   ;Field     ;
                SourceExpr="Project No.";
                Visible=FALSE;
                Editable=FALSE }

    { 4   ;2   ;Field     ;
                SourceExpr=Principal;
                Visible=FALSE;
                Editable=FALSE }

    { 1210190022;2;Field  ;
                SourceExpr="Principal Name";
                Visible=FALSE }

    { 6   ;2   ;Field     ;
                SourceExpr="Commission No.";
                Visible=FALSE;
                Editable=FALSE;
                LookupPageID=Commission }

    { 8   ;2   ;Field     ;
                SourceExpr="Settl.Sheet No.";
                Visible=FALSE;
                Editable=FALSE }

    { 10  ;2   ;Field     ;
                SourceExpr=Element }

    { 1100529900;2;Field  ;
                SourceExpr="Plot No." }

    { 1210190006;2;Field  ;
                SourceExpr="Extension Contract" }

    { 1100485000;2;Field  ;
                SourceExpr="Source Document";
                OnDrillDown=BEGIN
                              Navigate;  //db, 05-02-07
                            END;
                             }

    { 1100529402;2;Field  ;
                SourceExpr="Recipe Group";
                Visible=FALSE }

    { 1100529401;2;Field  ;
                SourceExpr=Recipe;
                Visible=FALSE }

    { 12  ;2   ;Field     ;
                SourceExpr="Item No.";
                OnValidate=BEGIN
                             ItemNoOnAfterValidate;
                           END;

                OnLookup=BEGIN
                           IF HandleLookupItem(FIELDNO("Item No.")) THEN //DP02213
                             CurrPage.UPDATE(FALSE);
                         END;
                          }

    { 1100528500;2;Field  ;
                SourceExpr="Serial No.";
                Visible=FALSE }

    { 1100528501;2;Field  ;
                SourceExpr="Lot No.";
                Visible=FALSE }

    { 14  ;2   ;Field     ;
                SourceExpr=Manufacturer;
                Visible=ManufacturerVisible }

    { 16  ;2   ;Field     ;
                SourceExpr="Basic Item";
                Visible="Basic ItemVisible";
                OnValidate=BEGIN
                             BasicItemOnAfterValidate;
                           END;

                OnLookup=BEGIN
                           IF HandleLookupItem(FIELDNO("Basic Item")) THEN  //DP02213
                             CurrPage.UPDATE(FALSE);
                         END;
                          }

    { 18  ;2   ;Field     ;
                SourceExpr="Vendor (Trade Item)";
                Visible="Vendor (Trade Item)Visible" }

    { 20  ;2   ;Field     ;
                SourceExpr="Trade Item";
                Visible="Trade ItemVisible";
                OnValidate=VAR
                             TradeItem@1100285500 : Record 11012317;
                             GrossPriceInventoryUnit@1100285504 : Decimal;
                             NettPriceInventoryUnit@1100285503 : Decimal;
                             GrossPricePurchaseUnit@1100285502 : Decimal;
                             NettPricePurchaseUnit@1100285501 : Decimal;
                             DiscPerc@1100285505 : Decimal;
                           BEGIN

                             //>> 160317 ITERO.AC RFC082 Removed due to changes in Table "Project Cost Plus Entry"
                             //>>IME-118
                             //SettlSheetRec.GET("Project No.", Principal, "Commission No.", "Settl.Sheet No.");
                             //ProjRec.GET("Project No.");
                             //IF (ProjRec."Price List Code"<>'') AND TradeItem.GET("Vendor (Trade Item)","Trade Item") THEN BEGIN
                             //  //GetActualPrice(gvRefDate, gvDiscRef1, gvDiscRef2);
                             //  TradeItem.GetActualPrice(SettlSheetRec."Reference Date", '', '');
                             //  TradeItem.GetUnitPrices(GrossPriceInventoryUnit, NettPriceInventoryUnit, GrossPricePurchaseUnit, NettPricePurchaseUnit, DiscPerc);
                             //  VALIDATE("Cost Price", NettPriceInventoryUnit);
                             //END;
                             //<<IME-118
                             //<< 160317 ITERO.AC RFC082

                             TradeItemOnAfterValidate;
                           END;

                OnLookup=BEGIN
                           IF HandleLookupItem(FIELDNO("Trade Item")) THEN  //DP02213
                             CurrPage.UPDATE(FALSE);
                         END;

                OnAssistEdit=BEGIN
                               HandleItemAssistEdit(3);
                             END;
                              }

    { 1101285002;2;Field  ;
                SourceExpr="Means No." }

    { 1210190010;2;Field  ;
                SourceExpr=Operation;
                Visible=FALSE }

    { 24  ;2   ;Field     ;
                SourceExpr="Cost Object";
                LookupPageID=Cost Object List;
                OnValidate=BEGIN
                             CostObjectOnAfterValidate;
                           END;
                            }

    { 1100485014;2;Field  ;
                SourceExpr="Cost Component";
                Editable="Cost ComponentEditable" }

    { 26  ;2   ;Field     ;
                DrillDown=No;
                SourceExpr="Cost Type";
                Visible=FALSE }

    { 46  ;2   ;Field     ;
                SourceExpr="Employee No.";
                OnValidate=BEGIN
                             EmployeeNoOnAfterValidate;
                           END;
                            }

    { 1100525001;2;Field  ;
                SourceExpr="Name Employee";
                Visible=false }

    { 1100485016;2;Field  ;
                SourceExpr="Wage Component";
                Visible=FALSE }

    { 1100525008;2;Field  ;
                DrillDown=No;
                SourceExpr="Description Wage Component";
                Visible=FALSE }

    { 1210190008;2;Field  ;
                SourceExpr="Standard Text Code";
                Visible=FALSE;
                OnValidate=BEGIN
                             StandardTextCodeOnAfterValidat;
                           END;
                            }

    { 28  ;2   ;Field     ;
                SourceExpr=Description;
                Style=Strong;
                StyleExpr=RecipeHeader }

    { 1210190012;2;Field  ;
                SourceExpr="Description 2";
                Visible=FALSE }

    { 1210190000;2;Field  ;
                CaptionML=[NOR=Tekstblokk;
                           SVE=Textblock];
                SourceExpr="Text Block" }

    { 30  ;2   ;Field     ;
                SourceExpr=Quantity;
                OnValidate=BEGIN
                             QuantityOnAfterValidate;
                           END;
                            }

    { 1100528503;2;Field  ;
                SourceExpr="Dimensional Factor";
                Visible=FALSE }

    { 1100485010;2;Field  ;
                SourceExpr="Reconcilation ID";
                Visible=FALSE }

    { 32  ;2   ;Field     ;
                SourceExpr="Unit of Measure" }

    { 1210190014;2;Field  ;
                SourceExpr="Reference Date";
                Visible=FALSE }

    { 34  ;2   ;Field     ;
                SourceExpr="Hour Rate Code";
                LookupPageID=Hour Rate List;
                OnLookup=VAR
                           HourRateRec@1210190001 : Record 11012022;
                           Desc@1100485002 : Text;
                         BEGIN
                           IF "Reference Date" = 0D THEN
                             "Reference Date" := FillReferenceDate;

                           HourRateRec.SETRANGE("Project Filter", "Project No.");
                           HourRateRec.SETRANGE("Principal Filter", Principal);
                           HourRateRec.SETFILTER("Service Contract Filter", '%1', '');
                           HourRateRec.SETRANGE("Date Filter", 0D, "Reference Date");
                           HourRateRec.SETRANGE("Starting Date", 0D, "Reference Date");  //C005830.n
                           HourRateRec.SETFILTER("Ending Date", '%1|>=%2', 0D, "Reference Date");  //C005830.n
                           IF PAGE.RUNMODAL(0, HourRateRec) = ACTION::LookupOK THEN BEGIN
                             Desc := Description;
                             SetValidateHourRateCode(TRUE);
                             VALIDATE("Hour Rate Code",HourRateRec.Code);
                             IF ProjSetup."Description Cost Plus Entry" <> ProjSetup."Description Cost Plus Entry"::RateCode THEN
                               Description := Desc;
                             CurrPage.UPDATE(TRUE);
                           END;
                         END;
                          }

    { 1100485008;2;Field  ;
                SourceExpr="Sales Surcharge Overtime %";
                Visible=FALSE }

    { 1210190002;2;Field  ;
                SourceExpr="Gross Price (LCY)" }

    { 1100525007;2;Field  ;
                SourceExpr="Gross Price (FCY)" }

    { 1100485024;2;Field  ;
                SourceExpr="Purchase Discount % (Item)";
                Visible=FALSE;
                Editable=FALSE }

    { 1100485022;2;Field  ;
                SourceExpr="Cost Price (LCY)";
                Visible=FALSE;
                Editable=FALSE }

    { 1100525009;2;Field  ;
                SourceExpr="Cost Price (FCY)";
                Visible=FALSE;
                Editable=FALSE }

    { 1100525010;2;Field  ;
                SourceExpr="Currency Code Costs" }

    { 1210190004;2;Field  ;
                SourceExpr="Sales Discount % (Item)";
                OnValidate=BEGIN
                             //>> 150914 ITERO.AC RFC001-2 New field "Price History DiscountRef1" will be cleared if user changes Sales Discount manually
                             IF "Sales Discount % (Item)" <> xRec."Sales Discount % (Item)" THEN
                               "Price History DiscountRef1" := '';
                             //<< 150914 ITERO.AC RFC001-2
                           END;

                OnAssistEdit=BEGIN
                               AssistEditSalesCondition;  //db, 26-01-16: C015604
                             END;
                              }

    { 1100525005;2;Field  ;
                SourceExpr="Sales Condition Present" }

    { 36  ;2   ;Field     ;
                SourceExpr="Basic Price (LCY)" }

    { 1100525011;2;Field  ;
                SourceExpr="Basic Price (FCY)" }

    { 1100485046;2;Field  ;
                SourceExpr="Basic Price Found at";
                Visible=FALSE }

    { 1100528900;2;Field  ;
                SourceExpr="Price Agreement";
                Visible=FALSE }

    { 38  ;2   ;Field     ;
                SourceExpr="Surcharge %" }

    { 1100525000;2;Field  ;
                SourceExpr="Surcharge Amount (LCY)";
                Visible=FALSE }

    { 1100525013;2;Field  ;
                SourceExpr="Surcharge Amount (FCY)";
                Visible=FALSE }

    { 40  ;2   ;Field     ;
                SourceExpr="Sales Price (LCY)" }

    { 1100525014;2;Field  ;
                SourceExpr="Sales Price (FCY)" }

    { 1100525012;2;Field  ;
                SourceExpr="Currency Code" }

    { 42  ;2   ;Field     ;
                BlankZero=Yes;
                SourceExpr="Sales Amount (LCY)";
                AutoFormatType=1 }

    { 1100525016;2;Field  ;
                BlankZero=Yes;
                SourceExpr="Sales Amount (FCY)";
                AutoFormatType=1 }

    { 1210190020;2;Field  ;
                SourceExpr="Cost Amount (LCY)" }

    { 1100525015;2;Field  ;
                SourceExpr="Cost Amount (FCY)" }

    { 44  ;2   ;Field     ;
                SourceExpr="VAT Prod. Posting Group" }

    { 52  ;2   ;Field     ;
                SourceExpr="From Date" }

    { 1210190016;2;Field  ;
                SourceExpr="From Time";
                Visible=FALSE }

    { 54  ;2   ;Field     ;
                SourceExpr="To Date" }

    { 1210190018;2;Field  ;
                SourceExpr="To Time";
                Visible=FALSE }

    { 1100525006;2;Field  ;
                SourceExpr=Chargeable }

    { 56  ;2   ;Field     ;
                SourceExpr=Invoiced }

    { 1100485002;2;Field  ;
                SourceExpr="Invoiced Quantity" }

    { 58  ;2   ;Field     ;
                SourceExpr="Invoiced Price" }

    { 60  ;2   ;Field     ;
                SourceExpr="Invoice in Process" }

    { 62  ;2   ;Field     ;
                SourceExpr="Credit Memo in Process" }

    { 64  ;2   ;Field     ;
                SourceExpr="Creation Date" }

    { 66  ;2   ;Field     ;
                SourceExpr="Last Date Modified" }

    { 68  ;2   ;Field     ;
                SourceExpr="Entry No. Project Ledger";
                Visible=FALSE }

    { 1100525002;2;Field  ;
                SourceExpr=Vendor;
                Visible=FALSE }

    { 1100525004;2;Field  ;
                SourceExpr="Vendor Name";
                Visible=FALSE }

    { 1100485004;2;Field  ;
                SourceExpr="Invoiced Quantity Pr. Ledger";
                HideValue=InvoicedQuantityPrLedgerHideVa }

    { 1100485006;2;Field  ;
                SourceExpr="Invoiced Price Pr. Ledger";
                HideValue=InvoicedPricePrLedgerHideValue }

    { 1100485042;2;Field  ;
                SourceExpr=Processed;
                Visible=FALSE }

    { 70  ;2   ;Field     ;
                SourceExpr="Posting Date Costs" }

    { 1100485012;2;Field  ;
                SourceExpr="Execution Date";
                Visible=FALSE }

    { 1100485018;2;Field  ;
                SourceExpr=Room;
                Visible=FALSE }

    { 1100485020;2;Field  ;
                SourceExpr="Room Description";
                Visible=FALSE }

    { 1100525003;2;Field  ;
                SourceExpr="Rental Period";
                Visible=FALSE }

    { 1100527000;2;Field  ;
                SourceExpr="Resource No." }

    { 1100527001;2;Field  ;
                SourceExpr="Trade Association" }

    { 1100529600;2;Field  ;
                CaptionML=[ENU=Comments;
                           NOR=Merknader;
                           SVE=Kommentar];
                SourceExpr=CommentLineExist;
                Visible=FALSE;
                Editable=FALSE }

    { 3   ;2   ;Field     ;
                SourceExpr="Periodic Template Code" }

    { 5   ;2   ;Field     ;
                SourceExpr="Periodic Starting Date" }

    { 1100285001;2;Field  ;
                SourceExpr="Price History Found";
                Visible=FALSE;
                Editable=FALSE }

    { 1100285000;2;Field  ;
                SourceExpr="Price History Vendor No.";
                Visible=FALSE;
                Editable=FALSE }

    { 1100285002;2;Field  ;
                SourceExpr="Price History PriceList";
                Visible=FALSE;
                OnValidate=VAR
                             lvPriceHistRec@1100285100 : Record 11012315;
                             lvRefDate@1100285101 : Date;
                             ItemTypeOpt@1100285102 : 'Item,Basic Item,Trade Item,Trade Vendor';
                           BEGIN
                             // 150914 ITERO.AC RFC001-2 Validation of new column Price History PriceList
                             lvRefDate := "Reference Date";
                             IF lvRefDate = 0D THEN
                               lvRefDate := FillReferenceDate;

                             lvPriceHistRec.SETCURRENTKEY("Item Code", "Starting Date", "Price List Code");
                             lvPriceHistRec.SETRANGE("Item Code", "Trade Item");
                             lvPriceHistRec.SETRANGE("Starting Date", 0D, lvRefDate);
                             lvPriceHistRec.SETRANGE("Price List Code", "Price History PriceList");

                             IF NOT lvPriceHistRec.FINDLAST THEN BEGIN
                               ERROR(STRSUBSTNO( Text100, "Trade Item", "Price History PriceList"));
                               EXIT;
                             END;

                             SetManualPriceList("Price History PriceList");
                             ValidateItem(ItemTypeOpt::"Trade Item");
                           END;
                            }

    { 1100285003;2;Field  ;
                SourceExpr="Price History DiscountRef1";
                Visible=FALSE;
                Editable=FALSE }

    { 1100285004;2;Field  ;
                SourceExpr="Line No.";
                Visible=FALSE;
                Editable=FALSE }

    { 1100285005;2;Field  ;
                Name=SalesMargin;
                CaptionML=[ENU=Sales Margin %;
                           NOR=Margin %;
                           SVE=Marginal %];
                SourceExpr=GetSalesMargin;
                Visible=FALSE;
                Editable=FALSE }

    { 1100285006;2;Field  ;
                BlankZero=Yes;
                SourceExpr="Cost Price Adjustment";
                Visible=FALSE;
                Editable=FALSE }

    { 1100530700;2;Field  ;
                SourceExpr="Service Order No.";
                Visible=FALSE }

  }
  CODE
  {
    VAR
      ProjSetup@1100525003 : Record 315;
      ItemSetup@1100525002 : Record 11012300;
      EmplRec@11012000 : Record 5200;
      Text009@1210190000 : TextConst 'ENU=Before editing text enter the line first;NOR=Velg rad f›r du redigerer tekst.;SVE=V„lj rad innan du redigerar text.';
      ProjRec@1210190005 : Record 11072003;
      CostPlusRec@1210190004 : Record 11012019;
      OperationRec@1210190003 : Record 11012094;
      OperationLineRec@1210190002 : Record 11012092;
      SettlSheetRec@1100485000 : Record 11012021;
      LineNoInt@1210190001 : Integer;
      Text010@1210190006 : TextConst 'ENU=Project Control is not built. Do you want to build it now?;NOR=Prosjektkontroll er ikke opprettet. Vil du opprette den n†?;SVE=Projektkontroll har inte skapats. Vill du skapa den nu?';
      "Basic ItemVisible"@19042756 : Boolean INDATASET;
      "Trade ItemVisible"@19042429 : Boolean INDATASET;
      ManufacturerVisible@19015155 : Boolean INDATASET;
      "Vendor (Trade Item)Visible"@19043796 : Boolean INDATASET;
      "Cost ComponentEditable"@19073195 : Boolean INDATASET;
      InvoicedQuantityPrLedgerHideVa@19061911 : Boolean INDATASET;
      InvoicedPricePrLedgerHideValue@19054714 : Boolean INDATASET;
      RecipeHeader@1100529400 : Boolean INDATASET;
      Text100@1100285000 : TextConst 'ENU=Trade Item code %1 not found in the selected customer price list %2.;NOR=Katalogarktkkel %1 finns ikke i vald kundeprisliste %2.;SVE=Anskaffningsartikel %1 finns inte i vald kundprislista %2.';

    PROCEDURE GetEmployee@3();
    BEGIN
      IF "Employee No." <> '' THEN BEGIN
        IF EmplRec.GET("Employee No.") THEN;
      END ELSE
        CLEAR(EmplRec);
    END;

    PROCEDURE EditText@1210190000();
    VAR
      TextFrm@11012001 : Page 11012120;
    BEGIN
      IF "Line No." = 0 THEN
        ERROR(Text009);

      TextFrm.SetSelection(DATABASE::"Project Cost Plus Entry","Project No.",
        Principal,"Commission No.","Settl.Sheet No.",'','',"Line No.",0);

      TextFrm.RUNMODAL;
      CLEAR(TextFrm);
    END;

    PROCEDURE Compress@1210190001(IProjectNo@1210190002 : Code[20];IPrincipalNo@1210190003 : Code[20];ICommisionNo@1210190004 : Code[20];ISettlSheetNo@1210190005 : Code[10]);
    VAR
      lvCostPlusRec@1210190000 : Record 11012019;
      CompressCu@1210190006 : Codeunit 11012043;
    BEGIN
      SettlSheetRec.GET(IProjectNo, IPrincipalNo, ICommisionNo, ISettlSheetNo);

      lvCostPlusRec.COPY(Rec);
      lvCostPlusRec.SETRANGE("Project No.", IProjectNo);
      lvCostPlusRec.SETRANGE(Principal, IPrincipalNo);
      lvCostPlusRec.SETRANGE("Commission No.", ICommisionNo);
      lvCostPlusRec.SETRANGE("Settl.Sheet No.", ISettlSheetNo);

      CompressCu.ProcessProjectCostPlus(lvCostPlusRec);
    END;

    PROCEDURE InsertExtendedText@5(Unconditionally@1000 : Boolean;TextType@1210190001 : 'Cost Object,Operation,Item,Standard Text');
    VAR
      TransferExtendedText@1210190000 : Codeunit 378;
    BEGIN
      SettlSheetRec.GET("Project No.", Principal, "Commission No.", "Settl.Sheet No.");
      IF TransferExtendedText.SettlCheckIfAnyExtText(Rec,Unconditionally,TextType, SettlSheetRec."Reference Date") THEN BEGIN
        CurrPage.SAVERECORD;
        TransferExtendedText.InsertSettlExtText(Rec);
      END;
      IF TransferExtendedText.MakeUpdate THEN
        CurrPage.UPDATE;
    END;

    PROCEDURE InsertOperationLines@1210190002(IProjectNo@1210190004 : Code[20];IPrincipalNo@1210190003 : Code[20];ICommisionNo@1210190002 : Code[20];ISettlSheetNo@1210190001 : Code[10];IRefDate@1210190005 : Date);
    VAR
      lvSalesRate@1100485000 : Decimal;
      lvPurchRate@1100485001 : Decimal;
    BEGIN
      LineNoInt := DetermineLastLineNo(IProjectNo,IPrincipalNo,ICommisionNo,ISettlSheetNo);

      OperationRec.SETRANGE("Project No.",IProjectNo);
      OperationRec.SETRANGE("Cost Plus Lines Created",0D);
      IF OperationRec.FIND('-') THEN BEGIN
        REPEAT
          IF NOT OperationRec."Total line on settlement sheet" THEN BEGIN
            InsertOperation(IProjectNo,IPrincipalNo,ICommisionNo,ISettlSheetNo,IRefDate,0,FALSE);
            InsertTextExtension(IProjectNo,IPrincipalNo,ICommisionNo,ISettlSheetNo,IRefDate,1);
            OperationLineRec.SETRANGE(Operation,OperationRec.Operation);
            IF OperationLineRec.FIND('-') THEN
              REPEAT
                InsertCostPlusLine(IProjectNo,IPrincipalNo,ICommisionNo,ISettlSheetNo,IRefDate);
                IF OperationLineRec."No." <> '' THEN
                  InsertTextExtension(IProjectNo,IPrincipalNo,ICommisionNo,ISettlSheetNo,IRefDate,2)
                ELSE
                  IF OperationLineRec."Cost Object" <> '' THEN
                    InsertTextExtension(IProjectNo,IPrincipalNo,ICommisionNo,ISettlSheetNo,IRefDate,0);
              UNTIL OperationLineRec.NEXT = 0;
          END ELSE BEGIN
            OperationLineRec.SETRANGE(Operation,OperationRec.Operation);
            IF OperationLineRec.FIND('-') THEN BEGIN
              OperationRec.CalculateProjOperationRate(IProjectNo, OperationRec.Operation, lvSalesRate, lvPurchRate);
              InsertOperation(IProjectNo,IPrincipalNo,ICommisionNo,ISettlSheetNo,IRefDate,
                lvSalesRate,FALSE);
              InsertTextExtension(IProjectNo,IPrincipalNo,ICommisionNo,ISettlSheetNo,IRefDate,1);
            END;
          END;
          InsertOperation(IProjectNo,IPrincipalNo,ICommisionNo,ISettlSheetNo,IRefDate,0,TRUE);
          OperationRec."Cost Plus Lines Created" := TODAY;
          OperationRec."Cost Plus Lines Created By" := USERID;
          OperationRec.MODIFY;
        UNTIL OperationRec.NEXT = 0;
      END;
    END;

    PROCEDURE DetermineLastLineNo@1210190004(IProjectNo@1210190004 : Code[20];IPrincipalNo@1210190003 : Code[20];ICommisionNo@1210190002 : Code[20];ISettlSheetNo@1210190001 : Code[10]) LineNo : Integer;
    VAR
      lCostPlusRec@1210190000 : Record 11012019;
    BEGIN
      lCostPlusRec.SETRANGE("Project No.",IProjectNo);
      lCostPlusRec.SETRANGE(Principal,IPrincipalNo);
      lCostPlusRec.SETRANGE("Commission No.",ICommisionNo);
      lCostPlusRec.SETRANGE("Settl.Sheet No.",ISettlSheetNo);
      IF lCostPlusRec.FIND('+') THEN
        EXIT(lCostPlusRec."Line No.")
      ELSE
        EXIT(0);
    END;

    PROCEDURE InsertOperation@1210190003(IProjectNo@1210190005 : Code[20];IPrincipalNo@1210190004 : Code[20];ICommisionNo@1210190003 : Code[20];ISettlSheetNo@1210190002 : Code[10];IRefDate@1210190001 : Date;ISalesPrice@1210190000 : Decimal;IEmptyLine@1210190006 : Boolean);
    BEGIN
      CostPlusRec.INIT;
      CostPlusRec."Project No." := IProjectNo;
      CostPlusRec.Principal := IPrincipalNo;
      CostPlusRec."Commission No." := ICommisionNo;
      CostPlusRec."Settl.Sheet No." := ISettlSheetNo;
      CostPlusRec."Line No." := LineNoInt + 10000;
      LineNoInt := LineNoInt + 10000;
      IF NOT IEmptyLine THEN BEGIN
        CostPlusRec.Description := OperationRec.Description;
        CostPlusRec.Quantity := OperationRec.Quantity;
        CostPlusRec."Unit of Measure" := OperationRec."Unit of Measure";
        CostPlusRec."Sales Price (LCY)" := ISalesPrice;
      END;
      CostPlusRec.Operation := OperationRec.Operation;
      CostPlusRec."Creation Date" := TODAY;
      CostPlusRec.DetermineVATProdPostingGroup;
      CostPlusRec.INSERT(TRUE);
    END;

    PROCEDURE InsertCostPlusLine@1210190006(IProjectNo@1210190005 : Code[20];IPrincipalNo@1210190004 : Code[20];ICommisionNo@1210190003 : Code[20];ISettlSheetNo@1210190002 : Code[10];IRefDate@1210190001 : Date);
    VAR
      lvDimValRec@1210190006 : Record 349;
      lvDimMgt@1210190000 : Codeunit 408;
    BEGIN
      CostPlusRec.INIT;
      CostPlusRec."Project No." := IProjectNo;
      CostPlusRec.Principal := IPrincipalNo;
      CostPlusRec."Commission No." := ICommisionNo;
      CostPlusRec."Settl.Sheet No." := ISettlSheetNo;
      CostPlusRec."Line No." := LineNoInt + 10000;
      CostPlusRec.INSERT(TRUE);  //db, 23-06-08

      LineNoInt := LineNoInt + 10000;
      CostPlusRec."Reference Date" := IRefDate;
      IF (OperationLineRec."Cost Type" = OperationLineRec."Cost Type"::Material) AND (OperationLineRec."No." <> '') THEN BEGIN
        IF OperationLineRec.Type = OperationLineRec.Type::Item THEN
          CostPlusRec.VALIDATE("Item No.", OperationLineRec."No.");
      END;

      IF OperationLineRec.Type = OperationLineRec.Type::Means THEN
        CostPlusRec.VALIDATE("Means No.", OperationLineRec."No.");

      CostPlusRec.VALIDATE("Cost Object", OperationLineRec."Cost Object");
      IF (OperationLineRec."Cost Type" = OperationLineRec."Cost Type"::Labor) THEN
        CostPlusRec.VALIDATE("Hour Rate Code",OperationLineRec."Hour Rate Code");
      //CostPlusRec."Cost Component" := OperationLineRec."Cost Component";

      CostPlusRec."Surcharge %" := CostPlusRec.GetSurcharge;  //db, 23-06-08
      CostPlusRec.VALIDATE("Basic Price (LCY)");
      CostPlusRec.Description := OperationLineRec.Description;
      IF OperationRec."Quantities On Settlement Sheet" THEN BEGIN
        IF OperationLineRec."Cost Type" =  OperationLineRec."Cost Type"::Labor THEN
          CostPlusRec.VALIDATE(Quantity,OperationLineRec.Quantity * OperationRec.Quantity * OperationLineRec.Norm)
        ELSE
          CostPlusRec.VALIDATE(Quantity,OperationLineRec.Quantity * OperationRec.Quantity);
      END ELSE
        CostPlusRec.VALIDATE(Quantity,0);
      CostPlusRec."Unit of Measure" := OperationLineRec."Unit of Measure";
      IF OperationLineRec."Cost Type" =  OperationLineRec."Cost Type"::Labor THEN BEGIN
        lvDimMgt.GetDimValueRec(2, CostPlusRec."Cost Object", lvDimValRec, FALSE, CostPlusRec."Project No.");
        IF lvDimValRec."Unit of Time" <> '' THEN
          CostPlusRec."Unit of Measure" := lvDimValRec."Unit of Time";
      END;
      CostPlusRec.Operation := OperationLineRec.Operation;
      CostPlusRec.DetermineVATProdPostingGroup;
      CostPlusRec.MODIFY(TRUE);  //db, 23-06-08
    END;

    PROCEDURE CheckSetSmallProjStatusFinish@1210190005();
    BEGIN
      IF NOT ProjRec.GET("Project No.") THEN
        EXIT;

      IF (NOT ProjRec."Small Project") OR (ProjRec."Small Project Status" <> ProjRec."Small Project Status"::Finished) THEN
        EXIT;

      ProjRec.VALIDATE("Small Project Status", ProjRec."Small Project Status"::Concept);
      ProjRec.MODIFY(TRUE);
    END;

    PROCEDURE InsertTextExtension@1210190007(IProjectNo@1210190006 : Code[20];IPrincipalNo@1210190005 : Code[20];ICommisionNo@1210190004 : Code[20];ISettlSheetNo@1210190003 : Code[10];IRefDate@1210190002 : Date;TextFrom@1210190000 : 'Costobject,Operation,Item,Standard Text');
    VAR
      TransferExtendedText@1210190001 : Codeunit 378;
    BEGIN
      IF TransferExtendedText.SettlCheckIfAnyExtText(CostPlusRec,FALSE,TextFrom,IRefDate) THEN BEGIN
        TransferExtendedText.InsertSettlExtText(CostPlusRec);
        LineNoInt := DetermineLastLineNo(IProjectNo,IPrincipalNo,ICommisionNo,ISettlSheetNo);
      END;
    END;

    PROCEDURE SetFilterInvoiced@1100485000();
    BEGIN
      SETRANGE(Invoiced, FALSE);
    END;

    PROCEDURE UpdateForm@1100485002();
    BEGIN
      CurrPage.UPDATE(FALSE);
    END;

    PROCEDURE GetProjectEntry@1100485004(IProjectNo@1100485003 : Code[20];IPrincipalNo@1100485002 : Code[20];ICommisionNo@1100485001 : Code[20];ISettlSheetNo@1100485000 : Code[10]);
    VAR
      lvProjRec@1100485008 : Record 11072003;
      lvProjLedgEntryRec@1100485007 : Record 11072005;
      lvPostedHourLineRec@1100485006 : Record 11012085;
      lvHourAccLineRec@1100485005 : Record 11012039;
      lvCreateCostPlusRpt@1100485004 : Report 11012013;
    BEGIN
      //db, 23-06-08
      lvProjRec.SETRANGE("No.", IProjectNo);
      lvProjLedgEntryRec.SETRANGE("Job No.", IProjectNo); //Call 17014
      lvProjLedgEntryRec.SETRANGE("Cost Plus Entry Created", FALSE);
      lvPostedHourLineRec.SETRANGE("Project No.", IProjectNo); //Call 17014
      lvPostedHourLineRec.SETRANGE("Cost Plus Entry Created", FALSE);
      lvHourAccLineRec.SETRANGE("Project No.", IProjectNo); //Call 17014
      lvHourAccLineRec.SETRANGE("Cost Plus Entry Created", FALSE);

      lvCreateCostPlusRpt.SETTABLEVIEW(lvProjRec);
      lvCreateCostPlusRpt.SETTABLEVIEW(lvProjLedgEntryRec);
      lvCreateCostPlusRpt.SETTABLEVIEW(lvPostedHourLineRec);
      lvCreateCostPlusRpt.SETTABLEVIEW(lvHourAccLineRec);
      lvCreateCostPlusRpt.SetSelection(IProjectNo,IPrincipalNo,ICommisionNo,ISettlSheetNo);
      lvCreateCostPlusRpt.RUNMODAL;

      CurrPage.UPDATE(TRUE);
    END;

    LOCAL PROCEDURE ItemNoOnAfterValidate@19061248();
    BEGIN
      CurrPage.SAVERECORD;  //db, 23-06-08 (CalcSurcharge)
      InsertExtendedText(FALSE,2);
    END;

    LOCAL PROCEDURE BasicItemOnAfterValidate@19054956();
    BEGIN
      CurrPage.SAVERECORD;  //db, 23-06-08 (CalcSurcharge)
    END;

    LOCAL PROCEDURE TradeItemOnAfterValidate@19075338();
    BEGIN
      CurrPage.SAVERECORD;  //db, 23-06-08 (CalcSurcharge)
    END;

    LOCAL PROCEDURE CostObjectOnAfterValidate@19061648();
    BEGIN
      CurrPage.SAVERECORD;  //db, 23-06-08 (CalcSurcharge)
      InsertExtendedText(FALSE,0);
    END;

    LOCAL PROCEDURE EmployeeNoOnAfterValidate@19040646();
    BEGIN
      GetEmployee;
    END;

    LOCAL PROCEDURE StandardTextCodeOnAfterValidat@19059397();
    BEGIN
      InsertExtendedText(TRUE,3);
    END;

    LOCAL PROCEDURE QuantityOnAfterValidate@19032465();
    BEGIN
      CurrPage.UPDATE(TRUE);
    END;

    LOCAL PROCEDURE InvoicedQuantityPrLedgerOnForm@19073600();
    BEGIN
      IF "Entry No. Project Ledger" = 0 THEN
        InvoicedQuantityPrLedgerHideVa := TRUE;
    END;

    LOCAL PROCEDURE InvoicedPricePrLedgerOnFormat@19019848();
    BEGIN
      IF "Entry No. Project Ledger" = 0 THEN
       InvoicedPricePrLedgerHideValue := TRUE;
    END;

    PROCEDURE SetChargeable@1100525000();
    VAR
      ProjectCostPlusEntry@1100525000 : Record 11012019;
    BEGIN
      // 34599.n
      ProjectCostPlusEntry.COPY(Rec);
      CostPlusRec.SetInvoiceStatus(ProjectCostPlusEntry);
    END;

    PROCEDURE SetProcessed@1100525001();
    VAR
      ProjectCostPlusEntry@1100525000 : Record 11012019;
    BEGIN
      // 34599.n
      ProjectCostPlusEntry.COPY(Rec);
      CostPlusRec.SetCostPlusEntriesProcessed(ProjectCostPlusEntry);
    END;

    PROCEDURE EditCommentLines@1100529800();
    VAR
      CommentLine@1100529800 : Record 11020634;
      RecRef@1100529801 : RecordRef;
      RID@1100529802 : RecordID;
    BEGIN
      // **4PS MVOS
      RecRef.GETTABLE(Rec);
      RID := RecRef.RECORDID();
      CommentLine.EditCommentLines(1, RID);
    END;

    PROCEDURE CreateProjectCostPlusEntries@1100529801(SettlementSheet@1100529801 : Record 11012021);
    VAR
      CreateProjectCostPlusEst@1100529800 : Report 11012399;
      ProjectCostPlusEntry@1100529802 : Record 11012019;
    BEGIN
      ProjectCostPlusEntry.RESET;
      ProjectCostPlusEntry.SETRANGE("Project No.", SettlementSheet."Project No.");
      ProjectCostPlusEntry.SETRANGE(Principal, SettlementSheet.Principal);
      ProjectCostPlusEntry.SETRANGE("Commission No.", SettlementSheet."Commission No.");
      ProjectCostPlusEntry.SETRANGE("Settl.Sheet No.", SettlementSheet."No.");

      CreateProjectCostPlusEst.SETTABLEVIEW(ProjectCostPlusEntry);
      CreateProjectCostPlusEst.RUNMODAL;
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE UpdateDescriptionCPE@1100409000();
    VAR
      CostPlusEntry@1100409000 : Record 11012019;
    BEGIN
      //db, 12-12-12: C002998
      CostPlusEntry.COPY(Rec);
      CostPlusEntry.MARKEDONLY(TRUE);
      IF NOT CostPlusEntry.FINDFIRST THEN
        CostPlusEntry.MARKEDONLY(FALSE);

      IF CostPlusEntry.FINDSET THEN BEGIN
        REPEAT
          CostPlusEntry.GetDescription;
          CostPlusEntry.MODIFY;
        UNTIL CostPlusEntry.NEXT = 0;
      END;
      CLEARMARKS;
    END;

    PROCEDURE HandleItemAssistEdit@1100528302(ZoomType@1210190000 : Integer);
    BEGIN
      AssistEditItemData(ZoomType);
      IF ZoomType = -1 THEN
        CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE HandleRecipeLevel@1100529400();
    BEGIN
      ExpandRecipe;  //DP01183
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE SetNotChargeable@1100527000();
    VAR
      ProjectCostPlusEntry@1100527000 : Record 11012019;
    BEGIN
      ProjectCostPlusEntry.COPY(Rec);
      CostPlusRec.SetEntriesChargeable(ProjectCostPlusEntry, FALSE);
    END;

    LOCAL PROCEDURE "--ITERO--"@1100285102();
    BEGIN
    END;

    PROCEDURE InsertCommentlinesProject@1100409002(IProjectNo@1210190004 : Code[20];IPrincipalNo@1210190003 : Code[20];ICommisionNo@1210190002 : Code[20];ISettlSheetNo@1210190001 : Code[10]);
    VAR
      lvSalesRate@1100485000 : Decimal;
      lvPurchRate@1100485001 : Decimal;
      CommentLine@1100409000 : Record 97;
      CostPlusRec@1100409001 : Record 11012019;
    BEGIN
      //>> 150908 RFC-001 ITERO.SB New function (insert project comments to settlement sheet)
      LineNoInt := DetermineLastLineNo(IProjectNo,IPrincipalNo,ICommisionNo,ISettlSheetNo);
      CommentLine.SETRANGE("Table Name",CommentLine."Table Name"::Job);
      CommentLine.SETRANGE("No.",IProjectNo);
      IF CommentLine.FINDSET THEN REPEAT
        IF STRLEN(CommentLine.Comment) >50 THEN BEGIN
          CostPlusRec.INIT;
          CostPlusRec."Project No." := IProjectNo;
          CostPlusRec.Principal := IPrincipalNo;
          CostPlusRec."Commission No." := ICommisionNo;
          CostPlusRec."Settl.Sheet No." := ISettlSheetNo;
          CostPlusRec."Line No." := LineNoInt + 10000;
          CostPlusRec.INSERT(TRUE);  //db, 23-06-08
          CostPlusRec.VALIDATE("Standard Text Code",CommentLine.Code);
          CostPlusRec.Description:=COPYSTR(CommentLine.Comment,1,50);
          CostPlusRec.MODIFY(TRUE);
          LineNoInt := LineNoInt + 10000;

          CostPlusRec.INIT;
          CostPlusRec."Project No." := IProjectNo;
          CostPlusRec.Principal := IPrincipalNo;
          CostPlusRec."Commission No." := ICommisionNo;
          CostPlusRec."Settl.Sheet No." := ISettlSheetNo;
          CostPlusRec."Line No." := LineNoInt + 10000;
          CostPlusRec.INSERT(TRUE);  //db, 23-06-08
          CostPlusRec.VALIDATE("Standard Text Code",CommentLine.Code);
          CostPlusRec.Description:=COPYSTR(CommentLine.Comment,51,100);
          CostPlusRec.MODIFY(TRUE);
          LineNoInt := LineNoInt + 10000;

        END ELSE BEGIN
          CostPlusRec.INIT;
          CostPlusRec."Project No." := IProjectNo;
          CostPlusRec.Principal := IPrincipalNo;
          CostPlusRec."Commission No." := ICommisionNo;
          CostPlusRec."Settl.Sheet No." := ISettlSheetNo;
          CostPlusRec."Line No." := LineNoInt + 10000;
          CostPlusRec.INSERT(TRUE);  //db, 23-06-08
          CostPlusRec.VALIDATE("Standard Text Code",CommentLine.Code);
          CostPlusRec.Description:=CommentLine.Comment;
          CostPlusRec.MODIFY(TRUE);
          LineNoInt := LineNoInt + 10000;
        END;
      UNTIL CommentLine.NEXT=0;
      //<<
    END;

    PROCEDURE GetSalesMargin@1100285101() : Decimal;
    VAR
      lvResult@1100285100 : Decimal;
    BEGIN
      // 150914 ITERO.AC RFC001-2 Calculate new field "Sales Margin"
      //>> 160114 ITERO.SB RFC-089 New calculation of margin
      IF "Sales Price (LCY)" <> 0 THEN BEGIN
        lvResult := ("Sales Price (LCY)"  - "Cost Price (LCY)") / "Sales Price (LCY)" * 100 //"Cost Price" * 100;
      //<<
      END ELSE BEGIN
        lvResult := 0;
      END;

      EXIT(lvResult);
    END;

    BEGIN
    {
      SESB.I039 Extend no of characters in hour line
         VKO 30.07.2013 Action "Line Comments" added
         VKO 30.07.2013 Control "Text Block" changed

      ITERO.DL, 140324, IME-118, Cost price is not correct displayed in the cost plus entry when trade item are entered MANUALLY
      140326 4PSSE ITERO.SB Added fields: Periodic Template Code, Periodic Starting Date
      150908 ITERO.SB RFC-001 New function (insert project comments to settlement sheet)
      150914 ITERO.AC RFC001-2 Added columns "Line No.", "Price History PriceList", "Price History DiscountRef1" and "Line No."
      151211 ITERO.DL RFC085 warning if wrong pricelist is used or missing, new function
      160114 ITERO.SB RFC-089 New calculation of margin
      160317 ITERO.AC RFC082 Removed IME118 due to changes in Table "Project Cost Plus Entry"
      160401 ITERO.AC RFC082 Added new field "Cost Price Adjustment"
      161011 ITERO.SB RAD-039 Added action "Show Purch. Invoice/Credit Memo"
    }
    END.
  }
}

