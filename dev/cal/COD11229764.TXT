OBJECT Codeunit 11229764 eVerbinding Process Invoice
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    TableNo=11229763;
    OnRun=BEGIN
            ConverteVerbindingToSiB(Rec);
          END;

  }
  CODE
  {

    LOCAL PROCEDURE ConverteVerbindingToSiB@1100409002(VAR eVerbindingInvoice@1100525006 : Record 11229763);
    BEGIN
      IF (eVerbindingInvoice."Process Status" > eVerbindingInvoice."Process Status"::Processing) THEN
        EXIT;

      eVerbindingInvoice."Process Status" := eVerbindingInvoice."Process Status"::Processing;
      eVerbindingInvoice."Error Message" := '';
      eVerbindingInvoice.MODIFY(TRUE);

      CreateInvoiceSiB(eVerbindingInvoice);

      eVerbindingInvoice."Process Status" := eVerbindingInvoice."Process Status"::Processed;
      eVerbindingInvoice.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateInvoiceSiB@1100528501(VAR eVerbindingInvoice@1100528500 : Record 11229763);
    VAR
      InvoiceSiB@1100528501 : Record 11072653;
      eVerbindingInvoiceLine@1100528502 : Record 11229764;
    BEGIN
      WriteInvoiceSib(eVerbindingInvoice,InvoiceSiB);

      eVerbindingInvoiceLine.SETRANGE("Invoice No.",eVerbindingInvoice."Invoice No.");
      IF eVerbindingInvoiceLine.FINDSET(TRUE) THEN
        REPEAT
          WriteInvoiceSibLine(eVerbindingInvoice,eVerbindingInvoiceLine,InvoiceSiB);
        UNTIL eVerbindingInvoiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE WriteInvoiceSib@1100528502(eVerbindingInvoice@1100528500 : Record 11229763;VAR InvoiceSiB@1100528501 : Record 11072653);
    BEGIN
      InvoiceSiB.INIT;
      InvoiceSiB."No." := eVerbindingInvoice."Invoice No.";
      InvoiceSiB.Source := InvoiceSiB.Source::eVerbinding;
      InvoiceSiB."GS1 Invoice" := FALSE;
      CASE eVerbindingInvoice."Invoice Type" OF
        '380' : InvoiceSiB."Purch. Invoice Type" := InvoiceSiB."Purch. Invoice Type"::Invoice;
        '384' : InvoiceSiB."Purch. Invoice Type" := InvoiceSiB."Purch. Invoice Type"::CreditMemo;
      END;
      InvoiceSiB."Invoice Date" := eVerbindingInvoice."Invoice Date";
      InvoiceSiB."Due Date" := eVerbindingInvoice."Due Date";
      InvoiceSiB."Related Purch. Order No." := eVerbindingInvoice."Related Purch. Order No.";
      InvoiceSiB."Currency Code" := eVerbindingInvoice."Currency Code";

      //Buyer
      InvoiceSiB."GLN Buyer" := eVerbindingInvoice."GLN Buyer";
      InvoiceSiB."Name Buyer" := eVerbindingInvoice."Name Buyer";
      InvoiceSiB."Address Buyer" := eVerbindingInvoice."Address Buyer";
      InvoiceSiB."Post Code Buyer" := eVerbindingInvoice."Post Code Buyer";
      InvoiceSiB."City Buyer" := eVerbindingInvoice."City Buyer";
      InvoiceSiB."Country Buyer" := eVerbindingInvoice."Country Buyer";
      InvoiceSiB."VAT Identification Buyer" := eVerbindingInvoice."VAT Identification Buyer";

      //Supplier
      InvoiceSiB."GLN Vendor" := eVerbindingInvoice."GLN Vendor";
      InvoiceSiB."COC Registration No. Vendor" := eVerbindingInvoice."COC Registration No. Vendor";
      InvoiceSiB."Name Vendor" := eVerbindingInvoice."Name Vendor";
      InvoiceSiB."Address Vendor" := eVerbindingInvoice."Address Vendor";
      InvoiceSiB."Post Code Vendor" := eVerbindingInvoice."Post Code Vendor";
      InvoiceSiB."City Vendor" := eVerbindingInvoice."City Vendor";
      InvoiceSiB."Country Vendor" := eVerbindingInvoice."Country Vendor";
      InvoiceSiB."VAT Identification Vendor" := eVerbindingInvoice."VAT Identification Vendor";
      InvoiceSiB.IBAN := eVerbindingInvoice."IBAN Vendor";
      InvoiceSiB."SWIFT Code" := eVerbindingInvoice."SWIFT Code Vendor";
      InvoiceSiB."Contact Person Vendor" := eVerbindingInvoice."Contact Person Vendor";
      InvoiceSiB."Phone No. Contact Vendor" := eVerbindingInvoice."Phone No. Contact Vendor";

      //DeliveryParty
      InvoiceSiB."Address Delivery" := eVerbindingInvoice."Address Delivery";
      InvoiceSiB."Post Code Delivery" := eVerbindingInvoice."Post Code Delivery";
      InvoiceSiB."City Delivery" := eVerbindingInvoice."City Delivery";
      InvoiceSiB."Country Delivery" := eVerbindingInvoice."Country Delivery";

      //InvoiceTotals
      InvoiceSiB."Total Invoice Amount" := eVerbindingInvoice."Total Invoice Amount";
      InvoiceSiB."Total Net Amount Lines" := eVerbindingInvoice."Total Net Amount Lines";
      InvoiceSiB."Total VAT amount" := eVerbindingInvoice."Total VAT amount";
      InvoiceSiB."Total Discounts/Surcharges" := eVerbindingInvoice."Total Discounts/Surcharges";

      //get related info
      InvoiceSiB.DetermineVendor(FALSE);
      IF (InvoiceSiB."Vendor No." <> '') THEN
        InvoiceSiB.FillVATPostingGroupsHeader();
      InvoiceSiB.GetOnHold;

      InvoiceSiB.INSERT(TRUE);
    END;

    LOCAL PROCEDURE WriteInvoiceSibLine@1100528506(eVerbindingInvoice@1100528502 : Record 11229763;eVerbindingInvoiceLine@1100528501 : Record 11229764;InvoiceSiB@1100528500 : Record 11072653);
    VAR
      InvoiceLineSiB@1100528305 : Record 11072654;
      PurchaseHeader@1100528308 : Record 38;
      TradeItem@1100528303 : Record 11012317;
    BEGIN
      InvoiceLineSiB.INIT;
      InvoiceLineSiB."Invoice No." := eVerbindingInvoiceLine."Invoice No.";
      InvoiceLineSiB."Line No." := eVerbindingInvoiceLine."Line No.";

      //Strange but true: Project and Service Order on InvoiceSib are flowfields to the InvoiceLineSib, so fill them here
      IF PurchaseHeader.GET(PurchaseHeader."Document Type"::Order,eVerbindingInvoice."Related Purch. Order No.") THEN BEGIN
        InvoiceLineSiB."Project No." := PurchaseHeader."Job No.";
        InvoiceLineSiB."Service Order No." := PurchaseHeader."Service Order No."
      END;
      InvoiceLineSiB."Order Line No. Buyer" := eVerbindingInvoiceLine."Order Line No. Buyer";

      //TradeItemIdentification
      InvoiceLineSiB."Item No. Vendor" := eVerbindingInvoiceLine."Item No. Vendor";
      InvoiceLineSiB."GTIN Item" := eVerbindingInvoiceLine."GTIN Item";

      InvoiceLineSiB.FindTradeItem(InvoiceSiB,TradeItem);
      IF TradeItem."Item Code" <> '' THEN BEGIN
        InvoiceLineSiB."Vendor (Trade Item)" := TradeItem.Vendor;
        InvoiceLineSiB.VALIDATE("Trade Item",TradeItem."Item Code");
        InvoiceLineSiB."Cost Object" := TradeItem."Cost Object";
      END;

      //AdditionalItemIdentification
      InvoiceLineSiB.Description := eVerbindingInvoiceLine.Description;

      //PriceInformation
      InvoiceLineSiB."Invoiced Quantity" := eVerbindingInvoiceLine."Invoiced Quantity";
      InvoiceLineSiB."Unit of Measure Code" := InvoiceLineSiB.RetrieveLocalUnitCode(eVerbindingInvoiceLine."Unit of Measure Code");
      IF InvoiceLineSiB."Unit of Measure Code" = '' THEN
        InvoiceLineSiB."Unit of Measure Code" := eVerbindingInvoiceLine."Unit of Measure Code";

      InvoiceLineSiB."Net Line Amount" := eVerbindingInvoiceLine."Net Line Amount";
      InvoiceLineSiB.Price := eVerbindingInvoiceLine.Price;
      InvoiceLineSiB."Price Base Quantity" := eVerbindingInvoiceLine."Price Base Quantity";
      InvoiceLineSiB."Price Base Unit Code" := InvoiceLineSiB.RetrieveLocalUnitCode(eVerbindingInvoiceLine."Price Base Unit Code");
      IF InvoiceLineSiB."Price Base Unit Code" = '' THEN
        InvoiceLineSiB."Price Base Unit Code" := eVerbindingInvoiceLine."Price Base Unit Code";

      //VATInformation
      InvoiceLineSiB."VAT Rate Type" := eVerbindingInvoiceLine."VAT Rate Type";
      InvoiceLineSiB.VALIDATE("VAT %",eVerbindingInvoiceLine."VAT %");
      InvoiceLineSiB.INSERT(TRUE);
    END;

    BEGIN
    END.
  }
}

