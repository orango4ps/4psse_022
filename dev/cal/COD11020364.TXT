OBJECT Codeunit 11020364 SAF-T XML Helper
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVNO14.04 (10674);
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      XMLDoc@1100285100 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      CurrXMLElement@1100285101 : ARRAY [100] OF DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      Depth@1100285102 : Integer;
      NamespaceFullName@1100285103 : Text;
      SAFTNameSpaceTxt@1100285104 : TextConst '@@@={Locked};ENU=urn:StandardAuditFile-Taxation-Financial:NO;NOR=urn:StandardAuditFile-Taxation-Financial:NO';
      NoFileGeneratedErr@1100285105 : TextConst 'ENU=No file generated;NOR=Ingen fil generert';
      gXMLNode@1100285106 : ARRAY [100] OF DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";

    PROCEDURE Initialize@1100285101();
    BEGIN
      CLEAR(XMLDoc);
      CLEAR(CurrXMLElement);
      Depth := 0;
      SetNamespace(SAFTNameSpaceTxt);
      CreateRootWithNamespace('AuditFile', 'nl');
    END;

    PROCEDURE SetNamespace@1100285102(NewNamespace@1100285100 : Text);
    BEGIN
      NamespaceFullName := NewNamespace;
    END;

    PROCEDURE CreateRootWithNamespace@1100285103(RootNodeName@1100285100 : Text;NamespaceShortName@1100285101 : Text);
    VAR
      XMLNodeTemp@1100285102 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLTempAttribute@1100285103 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      Depth += 1;
      // CurrXMLElement[Depth] := XmlElement.Create(RootNodeName, NamespaceFullName);
      // CurrXMLElement[Depth].Add(XmlAttribute.CreateNamespaceDeclaration(NamespaceShortName, NamespaceFullName));
      // XMLDoc.Add(CurrXMLElement[Depth]);
      // XMLDoc.GetRoot(CurrXMLElement[Depth]);

      XMLDoc := XMLDoc.XmlDocument;
      XMLNodeTemp := XMLDoc.CreateXmlDeclaration('1.0','UTF-8', '');
      XMLDoc.AppendChild(XMLNodeTemp);
      gXMLNode[Depth] := XMLDoc.CreateElement(RootNodeName);
      XMLDoc.AppendChild(gXMLNode[Depth]);
      IF NamespaceShortName <> '' THEN BEGIN
        XMLTempAttribute := gXMLNode[Depth].OwnerDocument.CreateAttribute('xmlns');
        IF NamespaceShortName <> '' THEN
          XMLTempAttribute.InnerText := NamespaceShortName;
        gXMLNode[Depth].Attributes.SetNamedItem(XMLTempAttribute);
      END;
    END;

    PROCEDURE AddNewXMLNode@1100285104(Name@1100285100 : Text;NodeText@1100285101 : Text);
    VAR
      NewXMLElement@1100285102 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
    BEGIN
      InsertXMLNode(NewXMLElement, Name, NodeText);
      Depth += 1;
      CurrXMLElement[Depth] := NewXMLElement;
    END;

    PROCEDURE AppendXMLNode@1100285105(Name@1100285101 : Text;NodeText@1100285100 : Text);
    VAR
      NewXMLElement@1100285102 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
    BEGIN
      IF NodeText = '' THEN
        EXIT;
      InsertXMLNode(NewXMLElement, Name, NodeText);
    END;

    PROCEDURE FinalizeXMLNode@1100285107();
    BEGIN
      Depth -= 1;
      IF Depth < 0 THEN
        ERROR('Incorrect XML structure');
    END;

    LOCAL PROCEDURE InsertXMLNode@1100285108(VAR NewXMLElement@1100285101 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";Name@1100285100 : Text;NodeText@1100285102 : Text);
    VAR
      XMLNodeTemp@1100285104 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLTempAttribute@1100285103 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      TempElement@1100285105 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN

      NewXMLElement := XMLDoc.CreateElement(Name);

      TempElement := NewXMLElement.OwnerDocument.CreateNode('element', Name, '');
      IF NodeText <> '' THEN
        TempElement.InnerText := NodeText;
      NewXMLElement.AppendChild(TempElement);
      NewXMLElement := TempElement;
      CLEAR(TempElement);

      CurrXMLElement[Depth].AppendChild(NewXMLElement);

      // NewXMLElement := XmlElement.Create(Name, NamespaceFullName, NodeText);
      // if (not CurrXMLElement[Depth].Add(NewXMLElement)) then
      //  error(StrSubstNo('Not possible to insert element %1', NodeText));
    END;

    PROCEDURE ExportXMLDocument@1100285109(VAR SAFTExportLine@1100285100 : Record 11128519;SAFTExportHeader@1100285101 : Record 11128518);
    VAR
      SAFTExportMgt@1100285102 : Codeunit 11020365;
      FileOutStream@1100285103 : OutStream;
    BEGIN
      IF NOT SAFTExportMgt.SaveXMLDocToFolder(SAFTExportHeader, XMLDoc, SAFTExportLine."Line No.") THEN BEGIN
        SAFTExportLine."SAF-T File".CREATEOUTSTREAM(FileOutStream);
        XMLDoc.Save(FileOutStream);
      END;
    END;

    PROCEDURE ExportSAFTExportLineBlobToFile@1100285110(SAFTExportLine@1100285100 : Record 11128519;FilePath@1100285101 : Text);
    VAR
      TempBlob@1100285102 : Record 99008535;
      FileManagement@1100285103 : Codeunit 419;
    BEGIN
      SAFTExportLine.CALCFIELDS("SAF-T File");
      IF NOT SAFTExportLine."SAF-T File".HASVALUE() THEN
        ERROR(NoFileGeneratedErr);
      TempBlob.INIT();
      TempBlob.Blob := SAFTExportLine."SAF-T File";
      FileManagement.BLOBExportToServerFile(TempBlob, FilePath);
    END;

    PROCEDURE GetFilePath@1100285111(ServerDestinationFolder@1100285101 : Text;VATRegistrationNo@1100285102 : Text[20];CreatedDateTime@1100285103 : DateTime;NumberOfFile@1100285104 : Integer;TotalNumberOfFiles@1100285105 : Integer) : Text;
    VAR
      FileName@1100285100 : Text;
    BEGIN
      FileName := STRSUBSTNO('SAF-T Financial_%1_%2_%3_%4.xml', VATRegistrationNo, DateTimeOfFileCreation(CreatedDateTime), NumberOfFile, TotalNumberOfFiles);
      EXIT(ServerDestinationFolder + '\' + FileName);
    END;

    LOCAL PROCEDURE DateTimeOfFileCreation@1100285112(CreatedDateTime@1100285100 : DateTime) : Text;
    BEGIN
      EXIT(FORMAT(CreatedDateTime, 0, '<Year4><Month,2><Day,2><Hours24><Minutes,2><Seconds,2>'));
    END;

    BEGIN
    {
      191003 ORANGO.DL RFC194 implement SAF-T from BC14 CU04 (NAVNO14.04) NorwegianSAFT-extension
    }
    END.
  }
}

