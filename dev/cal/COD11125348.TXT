OBJECT Codeunit 11125348 Approvals Bridge 4PS Construct
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    Permissions=TableData 454=rimd,
                TableData 122=rm,
                TableData 124=rm;
    SingleInstance=Yes;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      NoWorkflowEnabledErr@1100528200 : TextConst 'DEU=Dieser Eintrag wird nicht von dem betreffenden Genehmigungs-Workflow unterstÅtzt.;ENU=This record is not supported by related approval workflow.;NLD=Deze record wordt niet ondersteund door de gerelateerde goedkeuringswerkstroom.';
      WorkflowManagement@1100528201 : Codeunit 1501;
      WorkflowEventHandling4PS@1100528203 : Codeunit 11125350;
      Text003@1100528202 : TextConst 'DEU=Die Tabelle %1 wird nicht fÅr Genehmigung in Document Capture unterstÅtzt.;ENU=The table %1 is not supported for approval in Document Capture.;NLD=De tabel %1 is niet ondersteund voor goedkeuring in Document Capture.';
      WorkflowStepInstance@1100528204 : Record 1504;
      WorkflowStepArgument@1100528205 : Record 1523;
      PendingApprovalMsg@1100528208 : TextConst 'DEU=Eine Genehmigungsanforderung fÅr Beleg %1 wurde gesendet;ENU=An approval request has been sent for Document %1;NLD=Er is een goedkeuringsaanvraag verzonden voor document %1';
      DocStatusChangedMsg@1100528207 : TextConst 'DEU=%1 wurde automatisch genehmigt.;ENU="%1 has been automatically approved. ";NLD="%1 is automatisch goedgekeurd. "';
      Text11012001@1100525000 : TextConst 'DEU=Neues Genehmigungsverfahren starten?;ENU=Start new approval flow?;NLD=Nieuwe goedkeuringsflow starten?';
      CurrentUser@1100528400 : Code[50];

    [Integration]
    PROCEDURE OnSendPostedPurchaseInvoiceForApproval@1100528200(VAR PurchInvHeader@1100528200 : Record 122);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnSendPostedPurchaseCreditMemoForApproval@3(VAR PurchCrMemoHdr@1100528200 : Record 124);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnCancelPostedPurchaseInvoiceApprovalRequest@4(VAR PurchInvHeader@1000 : Record 122);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnCancelPostedPurchaseCreditMemoApprovalRequest@1100528201(VAR PurchCrMemoHdr@1000 : Record 124);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnPostedPurchaseInvoiceForceApproveApprovalRequest@19(VAR PurchInvHeader@1000 : Record 122);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnPostedPurchaseCreditMemoForceApproveApprovalRequest@1100528202(VAR PurchCrMemoHdr@1000 : Record 124);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnSendProjectPurchaseActionForApproval@1100528404(VAR ProjectPurchaseAction@1100528200 : Record 11012026);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnCancelProjectPurchaseActionApprovalRequest@1100528403(VAR ProjectPurchaseAction@1100528200 : Record 11012026);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnSendAdviceOrderLineForApproval@1100528409(VAR AdviceOrderLine@1100528200 : Record 11012055);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnCancelAdviceOrderLineApprovalRequest@1100528406(VAR AdviceOrderLine@1100528200 : Record 11012055);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnSendPurchaseRequisitionForApproval@1100528209(VAR PurchaseRequisition@1100528200 : Record 11229330);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnCancelPurchaseRequisitionApprovalRequest@1100528208(VAR PurchaseRequisition@1100528200 : Record 11229330);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnSendHourAccountingForApproval@1100528400(VAR HourAccounting@1100528200 : Record 11012038);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnCancelHourAccountingApprovalRequest@1100528402(VAR HourAccounting@1100528200 : Record 11012038);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnSendHourAccountingForApprovalAgain@1100528210(VAR HourAccounting@1100528200 : Record 11012038);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnSendSiteMngmntHoursHeaderForApproval@1100528411(VAR SiteMngmntHoursHeader@1100528200 : Record 11012360);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnCancelSiteMngmntHoursHeaderApprovalRequest@1100528410(VAR SiteMngmntHoursHeader@1100528200 : Record 11012360);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnSendSiteMngmntHoursHeaderForApprovalAgain@1100528211(VAR SiteMngmntHoursHeader@1100528200 : Record 11012360);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnApproveAndDelegateRequested@51(VAR ApprovalEntry@1000 : Record 454);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnDelegateWithoutApprovalRequested@52(VAR ApprovalEntry@1000 : Record 454);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnDelegateAndSendBackRequested@53(VAR ApprovalEntry@1000 : Record 454);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnSendBackApprovalRequested@20(VAR ApprovalEntry@1000 : Record 454);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnRejectApprovalRequested@1100528408(VAR ApprovalEntry@1000 : Record 454);
    BEGIN
    END;

    PROCEDURE SendApprovalRequest@8(Variant@1000 : Variant);
    VAR
      RecRef@1100528200 : RecordRef;
    BEGIN
      IF IsApprovalsWorkflowEnabled(Variant) THEN BEGIN
        RecRef.GETTABLE(Variant);
        CASE RecRef.NUMBER OF
          DATABASE::"Purch. Inv. Header":OnSendPostedPurchaseInvoiceForApproval(Variant);
          DATABASE::"Purch. Cr. Memo Hdr.":OnSendPostedPurchaseCreditMemoForApproval(Variant);
          DATABASE::"Hour Accounting":OnSendHourAccountingForApproval(Variant);
        END;
      END;
    END;

    PROCEDURE CancelApprovalRequest@10(Variant@1100528200 : Variant);
    VAR
      RecRef@1100528203 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);
      CASE RecRef.NUMBER OF
        DATABASE::"Purch. Inv. Header":
          BEGIN
            OnCancelPostedPurchaseInvoiceApprovalRequest(Variant);
            IF IsApprovalsWorkflowEnabled(Variant) THEN BEGIN
              IF CONFIRM(Text11012001,FALSE) THEN
                OnSendPostedPurchaseInvoiceForApproval(Variant);
            END;
          END;
        DATABASE::"Purch. Cr. Memo Hdr.":
          BEGIN
            OnCancelPostedPurchaseCreditMemoApprovalRequest(Variant);
            IF IsApprovalsWorkflowEnabled(Variant) THEN BEGIN
              IF CONFIRM(Text11012001,FALSE) THEN
                OnSendPostedPurchaseCreditMemoForApproval(Variant);
            END;
          END;
        DATABASE::"Hour Accounting":OnCancelHourAccountingApprovalRequest(Variant);
      END;
    END;

    PROCEDURE ForceApproval@1100528205(Variant@1100528200 : Variant);
    VAR
      RecRef@1100528201 : RecordRef;
    BEGIN
      IF CheckPostedPurchaseForceApproveApprovalsWorkflowEnabled(Variant) THEN BEGIN
        RecRef.GETTABLE(Variant);
        CASE RecRef.NUMBER OF
          DATABASE::"Purch. Inv. Header":OnPostedPurchaseInvoiceForceApproveApprovalRequest(Variant);
          DATABASE::"Purch. Cr. Memo Hdr.":OnPostedPurchaseCreditMemoForceApproveApprovalRequest(Variant);
        END;
      END;
    END;

    PROCEDURE SendBackApprovalRequest@29(VAR ApprovalEntry@1000 : Record 454);
    BEGIN
      OnSendBackApprovalRequested(ApprovalEntry);
    END;

    PROCEDURE RejectApprovalRequest@1100528407(VAR ApprovalEntry@1000 : Record 454);
    BEGIN
      OnRejectApprovalRequested(ApprovalEntry);
    END;

    PROCEDURE CheckPostedPurchaseApprovalsWorkflowEnabled@77(VAR Variant@1100528204 : Variant) : Boolean;
    BEGIN
      IF NOT IsApprovalsWorkflowEnabled(Variant) THEN
        ERROR(NoWorkflowEnabledErr);
      EXIT(TRUE);
    END;

    PROCEDURE IsApprovalsWorkflowEnabled@59(VAR Variant@1100528200 : Variant) : Boolean;
    VAR
      RecRef@1100528201 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);
      CASE RecRef.NUMBER OF
        DATABASE::"Purch. Inv. Header":
          EXIT(WorkflowManagement.CanExecuteWorkflow(Variant,WorkflowEventHandling4PS.RunWorkflowOnSendPostedPurchaseInvoiceForApprovalCode));
        DATABASE::"Purch. Cr. Memo Hdr.":
          EXIT(WorkflowManagement.CanExecuteWorkflow(Variant,WorkflowEventHandling4PS.RunWorkflowOnSendPostedPurchaseCreditMemoForApprovalCode));
        DATABASE::"Hour Accounting":
          EXIT(WorkflowManagement.CanExecuteWorkflow(Variant,WorkflowEventHandling4PS.RunWorkflowOnSendHourAccountingForApprovalCode));
      END;
      EXIT(FALSE);
    END;

    PROCEDURE CheckPostedPurchaseForceApproveApprovalsWorkflowEnabled@1100528204(VAR Variant@1100528204 : Variant) : Boolean;
    BEGIN
      IF NOT IsPostedPurchaseForceApproveApprovalsWorkflowEnabled(Variant) THEN
        ERROR(NoWorkflowEnabledErr);
      EXIT(TRUE);
    END;

    PROCEDURE IsPostedPurchaseForceApproveApprovalsWorkflowEnabled@1100528203(VAR Variant@1100528200 : Variant) : Boolean;
    VAR
      RecRef@1100528201 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);
      CASE RecRef.NUMBER OF
        DATABASE::"Purch. Inv. Header":
          EXIT(WorkflowManagement.CanExecuteWorkflow(Variant,WorkflowEventHandling4PS.RunWorkflowOnPostedPurchaseInvoiceForceApproveApprovalRequestCode));
        DATABASE::"Purch. Cr. Memo Hdr.":
          EXIT(WorkflowManagement.CanExecuteWorkflow(Variant,WorkflowEventHandling4PS.RunWorkflowOnPostedPurchaseCreditMemoForceApproveApprovalRequestCode));
      END;
      EXIT(FALSE);
    END;

    PROCEDURE CheckHourAccountingApprovalsWorkflowEnabled@1100528405(VAR HourAccounting@1002 : Record 11012038) : Boolean;
    BEGIN
      IF NOT
         WorkflowManagement.CanExecuteWorkflow(HourAccounting, WorkflowEventHandling4PS.RunWorkflowOnSendHourAccountingForApprovalCode)
      THEN
        ERROR(NoWorkflowEnabledErr);

      EXIT(TRUE);
    END;

    PROCEDURE Reject@13(Variant@1100528200 : Variant);
    VAR
      ApprovalManagement4PSConstr@1100528201 : Codeunit 11125349;
      RecRef@1100528204 : RecordRef;
      PurchInvHeader@1100528203 : Record 122;
      PurchCrMemoHdr@1100528202 : Record 124;
    BEGIN
      RecRef.GETTABLE(Variant);
      CASE RecRef.NUMBER OF
        DATABASE::"Purch. Inv. Header":
          BEGIN
            RecRef.SETTABLE(PurchInvHeader);
            ApprovalManagement4PSConstr.RejectPurchInvHeader4PS(PurchInvHeader);
          END;
        DATABASE::"Purch. Cr. Memo Hdr.":
          BEGIN
            RecRef.SETTABLE(PurchCrMemoHdr);
            ApprovalManagement4PSConstr.RejectPurchCrMemoHdr4PS(PurchCrMemoHdr);
          END;
      END;
    END;

    PROCEDURE OnHold@15(Variant@1000 : Variant);
    VAR
      RecRef@1100528200 : RecordRef;
      PurchInvHeader@1100528202 : Record 122;
      PurchCrMemoHdr@1100528201 : Record 124;
      ApprovalManagement4PSConstr@1100528203 : Codeunit 11125349;
    BEGIN
      RecRef.GETTABLE(Variant);
      CASE RecRef.NUMBER OF
        DATABASE::"Purch. Inv. Header":
          BEGIN
            RecRef.SETTABLE(PurchInvHeader);
            ApprovalManagement4PSConstr.SwitchOnHold(DATABASE::"Purch. Inv. Header", 2, PurchInvHeader."No.",TRUE,TRUE);
          END;
        DATABASE::"Purch. Cr. Memo Hdr.":
          BEGIN
            RecRef.SETTABLE(PurchCrMemoHdr);
            ApprovalManagement4PSConstr.SwitchOnHold(DATABASE::"Purch. Cr. Memo Hdr.", 3, PurchCrMemoHdr."No.",TRUE,TRUE);
          END;
      END;
    END;

    PROCEDURE InitializeApprovalEntry4PS@80(RecRef@1000 : RecordRef;VAR ApprovalEntryArgument@1001 : Record 454);
    VAR
      PurchHeader@1003 : Record 38;
      ApprovalAmount@1005 : Decimal;
      ApprovalAmountLCY@1002 : Decimal;
      PurchInvHeader@1100528200 : Record 122;
      PurchCrMemoHdr@1100528201 : Record 124;
    BEGIN
      //Is extend version of Initializeapprovalentry in CodeUnit 6085790 DC Approvals Bridge
      ApprovalEntryArgument.INIT;
      ApprovalEntryArgument."Table ID" := RecRef.NUMBER;
      ApprovalEntryArgument."Record ID to Approve" := RecRef.RECORDID;
      ApprovalEntryArgument."Document Type" := ApprovalEntryArgument."Document Type"::" ";
      ApprovalEntryArgument."Approval Code" := WorkflowStepInstance."Workflow Code";
      ApprovalEntryArgument."Workflow Step Instance ID" := WorkflowStepInstance.ID;

      CASE RecRef.NUMBER OF
        DATABASE::"Purchase Header":
          BEGIN
            RecRef.SETTABLE(PurchHeader);
            CalcPurchDocAmount(PurchHeader,ApprovalAmount,ApprovalAmountLCY);
            ApprovalEntryArgument."Document Type" := PurchHeader."Document Type";
            ApprovalEntryArgument."Document No." := PurchHeader."No.";
            ApprovalEntryArgument."Salespers./Purch. Code" := PurchHeader."Purchaser Code";
            ApprovalEntryArgument.Amount := ApprovalAmount;
            ApprovalEntryArgument."Amount (LCY)" := ApprovalAmountLCY;
            ApprovalEntryArgument."Currency Code" := PurchHeader."Currency Code";
            ApprovalEntryArgument."Due Date Document" := PurchHeader."Due Date";
            ApprovalEntryArgument."Vendor No." := PurchHeader."Buy-from Vendor No.";
          END;
          DATABASE::"Purch. Inv. Header":
          BEGIN
            RecRef.SETTABLE(PurchInvHeader);
            PurchInvHeader.CALCFIELDS(Amount, "Amount (LCY)");
            ApprovalAmount := PurchInvHeader.Amount;
            ApprovalAmountLCY := PurchInvHeader."Amount (LCY)";
            ApprovalEntryArgument."Document Type" := ApprovalEntryArgument."Document Type"::Invoice;
            ApprovalEntryArgument."Document No." := PurchInvHeader."No.";
            ApprovalEntryArgument."Salespers./Purch. Code" := PurchInvHeader."Purchaser Code";
            ApprovalEntryArgument.Amount := ApprovalAmount;
            ApprovalEntryArgument."Amount (LCY)" := ApprovalAmountLCY;
            ApprovalEntryArgument."Currency Code" := PurchInvHeader."Currency Code";
            ApprovalEntryArgument."Due Date Document" := PurchInvHeader."Due Date";
            ApprovalEntryArgument."Vendor No." := PurchInvHeader."Buy-from Vendor No.";
          END;
          DATABASE::"Purch. Cr. Memo Hdr.":
          BEGIN
            RecRef.SETTABLE(PurchCrMemoHdr);
            PurchCrMemoHdr.CALCFIELDS(Amount, "Amount (LCY)");
            ApprovalAmount := PurchCrMemoHdr.Amount;
            ApprovalAmountLCY := PurchCrMemoHdr."Amount (LCY)";
            ApprovalEntryArgument."Document Type" := ApprovalEntryArgument."Document Type"::"Credit Memo";
            ApprovalEntryArgument."Document No." := PurchCrMemoHdr."No.";
            ApprovalEntryArgument."Salespers./Purch. Code" := PurchCrMemoHdr."Purchaser Code";
            ApprovalEntryArgument.Amount := ApprovalAmount;
            ApprovalEntryArgument."Amount (LCY)" := ApprovalAmountLCY;
            ApprovalEntryArgument."Currency Code" := PurchCrMemoHdr."Currency Code";
            ApprovalEntryArgument."Due Date Document" := PurchCrMemoHdr."Due Date";
            ApprovalEntryArgument."Vendor No." := PurchCrMemoHdr."Buy-from Vendor No.";
          END;
        ELSE
          ERROR(Text003);
      END;

      ApprovalEntryArgument.SETRANGE("Workflow Step Instance ID",WorkflowStepInstance.ID);
    END;

    PROCEDURE CalcPurchDocAmount@24(PurchHeader@1002 : Record 38;VAR ApprovalAmount@1001 : Decimal;VAR ApprovalAmountLCY@1000 : Decimal);
    VAR
      TempPurchLine@1009 : TEMPORARY Record 39;
      TotalPurchLine@1008 : Record 39;
      TotalPurchLineLCY@1007 : Record 39;
      PurchPost@1006 : Codeunit 90;
      TempAmount@1005 : Decimal;
      VAtText@1004 : Text[30];
    BEGIN
      PurchHeader.CalcInvDiscForHeader;
      PurchPost.GetPurchLines(PurchHeader,TempPurchLine,0);
      CLEAR(PurchPost);
      PurchPost.SumPurchLinesTemp(
        PurchHeader,TempPurchLine,0,TotalPurchLine,TotalPurchLineLCY,
        TempAmount,VAtText);
      ApprovalAmount := TotalPurchLine.Amount;
      ApprovalAmountLCY := TotalPurchLineLCY.Amount;
    END;

    PROCEDURE InformUserOnStatusChange@22(VAR RecRef@1000 : RecordRef);
    BEGIN
      IF NOT GUIALLOWED THEN
        EXIT;

      IF NOT WorkflowStepArgument."Show Confirmation Message" THEN
        EXIT;

      ShowPurchApprovalStatus(RecRef);
    END;

    LOCAL PROCEDURE ShowPurchApprovalStatus@9(Variant@1000 : Variant);
    VAR
      RecRef@1100528200 : RecordRef;
      PurchInvHeader@1100528201 : Record 122;
      PurchCrMemoHdr@1100528202 : Record 124;
    BEGIN
      RecRef.GETTABLE(Variant);
      CASE RecRef.NUMBER OF
        DATABASE::"Purch. Inv. Header":
          BEGIN
            RecRef.SETTABLE(PurchInvHeader);
            PurchInvHeader.GET;
            IF PurchInvHeader."On Hold" <> '' THEN
              MESSAGE(PendingApprovalMsg, PurchInvHeader."No.")
            ELSE
              MESSAGE(DocStatusChangedMsg, PurchInvHeader."No.");
          END;
        DATABASE::"Purch. Cr. Memo Hdr.":
          BEGIN
            RecRef.SETTABLE(PurchCrMemoHdr);
            PurchCrMemoHdr.GET;
            IF PurchCrMemoHdr."On Hold" <> '' THEN
              MESSAGE(PendingApprovalMsg, PurchCrMemoHdr."No.")
            ELSE
              MESSAGE(DocStatusChangedMsg, PurchCrMemoHdr."No.");
          END;
      END;
    END;

    [EventSubscriber(Codeunit,11125351,OnBeforeExecuteResponseStepInstance,"",Skip)]
    PROCEDURE OnNewWorkflowStepInstance@2(VAR NewWorkflowStepInstance@1100525000 : Record 1504);
    BEGIN
      WorkflowStepInstance := NewWorkflowStepInstance;
      WorkflowStepArgument.GET(WorkflowStepInstance.Argument);
    END;

    [EventSubscriber(Codeunit,90,OnAfterPostBeforeCommitPurchaseDoc,"",Skip)]
    LOCAL PROCEDURE OnAfterPostBeforeCommitPurchaseDoc@1100528207(VAR PurchaseHeader@1100528200 : Record 38;VAR GenJnlPostLine@1100528201 : Codeunit 12;PurchRcpHdrNo@1100528202 : Code[20];RetShptHdrNo@1100528203 : Code[20];PurchInvHdrNo@1100528204 : Code[20];PurchCrMemoHdrNo@1100528205 : Code[20]);
    VAR
      PurchInvHeader@1100528207 : Record 122;
      PurchCrMemoHdr@1100528206 : Record 124;
    BEGIN
      CASE PurchaseHeader."Document Type" OF
        PurchaseHeader."Document Type"::Invoice:
          BEGIN
            IF PurchInvHeader.GET(PurchInvHdrNo) THEN BEGIN
              SendApprovalRequest(PurchInvHeader);
              PurchInvHeader."Approval Code" := '';
              PurchInvHeader.MODIFY;
            END;
          END;
        PurchaseHeader."Document Type"::"Credit Memo":
          BEGIN
            IF PurchCrMemoHdr.GET(PurchCrMemoHdrNo) THEN BEGIN
              SendApprovalRequest(PurchCrMemoHdr);
              PurchCrMemoHdr."Approval Code" := '';
              PurchCrMemoHdr.MODIFY;
            END;
          END;
      END;
    END;

    [EventSubscriber(Table,11012038,OnAfterReleaseHourAccounting,"",Skip)]
    LOCAL PROCEDURE OnAfterReleaseHourAccounting@1100528401(VAR HourAccounting@1100528400 : Record 11012038);
    BEGIN
    END;

    PROCEDURE FilterApprovalEntry4PS@1100528206(lTableID@1100527650 : Integer;lDocType@1100528200 : Integer;lDocNo@1100528201 : Code[20];VAR ApprovalEntry@1000000001 : Record 454;OnlyCurrUser@161024012 : Boolean);
    VAR
      ApprovalManagement4PSConstr@1100528202 : Codeunit 11125349;
    BEGIN
      ApprovalManagement4PSConstr.FilterApprovalEntryOpen(lTableID,lDocType,lDocNo,ApprovalEntry,OnlyCurrUser);
    END;

    PROCEDURE OrderByTableIDDocTypeAndSeq@41(VAR ApprovalEntry@1000 : Record 454;FilterWorkflowInstance@1001 : Boolean);
    BEGIN
      ApprovalEntry.SETCURRENTKEY("Table ID","Document Type","Document No.","Sequence No.","Record ID to Approve");
      IF FilterWorkflowInstance THEN BEGIN
        IF NOT ISNULLGUID(ApprovalEntry."Workflow Step Instance ID") THEN
          ApprovalEntry.SETRANGE("Workflow Step Instance ID",ApprovalEntry."Workflow Step Instance ID")
        ELSE
          ApprovalEntry.SETRANGE("Workflow Step Instance ID",WorkflowStepInstance.ID);
      END;
    END;

    PROCEDURE InsertApprovalEntry@36(VAR ApprovalEntry@1000 : Record 454);
    BEGIN
      ApprovalEntry."Entry No." := 0;
      ApprovalEntry.INSERT;
    END;

    PROCEDURE DeleteApprovalEntry@44(TableID@1000 : Integer;DocType@1001 : Integer;DocNo@1002 : Code[20]);
    VAR
      ApprovalsMgmt@1003 : Codeunit 1535;
    BEGIN
    END;

    PROCEDURE GetLastApprovalEntrySequenceNo@16(ApprovalEntryArgument@1000 : Record 454) : Integer;
    VAR
      ApprovalEntry@1001 : Record 454;
    BEGIN
      WITH ApprovalEntry DO BEGIN
        SETCURRENTKEY("Record ID to Approve","Workflow Step Instance ID","Sequence No.");
        SETRANGE("Table ID",ApprovalEntryArgument."Table ID");
        SETRANGE("Record ID to Approve",ApprovalEntryArgument."Record ID to Approve");
        SETRANGE("Workflow Step Instance ID",ApprovalEntryArgument."Workflow Step Instance ID");
        IF FINDLAST THEN
          EXIT("Sequence No.");
      END;
      EXIT(0);
    END;

    PROCEDURE GetApprovalType@5() : Integer;
    VAR
      ApprovalEntry@1000 : Record 454;
    BEGIN
      CASE WorkflowStepArgument."Approver Type" OF
        WorkflowStepArgument."Approver Type"::"Salesperson/Purchaser":
          EXIT(ApprovalEntry."Approval Type"::"Sales Pers./Purchaser");
        WorkflowStepArgument."Approver Type"::"Advanced Approver":
          EXIT(ApprovalEntry."Approval Type"::"Advanced Approver");
        WorkflowStepArgument."Approver Type"::Approver:
          EXIT(ApprovalEntry."Approval Type"::Approver);
        WorkflowStepArgument."Approver Type"::"Workflow User Group":
          EXIT(ApprovalEntry."Approval Type"::"Workflow User Group");
        WorkflowStepArgument."Approver Type"::"Consent Rules":
          EXIT(ApprovalEntry."Approval Type"::"Consent Rules");
      END;
    END;

    PROCEDURE CreateApprovalRequestsStandard@6(VAR RecRef@1000 : RecordRef) : Boolean;
    VAR
      ApprovalsMgmt@1001 : Codeunit 1535;
    BEGIN
      ApprovalsMgmt.CreateApprovalRequests(RecRef,WorkflowStepInstance);
      EXIT(TRUE);
    END;

    PROCEDURE SetCurrentUser@56(CurrentUserIn@1000 : Code[50]);
    BEGIN
      CurrentUser := CurrentUserIn;
    END;

    PROCEDURE GetCurrentUser@55() : Code[50];
    BEGIN
      IF CurrentUser <> '' THEN
        EXIT(CurrentUser)
      ELSE
        EXIT(USERID);
    END;

    PROCEDURE GetApprovalDueDate@23() : Date;
    BEGIN
      EXIT(CALCDATE(WorkflowStepArgument."Due Date Formula",TODAY));
    END;

    PROCEDURE GetLimitType@81() : Integer;
    VAR
      ApprovalEntry@1000 : Record 454;
    BEGIN
      CASE WorkflowStepArgument."Approver Limit Type" OF
        WorkflowStepArgument."Approver Limit Type"::"Approver Chain",
        WorkflowStepArgument."Approver Limit Type"::"First Qualified Approver":
          EXIT(ApprovalEntry."Limit Type"::"Approval Limits");
        WorkflowStepArgument."Approver Limit Type"::"Direct Approver":
          EXIT(ApprovalEntry."Limit Type"::"No Limits");
      END;

      IF ApprovalEntry."Approval Type" = ApprovalEntry."Approval Type"::"Workflow User Group" THEN
        EXIT(ApprovalEntry."Limit Type"::"No Limits");
    END;

    PROCEDURE FinishApprovalEntry@37(VAR ApprovalEntry@1000 : Record 454;ApprovalEntryArgument@1001 : Record 454);
    BEGIN
      WITH ApprovalEntry DO BEGIN
        CASE WorkflowStepArgument."Delegate After" OF
        WorkflowStepArgument."Delegate After"::Never:
          EVALUATE("Delegation Date Formula",'');
        WorkflowStepArgument."Delegate After"::"1 day":
          EVALUATE("Delegation Date Formula",'<1D>');
        WorkflowStepArgument."Delegate After"::"2 days":
          EVALUATE("Delegation Date Formula",'<2D>');
        WorkflowStepArgument."Delegate After"::"5 days":
          EVALUATE("Delegation Date Formula",'<5D>');
        ELSE
          EVALUATE("Delegation Date Formula",'');
        END;

        "Record ID to Approve" := ApprovalEntryArgument."Record ID to Approve";
        "Workflow Step Instance ID" := ApprovalEntryArgument."Workflow Step Instance ID";
      END;
    END;

    PROCEDURE CheckWorkFlowActive@1100525000(WorkflowStepRecID@1100525000 : RecordID) : Boolean;
    VAR
      WorkflowStepInstance@1100525004 : Record 1504;
      WorkflowStepInstance2@1100525005 : Record 1504;
      SelectionFilterManagement@1100525003 : Codeunit 46;
      InstanceID@1100525002 : GUID;
      Filter@1100525001 : Text;
    BEGIN
      WorkflowStepInstance.SETRANGE("Record ID",WorkflowStepRecID);
      IF NOT WorkflowStepInstance.FINDSET THEN
        EXIT(FALSE);

      REPEAT
        IF WorkflowStepInstance.ID <> InstanceID THEN
          WorkflowStepInstance.MARK(TRUE);
        InstanceID := WorkflowStepInstance.ID;
      UNTIL WorkflowStepInstance.NEXT = 0;

      WorkflowStepInstance.MARKEDONLY(TRUE);
      Filter := SelectionFilterManagement.GetSelectionFilterForWorkflowStepInstance(WorkflowStepInstance);
      IF Filter = '' THEN
        EXIT(FALSE);

      WorkflowStepInstance2.RESET;
      WorkflowStepInstance2.SETRANGE("Record ID",WorkflowStepRecID);
      WorkflowStepInstance2.SETFILTER("Original Workflow Step ID",Filter);
      EXIT(WorkflowStepInstance2.FINDSET);
    END;

    BEGIN
    END.
  }
}

