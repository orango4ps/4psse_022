OBJECT Codeunit 6227 Signed XML Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    [External]
    PROCEDURE CheckXmlStreamSignature@1(XmlStream@1000 : InStream;PublicKey@1001 : Text) : Boolean;
    VAR
      XmlDocument@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      XmlDocument := XmlDocument.XmlDocument;
      XmlDocument.Load(XmlStream);
      EXIT(CheckXmlSignature(XmlDocument,PublicKey));
    END;

    [External]
    PROCEDURE CheckXmlTextSignature@2(XmlText@1000 : Text;PublicKey@1001 : Text) : Boolean;
    VAR
      XmlDocument@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      XmlDocument := XmlDocument.XmlDocument;
      XmlDocument.LoadXml(XmlText);
      EXIT(CheckXmlSignature(XmlDocument,PublicKey));
    END;

    [Internal]
    PROCEDURE CheckXmlSignature@3(XmlDocument@1004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";PublicKey@1005 : Text) : Boolean;
    VAR
      Convert@1001 : DotNet "'mscorlib'.System.Convert";
      RSAKey@1002 : DotNet "'mscorlib'.System.Security.Cryptography.RSACryptoServiceProvider";
      SignedXml@1003 : DotNet "'System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Security.Cryptography.Xml.SignedXml";
      SignatureNode@1007 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XmlNamespaceManager@1006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
    BEGIN
      XmlNamespaceManager := XmlNamespaceManager.XmlNamespaceManager(XmlDocument.NameTable);
      XmlNamespaceManager.AddNamespace('xmlsig','http://www.w3.org/2000/09/xmldsig#');

      SignatureNode := XmlDocument.SelectSingleNode('//xmlsig:Signature',XmlNamespaceManager);
      IF ISNULL(SignatureNode) THEN
        EXIT(FALSE);

      // Import key
      RSAKey := RSAKey.RSACryptoServiceProvider;
      RSAKey.ImportCspBlob(Convert.FromBase64String(PublicKey));

      SignedXml := SignedXml.SignedXml(XmlDocument);
      SignedXml.LoadXml(SignatureNode);
      EXIT(SignedXml.CheckSignature(RSAKey));
    END;

    [External]
    PROCEDURE SignXmlText@4(XmlText@1000 : Text;PrivateKey@1001 : Text) : Text;
    VAR
      XmlDocument@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      StringWiter@1003 : DotNet "'mscorlib'.System.IO.StringWriter";
      XmlWriter@1004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlTextWriter";
    BEGIN
      XmlDocument := XmlDocument.XmlDocument;
      XmlDocument.LoadXml(XmlText);
      SignXmlDocument(XmlDocument,PrivateKey);

      StringWiter := StringWiter.StringWriter;
      XmlWriter := XmlWriter.XmlTextWriter(StringWiter);
      XmlDocument.WriteTo(XmlWriter);

      EXIT(StringWiter.ToString);
    END;

    [Internal]
    PROCEDURE SignXmlDocument@5(XmlDocument@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";PrivateKey@1000 : Text);
    VAR
      Convert@1004 : DotNet "'mscorlib'.System.Convert";
      RSAKey@1003 : DotNet "'mscorlib'.System.Security.Cryptography.RSACryptoServiceProvider";
      SignedXml@1002 : DotNet "'System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Security.Cryptography.Xml.SignedXml";
      DocReference@1005 : DotNet "'System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Security.Cryptography.Xml.Reference";
      Env@1006 : DotNet "'System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform";
    BEGIN
      // Import key
      RSAKey := RSAKey.RSACryptoServiceProvider;
      RSAKey.ImportCspBlob(Convert.FromBase64String(PrivateKey));

      SignedXml := SignedXml.SignedXml(XmlDocument);
      SignedXml.SigningKey := RSAKey;

      DocReference := DocReference.Reference('');
      DocReference.AddTransform(Env.XmlDsigEnvelopedSignatureTransform);
      SignedXml.AddReference(DocReference);
      SignedXml.ComputeSignature;
      XmlDocument.DocumentElement.AppendChild(XmlDocument.ImportNode(SignedXml.GetXml,TRUE));
    END;

    BEGIN
    END.
  }
}

