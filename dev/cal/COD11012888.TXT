OBJECT Codeunit 11012888 Import KPD-XML into SOBudget
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      UnitRec@1100409014 : Record 204;
      SpecialUnitRec@1100409015 : Record 11012392;
      XMLDOMMgt@1100485001 : Codeunit 11020220;
      XMLFormat@1100525011 : Codeunit 11020221;
      ServiceOrderNo@1100525000 : Code[20];
      Text013@1210190000 : TextConst 'DEU=%1 %2 ist gesperrt;ENU=%1 %2 is blocked;NLD=%1 %2 is geblokkeerd;SVE=%1 %2 „r sp„rrad';
      Text999@1100525012 : TextConst 'DEU=%1 %2 nicht vorhanden;ENU=%1 %2 not present;NLD=%1 %2 niet aanwezig;NOR=%1 %2 finnes ikke;SVE=%1 %2 finns inte';
      CostTypeLaborList@1100409009 : Text[1024];
      CostTypeMaterialList@1100409010 : Text[1024];
      CostTypeSubcontractingList@1100409011 : Text[1024];
      CostTypePlantList@1100409012 : Text[1024];
      DeriveCostTypeFrom@1100525015 : 'CostTypeKPD,CostObjectNav';
      DimValRec@1100525016 : Record 349;
      DimMgt@1100525017 : Codeunit 408;
      iProductType@1100529900 : Text[30];
      FillCostObjectWith@1100529901 : 'Sort Code,Free Code 1,Free Code 2';

    PROCEDURE ProcessFile@1100485001(VAR ITempBlob@1100485002 : TEMPORARY Record 99008535);
    VAR
      XMLDoc@1100485000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      RootNode@1100529902 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      CostTypeNodes@1100529901 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      TenderParagraphNodes@1100529900 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
    BEGIN
      XMLDoc := XMLDoc.XmlDocument;
      XMLDOMMgt.LoadXMLFromBlob(XMLDoc, ITempBlob, TRUE);
      RootNode := XMLDoc.DocumentElement;

      XMLDOMMgt.FindNodes(RootNode,'Kostensoorten',CostTypeNodes);
      SaveCostTypeForProcessing(CostTypeNodes);

      XMLDOMMgt.FindNodes(RootNode,'Bestekposten',TenderParagraphNodes);
      ProcessTenderParagraphNodes(TenderParagraphNodes,'');
    END;

    LOCAL PROCEDURE ProcessTenderParagraphNodes@1100529903(TenderParagraphNodes@1100529901 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";Ident@1100529904 : Text);
    VAR
      TenderParagraphNode@1100529900 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      NodeSequence@1100529902 : Integer;
    BEGIN
      IF ISNULL(TenderParagraphNodes) THEN
        EXIT;
      FOR NodeSequence := 0 TO (TenderParagraphNodes.Count - 1) DO BEGIN
        TenderParagraphNode := TenderParagraphNodes.Item(NodeSequence);
        ProcessTenderParagraphNode(TenderParagraphNode,Ident);
      END;
    END;

    LOCAL PROCEDURE ProcessTenderParagraphNode@1100525000(TenderParagraphNode@1100525001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";Ident@1100529903 : Text);
    VAR
      TenderParagraphNodes@1100529900 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      TenderParagraphPartNodes@1100529901 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      ServiceOrderBudgetLine@1100529902 : Record 11012875;
    BEGIN
      ServiceOrderBudgetLine.INIT;
      ServiceOrderBudgetLine.VALIDATE("Service Order No.", ServiceOrderNo);
      ServiceOrderBudgetLine."Line No." := NextBudgetLineNo;
      ServiceOrderBudgetLine."Cost Type" := ServiceOrderBudgetLine."Cost Type"::Sundry;
      ServiceOrderBudgetLine.Description := COPYSTR(Ident+XMLDOMMgt.FindNodeText(TenderParagraphNode,'Romptekst'),1,MAXSTRLEN(ServiceOrderBudgetLine.Description));
      ServiceOrderBudgetLine.Quantity := 0;
      ServiceOrderBudgetLine."Unit of Measure" := '';
      ServiceOrderBudgetLine."Unit of Time" := '';
      ServiceOrderBudgetLine.Norm := 0;
      ServiceOrderBudgetLine.Rate := 0;
      ServiceOrderBudgetLine."Rate Code" := '';
      ServiceOrderBudgetLine.Price := 0;
      ServiceOrderBudgetLine."Production Rate" := 0;
      ServiceOrderBudgetLine."Tender Paragraph" := COPYSTR(XMLDOMMgt.FindNodeText(TenderParagraphNode,'Code'),1,MAXSTRLEN(ServiceOrderBudgetLine."Tender Paragraph"));
      ServiceOrderBudgetLine.INSERT;

      XMLDOMMgt.FindNodes(TenderParagraphNode,'Bestekposten',TenderParagraphNodes);
      ProcessTenderParagraphNodes(TenderParagraphNodes,Ident+'-.');

      XMLDOMMgt.FindNodes(TenderParagraphNode,'Deelposten',TenderParagraphPartNodes);
      ProcessTenderParagraphPartNodes(TenderParagraphPartNodes,Ident);
    END;

    LOCAL PROCEDURE ProcessTenderParagraphPartNodes@1100529904(TenderParagraphPartNodes@1100529901 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";Ident@1100529903 : Text);
    VAR
      TenderParagraphPartNode@1100529900 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      NodeSequence@1100529902 : Integer;
    BEGIN
      IF ISNULL(TenderParagraphPartNodes) THEN
        EXIT;
      FOR NodeSequence := 0 TO (TenderParagraphPartNodes.Count - 1) DO BEGIN
        TenderParagraphPartNode := TenderParagraphPartNodes.Item(NodeSequence);
        ProcessTenderParagraphPartNode(TenderParagraphPartNode,Ident+'-.');
      END;
    END;

    LOCAL PROCEDURE ProcessTenderParagraphPartNode@1100409006(TenderParagraphPartNode@1100525001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";Ident@1100529903 : Text);
    VAR
      TenderParagraphPartNodes@1100529900 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      TenderParagraphRateNodes@1100529901 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      ServiceOrderBudgetLine@1100529902 : Record 11012875;
    BEGIN
      ServiceOrderBudgetLine.INIT;
      ServiceOrderBudgetLine.VALIDATE("Service Order No.", ServiceOrderNo);
      ServiceOrderBudgetLine."Line No." := NextBudgetLineNo;
      ServiceOrderBudgetLine."Cost Type" := ServiceOrderBudgetLine."Cost Type"::Sundry;
      ServiceOrderBudgetLine.Description := COPYSTR(Ident+XMLDOMMgt.FindNodeText(TenderParagraphPartNode,'Omschrijving'),1,MAXSTRLEN(ServiceOrderBudgetLine.Description));
      ServiceOrderBudgetLine.Quantity := 0;
      ServiceOrderBudgetLine."Unit of Measure" := '';
      ServiceOrderBudgetLine."Unit of Time" := '';
      ServiceOrderBudgetLine.Norm := 0;
      ServiceOrderBudgetLine.Rate := 0;
      ServiceOrderBudgetLine."Rate Code" := '';
      ServiceOrderBudgetLine.Price := 0;
      ServiceOrderBudgetLine."Production Rate" := 0;
      ServiceOrderBudgetLine."Tender Paragraph" := COPYSTR(XMLDOMMgt.FindNodeText(TenderParagraphPartNode,'Code'),1,MAXSTRLEN(ServiceOrderBudgetLine."Tender Paragraph"));
      ServiceOrderBudgetLine.INSERT;

      XMLDOMMgt.FindNodes(TenderParagraphPartNode,'Deelposten',TenderParagraphPartNodes);
      ProcessTenderParagraphPartNodes(TenderParagraphPartNodes,Ident);

      XMLDOMMgt.FindNodes(TenderParagraphPartNode,'Tarieven',TenderParagraphRateNodes);
      ProcessTenderParagraphRateNodes(TenderParagraphRateNodes, FALSE, Ident, FALSE, ServiceOrderBudgetLine."Tender Paragraph");
    END;

    LOCAL PROCEDURE ProcessTenderParagraphRateNodes@1100529905(TenderParagraphRateNodes@1100529901 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";DisableTimeQuantity@1100529903 : Boolean;Ident@1100529904 : Text;PriceInfoFound@1100529905 : Boolean;ParentTenderParagraph@1100529906 : Text[10]);
    VAR
      TenderParagraphRateNode@1100529900 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      NodeSequence@1100529902 : Integer;
    BEGIN
      IF ISNULL(TenderParagraphRateNodes) THEN
        EXIT;
      FOR NodeSequence := 0 TO (TenderParagraphRateNodes.Count - 1) DO BEGIN
        TenderParagraphRateNode := TenderParagraphRateNodes.Item(NodeSequence);
        ProcessTenderParagraphRateNode(TenderParagraphRateNode, DisableTimeQuantity,Ident+'-.',PriceInfoFound, ParentTenderParagraph);
      END;
    END;

    LOCAL PROCEDURE ProcessTenderParagraphRateNode@1100525001(TenderParagraphRateNode@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";DisableTimeQuantity@1100529902 : Boolean;Ident@1100529904 : Text;PriceInfoFound@1100529905 : Boolean;ParentTenderParagraph@1100529906 : Text[10]);
    VAR
      Norm@1100525003 : Decimal;
      CostObject@1100525001 : Code[20];
      ArticleCode@1100529600 : Code[20];
      CostTypeCode@1100529900 : Text[30];
      TenderParagraphRateNodes@1100529901 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      ServiceOrderBudgetLine@1100529903 : Record 11012875;
    BEGIN
      CASE FillCostObjectWith OF
        FillCostObjectWith::"Sort Code":
          CostObject := COPYSTR(XMLDOMMgt.FindNodeText(TenderParagraphRateNode,'Sorteercode'),1,MAXSTRLEN(ServiceOrderBudgetLine."Cost Object"));
        FillCostObjectWith::"Free Code 1":
          CostObject := COPYSTR(XMLDOMMgt.FindNodeText(TenderParagraphRateNode,'VrijeCode1'),1,MAXSTRLEN(ServiceOrderBudgetLine."Cost Object"));
        FillCostObjectWith::"Free Code 2":
          CostObject := COPYSTR(XMLDOMMgt.FindNodeText(TenderParagraphRateNode,'VrijeCode2'),1,MAXSTRLEN(ServiceOrderBudgetLine."Cost Object"));
      END;

      ArticleCode := COPYSTR(XMLDOMMgt.FindNodeText(TenderParagraphRateNode, 'Artikelcode'), 1, MAXSTRLEN(ArticleCode));
      ServiceOrderBudgetLine.INIT;
      ServiceOrderBudgetLine.VALIDATE("Service Order No.", ServiceOrderNo);
      ServiceOrderBudgetLine."Line No." := NextBudgetLineNo;
      ServiceOrderBudgetLine.Description := COPYSTR(Ident+XMLDOMMgt.FindNodeText(TenderParagraphRateNode,'Omschrijving'),1,MAXSTRLEN(ServiceOrderBudgetLine.Description));
      XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(TenderParagraphRateNode,'Kosten'),ServiceOrderBudgetLine.Quantity);
      ServiceOrderBudgetLine."Unit of Measure" := COPYSTR(XMLDOMMgt.FindNodeText(TenderParagraphRateNode,'Eenheid'),1,MAXSTRLEN(ServiceOrderBudgetLine."Unit of Measure"));
      ServiceOrderBudgetLine."Unit of Time" := '';
      ServiceOrderBudgetLine.Norm := 0;
      ServiceOrderBudgetLine.Rate := 0;
      ServiceOrderBudgetLine."Rate Code" := '';
      ServiceOrderBudgetLine."Production Rate" := 0;

      ServiceOrderBudgetLine."Tender Paragraph" := ParentTenderParagraph;

      WITH ServiceOrderBudgetLine DO BEGIN
        CheckUnitOfMeasure(ServiceOrderBudgetLine);

        "Cost Object" := CostObject;  //db, 18-04-13
        CheckCostObject(ServiceOrderBudgetLine);

        CostTypeCode := COPYSTR(XMLDOMMgt.FindNodeText(TenderParagraphRateNode,'Code'),1,2);
        IF CodeInFilter(CostTypeCode, CostTypeLaborList) THEN
          "Cost Type" := "Cost Type"::Labor
        ELSE
          IF CodeInFilter(CostTypeCode, CostTypeMaterialList) THEN
            "Cost Type" := "Cost Type"::Material
          ELSE
            IF CodeInFilter(CostTypeCode, CostTypeSubcontractingList) THEN
              "Cost Type" := "Cost Type"::Subcontracting
            ELSE
              IF CodeInFilter(CostTypeCode, CostTypePlantList) THEN
                "Cost Type" := "Cost Type"::Plant
              ELSE
                "Cost Type" := "Cost Type"::Sundry;

        IF DeriveCostTypeFrom = DeriveCostTypeFrom::CostObjectNav THEN BEGIN
          IF DimValRec.Code = '' THEN
            "Cost Type" := "Cost Type"::Sundry
          ELSE
            "Cost Type":= DimValRec."Cost Type";
        END;

        IF "Cost Type" = "Cost Type"::Labor THEN BEGIN
          iProductType := COPYSTR(XMLDOMMgt.FindNodeText(TenderParagraphRateNode,'Productie.Type'),1,MAXSTRLEN(iProductType));
          IF iProductType = 'Productie' THEN BEGIN
            XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(TenderParagraphRateNode,'Productie.Inclusief'),"Production Rate");
            IF "Production Rate" <> 0 THEN
              Norm := 1 / "Production Rate"
            ELSE
              Norm := 1;
          END ELSE BEGIN
            XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(TenderParagraphRateNode,'Productie.Inclusief'),Norm);
            IF Norm <> 0 THEN
              "Production Rate" := 1 / Norm
            ELSE
              "Production Rate" := 0;
          END;
          IF SpecialUnitRec.GET("Unit of Measure") THEN BEGIN
            "Production Rate" := 1;
            Norm := 1;
          END;
          Norm := ROUND(Norm, 0.00001);
          Quantity := ROUND(Hours * "Production Rate", 0.00001);
          XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(TenderParagraphRateNode,'Kostprijs.Inclusief'),Rate);
        END ELSE BEGIN
          XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(TenderParagraphRateNode,'Hoeveelheid'),Quantity);
          XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(TenderParagraphRateNode,'Inzet'),"Time Quantity");
        END;
        XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(TenderParagraphRateNode,'Kostprijs.Inclusief'),Price);

        IF ArticleCode <> '' THEN
          CASE ServiceOrderBudgetLine."Cost Type" OF
            ServiceOrderBudgetLine."Cost Type"::Labor:
              BEGIN
                ServiceOrderBudgetLine."Rate Code" := COPYSTR(ArticleCode, 1, MAXSTRLEN(ServiceOrderBudgetLine."Rate Code"));
                CheckRateCode(ServiceOrderBudgetLine);
              END;
            ServiceOrderBudgetLine."Cost Type"::Material:
              BEGIN
                ServiceOrderBudgetLine."Item No." :=  COPYSTR(ArticleCode, 1, MAXSTRLEN(ServiceOrderBudgetLine."Item No."));
                CheckItem(ServiceOrderBudgetLine);
              END;
            ServiceOrderBudgetLine."Cost Type"::Subcontracting:
              BEGIN
                ServiceOrderBudgetLine."Subcontracting Activity" := COPYSTR(ArticleCode, 1, MAXSTRLEN(ServiceOrderBudgetLine."Subcontracting Activity"));
                CheckSubcontractingActivity(ServiceOrderBudgetLine);
              END;
            ServiceOrderBudgetLine."Cost Type"::Plant:
              BEGIN
                ServiceOrderBudgetLine."Plant Type" := COPYSTR(ArticleCode, 1, MAXSTRLEN(ServiceOrderBudgetLine."Plant Type"));
                CheckPlantType(ServiceOrderBudgetLine);
              END;
          END;

        IF DisableTimeQuantity THEN  //C028776
          "Time Quantity" := 0;

      END;
      IF (ServiceOrderBudgetLine."Cost Object" <> '') AND (ServiceOrderBudgetLine.Price <> 0) AND (NOT PriceInfoFound) THEN BEGIN
        EVALUATE(ServiceOrderBudgetLine.Amount, XMLDOMMgt.FindNodeText(TenderParagraphRateNode,'Kosten'), 9);
        PriceInfoFound := TRUE;
        IF ServiceOrderBudgetLine."Cost Type" = ServiceOrderBudgetLine."Cost Type"::Labor THEN
          XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(TenderParagraphRateNode,'Hoeveelheid'),ServiceOrderBudgetLine.Hours);
      END;
      ServiceOrderBudgetLine.INSERT;

      XMLDOMMgt.FindNodes(TenderParagraphRateNode,'Tarieven',TenderParagraphRateNodes);
      ProcessTenderParagraphRateNodes(TenderParagraphRateNodes, TRUE, Ident, PriceInfoFound, ParentTenderParagraph);
    END;

    PROCEDURE InitCodeunit@1(lServiceOrderNo@11012000 : Code[20];lFillCostObjectWith@1100525001 : Option;lDeriveCostTypeFrom@1100525003 : 'CostTypeKPD,CostObjectNav');
    BEGIN
      ServiceOrderNo := lServiceOrderNo;
      FillCostObjectWith := lFillCostObjectWith;
      DeriveCostTypeFrom := lDeriveCostTypeFrom;
    END;

    LOCAL PROCEDURE DefaultCostComponent@1100525006(lvCostObject@1100485000 : Code[20];lvProject@1100485001 : Code[20]) lvCostComponent : Code[20];
    BEGIN
      lvCostComponent := '';
      IF lvCostObject <> '' THEN BEGIN
        DimMgt.GetDimValueRec(2, lvCostObject, DimValRec, FALSE, lvProject);
        IF NOT DimValRec.Blocked THEN
          lvCostComponent := DimValRec."Cost Component";
      END;
    END;

    LOCAL PROCEDURE CheckCostObject@1210190007(ServiceOrderBudgetLine@1100409000 : Record 11012875) Exist : Boolean;
    BEGIN
      WITH ServiceOrderBudgetLine DO BEGIN
        DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, FALSE, '');
        IF DimValRec.Code = '' THEN BEGIN
          StoreMessage(Description,STRSUBSTNO(Text999,FIELDCAPTION("Cost Object"),"Cost Object"));
          EXIT(FALSE);
        END;
        IF DimValRec.Blocked THEN
          StoreMessage(Description, STRSUBSTNO(Text013,FIELDCAPTION("Cost Object"),"Cost Object"));  // Not 'EXIT(FALSE)' if blocked!
      END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CheckUnitOfMeasure@1100409001(ServiceOrderBudgetLine@1100529900 : Record 11012875);
    BEGIN
      WITH ServiceOrderBudgetLine DO BEGIN
        IF "Unit of Measure" = '' THEN
          EXIT;
        IF NOT UnitRec.GET("Unit of Measure") THEN
          StoreMessage(Description, STRSUBSTNO(Text999, FIELDCAPTION("Unit of Measure"), "Unit of Measure"));
      END;
    END;

    LOCAL PROCEDURE CheckRateCode@1100529605(ServiceOrderBudgetLine@1100529900 : Record 11012875);
    VAR
      BudgetRate@1100529600 : Record 11012000;
    BEGIN
      WITH ServiceOrderBudgetLine DO BEGIN
        IF "Rate Code" = '' THEN
          EXIT;
        BudgetRate.SETRANGE(Code, "Rate Code");
        IF BudgetRate.ISEMPTY THEN
          StoreMessage(Description, STRSUBSTNO(Text999, FIELDCAPTION("Rate Code"), "Rate Code"));
      END;
    END;

    LOCAL PROCEDURE CheckItem@1100529608(ServiceOrderBudgetLine@1100529900 : Record 11012875);
    VAR
      Item@1100529600 : Record 27;
    BEGIN
      WITH ServiceOrderBudgetLine DO BEGIN
        IF "Item No." = '' THEN
          EXIT;
        IF NOT Item.GET("Item No.") THEN BEGIN
          StoreMessage(Description, STRSUBSTNO(Text999, Item.TABLECAPTION, "Item No."));
          EXIT;
        END;
        IF Item.Blocked THEN
          StoreMessage(Description, STRSUBSTNO(Text013, Item.TABLECAPTION, "Item No."));
      END;
    END;

    LOCAL PROCEDURE CheckSubcontractingActivity@1100529613(ServiceOrderBudgetLine@1100529900 : Record 11012875);
    VAR
      SubcontractingActivity@1100529600 : Record 11229372;
    BEGIN
      WITH ServiceOrderBudgetLine DO BEGIN
        IF "Subcontracting Activity" = '' THEN
          EXIT;
        SubcontractingActivity.SETRANGE(Code, "Subcontracting Activity");
        IF SubcontractingActivity.ISEMPTY THEN
          StoreMessage(Description, STRSUBSTNO(Text999, FIELDCAPTION("Subcontracting Activity"), "Subcontracting Activity"));
      END;
    END;

    LOCAL PROCEDURE CheckPlantType@1100529617(ServiceOrderBudgetLine@1100529900 : Record 11012875);
    VAR
      PlantType@1100529600 : Record 11012551;
    BEGIN
      WITH ServiceOrderBudgetLine DO BEGIN
        IF "Plant Type" = '' THEN
          EXIT;
        PlantType.SETRANGE(Code, "Plant Type");
        IF PlantType.ISEMPTY THEN
          StoreMessage(Description, STRSUBSTNO(Text999, FIELDCAPTION("Plant Type"), "Plant Type"));
      END;
    END;

    LOCAL PROCEDURE StoreMessage@5(lvDesc@11012000 : Text[100];lvMess@11012001 : Text[80]);
    VAR
      ErrorRec@1210190000 : Record 11012051;
      lvError@11012002 : Integer;
    BEGIN
      WITH ErrorRec DO BEGIN
        SETRANGE("User ID", USERID);
        SETRANGE("Source Type", "Source Type"::"Import Budget");
        IF FINDLAST THEN
          lvError := "Line No." + 1
        ELSE
          lvError := 1;

        INIT;
        "User ID" := USERID;
        "Source Type" := "Source Type"::"Import Budget";
        "Line No." := lvError;
        "Service Order No." := ServiceOrderNo;
        "Error message" := lvMess;
        Description := lvDesc;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE SaveCostTypeForProcessing@1100529902(CostTypeNodes@1100529900 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList");
    VAR
      CostTypeCode@1100529902 : Text[30];
      CostTypeDesc@1100529901 : Text[30];
      NodeSequence@1100529904 : Integer;
      CostTypeNode@1100529903 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      IF ISNULL(CostTypeNodes) THEN
        EXIT;
      FOR NodeSequence := 0 TO (CostTypeNodes.Count - 1) DO BEGIN
        CostTypeNode := CostTypeNodes.Item(NodeSequence);
        CostTypeCode := COPYSTR(XMLDOMMgt.FindNodeText(CostTypeNode,'Code'),1,MAXSTRLEN(CostTypeCode));
        CostTypeDesc := COPYSTR(XMLDOMMgt.FindNodeText(CostTypeNode,'Kosten.Type'),1,MAXSTRLEN(CostTypeDesc));;
        CASE CostTypeDesc OF
          'Arbeid':
            IF CostTypeLaborList = '' THEN
              CostTypeLaborList := CostTypeCode
            ELSE
              CostTypeLaborList := CostTypeLaborList + '|' + CostTypeCode;
          'Materiaal':
            IF CostTypeMaterialList = '' THEN
              CostTypeMaterialList := CostTypeCode
            ELSE
              CostTypeMaterialList := CostTypeMaterialList + '|' + CostTypeCode;
          'Onderaanneming':
            IF CostTypeSubcontractingList = '' THEN
              CostTypeSubcontractingList := CostTypeCode
            ELSE
              CostTypeSubcontractingList := CostTypeSubcontractingList + '|' + CostTypeCode;
          'Materieel':
            IF CostTypePlantList = '' THEN
              CostTypePlantList := CostTypeCode
            ELSE
              CostTypePlantList := CostTypePlantList + '|' + CostTypeCode;
        END;
      END;
    END;

    LOCAL PROCEDURE InsertServiceOrderBudgetLine@1100529915(ServiceOrderBudgetLineRec@1100529901 : Record 11012875);
    VAR
      ServiceOrderBudgetLine@1100529900 : Record 11012875;
    BEGIN
      ServiceOrderBudgetLine.INIT;
      ServiceOrderBudgetLine.VALIDATE("Line No.",NextBudgetLineNo);
    END;

    LOCAL PROCEDURE NextBudgetLineNo@1100529916() NextLineNo : Integer;
    VAR
      ServiceOrderBudgetLine@1100529900 : Record 11012875;
    BEGIN
      ServiceOrderBudgetLine.SETRANGE("Service Order No.",ServiceOrderNo);
      IF ServiceOrderBudgetLine.FINDLAST THEN
        EXIT(ServiceOrderBudgetLine."Line No." + 10000);

      EXIT(10000);
    END;

    LOCAL PROCEDURE CodeInFilter@1100485002(lvCode@1100485000 : Code[20];lvFilter@1100485001 : Text[1000]) : Boolean;
    VAR
      TmpRec@1100485002 : TEMPORARY Record 352;
    BEGIN
      IF lvFilter='*' THEN
        EXIT(TRUE);
      TmpRec.RESET;
      TmpRec.DELETEALL;
      TmpRec."Dimension Value Code" := lvCode;
      TmpRec.INSERT;
      TmpRec.SETFILTER("Dimension Value Code", lvFilter);
      EXIT(TmpRec.FIND('-'));
    END;

    BEGIN
    END.
  }
}

