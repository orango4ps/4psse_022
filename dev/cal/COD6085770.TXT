OBJECT Codeunit 6085770 Sales Doc. - Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=DCW13.70.00.4.50;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      CaptureMgt@1000000000 : Codeunit 6085576;
      Text001@1160040000 : TextConst 'DEU=%1 kann nicht %2sein;ENU=%1 cannot be %2;NLD=%1 kan niet %2 zijn.';
      Text002@1160040001 : TextConst 'DEU=%1 wurde bereits umgerechnet in %2 %3\\M”chten Sie die Umrechnung aktualisieren?;ENU=%1 has already been translated to %2 %3\\Do you want to update the translation?;NLD="%1 werd al vertaald naar %2 %3\\Wilt u de vertaling aanpassen? "';
      Text003@1000000023 : TextConst 'DEU=Der Beleg wurde nicht gefunden.;ENU=The document was not found.;NLD=Het document is niet gevonden.';

    PROCEDURE GetDocType@1160040008(Document@1160040003 : Record 6085590) : Integer;
    VAR
      SalesHeader@1160040000 : Record 36;
      Field@1160040001 : Record 6085580;
      FieldRule@1160040002 : Record 6085583;
      CaptureMgt@1160040004 : Codeunit 6085576;
    BEGIN
      IF NOT Field.GET(Document."Template No.",Field.Type::Header,'DOCTYPE') THEN
        EXIT(SalesHeader."Document Type"::Order);

      CaptureMgt.FilterRule(Field,FieldRule);
      IF NOT FieldRule.FINDFIRST THEN
        EXIT(SalesHeader."Document Type"::Order);

      IF UPPERCASE(FieldRule.Rule) <> UPPERCASE(CaptureMgt.GetText(Document,Field.Type::Header,'DOCTYPE',0)) THEN
        EXIT(SalesHeader."Document Type"::Order)
      ELSE
        EXIT(SalesHeader."Document Type"::"Credit Memo");
    END;

    PROCEDURE GetOurDocNo@1160040006(VAR Document@1000000000 : Record 6085590) : Text[250];
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetText(Document,Field.Type::Header,'OURDOCNO',0));
    END;

    PROCEDURE GetDocumentNo@1000000001(VAR Document@1000000000 : Record 6085590) : Code[50];
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(COPYSTR(CaptureMgt.GetText(Document,Field.Type::Header,'DOCNO',0),1,50));
    END;

    PROCEDURE GetPostingDate@1160040003(VAR Document@1000000000 : Record 6085590) : Date;
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetDate(Document,Field.Type::Header,'POSTINGDATE',0));
    END;

    PROCEDURE GetDocumentDate@1000000003(VAR Document@1000000000 : Record 6085590) : Date;
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetDate(Document,Field.Type::Header,'DOCDATE',0));
    END;

    PROCEDURE GetDueDate@1000000002(VAR Document@1000000000 : Record 6085590) : Date;
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetDate(Document,Field.Type::Header,'DUEDATE',0));
    END;

    PROCEDURE GetOurContact@1000000004(VAR Document@1000000000 : Record 6085590) : Text[250];
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetText(Document,Field.Type::Header,'OURCONTACT',0));
    END;

    PROCEDURE GetCustContact@1160040004(VAR Document@1000000000 : Record 6085590) : Text[250];
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetText(Document,Field.Type::Header,'EXTCONTACT',0));
    END;

    PROCEDURE GetOurDocumentNo@1000000005(VAR Document@1000000000 : Record 6085590) : Text[250];
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetText(Document,Field.Type::Header,'OURDOCNO',0));
    END;

    PROCEDURE GetCurrencyCode@1000000006(VAR Document@1000000000 : Record 6085590) : Code[20];
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(COPYSTR(CaptureMgt.GetText(Document,Field.Type::Header,'CURRCODE',0),1,20));
    END;

    PROCEDURE GetAmountExclVAT@1000000007(VAR Document@1000000000 : Record 6085590) : Decimal;
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetDecimal(Document,Field.Type::Header,'AMOUNTEXCLVAT',0));
    END;

    PROCEDURE GetSubtractedAmountExclVAT@1160040009(VAR Document@1000000000 : Record 6085590) : Decimal;
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      IF NOT Field.GET(Document."Template No.",Field.Type::Header,'AMOUNTEXCLVAT') THEN
        EXIT;

      EXIT(GetAmountExclVAT(Document) - CaptureMgt.GetAmountToSubtract(Document,Field));
    END;

    PROCEDURE GetAllAmountsExclVAT@161024023(VAR Document@1000000000 : Record 6085590) TotalAmount : Decimal;
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      Field.SETRANGE("Template No.",Document."Template No.");
      Field.SETRANGE(Type,Field.Type::Header);
      Field.SETFILTER("Transfer Amount to Document",'<>%1',Field."Transfer Amount to Document"::" ");
      Field.SETRANGE("Subtract from Amount Field",'');
      Field.SETRANGE("Data Type",Field."Data Type"::Number);
      IF Field.FINDSET THEN
        REPEAT
          TotalAmount := TotalAmount + CaptureMgt.GetDecimal(Document,Field.Type::Header,Field.Code,0);
        UNTIL Field.NEXT = 0;
    END;

    PROCEDURE GetAmountInclVAT@1000000008(VAR Document@1000000000 : Record 6085590) : Decimal;
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetDecimal(Document,Field.Type::Header,'AMOUNTINCLVAT',0));
    END;

    PROCEDURE GetVATAmount@1000000009(VAR Document@1000000000 : Record 6085590) : Decimal;
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetDecimal(Document,Field.Type::Header,'VATAMOUNT',0));
    END;

    PROCEDURE GetAmountToMatch@161024031(VAR Document@161024012 : Record 6085590) Amount : Decimal;
    VAR
      Field@161024013 : Record 6085580;
      TemplField@161024014 : Record 6085580;
    BEGIN
      Field.SETRANGE("Template No.",Document."Template No.");
      Field.SETRANGE(Type,Field.Type::Header);
      Field.SETRANGE("Data Type",Field."Data Type"::Number);
      Field.SETRANGE("Transfer Amount to Document",Field."Transfer Amount to Document"::"If lines are not recognised");
      Field.SETRANGE("Subtract from Amount Field",'');

      IF Field.FINDSET THEN
        REPEAT
          Amount += CaptureMgt.GetDecimal(Document,Field.Type,Field.Code,0);
          Amount -= CaptureMgt.GetAmountToSubtract(Document,Field);
        UNTIL Field.NEXT = 0;
    END;

    PROCEDURE GetPaymentId@1000000011(VAR Document@1000000000 : Record 6085590) : Text[50];
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(COPYSTR(CaptureMgt.GetText(Document,Field.Type::Header,'PAYMENT-ID',0),1,50));
    END;

    PROCEDURE GetPostingDescription@1000000012(VAR Document@1000000000 : Record 6085590) : Text[250];
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetText(Document,Field.Type::Header,'POSTINGDESC',0));
    END;

    PROCEDURE GetGLAccountNo@161024022(VAR Document@1000000000 : Record 6085590;Suffex@161024012 : Code[10]) : Text[250];
    VAR
      Field@161024013 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetText(Document,Field.Type::Header,'GLACCOUNTNO' + Suffex,0));
    END;

    PROCEDURE GetTranslLineInfo@1160040000(TemplNo@1160040000 : Code[20];CustItemNo@1160040001 : Code[150];UseCustItemNos@1160040003 : Boolean;VAR LineTransl@1160040002 : Record 6085584) : Boolean;
    VAR
      ItemCrossRef@1160040004 : Record 5717;
      Item@1160040005 : Record 27;
      Template@1160040007 : Record 6085579;
      CustNo@1160040006 : Code[20];
    BEGIN
      CLEAR(LineTransl);
      IF CustItemNo = '' THEN
        EXIT;

      LineTransl.SETRANGE("Template No.",TemplNo);
      LineTransl.SETRANGE(Type,LineTransl.Type::"Line Field");
      LineTransl.SETRANGE("Field Code",'NO');
      LineTransl.SETRANGE("Translate From",COPYSTR(CustItemNo,1,MAXSTRLEN(LineTransl."Translate From")));
      LineTransl.SETFILTER("Translate to No.",'<>%1','');
      IF LineTransl.FINDFIRST THEN
        EXIT(TRUE)
      ELSE BEGIN
        Template.GET(TemplNo);
        CustNo := Template.GetSourceID;

        LineTransl.INIT;

        ItemCrossRef.SETCURRENTKEY("Cross-Reference No.","Cross-Reference Type","Cross-Reference Type No.");
        ItemCrossRef.SETRANGE("Cross-Reference No.",COPYSTR(CustItemNo,1,MAXSTRLEN(ItemCrossRef."Cross-Reference No.")));
        ItemCrossRef.SETRANGE("Cross-Reference Type",ItemCrossRef."Cross-Reference Type"::Customer);
        ItemCrossRef.SETRANGE("Cross-Reference Type No.",CustNo);
        IF ItemCrossRef.FINDFIRST THEN BEGIN
          LineTransl."Translate to Type" := LineTransl."Translate to Type"::Item;
          LineTransl."Translate to No." := ItemCrossRef."Item No.";
          LineTransl."Translate to UOM Code" := ItemCrossRef."Unit of Measure";
          LineTransl."Translate to Variant Code" := ItemCrossRef."Variant Code";
        END ELSE BEGIN
          IF UseCustItemNos AND Item.GET(COPYSTR(CustItemNo,1,MAXSTRLEN(Item."No."))) THEN BEGIN
            LineTransl."Translate to Type" := LineTransl."Translate to Type"::Item;
            LineTransl."Translate to No." := Item."No.";
            LineTransl."Translate to UOM Code" := Item."Sales Unit of Measure";
          END ELSE
            EXIT(FALSE);
        END;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE GetTranslLineInfo2@1160040001(Document@1160040000 : Record 6085590;LineNo@1160040001 : Integer;VAR LineTransl@1160040003 : Record 6085584) : Boolean;
    VAR
      Template@1160040002 : Record 6085579;
    BEGIN
      IF Template.GET(Document."Template No.") THEN
        EXIT(GetTranslLineInfo(Document."Template No.",GetLineAccountNo(Document,LineNo),
          Template."Use Vendor/Customer Item Nos.",LineTransl));
    END;

    PROCEDURE GetLineAccountNo@1000000013(VAR Document@1000000000 : Record 6085590;LineNo@1000000001 : Integer) : Code[250];
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetText(Document,Field.Type::Line,'NO',LineNo));
    END;

    PROCEDURE GetLineDescription@1000000014(VAR Document@1000000001 : Record 6085590;LineNo@1000000000 : Integer) : Text[250];
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetText(Document,Field.Type::Line,'DESC',LineNo));
    END;

    PROCEDURE GetLineQuantity@1000000015(VAR Document@1000000001 : Record 6085590;LineNo@1000000000 : Integer) : Decimal;
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetDecimal(Document,Field.Type::Line,'QUANTITY',LineNo));
    END;

    PROCEDURE GetLineUnitCost@1000000016(VAR Document@1000000001 : Record 6085590;LineNo@1000000000 : Integer) : Decimal;
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetDecimal(Document,Field.Type::Line,'UNITCOST',LineNo));
    END;

    PROCEDURE GetLineDiscAmount@1000000017(VAR Document@1000000001 : Record 6085590;LineNo@1000000000 : Integer) : Decimal;
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetDecimal(Document,Field.Type::Line,'DISCAMOUNT',LineNo));
    END;

    PROCEDURE GetLineDiscPct@1000000018(VAR Document@1000000001 : Record 6085590;LineNo@1000000000 : Integer) : Decimal;
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetDecimal(Document,Field.Type::Line,'DISCPCT',LineNo));
    END;

    PROCEDURE GetLineAmount@1000000019(VAR Document@1000000001 : Record 6085590;LineNo@1000000000 : Integer) : Decimal;
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetDecimal(Document,Field.Type::Line,'LINEAMOUNT',LineNo));
    END;

    PROCEDURE GetOurDocNoDesc@1000000025(VAR Document@1000000000 : Record 6085590) : Text[250];
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      IF Field.GET(Document."Template No.",Field.Type::Header,'OURDOCNO') THEN
        EXIT(Field."Field Name");
    END;

    PROCEDURE GetAmountExclVATDesc@1000000027(VAR Document@1000000000 : Record 6085590) : Text[250];
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      IF Field.GET(Document."Template No.",Field.Type::Header,'AMOUNTEXCLVAT') THEN
        EXIT(Field."Field Name");
    END;

    PROCEDURE GetDocDateDesc@1000000026(VAR Document@1000000000 : Record 6085590) : Text[250];
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      IF Field.GET(Document."Template No.",Field.Type::Header,'DOCDATE') THEN
        EXIT(Field."Field Name");
    END;

    PROCEDURE ShowDocFromSalesDoc@161024029(SalesHeader@1000000002 : Record 36);
    VAR
      Document@1000000000 : Record 6085590;
    BEGIN
      Document.SETCURRENTKEY("Created Doc. Type","Created Doc. Subtype","Created Doc. ID","Created Doc. Ref. No.");
      Document.SETRANGE("Created Doc. Type",DATABASE::"Sales Header");
      Document.SETRANGE("Created Doc. Subtype",SalesHeader."Document Type");
      Document.SETRANGE("Created Doc. ID",SalesHeader."No.");
      IF NOT Document.FINDFIRST THEN
        ERROR(Text003);
      Document.OpenPdfFile;
    END;

    PROCEDURE ShowDocFromPostedInv@1000000030(SalesInvHeader@1000000002 : Record 112);
    VAR
      Document@1000000000 : Record 6085590;
      SalesHeader@1000000001 : Record 36;
    BEGIN
      Document.SETCURRENTKEY("Created Doc. Type","Created Doc. Subtype","Created Doc. ID","Created Doc. Ref. No.");
      Document.SETRANGE("Created Doc. Type",DATABASE::"Sales Header");
      Document.SETRANGE("Created Doc. Subtype",SalesHeader."Document Type"::Order);
      Document.SETRANGE("Created Doc. ID",SalesInvHeader."Order No.");
      IF NOT Document.FINDFIRST THEN
        ERROR(Text003);
      Document.OpenPdfFile;
    END;

    PROCEDURE ShowDocFromPostedCrMemo@1000000032(SalesCrMemoHeader@1000000002 : Record 114);
    VAR
      Document@1000000000 : Record 6085590;
      SalesHeader@1000000001 : Record 36;
    BEGIN
      Document.SETCURRENTKEY("Created Doc. Type","Created Doc. Subtype","Created Doc. ID","Created Doc. Ref. No.");
      Document.SETRANGE("Created Doc. Type",DATABASE::"Sales Header");
      Document.SETRANGE("Created Doc. Subtype",SalesHeader."Document Type"::"Credit Memo");
      Document.SETRANGE("Created Doc. ID",SalesCrMemoHeader."Pre-Assigned No.");
      IF NOT Document.FINDFIRST THEN
        ERROR(Text003);
      Document.OpenPdfFile;
    END;

    PROCEDURE ShowDocFromVendLedgEntry@1000000034(CustLedgEntry@1000000002 : Record 21);
    VAR
      Document@1000000000 : Record 6085590;
      SalesCrMemoHeader@1000000003 : Record 114;
      SalesInvHeader@1000000004 : Record 112;
      SalesHeader@1000000001 : Record 36;
    BEGIN
      Document.SETCURRENTKEY("Created Doc. Type","Created Doc. Subtype","Created Doc. ID","Created Doc. Ref. No.");
      Document.SETRANGE("Created Doc. Type",DATABASE::"Sales Header");

      IF CustLedgEntry."Document Type" = CustLedgEntry."Document Type"::Invoice THEN BEGIN
        SalesInvHeader.GET(CustLedgEntry."Document No.");
        Document.SETRANGE("Created Doc. Subtype",SalesHeader."Document Type"::Order);
        Document.SETRANGE("Created Doc. ID",SalesInvHeader."Order No.");
      END ELSE
        IF CustLedgEntry."Document Type" = CustLedgEntry."Document Type"::"Credit Memo" THEN BEGIN
          SalesCrMemoHeader.GET(CustLedgEntry."Document No.");
          Document.SETRANGE("Created Doc. Subtype",SalesHeader."Document Type"::"Credit Memo");
          Document.SETRANGE("Created Doc. ID",SalesCrMemoHeader."Pre-Assigned No.");
        END ELSE
          ERROR(Text003);

      IF NOT Document.FINDFIRST THEN
        ERROR(Text003);
      Document.OpenPdfFile;
    END;

    PROCEDURE ShowDocFromDocFromNoAndDate@161024032(DocNo@161024012 : Code[20];PostingDate@161024013 : Date;ShowError@161024020 : Boolean);
    VAR
      Document@161024019 : Record 6085590;
      SalesInvHeader@161024014 : Record 112;
      SalesCrMemoHeader@161024018 : Record 114;
      SalesHeader@161024017 : Record 36;
      DocSubType@161024015 : Integer;
      DocId@161024016 : Code[20];
    BEGIN
      IF SalesInvHeader.GET(DocNo) AND (SalesInvHeader."Posting Date" = PostingDate) THEN BEGIN
        DocSubType := SalesHeader."Document Type"::Order;
        DocId := SalesInvHeader."Order No.";
      END ELSE
        IF SalesCrMemoHeader.GET(DocNo) AND (SalesCrMemoHeader."Posting Date" = PostingDate) THEN BEGIN
          DocSubType := SalesHeader."Document Type"::"Credit Memo";
          DocId := SalesCrMemoHeader."Pre-Assigned No.";
        END;

      IF DocId = '' THEN BEGIN
        IF ShowError THEN
          ERROR(Text003)
        ELSE
          EXIT;
      END;

      Document.SETCURRENTKEY("Created Doc. Type","Created Doc. Subtype","Created Doc. ID","Created Doc. Ref. No.");
      Document.SETRANGE("Created Doc. Type",DATABASE::"Sales Header");
      Document.SETRANGE("Created Doc. Subtype",DocSubType);
      Document.SETRANGE("Created Doc. ID",DocId);

      IF NOT Document.FINDFIRST THEN BEGIN
        IF ShowError THEN
          ERROR(Text003)
        ELSE
          EXIT;
      END;

      Document.OpenPdfFile;
    END;

    PROCEDURE GetTotalAmounts@1000000039(VAR SalesHeader@1000000000 : Record 36;VAR TotalAmountExclVAT@1000000001 : Decimal;VAR TotalVATAmount@1000000002 : Decimal);
    VAR
      SalesLine@1000000004 : Record 37;
      TempVATAmountLine@1000000005 : Record 290;
    BEGIN
      SalesLine.CalcVATAmountLines(0,SalesHeader,SalesLine,TempVATAmountLine);
      TotalAmountExclVAT := TempVATAmountLine."VAT Base";
      TotalVATAmount := TempVATAmountLine."VAT Amount";
    END;

    PROCEDURE GetNoOfSalesOrders@161024014(VAR Document@161024012 : Record 6085590) : Integer;
    VAR
      SalesHeader@161024013 : Record 36;
    BEGIN
      IF Document.GetSourceID = '' THEN
        EXIT;

      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Order);
      SalesHeader.SETRANGE("Sell-to Customer No.",Document.GetSourceID);
      EXIT(SalesHeader.COUNT);
    END;

    PROCEDURE GetNoOfSalesReturnOrders@161024018(VAR Document@161024012 : Record 6085590) : Integer;
    VAR
      SalesHeader@161024013 : Record 36;
    BEGIN
      IF Document.GetSourceID = '' THEN
        EXIT;

      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::"Return Order");
      SalesHeader.SETRANGE("Sell-to Customer No.",Document.GetSourceID);
      EXIT(SalesHeader.COUNT);
    END;

    PROCEDURE LookupNoOfSalesOrders@161024021(VAR Document@161024012 : Record 6085590) : Integer;
    VAR
      SalesHeader@161024013 : Record 36;
    BEGIN
      IF Document.GetSourceID = '' THEN
        EXIT;

      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Order);
      SalesHeader.SETRANGE("Sell-to Customer No.",Document.GetSourceID);
      PAGE.RUN(0,SalesHeader);
    END;

    PROCEDURE LookupNoOfSalesReturnOrders@161024020(VAR Document@161024012 : Record 6085590) : Integer;
    VAR
      SalesHeader@161024013 : Record 36;
    BEGIN
      IF Document.GetSourceID = '' THEN
        EXIT;

      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::"Return Order");
      SalesHeader.SETRANGE("Sell-to Customer No.",Document.GetSourceID);
      PAGE.RUN(0,SalesHeader);
    END;

    PROCEDURE GetComparableAmounts@161024016(VAR SalesHeader@161024012 : Record 36;VAR SalesAmountExclVAT@161024013 : Decimal;VAR SalesAmountInclVAT@161024015 : Decimal;VAR DocAmountExclVAT@161024016 : Decimal;VAR DocAmountInclVAT@161024014 : Decimal);
    VAR
      Document@161024019 : Record 6085590;
      VATAmount@161024018 : Decimal;
      ZeroRatedAmount@161024017 : Decimal;
    BEGIN
      GetTotalAmounts(SalesHeader,SalesAmountExclVAT,VATAmount);
      SalesAmountExclVAT := SalesAmountExclVAT + ZeroRatedAmount;
      SalesAmountInclVAT := SalesAmountExclVAT + VATAmount;

      Document.SETCURRENTKEY("Created Doc. Type","Created Doc. Subtype","Created Doc. ID","Created Doc. Ref. No.");
      Document.SETRANGE("Created Doc. Type",DATABASE::"Sales Header");
      Document.SETRANGE("Created Doc. Subtype",SalesHeader."Document Type");
      Document.SETRANGE("Created Doc. ID",SalesHeader."No.");
      IF Document.FINDFIRST THEN BEGIN
        DocAmountExclVAT := GetAllAmountsExclVAT(Document);
        DocAmountInclVAT := GetAmountInclVAT(Document);
      END ELSE BEGIN
        DocAmountExclVAT := 0;
        DocAmountInclVAT := 0;
      END;
    END;

    PROCEDURE GetDocumentHeaderAmounts@161024033(SalesHeader@161024014 : Record 36;VAR AmountExclVAT@161024013 : Decimal;VAR AmountInclVAT@161024012 : Decimal;VAR AmountExclVATLCY@161024017 : Decimal;VAR AmountInclVATLCY@161024015 : Decimal) : Boolean;
    VAR
      Document@161024016 : Record 6085590;
    BEGIN
      AmountExclVAT := 0;
      AmountInclVAT := 0;
      AmountExclVATLCY := 0;
      AmountInclVATLCY := 0;

      Document.SETCURRENTKEY("Created Doc. Type","Created Doc. Subtype","Created Doc. ID","Created Doc. Ref. No.");
      Document.SETRANGE("Created Doc. Type",DATABASE::"Sales Header");
      Document.SETRANGE("Created Doc. Subtype",SalesHeader."Document Type");
      Document.SETRANGE("Created Doc. ID",SalesHeader."No.");
      IF NOT Document.FINDFIRST THEN
        EXIT;

      AmountExclVAT := Document."Amount Excl. VAT";
      AmountInclVAT := Document."Amount Incl. VAT";
      IF SalesHeader."Currency Factor" = 0 THEN
        SalesHeader."Currency Factor" := 1;
      AmountExclVATLCY := ROUND(Document."Amount Excl. VAT" / SalesHeader."Currency Factor");
      AmountInclVATLCY := ROUND(Document."Amount Incl. VAT" / SalesHeader."Currency Factor");

      EXIT(TRUE);
    END;

    PROCEDURE GetSalesStatusAmounts@161024034(VAR SalesHeader@161024016 : Record 36;VAR ImportedAmountExclVAT@6085576 : Decimal;VAR ImportedAmountInclVAT@6085575 : Decimal;VAR AssignedAmountExclVAT@6085574 : Decimal;VAR AssignedAmountInclVAT@6085573 : Decimal);
    VAR
      TempSalesLine@161024023 : TEMPORARY Record 37;
      TotalSalesLine@161024022 : Record 37;
      TotalSalesLineLCY@161024021 : Record 37;
      SalesPost@161024020 : Codeunit 80;
      TempAmount@161024018 : Decimal;
      VATText@161024017 : Text[30];
    BEGIN
      ImportedAmountExclVAT:= 0;
      ImportedAmountInclVAT := 0;
      AssignedAmountExclVAT := 0;
      AssignedAmountInclVAT := 0;

      IF (SalesHeader."No." = '') OR (SalesHeader."Sell-to Customer No." = '') THEN
        EXIT;
      SalesPost.GetSalesLines(SalesHeader,TempSalesLine,0);
      CLEAR(SalesPost);
      SalesPost.SumSalesLinesTemp(SalesHeader,TempSalesLine,0,TotalSalesLine,TotalSalesLineLCY,TempAmount,VATText,
        TempAmount,TempAmount,TempAmount);
      AssignedAmountExclVAT := TotalSalesLine.Amount;
      AssignedAmountInclVAT := TotalSalesLine."Amount Including VAT";

      GetDocumentHeaderAmounts(SalesHeader,ImportedAmountExclVAT,ImportedAmountInclVAT,TempAmount,TempAmount);
    END;

    PROCEDURE ChangeDocAmounts@161024035(SalesHeader@161024013 : Record 36);
    VAR
      Document@161024014 : Record 6085590;
      DocAmount@161024012 : Page 6085721;
    BEGIN
      SalesHeader.TESTFIELD(Status,SalesHeader.Status::Open);

      Document.SETCURRENTKEY("Created Doc. Type","Created Doc. Subtype","Created Doc. ID","Created Doc. Ref. No.");
      Document.SETRANGE("Created Doc. Type",DATABASE::"Sales Header");
      Document.SETRANGE("Created Doc. Subtype",SalesHeader."Document Type");
      Document.SETRANGE("Created Doc. ID",SalesHeader."No.");
      Document.FINDFIRST;

      SalesHeader.FILTERGROUP(2);
      SalesHeader.SETRECFILTER;
      SalesHeader.FILTERGROUP(0);
      DocAmount.SETRECORD(SalesHeader);
      DocAmount.SETTABLEVIEW(SalesHeader);
      DocAmount.LOOKUPMODE(TRUE);
      DocAmount.SetAmounts(Document."Amount Excl. VAT",Document."Amount Incl. VAT");
      IF DocAmount.RUNMODAL <> ACTION::LookupOK THEN
        EXIT;

      DocAmount.GetAmounts(Document."Amount Excl. VAT",Document."Amount Incl. VAT");
      Document.MODIFY;
    END;

    PROCEDURE GetResponsibillityCenter@1160760000(VAR Document@161024012 : Record 6085590) : Code[20];
    VAR
      Field@161024013 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetText(Document,Field.Type::Header,'RESPCENTER',0));
    END;

    PROCEDURE UpdateLineNoTrans@1160040002(VAR Document@1160040000 : Record 6085590;LineNo@1160040002 : Integer;ToType@1000 : Integer;ToNo@1001 : Code[20]);
    VAR
      Template@1160040003 : Record 6085579;
      Item@1160040005 : Record 27;
      ItemCrossRef@1160040006 : Record 5717;
      LineTransl@1160040008 : Record 6085584;
      CustItemNo@1160040004 : Code[150];
    BEGIN
      Template.GET(Document."Template No.");
      Template.TESTFIELD("Translate Item Nos. to");

      CustItemNo := GetLineAccountNo(Document,LineNo);

      IF CustItemNo = '' THEN
        EXIT;

      ItemCrossRef.SETCURRENTKEY("Cross-Reference No.","Cross-Reference Type","Cross-Reference Type No.");
      ItemCrossRef.SETRANGE("Cross-Reference No.",COPYSTR(CustItemNo,1,MAXSTRLEN(ItemCrossRef."Cross-Reference No.")));
      ItemCrossRef.SETRANGE("Cross-Reference Type",ItemCrossRef."Cross-Reference Type"::Customer);
      ItemCrossRef.SETRANGE("Cross-Reference Type No.",Document.GetSourceID);

      LineTransl.SETRANGE("Template No.",Template."No.");
      LineTransl.SETRANGE(Type,LineTransl.Type::"Line Field");
      LineTransl.SETRANGE("Field Code",'NO');
      LineTransl.SETRANGE("Translate From",COPYSTR(CustItemNo,1,MAXSTRLEN(LineTransl."Translate From")));

      IF (ToType = LineTransl."Translate to Type"::" ") OR (ToNo = '') THEN BEGIN
        ItemCrossRef.DELETEALL(TRUE);
        LineTransl.DELETEALL(TRUE);
        EXIT;
      END;

      CASE TRUE OF
        (ToType = LineTransl."Translate to Type"::Item) AND
        (Template."Translate Item Nos. to" = Template."Translate Item Nos. to"::"Item Cross Reference"):
          BEGIN
            IF ItemCrossRef.FINDFIRST THEN BEGIN
              IF ItemCrossRef."Item No." <> ToNo THEN BEGIN
                IF NOT CONFIRM(Text002,FALSE,CustItemNo,ItemCrossRef.FIELDCAPTION("Item No."),ItemCrossRef."Item No.") THEN
                  ERROR('');

                ItemCrossRef.DELETE(TRUE);
                ItemCrossRef."Item No." := '';
                ItemCrossRef."Variant Code" := '';
                ItemCrossRef."Unit of Measure" := '';
                ItemCrossRef.VALIDATE("Item No.",ToNo);
                ItemCrossRef.VALIDATE("Unit of Measure",Item."Sales Unit of Measure");
                ItemCrossRef.INSERT(TRUE);
              END;
            END ELSE BEGIN
              IF (ToNo <> '') AND (ToType <> LineTransl."Translate to Type"::" ") THEN BEGIN
                ItemCrossRef.INIT;
                ItemCrossRef.VALIDATE("Item No.",ToNo);
                ItemCrossRef.VALIDATE("Unit of Measure",Item."Sales Unit of Measure");
                ItemCrossRef.VALIDATE("Cross-Reference Type",ItemCrossRef."Cross-Reference Type"::Customer);
                ItemCrossRef.VALIDATE("Cross-Reference Type No.",Document.GetSourceID);
                ItemCrossRef.VALIDATE("Cross-Reference No.",COPYSTR(CustItemNo,1,MAXSTRLEN(ItemCrossRef."Cross-Reference No.")));
                ItemCrossRef.INSERT(TRUE);
              END;
            END;
          END;

        Template."Translate Item Nos. to" = Template."Translate Item Nos. to"::"Vendor Item":
          ERROR(Text001,Template.FIELDCAPTION("Translate Item Nos. to"),Template."Translate Item Nos. to");

        (ToType <> LineTransl."Translate to Type"::Item) OR
        (Template."Translate Item Nos. to" = Template."Translate Item Nos. to"::"Document Capture Line Translation"):
          BEGIN
            IF LineTransl.FINDFIRST THEN BEGIN
              IF NOT (LineTransl."Translate to No." IN ['',ToNo]) THEN BEGIN
                IF NOT CONFIRM(Text002,FALSE,CustItemNo,LineTransl."Translate to Type",LineTransl."Translate to No.") THEN
                  ERROR('');

                LineTransl.VALIDATE("Translate to Type",ToType);
                LineTransl.VALIDATE("Translate to No.",ToNo);
                IF ToType = LineTransl."Translate to Type"::Item THEN BEGIN
                  Item.GET(LineTransl."Translate to No.");
                  LineTransl.VALIDATE("Translate to UOM Code",Item."Sales Unit of Measure");
                END;
                LineTransl.MODIFY(TRUE);
              END;
            END ELSE BEGIN
              LineTransl.INIT;
              LineTransl.VALIDATE("Template No.",Template."No.");
              LineTransl.VALIDATE(Type,LineTransl.Type::"Line Field");
              LineTransl.VALIDATE("Field Code",'NO');
              LineTransl.VALIDATE("Translate From",COPYSTR(CustItemNo,1,MAXSTRLEN(LineTransl."Translate From")));
              LineTransl.VALIDATE("Translate to Type",ToType);
              LineTransl.VALIDATE("Translate to No.",ToNo);
              IF ToType = LineTransl."Translate to Type"::Item THEN BEGIN
                Item.GET(ToNo);
                LineTransl.VALIDATE("Translate to UOM Code",Item."Sales Unit of Measure");
              END;
              LineTransl.INSERT(TRUE);
          END;
        END;
      END;
    END;

    PROCEDURE UpdateDefDocValFromOrder@1160040005(VAR Document@1160040000 : Record 6085590;SalesOrderNo@1160040001 : Code[20]);
    VAR
      SalesHeader@1160040002 : Record 36;
      TemplField@1160040003 : Record 6085580;
      Value2@1160040004 : Record 6085593;
    BEGIN
      SalesHeader.GET(GetDocType(Document),SalesOrderNo);

      IF GetOurContact(Document) = '' THEN
        UpdateDocField(Document,'OURCONTACT',SalesHeader."Salesperson Code");

      IF GetCustContact(Document) = '' THEN
        UpdateDocField(Document,'EXTCONTACT',SalesHeader."Sell-to Contact");

      IF GetCurrencyCode(Document) = '' THEN
        UpdateDocField(Document,'CURRCODE',SalesHeader."Currency Code");

      IF GetDocumentDate(Document) = 0D THEN
        UpdateDocField(Document,'CURRCODE',SalesHeader."Currency Code");

      IF TemplField.GET(Document."Template No.",TemplField.Type::Header,'DOCDATE') THEN
        IF (CaptureMgt.GetFieldValue(Document,TemplField,0,Value2)) AND (Value2."Value (Date)" = 0D) THEN BEGIN
          Value2."Value (Date)" := TODAY;
          Value2."Is Valid" := TRUE;
          Value2.MODIFY;
        END;
    END;

    PROCEDURE UpdateDocField@1160040007(VAR Document@1160040004 : Record 6085590;FieldCode@1160040001 : Code[20];Value@1160040002 : Text[1024]);
    VAR
      TemplField@1160040000 : Record 6085580;
    BEGIN
      WITH Document DO BEGIN
        IF TemplField.GET("Template No.",TemplField.Type::Header,FieldCode) THEN
          CaptureMgt.UpdateFieldValue("No.",0,0,TemplField,Value,TRUE,FALSE);
      END;
    END;

    BEGIN
    END.
  }
}

