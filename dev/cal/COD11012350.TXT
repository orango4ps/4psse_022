OBJECT Codeunit 11012350 Azure File Storage Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      AccountRoot@1100528504 : TextConst 'DEU=https://%1.file.core.windows.net;ENU=https://%1.file.core.windows.net;NLD=https://%1.file.core.windows.net';
      SignaturePattern@1100528503 : TextConst 'DEU=%2%1%1%1%8%1%1%3%1%1%1%1%1%1%7%4%1/%5/%6;ENU=%2%1%1%1%8%1%1%3%1%1%1%1%1%1%7%4%1/%5/%6;NLD=%2%1%1%1%8%1%1%3%1%1%1%1%1%1%7%4%1/%5/%6';
      SasSignaturePattern@1100528510 : TextConst 'DEU=%2%1%3%1%4%1%5%1%6%1%7%1%8%1%9%1%10%1%11%1%12%1%13%1%14;ENU=%2%1%3%1%4%1%5%1%6%1%7%1%8%1%9%1%10%1%11%1%12%1%13%1%14;NLD=%2%1%3%1%4%1%5%1%6%1%7%1%8%1%9%1%10%1%11%1%12%1%13%1%14';
      ConanicalPair@1100528502 : TextConst 'DEU=%1:%2;ENU=%1:%2;NLD=%1:%2';
      textRequestError@1100528501 : TextConst 'DEU=Fehler von InvokeRequest: %1 %2;ENU=Error: %1 %2;NLD=Error from InvokeRequest: %1 %2';
      ConanicalString@1100528500 : TextConst 'DEU=%2%1%3;ENU=%2%1%3;NLD=%2%1%3';
      AllFilesFilterTxt@1100528602 : TextConst '@@@={Locked};DEU=*.*;ENU=*.*;NLD=*.*';
      AllFilesDescriptionTxt@1100528601 : TextConst '@@@="{Split=r''\|''}{Locked=s''1''}";DEU=Alle Dateien (*.*)|*.*;ENU=All Files (*.*)|*.*;NLD=Alle bestanden (*.*)|*.*;SVE=Alla filer (*.*)|*.*';
      Text000@1100528505 : TextConst 'DEU=Kein gÅltiger Ordnername, verwenden Sie die folgenden Zeichen nicht %1;ENU=No Valid Directory Name, do not use chars %1;NLD=Geen geldige foldernaam, gebruik de volgende tekens niet %1';
      ProgressDialog@1100528506 : Dialog;
      Text001@1100528507 : TextConst 'DEU=Fortschritt hochladen: #1########;ENU=Upload Progress: #1########;NLD=Voortgang uploaden: #1########';
      Text002@1100528508 : TextConst 'DEU=Herunterladung, Moment bitte;ENU=Downloading, please wait;NLD=Downloaden, moment alstublieft';
      Text003@1100528600 : TextConst 'DEU=Zieldatei %1 bereits vorhanden, umbenennen nicht mîglich;ENU=Target file %1 already exists, renaming not allowed;NLD=Doelbestand %1 bestaat reeds, hernoemen niet mogelijk';
      Text004@1100528603 : TextConst 'DEU=Ordner %1 nicht vorhanden;ENU=Directory %1 does not exist;NLD=Map %1 bestaan niet';
      Text005@1100528604 : TextConst 'DEU=Die Datei %1 ist bereits vorhanden. Mîchten Sie diese Åberschreiben?;ENU=File %1 already exists, overwrite?;NLD=Bestand %1 bestaat reeds, wilt u deze overschrijven?;SVE=Filen %1 finns redan. Vill du skriva îver den?';

    PROCEDURE CreateShare@1100525010(Share@1100525000 : Text);
    VAR
      HttpWebRequest@1100525001 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebRequest";
    BEGIN
      CreateHttpRequest(HttpWebRequest,STRSUBSTNO('%1?restype=share',Share),'PUT');
      HttpWebRequest.ContentLength := 0;
      InvokeRequest(HttpWebRequest);
    END;

    PROCEDURE DeleteShare@1100525000(Share@1100525000 : Text);
    VAR
      HttpWebRequest@1100525001 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebRequest";
    BEGIN
      CreateHttpRequest(HttpWebRequest,STRSUBSTNO('%1?restype=share',Share),'DELETE');
      HttpWebRequest.ContentLength := 0;
      InvokeRequest(HttpWebRequest);
    END;

    PROCEDURE CreateDirectory@1100525007(Share@1100525000 : Text;DirectoryPath@1100525001 : Text;StopOnError@1100525002 : Boolean) : Boolean;
    VAR
      Resource@1100528500 : Text;
    BEGIN
      Resource := ConvertToResource(Share,DirectoryPath);
      EXIT(CreateDirectoryByResource(Resource, StopOnError));
    END;

    PROCEDURE CreateDirectoryByResourceRecursively@1100528400(Resource@1100528400 : Text);
    VAR
      FileManagement@1100528405 : Codeunit 419;
    BEGIN
      Resource := CONVERTSTR(Resource, '\', '/');
      Resource := DELCHR(Resource, '<>', '/');
      IF NOT DirectoryExists(Resource, '') THEN BEGIN
        IF STRPOS(Resource, '/') > 0 THEN
          CreateDirectoryByResourceRecursively(FileManagement.GetDirectoryName(Resource));
        CreateDirectoryByResource(Resource, TRUE);
      END;
    END;

    PROCEDURE CreateDirectoryByResource@1100528506(Resource@1100525000 : Text;StopOnError@1100525003 : Boolean) : Boolean;
    VAR
      HttpWebRequest@1100525002 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebRequest";
      HttpWebResponse@1100525001 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebResponse";
    BEGIN
      CreateHttpRequest(HttpWebRequest,STRSUBSTNO('%1?restype=directory',Resource),'PUT');
      HttpWebRequest.ContentLength := 0;
      IF StopOnError THEN BEGIN
        InvokeRequest(HttpWebRequest);
        EXIT(TRUE);
      END ELSE BEGIN
        InvokeRequestWithResponse(HttpWebRequest,HttpWebResponse,FALSE);
        EXIT(HttpWebResponse.StatusCode = 200);
      END;
    END;

    PROCEDURE DeleteDirectory@1100525009(Share@1100525001 : Text;DirectoryPath@1100525000 : Text);
    VAR
      Resource@1100528500 : Text;
    BEGIN
      Resource := ConvertToResource(Share,DirectoryPath);
      DeleteDirectoryByResource(Resource);
    END;

    PROCEDURE DeleteDirectoryByResource@1100528508(Resource@1100525001 : Text);
    VAR
      HttpWebRequest@1100525002 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebRequest";
    BEGIN
      CreateHttpRequest(HttpWebRequest,STRSUBSTNO('%1?restype=directory',Resource),'DELETE');
      HttpWebRequest.ContentLength := 0;
      InvokeRequest(HttpWebRequest);
    END;

    PROCEDURE DirectoryExists@1100528611(Share@1100528501 : Text;Path@1100528500 : Text) : Boolean;
    VAR
      Resource@1100528502 : Text;
    BEGIN
      Resource := ConvertToResource(Share, Path);
      EXIT(DirectoryExistsByResource(Resource));
    END;

    PROCEDURE DirectoryExistsByResource@1100528610(Resource@1100528500 : Text) : Boolean;
    VAR
      HttpWebRequest@1100528502 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebRequest";
      HttpWebResponse@1100528501 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebResponse";
    BEGIN
      CreateHttpRequest(HttpWebRequest,STRSUBSTNO('%1?restype=directory',Resource),'HEAD');
      HttpWebRequest.ContentLength := 0;
      InvokeRequestWithResponse(HttpWebRequest,HttpWebResponse,FALSE);
      EXIT(HttpWebResponse.StatusCode = 200);
    END;

    PROCEDURE IsCorrectEntryName@1100528507(EntryName@1100528502 : Text;IsFullResource@1100528600 : Boolean;WithMessage@1100528601 : Boolean) : Boolean;
    VAR
      DontUseChars@1100528500 : Text;
    BEGIN
      IF IsFullResource THEN
        DontUseChars := '<>:"\|?*'
      ELSE
        DontUseChars := '<>:"/\|?*';
      IF EntryName <> DELCHR(EntryName, '=', DontUseChars) THEN BEGIN
        IF WithMessage THEN
          MESSAGE(Text000, DontUseChars);
        EXIT(FALSE);
      END ELSE
        EXIT(TRUE);
    END;

    PROCEDURE FileExists@1100528518(Share@1100528501 : Text;FilePath@1100528500 : Text) : Boolean;
    VAR
      Resource@1100528502 : Text;
    BEGIN
      Resource := ConvertToResource(Share, FilePath);
      EXIT(FileExistsByResource(Resource));
    END;

    PROCEDURE FileExistsByResource@1100528522(Resource@1100528500 : Text) : Boolean;
    VAR
      HttpWebRequest@1100528502 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebRequest";
      HttpWebResponse@1100528501 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebResponse";
    BEGIN
      CreateHttpRequest(HttpWebRequest,Resource,'HEAD');
      HttpWebRequest.ContentLength := 0;
      InvokeRequestWithResponse(HttpWebRequest,HttpWebResponse,FALSE);
      CLEARLASTERROR;
      EXIT(HttpWebResponse.StatusCode = 200);
    END;

    PROCEDURE GetFileContents@1100525008(Share@1100525001 : Text;FilePath@1100525000 : Text;VAR TempBlob@1100525002 : TEMPORARY Record 99008535);
    VAR
      Resource@1100528500 : Text;
    BEGIN
      Resource := ConvertToResource(Share,FilePath);
      GetFileContentsByResource(Resource, TempBlob);
    END;

    PROCEDURE GetFileContentsByResource@1100528510(Resource@1100525001 : Text;VAR TempBlob@1100525002 : TEMPORARY Record 99008535);
    VAR
      HttpWebRequest@1100525003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebRequest";
      HttpWebResponse@1100525004 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebResponse";
      ResponseInputStream@1100525006 : InStream;
      OutStream@1100525005 : OutStream;
      WaitDialog@1100528500 : Dialog;
    BEGIN
      IF GUIALLOWED THEN
        WaitDialog.OPEN(Text002);
      CreateHttpRequest(HttpWebRequest,Resource,'GET');
      InvokeRequestWithResponse(HttpWebRequest,HttpWebResponse,TRUE);
      ResponseInputStream := HttpWebResponse.GetResponseStream;
      TempBlob.Blob.CREATEOUTSTREAM(OutStream);
      COPYSTREAM(OutStream,ResponseInputStream);
      IF GUIALLOWED THEN
        WaitDialog.CLOSE();
    END;

    PROCEDURE GetFileContentsAsText@1100525025(Share@1100525001 : Text;FilePath@1100525000 : Text) : Text;
    VAR
      Resource@1100528500 : Text;
    BEGIN
      Resource := ConvertToResource(Share,FilePath);
      GetFileContentsAsTextByResource(Resource);
    END;

    PROCEDURE GetFileContentsAsTextByResource@1100528514(Resource@1100525001 : Text) : Text;
    VAR
      TempBlob@1100525002 : TEMPORARY Record 99008535;
    BEGIN
      GetFileContentsByResource(Resource,TempBlob);
      EXIT(TempBlob.ReadAsText(CRLF, TEXTENCODING::UTF8));
    END;

    PROCEDURE GetFileContentsViaMemoryStream@1100528530(Share@1100528501 : Text;FilePath@1100528500 : Text;VAR MemoryStream@1100528502 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream");
    VAR
      Resource@1100528503 : Text;
    BEGIN
      Resource := ConvertToResource(Share,FilePath);
      GetFileContentsViaMemoryStreamByResource(Resource, MemoryStream);
    END;

    PROCEDURE GetFileContentsViaMemoryStreamByResource@1100528524(Resource@1100528501 : Text;VAR MemoryStream@1100528502 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream");
    VAR
      TempBlob@1100528500 : TEMPORARY Record 99008535;
      InStr@1100528503 : InStream;
      Stream@1100528504 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";
    BEGIN
      GetFileContentsByResource(Resource,TempBlob);
      IF TempBlob.Blob.HASVALUE THEN BEGIN
        TempBlob.Blob.CREATEINSTREAM(InStr);
        Stream := InStr;
        Stream.CopyTo(MemoryStream);
      END;
    END;

    PROCEDURE GetUrlByResource@1100527802(Resource@1100528500 : Text) : Text;
    VAR
      Url@1100528501 : Text;
    BEGIN
      Url := GetDownloadUrlByResource(Resource, CURRENTDATETIME - 15 * 60 * 1000, 0DT);
      EXIT(Url);
    END;

    PROCEDURE DownloadViaUrlByResource@1100528523(Resource@1100528500 : Text);
    VAR
      Url@1100528501 : Text;
    BEGIN
      Url := GetDownloadUrlByResource(Resource, CURRENTDATETIME - 15 * 60 * 1000, 0DT);
      HYPERLINK(Url);
    END;

    PROCEDURE GetDownloadUrlByResource@1100528572(Resource@1100528500 : Text;Start@1100528522 : DateTime;Expiry@1100528523 : DateTime) URL : Text;
    VAR
      HMACSHA256@1100528518 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Security.Cryptography.HMACSHA256";
      Convert@1100528517 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      Encoding@1100528515 : DotNet "'mscorlib'.System.Text.Encoding";
      Signature@1100528516 : Text;
      StringToSign@1100528514 : Text;
      SignedPermission@1100528501 : Text;
      SignedStart@1100528502 : Text;
      SignedExpiry@1100528503 : Text;
      CanonicalizedResource@1100528504 : Text;
      SignedIdentifier@1100528505 : Text;
      SignedIP@1100528507 : Text;
      SignedProtocol@1100528520 : Text;
      SignedVersion@1100528508 : Text;
      rscc@1100528509 : Text;
      rscd@1100528510 : Text;
      rsce@1100528511 : Text;
      rscl@1100528512 : Text;
      rsct@1100528513 : Text;
      SignedResource@1100528519 : Text;
    BEGIN
      SignedPermission := 'r';                 //required
      IF Start <> 0DT THEN
        SignedStart :=                         //optional
          FORMAT(ROUNDDATETIME(Start), 0, 9);  // -15min prefered due to server time differences
      IF Expiry = 0DT THEN
        Expiry := CURRENTDATETIME + 30 * 1000; // defaults to 30 seconds
      SignedExpiry :=                          //required
        FORMAT(ROUNDDATETIME(Expiry), 0, 9);
      CanonicalizedResource :=                 //required
        GetConanicalResourceSAS(Resource);
      SignedIdentifier := '';                  //optional
      SignedIP := '';                          //optional
      SignedProtocol := 'https';               //optional
      SignedVersion := GetVersion();           //required
      rscc := '';                              //optional (Cache-Control)
      rscd := 'file; attachment';              //optional (Content-Disposition)
      rsce := '';                              //optional (Content-Encoding)
      rscl := '';                              //optional (Content-Language)
      rsct := 'binary';                        //optional (Content-Type)
      SignedResource := 'f';                   //required

      StringToSign := STRSUBSTNO(SasSignaturePattern,
        NewLine,
        SignedPermission,
        SignedStart,
        SignedExpiry,
        CanonicalizedResource,
        SignedIdentifier,
        SignedIP,
        SignedProtocol,
        SignedVersion,
        rscc,
        rscd,
        rsce,
        rscl,
        rsct);

      HMACSHA256 := HMACSHA256.HMACSHA256(Convert.FromBase64String(GetSharedKey));
      Signature := Convert.ToBase64String(HMACSHA256.ComputeHash(Encoding.UTF8.GetBytes(StringToSign)));

      URL := STRSUBSTNO('%1/%2?sv=%3&se=%4&sr=%5&sp=%6&sig=%7',
        GetRoot(),
        Resource,
        UrlEncode(SignedVersion),
        UrlEncode(SignedExpiry),
        UrlEncode(SignedResource),
        UrlEncode(SignedPermission),
        UrlEncode(Signature));

      IF SignedStart <> '' THEN
        URL := STRSUBSTNO('%1&st=%2', URL, UrlEncode(SignedStart));
      IF SignedProtocol <> '' THEN
        URL := STRSUBSTNO('%1&spr=%2', URL, UrlEncode(SignedProtocol));
      IF rscc <> '' THEN
        URL := STRSUBSTNO('%1&rscc=%2', URL, UrlEncode(rscc));
      IF rscd <> '' THEN
        URL := STRSUBSTNO('%1&rscd=%2', URL, UrlEncode(rscd));
      IF rsce <> '' THEN
        URL := STRSUBSTNO('%1&rsce=%2', URL, UrlEncode(rsce));
      IF rscl <> '' THEN
        URL := STRSUBSTNO('%1&rscl=%2', URL, UrlEncode(rscl));
      IF rsct <> '' THEN
        URL := STRSUBSTNO('%1&rsct=%2', URL, UrlEncode(rsct));
    END;

    PROCEDURE ExportFile@1100528513(Share@1100528500 : Text;FilePath@1100528501 : Text);
    VAR
      Resource@1100528502 : Text;
    BEGIN
      Resource := ConvertToResource(Share,FilePath);
      ExportFileByResource(Resource);
    END;

    PROCEDURE ExportFileByResource@1100528516(Resource@1100528500 : Text);
    VAR
      TempBlob@1100528502 : TEMPORARY Record 99008535;
      FileManagement@1100528501 : Codeunit 419;
      FileName@1100528503 : Text;
    BEGIN
      GetFileContentsByResource(Resource, TempBlob);
      FileName := FileManagement.GetFileName(Resource);
      FileManagement.BLOBExport(TempBlob, FileName, TRUE);
    END;

    PROCEDURE UploadFile@1100525018(Share@1100525000 : Text;FilePath@1100525001 : Text;ContentType@1100525003 : Text;SourceFileName@1100525002 : Text);
    VAR
      FileManagement@1100525004 : Codeunit 419;
      Resource@1100527800 : Text;
    BEGIN
      IF FilePath = '' THEN
        FilePath := FileManagement.GetFileName(SourceFileName);
      Resource := ConvertToResource(Share,FilePath);
      UploadFileByResource(Resource, ContentType, SourceFileName);
    END;

    PROCEDURE UploadFileNoBlob@1100528613(Share@1100528600 : Text;Path@1100528601 : Text;DialogCaption@1100528603 : Text);
    VAR
      Resource@1100528602 : Text;
    BEGIN
      Resource := ConvertToResource(Share,Path);
      UploadFileNoBlobByResource(Resource,DialogCaption);
    END;

    PROCEDURE UploadFileNoBlobByResource@1100528602(ResourcePath@1100528601 : Text;DialogCaption@1100528604 : Text);
    VAR
      FileManagement@1100528606 : Codeunit 419;
      BinaryReader@1100528615 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.BinaryReader";
      Data@1100528614 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      IStream@1100528603 : InStream;
      FileName@1100528605 : Text;
      ErrorMessage@1100528607 : Text;
      UploadResult@1100528602 : Boolean;
      BytesRead@1100528612 : Integer;
      FileSize@1100528611 : Integer;
      Offset@1100528610 : Integer;
      BlockSize@1100528609 : Integer;
      FileCreated@1100528608 : Boolean;
      Resource@1100528600 : Text;
      ContentType@1100528613 : Text;
    BEGIN
      IF NOT DirectoryExistsByResource(ResourcePath) THEN
        ERROR(Text004, ResourcePath);
      UploadResult := UPLOADINTOSTREAM(DialogCaption,'',AllFilesDescriptionTxt,FileName,IStream);
      IF UploadResult THEN
        FileManagement.ValidateFileExtension(FileName,AllFilesFilterTxt);
      IF UploadResult THEN BEGIN
        Resource := STRSUBSTNO('%1/%2', ResourcePath, FileManagement.GetFileName(FileName));
        IF FileExistsByResource(Resource) THEN
          IF NOT CONFIRM(Text005, FALSE, Resource) THEN
            ERROR('');
        BinaryReader := BinaryReader.BinaryReader(IStream);
        FileSize := 0;
        Offset := 0;
        BlockSize := 4 * 1024 * 1024;
        IF GUIALLOWED THEN
          ProgressDialog.OPEN(Text001);
        Data := BinaryReader.ReadBytes(BlockSize);
        WHILE Data.Length > 0 DO BEGIN
          BytesRead := Data.Length;
          FileSize += BytesRead;
          IF NOT FileCreated THEN BEGIN
            CreateFileByResource(Resource, ContentType, FileSize);
            FileCreated := TRUE;
          END ELSE
            ResizeFileByResource(Resource, FileSize);
          UploadFilePerBlock(Resource, Data, Offset);
          Offset += BytesRead;
          Data := BinaryReader.ReadBytes(BlockSize);
          IF GUIALLOWED THEN
            ProgressDialog.UPDATE(1, SizeToString(FileSize));
        END;
        IF GUIALLOWED THEN
          ProgressDialog.CLOSE;
      END;
      ErrorMessage := GETLASTERRORTEXT;
      IF ErrorMessage <> '' THEN
        ERROR(ErrorMessage);
    END;

    PROCEDURE UploadFileByResource@1100528519(Resource@1100525000 : Text;ContentType@1100525003 : Text;SourceFileName@1100525002 : Text);
    VAR
      TempBlob@1100525005 : TEMPORARY Record 99008535;
      FileManagement@1100525004 : Codeunit 419;
    BEGIN
      FileManagement.BLOBImportFromServerFile(TempBlob, SourceFileName);
      UploadFileViaBlobByResource(Resource, ContentType, TempBlob);
    END;

    PROCEDURE UploadFileViaBlob@1100525021(Share@1100525002 : Text;FilePath@1100525001 : Text;ContentType@1100525005 : Text;VAR TempBlob@1100525000 : TEMPORARY Record 99008535);
    VAR
      Resource@1100528500 : Text;
    BEGIN
      Resource := ConvertToResource(Share,FilePath);
      UploadFileViaBlobByResource(Resource,ContentType,TempBlob);
    END;

    PROCEDURE UploadFileViaBlobByResource@1100528520(Resource@1100525002 : Text;ContentType@1100525005 : Text;VAR TempBlob@1100525000 : TEMPORARY Record 99008535);
    VAR
      BinaryReader@1100528506 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.BinaryReader";
      Data@1100528502 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      InStr@1100525003 : InStream;
      BytesRead@1100528501 : Integer;
      FileSize@1100528500 : Integer;
      Offset@1100528503 : Integer;
      BlockSize@1100528508 : Integer;
      FileCreated@1100528504 : Boolean;
    BEGIN
      TempBlob.Blob.CREATEINSTREAM(InStr);
      BinaryReader := BinaryReader.BinaryReader(InStr);
      FileSize := 0;
      Offset := 0;
      BlockSize := 4 * 1024 * 1024;
      IF GUIALLOWED THEN
        ProgressDialog.OPEN(Text001);
      Data := BinaryReader.ReadBytes(BlockSize);
      WHILE Data.Length > 0 DO BEGIN
        BytesRead := Data.Length;
        FileSize += BytesRead;
        IF NOT FileCreated THEN BEGIN
          CreateFileByResource(Resource, ContentType, FileSize);
          FileCreated := TRUE;
        END ELSE
          ResizeFileByResource(Resource, FileSize);
        UploadFilePerBlock(Resource, Data, Offset);
        Offset += BytesRead;
        Data := BinaryReader.ReadBytes(BlockSize);
        IF GUIALLOWED THEN
          ProgressDialog.UPDATE(1, SizeToString(FileSize));
      END;
      IF GUIALLOWED THEN
        ProgressDialog.CLOSE;
    END;

    PROCEDURE UploadFileViaMemoryStream@1100528612(Share@1100528600 : Text;FilePath@1100528601 : Text;ContentType@1100528604 : Text;MemoryStream@1100528602 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream");
    VAR
      Resource@1100528603 : Text;
    BEGIN
      Resource := ConvertToResource(Share,FilePath);
      UploadFileViaMemoryStreamByResource(Resource,ContentType,MemoryStream);
    END;

    PROCEDURE UploadFileViaMemoryStreamByResource@1100528615(Resource@1100528600 : Text;ContentType@1100528605 : Text;MemoryStream@1100528601 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream");
    VAR
      TempBlob@1100528604 : TEMPORARY Record 99008535;
      OutStr@1100528603 : OutStream;
    BEGIN
      TempBlob.Blob.CREATEOUTSTREAM(OutStr);
      COPYSTREAM(OutStr, MemoryStream);
      UploadFileViaBlobByResource(Resource,ContentType,TempBlob);
    END;

    PROCEDURE CreateTextFile@1100525032(Share@1100525001 : Text;FilePath@1100525000 : Text;Contents@1100525002 : Text);
    VAR
      Resource@1100528500 : Text;
    BEGIN
      Resource := ConvertToResource(Share,FilePath);
      CreateTextFileByResource(Resource,Contents);
    END;

    PROCEDURE CreateTextFileByResource@1100528512(Resource@1100525001 : Text;Contents@1100525002 : Text);
    VAR
      TempBlob@1100525007 : TEMPORARY Record 99008535;
    BEGIN
      TempBlob.WriteAsText(Contents,TEXTENCODING::UTF8);
      UploadFileViaBlobByResource(Resource,'text/plain; charset=UTF-8',TempBlob);
    END;

    PROCEDURE DeleteFile@1100525002(Share@1100525001 : Text;FilePath@1100525000 : Text);
    VAR
      Resource@1100528500 : Text;
    BEGIN
      Resource := ConvertToResource(Share,FilePath);
      DeleteFileByResource(Resource);
    END;

    PROCEDURE DeleteFileByResource@1100528515(Resource@1100525001 : Text);
    VAR
      HttpWebRequest@1100525002 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebRequest";
    BEGIN
      CreateHttpRequest(HttpWebRequest,Resource,'DELETE');
      HttpWebRequest.ContentLength := 0;
      InvokeRequest(HttpWebRequest);
    END;

    PROCEDURE ListFiles@1100525003(Share@1100525000 : Text;DirectoryPath@1100525001 : Text;EntryType@1100528506 : 'Share,Directory,File';VAR AzureFileEntryBuffer@1100528500 : TEMPORARY Record 11128546);
    VAR
      XMLDOMManagement@1100525005 : Codeunit 6224;
      HttpWebRequest@1100525002 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebRequest";
      HttpWebResponse@1100528501 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebResponse";
      ParentNode@1100528504 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      EntryNode@1100528503 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XmlDocument@1100528505 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      Resource@1100525007 : Text;
      ResponseInputStream@1100528502 : InStream;
      EntrySize@1100528507 : BigInteger;
    BEGIN
      AzureFileEntryBuffer.RESET;
      AzureFileEntryBuffer.DELETEALL;
      Resource := ConvertToResource(Share,DirectoryPath);
      Resource += '?comp=list';
      IF Share <> '' THEN
        Resource += '&restype=directory';
      CreateHttpRequest(HttpWebRequest,Resource,'GET');
      InvokeRequestWithResponse(HttpWebRequest,HttpWebResponse,TRUE);

      ResponseInputStream := HttpWebResponse.GetResponseStream;
      XMLDOMManagement.LoadXMLDocumentFromInStream(ResponseInputStream,XmlDocument);

      IF Share <> '' THEN
        ParentNode := XmlDocument.SelectSingleNode('.//Entries')
      ELSE
        ParentNode := XmlDocument.SelectSingleNode('.//Shares');

      FOREACH EntryNode IN ParentNode DO BEGIN
        CASE EntryNode.Name OF
          'File':
            BEGIN
              IF EntryType IN [EntryType::File] THEN BEGIN
                AzureFileEntryBuffer.INIT;
                AzureFileEntryBuffer."Entry Type" := AzureFileEntryBuffer."Entry Type"::File;
                AzureFileEntryBuffer."Entry Name" := EntryNode.SelectSingleNode('Name').InnerText;
                EVALUATE(EntrySize, EntryNode.SelectSingleNode('Properties/Content-Length').InnerText);
                AzureFileEntryBuffer."Entry Size" := SizeToString(EntrySize);
                AzureFileEntryBuffer.INSERT;
              END;
            END;
          'Directory':
            BEGIN
              IF EntryType IN [EntryType::Directory, EntryType::File] THEN BEGIN
                AzureFileEntryBuffer.INIT;
                AzureFileEntryBuffer."Entry Type" := AzureFileEntryBuffer."Entry Type"::Directory;
                AzureFileEntryBuffer."Entry Name" := EntryNode.SelectSingleNode('Name').InnerText;
                AzureFileEntryBuffer.INSERT;
              END;
            END;
          'Share':
            BEGIN
              IF EntryType IN [EntryType::Share] THEN BEGIN
                AzureFileEntryBuffer.INIT;
                AzureFileEntryBuffer."Entry Type" := AzureFileEntryBuffer."Entry Type"::Share;
                AzureFileEntryBuffer."Entry Name" := EntryNode.SelectSingleNode('Name').InnerText;
                AzureFileEntryBuffer."Last Modified" := ConvertStringToDateTime(EntryNode.SelectSingleNode('Properties/Last-Modified').InnerText);
                AzureFileEntryBuffer.INSERT;
              END;
            END;
        END;
      END;
      IF AzureFileEntryBuffer.FINDFIRST THEN;
    END;

    PROCEDURE SelectEntry@1100528500(Share@1100528506 : Text;Path@1100528507 : Text;EntryType@1100528500 : 'Share,Directory,File';ReadOnly@1100528501 : Boolean;ChangeShareEnabled@1100528502 : Boolean) : Text;
    BEGIN
      EXIT(SelectEntryByResource(ConvertToResource(Share, Path), EntryType, ReadOnly, ChangeShareEnabled));
    END;

    PROCEDURE SelectEntryByResource@1100528608(Resource@1100528600 : Text;EntryType@1100528500 : 'Share,Directory,File';ReadOnly@1100528501 : Boolean;CanChangeShare@1100528502 : Boolean) : Text;
    VAR
      AzureFileStorageDialog@1100528508 : Page 11130369;
      Share@1100528601 : Text;
      Path@1100528602 : Text;
    BEGIN
      BreakDownResourceToShareAndPath(Resource, Share, Path);
      AzureFileStorageDialog.SetDefaults(Share,Path,EntryType,ReadOnly,CanChangeShare);
      AzureFileStorageDialog.LOOKUPMODE := TRUE;
      IF AzureFileStorageDialog.RUNMODAL = ACTION::LookupOK THEN
        EXIT(AzureFileStorageDialog.GetResource(''));
    END;

    PROCEDURE SelectMultipleEntriesByResource@1100525012(Resource@1100525006 : Text;EntryType@1100525005 : 'Share,Directory,File';ReadOnly@1100525004 : Boolean;CanChangeShare@1100525003 : Boolean;VAR FileNames@1100525007 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array") : Boolean;
    VAR
      AzureFileStorageDialog@1100525002 : Page 11130369;
      Share@1100525001 : Text;
      Path@1100525000 : Text;
    BEGIN
      BreakDownResourceToShareAndPath(Resource, Share, Path);
      AzureFileStorageDialog.SetDefaults(Share,Path,EntryType,ReadOnly,CanChangeShare);
      AzureFileStorageDialog.LOOKUPMODE := TRUE;
      IF AzureFileStorageDialog.RUNMODAL = ACTION::LookupOK THEN BEGIN
        AzureFileStorageDialog.GetMultiResources(FileNames);
        EXIT(TRUE);
      END;
    END;

    PROCEDURE GetLastModified@1100528502(Share@1100528500 : Text;FilePath@1100528502 : Text;EntryType@1100528501 : 'Directory,File') : DateTime;
    VAR
      HttpWebResponse@1100528505 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebResponse";
      Resource@1100528507 : Text;
    BEGIN
      Resource := ConvertToResource(Share,FilePath);
      CASE EntryType OF
        EntryType::Directory:
          GetDirectoryProperties(Resource,HttpWebResponse,TRUE);
        EntryType::File:
          GetFileProperties(Resource, HttpWebResponse,TRUE);
      END;
      EXIT(ConvertStringToDateTime(HttpWebResponse.Headers.Get('Last-Modified')));
    END;

    PROCEDURE ConvertToFilePath@1100528503(Path@1100528500 : Text;FileName@1100528501 : Text) : Text;
    BEGIN
      IF Path = '' THEN
        EXIT(FileName);
      IF FileName = '' THEN
        EXIT(Path);
      EXIT(STRSUBSTNO('%1%2',AddSlashToResource(Path),FileName));
    END;

    PROCEDURE ConvertToResource@1100528505(Share@1100528500 : Text;Path@1100528501 : Text) : Text;
    BEGIN
      IF Share = '' THEN
        EXIT(Path);
      IF Path = '' THEN
        EXIT(Share);
      EXIT(STRSUBSTNO('%1/%2',Share,Path));
    END;

    PROCEDURE AddSlashToResource@1100525004(Resource@1100525000 : Text) : Text;
    BEGIN
      IF Resource <> '' THEN
        IF COPYSTR(Resource, STRLEN(Resource), 1) = '/' THEN
          EXIT(Resource);
      EXIT(STRSUBSTNO('%1/', Resource));
    END;

    PROCEDURE BreakDownResourceToShareAndPath@1100528614(Resource@1100528600 : Text;VAR Share@1100528601 : Text;VAR Path@1100528602 : Text);
    BEGIN
      Share := GetShareFromResource(Resource);
      Path := GetPathFromResource(Resource, FALSE);
    END;

    PROCEDURE GetShareFromResource@1100528601(Resource@1100528600 : Text) : Text;
    VAR
      Pos@1100528601 : Integer;
    BEGIN
      Pos := STRPOS(Resource, '/');
      IF Pos = 0 THEN
        EXIT(Resource);
      EXIT(COPYSTR(Resource, 1, Pos -1));
    END;

    PROCEDURE GetPathFromResource@1100528604(Resource@1100528600 : Text;IncludingShare@1100525000 : Boolean) Path : Text;
    VAR
      Pos@1100528601 : Integer;
      ShareFound@1100528602 : Boolean;
      Part@1100528603 : Text;
    BEGIN
      Pos := STRPOS(Resource, '/');
      WHILE Pos > 0 DO BEGIN
        Part := COPYSTR(Resource, 1, Pos -1);
        IF ShareFound OR IncludingShare THEN BEGIN
          IF Path <> '' THEN
            Path += '/';
          Path += Part;
        END ELSE
          ShareFound := TRUE;
        Resource := COPYSTR(Resource, Pos +1, STRLEN(Resource));
        Pos := STRPOS(Resource, '/');
      END;
    END;

    PROCEDURE GetFileFromResource@1100525005(Resource@1100528600 : Text) FileName : Text;
    VAR
      Pos@1100528601 : Integer;
      PathPartFound@1100528602 : Boolean;
    BEGIN
      Pos := STRLEN(Resource);
      WHILE Pos > 0 DO BEGIN
        IF COPYSTR(Resource, Pos, 1) = '/' THEN
          PathPartFound := TRUE;
        IF NOT PathPartFound THEN
          FileName := COPYSTR(Resource, Pos, 1) + FileName;
        Pos -= 1;
      END;
      FileName := UrlDecode(FileName);
    END;

    PROCEDURE SizeToString@1100528504(Size@1100528501 : BigInteger) : Text;
    VAR
      Divider@1100528500 : Integer;
      DividedSize@1100528503 : Decimal;
      DividedCounter@1100528502 : Integer;
      DividerText@1100528504 : ARRAY [10] OF Text;
    BEGIN
      Divider := 1024;
      DividerText[1] := 'B';
      DividerText[2] := 'KiB';
      DividerText[3] := 'MiB';
      DividerText[4] := 'GiB';
      DividerText[5] := 'TiB';
      DividedSize := Size;
      WHILE DividedSize > Divider DO BEGIN
        DividedSize /= Divider;
        DividedCounter += 1;
      END;
      IF DividedCounter = 0 THEN
        EXIT(STRSUBSTNO('%1 %2', Size, DividerText[DividedCounter +1]))
      ELSE
        EXIT(STRSUBSTNO('%1 %2', FORMAT(DividedSize,0,'<Precision,2:2><Standard Format,2>'), DividerText[DividedCounter +1]));
    END;

    PROCEDURE CopyFileByResource@1100528600(FromResource@1100528600 : Text;ToResource@1100528601 : Text;WaitForItToFinish@1100528607 : Boolean) : Text;
    VAR
      HttpWebRequest@1100528604 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebRequest";
      HttpWebResponse@1100528603 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebResponse";
      CopyStatus@1100528602 : Text;
      CopyId@1100528605 : Text;
      CopyHasFinished@1100528606 : Boolean;
    BEGIN
      CreateHttpRequest(HttpWebRequest,STRSUBSTNO('%1',ToResource),'PUT');
      HttpWebRequest.ContentLength := 0;
      HttpWebRequest.Headers.Add('x-ms-copy-source', GetRoot() + '/' + FromResource);
      InvokeRequestWithResponse(HttpWebRequest,HttpWebResponse,FALSE);
      CopyStatus := HttpWebResponse.Headers.Get('x-ms-copy-status');
      IF WaitForItToFinish AND (CopyStatus = 'pending') THEN BEGIN
        CopyId := HttpWebResponse.Headers.Get('x-ms-copy-id');
        CopyHasFinished := FALSE;
        WHILE NOT CopyHasFinished DO BEGIN
          SLEEP(1000);
          GetFileProperties(ToResource, HttpWebResponse,TRUE);
          IF HttpWebResponse.StatusCode = 200 THEN BEGIN
            IF HttpWebResponse.Headers.Get('x-ms-copy-id') = CopyId THEN BEGIN
              CopyStatus := HttpWebResponse.Headers.Get('x-ms-copy-status');
              CopyHasFinished := CopyStatus <> 'pending';
            END ELSE
              CopyHasFinished := TRUE;
          END;
        END;
      END;
      EXIT(CopyStatus);
    END;

    PROCEDURE GetParentResource@1100528603(Resource@1100528600 : Text) ParentResource : Text;
    VAR
      Uri@1100528601 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Uri";
      PreUrl@1100528602 : Text;
      Url@1100528603 : Text;
    BEGIN
      PreUrl := STRSUBSTNO('%1/', GetRoot());
      Url := PreUrl + Resource;
      Uri := Uri.Uri(Uri.Uri(Url), '.');
      ParentResource := Uri.ToString();
      IF ParentResource = PreUrl THEN
        EXIT('');
      ParentResource := COPYSTR(ParentResource, STRLEN(GetRoot()) +2, STRLEN(ParentResource) - STRLEN(GetRoot()) -2);
    END;

    PROCEDURE RenameFileByResource@1100528605(FromResource@1100528600 : Text;ToResource@1100528601 : Text);
    BEGIN
      IF FileExistsByResource(ToResource) THEN
        ERROR(Text003, ToResource);
      IF CopyFileByResource(FromResource,ToResource,TRUE) = 'success' THEN
        DeleteFileByResource(FromResource);
    END;

    PROCEDURE UrlEncode@1100528609(Url@1100528600 : Text) EncodedUrl : Text;
    VAR
      HttpUtility@1100528601 : DotNet "'System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Web.HttpUtility";
    BEGIN
      EXIT(HttpUtility.UrlEncode(Url));
    END;

    PROCEDURE UrlDecode@1100528616(Url@1100528600 : Text) DecodedUrl : Text;
    VAR
      HttpUtility@1100528601 : DotNet "'System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Web.HttpUtility";
    BEGIN
      EXIT(HttpUtility.UrlDecode(Url));
    END;

    PROCEDURE TestConnection@1100527800() : Boolean;
    VAR
      AzureFileStorageSetup@1100527801 : Record 11128547;
    BEGIN
      IF (IsConfigured) THEN
        IF (AzureFileStorageSetup.GET) THEN
          EXIT (DirectoryExists('',AzureFileStorageSetup."Storage Location"));
    END;

    PROCEDURE IsConfigured@1100527801() : Boolean;
    VAR
      AzureFileStorageSetup@1100527800 : Record 11128547;
    BEGIN
      IF (AzureFileStorageSetup.GET) THEN BEGIN
        IF (AzureFileStorageSetup."Account Name" <> '') AND
           (AzureFileStorageSetup."Access Key" <> '') AND
           (AzureFileStorageSetup."Storage Location" <> '')
        THEN
          EXIT(TRUE);
      END;
    END;

    PROCEDURE GetMainStorageLocation@1100527803(VAR TargetFolderURI@1100527800 : Text);
    VAR
      AzureFileStorageSetup@1100527801 : Record 11128547;
      StringFunctions@1100527802 : Codeunit 11012273;
    BEGIN
      AzureFileStorageSetup.GET;
      AzureFileStorageSetup.TESTFIELD("Storage Location");
      TargetFolderURI := AzureFileStorageSetup."Storage Location";
      StringFunctions.CheckEndingSlash(TargetFolderURI);
    END;

    PROCEDURE GetTemplateLocation@1100527804(TemplateFolder@1100527800 : Text;VAR TargetFolderURI@1100527801 : Text);
    VAR
      StringFunctions@1100527802 : Codeunit 11012273;
    BEGIN
      GetMainStorageLocation(TargetFolderURI);
      TargetFolderURI += TemplateFolder;
      StringFunctions.CheckEndingSlash(TemplateFolder);
    END;

    PROCEDURE GetTempStorageLocation@1100527805(VAR TargetFolderURI@1100527800 : Text);
    VAR
      AzureFileStorageSetup@1100527801 : Record 11128547;
      StringFunctions@1100527802 : Codeunit 11012273;
    BEGIN
      AzureFileStorageSetup.GET;
      AzureFileStorageSetup.TESTFIELD("Temporary Folder");
      GetMainStorageLocation(TargetFolderURI);
      TargetFolderURI += AzureFileStorageSetup."Temporary Folder";
      StringFunctions.CheckEndingSlash(TargetFolderURI);
    END;

    LOCAL PROCEDURE "------ LOCALS ------"@1100525001();
    BEGIN
    END;

    LOCAL PROCEDURE CreateFile@1100525011(Share@1100525000 : Text;FilePath@1100525001 : Text;ContentType@1100525004 : Text;Size@1100525002 : Integer);
    VAR
      Resource@1100528500 : Text;
    BEGIN
      Resource := ConvertToResource(Share,FilePath);
      CreateFileByResource(Resource,ContentType,Size);
    END;

    LOCAL PROCEDURE CreateFileByResource@1100528521(Resource@1100525000 : Text;ContentType@1100525004 : Text;Size@1100525002 : Integer);
    VAR
      HttpWebRequest@1100525003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebRequest";
    BEGIN
      CreateHttpRequest(HttpWebRequest,Resource,'PUT');
      HttpWebRequest.ContentLength := 0;
      HttpWebRequest.ContentType := ContentType;
      HttpWebRequest.Headers.Add('x-ms-content-length',FORMAT(Size));
      HttpWebRequest.Headers.Add('x-ms-type','file');
      InvokeRequest(HttpWebRequest);
    END;

    LOCAL PROCEDURE ResizeFileByResource@1100528511(Resource@1100528500 : Text;NewSize@1100528501 : Integer);
    VAR
      HttpWebRequest@1100528502 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebRequest";
    BEGIN
      CreateHttpRequest(HttpWebRequest,STRSUBSTNO('%1?comp=properties', Resource),'PUT');
      HttpWebRequest.ContentLength := 0;
      HttpWebRequest.Headers.Add('x-ms-content-length', FORMAT(NewSize));
      InvokeRequest(HttpWebRequest);
    END;

    LOCAL PROCEDURE UploadFilePerBlock@1100528509(Resource@1100528501 : Text;Content@1100528504 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";Offset@1100528502 : Integer);
    VAR
      HttpWebRequest@1100528500 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebRequest";
    BEGIN
      CreateHttpRequest(HttpWebRequest,STRSUBSTNO('%1?comp=range',Resource),'PUT');
      HttpWebRequest.Headers.Add('x-ms-write','update');
      HttpWebRequest.AddRange(Offset,Offset + Content.Length -1);
      HttpWebRequest.GetRequestStream().Write(Content,0,Content.Length);
      HttpWebRequest.GetRequestStream().Close();
      InvokeRequest(HttpWebRequest);
    END;

    LOCAL PROCEDURE CreateHttpRequest@1100525015(VAR HttpWebRequest@1100525000 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebRequest";Resource@1100525001 : Text;Verb@1100525002 : Text);
    VAR
      String@1100525003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
    BEGIN
      HttpWebRequest := HttpWebRequest.Create(GetRoot() + '/' + Resource);
      HttpWebRequest.Method := Verb;
      HttpWebRequest.Headers.Add('x-ms-date',String.Format('{0:R}',CURRENTDATETIME,'R'));
      HttpWebRequest.Headers.Add('x-ms-version',GetVersion());
    END;

    LOCAL PROCEDURE GetRoot@1100525016() : Text;
    BEGIN
      EXIT(STRSUBSTNO(AccountRoot, GetAccountName()));
    END;

    LOCAL PROCEDURE GetAccountName@1100525013() : Text;
    VAR
      AzureFileStorageSetup@1100528500 : Record 11128547;
    BEGIN
      AzureFileStorageSetup.GET;
      EXIT(AzureFileStorageSetup."Account Name");
    END;

    LOCAL PROCEDURE GetSharedKey@1100525014() : Text;
    VAR
      AzureFileStorageSetup@1100528500 : Record 11128547;
    BEGIN
      AzureFileStorageSetup.GET;
      EXIT(AzureFileStorageSetup."Access Key");
    END;

    LOCAL PROCEDURE InvokeRequest@1100525028(HttpWebRequest@1100525000 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebRequest");
    VAR
      HttpWebResponse@1100525001 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebResponse";
      WebException@1100525002 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.WebException";
    BEGIN
      Authorize(HttpWebRequest);

      IF NOT GetResponse(HttpWebRequest,HttpWebResponse) THEN BEGIN
        WebException := GETLASTERROROBJECT;
        WebException := WebException.InnerException;
        ERROR(textRequestError,HttpWebRequest.Address,WebException.Message);
      END;
      HttpWebResponse.Close();
    END;

    LOCAL PROCEDURE InvokeRequestWithResponse@1100525006(HttpWebRequest@1100525000 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebRequest";VAR HttpWebResponse@1100525004 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebResponse";HaltOnError@1100528500 : Boolean);
    VAR
      WebException@1100525002 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.WebException";
    BEGIN
      Authorize(HttpWebRequest);
      IF NOT GetResponse(HttpWebRequest,HttpWebResponse) THEN BEGIN
        WebException := GETLASTERROROBJECT;
        WebException := WebException.InnerException;
        HttpWebResponse := WebException.Response;
        IF HaltOnError THEN
          ERROR(textRequestError,HttpWebRequest.Address,WebException.Message)
        ELSE
          CLEARLASTERROR;
      END;
    END;

    LOCAL PROCEDURE Authorize@1100525017(HttpWebRequest@1100525000 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebRequest");
    VAR
      StringToSign@1100525001 : Text;
      HMACSHA256@1100525002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Security.Cryptography.HMACSHA256";
      Convert@1100525003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      Signature@1100525004 : Text;
      Encoding@1100525005 : DotNet "'mscorlib'.System.Text.Encoding";
    BEGIN
      StringToSign := STRSUBSTNO(SignaturePattern,
        NewLine,
        HttpWebRequest.Method,
        HttpWebRequest.ContentType,
        GetConanicalHeader(HttpWebRequest),
        GetAccountName(),
        GetConanicalResource(HttpWebRequest.Address.PathAndQuery),
        GetRange(HttpWebRequest),
        GetContentLength(HttpWebRequest));
      HMACSHA256 := HMACSHA256.HMACSHA256(Convert.FromBase64String(GetSharedKey));
      Signature := Convert.ToBase64String(HMACSHA256.ComputeHash(Encoding.UTF8.GetBytes(StringToSign)));
      HttpWebRequest.Headers.Add('Authorization','SharedKey ' + GetAccountName() + ':' + Signature);
    END;

    [TryFunction]
    LOCAL PROCEDURE GetResponse@1100525023(HttpWebRequest@1100525000 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebRequest";VAR HttpWebResponse@1100525001 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebResponse");
    BEGIN
      HttpWebResponse := HttpWebRequest.GetResponse();
    END;

    LOCAL PROCEDURE GetRange@1100525024(HttpWebRequest@1100525000 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebRequest") : Text;
    BEGIN
      EXIT(FORMAT(HttpWebRequest.Headers.Get('Range')));
    END;

    LOCAL PROCEDURE GetContentLength@1100525026(HttpWebRequest@1100525000 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebRequest") : Text;
    BEGIN
      IF HttpWebRequest.ContentLength > 0 THEN
        EXIT(FORMAT(HttpWebRequest.ContentLength));
    END;

    LOCAL PROCEDURE GetConanicalHeader@1100525019(Request@1100525001 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebRequest") Conanical : Text;
    VAR
      HeaderNames@1100525000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.ArrayList";
      HeaderName@1100525002 : Text;
      Pair@1100525003 : Text;
    BEGIN
      HeaderNames := HeaderNames.ArrayList();
      FOREACH HeaderName IN Request.Headers.Keys DO BEGIN
        IF LOWERCASE(COPYSTR(HeaderName,1,5)) = 'x-ms-' THEN
          HeaderNames.Add(LOWERCASE(HeaderName));
      END;
      HeaderNames.Sort();

      FOREACH HeaderName IN HeaderNames DO BEGIN
        Pair := STRSUBSTNO(ConanicalPair,HeaderName,Request.Headers.Get(HeaderName));
        Conanical := STRSUBSTNO(ConanicalString,NewLine(),Conanical,Pair);
      END;
    END;

    LOCAL PROCEDURE GetConanicalResource@1100525020(Url@1100525000 : Text) Conanical : Text;
    VAR
      Resource@1100525001 : Text;
      Result@1100525002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      String@1100525003 : Text;
      Pair@1100525004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
    BEGIN
      Resource := COPYSTR(Url, 2);
      SplitString(Resource,'?',Result);
      IF Result.Length = 1 THEN
        EXIT(Resource);

      Conanical := Result.GetValue(0);
      SplitString(Result.GetValue(1),'&',Result);
      FOREACH String IN Result DO BEGIN
        SplitString(String,'=',Pair);
        String := STRSUBSTNO(ConanicalPair,Pair.GetValue(0),Pair.GetValue(1));
        Conanical := STRSUBSTNO(ConanicalString,NewLine(),Conanical,String);
      END;
    END;

    LOCAL PROCEDURE GetConanicalResourceSAS@1100528526(Resource@1100525000 : Text) Conanical : Text;
    BEGIN
      Conanical := STRSUBSTNO('/file/%1/%2', GetAccountName(), Resource);
    END;

    LOCAL PROCEDURE NewLine@1100525030() ReturnChar : Char;
    BEGIN
      ReturnChar := 10;
    END;

    LOCAL PROCEDURE CRLF@1100528517() CRLF : Text[2];
    BEGIN
      CRLF := ' ';
      CRLF[1] := 13;
      CRLF[2] := 10;
    END;

    LOCAL PROCEDURE SplitString@1100525031(String@1100525000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";Separator@1100525001 : Char;VAR Result@1100525002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      SeparatorString@1100525003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
    BEGIN
      SeparatorString := FORMAT(Separator);
      Result := String.Split(SeparatorString.ToCharArray());
    END;

    LOCAL PROCEDURE ConvertStringToDateTime@1100528501(DateTimeRepresentation@1100528500 : Text) : DateTime;
    VAR
      DateTime@1100528501 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.DateTime";
    BEGIN
      EXIT(DateTime.Parse(DateTimeRepresentation));
    END;

    LOCAL PROCEDURE GetVersion@1100528527() : Text;
    BEGIN
      EXIT('2017-04-17');
    END;

    LOCAL PROCEDURE GetFileProperties@1100528606(Resource@1100528600 : Text;VAR HttpWebResponse@1100528601 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebResponse";HaltOnError@1100528602 : Boolean);
    VAR
      HttpWebRequest@1100528603 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebRequest";
    BEGIN
      CreateHttpRequest(HttpWebRequest,Resource,'HEAD');
      HttpWebRequest.ContentLength := 0;
      InvokeRequestWithResponse(HttpWebRequest,HttpWebResponse,HaltOnError);
    END;

    LOCAL PROCEDURE GetDirectoryProperties@1100528607(Resource@1100528600 : Text;VAR HttpWebResponse@1100528601 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebResponse";HaltOnError@1100528602 : Boolean);
    VAR
      HttpWebRequest@1100528603 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebRequest";
    BEGIN
      CreateHttpRequest(HttpWebRequest,STRSUBSTNO('%1?restype=directory', Resource),'HEAD');
      HttpWebRequest.ContentLength := 0;
      InvokeRequestWithResponse(HttpWebRequest,HttpWebResponse,HaltOnError);
    END;

    BEGIN
    END.
  }
}

