OBJECT Codeunit 11229291 CFW Connector Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      AutolineTxt@1100528319 : TextConst 'ENU=AUTOLINE';
      CompaniesTxt@1100528320 : TextConst 'ENU=COMPANIES;SVE=Fîretag';
      CompanyTxt@1100528321 : TextConst 'ENU=COMPANY;SVE=Fîretag';
      DayTxt@1100528337 : TextConst 'ENU=DAY;SVE=Dag';
      DoNothingTxt@1100528322 : TextConst 'ENU=DONOTHING';
      ExternalKeyTxt@1100528323 : TextConst 'ENU=EXTERNALKEY';
      ExtraFieldsTxt@1100528324 : TextConst 'ENU=EXTRAFIELDS';
      FixedValueTxt@1100528325 : TextConst 'ENU=FIXEDVALUE';
      FUNCTIONRUNNER@1100528305 : TextConst 'ENU=FunctionRunner';
      GENERICINBOUND@1100528304 : TextConst 'ENU=GenericInbound';
      GENERICOUTBOUND@1100528303 : TextConst 'ENU=GenericOutbound';
      MonthTxt@1100528336 : TextConst 'ENU=MONTH;SVE=MÜnad';
      NODENOTFOUND@1100528311 : TextConst 'ENU=NodeNotFound';
      NoSeriesTxt@1100528326 : TextConst 'ENU=NOSERIES';
      NoSerieswithParmTxt@1100528338 : TextConst 'ENU=NOSERIESWITHPARM';
      OnProcessedTxt@1100528327 : TextConst 'ENU=ONPROCESSED';
      RESPONSE@1100528312 : TextConst 'ENU=Response;NOR=Svar;SVE=Svar';
      ROOTNODENOTFOUND@1100528300 : TextConst 'ENU=RootNodeNotFound';
      RunConnectorTxt@1100528328 : TextConst 'ENU=RUNCONNECTOR';
      SubConnectorTxt@1100528329 : TextConst 'ENU=SUBCONNECTOR';
      SubstituteTxt@1100528330 : TextConst 'ENU=SUBSTITUTE;SVE=ErsÑttare';
      SumTxt@1100528331 : TextConst 'ENU=SUM;SVE=Summa';
      TEST@1100528301 : TextConst 'ENU=Test;NOR=Test;SVE=Test';
      Text000@1100528302 : TextConst 'ENU=Mandatory Node not found for Xpath: %1.';
      CFWSetup@1100528313 : Record 11229895;
      CFWConnector@1100528306 : Record 11229353;
      ConsumedWebService@1100528307 : Record 11229797;
      ConsumedWebServiceLine@1100528308 : Record 11229798;
      Text001@1100528309 : TextConst 'ENU=%1 is not defined as a Data Type.';
      Text002@1100528310 : TextConst 'ENU=Connector Framework (%1)';
      Text003@1100528314 : TextConst 'ENU=RecordRef not found.\\%1';
      Text004@1100528315 : TextConst 'ENU=There are %1 records of table %2 in Company %3 processed.\Continue?';
      Text005@1100528316 : TextConst 'ENU=Kan het veld (%1) niet vinden.';
      Text006@1100528317 : TextConst 'ENU=BLobType %1 is invalid.';
      StringFunctions@1100528339 : Codeunit 11012273;
      XMLDOMManagement@1100528318 : Codeunit 6224;
      Text007@1100528333 : TextConst 'ENU=Processing aborted by User.';
      TransformTxt@1100528332 : TextConst 'ENU=TRANSFORM';
      TextW000@1100528334 : TextConst 'ENU=Percentage @1@@@@@@@@\Start Time  #2###### --> #3###### --> End Time #4#####';
      YearTxt@1100528335 : TextConst 'ENU=YEAR;SVE=èr';

    [External]
    PROCEDURE AddPartToDoc@1100528331(CFWConnectorMapping@1100528304 : Record 11229354;CFWConnectorDataLine@1100528300 : Record 11229460;PartXmlString@1100528302 : Text) : Text;
    VAR
      RecRef@1100528301 : RecordRef;
      Fieldvalue@1100528308 : Text;
      XmlExtraFieldsDoc@1100528303 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      DnHttpUtility@1100528305 : DotNet "'System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Web.HttpUtility";
    BEGIN
      IF (CFWConnectorMapping."Action Code" = GetExtraFieldsTxt) THEN BEGIN
        CFWConnectorDataLine.ReadXmlDocFromBlob(CFWConnectorDataLine.FIELDNO("Extra Fields"), XmlExtraFieldsDoc);
        Fieldvalue := XmlExtraFieldsDoc.SelectSingleNode(STRSUBSTNO('//%1', CFWConnectorMapping."Formatting String")).InnerXml;
      END ELSE BEGIN
        GetRecordRef(RecRef, CFWConnectorDataLine, CFWConnectorDataLine."Company Name");
        Fieldvalue := CFWConnectorMapping.GetfieldValueOLD191023(CFWConnectorMapping, RecRef, CFWConnectorDataLine."Company Name");
        Fieldvalue := DnHttpUtility.HtmlEncode(Fieldvalue);
      END;
      EXIT(DN_REPLSTR(PartXmlString, CFWConnectorMapping."Data Type", Fieldvalue));
    END;

    [External]
    PROCEDURE FindNodeAndChangeContent@1100528334(VAR XmlDoc@1100528300 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";NodeValuetoFind@1100528301 : Text;NewValue@1100528302 : Text);
    VAR
      XmlNode@1100528304 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      Xpath@1100528303 : Text;
    BEGIN
      Xpath := STRSUBSTNO('//*[contains(text(),''%1'')]',NodeValuetoFind);
      XMLDOMManagement.FindNode(XmlDoc, Xpath, XmlNode);
      IF ISNULL(XmlNode) THEN
        EXIT;

      XmlNode.InnerXml := DN_REPLSTR(XmlNode.InnerXml,NodeValuetoFind, NewValue);
    END;

    [External]
    PROCEDURE CreateSetup@1100528318();
    VAR
      CFWSetup@1100528308 : Record 11229895;
      ConsumedWebService@1100528300 : Record 11229797;
      ConsumedWebServiceLine@1100528305 : Record 11229798;
      CFWConnectorInterface@1100528306 : Record 11229406;
      CFWConnector@1100528307 : Record 11229353;
      PossibleWebService@1100528302 : Record 11229317;
      PossibleWebServiceMgt@1100528301 : Codeunit 11125354;
      StringFunctions@1100528304 : Codeunit 11012273;
      CompNameInURL@1100528303 : Text;
    BEGIN
      PossibleWebServiceMgt.ToggleCFW(TRUE);

      IF (CFWSetup.GET) THEN BEGIN
        IF (CFWSetup."Custom Action Interface Id" = 0) THEN BEGIN
          CFWSetup."Custom Action Interface Id" := CODEUNIT::"CFW Custom Action Template";
          CFWSetup.MODIFY;
        END;
      END;

      IF (NOT ConsumedWebService.GET(GetFunctionRunnerTxt)) THEN BEGIN
        PossibleWebService.GET(PossibleWebService."Object Type"::Codeunit, GetFunctionRunnerTxt);
        CompNameInURL := StringFunctions.ReplaceString(COMPANYNAME, ' ', '%20');

        ConsumedWebService.Code := GetFunctionRunnerTxt;
        ConsumedWebService.Description := STRSUBSTNO(Text002, GetFunctionRunnerTxt);
        ConsumedWebService."Web Service URL" := PossibleWebService.GetSOAPUrl;
        ConsumedWebService."Web Service URL" := StringFunctions.ReplaceString(ConsumedWebService."Web Service URL",
          CompNameInURL, '$1');
        ConsumedWebService.Active := TRUE;
        ConsumedWebService."Log Communication" := TRUE;
        ConsumedWebService.INSERT(TRUE);
      END;

      IF (NOT CFWConnector.GET(GetFunctionRunnerTxt, GetFunctionRunnerTxt)) THEN BEGIN
        CFWConnector."Service Code" := GetFunctionRunnerTxt;
        CFWConnector.Code := GetFunctionRunnerTxt;
        CFWConnector.Description := STRSUBSTNO(Text002, GetFunctionRunnerTxt);
        CFWConnector.INSERT;
      END;

      ConsumedWebServiceLine.SETRANGE("Web Service Code", ConsumedWebService.Code);
      ConsumedWebServiceLine.SETRANGE("Method Name", GetFunctionRunnerTxt);
      IF (ConsumedWebServiceLine.ISEMPTY) THEN BEGIN
        ConsumedWebServiceLine."Web Service Code" := ConsumedWebService.Code;
        ConsumedWebServiceLine."Seq. No." := 1;
        ConsumedWebServiceLine."Method Name" := GetFunctionRunnerTxt;
        ConsumedWebServiceLine.Active := TRUE;
        ConsumedWebServiceLine."Log Communication" := TRUE;
        ConsumedWebServiceLine.Description := STRSUBSTNO(Text002, GetFunctionRunnerTxt);
        ConsumedWebServiceLine."Request Root Tag" := GetFunctionRunnerTxt;
        ConsumedWebServiceLine."Response Root Tag" := ConsumedWebServiceLine."Request Root Tag" + GetResponseTxt;
        ConsumedWebServiceLine.INSERT(TRUE);
      END;

      CFWConnectorInterface.AddInterface(5, 11229292);
      CFWConnectorInterface."Is Standard" := TRUE;
      CFWConnectorInterface.MODIFY;
      CFWConnectorInterface.AddInterface(5, 11229293);
      CFWConnectorInterface."Is Standard" := TRUE;
      CFWConnectorInterface.MODIFY;
      CFWConnectorInterface.AddInterface(5, 11012631);
      CFWConnectorInterface."Is Standard" := TRUE;
      CFWConnectorInterface.MODIFY;

      AddActions;
    END;

    PROCEDURE ChangeTextToCultureOLD20191101@1100528316(FieldType@1100528300 : Integer;SourceText@1100528301 : Text;SourceCultureInfo@1100528316 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.CultureInfo";TargetCultureInfo@1100528308 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.CultureInfo") ReturnText : Text;
    VAR
      Field@1100528304 : Record 2000000041;
    BEGIN

      CASE FieldType OF
        Field.Type::Date: BEGIN
          ReturnText := ChangeDateTimeToCulture(SourceText,SourceCultureInfo,TargetCultureInfo);
          EXIT(ReturnText);
        END;
        Field.Type::DateTime: BEGIN
          ReturnText := ChangeDateTimeToCulture(SourceText,SourceCultureInfo,TargetCultureInfo);
          EXIT(ReturnText);
        END;
        Field.Type::Decimal: BEGIN
          ReturnText := ChangeDecimalToCulture(SourceText,SourceCultureInfo,TargetCultureInfo);
          EXIT(ReturnText);
        END;
        Field.Type::Boolean: BEGIN
          ReturnText := ChangeBoolanToCulture(SourceText,SourceCultureInfo,TargetCultureInfo);
          EXIT(ReturnText);
        END;
        ELSE
          ERROR(Text001, Field.Type)
      END;
    END;

    [External]
    PROCEDURE ChangeTextToCulture@1100528364(FieldType@1100528300 : Integer;SourceText@1100528301 : Text;SourceCulture@1100528305 : Text) ReturnText : Text;
    VAR
      Field@1100528304 : Record 2000000041;
      SourceCultureInfo@1100528303 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.CultureInfo";
      TargetCultureInfo@1100528302 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.CultureInfo";
    BEGIN
      IF SourceCulture = '' THEN
        EXIT(SourceText);
      SourceCultureInfo := SourceCultureInfo.CultureInfo(SourceCulture);
      TargetCultureInfo := TargetCultureInfo.CurrentCulture;
      CASE FieldType OF
        Field.Type::Date: BEGIN
          ReturnText := ChangeDateTimeToCulture(SourceText,SourceCultureInfo,TargetCultureInfo);
          EXIT(ReturnText);
        END;
        Field.Type::DateTime: BEGIN
          ReturnText := ChangeDateTimeToCulture(SourceText,SourceCultureInfo,TargetCultureInfo);
          EXIT(ReturnText);
        END;
        Field.Type::Decimal: BEGIN
          ReturnText := ChangeDecimalToCulture(SourceText,SourceCultureInfo,TargetCultureInfo);
          EXIT(ReturnText);
        END;
        Field.Type::Boolean: BEGIN
          ReturnText := ChangeBoolanToCulture(SourceText,SourceCultureInfo,TargetCultureInfo);
          EXIT(ReturnText);
        END;
        ELSE
          ERROR(Text001, FieldType)
      END;
    END;

    PROCEDURE ChangeDateTimeToCulture@1100528361(SourceText@1100528301 : Text;SourceCultureInfo@1100528316 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.CultureInfo";TargetCultureInfo@1100528308 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.CultureInfo") ReturnText : Text;
    VAR
      SourceDtfi@1100528309 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.DateTimeFormatInfo";
      TargetDtfi@1100528307 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.DateTimeFormatInfo";
      DateTimeDN@1100528306 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.DateTime";
      Convert@1100528310 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
    BEGIN
      SourceDtfi := SourceCultureInfo.DateTimeFormat;
      TargetDtfi := TargetCultureInfo.DateTimeFormat;
      DateTimeDN :=  Convert.ToDateTime(SourceText,SourceDtfi);
      ReturnText :=DateTimeDN.ToString(TargetDtfi.ShortDatePattern);
    END;

    [External]
    PROCEDURE ChangeDecimalToCulture@1100528362(SourceText@1100528301 : Text;SourceCultureInfo@1100528316 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.CultureInfo";TargetCultureInfo@1100528308 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.CultureInfo") ReturnText : Text;
    VAR
      Convert@1100528310 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      SourceNfi@1100528303 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.NumberFormatInfo";
      TargetNfi@1100528302 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.NumberFormatInfo";
      DecimalDN@1100528300 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Decimal";
      DecimalNAV@1100528304 : Decimal;
      DotNetManagement@1100528305 : Codeunit 11012374;
    BEGIN
      SourceNfi := SourceCultureInfo.NumberFormat;
      TargetNfi := TargetCultureInfo.NumberFormat;
      DecimalNAV := Convert.ToDecimal(SourceText,SourceNfi);
      DotNetManagement.CastNav(DecimalNAV, DecimalDN);
      ReturnText := DecimalDN.ToString(TargetNfi);
    END;

    [External]
    PROCEDURE ChangeBoolanToCulture@1100528369(SourceText@1100528301 : Text;SourceCultureInfo@1100528316 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.CultureInfo";TargetCultureInfo@1100528308 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.CultureInfo") ReturnText : Text;
    VAR
      DotNetManagement@1100528313 : Codeunit 11012374;
      SourceNfi@1100528312 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.NumberFormatInfo";
      TargetNfi@1100528311 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.NumberFormatInfo";
      BooleanNAv@1100528309 : Boolean;
      Convert@1100528307 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      BooleanDN@1100528306 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Boolean";
    BEGIN
      SourceNfi := SourceCultureInfo.NumberFormat;
      TargetNfi := TargetCultureInfo.NumberFormat;
      BooleanNAv := Convert.ToBoolean(SourceText, SourceCultureInfo);
      DotNetManagement.CastNav(BooleanNAv, BooleanDN);
      ReturnText := BooleanDN.ToString(TargetCultureInfo);
    END;

    [External]
    PROCEDURE ConvertTextToXmlTagName@1100528324(TextIn@1100528300 : Text) TagNameOut : Text;
    BEGIN
      TagNameOut := DELCHR(TextIn, '<=>', '.');
      TagNameOut := CONVERTSTR(TagNameOut, ' /()', '____');
    END;

    [External]
    PROCEDURE ConvertXmlToAscii@1100528308(VAR TextInOut@1100528301 : Text);
    VAR
      StringFunctions@1100528300 : Codeunit 11012273;
    BEGIN
      TextInOut := StringFunctions.ReplaceString(TextInOut, '&amp;', '&');
      TextInOut := StringFunctions.ReplaceString(TextInOut, '&lt;', '<');
      TextInOut := StringFunctions.ReplaceString(TextInOut, '&gt;', '>');
      TextInOut := StringFunctions.ReplaceString(TextInOut, '&quot;', '"');
      TextInOut := StringFunctions.ReplaceString(TextInOut, '&quot;', '''');
    END;

    [External]
    PROCEDURE ConvertAsciiToXml@1100528307(VAR TextInOut@1100528300 : Text);
    VAR
      StringFunctions@1100528301 : Codeunit 11012273;
    BEGIN
      TextInOut := StringFunctions.ReplaceString(TextInOut, '&', '&amp;');
      TextInOut := StringFunctions.ReplaceString(TextInOut, '<', '&lt;');
      TextInOut := StringFunctions.ReplaceString(TextInOut, '>', '&gt;');
      TextInOut := StringFunctions.ReplaceString(TextInOut, '"', '&quot;');
      TextInOut := StringFunctions.ReplaceString(TextInOut, '''', '&quot;');
    END;

    [External]
    PROCEDURE ConvertCsvToXml@1100528332(CsvDataString@1100528300 : Text;Separator@1100528301 : Text[1];DocumentElement@1100528302 : Text) XmlStringOut : Text;
    VAR
      HeaderColumns@1100528303 : Integer;
      LineColumns@1100528310 : Integer;
      Counter@1100528304 : Integer;
      HeaderCell@1100528305 : ARRAY [1000] OF Text;
      LineCell@1100528306 : ARRAY [1000] OF Text;
      XmlValue@1100528307 : Text;
      DnCsvString@1100528308 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
      DnStringReader@1100528309 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StringReader";
    BEGIN
      DnStringReader := DnStringReader.StringReader(CsvDataString);
      //header
      DnCsvString := DnStringReader.ReadLine();
      DnCsvString := ConvertTextToXmlTagName(DnCsvString);
      HeaderColumns := SplitString(HeaderCell, DnCsvString, ';');
      //lines
      DnCsvString := DnStringReader.ReadLine();
      XmlStringOut += '<csvFile>';
      WHILE (NOT ISNULL(DnCsvString)) DO BEGIN
        LineColumns := SplitString(LineCell, DnCsvString, ';');
        XmlStringOut += STRSUBSTNO('<%1>', DocumentElement);
        FOR Counter := 1 TO HeaderColumns DO BEGIN
          ConvertAsciiToXml(LineCell[Counter]);
          XmlStringOut += STRSUBSTNO('<%1>%2</%1>', HeaderCell[Counter], LineCell[Counter]);
        END;
        XmlStringOut += STRSUBSTNO('</%1>', DocumentElement);
        DnCsvString := DnStringReader.ReadLine();
      END;
      XmlStringOut += '</csvFile>';
    END;

    [External]
    PROCEDURE FillArray@1100528360(VAR ParameterArray@1100528300 : ARRAY [100] OF Text;TextIn@1100528301 : Text;Index@1100528302 : Integer);
    VAR
      Pos@1100528303 : Integer;
      TextRemainder@1100528304 : Text;
    BEGIN
      Pos := STRPOS(TextIn, ';');
      IF (Pos = 0) THEN BEGIN
        ParameterArray[Index] := TextIn;
        EXIT;
      END ELSE BEGIN
        ParameterArray[Index] := COPYSTR(TextIn, 1, Pos-1);
        TextRemainder := COPYSTR(TextIn, Pos+1);
        FillArray(ParameterArray, TextRemainder, Index+1);
      END;
    END;

    [External]
    PROCEDURE GetAutolineTxt@1100528336() : Text;
    BEGIN
      EXIT(AutolineTxt);
    END;

    [External]
    PROCEDURE GetCompaniesTxt@1100528341() : Text;
    BEGIN
      EXIT(CompaniesTxt);
    END;

    [External]
    PROCEDURE GetCompanyTxt@1100528340() : Text;
    BEGIN
      EXIT(CompanyTxt);
    END;

    [External]
    PROCEDURE GetDayTxt@1100528356() : Text;
    BEGIN
      EXIT(DayTxt);
    END;

    [External]
    PROCEDURE GetDoNothingTxt@1100528339() : Text;
    BEGIN
      EXIT(DoNothingTxt);
    END;

    [External]
    PROCEDURE GetExternalKeyTxt@1100528350() : Text;
    BEGIN
      EXIT(ExternalKeyTxt);
    END;

    [External]
    PROCEDURE GetExtraFieldsTxt@1100528349() : Text;
    BEGIN
      EXIT(ExtraFieldsTxt);
    END;

    [External]
    PROCEDURE GetFieldref@1100525017(Irecref@1100525002 : RecordRef;Ifieldno@1100525003 : Integer;VAR OFldref@1100525001 : FieldRef);
    VAR
      Field@1100525000 : Record 2000000041;
      Fieldclass@1100525004 : 'Normal,FlowFilter,FlowField';
    BEGIN
      Field.SETRANGE(Field.TableNo,Irecref.NUMBER);
      Field.SETRANGE("No.",Ifieldno);
      IF Field.FINDFIRST THEN//1 record!
        OFldref := Irecref.FIELD(Field."No.")
      ELSE
        ERROR(Text005, Ifieldno);
      //calc if flowfield
      EVALUATE(Fieldclass,FORMAT(OFldref.CLASS));
      IF Fieldclass = Fieldclass::FlowField THEN
        OFldref.CALCFIELD;
    END;

    [External]
    PROCEDURE GetFieldRefValue@1100525016(Irecref@1100525002 : RecordRef;Ifieldno@1100525001 : Integer;IBlobType@1100528300 : Code[10]) OFieldValue : Text;
    VAR
      Fldref@1100525000 : FieldRef;
      TempBlob@1100528301 : TEMPORARY Record 99008535;
      Instr@1100528302 : InStream;
    BEGIN
      GetFieldref(Irecref,Ifieldno,Fldref);

      IF FORMAT(Fldref.TYPE)<>'BLOB' THEN BEGIN
        OFieldValue := FORMAT(Fldref,0,9);
        EXIT;
      END;

      //type=BLOB
      Fldref.CALCFIELD;
      TempBlob.Blob := Fldref.VALUE;
      CASE IBlobType OF
        'CDATA':BEGIN
          TempBlob.Blob.CREATEINSTREAM(Instr,TEXTENCODING::Windows);
          Instr.READ(OFieldValue);
          OFieldValue := STRSUBSTNO('<![CDATA[%1]]>',OFieldValue);
          END;
        'BASE64':ERROR('fixme: To be implemented...  Work in progress.');
        ELSE
          ERROR(Text006, IBlobType);
        END;
    END;

    [External]
    PROCEDURE GetFixedValueTxt@1100528342() : Text;
    BEGIN
      EXIT(FixedValueTxt);
    END;

    [External]
    PROCEDURE GetFunctionRunnerTxt@1100528317() : Text;
    BEGIN
      EXIT(FUNCTIONRUNNER);
    END;

    [External]
    PROCEDURE GetGenericInboundTxt@1100528319() : Text;
    BEGIN
      EXIT(GENERICINBOUND);
    END;

    [External]
    PROCEDURE GetGenericOutboundTxt@1100528320() : Text;
    BEGIN
      EXIT(GENERICOUTBOUND);
    END;

    [External]
    PROCEDURE GetMonthTxt@1100528357() : Text;
    BEGIN
      EXIT(MonthTxt);
    END;

    [External]
    PROCEDURE GetNodeNotFoundTxt@1100528322() : Text;
    BEGIN
      EXIT(NODENOTFOUND);
    END;

    [External]
    PROCEDURE GetNoSeriesTxt@1100528343() : Text;
    BEGIN
      EXIT(NoSeriesTxt);
    END;

    [External]
    PROCEDURE GetNoSeriesWithParmTxt@1100528363() : Text;
    BEGIN
      EXIT(NoSerieswithParmTxt);
    END;

    [External]
    PROCEDURE GetOnProcessedTxt@1100528344() : Text;
    BEGIN
      EXIT(OnProcessedTxt);
    END;

    [External]
    PROCEDURE GetRecordRef@1100525008(VAR Recref@1100525001 : RecordRef;CFWConnectorDataLine@1100528300 : Record 11229460;CompName@1100528301 : Text);
    VAR
      CFWConnector@1100525003 : Record 11229353;
    BEGIN
      IF (CFWConnectorDataLine.PK1 + CFWConnectorDataLine.PK2 +
          CFWConnectorDataLine.PK3 + CFWConnectorDataLine.PK4 +
          CFWConnectorDataLine.PK5 + CFWConnectorDataLine.PK6 +
          CFWConnectorDataLine.PK7 + CFWConnectorDataLine.PK8 +
          CFWConnectorDataLine.PK9 + CFWConnectorDataLine.PK10 +
          CFWConnectorDataLine.PK11 + CFWConnectorDataLine.PK12 +
          CFWConnectorDataLine.PK13 + CFWConnectorDataLine.PK14 +
          CFWConnectorDataLine.PK15 + CFWConnectorDataLine.PK16 +
          CFWConnectorDataLine.PK17 + CFWConnectorDataLine.PK18 +
          CFWConnectorDataLine.PK19 + CFWConnectorDataLine.PK20  = '')
      THEN
        EXIT;

      SetRecordRefToTable(CFWConnectorDataLine."Service Code", CFWConnectorDataLine."Connector Code",
        CompName, Recref);
      CFWConnectorDataLine.FindRecRef(Recref);

      IF Recref.ISEMPTY THEN
        ERROR(Text003, Recref.RECORDID);
      IF Recref.COUNT <> 1 THEN
        ERROR(Text003, Recref.RECORDID);

      Recref.FINDFIRST;
    END;

    [External]
    PROCEDURE GetResponseTxt@1100528325() : Text;
    BEGIN
      EXIT(RESPONSE);
    END;

    [External]
    PROCEDURE GetRootNodeNotFoundTxt@1100528323() : Text;
    BEGIN
      EXIT(ROOTNODENOTFOUND);
    END;

    [External]
    PROCEDURE GetRunConnectorTxt@1100528348() : Text;
    BEGIN
      EXIT(RunConnectorTxt);
    END;

    [External]
    PROCEDURE GetSubConnectorTxt@1100528347() : Text;
    BEGIN
      EXIT(SubConnectorTxt);
    END;

    [External]
    PROCEDURE GetSubstituteTxt@1100528345() : Text;
    BEGIN
      EXIT(SubstituteTxt);
    END;

    [External]
    PROCEDURE GetSumTxt@1100528351() : Text;
    BEGIN
      EXIT(SumTxt);
    END;

    [External]
    PROCEDURE GetTestTxt@1100528321() : Text;
    BEGIN
      EXIT(TEST);
    END;

    [External]
    PROCEDURE GetTransformTxt@1100528346() : Text;
    BEGIN
      EXIT(TransformTxt);
    END;

    [External]
    PROCEDURE GetYearTxt@1100528358() : Text;
    BEGIN
      EXIT(YearTxt);
    END;

    [External]
    PROCEDURE FillPrimKeyFromRecRef@1100528312(RecRef@1100528301 : RecordRef;VAR PrimKeyFields@1100528302 : ARRAY [20] OF Text);
    VAR
      Counter@1100528300 : Integer;
      FieldRef@1100528304 : FieldRef;
      KeyRef@1100528303 : KeyRef;
    BEGIN
      KeyRef := RecRef.KEYINDEX(1);
      FOR Counter := 1 TO KeyRef.FIELDCOUNT DO BEGIN
        FieldRef := KeyRef.FIELDINDEX(Counter);
        PrimKeyFields[Counter] := FORMAT(FieldRef.VALUE, 0, 9);
      END;
    END;

    [External]
    PROCEDURE FilterRecRefBySetrange@1100525014(IFIeldNo@1100525000 : Integer;IFieldValue@1100525001 : Text;VAR ORecref@1100525002 : RecordRef);
    VAR
      FieldRef@1100525003 : FieldRef;
    BEGIN

      FieldRef := ORecref.FIELD(IFIeldNo);
      FieldRef.SETRANGE(IFieldValue);
    END;

    [External]
    PROCEDURE FilterRecRefByFilter@1100525013(IFIeldNo@1100525002 : Integer;IFieldFilter@1100525001 : Text;VAR ORecref@1100525000 : RecordRef);
    VAR
      FieldRef@1100525003 : FieldRef;
    BEGIN
      FieldRef := ORecref.FIELD(IFIeldNo);
      FieldRef.SETFILTER(IFieldFilter);
    END;

    [External]
    PROCEDURE FunctionRunnerHandle@1100528359(VAR CFWConnectorDataLine@1100528300 : Record 11229460;nextstatus@1100528301 : Integer;nextstatustext@1100528302 : Text);
    VAR
      OldValue@1100528303 : Text;
      Status@1100528306 : Integer;
      StatusText@1100528304 : Text;
    BEGIN
      CFWConnectorDataLine.InterfaceDataSetProcessing('PROCESSWEBDOCUMENT');
      CFWConnectorDataLine.InterfaceDataSetNextStatus(nextstatus);
      CFWConnectorDataLine.InterfaceDataSetNextStatusText(nextstatustext);
      Status := FunctionRunnerMain(CFWConnectorDataLine,StatusText);
      CFWConnectorDataLine.ReRead;
      CFWConnectorDataLine.InterfaceDataSetProcessing('');
      CFWConnectorDataLine.InterfaceDataSetNextStatus(0);
      CFWConnectorDataLine.InterfaceDataSetNextStatusText('');
      IF (Status <> nextstatus) THEN BEGIN
        CFWConnectorDataLine.ReRead;
        CFWConnectorDataLine.SetStatus(CFWConnectorDataLine.Status::Error, StatusText);
      END;
      CFWConnectorDataLine.ReRead;
    END;

    [External]
    PROCEDURE FunctionRunnerMain@1100528353(CFWConnectorDataLine@1100528300 : Record 11229460;VAR StatusText@1100528304 : Text) Status : Integer;
    VAR
      KeyString@1100528302 : Text;
      Action@1100528301 : Text;
      Functionstring@1100528303 : Text;
    BEGIN
      COMMIT;
      SetGlobalVars(CFWConnectorDataLine."Service Code", CFWConnectorDataLine."Connector Code");
      CASE CFWConnector.Direction OF
        CFWConnector.Direction::Inbound: Action := GENERICINBOUND;
        CFWConnector.Direction::Outbound: Action := GENERICOUTBOUND;
      END;
      KeyString := CFWConnectorDataLine.GetPrimKeyString(';');
      Functionstring := STRSUBSTNO('%1;%2', Action, KeyString);
      IF (COMPANYNAME = CFWConnectorDataLine."Company Name") AND (CFWConnectorDataLine."Single Step") THEN BEGIN
        Status := FunctionRunnerCU(CFWConnectorDataLine,Functionstring,StatusText);
      END ELSE BEGIN
        Status := FunctionRunnerWS(CFWConnectorDataLine,Functionstring,StatusText);
      END;
    END;

    [External]
    PROCEDURE FunctionRunnerCU@1100528326(CFWConnectorDataLine@1100528300 : Record 11229460;Functionstring@1100528301 : Text;VAR StatusText@1100528304 : Text) Status : Integer;
    VAR
      CFWFunctionRunner@1100528302 : Codeunit 11229292;
      LastError@1100528303 : Text;
    BEGIN
      CFWFunctionRunner.SetFunctionString(Functionstring);
      CLEARLASTERROR;
      IF (NOT CFWFunctionRunner.RUN) THEN BEGIN
        StatusText := GETLASTERRORTEXT;
      END;
      EXIT(CFWFunctionRunner.GetStatus);
    END;

    [External]
    PROCEDURE FunctionRunnerWS@1100528314(CFWConnectorDataLine@1100528300 : Record 11229460;Functionstring@1100528301 : Text;VAR StatusText@1100528302 : Text) Status : Integer;
    BEGIN

      EXIT(ConnectToFunctionRunnerWs(CFWConnectorDataLine."Company Name", Functionstring,StatusText));
    END;

    LOCAL PROCEDURE ConnectToFunctionRunnerWs@1100528315(ForCompany@1100528300 : Text;FunctionString@1100528301 : Text;VAR StatusText@1100528314 : Text) Status : Integer;
    VAR
      ConsumedWebServiceMgt@1100528312 : Codeunit 11229310;
      BaseUrl@1100528311 : Text;
      DnBasicHttpBinding@1100528303 : DotNet "'system.servicemodel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.ServiceModel.BasicHttpBinding";
      DnBasicHttpSecurityMode@1100528304 : DotNet "'system.servicemodel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.ServiceModel.BasicHttpSecurityMode";
      DNCredentialCache@1100528310 : DotNet "'system, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.CredentialCache";
      DnEndpointAddress@1100528308 : DotNet "'system.servicemodel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.ServiceModel.EndpointAddress";
      DnHttpClientCredentialType@1100528305 : DotNet "'system.servicemodel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.ServiceModel.HttpClientCredentialType";
      DnFunctionRunner@1100528302 : DotNet "'Fps.Nav.WebServices, Version=1.0.0.0, Culture=neutral, PublicKeyToken=024bd013665211e9'.Fps.Nav.WebServices.FunctionRunner.FunctionRunner";
      DnPortClient@1100528309 : DotNet "'Fps.Nav.WebServices, Version=1.0.0.0, Culture=neutral, PublicKeyToken=024bd013665211e9'.Fps.Nav.WebServices.FunctionRunner.FunctionRunner_PortClient";
      DnProxyUri@1100528307 : DotNet "'system, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Uri";
      DnUri@1100528306 : DotNet "'system, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Uri";
      Result@1100528313 : Text;
      CFWConnectorDataLine@1100528315 : Record 11229460;
    BEGIN
      SetGlobalVars(GetFunctionRunnerTxt, GetFunctionRunnerTxt);
      BaseUrl := ConsumedWebServiceMgt.GetWebServiceUrl(ConsumedWebService."Web Service URL", ForCompany);
      DnUri := DnUri.Uri(BaseUrl);
      DnEndpointAddress := DnEndpointAddress.EndpointAddress(BaseUrl);

      IF (DnUri.Scheme = 'https') THEN
        DnBasicHttpSecurityMode := DnBasicHttpSecurityMode.Transport
      ELSE
        DnBasicHttpSecurityMode := DnBasicHttpSecurityMode.TransportCredentialOnly;

      CFWConnector.GET(UPPERCASE(GetFunctionRunnerTxt),UPPERCASE(GetFunctionRunnerTxt));
      IF CFWConnector.ServiceParameterCheck('NTLM',FORMAT(TRUE,0,9)) THEN BEGIN
        DnHttpClientCredentialType := DnHttpClientCredentialType.Ntlm
        END ELSE BEGIN
          DnHttpClientCredentialType := DnHttpClientCredentialType.Windows;  //Kerberos
          END;

      DnBasicHttpBinding := DnBasicHttpBinding.BasicHttpBinding(DnBasicHttpSecurityMode);
      DnBasicHttpBinding.Security.Transport.ClientCredentialType := DnHttpClientCredentialType;
      IF (ConsumedWebService."Web Proxy Address" <> '') THEN BEGIN
        DnProxyUri := DnProxyUri.Uri(ConsumedWebService."Web Proxy Address");
        DnBasicHttpBinding.ProxyAddress := DnProxyUri;
      END;

      DnPortClient := DnPortClient.FunctionRunner_PortClient(DnBasicHttpBinding, DnEndpointAddress);
      DnPortClient.ClientCredentials.Windows.ClientCredential := DNCredentialCache.DefaultNetworkCredentials;
      Result := DnPortClient.FunctionRunner(FunctionString);
      IF NOT EVALUATE(Status,Result) THEN BEGIN
        StatusText := Result;
        Status := CFWConnectorDataLine.Status::Error;
      END;
      EXIT(Status);
    END;

    [External]
    PROCEDURE ProcessDataLines@1100528300(ConsumedWebServiceCode@1100528303 : Code[20];ConnectorCode@1100528300 : Code[20];ConnectorDataLineStatus@1100528302 : Option);
    VAR
      CFWConnectorDataLine@1100528301 : Record 11229460;
      StatusText@1100528304 : Text;
    BEGIN
      CFWConnectorDataLine.SETRANGE("Service Code", ConsumedWebServiceCode);
      CFWConnectorDataLine.SETRANGE("Connector Code", ConnectorCode);
      CFWConnectorDataLine.SETRANGE(Status, ConnectorDataLineStatus);
      IF (NOT CFWConnectorDataLine.FINDSET) THEN
        EXIT;

      REPEAT
        FunctionRunnerMain(CFWConnectorDataLine,StatusText);
      UNTIL (CFWConnectorDataLine.NEXT = 0);
    END;

    [External]
    PROCEDURE ReadStringFromStream@1100528304(HasValueIn@1100528300 : Boolean;IStream@1100528301 : InStream) TextOut : Text;
    BEGIN
      IF (HasValueIn) THEN
        IStream.READ(TextOut);
    END;

    [External]
    PROCEDURE ReturnNodeText@1100528311(XmlRootNode@1100528302 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";XPath@1100528301 : Text;ChangeToNormalText@1100528300 : Boolean) TextOut : Text;
    VAR
      FoundXmlNode@1100528303 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      IF (ISNULL(XmlRootNode)) THEN
        EXIT(ROOTNODENOTFOUND);
      IF (XPath = '//') THEN
        EXIT('');
      IF (XPath <> '') THEN
        XMLDOMManagement.FindNode(XmlRootNode, XPath, FoundXmlNode)
      ELSE
        FoundXmlNode := XmlRootNode;

      IF (ISNULL(FoundXmlNode)) THEN
        EXIT(NODENOTFOUND);
      TextOut := FORMAT(FoundXmlNode.InnerText);
      IF (ChangeToNormalText) THEN
        ConvertXmlToAscii(TextOut);
      EXIT(TextOut);
    END;

    [External]
    PROCEDURE ReturnNodeTextWithError@1100528310(XmlRootNode@1100528302 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";XPath@1100528301 : Text;ChangeToNormalText@1100528300 : Boolean) : Text;
    VAR
      NodeText@1100528303 : Text;
    BEGIN
      NodeText := ReturnNodeText(XmlRootNode, XPath, ChangeToNormalText);
      IF ((NodeText = ROOTNODENOTFOUND) OR (NodeText = NODENOTFOUND)) THEN
        ERROR(Text000, XPath);
      EXIT(NodeText);
    END;

    [External]
    PROCEDURE REPLSTR@1100528330(SourceText@1000000000 : Text;OldString@1000000001 : Text;NewString@1000000002 : Text) : Text[1024];
    VAR
      Start@1000000003 : Integer;
      Length@1000000004 : Integer;
      firstpart@1100525001 : Text;
      remainder@1100525000 : Text;
    BEGIN
      Start := STRPOS(SourceText,OldString);
      IF Start=0 THEN
        EXIT(SourceText);
      Length:= STRLEN(OldString);
      firstpart := COPYSTR(SourceText,1,Start -1) + NewString;
      remainder := COPYSTR(SourceText,Start+Length);
      EXIT(firstpart+REPLSTR(remainder,OldString,NewString));
    END;

    [External]
    PROCEDURE DN_REPLSTR@1100528335(SourceText@1100528303 : Text;OldString@1100528302 : Text;NewString@1100528301 : Text) : Text;
    VAR
      Start@1000000003 : Integer;
      Length@1000000004 : Integer;
      firstpart@1100525001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
      remainder@1100525000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
      StringFunctions@1100528300 : Codeunit 11012273;
    BEGIN
      EXIT(StringFunctions.ReplaceString2(SourceText,OldString,NewString,TRUE));
    END;

    [External]
    PROCEDURE ProcessSubconnectors@1100528338(CFWConnectorDataLine@1100528300 : Record 11229460);
    VAR
      CFWSubConnectorDataLine@1100528314 : Record 11229460;
      CFWConnectorMapping@1100528303 : Record 11229354;
      CFWConnectorMappingLink@1100528306 : Record 11229357;
      CFWSubConnector@1100528301 : Record 11229353;
      CFWConnectorManagement@1100528304 : Codeunit 11229291;
      XMLDOMManagement4PS@1100528312 : Codeunit 11020220;
      PrimKey@1100528313 : ARRAY [20] OF Text;
      SourceRecRef@1100528302 : RecordRef;
      TargetRecRef@1100528305 : RecordRef;
      SubConnectorXmlDoc@1100528311 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      SubConnectorNode@1100528309 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      NewNode@1100528308 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      CurrNode@1100528307 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      innertext@1100528315 : Text;
      ExtraFieldsDoc@1100528310 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      IF (NOT CFWConnectorMapping.GetMappingByAction(CFWConnectorDataLine."Service Code",
        CFWConnectorDataLine."Connector Code", 'SUBCONNECTOR'))
      THEN
        EXIT;
      SetGlobalVars(CFWConnectorDataLine."Service Code", CFWConnectorDataLine."Connector Code");

      CFWConnectorDataLine.ReadXmlDocFromBlob(CFWConnectorDataLine.FIELDNO("Extra Fields"), ExtraFieldsDoc);
      CurrNode := ExtraFieldsDoc.FirstChild;

      REPEAT
        CFWSubConnector.GET(CFWConnectorMapping."Service Code",CFWConnectorMapping."Target Connector Code");
        XMLDOMManagement4PS.AddElement(CurrNode, CFWSubConnector."Document Element"+'_SET', '', '', NewNode);
        CurrNode := NewNode;
        ProcessSubconnectorPerCompany(CFWConnectorDataLine,CFWConnectorMapping,CurrNode,ExtraFieldsDoc);
        CurrNode := ExtraFieldsDoc.FirstChild; //get parentnode.
      UNTIL (CFWConnectorMapping.NEXT = 0);
      CFWConnectorDataLine.SaveXmlToBlob(CFWConnectorDataLine.FIELDNO("Extra Fields"), ExtraFieldsDoc);
    END;

    [External]
    PROCEDURE SetRecordRefToTable@1100528306(ConsumedWebServiceCode@1100528304 : Code[20];ConnectorCode@1100528300 : Code[20];CompName@1100528301 : Text;VAR RecRefInOut@1100528302 : RecordRef);
    VAR
      CFWConnector@1100528303 : Record 11229353;
    BEGIN
      CLEAR(RecRefInOut);
      CFWConnector.GET(ConsumedWebServiceCode, ConnectorCode);
      IF (COMPANYNAME <> CompName) THEN
        RecRefInOut.OPEN(CFWConnector."Table No.", FALSE, CompName)
      ELSE
        RecRefInOut.OPEN(CFWConnector."Table No.");
    END;

    [External]
    PROCEDURE SelectFile@1100528305(CaptionText@1100528300 : Text;FileExtension@1100528301 : Text;VAR ServerTempFileName@1100528302 : Text);
    VAR
      FileManagement@1100528303 : Codeunit 419;
      ClientTempFileName@1100528304 : Text;
    BEGIN
      ClientTempFileName :=FileManagement.OpenFileDialog(CaptionText,'',
        FileManagement.GetToFilterText('', FileExtension));
      ServerTempFileName :=  FileManagement.UploadFileSilent(ClientTempFileName);
    END;

    PROCEDURE ViewStreamOLD20191028@1100528309(HasValue@1100528300 : Boolean;IStream@1100528301 : InStream);
    VAR
      TempBlob@1100528303 : TEMPORARY Record 99008535;
      FileManagement@1100528302 : Codeunit 419;
      IStream2@1100528307 : InStream;
      OStream@1100528304 : OutStream;
      ClientTempFileName@1100528305 : Text;
      TextString@1100528306 : Text;
    BEGIN
      IF (NOT HasValue) THEN
        EXIT;

      TempBlob.Blob.CREATEOUTSTREAM(OStream, TEXTENCODING::Windows);
      COPYSTREAM(OStream, IStream);
      TempBlob.Blob.CREATEINSTREAM(IStream2);
      IStream2.READTEXT(TextString, 1);
      CASE TextString OF
        '<': ClientTempFileName := FileManagement.ClientTempFileName('xml');
        ELSE ClientTempFileName := FileManagement.ClientTempFileName('txt');
      END;
      FileManagement.BLOBExport4PS(TempBlob, ClientTempFileName, FALSE, FALSE);
      HYPERLINK(ClientTempFileName);
    END;

    [External]
    PROCEDURE ViewStream@1100528365(HasValue@1100528300 : Boolean;IStream@1100528301 : InStream);
    VAR
      TempBlob@1100528303 : TEMPORARY Record 99008535;
      FileManagement@1100528302 : Codeunit 419;
      IStream2@1100528307 : InStream;
      OStream@1100528304 : OutStream;
      ClientTempFileName@1100528305 : Text;
      TextString@1100528306 : Text;
    BEGIN
      IF (NOT HasValue) THEN
        EXIT;

      TempBlob.Blob.CREATEOUTSTREAM(OStream, TEXTENCODING::Windows);
      COPYSTREAM(OStream, IStream);
      TempBlob.Blob.CREATEINSTREAM(IStream2);
      IStream2.READTEXT(TextString, 1);
      CASE TextString OF
        '<': BEGIN
          ClientTempFileName := FileManagement.ClientTempFileName('xml');
        END
        ELSE ClientTempFileName := FileManagement.ClientTempFileName('txt');
      END;
      //werkt niet FileManagement.BLOBExport4PS(TempBlob, ClientTempFileName, FALSE, FALSE);
      FileManagement.BLOBExport4PS(TempBlob, ClientTempFileName, FALSE, TRUE);
      HYPERLINK(ClientTempFileName);
    END;

    PROCEDURE WriteStringToStream@1100528303(TextIn@1100528300 : Text;OStream@1100528301 : OutStream);
    BEGIN
      OStream.WRITETEXT(TextIn);
    END;

    LOCAL PROCEDURE "---Locals---"@1100528301();
    BEGIN
    END;

    LOCAL PROCEDURE AddActions@1100528302();
    VAR
      CFWConnectorMapping@1100528301 : Record 11229354;
    BEGIN
      AddAction('Autoline', CFWConnectorMapping."Action OLD"::Autoline);
      AddAction('Companies', CFWConnectorMapping."Action OLD"::Companies);
      AddAction('Company', CFWConnectorMapping."Action OLD"::Company);
      AddAction('External Key', CFWConnectorMapping."Action OLD"::ExternalKey);
      AddAction('Extra Fields', CFWConnectorMapping."Action OLD"::ExtraFields);
      AddAction('Fixed Value', CFWConnectorMapping."Action OLD"::FixedValue);
      AddAction('Do Nothing', CFWConnectorMapping."Action OLD"::None);
      AddAction('No. Series', CFWConnectorMapping."Action OLD"::NoSeries);
      AddAction('No. Series with Parm', CFWConnectorMapping."Action OLD"::NoSeries);
      AddAction('On Processed', CFWConnectorMapping."Action OLD"::OnProcessed);
      AddAction('Run Connector', CFWConnectorMapping."Action OLD"::RunConnector);
      AddAction('Sub Connector', CFWConnectorMapping."Action OLD"::Subconnector);
      AddAction('Substitute', CFWConnectorMapping."Action OLD"::Substitute);
      AddAction('Sum', CFWConnectorMapping."Action OLD"::Sum);
      AddAction('Transform', CFWConnectorMapping."Action OLD"::Transform);
      AddAction('To Extra Fields',0);
      AddAction('Year',0);
      AddAction('Month',0);
      AddAction('Day',0);

      ConvertMappingTable;
    END;

    LOCAL PROCEDURE AddAction@1100528337(ActionText@1100528301 : Text;OptionNo@1100528302 : Integer);
    VAR
      CFWActions@1100528300 : Record 11229478;
      ActionCode@1100528303 : Code[20];
    BEGIN
      ActionCode := COPYSTR(DELCHR(ActionText, '<=>', '. ') , 1, MAXSTRLEN(CFWActions.Code));
      CFWActions.AddAction(ActionCode,ActionText);
      CFWActions."Action Old" := OptionNo;
      CFWActions."Is Standard" := TRUE;
      CFWActions.MODIFY;
    END;

    LOCAL PROCEDURE ConfirmProcessing@1100528327(CFWConnectorDataLine@1100528300 : Record 11229460;Recordcount@1100525000 : Integer;TableName@1100525001 : Text;FromCompany@1100528301 : Text);
    BEGIN
      IF CFWConnectorDataLine."Single Step" THEN
         IF NOT CONFIRM(STRSUBSTNO(Text004,Recordcount,TableName, FromCompany)) THEN
           ERROR(Text007);
    END;

    LOCAL PROCEDURE ConvertMappingTable@1100528313();
    VAR
      CFWConnectorMapping@1100528300 : Record 11229354;
      CFWActions@1100528301 : Record 11229478;
    BEGIN
      CFWConnectorMapping.SETRANGE("Action Code", '');
      CFWConnectorMapping.SETFILTER("Action OLD", '<>0');
      IF (NOT CFWConnectorMapping.FINDSET(TRUE)) THEN
        EXIT;

      COMMIT;
      REPEAT
        CFWActions.SETRANGE("Action Old", CFWConnectorMapping."Action OLD");
        IF (CFWActions.FINDFIRST) THEN BEGIN
          CFWConnectorMapping."Action Code" := CFWActions.Code;
          CFWConnectorMapping.MODIFY;
        END;
      UNTIL (CFWConnectorMapping.NEXT = 0);
    END;

    LOCAL PROCEDURE ProcessSubconnector@1100528329(CFWConnectorDataLine@1100528300 : Record 11229460;CFWSubConnectorMapping@1100528317 : Record 11229354;FromCompany@1100528301 : Text;VAR ConnectorNode@1100528310 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR ExtraFieldsDoc@1100528316 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      CFWSubConnectorDataLine@1100528314 : Record 11229460;
      CFWConnectorMappingLink@1100528306 : Record 11229357;
      CFWConnectorManagement@1100528304 : Codeunit 11229291;
      XMLDOMManagement4PS@1100528312 : Codeunit 11020220;
      PrimKey@1100528313 : ARRAY [20] OF Text;
      SourceRecRef@1100528302 : RecordRef;
      TargetRecRef@1100528305 : RecordRef;
      SubConnectorXmlDoc@1100528311 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      SubConnectorNode@1100528309 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      NewNode@1100528308 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      CurrNode@1100528307 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      innertext@1100528315 : Text;
    BEGIN
      GetRecordRef(SourceRecRef, CFWConnectorDataLine, FromCompany);

      CFWConnectorManagement.SetRecordRefToTable(CFWSubConnectorMapping."Service Code",
        CFWSubConnectorMapping."Target Connector Code", FromCompany, TargetRecRef);
      CFWConnectorMappingLink.FilterRecRef(CFWSubConnectorMapping."Service Code",
        CFWSubConnectorMapping."Connector Code", CFWSubConnectorMapping."Element Name", SourceRecRef,
        TargetRecRef);
      ConfirmProcessing(CFWConnectorDataLine, TargetRecRef.COUNT, TargetRecRef.CAPTION, FromCompany);
      IF (TargetRecRef.FINDSET) THEN BEGIN
        REPEAT
          CFWConnectorManagement.FillPrimKeyFromRecRef(TargetRecRef, PrimKey);
          CFWConnectorDataLine.CreateAndFullyProcessRecord(CFWSubConnectorMapping."Service Code",
            CFWSubConnectorMapping."Target Connector Code", FromCompany, PrimKey, CFWSubConnectorDataLine);
          CLEAR(SubConnectorXmlDoc);
          CFWSubConnectorDataLine.ReRead;
          CFWSubConnectorDataLine.ReadXmlDocFromBlob(CFWSubConnectorDataLine.FIELDNO("Outbound Data"),
            SubConnectorXmlDoc);

          NewNode := ConnectorNode.OwnerDocument.ImportNode(SubConnectorXmlDoc.DocumentElement,TRUE);
          ConnectorNode.AppendChild(ExtraFieldsDoc.ImportNode(SubConnectorXmlDoc.DocumentElement,TRUE));

        UNTIL (TargetRecRef.NEXT = 0);
        TargetRecRef.CLOSE;
      END;
    END;

    LOCAL PROCEDURE ProcessSubconnectorPerCompany@1100528333(CFWConnectorDataLine@1100528300 : Record 11229460;CFWSubConnectorMapping@1100528302 : Record 11229354;VAR ConnectorNode@1100528308 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR ExtraFieldsDoc@1100528307 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      CFWConnectorMapping@1100528301 : Record 11229354;
      CFWTranslationSetValue@1100528303 : Record 11229362;
      XMLDOMManagement4PS@1100528305 : Codeunit 11020220;
      NewNode@1100528306 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      CFWSubConnector@1100528309 : Record 11229353;
    BEGIN
      CFWConnectorMapping.SETRANGE("Service Code", CFWConnectorDataLine."Service Code");
      CFWConnectorMapping.SETRANGE("Connector Code", CFWConnectorDataLine."Connector Code");
      CFWConnectorMapping.SETFILTER("Action Code", '%1|%2', GetCompanyTxt, GetCompaniesTxt);
      IF (NOT CFWConnectorMapping.FINDFIRST) THEN BEGIN
        CFWConnectorDataLine.TESTFIELD("Company Name");
        ProcessSubconnector(CFWConnectorDataLine, CFWSubConnectorMapping,CFWConnectorDataLine."Company Name", ConnectorNode,ExtraFieldsDoc);
      END;

      CASE CFWConnectorMapping."Action Code" OF
        GetCompanyTxt: BEGIN
          IF (CFWConnectorMapping."Formatting String" = '') THEN
            EXIT;
          ProcessSubconnector(CFWConnectorDataLine, CFWSubConnectorMapping,CFWConnectorMapping."Formatting String", ConnectorNode,ExtraFieldsDoc);
        END;
        GetCompaniesTxt: BEGIN
          IF (CFWConnectorMapping."Translation Set Code" = '') THEN
            EXIT;
          CFWTranslationSetValue.SETRANGE("Translation Set Code", CFWConnectorMapping."Translation Set Code");
          IF (NOT CFWTranslationSetValue.FINDSET) THEN
            EXIT;
          REPEAT
             ProcessSubconnector(CFWConnectorDataLine, CFWSubConnectorMapping, CFWTranslationSetValue."From Value", ConnectorNode,ExtraFieldsDoc);
          UNTIL (CFWTranslationSetValue.NEXT = 0);
        END;
      END;
    END;

    LOCAL PROCEDURE SetGlobalVars@1100528328(ConsumedWebServiceCode@1100528301 : Code[20];ConnectorCode@1100528300 : Code[20]);
    BEGIN
      CFWSetup.GET;
      IF (ConsumedWebServiceCode = ConnectorCode) AND (ConnectorCode = UPPERCASE(GetFunctionRunnerTxt)) THEN
        CFWConnector.INIT
      ELSE
        CFWConnector.GET(ConsumedWebServiceCode, ConnectorCode);

      IF (ConsumedWebServiceCode = '') THEN BEGIN
        ConsumedWebService.INIT;
        ConsumedWebServiceLine.INIT;
      END ELSE BEGIN
        ConsumedWebService.GET(ConsumedWebServiceCode);
      END;
    END;

    [External]
    PROCEDURE SplitString@1100528352(VAR TextArray@1100528300 : ARRAY [1000] OF Text;TextIn@1100528301 : Text;Separator@1100528302 : Text[1]) Count : Integer;
    VAR
      StringFunctions@1100528306 : Codeunit 11012273;
      Counter@1100528308 : Integer;
      ArrayList@1100528307 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.ArrayList";
    BEGIN
      StringFunctions.SplitString2(TextIn, Separator, ArrayList);
      FOR Counter := 0 TO ArrayList.Count-1 DO BEGIN
        TextArray[Counter+1] := ArrayList.Item(Counter);
      END;
      EXIT(ArrayList.Count);
    END;

    [External]
    PROCEDURE LocalName@1100525002(XpathIn@1100525000 : Text) XpathOut : Text;
    BEGIN
      IF COPYSTR(XpathIn,1,1) = '@' THEN
        //atribute
        XpathOut := STRSUBSTNO('.//@*[local-name() = "%1"]',COPYSTR(XpathIn,2))
      ELSE
        XpathOut := STRSUBSTNO('.//*[local-name() = "%1"]',XpathIn);
    END;

    [External]
    PROCEDURE WindowOpen@1100528355(VAR Window@1100528300 : Dialog);
    BEGIN
      Window.OPEN(TextW000);
    END;

    [External]
    PROCEDURE WindowUpdate@1100528354(VAR Window@1100528300 : Dialog;Counter@1100528305 : Integer;LineCount@1100528304 : Integer;StartTime@1100528303 : Time;CurrentTime@1100528306 : Time);
    VAR
      Percentage@1100528302 : Integer;
      PreviousPercentage@1100528301 : Integer;
    BEGIN
      PreviousPercentage := ROUND(100 * (Counter-1 / LineCount), 1, '>');
      Percentage := ROUND(100 * (Counter / LineCount), 1, '>');
      IF (Percentage <> PreviousPercentage) THEN BEGIN
        Window.UPDATE(1, Percentage * 100);
        Window.UPDATE(2, StartTime);
        Window.UPDATE(3, CurrentTime);
        IF (Percentage > 0) THEN
          Window.UPDATE(4, (StartTime + ROUND((CurrentTime-StartTime) * (100 / Percentage), 1)));
        END;
    END;

    BEGIN
    END.
  }
}

