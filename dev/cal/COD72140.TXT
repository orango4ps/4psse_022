OBJECT Codeunit 72140 MenuSuite Node Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=MenuSuiteAnalyser_1.03;
  }
  PROPERTIES
  {
    OnRun=VAR
            lMenuSuiteNode@1000 : Record 72140;
            PadMaxLevel@1001 : Integer;
          BEGIN
            lMenuSuiteNode.MODIFYALL("Line No.",0);
            lMenuSuiteNode.MODIFYALL(Level,0);

            lMenuSuiteNode.MODIFYALL("Show Node",FALSE);
            lMenuSuiteNode.MODIFYALL("Scion ID",'');

            gSymbolSet := 'ABCDEFGHIJKLMNOPQRSTUWVXYZ0123456789';

            gPowerLevel := gPowerLevel::"Two Symbol";
            gPowerLevel := gPowerLevel::"One Symbol";

            gPowerSymbolSet := STRLEN(gSymbolSet);
            CASE gPowerLevel OF
              gPowerLevel::"One Symbol":
                gPowerNumber := gPowerSymbolSet;
              gPowerLevel::"Two Symbol":
                gPowerNumber := gPowerSymbolSet * gPowerSymbolSet;
            END;

            gTempMenuSuiteNodeLevelBuffer.INIT;
            gTempMenuSuiteNodeLevelBuffer."Grow ID" := '_';
            gTempMenuSuiteNodeLevelBuffer.INSERT;

            gRootNodeID := '00000000-0000-0000-0000-000000000000';
            IF lMenuSuiteNode.GET(gRootNodeID) THEN
              SetLineNo(lMenuSuiteNode);

            lMenuSuiteNode.SETRANGE("Line No.",0);
            lMenuSuiteNode.SETFILTER("Node Type",'<>%1',lMenuSuiteNode."Node Type"::Root);
            lMenuSuiteNode.MODIFYALL("Show Node",TRUE);
            lMenuSuiteNode.MODIFYALL(Level,1);
            lMenuSuiteNode.MODIFYALL("Scions Filter",'~');
          END;

  }
  CODE
  {
    VAR
      gLineNo@1000 : Integer;
      gLevel@1001 : Integer;
      gRootNodeID@1002 : Code[40];
      gTempMenuSuiteNodeLevelBuffer@1003 : TEMPORARY Record 72143;
      gPowerNumber@1004 : Integer;
      gSymbolSet@1005 : Text[36];
      gPowerSymbolSet@1006 : Integer;
      gPowerLevel@1007 : 'One Symbol,Two Symbol';
      gExpandState@1008 : 'Scions Open,Scions Close,Scions Empty';

    LOCAL PROCEDURE SetLineNo@1(pMenuSuiteNode@1000 : Record 72140);
    VAR
      lMenuSuiteNode@1001 : Record 72140;
    BEGIN
      WITH pMenuSuiteNode DO BEGIN

        IF "Line No." <> 0 THEN
          EXIT;

        gLineNo += 1;
        "Line No." := gLineNo;
        Level := gLevel;
        "Show Node" := gLevel = 1;
        gTempMenuSuiteNodeLevelBuffer.GET(gLevel);
        "Scion ID" := GetScionID(gLevel);
        CASE gPowerLevel OF
          gPowerLevel::"One Symbol":
            "Scions Filter" := "Scion ID" + '?';
          gPowerLevel::"Two Symbol":
            "Scions Filter" := "Scion ID" + '??';
        END;
        MODIFY;

        IF "First Child ID" <> '' THEN BEGIN
          gLevel += 1;
          IF lMenuSuiteNode.GET("First Child ID") THEN BEGIN
              gTempMenuSuiteNodeLevelBuffer.GET(gLevel - 1);
              gTempMenuSuiteNodeLevelBuffer.Level := gLevel;
              gTempMenuSuiteNodeLevelBuffer."Grow ID" := GetScionID(gLevel - 1);
              gTempMenuSuiteNodeLevelBuffer."Scions Quantity" := 0;
              gTempMenuSuiteNodeLevelBuffer.INSERT;
              SetLineNo(lMenuSuiteNode);
              gTempMenuSuiteNodeLevelBuffer.GET(gLevel);
              gTempMenuSuiteNodeLevelBuffer.DELETE;
            END;
          gLevel -= 1;
        END;

        IF ("Next Node ID" <> '') AND ("Next Node ID" <> gRootNodeID) THEN
          IF lMenuSuiteNode.GET("Next Node ID") THEN BEGIN
              gTempMenuSuiteNodeLevelBuffer.GET(gLevel);
              gTempMenuSuiteNodeLevelBuffer."Scions Quantity" += 1;
              gTempMenuSuiteNodeLevelBuffer.MODIFY;
              SetLineNo(lMenuSuiteNode);
          END;

      END;
    END;

    LOCAL PROCEDURE GetScionID@2(pLevel@1000 : Integer) ScionID : Code[25];
    BEGIN
      WITH gTempMenuSuiteNodeLevelBuffer DO
        CASE TRUE OF
          pLevel = 0:
            ScionID := "Grow ID";
          gPowerLevel = gPowerLevel::"One Symbol":
            ScionID :=
              STRSUBSTNO(
                '%1%2',
                "Grow ID",
                gSymbolSet["Scions Quantity" MOD gPowerSymbolSet + 1]);
          gPowerLevel = gPowerLevel::"Two Symbol":
            ScionID :=
              STRSUBSTNO(
                '%1%2%3',
                "Grow ID",
                gSymbolSet[ROUND("Scions Quantity" / gPowerSymbolSet,1,'<') + 1],
                gSymbolSet["Scions Quantity" MOD gPowerSymbolSet + 1]);
        END;
    END;

    PROCEDURE CalcExpandState@3(VAR pMenuSuiteNode@1000 : Record 72140) ReturnValue : Integer;
    VAR
      lMenuSuiteNode@1001 : Record 72140;
    BEGIN
      lMenuSuiteNode.COPY(pMenuSuiteNode);
      WITH pMenuSuiteNode DO BEGIN
        RESET;
        SETCURRENTKEY("Scion ID");
        SETFILTER("Scion ID",lMenuSuiteNode."Scions Filter");
        CASE TRUE OF
          NOT FINDFIRST:
            ReturnValue := gExpandState::"Scions Empty";
          "Show Node":
            ReturnValue := gExpandState::"Scions Open";
          ELSE
            ReturnValue := gExpandState::"Scions Close";
        END;
      END;
      pMenuSuiteNode.COPY(lMenuSuiteNode);
    END;

    PROCEDURE ExpandCollapseLevel@4(VAR pMenuSuiteNode@1000 : Record 72140) : Integer;
    VAR
      lMenuSuiteNode@1001 : Record 72140;
    BEGIN
      gExpandState := CalcExpandState(pMenuSuiteNode);
      IF gExpandState = gExpandState::"Scions Empty" THEN
        EXIT;
      lMenuSuiteNode.COPY(pMenuSuiteNode);
      WITH pMenuSuiteNode DO BEGIN
        RESET;
        SETCURRENTKEY("Scion ID");
        IF gExpandState = gExpandState::"Scions Close" THEN
          SETFILTER("Scion ID",lMenuSuiteNode."Scions Filter")
        ELSE
          SETFILTER("Scion ID",lMenuSuiteNode."Scions Filter" + '*');
        MODIFYALL("Show Node",gExpandState = gExpandState::"Scions Close");
      END;
      pMenuSuiteNode.COPY(lMenuSuiteNode);
    END;

    PROCEDURE ExpandAll@5(VAR pMenuSuiteNode@1000 : Record 72140) : Integer;
    VAR
      lMenuSuiteNode@1001 : Record 72140;
    BEGIN
      lMenuSuiteNode.COPY(pMenuSuiteNode);
      WITH pMenuSuiteNode DO BEGIN
        RESET;
        MODIFYALL("Show Node",TRUE);
      END;
      pMenuSuiteNode.COPY(lMenuSuiteNode);
    END;

    PROCEDURE CollapseAll@6(VAR pMenuSuiteNode@1000 : Record 72140) : Integer;
    VAR
      lMenuSuiteNode@1001 : Record 72140;
    BEGIN
      lMenuSuiteNode.COPY(pMenuSuiteNode);
      WITH pMenuSuiteNode DO BEGIN
        RESET;
        SETFILTER(Level,'2..');
        MODIFYALL("Show Node",FALSE);
      END;
      pMenuSuiteNode.COPY(lMenuSuiteNode);
    END;

    PROCEDURE LookupLanguage@7(VAR pLanguage@1000 : Record 2000000045) : Boolean;
    VAR
      lMenuSuiteNodeCaption@1001 : Record 72141;
      lTempLanguage@1002 : TEMPORARY Record 8;
      lLanguage@1003 : Record 2000000045;
    BEGIN
      IF lMenuSuiteNodeCaption.FINDSET THEN BEGIN
        REPEAT
          lTempLanguage.SETRANGE("Windows Language ID",lMenuSuiteNodeCaption."Language ID");
          IF lTempLanguage.ISEMPTY THEN BEGIN
            lLanguage.SETRANGE("Language ID",lMenuSuiteNodeCaption."Language ID");
            lLanguage.FINDFIRST;
            lTempLanguage.Code := lLanguage."Abbreviated Name";
            lTempLanguage.Name := lLanguage.Name;
            lTempLanguage."Windows Language ID" := lLanguage."Language ID";
            lTempLanguage.INSERT;
          END;
        UNTIL lMenuSuiteNodeCaption.NEXT = 0;
        lTempLanguage.RESET;
        lTempLanguage.SETRANGE("Windows Language ID",pLanguage."Language ID");
        IF lTempLanguage.FINDFIRST THEN ;
        lTempLanguage.SETRANGE("Windows Language ID");
        IF ACTION::LookupOK = PAGE.RUNMODAL(0,lTempLanguage) THEN BEGIN
          lLanguage.SETRANGE("Language ID",lTempLanguage."Windows Language ID");
          lLanguage.FINDFIRST;
          pLanguage := lLanguage;
          EXIT(TRUE);
        END;
      END;
    END;

    BEGIN
    END.
  }
}

