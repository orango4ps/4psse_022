OBJECT Page 11126891 Resource Planning (GRP)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Resource Planning (GRP);
    PageType=Card;
    UsageCategory=Tasks;
    OnInit=BEGIN
             RefreshWorkordersAllowed := FALSE;
             WorkordersLastExportedOn := CURRENTDATETIME;
           END;

    OnOpenPage=VAR
                 GraphResourcePlanningMgt@1100529000 : Codeunit 11124900;
               BEGIN
                 ResourcePlanningSetup.GET;
                 GraphResourcePlanningMgt.CleanWorkOrderEventLog;
               END;

  }
  CONTROLS
  {
    { 1100529000;;Container;
                ContainerType=ContentArea }

    { 1100529001;1;Field  ;
                Name=Scheduler;
                ControlAddIn=[Fps.Nav.Addin.Scheduler;PublicKeyToken=024bd013665211e9] }

  }
  CODE
  {
    VAR
      ResourcePlanningSetup@1100529005 : Record 11124900;
      GraphResourcePlanningMgt@1100529003 : Codeunit 11124900;
      SchedulerMessageType@1100529006 : DotNet "'Fps.Nav.Addin.Scheduler,  PublicKeyToken=024bd013665211e9'.Fps.Nav.Addin.Scheduler.MessageType";
      CurrPlanHorizonStartDate@1100529001 : Date;
      CurrPlanHorizonEndDate@1100529002 : Date;
      WorkordersLastExportedOn@1100529004 : DateTime;
      Text003@1100529008 : TextConst 'ENU=Info';
      Text004@1100529009 : TextConst 'ENU=Not available for ''%1''';
      Text005@1100529010 : TextConst 'ENU=Copy';
      Text006@1100529011 : TextConst 'ENU=Not allowed for %1 ''%2''';
      Text007@1100529012 : TextConst 'ENU=Only allowed for work orders of one %1';
      RefreshWorkordersAllowed@1100529013 : Boolean;
      Text008@1100529100 : TextConst 'ENU=Delete %1 work order(s). Are you sure?';
      Text012@1100525002 : TextConst 'ENU=Warning!';
      Text013@1100529101 : TextConst 'ENU=Info ''Absence'' only allowed for resources of the own company';
      Text014@1100529102 : TextConst 'ENU=One or more resources are linked.\Do you want to schedule the linked resources?';
      Text015@1100528301 : TextConst 'ENU=The following workorders are exported:';
      Text016@1100528302 : TextConst 'ENU=The following workorders could not be exported:';
      Text017@1100529103 : TextConst 'ENU=The following workorders are unplanned:';
      Text018@1100529104 : TextConst 'ENU=The following workorders could not be unplanned:';
      Text019@1100529105 : TextConst 'ENU=For the following workorders, follow-up workorders have been created:';
      Text020@1100529106 : TextConst 'ENU=No follow-up workorders have been created for the following workorders:';
      Text021@1100525000 : TextConst 'ENU=No Phone Number for Resource %1.';
      Text022@1100525001 : TextConst 'ENU=No Emailaddress for Resource %1.';

    LOCAL PROCEDURE OnSchedulerControlAddInReady@1100529000();
    VAR
      SchedulerConfig@1100529000 : DotNet "'Fps.Nav.Addin.Scheduler, PublicKeyToken=024bd013665211e9'.Fps.Nav.Addin.Scheduler.SchedulerConfig";
      SchedulerResources@1100529001 : DotNet "'Fps.Nav.Addin.Scheduler, PublicKeyToken=024bd013665211e9'.Fps.Nav.Addin.Scheduler.SchedulerResources";
      SchedulerEventTypes@1100529003 : DotNet "'Fps.Nav.Addin.Scheduler, PublicKeyToken=024bd013665211e9'.Fps.Nav.Addin.Scheduler.SchedulerEventTypes";
      SchedulerResourceTypes@1100528300 : DotNet "'Fps.Nav.Addin.Scheduler, PublicKeyToken=024bd013665211e9'.Fps.Nav.Addin.Scheduler.SchedulerResourceTypes";
      SchedulerRelationTypes@1100527700 : DotNet "'Fps.Nav.Addin.Scheduler, PublicKeyToken=024bd013665211e9'.Fps.Nav.Addin.Scheduler.SchedulerRelationTypes";
    BEGIN
      GraphResourcePlanningMgt.ExportConfiguration(SchedulerConfig);
      GraphResourcePlanningMgt.ExportResourceTypes(SchedulerResourceTypes);
      GraphResourcePlanningMgt.ExportResources(SchedulerResources, SchedulerConfig.UserSettings.ActiveResourceView);
      GraphResourcePlanningMgt.ExportEventTypes(SchedulerEventTypes);
      GraphResourcePlanningMgt.ExportRelationTypes(SchedulerRelationTypes);
      CurrPage.Scheduler.SchedulerInitialize(SchedulerConfig, SchedulerResources, SchedulerResourceTypes, SchedulerEventTypes, SchedulerRelationTypes);
      RefreshWorkordersAllowed := TRUE;
    END;

    LOCAL PROCEDURE OnSchedulerReadEvents@1100529004(StartDateTxt@1100529003 : Text;EndDateTxt@1100529005 : Text);
    VAR
      SchedulerEvents@1100529002 : DotNet "'Fps.Nav.Addin.Scheduler, PublicKeyToken=024bd013665211e9'.Fps.Nav.Addin.Scheduler.SchedulerEvents";
    BEGIN
      // Occurs when planning horizon dates in GRP are modified (then send all events)
      RefreshWorkordersAllowed := FALSE;
      CurrPlanHorizonStartDate := GraphResourcePlanningMgt.EvaluateDate(StartDateTxt);
      CurrPlanHorizonEndDate := GraphResourcePlanningMgt.EvaluateDate(EndDateTxt);
      SchedulerEvents := SchedulerEvents.SchedulerEvents;
      GraphResourcePlanningMgt.ExportEvents(SchedulerEvents, CurrPlanHorizonStartDate, CurrPlanHorizonEndDate, WorkordersLastExportedOn);
      CurrPage.Scheduler.SchedulerOnAfterReadEvents(SchedulerEvents);
      RefreshWorkordersAllowed := TRUE;
    END;

    LOCAL PROCEDURE OnSchedulerOnReadResources@1100525001(ResourceView@1100525000 : Code[20]);
    VAR
      SchedulerResources@1100525001 : DotNet "'Fps.Nav.Addin.Scheduler, PublicKeyToken=024bd013665211e9'.Fps.Nav.Addin.Scheduler.SchedulerResources";
    BEGIN
      GraphResourcePlanningMgt.ExportResources(SchedulerResources, ResourceView);
      CurrPage.Scheduler.SchedulerOnAfterReadResources(SchedulerResources);
    END;

    LOCAL PROCEDURE OnSchedulerOnReadEventResources@1100529901(VAR SchedulerEvent@1100529900 : DotNet "'Fps.Nav.Addin.Scheduler, PublicKeyToken=024bd013665211e9'.Fps.Nav.Addin.Scheduler.SchedulerEvent");
    VAR
      ReturnSchedulerResources@1100529902 : DotNet "'Fps.Nav.Addin.Scheduler,  PublicKeyToken=024bd013665211e9'.Fps.Nav.Addin.Scheduler.SchedulerResources";
    BEGIN
      ReturnSchedulerResources := ReturnSchedulerResources.SchedulerResources();
      GraphResourcePlanningMgt.ExportPossibleResources(SchedulerEvent, ReturnSchedulerResources);
      CurrPage.Scheduler.SchedulerOnAfterReadEventResources(ReturnSchedulerResources);
    END;

    LOCAL PROCEDURE OnShowEvent@1100529007(VAR SchedulerEvent@1100529000 : DotNet "'Fps.Nav.Addin.Scheduler, PublicKeyToken=024bd013665211e9'.Fps.Nav.Addin.Scheduler.SchedulerEvent");
    VAR
      SchedulerEvents@1100529001 : DotNet "'Fps.Nav.Addin.Scheduler, PublicKeyToken=024bd013665211e9'.Fps.Nav.Addin.Scheduler.SchedulerEvents";
      SchedulerEventsDelete@1100529003 : DotNet "'Fps.Nav.Addin.Scheduler, PublicKeyToken=024bd013665211e9'.Fps.Nav.Addin.Scheduler.SchedulerEvents";
      SourceType@1100529004 : Option;
      EntryNo@1100529102 : Integer;
      SourceNo@1100529002 : Code[20];
      EmployeeNo@1100529101 : Code[20];
      EmployeeCompany@1100529100 : Text;
      PlantType@1100529103 : Code[20];
      PlantNo@1100529104 : Code[10];
      PlantCompany@1100529105 : Text;
    BEGIN
      CASE SchedulerEvent.GetFeature('type') OF
        GraphResourcePlanningMgt.EventType2Text(DATABASE::"Service Order"),
          GraphResourcePlanningMgt.EventType2Text(DATABASE::Job),
          GraphResourcePlanningMgt.EventType2Text(DATABASE::"Resource Request") :
          BEGIN
            SourceNo := GraphResourcePlanningMgt.ShowEventCard(SchedulerEvent.Identifier, SourceType);
            IF SourceNo <> '' THEN BEGIN
              GraphResourcePlanningMgt.ExportEventsSourceWorkOrders(SchedulerEvents, SchedulerEventsDelete, SourceType, SourceNo, WorkordersLastExportedOn);
              CurrPage.Scheduler.SchedulerOnAfterUpdateEvents(SchedulerEvents);
            END;
          END;
        GraphResourcePlanningMgt.EventType2Text(DATABASE::"Employee Absence") :
          BEGIN
            IF NOT GraphResourcePlanningMgt.GetEmployeeFromResource(SchedulerEvent.Resource, TRUE, EmployeeNo, EmployeeCompany) THEN BEGIN
              CurrPage.Scheduler.SchedulerShowMessage(SchedulerMessageType.Info, Text013, Text003);
              EXIT;
            END;
            EntryNo := GraphResourcePlanningMgt.FormatEventNo2AbsenceNo(SchedulerEvent.Identifier());
            GraphResourcePlanningMgt.ShowEmployeeAbsence(EmployeeNo, EntryNo);
            SchedulerEvents := SchedulerEvents.SchedulerEvents;
            SchedulerEvents.AddEvent(SchedulerEvent);
            CurrPage.Scheduler.SchedulerOnAfterDeleteEvents(SchedulerEvents);
          END;
        GraphResourcePlanningMgt.EventType2Text(DATABASE::"Plant Absence") :
          BEGIN
            IF NOT GraphResourcePlanningMgt.GetPlantFromResource(SchedulerEvent.Resource, TRUE, PlantType, PlantNo, PlantCompany) THEN BEGIN
              CurrPage.Scheduler.SchedulerShowMessage(SchedulerMessageType.Info, Text013, Text003);
              EXIT;
            END;
            EntryNo := GraphResourcePlanningMgt.FormatEventNo2AbsenceNo(SchedulerEvent.Identifier());
            GraphResourcePlanningMgt.ShowPlantAbsence(PlantType, PlantNo, EntryNo);
            SchedulerEvents := SchedulerEvents.SchedulerEvents;
            SchedulerEvents.AddEvent(SchedulerEvent);
            CurrPage.Scheduler.SchedulerOnAfterDeleteEvents(SchedulerEvents);
          END;
        ELSE
          CurrPage.Scheduler.SchedulerShowMessage(SchedulerMessageType.Info, STRSUBSTNO(Text004, SchedulerEvent.GetFeature('typetext')), Text003);
      END;
    END;

    LOCAL PROCEDURE OnSchedulerOnCreateEvents@1100529006(VAR NewSchedulerEvents@1100529000 : DotNet "'Fps.Nav.Addin.Scheduler, PublicKeyToken=024bd013665211e9'.Fps.Nav.Addin.Scheduler.SchedulerEvents");
    VAR
      WorkOrder@1100529010 : Record 11229279;
      TmpResourceTable@1100529003 : TEMPORARY Record 11020579;
      LinkedResourceRec@1100529105 : Record 11229324;
      NewSchedulerEvent@1100529007 : DotNet "'Fps.Nav.Addin.Scheduler, PublicKeyToken=024bd013665211e9'.Fps.Nav.Addin.Scheduler.SchedulerEvent";
      SchedulerEvents@1100529004 : DotNet "'Fps.Nav.Addin.Scheduler, PublicKeyToken=024bd013665211e9'.Fps.Nav.Addin.Scheduler.SchedulerEvents";
      SchedulerEventsDelete@1100529006 : DotNet "'Fps.Nav.Addin.Scheduler, PublicKeyToken=024bd013665211e9'.Fps.Nav.Addin.Scheduler.SchedulerEvents";
      SchedulerEventsAbsence@1100525005 : DotNet "'Fps.Nav.Addin.Scheduler, PublicKeyToken=024bd013665211e9'.Fps.Nav.Addin.Scheduler.SchedulerEvents";
      StartDateTime@1100529001 : DateTime;
      EndDateTime@1100529002 : DateTime;
      FirstEvent@1100529008 : Boolean;
      CopyMode@1100529009 : Boolean;
      EventsByDay@1100529013 : Boolean;
      PlanDuringClockTime@1100529172 : Boolean;
      PlanInWeekend@1100529171 : Boolean;
      FirmPlanned@1100529170 : Boolean;
      LinkedResource@1100529107 : Boolean;
      LinkedResourceConfirm@1100529108 : Boolean;
      AbsenceEmployee@1100525004 : Boolean;
      AbsencePlant@1100529113 : Boolean;
      IgnoreCheck@1100529100 : Boolean;
      OrgResourceType@1100525001 : Option;
      SourceType@1100529014 : Option;
      SourceType2@1100529017 : Option;
      StartEntryNo@1100529103 : Integer;
      EndEntryNo@1100529104 : Integer;
      SourceNo@1100529005 : Code[20];
      OrgWorkorderNo@1100529011 : Code[20];
      OrgResourceGroup@1100525000 : Code[20];
      OrgResourceNo@1100529012 : Code[20];
      OrgOperatesPlantWO@1100528300 : Code[20];
      OrgDuration@1100529111 : Decimal;
      EmployeeNo@1100525003 : Code[20];
      MainResourceNo@1100529106 : Code[20];
      PlantType@1100529101 : Code[20];
      PlantNo@1100529110 : Code[10];
      PlantCompany@1100529112 : Text;
      SourceTypeText@1100529015 : Text;
      EmployeeCompany@1100529102 : Text;
      MessageString@1100529109 : Text;
      ResourceGroupTypeNo@1100527705 : Integer;
      ResourceNo@1100527706 : Code[40];
      ResourceGroupTypeOption@1100527707 : ',Discipline,PlantType';
    BEGIN
      FirstEvent := TRUE;
      SourceNo := '';
      FOREACH NewSchedulerEvent IN NewSchedulerEvents.Events DO BEGIN
        ResourceNo := NewSchedulerEvent.Resource();
        ResourceGroupTypeNo := GraphResourcePlanningMgt.IsResourceNo2ResourceGroup(ResourceNo);
        IF FirstEvent THEN BEGIN
          FirstEvent := FALSE;
          SourceNo := NewSchedulerEvent.GroupIdentifier();  // Only filled on a copy action
          CopyMode := (SourceNo <> '');
          IF NOT CopyMode THEN BEGIN
            IF (ResourceGroupTypeNo <> ResourceGroupTypeOption::Discipline) AND (ResourceGroupTypeNo <> ResourceGroupTypeOption::PlantType) THEN BEGIN
              AbsenceEmployee := GraphResourcePlanningMgt.GetEmployeeFromResource(NewSchedulerEvent.Resource, TRUE, EmployeeNo, EmployeeCompany);
              AbsencePlant := GraphResourcePlanningMgt.GetPlantFromResource(NewSchedulerEvent.Resource, TRUE, PlantType, PlantNo, PlantCompany);
            END;
            IF NOT ConfirmCreate(AbsenceEmployee, AbsencePlant, SourceType, SourceNo, EventsByDay, LinkedResource, PlanDuringClockTime, PlanInWeekend, FirmPlanned) THEN
              EXIT;
            IgnoreCheck := (SourceNo = '');
          END ELSE BEGIN
            SourceTypeText := NewSchedulerEvent.GetFeature('sourcetype');
            SourceType := GraphResourcePlanningMgt.EventSourceTypeText2OptionNo(SourceTypeText);
            IF NOT (SourceType IN [WorkOrder."Source Type"::ServiceOrder, WorkOrder."Source Type"::Project, WorkOrder."Source Type"::Request]) THEN BEGIN
              CurrPage.Scheduler.SchedulerShowMessage(
                SchedulerMessageType.Info, STRSUBSTNO(Text006, WorkOrder.FIELDCAPTION("Source Type"), SourceTypeText), Text005);
              EXIT;
            END;
          END;
        END;
        OrgWorkorderNo := '';
        OrgResourceNo := '';
        OrgDuration := 0;
        IF CopyMode THEN BEGIN
          SourceType2 := GraphResourcePlanningMgt.EventSourceTypeText2OptionNo(NewSchedulerEvent.GetFeature('sourcetype'));
          IF SourceType2 <> SourceType THEN BEGIN
            CurrPage.Scheduler.SchedulerShowMessage(SchedulerMessageType.Info, STRSUBSTNO(Text007, WorkOrder.FIELDCAPTION("Source Type")), Text005);
            EXIT;
          END;
          IF NewSchedulerEvent.GroupIdentifier() <> SourceNo THEN BEGIN
            CurrPage.Scheduler.SchedulerShowMessage(SchedulerMessageType.Info, STRSUBSTNO(Text007, WorkOrder.FIELDCAPTION("Source No.")), Text005);
            EXIT;
          END;
          IF (ResourceGroupTypeNo = ResourceGroupTypeOption::Discipline) OR (ResourceGroupTypeNo = ResourceGroupTypeOption::PlantType) THEN
            LinkedResourceConfirm := TRUE;
          IF NOT LinkedResourceConfirm THEN BEGIN // linked resources
            LinkedResourceRec.RESET;
            LinkedResourceRec.SETRANGE("Resource No.", NewSchedulerEvent.Resource());
            IF LinkedResourceRec.FINDFIRST THEN BEGIN
              IF CONFIRM(Text014) THEN
                LinkedResource := TRUE;
              MainResourceNo := LinkedResourceRec."Main Resource No.";
              LinkedResourceConfirm := TRUE;
            END ELSE BEGIN
              LinkedResourceRec.RESET;
              LinkedResourceRec.SETRANGE("Main Resource No.", NewSchedulerEvent.Resource());
              IF LinkedResourceRec.FINDFIRST THEN BEGIN
                IF CONFIRM(Text014) THEN
                  LinkedResource := TRUE;
                MainResourceNo := LinkedResourceRec."Main Resource No.";
                LinkedResourceConfirm := TRUE;
              END;
            END;
          END;
          OrgWorkorderNo := NewSchedulerEvent.Identifier();
          WorkOrder.GET(OrgWorkorderNo);
          OrgResourceNo := WorkOrder."Resource No.";
          IF (OrgResourceNo = '') AND (WorkOrder."Resource Group No." <> '') THEN
            OrgResourceNo := WorkOrder."Resource Group No.";
          OrgResourceType := WorkOrder."Resource Type";
          OrgResourceGroup := WorkOrder."Resource Group No.";
          OrgOperatesPlantWO := WorkOrder."Operates Plant (WO)";
          OrgDuration := WorkOrder."Duration Time";
          PlanDuringClockTime := WorkOrder."Plan during Clock Time";
          PlanInWeekend := WorkOrder."Plan in Weekend";
          FirmPlanned := WorkOrder."Firm Planned";
        END ELSE BEGIN
          IF (ResourceGroupTypeNo = ResourceGroupTypeOption::Discipline) OR (ResourceGroupTypeNo = ResourceGroupTypeOption::PlantType) THEN
            LinkedResource := FALSE;
          IF LinkedResource THEN BEGIN
            LinkedResourceRec.RESET;
            LinkedResourceRec.SETRANGE("Resource No.", NewSchedulerEvent.Resource());
            IF LinkedResourceRec.FINDFIRST THEN BEGIN
              MainResourceNo := LinkedResourceRec."Main Resource No.";
            END ELSE BEGIN
              LinkedResourceRec.RESET;
              LinkedResourceRec.SETRANGE("Main Resource No.", NewSchedulerEvent.Resource());
              IF LinkedResourceRec.FINDFIRST THEN BEGIN
                MainResourceNo := LinkedResourceRec."Main Resource No.";
              END ELSE BEGIN
                LinkedResource := FALSE;
              END;
            END;
          END;
        END;
        StartDateTime := GraphResourcePlanningMgt.EvaluateDateTime(NewSchedulerEvent.StartDate());
        EndDateTime := GraphResourcePlanningMgt.EvaluateDateTime(NewSchedulerEvent.EndDate());

        IF SourceType = DATABASE::"Cause of Absence" THEN BEGIN
          IF AbsenceEmployee THEN BEGIN
            EndEntryNo := GraphResourcePlanningMgt.CreateEmployeeAbsence(NewSchedulerEvent.Resource, SourceNo, StartDateTime, EndDateTime);
            IF StartEntryNo = 0 THEN
              StartEntryNo := EndEntryNo;
          END ELSE BEGIN
            EndEntryNo := GraphResourcePlanningMgt.CreatePlantAbsence(NewSchedulerEvent.Resource, SourceNo, StartDateTime, EndDateTime);
            IF StartEntryNo = 0 THEN
              StartEntryNo := EndEntryNo;
          END;
        END ELSE BEGIN
          IF LinkedResource THEN
            GraphResourcePlanningMgt.OnCreateEventInsertTmpResourceTable(TmpResourceTable,
              MainResourceNo, StartDateTime, EndDateTime, CopyMode, EventsByDay,
              OrgWorkorderNo, OrgResourceType, OrgResourceGroup, OrgResourceNo, OrgOperatesPlantWO,
              OrgDuration, '', PlanDuringClockTime, PlanInWeekend, FirmPlanned)
          ELSE
            GraphResourcePlanningMgt.OnCreateEventInsertTmpResourceTable(TmpResourceTable,
              NewSchedulerEvent.Resource(), StartDateTime, EndDateTime, CopyMode, EventsByDay,
              OrgWorkorderNo, OrgResourceType, OrgResourceGroup, OrgResourceNo, OrgOperatesPlantWO,
              OrgDuration, '', PlanDuringClockTime, PlanInWeekend, FirmPlanned);

          IF LinkedResource THEN BEGIN // linked resoures
            LinkedResourceRec.RESET;
            LinkedResourceRec.SETRANGE("Main Resource No.", MainResourceNo);
            IF LinkedResourceRec.FINDSET THEN BEGIN
              REPEAT
                GraphResourcePlanningMgt.OnCreateEventInsertTmpResourceTable(TmpResourceTable,
                  LinkedResourceRec."Resource No.", StartDateTime, EndDateTime, FALSE, EventsByDay,
                  OrgWorkorderNo, OrgResourceType, OrgResourceGroup, OrgResourceNo, OrgOperatesPlantWO,
                  OrgDuration, '', PlanDuringClockTime, PlanInWeekend, FirmPlanned);
              UNTIL LinkedResourceRec.NEXT = 0;
            END;
            GraphResourcePlanningMgt.RemoveNonWorkPeriodsFromTmp(TmpResourceTable);
          END;
        END;
      END;
      IF SourceType = DATABASE::"Cause of Absence" THEN BEGIN
        IF AbsenceEmployee THEN BEGIN
          IF StartEntryNo > 0 THEN BEGIN
            GraphResourcePlanningMgt.ShowCreatedEmployeeAbsence(StartEntryNo, EndEntryNo);
            GraphResourcePlanningMgt.ExportCreatedEmployeeAbsence(SchedulerEventsAbsence, StartEntryNo, EndEntryNo);
            CurrPage.Scheduler.SchedulerOnAfterUpdateEvents(SchedulerEventsAbsence);
          END;
        END ELSE BEGIN
          IF StartEntryNo > 0 THEN BEGIN
            GraphResourcePlanningMgt.ShowCreatedPlantAbsence(StartEntryNo, EndEntryNo);
            GraphResourcePlanningMgt.ExportCreatedPlantAbsence(SchedulerEventsAbsence, StartEntryNo, EndEntryNo);
            CurrPage.Scheduler.SchedulerOnAfterUpdateEvents(SchedulerEventsAbsence);
          END;
        END;
      END ELSE BEGIN
        GraphResourcePlanningMgt.CreateEvent(SourceType, SourceNo, TmpResourceTable, WorkordersLastExportedOn, FALSE, '');
        IF SourceNo <> '' THEN BEGIN
          GraphResourcePlanningMgt.ExportEventsSourceWorkOrders(SchedulerEvents, SchedulerEventsDelete, SourceType, SourceNo, WorkordersLastExportedOn);
          IF NOT IgnoreCheck THEN BEGIN
            GraphResourcePlanningMgt.CheckEvents(SchedulerEvents, MessageString, '<br>', CurrPlanHorizonEndDate);
            IF MessageString <> '' THEN
              CurrPage.Scheduler.SchedulerShowMessage(SchedulerMessageType.Warning, MessageString, Text012);
          END;

          CurrPage.Scheduler.SchedulerOnAfterCreateEvents(SchedulerEvents);
        END;
      END;
    END;

    LOCAL PROCEDURE ConfirmCreate@1100529009(AbsenceEmployee@1100525000 : Boolean;AbsencePlant@1100529100 : Boolean;VAR SourceType@1100529003 : Option;VAR SourceNo@1100529000 : Code[20];VAR EventsByDay@1100529001 : Boolean;VAR LinkedResource@1100529101 : Boolean;VAR PlanDuringClockTime@1100529173 : Boolean;VAR PlanInWeekend@1100529172 : Boolean;VAR FirmPlanned@1100529171 : Boolean) : Boolean;
    VAR
      ResourcePlanCreateSel@1100529002 : Page 11126905;
    BEGIN
      ResourcePlanCreateSel.SetSelections(AbsenceEmployee, AbsencePlant);

      IF ResourcePlanCreateSel.RUNMODAL = ACTION::OK THEN BEGIN
        ResourcePlanCreateSel.GetSelections(SourceType, SourceNo, EventsByDay, LinkedResource, PlanDuringClockTime, PlanInWeekend, FirmPlanned);
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE OnSchedulerOnUpdateEvents@1100529002(VAR NewSchedulerEvents@1100529000 : DotNet "'Fps.Nav.Addin.Scheduler, PublicKeyToken=024bd013665211e9'.Fps.Nav.Addin.Scheduler.SchedulerEvents");
    VAR
      WorkOrder@1100525000 : Record 11229279;
      TmpWorkorderTable@1100529004 : TEMPORARY Record 11020579;
      NewSchedulerEvent@1100529005 : DotNet "'Fps.Nav.Addin.Scheduler, PublicKeyToken=024bd013665211e9'.Fps.Nav.Addin.Scheduler.SchedulerEvent";
      SchedulerEvent@1100529117 : DotNet "'Fps.Nav.Addin.Scheduler, PublicKeyToken=024bd013665211e9'.Fps.Nav.Addin.Scheduler.SchedulerEvent";
      SchedulerEvents@1100529007 : DotNet "'Fps.Nav.Addin.Scheduler, PublicKeyToken=024bd013665211e9'.Fps.Nav.Addin.Scheduler.SchedulerEvents";
      SchedulerEventsDelete@1100529001 : DotNet "'Fps.Nav.Addin.Scheduler, PublicKeyToken=024bd013665211e9'.Fps.Nav.Addin.Scheduler.SchedulerEvents";
      StartDateTime@1100529003 : DateTime;
      EndDateTime@1100529002 : DateTime;
      SourceType@1100529009 : Option;
      MessageString@1100529100 : Text;
      MessageStringAbsence@1100529119 : Text;
      LinkedResourceRec@1100529111 : Record 11229324;
      MainResourceNo@1100529108 : Code[20];
      LinkedResourceConfirm@1100529107 : Boolean;
      LinkedResource@1100529106 : Boolean;
      OrgWorkorderNo@1100529110 : Code[20];
      OrgResourceType@1100529104 : Option;
      OrgResourceGroup@1100529103 : Code[20];
      OrgResourceNo@1100529102 : Code[20];
      OrgOperatesPlantWO@1100529101 : Code[20];
      OrgDuration@1100529112 : Decimal;
      TmpResourceTable@1100529105 : TEMPORARY Record 11020579;
      EntryNo@1100529118 : Integer;
      EmployeeNo@1100529116 : Code[20];
      EmployeeCompany@1100529115 : Text;
      PlantType@1100529114 : Code[20];
      PlantNo@1100529113 : Code[10];
      PlantCompany@1100529109 : Text;
      OrgPlanDuringClockTime@1100529170 : Boolean;
      OrgPlanInWeekend@1100529171 : Boolean;
      OrgFirmPlanned@1100529172 : Boolean;
      ResourceGroupTypeNo@1100527702 : Integer;
      ResourceNo@1100527701 : Code[40];
      ResourceGroupTypeOption@1100527700 : ',Discipline,PlantType';
    BEGIN
      SchedulerEvents := SchedulerEvents.SchedulerEvents;
      SchedulerEventsDelete := SchedulerEventsDelete.SchedulerEvents;
      FOREACH NewSchedulerEvent IN NewSchedulerEvents.Events DO BEGIN
        SourceType := GraphResourcePlanningMgt.EventSourceTypeText2OptionNo(NewSchedulerEvent.GetFeature('sourcetype'));
        OrgWorkorderNo := '';
        OrgResourceNo := '';
        OrgDuration := 0;
        IF SourceType IN [WorkOrder."Source Type"::ServiceOrder, WorkOrder."Source Type"::Project, WorkOrder."Source Type"::Request] THEN BEGIN
          ResourceNo := NewSchedulerEvent.Resource();
          ResourceGroupTypeNo := GraphResourcePlanningMgt.IsResourceNo2ResourceGroup(ResourceNo);
          OrgWorkorderNo := NewSchedulerEvent.Identifier();
          WorkOrder.GET(OrgWorkorderNo);
          OrgResourceNo := WorkOrder."Resource No.";
          IF OrgResourceNo = NewSchedulerEvent.Resource() THEN
            LinkedResourceConfirm := TRUE;
          IF WorkOrder."Schedule Relation" = WorkOrder."Schedule Relation"::"Start-Start" THEN
            LinkedResourceConfirm := TRUE;
          IF (ResourceGroupTypeNo = ResourceGroupTypeOption::Discipline) OR (ResourceGroupTypeNo = ResourceGroupTypeOption::PlantType) THEN
            LinkedResourceConfirm := TRUE;
          IF (OrgResourceNo = '') AND (WorkOrder."Resource Group No." <> '') THEN
            OrgResourceNo := WorkOrder."Resource Group No.";
          OrgResourceType := WorkOrder."Resource Type";
          OrgResourceGroup := WorkOrder."Resource Group No.";
          OrgOperatesPlantWO := WorkOrder."Operates Plant (WO)";
          OrgDuration := WorkOrder."Duration Time";
          OrgPlanDuringClockTime := WorkOrder."Plan during Clock Time";
          OrgPlanInWeekend := WorkOrder."Plan in Weekend";
          OrgFirmPlanned := WorkOrder."Firm Planned";
          IF NOT LinkedResourceConfirm THEN BEGIN // linked resources
            LinkedResourceRec.RESET;
            LinkedResourceRec.SETRANGE("Resource No.", NewSchedulerEvent.Resource());
            IF LinkedResourceRec.FINDFIRST THEN BEGIN
              IF CONFIRM(Text014) THEN
                LinkedResource := TRUE;
              MainResourceNo := LinkedResourceRec."Main Resource No.";
              LinkedResourceConfirm := TRUE;
            END ELSE BEGIN
              LinkedResourceRec.RESET;
              LinkedResourceRec.SETRANGE("Main Resource No.", NewSchedulerEvent.Resource());
              IF LinkedResourceRec.FINDFIRST THEN BEGIN
                IF CONFIRM(Text014) THEN
                  LinkedResource := TRUE;
                MainResourceNo := LinkedResourceRec."Main Resource No.";
                LinkedResourceConfirm := TRUE;
              END;
            END;
          END;

          IF NOT WorkOrder."Firm Planned" THEN BEGIN
            StartDateTime := GraphResourcePlanningMgt.EvaluateDateTime(NewSchedulerEvent.StartDate());
            EndDateTime := GraphResourcePlanningMgt.EvaluateDateTime(NewSchedulerEvent.EndDate());
          END;
          IF LinkedResource THEN
            GraphResourcePlanningMgt.UpdateEvent(OrgWorkorderNo, MainResourceNo, StartDateTime, EndDateTime, TmpWorkorderTable, TRUE)
          ELSE
            GraphResourcePlanningMgt.UpdateEvent(OrgWorkorderNo, NewSchedulerEvent.Resource(), StartDateTime, EndDateTime, TmpWorkorderTable, FALSE);
          WorkOrder.GET(OrgWorkorderNo);// kan weg?
          StartDateTime := WorkOrder."Starting Date/Time";
          EndDateTime := WorkOrder."Ending Date/Time";
          GraphResourcePlanningMgt.OnCreateEventInsertTmpResourceTable(TmpResourceTable,
            WorkOrder."Resource No.", StartDateTime, EndDateTime, FALSE, FALSE,
            WorkOrder."No.", WorkOrder."Resource Type", WorkOrder."Resource Group No.", WorkOrder."Resource No.",
            WorkOrder."Operates Plant (WO)", WorkOrder."Duration Time", WorkOrder."No.", WorkOrder."Plan during Clock Time", WorkOrder."Plan in Weekend", WorkOrder."Firm Planned");

          IF LinkedResource THEN BEGIN // linked resoures
            LinkedResourceRec.RESET;
            LinkedResourceRec.SETRANGE("Main Resource No.", MainResourceNo);
            IF LinkedResourceRec.FINDSET THEN BEGIN
              REPEAT
                GraphResourcePlanningMgt.OnCreateEventInsertTmpResourceTable(TmpResourceTable,
                  LinkedResourceRec."Resource No.", StartDateTime, EndDateTime, FALSE, FALSE,
                  OrgWorkorderNo, OrgResourceType, OrgResourceGroup, OrgResourceNo, OrgOperatesPlantWO, OrgDuration, '', OrgPlanDuringClockTime, OrgPlanInWeekend, OrgFirmPlanned);
              UNTIL LinkedResourceRec.NEXT = 0;
            END;
          END;
          GraphResourcePlanningMgt.CreateEvent(SourceType, WorkOrder."Source No.", TmpResourceTable, WorkordersLastExportedOn, TRUE, WorkOrder."Source Company");
          TmpResourceTable.RESET;
          TmpResourceTable.DELETEALL;
        END;
        IF SourceType = 901 THEN BEGIN // employee absence
          IF NOT GraphResourcePlanningMgt.GetEmployeeFromResource(NewSchedulerEvent.Resource, TRUE, EmployeeNo, EmployeeCompany) THEN BEGIN
            CurrPage.Scheduler.SchedulerShowMessage(SchedulerMessageType.Info, Text013, Text003);
            EXIT;
          END;
          EntryNo := GraphResourcePlanningMgt.FormatEventNo2AbsenceNo(NewSchedulerEvent.Identifier());
          GraphResourcePlanningMgt.UpdateEmployeeAbsence(NewSchedulerEvent, EmployeeNo, EntryNo, MessageStringAbsence, '<br>');
          SchedulerEventsDelete.AddEvent(NewSchedulerEvent);
          SchedulerEvent := SchedulerEvent.SchedulerEvent;
          GraphResourcePlanningMgt.ExportEmployeeAbsence(SchedulerEvent, EntryNo, EmployeeCompany);
          SchedulerEvents.AddEvent(SchedulerEvent);
        END;
        IF SourceType = 902 THEN BEGIN // plant absence
          IF NOT GraphResourcePlanningMgt.GetPlantFromResource(NewSchedulerEvent.Resource, TRUE, PlantType, PlantNo, PlantCompany) THEN BEGIN
            CurrPage.Scheduler.SchedulerShowMessage(SchedulerMessageType.Info, Text013, Text003);
            EXIT;
          END;
          EntryNo := GraphResourcePlanningMgt.FormatEventNo2AbsenceNo(NewSchedulerEvent.Identifier());
          GraphResourcePlanningMgt.UpdatePlantAbsence(NewSchedulerEvent, PlantType, PlantNo,EntryNo, MessageStringAbsence, '<br>');
          SchedulerEventsDelete.AddEvent(NewSchedulerEvent);
          SchedulerEvent := SchedulerEvent.SchedulerEvent;
          GraphResourcePlanningMgt.ExportPlantAbsence(SchedulerEvent, EntryNo, PlantCompany);
          SchedulerEvents.AddEvent(SchedulerEvent);
        END;
      END;

      GraphResourcePlanningMgt.ExportEventsUpdatedWorkOrders(SchedulerEvents, SchedulerEventsDelete, TmpWorkorderTable);

      GraphResourcePlanningMgt.CheckEvents(SchedulerEvents, MessageString, '<br>', CurrPlanHorizonEndDate);
      IF MessageStringAbsence <> '' THEN
        CurrPage.Scheduler.SchedulerShowMessage(SchedulerMessageType.Warning, MessageStringAbsence, Text012);
      IF MessageString <> '' THEN
        CurrPage.Scheduler.SchedulerShowMessage(SchedulerMessageType.Warning, MessageString, Text012);


      GraphResourcePlanningMgt.ExportEventsChangeLogWorkorders(
        SchedulerEvents, SchedulerEventsDelete, CurrPlanHorizonStartDate, CurrPlanHorizonEndDate, WorkordersLastExportedOn);
      CurrPage.Scheduler.SchedulerOnAfterDeleteEvents(SchedulerEventsDelete);
      CurrPage.Scheduler.SchedulerOnAfterUpdateEvents(SchedulerEvents);
    END;

    LOCAL PROCEDURE OnSchedulerOnDeleteEvents@1100529013(VAR OldSchedulerEvents@1100529000 : DotNet "'Fps.Nav.Addin.Scheduler, PublicKeyToken=024bd013665211e9'.Fps.Nav.Addin.Scheduler.SchedulerEvents");
    VAR
      TmpWorkOrder@1100529005 : TEMPORARY Record 11229279;
      TmpWorkorderTable@1100529002 : TEMPORARY Record 11020579;
      OldSchedulerEvent@1100529003 : DotNet "'Fps.Nav.Addin.Scheduler, PublicKeyToken=024bd013665211e9'.Fps.Nav.Addin.Scheduler.SchedulerEvent";
      SchedulerEvents@1100529001 : DotNet "'Fps.Nav.Addin.Scheduler, PublicKeyToken=024bd013665211e9'.Fps.Nav.Addin.Scheduler.SchedulerEvents";
      SchedulerEventsDelete@1100529004 : DotNet "'Fps.Nav.Addin.Scheduler, PublicKeyToken=024bd013665211e9'.Fps.Nav.Addin.Scheduler.SchedulerEvents";
      SourceType@1100529006 : Option;
      EventIdentifier@1100527701 : Code[40];
      ResourceGroupTypeNo@1100527700 : Integer;
    BEGIN
      FOREACH OldSchedulerEvent IN OldSchedulerEvents.Events DO BEGIN
        SourceType := GraphResourcePlanningMgt.EventSourceTypeText2OptionNo(OldSchedulerEvent.GetFeature('sourcetype'));
        EventIdentifier := OldSchedulerEvent.Identifier();
        ResourceGroupTypeNo := GraphResourcePlanningMgt.IsResourceNo2ResourceGroup(EventIdentifier);
        IF (ResourceGroupTypeNo = 0) AND (SourceType IN [TmpWorkOrder."Source Type"::ServiceOrder,TmpWorkOrder."Source Type"::Project,TmpWorkOrder."Source Type"::Request]) THEN BEGIN
          TmpWorkOrder."No." := OldSchedulerEvent.Identifier();
          TmpWorkOrder.INSERT;
        END;
      END;
      IF TmpWorkOrder.FINDSET THEN BEGIN
        IF NOT CONFIRM(Text008, TRUE, TmpWorkOrder.COUNT) THEN
          EXIT;
        REPEAT
          GraphResourcePlanningMgt.DeleteEvent(TmpWorkOrder."No.", TmpWorkorderTable);
        UNTIL TmpWorkOrder.NEXT = 0;
        SchedulerEvents := SchedulerEvents.SchedulerEvents;
        SchedulerEventsDelete := SchedulerEventsDelete.SchedulerEvents;
        GraphResourcePlanningMgt.ExportEventsUpdatedWorkOrders(SchedulerEvents, SchedulerEventsDelete, TmpWorkorderTable);
        CurrPage.Scheduler.SchedulerOnAfterDeleteEvents(SchedulerEventsDelete);
      END;
    END;

    LOCAL PROCEDURE OnSchedulerOnAutoRefreshEvents@1100529003();
    VAR
      SchedulerEventsUpdate@1100529000 : DotNet "'Fps.Nav.Addin.Scheduler, PublicKeyToken=024bd013665211e9'.Fps.Nav.Addin.Scheduler.SchedulerEvents";
      SchedulerEventsDelete@1100529001 : DotNet "'Fps.Nav.Addin.Scheduler, PublicKeyToken=024bd013665211e9'.Fps.Nav.Addin.Scheduler.SchedulerEvents";
    BEGIN
      IF NOT RefreshWorkordersAllowed THEN
        EXIT;
      SchedulerEventsUpdate := SchedulerEventsUpdate.SchedulerEvents;
      SchedulerEventsDelete := SchedulerEventsDelete.SchedulerEvents;
      GraphResourcePlanningMgt.ExportEventsChangeLogWorkorders(
        SchedulerEventsUpdate, SchedulerEventsDelete, CurrPlanHorizonStartDate, CurrPlanHorizonEndDate, WorkordersLastExportedOn);
      GraphResourcePlanningMgt.ExportAllEmployeeAbsence(SchedulerEventsUpdate, CurrPlanHorizonStartDate, CurrPlanHorizonEndDate);
      GraphResourcePlanningMgt.ExportAllPlantAbsence(SchedulerEventsUpdate, CurrPlanHorizonStartDate, CurrPlanHorizonEndDate);

      IF (SchedulerEventsUpdate.Events.Count > 0) THEN
        CurrPage.Scheduler.SchedulerOnAfterUpdateEvents(SchedulerEventsUpdate);
      IF (SchedulerEventsDelete.Events.Count > 0) THEN
        CurrPage.Scheduler.SchedulerOnAfterDeleteEvents(SchedulerEventsDelete);
    END;

    LOCAL PROCEDURE OnSchedulerOnUpdateConfig@1100528301(VAR NewSchedulerConfig@1100528300 : DotNet "'Fps.Nav.Addin.Scheduler,PublicKeyToken=024bd013665211e9'.Fps.Nav.Addin.Scheduler.SchedulerConfig");
    BEGIN
      GraphResourcePlanningMgt.UpdateResourcePlanningUserSetup(NewSchedulerConfig);
      CurrPage.Scheduler.SchedulerOnAfterUpdateConfig(NewSchedulerConfig);
    END;

    LOCAL PROCEDURE OnSchedulerOnEventCommand@1100528306(Command@1100528300 : Text;SchedulerEvents@1100528301 : DotNet "'Fps.Nav.Addin.Scheduler,  PublicKeyToken=024bd013665211e9'.Fps.Nav.Addin.Scheduler.SchedulerEvents");
    VAR
      SchedulerEvent@1100528302 : DotNet "'Fps.Nav.Addin.Scheduler,  PublicKeyToken=024bd013665211e9'.Fps.Nav.Addin.Scheduler.SchedulerEvent";
      TextStringSucceeded@1100528303 : Text;
      TextStringFailed@1100528304 : Text;
    BEGIN
      CASE Command OF
        'ShowEventInfo':
          BEGIN
            SchedulerEvent := SchedulerEvents.FirstOrDefault;
            OnShowEvent(SchedulerEvent);
            OnSchedulerOnAutoRefreshEvents;
          END;
        'ShowEventResourceInfo':
          BEGIN
            SchedulerEvent := SchedulerEvents.FirstOrDefault;
            GraphResourcePlanningMgt.ShowResourceSourceCard(SchedulerEvent.Resource);
            OnSchedulerOnAutoRefreshEvents;
          END;
        'OpenSource':
          BEGIN
            SchedulerEvent := SchedulerEvents.FirstOrDefault;
            GraphResourcePlanningMgt.ShowSourceCard(SchedulerEvent.Identifier);
            OnSchedulerOnAutoRefreshEvents;
          END;
        'ExportEventsFieldService':
          BEGIN
            GraphResourcePlanningMgt.ExportEventsFieldService(SchedulerEvents, TextStringSucceeded, TextStringFailed);
            IF TextStringFailed <> '' THEN
              CurrPage.Scheduler.SchedulerShowMessage(SchedulerMessageType.Warning, TextStringFailed, Text016);
            IF TextStringSucceeded <> '' THEN
              CurrPage.Scheduler.SchedulerShowMessage(SchedulerMessageType.Info, TextStringSucceeded, Text015);
            OnSchedulerOnAutoRefreshEvents;
          END;
        'UnplanWorkOrder':
          BEGIN
            GraphResourcePlanningMgt.UnplanWorkOrder(SchedulerEvents, TextStringSucceeded, TextStringFailed);
            IF TextStringFailed <> '' THEN
              CurrPage.Scheduler.SchedulerShowMessage(SchedulerMessageType.Warning, TextStringFailed, Text018);
            IF TextStringSucceeded <> '' THEN
              CurrPage.Scheduler.SchedulerShowMessage(SchedulerMessageType.Info, TextStringSucceeded, Text017);
            OnSchedulerOnAutoRefreshEvents;
          END;
        'CreateNextWorkOrder':
          BEGIN
            GraphResourcePlanningMgt.CreateNextWorkOrder(SchedulerEvents, TextStringSucceeded, TextStringFailed);
            IF TextStringFailed <> '' THEN
              CurrPage.Scheduler.SchedulerShowMessage(SchedulerMessageType.Warning, TextStringFailed, Text020);
            IF TextStringSucceeded <> '' THEN
              CurrPage.Scheduler.SchedulerShowMessage(SchedulerMessageType.Info, TextStringSucceeded, Text019);
            OnSchedulerOnAutoRefreshEvents;
          END;
      END;
    END;

    LOCAL PROCEDURE OnSchedulerOnResourceCommand@1100528308(Command@1100528300 : Text;SchedulerResources@1100528301 : DotNet "'Fps.Nav.Addin.Scheduler,  PublicKeyToken=024bd013665211e9'.Fps.Nav.Addin.Scheduler.SchedulerResources");
    VAR
      SchedulerResource@1100528302 : DotNet "'Fps.Nav.Addin.Scheduler, PublicKeyToken=024bd013665211e9'.Fps.Nav.Addin.Scheduler.SchedulerResource";
      SchedulerURLOptions@1100525000 : DotNet "'Fps.Nav.Addin.Scheduler, PublicKeyToken=024bd013665211e9'.Fps.Nav.Addin.Scheduler.SchedulerURLOptions";
      PhoneNumber@1100525001 : Text;
      PhoneType@1100525002 : Text;
      EmailAddress@1100525003 : Text;
    BEGIN
      SchedulerResource := SchedulerResources.FirstOrDefault;
      CASE Command OF
        'ShowResourceInfo':
          BEGIN
            GraphResourcePlanningMgt.ShowResourceSourceCard(SchedulerResource.Identifier);
          END;
        'CallResource':
          BEGIN
            IF GraphResourcePlanningMgt.GetResourcePhone(SchedulerResource, PhoneNumber, PhoneType) THEN BEGIN
              SchedulerURLOptions := SchedulerURLOptions.SchedulerURLOptions;
              SchedulerURLOptions.hidden(TRUE);
              IF CURRENTCLIENTTYPE = CLIENTTYPE::Windows THEN
                HYPERLINK(PhoneType + PhoneNumber)
              ELSE
                CurrPage.Scheduler.SchedulerOpenURL(PhoneType + PhoneNumber, '', SchedulerURLOptions);
            END ELSE BEGIN
              CurrPage.Scheduler.SchedulerShowMessage(SchedulerMessageType.Info, STRSUBSTNO(Text021, SchedulerResource.Identifier), Text012);
            END;
          END;
        'EmailResource':
          BEGIN
            IF GraphResourcePlanningMgt.GetResourceEmail(SchedulerResource, EmailAddress) THEN BEGIN
              SchedulerURLOptions := SchedulerURLOptions.SchedulerURLOptions;
              SchedulerURLOptions.hidden(TRUE);
              IF CURRENTCLIENTTYPE = CLIENTTYPE::Windows THEN
                HYPERLINK('mailto:' + EmailAddress)
              ELSE
                CurrPage.Scheduler.SchedulerOpenURL('mailto:' + EmailAddress, '', SchedulerURLOptions);
            END ELSE BEGIN
              CurrPage.Scheduler.SchedulerShowMessage(SchedulerMessageType.Info, STRSUBSTNO(Text022, SchedulerResource.Identifier), Text012);
            END;
          END;
          ELSE;
      END;
    END;

    EVENT Scheduler@-1100529001::ControlAddInReady@10();
    BEGIN
      OnSchedulerControlAddInReady;
    END;

    EVENT Scheduler@-1100529001::SchedulerOnAutoRefreshEvents@11(startDate@1100525001 : Text;endDate@1100525000 : Text);
    BEGIN
      OnSchedulerOnAutoRefreshEvents;
    END;

    EVENT Scheduler@-1100529001::SchedulerOnReadEvents@12(startDate@1100525001 : Text;endDate@1100525000 : Text);
    BEGIN
      OnSchedulerReadEvents(startDate, endDate);
    END;

    EVENT Scheduler@-1100529001::SchedulerOnReadResources@13(resourceView@1100525000 : Text);
    BEGIN
      OnSchedulerOnReadResources(resourceView);
    END;

    EVENT Scheduler@-1100529001::SchedulerOnReadEventResources@14(schedulerEvent@1100525000 : DotNet "'Fps.Nav.Addin.Scheduler, Culture=neutral, PublicKeyToken=024bd013665211e9'.Fps.Nav.Addin.Scheduler.SchedulerEvent");
    BEGIN
      OnSchedulerOnReadEventResources(schedulerEvent);
    END;

    EVENT Scheduler@-1100529001::SchedulerOnEventCommand@15(command@1100525001 : Text;schedulerEvents@1100525000 : DotNet "'Fps.Nav.Addin.Scheduler, Culture=neutral, PublicKeyToken=024bd013665211e9'.Fps.Nav.Addin.Scheduler.SchedulerEvents");
    BEGIN
      OnSchedulerOnEventCommand(command, schedulerEvents);
    END;

    EVENT Scheduler@-1100529001::SchedulerOnCreateEvents@16(newSchedulerEvents@1100525000 : DotNet "'Fps.Nav.Addin.Scheduler, Culture=neutral, PublicKeyToken=024bd013665211e9'.Fps.Nav.Addin.Scheduler.SchedulerEvents");
    BEGIN
      OnSchedulerOnCreateEvents(newSchedulerEvents);
    END;

    EVENT Scheduler@-1100529001::SchedulerOnDeleteEvents@17(oldSchedulerEvents@1100525000 : DotNet "'Fps.Nav.Addin.Scheduler, Culture=neutral, PublicKeyToken=024bd013665211e9'.Fps.Nav.Addin.Scheduler.SchedulerEvents");
    BEGIN
      OnSchedulerOnDeleteEvents(oldSchedulerEvents);
    END;

    EVENT Scheduler@-1100529001::SchedulerOnUpdateEvents@18(newSchedulerEvents@1100525000 : DotNet "'Fps.Nav.Addin.Scheduler, Culture=neutral, PublicKeyToken=024bd013665211e9'.Fps.Nav.Addin.Scheduler.SchedulerEvents");
    BEGIN
      OnSchedulerOnUpdateEvents(newSchedulerEvents);
    END;

    EVENT Scheduler@-1100529001::SchedulerOnResourceCommand@19(command@1100525001 : Text;schedulerResources@1100525000 : DotNet "'Fps.Nav.Addin.Scheduler, Culture=neutral, PublicKeyToken=024bd013665211e9'.Fps.Nav.Addin.Scheduler.SchedulerResources");
    BEGIN
      OnSchedulerOnResourceCommand(command, schedulerResources);
    END;

    EVENT Scheduler@-1100529001::SchedulerOnUpdateConfig@20(newSchedulerConfig@1100525000 : DotNet "'Fps.Nav.Addin.Scheduler, Culture=neutral, PublicKeyToken=024bd013665211e9'.Fps.Nav.Addin.Scheduler.SchedulerConfig");
    BEGIN
      OnSchedulerOnUpdateConfig(newSchedulerConfig);
    END;

    BEGIN
    END.
  }
}

