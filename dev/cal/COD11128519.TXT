OBJECT Codeunit 11128519 E-Invoice Export Common
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVNO10.00.00.15052 (10628+10629);
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TempEInvoiceExportHeader@1080001 : TEMPORARY Record 11128514;
      TempEInvoiceExportLine@1080000 : TEMPORARY Record 11128515;
      CBCTxt@1080002 : TextConst '@@@={Locked};ENU=cbc;NOR=cbc';
      CACTxt@1080003 : TextConst '@@@={Locked};ENU=cac;NOR=cac';
      BasicCompSpaceNameTxt@1080004 : TextConst '@@@={Locked};ENU=urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2;NOR=urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2';
      AggregateCompSpaceNameTxt@1080005 : TextConst '@@@={Locked};ENU=urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2;NOR=urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2';
      XMLDOMMgt@1080006 : Codeunit 6224;
      EInvoiceDocumentEncode@1080007 : Codeunit 11128501;
      XMLCurrNode@1080009 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLdocOut@1080010 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLRootNode@1080011 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      UBLVersionID@1080008 : Code[3];
      EInvoiceDocumentsTxt@1080012 : TextConst 'ENU=Documents;NOR=Dokument;SVE=Dokument';
      NoCategoryMatchesVATPercentErr@1080013 : TextConst '@@@=%1 is the VAT percentage.;ENU=The VAT percentage %1 does not match the percentage specified for any VAT categories.;NOR=Mva-prosenten %1 samsvarer ikke med prosenten som er angitt for mva-kategorier.';
      IbanEmptyAndNoOtherPaymentMeansErr@1080014 : TextConst 'ENU=No payment means are available for this invoice. You must specify an IBAN.;NOR=Ingen betalingsm†ter er tilgjengelige for denne fakturaen. Du m† angi et IBAN-nummer.';
      ReverseChargeNotAuthorizedErr@1080015 : TextConst 'ENU=Reverse Charge tax category (K) is not part of the UNCL 5303 code list BII2 subset (rule CL-T10-R007).;NOR=Avgiftskategorien Snudd avregning (K) er ikke en del av BII2-delsettet (regel CL-T10-R007) for UNCL 5303-kodelisten.';
      InvalidCurrencyExchangeRateErr@1000000000 : TextConst '@@@=%5 - product name;ENU=The %1 field on the %2 page has an invalid value of %3. %5 is unable to calculate the exchange rate. The electronic invoice document cannot be created for document number %4.;NOR=Feltet %1 p† siden %2 har en ugyldig verdi, %3. %5 kan ikke beregne valutakursen. Det elektroniske fakturadokumentet kan ikke opprettes for dokumentnummer %4.';

    PROCEDURE CreateDocAndRootNode@1080001();
    VAR
      Header@1080002 : Text[1000];
    BEGIN
      Header := '<?xml version="1.0" encoding="UTF-8"?> ' +
        '<' + TempEInvoiceExportHeader."Schema Name" + ' xsi:schemaLocation="' + TempEInvoiceExportHeader."Schema Location" + '" ' +
        'xmlns="' + TempEInvoiceExportHeader.xmlns + '" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" ';
      IF TempEInvoiceExportHeader."Uses Common Aggregate Comp." THEN
        Header += 'xmlns:cac="urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2" ';
      IF TempEInvoiceExportHeader."Uses Common Basic Comp." THEN
        Header += 'xmlns:cbc="urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2" ';
      IF TempEInvoiceExportHeader."Uses Common Extension Comp." THEN
        Header += 'xmlns:ext="urn:oasis:names:specification:ubl:schema:xsd:CommonExtensionComponents-2" ';
      Header += '/>';

      XMLDOMMgt.LoadXMLDocumentFromText(Header,XMLdocOut);
      XMLCurrNode := XMLdocOut.DocumentElement;
      XMLRootNode := XMLCurrNode;
      UBLVersionID := GetUBLVersionID;
    END;

    PROCEDURE CreateLineNode@1080005(TempEInvExportLine@1080000 : TEMPORARY Record 11128515);
    BEGIN
      TempEInvoiceExportLine := TempEInvExportLine;
      XMLCurrNode := XMLRootNode; // Ensure that line nodes are always added to the root.

      // Header->Line
      AddGroupNode(XMLCurrNode,TempEInvoiceExportHeader."Schema Name" + 'Line',AggregateCompSpaceNameTxt,CACTxt);
      AddNotEmptyNode(XMLCurrNode,'ID',FORMAT(TempEInvoiceExportLine."Line No."),BasicCompSpaceNameTxt,CBCTxt);
    END;

    PROCEDURE SaveToXML@1080052(VAR TempEInvoiceTransferFile@1080002 : TEMPORARY Record 11128516;Path@1080001 : Text[250];FileName@1080000 : Text[250]);
    VAR
      FileMgt@1080003 : Codeunit 419;
    BEGIN
      TempEInvoiceTransferFile."Server Temp File Name" := COPYSTR(FileMgt.ServerTempFileName('xml'),1,250);
      TempEInvoiceTransferFile."Local File Name" := STRSUBSTNO('%1.xml',FileName);
      TempEInvoiceTransferFile."Local Path" := DELCHR(Path,'>','\');
      XMLdocOut.Save(TempEInvoiceTransferFile."Server Temp File Name");
    END;

    PROCEDURE DownloadEInvoiceFile@1080033(VAR TempEInvoiceTransferFile@1080000 : TEMPORARY Record 11128516);
    VAR
      FileManagement@1080001 : Codeunit 419;
      ZipFileName@1080002 : Text;
    BEGIN
      TempEInvoiceTransferFile.FINDSET;
      IF NOT FileManagement.CanRunDotNetOnClient THEN BEGIN
        ZipFileName := FileManagement.CreateZipArchiveObject;
        REPEAT
          FileManagement.AddFileToZipArchive(TempEInvoiceTransferFile."Server Temp File Name",
            TempEInvoiceTransferFile."Local File Name");
        UNTIL TempEInvoiceTransferFile.NEXT = 0;
        FileManagement.CloseZipArchive;
        FileManagement.DownloadHandler(ZipFileName,'','','',STRSUBSTNO('%1.zip',EInvoiceDocumentsTxt));
      END ELSE
        REPEAT
          FileManagement.DownloadToFile(
            TempEInvoiceTransferFile."Server Temp File Name",
            STRSUBSTNO('%1\%2',TempEInvoiceTransferFile."Local Path",TempEInvoiceTransferFile."Local File Name"));
        UNTIL TempEInvoiceTransferFile.NEXT = 0;
    END;

    PROCEDURE SetEInvoiceCommonTables@1080004(TempEInvoiceExportHeaderValue@1080001 : TEMPORARY Record 11128514;VAR TempEInvoiceExportLineValue@1080000 : TEMPORARY Record 11128515);
    BEGIN
      TempEInvoiceExportHeader := TempEInvoiceExportHeaderValue;
      TempEInvoiceExportLine.COPY(TempEInvoiceExportLineValue,TRUE);
    END;

    PROCEDURE AddHeaderAccountingCustomerParty@1080016();
    VAR
      Customer@1080001 : Record 18;
    BEGIN
      AddGroupNode(XMLCurrNode,'AccountingCustomerParty',AggregateCompSpaceNameTxt,CACTxt);

      AddGroupNode(XMLCurrNode,'Party',AggregateCompSpaceNameTxt,CACTxt);

      IF UBLVersionID <> '2.1' THEN BEGIN
        AddGroupNodeWithData(XMLCurrNode,'EndpointID','9908:' + TempEInvoiceExportHeader.GLN,BasicCompSpaceNameTxt,CBCTxt);
        AddAttribute(XMLCurrNode,'schemeID','GLN');
        AddAttribute(XMLCurrNode,'schemeAgencyID','9');
        XMLCurrNode := XMLCurrNode.ParentNode;
      END ELSE
        IF Customer.GET(TempEInvoiceExportHeader."Bill-to Customer No.") AND
           (Customer."VAT Registration No." <> '')
        THEN BEGIN
          AddGroupNodeWithData(
            XMLCurrNode,'EndpointID',EInvoiceDocumentEncode.GetVATRegNo(Customer."VAT Registration No.",FALSE),
            BasicCompSpaceNameTxt,CBCTxt);
          AddAttribute(XMLCurrNode,'schemeID','NO:ORGNR');
          XMLCurrNode := XMLCurrNode.ParentNode;
        END;

      // Header->AccountingCustomerParty->Party->PartyIdentification
      IF (UBLVersionID = '2.1') AND (TempEInvoiceExportHeader.GLN <> '') THEN BEGIN
        AddGroupNode(XMLCurrNode,'PartyIdentification',AggregateCompSpaceNameTxt,CACTxt);
        AddGroupNodeWithData(XMLCurrNode,'ID',TempEInvoiceExportHeader.GLN,BasicCompSpaceNameTxt,CBCTxt);
        AddAttribute(XMLCurrNode,'schemeID','GLN');
        XMLCurrNode := XMLCurrNode.ParentNode;
        XMLCurrNode := XMLCurrNode.ParentNode;
      END;
      IF UBLVersionID = '2.0' THEN BEGIN
        AddGroupNode(XMLCurrNode,'PartyIdentification',AggregateCompSpaceNameTxt,CACTxt);
        AddLastNode(XMLCurrNode,'ID',TempEInvoiceExportHeader."Bill-to Customer No.",BasicCompSpaceNameTxt,CBCTxt);
      END;

      // Header->AccountingCustomerParty->Party->PartyName
      AddGroupNode(XMLCurrNode,'PartyName',AggregateCompSpaceNameTxt,CACTxt);
      AddLastNode(XMLCurrNode,'Name',TempEInvoiceExportHeader."Bill-to Name",BasicCompSpaceNameTxt,CBCTxt);

      // Header->AccountingCustomerParty->Party->PostalAddress
      AddGroupNode(XMLCurrNode,'PostalAddress',AggregateCompSpaceNameTxt,CACTxt);
      AddNotEmptyNode(XMLCurrNode,'StreetName',TempEInvoiceExportHeader."Bill-to Address",BasicCompSpaceNameTxt,CBCTxt);
      AddNotEmptyNode(XMLCurrNode,'AdditionalStreetName',TempEInvoiceExportHeader."Bill-to Address 2",BasicCompSpaceNameTxt,CBCTxt);
      AddNotEmptyNode(XMLCurrNode,'CityName',TempEInvoiceExportHeader."Bill-to City",BasicCompSpaceNameTxt,CBCTxt);
      AddNotEmptyNode(XMLCurrNode,'PostalZone',TempEInvoiceExportHeader."Bill-to Post Code",BasicCompSpaceNameTxt,CBCTxt);
      AddNotEmptyNode(XMLCurrNode,'CountrySubentity',TempEInvoiceExportHeader."Bill-to County",BasicCompSpaceNameTxt,CBCTxt);

      // Header->AccountingCustomerParty->Party->PostalAddress->Country
      AddCountry(EInvoiceDocumentEncode.GetEInvoiceCountryRegionCode(TempEInvoiceExportHeader."Bill-to Country/Region Code"));
      XMLCurrNode := XMLCurrNode.ParentNode;

      // Header->AccountingCustomerParty->Party->PartyTextScheme
      AddGroupNode(XMLCurrNode,'PartyTaxScheme',AggregateCompSpaceNameTxt,CACTxt);
      AddNotEmptyNode(
        XMLCurrNode,'CompanyID',
        EInvoiceDocumentEncode.GetVATRegNo(
          TempEInvoiceExportHeader."VAT Registration No.",TRUE),
        BasicCompSpaceNameTxt,CBCTxt);

      AddGroupNode(XMLCurrNode,'TaxScheme',AggregateCompSpaceNameTxt,CACTxt);
      AddGroupNodeWithData(XMLCurrNode,'ID','VAT',BasicCompSpaceNameTxt,CBCTxt);
      AddAttribute(XMLCurrNode,'schemeID','UN/ECE 5153');
      AddAttribute(XMLCurrNode,'schemeAgencyID','6');
      XMLCurrNode := XMLCurrNode.ParentNode;
      XMLCurrNode := XMLCurrNode.ParentNode;
      XMLCurrNode := XMLCurrNode.ParentNode;

      // Header->AccountingCustomerParty->Party->PartyLegalEntity
      AddGroupNode(XMLCurrNode,'PartyLegalEntity',AggregateCompSpaceNameTxt,CACTxt);

      // Header->AccountingCustomerParty->Party->PartyLegalEntity->RegistrationName
      AddNotEmptyNode(XMLCurrNode,'RegistrationName',TempEInvoiceExportHeader."Bill-to Name",BasicCompSpaceNameTxt,CBCTxt);

      // Header->AccountingCustomerParty->Party->PartyLegalEntity->CompanyID
      AddGroupNodeWithData(
        XMLCurrNode,'CompanyID',
        WriteCompanyID(TempEInvoiceExportHeader."VAT Registration No."),
        BasicCompSpaceNameTxt,CBCTxt);

      // UBL 2.1
      IF UBLVersionID = '2.1' THEN BEGIN
        AddAttribute(XMLCurrNode,'schemeID','NO:ORGNR');
        AddAttribute(XMLCurrNode,'schemeAgencyID','82');
      END;
      XMLCurrNode := XMLCurrNode.ParentNode;
      XMLCurrNode := XMLCurrNode.ParentNode;

      // Header->AccountingCustomerParty->Party->Contact
      AddGroupNode(XMLCurrNode,'Contact',AggregateCompSpaceNameTxt,CACTxt);
      AddNodeNA(XMLCurrNode,'ID',TempEInvoiceExportHeader."Your Reference",BasicCompSpaceNameTxt,CBCTxt);
      IF TempEInvoiceExportHeader."Your Reference" <> '' THEN BEGIN
        AddNotEmptyNode(XMLCurrNode,'Name',TempEInvoiceExportHeader."Bill-to Name",BasicCompSpaceNameTxt,CBCTxt);
        IF Customer.GET(TempEInvoiceExportHeader."Bill-to Customer No.") THEN BEGIN
          AddNotEmptyNode(XMLCurrNode,'Telephone',Customer."Phone No.",BasicCompSpaceNameTxt,CBCTxt);
          AddNotEmptyNode(XMLCurrNode,'Telefax',Customer."Fax No.",BasicCompSpaceNameTxt,CBCTxt);
          AddNotEmptyNode(XMLCurrNode,'ElectronicMail',Customer."E-Mail",BasicCompSpaceNameTxt,CBCTxt);
        END;
        XMLCurrNode := XMLCurrNode.ParentNode;
      END;

      XMLCurrNode := XMLCurrNode.ParentNode;
      XMLCurrNode := XMLCurrNode.ParentNode;
    END;

    PROCEDURE AddHeaderAccountingSupplierParty@1080037();
    VAR
      CompanyInfo@1080010 : Record 79;
      ResponsibilityCenter@1080007 : Record 5714;
      SalespersonPurchaser@1080009 : Record 13;
      Name@1080001 : Text[250];
      Address@1080002 : Text[250];
      Address2@1080003 : Text[250];
      City@1080004 : Text[250];
      PostCode@1080005 : Text[250];
      County@1080006 : Text[250];
      CountryRegionCode@1080008 : Text[10];
    BEGIN
      CompanyInfo.GET;

      IF TempEInvoiceExportHeader."Responsibility Center" <> '' THEN BEGIN
        ResponsibilityCenter.GET(TempEInvoiceExportHeader."Responsibility Center");
        Name := ResponsibilityCenter.Name;
        Address := ResponsibilityCenter.Address;
        Address2 := ResponsibilityCenter."Address 2";
        City := ResponsibilityCenter.City;
        PostCode := ResponsibilityCenter."Post Code";
        County := ResponsibilityCenter.County;
        CountryRegionCode := ResponsibilityCenter."Country/Region Code";
      END ELSE BEGIN
        Name := CompanyInfo.Name;
        Address := CompanyInfo.Address;
        Address2 := CompanyInfo."Address 2";
        City := CompanyInfo.City;
        PostCode := CompanyInfo."Post Code";
        County := CompanyInfo.County;
        CountryRegionCode := CompanyInfo."Country/Region Code";
      END;

      AddGroupNode(XMLCurrNode,'AccountingSupplierParty',AggregateCompSpaceNameTxt,CACTxt);

      AddGroupNode(XMLCurrNode,'Party',AggregateCompSpaceNameTxt,CACTxt);

      IF UBLVersionID = '2.1' THEN BEGIN
        AddGroupNodeWithData(
          XMLCurrNode,'EndpointID',EInvoiceDocumentEncode.GetVATRegNo(CompanyInfo."VAT Registration No.",FALSE),
          BasicCompSpaceNameTxt,CBCTxt);
        AddAttribute(XMLCurrNode,'schemeID','NO:ORGNR');
        XMLCurrNode := XMLCurrNode.ParentNode;
      END ELSE BEGIN
        AddGroupNodeWithData(XMLCurrNode,'EndpointID','9908:' + CompanyInfo.GLN,
          BasicCompSpaceNameTxt,CBCTxt);
        AddAttribute(XMLCurrNode,'schemeID','GLN');
        AddAttribute(XMLCurrNode,'schemeAgencyID','9');
        XMLCurrNode := XMLCurrNode.ParentNode;
      END;

      // Header->AccountingSupplierParty->Party->PartyName
      AddGroupNode(XMLCurrNode,'PartyName',AggregateCompSpaceNameTxt,CACTxt);
      AddLastNode(XMLCurrNode,'Name',Name,BasicCompSpaceNameTxt,CBCTxt);

      // Header->AccountingSupplierParty->Party->PostalAddress
      AddGroupNode(XMLCurrNode,'PostalAddress',AggregateCompSpaceNameTxt,CACTxt);

      AddNotEmptyNode(XMLCurrNode,'StreetName',Address,BasicCompSpaceNameTxt,CBCTxt);
      AddNotEmptyNode(XMLCurrNode,'AdditionalStreetName',Address2,BasicCompSpaceNameTxt,CBCTxt);
      AddNotEmptyNode(XMLCurrNode,'CityName',City,BasicCompSpaceNameTxt,CBCTxt);
      AddNotEmptyNode(XMLCurrNode,'PostalZone',PostCode,BasicCompSpaceNameTxt,CBCTxt);
      AddNotEmptyNode(XMLCurrNode,'CountrySubentity',County,BasicCompSpaceNameTxt,CBCTxt);

      // Header->AccountingSupplierParty->Party->PostalAddress->Country
      AddCountry(CountryRegionCode);
      XMLCurrNode := XMLCurrNode.ParentNode;

      // Header->AccountingSupplierParty->Party->PartyTextScheme
      AddGroupNode(XMLCurrNode,'PartyTaxScheme',AggregateCompSpaceNameTxt,CACTxt);

      AddNotEmptyNode(
        XMLCurrNode,'CompanyID',EInvoiceDocumentEncode.GetVATRegNo(CompanyInfo."VAT Registration No.",TRUE),
        BasicCompSpaceNameTxt,CBCTxt);

      AddGroupNode(XMLCurrNode,'TaxScheme',AggregateCompSpaceNameTxt,CACTxt);

      AddGroupNodeWithData(XMLCurrNode,'ID','VAT',BasicCompSpaceNameTxt,CBCTxt);
      AddAttribute(XMLCurrNode,'schemeID','UN/ECE 5153');
      AddAttribute(XMLCurrNode,'schemeAgencyID','6');
      XMLCurrNode := XMLCurrNode.ParentNode;
      XMLCurrNode := XMLCurrNode.ParentNode;
      XMLCurrNode := XMLCurrNode.ParentNode;

      AddPartyLegalEntity;

      IF SalespersonPurchaser.GET(TempEInvoiceExportHeader."Salesperson Code") THEN
        IF SalespersonPurchaser.Name <> '' THEN BEGIN
          AddGroupNode(XMLCurrNode,'Contact',AggregateCompSpaceNameTxt,CACTxt);
          AddNotEmptyNode(XMLCurrNode,'ID',SalespersonPurchaser.Code,BasicCompSpaceNameTxt,CBCTxt);
          AddNotEmptyNode(XMLCurrNode,'Name',SalespersonPurchaser.Name,BasicCompSpaceNameTxt,CBCTxt);
          AddNotEmptyNode(XMLCurrNode,'Telephone',SalespersonPurchaser."Phone No.",BasicCompSpaceNameTxt,CBCTxt);
          AddLastNode(XMLCurrNode,'ElectronicMail',SalespersonPurchaser."E-Mail",BasicCompSpaceNameTxt,CBCTxt);
        END;

      XMLCurrNode := XMLCurrNode.ParentNode;
      XMLCurrNode := XMLCurrNode.ParentNode;
    END;

    PROCEDURE AddHeaderAllowanceCharge@1080044();
    VAR
      VATPercentage@1080001 : Decimal;
      VATCalculationType@1080002 : 'Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax';
      VATProdPostingGroup@1080003 : Code[10];
    BEGIN
      VATPercentage := 0.0;
      IF TempEInvoiceExportLine.FINDFIRST THEN BEGIN
        VATPercentage := TempEInvoiceExportLine."VAT %";
        VATCalculationType := TempEInvoiceExportLine."VAT Calculation Type";
        VATProdPostingGroup := TempEInvoiceExportLine."VAT Prod. Posting Group";
      END;

      // Header->AllowanceCharge
      IF TempEInvoiceExportHeader."Total Invoice Discount Amount" > 0 THEN BEGIN
        AddGroupNode(XMLCurrNode,'AllowanceCharge',AggregateCompSpaceNameTxt,CACTxt);

        AddNotEmptyNode(XMLCurrNode,'ChargeIndicator','false',BasicCompSpaceNameTxt,CBCTxt);
        AddNotEmptyNode(XMLCurrNode,'AllowanceChargeReason','Rabat',BasicCompSpaceNameTxt,CBCTxt);

        AddGroupNodeWithData(
          XMLCurrNode,'Amount',EInvoiceDocumentEncode.DecimalToText(TempEInvoiceExportHeader."Total Invoice Discount Amount"),
          BasicCompSpaceNameTxt,CBCTxt);
        AddAttribute(XMLCurrNode,'currencyID',TempEInvoiceExportHeader."Currency Code");
        XMLCurrNode := XMLCurrNode.ParentNode;

        // Header->AllowanceCharge->TaxCategory
        AddGroupNode(XMLCurrNode,'TaxCategory',AggregateCompSpaceNameTxt,CACTxt);

        AddGroupNodeWithData(XMLCurrNode,'ID',GetTaxCategoryID(VATPercentage,VATCalculationType,VATProdPostingGroup,TRUE),
          BasicCompSpaceNameTxt,CBCTxt);
        AddAttribute(XMLCurrNode,'schemeID','UNCL5305');
        XMLCurrNode := XMLCurrNode.ParentNode;

        AddNotEmptyNode(XMLCurrNode,'Percent',EInvoiceDocumentEncode.DecimalToText(VATPercentage),
          BasicCompSpaceNameTxt,CBCTxt);

        // Header->AllowanceCharge->TaxCategory->TaxScheme
        AddGroupNode(XMLCurrNode,'TaxScheme',AggregateCompSpaceNameTxt,CACTxt);
        AddLastNode(XMLCurrNode,'ID','VAT',BasicCompSpaceNameTxt,CBCTxt);
        XMLCurrNode := XMLCurrNode.ParentNode;
        XMLCurrNode := XMLCurrNode.ParentNode;
      END;
    END;

    PROCEDURE AddHeaderBillingReference@1080029();
    BEGIN
      // Header->BillingReference
      AddGroupNode(XMLCurrNode,'BillingReference',AggregateCompSpaceNameTxt,CACTxt);
      AddGroupNode(XMLCurrNode,'InvoiceDocumentReference',AggregateCompSpaceNameTxt,CACTxt);

      AddLastNode(XMLCurrNode,'ID',TempEInvoiceExportHeader."Document No.",BasicCompSpaceNameTxt,CBCTxt);

      XMLCurrNode := XMLCurrNode.ParentNode;
    END;

    PROCEDURE AddHeaderCommonContent@1080002();
    BEGIN
      AddNotEmptyNode(XMLCurrNode,'UBLVersionID',UBLVersionID,BasicCompSpaceNameTxt,CBCTxt);
      AddNotEmptyNode(XMLCurrNode,'CustomizationID',TempEInvoiceExportHeader."Customization ID",BasicCompSpaceNameTxt,CBCTxt);

      AddNotEmptyNode(XMLCurrNode,'ProfileID',TempEInvoiceExportHeader."Profile ID",BasicCompSpaceNameTxt,CBCTxt);

      AddNotEmptyNode(XMLCurrNode,'ID',TempEInvoiceExportHeader."No.",BasicCompSpaceNameTxt,CBCTxt);
      AddNotEmptyNode(
        XMLCurrNode,'IssueDate',EInvoiceDocumentEncode.DateToText(TempEInvoiceExportHeader."Posting Date"),BasicCompSpaceNameTxt,
        CBCTxt);
    END;

    PROCEDURE AddHeaderContractDocumentReference@1080043();
    BEGIN
      // Header->ContractDocumentReference
      AddGroupNode(XMLCurrNode,'ContractDocumentReference',AggregateCompSpaceNameTxt,CACTxt);

      IF TempEInvoiceExportHeader."Order No." <> '' THEN BEGIN
        AddNotEmptyNode(XMLCurrNode,'ID',TempEInvoiceExportHeader."Order No.",BasicCompSpaceNameTxt,CBCTxt);
        AddLastNode(XMLCurrNode,'DocumentType','Order',BasicCompSpaceNameTxt,CBCTxt);
      END ELSE
        AddLastNode(XMLCurrNode,'ID',TempEInvoiceExportHeader."Pre-Assigned No.",BasicCompSpaceNameTxt,CBCTxt);
    END;

    PROCEDURE AddHeaderDocumentCurrencyCode@1080027();
    BEGIN
      AddGroupNodeWithData(XMLCurrNode,'DocumentCurrencyCode',TempEInvoiceExportHeader."Currency Code",BasicCompSpaceNameTxt,CBCTxt);
      AddAttribute(XMLCurrNode,'listID','ISO4217');
      XMLCurrNode := XMLCurrNode.ParentNode;
    END;

    PROCEDURE AddHeaderInvoiceTypeCode@1080035();
    BEGIN
      AddGroupNodeWithData(XMLCurrNode,'InvoiceTypeCode','380',BasicCompSpaceNameTxt,CBCTxt);
      AddAttribute(XMLCurrNode,'listID','UNCL1001');
      AddAttribute(XMLCurrNode,'listAgencyID','6');
      XMLCurrNode := XMLCurrNode.ParentNode;
    END;

    PROCEDURE AddHeaderLegalMonetaryTotal@1080020();
    BEGIN
      // Header->LegalMonetaryTotal
      AddGroupNode(XMLCurrNode,'LegalMonetaryTotal',AggregateCompSpaceNameTxt,CACTxt);

      AddGroupNodeWithData(XMLCurrNode,'LineExtensionAmount',
        EInvoiceDocumentEncode.DecimalToText(TempEInvoiceExportHeader."Legal Taxable Amount"),
        BasicCompSpaceNameTxt,CBCTxt);

      AddAttribute(XMLCurrNode,'currencyID',TempEInvoiceExportHeader."Currency Code");
      XMLCurrNode := XMLCurrNode.ParentNode;

      AddGroupNodeWithData(
        XMLCurrNode,'TaxExclusiveAmount',EInvoiceDocumentEncode.DecimalToText(TempEInvoiceExportHeader."Legal Taxable Amount"),
        BasicCompSpaceNameTxt,CBCTxt);
      AddAttribute(XMLCurrNode,'currencyID',TempEInvoiceExportHeader."Currency Code");
      XMLCurrNode := XMLCurrNode.ParentNode;

      AddGroupNodeWithData(
        XMLCurrNode,'TaxInclusiveAmount',EInvoiceDocumentEncode.DecimalToText(
          TempEInvoiceExportHeader."Total Amount" + TempEInvoiceExportHeader."Total Rounding Amount"),
        BasicCompSpaceNameTxt,CBCTxt);
      AddAttribute(XMLCurrNode,'currencyID',TempEInvoiceExportHeader."Currency Code");
      XMLCurrNode := XMLCurrNode.ParentNode;

      IF TempEInvoiceExportHeader."Total Invoice Discount Amount" > 0 THEN BEGIN
        AddGroupNodeWithData(
          XMLCurrNode,'AllowanceTotalAmount',
          EInvoiceDocumentEncode.DecimalToText(TempEInvoiceExportHeader."Total Invoice Discount Amount"),
          BasicCompSpaceNameTxt,CBCTxt);
        AddAttribute(XMLCurrNode,'currencyID',TempEInvoiceExportHeader."Currency Code");
        XMLCurrNode := XMLCurrNode.ParentNode;
      END;

      AddGroupNodeWithData(
        XMLCurrNode,'PayableRoundingAmount',EInvoiceDocumentEncode.DecimalToText(TempEInvoiceExportHeader."Total Rounding Amount"),
        BasicCompSpaceNameTxt,CBCTxt);
      AddAttribute(XMLCurrNode,'currencyID',TempEInvoiceExportHeader."Currency Code");
      XMLCurrNode := XMLCurrNode.ParentNode;

      AddGroupNodeWithData(XMLCurrNode,'PayableAmount',
        EInvoiceDocumentEncode.DecimalToText(
          TempEInvoiceExportHeader."Total Amount" + TempEInvoiceExportHeader."Total Rounding Amount"),
        BasicCompSpaceNameTxt,CBCTxt);
      AddAttribute(XMLCurrNode,'currencyID',TempEInvoiceExportHeader."Currency Code");
      XMLCurrNode := XMLCurrNode.ParentNode;

      XMLCurrNode := XMLCurrNode.ParentNode;
    END;

    PROCEDURE AddHeaderNote@1080003();
    BEGIN
      IF TempEInvoiceExportHeader.Note <> '' THEN
        AddNotEmptyNode(XMLCurrNode,'Note',TempEInvoiceExportHeader.Note,BasicCompSpaceNameTxt,CBCTxt);
    END;

    PROCEDURE AddHeaderOrderReference@1080030();
    BEGIN
      // Header->OrderReference
      IF TempEInvoiceExportHeader."Document No." <> '' THEN BEGIN
        AddGroupNode(XMLCurrNode,'OrderReference',AggregateCompSpaceNameTxt,CACTxt);
        AddLastNode(XMLCurrNode,'ID',TempEInvoiceExportHeader."Document No.",BasicCompSpaceNameTxt,CBCTxt);
      END;
    END;

    PROCEDURE AddHeaderPaymentMeans@1080031();
    VAR
      CompanyInfo@1080009 : Record 79;
      PaymentTerms@1080008 : Record 3;
      CompanyAndCustomerInSameCountry@1080003 : Boolean;
      AtLeastOnePaymentMeansAdded@1080004 : Boolean;
    BEGIN
      CompanyInfo.GET;

      AtLeastOnePaymentMeansAdded := FALSE;
      CompanyAndCustomerInSameCountry := AreCustomerAndSupplierInSameCountry;

      IF (UBLVersionID = '2.1') AND (CompanyInfo."Bank Account No." <> '') AND CompanyAndCustomerInSameCountry THEN BEGIN
        AddPaymentMeans(EInvoiceDocumentEncode.GetBBANNo(CompanyInfo."Bank Account No."),'BBAN');
        AtLeastOnePaymentMeansAdded := TRUE;
      END;

      IF (UBLVersionID = '2.0') AND (CompanyInfo.IBAN = '') THEN BEGIN
        AddPaymentMeans(CompanyInfo."Bank Account No.",'BANK');
        AtLeastOnePaymentMeansAdded := TRUE;
      END;

      IF CompanyInfo.IBAN <> '' THEN
        AddPaymentMeans(CompanyInfo.IBAN,'IBAN')
      ELSE
        IF NOT AtLeastOnePaymentMeansAdded THEN
          ERROR(IbanEmptyAndNoOtherPaymentMeansErr);

      // Header->PaymentTerms
      IF PaymentTerms.GET(TempEInvoiceExportHeader."Payment Terms Code") THEN BEGIN
        AddGroupNode(XMLCurrNode,'PaymentTerms',AggregateCompSpaceNameTxt,CACTxt);
        AddLastNode(XMLCurrNode,'Note',PaymentTerms.Description,BasicCompSpaceNameTxt,CBCTxt);
      END;
    END;

    PROCEDURE AddHeaderTaxCurrencyCode@1080045();
    BEGIN
      IF DocumentHasForeignCurrency THEN BEGIN
        AddGroupNodeWithData(XMLCurrNode,'TaxCurrencyCode',TempEInvoiceExportHeader."Currency Code",BasicCompSpaceNameTxt,CBCTxt);
        AddAttribute(XMLCurrNode,'listID','ISO4217');
        XMLCurrNode := XMLCurrNode.ParentNode;
      END;
    END;

    PROCEDURE AddHeaderTaxExchangeRate@1080028();
    VAR
      GeneralLedgerSetup@1080001 : Record 98;
    BEGIN
      IF NOT DocumentHasForeignCurrency THEN
        EXIT;

      AddGroupNode(XMLCurrNode,'TaxExchangeRate',AggregateCompSpaceNameTxt,CACTxt);

      AddGroupNodeWithData(XMLCurrNode,'SourceCurrencyCode',TempEInvoiceExportHeader."Currency Code",BasicCompSpaceNameTxt,CBCTxt);
      AddAttribute(XMLCurrNode,'listID','ISO4217');
      XMLCurrNode := XMLCurrNode.ParentNode;

      GeneralLedgerSetup.GET;
      AddGroupNodeWithData(XMLCurrNode,'TargetCurrencyCode',GeneralLedgerSetup."LCY Code",BasicCompSpaceNameTxt,CBCTxt);
      AddAttribute(XMLCurrNode,'listID','ISO4217');
      XMLCurrNode := XMLCurrNode.ParentNode;

      AddNotEmptyNode(XMLCurrNode,'CalculationRate',FORMAT(GetCurrMultiplicationFactor,0,9),BasicCompSpaceNameTxt,CBCTxt);
      AddNotEmptyNode(XMLCurrNode,'MathematicOperatorCode','Multiply',BasicCompSpaceNameTxt,CBCTxt);
      AddNotEmptyNode(
        XMLCurrNode,'Date',FORMAT(TempEInvoiceExportHeader."Posting Date",0,'<Year4>-<Month,2>-<Day,2>'),BasicCompSpaceNameTxt,CBCTxt);

      XMLCurrNode := XMLCurrNode.ParentNode;
    END;

    PROCEDURE AddHeaderTaxTotal@1080013();
    BEGIN
      IF TempEInvoiceExportHeader."Sales Line Found" THEN BEGIN
        AddGroupNode(XMLCurrNode,'TaxTotal',AggregateCompSpaceNameTxt,CACTxt);
        AddGroupNodeWithData(XMLCurrNode,'TaxAmount',
          EInvoiceDocumentEncode.DecimalToText(TempEInvoiceExportHeader."Tax Amount"),BasicCompSpaceNameTxt,CBCTxt);
        AddAttribute(XMLCurrNode,'currencyID',TempEInvoiceExportHeader."Currency Code");
        XMLCurrNode := XMLCurrNode.ParentNode;
        AddTaxSubTotal;
        XMLCurrNode := XMLCurrNode.ParentNode;
      END;
    END;

    PROCEDURE AddLineAccountingCost@1080019();
    BEGIN
      AddNotEmptyNode(XMLCurrNode,'AccountingCost',TempEInvoiceExportLine."Account Code",BasicCompSpaceNameTxt,CBCTxt);
    END;

    PROCEDURE AddLineAllowanceCharge@1080024();
    BEGIN
      // Header->Line->AllowanceCharge
      IF TempEInvoiceExportLine.Type = TempEInvoiceExportLine.Type::"Charge (Item)" THEN BEGIN
        AddGroupNode(XMLCurrNode,'AllowanceCharge',AggregateCompSpaceNameTxt,CACTxt);

        IF TempEInvoiceExportLine."Amount Including VAT" < 0 THEN BEGIN
          AddNotEmptyNode(XMLCurrNode,'ChargeIndicator','false',BasicCompSpaceNameTxt,CBCTxt);
          AddNotEmptyNode(XMLCurrNode,'AllowanceChargeReason','Rabat',BasicCompSpaceNameTxt,CBCTxt);
        END ELSE BEGIN
          AddNotEmptyNode(XMLCurrNode,'ChargeIndicator','true',BasicCompSpaceNameTxt,CBCTxt);
          AddNotEmptyNode(XMLCurrNode,'AllowanceChargeReason','Gebyr',BasicCompSpaceNameTxt,CBCTxt);
        END;

        AddGroupNodeWithData(XMLCurrNode,'Amount',EInvoiceDocumentEncode.DecimalToText(TempEInvoiceExportLine."Amount Including VAT"),
          BasicCompSpaceNameTxt,CBCTxt);
        AddAttribute(XMLCurrNode,'currencyID',TempEInvoiceExportHeader."Currency Code");
        XMLCurrNode := XMLCurrNode.ParentNode;
        XMLCurrNode := XMLCurrNode.ParentNode;
      END;
    END;

    PROCEDURE AddLineInvCrMemoCommonContent@1080006();
    VAR
      UnitOfMeasure@1080000 : Record 204;
    BEGIN
      UnitOfMeasure.GET(TempEInvoiceExportLine."Unit of Measure Code");

      AddGroupNodeWithData(
        XMLCurrNode,TempEInvoiceExportHeader."Quantity Name",EInvoiceDocumentEncode.DecimalToText(TempEInvoiceExportLine.Quantity),
        BasicCompSpaceNameTxt,CBCTxt);
      IF UnitOfMeasure."International Standard Code" <> '' THEN BEGIN
        AddAttribute(XMLCurrNode,'unitCode',UnitOfMeasure."International Standard Code");
        AddAttribute(XMLCurrNode,'unitCodeListID','UNECERec20');
      END;
      XMLCurrNode := XMLCurrNode.ParentNode;

      AddGroupNodeWithData(XMLCurrNode,'LineExtensionAmount',
        EInvoiceDocumentEncode.DecimalToText(TempEInvoiceExportLine.Amount),BasicCompSpaceNameTxt,CBCTxt);
      AddAttribute(XMLCurrNode,'currencyID',TempEInvoiceExportHeader."Currency Code");
      XMLCurrNode := XMLCurrNode.ParentNode;
    END;

    PROCEDURE AddLineItem@1080017();
    BEGIN
      // Header->Line->Item
      AddGroupNode(XMLCurrNode,'Item',AggregateCompSpaceNameTxt,CACTxt);
      AddNotEmptyNode(XMLCurrNode,'Description',TempEInvoiceExportLine."Description 2",BasicCompSpaceNameTxt,CBCTxt);
      AddNotEmptyNode(XMLCurrNode,'Name',COPYSTR(TempEInvoiceExportLine.Description,1,15),BasicCompSpaceNameTxt,CBCTxt);

      // Header->Line->Item->SellersItemIdentification
      AddGroupNode(XMLCurrNode,'SellersItemIdentification',AggregateCompSpaceNameTxt,CACTxt);
      AddLastNode(XMLCurrNode,'ID',TempEInvoiceExportLine."No.",BasicCompSpaceNameTxt,CBCTxt);

      // Header->Line->Item->ClassifiedTaxCategory
      AddGroupNode(XMLCurrNode,'ClassifiedTaxCategory',AggregateCompSpaceNameTxt,CACTxt);

      AddGroupNodeWithData(
        XMLCurrNode,'ID',
        GetTaxCategoryID(
          TempEInvoiceExportLine."VAT %",TempEInvoiceExportLine."VAT Calculation Type",
          TempEInvoiceExportLine."VAT Prod. Posting Group",TRUE),
        BasicCompSpaceNameTxt,CBCTxt);
      AddAttribute(XMLCurrNode,'schemeID','UNCL5305');
      AddAttribute(XMLCurrNode,'schemeAgencyID','6');
      XMLCurrNode := XMLCurrNode.ParentNode;

      AddNotEmptyNode(
        XMLCurrNode,'Percent',EInvoiceDocumentEncode.DecimalToText(TempEInvoiceExportLine."VAT %"),BasicCompSpaceNameTxt,CBCTxt);

      AddGroupNode(XMLCurrNode,'TaxScheme',AggregateCompSpaceNameTxt,CACTxt);

      AddGroupNodeWithData(XMLCurrNode,'ID','VAT',BasicCompSpaceNameTxt,CBCTxt);
      AddAttribute(XMLCurrNode,'schemeID','UN/ECE 5153');
      AddAttribute(XMLCurrNode,'schemeAgencyID','6');
      XMLCurrNode := XMLCurrNode.ParentNode;

      XMLCurrNode := XMLCurrNode.ParentNode;
      XMLCurrNode := XMLCurrNode.ParentNode;
      XMLCurrNode := XMLCurrNode.ParentNode;
    END;

    PROCEDURE AddLineNote@1080046();
    BEGIN
      // Header->Line->Note
      IF TempEInvoiceExportLine.Comment <> '' THEN
        AddNotEmptyNode(XMLCurrNode,'Note',TempEInvoiceExportLine.Comment,BasicCompSpaceNameTxt,CBCTxt);
    END;

    PROCEDURE AddLineOrderLineReference@1080022();
    BEGIN
      AddGroupNode(XMLCurrNode,'OrderLineReference',AggregateCompSpaceNameTxt,CACTxt);
      AddLastNode(XMLCurrNode,'LineID',FORMAT(TempEInvoiceExportLine."Line No."),BasicCompSpaceNameTxt,CBCTxt);
    END;

    PROCEDURE AddLinePrice@1080025();
    VAR
      UnitOfMeasure@1080001 : Record 204;
    BEGIN
      UnitOfMeasure.GET(TempEInvoiceExportLine."Unit of Measure Code");

      // Header->Line->Price
      AddGroupNode(XMLCurrNode,'Price',AggregateCompSpaceNameTxt,CACTxt);

      AddGroupNodeWithData(XMLCurrNode,'PriceAmount',FORMAT(TempEInvoiceExportLine."Unit Price",0,9),BasicCompSpaceNameTxt,CBCTxt);
      AddAttribute(XMLCurrNode,'currencyID',TempEInvoiceExportHeader."Currency Code");
      XMLCurrNode := XMLCurrNode.ParentNode;

      IF UnitOfMeasure."International Standard Code" <> '' THEN BEGIN
        AddGroupNodeWithData(
          XMLCurrNode,'BaseQuantity',EInvoiceDocumentEncode.DecimalToText(1.0),BasicCompSpaceNameTxt,CBCTxt);
        AddAttribute(XMLCurrNode,'unitCode',UnitOfMeasure."International Standard Code");
        AddAttribute(XMLCurrNode,'unitCodeListID','UNECERec20');
        XMLCurrNode := XMLCurrNode.ParentNode;
      END;

      // Header->Line->Price->AllowanceCharge
      AddGroupNode(XMLCurrNode,'AllowanceCharge',AggregateCompSpaceNameTxt,CACTxt);

      AddNotEmptyNode(XMLCurrNode,'ChargeIndicator','false',BasicCompSpaceNameTxt,CBCTxt);
      AddNotEmptyNode(XMLCurrNode,'AllowanceChargeReason','Rabat',BasicCompSpaceNameTxt,CBCTxt);

      AddNotEmptyNode(
        XMLCurrNode,'MultiplierFactorNumeric',EInvoiceDocumentEncode.DecimalToText(TempEInvoiceExportLine."Line Discount %"),
        BasicCompSpaceNameTxt,CBCTxt);

      AddGroupNodeWithData(XMLCurrNode,'Amount',EInvoiceDocumentEncode.DecimalToText(TempEInvoiceExportLine."Line Discount Amount"),
        BasicCompSpaceNameTxt,CBCTxt);
      AddAttribute(XMLCurrNode,'currencyID',TempEInvoiceExportHeader."Currency Code");
      XMLCurrNode := XMLCurrNode.ParentNode;

      AddGroupNodeWithData(XMLCurrNode,'BaseAmount',EInvoiceDocumentEncode.DecimalToText(TempEInvoiceExportLine.Amount),
        BasicCompSpaceNameTxt,CBCTxt);
      AddAttribute(XMLCurrNode,'currencyID',TempEInvoiceExportHeader."Currency Code");
      XMLCurrNode := XMLCurrNode.ParentNode;

      XMLCurrNode := XMLCurrNode.ParentNode;
      XMLCurrNode := XMLCurrNode.ParentNode;
    END;

    PROCEDURE AddLineReminderContent@1080007();
    VAR
      ElementName@1080001 : Text[30];
    BEGIN
      AddNotEmptyNode(XMLCurrNode,'Note',TempEInvoiceExportLine.Description +
        EInvoiceDocumentEncode.DecimalToText(TempEInvoiceExportLine."Remaining Amount"),
        BasicCompSpaceNameTxt,CBCTxt);

      IF TempEInvoiceExportLine.Amount > 0 THEN
        AddGroupNodeWithData(XMLCurrNode,'DebitLineAmount',
          EInvoiceDocumentEncode.DecimalToText(TempEInvoiceExportLine.Amount),BasicCompSpaceNameTxt,CBCTxt)
      ELSE
        AddGroupNodeWithData(XMLCurrNode,'DebitLineAmount','0',BasicCompSpaceNameTxt,CBCTxt);

      AddAttribute(XMLCurrNode,'currencyID',TempEInvoiceExportHeader."Currency Code");
      XMLCurrNode := XMLCurrNode.ParentNode;

      IF TempEInvoiceExportLine.Amount < 0 THEN
        AddGroupNodeWithData(XMLCurrNode,'CreditLineAmount',
          EInvoiceDocumentEncode.DecimalToText(TempEInvoiceExportLine.Amount),BasicCompSpaceNameTxt,CBCTxt)
      ELSE
        AddGroupNodeWithData(XMLCurrNode,'CreditLineAmount','0',BasicCompSpaceNameTxt,CBCTxt);

      AddAttribute(XMLCurrNode,'currencyID',TempEInvoiceExportHeader."Currency Code");
      XMLCurrNode := XMLCurrNode.ParentNode;

      // Header->Line->BillingReference
      AddGroupNode(XMLCurrNode,'BillingReference',AggregateCompSpaceNameTxt,CACTxt);
      IF TempEInvoiceExportLine."Document No." <> '' THEN BEGIN
        CASE TempEInvoiceExportLine."Document Type" OF
          TempEInvoiceExportLine."Document Type"::Invoice,
          TempEInvoiceExportLine."Document Type"::Refund:
            ElementName := 'InvoiceDocumentReference';
          TempEInvoiceExportLine."Document Type"::"Credit Memo",
          TempEInvoiceExportLine."Document Type"::Payment:
            ElementName := 'CreditNoteDocumentReference';
          TempEInvoiceExportLine."Document Type"::Reminder,
          TempEInvoiceExportLine."Document Type"::"Finance Charge Memo":
            ElementName := 'ReminderDocumentReference';
        END;
        AddGroupNode(XMLCurrNode,ElementName,AggregateCompSpaceNameTxt,CACTxt);
        AddLastNode(XMLCurrNode,'ID',FORMAT(TempEInvoiceExportLine."Document No."),BasicCompSpaceNameTxt,CBCTxt);
      END;
      XMLCurrNode := XMLCurrNode.ParentNode;
    END;

    PROCEDURE AddLineTaxTotal@1080048();
    BEGIN
      // Header->Line->TaxTotal
      AddGroupNode(XMLCurrNode,'TaxTotal',AggregateCompSpaceNameTxt,CACTxt);

      AddGroupNodeWithData(XMLCurrNode,'TaxAmount',
        EInvoiceDocumentEncode.DecimalToText(TempEInvoiceExportLine."Amount Including VAT" - TempEInvoiceExportLine.Amount),
        BasicCompSpaceNameTxt,CBCTxt);
      AddAttribute(XMLCurrNode,'currencyID',TempEInvoiceExportHeader."Currency Code");
      XMLCurrNode := XMLCurrNode.ParentNode;
      XMLCurrNode := XMLCurrNode.ParentNode;
    END;

    LOCAL PROCEDURE AddCountry@1080008(IdentificationCode@1080000 : Code[10]);
    BEGIN
      AddGroupNode(XMLCurrNode,'Country',AggregateCompSpaceNameTxt,CACTxt);
      IF UBLVersionID = '2.1' THEN BEGIN
        AddGroupNodeWithData(XMLCurrNode,'IdentificationCode',IdentificationCode,BasicCompSpaceNameTxt,CBCTxt);
        AddAttribute(XMLCurrNode,'listID','ISO3166-1:Alpha2');
        XMLCurrNode := XMLCurrNode.ParentNode;
        XMLCurrNode := XMLCurrNode.ParentNode;
      END ELSE
        AddLastNode(XMLCurrNode,'IdentificationCode',IdentificationCode,BasicCompSpaceNameTxt,CBCTxt);
    END;

    PROCEDURE AddDelivery@1080023();
    BEGIN
      // Header->Delivery and
      // Header->Line->Delivery
      AddGroupNode(XMLCurrNode,'Delivery',AggregateCompSpaceNameTxt,CACTxt);

      AddNotEmptyNode(XMLCurrNode,'ActualDeliveryDate',
        EInvoiceDocumentEncode.DateToText(TempEInvoiceExportHeader."Shipment Date"),BasicCompSpaceNameTxt,CBCTxt);

      AddGroupNode(XMLCurrNode,'DeliveryLocation',AggregateCompSpaceNameTxt,CACTxt);

      // Delivery->DeliveryLocation->Address
      AddGroupNode(XMLCurrNode,'Address',AggregateCompSpaceNameTxt,CACTxt);

      AddNotEmptyNode(XMLCurrNode,'StreetName',TempEInvoiceExportHeader."Ship-to Address",BasicCompSpaceNameTxt,CBCTxt);
      AddNotEmptyNode(XMLCurrNode,'AdditionalStreetName',TempEInvoiceExportHeader."Ship-to Address 2",BasicCompSpaceNameTxt,CBCTxt);
      AddNotEmptyNode(XMLCurrNode,'CityName',TempEInvoiceExportHeader."Ship-to City",BasicCompSpaceNameTxt,CBCTxt);
      AddNotEmptyNode(XMLCurrNode,'PostalZone',TempEInvoiceExportHeader."Ship-to Post Code",BasicCompSpaceNameTxt,CBCTxt);

      // Delivery->DeliveryLocation->Address->Country
      AddCountry(TempEInvoiceExportHeader."Ship-to Country/Region Code");

      XMLCurrNode := XMLCurrNode.ParentNode;
      XMLCurrNode := XMLCurrNode.ParentNode;
      XMLCurrNode := XMLCurrNode.ParentNode;
    END;

    LOCAL PROCEDURE AddPartyLegalEntity@1080038();
    VAR
      CompanyInfo@1080001 : Record 79;
    BEGIN
      CompanyInfo.GET;

      AddGroupNode(XMLCurrNode,'PartyLegalEntity',AggregateCompSpaceNameTxt,CACTxt);

      AddNotEmptyNode(XMLCurrNode,'RegistrationName',CompanyInfo.Name,BasicCompSpaceNameTxt,CBCTxt);

      AddGroupNodeWithData(XMLCurrNode,'CompanyID',
        WriteCompanyID(CompanyInfo."VAT Registration No."),
        BasicCompSpaceNameTxt,CBCTxt);

      AddAttribute(XMLCurrNode,'schemeID','NO:ORGNR');
      IF CompanyInfo.Enterpriseregister THEN
        AddAttribute(XMLCurrNode,'schemeName','Foretaksregisteret');
      AddAttribute(XMLCurrNode,'schemeAgencyID','82');
      XMLCurrNode := XMLCurrNode.ParentNode;

      AddGroupNode(XMLCurrNode,'RegistrationAddress',AggregateCompSpaceNameTxt,CACTxt);
      AddNotEmptyNode(XMLCurrNode,'CityName',CompanyInfo.City,BasicCompSpaceNameTxt,CBCTxt);
      AddNotEmptyNode(XMLCurrNode,'CountrySubentity',CompanyInfo.County,BasicCompSpaceNameTxt,CBCTxt);

      IF CompanyInfo."Country/Region Code" <> '' THEN
        AddCountry(CompanyInfo."Country/Region Code");

      XMLCurrNode := XMLCurrNode.ParentNode;
      XMLCurrNode := XMLCurrNode.ParentNode;
    END;

    LOCAL PROCEDURE AddPaymentMeans@1080026(AccountId@1080001 : Code[50];AccountAttributeName@1080000 : Code[4]);
    VAR
      CompanyInfo@1080003 : Record 79;
    BEGIN
      CompanyInfo.GET;

      // Header->PaymentMeans
      AddGroupNode(XMLCurrNode,'PaymentMeans',AggregateCompSpaceNameTxt,CACTxt);

      AddGroupNodeWithData(XMLCurrNode,'PaymentMeansCode','31',BasicCompSpaceNameTxt,CBCTxt);
      AddAttribute(XMLCurrNode,'listID','UNCL4461');
      XMLCurrNode := XMLCurrNode.ParentNode;

      AddNotEmptyNode(XMLCurrNode,'PaymentDueDate',
        EInvoiceDocumentEncode.DateToText(TempEInvoiceExportHeader."Due Date"),BasicCompSpaceNameTxt,CBCTxt);
      AddNotEmptyNode(XMLCurrNode,'PaymentID',TempEInvoiceExportHeader."Payment ID",BasicCompSpaceNameTxt,CBCTxt);

      // Header->PaymentMeans->PayeeFinancialAccount
      AddGroupNode(XMLCurrNode,'PayeeFinancialAccount',AggregateCompSpaceNameTxt,CACTxt);

      SetSchemeID(AccountId,AccountAttributeName);

      // Header->PaymentMeans->PayeeFinancialAccount->FinancialInstitutionBranch
      AddGroupNode(XMLCurrNode,'FinancialInstitutionBranch',AggregateCompSpaceNameTxt,CACTxt);

      IF AccountId <> 'IBAN' THEN
        AddNotEmptyNode(XMLCurrNode,'ID',CompanyInfo."Bank Branch No.",BasicCompSpaceNameTxt,CBCTxt);

      // Header->PaymentMeans->PayeeFinancialAccount->FinancialInstitutionBranch->FinancialInstitution
      AddGroupNode(XMLCurrNode,'FinancialInstitution',AggregateCompSpaceNameTxt,CACTxt);

      SetSchemeID(CompanyInfo."SWIFT Code",'BIC');

      XMLCurrNode := XMLCurrNode.ParentNode;
      XMLCurrNode := XMLCurrNode.ParentNode;
      XMLCurrNode := XMLCurrNode.ParentNode;
      XMLCurrNode := XMLCurrNode.ParentNode;
    END;

    LOCAL PROCEDURE AddTaxSubTotal@1080010();
    VAR
      TempVATAmountLine@1080001 : TEMPORARY Record 290;
    BEGIN
      FillVATAmountLines(TempVATAmountLine);
      IF TempVATAmountLine.FINDSET THEN
        REPEAT
          WriteTaxSubTotal(TempVATAmountLine);
        UNTIL TempVATAmountLine.NEXT = 0;
      TempVATAmountLine.DELETEALL;
    END;

    LOCAL PROCEDURE DocumentHasForeignCurrency@1080047() : Boolean;
    VAR
      GeneralLedgerSetup@1080000 : Record 98;
    BEGIN
      IF TempEInvoiceExportHeader."Currency Code" = '' THEN
        EXIT(FALSE);

      GeneralLedgerSetup.GET;
      IF TempEInvoiceExportHeader."Currency Code" = GeneralLedgerSetup."LCY Code" THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE FillVATAmountLines@1080012(VAR TempVATAmountLine@1080000 : TEMPORARY Record 290);
    BEGIN
      WITH TempEInvoiceExportLine DO
        IF FINDSET THEN
          REPEAT
            IF NOT TempVATAmountLine.GET("VAT Identifier","VAT Calculation Type",'',FALSE,FALSE) THEN BEGIN
              TempVATAmountLine.INIT;
              TempVATAmountLine."VAT Identifier" := "VAT Identifier";
              TempVATAmountLine."VAT Calculation Type" := "VAT Calculation Type";
              TempVATAmountLine."VAT %" := "VAT %";
              TempVATAmountLine.INSERT;
            END;
            TempVATAmountLine."VAT Base" += Amount;
            TempVATAmountLine."VAT Amount" += "Amount Including VAT" - Amount;
            TempVATAmountLine.MODIFY;
          UNTIL NEXT = 0;
    END;

    LOCAL PROCEDURE AreCustomerAndSupplierInSameCountry@1080050() : Boolean;
    VAR
      ResponsibilityCenter@1080000 : Record 5714;
      Customer@1080001 : Record 18;
      CompanyInformation@1080003 : Record 79;
      CompanyCountryRegionCode@1080002 : Code[10];
    BEGIN
      CompanyInformation.GET;
      IF TempEInvoiceExportHeader."Responsibility Center" <> '' THEN BEGIN
        ResponsibilityCenter.GET(TempEInvoiceExportHeader."Responsibility Center");
        CompanyCountryRegionCode := ResponsibilityCenter."Country/Region Code";
      END ELSE
        CompanyCountryRegionCode := CompanyInformation."Country/Region Code";

      IF NOT Customer.GET(TempEInvoiceExportHeader."Bill-to Customer No.") THEN
        EXIT(FALSE);

      EXIT(Customer."Country/Region Code" = CompanyCountryRegionCode);
    END;

    LOCAL PROCEDURE GetCurrMultiplicationFactor@1080042() : Decimal;
    VAR
      CurrencyExchangeRate@1080001 : Record 330;
    BEGIN
      EXIT(1 / CurrencyExchangeRate.ExchangeRate(0,'',TempEInvoiceExportHeader."Posting Date",TempEInvoiceExportHeader."Currency Code",TRUE));
    END;

    LOCAL PROCEDURE GetTaxCategoryID@1080018(VATPercent@1080000 : Decimal;Type@1080001 : 'Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax';VATProdPostingGroup@1080003 : Code[20];ReverseChargeKAuthorized@1080004 : Boolean) : Text[2];
    VAR
      VATProductPostingGroup@1080002 : Record 324;
    BEGIN
      CASE VATPercent OF
        0:
          BEGIN
            IF Type = Type::"Reverse Charge VAT" THEN BEGIN
              IF AreCustomerAndSupplierInSameCountry OR ReverseChargeKAuthorized THEN
                EXIT('K'); // K: Emission allowances for private or public businesses - buyer calculates VAT
              ERROR(ReverseChargeNotAuthorizedErr);
            END;
            VATProductPostingGroup.SETRANGE(Code,VATProdPostingGroup);
            IF VATProductPostingGroup.FINDFIRST AND VATProductPostingGroup."Outside Tax Area" THEN
              EXIT('Z'); // Z: VAT exempt (Goods and services not included in the VAT regulations)
            EXIT('E'); // E: VAT exempt
          END;
        10:
          EXIT('AA'); // AA: Outgoing VAT, low rate
        11.11:
          EXIT('R'); // R: Outgoing VAT, reduced rate - raw fish
        15:
          EXIT('H'); // H: Outgoing VAT, reduced rate - food & beverage
        25:
          EXIT('S'); // S: Outgoing VAT, ordinary rate
        ELSE
          ERROR(NoCategoryMatchesVATPercentErr,FORMAT(VATPercent));
      END;
    END;

    LOCAL PROCEDURE GetUBLVersionID@1080049() : Code[3];
    BEGIN
      // based on the current UBL version per Doc. Type
      IF (TempEInvoiceExportHeader."Schema Name" = 'CreditNote') OR (TempEInvoiceExportHeader."Schema Name" = 'Invoice') THEN
        EXIT('2.1');
      EXIT('2.0');
    END;

    LOCAL PROCEDURE SetSchemeID@1080036(Id@1080000 : Code[50];AttributeName@1080001 : Code[4]);
    BEGIN
      AddGroupNodeWithData(XMLCurrNode,'ID',Id,BasicCompSpaceNameTxt,CBCTxt);
      AddAttribute(XMLCurrNode,'schemeID',AttributeName);
      XMLCurrNode := XMLCurrNode.ParentNode;
    END;

    PROCEDURE WriteCompanyID@1080039(VATRegistrationNo@1080000 : Code[20]) : Text[30];
    VAR
      EInvoiceDocumentEncode@1080002 : Codeunit 11128501;
    BEGIN
      EXIT(EInvoiceDocumentEncode.GetVATRegNo(VATRegistrationNo,FALSE));
    END;

    LOCAL PROCEDURE WriteTaxSubTotal@1080015(TempVATAmountLine@1080000 : TEMPORARY Record 290);
    VAR
      GeneralLedgerSetup@1080003 : Record 98;
      VATProductPostingGroup@1080005 : Record 324;
      TaxCategoryID@1080004 : Text[2];
      TransactionCurrTaxAmount@1080009 : Text[30];
    BEGIN
      TempEInvoiceExportLine.RESET;
      TempEInvoiceExportLine.SETRANGE("VAT Identifier",TempVATAmountLine."VAT Identifier");
      TempEInvoiceExportLine.SETRANGE("VAT Calculation Type",TempVATAmountLine."VAT Calculation Type");
      TempEInvoiceExportLine.FINDFIRST;

      // Header->TaxTotal->TaxSubtotal
      AddGroupNode(XMLCurrNode,'TaxSubtotal',AggregateCompSpaceNameTxt,CACTxt);
      AddGroupNodeWithData(XMLCurrNode,'TaxableAmount',
        EInvoiceDocumentEncode.DecimalToText(TempVATAmountLine."VAT Base"),BasicCompSpaceNameTxt,CBCTxt);
      AddAttribute(XMLCurrNode,'currencyID',TempEInvoiceExportHeader."Currency Code");
      XMLCurrNode := XMLCurrNode.ParentNode;

      // Header->TaxTotal->TaxSubTotal->TaxAmount
      AddGroupNodeWithData(XMLCurrNode,'TaxAmount',
        EInvoiceDocumentEncode.DecimalToText(TempVATAmountLine."VAT Amount"),BasicCompSpaceNameTxt,CBCTxt);
      AddAttribute(XMLCurrNode,'currencyID',TempEInvoiceExportHeader."Currency Code");
      XMLCurrNode := XMLCurrNode.ParentNode;

      // Header->TaxTotal->TaxSubTotal->TransactionCurrencyTaxAmount
      IF DocumentHasForeignCurrency THEN BEGIN
        GeneralLedgerSetup.GET;
        TransactionCurrTaxAmount :=
          EInvoiceDocumentEncode.DecimalToText(TempVATAmountLine."VAT Amount" * GetCurrMultiplicationFactor);
        AddGroupNodeWithData(
          XMLCurrNode,'TransactionCurrencyTaxAmount',TransactionCurrTaxAmount,BasicCompSpaceNameTxt,CBCTxt);
        AddAttribute(XMLCurrNode,'currencyID',GeneralLedgerSetup."LCY Code");
        XMLCurrNode := XMLCurrNode.ParentNode;
      END;

      // Header->TaxTotal->TaxSubtotal->TaxCategory
      AddGroupNode(XMLCurrNode,'TaxCategory',AggregateCompSpaceNameTxt,CACTxt);

      TaxCategoryID :=
        GetTaxCategoryID(
          TempVATAmountLine."VAT %",TempVATAmountLine."VAT Calculation Type",TempEInvoiceExportLine."VAT Prod. Posting Group",FALSE);
      AddGroupNodeWithData(XMLCurrNode,'ID',TaxCategoryID,BasicCompSpaceNameTxt,CBCTxt);
      AddAttribute(XMLCurrNode,'schemeID','UNCL5305');
      XMLCurrNode := XMLCurrNode.ParentNode;

      AddNotEmptyNode(XMLCurrNode,'Percent',EInvoiceDocumentEncode.DecimalToText(TempVATAmountLine."VAT %"),
        BasicCompSpaceNameTxt,CBCTxt);

      // Header->TaxTotal->TaxSubtotal->TaxCategory->TaxExemptionReason
      IF TaxCategoryID IN ['K','Z','E'] THEN BEGIN
        VATProductPostingGroup.SETRANGE(Code,TempEInvoiceExportLine."VAT Prod. Posting Group");
        IF VATProductPostingGroup.FINDFIRST THEN
          AddNotEmptyNode(XMLCurrNode,'TaxExemptionReason',VATProductPostingGroup.Description,BasicCompSpaceNameTxt,CBCTxt);
      END;

      // Header->TaxTotal->TaxSubtotal->TaxCategory->TaxScheme
      AddGroupNode(XMLCurrNode,'TaxScheme',AggregateCompSpaceNameTxt,CACTxt);
      AddLastNode(XMLCurrNode,'ID','VAT',BasicCompSpaceNameTxt,CBCTxt);
      XMLCurrNode := XMLCurrNode.ParentNode;
      XMLCurrNode := XMLCurrNode.ParentNode;
    END;

    LOCAL PROCEDURE AddAttribute@1080021(VAR XMLNode@1080004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";Name@1080003 : Text[250];Value@1080002 : Text[250]);
    BEGIN
      XMLDOMMgt.AddAttribute(XMLNode,Name,Value);
    END;

    LOCAL PROCEDURE AddGroupNode@1080000(VAR XMLNode@1080005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";NodeName@1080004 : Text[250];NameSpace@1080002 : Text[250];Prefix@1080000 : Text[30]);
    VAR
      XMLNewChild@1080001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      XMLDOMMgt.AddElement(XMLNode,Prefix + ':' + NodeName,'',NameSpace,XMLNewChild);
      XMLNode := XMLNewChild;
    END;

    LOCAL PROCEDURE AddGroupNodeWithData@1080032(VAR XMLNode@1080005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";NodeName@1080004 : Text[250];NodeText@1080003 : Text[250];NameSpace@1080002 : Text[250];Prefix@1080000 : Text[30]);
    VAR
      XMLNewChild@1080001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      XMLDOMMgt.AddElement(XMLNode,Prefix + ':' + NodeName,FORMAT(NodeText,0,9),NameSpace,XMLNewChild);
      XMLNode := XMLNewChild;
    END;

    LOCAL PROCEDURE AddLastNode@1080014(VAR XMLNode@1080005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";NodeName@1080004 : Text[250];NodeText@1080003 : Text[250];NameSpace@1080002 : Text[250];Prefix@1080000 : Text[30]);
    BEGIN
      AddNotEmptyNode(XMLNode,NodeName,NodeText,NameSpace,Prefix);
      XMLNode := XMLNode.ParentNode;
    END;

    LOCAL PROCEDURE AddNotEmptyNode@1080009(VAR XMLNode@1080000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";NodeName@1080001 : Text[250];NodeText@1080002 : Text[250];NameSpace@1080003 : Text[250];Prefix@1080005 : Text[30]);
    BEGIN
      IF NodeText <> '' THEN
        AddNodeNA(XMLNode,NodeName,NodeText,NameSpace,Prefix);
    END;

    LOCAL PROCEDURE AddNodeNA@1080011(VAR XMLNode@1080005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";NodeName@1080004 : Text[250];NodeText@1080003 : Text[250];NameSpace@1080002 : Text[250];Prefix@1080000 : Text[30]);
    VAR
      CreatedXMLNode@1080001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      IF NodeText = '' THEN
        NodeText := 'NA';
      XMLDOMMgt.AddElement(XMLNode,Prefix + ':' + NodeName,FORMAT(NodeText,0,9),NameSpace,CreatedXMLNode);
    END;

    LOCAL PROCEDURE cod10629@1000000001();
    BEGIN
    END;

    PROCEDURE CheckCurrencyCode@1000000000(CurrencyCode@1080001 : Code[10];DocumentNumber@1080000 : Code[20];PostingDate@1080010 : Date);
    VAR
      CurrencyExchangeRate@1080011 : Record 330;
      Currency@1080003 : Record 4;
      GeneralLedgerSetup@1080002 : Record 98;
    BEGIN
      // CurrencyCode is empty - ok (we'll use LCY later in the exported E-Invoice)
      IF CurrencyCode = '' THEN
        EXIT;

      // CurrencyCode is equal to LCY - ok
      GeneralLedgerSetup.GET;
      IF CurrencyCode = GeneralLedgerSetup."LCY Code" THEN
        EXIT;

      // CurrencyCode <> LCY - found in Currencies - the ExchangeRate function below will ensure we do have an exchange rate
      // for this currency
      IF CurrencyExchangeRate.ExchangeRate(0,'',PostingDate,CurrencyCode,TRUE) = 0 THEN
        ERROR(InvalidCurrencyExchangeRateErr,Currency.FIELDCAPTION("Currency Factor"),
          Currency.TABLECAPTION,Currency."Currency Factor",DocumentNumber,PRODUCTNAME.FULL);
    END;

    BEGIN
    END.
  }
}

