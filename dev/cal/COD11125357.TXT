OBJECT Codeunit 11125357 Contact Statistics Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Customer@1100528414 : Record 18;
      MiniCustomerMgt@1100528413 : Codeunit 1302;
      CustomerAmountOnPostedInvoices@1100528412 : Decimal;
      CustomerAmountOnPostedCrMemos@1100528411 : Decimal;
      CustomerAmountOnOutstandingInvoices@1100528410 : Decimal;
      CustomerAmountOnOutstandingCrMemos@1100528409 : Decimal;
      CustomerTotals@1100528407 : Decimal;
      CustomerCreditLimitLCYExpendedPct@1100528415 : Decimal;
      CustomerDaysPastDueDate@1100528416 : Decimal;
      CustomerInvDiscAmountLCY@1100528408 : Decimal;
      OrderAmountTryouts@1100528454 : Decimal;
      OfferedAmountActiveQuotes@1100528456 : Decimal;
      OfferedAmountOrderedQuotesCurrentYear@1100528457 : Decimal;
      OfferedAmountOverdueQuotes@1100528458 : Decimal;
      ContractAmountOpenProjects@1100528418 : Decimal;
      ExtensionContractAmountOpenProjects@1100528419 : Decimal;
      ContractAmountInclExtensionOpenProjects@1100528420 : Decimal;
      BudgetAmountOpenProjects@1100528421 : Decimal;
      BudgetResultOpenProjects@1100528422 : Decimal;
      BudgetResultPercOpenProjects@1100528423 : Decimal;
      RevenuesOpenProjects@1100528425 : Decimal;
      AmountToInvoiceOpenProjects@1100528426 : Decimal;
      ActualCostsOpenProjects@1100528424 : Decimal;
      WIPPositionOpenProjects@1100528427 : Decimal;
      ContractAmountClosedProjectsCurrentYear@1100528435 : Decimal;
      ExtensionContractAmountClosedProjectsCurrentYear@1100528434 : Decimal;
      ContractAmountInclExtensionClosedProjectsCurrentYear@1100528433 : Decimal;
      BudgetAmountClosedProjectsCurrentYear@1100528432 : Decimal;
      BudgetResultClosedProjectsCurrentYear@1100528431 : Decimal;
      BudgetResultPercClosedProjectsCurrentYear@1100528430 : Decimal;
      RevenuesClosedProjectsCurrentYear@1100528429 : Decimal;
      ActualCostsClosedProjectsCurrentYear@1100528428 : Decimal;
      ResultClosedProjectsCurrentYear@1100528437 : Decimal;
      ResultPercClosedProjectsCurrentYear@1100528440 : Decimal;
      ResultPositiveClosedProjectsCurrentYear@1100528438 : Decimal;
      ResultNegativeClosedProjectsCurrentYear@1100528439 : Decimal;
      ContractAmountClosedProjectsPreviousYear@1100528453 : Decimal;
      ExtensionContractAmountClosedProjectsPreviousYear@1100528452 : Decimal;
      ContractAmountInclExtensionClosedProjectsPreviousYear@1100528451 : Decimal;
      BudgetAmountClosedProjectsPreviousYear@1100528450 : Decimal;
      BudgetResultClosedProjectsPreviousYear@1100528449 : Decimal;
      BudgetResultPercClosedProjectsPreviousYear@1100528448 : Decimal;
      RevenuesClosedProjectsPreviousYear@1100528447 : Decimal;
      ActualCostsClosedProjectsPreviousYear@1100528446 : Decimal;
      ResultClosedProjectsPreviousYear@1100528445 : Decimal;
      ResultPercClosedProjectsPreviousYear@1100528444 : Decimal;
      ResultPositiveClosedProjectsPreviousYear@1100528443 : Decimal;
      ResultNegativeClosedProjectsPreviousYear@1100528442 : Decimal;
      ContractAmountOpenServiceContracts@1100528461 : Decimal;
      RevenueNotClosedOpenServiceContracts@1100528464 : Decimal;
      ToBeInvoicedOpenServiceContracts@1100528466 : Decimal;
      CostNotClosedOpenServiceContracts@1100528463 : Decimal;
      WIPPositionOpenServiceContracts@1100528467 : Decimal;
      RevenueContractsCurrentYear@1100528469 : Decimal;
      RevenueCallsCurrentYear@1100528470 : Decimal;
      RevenueOtherCurrentYear@1100528471 : Decimal;
      TotalRevenueCurrentYear@1100528472 : Decimal;
      CostServiceContractsCurrentYear@1100528476 : Decimal;
      CostServiceCallsCurrentYear@1100528475 : Decimal;
      CostServiceOtherCurrentYear@1100528474 : Decimal;
      TotalCostServiceCurrentYear@1100528473 : Decimal;
      ResultServiceContractsCurrentYear@1100528480 : Decimal;
      ResultPercServiceContractsCurrentYear@1100528497 : Decimal;
      ResultServiceCallsCurrentYear@1100528479 : Decimal;
      ResultPercServiceCallsCurrentYear@1100528498 : Decimal;
      ResultServiceOtherCurrentYear@1100528478 : Decimal;
      ResultPercServiceOtherCurrentYear@1100528499 : Decimal;
      TotalResultServiceCurrentYear@1100528477 : Decimal;
      TotalResultPercServiceCurrentYear@1100528500 : Decimal;
      RevenueContractsPreviousYear@1100528492 : Decimal;
      RevenueCallsPreviousYear@1100528491 : Decimal;
      RevenueOtherPreviousYear@1100528490 : Decimal;
      TotalRevenuePreviousYear@1100528489 : Decimal;
      CostServiceContractsPreviousYear@1100528488 : Decimal;
      CostServiceCallsPreviousYear@1100528487 : Decimal;
      CostServiceOtherPreviousYear@1100528486 : Decimal;
      TotalCostServicePreviousYear@1100528485 : Decimal;
      ResultServiceContractsPreviousYear@1100528484 : Decimal;
      ResultPercServiceContractsPreviousYear@1100528493 : Decimal;
      ResultServiceCallsPreviousYear@1100528483 : Decimal;
      ResultPercServiceCallsPreviousYear@1100528494 : Decimal;
      ResultServiceOtherPreviousYear@1100528482 : Decimal;
      ResultPercServiceOtherPreviousYear@1100528495 : Decimal;
      TotalResultServicePreviousYear@1100528481 : Decimal;
      TotalResultPercServicePreviousYear@1100528496 : Decimal;
      CustomerNoPostedInvoices@1100528406 : Integer;
      CustomerNoPostedCrMemos@1100528405 : Integer;
      CustomerNoOutstandingInvoices@1100528404 : Integer;
      CustomerNoOutstandingCrMemos@1100528403 : Integer;
      NoTodosTryouts@1100528455 : Integer;
      NoTodosTryoutQuotes@1100528459 : Integer;
      NoOpenProjects@1100528417 : Integer;
      NoClosedProjectsCurrentYear@1100528436 : Integer;
      NoClosedProjectsPreviousYear@1100528441 : Integer;
      NoOpenServiceContracts@1100528460 : Integer;
      ContactIsCustomer@1100528400 : Boolean;
      CustomerBalanceExhausted@1100528402 : Boolean;
      AttentionToCustomerPaidDay@1100528401 : Boolean;

    PROCEDURE FillStatisticsData@1100528417(Contact@1100528400 : Record 5050);
    BEGIN
      FillCustomerStatisticsData(Contact);
      FillTryoutStatisticsData(Contact);
      FillProjectStatisticsData;
      FillServiceStatisticsData;
    END;

    LOCAL PROCEDURE FillCustomerStatisticsData@1100528403(Contact@1100528403 : Record 5050);
    VAR
      AgedAccReceivable@1100528407 : Codeunit 763;
      AdjmtCostLCY@1100528400 : Decimal;
      AdjCustProfit@1100528401 : Decimal;
      AdjProfitPct@1100528402 : Decimal;
      CustPaymentsLCY@1100528404 : Decimal;
      CustSalesLCY@1100528405 : Decimal;
      CustProfit@1100528406 : Decimal;
    BEGIN
      ClearCustomerStatisticsData;
      Contact.GetCustomerByContact(Contact, Customer);
      IF Customer."No." = '' THEN
        EXIT;

      ContactIsCustomer := TRUE;

      CustomerAmountOnPostedInvoices := MiniCustomerMgt.CalcAmountsOnPostedInvoices(
        Customer."No.",CustomerNoPostedInvoices);
      CustomerAmountOnPostedCrMemos := MiniCustomerMgt.CalcAmountsOnPostedCrMemos(
        Customer."No.",CustomerNoPostedCrMemos);

      CustomerAmountOnOutstandingInvoices := MiniCustomerMgt.CalculateAmountsOnUnpostedInvoices(
        Customer."No.",CustomerNoOutstandingInvoices);
      CustomerAmountOnOutstandingCrMemos := MiniCustomerMgt.CalculateAmountsOnUnpostedCrMemos(
        Customer."No.",CustomerNoOutstandingCrMemos);

      CustomerTotals :=
        CustomerAmountOnPostedInvoices + CustomerAmountOnPostedCrMemos +
        CustomerAmountOnOutstandingInvoices + CustomerAmountOnOutstandingCrMemos;

      CustomerCreditLimitLCYExpendedPct := Customer.CalcCreditLimitLCYExpendedPct;
      CustomerBalanceExhausted := 10000 <= CustomerCreditLimitLCYExpendedPct;

      CustomerDaysPastDueDate := AgedAccReceivable.InvoicePaymentDaysAverage(Customer."No.");
      AttentionToCustomerPaidDay := CustomerDaysPastDueDate > 0;

      MiniCustomerMgt.CalculateStatistic(
        Customer,
        AdjmtCostLCY,AdjCustProfit,AdjProfitPct,
        CustomerInvDiscAmountLCY,CustPaymentsLCY,CustSalesLCY,
        CustProfit);
    END;

    LOCAL PROCEDURE ClearCustomerStatisticsData@1100528416();
    BEGIN
      Customer."No." := '';
      Customer.INIT;

      CustomerNoPostedInvoices := 0;
      CustomerNoPostedCrMemos := 0;
      CustomerNoOutstandingInvoices := 0;
      CustomerNoOutstandingCrMemos := 0;

      CustomerAmountOnPostedInvoices := 0;
      CustomerAmountOnPostedCrMemos := 0;
      CustomerAmountOnOutstandingInvoices := 0;
      CustomerAmountOnOutstandingCrMemos := 0;
      CustomerTotals := 0;
      CustomerCreditLimitLCYExpendedPct := 0;
      CustomerDaysPastDueDate := 0;
      CustomerInvDiscAmountLCY := 0;

      ContactIsCustomer := FALSE;
      CustomerBalanceExhausted := FALSE;
      AttentionToCustomerPaidDay := FALSE;
    END;

    PROCEDURE GetCustomerAmountOnPostedInvoices@1100528404() : Decimal;
    BEGIN
      EXIT(CustomerAmountOnPostedInvoices);
    END;

    PROCEDURE GetCustomerAmountOnCrMemos@1100528405() : Decimal;
    BEGIN
      EXIT(CustomerAmountOnPostedCrMemos);
    END;

    PROCEDURE GetCustomerAmountOnOutstandingInvoices@1100528406() : Decimal;
    BEGIN
      EXIT(CustomerAmountOnOutstandingInvoices);
    END;

    PROCEDURE GetCustomerAmountOnOutstandingCrMemos@1100528407() : Decimal;
    BEGIN
      EXIT(CustomerAmountOnOutstandingCrMemos);
    END;

    PROCEDURE GetCustomerTotals@1100528400() : Decimal;
    BEGIN
      EXIT(CustomerTotals);
    END;

    PROCEDURE GetCustomerCreditLimitLCYExpendedPct@1100528411() : Decimal;
    BEGIN
      EXIT(CustomerCreditLimitLCYExpendedPct);
    END;

    PROCEDURE GetCustomerDaysPastDueDate@1100528414() : Decimal;
    BEGIN
      EXIT(CustomerDaysPastDueDate);
    END;

    PROCEDURE GetCustomerInvDiscAmountLCY@1100528401() : Decimal;
    BEGIN
      EXIT(CustomerInvDiscAmountLCY);
    END;

    PROCEDURE GetCustomerNoPostedInvoices@1100528418() : Integer;
    BEGIN
      EXIT(CustomerNoPostedInvoices);
    END;

    PROCEDURE GetCustomerNoPostedCrMemos@1100528419() : Integer;
    BEGIN
      EXIT(CustomerNoPostedCrMemos);
    END;

    PROCEDURE GetCustomerNoOutstandingInvoices@1100528420() : Integer;
    BEGIN
      EXIT(CustomerNoOutstandingInvoices);
    END;

    PROCEDURE GetCustomerNoOutstandingCrMemos@1100528421() : Integer;
    BEGIN
      EXIT(CustomerNoOutstandingCrMemos);
    END;

    PROCEDURE GetCustomerMoneyOwedExpected@1100528408() : Decimal;
    BEGIN
      IF Customer."No." = '' THEN
        EXIT;

      EXIT(MiniCustomerMgt.CalculateAmountsWithVATOnUnpostedDocuments(Customer."No."))
    END;

    PROCEDURE GetCustomerBalanceLCY@1100528409() : Decimal;
    BEGIN
      IF Customer."No." = '' THEN
        EXIT;

      Customer.CALCFIELDS("Balance (LCY)");
      EXIT(Customer."Balance (LCY)");
    END;

    PROCEDURE GetCustomerCreditLimitLCY@1100528410() : Decimal;
    BEGIN
      IF Customer."No." = '' THEN
        EXIT;

      EXIT(Customer.GetActualCreditLimit(TODAY));
    END;

    PROCEDURE GetCustomerOverdueBalance@1100528412() : Decimal;
    BEGIN
      IF Customer."No." = '' THEN
        EXIT;

      EXIT(Customer.CalcOverdueBalance);
    END;

    PROCEDURE GetCustomerPaymentsLCY@1100528413() : Decimal;
    BEGIN
      IF Customer."No." = '' THEN
        EXIT;

      Customer.SETFILTER("Date Filter", MiniCustomerMgt.GetCurrentYearFilter);
      Customer.CALCFIELDS("Payments (LCY)");
      EXIT(Customer."Payments (LCY)");
    END;

    PROCEDURE GetCustomerAvgDaysToPay@1100528415() : Decimal;
    BEGIN
      IF Customer."No." = '' THEN
        EXIT;

      EXIT(MiniCustomerMgt.AvgDaysToPay(Customer."No."));
    END;

    PROCEDURE GetContactIsCustomer@1100528435() : Boolean;
    BEGIN
      EXIT(ContactIsCustomer);
    END;

    PROCEDURE GetCustomerBalanceExhausted@1100528402() : Boolean;
    BEGIN
      EXIT(CustomerBalanceExhausted);
    END;

    PROCEDURE GetAttentionToCustomerPaidDay@1100528425() : Boolean;
    BEGIN
      EXIT(AttentionToCustomerPaidDay);
    END;

    PROCEDURE DrillDownOnCustomerBalanceLCY@1100528422();
    VAR
      DetailedCustLedgEntry@1100528400 : Record 379;
    BEGIN
      IF Customer."No." <> '' THEN BEGIN
        DetailedCustLedgEntry.SETRANGE("Customer No.", Customer."No.");
        PAGE.RUN(PAGE::"Detailed Cust. Ledg. Entries", DetailedCustLedgEntry);
      END;
    END;

    PROCEDURE DrillDownOnCustomerMoneyOwedExpected@1100528423();
    BEGIN
      IF Customer."No." <> '' THEN
        MiniCustomerMgt.DrillDownMoneyOwedExpected(Customer."No.");
    END;

    PROCEDURE DrillDownOnCustomerOverdueBalance@1100528424();
    VAR
      DetailedCustLedgEntry@1100528401 : Record 379;
      CustLedgerEntry@1100528400 : Record 21;
    BEGIN
      IF Customer."No." <> '' THEN BEGIN
        DetailedCustLedgEntry.SETFILTER("Customer No.",Customer."No.");
        CustLedgerEntry.DrillDownOnOverdueEntries(DetailedCustLedgEntry);
      END;
    END;

    PROCEDURE DrillDownOnCustomerPaymentsLCY@1100528426();
    VAR
      DetailedCustLedgEntry@1100528400 : Record 379;
    BEGIN
      IF Customer."No." <> '' THEN BEGIN
        DetailedCustLedgEntry.SETRANGE("Initial Document Type", DetailedCustLedgEntry."Initial Document Type"::Payment);
        DetailedCustLedgEntry.SETRANGE("Entry Type", DetailedCustLedgEntry."Entry Type"::"Initial Entry");
        DetailedCustLedgEntry.SETRANGE("Customer No.", Customer."No.");
        DetailedCustLedgEntry.SETFILTER("Posting Date", MiniCustomerMgt.GetCurrentYearFilter);
        PAGE.RUN(PAGE::"Detailed Cust. Ledg. Entries", DetailedCustLedgEntry);
      END;
    END;

    PROCEDURE DrillDownOnCustomerAmountOnPostedInvoices@1100528427();
    BEGIN
      IF Customer."No." <> '' THEN
        MiniCustomerMgt.DrillDownOnPostedInvoices(Customer."No.");
    END;

    PROCEDURE DrillDownOnCustomerAmountOnCrMemos@1100528428();
    BEGIN
      IF Customer."No." <> '' THEN
        MiniCustomerMgt.DrillDownOnPostedCrMemo(Customer."No.");
    END;

    PROCEDURE DrillDownOnCustomerAmountOnOutstandingInvoices@1100528429();
    BEGIN
      IF Customer."No." <> '' THEN
        MiniCustomerMgt.DrillDownOnUnpostedInvoices(Customer."No.");
    END;

    PROCEDURE DrillDownOnCustomerAmountOnOutstandingCrMemos@1100528430();
    BEGIN
      IF Customer."No." <> '' THEN
        MiniCustomerMgt.DrillDownOnUnpostedCrMemos(Customer."No.");
    END;

    LOCAL PROCEDURE FillTryoutStatisticsData@1100528459(Contact@1100528403 : Record 5050);
    BEGIN
      ClearTryoutStatisticsData;
      FillTryoutData(Contact);
      FillTryoutStatisticsDataActiveQuotes(Contact);
      FillTryoutStatisticsDataOrderedQuotesCurrentYear(Contact);
      FillTryoutStatisticsDataOverdueQuotes(Contact);
    END;

    LOCAL PROCEDURE FillTryoutData@1100528472(Contact@1100528405 : Record 5050);
    VAR
      Tryout@1100528402 : Record 11012750;
      Todo@1100528406 : Record 5080;
    BEGIN
      MarkActiveTryoutsOfContact(Contact, Tryout);
      Tryout.MARKEDONLY(TRUE);
      IF Tryout.FINDSET THEN
        REPEAT
          OrderAmountTryouts := OrderAmountTryouts + Tryout."Order Amount (LCY)";
        UNTIL Tryout.NEXT = 0;

      FilterOpenTryoutTodosOfContact(Contact, Todo);
      NoTodosTryouts := Todo.COUNT;
    END;

    LOCAL PROCEDURE FillTryoutStatisticsDataActiveQuotes@1100528500(Contact@1100528403 : Record 5050);
    VAR
      Todo@1100528401 : Record 5080;
      MarkedTryoutQuote@1100528402 : Record 11012758;
    BEGIN
      GetActiveTryoutQuoteData(Contact, OfferedAmountActiveQuotes, MarkedTryoutQuote);

      FilterOpenTryoutQuoteTodosOfContact(Contact, Todo);
      NoTodosTryoutQuotes := Todo.COUNT;
    END;

    LOCAL PROCEDURE FillTryoutStatisticsDataOrderedQuotesCurrentYear@1100528509(Contact@1100528403 : Record 5050);
    VAR
      MarkedTryoutQuote@1100528401 : Record 11012758;
    BEGIN
      GetOrderedTryoutQuoteCurrentYearData(Contact, OfferedAmountOrderedQuotesCurrentYear, MarkedTryoutQuote);
    END;

    LOCAL PROCEDURE FillTryoutStatisticsDataOverdueQuotes@1100528510(Contact@1100528403 : Record 5050);
    VAR
      MarkedTryoutQuote@1100528401 : Record 11012758;
    BEGIN
      GetOverdueTryoutQuoteData(Contact, OfferedAmountOverdueQuotes, MarkedTryoutQuote);
    END;

    LOCAL PROCEDURE MarkActiveTryoutsOfContact@1100528515(VAR Contact@1100528400 : Record 5050;VAR Tryout@1100528401 : Record 11012750);
    VAR
      TryoutLine@1100528402 : Record 11012755;
      RecRef@1100528403 : RecordRef;
    BEGIN
      TryoutLine.SETCURRENTKEY("Contact No.");
      RecRef.GETTABLE(TryoutLine);
      Contact.SetContactFilterOn4PSTable(
        RecRef, TryoutLine.FIELDNAME("Contact No."), TryoutLine.FIELDNAME("Contact Person No."));
      TryoutLine.SETVIEW(RecRef.GETVIEW(FALSE));
      IF TryoutLine.FINDSET THEN
        REPEAT
          IF Tryout.GET(TryoutLine."Try-out No.") THEN BEGIN
            Tryout.CALCFIELDS("Try-Out Not Active");
            IF NOT Tryout."Try-Out Not Active" THEN
              Tryout.MARK(TRUE);
          END;
        UNTIL TryoutLine.NEXT = 0;
    END;

    LOCAL PROCEDURE FilterOpenTryoutTodosOfContact@1100528516(VAR Contact@1100528400 : Record 5050;VAR Todo@1100528401 : Record 5080);
    BEGIN
      SetContactFilterOnTodo(Contact, Todo);
      Todo.SETRANGE(Closed, FALSE);
      Todo.SETFILTER("Try-out No.", '<>%1', '');
      Todo.SETRANGE("Try-out Quote No.", '');
    END;

    LOCAL PROCEDURE FilterOpenTryoutQuoteTodosOfContact@1100528519(VAR Contact@1100528400 : Record 5050;VAR Todo@1100528401 : Record 5080);
    BEGIN
      SetContactFilterOnTodo(Contact, Todo);
      Todo.SETRANGE(Closed, FALSE);
      Todo.SETFILTER("Try-out Quote No.", '<>%1', '');
    END;

    LOCAL PROCEDURE SetContactFilterOnTodo@1100528501(Contact@1100528400 : Record 5050;VAR Todo@1100528401 : Record 5080);
    VAR
      RecRef@1100528402 : RecordRef;
    BEGIN
      Todo.SETCURRENTKEY("Contact No.");
      RecRef.GETTABLE(Todo);
      Contact.SetContactFilterOn4PSTable(
        RecRef, Todo.FIELDNAME("Contact No."), Todo.FIELDNAME("Contact Company No."));
      Todo.SETVIEW(RecRef.GETVIEW(FALSE));
    END;

    LOCAL PROCEDURE SetContactFilterOnTryoutQuote@1100528518(Contact@1100528400 : Record 5050;VAR TryoutQuote@1100528401 : Record 11012758);
    VAR
      RecRef@1100528402 : RecordRef;
    BEGIN
      TryoutQuote.SETCURRENTKEY("Contact No.");
      RecRef.GETTABLE(TryoutQuote);
      Contact.SetContactFilterOn4PSTable(
        RecRef, TryoutQuote.FIELDNAME("Contact No."), TryoutQuote.FIELDNAME("Contact Person No."));
      TryoutQuote.SETVIEW(RecRef.GETVIEW(FALSE));
    END;

    LOCAL PROCEDURE ClearTryoutStatisticsData@1100528460();
    BEGIN
      OrderAmountTryouts := 0;
      OfferedAmountActiveQuotes:= 0;
      OfferedAmountOrderedQuotesCurrentYear := 0;
      OfferedAmountOverdueQuotes := 0;

      NoTodosTryouts := 0;
      NoTodosTryoutQuotes := 0;
    END;

    LOCAL PROCEDURE GetActiveTryoutQuoteData@1100528517(Contact@1100528404 : Record 5050;VAR OfferedAmount@1100528400 : Decimal;VAR MarkedTryoutQuote@1100528403 : Record 11012758);
    VAR
      TryoutQuote@1100528405 : Record 11012758;
    BEGIN
      SetContactFilterOnTryoutQuote(Contact, TryoutQuote);
      GetTryoutQuoteData(TryoutQuote, TRUE, OfferedAmount, MarkedTryoutQuote);
    END;

    LOCAL PROCEDURE GetOrderedTryoutQuoteCurrentYearData@1100528564(Contact@1100528404 : Record 5050;VAR OfferedAmount@1100528400 : Decimal;VAR MarkedTryoutQuote@1100528403 : Record 11012758);
    VAR
      TryoutQuote@1100528405 : Record 11012758;
    BEGIN
      SetContactFilterOnTryoutQuote(Contact, TryoutQuote);
      TryoutQuote.SETFILTER("Order Date", MiniCustomerMgt.GetCurrentYearFilter);
      GetTryoutQuoteData(TryoutQuote, FALSE, OfferedAmount, MarkedTryoutQuote);
    END;

    LOCAL PROCEDURE GetOverdueTryoutQuoteData@1100528566(Contact@1100528404 : Record 5050;VAR OfferedAmount@1100528400 : Decimal;VAR MarkedTryoutQuote@1100528403 : Record 11012758);
    VAR
      TryoutQuote@1100528405 : Record 11012758;
    BEGIN
      SetContactFilterOnTryoutQuote(Contact, TryoutQuote);
      TryoutQuote.SETRANGE("Order Date", 0D);
      GetTryoutQuoteData(TryoutQuote, FALSE, OfferedAmount, MarkedTryoutQuote);
    END;

    LOCAL PROCEDURE GetTryoutQuoteData@1100528496(VAR TryoutQuote@1100528401 : Record 11012758;GetActiveQuotes@1100528402 : Boolean;VAR OfferedAmount@1100528400 : Decimal;VAR MarkedTryoutQuote@1100528403 : Record 11012758);
    BEGIN
      IF TryoutQuote.FINDSET THEN
        REPEAT
          TryoutQuote.CALCFIELDS("Try-Out Quote Not Active");
          IF (GetActiveQuotes AND NOT TryoutQuote."Try-Out Quote Not Active") OR
             (NOT GetActiveQuotes AND TryoutQuote."Try-Out Quote Not Active")
          THEN BEGIN
            OfferedAmount := OfferedAmount + TryoutQuote."Offered Amount (LCY)";
            MarkedTryoutQuote := TryoutQuote;
            MarkedTryoutQuote.MARK(TRUE);
          END;
        UNTIL TryoutQuote.NEXT = 0;
    END;

    PROCEDURE GetOrderAmountTryouts@1100528463() : Decimal;
    BEGIN
      EXIT(OrderAmountTryouts);
    END;

    PROCEDURE GetNoTodosTryouts@1100528475() : Integer;
    BEGIN
      EXIT(NoTodosTryouts);
    END;

    PROCEDURE GetOfferedAmountActiveQuotes@1100528527() : Decimal;
    BEGIN
      EXIT(OfferedAmountActiveQuotes);
    END;

    PROCEDURE GetNoTodosTryoutQuotes@1100528528() : Integer;
    BEGIN
      EXIT(NoTodosTryoutQuotes);
    END;

    PROCEDURE GetOfferedAmountOrderedQuotesCurrentYear@1100528529() : Decimal;
    BEGIN
      EXIT(OfferedAmountOrderedQuotesCurrentYear);
    END;

    PROCEDURE GetOfferedAmountOverdueQuotes@1100528530() : Decimal;
    BEGIN
      EXIT(OfferedAmountOverdueQuotes);
    END;

    PROCEDURE DrillDownOnOrderAmountTryouts@1100528490(Contact@1100528400 : Record 5050);
    VAR
      Tryout@1100528401 : Record 11012750;
    BEGIN
      MarkActiveTryoutsOfContact(Contact, Tryout);
      Tryout.MARKEDONLY(TRUE);
      PAGE.RUN(PAGE::"Try-out List", Tryout);
    END;

    PROCEDURE DrillDownOnNoTodosTryouts@1100528525(Contact@1100528400 : Record 5050);
    VAR
      Todo@1100528401 : Record 5080;
    BEGIN
      FilterOpenTryoutTodosOfContact(Contact, Todo);
      PAGE.RUN(PAGE::"Task List", Todo);
    END;

    PROCEDURE DrillDownOnOfferedAmountActiveQuotes@1100528522(Contact@1100528400 : Record 5050);
    VAR
      MarkedTryoutQuote@1100528402 : Record 11012758;
      OfferedAmount@1100528403 : Decimal;
    BEGIN
      GetActiveTryoutQuoteData(Contact, OfferedAmount, MarkedTryoutQuote);
      MarkedTryoutQuote.MARKEDONLY(TRUE);
      PAGE.RUN(PAGE::"Try-out Quote List", MarkedTryoutQuote);
    END;

    PROCEDURE DrillDownOnOfferedAmountOrderedQuotesCurrentYear@1100528523(Contact@1100528400 : Record 5050);
    VAR
      MarkedTryoutQuote@1100528402 : Record 11012758;
      OfferedAmount@1100528403 : Decimal;
    BEGIN
      GetOrderedTryoutQuoteCurrentYearData(Contact, OfferedAmount, MarkedTryoutQuote);
      MarkedTryoutQuote.MARKEDONLY(TRUE);
      PAGE.RUN(PAGE::"Try-out Quote List", MarkedTryoutQuote);
    END;

    PROCEDURE DrillDownOnOfferedAmountOverdueQuotes@1100528524(Contact@1100528400 : Record 5050);
    VAR
      MarkedTryoutQuote@1100528402 : Record 11012758;
      OfferedAmount@1100528403 : Decimal;
    BEGIN
      GetOverdueTryoutQuoteData(Contact, OfferedAmount, MarkedTryoutQuote);
      MarkedTryoutQuote.MARKEDONLY(TRUE);
      PAGE.RUN(PAGE::"Try-out Quote List", MarkedTryoutQuote);
    END;

    PROCEDURE DrillDownOnNoTodosTryoutQuotes@1100528545(Contact@1100528400 : Record 5050);
    VAR
      Todo@1100528401 : Record 5080;
    BEGIN
      FilterOpenTryoutQuoteTodosOfContact(Contact, Todo);
      PAGE.RUN(PAGE::"Task List", Todo);
    END;

    LOCAL PROCEDURE FillProjectStatisticsData@1100528434();
    BEGIN
      ClearProjectStatisticsData;
      IF Customer."No." = '' THEN
        EXIT;

      FillProjectStatisticsDataOpenProjects(Customer."No.");
      FillProjectStatisticsDataClosedProjectsCurrentYear(Customer."No.");
      FillProjectStatisticsDataClosedProjectsPreviousYear(Customer."No.");
    END;

    LOCAL PROCEDURE FillProjectStatisticsDataOpenProjects@1100528473(CustomerNo@1100528403 : Code[20]);
    VAR
      Job@1100528400 : Record 11072003;
      ResultPositive@1100528401 : Decimal;
      ResultNegative@1100528402 : Decimal;
    BEGIN
      FilterOpenProjectsOfCustomer(CustomerNo, Job);
      GetProjectData(
        Job, NoOpenProjects, ContractAmountOpenProjects, ExtensionContractAmountOpenProjects,
        BudgetAmountOpenProjects, RevenuesOpenProjects, ActualCostsOpenProjects, ResultPositive, ResultNegative);
      ContractAmountInclExtensionOpenProjects := ContractAmountOpenProjects + ExtensionContractAmountOpenProjects;
      BudgetResultOpenProjects := ContractAmountInclExtensionOpenProjects - BudgetAmountOpenProjects;
      IF ContractAmountInclExtensionOpenProjects <> 0 THEN
        BudgetResultPercOpenProjects := (BudgetResultOpenProjects / ContractAmountInclExtensionOpenProjects) * 100;
      AmountToInvoiceOpenProjects := ContractAmountInclExtensionOpenProjects - RevenuesOpenProjects;
      WIPPositionOpenProjects := ActualCostsOpenProjects - RevenuesOpenProjects;
    END;

    LOCAL PROCEDURE FillProjectStatisticsDataClosedProjectsCurrentYear@1100528436(CustomerNo@1100528400 : Code[20]);
    VAR
      Job@1100528401 : Record 11072003;
    BEGIN
      FilterClosedProjectsCurrentYearOfCustomer(CustomerNo, Job);
      GetProjectData(
        Job, NoClosedProjectsCurrentYear, ContractAmountClosedProjectsCurrentYear, ExtensionContractAmountClosedProjectsCurrentYear,
        BudgetAmountClosedProjectsCurrentYear, RevenuesClosedProjectsCurrentYear, ActualCostsClosedProjectsCurrentYear,
        ResultPositiveClosedProjectsCurrentYear, ResultNegativeClosedProjectsCurrentYear);
      ContractAmountInclExtensionClosedProjectsCurrentYear :=
        ContractAmountClosedProjectsCurrentYear + ExtensionContractAmountClosedProjectsCurrentYear;
      BudgetResultClosedProjectsCurrentYear := ContractAmountInclExtensionClosedProjectsCurrentYear - BudgetAmountClosedProjectsCurrentYear;
      IF ContractAmountInclExtensionClosedProjectsCurrentYear <> 0 THEN
        BudgetResultPercClosedProjectsCurrentYear :=
          (BudgetResultClosedProjectsCurrentYear / ContractAmountInclExtensionClosedProjectsCurrentYear) * 100;
      ResultClosedProjectsCurrentYear := RevenuesClosedProjectsCurrentYear - ActualCostsClosedProjectsCurrentYear;
      IF RevenuesClosedProjectsCurrentYear <> 0 THEN
        ResultPercClosedProjectsCurrentYear :=
          (ResultClosedProjectsCurrentYear / RevenuesClosedProjectsCurrentYear) * 100;
    END;

    LOCAL PROCEDURE FillProjectStatisticsDataClosedProjectsPreviousYear@1100528461(CustomerNo@1100528400 : Code[20]);
    VAR
      Job@1100528401 : Record 11072003;
    BEGIN
      FilterClosedProjectsPreviousYearOfCustomer(CustomerNo, Job);
      GetProjectData(
        Job, NoClosedProjectsPreviousYear, ContractAmountClosedProjectsPreviousYear, ExtensionContractAmountClosedProjectsPreviousYear,
        BudgetAmountClosedProjectsPreviousYear, RevenuesClosedProjectsPreviousYear, ActualCostsClosedProjectsPreviousYear,
        ResultPositiveClosedProjectsPreviousYear, ResultNegativeClosedProjectsPreviousYear);
      ContractAmountInclExtensionClosedProjectsPreviousYear :=
        ContractAmountClosedProjectsPreviousYear + ExtensionContractAmountClosedProjectsPreviousYear;
      BudgetResultClosedProjectsPreviousYear := ContractAmountInclExtensionClosedProjectsPreviousYear - BudgetAmountClosedProjectsPreviousYear;
      IF ContractAmountInclExtensionClosedProjectsPreviousYear <> 0 THEN
        BudgetResultPercClosedProjectsPreviousYear :=
          (BudgetResultClosedProjectsPreviousYear / ContractAmountInclExtensionClosedProjectsPreviousYear) * 100;
      ResultClosedProjectsPreviousYear := RevenuesClosedProjectsPreviousYear - ActualCostsClosedProjectsPreviousYear;
      IF RevenuesClosedProjectsPreviousYear <> 0 THEN
        ResultPercClosedProjectsPreviousYear :=
          (ResultClosedProjectsPreviousYear / RevenuesClosedProjectsPreviousYear) * 100;
    END;

    LOCAL PROCEDURE FilterOpenProjectsOfCustomer@1100528559(CustomerNo@1100528400 : Code[20];VAR Job@1100528401 : Record 11072003);
    BEGIN
      Job.SETRANGE("Bill-to Customer No.", CustomerNo);
      Job.SETFILTER("Project Status", '<%1', Job."Project Status"::"Administrative Finished");
    END;

    LOCAL PROCEDURE FilterClosedProjectsCurrentYearOfCustomer@1100528560(CustomerNo@1100528400 : Code[20];VAR Job@1100528401 : Record 11072003);
    BEGIN
      Job.SETRANGE("Bill-to Customer No.", CustomerNo);
      Job.SETRANGE("Project Status", Job."Project Status"::Finished);
      Job.SETFILTER("Posting Date Closing", MiniCustomerMgt.GetCurrentYearFilter);
    END;

    LOCAL PROCEDURE FilterClosedProjectsPreviousYearOfCustomer@1100528561(CustomerNo@1100528400 : Code[20];VAR Job@1100528401 : Record 11072003);
    BEGIN
      Job.SETRANGE("Bill-to Customer No.", CustomerNo);
      Job.SETRANGE("Project Status", Job."Project Status"::Finished);
      Job.SETFILTER("Posting Date Closing", GetPreviousYearFilter);
    END;

    LOCAL PROCEDURE ClearProjectStatisticsData@1100528433();
    BEGIN
      NoOpenProjects := 0;
      ContractAmountOpenProjects := 0;
      ExtensionContractAmountOpenProjects := 0;
      ContractAmountInclExtensionOpenProjects := 0;
      BudgetAmountOpenProjects := 0;
      BudgetResultOpenProjects := 0;
      BudgetResultPercOpenProjects := 0;
      RevenuesOpenProjects := 0;
      AmountToInvoiceOpenProjects := 0;
      ActualCostsOpenProjects := 0;
      WIPPositionOpenProjects := 0;

      NoClosedProjectsCurrentYear := 0;
      ContractAmountClosedProjectsCurrentYear := 0;
      ExtensionContractAmountClosedProjectsCurrentYear := 0;
      ContractAmountInclExtensionClosedProjectsCurrentYear := 0;
      BudgetAmountClosedProjectsCurrentYear := 0;
      BudgetResultClosedProjectsCurrentYear := 0;
      BudgetResultPercClosedProjectsCurrentYear := 0;
      RevenuesClosedProjectsCurrentYear := 0;
      ActualCostsClosedProjectsCurrentYear := 0;
      ResultClosedProjectsCurrentYear := 0;
      ResultPercClosedProjectsCurrentYear := 0;
      ResultPositiveClosedProjectsCurrentYear := 0;
      ResultNegativeClosedProjectsCurrentYear := 0;

      NoClosedProjectsPreviousYear := 0;
      ContractAmountClosedProjectsPreviousYear := 0;
      ExtensionContractAmountClosedProjectsPreviousYear := 0;
      ContractAmountInclExtensionClosedProjectsPreviousYear := 0;
      BudgetAmountClosedProjectsPreviousYear := 0;
      BudgetResultClosedProjectsPreviousYear := 0;
      BudgetResultPercClosedProjectsPreviousYear := 0;
      RevenuesClosedProjectsPreviousYear := 0;
      ActualCostsClosedProjectsPreviousYear := 0;
      ResultClosedProjectsPreviousYear := 0;
      ResultPercClosedProjectsPreviousYear := 0;
      ResultPositiveClosedProjectsPreviousYear := 0;
      ResultNegativeClosedProjectsPreviousYear := 0;
    END;

    LOCAL PROCEDURE GetProjectData@1100528431(VAR Job@1100528400 : Record 11072003;VAR NoOfProjects@1100528408 : Integer;VAR ContractAmount@1100528401 : Decimal;VAR ExtensionContractAmount@1100528402 : Decimal;VAR BudgetAmount@1100528403 : Decimal;VAR Revenues@1100528404 : Decimal;VAR ActualCosts@1100528405 : Decimal;VAR ResultPositive@1100528406 : Decimal;VAR ResultNegative@1100528407 : Decimal);
    BEGIN
      IF Job.FINDSET THEN
        REPEAT
          NoOfProjects := NoOfProjects + 1;
          GetProjectPrincipalData(Job, ContractAmount);
          GetExtensionContractData(Job, ExtensionContractAmount);
          GetBudgetData(Job, BudgetAmount);
          Job.SETFILTER("Project Filter", Job."No.");
          Job.CALCFIELDS(Revenues, "Actual Costs");
          Revenues := Revenues + Job.Revenues;
          ActualCosts := ActualCosts + Job."Actual Costs";
          IF Job.Revenues > Job."Actual Costs" THEN
            ResultPositive := ResultPositive + Job.Revenues - Job."Actual Costs"
          ELSE
            ResultNegative := ResultNegative + Job.Revenues - Job."Actual Costs";
        UNTIL Job.NEXT = 0;
    END;

    LOCAL PROCEDURE GetProjectPrincipalData@1100528432(Job@1100528400 : Record 11072003;VAR ContractAmount@1100528401 : Decimal);
    VAR
      ProjectPrincipal@1100528402 : Record 11012005;
    BEGIN
      ProjectPrincipal.SETRANGE("Project No.", Job."No.");
      IF ProjectPrincipal.FINDSET THEN
        REPEAT
          ContractAmount := ContractAmount + ProjectPrincipal."Contract Amount (LCY)";
        UNTIL ProjectPrincipal.NEXT = 0;
    END;

    LOCAL PROCEDURE GetExtensionContractData@1100528441(Job@1100528400 : Record 11072003;VAR ExtensionContractAmount@1100528401 : Decimal);
    VAR
      ExtensionContract@1100528402 : Record 11012004;
    BEGIN
      ExtensionContract.SETRANGE("Project No.", Job."No.");
      ExtensionContract.SETFILTER(
        Status, '%1|%2', ExtensionContract.Status::Order, ExtensionContract.Status::"Invoicing Allowed");
      IF ExtensionContract.FINDSET THEN
        REPEAT
          ExtensionContractAmount := ExtensionContractAmount + ExtensionContract."Contract Amount (LCY)";
        UNTIL ExtensionContract.NEXT = 0;
    END;

    LOCAL PROCEDURE GetBudgetData@1100528444(Job@1100528400 : Record 11072003;VAR BudgetAmount@1100528401 : Decimal);
    VAR
      BudgetLine@1100528402 : Record 11012001;
    BEGIN
      BudgetLine.SETRANGE("Project No.", Job."No.");
      IF BudgetLine.FINDSET THEN
        REPEAT
          BudgetAmount := BudgetAmount + BudgetLine."Amount (LCY)";
        UNTIL BudgetLine.NEXT = 0;
    END;

    PROCEDURE GetNoOpenProjects@1100528447() : Integer;
    BEGIN
      EXIT(NoOpenProjects);
    END;

    PROCEDURE GetContractAmountOpenProjects@1100528448() : Decimal;
    BEGIN
      EXIT(ContractAmountOpenProjects);
    END;

    PROCEDURE GetExtensionContractAmountOpenProjects@1100528449() : Decimal;
    BEGIN
      EXIT(ExtensionContractAmountOpenProjects);
    END;

    PROCEDURE GetContractAmountInclExtensionOpenProjects@1100528437() : Decimal;
    BEGIN
      EXIT(ContractAmountInclExtensionOpenProjects);
    END;

    PROCEDURE GetBudgetAmountOpenProjects@1100528440() : Decimal;
    BEGIN
      EXIT(BudgetAmountOpenProjects);
    END;

    PROCEDURE GetBudgetResultOpenProjects@1100528454() : Decimal;
    BEGIN
      EXIT(BudgetResultOpenProjects);
    END;

    PROCEDURE GetBudgetResultPercOpenProjects@1100528457() : Decimal;
    BEGIN
      EXIT(BudgetResultPercOpenProjects);
    END;

    PROCEDURE GetRevenuesOpenProjects@1100528465() : Decimal;
    BEGIN
      EXIT(RevenuesOpenProjects);
    END;

    PROCEDURE GetAmountToInvoiceOpenProjects@1100528468() : Decimal;
    BEGIN
      EXIT(AmountToInvoiceOpenProjects);
    END;

    PROCEDURE GetActualCostsOpenProjects@1100528464() : Decimal;
    BEGIN
      EXIT(ActualCostsOpenProjects);
    END;

    PROCEDURE GetWIPPositionOpenProjects@1100528469() : Decimal;
    BEGIN
      EXIT(WIPPositionOpenProjects);
    END;

    PROCEDURE GetNoClosedProjectsCurrentYear@1100528485() : Integer;
    BEGIN
      EXIT(NoClosedProjectsCurrentYear);
    END;

    PROCEDURE GetContractAmountClosedProjectsCurrentYear@1100528484() : Decimal;
    BEGIN
      EXIT(ContractAmountClosedProjectsCurrentYear);
    END;

    PROCEDURE GetExtensionContractAmountClosedProjectsCurrentYear@1100528483() : Decimal;
    BEGIN
      EXIT(ExtensionContractAmountClosedProjectsCurrentYear);
    END;

    PROCEDURE GetContractAmountInclExtensionClosedProjectsCurrentYear@1100528482() : Decimal;
    BEGIN
      EXIT(ContractAmountInclExtensionClosedProjectsCurrentYear);
    END;

    PROCEDURE GetBudgetAmountClosedProjectsCurrentYear@1100528481() : Decimal;
    BEGIN
      EXIT(BudgetAmountClosedProjectsCurrentYear);
    END;

    PROCEDURE GetBudgetResultClosedProjectsCurrentYear@1100528480() : Decimal;
    BEGIN
      EXIT(BudgetResultClosedProjectsCurrentYear);
    END;

    PROCEDURE GetBudgetResultPercClosedProjectsCurrentYear@1100528479() : Decimal;
    BEGIN
      EXIT(BudgetResultPercClosedProjectsCurrentYear);
    END;

    PROCEDURE GetRevenuesClosedProjectsCurrentYear@1100528478() : Decimal;
    BEGIN
      EXIT(RevenuesClosedProjectsCurrentYear);
    END;

    PROCEDURE GetActualCostsClosedProjectsCurrentYear@1100528477() : Decimal;
    BEGIN
      EXIT(ActualCostsClosedProjectsCurrentYear);
    END;

    PROCEDURE GetResultClosedProjectsCurrentYear@1100528492() : Decimal;
    BEGIN
      EXIT(ResultClosedProjectsCurrentYear);
    END;

    PROCEDURE GetResultPercClosedProjectsCurrentYear@1100528493() : Decimal;
    BEGIN
      EXIT(ResultPercClosedProjectsCurrentYear);
    END;

    PROCEDURE GetResultPositiveClosedProjectsCurrentYear@1100528494() : Decimal;
    BEGIN
      EXIT(ResultPositiveClosedProjectsCurrentYear);
    END;

    PROCEDURE GetResultNegativeClosedProjectsCurrentYear@1100528495() : Decimal;
    BEGIN
      EXIT(ResultNegativeClosedProjectsCurrentYear);
    END;

    PROCEDURE GetNoClosedProjectsPreviousYear@1100528458() : Integer;
    BEGIN
      EXIT(NoClosedProjectsPreviousYear);
    END;

    PROCEDURE GetContractAmountClosedProjectsPreviousYear@1100528456() : Decimal;
    BEGIN
      EXIT(ContractAmountClosedProjectsPreviousYear);
    END;

    PROCEDURE GetExtensionContractAmountClosedProjectsPreviousYear@1100528455() : Decimal;
    BEGIN
      EXIT(ExtensionContractAmountClosedProjectsPreviousYear);
    END;

    PROCEDURE GetContractAmountInclExtensionClosedProjectsPreviousYear@1100528453() : Decimal;
    BEGIN
      EXIT(ContractAmountInclExtensionClosedProjectsPreviousYear);
    END;

    PROCEDURE GetBudgetAmountClosedProjectsPreviousYear@1100528452() : Decimal;
    BEGIN
      EXIT(BudgetAmountClosedProjectsPreviousYear);
    END;

    PROCEDURE GetBudgetResultClosedProjectsPreviousYear@1100528451() : Decimal;
    BEGIN
      EXIT(BudgetResultClosedProjectsPreviousYear);
    END;

    PROCEDURE GetBudgetResultPercClosedProjectsPreviousYear@1100528450() : Decimal;
    BEGIN
      EXIT(BudgetResultPercClosedProjectsPreviousYear);
    END;

    PROCEDURE GetRevenuesClosedProjectsPreviousYear@1100528446() : Decimal;
    BEGIN
      EXIT(RevenuesClosedProjectsPreviousYear);
    END;

    PROCEDURE GetActualCostsClosedProjectsPreviousYear@1100528445() : Decimal;
    BEGIN
      EXIT(ActualCostsClosedProjectsPreviousYear);
    END;

    PROCEDURE GetResultClosedProjectsPreviousYear@1100528443() : Decimal;
    BEGIN
      EXIT(ResultClosedProjectsPreviousYear);
    END;

    PROCEDURE GetResultPercClosedProjectsPreviousYear@1100528442() : Decimal;
    BEGIN
      EXIT(ResultPercClosedProjectsPreviousYear);
    END;

    PROCEDURE GetResultPositiveClosedProjectsPreviousYear@1100528439() : Decimal;
    BEGIN
      EXIT(ResultPositiveClosedProjectsPreviousYear);
    END;

    PROCEDURE GetResultNegativeClosedProjectsPreviousYear@1100528438() : Decimal;
    BEGIN
      EXIT(ResultNegativeClosedProjectsPreviousYear);
    END;

    PROCEDURE DrillDownOnNoOpenProjects@1100528520(Contact@1100528400 : Record 5050);
    VAR
      Customer@1100528401 : Record 18;
      Job@1100528402 : Record 11072003;
    BEGIN
      Contact.GetCustomerByContact(Contact, Customer);
      FilterOpenProjectsOfCustomer(Customer."No.", Job);
      PAGE.RUN(PAGE::"Job List", Job);
    END;

    PROCEDURE DrillDownOnNoClosedProjectsCurrentYear@1100528521(Contact@1100528400 : Record 5050);
    VAR
      Customer@1100528401 : Record 18;
      Job@1100528402 : Record 11072003;
    BEGIN
      Contact.GetCustomerByContact(Contact, Customer);
      FilterClosedProjectsCurrentYearOfCustomer(Customer."No.", Job);
      PAGE.RUN(PAGE::"Job List", Job);
    END;

    PROCEDURE DrillDownOnNoClosedProjectsPreviousYear@1100528526(Contact@1100528400 : Record 5050);
    VAR
      Customer@1100528401 : Record 18;
      Job@1100528402 : Record 11072003;
    BEGIN
      Contact.GetCustomerByContact(Contact, Customer);
      FilterClosedProjectsPreviousYearOfCustomer(Customer."No.", Job);
      PAGE.RUN(PAGE::"Job List", Job);
    END;

    LOCAL PROCEDURE FillServiceStatisticsData@1100528462();
    BEGIN
      ClearServiceStatisticsData;
      IF Customer."No." = '' THEN
        EXIT;

      FillServiceStatisticsDataOpenContracts(Customer."No.");
      FillServiceStatisticsDataClosedServiceLedgerEntriesCurrentYear(Customer."No.");
      FillServiceStatisticsDataClosedServiceLedgerEntriesPreviousYear(Customer."No.");
    END;

    LOCAL PROCEDURE FillServiceStatisticsDataOpenContracts@1100528486(CustomerNo@1100528400 : Code[20]);
    VAR
      ServiceContract@1100528401 : Record 11012812;
      MaintenanceInvoiceMgt@1100528402 : Codeunit 11012828;
      Cost@1100528403 : Decimal;
      Revenue@1100528404 : Decimal;
    BEGIN
      FilterOpenServiceContractsOfCustomer(CustomerNo, ServiceContract);
      NoOpenServiceContracts := ServiceContract.COUNT;
      IF ServiceContract.FINDSET THEN
        REPEAT
          ContractAmountOpenServiceContracts :=
            ContractAmountOpenServiceContracts + MaintenanceInvoiceMgt.GetContractAmntLCYByDate(ServiceContract, TODAY);
          CalcServiceContractRevenueAndCostNotClosed(ServiceContract."No.", Revenue, Cost);
          RevenueNotClosedOpenServiceContracts := CostNotClosedOpenServiceContracts + Revenue;
          CostNotClosedOpenServiceContracts := CostNotClosedOpenServiceContracts + Cost;
        UNTIL ServiceContract.NEXT = 0;
      ToBeInvoicedOpenServiceContracts := ContractAmountOpenServiceContracts - RevenueNotClosedOpenServiceContracts;
      WIPPositionOpenServiceContracts := CostNotClosedOpenServiceContracts - RevenueNotClosedOpenServiceContracts;
    END;

    LOCAL PROCEDURE FillServiceStatisticsDataClosedServiceLedgerEntriesCurrentYear@1100528476(CustomerNo@1100528400 : Code[20]);
    BEGIN
      GetClosedServiceLedgerEntryData(
        CustomerNo, MiniCustomerMgt.GetCurrentYearFilter, RevenueContractsCurrentYear,
        RevenueCallsCurrentYear, RevenueOtherCurrentYear, TotalRevenueCurrentYear,
        CostServiceContractsCurrentYear, CostServiceCallsCurrentYear, CostServiceOtherCurrentYear,
        TotalCostServiceCurrentYear, ResultServiceContractsCurrentYear, ResultPercServiceContractsCurrentYear,
        ResultServiceCallsCurrentYear, ResultPercServiceCallsCurrentYear, ResultServiceOtherCurrentYear,
        ResultPercServiceOtherCurrentYear, TotalResultServiceCurrentYear, TotalResultPercServiceCurrentYear);
    END;

    LOCAL PROCEDURE FillServiceStatisticsDataClosedServiceLedgerEntriesPreviousYear@1100528488(CustomerNo@1100528400 : Code[20]);
    BEGIN
      GetClosedServiceLedgerEntryData(
        CustomerNo, GetPreviousYearFilter, RevenueContractsPreviousYear,
        RevenueCallsPreviousYear, RevenueOtherPreviousYear, TotalRevenuePreviousYear,
        CostServiceContractsPreviousYear, CostServiceCallsPreviousYear, CostServiceOtherPreviousYear,
        TotalCostServicePreviousYear, ResultServiceContractsPreviousYear, ResultPercServiceContractsPreviousYear,
        ResultServiceCallsPreviousYear, ResultPercServiceCallsPreviousYear, ResultServiceOtherPreviousYear,
        ResultPercServiceOtherPreviousYear, TotalResultServicePreviousYear, TotalResultPercServicePreviousYear);
    END;

    LOCAL PROCEDURE CalcServiceContractRevenueAndCostNotClosed@1100528471(ServiceContractNo@1100528400 : Code[20];VAR TotalRevenueNotClosed@1100528403 : Decimal;VAR TotalCostNotClosed@1100528404 : Decimal);
    VAR
      ServiceLedgerEntry@1100528401 : Record 11012819;
    BEGIN
      ServiceLedgerEntry.SETCURRENTKEY("Service Contract No.");
      ServiceLedgerEntry.SETRANGE(ServiceLedgerEntry."Service Contract No.", ServiceContractNo);
      IF ServiceLedgerEntry.FINDSET THEN
        REPEAT
          TotalRevenueNotClosed :=
            TotalRevenueNotClosed + ServiceLedgerEntry."Total Revenue (LCY)" - ServiceLedgerEntry."Closed Revenues";
          TotalCostNotClosed :=
            TotalCostNotClosed + ServiceLedgerEntry."Total Cost (LCY)" + ServiceLedgerEntry."Closed Costs";
        UNTIL ServiceLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE GetClosedServiceLedgerEntryData@1100528511(CustomerNo@1100528409 : Code[20];PostingDateFilter@1100528411 : Text;VAR RevenueContracts@1100528400 : Decimal;VAR RevenueCalls@1100528401 : Decimal;VAR RevenueOther@1100528402 : Decimal;VAR TotalRevenue@1100528413 : Decimal;VAR CostContracts@1100528405 : Decimal;VAR CostCalls@1100528404 : Decimal;VAR CostOther@1100528403 : Decimal;VAR TotalCost@1100528414 : Decimal;VAR ResultContracts@1100528408 : Decimal;VAR ResultPercContracts@1100528416 : Decimal;VAR ResultCalls@1100528407 : Decimal;VAR ResultPercCalls@1100528417 : Decimal;VAR ResultOther@1100528406 : Decimal;VAR ResultPercOther@1100528418 : Decimal;VAR TotalResult@1100528415 : Decimal;VAR TotalResultPerc@1100528419 : Decimal);
    VAR
      ServiceLedgerEntry@1100528412 : Record 11012819;
    BEGIN
      ServiceLedgerEntry.SETRANGE("Customer No.", CustomerNo);
      ServiceLedgerEntry.SETFILTER("Posting Date", PostingDateFilter);
      ServiceLedgerEntry.SETFILTER("Service Contract No.", '<>%1', '');

      ServiceLedgerEntry.SETRANGE("Source Type", ServiceLedgerEntry."Source Type"::Contract);
      ReadServiceLedgerEntryDataFromQuery(ServiceLedgerEntry, RevenueContracts, CostContracts);
      ServiceLedgerEntry.SETRANGE("Source Type", ServiceLedgerEntry."Source Type"::Call);
      ReadServiceLedgerEntryDataFromQuery(ServiceLedgerEntry, RevenueCalls, CostCalls);
      ServiceLedgerEntry.SETFILTER(
        "Source Type", '<>%1&<>%2', ServiceLedgerEntry."Source Type"::Contract, ServiceLedgerEntry."Source Type"::Call);
      ReadServiceLedgerEntryDataFromQuery(ServiceLedgerEntry, RevenueOther, CostOther);

      ResultContracts := RevenueContracts - CostContracts;
      ResultCalls := RevenueCalls - CostCalls;
      ResultOther := RevenueOther - CostOther;

      TotalRevenue := RevenueContracts + RevenueCalls + RevenueOther;
      TotalCost := CostContracts + CostCalls + CostOther;
      TotalResult := ResultContracts + ResultCalls + ResultOther;

      IF RevenueContracts <> 0 THEN
        ResultPercContracts := (ResultContracts / RevenueContracts) * 100;
      IF RevenueCalls <> 0 THEN
        ResultPercCalls := (ResultCalls / RevenueCalls) * 100;
      IF RevenueOther <> 0 THEN
        ResultPercOther := (ResultOther / RevenueOther) * 100;
      IF TotalRevenue <> 0 THEN
        TotalResultPerc := (TotalResult / TotalRevenue) * 100;
    END;

    LOCAL PROCEDURE ReadServiceLedgerEntryDataFromQuery@1100528531(VAR ServiceLedgerEntry@1100528400 : Record 11012819;VAR ClosedRevenue@1100528401 : Decimal;VAR ClosedCost@1100528402 : Decimal);
    VAR
      ServiceLedgerEntryAmounts@1100528403 : Query 11229322;
    BEGIN
      ServiceLedgerEntryAmounts.SETFILTER(Customer_No, ServiceLedgerEntry.GETFILTER("Customer No."));
      ServiceLedgerEntryAmounts.SETFILTER(Posting_Date, ServiceLedgerEntry.GETFILTER("Posting Date"));
      ServiceLedgerEntryAmounts.SETFILTER(Service_Contract_No, ServiceLedgerEntry.GETFILTER("Service Contract No."));
      ServiceLedgerEntryAmounts.SETFILTER(Source_Type, ServiceLedgerEntry.GETFILTER("Source Type"));
      ServiceLedgerEntryAmounts.OPEN;
      IF ServiceLedgerEntryAmounts.READ THEN BEGIN
        ClosedRevenue := ServiceLedgerEntryAmounts.Sum_Closed_Revenues;
        ClosedCost := -ServiceLedgerEntryAmounts.Sum_Closed_Costs;
      END;
      ServiceLedgerEntryAmounts.CLOSE;
    END;

    LOCAL PROCEDURE FilterOpenServiceContractsOfCustomer@1100528562(CustomerNo@1100528400 : Code[20];VAR ServiceContract@1100528401 : Record 11012812);
    BEGIN
      ServiceContract.SETRANGE("Customer No.", CustomerNo);
      ServiceContract.SETFILTER(Status, '%1|%2', ServiceContract.Status::Order, ServiceContract.Status::"Invoicing Allowed");
    END;

    LOCAL PROCEDURE ClearServiceStatisticsData@1100528466();
    BEGIN
      NoOpenServiceContracts := 0;
      ContractAmountOpenServiceContracts := 0;
      RevenueNotClosedOpenServiceContracts := 0;
      ToBeInvoicedOpenServiceContracts := 0;
      CostNotClosedOpenServiceContracts := 0;
      WIPPositionOpenServiceContracts := 0;

      RevenueContractsCurrentYear := 0;
      RevenueCallsCurrentYear := 0;
      RevenueOtherCurrentYear := 0;
      TotalRevenueCurrentYear := 0;

      CostServiceContractsCurrentYear := 0;
      CostServiceCallsCurrentYear := 0;
      CostServiceOtherCurrentYear := 0;
      TotalCostServiceCurrentYear := 0;

      ResultServiceContractsCurrentYear := 0;
      ResultPercServiceContractsCurrentYear := 0;
      ResultServiceCallsCurrentYear := 0;
      ResultPercServiceCallsCurrentYear := 0;
      ResultServiceOtherCurrentYear := 0;
      ResultPercServiceOtherCurrentYear := 0;
      TotalResultServiceCurrentYear := 0;
      TotalResultPercServiceCurrentYear := 0;

      RevenueContractsPreviousYear := 0;
      RevenueCallsPreviousYear := 0;
      RevenueOtherPreviousYear := 0;
      TotalRevenuePreviousYear := 0;

      CostServiceContractsPreviousYear := 0;
      CostServiceCallsPreviousYear := 0;
      CostServiceOtherPreviousYear := 0;
      TotalCostServicePreviousYear := 0;

      ResultServiceContractsPreviousYear := 0;
      ResultPercServiceContractsPreviousYear := 0;
      ResultServiceCallsPreviousYear := 0;
      ResultPercServiceCallsPreviousYear := 0;
      ResultServiceOtherPreviousYear := 0;
      ResultPercServiceOtherPreviousYear := 0;
      TotalResultServicePreviousYear := 0;
      TotalResultPercServicePreviousYear := 0;
    END;

    PROCEDURE GetNoOpenServiceContracts@1100528502() : Integer;
    BEGIN
      EXIT(NoOpenServiceContracts);
    END;

    PROCEDURE GetContractAmountOpenServiceContracts@1100528503() : Decimal;
    BEGIN
      EXIT(ContractAmountOpenServiceContracts);
    END;

    PROCEDURE GetRevenueNotClosedOpenServiceContracts@1100528497() : Decimal;
    BEGIN
      EXIT(RevenueNotClosedOpenServiceContracts);
    END;

    PROCEDURE GetToBeInvoicedOpenServiceContracts@1100528489() : Decimal;
    BEGIN
      EXIT(ToBeInvoicedOpenServiceContracts);
    END;

    PROCEDURE GetCostNotClosedOpenServiceContracts@1100528491() : Decimal;
    BEGIN
      EXIT(CostNotClosedOpenServiceContracts);
    END;

    PROCEDURE GetWIPPositionOpenServiceContracts@1100528505() : Decimal;
    BEGIN
      EXIT(WIPPositionOpenServiceContracts);
    END;

    PROCEDURE GetRevenueContractsCurrentYear@1100528532() : Decimal;
    BEGIN
      EXIT(RevenueContractsCurrentYear);
    END;

    PROCEDURE GetRevenueCallsCurrentYear@1100528533() : Decimal;
    BEGIN
      EXIT(RevenueCallsCurrentYear);
    END;

    PROCEDURE GetRevenueOtherCurrentYear@1100528534() : Decimal;
    BEGIN
      EXIT(RevenueOtherCurrentYear);
    END;

    PROCEDURE GetTotalRevenueCurrentYear@1100528535() : Decimal;
    BEGIN
      EXIT(TotalRevenueCurrentYear);
    END;

    PROCEDURE GetCostServiceContractsCurrentYear@1100528536() : Decimal;
    BEGIN
      EXIT(CostServiceContractsCurrentYear);
    END;

    PROCEDURE GetCostServiceCallsCurrentYear@1100528537() : Decimal;
    BEGIN
      EXIT(CostServiceCallsCurrentYear);
    END;

    PROCEDURE GetCostServiceOtherCurrentYear@1100528538() : Decimal;
    BEGIN
      EXIT(CostServiceOtherCurrentYear);
    END;

    PROCEDURE GetTotalCostServiceCurrentYear@1100528539() : Decimal;
    BEGIN
      EXIT(TotalCostServiceCurrentYear);
    END;

    PROCEDURE GetResultServiceContractsCurrentYear@1100528540() : Decimal;
    BEGIN
      EXIT(ResultServiceContractsCurrentYear);
    END;

    PROCEDURE GetResultPercServiceContractsCurrentYear@1100528498() : Decimal;
    BEGIN
      EXIT(ResultPercServiceContractsCurrentYear);
    END;

    PROCEDURE GetResultServiceCallsCurrentYear@1100528541() : Decimal;
    BEGIN
      EXIT(ResultServiceCallsCurrentYear);
    END;

    PROCEDURE GetResultPercServiceCallsCurrentYear@1100528499() : Decimal;
    BEGIN
      EXIT(ResultPercServiceCallsCurrentYear);
    END;

    PROCEDURE GetResultServiceOtherCurrentYear@1100528542() : Decimal;
    BEGIN
      EXIT(ResultServiceOtherCurrentYear);
    END;

    PROCEDURE GetResultPercServiceOtherCurrentYear@1100528504() : Decimal;
    BEGIN
      EXIT(ResultPercServiceOtherCurrentYear);
    END;

    PROCEDURE GetTotalResultServiceCurrentYear@1100528543() : Decimal;
    BEGIN
      EXIT(TotalResultServiceCurrentYear);
    END;

    PROCEDURE GetTotalResultPercServiceCurrentYear@1100528506() : Decimal;
    BEGIN
      EXIT(TotalResultPercServiceCurrentYear);
    END;

    PROCEDURE GetRevenueContractsPreviousYear@1100528557() : Decimal;
    BEGIN
      EXIT(RevenueContractsPreviousYear);
    END;

    PROCEDURE GetRevenueCallsPreviousYear@1100528556() : Decimal;
    BEGIN
      EXIT(RevenueCallsPreviousYear);
    END;

    PROCEDURE GetRevenueOtherPreviousYear@1100528555() : Decimal;
    BEGIN
      EXIT(RevenueOtherPreviousYear);
    END;

    PROCEDURE GetTotalRevenuePreviousYear@1100528554() : Decimal;
    BEGIN
      EXIT(TotalRevenuePreviousYear);
    END;

    PROCEDURE GetCostServiceContractsPreviousYear@1100528553() : Decimal;
    BEGIN
      EXIT(CostServiceContractsPreviousYear);
    END;

    PROCEDURE GetCostServiceCallsPreviousYear@1100528552() : Decimal;
    BEGIN
      EXIT(CostServiceCallsPreviousYear);
    END;

    PROCEDURE GetCostServiceOtherPreviousYear@1100528551() : Decimal;
    BEGIN
      EXIT(CostServiceOtherPreviousYear);
    END;

    PROCEDURE GetTotalCostServicePreviousYear@1100528550() : Decimal;
    BEGIN
      EXIT(TotalCostServicePreviousYear);
    END;

    PROCEDURE GetResultServiceContractsPreviousYear@1100528549() : Decimal;
    BEGIN
      EXIT(ResultServiceContractsPreviousYear);
    END;

    PROCEDURE GetResultPercServiceContractsPreviousYear@1100528507() : Decimal;
    BEGIN
      EXIT(ResultPercServiceContractsPreviousYear);
    END;

    PROCEDURE GetResultServiceCallsPreviousYear@1100528548() : Decimal;
    BEGIN
      EXIT(ResultServiceCallsPreviousYear);
    END;

    PROCEDURE GetResultPercServiceCallsPreviousYear@1100528512() : Decimal;
    BEGIN
      EXIT(ResultPercServiceCallsPreviousYear);
    END;

    PROCEDURE GetResultServiceOtherPreviousYear@1100528547() : Decimal;
    BEGIN
      EXIT(ResultServiceOtherPreviousYear);
    END;

    PROCEDURE GetResultPercServiceOtherPreviousYear@1100528513() : Decimal;
    BEGIN
      EXIT(ResultPercServiceOtherPreviousYear);
    END;

    PROCEDURE GetTotalResultServicePreviousYear@1100528546() : Decimal;
    BEGIN
      EXIT(TotalResultServicePreviousYear);
    END;

    PROCEDURE GetTotalResultPercServicePreviousYear@1100528514() : Decimal;
    BEGIN
      EXIT(TotalResultPercServicePreviousYear);
    END;

    PROCEDURE DrillDownOnNoOpenServiceContracts@1100528544(Contact@1100528400 : Record 5050);
    VAR
      Customer@1100528401 : Record 18;
      ServiceContract@1100528402 : Record 11012812;
    BEGIN
      Contact.GetCustomerByContact(Contact, Customer);
      FilterOpenServiceContractsOfCustomer(Customer."No.", ServiceContract);
      PAGE.RUN(PAGE::"Service Contracts List", ServiceContract);
    END;

    PROCEDURE GetPreviousYearFilter@1100528470() : Text[30];
    VAR
      DateFilterCalc@1002 : Codeunit 358;
      CustDateFilter@1001 : Text[30];
      CustDateName@1000 : Text[30];
    BEGIN
      DateFilterCalc.CreateFiscalYearFilter(CustDateFilter, CustDateName, WORKDATE, -1);

      EXIT(CustDateFilter);
    END;

    BEGIN
    END.
  }
}

