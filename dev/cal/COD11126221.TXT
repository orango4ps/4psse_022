OBJECT Codeunit 11126221 DSP Subscribers
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      DSPManagement@1100528300 : Codeunit 11126714;

    [EventSubscriber(Table,11020296,OnAfterInsertEvent,"",Skip)]
    LOCAL PROCEDURE OnAfterInsertDocumentReferencePoint@1100528306(VAR Rec@1100528300 : Record 11020296;RunTrigger@1100528301 : Boolean);
    BEGIN
      IF (Rec.ISTEMPORARY) OR (Rec.Type <> Rec.Type::ServObject) OR (NOT Rec.Actual) THEN EXIT;
      DocumentReferencePointProcess(Rec);
    END;

    [EventSubscriber(Table,11126752,OnAfterModifyEvent,"",Skip)]
    LOCAL PROCEDURE OnAfterModyfyDspPlanMessage@1100528311(VAR Rec@1100528300 : Record 11126752;VAR xRec@1100528301 : Record 11126752;RunTrigger@1100528302 : Boolean);
    BEGIN
      IF (Rec.ISTEMPORARY) OR (Rec.Type <> Rec.Type::Plan) OR (Rec."Processed By Dsp" = 0DT) THEN EXIT;
      DspPlanMessageProcess(Rec);
    END;

    [EventSubscriber(Table,11126763,OnAfterModifyEvent,"",Skip)]
    LOCAL PROCEDURE OnAfterModyfyDspStatusUpdate@1100528308(VAR Rec@1100528300 : Record 11126763;VAR xRec@1100528301 : Record 11126763;RunTrigger@1100528302 : Boolean);
    BEGIN
      IF (Rec.ISTEMPORARY) OR (Rec."Processed On" = 0DT) THEN EXIT;
      DspStatusUpdateProcess(Rec);
    END;

    [EventSubscriber(Table,11012812,OnAfterModifyEvent,"",Skip)]
    LOCAL PROCEDURE OnAfterModifyServiceContract@1100528321(VAR Rec@1100528300 : Record 11012812;VAR xRec@1100528301 : Record 11012812;RunTrigger@1100528302 : Boolean);
    BEGIN
      IF (Rec.ISTEMPORARY) THEN EXIT;
      ServiceContractUpdate(Rec);
    END;

    [EventSubscriber(Table,11071691,OnAfterModifyEvent,"",Skip)]
    LOCAL PROCEDURE OnAfterModifyServiceObject@1100528317(VAR Rec@1100528300 : Record 11071691;VAR xRec@1100528301 : Record 11071691;RunTrigger@1100528302 : Boolean);
    BEGIN
      IF (Rec.ISTEMPORARY) OR (Rec."Dsp Origin" = 0) THEN EXIT;
      ServiceObjectUpdate(Rec);
    END;

    [EventSubscriber(Table,11012823,OnAfterModifyEvent,"",Skip)]
    LOCAL PROCEDURE OnAfterModifyServiceOrder@1100528301(VAR Rec@1100528300 : Record 11012823;VAR xRec@1100528301 : Record 11012823;RunTrigger@1100528302 : Boolean);
    BEGIN
      IF (Rec.ISTEMPORARY) THEN EXIT;
      ServiceOrderUpdate(Rec, xRec);
    END;

    [EventSubscriber(Table,11071724,OnAfterDeleteEvent,"",Skip)]
    LOCAL PROCEDURE OnAfterDeleteServiceOrderObject@1100528312(VAR Rec@1100528300 : Record 11071724;RunTrigger@1100528301 : Boolean);
    BEGIN
      IF (Rec.ISTEMPORARY) THEN EXIT;
      ServiceOrderObjectDelete(Rec);
    END;

    [EventSubscriber(Table,11071724,OnAfterModifyEvent,"",Skip)]
    LOCAL PROCEDURE OnAfterModifyServiceOrderObject@1100528300(VAR Rec@1100528300 : Record 11071724;VAR xRec@1100528301 : Record 11071724;RunTrigger@1100528302 : Boolean);
    BEGIN
      IF (Rec.ISTEMPORARY) THEN EXIT;
      ServiceOrderObjectUpdate(Rec);
    END;

    [EventSubscriber(Table,11071782,OnAfterValidateEvent,"Old Value",Skip)]
    LOCAL PROCEDURE OnAfterValidateServiceOrderObjSpecLineOldValue@1100528323(VAR Rec@1100528300 : Record 11071782;VAR xRec@1100528301 : Record 11071782;CurrFieldNo@1100528302 : Integer);
    VAR
      DSPMonitor@1100528303 : Record 11126762;
    BEGIN
      IF (Rec.ISTEMPORARY) OR (Rec."Specification Group Code" <> DSPManagement.GetTcDsp) THEN EXIT;
      GetDspMonitor(Rec."Service Order No.", Rec."Service Object No.", DSPMonitor);
      UpdateDspMonitorScenarioValue(DSPMonitor, Rec."Specification Code", Rec."Old Value");
    END;

    [EventSubscriber(Table,11071782,OnAfterValidateEvent,"New Value",Skip)]
    LOCAL PROCEDURE OnAfterValidateServiceOrderObjSpecLineNewValue@1100528324(VAR Rec@1100528300 : Record 11071782;VAR xRec@1100528301 : Record 11071782;CurrFieldNo@1100528302 : Integer);
    VAR
      DSPMonitor@1100528303 : Record 11126762;
    BEGIN
      IF (Rec.ISTEMPORARY) OR (Rec."Specification Group Code" <> DSPManagement.GetTcDsp) THEN EXIT;
      GetDspMonitor(Rec."Service Order No.", Rec."Service Object No.", DSPMonitor);
      IF (Rec."New Value" <> '') THEN
        UpdateDspMonitorScenarioValue(DSPMonitor, Rec."Specification Code", Rec."New Value")
      ELSE
        UpdateDspMonitorScenarioValue(DSPMonitor, Rec."Specification Code", Rec."Old Value");
    END;

    LOCAL PROCEDURE "---Globals---"@1100528320();
    BEGIN
    END;

    PROCEDURE UpdateDspMonitorObject@1100528319(VAR DSPMonitor@1100528304 : Record 11126762;ServiceObject@1100528301 : Record 11071691;ServiceOrderObject@1100528300 : Record 11071724);
    BEGIN
      ServiceOrderObject.CALCFIELDS("Actual Reference Point");
      DSPMonitor."Actual Reference Point Object" := ServiceOrderObject."Actual Reference Point";
      DSPMonitor."Assignment Id" := ServiceObject."Dsp Assignment Id";
      DSPMonitor."Description Object" := ServiceObject.Description;
      DSPMonitor."Description 2 Object" := ServiceObject."Description 2";
      DSPMonitor."Connection Object Id" := ServiceObject."Dsp Connection Object Id";
      DSPMonitor."Cluster Id" := ServiceObject."Dsp Cluster Id";
      DSPMonitor.Discipline := ServiceObject."Dsp Discipline";
      DSPMonitor.Operator := ServiceObject."Dsp Operator";
      DSPMonitor.Origin := ServiceObject."Dsp Origin";
      DSPMonitor."Status Object" := ServiceObject.Status;
      DSPMonitor."Version No." := ServiceObject."Dsp Version No.";

      DSPMonitor.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE "---Locals---"@1100528302();
    BEGIN
    END;

    LOCAL PROCEDURE DocumentReferencePointProcess@1100528307(DocumentReferencePoint@1100528300 : Record 11020296);
    VAR
      DSPMonitor@1100528301 : Record 11126762;
      ServiceObject@1100528302 : Record 11071691;
      ServiceOrderObject@1100528303 : Record 11071724;
    BEGIN
      IF (NOT ServiceObject.GET(DocumentReferencePoint."Document No.")) THEN ServiceObject.INIT;
      IF (ServiceObject."Dsp Origin" = 0) THEN EXIT;
      ServiceOrderObject.SETRANGE("Object No.", ServiceObject."No.");
      IF (NOT ServiceOrderObject.FINDSET) THEN EXIT;

      ServiceObject.CALCFIELDS("Actual Reference Point");
      REPEAT
        IF (DSPMonitor.GET(ServiceOrderObject."Service Order No.", ServiceOrderObject."Object No.")) THEN BEGIN
          DSPMonitor."Actual Reference Point Object" := ServiceObject."Actual Reference Point";
          DSPMonitor.MODIFY(TRUE);
        END;
      UNTIL (ServiceOrderObject.NEXT = 0);
    END;

    LOCAL PROCEDURE DspPlanMessageProcess@1100528316(DSPPlanMessage@1100528301 : Record 11126752);
    VAR
      DSPMonitor@1100528300 : Record 11126762;
    BEGIN
      IF (NOT DSPMonitor.GET(DSPPlanMessage."Service Order No.", DSPPlanMessage."Object No.")) THEN EXIT;

      DSPMonitor."Starting Date Planning" := DT2DATE(DSPPlanMessage."Start Time");
      DSPMonitor.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE DspStatusUpdateProcess@1100528309(DSPStatusUpdate@1100528300 : Record 11126763);
    BEGIN
      CASE DSPStatusUpdate."Message Type" OF
        DSPStatusUpdate."Message Type"::AGA: DspStatusUpdateProcessAga(DSPStatusUpdate);
        DSPStatusUpdate."Message Type"::AGP: DspStatusUpdateProcessAgp(DSPStatusUpdate);
        DSPStatusUpdate."Message Type"::OG:DspStatusUpdateProcessOg(DSPStatusUpdate);
        DSPStatusUpdate."Message Type"::TG:DspStatusUpdateProcessTg(DSPStatusUpdate);
      END;
    END;

    LOCAL PROCEDURE DspStatusUpdateProcessAga@1100528315(DSPStatusUpdate@1100528300 : Record 11126763);
    VAR
      DSPMonitor@1100528301 : Record 11126762;
    BEGIN
      GetDspMonitor(DSPStatusUpdate."Service Order No.", DSPStatusUpdate."Object No.", DSPMonitor);
      CASE DSPStatusUpdate.Status OF
        DSPStatusUpdate.Status::Approved: DSPMonitor."Aga Approved" := DSPStatusUpdate."Status Changed On";
        DSPStatusUpdate.Status::Denied: DSPMonitor."Aga Denied" := DSPStatusUpdate."Status Changed On";
        DSPStatusUpdate.Status::Submitted: DSPMonitor."Aga Submitted" := DSPStatusUpdate."Status Changed On";
      END;
      DSPMonitor.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE DspStatusUpdateProcessAgp@1100528314(DSPStatusUpdate@1100528300 : Record 11126763);
    VAR
      DSPMonitor@1100528301 : Record 11126762;
    BEGIN
      GetDspMonitor(DSPStatusUpdate."Service Order No.", DSPStatusUpdate."Object No.", DSPMonitor);
      CASE DSPStatusUpdate.Status OF
        DSPStatusUpdate.Status::Approved: DSPMonitor."Agp Approved" := DSPStatusUpdate."Status Changed On";
        DSPStatusUpdate.Status::Denied: DSPMonitor."Agp Denied" := DSPStatusUpdate."Status Changed On";
        DSPStatusUpdate.Status::Submitted: DSPMonitor."Agp Submitted" := DSPStatusUpdate."Status Changed On";
      END;
      DSPMonitor.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE DspStatusUpdateProcessOg@1100528305(DSPStatusUpdate@1100528300 : Record 11126763);
    VAR
      DSPMonitor@1100528301 : Record 11126762;
    BEGIN
      GetDspMonitor(DSPStatusUpdate."Service Order No.", DSPStatusUpdate."Object No.", DSPMonitor);
      CASE DSPStatusUpdate.Status OF
        DSPStatusUpdate.Status::Received: DSPMonitor."Og Received" := DSPStatusUpdate."Status Changed On";
      END;
      DSPMonitor.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE DspStatusUpdateProcessTg@1100528310(DSPStatusUpdate@1100528300 : Record 11126763);
    VAR
      DSPMonitor@1100528301 : Record 11126762;
    BEGIN
      GetDspMonitor(DSPStatusUpdate."Service Order No.", DSPStatusUpdate."Object No.", DSPMonitor);
      CASE DSPStatusUpdate.Status OF
        DSPStatusUpdate.Status::Approved: DSPMonitor."Tg Approved" := DSPStatusUpdate."Status Changed On";
        DSPStatusUpdate.Status::Denied: DSPMonitor."Tg Denied" := DSPStatusUpdate."Status Changed On";
        DSPStatusUpdate.Status::Submitted: DSPMonitor."Tg Submitted" := DSPStatusUpdate."Status Changed On";
      END;
      DSPMonitor.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE GetDspMonitor@1100528326(ServiceOrderNo@1100528300 : Code[20];ObjectNo@1100528301 : Code[20];VAR DSPMonitor@1100528302 : Record 11126762);
    BEGIN
      IF (NOT DSPMonitor.GET(ServiceOrderNo, ObjectNo)) THEN BEGIN
        DSPMonitor.INIT;
        DSPMonitor."Service Order No." := ServiceOrderNo;
        DSPMonitor."Object No." := ObjectNo;
        DSPMonitor.INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE ServiceContractUpdate@1100528322(ServiceContract@1100528300 : Record 11012812);
    VAR
      ServiceOrder@1100528301 : Record 11012823;
    BEGIN
      ServiceOrder.SETRANGE(Origin, ServiceOrder.Origin::DSP);
      ServiceOrder.SETRANGE("Service Contract No.", ServiceContract."No.");
      IF (NOT ServiceOrder.FINDSET) THEN
        EXIT;

      REPEAT
        ServiceOrderUpdate(ServiceOrder, ServiceOrder);
      UNTIL (ServiceOrder.NEXT = 0);
    END;

    LOCAL PROCEDURE ServiceObjectUpdate@1100528318(ServiceObject@1100528300 : Record 11071691);
    VAR
      ServiceOrder@1100525000 : Record 11012823;
      ServiceOrderObject@1100528301 : Record 11071724;
      ServiceOrderNo@1100525001 : Code[20];
    BEGIN
      ServiceOrderObject.SETRANGE("Object No.", ServiceObject."No.");
      IF (NOT ServiceOrderObject.FINDSET) THEN
        EXIT;
      ServiceOrderNo := '';

      REPEAT
        ServiceOrderObjectUpdate(ServiceOrderObject);
      UNTIL (ServiceOrderObject.NEXT = 0);
    END;

    LOCAL PROCEDURE ServiceOrderUpdate@1100528303(ServiceOrder@1100528301 : Record 11012823;xServiceOrder@1100528302 : Record 11012823);
    VAR
      DSPMonitor@1100528300 : Record 11126762;
    BEGIN
      DSPMonitor.SETRANGE("Service Order No.", ServiceOrder."No.");
      IF (ServiceOrder.Origin <> ServiceOrder.Origin::DSP) THEN BEGIN
        DSPMonitor.DELETEALL(TRUE);
        EXIT;
      END;

      IF (NOT DSPMonitor.FINDSET(TRUE)) THEN
        EXIT;

      ServiceOrder.CALCFIELDS("Service Contract Description", "Actual Reference Point");
      REPEAT
        DSPMonitor."Actual Reference Point Order" := ServiceOrder."Actual Reference Point";
        DSPMonitor."Address Order" := ServiceOrder.Address;
        DSPMonitor."City Order" := ServiceOrder.City;
        DSPMonitor."Description 2 Order" := ServiceOrder."Description 2";
        DSPMonitor."Description Order" := ServiceOrder.Description;
        DSPMonitor."Production Cluster Id" := ServiceOrder."Dsp Production Cluster Id";
        DSPMonitor."Starting Date Order" := ServiceOrder."Starting Date";
        DSPMonitor."Status Order" :=  ServiceOrder.Status;
        DSPMonitor."Global Dimension 1 Code" := ServiceOrder."Global Dimension 1 Code";
        DSPMonitor."Service Contract No." := ServiceOrder."Service Contract No.";
        DSPMonitor."Service Contract Descr" := ServiceOrder."Service Contract Description";
        DSPMonitor."Employee No." := ServiceOrder."Employee No.";

        DSPMonitor.MODIFY(TRUE);
      UNTIL (DSPMonitor.NEXT = 0);
    END;

    LOCAL PROCEDURE ServiceOrderObjectDelete@1100528304(ServiceOrderObject@1100528301 : Record 11071724);
    VAR
      DSPMonitor@1100528300 : Record 11126762;
    BEGIN
      IF (DSPMonitor.GET(ServiceOrderObject."Service Order No.", ServiceOrderObject."Object No.")) THEN
        DSPMonitor.DELETE(TRUE);
    END;

    LOCAL PROCEDURE ServiceOrderObjectUpdate@1100528313(ServiceOrderObject@1100528301 : Record 11071724);
    VAR
      DSPMonitor@1100528300 : Record 11126762;
      ServiceOrder@1100528302 : Record 11012823;
      ServiceObject@1100528303 : Record 11071691;
    BEGIN
      ServiceOrder.GET(ServiceOrderObject."Service Order No.");
      IF (ServiceOrder.Origin <> ServiceOrder.Origin::DSP) THEN
        EXIT;

      GetDspMonitor(ServiceOrderObject."Service Order No.", ServiceOrderObject."Object No.", DSPMonitor);
      ServiceOrderUpdate(ServiceOrder, ServiceOrder);

      ServiceObject.GET(ServiceOrderObject."Object No.");

      GetDspMonitor(ServiceOrderObject."Service Order No.", ServiceOrderObject."Object No.", DSPMonitor);
      UpdateDspMonitorObject(DSPMonitor, ServiceObject, ServiceOrderObject);
    END;

    LOCAL PROCEDURE UpdateDspMonitorScenarioValue@1100528325(VAR DSPMonitor@1100528300 : Record 11126762;SpecLineCode@1100528303 : Code[10];NewValue@1100528302 : Text);
    BEGIN
      CASE SpecLineCode OF
        'DPROCES':
          DSPMonitor."DSP Process" := COPYSTR(NewValue, 1, MAXSTRLEN(DSPMonitor."DSP Process"));
        'SC-AANSL':
          DSPMonitor.Connection := COPYSTR(NewValue, 1, MAXSTRLEN(DSPMonitor.Connection));
        'SC-BINWRK':
          DSPMonitor."Inner Work" := COPYSTR(NewValue, 1, MAXSTRLEN(DSPMonitor."Inner Work"));
        'SC-METER':
          DSPMonitor.Meter := COPYSTR(NewValue, 1, MAXSTRLEN(DSPMonitor.Meter));
        'SC-TYPEAAN':
          DSPMonitor."Connection Type" := COPYSTR(NewValue, 1, MAXSTRLEN(DSPMonitor."Connection Type"));
        'SC-FYSTAT':
          DSPMonitor."Fysical State" := COPYSTR(NewValue, 1, MAXSTRLEN(DSPMonitor."Fysical State"));
        'SC-WIJZCAP':
          DSPMonitor."Capacity Change" := COPYSTR(NewValue, 1, MAXSTRLEN(DSPMonitor."Capacity Change"));
        'OBN':
          DSPMonitor."Participants mandatory" := COPYSTR(NewValue, 1, MAXSTRLEN(DSPMonitor."Participants mandatory"));
        'SRTWERK':
          DSPMonitor."Kind of Work" := COPYSTR(NewValue, 1, MAXSTRLEN(DSPMonitor."Kind of Work"));
      END;

      DSPMonitor.MODIFY(TRUE);
    END;

    BEGIN
    END.
  }
}

