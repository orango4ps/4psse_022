OBJECT Page 344 Navigate
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.04,4PS14.00,EXF,4PSSE;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Navigate;
               NOR=Naviger;
               SVE=Analysera];
    ApplicationArea=#Basic,#Suite,#FixedAssets,#Service,#CostAccounting;
    SaveValues=No;
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    SourceTable=Table265;
    DataCaptionExpr=GetCaptionText;
    PageType=Worksheet;
    UsageCategory=Tasks;
    AdditionalSearchTermsML=[ENU=find,search,analyze;
                             NOR=finn,s›k,analyser;
                             SVE=hitta,s”ka,analysera];
    SourceTableTemporary=Yes;
    PromotedActionCategoriesML=[ENU=New,Process,Report,Find By;
                                NOR=Ny,Prosess,Rapport,Finn etter;
                                SVE=Ny,Process,Rapport,S”k efter];
    OnInit=BEGIN
             SourceNameEnable := TRUE;
             SourceNoEnable := TRUE;
             SourceTypeEnable := TRUE;
             DocTypeEnable := TRUE;
             PrintEnable := TRUE;
             ShowEnable := TRUE;
             DocumentVisible := TRUE;
             FindBasedOn := FindBasedOn::Document;
           END;

    OnOpenPage=BEGIN
                 UpdateForm := TRUE;
                 FindRecordsOnOpen;
               END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 20      ;1   ;ActionGroup;
                      Name=Process;
                      CaptionML=[ENU=Process;
                                 NOR=Prosess;
                                 SVE=Process] }
      { 21      ;2   ;Action    ;
                      Name=Show;
                      CaptionML=[ENU=&Show Related Entries;
                                 NOR=&Vis relaterte poster;
                                 SVE=Vi&sa relaterade transaktioner];
                      ToolTipML=[ENU=View the related entries of the type that you have chosen.;
                                 NOR=Vis de relaterte postene for typen du har valgt.;
                                 SVE=Visa de relaterade posterna av den typ som du har valt.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Enabled=ShowEnable;
                      PromotedIsBig=Yes;
                      Image=ViewDocumentLine;
                      PromotedCategory=Process;
                      PromotedOnly=Yes;
                      OnAction=BEGIN
                                 ShowRecords;
                               END;
                                }
      { 29      ;2   ;Action    ;
                      Name=Find;
                      CaptionML=[ENU=Fi&nd;
                                 NOR=S›&k;
                                 SVE=S”&k];
                      ToolTipML=[ENU=Apply a filter to search on this page.;
                                 NOR=Bruk et filter til † s›ke p† denne siden.;
                                 SVE=Anv„nd ett filter f”r att s”ka p† den h„r sidan.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Find;
                      PromotedCategory=Process;
                      PromotedOnly=Yes;
                      OnAction=BEGIN
                                 FindPush;
                                 FilterSelectionChangedTxtVisible := FALSE;
                               END;
                                }
      { 34      ;2   ;Action    ;
                      Name=Print;
                      Ellipsis=Yes;
                      CaptionML=[ENU=&Print;
                                 NOR=&Skriv ut;
                                 SVE=Skriv &ut];
                      ToolTipML=[ENU=Prepare to print the document. A report request window for the document opens where you can specify what to include on the print-out.;
                                 NOR=Klargj›r for † skrive ut dokumentet. Det vises et rapportforesp›rselsvindu for dokumentet der du kan angi hva som skal inkluderes p† utskriften.;
                                 SVE=F”rbered utskrift av dokumentet. Ett rapportf”nster om dokumentet ”ppnas d„r det g†r att ange vad du vill inkludera p† utskriften.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Enabled=PrintEnable;
                      PromotedIsBig=Yes;
                      Image=Print;
                      PromotedCategory=Process;
                      PromotedOnly=Yes;
                      OnAction=VAR
                                 ItemTrackingNavigate@1002 : Report 6529;
                                 DocumentEntries@1001 : Report 35;
                               BEGIN
                                 IF ItemTrackingSearch THEN BEGIN
                                   CLEAR(ItemTrackingNavigate);
                                   ItemTrackingNavigate.TransferDocEntries(Rec);
                                   ItemTrackingNavigate.TransferRecordBuffer(TempRecordBuffer);
                                   ItemTrackingNavigate.TransferFilters(SerialNoFilter,LotNoFilter,'','');
                                   ItemTrackingNavigate.RUN;
                                 END ELSE BEGIN
                                   DocumentEntries.TransferDocEntries(Rec);
                                   DocumentEntries.TransferFilters(DocNoFilter,PostingDateFilter);
                                   DocumentEntries.RUN;
                                 END;
                               END;
                                }
      { 4       ;1   ;ActionGroup;
                      Name=FindGroup;
                      CaptionML=[ENU=Find by;
                                 NOR=Finn etter;
                                 SVE=S”k efter] }
      { 2       ;2   ;Action    ;
                      Name=FindByDocument;
                      CaptionML=[ENU=Find by Document;
                                 NOR=Finn etter dokument;
                                 SVE=S”k efter dokument];
                      ToolTipML=[ENU=View entries based on the specified document number.;
                                 NOR=Vis poster basert p† det angitte dokumentnummeret.;
                                 SVE=Visa poster enligt det anv„nda dokumentnumret.];
                      ApplicationArea=#Basic,#Suite;
                      Image=Documents;
                      OnAction=BEGIN
                                 FindBasedOn := FindBasedOn::Document;
                                 UpdateFindByGroupsVisibility;
                               END;
                                }
      { 27      ;2   ;Action    ;
                      Name=FindByBusinessContact;
                      CaptionML=[ENU=Find by Business Contact;
                                 NOR=Finn etter forretningskontakt;
                                 SVE=S”k efter f”retagskontakt];
                      ToolTipML=[ENU=Filter entries based on the specified contact or contact type.;
                                 NOR=Filtrer poster basert p† den angitte kontakten eller kontakttypen.;
                                 SVE=Filtrera poster enligt den angivna kontakten eller kontakttypen.];
                      ApplicationArea=#Basic,#Suite;
                      Image=ContactPerson;
                      OnAction=BEGIN
                                 FindBasedOn := FindBasedOn::"Business Contact";
                                 UpdateFindByGroupsVisibility;
                               END;
                                }
      { 28      ;2   ;Action    ;
                      Name=FindByItemReference;
                      CaptionML=[ENU=Find by Item Reference;
                                 NOR=Finn etter varereferanse;
                                 SVE=S”k efter artikelreferens];
                      ToolTipML=[ENU=Filter entries based on the specified serial number or lot number.;
                                 NOR=Filtrer poster basert p† det angitte serie- eller partinummeret.;
                                 SVE=Filtrera poster enligt det angivna serie- eller partinumret.];
                      ApplicationArea=#Basic,#Suite;
                      Image=ItemTracking;
                      OnAction=BEGIN
                                 FindBasedOn := FindBasedOn::"Item Reference";
                                 UpdateFindByGroupsVisibility;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 9   ;1   ;Group     ;
                Name=Document;
                CaptionML=[ENU=Document;
                           NOR=Dokument;
                           SVE=Dokument];
                Visible=DocumentVisible;
                GroupType=Group }

    { 3   ;2   ;Field     ;
                CaptionML=[ENU=Document No.;
                           NOR=Bilagsnr.;
                           SVE=Dokumentnr];
                ToolTipML=[ENU=Specifies the document number of an entry that is used to find all documents that have the same document number. You can enter a new document number in this field to search for another set of documents.;
                           NOR=Angir dokumentnummeret til en post som brukes til † finne alle dokumenter som har det samme dokumentnummeret. Du kan skrive inn et nytt dokumentnummer i dette feltet for † s›ke etter et annet sett med dokumenter.;
                           SVE=Anger transaktionens dokumentnummer som anv„nds f”r att s”ka efter alla dokument med samma dokumentnummer. Du kan skriva in ett nytt dokumentnummer i f„ltet f”r att s”ka efter en annan upps„ttning dokument.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=DocNoFilter;
                Importance=Promoted;
                OnValidate=BEGIN
                             SetDocNo(DocNoFilter);
                             ContactType := ContactType::" ";
                             ContactNo := '';
                             ExtDocNo := '';
                             ClearTrackingInfo;
                             DocNoFilterOnAfterValidate;
                             FilterSelectionChanged;
                           END;
                            }

    { 1   ;2   ;Field     ;
                CaptionML=[ENU=Posting Date;
                           NOR=Bokf›ringsdato;
                           SVE=Bokf”ringsdatum];
                ToolTipML=[ENU=Specifies the posting date for the document that you are searching for. You can insert a filter if you want to search for a certain interval of dates.;
                           NOR=Angir bokf›ringsdatoen for dokumentet du s›ker etter. Du kan sette inn et filter hvis du vil s›ke etter et bestemt datointervall.;
                           SVE=Anger bokf”ringsdatumet f”r det dokument som du s”ker efter. Du kan infoga ett filter om du vill s”ka efter ett visst datumintervall.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=PostingDateFilter;
                OnValidate=BEGIN
                             SetPostingDate(PostingDateFilter);
                             ContactType := ContactType::" ";
                             ContactNo := '';
                             ExtDocNo := '';
                             ClearTrackingInfo;
                             PostingDateFilterOnAfterValida;
                             FilterSelectionChanged;
                           END;
                            }

    { 15  ;1   ;Group     ;
                Name=Business Contact;
                CaptionML=[ENU=Business Contact;
                           NOR=Forretningskontakt;
                           SVE=F”retagskontakt];
                Visible=BusinessContactVisible;
                GroupType=Group }

    { 18  ;2   ;Field     ;
                CaptionML=[ENU=Business Contact Type;
                           NOR=Type;
                           SVE=F”retagskontakttyp];
                ToolTipML=[ENU=Specifies if you want to search for customers, vendors, or bank accounts. Your choice determines the list that you can access in the Business Contact No. field.;
                           NOR=Angir om du vil s›ke etter kunder, leverand›rer eller bankkonti. Valget definerer listen som du har tilgang til i feltet Nummer.;
                           SVE=Anger om du vill s”ka efter kunder, leverant”rer eller bankkonton. Valet avg”r vilken lista som visas i f„ltet F”retagskontaktnr.];
                OptionCaptionML=[ENU=" ,Vendor,Customer";
                                 NOR=" ,Leverand›r,Kunde";
                                 SVE=" ,Leverant”r,Kund"];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ContactType;
                Importance=Promoted;
                OnValidate=BEGIN
                             SetDocNo('');
                             SetPostingDate('');
                             ClearTrackingInfo;
                             ContactTypeOnAfterValidate;
                             FilterSelectionChanged;
                           END;
                            }

    { 11  ;2   ;Field     ;
                CaptionML=[ENU=Business Contact No.;
                           NOR=Nummer;
                           SVE=F”retagskontaktnr];
                ToolTipML=[ENU=Specifies the number of the customer, vendor, or bank account that you want to find entries for.;
                           NOR=Angir nummeret for kunden, leverand›ren eller bankkontoen du vil finne poster for.;
                           SVE=Anger numret f”r kunden, leverant”ren eller bankkontot som du vill hitta transaktioner f”r.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ContactNo;
                Importance=Promoted;
                OnValidate=BEGIN
                             SetDocNo('');
                             SetPostingDate('');
                             ClearTrackingInfo;
                             ContactNoOnAfterValidate;
                             FilterSelectionChanged;
                           END;

                OnLookup=VAR
                           Vend@1002 : Record 23;
                           Cust@1003 : Record 18;
                         BEGIN
                           CASE ContactType OF
                             ContactType::Vendor:
                               IF PAGE.RUNMODAL(0,Vend) = ACTION::LookupOK THEN BEGIN
                                 Text := Vend."No.";
                                 EXIT(TRUE);
                               END;
                             ContactType::Customer:
                               IF PAGE.RUNMODAL(0,Cust) = ACTION::LookupOK THEN BEGIN
                                 Text := Cust."No.";
                                 EXIT(TRUE);
                               END;
                           END;
                         END;
                          }

    { 13  ;2   ;Field     ;
                CaptionML=[ENU=External Document No.;
                           NOR=Eksterndokumentnr.;
                           SVE=Externt dokumentnr];
                ToolTipML=[ENU=Specifies the document number assigned by the vendor.;
                           NOR=Angir dokumentnummeret som er tilordnet av leverand›ren.;
                           SVE=Anger dokumentnumret som leverant”ren har anv„nt.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ExtDocNo;
                OnValidate=BEGIN
                             SetDocNo('');
                             SetPostingDate('');
                             ClearTrackingInfo;
                             ExtDocNoOnAfterValidate;
                             FilterSelectionChanged;
                           END;
                            }

    { 26  ;1   ;Group     ;
                Name=Item Reference;
                CaptionML=[ENU=Item Reference;
                           NOR=Varereferanse;
                           SVE=Artikelreferens];
                Visible=ItemReferenceVisible;
                GroupType=Group }

    { 5   ;2   ;Field     ;
                Name=SerialNoFilter;
                CaptionML=[ENU=Serial No.;
                           NOR=Serienr.;
                           SVE=Serienr];
                ToolTipML=[ENU=Specifies the posting date of the document when you have opened the Navigate window from the document. The entry's document number is shown in the Document No. field.;
                           NOR=Angir bokf›ringsdatoen for dokumentet n†r du har †pnet vinduet Naviger fra dokumentet. Postens dokumentnummer vises i feltet Dokumentnr.;
                           SVE=Anger bokf”ringsdatumet f”r dokumentet n„r du har ”ppnat f”nstret Navigera fr†n dokumentet. Transaktionens dokumentnummer visas i f„ltet Dokumentnr.];
                ApplicationArea=#ItemTracking;
                SourceExpr=SerialNoFilter;
                Importance=Promoted;
                OnValidate=BEGIN
                             ClearInfo;
                             SerialNoFilterOnAfterValidate;
                             FilterSelectionChanged;
                           END;

                OnLookup=VAR
                           SerialNoInformationList@1001 : Page 6509;
                         BEGIN
                           CLEAR(SerialNoInformationList);
                           IF SerialNoInformationList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                             Text := SerialNoInformationList.GetSelectionFilter;
                             EXIT(TRUE);
                           END;
                         END;
                          }

    { 6   ;2   ;Field     ;
                Name=LotNoFilter;
                CaptionML=[ENU=Lot No.;
                           NOR=Partinr.;
                           SVE=Partinr];
                ToolTipML=[ENU=Specifies the number that you want to find entries for.;
                           NOR=Angir nummeret du vil finne poster for.;
                           SVE=Anger numret som du vill hitta transaktioner f”r.];
                ApplicationArea=#ItemTracking;
                SourceExpr=LotNoFilter;
                Importance=Promoted;
                OnValidate=BEGIN
                             ClearInfo;
                             LotNoFilterOnAfterValidate;
                             FilterSelectionChanged;
                           END;

                OnLookup=VAR
                           LotNoInformationList@1002 : Page 6508;
                         BEGIN
                           CLEAR(LotNoInformationList);
                           IF LotNoInformationList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                             Text := LotNoInformationList.GetSelectionFilter;
                             EXIT(TRUE);
                           END;
                         END;
                          }

    { 25  ;1   ;Group     ;
                Name=Notification;
                CaptionML=[ENU=Notification;
                           NOR=Melding;
                           SVE=Meddelande];
                Visible=FilterSelectionChangedTxtVisible;
                GroupType=Group;
                InstructionalTextML=[ENU=The filter has been changed. Choose Find to update the list of related entries.;
                                     NOR=Filteret er endret. Velg S›k for † oppdatere listen over relaterte poster.;
                                     SVE=Filtret har „ndrats. V„lj S”k f”r att uppdatera listan med relaterade poster.] }

    { 16  ;1   ;Group     ;
                Editable=FALSE;
                GroupType=Repeater }

    { 24  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the entry, as assigned from the specified number series when the entry was created.;
                           NOR=Angir nummeret for oppf›ringen, som tilordnet fra den angitte nummerserien da oppf›ringen ble opprettet.;
                           SVE=Anger transaktionsnumret, som tilldelas fr†n den angivna nummerserien n„r transaktionen skapas.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Entry No.";
                Visible=FALSE }

    { 22  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the table that the entry is stored in.;
                           NOR=Angir tabellen som posten er lagret i.;
                           SVE=Anger vilken tabell som transaktionen lagras i.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Table ID";
                Visible=FALSE }

    { 17  ;2   ;Field     ;
                CaptionML=[ENU=Related Entries;
                           NOR=Relaterte poster;
                           SVE=Relaterade transaktioner];
                ToolTipML=[ENU=Specifies the name of the table where the Navigate facility has found entries with the selected document number and/or posting date.;
                           NOR=Angir navnet p† tabellen der funksjonen Naviger har funnet poster med valgt dokumentnummer og/eller bokf›ringsdato.;
                           SVE=Anger namnet p† tabellen d„r funktionen Analysera har hittat transaktioner med det valda dokumentnumret och/eller bokf”ringsdatumet.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Table Name" }

    { 19  ;2   ;Field     ;
                DrillDown=Yes;
                CaptionML=[ENU=No. of Entries;
                           NOR=Antall poster;
                           SVE=Antal transaktioner];
                ToolTipML=[ENU=Specifies the number of documents that the Navigate facility has found in the table with the selected entries.;
                           NOR=Angir dokumentnumrene som funksjonen Naviger har funnet i tabellen med de valgte postene.;
                           SVE=Anger antalet dokument som har hittats med funktionen Analysera i tabellen med de valda transaktionerna.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="No. of Records";
                OnDrillDown=BEGIN
                              ShowRecords;
                            END;
                             }

    { 7   ;1   ;Group     ;
                CaptionML=[ENU=Source;
                           NOR=Kilde;
                           SVE=K„lla] }

    { 8   ;2   ;Field     ;
                Name=DocType;
                CaptionML=[ENU=Document Type;
                           NOR=Bilagstype;
                           SVE=Dokumenttyp];
                ToolTipML=[ENU=Specifies the type of the selected document. Leave the Document Type field blank if you want to search by posting date. The entry's document number is shown in the Document No. field.;
                           NOR=Angir typen for det valgte dokumentet. La feltet Dokumenttype v‘re tomt hvis du vil s›ke etter bokf›ringsdato. Postens dokumentnummer vises i feltet Dokumentnr.;
                           SVE=Anger det valda dokumentet typ. L†t f„ltet Dokumenttyp vara tomt om du vill s”ka p† bokf”ringsdatum. Transaktionens dokumentnummer visas i f„ltet Dokumentnr.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=DocType;
                Enabled=DocTypeEnable;
                Editable=FALSE }

    { 10  ;2   ;Field     ;
                Name=SourceType;
                CaptionML=[ENU=Source Type;
                           NOR=Kildetype;
                           SVE=Ursprungstyp];
                ToolTipML=[ENU=Specifies the source type of the selected document or remains blank if you search by posting date. The entry's document number is shown in the Document No. field.;
                           NOR=Angir kildetypen til det valgte dokumentet, eller det er tomt hvis du s›ker etter bokf›ringsdato. Postens dokumentnummer vises i feltet Dokumentnr.;
                           SVE=Anger det valda dokumentets ursprungstyp eller inget om du s”ker p† bokf”ringsdatum. Transaktionens dokumentnummer visas i f„ltet Dokumentnr.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=SourceType;
                Enabled=SourceTypeEnable;
                Editable=FALSE }

    { 12  ;2   ;Field     ;
                Name=SourceNo;
                CaptionML=[ENU=Source No.;
                           NOR=Kildenr.;
                           SVE=Ursprungsnr];
                ToolTipML=[ENU=Specifies the source number of the selected document. The entry's document number is shown in the Document No. field.;
                           NOR=Angir kildenummeret til det valgte dokumentet. Postens dokumentnummer vises i feltet Dokumentnr.;
                           SVE=Anger det valda dokumentets ursprungsnummer. Transaktionens dokumentnummer visas i f„ltet Dokumentnr.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=SourceNo;
                Enabled=SourceNoEnable;
                Editable=FALSE }

    { 14  ;2   ;Field     ;
                Name=SourceName;
                CaptionML=[ENU=Source Name;
                           NOR=Kildenavn;
                           SVE=Ursprungsnamn];
                ToolTipML=[ENU=Specifies the source name on the selected entry. The entry's document number is shown in the Document No. field.;
                           NOR=Angir kildenavnet i den valgte posten. Postens dokumentnummer vises i feltet Dokumentnr.;
                           SVE=Anger den valda transaktionens ursprungsnamn. Transaktionens dokumentnummer visas i f„ltet Dokumentnr.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=SourceName;
                Enabled=SourceNameEnable;
                Editable=FALSE }

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=The business contact type was not specified.;NOR=Forretningskontakttype ble ikke angitt.;SVE=F”retagskontakten „r inte specificerad.';
      Text001@1001 : TextConst 'ENU=There are no posted records with this external document number.;NOR=Det finnes ingen bokf›rte poster med dette eksterndokumentnummeret.;SVE=Det finns inga bokf”rda poster med detta externa dokumentnummer.';
      Text002@1002 : TextConst 'ENU=Counting records...;NOR=Teller poster...;SVE=R„knar poster...';
      Text003@1003 : TextConst 'ENU=Posted Sales Invoice;NOR=Bokf›rt salgsfaktura;SVE=Bokf”rd f”rs„ljningsfaktura';
      Text004@1004 : TextConst 'ENU=Posted Sales Credit Memo;NOR=Bokf›rt salgskreditnota;SVE=Bokf”rd f”rs„ljningskreditnota';
      Text005@1005 : TextConst 'ENU=Posted Sales Shipment;NOR=Bokf›rt f›lgeseddel;SVE=Bokf”rd utleverans';
      Text006@1006 : TextConst 'ENU=Issued Reminder;NOR=Utstedt purring;SVE=Utskickade bet.p†minnelser';
      Text007@1007 : TextConst 'ENU=Issued Finance Charge Memo;NOR=Utstedt rentenota;SVE=Utskickad r„ntefaktura';
      Text008@1008 : TextConst 'ENU=Posted Purchase Invoice;NOR=Bokf›rt kj›psfaktura;SVE=Bokf”rd ink”psfaktura';
      Text009@1009 : TextConst 'ENU=Posted Purchase Credit Memo;NOR=Bokf›rt kj›pskreditnota;SVE=Bokf”rd ink”pskreditnota';
      Text010@1010 : TextConst 'ENU=Posted Purchase Receipt;NOR=Bokf›rt mottak;SVE=Bokf”rd inleverans';
      Text011@1011 : TextConst 'ENU=The document number has been used more than once.;NOR=Bilagsnummeret er brukt mer enn ‚n gang.;SVE=Dokumentnumret har anv„nts tidigare.';
      Text012@1012 : TextConst 'ENU=This combination of document number and posting date has been used more than once.;NOR=Denne kombinasjonen av bilagsnummer og bokf›ringsdato er brukt mer enn ‚n gang.;SVE=Denna kombination av dokumentnummer och bokf”ringsdatum har anv„nts tidigare.';
      Text013@1013 : TextConst 'ENU=There are no posted records with this document number.;NOR=Det finnes ingen bokf›rte poster med dette bilagsnummeret.;SVE=Det finns inga bokf”rda poster med detta dokumentnummer.';
      Text014@1014 : TextConst 'ENU=There are no posted records with this combination of document number and posting date.;NOR=Det finnes ingen bokf›rte poster med denne kombinasjonen av bilagsnummer og bokf›ringsdato.;SVE=Det finns inga bokf”rda poster med denna kombination av dokumentnummer och bokf”ringsdatum.';
      Text015@1015 : TextConst 'ENU=The search results in too many external documents. Specify a business contact no.;NOR=S›ket resulterte i for mange eksterndokumenter. Angi et forretningskontaktnummer.;SVE=S”kningen resulterar i f”r m†nga externa dokument. Specificera ett f”retagskontaktnummer.';
      Text016@1016 : TextConst 'ENU=The search results in too many external documents. Use Navigate from the relevant ledger entries.;NOR=S›ket resulterte i for mange eksterndokumenter. Bruk Naviger fra de aktuelle postene.;SVE=S”kningen resulterar i f”r m†nga externa dokument. Anv„nd Analysera fr†n relevanta transaktioner.';
      Text017@1017 : TextConst 'ENU=Posted Return Receipt;NOR=Bokf›rt returseddel;SVE=Bokf”rd returinlevns';
      Text018@1018 : TextConst 'ENU=Posted Return Shipment;NOR=Bokf›rt returforsendelse;SVE=Bokf”rd returutleverans';
      Text019@1019 : TextConst 'ENU=Posted Transfer Shipment;NOR=Bokf›rt overf›ringsseddel;SVE=Bokf”rd ”verf”ringsutleverans';
      Text020@1020 : TextConst 'ENU=Posted Transfer Receipt;NOR=Bokf›rt overf›ringsmottak;SVE=Bokf”rd ”verf”ringsinlevns';
      Text021@1061 : TextConst 'ENU=Sales Order;NOR=Ordre;SVE=F”rs.order';
      Text022@1080 : TextConst 'ENU=Sales Invoice;NOR=Salgsfaktura;SVE=F”rs.faktura';
      Text023@1081 : TextConst 'ENU=Sales Return Order;NOR=Ordreretur;SVE=F”rs.returorder';
      Text024@1082 : TextConst 'ENU=Sales Credit Memo;NOR=Salgskreditnota;SVE=F”rs.kreditnota';
      Text025@1097 : TextConst 'ENU=Posted Assembly Order;NOR=Bokf›rt monteringsordre;SVE=Bokf”rd monteringsorder';
      sText003@1096 : TextConst 'ENU=Posted Service Invoice;NOR=Bokf›rt servicefaktura;SVE=Bokf”rd servicefaktura';
      sText004@1095 : TextConst 'ENU=Posted Service Credit Memo;NOR=Bokf›rt salgskreditnota (service);SVE=Bokf”rd servicekreditnota';
      sText005@1092 : TextConst 'ENU=Posted Service Shipment;NOR=Bokf›rt servicef›lgeseddel;SVE=Bokf”rd serviceutleverans';
      sText021@1094 : TextConst 'ENU=Service Order;NOR=Serviceordre;SVE=Serviceorder';
      sText022@1093 : TextConst 'ENU=Service Invoice;NOR=Servicefaktura;SVE=Servicefaktura';
      sText024@1036 : TextConst 'ENU=Service Credit Memo;NOR=Salgskreditnota (service);SVE=Servicekreditnota';
      Text99000000@1021 : TextConst 'ENU=Production Order;NOR=Produksjonsordre;SVE=Produktionsorder';
      Cust@1023 : Record 18 SECURITYFILTERING(Filtered);
      Vend@1024 : Record 23 SECURITYFILTERING(Filtered);
      SOSalesHeader@1083 : Record 36;
      SISalesHeader@1084 : Record 36;
      SROSalesHeader@1086 : Record 36;
      SCMSalesHeader@1085 : Record 36;
      SalesShptHeader@1025 : Record 110 SECURITYFILTERING(Filtered);
      SalesInvHeader@1026 : Record 112 SECURITYFILTERING(Filtered);
      ReturnRcptHeader@1027 : Record 6660 SECURITYFILTERING(Filtered);
      SalesCrMemoHeader@1028 : Record 114 SECURITYFILTERING(Filtered);
      SOServHeader@1091 : Record 5900;
      SIServHeader@1090 : Record 5900;
      SCMServHeader@1059 : Record 5900;
      ServShptHeader@1058 : Record 5990 SECURITYFILTERING(Filtered);
      ServInvHeader@1057 : Record 5992 SECURITYFILTERING(Filtered);
      ServCrMemoHeader@1022 : Record 5994 SECURITYFILTERING(Filtered);
      IssuedReminderHeader@1029 : Record 297 SECURITYFILTERING(Filtered);
      IssuedFinChrgMemoHeader@1030 : Record 304 SECURITYFILTERING(Filtered);
      PurchRcptHeader@1031 : Record 120 SECURITYFILTERING(Filtered);
      PurchInvHeader@1032 : Record 122 SECURITYFILTERING(Filtered);
      ReturnShptHeader@1033 : Record 6650 SECURITYFILTERING(Filtered);
      PurchCrMemoHeader@1034 : Record 124 SECURITYFILTERING(Filtered);
      ProductionOrderHeader@1035 : Record 5405 SECURITYFILTERING(Filtered);
      PostedAssemblyHeader@1065 : Record 910 SECURITYFILTERING(Filtered);
      TransShptHeader@1037 : Record 5744 SECURITYFILTERING(Filtered);
      TransRcptHeader@1038 : Record 5746 SECURITYFILTERING(Filtered);
      PostedWhseRcptLine@1087 : Record 7319 SECURITYFILTERING(Filtered);
      PostedWhseShptLine@1088 : Record 7323 SECURITYFILTERING(Filtered);
      PstdPhysInvtOrderHdr@1161 : Record 5879 SECURITYFILTERING(Filtered);
      GLEntry@1039 : Record 17 SECURITYFILTERING(Filtered);
      VATEntry@1040 : Record 254 SECURITYFILTERING(Filtered);
      CustLedgEntry@1041 : Record 21 SECURITYFILTERING(Filtered);
      DtldCustLedgEntry@1042 : Record 379 SECURITYFILTERING(Filtered);
      VendLedgEntry@1043 : Record 25 SECURITYFILTERING(Filtered);
      DtldVendLedgEntry@1044 : Record 380 SECURITYFILTERING(Filtered);
      EmplLedgEntry@1109 : Record 5222 SECURITYFILTERING(Filtered);
      DtldEmplLedgEntry@1106 : Record 5223 SECURITYFILTERING(Filtered);
      ItemLedgEntry@1045 : Record 32 SECURITYFILTERING(Filtered);
      PhysInvtLedgEntry@1046 : Record 281 SECURITYFILTERING(Filtered);
      ResLedgEntry@1047 : Record 203 SECURITYFILTERING(Filtered);
      JobLedgEntry@1048 : Record 11072005 SECURITYFILTERING(Filtered);
      JobWIPEntry@1099 : Record 11020402 SECURITYFILTERING(Filtered);
      JobWIPGLEntry@1100 : Record 11020403 SECURITYFILTERING(Filtered);
      ValueEntry@1049 : Record 5802 SECURITYFILTERING(Filtered);
      BankAccLedgEntry@1050 : Record 271 SECURITYFILTERING(Filtered);
      CheckLedgEntry@1051 : Record 272 SECURITYFILTERING(Filtered);
      ReminderEntry@1052 : Record 300 SECURITYFILTERING(Filtered);
      FALedgEntry@1053 : Record 5601 SECURITYFILTERING(Filtered);
      MaintenanceLedgEntry@1054 : Record 11072085 SECURITYFILTERING(Filtered);
      InsuranceCovLedgEntry@1055 : Record 11072088 SECURITYFILTERING(Filtered);
      CapacityLedgEntry@1056 : Record 5832 SECURITYFILTERING(Filtered);
      ServLedgerEntry@1063 : Record 5907 SECURITYFILTERING(Filtered);
      WarrantyLedgerEntry@1064 : Record 5908 SECURITYFILTERING(Filtered);
      WhseEntry@1089 : Record 7312 SECURITYFILTERING(Filtered);
      TempRecordBuffer@1060 : TEMPORARY Record 6529;
      CostEntry@1098 : Record 1104 SECURITYFILTERING(Filtered);
      IncomingDocument@1101 : Record 130 SECURITYFILTERING(Filtered);
      TextManagement@1066 : Codeunit 41;
      ItemTrackingNavigateMgt@1159 : Codeunit 6529;
      Window@1067 : Dialog;
      DocNoFilter@1068 : Text;
      PostingDateFilter@1069 : Text;
      NewDocNo@1070 : Code[20];
      ContactNo@1071 : Code[250];
      ExtDocNo@1072 : Code[250];
      NewPostingDate@1073 : Date;
      DocType@1074 : Text[100];
      SourceType@1075 : Text[30];
      SourceNo@1076 : Code[20];
      SourceName@1077 : Text[100];
      ContactType@1078 : ' ,Vendor,Customer';
      DocExists@1079 : Boolean;
      NewSerialNo@1136 : Code[50];
      NewLotNo@1122 : Code[50];
      SerialNoFilter@1157 : Text;
      LotNoFilter@1158 : Text;
      ShowEnable@19017131 : Boolean INDATASET;
      PrintEnable@19037407 : Boolean INDATASET;
      DocTypeEnable@19044345 : Boolean INDATASET;
      SourceTypeEnable@19078091 : Boolean INDATASET;
      SourceNoEnable@19029280 : Boolean INDATASET;
      SourceNameEnable@19028072 : Boolean INDATASET;
      UpdateForm@1062 : Boolean;
      FindBasedOn@1102 : 'Document,Business Contact,Item Reference';
      DocumentVisible@1103 : Boolean INDATASET;
      BusinessContactVisible@1104 : Boolean INDATASET;
      ItemReferenceVisible@1105 : Boolean INDATASET;
      FilterSelectionChangedTxtVisible@1107 : Boolean INDATASET;
      PageCaptionTxt@1108 : TextConst 'ENU=Selected - %1;NOR=Valgt - %1;SVE=Vald - %1';
      UarPostedHourAccLineRec@1210190000 : Record 11012614;
      PostedHoursHeader@1210190001 : Record 11012084;
      PostedHoursLine@1210190002 : Record 11012085;
      LeaveLedgEntry@1100485001 : Record 11020235;
      CommitmentEntry@1100485002 : Record 11020257;
      RequisitionEntry@1100485003 : Record 11020258;
      PlantLedgerEntry@11012040 : Record 11012572;
      PlantRateCompEntry@1100485000 : Record 11020501;
      SMLedgerEntry@11012000 : Record 11012819;
      RetentionLedgEntry@1100528500 : Record 11020636;
      DtldRetentionLedgEntry@1100528501 : Record 11020637;
      ProjectInventoryEntry@1100528502 : Record 11012670;
      NSItemTrackingEntry@1100528503 : Record 11071902;
      IntercompanyLedgerEntry@1100528400 : Record 11229313;
      InwRegEntry@1070000 : Record 11128012 SECURITYFILTERING(Filtered);
      "***Exflow***"@1100285000 : Integer;
      EXPostedDocument@12013588 : Record 12013626;
      LoanLedgerEntry@1100528504 : Record 11229444;

    [External]
    PROCEDURE SetDoc@1(PostingDate@1000 : Date;DocNo@1001 : Code[20]);
    BEGIN
      NewDocNo := DocNo;
      NewPostingDate := PostingDate;
    END;

    LOCAL PROCEDURE FindExtRecords@8();
    VAR
      VendLedgEntry2@1000 : Record 25 SECURITYFILTERING(Filtered);
      FoundRecords@1001 : Boolean;
      DateFilter2@1002 : Text;
      DocNoFilter2@1003 : Text;
    BEGIN
      FoundRecords := FALSE;
      CASE ContactType OF
        ContactType::Vendor:
          BEGIN
            VendLedgEntry2.SETCURRENTKEY("External Document No.");
            VendLedgEntry2.SETFILTER("External Document No.",ExtDocNo);
            VendLedgEntry2.SETFILTER("Vendor No.",ContactNo);
            IF VendLedgEntry2.FINDSET THEN BEGIN
              REPEAT
                MakeExtFilter(
                  DateFilter2,
                  VendLedgEntry2."Posting Date",
                  DocNoFilter2,
                  VendLedgEntry2."Document No.");
              UNTIL VendLedgEntry2.NEXT = 0;
              SetPostingDate(DateFilter2);
              SetDocNo(DocNoFilter2);
              FindRecords;
              FoundRecords := TRUE;
            END;
          END;
        ContactType::Customer:
          BEGIN
            DELETEALL;
            "Entry No." := 0;
            FindUnpostedSalesDocs(SOSalesHeader."Document Type"::Order,Text021,SOSalesHeader);
            FindUnpostedSalesDocs(SISalesHeader."Document Type"::Invoice,Text022,SISalesHeader);
            FindUnpostedSalesDocs(SROSalesHeader."Document Type"::"Return Order",Text023,SROSalesHeader);
            FindUnpostedSalesDocs(SCMSalesHeader."Document Type"::"Credit Memo",Text024,SCMSalesHeader);
            IF SalesShptHeader.READPERMISSION THEN BEGIN
              SalesShptHeader.RESET;
              SalesShptHeader.SETCURRENTKEY("Sell-to Customer No.","External Document No.");
              SalesShptHeader.SETFILTER("Sell-to Customer No.",ContactNo);
              SalesShptHeader.SETFILTER("External Document No.",ExtDocNo);
              InsertIntoDocEntry(Rec,DATABASE::"Sales Shipment Header",0,Text005,SalesShptHeader.COUNT);
            END;
            IF SalesInvHeader.READPERMISSION THEN BEGIN
              SalesInvHeader.RESET;
              SalesInvHeader.SETCURRENTKEY("Sell-to Customer No.","External Document No.");
              SalesInvHeader.SETFILTER("Sell-to Customer No.",ContactNo);
              SalesInvHeader.SETFILTER("External Document No.",ExtDocNo);
              InsertIntoDocEntry(Rec,DATABASE::"Sales Invoice Header",0,Text003,SalesInvHeader.COUNT);
            END;
            IF ReturnRcptHeader.READPERMISSION THEN BEGIN
              ReturnRcptHeader.RESET;
              ReturnRcptHeader.SETCURRENTKEY("Sell-to Customer No.","External Document No.");
              ReturnRcptHeader.SETFILTER("Sell-to Customer No.",ContactNo);
              ReturnRcptHeader.SETFILTER("External Document No.",ExtDocNo);
              InsertIntoDocEntry(Rec,DATABASE::"Return Receipt Header",0,Text017,ReturnRcptHeader.COUNT);
            END;
            IF SalesCrMemoHeader.READPERMISSION THEN BEGIN
              SalesCrMemoHeader.RESET;
              SalesCrMemoHeader.SETCURRENTKEY("Sell-to Customer No.","External Document No.");
              SalesCrMemoHeader.SETFILTER("Sell-to Customer No.",ContactNo);
              SalesCrMemoHeader.SETFILTER("External Document No.",ExtDocNo);
              InsertIntoDocEntry(Rec,DATABASE::"Sales Cr.Memo Header",0,Text004,SalesCrMemoHeader.COUNT);
            END;
            FindUnpostedServDocs(SOServHeader."Document Type"::Order,sText021,SOServHeader);
            FindUnpostedServDocs(SIServHeader."Document Type"::Invoice,sText022,SIServHeader);
            FindUnpostedServDocs(SCMServHeader."Document Type"::"Credit Memo",sText024,SCMServHeader);
            IF ServShptHeader.READPERMISSION THEN
              IF ExtDocNo = '' THEN BEGIN
                ServShptHeader.RESET;
                ServShptHeader.SETCURRENTKEY("Customer No.");
                ServShptHeader.SETFILTER("Customer No.",ContactNo);
                InsertIntoDocEntry(Rec,DATABASE::"Service Shipment Header",0,sText005,ServShptHeader.COUNT);
              END;
            IF ServInvHeader.READPERMISSION THEN
              IF ExtDocNo = '' THEN BEGIN
                ServInvHeader.RESET;
                ServInvHeader.SETCURRENTKEY("Customer No.");
                ServInvHeader.SETFILTER("Customer No.",ContactNo);
                InsertIntoDocEntry(Rec,DATABASE::"Service Invoice Header",0,sText003,ServInvHeader.COUNT);
              END;
            IF ServCrMemoHeader.READPERMISSION THEN
              IF ExtDocNo = '' THEN BEGIN
                ServCrMemoHeader.RESET;
                ServCrMemoHeader.SETCURRENTKEY("Customer No.");
                ServCrMemoHeader.SETFILTER("Customer No.",ContactNo);
                InsertIntoDocEntry(Rec,DATABASE::"Service Cr.Memo Header",0,sText004,ServCrMemoHeader.COUNT);
              END;

            DocExists := FINDFIRST;

            UpdateFormAfterFindRecords;
            FoundRecords := DocExists;
          END;
        ELSE
          ERROR(Text000);
      END;

      IF NOT FoundRecords THEN BEGIN
        SetSource(0D,'','',0,'');
        MESSAGE(Text001);
      END;
    END;

    LOCAL PROCEDURE FindRecords@2();
    VAR
      DocType2@1002 : Text[100];
      DocNo2@1004 : Code[20];
      SourceType2@1003 : Integer;
      SourceNo2@1005 : Code[20];
      PostingDate@1000 : Date;
      IsSourceUpdated@1001 : Boolean;
      HideDialog@1006 : Boolean;
    BEGIN
      OnBeforeFindRecords(HideDialog);
      IF NOT HideDialog THEN
        Window.OPEN(Text002);
      RESET;
      DELETEALL;
      "Entry No." := 0;

      FindPostedDocuments;
      FindLedgerEntries;
      Find4PSEntries; //**4PS.n

      OnAfterNavigateFindRecords(Rec,DocNoFilter,PostingDateFilter);
      DocExists := FINDFIRST;

      SetSource(0D,'','',0,'');
      IF DocExists THEN BEGIN
        IF (NoOfRecords(DATABASE::"Cust. Ledger Entry") + NoOfRecords(DATABASE::"Vendor Ledger Entry") <= 1) AND
           (GetDocumentCount <= 1)
        THEN BEGIN
          SetSourceForService;
          SetSourceForSales;
          SetSourceForPurchase;
          SetSourceForServiceDoc;

          IsSourceUpdated := FALSE;
          OnFindRecordsOnAfterSetSource(
            Rec,PostingDate,DocType2,DocNo2,SourceType2,SourceNo2,DocNoFilter,PostingDateFilter,IsSourceUpdated);
          IF IsSourceUpdated THEN
            SetSource(PostingDate,DocType2,DocNo2,SourceType2,SourceNo2);
        END ELSE BEGIN
          IF DocNoFilter <> '' THEN
            IF PostingDateFilter = '' THEN
              MESSAGE(Text011)
            ELSE
              MESSAGE(Text012);
        END;
      END ELSE
        IF PostingDateFilter = '' THEN
          MESSAGE(Text013)
        ELSE
          MESSAGE(Text014);

      OnAfterFindRecords(Rec,DocNoFilter,PostingDateFilter);

      IF UpdateForm THEN
        UpdateFormAfterFindRecords;

      IF NOT HideDialog THEN
        Window.CLOSE;
    END;

    LOCAL PROCEDURE FindLedgerEntries@73();
    BEGIN
      FindGLEntries;
      FindVATEntries;
      FindCustEntries;
      FindReminderEntries;
      FindVendEntries;
      FindInvtEntries;
      FindResEntries;
      FindJobEntries;
      FindBankEntries;
      FindFAEntries;
      FindCapEntries;
      FindWhseEntries;
      FindServEntries;
      FindCostEntries;
    END;

    LOCAL PROCEDURE FindCustEntries@42();
    BEGIN
      IF CustLedgEntry.READPERMISSION THEN BEGIN
        CustLedgEntry.RESET;
        CustLedgEntry.SETCURRENTKEY("Document No.");
        CustLedgEntry.SETFILTER("Document No.",DocNoFilter);
        CustLedgEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Cust. Ledger Entry",0,CustLedgEntry.TABLECAPTION,CustLedgEntry.COUNT);
      END;
      IF DtldCustLedgEntry.READPERMISSION THEN BEGIN
        DtldCustLedgEntry.RESET;
        DtldCustLedgEntry.SETCURRENTKEY("Document No.");
        DtldCustLedgEntry.SETFILTER("Document No.",DocNoFilter);
        DtldCustLedgEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Detailed Cust. Ledg. Entry",0,DtldCustLedgEntry.TABLECAPTION,DtldCustLedgEntry.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindVendEntries@44();
    BEGIN
      IF VendLedgEntry.READPERMISSION THEN BEGIN
        VendLedgEntry.RESET;
        VendLedgEntry.SETCURRENTKEY("Document No.");
        VendLedgEntry.SETFILTER("Document No.",DocNoFilter);
        VendLedgEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Vendor Ledger Entry",0,VendLedgEntry.TABLECAPTION,VendLedgEntry.COUNT);
      END;
      IF DtldVendLedgEntry.READPERMISSION THEN BEGIN
        DtldVendLedgEntry.RESET;
        DtldVendLedgEntry.SETCURRENTKEY("Document No.");
        DtldVendLedgEntry.SETFILTER("Document No.",DocNoFilter);
        DtldVendLedgEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Detailed Vendor Ledg. Entry",0,DtldVendLedgEntry.TABLECAPTION,DtldVendLedgEntry.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindBankEntries@76();
    BEGIN
      IF BankAccLedgEntry.READPERMISSION THEN BEGIN
        BankAccLedgEntry.RESET;
        BankAccLedgEntry.SETCURRENTKEY("Document No.","Posting Date");
        BankAccLedgEntry.SETFILTER("Document No.",DocNoFilter);
        BankAccLedgEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Bank Account Ledger Entry",0,BankAccLedgEntry.TABLECAPTION,BankAccLedgEntry.COUNT);
      END;
      IF CheckLedgEntry.READPERMISSION THEN BEGIN
        CheckLedgEntry.RESET;
        CheckLedgEntry.SETCURRENTKEY("Document No.","Posting Date");
        CheckLedgEntry.SETFILTER("Document No.",DocNoFilter);
        CheckLedgEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Check Ledger Entry",0,CheckLedgEntry.TABLECAPTION,CheckLedgEntry.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindGLEntries@63();
    BEGIN
      IF GLEntry.READPERMISSION THEN BEGIN
        GLEntry.RESET;
        GLEntry.SETCURRENTKEY("Document No.","Posting Date");
        GLEntry.SETFILTER("Document No.",DocNoFilter);
        GLEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"G/L Entry",0,GLEntry.TABLECAPTION,GLEntry.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindVATEntries@64();
    BEGIN
      IF VATEntry.READPERMISSION THEN BEGIN
        VATEntry.RESET;
        VATEntry.SETCURRENTKEY("Document No.","Posting Date");
        VATEntry.SETFILTER("Document No.",DocNoFilter);
        VATEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"VAT Entry",0,VATEntry.TABLECAPTION,VATEntry.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindFAEntries@61();
    BEGIN
      IF FALedgEntry.READPERMISSION THEN BEGIN
        FALedgEntry.RESET;
        FALedgEntry.SETCURRENTKEY("Document No.","Posting Date");
        FALedgEntry.SETFILTER("Document No.",DocNoFilter);
        FALedgEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"FA Ledger Entry",0,FALedgEntry.TABLECAPTION,FALedgEntry.COUNT);
      END;
      IF MaintenanceLedgEntry.READPERMISSION THEN BEGIN
        MaintenanceLedgEntry.RESET;
        MaintenanceLedgEntry.SETCURRENTKEY("Document No.","Posting Date");
        MaintenanceLedgEntry.SETFILTER("Document No.",DocNoFilter);
        MaintenanceLedgEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Maintenance Ledger Entry",0,MaintenanceLedgEntry.TABLECAPTION,MaintenanceLedgEntry.COUNT);
      END;
      IF InsuranceCovLedgEntry.READPERMISSION THEN BEGIN
        InsuranceCovLedgEntry.RESET;
        InsuranceCovLedgEntry.SETCURRENTKEY("Document No.","Posting Date");
        InsuranceCovLedgEntry.SETFILTER("Document No.",DocNoFilter);
        InsuranceCovLedgEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          Rec,DATABASE::"Ins. Coverage Ledger Entry",0,InsuranceCovLedgEntry.TABLECAPTION,InsuranceCovLedgEntry.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindInvtEntries@66();
    BEGIN
      IF ItemLedgEntry.READPERMISSION THEN BEGIN
        ItemLedgEntry.RESET;
        ItemLedgEntry.SETCURRENTKEY("Document No.");
        ItemLedgEntry.SETFILTER("Document No.",DocNoFilter);
        ItemLedgEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Item Ledger Entry",0,ItemLedgEntry.TABLECAPTION,ItemLedgEntry.COUNT);
      END;
      IF ValueEntry.READPERMISSION THEN BEGIN
        ValueEntry.RESET;
        ValueEntry.SETCURRENTKEY("Document No.");
        ValueEntry.SETFILTER("Document No.",DocNoFilter);
        ValueEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Value Entry",0,ValueEntry.TABLECAPTION,ValueEntry.COUNT);
      END;
      IF PhysInvtLedgEntry.READPERMISSION THEN BEGIN
        PhysInvtLedgEntry.RESET;
        PhysInvtLedgEntry.SETCURRENTKEY("Document No.","Posting Date");
        PhysInvtLedgEntry.SETFILTER("Document No.",DocNoFilter);
        PhysInvtLedgEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Phys. Inventory Ledger Entry",0,PhysInvtLedgEntry.TABLECAPTION,PhysInvtLedgEntry.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindReminderEntries@65();
    BEGIN
      IF ReminderEntry.READPERMISSION THEN BEGIN
        ReminderEntry.RESET;
        ReminderEntry.SETCURRENTKEY(Type,"No.");
        ReminderEntry.SETFILTER("No.",DocNoFilter);
        ReminderEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Reminder/Fin. Charge Entry",0,ReminderEntry.TABLECAPTION,ReminderEntry.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindResEntries@74();
    BEGIN
      IF ResLedgEntry.READPERMISSION THEN BEGIN
        ResLedgEntry.RESET;
        ResLedgEntry.SETCURRENTKEY("Document No.","Posting Date");
        ResLedgEntry.SETFILTER("Document No.",DocNoFilter);
        ResLedgEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Res. Ledger Entry",0,ResLedgEntry.TABLECAPTION,ResLedgEntry.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindServEntries@62();
    BEGIN
      IF ServLedgerEntry.READPERMISSION THEN BEGIN
        ServLedgerEntry.RESET;
        ServLedgerEntry.SETCURRENTKEY("Document No.","Posting Date");
        ServLedgerEntry.SETFILTER("Document No.",DocNoFilter);
        ServLedgerEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Service Ledger Entry",0,ServLedgerEntry.TABLECAPTION,ServLedgerEntry.COUNT);
      END;
      IF WarrantyLedgerEntry.READPERMISSION THEN BEGIN
        WarrantyLedgerEntry.RESET;
        WarrantyLedgerEntry.SETCURRENTKEY("Document No.","Posting Date");
        WarrantyLedgerEntry.SETFILTER("Document No.",DocNoFilter);
        WarrantyLedgerEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Warranty Ledger Entry",0,WarrantyLedgerEntry.TABLECAPTION,WarrantyLedgerEntry.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindCapEntries@78();
    BEGIN
      IF CapacityLedgEntry.READPERMISSION THEN BEGIN
        CapacityLedgEntry.RESET;
        CapacityLedgEntry.SETCURRENTKEY("Document No.","Posting Date");
        CapacityLedgEntry.SETFILTER("Document No.",DocNoFilter);
        CapacityLedgEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Capacity Ledger Entry",0,CapacityLedgEntry.TABLECAPTION,CapacityLedgEntry.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindCostEntries@70();
    BEGIN
      IF CostEntry.READPERMISSION THEN BEGIN
        CostEntry.RESET;
        CostEntry.SETCURRENTKEY("Document No.","Posting Date");
        CostEntry.SETFILTER("Document No.",DocNoFilter);
        CostEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Cost Entry",0,CostEntry.TABLECAPTION,CostEntry.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindWhseEntries@81();
    BEGIN
      IF WhseEntry.READPERMISSION THEN BEGIN
        WhseEntry.RESET;
        WhseEntry.SETCURRENTKEY("Reference No.","Registering Date");
        WhseEntry.SETFILTER("Reference No.",DocNoFilter);
        WhseEntry.SETFILTER("Registering Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Warehouse Entry",0,WhseEntry.TABLECAPTION,WhseEntry.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindJobEntries@26();
    BEGIN
      IF JobLedgEntry.READPERMISSION THEN BEGIN
        JobLedgEntry.RESET;
        JobLedgEntry.SETCURRENTKEY("Document No.","Posting Date");
        JobLedgEntry.SETFILTER("Document No.",DocNoFilter);
        JobLedgEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Job Ledger Entry",0,JobLedgEntry.TABLECAPTION,JobLedgEntry.COUNT);
      END;
      IF JobWIPEntry.READPERMISSION THEN BEGIN
        JobWIPEntry.RESET;
        JobWIPEntry.SETFILTER("Document No.",DocNoFilter);
        JobWIPEntry.SETFILTER("WIP Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Job WIP Entry",0,JobWIPEntry.TABLECAPTION,JobWIPEntry.COUNT);
      END;
      IF JobWIPGLEntry.READPERMISSION THEN BEGIN
        JobWIPGLEntry.RESET;
        JobWIPGLEntry.SETCURRENTKEY("Document No.","Posting Date");
        JobWIPGLEntry.SETFILTER("Document No.",DocNoFilter);
        JobWIPGLEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Job WIP G/L Entry",0,JobWIPGLEntry.TABLECAPTION,JobWIPGLEntry.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindPostedDocuments@75();
    BEGIN
      FindIncomingDocumentRecords;
      FindEmployeeRecords;
      FindSalesShipmentHeader;
      FindSalesInvoiceHeader;
      FindReturnRcptHeader;
      FindSalesCrMemoHeader;
      FindServShipmentHeader;
      FindServInvoiceHeader;
      FindServCrMemoHeader;
      FindIssuedReminderHeader;
      FindIssuedFinChrgMemoHeader;
      FindPurchRcptHeader;
      FindPurchInvoiceHeader;
      FindReturnShptHeader;
      FindPurchCrMemoHeader;
      FindProdOrderHeader;
      FindPostedAssemblyHeader;
      FindTransShptHeader;
      FindTransRcptHeader;
      FindPstdPhysInvtOrderHdr;
      FindPostedWhseShptLine;
      FindPostedWhseRcptLine;
    END;

    LOCAL PROCEDURE FindIncomingDocumentRecords@27();
    BEGIN
      IF IncomingDocument.READPERMISSION THEN BEGIN
        IncomingDocument.RESET;
        IncomingDocument.SETFILTER("Document No.",DocNoFilter);
        IncomingDocument.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Incoming Document",0,IncomingDocument.TABLECAPTION,IncomingDocument.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindSalesShipmentHeader@36();
    BEGIN
      IF SalesShptHeader.READPERMISSION THEN BEGIN
        SalesShptHeader.RESET;
        SalesShptHeader.SETFILTER("No.",DocNoFilter);
        SalesShptHeader.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Sales Shipment Header",0,Text005,SalesShptHeader.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindSalesInvoiceHeader@67();
    BEGIN
      IF SalesInvHeader.READPERMISSION THEN BEGIN
        SalesInvHeader.RESET;
        SalesInvHeader.SETFILTER("No.",DocNoFilter);
        SalesInvHeader.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Sales Invoice Header",0,Text003,SalesInvHeader.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindSalesCrMemoHeader@68();
    BEGIN
      IF SalesCrMemoHeader.READPERMISSION THEN BEGIN
        SalesCrMemoHeader.RESET;
        SalesCrMemoHeader.SETFILTER("No.",DocNoFilter);
        SalesCrMemoHeader.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Sales Cr.Memo Header",0,Text004,SalesCrMemoHeader.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindReturnRcptHeader@69();
    BEGIN
      IF ReturnRcptHeader.READPERMISSION THEN BEGIN
        ReturnRcptHeader.RESET;
        ReturnRcptHeader.SETFILTER("No.",DocNoFilter);
        ReturnRcptHeader.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Return Receipt Header",0,Text017,ReturnRcptHeader.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindServShipmentHeader@38();
    BEGIN
      IF ServShptHeader.READPERMISSION THEN BEGIN
        ServShptHeader.RESET;
        ServShptHeader.SETFILTER("No.",DocNoFilter);
        ServShptHeader.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Service Shipment Header",0,sText005,ServShptHeader.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindServInvoiceHeader@49();
    BEGIN
      IF ServInvHeader.READPERMISSION THEN BEGIN
        ServInvHeader.RESET;
        ServInvHeader.SETFILTER("No.",DocNoFilter);
        ServInvHeader.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Service Invoice Header",0,sText003,ServInvHeader.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindServCrMemoHeader@50();
    BEGIN
      IF ServCrMemoHeader.READPERMISSION THEN BEGIN
        ServCrMemoHeader.RESET;
        ServCrMemoHeader.SETFILTER("No.",DocNoFilter);
        ServCrMemoHeader.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Service Cr.Memo Header",0,sText004,ServCrMemoHeader.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindEmployeeRecords@29();
    BEGIN
      IF EmplLedgEntry.READPERMISSION THEN BEGIN
        EmplLedgEntry.RESET;
        EmplLedgEntry.SETCURRENTKEY("Document No.");
        EmplLedgEntry.SETFILTER("Document No.",DocNoFilter);
        EmplLedgEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Employee Ledger Entry",0,EmplLedgEntry.TABLECAPTION,EmplLedgEntry.COUNT);
      END;
      IF DtldEmplLedgEntry.READPERMISSION THEN BEGIN
        DtldEmplLedgEntry.RESET;
        DtldEmplLedgEntry.SETCURRENTKEY("Document No.");
        DtldEmplLedgEntry.SETFILTER("Document No.",DocNoFilter);
        DtldEmplLedgEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Detailed Employee Ledger Entry",0,DtldEmplLedgEntry.TABLECAPTION,DtldEmplLedgEntry.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindIssuedReminderHeader@41();
    BEGIN
      IF IssuedReminderHeader.READPERMISSION THEN BEGIN
        IssuedReminderHeader.RESET;
        IssuedReminderHeader.SETFILTER("No.",DocNoFilter);
        IssuedReminderHeader.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Issued Reminder Header",0,Text006,IssuedReminderHeader.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindIssuedFinChrgMemoHeader@43();
    BEGIN
      IF IssuedFinChrgMemoHeader.READPERMISSION THEN BEGIN
        IssuedFinChrgMemoHeader.RESET;
        IssuedFinChrgMemoHeader.SETFILTER("No.",DocNoFilter);
        IssuedFinChrgMemoHeader.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Issued Fin. Charge Memo Header",0,Text007,
          IssuedFinChrgMemoHeader.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindPurchRcptHeader@45();
    BEGIN
      IF PurchRcptHeader.READPERMISSION THEN BEGIN
        PurchRcptHeader.RESET;
        PurchRcptHeader.SETFILTER("No.",DocNoFilter);
        PurchRcptHeader.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Purch. Rcpt. Header",0,Text010,PurchRcptHeader.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindPurchInvoiceHeader@46();
    BEGIN
      IF PurchInvHeader.READPERMISSION THEN BEGIN
        PurchInvHeader.RESET;
        PurchInvHeader.SETFILTER("No.",DocNoFilter);
        PurchInvHeader.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Purch. Inv. Header",0,Text008,PurchInvHeader.COUNT);
      END;
      //>>NAVSE
      IF InwRegEntry.READPERMISSION THEN BEGIN
        InwRegEntry.RESET;
        InwRegEntry.SETCURRENTKEY("Document No.");
        InwRegEntry.SETFILTER("Document No.",DocNoFilter);
        InwRegEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,
          DATABASE::"Inward Reg. Entry",0,InwRegEntry.TABLECAPTION,InwRegEntry.COUNT);
      END;
      //<<NAVSE
      // ExFlow ->
      IF EXPostedDocument.READPERMISSION THEN BEGIN
        EXPostedDocument.RESET;
        EXPostedDocument.SETCURRENTKEY("Document No.");
        EXPostedDocument.SETFILTER("Document No.",DocNoFilter);
        EXPostedDocument.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,
          DATABASE::"EX Posted Document",0,EXPostedDocument.TABLECAPTION,EXPostedDocument.COUNT);
      END;
      // <- ExFlow
    END;

    LOCAL PROCEDURE FindPurchCrMemoHeader@47();
    BEGIN
      IF PurchCrMemoHeader.READPERMISSION THEN BEGIN
        PurchCrMemoHeader.RESET;
        PurchCrMemoHeader.SETFILTER("No.",DocNoFilter);
        PurchCrMemoHeader.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Purch. Cr. Memo Hdr.",0,Text009,PurchCrMemoHeader.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindReturnShptHeader@51();
    BEGIN
      IF ReturnShptHeader.READPERMISSION THEN BEGIN
        ReturnShptHeader.RESET;
        ReturnShptHeader.SETFILTER("No.",DocNoFilter);
        ReturnShptHeader.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Return Shipment Header",0,Text018,ReturnShptHeader.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindProdOrderHeader@53();
    BEGIN
      IF ProductionOrderHeader.READPERMISSION THEN BEGIN
        ProductionOrderHeader.RESET;
        ProductionOrderHeader.SETRANGE(
          Status,
          ProductionOrderHeader.Status::Released,
          ProductionOrderHeader.Status::Finished);
        ProductionOrderHeader.SETFILTER("No.",DocNoFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Production Order",0,Text99000000,ProductionOrderHeader.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindPostedAssemblyHeader@54();
    BEGIN
      IF PostedAssemblyHeader.READPERMISSION THEN BEGIN
        PostedAssemblyHeader.RESET;
        PostedAssemblyHeader.SETFILTER("No.",DocNoFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Posted Assembly Header",0,Text025,PostedAssemblyHeader.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindPostedWhseShptLine@58();
    BEGIN
      IF PostedWhseShptLine.READPERMISSION THEN BEGIN
        PostedWhseShptLine.RESET;
        PostedWhseShptLine.SETCURRENTKEY("Posted Source No.","Posting Date");
        PostedWhseShptLine.SETFILTER("Posted Source No.",DocNoFilter);
        PostedWhseShptLine.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Posted Whse. Shipment Line",0,
          PostedWhseShptLine.TABLECAPTION,PostedWhseShptLine.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindPostedWhseRcptLine@59();
    BEGIN
      IF PostedWhseRcptLine.READPERMISSION THEN BEGIN
        PostedWhseRcptLine.RESET;
        PostedWhseRcptLine.SETCURRENTKEY("Posted Source No.","Posting Date");
        PostedWhseRcptLine.SETFILTER("Posted Source No.",DocNoFilter);
        PostedWhseRcptLine.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Posted Whse. Receipt Line",0,
          PostedWhseRcptLine.TABLECAPTION,PostedWhseRcptLine.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindPstdPhysInvtOrderHdr@57();
    BEGIN
      IF PstdPhysInvtOrderHdr.READPERMISSION THEN BEGIN
        PstdPhysInvtOrderHdr.RESET;
        PstdPhysInvtOrderHdr.SETFILTER("No.",DocNoFilter);
        PstdPhysInvtOrderHdr.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,
          DATABASE::"Pstd. Phys. Invt. Order Hdr",0,PstdPhysInvtOrderHdr.TABLECAPTION,PstdPhysInvtOrderHdr.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindTransShptHeader@55();
    BEGIN
      IF TransShptHeader.READPERMISSION THEN BEGIN
        TransShptHeader.RESET;
        TransShptHeader.SETFILTER("No.",DocNoFilter);
        TransShptHeader.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Transfer Shipment Header",0,Text019,TransShptHeader.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindTransRcptHeader@56();
    BEGIN
      IF TransRcptHeader.READPERMISSION THEN BEGIN
        TransRcptHeader.RESET;
        TransRcptHeader.SETFILTER("No.",DocNoFilter);
        TransRcptHeader.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Transfer Receipt Header",0,Text020,TransRcptHeader.COUNT);
      END;
    END;

    LOCAL PROCEDURE UpdateFormAfterFindRecords@15();
    BEGIN
      OnBeforeUpdateFormAfterFindRecords;

      ShowEnable := DocExists;
      PrintEnable := DocExists;
      CurrPage.UPDATE(FALSE);
      DocExists := FINDFIRST;
      IF DocExists THEN;
    END;

    [External]
    PROCEDURE InsertIntoDocEntry@3(VAR TempDocumentEntry@1004 : TEMPORARY Record 265;DocTableID@1000 : Integer;DocType@1003 : Option;DocTableName@1001 : Text[1024];DocNoOfRecords@1002 : Integer);
    BEGIN
      IF DocNoOfRecords = 0 THEN
        EXIT;

      WITH TempDocumentEntry DO BEGIN
        INIT;
        "Entry No." := "Entry No." + 1;
        "Table ID" := DocTableID;
        "Document Type" := DocType;
        "Table Name" := COPYSTR(DocTableName,1,MAXSTRLEN("Table Name"));
        "No. of Records" := DocNoOfRecords;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE NoOfRecords@4(TableID@1000 : Integer) : Integer;
    BEGIN
      SETRANGE("Table ID",TableID);
      IF NOT FINDFIRST THEN
        INIT;
      SETRANGE("Table ID");
      EXIT("No. of Records");
    END;

    LOCAL PROCEDURE SetSource@5(PostingDate@1000 : Date;DocType2@1001 : Text[100];DocNo@1002 : Text[50];SourceType2@1003 : Integer;SourceNo2@1004 : Code[20]);
    BEGIN
      IF SourceType2 = 0 THEN BEGIN
        DocType := '';
        SourceType := '';
        SourceNo := '';
        SourceName := '';
      END ELSE BEGIN
        DocType := DocType2;
        SourceNo := SourceNo2;
        SETRANGE("Document No.",DocNo);
        SETRANGE("Posting Date",PostingDate);
        DocNoFilter := GETFILTER("Document No.");
        PostingDateFilter := GETFILTER("Posting Date");
        CASE SourceType2 OF
          1:
            BEGIN
              SourceType := Cust.TABLECAPTION;
              IF NOT Cust.GET(SourceNo) THEN
                Cust.INIT;
              SourceName := Cust.Name;
            END;
          2:
            BEGIN
              SourceType := Vend.TABLECAPTION;
              IF NOT Vend.GET(SourceNo) THEN
                Vend.INIT;
              SourceName := Vend.Name;
            END;
        END;
      END;
      DocTypeEnable := SourceType2 <> 0;
      SourceTypeEnable := SourceType2 <> 0;
      SourceNoEnable := SourceType2 <> 0;
      SourceNameEnable := SourceType2 <> 0;
    END;

    LOCAL PROCEDURE SetSourceForPurchase@84();
    BEGIN
      IF NoOfRecords(DATABASE::"Vendor Ledger Entry") = 1 THEN BEGIN
        VendLedgEntry.FINDFIRST;
        SetSource(
          VendLedgEntry."Posting Date",FORMAT(VendLedgEntry."Document Type"),VendLedgEntry."Document No.",
          2,VendLedgEntry."Vendor No.");
      END;
      IF NoOfRecords(DATABASE::"Detailed Vendor Ledg. Entry") = 1 THEN BEGIN
        DtldVendLedgEntry.FINDFIRST;
        SetSource(
          DtldVendLedgEntry."Posting Date",FORMAT(DtldVendLedgEntry."Document Type"),DtldVendLedgEntry."Document No.",
          2,DtldVendLedgEntry."Vendor No.");
      END;
      IF NoOfRecords(DATABASE::"Purch. Inv. Header") = 1 THEN BEGIN
        PurchInvHeader.FINDFIRST;
        SetSource(
          PurchInvHeader."Posting Date",FORMAT("Table Name"),PurchInvHeader."No.",
          2,PurchInvHeader."Pay-to Vendor No.");
      END;
      IF NoOfRecords(DATABASE::"Purch. Cr. Memo Hdr.") = 1 THEN BEGIN
        PurchCrMemoHeader.FINDFIRST;
        SetSource(
          PurchCrMemoHeader."Posting Date",FORMAT("Table Name"),PurchCrMemoHeader."No.",
          2,PurchCrMemoHeader."Pay-to Vendor No.");
      END;
      IF NoOfRecords(DATABASE::"Return Shipment Header") = 1 THEN BEGIN
        ReturnShptHeader.FINDFIRST;
        SetSource(
          ReturnShptHeader."Posting Date",FORMAT("Table Name"),ReturnShptHeader."No.",
          2,ReturnShptHeader."Buy-from Vendor No.");
      END;
      IF NoOfRecords(DATABASE::"Purch. Rcpt. Header") = 1 THEN BEGIN
        PurchRcptHeader.FINDFIRST;
        SetSource(
          PurchRcptHeader."Posting Date",FORMAT("Table Name"),PurchRcptHeader."No.",
          2,PurchRcptHeader."Buy-from Vendor No.");
      END;
      IF NoOfRecords(DATABASE::"Posted Whse. Receipt Line") = 1 THEN BEGIN
        PostedWhseRcptLine.FINDFIRST;
        SetSource(
          PostedWhseRcptLine."Posting Date",FORMAT("Table Name"),PostedWhseRcptLine."Posted Source No.",
          2,'');
      END;
      IF NoOfRecords(DATABASE::"Pstd. Phys. Invt. Order Hdr") = 1 THEN BEGIN
        PstdPhysInvtOrderHdr.FINDFIRST;
        SetSource(
          PstdPhysInvtOrderHdr."Posting Date",FORMAT("Table Name"),PstdPhysInvtOrderHdr."No.",
          3,'');
      END;
    END;

    LOCAL PROCEDURE SetSourceForSales@83();
    BEGIN
      IF NoOfRecords(DATABASE::"Cust. Ledger Entry") = 1 THEN BEGIN
        CustLedgEntry.FINDFIRST;
        SetSource(
          CustLedgEntry."Posting Date",FORMAT(CustLedgEntry."Document Type"),CustLedgEntry."Document No.",
          1,CustLedgEntry."Customer No.");
      END;
      IF NoOfRecords(DATABASE::"Detailed Cust. Ledg. Entry") = 1 THEN BEGIN
        DtldCustLedgEntry.FINDFIRST;
        SetSource(
          DtldCustLedgEntry."Posting Date",FORMAT(DtldCustLedgEntry."Document Type"),DtldCustLedgEntry."Document No.",
          1,DtldCustLedgEntry."Customer No.");
      END;
      IF NoOfRecords(DATABASE::"Sales Invoice Header") = 1 THEN BEGIN
        SalesInvHeader.FINDFIRST;
        SetSource(
          SalesInvHeader."Posting Date",FORMAT("Table Name"),SalesInvHeader."No.",
          1,SalesInvHeader."Bill-to Customer No.");
      END;
      IF NoOfRecords(DATABASE::"Sales Cr.Memo Header") = 1 THEN BEGIN
        SalesCrMemoHeader.FINDFIRST;
        SetSource(
          SalesCrMemoHeader."Posting Date",FORMAT("Table Name"),SalesCrMemoHeader."No.",
          1,SalesCrMemoHeader."Bill-to Customer No.");
      END;
      IF NoOfRecords(DATABASE::"Return Receipt Header") = 1 THEN BEGIN
        ReturnRcptHeader.FINDFIRST;
        SetSource(
          ReturnRcptHeader."Posting Date",FORMAT("Table Name"),ReturnRcptHeader."No.",
          1,ReturnRcptHeader."Sell-to Customer No.");
      END;
      IF NoOfRecords(DATABASE::"Sales Shipment Header") = 1 THEN BEGIN
        SalesShptHeader.FINDFIRST;
        SetSource(
          SalesShptHeader."Posting Date",FORMAT("Table Name"),SalesShptHeader."No.",
          1,SalesShptHeader."Sell-to Customer No.");
      END;
      IF NoOfRecords(DATABASE::"Posted Whse. Shipment Line") = 1 THEN BEGIN
        PostedWhseShptLine.FINDFIRST;
        SetSource(
          PostedWhseShptLine."Posting Date",FORMAT("Table Name"),PostedWhseShptLine."Posted Source No.",
          1,PostedWhseShptLine."Destination No.");
      END;
      IF NoOfRecords(DATABASE::"Issued Reminder Header") = 1 THEN BEGIN
        IssuedReminderHeader.FINDFIRST;
        SetSource(
          IssuedReminderHeader."Posting Date",FORMAT("Table Name"),IssuedReminderHeader."No.",
          1,IssuedReminderHeader."Customer No.");
      END;
      IF NoOfRecords(DATABASE::"Issued Fin. Charge Memo Header") = 1 THEN BEGIN
        IssuedFinChrgMemoHeader.FINDFIRST;
        SetSource(
          IssuedFinChrgMemoHeader."Posting Date",FORMAT("Table Name"),IssuedFinChrgMemoHeader."No.",
          1,IssuedFinChrgMemoHeader."Customer No.");
      END;
    END;

    LOCAL PROCEDURE SetSourceForService@82();
    BEGIN
      IF NoOfRecords(DATABASE::"Service Ledger Entry") = 1 THEN BEGIN
        ServLedgerEntry.FINDFIRST;
        IF ServLedgerEntry.Type = ServLedgerEntry.Type::"Service Contract" THEN
          SetSource(
            ServLedgerEntry."Posting Date",FORMAT(ServLedgerEntry."Document Type"),ServLedgerEntry."Document No.",
            2,ServLedgerEntry."Service Contract No.")
        ELSE
          SetSource(
            ServLedgerEntry."Posting Date",FORMAT(ServLedgerEntry."Document Type"),ServLedgerEntry."Document No.",
            2,ServLedgerEntry."Service Order No.")
      END;
      IF NoOfRecords(DATABASE::"Warranty Ledger Entry") = 1 THEN BEGIN
        WarrantyLedgerEntry.FINDFIRST;
        SetSource(
          WarrantyLedgerEntry."Posting Date",'',WarrantyLedgerEntry."Document No.",
          2,WarrantyLedgerEntry."Service Order No.")
      END;
    END;

    LOCAL PROCEDURE SetSourceForServiceDoc@79();
    BEGIN
      IF NoOfRecords(DATABASE::"Service Invoice Header") = 1 THEN BEGIN
        ServInvHeader.FINDFIRST;
        SetSource(
          ServInvHeader."Posting Date",FORMAT("Table Name"),ServInvHeader."No.",
          1,ServInvHeader."Bill-to Customer No.");
      END;
      IF NoOfRecords(DATABASE::"Service Cr.Memo Header") = 1 THEN BEGIN
        ServCrMemoHeader.FINDFIRST;
        SetSource(
          ServCrMemoHeader."Posting Date",FORMAT("Table Name"),ServCrMemoHeader."No.",
          1,ServCrMemoHeader."Bill-to Customer No.");
      END;
      IF NoOfRecords(DATABASE::"Service Shipment Header") = 1 THEN BEGIN
        ServShptHeader.FINDFIRST;
        SetSource(
          ServShptHeader."Posting Date",FORMAT("Table Name"),ServShptHeader."No.",
          1,ServShptHeader."Customer No.");
      END;
    END;

    LOCAL PROCEDURE ShowRecords@6();
    VAR
      IsHandled@1000 : Boolean;
      TempItemLedgEntry@1100528500 : TEMPORARY Record 32;
      ItemTrackingDocMgt@1100528501 : Codeunit 6503;
    BEGIN
      IsHandled := FALSE;
      OnBeforeNavigateShowRecords(
        "Table ID",DocNoFilter,PostingDateFilter,ItemTrackingSearch,Rec,IsHandled,
        SalesInvHeader,SalesCrMemoHeader,PurchInvHeader,PurchCrMemoHeader,ServInvHeader,ServCrMemoHeader);
      IF IsHandled THEN
        EXIT;

      IF ItemTrackingSearch THEN
        ItemTrackingNavigateMgt.Show("Table ID")
      ELSE
        CASE "Table ID" OF
          DATABASE::"Incoming Document":
            PAGE.RUN(PAGE::"Incoming Document",IncomingDocument);
          DATABASE::"Sales Header":
            ShowSalesHeaderRecords;
          DATABASE::"Sales Invoice Header":
            IF "No. of Records" = 1 THEN
              PAGE.RUN(PAGE::"Posted Sales Invoice",SalesInvHeader)
            ELSE
              PAGE.RUN(PAGE::"Posted Sales Invoices",SalesInvHeader);
          DATABASE::"Sales Cr.Memo Header":
            IF "No. of Records" = 1 THEN
              PAGE.RUN(PAGE::"Posted Sales Credit Memo",SalesCrMemoHeader)
            ELSE
              PAGE.RUN(PAGE::"Posted Sales Credit Memos",SalesCrMemoHeader);
          DATABASE::"Return Receipt Header":
            IF "No. of Records" = 1 THEN
              PAGE.RUN(PAGE::"Posted Return Receipt",ReturnRcptHeader)
            ELSE
              PAGE.RUN(0,ReturnRcptHeader);
          DATABASE::"Sales Shipment Header":
            IF "No. of Records" = 1 THEN
              PAGE.RUN(PAGE::"Posted Sales Shipment",SalesShptHeader)
            ELSE
              PAGE.RUN(0,SalesShptHeader);
          DATABASE::"Issued Reminder Header":
            IF "No. of Records" = 1 THEN
              PAGE.RUN(PAGE::"Issued Reminder",IssuedReminderHeader)
            ELSE
              PAGE.RUN(0,IssuedReminderHeader);
          DATABASE::"Issued Fin. Charge Memo Header":
            IF "No. of Records" = 1 THEN
              PAGE.RUN(PAGE::"Issued Finance Charge Memo",IssuedFinChrgMemoHeader)
            ELSE
              PAGE.RUN(0,IssuedFinChrgMemoHeader);
          DATABASE::"Purch. Inv. Header":
            IF "No. of Records" = 1 THEN
              PAGE.RUN(PAGE::"Posted Purchase Invoice",PurchInvHeader)
            ELSE
              PAGE.RUN(PAGE::"Posted Purchase Invoices",PurchInvHeader);
          DATABASE::"Purch. Cr. Memo Hdr.":
            IF "No. of Records" = 1 THEN
              PAGE.RUN(PAGE::"Posted Purchase Credit Memo",PurchCrMemoHeader)
            ELSE
              PAGE.RUN(PAGE::"Posted Purchase Credit Memos",PurchCrMemoHeader);
          DATABASE::"Return Shipment Header":
            IF "No. of Records" = 1 THEN
              PAGE.RUN(PAGE::"Posted Return Shipment",ReturnShptHeader)
            ELSE
              PAGE.RUN(0,ReturnShptHeader);
          DATABASE::"Purch. Rcpt. Header":
            IF "No. of Records" = 1 THEN
              PAGE.RUN(PAGE::"Posted Purchase Receipt",PurchRcptHeader)
            ELSE
              PAGE.RUN(0,PurchRcptHeader);
          DATABASE::"Production Order":
            PAGE.RUN(0,ProductionOrderHeader);
          DATABASE::"Posted Assembly Header":
            IF "No. of Records" = 1 THEN
              PAGE.RUN(PAGE::"Posted Assembly Order",PostedAssemblyHeader)
            ELSE
              PAGE.RUN(0,PostedAssemblyHeader);
          DATABASE::"Transfer Shipment Header":
            IF "No. of Records" = 1 THEN
              PAGE.RUN(PAGE::"Posted Transfer Shipment",TransShptHeader)
            ELSE
              PAGE.RUN(0,TransShptHeader);
          DATABASE::"Transfer Receipt Header":
            IF "No. of Records" = 1 THEN
              PAGE.RUN(PAGE::"Posted Transfer Receipt",TransRcptHeader)
            ELSE
              PAGE.RUN(0,TransRcptHeader);
          DATABASE::"Posted Whse. Shipment Line":
            PAGE.RUN(0,PostedWhseShptLine);
          DATABASE::"Posted Whse. Receipt Line":
            PAGE.RUN(0,PostedWhseRcptLine);
          DATABASE::"G/L Entry":
            PAGE.RUN(0,GLEntry);
          DATABASE::"VAT Entry":
            PAGE.RUN(0,VATEntry);
          DATABASE::"Detailed Cust. Ledg. Entry":
            PAGE.RUN(0,DtldCustLedgEntry);
          DATABASE::"Cust. Ledger Entry":
            PAGE.RUN(0,CustLedgEntry);
          DATABASE::"Reminder/Fin. Charge Entry":
            PAGE.RUN(0,ReminderEntry);
          DATABASE::"Vendor Ledger Entry":
            PAGE.RUN(0,VendLedgEntry);
          DATABASE::"Detailed Vendor Ledg. Entry":
            PAGE.RUN(0,DtldVendLedgEntry);
          DATABASE::"Employee Ledger Entry":
            ShowEmployeeLedgerEntries;
          DATABASE::"Detailed Employee Ledger Entry":
            ShowDetailedEmployeeLedgerEntries;
          DATABASE::"Item Ledger Entry":
            PAGE.RUN(0,ItemLedgEntry);
          DATABASE::"Value Entry":
            PAGE.RUN(0,ValueEntry);
          DATABASE::"Phys. Inventory Ledger Entry":
            PAGE.RUN(0,PhysInvtLedgEntry);
          DATABASE::"Res. Ledger Entry":
            PAGE.RUN(0,ResLedgEntry);
          DATABASE::"Job Ledger Entry":
            PAGE.RUN(0,JobLedgEntry);
          DATABASE::"Job WIP Entry":
            PAGE.RUN(0,JobWIPEntry);
          DATABASE::"Job WIP G/L Entry":
            PAGE.RUN(0,JobWIPGLEntry);
          DATABASE::"Bank Account Ledger Entry":
            PAGE.RUN(0,BankAccLedgEntry);
          DATABASE::"Check Ledger Entry":
            PAGE.RUN(0,CheckLedgEntry);
          DATABASE::"FA Ledger Entry":
            PAGE.RUN(0,FALedgEntry);
          DATABASE::"Maintenance Ledger Entry":
            PAGE.RUN(0,MaintenanceLedgEntry);
          DATABASE::"Ins. Coverage Ledger Entry":
            PAGE.RUN(0,InsuranceCovLedgEntry);
          DATABASE::"Inward Reg. Entry":  //NAVSE
            PAGE.RUN(0,InwRegEntry);  //NAVSE
          // ExFlow ->
          DATABASE::"EX Posted Document":
            IF "No. of Records" = 1 THEN
              PAGE.RUN(PAGE::"Posted Document Head",EXPostedDocument)
            ELSE
              PAGE.RUN(0,EXPostedDocument);
          // <- ExFlow
          DATABASE::"Capacity Ledger Entry":
            PAGE.RUN(0,CapacityLedgEntry);
          DATABASE::"Warehouse Entry":
            PAGE.RUN(0,WhseEntry);
          DATABASE::"Service Header":
            ShowServiceHeaderRecords;
          DATABASE::"Service Invoice Header":
            IF "No. of Records" = 1 THEN
              PAGE.RUN(PAGE::"Posted Service Invoice",ServInvHeader)
            ELSE
              PAGE.RUN(0,ServInvHeader);
          DATABASE::"Service Cr.Memo Header":
            IF "No. of Records" = 1 THEN
              PAGE.RUN(PAGE::"Posted Service Credit Memo",ServCrMemoHeader)
            ELSE
              PAGE.RUN(0,ServCrMemoHeader);
          DATABASE::"Service Shipment Header":
            IF "No. of Records" = 1 THEN
              PAGE.RUN(PAGE::"Posted Service Shipment",ServShptHeader)
            ELSE
              PAGE.RUN(0,ServShptHeader);
          DATABASE::"Service Ledger Entry":
            PAGE.RUN(0,ServLedgerEntry);
          DATABASE::"Warranty Ledger Entry":
            PAGE.RUN(0,WarrantyLedgerEntry);
          DATABASE::"Cost Entry":
            PAGE.RUN(0,CostEntry);
          DATABASE::"Pstd. Phys. Invt. Order Hdr":
            PAGE.RUN(0,PstdPhysInvtOrderHdr);

          //**4PS.sn
          DATABASE::"Posted Hour Header":
            PAGE.RUN(0,PostedHoursHeader);
          DATABASE::"Posted Hour Line":
            PAGE.RUN(0,PostedHoursLine);
          DATABASE::"Leave Ledger Entry (4PS)":
            PAGE.RUN(0,LeaveLedgEntry);
          DATABASE::"Commitment Entry":
            PAGE.RUN(0,CommitmentEntry);
          DATABASE::"Requisition Entry":
            PAGE.RUN(0,RequisitionEntry);
          DATABASE::"Plant Ledger Entry":
            PAGE.RUN(0,PlantLedgerEntry);
          DATABASE::"Plant Rate Component Entry":
            PAGE.RUN(0,PlantRateCompEntry);
          DATABASE::"Service-Ledger Entry":
            PAGE.RUN(0,SMLedgerEntry);
          DATABASE::"Retention Ledger Entry":
            PAGE.RUN(0,RetentionLedgEntry);
          DATABASE::"Detailed Retention Ledg. Entry":
            PAGE.RUN(0,DtldRetentionLedgEntry);
          DATABASE::"Project Inventory Entry":
            PAGE.RUN(0,ProjectInventoryEntry);
          DATABASE::"NS Item Tracking Entry":
            BEGIN
              IF NSItemTrackingEntry.FINDSET THEN
                REPEAT
                  ItemTrackingDocMgt.TransferNSItemTracking(NSItemTrackingEntry, TempItemLedgEntry);
                  TempItemLedgEntry."Entry No." := NSItemTrackingEntry."Entry No.";
                  TempItemLedgEntry.INSERT;
                UNTIL NSItemTrackingEntry.NEXT = 0;
              PAGE.RUNMODAL(PAGE::"Item Tracking Entries",TempItemLedgEntry);
            END;
          DATABASE::"Intercompany Ledger Entry":
            PAGE.RUN(0,IntercompanyLedgerEntry);
          DATABASE::"Posted UAR Hour Acc. Line":
            PAGE.RUN(0,UarPostedHourAccLineRec);
          DATABASE::"Loan Ledger Entry":
            PAGE.RUN(0,LoanLedgerEntry);
          //**4PS.en
        END;

      OnAfterNavigateShowRecords(
        "Table ID",DocNoFilter,PostingDateFilter,ItemTrackingSearch,Rec,
        SalesInvHeader,SalesCrMemoHeader,PurchInvHeader,PurchCrMemoHeader,ServInvHeader,ServCrMemoHeader);
    END;

    LOCAL PROCEDURE ShowSalesHeaderRecords@28();
    BEGIN
      TESTFIELD("Table ID",DATABASE::"Sales Header");

      CASE "Document Type" OF
        "Document Type"::Order:
          IF "No. of Records" = 1 THEN
            PAGE.RUN(PAGE::"Sales Order",SOSalesHeader)
          ELSE
            PAGE.RUN(0,SOSalesHeader);
        "Document Type"::Invoice:
          IF "No. of Records" = 1 THEN
            PAGE.RUN(PAGE::"Sales Invoice",SISalesHeader)
          ELSE
            PAGE.RUN(0,SISalesHeader);
        "Document Type"::"Return Order":
          IF "No. of Records" = 1 THEN
            PAGE.RUN(PAGE::"Sales Return Order",SROSalesHeader)
          ELSE
            PAGE.RUN(0,SROSalesHeader);
        "Document Type"::"Credit Memo":
          IF "No. of Records" = 1 THEN
            PAGE.RUN(PAGE::"Sales Credit Memo",SCMSalesHeader)
          ELSE
            PAGE.RUN(0,SCMSalesHeader);
      END;
    END;

    LOCAL PROCEDURE ShowServiceHeaderRecords@24();
    BEGIN
      TESTFIELD("Table ID",DATABASE::"Service Header");

      CASE "Document Type" OF
        "Document Type"::Order:
          IF "No. of Records" = 1 THEN
            PAGE.RUN(PAGE::"Service Order",SOServHeader)
          ELSE
            PAGE.RUN(0,SOServHeader);
        "Document Type"::Invoice:
          IF "No. of Records" = 1 THEN
            PAGE.RUN(PAGE::"Service Invoice",SIServHeader)
          ELSE
            PAGE.RUN(0,SIServHeader);
        "Document Type"::"Credit Memo":
          IF "No. of Records" = 1 THEN
            PAGE.RUN(PAGE::"Service Credit Memo",SCMServHeader)
          ELSE
            PAGE.RUN(0,SCMServHeader);
      END;
    END;

    LOCAL PROCEDURE ShowEmployeeLedgerEntries@39();
    BEGIN
      PAGE.RUN(PAGE::"Employee Ledger Entries",EmplLedgEntry);
    END;

    LOCAL PROCEDURE ShowDetailedEmployeeLedgerEntries@40();
    BEGIN
      PAGE.RUN(PAGE::"Detailed Empl. Ledger Entries",DtldEmplLedgEntry);
    END;

    LOCAL PROCEDURE SetPostingDate@9(PostingDate@1000 : Text);
    BEGIN
      TextManagement.MakeDateFilter(PostingDate);
      SETFILTER("Posting Date",PostingDate);
      PostingDateFilter := GETFILTER("Posting Date");
    END;

    LOCAL PROCEDURE SetDocNo@10(DocNo@1000 : Text);
    BEGIN
      SETFILTER("Document No.",DocNo);
      DocNoFilter := GETFILTER("Document No.");
      PostingDateFilter := GETFILTER("Posting Date");
    END;

    LOCAL PROCEDURE ClearSourceInfo@7();
    BEGIN
      IF DocExists THEN BEGIN
        DocExists := FALSE;
        DELETEALL;
        ShowEnable := FALSE;
        SetSource(0D,'','',0,'');
        CurrPage.UPDATE(FALSE);
      END;
    END;

    LOCAL PROCEDURE MakeExtFilter@11(VAR DateFilter@1000 : Text;AddDate@1001 : Date;VAR DocNoFilter@1002 : Text;AddDocNo@1003 : Code[20]);
    BEGIN
      IF DateFilter = '' THEN
        DateFilter := FORMAT(AddDate)
      ELSE
        IF STRPOS(DateFilter,FORMAT(AddDate)) = 0 THEN
          IF MAXSTRLEN(DateFilter) >= STRLEN(DateFilter + '|' + FORMAT(AddDate)) THEN
            DateFilter := DateFilter + '|' + FORMAT(AddDate)
          ELSE
            TooLongFilter;

      IF DocNoFilter = '' THEN
        DocNoFilter := AddDocNo
      ELSE
        IF STRPOS(DocNoFilter,AddDocNo) = 0 THEN
          IF MAXSTRLEN(DocNoFilter) >= STRLEN(DocNoFilter + '|' + AddDocNo) THEN
            DocNoFilter := DocNoFilter + '|' + AddDocNo
          ELSE
            TooLongFilter;
    END;

    LOCAL PROCEDURE FindPush@13();
    BEGIN
      IF (DocNoFilter = '') AND (PostingDateFilter = '') AND
         (NOT ItemTrackingSearch) AND
         ((ContactType <> 0) OR (ContactNo <> '') OR (ExtDocNo <> ''))
      THEN
        FindExtRecords
      ELSE
        IF ItemTrackingSearch AND
           (DocNoFilter = '') AND (PostingDateFilter = '') AND
           (ContactType = 0) AND (ContactNo = '') AND (ExtDocNo = '')
        THEN
          FindTrackingRecords
        ELSE
          FindRecords;
    END;

    LOCAL PROCEDURE TooLongFilter@12();
    BEGIN
      IF ContactNo = '' THEN
        ERROR(Text015);

      ERROR(Text016);
    END;

    LOCAL PROCEDURE FindUnpostedSalesDocs@14(DocType@1001 : Option;DocTableName@1003 : Text[100];VAR SalesHeader@1000 : Record 36);
    BEGIN
      SalesHeader."SECURITYFILTERING"(SECURITYFILTER::Filtered);
      IF SalesHeader.READPERMISSION THEN BEGIN
        SalesHeader.RESET;
        SalesHeader.SETCURRENTKEY("Sell-to Customer No.","External Document No.");
        SalesHeader.SETFILTER("Sell-to Customer No.",ContactNo);
        SalesHeader.SETFILTER("External Document No.",ExtDocNo);
        SalesHeader.SETRANGE("Document Type",DocType);
        InsertIntoDocEntry(Rec,DATABASE::"Sales Header",DocType,DocTableName,SalesHeader.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindUnpostedServDocs@16(DocType@1001 : Option;DocTableName@1003 : Text[100];VAR ServHeader@1000 : Record 5900);
    BEGIN
      ServHeader."SECURITYFILTERING"(SECURITYFILTER::Filtered);
      IF ServHeader.READPERMISSION THEN
        IF ExtDocNo = '' THEN BEGIN
          ServHeader.RESET;
          ServHeader.SETCURRENTKEY("Customer No.");
          ServHeader.SETFILTER("Customer No.",ContactNo);
          ServHeader.SETRANGE("Document Type",DocType);
          InsertIntoDocEntry(Rec,DATABASE::"Service Header",DocType,DocTableName,ServHeader.COUNT);
        END;
    END;

    LOCAL PROCEDURE FindTrackingRecords@22();
    VAR
      DocNoOfRecords@1000 : Integer;
    BEGIN
      Window.OPEN(Text002);
      DELETEALL;
      "Entry No." := 0;

      CLEAR(ItemTrackingNavigateMgt);
      ItemTrackingNavigateMgt.FindTrackingRecords(SerialNoFilter,LotNoFilter,'','');

      ItemTrackingNavigateMgt.Collect(TempRecordBuffer);
      TempRecordBuffer.SETCURRENTKEY("Table No.","Record Identifier");
      IF TempRecordBuffer.FIND('-') THEN
        REPEAT
          TempRecordBuffer.SETRANGE("Table No.",TempRecordBuffer."Table No.");

          DocNoOfRecords := 0;
          IF TempRecordBuffer.FIND('-') THEN
            REPEAT
              TempRecordBuffer.SETRANGE("Record Identifier",TempRecordBuffer."Record Identifier");
              TempRecordBuffer.FIND('+');
              TempRecordBuffer.SETRANGE("Record Identifier");
              DocNoOfRecords += 1;
            UNTIL TempRecordBuffer.NEXT = 0;

          InsertIntoDocEntry(Rec,TempRecordBuffer."Table No.",0,TempRecordBuffer."Table Name",DocNoOfRecords);

          TempRecordBuffer.SETRANGE("Table No.");
        UNTIL TempRecordBuffer.NEXT = 0;

      OnAfterNavigateFindTrackingRecords(Rec,SerialNoFilter,LotNoFilter);

      DocExists := FIND('-');

      UpdateFormAfterFindRecords;
      Window.CLOSE;
    END;

    LOCAL PROCEDURE GetDocumentCount@71() DocCount : Integer;
    BEGIN
      DocCount :=
        NoOfRecords(DATABASE::"Sales Invoice Header") + NoOfRecords(DATABASE::"Sales Cr.Memo Header") +
        NoOfRecords(DATABASE::"Sales Shipment Header") + NoOfRecords(DATABASE::"Issued Reminder Header") +
        NoOfRecords(DATABASE::"Issued Fin. Charge Memo Header") + NoOfRecords(DATABASE::"Purch. Inv. Header") +
        NoOfRecords(DATABASE::"Return Shipment Header") + NoOfRecords(DATABASE::"Return Receipt Header") +
        NoOfRecords(DATABASE::"Purch. Cr. Memo Hdr.") + NoOfRecords(DATABASE::"Purch. Rcpt. Header") +
        NoOfRecords(DATABASE::"Service Invoice Header") + NoOfRecords(DATABASE::"Service Cr.Memo Header") +
        NoOfRecords(DATABASE::"Service Shipment Header") +
        NoOfRecords(DATABASE::"Transfer Shipment Header") + NoOfRecords(DATABASE::"Transfer Receipt Header");

      OnAfterGetDocumentCount(DocCount);
    END;

    [External]
    PROCEDURE SetTracking@20(SerialNo@1000 : Code[50];LotNo@1001 : Code[50]);
    BEGIN
      NewSerialNo := SerialNo;
      NewLotNo := LotNo;
    END;

    LOCAL PROCEDURE ItemTrackingSearch@19() : Boolean;
    BEGIN
      EXIT((SerialNoFilter <> '') OR (LotNoFilter <> ''));
    END;

    LOCAL PROCEDURE ClearTrackingInfo@17();
    BEGIN
      SerialNoFilter := '';
      LotNoFilter := '';
    END;

    LOCAL PROCEDURE ClearInfo@18();
    BEGIN
      SetDocNo('');
      SetPostingDate('');
      ContactType := ContactType::" ";
      ContactNo := '';
      ExtDocNo := '';
    END;

    LOCAL PROCEDURE DocNoFilterOnAfterValidate@19079756();
    BEGIN
      ClearSourceInfo;
    END;

    LOCAL PROCEDURE PostingDateFilterOnAfterValida@19064000();
    BEGIN
      ClearSourceInfo;
    END;

    LOCAL PROCEDURE ExtDocNoOnAfterValidate@19035593();
    BEGIN
      ClearSourceInfo;
    END;

    LOCAL PROCEDURE ContactTypeOnAfterValidate@19057702();
    BEGIN
      ClearSourceInfo;
    END;

    LOCAL PROCEDURE ContactNoOnAfterValidate@19009577();
    BEGIN
      ClearSourceInfo;
    END;

    LOCAL PROCEDURE SerialNoFilterOnAfterValidate@19049364();
    BEGIN
      ClearSourceInfo;
    END;

    LOCAL PROCEDURE LotNoFilterOnAfterValidate@19054399();
    BEGIN
      ClearSourceInfo;
    END;

    [External]
    PROCEDURE FindRecordsOnOpen@21();
    BEGIN
      IF (NewDocNo = '') AND (NewPostingDate = 0D) AND (NewSerialNo = '') AND (NewLotNo = '') THEN BEGIN
        DELETEALL;
        ShowEnable := FALSE;
        PrintEnable := FALSE;
        SetSource(0D,'','',0,'');
      END ELSE
        IF (NewSerialNo <> '') OR (NewLotNo <> '') THEN BEGIN
          SetSource(0D,'','',0,'');
          SETRANGE("Serial No. Filter",NewSerialNo);
          SETRANGE("Lot No. Filter",NewLotNo);
          SerialNoFilter := GETFILTER("Serial No. Filter");
          LotNoFilter := GETFILTER("Lot No. Filter");
          ClearInfo;
          FindTrackingRecords;
        END ELSE BEGIN
          SETRANGE("Document No.",NewDocNo);
          //**4PS.sn
          IF NewPostingDate = 0D THEN
            SETRANGE("Posting Date")
          ELSE
          //**4PS.en
            SETRANGE("Posting Date",NewPostingDate);
          DocNoFilter := GETFILTER("Document No.");
          PostingDateFilter := GETFILTER("Posting Date");
          ContactType := ContactType::" ";
          ContactNo := '';
          ExtDocNo := '';
          ClearTrackingInfo;
          FindRecords;
        END;
    END;

    [External]
    PROCEDURE UpdateNavigateForm@23(UpdateFormFrom@1000 : Boolean);
    BEGIN
      UpdateForm := UpdateFormFrom;
    END;

    [External]
    PROCEDURE ReturnDocumentEntry@25(VAR TempDocumentEntry@1000 : TEMPORARY Record 265);
    BEGIN
      SETRANGE("Table ID");  // Clear filter.
      FINDSET;
      REPEAT
        TempDocumentEntry.INIT;
        TempDocumentEntry := Rec;
        TempDocumentEntry.INSERT;
      UNTIL NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateFindByGroupsVisibility@34();
    BEGIN
      DocumentVisible := FALSE;
      BusinessContactVisible := FALSE;
      ItemReferenceVisible := FALSE;

      CASE FindBasedOn OF
        FindBasedOn::Document:
          DocumentVisible := TRUE;
        FindBasedOn::"Business Contact":
          BusinessContactVisible := TRUE;
        FindBasedOn::"Item Reference":
          ItemReferenceVisible := TRUE;
      END;

      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE FilterSelectionChanged@37();
    BEGIN
      FilterSelectionChangedTxtVisible := TRUE;
    END;

    LOCAL PROCEDURE GetCaptionText@48() : Text;
    BEGIN
      IF "Table Name" <> '' THEN
        EXIT(STRSUBSTNO(PageCaptionTxt,"Table Name"));

      EXIT('');
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterFindRecords@35(VAR DocumentEntry@1000 : Record 265;DocNoFilter@1001 : Text;PostingDateFilter@1002 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterGetDocumentCount@72(VAR DocCount@1000 : Integer);
    BEGIN
    END;

    [Integration(DEFAULT,TRUE)]
    LOCAL PROCEDURE OnAfterNavigateFindRecords@31(VAR DocumentEntry@1000 : Record 265;DocNoFilter@1001 : Text;PostingDateFilter@1002 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterNavigateFindTrackingRecords@33(VAR DocumentEntry@1000 : Record 265;SerialNoFilter@1001 : Text;LotNoFilter@1002 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterNavigateShowRecords@32(TableID@1001 : Integer;DocNoFilter@1002 : Text;PostingDateFilter@1003 : Text;ItemTrackingSearch@1000 : Boolean;VAR TempDocumentEntry@1004 : TEMPORARY Record 265;SalesInvoiceHeader@1005 : Record 112;SalesCrMemoHeader@1006 : Record 114;PurchInvHeader@1007 : Record 122;PurchCrMemoHdr@1008 : Record 124;ServiceInvoiceHeader@1009 : Record 5992;ServiceCrMemoHeader@1010 : Record 5994);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeFindRecords@52(VAR HideDialog@1000 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeNavigateShowRecords@30(TableID@1003 : Integer;DocNoFilter@1002 : Text;PostingDateFilter@1001 : Text;ItemTrackingSearch@1000 : Boolean;VAR TempDocumentEntry@1004 : TEMPORARY Record 265;VAR IsHandled@1005 : Boolean;SalesInvoiceHeader@1011 : Record 112;SalesCrMemoHeader@1010 : Record 114;PurchInvHeader@1009 : Record 122;PurchCrMemoHdr@1008 : Record 124;ServiceInvoiceHeader@1007 : Record 5992;ServiceCrMemoHeader@1006 : Record 5994);
    BEGIN
    END;

    [Integration(TRUE,TRUE)]
    LOCAL PROCEDURE OnBeforeUpdateFormAfterFindRecords@77();
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnFindRecordsOnAfterSetSource@60(VAR DocumentEntry@1000 : Record 265;VAR PostingDate@1001 : Date;VAR DocType2@1002 : Text[100];VAR DocNo@1003 : Code[20];VAR SourceType2@1004 : Integer;VAR SourceNo@1005 : Code[20];VAR DocNoFilter@1006 : Text;VAR PostingDateFilter@1007 : Text;VAR IsHandled@1008 : Boolean);
    BEGIN
    END;

    LOCAL PROCEDURE Find4PSEntries@1100525000();
    VAR
      FPSLicenseManagement@1100525000 : Codeunit 11229289;
    BEGIN
      //**4PS
      IF FPSLicenseManagement.LicenseAndReadPermissionForTable(PostedHoursHeader) THEN BEGIN
        PostedHoursHeader.RESET;
        PostedHoursHeader.SETCURRENTKEY("Document No.");
        PostedHoursHeader.SETFILTER("Document No.",DocNoFilter);
        PostedHoursHeader.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Posted Hour Header",0,PostedHoursHeader.TABLECAPTION,PostedHoursHeader.COUNT);
      END;
      IF FPSLicenseManagement.LicenseAndReadPermissionForTable(PostedHoursLine) THEN BEGIN
        PostedHoursLine.RESET;
        PostedHoursLine.SETCURRENTKEY("Document No.");
        PostedHoursLine.SETFILTER("Document No.",DocNoFilter);
        PostedHoursLine.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Posted Hour Line",0,PostedHoursLine.TABLECAPTION,PostedHoursLine.COUNT);
      END;
      IF FPSLicenseManagement.LicenseAndReadPermissionForTable(UarPostedHourAccLineRec) THEN BEGIN
        UarPostedHourAccLineRec.RESET;
        UarPostedHourAccLineRec.SETCURRENTKEY("Document No.","Posting Date");
        UarPostedHourAccLineRec.SETFILTER("Document No.",DocNoFilter);
        UarPostedHourAccLineRec.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Posted UAR Hour Acc. Line",0,UarPostedHourAccLineRec.TABLECAPTION,UarPostedHourAccLineRec.COUNT);
      END;
      IF FPSLicenseManagement.LicenseAndReadPermissionForTable(LeaveLedgEntry) THEN BEGIN
        LeaveLedgEntry.RESET;
        LeaveLedgEntry.SETCURRENTKEY("Document No.");
        LeaveLedgEntry.SETFILTER("Document No.",DocNoFilter);
        LeaveLedgEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Leave Ledger Entry (4PS)",0,LeaveLedgEntry.TABLECAPTION,LeaveLedgEntry.COUNT);
      END;
      IF FPSLicenseManagement.LicenseAndReadPermissionForTable(CommitmentEntry) THEN BEGIN
        CommitmentEntry.RESET;
        CommitmentEntry.SETCURRENTKEY("Document No.");
        CommitmentEntry.SETFILTER("Document No.",DocNoFilter);
        CommitmentEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Commitment Entry",0,CommitmentEntry.TABLECAPTION,CommitmentEntry.COUNT);
      END;
      IF FPSLicenseManagement.LicenseAndReadPermissionForTable(RequisitionEntry) THEN BEGIN
        RequisitionEntry.RESET;
        RequisitionEntry.SETCURRENTKEY("Document No.");
        RequisitionEntry.SETFILTER("Document No.",DocNoFilter);
        RequisitionEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Requisition Entry",0,RequisitionEntry.TABLECAPTION,RequisitionEntry.COUNT);
      END;
      IF FPSLicenseManagement.LicenseAndReadPermissionForTable(PlantLedgerEntry) THEN BEGIN
        PlantLedgerEntry.RESET;
        PlantLedgerEntry.SETCURRENTKEY("Document No.","Posting Date");
        PlantLedgerEntry.SETFILTER("Document No.",DocNoFilter);
        PlantLedgerEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Plant Ledger Entry",0,PlantLedgerEntry.TABLECAPTION,PlantLedgerEntry.COUNT);
      END;
      IF FPSLicenseManagement.LicenseAndReadPermissionForTable(PlantRateCompEntry) THEN BEGIN
        PlantRateCompEntry.RESET;
        PlantRateCompEntry.SETCURRENTKEY("Document No.","Posting Date");
        PlantRateCompEntry.SETFILTER("Document No.",DocNoFilter);
        PlantRateCompEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Plant Rate Component Entry",0,PlantRateCompEntry.TABLECAPTION,PlantRateCompEntry.COUNT);
      END;
      IF FPSLicenseManagement.LicenseAndReadPermissionForTable(SMLedgerEntry) THEN BEGIN
        SMLedgerEntry.RESET;
        SMLedgerEntry.SETCURRENTKEY("Document No.","Posting Date");
        SMLedgerEntry.SETFILTER("Document No.",DocNoFilter);
        SMLedgerEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Service-Ledger Entry",0,SMLedgerEntry.TABLECAPTION,SMLedgerEntry.COUNT);
      END;
      IF FPSLicenseManagement.LicenseAndReadPermissionForTable(RetentionLedgEntry) THEN BEGIN
        RetentionLedgEntry.RESET;
        RetentionLedgEntry.SETCURRENTKEY("Document No.");
        RetentionLedgEntry.SETFILTER("Document No.",DocNoFilter);
        RetentionLedgEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Retention Ledger Entry",0,RetentionLedgEntry.TABLECAPTION,RetentionLedgEntry.COUNT);
      END;
      IF FPSLicenseManagement.LicenseAndReadPermissionForTable(DtldRetentionLedgEntry) THEN BEGIN
        DtldRetentionLedgEntry.RESET;
        DtldRetentionLedgEntry.SETCURRENTKEY("Document No.");
        DtldRetentionLedgEntry.SETFILTER("Document No.",DocNoFilter);
        DtldRetentionLedgEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Detailed Retention Ledg. Entry",0,DtldRetentionLedgEntry.TABLECAPTION,DtldRetentionLedgEntry.COUNT);
      END;
      IF FPSLicenseManagement.LicenseAndReadPermissionForTable(ProjectInventoryEntry) THEN BEGIN
        ProjectInventoryEntry.RESET;
        ProjectInventoryEntry.SETCURRENTKEY("Document No.");
        ProjectInventoryEntry.SETFILTER("Document No.",DocNoFilter);
        ProjectInventoryEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Project Inventory Entry",0,ProjectInventoryEntry.TABLECAPTION,ProjectInventoryEntry.COUNT);
      END;
      IF FPSLicenseManagement.LicenseAndReadPermissionForTable(NSItemTrackingEntry) THEN BEGIN
        NSItemTrackingEntry.RESET;
        NSItemTrackingEntry.SETCURRENTKEY("Document No.");
        NSItemTrackingEntry.SETFILTER("Document No.",DocNoFilter);
        NSItemTrackingEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"NS Item Tracking Entry",0,NSItemTrackingEntry.TABLECAPTION,NSItemTrackingEntry.COUNT);
      END;
      IF FPSLicenseManagement.LicenseAndReadPermissionForTable(IntercompanyLedgerEntry) THEN BEGIN
        IntercompanyLedgerEntry.RESET;
        IntercompanyLedgerEntry.SETCURRENTKEY("Document No.");
        IntercompanyLedgerEntry.SETFILTER("Document No.",DocNoFilter);
        IntercompanyLedgerEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Intercompany Ledger Entry",0,IntercompanyLedgerEntry.TABLECAPTION,IntercompanyLedgerEntry.COUNT);
      END;
      IF FPSLicenseManagement.LicenseAndReadPermissionForTable(LoanLedgerEntry) THEN BEGIN
        LoanLedgerEntry.RESET;
        LoanLedgerEntry.SETCURRENTKEY("Document No.","Posting Date");
        LoanLedgerEntry.SETFILTER("Document No.",DocNoFilter);
        LoanLedgerEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(Rec,DATABASE::"Loan Ledger Entry",0,LoanLedgerEntry.TABLECAPTION,LoanLedgerEntry.COUNT);
      END;
    END;

    BEGIN
    {

      --- ExFlow --->
      Code           : FindRecord,ShowRecords

      Globals
      Variables      : EXPostedDocument

      <-- ExFlow ---
    }
    END.
  }
}

