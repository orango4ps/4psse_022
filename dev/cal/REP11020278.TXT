OBJECT Report 11020278 Create Purch Installment Lines
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Einkaufsratenzeilen erstellen;
               ENU=Create Purchase Installment Lines;
               NLD=Inkooptermijnregels aanmaken;
               NOR=Opprett delbetalingsrader for innkj›p];
    ProcessingOnly=Yes;
  }
  DATASET
  {
    { 1100525000;;DataItem;                  ;
               DataItemTable=Table39;
               DataItemTableView=SORTING(Document Type,Document No.,Line No.);
               OnAfterGetRecord=BEGIN
                                  DistributeInstallments("Purchase Line");
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnOpenPage=BEGIN
                   NotBasedOnScheme := TRUE;
                   BasedOnScheme := FALSE;
                 END;

    }
    CONTROLS
    {
      { 1100525003;0;Container;
                  ContainerType=ContentArea }

      { 1100525002;1;Group  ;
                  CaptionML=[DEU=Optionen;
                             ENU=Options;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 1100525000;2;Field  ;
                  CaptionML=[DEU=Zu teilender Betrag;
                             ENU=Amount to Split;
                             NLD=Te verdelen bedrag;
                             NOR=Bel›p † dele];
                  SourceExpr=gAmntToApplyDec;
                  Editable=FALSE }

      { 1100529500;2;Field  ;
                  CaptionML=[DEU=Zu verteilende Anzahl;
                             ENU=Quantity to Split;
                             NLD=Te verdelen aantal];
                  SourceExpr=QuantityToDistribute;
                  Editable=FALSE }

      { 1100525001;2;Field  ;
                  CaptionML=[DEU=Anzahl Raten;
                             ENU=No. of Installments;
                             NLD=Aantal termijnen;
                             NOR=Antall delbetalinger];
                  SourceExpr=NoOfLinesToAdd;
                  Editable=NotBasedOnScheme }

      { 1100529501;2;Field  ;
                  CaptionML=[DEU=Raten auf Basis der Menge erstellen;
                             ENU=Create Installments Based on Quantity;
                             NLD=Termijnen maken op basis van aantal];
                  SourceExpr=CreateInstallmentsWithQuantity;
                  Editable=NotBasedOnScheme }

      { 1100527700;2;Field  ;
                  CaptionML=[DEU=Raten aufgrund eines Ratenschemas erstellen;
                             ENU=Create Installments Based On Installments Scheme;
                             NLD=Termijnen maken op basis van een termijnschema];
                  SourceExpr=CreateInstallmentsBasedOnScheme;
                  OnValidate=BEGIN
                               IF CreateInstallmentsBasedOnScheme THEN BEGIN
                                 NotBasedOnScheme := FALSE;
                                 BasedOnScheme := TRUE;
                               END ELSE BEGIN
                                 NotBasedOnScheme := TRUE;
                                 BasedOnScheme := FALSE;
                               END;
                             END;
                              }

      { 1100527701;2;Field  ;
                  Lookup=Yes;
                  CaptionML=[DEU=Schemacode;
                             ENU=Scheme Code;
                             NLD=Schema code;
                             SVE=Plankod];
                  SourceExpr=SchemeCode;
                  TableRelation="Purchase Installment Scheme".Code;
                  Editable=BasedOnScheme;
                  LookupPageID=Purch. Installment Scheme List }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      NoOfLinesToAdd@1100525002 : Integer;
      gAmntToApplyDec@1100525001 : Decimal;
      NewText@1100525000 : Text[250];
      Text001@1100525003 : TextConst 'DEU=Rate %1;ENU=Installment %1;NLD=Termijn %1;NOR=Betalingsplan %1;SVE=Betalplan %1';
      QuantityToDistribute@1100529500 : Decimal;
      CreateInstallmentsWithQuantity@1100529501 : Boolean;
      CreateInstallmentsBasedOnScheme@1100527700 : Boolean;
      BasedOnScheme@1100527701 : Boolean INDATASET;
      NotBasedOnScheme@1100527702 : Boolean INDATASET;
      SchemeCode@1100527703 : Code[10];
      Text002@1100527704 : TextConst 'DEU=Schema Code kann nicht leer sein;ENU=Scheme Code can not be empty;NLD=Schema Code kan niet leeg zijn';

    PROCEDURE DistributeInstallments@1100485003(IPurchaseLine@1100525001 : Record 39);
    VAR
      PurchaseLine@1100485001 : Record 39;
      PurchaseHeader@1100525000 : Record 38;
      MaxLine@1100485002 : Integer;
      PurchaseInstallment@1100527700 : Record 11229461;
      LoopCount@1100527701 : Integer;
      xFactor2@1100527702 : Decimal;
      PurchaseInstallmentDummy@1100527703 : Record 11229461;
    BEGIN
      PurchaseHeader.GET(IPurchaseLine."Document Type",IPurchaseLine."Document No.");
      PurchaseHeader.TESTFIELD(Status, PurchaseHeader.Status::Open);
      MaxLine := 0;
      PurchaseLine.SETRANGE("Document Type", PurchaseHeader."Document Type");
      PurchaseLine.SETRANGE("Document No.", PurchaseHeader."No.");
      IF PurchaseLine.FINDLAST THEN
        MaxLine := PurchaseLine."Line No.";

      IF CreateInstallmentsBasedOnScheme THEN BEGIN
        IF SchemeCode <> '' THEN BEGIN
          TestPurchaseHeader(PurchaseHeader,IPurchaseLine,CreateInstallmentsWithQuantity);
          PurchaseInstallment.SETRANGE(Scheme,SchemeCode);
          IF PurchaseInstallment.FINDSET THEN
            REPEAT
              xFactor2 := (PurchaseInstallment.Percentage / 100);
              GeneratePurchaseLines(PurchaseHeader, IPurchaseLine, MaxLine, xFactor2,PurchaseInstallment,LoopCount);
            UNTIL PurchaseInstallment.NEXT = 0;

        END ELSE
         ERROR(Text002);
      END ELSE BEGIN
        TestPurchaseHeader(PurchaseHeader,IPurchaseLine,CreateInstallmentsWithQuantity);
        xFactor2 := 1/NoOfLinesToAdd;
        FOR LoopCount := 1 TO NoOfLinesToAdd DO BEGIN
          GeneratePurchaseLines(PurchaseHeader, IPurchaseLine, MaxLine, xFactor2,PurchaseInstallmentDummy,LoopCount);
        END;

      END;
    END;

    LOCAL PROCEDURE GeneratePurchaseLines@1100498000(IPurchaseHeader@1100498000 : Record 38;IPurchaseLine@1100485001 : Record 39;VAR PurchaseLineNo@1100485005 : Integer;xFactor@1100527700 : Decimal;IPurchaseInstallment@1100527701 : Record 11229461;LoopCount@1100527702 : Integer);
    VAR
      PurchaseLine@1100498001 : Record 39;
    BEGIN

      PurchaseLineNo := PurchaseLineNo + 10000;
      PurchaseLine.INIT;
      PurchaseLine.VALIDATE("Document Type", IPurchaseHeader."Document Type");
      PurchaseLine.VALIDATE("Document No.", IPurchaseHeader."No.");
      PurchaseLine.VALIDATE("Line No.", PurchaseLineNo);

      PurchaseLine.VALIDATE(Type,IPurchaseLine.Type);
      PurchaseLine."Buy-from Vendor No." := IPurchaseHeader."Buy-from Vendor No.";

      PurchaseLine."System-Created Entry" := IPurchaseLine."System-Created Entry";
      PurchaseLine.VALIDATE("No.",IPurchaseLine."No.");

      PurchaseLine.VALIDATE("Unit of Measure Code",IPurchaseLine."Unit of Measure Code");
      PurchaseLine.VALIDATE("Variant Code",IPurchaseLine."Variant Code");
      IF (IPurchaseLine."Job No." <> '') AND (IPurchaseLine."Job Task No." <> '') THEN BEGIN
        PurchaseLine.VALIDATE("Job No.",IPurchaseLine."Job No.");
        PurchaseLine.VALIDATE("Job Task No.",IPurchaseLine."Job Task No.");
        PurchaseLine."Job Line Type" := IPurchaseLine."Job Line Type";
      END;
      PurchaseLine."Prod. Order No." := IPurchaseLine."Prod. Order No.";
      PurchaseLine."Routing No." := IPurchaseLine."Routing No.";
      PurchaseLine."Routing Reference No." := IPurchaseLine."Routing Reference No.";
      PurchaseLine."Operation No." := IPurchaseLine."Operation No.";
      PurchaseLine."Work Center No." := IPurchaseLine."Work Center No.";
      PurchaseLine."Prod. Order Line No." := IPurchaseLine."Prod. Order Line No.";
      PurchaseLine."Overhead Rate" := IPurchaseLine."Overhead Rate";
      IF PurchaseLine."Buy-from Vendor No." <> IPurchaseHeader."Buy-from Vendor No." THEN
        PurchaseLine."Buy-from Vendor No." := IPurchaseHeader."Buy-from Vendor No.";

      PurchaseLine."Input by" := USERID; //DP00469
      PurchaseLine."Input Date" := TODAY; //DP00469
      PurchaseLine.INSERT;

      PurchaseLine.GetTempPurchLine(IPurchaseLine);

      IF CreateInstallmentsWithQuantity THEN
        PurchaseLine.VALIDATE(Quantity,IPurchaseLine.Quantity * xFactor)
      ELSE
        PurchaseLine.VALIDATE("Direct Unit Cost",IPurchaseLine."Direct Unit Cost" * xFactor);

      PurchaseLine.VALIDATE("Line Discount %", IPurchaseLine."Line Discount %");

      IF PurchaseLine."Description 2" <> '' THEN BEGIN
        IF IPurchaseInstallment.Description <> '' THEN
          NewText := IPurchaseInstallment.Description
        ELSE
          NewText := PurchaseLine."Description 2" + ' ' + STRSUBSTNO(Text001,LoopCount);
      END ELSE BEGIN
        IF IPurchaseInstallment.Description <> '' THEN
          NewText := IPurchaseInstallment.Description
        ELSE
          NewText := STRSUBSTNO(Text001,LoopCount);
      END;

      PurchaseLine."Final Installment" := IPurchaseInstallment."Final Installment";
      PurchaseLine."Description 2" := COPYSTR(NewText, 1, MAXSTRLEN(PurchaseLine."Description 2"));
      PurchaseLine."Modified by" := USERID; //DP00469
      PurchaseLine."Last Date Modified" := TODAY;//DP00469
      PurchaseLine.MODIFY;
      PurchaseLine.CreatePurchOrderControl(FALSE);
    END;

    PROCEDURE SetAmount@1100525000(lAmntToApplyDec@1100525000 : Decimal);
    BEGIN
      gAmntToApplyDec := lAmntToApplyDec;
    END;

    PROCEDURE SetQuantity@1100529501(lQuantityToDistribute@1100525000 : Decimal);
    BEGIN
      QuantityToDistribute := lQuantityToDistribute;
    END;

    LOCAL PROCEDURE TestPurchaseHeader@1100527701(IPurchaseHeader@1100527700 : Record 38;IPurchaseLine@1100527701 : Record 39;CreateInstallmentsWithQuantity@1100527702 : Boolean);
    BEGIN
      IF NOT CreateInstallmentsWithQuantity THEN
        IPurchaseHeader.TESTFIELD("Amounts only", TRUE);
      IPurchaseLine.TESTFIELD("Item No.",'');
      IPurchaseLine.TESTFIELD("Amnt. Received",0);
      IPurchaseLine.TESTFIELD("Amnt. Invoiced",0);
      IPurchaseLine.TESTFIELD("Quantity Received",0);
      IPurchaseLine.TESTFIELD("Quantity Invoiced",0);
      IPurchaseLine.TESTFIELD("Return Qty. Shipped",0);
      IPurchaseLine.CALCFIELDS("Reserved Qty. (Base)");
      IPurchaseLine.TESTFIELD("Reserved Qty. (Base)",0);
      IPurchaseLine.TESTFIELD("Receipt No.",'');
      IPurchaseLine.TESTFIELD("Return Shipment No.",'');
      IPurchaseLine.TESTFIELD("Blanket Order No.",'');
      IPurchaseLine.TESTFIELD("Attached to Line No.",0);
      IPurchaseLine.TESTFIELD("No.");
      IPurchaseLine.TESTFIELD(Type, IPurchaseLine.Type::"G/L Account");
      IPurchaseLine.TESTFIELD("Drop Shipment", FALSE);
      IPurchaseLine.TESTFIELD("Special Order", FALSE);
      IPurchaseLine.TESTFIELD("Prepmt. Amt. Inv.",0);

      IPurchaseLine.CreatePurchOrderControl(TRUE);
      IPurchaseLine.DELETE;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

