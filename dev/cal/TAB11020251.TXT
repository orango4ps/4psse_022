OBJECT Table 11020251 Progress Phase
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               ProgSchemeRec.GET(Scheme);
               Apply := ProgSchemeRec.Apply;
             END;

    OnModify=BEGIN
               ProgSchemeRec.GET(Scheme);
               Apply := ProgSchemeRec.Apply;
               UpdateDocPhaseFromStandard;
             END;

    OnRename=BEGIN
               RenameDocPhaseFromStandard;
             END;

    CaptionML=[ENU=Progress Phase;
               NOR=Fremdriftsfase;
               SVE=F”rloppsfas];
    LookupPageID=Page11020299;
  }
  FIELDS
  {
    { 5   ;   ;Type                ;Option        ;CaptionML=[ENU=Type;
                                                              NOR=Type;
                                                              SVE=Typ];
                                                   OptionCaptionML=[ENU=Common,,Service Call,Service Order;
                                                                    NOR=Vanlig,,Servicesamtale,Serviceordre,Innkj›pstilbud,Innkj›psordre;
                                                                    SVE=Vanlig,,Servicesamtal,Serviceorder];
                                                   OptionString=Common,,ServCall,ServOrder;
                                                   Editable=No }
    { 10  ;   ;Scheme              ;Code10        ;TableRelation="Progress Scheme".Code;
                                                   CaptionML=[ENU=Scheme;
                                                              NOR=Skjema;
                                                              SVE=Schema];
                                                   Editable=No }
    { 20  ;   ;Code                ;Code10        ;CaptionML=[ENU=Code;
                                                              NOR=Kode;
                                                              SVE=Kod] }
    { 30  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 40  ;   ;Employee No.        ;Code20        ;TableRelation=Employee.No.;
                                                   CaptionML=[ENU=Employee No.;
                                                              NOR=Ansattnr;
                                                              SVE=Anst„llningsnr] }
    { 50  ;   ;Starting Date       ;Date          ;OnValidate=BEGIN
                                                                CheckDate;
                                                              END;

                                                   CaptionML=[ENU=Starting Date;
                                                              NOR=Startdato;
                                                              SVE=Startdatum] }
    { 51  ;   ;Started             ;Boolean       ;OnValidate=BEGIN
                                                                IF (Type <> Type::Common) AND Started THEN BEGIN
                                                                  IF "Employee No." = '' THEN
                                                                    IF UserSetup.GET(USERID) THEN
                                                                      "Employee No." := UserSetup."Employee No.";
                                                                  IF "Starting Date" = 0D THEN
                                                                    "Starting Date" := TODAY;
                                                                  IF "Starting Time" = 0T THEN
                                                                    "Starting Time" := TIME;
                                                                  IF "Reference Period" <> '' THEN
                                                                    CheckPeriodStart(Type, "Reference Period", "Document No.", TODAY, TIME);
                                                                END;

                                                                IF CurrFieldNo <> 0 THEN  //db, 06-09-06 (avoid sql-problem when changing status in maintable if called by CheckProgressScheme)
                                                                  CheckDocumentStatus(0);
                                                              END;

                                                   CaptionML=[ENU=Started;
                                                              NOR=Startet;
                                                              SVE=Startad] }
    { 55  ;   ;Starting Time       ;Time          ;CaptionML=[ENU=Starting Time;
                                                              NOR=Starttidspunkt;
                                                              SVE=Starttid] }
    { 60  ;   ;Ending Date         ;Date          ;OnValidate=BEGIN
                                                                CheckDate;
                                                              END;

                                                   CaptionML=[ENU=Ending Date;
                                                              NOR=Sluttdato;
                                                              SVE=Slutdatum] }
    { 61  ;   ;Finished            ;Boolean       ;OnValidate=BEGIN
                                                                IF (Type <> Type::Common) AND Finished THEN BEGIN
                                                                  IF "Employee No." = '' THEN
                                                                    IF UserSetup.GET(USERID) THEN
                                                                      "Employee No." := UserSetup."Employee No.";
                                                                  IF "Ending Date" = 0D THEN
                                                                    "Ending Date" := TODAY;
                                                                  IF "Ending Time" = 0T THEN
                                                                    "Ending Time" := TIME;
                                                                  IF "Reference Period" <> '' THEN
                                                                    CheckPeriodEnd(Type, "Reference Period", "Document No.", TODAY, TIME);
                                                                END;

                                                                IF CurrFieldNo <> 0 THEN  //db, 06-09-06 (avoid sql-problem when changing status in maintable if called by CheckProgressScheme)
                                                                  CheckDocumentStatus(1);
                                                              END;

                                                   CaptionML=[ENU=Finished;
                                                              NOR=Ferdig;
                                                              SVE=Avslutad] }
    { 65  ;   ;Ending Time         ;Time          ;CaptionML=[ENU=Ending Time;
                                                              NOR=Sluttidspunkt;
                                                              SVE=Sluttid] }
    { 70  ;   ;Apply               ;Option        ;CaptionML=[ENU=Apply;
                                                              NOR=Koble;
                                                              SVE=Verkst„ll];
                                                   OptionCaptionML=[ENU=" ,,Service Call,Service Order";
                                                                    NOR=" ,,Servicesamtale,Serviceordre,Innkj›pstilbud,Innkj›psordre";
                                                                    SVE=" ,,Servicesamtal,Serviceorder"];
                                                   OptionString=Common,,ServCall,ServOrder;
                                                   Editable=No }
    { 100 ;   ;Document No.        ;Code20        ;TableRelation=IF (Type=CONST(ServCall)) "Service Call".No.
                                                                 ELSE IF (Type=CONST(ServOrder)) "Service Order".No.;
                                                   CaptionML=[ENU=Document No.;
                                                              NOR=Dokumentnr.;
                                                              SVE=Dokumentnr];
                                                   Editable=No }
    { 110 ;   ;Reference Period    ;Code10        ;TableRelation="Reference Period".Code WHERE (Type=CONST(Common),
                                                                                                Apply=FIELD(Apply));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Reference Point", 0);
                                                                CALCFIELDS("Description Reference Period");
                                                              END;

                                                   CaptionML=[ENU=Reference Period;
                                                              NOR=Referanseperiode;
                                                              SVE=Referensperiod] }
    { 120 ;   ;Description Reference Period;Text50;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Reference Period".Description WHERE (Type=CONST(Common),
                                                                                                            Code=FIELD(Reference Period)));
                                                   CaptionML=[ENU=Description Reference Period;
                                                              NOR=Beskrivelse av Referanseperiode;
                                                              SVE=Beskrivning av referensperiod];
                                                   Editable=No }
    { 130 ;   ;Reference Point     ;Integer       ;TableRelation="Reference Point".No. WHERE (Apply=FIELD(Apply));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Reference Period", '');
                                                                CALCFIELDS("Description Reference Point");
                                                              END;

                                                   CaptionML=[ENU=Reference Point;
                                                              NOR=Referansepunkt;
                                                              SVE=Referenspunkt] }
    { 140 ;   ;Description Reference Point;Text50 ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Reference Point".Description WHERE (No.=FIELD(Reference Point)));
                                                   CaptionML=[ENU=Description Reference Point;
                                                              NOR=Beskrivelse Referansepunkt;
                                                              SVE=Beskrivning referenspunkt];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Type,Scheme,Code,Document No.           ;Clustered=Yes }
    {    ;Type,Document No.,Code                   }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      UserSetup@1100485001 : Record 91;
      PeriodRec@1100485000 : Record 11020272;
      ProgSchemeRec@1100485002 : Record 11020250;
      StatusChange@1100485003 : Boolean;

    PROCEDURE CheckDate@1100485000();
    VAR
      lvText000@1100485000 : TextConst 'ENU=must occur before %1;NOR=m† inntreffe f›r %1;SVE=m†ste intr„ffa f”re %1';
    BEGIN
      IF ("Starting Date" <> 0D) AND ("Ending Date" <> 0D) THEN
        IF "Starting Date" > "Ending Date" THEN
          FIELDERROR("Starting Date",STRSUBSTNO(lvText000,FIELDCAPTION("Ending Date")));
    END;

    PROCEDURE CheckDocumentStatus@1100485001(lvAction@1100485003 : Integer);
    VAR
      ServCallRec@1100485004 : Record 11012822;
      ServOrderRec@1100485000 : Record 11012823;
      ReferencePoint@1100485002 : Record 11020271;
    BEGIN
      IF StatusChange = TRUE THEN EXIT;  //db, 06-09-06 (sql-problem in codeunit 415)

      IF "Reference Period" <> '' THEN BEGIN
        PeriodRec.RESET;
        PeriodRec.SETRANGE(Type, PeriodRec.Type::Common);
        PeriodRec.SETRANGE(Code, "Reference Period");
        IF NOT PeriodRec.FINDFIRST THEN EXIT;

        IF lvAction = 0 THEN
          IF NOT ReferencePoint.GET(PeriodRec."Reference Point Start") THEN EXIT;
        IF lvAction = 1 THEN
          IF NOT ReferencePoint.GET(PeriodRec."Reference Point End") THEN
            IF (PeriodRec."Second Reference Point End" = 0) OR (NOT ReferencePoint.GET(PeriodRec."Second Reference Point End")) THEN
              EXIT;
      END ELSE BEGIN
        IF NOT ReferencePoint.GET("Reference Point") THEN EXIT;
      END;

      IF Type = Type::ServCall THEN BEGIN
        IF ReferencePoint."Triggered by Status ServCall" = ReferencePoint."Triggered by Status ServCall"::" " THEN EXIT;
        IF ServCallRec.GET("Document No.") THEN BEGIN
          ServCallRec.VALIDATE(Status, ReferencePoint."Triggered by Status ServCall" - 1);
          ServCallRec.MODIFY(TRUE);
        END;
      END;

      IF Type = Type::ServOrder THEN BEGIN
        IF ReferencePoint."Triggered by Status ServOrder" = ReferencePoint."Triggered by Status ServOrder"::" " THEN EXIT;
        IF ServOrderRec.GET("Document No.") THEN BEGIN
          ServOrderRec.VALIDATE(Status, ReferencePoint."Triggered by Status ServOrder" - 1);
          ServOrderRec.MODIFY(TRUE);
        END;
      END;
    END;

    PROCEDURE EditProgressScheme@1100485003(lvType@1100485002 : Integer;lvScheme@1100485001 : Code[20];lvDoc@1100485000 : Code[20]);
    VAR
      ProgressRec@1100485003 : Record 11020251;
      ProgressRec2@1100485004 : Record 11020251;
      lvText000@1100525000 : TextConst 'ENU=Progress Scheme present;NOR=Fremdriftsskjema finnes;SVE=F”rloppsschema finns';
    BEGIN
      ProgressRec.RESET;
      ProgressRec.SETCURRENTKEY(Type, "Document No.", Code);  //db, 06-10-06
      ProgressRec.SETRANGE(Type, lvType);
      ProgressRec.SETRANGE("Document No.", lvDoc);
      IF NOT ProgressRec.ISEMPTY THEN
        ERROR(lvText000);

      ProgressRec.RESET;
      ProgressRec.SETCURRENTKEY(Type, Scheme, Code, "Document No.");  //db, 06-10-06
      ProgressRec.SETRANGE(Type, ProgressRec.Type::Common);
      ProgressRec.SETRANGE(Scheme, lvScheme);
      IF ProgressRec.FINDSET(TRUE) THEN BEGIN
        REPEAT
          ProgressRec2.COPY(ProgressRec);
          ProgressRec2.Type := lvType;
          ProgressRec2."Document No." := lvDoc;
          IF ProgressRec2."Reference Period" <> '' THEN
            CopyRefPeriod(lvType, ProgressRec2."Reference Period", lvDoc);
          ProgressRec2.INSERT;
        UNTIL ProgressRec.NEXT = 0;
      END ELSE
        CopyRefPeriod(lvType, '', lvDoc);
    END;

    PROCEDURE CheckProgressScheme@1100485004(lvType@1100485002 : Integer;lvScheme@1100485001 : Code[20];lvDoc@1100485000 : Code[20];lvStatus@1100485006 : Integer;lvDate@1100485008 : Date;lvTime@1100485009 : Time);
    VAR
      RefPeriodRec@1100485004 : Record 11020272;
      ProgressRec@1100485003 : Record 11020251;
    BEGIN
      StatusChange := TRUE;  //db, 06-09-06 (function called from maintable when status changed)

      IF lvScheme <> '' THEN BEGIN
        ProgressRec.RESET;
        ProgressRec.SETCURRENTKEY(Type, "Document No.", Code);  //db, 06-10-06
        ProgressRec.SETRANGE(Type, lvType);
        ProgressRec.SETRANGE(Scheme, lvScheme);
        ProgressRec.SETRANGE("Document No.", lvDoc);
        ProgressRec.SETFILTER("Reference Period", '<>%1', '');
        ProgressRec.SETFILTER("Reference Point", '%1', 0);
        IF ProgressRec.FINDSET(TRUE) THEN BEGIN
          REPEAT
            RefPeriodRec.SETRANGE(Type, RefPeriodRec.Type::Common);
            RefPeriodRec.SETRANGE(Code, ProgressRec."Reference Period");
            IF RefPeriodRec.FINDSET THEN BEGIN
              REPEAT
                IF IsReferencePointTriggered(RefPeriodRec."Reference Point Start",lvType,lvStatus,0) THEN
                  ProgressRec.VALIDATE(Started, TRUE);

                IF IsReferencePointTriggered(RefPeriodRec."Reference Point End",lvType,lvStatus,0) THEN
                  ProgressRec.VALIDATE(Finished, TRUE);

                IF (RefPeriodRec."Second Reference Point End" <> 0) AND NOT ProgressRec.Finished THEN
                  IF IsReferencePointTriggered(RefPeriodRec."Second Reference Point End",lvType,lvStatus,0) THEN
                    ProgressRec.VALIDATE(Finished, TRUE);

                ProgressRec.MODIFY;
              UNTIL RefPeriodRec.NEXT = 0;
            END;
          UNTIL ProgressRec.NEXT = 0;
        END;

        ProgressRec.SETFILTER("Reference Period", '%1', '');
        ProgressRec.SETFILTER("Reference Point", '<>%1', 0);
        IF ProgressRec.FINDSET(TRUE) THEN BEGIN
          REPEAT
            IF IsReferencePointTriggered(ProgressRec."Reference Point",lvType,lvStatus,0) THEN BEGIN
              ProgressRec.VALIDATE(Started, TRUE);
              ProgressRec.MODIFY;
            END;
          UNTIL ProgressRec.NEXT = 0;
        END;
      END ELSE
        CheckProgressWithoutScheme(lvType,lvDoc,lvStatus,lvDate,lvTime,0);
    END;

    PROCEDURE CheckProgressWithoutScheme@1100528500(lvType@1100485002 : Integer;lvDoc@1100485000 : Code[20];lvStatus@1100528502 : Integer;lvDate@1100485008 : Date;lvTime@1100485009 : Time;RefPointNumberWO@1100528500 : Integer);
    VAR
      ReferencePeriod@1100485004 : Record 11020272;
    BEGIN
      StatusChange := TRUE;

      ReferencePeriod.SETCURRENTKEY(Type, "Document No.");
      ReferencePeriod.SETRANGE(Type, lvType);
      ReferencePeriod.SETRANGE("Document No.", lvDoc);
      IF ReferencePeriod.FINDSET THEN
        REPEAT
          IF IsReferencePointTriggered(ReferencePeriod."Reference Point Start",lvType,0,RefPointNumberWO) THEN
            CheckPeriodStart(ReferencePeriod.Type, ReferencePeriod.Code, ReferencePeriod."Document No.", lvDate, lvTime);

          IF IsReferencePointTriggered(ReferencePeriod."Reference Point End",lvType,0,RefPointNumberWO) THEN
            CheckPeriodEnd(ReferencePeriod.Type, ReferencePeriod.Code, ReferencePeriod."Document No.", lvDate, lvTime);

          IF ReferencePeriod."Second Reference Point End" <> 0 THEN
            IF IsReferencePointTriggered(ReferencePeriod."Second Reference Point End",lvType,0,RefPointNumberWO) THEN
              CheckPeriodEnd(ReferencePeriod.Type, ReferencePeriod.Code, ReferencePeriod."Document No.", lvDate, lvTime);

        UNTIL ReferencePeriod.NEXT = 0;
    END;

    PROCEDURE CheckPeriodStart@1100485005(lvType@1100485002 : Integer;lvPeriod@1100485001 : Code[20];lvDoc@1100485000 : Code[20];lvDate@1100485004 : Date;lvTime@1100485003 : Time);
    BEGIN
      PeriodRec.RESET;
      PeriodRec.SETRANGE(Type, lvType);
      PeriodRec.SETRANGE(Code, lvPeriod);
      PeriodRec.SETRANGE("Document No.", lvDoc);
      PeriodRec.SETRANGE("Starting Date", 0D);
      IF PeriodRec.FINDFIRST THEN BEGIN
        PeriodRec."Starting Date" := lvDate;
        PeriodRec."Starting Time" := lvTime;
        PeriodRec.MODIFY(TRUE);
      END ELSE BEGIN
        PeriodRec.SETRANGE("Starting Date");
        IF NOT PeriodRec.FINDFIRST THEN BEGIN
          PeriodRec.INIT;
          PeriodRec.Type := lvType;
          PeriodRec.VALIDATE(Code, lvPeriod);
          PeriodRec."Document No." := lvDoc;
          PeriodRec."Starting Date" := lvDate;
          PeriodRec."Starting Time" := lvTime;
          PeriodRec.INSERT(TRUE);
        END;
      END;
    END;

    PROCEDURE CheckPeriodEnd@1100485006(lvType@1100485002 : Integer;lvPeriod@1100485001 : Code[20];lvDoc@1100485000 : Code[20];lvDate@1100485004 : Date;lvTime@1100485003 : Time);
    BEGIN
      PeriodRec.RESET;
      PeriodRec.SETRANGE(Type, lvType);
      PeriodRec.SETRANGE(Code, lvPeriod);
      PeriodRec.SETRANGE("Document No.", lvDoc);
      PeriodRec.SETRANGE("Ending Date", 0D);
      IF PeriodRec.FINDLAST THEN BEGIN
        PeriodRec."Ending Date" := lvDate;
        PeriodRec."Ending Time" := lvTime;
        PeriodRec.MODIFY(TRUE);
      END;
    END;

    PROCEDURE CopyRefPeriod@1100485007(lvType@1100485003 : Integer;lvPeriod@1100485004 : Code[20];lvDoc@1100485002 : Code[20]);
    VAR
      RefPeriodRec@1100485000 : Record 11020272;
      RefPeriodRec2@1100485001 : Record 11020272;
    BEGIN
      RefPeriodRec.SETCURRENTKEY(Type, Code);
      RefPeriodRec.SETRANGE(Type, RefPeriodRec.Type::Common);
      IF lvPeriod <> '' THEN
        RefPeriodRec.SETRANGE(Code, lvPeriod);
      RefPeriodRec.SETRANGE(Apply,lvType);
      IF RefPeriodRec.FINDSET THEN
        REPEAT
          RefPeriodRec2 := RefPeriodRec;
          RefPeriodRec2.Type := lvType;
          RefPeriodRec2."Document No." := lvDoc;
          IF RefPeriodRec2.INSERT THEN;
        UNTIL RefPeriodRec.NEXT = 0;
    END;

    PROCEDURE UpdateDocPhaseFromStandard@1100485008();
    VAR
      ProgPhaseRec@1100485000 : Record 11020251;
    BEGIN
      IF Type <> Type::Common THEN EXIT;

      ProgPhaseRec.SETFILTER(Type, '<>%1', Type);
      ProgPhaseRec.SETRANGE(Code, Code);
      ProgPhaseRec.SETFILTER("Document No.", '<>%1', '');
      IF ProgPhaseRec.FINDSET(TRUE) THEN
        REPEAT
          ProgPhaseRec.Description := Description;
          ProgPhaseRec.Apply := Apply;
          ProgPhaseRec."Reference Period" := "Reference Period";
          ProgPhaseRec."Reference Point" := "Reference Point";
          ProgPhaseRec.MODIFY;
        UNTIL ProgPhaseRec.NEXT = 0;
    END;

    PROCEDURE RenameDocPhaseFromStandard@1100485010();
    VAR
      ProgPhaseRec@1100485000 : Record 11020251;
      ProgPhaseRec2@1100485001 : Record 11020251;
    BEGIN
      IF Type <> Type::Common THEN EXIT;

      ProgPhaseRec.SETFILTER(Type, '<>%1', Type);
      ProgPhaseRec.SETRANGE(Code, xRec.Code);
      ProgPhaseRec.SETFILTER("Document No.", '<>%1', '');
      IF ProgPhaseRec.FINDSET(TRUE) THEN
        REPEAT
          ProgPhaseRec2.COPY(ProgPhaseRec);
          ProgPhaseRec2.DELETE;
          ProgPhaseRec2.Code := Code;
          ProgPhaseRec2.INSERT;
        UNTIL ProgPhaseRec.NEXT = 0;
    END;

    LOCAL PROCEDURE IsReferencePointTriggered@1100528504(ReferencePointNo@1100528501 : Integer;ReferenceType@1100528505 : Integer;NewStatus@1100528503 : Integer;RefPointNumberWO@1100528506 : Integer) : Boolean;
    VAR
      ReferencePoint@1100528500 : Record 11020271;
      ReferencePeriod@1100528502 : Record 11020272;
    BEGIN
      IF NOT ReferencePoint.GET(ReferencePointNo) THEN
        ReferencePoint.INIT;

      CASE ReferenceType OF
        ReferencePeriod.Type::ServCall:
          EXIT(ReferencePoint."Triggered by Status ServCall" = NewStatus + 1);
        ReferencePeriod.Type::ServOrder:
          EXIT(ReferencePoint."Triggered by Status ServOrder" = NewStatus + 1);
        ReferencePeriod.Type::WorkOrder:
          BEGIN
            IF RefPointNumberWO <> 0 THEN
              EXIT(ReferencePointNo = RefPointNumberWO);
          END;
      END;
    END;

    BEGIN
    END.
  }
}

