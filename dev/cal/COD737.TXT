OBJECT Codeunit 737 VAT Report Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.01;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      CreateVATReturnQst@1000 : TextConst '@@@=1 - VAT Return No.;ENU=VAT Return %1 has been created. Do you want to open the VAT return card?;NOR=Omsetningsoppgaven %1 er opprettet. Vil du Üpne omsetningsoppgavekortet?;SVE=Momsreturen %1 har skapats. Vill du îppna momsreturkortet?';
      AlreadyExistVATReturnQst@1002 : TextConst '@@@=1 - VAT Return No.;ENU=VAT Return %1 associated with this VAT return period already exists. Do you want to open the VAT return card?;NOR=Omsetningsoppgaven %1, som er tilknyttet denne omsetningsoppgaveperioden, finnes allerede. Vil du Üpne omsetningsoppgavekortet?;SVE=Momsreturen %1 som Ñr associerad med den hÑr momsreturperioden finns redan. Vill du îppna momsreturkortet?';
      NoVATReturnQst@1003 : TextConst 'ENU=There is no VAT return for this period. Do you want to create a new one?;NOR=Det finnes ingen omsetningsoppgave for denne perioden. Vil du opprette en ny?;SVE=Det finns ingen momsretur fîr den hÑr perioden. Vill du skapa en ny?';
      JobTraceCategoryTxt@1001 : TextConst '@@@={Locked};ENU=Auto update of VAT return period job.;NOR=Auto update of VAT return period job.';
      JobTraceStartTxt@1004 : TextConst '@@@={Locked};ENU=A job for an automatic update of the VAT return period has started with frequency %1.;NOR=A job for an automatic update of the VAT return period has started with frequency %1.';
      FailedJobNotificationMsg@1005 : TextConst '@@@=1 - datetime;ENU=Auto receive job has failed (executed on %1).;NOR=Automatisk mottak av jobb mislyktes (utfõrt den %1).;SVE=Det automatiska inleveransjobbet misslyckades (kîrdes den %1).';
      OpenJobCardMsg@1006 : TextConst 'ENU=Open the job card;NOR=èpne jobbkortet;SVE=ôppna arbetskortet.';
      ManualInsertNotificationMsg@1008 : TextConst 'ENU=Insert is only allowed with the Get VAT Return Periods action.;NOR=Innsetting er bare tillatt med handlingen Hent omsetningsoppgaveperioder.;SVE=Det Ñr bara tillÜtet att infoga med ÜtgÑrden HÑmta perioder fîr momsretur.';
      ManualInsertNotificationNameTxt@1007 : TextConst 'ENU=VAT return period manual insert notification.;NOR=Varsel om manuell innsetting av omsetningsoppgaveperiode.;SVE=Meddelande om manuell infogning av momsreturperiod.';
      ManualInsertNotificationDescriptionTxt@1010 : TextConst 'ENU=Warn about VAT return period manual insertion in case the Manual Receive Period CU ID field in the VAT Report Setup window is filled in.;NOR=Varsle om manuell innsetting av omsetningsoppgaveperiode hvis feltet CU-ID for manuell mottaksperiode i vinduet Mva-rapportoppsett er fylt ut.;SVE=Varning om manuell infogning av momsreturperiod om fÑltet CU-ID fîr manuell inleveransperiod i fînstret Konfigurera momsrapport har fyllts i.';
      DontShowAgainTxt@1009 : TextConst 'ENU=Do not show again;NOR=Ikke vis igjen;SVE=Visa inte igen';

    [EventSubscriber(Page,737,OnOpenPageEvent)]
    LOCAL PROCEDURE OnOpenVATReturnPeriodListPageEvent@16(VAR Rec@1000 : Record 737);
    VAR
      VATReportSetup@1001 : Record 743;
      ManualInsertNotification@1002 : Notification;
    BEGIN
      IF NOT VATReportSetup.GET THEN
        EXIT;

      IF VATReportSetup."Manual Receive Period CU ID" = 0 THEN
        EXIT;

      IF NOT IsManualInsertNotificationEnabled THEN
        EXIT;

      ManualInsertNotification.ID := GetManualInsertNotificationGUID;
      ManualInsertNotification.RECALL;
      ManualInsertNotification.MESSAGE := ManualInsertNotificationMsg;
      ManualInsertNotification.SCOPE := NOTIFICATIONSCOPE::LocalScope;
      ManualInsertNotification.ADDACTION(DontShowAgainTxt,CODEUNIT::"VAT Report Mgt.",'DontShowAgainManualInsertNotification');
      ManualInsertNotification.SEND;
    END;

    PROCEDURE DontShowAgainManualInsertNotification@23(Notification@1000 : Notification);
    VAR
      MyNotifications@1001 : Record 1518;
    BEGIN
      IF NOT MyNotifications.Disable(GetManualInsertNotificationGUID) THEN
        MyNotifications.InsertDefault(
          GetManualInsertNotificationGUID,ManualInsertNotificationNameTxt,ManualInsertNotificationDescriptionTxt,FALSE);
    END;

    LOCAL PROCEDURE IsManualInsertNotificationEnabled@27() : Boolean;
    VAR
      MyNotifications@1000 : Record 1518;
    BEGIN
      EXIT(MyNotifications.IsEnabled(GetManualInsertNotificationGUID));
    END;

    LOCAL PROCEDURE GetManualInsertNotificationGUID@26() : GUID;
    BEGIN
      EXIT('93003212-76EA-490F-A5C6-6961656A7CF8');
    END;

    PROCEDURE GetVATReturnPeriods@4();
    VAR
      VATReportSetup@1000 : Record 743;
    BEGIN
      VATReportSetup.GET;
      VATReportSetup.TESTFIELD("Manual Receive Period CU ID");
      CODEUNIT.RUN(VATReportSetup."Manual Receive Period CU ID");
    END;

    PROCEDURE GetSubmittedVATReturns@5(VATReturnPeriod@1000 : Record 737);
    VAR
      VATReportSetup@1001 : Record 743;
    BEGIN
      VATReportSetup.GET;
      VATReportSetup.TESTFIELD("Receive Submitted Return CU ID");
      CODEUNIT.RUN(VATReportSetup."Receive Submitted Return CU ID",VATReturnPeriod);
    END;

    PROCEDURE CreateVATReturnFromVATPeriod@1(VATReturnPeriod@1003 : Record 737);
    VAR
      VATReportHeader@1002 : Record 740;
    BEGIN
      IF NOT VATReportHeader.GET(VATReportHeader."VAT Report Config. Code"::"VAT Return",VATReturnPeriod."VAT Return No.") THEN BEGIN
        CreateVATReturn(VATReportHeader,VATReturnPeriod);
        IF CONFIRM(STRSUBSTNO(CreateVATReturnQst,VATReportHeader."No.")) THEN
          OpenVATReturnCardFromVATPeriod(VATReturnPeriod);
      END ELSE
        IF CONFIRM(STRSUBSTNO(AlreadyExistVATReturnQst,VATReportHeader."No.")) THEN
          OpenVATReturnCard(VATReportHeader);
    END;

    PROCEDURE OpenVATReturnCardFromVATPeriod@6(VATReturnPeriod@1001 : Record 737);
    VAR
      VATReportHeader@1002 : Record 740;
    BEGIN
      IF VATReportHeader.GET(VATReportHeader."VAT Report Config. Code"::"VAT Return",VATReturnPeriod."VAT Return No.") THEN
        OpenVATReturnCard(VATReportHeader)
      ELSE
        IF CONFIRM(NoVATReturnQst) THEN BEGIN
          CreateVATReturn(VATReportHeader,VATReturnPeriod);
          OpenVATReturnCard(VATReportHeader);
        END;
    END;

    LOCAL PROCEDURE OpenVATReturnCard@9(VATReportHeader@1000 : Record 740);
    BEGIN
      COMMIT;
      PAGE.RUNMODAL(PAGE::"VAT Report",VATReportHeader);
    END;

    PROCEDURE OpenVATPeriodCardFromVATReturn@7(VATReportHeader@1001 : Record 740);
    VAR
      VATReturnPeriod@1000 : Record 737;
    BEGIN
      COMMIT;
      IF VATReturnPeriod.GET(VATReportHeader."Return Period No.") THEN
        PAGE.RUNMODAL(PAGE::"VAT Return Period Card",VATReturnPeriod);
    END;

    LOCAL PROCEDURE CreateVATReturn@8(VAR VATReportHeader@1000 : Record 740;VAR VATReturnPeriod@1002 : Record 737);
    BEGIN
      InsertNewVATReturn(VATReportHeader);
      UpdateVATReturn(VATReportHeader,VATReturnPeriod);
    END;

    LOCAL PROCEDURE InsertNewVATReturn@2(VAR VATReportHeader@1000 : Record 740);
    VAR
      VATReportSetup@1002 : Record 743;
    BEGIN
      VATReportSetup.GET;
      VATReportSetup.TESTFIELD("Report Version");
      WITH VATReportHeader DO BEGIN
        "VAT Report Config. Code" := "VAT Report Config. Code"::"VAT Return";
        "VAT Report Version" := VATReportSetup."Report Version";
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateVATReturn@18(VAR VATReportHeader@1001 : Record 740;VAR VATReturnPeriod@1000 : Record 737);
    BEGIN
      VATReturnPeriod.CopyToVATReturn(VATReportHeader);
      VATReportHeader.MODIFY;

      VATReturnPeriod."VAT Return No." := VATReportHeader."No.";
      VATReturnPeriod.MODIFY;
    END;

    PROCEDURE CreateAndStartAutoUpdateVATReturnPeriodJob@3(VATReportSetup@1000 : Record 743);
    VAR
      JobQueueEntry@1001 : Record 472;
      JobQueueMgt@1002 : Codeunit 456;
    BEGIN
      IF VATReportSetup."Update Period Job Frequency" <> VATReportSetup."Update Period Job Frequency"::Never THEN
        VATReportSetup.TESTFIELD("Auto Receive Period CU ID");
      JobQueueMgt.DeleteJobQueueEntries(JobQueueEntry."Object Type to Run"::Codeunit,VATReportSetup."Auto Receive Period CU ID");
      IF VATReportSetup."Update Period Job Frequency" = VATReportSetup."Update Period Job Frequency"::Never THEN
        EXIT;

      JobQueueEntry."No. of Minutes between Runs" := GetJobNoOfMinutes(VATReportSetup);
      JobQueueEntry."Object Type to Run" := JobQueueEntry."Object Type to Run"::Codeunit;
      JobQueueEntry."Object ID to Run" := VATReportSetup."Auto Receive Period CU ID";
      JobQueueMgt.CreateJobQueueEntry(JobQueueEntry);

      CODEUNIT.RUN(CODEUNIT::"Job Queue - Enqueue",JobQueueEntry);
      SENDTRACETAG(
        '00008WN',JobTraceCategoryTxt,VERBOSITY::Normal,
        STRSUBSTNO(JobTraceStartTxt,FORMAT(VATReportSetup."Update Period Job Frequency")),DATACLASSIFICATION::SystemMetadata);
    END;

    LOCAL PROCEDURE GetJobNoOfMinutes@10(VATReportSetup@1000 : Record 743) : Integer;
    BEGIN
      WITH VATReportSetup DO
        CASE "Update Period Job Frequency" OF
          "Update Period Job Frequency"::Never:
            EXIT(0);
          "Update Period Job Frequency"::Daily:
            EXIT(60 * 24);
          "Update Period Job Frequency"::Weekly:
            EXIT(60 * 24 * 7);
        END;
    END;

    [EventSubscriber(Codeunit,448,OnAfterHandleRequest)]
    LOCAL PROCEDURE OnAfterHandleVATReturnPeriodJobRequest@13(VAR JobQueueEntry@1000 : Record 472;WasSuccess@1001 : Boolean);
    BEGIN
      IF NOT WasSuccess THEN
        CheckAndRestartVATReturnPeriodJob(JobQueueEntry);
    END;

    LOCAL PROCEDURE CheckAndRestartVATReturnPeriodJob@14(JobQueueEntry@1000 : Record 472);
    VAR
      VATReportSetup@1001 : Record 743;
      JobQueueDispatcher@1002 : Codeunit 448;
    BEGIN
      IF NOT VATReportSetup.READPERMISSION THEN
        EXIT;

      IF NOT VATReportSetup.GET THEN
        EXIT;

      IF VATReportSetup."Auto Receive Period CU ID" = 0 THEN
        EXIT;

      WITH JobQueueEntry DO BEGIN
        IF NOT FIND THEN
          EXIT;

        IF ("Object Type to Run" <> "Object Type to Run"::Codeunit) OR
           ("Object ID to Run" <> VATReportSetup."Auto Receive Period CU ID") OR
           (Status <> Status::Error)
        THEN
          EXIT;

        "User Session Started" := 0DT;
        "User Service Instance ID" := 0;
        "User Session ID" := 0;
        "Earliest Start Date/Time" := JobQueueDispatcher.CalcNextRunTimeForRecurringJob(JobQueueEntry,CURRENTDATETIME);
        CODEUNIT.RUN(CODEUNIT::"Job Queue - Enqueue",JobQueueEntry);
      END;
    END;

    [EventSubscriber(Page,737,OnOpenPageEvent)]
    LOCAL PROCEDURE CheckJobStatusOnOpenVATReturnPeriods@17(VAR Rec@1000 : Record 737);
    VAR
      JobQueueLogEntry@1001 : Record 474;
    BEGIN
      IF IsLastVATReturnPeriodJobQueueLogEntryHasError(JobQueueLogEntry) THEN
        SendJobErrorNotification(JobQueueLogEntry);
    END;

    LOCAL PROCEDURE IsLastVATReturnPeriodJobQueueLogEntryHasError@11(VAR JobQueueLogEntry@1000 : Record 474) : Boolean;
    VAR
      VATReportSetup@1001 : Record 743;
    BEGIN
      VATReportSetup.GET;
      IF (VATReportSetup."Auto Receive Period CU ID" = 0) OR
         (VATReportSetup."Update Period Job Frequency" = VATReportSetup."Update Period Job Frequency"::Never)
      THEN
        EXIT(FALSE);

      WITH JobQueueLogEntry DO BEGIN
        SETRANGE("Object Type to Run","Object Type to Run"::Codeunit);
        SETRANGE("Object ID to Run",VATReportSetup."Auto Receive Period CU ID");
        IF FINDLAST THEN
          EXIT(Status = Status::Error);
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE SendJobErrorNotification@12(JobQueueLogEntry@1001 : Record 474);
    VAR
      JobErrorNotification@1000 : Notification;
    BEGIN
      JobErrorNotification.MESSAGE := STRSUBSTNO(FailedJobNotificationMsg,JobQueueLogEntry."Start Date/Time");
      JobErrorNotification.SCOPE := NOTIFICATIONSCOPE::LocalScope;
      JobErrorNotification.ADDACTION(OpenJobCardMsg,CODEUNIT::"VAT Report Mgt.",'OpenVATReturnPeriodJobCard');
      JobErrorNotification.SEND;
    END;

    PROCEDURE OpenVATReturnPeriodJobCard@20(JobErrorNotification@1002 : Notification);
    VAR
      VATReportSetup@1000 : Record 743;
      JobQueueEntry@1001 : Record 472;
    BEGIN
      VATReportSetup.GET;
      WITH JobQueueEntry DO BEGIN
        SETRANGE("Object Type to Run","Object Type to Run"::Codeunit);
        SETRANGE("Object ID to Run",VATReportSetup."Auto Receive Period CU ID");
        IF NOT ISEMPTY THEN
          PAGE.RUNMODAL(PAGE::"Job Queue Entry Card",JobQueueEntry);
      END;
    END;

    [EventSubscriber(Page,740,OnBeforeValidateEvent,"VAT Report Version")]
    LOCAL PROCEDURE OnBeforeValidateVATReportVersion@15(VAR Rec@1000 : Record 740);
    VAR
      VATReportSetup@1001 : Record 743;
      VATReturnPeriod@1002 : Record 737;
    BEGIN
      IF VATReportSetup.GET THEN
        IF (Rec."VAT Report Version" <> '') AND (Rec."VAT Report Version" = VATReportSetup."Report Version") THEN
          IF PAGE.RUNMODAL(0,VATReturnPeriod) = ACTION::LookupOK THEN
            UpdateVATReturn(Rec,VATReturnPeriod);
    END;

    BEGIN
    END.
  }
}

