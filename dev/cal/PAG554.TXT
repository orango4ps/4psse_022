OBJECT Page 554 Analysis by Dimensions
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00,4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Analysis by Dimensions;
               NOR=Analyse per dimensjon;
               SVE=Analys per dimension];
    SaveValues=Yes;
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    LinksAllowed=No;
    SourceTable=Table367;
    DataCaptionExpr=AnalysisViewCode;
    PageType=Card;
    OnInit=BEGIN
             Dim4FilterEnable := TRUE;
             Dim3FilterEnable := TRUE;
             Dim2FilterEnable := TRUE;
             Dim1FilterEnable := TRUE;
           END;

    OnOpenPage=VAR
                 GLAcc@1002 : Record 15;
                 Field@1000 : Record 2000000041;
                 CashFlowAccount@1001 : Record 841;
               BEGIN
                 IF (NewAnalysisViewCode <> '') AND (NewAnalysisViewCode <> AnalysisViewCode) THEN
                   AnalysisViewCode := NewAnalysisViewCode;

                 ValidateAnalysisViewCode;

                 GLSetup.GET;
                 IF GLSetup."Additional Reporting Currency" = '' THEN
                   ShowInAddCurr := FALSE
                 ELSE
                   Currency.GET(GLSetup."Additional Reporting Currency");

                 IF GLAccountSource THEN
                   LineDimCode := GLAcc.TABLECAPTION
                 ELSE
                   LineDimCode := CashFlowAccount.TABLECAPTION;
                 ColumnDimCode := Text000;

                 LineDimOption := DimCodeToOption(LineDimCode);
                 ColumnDimOption := DimCodeToOption(ColumnDimCode);
                 IF GLAccountSource THEN BEGIN
                   Field.GET(DATABASE::"G/L Account",42);
                   BusUnitFilterCaption := Field."Field Caption";
                 END;

                 FindPeriod('');

                 CreateCaptionSet(Rec,Step::First,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
               END;

    OnFindRecord=BEGIN
                   EXIT(FindRec(LineDimOption,Rec,Which));
                 END;

    OnNextRecord=BEGIN
                   EXIT(NextRec(LineDimOption,Rec,Steps));
                 END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 24      ;1   ;ActionGroup;
                      CaptionML=[ENU=&Actions;
                                 NOR=&Handlinger;
                                 SVE=&ètgÑrder];
                      Image=Action }
      { 25      ;2   ;Action    ;
                      CaptionML=[ENU=Reverse Lines and Columns;
                                 NOR=Reverser linjer og kolonner;
                                 SVE=Byt plats pÜ rader och kolumner];
                      ToolTipML=[ENU=Change the display of the matrix by inverting the values in the Show as Lines and Show as Columns fields.;
                                 NOR=Endre visningen av matrisen ved Ü invertere verdiene i feltene Vis som linjer og Vis som kolonner.;
                                 SVE=éndra visning av matrisen genom att invertera vÑrdena i fÑlten Visa som rader och Visa som kolumner.];
                      ApplicationArea=#Dimensions;
                      Promoted=Yes;
                      PromotedIsBig=No;
                      Image=Undo;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 TempDimCode@1000 : Text[30];
                               BEGIN
                                 TempDimCode := ColumnDimCode;
                                 ColumnDimCode := LineDimCode;
                                 LineDimCode := TempDimCode;
                                 ValidateLineDimCode;
                                 ValidateColumnDimCode;
                                 CreateCaptionSet(Rec,Step::First,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 19      ;1   ;Action    ;
                      Name=ShowMatrix;
                      CaptionML=[ENU=&Show Matrix;
                                 NOR=Vi&s matrise;
                                 SVE=Vi&sa matris];
                      ToolTipML=[ENU=View the data overview according to the selected filters and options.;
                                 NOR=Vis den dataoversikten i henhold til de valgte filtrene og alternativene.;
                                 SVE=Visa dataîversikten med hÑnsyn taget till de valda filtren och alternativen.];
                      ApplicationArea=#Dimensions;
                      Promoted=Yes;
                      Image=ShowMatrix;
                      PromotedCategory=Process;
                      PromotedOnly=Yes;
                      OnAction=VAR
                                 MatrixForm@1000 : Page 9249;
                               BEGIN
                                 CLEAR(MatrixForm);

                                 IF GLAccountSource THEN
                                   CashFlowFilter := '';

                                 MatrixForm.Load(
                                   LineDimOption,ColumnDimOption,LineDimCode,ColumnDimCode,PeriodType,DateFilter,AccFilter,
                                   BusUnitFilter,BudgetFilter,Dim1Filter,Dim2Filter,Dim3Filter,Dim4Filter,CashFlowFilter);
                                 MatrixForm.Load2(
                                   QtyType,AnalysisViewCode,ShowOppositeSign,ShowColumnName,
                                   ShowActualBudg,AmountField,ClosingEntryFilter,RoundingFactor,ShowInAddCurr,
                                   ColumnCaptions,PrimaryKeyFirstColInSet);

                                 MatrixForm.RUNMODAL;
                               END;
                                }
      { 12      ;1   ;Action    ;
                      CaptionML=[ENU=Previous Set;
                                 NOR=Forrige sett;
                                 SVE=FîregÜende uppsÑttning];
                      ToolTipML=[ENU=Go to the previous set of data.;
                                 NOR=GÜ til forrige datasett.;
                                 SVE=GÜ till fîregÜende datauppsÑttning.];
                      ApplicationArea=#Dimensions;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=PreviousSet;
                      PromotedCategory=Process;
                      PromotedOnly=Yes;
                      OnAction=BEGIN
                                 CreateCaptionSet(Rec,Step::Previous,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                               END;
                                }
      { 11      ;1   ;Action    ;
                      CaptionML=[ENU=Next Set;
                                 NOR=Neste sett;
                                 SVE=NÑsta uppsÑttning];
                      ToolTipML=[ENU=Go to the next set of data.;
                                 NOR=GÜ til neste datasett.;
                                 SVE=GÜ till nÑsta datauppsÑttning.];
                      ApplicationArea=#Dimensions;
                      Promoted=Yes;
                      Image=NextSet;
                      PromotedCategory=Process;
                      PromotedOnly=Yes;
                      OnAction=BEGIN
                                 CreateCaptionSet(Rec,Step::Next,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                CaptionML=[ENU=General;
                           NOR=Generelt;
                           SVE=AllmÑnt] }

    { 5   ;2   ;Field     ;
                CaptionML=[ENU=Analysis View Code;
                           NOR=Analysevisningskode;
                           SVE=Analysvykod];
                ToolTipML=[ENU=Specifies the code for the analysis view that the filter belongs to.;
                           NOR=Angir koden for analysevisningen som filteret er knyttet til.;
                           SVE=Anger koden fîr den analysvy som filtret tillhîr.];
                ApplicationArea=#Dimensions;
                SourceExpr=AnalysisViewCode;
                TableRelation="Analysis View";
                Importance=Promoted;
                OnValidate=BEGIN
                             ValidateAnalysisViewCode;
                             ValidateColumnDimCode;
                             ValidateLineDimCode;
                           END;

                OnLookup=VAR
                           AnalysisViewList@1002 : Page 556;
                         BEGIN
                           AnalysisViewList.LOOKUPMODE := TRUE;
                           AnalysisView.SETRANGE("Account Source",AnalysisView."Account Source");
                           AnalysisViewList.SETTABLEVIEW(AnalysisView);
                           AnalysisViewList.SETRECORD(AnalysisView);
                           IF AnalysisViewList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                             AnalysisViewList.GETRECORD(AnalysisView);
                             AnalysisViewCode := AnalysisView.Code;
                             Text := AnalysisView.Code;
                             ValidateAnalysisViewCode;
                             ValidateColumnDimCode;
                             ValidateLineDimCode;
                             CurrPage.UPDATE;
                             EXIT(TRUE);
                           END;
                         END;
                          }

    { 6   ;2   ;Field     ;
                CaptionML=[ENU=Show as Lines;
                           NOR=Vis som linjer;
                           SVE=Visa som rader];
                ToolTipML=[ENU=Specifies which values you want to show as lines in the window. This allows you to see the same matrix window from various perspectives, especially when you use both the Show as Lines field and the Show as Columns field.;
                           NOR=Angir hvilke verdier du vil skal vises som linjer i vinduet. Dermed kan du vise det samme matrisevinduet fra ulike perspektiver, spesielt nÜr du bruker bÜde feltet Vis som linjer og feltet Vis som kolonner.;
                           SVE=Anger vilka vÑrden som visas som rader i fînstret. Det gîr det mîjligt att visa samma matrisfînster med flera olika perspektiv, sÑrskilt om du anvÑnder bÜde fÑltet Visa som rader och fÑltet Visa som kolumner.];
                ApplicationArea=#Dimensions;
                SourceExpr=LineDimCode;
                OnValidate=BEGIN
                             IF (UPPERCASE(LineDimCode) = UPPERCASE(ColumnDimCode)) AND (LineDimCode <> '') THEN BEGIN
                               ColumnDimCode := '';
                               ValidateColumnDimCode;
                             END;
                             ValidateLineDimCode;
                             IF LineDimOption = LineDimOption::Period THEN
                               SETCURRENTKEY("Period Start")
                             ELSE
                               SETCURRENTKEY(Code);
                             CurrPage.UPDATE;
                           END;

                OnLookup=VAR
                           NewCode@1002 : Text[30];
                         BEGIN
                           NewCode := GetDimSelection(LineDimCode);
                           IF NewCode = LineDimCode THEN
                             EXIT(FALSE);

                           Text := NewCode;
                           LineDimCode := NewCode;
                           ValidateLineDimCode;
                           CurrPage.UPDATE;
                           EXIT(TRUE);
                         END;
                          }

    { 9   ;2   ;Field     ;
                CaptionML=[ENU=Show as Columns;
                           NOR=Vis som kolonner;
                           SVE=Visa som kolumner];
                ToolTipML=[ENU=Specifies which values you want to show as columns in the window. This allows you to see the same matrix window from various perspectives, especially when you use both the Show as Lines field and the Show as Columns field.;
                           NOR=Angir hvilke verdier du vil skal vises som kolonner i vinduet. Dermed kan du vise det samme matrisevinduet fra ulike perspektiver, spesielt nÜr du bruker bÜde feltet Vis som linjer og feltet Vis som kolonner.;
                           SVE=Anger vilka vÑrden som visas som kolumner i fînstret. Det gîr det mîjligt att visa samma matrisfînster med flera olika perspektiv, sÑrskilt om du anvÑnder bÜde fÑltet Visa som rader och fÑltet Visa som kolumner.];
                ApplicationArea=#Dimensions;
                SourceExpr=ColumnDimCode;
                OnValidate=BEGIN
                             IF (UPPERCASE(LineDimCode) = UPPERCASE(ColumnDimCode)) AND (LineDimCode <> '') THEN BEGIN
                               LineDimCode := '';
                               ValidateLineDimCode;
                             END;
                             ValidateColumnDimCode;

                             CurrPage.UPDATE;
                             CreateCaptionSet(Rec,Step::First,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                           END;

                OnLookup=VAR
                           NewCode@1002 : Text[30];
                         BEGIN
                           NewCode := GetDimSelection(ColumnDimCode);
                           IF NewCode = ColumnDimCode THEN
                             EXIT(FALSE);

                           Text := NewCode;
                           ColumnDimCode := NewCode;
                           ValidateColumnDimCode;
                           CreateCaptionSet(Rec,Step::First,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                           CurrPage.UPDATE;
                           EXIT(TRUE);
                         END;
                          }

    { 1907524401;1;Group  ;
                CaptionML=[ENU=Filters;
                           NOR=Filtre;
                           SVE=Filter] }

    { 36  ;2   ;Field     ;
                CaptionML=[ENU=Date Filter;
                           NOR=Datofilter;
                           SVE=Datumfilter];
                ToolTipML=[ENU=Specifies the dates that will be used to filter the amounts in the window.;
                           NOR=Angir datoene som skal brukes til Ü filtrere belõpene i vinduet.;
                           SVE=Anger datumen som filtrerar beloppen i fînstret.];
                ApplicationArea=#Dimensions;
                SourceExpr=DateFilter;
                Importance=Promoted;
                OnValidate=VAR
                             GLAcc@1001 : Record 15;
                             TextManagement@1000 : Codeunit 41;
                           BEGIN
                             TextManagement.MakeDateFilter(DateFilter);
                             GLAcc.SETFILTER("Date Filter",DateFilter);
                             DateFilter := GLAcc.GETFILTER("Date Filter");
                             InternalDateFilter := DateFilter;
                             IF ColumnDimOption = ColumnDimOption::Period THEN
                               CreateCaptionSet(Rec,Step::First,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                             CurrPage.UPDATE;
                           END;
                            }

    { 38  ;2   ;Field     ;
                CaptionML=[ENU=Account Filter;
                           NOR=Kontofilter;
                           SVE=Kontofilter];
                ToolTipML=[ENU=Specifies a filter for the general ledger accounts for which entries will be shown in the matrix window.;
                           NOR=Angir et filter for finanskonti som poster blir vist for i matrisevinduet.;
                           SVE=Anger ett filter fîr redovisningskonton fîr vilka transaktioner visas i tabellfînstret.];
                ApplicationArea=#Dimensions;
                SourceExpr=AccFilter;
                OnValidate=BEGIN
                             IF (ColumnDimOption = ColumnDimOption::"G/L Account") OR (ColumnDimOption = ColumnDimOption::"Cash Flow Account") THEN
                               CreateCaptionSet(Rec,Step::First,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                             CurrPage.UPDATE;
                           END;

                OnLookup=VAR
                           GLAccList@1002 : Page 18;
                           CFAccList@1000 : Page 855;
                         BEGIN
                           IF GLAccountSource THEN BEGIN
                             GLAccList.LOOKUPMODE(TRUE);
                             IF NOT (GLAccList.RUNMODAL = ACTION::LookupOK) THEN
                               EXIT(FALSE);

                             Text := GLAccList.GetSelectionFilter;
                           END ELSE BEGIN
                             CFAccList.LOOKUPMODE(TRUE);
                             IF NOT (CFAccList.RUNMODAL = ACTION::LookupOK) THEN
                               EXIT(FALSE);

                             Text := CFAccList.GetSelectionFilter;
                           END;
                           EXIT(TRUE);
                         END;
                          }

    { 22  ;2   ;Field     ;
                ApplicationArea=#Dimensions;
                SourceExpr=BusUnitFilter;
                CaptionClass='3,' + BusUnitFilterCaption;
                Visible=GLAccountSource;
                OnLookup=VAR
                           BusUnitList@1002 : Page 240;
                         BEGIN
                           BusUnitList.LOOKUPMODE(TRUE);
                           IF NOT (BusUnitList.RUNMODAL = ACTION::LookupOK) THEN
                             EXIT(FALSE);
                           Text := BusUnitList.GetSelectionFilter;
                           EXIT(TRUE);
                         END;
                          }

    { 1013;2   ;Field     ;
                CaptionML=[ENU=Cash Flow Forecast Filter;
                           NOR=Filter for kontantstrõmprognose;
                           SVE=Filter fîr kassaflîdesprognos];
                ToolTipML=[ENU=Specifies the cash flow forecast that information in the matrix is shown for.;
                           NOR=Angir kontantstrõmprognosen som informasjonen i matrisen vises for.;
                           SVE=Anger kassaflîdesprognosen som informationen i tabellen visas fîr.];
                ApplicationArea=#Dimensions;
                SourceExpr=CashFlowFilter;
                TableRelation="Cash Flow Forecast";
                Visible=(GLAccountSource = FALSE);
                LookupPageID=Cash Flow Forecast List;
                OnValidate=BEGIN
                             IF ColumnDimOption = ColumnDimOption::"Cash Flow Forecast" THEN
                               CreateCaptionSet(Rec,Step::First,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                             CurrPage.UPDATE;
                           END;
                            }

    { 53  ;2   ;Field     ;
                CaptionML=[ENU=Budget Filter;
                           NOR=Budsjettfilter;
                           SVE=Budgetfilter];
                ToolTipML=[ENU=Specifies the budget that information in the matrix is shown for.;
                           NOR=Angir budsjettet som informasjonen i matrisen vises for.;
                           SVE=Anger budgeten som informationen i tabellen visas fîr.];
                ApplicationArea=#Dimensions;
                SourceExpr=BudgetFilter;
                TableRelation="G/L Budget Name".Name;
                Visible=GLAccountSource;
                LookupPageID=G/L Budget Names }

    { 34  ;2   ;Field     ;
                Name=Dim1Filter;
                CaptionML=[ENU=Dimension 1 Filter;
                           NOR=Filter for dimensjon 1;
                           SVE=Dimension 1 filter];
                ToolTipML=[ENU=Specifies a filter for the Dimension 1 for which entries will be shown in the matrix window.;
                           NOR=Angir et filter for Dimensjon 1, som poster blir vist for i matrisevinduet.;
                           SVE=Anger ett filter fîr Dimension 1 fîr vilka transaktioner visas i tabellfînstret.];
                ApplicationArea=#Dimensions;
                SourceExpr=Dim1Filter;
                CaptionClass=GetCaptionClass(1);
                Enabled=Dim1FilterEnable;
                OnValidate=BEGIN
                             IF ColumnDimOption = ColumnDimOption::"Dimension 1" THEN
                               CreateCaptionSet(Rec,Step::First,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                             CurrPage.UPDATE;
                           END;

                OnLookup=BEGIN
                           EXIT(LookUpDimFilter(AnalysisView."Dimension 1 Code",Text));
                         END;
                          }

    { 30  ;2   ;Field     ;
                Name=Dim2Filter;
                CaptionML=[ENU=Dimension 2 Filter;
                           NOR=Filter for dimensjon 2;
                           SVE=Dimension 2 filter];
                ToolTipML=[ENU=Specifies a filter for the Dimension 2 for which entries will be shown in the matrix window.;
                           NOR=Angir et filter for Dimensjon 2, som poster blir vist for i matrisevinduet.;
                           SVE=Anger ett filter fîr Dimension 2 fîr vilka transaktioner visas i tabellfînstret.];
                ApplicationArea=#Dimensions;
                SourceExpr=Dim2Filter;
                CaptionClass=GetCaptionClass(2);
                Enabled=Dim2FilterEnable;
                OnValidate=BEGIN
                             IF ColumnDimOption = ColumnDimOption::"Dimension 2" THEN
                               CreateCaptionSet(Rec,Step::First,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                             CurrPage.UPDATE;
                           END;

                OnLookup=BEGIN
                           EXIT(LookUpDimFilter(AnalysisView."Dimension 2 Code",Text));
                         END;
                          }

    { 46  ;2   ;Field     ;
                Name=Dim3Filter;
                CaptionML=[ENU=Dimension 3 Filter;
                           NOR=Filter for dimensjon 3;
                           SVE=Dimension 3 filter];
                ToolTipML=[ENU=Specifies a filter for the Dimension 3 for which entries will be shown in the matrix window.;
                           NOR=Angir et filter for Dimensjon 3, som poster blir vist for i matrisevinduet.;
                           SVE=Anger ett filter fîr Dimension 3 fîr vilka transaktioner visas i tabellfînstret.];
                ApplicationArea=#Dimensions;
                SourceExpr=Dim3Filter;
                CaptionClass=GetCaptionClass(3);
                Enabled=Dim3FilterEnable;
                OnValidate=BEGIN
                             IF ColumnDimOption = ColumnDimOption::"Dimension 3" THEN
                               CreateCaptionSet(Rec,Step::First,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                             CurrPage.UPDATE;
                           END;

                OnLookup=BEGIN
                           EXIT(LookUpDimFilter(AnalysisView."Dimension 3 Code",Text));
                         END;
                          }

    { 35  ;2   ;Field     ;
                Name=Dim4Filter;
                CaptionML=[ENU=Dimension 4 Filter;
                           NOR=Filter for dimensjon 4;
                           SVE=Dimension 4 filter];
                ToolTipML=[ENU=Specifies a filter for the Dimension 4 for which entries will be shown in the matrix window.;
                           NOR=Angir et filter for Dimensjon 4, som poster blir vist for i matrisevinduet.;
                           SVE=Anger ett filter fîr Dimension 4 fîr vilka transaktioner visas i tabellfînstret.];
                ApplicationArea=#Dimensions;
                SourceExpr=Dim4Filter;
                CaptionClass=GetCaptionClass(4);
                Enabled=Dim4FilterEnable;
                OnValidate=BEGIN
                             IF ColumnDimOption = ColumnDimOption::"Dimension 4" THEN
                               CreateCaptionSet(Rec,Step::First,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                             CurrPage.UPDATE;
                           END;

                OnLookup=BEGIN
                           EXIT(LookUpDimFilter(AnalysisView."Dimension 4 Code",Text));
                         END;
                          }

    { 1903121901;1;Group  ;
                CaptionML=[ENU=Options;
                           NOR=Alternativer;
                           SVE=Alternativ] }

    { 29  ;2   ;Field     ;
                CaptionML=[ENU=Show;
                           NOR=Vis;
                           SVE=Visa];
                ToolTipML=[ENU=Specifies if the selected value is shown in the window.;
                           NOR=Angir om den valgte verdien vises i vinduet.;
                           SVE=Anger om det valda vÑrdet visas i fînstret.];
                OptionCaptionML=[ENU=Actual Amounts,Budgeted Amounts,Variance,Variance%,Index%,Amounts;
                                 NOR=Faktiske belõp,Budsjetterte belõp,Avvik,Avviks-%,Indeks-%,Belõp;
                                 SVE=Aktuella belopp,Budgeterade belopp,Varians,Varians%,Index%,Belopp];
                ApplicationArea=#Dimensions;
                SourceExpr=ShowActualBudg;
                Importance=Promoted;
                Visible=GLAccountSource }

    { 47  ;2   ;Field     ;
                CaptionML=[ENU=Show Amount Field;
                           NOR=Vis belõpsfelt;
                           SVE=Visa beloppsfÑlt];
                ToolTipML=[ENU=Specifies the type of entries that will be included in the matrix window. The Amount options means that amounts that are the sum of debit and credit amounts are shown.;
                           NOR=Angir typen poster som blir inkludert i matrisevinduet. Belõpsalternativene betyr at belõp som er summen debet- og kreditbelõp, blir vist.;
                           SVE=Anger den typ av transaktioner som tas med i tabellfînstret. Alternativet Belopp innebÑr att belopp som Ñr summan av debet- och kreditbelopp visas.];
                OptionCaptionML=[ENU=Amount,Debit Amount,Credit Amount;
                                 NOR=Belõp,Debetbelõp,Kreditbelõp;
                                 SVE=Belopp,Debetbelopp,Kreditbelopp];
                ApplicationArea=#Dimensions;
                SourceExpr=AmountField }

    { 52  ;2   ;Field     ;
                CaptionML=[ENU=Closing Entries;
                           NOR=Avslutningsposter;
                           SVE=èrsavslutstransaktioner];
                ToolTipML=[ENU=Specifies whether the amounts shown in the matrix window will include closing entries.;
                           NOR=Angir om belõpene som vises i matrisevinduet skal inneholde avslutningsposter eller ikke.;
                           SVE=Anger om de belopp som visas i matrisfînstret ska inkludera Ürsavslutstransaktioner eller inte.];
                OptionCaptionML=[ENU=Include,Exclude;
                                 NOR=Inkluder,Ekskluder;
                                 SVE=Inkludera,Exkludera];
                ApplicationArea=#Dimensions;
                SourceExpr=ClosingEntryFilter;
                Visible=GLAccountSource;
                OnValidate=BEGIN
                             FindPeriod('=');
                           END;
                            }

    { 18  ;2   ;Field     ;
                CaptionML=[ENU=Rounding Factor;
                           NOR=Avrundingsfaktor;
                           SVE=Avrundningsfaktor];
                ToolTipML=[ENU=Specifies the factor that is used to round the amounts.;
                           NOR=Angir faktoren som brukes til Ü avrunde belõpene.;
                           SVE=Anger faktorn som avrundar beloppen.];
                OptionCaptionML=[ENU=None,1,1000,1000000;
                                 NOR=Ingen,1,1000,1000000;
                                 SVE=Ingen,1,1000,1000000];
                ApplicationArea=#Dimensions;
                SourceExpr=RoundingFactor }

    { 49  ;2   ;Field     ;
                CaptionML=[ENU=Show Amounts in Add. Reporting Currency;
                           NOR=Vis belõp i tilleggsrapp.valuta;
                           SVE=Visa belopp i alt. rapporteringsvaluta];
                ToolTipML=[ENU=Specifies if the reported amounts are shown in the additional reporting currency.;
                           NOR=Angir om de rapporterte belõpene vises i tilleggsrapporteringsvalutaen.;
                           SVE=Anger om de rapporterade beloppen visas i den alternativa rapporteringsvalutan.];
                ApplicationArea=#Dimensions;
                SourceExpr=ShowInAddCurr;
                Visible=GLAccountSource;
                MultiLine=Yes }

    { 4   ;2   ;Field     ;
                CaptionML=[ENU=Show Column Name;
                           NOR=Vis kolonnenavn;
                           SVE=Visa kolumnnamn];
                ToolTipML=[ENU=Specifies that the names of columns are shown in the matrix window.;
                           NOR=Angir at navnene pÜ kolonnene vises i matrisevinduet.;
                           SVE=Anger namnen pÜ kolumnerna som visas i matrisfînstret.];
                ApplicationArea=#Dimensions;
                SourceExpr=ShowColumnName;
                OnValidate=BEGIN
                             CreateCaptionSet(Rec,Step::First,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                           END;
                            }

    { 54  ;2   ;Field     ;
                CaptionML=[ENU=Show Opposite Sign;
                           NOR=Vis motsatt fortegn;
                           SVE=Visa motsatt tecken];
                ToolTipML=[ENU=Specifies whether to show debits as negative amounts (with minus signs) and credits as positive amounts in the matrix window.;
                           NOR=Angir om du vil vise debet som negative belõp (med et minustegn) og kredit som positive belõp i matrisevinduet.;
                           SVE=Anger om debet ska visas som negativa belopp (med minustecken) och kredit ska visas som positiva belopp i tabellfînstret.];
                ApplicationArea=#Dimensions;
                SourceExpr=ShowOppositeSign;
                MultiLine=Yes }

    { 1906098301;1;Group  ;
                CaptionML=[ENU=Matrix Options;
                           NOR=Matrisealternativer;
                           SVE=Matrisalternativ] }

    { 13  ;2   ;Field     ;
                CaptionML=[ENU=View by;
                           NOR=Vis etter;
                           SVE=Visa per];
                ToolTipML=[ENU=Specifies by which period amounts are displayed.;
                           NOR=Angir hvilken periode belõp vises basert pÜ.;
                           SVE=Anger efter vilken period belopp visas.];
                OptionCaptionML=[ENU=Day,Week,Month,Quarter,Year,Accounting Period;
                                 NOR=Dag,Uke,MÜned,Kvartal,èr,Regnskapsperiode;
                                 SVE=Dag,Vecka,MÜnad,Kvartal,èr,Bokfîringsperiod];
                ApplicationArea=#Dimensions;
                SourceExpr=PeriodType;
                Importance=Promoted;
                OnValidate=BEGIN
                             FindPeriod('');
                             IF ColumnDimOption = ColumnDimOption::Period THEN
                               CreateCaptionSet(Rec,Step::First,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                           END;
                            }

    { 14  ;2   ;Field     ;
                CaptionML=[ENU=Column Set;
                           NOR=Kolonnesett;
                           SVE=KolumnuppsÑttning];
                ToolTipML=[ENU=Specifies the range of values that are displayed in the matrix window, for example, the total period. To change the contents of the field, choose Next Set or Previous Set.;
                           NOR=Angir verdiomrÜdene som vises i matrisevinduet, for eksempel hele perioden. Hvis du vil endre innholdet i feltet, velger du Neste sett eller Forrige sett.;
                           SVE=Anger vÑrdeintervallen som visas i tabellfînstret, till exempel hela perioden. Om du vill Ñndra innehÜllet i fÑltet vÑljer du NÑsta uppsÑttning eller FîregÜende uppsÑttning.];
                ApplicationArea=#Dimensions;
                SourceExpr=ColumnsSet;
                Editable=FALSE }

    { 20  ;2   ;Field     ;
                CaptionML=[ENU=View as;
                           NOR=Vis som;
                           SVE=Visa som];
                ToolTipML=[ENU=Specifies how amounts are displayed. Net Change: The net change in the balance for the selected period. Balance at Date: The balance as of the last day in the selected period.;
                           NOR=Angir hvordan belõp skal vises. Bevegelse: Bevegelsen i balansen for den valgte perioden. Saldo per dato: Saldoen per siste dag i den valgte perioden.;
                           SVE=Anger hur belopp visas. NettofîrÑndring: NettofîrÑndringen i saldot fîr den valda perioden. Saldo t.o.m. datum: Saldot per den sista dagen i den valda perioden.];
                OptionCaptionML=[ENU=Net Change,Balance at Date;
                                 NOR=Bevegelse,Saldo per dato;
                                 SVE=NettofîrÑndring,Saldo t.o.m. datum];
                ApplicationArea=#Dimensions;
                SourceExpr=QtyType }

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Period;NOR=Periode;SVE=Period';
      Text002@1002 : TextConst 'ENU=You have not yet defined an analysis view.;NOR=Du har enda ikke definert en analysevisning.;SVE=Du har inte definierat en analysvy.';
      Text003@1003 : TextConst 'ENU=%1 is not a valid line definition.;NOR=%1 er ikke en gyldig linjedefinisjon.;SVE=%1 Ñr inte en giltig raddefinition.';
      Text004@1004 : TextConst 'ENU=%1 is not a valid column definition.;NOR=%1 er ikke en gyldig kolonnedefinisjon.;SVE=%1 Ñr inte en giltig kolumndefinition.';
      Text005@1005 : TextConst 'ENU=1,6,,Dimension 1 Filter;NOR=1,6,,Filter for dimensjon 1;SVE=1,6,,Dimension 1 filter';
      Text006@1006 : TextConst 'ENU=1,6,,Dimension 2 Filter;NOR=1,6,,Filter for dimensjon 2;SVE=1,6,,Dimension 2 filter';
      Text007@1007 : TextConst 'ENU=1,6,,Dimension 3 Filter;NOR=1,6,,Filter for dimensjon 3;SVE=1,6,,Dimension 3 filter';
      Text008@1008 : TextConst 'ENU=1,6,,Dimension 4 Filter;NOR=1,6,,Filter for dimensjon 4;SVE=1,6,,Dimension 4 filter';
      GLSetup@1009 : Record 98;
      AnalysisView@1011 : Record 363;
      AnalysisViewEntry@1012 : Record 365;
      Currency@1044 : Record 4;
      LineDimOption@1017 : 'G/L Account,Period,Business Unit,Dimension 1,Dimension 2,Dimension 3,Dimension 4,Cash Flow Account,Cash Flow Forecast';
      ColumnDimOption@1018 : 'G/L Account,Period,Business Unit,Dimension 1,Dimension 2,Dimension 3,Dimension 4,Cash Flow Account,Cash Flow Forecast';
      PeriodType@1021 : 'Day,Week,Month,Quarter,Year,Accounting Period';
      AmountType@1022 : 'Net Change,Balance at Date';
      RoundingFactor@1023 : 'None,1,1000,1000000';
      AmountField@1024 : 'Amount,Debit Amount,Credit Amount';
      ShowActualBudg@1025 : 'Actual Amounts,Budgeted Amounts,Variance,Variance%,Index%,Amounts';
      ClosingEntryFilter@1028 : 'Include,Exclude';
      GLAccountSource@1014 : Boolean INDATASET;
      LineDimCode@1015 : Text[30];
      ColumnDimCode@1010 : Text[30];
      DateFilter@1030 : Text;
      InternalDateFilter@1031 : Text;
      CashFlowFilter@1129 : Text;
      ColumnCaptions@1046 : ARRAY [32] OF Text[80];
      PrimaryKeyFirstColInSet@1054 : Text[1024];
      ColumnsSet@1055 : Text[1024];
      AnalysisViewCode@1016 : Code[10];
      NewAnalysisViewCode@1059 : Code[10];
      AccFilter@1033 : Text;
      BudgetFilter@1034 : Text;
      Dim1Filter@1035 : Text;
      Dim2Filter@1036 : Text;
      Dim3Filter@1037 : Text;
      Dim4Filter@1038 : Text;
      ShowOppositeSign@1027 : Boolean;
      ShowColumnName@1029 : Boolean;
      PeriodInitialized@1041 : Boolean;
      ShowInAddCurr@1026 : Boolean;
      BusUnitFilter@1043 : Text;
      Step@1056 : 'First,Previous,Same,Next';
      QtyType@1058 : 'Net Change,Balance at Date';
      BusUnitFilterCaption@1001 : Text[80];
      Dim1FilterEnable@19054192 : Boolean INDATASET;
      Dim2FilterEnable@19062512 : Boolean INDATASET;
      Dim3FilterEnable@19011605 : Boolean INDATASET;
      Dim4FilterEnable@19064250 : Boolean INDATASET;
      Text009@1013 : TextConst 'ENU=Unsupported Account Source %1.;NOR=Kontokilden %1 stõttes ikke.;SVE=KontokÑllan %1 stîds inte.';

    LOCAL PROCEDURE DimCodeToOption@21(DimCode@1000 : Text[30]) : Integer;
    VAR
      AccountCaption@1002 : Text[30];
      UnitCaption@1003 : Text[30];
    BEGIN
      GetAccountCaption(AccountCaption,UnitCaption);
      CASE DimCode OF
        AccountCaption:
          BEGIN
            IF GLAccountSource THEN
              EXIT(0);
            EXIT(7);
          END;
        Text000:
          EXIT(1);
        UnitCaption:
          BEGIN
            IF GLAccountSource THEN
              EXIT(2);
            EXIT(8);
          END;
        AnalysisView."Dimension 1 Code":
          EXIT(3);
        AnalysisView."Dimension 2 Code":
          EXIT(4);
        AnalysisView."Dimension 3 Code":
          EXIT(5);
        AnalysisView."Dimension 4 Code":
          EXIT(6);
        ELSE
          EXIT(-1);
      END;
    END;

    LOCAL PROCEDURE FindRec@59(DimOption@1000 : 'G/L Account,Period,Business Unit,Dimension 1,Dimension 2,Dimension 3,Dimension 4,Cash Flow Account,Cash Flow Forecast';VAR DimCodeBuf@1001 : Record 367;Which@1002 : Text[250]) : Boolean;
    VAR
      GLAcc@1003 : Record 15;
      BusUnit@1004 : Record 220;
      CFAccount@1023 : Record 841;
      CashFlowForecast@1024 : Record 840;
      Period@1005 : Record 2000000007;
      DimVal@1006 : Record 349;
      PeriodFormMgt@1007 : Codeunit 359;
      Found@1008 : Boolean;
      DPA_Management@1100528400 : Codeunit 11012783;
    BEGIN
      CASE DimOption OF
        DimOption::"G/L Account":
          BEGIN
            GLAcc."No." := DimCodeBuf.Code;
            IF AccFilter <> '' THEN
              GLAcc.SETFILTER("No.",AccFilter);
            Found := GLAcc.FIND(Which);
            IF Found THEN
              CopyGLAccToBuf(GLAcc,DimCodeBuf);
          END;
        DimOption::"Cash Flow Account":
          BEGIN
            CFAccount."No." := DimCodeBuf.Code;
            IF AccFilter <> '' THEN
              CFAccount.SETFILTER("No.",AccFilter);
            Found := CFAccount.FIND(Which);
            IF Found THEN
              CopyCFAccToBuf(CFAccount,DimCodeBuf);
          END;
        DimOption::Period:
          BEGIN
            IF NOT PeriodInitialized THEN
              DateFilter := '';
            PeriodInitialized := TRUE;
            Period."Period Start" := DimCodeBuf."Period Start";
            IF DateFilter <> '' THEN
              Period.SETFILTER("Period Start",DateFilter)
            ELSE
              IF InternalDateFilter <> '' THEN
                Period.SETFILTER("Period Start",InternalDateFilter);
            Found := PeriodFormMgt.FindDate(Which,Period,PeriodType);
            IF Found THEN
              CopyPeriodToBuf(Period,DimCodeBuf);
          END;
        DimOption::"Business Unit":
          BEGIN
            BusUnit.Code := DimCodeBuf.Code;
            IF BusUnitFilter <> '' THEN
              BusUnit.SETFILTER(Code,BusUnitFilter);
            Found := BusUnit.FIND(Which);
            IF Found THEN
              CopyBusUnitToBuf(BusUnit,DimCodeBuf);
          END;
        DimOption::"Cash Flow Forecast":
          BEGIN
            CashFlowForecast."No." := DimCodeBuf.Code;
            IF CashFlowFilter <> '' THEN
              CashFlowForecast.SETFILTER("No.",CashFlowFilter);
            Found := CashFlowForecast.FIND(Which);
            IF Found THEN
              CopyCashFlowToBuf(CashFlowForecast,DimCodeBuf);
          END;
        DimOption::"Dimension 1":
          BEGIN
            IF Dim1Filter <> '' THEN
              DimVal.SETFILTER(Code,Dim1Filter);
            DimVal."Dimension Code" := AnalysisView."Dimension 1 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            //**4PS.sn
            IF DPA_IsActive THEN
              DPA_Management.AddHardGLAccAVDPAFiltToDimVal(
                DimVal,
                CurrPage.OBJECTID(FALSE));
            //**4PS.en
            DimVal.Code := DimCodeBuf.Code;
            Found := DimVal.FIND(Which);
            IF Found THEN
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          END;
        DimOption::"Dimension 2":
          BEGIN
            IF Dim2Filter <> '' THEN
              DimVal.SETFILTER(Code,Dim2Filter);
            DimVal."Dimension Code" := AnalysisView."Dimension 2 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            //**4PS.sn
            IF DPA_IsActive THEN
              DPA_Management.AddHardGLAccAVDPAFiltToDimVal(
                DimVal,
                CurrPage.OBJECTID(FALSE));
            //**4PS.en
            DimVal.Code := DimCodeBuf.Code;
            Found := DimVal.FIND(Which);
            IF Found THEN
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          END;
        DimOption::"Dimension 3":
          BEGIN
            IF Dim3Filter <> '' THEN
              DimVal.SETFILTER(Code,Dim3Filter);
            DimVal."Dimension Code" := AnalysisView."Dimension 3 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            //**4PS.sn
            IF DPA_IsActive THEN
              DPA_Management.AddHardGLAccAVDPAFiltToDimVal(
                DimVal,
                CurrPage.OBJECTID(FALSE));
            //**4PS.en
            DimVal.Code := DimCodeBuf.Code;
            Found := DimVal.FIND(Which);
            IF Found THEN
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          END;
        DimOption::"Dimension 4":
          BEGIN
            IF Dim4Filter <> '' THEN
              DimVal.SETFILTER(Code,Dim4Filter);
            DimVal."Dimension Code" := AnalysisView."Dimension 4 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            //**4PS.sn
            IF DPA_IsActive THEN
              DPA_Management.AddHardGLAccAVDPAFiltToDimVal(
                DimVal,
                CurrPage.OBJECTID(FALSE));
            //**4PS.en
            DimVal.Code := DimCodeBuf.Code;
            Found := DimVal.FIND(Which);
            IF Found THEN
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          END;
      END;
      EXIT(Found);
    END;

    LOCAL PROCEDURE NextRec@60(DimOption@1000 : 'G/L Account,Period,Business Unit,Dimension 1,Dimension 2,Dimension 3,Dimension 4,Cash Flow Account,Cash Flow Forecast';VAR DimCodeBuf@1001 : Record 367;Steps@1002 : Integer) : Integer;
    VAR
      GLAcc@1003 : Record 15;
      BusUnit@1004 : Record 220;
      CFAccount@1023 : Record 841;
      CashFlowForecast@1024 : Record 840;
      Period@1005 : Record 2000000007;
      DimVal@1006 : Record 349;
      PeriodFormMgt@1007 : Codeunit 359;
      ResultSteps@1008 : Integer;
      DPA_Management@1100528400 : Codeunit 11012783;
    BEGIN
      CASE DimOption OF
        DimOption::"G/L Account":
          BEGIN
            GLAcc."No." := DimCodeBuf.Code;
            IF AccFilter <> '' THEN
              GLAcc.SETFILTER("No.",AccFilter);
            ResultSteps := GLAcc.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyGLAccToBuf(GLAcc,DimCodeBuf);
          END;
        DimOption::"Cash Flow Account":
          BEGIN
            CFAccount."No." := DimCodeBuf.Code;
            IF AccFilter <> '' THEN
              CFAccount.SETFILTER("No.",AccFilter);
            ResultSteps := CFAccount.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyCFAccToBuf(CFAccount,DimCodeBuf);
          END;
        DimOption::Period:
          BEGIN
            IF DateFilter <> '' THEN
              Period.SETFILTER("Period Start",DateFilter);
            Period."Period Start" := DimCodeBuf."Period Start";
            ResultSteps := PeriodFormMgt.NextDate(Steps,Period,PeriodType);
            IF ResultSteps <> 0 THEN
              CopyPeriodToBuf(Period,DimCodeBuf);
          END;
        DimOption::"Business Unit":
          BEGIN
            BusUnit.Code := DimCodeBuf.Code;
            IF BusUnitFilter <> '' THEN
              BusUnit.SETFILTER(Code,BusUnitFilter);
            ResultSteps := BusUnit.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyBusUnitToBuf(BusUnit,DimCodeBuf);
          END;
        DimOption::"Cash Flow Forecast":
          BEGIN
            CashFlowForecast."No." := DimCodeBuf.Code;
            IF CashFlowFilter <> '' THEN
              CashFlowForecast.SETFILTER("No.",CashFlowFilter);
            ResultSteps := CashFlowForecast.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyCashFlowToBuf(CashFlowForecast,DimCodeBuf);
          END;
        DimOption::"Dimension 1":
          BEGIN
            IF Dim1Filter <> '' THEN
              DimVal.SETFILTER(Code,Dim1Filter);
            DimVal."Dimension Code" := AnalysisView."Dimension 1 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            //**4PS.sn
            IF DPA_IsActive THEN
              DPA_Management.AddHardGLAccAVDPAFiltToDimVal(
                DimVal,
                CurrPage.OBJECTID(FALSE));
            //**4PS.en
            DimVal.Code := DimCodeBuf.Code;
            ResultSteps := DimVal.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          END;
        DimOption::"Dimension 2":
          BEGIN
            IF Dim2Filter <> '' THEN
              DimVal.SETFILTER(Code,Dim2Filter);
            DimVal."Dimension Code" := AnalysisView."Dimension 2 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            //**4PS.sn
            IF DPA_IsActive THEN
              DPA_Management.AddHardGLAccAVDPAFiltToDimVal(
                DimVal,
                CurrPage.OBJECTID(FALSE));
            //**4PS.en
            DimVal.Code := DimCodeBuf.Code;
            ResultSteps := DimVal.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          END;
        DimOption::"Dimension 3":
          BEGIN
            IF Dim3Filter <> '' THEN
              DimVal.SETFILTER(Code,Dim3Filter);
            DimVal."Dimension Code" := AnalysisView."Dimension 3 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            //**4PS.sn
            IF DPA_IsActive THEN
              DPA_Management.AddHardGLAccAVDPAFiltToDimVal(
                DimVal,
                CurrPage.OBJECTID(FALSE));
            //**4PS.en
            DimVal.Code := DimCodeBuf.Code;
            ResultSteps := DimVal.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          END;
        DimOption::"Dimension 4":
          BEGIN
            IF Dim4Filter <> '' THEN
              DimVal.SETFILTER(Code,Dim4Filter);
            DimVal."Dimension Code" := AnalysisView."Dimension 4 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            //**4PS.sn
            IF DPA_IsActive THEN
              DPA_Management.AddHardGLAccAVDPAFiltToDimVal(
                DimVal,
                CurrPage.OBJECTID(FALSE));
            //**4PS.en
            DimVal.Code := DimCodeBuf.Code;
            ResultSteps := DimVal.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          END;
      END;
      EXIT(ResultSteps);
    END;

    LOCAL PROCEDURE CopyGLAccToBuf@1(VAR TheGLAcc@1000 : Record 15;VAR TheDimCodeBuf@1001 : Record 367);
    BEGIN
      WITH TheDimCodeBuf DO BEGIN
        INIT;
        Code := TheGLAcc."No.";
        Name := TheGLAcc.Name;
        Totaling := TheGLAcc.Totaling;
        Indentation := TheGLAcc.Indentation;
        "Show in Bold" := TheGLAcc."Account Type" <> TheGLAcc."Account Type"::Posting;
      END;
    END;

    LOCAL PROCEDURE CopyCFAccToBuf@1003(VAR TheCFAcc@1000 : Record 841;VAR TheDimCodeBuf@1001 : Record 367);
    BEGIN
      WITH TheDimCodeBuf DO BEGIN
        INIT;
        Code := TheCFAcc."No.";
        Name := TheCFAcc.Name;
        Totaling := TheCFAcc.Totaling;
        Indentation := TheCFAcc.Indentation;
        "Show in Bold" := TheCFAcc."Account Type" <> TheCFAcc."Account Type"::Entry;
      END;
    END;

    LOCAL PROCEDURE CopyPeriodToBuf@8(VAR ThePeriod@1000 : Record 2000000007;VAR TheDimCodeBuf@1001 : Record 367);
    VAR
      Period2@1002 : Record 2000000007;
    BEGIN
      WITH TheDimCodeBuf DO BEGIN
        INIT;
        Code := FORMAT(ThePeriod."Period Start");
        "Period Start" := ThePeriod."Period Start";
        IF ClosingEntryFilter = ClosingEntryFilter::Include THEN
          "Period End" := CLOSINGDATE(ThePeriod."Period End")
        ELSE
          "Period End" := ThePeriod."Period End";
        IF DateFilter <> '' THEN BEGIN
          Period2.SETFILTER("Period End",DateFilter);
          IF Period2.GETRANGEMAX("Period End") < "Period End" THEN
            "Period End" := Period2.GETRANGEMAX("Period End");
        END;
        Name := ThePeriod."Period Name";
      END;
    END;

    LOCAL PROCEDURE CopyBusUnitToBuf@5(VAR TheBusUnit@1000 : Record 220;VAR TheDimCodeBuf@1001 : Record 367);
    BEGIN
      WITH TheDimCodeBuf DO BEGIN
        INIT;
        Code := TheBusUnit.Code;
        Name := TheBusUnit.Name;
      END;
    END;

    LOCAL PROCEDURE CopyCashFlowToBuf@1005(VAR TheCashFlowForecast@1000 : Record 840;VAR TheDimCodeBuf@1001 : Record 367);
    BEGIN
      WITH TheDimCodeBuf DO BEGIN
        INIT;
        Code := TheCashFlowForecast."No.";
        Name := TheCashFlowForecast.Description;
      END;
    END;

    LOCAL PROCEDURE CopyDimValueToBuf@9(VAR TheDimVal@1000 : Record 349;VAR TheDimCodeBuf@1001 : Record 367);
    BEGIN
      WITH TheDimCodeBuf DO BEGIN
        INIT;
        Code := TheDimVal.Code;
        Name := TheDimVal.Name;
        Totaling := TheDimVal.Totaling;
        Indentation := TheDimVal.Indentation;
        "Show in Bold" :=
          TheDimVal."Dimension Value Type" <> TheDimVal."Dimension Value Type"::Standard;
      END;
    END;

    LOCAL PROCEDURE FindPeriod@2(SearchText@1000 : Code[10]);
    VAR
      Calendar@1001 : Record 2000000007;
      PeriodFormMgt@1002 : Codeunit 359;
      TempDate@1003 : Date;
    BEGIN
      IF NOT PeriodInitialized THEN
        DateFilter := '';
      IF (DateFilter <> '') AND EVALUATE(TempDate,DateFilter) THEN BEGIN
        Calendar.SETFILTER("Period Start",DateFilter);
        IF NOT PeriodFormMgt.FindDate('+',Calendar,PeriodType) THEN
          PeriodFormMgt.FindDate('+',Calendar,PeriodType::Day);
        Calendar.SETRANGE("Period Start");
      END;
      IF PeriodFormMgt.FindDate(SearchText,Calendar,PeriodType) THEN
        IF ClosingEntryFilter = ClosingEntryFilter::Include THEN
          Calendar."Period End" := CLOSINGDATE(Calendar."Period End");
      IF AmountType = AmountType::"Net Change" THEN BEGIN
        AnalysisViewEntry.SETRANGE("Posting Date",Calendar."Period Start",Calendar."Period End");
        IF AnalysisViewEntry.GETRANGEMIN("Posting Date") = AnalysisViewEntry.GETRANGEMAX("Posting Date") THEN
          AnalysisViewEntry.SETRANGE("Posting Date",AnalysisViewEntry.GETRANGEMIN("Posting Date"));
      END ELSE
        AnalysisViewEntry.SETRANGE("Posting Date",0D,Calendar."Period End");

      InternalDateFilter := AnalysisViewEntry.GETFILTER("Posting Date");
      IF (LineDimOption <> LineDimOption::Period) AND (ColumnDimOption <> ColumnDimOption::Period) THEN
        DateFilter := InternalDateFilter;
    END;

    LOCAL PROCEDURE GetDimSelection@3(OldDimSelCode@1000 : Text[30]) : Text[30];
    VAR
      DimSelection@1001 : Page 568;
      AccountCaption@1003 : Text[30];
      UnitCaption@1002 : Text[30];
    BEGIN
      GetAccountCaption(AccountCaption,UnitCaption);
      DimSelection.InsertDimSelBuf(FALSE,AccountCaption,AccountCaption);
      DimSelection.InsertDimSelBuf(FALSE,Text000,Text000);
      DimSelection.InsertDimSelBuf(FALSE,UnitCaption,UnitCaption);

      IF AnalysisView."Dimension 1 Code" <> '' THEN
        DimSelection.InsertDimSelBuf(FALSE,AnalysisView."Dimension 1 Code",'');
      IF AnalysisView."Dimension 2 Code" <> '' THEN
        DimSelection.InsertDimSelBuf(FALSE,AnalysisView."Dimension 2 Code",'');
      IF AnalysisView."Dimension 3 Code" <> '' THEN
        DimSelection.InsertDimSelBuf(FALSE,AnalysisView."Dimension 3 Code",'');
      IF AnalysisView."Dimension 4 Code" <> '' THEN
        DimSelection.InsertDimSelBuf(FALSE,AnalysisView."Dimension 4 Code",'');

      DimSelection.LOOKUPMODE := TRUE;
      IF DimSelection.RUNMODAL = ACTION::LookupOK THEN
        EXIT(DimSelection.GetDimSelCode);

      EXIT(OldDimSelCode);
    END;

    LOCAL PROCEDURE LookUpDimFilter@57(Dim@1000 : Code[20];VAR Text@1001 : Text) : Boolean;
    VAR
      DimVal@1002 : Record 349;
      DimValList@1003 : Page 560;
    BEGIN
      IF Dim = '' THEN
        EXIT(FALSE);
      DimValList.LOOKUPMODE(TRUE);
      DimVal.SETRANGE("Dimension Code",Dim);
      DimValList.SETTABLEVIEW(DimVal);
      IF DimValList.RUNMODAL = ACTION::LookupOK THEN BEGIN
        DimValList.GETRECORD(DimVal);
        Text := DimValList.GetSelectionFilter;
        EXIT(TRUE);
      END;
      EXIT(FALSE)
    END;

    LOCAL PROCEDURE ValidateAnalysisViewCode@11();
    VAR
      AnalysisViewFilter@1000 : Record 364;
      DPA_Management@1100528400 : Codeunit 11012783;
    BEGIN
      AnalysisView.Code := AnalysisViewCode;
      IF NOT AnalysisView.FIND('=<>') THEN
        ERROR(Text002);
      AnalysisViewCode := AnalysisView.Code;
      AccFilter := AnalysisView."Account Filter";
      Dim1Filter := '';
      Dim2Filter := '';
      Dim3Filter := '';
      Dim4Filter := '';
      Dim1Filter := GETFILTER("Dimension 1 Value Filter");
      Dim2Filter := GETFILTER("Dimension 2 Value Filter");
      Dim3Filter := GETFILTER("Dimension 3 Value Filter");
      Dim4Filter := GETFILTER("Dimension 4 Value Filter");

      Dim1FilterEnable :=
        (AnalysisView."Dimension 1 Code" <> '') AND
        (GETFILTER("Dimension 1 Value Filter") = '');
      Dim2FilterEnable :=
        (AnalysisView."Dimension 2 Code" <> '') AND
        (GETFILTER("Dimension 2 Value Filter") = '');
      Dim3FilterEnable :=
        (AnalysisView."Dimension 3 Code" <> '') AND
        (GETFILTER("Dimension 3 Value Filter") = '');
      Dim4FilterEnable :=
        (AnalysisView."Dimension 4 Code" <> '') AND
        (GETFILTER("Dimension 4 Value Filter") = '');

      IF Dim1FilterEnable THEN
        IF AnalysisViewFilter.GET(AnalysisView.Code,AnalysisView."Dimension 1 Code") THEN
          Dim1Filter := AnalysisViewFilter."Dimension Value Filter";

      IF Dim2FilterEnable THEN
        IF AnalysisViewFilter.GET(AnalysisView.Code,AnalysisView."Dimension 2 Code") THEN
          Dim2Filter := AnalysisViewFilter."Dimension Value Filter";

      IF Dim3FilterEnable THEN
        IF AnalysisViewFilter.GET(AnalysisView.Code,AnalysisView."Dimension 3 Code") THEN
          Dim3Filter := AnalysisViewFilter."Dimension Value Filter";

      IF Dim4FilterEnable THEN
        IF AnalysisViewFilter.GET(AnalysisView.Code,AnalysisView."Dimension 4 Code") THEN
          Dim4Filter := AnalysisViewFilter."Dimension Value Filter";

      CASE AnalysisView."Account Source" OF
        AnalysisView."Account Source"::"G/L Account":
          GLAccountSource := TRUE;
        AnalysisView."Account Source"::"Cash Flow Account":
          GLAccountSource := FALSE;
        ELSE
          ERROR(Text009,AnalysisView."Account Source");
      END;

      //**4PS.sn
      IF DPA_IsActive THEN
        DPA_Management.AddSoftAnalysisViewDPAFilter(
          AnalysisView,
          Dim1Filter,
          Dim2Filter,
          Dim3Filter,
          Dim4Filter,
          CurrPage.OBJECTID(FALSE));
      //**4PS.en
    END;

    LOCAL PROCEDURE ValidateLineDimCode@19();
    VAR
      AccountCaption@1002 : Text[30];
      UnitCaption@1003 : Text[30];
    BEGIN
      GetAccountCaption(AccountCaption,UnitCaption);

      IF (UPPERCASE(LineDimCode) <> UPPERCASE(AccountCaption)) AND
         (UPPERCASE(LineDimCode) <> UPPERCASE(UnitCaption)) AND
         (UPPERCASE(LineDimCode) <> UPPERCASE(Text000)) AND
         (UPPERCASE(LineDimCode) <> AnalysisView."Dimension 1 Code") AND
         (UPPERCASE(LineDimCode) <> AnalysisView."Dimension 2 Code") AND
         (UPPERCASE(LineDimCode) <> AnalysisView."Dimension 3 Code") AND
         (UPPERCASE(LineDimCode) <> AnalysisView."Dimension 4 Code") AND
         (LineDimCode <> '')
      THEN BEGIN
        MESSAGE(Text003,LineDimCode);
        LineDimCode := '';
      END;
      LineDimOption := DimCodeToOption(LineDimCode);
      InternalDateFilter := AnalysisViewEntry.GETFILTER("Posting Date");
      IF (LineDimOption <> LineDimOption::Period) AND (ColumnDimOption <> ColumnDimOption::Period) THEN BEGIN
        DateFilter := InternalDateFilter;
        IF STRPOS(DateFilter,'&') > 1 THEN
          DateFilter := COPYSTR(DateFilter,1,STRPOS(DateFilter,'&') - 1);
      END;
    END;

    LOCAL PROCEDURE ValidateColumnDimCode@20();
    VAR
      AccountCaption@1002 : Text[30];
      UnitCaption@1003 : Text[30];
    BEGIN
      GetAccountCaption(AccountCaption,UnitCaption);

      IF (UPPERCASE(ColumnDimCode) <> UPPERCASE(AccountCaption)) AND
         (UPPERCASE(ColumnDimCode) <> UPPERCASE(UnitCaption)) AND
         (UPPERCASE(ColumnDimCode) <> UPPERCASE(Text000)) AND
         (UPPERCASE(ColumnDimCode) <> AnalysisView."Dimension 1 Code") AND
         (UPPERCASE(ColumnDimCode) <> AnalysisView."Dimension 2 Code") AND
         (UPPERCASE(ColumnDimCode) <> AnalysisView."Dimension 3 Code") AND
         (UPPERCASE(ColumnDimCode) <> AnalysisView."Dimension 4 Code") AND
         (ColumnDimCode <> '')
      THEN BEGIN
        MESSAGE(Text004,ColumnDimCode);
        ColumnDimCode := '';
      END;
      ColumnDimOption := DimCodeToOption(ColumnDimCode);
      InternalDateFilter := AnalysisViewEntry.GETFILTER("Posting Date");
      IF (LineDimOption <> LineDimOption::Period) AND (ColumnDimOption <> ColumnDimOption::Period) THEN BEGIN
        DateFilter := InternalDateFilter;
        IF STRPOS(DateFilter,'&') > 1 THEN
          DateFilter := COPYSTR(DateFilter,1,STRPOS(DateFilter,'&') - 1);
      END ELSE
        PeriodInitialized := FALSE;
    END;

    LOCAL PROCEDURE GetCaptionClass@12(AnalysisViewDimType@1000 : Integer) : Text[250];
    BEGIN
      IF AnalysisView.Code <> AnalysisViewCode THEN
        AnalysisView.GET(AnalysisViewCode);
      CASE AnalysisViewDimType OF
        1:
          BEGIN
            IF AnalysisView."Dimension 1 Code" <> '' THEN
              EXIT('1,6,' + AnalysisView."Dimension 1 Code");

            EXIT(Text005);
          END;
        2:
          BEGIN
            IF AnalysisView."Dimension 2 Code" <> '' THEN
              EXIT('1,6,' + AnalysisView."Dimension 2 Code");

            EXIT(Text006);
          END;
        3:
          BEGIN
            IF AnalysisView."Dimension 3 Code" <> '' THEN
              EXIT('1,6,' + AnalysisView."Dimension 3 Code");

            EXIT(Text007);
          END;
        4:
          BEGIN
            IF AnalysisView."Dimension 4 Code" <> '' THEN
              EXIT('1,6,' + AnalysisView."Dimension 4 Code");

            EXIT(Text008);
          END;
      END;
    END;

    LOCAL PROCEDURE CreateCaptionSet@29(RecRef@1000 : Record 367;Step@1008 : 'First,Previous,Same,Next';MaximumNoOfCaptions@1001 : Integer;VAR PrimaryKeyFirstCaptionInCurrSe@1006 : Text[1024];VAR CaptionSet@1005 : ARRAY [32] OF Text[1024];VAR CaptionRange@1004 : Text[1024]);
    VAR
      CurrentCaptionOrdinal@1003 : Integer;
    BEGIN
      CLEAR(CaptionSet);
      CaptionRange := '';

      CurrentCaptionOrdinal := 0;

      CASE Step OF
        Step::First:
          BEGIN
            IF (ColumnDimOption = ColumnDimOption::Period) AND (DateFilter = '') THEN
              FindRec(ColumnDimOption,RecRef,'=><')
            ELSE
              IF NOT FindRec(ColumnDimOption,RecRef,'-') THEN
                EXIT;
          END;
        Step::Previous:
          BEGIN
            RecRef.SETPOSITION(PrimaryKeyFirstCaptionInCurrSe);
            IF ColumnDimOption = ColumnDimOption::Period THEN
              EVALUATE(RecRef."Period Start",RecRef.Code);
            IF NOT FindRec(ColumnDimOption,RecRef,'=') THEN
              EXIT;
            NextRec(ColumnDimOption,RecRef,-MaximumNoOfCaptions);
          END;
        Step::Same:
          BEGIN
            RecRef.SETPOSITION(PrimaryKeyFirstCaptionInCurrSe);
            IF ColumnDimOption = ColumnDimOption::Period THEN
              EVALUATE(RecRef."Period Start",RecRef.Code);
            IF NOT FindRec(ColumnDimOption,RecRef,'=') THEN
              EXIT;
          END;
        Step::Next:
          BEGIN
            RecRef.SETPOSITION(PrimaryKeyFirstCaptionInCurrSe);
            IF ColumnDimOption = ColumnDimOption::Period THEN
              EVALUATE(RecRef."Period Start",RecRef.Code);
            IF NOT FindRec(ColumnDimOption,RecRef,'=') THEN
              EXIT;
            IF NOT (NextRec(ColumnDimOption,RecRef,MaximumNoOfCaptions) = MaximumNoOfCaptions) THEN BEGIN
              RecRef.SETPOSITION(PrimaryKeyFirstCaptionInCurrSe);
              FindRec(ColumnDimOption,RecRef,'=');
            END;
          END;
      END;

      PrimaryKeyFirstCaptionInCurrSe := RecRef.GETPOSITION;

      REPEAT
        CurrentCaptionOrdinal := CurrentCaptionOrdinal + 1;
        IF ShowColumnName THEN
          CaptionSet[CurrentCaptionOrdinal] := RecRef.Name
        ELSE
          CaptionSet[CurrentCaptionOrdinal] := RecRef.Code;
      UNTIL (CurrentCaptionOrdinal = MaximumNoOfCaptions) OR (NextRec(ColumnDimOption,RecRef,1) <> 1);

      IF CurrentCaptionOrdinal = 1 THEN
        CaptionRange := CaptionSet[1]
      ELSE
        CaptionRange := COPYSTR(CaptionSet[1] + '..' + CaptionSet[CurrentCaptionOrdinal],1,MAXSTRLEN(CaptionRange));
    END;

    [External]
    PROCEDURE SetAnalysisViewCode@14(NextAnalysisViewCode@1000 : Code[10]);
    BEGIN
      NewAnalysisViewCode := NextAnalysisViewCode;
    END;

    LOCAL PROCEDURE GetAccountCaption@7(VAR AccountCaption@1000 : Text[30];VAR UnitCaption@1001 : Text[30]);
    VAR
      GLAcc@1002 : Record 15;
      CFAccount@1003 : Record 841;
      BusUnit@1004 : Record 220;
      CashFlowForecast@1005 : Record 840;
    BEGIN
      IF GLAccountSource THEN BEGIN
        AccountCaption := GLAcc.TABLECAPTION;
        UnitCaption := BusUnit.TABLECAPTION;
      END ELSE BEGIN
        AccountCaption := CFAccount.TABLECAPTION;
        UnitCaption := CashFlowForecast.TABLECAPTION;
      END;
    END;

    PROCEDURE DPA_IsActive@1100528400() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
      DPA_Management@1100528400 : Codeunit 11012783;
      FPSLicenseManagement@1100527400 : Codeunit 11229289;
    BEGIN
      //**4PS
      IF NOT FPSLicenseManagement.LicenseAndReadPermissionForTable(DepartmentAuthorizObject) THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    BEGIN
    END.
  }
}

