OBJECT Report 11128081 Create Prognosis
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PSSE;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Create Prognosis;
               NOR=Opprette prognose;
               SVE=Skapa prognos];
    ProcessingOnly=Yes;
  }
  DATASET
  {
    { 1100285000;;DataItem;                  ;
               DataItemTable=Table11072003;
               DataItemTableView=SORTING(No.);
               OnAfterGetRecord=BEGIN
                                  GLSetup.GET;
                                  //Skapa upp prognos
                                  IF ProgDate=0D THEN
                                    ERROR(Text001);
                                  IF Job.COUNT>1 THEN
                                    ERROR(Text002);

                                  SESetup.SETRANGE("Line type",SESetup."Line type"::Setup);
                                  SESetup.SETRANGE(Code,'PROJDETAIL');
                                  SESetup.SETRANGE("Code 2",'SHOWTHOUSANDS');
                                  IF SESetup.FINDFIRST THEN
                                    IF SESetup."Value (bool)" THEN
                                      ValueInThousands:=TRUE;

                                  SESetup.SETRANGE("Code 2",'REMAININGPROGN');
                                  IF SESetup.FINDFIRST THEN
                                    IF SESetup."Value (bool)" THEN
                                      RemainingPrognosis:=TRUE;


                                  {IF (RemainingPrognosis AND not Job."Prognosis per Element" ) THEN
                                    CreatePrognosisRemainingAmount;}

                                  IF RemainingPrognosis = FALSE THEN
                                    CreatePrognosisTotalAmount;

                                  //191111 ORANGO.EE BYGG >>
                                  //190610 ORANGO.EE BYGG
                                  {IF (Job."Prognosis per Element" AND RemainingPrognosis ) THEN
                                    CalculatePrognosis;}

                                  IF RemainingPrognosis = TRUE THEN
                                   CalculatePrognosis;

                                  //<<
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1100285000;;Container;
                  Name=Options;
                  ContainerType=ContentArea }

      { 1100285001;1;Field  ;
                  Name=Prognosdatum;
                  NotBlank=Yes;
                  SourceExpr=ProgDate;
                  Importance=Promoted }

      { 1100285100;1;Field  ;
                  CaptionML=[ENU=Comment;
                             SVE=Kommentar];
                  SourceExpr=PrognosisComment }

      { 1101285000;1;Field  ;
                  CaptionML=[ENU=Text;
                             SVE=Ben„mning (l„ngre beskrivning)];
                  SourceExpr=PrognosisText }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ProgDate@1100285000 : Date;
      ProjectDetail@1100285001 : Record 11128083;
      PrognosisRec@1100285002 : Record 11012034;
      DV@1100285004 : Record 349;
      ProjectDetail2@1100285005 : Record 11128083;
      PrognosisComment@1100285101 : Text[50];
      StartProcess@1000000013 : Boolean;
      PrognosisDate@1000000012 : Date;
      CopyPrevCostPrognosis@1000000011 : Boolean;
      CopyPrevPrognosisEndResult@1000000010 : Boolean;
      CopyPrevRevenuePrognosis@1000000009 : Boolean;
      CopyPrevPrognosisTotalRev@1000000008 : Boolean;
      CopyCommentsPrevPrognosis@1000000007 : Boolean;
      FillProgWithAvailableCost@1000000006 : Boolean;
      FillProgWithExtrapolatedCosts@1000000005 : Boolean;
      FillProgFromProjPlanningAct@1000000004 : Boolean;
      FillProgFromRequestedActCap@1000000003 : Boolean;
      FillProgFromAssignedActCap@1000000002 : Boolean;
      FillProgRevenues@1000000001 : Boolean;
      CalcSurcharges@1000000000 : Boolean;
      GenerateCostPlusEntries@1000000017 : Boolean;
      CopyPrevRevenuePrognosis2@1000000016 : Boolean;
      CopyPrevPrognosisEndResRevenue@1000000015 : Boolean;
      FillPrognosisExpectedRevenue@1000000014 : Boolean;
      PrognosisManagement@1000000018 : Codeunit 11020217;
      CostTypes@1000000019 : 'Cost,Revenue,Both';
      ProjRec@1000000020 : Record 11072003;
      GLSetup@1000000022 : Record 98;
      CreateProjectCostPlus@1000000024 : Report 11012013;
      SubProject@1000000023 : Record 11072003;
      includeFinishedJobs@1000000021 : Boolean;
      JobLedgEntry@1000000025 : Record 11072005;
      PurchLine@1000000035 : Record 39;
      HourAccLine@1000000034 : Record 11012039;
      PostedHourLine@1000000033 : Record 11012085;
      PurchOrderCtrlLine@1000000032 : Record 11020221;
      SalesLine@1000000030 : Record 37;
      SalesInvLine@1000000029 : Record 113;
      ProjectInstallment@1000000028 : Record 11012018;
      ProjCostPlusEntry@1000000027 : Record 11012019;
      ProjPrincipal@1000000026 : Record 11012005;
      PrevPrognosis1@1000000037 : Record 11012034;
      newPrognosisLine@1000000036 : Record 11128270;
      tempCostComp@1000000031 : TEMPORARY Record 37;
      BudgetLine@1000000038 : Record 11012001;
      DimVal@1000000039 : Record 349;
      PrognosisLineCC2@1000000041 : Record 11128270;
      PrognosisLineCC@1000000040 : Record 11128270;
      PrognosisLine2@1000000043 : Record 11012035;
      PrognosisLine@1000000042 : Record 11012035;
      CostComponentSurch@1000000044 : Record 11012012;
      CostObj@1000000045 : Record 349;
      Text001@1000000046 : TextConst 'ENU=Prognosis date must be entered;SVE=Prognosdatum m†ste anges';
      Text002@1000000047 : TextConst 'ENU=Only possible to create prognosis for one project;SVE=Kan endast skapa prognos f”r ett projekt †t g†ngen';
      Text003@1000000048 : TextConst 'ENU=Create prognosis?;SVE=Skapa prognos?';
      CopyPrognosisAmounts@1101285001 : 'No,CopyEndResult,CopyPrognosisTotal';
      OptionsDetailedPrognosisEditable@1101285000 : Boolean INDATASET;
      SESetup@1100583002 : Record 11128004;
      ValueInThousands@1100583001 : Boolean;
      RemainingPrognosis@1100583000 : Boolean;
      BudgetLineProg@1100583003 : Record 11012001;
      PositionFilterLoc@1100583004 : Code[10];
      Text004@1100583005 : TextConst 'ENU=Fill position;SVE=L„ge m†ste anges';
      Text005@1100583006 : TextConst 'ENU=Progosis already exist;SVE=Prognos finns redan p† valt datum';
      PrognosisText@1101285002 : Text[250];

    PROCEDURE ProcessPrognosis@1100290012(VAR Prognosis@1100528800 : Record 11012034);
    VAR
      ProjectPlanningActivity@1100528806 : Record 11012431;
      FillPrognosisFromProjAct@1100528805 : Report 11012272;
      RequestedActivityCapacity@1100528804 : Record 11125708;
      FillPrognosisFromReqCap@1100528803 : Report 11012271;
      AssignedActivCapRec@1100528802 : Record 11125710;
      FillPrognFromCapPlanningRpt@1100528801 : Report 11012270;
    BEGIN
      //170419 ITERO.SB RFC-214
      //Function copied from CU 11020217 Prognosis Management (Use fixed selections instead of pop-up selections)


      //CLEAR(AutomaticGeneratePrognosis);
      //AutomaticGeneratePrognosis.SetSelections(Prognosis."Prognosis Date");
      //AutomaticGeneratePrognosis.RUNMODAL;
      //AutomaticGeneratePrognosis.GetSelections(StartProcess,PrognosisDate,
      //  CopyPrevCostPrognosis,CopyPrevPrognosisEndResult,CopyPrevRevenuePrognosis,CopyPrevPrognosisTotalRev,
      //  CopyCommentsPrevPrognosis,FillProgWithAvailableCost,FillProgWithExtrapolatedCosts,FillProgFromProjPlanningAct,
      //  FillProgFromRequestedActCap,FillProgFromAssignedActCap,FillProgRevenues,CalcSurcharges
      //  ,includeFinishedJobs             //IME403
      //  );

      PrognosisDate:=Prognosis."Prognosis Date";
      StartProcess:=TRUE;
      CopyPrevCostPrognosis:=FALSE;
      CopyPrevPrognosisEndResult:=FALSE;
      FillProgWithAvailableCost:=TRUE;
      GenerateCostPlusEntries:=FALSE;
      CopyPrevRevenuePrognosis2:=FALSE;
      CopyPrevPrognosisEndResRevenue:=FALSE;
      FillPrognosisExpectedRevenue:=FALSE;
      //>> 180111 ITERO.SB
      includeFinishedJobs:=TRUE;
      //<<
      IF NOT StartProcess THEN
        EXIT;

      IF Prognosis."Prognosis Date" <> PrognosisDate THEN BEGIN
        Prognosis."Prognosis Date" := PrognosisDate;

        IF NOT Prognosis.GET(Prognosis."Project No.", PrognosisDate) THEN BEGIN
          Prognosis.INIT;
          Prognosis."Project No." := Prognosis."Project No.";
          Prognosis.VALIDATE("Prognosis Date",PrognosisDate);
          Prognosis.INSERT(TRUE);
        END;
      END;
      //>> 180111 ITERO.SB
      PrognosisManagement.SetIncludeFinishedJobs(includeFinishedJobs);
      //<<
      IF NOT Prognosis.Fixed THEN BEGIN
        PrognosisManagement.CreatePrognosis(Prognosis, CostTypes::Both);

        IF CopyPrevCostPrognosis THEN
          PrognosisManagement.CopyPrevPrognosis(Prognosis, CopyPrognosisAmounts::No, CostTypes::Cost);
        IF CopyPrevPrognosisEndResult THEN
          PrognosisManagement.CopyPrevPrognosis(Prognosis, CopyPrognosisAmounts::CopyEndResult, CostTypes::Cost);
        IF CopyPrevRevenuePrognosis THEN
          PrognosisManagement.CopyPrevPrognosis(Prognosis, CopyPrognosisAmounts::No, CostTypes::Revenue);
        IF CopyPrevPrognosisTotalRev THEN
          PrognosisManagement.CopyPrevPrognosis(Prognosis, CopyPrognosisAmounts::CopyPrognosisTotal, CostTypes::Revenue);
        IF CopyCommentsPrevPrognosis THEN
          Prognosis.CopyPreviousComments;

        IF FillProgWithAvailableCost THEN
          PrognosisManagement.FillPrognosisWithAvailable(Prognosis);
        IF FillProgWithExtrapolatedCosts THEN
          PrognosisManagement.FillPrognosisWithXtraPolCost(Prognosis);
        IF FillProgFromProjPlanningAct THEN BEGIN
          ProjectPlanningActivity.SETRANGE("Project No.", Prognosis."Project No.");
          ProjectPlanningActivity.FINDFIRST;  //* There must be a project planning activity for the project.
          ProjRec.SETRANGE("No.", Prognosis."Project No.");
          FillPrognosisFromProjAct.SETTABLEVIEW(ProjRec);
          FillPrognosisFromProjAct.SetSelection(Prognosis."Project No.", Prognosis."Prognosis Date");
          FillPrognosisFromProjAct.RUNMODAL;
        END;
        IF FillProgFromRequestedActCap THEN BEGIN
          RequestedActivityCapacity.SETRANGE("Project No.", Prognosis."Project No.");
          RequestedActivityCapacity.FINDFIRST;  //* There must be a requested activity capacity for the project.
          ProjRec.SETRANGE("No.", Prognosis."Project No.");
          FillPrognosisFromReqCap.SETTABLEVIEW(ProjRec);
          FillPrognosisFromReqCap.SetSelection(Prognosis."Project No.", Prognosis."Prognosis Date");
          FillPrognosisFromReqCap.RUNMODAL;
        END;
        IF FillProgFromAssignedActCap THEN BEGIN
          AssignedActivCapRec.SETRANGE("Project No.", Prognosis."Project No.");
          AssignedActivCapRec.FINDFIRST;  //* There must be a capacity planning of the project
          ProjRec.SETRANGE("No.", Prognosis."Project No.");
          FillPrognFromCapPlanningRpt.SETTABLEVIEW(ProjRec);
          FillPrognFromCapPlanningRpt.SetSelection(Prognosis."Project No.", Prognosis."Prognosis Date");
          FillPrognFromCapPlanningRpt.RUNMODAL;
        END;
        IF FillProgRevenues THEN
          PrognosisManagement.FillPrognRevenues(Prognosis);
        IF CalcSurcharges THEN BEGIN
          IF Prognosis."Prognosis Level" = Prognosis."Prognosis Level"::Detailed THEN BEGIN
            Prognosis."Ovh. Surcharges Calculated" := TRUE;
            Prognosis."Altered After Calculation" := FALSE;
            Prognosis.MODIFY;

            PrognosisManagement.RemoveSurcharges(Prognosis);
            PrognosisManagement.CalculateSurcharges(Prognosis);
          END;
        END;
      END;
    END;

    PROCEDURE ProcessPrognosisCC@1100290000(VAR Prognosis@1100528800 : Record 11012034);
    VAR
      _costComp@1000000002 : Record 11012012;
      _dimVal@1000000003 : Record 349;
      _dec@1100290000 : Decimal;
      _revLoop@1000000000 : Integer;
      _revenue@1000000001 : Boolean;
      HourAccountingLine@1100285001 : Record 11012039;
      ItemJournalLine@1100285000 : Record 83;
      lCostComponent@1100285500 : Record 11012012;
      ExtensionContract@1100285501 : Record 11012004;
      ProjPrincipalRec@1100285502 : Record 11012005;
      lJobProjectStatus@1100285100 : Record 11072003;
      lJobProjectStatusOK@1100285101 : Boolean;
      JobsSetup@1100285102 : Record 315;
      PrognosisLine@1000000004 : Record 11128270;
      HumanResourcesSetup@1100583000 : Record 5218;
    BEGIN
      //170419 ITERO.SB RFC-214
      //Function copied from CU 11020217 Prognosis Management (Use fixed selections instead of pop-up selections)


      // LAHE 121213 For Cost Component
      GLSetup.GET();
      // pop up selection for end user

      //CLEAR(AutomaticGeneratePrognosisCC);
      //AutomaticGeneratePrognosisCC.SetSelections(Prognosis."Prognosis Date");
      //AutomaticGeneratePrognosisCC.RUNMODAL;
      //AutomaticGeneratePrognosisCC.GetSelections(StartProcess
      //  ,PrognosisDate
      //  ,CopyPrevCostPrognosis
      //  ,CopyPrevPrognosisEndResult
      //  ,FillProgWithAvailableCost
      //  ,GenerateCostPlusEntries
      //  ,CopyPrevRevenuePrognosis2
      //  ,CopyPrevPrognosisEndResRevenue
      //  ,FillPrognosisExpectedRevenue
      //  ,includeFinishedJobs             //IME403
      //  );
      //}

      PrognosisDate:=Prognosis."Prognosis Date";
      StartProcess:=TRUE;
      CopyPrevCostPrognosis:=FALSE;
      CopyPrevPrognosisEndResult:=FALSE;
      FillProgWithAvailableCost:=TRUE;
      GenerateCostPlusEntries:=FALSE;
      CopyPrevRevenuePrognosis2:=FALSE;
      CopyPrevPrognosisEndResRevenue:=FALSE;
      FillPrognosisExpectedRevenue:=FALSE;

      IF NOT StartProcess THEN
        EXIT;

      //>>IME076
      //check if new date will overwrite exitsing fixed prognosis
      IF (PrognosisDate <> 0D) AND Prognosis.GET(Prognosis."Project No.", PrognosisDate) THEN
        Prognosis.TESTFIELD(Fixed,FALSE);
      //<<IME076

      // create prognosis for date if not there
      IF Prognosis."Prognosis Date" <> PrognosisDate THEN BEGIN
        Prognosis."Prognosis Date" := PrognosisDate;

        IF NOT Prognosis.GET(Prognosis."Project No.", PrognosisDate) THEN BEGIN
          Prognosis.INIT;
          Prognosis."Project No." := Prognosis."Project No.";
          Prognosis.VALIDATE("Prognosis Date",PrognosisDate);
          Prognosis.INSERT(TRUE);
        END;
      END;

      JobsSetup.GET;  //IME448
      ProjRec.GET(Prognosis."Project No."); // delib. error

      //PrevPrognosis.RESET;
      //PrevPrognosis.SETRANGE("Project No.",ProjRec."No.");
      //PrevPrognosis.SETRANGE("Prognosis Date",0D,PrognosisDate -1);
      //IF NOT PrevPrognosis.FINDLAST THEN
      //  PrevPrognosis := Prognosis;

      ProjRec.SETRECFILTER();
      IF GenerateCostPlusEntries THEN BEGIN
        CLEAR(CreateProjectCostPlus);
        // Commission No.?
        CreateProjectCostPlus.USEREQUESTPAGE(FALSE);
        //CreateProjectCostPlus.SETTABLEVIEW(ProjRec);
        //CreateProjectCostPlus.RUNMODAL;

        // from Proj Card call
        JobLedgEntry.RESET;
        JobLedgEntry.SETRANGE("Cost Plus Entry Created", FALSE);
        PostedHourLine.RESET;
        PostedHourLine.SETRANGE("Cost Plus Entry Created", FALSE);
        HourAccLine.RESET;
        HourAccLine.SETRANGE("Cost Plus Entry Created", FALSE);

        CreateProjectCostPlus.SETTABLEVIEW(ProjRec);
        CreateProjectCostPlus.SETTABLEVIEW(JobLedgEntry);
        CreateProjectCostPlus.SETTABLEVIEW(PostedHourLine);
        CreateProjectCostPlus.SETTABLEVIEW(HourAccLine);
        CreateProjectCostPlus.SetDefault(ProjRec."No.");
        CreateProjectCostPlus.SetReqForm(TRUE);
        CreateProjectCostPlus.RUNMODAL;

        // repeat for sub projects if main project
        IF ProjRec."Single/Main/Sub Project" = ProjRec."Single/Main/Sub Project"::"Main Project" THEN BEGIN
          SubProject.RESET;
          SubProject.SETRANGE("Main Project",ProjRec."No.");
      //>>IME403
          IF NOT includeFinishedJobs THEN
            SubProject.SETRANGE("Project Status",0,SubProject."Project Status"::"Administrative Finished");
      //<<IME403
          IF SubProject.FINDSET THEN REPEAT
            //>> 150512 ITERO.SB IME-329
            CLEAR(ProjPrincipalRec);
            ProjPrincipalRec.SETRANGE("Project No.", SubProject."No.");
            ProjPrincipalRec.SETRANGE("Cost Plus Customer",TRUE);
            IF ProjPrincipalRec.FINDSET THEN BEGIN
            //<<
              SubProject.SETRECFILTER();
              CLEAR(CreateProjectCostPlus);
              // Commission No.?
              CreateProjectCostPlus.USEREQUESTPAGE(FALSE);
              //CreateProjectCostPlus.SETTABLEVIEW(ProjRec);
              //CreateProjectCostPlus.RUNMODAL;

              // from Proj Card call
              JobLedgEntry.RESET;
              JobLedgEntry.SETRANGE("Cost Plus Entry Created", FALSE);
              PostedHourLine.RESET;
              PostedHourLine.SETRANGE("Cost Plus Entry Created", FALSE);
              HourAccLine.RESET;
              HourAccLine.SETRANGE("Cost Plus Entry Created", FALSE);

              CreateProjectCostPlus.SETTABLEVIEW(SubProject);
              CreateProjectCostPlus.SETTABLEVIEW(JobLedgEntry);
              CreateProjectCostPlus.SETTABLEVIEW(PostedHourLine);
              CreateProjectCostPlus.SETTABLEVIEW(HourAccLine);
              CreateProjectCostPlus.SetDefault(SubProject."No.");
              CreateProjectCostPlus.SetReqForm(TRUE);
              CreateProjectCostPlus.RUNMODAL;
              SubProject.SETRANGE("No.");
            END;
          UNTIL SubProject.NEXT = 0;
        END;

      END;    //IF GenerateCostPlusEntries


      //IF NOT ProjRec."Prognosis per Element" THEN BEGIN
      IF TRUE THEN BEGIN
        //One line for each cost component in that occurs in the budget, project ledger,
        //purchase control, hour accounting line (purchase order line) or previous prognosis.
        //Each cost component will only have one line.

        tempCostComp.RESET;  // Sales Line table
        tempCostComp.DELETEALL;

        WITH BudgetLine DO BEGIN
          RESET;
          IF ProjRec."Single/Main/Sub Project" = ProjRec."Single/Main/Sub Project"::"Main Project" THEN
            SETRANGE("Main Project No.",ProjRec."No.")
          ELSE
            SETRANGE("Project No.",ProjRec."No.");
          SETFILTER("Cost Component",'<>%1','');
          SETRANGE("Version Date",0D,Prognosis."Prognosis Date");
          //>>IME-096
          SETFILTER("Extension Contract Status",'%1|%2|%3',
            "Extension Contract Status"::"Not Applicable",      //no extension connected
            "Extension Contract Status"::Order,"Extension Contract Status"::"Invoicing Allowed");
          //<<IME-096
          IF FINDSET THEN REPEAT

      //>>IME403
            lJobProjectStatusOK := JobProjectStatusCheck(lJobProjectStatus, includeFinishedJobs, "Project No.");
            //IF "Cost Component" <> '' THEN BEGIN
            IF lJobProjectStatusOK AND ("Cost Component" <> '') THEN BEGIN
      //<<IME403

              IF NOT tempCostComp.GET(-1,"Cost Component",0) THEN BEGIN
                // save new occurance
                tempCostComp."Document Type" := -1;
                tempCostComp."Document No." := "Cost Component";
                tempCostComp."Line No." := 0;
                tempCostComp.INIT;
                tempCostComp.INSERT;
              END;
              //IF NOT CONFIRM('Component "%1"',TRUE,tempCostComp."Document No.") THEN ERROR('');
              //Total amount in the budget lines of the project with the version date equal or before the prognosis date.
              //Total hours in the budget lines of the project with the version date equal or before the prognosis date.
              //IF "Version Date" <= PrevPrognosis."Prognosis Date" THEN BEGIN
              IF "Version Date" <= Prognosis."Prognosis Date" THEN BEGIN
                //TotAmountBudget += Amount;
                //TotHoursBudget += Hours;
                tempCostComp.Amount += "Amount (LCY)"; // carrierfield budget amount
                tempCostComp.Quantity += Hours; // carrierfield budget hours
                tempCostComp.MODIFY;
              END;
            END;
          UNTIL NEXT = 0;
        END;

      //>>ENH-025
      //a cost plus project
      IF (ProjRec."Settlement Method" = ProjRec."Settlement Method"::"Cost Plus") AND
          (ProjPrincipal.GET(ProjRec."No.",ProjRec."Bill-to Customer No.")) THEN BEGIN
        GLSetup.GET;
        DimVal.GET(GLSetup."Global Dimension 2 Code",ProjPrincipal."Cost Object");
        IF DimVal."Cost Component" <> '' THEN BEGIN
          IF NOT tempCostComp.GET(-1,DimVal."Cost Component",0) THEN BEGIN
            // save new occurance
            tempCostComp."Document Type" := -1;
            tempCostComp."Document No." := DimVal."Cost Component";
            tempCostComp."Line No." := 0;
            tempCostComp.INIT;
            tempCostComp.INSERT;
          END;
        END;
      END;
      //a project which has a cost plus extension
      //ExtensionContract.key: "Project No.","Contract No."
      ExtensionContract.SETRANGE("Project No.",ProjRec."No.");
      ExtensionContract.SETRANGE("Settlement Method",ExtensionContract."Settlement Method"::"Cost Plus");
      IF ExtensionContract.FINDSET(FALSE) THEN
      REPEAT
        IF ProjPrincipal.GET(ProjRec."No.",ExtensionContract.Principal) THEN BEGIN
          GLSetup.GET;
          DimVal.GET(GLSetup."Global Dimension 2 Code",ProjPrincipal."Cost Object");
          IF DimVal."Cost Component" <> '' THEN BEGIN
            IF NOT tempCostComp.GET(-1,DimVal."Cost Component",0) THEN BEGIN
              // save new occurance
              tempCostComp."Document Type" := -1;
              tempCostComp."Document No." := DimVal."Cost Component";
              tempCostComp."Line No." := 0;
              tempCostComp.INIT;
              tempCostComp.INSERT;
            END;
          END;
        END;
      UNTIL ExtensionContract.NEXT=0;
      //<<ENH-025

      // proj ledg entries
      WITH JobLedgEntry DO BEGIN
        RESET;
        SETCURRENTKEY("Job No.");
        IF ProjRec."Single/Main/Sub Project" = ProjRec."Single/Main/Sub Project"::"Main Project" THEN
          SETRANGE("Main Project No.",ProjRec."No.")
        ELSE
          SETRANGE("Job No.",ProjRec."No.");
        SETFILTER("Cost Component",'<>%1','');
        SETRANGE("Posting Date",0D,Prognosis."Prognosis Date");
        IF FINDSET THEN REPEAT
      //>>IME403
          lJobProjectStatusOK := TRUE;
          IF NOT includeFinishedJobs THEN BEGIN
            IF  lJobProjectStatus."No." <> "Job No." THEN
              lJobProjectStatus.GET("Job No.");
            lJobProjectStatusOK := (lJobProjectStatus."Project Status" IN [0..lJobProjectStatus."Project Status"::"Administrative Finished"]);
          END;
          //IF "Cost Component" <> '' THEN BEGIN
          IF lJobProjectStatusOK AND ("Cost Component" <> '') THEN BEGIN
      //<<IME403
            IF NOT tempCostComp.GET(-1,"Cost Component",0) THEN BEGIN
              // save new occurance
              tempCostComp."Document Type" := -1;
              tempCostComp."Document No." := "Cost Component";
              tempCostComp."Line No." := 0;
              tempCostComp.INIT;
              tempCostComp.INSERT;
            END;
            //Total of the project ledger entries for the project
            //with a posting date equal or before the prognosis date (Field: Total price)
            //Total of the project ledger entries for the project with a posting date equal or before the prognosis date
            //and cost type = ÊLaborË (Field: Quantity)
            //IF JobLedgEntry."Posting Date" <= PrevPrognosis."Prognosis Date" THEN BEGIN
            IF JobLedgEntry."Posting Date" <= Prognosis."Prognosis Date" THEN BEGIN
              //TotActualAmount += JobLedgEntry."Total Price (LCY)";
              //IF "Cost Type" = "Cost Type"::Labor THEN
              //  TotActualHours += JobLedgEntry.Quantity;
              //tempCostComp."Outstanding Amount" += -JobLedgEntry."Total Price (LCY)"; // carrierfield actual amount
              tempCostComp."Outstanding Amount" += JobLedgEntry."Total Cost (LCY)"; // carrierfield actual amount
      //>>ENH-011
              IF lCostComponent.GET("Cost Component") THEN
                IF lCostComponent."Cost Type" = lCostComponent."Cost Type"::Labor THEN
      //<<ENH-011
              tempCostComp."Qty. Invoiced (Base)" += JobLedgEntry.Quantity; // carrierfield actual hours
              tempCostComp.MODIFY;
            END;
          END;
        UNTIL JobLedgEntry.NEXT = 0;
      END;

      // Hour Accounting Lines
      WITH HourAccLine DO BEGIN
        RESET;
        SETCURRENTKEY("Project No.");
        IF ProjRec."Single/Main/Sub Project" = ProjRec."Single/Main/Sub Project"::"Main Project" THEN
          SETRANGE("Main Project No.",ProjRec."No.")
        ELSE
          SETRANGE("Project No.",ProjRec."No.");
        SETFILTER("Cost Component",'<>%1','');
        SETRANGE("Posting Date",0D,Prognosis."Prognosis Date");
        IF FINDSET THEN REPEAT
      //>>IME403
          lJobProjectStatusOK := JobProjectStatusCheck(lJobProjectStatus, includeFinishedJobs, "Project No.");
          //IF "Cost Component" <> '' THEN BEGIN
          IF lJobProjectStatusOK AND ("Cost Component" <> '') THEN BEGIN
      //<<IME403
            IF NOT tempCostComp.GET(-1,"Cost Component",0) THEN BEGIN
              // save new occurance
              tempCostComp."Document Type" := -1;
              tempCostComp."Document No." := "Cost Component";
              tempCostComp."Line No." := 0;
              tempCostComp.INIT;
              tempCostComp.INSERT;
            END;
            //Total of the hour accounting lines (Field: Amount) for the project
            //where the posting date is equal or before the prognosis date
            //Total of the hour accounting lines (Field: Total line) for the project
            //where the posting date is equal or before the prognosis date
            //IF "Posting Date" <= PrevPrognosis."Prognosis Date" THEN BEGIN
      //>>IME155
            CALCFIELDS("Component Type");
            //IF "Posting Date" <= Prognosis."Prognosis Date" THEN BEGIN
            IF ("Posting Date" <= Prognosis."Prognosis Date") AND ("Component Type"<>"Component Type"::"Expense hours") THEN BEGIN
      //<<IME155
              //TotOpenAmtHours += Amount;
              //TotOpenHours += "Total Line";
              tempCostComp."Net Weight" += HourAccLine.Amount;
      //>>ENH-011
              IF lCostComponent.GET("Cost Component") THEN
                IF lCostComponent."Cost Type" = lCostComponent."Cost Type"::Labor THEN
      //<<ENH-011
              tempCostComp."Qty. to Invoice" += "Total Line";
              tempCostComp.MODIFY;
            END;
          END;
        UNTIL NEXT = 0;
      END;

      // Posted Hour Lines
      WITH PostedHourLine DO BEGIN
        HumanResourcesSetup.GET;
        RESET;
        SETCURRENTKEY("Project No.");
        SETFILTER("Component Type",'<>%1',"Component Type"::"Expense hours");  //IME155
        IF ProjRec."Single/Main/Sub Project" = ProjRec."Single/Main/Sub Project"::"Main Project" THEN BEGIN
        //  SETRANGE("Main Project No.",ProjRec."No.")
          SubProject.RESET;
          SubProject.SETRANGE("Main Project",ProjRec."No.");
      //>>IME403
          IF NOT includeFinishedJobs THEN BEGIN
            SubProject.SETRANGE("Project Status" ,0, SubProject."Project Status"::"Administrative Finished");
          END;
      //<<IME403
          IF SubProject.FINDSET THEN REPEAT
            // duplicate code as below
            SETRANGE("Project No.",SubProject."No.");
            SETFILTER("Cost Component",'<>%1','');
            IF FINDSET THEN REPEAT
      //>>IME403
              lJobProjectStatusOK := JobProjectStatusCheck(lJobProjectStatus, includeFinishedJobs, "Project No.");
              //IF "Cost Component" <> '' THEN BEGIN
              IF lJobProjectStatusOK AND ("Cost Component" <> '') THEN BEGIN
      //<<IME403
                IF NOT tempCostComp.GET(-1,"Cost Component",0) THEN BEGIN
                  // save new occurance
                  tempCostComp."Document Type" := -1;
                  tempCostComp."Document No." := "Cost Component";
                  tempCostComp."Line No." := 0;
                  tempCostComp.INIT;
                  tempCostComp."Quantity Invoiced" := Amount;
                  IF HumanResourcesSetup."Surcharge Overtime excl." THEN  //IME448
      //>>4PS-001
                  tempCostComp."Gross Weight" := PostedHourLine."Surcharge Overtime" + PostedHourLine."Precalc. Surcharge Expenses";
      //<<4PS-001

                  tempCostComp.INSERT;
                END ELSE BEGIN
                  tempCostComp."Quantity Invoiced" += Amount;
                  IF HumanResourcesSetup."Surcharge Overtime excl." THEN  //IME448
      //>>4PS-001
                  tempCostComp."Gross Weight" += PostedHourLine."Surcharge Overtime" + PostedHourLine."Precalc. Surcharge Expenses";
      //<<4PS-001
                  tempCostComp.MODIFY;
                END;
              END;
            UNTIL NEXT = 0;
          UNTIL SubProject.NEXT = 0;
        END ELSE BEGIN
          // duplicate code as above
          SETRANGE("Project No.",ProjRec."No.");
          SETFILTER("Cost Component",'<>%1','');
          IF FINDSET THEN REPEAT
      //>>IME403
            lJobProjectStatusOK := JobProjectStatusCheck(lJobProjectStatus, includeFinishedJobs, "Project No.");
            //IF "Cost Component" <> '' THEN BEGIN
            IF lJobProjectStatusOK AND ("Cost Component" <> '') THEN BEGIN
      //<<IME403
              IF NOT tempCostComp.GET(-1,"Cost Component",0) THEN BEGIN
                // save new occurance
                tempCostComp."Document Type" := -1;
                tempCostComp."Document No." := "Cost Component";
                tempCostComp."Line No." := 0;
                tempCostComp.INIT;
                tempCostComp."Quantity Invoiced" := Amount;
                tempCostComp.INSERT;
              END ELSE BEGIN
                tempCostComp."Quantity Invoiced" += Amount;
                tempCostComp.MODIFY;
              END;
            END;
          UNTIL NEXT = 0;
        END;
      END;

      // Prognosis Lines (cost component)
      //IF Prognosis."Prognosis Date" <> PrevPrognosis."Prognosis Date" THEN
      WITH PrognosisLine DO BEGIN
        RESET;
        SETCURRENTKEY("Project No.");
        IF ProjRec."Single/Main/Sub Project" = ProjRec."Single/Main/Sub Project"::"Main Project" THEN
          SETRANGE("Main Project No.",ProjRec."No.")
        ELSE
          SETRANGE("Project No.",ProjRec."No.");
        //SETRANGE("Prognosis Date",PrevPrognosis."Prognosis Date");
        SETRANGE("Prognosis Date",Prognosis."Prognosis Date");
        SETFILTER("Cost Component Code",'<>%1','');
        IF FINDSET THEN REPEAT
      //>>IME403
          lJobProjectStatusOK := JobProjectStatusCheck(lJobProjectStatus, includeFinishedJobs, "Project No.");
          //IF "Cost Component Code" <> '' THEN BEGIN
          IF lJobProjectStatusOK AND ("Cost Component Code" <> '') THEN BEGIN
      //<<IME403
            IF NOT tempCostComp.GET(-1,"Cost Component Code",0) THEN BEGIN
              // save new occurance
              tempCostComp."Document Type" := -1;
              tempCostComp."Document No." := "Cost Component Code";
              tempCostComp."Line No." := 0;
              tempCostComp.INIT;
              //tempCostComp.Description := FORMAT(Amount);
              tempCostComp."Qty. to Ship (Base)" := "Prognosis Costs";
              tempCostComp.INSERT;
            END ELSE BEGIN
              //EVALUATE(_dec,tempCostComp.Description);
              //tempCostComp.Description := FORMAT(Amount +_dec);
              tempCostComp."Qty. to Ship (Base)" += "Prognosis Costs";
              tempCostComp.MODIFY;
            END;
          END;
        UNTIL NEXT = 0;
      END;

      // Purchase Order Control Lines
      WITH PurchOrderCtrlLine DO BEGIN
        RESET;
        SETCURRENTKEY("Project No.");
        IF ProjRec."Single/Main/Sub Project" = ProjRec."Single/Main/Sub Project"::"Main Project" THEN
          SETRANGE("Main Project No.",ProjRec."No.")
        ELSE
          SETRANGE("Project No.",ProjRec."No.");
        SETFILTER("Cost Component",'<>%1','');
        SETRANGE(Date,0D,Prognosis."Prognosis Date");
        IF FINDSET THEN REPEAT
      //>>IME403
          lJobProjectStatusOK := JobProjectStatusCheck(lJobProjectStatus, includeFinishedJobs, "Project No.");
          //IF "Cost Component" <> '' THEN BEGIN
          IF lJobProjectStatusOK AND ("Cost Component" <> '') THEN BEGIN
      //<<IME403
            IF NOT tempCostComp.GET(-1,"Cost Component",0) THEN BEGIN
              // save new occurance
              tempCostComp."Document Type" := -1;
              tempCostComp."Document No." := "Cost Component";
              tempCostComp."Line No." := 0;
              tempCostComp.INIT;
              tempCostComp.INSERT;
            END;
            //Total of the Purchase order control lines with the date equal or before the prognosis date
            //IF Date <= PrevPrognosis."Prognosis Date" THEN BEGIN
            IF Date <= Prognosis."Prognosis Date" THEN BEGIN
              tempCostComp."Line Discount Amount" += "Outstanding Amount"
                //+"Overhead Surcharge Soft"
                //+"Overhead Surcharge Firm"
                +"Amt. Rcd. Not Invoiced";
      //>>4PS-001
              tempCostComp."Surcharge Amount (LCY)" += "Overhead Surcharge Soft" + "Overhead Surcharge Firm";
      //<<4PS-001
              tempCostComp.MODIFY;
            END;
          END;
        UNTIL NEXT = 0;
      END;

      // Sales Lines (collect any other component)
      WITH SalesLine DO BEGIN
        RESET;
        SETCURRENTKEY("Document Type","Job No.");
        SETFILTER("Cost Component",'<>%1','');
        IF ProjRec."Single/Main/Sub Project" = ProjRec."Single/Main/Sub Project"::"Main Project" THEN BEGIN
        //  SETRANGE("Main Project No.",ProjRec."No.")
          SubProject.RESET;
          SubProject.SETRANGE("Main Project",ProjRec."No.");
      //>>IME403
            IF NOT includeFinishedJobs THEN BEGIN
              SubProject.SETRANGE("Project Status",0,SubProject."Project Status"::"Administrative Finished");
            END;
      //<<IME403
          IF SubProject.FINDSET THEN REPEAT
            // duplicate code as below
            SETRANGE("Job No.",SubProject."No.");
            IF FINDSET THEN REPEAT
      //>>IME403
              lJobProjectStatusOK := JobProjectStatusCheck(lJobProjectStatus, includeFinishedJobs, "Job No.");
              //IF "Cost Component" <> '' THEN BEGIN
              IF lJobProjectStatusOK AND ("Cost Component" <> '') THEN BEGIN
      //<<IME403
                IF NOT tempCostComp.GET(-1,"Cost Component",0) THEN BEGIN
                  // save new occurance
                  tempCostComp."Document Type" := -1;
                  tempCostComp."Document No." := "Cost Component";
                  tempCostComp."Line No." := 0;
                  tempCostComp.INIT;
                  tempCostComp.INSERT;
                END;
              END;
            UNTIL NEXT = 0;
          UNTIL SubProject.NEXT = 0;
        END ELSE BEGIN
          // duplicate code as above
          SETRANGE("Job No.",ProjRec."No.");
          IF FINDSET THEN REPEAT
      //>>IME403
            lJobProjectStatusOK := JobProjectStatusCheck(lJobProjectStatus, includeFinishedJobs, "Job No.");
            //IF "Cost Component" <> '' THEN BEGIN
            IF lJobProjectStatusOK AND ("Cost Component" <> '') THEN BEGIN
      //<<IME403
              IF NOT tempCostComp.GET(-1,"Cost Component",0) THEN BEGIN
                // save new occurance
                tempCostComp."Document Type" := -1;
                tempCostComp."Document No." := "Cost Component";
                tempCostComp."Line No." := 0;
                tempCostComp.INIT;
                tempCostComp.INSERT;
              END;
            END;
          UNTIL NEXT = 0;
        END;
      END;

      // Project Installment (collect any other component)
      WITH ProjectInstallment DO BEGIN
        RESET;
        SETCURRENTKEY("Project No.");
        SETFILTER("Cost Component",'<>%1','');
        IF ProjRec."Single/Main/Sub Project" = ProjRec."Single/Main/Sub Project"::"Main Project" THEN BEGIN
        //  SETRANGE("Main Project No.",ProjRec."No.")
          SubProject.RESET;
          SubProject.SETRANGE("Main Project",ProjRec."No.");
          IF SubProject.FINDSET THEN REPEAT
            // duplicate code as below
            SETRANGE("Project No.",SubProject."No.");
            IF FINDSET THEN REPEAT
      //>>IME403
              lJobProjectStatusOK := JobProjectStatusCheck(lJobProjectStatus, includeFinishedJobs, "Project No.");
              //IF "Cost Component" <> '' THEN
              IF lJobProjectStatusOK AND ("Cost Component" <> '') THEN
      //<<IME403
                IF NOT tempCostComp.GET(-1,"Cost Component",0) THEN BEGIN
                  // save new occurance
                  tempCostComp."Document Type" := -1;
                  tempCostComp."Document No." := "Cost Component";
                  tempCostComp."Line No." := 0;
                  tempCostComp.INIT;
                  tempCostComp.INSERT;
                END;
            UNTIL NEXT = 0;
          UNTIL SubProject.NEXT = 0;
        END ELSE BEGIN
          // duplicate code as above
          SETRANGE("Project No.",ProjRec."No.");
          IF FINDSET THEN REPEAT
      //>>IME403
            lJobProjectStatusOK := JobProjectStatusCheck(lJobProjectStatus, includeFinishedJobs, "Project No.");
            //IF "Cost Component" <> '' THEN
            IF lJobProjectStatusOK AND ("Cost Component" <> '') THEN
      //<<IME403
              IF NOT tempCostComp.GET(-1,"Cost Component",0) THEN BEGIN
                // save new occurance
                tempCostComp."Document Type" := -1;
                tempCostComp."Document No." := "Cost Component";
                tempCostComp."Line No." := 0;
                tempCostComp.INIT;
                tempCostComp.INSERT;
              END;
          UNTIL NEXT = 0;
        END;
      END;
      //>>4PS-001
      //  { ** LAHE: will have other then Revenue cost objects but treated based on Principal cost object
      GLSetup.GET;
      //<<4PS-001
      // Project Cost Plus Entry (collect any other component)
      WITH ProjCostPlusEntry DO BEGIN
        RESET;
        SETCURRENTKEY("Project No.");
        SETRANGE("Project No.",ProjRec."No.");
        SETFILTER("Cost Component",'<>%1','');
      //>>4PS-001
        SETRANGE("Entry No. Project Ledger", 0);
        SETRANGE(Invoiced,FALSE);
      //<<4PS-001
        IF FINDSET THEN REPEAT
      //>>IME403
          lJobProjectStatusOK := JobProjectStatusCheck(lJobProjectStatus, includeFinishedJobs, "Project No.");
          IF lJobProjectStatusOK THEN BEGIN
      //<<IME403
            IF NOT tempCostComp.GET(-1,"Cost Component",0) THEN BEGIN
              // save new occurance
              tempCostComp."Document Type" := -1;
              tempCostComp."Document No." := "Cost Component";
              tempCostComp."Line No." := 0;
              tempCostComp.INIT;
              tempCostComp.INSERT;
            END;

      //>>4PS-001
            IF ProjPrincipal.GET("Project No.",Principal) THEN
              IF DimVal.GET(GLSetup."Global Dimension 2 Code",ProjPrincipal."Cost Object") THEN
                IF NOT tempCostComp.GET(-1,DimVal."Cost Component",0) THEN BEGIN
                  // save new occurance
                  tempCostComp."Document Type" := -1;
                  tempCostComp."Document No." := DimVal."Cost Component";
                  tempCostComp."Line No." := 0;
                  tempCostComp.INIT;
                  tempCostComp.INSERT;
                END;
      //<<4PS-001
          END;
        UNTIL NEXT = 0;
      END;
      //>>4PS-001
      //  ** }
      //<<4PS-001

      //>>4PS-001
      WITH HourAccountingLine DO BEGIN
        RESET;
        SETCURRENTKEY("Project No.");
        IF ProjRec."Single/Main/Sub Project" = ProjRec."Single/Main/Sub Project"::"Main Project" THEN
          SETRANGE("Main Project No.",ProjRec."No.")
        ELSE
          SETRANGE("Project No.",ProjRec."No.");
        //<>%1
        //
        SETFILTER("Cost Component",'',' save new occurance');
        SETRANGE("Posting Date",0D,Prognosis."Prognosis Date");
        SETFILTER(HourAccountingLine."Component Type",'<>%1',HourAccountingLine."Component Type"::"Expense hours");  //IME155
        IF FINDSET THEN REPEAT
      //>>IME403
          lJobProjectStatusOK := JobProjectStatusCheck(lJobProjectStatus, includeFinishedJobs, "Project No.");
          //IF "Cost Component" <> 'IF "Posting Date" <= PrevPrognosis."Prognosis Date" THEN BEGIN' THEN
          IF lJobProjectStatusOK THEN BEGIN
      //<<IME403
            IF NOT tempCostComp.GET(-1,"Cost Component",0) THEN BEGIN
              //SETRANGE("Main Project No.",ProjRec."Main Project");
              tempCostComp."Document Type" := -1;
              tempCostComp."Document No." := "Cost Component";
              tempCostComp."Line No." := 0;
              tempCostComp.INIT;
              tempCostComp.INSERT;
            END;
            //SETRANGE("Job No.", ProjRec."No.");
            IF "Posting Date" <= Prognosis."Prognosis Date" THEN BEGIN
              tempCostComp."Unit Volume" += HourAccountingLine."Amount (LCY)";
              tempCostComp.MODIFY;
            END;
          END;
        UNTIL NEXT = 0;
      END;

      WITH ItemJournalLine DO BEGIN
        RESET;
        SETCURRENTKEY("Main Project No.");
        IF ProjRec."Single/Main/Sub Project" = ProjRec."Single/Main/Sub Project"::"Main Project" THEN
          SETRANGE("Main Project No.",ProjRec."No.")
        ELSE
          SETRANGE("Job No.",ProjRec."No.");
        //<>%1
        //
        SETFILTER("Cost Component",'',' save new occurance');
        SETRANGE("Posting Date",0D,Prognosis."Prognosis Date");
        IF FINDSET THEN REPEAT
      //>>IME403
          lJobProjectStatusOK := JobProjectStatusCheck(lJobProjectStatus, includeFinishedJobs, "Job No.");
          //IF "Cost Component" <> 'IF "Posting Date" <= PrevPrognosis."Prognosis Date" THEN BEGIN' THEN
          IF lJobProjectStatusOK THEN BEGIN
      //<<IME403
            IF NOT tempCostComp.GET(-1,"Cost Component",0) THEN BEGIN
              //<<4PS-001
              tempCostComp."Document Type" := -1;
              tempCostComp."Document No." := "Cost Component";
              tempCostComp."Line No." := 0;
              tempCostComp.INIT;
              tempCostComp.INSERT;
            END;
            // _revLoop for seperate non-revenue lines from renevue lines is now useless but does no harm
            IF "Posting Date" <= Prognosis."Prognosis Date" THEN BEGIN
              tempCostComp."Units per Parcel" += ItemJournalLine.Amount;
              tempCostComp.MODIFY;
            END;
          END;
        UNTIL NEXT = 0;
      END;
      //Exist("Dimension Value" WHERE (Cost Type=CONST(Revenue),Cost Component=FIELD(Cost Component Code)))

        //
        FOR _revLoop := 1 TO 2 DO BEGIN
         IF tempCostComp.FINDSET THEN REPEAT
         // PK: Project No.,Prognosis Date,Cost Component Code
          DimVal.RESET();
          DimVal.SETRANGE("Cost Type",DimVal."Cost Type"::Revenue);
          DimVal.SETRANGE("Cost Component",tempCostComp."Document No.");
          _revenue := NOT DimVal.ISEMPTY;
          IF ((_revLoop = 1) AND NOT _revenue)
            OR ((_revLoop = 2) AND _revenue)
          THEN BEGIN
            IF tempCostComp."Document No." <> ' LAHE 130214' THEN BEGIN
              // LAHE 130214
              IF NOT newPrognosisLine.GET(ProjRec."No.",PrognosisDate,tempCostComp."Document No.") THEN BEGIN // LAHE 130308
                newPrognosisLine.INIT;
                newPrognosisLine.VALIDATE("Project No.",ProjRec."No.");
                newPrognosisLine.VALIDATE("Prognosis Date",PrognosisDate);
                newPrognosisLine.VALIDATE("Cost Component Code",tempCostComp."Document No."); //>> LAHE 130528 IMSE-005
                newPrognosisLine.VALIDATE("Main Project No.",ProjRec."Main Project"); // LAHE 130708 - what to say, just dont validate..
      //>>ENH-011
                IF lCostComponent.GET(newPrognosisLine."Cost Component Code") THEN
                  newPrognosisLine."Cost Type" := lCostComponent."Cost Type"-1;
      //<<ENH-011
                newPrognosisLine.INSERT;
              END;

              //IF JobLedgEntry."Entry Type" = JobLedgEntry."Entry Type"::Sale THEN
              newPrognosisLine.CALCFIELDS(Revenue);
              IF newPrognosisLine.Revenue THEN BEGIN
                newPrognosisLine.Quantity := 0; ////SalesInvLine."Amount (LCY)";
                newPrognosisLine."Actual Revenues" := 0;
                JobLedgEntry.RESET;
                JobLedgEntry.SETCURRENTKEY("Job No.");
                IF ProjRec."Single/Main/Sub Project" = ProjRec."Single/Main/Sub Project"::"Main Project" THEN
                  JobLedgEntry.SETRANGE("Main Project No.",ProjRec."No.")
                ELSE
                  JobLedgEntry.SETRANGE("Job No.",ProjRec."No.");
                JobLedgEntry.SETRANGE("Cost Component",tempCostComp."Document No.");
                JobLedgEntry.SETRANGE("Entry Type", JobLedgEntry."Entry Type"::Sale);
                IF JobLedgEntry.FINDSET THEN REPEAT
                  // credit lines?
      //>>IME403
                  lJobProjectStatusOK := JobProjectStatusCheck(lJobProjectStatus, includeFinishedJobs, JobLedgEntry."Job No.");
                  //IF "Cost Component" <> '' THEN BEGIN
                  IF lJobProjectStatusOK THEN
      //<<IME403
                    newPrognosisLine."Actual Revenues" -= JobLedgEntry."Total Price (LCY)"; //  SETRANGE("Main Project No.",ProjRec."No.")
                UNTIL JobLedgEntry.NEXT = 0; // duplicate code as below

                newPrognosisLine."Open Revenues" := 0;
                SalesLine.RESET;
                SalesLine.SETCURRENTKEY("Document Type","Job No.");
                SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Invoice,SalesLine."Document Type"::"Credit Memo");
                SalesLine.SETRANGE("Cost Component",tempCostComp."Document No.");
                IF ProjRec."Single/Main/Sub Project" = ProjRec."Single/Main/Sub Project"::"Main Project" THEN BEGIN
                // remove Blanket Order etc?
                  SubProject.RESET;
                  SubProject.SETRANGE("Main Project",ProjRec."No.");
            //>>IME403
                  IF NOT includeFinishedJobs THEN
                    SubProject.SETRANGE("Project Status",0,SubProject."Project Status"::"Administrative Finished");
            //<<IME403
                  IF SubProject.FINDSET THEN REPEAT
                    // duplicate code as above
                    SalesLine.SETRANGE("Job No.",SubProject."No.");
                    IF SalesLine.FINDSET THEN REPEAT
                      IF SalesLine."Document Type" IN
                        [SalesLine."Document Type"::"Credit Memo",SalesLine."Document Type"::"Return Order"]
                      THEN
                        newPrognosisLine."Open Revenues" -= SalesLine."Amount (LCY)"
                      ELSE
                        newPrognosisLine."Open Revenues" += SalesLine."Amount (LCY)";
                      // remove Blanket Order etc?
                    UNTIL SalesLine.NEXT = 0;
                  UNTIL SubProject.NEXT = 0;
                END ELSE BEGIN
                  //  SETRANGE("Main Project No.",ProjRec."No.")
                  SalesLine.SETRANGE("Job No.",ProjRec."No.");
                  IF SalesLine.FINDSET THEN REPEAT
      //>>IME403
                    lJobProjectStatusOK := JobProjectStatusCheck(lJobProjectStatus, includeFinishedJobs, SalesLine."Job No.");
                    IF lJobProjectStatusOK THEN
      //<<IME403
                      IF SalesLine."Document Type" IN
                        [SalesLine."Document Type"::"Credit Memo",SalesLine."Document Type"::"Return Order"]
                      THEN
                        newPrognosisLine."Open Revenues" -= SalesLine."Amount (LCY)"
                      ELSE
                        newPrognosisLine."Open Revenues" += SalesLine."Amount (LCY)";
                      // duplicate code as below
                  UNTIL SalesLine.NEXT = 0;
                END;

                newPrognosisLine."Expected Revenues Installments" := 0;
                ProjectInstallment.RESET;
                ProjectInstallment.SETCURRENTKEY("Project No.");
                IF ProjRec."Single/Main/Sub Project" = ProjRec."Single/Main/Sub Project"::"Main Project" THEN BEGIN
                //MAHA *** 4PS-015 blocked*** <<
                  SubProject.RESET;
                  SubProject.SETRANGE("Main Project",ProjRec."No.");
      //>>IME403
                  IF NOT includeFinishedJobs THEN
                    SubProject.SETRANGE("Project Status",0,SubProject."Project Status"::"Administrative Finished");
      //<<IME403
                  IF SubProject.FINDSET THEN REPEAT
                    // ProjectInstallment.SETRANGE("Cost Component",tempCostComp."Document No.");
                    ProjectInstallment.SETRANGE("Project No.",SubProject."No.");
                    // >>
                    // value removed when invoicing begins or check flowfield "Invoice in Process (LCY)" etc?
                    // duplicate code as above
                    IF ProjectInstallment.FINDSET THEN REPEAT
                      // MAHA *** 4PS-015 blocked*** <<
                      newPrognosisLine."Expected Revenues Installments" += ProjectInstallment."Invoice Price (LCY)";
                    UNTIL ProjectInstallment.NEXT = 0;
                  UNTIL SubProject.NEXT = 0;
                END ELSE BEGIN
                  //ProjectInstallment.SETRANGE("Cost Component",tempCostComp."Document No.");
                  ProjectInstallment.SETRANGE("Project No.",ProjRec."No.");
                  // >>
                  // value removed when invoicing begins or check flowfield "Invoice in Process (LCY)" etc?
                  // In case of expected revenue for costplus entries, the cost object should be selected from the project principal card
                  IF ProjectInstallment.FINDSET THEN REPEAT
      //>>IME403
                    lJobProjectStatusOK := JobProjectStatusCheck(lJobProjectStatus, includeFinishedJobs, ProjectInstallment."Project No.");
                    IF lJobProjectStatusOK THEN
      //<<IME403
                      //use the cost componeent which is related to this cost object, instead of using the cost object from the costplus entry.
                      newPrognosisLine."Expected Revenues Installments" += ProjectInstallment."Invoice Price (LCY)";
                  UNTIL ProjectInstallment.NEXT = 0;
                END;

                GLSetup.GET;
                GLSetup.TESTFIELD("Global Dimension 2 Code");
                newPrognosisLine."Expected Revenues Cost Plus" := 0;
                ProjCostPlusEntry.RESET;
                //IF Prinicipal.Cost Object = Revenue Style then collect all cost plus for this project
                //>>4PS-001
                //<<4PS-001
                ProjCostPlusEntry.SETCURRENTKEY("Project No.");
      //  ProjCostPlusEntry.SETRANGE("Main Project No.",ProjRec."No.")
      // duplicate code as below
                ProjCostPlusEntry.SETRANGE(Invoiced,FALSE);
      // duplicate code as above
                IF ProjRec."Single/Main/Sub Project" = ProjRec."Single/Main/Sub Project"::"Main Project" THEN BEGIN
                //>>Call 4PS-001
                  SubProject.RESET;
                  SubProject.SETRANGE("Main Project",ProjRec."No.");
      //>>IME403
                  IF NOT includeFinishedJobs THEN
                    SubProject.SETRANGE("Project Status",0,SubProject."Project Status"::"Administrative Finished");
      //<<IME403
                  IF SubProject.FINDSET THEN REPEAT
                    //newPrognosisLine."Total Revenues"
                    ProjCostPlusEntry.SETRANGE("Project No.",SubProject."No.");
                    IF ProjCostPlusEntry.FINDSET THEN REPEAT
                      IF ProjPrincipal.GET(ProjCostPlusEntry."Project No.",ProjCostPlusEntry.Principal) THEN
                        IF DimVal.GET(GLSetup."Global Dimension 2 Code",ProjPrincipal."Cost Object") THEN
                          IF DimVal."Cost Type" = DimVal."Cost Type"::Revenue THEN
                            newPrognosisLine."Expected Revenues Cost Plus" += ProjCostPlusEntry."Sales Amount (LCY)"
                    UNTIL ProjCostPlusEntry.NEXT = 0;
                  UNTIL SubProject.NEXT = 0;
                END ELSE BEGIN
                  //<<Call 4PS-001
                  ProjCostPlusEntry.SETRANGE("Project No.",ProjRec."No.");
                  IF ProjCostPlusEntry.FINDSET THEN REPEAT
      //>>IME403
                    lJobProjectStatusOK := JobProjectStatusCheck(lJobProjectStatus, includeFinishedJobs, ProjCostPlusEntry."Project No.");
                      IF  lJobProjectStatus."No." <> ProjCostPlusEntry."Project No." THEN
                    IF lJobProjectStatusOK THEN
      //<<IME403
                      IF ProjPrincipal.GET(ProjCostPlusEntry."Project No.",ProjCostPlusEntry.Principal) THEN
                        IF DimVal.GET(GLSetup."Global Dimension 2 Code",ProjPrincipal."Cost Object") THEN
                          IF DimVal."Cost Type" = DimVal."Cost Type"::Revenue THEN
                            newPrognosisLine."Expected Revenues Cost Plus" += ProjCostPlusEntry."Sales Amount (LCY)"
                  UNTIL ProjCostPlusEntry.NEXT = 0;
                END;

                IF FillPrognosisExpectedRevenue THEN
                  newPrognosisLine."Prognosis Amount Revenue" := newPrognosisLine."Expected Revenues Installments"
                    +newPrognosisLine."Expected Revenues Cost Plus";

                newPrognosisLine."Total Revenues" :=
                  newPrognosisLine."Actual Revenues"
                  +newPrognosisLine."Open Revenues"
                  +newPrognosisLine."Expected Revenues Installments"
                  +newPrognosisLine."Expected Revenues Cost Plus";
                newPrognosisLine."Prognosis Total Revenues" :=
      // Manual input field
                  // NOT newPrognosisLine.Revenue
                  newPrognosisLine."Open Revenues" +
                  newPrognosisLine."Actual Revenues"
      //TotAmountBudget);
                  +newPrognosisLine."Prognosis Amount Revenue"; //TotHoursBudget);
              END ELSE BEGIN  //TotOpenAmtHours);
                newPrognosisLine.VALIDATE("Budget Amount",tempCostComp.Amount); //TotOpenHours);
                newPrognosisLine.VALIDATE("Budget Hours",tempCostComp.Quantity); //TotActualAmount);
                newPrognosisLine.VALIDATE("Open (Purchase)",tempCostComp."Line Discount Amount");
                newPrognosisLine.VALIDATE("Open Amount (Hours)",tempCostComp."Net Weight"); //TotActualHours);
                newPrognosisLine.VALIDATE("Open Hours",tempCostComp."Qty. to Invoice"); // flowfield! newPrognosisLine.VALIDATE("Previous Prognosis",tempCostComp."Payments (LCY)");
                newPrognosisLine.VALIDATE("Actual Costs",tempCostComp."Outstanding Amount"); //>> LAHE 130214
                newPrognosisLine.VALIDATE("Actual Hours",tempCostComp."Qty. Invoiced (Base)"); //>>4PS-001

                newPrognosisLine.VALIDATE("Total Cost",tempCostComp."Line Discount Amount"
                                                        +tempCostComp."Net Weight" +tempCostComp."Outstanding Amount");
                newPrognosisLine.VALIDATE("Total Hours",tempCostComp."Qty. to Invoice" +tempCostComp."Qty. Invoiced (Base)");

                newPrognosisLine.VALIDATE(Available,newPrognosisLine."Budget Amount" -newPrognosisLine."Total Cost");
                newPrognosisLine.VALIDATE("Available Hours",newPrognosisLine."Budget Hours" -newPrognosisLine."Total Hours");
                //newPrognosisLine."Prognosis Total Cost" := newPrognosisLine."Total Cost" +newPrognosisLine."Prognosis Costs";
                //<< 4PS-001
      //<< LAHE 130214
                //>>4PS-001
                newPrognosisLine."Prognosis Total Cost" := newPrognosisLine."Total Cost" +newPrognosisLine."Prognosis Costs" + newPrognosisLine."Overhead Surch. Progn. Costs" + newPrognosisLine."Ovh. Surcharge";
      // if minus then zero
                newPrognosisLine."Prognosis Total Hours" := newPrognosisLine."Total Hours" +newPrognosisLine."Prognosis Hours";
                newPrognosisLine."Prognosis End Result" := newPrognosisLine."Budget Amount" -newPrognosisLine."Prognosis Total Cost";
                //<<4PS-001
      //<< LAHE 130528
                newPrognosisLine."Open Ovh. Surch. (Purchase)" := tempCostComp."Surcharge Amount (LCY)";
                newPrognosisLine."Open Ovh. Surch. (Hours)" := tempCostComp."Gross Weight";
                newPrognosisLine."Open Amount (Hours)" := tempCostComp."Unit Volume";
                newPrognosisLine."Open (Inventory)" := tempCostComp."Units per Parcel";

                newPrognosisLine.Quantity := 1;
                newPrognosisLine.Price := newPrognosisLine.Available;
      //ENH-011 newPrognosisLine.VALIDATE("Prognosis Hours",newPrognosisLine."Budget Hours" -newPrognosisLine."Prognosis Hours");
                newPrognosisLine.VALIDATE("Prognosis Costs",newPrognosisLine.Quantity *newPrognosisLine.Price);
                newPrognosisLine.VALIDATE("Rate Code");
                // ***

      //>>ENH-011
      //>>4PS-043
                //newPrognosisLine.VALIDATE("Prognosis Hours",0);
                newPrognosisLine."Prognosis Hours" := 0;
      //<<4PS-043
                IF (newPrognosisLine."Cost Type" = newPrognosisLine."Cost Type"::Labor) AND
                    (newPrognosisLine."Actual Hours"<>0) AND (newPrognosisLine."Actual Costs"<>0) THEN
                  newPrognosisLine.VALIDATE("Prognosis Hours",
                    newPrognosisLine."Prognosis Costs"/(newPrognosisLine."Actual Costs"/newPrognosisLine."Actual Hours"));
      //<<ENH-011

                IF newPrognosisLine."Prognosis Hours" < 0 THEN
                  newPrognosisLine.VALIDATE("Prognosis Hours",0);
                IF newPrognosisLine."Prognosis Costs" < 0 THEN
                  newPrognosisLine.VALIDATE("Prognosis Costs",0);
      //Budget: Total amount in the budget lines of the project with the version date equal or before the prognosis date.
              END;
              //Budget Hours: Total hours in the budget lines of the project with the version date equal or before the prognosis date.
      //>>ENH-011
              newPrognosisLine."Prognosis Total Hours" := newPrognosisLine."Total Hours" +newPrognosisLine."Prognosis Hours";
              IF lCostComponent.GET(newPrognosisLine."Cost Component Code") THEN
                newPrognosisLine."Cost Type" := lCostComponent."Cost Type"-1;
      //<<ENH-011
              newPrognosisLine.MODIFY;
            END;
          END;
         UNTIL tempCostComp.NEXT = 0;
        END;
      END;

      {Open purchase: Total of the Purchase order control lines with the date equal or before the prognosis date of the following fields:
      "Outstanding amount
      "Overhead surcharge soft commitments
      "Amount Rcd. Not invoiced
      "Overhead surcharge firm commitments
      Open Amount hours: Total of the hour accounting lines (Field: Amount) for the project where the posting date is equal or before th
      Open hours: Total of the hour accounting lines (Field: Total line) for the project where the posting date is equal or before the p
      Actual: Total of the project ledger entries for the project with a posting date equal or before the prognosis date (Field: Total p
      Actual hours: Total of the project ledger entries for the project with a posting date equal or before the prognosis date and cost
      Total cost: Open purchase + Open amount hours + Actual
      Total hours: Open hours + Actual hours
      Available: Budget -/- Total cost
      Available hours: Budget hours -/- total hours
      Previous prognosis: Amount from the previous prognosis for this project for this combination of element and cost component
      ***
      >>4PS-001
      <<4PS-001
      *** }

      IF CopyPrevCostPrognosis THEN
        PrognosisManagement.CopyPrevPrognosisCC(Prognosis,FALSE);
      IF CopyPrevPrognosisEndResult THEN
        PrognosisManagement.CopyPrevPrognosisCC(Prognosis,TRUE);
      IF FillProgWithAvailableCost THEN
        PrognosisManagement.FillPrognosisWithAvailableCC(Prognosis);

      IF CopyPrevRevenuePrognosis2 THEN
        PrognosisManagement.CopyPrevPrognosisRevenueCC(Prognosis);
      IF CopyPrevPrognosisEndResRevenue THEN
        PrognosisManagement.CopyPrevPrognosisEndResRevCC(Prognosis);

      //>>4PS-001
      PrognosisManagement.CalcPrognosisSurchargesCC(newPrognosisLine);
      PrognosisManagement.CalcHoursSurchargesCC(newPrognosisLine);
      PrognosisManagement.CalcPurchSurchargesCC(newPrognosisLine);
      //<<4PS-001
    END;

    LOCAL PROCEDURE JobProjectStatusCheck@1100285100(VAR lJobProjectStatus@1100285100 : Record 11072003;pincludeFinishedJobs@1100285101 : Boolean;pJobNo@1100285102 : Code[20]) : Boolean;
    VAR
      lJobProjectStatusOK@1100285103 : Boolean;
    BEGIN
      //170419 ITERO.SB RFC-214
      //Function copied from CU 11020217 Prognosis Management

      //IME403
      IF pincludeFinishedJobs THEN
        EXIT(TRUE);

      IF  lJobProjectStatus."No." <> pJobNo THEN
        lJobProjectStatus.GET(pJobNo);

      lJobProjectStatusOK := (lJobProjectStatus."Project Status" IN [0..lJobProjectStatus."Project Status"::"Administrative Finished"]);
      EXIT(lJobProjectStatusOK);
    END;

    LOCAL PROCEDURE CreatePrognosisRemainingAmount@1100583001();
    VAR
      ElementLevel@1100583000 : Boolean;
      PrognosisLineElement@1100583001 : Record 11012035;
      PrognosisLineElement2@1100583002 : Record 11012035;
      NewPrognosis@1100583003 : Boolean;
    BEGIN
      IF CONFIRM(Text003) THEN BEGIN
        //ta bort
        IF Job."Prognosis per Element" THEN BEGIN
          ElementLevel := TRUE;
          IF PositionFilterLoc = '' THEN
            ERROR(Text004)
        END;
      IF NOT PrognosisRec.GET(Job."No.",ProgDate)  THEN BEGIN
        PrognosisRec.INIT;
        PrognosisRec.VALIDATE("Project No.",Job."No.");
        PrognosisRec.VALIDATE("Prognosis Date",ProgDate);
        PrognosisRec.INSERT(TRUE);
        NewPrognosis:=TRUE;
      END ELSE
        IF NOT ElementLevel THEN
          ERROR(Text005);
        IF PrognosisComment<>'' THEN
          PrognosisRec.VALIDATE(Comment,PrognosisComment);
        PrognosisRec.MODIFY(TRUE);

        //Skapa prognos p† kostnadsobjektsniv†
        IF Job."Forecast Level" = Job."Forecast Level"::"Cost Object" THEN BEGIN
          //>> 170419 ITERO.SB RFC-214
          IF NewPrognosis THEN BEGIN
            ProcessPrognosis(PrognosisRec);

            PrognosisLine.SETRANGE("Project No.",PrognosisRec."Project No.");
            PrognosisLine.SETRANGE("Prognosis Date",PrognosisRec."Prognosis Date");
            IF PrognosisLine.FINDSET(TRUE) THEN REPEAT
              PrognosisLine2:=PrognosisLine;
              IF PrognosisLine2."Prognosis Total Hours"<>0 THEN
                PrognosisLine2.VALIDATE("Prognosis Total Hours",0);
              IF DimVal.GET(GLSetup."Global Dimension 2 Code",PrognosisLine2."Cost Object") THEN
                IF NOT DimVal."Used for surcharge" THEN
                  PrognosisLine2.VALIDATE("Prognosis Total Cost",0);//*1.12));
              PrognosisLine2.VALIDATE("Amount Revenue",0);
              PrognosisLine2.MODIFY(TRUE);
            UNTIL PrognosisLine.NEXT=0;
            CLEAR(PrognosisLine);
          END;
          //<<
          //Skapa prognosrad f”r timmar (antal) - kostnadsobjekt
          ProjectDetail.SETRANGE("Project No.",Job."No.");
          ProjectDetail.SETFILTER("Prognosis Amount (rem tot)",'<>0');
          ProjectDetail.SETFILTER("Prognosis Cost Object",'<>%1','');
          ProjectDetail.SETRANGE(UserID,USERID);
          ProjectDetail.SETRANGE("Sum Quantity",TRUE);
          IF ProjectDetail.FINDSET THEN BEGIN REPEAT
            CLEAR(PrognosisLine);
            PrognosisLine.SETRANGE("Project No.",Job."No.");
            PrognosisLine.SETRANGE("Prognosis Date",ProgDate);
            PrognosisLine.SETRANGE("Cost Object",ProjectDetail."Prognosis Cost Object");
            PrognosisLine.SETRANGE(Element,'');
            IF PrognosisLine.FINDFIRST THEN BEGIN
              PrognosisLine.VALIDATE("Prognosis Total Hours",ProjectDetail."Prognosis Amount (rem tot)");
              //>>171122 ITERO.SB
              PrognosisLine.Comment := ProjectDetail.Comment;
              PrognosisLine.MODIFY(TRUE);
              ProjectDetail.Comment := '';
              ProjectDetail2:=ProjectDetail;
              IF PrognosisLine.Comment <> '' THEN
                ProjectDetail2."Prognosis comment" := PrognosisLine.Comment;
              //<<
              //ProjectDetail2."Prognosis Amount (rem tot)":=0;
              //ProjectDetail2."New Prognosis Amount (rem)" :=0;
              //ProjectDetail2."Prognosis Budget Line" := 0;
              ProjectDetail2.MODIFY(TRUE);
            END ELSE BEGIN
              CLEAR(PrognosisLine);
              PrognosisLine.INIT;
              PrognosisLine.VALIDATE("Project No.",Job."No.");
              PrognosisLine.VALIDATE("Prognosis Date",ProgDate);
              DV.GET(GLSetup."Global Dimension 2 Code",ProjectDetail."Prognosis Cost Object");
              PrognosisLine.VALIDATE("Cost Type",DV."Cost Type");
              PrognosisLine.VALIDATE("Cost Object",ProjectDetail."Prognosis Cost Object");
              PrognosisLine.INSERT(TRUE);
              PrognosisLine.VALIDATE("Prognosis Total Hours",ProjectDetail."Prognosis Amount (rem tot)");
              PrognosisLine.Comment := ProjectDetail.Comment;
              PrognosisLine.MODIFY(TRUE);
              ProjectDetail.Comment := '';
              ProjectDetail2:=ProjectDetail;
              IF PrognosisLine.Comment <> '' THEN
              ProjectDetail2."Prognosis comment" := PrognosisLine.Comment;
              //ProjectDetail2."Prognosis Amount (rem tot)":=0;
              //ProjectDetail2."New Prognosis Amount (rem)":=0;
              ProjectDetail2.MODIFY(TRUE);
            END;
          UNTIL ProjectDetail.NEXT=0;
          END;

          //>> 171228 ITERO.SB Handle revenue prognosis lines with amount = 0
          CLEAR(ProjectDetail);
          ProjectDetail.SETRANGE("Project No.",Job."No.");
          ProjectDetail.SETRANGE("Prognosis Amount (rem tot)",0);
          ProjectDetail.SETFILTER("Prognosis Cost Object",'<>%1','');
          ProjectDetail.SETRANGE(UserID,USERID);
          ProjectDetail.SETRANGE("Sum Quantity",FALSE);
          ProjectDetail.SETRANGE("Cost Type",ProjectDetail."Cost Type"::Revenue);

          IF ProjectDetail.FINDSET THEN BEGIN REPEAT
              CLEAR(PrognosisLine);
              PrognosisLine.SETRANGE("Project No.",Job."No.");
              PrognosisLine.SETRANGE("Prognosis Date",ProgDate);
              PrognosisLine.SETRANGE("Cost Object",ProjectDetail."Prognosis Cost Object");
              PrognosisLine.SETRANGE(Element,'');
              IF PrognosisLine.FINDFIRST THEN BEGIN
                //>> 170419 ITERO.SB RFC-214
                DV.GET(GLSetup."Global Dimension 2 Code",ProjectDetail."Prognosis Cost Object");
                //PrognosisLine.VALIDATE("Prognosis Total Cost",ProjectDetail.sum);
                IF DV."Cost Type"=DV."Cost Type"::Revenue THEN
                  IF ValueInThousands THEN
                    PrognosisLine.VALIDATE("Amount Revenue",((ProjectDetail."Prognosis Amount (rem tot)"*1000)-PrognosisLine.Invoiced))
                  ELSE
                    PrognosisLine.VALIDATE("Amount Revenue",ProjectDetail."Prognosis Amount (rem tot)"-PrognosisLine.Invoiced);
                  //ELSE
                  //  PrognosisLine.VALIDATE("Prognosis Total Cost",ProjectDetail."New Prognosis Amount");
                  //<<
                  //>>171122 ITERO.SB
                PrognosisLine.Comment := ProjectDetail.Comment;
                PrognosisLine.MODIFY(TRUE);
                ProjectDetail.Comment := '';
                ProjectDetail2:=ProjectDetail;
                IF PrognosisLine.Comment <> '' THEN
                  ProjectDetail2."Prognosis comment" := PrognosisLine.Comment;
                //<<
                //ProjectDetail2."New Prognosis Amount":=0;
                ProjectDetail2.MODIFY(TRUE);
              END;// ELSE BEGIN
            UNTIL ProjectDetail.NEXT=0;
          END;
          //<<

          //Skapa prognosrad f”r beloppsrader - kostnadsobjekt
          CLEAR(ProjectDetail);
          ProjectDetail.SETRANGE("Project No.",Job."No.");
          ProjectDetail.SETFILTER("Prognosis Amount (rem tot)",'<>0');
          ProjectDetail.SETFILTER("Prognosis Cost Object",'<>%1','');
          ProjectDetail.SETRANGE(UserID,USERID);
          ProjectDetail.SETRANGE("Sum Quantity",FALSE);
          IF ProjectDetail.FINDSET THEN BEGIN REPEAT
            CLEAR(PrognosisLine);
            PrognosisLine.SETRANGE("Project No.",Job."No.");
            PrognosisLine.SETRANGE("Prognosis Date",ProgDate);
            PrognosisLine.SETRANGE("Cost Object",ProjectDetail."Prognosis Cost Object");
            PrognosisLine.SETRANGE(Element,'');
            IF PrognosisLine.FINDFIRST THEN BEGIN
              //>> 170419 ITERO.SB RFC-214
              DV.GET(GLSetup."Global Dimension 2 Code",ProjectDetail."Prognosis Cost Object");
              //PrognosisLine.VALIDATE("Prognosis Total Cost",ProjectDetail."New Prognosis Amount");
              IF DV."Cost Type"=DV."Cost Type"::Revenue THEN BEGIN
                IF ValueInThousands THEN
                  PrognosisLine.VALIDATE("Amount Revenue",((ProjectDetail."Prognosis Amount (rem tot)"*1000)-PrognosisLine.Invoiced))
                ELSE
                  PrognosisLine.VALIDATE("Amount Revenue",ProjectDetail."Prognosis Amount (rem tot)"-PrognosisLine.Invoiced)
              END ELSE BEGIN
                IF ValueInThousands THEN
                  PrognosisLine.VALIDATE("Prognosis Total Cost",(ProjectDetail."Prognosis Amount (rem tot)"*1000))
                ELSE
                  PrognosisLine.VALIDATE("Prognosis Total Cost",ProjectDetail."Prognosis Amount (rem tot)");
              END;
              //<<
              //>>171122 ITERO.SB
              PrognosisLine.Comment := ProjectDetail.Comment;
              PrognosisLine.MODIFY(TRUE);
              ProjectDetail.Comment := '';
              ProjectDetail2:=ProjectDetail;
              IF PrognosisLine.Comment <> '' THEN
                ProjectDetail2."Prognosis comment" := PrognosisLine.Comment;
              //<<
             // ProjectDetail2."Prognosis Amount (rem tot)":=0;
             // ProjectDetail2."New Prognosis Amount (rem)":=0;
             // ProjectDetail2."Prognosis Budget Line":=0;
              ProjectDetail2.MODIFY(TRUE);
            END ELSE BEGIN
              CLEAR(PrognosisLine);
              PrognosisLine.INIT;
              PrognosisLine.VALIDATE("Project No.",Job."No.");
              PrognosisLine.VALIDATE("Prognosis Date",ProgDate);
              DV.GET(GLSetup."Global Dimension 2 Code",ProjectDetail."Prognosis Cost Object");
              PrognosisLine.VALIDATE("Cost Type",DV."Cost Type");
              PrognosisLine.VALIDATE("Cost Object",ProjectDetail."Prognosis Cost Object");
              PrognosisLine.INSERT(TRUE);
              IF DV."Cost Type"=DV."Cost Type"::Revenue THEN BEGIN
                IF ValueInThousands THEN
                  PrognosisLine.VALIDATE("Amount Revenue",(ProjectDetail."Prognosis Amount (rem tot)"*1000)-PrognosisLine.Invoiced)
                ELSE
                  PrognosisLine.VALIDATE("Amount Revenue",ProjectDetail."Prognosis Amount (rem tot)"-PrognosisLine.Invoiced)
              END ELSE BEGIN
                IF ValueInThousands THEN
                  PrognosisLine.VALIDATE("Prognosis Total Cost",(ProjectDetail."Prognosis Amount (rem tot)"*1000))
                ELSE
                  PrognosisLine.VALIDATE("Prognosis Total Cost",ProjectDetail."Prognosis Amount (rem tot)");
              END;
              PrognosisLine.Comment := ProjectDetail.Comment;
              PrognosisLine.MODIFY(TRUE);
              ProjectDetail.Comment := '';
              ProjectDetail2:=ProjectDetail;
              IF PrognosisLine.Comment <> '' THEN
                ProjectDetail2."Prognosis comment" := PrognosisLine.Comment;
              //ProjectDetail2."Prognosis Amount (rem tot)":=0;
              //ProjectDetail2."New Prognosis Amount (rem)":=0;
              //ProjectDetail2."Prognosis Budget Line":=0;
              ProjectDetail2.MODIFY(TRUE);
            END;
          UNTIL ProjectDetail.NEXT=0;
          PrognosisManagement.CalculateSurcharges(PrognosisRec);

          END;
        END;

        //Skapa prognos p† kostnadskomponentsniv†
        IF Job."Forecast Level" = Job."Forecast Level"::"Cost Component" THEN BEGIN
          //>> 170419 ITERO.SB RFC-214
          ProcessPrognosisCC(PrognosisRec);

          PrognosisLineCC.SETRANGE("Project No.",PrognosisRec."Project No.");
          PrognosisLineCC.SETRANGE("Prognosis Date",PrognosisRec."Prognosis Date");
          CostComponentSurch.SETRANGE("Used for surcharge",TRUE);
          IF CostComponentSurch.FINDFIRST THEN
            PrognosisLineCC.SETFILTER("Cost Component Code",'<>%1',CostComponentSurch.Code);
          IF PrognosisLineCC.FINDSET(TRUE) THEN REPEAT
            PrognosisLineCC2:=PrognosisLineCC;
            IF PrognosisLineCC2."Prognosis Total Hours"<>0 THEN
              PrognosisLineCC2.VALIDATE("Prognosis Total Hours",0);
            PrognosisLineCC2.VALIDATE("Prognosis Total Cost",0);
            PrognosisLineCC2.VALIDATE("Prognosis Total Revenues",0);
            PrognosisLineCC2.MODIFY(TRUE);
          UNTIL PrognosisLineCC.NEXT=0;
          CLEAR(PrognosisLineCC);
          //<<
          //Skapa prognosrad f”r timmar (antal) - kostnadskomponent
          ProjectDetail.SETRANGE("Project No.",Job."No.");
          ProjectDetail.SETFILTER("Prognosis Amount (rem tot)",'<>0');
          ProjectDetail.SETRANGE(UserID,USERID);
          ProjectDetail.SETRANGE("Sum Quantity",TRUE);
          ProjectDetail.SETFILTER("Cost Component Code",'<>%1','');
          IF ProjectDetail.FINDSET THEN BEGIN REPEAT
            CLEAR(PrognosisLineCC);
            IF PrognosisLineCC.GET(Job."No.",ProgDate,ProjectDetail."Cost Component Code") THEN BEGIN
              PrognosisLineCC.VALIDATE("Prognosis Hours",ProjectDetail."Prognosis Amount (rem tot)"-PrognosisLineCC."Total Hours");
              //>> 171122 ITERO.SB
              PrognosisLineCC.Comment := ProjectDetail.Comment;
              PrognosisLineCC.MODIFY(TRUE);
              ProjectDetail.Comment := '';
              ProjectDetail2:=ProjectDetail;
              IF PrognosisLineCC.Comment <> '' THEN
                ProjectDetail2."Prognosis comment" := PrognosisLineCC.Comment;
              //<<
              //ProjectDetail2."Prognosis Amount (rem tot)":=0;
              //ProjectDetail2."New Prognosis Amount (rem)":=0;
              //ProjectDetail2."Prognosis Budget Line":=0;
              ProjectDetail2.MODIFY(TRUE);
            END ELSE BEGIN
              CLEAR(PrognosisLineCC);
              PrognosisLineCC.INIT;
              PrognosisLineCC.VALIDATE("Project No.",Job."No.");
              PrognosisLineCC.VALIDATE("Prognosis Date",ProgDate);
              PrognosisLineCC.VALIDATE("Cost Component Code",ProjectDetail."Cost Component Code");
              PrognosisLineCC.INSERT(TRUE);
              PrognosisLineCC.VALIDATE("Prognosis Hours",ProjectDetail."Prognosis Amount (rem tot)"-PrognosisLineCC."Total Hours");
              PrognosisLineCC.Comment := ProjectDetail.Comment;
              PrognosisLineCC.MODIFY(TRUE);
              ProjectDetail.Comment := '';
              ProjectDetail2:=ProjectDetail;
              IF PrognosisLineCC.Comment <> '' THEN
                ProjectDetail2."Prognosis comment" := PrognosisLineCC.Comment;
              //ProjectDetail2."Prognosis Amount (rem tot)":=0;
              //ProjectDetail2."New Prognosis Amount (rem)":=0;
              //ProjectDetail2."Prognosis Budget Line":=0;
              ProjectDetail2.MODIFY(TRUE);
            END;

          UNTIL ProjectDetail.NEXT=0;
          END;
          //Skapa prognosrad f”r beloppsrader - kostnadskomponent
          CLEAR(ProjectDetail);
          ProjectDetail.SETRANGE("Project No.",Job."No.");
          ProjectDetail.SETFILTER("Prognosis Amount (rem tot)",'<>0');
          ProjectDetail.SETRANGE(UserID,USERID);
          ProjectDetail.SETRANGE("Sum Quantity",FALSE);
          ProjectDetail.SETFILTER("Cost Component Code",'<>%1','');
          IF ProjectDetail.FINDSET THEN BEGIN REPEAT
            CLEAR(PrognosisLineCC);
            IF PrognosisLineCC.GET(Job."No.",ProgDate,ProjectDetail."Cost Component Code") THEN BEGIN
              //>> 170419 ITERO.SB RFC-214
              //PrognosisLineCC.VALIDATE("Prognosis Total Cost",ProjectDetail."New Prognosis Amount");
              IF PrognosisLineCC."Cost Type"=PrognosisLineCC."Cost Type"::Revenue THEN BEGIN
                IF ValueInThousands THEN
                  PrognosisLineCC.VALIDATE("Prognosis Total Revenues",(ProjectDetail."Prognosis Amount (rem tot)"*1000))
                ELSE
                  PrognosisLineCC.VALIDATE("Prognosis Total Revenues",ProjectDetail."Prognosis Amount (rem tot)")
              END ELSE BEGIN
                IF ValueInThousands THEN
                  PrognosisLineCC.VALIDATE("Prognosis Total Cost",(ProjectDetail."Prognosis Amount (rem tot)"*1000))
                ELSE
                  PrognosisLineCC.VALIDATE("Prognosis Total Cost",ProjectDetail."Prognosis Amount (rem tot)");
              END;
              //<<
              PrognosisLineCC.MODIFY(TRUE);
              PrognosisManagement.CalcPrognosisSurchargesCC(PrognosisLineCC);
              PrognosisLineCC.GET(Job."No.",ProgDate,ProjectDetail."Cost Component Code");
              //>> 171122 ITERO.SB
              PrognosisLineCC.Comment := ProjectDetail.Comment;
              PrognosisLineCC.MODIFY(TRUE);
              ProjectDetail.Comment := '';
              ProjectDetail2:=ProjectDetail;
              IF PrognosisLineCC.Comment <> '' THEN
                ProjectDetail2."Prognosis comment" := PrognosisLineCC.Comment;
              //<<
              //ProjectDetail2."Prognosis Amount (rem tot)":=0;
              //ProjectDetail2."New Prognosis Amount (rem)":=0;
              //ProjectDetail2."Prognosis Budget Line":=0;
              ProjectDetail2.MODIFY(TRUE);
            END ELSE BEGIN
              CLEAR(PrognosisLineCC);
              PrognosisLineCC.INIT;
              PrognosisLineCC.VALIDATE("Project No.",Job."No.");
              PrognosisLineCC.VALIDATE("Prognosis Date",ProgDate);
              PrognosisLineCC.VALIDATE("Cost Component Code",ProjectDetail."Cost Component Code");
              PrognosisLineCC.INSERT(TRUE);
              IF PrognosisLineCC."Cost Type"=PrognosisLineCC."Cost Type"::Revenue THEN BEGIN
                IF ValueInThousands THEN
                  PrognosisLineCC.VALIDATE("Prognosis Total Revenues",(ProjectDetail."Prognosis Amount (rem tot)"*1000))
                ELSE
                  PrognosisLineCC.VALIDATE("Prognosis Total Revenues",ProjectDetail."Prognosis Amount (rem tot)")
              END ELSE BEGIN
                IF ValueInThousands THEN
                  PrognosisLineCC.VALIDATE("Prognosis Total Cost",(ProjectDetail."Prognosis Amount (rem tot)"*1000))
                ELSE
                  PrognosisLineCC.VALIDATE("Prognosis Total Cost",ProjectDetail."Prognosis Amount (rem tot)");
              END;
              PrognosisLineCC.MODIFY(TRUE);

              PrognosisManagement.CalcPrognosisSurchargesCC(PrognosisLineCC);
              PrognosisLineCC.GET(Job."No.",ProgDate,ProjectDetail."Cost Component Code");

              PrognosisLineCC.Comment := ProjectDetail.Comment;
              PrognosisLineCC.MODIFY(TRUE);
              ProjectDetail.Comment := '';
              ProjectDetail2:=ProjectDetail;
              IF PrognosisLineCC.Comment <> '' THEN
                ProjectDetail2."Prognosis comment" := PrognosisLineCC.Comment;
              //ProjectDetail2."Prognosis Amount (rem tot)":=0;
              //ProjectDetail2."New Prognosis Amount (rem)":=0;
              //ProjectDetail2."Prognosis Budget Line":=0;
              ProjectDetail2.MODIFY(TRUE);
            END;


          UNTIL ProjectDetail.NEXT=0;
          END;

        END;
        {BudgetLineProg.SETRANGE("Project No.",Job."No.");
        IF BudgetLineProg.FINDSET THEN REPEAT
          BudgetLineProg."New prognosis amount":=0;
          BudgetLineProg.MODIFY(FALSE);
        UNTIL BudgetLineProg.NEXT=0;}
      END;

      //Ta bort
      IF (ElementLevel) AND (PositionFilterLoc <> '') THEN BEGIN
        PrognosisLineElement.SETRANGE("Project No.",Job."No.");
        PrognosisLineElement.SETRANGE("Prognosis Date",ProgDate);
        PrognosisLineElement.SETRANGE(Element,'');
        IF PrognosisLineElement.FINDSET(FALSE) THEN REPEAT
          PrognosisLineElement2:=PrognosisLineElement;
          PrognosisLineElement2.RENAME(PrognosisLineElement."Project No.",PrognosisLineElement."Prognosis Date",PrognosisLineElement."Cost Type",PositionFilterLoc,PrognosisLineElement."Cost Object");
        UNTIL PrognosisLineElement.NEXT=0;
      END;
    END;

    LOCAL PROCEDURE CreatePrognosisTotalAmount@1100583002();
    BEGIN
      IF CONFIRM(Text003) THEN BEGIN

        PrognosisRec.INIT;
        PrognosisRec.VALIDATE("Project No.",Job."No.");
        PrognosisRec.VALIDATE("Prognosis Date",ProgDate);
        PrognosisRec.INSERT(TRUE);
        IF PrognosisComment<>'' THEN
          PrognosisRec.VALIDATE(Comment,PrognosisComment);
        PrognosisRec.MODIFY(TRUE);
        //Skapa prognos p† kostnadsobjektsniv†
        IF Job."Forecast Level" = Job."Forecast Level"::"Cost Object" THEN BEGIN
          //>> 170419 ITERO.SB RFC-214
          ProcessPrognosis(PrognosisRec);

          PrognosisLine.SETRANGE("Project No.",PrognosisRec."Project No.");
          PrognosisLine.SETRANGE("Prognosis Date",PrognosisRec."Prognosis Date");
          IF PrognosisLine.FINDSET(TRUE) THEN REPEAT
            PrognosisLine2:=PrognosisLine;
            IF PrognosisLine2."Prognosis Total Hours"<>0 THEN
              PrognosisLine2.VALIDATE("Prognosis Total Hours",0);
            IF DimVal.GET(GLSetup."Global Dimension 2 Code",PrognosisLine2."Cost Object") THEN
              IF NOT DimVal."Used for surcharge" THEN
                PrognosisLine2.VALIDATE("Prognosis Total Cost",0);//*1.12));
            PrognosisLine2.VALIDATE("Amount Revenue",0);
            PrognosisLine2.MODIFY(TRUE);
          UNTIL PrognosisLine.NEXT=0;
          CLEAR(PrognosisLine);

          //<<
          //Skapa prognosrad f”r timmar (antal) - kostnadsobjekt
          ProjectDetail.SETRANGE("Project No.",Job."No.");
          ProjectDetail.SETFILTER("New Prognosis Amount",'<>0');
          ProjectDetail.SETFILTER("Prognosis Cost Object",'<>%1','');
          ProjectDetail.SETRANGE(UserID,USERID);
          ProjectDetail.SETRANGE("Sum Quantity",TRUE);
          IF ProjectDetail.FINDSET THEN BEGIN REPEAT
            CLEAR(PrognosisLine);
            PrognosisLine.SETRANGE("Project No.",Job."No.");
            PrognosisLine.SETRANGE("Prognosis Date",ProgDate);
            PrognosisLine.SETRANGE("Cost Object",ProjectDetail."Prognosis Cost Object");
            IF PrognosisLine.FINDFIRST THEN BEGIN
              PrognosisLine.VALIDATE("Prognosis Total Hours",ProjectDetail."New Prognosis Amount");
              //>> 190117 ITERO.SB
              PrognosisLine.VALIDATE("Prognosis Total Cost",0);
              //<<
              //>>171122 ITERO.SB
              PrognosisLine.Comment := ProjectDetail.Comment;
              PrognosisLine.MODIFY(TRUE);
              ProjectDetail.Comment := '';
              ProjectDetail2:=ProjectDetail;
              IF PrognosisLine.Comment <> '' THEN
                ProjectDetail2."Prognosis comment" := PrognosisLine.Comment;
              //<<
              ProjectDetail2."New Prognosis Amount":=0;
              ProjectDetail2.MODIFY(TRUE);
            END ELSE BEGIN
              CLEAR(PrognosisLine);
              PrognosisLine.INIT;
              PrognosisLine.VALIDATE("Project No.",Job."No.");
              PrognosisLine.VALIDATE("Prognosis Date",ProgDate);
              DV.GET(GLSetup."Global Dimension 2 Code",ProjectDetail."Prognosis Cost Object");
              PrognosisLine.VALIDATE("Cost Type",DV."Cost Type");
              PrognosisLine.VALIDATE("Cost Object",ProjectDetail."Prognosis Cost Object");
              PrognosisLine.INSERT(TRUE);
              PrognosisLine.VALIDATE("Prognosis Total Hours",ProjectDetail."New Prognosis Amount");
              //>> 190117 ITERO.SB
              PrognosisLine.VALIDATE("Prognosis Total Cost",0);
              //<<
              PrognosisLine.Comment := ProjectDetail.Comment;
              PrognosisLine.MODIFY(TRUE);
              ProjectDetail.Comment := '';
              ProjectDetail2:=ProjectDetail;
              IF PrognosisLine.Comment <> '' THEN
                ProjectDetail2."Prognosis comment" := PrognosisLine.Comment;
              ProjectDetail2."New Prognosis Amount":=0;
              ProjectDetail2.MODIFY(TRUE);
            END;
          UNTIL ProjectDetail.NEXT=0;
          END;

          //>> 171228 ITERO.SB Handle revenue prognosis lines with amount = 0
          CLEAR(ProjectDetail);
          ProjectDetail.SETRANGE("Project No.",Job."No.");
          ProjectDetail.SETRANGE("New Prognosis Amount",0);
          ProjectDetail.SETFILTER("Prognosis Cost Object",'<>%1','');
          ProjectDetail.SETRANGE(UserID,USERID);
          ProjectDetail.SETRANGE("Sum Quantity",FALSE);
          ProjectDetail.SETRANGE("Cost Type",ProjectDetail."Cost Type"::Revenue);

          IF ProjectDetail.FINDSET THEN BEGIN REPEAT
              CLEAR(PrognosisLine);
              PrognosisLine.SETRANGE("Project No.",Job."No.");
              PrognosisLine.SETRANGE("Prognosis Date",ProgDate);
              PrognosisLine.SETRANGE("Cost Object",ProjectDetail."Prognosis Cost Object");
              IF PrognosisLine.FINDFIRST THEN BEGIN
                //>> 170419 ITERO.SB RFC-214
                DV.GET(GLSetup."Global Dimension 2 Code",ProjectDetail."Prognosis Cost Object");
                //PrognosisLine.VALIDATE("Prognosis Total Cost",ProjectDetail."New Prognosis Amount");
                IF DV."Cost Type"=DV."Cost Type"::Revenue THEN
                  IF ValueInThousands THEN
                    PrognosisLine.VALIDATE("Amount Revenue",((ProjectDetail."New Prognosis Amount"*1000)-PrognosisLine.Invoiced))
                  ELSE
                    PrognosisLine.VALIDATE("Amount Revenue",ProjectDetail."New Prognosis Amount"-PrognosisLine.Invoiced);
                  //ELSE
                  //  PrognosisLine.VALIDATE("Prognosis Total Cost",ProjectDetail."New Prognosis Amount");
                  //<<
                  //>>171122 ITERO.SB
                PrognosisLine.Comment := ProjectDetail.Comment;
                PrognosisLine.MODIFY(TRUE);
                ProjectDetail.Comment := '';
                ProjectDetail2:=ProjectDetail;
                IF PrognosisLine.Comment <> '' THEN
                  ProjectDetail2."Prognosis comment" := PrognosisLine.Comment;
                //<<
                //ProjectDetail2."New Prognosis Amount":=0;
                ProjectDetail2.MODIFY(TRUE);
              END;// ELSE BEGIN
            UNTIL ProjectDetail.NEXT=0;
          END;
          //<<

          //Skapa prognosrad f”r beloppsrader - kostnadsobjekt
          CLEAR(ProjectDetail);
          ProjectDetail.SETRANGE("Project No.",Job."No.");
          ProjectDetail.SETFILTER("New Prognosis Amount",'<>0');
          ProjectDetail.SETFILTER("Prognosis Cost Object",'<>%1','');
          ProjectDetail.SETRANGE(UserID,USERID);
          ProjectDetail.SETRANGE("Sum Quantity",FALSE);
          IF ProjectDetail.FINDSET THEN BEGIN REPEAT
            CLEAR(PrognosisLine);
            PrognosisLine.SETRANGE("Project No.",Job."No.");
            PrognosisLine.SETRANGE("Prognosis Date",ProgDate);
            PrognosisLine.SETRANGE("Cost Object",ProjectDetail."Prognosis Cost Object");
            IF PrognosisLine.FINDFIRST THEN BEGIN
              //>> 170419 ITERO.SB RFC-214
              DV.GET(GLSetup."Global Dimension 2 Code",ProjectDetail."Prognosis Cost Object");
              //PrognosisLine.VALIDATE("Prognosis Total Cost",ProjectDetail."New Prognosis Amount");
              IF DV."Cost Type"=DV."Cost Type"::Revenue THEN BEGIN
                IF ValueInThousands THEN
                  PrognosisLine.VALIDATE("Amount Revenue",((ProjectDetail."New Prognosis Amount"*1000)-PrognosisLine.Invoiced))
                ELSE
                  PrognosisLine.VALIDATE("Amount Revenue",ProjectDetail."New Prognosis Amount"-PrognosisLine.Invoiced)
              END ELSE BEGIN
                IF ValueInThousands THEN
                  PrognosisLine.VALIDATE("Prognosis Total Cost",(ProjectDetail."New Prognosis Amount"*1000))
                ELSE
                  PrognosisLine.VALIDATE("Prognosis Total Cost",ProjectDetail."New Prognosis Amount");
              END;
              //<<
              //>>171122 ITERO.SB
              PrognosisLine.Comment := ProjectDetail.Comment;
              PrognosisLine.MODIFY(TRUE);
              ProjectDetail.Comment := '';
              ProjectDetail2:=ProjectDetail;
              IF PrognosisLine.Comment <> '' THEN
                ProjectDetail2."Prognosis comment" := PrognosisLine.Comment;
              //<<
              ProjectDetail2."New Prognosis Amount":=0;
              ProjectDetail2.MODIFY(TRUE);
            END ELSE BEGIN
              CLEAR(PrognosisLine);
              PrognosisLine.INIT;
              PrognosisLine.VALIDATE("Project No.",Job."No.");
              PrognosisLine.VALIDATE("Prognosis Date",ProgDate);
              DV.GET(GLSetup."Global Dimension 2 Code",ProjectDetail."Prognosis Cost Object");
              PrognosisLine.VALIDATE("Cost Type",DV."Cost Type");
              PrognosisLine.VALIDATE("Cost Object",ProjectDetail."Prognosis Cost Object");
              PrognosisLine.INSERT(TRUE);
              IF DV."Cost Type"=DV."Cost Type"::Revenue THEN BEGIN
                IF ValueInThousands THEN
                  PrognosisLine.VALIDATE("Amount Revenue",(ProjectDetail."New Prognosis Amount"*1000)-PrognosisLine.Invoiced)
                ELSE
                  PrognosisLine.VALIDATE("Amount Revenue",ProjectDetail."New Prognosis Amount"-PrognosisLine.Invoiced)
              END ELSE BEGIN
                IF ValueInThousands THEN
                  PrognosisLine.VALIDATE("Prognosis Total Cost",(ProjectDetail."New Prognosis Amount"*1000))
                ELSE
                  PrognosisLine.VALIDATE("Prognosis Total Cost",ProjectDetail."New Prognosis Amount");
              END;
              PrognosisLine.Comment := ProjectDetail.Comment;
              PrognosisLine.MODIFY(TRUE);
              ProjectDetail.Comment := '';
              ProjectDetail2:=ProjectDetail;
              IF PrognosisLine.Comment <> '' THEN
                ProjectDetail2."Prognosis comment" := PrognosisLine.Comment;
              ProjectDetail2."New Prognosis Amount":=0;
              ProjectDetail2.MODIFY(TRUE);
            END;
          UNTIL ProjectDetail.NEXT=0;
          PrognosisManagement.CalculateSurcharges(PrognosisRec);

          END;
        END;

        //Skapa prognos p† kostnadskomponentsniv†
        IF Job."Forecast Level" = Job."Forecast Level"::"Cost Component" THEN BEGIN
          //>> 170419 ITERO.SB RFC-214
          ProcessPrognosisCC(PrognosisRec);

          PrognosisLineCC.SETRANGE("Project No.",PrognosisRec."Project No.");
          PrognosisLineCC.SETRANGE("Prognosis Date",PrognosisRec."Prognosis Date");
          CostComponentSurch.SETRANGE("Used for surcharge",TRUE);
          IF CostComponentSurch.FINDFIRST THEN
            PrognosisLineCC.SETFILTER("Cost Component Code",'<>%1',CostComponentSurch.Code);
          IF PrognosisLineCC.FINDSET(TRUE) THEN REPEAT
            PrognosisLineCC2:=PrognosisLineCC;
            IF PrognosisLineCC2."Prognosis Total Hours"<>0 THEN
              PrognosisLineCC2.VALIDATE("Prognosis Total Hours",0);
            PrognosisLineCC2.VALIDATE("Prognosis Total Cost",0);
            PrognosisLineCC2.VALIDATE("Prognosis Total Revenues",0);
            PrognosisLineCC2.MODIFY(TRUE);
          UNTIL PrognosisLineCC.NEXT=0;
          CLEAR(PrognosisLineCC);
          //<<
          //Skapa prognosrad f”r timmar (antal) - kostnadskomponent
          ProjectDetail.SETRANGE("Project No.",Job."No.");
          ProjectDetail.SETFILTER("New Prognosis Amount",'<>0');
          ProjectDetail.SETRANGE(UserID,USERID);
          ProjectDetail.SETRANGE("Sum Quantity",TRUE);
          ProjectDetail.SETFILTER("Cost Component Code",'<>%1','');
          IF ProjectDetail.FINDSET THEN BEGIN REPEAT
            CLEAR(PrognosisLineCC);
            IF PrognosisLineCC.GET(Job."No.",ProgDate,ProjectDetail."Cost Component Code") THEN BEGIN
              PrognosisLineCC.VALIDATE("Prognosis Hours",ProjectDetail."New Prognosis Amount"-PrognosisLineCC."Total Hours");
              //>> 171122 ITERO.SB
              PrognosisLineCC.Comment := ProjectDetail.Comment;
              PrognosisLineCC.MODIFY(TRUE);
              ProjectDetail.Comment := '';
              ProjectDetail2:=ProjectDetail;
              IF PrognosisLineCC.Comment <> '' THEN
                ProjectDetail2."Prognosis comment" := PrognosisLineCC.Comment;
              //<<
              ProjectDetail2."New Prognosis Amount":=0;
              ProjectDetail2.MODIFY(TRUE);
            END ELSE BEGIN
              CLEAR(PrognosisLineCC);
              PrognosisLineCC.INIT;
              PrognosisLineCC.VALIDATE("Project No.",Job."No.");
              PrognosisLineCC.VALIDATE("Prognosis Date",ProgDate);
              PrognosisLineCC.VALIDATE("Cost Component Code",ProjectDetail."Cost Component Code");
              PrognosisLineCC.INSERT(TRUE);
              PrognosisLineCC.VALIDATE("Prognosis Hours",ProjectDetail."New Prognosis Amount"-PrognosisLineCC."Total Hours");
              PrognosisLineCC.Comment := ProjectDetail.Comment;
              PrognosisLineCC.MODIFY(TRUE);
              ProjectDetail.Comment := '';
              ProjectDetail2:=ProjectDetail;
              IF PrognosisLineCC.Comment <> '' THEN
                ProjectDetail2."Prognosis comment" := PrognosisLineCC.Comment;
              ProjectDetail2."New Prognosis Amount":=0;
              ProjectDetail2.MODIFY(TRUE);
            END;

          UNTIL ProjectDetail.NEXT=0;
          END;
          //Skapa prognosrad f”r beloppsrader - kostnadskomponent
          CLEAR(ProjectDetail);
          ProjectDetail.SETRANGE("Project No.",Job."No.");
          ProjectDetail.SETFILTER("New Prognosis Amount",'<>0');
          ProjectDetail.SETRANGE(UserID,USERID);
          ProjectDetail.SETRANGE("Sum Quantity",FALSE);
          ProjectDetail.SETFILTER("Cost Component Code",'<>%1','');
          IF ProjectDetail.FINDSET THEN BEGIN REPEAT
            CLEAR(PrognosisLineCC);
            IF PrognosisLineCC.GET(Job."No.",ProgDate,ProjectDetail."Cost Component Code") THEN BEGIN
              //>> 170419 ITERO.SB RFC-214
              //PrognosisLineCC.VALIDATE("Prognosis Total Cost",ProjectDetail."New Prognosis Amount");
              IF PrognosisLineCC."Cost Type"=PrognosisLineCC."Cost Type"::Revenue THEN BEGIN
                IF ValueInThousands THEN
                  PrognosisLineCC.VALIDATE("Prognosis Total Revenues",(ProjectDetail."New Prognosis Amount"*1000))
                ELSE
                  PrognosisLineCC.VALIDATE("Prognosis Total Revenues",ProjectDetail."New Prognosis Amount")
              END ELSE BEGIN
                IF ValueInThousands THEN
                  PrognosisLineCC.VALIDATE("Prognosis Total Cost",(ProjectDetail."New Prognosis Amount"*1000))
                ELSE
                  PrognosisLineCC.VALIDATE("Prognosis Total Cost",ProjectDetail."New Prognosis Amount");
              END;
              //<<
              PrognosisLineCC.MODIFY(TRUE);
              PrognosisManagement.CalcPrognosisSurchargesCC(PrognosisLineCC);
              PrognosisLineCC.GET(Job."No.",ProgDate,ProjectDetail."Cost Component Code");
              //>> 171122 ITERO.SB
              PrognosisLineCC.Comment := ProjectDetail.Comment;
              PrognosisLineCC.MODIFY(TRUE);
              ProjectDetail.Comment := '';
              ProjectDetail2:=ProjectDetail;
              IF PrognosisLineCC.Comment <> '' THEN
                ProjectDetail2."Prognosis comment" := PrognosisLineCC.Comment;
              //<<
              ProjectDetail2."New Prognosis Amount":=0;
              ProjectDetail2.MODIFY(TRUE);
            END ELSE BEGIN
              CLEAR(PrognosisLineCC);
              PrognosisLineCC.INIT;
              PrognosisLineCC.VALIDATE("Project No.",Job."No.");
              PrognosisLineCC.VALIDATE("Prognosis Date",ProgDate);
              PrognosisLineCC.VALIDATE("Cost Component Code",ProjectDetail."Cost Component Code");
              PrognosisLineCC.INSERT(TRUE);
              IF PrognosisLineCC."Cost Type"=PrognosisLineCC."Cost Type"::Revenue THEN BEGIN
                IF ValueInThousands THEN
                  PrognosisLineCC.VALIDATE("Prognosis Total Revenues",(ProjectDetail."New Prognosis Amount"*1000))
                ELSE
                  PrognosisLineCC.VALIDATE("Prognosis Total Revenues",ProjectDetail."New Prognosis Amount")
              END ELSE BEGIN
                IF ValueInThousands THEN
                  PrognosisLineCC.VALIDATE("Prognosis Total Cost",(ProjectDetail."New Prognosis Amount"*1000))
                ELSE
                  PrognosisLineCC.VALIDATE("Prognosis Total Cost",ProjectDetail."New Prognosis Amount");
              END;
              PrognosisLineCC.MODIFY(TRUE);

              PrognosisManagement.CalcPrognosisSurchargesCC(PrognosisLineCC);
              PrognosisLineCC.GET(Job."No.",ProgDate,ProjectDetail."Cost Component Code");

              PrognosisLineCC.Comment := ProjectDetail.Comment;
              PrognosisLineCC.MODIFY(TRUE);
              ProjectDetail.Comment := '';
              ProjectDetail2:=ProjectDetail;
              IF PrognosisLineCC.Comment <> '' THEN
                ProjectDetail2."Prognosis comment" := PrognosisLineCC.Comment;
              ProjectDetail2."New Prognosis Amount":=0;
              ProjectDetail2.MODIFY(TRUE);
            END;


          UNTIL ProjectDetail.NEXT=0;
          END;

        END;
      //191127 ORANGO.SB #26768 Set fixed prognosis
      IF PrognosisRec.GET(Job."No.",ProgDate)  THEN
        PrognosisRec.Fixed := TRUE;
        PrognosisRec.MODIFY;
      //
      END;
    END;

    PROCEDURE SetPositionFilter@1100583000(PositionFilter@1100583000 : Code[10]);
    BEGIN
      PositionFilterLoc := PositionFilter
    END;

    LOCAL PROCEDURE CreatePrognosisRemainingAmountTest@1101285000();
    VAR
      ElementLevel@1100583000 : Boolean;
      PrognosisLineElement@1100583001 : Record 11012035;
      PrognosisLineElement2@1100583002 : Record 11012035;
      NewPrognosis@1100583003 : Boolean;
    BEGIN
      IF CONFIRM(Text003) THEN BEGIN







      IF NOT PrognosisRec.GET(Job."No.",ProgDate)  THEN BEGIN
        PrognosisRec.INIT;
        PrognosisRec.VALIDATE("Project No.",Job."No.");
        PrognosisRec.VALIDATE("Prognosis Date",ProgDate);
        PrognosisRec.INSERT(TRUE);
        NewPrognosis:=TRUE;
      END ELSE

        IF PrognosisComment<>'' THEN
          PrognosisRec.VALIDATE(Comment,PrognosisComment);
        PrognosisRec.MODIFY(TRUE);

        //Skapa prognos p† kostnadsobjektsniv†
        IF Job."Forecast Level" = Job."Forecast Level"::"Cost Object" THEN BEGIN
          //>> 170419 ITERO.SB RFC-214
          IF NewPrognosis THEN BEGIN
            ProcessPrognosis(PrognosisRec);

            PrognosisLine.SETRANGE("Project No.",PrognosisRec."Project No.");
            PrognosisLine.SETRANGE("Prognosis Date",PrognosisRec."Prognosis Date");
            IF PrognosisLine.FINDSET(TRUE) THEN REPEAT
              PrognosisLine2:=PrognosisLine;
              IF PrognosisLine2."Prognosis Total Hours"<>0 THEN
                PrognosisLine2.VALIDATE("Prognosis Total Hours",0);
              IF DimVal.GET(GLSetup."Global Dimension 2 Code",PrognosisLine2."Cost Object") THEN
                IF NOT DimVal."Used for surcharge" THEN
                  PrognosisLine2.VALIDATE("Prognosis Total Cost",0);//*1.12));
              PrognosisLine2.VALIDATE("Amount Revenue",0);
              PrognosisLine2.MODIFY(TRUE);
            UNTIL PrognosisLine.NEXT=0;
            CLEAR(PrognosisLine);
          END;
          //<<
          //Skapa prognosrad f”r timmar (antal) - kostnadsobjekt
          ProjectDetail.SETRANGE("Project No.",Job."No.");
          ProjectDetail.SETFILTER("Prognosis Amount (rem tot)",'<>0');
          ProjectDetail.SETFILTER("Prognosis Cost Object",'<>%1','');
          ProjectDetail.SETRANGE(UserID,USERID);
          ProjectDetail.SETRANGE("Sum Quantity",TRUE);
          IF ProjectDetail.FINDSET THEN BEGIN REPEAT
            CLEAR(PrognosisLine);
            PrognosisLine.SETRANGE("Project No.",Job."No.");
            PrognosisLine.SETRANGE("Prognosis Date",ProgDate);
            PrognosisLine.SETRANGE("Cost Object",ProjectDetail."Prognosis Cost Object");
            PrognosisLine.SETRANGE(Element,'');
            IF PrognosisLine.FINDFIRST THEN BEGIN
              PrognosisLine.VALIDATE("Prognosis Total Hours",ProjectDetail."Prognosis Amount (rem tot)");
              //>>171122 ITERO.SB
              PrognosisLine.Comment := ProjectDetail.Comment;
              PrognosisLine.MODIFY(TRUE);
              ProjectDetail.Comment := '';
              ProjectDetail2:=ProjectDetail;
              IF PrognosisLine.Comment <> '' THEN
                ProjectDetail2."Prognosis comment" := PrognosisLine.Comment;
              //<<
              //ProjectDetail2."Prognosis Amount (rem tot)":=0;
              //ProjectDetail2."New Prognosis Amount (rem)" :=0;
              //ProjectDetail2."Prognosis Budget Line" := 0;
              ProjectDetail2.MODIFY(TRUE);
            END ELSE BEGIN
              CLEAR(PrognosisLine);
              PrognosisLine.INIT;
              PrognosisLine.VALIDATE("Project No.",Job."No.");
              PrognosisLine.VALIDATE("Prognosis Date",ProgDate);
              DV.GET(GLSetup."Global Dimension 2 Code",ProjectDetail."Prognosis Cost Object");
              PrognosisLine.VALIDATE("Cost Type",DV."Cost Type");
              PrognosisLine.VALIDATE("Cost Object",ProjectDetail."Prognosis Cost Object");
              PrognosisLine.INSERT(TRUE);
              PrognosisLine.VALIDATE("Prognosis Total Hours",ProjectDetail."Prognosis Amount (rem tot)");
              PrognosisLine.Comment := ProjectDetail.Comment;
              PrognosisLine.MODIFY(TRUE);
              ProjectDetail.Comment := '';
              ProjectDetail2:=ProjectDetail;
              IF PrognosisLine.Comment <> '' THEN
              ProjectDetail2."Prognosis comment" := PrognosisLine.Comment;
              //ProjectDetail2."Prognosis Amount (rem tot)":=0;
              //ProjectDetail2."New Prognosis Amount (rem)":=0;
              ProjectDetail2.MODIFY(TRUE);
            END;
          UNTIL ProjectDetail.NEXT=0;
          END;

          //>> 171228 ITERO.SB Handle revenue prognosis lines with amount = 0
          CLEAR(ProjectDetail);
          ProjectDetail.SETRANGE("Project No.",Job."No.");
          ProjectDetail.SETRANGE("Prognosis Amount (rem tot)",0);
          ProjectDetail.SETFILTER("Prognosis Cost Object",'<>%1','');
          ProjectDetail.SETRANGE(UserID,USERID);
          ProjectDetail.SETRANGE("Sum Quantity",FALSE);
          ProjectDetail.SETRANGE("Cost Type",ProjectDetail."Cost Type"::Revenue);

          IF ProjectDetail.FINDSET THEN BEGIN REPEAT
              CLEAR(PrognosisLine);
              PrognosisLine.SETRANGE("Project No.",Job."No.");
              PrognosisLine.SETRANGE("Prognosis Date",ProgDate);
              PrognosisLine.SETRANGE("Cost Object",ProjectDetail."Prognosis Cost Object");
              PrognosisLine.SETRANGE(Element,'');
              IF PrognosisLine.FINDFIRST THEN BEGIN
                //>> 170419 ITERO.SB RFC-214
                DV.GET(GLSetup."Global Dimension 2 Code",ProjectDetail."Prognosis Cost Object");
                //PrognosisLine.VALIDATE("Prognosis Total Cost",ProjectDetail.sum);
                IF DV."Cost Type"=DV."Cost Type"::Revenue THEN
                  IF ValueInThousands THEN
                    PrognosisLine.VALIDATE("Amount Revenue",((ProjectDetail."Prognosis Amount (rem tot)"*1000)-PrognosisLine.Invoiced))
                  ELSE
                    PrognosisLine.VALIDATE("Amount Revenue",ProjectDetail."Prognosis Amount (rem tot)"-PrognosisLine.Invoiced);
                  //ELSE
                  //  PrognosisLine.VALIDATE("Prognosis Total Cost",ProjectDetail."New Prognosis Amount");
                  //<<
                  //>>171122 ITERO.SB
                PrognosisLine.Comment := ProjectDetail.Comment;
                PrognosisLine.MODIFY(TRUE);
                ProjectDetail.Comment := '';
                ProjectDetail2:=ProjectDetail;
                IF PrognosisLine.Comment <> '' THEN
                  ProjectDetail2."Prognosis comment" := PrognosisLine.Comment;
                //<<
                //ProjectDetail2."New Prognosis Amount":=0;
                ProjectDetail2.MODIFY(TRUE);
              END;// ELSE BEGIN
            UNTIL ProjectDetail.NEXT=0;
          END;
          //<<

          //Skapa prognosrad f”r beloppsrader - kostnadsobjekt
          CLEAR(ProjectDetail);
          ProjectDetail.SETRANGE("Project No.",Job."No.");
          ProjectDetail.SETFILTER("Prognosis Amount (rem tot)",'<>0');
          ProjectDetail.SETFILTER("Prognosis Cost Object",'<>%1','');
          ProjectDetail.SETRANGE(UserID,USERID);
          ProjectDetail.SETRANGE("Sum Quantity",FALSE);
          IF ProjectDetail.FINDSET THEN BEGIN REPEAT
            CLEAR(PrognosisLine);
            PrognosisLine.SETRANGE("Project No.",Job."No.");
            PrognosisLine.SETRANGE("Prognosis Date",ProgDate);
            PrognosisLine.SETRANGE("Cost Object",ProjectDetail."Prognosis Cost Object");
            PrognosisLine.SETRANGE(Element,'');
            IF PrognosisLine.FINDFIRST THEN BEGIN
              //>> 170419 ITERO.SB RFC-214
              DV.GET(GLSetup."Global Dimension 2 Code",ProjectDetail."Prognosis Cost Object");
              //PrognosisLine.VALIDATE("Prognosis Total Cost",ProjectDetail."New Prognosis Amount");
              IF DV."Cost Type"=DV."Cost Type"::Revenue THEN BEGIN
                IF ValueInThousands THEN
                  PrognosisLine.VALIDATE("Amount Revenue",((ProjectDetail."Prognosis Amount (rem tot)"*1000)-PrognosisLine.Invoiced))
                ELSE
                  PrognosisLine.VALIDATE("Amount Revenue",ProjectDetail."Prognosis Amount (rem tot)"-PrognosisLine.Invoiced)
              END ELSE BEGIN
                IF ValueInThousands THEN
                  PrognosisLine.VALIDATE("Prognosis Total Cost",(ProjectDetail."Prognosis Amount (rem tot)"*1000))
                ELSE
                  PrognosisLine.VALIDATE("Prognosis Total Cost",ProjectDetail."Prognosis Amount (rem tot)");
              END;
              //<<
              //>>171122 ITERO.SB
              PrognosisLine.Comment := ProjectDetail.Comment;
              PrognosisLine.MODIFY(TRUE);
              ProjectDetail.Comment := '';
              ProjectDetail2:=ProjectDetail;
              IF PrognosisLine.Comment <> '' THEN
                ProjectDetail2."Prognosis comment" := PrognosisLine.Comment;
              //<<
             // ProjectDetail2."Prognosis Amount (rem tot)":=0;
             // ProjectDetail2."New Prognosis Amount (rem)":=0;
             // ProjectDetail2."Prognosis Budget Line":=0;
              ProjectDetail2.MODIFY(TRUE);
            END ELSE BEGIN
              CLEAR(PrognosisLine);
              PrognosisLine.INIT;
              PrognosisLine.VALIDATE("Project No.",Job."No.");
              PrognosisLine.VALIDATE("Prognosis Date",ProgDate);
              DV.GET(GLSetup."Global Dimension 2 Code",ProjectDetail."Prognosis Cost Object");
              PrognosisLine.VALIDATE("Cost Type",DV."Cost Type");
              PrognosisLine.VALIDATE("Cost Object",ProjectDetail."Prognosis Cost Object");
              PrognosisLine.INSERT(TRUE);
              IF DV."Cost Type"=DV."Cost Type"::Revenue THEN BEGIN
                IF ValueInThousands THEN
                  PrognosisLine.VALIDATE("Amount Revenue",(ProjectDetail."Prognosis Amount (rem tot)"*1000)-PrognosisLine.Invoiced)
                ELSE
                  PrognosisLine.VALIDATE("Amount Revenue",ProjectDetail."Prognosis Amount (rem tot)"-PrognosisLine.Invoiced)
              END ELSE BEGIN
                IF ValueInThousands THEN
                  PrognosisLine.VALIDATE("Prognosis Total Cost",(ProjectDetail."Prognosis Amount (rem tot)"*1000))
                ELSE
                  PrognosisLine.VALIDATE("Prognosis Total Cost",ProjectDetail."Prognosis Amount (rem tot)");
              END;
              PrognosisLine.Comment := ProjectDetail.Comment;
              PrognosisLine.MODIFY(TRUE);
              ProjectDetail.Comment := '';
              ProjectDetail2:=ProjectDetail;
              IF PrognosisLine.Comment <> '' THEN
                ProjectDetail2."Prognosis comment" := PrognosisLine.Comment;
              //ProjectDetail2."Prognosis Amount (rem tot)":=0;
              //ProjectDetail2."New Prognosis Amount (rem)":=0;
              //ProjectDetail2."Prognosis Budget Line":=0;
              ProjectDetail2.MODIFY(TRUE);
            END;
          UNTIL ProjectDetail.NEXT=0;
          PrognosisManagement.CalculateSurcharges(PrognosisRec);

          END;
        END;

        //Skapa prognos p† kostnadskomponentsniv†
        IF Job."Forecast Level" = Job."Forecast Level"::"Cost Component" THEN BEGIN
          //>> 170419 ITERO.SB RFC-214
          ProcessPrognosisCC(PrognosisRec);

          PrognosisLineCC.SETRANGE("Project No.",PrognosisRec."Project No.");
          PrognosisLineCC.SETRANGE("Prognosis Date",PrognosisRec."Prognosis Date");
          CostComponentSurch.SETRANGE("Used for surcharge",TRUE);
          IF CostComponentSurch.FINDFIRST THEN
            PrognosisLineCC.SETFILTER("Cost Component Code",'<>%1',CostComponentSurch.Code);
          IF PrognosisLineCC.FINDSET(TRUE) THEN REPEAT
            PrognosisLineCC2:=PrognosisLineCC;
            IF PrognosisLineCC2."Prognosis Total Hours"<>0 THEN
              PrognosisLineCC2.VALIDATE("Prognosis Total Hours",0);
            PrognosisLineCC2.VALIDATE("Prognosis Total Cost",0);
            PrognosisLineCC2.VALIDATE("Prognosis Total Revenues",0);
            PrognosisLineCC2.MODIFY(TRUE);
          UNTIL PrognosisLineCC.NEXT=0;
          CLEAR(PrognosisLineCC);
          //<<
          //Skapa prognosrad f”r timmar (antal) - kostnadskomponent
          ProjectDetail.SETRANGE("Project No.",Job."No.");
          ProjectDetail.SETFILTER("Prognosis Amount (rem tot)",'<>0');
          ProjectDetail.SETRANGE(UserID,USERID);
          ProjectDetail.SETRANGE("Sum Quantity",TRUE);
          ProjectDetail.SETFILTER("Cost Component Code",'<>%1','');
          IF ProjectDetail.FINDSET THEN BEGIN REPEAT
            CLEAR(PrognosisLineCC);
            IF PrognosisLineCC.GET(Job."No.",ProgDate,ProjectDetail."Cost Component Code") THEN BEGIN
              PrognosisLineCC.VALIDATE("Prognosis Hours",ProjectDetail."Prognosis Amount (rem tot)"-PrognosisLineCC."Total Hours");
              //>> 171122 ITERO.SB
              PrognosisLineCC.Comment := ProjectDetail.Comment;
              PrognosisLineCC.MODIFY(TRUE);
              ProjectDetail.Comment := '';
              ProjectDetail2:=ProjectDetail;
              IF PrognosisLineCC.Comment <> '' THEN
                ProjectDetail2."Prognosis comment" := PrognosisLineCC.Comment;
              //<<
              //ProjectDetail2."Prognosis Amount (rem tot)":=0;
              //ProjectDetail2."New Prognosis Amount (rem)":=0;
              //ProjectDetail2."Prognosis Budget Line":=0;
              ProjectDetail2.MODIFY(TRUE);
            END ELSE BEGIN
              CLEAR(PrognosisLineCC);
              PrognosisLineCC.INIT;
              PrognosisLineCC.VALIDATE("Project No.",Job."No.");
              PrognosisLineCC.VALIDATE("Prognosis Date",ProgDate);
              PrognosisLineCC.VALIDATE("Cost Component Code",ProjectDetail."Cost Component Code");
              PrognosisLineCC.INSERT(TRUE);
              PrognosisLineCC.VALIDATE("Prognosis Hours",ProjectDetail."Prognosis Amount (rem tot)"-PrognosisLineCC."Total Hours");
              PrognosisLineCC.Comment := ProjectDetail.Comment;
              PrognosisLineCC.MODIFY(TRUE);
              ProjectDetail.Comment := '';
              ProjectDetail2:=ProjectDetail;
              IF PrognosisLineCC.Comment <> '' THEN
                ProjectDetail2."Prognosis comment" := PrognosisLineCC.Comment;
              //ProjectDetail2."Prognosis Amount (rem tot)":=0;
              //ProjectDetail2."New Prognosis Amount (rem)":=0;
              //ProjectDetail2."Prognosis Budget Line":=0;
              ProjectDetail2.MODIFY(TRUE);
            END;

          UNTIL ProjectDetail.NEXT=0;
          END;
          //Skapa prognosrad f”r beloppsrader - kostnadskomponent
          CLEAR(ProjectDetail);
          ProjectDetail.SETRANGE("Project No.",Job."No.");
          ProjectDetail.SETFILTER("Prognosis Amount (rem tot)",'<>0');
          ProjectDetail.SETRANGE(UserID,USERID);
          ProjectDetail.SETRANGE("Sum Quantity",FALSE);
          ProjectDetail.SETFILTER("Cost Component Code",'<>%1','');
          IF ProjectDetail.FINDSET THEN BEGIN REPEAT
            CLEAR(PrognosisLineCC);
            IF PrognosisLineCC.GET(Job."No.",ProgDate,ProjectDetail."Cost Component Code") THEN BEGIN
              //>> 170419 ITERO.SB RFC-214
              //PrognosisLineCC.VALIDATE("Prognosis Total Cost",ProjectDetail."New Prognosis Amount");
              IF PrognosisLineCC."Cost Type"=PrognosisLineCC."Cost Type"::Revenue THEN BEGIN
                IF ValueInThousands THEN
                  PrognosisLineCC.VALIDATE("Prognosis Total Revenues",(ProjectDetail."Prognosis Amount (rem tot)"*1000))
                ELSE
                  PrognosisLineCC.VALIDATE("Prognosis Total Revenues",ProjectDetail."Prognosis Amount (rem tot)")
              END ELSE BEGIN
                IF ValueInThousands THEN
                  PrognosisLineCC.VALIDATE("Prognosis Total Cost",(ProjectDetail."Prognosis Amount (rem tot)"*1000))
                ELSE
                  PrognosisLineCC.VALIDATE("Prognosis Total Cost",ProjectDetail."Prognosis Amount (rem tot)");
              END;
              //<<
              PrognosisLineCC.MODIFY(TRUE);
              PrognosisManagement.CalcPrognosisSurchargesCC(PrognosisLineCC);
              PrognosisLineCC.GET(Job."No.",ProgDate,ProjectDetail."Cost Component Code");
              //>> 171122 ITERO.SB
              PrognosisLineCC.Comment := ProjectDetail.Comment;
              PrognosisLineCC.MODIFY(TRUE);
              ProjectDetail.Comment := '';
              ProjectDetail2:=ProjectDetail;
              IF PrognosisLineCC.Comment <> '' THEN
                ProjectDetail2."Prognosis comment" := PrognosisLineCC.Comment;
              //<<
              //ProjectDetail2."Prognosis Amount (rem tot)":=0;
              //ProjectDetail2."New Prognosis Amount (rem)":=0;
              //ProjectDetail2."Prognosis Budget Line":=0;
              ProjectDetail2.MODIFY(TRUE);
            END ELSE BEGIN
              CLEAR(PrognosisLineCC);
              PrognosisLineCC.INIT;
              PrognosisLineCC.VALIDATE("Project No.",Job."No.");
              PrognosisLineCC.VALIDATE("Prognosis Date",ProgDate);
              PrognosisLineCC.VALIDATE("Cost Component Code",ProjectDetail."Cost Component Code");
              PrognosisLineCC.INSERT(TRUE);
              IF PrognosisLineCC."Cost Type"=PrognosisLineCC."Cost Type"::Revenue THEN BEGIN
                IF ValueInThousands THEN
                  PrognosisLineCC.VALIDATE("Prognosis Total Revenues",(ProjectDetail."Prognosis Amount (rem tot)"*1000))
                ELSE
                  PrognosisLineCC.VALIDATE("Prognosis Total Revenues",ProjectDetail."Prognosis Amount (rem tot)")
              END ELSE BEGIN
                IF ValueInThousands THEN
                  PrognosisLineCC.VALIDATE("Prognosis Total Cost",(ProjectDetail."Prognosis Amount (rem tot)"*1000))
                ELSE
                  PrognosisLineCC.VALIDATE("Prognosis Total Cost",ProjectDetail."Prognosis Amount (rem tot)");
              END;
              PrognosisLineCC.MODIFY(TRUE);

              PrognosisManagement.CalcPrognosisSurchargesCC(PrognosisLineCC);
              PrognosisLineCC.GET(Job."No.",ProgDate,ProjectDetail."Cost Component Code");

              PrognosisLineCC.Comment := ProjectDetail.Comment;
              PrognosisLineCC.MODIFY(TRUE);
              ProjectDetail.Comment := '';
              ProjectDetail2:=ProjectDetail;
              IF PrognosisLineCC.Comment <> '' THEN
                ProjectDetail2."Prognosis comment" := PrognosisLineCC.Comment;
              //ProjectDetail2."Prognosis Amount (rem tot)":=0;
              //ProjectDetail2."New Prognosis Amount (rem)":=0;
              //ProjectDetail2."Prognosis Budget Line":=0;
              ProjectDetail2.MODIFY(TRUE);
            END;


          UNTIL ProjectDetail.NEXT=0;
          END;

        END;
      END;
    END;

    LOCAL PROCEDURE CalculatePrognosis@1101285001();
    VAR
      ProjectElement@1101285000 : Record 11012010;
      NewAmountPrognosis@1101285001 : Decimal;
      NewPrognosis@1101285002 : Boolean;
      SumLockedAmount@1101285003 : Decimal;
      ProjectDetailLockedAmount@1101285004 : Record 11128112;
      BudgetPrognosis@1101285005 : Decimal;
    BEGIN
      IF NOT PrognosisRec.GET(Job."No.",ProgDate)  THEN BEGIN
        PrognosisRec.INIT;
        PrognosisRec.VALIDATE("Project No.",Job."No.");
        PrognosisRec.VALIDATE("Prognosis Date",ProgDate);
        PrognosisRec.INSERT(TRUE);
      END ELSE

        IF PrognosisComment<>'' THEN
          PrognosisRec.VALIDATE(Comment,PrognosisComment);
          PrognosisRec.MODIFY(TRUE);

      CLEAR(ProjectElement);
      ProjectElement.SETRANGE("Project No.", Job."No.");
      IF ProjectElement.FIND('-') THEN REPEAT
        CLEAR(ProjectDetail);
        ProjectDetail.SETRANGE("Project No.", Job."No.");
        ProjectDetail.SETFILTER("Prognosis Cost Object", '<>%1', '');
        IF ProjectDetail.FIND('-') THEN REPEAT

          BudgetPrognosis := 0;
          BudgetLine.SETRANGE("Project No.", Job."No.");
          BudgetLine.SETFILTER("Cost Object", ProjectDetail."Prognosis Cost Object");
          BudgetLine.SETFILTER("New prognosis amount", '<>%1', 0);
          BudgetLine.SETFILTER(Position, ProjectElement.Element);
          IF BudgetLine.FINDSET THEN BEGIN //REPEAT
          BudgetLine.CALCSUMS("New prognosis amount");
          BudgetPrognosis := BudgetLine."New prognosis amount";
          END;


            //IF NOT ProjectDetailLockedAmount.GET(Job."No.") THEN
            //  EXIT;
            IF ProjectDetailLockedAmount.GET(Job."No.") THEN  BEGIN
            SumLockedAmount := 0;
            CLEAR(JobLedgEntry);
            JobLedgEntry.SETCURRENTKEY("Job No.", "Posting Date");
            JobLedgEntry.SETRANGE("Job No.", Job."No.");
            JobLedgEntry.SETFILTER("Entry No.",'..%1',ProjectDetailLockedAmount."Last Entry No");
            JobLedgEntry.SETRANGE("Global Dimension 2 Code", ProjectDetail."Prognosis Cost Object");
            JobLedgEntry.SETRANGE(Element, ProjectElement.Element);
            IF JobLedgEntry.FINDSET THEN BEGIN
            JobLedgEntry.CALCSUMS("Total Cost (LCY)");
            SumLockedAmount := JobLedgEntry."Total Cost (LCY)";
            END;
             NewAmountPrognosis := 0;
             NewAmountPrognosis := SumLockedAmount + BudgetPrognosis;
            END ELSE BEGIN
              NewAmountPrognosis := 0;
              NewAmountPrognosis := BudgetPrognosis;
            END;

            IF NewAmountPrognosis <> 0 THEN BEGIN
              CLEAR(PrognosisLine);
              PrognosisLine.SETRANGE("Project No.",Job."No.");
              PrognosisLine.SETRANGE("Prognosis Date",ProgDate);
              PrognosisLine.SETRANGE("Cost Object", ProjectDetail."Prognosis Cost Object");
              PrognosisLine.SETRANGE(Element,ProjectElement.Element);
              IF PrognosisLine.FINDFIRST THEN BEGIN
                PrognosisLine.VALIDATE("Prognosis Total Cost", NewAmountPrognosis);
                PrognosisLine.Comment := ProjectDetail.Comment;
                PrognosisLine.MODIFY(TRUE);
              END ELSE BEGIN
                CLEAR(PrognosisLine);
                PrognosisLine.INIT;
                PrognosisLine.VALIDATE("Project No.",Job."No.");
                PrognosisLine.VALIDATE("Prognosis Date",ProgDate);
                DV.GET(GLSetup."Global Dimension 2 Code",ProjectDetail."Prognosis Cost Object");
                PrognosisLine.VALIDATE("Cost Type",DV."Cost Type");
                PrognosisLine.Element := ProjectElement.Element;
                PrognosisLine.VALIDATE("Cost Object",ProjectDetail."Prognosis Cost Object");
                PrognosisLine.INSERT(TRUE);
                PrognosisLine.VALIDATE("Prognosis Total Cost", NewAmountPrognosis);
                PrognosisLine.Comment := ProjectDetail.Comment;
                PrognosisLine.MODIFY(TRUE);
              END;
            END;
        UNTIL ProjectDetail.NEXT = 0;
      UNTIL ProjectElement.NEXT = 0;

      //For Revenue
      CLEAR(ProjectDetail);
      ProjectDetail.SETRANGE("Project No.",Job."No.");
      ProjectDetail.SETFILTER("Prognosis Amount (rem tot)",'<>0');
      ProjectDetail.SETFILTER("Prognosis Cost Object",'<>%1','');
      ProjectDetail.SETRANGE("Cost Type", ProjectDetail."Cost Type"::Revenue);
      ProjectDetail.SETRANGE(UserID,USERID);
      ProjectDetail.SETRANGE("Sum Quantity",FALSE);
      IF ProjectDetail.FINDSET THEN BEGIN REPEAT
        CLEAR(PrognosisLine);
        PrognosisLine.SETRANGE("Project No.",Job."No.");
        PrognosisLine.SETRANGE("Prognosis Date",ProgDate);
        PrognosisLine.SETRANGE("Cost Object",ProjectDetail."Prognosis Cost Object");
        PrognosisLine.SETRANGE("Cost Type", PrognosisLine."Cost Type"::Revenue);
        PrognosisLine.SETRANGE(Element,'');
        IF PrognosisLine.FINDFIRST THEN BEGIN
            IF ValueInThousands THEN
              PrognosisLine.VALIDATE("Amount Revenue",((ProjectDetail."Prognosis Amount (rem tot)"*1000)-PrognosisLine.Invoiced))
            ELSE
              PrognosisLine.VALIDATE("Amount Revenue",ProjectDetail."Prognosis Budget Line" + ProjectDetail."Locked GL Amount");
          PrognosisLine.Comment := ProjectDetail.Comment;
          PrognosisLine.MODIFY(TRUE);
          ProjectDetail.Comment := '';
          ProjectDetail2:=ProjectDetail;
          IF PrognosisLine.Comment <> '' THEN
            ProjectDetail2."Prognosis comment" := PrognosisLine.Comment;
          ProjectDetail2.MODIFY(TRUE);
          END ELSE BEGIN
            CLEAR(PrognosisLine);
            PrognosisLine.INIT;
            PrognosisLine.VALIDATE("Project No.",Job."No.");
            PrognosisLine.VALIDATE("Prognosis Date",ProgDate);
            DV.GET(GLSetup."Global Dimension 2 Code",ProjectDetail."Prognosis Cost Object");
            PrognosisLine.VALIDATE("Cost Type",DV."Cost Type");
            PrognosisLine.VALIDATE("Cost Object",ProjectDetail."Prognosis Cost Object");
            PrognosisLine.INSERT(TRUE);
            IF DV."Cost Type"=DV."Cost Type"::Revenue THEN BEGIN
              IF ValueInThousands THEN
                PrognosisLine.VALIDATE("Amount Revenue",(ProjectDetail."Prognosis Amount (rem tot)"*1000)-PrognosisLine.Invoiced)
               ELSE
                PrognosisLine.VALIDATE("Amount Revenue",ProjectDetail."Prognosis Budget Line" + ProjectDetail."Locked GL Amount")
            END;
            PrognosisLine.Comment := ProjectDetail.Comment;
            PrognosisLine.MODIFY(TRUE);
            ProjectDetail.Comment := '';
            ProjectDetail2:=ProjectDetail;
            IF PrognosisLine.Comment <> '' THEN
              ProjectDetail2."Prognosis comment" := PrognosisLine.Comment;
              ProjectDetail2.MODIFY(TRUE);
          END;
      UNTIL ProjectDetail.NEXT=0;
      END;

      //190927 ORANGO.EE >>
      //For lines with no elements
        CLEAR(ProjectDetail);
        ProjectDetail.SETRANGE("Project No.", Job."No.");
        ProjectDetail.SETFILTER("Prognosis Cost Object", '<>%1', '');
        IF ProjectDetail.FIND('-') THEN BEGIN REPEAT

          BudgetPrognosis := 0;
          BudgetLine.SETRANGE("Project No.", Job."No.");
          BudgetLine.SETFILTER("Cost Object", ProjectDetail."Prognosis Cost Object");
          BudgetLine.SETFILTER("New prognosis amount", '<>%1', 0);
          BudgetLine.SETRANGE(Position, '');
          IF BudgetLine.FINDSET THEN BEGIN //REPEAT
          BudgetLine.CALCSUMS("New prognosis amount");
          BudgetPrognosis := BudgetLine."New prognosis amount";
          END;

            //IF NOT ProjectDetailLockedAmount.GET(Job."No.") THEN
            //  EXIT;
            IF ProjectDetailLockedAmount.GET(Job."No.") THEN  BEGIN
            SumLockedAmount := 0;
            CLEAR(JobLedgEntry);
            JobLedgEntry.SETCURRENTKEY("Job No.", "Posting Date");
            JobLedgEntry.SETRANGE("Job No.", Job."No.");
            JobLedgEntry.SETFILTER("Entry No.",'..%1',ProjectDetailLockedAmount."Last Entry No");
            JobLedgEntry.SETRANGE("Global Dimension 2 Code", ProjectDetail."Prognosis Cost Object");
            JobLedgEntry.SETRANGE(Element, '');
            IF JobLedgEntry.FINDSET THEN BEGIN
            JobLedgEntry.CALCSUMS("Total Cost (LCY)");
            SumLockedAmount := JobLedgEntry."Total Cost (LCY)";
            END;
             NewAmountPrognosis := 0;
             NewAmountPrognosis := SumLockedAmount + BudgetPrognosis;
            END ELSE BEGIN
              NewAmountPrognosis := 0;
              NewAmountPrognosis := BudgetPrognosis;
            END;

            IF NewAmountPrognosis <> 0 THEN BEGIN
              CLEAR(PrognosisLine);
              PrognosisLine.SETRANGE("Project No.",Job."No.");
              PrognosisLine.SETRANGE("Prognosis Date",ProgDate);
              PrognosisLine.SETRANGE("Cost Object", ProjectDetail."Prognosis Cost Object");
              PrognosisLine.SETRANGE(Element, '');
              IF PrognosisLine.FINDFIRST THEN BEGIN
                PrognosisLine.VALIDATE("Prognosis Total Cost", NewAmountPrognosis);
                PrognosisLine.Comment := ProjectDetail.Comment;
                PrognosisLine.MODIFY(TRUE);
              END ELSE BEGIN
                CLEAR(PrognosisLine);
                PrognosisLine.INIT;
                PrognosisLine.VALIDATE("Project No.",Job."No.");
                PrognosisLine.VALIDATE("Prognosis Date",ProgDate);
                DV.GET(GLSetup."Global Dimension 2 Code",ProjectDetail."Prognosis Cost Object");
                PrognosisLine.VALIDATE("Cost Type",DV."Cost Type");
                PrognosisLine.Element := '';
                PrognosisLine.VALIDATE("Cost Object",ProjectDetail."Prognosis Cost Object");
                PrognosisLine.INSERT(TRUE);
                PrognosisLine.VALIDATE("Prognosis Total Cost", NewAmountPrognosis);
                PrognosisLine.Comment := ProjectDetail.Comment;
                PrognosisLine.MODIFY(TRUE);
              END;
            END;
        UNTIL ProjectDetail.NEXT = 0;
      END;

      BudgetLine.RESET;
      BudgetLine.SETRANGE("Project No.", Job."No.");
      IF BudgetLine.FINDSET THEN REPEAT
        BudgetLine."Last Prognosis Amount" := BudgetLine."New prognosis amount";
        BudgetLine.MODIFY;
      UNTIL BudgetLine.NEXT = 0;
      //<<

      //191111 ORANGO.EE
      IF PrognosisRec.GET(Job."No.",ProgDate)  THEN
        PrognosisRec.Fixed := TRUE;
        PrognosisRec.MODIFY;
      //
    END;

    BEGIN
    {
      170419 ITERO.SB RFC-214 Generate prognosis from project details
      171122 ITERO.SB Comment on prognosis line (buggfix)
      171228 ITERO.SB Handle revenue prognosis lines with amount = 0
      180111 ITERO.SB Handle includeFinishedJobs (prognosis fix)
      190314 ORANGO.SB Feature #22824/BYGG001_9 Added function ShowThousands(UserId,ProjNo)
      190319 ORANGO.SB Feature #22823/BYGG001_8 Add functionality for prognosis remaining amount
      190404 ORANGO.SB Feature #22822 BYGG001_7 Added functionality for prognosis on budget line
      191127 ORANGO.SB #26768 Set fixed prognosis
    }
    END.
  }
  RDLDATA
  {
  }
}

