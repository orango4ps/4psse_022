OBJECT Page 408 G/L Balance by Dimension
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00,4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=G/L Balance by Dimension;
               NOR=Finanssaldo per dimensjon;
               SVE=Redov.saldo per dimension];
    SaveValues=Yes;
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    LinksAllowed=No;
    SourceTable=Table367;
    PageType=Card;
    OnInit=VAR
             Field@1000 : Record 2000000041;
           BEGIN
             Dim2FilterEnable := TRUE;
             Dim1FilterEnable := TRUE;
             Field.GET(DATABASE::"G/L Account",42);
             BusUnitFilterCaption := Field."Field Caption";
           END;

    OnOpenPage=VAR
                 DPA_Management@1100528400 : Codeunit 11012783;
                 MATRIX_Step@1000 : 'Initial,Previous,Same,Next';
               BEGIN
                 OnBeforeGLAccFilter(GLAcc,GLAccFilter,LineDimOption,ColumnDimOption);
                 GlobalDim1Filter := GLAcc.GETFILTER("Global Dimension 1 Filter");
                 GlobalDim2Filter := GLAcc.GETFILTER("Global Dimension 2 Filter");

                 GLSetup.GET;
                 Dim1FilterEnable :=
                   (GLSetup."Global Dimension 1 Code" <> '') AND
                   (GLAcc.GETFILTER("Global Dimension 1 Filter") = '');
                 Dim2FilterEnable :=
                   (GLSetup."Global Dimension 2 Code" <> '') AND
                   (GLAcc.GETFILTER("Global Dimension 2 Filter") = '');

                 //**4PS.sn
                 IF DPA_IsActive THEN
                   GlobalDim1Filter :=
                     DPA_Management.GetSoftGLAccDPAFilter(CurrPage.OBJECTID(FALSE));
                 //**4PS.en

                 IF GLSetup."Additional Reporting Currency" = '' THEN
                   ShowInAddCurr := FALSE;

                 IF (LineDimCode = '') AND (ColumnDimCode = '') THEN BEGIN
                   LineDimCode := GLAcc.TABLECAPTION;
                   ColumnDimCode := Text001;
                 END;
                 LineDimOption := DimCodeToOption(LineDimCode);
                 ColumnDimOption := DimCodeToOption(ColumnDimCode);

                 FindPeriod('');

                 MATRIX_NoOfColumns := 32;
                 MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
               END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 8       ;1   ;ActionGroup;
                      CaptionML=[ENU=&Actions;
                                 NOR=&Handlinger;
                                 SVE=&ètgÑrder];
                      Image=Action }
      { 13      ;2   ;Action    ;
                      CaptionML=[ENU=Reverse Lines and Columns;
                                 NOR=Reverser linjer og kolonner;
                                 SVE=Byt plats pÜ rader och kolumner];
                      ToolTipML=[ENU=Change the display of the matrix by inverting the values in the Show as Lines and Show as Columns fields.;
                                 NOR=Endre visningen av matrisen ved Ü invertere verdiene i feltene Vis som linjer og Vis som kolonner.;
                                 SVE=éndra visning av matrisen genom att invertera vÑrdena i fÑlten Visa som rader och Visa som kolumner.];
                      ApplicationArea=#Dimensions;
                      Promoted=Yes;
                      Image=Undo;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 TempDimCode@1001 : Text[30];
                                 MATRIX_Step@1002 : 'First,Previous,Next';
                               BEGIN
                                 TempDimCode := ColumnDimCode;
                                 ColumnDimCode := LineDimCode;
                                 LineDimCode := TempDimCode;
                                 ValidateLineDimCode;
                                 ValidateColumnDimCode;
                                 MATRIX_GenerateColumnCaptions(MATRIX_Step::First);
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 119     ;1   ;Action    ;
                      Name=ShowMatrix;
                      CaptionML=[ENU=&Show Matrix;
                                 NOR=Vi&s matrise;
                                 SVE=Vi&sa matris];
                      ToolTipML=[ENU=View the data overview according to the selected filters and options.;
                                 NOR=Vis den dataoversikten i henhold til de valgte filtrene og alternativene.;
                                 SVE=Visa dataîversikten med hÑnsyn taget till de valda filtren och alternativen.];
                      ApplicationArea=#Dimensions;
                      Promoted=Yes;
                      Image=ShowMatrix;
                      PromotedCategory=Process;
                      PromotedOnly=Yes;
                      OnAction=VAR
                                 MatrixForm@1284 : Page 9233;
                               BEGIN
                                 CLEAR(MatrixForm);
                                 MatrixForm.Load(
                                   LineDimCode,ColumnDimCode,PeriodType,DateFilter,GLAccFilter,BusUnitFilter,
                                   BudgetFilter,GlobalDim1Filter,GlobalDim2Filter,
                                   ShowActualBudg,AmountField,ClosingEntryFilter,RoundingFactor,ShowInAddCurr,
                                   MATRIX_ColumnCaptions,MATRIX_PrimaryKeyFirstColInSet,
                                   AmountType,MATRIX_CurrSetLength);
                                 MatrixForm.RUNMODAL;
                               END;
                                }
      { 14      ;1   ;Action    ;
                      CaptionML=[ENU=Previous Set;
                                 NOR=Forrige sett;
                                 SVE=FîregÜende uppsÑttning];
                      ToolTipML=[ENU=Go to the previous set of data.;
                                 NOR=GÜ til forrige datasett.;
                                 SVE=GÜ till fîregÜende datauppsÑttning.];
                      ApplicationArea=#Dimensions;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=PreviousSet;
                      PromotedCategory=Process;
                      PromotedOnly=Yes;
                      OnAction=VAR
                                 MATRIX_Step@1001 : 'Initial,Previous,Same,Next';
                               BEGIN
                                 MATRIX_GenerateColumnCaptions(MATRIX_Step::Previous);
                               END;
                                }
      { 18      ;1   ;Action    ;
                      CaptionML=[ENU=Next Set;
                                 NOR=Neste sett;
                                 SVE=NÑsta uppsÑttning];
                      ToolTipML=[ENU=Go to the next set of data.;
                                 NOR=GÜ til neste datasett.;
                                 SVE=GÜ till nÑsta datauppsÑttning.];
                      ApplicationArea=#Dimensions;
                      Promoted=Yes;
                      Image=NextSet;
                      PromotedCategory=Process;
                      PromotedOnly=Yes;
                      OnAction=VAR
                                 MATRIX_Step@1001 : 'Initial,Previous,Same,Next';
                               BEGIN
                                 MATRIX_GenerateColumnCaptions(MATRIX_Step::Next);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                CaptionML=[ENU=General;
                           NOR=Generelt;
                           SVE=AllmÑnt] }

    { 6   ;2   ;Field     ;
                CaptionML=[ENU=Show as Lines;
                           NOR=Vis som linjer;
                           SVE=Visa som rader];
                ToolTipML=[ENU=Specifies which values you want to show as lines in the window. This allows you to see the same matrix window from various perspectives, especially when you use both the Show as Lines field and the Show as Columns field.;
                           NOR=Angir hvilke verdier du vil skal vises som linjer i vinduet. Dermed kan du vise det samme matrisevinduet fra ulike perspektiver, spesielt nÜr du bruker bÜde feltet Vis som linjer og feltet Vis som kolonner.;
                           SVE=Anger vilka vÑrden som visas som rader i fînstret. Det gîr det mîjligt att visa samma matrisfînster med flera olika perspektiv, sÑrskilt om du anvÑnder bÜde fÑltet Visa som rader och fÑltet Visa som kolumner.];
                ApplicationArea=#Dimensions;
                SourceExpr=LineDimCode;
                OnValidate=BEGIN
                             IF (UPPERCASE(LineDimCode) = UPPERCASE(ColumnDimCode)) AND (LineDimCode <> '') THEN BEGIN
                               ColumnDimCode := '';
                               ValidateColumnDimCode;
                             END;
                             ValidateLineDimCode;
                             LineDimCodeOnAfterValidate;
                           END;

                OnLookup=VAR
                           NewCode@1002 : Text[30];
                         BEGIN
                           NewCode := GetDimSelection(LineDimCode);
                           IF NewCode = LineDimCode THEN
                             EXIT(FALSE);

                           Text := NewCode;
                           LineDimCode := NewCode;
                           ValidateLineDimCode;
                           CurrPage.UPDATE;
                           EXIT(TRUE);
                         END;
                          }

    { 9   ;2   ;Field     ;
                CaptionML=[ENU=Show as Columns;
                           NOR=Vis som kolonner;
                           SVE=Visa som kolumner];
                ToolTipML=[ENU=Specifies which values you want to show as columns in the window. This allows you to see the same matrix window from various perspectives, especially when you use both the Show as Lines field and the Show as Columns field.;
                           NOR=Angir hvilke verdier du vil skal vises som kolonner i vinduet. Dermed kan du vise det samme matrisevinduet fra ulike perspektiver, spesielt nÜr du bruker bÜde feltet Vis som linjer og feltet Vis som kolonner.;
                           SVE=Anger vilka vÑrden som visas som kolumner i fînstret. Det gîr det mîjligt att visa samma matrisfînster med flera olika perspektiv, sÑrskilt om du anvÑnder bÜde fÑltet Visa som rader och fÑltet Visa som kolumner.];
                ApplicationArea=#Dimensions;
                SourceExpr=ColumnDimCode;
                OnValidate=BEGIN
                             IF (UPPERCASE(LineDimCode) = UPPERCASE(ColumnDimCode)) AND (LineDimCode <> '') THEN BEGIN
                               LineDimCode := '';
                               ValidateLineDimCode;
                             END;
                             ValidateColumnDimCode;
                             ColumnDimCodeOnAfterValidate;
                           END;

                OnLookup=VAR
                           NewCode@1002 : Text[30];
                         BEGIN
                           NewCode := GetDimSelection(ColumnDimCode);
                           IF NewCode = ColumnDimCode THEN
                             EXIT(FALSE);

                           Text := NewCode;
                           ColumnDimCode := NewCode;
                           ValidateColumnDimCode;
                           ColumnDimCodeOnAfterValidate;
                           EXIT(TRUE);
                         END;
                          }

    { 1907524401;1;Group  ;
                CaptionML=[ENU=Filters;
                           NOR=Filtre;
                           SVE=Filter] }

    { 36  ;2   ;Field     ;
                CaptionML=[ENU=Date Filter;
                           NOR=Datofilter;
                           SVE=Datumfilter];
                ToolTipML=[ENU=Specifies the dates that will be used to filter the amounts in the window.;
                           NOR=Angir datoene som skal brukes til Ü filtrere belõpene i vinduet.;
                           SVE=Anger datumen som filtrerar beloppen i fînstret.];
                ApplicationArea=#Dimensions;
                SourceExpr=DateFilter;
                OnValidate=VAR
                             TextManagement@1001 : Codeunit 41;
                             Date1@1002 : Date;
                           BEGIN
                             TextManagement.MakeDateFilter(DateFilter);
                             IF DateFilter <> '' THEN
                               IF EVALUATE(Date1,DateFilter) THEN
                                 IF Date1 <> NORMALDATE(Date1) THEN
                                   DateFilter := STRSUBSTNO('%1..%2',NORMALDATE(Date1),Date1);
                             GLAcc.SETFILTER("Date Filter",DateFilter);
                             DateFilter := GLAcc.GETFILTER("Date Filter");
                             InternalDateFilter := DateFilter;
                             DateFilterOnAfterValidate;
                           END;
                            }

    { 38  ;2   ;Field     ;
                CaptionML=[ENU=G/L Account Filter;
                           NOR=Finanskontofilter;
                           SVE=Redov.kontofilter];
                ToolTipML=[ENU=Specifies the G/L accounts for which you will see information in the window.;
                           NOR=Angir finanskontiene som det vises informasjon for i vinduet.;
                           SVE=Anger redovisningskontona fîr vilka information visas i fînstret.];
                ApplicationArea=#Dimensions;
                SourceExpr=GLAccFilter;
                OnValidate=BEGIN
                             GLAccFilterOnAfterValidate;
                           END;

                OnLookup=VAR
                           GLAccList@1002 : Page 18;
                         BEGIN
                           GLAccList.LOOKUPMODE(TRUE);
                           IF NOT (GLAccList.RUNMODAL = ACTION::LookupOK) THEN
                             EXIT(FALSE);

                           Text := GLAccList.GetSelectionFilter;
                           EXIT(TRUE);
                         END;
                          }

    { 53  ;2   ;Field     ;
                CaptionML=[ENU=Budget Filter;
                           NOR=Budsjettfilter;
                           SVE=Budgetfilter];
                ToolTipML=[ENU=Specifies the budget that information in the matrix is shown for.;
                           NOR=Angir budsjettet som informasjonen i matrisen vises for.;
                           SVE=Anger budgeten som informationen i tabellen visas fîr.];
                ApplicationArea=#Dimensions;
                SourceExpr=BudgetFilter;
                TableRelation="G/L Budget Name".Name;
                LookupPageID=G/L Budget Names;
                OnValidate=BEGIN
                             BudgetFilterOnAfterValidate;
                           END;
                            }

    { 16  ;2   ;Field     ;
                ApplicationArea=#Dimensions;
                SourceExpr=BusUnitFilter;
                CaptionClass='3,' + BusUnitFilterCaption;
                OnValidate=BEGIN
                             BusUnitFilterOnAfterValidate;
                           END;

                OnLookup=VAR
                           BusUnitList@1002 : Page 240;
                         BEGIN
                           BusUnitList.LOOKUPMODE(TRUE);
                           IF NOT (BusUnitList.RUNMODAL = ACTION::LookupOK) THEN
                             EXIT(FALSE);
                           Text := BusUnitList.GetSelectionFilter;
                           EXIT(TRUE);
                         END;
                          }

    { 34  ;2   ;Field     ;
                Name=Dim1Filter;
                ApplicationArea=#Dimensions;
                SourceExpr=GlobalDim1Filter;
                CaptionClass='1,3,1';
                Enabled=Dim1FilterEnable;
                OnValidate=BEGIN
                             GlobalDim1FilterOnAfterValidat;
                           END;

                OnLookup=VAR
                           DimensionValue@1001 : Record 349;
                         BEGIN
                           EXIT(DimensionValue.LookUpDimFilter(GLSetup."Global Dimension 1 Code",Text));
                         END;
                          }

    { 30  ;2   ;Field     ;
                Name=Dim2Filter;
                ApplicationArea=#Dimensions;
                SourceExpr=GlobalDim2Filter;
                CaptionClass='1,3,2';
                Enabled=Dim2FilterEnable;
                OnValidate=BEGIN
                             GlobalDim2FilterOnAfterValidat;
                           END;

                OnLookup=VAR
                           DimensionValue@1001 : Record 349;
                         BEGIN
                           EXIT(DimensionValue.LookUpDimFilter(GLSetup."Global Dimension 2 Code",Text));
                         END;
                          }

    { 1903121901;1;Group  ;
                CaptionML=[ENU=Options;
                           NOR=Alternativer;
                           SVE=Alternativ] }

    { 29  ;2   ;Field     ;
                CaptionML=[ENU=Show;
                           NOR=Vis;
                           SVE=Visa];
                ToolTipML=[ENU=Specifies if the selected value is shown in the window.;
                           NOR=Angir om den valgte verdien vises i vinduet.;
                           SVE=Anger om det valda vÑrdet visas i fînstret.];
                OptionCaptionML=[ENU=Actual Amounts,Budgeted Amounts,Variance,Variance%,Index%;
                                 NOR=Faktiske belõp,Budsjetterte belõp,Avvik,Avviks-%,Indeks-%;
                                 SVE=Aktuella belopp,Budgeterade belopp,Varians,Varians%,Index%];
                ApplicationArea=#Dimensions;
                SourceExpr=ShowActualBudg }

    { 47  ;2   ;Field     ;
                CaptionML=[ENU=Show Amount Field;
                           NOR=Vis belõpsfelt;
                           SVE=Visa beloppsfÑlt];
                ToolTipML=[ENU=Specifies the type of entries that will be included in the matrix window. The Amount options means that amounts that are the sum of debit and credit amounts are shown.;
                           NOR=Angir typen poster som blir inkludert i matrisevinduet. Belõpsalternativene betyr at belõp som er summen debet- og kreditbelõp, blir vist.;
                           SVE=Anger den typ av transaktioner som tas med i tabellfînstret. Alternativet Belopp innebÑr att belopp som Ñr summan av debet- och kreditbelopp visas.];
                OptionCaptionML=[ENU=Amount,Debit Amount,Credit Amount;
                                 NOR=Belõp,Debetbelõp,Kreditbelõp;
                                 SVE=Belopp,Debetbelopp,Kreditbelopp];
                ApplicationArea=#Dimensions;
                SourceExpr=AmountField }

    { 20  ;2   ;Field     ;
                CaptionML=[ENU=Closing Entries;
                           NOR=Avslutningsposter;
                           SVE=èrsavslutstransaktioner];
                ToolTipML=[ENU=Specifies whether the balance shown will include closing entries. If you want to see the amounts on income statement accounts in closed years, you must exclude closing entries.;
                           NOR=Angir om saldoen som vises skal inkludere avslutningsposter. Hvis du vil se belõpene i resultatkontiene i avsluttede Ür, mÜ du utelukke avslutningsposter.;
                           SVE=Anger om saldot som visas ska inkludera Ürsavslutstransaktioner eller inte. Om du vill visa beloppen fîr resultatrÑkningskonton fîr avslutade Ür ska du inte inkludera Ürsavslutstransaktioner.];
                OptionCaptionML=[ENU=Include,Exclude;
                                 NOR=Inkluder,Ekskluder;
                                 SVE=Inkludera,Exkludera];
                ApplicationArea=#Dimensions;
                SourceExpr=ClosingEntryFilter;
                OnValidate=BEGIN
                             FindPeriod('=');
                           END;
                            }

    { 19  ;2   ;Field     ;
                CaptionML=[ENU=Rounding Factor;
                           NOR=Avrundingsfaktor;
                           SVE=Avrundningsfaktor];
                ToolTipML=[ENU=Specifies the factor that is used to round the amounts.;
                           NOR=Angir faktoren som brukes til Ü avrunde belõpene.;
                           SVE=Anger faktorn som avrundar beloppen.];
                OptionCaptionML=[ENU=None,1,1000,1000000;
                                 NOR=Ingen,1,1000,1000000;
                                 SVE=Ingen,1,1000,1000000];
                ApplicationArea=#Dimensions;
                SourceExpr=RoundingFactor }

    { 49  ;2   ;Field     ;
                CaptionML=[ENU=Show Amounts in Add. Reporting Currency;
                           NOR=Vis belõp i tilleggsrapp.valuta;
                           SVE=Visa belopp i alt. rapporteringsvaluta];
                ToolTipML=[ENU=Specifies whether to show the reported amounts in the additional reporting currency.;
                           NOR=Angir om de rapporterte belõpene i tilleggsrapporteringsvalutaen skal vises.;
                           SVE=Anger om de rapporterade beloppen ska visas i den alternativa rapporteringsvalutan.];
                ApplicationArea=#Dimensions;
                SourceExpr=ShowInAddCurr;
                MultiLine=Yes }

    { 4   ;2   ;Field     ;
                CaptionML=[ENU=Show Column Name;
                           NOR=Vis kolonnenavn;
                           SVE=Visa kolumnnamn];
                ToolTipML=[ENU=Specifies that the names of columns are shown in the matrix window.;
                           NOR=Angir at navnene pÜ kolonnene vises i matrisevinduet.;
                           SVE=Anger namnen pÜ kolumnerna som visas i matrisfînstret.];
                ApplicationArea=#Dimensions;
                SourceExpr=ShowColumnName;
                OnValidate=BEGIN
                             ShowColumnNameOnAfterValidate;
                           END;
                            }

    { 1906098301;1;Group  ;
                CaptionML=[ENU=Matrix Options;
                           NOR=Matrisealternativer;
                           SVE=Matrisalternativ] }

    { 26  ;2   ;Field     ;
                CaptionML=[ENU=View by;
                           NOR=Vis etter;
                           SVE=Visa per];
                ToolTipML=[ENU=Specifies by which period amounts are displayed.;
                           NOR=Angir hvilken periode belõp vises basert pÜ.;
                           SVE=Anger efter vilken period belopp visas.];
                OptionCaptionML=[ENU=Day,Week,Month,Quarter,Year,Accounting Period;
                                 NOR=Dag,Uke,MÜned,Kvartal,èr,Regnskapsperiode;
                                 SVE=Dag,Vecka,MÜnad,Kvartal,èr,Bokfîringsperiod];
                ApplicationArea=#Dimensions;
                SourceExpr=PeriodType;
                OnValidate=BEGIN
                             FindPeriod('');
                             PeriodTypeOnAfterValidate;
                           END;
                            }

    { 11  ;2   ;Field     ;
                CaptionML=[ENU=View as;
                           NOR=Vis som;
                           SVE=Visa som];
                ToolTipML=[ENU=Specifies how amounts are displayed. Net Change: The net change in the balance for the selected period. Balance at Date: The balance as of the last day in the selected period.;
                           NOR=Angir hvordan belõp skal vises. Bevegelse: Bevegelsen i balansen for den valgte perioden. Saldo per dato: Saldoen per siste dag i den valgte perioden.;
                           SVE=Anger hur belopp visas. NettofîrÑndring: NettofîrÑndringen i saldot fîr den valda perioden. Saldo t.o.m. datum: Saldot per den sista dagen i den valda perioden.];
                OptionCaptionML=[ENU=Net Change,Balance at Date;
                                 NOR=Bevegelse,Saldo per dato;
                                 SVE=NettofîrÑndring,Saldo t.o.m. datum];
                ApplicationArea=#Dimensions;
                SourceExpr=AmountType;
                OnValidate=BEGIN
                             FindPeriod('');
                             AmountTypeOnAfterValidate;
                           END;
                            }

    { 22  ;2   ;Field     ;
                CaptionML=[ENU=Column Set;
                           NOR=Kolonnesett;
                           SVE=KolumnuppsÑttning];
                ToolTipML=[ENU=Specifies the range of values that are displayed in the matrix window, for example, the total period. To change the contents of the field, choose Next Set or Previous Set.;
                           NOR=Angir verdiomrÜdene som vises i matrisevinduet, for eksempel hele perioden. Hvis du vil endre innholdet i feltet, velger du Neste sett eller Forrige sett.;
                           SVE=Anger vÑrdeintervallen som visas i tabellfînstret, till exempel hela perioden. Om du vill Ñndra innehÜllet i fÑltet vÑljer du NÑsta uppsÑttning eller FîregÜende uppsÑttning.];
                ApplicationArea=#Dimensions;
                SourceExpr=MATRIX_ColumnSet;
                Editable=FALSE }

  }
  CODE
  {
    VAR
      Text001@1001 : TextConst 'ENU=Period;NOR=Periode;SVE=Period';
      Text002@1002 : TextConst 'ENU=%1 is not a valid line definition.;NOR=%1 er ikke en gyldig linjedefinisjon.;SVE=%1 Ñr inte en giltig raddefinition.';
      Text003@1003 : TextConst 'ENU=%1 is not a valid column definition.;NOR=%1 er ikke en gyldig kolonnedefinisjon.;SVE=%1 Ñr inte en giltig kolumndefinition.';
      GLSetup@1004 : Record 98;
      GLAcc@1005 : Record 15;
      BusUnit@1038 : Record 220;
      LineDimOption@1008 : 'G/L Account,Period,Business Unit,Dimension 1,Dimension 2,Dimension 3,Dimension 4';
      ColumnDimOption@1009 : 'G/L Account,Period,Business Unit,Dimension 1,Dimension 2,Dimension 3,Dimension 4';
      LineDimCode@1010 : Text[30];
      ColumnDimCode@1011 : Text[30];
      PeriodType@1012 : 'Day,Week,Month,Quarter,Year,Accounting Period';
      AmountType@1013 : 'Net Change,Balance at Date';
      RoundingFactor@1014 : 'None,1,1000,1000000';
      AmountField@1015 : 'Amount,Debit Amount,Credit Amount';
      ShowActualBudg@1016 : 'Actual Amounts,Budgeted Amounts,Variance,Variance%,Index%';
      ShowInAddCurr@1017 : Boolean;
      ClosingEntryFilter@1018 : 'Include,Exclude';
      ShowColumnName@1019 : Boolean;
      DateFilter@1020 : Text;
      InternalDateFilter@1021 : Text;
      GLAccFilter@1023 : Text;
      BudgetFilter@1024 : Text;
      BusUnitFilter@1025 : Text;
      GlobalDim1Filter@1026 : Text;
      GlobalDim2Filter@1027 : Text;
      BusUnitFilterCaption@1000 : Text[80];
      PeriodInitialized@1030 : Boolean;
      MATRIX_ColumnCaptions@1032 : ARRAY [32] OF Text[1024];
      MATRIX_NoOfColumns@1033 : Integer;
      MATRIX_ColumnSet@1035 : Text[1024];
      MATRIX_PrimaryKeyFirstColInSet@1034 : Text[1024];
      MATRIX_CurrSetLength@1037 : Integer;
      Dim1FilterEnable@19054192 : Boolean INDATASET;
      Dim2FilterEnable@19062512 : Boolean INDATASET;

    LOCAL PROCEDURE DimCodeToOption@21(DimCode@1000 : Text[30]) : Integer;
    VAR
      BusUnit@1001 : Record 220;
    BEGIN
      CASE DimCode OF
        '':
          EXIT(-1);
        GLAcc.TABLECAPTION:
          EXIT(0);
        Text001:
          EXIT(1);
        BusUnit.TABLECAPTION:
          EXIT(2);
        GLSetup."Global Dimension 1 Code":
          EXIT(3);
        GLSetup."Global Dimension 2 Code":
          EXIT(4);
        ELSE
          EXIT(-1);
      END;
    END;

    LOCAL PROCEDURE CopyGLAccToBuf@1(VAR TheGLAcc@1000 : Record 15;VAR TheDimCodeBuf@1001 : Record 367);
    BEGIN
      WITH TheDimCodeBuf DO BEGIN
        INIT;
        Code := TheGLAcc."No.";
        Name := TheGLAcc.Name;
        Totaling := TheGLAcc.Totaling;
        Indentation := TheGLAcc.Indentation;
        "Show in Bold" := TheGLAcc."Account Type" <> TheGLAcc."Account Type"::Posting;
      END;
    END;

    LOCAL PROCEDURE CopyPeriodToBuf@8(VAR ThePeriod@1000 : Record 2000000007;VAR TheDimCodeBuf@1001 : Record 367);
    VAR
      Period2@1002 : Record 2000000007;
    BEGIN
      WITH TheDimCodeBuf DO BEGIN
        INIT;
        Code := FORMAT(ThePeriod."Period Start");
        "Period Start" := ThePeriod."Period Start";
        IF ClosingEntryFilter = ClosingEntryFilter::Include THEN
          "Period End" := CLOSINGDATE(ThePeriod."Period End")
        ELSE
          "Period End" := ThePeriod."Period End";
        IF DateFilter <> '' THEN BEGIN
          Period2.SETFILTER("Period End",DateFilter);
          IF Period2.GETRANGEMAX("Period End") < "Period End" THEN
            "Period End" := Period2.GETRANGEMAX("Period End");
        END;
        Name := ThePeriod."Period Name";
      END;
    END;

    LOCAL PROCEDURE CopyBusUnitToBuf@5(VAR TheBusUnit@1000 : Record 220;VAR TheDimCodeBuf@1001 : Record 367);
    BEGIN
      WITH TheDimCodeBuf DO BEGIN
        INIT;
        Code := TheBusUnit.Code;
        Name := TheBusUnit.Name;
      END;
    END;

    LOCAL PROCEDURE CopyDimValueToBuf@9(VAR TheDimVal@1000 : Record 349;VAR TheDimCodeBuf@1001 : Record 367);
    BEGIN
      WITH TheDimCodeBuf DO BEGIN
        INIT;
        Code := TheDimVal.Code;
        Name := TheDimVal.Name;
        Totaling := TheDimVal.Totaling;
        Indentation := TheDimVal.Indentation;
        "Show in Bold" :=
          TheDimVal."Dimension Value Type" <> TheDimVal."Dimension Value Type"::Standard;
      END;
    END;

    LOCAL PROCEDURE FindPeriod@2(SearchText@1000 : Code[10]);
    VAR
      Period@1001 : Record 2000000007;
      PeriodFormMgt@1002 : Codeunit 359;
    BEGIN
      IF DateFilter <> '' THEN BEGIN
        Period.SETFILTER("Period Start",DateFilter);
        IF NOT PeriodFormMgt.FindDate('+',Period,PeriodType) THEN
          PeriodFormMgt.FindDate('+',Period,PeriodType::Day);
        Period.SETRANGE("Period Start");
      END;
      IF PeriodFormMgt.FindDate(SearchText,Period,PeriodType) THEN
        IF ClosingEntryFilter = ClosingEntryFilter::Include THEN
          Period."Period End" := CLOSINGDATE(Period."Period End");
      IF AmountType = AmountType::"Net Change" THEN BEGIN
        GLAcc.SETRANGE("Date Filter",Period."Period Start",Period."Period End");
        IF GLAcc.GETRANGEMIN("Date Filter") = GLAcc.GETRANGEMAX("Date Filter") THEN
          GLAcc.SETRANGE("Date Filter",GLAcc.GETRANGEMIN("Date Filter"));
      END ELSE
        GLAcc.SETRANGE("Date Filter",0D,Period."Period End");

      InternalDateFilter := GLAcc.GETFILTER("Date Filter");
      IF (LineDimOption <> LineDimOption::Period) AND (ColumnDimOption <> ColumnDimOption::Period) THEN
        DateFilter := InternalDateFilter;
    END;

    LOCAL PROCEDURE GetDimSelection@3(OldDimSelCode@1000 : Text[30]) : Text[30];
    VAR
      DimSelection@1001 : Page 568;
    BEGIN
      DimSelection.InsertDimSelBuf(FALSE,GLAcc.TABLECAPTION,GLAcc.TABLECAPTION);
      DimSelection.InsertDimSelBuf(FALSE,BusUnit.TABLECAPTION,BusUnit.TABLECAPTION);
      DimSelection.InsertDimSelBuf(FALSE,Text001,Text001);
      IF GLSetup."Global Dimension 1 Code" <> '' THEN
        DimSelection.InsertDimSelBuf(FALSE,GLSetup."Global Dimension 1 Code",'');
      IF GLSetup."Global Dimension 2 Code" <> '' THEN
        DimSelection.InsertDimSelBuf(FALSE,GLSetup."Global Dimension 2 Code",'');

      DimSelection.LOOKUPMODE := TRUE;
      IF DimSelection.RUNMODAL = ACTION::LookupOK THEN
        EXIT(DimSelection.GetDimSelCode);

      EXIT(OldDimSelCode);
    END;

    LOCAL PROCEDURE ValidateLineDimCode@19();
    VAR
      BusUnit@1000 : Record 220;
    BEGIN
      IF (UPPERCASE(LineDimCode) <> UPPERCASE(GLAcc.TABLECAPTION)) AND
         (UPPERCASE(LineDimCode) <> UPPERCASE(BusUnit.TABLECAPTION)) AND
         (UPPERCASE(LineDimCode) <> UPPERCASE(Text001)) AND
         (UPPERCASE(LineDimCode) <> GLSetup."Global Dimension 1 Code") AND
         (UPPERCASE(LineDimCode) <> GLSetup."Global Dimension 2 Code") AND
         (LineDimCode <> '')
      THEN BEGIN
        MESSAGE(Text002,LineDimCode);
        LineDimCode := '';
      END;
      LineDimOption := DimCodeToOption(LineDimCode);
      InternalDateFilter := GLAcc.GETFILTER("Date Filter");
      IF (LineDimOption <> LineDimOption::Period) AND (ColumnDimOption <> ColumnDimOption::Period) THEN BEGIN
        DateFilter := InternalDateFilter;
        IF STRPOS(DateFilter,'&') > 1 THEN
          DateFilter := COPYSTR(DateFilter,1,STRPOS(DateFilter,'&') - 1);
      END ELSE
        PeriodInitialized := FALSE;
    END;

    LOCAL PROCEDURE ValidateColumnDimCode@20();
    VAR
      BusUnit@1000 : Record 220;
    BEGIN
      IF (UPPERCASE(ColumnDimCode) <> UPPERCASE(GLAcc.TABLECAPTION)) AND
         (UPPERCASE(ColumnDimCode) <> UPPERCASE(BusUnit.TABLECAPTION)) AND
         (UPPERCASE(ColumnDimCode) <> UPPERCASE(Text001)) AND
         (UPPERCASE(ColumnDimCode) <> GLSetup."Global Dimension 1 Code") AND
         (UPPERCASE(ColumnDimCode) <> GLSetup."Global Dimension 2 Code") AND
         (ColumnDimCode <> '')
      THEN BEGIN
        MESSAGE(Text003,ColumnDimCode);
        ColumnDimCode := '';
      END;
      ColumnDimOption := DimCodeToOption(ColumnDimCode);
      InternalDateFilter := GLAcc.GETFILTER("Date Filter");
      IF (LineDimOption <> LineDimOption::Period) AND (ColumnDimOption <> ColumnDimOption::Period) THEN BEGIN
        DateFilter := InternalDateFilter;
        IF STRPOS(DateFilter,'&') > 1 THEN
          DateFilter := COPYSTR(DateFilter,1,STRPOS(DateFilter,'&') - 1);
      END ELSE
        PeriodInitialized := FALSE;
    END;

    LOCAL PROCEDURE FindRec@1223(DimOption@1000 : 'G/L Account,Period,Business Unit,Dimension 1,Dimension 2';VAR DimCodeBuf@1001 : Record 367;Which@1002 : Text[250]) : Boolean;
    VAR
      GLAcc@1224 : Record 15;
      BusUnit@1225 : Record 220;
      Period@1226 : Record 2000000007;
      DimVal@1227 : Record 349;
      PeriodFormMgt@1228 : Codeunit 359;
      Found@1229 : Boolean;
      DPA_Management@1100528400 : Codeunit 11012783;
    BEGIN
      CASE DimOption OF
        DimOption::"G/L Account":
          BEGIN
            GLAcc."No." := DimCodeBuf.Code;
            IF GLAccFilter <> '' THEN
              GLAcc.SETFILTER("No.",GLAccFilter);
            Found := GLAcc.FIND(Which);
            IF Found THEN
              CopyGLAccToBuf(GLAcc,DimCodeBuf);
          END;
        DimOption::Period:
          BEGIN
            IF NOT PeriodInitialized THEN
              DateFilter := '';
            PeriodInitialized := TRUE;
            EVALUATE(Period."Period Start",DimCodeBuf.Code);
            IF DateFilter <> '' THEN
              Period.SETFILTER("Period Start",DateFilter)
            ELSE
              IF NOT PeriodInitialized AND (InternalDateFilter <> '') THEN
                Period.SETFILTER("Period Start",InternalDateFilter);
            Found := PeriodFormMgt.FindDate(Which,Period,PeriodType);
            IF Found THEN
              CopyPeriodToBuf(Period,DimCodeBuf);
          END;
        DimOption::"Business Unit":
          BEGIN
            BusUnit.Code := DimCodeBuf.Code;
            IF BusUnitFilter <> '' THEN
              BusUnit.SETFILTER(Code,BusUnitFilter);
            Found := BusUnit.FIND(Which);
            IF Found THEN
              CopyBusUnitToBuf(BusUnit,DimCodeBuf);
          END;
        DimOption::"Dimension 1":
          BEGIN
            IF GlobalDim1Filter <> '' THEN
              DimVal.SETFILTER(Code,GlobalDim1Filter);
            //**4PS.sn
            IF DPA_IsActive THEN
              DPA_Management.AddHardGLAccDPAFilterToDimVal(
                DimVal,
                CurrPage.OBJECTID(FALSE));
            //**4PS.en
            DimVal."Dimension Code" := GLSetup."Global Dimension 1 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            Found := DimVal.FIND(Which);
            IF Found THEN
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          END;
        DimOption::"Dimension 2":
          BEGIN
            IF GlobalDim2Filter <> '' THEN
              DimVal.SETFILTER(Code,GlobalDim2Filter);
            DimVal."Dimension Code" := GLSetup."Global Dimension 2 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            Found := DimVal.FIND(Which);
            IF Found THEN
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          END;
      END;
      EXIT(Found);
    END;

    LOCAL PROCEDURE NextRec@1230(DimOption@1000 : 'G/L Account,Period,Business Unit,Dimension 1,Dimension 2';VAR DimCodeBuf@1001 : Record 367;Steps@1002 : Integer) : Integer;
    VAR
      GLAcc@1231 : Record 15;
      BusUnit@1232 : Record 220;
      Period@1233 : Record 2000000007;
      DimVal@1234 : Record 349;
      PeriodFormMgt@1235 : Codeunit 359;
      ResultSteps@1236 : Integer;
      DPA_Management@1100528400 : Codeunit 11012783;
    BEGIN
      CASE DimOption OF
        DimOption::"G/L Account":
          BEGIN
            GLAcc."No." := DimCodeBuf.Code;
            IF GLAccFilter <> '' THEN
              GLAcc.SETFILTER("No.",GLAccFilter);
            ResultSteps := GLAcc.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyGLAccToBuf(GLAcc,DimCodeBuf);
          END;
        DimOption::Period:
          BEGIN
            IF DateFilter <> '' THEN
              Period.SETFILTER("Period Start",DateFilter);
            EVALUATE(Period."Period Start",DimCodeBuf.Code);
            ResultSteps := PeriodFormMgt.NextDate(Steps,Period,PeriodType);
            IF ResultSteps <> 0 THEN
              CopyPeriodToBuf(Period,DimCodeBuf);
          END;
        DimOption::"Business Unit":
          BEGIN
            BusUnit.Code := DimCodeBuf.Code;
            IF BusUnitFilter <> '' THEN
              BusUnit.SETFILTER(Code,BusUnitFilter);
            ResultSteps := BusUnit.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyBusUnitToBuf(BusUnit,DimCodeBuf);
          END;
        DimOption::"Dimension 1":
          BEGIN
            IF GlobalDim1Filter <> '' THEN
              DimVal.SETFILTER(Code,GlobalDim1Filter);
            //**4PS.sn
            IF DPA_IsActive THEN
              DPA_Management.AddHardGLAccDPAFilterToDimVal(
                DimVal,
                CurrPage.OBJECTID(FALSE));
            //**4PS.en
            DimVal."Dimension Code" := GLSetup."Global Dimension 1 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            ResultSteps := DimVal.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          END;
        DimOption::"Dimension 2":
          BEGIN
            IF GlobalDim2Filter <> '' THEN
              DimVal.SETFILTER(Code,GlobalDim2Filter);
            DimVal."Dimension Code" := GLSetup."Global Dimension 2 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            ResultSteps := DimVal.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          END;
      END;
      EXIT(ResultSteps);
    END;

    LOCAL PROCEDURE MATRIX_GenerateColumnCaptions@7(Step@1000 : 'Initial,Previous,Same,Next');
    VAR
      CurrentColumn@1003 : Record 367;
      Found@1001 : Boolean;
      Which@1004 : Text[30];
    BEGIN
      MATRIX_CurrSetLength := 0;
      CLEAR(MATRIX_ColumnCaptions);
      MATRIX_ColumnSet := '';

      CASE Step OF
        Step::Initial:
          BEGIN
            IF (ColumnDimOption = ColumnDimOption::Period) AND (PeriodType <> PeriodType::"Accounting Period")
               AND (DateFilter = '')
            THEN BEGIN
              EVALUATE(CurrentColumn.Code,FORMAT(WORKDATE));
              Which := '=><';
            END ELSE
              Which := '-';
            Found := FindRec(ColumnDimOption,CurrentColumn,Which);
          END;
        Step::Previous:
          BEGIN
            CurrentColumn.SETPOSITION(MATRIX_PrimaryKeyFirstColInSet);
            Found := FindRec(ColumnDimOption,CurrentColumn,'=');
            NextRec(ColumnDimOption,CurrentColumn,-MATRIX_NoOfColumns)
          END;
        Step::Same:
          BEGIN
            CurrentColumn.SETPOSITION(MATRIX_PrimaryKeyFirstColInSet);
            Found := FindRec(ColumnDimOption,CurrentColumn,'=');
          END;
        Step::Next:
          BEGIN
            CurrentColumn.SETPOSITION(MATRIX_PrimaryKeyFirstColInSet);
            Found := FindRec(ColumnDimOption,CurrentColumn,'=');
            IF NOT (NextRec(ColumnDimOption,CurrentColumn,MATRIX_NoOfColumns) = MATRIX_NoOfColumns) THEN BEGIN
              CurrentColumn.SETPOSITION(MATRIX_PrimaryKeyFirstColInSet);
              Found := FindRec(ColumnDimOption,CurrentColumn,'=');
            END
          END;
      END;

      MATRIX_PrimaryKeyFirstColInSet := CurrentColumn.GETPOSITION;

      IF Found THEN BEGIN
        REPEAT
          MATRIX_CurrSetLength := MATRIX_CurrSetLength + 1;
          IF ShowColumnName THEN
            MATRIX_ColumnCaptions[MATRIX_CurrSetLength] := CurrentColumn.Name
          ELSE
            MATRIX_ColumnCaptions[MATRIX_CurrSetLength] := CurrentColumn.Code;
        UNTIL (MATRIX_CurrSetLength = MATRIX_NoOfColumns) OR (NextRec(ColumnDimOption,CurrentColumn,1) <> 1);

        IF MATRIX_CurrSetLength = 1 THEN
          MATRIX_ColumnSet := MATRIX_ColumnCaptions[1]
        ELSE
          MATRIX_ColumnSet := MATRIX_ColumnCaptions[1] + '..' + MATRIX_ColumnCaptions[MATRIX_CurrSetLength];
      END;
    END;

    LOCAL PROCEDURE LineDimCodeOnAfterValidate@19031201();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE ColumnDimCodeOnAfterValidate@19023109();
    VAR
      MATRIX_Steps@1001 : 'First,Previous,Next';
    BEGIN
      CurrPage.UPDATE;
      MATRIX_GenerateColumnCaptions(MATRIX_Steps::First);
    END;

    LOCAL PROCEDURE DateFilterOnAfterValidate@19006009();
    VAR
      MATRIX_Step@1001 : 'First,Previous,Next';
    BEGIN
      CurrPage.UPDATE;
      IF ColumnDimOption = ColumnDimOption::Period THEN BEGIN
        PeriodInitialized := TRUE;
        MATRIX_GenerateColumnCaptions(MATRIX_Step::First);
      END;
    END;

    LOCAL PROCEDURE GLAccFilterOnAfterValidate@19040142();
    VAR
      MATRIX_Step@1001 : 'First,Previous,Next';
    BEGIN
      CurrPage.UPDATE;
      IF ColumnDimOption = ColumnDimOption::"G/L Account" THEN
        MATRIX_GenerateColumnCaptions(MATRIX_Step::First);
    END;

    LOCAL PROCEDURE GlobalDim2FilterOnAfterValidat@19025957();
    VAR
      MATRIX_Step@1001 : 'First,Previous,Next';
    BEGIN
      CurrPage.UPDATE;
      IF ColumnDimOption = ColumnDimOption::"Dimension 2" THEN
        MATRIX_GenerateColumnCaptions(MATRIX_Step::First);
    END;

    LOCAL PROCEDURE GlobalDim1FilterOnAfterValidat@19037628();
    VAR
      MATRIX_Step@1001 : 'First,Previous,Next';
    BEGIN
      CurrPage.UPDATE;
      IF ColumnDimOption = ColumnDimOption::"Dimension 1" THEN
        MATRIX_GenerateColumnCaptions(MATRIX_Step::First);
    END;

    LOCAL PROCEDURE BudgetFilterOnAfterValidate@19069837();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE BusUnitFilterOnAfterValidate@19015355();
    VAR
      MATRIX_Step@1000 : 'First,Previous,Next';
    BEGIN
      CurrPage.UPDATE;
      IF ColumnDimOption = ColumnDimOption::"Business Unit" THEN
        MATRIX_GenerateColumnCaptions(MATRIX_Step::First);
    END;

    LOCAL PROCEDURE ShowColumnNameOnAfterValidate@19074585();
    VAR
      MATRIX_Step@1000 : 'Initial,Previous,Same,Next';
    BEGIN
      MATRIX_GenerateColumnCaptions(MATRIX_Step::Same);
    END;

    LOCAL PROCEDURE PeriodTypeOnAfterValidate@19015506();
    VAR
      MATRIX_Step@1001 : 'First,Previous,Next';
    BEGIN
      IF ColumnDimOption = ColumnDimOption::Period THEN
        MATRIX_GenerateColumnCaptions(MATRIX_Step::First);
    END;

    LOCAL PROCEDURE AmountTypeOnAfterValidate@19077637();
    VAR
      MATRIX_Step@1001 : 'First,Previous,Next';
    BEGIN
      IF ColumnDimOption = ColumnDimOption::Period THEN
        MATRIX_GenerateColumnCaptions(MATRIX_Step::First);
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeGLAccFilter@4(VAR GLAccount@1000 : Record 15;VAR GLAccFilter@1001 : Text;LineDimOption@1003 : 'G/L Account,Period,Business Unit,Dimension 1,Dimension 2,Dimension 3,Dimension 4';ColumnDimOption@1002 : 'G/L Account,Period,Business Unit,Dimension 1,Dimension 2,Dimension 3,Dimension 4');
    BEGIN
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
      DPA_Management@1100528400 : Codeunit 11012783;
      FPSLicenseManagement@1100527400 : Codeunit 11229289;
    BEGIN
      //**4PS
      IF NOT FPSLicenseManagement.LicenseAndReadPermissionForTable(DepartmentAuthorizObject) THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    BEGIN
    END.
  }
}

