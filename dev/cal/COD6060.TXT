OBJECT Codeunit 6060 Hybrid Deployment
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    Permissions=TableData 6060=rimd,
                TableData 2000000146=rimd,
                TableData 2000000173=rimd,
                TableData 2000000199=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      SourceProduct@1001 : Text;
      FailedToProcessRequestErr@1023 : TextConst 'ENU=The request could not be processed due to an unexpected error.;NOR=Foresp›rselen kunne ikke behandles p† grunn av en uventet feil.';
      FailedCreatingIRErr@1011 : TextConst 'ENU=Failed to create your integration runtime.;NOR=Kan ikke opprette integrasjonskj›retiden.';
      FailedDisableReplicationErr@1010 : TextConst 'ENU=Failed to disable replication.;NOR=Kan ikke deaktivere replikering.';
      FailedEnableReplicationErr@1009 : TextConst 'ENU=Failed to enable your replication.\\Make sure your integration runtime is successfully connected and try again.;NOR=Kan ikke aktivere replikeringen.\\Kontroller at integrasjonskj›retiden er riktig tilkoblet, og pr›v p† nytt.';
      FailedGettingStatusErr@1000 : TextConst 'ENU=Failed to retrieve the replication run status.;NOR=Kunne ikke hente statusen til replikeringskj›ringen.';
      FailedGettingIRKeyErr@1008 : TextConst 'ENU=Failed to get your integration runtime key. Please try again.;NOR=Kan ikke hente n›kkelen for integrasjonskj›retid. Pr›v p† nytt.';
      FailedGettingVersionInformationErr@1026 : TextConst 'ENU=Failed to get the version information. Please try again.;NOR=Kan ikke hente versjonsinformasjon. Pr›v p† nytt.';
      FailedPreparingTablesErr@1022 : TextConst 'ENU=Failed to prepare tables for replication. See the help document for more information.;NOR=Kunne ikke gj›re tabellene klare til replikering. Se hjelpedokumentet for † f† mer informasjon.';
      FailedRegeneratingIRKeyErr@1005 : TextConst 'ENU=Failed to regenerate your integration runtime key. Please try again.;NOR=Kan ikke generere n›kkelen for integrasjonskj›retid. Pr›v p† nytt.';
      FailedRunReplicationErr@1004 : TextConst 'ENU=Failed to trigger replication. Please try again.;NOR=Kan ikke utl›se replikering. Pr›v p† nytt.';
      FailedRunUpgradeErr@1025 : TextConst 'ENU=Failed to trigger upgrade. Please try again.;NOR=Kan ikke utl›se oppgradering. Pr›v p† nytt.';
      FailedSetRepScheduleErr@1013 : TextConst 'ENU=Failed to set the replication schedule. Please try again.;NOR=Kan ikke angi replikeringsplan. Pr›v p† nytt.';
      CompletedTxt@1003 : TextConst '@@@={Locked};ENU=Completed;NOR=Completed';
      FailedTxt@1002 : TextConst '@@@={Locked};ENU=Failed;NOR=Failed';
      InvalidProductErr@1006 : TextConst 'ENU=The product specified in the request is invalid.;NOR=Produktet som er angitt i foresp›rselen, er ugyldig.';
      InvalidRunIdErr@1024 : TextConst 'ENU=The specified replication run could not be found.;NOR=Fant ikke den angitte replikeringskj›ringen.';
      InvalidTenantErr@1007 : TextConst 'ENU=The tenant specified in the request is invalid for the request.;NOR=Leietakeren som er angitt i foresp›rselen, er ugyldig for foresp›rselen.';
      InvalidIntegrationRuntimeNameErr@1012 : TextConst 'ENU=The integration runtime name specified is invalid.;NOR=Navnet p† integreringskj›retiden som er angitt, er ugyldig.';
      NoIntegrationRuntimeErr@1014 : TextConst 'ENU=The tenant is not configured to use an integration runtime.;NOR=Leietakeren er ikke konfigurert til † bruke en integreringskj›retid.';
      PrepareServersFailureErr@1015 : TextConst 'ENU=Failed to prepare the systems for replication.;NOR=Kan ikke klargj›re systemene for replikering.';
      ReplicationNotEnabledErr@1016 : TextConst 'ENU=Cannot perform the requested action because replication of data between on-premises and the cloud has not been set up. Please contact your administrator.;NOR=Kan ikke utf›re den forespurte handlingen fordi replikering av data mellom lokal plasseringÿog skyen ikke er definert. Kontakt administratoren.';
      SelfHostedIRNotFoundErr@1017 : TextConst 'ENU=Could not find the self-hosted integration runtime. Please ensure the self-hosted integration runtime is running and connected.;NOR=Finner ikke den selvdriftede integreringskj›retiden. Kontroller at den selvdriftede integreringskj›retiden kj›rer og er tilkoblet.';
      ConnectionStringFailureErr@1018 : TextConst 'ENU=The connection string is invalid.;NOR=Tilkoblingsstrengen er ugyldig.';
      SqlTimeoutErr@1021 : TextConst 'ENU=The server timed out while attempting to connect to the specified SQL server.;NOR=Serveren ble tidsavbrutt under fors›k p† † koble til angitt SQL Server.';
      TooManyReplicationRunsErr@1019 : TextConst 'ENU=Cannot start replication because a replication is currently in progress. Please try again at a later time.;NOR=Kan ikke starte replication fordi en annen replikering p†g†r. Pr›v p† nytt senere.';
      NoAdfCapacityErr@1020 : TextConst 'ENU=The Intelligent Cloud is temporarily unable to process your request. Please try again at a later time.;NOR=Den intelligente skyenÿkan for ›yeblikket ikke behandle foresp›rselen. Pr›v p† nytt senere.';

    PROCEDURE Initialize@10(SourceProductId@1000 : Text);
    BEGIN
      SourceProduct := SourceProductId;
      OnInitialize(SourceProductId);
    END;

    PROCEDURE CreateIntegrationRuntime@4(VAR RuntimeName@1001 : Text;VAR PrimaryKey@1002 : Text);
    VAR
      JSONManagement@1003 : Codeunit 5459;
      InstanceId@1000 : Text;
      JsonOutput@1004 : Text;
    BEGIN
      IF NOT TryCreateIntegrationRuntime(InstanceId) THEN
        ERROR(FailedCreatingIRErr);

      RetryGetStatus(InstanceId,FailedCreatingIRErr,JsonOutput);

      JSONManagement.InitializeObject(JsonOutput);
      JSONManagement.GetStringPropertyValueByName('Name',RuntimeName);
      JSONManagement.GetStringPropertyValueByName('PrimaryKey',PrimaryKey);
    END;

    PROCEDURE DisableReplication@6();
    VAR
      InstanceId@1000 : Text;
      Output@1001 : Text;
    BEGIN
      IF NOT TryDisableReplication(InstanceId) THEN
        ERROR(FailedDisableReplicationErr);

      RetryGetStatus(InstanceId,FailedDisableReplicationErr,Output);

      EnableIntelligentCloud(FALSE);
    END;

    PROCEDURE EnableReplication@5(OnPremConnectionString@1001 : Text;DatabaseConfiguration@1000 : Text;IntegrationRuntimeName@1002 : Text);
    VAR
      PermissionManager@1008 : Codeunit 9002;
      NotificationUrl@1003 : Text;
      SubscriptionId@1004 : Text[150];
      ClientState@1005 : Text[50];
      InstanceId@1006 : Text;
      Output@1007 : Text;
      ServiceNotificationUrl@1009 : Text;
      ServiceSubscriptionId@1010 : Text[150];
      ServiceClientState@1011 : Text[50];
    BEGIN
      OnBeforeEnableReplication(
        SourceProduct,NotificationUrl,SubscriptionId,ClientState,
        ServiceNotificationUrl,ServiceSubscriptionId,ServiceClientState);

      IF NOT TryEnableReplication(
           InstanceId,OnPremConnectionString,DatabaseConfiguration,IntegrationRuntimeName,NotificationUrl,ClientState,
           SubscriptionId,ServiceNotificationUrl,ServiceClientState,ServiceSubscriptionId)
      THEN
        ERROR(FailedEnableReplicationErr);

      RetryGetStatus(InstanceId,FailedEnableReplicationErr,Output);

      EnableIntelligentCloud(TRUE);
      PermissionManager.ResetUsersToIntelligentCloudUserGroup;
    END;

    PROCEDURE GetIntegrationRuntimeKeys@2(VAR PrimaryKey@1000 : Text;VAR SecondaryKey@1001 : Text);
    VAR
      JSONManagement@1003 : Codeunit 5459;
      InstanceId@1002 : Text;
      JsonOutput@1004 : Text;
    BEGIN
      IF NOT TryGetIntegrationRuntimeKeys(InstanceId) THEN
        ERROR(FailedGettingIRKeyErr);

      RetryGetStatus(InstanceId,FailedGettingIRKeyErr,JsonOutput);

      JSONManagement.InitializeObject(JsonOutput);
      JSONManagement.GetStringPropertyValueByName('PrimaryKey',PrimaryKey);
      JSONManagement.GetStringPropertyValueByName('SecondaryKey',SecondaryKey);
    END;

    PROCEDURE GetReplicationRunStatus@3(RunId@1000 : Text;VAR Status@1005 : Text;VAR Errors@1001 : Text);
    VAR
      JSONManagement@1004 : Codeunit 5459;
      InstanceId@1002 : Text;
      JsonOutput@1003 : Text;
      TempError@1007 : Text;
      TempMessage@1008 : Text;
      i@1006 : Integer;
    BEGIN
      IF NOT TryGetReplicationRunStatus(InstanceId,RunId) THEN
        ERROR(FailedGettingStatusErr);

      RetryGetStatus(InstanceId,FailedGettingStatusErr,JsonOutput);

      JSONManagement.InitializeObject(JsonOutput);
      JSONManagement.GetStringPropertyValueByName('Status',Status);
      JSONManagement.GetStringPropertyValueByName('Errors',Errors);
      JSONManagement.InitializeObject(Errors);
      JSONManagement.GetArrayPropertyValueAsStringByName('$values',Errors);
      JSONManagement.InitializeCollection(Errors);

      Errors := '';
      FOR i := 0 TO JSONManagement.GetCollectionCount - 1 DO BEGIN
        JSONManagement.GetObjectFromCollectionByIndex(TempError,i);

        // Check if the error contains an error code and fetch the message
        TempMessage := GetErrorMessage(TempError);
        IF TempMessage = '' THEN
          TempMessage := TempError;

        Errors += TempMessage + '\';
      END;
      Errors := DELCHR(Errors,'>','\');
    END;

    PROCEDURE GetRequestStatus@11(RequestTrackingId@1000 : Text;VAR JsonOutput@1001 : Text) Status : Text;
    BEGIN
      OnGetRequestStatus(RequestTrackingId,JsonOutput,Status);
    END;

    PROCEDURE GetVersionInformation@44(VAR DeployedVersion@1005 : Text;VAR LatestVersion@1001 : Text);
    VAR
      JSONManagement@1004 : Codeunit 5459;
      InstanceId@1002 : Text;
      JsonOutput@1003 : Text;
    BEGIN
      IF NOT TryGetVersionInformation(InstanceId) THEN
        ERROR(FailedGettingVersionInformationErr);

      RetryGetStatus(InstanceId,FailedGettingVersionInformationErr,JsonOutput);

      JSONManagement.InitializeObject(JsonOutput);
      JSONManagement.GetStringPropertyValueByName('DeployedVersion',DeployedVersion);
      JSONManagement.GetStringPropertyValueByName('LatestVersion',LatestVersion);
    END;

    PROCEDURE PrepareTablesForReplication@35();
    BEGIN
      IF NOT TryPrepareTablesForReplication THEN
        ERROR(FailedPreparingTablesErr);
    END;

    PROCEDURE RegenerateIntegrationRuntimeKeys@25(VAR PrimaryKey@1000 : Text;VAR SecondaryKey@1001 : Text);
    VAR
      JSONManagement@1003 : Codeunit 5459;
      InstanceId@1002 : Text;
      JsonOutput@1004 : Text;
    BEGIN
      IF NOT TryRegenerateIntegrationRuntimeKeys(InstanceId) THEN
        ERROR(FailedRegeneratingIRKeyErr);

      RetryGetStatus(InstanceId,FailedRegeneratingIRKeyErr,JsonOutput);

      JSONManagement.InitializeObject(JsonOutput);
      JSONManagement.GetStringPropertyValueByName('PrimaryKey',PrimaryKey);
      JSONManagement.GetStringPropertyValueByName('SecondaryKey',SecondaryKey);
    END;

    PROCEDURE ResetCloudData@33();
    VAR
      IntelligentCloudStatus@1000 : Record 2000000173;
    BEGIN
      IntelligentCloudStatus.MODIFYALL("Synced Version",0);
      COMMIT;
    END;

    PROCEDURE RunReplication@31(VAR RunId@1000 : Text);
    VAR
      JSONManagement@1002 : Codeunit 5459;
      InstanceId@1003 : Text;
      JsonOutput@1001 : Text;
    BEGIN
      IF NOT TryRunReplication(InstanceId) THEN
        ERROR(FailedRunReplicationErr);

      RetryGetStatus(InstanceId,FailedRunReplicationErr,JsonOutput);

      JSONManagement.InitializeObject(JsonOutput);
      JSONManagement.GetStringPropertyValueByName('RunId',RunId);
    END;

    PROCEDURE RunUpgrade@43();
    VAR
      InstanceId@1003 : Text;
      JsonOutput@1001 : Text;
    BEGIN
      IF NOT TryRunUpgrade(InstanceId) THEN
        ERROR(FailedRunUpgradeErr);

      RetryGetStatus(InstanceId,FailedRunUpgradeErr,JsonOutput);
    END;

    PROCEDURE SetReplicationSchedule@9(ReplicationFrequency@1000 : Text;DaysToRun@1001 : Text;TimeToRun@1002 : Time;Activate@1003 : Boolean);
    VAR
      InstanceId@1004 : Text;
      Output@1005 : Text;
    BEGIN
      IF NOT TrySetReplicationSchedule(InstanceId,ReplicationFrequency,DaysToRun,TimeToRun,Activate) THEN
        ERROR(FailedSetRepScheduleErr);

      RetryGetStatus(InstanceId,FailedSetRepScheduleErr,Output);
    END;

    [EventSubscriber(Codeunit,2,OnCompanyInitialize)]
    LOCAL PROCEDURE HandleCompanyInit@7();
    VAR
      HybridDeploymentSetup@1000 : Record 6060;
    BEGIN
      IF NOT HybridDeploymentSetup.ISEMPTY THEN
        EXIT;

      HybridDeploymentSetup.INIT;
      HybridDeploymentSetup.INSERT;
    END;

    LOCAL PROCEDURE EnableIntelligentCloud@38(Enabled@1000 : Boolean);
    VAR
      IntelligentCloud@1001 : Record 2000000146;
    BEGIN
      IF NOT IntelligentCloud.GET THEN BEGIN
        IntelligentCloud.INIT;
        IntelligentCloud.Enabled := Enabled;
        IntelligentCloud.INSERT;
      END ELSE BEGIN
        IntelligentCloud.Enabled := Enabled;
        IntelligentCloud.MODIFY;
      END;
    END;

    LOCAL PROCEDURE RetryGetStatus@30(InstanceId@1000 : Text;GenericErrorMessage@1001 : Text;VAR JsonOutput@1002 : Text) Status : Text;
    VAR
      Message@1003 : Text;
    BEGIN
      IF InstanceId = '' THEN
        EXIT;

      REPEAT
        SLEEP(1000);
        Status := GetRequestStatus(InstanceId,JsonOutput);
      UNTIL ((Status = CompletedTxt) OR (Status = FailedTxt));

      IF Status = FailedTxt THEN BEGIN
        Message := GetErrorMessage(JsonOutput);

        IF Message <> '' THEN
          ERROR(Message);

        ERROR(GenericErrorMessage)
      END;
    END;

    [Integration]
    LOCAL PROCEDURE OnCreateIntegrationRuntime@20(VAR InstanceId@1001 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnDisableReplication@19(VAR InstanceId@1001 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeEnableReplication@8(ProductId@1004 : Text;VAR NotificationUrl@1003 : Text;VAR SubscriptionId@1002 : Text[150];VAR ClientState@1001 : Text[50];VAR ServiceNotificationUrl@1000 : Text;VAR ServiceSubscriptionId@1005 : Text[150];VAR ServiceClientState@1006 : Text[50]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnEnableReplication@23(OnPremiseConnectionString@1002 : Text;DatabaseType@1001 : Text;IntegrationRuntimeName@1000 : Text;NotificationUrl@1003 : Text;ClientState@1004 : Text;SubscriptionId@1005 : Text;ServiceNotificationUrl@1006 : Text;ServiceClientState@1007 : Text;ServiceSubscriptionId@1008 : Text;VAR InstanceId@1009 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnGetErrorMessage@14(ErrorCode@1000 : Text;VAR Message@1001 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnGetIntegrationRuntimeKeys@18(VAR InstanceId@1000 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnGetReplicationRunStatus@24(VAR InstanceId@1000 : Text;RunId@1001 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnGetRequestStatus@16(InstanceId@1000 : Text;VAR JsonOutput@1001 : Text;VAR Status@1002 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnGetVersionInformation@45(VAR InstanceId@1000 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnInitialize@15(SourceProductId@1000 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnPrepareTablesForReplication@37();
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnRegenerateIntegrationRuntimeKeys@34(VAR InstanceId@1000 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnRunReplication@32(VAR InstanceId@1000 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnRunUpgrade@39(VAR InstanceId@1000 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnSetReplicationSchedule@13(ReplicationFrequency@1002 : Text;DaysToRun@1001 : Text;TimeToRun@1000 : Time;Activate@1003 : Boolean;VAR InstanceId@1004 : Text);
    BEGIN
    END;

    [TryFunction]
    LOCAL PROCEDURE TryCreateIntegrationRuntime@29(VAR InstanceId@1000 : Text);
    BEGIN
      OnCreateIntegrationRuntime(InstanceId);
    END;

    [TryFunction]
    LOCAL PROCEDURE TryDisableReplication@28(VAR InstanceId@1000 : Text);
    BEGIN
      OnDisableReplication(InstanceId);
    END;

    [TryFunction]
    LOCAL PROCEDURE TryEnableReplication@27(VAR InstanceId@1000 : Text;OnPremConnectionString@1001 : Text;DatabaseConfiguration@1002 : Text;IntegrationRuntimeName@1003 : Text;NotificationUrl@1004 : Text;ClientState@1005 : Text;SubscriptionId@1006 : Text;ServiceNotificationUrl@1007 : Text;ServiceClientState@1008 : Text;ServiceSubscriptionId@1009 : Text);
    BEGIN
      OnEnableReplication(
        OnPremConnectionString,DatabaseConfiguration,IntegrationRuntimeName,NotificationUrl,ClientState,SubscriptionId,
        ServiceNotificationUrl,ServiceClientState,ServiceSubscriptionId,InstanceId);
      ValidateInstanceId(InstanceId);
    END;

    [TryFunction]
    LOCAL PROCEDURE TryGetIntegrationRuntimeKeys@26(VAR InstanceId@1000 : Text);
    BEGIN
      OnGetIntegrationRuntimeKeys(InstanceId);
      ValidateInstanceId(InstanceId);
    END;

    [TryFunction]
    LOCAL PROCEDURE TryGetReplicationRunStatus@21(VAR InstanceId@1001 : Text;RunId@1000 : Text);
    BEGIN
      OnGetReplicationRunStatus(InstanceId,RunId);
      ValidateInstanceId(InstanceId);
    END;

    [TryFunction]
    LOCAL PROCEDURE TryGetVersionInformation@46(VAR InstanceId@1001 : Text);
    BEGIN
      OnGetVersionInformation(InstanceId);
      ValidateInstanceId(InstanceId);
    END;

    [TryFunction]
    LOCAL PROCEDURE TryPrepareTablesForReplication@40();
    BEGIN
      OnPrepareTablesForReplication;
    END;

    [TryFunction]
    LOCAL PROCEDURE TryRegenerateIntegrationRuntimeKeys@36(VAR InstanceId@1000 : Text);
    BEGIN
      OnRegenerateIntegrationRuntimeKeys(InstanceId);
      ValidateInstanceId(InstanceId);
    END;

    [TryFunction]
    LOCAL PROCEDURE TryRunReplication@22(VAR InstanceId@1000 : Text);
    BEGIN
      OnRunReplication(InstanceId);
      ValidateInstanceId(InstanceId);
    END;

    [TryFunction]
    LOCAL PROCEDURE TryRunUpgrade@42(VAR InstanceId@1000 : Text);
    BEGIN
      OnRunUpgrade(InstanceId);
      ValidateInstanceId(InstanceId);
    END;

    [TryFunction]
    LOCAL PROCEDURE TrySetReplicationSchedule@17(VAR InstanceId@1000 : Text;ReplicationFrequency@1003 : Text;DaysToRun@1002 : Text;TimeToRun@1001 : Time;Activate@1004 : Boolean);
    BEGIN
      OnSetReplicationSchedule(ReplicationFrequency,DaysToRun,TimeToRun,Activate,InstanceId);
      ValidateInstanceId(InstanceId);
    END;

    [TryFunction]
    LOCAL PROCEDURE TryGetErrorCode@12(JsonOutput@1002 : Text;VAR ErrorCode@1001 : Text);
    VAR
      JSONManagement@1000 : Codeunit 5459;
    BEGIN
      JSONManagement.InitializeObject(JsonOutput);
      JSONManagement.GetStringPropertyValueByName('ErrorCode',ErrorCode);
    END;

    LOCAL PROCEDURE GetErrorMessage@1(JsonOutput@1000 : Text) Message : Text;
    VAR
      ErrorCode@1002 : Text;
    BEGIN
      IF NOT TryGetErrorCode(JsonOutput,ErrorCode) OR (ErrorCode = '') THEN
        EXIT;

      SENDTRACETAG('00006NE','IntelligentCloud',VERBOSITY::Warning,
        STRSUBSTNO('Error occurred in replication service: %1',ErrorCode),DATACLASSIFICATION::SystemMetadata);
      OnGetErrorMessage(ErrorCode,Message);

      IF Message <> '' THEN
        EXIT;

      CASE ErrorCode OF
        '52010':
          Message := InvalidProductErr;
        '52015':
          Message := InvalidRunIdErr;
        '52020':
          Message := InvalidTenantErr;
        '52030':
          Message := InvalidIntegrationRuntimeNameErr;
        '52040':
          Message := NoIntegrationRuntimeErr;
        '52050':
          Message := PrepareServersFailureErr;
        '52060':
          Message := ReplicationNotEnabledErr;
        '52071':
          Message := SelfHostedIRNotFoundErr;
        '52072':
          Message := ConnectionStringFailureErr;
        '52073':
          Message := SqlTimeoutErr;
        '52080':
          Message := TooManyReplicationRunsErr;
        '52090':
          Message := NoAdfCapacityErr;
      END;
    END;

    LOCAL PROCEDURE ValidateInstanceId@41(InstanceId@1000 : Text);
    BEGIN
      IF InstanceId = '' THEN BEGIN
        SENDTRACETAG('00007HU','IntelligentCloud',VERBOSITY::Error,'Received an empty response from the replication service.');
        ERROR(FailedToProcessRequestErr);
      END;
    END;

    BEGIN
    END.
  }
}

