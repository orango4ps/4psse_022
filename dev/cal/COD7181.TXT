OBJECT Codeunit 7181 Purchases Info-Pane Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.03,4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Item@1001 : Record 27;
      PurchHeader@1003 : Record 38;
      PurchPriceCalcMgt@1002 : Codeunit 7010;

    [External]
    PROCEDURE CalcAvailability@18(VAR PurchLine@1000 : Record 39) : Decimal;
    VAR
      AvailableToPromise@1001 : Codeunit 5790;
      GrossRequirement@1002 : Decimal;
      ScheduledReceipt@1003 : Decimal;
      AvailableQuantity@1009 : Decimal;
      PeriodType@1006 : 'Day,Week,Month,Quarter,Year';
      AvailabilityDate@1004 : Date;
      LookaheadDateformula@1005 : DateFormula;
      IsHandled@1007 : Boolean;
    BEGIN
      IF GetItem(PurchLine) THEN BEGIN
        IF PurchLine."Expected Receipt Date" <> 0D THEN
          AvailabilityDate := PurchLine."Expected Receipt Date"
        ELSE
          AvailabilityDate := WORKDATE;

        Item.RESET;
        Item.SETRANGE("Date Filter",0D,AvailabilityDate);
        Item.SETRANGE("Variant Filter",PurchLine."Variant Code");
        Item.SETRANGE("Location Filter",PurchLine."Location Code");
        Item.SETRANGE("Drop Shipment Filter",FALSE);

        IsHandled := FALSE;
        OnBeforeCalcAvailability(Item,PurchLine,AvailableQuantity,IsHandled);
        IF IsHandled THEN
          EXIT(AvailableQuantity);

        EXIT(
          AvailableToPromise.QtyAvailabletoPromise(
            Item,
            GrossRequirement,
            ScheduledReceipt,
            AvailabilityDate,
            PeriodType,
            LookaheadDateformula));
      END;
    END;

    [External]
    PROCEDURE CalcNoOfPurchasePrices@19(VAR PurchLine@1102628000 : Record 39) : Integer;
    BEGIN
      IF GetItem(PurchLine) THEN BEGIN
        GetPurchHeader(PurchLine);
        EXIT(PurchPriceCalcMgt.NoOfPurchLinePrice(PurchHeader,PurchLine,TRUE));
      END;
    END;

    [External]
    PROCEDURE CalcNoOfPurchLineDisc@22(VAR PurchLine@1102628000 : Record 39) : Integer;
    BEGIN
      IF GetItem(PurchLine) THEN BEGIN
        GetPurchHeader(PurchLine);
        EXIT(PurchPriceCalcMgt.NoOfPurchLineLineDisc(PurchHeader,PurchLine,TRUE));
      END;
    END;

    LOCAL PROCEDURE GetItem@24(VAR PurchLine@1000 : Record 39) : Boolean;
    BEGIN
      WITH Item DO BEGIN
        IF (PurchLine.Type <> PurchLine.Type::Item) OR (PurchLine."No." = '') THEN
          EXIT(FALSE);

        IF PurchLine."No." <> "No." THEN
          GET(PurchLine."No.");
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE GetPurchHeader@13(PurchLine@1000 : Record 39);
    BEGIN
      IF (PurchLine."Document Type" <> PurchHeader."Document Type") OR
         (PurchLine."Document No." <> PurchHeader."No.")
      THEN
        PurchHeader.GET(PurchLine."Document Type",PurchLine."Document No.");
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCalcAvailability@1(VAR Item@1000 : Record 27;PurchaseLine@1001 : Record 39;VAR AvailableQuantity@1002 : Decimal;VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    PROCEDURE GetOrderAmount@1100528500(PurchHeader@1100528500 : Record 38) : Decimal;
    VAR
      PurchLine@1100528501 : Record 39;
    BEGIN
      //**4PS DP01371
      PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine.SETRANGE("Document No.",PurchHeader."No.");
      PurchLine.CALCSUMS(Amount);
      EXIT(PurchLine.Amount);
    END;

    PROCEDURE GetOriginalOrderAmount@1100528501(PurchHeader@1100528500 : Record 38) : Decimal;
    BEGIN
      //**4PS DP01371
      EXIT(GetOrderAmount(PurchHeader) - GetCorrectedOrderAmount(PurchHeader) - GetExtraReceiptsAmount(PurchHeader));
    END;

    PROCEDURE GetCorrectedOrderAmount@1100528502(PurchHeader@1100528500 : Record 38) : Decimal;
    VAR
      PurchLine@1100528501 : Record 39;
    BEGIN
      //**4PS DP01371
      PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine.SETRANGE("Document No.",PurchHeader."No.");
      PurchLine.SETRANGE("Order Correction Line",TRUE);
      PurchLine.CALCSUMS(Amount);
      EXIT(PurchLine.Amount);
    END;

    PROCEDURE GetExtraReceiptsAmount@1100528503(PurchHeader@1100528500 : Record 38) : Decimal;
    VAR
      PurchLine@1100528501 : Record 39;
    BEGIN
      //**4PS DP01371
      PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine.SETRANGE("Document No.",PurchHeader."No.");
      PurchLine.SETRANGE("Extra Receipt Line",TRUE);
      PurchLine.CALCSUMS(Amount);
      EXIT(PurchLine.Amount);
    END;

    PROCEDURE GetReceivedAmount@1100528505(PurchHeader@1100528500 : Record 38) : Decimal;
    VAR
      DummyAmount@1100528501 : Decimal;
      ReceivedAmount@1100528502 : Decimal;
    BEGIN
      //**4PS DP01371
      PurchHeader.GetReceivedInvoicedAmounts(
        DummyAmount,DummyAmount,
        ReceivedAmount,DummyAmount,DummyAmount,DummyAmount,
        DummyAmount,
        0,'','');
      EXIT(ReceivedAmount);
    END;

    PROCEDURE GetAmountToReceive@1100528504(PurchHeader@1100528500 : Record 38) AmountToReceive : Decimal;
    VAR
      PurchLine@1100528501 : Record 39;
      Currency@1100528503 : Record 4;
      UnitCostInclDisc@1100528502 : Decimal;
    BEGIN
      //**4PS DP01371
      IF PurchHeader.Status = PurchHeader.Status::Closed THEN
        EXIT(0);

      PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine.SETRANGE("Document No.",PurchHeader."No.");
      IF PurchHeader."Amounts only" THEN BEGIN
        PurchLine.CALCSUMS("Amnt. to Receive");
        AmountToReceive := PurchLine."Amnt. to Receive";
      END ELSE BEGIN
        IF PurchHeader."Currency Code" = '' THEN
          Currency.InitRoundingPrecision
        ELSE BEGIN
          Currency.GET(PurchHeader."Currency Code");
          Currency.TESTFIELD("Amount Rounding Precision");
        END;
        PurchLine.SETFILTER("Qty. to Receive",'<>0');
        IF PurchLine.FINDSET THEN
          REPEAT
            UnitCostInclDisc := 0;
            IF (PurchLine."Line Discount Amount" = 0) AND (PurchLine."Inv. Discount Amount" = 0) THEN
              UnitCostInclDisc := PurchLine."Direct Unit Cost"
            ELSE
              IF PurchLine.Quantity <> 0 THEN
                UnitCostInclDisc := PurchLine.Amount / PurchLine.Quantity;

            AmountToReceive +=
              ROUND(PurchLine."Qty. to Receive" * UnitCostInclDisc,
              Currency."Amount Rounding Precision");
          UNTIL PurchLine.NEXT = 0;
      END;
      EXIT(AmountToReceive);
    END;

    PROCEDURE GetOutstandingAmount@1100528506(PurchHeader@1100528501 : Record 38) : Decimal;
    VAR
      PurchLine@1100528500 : Record 39;
    BEGIN
      //**4PS DP01371
      IF PurchHeader.Status = PurchHeader.Status::Closed THEN
        EXIT(0);

      PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine.SETRANGE("Document No.",PurchHeader."No.");
      PurchLine.CALCSUMS("Outstanding Amt. Ex. VAT (LCY)");
      EXIT(PurchLine."Outstanding Amt. Ex. VAT (LCY)");
    END;

    PROCEDURE GetOrderSubcontractingQuantity@1100525002(PurchHeader@1100528500 : Record 38) : Decimal;
    VAR
      PurchLine@1100528501 : Record 39;
    BEGIN
      //**4PS
      PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine.SETRANGE("Document No.",PurchHeader."No.");
      PurchLine.SETRANGE("Cost Type", PurchLine."Cost Type"::Subcontracting);
      PurchLine.CALCSUMS(Quantity);
      EXIT(PurchLine.Quantity);
    END;

    PROCEDURE GetOriginalSubcontractingQuantity@1100525001(PurchHeader@1100528500 : Record 38) : Decimal;
    BEGIN
      //**4PS
      EXIT(GetOrderSubcontractingQuantity(PurchHeader) - GetCorrectedSubcontractingQuantity(PurchHeader) - GetExtraReceiptsSubcontractingQuantity(PurchHeader));
    END;

    PROCEDURE GetReceivedSubcontractingQuantity@1100525000(PurchHeader@1100528500 : Record 38) : Decimal;
    VAR
      PurchLine@1100525000 : Record 39;
    BEGIN
      //**4PS
      PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine.SETRANGE("Document No.",PurchHeader."No.");
      PurchLine.SETRANGE("Cost Type", PurchLine."Cost Type"::Subcontracting);
      PurchLine.CALCSUMS("Quantity Received");
      EXIT(PurchLine."Quantity Received");
    END;

    PROCEDURE GetInvoicedSubcontractingQuantity@1100525003(PurchHeader@1100528500 : Record 38) : Decimal;
    VAR
      PurchLine@1100525000 : Record 39;
    BEGIN
      //**4PS
      PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine.SETRANGE("Document No.",PurchHeader."No.");
      PurchLine.SETRANGE("Cost Type", PurchLine."Cost Type"::Subcontracting);
      PurchLine.CALCSUMS("Quantity Invoiced");
      EXIT(PurchLine."Quantity Invoiced");
    END;

    PROCEDURE GetCorrectedSubcontractingQuantity@1100525005(PurchHeader@1100528500 : Record 38) : Decimal;
    VAR
      PurchLine@1100528501 : Record 39;
    BEGIN
      //**4PS
      PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine.SETRANGE("Document No.",PurchHeader."No.");
      PurchLine.SETRANGE("Order Correction Line",TRUE);
      PurchLine.SETRANGE("Cost Type", PurchLine."Cost Type"::Subcontracting);
      PurchLine.CALCSUMS(Quantity);
      EXIT(PurchLine.Quantity);
    END;

    PROCEDURE GetExtraReceiptsSubcontractingQuantity@1100525004(PurchHeader@1100528500 : Record 38) : Decimal;
    VAR
      PurchLine@1100528501 : Record 39;
    BEGIN
      //**4PS
      PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine.SETRANGE("Document No.",PurchHeader."No.");
      PurchLine.SETRANGE("Extra Receipt Line",TRUE);
      PurchLine.SETRANGE("Cost Type", PurchLine."Cost Type"::Subcontracting);
      PurchLine.CALCSUMS(Quantity);
      EXIT(PurchLine.Quantity);
    END;

    BEGIN
    END.
  }
}

