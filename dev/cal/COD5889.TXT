OBJECT Codeunit 5889 Phys. Invt. Tracking Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.01;
  }
  PROPERTIES
  {
    Permissions=TableData 337=rimd,
                TableData 5884=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      CreateReservEntry@1001 : Codeunit 99000830;

    [External]
    PROCEDURE SuggestUseTrackingLines@1000(Item@1000 : Record 27) : Boolean;
    VAR
      ItemTrackingCode@1001 : Record 6502;
    BEGIN
      IF Item."Item Tracking Code" = '' THEN
        EXIT(FALSE);

      ItemTrackingCode.GET(Item."Item Tracking Code");

      EXIT(
        ItemTrackingCode."SN Specific Tracking" OR
        ItemTrackingCode."SN Pos. Adjmt. Inb. Tracking" OR
        ItemTrackingCode."SN Pos. Adjmt. Outb. Tracking" OR
        ItemTrackingCode."SN Neg. Adjmt. Inb. Tracking" OR
        ItemTrackingCode."SN Neg. Adjmt. Outb. Tracking" OR
        ItemTrackingCode."Lot Specific Tracking" OR
        ItemTrackingCode."Lot Pos. Adjmt. Inb. Tracking" OR
        ItemTrackingCode."Lot Pos. Adjmt. Outb. Tracking" OR
        ItemTrackingCode."Lot Neg. Adjmt. Inb. Tracking" OR
        ItemTrackingCode."Lot Neg. Adjmt. Outb. Tracking"
        );
    END;

    [External]
    PROCEDURE GetTrackingNosFromWhse@1001(Item@1000 : Record 27) : Boolean;
    VAR
      ItemTrackingCode@1001 : Record 6502;
    BEGIN
      IF Item."Item Tracking Code" = '' THEN
        EXIT(FALSE);

      ItemTrackingCode.GET(Item."Item Tracking Code");

      IF (ItemTrackingCode."SN Specific Tracking" AND ItemTrackingCode."SN Warehouse Tracking") OR
         (ItemTrackingCode."Lot Specific Tracking" AND ItemTrackingCode."Lot Warehouse Tracking")
      THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    [External]
    PROCEDURE LocationIsBinMandatory@1002(LocationCode@1000 : Code[20]) : Boolean;
    VAR
      Location@1001 : Record 14;
    BEGIN
      IF LocationCode = '' THEN
        EXIT(FALSE);

      Location.GET(LocationCode);
      EXIT(Location."Bin Mandatory");
    END;

    [External]
    PROCEDURE TransferResEntryToItemJnlLine@1003(VAR PhysInvtOrderLine@1000 : Record 5876;VAR ItemJnlLine@1001 : Record 83;Qty@1002 : Decimal;Positive@1003 : Boolean);
    VAR
      ReservEntry@1004 : Record 337;
    BEGIN
      // Transfer all Reserve Entry, connected by a PhysInvtOrderLine, to an ItemJnlLine bevor posting the PhysInvtOrderLine

      IF Qty = 0 THEN
        EXIT;

      ItemJnlLine.TESTFIELD("Item No.",PhysInvtOrderLine."Item No.");
      ItemJnlLine.TESTFIELD("Variant Code",PhysInvtOrderLine."Variant Code");
      ItemJnlLine.TESTFIELD("Location Code",PhysInvtOrderLine."Location Code");
      ItemJnlLine.TESTFIELD("Bin Code",PhysInvtOrderLine."Bin Code");

      ReservEntry.RESET;
      ReservEntry.SETCURRENTKEY(
        "Source Type","Source Subtype","Source ID",
        "Source Batch Name","Source Prod. Order Line",
        "Source Ref. No.");
      ReservEntry.SETRANGE("Source Type",DATABASE::"Phys. Invt. Order Line");
      ReservEntry.SETRANGE("Source Subtype",0);
      ReservEntry.SETRANGE("Source ID",PhysInvtOrderLine."Document No.");
      ReservEntry.SETRANGE("Source Batch Name",'');
      ReservEntry.SETRANGE("Source Prod. Order Line",0);
      ReservEntry.SETRANGE("Source Ref. No.",PhysInvtOrderLine."Line No.");
      ReservEntry.SETRANGE(Positive,Positive);
      IF ReservEntry.FIND('-') THEN
        REPEAT
          ReservEntry.TESTFIELD("Reservation Status",ReservEntry."Reservation Status"::Prospect);

          ReservEntry.TESTFIELD("Item No.",PhysInvtOrderLine."Item No.");
          ReservEntry.TESTFIELD("Variant Code",PhysInvtOrderLine."Variant Code");
          ReservEntry.TESTFIELD("Location Code",PhysInvtOrderLine."Location Code");
          ReservEntry."New Serial No." := ReservEntry."Serial No.";
          ReservEntry."New Lot No." := ReservEntry."Lot No.";
          OnTransferResEntryToItemJnlLineOnBeforeTransfer(ReservEntry,PhysInvtOrderLine);

          Qty :=
            CreateReservEntry.TransferReservEntry(
              DATABASE::"Item Journal Line",
              ItemJnlLine."Entry Type",
              ItemJnlLine."Journal Template Name",
              ItemJnlLine."Journal Batch Name",
              0,
              ItemJnlLine."Line No.",
              ItemJnlLine."Qty. per Unit of Measure",
              ReservEntry,
              Qty);
        UNTIL (ReservEntry.NEXT = 0) OR (Qty = 0);
    END;

    [Integration]
    LOCAL PROCEDURE OnTransferResEntryToItemJnlLineOnBeforeTransfer@1(VAR ReservationEntry@1000 : Record 337;PhysInvtOrderLine@1001 : Record 5876);
    BEGIN
    END;

    BEGIN
    END.
  }
}

