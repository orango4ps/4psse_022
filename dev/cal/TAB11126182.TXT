OBJECT Table 11126182 Ref. Payment - Exported
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVFI9.00.00.45834 (32000002),4PSSE.FI;
  }
  PROPERTIES
  {
    CaptionML=ENU=Ref. Payment - Exported;
    LookupPageID=Page11126184;
    DrillDownPageID=Page11126184;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Integer       ;CaptionML=[ENU=No.;
                                                              NOR=Nr;
                                                              SVE=Nr] }
    { 2   ;   ;Vendor No.          ;Code20        ;TableRelation=Vendor.No.;
                                                   OnValidate=BEGIN
                                                                IF "Vendor No." <> '' THEN BEGIN
                                                                  IF (xRec."Vendor No." <> '') AND (xRec."Vendor No." <> "Vendor No.") AND ("Entry No." <> 0) THEN
                                                                    IF CONFIRM(ChangeVendorNoQst) THEN
                                                                      VALIDATE("Entry No.",0)
                                                                    ELSE
                                                                      ERROR('');
                                                                  Vend.GET("Vendor No.");
                                                                  Description := COPYSTR(Vend.Name,1,MAXSTRLEN(Description));
                                                                  "Vendor Account" := Vend."Preferred Bank Account Code";
                                                                  VALIDATE("Vendor Account");
                                                                  Vend.CheckBlockedVendOnJnls(Vend,1,FALSE);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Vendor No.;
                                                              NOR=Leverand›rnr.;
                                                              SVE=Leverant”rsnr] }
    { 3   ;   ;Description         ;Text30        ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 4   ;   ;Payment Account     ;Code20        ;TableRelation="Bank Account".No. WHERE (Country/Region Code=FILTER(''|FI));
                                                   OnValidate=BEGIN
                                                                SetDefaultTypes;
                                                              END;

                                                   CaptionML=ENU=Payment Account }
    { 5   ;   ;Due Date            ;Date          ;CaptionML=[ENU=Due Date;
                                                              NOR=Forfallsdato;
                                                              SVE=FÂ”rfallodatum] }
    { 6   ;   ;Payment Date        ;Date          ;OnValidate=BEGIN
                                                                IF "Payment Date" < WORKDATE THEN
                                                                  ERROR(Text1090002,FIELDCAPTION("Payment Date"),WORKDATE);
                                                              END;

                                                   CaptionML=[ENU=Payment Date;
                                                              NOR=Betalingsdato;
                                                              SVE=Betalningsdatum] }
    { 7   ;   ;Document Type       ;Option        ;CaptionML=[ENU=Document Type;
                                                              NOR=Dokumenttype;
                                                              SVE=Dokumenttyp];
                                                   OptionCaptionML=[ENU=" ,Invoice,Credit Memo";
                                                                    NOR=" ,Faktura,Kreditnota";
                                                                    SVE=" ,Faktura,Kreditnota"];
                                                   OptionString=[ ,Invoice,Credit Memo];
                                                   Editable=No }
    { 8   ;   ;Document No.        ;Code20        ;OnValidate=BEGIN
                                                                TESTFIELD("Entry No.",0);
                                                              END;

                                                   CaptionML=[ENU=Document No.;
                                                              NOR=Dokumentnr.;
                                                              SVE=Verifikationsnr] }
    { 9   ;   ;Currency Code       ;Code10        ;TableRelation=Currency.Code;
                                                   OnValidate=BEGIN
                                                                IF "Currency Code" <> '' THEN BEGIN
                                                                  GetCurrency;
                                                                  IF ("Currency Code" <> xRec."Currency Code") OR
                                                                     ("Posting Date" <> xRec."Posting Date") OR
                                                                     (CurrFieldNo = FIELDNO("Currency Code")) OR
                                                                     ("Currency Factor" = 0)
                                                                  THEN
                                                                    "Currency Factor" := CurrExchRate.ExchangeRate(0,'',"Posting Date","Currency Code",TRUE);
                                                                END ELSE
                                                                  "Currency Factor" := 0;
                                                                VALIDATE("Currency Factor");
                                                              END;

                                                   CaptionML=[ENU=Currency Code;
                                                              NOR=Valutakode;
                                                              SVE=Valutakod] }
    { 10  ;   ;Amount              ;Decimal       ;OnValidate=BEGIN
                                                                GetCurrency;
                                                                IF "Currency Code" = '' THEN
                                                                  "Amount (LCY)" := Amount
                                                                ELSE
                                                                  "Amount (LCY)" := ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        0,'',"Posting Date","Currency Code",
                                                                        Amount,"Currency Factor",TRUE));

                                                                Amount := ROUND(Amount,Currency."Amount Rounding Precision");
                                                              END;

                                                   CaptionML=[ENU=Amount;
                                                              NOR=Bel›p;
                                                              SVE=Belopp] }
    { 11  ;   ;Amount (LCY)        ;Decimal       ;OnValidate=BEGIN
                                                                IF "Currency Code" = '' THEN BEGIN
                                                                  Amount := "Amount (LCY)";
                                                                  VALIDATE(Amount);
                                                                END ELSE
                                                                  IF CheckFixedCurrency THEN
                                                                    Amount := ROUND(
                                                                        CurrExchRate.ExchangeAmtLCYToFCY(
                                                                          0,'',"Posting Date","Currency Code",
                                                                          "Amount (LCY)","Currency Factor",TRUE),
                                                                        Currency."Amount Rounding Precision")
                                                                  ELSE BEGIN
                                                                    TESTFIELD("Amount (LCY)");
                                                                    TESTFIELD(Amount);
                                                                    "Currency Factor" := Amount / "Amount (LCY)";
                                                                  END;
                                                              END;

                                                   CaptionML=[ENU=Amount (LCY);
                                                              NOR=Bel›p (NOK);
                                                              SVE=Belopp (BVA)] }
    { 12  ;   ;Vendor Account      ;Code20        ;TableRelation="Vendor Bank Account".Code WHERE (Vendor No.=FIELD(Vendor No.));
                                                   OnValidate=VAR
                                                                CompanyInfo@1090000 : Record 79;
                                                              BEGIN
                                                                "Foreign Payment" := FALSE;
                                                                "Foreign Payment Method" := '';
                                                                "Foreign Banks Service Fee" := '';

                                                                IF "Vendor Account" <> '' THEN BEGIN
                                                                  TESTFIELD("Vendor No.");
                                                                  VendBankAcc.GET("Vendor No.","Vendor Account");
                                                                  "SEPA Payment" := VendBankAcc."SEPA Payment";
                                                                  CompanyInfo.GET;
                                                                  IF NOT (VendBankAcc."Country/Region Code" IN ['',CompanyInfo."Country/Region Code"]) THEN BEGIN
                                                                    "Foreign Payment" := TRUE;
                                                                    SetDefaultTypes;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Vendor Account }
    { 13  ;   ;Message Type        ;Option        ;InitValue=Reference No.;
                                                   OnValidate=BEGIN
                                                                UpdateRemittanceInfo;
                                                              END;

                                                   CaptionML=[ENU=Message Type;
                                                              NOR=Meldingstype;
                                                              SVE=Meddelandetyp];
                                                   OptionCaptionML=ENU=Reference No.,Invoice Information,Message,Long Message,Tax Message;
                                                   OptionString=Reference No.,Invoice Information,Message,Long Message,Tax Message }
    { 14  ;   ;Invoice Message     ;Text128       ;CaptionML=ENU=Invoice Message;
                                                   Description=250->128 }
    { 15  ;   ;Applies-to ID       ;Code50        ;CaptionML=[ENU=Applies-to ID;
                                                              NOR=Utlignings-ID;
                                                              SVE=Koppla till ID] }
    { 16  ;   ;External Document No.;Code35       ;CaptionML=[ENU=External Document No.;
                                                              NOR=Eksternt dokumentnr.;
                                                              SVE=Externt verifikationsnr] }
    { 17  ;   ;Batch Code          ;Code35        ;CaptionML=ENU=Batch Code }
    { 18  ;   ;Transferred         ;Boolean       ;InitValue=No;
                                                   CaptionML=ENU=Transferred }
    { 19  ;   ;Transfer Date       ;Date          ;CaptionML=[ENU=Transfer Date;
                                                              NOR=Overf›ringsdato;
                                                              SVE=™verf”ringsdatum] }
    { 20  ;   ;Transfer Time       ;Time          ;CaptionML=ENU=Transfer Time }
    { 21  ;   ;Foreign Payment     ;Boolean       ;CaptionML=ENU=Foreign Payment;
                                                   Editable=No }
    { 22  ;   ;Posting Date        ;Date          ;CaptionML=[ENU=Posting Date;
                                                              NOR=Bokf›ringsdato;
                                                              SVE=Bokf”ringsdatum] }
    { 23  ;   ;Foreign Payment Method;Code1       ;TableRelation="Foreign Payment Types".Code WHERE (Code Type=CONST(Payment Method));
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Foreign Payment Method }
    { 24  ;   ;Foreign Banks Service Fee;Code1    ;TableRelation="Foreign Payment Types".Code WHERE (Code Type=CONST(Service Fee));
                                                   CaptionML=ENU=Foreign Banks Service Fee }
    { 25  ;   ;Entry No.           ;Integer       ;TableRelation="Vendor Ledger Entry"."Entry No." WHERE (Vendor No.=FIELD(Vendor No.),
                                                                                                          Open=CONST(Yes));
                                                   OnValidate=BEGIN
                                                                IF "Entry No." = 0 THEN BEGIN
                                                                  ClearVendLedgerEntryRelatedFieds;
                                                                  EXIT;
                                                                END;
                                                                VendLedgEntry.GET("Entry No.");
                                                                "Document No." := VendLedgEntry."Document No.";
                                                                IF NOT InsertConfirmed THEN BEGIN
                                                                  INIT;
                                                                  VALIDATE("Vendor No.",xRec."Vendor No.");
                                                                  "Payment Account" := xRec."Payment Account";
                                                                  EXIT;
                                                                END;

                                                                VALIDATE("Vendor No.",VendLedgEntry."Vendor No.");

                                                                IF VendLedgEntry."Document Type" = VendLedgEntry."Document Type"::"Credit Memo" THEN BEGIN
                                                                  VALIDATE("Message Type","Message Type"::Message);
                                                                  "Invoice Message" := VendLedgEntry."External Document No.";
                                                                END ELSE BEGIN
                                                                  VALIDATE("Message Type",VendLedgEntry."Message Type");
                                                                  "Invoice Message" := VendLedgEntry."Invoice Message";
                                                                END;
                                                                //"Invoice Message 2" := VendLedgEntry."Invoice Message 2";

                                                                "Posting Date" := VendLedgEntry."Posting Date";
                                                                "External Document No." := VendLedgEntry."External Document No.";
                                                                "Currency Code" := VendLedgEntry."Currency Code";

                                                                VendLedgEntry.CALCFIELDS("Remaining Amount","Remaining Amt. (LCY)");
                                                                IF (VendLedgEntry."Pmt. Discount Date" >= WORKDATE) AND UsePaymentDisc THEN BEGIN
                                                                  IF VendLedgEntry."Original Pmt. Disc. Possible" = 0 THEN
                                                                    "Payment Date" := GetAdjustedPaymentDate(VendLedgEntry."Payment Date")
                                                                  ELSE
                                                                    "Payment Date" := VendLedgEntry."Pmt. Discount Date";

                                                                  Amount := -(VendLedgEntry."Remaining Amount" - VendLedgEntry."Remaining Pmt. Disc. Possible");
                                                                  IF VendLedgEntry."Currency Code" = '' THEN
                                                                    "Amount (LCY)" := -(VendLedgEntry."Remaining Amt. (LCY)" - VendLedgEntry."Original Pmt. Disc. Possible")
                                                                  ELSE
                                                                    "Amount (LCY)" :=
                                                                      -(VendLedgEntry."Remaining Amt. (LCY)" -
                                                                        ChangeExchangeRate.ExchangeAmtFCYToLCY(
                                                                          0,'',WORKDATE,VendLedgEntry."Currency Code",
                                                                          VendLedgEntry."Original Pmt. Disc. Possible",
                                                                          VendLedgEntry."Adjusted Currency Factor",TRUE));
                                                                END ELSE BEGIN
                                                                  "Payment Date" := GetAdjustedPaymentDate(VendLedgEntry."Payment Date");

                                                                  Amount := -VendLedgEntry."Remaining Amount";
                                                                  "Amount (LCY)" := -VendLedgEntry."Remaining Amt. (LCY)";
                                                                END;

                                                                CASE VendLedgEntry."Document Type" OF
                                                                  VendLedgEntry."Document Type"::Invoice:
                                                                    BEGIN
                                                                      "Document Type" := "Document Type"::Invoice;
                                                                      "Due Date" := VendLedgEntry."Payment Date";
                                                                    END;
                                                                  VendLedgEntry."Document Type"::"Credit Memo":
                                                                    BEGIN
                                                                      "Document Type" := "Document Type"::"Credit Memo";
                                                                      "Due Date" := 0D;
                                                                      "Payment Date" := 0D;
                                                                      "Payment Account" := '';
                                                                    END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Entry No.;
                                                              NOR=Transaksjonsnr.;
                                                              SVE=L”pnr] }
    { 26  ;   ;Applied Payments    ;Boolean       ;CaptionML=ENU=Applied Payments }
    { 27  ;   ;Exchange Rate       ;Decimal       ;CaptionML=[ENU=Exchange Rate;
                                                              NOR=Exchange Rate;
                                                              SVE=V„xlingskurs] }
    { 28  ;   ;Currency Factor     ;Decimal       ;OnValidate=BEGIN
                                                                IF ("Currency Code" = '') AND ("Currency Factor" <> 0) THEN
                                                                  FIELDERROR("Currency Factor",STRSUBSTNO(Text1090001,FIELDCAPTION("Currency Code")));
                                                                VALIDATE(Amount);
                                                              END;

                                                   CaptionML=[ENU=Currency Factor;
                                                              NOR=Valutafaktor;
                                                              SVE=Valutafaktor];
                                                   DecimalPlaces=0:15;
                                                   MinValue=0;
                                                   Editable=No }
    { 29  ;   ;Posted to G/L       ;Boolean       ;CaptionML=[ENU=Posted to G/L;
                                                              NOR=Bokf›rt i Finans;
                                                              SVE=Bokf”rd i redovisning];
                                                   Editable=No }
    { 30  ;   ;Type                ;Option        ;CaptionML=[ENU=Type;
                                                              NOR=Radtype;
                                                              SVE=Radtyp];
                                                   OptionCaptionML=ENU=Payment,Detail,Message;
                                                   OptionString=Payment,Detail,Message }
    { 31  ;   ;Affiliated to Line  ;Integer       ;CaptionML=ENU=Affiliated to Line }
    { 33  ;   ;Picked to Journal   ;Boolean       ;CaptionML=ENU=Picked to Journal }
    { 34  ;   ;Payment Execution Date;Date        ;CaptionML=ENU=Payment Execution Date }
    { 35  ;   ;File Name           ;Text250       ;CaptionML=[ENU=File Name;
                                                              NOR=Filnavn;
                                                              SVE=Filnamn] }
    { 36  ;   ;SEPA Payment        ;Boolean       ;CaptionML=[ENU=SEPA Payment;
                                                              SVE=SEPA betalning] }
    { 37  ;   ;Remittance Information;Option      ;CaptionML=ENU=Remittance Information;
                                                   OptionCaptionML=ENU=Structured,Unstructured;
                                                   OptionString=Structured,Unstructured }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Transferred,Applied Payments,Foreign Payment,SEPA Payment;
                                                   SumIndexFields=Amount,Amount (LCY) }
    {    ;Payment Date,Vendor No.,Entry No.       ;SumIndexFields=Amount,Amount (LCY) }
    {    ;Payment Account,Payment Date             }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Vend@1090001 : Record 23;
      VendLedgEntry@1090002 : Record 25;
      VendBankAcc@1090004 : Record 288;
      Currency@1090006 : Record 4;
      CurrExchRate@1090007 : Record 330;
      ChangeExchangeRate@1090014 : Record 330;
      RefFileSetup@1090016 : Record 11126180;
      CurrencyCode@1090013 : Code[10];
      Text1090000@1090015 : TextConst 'ENU="Transactions have been transferred to bank file.\Do you wish to re-send this transaction?\Vendor No. =%1 Document No. = %2"';
      Text1090001@1090017 : TextConst 'ENU=cannot be specified without %1.';
      Text1090002@1090018 : TextConst 'ENU=%1 cannot be earlier than %2.';
      UsePaymentDisc@1090000 : Boolean;
      ChangeVendorNoQst@1090003 : TextConst 'ENU=If you change the vendor, the existing link to the vendor ledger entry will be deleted. \Are you sure that you want to change the vendor?';

    LOCAL PROCEDURE GetCurrency@3();
    BEGIN
      CurrencyCode := "Currency Code";

      IF CurrencyCode = '' THEN BEGIN
        CLEAR(Currency);
        Currency.InitRoundingPrecision
      END ELSE
        IF CurrencyCode <> Currency.Code THEN BEGIN
          Currency.GET(CurrencyCode);
          Currency.TESTFIELD("Amount Rounding Precision");
        END;
    END;

    PROCEDURE SetDefaultTypes@1090000();
    BEGIN
      IF ("Foreign Payment Method" = '') OR ("Foreign Banks Service Fee" = '') THEN
        IF ("Payment Account" <> '') AND "Foreign Payment" THEN BEGIN
          RefFileSetup.GET("Payment Account");
          IF "Foreign Payment Method" = '' THEN
            "Foreign Payment Method" := RefFileSetup."Default Payment Method";
          IF "Foreign Banks Service Fee" = '' THEN
            "Foreign Banks Service Fee" := RefFileSetup."Default Service Fee Code";
        END;
    END;

    PROCEDURE CheckFixedCurrency@12() : Boolean;
    VAR
      CurrExchRate@1000 : Record 330;
    BEGIN
      CurrExchRate.SETRANGE("Currency Code","Currency Code");
      CurrExchRate.SETRANGE("Starting Date",0D,"Posting Date");

      IF NOT CurrExchRate.FINDLAST THEN
        EXIT(FALSE);

      IF CurrExchRate."Relational Currency Code" = '' THEN
        EXIT(
          CurrExchRate."Fix Exchange Rate Amount" =
          CurrExchRate."Fix Exchange Rate Amount"::Both);

      IF CurrExchRate."Fix Exchange Rate Amount" <>
         CurrExchRate."Fix Exchange Rate Amount"::Both
      THEN
        EXIT(FALSE);

      CurrExchRate.SETRANGE("Currency Code",CurrExchRate."Relational Currency Code");
      IF CurrExchRate.FINDLAST THEN
        EXIT(
          CurrExchRate."Fix Exchange Rate Amount" =
          CurrExchRate."Fix Exchange Rate Amount"::Both);

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE ClearVendLedgerEntryRelatedFieds@1090009();
    BEGIN
      "Payment Account" := '';
      "Due Date" := 0D;
      "Payment Date" := 0D;
      "Document No." := '';
      "Document Type" := "Document Type"::" ";
      "Currency Code" := '';
      "Currency Factor" := 0;
      Amount := 0;
      "Amount (LCY)" := 0;
      "Vendor Account" := '';
      "Message Type" := "Message Type"::"Reference No.";
      "Invoice Message" := '';
      //"Invoice Message 2" := '';
      "Applies-to ID" := '';
      "External Document No." := '';
      "Posting Date" := 0D;
      "Foreign Payment Method" := '';
      "Foreign Banks Service Fee" := '';
    END;

    PROCEDURE UpdateLines@1090019();
    BEGIN
      IF FINDSET(TRUE) THEN
        REPEAT
          VendLedgEntry.GET("Entry No.");
          IF VendLedgEntry.Open THEN BEGIN
            VendLedgEntry.CALCFIELDS("Remaining Amt. (LCY)");
            VALIDATE(Amount,-VendLedgEntry."Remaining Amt. (LCY)");
            VALIDATE("Amount (LCY)",-VendLedgEntry."Remaining Amt. (LCY)");
            MODIFY;
          END ELSE
            DELETE;
        UNTIL NEXT = 0;
    END;

    PROCEDURE UpdateRemittanceInfo@1090006();
    BEGIN
      CASE "Message Type" OF
        "Message Type"::"Reference No.",
        "Message Type"::"Tax Message":
          "Remittance Information" := "Remittance Information"::Structured;
        "Message Type"::"Invoice Information",
        "Message Type"::Message,
        "Message Type"::"Long Message":
          "Remittance Information" := "Remittance Information"::Unstructured;
      END;
    END;

    PROCEDURE ExistsNotTransferred@1090004() : Boolean;
    VAR
      RefPaymentExported@1090000 : Record 11126182;
    BEGIN
      RefPaymentExported.SETRANGE("Entry No.","Entry No.");
      RefPaymentExported.SETRANGE(Transferred,FALSE);
      EXIT(NOT RefPaymentExported.ISEMPTY);
    END;

    LOCAL PROCEDURE InsertConfirmed@1090002() : Boolean;
    VAR
      RefPaymentExported@1090000 : Record 11126182;
    BEGIN
      RefPaymentExported.SETRANGE("Entry No.","Entry No.");
      RefPaymentExported.SETRANGE(Transferred,TRUE);
      RefPaymentExported.SETRANGE("Posted to G/L",FALSE);
      IF NOT RefPaymentExported.ISEMPTY THEN
        IF NOT CONFIRM(Text1090000,FALSE,"Vendor No.","Document No.") THEN
          EXIT(FALSE);
      EXIT(TRUE);
    END;

    PROCEDURE SetUsePaymentDisc@1090001(NewUsePaymentDisc@1090000 : Boolean);
    BEGIN
      UsePaymentDisc := NewUsePaymentDisc;
    END;

    PROCEDURE GetLastLineNo@1090003() : Integer;
    VAR
      RefPaymentExported@1090000 : Record 11126182;
    BEGIN
      RefPaymentExported.RESET;
      IF RefPaymentExported.FINDLAST THEN
        EXIT(RefPaymentExported."No.");
    END;

    LOCAL PROCEDURE GetAdjustedPaymentDate@1090005(PaymentDate@1090000 : Date) : Date;
    BEGIN
      IF PaymentDate >= TODAY THEN
        EXIT(PaymentDate);
      EXIT(WORKDATE);
    END;

    PROCEDURE MarkAffiliatedAsTransferred@1090007();
    VAR
      RefPaymentExported@1090000 : Record 11126182;
    BEGIN
      IF ("Entry No." = 0) AND ("Affiliated to Line" <> 0) THEN BEGIN
        RefPaymentExported.SETFILTER("No.",'<>%1',"No.");
        RefPaymentExported.SETRANGE("Affiliated to Line","Affiliated to Line");
        RefPaymentExported.MODIFYALL(Transferred,Transferred);
      END;
    END;

    PROCEDURE ExportToFile@1090008();
    VAR
      GenJnlLine@1090000 : Record 81;
      BankAccount@1090001 : Record 270;
    BEGIN
      BankAccount.GET("Payment Account");
      GenJnlLine."Bal. Account No." := BankAccount."No.";
      GenJnlLine.SETRANGE("Journal Template Name",'');
      GenJnlLine.SETRANGE("Journal Batch Name",'');
      CODEUNIT.RUN(BankAccount.GetPaymentExportCodeunitID,GenJnlLine);
    END;

    BEGIN
    {
      NAVFI: removed field "Invoice Message 2", reduced size of "Invoice Message" from 250 -> 128, due to full table-definition
    }
    END.
  }
}

