OBJECT Codeunit 11128065 VP File BG Foreign SISU
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=PE8.03 (12048862),4PSSE;
  }
  PROPERTIES
  {
    TableNo=11128079;
    OnRun=VAR
            GiroType@1100570003 : Record 11128061;
          BEGIN
            CLEAR(gTotalAmountLCY);
            CLEAR(gNoOfPayments);

            GiroType.GET(Rec."Giro Type Code");
            GiroType.TESTFIELD(Filename);
            gToFile := GiroType.Filename;

            GiroType.TESTFIELD("Bank Giro No.");
            IF NOT gVPMnm.SumCheck10Control(GiroType."Bank Giro No.") THEN
              ERROR(PEB002);

            OpenFile;

            gVPMnm.SetGiroType(GiroType);

            CreateFileBGForeign(Rec);

            CloseFile(Rec);
          END;

  }
  CODE
  {
    VAR
      gFile@1100570021 : File;
      gVPMnm@1100570002 : Codeunit 11128061;
      PEB001@1100570020 : TextConst 'ENU=The length for %1 is %2 long, %3 characters are maximum;NOR=Lengden p† %1 er %2 tegn. Maksimumslengden er %3 tegn;SVE=L„ngden p† %1 „r %2 tecken. Maximil„ngden „r %3 tecken';
      PEB002@1100570001 : TextConst 'ENU=Bank Giro No. for the Company is not correct!;NOR=Selskapets Bankgironummer er feilaktig!;SVE=F”retagets bankgironummer „r felaktigt!';
      PEB003@1100570018 : TextConst 'ENU=Code for Bank of Sweden  is missing for %1 %2, Document No. %3 Vendor %4 %5;NOR=Riksbankskode mangler for %1 %2, Dokumentnr %3 og leverand›r %4 %5;SVE=Riksbankskod saknas f”r %1 %2, dokumentnr %3 och leverant”r %4 %5';
      PEB004@1100570019 : TextConst 'ENU=%1 must not be %2 for %3, %4, %5;SVE=%1 f†r inte vara %2 f”r %3, %4, %5';
      PEB005@1100570022 : TextConst 'ENU=Maximum lenght for %1 is 30 characters.;NOR=Maksimal lengde for %1 er 30 tegn.;SVE=Max.l„ngd f”r %1 „r 30 tecken.';
      gTotalAmountLCY@1100570000 : Decimal;
      gFromFile@1100570004 : Text;
      gToFile@1100570006 : Text;
      gNoOfPayments@12047958 : Integer;
      PEB006@12047959 : TextConst 'ENU=All payments are not included in the file, check the currency;SVE=Alla betalningar kom inte med i filen, kontrollera valutorna';

    PROCEDURE CreateFileBGForeign@1070012(pPack@1070000 : Record 11128079);
    VAR
      VendLedgerEntry@1070001 : Record 25;
      VendNo@1070002 : Code[20];
      AmountCurrAccount@1070003 : Text[1];
      PmtChargePayedBy@1070004 : Integer;
      DueDate@1070007 : Date;
      CurrencyCode@1070008 : Code[10];
      PaymMethodTxt@1070009 : Text[1];
      Vendor@1100570000 : Record 23;
      Currency@1100570001 : Record 4;
      GiroType@1100570005 : Record 11128061;
      VPPackEntry@1100570003 : Record 11128063;
      VendorBankAccount@1100570002 : Record 288;
      AmountToPay@1100570006 : Decimal;
      AmountToPayLCY@1100570007 : Decimal;
      TypeOfLine@1100570008 : Text;
      TotalAmount@1100570009 : Decimal;
      CompanyInfo@1100570010 : Record 79;
      "IBAN/BankAccountNo"@12047958 : Text;
    BEGIN
      GiroType.GET(pPack."Giro Type Code");
      GiroType.TESTFIELD("Bank Giro No.");
      IF NOT gVPMnm.SumCheck10Control(GiroType."Bank Giro No.") THEN
        ERROR(PEB002);

      CompanyInfo.GET;
      CompanyInfo.TESTFIELD(Name);
      CompanyInfo.TESTFIELD(Address);
      CLEAR(TotalAmount);

      WITH VendLedgerEntry DO BEGIN
        VPPackEntry.RESET;
        VPPackEntry.SETRANGE("Pack Entry No.",pPack."Entry No.");
        IF NOT VPPackEntry.FINDSET THEN
          EXIT;

        WriteFile(80,'0' +
           gVPMnm.NFL(gVPMnm.ClearText(GiroType."Bank Giro No."),8) +
           gVPMnm.Date2Text(TODAY,6) +
           gVPMnm.TFR(CompanyInfo.Name,22) +
           gVPMnm.TFR(gVPMnm.FillField(CompanyInfo."Address 2",CompanyInfo.Address),35) +
           gVPMnm.BLK(6) +
           '20');

        REPEAT
          gVPMnm.CheckCustomerPaymentAllowed(pPack,VPPackEntry);
          gNoOfPayments += 1;
          GET(VPPackEntry."Ledger Entry No.");  // Get Vendor Leadger Entry
          TESTFIELD(Open,TRUE);
          VendorBankAccount.GET(VPPackEntry."No.",VPPackEntry."Bank Account Code");
          CALCFIELDS("Remaining Amount","Remaining Amt. (LCY)");

          Vendor.GET("Vendor No.");
          IF gVPMnm.IsLocalCurr("Currency Code") THEN BEGIN
            CLEAR(Currency);
            CurrencyCode := gVPMnm.GetSEKEURCurrencyCode;
          END ELSE BEGIN
            Currency.GET("Currency Code");
            CurrencyCode := "Currency Code";
          END;

          IF VPPackEntry."Code for Bank of Sweden" = '' THEN
            ERROR(PEB003,
                  "Document Type","External Document No.","Document No.",Vendor."No.",Vendor.Name);

          VendNo := gVPMnm.GetVendGiroNo(Vendor,Currency);

          IF VPPackEntry."Currency Account" THEN
            AmountCurrAccount := '1'
          ELSE
            AmountCurrAccount := '0';

          PmtChargePayedBy := VendorBankAccount."Payment Charge Paid by";

          IF "Due Date" < TODAY THEN BEGIN
            DueDate := TODAY;
            "Due Date" := TODAY;
          END ELSE
            DueDate := "Due Date";

          AmountToPay := gVPMnm.CalcVendAmountToPay(VendLedgerEntry);
          AmountToPayLCY := gVPMnm.CalcVendAmountToPayLCY(VendLedgerEntry);

          IF NOT (VendorBankAccount."Payment Type" IN [VendorBankAccount."Payment Type"::Check,VendorBankAccount."Payment Type"::Account]) THEN
            ERROR(PEB004,VendorBankAccount.FIELDCAPTION("Payment Type"),
                        VendorBankAccount."Payment Type",
                        VendorBankAccount.TABLECAPTION,
                        VendorBankAccount."Vendor No.",
                        VendorBankAccount.Code);

          IF "Remaining Amount" > 0 THEN // Credit Memo
            TypeOfLine := '5'
          ELSE                           // Invoice
            TypeOfLine := '6';

          TotalAmount +=  AmountToPay;
          gTotalAmountLCY += AmountToPayLCY;

          WriteFile(80,'2' +
             gVPMnm.NFL(VendNo,7) +
             gVPMnm.TFR(Vendor.Name,30) +
             gVPMnm.TFR(Vendor.Address,33));

          WriteFile(80,'3' +
             gVPMnm.NFL(VendNo,7) +
             gVPMnm.TFR(Vendor."Address 2",30) +
             gVPMnm.TFR(Vendor."Post Code" + gVPMnm.BLK(1) + Vendor.City,33) +
             gVPMnm.BLK(2) +
             gVPMnm.TFR(AmountCurrAccount,1) +
             gVPMnm.TFR(Vendor."Country/Region Code",2) +
             gVPMnm.BLK(1) +
             gVPMnm.NFL(FORMAT(PmtChargePayedBy),1) +
             gVPMnm.NFL(FORMAT(VendorBankAccount."Payment Type",0,2),1) +
             gVPMnm.NFL(FORMAT(VendorBankAccount."Payment Method",0,2),1));

          "IBAN/BankAccountNo" := gVPMnm."GetIBAN/BankccountNo"(VendorBankAccount);

          IF STRLEN(VendorBankAccount.IBAN) > 30 THEN
            ERROR(PEB005,VendorBankAccount.IBAN);

          WriteFile(80,'4' +
             gVPMnm.NFL(VendNo,7) +
             gVPMnm.TFR(VendorBankAccount."SWIFT Code",12) +
             gVPMnm.TFR("IBAN/BankAccountNo",30) +
             gVPMnm.TFR(VendorBankAccount."Bank Branch No.",30));

          // Invoice and Credit Memo
          WriteFile(80,gVPMnm.TFR(TypeOfLine,1) +
             gVPMnm.NFL(VendNo,7) +
             gVPMnm.TFR("External Document No.",25) +
             gVPMnm.NFL(gVPMnm.Dec2TextBGForeign(-AmountToPayLCY),11) +
             gVPMnm.BLK(10) +
             gVPMnm.TFR(CurrencyCode,3) +
             gVPMnm.Date2Text(DueDate,6) +
             gVPMnm.BLK(2) +
             gVPMnm.NFL(gVPMnm.Dec2TextBGForeign(-AmountToPay),13) +
             gVPMnm.BLK(1) +
             '0');

          WriteFile(80,'7' +
             gVPMnm.NFL(VendNo,7) +
             gVPMnm.TFR(VPPackEntry."Code for Bank of Sweden",3));


        UNTIL VPPackEntry.NEXT = 0;
        WriteFile(80,'9' +
           gVPMnm.NFL(gVPMnm.ClearText(GiroType."Bank Giro No."),8)+
           gVPMnm.NFL(gVPMnm.Dec2TextBGForeign(-gTotalAmountLCY),12) +
           gVPMnm.BLK(42) +
           gVPMnm.NFL(gVPMnm.Dec2TextBGForeign(-TotalAmount),15));
      END;
    END;

    PROCEDURE WriteFile@1070040(pLength@1070000 : Integer;pText@1070001 : Text[250]);
    VAR
      SEUtils@1100285100 : Codeunit 11128000;
    BEGIN
      IF STRLEN(pText) > pLength THEN
        ERROR(PEB001,pText,STRLEN(pText),pLength);

      pText := SEUtils.Ascii2Ansi(pText);
      gFile.WRITE(PADSTR(pText,pLength));
    END;

    PROCEDURE OpenFile@1070005();
    VAR
      FileMgt@1100570001 : Codeunit 419;
    BEGIN
      gFile.TEXTMODE(TRUE);
      gFile.WRITEMODE(TRUE);
      gFromFile := FileMgt.ServerTempFileName('.txt');
      gFile.CREATE(gFromFile);
    END;

    PROCEDURE CloseFile@1070009(pPack@1070000 : Record 11128079);
    VAR
      FileMgt@1100570000 : Codeunit 419;
      VPPackEntry@12047958 : Record 11128063;
      Handled@12047960 : Boolean;
    BEGIN
      VPPackEntry.RESET;
      VPPackEntry.SETRANGE("Pack Entry No.",pPack."Entry No.");
      IF VPPackEntry.COUNT <> gNoOfPayments THEN
        ERROR(PEB006);

      pPack.LOCKTABLE;
      pPack.FIND;
      pPack."Total Amount (LCY)" := -gTotalAmountLCY;
      pPack.MODIFY;
      gFile.CLOSE;

      OnBeforeSaveFile(pPack,gFromFile,Handled);

      IF NOT Handled THEN BEGIN
        IF NOT FileMgt.CanRunDotNetOnClient THEN
          FileMgt.DownloadHandler(gFromFile,'','','',gVPMnm.SetFileName(pPack,gToFile))
        ELSE
          FileMgt.DownloadToFile(gFromFile,gVPMnm.SetFileName(pPack,gToFile));
      END;

      IF EXISTS(gFromFile) THEN
        ERASE(gFromFile);
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeSaveFile@12047959(Pack@12047961 : Record 11128079;ServerFilename@12047958 : Text;VAR Handled@12047960 : Boolean);
    BEGIN
    END;

    BEGIN
    {
      PEB *** Begin ***
      PEB0091 Banking
      PEB
      PEB *** End ***

      171129 ITERO.DL export files as ASCII instead of defalut ANSI
      190212 ORANGO.DL upgrade to PE8.08
    }
    END.
  }
}

