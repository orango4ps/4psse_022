OBJECT Page 9853 Effective Permissions By Set
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=By Permission Set;
               NOR=Etter tillatelsessett;
               SVE=Efter beh”righetsupps„ttning];
    InsertAllowed=No;
    DeleteAllowed=No;
    SourceTable=Table9852;
    PageType=ListPart;
    SourceTableTemporary=Yes;
    OnInit=VAR
             PermissionManager@1000 : Codeunit 9002;
           BEGIN
             CurrentUserCanManageUser := PermissionManager.CanManageUsersOnTenant(USERSECURITYID);
             IsSaaS := PermissionManager.SoftwareAsAService;
           END;

    OnOpenPage=BEGIN
                 SETCURRENTKEY(Source,Type);
               END;

    OnAfterGetRecord=BEGIN
                       IsPermissionSetEditable := (Type = Type::"User-Defined") AND CurrentUserCanManageUser;
                       RefreshDisplayTexts;
                     END;

    ActionList=ACTIONS
    {
      { 3       ;    ;ActionContainer;
                      ActionContainerType=ActionItems }
    }
  }
  CONTROLS
  {
    { 1   ;    ;Container ;
                ContainerType=ContentArea }

    { 5   ;1   ;Group     ;
                GroupType=Repeater }

    { 11  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the permission set through which the user has the permission selected above.;
                           NOR=Angir tillatelsessettet som brukeren har f†tt den valgte tillatelsen ovenfor fra.;
                           SVE=Anger beh”righetsupps„ttningen genom vilken anv„ndaren har den beh”righet som valts ovan.];
                ApplicationArea=#All;
                SourceExpr="Permission Set";
                Editable=FALSE;
                OnDrillDown=VAR
                              TenantPermission@1000 : Record 2000000166;
                            BEGIN
                              IF Source = Source::Entitlement THEN
                                EXIT;
                              OpenPermissionsPage(TRUE);
                              IF Type = Type::"User-Defined" THEN BEGIN
                                TenantPermission.GET(GetAppID,"Permission Set",CurrObjectType,CurrObjectID);
                                "Read Permission" := TenantPermission."Read Permission";
                                "Insert Permission" := TenantPermission."Insert Permission";
                                "Modify Permission" := TenantPermission."Modify Permission";
                                "Delete Permission" := TenantPermission."Delete Permission";
                                "Execute Permission" := TenantPermission."Execute Permission";
                                MODIFY;
                                RefreshDisplayTexts;
                              END;
                            END;
                             }

    { 2   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the origin of the permission through which the user has the permission selected above. NOTE: Rows of source Entitlement originate from the subscription plan. The permission values of the entitlement overrule values in other permission sets if they have a higher ranking. In those cases, the permission value is in brackets to indicate that it is not effective.;
                           NOR=Angir opprinnelsen til tillatelsen som brukeren har f†tt den valgte tillatelsen ovenfor fra. MERK: Rader for kilderettighet er hentet fra abonnementsplanen. Tillatelsesverdiene for rettigheten overstyrer verdier i andre tillatelsessett hvis de har en h›yere rangering. I slike tilfeller er tillatelsesverdien i parenteser for † angi at den ikke er gyldig.;
                           SVE=Anger ursprunget f”r den beh”righet genom vilken anv„ndaren har beh”righeten som valts ovan. Obs! Rader i k„llans ber„ttigande h„mtas fr†n prenumerationsplanen. Beh”righetsv„rdena f”r ber„ttigandet †sidos„tter v„rdena i andra beh”righetsupps„ttningar om de har en h”gre rangordning. I s† fall anges beh”righetsv„rdet inom parentes, vilket visar att det inte „r g„llande.];
                ApplicationArea=#All;
                SourceExpr=Source;
                Visible=IsSaaS;
                Enabled=FALSE;
                Style=Strong;
                StyleExpr=Source = Source::Entitlement }

    { 4   ;2   ;Field     ;
                ToolTipML=[ENU="Specifies the type of the permission set through which the user has the permission selected above. NOTE: Only permission sets of type User-Defined can be edited. ";
                           NOR="Angir typen tillatelsessett som brukeren har f†tt den valgte tillatelsen ovenfor fra. MERK: Bare tillatelsessett av typen Brukerdefinert kan redigeres. ";
                           SVE="Anger typen av beh”righetsupps„ttningen genom vilken anv„ndaren har beh”righeten som valt ovan. Obs! Endast beh”righetsupps„ttningar av typen Anv„ndardefinierade kan redigeras. "];
                ApplicationArea=#All;
                SourceExpr=Type;
                Enabled=FALSE }

    { 6   ;2   ;Field     ;
                CaptionML=[ENU=Read Permission;
                           NOR=Lesetillatelse;
                           SVE=L„sbeh”righet];
                ToolTipML=[ENU="Specifies the user's read permission with this permission set. ";
                           NOR="Angir brukerens lesetillatelse med dette tillatelsessettet. ";
                           SVE="Anger anv„ndarens l„sbeh”righet med den h„r beh”righetsupps„ttningen. "];
                ApplicationArea=#All;
                SourceExpr=ReadTxt;
                TableRelation="Option Lookup Buffer"."Option Caption" WHERE (Lookup Type=CONST(Permissions));
                Enabled=IsPermissionSetEditable AND IsTableData;
                LookupPageID=Option Lookup List;
                Style=Subordinate;
                StyleExpr=ReadIgnored;
                OnValidate=VAR
                             TenantPermission@1000 : Record 2000000166;
                           BEGIN
                             OnPermissionValidate(TenantPermission.FIELDNO("Read Permission"),ReadTxt,FIELDCAPTION("Read Permission"));
                           END;
                            }

    { 7   ;2   ;Field     ;
                CaptionML=[ENU=Insert Permission;
                           NOR=Innsettingstillatelse;
                           SVE=Infogandebeh”righet];
                ToolTipML=[ENU=Specifies the user's insert permission with this permission set.;
                           NOR=Angir brukerens innsettingstillatelse med dette tillatelsessettet.;
                           SVE=Anger anv„ndarens infogningsbeh”righet med den h„r beh”righetsupps„ttningen.];
                ApplicationArea=#All;
                SourceExpr=InsertTxt;
                TableRelation="Option Lookup Buffer"."Option Caption" WHERE (Lookup Type=CONST(Permissions));
                Enabled=IsPermissionSetEditable AND IsTableData;
                LookupPageID=Option Lookup List;
                Style=Subordinate;
                StyleExpr=InsertIgnored;
                OnValidate=VAR
                             TenantPermission@1000 : Record 2000000166;
                           BEGIN
                             OnPermissionValidate(TenantPermission.FIELDNO("Insert Permission"),InsertTxt,FIELDCAPTION("Insert Permission"));
                           END;
                            }

    { 8   ;2   ;Field     ;
                CaptionML=[ENU=Modify Permission;
                           NOR=Endringstillatelse;
                           SVE=Žndringsbeh”righet];
                ToolTipML=[ENU=Specifies the user's modify permission with this permission set.;
                           NOR=Angir brukerens endringstillatelse med dette tillatelsessettet.;
                           SVE=Anger anv„ndarens „ndringsbeh”righet med den h„r beh”righetsupps„ttningen.];
                ApplicationArea=#All;
                SourceExpr=ModifyTxt;
                TableRelation="Option Lookup Buffer"."Option Caption" WHERE (Lookup Type=CONST(Permissions));
                Enabled=IsPermissionSetEditable AND IsTableData;
                LookupPageID=Option Lookup List;
                Style=Subordinate;
                StyleExpr=ModifyIgnored;
                OnValidate=VAR
                             TenantPermission@1000 : Record 2000000166;
                           BEGIN
                             OnPermissionValidate(TenantPermission.FIELDNO("Modify Permission"),ModifyTxt,FIELDCAPTION("Modify Permission"));
                           END;
                            }

    { 9   ;2   ;Field     ;
                CaptionML=[ENU=Delete Permission;
                           NOR=Slettetillatelse;
                           SVE=Borttagningsbeh”righet];
                ToolTipML=[ENU=Specifies the user's delete permission with this permission set.;
                           NOR=Angir brukerens slettetillatelse med dette tillatelsessettet.;
                           SVE=Anger anv„ndarens borttagningsbeh”righet med den h„r beh”righetsupps„ttningen.];
                ApplicationArea=#All;
                SourceExpr=DeleteTxt;
                TableRelation="Option Lookup Buffer"."Option Caption" WHERE (Lookup Type=CONST(Permissions));
                Enabled=IsPermissionSetEditable AND IsTableData;
                LookupPageID=Option Lookup List;
                Style=Subordinate;
                StyleExpr=DeleteIgnored;
                OnValidate=VAR
                             TenantPermission@1000 : Record 2000000166;
                           BEGIN
                             OnPermissionValidate(TenantPermission.FIELDNO("Delete Permission"),DeleteTxt,FIELDCAPTION("Delete Permission"));
                           END;
                            }

    { 10  ;2   ;Field     ;
                CaptionML=[ENU=Execute Permission;
                           NOR=Oppdateringstillatelse;
                           SVE=K”rningsbeh”righet];
                ToolTipML=[ENU=Specifies the user's execute permission with this permission set.;
                           NOR=Angir brukerens kj›ringstillatelse med dette tillatelsessettet.;
                           SVE=Anger anv„ndarens k”rningsbeh”righet med den h„r beh”righetsupps„ttningen.];
                ApplicationArea=#All;
                SourceExpr=ExecuteTxt;
                TableRelation="Option Lookup Buffer"."Option Caption" WHERE (Lookup Type=CONST(Permissions));
                Enabled=IsPermissionSetEditable AND (NOT IsTableData);
                LookupPageID=Option Lookup List;
                Style=Subordinate;
                StyleExpr=ExecuteIgnored;
                OnValidate=VAR
                             TenantPermission@1000 : Record 2000000166;
                           BEGIN
                             OnPermissionValidate(TenantPermission.FIELDNO("Execute Permission"),ExecuteTxt,FIELDCAPTION("Execute Permission"));
                           END;
                            }

  }
  CODE
  {
    VAR
      EntitlementPermissionBuffer@1007 : Record 9852;
      ReadTxt@1000 : Text;
      InsertTxt@1001 : Text;
      ModifyTxt@1002 : Text;
      DeleteTxt@1003 : Text;
      ExecuteTxt@1004 : Text;
      IsPermissionSetEditable@1005 : Boolean;
      CurrentUserCanManageUser@1006 : Boolean;
      IsSaaS@1008 : Boolean;
      IsTableData@1009 : Boolean;
      CurrObjectType@1010 : Option;
      CurrObjectID@1011 : Integer;
      BadlyFormattedTextErr@1012 : TextConst '@@@="%1 = The entered value for the permission field;%2 = the caption of the permission field";ENU=Your entry of ''%1'' is not an acceptable value for ''%2''.;NOR=Oppf›ringen %1 er ikke en godkjent verdi for %2.;SVE=%1 kan inte accepteras som v„rde f”r %2.';
      CurrUserID@1018 : GUID;
      ReadIgnored@1013 : Boolean INDATASET;
      InsertIgnored@1014 : Boolean INDATASET;
      ModifyIgnored@1015 : Boolean INDATASET;
      DeleteIgnored@1016 : Boolean INDATASET;
      ExecuteIgnored@1017 : Boolean INDATASET;

    LOCAL PROCEDURE RefreshDisplayTexts@7();
    VAR
      PermissionManager@1000 : Codeunit 9002;
    BEGIN
      ReadIgnored := PermissionManager.IsFirstPermissionHigherThanSecond("Read Permission",
          EntitlementPermissionBuffer."Read Permission");
      InsertIgnored := PermissionManager.IsFirstPermissionHigherThanSecond("Insert Permission",
          EntitlementPermissionBuffer."Insert Permission");
      ModifyIgnored := PermissionManager.IsFirstPermissionHigherThanSecond("Modify Permission",
          EntitlementPermissionBuffer."Modify Permission");
      DeleteIgnored := PermissionManager.IsFirstPermissionHigherThanSecond("Delete Permission",
          EntitlementPermissionBuffer."Delete Permission");
      ExecuteIgnored := PermissionManager.IsFirstPermissionHigherThanSecond("Execute Permission",
          EntitlementPermissionBuffer."Execute Permission");

      ReadTxt := FormatPermissionOption("Read Permission",ReadIgnored);
      InsertTxt := FormatPermissionOption("Insert Permission",InsertIgnored);
      ModifyTxt := FormatPermissionOption("Modify Permission",ModifyIgnored);
      DeleteTxt := FormatPermissionOption("Delete Permission",DeleteIgnored);
      ExecuteTxt := FormatPermissionOption("Execute Permission",ExecuteIgnored);

      CurrPage.UPDATE(FALSE);
    END;

    [External]
    PROCEDURE SetRecordAndRefresh@1(PassedUserID@1005 : GUID;PassedCompanyName@1004 : Text[50];CurrentObjectType@1001 : Option;CurrentObjectID@1002 : Integer);
    VAR
      TempPermissionBuffer@1000 : TEMPORARY Record 9852;
      Permission@1003 : Record 2000000005;
      EffectivePermissionsMgt@1006 : Codeunit 9852;
    BEGIN
      EffectivePermissionsMgt.PopulatePermissionBuffer(TempPermissionBuffer,PassedUserID,PassedCompanyName,
        CurrentObjectType,CurrentObjectID);

      DELETEALL;

      IF TempPermissionBuffer.FINDSET THEN
        REPEAT
          Rec := TempPermissionBuffer;
          INSERT;
          IF TempPermissionBuffer.Source = TempPermissionBuffer.Source::Entitlement THEN
            EntitlementPermissionBuffer := TempPermissionBuffer;
        UNTIL TempPermissionBuffer.NEXT = 0;

      CurrObjectType := CurrentObjectType;
      CurrObjectID := CurrentObjectID;
      CurrUserID := PassedUserID;
      IsTableData := CurrObjectType = Permission."Object Type"::"Table Data";

      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE FormatPermissionOption@4(PermissionOption@1001 : Option;AddParenthesis@1000 : Boolean) : Text;
    VAR
      PermissionBuffer@1002 : Record 9852;
    BEGIN
      PermissionBuffer."Read Permission" := PermissionOption;
      IF AddParenthesis THEN
        EXIT(STRSUBSTNO('(%1)',PermissionBuffer."Read Permission"));
      EXIT(FORMAT(PermissionBuffer."Read Permission"));
    END;

    LOCAL PROCEDURE GetPermissionOptionFromCaptionText@8(Text@1000 : Text) : Integer;
    VAR
      TypeHelper@1003 : Codeunit 10;
    BEGIN
      IF STRPOS(Text,'(') = 1 THEN BEGIN
        Text := COPYSTR(Text,2);
        Text := COPYSTR(Text,1,STRPOS(Text,')') - 1);
      END;
      EXIT(TypeHelper.GetOptionNoFromTableField(Text,DATABASE::"Permission Buffer",FIELDNO("Read Permission")));
    END;

    LOCAL PROCEDURE OnPermissionValidate@6(FieldNum@1000 : Integer;NewValue@1002 : Text;FieldCaption@1004 : Text);
    VAR
      TenantPermission@1005 : Record 2000000166;
      EffectivePermissionsMgt@1003 : Codeunit 9852;
      NewPermOption@1001 : Integer;
    BEGIN
      NewPermOption := GetPermissionOptionFromCaptionText(NewValue);
      IF NewPermOption < 0 THEN
        ERROR(BadlyFormattedTextErr,NewValue,FieldCaption);
      CASE FieldNum OF
        TenantPermission.FIELDNO("Read Permission"):
          "Read Permission" := NewPermOption;
        TenantPermission.FIELDNO("Insert Permission"):
          "Insert Permission" := NewPermOption;
        TenantPermission.FIELDNO("Modify Permission"):
          "Modify Permission" := NewPermOption;
        TenantPermission.FIELDNO("Delete Permission"):
          "Delete Permission" := NewPermOption;
        TenantPermission.FIELDNO("Execute Permission"):
          "Execute Permission" := NewPermOption;
      END;
      EffectivePermissionsMgt.ModifyPermission(FieldNum,Rec,CurrObjectType,CurrObjectID,CurrUserID);
      MODIFY;
      RefreshDisplayTexts;
    END;

    BEGIN
    END.
  }
}

