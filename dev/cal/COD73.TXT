OBJECT Codeunit 73 Purch.-Explode BOM
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.01,4PS14.00;
  }
  PROPERTIES
  {
    TableNo=39;
    OnRun=BEGIN
            TESTFIELD(Type,Type::Item);
            TESTFIELD("Quantity Received",0);
            TESTFIELD("Return Qty. Shipped",0);
            TESTFIELD("Reserved Qty. (Base)",0);
            IF "Sales Order No." <> '' THEN
              ERROR(
                Text000,
                "Sales Order No.");

            PurchHeader.GET("Document Type","Document No.");
            PurchHeader.TESTFIELD(Status,PurchHeader.Status::Open);
            FromBOMComp.SETRANGE("Parent Item No.","No.");
            NoOfBOMComp := FromBOMComp.COUNT;
            IF NoOfBOMComp = 0 THEN
              ERROR(
                Text001,
                "No.");

            Selection := STRMENU(Text005,2);
            IF Selection = 0 THEN
              EXIT;

            ToPurchLine := Rec;
            ToPurchLine.INIT;
            ToPurchLine.Description := Description;
            ToPurchLine."Description 2" := "Description 2";

            //**4PS.sn
            ToPurchLine."Modified by" := USERID; //DP00469
            ToPurchLine."Last Date Modified" := TODAY;//DP00469
            //**4PS.en
            ToPurchLine.MODIFY;

            IF TransferExtendedText.PurchCheckIfAnyExtText(ToPurchLine,FALSE) THEN
              TransferExtendedText.InsertPurchExtText(ToPurchLine);

            ExplodeBOMCompLines(Rec);
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=The BOM cannot be exploded on the purchase lines because it is associated with sales order %1.;NOR=Stykklisten kan ikke utfoldes p† bestillingslinjene fordi den er knyttet til ordre %1.;SVE=Strukturen p† ink”psraden kan inte expanderas eftersom den „r kopplad till f”rs.order %1.';
      Text001@1001 : TextConst 'ENU=Item %1 is not a BOM.;NOR=Varen %1 er ikke en stykkliste.;SVE=Artikel %1 „r inte en struktur.';
      Text003@1002 : TextConst 'ENU=There is not enough space to explode the BOM.;NOR=Det er ikke nok plass til † utfolde stykklisten.;SVE=Det finns inte tillr„ckligt med utrymme f”r att expandera strukturen.';
      Text004@1003 : TextConst 'ENU=You cannot purchase resources. Resource %1 was not transferred.;NOR=Du kan ikke kj›pe ressurser. Ressurs %1 ble ikke overf›rt.;SVE=Du kan inte k”pa in resurser. Resurs %1 har inte blivit ”verf”rd.';
      Text005@1004 : TextConst 'ENU=&Copy dimensions from BOM,&Retrieve dimensions from components;NOR=&Kopier dimensjoner fra stykkliste,&Hent dimensjoner fra komponenter;SVE=&Kopiera dimensioner fr†n struktur,&H„mta dimensioner fr†n komponenter';
      ToPurchLine@1005 : Record 39;
      FromBOMComp@1006 : Record 90;
      PurchHeader@1007 : Record 38;
      ItemTranslation@1008 : Record 30;
      Item@1009 : Record 27;
      UOMMgt@1010 : Codeunit 5402;
      TransferExtendedText@1015 : Codeunit 378;
      LineSpacing@1011 : Integer;
      NextLineNo@1012 : Integer;
      NoOfBOMComp@1013 : Integer;
      Selection@1014 : Integer;

    LOCAL PROCEDURE ExplodeBOMCompLines@1(PurchLine@1000 : Record 39);
    VAR
      PreviousPurchLine@1001 : Record 39;
      InsertLinesBetween@1002 : Boolean;
      SkipComponent@1003 : Boolean;
    BEGIN
      WITH PurchLine DO BEGIN
        ToPurchLine.RESET;
        ToPurchLine.SETRANGE("Document Type","Document Type");
        ToPurchLine.SETRANGE("Document No.","Document No.");
        ToPurchLine := PurchLine;
        NextLineNo := "Line No.";
        InsertLinesBetween := FALSE;
        IF ToPurchLine.FIND('>') THEN
          IF ToPurchLine."Attached to Line No." = "Line No." THEN BEGIN
            ToPurchLine.SETRANGE("Attached to Line No.","Line No.");
            ToPurchLine.FINDLAST;
            ToPurchLine.SETRANGE("Attached to Line No.");
            NextLineNo := ToPurchLine."Line No.";
            InsertLinesBetween := ToPurchLine.FIND('>');
          END ELSE
            InsertLinesBetween := TRUE;
        IF InsertLinesBetween THEN
          LineSpacing := (ToPurchLine."Line No." - NextLineNo) DIV (1 + NoOfBOMComp)
        ELSE
          LineSpacing := 10000;
        IF LineSpacing = 0 THEN
          ERROR(Text003);

        FromBOMComp.FIND('-');
        REPEAT
          SkipComponent := FALSE;
          OnExplodeBOMCompLinesOnBeforeCreatePurchLine(PurchLine,FromBOMComp,SkipComponent);
          IF NOT SkipComponent THEN BEGIN
            ToPurchLine.INIT;
            NextLineNo := NextLineNo + LineSpacing;
            ToPurchLine."Line No." := NextLineNo;
            CASE FromBOMComp.Type OF
              FromBOMComp.Type::" ":
                ToPurchLine.Type := ToPurchLine.Type::" ";
              FromBOMComp.Type::Item:
                BEGIN
                  Item.GET(FromBOMComp."No.");
                  ToPurchLine.Type := ToPurchLine.Type::Item;
                  ToPurchLine.VALIDATE("No.",FromBOMComp."No.");
                  ToPurchLine.VALIDATE("Variant Code",FromBOMComp."Variant Code");
                  ToPurchLine.VALIDATE("Unit of Measure Code",FromBOMComp."Unit of Measure Code");
                  ToPurchLine."Qty. per Unit of Measure" := UOMMgt.GetQtyPerUnitOfMeasure(Item,ToPurchLine."Unit of Measure Code");
                  ToPurchLine.VALIDATE(
                    Quantity,
                    ROUND(
                      "Quantity (Base)" * FromBOMComp."Quantity per" *
                      UOMMgt.GetQtyPerUnitOfMeasure(
                        Item,ToPurchLine."Unit of Measure Code") / ToPurchLine."Qty. per Unit of Measure",
                      UOMMgt.QtyRndPrecision));
                END;
              FromBOMComp.Type::Resource:
                ToPurchLine.Type := 3; // Resource
            END;

            IF (FromBOMComp.Type <> FromBOMComp.Type::" ") AND
               (PurchHeader."Expected Receipt Date" <> "Expected Receipt Date")
            THEN
              ToPurchLine.VALIDATE("Expected Receipt Date","Expected Receipt Date");

            IF PurchHeader."Language Code" = '' THEN
              ToPurchLine.Description := FromBOMComp.Description
            ELSE
              IF NOT ItemTranslation.GET(FromBOMComp."No.",FromBOMComp."Variant Code",PurchHeader."Language Code") THEN
                ToPurchLine.Description := FromBOMComp.Description;

            OnBeforeInsertExplodedPurchLine(ToPurchLine,PurchLine,FromBOMComp);

            IF ToPurchLine.Type = 3 THEN // Resource
              MESSAGE(Text004,FromBOMComp."No.")
            ELSE
            //**4PS.sn
            BEGIN
              ToPurchLine."Input by" := USERID;
              ToPurchLine."Input Date" := TODAY;
            //**4PS.en
              ToPurchLine.INSERT;
            END; //**4PS.n

            IF Selection = 1 THEN BEGIN
              ToPurchLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
              ToPurchLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
              ToPurchLine."Dimension Set ID" := "Dimension Set ID";
              //**4PS.sn
              ToPurchLine."Modified by" := USERID;
              ToPurchLine."Last Date Modified" := TODAY;
              //**4PS.en
              ToPurchLine.MODIFY;
            END;

            IF PreviousPurchLine."Document No." <> '' THEN
              IF TransferExtendedText.PurchCheckIfAnyExtText(PreviousPurchLine,FALSE) THEN
                TransferExtendedText.InsertPurchExtText(PreviousPurchLine);

            PreviousPurchLine := ToPurchLine;
          END;
        UNTIL FromBOMComp.NEXT = 0;

        IF TransferExtendedText.PurchCheckIfAnyExtText(ToPurchLine,FALSE) THEN
          TransferExtendedText.InsertPurchExtText(ToPurchLine);
      END;
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInsertExplodedPurchLine@2(VAR ToPurchaseLine@1000 : Record 39;PurchaseLine@1001 : Record 39;FromBOMComp@1002 : Record 90);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnExplodeBOMCompLinesOnBeforeCreatePurchLine@3(PurchaseLine@1000 : Record 39;BOMComponent@1001 : Record 90;VAR IsAvailable@1002 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

