OBJECT Codeunit 353 Item Availability Forms Mgt
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.01,4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text012@1000 : TextConst '@@@="%1=FieldCaption, %2=OldDate, %3=NewDate";ENU=Do you want to change %1 from %2 to %3?;NOR=Vil du endre %1 fra %2 til %3?;SVE=Vill du „ndra %1 fr†n %2 till %3?';
      ItemAvailByBOMLevel@1003 : Page 5871;
      ForecastName@1001 : Code[10];
      AvailabilityType@1002 : 'Date,Variant,Location,Bin,Event,BOM';
      gCompany@1100525000 : Text[30];
      CalledFromAdvice@1100525001 : Boolean;

    LOCAL PROCEDURE CalcItemPlanningFields@13(VAR Item@1000 : Record 27;CalculateTransferQuantities@1002 : Boolean);
    VAR
      JobPlanningLine@1001 : Record 11020401;
    BEGIN
      WITH Item DO BEGIN
        INIT;
        CALCFIELDS(
          "Qty. on Purch. Order",
          "Qty. on Sales Order",
          "Qty. on Service Order",
          Inventory,
          "Net Change",
          "Scheduled Receipt (Qty.)",
          "Scheduled Need (Qty.)",
          "Planned Order Receipt (Qty.)",
          "FP Order Receipt (Qty.)",
          "Rel. Order Receipt (Qty.)",
          "Planned Order Release (Qty.)",
          "Purch. Req. Receipt (Qty.)",
          "Planning Issues (Qty.)",
          "Purch. Req. Release (Qty.)");

        IF JobPlanningLine.READPERMISSION THEN
          CALCFIELDS("Qty. on Job Order");
        CALCFIELDS(
          "Qty. on Assembly Order",
          "Qty. on Asm. Component",
          "Qty. on Purch. Return",
          "Qty. on Sales Return");
        IF CalculateTransferQuantities THEN
          CALCFIELDS(
            "Trans. Ord. Shipment (Qty.)",
            "Qty. in Transit",
            "Trans. Ord. Receipt (Qty.)");
        //**4PS.sn
        CALCFIELDS(
          "Qty. on Plant Order",
          "Qty. on Item Journal Project",
          "Qty. on Item Journal Service",
          "Qty. on Purch. Order (Inv.)",
          "Qty. on Purch. Order (Project)",
          "Qty. on Purch. Order (Service)",  //db, 25-07-14: C009041
          "Inventory for Projects");
        //**4PS.en

        OnAfterCalcItemPlanningFields(Item);
      END;
    END;

    [External]
    PROCEDURE CalculateNeed@5(VAR Item@1004 : Record 27;VAR GrossRequirement@1003 : Decimal;VAR PlannedOrderReceipt@1002 : Decimal;VAR ScheduledReceipt@1001 : Decimal;VAR PlannedOrderReleases@1000 : Decimal);
    VAR
      TransOrdShipmentQty@1005 : Decimal;
      QtyinTransit@1006 : Decimal;
      TransOrdReceiptQty@1007 : Decimal;
      ProjSetup@1100525000 : Record 315;
    BEGIN
      CalcItemPlanningFields(Item,TRUE);

      WITH Item DO BEGIN
        IF GETFILTER("Location Filter") = '' THEN BEGIN
          TransOrdShipmentQty := 0;
          QtyinTransit := 0;
          TransOrdReceiptQty := 0;
        END ELSE BEGIN
          TransOrdShipmentQty := "Trans. Ord. Shipment (Qty.)";
          QtyinTransit := "Qty. in Transit";
          TransOrdReceiptQty := "Trans. Ord. Receipt (Qty.)";
        END;
        GrossRequirement :=
          "Qty. on Sales Order" +
          "Qty. on Service Order" +
          "Qty. on Job Order" +
          "Scheduled Need (Qty.)" +
          TransOrdShipmentQty +
          "Planning Issues (Qty.)" +
          //**4PS.sn
          "Qty. on Plant Order" +
          "Qty. on Item Journal Project" +
          "Qty. on Item Journal Service" +
          //**4PS.en
          "Qty. on Asm. Component" +
          "Qty. on Purch. Return";
        PlannedOrderReceipt :=
          "Planned Order Receipt (Qty.)" +
          "Purch. Req. Receipt (Qty.)";
        ScheduledReceipt :=
          "FP Order Receipt (Qty.)" +
          "Rel. Order Receipt (Qty.)" +
          //"Qty. on Purch. Order" + //**4PS.o
          "Qty. on Purch. Order (Inv.)" + //**4PS.n
          QtyinTransit +
          TransOrdReceiptQty +
          "Qty. on Assembly Order" +
          "Qty. on Sales Return";
        PlannedOrderReleases :=
          "Planned Order Release (Qty.)" +
          "Purch. Req. Release (Qty.)";
        //**4PS.sn
        ProjSetup.GET;
        IF CalledFromAdvice THEN BEGIN  //db, 11-10-13: C000902
          IF ProjSetup."Inventory Calc. Advice Order" = ProjSetup."Inventory Calc. Advice Order"::"Planned-Purchase" THEN
            ScheduledReceipt :=  ScheduledReceipt -  Item."Qty. on Purch. Order (Inv.)";
        END;
        IF ProjSetup."Apply ProjMat for ReqLine" THEN  //db, 30-10-15
          GrossRequirement := GrossRequirement + QtyOnProjMatReqLines - "Qty. on Item Journal Project";
        //**4PS.en
      END;
      OnAfterCalculateNeed(Item,GrossRequirement,PlannedOrderReceipt,ScheduledReceipt,PlannedOrderReleases);
    END;

    LOCAL PROCEDURE CalcProjAvailableBalance@1(VAR Item@1000 : Record 27) : Decimal;
    VAR
      Item2@1005 : Record 27;
      GrossRequirement@1004 : Decimal;
      PlannedOrderReceipt@1003 : Decimal;
      ScheduledReceipt@1002 : Decimal;
      PlannedOrderReleases@1001 : Decimal;
    BEGIN
      Item2.COPY(Item);
      Item2.CHANGECOMPANY(gCompany); //**4PS.n
      Item2.SETRANGE("Date Filter",0D,Item.GETRANGEMAX("Date Filter"));
      CalculateNeed(Item2,GrossRequirement,PlannedOrderReceipt,ScheduledReceipt,PlannedOrderReleases);
      EXIT(Item2.Inventory + PlannedOrderReceipt + ScheduledReceipt - GrossRequirement);
    END;

    LOCAL PROCEDURE CalcProjAvailableBalance2@4(Inventory@1008 : Decimal;GrossRequirement@1007 : Decimal;PlannedOrderReceipt@1006 : Decimal;ScheduledReceipt@1005 : Decimal) : Decimal;
    BEGIN
      EXIT(Inventory + PlannedOrderReceipt + ScheduledReceipt - GrossRequirement);
    END;

    [External]
    PROCEDURE CalcAvailQuantities@14(VAR Item@1001 : Record 27;IsBalanceAtDate@1009 : Boolean;VAR GrossRequirement@1002 : Decimal;VAR PlannedOrderRcpt@1003 : Decimal;VAR ScheduledRcpt@1004 : Decimal;VAR PlannedOrderReleases@1005 : Decimal;VAR ProjAvailableBalance@1006 : Decimal;VAR ExpectedInventory@1007 : Decimal;VAR QtyAvailable@1008 : Decimal);
    VAR
      AvailableMgt@1000 : Codeunit 5400;
    BEGIN
      Item.CHANGECOMPANY(gCompany); //**4PS.n
      CalculateNeed(Item,GrossRequirement,PlannedOrderRcpt,ScheduledRcpt,PlannedOrderReleases);
      IF IsBalanceAtDate THEN
        ProjAvailableBalance :=
          CalcProjAvailableBalance2(Item.Inventory,GrossRequirement,PlannedOrderRcpt,ScheduledRcpt)
      ELSE
        ProjAvailableBalance := CalcProjAvailableBalance(Item);

      OnAfterCalculateProjAvailableBalance(Item,ProjAvailableBalance);

      ExpectedInventory := AvailableMgt.ExpectedQtyOnHand(Item,TRUE,0,QtyAvailable,DMY2DATE(31,12,9999));
    END;

    [External]
    PROCEDURE ShowItemLedgerEntries@10(VAR Item@1002 : Record 27;NetChange@1001 : Boolean);
    VAR
      ItemLedgEntry@1000 : Record 32;
    BEGIN
      ItemLedgEntry.CHANGECOMPANY(gCompany); //**4PS.n
      ItemLedgEntry.FindLinesWithItemToPlan(Item,NetChange);
      PAGE.RUN(0,ItemLedgEntry);
    END;

    [External]
    PROCEDURE ShowSalesLines@2(VAR Item@1001 : Record 27);
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      SalesLine.CHANGECOMPANY(gCompany); //**4PS.n
      SalesLine.FindLinesWithItemToPlan(Item,SalesLine."Document Type"::Order);
      PAGE.RUN(0,SalesLine);
    END;

    [External]
    PROCEDURE ShowServLines@9(VAR Item@1001 : Record 27);
    VAR
      ServLine@1000 : Record 5902;
    BEGIN
      ServLine.CHANGECOMPANY(gCompany); //**4PS.n
      ServLine.FindLinesWithItemToPlan(Item);
      PAGE.RUN(0,ServLine);
    END;

    [External]
    PROCEDURE ShowJobPlanningLines@12(VAR Item@1001 : Record 27);
    VAR
      JobPlanningLine@1000 : Record 11020401;
    BEGIN
      JobPlanningLine.CHANGECOMPANY(gCompany); //**4PS.n
      JobPlanningLine.FindLinesWithItemToPlan(Item);
      PAGE.RUN(0,JobPlanningLine);
    END;

    [External]
    PROCEDURE ShowPurchLines@3(VAR Item@1001 : Record 27);
    VAR
      PurchLine@1000 : Record 39;
    BEGIN
      PurchLine.CHANGECOMPANY(gCompany); //**4PS.n
      PurchLine.FindLinesWithItemToPlan(Item,PurchLine."Document Type"::Order);
      PAGE.RUN(0,PurchLine);
    END;

    [External]
    PROCEDURE ShowSchedReceipt@7(VAR Item@1001 : Record 27);
    VAR
      ProdOrderLine@1000 : Record 5406;
    BEGIN
      ProdOrderLine.CHANGECOMPANY(gCompany); //**4PS.n
      ProdOrderLine.FindLinesWithItemToPlan(Item,TRUE);
      PAGE.RUN(0,ProdOrderLine);
    END;

    [External]
    PROCEDURE ShowSchedNeed@8(VAR Item@1001 : Record 27);
    VAR
      ProdOrderComp@1000 : Record 5407;
    BEGIN
      ProdOrderComp.CHANGECOMPANY(gCompany); //**4PS.n
      ProdOrderComp.FindLinesWithItemToPlan(Item,TRUE);
      PAGE.RUN(0,ProdOrderComp);
    END;

    [External]
    PROCEDURE ShowTransLines@6(VAR Item@1002 : Record 27;What@1000 : Integer);
    VAR
      TransLine@1001 : Record 5741;
    BEGIN
      TransLine.CHANGECOMPANY(gCompany); //**4PS.n
      CASE What OF
        Item.FIELDNO("Trans. Ord. Shipment (Qty.)"):
          TransLine.FindLinesWithItemToPlan(Item,FALSE,FALSE);
        Item.FIELDNO("Qty. in Transit"),
        Item.FIELDNO("Trans. Ord. Receipt (Qty.)"):
          TransLine.FindLinesWithItemToPlan(Item,TRUE,FALSE);
      END;
      PAGE.RUN(0,TransLine);
    END;

    [External]
    PROCEDURE ShowAsmOrders@16(VAR Item@1001 : Record 27);
    VAR
      AssemblyHeader@1000 : Record 900;
    BEGIN
      AssemblyHeader.CHANGECOMPANY(gCompany); //**4PS.n
      AssemblyHeader.FindLinesWithItemToPlan(Item,AssemblyHeader."Document Type"::Order);
      PAGE.RUN(0,AssemblyHeader);
    END;

    [External]
    PROCEDURE ShowAsmCompLines@15(VAR Item@1001 : Record 27);
    VAR
      AssemblyLine@1000 : Record 901;
    BEGIN
      AssemblyLine.CHANGECOMPANY(gCompany); //**4PS.n
      AssemblyLine.FindLinesWithItemToPlan(Item,AssemblyLine."Document Type"::Order);
      PAGE.RUN(0,AssemblyLine);
    END;

    [External]
    PROCEDURE ShowItemAvailLineList@11(VAR Item@1002 : Record 27;What@1000 : Integer);
    VAR
      ItemCopy@1003 : Record 27;
      ItemAvailLineList@1001 : Page 99000902;
    BEGIN
      ItemCopy.COPY(Item);
      CalcItemPlanningFields(ItemCopy,ItemCopy.GETFILTER("Location Filter") <> '');
      ItemAvailLineList.SetCompany(gCompany); //**4PS.n
      ItemAvailLineList.Init(What,ItemCopy);
      ItemAvailLineList.RUNMODAL;
    END;

    [External]
    PROCEDURE ShowItemAvailFromItem@42(VAR Item@1004 : Record 27;AvailabilityType@1000 : 'Date,Variant,Location,Bin,Event,BOM');
    VAR
      NewDate@1006 : Date;
      NewVariantCode@1002 : Code[10];
      NewLocationCode@1001 : Code[10];
    BEGIN
      WITH Item DO BEGIN
        TESTFIELD("No.");

        OnBeforeShowItemAvailFromItem(Item);
        CASE AvailabilityType OF
          AvailabilityType::Date:
            ShowItemAvailByDate(Item,'',NewDate,NewDate);
          AvailabilityType::Variant:
            ShowItemAvailVariant(Item,'',NewVariantCode,NewVariantCode);
          AvailabilityType::Location:
            ShowItemAvailByLoc(Item,'',NewLocationCode,NewLocationCode);
          AvailabilityType::"Event":
            ShowItemAvailByEvent(Item,'',NewDate,NewDate,FALSE);
          AvailabilityType::BOM:
            ShowItemAvailByBOMLevel(Item,'',NewDate,NewDate);
        END;
      END;
    END;

    [External]
    PROCEDURE ShowItemAvailFromSalesLine@17(VAR SalesLine@1004 : Record 37;AvailabilityType@1000 : 'Date,Variant,Location,Bin,Event,BOM');
    VAR
      Item@1005 : Record 27;
      AsmHeader@1003 : Record 900;
      ItemCheckAvail@1007 : Codeunit 311;
      NewDate@1006 : Date;
      NewVariantCode@1002 : Code[10];
      NewLocationCode@1001 : Code[10];
    BEGIN
      WITH SalesLine DO BEGIN
        TESTFIELD(Type,Type::Item);
        TESTFIELD("No.");
        Item.RESET;
        Item.GET("No.");
        FilterItem(Item,"Location Code","Variant Code","Shipment Date");

        OnBeforeShowItemAvailFromSalesLine(Item,SalesLine);
        CASE AvailabilityType OF
          AvailabilityType::Date:
            IF ShowItemAvailByDate(Item,FIELDCAPTION("Shipment Date"),"Shipment Date",NewDate) THEN
              VALIDATE("Shipment Date",NewDate);
          AvailabilityType::Variant:
            IF ShowItemAvailVariant(Item,FIELDCAPTION("Variant Code"),"Variant Code",NewVariantCode) THEN BEGIN
              VALIDATE("Variant Code",NewVariantCode);
              ItemCheckAvail.SalesLineCheck(SalesLine);
            END;
          AvailabilityType::Location:
            IF ShowItemAvailByLoc(Item,FIELDCAPTION("Location Code"),"Location Code",NewLocationCode) THEN BEGIN
              VALIDATE("Location Code",NewLocationCode);
              ItemCheckAvail.SalesLineCheck(SalesLine);
            END;
          AvailabilityType::"Event":
            IF ShowItemAvailByEvent(Item,FIELDCAPTION("Shipment Date"),"Shipment Date",NewDate,FALSE) THEN
              VALIDATE("Shipment Date",NewDate);
          AvailabilityType::BOM:
            IF AsmToOrderExists(AsmHeader) THEN
              ShowItemAvailFromAsmHeader(AsmHeader,AvailabilityType)
            ELSE
              IF ShowItemAvailByBOMLevel(Item,FIELDCAPTION("Shipment Date"),"Shipment Date",NewDate) THEN
                VALIDATE("Shipment Date",NewDate);
        END;
      END;
    END;

    [External]
    PROCEDURE ShowItemAvailFromPurchLine@22(VAR PurchLine@1004 : Record 39;AvailabilityType@1000 : 'Date,Variant,Location,Bin,Event,BOM');
    VAR
      Item@1005 : Record 27;
      NewDate@1010 : Date;
      NewVariantCode@1007 : Code[10];
      NewLocationCode@1006 : Code[10];
    BEGIN
      WITH PurchLine DO BEGIN
        TESTFIELD(Type,Type::Item);
        TESTFIELD("No.");
        Item.RESET;
        Item.GET("No.");
        FilterItem(Item,"Location Code","Variant Code","Expected Receipt Date");

        OnBeforeShowItemAvailFromPurchLine(Item,PurchLine);
        CASE AvailabilityType OF
          AvailabilityType::Date:
            IF ShowItemAvailByDate(Item,FIELDCAPTION("Expected Receipt Date"),"Expected Receipt Date",NewDate) THEN
              VALIDATE("Expected Receipt Date",NewDate);
          AvailabilityType::Variant:
            IF ShowItemAvailVariant(Item,FIELDCAPTION("Variant Code"),"Variant Code",NewVariantCode) THEN
              VALIDATE("Variant Code",NewVariantCode);
          AvailabilityType::Location:
            IF ShowItemAvailByLoc(Item,FIELDCAPTION("Location Code"),"Location Code",NewLocationCode) THEN
              VALIDATE("Location Code",NewLocationCode);
          AvailabilityType::"Event":
            IF ShowItemAvailByEvent(Item,FIELDCAPTION("Expected Receipt Date"),"Expected Receipt Date",NewDate,FALSE) THEN
              VALIDATE("Expected Receipt Date",NewDate);
          AvailabilityType::BOM:
            IF ShowItemAvailByBOMLevel(Item,FIELDCAPTION("Expected Receipt Date"),"Expected Receipt Date",NewDate) THEN
              VALIDATE("Expected Receipt Date",NewDate);
        END;
      END;
    END;

    [External]
    PROCEDURE ShowItemAvailFromReqLine@18(VAR ReqLine@1007 : Record 246;AvailabilityType@1005 : 'Date,Variant,Location,Bin,Event,BOM');
    VAR
      Item@1008 : Record 27;
      NewDate@1003 : Date;
      NewVariantCode@1001 : Code[10];
      NewLocationCode@1000 : Code[10];
    BEGIN
      WITH ReqLine DO BEGIN
        TESTFIELD(Type,Type::Item);
        TESTFIELD("No.");
        Item.RESET;
        Item.GET("No.");
        FilterItem(Item,"Location Code","Variant Code","Due Date");

        OnBeforeShowItemAvailFromReqLine(Item,ReqLine);
        CASE AvailabilityType OF
          AvailabilityType::Date:
            IF ShowItemAvailByDate(Item,FIELDCAPTION("Due Date"),"Due Date",NewDate) THEN
              VALIDATE("Due Date",NewDate);
          AvailabilityType::Variant:
            IF ShowItemAvailVariant(Item,FIELDCAPTION("Variant Code"),"Variant Code",NewVariantCode) THEN
              VALIDATE("Variant Code",NewVariantCode);
          AvailabilityType::Location:
            IF ShowItemAvailByLoc(Item,FIELDCAPTION("Location Code"),"Location Code",NewLocationCode) THEN
              VALIDATE("Location Code",NewLocationCode);
          AvailabilityType::"Event":
            BEGIN
              Item.SETRANGE("Date Filter");

              ForecastName := '';
              FindCurrForecastName(ForecastName);

              IF ShowItemAvailByEvent(Item,FIELDCAPTION("Due Date"),"Due Date",NewDate,TRUE) THEN
                VALIDATE("Due Date",NewDate);
            END;
          AvailabilityType::BOM:
            IF ShowItemAvailByBOMLevel(Item,FIELDCAPTION("Due Date"),"Due Date",NewDate) THEN
              VALIDATE("Due Date",NewDate);
        END;
      END;
    END;

    [External]
    PROCEDURE ShowItemAvailFromProdOrderLine@19(VAR ProdOrderLine@1005 : Record 5406;AvailabilityType@1003 : 'Date,Variant,Location,Bin,Event,BOM');
    VAR
      Item@1007 : Record 27;
      NewDate@1006 : Date;
      NewVariantCode@1002 : Code[10];
      NewLocationCode@1001 : Code[10];
    BEGIN
      WITH ProdOrderLine DO BEGIN
        TESTFIELD("Item No.");
        Item.RESET;
        Item.GET("Item No.");
        FilterItem(Item,"Location Code","Variant Code","Due Date");

        OnBeforeShowItemAvailFromProdOrderLine(Item,ProdOrderLine);
        CASE AvailabilityType OF
          AvailabilityType::Date:
            IF ShowItemAvailByDate(Item,FIELDCAPTION("Due Date"),"Due Date",NewDate) THEN
              VALIDATE("Due Date",NewDate);
          AvailabilityType::Variant:
            IF ShowItemAvailVariant(Item,FIELDCAPTION("Variant Code"),"Variant Code",NewVariantCode) THEN
              VALIDATE("Variant Code",NewVariantCode);
          AvailabilityType::Location:
            IF ShowItemAvailByLoc(Item,FIELDCAPTION("Location Code"),"Location Code",NewLocationCode) THEN
              VALIDATE("Location Code",NewLocationCode);
          AvailabilityType::"Event":
            IF ShowItemAvailByEvent(Item,FIELDCAPTION("Due Date"),"Due Date",NewDate,FALSE) THEN
              VALIDATE("Due Date",NewDate);
          AvailabilityType::BOM:
            IF ShowCustomProdItemAvailByBOMLevel(ProdOrderLine,FIELDCAPTION("Due Date"),"Due Date",NewDate) THEN
              VALIDATE("Due Date",NewDate);
        END;
      END;
    END;

    [External]
    PROCEDURE ShowItemAvailFromProdOrderComp@26(VAR ProdOrderComp@1005 : Record 5407;AvailabilityType@1003 : 'Date,Variant,Location,Bin,Event,BOM');
    VAR
      Item@1007 : Record 27;
      NewDate@1006 : Date;
      NewVariantCode@1002 : Code[10];
      NewLocationCode@1001 : Code[10];
    BEGIN
      WITH ProdOrderComp DO BEGIN
        TESTFIELD("Item No.");
        Item.RESET;
        Item.GET("Item No.");
        FilterItem(Item,"Location Code","Variant Code","Due Date");

        OnBeforeShowItemAvailFromProdOrderComp(Item,ProdOrderComp);
        CASE AvailabilityType OF
          AvailabilityType::Date:
            IF ShowItemAvailByDate(Item,FIELDCAPTION("Due Date"),"Due Date",NewDate) THEN
              VALIDATE("Due Date",NewDate);
          AvailabilityType::Variant:
            IF ShowItemAvailVariant(Item,FIELDCAPTION("Variant Code"),"Variant Code",NewVariantCode) THEN
              VALIDATE("Variant Code",NewVariantCode);
          AvailabilityType::Location:
            IF ShowItemAvailByLoc(Item,FIELDCAPTION("Location Code"),"Location Code",NewLocationCode) THEN
              VALIDATE("Location Code",NewLocationCode);
          AvailabilityType::"Event":
            IF ShowItemAvailByEvent(Item,FIELDCAPTION("Due Date"),"Due Date",NewDate,FALSE) THEN
              VALIDATE("Due Date",NewDate);
          AvailabilityType::BOM:
            IF ShowItemAvailByBOMLevel(Item,FIELDCAPTION("Due Date"),"Due Date",NewDate) THEN
              VALIDATE("Due Date",NewDate);
        END;
      END;
    END;

    [External]
    PROCEDURE ShowItemAvailFromTransLine@27(VAR TransLine@1008 : Record 5741;AvailabilityType@1006 : 'Date,Variant,Location,Bin,Event,BOM');
    VAR
      Item@1004 : Record 27;
      NewDate@1003 : Date;
      NewVariantCode@1002 : Code[10];
      NewLocationCode@1001 : Code[10];
    BEGIN
      WITH TransLine DO BEGIN
        TESTFIELD("Item No.");
        Item.RESET;
        Item.GET("Item No.");
        FilterItem(Item,"Transfer-from Code","Variant Code","Shipment Date");

        OnBeforeShowItemAvailFromTransLine(Item,TransLine);
        CASE AvailabilityType OF
          AvailabilityType::Date:
            IF ShowItemAvailByDate(Item,FIELDCAPTION("Shipment Date"),"Shipment Date",NewDate) THEN
              VALIDATE("Shipment Date",NewDate);
          AvailabilityType::Variant:
            IF ShowItemAvailVariant(Item,FIELDCAPTION("Variant Code"),"Variant Code",NewVariantCode) THEN
              VALIDATE("Variant Code",NewVariantCode);
          AvailabilityType::Location:
            IF ShowItemAvailByLoc(Item,FIELDCAPTION("Transfer-from Code"),"Transfer-from Code",NewLocationCode) THEN
              VALIDATE("Transfer-from Code",NewLocationCode);
          AvailabilityType::"Event":
            IF ShowItemAvailByEvent(Item,FIELDCAPTION("Shipment Date"),"Shipment Date",NewDate,FALSE) THEN
              VALIDATE("Shipment Date",NewDate);
          AvailabilityType::BOM:
            IF ShowItemAvailByBOMLevel(Item,FIELDCAPTION("Shipment Date"),"Shipment Date",NewDate) THEN
              VALIDATE("Shipment Date",NewDate);
        END;
      END;
    END;

    [External]
    PROCEDURE ShowItemAvailFromWhseActivLine@28(VAR WhseActivLine@1005 : Record 5767;AvailabilityType@1003 : 'Date,Variant,Location,Bin,Event,BOM');
    VAR
      Item@1007 : Record 27;
      NewDate@1006 : Date;
      NewVariantCode@1002 : Code[10];
      NewLocationCode@1001 : Code[10];
    BEGIN
      WITH WhseActivLine DO BEGIN
        TESTFIELD("Item No.");
        Item.RESET;
        Item.GET("Item No.");
        FilterItem(Item,"Location Code","Variant Code","Due Date");

        OnBeforeShowItemAvailFromWhseActivLine(Item,WhseActivLine);
        CASE AvailabilityType OF
          AvailabilityType::Date:
            ShowItemAvailByDate(Item,FIELDCAPTION("Due Date"),"Due Date",NewDate);
          AvailabilityType::Variant:
            ShowItemAvailVariant(Item,FIELDCAPTION("Variant Code"),"Variant Code",NewVariantCode);
          AvailabilityType::Location:
            ShowItemAvailByLoc(Item,FIELDCAPTION("Location Code"),"Location Code",NewLocationCode);
          AvailabilityType::"Event":
            ShowItemAvailByEvent(Item,FIELDCAPTION("Due Date"),"Due Date",NewDate,FALSE);
          AvailabilityType::BOM:
            ShowItemAvailByBOMLevel(Item,FIELDCAPTION("Due Date"),"Due Date",NewDate);
        END;
      END;
    END;

    [External]
    PROCEDURE ShowItemAvailFromServLine@31(VAR ServLine@1005 : Record 5902;AvailabilityType@1003 : 'Date,Variant,Location,Bin,Event,BOM');
    VAR
      ServHeader@1007 : Record 5900;
      Item@1008 : Record 27;
      NewDate@1006 : Date;
      NewVariantCode@1002 : Code[10];
      NewLocationCode@1001 : Code[10];
    BEGIN
      WITH ServLine DO BEGIN
        ServHeader.GET("Document Type","Document No.");
        TESTFIELD(Type,Type::Item);
        TESTFIELD("No.");
        Item.RESET;
        Item.GET("No.");
        FilterItem(Item,"Location Code","Variant Code",ServHeader."Response Date");

        OnBeforeShowItemAvailFromServLine(Item,ServLine);
        CASE AvailabilityType OF
          AvailabilityType::Date:
            ShowItemAvailByDate(Item,ServHeader.FIELDCAPTION("Response Date"),ServHeader."Response Date",NewDate);
          AvailabilityType::Variant:
            IF ShowItemAvailVariant(Item,FIELDCAPTION("Variant Code"),"Variant Code",NewVariantCode) THEN
              VALIDATE("Variant Code",NewVariantCode);
          AvailabilityType::Location:
            IF ShowItemAvailByLoc(Item,FIELDCAPTION("Location Code"),"Location Code",NewLocationCode) THEN
              VALIDATE("Location Code",NewLocationCode);
          AvailabilityType::"Event":
            ShowItemAvailByEvent(Item,ServHeader.FIELDCAPTION("Response Date"),ServHeader."Response Date",NewDate,FALSE);
          AvailabilityType::BOM:
            ShowItemAvailByBOMLevel(Item,ServHeader.FIELDCAPTION("Response Date"),ServHeader."Response Date",NewDate);
        END;
      END;
    END;

    [External]
    PROCEDURE ShowItemAvailFromWhseRcptLine@29(VAR WhseRcptLine@1008 : Record 7317;AvailabilityType@1006 : 'Date,Variant,Location,Bin,Event,BOM');
    VAR
      Item@1004 : Record 27;
      NewDate@1003 : Date;
      NewVariantCode@1002 : Code[10];
      NewLocationCode@1001 : Code[10];
    BEGIN
      WITH WhseRcptLine DO BEGIN
        TESTFIELD("Item No.");
        Item.RESET;
        Item.GET("Item No.");
        FilterItem(Item,"Location Code","Variant Code","Due Date");

        OnBeforeShowItemAvailFromWhseRcptLine(Item,WhseRcptLine);
        CASE AvailabilityType OF
          AvailabilityType::Date:
            ShowItemAvailByDate(Item,FIELDCAPTION("Due Date"),"Due Date",NewDate);
          AvailabilityType::Variant:
            ShowItemAvailVariant(Item,FIELDCAPTION("Variant Code"),"Variant Code",NewVariantCode);
          AvailabilityType::Location:
            ShowItemAvailByLoc(Item,FIELDCAPTION("Location Code"),"Location Code",NewLocationCode);
          AvailabilityType::"Event":
            ShowItemAvailByEvent(Item,FIELDCAPTION("Due Date"),"Due Date",NewDate,FALSE);
          AvailabilityType::BOM:
            ShowItemAvailByBOMLevel(Item,FIELDCAPTION("Due Date"),"Due Date",NewDate);
        END;
      END;
    END;

    [External]
    PROCEDURE ShowItemAvailFromItemJnlLine@30(VAR ItemJnlLine@1004 : Record 83;AvailabilityType@1000 : 'Date,Variant,Location,Bin,Event,BOM');
    VAR
      Item@1006 : Record 27;
      NewDate@1005 : Date;
      NewVariantCode@1002 : Code[10];
      NewLocationCode@1001 : Code[10];
    BEGIN
      WITH ItemJnlLine DO BEGIN
        TESTFIELD("Item No.");
        Item.RESET;
        Item.GET("Item No.");
        FilterItem(Item,"Location Code","Variant Code","Posting Date");

        OnBeforeShowItemAvailFromItemJnlLine(Item,ItemJnlLine);
        CASE AvailabilityType OF
          AvailabilityType::Date:
            IF ShowItemAvailByDate(Item,FIELDCAPTION("Posting Date"),"Posting Date",NewDate) THEN
              VALIDATE("Posting Date",NewDate);
          AvailabilityType::Variant:
            IF ShowItemAvailVariant(Item,FIELDCAPTION("Variant Code"),"Variant Code",NewVariantCode) THEN
              VALIDATE("Variant Code",NewVariantCode);
          AvailabilityType::Location:
            IF ShowItemAvailByLoc(Item,FIELDCAPTION("Location Code"),"Location Code",NewLocationCode) THEN
              VALIDATE("Location Code",NewLocationCode);
          AvailabilityType::"Event":
            IF ShowItemAvailByEvent(Item,FIELDCAPTION("Posting Date"),"Posting Date",NewDate,FALSE) THEN
              VALIDATE("Posting Date",NewDate);
          AvailabilityType::BOM:
            IF ShowItemAvailByBOMLevel(Item,FIELDCAPTION("Posting Date"),"Posting Date",NewDate) THEN
              VALIDATE("Posting Date",NewDate);
        END;
      END;
    END;

    [External]
    PROCEDURE ShowItemAvailFromAsmHeader@33(VAR AsmHeader@1010 : Record 900;AvailabilityType@1008 : 'Date,Variant,Location,Bin,Event,BOM');
    VAR
      Item@1004 : Record 27;
      NewDate@1003 : Date;
      NewVariantCode@1002 : Code[10];
      NewLocationCode@1001 : Code[10];
    BEGIN
      WITH AsmHeader DO BEGIN
        TESTFIELD("Item No.");
        Item.RESET;
        Item.GET("Item No.");
        FilterItem(Item,"Location Code","Variant Code","Due Date");

        OnBeforeShowItemAvailFromAsmHeader(Item,AsmHeader);
        CASE AvailabilityType OF
          AvailabilityType::Date:
            IF ShowItemAvailByDate(Item,FIELDCAPTION("Due Date"),"Due Date",NewDate) THEN
              VALIDATE("Due Date",NewDate);
          AvailabilityType::Variant:
            IF ShowItemAvailVariant(Item,FIELDCAPTION("Variant Code"),"Variant Code",NewVariantCode) THEN
              VALIDATE("Variant Code",NewVariantCode);
          AvailabilityType::Location:
            IF ShowItemAvailByLoc(Item,FIELDCAPTION("Location Code"),"Location Code",NewLocationCode) THEN
              VALIDATE("Location Code",NewLocationCode);
          AvailabilityType::"Event":
            IF ShowItemAvailByEvent(Item,FIELDCAPTION("Due Date"),"Due Date",NewDate,FALSE) THEN
              VALIDATE("Due Date",NewDate);
          AvailabilityType::BOM:
            IF ShowCustomAsmItemAvailByBOMLevel(AsmHeader,FIELDCAPTION("Due Date"),"Due Date",NewDate) THEN
              VALIDATE("Due Date",NewDate);
        END;
      END;
    END;

    [External]
    PROCEDURE ShowItemAvailFromAsmLine@34(VAR AsmLine@1010 : Record 901;AvailabilityType@1008 : 'Date,Variant,Location,Bin,Event,BOM');
    VAR
      Item@1004 : Record 27;
      NewDate@1003 : Date;
      NewVariantCode@1002 : Code[10];
      NewLocationCode@1001 : Code[10];
    BEGIN
      WITH AsmLine DO BEGIN
        TESTFIELD(Type,Type::Item);
        TESTFIELD("No.");
        Item.RESET;
        Item.GET("No.");
        FilterItem(Item,"Location Code","Variant Code","Due Date");

        OnBeforeShowItemAvailFromAsmLine(Item,AsmLine);
        CASE AvailabilityType OF
          AvailabilityType::Date:
            IF ShowItemAvailByDate(Item,FIELDCAPTION("Due Date"),"Due Date",NewDate) THEN
              VALIDATE("Due Date",NewDate);
          AvailabilityType::Variant:
            IF ShowItemAvailVariant(Item,FIELDCAPTION("Variant Code"),"Variant Code",NewVariantCode) THEN
              VALIDATE("Variant Code",NewVariantCode);
          AvailabilityType::Location:
            IF ShowItemAvailByLoc(Item,FIELDCAPTION("Location Code"),"Location Code",NewLocationCode) THEN
              VALIDATE("Location Code",NewLocationCode);
          AvailabilityType::"Event":
            IF ShowItemAvailByEvent(Item,FIELDCAPTION("Due Date"),"Due Date",NewDate,FALSE) THEN
              VALIDATE("Due Date",NewDate);
          AvailabilityType::BOM:
            IF ShowItemAvailByBOMLevel(Item,FIELDCAPTION("Due Date"),"Due Date",NewDate) THEN
              VALIDATE("Due Date",NewDate);
        END;
      END;
    END;

    [External]
    PROCEDURE ShowItemAvailFromPlanningComp@35(VAR PlanningComp@1005 : Record 99000829;AvailabilityType@1000 : 'Date,Variant,Location,Bin,Event,BOM');
    VAR
      Item@1007 : Record 27;
      NewDate@1006 : Date;
      NewVariantCode@1003 : Code[10];
      NewLocationCode@1001 : Code[10];
    BEGIN
      WITH PlanningComp DO BEGIN
        TESTFIELD("Item No.");
        Item.RESET;
        Item.GET("Item No.");
        FilterItem(Item,"Location Code","Variant Code","Due Date");

        OnBeforeShowItemAvailFromPlanningComp(Item,PlanningComp);
        CASE AvailabilityType OF
          AvailabilityType::Date:
            IF ShowItemAvailByDate(Item,FIELDCAPTION("Due Date"),"Due Date",NewDate) THEN
              VALIDATE("Due Date",NewDate);
          AvailabilityType::Variant:
            IF ShowItemAvailVariant(Item,FIELDCAPTION("Variant Code"),"Variant Code",NewVariantCode) THEN
              VALIDATE("Variant Code",NewVariantCode);
          AvailabilityType::Location:
            IF ShowItemAvailByLoc(Item,FIELDCAPTION("Location Code"),"Location Code",NewLocationCode) THEN
              VALIDATE("Location Code",NewLocationCode);
          AvailabilityType::"Event":
            BEGIN
              ForecastName := '';
              FindCurrForecastName(ForecastName);

              IF ShowItemAvailByEvent(Item,FIELDCAPTION("Due Date"),"Due Date",NewDate,TRUE) THEN
                VALIDATE("Due Date",NewDate);
            END;
          AvailabilityType::BOM:
            IF ShowItemAvailByBOMLevel(Item,FIELDCAPTION("Due Date"),"Due Date",NewDate) THEN
              VALIDATE("Due Date",NewDate);
        END;
      END;
    END;

    LOCAL PROCEDURE ShowItemAvailByEvent@20(VAR Item@1003 : Record 27;FieldCaption@1002 : Text[80];OldDate@1001 : Date;VAR NewDate@1000 : Date;IncludeForecast@1005 : Boolean) : Boolean;
    VAR
      ItemAvailByEvent@1004 : Page 5530;
      IsHandled@1006 : Boolean;
      Result@1007 : Boolean;
    BEGIN
      // Do not make global
      // Request to make function global has been rejected as it is a skeleton function of the codeunit
      IsHandled := FALSE;
      OnBeforeShowItemAvailByEvent(Item,FieldCaption,OldDate,NewDate,IncludeForecast,Result,IsHandled);
      IF IsHandled THEN
        EXIT(Result);

      IF FieldCaption <> '' THEN
        ItemAvailByEvent.LOOKUPMODE(TRUE);
      ItemAvailByEvent.SetItem(Item);
      IF IncludeForecast THEN BEGIN
        ItemAvailByEvent.SetIncludePlan(TRUE);
        IF ForecastName <> '' THEN
          ItemAvailByEvent.SetForecastName(ForecastName);
      END;
      IF ItemAvailByEvent.RUNMODAL = ACTION::LookupOK THEN BEGIN
        NewDate := ItemAvailByEvent.GetSelectedDate;
        IF (NewDate <> 0D) AND (NewDate <> OldDate) THEN
          IF CONFIRM(Text012,TRUE,FieldCaption,OldDate,NewDate) THEN
            EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE ShowItemAvailByLoc@21(VAR Item@1003 : Record 27;FieldCaption@1002 : Text[80];OldLocationCode@1001 : Code[20];VAR NewLocationCode@1000 : Code[20]) : Boolean;
    VAR
      ItemAvailByLoc@1004 : Page 492;
      IsHandled@1006 : Boolean;
      Result@1005 : Boolean;
    BEGIN
      // Do not make global
      // Request to make function global has been rejected as it is a skeleton function of the codeunit
      IsHandled := FALSE;
      OnBeforeShowItemAvailByLoc(Item,FieldCaption,OldLocationCode,NewLocationCode,Result,IsHandled);
      IF IsHandled THEN
        EXIT(Result);

      Item.SETRANGE("Location Filter");
      IF FieldCaption <> '' THEN
        ItemAvailByLoc.LOOKUPMODE(TRUE);
      ItemAvailByLoc.SETRECORD(Item);
      ItemAvailByLoc.SETTABLEVIEW(Item);
      IF ItemAvailByLoc.RUNMODAL = ACTION::LookupOK THEN BEGIN
        NewLocationCode := ItemAvailByLoc.GetLastLocation;
        IF OldLocationCode <> NewLocationCode THEN
          IF CONFIRM(Text012,TRUE,FieldCaption,OldLocationCode,NewLocationCode) THEN
            EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE ShowItemAvailByDate@23(VAR Item@1000 : Record 27;FieldCaption@1003 : Text[80];OldDate@1001 : Date;VAR NewDate@1002 : Date) : Boolean;
    VAR
      ItemAvailByPeriods@1004 : Page 157;
      IsHandled@1006 : Boolean;
      Result@1005 : Boolean;
    BEGIN
      // Do not make global
      // Request to make function global has been rejected as it is a skeleton function of the codeunit
      IsHandled := FALSE;
      OnBeforeShowItemAvailByDate(Item,FieldCaption,OldDate,NewDate,Result,IsHandled);
      IF IsHandled THEN
        EXIT(Result);

      Item.SETRANGE("Date Filter");
      IF FieldCaption <> '' THEN
        ItemAvailByPeriods.LOOKUPMODE(TRUE);
      ItemAvailByPeriods.SETRECORD(Item);
      ItemAvailByPeriods.SETTABLEVIEW(Item);
      IF ItemAvailByPeriods.RUNMODAL = ACTION::LookupOK THEN BEGIN
        NewDate := ItemAvailByPeriods.GetLastDate;
        IF OldDate <> NewDate THEN
          IF CONFIRM(Text012,TRUE,FieldCaption,OldDate,NewDate) THEN
            EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE ShowItemAvailVariant@24(VAR Item@1000 : Record 27;FieldCaption@1003 : Text[80];OldVariant@1002 : Code[20];VAR NewVariant@1001 : Code[20]) : Boolean;
    VAR
      ItemAvailByVariant@1004 : Page 5414;
      IsHandled@1006 : Boolean;
      Result@1005 : Boolean;
    BEGIN
      // Do not make global
      // Request to make function global has been rejected as it is a skeleton function of the codeunit
      IsHandled := FALSE;
      OnBeforeShowItemAvailVariant(Item,FieldCaption,OldVariant,NewVariant,Result,IsHandled);
      IF IsHandled THEN
        EXIT(Result);

      Item.SETRANGE("Variant Filter");
      IF FieldCaption <> '' THEN
        ItemAvailByVariant.LOOKUPMODE(TRUE);
      ItemAvailByVariant.SETRECORD(Item);
      ItemAvailByVariant.SETTABLEVIEW(Item);
      IF ItemAvailByVariant.RUNMODAL = ACTION::LookupOK THEN BEGIN
        NewVariant := ItemAvailByVariant.GetLastVariant;
        IF OldVariant <> NewVariant THEN
          IF CONFIRM(Text012,TRUE,FieldCaption,OldVariant,NewVariant) THEN
            EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE ShowItemAvailByBOMLevel@25(VAR Item@1003 : Record 27;FieldCaption@1002 : Text[80];OldDate@1001 : Date;VAR NewDate@1000 : Date) : Boolean;
    VAR
      IsHandled@1005 : Boolean;
      Result@1004 : Boolean;
    BEGIN
      // Do not make global
      // Request to make function global has been rejected as it is a skeleton function of the codeunit
      IsHandled := FALSE;
      OnBeforeShowItemAvailByBOMLevel(Item,FieldCaption,OldDate,NewDate,Result,IsHandled);
      IF IsHandled THEN
        EXIT(Result);

      CLEAR(ItemAvailByBOMLevel);
      Item.SETRANGE("Date Filter");
      ItemAvailByBOMLevel.InitItem(Item);
      ItemAvailByBOMLevel.InitDate(OldDate);
      EXIT(ShowBOMLevelAbleToMake(FieldCaption,OldDate,NewDate));
    END;

    LOCAL PROCEDURE ShowCustomAsmItemAvailByBOMLevel@43(VAR AsmHeader@1003 : Record 900;FieldCaption@1002 : Text[80];OldDate@1001 : Date;VAR NewDate@1000 : Date) : Boolean;
    BEGIN
      CLEAR(ItemAvailByBOMLevel);
      ItemAvailByBOMLevel.InitAsmOrder(AsmHeader);
      ItemAvailByBOMLevel.InitDate(OldDate);
      EXIT(ShowBOMLevelAbleToMake(FieldCaption,OldDate,NewDate));
    END;

    LOCAL PROCEDURE ShowCustomProdItemAvailByBOMLevel@49(VAR ProdOrderLine@1003 : Record 5406;FieldCaption@1002 : Text[80];OldDate@1001 : Date;VAR NewDate@1000 : Date) : Boolean;
    BEGIN
      CLEAR(ItemAvailByBOMLevel);
      ItemAvailByBOMLevel.InitProdOrder(ProdOrderLine);
      ItemAvailByBOMLevel.InitDate(OldDate);
      EXIT(ShowBOMLevelAbleToMake(FieldCaption,OldDate,NewDate));
    END;

    LOCAL PROCEDURE ShowBOMLevelAbleToMake@46(FieldCaption@1002 : Text[80];OldDate@1001 : Date;VAR NewDate@1000 : Date) : Boolean;
    BEGIN
      IF FieldCaption <> '' THEN
        ItemAvailByBOMLevel.LOOKUPMODE(TRUE);
      IF ItemAvailByBOMLevel.RUNMODAL = ACTION::LookupOK THEN BEGIN
        NewDate := ItemAvailByBOMLevel.GetSelectedDate;
        IF OldDate <> NewDate THEN
          IF CONFIRM(Text012,TRUE,FieldCaption,OldDate,NewDate) THEN
            EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE FilterItem@38(VAR Item@1000 : Record 27;LocationCode@1001 : Code[20];VariantCode@1002 : Code[20];Date@1003 : Date);
    BEGIN
      // Do not make global
      // Request to make function global has been rejected as it is a skeleton function of the codeunit
      Item.SETRANGE("No.",Item."No.");
      Item.SETRANGE("Date Filter",0D,Date);
      Item.SETRANGE("Variant Filter",VariantCode);
      //Item.SETRANGE("Location Filter",LocationCode);//**4PS.o
      //**4PS.sn
      IF LocationCode <> '' THEN
        Item.SETRANGE("Location Filter",LocationCode);
      //**4PS.en
    END;

    [External]
    PROCEDURE ByEvent@36() : Integer;
    BEGIN
      EXIT(AvailabilityType::"Event");
    END;

    [External]
    PROCEDURE ByLocation@37() : Integer;
    BEGIN
      EXIT(AvailabilityType::Location);
    END;

    [External]
    PROCEDURE ByVariant@39() : Integer;
    BEGIN
      EXIT(AvailabilityType::Variant);
    END;

    [External]
    PROCEDURE ByPeriod@40() : Integer;
    BEGIN
      EXIT(AvailabilityType::Date);
    END;

    [External]
    PROCEDURE ByBOM@41() : Integer;
    BEGIN
      EXIT(AvailabilityType::BOM);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCalcItemPlanningFields@44(VAR Item@1000 : Record 27);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCalculateNeed@45(VAR Item@1000 : Record 27;VAR GrossRequirement@1001 : Decimal;VAR PlannedOrderReceipt@1002 : Decimal;VAR ScheduledReceipt@1003 : Decimal;VAR PlannedOrderReleases@1004 : Decimal);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCalculateProjAvailableBalance@61(VAR Item@1000 : Record 27;VAR ProjAvailableBalance@1001 : Decimal);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeShowItemAvailByBOMLevel@67(VAR Item@1003 : Record 27;FieldCaption@1002 : Text[80];OldDate@1001 : Date;VAR NewDate@1000 : Date;VAR Result@1005 : Boolean;VAR IsHandled@1004 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeShowItemAvailByDate@64(VAR Item@1003 : Record 27;FieldCaption@1002 : Text[80];OldDate@1001 : Date;VAR NewDate@1000 : Date;VAR Result@1005 : Boolean;VAR IsHandled@1004 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeShowItemAvailByEvent@62(VAR Item@1004 : Record 27;FieldCaption@1003 : Text[80];OldDate@1002 : Date;VAR NewDate@1001 : Date;IncludeForecast@1000 : Boolean;VAR Result@1005 : Boolean;VAR IsHandled@1006 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeShowItemAvailByLoc@63(VAR Item@1003 : Record 27;FieldCaption@1002 : Text[80];OldLocationCode@1001 : Code[20];VAR NewLocationCode@1000 : Code[20];VAR Result@1005 : Boolean;VAR IsHandled@1004 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeShowItemAvailFromItem@32(VAR Item@1000 : Record 27);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeShowItemAvailFromItemJnlLine@57(VAR Item@1000 : Record 27;VAR ItemJnlLine@1001 : Record 83);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeShowItemAvailFromSalesLine@47(VAR Item@1000 : Record 27;VAR SalesLine@1001 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeShowItemAvailFromPurchLine@48(VAR Item@1000 : Record 27;VAR PurchLine@1001 : Record 39);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeShowItemAvailFromServLine@55(VAR Item@1000 : Record 27;VAR ServLine@1001 : Record 5902);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeShowItemAvailFromReqLine@50(VAR Item@1000 : Record 27;VAR ReqLine@1001 : Record 246);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeShowItemAvailFromProdOrderLine@51(VAR Item@1000 : Record 27;VAR ProdOrderLine@1001 : Record 5406);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeShowItemAvailFromProdOrderComp@52(VAR Item@1000 : Record 27;VAR ProdOrderComp@1001 : Record 5407);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeShowItemAvailFromTransLine@53(VAR Item@1000 : Record 27;VAR TransLine@1001 : Record 5741);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeShowItemAvailFromWhseActivLine@54(VAR Item@1000 : Record 27;VAR WhseActivLine@1001 : Record 5767);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeShowItemAvailFromWhseRcptLine@56(VAR Item@1001 : Record 27;VAR WhseRcptLine@1000 : Record 7317);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeShowItemAvailFromAsmHeader@58(VAR Item@1000 : Record 27;VAR AssemblyHeader@1001 : Record 900);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeShowItemAvailFromAsmLine@59(VAR Item@1000 : Record 27;VAR AssemblyLine@1001 : Record 901);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeShowItemAvailFromPlanningComp@60(VAR Item@1000 : Record 27;VAR PlanningComp@1001 : Record 99000829);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeShowItemAvailVariant@65(VAR Item@1003 : Record 27;FieldCaption@1002 : Text[80];OldVariant@1001 : Code[20];VAR NewVariant@1000 : Code[20];VAR Result@1005 : Boolean;VAR IsHandled@1004 : Boolean);
    BEGIN
    END;

    PROCEDURE ShowAllPurchLines@1100409000(VAR Item@1001 : Record 27);
    VAR
      PurchLine@1000 : Record 39;
    BEGIN
      //**4PS
      //db, 25-08-14: C009041+T005247
      //- this function is called from flowfield Item."Qty. on Purch. Order" on page 515
      //- function ShowProjServPurchLines is used for Non-Inventory; called from flowfield Item."Qty. on Purch. Order (Project/Service Order)"
      //- standard function ShowPurchLines is used for Inventory; called from flowfield Item."Qty. on Purch. Order (Inv.)"
      PurchLine.CHANGECOMPANY(gCompany);
      PurchLine.FindProjLinesWithItemToPlan(Item,PurchLine."Document Type"::Order);
      PAGE.RUN(0,PurchLine);
    END;

    PROCEDURE ShowProjServPurchLines@1100525004(VAR Item@1001 : Record 27);
    VAR
      PurchLine@1000 : Record 39;
    BEGIN
      //**4PS
      PurchLine.CHANGECOMPANY(gCompany);
      PurchLine.FindProjLinesWithItemToPlan(Item,PurchLine."Document Type"::Order);
      PAGE.RUN(0,PurchLine);
    END;

    PROCEDURE ShowItemJournalLines@1210190000(VAR Item@1100525000 : Record 27;What@1210190000 : 'Inventory,Project,Serviceorder');
    VAR
      ItemJnlLine@1210190001 : Record 83;
    BEGIN
      //**4PS
      ItemJnlLine.CHANGECOMPANY(gCompany);
      ItemJnlLine.FindLinesWithItemToPlan(Item,What);
      PAGE.RUN(0,ItemJnlLine);
    END;

    PROCEDURE ShowPlantOrderItemLines@1100485000(VAR Item@1100525000 : Record 27);
    VAR
      PlantOrderLine@1100525001 : Record 11012557;
    BEGIN
      //**4PS
      PlantOrderLine.CHANGECOMPANY(gCompany);
      PlantOrderLine.FindLinesWithItemToPlan(Item);
      PAGE.RUN(PAGE::"Plant Order Item Line List",PlantOrderLine);
    END;

    PROCEDURE ShowBlanketOrderLines@1100525000(VAR Item@1100525003 : Record 27);
    VAR
      PurchaseHeader@1100525002 : Record 38;
      PurchaseLine@1100525001 : Record 39;
      PurchaseLineTemp@1100525000 : TEMPORARY Record 39;
    BEGIN
      //**4PS
      WITH PurchaseLine DO BEGIN
        CHANGECOMPANY(gCompany);

        SETRANGE("Document Type",PurchaseLine."Document Type"::"Blanket Order");
        SETRANGE(Type,PurchaseLine.Type::Item);
        SETRANGE("No.",Item."No.");
        //SETFILTER("Qty. to Receive",'<>%1',0); //hbk, 02-06-2010
        Item.COPYFILTER("Date Filter","Expected Receipt Date");
        IF FINDSET THEN
          REPEAT
            IF PurchaseHeader."No." <> "Document No." THEN
              PurchaseHeader.GET("Document Type","Document No.");
            IF PurchaseHeader.Status <> PurchaseHeader.Status::Closed THEN BEGIN
              PurchaseLineTemp := PurchaseLine;
              PurchaseLineTemp.INSERT;
            END;
          UNTIL NEXT = 0;
      END;

      PAGE.RUN(0,PurchaseLineTemp);
    END;

    PROCEDURE ShowProjectInvEntries@1100525001(VAR Item@1100525001 : Record 27);
    VAR
      ProjectInvEntry@1100525000 : Record 11012670;
    BEGIN
      //**4PS
      WITH ProjectInvEntry DO BEGIN
        CHANGECOMPANY(gCompany);

        SETRANGE("Item No.",Item."No.");
        SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
      //SETFILTER("Shelf No.",Item.GETFILTER("Bin Filter"));
        SETFILTER("Bin Code",Item.GETFILTER("Bin Filter"));  //db, 02-11-10
        IF Item.GETFILTER("Date Filter") <> '' THEN
          SETFILTER("Posting Date",'..%1',Item.GETRANGEMAX("Date Filter"));
        SETFILTER("Project No.",Item.GETFILTER("Project Filter"));
      END;

      PAGE.RUN(0,ProjectInvEntry);
    END;

    PROCEDURE ShowBudgetLines@1100525002(VAR Item@1100525003 : Record 27);
    VAR
      Project@1100525001 : Record 11072003;
      BudgetLine@1100525000 : Record 11012001;
      BudgetLineTemp@1100525002 : TEMPORARY Record 11012001;
    BEGIN
      //**4PS
      WITH BudgetLine DO BEGIN
        CHANGECOMPANY(gCompany);

        SETRANGE("Item No.",Item."No.");
        SETFILTER("Project No.",Item.GETFILTER("Project Filter"));
        SETRANGE(Advised,FALSE);
        IF FINDSET THEN
          REPEAT
            IF Project."No." <> "Project No." THEN
              IF NOT Project.GET("Project No.") THEN
                CLEAR(Project);
            IF Project."Project Status" IN
              [Project."Project Status"::Estimation,
              Project."Project Status"::Preparation,
              Project."Project Status"::Production]
            THEN BEGIN
              BudgetLineTemp := BudgetLine;
              BudgetLineTemp.INSERT;
            END;
          UNTIL NEXT = 0;
      END;

      PAGE.RUN(0,BudgetLineTemp);
    END;

    PROCEDURE ShowProjMatReqLines@1100525008(VAR Item@1100525000 : Record 27);
    VAR
      ProjMatReqLine@1100525001 : Record 11012526;
    BEGIN
      //**4PS
      ProjMatReqLine.CHANGECOMPANY(gCompany);
      ProjMatReqLine.FindLinesWithItemToPlan(Item);
      //db.sn, 02-11-15
      IF ProjMatReqLine.FINDSET THEN BEGIN
        REPEAT
          IF ProjMatReqLine.GetRemainingQuantity <> 0 THEN
            ProjMatReqLine.MARK := TRUE;
        UNTIL ProjMatReqLine.NEXT = 0;
      END;
      ProjMatReqLine.MARKEDONLY(TRUE);
      //db.en, 02-11-15
      PAGE.RUN(0,ProjMatReqLine);
    END;

    PROCEDURE ShowAdviceOrderLines@1100525003(VAR Item@1100525003 : Record 27;ReleasedLines@1100528400 : Boolean);
    VAR
      Project@1100525001 : Record 11072003;
      AdviceOrderLine@1100525000 : Record 11012055;
    BEGIN
      //**4PS
      WITH AdviceOrderLine DO BEGIN
        CHANGECOMPANY(gCompany);

        SETRANGE("Item No.",Item."No.");
        SETFILTER("Project No.",Item.GETFILTER("Project Filter"));
        SETFILTER("Receipt Date",Item.GETFILTER("Date Filter"));
        IF FINDSET THEN
          REPEAT
            IF Project."No." <> "Project No." THEN
              IF NOT Project.GET("Project No.") THEN
                CLEAR(Project);

            IF Project."Project Status" IN
              [Project."Project Status"::Estimation,
              Project."Project Status"::Preparation,
              Project."Project Status"::Production]
            THEN BEGIN
              IF NOT (ReleasedLines AND ("Process Status" <> "Process Status"::Released)) THEN
                AdviceOrderLine.MARK := TRUE;
            END;

          UNTIL NEXT = 0;
      END;
      AdviceOrderLine.MARKEDONLY(TRUE);
      PAGE.RUN(0,AdviceOrderLine);
    END;

    PROCEDURE ShowBudgetEntries@1100528900(VAR Item@1100525001 : Record 27);
    VAR
      BudgetEntry@1100525000 : Record 7134;
    BEGIN
      //**4PS (DP00120)
      WITH BudgetEntry DO BEGIN
        CHANGECOMPANY(gCompany);

        SETRANGE("Item No.",Item."No.");
        SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
        SETFILTER(Date,Item.GETFILTER("Date Filter"));
        SETFILTER("Budget Name",Item.GETFILTER("Budget Name Filter"));
        SETRANGE("Analysis Area","Analysis Area"::Sales);
      END;

      PAGE.RUN(0,BudgetEntry);
    END;

    PROCEDURE SetCompany@1100485001(ICompany@1100485000 : Text[30]);
    BEGIN
      //**4PS
      IF (ICompany = '') OR (ICompany = COMPANYNAME) THEN
        gCompany := ''
      ELSE
        gCompany := ICompany;
    END;

    PROCEDURE GetProjAvailBalance@1100525005(VAR NewItem@1100525003 : Record 27;Location@1100525002 : Code[10];Date@1100525001 : Date;AllLocations@1100525000 : Boolean) : Decimal;
    VAR
      Item@1100525004 : Record 27;
      GrossRequirement@1100525005 : Decimal;
      PlannedOrderRcpt@1100525006 : Decimal;
      ScheduledRcpt@1100525008 : Decimal;
      PlannedOrderReleases@1100525007 : Decimal;
    BEGIN
      //**4PS
      Item.COPY(NewItem);
      Item.CHANGECOMPANY(gCompany);
      IF Date <> 0D THEN
        Item.SETRANGE("Date Filter", 0D, Date)
      ELSE
        Item.SETRANGE("Date Filter", 0D, WORKDATE);

      IF AllLocations THEN
        Item.SETRANGE("Location Filter")
      ELSE
        Item.SETRANGE("Location Filter",Location);

      CalculateNeed(Item,GrossRequirement,PlannedOrderRcpt,ScheduledRcpt,PlannedOrderReleases);

      EXIT(CalcProjAvailableBalance2(Item.Inventory,GrossRequirement,PlannedOrderRcpt,ScheduledRcpt));
    END;

    PROCEDURE GetInventory@1100525006(Location@1100525000 : Code[10];VAR NewItem@1100525002 : Record 27;AllLocations@1100525001 : Boolean;ReceiptDate@1100525004 : Date) Inventory : Decimal;
    VAR
      JobsSetup@1100525003 : Record 315;
      Item@1100525005 : Record 27;
    BEGIN
      //**4PS
      JobsSetup.GET;

      Item.COPY(NewItem);
      Item.CHANGECOMPANY(gCompany);

      IF AllLocations THEN
        Item.SETRANGE("Location Filter")
      ELSE
        Item.SETRANGE("Location Filter",Location);

      //IF (JobsSetup."Inventory Calc. Advice Order" = JobsSetup."Inventory Calc. Advice Order"::Availability) AND
      IF (JobsSetup."Inventory Calc. Advice Order" <> JobsSetup."Inventory Calc. Advice Order"::Inventory) AND  //db, 27-02-14: C011150
         (ReceiptDate <> 0D)
      THEN
        Inventory := GetProjAvailBalance(Item,Location,ReceiptDate,AllLocations)
      ELSE BEGIN
        Item.CALCFIELDS(Inventory);
        Inventory := Item.Inventory;
      END;

      Inventory -= ItemInventoryIntransit(Item."No.", Location, AllLocations); //mg, 28-06-11: M27068
    END;

    PROCEDURE ItemInventoryIntransit@1210190010(ItemNo@1210190000 : Code[20];LocationCode@1210190001 : Code[10];AllLocations@1210190004 : Boolean) InventoryInTransit : Decimal;
    VAR
      ItemLedgerEntry@1210190003 : Record 32;
      Location@1210190002 : Record 14;
    BEGIN
      //**4PS
      //mg.c, 13-03-12: M33400

      ItemLedgerEntry.CHANGECOMPANY(gCompany);
      Location.CHANGECOMPANY(gCompany);

      IF NOT AllLocations AND (LocationCode <> '') THEN
        Location.SETRANGE(Code, LocationCode);
      Location.SETRANGE("Use As In-Transit", TRUE);
      IF Location.FINDSET THEN BEGIN
        ItemLedgerEntry.SETCURRENTKEY("Item No.", Positive, "Location Code", "Variant Code");
        ItemLedgerEntry.SETRANGE("Item No.", ItemNo);
        REPEAT
          ItemLedgerEntry.SETRANGE("Location Code", Location.Code);
          ItemLedgerEntry.CALCSUMS(ItemLedgerEntry.Quantity);
          InventoryInTransit += ItemLedgerEntry.Quantity;
        UNTIL Location.NEXT = 0;
      END;
    END;

    PROCEDURE SetCalledFromAdviceOrder@1100525007();
    BEGIN
      //**4PS
      CalledFromAdvice := TRUE;
    END;

    BEGIN
    {
      4PS, Objects renumbered
    }
    END.
  }
}

