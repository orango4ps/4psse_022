OBJECT Report 493 Carry Out Action Msg. - Req.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.03,4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Ereignismeld. durchf. - Best.;
               ENU=Transfer Requisition Lines to Purchase Orders;
               NLD=Inkoopvoorstel verwerken tot inkooporder;
               NOR=Utfõr handlingsmeld. - forslag];
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   //**4PS.sn
                   StartProcess := FALSE;
                   PurchSetup.GET;
                   IF NOT PurchSetup."Allow Link Item Docs to Purch." THEN
                     LinkItemDocsToOrder := FALSE;
                   LinkItemDocsToOrderEnabled := PurchSetup."Allow Link Item Docs to Purch.";
                   //**4PS.en
                 END;

    OnPreReport=BEGIN
                  OnBeforePreReport(PrintOrders);

                  IF NOT gvActivateFromAdviceOrder AND NOT ActivateFromPurchReq THEN  //**4PS.n DP00137
                    UseOneJnl(ReqLine);

                  StartProcess := TRUE;  //**4PS.n
                END;

  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   PurchOrderHeader."Order Date" := WORKDATE;
                   PurchOrderHeader."Posting Date" := WORKDATE;
                   PurchOrderHeader."Expected Receipt Date" := WORKDATE;
                   IF ReqWkshTmpl.Recurring THEN
                     EndOrderDate := WORKDATE
                   ELSE
                     EndOrderDate := 0D;

                   //**4PS.sn
                   Selmethod1VISIBLE := NOT gvActivateFromAdviceOrder AND NOT ActivateFromPurchReq;
                   Selmethod2VISIBLE := gvActivateFromAdviceOrder;
                   TransferAccountLinesVisible := NOT ActivateFromPurchReq;
                   ContinueAfterUnprocessedVisible := NOT ActivateFromPurchReq;
                   TransferCommentLines := TRUE;
                   TransferExternalDocumentsVisible := gvActivateFromAdviceOrder OR ActivateFromPurchReq;
                   AddDocumentsToDocumentRelationsVisible := gvActivateFromAdviceOrder OR ActivateFromPurchReq;
                   AddDocumentsToDocumentRelationsEditable := TransferExternalDocuments;
                   IF NOT ActivateFromPurchReq AND UserRec.GET(USERID) THEN BEGIN
                     PurchOrderHeader."Purchaser Code" := UserRec.Purchaser;
                     ValidatePurchaser(FALSE);  //C041035
                   END;
                   IF CopyPurchaserFromAdviceOrderVisible AND CopyPurchaserFromAdviceOrder THEN BEGIN
                     PurchOrderHeader."Purchaser Code" := PurchaserCode;
                     ValidatePurchaser(FALSE);
                   END;
                   //**4PS.en
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DEU=Optionen;
                             ENU=Options;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 6   ;2   ;Field     ;
                  Name=PrintOrders;
                  CaptionML=[DEU=Bestellungen/AuftrÑge drucken;
                             ENU=Print All Orders;
                             NLD=Alle orders afdrukken;
                             NOR=Skriv ut bestillinger];
                  ToolTipML=[DEU=Gibt an, ob die Bestellungen nach der Erstellung gedruckt werden sollen.;
                             ENU=Specifies whether to print the purchase orders after they are created.;
                             NLD=Hiermee wordt opgegeven of de inkooporders moeten worden afgedrukt nadat ze zijn gemaakt.;
                             NOR=Angir om bestillingene skal skrives ut etter at de er opprettet.];
                  ApplicationArea=#Planning;
                  SourceExpr=PrintOrders }

      { 1210190004;2;Field  ;
                  CaptionML=[DEU=Verarbeiten nach elektronischem Auftragstyp;
                             ENU=Process Based On Electronic Order Type;
                             NLD=Verwerk gebaseerd op electronische order type];
                  SourceExpr=ProcBasedOnElectronicOrderType }

      { 1210190001;2;Field  ;
                  Name=SelMethod1;
                  CaptionML=[DEU=Sammeln nach;
                             ENU=Collect per;
                             NLD=Verzamelen per];
                  OptionCaptionML=[DEU=Kreditor,Projekt,Lieferungsstandort,Arbeitsauftrag;
                                   ENU=Vendor,Project,Ship-to Location,Work Order;
                                   NLD=Leverancier,Project,Ontvangstlocatie,Werkorder];
                  SourceExpr=SelMethod;
                  Visible=Selmethod1VISIBLE;
                  Enabled=Selmethod1VISIBLE;
                  OnValidate=BEGIN
                               //**4PS.sn
                               IF NOT gvActivateFromSOAdviceOrder THEN
                                 IF SelMethod = SelMethod::"Work Order" THEN
                                   ERROR(Text11012003);
                               //**4PS.en
                             END;
                              }

      { 1100409002;2;Field  ;
                  Name=SelMethod2;
                  CaptionML=[DEU=Sammeln nach;
                             ENU=Collect per;
                             NLD=Verzamelen per];
                  OptionCaptionML=[DEU=Kreditor,Projekt/Service,Projekt/Service-Lieferort,Lieferort,Arbeitsauftrag;
                                   ENU=Vendor,Project/Service,Project/Service-Ship-to Location,Ship-to Location,Work Order;
                                   NLD=Leverancier,Project/Service,Project/Service-Ontvangstlocatie,Ontvangstlocatie,Werkorder];
                  SourceExpr=SelMethod2;
                  Visible=Selmethod2VISIBLE;
                  Enabled=Selmethod2VISIBLE;
                  OnValidate=BEGIN
                               //**4PS.sn
                               IF NOT gvActivateFromSOAdviceOrder THEN
                                 IF SelMethod2 = SelMethod2::"Work Order" THEN
                                   ERROR(Text11012003);
                               //**4PS.en
                             END;
                              }

      { 1210190002;2;Field  ;
                  CaptionML=[DEU=Aufteilen in wohl/kein Vertrag;
                             ENU=Split by Blanket Orders or not;
                             NLD=Uitsplitsen naar wel/geen contract];
                  SourceExpr=SortPurchaseByBlanketOrders;
                  Visible=Selmethod1VISIBLE;
                  Enabled=Selmethod1VISIBLE }

      { 1100525000;2;Field  ;
                  CaptionML=[DEU=Kontozeilen zu Bestellung Åbertragen;
                             ENU=Transfer Account Lines To Purchase Order;
                             NLD=Grootboekmutaties overzetten naar afzonderlijke inkooporder];
                  SourceExpr=TransferAccountLinesToPurchaseOrder;
                  Visible=TransferAccountLinesVisible }

      { 1100528400;2;Field  ;
                  CaptionML=[DEU=Nach nicht verarbeiteter Zeile fortfahren;
                             ENU=Continue After Unprocessed Line;
                             NLD=Doorgaan na niet verwerkte regel];
                  SourceExpr=ContinueAfterUnprocessedLine;
                  Visible=ContinueAfterUnprocessedVisible }

      { 1100529600;2;Field  ;
                  CaptionML=[DEU=Externe Belege Åbertragen;
                             ENU=Transfer External Documents;
                             NLD=Externe documenten overbrengen];
                  SourceExpr=TransferExternalDocuments;
                  Visible=TransferExternalDocumentsVisible;
                  OnValidate=BEGIN
                               //**4PS
                               IF TransferExternalDocuments THEN
                                 AddDocumentsToDocumentRelationsEditable := TRUE
                               ELSE BEGIN
                                 AddDocumentsToDocumentRelationsEditable := FALSE;
                                 AddDocumentsToDocumentRelations := FALSE;
                               END;
                             END;
                              }

      { 1100528401;2;Field  ;
                  CaptionML=[DEU=Belege zu Belegbeziehungen hinzufÅgen;
                             ENU=Add Documents to Document Relations;
                             NLD=Documenten toevoegen aan documentrelaties];
                  SourceExpr=AddDocumentsToDocumentRelations;
                  Visible=AddDocumentsToDocumentRelationsVisible;
                  Editable=AddDocumentsToDocumentRelationsEditable }

      { 11012000;2;Group    ;
                  CaptionML=[DEU=Kopieren in Einkaufsbestellung;
                             ENU=Copy to Purchase Order;
                             NLD=Kopiâren naar inkooporder];
                  Visible=NOT ActivateFromPurchReq }

      { 8   ;3   ;Field     ;
                  CaptionML=[DEU=Ihre Referenz;
                             ENU=Your Reference;
                             NLD=Uw referentie;
                             SVE=Er referens];
                  SourceExpr=PurchOrderHeader."Your Reference" }

      { 11012002;3;Field    ;
                  CaptionML=[DEU=EinkÑufercode;
                             ENU=Purchaser Code;
                             NLD=Inkoper;
                             SVE=Inkîparkod];
                  SourceExpr=PurchOrderHeader."Purchaser Code";
                  TableRelation=Salesperson/Purchaser;
                  OnValidate=BEGIN
                               ValidatePurchaser(TRUE);  //C041035
                             END;
                              }

      { 1100527450;3;Field  ;
                  CaptionML=[DEU=öbertragen Bemerkungen;
                             ENU=Transfer Comment Lines;
                             NLD=Overzetten opmerkingen;
                             SVE=ôverfîr kommentarsrader];
                  SourceExpr=TransferCommentLines }

      { 1100527451;3;Field  ;
                  CaptionML=[DEU=Kopiere EinkÑufer von Vorschlagsauftrag;
                             ENU=Copy Purchaser from Advice Order;
                             NLD=Kopieer Inkoper van Adviesorder];
                  SourceExpr=CopyPurchaserFromAdviceOrder;
                  Visible=CopyPurchaserFromAdviceOrderVisible;
                  OnValidate=BEGIN
                               //**4PS
                               IF CopyPurchaserFromAdviceOrder THEN
                                 PurchOrderHeader."Purchaser Code" := PurchaserCode
                               ELSE
                                 PurchOrderHeader."Purchaser Code" := UserRec.Purchaser;
                               ValidatePurchaser(TRUE);
                             END;
                              }

      { 1100528000;3;Field  ;
                  CaptionML=[DEU=Artikelbelege mit Auftrag verknÅpfen;
                             ENU=Link Item Documents to Order;
                             NLD=Artikeldocumenten aan order koppelen];
                  SourceExpr=LinkItemDocsToOrder;
                  Visible=LinkItemDocsToOrderEnabled;
                  Enabled=LinkItemDocsToOrderEnabled }

      { 1100409001;2;Group  ;
                  CaptionML=[DEU=Empfangsdatum filtern;
                             ENU=Filter receipt date;
                             NLD=Filter ontvangstdatum];
                  Visible=gvActivateFromAdviceOrder AND NOT ActivateFromPurchReq }

      { 1100409000;3;Field  ;
                  CaptionML=[DEU=Periode;
                             ENU=Period;
                             NLD=Periode;
                             SVE=Period];
                  SourceExpr=PeriodFilter;
                  OnLookup=BEGIN
                             DateSelectionManagement.GetPeriod(PeriodFilter);
                             Text := PeriodFilter;
                           END;
                            }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'DEU=kann nicht gefiltert werden, wenn Sie Bestellungen/AuftrÑge erstellen;ENU=cannot be filtered when you create orders;NLD=kan niet gefilterd worden als u orders aanmaakt;NOR=kan ikke filtreres nÜr du oppretter bestillinger';
      Text001@1001 : TextConst 'DEU=Es gibt nichts zu erstellen.;ENU=There is nothing to create.;NLD=Niets om te maken.;NOR=Det finnes ingenting Ü opprette.;SVE=Det finns inget att skapa.';
      Text003@1003 : TextConst 'DEU=Sie befinden sich im Bestellvorschlag %1.;ENU=You are now in worksheet %1.;NLD=U bevindt zich nu in voorstel %1.;NOR=Du er nÜ i forslag %1.';
      ReqWkshTmpl@1007 : Record 244;
      ReqWkshName@1008 : Record 245;
      ReqLine@1009 : Record 246;
      PurchOrderHeader@1010 : Record 38;
      PurchSetup@1100528000 : Record 312;
      ReqWkshMakeOrders@1011 : Codeunit 333;
      EndOrderDate@1012 : Date;
      PrintOrders@1013 : Boolean;
      ProcBasedOnElectronicOrderType@1210190005 : Boolean;
      TempJnlBatchName@1014 : Code[10];
      HideDialog@1017 : Boolean;
      SelMethod@1210190000 : 'Vendor,Project,Ship-to Location,Work Order';
      SelMethod2@1100409008 : 'Vendor,Project,Project-Ship-to Location,Ship-to Location,Work Order';
      UserRec@1210190002 : Record 91;
      gAskForNoSerie@1210190003 : Boolean;
      gNoSeries@1210190004 : Code[10];
      Text11012000@1100485000 : TextConst 'DEU=Bestellungen (%1) wurden erstellt.;ENU=Puchase Orders (%1) have been created.;NLD=De inkooporders (%1) zijn aangemaakt.';
      SkipBatchFilter@1100525000 : Boolean;
      SortPurchaseByBlanketOrders@1210190001 : Boolean;
      gvActivateFromAdviceOrder@1100528900 : Boolean INDATASET;
      Text11012001@1100409000 : TextConst 'DEU=%1 Auftragszeilen wurden storniert.;ENU=%1 order lines have been cancelled.;NLD=%1 orderregels zijn verwijderd.';
      Text11012002@1100409001 : TextConst 'DEU=%1 Auftragszeilen wurden geÑndert.;ENU=%1 order lines have been changed.;NLD=%1 orderregels zijn gewijzigd.';
      gvActivateFromSOAdviceOrder@1100528601 : Boolean;
      ActivateFromPurchReq@1100529602 : Boolean INDATASET;
      StartProcess@1100528800 : Boolean;
      Text11012003@1100528600 : TextConst 'DEU=Sammeln pro fÅr Arbeitsauftrag nicht erlaubt.;ENU=Collect Per not allowed for Work Order;NLD=Verzamelen per niet mogelijk voor werkorder';
      LinkItemDocsToOrder@1100528001 : Boolean;
      PeriodFilter@1100409005 : Text[250];
      DateSelectionManagement@1100409004 : Codeunit 11130005;
      Selmethod1VISIBLE@1100409006 : Boolean INDATASET;
      Selmethod2VISIBLE@1100409007 : Boolean INDATASET;
      LinkItemDocsToOrderEnabled@1100528002 : Boolean INDATASET;
      ContinueAfterUnprocessedLine@1100528400 : Boolean;
      Text11012004@1100529200 : TextConst 'DEU=UmlagerungsauftrÑge (%1) wurden erstellt.;ENU=Transfer Orders (%1) have been created.;NLD=De transferorders (%1) zijn aangemaakt.';
      TransferAccountLinesToPurchaseOrder@1100525001 : Boolean;
      TransferExternalDocuments@1100529600 : Boolean;
      TransferExternalDocumentsVisible@1100529601 : Boolean INDATASET;
      AddDocumentsToDocumentRelations@1100528401 : Boolean;
      AddDocumentsToDocumentRelationsVisible@1100528402 : Boolean INDATASET;
      AddDocumentsToDocumentRelationsEditable@1100528403 : Boolean INDATASET;
      TransferCommentLines@1100527450 : Boolean;
      CopyPurchaserFromAdviceOrder@1100525002 : Boolean;
      CopyPurchaserFromAdviceOrderVisible@1100525003 : Boolean INDATASET;
      PurchaserCode@1100525004 : Code[10];
      TransferAccountLinesVisible@1100529603 : Boolean INDATASET;
      ContinueAfterUnprocessedVisible@1100529604 : Boolean INDATASET;

    [External]
    PROCEDURE SetReqWkshLine@1(VAR NewReqLine@1000 : Record 246);
    BEGIN
      //**4PS.sn
      NewReqLine.MARKEDONLY(TRUE);
      IF NOT NewReqLine.FINDFIRST THEN
        NewReqLine.MARKEDONLY(FALSE);
      //**4PS.en
      ReqLine.COPY(NewReqLine);
      ReqWkshTmpl.GET(NewReqLine."Worksheet Template Name");

      OnAfterSetReqWkshLine(NewReqLine);
    END;

    [External]
    PROCEDURE GetReqWkshLine@6(VAR NewReqLine@1000 : Record 246);
    BEGIN
      NewReqLine.COPY(ReqLine);
    END;

    [External]
    PROCEDURE SetReqWkshName@2(VAR NewReqWkshName@1000 : Record 245);
    BEGIN
      ReqWkshName.COPY(NewReqWkshName);
      ReqWkshTmpl.GET(NewReqWkshName."Worksheet Template Name");
    END;

    LOCAL PROCEDURE UseOneJnl@3(VAR ReqLine@1000 : Record 246);
    VAR
      StrategicPurchMgt@1100525000 : Codeunit 11020211;
      TrCancelCounter@1100409006 : Integer;
      OrdCancelCounter@1100409005 : Integer;
      TrChangeCounter@1100409004 : Integer;
      OrdChangeCounter@1100409003 : Integer;
      TrNewCounter@1100409002 : Integer;
      OrdNewCounter@1100409001 : Integer;
      FirstOrderNo@1100528400 : Code[20];
      LastOrderNo@1100528401 : Code[20];
      NewPurchaseOrdersTxt@1100409000 : Text[50];
      FirstTransferOrderNo@1100529202 : Code[20];
      LastTransferOrderNo@1100529201 : Code[20];
      NewTransferOrdersTxt@1100529200 : Text[50];
    BEGIN
      WITH ReqLine DO BEGIN
        StrategicPurchMgt.CheckStratPurchForReqLine(ReqLine); //**4PS.n
        ReqWkshTmpl.GET("Worksheet Template Name");
        IF ReqWkshTmpl.Recurring AND (GETFILTER("Order Date") <> '') THEN
          FIELDERROR("Order Date",Text000);
        TempJnlBatchName := "Journal Batch Name";

        //**4PS.sn
        IF gAskForNoSerie THEN
          ReqWkshMakeOrders.SetAskForNoSerie(gNoSeries);
        ReqWkshMakeOrders.SetMethod(SelMethod);
        //**4PS.en
        ReqWkshMakeOrders.Set(PurchOrderHeader,EndOrderDate,PrintOrders);
        ReqWkshMakeOrders.SetBasedOnElectronicOrderType(ProcBasedOnElectronicOrderType);
        //**4PS.sn
        IF SkipBatchFilter THEN
          ReqWkshMakeOrders.SetReqWrkshtPerTemplate;
        IF LinkItemDocsToOrder AND LinkItemDocsToOrderEnabled THEN
          ReqWkshMakeOrders.SetLinkItemDocsToOrder();
        ReqWkshMakeOrders.SetTransferAccountLinesToPurchaseOrder(TransferAccountLinesToPurchaseOrder);  //db, 06-04-17: C036514
        IF NOT SortPurchaseByBlanketOrders THEN
          ReqWkshMakeOrders.SetSkipSortPurchase;
        ReqWkshMakeOrders.SetTransferCommentLines(TransferCommentLines);
        IF ContinueAfterUnprocessedLine THEN
          ReqWkshMakeOrders.SetPlanningResiliency;
        //**4PS.en
        ReqWkshMakeOrders.CarryOutBatchAction(ReqLine);

        IF "Line No." = 0 THEN
          MESSAGE(Text001)
        ELSE
          IF NOT HideDialog THEN BEGIN  //**4PS.n
            ReqWkshMakeOrders.GetNumbers(
              TrCancelCounter,OrdCancelCounter,TrChangeCounter,
              OrdChangeCounter,TrNewCounter,OrdNewCounter,
              FirstOrderNo,LastOrderNo,NewPurchaseOrdersTxt,
              FirstTransferOrderNo,LastTransferOrderNo,NewTransferOrdersTxt);     //**4PS: C002134
            IF (NewPurchaseOrdersTxt <> '') OR (NewTransferOrdersTxt <> '') THEN BEGIN
              IF NewPurchaseOrdersTxt <> '' THEN
                MESSAGE(Text11012000, Description);
              IF NewTransferOrdersTxt <> '' THEN
                MESSAGE(Text11012004, NewTransferOrdersTxt);   //**4PS.n
            END ELSE BEGIN
              IF (TrCancelCounter + OrdCancelCounter) <> 0 THEN
                MESSAGE(Text11012001, (TrCancelCounter + OrdCancelCounter));
              IF (TrChangeCounter + OrdChangeCounter) <> 0 THEN
                MESSAGE(Text11012002, (TrChangeCounter + OrdChangeCounter));
            END;
            IF TempJnlBatchName <> "Journal Batch Name" THEN
              MESSAGE(
                Text003,
                "Journal Batch Name");
          END;  //**4PS.n

        IF NOT FIND('=><') OR (TempJnlBatchName <> "Journal Batch Name") THEN BEGIN
          RESET;
          FILTERGROUP := 2;
          SETRANGE("Worksheet Template Name","Worksheet Template Name");
          SETRANGE("Journal Batch Name","Journal Batch Name");
          FILTERGROUP := 0;
          "Line No." := 1;
        END;
      END;
    END;

    [External]
    PROCEDURE InitializeRequest@5(ExpirationDate@1000 : Date;OrderDate@1001 : Date;PostingDate@1002 : Date;ExpectedReceiptDate@1003 : Date;YourRef@1004 : Text[50]);
    BEGIN
      EndOrderDate := ExpirationDate;
      PurchOrderHeader."Order Date" := OrderDate;
      PurchOrderHeader."Posting Date" := PostingDate;
      PurchOrderHeader."Expected Receipt Date" := ExpectedReceiptDate;
      PurchOrderHeader."Your Reference" := YourRef;
    END;

    [External]
    PROCEDURE SetHideDialog@7(NewHideDialog@1000 : Boolean);
    BEGIN
      HideDialog := NewHideDialog;
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSetReqWkshLine@4(VAR RequisitionLine@1000 : Record 246);
    BEGIN
    END;

    [Integration(TRUE)]
    LOCAL PROCEDURE OnBeforePreReport@8(VAR PrintOrders@1000 : Boolean);
    BEGIN
    END;

    PROCEDURE SetAskForNoSerie@1210190001(INoSeries@1210190005 : Code[10]);
    BEGIN
      //**4PS.n
      gAskForNoSerie := TRUE;
      gNoSeries := INoSeries;
    END;

    PROCEDURE SetReqWrkshtPerTemplate@1100525003();
    BEGIN
      //**4PS
      SkipBatchFilter := TRUE;
    END;

    PROCEDURE SetActivateFromAdviceOrder@1100528900();
    BEGIN
      //**4PS
      gvActivateFromAdviceOrder := TRUE;  //DP00137
    END;

    PROCEDURE SetActivateFromSOAdviceOrder@1100528600();
    BEGIN
      //**4PS
      SetActivateFromAdviceOrder;
      gvActivateFromSOAdviceOrder := TRUE;
    END;

    PROCEDURE SetActivateFromPurchRequistion@1100529600();
    BEGIN
      //**4PS
      ActivateFromPurchReq := TRUE;
    END;

    PROCEDURE GetOptionsForAdviceOrder@1100528902(VAR oStartProcess@1100528800 : Boolean;VAR oSelMethod2@1100528900 : 'Vendor,Project,Project-Ship-to Location,Ship-to Location';VAR oPurchOrderHeader@1100528901 : Record 38;VAR oPrintOrders@1100525000 : Boolean;VAR oProcBasedOnElectronicOrderType@1100525001 : Boolean;VAR oTransferCommentLines@1100525002 : Boolean;VAR oPeriodFilterTxt@1100409000 : Text[30];VAR oLinkItemDocsToOrder@1100528000 : Boolean;VAR oTransferAccountLinesToPurchaseOrder@1100525003 : Boolean;VAR oTransferExternalDocuments@1100529600 : Boolean;VAR oAddDocumentsToDocumentRelations@1100528400 : Boolean);
    BEGIN
      //**4PS
      oStartProcess := StartProcess;  //C003664.n
      oSelMethod2 := SelMethod2;    //DP00137
      oPrintOrders:= PrintOrders;
      oProcBasedOnElectronicOrderType := ProcBasedOnElectronicOrderType;
      oTransferCommentLines := TransferCommentLines;
      oPurchOrderHeader := PurchOrderHeader;
      oPeriodFilterTxt := PeriodFilter;
      oLinkItemDocsToOrder := (LinkItemDocsToOrder AND LinkItemDocsToOrderEnabled);
      oTransferAccountLinesToPurchaseOrder := TransferAccountLinesToPurchaseOrder;  //db, 06-04-17: C036514
      oTransferExternalDocuments := TransferExternalDocuments;
      oAddDocumentsToDocumentRelations := AddDocumentsToDocumentRelations;
    END;

    PROCEDURE GetOptionsForPurchRequisition@1100529604(VAR oStartProcess@1100529600 : Boolean;VAR oPrintOrders@1100529602 : Boolean;VAR oProcBasedOnElectronicOrderType@1100529601 : Boolean;VAR oTransferExternalDocuments@1100529604 : Boolean;VAR oAddDocumentsToDocumentRelations@1100529603 : Boolean);
    BEGIN
      //**4PS
      oStartProcess := StartProcess;
      oPrintOrders := PrintOrders;
      oProcBasedOnElectronicOrderType := ProcBasedOnElectronicOrderType;
      oTransferExternalDocuments := TransferExternalDocuments;
      oAddDocumentsToDocumentRelations := AddDocumentsToDocumentRelations;
    END;

    LOCAL PROCEDURE ValidatePurchaser@1100528500(RefreshBln@1100528501 : Boolean);
    VAR
      SalespersonPurchaser@1100528500 : Record 13;
      SaveMethod@1100528502 : Integer;
      SaveMethod2@1100528503 : Integer;
    BEGIN
      //**4PS
      //C041035
      SaveMethod := SelMethod;
      SaveMethod2 := SelMethod2;
      IF SalespersonPurchaser.GET(PurchOrderHeader."Purchaser Code") THEN BEGIN
        IF SalespersonPurchaser."Collect Purchase Proposal" <> SalespersonPurchaser."Collect Purchase Proposal"::" " THEN BEGIN
          IF gvActivateFromAdviceOrder THEN BEGIN
            SelMethod2 := SalespersonPurchaser."Collect Purchase Proposal" - 1;
            IF SaveMethod2 <> SelMethod2 THEN
              IF RefreshBln THEN
                RequestOptionsPage.UPDATE;
          END ELSE BEGIN
            SelMethod := SalespersonPurchaser."Collect Purchase Proposal" - 1;
            IF (SalespersonPurchaser."Collect Purchase Proposal" = SalespersonPurchaser."Collect Purchase Proposal"::"Work Order") OR
               (SalespersonPurchaser."Collect Purchase Proposal" = SalespersonPurchaser."Collect Purchase Proposal"::"Project-Ship-to Location") THEN BEGIN
              SelMethod := SelMethod::"Ship-to Location";
            END;
            IF SaveMethod <> SelMethod THEN
              IF RefreshBln THEN
                RequestOptionsPage.UPDATE;
          END;
        END;
      END;
    END;

    PROCEDURE SetPurchaserFromAdviceOrderVisible@1100525000(NewCopyPurchaserFromAdviceOrderVisible@1100525000 : Boolean;NewPurchaserCode@1100525001 : Code[10]);
    BEGIN
      //**4PS
      CopyPurchaserFromAdviceOrderVisible := NewCopyPurchaserFromAdviceOrderVisible;
      PurchaserCode := NewPurchaserCode;
    END;

    BEGIN
    {
      DP00137: this report is used for old procedure (ReqLine, codeunit 333) and new procedure (AdviceOrder, codeunit 11012041)
    }
    END.
  }
  RDLDATA
  {
  }
}

