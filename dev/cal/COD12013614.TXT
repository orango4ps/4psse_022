OBJECT Codeunit 12013614 Create Quote from Req
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EXF510000;
  }
  PROPERTIES
  {
    TableNo=12013608;
    OnRun=VAR
            PurchHeader@1100285007 : Record 38;
            DocHead@1100285003 : Record 12013608;
            ExFlowSetup@1100285004 : Record 12013601;
            TempDimValue@1100285005 : TEMPORARY Record 349;
            QuoteDocNo@1100285000 : Code[20];
            DimCodeTab@1100285002 : ARRAY [8] OF Code[20];
            DimValueTab@1100285001 : ARRAY [8] OF Code[20];
          BEGIN
            ExFlowSetup.GET;

            DocHead := Rec;

            UpdateDocHead(DocHead,ExFlowSetup);
            DocHead.MODIFY(FALSE);

            QuoteDocNo := '';
            CreateQuote(QuoteDocNo,DocHead,PurchHeader,ExFlowSetup,TempDimValue);

            UpdateQouteDocument(PurchHeader,DocHead,TempDimValue);

            PrintPQDoc(QuoteDocNo);   // contains commit
          END;

  }
  CODE
  {
    VAR
      EXF01@1100285022 : TextConst 'ENU=Could not create html image!;SVE=Kunde inta skapa html-bild!';
      EXF02@1100285023 : TextConst 'ENU=Vendor %1 does not exist!;SVE=Leverant”rsnr %1 finns ej!';
      EXF09@1100285002 : TextConst 'ENU=Value %1 does not exist in table %2. Document %3 %4.;SVE=V„rde %1 finns ej i tabell %2! Dokument %3 %4.';
      ExDimMgt@1100285015 : Codeunit 12013605;

    PROCEDURE CreateQuote@1100285002(VAR QuoteDocNo@1100285006 : Code[20];VAR DocHead@1100285001 : Record 12013608;VAR PurchHeader@1100285027 : Record 38;ExFlowSetup@1100285030 : Record 12013601;VAR TempDimValue@1100285017 : TEMPORARY Record 349);
    VAR
      ExUserComp@1100285003 : Record 12013641;
      ExLocation@1100285007 : Record 12013613;
      ExDocPurchMapping@1100285010 : Record 12013617;
      Field@1100285014 : Record 2000000041;
      Location@1100285020 : Record 14;
      Vend@1100285021 : Record 23;
      GLSetup@1100285024 : Record 98;
      DocLine@1100285025 : Record 12013609;
      DocLineDim@1100285026 : Record 12013611;
      PurchLine@1100285028 : Record 39;
      ExAttachment@1100285000 : Record 12013643;
      DocLineDelete@1100285031 : Record 12013609;
      ImportMgt@1100285015 : Codeunit 12013604;
      ExFlow@1100285023 : Codeunit 12013601;
      LineIsTextLine@1100285002 : Boolean;
      TempNo@1100285004 : Code[20];
      TempJobNo@1100285022 : Code[20];
      TempJobTaskNo@1100285029 : Code[20];
      FldRef@1100285008 : FieldRef;
      RecRef@1100285009 : RecordRef;
      MapToFldRef@1100285012 : FieldRef;
      MapToRecRef@1100285011 : RecordRef;
      RecRefRel@1100285019 : RecordRef;
      FldRefRel@1100285016 : FieldRef;
      TempStrLen@1100285013 : Integer;
      TempLineNo@1100285005 : Integer;
      Column@1100285034 : Record 12013661;
      DimToGLMapping@1100285035 : Record 12013646;
      ExPeriodicMgt@1100285018 : Codeunit 12013599;
    BEGIN
      IF NOT Vend.GET(DocHead."Vendor No.") THEN
        ERROR(EXF02,DocHead."Vendor No.");

      PurchHeader.INIT;
      PurchHeader."Document Type" := PurchHeader."Document Type"::Quote;
      PurchHeader."No." := '';
      PurchHeader.VALIDATE("Posting Date",WORKDATE);
      PurchHeader.VALIDATE("Buy-from Vendor No.",DocHead."Vendor No.");
      PurchHeader.INSERT(TRUE);

      QuoteDocNo := PurchHeader."No.";

      IF DocHead."Currency Code" <> '' THEN
        PurchHeader.VALIDATE("Currency Code",DocHead."Currency Code")
      ELSE IF ExFlowSetup."Set blank Curr to LCY (REQ)" THEN BEGIN
        GLSetup.GET;
        IF GLSetup."LCY Code" <> '' THEN
          PurchHeader.VALIDATE("Currency Code",GLSetup."LCY Code");
      END ELSE
        PurchHeader.VALIDATE("Currency Code", '');

      PurchHeader.VALIDATE("Payment Terms Code");
      PurchHeader.Approve := TRUE;
      PurchHeader."New Line" := TRUE;
      PurchHeader."Document Date" := WORKDATE;
      PurchHeader."Requisition No." := PurchHeader."No.";

      PurchHeader."Order Date" := DocHead."Create Date";
      PurchHeader."Vendor Order No." := DocHead."Vendor Document No.";
      PurchHeader.VALIDATE("Expected Receipt Date",DocHead."Expected Receipt Date");

      IF DocHead."Ex Location ID" = 0 THEN BEGIN
        IF ExUserComp.GET(DocHead.Initiator) THEN
          IF ExUserComp."Location Code (Requisition)" <> '' THEN
            PurchHeader.VALIDATE("Location Code",ExUserComp."Location Code (Requisition)");
      END ELSE BEGIN
        ExLocation.GET(DocHead."Ex Location ID");
        IF Location.GET(ExLocation.Code) THEN BEGIN
          PurchHeader."Location Code" := ExLocation.Code;
          PurchHeader."Inbound Whse. Handling Time" := Location."Inbound Whse. Handling Time";
        END;

        PurchHeader."Ship-to Code" := ExLocation.Code;
        PurchHeader."Ship-to Name" := ExLocation.Name;
        PurchHeader."Ship-to Name 2" := ExLocation."Name 2";
        PurchHeader."Ship-to Address" := ExLocation.Address;
        PurchHeader."Ship-to Address 2" := ExLocation."Address 2";
        PurchHeader."Ship-to City" := ExLocation.City;
        PurchHeader."Ship-to Contact" := ExLocation.Contact;
        PurchHeader."Ship-to Post Code" := ExLocation."Post Code";
        PurchHeader."Ship-to County" := ExLocation.County;
        PurchHeader."Ship-to Country/Region Code" := ExLocation."Country/Region Code";
      END;

      PurchHeader."New Line":= FALSE;

      PurchHeader.MODIFY;

      DocHead."Error Message" := '';
      DocHead."Document Type" := PurchHeader."Document Type";
      DocHead."Document No." := PurchHeader."No.";
      DocHead.MODIFY;

      ExFlow.CreateWebVendor(DocHead);

      ExAttachment.RESET;
      ExAttachment.SETCURRENTKEY("Document ID");
      ExAttachment.SETRANGE("Document ID", DocHead.ID);
      IF ExAttachment.FINDSET(TRUE) THEN
        REPEAT
          ExAttachment."Document Type" := DocHead."Document Type";
          ExAttachment."Document No." := DocHead."Document No.";
          ExAttachment.MODIFY;
        UNTIL ExAttachment.NEXT = 0;

      ExDocPurchMapping.RESET;
      IF ExDocPurchMapping.FINDSET THEN BEGIN
        RecRef.GETTABLE(DocHead);
        MapToRecRef.GETTABLE(PurchHeader);
        REPEAT
          FldRef := RecRef.FIELD(ExDocPurchMapping."Field No.");
          IF FORMAT(FldRef.VALUE) <> '' THEN BEGIN
            MapToFldRef := MapToRecRef.FIELD(ExDocPurchMapping."Map to Field No.");

            Field.SETRANGE(TableNo, DATABASE::"Purchase Header");
            Field.SETRANGE("No.",ExDocPurchMapping."Map to Field No.");
            Field.FINDFIRST;

            IF Field.RelationTableNo <> 0 THEN BEGIN
              RecRefRel.OPEN(Field.RelationTableNo);

              IF Field.RelationFieldNo <> 0 THEN
                FldRefRel := RecRefRel.FIELD(Field.RelationFieldNo)
              ELSE
                FldRefRel := RecRefRel.FIELD(1);

              FldRefRel.SETRANGE(COPYSTR(FORMAT(FldRef.VALUE),1,Field.Len));
              IF NOT RecRefRel.FINDFIRST THEN
                ERROR(STRSUBSTNO(EXF09,COPYSTR(FORMAT(FldRef.VALUE),1,Field.Len),RecRefRel.CAPTION,DocHead."Document Type",
                      DocHead."Document No."));

              RecRefRel.CLOSE;
            END;
            MapToFldRef.VALUE := COPYSTR(FORMAT(FldRef.VALUE),1,Field.Len);
          END;
        UNTIL ExDocPurchMapping.NEXT = 0;
        MapToRecRef.MODIFY;

        PurchHeader.GET(PurchHeader."Document Type",PurchHeader."No.");
      END;

      DocLine.RESET;
      DocLine.SETCURRENTKEY("Document ID");
      DocLine.SETRANGE("Document ID", DocHead.ID);
      IF DocLine.FINDSET(TRUE) THEN BEGIN
        TempLineNo := 10000;
        REPEAT
          TempNo := '';
          PurchLine.INIT;
          PurchLine.SuspendStatusCheck(TRUE);
          PurchLine."Document Type" := PurchHeader."Document Type";
          PurchLine."Document No." := PurchHeader."No.";
          PurchLine."Line No." := TempLineNo;
          TempLineNo := TempLineNo + 10000;
          PurchLine."Buy-from Vendor No." := PurchHeader."Buy-from Vendor No.";

          LineIsTextLine := LineIsBlank(DocLine);
          PurchLine.Approve := NOT LineIsTextLine;
          PurchLine.INSERT(FALSE);

          PurchLine.Type := DocLine."Line Type";

          IF LineIsTextLine THEN
            PurchLine.Type := PurchLine.Type::" ";

          IF PurchLine.Type <> PurchLine.Type::" " THEN BEGIN
            DocLineDim.RESET;
            DocLineDim.SETCURRENTKEY("Document Line ID");
            DocLineDim.SETRANGE("Document Line ID", DocLine.ID);
            DocLineDim.SETFILTER("Dimension Code", '%1|%2|%3|%4','G_LACCOUNT','ITEM','CHARGE','FIXEDASSET');
            IF DocLineDim.FINDFIRST THEN
              PurchLine.VALIDATE("No.", DocLineDim."Dimension Value");

            IF PurchLine."No." = '' THEN BEGIN
              TempNo := FindNoMapping(DocLine,PurchLine."Buy-from Vendor No.");
              IF TempNo <> '' THEN BEGIN
                PurchLine.Type := DocLine."Line Type";
                PurchLine.VALIDATE("No.", TempNo);
              END;
            END;
          END;

          IF DocLine.Description <> '' THEN BEGIN
            TempStrLen := MAXSTRLEN(PurchLine.Description);

            IF STRLEN(DocLine.Description) > TempStrLen THEN BEGIN
              IF FORMAT(DocLine.Description[TempStrLen]) <> ' ' THEN
                REPEAT
                  TempStrLen := TempStrLen - 1;
                UNTIL (FORMAT(DocLine.Description[TempStrLen]) = ' ') OR (TempStrLen = 1);

              IF TempStrLen = 1 THEN
                TempStrLen := MAXSTRLEN(PurchLine.Description);

              PurchLine.Description := COPYSTR(DocLine.Description, 1, TempStrLen);
              PurchLine."Description 2" := COPYSTR(DocLine.Description,TempStrLen + 1,
                                                                       MAXSTRLEN(PurchLine.Description));
            END ELSE
              PurchLine.Description := DocLine.Description;
          END;

          IF PurchLine.Type <> PurchLine.Type::" " THEN BEGIN
            IF PurchLine."Gen. Prod. Posting Group" = '' THEN
              PurchLine.VALIDATE("Gen. Prod. Posting Group", ExFlowSetup."Std. Prod. Posting Group");

            IF PurchLine."VAT Prod. Posting Group" = '' THEN
              PurchLine.VALIDATE("VAT Prod. Posting Group", ExFlowSetup."Std. VAT Prod. Posting Group");

            PurchLine.VALIDATE(Quantity,DocLine.Quantity);

            IF PurchLine.Approve THEN
              PurchLine."First Approver" := DocHead.Initiator;
          END;

          DocLineDim.RESET;
          DocLineDim.SETCURRENTKEY("Document Line ID");
          DocLineDim.SETRANGE("Document Line ID", DocLine.ID);
          IF DocLineDim.FINDSET(TRUE) THEN BEGIN
            TempJobNo := '';
            TempJobTaskNo := '';
            REPEAT
              IF PurchLine.Type <> PurchLine.Type::" " THEN BEGIN
                ExPeriodicMgt.QuoteFromRecCodeunit_UpdatePerPurch(DocLineDim."Dimension Code",PurchLine,DocLineDim);

                CASE DocLineDim."Dimension Code" OF
                  'JOB':
                    TempJobNo := DocLineDim."Dimension Value";

                  'INV_CODE':
                    PurchLine.VALIDATE("Invoicing Code", DocLineDim."Dimension Value");

                  'JOBTASK':
                    TempJobTaskNo := DocLineDim."Dimension Value";

                  'CUSTOMERINV':
                    EVALUATE(PurchLine."Invoice to Customer", DocLineDim."Dimension Value");

                  'AMOUNTINV':
                    ImportMgt.TransformNumber(DocLineDim."Dimension Value",PurchLine."Invoicing Amount");

                  'INVDATE':
                    PurchLine.VALIDATE("Start Date for Invoicing", DateField(DocLineDim."Dimension Value"));
                END;
              END;

              DocLineDim."Document Type" := DocHead."Document Type";
              DocLineDim."Document No." := DocHead."Document No.";
              DocLineDim.MODIFY;
            UNTIL DocLineDim.NEXT = 0;

            IF TempJobNo <> '' THEN
              PurchLine.VALIDATE("Job No.", TempJobNo);
            IF TempJobTaskNo <> '' THEN
              PurchLine.VALIDATE("Job Task No.", TempJobTaskNo);
          END;

          IF PurchLine.Type <> PurchLine.Type::" " THEN BEGIN
            PurchLine.VALIDATE("Direct Unit Cost", DocLine."Direct Unit Cost");
            PurchLine.VALIDATE("Line Discount %", DocLine."Line Discount %");
          END;

          PurchLine.MODIFY(FALSE);

          IF PurchLine.Approve THEN BEGIN
            DocLine."Document Type" := DocHead."Document Type";
            DocLine."Document No." := DocHead."Document No.";
            DocLine."Line No." := PurchLine."Line No.";
            DocLine."No." := PurchLine."No.";
            DocLine."Requisition No." := PurchHeader."No.";
            DocLine."Direct Unit Cost" := PurchLine."Direct Unit Cost";
            ExPeriodicMgt.QuoteFromRecCodeunit_UpdatePerDocLine(DocLine,PurchLine);
            DocLine."Job No." := PurchLine."Job No.";
            DocLine."Job Task No." := PurchLine."Job Task No.";
            DocLine."Invoice to Customer" := PurchLine."Invoice to Customer";
            DocLine."Invoicing Amount" := PurchLine."Invoicing Amount";
            DocLine."Start Date for Invoicing" := PurchLine."Start Date for Invoicing";
            DocLine."Invoicing Code" := PurchLine."Invoicing Code";
            DocLine."New Line" := FALSE;
            DocLine.MODIFY(TRUE);
          END;

          //From Dim Mapping - Doc dim must be updated after doc line.
          IF TempNo <> '' THEN BEGIN
            CASE PurchLine.Type OF
              PurchLine.Type::"G/L Account":
                ExFlow.AddExtraToExFlowDim('G_LACCOUNT', PurchLine);
              PurchLine.Type::Item:
                ExFlow.AddExtraToExFlowDim('ITEM', PurchLine);
              PurchLine.Type::"Fixed Asset":
                ExFlow.AddExtraToExFlowDim('FIXEDASSET', PurchLine);
              PurchLine.Type::"Charge (Item)":
                ExFlow.AddExtraToExFlowDim('CHARGE', PurchLine);
            END;
          END;

          IF PurchLine.Quantity <> 0 THEN
            ExDimMgt.CreateQuoteCopyDimension(DocLine,PurchLine,PurchHeader,TempDimValue);

          IF NOT PurchLine.Approve THEN BEGIN
            DocLineDelete.GET(DocLine.ID);
            DocLineDelete.DELETE;
            DocLineDim.RESET;
            DocLineDim.SETCURRENTKEY("Document Line ID");
            DocLineDim.SETRANGE("Document Line ID", DocLine.ID);
            DocLineDim.DELETEALL;
          END;
        UNTIL DocLine.NEXT = 0;
      END;
    END;

    PROCEDURE UpdateQouteDocument@1100285001(VAR PurchHeader@1100285008 : Record 38;VAR EXDoc@1100285009 : Record 12013608;VAR TempDimValue@1100285000 : TEMPORARY Record 349);
    VAR
      TempPurchLine@1100285002 : TEMPORARY Record 39;
      PurchaseLine@1100285015 : Record 39;
      TotalPurchLine@1100285011 : Record 39;
      TotalPurchLineLCY@1100285010 : Record 39;
      ReqRule@1100285001 : Record 12013621;
      EXDocLine@1100285007 : Record 12013609;
      EXDocLineUpdated@1100285004 : Record 12013609;
      EXDocLineApp@1100285006 : Record 12013610;
      PurchPost@1100285014 : Codeunit 90;
      ExFlow@1100285017 : Codeunit 12013601;
      ExFlowSEMgt@1100285021 : Codeunit 12013598;
      TempLineNo@1100285003 : Integer;
      VATAmount@1100285013 : Decimal;
      VATAmountText@1100285012 : Text[30];
    BEGIN
      EXDoc."Predefind Posting No." := PurchHeader."No.";

      PurchPost.GetPurchLines(PurchHeader,TempPurchLine,0);
      CLEAR(PurchPost);
      PurchPost.SumPurchLinesTemp(PurchHeader,TempPurchLine,0,TotalPurchLine,TotalPurchLineLCY,VATAmount,VATAmountText);

      EXDoc."Net Amount" := TotalPurchLine.Amount;
      EXDoc."VAT Amount" := TotalPurchLine."Amount Including VAT" - TotalPurchLine.Amount;
      EXDoc."Gross Amount" := EXDoc."Net Amount" + EXDoc."VAT Amount";
      PurchHeader."Gross Invoice Amount ExFlow" := ABS(EXDoc."Net Amount") + ABS(EXDoc."VAT Amount");
      PurchHeader."Import VAT Amount" := ABS(EXDoc."VAT Amount");

      ExFlowSEMgt.UpdateSWEBASE(PurchHeader);

      EXDoc."Due Date" := EXDoc."Expected Receipt Date";
      PurchHeader."Due Date" := EXDoc."Due Date";

      EXDoc."Currency Code" := PurchHeader."Currency Code";

      IF ReqRule.FindTemplate(PurchHeader,ReqRule,EXDoc."Created By",EXDoc."Net Amount",TempDimValue) THEN BEGIN
        IF ReqRule."Assigned Receipt Group" <> '' THEN
          EXDoc."Assigned Receipt Group" := ReqRule."Assigned Receipt Group";

        IF ReqRule."Assigned Purchasing Group" <> '' THEN BEGIN
          IF EXDoc."Assigned Receipt Group" = '' THEN
            EXDoc."Assigned Receipt Group" := EXDoc.Initiator;

          EXDoc.Initiator := ReqRule."Assigned Purchasing Group";
        END;

        PurchHeader.Status := ReqRule.Status;

        IF ReqRule."Set Created by as First Approv" AND (EXDoc."Created By" <> '') THEN BEGIN
          EXDocLine.SETRANGE("Document ID", EXDoc.ID);
          IF EXDocLine.FINDSET THEN
            REPEAT
              EXDocLineApp.SETCURRENTKEY("Document Type","Document No.","Line No.","Approver Order");
              EXDocLineApp.SETRANGE("Document Line ID", EXDocLine.ID);
              IF EXDocLineApp.FINDFIRST THEN
                TempLineNo := ROUND(EXDocLineApp."Approver Order" / 2,1);
              IF TempLineNo = 0 THEN
                TempLineNo := 10000;

              EXDocLineApp.INIT;
              EXDocLineApp.ID := 0;
              EXDocLineApp."Document Line ID" := EXDocLine.ID;
              EXDocLineApp."Document ID" := EXDocLine."Document ID";
              EXDocLineApp."Document Type" := EXDocLine."Document Type";
              EXDocLineApp."Document No." := EXDocLine."Document No.";
              EXDocLineApp."Line No." := EXDocLine."Line No.";
              EXDocLineApp."Approver Order" := TempLineNo;
              EXDocLineApp.VALIDATE(Approver, EXDoc."Created By");
              EXDocLineApp.INSERT(TRUE);

              PurchaseLine.GET(EXDocLine."Document Type",EXDocLine."Document No.",EXDocLine."Line No.");
              PurchaseLine."Approval Flow Modified" := TRUE;
              PurchaseLine.MODIFY;
            UNTIL EXDocLine.NEXT = 0;
        END;
      END;

      PurchHeader.MODIFY;

      IF PurchHeader.Status = PurchHeader.Status::Open THEN
        EXDoc.Status := EXDoc.Status::Inactive
      ELSE BEGIN
        EXDoc.MODIFY;

        EXDocLine.RESET;
        EXDocLine.SETRANGE("Document ID", EXDoc.ID);
        IF EXDocLine.FINDFIRST THEN
          EXDocLine.SetDocumentStatus(EXDocLine);

        EXDoc.GET(EXDocLine."Document ID");
      END;

      EXDoc.MODIFY(FALSE);

      EXDocLine.RESET;
      EXDocLine.SETCURRENTKEY("Document No.");
      EXDocLine.SETRANGE("Document Type", PurchHeader."Document Type");
      EXDocLine.SETRANGE("Document No.", PurchHeader."No.");
      IF EXDocLine.FINDSET(TRUE) THEN
        REPEAT
          PurchaseLine.GET(EXDocLine."Document Type",EXDocLine."Document No.",EXDocLine."Line No.");
          ExFlow.CreateApproversFromPurch(EXDocLine, PurchaseLine,'',FALSE, '','',FALSE);
          PurchaseLine.GET(EXDocLine."Document Type",EXDocLine."Document No.",EXDocLine."Line No.");
          EXDocLineUpdated.GET(EXDocLine.ID);
          EXDocLineUpdated."Applied Template Rule" := PurchaseLine."Applied Template Rule";
          EXDocLineUpdated.MODIFY;
        UNTIL EXDocLine.NEXT = 0;
    END;

    PROCEDURE DateField@1100285003(InField@1100285003 : Text[128]) : Date;
    VAR
      Year@1100285002 : Integer;
      Month@1100285001 : Integer;
      Day@1100285000 : Integer;
    BEGIN
      InField := DELCHR(InField,'=','-');
      IF NOT EVALUATE(Year,COPYSTR(InField,1,4)) THEN
        EXIT(0D);

      IF NOT EVALUATE(Month,COPYSTR(InField,5,2)) THEN
        EXIT(0D);

      IF NOT EVALUATE(Day,COPYSTR(InField,7,2)) THEN
        EXIT(0D);

      IF (Month IN [1..12]) AND (Day IN [1..31]) THEN
        EXIT(DMY2DATE(Day,Month,Year))
      ELSE
        EXIT(0D);
    END;

    PROCEDURE UpdateDocHead@1100285007(VAR DocHead@1100285000 : Record 12013608;ExFlowSetup@1100285003 : Record 12013601);
    VAR
      Vend@1100285001 : Record 23;
      ExLocation@1100285002 : Record 12013613;
      GLSetup@1100285005 : Record 98;
      NoSeriesMgt@1100285004 : Codeunit 396;
    BEGIN
      IF DocHead."Vendor No." = '' THEN BEGIN
        Vend.RESET;
        IF Vend.SETCURRENTKEY(Name) THEN;
        Vend.SETRANGE(Name, DocHead."Vendor Name");
        IF Vend.FINDFIRST THEN
          DocHead."Vendor No." := Vend."No.";

        IF DocHead."Requisition No. Series" <> '' THEN BEGIN
          CLEAR(NoSeriesMgt);
          IF DocHead."Posting Date" = 0D THEN
            DocHead."Document No." := NoSeriesMgt.GetNextNo(DocHead."Requisition No. Series",TODAY,TRUE)
          ELSE
            DocHead."Document No." := NoSeriesMgt.GetNextNo(DocHead."Requisition No. Series",DocHead."Posting Date",TRUE);
        END;
      END;

      IF (DocHead."Text Field 10" <> '') AND (DocHead."Ex Location ID" = 0) THEN BEGIN
        ExLocation.RESET;
        ExLocation.SETRANGE(Name,DocHead."Text Field 10");
        IF ExLocation.FINDFIRST THEN
          DocHead."Ex Location ID":= ExLocation.ID;
      END;

      IF ExFlowSetup."Blank Currency if equal to LCY" THEN BEGIN
        IF DocHead."Currency Code" <> '' THEN BEGIN
          GLSetup.GET;
          IF GLSetup."LCY Code" = DocHead."Currency Code" THEN
            DocHead."Currency Code" := '';
        END;
      END;
    END;

    PROCEDURE LineIsBlank@1100285006(DocLine@1100285000 : Record 12013609) : Boolean;
    BEGIN
      IF DocLine."Direct Unit Cost" <> 0 THEN
        EXIT(FALSE);

      IF DocLine.Amount <> 0 THEN
        EXIT(FALSE);

      IF DocLine."No." <> '' THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE FindNoMapping@1100285011(VAR DocLine@1100285002 : Record 12013609;VendorNo@1100285004 : Code[20]) TempNo : Code[20];
    VAR
      DimToGLMapping@1100285001 : Record 12013646;
      Column@1100285000 : Record 12013661;
      Vendor@1100285003 : Record 23;
      DocLineDim@1100285005 : Record 12013611;
    BEGIN
      DocLineDim.RESET;
      DocLineDim.SETRANGE("Document Line ID", DocLine.ID);
      IF DocLineDim.FINDSET THEN
        REPEAT
          Column.GET(DocLineDim."Column ID");
          IF Column."Dimension Code" <> '' THEN BEGIN
            DimToGLMapping.RESET;
            DimToGLMapping.SETRANGE("Dimension Code", DocLineDim."Dimension Code");
            DimToGLMapping.SETRANGE("Dimension Value Code", DocLineDim."Dimension Value");
            DimToGLMapping.SETFILTER("No.", '<>%1', '');
            IF DimToGLMapping.FINDFIRST THEN BEGIN
              TempNo := DimToGLMapping."No.";
              DocLine."Line Type" := DimToGLMapping.Type;
            END;
          END;
        UNTIL (DocLineDim.NEXT = 0) OR (TempNo <> '');

      IF (TempNo = '') AND (DocLine."Line Type" = DocLine."Line Type"::"G/L Account") THEN BEGIN
        IF VendorNo <> '' THEN
          IF Vendor.GET(VendorNo) THEN
            TempNo := Vendor."Predefined Account";
      END;

      IF TempNo = '' THEN BEGIN
        DimToGLMapping.RESET;
        DimToGLMapping.SETFILTER("Dimension Code", '%1', '');
        DimToGLMapping.SETFILTER("Dimension Value Code", '%1', '');
        DimToGLMapping.SETFILTER("No.", '<>%1', '');
        IF DimToGLMapping.FINDFIRST THEN BEGIN
          TempNo := DimToGLMapping."No.";
          DocLine."Line Type" := DimToGLMapping.Type;
        END;
      END;

      EXIT(TempNo);
    END;

    PROCEDURE PrintPQDoc@1100285008(QuoteDocNo@1100285002 : Code[20]);
    VAR
      QuoteToOrder@1100285001 : Codeunit 12013607;
      PurchHead@1100285000 : Record 38;
    BEGIN
      PurchHead.GET(PurchHead."Document Type"::Quote,QuoteDocNo);
      QuoteToOrder.PrintPODoc(PurchHead);
    END;

    PROCEDURE SplitDocument@1100285000();
    VAR
      DocHead@1100285009 : Record 12013608;
      NewDocHead@1100285008 : Record 12013608;
      TempDocHead@1100285001 : TEMPORARY Record 12013608;
      DocLine@1100285007 : Record 12013609;
      DocLine2@1100285006 : Record 12013609;
      TempDocLine@1100285000 : TEMPORARY Record 12013609;
      DocLineApp@1100285005 : Record 12013610;
      DocLineApp2@1100285004 : Record 12013610;
      DocLineDim@1100285003 : Record 12013611;
      DocLineDim2@1100285002 : Record 12013611;
      First@1100285010 : Boolean;
    BEGIN
      TempDocHead.RESET;
      TempDocHead.DELETEALL;
      TempDocLine.RESET;
      TempDocLine.DELETEALL;

      DocHead.RESET;
      DocHead.SETCURRENTKEY("Document Type","Document No.");
      DocHead.SETRANGE("Document Type", DocHead."Document Type"::Requisition);
      IF DocHead.FINDSET(TRUE) THEN BEGIN
        REPEAT
          First := TRUE;
          DocLine.RESET;
          DocLine.SETCURRENTKEY("Document ID");
          DocLine.SETRANGE("Document ID", DocHead.ID);
          IF DocLine.FINDSET THEN
            REPEAT
              IF NOT First THEN BEGIN
                TempDocLine.INIT;
                TempDocLine.TRANSFERFIELDS(DocLine);
                TempDocLine.INSERT;

                TempDocHead.RESET;
                TempDocHead.SETRANGE(ID, DocHead.ID);
                IF NOT TempDocHead.FIND('-') THEN BEGIN
                  TempDocHead.INIT;
                  TempDocHead.TRANSFERFIELDS(DocHead);
                  TempDocHead.INSERT;
                END;
              END ELSE
                First := FALSE;
            UNTIL DocLine.NEXT = 0;
        UNTIL DocHead.NEXT = 0;

        TempDocHead.RESET;
        IF TempDocHead.FIND('-') THEN
          REPEAT
            DocHead.GET(TempDocHead.ID);

            TempDocLine.RESET;
            TempDocLine.SETRANGE("Document ID", TempDocHead.ID);
            TempDocLine.FIND('-');
            REPEAT
              NewDocHead.INIT;
              NewDocHead.TRANSFERFIELDS(DocHead);
              NewDocHead.ID := 0;
              NewDocHead."Document No." := COPYSTR(FORMAT(CREATEGUID),2,MAXSTRLEN(NewDocHead."Document No."));
              NewDocHead.INSERT;

              DocLine2.GET(TempDocLine.ID);
              DocLine2."Line No." := 10000;
              DocLine2."Document ID" := NewDocHead.ID;
              DocLine2."Document No." := NewDocHead."Document No.";
              DocLine2."Requisition No." := NewDocHead."Document No.";
              DocLine2.MODIFY;

              DocLineApp.RESET;
              DocLineApp.SETCURRENTKEY("Document Line ID");
              DocLineApp.SETRANGE("Document Line ID", TempDocLine.ID);
              IF DocLineApp.FINDSET(TRUE,TRUE) THEN
                REPEAT
                  DocLineApp2.GET(DocLineApp.ID);
                  DocLineApp2."Document No." := DocLine2."Document No.";
                  DocLineApp2."Line No." := DocLine2."Line No.";
                  DocLineApp2.MODIFY;
                UNTIL DocLineApp.NEXT = 0;

              DocLineDim.RESET;
              DocLineDim.SETCURRENTKEY("Document Line ID");
              DocLineDim.SETRANGE("Document Line ID", TempDocLine.ID);
              IF DocLineDim.FINDSET(TRUE,TRUE) THEN
                REPEAT
                  DocLineDim2.GET(DocLineDim.ID);
                  DocLineDim2."Document No." := DocLine2."Document No.";
                  DocLineDim2."Line No." := DocLine2."Line No.";
                  DocLineDim2.MODIFY;
                UNTIL DocLineDim.NEXT = 0;
            UNTIL TempDocLine.NEXT = 0;
          UNTIL TempDocHead.NEXT = 0;
      END;
    END;

    PROCEDURE CopyReqToArchive@1100285010();
    VAR
      ExDoc@1100285001 : Record 12013608;
      ExDocLine@1100285002 : Record 12013609;
      ExDocLineDim@1100285003 : Record 12013611;
      ArchivedExDoc@1100285006 : Record 12013622;
      ArchivedExDocLine@1100285005 : Record 12013623;
      ArchivedExDocLineDim@1100285004 : Record 12013625;
      ExFlowSetup@1100285000 : Record 12013601;
    BEGIN
      ExFlowSetup.GET;

      ExDoc.RESET;
      ExDoc.LOCKTABLE;
      ExDoc.SETCURRENTKEY("Document Type","Document No.");
      ExDoc.SETRANGE("Document Type", ExDoc."Document Type"::Requisition);
      IF ExDoc.FINDSET(TRUE) THEN
        REPEAT
          ArchivedExDoc.SETCURRENTKEY("Old ID");
          ArchivedExDoc.SETRANGE("Old ID", ExDoc.ID);
          IF NOT ArchivedExDoc.FINDFIRST THEN BEGIN
            UpdateDocHead(ExDoc,ExFlowSetup);
            ExDoc.MODIFY;

            ArchivedExDoc.INIT;
            ArchivedExDoc.TRANSFERFIELDS(ExDoc);
            ArchivedExDoc.ID := 0;
            ArchivedExDoc."Old ID" := ExDoc.ID;
            ArchivedExDoc."Archive Type" := ArchivedExDoc."Archive Type"::"Archived requisition";
            ArchivedExDoc.INSERT;

            ExDoc."Requisition Archive ID" := ArchivedExDoc.ID;
            ExDoc.MODIFY;

            ExDocLine.RESET;
            ExDocLine.SETCURRENTKEY("Document ID");
            ExDocLine.SETRANGE("Document ID", ExDoc.ID);
            IF ExDocLine.FINDSET(TRUE) THEN
              REPEAT
                ArchivedExDocLine.INIT;
                ArchivedExDocLine.TRANSFERFIELDS(ExDocLine);
                ArchivedExDocLine.ID := 0;
                ArchivedExDocLine."Document ID" := ArchivedExDoc.ID;
                ArchivedExDocLine."Old ID" := ExDocLine.ID;
                ArchivedExDocLine."Old Document ID" := ExDoc.ID;
                ArchivedExDocLine.INSERT;

                ExDocLine."Requisition Archive Doc ID" := ArchivedExDocLine."Document ID";
                ExDocLine."Requisition Archive Line ID" := ArchivedExDocLine.ID;
                ExDocLine.MODIFY;

                ExDocLineDim.RESET;
                ExDocLineDim.SETCURRENTKEY("Document Line ID");
                ExDocLineDim.SETRANGE("Document Line ID", ExDocLine.ID);
                IF ExDocLineDim.FINDSET THEN
                  REPEAT
                    ArchivedExDocLineDim.INIT;
                    ArchivedExDocLineDim.TRANSFERFIELDS(ExDocLineDim);
                    ArchivedExDocLineDim.ID := 0;
                    ArchivedExDocLineDim."Document Line ID" := ArchivedExDocLine.ID;
                    ArchivedExDocLineDim."Document ID" := ArchivedExDoc.ID;
                    ArchivedExDocLineDim."Old ID" := ExDocLineDim.ID;
                    ArchivedExDocLineDim."Old Document Line ID" := ExDocLineDim."Document Line ID";
                    ArchivedExDocLineDim.INSERT;
                  UNTIL ExDocLineDim.NEXT = 0;
              UNTIL ExDocLine.NEXT = 0;
          END;
        UNTIL ExDoc.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

