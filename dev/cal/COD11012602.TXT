OBJECT Codeunit 11012602 UAR Hour Acc.-Post Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1210190000 : TextConst 'DEU=Kostentr„ger ''%1'' muss von der Kostenart ''Arbeit'' sein, in Zeile %2, Woche %3-%4, Mitarbeiter ''%5''.;ENU=Cost Object ''%1'' must be of the Cost Type ''Labor'', in line %2, week %3-%4, employee ''%5''.;NLD=Kostendrager ''%1'' moet van de kostensoort ''Arbeid'' zijn, in regel %2, week %3-%4, werknemer ''%5''.;SVE=Kostnadsobjekt ''%1'' m†ste vara av kostnadstyp ''arbetskraft'', p† rad %2, vecka %3-%4, anst„lld ''%5''.';
      HrsSetupRec@1210190018 : Record 11012600;
      HourAccRec@1210190002 : Record 11012609;
      HourAccLineRec@1210190001 : Record 11012610;
      BlockHoursRec@1210190037 : Record 11012612;
      PostedBlockHoursRec@1210190039 : Record 11012616;
      EmplRec@1210190006 : Record 5200;
      TradeAssRec@1100525001 : Record 11012015;
      ProjSetupRec@1210190035 : Record 315;
      ProjRec@1210190008 : Record 11072003;
      ProjTypeRec@1210190004 : Record 11012009;
      ProjElemRec@1210190009 : Record 11012010;
      ServOrderRec@1100485001 : Record 11012823;
      ServTypeRec@1100485003 : Record 11012814;
      CostCompRec@1210190010 : Record 11012012;
      EmplCostCompRec@1210190029 : Record 11012606;
      DimValRec@1210190013 : Record 349;
      EmplCostObjectHourRateRec@1210190023 : Record 11012607;
      VendorCostObjectHourRateRec@1210190040 : Record 11012608;
      VendorAccountsRec@1210190031 : Record 11012608;
      PurchHeadRec@1210190021 : Record 38;
      PurchLineRec@1210190045 : Record 39;
      GLSetupRec@1210190042 : Record 98;
      GenJnlLineRec@1210190003 : Record 81;
      TmpBlockTimeRec@1210190011 : TEMPORARY Record 11012602;
      TmpHoursByBlockTimeRec@1210190012 : TEMPORARY Record 11012028;
      HourAccCheckLineCU@1210190005 : Codeunit 11012601;
      HourAccFunctionsCU@1210190030 : Codeunit 11012607;
      DimMgtCU@1210190014 : Codeunit 408;
      JnlTemplateName@1210190027 : Code[10];
      JnlBatchName@1210190026 : Code[10];
      WipAccountNo@1100485002 : Code[20];
      CostObject@1210190016 : Code[20];
      LastAPEmpl@1210190032 : Code[20];
      gPurchOrderNo@1210190043 : Code[20];
      NoOfHours@1210190017 : Decimal;
      Text002@1210190007 : TextConst 'DEU=Tabelle ''%1'' nicht eingegeben.;ENU=Table ''%1'' not filled.;NLD=Tabel ''%1'' niet gevuld.;SVE=Tabell ''%1'' „r inte ifylld.';
      FirstLineNo@1210190025 : Integer;
      NextLineNo@1210190019 : Integer;
      Text003@1210190028 : TextConst 'DEU=Stundentarif pro Kostentr„ger und/oder Mitarbeiter/Kostentr„ger nicht vorhanden, Kostentr„ger ''%1'', Mitarbeiter ''%2''.;ENU=Hour Rate by Cost Object and/or by Employee/Cost Object not present, Cost Object ''%1'', Employee ''%2''.;NLD=Uurtarief per kostendrager en/of per werknemer/kostendrager niet aanwezig, kostendrager ''%1'', werknemer ''%2''.;SVE=Timtaxa efter kostnadsobjekt och/eller efter anst„lld/kostnadsobjekt finns inte, kostnadsobjekt %1, anst„lld %2.';
      PauseDayNo@1210190015 : Integer;
      LastAPYear@1210190033 : Integer;
      LastAPWeek@1210190034 : Integer;
      NextPurchLineNo@1210190044 : Integer;
      gReversePosting@1210190038 : Boolean;
      Text005@1210190041 : TextConst 'DEU=Stuntentarif pro Kreditor/Kostentr„ger nicht vorhanden, Kostentr„ger ''%1'', Kreditor ''%2''.;ENU=Hour Rate by Vendor/Cost Object not present, Cost Object ''%1'', Vendor ''%2''.;NLD=Uurtarief per leverancier/kostendrager niet aanwezig, kostendrager ''%1'', leverancier ''%2''.;SVE=Timtaxa efter leverant”r/kostnadsobjekt finns inte, kostnadsobjekt ''%1'', leverant”r ''% 2''.';
      Text006@1210190022 : TextConst 'DEU=''Deckungsrechnung Geh„lter'' von Kostentr„ger ''%1'' oder ''Wirtschaftsverband'' ''%6'' muss eingegeben werden, in Zeile %2, Woche %3-%4, Mitarbeiter ''%5''.;ENU=Wage Coverage Account of Cost Object ''%1'' or ''Trade Asscociation ''%6'' must be filled, in line %2, week %3-%4, employee ''%5''.;NLD=''Dekkingsrekening lonen'' van kostendrager ''%1''  of  van vakgroep ''%6'' moet gevuld worden, in regel %2, week %3-%4, werknemer ''%5''.';
      Text007@1210190046 : TextConst 'DEU=Stunden;ENU=Hours;NLD=Uren;NOR="Timer ";SVE=Timmar';
      Text008@1210190047 : TextConst 'DEU=Produktbuchungsgruppe muss bei Rechnung %1 angegeben werden;ENU=Product Posting Group should be filled in for account %1;NLD=Productboekingsgroep moet worden opgegeven bij rekening %1;NOR=Produktsregnskapsmalen m† fylles ut for konto %1;SVE=Produktbokf”ringsmallen m†ste fyllas i f”r kontot %1';
      RateRefDate@1100485005 : Date;
      CoverageAccount@1100525000 : Code[20];

    PROCEDURE RunWithCheck@1(VAR HourAccRec2@1000 : Record 11012609;VAR HourAccLineRec2@1210190000 : Record 11012610;VAR IOPurchOrderNo@1210190002 : Code[20];IReversePosting@1210190001 : Boolean);
    BEGIN
      gPurchOrderNo := IOPurchOrderNo;
      gReversePosting := IReversePosting;
      HourAccRec.COPY(HourAccRec2);
      HourAccLineRec.COPY(HourAccLineRec2);
      Code;
      IOPurchOrderNo := gPurchOrderNo;
      HourAccRec2 := HourAccRec;
      HourAccLineRec2 := HourAccLineRec;
    END;

    PROCEDURE Code@1210190000();
    BEGIN
      WITH HourAccLineRec DO BEGIN
        IF EmptyLine THEN
          EXIT;

        HrsSetupRec.GET;
        HrsSetupRec.TESTFIELD("Hour Acc. Rail CLA", TRUE);
        HrsSetupRec.TESTFIELD("Journal Template");
        HrsSetupRec.TESTFIELD("Journal Batch");
        GLSetupRec.GET;
        GLSetupRec.TESTFIELD("Global Dimension 1 Code");
        GLSetupRec.TESTFIELD("Global Dimension 2 Code");

        HourAccCheckLineCU.RunCheck(HourAccRec, HourAccLineRec);

        IF "Receiving Company" <> '' THEN BEGIN
          ProjSetupRec.CHANGECOMPANY("Receiving Company");
          ProjRec.CHANGECOMPANY("Receiving Company");
          ProjTypeRec.CHANGECOMPANY("Receiving Company");
          ProjElemRec.CHANGECOMPANY("Receiving Company");
          DimValRec.CHANGECOMPANY("Receiving Company");
          ServOrderRec.CHANGECOMPANY("Receiving Company");
          ServTypeRec.CHANGECOMPANY("Receiving Company");
          TradeAssRec.CHANGECOMPANY("Receiving Company");       //DP01043.n
        END ELSE BEGIN
          ProjSetupRec.CHANGECOMPANY(COMPANYNAME);
          ProjRec.CHANGECOMPANY(COMPANYNAME);
          ProjTypeRec.CHANGECOMPANY(COMPANYNAME);
          ProjElemRec.CHANGECOMPANY(COMPANYNAME);
          DimValRec.CHANGECOMPANY(COMPANYNAME);
          ServOrderRec.CHANGECOMPANY(COMPANYNAME);
          ServTypeRec.CHANGECOMPANY(COMPANYNAME);
          TradeAssRec.CHANGECOMPANY(COMPANYNAME);               //DP01043.n
        END;
        ProjSetupRec.GET;
        EmplRec.GET("Employee No.");
        EmplRec.TESTFIELD("Global Dimension 1 Code");
        TradeAssRec.INIT;                                       //DP01043.n
        IF TradeAssRec.GET(EmplRec."Trade Association") THEN;   //DP01043.n

        IF ("Project No." <> '') THEN BEGIN
          ProjRec.GET("Project No.");
          ProjTypeRec.GET(ProjRec."Project Type");
          ProjRec.CALCFIELDS("UAR Task Pause Allowed");
          IF Element <> '' THEN
            ProjElemRec.GET("Project No.", Element);
        END;

        CASE Type OF
          Type::Project:
            BEGIN
              TESTFIELD("Project No.");
              IF (ProjSetupRec."Provisions at Closure" = TRUE) AND
                 (ProjRec."Project Status" >= ProjRec."Project Status"::Finished)
              THEN BEGIN
                ProjTypeRec.TESTFIELD("Provision Account Labor");
                WipAccountNo := ProjTypeRec."Provision Account Labor";
              END ELSE BEGIN
                ProjTypeRec.TESTFIELD("WIP Account Labor");
                WipAccountNo := ProjTypeRec."WIP Account Labor";
              END;
              ProjRec.TESTFIELD("Global Dimension 1 Code");  //* Melding 13325
            END;
          Type::Service:
            BEGIN
              ServOrderRec.GET("Service Order No.");
              IF "Additional Cost (Service)" THEN
                ServTypeRec.GET(ServOrderRec."Service Type (Other)")
              ELSE
                ServTypeRec.GET(ServOrderRec."Service Type");
              ServTypeRec.TESTFIELD("WIP Account Labor");
              WipAccountNo := ServTypeRec."WIP Account Labor";
              ServOrderRec.TESTFIELD("Global Dimension 1 Code");  //* Melding 13325
              IF ("Project No." = '') THEN BEGIN
                ProjRec."UAR Task" := HrsSetupRec."UAR Task Worked Hours";
                ProjRec."UAR Task Pause Allowed" := TRUE;
                ProjRec."UAR Task Travel Hours Allowed" := TRUE;
                ProjRec."UAR Indirect" := FALSE;
              END;
            END;
        END;

        CostCompRec.GET("Cost Component");
        EmplCostCompRec.GET("Employee No.", "Cost Component");

        TmpHoursByBlockTimeRec.DELETEALL;
        IF gReversePosting THEN
          FillTmpHoursByBlockTimeReverse()
        ELSE BEGIN
          IF (Year <> LastAPYear) OR (Week <> LastAPWeek) OR ("Employee No." <> LastAPEmpl) THEN BEGIN
            HourAccFunctionsCU.BuildAutomaticPause(Year, Week, "Employee No.");
            LastAPYear := Year;
            LastAPWeek := Week;
            LastAPEmpl := "Employee No.";
          END;
          HourAccFunctionsCU.RecalculateNumberOfHours(HourAccLineRec, 'PostHour');
          GetReferenceDate();

          BlockHoursRec.SETRANGE(Year,Year);
          BlockHoursRec.SETRANGE(Week,Week);
          BlockHoursRec.SETRANGE("Employee No.","Employee No.");
          BlockHoursRec.SETRANGE("Line No.","Line No.");
          BlockHoursRec.DELETEALL;
          FillTmpBlockTime();
          CalculateBlockHours();
        END;

        IF TmpHoursByBlockTimeRec.FIND('-') THEN BEGIN
          REPEAT
            IF TmpHoursByBlockTimeRec."Number of Hours" <> 0 THEN BEGIN
              CostObject := "Cost Component" + TmpHoursByBlockTimeRec.Code;
              NoOfHours := TmpHoursByBlockTimeRec."Number of Hours";

              DimMgtCU.GetDimValueRec(2, CostObject, DimValRec, TRUE,'');
              DimValRec.TESTFIELD(Blocked, FALSE);
              IF (DimValRec."Cost Type" <> DimValRec."Cost Type"::Labor) OR (CostObject = '') THEN
                ERROR(Text001, CostObject, "Line No.", Year, Week, "Employee No.");

              //DP01043.so
              //IF DimValRec."Wage Coverage Account" = '' THEN
              //  ERROR(Text006, CostObject, "Line No.", Year, Week, "Employee No.");
              //DP01043.eo

              //DP01043.sn
              CoverageAccount := DimValRec."Wage Coverage Account";
              IF CoverageAccount = '' THEN
                CoverageAccount := TradeAssRec."Wage Coverage Account";

              IF CoverageAccount = '' THEN
                ERROR(Text006, CostObject, "Line No.", Year, Week, "Employee No.",EmplRec."Trade Association");
              //DP01043.en

              IF NOT ProjRec."UAR Indirect" THEN BEGIN
                //DP01043.so
                //IF DimValRec."Wage Coverage Account" = '' THEN
                //  ERROR(Text006, CostObject, "Line No.", Year, Week, "Employee No.");
                //DP01043.eo
                IF HourAccRec.External THEN BEGIN
                  VendorAccountsRec.GET(HourAccRec.Employer, CostObject);
                  VendorAccountsRec.TESTFIELD("Account Hire Cost");
                  VendorAccountsRec.TESTFIELD("Account Commitments");
                END;
                PostHours();
              END ELSE BEGIN
                IF NOT gReversePosting THEN
                  WriteBlockHoursByLine(NoOfHours, 0, 0, 0, 0);
              END;
            END;
          UNTIL TmpHoursByBlockTimeRec.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE FillTmpBlockTime@1210190003();
    VAR
      lvBlockTimeRec@1210190000 : Record 11012602;
    BEGIN
      // Day not used as option in temporary table, but (mis)used as number (dayno-7, dayno / dayno+7 for prev/curr./next week).

      IF TmpBlockTimeRec.FIND('-') THEN
        EXIT;

      WITH lvBlockTimeRec DO BEGIN
        IF NOT FIND('+') THEN
          ERROR(Text002, TABLECAPTION);

        TmpBlockTimeRec := lvBlockTimeRec;

        FIND('-');
        REPEAT
          TESTFIELD("Block Time Code");
          IF "Block Time Code" <> TmpBlockTimeRec."Block Time Code" THEN BEGIN
            TmpBlockTimeRec := lvBlockTimeRec;

            TmpBlockTimeRec.Day := lvBlockTimeRec.Day + 1;
            TmpBlockTimeRec.INSERT;

            TmpBlockTimeRec.Day := lvBlockTimeRec.Day + 1 - 7;
            TmpBlockTimeRec.INSERT;

            TmpBlockTimeRec.Day := lvBlockTimeRec.Day + 1 + 7;
            TmpBlockTimeRec.INSERT;

            TmpBlockTimeRec.Day := lvBlockTimeRec.Day + 1 + 14;
            TmpBlockTimeRec.INSERT;
          END;
        UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE CalculateBlockHours@1210190002();
    VAR
      lvHourAccPauseRec@1210190000 : Record 11012611;
      lvHours@1210190008 : Decimal;
      lvStartTime@1210190009 : Time;
      lvEndTime@1210190010 : Time;
    BEGIN
      WITH HourAccLineRec DO BEGIN
        IF ("Monday From" <> 0T) AND ("Monday To" <> 0T) THEN
          CalculateHoursByBlockCode(1, "Monday From", "Monday To", 1);
        IF ("Tuesday From" <> 0T) AND ("Tuesday To" <> 0T) THEN
          CalculateHoursByBlockCode(2, "Tuesday From", "Tuesday To", 1);
        IF ("Wednesday From" <> 0T) AND ("Wednesday To" <> 0T) THEN
          CalculateHoursByBlockCode(3, "Wednesday From", "Wednesday To", 1);
        IF ("Thursday From" <> 0T) AND ("Thursday To" <> 0T) THEN
          CalculateHoursByBlockCode(4, "Thursday From", "Thursday To", 1);
        IF ("Friday From" <> 0T) AND ("Friday To" <> 0T) THEN
          CalculateHoursByBlockCode(5, "Friday From", "Friday To", 1);
        IF ("Saturday From" <> 0T) AND ("Saturday To" <> 0T) THEN
          CalculateHoursByBlockCode(6, "Saturday From", "Saturday To", 1);
        IF ("Sunday From" <> 0T) AND ("Sunday To" <> 0T) THEN
          CalculateHoursByBlockCode(7, "Sunday From", "Sunday To", 1);
      END;

      IF (NOT ProjRec."UAR Task Pause Allowed") THEN
        EXIT;

      WITH lvHourAccPauseRec DO BEGIN
        SETRANGE(Year, HourAccLineRec.Year);
        SETRANGE(Week, HourAccLineRec.Week);
        SETRANGE("Employee No.", HourAccLineRec."Employee No.");
        SETRANGE("Hour Acc. Line No.", HourAccLineRec."Line No.");
        IF FIND('-') THEN BEGIN
          REPEAT
            IF ("Monday From" <> 0T) AND ("Monday To" <> 0T) THEN BEGIN
              PauseDayNo := FillPauseDayNo(1, "Monday From", HourAccLineRec."Monday From");
              CalculateHoursByBlockCode(PauseDayNo, "Monday From", "Monday To", -1);
              //lvPauseMondayBln := TRUE;
            END;
            IF ("Tuesday From" <> 0T) AND ("Tuesday To" <> 0T) THEN BEGIN
              PauseDayNo := FillPauseDayNo(2, "Tuesday From", HourAccLineRec."Tuesday From");
              CalculateHoursByBlockCode(PauseDayNo, "Tuesday From", "Tuesday To", -1);
              //lvPauseTuesdayBln := TRUE;
            END;
            IF ("Wednesday From" <> 0T) AND ("Wednesday To" <> 0T) THEN BEGIN
              PauseDayNo := FillPauseDayNo(3, "Wednesday From", HourAccLineRec."Wednesday From");
              CalculateHoursByBlockCode(PauseDayNo, "Wednesday From", "Wednesday To", -1);
              //lvPauseWednesdayBln := TRUE;
            END;
            IF ("Thursday From" <> 0T) AND ("Thursday To" <> 0T) THEN BEGIN
              PauseDayNo := FillPauseDayNo(4, "Thursday From", HourAccLineRec."Thursday From");
              CalculateHoursByBlockCode(PauseDayNo, "Thursday From", "Thursday To", -1);
              //lvPauseThursdayBln := TRUE;
            END;
            IF ("Friday From" <> 0T) AND ("Friday To" <> 0T) THEN BEGIN
              PauseDayNo := FillPauseDayNo(5, "Friday From", HourAccLineRec."Friday From");
              CalculateHoursByBlockCode(PauseDayNo, "Friday From", "Friday To", -1);
              //lvPauseFridayBln := TRUE;
            END;
            IF ("Saturday From" <> 0T) AND ("Saturday To" <> 0T) THEN BEGIN
              PauseDayNo := FillPauseDayNo(6, "Saturday From", HourAccLineRec."Saturday From");
              CalculateHoursByBlockCode(PauseDayNo, "Saturday From", "Saturday To", -1);
              //lvPauseSaterdayBln := TRUE;
            END;
            IF ("Sunday From" <> 0T) AND ("Sunday To" <> 0T) THEN BEGIN
              PauseDayNo := FillPauseDayNo(7, "Sunday From", HourAccLineRec."Sunday From");
              CalculateHoursByBlockCode(PauseDayNo, "Sunday From", "Sunday To", -1);
              //lvPauseSundayBln := TRUE;
            END;
          UNTIL NEXT = 0;
        END;
      END;

      IF (HrsSetupRec."Default No. of Hours Pause" = 0) THEN
        EXIT;

      WITH HourAccLineRec DO BEGIN
        IF ("Monday From" <> 0T) AND ("Monday To" <> 0T) THEN BEGIN
          IF HourAccFunctionsCU.CheckAutomaticPause(HourAccLineRec, 1, lvStartTime, lvEndTime) THEN BEGIN
            PauseDayNo := FillPauseDayNo(1, lvStartTime, "Monday From");
            CalculateHoursByBlockCode(PauseDayNo, lvStartTime, lvEndTime, -1);
          END;
        END;
        IF ("Tuesday From" <> 0T) AND ("Tuesday To" <> 0T) THEN BEGIN
          IF HourAccFunctionsCU.CheckAutomaticPause(HourAccLineRec, 2, lvStartTime, lvEndTime) THEN BEGIN
            PauseDayNo := FillPauseDayNo(2, lvStartTime, "Tuesday From");
            CalculateHoursByBlockCode(PauseDayNo, lvStartTime, lvEndTime, -1);
          END;
        END;
        IF ("Wednesday From" <> 0T) AND ("Wednesday To" <> 0T) THEN BEGIN
          IF HourAccFunctionsCU.CheckAutomaticPause(HourAccLineRec, 3, lvStartTime, lvEndTime) THEN BEGIN
            PauseDayNo := FillPauseDayNo(3, lvStartTime, "Wednesday From");
            CalculateHoursByBlockCode(PauseDayNo, lvStartTime, lvEndTime, -1);
          END;
        END;
        IF ("Thursday From" <> 0T) AND ("Thursday To" <> 0T) THEN BEGIN
          IF HourAccFunctionsCU.CheckAutomaticPause(HourAccLineRec, 4, lvStartTime, lvEndTime) THEN BEGIN
            PauseDayNo := FillPauseDayNo(4, lvStartTime, "Thursday From");
            CalculateHoursByBlockCode(PauseDayNo, lvStartTime, lvEndTime, -1);
          END;
        END;
        IF ("Friday From" <> 0T) AND ("Friday To" <> 0T) THEN BEGIN
          IF HourAccFunctionsCU.CheckAutomaticPause(HourAccLineRec, 5, lvStartTime, lvEndTime) THEN BEGIN
            PauseDayNo := FillPauseDayNo(5, lvStartTime, "Friday From");
            CalculateHoursByBlockCode(PauseDayNo, lvStartTime, lvEndTime, -1);
          END;
        END;
        IF ("Saturday From" <> 0T) AND ("Saturday To" <> 0T) THEN BEGIN
          IF HourAccFunctionsCU.CheckAutomaticPause(HourAccLineRec, 6, lvStartTime, lvEndTime) THEN BEGIN
            PauseDayNo := FillPauseDayNo(6, lvStartTime, "Saturday From");
            CalculateHoursByBlockCode(PauseDayNo, lvStartTime, lvEndTime, -1);
          END;
        END;
        IF ("Sunday From" <> 0T) AND ("Sunday To" <> 0T) THEN BEGIN
          IF HourAccFunctionsCU.CheckAutomaticPause(HourAccLineRec, 7, lvStartTime, lvEndTime) THEN BEGIN
            PauseDayNo := FillPauseDayNo(7, lvStartTime, "Sunday From");
            CalculateHoursByBlockCode(PauseDayNo, lvStartTime, lvEndTime, -1);
          END;
        END;
      END;

      { Oude sitautie uitgeschakeld (automatische pauze aftrek per record / dag
      WITH HourAccLineRec DO BEGIN
        IF (NOT lvPauseMondayBln) AND ("Monday From" <> 0T) AND ("Monday To" <> 0T) THEN BEGIN
          lvHours := HourAccFunctionsCU.CalcHoursWithinStartEndTime("Monday From", "Monday To");
          IF lvHours >= HrsSetupRec."Min. WorkTime Pause Deduction" THEN BEGIN
            lvStartTime := TimeAddedWithNoOfHours("Monday From", HrsSetupRec."Pause after Start Work Time");
            lvEndTime   := TimeAddedWithNoOfHours(lvStartTime, HrsSetupRec."Default No. of Hours Pause");
            PauseDayNo := FillPauseDayNo(1, lvStartTime, "Monday From");
            CalculateHoursByBlockCode(PauseDayNo, lvStartTime, lvEndTime, -1);
          END;
        END;
        IF (NOT lvPauseTuesdayBln) AND ("Tuesday From" <> 0T) AND ("Tuesday To" <> 0T) THEN BEGIN
          lvHours := HourAccFunctionsCU.CalcHoursWithinStartEndTime("Tuesday From", "Tuesday To");
          IF lvHours >= HrsSetupRec."Min. WorkTime Pause Deduction" THEN BEGIN
            lvStartTime := TimeAddedWithNoOfHours("Tuesday From", HrsSetupRec."Pause after Start Work Time");
            lvEndTime   := TimeAddedWithNoOfHours(lvStartTime, HrsSetupRec."Default No. of Hours Pause");
            PauseDayNo := FillPauseDayNo(2, lvStartTime, "Tuesday From");
            CalculateHoursByBlockCode(PauseDayNo, lvStartTime, lvEndTime, -1);
          END;
        END;
        IF (NOT lvPauseWednesdayBln) AND ("Wednesday From" <> 0T) AND ("Wednesday To" <> 0T) THEN BEGIN
          lvHours := HourAccFunctionsCU.CalcHoursWithinStartEndTime("Wednesday From", "Wednesday To");
          IF lvHours >= HrsSetupRec."Min. WorkTime Pause Deduction" THEN BEGIN
            lvStartTime := TimeAddedWithNoOfHours("Wednesday From", HrsSetupRec."Pause after Start Work Time");
            lvEndTime   := TimeAddedWithNoOfHours(lvStartTime, HrsSetupRec."Default No. of Hours Pause");
            PauseDayNo := FillPauseDayNo(3, lvStartTime, "Wednesday From");
            CalculateHoursByBlockCode(PauseDayNo, lvStartTime, lvEndTime, -1);
          END;
        END;
        IF (NOT lvPauseThursdayBln) AND ("Thursday From" <> 0T) AND ("Thursday To" <> 0T) THEN BEGIN
          lvHours := HourAccFunctionsCU.CalcHoursWithinStartEndTime("Thursday From", "Thursday To");
          IF lvHours >= HrsSetupRec."Min. WorkTime Pause Deduction" THEN BEGIN
            lvStartTime := TimeAddedWithNoOfHours("Thursday From", HrsSetupRec."Pause after Start Work Time");
            lvEndTime   := TimeAddedWithNoOfHours(lvStartTime, HrsSetupRec."Default No. of Hours Pause");
            PauseDayNo := FillPauseDayNo(4, lvStartTime, "Thursday From");
            CalculateHoursByBlockCode(PauseDayNo, lvStartTime, lvEndTime, -1);
          END;
        END;
        IF (NOT lvPauseFridayBln) AND ("Friday From" <> 0T) AND ("Friday To" <> 0T) THEN BEGIN
          lvHours := HourAccFunctionsCU.CalcHoursWithinStartEndTime("Friday From", "Friday To");
          IF lvHours >= HrsSetupRec."Min. WorkTime Pause Deduction" THEN BEGIN
            lvStartTime := TimeAddedWithNoOfHours("Friday From", HrsSetupRec."Pause after Start Work Time");
            lvEndTime   := TimeAddedWithNoOfHours(lvStartTime, HrsSetupRec."Default No. of Hours Pause");
            PauseDayNo := FillPauseDayNo(5, lvStartTime, "Friday From");
            CalculateHoursByBlockCode(PauseDayNo, lvStartTime, lvEndTime, -1);
          END;
        END;
        IF (NOT lvPauseSaterdayBln) AND ("Saterday From" <> 0T) AND ("Saterday To" <> 0T) THEN BEGIN
          lvHours := HourAccFunctionsCU.CalcHoursWithinStartEndTime("Saterday From", "Saterday To");
          IF lvHours >= HrsSetupRec."Min. WorkTime Pause Deduction" THEN BEGIN
            lvStartTime := TimeAddedWithNoOfHours("Saterday From", HrsSetupRec."Pause after Start Work Time");
            lvEndTime   := TimeAddedWithNoOfHours(lvStartTime, HrsSetupRec."Default No. of Hours Pause");
            PauseDayNo := FillPauseDayNo(6, lvStartTime, "Saterday From");
            CalculateHoursByBlockCode(PauseDayNo, lvStartTime, lvEndTime, -1);
          END;
        END;
        IF (NOT lvPauseSundayBln) AND ("Sunday From" <> 0T) AND ("Sunday To" <> 0T) THEN BEGIN
          lvHours := HourAccFunctionsCU.CalcHoursWithinStartEndTime("Sunday From", "Sunday To");
          IF lvHours >= HrsSetupRec."Min. WorkTime Pause Deduction" THEN BEGIN
            lvStartTime := TimeAddedWithNoOfHours("Sunday From", HrsSetupRec."Pause after Start Work Time");
            lvEndTime   := TimeAddedWithNoOfHours(lvStartTime, HrsSetupRec."Default No. of Hours Pause");
            PauseDayNo := FillPauseDayNo(7, lvStartTime, "Sunday From");
            CalculateHoursByBlockCode(PauseDayNo, lvStartTime, lvEndTime, -1);
          END;
        END;
      END;
      }
    END;

    PROCEDURE FillPauseDayNo@1210190009(IDayNo@1210190000 : Integer;IPauseStartTime@1210190001 : Time;IWorkStartTime@1210190002 : Time) : Integer;
    BEGIN
      IF (IPauseStartTime < IWorkStartTime) THEN BEGIN
        IF (IDayNo < 7) THEN
          EXIT(IDayNo + 1)
        ELSE
          EXIT(1);
      END;

      EXIT(IDayNo);
    END;

    PROCEDURE CalculateHoursByBlockCode@1210190001(IDayNo@1210190000 : Integer;IStartTime@1210190001 : Time;IEndTime@1210190002 : Time;IFactor@1210190009 : Integer);
    VAR
      lvStartDay@1210190004 : Integer;
      lvEndDay@1210190005 : Integer;
      lvStartTime@1210190006 : Time;
      lvEndTime@1210190007 : Time;
      lvBlockTimeCode@1210190003 : Code[1];
      lvEndRepeat@1210190008 : Boolean;
    BEGIN
      // See documentation in function 'FillTmpBlockTime' for the meaning of the field 'Day' in the temporary table.

      lvStartDay := IDayNo;
      lvStartTime := IStartTime;
      lvEndDay := IDayNo;
      lvEndTime := IEndTime;
      IF IEndTime < IStartTime THEN
        lvEndDay := lvEndDay + 1;

      WITH TmpBlockTimeRec DO BEGIN
        Day := lvStartDay;
        "Starting Time" := lvStartTime;
        FIND('=<');
        lvEndRepeat := FALSE;
        REPEAT
          lvBlockTimeCode := "Block Time Code";
          NEXT;
          IF (Day > lvEndDay) OR ((Day = lvEndDay) AND ("Starting Time" >= lvEndTime)) THEN BEGIN
            WriteHoursByBlockCode(lvBlockTimeCode, lvStartTime, lvEndTime, IFactor);
            lvEndRepeat := TRUE;
          END ELSE BEGIN
            WriteHoursByBlockCode( lvBlockTimeCode, lvStartTime, "Starting Time", IFactor);
            lvStartDay := Day;
            lvStartTime := "Starting Time";
          END;
        UNTIL lvEndRepeat
      END;
    END;

    PROCEDURE WriteHoursByBlockCode@1210190005(IBlockTimeCode@1210190000 : Code[1];IStartTime@1210190001 : Time;IEndTime@1210190003 : Time;IFactor@1210190002 : Integer);
    VAR
      lvHours@1210190005 : Decimal;
    BEGIN
      WITH TmpHoursByBlockTimeRec DO BEGIN
        lvHours := HourAccFunctionsCU.CalcHoursWithinStartEndTime(IStartTime, IEndTime) * IFactor;

        IF GET(IBlockTimeCode) THEN BEGIN
          "Number of Hours" := "Number of Hours" + lvHours;
          MODIFY;
        END ELSE BEGIN
          INIT;
          Code := IBlockTimeCode;
          "Number of Hours" := lvHours;
          INSERT;
        END;
      END;
    END;

    PROCEDURE FillTmpHoursByBlockTimeReverse@1210190013();
    BEGIN
      WITH PostedBlockHoursRec DO BEGIN
        RESET;
        SETRANGE(Year, HourAccLineRec.Year);
        SETRANGE(Week, HourAccLineRec.Week);
        SETRANGE("Employee No.", HourAccLineRec."Employee No.");
        SETRANGE("Line No.", HourAccLineRec."Line No.");
        IF FIND('-') THEN BEGIN
          REPEAT
            TmpHoursByBlockTimeRec.Code := "Block Time Code";
            TmpHoursByBlockTimeRec."Number of Hours" := -Hours;
            TmpHoursByBlockTimeRec.INSERT;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE PostHours@1210190006();
    VAR
      lvHourRate@1210190000 : Decimal;
      lvHourAmount@1210190001 : Decimal;
      lvHireRate@1210190002 : Decimal;
      lvHireAmount@1210190003 : Decimal;
    BEGIN
      WITH GenJnlLineRec DO BEGIN
        lvHourRate := 0;
        lvHourAmount := 0;
        lvHireRate := 0;
        lvHireAmount := 0;

        IF NextLineNo = 0 THEN BEGIN
          LOCKTABLE;
          JnlTemplateName := HrsSetupRec."Journal Template";
          JnlBatchName := HrsSetupRec."Journal Batch";

          SETRANGE("Journal Template Name", JnlTemplateName);
          SETRANGE("Journal Batch Name", JnlBatchName);

          IF NOT FIND('+') THEN
            "Line No." := 0;
          NextLineNo :=  "Line No." + 1;
          FirstLineNo := NextLineNo;
        END;

        //Post Line
        CLEAR(GenJnlLineRec);
        "Journal Template Name" := JnlTemplateName;
        "Journal Batch Name" := JnlBatchName;
        "Account Type" := "Account Type"::"G/L Account";
        "Document No." := HourAccRec."Document No.";
        "Posting Date" := HourAccRec."Posting Date";
        "Unit of Measure Code" := DimValRec."Unit of Measure";
        "System-Created Entry" := TRUE;
        "Employee No." := HourAccRec."Employee No.";
        Description := COPYSTR(EmplRec."Full Name", 1, MAXSTRLEN(Description));

        //Debit
        "Line No." := NextLineNo;
        "Receiving Company" := HourAccLineRec."Receiving Company";
        "Account No." := WipAccountNo;
        "Job No." := HourAccLineRec."Project No.";
        Element := HourAccLineRec.Element;
        IF HourAccLineRec.Type = HourAccLineRec.Type::Service THEN BEGIN
          "Service Order No." := HourAccLineRec."Service Order No.";
          GetServiceCategory;
          "Service Location No." := HourAccLineRec."Service Location No.";
          "Service Contract No." := HourAccLineRec."Service Contract No.";
          "Additional Cost (Service)" := HourAccLineRec."Additional Cost (Service)";
        END;
        "Shortcut Dimension 1 Code" := '';
        //* Melding 13325 (26-11-2008): Kostenplaats van project of SO, nav overleg Andre Overeem en Ruud Berfelo (Strukton)
        CASE HourAccLineRec.Type OF
          HourAccLineRec.Type::Project: "Shortcut Dimension 1 Code" := ProjRec."Global Dimension 1 Code";
          HourAccLineRec.Type::Service: "Shortcut Dimension 1 Code" := ServOrderRec."Global Dimension 1 Code";
        END;
        "Shortcut Dimension 2 Code" := CostObject;

        DimMgtCU.SetCompany("Receiving Company");                                              //DP00387 n
        DimMgtCU.ValidateShortcutDimValues(1,"Shortcut Dimension 1 Code","Dimension Set ID");  //DP00387 n
        DimMgtCU.ValidateShortcutDimValues(2,"Shortcut Dimension 2 Code","Dimension Set ID");  //DP00387 n
        DimMgtCU.SetCompany(COMPANYNAME);                                                      //DP00387 n

        "Wage Component" := DimValRec."Wage Component";
        Quantity := NoOfHours;
        lvHourRate := GetHourRate();
        VALIDATE(Amount, Quantity * lvHourRate);
        lvHourAmount := Amount;
        INSERT;
        NextLineNo := NextLineNo + 1;

        //Credit
        "Line No." := NextLineNo;
        "Receiving Company" := '';
        //"Account No." := DimValRec."Wage Coverage Account";  //DP01043.o
        "Account No." := CoverageAccount;                      //DP01043.n


        "Job No." := '';
        Element := '';
        "Service Order No." := '';
        "Service Location No." := '';
        "Service Contract No." := '';
        "Service Category" := '';
        "Additional Cost (Service)" := FALSE;
        "Shortcut Dimension 1 Code" := EmplRec."Global Dimension 1 Code";
        "Shortcut Dimension 2 Code" := '';

        DimMgtCU.SetCompany("Receiving Company");                                              //DP00387 n
        DimMgtCU.ValidateShortcutDimValues(1,"Shortcut Dimension 1 Code","Dimension Set ID");  //DP00387 n
        DimMgtCU.ValidateShortcutDimValues(2,"Shortcut Dimension 2 Code","Dimension Set ID");  //DP00387 n
        DimMgtCU.SetCompany(COMPANYNAME);                                                      //DP00387 n

        "Wage Component" := '';
        VALIDATE(Amount, -Amount);
        INSERT;
        NextLineNo := NextLineNo + 1;

        IF HourAccRec.External THEN BEGIN
          //Debit
          "Line No." := NextLineNo;
          "Receiving Company" := '';
          "Account No." := VendorAccountsRec."Account Hire Cost";
          "Job No." := '';
          Element := '';
          "Service Order No." := '';
          "Service Location No." := '';
          "Service Contract No." := '';
          "Service Category" := '';
          "Additional Cost (Service)" := FALSE;
          "Shortcut Dimension 1 Code" := EmplRec."Global Dimension 1 Code";
          "Shortcut Dimension 2 Code" := '';

          DimMgtCU.SetCompany("Receiving Company");                                              //DP00387 n
          DimMgtCU.ValidateShortcutDimValues(1,"Shortcut Dimension 1 Code","Dimension Set ID");  //DP00387 n
          DimMgtCU.ValidateShortcutDimValues(2,"Shortcut Dimension 2 Code","Dimension Set ID");  //DP00387 n
          DimMgtCU.SetCompany(COMPANYNAME);                                                      //DP00387 n

          lvHireRate := GetHireRateExternal();
          VALIDATE(Amount, Quantity * lvHireRate);
          lvHireAmount := Amount;
          INSERT;
          NextLineNo := NextLineNo + 1;

          //Credit
          "Line No." := NextLineNo;
          "Receiving Company" := '';
          "Account No." := VendorAccountsRec."Account Commitments";
          "Job No." := '';
          Element := '';
          "Service Order No." := '';
          "Service Location No." := '';
          "Service Contract No." := '';
          "Service Category" := '';
          "Additional Cost (Service)" := FALSE;
          "Shortcut Dimension 1 Code" := '';
          "Shortcut Dimension 2 Code" := '';
          "Dimension Set ID" := 0;        //DP00387 n
          VALIDATE(Amount, -Amount);
          INSERT;
          NextLineNo := NextLineNo + 1;

          //Purchase Order, 'Borrow from' Order (inleenorder)
          InsertPurchHeadExternal();
          InsertPurchLineExternal(lvHireRate);
        END;

        IF NOT gReversePosting THEN
          WriteBlockHoursByLine(NoOfHours, lvHourRate, lvHourAmount, lvHireRate, lvHireAmount);
      END;
    END;

    PROCEDURE InsertPurchHeadExternal@6();
    BEGIN
      IF (gPurchOrderNo <> '') THEN
        EXIT;

      PurchHeadRec.INIT;
      PurchHeadRec."No." := '';
      PurchHeadRec."Document Type" := PurchHeadRec."Document Type"::Order;
      PurchHeadRec.VALIDATE("No.");
      PurchHeadRec."Buy-from Vendor No." := HourAccRec.Employer;
      PurchHeadRec.VALIDATE("Buy-from Vendor No.");
      PurchHeadRec."Document Date" := HourAccRec."Posting Date";
      //PurchHeadRec."Borrow from" := TRUE;
      PurchHeadRec."Hours Hire Order Type" := PurchHeadRec."Hours Hire Order Type"::Employee;
      PurchHeadRec.INSERT(TRUE);
      PurchHeadRec."Amounts only" := FALSE;
      PurchHeadRec."Invoice Conduction Note" := FALSE;
      PurchHeadRec.MODIFY;

      gPurchOrderNo := PurchHeadRec."No.";
      NextPurchLineNo := 10000;
    END;

    PROCEDURE InsertPurchLineExternal@5(IHireRate@1210190000 : Decimal);
    VAR
      PurchCommentLine@1100528500 : Record 43;
    BEGIN
      WITH PurchLineRec DO BEGIN
        IF (NoOfHours = 0) THEN
          EXIT;

        INIT;
        "Receiving Company" := '';
        "Document Type" := "Document Type"::Order;
        "Document No." := PurchHeadRec."No.";
        "Line No." := NextPurchLineNo;
        "Buy-from Vendor No." := PurchHeadRec."Buy-from Vendor No.";
        Type := Type::"G/L Account";
        "System-Created Entry" := TRUE;
        "No." := VendorAccountsRec."Account Commitments";
        VALIDATE("No.");
        IF "Gen. Prod. Posting Group" = '' THEN
          ERROR(Text008, "No.");
        VALIDATE(Quantity, NoOfHours);
        "Qty. to Receive" := "Outstanding Quantity";
        "Qty. to Receive (Base)" := "Outstanding Qty. (Base)";

        VALIDATE("Direct Unit Cost", IHireRate);
        "Job No." := '';  //* Empty !
        //* Project moet leeg zijn, dan ook Service velden niet vullen in de inkooporderregel!
        //VALIDATE("Shortcut Dimension 1 Code", EmplRec."Global Dimension 1 Code");
        "Shortcut Dimension 1 Code" := '';  //* Volgens afspraak 16-06-2004 AO(4PS)/Jaap Kerkhoven(Strukton)
        "Cost Type" := DimValRec."Cost Type" + 1;
        Description := COPYSTR(Text007 + FORMAT(HourAccRec.Year) + '-' +
          FORMAT(HourAccRec.Week) + ' ' + EmplRec."Full Name", 1, MAXSTRLEN(Description));
        "Posting Date" := HourAccRec."Posting Date";
        "Employee No." := HourAccRec."Employee No.";
        INSERT;
        CreatePurchOrderControl(FALSE);
        IF HourAccLineRec.Comment <> '' THEN BEGIN
          PurchCommentLine.INIT;
          PurchCommentLine."Document Type" :=  PurchCommentLine."Document Type"::Order;
          PurchCommentLine."No." := PurchLineRec."Document No.";
          PurchCommentLine."Document Line No." := PurchLineRec."Line No.";
          PurchCommentLine."Line No." := 1;
          PurchCommentLine.Date := WORKDATE;
          PurchCommentLine.Comment := COPYSTR(HourAccLineRec.Comment, 1, MAXSTRLEN(PurchCommentLine.Comment));
          PurchCommentLine.INSERT(TRUE);
        END;

        NextPurchLineNo := NextPurchLineNo + 10000;
      END;
    END;

    PROCEDURE WriteBlockHoursByLine@1210190014(IQuantity@1210190001 : Decimal;IHourRate@1210190000 : Decimal;IHourAmount@1210190002 : Decimal;IHireRate@1210190003 : Decimal;IHireAmount@1210190004 : Decimal);
    BEGIN
      BlockHoursRec.Year := HourAccLineRec.Year;
      BlockHoursRec.Week := HourAccLineRec.Week;
      BlockHoursRec."Employee No." := HourAccLineRec."Employee No.";
      BlockHoursRec."Line No." := HourAccLineRec."Line No.";
      BlockHoursRec."Block Time Code" := TmpHoursByBlockTimeRec.Code;
      BlockHoursRec.Hours := IQuantity;
      BlockHoursRec."Hour Rate" := IHourRate;
      BlockHoursRec.Amount := IHourAmount;
      BlockHoursRec."Hire Hour Rate" := IHireRate;
      BlockHoursRec."Hire Amount" := IHireAmount;
      BlockHoursRec.INSERT;
    END;

    PROCEDURE GetReferenceDate@1100485000();
    VAR
      lvUARWeekRec@1100485000 : Record 11012601;
    BEGIN
      WITH HourAccLineRec DO BEGIN
        lvUARWeekRec.GET(Year, Week);
        RateRefDate := lvUARWeekRec."Starting Date";
        IF DATE2DWY(RateRefDate, 1) = 6 THEN BEGIN  //* Bij Strukton is zaterdag eerste dag v/d week
          IF ("Hours Saturday" <> 0) THEN EXIT;
          RateRefDate := RateRefDate + 1;
          IF ("Hours Sunday" <> 0) THEN EXIT;
          RateRefDate := RateRefDate + 1;
          IF ("Hours Monday" <> 0) THEN EXIT;
          RateRefDate := RateRefDate + 1;
          IF ("Hours Tuesday" <> 0) THEN EXIT;
          RateRefDate := RateRefDate + 1;
          IF ("Hours Wednesday" <> 0) THEN EXIT;
          RateRefDate := RateRefDate + 1;
          IF ("Hours Thursday" <> 0) THEN EXIT;
          RateRefDate := RateRefDate + 1;
          IF ("Hours Friday" <> 0) THEN EXIT;
          RateRefDate := RateRefDate + 1;
        END;
      END;
    END;

    PROCEDURE GetHourRate@1210190007() : Decimal;
    VAR
      Job@1100528600 : Record 11072003;
      BudgetRateManagement@1100528601 : Codeunit 11012358;
      lvRate@1100485000 : Decimal;
      BudgetRateFoundAt@1100528602 : Text[250];
    BEGIN
      IF gReversePosting THEN
        EXIT(GetPostedHourRate(FALSE));

      IF EmplCostObjectHourRateRec.GET(HourAccLineRec."Employee No.", CostObject) THEN
        EXIT(EmplCostObjectHourRateRec.Rate);

      IF (DimValRec."Rate Code" = '') THEN
        ERROR(Text003, CostObject, HourAccLineRec."Employee No.");

      //RateRec.GET(DimValRec."Rate Code");  //* Old (db nu tarieven per datum)
      //EXIT(RateRec.ProjectRate(HourAccLineRec."Project No."));

      IF NOT Job.GET(HourAccLineRec."Project No.") THEN
        Job.INIT;
      lvRate := BudgetRateManagement.GetBudgetRate(
        0, HourAccLineRec."Project No.", '', '', Job."Global Dimension 1 Code", DimValRec."Rate Code", RateRefDate, BudgetRateFoundAt);

      EXIT(lvRate);
    END;

    PROCEDURE GetHireRateExternal@1210190010() : Decimal;
    BEGIN
      IF gReversePosting THEN
        EXIT(GetPostedHourRate(TRUE));

      IF NOT VendorCostObjectHourRateRec.GET(HourAccRec.Employer, CostObject) THEN
        ERROR(Text005, CostObject, HourAccRec.Employer);

      EXIT(VendorCostObjectHourRateRec.Rate);
    END;

    PROCEDURE GetPostedHourRate@1210190011(IHireBln@1210190000 : Boolean) : Decimal;
    BEGIN
      WITH PostedBlockHoursRec DO BEGIN
        RESET;
        SETRANGE(Year, HourAccLineRec.Year);
        SETRANGE(Week, HourAccLineRec.Week);
        SETRANGE("Employee No.", HourAccLineRec."Employee No.");
        SETRANGE("Line No.", HourAccLineRec."Line No.");
        SETRANGE("Block Time Code", TmpHoursByBlockTimeRec.Code);
        IF NOT FIND('-') THEN
          EXIT(0);

        IF NOT IHireBln THEN
          EXIT("Hour Rate")
        ELSE
          EXIT("Hire Hour Rate");
      END;
    END;

    PROCEDURE GetGenJnlPostingInfo@1210190008(VAR OTemplateName@1210190003 : Code[10];VAR OBatchName@1210190002 : Code[10];VAR OFirstLineNo@1210190000 : Integer;VAR OLastLineNo@1210190001 : Integer);
    BEGIN
      OTemplateName := JnlTemplateName;
      OBatchName := JnlBatchName;
      OFirstLineNo := FirstLineNo;
      OLastLineNo := NextLineNo - 1;
    END;

    BEGIN
    END.
  }
}

