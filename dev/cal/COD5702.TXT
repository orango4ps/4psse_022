OBJECT Codeunit 5702 Dist. Integration
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.03,4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst '@@@="%1=Cross-Reference No.";ENU=There are no items with cross reference %1.;NOR=Det finnes ingen varer med kryssreferansen %1.;SVE=Det finns inga artiklar med tv„rreferens: %1';
      ItemCrossReference@1001 : Record 5717;
      SalesLine@1002 : Record 37;
      PurchLine@1003 : Record 39;
      ItemVariant@1007 : Record 5401;
      Item@1008 : Record 27;
      Found@1005 : Boolean;
      Text001@1004 : TextConst '@@@="%1=Unit of Measure Code,%2=Qty. per Unit of Measure in Sales Line,%3=Qty. per Unit of Measure in Item Unit of Measure";ENU=The Quantity per Unit of Measure %1 has changed from %2 to %3 since the sales order was created. Adjust the quantity on the sales order or the unit of measure.;NOR=Antallet per enhet %1 har blitt endret fra %2 til %3 siden ordren ble opprettet. Juster ordreantallet eller enheten.;SVE=Antalet per enhet f”r enhetskod %1 har „ndrats fr†n %2 till %3 eftersom f”rs„ljningsordern har skapats. Justera antalet p† f”rs„ljningsordern eller %1.';
      CrossRefWrongTypeErr@1006 : TextConst 'ENU=The cross reference type must be Customer or Vendor.;NOR=Typen kryssreferanse m† v‘re Kunde eller Leverand›r.';
      LicensePermission@1210190000 : Record 2000000043;
      InvtSetup@1210190001 : Record 313;
      SaveDesc1@1210190002 : Text[250];
      SaveDesc2@1210190003 : Text[250];

    [External]
    PROCEDURE EnterSalesItemCrossRef@20(VAR SalesLine2@1000 : Record 37);
    VAR
      ItemNo@1100525000 : Code[20];
    BEGIN
      WITH SalesLine2 DO BEGIN
        //**4PS.sn
        SaveDesc1 := Description;
        SaveDesc2 := "Description 2";
        IF "Item No." <> '' THEN
          ItemNo := "Item No."
        ELSE
          ItemNo := "No.";
        //**4PS.en
        IF (Type = Type::Item) OR ("Item No." <> '') THEN BEGIN  //**4PS.n
          ItemCrossReference.RESET;
          ItemCrossReference.SETRANGE("Item No.",ItemNo);  //**4PS.n
          ItemCrossReference.SETRANGE("Variant Code","Variant Code");
          ItemCrossReference.SETRANGE("Unit of Measure","Unit of Measure Code");
          ItemCrossReference.SETRANGE("Cross-Reference Type","Cross-Reference Type"::Customer);
          ItemCrossReference.SETRANGE("Cross-Reference Type No.","Sell-to Customer No.");
          ItemCrossReference.SETRANGE("Cross-Reference No.","Cross-Reference No.");
          IF ItemCrossReference.FINDFIRST THEN
            Found := TRUE
          ELSE BEGIN
            ItemCrossReference.SETRANGE("Cross-Reference No.");
            Found := ItemCrossReference.FINDFIRST;
          END;

          IF Found THEN BEGIN
            "Cross-Reference No." := ItemCrossReference."Cross-Reference No.";
            "Unit of Measure (Cross Ref.)" := ItemCrossReference."Unit of Measure";
            "Cross-Reference Type" := ItemCrossReference."Cross-Reference Type";
            "Cross-Reference Type No." := ItemCrossReference."Cross-Reference Type No.";
            //**4PS.sn
            //IF ItemCrossReference.Description <> '' THEN BEGIN
            //  Description := ItemCrossReference.Description;
            //  "Description 2" := ItemCrossReference."Description 2";
            //END;
            //**4PS.en
            OnAfterSalesItemCrossRefFound(SalesLine2,ItemCrossReference);
          END ELSE BEGIN
            "Cross-Reference No." := '';
            "Cross-Reference Type" := "Cross-Reference Type"::" ";
            "Cross-Reference Type No." := '';
            IF "Variant Code" <> '' THEN BEGIN
              ItemVariant.GET(ItemNo,"Variant Code");  //**4PS.n
              Description := ItemVariant.Description;
              IF ItemVariant."Description 2" <> '' THEN  //**4PS.n
                "Description 2" := ItemVariant."Description 2";
            END ELSE BEGIN
              Item.GET(ItemNo);  //**4PS.n
              Description := Item.Description;
              IF Item."Description 2" <> '' THEN  //**4PS.n
                "Description 2" := Item."Description 2";
            END;
            GetItemTranslation;
            OnAfterSalesItemCrossRefNotFound(SalesLine2,ItemVariant);
          END;
        END;
        //**4PS.sn
        IF "Trade Item" <> '' THEN BEGIN
          InvtSetup.GET;
          IF InvtSetup."Item Info Trade Item Leading" THEN BEGIN
            Description := SaveDesc1;
            "Description 2" := SaveDesc2;
          END;
        END;
        //**4PS.en
      END;
    END;

    [External]
    PROCEDURE ICRLookupSalesItem@2(VAR SalesLine2@1000 : Record 37;VAR ReturnedCrossRef@1001 : Record 5717;ShowDialog@1002 : Boolean);
    VAR
      IsHandled@1003 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeICRLookupSalesItem(SalesLine2,ReturnedCrossRef,ShowDialog,IsHandled);
      IF IsHandled THEN
        EXIT;

      SalesLine.COPY(SalesLine2);
      IF SalesLine.Type = SalesLine.Type::Item THEN
        FindOrSelectICROnCrossReferenceList(
          ReturnedCrossRef,ShowDialog,SalesLine."No.",SalesLine."Cross-Reference No.",SalesLine."Sell-to Customer No.",
          ReturnedCrossRef."Cross-Reference Type"::Customer);
    END;

    [External]
    PROCEDURE EnterPurchaseItemCrossRef@3(VAR PurchLine2@1000 : Record 39);
    VAR
      ItemNo@1100525000 : Code[20];
    BEGIN
      WITH PurchLine2 DO BEGIN
        //**4PS.sn
        SaveDesc1 := Description;
        SaveDesc2 := "Description 2";
        IF "Item No." <> '' THEN
          ItemNo := "Item No."
        ELSE
          ItemNo := "No.";
        //**4PS.en
        IF (Type = Type::Item) OR ("Item No." <> '') THEN BEGIN  //**4PS.n
          ItemCrossReference.RESET;
          ItemCrossReference.SETRANGE("Item No.",ItemNo);  //**4PS.n
          ItemCrossReference.SETRANGE("Variant Code","Variant Code");
          ItemCrossReference.SETRANGE("Unit of Measure","Unit of Measure Code");
          ItemCrossReference.SETRANGE("Cross-Reference Type","Cross-Reference Type"::Vendor);
          ItemCrossReference.SETRANGE("Cross-Reference Type No.","Buy-from Vendor No.");
          ItemCrossReference.SETRANGE("Cross-Reference No.","Cross-Reference No.");
          IF ItemCrossReference.FINDFIRST THEN
            Found := TRUE
          ELSE BEGIN
            ItemCrossReference.SETRANGE("Cross-Reference No.");
            Found := ItemCrossReference.FINDFIRST;
          END;

          IF Found THEN BEGIN
            "Cross-Reference No." := ItemCrossReference."Cross-Reference No.";
            "Unit of Measure (Cross Ref.)" := ItemCrossReference."Unit of Measure";
            "Cross-Reference Type" := ItemCrossReference."Cross-Reference Type";
            "Cross-Reference Type No." := ItemCrossReference."Cross-Reference Type No.";
            //4PS.sn
            //IF ItemCrossReference.Description <> '' THEN BEGIN
            //  Description := ItemCrossReference.Description;
            //  "Description 2" := ItemCrossReference."Description 2";
            //END;
            //**4PS.en
            OnAfterPurchItemCrossRefFound(PurchLine2,ItemCrossReference);
          END ELSE BEGIN
            "Cross-Reference No." := '';
            "Cross-Reference Type" := "Cross-Reference Type"::" ";
            "Cross-Reference Type No." := '';
            IF "Variant Code" <> '' THEN BEGIN
              ItemVariant.GET(ItemNo,"Variant Code");  //**4PS.n
              Description := ItemVariant.Description;
              IF ItemVariant."Description 2" <> '' THEN  //**4PS.n
                "Description 2" := ItemVariant."Description 2";
            END ELSE BEGIN
              Item.GET(ItemNo);  //**4PS.n
              Description := Item.Description;
              IF Item."Description 2" <> '' THEN  //**4PS.n
                "Description 2" := Item."Description 2";
            END;
            GetItemTranslation;
            OnAfterPurchItemCrossRefNotFound(PurchLine2,ItemVariant);
          END;
        END;
        //**4PS.sn
        IF "Trade Item" <> '' THEN BEGIN
          InvtSetup.GET;
          IF InvtSetup."Price Info Trade Item Leading" THEN BEGIN
            Description := SaveDesc1;
            "Description 2" := SaveDesc2;
          END;
        END;
        //**4PS.en
      END;
    END;

    [External]
    PROCEDURE ICRLookupPurchaseItem@4(VAR PurchLine2@1000 : Record 39;VAR ReturnedCrossRef@1001 : Record 5717;ShowDialog@1002 : Boolean);
    VAR
      IsHandled@1003 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeICRLookupPurchaseItem(PurchLine2,ReturnedCrossRef,ShowDialog,IsHandled);
      IF IsHandled THEN
        EXIT;

      PurchLine.COPY(PurchLine2);
      IF PurchLine.Type = PurchLine.Type::Item THEN
        FindOrSelectICROnCrossReferenceList(
          ReturnedCrossRef,ShowDialog,PurchLine."No.",PurchLine."Cross-Reference No.",PurchLine."Buy-from Vendor No.",
          ReturnedCrossRef."Cross-Reference Type"::Vendor);
    END;

    LOCAL PROCEDURE FilterItemCrossReferenceByItemVendor@19(VAR ItemCrossReference@1000 : Record 5717;ItemVendor@1001 : Record 99);
    BEGIN
      ItemCrossReference.RESET;
      ItemCrossReference.SETRANGE("Item No.",ItemVendor."Item No.");
      ItemCrossReference.SETRANGE("Variant Code",ItemVendor."Variant Code");
      ItemCrossReference.SETRANGE("Cross-Reference Type",ItemCrossReference."Cross-Reference Type"::Vendor);
      ItemCrossReference.SETRANGE("Cross-Reference Type No.",ItemVendor."Vendor No.");
      ItemCrossReference.SETRANGE("Cross-Reference No.",ItemVendor."Vendor Item No.");
    END;

    LOCAL PROCEDURE FillItemCrossReferenceFromItemVendor@26(VAR ItemCrossReference@1001 : Record 5717;ItemVend@1000 : Record 99);
    BEGIN
      ItemCrossReference.INIT;
      ItemCrossReference.VALIDATE("Item No.",ItemVend."Item No.");
      ItemCrossReference.VALIDATE("Variant Code",ItemVend."Variant Code");
      ItemCrossReference.VALIDATE("Cross-Reference Type",ItemCrossReference."Cross-Reference Type"::Vendor);
      ItemCrossReference.VALIDATE("Cross-Reference Type No.",ItemVend."Vendor No.");
      ItemCrossReference."Cross-Reference No." := ItemVend."Vendor Item No.";
      IF ItemCrossReference."Unit of Measure" = '' THEN BEGIN
        Item.GET(ItemVend."Item No.");
        ItemCrossReference.VALIDATE("Unit of Measure",Item."Base Unit of Measure");
      END;
    END;

    LOCAL PROCEDURE CreateItemCrossReference@1(ItemVend@1000 : Record 99);
    VAR
      ItemCrossReference@1001 : Record 5717;
    BEGIN
      //**4PS.sn standard bugfix
      LicensePermission.SETRANGE("Object Type",LicensePermission."Object Type"::TableData);
      LicensePermission.SETRANGE("Object Number",DATABASE::"Item Cross Reference");
      LicensePermission.SETRANGE("Insert Permission",LicensePermission."Insert Permission"::" ");
      IF LicensePermission.FIND('-') THEN
        EXIT;
      //**4PS.en

      FillItemCrossReferenceFromItemVendor(ItemCrossReference,ItemVend);
      ItemCrossReference.INSERT;
    END;

    [External]
    PROCEDURE InsertItemCrossReference@12(ItemVend@1000 : Record 99);
    VAR
      ItemCrossReference@1001 : Record 5717;
    BEGIN
      FilterItemCrossReferenceByItemVendor(ItemCrossReference,ItemVend);
      IF ItemCrossReference.ISEMPTY THEN
        CreateItemCrossReference(ItemVend);
    END;

    [External]
    PROCEDURE DeleteItemCrossReference@9(ItemVend@1000 : Record 99);
    VAR
      ItemCrossReference@1001 : Record 5717;
    BEGIN
      FilterItemCrossReferenceByItemVendor(ItemCrossReference,ItemVend);
      ItemCrossReference.DELETEALL;
    END;

    [External]
    PROCEDURE UpdateItemCrossReference@6(ItemVend@1000 : Record 99;xItemVend@1001 : Record 99);
    BEGIN
      // delete the item cross references
      DeleteItemCrossReference(xItemVend);

      // insert the updated item cross references - faster then RENAME
      CreateItemCrossReference(ItemVend);
    END;

    LOCAL PROCEDURE FindOrSelectICROnCrossReferenceList@37(VAR ItemCrossReferenceToReturn@1001 : Record 5717;ShowDialog@1000 : Boolean;ItemNo@1002 : Code[20];CrossRefNo@1003 : Code[20];CrossRefTypeNo@1006 : Code[30];CrossRefType@1004 : Integer);
    VAR
      TempRecRequired@1007 : Boolean;
      MultipleItemsToChoose@1005 : Boolean;
      QtyCustOrVendCR@1009 : Integer;
      QtyBarCodeAndBlankCR@1008 : Integer;
    BEGIN
      InitItemCrossReferenceFilters(ItemCrossReference,ItemNo,CrossRefNo,CrossRefType);
      CountItemCrossReference(ItemCrossReference,QtyCustOrVendCR,QtyBarCodeAndBlankCR,CrossRefType,CrossRefTypeNo);
      MultipleItemsToChoose := TRUE;

      CASE TRUE OF
        (QtyCustOrVendCR = 0) AND (QtyBarCodeAndBlankCR = 0):
          ERROR(Text000,CrossRefNo);
        (QtyCustOrVendCR = 0) AND (QtyBarCodeAndBlankCR = 1):
          MultipleItemsToChoose := FALSE;
        (QtyCustOrVendCR = 0) AND (QtyBarCodeAndBlankCR > 1):
          MultipleItemsToChoose := BarCodeCRAreMappedToDifferentItems(ItemCrossReference);
        (QtyCustOrVendCR = 1) AND (QtyBarCodeAndBlankCR = 0):
          MultipleItemsToChoose := FALSE;
        (QtyCustOrVendCR = 1) AND (QtyBarCodeAndBlankCR > 0):
          MultipleItemsToChoose := CustVendAndBarCodeCRAreMappedToDifferentItems(ItemCrossReference,CrossRefType,CrossRefTypeNo);
        (QtyCustOrVendCR > 1) AND (QtyBarCodeAndBlankCR = 0):
          SetFiltersTypeAndTypeNoItemCrossRef(ItemCrossReference,CrossRefType,CrossRefTypeNo);
        (QtyCustOrVendCR > 1) AND (QtyBarCodeAndBlankCR > 0):
          TempRecRequired := TRUE;
      END;

      IF ShowDialog AND MultipleItemsToChoose THEN BEGIN
        IF NOT RunPageCrossReferenceListOnRealOrTempRec(ItemCrossReference,TempRecRequired,CrossRefType,CrossRefTypeNo) THEN
          ERROR(Text000,CrossRefNo);
      END ELSE
        IF NOT FindFirstCustVendItemCrossReference(ItemCrossReference,CrossRefType,CrossRefTypeNo) THEN
          FindFirstBarCodeOrBlankTypeItemCrossReference(ItemCrossReference);

      ItemCrossReferenceToReturn.COPY(ItemCrossReference);
    END;

    LOCAL PROCEDURE InitItemCrossReferenceFilters@13(VAR ItemCrossReference@1003 : Record 5717;ItemNo@1002 : Code[20];CrossRefNo@1001 : Code[20];CrossRefType@1000 : Integer);
    BEGIN
      WITH ItemCrossReference DO BEGIN
        RESET;
        SETCURRENTKEY(
          "Cross-Reference No.","Cross-Reference Type","Cross-Reference Type No.","Discontinue Bar Code");
        SETRANGE("Cross-Reference No.",CrossRefNo);
        SETRANGE("Item No.",ItemNo);
        SETFILTER("Cross-Reference Type",'<>%1',GetCrossReferenceTypeToExclude(CrossRefType));
        SETRANGE("Discontinue Bar Code",FALSE);
        IF ISEMPTY THEN
          SETRANGE("Item No.");
      END;
    END;

    LOCAL PROCEDURE GetCrossReferenceTypeToExclude@51(CrossRefType@1000 : Integer) : Integer;
    BEGIN
      CASE CrossRefType OF
        ItemCrossReference."Cross-Reference Type"::Vendor:
          EXIT(ItemCrossReference."Cross-Reference Type"::Customer);
        ItemCrossReference."Cross-Reference Type"::Customer:
          EXIT(ItemCrossReference."Cross-Reference Type"::Vendor);
        ELSE
          ERROR(CrossRefWrongTypeErr);
      END;
    END;

    LOCAL PROCEDURE CountItemCrossReference@45(VAR ItemCrossReference@1002 : Record 5717;VAR QtyCustOrVendCR@1004 : Integer;VAR QtyBarCodeAndBlankCR@1003 : Integer;CrossRefType@1001 : Integer;CrossRefTypeNo@1000 : Code[30]);
    VAR
      ItemCrossReferenceToCheck@1005 : Record 5717;
    BEGIN
      ItemCrossReferenceToCheck.COPYFILTERS(ItemCrossReference);
      SetFiltersTypeAndTypeNoItemCrossRef(ItemCrossReferenceToCheck,CrossRefType,CrossRefTypeNo);
      QtyCustOrVendCR := ItemCrossReferenceToCheck.COUNT;
      SetFiltersBarCodeOrBlankTypeItemCrossRef(ItemCrossReferenceToCheck);
      QtyBarCodeAndBlankCR := ItemCrossReferenceToCheck.COUNT;
    END;

    LOCAL PROCEDURE BarCodeCRAreMappedToDifferentItems@29(VAR ItemCrossReference@1000 : Record 5717) : Boolean;
    VAR
      ItemCrossReferenceToCheck@1001 : Record 5717;
    BEGIN
      ItemCrossReferenceToCheck.COPYFILTERS(ItemCrossReference);
      SetFiltersBarCodeOrBlankTypeItemCrossRef(ItemCrossReferenceToCheck);
      ItemCrossReferenceToCheck.FINDFIRST;
      ItemCrossReferenceToCheck.SETFILTER("Item No.",'<>%1',ItemCrossReferenceToCheck."Item No.");
      EXIT(NOT ItemCrossReferenceToCheck.ISEMPTY);
    END;

    LOCAL PROCEDURE CustVendAndBarCodeCRAreMappedToDifferentItems@30(VAR ItemCrossReference@1000 : Record 5717;CrossRefType@1003 : Integer;CrossRefTypeNo@1002 : Code[30]) : Boolean;
    VAR
      ItemCrossReferenceToCheck@1001 : Record 5717;
    BEGIN
      ItemCrossReferenceToCheck.COPYFILTERS(ItemCrossReference);
      SetFiltersTypeAndTypeNoItemCrossRef(ItemCrossReferenceToCheck,CrossRefType,CrossRefTypeNo);
      ItemCrossReferenceToCheck.FINDFIRST;
      ItemCrossReferenceToCheck.SETFILTER("Item No.",'<>%1',ItemCrossReferenceToCheck."Item No.");
      SetFiltersBarCodeOrBlankTypeItemCrossRef(ItemCrossReferenceToCheck);
      EXIT(NOT ItemCrossReferenceToCheck.ISEMPTY);
    END;

    LOCAL PROCEDURE RunPageCrossReferenceListOnRealOrTempRec@11(VAR ItemCrossReference@1000 : Record 5717;RunOnTempRec@1001 : Boolean;CrossRefType@1002 : Integer;CrossRefTypeNo@1003 : Code[30]) : Boolean;
    BEGIN
      IF RunOnTempRec THEN
        EXIT(RunPageCrossReferenceListOnTempRecord(
            ItemCrossReference,CrossRefType,CrossRefTypeNo));
      EXIT(RunPageCrossReferenceList(ItemCrossReference));
    END;

    LOCAL PROCEDURE RunPageCrossReferenceListOnTempRecord@16(VAR ItemCrossReference@1000 : Record 5717;CrossRefType@1003 : Integer;CrossRefTypeNo@1001 : Code[30]) : Boolean;
    VAR
      TempItemCrossReference@1002 : TEMPORARY Record 5717;
      ItemCrossReferenceToCopy@1004 : Record 5717;
    BEGIN
      ItemCrossReferenceToCopy.COPYFILTERS(ItemCrossReference);
      SetFiltersTypeAndTypeNoItemCrossRef(ItemCrossReferenceToCopy,CrossRefType,CrossRefTypeNo);
      InsertTempRecords(TempItemCrossReference,ItemCrossReferenceToCopy);
      SetFiltersBarCodeOrBlankTypeItemCrossRef(ItemCrossReferenceToCopy);
      InsertTempRecords(TempItemCrossReference,ItemCrossReferenceToCopy);
      IF RunPageCrossReferenceList(TempItemCrossReference) THEN BEGIN
        ItemCrossReference := TempItemCrossReference;
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE RunPageCrossReferenceList@59(VAR ItemCrossReference@1000 : Record 5717) : Boolean;
    BEGIN
      ItemCrossReference.FINDFIRST;
      EXIT(PAGE.RUNMODAL(PAGE::"Cross Reference List",ItemCrossReference) = ACTION::LookupOK);
    END;

    LOCAL PROCEDURE InsertTempRecords@21(VAR TempItemCrossReference@1001 : TEMPORARY Record 5717;VAR ItemCrossReferenceToCopy@1000 : Record 5717);
    BEGIN
      IF ItemCrossReferenceToCopy.FINDSET THEN
        REPEAT
          TempItemCrossReference := ItemCrossReferenceToCopy;
          TempItemCrossReference.INSERT;
        UNTIL ItemCrossReferenceToCopy.NEXT = 0;
    END;

    LOCAL PROCEDURE FindFirstCustVendItemCrossReference@50(VAR ItemCrossReference@1000 : Record 5717;CrossRefType@1002 : Integer;CrossRefTypeNo@1003 : Code[30]) : Boolean;
    VAR
      ItemCrossReferenceToCheck@1001 : Record 5717;
    BEGIN
      SetFiltersTypeAndTypeNoItemCrossRef(ItemCrossReference,CrossRefType,CrossRefTypeNo);
      ItemCrossReferenceToCheck.COPYFILTERS(ItemCrossReference);
      IF ItemCrossReferenceToCheck.FINDFIRST THEN BEGIN
        ItemCrossReference.COPY(ItemCrossReferenceToCheck);
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE FindFirstBarCodeOrBlankTypeItemCrossReference@44(VAR ItemCrossReference@1000 : Record 5717);
    VAR
      ItemCrossReferenceToCheck@1001 : Record 5717;
    BEGIN
      SetFiltersBarCodeOrBlankTypeItemCrossRef(ItemCrossReference);
      ItemCrossReferenceToCheck.COPYFILTERS(ItemCrossReference);
      ItemCrossReferenceToCheck.FINDFIRST;
      ItemCrossReference.COPY(ItemCrossReferenceToCheck);
    END;

    LOCAL PROCEDURE SetFiltersTypeAndTypeNoItemCrossRef@25(VAR ItemCrossReference@1002 : Record 5717;CrossRefType@1001 : Integer;CrossRefTypeNo@1000 : Code[30]);
    BEGIN
      ItemCrossReference.SETRANGE("Cross-Reference Type",CrossRefType);
      ItemCrossReference.SETRANGE("Cross-Reference Type No.",CrossRefTypeNo);
    END;

    LOCAL PROCEDURE SetFiltersBarCodeOrBlankTypeItemCrossRef@27(VAR ItemCrossReference@1000 : Record 5717);
    BEGIN
      ItemCrossReference.SETFILTER(
        "Cross-Reference Type",'%1|%2',ItemCrossReference."Cross-Reference Type"::" ",
        ItemCrossReference."Cross-Reference Type"::"Bar Code");
      ItemCrossReference.SETRANGE("Cross-Reference Type No.");
    END;

    [External]
    PROCEDURE GetSpecialOrders@5(VAR PurchHeader@1000 : Record 38);
    VAR
      SalesHeader@1001 : Record 36;
      PurchLine2@1005 : Record 39;
      ItemUnitOfMeasure@1006 : Record 5404;
      Vendor@1007 : Record 23;
      SalesSetup@1100528800 : Record 311;
      TransferExtendedText@1002 : Codeunit 378;
      CopyDocMgt@1004 : Codeunit 6620;
      NextLineNo@1003 : Integer;
      IsHandled@1008 : Boolean;
    BEGIN
      WITH PurchHeader DO BEGIN
        TESTFIELD("Document Type","Document Type"::Order);

        IsHandled := FALSE;
        OnGetSpecialOrdersOnBeforeSelectSalesHeader(PurchHeader,SalesHeader,IsHandled);
        IF NOT IsHandled THEN BEGIN
          SalesHeader.SETCURRENTKEY("Document Type","Sell-to Customer No.");
          SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Order);
          SalesHeader.SETRANGE("Sell-to Customer No.","Sell-to Customer No.");

          //**4PS.sn
          SalesSetup.GET;
          IF SalesSetup."Release Sales Orders Required" THEN BEGIN
            SalesHeader.FILTERGROUP(9);
            SalesHeader.SETRANGE(Status, SalesHeader.Status::Released);
            SalesHeader.FILTERGROUP(0);
          END;
          //**4PS.en

          IF (PAGE.RUNMODAL(PAGE::"Sales List",SalesHeader) <> ACTION::LookupOK) OR
             (SalesHeader."No." = '')
          THEN
            EXIT;
        END;

        LOCKTABLE;

        OnGetSpecialOrdersOnBeforeTestSalesHeader(SalesHeader);

        SalesHeader.TESTFIELD("Document Type",SalesHeader."Document Type"::Order);
        TESTFIELD("Sell-to Customer No.",SalesHeader."Sell-to Customer No.");
        IF "Ship-to Code" <> '' THEN
          TESTFIELD("Ship-to Code",SalesHeader."Ship-to Code");
        IF SpecialOrderExists(SalesHeader) THEN BEGIN
          VALIDATE("Location Code",SalesHeader."Location Code");
          AddSpecialOrderToAddress(SalesHeader,TRUE);
        END;

        IF Vendor.GET("Buy-from Vendor No.") THEN
          VALIDATE("Shipment Method Code",Vendor."Shipment Method Code");

        PurchLine.LOCKTABLE;
        SalesLine.LOCKTABLE;

        PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::Order);
        PurchLine.SETRANGE("Document No.","No.");
        IF PurchLine.FINDLAST THEN
          NextLineNo := PurchLine."Line No." + 10000
        ELSE
          NextLineNo := 10000;

        SalesLine.RESET;
        SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
        SalesLine.SETRANGE("Document No.",SalesHeader."No.");
        SalesLine.SETRANGE("Special Order",TRUE);
        SalesLine.SETFILTER("Outstanding Quantity",'<>0');
        //**4PS.sn
        //SalesLine.SETRANGE(Type,SalesLine.Type::Item);  //db, 23-06-14: C002114
        //**4PS.en
        SalesLine.SETFILTER("No.",'<>%1','');
        SalesLine.SETRANGE("Special Order Purch. Line No.",0);
        OnGetSpecialOrdersOnAfterSalesLineSetFilters(SalesLine,SalesHeader);
        IF SalesLine.FINDSET THEN
          REPEAT
            IsHandled := FALSE;
            OnGetSpecialOrdersOnBeforeTestSalesLine(SalesLine,PurchHeader,IsHandled);
            IF NOT IsHandled THEN
              IF (SalesLine.Type = SalesLine.Type::Item) AND
                 ItemUnitOfMeasure.GET(SalesLine."No.",SalesLine."Unit of Measure Code")
              THEN
                IF SalesLine."Qty. per Unit of Measure" <> ItemUnitOfMeasure."Qty. per Unit of Measure" THEN
                  ERROR(Text001,
                    SalesLine."Unit of Measure Code",SalesLine."Qty. per Unit of Measure",
                    ItemUnitOfMeasure."Qty. per Unit of Measure");

            PurchLine.INIT;
            PurchLine."Document Type" := PurchLine."Document Type"::Order;
            PurchLine."Document No." := "No.";
            PurchLine."Line No." := NextLineNo;
            CopyDocMgt.TransfldsFromSalesToPurchLine(SalesLine,PurchLine);
            PurchLine.GetItemTranslation;
            PurchLine."Special Order" := TRUE;
            PurchLine."Purchasing Code" := SalesLine."Purchasing Code";
            PurchLine."Special Order Sales No." := SalesLine."Document No.";
            PurchLine."Special Order Sales Line No." := SalesLine."Line No.";

            //**4PS.sn
            PurchLine."Input by" := USERID; //DP00469
            PurchLine."Input Date" := TODAY; //DP00469
            //**4PS.en

            OnBeforeInsertPurchLine(PurchLine,SalesLine);
            PurchLine.INSERT;
            OnAfterInsertPurchLine(PurchLine,SalesLine);

            PurchLine.CreatePurchOrderControl(FALSE); //**4PS.n

            NextLineNo := NextLineNo + 10000;

            SalesLine."Unit Cost (LCY)" := PurchLine."Unit Cost (LCY)";
            SalesLine.VALIDATE("Unit Cost (LCY)");
            SalesLine."Special Order Purchase No." := PurchLine."Document No.";
            SalesLine."Special Order Purch. Line No." := PurchLine."Line No.";
            OnBeforeSalesLineModify(SalesLine,PurchLine);
            SalesLine.MODIFY;
            OnAfterSalesLineModify(SalesLine,PurchLine);
            IF TransferExtendedText.PurchCheckIfAnyExtText(PurchLine,TRUE) THEN BEGIN
              TransferExtendedText.InsertPurchExtText(PurchLine);
              PurchLine2.SETRANGE("Document Type","Document Type");
              PurchLine2.SETRANGE("Document No.","No.");
              IF PurchLine2.FINDLAST THEN
                NextLineNo := PurchLine2."Line No.";
              NextLineNo := NextLineNo + 10000;
            END;
            OnGetSpecialOrdersOnAfterTransferExtendedText(SalesLine,PurchHeader,NextLineNo);
          UNTIL SalesLine.NEXT = 0
        ELSE
          ERROR(
            Text000,
            SalesHeader."No.");

        MODIFY; // Only version check
        SalesHeader.MODIFY; // Only version check
      END;
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInsertPurchLine@1001(VAR PurchaseLine@1000 : Record 39;SalesLine@1001 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSalesLineModify@31(VAR SalesLine@1000 : Record 37;PurchaseLine@1001 : Record 39);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInsertPurchLine@8(VAR PurchaseLine@1000 : Record 39;SalesLine@1001 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeSalesLineModify@28(VAR SalesLine@1000 : Record 37;PurchaseLine@1001 : Record 39);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSalesItemCrossRefFound@7(VAR SalesLine@1000 : Record 37;ItemCrossReference@1001 : Record 5717);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSalesItemCrossRefNotFound@14(VAR SalesLine@1000 : Record 37;VAR ItemVariant@1001 : Record 5401);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterPurchItemCrossRefFound@10(VAR PurchLine@1000 : Record 39;ItemCrossReference@1001 : Record 5717);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterPurchItemCrossRefNotFound@15(VAR PurchaseLine@1000 : Record 39;VAR ItemVariant@1001 : Record 5401);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeICRLookupSalesItem@17(VAR SalesLine@1000 : Record 37;VAR ItemCrossReference@1001 : Record 5717;ShowDialog@1002 : Boolean;VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeICRLookupPurchaseItem@18(VAR PurchaseLine@1000 : Record 39;VAR ItemCrossReference@1001 : Record 5717;ShowDialog@1002 : Boolean;VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnGetSpecialOrdersOnAfterSalesLineSetFilters@33(VAR SalesLine@1000 : Record 37;SalesHeader@1001 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnGetSpecialOrdersOnAfterTransferExtendedText@32(SalesLine@1000 : Record 37;PurchaseHeader@1001 : Record 38;VAR NextLineNo@1002 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnGetSpecialOrdersOnBeforeSelectSalesHeader@22(VAR PurchaseHeader@1000 : Record 38;VAR SalesHeader@1001 : Record 36;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnGetSpecialOrdersOnBeforeTestSalesHeader@23(SalesHeader@1000 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnGetSpecialOrdersOnBeforeTestSalesLine@24(SalesLine@1000 : Record 37;PurchaseHeader@1001 : Record 38;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

