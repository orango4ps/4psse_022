OBJECT Codeunit 12013601 ExFlow
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EXF513000,4PS,4PSSE;
  }
  PROPERTIES
  {
    Permissions=TableData 12013608=rimd,
                TableData 12013609=rimd,
                TableData 12013610=rimd,
                TableData 12013611=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ExFlowSetup@1100285004 : Record 12013601;
      GLSetup@1100285012 : Record 98;
      ExFlowDimMgt@1100285008 : Codeunit 12013605;
      Txt03@1000000009 : TextConst 'ENU=Only superior users can complete the invoice.;SVE=Bara ”verordnad attestant kan slutattestera.';
      EXF41@1100285002 : TextConst 'ENU=Warning! The line has been approved!\\Do you still want to update line?;SVE=Varning! Raden har attesterats! \\Vill du „nd† uppdatera raden?';
      EXF43@1100285014 : TextConst 'ENU=Type is not allowed!;SVE=Radtypen „r inte till†ten!';
      EXF44@1100285015 : TextConst 'ENU=Approver %1 can not be restarted!;SVE=Attestant %1 f†r inte †terstartas!';
      EXF56@1100285001 : TextConst 'ENU=The amount on an approved line cannot be changed! The line has to be restarted first.;SVE=Beloppet p† en slutattesterad rad kan ej „ndras! Raden m†ste f”rst omstartas.';
      EXF60@1100285028 : TextConst 'ENU=No G/L Account No. could be found for line %1 %2 %3.;SVE=Inget Redov.Konto kunde hittas f”r rad %1 %2 %3.';
      EXF61@1100285029 : TextConst 'ENU=Document Type: %1. Document No: %2.;SVE=Dokumenttyp: %1. Dokumentnr: %2.';
      EXF62@1100285031 : TextConst 'ENU=Warning! Invoice has been approved.\\Do you want to delete all approvers?;SVE=Varning! Fakturan har attesterats!\\Vill du ta bort alla attestanter?';
      EXF63@1100285030 : TextConst 'ENU=You do not have permisson to remove the approval flow.;SVE=Du saknar beh”righeter att ta bort attesteringen.';
      EXF64@1100285009 : TextConst 'ENU=The document can not be sent for approval because image is missing.;SVE=Fakturan kan ej attesteras eftersom bild saknas.';
      EXF65@1100285033 : TextConst 'ENU=Line cannot be set for Approval!;SVE=Raden kan ej s„ttas till Attest!';
      EXF66@1100285032 : TextConst 'ENU=User %1 does not have permission to make this change!;SVE=Anv„ndare %1 har ej beh”righet att g”ra denna „ndring!';
      EXF67@1100285003 : TextConst 'ENU=Warning! The row is approved. \\Do you still want to delete this lines approvers?;SVE=Varning! Raden har attesterats. \\Vill du ta bort radens attestanter?';
      EXF68@1100285006 : TextConst 'ENU=Approval Group %1 does no exist!;SVE=Attestgrupp %1 finns inte!';
      EXF69@1100285005 : TextConst 'ENU=Approval Group %1 is blocked!;SVE=Attestgrupp %1 „r stoppad!';
      EXF70@1100285007 : TextConst 'ENU=Line Type %1 is not setup for ExFlow.;SVE=Radtyp %1 „r inte uppsatt f”r ExFlow.';
      GLSetupRetrieved@1100285011 : Boolean;
      EXF71@1100285010 : TextConst 'ENU=User %1 has an invalid coding rule!;SVE=Anv„ndare %1 har en invalid konteringsregel!';
      EXF72@1100285016 : TextConst 'ENU=System error, can not insert Ex Document record.;SVE=Systemfel, kan inte skapa Ex Dokument post.';
      EXF73@1100285019 : TextConst 'ENU=Operation aborted.;SVE=Funktionen avbryten.';
      EXF75@1100285000 : TextConst 'ENU=Warning! The row is approved. \\Do you still want to delete this lines approvers?;SVE=Varning! Raden har attesterats. \\Vill du ta bort radens attestanter?';
      EXF76@1100285013 : TextConst 'ENU=Line not deleted.;SVE=Raden blev ej borttagen.';
      EXF77@1100285022 : TextConst 'ENU=Are you sure you want to remove the approval flag?;SVE=Žr du s„ker p† att du vill plocka bort attestbocken?';
      EXF78@1100285034 : TextConst 'ENU=%1 %2 %3;SVE=%1 %2 %3';
      EXF79@1100285017 : TextConst 'ENU=Cannot change field! The line has been approved!;SVE=Kan inte „ndra f„ltet! Raden har attesterats!';

    PROCEDURE FinishApprover@1000000007(VAR DocLine@1000000003 : Record 12013609;NewComment@1100285002 : Text[180]);
    VAR
      DocLineApp@1100285000 : Record 12013610;
      ExUserComp@1100285001 : Record 12013641;
    BEGIN
      IF NOT IsUserSuperior(USERID) THEN
        ERROR(Txt03);

      DocLineApp.RESET;
      DocLineApp.SETCURRENTKEY("Document Line ID");
      DocLineApp.SETRANGE("Document Line ID", DocLine.ID);
      IF DocLineApp.FINDSET(TRUE) THEN BEGIN
        REPEAT
          IF DocLineApp."Approved By" = '' THEN BEGIN
            DocLineApp."Approval Date" := CREATEDATETIME(WORKDATE,TIME);
            DocLineApp."Approved By" := USERID;
            IF GetUserComp(ExUserComp,USERID) THEN
              DocLineApp."Approved By" := ExUserComp."User ID";

            IF DocLineApp."Delegated to" = '' THEN
              DocLineApp.Flowstatus := DocLineApp.Flowstatus::Approved;

            DocLineApp.Comment := NewComment;
          END;

          IF (DocLineApp.Flowstatus = DocLineApp.Flowstatus::Rejected) AND (DocLineApp."Delegated to" = '') THEN
            DocLineApp.Flowstatus := DocLineApp.Flowstatus::Approved;

          DocLineApp."Forced Complete" := TRUE;
          DocLineApp.MODIFY(FALSE);
        UNTIL DocLineApp.NEXT = 0;
      END ELSE BEGIN
        DocLineApp.INIT;
        DocLineApp."Document Type" := DocLine."Document Type";
        DocLineApp."Document No." := DocLine."Document No.";
        DocLineApp."Line No." := DocLine."Line No.";
        DocLineApp."Approver Order" := 10000;
        DocLineApp."Approval Date" := CREATEDATETIME(WORKDATE,TIME);
        DocLineApp.Approver := USERID;
        DocLineApp."Approved By" := USERID;
        IF GetUserComp(ExUserComp,USERID) THEN BEGIN
          DocLineApp.Approver := ExUserComp."User ID";
          DocLineApp."Approved By" := ExUserComp."User ID";
        END;

        IF DocLineApp."Delegated to" = '' THEN
           DocLineApp.Flowstatus := DocLineApp.Flowstatus::Approved;
        DocLineApp.Comment := NewComment;
        DocLineApp."Document Line ID" := DocLine.ID;
        DocLineApp."Document ID" := DocLine."Document ID";
        DocLineApp.ID := 0;
        DocLineApp."Forced Complete" := TRUE;
        DocLineApp.INSERT;
      END;

      DocLine.Flowstatus := DocLine.Flowstatus::Approved;
      DocLine.MODIFY(FALSE);
    END;

    PROCEDURE RestartApprover@1100285000(DocLine@1100285000 : Record 12013609;ApproverOrder@1100285001 : Integer;OnlyOneApprover@1100285004 : Boolean);
    VAR
      DocLineApprover@1100285002 : Record 12013610;
      First@1100285003 : Boolean;
      AppGroup@1100285005 : Record 12013606;
      ExflowToInvoice@1100285006 : Codeunit 12013592;
    BEGIN
      DocLineApprover.RESET;
      DocLineApprover.SETCURRENTKEY("Document Line ID","Approver Order");
      DocLineApprover.SETRANGE("Document Line ID",DocLine.ID);
      IF OnlyOneApprover THEN BEGIN
        DocLineApprover.SETFILTER("Approver Order",'>%1', ApproverOrder);
        DocLineApprover.SETFILTER("Approved By", '<>%1','');
        IF DocLineApprover.FINDFIRST THEN
          ERROR(STRSUBSTNO(EXF44,DocLineApprover.Approver));
      END;

      DocLineApprover.RESET;
      DocLineApprover.SETCURRENTKEY("Document Line ID","Approver Order");
      DocLineApprover.SETRANGE("Document Line ID",DocLine.ID);
      IF ApproverOrder <> 0 THEN
        DocLineApprover.SETFILTER("Approver Order",'%1..', ApproverOrder);

      First := IsFirstUnApprovedApprover(ApproverOrder, DocLine.ID);

      IF DocLineApprover.FINDSET(TRUE) THEN
        REPEAT
          DocLineApprover."Approval Date" := CREATEDATETIME(0D,0T);
          DocLineApprover."Approved By" := '';
          DocLineApprover."Reminder Sent Date" := CREATEDATETIME(0D, 0T);
          DocLineApprover."Reminder Status" := 0;
          DocLineApprover."No. of Reminders" := 0;
          DocLineApprover.Flowstatus := DocLineApprover.Flowstatus::"Not processed";
          DocLineApprover."Under review" := FALSE;
          DocLineApprover."Delegated to" := '';

          AppGroup.GET(DocLineApprover.Approver);

          IF AppGroup.Blocked THEN
            ERROR(STRSUBSTNO(EXF44,DocLineApprover.Approver));

          IF AppGroup."Auto Approve" THEN
            ExflowToInvoice.AutoApproveGrp(DocLineApprover,AppGroup.Code, AppGroup."Auto Approve Comment")
          ELSE
            IF First THEN BEGIN
              First := FALSE;

              DocLineApprover.VALIDATE(Flowstatus,DocLineApprover.Flowstatus::Current);

              ExFlowSetup.GET;
              IF DocLineApprover.Comment = ExFlowSetup."Escalation Text" THEN
                DocLineApprover.Comment := '';
            END;

          DocLineApprover."Forced Complete" := FALSE;
          DocLineApprover.MODIFY(FALSE);
        UNTIL DocLineApprover.NEXT =0;

      DocLineApprover.ApprovalStatus(DocLineApprover,'Update');
    END;

    LOCAL PROCEDURE IsFirstUnApprovedApprover@1100285077(ApproverOrder@1100285001 : Integer;DocLineID@1100285002 : Integer) : Boolean;
    VAR
      DocLineApprover@1100285000 : Record 12013610;
    BEGIN
      // Checks if there are Approver with out actions before reseting
      DocLineApprover.RESET;
      DocLineApprover.SETCURRENTKEY("Document Line ID","Approver Order");
      DocLineApprover.SETRANGE("Document Line ID",DocLineID);
      DocLineApprover.SETFILTER(Flowstatus, '%1|%2', DocLineApprover.Flowstatus::Current, DocLineApprover.Flowstatus::"Not processed");
      IF DocLineApprover.FINDFIRST THEN
        IF DocLineApprover."Approver Order" < ApproverOrder THEN
          EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE UpdateLine@1000000002(VAR PurchLine@1000000000 : Record 39;xPurchLine@1100285002 : Record 39;SilentMode@1100285008 : Boolean);
    VAR
      PurchHeader@1100285009 : Record 38;
      DocLine@1100285001 : Record 12013609;
      ExPeriodicMgt@1100285003 : Codeunit 12013599;
      Show@1100285000 : Boolean;
    BEGIN
      Show := FALSE;
      ExFlowSetup.GET;

      IF PurchLine."Document Type" = PurchLine."Document Type"::"Blanket Order" THEN
        EXIT;

      IF DocLine.RetrieveRecord(DocLine,PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.") THEN
        IF DocLine."Connected Line ID" <> 0 THEN
          EXIT;

      IF NOT CheckMinAppAmount(PurchLine,PurchHeader) THEN BEGIN
        PurchLine."Approval Flow Modified" := FALSE;
        PurchLine."Applied Template Rule" := '';

        IF DocLine.RetrieveRecord(DocLine,PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.") THEN
          DocLine.DELETE(TRUE);

        EXIT;
      END;

      PurchHeader.GET(PurchLine."Document Type",PurchLine."Document No.");
      IF NOT PurchHeader.Approve THEN BEGIN
        PurchLine."Approval Flow Modified" := FALSE;
        PurchLine."Applied Template Rule" := '';

        IF DocLine.RetrieveRecord(DocLine,PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.") THEN
          DocLine.DELETE(TRUE);

        EXIT;
      END;

      IF PurchHeader."New Line" THEN
        SilentMode := TRUE;

      IF (NOT PurchLine.Approve) AND (NOT xPurchLine.Approve) THEN
        SetApproveForPurchLine(PurchHeader,PurchLine);

      IF (NOT PurchLine.Approve) OR (PurchLine.Type = 0) THEN BEGIN
        PurchLine."Approval Flow Modified" := FALSE;
        PurchLine."Applied Template Rule" := '';

        IF DocLine.RetrieveRecord(DocLine,PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.") THEN
          DocLine.DELETE(TRUE);

        EXIT;
      END;

      IF NOT DocLine.RetrieveRecord(DocLine,PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.") THEN BEGIN
        CreateDocumentLine(PurchLine,FALSE,TRUE);
        Show := TRUE;
      END;

      // Exit if line is not modified and xrec.No. is populated (if not populated, it would be a new record)
      IF ((xPurchLine."No." <> '') AND (NOT IsLineModifiedSync(PurchLine,xPurchLine))) THEN
        EXIT;

      DocLine.RetrieveRecord(DocLine,PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.");

      TestifApproved(PurchLine,xPurchLine,DocLine,ExFlowSetup,SilentMode);

      // Update all Approvalfields
      DocLine."Document Type" := PurchLine."Document Type";
      DocLine."Document No." := PurchLine."Document No.";
      DocLine."Line No." := PurchLine."Line No.";

      DocLine."Line Type" := PurchLine.Type;
      DocLine."No." := PurchLine."No.";
      IF PurchLine.Description <> DocLine.GetName THEN
        DocLine.Description := PurchLine.Description + PurchLine."Description 2"
      ELSE
        DocLine.Description := '';
      DocLine.Quantity := PurchLine.Quantity;
      DocLine."Direct Unit Cost" := PurchLine."Direct Unit Cost";
      DocLine.Amount := PurchLine."Line Amount";
      DocLine."Line Discount %" := PurchLine."Line Discount %";

      DocLine."Job No." := PurchLine."Job No.";
      DocLine."Job Task No." := PurchLine."Job Task No.";
      DocLine."Invoice to Customer" := PurchLine."Invoice to Customer";
      DocLine."Invoicing Amount" := PurchLine."Invoicing Amount";
      DocLine."Start Date for Invoicing" := PurchLine."Start Date for Invoicing";
      DocLine."Invoicing Code" := PurchLine."Invoicing Code";
      DocLine."First Approver" := PurchLine."First Approver";
      DocLine."Template Rule" := PurchLine."Template Rule";
      DocLine."VAT Prod. Posting Group" := PurchLine."VAT Prod. Posting Group";

      UpdateOrderInfo(DocLine,PurchLine);

      ExPeriodicMgt.ExFlowCodeunit_UpdatePeriodicDocLine(DocLine,PurchLine);

      DocLine.MODIFY(TRUE);

      IF IsLineModified(PurchLine,xPurchLine) THEN BEGIN
        CreateApproversFromPurch(DocLine, PurchLine,'',TRUE,'','',Show);
        DocLine.GET(DocLine.ID);
        DocLine."Applied Template Rule" := PurchLine."Applied Template Rule";
        DocLine.MODIFY;
        DocLine.SetDocumentStatus(DocLine);
      END;

      UpdateDocLineDim(DocLine,PurchLine);

      IF GUIALLOWED AND (NOT SilentMode) THEN
        IF ExFlowSetup."Show Approvers Automatically" AND Show THEN BEGIN
          COMMIT;
          DocLine.RESET;
          DocLine.SETCURRENTKEY("Document No.");
          DocLine.SETRANGE("Document Type",PurchLine."Document Type");
          DocLine.SETRANGE("Document No.",PurchLine."Document No.");
          DocLine.SETRANGE("Line No.",PurchLine."Line No.");
          PAGE.RUNMODAL(12013609,DocLine);
        END;
    END;

    PROCEDURE CreateDocument@1100285001(VAR PurchHeader@1100285000 : Record 38);
    VAR
      DocHead@1100285001 : Record 12013608;
      DocHead2@1100285002 : Record 12013608;
      ExDocHead2@1100285004 : Record 12013612;
      ExUserComp@1100285005 : Record 12013641;
      WebCompID@1100285007 : Record 12013630;
      ExFlowSEMgt@1100285003 : Codeunit 12013598;
      WebSearchMgt@1100285006 : Codeunit 12013635;
    BEGIN
      ExFlowSetup.GET;

      DocHead2.RESET;
      DocHead2.SETCURRENTKEY("Document No.");
      DocHead2.SETRANGE("Document Type",PurchHeader."Document Type");
      DocHead2.SETRANGE("Document No.",PurchHeader."No.");
      IF NOT DocHead2.FINDFIRST THEN BEGIN
        DocHead.INIT;
        DocHead.ID := 0;
        DocHead."Document Type" := PurchHeader."Document Type";
        DocHead."Document No." := PurchHeader."No.";
        DocHead.INSERT;
      END ELSE
        ERROR(EXF72);

      DocHead.RetrieveRecord(DocHead,PurchHeader."Document Type",PurchHeader."No.");

      WebSearchMgt.GetWebComp(WebCompID,COMPANYNAME);
      DocHead."Web Company ID" := WebCompID."Web Company ID";
      DocHead."Web ID" := DocHead.ID + DocHead."Web Company ID";

      DocHead.Initiator := USERID;
      DocHead."Assigned Receipt Group" := DocHead.Initiator;
      IF GetUserComp(ExUserComp,USERID) THEN BEGIN
        DocHead.Initiator := ExUserComp."User ID";
        DocHead."Assigned Receipt Group" := DocHead.Initiator;
      END;

      DocHead."Vendor No." := PurchHeader."Buy-from Vendor No.";
      DocHead."Vendor Name" := PurchHeader."Buy-from Vendor Name";
      CreateWebVendor(DocHead);

      DocHead."Admin Comment" := '';
      DocHead."Create Date" := TODAY;
      DocHead."Due Date" := PurchHeader."Due Date";
      DocHead."Posting Date" := PurchHeader."Posting Date";
      DocHead."Document Date" := PurchHeader."Document Date";
      DocHead."Expected Receipt Date" := PurchHeader."Expected Receipt Date";
      DocHead.Status := 0;
      DocHead."Predefind Posting No." := DocHead."Document No.";

      IF PurchHeader."Currency Code" <> '' THEN
        DocHead."Currency Code" := PurchHeader."Currency Code"
      ELSE IF ExFlowSetup."Show LCY Curr Web" THEN BEGIN
        GetGLSetup;
        DocHead."Currency Code" := GLSetup."LCY Code";
      END ELSE
        DocHead."Currency Code" := '';

      IF PurchHeader."Document Type" = PurchHeader."Document Type"::"Credit Memo" THEN
        DocHead."Vendor Document No." := PurchHeader."Vendor Cr. Memo No."
      ELSE
        DocHead."Vendor Document No." := PurchHeader."Vendor Invoice No.";

      DocHead."Image Name" := GetPurchHeaderImageName(PurchHeader."Document Type",PurchHeader."No.",ExDocHead2);

      IF (DocHead."Document Type" = DocHead."Document Type"::Invoice) OR
         (DocHead."Document Type" = DocHead."Document Type"::"Credit Memo") THEN
        BEGIN
          DocHead."Net Amount" := ABS(PurchHeader."Gross Invoice Amount ExFlow") - ABS(PurchHeader."Import VAT Amount");
          DocHead."VAT Amount" := ABS(PurchHeader."Import VAT Amount");
          DocHead."Gross Amount" := DocHead."Net Amount" + DocHead."VAT Amount";
        END;

      DocHead.MODIFY(TRUE);

      ExFlowSEMgt.UpdateSWEBASE(PurchHeader);

      ExDocHead2.RESET;
      IF NOT ExDocHead2.RetrieveRecord(ExDocHead2,DocHead."Document Type",DocHead."Document No.") THEN BEGIN
        ExDocHead2.INIT;
        ExDocHead2."Entry No." := 0;
        ExDocHead2."Document Type" := DocHead."Document Type";
        ExDocHead2."Document No." := DocHead."Document No.";
        ExDocHead2."Image Name" := DocHead."Image Name";
        ExDocHead2."Document ID" := DocHead.ID;
        ExDocHead2."Web ID" := DocHead."Web ID";
        IF ExFlowSetup."File storage type" = ExFlowSetup."File storage type"::Database THEN
          ImportDocument(ExDocHead2);
        ExDocHead2.INSERT;
      END ELSE BEGIN
        ExDocHead2."Image Name" := DocHead."Image Name";
        ExDocHead2."Document ID" := DocHead.ID;
        ExDocHead2."Web ID" := DocHead."Web ID";
        ExDocHead2.MODIFY;
      END;
    END;

    PROCEDURE UpdateDocument@1000000003(VAR PurchHeader@1000000000 : Record 38);
    VAR
      DocHead@1100285001 : Record 12013608;
      ExflowSetup@1100285002 : Record 12013601;
      ExDocPurchMapping@1100285000 : Record 12013617;
      ExUserComp@1100285008 : Record 12013641;
      WebCompID@1100285010 : Record 12013630;
      ExFlowSEMgt@1100285007 : Codeunit 12013598;
      WebSearchMgt@1100285009 : Codeunit 12013635;
      FldRef@1100285006 : FieldRef;
      RecRef@1100285003 : RecordRef;
      MapToFldRef@1100285005 : FieldRef;
      MapToRecRef@1100285004 : RecordRef;
    BEGIN
      ExFlowSEMgt.UpdateSWEBASEOrExF(PurchHeader);

      IF PurchHeader."Document Type" = PurchHeader."Document Type"::"Blanket Order" THEN
        EXIT;

      IF NOT DocHead.RetrieveRecord(DocHead,PurchHeader."Document Type",PurchHeader."No.") THEN BEGIN
        IF PurchHeader.Approve THEN
          CreateDocument(PurchHeader);

        EXIT;
      END ELSE IF NOT PurchHeader.Approve THEN BEGIN
        DocHead.DELETE(TRUE);
        EXIT;
      END;

      ExflowSetup.GET;

      DocHead."Document Type" := PurchHeader."Document Type";
      DocHead."Document No." := PurchHeader."No.";
      IF DocHead."Web ID" = 0 THEN BEGIN
        WebSearchMgt.GetWebComp(WebCompID,COMPANYNAME);
        DocHead."Web Company ID" := WebCompID."Web Company ID";
        DocHead."Web ID" := DocHead.ID + DocHead."Web Company ID";
      END;

      IF DocHead.Initiator = '' THEN BEGIN
        DocHead.Initiator := USERID;
        IF GetUserComp(ExUserComp,USERID) THEN
          DocHead.Initiator := ExUserComp."User ID";
      END;

      IF DocHead."Assigned Receipt Group" = '' THEN BEGIN
        DocHead."Assigned Receipt Group" := USERID;
        IF GetUserComp(ExUserComp,USERID) THEN
          DocHead."Assigned Receipt Group" := ExUserComp."User ID";
      END;

      DocHead."Vendor No." := PurchHeader."Buy-from Vendor No.";
      DocHead."Vendor Name" := PurchHeader."Buy-from Vendor Name";

      DocHead."Due Date" := PurchHeader."Due Date";
      DocHead."Posting Date" := PurchHeader."Posting Date";
      DocHead."Document Date" := PurchHeader."Document Date";
      DocHead."Expected Receipt Date" := PurchHeader."Expected Receipt Date";

      IF PurchHeader."Currency Code" <> '' THEN
        DocHead."Currency Code" := PurchHeader."Currency Code"
      ELSE IF ExflowSetup."Show LCY Curr Web" THEN BEGIN
        GetGLSetup;
        DocHead."Currency Code" := GLSetup."LCY Code";
      END ELSE
        DocHead."Currency Code" := '';

      IF PurchHeader."Document Type" = PurchHeader."Document Type"::"Credit Memo" THEN
        DocHead."Vendor Document No." := PurchHeader."Vendor Cr. Memo No."
      ELSE
        DocHead."Vendor Document No." := PurchHeader."Vendor Invoice No.";

      DocHead."Net Amount" := PurchHeader."Gross Invoice Amount ExFlow" - PurchHeader."Import VAT Amount";
      DocHead."VAT Amount" := PurchHeader."Import VAT Amount";
      DocHead."Gross Amount" := DocHead."Net Amount" + DocHead."VAT Amount";
      DocHead.MODIFY(TRUE);

      ExDocPurchMapping.RESET;
      IF ExDocPurchMapping.FINDSET THEN BEGIN
        PurchHeader.MODIFY;
        RecRef.GETTABLE(PurchHeader);
        MapToRecRef.GETTABLE(DocHead);
        REPEAT
          FldRef := RecRef.FIELD(ExDocPurchMapping."Map to Field No.");
          MapToFldRef := MapToRecRef.FIELD(ExDocPurchMapping."Field No.");
          MapToFldRef.VALUE := FldRef.VALUE;
        UNTIL ExDocPurchMapping.NEXT = 0;
        MapToRecRef.MODIFY;
        MapToRecRef.CLOSE;
        RecRef.CLOSE;
        PurchHeader.GET(PurchHeader."Document Type",PurchHeader."No.");
      END;
    END;

    PROCEDURE GetDimIndex@1000000013(Dim@1000000000 : Code[20];VAR Index@1000000001 : Integer);
    VAR
      GeneralLedgerSetup@1100285000 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      Index := 0;

      IF Dim = '' THEN
        EXIT;

      IF Dim = GeneralLedgerSetup."Shortcut Dimension 1 Code" THEN
        Index := 1;
      IF Dim = GeneralLedgerSetup."Shortcut Dimension 2 Code" THEN
        Index := 2;
      IF Dim = GeneralLedgerSetup."Shortcut Dimension 3 Code" THEN
        Index := 3;
      IF Dim = GeneralLedgerSetup."Shortcut Dimension 4 Code" THEN
        Index := 4;
      IF Dim = GeneralLedgerSetup."Shortcut Dimension 5 Code" THEN
        Index := 5;
      IF Dim = GeneralLedgerSetup."Shortcut Dimension 6 Code" THEN
        Index := 6;
      IF Dim = GeneralLedgerSetup."Shortcut Dimension 7 Code" THEN
        Index := 7;
      IF Dim = GeneralLedgerSetup."Shortcut Dimension 8 Code" THEN
        Index := 8;
    END;

    PROCEDURE DayMap@1000000018(InDate@1000000000 : Date) : Text[128];
    VAR
      Year@1000000003 : Integer;
      Week@1000000009 : Integer;
      Temp@1000000008 : Text[30];
      TxtYear@1000000011 : Text[4];
      TxtWeek@1000000012 : Text[2];
    BEGIN
      ExFlowSetup.GET;

      Week := DATE2DWY(InDate, 2);
      Year := DATE2DWY(InDate, 3);
      TxtYear := FORMAT(Year);

      IF STRLEN(TxtYear) = 2 THEN
        TxtYear := '20' + TxtYear;

      TxtWeek := FORMAT(Week);

      IF STRLEN(TxtWeek) = 1 THEN
        TxtWeek := '0' + TxtWeek;

      Temp := TxtYear + '\' + TxtWeek + '\';
      EXIT(Temp);
    END;

    PROCEDURE ShowDocument@1000000021(FileName@1000000001 : Text[250];VAR TempBlob@1100285001 : Record 99008535);
    VAR
      ExFlowFileMgt@1100285000 : Codeunit 12013602;
      TempExBlob@1100285002 : Record 12013591;
    BEGIN
      IF TempBlob.Blob.HASVALUE THEN BEGIN
        TempExBlob.INIT;
        TempExBlob.BLOB := TempBlob.Blob;
        ExFlowFileMgt.ShowBLOB(TempExBlob,FileName);
      END ELSE
        ExFlowFileMgt.ShowDoc(FileName);
    END;

    PROCEDURE ShowImageDocument@1100285073(DocType@1100285002 : Integer;DocNo@1100285001 : Code[20]);
    VAR
      TempImageName@1100285000 : Text[1024];
      ExDoc2@1100285003 : Record 12013612;
      TempBlob@1100285004 : Record 99008535;
      ExflowSetup@1100285005 : Record 12013601;
    BEGIN
      TempImageName := GetPurchHeaderImageName(DocType,DocNo,ExDoc2);
      IF ExDoc2."Image Blob".HASVALUE THEN BEGIN
        ExDoc2.CALCFIELDS("Image Blob");
        TempBlob.INIT;
        TempBlob.Blob := ExDoc2."Image Blob"
      END ELSE BEGIN
        ExflowSetup.GET;
        TempImageName := ExflowSetup."Path to Used Invoices" + TempImageName;
      END;

      ShowDocument(TempImageName,TempBlob);
    END;

    PROCEDURE ShowImagePostedDoc@1100285075(DocType@1100285002 : Integer;DocNo@1100285001 : Code[20]);
    VAR
      TempImageName@1100285000 : Text[1024];
      ExDoc2@1100285003 : Record 12013612;
      TempBlob@1100285004 : Record 99008535;
      ExflowSetup@1100285005 : Record 12013601;
    BEGIN
      TempImageName := GetPostedImageName(DocType,DocNo,ExDoc2);
      IF ExDoc2."Image Blob".HASVALUE THEN BEGIN
        ExDoc2.CALCFIELDS("Image Blob");
        TempBlob.INIT;
        TempBlob.Blob := ExDoc2."Image Blob"
      END ELSE BEGIN
        ExflowSetup.GET;
        TempImageName := ExflowSetup."Path to Used Invoices" + TempImageName;
      END;

      ShowDocument(TempImageName,TempBlob);
    END;

    PROCEDURE Approve@1000000011(PurchLine@1000000000 : Record 39);
    VAR
      DocLine@1100285000 : Record 12013609;
    BEGIN
      WITH PurchLine DO BEGIN
        IF Approve THEN BEGIN
          IF NOT DocLine.RetrieveRecord(DocLine,"Document Type","Document No.","Line No.") THEN BEGIN
            CreateDocumentLine(PurchLine,FALSE,TRUE);
            COMMIT;
          END;

          DocLine.RESET;
          DocLine.SETCURRENTKEY("Document No.");
          DocLine.SETRANGE("Document Type",PurchLine."Document Type");
          DocLine.SETRANGE("Document No.",PurchLine."Document No.");
          DocLine.SETRANGE("Line No.",PurchLine."Line No.");
          PAGE.RUNMODAL(12013609,DocLine);
        END;
      END;
    END;

    PROCEDURE ApprovePostedInvoice@1100285009(PostedInvoiceLine@1000000000 : Record 123);
    VAR
      PostedDocLine@1100285000 : Record 12013627;
    BEGIN
      WITH PostedInvoiceLine DO BEGIN
        IF Approve THEN BEGIN
          PostedDocLine.RetrieveRecord(PostedDocLine,PostedDocLine."Document Type"::"Posted Invoice","Document No.","Line No.");

          PostedDocLine.RESET;
          PostedDocLine.SETCURRENTKEY("Document No.");
          PostedDocLine.SETRANGE("Document Type",PostedDocLine."Document Type"::"Posted Invoice");
          PostedDocLine.SETRANGE("Document No.","Document No.");
          PostedDocLine.SETRANGE("Line No.","Line No.");
          PAGE.RUNMODAL(12013658,PostedDocLine);
        END;
      END;
    END;

    PROCEDURE ApprovePostedCM@1100285011(PostedCMLine@1000000000 : Record 125);
    VAR
      PostedDocLine@1100285000 : Record 12013627;
    BEGIN
      WITH PostedCMLine DO BEGIN
        IF Approve THEN BEGIN
          PostedDocLine.RetrieveRecord(PostedDocLine,PostedDocLine."Document Type"::"Posted Credit Memo","Document No.","Line No.");

          PostedDocLine.RESET;
          PostedDocLine.SETCURRENTKEY("Document No.");
          PostedDocLine.SETRANGE("Document Type",PostedDocLine."Document Type"::"Posted Credit Memo");
          PostedDocLine.SETRANGE("Document No.","Document No.");
          PostedDocLine.SETRANGE("Line No.","Line No.");
          PAGE.RUNMODAL(12013658,PostedDocLine);
        END;
      END;
    END;

    PROCEDURE CreateDocumentLine@1100285005(VAR PurchLine@1100285000 : Record 39;Show@1100285008 : Boolean;CreateApproverLines@1100285011 : Boolean);
    VAR
      DocHead@1100285001 : Record 12013608;
      DocLine@1100285002 : Record 12013609;
      DocLine2@1100285006 : Record 12013609;
      DocLine3@1100285007 : Record 12013609;
      PurchHeader@1100285004 : Record 38;
      FreeLine@1100285005 : Integer;
      cuUpdatePurchaseLine@1100285009 : Codeunit 12013609;
      ExPeriodicMgt@1100285003 : Codeunit 12013599;
    BEGIN
      IF NOT PurchLine.Approve THEN
        EXIT;

      IF PurchLine."Document Type" = PurchLine."Document Type"::"Blanket Order" THEN
        EXIT;

      ExFlowSetup.GET;
      PurchHeader.GET(PurchLine."Document Type",PurchLine."Document No.");

      IF NOT DocHead.RetrieveRecord(DocHead,PurchLine."Document Type",PurchLine."Document No.") THEN BEGIN
        CreateDocument(PurchHeader);
        DocHead.RetrieveRecord(DocHead,PurchLine."Document Type",PurchLine."Document No.");
      END;

      IF DocLine3.RetrieveRecord(DocLine3,PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.") THEN BEGIN // Renumber web line
        DocLine2.RESET;
        DocLine2.SETCURRENTKEY("Document No.","Line No.");
        DocLine2.SETRANGE("Document Type",PurchLine."Document Type");
        DocLine2.SETRANGE("Document No.",PurchLine."Document No.");
        IF DocLine2.FIND('+') THEN
          FreeLine := DocLine2."Line No." + 10000
        ELSE
          FreeLine := 10000;

        cuUpdatePurchaseLine.RenumberDocLine(DocLine3,FreeLine);
      END;

      DocLine.INIT;
      DocLine.ID := 0;
      DocLine."Document Type" := PurchLine."Document Type";
      DocLine."Document No." := PurchLine."Document No.";
      DocLine."Line No." := PurchLine."Line No.";
      DocLine."Document ID" := DocHead.ID;
      DocLine.INSERT(FALSE);

      DocLine.Flowstatus := 0;

      DocLine."Line Type" := PurchLine.Type;
      DocLine."No." := PurchLine."No.";
      IF PurchLine.Description <> DocLine.GetName THEN
        DocLine.Description := PurchLine.Description + PurchLine."Description 2"
      ELSE
        DocLine.Description := '';

      DocLine.Quantity := PurchLine.Quantity;
      DocLine."Direct Unit Cost" := PurchLine."Direct Unit Cost";
      DocLine.Amount := PurchLine."Line Amount";
      DocLine."Line Discount %" := PurchLine."Line Discount %";

      DocLine."Job No." := PurchLine."Job No.";
      DocLine."Job Task No." := PurchLine."Job Task No.";
      DocLine."Invoice to Customer" := PurchLine."Invoice to Customer";
      DocLine."Invoicing Amount" := PurchLine."Invoicing Amount";
      DocLine."Start Date for Invoicing" := PurchLine."Start Date for Invoicing";
      DocLine."Invoicing Code" := PurchLine."Invoicing Code";
      DocLine."First Approver" := PurchLine."First Approver";
      DocLine."Template Rule" := PurchLine."Template Rule";
      DocLine."VAT Prod. Posting Group" := PurchLine."VAT Prod. Posting Group";
      //4PS
      DocLine."Service Order No." := PurchLine."Service Order No.";
      //4PS

      ExPeriodicMgt.ExFlowCodeunit_UpdatePeriodicDocLine(DocLine,PurchLine);

      UpdateOrderInfo(DocLine,PurchLine);

      DocLine.MODIFY(TRUE);

      IF CreateApproverLines THEN
        CreateApproversFromPurch(DocLine, PurchLine,'',TRUE, '', '',Show);

      DocLine.GET(DocLine.ID);
      DocLine."Applied Template Rule" := PurchLine."Applied Template Rule";
      DocLine.MODIFY;

      UpdateDocLineDim(DocLine,PurchLine);

      IF ExFlowSetup."Show Approvers Automatically" AND Show THEN BEGIN
        COMMIT;
        DocLine.RESET;
        DocLine.SETCURRENTKEY("Document No.","Line No.");
        DocLine.SETRANGE("Document Type",PurchLine."Document Type");
        DocLine.SETRANGE("Document No.",PurchLine."Document No.");
        DocLine.SETRANGE("Line No.",PurchLine."Line No.");
        PAGE.RUNMODAL(12013609,DocLine);
      END;
    END;

    PROCEDURE CheckMinAppAmount@1100285004(VAR PurchLine@1000000000 : Record 39;PurchHeader@1100285000 : Record 38) : Boolean;
    VAR
      DocLine@1000000002 : Record 12013609;
      CurrExchRate@1100285001 : Record 330;
      TempLineAmt@1100285002 : Decimal;
    BEGIN
      ExFlowSetup.GET;

      IF ExFlowSetup."Min. Approval Amount (LCY)" = 0 THEN
        EXIT(TRUE);

      TempLineAmt := PurchLine."Line Amount";
      IF PurchHeader."Currency Code" <> '' THEN
        TempLineAmt := CurrExchRate.ExchangeAmtFCYToLCY(
          0, PurchHeader."Job No.",
          PurchHeader."Posting Date",PurchHeader."Currency Code",
          TempLineAmt,PurchHeader."Currency Factor",FALSE); //4PS

      IF ABS(TempLineAmt) < ExFlowSetup."Min. Approval Amount (LCY)" THEN BEGIN
        PurchLine.Approve := FALSE;

        IF DocLine.RetrieveRecord(DocLine,PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.") THEN
          DocLine.DELETE(TRUE);

        EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE CreateApproversFromPurch@1100285002(VAR DocLine@1100285005 : Record 12013609;VAR PurchLine@1100285009 : Record 39;TemplateRuleCode@1100285011 : Code[20];CalledFromUpdateMode@1100285022 : Boolean;CurrentDocDimCode@1100285029 : Code[20];CurrentDocDimValue@1100285028 : Code[20];Show@1100285007 : Boolean);
    VAR
      DocLineApp@1100285019 : Record 12013610;
      PurchaseHeader@1100285018 : Record 38;
      TemplateRule@1100285017 : Record 12013645;
      TemplateRuleLines@1100285016 : Record 12013603;
      ExUserGroup@1100285015 : Record 12013606;
      Job@1100285014 : Record 11072003;
      DimOwner@1100285013 : Record 12013655;
      TempDimValue@1100285020 : TEMPORARY Record 349;
      DocHead@1100285023 : Record 12013608;
      NumberOfApprovers@1100285012 : Integer;
      NextLine@1100285010 : Integer;
      RuleFor@1100285008 : Integer;
      MaxAmount@1100285006 : Decimal;
      ApproverExist@1100285004 : Boolean;
      First@1100285003 : Boolean;
      CreateLine@1100285002 : Boolean;
      CurrentDocDimFound@1100285021 : Boolean;
      Found@1100285000 : Boolean;
      LastApprover@1100285001 : Code[50];
    BEGIN
      ExFlowSetup.GET;

      DocHead.GET(DocLine."Document ID");
      IF DocHead.Status IN [DocHead.Status::Approved,DocHead.Status::"Ready for posting"] THEN
        EXIT;

      DocLineApp.RESET;
      DocLineApp.SETCURRENTKEY("Document No.");
      DocLineApp.SETRANGE("Document Type",PurchLine."Document Type");
      DocLineApp.SETRANGE("Document No.",PurchLine."Document No.");
      DocLineApp.SETRANGE("Line No.",PurchLine."Line No.");
      DocLineApp.SETFILTER(Flowstatus, '<>%1&<>%2', DocLineApp.Flowstatus::Rejected,DocLineApp.Flowstatus::Approved);
      ApproverExist := DocLineApp.FINDFIRST;

      IF (TemplateRuleCode = '') AND (PurchLine."Template Rule" <> '') THEN
        TemplateRuleCode := PurchLine."Template Rule";

      Found := FALSE;
      IF TemplateRuleCode <> '' THEN
        IF TemplateRule.GET(TemplateRuleCode) THEN BEGIN
          Found := TRUE;
          IF TemplateRuleCode <> PurchLine."Template Rule" THEN
            PurchLine."Template Rule" := TemplateRuleCode;
        END;

      IF NOT Found THEN BEGIN
        CurrentDocDimFound := FALSE;

        ExFlowDimMgt.GetDimFromPurchLine(PurchLine,CurrentDocDimFound,CurrentDocDimCode,CurrentDocDimValue,TempDimValue);

        RuleFor := 0;
        CASE PurchLine."Document Type" OF
          PurchLine."Document Type"::Quote: RuleFor := 3;
          PurchLine."Document Type"::Order: RuleFor := 1;
          PurchLine."Document Type"::Invoice: RuleFor := 2;
          PurchLine."Document Type"::"Credit Memo": RuleFor := 2;
        END;

        CLEAR(PurchaseHeader);
        IF PurchLine."ExFlow Order No." <> '' THEN BEGIN
          IF PurchLine."Document Type" = PurchLine."Document Type"::Invoice THEN BEGIN
            IF PurchaseHeader.GET(PurchaseHeader."Document Type"::Order,PurchLine."ExFlow Order No.") THEN;
          END ELSE IF PurchLine."Document Type" = PurchLine."Document Type"::"Credit Memo" THEN
            IF PurchaseHeader.GET(PurchaseHeader."Document Type"::"Return Order",PurchLine."ExFlow Order No.") THEN;
        END;

        IF PurchaseHeader."No." = '' THEN
          PurchaseHeader.GET(PurchLine."Document Type",PurchLine."Document No.");

        Found := TemplateRule.FindTemplateFromPurch(PurchLine, TemplateRule, RuleFor, PurchaseHeader."Purchaser Code", TempDimValue);
      END;

      IF NOT ExFlowSetup."Propose always new Approvers" THEN
        IF Found AND (TemplateRule.Code = PurchLine."Applied Template Rule") THEN
          EXIT;

      IF NOT PurchLine."Approval Flow Modified" THEN BEGIN
        IF ApproverExist THEN
          DocLineApp.DELETEALL;

        ApproverExist := FALSE;
      END;

      IF ExFlowSetup."Propose always new Approvers" AND ApproverExist THEN
        DocLineApp.DELETEALL;

      DocLineApp.RESET;
      DocLineApp.SETCURRENTKEY("Document Line ID","Approver Order");
      DocLineApp.SETRANGE("Document Line ID", DocLine.ID);
      IF DocLineApp.FINDLAST THEN
        NextLine := DocLineApp."Approver Order" + 10000
      ELSE
        NextLine := 10000;

      NumberOfApprovers := 0;
      MaxAmount := PurchLine."Line Amount";

      PurchaseHeader.GET(PurchLine."Document Type", PurchLine."Document No.");

      IF Found THEN BEGIN
        IF TemplateRule."Total Invoice Amount" THEN BEGIN
          MaxAmount := PurchaseHeader."Gross Invoice Amount ExFlow" - PurchaseHeader."Import VAT Amount";
          IF (MaxAmount = 0) OR (PurchaseHeader."Document Type" IN [PurchaseHeader."Document Type"::Quote,PurchaseHeader."Document Type"::Order]) THEN
            MakeTotals(PurchLine,MaxAmount);

          MaxAmount := ABS(MaxAmount);
        END;

        IF (PurchaseHeader."Currency Factor" <> 1) AND (PurchaseHeader."Currency Factor" <> 0) THEN
          MaxAmount := MaxAmount / PurchaseHeader."Currency Factor";
      END;

      First := TRUE;
      LastApprover := '';

      Show := IsFirstApproverInserted(PurchLine,DocLine,LastApprover,NextLine,NumberOfApprovers,First,Show);

      MaxAmount := ABS(MaxAmount);

      IF Found THEN BEGIN
        TemplateRuleLines.RESET;
        TemplateRuleLines.SETRANGE(Code,TemplateRule.Code);
        IF MaxAmount >= 0 THEN
          TemplateRuleLines.SETFILTER("Over Amount",'<=%1', MaxAmount);
        TemplateRuleLines.SETFILTER("Not Over Amount",'>%1|0', MaxAmount);
        TemplateRuleLines.SETFILTER("Approver Group", '<>%1', '');
        IF TemplateRuleLines.FINDSET THEN
          REPEAT
            CreateLine := TRUE;
            ExUserGroup.GET(TemplateRuleLines."Approver Group");
            GetEXReplacementUserGroup(ExUserGroup, TemplateRule,TempDimValue, PurchLine."Job No.");

            IF CreateLine THEN BEGIN
              InsertApprover(DocLine,ExUserGroup,NextLine,First,DocLineApp.Source::"From template rule NAV",LastApprover,TemplateRuleLines.Code,'',ExFlowSetup);

              NextLine := NextLine + 10000;
              NumberOfApprovers := NumberOfApprovers + 1;

              Show := TRUE;
            END;
          UNTIL TemplateRuleLines.NEXT = 0;
      END;

      IF Found THEN BEGIN
        PurchLine."Applied Template Rule" := TemplateRule.Code;
        IF (DocLine."Applied Template Rule" <> PurchLine."Applied Template Rule") OR (DocLine."Template Rule" <> PurchLine."Template Rule") THEN BEGIN
          DocLine."Applied Template Rule" := PurchLine."Applied Template Rule";
          DocLine."Template Rule" := PurchLine."Template Rule";
          DocLine.MODIFY(FALSE);
        END;
      END ELSE
        PurchLine."Applied Template Rule" := '';

      IF NOT CalledFromUpdateMode THEN
        PurchLine.MODIFY;

      DocLineApp.RESET;
      DocLineApp.SETCURRENTKEY("Document Line ID","Approver Order");
      DocLineApp.SETRANGE("Document Line ID", DocLine.ID);
      DocLineApp.SETFILTER(Flowstatus, '<>%1', DocLineApp.Flowstatus::Rejected);
      IF DocLineApp.FINDFIRST THEN
        DocLineApp.ApprovalStatus(DocLineApp,'Update')
      ELSE
        DocLineApp.ApprovalStatus(DocLineApp,'Delete');
    END;

    PROCEDURE CreateApproversFromExDoc@1100285026(VAR DocLine@1100285005 : Record 12013609;TemplateRuleCode@1100285011 : Code[20];CalledFromUpdateMode@1100285022 : Boolean;CurrentDocDimCode@1100285029 : Code[20];CurrentDocDimValue@1100285028 : Code[20];VAR TempApproversFromWeb@1100285018 : TEMPORARY Record 12013610;ApprovalUser@1100285004 : Code[50];Force@1100285010 : Boolean;DocAmount@1100285025 : Decimal);
    VAR
      TempDimValueP@1100285001 : TEMPORARY Record 349;
      TempDimValueD@1100285002 : TEMPORARY Record 349;
      DocLineApp@1100285024 : Record 12013610;
      PurchaseHeader@1100285023 : Record 38;
      TemplateRule@1100285021 : Record 12013645;
      TemplateRuleLines@1100285020 : Record 12013603;
      ExUserGroup@1100285019 : Record 12013606;
      ExUserGroupFirstApp@1100285027 : Record 12013606;
      Job@1100285017 : Record 11072003;
      DimOwner@1100285016 : Record 12013655;
      PurchLine@1100285026 : Record 39;
      NumberOfApprovers@1100285015 : Integer;
      NextLine@1100285014 : Integer;
      RuleFor@1100285013 : Integer;
      MaxAmount@1100285012 : Decimal;
      LastApprover@1100285007 : Code[50];
      First@1100285008 : Boolean;
      CreateLine@1100285006 : Boolean;
      CurrentDocDimFound@1100285000 : Boolean;
      Found@1100285003 : Boolean;
      EXDocLineDim@1100285009 : Record 12013611;
      Show@1100285030 : Boolean;
      CheckDocLine@1100285031 : Record 12013609;
    BEGIN
      ExFlowSetup.GET;

      IF ExFlowSetup."Copy Approval Flow Matched PO" = ExFlowSetup."Copy Approval Flow Matched PO"::Only THEN BEGIN
        DocLineApp.RESET;
        DocLineApp.SETCURRENTKEY("Document Line ID","Approver Order");
        DocLineApp.SETRANGE("Document Line ID", DocLine.ID);
        DocLineApp.SETRANGE("Copied from Purchase Order", TRUE);
        IF DocLineApp.FINDFIRST THEN
          EXIT;
      END;

      CurrentDocDimFound := FALSE;
      CLEAR(PurchLine);
      IF PurchLine.GET(DocLine."Document Type",DocLine."Document No.",DocLine."Line No.") THEN
        ExFlowDimMgt.GetDimFromPurchLine(PurchLine,CurrentDocDimFound,CurrentDocDimCode,CurrentDocDimValue,TempDimValueP);
      ExFlowDimMgt.GetDimFromDocLine(DocLine,CurrentDocDimFound,CurrentDocDimCode,CurrentDocDimValue,TempDimValueD);

      TempDimValueP.RESET;
      IF TempDimValueP.FINDSET THEN
        REPEAT
          TempDimValueD.SETRANGE("Dimension Code", TempDimValueP."Dimension Code");
          IF NOT TempDimValueD.FINDFIRST THEN BEGIN
            TempDimValueD.INIT;
            TempDimValueD.TRANSFERFIELDS(TempDimValueP);
            TempDimValueD.INSERT;
          END;
        UNTIL TempDimValueP.NEXT = 0;

      TempDimValueD.RESET;

      IF NOT PurchLine.GET(DocLine."Document Type",DocLine."Document No.",DocLine."Line No.") THEN
        CLEAR(PurchLine);

      IF (TemplateRuleCode = '') AND (DocLine."Template Rule" <> '') THEN
        TemplateRuleCode := DocLine."Template Rule";

      Found := TRUE;

      IF NOT TemplateRule.GET(TemplateRuleCode) THEN BEGIN
        RuleFor := 0;
        CASE DocLine."Document Type" OF
          DocLine."Document Type"::Quote: RuleFor := 3;
          DocLine."Document Type"::Order: RuleFor := 1;
          DocLine."Document Type"::Invoice: RuleFor := 2;
          DocLine."Document Type"::"Credit Memo": RuleFor := 2;
        END;

        CLEAR(PurchaseHeader);
        IF DocLine."Order No." <> '' THEN BEGIN
          IF DocLine."Document Type" = DocLine."Document Type"::Invoice THEN BEGIN
            IF PurchaseHeader.GET(PurchaseHeader."Document Type"::Order,DocLine."Order No.") THEN;
          END ELSE IF DocLine."Document Type" = DocLine."Document Type"::"Credit Memo" THEN
            IF PurchaseHeader.GET(PurchaseHeader."Document Type"::"Return Order",DocLine."Order No.") THEN;
        END;

        IF PurchaseHeader."No." = '' THEN
          PurchaseHeader.GET(DocLine."Document Type",DocLine."Document No.");

        Found := TemplateRule.FindTemplateFromDocLine(DocLine, TemplateRule, RuleFor, PurchaseHeader."Purchaser Code", TempDimValueD);
      END;

      IF NOT Force THEN
        IF Found AND (TemplateRule.Code = DocLine."Applied Template Rule") THEN
          EXIT;

      DocLineApp.RESET;
      DocLineApp.SETCURRENTKEY("Document Line ID","Approver Order");
      DocLineApp.SETRANGE("Document Line ID",DocLine.ID);
      DocLineApp.SETFILTER(Flowstatus, '<>%1&<>%2', DocLineApp.Flowstatus::Rejected,DocLineApp.Flowstatus::Approved);
      // From the web: always delete the approvers not manually added
      IF DocLineApp.FINDLAST THEN BEGIN
        DocLineApp.SETRANGE(Changed, FALSE);
        IF NOT DocLineApp.ISEMPTY THEN
          DocLineApp.DELETEALL;
      END;

      LastApprover := '';
      DocLineApp.RESET;
      DocLineApp.SETCURRENTKEY("Document Line ID","Approver Order");
      DocLineApp.SETRANGE("Document Line ID",DocLine.ID);
      IF DocLineApp.FINDLAST THEN BEGIN
        NextLine := DocLineApp."Approver Order" + 10000;
        LastApprover := DocLineApp.Approver;
      END ELSE
        NextLine := 10000;

      NumberOfApprovers := 0;
      MaxAmount := DocLine.Amount;

      PurchaseHeader.GET(DocLine."Document Type", DocLine."Document No.");

      IF Found THEN BEGIN
        IF TemplateRule."Total Invoice Amount" THEN BEGIN
          MaxAmount := PurchaseHeader."Gross Invoice Amount ExFlow" - PurchaseHeader."Import VAT Amount";
          IF (MaxAmount = 0) OR (PurchaseHeader."Document Type" IN [PurchaseHeader."Document Type"::Quote,PurchaseHeader."Document Type"::Order]) THEN BEGIN
            IF DocAmount > 0 THEN
              MaxAmount := DocAmount
            ELSE
              MakeTotalsExDoc(DocLine,MaxAmount);
          END;
          MaxAmount := ABS(MaxAmount);
        END;

        IF (PurchaseHeader."Currency Factor" <> 1) AND (PurchaseHeader."Currency Factor" <> 0) THEN
          MaxAmount := MaxAmount / PurchaseHeader."Currency Factor";
      END;

      First := TRUE;
      IsFirstApproverInserted(PurchLine,DocLine,LastApprover,NextLine,NumberOfApprovers,First,FALSE);

      // removed code regarding first approver
      TempApproversFromWeb.RESET;
      TempApproversFromWeb.SETCURRENTKEY("Document Line ID");
      TempApproversFromWeb.SETRANGE("Document Line ID", DocLine.ID);
      IF TempApproversFromWeb.FINDSET THEN
        REPEAT
          ExUserGroup.GET(TempApproversFromWeb.Approver);
          IF InsertApprover(DocLine,ExUserGroup,NextLine,First,DocLineApp.Source::"Manually in Web",LastApprover,'',ApprovalUser,ExFlowSetup) THEN BEGIN
            NextLine := NextLine + 10000;
            NumberOfApprovers := NumberOfApprovers + 1;
          END;
        UNTIL TempApproversFromWeb.NEXT = 0;

      MaxAmount := ABS(MaxAmount);

      IF Found THEN BEGIN
        TemplateRuleLines.RESET;
        TemplateRuleLines.SETRANGE(Code,TemplateRule.Code);
        IF MaxAmount >= 0 THEN
          TemplateRuleLines.SETFILTER("Over Amount",'<=%1', MaxAmount);
        TemplateRuleLines.SETFILTER("Not Over Amount",'>%1|0', MaxAmount);
        TemplateRuleLines.SETFILTER("Approver Group", '<>%1', '');
        IF TemplateRuleLines.FINDSET THEN
          REPEAT
            ExUserGroup.GET(TemplateRuleLines."Approver Group");
            GetEXReplacementUserGroup(ExUserGroup, TemplateRule, TempDimValueD, DocLine."Job No.");
            TempApproversFromWeb.SETRANGE(Approver, ExUserGroup.Code);
            CreateLine := NOT TempApproversFromWeb.FINDFIRST;

            IF CreateLine THEN BEGIN
              IF InsertApprover(DocLine,ExUserGroup,NextLine,First,DocLineApp.Source::"From template rule Web",LastApprover,TemplateRuleLines.Code,ApprovalUser,ExFlowSetup) THEN BEGIN
                NextLine := NextLine + 10000;
                NumberOfApprovers := NumberOfApprovers + 1;
              END;
            END;
          UNTIL TemplateRuleLines.NEXT = 0;
      END;

      IF Found THEN
        DocLine."Applied Template Rule" := TemplateRule.Code
      ELSE
        DocLine."Applied Template Rule" := '';

      DocLine.MODIFY;

      //No approvers to add - no need to update status - update doclineapp which technically is created on web to show it was validated by new temp rule
      IF NumberOfApprovers = 0 THEN BEGIN
        IF DocLineApp."Added from Template Rule" <> DocLine."Applied Template Rule" THEN BEGIN
          DocLineApp."Added from Template Rule" := DocLine."Applied Template Rule";
          DocLineApp.Source := DocLineApp.Source::"From template rule Web";
          DocLineApp."Added from Template Rule" := DocLine."Applied Template Rule";
          DocLineApp.MODIFY;
        END;
      END;

      //Set DocLineSatatus from DocLineAppStatus Last Line
      DocLineApp.RESET;
      DocLineApp.SETCURRENTKEY("Document Line ID","Approver Order");
      DocLineApp.SETRANGE("Document Line ID",DocLine.ID);
      IF DocLineApp.FINDLAST THEN
        REPEAT
          CASE DocLineApp.Flowstatus OF
            DocLineApp.Flowstatus::Approved : CheckDocLine.Flowstatus := CheckDocLine.Flowstatus::Approved;
            DocLineApp.Flowstatus::Current : CheckDocLine.Flowstatus := CheckDocLine.Flowstatus::Active;
            DocLineApp.Flowstatus::"Not processed" : CheckDocLine.Flowstatus := CheckDocLine.Flowstatus::Active;
            DocLineApp.Flowstatus::"On hold" : CheckDocLine.Flowstatus := CheckDocLine.Flowstatus::Active;
            DocLineApp.Flowstatus::Rejected : CheckDocLine.Flowstatus := CheckDocLine.Flowstatus::Rejected;
          END;

          IF DocLine.Flowstatus <> CheckDocLine.Flowstatus THEN BEGIN
            DocLine.Flowstatus := CheckDocLine.Flowstatus;
            DocLine.MODIFY;
            DocLine.SetDocumentStatus(DocLine);
          END;
        UNTIL DocLineApp.NEXT = 0;
    END;

    PROCEDURE InsertApprover@1100285053(DocLine@1100285001 : Record 12013609;ExUserGroup@1100285002 : Record 12013606;NextLine@1100285003 : Integer;VAR First@1100285006 : Boolean;Source@1100285000 : Integer;VAR LastApprover@1100285007 : Code[50];AddedFromTemplateRule@1100285008 : Code[20];ApprovalUser@1100285009 : Code[50];ExFlowSetup@1100285010 : Record 12013601) ApproverInserted : Boolean;
    VAR
      DocLineApp@1100285004 : Record 12013610;
      ExflowToInvoice@1100285005 : Codeunit 12013592;
    BEGIN
      IF ExFlowSetup."Do not add approver (dynamic)" THEN
        IF ExUserGroup.Code = ApprovalUser THEN
          EXIT(FALSE);

      IF ExUserGroup.Code = LastApprover THEN
        EXIT(FALSE);

      IF ExUserGroup.Code = '' THEN
        EXIT(FALSE);

      IF ExUserGroup.Blocked THEN
        EXIT(FALSE);

      DocLineApp.INIT;
      DocLineApp."Document Type" := DocLine."Document Type";
      DocLineApp."Document No." := DocLine."Document No.";
      DocLineApp."Line No." := DocLine."Line No.";
      DocLineApp."Approver Order" := NextLine;
      DocLineApp.Approver := ExUserGroup.Code;
      DocLineApp."Document Line ID" := DocLine.ID;
      DocLineApp."Document ID" := DocLine."Document ID";
      IF ExUserGroup."Auto Approve" THEN
        ExflowToInvoice.AutoApproveGrp(DocLineApp, ExUserGroup.Code, ExUserGroup."Auto Approve Comment")
      ELSE
        IF First THEN
          BEGIN
            First := FALSE;
            DocLineApp.VALIDATE(Flowstatus,DocLineApp.Flowstatus::Current);
          END;

      DocLineApp.ID := 0;
      IF DocLineApp.Flowstatus = DocLineApp.Flowstatus::Current THEN
        DocLineApp."Flowstatus Change Date" := CURRENTDATETIME;

      DocLineApp.Source := Source;
      DocLineApp."Added from Template Rule" := AddedFromTemplateRule;
      DocLineApp.INSERT(FALSE);

      LastApprover := DocLineApp.Approver;
      EXIT(TRUE);
    END;

    PROCEDURE DeleteDocument@1100285013(Purchheader@1100285000 : Record 38);
    VAR
      DocHead@1100285001 : Record 12013608;
    BEGIN
      IF NOT DocHead.RetrieveRecord(DocHead,Purchheader."Document Type",Purchheader."No.") THEN
        EXIT;

      DocHead.DELETE(TRUE);
    END;

    PROCEDURE AnyApproved@1100285014(PurchHeader@1100285000 : Record 38) : Boolean;
    VAR
      DocLineApp@1100285001 : Record 12013610;
    BEGIN
      DocLineApp.RESET;
      DocLineApp.SETCURRENTKEY("Document No.");
      DocLineApp.SETRANGE("Document Type",PurchHeader."Document Type");
      DocLineApp.SETRANGE("Document No.",PurchHeader."No.");
      DocLineApp.SETRANGE("Auto Approved", FALSE);
      DocLineApp.SETFILTER("Approved By",'<>%1','');
      IF DocLineApp.FIND('-') THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE AnyApprovedLine@1100285015(PurchLine@1100285000 : Record 39) : Boolean;
    VAR
      DocLineApp@1100285001 : Record 12013610;
    BEGIN
      DocLineApp.RESET;
      DocLineApp.SETCURRENTKEY("Document No.");
      DocLineApp.SETRANGE("Document Type",PurchLine."Document Type");
      DocLineApp.SETRANGE("Document No.",PurchLine."Document No.");
      DocLineApp.SETRANGE("Line No.",PurchLine."Line No.");
      DocLineApp.SETFILTER("Approved By",'<>%1','');

      IF DocLineApp.FIND('-') THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE UpdateDocLineDim@1100285003(DocLine@1100285004 : Record 12013609;VAR PurchLine@1100285000 : Record 39);
    VAR
      DocLineDim@1100285002 : Record 12013611;
      Column@1100285005 : Record 12013661;
    BEGIN
      DocLineDim.RESET;
      DocLineDim.SETCURRENTKEY("Document Line ID");
      DocLineDim.SETRANGE("Document Line ID", DocLine.ID);
      DocLineDim.DELETEALL;
      //Dims
      ExFlowDimMgt.InsertExDocDim(PurchLine,DocLine);
      //Line type
      CASE PurchLine.Type OF
        PurchLine.Type::"G/L Account":
          AddExtraToExFlowDim('G_LACCOUNT', PurchLine);
        PurchLine.Type::Item:
          AddExtraToExFlowDim('ITEM', PurchLine);
        PurchLine.Type::"Fixed Asset":
          AddExtraToExFlowDim('FIXEDASSET', PurchLine);
        PurchLine.Type::"Charge (Item)":
          AddExtraToExFlowDim('CHARGE', PurchLine);
      END;
      //Misc Columns
      Column.RESET;
      Column.SETFILTER("Dimension Code", '%1', '');
      IF Column.FINDSET THEN
        REPEAT
          IF (Column.Source <> 'G_LACCOUNT') AND (Column.Source <> 'ITEM') AND
             (Column.Source <> 'FIXEDASSET') AND (Column.Source <> 'CHARGE') THEN
            AddExtraToExFlowDim(Column.Code, PurchLine);
        UNTIL Column.NEXT = 0;
    END;

    PROCEDURE AddExtraToExFlowDim@1100285018(InCode@1100285001 : Code[20];PurchLine@1100285000 : Record 39);
    VAR
      DocLine@1100285008 : Record 12013609;
      Column@1100285003 : Record 12013661;
      Column2@1100285009 : Record 12013661;
      DocLineDim@1100285002 : Record 12013611;
      DocLineDim2@1100285004 : Record 12013611;
      NewDocLineDim@1100285010 : Record 12013611;
      Job@1100285011 : Record 11072003;
      ExFWorkFlowMgt@1100285005 : Codeunit 12013593;
      RecRef@1100285007 : RecordRef;
      FldRef@1100285006 : FieldRef;
      ExPeriodicMgt@1100285012 : Codeunit 12013599;
    BEGIN
      // Source changed to InCode
      Column.RESET;
      Column.SETRANGE(Source, InCode);
      IF NOT Column.FINDFIRST THEN
        EXIT;

      DocLineDim.INIT;
      DocLineDim.ID := 0;
      DocLineDim."Document Type" := PurchLine."Document Type";
      DocLineDim."Document No." := PurchLine."Document No.";
      DocLineDim."Line No." := PurchLine."Line No.";
      DocLineDim."Dimension Code" := Column.Code;
      DocLineDim."Column ID" := Column.ID;

      IF (Column.Source = 'G_LACCOUNT') OR (Column.Source = 'ITEM') OR
         (Column.Source = 'FIXEDASSET') OR (Column.Source = 'CHARGE') THEN
        DocLineDim."Dimension Value" := PurchLine."No.";

      IF ExPeriodicMgt.ExFlowCodeunit_UpdatePerDocLineDim(InCode,PurchLine,DocLineDim) THEN
        EXIT;

      IF InCode = 'JOB' THEN
        IF PurchLine."Job No." <> '' THEN BEGIN
          DocLineDim."Dimension Value" := PurchLine."Job No.";

          Column2.SETRANGE(Code,'CUSTOMER');
          IF Column2.FINDFIRST THEN BEGIN
            NewDocLineDim.INIT;
            NewDocLineDim.TRANSFERFIELDS(DocLineDim);
            NewDocLineDim."Dimension Code" := 'CUSTOMER';
            NewDocLineDim."Column ID" := Column2.ID;
            IF Job.GET(PurchLine."Job No.") THEN
              NewDocLineDim."Dimension Value" := Job."Bill-to Customer No.";

            IF NewDocLineDim."Dimension Value" <> '' THEN BEGIN
              DocLineDim2.RESET;
              DocLineDim2.SETCURRENTKEY("Document No.");
              DocLineDim2.SETRANGE("Document Type", NewDocLineDim."Document Type");
              DocLineDim2.SETRANGE("Document No.", NewDocLineDim."Document No.");
              DocLineDim2.SETRANGE("Line No.", NewDocLineDim."Line No.");
              DocLineDim2.SETRANGE("Dimension Code", NewDocLineDim."Dimension Code");
              IF DocLineDim2.ISEMPTY THEN BEGIN
                DocLine.RetrieveRecord(DocLine, PurchLine."Document Type", PurchLine."Document No.", PurchLine."Line No.");
                NewDocLineDim."Document Line ID" := DocLine.ID;
                NewDocLineDim."Document ID" := DocLine."Document ID";
                NewDocLineDim.INSERT;
              END;
            END;
          END;
        END ELSE
          EXIT;

      IF InCode = 'CUSTOMER' THEN
        EXIT;

      IF InCode = 'INV_CODE' THEN
        IF PurchLine."Invoicing Code" <> '' THEN
          DocLineDim."Dimension Value" := PurchLine."Invoicing Code"
        ELSE
          EXIT;

      IF InCode = 'JOBTASK' THEN
        IF PurchLine."Job Task No." <> '' THEN
          DocLineDim."Dimension Value" := PurchLine."Job Task No."
        ELSE
          EXIT;

      IF InCode = 'CUSTOMERINV' THEN
        IF PurchLine."Invoice to Customer" <> FALSE THEN
          DocLineDim."Dimension Value" := FORMAT(PurchLine."Invoice to Customer",0,'<Number>')
        ELSE
          EXIT;

      IF InCode = 'AMOUNTINV' THEN
        IF PurchLine."Invoicing Amount" <> 0 THEN
          DocLineDim."Dimension Value" := FORMAT(PurchLine."Invoicing Amount",0,9)
        ELSE
          EXIT;

      IF InCode = 'INVDATE' THEN
        IF PurchLine."Start Date for Invoicing" <> 0D THEN
          DocLineDim."Dimension Value" := ExFWorkFlowMgt.TransformDateToText(PurchLine."Start Date for Invoicing")
        ELSE
          EXIT;

      IF InCode = 'VATPRODPOSTGRP' THEN
        IF PurchLine."VAT Prod. Posting Group" <> '' THEN
          DocLineDim."Dimension Value" := PurchLine."VAT Prod. Posting Group"
        ELSE
          EXIT;
      //>> 4PS
      IF InCode = 'EXTCONTR_4PS' THEN // ŽTA No.
        IF PurchLine."Extension Contract" <> '' THEN
          DocLineDim."Dimension Value" := PurchLine."Extension Contract"
        ELSE
          EXIT;
      IF InCode = 'ELEMENT_4PS' THEN
        IF PurchLine.Element <> '' THEN
          DocLineDim."Dimension Value" := PurchLine.Element
        ELSE
          EXIT;
      IF InCode = 'PLOT_4PS' THEN
        IF PurchLine."Plot No." <> '' THEN
          DocLineDim."Dimension Value" := PurchLine."Plot No."
        ELSE
          EXIT;
      IF InCode = 'SERVICEORDERNO' THEN //
        IF  PurchLine."Service Order No." <> '' THEN
          DocLineDim."Dimension Value" := PurchLine."Service Order No."
        ELSE
          EXIT;
      //<< 4PS

      IF Column."Purchase Line Field ID" <> 0 THEN BEGIN
        RecRef.GETTABLE(PurchLine);
        FldRef := RecRef.FIELD(Column."Purchase Line Field ID");
        DocLineDim."Dimension Value" := FORMAT(FldRef.VALUE);
        IF DocLineDim."Dimension Value" <> '' THEN
          DocLineDim."Dimension Code" := Column.Code;
      END;

      IF DocLineDim."Dimension Value" <> '' THEN BEGIN
        DocLineDim2.RESET;
        DocLineDim2.SETCURRENTKEY("Document No.");
        DocLineDim2.SETRANGE("Document Type", DocLineDim."Document Type");
        DocLineDim2.SETRANGE("Document No.", DocLineDim."Document No.");
        DocLineDim2.SETRANGE("Line No.", DocLineDim."Line No.");
        DocLineDim2.SETRANGE("Dimension Code", DocLineDim."Dimension Code");
        IF DocLineDim2.ISEMPTY THEN BEGIN
          DocLine.RetrieveRecord(DocLine, PurchLine."Document Type", PurchLine."Document No.", PurchLine."Line No.");
          DocLineDim."Document Line ID" := DocLine.ID;
          DocLineDim."Document ID" := DocLine."Document ID";
          DocLineDim.INSERT;
        END;
      END;
    END;

    PROCEDURE RuleLines@1100285010(Rule@1100285000 : Record 12013660);
    VAR
      NextNumber@1100285001 : Integer;
      Column@1100285003 : Record 12013661;
      CodingLines@1100285002 : Record 12013663;
    BEGIN
      NextNumber := 10000;

      Column.RESET;
      IF Column.FINDSET THEN
        REPEAT
          CodingLines.INIT;
          CodingLines.ID := Rule.ID;
          CodingLines."Line No." := NextNumber;
          NextNumber := NextNumber + 10000;
          CodingLines."Column Code" := Column.Code;
          CodingLines."Column ID" := Column.ID;
          CodingLines."Column Source":= Column.Source;
          CodingLines.INSERT(FALSE);
        UNTIL Column.NEXT = 0;
    END;

    PROCEDURE AmountToDocHead@1100285016(PurchLine@1100285000 : Record 39;Del@1100285002 : Boolean;VAR PurchHeader@1100285005 : Record 38);
    VAR
      DocHead@1100285001 : Record 12013608;
      PurchLine2@1100285009 : Record 39;
      ExFlowSEMgt@1100285004 : Codeunit 12013598;
    BEGIN
      // Update DocHead Net and VAT
      IF (PurchLine."Document Type" = PurchLine."Document Type"::Invoice) OR
         (PurchLine."Document Type" = PurchLine."Document Type"::"Credit Memo") THEN
        EXIT;

      IF NOT DocHead.RetrieveRecord(DocHead, PurchLine."Document Type",PurchLine."Document No.") THEN
        EXIT;

      DocHead."Net Amount" := 0;
      DocHead."VAT Amount" := 0;
      DocHead."Gross Amount" := 0;

      PurchLine2.RESET;
      PurchLine2.SETRANGE("Document Type",PurchLine."Document Type");
      PurchLine2.SETRANGE("Document No.",PurchLine."Document No.");
      IF PurchLine2.FINDSET THEN
        REPEAT
          IF PurchLine2."Line No." = PurchLine."Line No." THEN BEGIN
            IF NOT Del THEN BEGIN
              IF PurchLine."VAT Calculation Type" <> PurchLine."VAT Calculation Type"::"Full VAT" THEN BEGIN
                DocHead."Net Amount" := DocHead."Net Amount" + PurchLine."Line Amount";
                DocHead."VAT Amount" := DocHead."VAT Amount" + PurchLine."Line Amount" * PurchLine."VAT %" / 100;
              END ELSE
                DocHead."VAT Amount" := DocHead."VAT Amount" + PurchLine."Line Amount";
            END;
          END ELSE BEGIN
            IF PurchLine2."VAT Calculation Type" <> PurchLine2."VAT Calculation Type"::"Full VAT" THEN BEGIN
              DocHead."Net Amount" := DocHead."Net Amount" + PurchLine2."Line Amount";
              DocHead."VAT Amount" := DocHead."VAT Amount" + PurchLine2."Line Amount" * PurchLine2."VAT %" / 100;
            END ELSE
              DocHead."VAT Amount" := DocHead."VAT Amount" + PurchLine2."Line Amount";
          END;
        UNTIL PurchLine2.NEXT = 0;

      PurchLine2.SETRANGE("Line No.",PurchLine."Line No.");
      IF NOT PurchLine2.FINDFIRST THEN BEGIN
        IF PurchLine2."VAT Calculation Type" <> PurchLine2."VAT Calculation Type"::"Full VAT" THEN BEGIN
          DocHead."Net Amount" := DocHead."Net Amount" + PurchLine."Line Amount";
          DocHead."VAT Amount" := DocHead."VAT Amount" + PurchLine."Line Amount" * PurchLine."VAT %" / 100;
        END ELSE
          DocHead."VAT Amount" := DocHead."VAT Amount" + PurchLine."Line Amount";
      END;

      DocHead."Gross Amount" := DocHead."Net Amount" + DocHead."VAT Amount";
      DocHead.MODIFY(TRUE);

      IF (PurchHeader.Status = PurchHeader.Status::Released) OR (PurchHeader.Status = PurchHeader.Status::"Pending Approval") THEN BEGIN
        IF (PurchHeader."Gross Invoice Amount ExFlow" <> DocHead."Gross Amount") OR (PurchHeader."Import VAT Amount" <> DocHead."VAT Amount") THEN BEGIN
          PurchHeader."Gross Invoice Amount ExFlow" := DocHead."Gross Amount";
          PurchHeader."Import VAT Amount" := DocHead."VAT Amount";
          PurchHeader.MODIFY;
        END;

        ExFlowSEMgt.UpdateSWEBASE(PurchHeader);
      END;
    END;

    PROCEDURE GetColumnID@1100285019(DimCode@1100285000 : Code[20]) : Integer;
    VAR
      Column@1100285001 : Record 12013661;
    BEGIN
      Column.RESET;
      Column.SETCURRENTKEY(Code);
      Column.SETRANGE(Code, DimCode);

      IF Column.FIND('-') THEN
        EXIT(Column.ID)
      ELSE
        EXIT;
    END;

    PROCEDURE ShortCutDim@1100285020(FieldNo@1100285000 : Integer;DimValue@1100285001 : Code[20];VAR PurchLine@1100285004 : Record 39);
    VAR
      DocLine@1100285008 : Record 12013609;
      DimCode@1100285002 : Code[20];
      Column@1100285003 : Record 12013661;
      DocLineDim@1100285005 : Record 12013611;
      GeneralLedgerSetup@1100285006 : Record 98;
      ColumnID@1100285007 : Integer;
    BEGIN
      IF PurchLine."Line No." = 0 THEN
        EXIT;

      GeneralLedgerSetup.GET;

      CASE FieldNo OF
        3 : DimCode := GeneralLedgerSetup."Shortcut Dimension 3 Code";
        4 : DimCode := GeneralLedgerSetup."Shortcut Dimension 4 Code";
        5 : DimCode := GeneralLedgerSetup."Shortcut Dimension 5 Code";
        6 : DimCode := GeneralLedgerSetup."Shortcut Dimension 6 Code";
        7 : DimCode := GeneralLedgerSetup."Shortcut Dimension 7 Code";
        8 : DimCode := GeneralLedgerSetup."Shortcut Dimension 8 Code"
        ELSE
          EXIT;
      END;

      ColumnID := GetColumnID(DimCode);
      IF ColumnID <> 0 THEN
        IF Column.GET(ColumnID) THEN BEGIN
          IF DocLineDim.RetrieveRecord(DocLineDim,PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.",DimCode) THEN BEGIN
            IF DimValue = '' THEN
              DocLineDim.DELETE(FALSE)
            ELSE BEGIN
              DocLineDim."Dimension Value" := DimValue;
              DocLineDim.MODIFY(FALSE);
            END;
          END ELSE BEGIN
            DocLine.RetrieveRecord(DocLine,PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.");

            DocLineDim.INIT;
            DocLineDim.ID := 0;
            DocLineDim."Document Type" := PurchLine."Document Type";
            DocLineDim."Document No." := PurchLine."Document No.";
            DocLineDim."Line No." := PurchLine."Line No.";
            DocLineDim."Dimension Code" := DimCode;
            DocLineDim."Dimension Value" := DimValue;
            DocLineDim."Column ID" := Column.ID;
            DocLineDim."Document Line ID" := DocLine.ID;
            DocLineDim."Document ID" := DocLine."Document ID";
            IF DimValue <> '' THEN
              DocLineDim.INSERT;
          END;
        END;

      ExFlowPropose(PurchLine,DimCode,DimValue);
    END;

    PROCEDURE AllReceived@1100285022(PurchHead@1100285000 : Record 38) : Boolean;
    VAR
      PurchLine2@1100285001 : Record 39;
      EverythingReceived@1100285002 : Boolean;
    BEGIN
      EverythingReceived := TRUE;

      PurchLine2.RESET;
      PurchLine2.SETRANGE("Document Type",PurchHead."Document Type");
      PurchLine2.SETRANGE("Document No.",PurchHead."No.");
      PurchLine2.SETFILTER(Quantity,'<>%1', 0);
      IF PurchLine2.FINDSET THEN
        REPEAT
          IF (PurchLine2.Quantity - PurchLine2."Quantity Received") <> 0 THEN
            EverythingReceived := FALSE;
        UNTIL (PurchLine2.NEXT = 0) OR (NOT EverythingReceived);

      EXIT(EverythingReceived);
    END;

    PROCEDURE OrderAllInvoiced@1100285023(PurchHead@1100285000 : Record 38) : Boolean;
    VAR
      PurchLine2@1100285001 : Record 39;
      EverythingInvoiced@1100285003 : Boolean;
    BEGIN
      EverythingInvoiced := TRUE;

      PurchLine2.RESET;
      PurchLine2.SETRANGE("Document Type",PurchHead."Document Type");
      PurchLine2.SETRANGE("Document No.",PurchHead."No.");
      PurchLine2.SETFILTER(Quantity,'<>0');
      IF PurchLine2.FINDSET THEN
        REPEAT
         IF ((PurchLine2.Quantity - PurchLine2."Quantity Invoiced") > 0) OR
            (PurchLine2."Qty. to Invoice" > 0) THEN
           EverythingInvoiced := FALSE;
        UNTIL (PurchLine2.NEXT = 0) OR (NOT EverythingInvoiced);

      EXIT(EverythingInvoiced);
    END;

    PROCEDURE LineTypeAllowed@1100285029(LineType@1100285000 : ' ,G/L Account,Item,,Fixed Asset,Charge (Item)';ShowError@1100285001 : Boolean) : Boolean;
    VAR
      Col@1100285002 : Integer;
    BEGIN
      CASE LineType OF
        LineType::"G/L Account":
          Col := GetColumnID('G_LACCOUNT');

        LineType::Item:
          Col := GetColumnID('ITEM');

        LineType::"Fixed Asset":
          Col := GetColumnID('FIXEDASSET');

        LineType::"Charge (Item)":
          Col := GetColumnID('CHARGE');
      END;

      IF Col = 0 THEN BEGIN
        IF ShowError THEN
          MESSAGE(EXF43);

        EXIT(FALSE);
      END ELSE
        EXIT(TRUE);
    END;

    PROCEDURE CopyExFlowSetup@1100285030(CompName@1100285042 : Text[50];Action@1100285001 : Code[20]);
    VAR
      AppSetup@1100285021 : Record 12013601;
      AppSetupNew@1100285020 : Record 12013601;
      UserComp@1100285019 : Record 12013641;
      UserCompNew@1100285018 : Record 12013641;
      TemplateRule@1100285017 : Record 12013645;
      TemplateRuleLine@1100285016 : Record 12013603;
      TemplateRuleNew@1100285015 : Record 12013645;
      TemplateRuleLineNew@1100285014 : Record 12013603;
      CodingRule@1100285013 : Record 12013660;
      CodingRuleLine@1100285012 : Record 12013663;
      CodingRuleNew@1100285011 : Record 12013660;
      CodingRuleLineNew@1100285010 : Record 12013663;
      Column@1100285009 : Record 12013661;
      ColumnNew@1100285008 : Record 12013661;
      VendorID@1100285002 : Record 12013668;
      VendorIDNew@1100285003 : Record 12013668;
      ExFStdPurchCode@1100285006 : Record 12013682;
      ExStdPurchCodeLine@1100285022 : Record 12013683;
      ExFStdPurchCodeNew@1100285027 : Record 12013682;
      ExStdPurchCodeLineNew@1100285026 : Record 12013683;
      ExUserGroup@1100285028 : Record 12013606;
      ExUserGroupNew@1100285029 : Record 12013606;
      ExUserGroupLine@1100285030 : Record 12013607;
      ExUserGroupLineNew@1100285031 : Record 12013607;
      ExAdvVend@1100285068 : Record 12013595;
      ExAdvVendNew@1100285067 : Record 12013595;
      ExLineAdv@1100285066 : Record 12013596;
      ExLineAdvNew@1100285065 : Record 12013596;
      ExHeaderMap@1100285064 : Record 12013617;
      ExHeaderMapNew@1100285063 : Record 12013617;
      ExEmailHead@1100285062 : Record 12013619;
      ExEmailHeadNew@1100285061 : Record 12013619;
      ExDimGLMap@1100285060 : Record 12013646;
      ExDimGLMapNew@1100285059 : Record 12013646;
      ExReqRule@1100285058 : Record 12013621;
      ExReqRuleNew@1100285057 : Record 12013621;
      ExInvCode@1100285056 : Record 12013597;
      ExInvCodeNew@1100285055 : Record 12013597;
      ExWebCode@1100285054 : Record 12013600;
      ExWebCodeNew@1100285053 : Record 12013600;
      ExLoc@1100285052 : Record 12013613;
      ExLocNew@1100285051 : Record 12013613;
      Location@1100285046 : Record 14;
      OCRFormat@1100285043 : Record 12013614;
      OCRFormatNew@1100285025 : Record 12013614;
      OCRUnit@1100285024 : Record 12013672;
      OCRUnitNew@1100285023 : Record 12013672;
      ExContract@1100285007 : Record 12013633;
      ExContractNew@1100285000 : Record 12013633;
      Vendor@1100285069 : Record 23;
      VendorIDMgt@1100285005 : Codeunit 12013667;
      TempCodingRuleID@1100285070 : Integer;
      NextID@1100285071 : Integer;
      DimOwner@1100285072 : Record 12013655;
      DimOwnerNew@1100285073 : Record 12013655;
    BEGIN
      CASE Action OF
        'COLUMNS' :
          BEGIN
            NextID := 1;

            Column.RESET;
            Column.CHANGECOMPANY(CompName);
            IF Column.FINDSET THEN
              REPEAT
                ColumnNew.INIT;
                ColumnNew.TRANSFERFIELDS(Column);
                ColumnNew.ID := NextID;
                ColumnNew.INSERT;
                NextID := NextID + 1;
              UNTIL Column.NEXT = 0;
          END;

        'SETUP':
          BEGIN
            AppSetup.CHANGECOMPANY(CompName);
            AppSetup.GET;
            AppSetup.CALCFIELDS("RO XSLT");

            IF AppSetupNew.GET THEN BEGIN
              AppSetupNew.TRANSFERFIELDS(AppSetup, FALSE);
              AppSetupNew.MODIFY;
            END ELSE BEGIN
              AppSetupNew.INIT;
              AppSetupNew.TRANSFERFIELDS(AppSetup);
              AppSetupNew.INSERT;
            END;
          END;

        'CODING':
          BEGIN
            //Temp fix to avoid copy problem
            IF CodingRule.ISEMPTY THEN BEGIN
              CodingRule.RESET;
              CodingRule.CHANGECOMPANY(CompName);
              IF CodingRule.FINDSET THEN
                REPEAT
                  IF CodingRuleNew.GET(CodingRule.ID) THEN BEGIN
                    CodingRuleNew.TRANSFERFIELDS(CodingRule);
                    CodingRuleNew.Expression := '';
                    CodingRuleNew.MODIFY(TRUE);
                  END ELSE BEGIN
                    CodingRuleNew.INIT;
                    CodingRuleNew.TRANSFERFIELDS(CodingRule);
                    CodingRuleNew.Expression := '';
                    CodingRuleNew.INSERT(TRUE);
                  END;

                  CodingRuleLineNew.RESET;
                  CodingRuleLineNew.SETRANGE(ID, CodingRuleNew.ID);
                  IF CodingRuleLineNew.FINDSET THEN
                    REPEAT
                      CodingRuleLine.RESET;
                      CodingRuleLine.CHANGECOMPANY(CompName);
                      CodingRuleLine.SETRANGE(ID, CodingRule.ID);
                      CodingRuleLine.SETRANGE("Column Code", CodingRuleLineNew."Column Code");
                      IF CodingRuleLine.FINDFIRST THEN BEGIN
                        CodingRuleLineNew.All := CodingRuleLine.All;
                        CodingRuleLineNew.Empty := CodingRuleLine.Empty;
                        CodingRuleLineNew."Text Range" := CodingRuleLine."Text Range";
                      END ELSE BEGIN
                        CodingRuleLineNew.All := TRUE;
                        IF NOT CodingRuleNew."Is Subset" THEN
                          CodingRuleLineNew.Empty := TRUE;
                      END;

                      CodingRuleLineNew.MODIFY(TRUE);
                      CodingRuleLineNew.UpdateExpression;
                    UNTIL CodingRuleLineNew.NEXT = 0;
                UNTIL CodingRule.NEXT = 0;
            END;
          END;

        'USER':
          BEGIN
            UserComp.RESET;
            UserComp.CHANGECOMPANY(CompName);
            IF UserComp.FINDSET THEN
              REPEAT
                IF UserComp."Coding Rule ID" <> 0 THEN BEGIN
                  CodingRule.RESET;
                  CodingRule.CHANGECOMPANY(CompName);
                  CodingRule.SETRANGE(ID, UserComp."Coding Rule ID");
                  CodingRule.SETRANGE("Is Subset", TRUE);
                  IF NOT CodingRule.FINDFIRST THEN
                    ERROR(STRSUBSTNO(EXF71,UserComp."User ID"));
                END;

                IF UserCompNew.GET(UserComp."User ID") THEN BEGIN
                  TempCodingRuleID := UserCompNew."Coding Rule ID";
                  UserCompNew.TRANSFERFIELDS(UserComp, FALSE);
                  UserCompNew."Coding Rule ID" := TempCodingRuleID;
                  UserCompNew.MODIFY(TRUE);
                END ELSE BEGIN
                  UserCompNew.INIT;
                  UserCompNew.TRANSFERFIELDS(UserComp);

                  CodingRuleNew.RESET;
                  CodingRuleNew.SETRANGE("Is Subset", TRUE);
                  CodingRuleNew.SETRANGE(Name, CodingRule.Name);
                  IF CodingRuleNew.FINDFIRST THEN
                    UserCompNew."Coding Rule ID" := CodingRuleNew.ID
                  ELSE
                    UserCompNew."Coding Rule ID" := 0;

                  UserCompNew.INSERT(TRUE);
                END;
              UNTIL UserComp.NEXT = 0;
          END;

        'USERGROUP':
          BEGIN
            ExUserGroup.RESET;
            ExUserGroup.CHANGECOMPANY(CompName);
            IF ExUserGroup.FINDSET THEN
              REPEAT
                IF ExUserGroupNew.GET(ExUserGroup.Code) THEN BEGIN
                  ExUserGroupNew.TRANSFERFIELDS(ExUserGroup, FALSE);
                  ExUserGroupNew.MODIFY(TRUE);
                END ELSE BEGIN
                  ExUserGroupNew.INIT;
                  ExUserGroupNew.TRANSFERFIELDS(ExUserGroup);
                  ExUserGroupNew.INSERT(TRUE);
                END;

                ExUserGroupLine.RESET;
                ExUserGroupLine.CHANGECOMPANY(CompName);
                ExUserGroupLine.SETRANGE(Code, ExUserGroup.Code);
                IF ExUserGroupLine.FINDSET THEN
                  REPEAT
                    IF ExUserGroupLineNew.GET(ExUserGroupNew.Code,ExUserGroupLine."Line No.") THEN BEGIN
                      ExUserGroupLineNew.TRANSFERFIELDS(ExUserGroupLine, FALSE);
                      ExUserGroupLineNew.MODIFY(TRUE);
                    END ELSE BEGIN
                      ExUserGroupLineNew.INIT;
                      ExUserGroupLineNew.TRANSFERFIELDS(ExUserGroupLine);
                      ExUserGroupLineNew.INSERT(TRUE);
                    END;
                  UNTIL ExUserGroupLine.NEXT = 0;
              UNTIL ExUserGroup.NEXT = 0;
          END;
        'TEMPLATES':
          BEGIN
            TemplateRule.RESET;
            TemplateRule.CHANGECOMPANY(CompName);
            IF TemplateRule.FINDSET THEN
              REPEAT
                IF TemplateRuleNew.GET(TemplateRule.Code) THEN BEGIN
                  TemplateRuleNew.TRANSFERFIELDS(TemplateRule, FALSE);
                  TemplateRuleNew.MODIFY(TRUE);
                END ELSE BEGIN
                  TemplateRuleNew.COPY(TemplateRule);
                  TemplateRuleNew.INSERT(TRUE);
                END;

                TemplateRuleLine.RESET;
                TemplateRuleLine.CHANGECOMPANY(CompName);
                TemplateRuleLine.SETRANGE(Code, TemplateRule.Code);
                IF TemplateRuleLine.FINDSET THEN
                  REPEAT
                    IF TemplateRuleLineNew.GET(TemplateRule.Code, TemplateRuleLine."Line No.") THEN BEGIN
                      TemplateRuleLineNew.TRANSFERFIELDS(TemplateRuleLine, FALSE);
                      TemplateRuleLineNew.MODIFY(TRUE);
                    END ELSE BEGIN
                      TemplateRuleLineNew.INIT;
                      TemplateRuleLineNew.TRANSFERFIELDS(TemplateRuleLine);
                      TemplateRuleLineNew.INSERT(TRUE);
                    END;
                  UNTIL TemplateRuleLine.NEXT = 0;
              UNTIL TemplateRule.NEXT = 0;
          END;
        'VENDORID':
          BEGIN
            VendorID.RESET;
            VendorID.CHANGECOMPANY(CompName);
            IF VendorID.FINDSET THEN BEGIN
              REPEAT
                IF NOT VendorIDNew.GET(VendorID."Table No.",VendorID."Field No.") THEN BEGIN
                  VendorIDNew.INIT;
                  VendorIDNew.TRANSFERFIELDS(VendorID);
                  VendorIDNew.INSERT;
                END;
              UNTIL VendorID.NEXT = 0;

              VendorIDMgt.UpdateAllFieldIDs(TRUE);
            END;
          END;
        'EXFSTDPURCHCODE':
          BEGIN
            ExFStdPurchCode.RESET;
            ExFStdPurchCode.CHANGECOMPANY(CompName);
            IF ExFStdPurchCode.FINDSET THEN BEGIN
              REPEAT
                IF NOT ExFStdPurchCodeNew.GET(ExFStdPurchCode.Code) THEN BEGIN
                  ExFStdPurchCodeNew.INIT;
                  ExFStdPurchCodeNew.TRANSFERFIELDS(ExFStdPurchCode);
                  ExFStdPurchCodeNew.INSERT;
                END;
              UNTIL ExFStdPurchCode.NEXT = 0;

              ExStdPurchCodeLine.RESET;
              ExStdPurchCodeLine.CHANGECOMPANY(CompName);
              IF ExStdPurchCodeLine.FINDSET THEN
                REPEAT
                  IF NOT ExStdPurchCodeLineNew.GET(ExStdPurchCodeLine."EX Standard Purchase Code",ExStdPurchCodeLine."Line No.") THEN BEGIN
                    ExStdPurchCodeLineNew.INIT;
                    ExStdPurchCodeLineNew.TRANSFERFIELDS(ExStdPurchCodeLine);
                    ExStdPurchCodeLineNew.INSERT;
                  END;
                UNTIL ExStdPurchCodeLine.NEXT = 0;
            END;
          END;
        'ADVVEND':
          BEGIN
            ExAdvVend.RESET;
            ExAdvVend.CHANGECOMPANY(CompName);
            IF ExAdvVend.FINDSET THEN BEGIN
              REPEAT
                IF Vendor.GET(ExAdvVend."Vendor No.") THEN BEGIN
                  IF NOT ExAdvVendNew.GET(ExAdvVend."Vendor No.") THEN BEGIN
                    ExAdvVendNew.INIT;
                    ExAdvVendNew.TRANSFERFIELDS(ExAdvVend);
                    ExAdvVendNew.INSERT;
                  END ELSE BEGIN
                    ExAdvVendNew.TRANSFERFIELDS(ExAdvVend,FALSE);
                    ExAdvVendNew.MODIFY;
                  END;
                END;
              UNTIL ExAdvVend.NEXT = 0;
            END;
          END;
        'LINEADV':
          BEGIN
            ExLineAdv.RESET;
            ExLineAdv.CHANGECOMPANY(CompName);
            IF ExLineAdv.FINDSET THEN BEGIN
              REPEAT
                IF NOT ExLineAdvNew.GET(ExLineAdv.Type,ExLineAdv."No.") THEN BEGIN
                  ExLineAdvNew.INIT;
                  ExLineAdvNew.TRANSFERFIELDS(ExLineAdv);
                  ExLineAdvNew.INSERT;
                END ELSE BEGIN
                  ExLineAdvNew.TRANSFERFIELDS(ExLineAdv,FALSE);
                  ExLineAdvNew.MODIFY;
                END;
              UNTIL ExLineAdv.NEXT = 0;
            END;
          END;
        'HEADERMAP':
          BEGIN
            ExHeaderMap.RESET;
            ExHeaderMap.CHANGECOMPANY(CompName);
            IF ExHeaderMap.FINDSET THEN BEGIN
              REPEAT
                IF NOT ExHeaderMapNew.GET(ExHeaderMap."Field No.") THEN BEGIN
                  ExHeaderMapNew.INIT;
                  ExHeaderMapNew.TRANSFERFIELDS(ExHeaderMap);
                  ExHeaderMapNew.INSERT;
                END ELSE BEGIN
                  ExHeaderMapNew.TRANSFERFIELDS(ExHeaderMap,FALSE);
                  ExHeaderMapNew.MODIFY;
                END;
              UNTIL ExHeaderMap.NEXT = 0;
            END;
          END;
        'EMAILHEAD':
          BEGIN
            ExEmailHead.RESET;
            ExEmailHead.CHANGECOMPANY(CompName);
            IF ExEmailHead.FINDSET THEN BEGIN
              REPEAT
                ExEmailHead.CALCFIELDS("HTML Template File");
                IF NOT ExEmailHeadNew.GET(ExEmailHead.Type) THEN BEGIN
                  ExEmailHeadNew.INIT;
                  ExEmailHeadNew.TRANSFERFIELDS(ExEmailHead);
                  ExEmailHeadNew.INSERT;
                END ELSE BEGIN
                  ExEmailHeadNew.TRANSFERFIELDS(ExEmailHead,FALSE);
                  ExEmailHeadNew.MODIFY;
                END;
              UNTIL ExEmailHead.NEXT = 0;
            END;
          END;
        'DIMGLMAP':
          BEGIN
            ExDimGLMap.RESET;
            ExDimGLMap.CHANGECOMPANY(CompName);
            IF ExDimGLMap.FINDSET THEN BEGIN
              REPEAT
                IF NOT ExDimGLMapNew.GET(ExDimGLMap."Dimension Code",ExDimGLMap."Dimension Value Code") THEN BEGIN
                  ExDimGLMapNew.INIT;
                  ExDimGLMapNew.TRANSFERFIELDS(ExDimGLMap);
                  ExDimGLMapNew.INSERT;
                END ELSE BEGIN
                  ExDimGLMapNew.TRANSFERFIELDS(ExDimGLMap,FALSE);
                  ExDimGLMapNew.MODIFY;
                END;
              UNTIL ExDimGLMap.NEXT = 0;
            END;
          END;
        'REQRULE':
          BEGIN
            ExReqRule.RESET;
            ExReqRule.CHANGECOMPANY(CompName);
            IF ExReqRule.FINDSET THEN
              REPEAT
                IF ExReqRuleNew.GET(ExReqRule.Code) THEN BEGIN
                  ExReqRuleNew.TRANSFERFIELDS(ExReqRule, FALSE);
                  ExReqRuleNew.MODIFY(TRUE);
                END ELSE BEGIN
                  ExReqRuleNew.INIT;
                  ExReqRuleNew.TRANSFERFIELDS(ExReqRule);
                  ExReqRuleNew.INSERT(TRUE);
                END;
              UNTIL ExReqRule.NEXT = 0;
          END;
        'INVCODE':
          BEGIN
            ExInvCode.RESET;
            ExInvCode.CHANGECOMPANY(CompName);
            IF ExInvCode.FINDSET THEN
              REPEAT
                ExInvCodeNew.RESET;
                ExInvCodeNew.SETRANGE("Invoicing Code",ExInvCode."Invoicing Code");
                IF ExInvCodeNew.FINDFIRST THEN BEGIN
                  ExInvCodeNew.TRANSFERFIELDS(ExInvCode, FALSE);
                  ExInvCodeNew.MODIFY(TRUE);
                END ELSE BEGIN
                  ExInvCodeNew.INIT;
                  ExInvCodeNew.TRANSFERFIELDS(ExInvCode);
                  ExInvCodeNew.INSERT(TRUE);
                END;
              UNTIL ExInvCode.NEXT = 0;
          END;
        'EXWEBCODE':
          BEGIN
            ExWebCode.RESET;
            ExWebCode.CHANGECOMPANY(CompName);
            IF ExWebCode.FINDSET THEN
              REPEAT
                ExWebCodeNew.RESET;
                ExWebCodeNew.SETRANGE("Field No",ExWebCode."Field No");
                IF ExWebCodeNew.FINDFIRST THEN BEGIN
                  ExWebCodeNew.TRANSFERFIELDS(ExWebCode, FALSE);
                  ExWebCodeNew.MODIFY(TRUE);
                END ELSE BEGIN
                  ExWebCodeNew.INIT;
                  ExWebCodeNew.TRANSFERFIELDS(ExWebCode);
                  ExWebCodeNew.INSERT(TRUE);
                END;
              UNTIL ExWebCode.NEXT = 0;
          END;
        'EXLOC':
          BEGIN
            ExLoc.RESET;
            ExLoc.CHANGECOMPANY(CompName);
            IF ExLoc.FINDSET THEN
              REPEAT
                ExLocNew.RESET;
                ExLocNew.SETRANGE(Code,ExLoc.Code);
                IF ExLocNew.FINDFIRST THEN BEGIN
                  ExLocNew.TRANSFERFIELDS(ExLoc, FALSE);
                  ExLocNew.MODIFY(TRUE);
                END ELSE BEGIN
                  ExLocNew.COPY(ExLoc);
                  ExLocNew.ID := 0;
                  ExLocNew.INSERT(TRUE);
                END;
              UNTIL ExLoc.NEXT = 0;
          END;
        'OCRFORMAT':
          BEGIN
            OCRFormat.RESET;
            OCRFormat.CHANGECOMPANY(CompName);
            IF OCRFormat.FINDSET THEN
              REPEAT
                IF OCRFormatNew.GET(OCRFormat."Entry No.") THEN BEGIN
                  OCRFormatNew.TRANSFERFIELDS(OCRFormat, FALSE);
                  OCRFormatNew.MODIFY(TRUE);
                END ELSE BEGIN
                  OCRFormatNew.INIT;
                  OCRFormatNew.TRANSFERFIELDS(OCRFormat);
                  OCRFormatNew.INSERT(TRUE);
                END;
              UNTIL OCRFormat.NEXT = 0;
          END;
        'OCRUNIT':
          BEGIN
            OCRUnit.RESET;
            OCRUnit.CHANGECOMPANY(CompName);
            IF OCRUnit.FINDSET THEN BEGIN
              REPEAT
                IF OCRUnit."Vendor No." = '' THEN BEGIN
                  IF NOT OCRUnitNew.GET(OCRUnit."Vendor No.",OCRUnit."Invoice Unit") THEN BEGIN
                    OCRUnitNew.INIT;
                    OCRUnitNew.TRANSFERFIELDS(OCRUnit);
                    OCRUnitNew.INSERT;
                  END ELSE BEGIN
                    OCRUnitNew.TRANSFERFIELDS(OCRUnit,FALSE);
                    OCRUnitNew.MODIFY;
                  END;
                END ELSE BEGIN
                  IF Vendor.GET(OCRUnit."Vendor No.") THEN BEGIN
                    IF NOT OCRUnitNew.GET(OCRUnit."Vendor No.",OCRUnit."Invoice Unit") THEN BEGIN
                      OCRUnitNew.INIT;
                      OCRUnitNew.TRANSFERFIELDS(OCRUnit);
                      OCRUnitNew.INSERT;
                    END ELSE BEGIN
                      OCRUnitNew.TRANSFERFIELDS(OCRUnit,FALSE);
                      OCRUnitNew.MODIFY;
                    END;
                  END;
                END;
              UNTIL OCRUnit.NEXT = 0;
            END;
          END;

        'EXCONTRACT':
          BEGIN
            ExContract.RESET;
            ExContract.CHANGECOMPANY(CompName);
            IF ExContract.FINDSET THEN BEGIN
              REPEAT
                IF NOT ExContractNew.GET(ExContract."Contract No.") THEN BEGIN
                  ExContractNew.INIT;
                  ExContractNew.TRANSFERFIELDS(ExContract);
                  ExContractNew.INSERT;
                END ELSE BEGIN
                  ExContractNew.TRANSFERFIELDS(ExContract,FALSE);
                  ExContractNew.MODIFY;
                END;
              UNTIL ExContract.NEXT = 0;
            END;
          END;

          'DIMOWNER':
          BEGIN
            DimOwner.RESET;
            DimOwner.CHANGECOMPANY(CompName);
            IF DimOwner.FINDSET THEN BEGIN
              REPEAT
                IF NOT DimOwnerNew.GET(DimOwner."Dimension Code",DimOwner."Dimension Value Code",DimOwner."Approver Type") THEN BEGIN
                  DimOwnerNew.INIT;
                  DimOwnerNew.TRANSFERFIELDS(DimOwner);
                  DimOwnerNew.INSERT;
                END ELSE BEGIN
                  DimOwnerNew.TRANSFERFIELDS(DimOwner,FALSE);
                  DimOwnerNew.MODIFY;
                END;
              UNTIL DimOwner.NEXT = 0;
            END;
          END;
      END;
    END;

    PROCEDURE MakeTotals@1100285033(PurchLine@1100285000 : Record 39;VAR TotPurchAmt@1100285002 : Decimal);
    VAR
      PurchLine2@1100285001 : Record 39;
    BEGIN
      TotPurchAmt := 0;

      PurchLine2.RESET;
      PurchLine2.SETRANGE("Document Type",PurchLine."Document Type");
      PurchLine2.SETRANGE("Document No.",PurchLine."Document No.");
      IF PurchLine2.FINDSET THEN
        REPEAT
          IF PurchLine2."Line No." <> PurchLine."Line No." THEN
            TotPurchAmt += PurchLine2."Line Amount";
        UNTIL PurchLine2.NEXT = 0;

      TotPurchAmt += PurchLine."Line Amount";
    END;

    PROCEDURE MakeTotalsExDoc@1100285027(DocLine@1100285000 : Record 12013609;VAR TotPurchAmt@1100285002 : Decimal);
    VAR
      DocLine2@1100285001 : Record 12013609;
    BEGIN
      TotPurchAmt := 0;

      DocLine2.RESET;
      DocLine2.SETCURRENTKEY("Document ID");
      DocLine2.SETRANGE("Document ID", DocLine."Document ID");
      IF DocLine2.FINDSET THEN
        REPEAT
          IF DocLine2.ID <> DocLine.ID THEN
            TotPurchAmt += DocLine2.Amount;
        UNTIL DocLine2.NEXT = 0;

      TotPurchAmt += DocLine.Amount;
    END;

    PROCEDURE GetPurchHeaderImageName@1100285031(DocType@1100285002 : Integer;DocNo@1100285003 : Code[20];VAR ExDoc2@1100285004 : Record 12013612) : Text[250];
    BEGIN
      ExDoc2.RESET;
      ExDoc2.SETCURRENTKEY("Document No.");
      CASE DocType OF
        0: ExDoc2.SETRANGE("Document Type", ExDoc2."Document Type"::Quote);
        1: ExDoc2.SETRANGE("Document Type", ExDoc2."Document Type"::Order);
        2: ExDoc2.SETRANGE("Document Type", ExDoc2."Document Type"::Invoice);
        3: ExDoc2.SETRANGE("Document Type", ExDoc2."Document Type"::"Credit Memo");
        4: ExDoc2.SETRANGE("Document Type", ExDoc2."Document Type"::"Blanket Order");
        5: ExDoc2.SETRANGE("Document Type", ExDoc2."Document Type"::"Return Order");
        7: ExDoc2.SETRANGE("Document Type", ExDoc2."Document Type"::"Posted Invoice"); // Copy Doc Function
        9: ExDoc2.SETRANGE("Document Type", ExDoc2."Document Type"::"Posted Credit Memo"); // Copy Doc Function
      END;

      ExDoc2.SETRANGE("Document No.", DocNo);
      IF ExDoc2.FINDFIRST THEN
        EXIT(ExDoc2."Image Name")
      ELSE
        EXIT('');
    END;

    PROCEDURE GetPostedImageName@1100285040(DocType@1100285002 : Integer;DocNo@1100285000 : Code[20];VAR ExDoc2@1100285001 : Record 12013612) : Text[250];
    VAR
      ExFlowSeFunc@1100285004 : Codeunit 12013598;
    BEGIN
      ExDoc2.RESET;
      ExDoc2.SETCURRENTKEY("Document No.");
      CASE DocType OF
        2: ExDoc2.SETRANGE("Document Type", ExDoc2."Document Type"::"Posted Invoice");
        3: ExDoc2.SETRANGE("Document Type", ExDoc2."Document Type"::"Posted Credit Memo");
      END;
      ExDoc2.SETRANGE("Document No.", DocNo);
      IF ExDoc2.FINDFIRST THEN
        EXIT(ExDoc2."Image Name")
      ELSE
        EXIT(ExFlowSeFunc.GetInwardImageName(DocType,DocNo,ExDoc2));
    END;

    PROCEDURE ShowAttachmentPostedDoc@1100285037(DocType@1100285002 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';DocNo@1100285001 : Code[20]) : Boolean;
    VAR
      ExAttachment@1100285000 : Record 12013643;
      ShowAttachedFiles@1100285003 : Page 12013644;
    BEGIN
      ExAttachment.RESET;
      ExAttachment.SETCURRENTKEY("Document No.");

      ExAttachment.FILTERGROUP := 2;

      CASE DocType OF
        DocType::Invoice:
          ExAttachment.SETRANGE("Document Type", ExAttachment."Document Type"::"Posted Invoice");
        DocType::"Credit Memo":
          ExAttachment.SETRANGE("Document Type", ExAttachment."Document Type"::"Posted Credit Memo");
        ELSE
          EXIT(FALSE);
      END;
      ExAttachment.SETRANGE("Document No.", DocNo);

      ExAttachment.FILTERGROUP := 0;

      CLEAR(ShowAttachedFiles);
      ShowAttachedFiles.EDITABLE := FALSE;
      ShowAttachedFiles.SETTABLEVIEW(ExAttachment);
      ShowAttachedFiles.RUNMODAL;
    END;

    PROCEDURE ShowAttachmentDoc@1100285034(DocType@1100285002 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';DocNo@1100285001 : Code[20]) : Boolean;
    VAR
      ExAttachment@1100285000 : Record 12013643;
    BEGIN
      ExAttachment.RESET;
      ExAttachment.SETCURRENTKEY("Document No.");

      ExAttachment.FILTERGROUP := 2;

      ExAttachment.SETRANGE("Document Type", DocType);
      ExAttachment.SETRANGE("Document No.", DocNo);

      ExAttachment.FILTERGROUP := 0;

      PAGE.RUNMODAL(12013644,ExAttachment);
    END;

    PROCEDURE ChangeImageDoc@1100285036(VAR ExDocument@1100285000 : Record 12013608);
    VAR
      ExDocHead2@1100285001 : Record 12013612;
      PurchHeader@1100285008 : Record 38;
      ExFlowBlob@1100285005 : Record 12013591;
      ExFPurchaseHeader@1100285009 : Record 12013587;
      ExFlowWorkFlowMgt@1100285007 : Codeunit 12013593;
      NewImageName@1100285002 : Text[250];
      RetBlobNo@1100285006 : Integer;
      TempBlob@1100285003 : Record 99008535;
    BEGIN
      WITH ExDocument DO BEGIN
        NewImageName := '';
        ExFlowBlob.ImportBLOB(NewImageName,RetBlobNo,NewImageName);

        IF NewImageName = '' THEN
          EXIT;

        PurchHeader."Pay-to Vendor No." := "Vendor No.";
        PurchHeader."No." := "Document No.";
        ExFPurchaseHeader."Image File Name" := NewImageName;
        CLEAR(TempBlob);
        ExFlowWorkFlowMgt.SaveImageToFileSys(RetBlobNo,PurchHeader,ExFPurchaseHeader,NewImageName,TempBlob);

        "Image Name" := NewImageName;
        MODIFY;

        ExDocHead2.RESET;
        ExDocHead2.SETCURRENTKEY("Document No.");
        ExDocHead2.SETRANGE("Document Type");
        ExDocHead2.SETRANGE("Document No.");
        ExDocHead2.FIND('-');
        ExDocHead2."Image Name" := NewImageName;
        ExDocHead2."Image Blob" := TempBlob.Blob;
        ExDocHead2.MODIFY;
      END;
    END;

    PROCEDURE ExFlowPropose@1100285045(VAR PurchLine@1100285009 : Record 39;CurrentDocDimCode@1100285002 : Code[20];CurrentDocDimValue@1100285004 : Code[20]);
    VAR
      AppSetup@1100285000 : Record 12013601;
      DocLine@1100285005 : Record 12013609;
    BEGIN
      IF NOT AppSetup.GET THEN
        EXIT;

      IF DocLine.RetrieveRecord(DocLine,PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.") THEN
        CreateApproversFromPurch(DocLine,PurchLine,PurchLine."Template Rule",FALSE,CurrentDocDimCode,CurrentDocDimValue,FALSE);
    END;

    PROCEDURE ExFlowUpdateDim@1100285049(Action@1100285000 : Integer;VAR PurchLine@1100285007 : Record 39;DimCode@1100285001 : Code[20];DimValue@1100285011 : Code[20];SilentMode@1100285012 : Boolean);
    VAR
      DocLineDim@1100285002 : Record 12013611;
      Column@1100285003 : Record 12013661;
      DocLine@1100285004 : Record 12013609;
      ColumnID@1100285006 : Integer;
    BEGIN
      IF NOT DocLine.RetrieveRecord(DocLine,PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.") THEN
        EXIT;

      ExFlowSetup.GET;

      TestifApprovedDim(PurchLine,DocLine,ExFlowSetup,SilentMode);

      CASE Action OF
        1      :
          BEGIN
            IF DocLineDim.RetrieveRecord(DocLineDim,PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.",DimCode) THEN
              DocLineDim.DELETE(FALSE);

            ColumnID := GetColumnID(DimCode);

            IF ColumnID <> 0 THEN
              IF Column.GET(ColumnID) THEN BEGIN
                DocLineDim.INIT;
                DocLineDim.ID := 0;
                DocLineDim."Document Type" := PurchLine."Document Type";
                DocLineDim."Document No." := PurchLine."Document No.";
                DocLineDim."Line No." := PurchLine."Line No.";
                DocLineDim."Dimension Code" := DimCode;
                DocLineDim."Dimension Value" := DimValue;
                DocLineDim."Column ID" := Column.ID;
                DocLineDim."Document Line ID" := DocLine.ID;
                DocLineDim."Document ID" := DocLine."Document ID";
                IF DimValue <> '' THEN
                  DocLineDim.INSERT;
              END;
          END;

        2   :
          BEGIN
            IF DocLineDim.RetrieveRecord(DocLineDim,PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.",DimCode) THEN BEGIN
              DocLineDim."Dimension Value" := DimValue;
              DocLineDim.MODIFY;
            END ELSE BEGIN
              ColumnID := GetColumnID(DimCode);

              IF ColumnID <> 0 THEN
                IF Column.GET(ColumnID) THEN BEGIN
                    DocLineDim.INIT;
                    DocLineDim.ID := 0;
                    DocLineDim."Document Type" := PurchLine."Document Type";
                    DocLineDim."Document No." := PurchLine."Document No.";
                    DocLineDim."Line No." := PurchLine."Line No.";
                    DocLineDim."Dimension Code" := DimCode;
                    DocLineDim."Dimension Value" := DimValue;
                    DocLineDim."Column ID" := Column.ID;
                    DocLineDim."Document Line ID" := DocLine.ID;
                    DocLineDim."Document ID" := DocLine."Document ID";
                    IF DimValue <> '' THEN
                      DocLineDim.INSERT;
                END;
            END;
          END;

        3   :
          BEGIN
            IF DocLineDim.RetrieveRecord(DocLineDim,PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.",DimCode) THEN
              DocLineDim.DELETE;
          END;
      END;
    END;

    PROCEDURE AlreadyApprovedByActualUser@1100285042(PurchLine@1100285000 : Record 39) : Boolean;
    VAR
      DocLineApp@1100285001 : Record 12013610;
      DocLine@1100285002 : Record 12013609;
    BEGIN
      IF NOT DocLine.RetrieveRecord(DocLine,PurchLine."Document Type",
                                    PurchLine."Document No.",PurchLine."Line No.") THEN
        EXIT(FALSE);

      DocLineApp.RESET;
      DocLineApp.SETCURRENTKEY("Document Line ID");
      DocLineApp.SETRANGE("Document Line ID", DocLine.ID);
      DocLineApp.SETFILTER("Approved By",'<>%1','');
      DocLineApp.SETFILTER(Flowstatus, '<>%1', DocLineApp.Flowstatus::Rejected);
      DocLineApp.SETRANGE("Auto Approved", FALSE);
      EXIT(DocLineApp.FINDFIRST);
    END;

    PROCEDURE MatchedQtyStillMatchedInv@1100285046(RcptNo@1100285002 : Code[20];LineNo@1100285001 : Integer;DocType@1100285004 : 'Receipt,Return Shipment,Purchase Order';VAR MatchedAmt@1100285005 : Decimal;VAR MatchedAmtLCY@1100285008 : Decimal) MatchedQty : Decimal;
    VAR
      PurchLine@1100285000 : Record 39;
      PurchHeader@1100285007 : Record 38;
      CurrExchRate@1100285006 : Record 330;
      RcptFound@1100285003 : Boolean;
    BEGIN
      ExFlowSetup.GET;

      RcptFound := TRUE;
      IF DocType = DocType::"Purchase Order" THEN
        RcptFound := GetReceiptNo(RcptNo,LineNo);

      MatchedQty := 0;
      MatchedAmt := 0;

      PurchLine.RESET;
      IF RcptFound THEN BEGIN
        IF DocType IN [DocType::Receipt,DocType::"Purchase Order"] THEN BEGIN
          PurchLine.SETCURRENTKEY("Document Type","Receipt No.","Receipt Line No.");
          PurchLine.SETRANGE("Document Type", PurchLine."Document Type"::Invoice);
          PurchLine.SETRANGE("Receipt No.", RcptNo);
          PurchLine.SETRANGE("Receipt Line No.", LineNo);
        END ELSE BEGIN
          PurchLine.SETRANGE("Document Type", PurchLine."Document Type"::"Credit Memo");
          PurchLine.SETRANGE("Return Shipment No.", RcptNo);
          PurchLine.SETRANGE("Return Shipment Line No.", LineNo);
        END;
      END ELSE BEGIN // Receipt not found i.e connected to a PO
        PurchLine.SETRANGE("ExFlow Order No.", RcptNo);
        PurchLine.SETRANGE("ExFlow Order Line No.", LineNo);
      END;

      IF PurchLine.FINDSET THEN
        REPEAT
          IF PurchLine."Currency Code" <> '' THEN BEGIN
            IF (PurchHeader."Document Type" <> PurchLine."Document Type") OR (PurchHeader."No." <> PurchLine."Document No.") THEN
              PurchHeader.GET(PurchLine."Document Type",PurchLine."Document No.");

              MatchedAmtLCY := MatchedAmtLCY + CurrExchRate.ExchangeAmtFCYToLCY(0,PurchHeader."Job No.", // 4PS
              TODAY,PurchHeader."Currency Code",
              PurchLine."Line Amount",PurchHeader."Currency Factor",FALSE); // 4PS
          END ELSE
            MatchedAmtLCY := MatchedAmt + PurchLine."Line Amount";

          MatchedAmt := MatchedAmt + PurchLine."Line Amount";
          MatchedQty := MatchedQty + PurchLine.Quantity;
        UNTIL PurchLine.NEXT = 0;

      EXIT(MatchedQty);
    END;

    PROCEDURE DrillDownMatchedQtyInv@1100285044(RcptNo@1100285002 : Code[20];LineNo@1100285001 : Integer;DocType@1100285004 : 'Receipt,Return Shipment,Purchase Order');
    VAR
      PurchLine@1100285000 : Record 39;
      RcptFound@1100285003 : Boolean;
    BEGIN
      RcptFound := TRUE;
      IF DocType = DocType::"Purchase Order" THEN
        RcptFound := GetReceiptNo(RcptNo,LineNo);

      PurchLine.RESET;
      IF RcptFound THEN BEGIN
        IF DocType IN [DocType::Receipt,DocType::"Purchase Order"] THEN BEGIN
          PurchLine.SETCURRENTKEY("Document Type","Receipt No.","Receipt Line No.");
          PurchLine.SETRANGE("Document Type", PurchLine."Document Type"::Invoice);
          PurchLine.SETRANGE("Receipt No.", RcptNo);
          PurchLine.SETRANGE("Receipt Line No.", LineNo);
        END ELSE BEGIN
          PurchLine.SETRANGE("Document Type", PurchLine."Document Type"::"Credit Memo");
          PurchLine.SETRANGE("Return Shipment No.", RcptNo);
          PurchLine.SETRANGE("Return Shipment Line No.", LineNo);
        END;
      END ELSE BEGIN // Receipt not found i.e connected to a PO
        PurchLine.SETRANGE("ExFlow Order No.", RcptNo);
        PurchLine.SETRANGE("ExFlow Order Line No.", LineNo);
      END;

      PAGE.RUN(0,PurchLine);
    END;

    PROCEDURE MatchedQtyStillMatchedExWork@1100285043(RcptNo@1100285002 : Code[20];LineNo@1100285000 : Integer;DocType@1100285004 : 'Receipt,Return Shipment,Purchase Order';VAR MatchedAmt@1100285005 : Decimal;VAR MatchedAmtLCY@1100285008 : Decimal) MatchedQty : Decimal;
    VAR
      EXPurchDocLine@1100285001 : Record 12013588;
      EXPurchDocLHeader@1100285006 : Record 12013587;
      CurrExchRate@1100285007 : Record 330;
      RcptFound@1100285003 : Boolean;
    BEGIN
      ExFlowSetup.GET;

      RcptFound := TRUE;
      IF DocType = DocType::"Purchase Order" THEN
        RcptFound := GetReceiptNo(RcptNo,LineNo);

      MatchedQty := 0;
      MatchedAmt := 0;
      MatchedAmtLCY := 0;

      EXPurchDocLine.RESET;
      IF RcptFound THEN BEGIN
        IF DocType IN [DocType::Receipt,DocType::"Purchase Order"] THEN BEGIN
          EXPurchDocLine.SETCURRENTKEY("Receipt No.","Receipt Line No.");
          EXPurchDocLine.SETRANGE("Receipt No.", RcptNo);
          EXPurchDocLine.SETRANGE("Receipt Line No.", LineNo);
        END ELSE BEGIN
          EXPurchDocLine.SETRANGE("Return Shipment No.", RcptNo);
          EXPurchDocLine.SETRANGE("Return Shipment Line No.", LineNo);
        END;
      END ELSE BEGIN // Receipt not found i.e connected to a PO
        EXPurchDocLine.SETRANGE("Order No.", RcptNo);
        EXPurchDocLine.SETRANGE("Order Line No.", LineNo);
      END;

      IF EXPurchDocLine.FINDSET THEN
        REPEAT
          IF EXPurchDocLine."Currency Code" <> '' THEN BEGIN
            IF EXPurchDocLHeader."Inbound Document No." <> EXPurchDocLine."Inbound Document No." THEN
              EXPurchDocLHeader.GET(EXPurchDocLine."Inbound Document No.");

              MatchedAmtLCY := CurrExchRate.ExchangeAmtFCYToLCY(0,EXPurchDocLHeader."Job No.", // 4PS
              TODAY,EXPurchDocLHeader."Currency Code",
              EXPurchDocLine.Amount,EXPurchDocLHeader."Currency Factor",FALSE); // 4PS
          END ELSE
            MatchedAmtLCY := MatchedAmtLCY + EXPurchDocLine.Amount;

          MatchedAmt := MatchedAmt + EXPurchDocLine.Amount;
          MatchedQty := MatchedQty + EXPurchDocLine.Quantity;
        UNTIL EXPurchDocLine.NEXT = 0;

      EXIT(MatchedQty);
    END;

    PROCEDURE DrillDownMatchedQtyExWork@1100285012(RcptNo@1100285000 : Code[20];LineNo@1100285002 : Integer;DocType@1100285003 : 'Receipt,Return Shipment,Purchase Order');
    VAR
      EXPurchDocLine@1100285001 : Record 12013588;
      RcptFound@1100285004 : Boolean;
    BEGIN
      RcptFound := TRUE;
      IF DocType = DocType::"Purchase Order" THEN
        RcptFound := GetReceiptNo(RcptNo,LineNo);

      IF RcptFound THEN BEGIN
        EXPurchDocLine.RESET;
        IF DocType IN [DocType::Receipt,DocType::"Purchase Order"] THEN BEGIN
          EXPurchDocLine.SETCURRENTKEY("Receipt No.","Receipt Line No.");
          EXPurchDocLine.SETRANGE("Receipt No.", RcptNo);
          EXPurchDocLine.SETRANGE("Receipt Line No.", LineNo);
        END ELSE BEGIN
          EXPurchDocLine.SETRANGE("Return Shipment No.", RcptNo);
          EXPurchDocLine.SETRANGE("Return Shipment Line No.", LineNo);
        END;
      END ELSE BEGIN // Receipt not found i.e connected to a PO
        EXPurchDocLine.SETRANGE("Order No.", RcptNo);
        EXPurchDocLine.SETRANGE("Order Line No.", LineNo);
      END;

      PAGE.RUN(0,EXPurchDocLine);
    END;

    PROCEDURE MatchedQtyStillMatchedPostInv@1100285052(RcptNo@1100285002 : Code[20];LineNo@1100285001 : Integer;VAR MatchedAmt@1100285003 : Decimal;VAR MatchedAmtLCY@1100285004 : Decimal) MatchedQty : Decimal;
    VAR
      ExDocEntry@1100285000 : Record 12013620;
    BEGIN
      // This function requires the invoices to be posted through ExFlow since the field Order No is then updated
      MatchedQty := 0;
      MatchedAmt := 0;
      MatchedAmtLCY := 0;

      ExDocEntry.RESET;
      ExDocEntry.SETCURRENTKEY("Order No.");
      ExDocEntry.SETRANGE("Order No.", RcptNo);
      ExDocEntry.SETRANGE("Order Line No.", LineNo);
      IF ExDocEntry.FINDSET THEN
        REPEAT
          MatchedQty := MatchedQty + ExDocEntry.Quantity;
          MatchedAmt := MatchedAmt + ExDocEntry.Amount;
          MatchedAmtLCY := MatchedAmtLCY + ExDocEntry."Amount (LCY)";
        UNTIL ExDocEntry.NEXT = 0;

      EXIT(MatchedQty);
    END;

    PROCEDURE DrillDownMatchedQtyPostInv@1100285051(RcptNo@1100285002 : Code[20];LineNo@1100285001 : Integer);
    VAR
      ExFlowDocEntry@1100285000 : Record 12013620;
    BEGIN
      // This function requires the invoices to be posted through ExFlow since the field Order No is then updated
      ExFlowDocEntry.RESET;
      ExFlowDocEntry.SETCURRENTKEY("Order No.");
      ExFlowDocEntry.SETRANGE("Order No.",RcptNo);
      ExFlowDocEntry.SETRANGE("Order Line No.", LineNo);
      PAGE.RUN(0,ExFlowDocEntry);
    END;

    PROCEDURE CalcMatchedTotalsPurchLine@1100285006(PurchLine@1100285003 : Record 39;VAR TotalQtyAlreadyMatched@1100285002 : Decimal;VAR TotalAmtAlreadyMatched@1100285001 : Decimal;VAR TotalAmtAlreadyMatchedLCY@1100285004 : Decimal);
    VAR
      AmtAlreadyMatched@1100285000 : Decimal;
      AmtAlreadyMatchedLCY@1100285005 : Decimal;
    BEGIN
      TotalQtyAlreadyMatched := 0;
      TotalAmtAlreadyMatched := 0;
      TotalAmtAlreadyMatchedLCY :=0;
      AmtAlreadyMatched := 0;
      AmtAlreadyMatchedLCY := 0;
      TotalQtyAlreadyMatched += MatchedQtyStillMatchedInv(PurchLine."Document No.",PurchLine."Line No.",
                                                          2,AmtAlreadyMatched,AmtAlreadyMatchedLCY);
      TotalAmtAlreadyMatched += AmtAlreadyMatched;
      TotalAmtAlreadyMatchedLCY += AmtAlreadyMatchedLCY;
      TotalQtyAlreadyMatched += MatchedQtyStillMatchedExWork(PurchLine."Document No.",PurchLine."Line No.",
                                                             2,AmtAlreadyMatched,AmtAlreadyMatchedLCY);
      TotalAmtAlreadyMatched += AmtAlreadyMatched;
      TotalAmtAlreadyMatchedLCY += AmtAlreadyMatchedLCY;
      TotalQtyAlreadyMatched += MatchedQtyStillMatchedPostInv(PurchLine."Document No.",PurchLine."Line No.",
                                                              AmtAlreadyMatched,AmtAlreadyMatchedLCY);
      TotalAmtAlreadyMatched += AmtAlreadyMatched;
      TotalAmtAlreadyMatchedLCY += AmtAlreadyMatchedLCY;
    END;

    PROCEDURE CalcPostedMatchedPurchLine@1100285067(PurchLine@1100285003 : Record 39;VAR TotalQtyAlreadyMatched@1100285002 : Decimal;VAR TotalAmtAlreadyMatched@1100285001 : Decimal;VAR TotalAmtAlreadyMatchedLCY@1100285005 : Decimal);
    VAR
      AmtAlreadyMatched@1100285000 : Decimal;
      AmtAlreadyMatchedLCY@1100285004 : Decimal;
    BEGIN
      TotalQtyAlreadyMatched := 0;
      TotalAmtAlreadyMatched := 0;
      TotalAmtAlreadyMatchedLCY := 0;
      AmtAlreadyMatchedLCY := 0;
      AmtAlreadyMatched := 0;
      TotalQtyAlreadyMatched += MatchedQtyStillMatchedPostInv(PurchLine."Document No.",PurchLine."Line No.",
                                                              AmtAlreadyMatched,AmtAlreadyMatchedLCY);
      TotalAmtAlreadyMatched += AmtAlreadyMatched;
      TotalAmtAlreadyMatchedLCY += AmtAlreadyMatchedLCY;
    END;

    PROCEDURE GetReceiptNo@1100285047(VAR RcptNo@1100285001 : Code[20];VAR LineNo@1100285000 : Integer) : Boolean;
    VAR
      PurchRcptLine@1100285002 : Record 121;
    BEGIN
      PurchRcptLine.SETCURRENTKEY("Order No.");
      PurchRcptLine.SETRANGE("Order No.", RcptNo);
      IF LineNo <> 0 THEN
        PurchRcptLine.SETRANGE("Order Line No.", LineNo);
      PurchRcptLine.SETFILTER(Quantity, '<>%1', 0);
      IF PurchRcptLine.FINDLAST THEN BEGIN
        RcptNo := PurchRcptLine."Document No.";
        LineNo := PurchRcptLine."Line No.";
        EXIT(TRUE);
      END;
    END;

    PROCEDURE MatchedInvoiceExists@1100285048(OrderNo@1100285000 : Code[20];DocType@1100285004 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order') : Boolean;
    VAR
      PurchLine@1100285003 : Record 39;
      EXPurchDocLine@1100285002 : Record 12013588;
      ExDocEntry@1100285006 : Record 12013620;
      TempLineNo@1100285001 : Integer;
      RcptFound@1100285005 : Boolean;
      OrgOrderNo@1100285007 : Code[20];
    BEGIN
      OrgOrderNo := OrderNo;
      RcptFound := GetReceiptNo(OrderNo,TempLineNo);

      IF RcptFound THEN BEGIN
        PurchLine.RESET;
        PurchLine.SETCURRENTKEY("Document Type","Receipt No.","Receipt Line No.");
        CASE DocType OF
          DocType::Order:
            BEGIN
              PurchLine.SETRANGE("Document Type", PurchLine."Document Type"::Invoice);
              PurchLine.SETRANGE("Receipt No.", OrderNo);
            END;
          DocType::"Return Order":
            BEGIN
              PurchLine.SETRANGE("Document Type", PurchLine."Document Type"::"Credit Memo");
              PurchLine.SETRANGE("Return Shipment No.", OrderNo);
            END;
        END;

        IF PurchLine.FINDLAST THEN
          EXIT(TRUE);

        EXPurchDocLine.SETCURRENTKEY("Receipt No.","Receipt Line No.");
        EXPurchDocLine.SETRANGE("Receipt No.", OrderNo);
        IF EXPurchDocLine.FINDLAST THEN
          EXIT(TRUE);
      END ELSE BEGIN // Receipt not found i.e connected to a PO
        PurchLine.RESET;
        PurchLine.SETCURRENTKEY("ExFlow Order No.");
        CASE DocType OF
          DocType::Order:
            PurchLine.SETRANGE("Document Type", PurchLine."Document Type"::Invoice);
          DocType::"Return Order":
            PurchLine.SETRANGE("Document Type", PurchLine."Document Type"::"Credit Memo");
        END;

        PurchLine.SETRANGE("ExFlow Order No.", OrderNo);
        IF PurchLine.FINDLAST THEN
          EXIT(TRUE);

        EXPurchDocLine.SETCURRENTKEY("Order No.");
        EXPurchDocLine.SETRANGE("Order No.", OrderNo);
        IF EXPurchDocLine.FINDLAST THEN
          EXIT(TRUE);
      END;

      ExDocEntry.RESET;
      ExDocEntry.SETCURRENTKEY("Order No.");
      ExDocEntry.SETRANGE("Order No.", OrgOrderNo);
      IF ExDocEntry.FINDLAST THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE OrderIsReceived@1100285038(OrderNo@1100285000 : Code[20];DocType@1100285004 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order') : Boolean;
    VAR
      PurchLine@1100285003 : Record 39;
    BEGIN
      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type", DocType);
      PurchLine.SETRANGE("Document No.", OrderNo);
      PurchLine.SETFILTER(Quantity,'<>%1', 0);
      PurchLine.SETFILTER("Quantity Received",'<>%1', 0);
      EXIT(PurchLine.FINDFIRST);
    END;

    PROCEDURE IsAccountPredefinedAcc@1100285050(TempNo@1100285000 : Code[20]) : Boolean;
    VAR
      ExFlowSetup@1100285001 : Record 12013601;
      ExStdPurchCodeLine@1100285002 : Record 12013683;
    BEGIN
      ExFlowSetup.GET;
      IF ExFlowSetup."Predefined Account" = TempNo THEN
        EXIT(TRUE);

      IF ExFlowSetup."Predefined Purch. Code" <> '' THEN BEGIN
        ExStdPurchCodeLine.SETRANGE("EX Standard Purchase Code", ExFlowSetup."Predefined Purch. Code");
        ExStdPurchCodeLine.SETRANGE(Type, ExStdPurchCodeLine.Type::"G/L Account");
        ExStdPurchCodeLine.SETRANGE("No.", TempNo);
        IF ExStdPurchCodeLine.FINDFIRST THEN
          EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE CreateJournalLine@1100285054(PurchaseLine@1100285000 : Record 39;TempAmountLCY@1100285010 : Decimal;TempNo@1100285005 : Code[20];OverrideGLAcc@1100285003 : ' ,Always,When Line has Predefined Account';GLAccToUse@1100285004 : Code[20];PostingDate@1100285006 : Date;PostRemPeriodBal@1100285011 : Boolean;PostRemPeriodBalToGLAcc@1100285009 : Code[20];CopyDimensions@1100285012 : 'Never,Always,For the non-balancing records only,Fixed,Fixed for the non-balancing records only,Fixed when blank,Fixed when blank for the non-balancing records only';BalanceAccount@1100285013 : Code[20];ReversalDate@1100285014 : Date;JnlTemplateName@1100285016 : Code[10];JnlBatchName@1100285015 : Code[10];VAR TempLineNo@1100285018 : Integer;TempDocNo@1100285017 : Code[20];DescriptionToUse@1100285019 : 'PurchaseLine,OrderNoRef,VendorName';FixedDimCode@1100285023 : ARRAY [8] OF Code[20];FixedDimValue@1100285022 : ARRAY [8] OF Code[20];RetrieveLinesFrom@1100285008 : 'Purchase Line,Ex Document Line');
    VAR
      RemPeriodicBalance@1100285001 : Decimal;
      OriginalAmtLCY@1100285002 : Decimal;
      NoOfPeriods@1100285007 : Integer;
      ExPeriodicMgt@1100285020 : Codeunit 12013599;
    BEGIN
      GetGLSetup;

      IF OverrideGLAcc = OverrideGLAcc::Always THEN
        TempNo := GLAccToUse
      ELSE
        IF OverrideGLAcc = OverrideGLAcc::"When Line has Predefined Account" THEN
          IF IsAccountPredefinedAcc(TempNo) THEN
            TempNo := GLAccToUse;

      IF TempNo = '' THEN
        ERROR(STRSUBSTNO(EXF60,PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No."));

      RemPeriodicBalance := 0;

      ExPeriodicMgt.ExFlowCodeunit_CreateJnlLinePer(PurchaseLine,RemPeriodicBalance,OriginalAmtLCY,NoOfPeriods,TempAmountLCY,PostingDate,GLSetup,PostRemPeriodBal);

      IF (TempAmountLCY = 0) AND (RemPeriodicBalance = 0) THEN
        EXIT;

      IF TempAmountLCY <> 0 THEN
        CreateGLLines(PurchaseLine,TempAmountLCY,TempNo,PostingDate,CopyDimensions,BalanceAccount,ReversalDate,
                      JnlTemplateName,JnlBatchName,TempLineNo,TempDocNo,DescriptionToUse,
                      FixedDimCode,FixedDimValue,RetrieveLinesFrom);

      IF RemPeriodicBalance <> 0 THEN
        CreateGLLines(PurchaseLine,RemPeriodicBalance,PostRemPeriodBalToGLAcc,PostingDate,CopyDimensions,BalanceAccount,ReversalDate,
                      JnlTemplateName,JnlBatchName,TempLineNo,TempDocNo,DescriptionToUse,
                      FixedDimCode,FixedDimValue,RetrieveLinesFrom);
    END;

    PROCEDURE CreateGLLines@1100285028(PurchaseLine@1100285007 : Record 39;TempAmountLCY@1100285006 : Decimal;TempNo@1100285005 : Code[20];PostingDate@1100285000 : Date;CopyDimensions@1100285001 : 'Never,Always,For the non-balancing records only,Fixed,Fixed for the non-balancing records only,Fixed when blank,Fixed when blank for the non-balancing records only';BalanceAccount@1100285002 : Code[20];ReversalDate@1100285003 : Date;JnlTemplateName@1100285008 : Code[10];JnlBatchName@1100285004 : Code[10];VAR TempLineNo@1100285010 : Integer;TempDocNo@1100285009 : Code[20];DescriptionToUse@1100285011 : 'PurchaseLine,OrderNoRef';FixedDimCode@1100285017 : ARRAY [8] OF Code[20];FixedDimValue@1100285016 : ARRAY [8] OF Code[20];RetrieveLinesFrom@1100285012 : 'Purchase Line,Ex Document Line');
    VAR
      ExDocLineDim@1100285014 : Record 12013611;
      i@1100285015 : Integer;
    BEGIN
      IF (CopyDimensions = CopyDimensions::"Fixed when blank") OR
         (CopyDimensions = CopyDimensions::"Fixed when blank for the non-balancing records only") THEN BEGIN

        IF RetrieveLinesFrom = RetrieveLinesFrom::"Purchase Line" THEN BEGIN
          FOR i:=1 TO 8 DO BEGIN
            IF FixedDimCode[i] <> '' THEN
              ExFlowDimMgt.ClearFixedDimCode(PurchaseLine,FixedDimCode,FixedDimValue,i);
          END;
        END ELSE BEGIN // ex doc line
          FOR i:=1 TO 8 DO BEGIN
            IF FixedDimCode[i] <> '' THEN BEGIN
              ExDocLineDim.RESET;
              ExDocLineDim.SETCURRENTKEY("Document No.");
              ExDocLineDim.SETRANGE("Document Type", PurchaseLine."Document Type");
              ExDocLineDim.SETRANGE("Document No.", PurchaseLine."Document No.");
              ExDocLineDim.SETRANGE("Line No.", PurchaseLine."Line No.");
              ExDocLineDim.SETRANGE("Dimension Code",FixedDimCode[i]);
              IF ExDocLineDim.FINDFIRST THEN BEGIN
                CLEAR(FixedDimCode);
                CLEAR(FixedDimValue);
                i := 8;
              END;
            END;
          END;
        END;
      END;

      // Net entry
      AddJnlLine(PurchaseLine,TempAmountLCY,TempNo,PostingDate,
                 CopyDimensions>0,
                 JnlTemplateName,JnlBatchName,TempLineNo,TempDocNo,DescriptionToUse,
                 FixedDimCode,FixedDimValue,RetrieveLinesFrom,FALSE);

      // Balancing Entry
      AddJnlLine(PurchaseLine,-TempAmountLCY,BalanceAccount,PostingDate,
                 (CopyDimensions=CopyDimensions::Always) OR (CopyDimensions=CopyDimensions::Fixed) OR
                 (CopyDimensions=CopyDimensions::"Fixed when blank"),
                 JnlTemplateName,JnlBatchName,TempLineNo,TempDocNo,DescriptionToUse,
                 FixedDimCode,FixedDimValue,RetrieveLinesFrom,TRUE);

      // Reversal entry
      AddJnlLine(PurchaseLine,-TempAmountLCY,TempNo,ReversalDate,
                 CopyDimensions>0,
                 JnlTemplateName,JnlBatchName,TempLineNo,TempDocNo,DescriptionToUse,
                 FixedDimCode,FixedDimValue,RetrieveLinesFrom,FALSE);

      // Balancing entry
      AddJnlLine(PurchaseLine,TempAmountLCY,BalanceAccount,ReversalDate,
                 (CopyDimensions=CopyDimensions::Always) OR (CopyDimensions=CopyDimensions::Fixed) OR
                 (CopyDimensions=CopyDimensions::"Fixed when blank"),
                 JnlTemplateName,JnlBatchName,TempLineNo,TempDocNo,DescriptionToUse,
                 FixedDimCode,FixedDimValue,RetrieveLinesFrom,TRUE);
    END;

    PROCEDURE AddJnlLine@1100285025(_PurchaseLine@1100285002 : Record 39;_TempAmountLCY@1100285001 : Decimal;_TempNo@1100285000 : Code[20];_PostDate@1100285004 : Date;_AddDimensions@1100285003 : Boolean;_JnlTemplateName@1100285011 : Code[10];_JnlBatchName@1100285010 : Code[10];VAR _TempLineNo@1100285013 : Integer;_TempDocNo@1100285014 : Code[20];_DescriptionToUse@1100285015 : 'PurchaseLine,OrderNoRef,VendorName';_FixedDimCode@1100285019 : ARRAY [8] OF Code[20];_FixedDimValue@1100285018 : ARRAY [8] OF Code[20];RetrieveLinesFrom@1100285017 : 'Purchase Line,Ex Document Line';IsBalancingRec@1000 : Boolean);
    VAR
      GenJnlLine@1100285012 : Record 81;
      GenJnlTemplate@1100285006 : Record 80;
      GenJnlBatch@1100285005 : Record 232;
      Vendor@1100285020 : Record 23;
      TempDescription@1100285007 : Text[1024];
      UseFixed@1100285009 : Boolean;
      i@1100285016 : Integer;
      Index@1100285008 : Integer;
    BEGIN
      GenJnlLine.INIT;
      GenJnlLine."Journal Template Name" := _JnlTemplateName;
      GenJnlLine."Journal Batch Name" := _JnlBatchName;
      GenJnlLine."Line No." := _TempLineNo;
      GenJnlLine."Document No." := _TempDocNo;
      GenJnlLine.INSERT(TRUE);
      _TempLineNo += 10000;

      GenJnlTemplate.GET(_JnlTemplateName);
      GenJnlBatch.GET(GenJnlLine."Journal Template Name",GenJnlLine."Journal Batch Name");
      GenJnlLine."Source Code" := GenJnlTemplate."Source Code";
      GenJnlLine."Reason Code" := GenJnlBatch."Reason Code";
      GenJnlLine."Posting No. Series" := GenJnlBatch."Posting No. Series";

      GenJnlLine.VALIDATE("Account Type", GenJnlLine."Account Type"::"G/L Account");
      //>> 4PS
      IF IsBalancingRec THEN BEGIN
        //GenJnlLine.VALIDATE(GenJnlLine."Job No.",_PurchaseLine."Job No.");
        //GenJnlLine.VALIDATE("Shortcut Dimension 2 Code",_PurchaseLine."Shortcut Dimension 2 Code");
        GenJnlLine.VALIDATE("Account No.", _TempNo);
      END ELSE BEGIN
        IF _PurchaseLine."Shortcut Dimension 2 Code" <> '' THEN BEGIN
          GenJnlLine.VALIDATE(GenJnlLine."Job No.",_PurchaseLine."Job No.");
          GenJnlLine.VALIDATE("Shortcut Dimension 2 Code",_PurchaseLine."Shortcut Dimension 2 Code");
        END ELSE
          GenJnlLine.VALIDATE("Account No.", _TempNo);
      END;
      //<< 4PS


      GenJnlLine.VALIDATE("Gen. Posting Type", 0);
      GenJnlLine.VALIDATE("Gen. Posting Type", 0);
      GenJnlLine.VALIDATE("Gen. Bus. Posting Group", '');
      GenJnlLine.VALIDATE("Gen. Prod. Posting Group", '');
      GenJnlLine.VALIDATE("VAT Bus. Posting Group", '');
      GenJnlLine.VALIDATE("VAT Prod. Posting Group", '');
      GenJnlLine.VALIDATE("Posting Date", _PostDate);
      GenJnlLine.VALIDATE("Currency Code", '');

      GenJnlLine.VALIDATE("Bal. Account Type", 0);
      GenJnlLine.VALIDATE("Bal. Account No.", '');
      GenJnlLine.VALIDATE("Bal. Gen. Posting Type", 0);
      GenJnlLine.VALIDATE("Bal. Gen. Bus. Posting Group", '');
      GenJnlLine.VALIDATE("Bal. Gen. Prod. Posting Group", '');
      GenJnlLine.VALIDATE("Bal. VAT Calculation Type", 0);
      GenJnlLine.VALIDATE("Bal. VAT Bus. Posting Group", '');
      GenJnlLine.VALIDATE("Bal. VAT Prod. Posting Group", '');
      GenJnlLine.VALIDATE(Amount, _TempAmountLCY);
      //>> 4PS
      GenJnlLine.VALIDATE(Element,_PurchaseLine.Element);
      IF _PurchaseLine."Extension Contract" <> '' THEN
      GenJnlLine.VALIDATE("Extension Contract",_PurchaseLine."Extension Contract");
      GenJnlLine.VALIDATE("Plot No.",_PurchaseLine."Plot No.");
      GenJnlLine.VALIDATE("Cost Component",_PurchaseLine."Cost Component");
      //<< 4PS

      CASE _DescriptionToUse OF
        _DescriptionToUse::PurchaseLine:
          GenJnlLine.VALIDATE(Description, _PurchaseLine.Description);
        _DescriptionToUse::OrderNoRef:
          BEGIN
            TempDescription := STRSUBSTNO(EXF61,_PurchaseLine."Document Type", _PurchaseLine."Document No.");
            GenJnlLine.VALIDATE(Description, COPYSTR(TempDescription,1,MAXSTRLEN(GenJnlLine.Description)));
          END;
        _DescriptionToUse::VendorName:
          BEGIN
            Vendor.GET(_PurchaseLine."Buy-from Vendor No.");
            TempDescription := STRSUBSTNO(EXF78,Vendor.Name, _PurchaseLine."Document No.", _PurchaseLine."Document Type");
            GenJnlLine.VALIDATE(Description, COPYSTR(TempDescription,1,MAXSTRLEN(GenJnlLine.Description)));
          END;
      END;

      IF _AddDimensions THEN BEGIN
        UseFixed := FALSE;
        FOR i:=1 TO 8 DO
          IF _FixedDimCode[i] <> '' THEN
            UseFixed := TRUE;

        IF UseFixed THEN BEGIN
          FOR i:=1 TO 8 DO BEGIN
            IF _FixedDimCode[i] <> '' THEN BEGIN
              GetDimIndex(_FixedDimCode[i],Index);
              IF Index = 1 THEN
                GenJnlLine.VALIDATE("Shortcut Dimension 1 Code", _FixedDimValue[i]);
              IF Index = 2 THEN
                GenJnlLine.VALIDATE("Shortcut Dimension 2 Code", _FixedDimValue[i]);
            END;
          END;
        END ELSE BEGIN
          GenJnlLine.VALIDATE("Shortcut Dimension 1 Code", _PurchaseLine."Shortcut Dimension 1 Code");
          GenJnlLine.VALIDATE("Shortcut Dimension 2 Code", _PurchaseLine."Shortcut Dimension 2 Code");
        END;
      END ELSE BEGIN
        GenJnlLine.VALIDATE("Shortcut Dimension 1 Code", '');
        GenJnlLine.VALIDATE("Shortcut Dimension 2 Code", '');
      END;

      //>>191126
      GenJnlLine."Source Type" := GenJnlLine."Source Type"::Vendor;
      GenJnlLine."Source No." := _PurchaseLine."Buy-from Vendor No.";
      //<<191126

      GenJnlLine.MODIFY(TRUE);

      IF _AddDimensions THEN
        IF UseFixed THEN BEGIN
          FOR i:=1 TO 8 DO BEGIN
            IF _FixedDimCode[i] <> '' THEN
              ExFlowDimMgt.AddDocDimToJnlLineDim(GenJnlLine,_FixedDimCode[i],_FixedDimValue[i]);
          END;
        END ELSE
          ExFlowDimMgt.CopyDocDimToJnlLineDim(_PurchaseLine,GenJnlLine,RetrieveLinesFrom)
        ELSE
          ExFlowDimMgt.DeleteJnlDim(GenJnlLine);
    END;

    PROCEDURE ValidateApprovePurchHeader@1100285055(xPurchHeader@1100285000 : Record 38;VAR PurchHeader@1100285002 : Record 38);
    VAR
      PurchHeader2@1100285006 : Record 38;
      lPurchLine@1100285001 : Record 39;
      ReceiptLine@1100285007 : Record 121;
      RecModified@1100285010 : Boolean;
      ExDoc2@1100285003 : Record 12013612;
    BEGIN
      ExFlowSetup.GET;

      IF PurchHeader2.GET(PurchHeader."Document Type",PurchHeader."No.") THEN BEGIN
        PurchHeader.MODIFY;
      END;

      IF PurchHeader."Document Type" IN [PurchHeader."Document Type"::Invoice,PurchHeader."Document Type"::"Credit Memo"] THEN
        IF (NOT xPurchHeader.Approve) AND PurchHeader.Approve AND
           (GetPurchHeaderImageName(PurchHeader."Document Type",PurchHeader."No.",ExDoc2) = '') THEN BEGIN
          GetImage(PurchHeader,FALSE);

          IF (GetPurchHeaderImageName(PurchHeader."Document Type",PurchHeader."No.",ExDoc2) = '') THEN
            ERROR(EXF64);
        END;

      IF xPurchHeader.Approve AND (NOT PurchHeader.Approve) THEN BEGIN
        IF NOT IsUserSuperior( USERID) THEN
          ERROR(EXF63);

        IF NOT CONFIRM(EXF77) THEN
          ERROR(EXF73);

        IF AnyApproved(PurchHeader) THEN BEGIN
          IF CONFIRM(EXF62,FALSE) THEN
            DeleteDocument(PurchHeader)
          ELSE
            ERROR(EXF73);
        END ELSE
          DeleteDocument(PurchHeader);
      END ELSE BEGIN
        IF IsUserSuperior( USERID) THEN BEGIN
          lPurchLine.RESET;
          lPurchLine.SETRANGE("Document Type", PurchHeader."Document Type");
          lPurchLine.SETRANGE("Document No.", PurchHeader."No.");
          lPurchLine.SETFILTER(Type, '>%1', 0);
          IF NOT ExFlowSetup."Approve VAT lines" THEN
            lPurchLine.SETFILTER("VAT Calculation Type",'<>%1',lPurchLine."VAT Calculation Type"::"Full VAT");
          IF lPurchLine.FINDSET THEN
            REPEAT
              RecModified := FALSE;

              IF NOT lPurchLine.Approve THEN BEGIN
                lPurchLine.VALIDATE(Approve,TRUE);
                RecModified := TRUE;
              END;

              IF lPurchLine."Receipt No." <> '' THEN
                IF ReceiptLine.GET(lPurchLine."Receipt No.",lPurchLine."Receipt Line No.") THEN BEGIN
                  IF (lPurchLine."ExFlow Order No." <> ReceiptLine."Order No.") OR
                     (lPurchLine."ExFlow Order Line No." <> ReceiptLine."Order Line No.") THEN BEGIN
                    lPurchLine."ExFlow Order No." := ReceiptLine."Order No.";
                    lPurchLine."ExFlow Order Line No." := ReceiptLine."Order Line No.";
                    RecModified := TRUE;
                  END;
                END;

              IF RecModified THEN
                lPurchLine.MODIFY(TRUE);
            UNTIL lPurchLine.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE GetImage@1100285056(PurchHeader@1100285000 : Record 38;Forced@1100285011 : Boolean) ImageName : Text[250];
    VAR
      ExDoc2@1100285001 : Record 12013612;
      ExFlowSetup@1100285004 : Record 12013601;
      ExFlowFileMgt@1100285002 : Codeunit 12013602;
      FileName@1100285003 : Text[1024];
      Folder@1100285008 : Text[170];
      SubFolder@1100285007 : Text[30];
      ExDocHead@1100285005 : Record 12013608;
      TempBlob@1100285009 : Record 99008535;
      FileManagement@1100285010 : Codeunit 419;
    BEGIN
      ExFlowFileMgt.FileNameFromDialog(FileName,'',0,'',0);
      IF FileName = '' THEN
        EXIT;
      ExFlowSetup.GET;

      IF ExFlowSetup."File storage type"= ExFlowSetup."File storage type"::Filesystem THEN BEGIN
        Folder := ExFlowSetup."Path to Used Invoices";
        SubFolder := DayMap(WORKDATE);
        ImageName := DELCHR(PurchHeader."Pay-to Vendor No." + '-' + PurchHeader."No." + '-' + ExFlowFileMgt.GetFileName(FileName),'=','@$%&<>/?');
        ExFlowFileMgt.Copy(ExFlowFileMgt.GetFileName(FileName),ImageName,ExFlowFileMgt.Path(FileName),Folder+SubFolder,Folder);
        ImageName := SubFolder + ImageName;
      END ELSE BEGIN
        IF FileManagement.ServerFileExists(FileName) THEN
          FileManagement.BLOBImportFromServerFile(TempBlob,FileName)
        ELSE
          FileManagement.BLOBImportFromServerFile(TempBlob,FileManagement.UploadFileSilent(FileName));
        ImageName := DELCHR(PurchHeader."Pay-to Vendor No." + '-' + PurchHeader."No." + '-' + ExFlowFileMgt.GetFileName(FileName),'=','@$%&<>/?');
      END;

      ExDocHead.RetrieveRecord(ExDocHead,PurchHeader."Document Type",PurchHeader."No.");
      IF NOT ExDoc2.RetrieveRecord(ExDoc2,PurchHeader."Document Type",PurchHeader."No.") THEN BEGIN
        ExDoc2.INIT;
        ExDoc2."Entry No." := 0;
        ExDoc2."Document Type" := PurchHeader."Document Type";
        ExDoc2."Document No." := PurchHeader."No.";
        ExDoc2."Image Name" := ImageName;
        ExDoc2."Document ID" := ExDocHead.ID;
        ExDoc2."Web ID" := ExDocHead."Web ID";
        ExDoc2."Image Blob" := TempBlob.Blob;
        ExDoc2.INSERT;
      END ELSE IF Forced THEN BEGIN
        ExDoc2."Image Name" := ImageName;
        ExDoc2."Document ID" := ExDocHead.ID;
        ExDoc2."Web ID" := ExDocHead."Web ID";
        ExDoc2."Image Blob" := TempBlob.Blob;
        ExDoc2.MODIFY;
      END;
    END;

    PROCEDURE SetApproveForPurchLine@1100285057(PurchHeader@1100285000 : Record 38;VAR PurchLine@1100285001 : Record 39);
    BEGIN
      WITH PurchLine DO BEGIN
        IF Type <> 0 THEN
          Approve := PurchHeader.Approve;

        IF Approve THEN
          IF "VAT Calculation Type" = "VAT Calculation Type"::"Full VAT" THEN BEGIN
            ExFlowSetup.GET;
            Approve := ExFlowSetup."Approve VAT lines";
          END;

        IF Approve THEN
          IF NOT LineTypeAllowed(Type, FALSE) THEN
            Approve := FALSE;
      END;
    END;

    PROCEDURE SetApproveForExFPurchLine@1100285059(ExFPurchHeader@1100285000 : Record 12013587;VAR ExFPurchLine@1100285001 : Record 12013588);
    BEGIN
      WITH ExFPurchLine DO BEGIN
        IF Type <> 0 THEN
          Approval := ExFPurchHeader.Approval;

        IF Approval THEN BEGIN
          ExFlowSetup.GET;
          IF NOT ExFlowSetup."Approve VAT lines" THEN
            IF IsLineVATLine(ExFPurchLine) THEN
              Approval := FALSE;
        END;

        IF Approval THEN
          IF NOT LineTypeAllowed(Type, FALSE) THEN
            Approval := FALSE;
      END;
    END;

    PROCEDURE SetReceiptNoMand@1100285058(PurchHeader@1100285001 : Record 38;VAR PurchLine@1100285000 : Record 39);
    BEGIN
      WITH PurchLine DO BEGIN
        IF ExFlowSetup.GET( 0) THEN BEGIN
          IF ExFlowSetup."Receipt No. Mand. Item" AND (Type = Type::Item) THEN
            "Receipt No. Mandatory" := PurchHeader."Receipt No. Mandatory";
          IF ExFlowSetup."Receipt No. Mand. G/L" AND (Type = Type::"G/L Account") THEN
            "Receipt No. Mandatory" := PurchHeader."Receipt No. Mandatory";
          IF ExFlowSetup."Receipt No. Mand. Fixed Asset" AND (Type = Type::"Fixed Asset") THEN
            "Receipt No. Mandatory" := PurchHeader."Receipt No. Mandatory";
          IF ExFlowSetup."Receipt No. Mand. Charge Item" AND (Type = Type::"Charge (Item)") THEN
            "Receipt No. Mandatory" := PurchHeader."Receipt No. Mandatory";
        END;

        IF "Receipt No." <> '' THEN
          "Receipt No. Mandatory" := TRUE;
      END;
    END;

    PROCEDURE ValidateApprovalPurchLine@1100285008(VAR xPurchLine@1100285000 : Record 39;VAR PurchLine@1100285001 : Record 39);
    VAR
      PurchHeader@1100285002 : Record 38;
    BEGIN
      IF PurchLine.Type = 0 THEN
        ERROR(EXF65);

      IF NOT LineTypeAllowed(PurchLine.Type, FALSE) THEN
        ERROR(STRSUBSTNO(EXF70,PurchLine.Type));

      PurchHeader.GET(PurchLine."Document Type",PurchLine."Document No.");
      IF NOT PurchHeader.Approve THEN
        ERROR(EXF65);

      IF xPurchLine.Approve AND (NOT PurchLine.Approve) AND (NOT PurchHeader."New Line") THEN BEGIN
        IF NOT IsUserSuperior(USERID) THEN
          ERROR(STRSUBSTNO(EXF66,USERID));

        IF NOT CONFIRM(EXF77) THEN
          ERROR(EXF73);

        IF AnyApprovedLine(PurchLine) THEN
          IF NOT CONFIRM(EXF67,FALSE) THEN
            ERROR(EXF73)
      END;
    END;

    PROCEDURE ValidateApprovalExFPurchLine@1100285060(VAR xExFPurchLine@1100285000 : Record 12013588;VAR ExFPurchLine@1100285001 : Record 12013588);
    VAR
      ExFPurchHeader@1100285002 : Record 12013587;
    BEGIN
      IF ExFPurchLine.Approval THEN BEGIN
        IF ExFPurchLine.Type = 0 THEN
          ERROR(EXF65);

        IF NOT LineTypeAllowed(ExFPurchLine.Type, FALSE) THEN
          ERROR(STRSUBSTNO(EXF70,ExFPurchLine.Type));

        ExFPurchHeader.GET(ExFPurchLine."Inbound Document No.");
        IF NOT ExFPurchHeader.Approval THEN
          ERROR(EXF65);
      END;

      IF xExFPurchLine.Approval AND (NOT ExFPurchLine.Approval) THEN BEGIN
        IF NOT IsUserSuperior(USERID) THEN
          ERROR(STRSUBSTNO(EXF66,USERID));

        IF NOT CONFIRM(EXF77) THEN
          ERROR(EXF73);
      END;
    END;

    PROCEDURE FindUserGroup@1100285017(_InCode@1100285000 : Code[100];VAR _UserGroupName@1100285002 : Text[100];SuspendErrors@1100285003 : Boolean) : Code[100];
    VAR
      ExUserGroup@1100285001 : Record 12013606;
      TmpPos@1100285004 : Integer;
      TmpUserGroup@1100285005 : Code[50];
    BEGIN
      IF _InCode = '' THEN
        EXIT('');

      IF NOT ExUserGroup.GET(_InCode) THEN BEGIN
        TmpPos := STRPOS(_InCode,'\');
        IF TmpPos <> 0 THEN BEGIN
          TmpUserGroup := COPYSTR(_InCode,TmpPos + 1);
          IF NOT ExUserGroup.GET(TmpUserGroup) THEN
            IF NOT SuspendErrors THEN
              ERROR(EXF68,_InCode)
            ELSE
              EXIT('');
        END;
      END;

      IF NOT SuspendErrors THEN
        IF ExUserGroup.Blocked THEN
          ERROR(EXF69,ExUserGroup.Code);

      _UserGroupName := ExUserGroup.Name;

      EXIT(ExUserGroup.Code);
    END;

    PROCEDURE LookUpUserGroup@1100285024(_InCode@1100285000 : Code[100];VAR _UserGroupName@1100285003 : Text[100]) : Code[100];
    VAR
      ExUserGroupListForm@1100285001 : Page 12013618;
      ExUserGroup@1100285002 : Record 12013606;
    BEGIN
      CLEAR(ExUserGroupListForm);
      ExUserGroupListForm.EDITABLE(FALSE);
      ExUserGroupListForm.LOOKUPMODE(TRUE);

      ExUserGroup.RESET;
      IF _InCode <> '' THEN
        ExUserGroup.SETRANGE(Code, _InCode);

      IF ExUserGroup.FINDFIRST THEN
        ExUserGroupListForm.SETRECORD(ExUserGroup);

      ExUserGroup.SETRANGE(Code);

      ExUserGroupListForm.SETTABLEVIEW(ExUserGroup);
      IF ExUserGroupListForm.RUNMODAL = ACTION::LookupOK THEN BEGIN
        ExUserGroupListForm.GETRECORD(ExUserGroup);
        _UserGroupName := ExUserGroup.Name;
        EXIT(ExUserGroup.Code);
      END ELSE
        EXIT(_InCode);
    END;

    PROCEDURE GetGLSetup@1100285061();
    BEGIN
      IF NOT GLSetupRetrieved THEN BEGIN
        GLSetupRetrieved := TRUE;
        GLSetup.GET;
      END;
    END;

    PROCEDURE IsUserSuperior@1100285062(_UserID@1100285001 : Code[100]) : Boolean;
    VAR
      ExUserComp@1100285002 : Record 12013641;
    BEGIN
      IF GetUserComp(ExUserComp,_UserID) THEN
        EXIT(ExUserComp.Superior)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE GetUserComp@1100285041(VAR _ExUserComp@1100285002 : Record 12013641;_UserID@1100285000 : Code[100]) : Boolean;
    VAR
      TmpUserID@1100285004 : Code[100];
      TmpPos@1100285003 : Integer;
    BEGIN
      IF _ExUserComp.GET(_UserID) THEN
        EXIT(TRUE);

      TmpPos := STRPOS(_UserID,'\');
      IF TmpPos <> 0 THEN BEGIN
        TmpUserID := COPYSTR(_UserID,TmpPos + 1);
        IF _ExUserComp.GET(TmpUserID) THEN
          EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE GetUserGroup@1100285032(VAR _UserID@1100285001 : Code[100]) : Code[100];
    VAR
      ExUserGroup@1100285002 : Record 12013606;
      TmpUserID@1100285003 : Code[100];
      TmpPos@1100285004 : Integer;
    BEGIN
      IF ExUserGroup.GET(_UserID) THEN
        EXIT(_UserID);

      TmpPos := STRPOS(_UserID,'\');
      IF TmpPos <> 0 THEN BEGIN
        TmpUserID := COPYSTR(_UserID,TmpPos + 1);
        IF ExUserGroup.GET(TmpUserID) THEN
          EXIT(ExUserGroup.Code);
      END;

      EXIT('');
    END;

    PROCEDURE TestifApproved@1100285063(_PurchLine@1100285002 : Record 39;_xPurchLine@1100285001 : Record 39;_DocLine@1100285004 : Record 12013609;_AppSetup@1100285005 : Record 12013601;_SilentMode@1100285000 : Boolean);
    VAR
      DocLineApp@1100285006 : Record 12013610;
      AmountChanged@1100285003 : Boolean;
    BEGIN
      // Test if Approved
      IF NOT _SilentMode THEN BEGIN
        AmountChanged := _PurchLine."Line Amount" <> _xPurchLine."Line Amount";
        IF AmountChanged AND _AppSetup."Block Amt change Approved Line" THEN
          IF AlreadyApprovedByActualUser(_PurchLine) THEN
            ERROR(EXF56)
          ELSE BEGIN
            // If auto approved then this needs to be removed
            // this assumed the order is released again, which it should be when the price is changed
            DocLineApp.RESET;
            DocLineApp.SETCURRENTKEY("Document Line ID");
            DocLineApp.SETRANGE("Document Line ID", _DocLine.ID);
            DocLineApp.SETRANGE("Auto Approved", TRUE);
            IF DocLineApp.FIND('-') THEN
              DocLineApp.DELETE;

            EXIT;
          END;

        IF AlreadyApprovedByActualUser(_PurchLine) THEN
          IF IsLineModified(_PurchLine,_xPurchLine) THEN BEGIN
            IF NOT IsUserSuperior( USERID) THEN
              ERROR(STRSUBSTNO(EXF66,USERID));

            IF _DocLine.Flowstatus <> _DocLine.Flowstatus::Rejected THEN
              IF NOT _AppSetup."Suppress Approved Message" THEN
                IF NOT CONFIRM(EXF41) THEN
                  ERROR(EXF73);
          END;
      END;
    END;

    PROCEDURE IsLineModified@1100285064(PurchLine@1100285001 : Record 39;xPurchLine@1100285000 : Record 39) : Boolean;
    VAR
      RecRef@1100285002 : RecordRef;
      FldRef@1100285003 : FieldRef;
      xRecRef@1100285005 : RecordRef;
      xFldRef@1100285004 : FieldRef;
      TempValue@1100285006 : Decimal;
      xTempValue@1100285007 : Decimal;
    BEGIN
      RecRef.GETTABLE(PurchLine);
      xRecRef.GETTABLE(xPurchLine);

      // Type
      FldRef := RecRef.FIELD(5);
      xFldRef := xRecRef.FIELD(5);
      IF FldRef.VALUE <> xFldRef.VALUE THEN
        EXIT(TRUE);

      // No.
      FldRef := RecRef.FIELD(6);
      xFldRef := xRecRef.FIELD(6);
      IF FldRef.VALUE <> xFldRef.VALUE THEN
        EXIT(TRUE);

      // Description
      FldRef := RecRef.FIELD(11);
      xFldRef := xRecRef.FIELD(11);
      IF FldRef.VALUE <> xFldRef.VALUE THEN
        EXIT(TRUE);

      // Description 2
      FldRef := RecRef.FIELD(12);
      xFldRef := xRecRef.FIELD(12);
      IF FldRef.VALUE <> xFldRef.VALUE THEN
        EXIT(TRUE);

      // Template Rule
      FldRef := RecRef.FIELD(12013660);
      xFldRef := xRecRef.FIELD(12013660);
      IF FldRef.VALUE <> xFldRef.VALUE THEN
        EXIT(TRUE);

      // Quantity
      FldRef := RecRef.FIELD(15);
      xFldRef := xRecRef.FIELD(15);
      IF PurchLine."Document Type" IN [PurchLine."Document Type"::Quote,
                                       PurchLine."Document Type"::Order] THEN BEGIN
        TempValue := 0;
        xTempValue := 0;
        IF EVALUATE(TempValue,FORMAT(FldRef.VALUE)) THEN;
        IF EVALUATE(xTempValue,FORMAT(xFldRef.VALUE)) THEN;

        IF TempValue > xTempValue THEN
          EXIT(TRUE);
      END ELSE IF FldRef.VALUE <> xFldRef.VALUE THEN
        EXIT(TRUE);

      // Line Amount
      FldRef := RecRef.FIELD(103);
      xFldRef := xRecRef.FIELD(103);

      IF PurchLine."Document Type" IN [PurchLine."Document Type"::Quote,
                                       PurchLine."Document Type"::Order] THEN BEGIN
        TempValue := 0;
        xTempValue := 0;
        IF EVALUATE(TempValue,FORMAT(FldRef.VALUE)) THEN;
        IF EVALUATE(xTempValue,FORMAT(xFldRef.VALUE)) THEN;

        IF TempValue > xTempValue THEN
          EXIT(TRUE);
      END ELSE IF FldRef.VALUE <> xFldRef.VALUE THEN
        EXIT(TRUE);
    END;

    PROCEDURE IsLineModifiedSync@1100285007(PurchLine@1100285001 : Record 39;xPurchLine@1100285000 : Record 39) : Boolean;
    VAR
      Field@1100285008 : Record 2000000041;
      RecRef@1100285002 : RecordRef;
      FldRef@1100285003 : FieldRef;
      xRecRef@1100285005 : RecordRef;
      xFldRef@1100285004 : FieldRef;
      TempValue@1100285006 : Decimal;
      xTempValue@1100285007 : Decimal;
    BEGIN
      RecRef.GETTABLE(PurchLine);
      xRecRef.GETTABLE(xPurchLine);

      // Type
      FldRef := RecRef.FIELD(5);
      xFldRef := xRecRef.FIELD(5);
      IF FldRef.VALUE <> xFldRef.VALUE THEN
        EXIT(TRUE);

      // No.
      FldRef := RecRef.FIELD(6);
      xFldRef := xRecRef.FIELD(6);
      IF FldRef.VALUE <> xFldRef.VALUE THEN
        EXIT(TRUE);

      // Description
      FldRef := RecRef.FIELD(11);
      xFldRef := xRecRef.FIELD(11);
      IF FldRef.VALUE <> xFldRef.VALUE THEN
        EXIT(TRUE);

      // Description 2
      FldRef := RecRef.FIELD(12);
      xFldRef := xRecRef.FIELD(12);
      IF FldRef.VALUE <> xFldRef.VALUE THEN
        EXIT(TRUE);

      // Quantity
      FldRef := RecRef.FIELD(15);
      xFldRef := xRecRef.FIELD(15);

      TempValue := 0;
      xTempValue := 0;
      IF EVALUATE(TempValue,FORMAT(FldRef.VALUE)) THEN;
      IF EVALUATE(xTempValue,FORMAT(xFldRef.VALUE)) THEN;

      IF TempValue <> xTempValue THEN
        EXIT(TRUE);

      // Line Amount
      FldRef := RecRef.FIELD(103);
      xFldRef := xRecRef.FIELD(103);

      TempValue := 0;
      xTempValue := 0;
      IF EVALUATE(TempValue,FORMAT(FldRef.VALUE)) THEN;
      IF EVALUATE(xTempValue,FORMAT(xFldRef.VALUE)) THEN;

      IF TempValue <> xTempValue THEN
        EXIT(TRUE);

      // Periodic Template NAV 15
      IF Field.GET(DATABASE::"Purchase Line",11201) THEN BEGIN
        FldRef := RecRef.FIELD(11201);
        xFldRef := xRecRef.FIELD(11201);
        IF FldRef.VALUE <> xFldRef.VALUE THEN
          EXIT(TRUE);
      END;
      IF Field.GET(DATABASE::"Purchase Line",11202) THEN BEGIN
        FldRef := RecRef.FIELD(11202);
        xFldRef := xRecRef.FIELD(11202);
        IF FldRef.VALUE <> xFldRef.VALUE THEN
          EXIT(TRUE);
      END;

      // Deferral cod (2016)
      IF Field.GET(DATABASE::"Purchase Line",1700) THEN BEGIN
        FldRef := RecRef.FIELD(1700);
        xFldRef := xRecRef.FIELD(1700);
        IF FldRef.VALUE <> xFldRef.VALUE THEN
          EXIT(TRUE);
      END;

      //Start date
      IF Field.GET(DATABASE::"Purchase Line",1702) THEN BEGIN
        FldRef := RecRef.FIELD(1702);
        xFldRef := xRecRef.FIELD(1702);
        IF FldRef.VALUE <> xFldRef.VALUE THEN
          EXIT(TRUE);
      END;

      // Job No
      IF Field.GET(DATABASE::"Purchase Line",45) THEN BEGIN
        FldRef := RecRef.FIELD(45);
        xFldRef := xRecRef.FIELD(45);
        IF FldRef.VALUE <> xFldRef.VALUE THEN
          EXIT(TRUE);
      END;

      // Job Task No
      IF Field.GET(DATABASE::"Purchase Line",1001) THEN BEGIN
        FldRef := RecRef.FIELD(1001);
        xFldRef := xRecRef.FIELD(1001);
        IF FldRef.VALUE <> xFldRef.VALUE THEN
          EXIT(TRUE);
      END;

      // First approver
      IF Field.GET(DATABASE::"Purchase Line",12013603) THEN BEGIN
        FldRef := RecRef.FIELD(12013603);
        xFldRef := xRecRef.FIELD(12013603);
        IF FldRef.VALUE <> xFldRef.VALUE THEN
          EXIT(TRUE);
      END;

      // Template rules
      IF Field.GET(DATABASE::"Purchase Line",12013660) THEN BEGIN
        FldRef := RecRef.FIELD(12013660);
        xFldRef := xRecRef.FIELD(12013660);
        IF FldRef.VALUE <> xFldRef.VALUE THEN
          EXIT(TRUE);
      END;

      // Invoice to Customer
      IF Field.GET(DATABASE::"Purchase Line",12013611) THEN BEGIN
        FldRef := RecRef.FIELD(12013611);
        xFldRef := xRecRef.FIELD(12013611);
        IF FldRef.VALUE <> xFldRef.VALUE THEN
          EXIT(TRUE);
      END;
      // Invoicing Amount
      IF Field.GET(DATABASE::"Purchase Line",12013612) THEN BEGIN
        FldRef := RecRef.FIELD(12013612);
        xFldRef := xRecRef.FIELD(12013612);
        IF FldRef.VALUE <> xFldRef.VALUE THEN
          EXIT(TRUE);
      END;
      // Start Date for Invoicing
      IF Field.GET(DATABASE::"Purchase Line",12013613) THEN BEGIN
        FldRef := RecRef.FIELD(12013613);
        xFldRef := xRecRef.FIELD(12013613);
        IF FldRef.VALUE <> xFldRef.VALUE THEN
          EXIT(TRUE);
      END;
      // Invoicing Code
      IF Field.GET(DATABASE::"Purchase Line",12013614) THEN BEGIN
        FldRef := RecRef.FIELD(12013614);
        xFldRef := xRecRef.FIELD(12013614);
        IF FldRef.VALUE <> xFldRef.VALUE THEN
          EXIT(TRUE);
      END;

      // Approval flag
      FldRef := RecRef.FIELD(12013601);
      xFldRef := xRecRef.FIELD(12013601);
      IF FldRef.VALUE <> xFldRef.VALUE THEN
        EXIT(TRUE);

      // Dimension
      IF Field.GET(DATABASE::"Purchase Line",480) THEN BEGIN
        FldRef := RecRef.FIELD(480);
        xFldRef := xRecRef.FIELD(480);
        IF FldRef.VALUE <> xFldRef.VALUE THEN
          EXIT(TRUE);
      END;
    END;

    PROCEDURE TestifApprovedDim@1100285066(_PurchLine@1100285002 : Record 39;_DocLine@1100285004 : Record 12013609;_AppSetup@1100285001 : Record 12013601;_SilentMode@1100285000 : Boolean);
    BEGIN
      // Test if Approved from Document dimension table
      IF NOT _SilentMode THEN
        IF AlreadyApprovedByActualUser(_PurchLine) THEN BEGIN
          IF NOT IsUserSuperior(USERID) THEN
            ERROR(STRSUBSTNO(EXF66,USERID));

          IF _DocLine.Flowstatus <> _DocLine.Flowstatus::Rejected THEN
            IF NOT _AppSetup."Suppress Approved Message" THEN
              IF NOT CONFIRM(EXF41) THEN
                ERROR(EXF73);
        END;
    END;

    PROCEDURE TestifApprovedPurchLineDim@1100285065(_PurchLine@1100285002 : Record 39);
    VAR
      _DocLine@1100285001 : Record 12013609;
      _AppSetup@1100285000 : Record 12013601;
    BEGIN
      // Test if Approved from Purchase Line Dim Update
      IF AlreadyApprovedByActualUser(_PurchLine) THEN BEGIN
        IF NOT IsUserSuperior(USERID) THEN
          ERROR(STRSUBSTNO(EXF66,USERID));

        _DocLine.RetrieveRecord(_DocLine,_PurchLine."Document Type",_PurchLine."Document No.",_PurchLine."Line No.");
        IF _DocLine.Flowstatus <> _DocLine.Flowstatus::Rejected THEN BEGIN
          _AppSetup.GET;
          IF NOT _AppSetup."Suppress Approved Message" THEN
            IF NOT CONFIRM(EXF41) THEN
              ERROR(EXF73);
        END;
      END;
    END;

    PROCEDURE CallGetReceipt@1100285068(PurchLine@1100285001 : Record 39) : Boolean;
    VAR
      ExFlowSetup@1100285000 : Record 12013601;
    BEGIN
      IF NOT ExFlowSetup.GET THEN
        EXIT(FALSE);
      IF ExFlowSetup."Order Applies-to" = ExFlowSetup."Order Applies-to"::"Receipts Lines" THEN
        EXIT(FALSE);

      IF (ExFlowSetup."Order Applies-to" = ExFlowSetup."Order Applies-to"::"Purch Order Lines") OR
         (ExFlowSetup."Order Applies-to" = ExFlowSetup."Order Applies-to"::"First Order then Receipt") THEN
        CODEUNIT.RUN(CODEUNIT::"ExFlow-Get PO from Purchase",PurchLine);

      EXIT(TRUE);
    END;

    PROCEDURE OrderNoLookup@1100285069(VAR PurchLine@1100285002 : Record 39);
    VAR
      PurchHeader@1100285001 : Record 38;
      PurchaseList@1100285000 : Page 53;
    BEGIN
      WITH PurchLine DO BEGIN
        PurchHeader.RESET;
        IF PurchHeader.SETCURRENTKEY("Pay-to Vendor No.") THEN;
        CASE "Document Type" OF
          "Document Type"::Invoice:
            PurchHeader.SETRANGE("Document Type", PurchHeader."Document Type"::Order);
          "Document Type"::"Credit Memo":
            PurchHeader.SETRANGE("Document Type", PurchHeader."Document Type"::"Return Order");
        END;

        PurchHeader.SETRANGE("Currency Code", "Currency Code");
        PurchHeader.SETRANGE("Pay-to Vendor No.", "Pay-to Vendor No.");
        IF "ExFlow Order No." <> '' THEN BEGIN
          PurchHeader.SETRANGE("No.","ExFlow Order No.");
          IF PurchHeader.FINDFIRST THEN
            PurchaseList.SETRECORD(PurchHeader);
          PurchHeader.SETRANGE("No.");
        END;

        PurchaseList.SETTABLEVIEW(PurchHeader);
        PurchaseList.LOOKUPMODE := TRUE;
        IF PurchaseList.RUNMODAL = ACTION::LookupOK THEN BEGIN
          PurchaseList.GETRECORD(PurchHeader);

          IF "ExFlow Order No." <> PurchHeader."No." THEN BEGIN
            "ExFlow Order No." := PurchHeader."No.";
            "ExFlow Order Line No." := 0;
          END;
        END;
      END;
    END;

    PROCEDURE OrderNoValidate@1100285071(VAR PurchLine@1100285002 : Record 39;xPurchLine@1100285003 : Record 39);
    VAR
      PurchHeader@1100285001 : Record 38;
    BEGIN
      WITH PurchLine DO BEGIN
        IF "ExFlow Order No." = '' THEN
          "ExFlow Order Line No." := 0
        ELSE BEGIN
          CASE "Document Type" OF
            "Document Type"::Invoice:
              PurchHeader.GET(PurchHeader."Document Type"::Order, "ExFlow Order No.");
            "Document Type"::"Credit Memo":
              PurchHeader.GET(PurchHeader."Document Type"::"Return Order", "ExFlow Order No.");
          END;

          IF "ExFlow Order No." <> xPurchLine."ExFlow Order No." THEN BEGIN
            "ExFlow Order No." := PurchHeader."No.";
            "ExFlow Order Line No." := 0;
          END;
        END;
      END;
    END;

    PROCEDURE OrderLineNoLookup@1100285072(VAR PurchLine@1100285002 : Record 39);
    VAR
      PurchLine2@1100285001 : Record 39;
    BEGIN
      WITH PurchLine DO BEGIN
        IF "ExFlow Order No." = '' THEN
          EXIT;

        PurchLine2.RESET;
        CASE "Document Type" OF
          "Document Type"::Invoice:
            PurchLine2.SETRANGE("Document Type", PurchLine2."Document Type"::Order);
          "Document Type"::"Credit Memo":
            PurchLine2.SETRANGE("Document Type", PurchLine2."Document Type"::"Return Order");
        END;

        PurchLine2.SETRANGE("Document No.", "ExFlow Order No.");
        IF "ExFlow Order Line No." <> 0 THEN BEGIN
          PurchLine2.SETRANGE("Line No.","ExFlow Order Line No.");
          IF PurchLine2.FINDFIRST THEN;
          PurchLine2.SETRANGE("Line No.");
        END;

        IF PAGE.RUNMODAL(0,PurchLine2) = ACTION::LookupOK THEN
          IF "ExFlow Order Line No." <> PurchLine2."Line No." THEN
            "ExFlow Order Line No." := PurchLine2."Line No.";
      END;
    END;

    PROCEDURE OrderLineNoValidate@1100285070(VAR PurchLine@1100285002 : Record 39;xPurchLine@1100285003 : Record 39);
    VAR
      PurchLine2@1100285000 : Record 39;
    BEGIN
      WITH PurchLine DO BEGIN
        IF ("ExFlow Order No." = '') OR ("ExFlow Order Line No." = 0) THEN
          EXIT;

        CASE "Document Type" OF
          "Document Type"::Invoice:
            PurchLine2.GET(PurchLine2."Document Type"::Order, "ExFlow Order No.", "ExFlow Order Line No.");
          "Document Type"::"Credit Memo":
            PurchLine2.GET(PurchLine2."Document Type"::"Return Order","ExFlow Order No.", "ExFlow Order Line No.");
        END;

        IF "ExFlow Order Line No." <> xPurchLine."Line No." THEN
          "ExFlow Order Line No." := PurchLine2."Line No.";
      END;
    END;

    PROCEDURE DeletePurchaseLine@1100285039(VAR PurchLine@1100285000 : Record 39;StatusCheckSuspended@1100285001 : Boolean;VAR PurchHeader@1100285004 : Record 38);
    VAR
      DocLine@1100285002 : Record 12013609;
      DocHead@1100285003 : Record 12013608;
    BEGIN
      WITH PurchLine DO BEGIN
        DocLine.LOCKTABLE;
        IF DocLine.RetrieveRecord(DocLine,"Document Type","Document No.","Line No.") THEN BEGIN
          IF (DocLine.Flowstatus = DocLine.Flowstatus::Approved) THEN BEGIN
            IF NOT StatusCheckSuspended THEN BEGIN
              IF CONFIRM(EXF75,TRUE) THEN
                DocLine.DELETE(TRUE)
              ELSE
                ERROR(EXF76);
            END ELSE
              DocLine.DELETE(TRUE);
          END ELSE
            DocLine.DELETE(TRUE);
        END;

        IF DocHead.RetrieveRecord(DocHead, "Document Type","Document No.") THEN
          AmountToDocHead(PurchLine,TRUE,PurchHeader);
      END;
    END;

    PROCEDURE CreateWebVendor@1100285021(ExDoc@1100285001 : Record 12013608);
    VAR
      WebVendorUsed@1100285000 : Record 12013631;
      WebSetting@1100285003 : Record 12057071;
      RecRef@1100285002 : RecordRef;
    BEGIN
      IF ExDoc."Vendor No." = '' THEN
        EXIT;

      IF NOT WebVendorUsed.GET(ExDoc."Vendor No.",COMPANYNAME) THEN BEGIN
        WebVendorUsed.INIT;
        WebVendorUsed."Vendor No." := ExDoc."Vendor No.";
        WebVendorUsed."Vendor Name" := ExDoc."Vendor Name";
        WebVendorUsed."Company Name" := COMPANYNAME;
        WebVendorUsed.INSERT;

        RecRef.GETTABLE(WebVendorUsed);
        WebSetting.TableChange(RecRef);
      END ELSE IF WebVendorUsed."Vendor Name" <> ExDoc."Vendor Name" THEN BEGIN
        WebVendorUsed."Vendor Name" := ExDoc."Vendor Name";
        WebVendorUsed.MODIFY;

        RecRef.GETTABLE(WebVendorUsed);
        WebSetting.TableChange(RecRef);
      END;
    END;

    PROCEDURE GetLatestCodingFromVendor@1100570013(ExPurchHeader@1100570003 : Record 12013587);
    VAR
      VendLedgerEntry@1100570002 : Record 25;
      i@1100570005 : Integer;
    BEGIN
      VendLedgerEntry.RESET;
      VendLedgerEntry.SETCURRENTKEY("Vendor No.","Posting Date","Currency Code");
      VendLedgerEntry.SETRANGE("Vendor No.",ExPurchHeader."Pay-to Vendor No.");
      VendLedgerEntry.SETRANGE("Document Type",VendLedgerEntry."Document Type"::Invoice);

      IF NOT VendLedgerEntry.FINDLAST THEN
        EXIT;

      i := 0;
      REPEAT
        i += 1;
      UNTIL InsertLinesWithGLAccounts(VendLedgerEntry,ExPurchHeader) OR (VendLedgerEntry.NEXT(-1) = 0) OR (i = 11);
    END;

    PROCEDURE InsertLinesWithGLAccounts@1100570014(VendLedgerEntry@1100570002 : Record 25;ExPurchHeader@1100570004 : Record 12013587) : Boolean;
    VAR
      PurchInvLine@1100570003 : Record 123;
      ExPurchLine@1100570000 : Record 12013588;
      EXF001@1100570001 : TextConst 'ENU=Get coding from invoice %1 for vendor %2;SVE=H„mta kontering fr†n faktura %1 f”r leverant”r %2';
      ExFlowSEMgt@1100285000 : Codeunit 12013598;
    BEGIN
      PurchInvLine.SETRANGE("Document No.",VendLedgerEntry."Document No.");
      PurchInvLine.SETRANGE(Type,PurchInvLine.Type::"G/L Account");
      ExFlowSEMgt.FilterPurchInvLineOnChargeType(PurchInvLine);
      PurchInvLine.SETFILTER(Amount,'<>0');
      IF PurchInvLine.ISEMPTY THEN
        EXIT(FALSE);

      IF NOT CONFIRM(EXF001,FALSE,VendLedgerEntry."Document No.",ExPurchHeader."Pay-to Name") THEN
        EXIT(TRUE);

      ExPurchLine.SETRANGE("Document Type",ExPurchHeader."Document Type");
      ExPurchLine.SETRANGE("Inbound Document No.",ExPurchHeader."Inbound Document No.");
      IF NOT ExPurchLine.FINDLAST THEN BEGIN
        CLEAR(ExPurchLine);
        ExPurchLine."Document Type" := ExPurchHeader."Document Type";
        ExPurchLine."Inbound Document No." := ExPurchHeader."Inbound Document No.";
      END;

      IF PurchInvLine.FINDSET THEN
        REPEAT
          ExPurchLine.INIT;
          ExPurchLine."Line No." += 10000;
          ExPurchLine.INSERT(TRUE);

          ExPurchLine.Type := PurchInvLine.Type;
          ExPurchLine.VALIDATE("No.",PurchInvLine."No.");
          ExPurchLine.Description := PurchInvLine.Description;
          ExPurchLine.VALIDATE(Quantity,PurchInvLine.Quantity);
          ExPurchLine.VALIDATE("Direct Unit Cost",PurchInvLine."Direct Unit Cost");
          ExPurchLine."VAT Prod. Posting Group" := PurchInvLine."VAT Prod. Posting Group";
          ExPurchLine.VALIDATE("VAT Bus. Posting Group",PurchInvLine."VAT Bus. Posting Group");

          ExPurchLine."Shortcut Dimension 1 Code" := PurchInvLine."Shortcut Dimension 1 Code";
          ExPurchLine."Shortcut Dimension 2 Code" := PurchInvLine."Shortcut Dimension 2 Code";
          ExPurchLine."Dimension Set ID" := PurchInvLine."Dimension Set ID";
          ExPurchLine.MODIFY(TRUE);
        UNTIL PurchInvLine.NEXT = 0;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE UpdateOrderInfo@1100285035(VAR DocLine@1100285000 : Record 12013609;VAR PurchLine@1100285001 : Record 39);
    VAR
      PurchOrderLine@1100285003 : Record 39;
      ReceiptLine@1100285002 : Record 121;
    BEGIN
      IF PurchLine."ExFlow Order No." <> '' THEN
        IF PurchOrderLine.GET(PurchOrderLine."Document Type"::Order, PurchLine."ExFlow Order No.", PurchLine."ExFlow Order Line No.") THEN BEGIN
          DocLine."Order No." := PurchOrderLine."Document No.";
          DocLine."Order Unit Cost" := PurchOrderLine."Direct Unit Cost";
          DocLine."Order Line No." := PurchOrderLine."Line No.";
        END;

      IF (PurchLine."Receipt No." <> '') AND (DocLine."Order No." = '')   THEN
          IF ReceiptLine.GET(PurchLine."Receipt No.",PurchLine."Receipt Line No.") THEN BEGIN
            DocLine."Order No." := ReceiptLine."Order No.";
            DocLine."Order Line No." := ReceiptLine."Order Line No.";
            IF PurchOrderLine.GET(PurchOrderLine."Document Type"::Order,ReceiptLine."Order No.",ReceiptLine."Order Line No.") THEN
              DocLine."Order Unit Cost" := PurchOrderLine."Direct Unit Cost"
            ELSE
              DocLine."Order Unit Cost" := ReceiptLine."Direct Unit Cost";
          END;
    END;

    PROCEDURE ImportDocument@1100285074(VAR ExDoc2@1100285000 : Record 12013612);
    VAR
      TempFileName@1100285001 : Text[250];
      FileManagement@1100285003 : Codeunit 419;
      TempBlob@1100285004 : Record 99008535;
    BEGIN
      TempFileName := ExDoc2."Image Name";

      IF TempFileName <> '' THEN BEGIN
        IF FileManagement.ServerFileExists(TempFileName) THEN
          FileManagement.BLOBImportFromServerFile(TempBlob,TempFileName)
        ELSE
          FileManagement.BLOBImportFromServerFile(TempBlob,FileManagement.UploadFileSilent(TempFileName));
        ExDoc2."Image Blob" := TempBlob.Blob;
      END;
    END;

    PROCEDURE CheckIfApproved@1100285076(VAR PurchaseLine@1100285000 : Record 39) : Boolean;
    BEGIN
      IF AlreadyApprovedByActualUser(PurchaseLine) THEN
        ERROR(EXF79);
    END;

    LOCAL PROCEDURE IsFirstApproverInserted@1100285080(PurchLine@1100285001 : Record 39;DocLine@1100285002 : Record 12013609;VAR LastApprover@1100285007 : Code[10];VAR NextLine@1100285003 : Integer;VAR NumberOfApprovers@1100285004 : Integer;VAR First@1100285005 : Boolean;Show@1100285008 : Boolean) : Boolean;
    VAR
      EXUserGroup@1100285000 : Record 12013606;
      EXDocLineApp@1100285006 : Record 12013610;
    BEGIN
      IF PurchLine."First Approver" = '' THEN
        EXIT(FALSE);

      IF ExFlowSetup."Copy First Approver to Flow" = ExFlowSetup."Copy First Approver to Flow"::Never THEN
        EXIT(FALSE);

      IF (ExFlowSetup."Copy First Approver to Flow" = ExFlowSetup."Copy First Approver to Flow"::"All Documents") THEN BEGIN
        EXUserGroup.GET(PurchLine."First Approver");
        InsertApprover(DocLine,EXUserGroup,NextLine,First,EXDocLineApp.Source::"Copied from First Approver",LastApprover,'','',ExFlowSetup);

        NextLine := NextLine + 10000;
        NumberOfApprovers := NumberOfApprovers + 1;

        EXIT(TRUE);
      END;

      IF (ExFlowSetup."Copy First Approver to Flow" = ExFlowSetup."Copy First Approver to Flow"::"Invoices Only") AND
          (PurchLine."Document Type" IN [PurchLine."Document Type"::Invoice,PurchLine."Document Type"::"Credit Memo"]) THEN BEGIN
        EXUserGroup.GET(PurchLine."First Approver");
        InsertApprover(DocLine,EXUserGroup,NextLine,First,EXDocLineApp.Source::"Copied from First Approver",LastApprover,'','',ExFlowSetup);

        NextLine := NextLine + 10000;
        NumberOfApprovers := NumberOfApprovers + 1;

        EXIT(TRUE);
      END;

      IF (ExFlowSetup."Copy First Approver to Flow" = ExFlowSetup."Copy First Approver to Flow"::"Orders & Requisitions Only") AND
          (PurchLine."Document Type" IN [PurchLine."Document Type"::Quote,PurchLine."Document Type"::Order]) THEN BEGIN
        EXUserGroup.GET(PurchLine."First Approver");
        InsertApprover(DocLine,EXUserGroup,NextLine,First,EXDocLineApp.Source::"Copied from First Approver",LastApprover,'','',ExFlowSetup);

        NextLine := NextLine + 10000;
        NumberOfApprovers := NumberOfApprovers + 1;

        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE GetEXReplacementUserGroup@1100285088(VAR ExUserGroup@1100285000 : Record 12013606;TemplateRule@1100285005 : Record 12013645;VAR TempDimValue@1100285002 : TEMPORARY Record 349;JobNo@1100285004 : Code[20]);
    VAR
      Job@1100285001 : Record 11072003;
      DimOwner@1100285003 : Record 12013655;
    BEGIN
      IF ExUserGroup."Replacement type" = ExUserGroup."Replacement type"::" " THEN
        EXIT;

      IF ExUserGroup."Replacement type" = ExUserGroup."Replacement type"::"Person responsible" THEN BEGIN
        CLEAR(ExUserGroup);
        IF Job.GET(JobNo) THEN
          IF ExUserGroup.GET(Job."Person Responsible") THEN
            EXIT;
      END;

      //Must be Dimension owner 1 or 2
      DimOwner.RESET;
      IF ExUserGroup."Replacement type" = ExUserGroup."Replacement type"::"Dimension owner 1" THEN
        DimOwner.SETRANGE("Approver Type", DimOwner."Approver Type"::"Dimension Owner 1")
      ELSE IF ExUserGroup."Replacement type" = ExUserGroup."Replacement type"::"Dimension owner 2" THEN
        DimOwner.SETRANGE("Approver Type", DimOwner."Approver Type"::"Dimension Owner 2");

      IF TemplateRule."Dimension Code 1" <> '' THEN
        DimOwner.SETRANGE("Dimension Code", TemplateRule."Dimension Code 1")
      ELSE IF TemplateRule."Dimension Code 2" <> '' THEN
        DimOwner.SETRANGE("Dimension Code", TemplateRule."Dimension Code 2");

      CLEAR(ExUserGroup);
      IF TemplateRule."Dimension Code 1" <> '' THEN BEGIN
        TempDimValue.RESET;
        TempDimValue.SETRANGE("Dimension Code", TemplateRule."Dimension Code 1");
        IF TempDimValue.FINDFIRST THEN BEGIN
          DimOwner.SETRANGE("Dimension Value Code", TempDimValue.Code);
          IF DimOwner.FINDFIRST THEN
            IF ExUserGroup.GET(DimOwner."Approver Group") THEN
              EXIT;
        END;
      END ELSE IF TemplateRule."Dimension Code 2" <> '' THEN BEGIN
        TempDimValue.RESET;
        TempDimValue.SETRANGE("Dimension Code", TemplateRule."Dimension Code 2");
        IF TempDimValue.FINDFIRST THEN BEGIN
          DimOwner.SETRANGE("Dimension Value Code", TempDimValue.Code);
          IF DimOwner.FINDFIRST THEN
            IF ExUserGroup.GET(DimOwner."Approver Group") THEN
              EXIT;
        END;
      END;
    END;

    BEGIN
    {
      191126 ORANGO.FH ##26502 REKAB Added Vendor to GenJourLine
    }
    END.
  }
}

