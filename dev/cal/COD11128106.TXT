OBJECT Codeunit 11128106 Creditsafe Mgmt
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PSSE;
  }
  PROPERTIES
  {
    OnRun=VAR
            lvText@1100285500 : Text;
          BEGIN
            IF NOT CreditDataSetup.GET THEN CreditDataSetup.INSERT;
            IF NOT CreditDataSetup."CreditSafe Enabled" THEN EXIT;

            IF AddNewCustomersOnMonitorAndDecisionDirect THEN EXIT; // 170313

            MonitorCompanies;

            UpdateChangedCompanies;
          END;

  }
  CODE
  {
    VAR
      CreditSafeInfo@1100285048 : Record 11128106;
      CreditSafeLog@1100285050 : Record 11128108;
      Filename@1100285032 : Text[1024];
      enumerator@1100285031 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IEnumerator" RUNONCLIENT;
      JournalBatchName@1100285030 : Code[50];
      JournalTemplateName@1100285029 : Code[50];
      GenJournalLine@1100285028 : Record 81;
      LineNo@1100285027 : Integer;
      xmldoc@1100285026 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      xmlNode2@1100285024 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      xmlNode3@1100285023 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      xmlNode4@1100285022 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      xmlNode5@1100285058 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      xmlNode6@1100285059 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      xmlNodeList@1100285021 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      xmlRegister@1100285042 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      xmlOrder@1100285041 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      TagName@1100285020 : Text[50];
      TagName2@1100285019 : Text[30];
      TagName3@1100285018 : Text[30];
      TagName4@1100285056 : Text[30];
      TagName5@1100285057 : Text[30];
      Value@1100285017 : Text[1024];
      haschild@1100285016 : Boolean;
      haschild2@1100285015 : Boolean;
      haschild3@1100285014 : Boolean;
      haschild4@1100285061 : Boolean;
      haschild5@1100285060 : Boolean;
      int@1100285013 : Integer;
      int2@1100285012 : Integer;
      int3@1100285011 : Integer;
      int4@1100285063 : Integer;
      int5@1100285062 : Integer;
      InvoiceNo@1100285010 : Code[30];
      CustomerNo@1100285009 : Code[30];
      totalAmount@1100285008 : Decimal;
      VoucherAccount@1100285007 : Code[10];
      VoucherAmount@1100285006 : Decimal;
      costCentre@1100285005 : Code[30];
      project@1100285004 : Code[30];
      SkipFirstVoucher@1100285003 : Boolean;
      FilePath@1100285002 : Text[1024];
      Count@1100285001 : Integer;
      FelDim@1100285000 : Boolean;
      XmlProcessingInstruction@1100285036 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlProcessingInstruction";
      soapEnvelope@1100285038 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      soapBody@1100285037 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      XmlElement@1100285040 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      xmlTextNode@1100285039 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlText";
      soapEnvelope2@1100285044 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      soapBody2@1100285043 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      soapBody3@1100285045 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      xmlAccount@1100285052 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      CreditDataSetup@1100285046 : Record 11128107;
      xmlNode@1100285025 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      txtCOCNoAlreadyExists@1100285049 : TextConst 'ENU=The COC Registration No. Specified already exists for Customer No. %1.;NOR=Det spesifiserte COC-registreingsnummeret finnes allerede for kundenr. %1.;SVE=Person-/organisationsnumret Ñr redan tilldelat till kundnr %1.';
      txtCreditCheckDone@1100285051 : TextConst 'ENU=Credit Check done. Amount: %1 Approved: %2;NOR=Kredittsjekk gjennomfõrt. Belõp: %1. Godkjent: %2;SVE=Kreditupplysning genomfîrd. Belopp: %1 GodkÑnt: %2';
      cust@1100285055 : Record 18;
      txtErrorBasicData@1100285033 : TextConst 'ENU=Credit check with basic data could not be done.;NOR=Kredittsjekk med grunnleggende data kunne ikke gjennomfõres;SVE=Kredikontroll med basdata kunde inte genomfîras.';
      txtAlreadyMonitored@1100285034 : TextConst 'ENU=The company is already monitored.;NOR=Selskapet er allerede overvÜket;SVE=Fîretag Ñr redan under bevakning.';
      txtAlreadyNotMonitored@1100285054 : TextConst 'ENU=The company is not monitored.;NOR=Selskapet er ikke overvÜket;SVE=Fîretag Ñr inte under bevakning.';
      txtCanNotChange@1100285035 : TextConst 'ENU=Can not change Company Monitor status. Creditsafe returned the following error: %1;NOR=Kan ikke endre status for selskapsovervÜkning. CreditSafe gav feil: %1;SVE=Det gick inte att Ñndra fîretagsbevakningsstatus. CreditSafe retunerade fîljande fel: %1';
      txtCreditOK@1100285064 : TextConst 'ENU=Credit Check done.;NOR=Kredittsjekk gjennomfõrt.;SVE=Kreditkontroll utfîrd.';
      txtCreditAmount@1100285065 : TextConst 'ENU=Credit Amount must be larger than 0.;NOR=Kredittbelõpet mÜ vëre stõrre enn 0;SVE=ônskat kreditbelopp mÜste vara mer Ñn 0.';
      txtCancelMonitorFirst@1100285066 : TextConst 'ENU=The company is under CreditSafe mointoring. Please remove monitoring before.;NOR=Selskapet er under CreditSafe-overvÜkning. Fjern denne overvÜkningen fõrst.;SVE=Fîretaget Ñr under CreditSafe-bevakning. VÑnligen stÑng av bevakningen fîrst.';
      txtCompanyAdded@1100285067 : TextConst 'ENU=Added as monitored at CreditSafe.;NOR=Lagt til som overvÜket med CreditSafe;SVE=Lagt till pÜ bevakning hos CreditSafe.';
      txtCompanyRemoved@1100285068 : TextConst 'ENU=Deleted as monitored at CreditSafe.;NOR=Fjernet som overvÜket med CreditSafe;SVE=Borttaget frÜn bevakning hos CreditSafe.';
      txtWrongCOCNo@1100285500 : TextConst 'ENU=Number must be on the format XXXXXX-NNNN or YYYYMMDD-NNNN for Sweden.;NOR=Tallet mÜ vëre av formatet XXXXXX-NNNN eller YYYYMMDD-NNNN for Sverige.;SVE=Numret mÜste ha formatet XXXXXX-NNNN eller èèèèMMDD-NNNN fîr Sverige.';
      txtWrongCOCNoNO@1100285509 : TextConst 'ENU=Number must be on the format XXXXXXXXX for Norway;NOR=Tallet mÜ vëre av formatet XXXXXXXXX for Norge;SVE=Numret mÜste ha formatet XXXXXXXXX fîr Norge';
      txtDelete@1100285501 : TextConst 'ENU=This deletes all CreditSafe information about the customer. Continue?;NOR=Dette vil slette all CreditSafe-informasjon om kunden. Fortsette?;SVE=Detta raderar all kreditinformation frÜn CreditSafe fîr kunden. Vill du fortsÑtta?';
      D@1100285502 : Dialog;
      txtStatus@1100285503 : TextConst 'ENU=Getting Credit Data;NOR=Henter Kredittdata;SVE=HÑmtar kreditinformation';
      CustomerName@1100285504 : Text;
      CustomerAddress@1100285505 : Text;
      CustomerPostCode@1100285506 : Code[30];
      CustomerCity@1100285507 : Text;
      CustomerType@1100285508 : Text;
      CustomerVATNo@1100285510 : Text;

    LOCAL PROCEDURE DotNetCall@1100285503(IncomingXML@1100285506 : Text;URL@1100285507 : Text;Header@1100285508 : Text) : Text;
    VAR
      HttpWebRequest@1100285505 : DotNet "'System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebRequest";
      Credential@1100285504 : DotNet "'System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.NetworkCredential";
      HttpWebResponse@1100285503 : DotNet "'System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.WebResponse";
      MemoryStream@1100285502 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
      XMLRequestDoc@1100285501 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLResponseDoc@1100285500 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      XMLRequestDoc := XMLRequestDoc.XmlDocument();
      XMLRequestDoc.LoadXml(IncomingXML);

      WSCall(URL, Header, XMLRequestDoc);

      // CLEAR(HttpServer);
      // HttpServer := HttpServer.ServerXMLHTTPClass();
      // HttpServer.open('POST',URL,FALSE,'','');
      // HttpServer.setRequestHeader('Content-Type', 'text/xml; charset=utf-8');
      // HttpServer.setRequestHeader('SOAPAction', Header);
      // HttpServer.send(XMLRequestDoc.InnerXml);
      //
      //
      // IF HttpServer.status <> 200 THEN
      // ERROR('Connection to CreditSafe failed. Status = %1, text = %2',HttpServer.status,  HttpServer.statusText);

      //XMLRequestDoc.LoadXml(HttpServer.responseText());
      EXIT(XMLRequestDoc.InnerXml);
    END;

    LOCAL PROCEDURE WSCall@1000000000(URL@1100285000 : Text;Header@1100285001 : Text;VAR XML@1000000001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") : Boolean;
    VAR
      HttpWebRequest@1100285007 : DotNet "'System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebRequest";
      HttpWebResponse@1100285006 : DotNet "'System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.WebResponse";
      Credential@1100285004 : DotNet "'System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.NetworkCredential";
      MemoryStream@1100285003 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
      XML2@1100285300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      StreamWriter@1000000000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StreamWriter";
      String@1000000002 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
    BEGIN


      HttpWebRequest := HttpWebRequest.Create(URL);
      HttpWebRequest.Timeout := 30000;

      String := XML.InnerXml;

      HttpWebRequest.UseDefaultCredentials(TRUE);

      HttpWebRequest.Method := 'POST';
      HttpWebRequest.ContentType := 'text/xml; Charset=UTF-8';
      HttpWebRequest.Headers.Add('SOAPAction', Header);

      CLEAR(MemoryStream);
      StreamWriter := StreamWriter.StreamWriter(HttpWebRequest.GetRequestStream);
      StreamWriter.Write(String);
      StreamWriter.Flush;
      StreamWriter.Close;


      HttpWebResponse := HttpWebRequest.GetResponse;
      MemoryStream := HttpWebResponse.GetResponseStream;
      XML.Load(MemoryStream);

      MemoryStream.Flush;
      MemoryStream.Close;
    END;

    PROCEDURE AutoLogin@1100285501(VAR CustomerRec@1100285500 : Record 18);
    VAR
      P1@1100285505 : Text[50];
      P2@1100285504 : Text[50];
      P3@1100285503 : Text[20];
      P4@1100285502 : Text[20];
      P5@1100285501 : Text[10];
    BEGIN
      // 140205 *** <<<
      IF NOT CreditDataSetup.GET THEN EXIT;
      IF NOT CreditDataSetup."CreditSafe Enabled" THEN EXIT;
      IF NOT CreditSafeInfo.GET(CustomerRec."No.") THEN EXIT;

      CreditDataSetup.TESTFIELD("User ID AutoLogin");
      CreditDataSetup.TESTFIELD("Password Autologin");

      P1:=CreditDataSetup."User ID AutoLogin"; //UserID from setup table
      P2:=CreditDataSetup."Password Autologin"; //Password from setup table
      P5:='';  //transactionID (?)

      IF CreditSafeInfo."Legal Type" = CreditSafeInfo."Legal Type"::Juridical THEN BEGIN
        P3 := CustomerRec."COC Registration No.";
        HYPERLINK(STRSUBSTNO(CreditDataSetup."URL AutoLogin Company",P1,P2,P3,P5));

      END ELSE BEGIN
        P4 := CustomerRec."COC Registration No.";
        HYPERLINK(STRSUBSTNO(CreditDataSetup."URL AutoLogin Person",P1,P2,P4,P5));
      END;
      // 140205 *** >>>
    END;

    PROCEDURE ErrorIfCocNoRemovedIsUnderMonitor@1000000001(xCocNo@1000000000 : Text);
    VAR
      CreditsafeSetup@1000000002 : Record 11128107;
      CreditsafeCreditInformation@1000000003 : Record 11128106;
    BEGIN
      IF xCocNo = '' THEN EXIT;
      //>> 180315 ORANGO.FH
      xCocNo := DELCHR(xCocNo,'=',DELCHR(xCocNo,'=','0123456789'));
      //<< 180315 ORANGO.FH
      IF NOT CreditsafeSetup.GET THEN EXIT;
      IF NOT CreditsafeSetup."CreditSafe Enabled" THEN EXIT;

      CreditsafeCreditInformation.SETCURRENTKEY("COC Registration No.");
      CreditsafeCreditInformation.SETRANGE("COC Registration No.", xCocNo);
      IF CreditsafeCreditInformation.ISEMPTY THEN
        EXIT;

      IF GUIALLOWED THEN BEGIN
        IF NOT CONFIRM(txtDelete) THEN ERROR('');
      END;

      CreditsafeCreditInformation.FINDSET;
      REPEAT
        //>> 180315 ORANGO.FH
        IF (CreditsafeCreditInformation.Monitoring <> CreditsafeCreditInformation.Monitoring::"No monitoring") THEN
          ERROR(txtCancelMonitorFirst);
        CreditSafeLog.SETRANGE("Customer No.", CreditsafeCreditInformation."Customer No.");
        CreditSafeLog.DELETEALL;
        CreditsafeCreditInformation.DELETE(FALSE);
        //CreditsafeCreditInformation.DELETE(TRUE);
        //<< 180315 ORANGO.FH
      UNTIL CreditsafeCreditInformation.NEXT = 0;
    END;

    LOCAL PROCEDURE ErrorIfWrongCocNo@1000000003(VAR Customer@1000000000 : Record 18);
    VAR
      CocNo@1000000001 : Text;
      CreditsafeCreditInformation@1000000002 : Record 11128106;
    BEGIN
      Customer.TESTFIELD("COC Registration No.");
      CocNo := Customer."COC Registration No.";
      CocNo := DELCHR(CocNo,'=',DELCHR(CocNo,'=','0123456789'));
      CreditsafeCreditInformation.GET(Customer."No.");

      CASE CreditsafeCreditInformation.Country OF
        CreditsafeCreditInformation.Country::Sweden:
            IF ((STRLEN(CocNo) <> 10) AND (STRLEN(CocNo) <> 12)) THEN ERROR(txtWrongCOCNo);
        CreditsafeCreditInformation.Country::Norway:
            IF ((STRLEN(CocNo) <> 9)) THEN ERROR(txtWrongCOCNoNO);
        ELSE
            ; // No check
      END;
    END;

    PROCEDURE ErrorIfCocNoAlreadyExistsOnAnotherCustomer@1000000006(VAR Customer@1000000000 : Record 18);
    VAR
      CocNo@1000000001 : Text;
      CreditsafeCreditInformation@1000000002 : Record 11128106;
      DoubleCustNoFound@1000000003 : Text;
    BEGIN
      CocNo := Customer."COC Registration No.";
      CocNo := DELCHR(CocNo,'=',DELCHR(CocNo,'=','0123456789'));

      CreditsafeCreditInformation.SETFILTER("Customer No.", '<>%1&<>%2', Customer."No.", ''); // 171204 New Critera <>'' - no check on blank customers
      CreditsafeCreditInformation.SETRANGE("COC Registration No.", CocNo);
      IF CreditsafeCreditInformation.ISEMPTY THEN
        EXIT;
      CreditsafeCreditInformation.FINDSET;
      DoubleCustNoFound := '';
      REPEAT
        DoubleCustNoFound += CreditsafeCreditInformation."Customer No." + ', ';
      UNTIL CreditsafeCreditInformation.NEXT = 0;
      DoubleCustNoFound := COPYSTR(DoubleCustNoFound, 1, STRLEN(DoubleCustNoFound) - 2);
      ERROR(txtCOCNoAlreadyExists, DoubleCustNoFound);
    END;

    LOCAL PROCEDURE ErrorIfNoCreditAmount@1000000011(VAR Customer@1000000000 : Record 18);
    VAR
      CreditsafeCreditInformation@1000000001 : Record 11128106;
    BEGIN
      IF NOT CreditsafeCreditInformation.GET(Customer."No.") THEN EXIT;
      IF (CreditsafeCreditInformation."Credit Amount" <= 0) THEN
        ERROR(txtCreditAmount);
    END;

    PROCEDURE AddCreditSafeInformationIfNotExistsAndSetCreditAmount@1000000002(VAR Customer@1000000000 : Record 18;CreditLimitAmount@1000000003 : Decimal);
    VAR
      CocNo@1000000001 : Text;
      CreditsafeSetup@1000000002 : Record 11128107;
    BEGIN
      IF Customer."No." = '' THEN EXIT; //171204 ITERO.MH Exit if Customer No. = '' i.e. under Insert
      IF NOT CreditsafeSetup.GET THEN EXIT;
      IF NOT CreditsafeSetup."CreditSafe Enabled" THEN EXIT;

      CocNo := Customer."COC Registration No.";
      CocNo := DELCHR(CocNo,'=',DELCHR(CocNo,'=','0123456789'));

      IF NOT CreditSafeInfo.GET(Customer."No.") THEN BEGIN
        CreditSafeInfo.INIT;
        CreditSafeInfo."Customer No." := Customer."No.";
        IF IsPerson(CocNo) THEN
          CreditSafeInfo."Legal Type" := CreditSafeInfo."Legal Type"::Natural;
        IF IsAB(CocNo) THEN
          CreditSafeInfo."Company Type" := CreditSafeInfo."Company Type"::Inc;
        CreditSafeInfo.Country   := CreditsafeSetup."Standard Country";
        CreditSafeInfo.INSERT(TRUE);
      END;
      CreditSafeInfo."Credit Amount" := CreditLimitAmount;
      CreditSafeInfo."COC Registration No." := CocNo;
      CreditSafeInfo.MODIFY;
    END;

    PROCEDURE ConfirmDeleteCreditInfo@1100285019(CustomerNo@1100285000 : Code[20]);
    BEGIN
      IF NOT CreditSafeInfo.GET(CustomerNo) THEN EXIT;

      IF GUIALLOWED THEN BEGIN
        IF NOT CONFIRM(txtDelete) THEN ERROR('');
      END;

      // Check if COC No is under Monitor
      IF (CreditSafeInfo.Monitoring <> CreditSafeInfo.Monitoring::"No monitoring") THEN
        ERROR(txtCancelMonitorFirst);

      CreditSafeInfo.DELETE;
      CreditSafeLog.SETRANGE("Customer No.", CustomerNo);
      CreditSafeLog.DELETEALL;
    END;

    PROCEDURE GetAll@1100285025(VAR Customer@1100285000 : Record 18;CreditSafeCreditLimitAmount@1000000000 : Decimal);
    BEGIN
      IF NOT CreditDataSetup.GET THEN
        CreditDataSetup.INSERT;
      IF NOT CreditDataSetup."CreditSafe Enabled" THEN EXIT;
      AddCreditSafeInformationIfNotExistsAndSetCreditAmount(Customer, CreditSafeCreditLimitAmount);

      COMMIT;

      ErrorIfWrongCocNo(Customer);
      ErrorIfCocNoAlreadyExistsOnAnotherCustomer(Customer);
      ErrorIfNoCreditAmount(Customer);

      D.OPEN(txtStatus + '#1#########');

      D.UPDATE(1, 'BasicData');
      GetBasicData(Customer);
      D.UPDATE(1, 'DecisionDirect');
      //>>140318                                                               // 140415*******************************
      IF (CreditSafeInfo."Legal Type" <> CreditSafeInfo."Legal Type"::Natural) OR (CreditDataSetup."Enable Creditcheck Private" = TRUE) THEN
      //<<
        GetDecisionDirect(Customer);

      IF NOT (CreditDataSetup."Autmatic Monitoring") THEN BEGIN
        D.CLOSE;
        EXIT;
      END;
      D.UPDATE(1, 'CompanyMonitor');

      IF (CreditSafeInfo.Monitoring = CreditSafeInfo.Monitoring::"No monitoring") THEN
        AddCompanyToMonitor(Customer, FALSE);
      //ELSE                             IME-415 removed message
      //  MESSAGE(txtAlreadyMonitored);
      D.CLOSE;
    END;

    PROCEDURE GetBasicData@1100285026(VAR Customer@1100285000 : Record 18);
    BEGIN
      // 150529 <<
      CustomerName := '';
      CustomerAddress := '';
      CustomerPostCode := '';
      CustomerCity := '';
      CustomerVATNo := '';
      // 150229 >>

      CreditSafeInfo.GET(Customer."No.");
      CreditDataSetup.GET;

      IF NOT WSGetDataReq THEN ERROR(txtErrorBasicData);

      //Get record again
      CreditSafeInfo.GET(Customer."No.");

      // Update 140219 - added IF-sentence before validation. <<
      // 150331 If Name is not blank - change whole address
      IF (CustomerName <> '') THEN BEGIN
         Customer.VALIDATE(Name, COPYSTR(CustomerName, 1, 50));
         Customer.VALIDATE(Address, COPYSTR(CustomerAddress, 1, 50));
         IF (STRLEN(CustomerAddress) > 50) THEN
            Customer.VALIDATE("Address 2", COPYSTR(CustomerAddress, 51, 50))
         ELSE
            Customer.VALIDATE("Address 2", '');
         Customer."Post Code" := CustomerPostCode;
         Customer.VALIDATE(City, COPYSTR(CustomerCity, 1, 30));
      END;
      // >>

      CreditSafeInfo."Legal Type" := CreditSafeInfo."Legal Type"::Juridical;
      IF IsPerson(Customer."COC Registration No.") THEN
        CreditSafeInfo."Legal Type" := CreditSafeInfo."Legal Type"::Natural;
      CreditSafeInfo.MODIFY;

      // 150327 Added validation of VAT Registration No. from CreditSafe.

      //>>200113
      IF CustomerVATNo <> '' THEN
        Customer.VALIDATE("VAT Registration No.", CustomerVATNo)
      ELSE IF (CustomerVATNo = '') AND (Customer."VAT Registration No." = 'via momsgrupp' )THEN //<<200113
        Customer.VALIDATE("VAT Registration No.", CustomerVATNo);

      //IF (CreditSafeInfo."Legal Type" = CreditSafeInfo."Legal Type"::Juridical) THEN
      //  Customer.VALIDATE(Customer."VAT Registration No.", 'SE' + CreditSafeInfo."COC Registration No." + '01');

      Customer.MODIFY(TRUE);
      IF (CustomerName <> '') THEN // 150529
         UpdateContactForCustomer(Customer); // 150428 ITERO.MH
    END;

    PROCEDURE GetDecisionDirect@1100285027(VAR Customer@1100285000 : Record 18);
    BEGIN
      CreditSafeInfo.GET(Customer."No.");
      CreditDataSetup.GET;

      IF (CreditSafeInfo."Credit Amount" <= 0) THEN
        CreditSafeInfo."Credit Amount" := 1000;

      IF WSDecisionDirectReq THEN;
      //   IF (GUIALLOWED) THEN MESSAGE(txtCreditOK);
    END;

    PROCEDURE AddLogEntry@1100285000(CustomerNo@1100285000 : Code[20];Text@1100285001 : Text[100];Date@1100285002 : Date);
    VAR
      lvCreditSafeLog@1100285003 : Record 11128108;
    BEGIN
      lvCreditSafeLog.SETRANGE("Customer No.", CustomerNo);
      IF lvCreditSafeLog.FINDLAST THEN
        lvCreditSafeLog."Line No." := lvCreditSafeLog."Line No." + 1
      ELSE BEGIN
        lvCreditSafeLog."Line No." := 1;
        lvCreditSafeLog."Customer No." := CustomerNo;
      END;
      lvCreditSafeLog."Control Date" := TODAY;
      lvCreditSafeLog."Control Time" := TIME;
      lvCreditSafeLog."Update Text" := Text;
      lvCreditSafeLog."Update Date" := Date;
      lvCreditSafeLog.INSERT;
    END;

    PROCEDURE AddCompanyToMonitor@1100285028(VAR Customer@1100285000 : Record 18;FromRec@1100285001 : Boolean);
    BEGIN
      CreditSafeInfo.GET(Customer."No.");
      CreditDataSetup.GET;
      IF (CreditSafeInfo."Legal Type" = CreditSafeInfo."Legal Type"::Natural) THEN EXIT; // 140205


      IF (NOT FromRec AND (CreditSafeInfo.Monitoring <> CreditSafeInfo.Monitoring::"No monitoring")) THEN EXIT;

      IF NOT WSMonitoringReq(0, CreditSafeInfo."COC Registration No.", FALSE) THEN BEGIN
        //>> ORANGO.FH 180412 IME1032
        ERROR(txtAlreadyNotMonitored);

        //MESSAGE(txtAlreadyNotMonitored);
        //EXIT;
        //<< IME1032
      END;

      IF FromRec THEN EXIT;

      IF (CreditSafeInfo."Company Type" = CreditSafeInfo."Company Type"::Inc) THEN BEGIN
         CreditSafeInfo.Monitoring := CreditSafeInfo.Monitoring::Full;
      END ELSE BEGIN
         CreditSafeInfo.Monitoring := CreditSafeInfo.Monitoring::Basic;
      END;
      CreditSafeInfo.MODIFY(TRUE);
    END;

    PROCEDURE RemoveCompanyToMonitor@1100285012(VAR Customer@1100285000 : Record 18;FromRec@1100285001 : Boolean);
    BEGIN
      CreditSafeInfo.GET(Customer."No.");
      CreditDataSetup.GET;
      IF (NOT FromRec AND (CreditSafeInfo.Monitoring = CreditSafeInfo.Monitoring::"No monitoring")) THEN ERROR(txtAlreadyMonitored);
      IF NOT WSMonitoringReq(1, CreditSafeInfo."COC Registration No.", FALSE) THEN ERROR(txtCanNotChange);
      IF FromRec THEN EXIT;
      CreditSafeInfo.Monitoring := CreditSafeInfo.Monitoring::"No monitoring";
      CreditSafeInfo."Reactivation Required" := TRUE;
      CreditSafeInfo.MODIFY(TRUE);
    END;

    PROCEDURE MonitorCompanies@1100285022();
    BEGIN
      CreditDataSetup.GET;
      WSMonitoringReq(2, '', FALSE);
    END;

    PROCEDURE UpdateChangedCompanies@1100285008();
    VAR
      lvCreditSafeInfo@1100285000 : Record 11128106;
      lvCustomer@1100285001 : Record 18;
    BEGIN
      CreditDataSetup.GET;

      lvCreditSafeInfo.SETRANGE("Update Needed", TRUE); // IME415

      IF lvCreditSafeInfo.FINDSET(FALSE) THEN REPEAT
        lvCustomer.GET(lvCreditSafeInfo."Customer No.");
        IF (lvCreditSafeInfo.Monitoring = lvCreditSafeInfo.Monitoring::Full) THEN BEGIN
          GetBasicData(lvCustomer);
          GetDecisionDirect(lvCustomer);
        END;
        IF (lvCreditSafeInfo.Monitoring = lvCreditSafeInfo.Monitoring::Basic) THEN BEGIN
          GetBasicData(lvCustomer);
        END;

      UNTIL lvCreditSafeInfo.NEXT = 0;

      lvCreditSafeInfo.MODIFYALL("Update Needed", FALSE);
    END;

    PROCEDURE IsAB@1100285502(COCNo@1100285500 : Code[20]) : Boolean;
    VAR
      int@1100285501 : Integer;
      txt1@1100285502 : Text;
    BEGIN
      //enbart AB, ej HB, landsting, etc
      IF (COPYSTR(COCNo, 1, 1) = '5') THEN BEGIN
         txt1 := COPYSTR(COCNo, 3, 2);
         IF (txt1 <> '') THEN BEGIN
            EVALUATE(int, txt1);
            IF (int > 19) THEN EXIT(TRUE);
         END;
      END;

      // nedan gÑller juridisk person
      // txt1 := COPYSTR(COCNo, 3, 2);
      // IF EVALUATE(int, txt1) THEN
      //  EXIT(int >= 20);

      EXIT(FALSE);


      // 5 Õ aktiebolag, filialer, banker, fîrsÑkringsbolag och europabolag
      // 9 Õ handelsbolag och kommanditbolag
      // 7 eller 8 Õ bostadsrÑttsfîreningar, ekonomiska fîreningar, nÑringsdrivande ideella fîreningar, bostadsfîreningar, kooperativa hyresrÑttsfîreningar, europakooperativ och Europeiska grupperingar fîr territoriellt samarbete
      // 2 eller 8 Õ trossamfund.
    END;

    PROCEDURE IsPerson@1100285505(COCNo@1100285500 : Code[20]) : Boolean;
    VAR
      int@1100285501 : Integer;
      txt1@1100285502 : Text;
    BEGIN
      IF (COPYSTR(COCNo, 1, 1) = '9') THEN EXIT(TRUE); //handelsbolag

      //>>IME432
      //IF (COPYSTR(COCNo, 1, 1) <> '5') THEN BEGIN  // IME432
      //   txt1 := COPYSTR(COCNo, 3, 2);
      //   IF (txt1 <> '') THEN BEGIN
      //      EVALUATE(int, txt1);
      //      IF (int < 13) THEN EXIT(TRUE);
      //   END;
      //END;
      txt1 := COPYSTR(COCNo, 3, 2);
      IF EVALUATE(int, txt1) THEN
        EXIT(int < 20);
      //<<IME432
      EXIT(FALSE);

      // IME-432 fîljer inte helt skatteverkets riktlinjer fîr person- & orgnummer.
      // Detta Ñr borttaget i IME-432
      // Styrning skall ske via 'mÜnadssiffran', kÑllor:
      // http://www.skatteverket.se/download/18.70ac421612e2a997f85800040284/70909.pdf
      // https://sv.wikipedia.org/wiki/Organisationsnummer
      // http://www.bolagsverket.se/ff/foretagsformer/organisationsnummer-1.7902
    END;

    PROCEDURE WSGetDataReq@1100285005() result : Boolean;
    VAR
      Language@1100285000 : Code[10];
    BEGIN
      result := FALSE;
      // Create XML Document
      CLEAR(xmldoc);
      xmldoc := xmldoc.XmlDocument();

      XmlProcessingInstruction := xmldoc.CreateProcessingInstruction('xml','version="1.0" encoding="UTF-8"');
      xmldoc.AppendChild(XmlProcessingInstruction);

      soapEnvelope := xmldoc.CreateElement('soap:Envelope', 'http://schemas.xmlsoap.org/soap/envelope/');
      soapEnvelope.SetAttribute('xmlns:xsi', 'http://www.w3.org/2001/XMLSchema-instance');
      soapEnvelope.SetAttribute('xmlns:xsd', 'http://www.w3.org/2001/XMLSchema');
      soapEnvelope.SetAttribute('xmlns:soap', 'http://schemas.xmlsoap.org/soap/envelope/');
      soapEnvelope.SetAttribute('xmlns:cs', 'https://webservice.creditsafe.se/getdata/');
      xmldoc.AppendChild(soapEnvelope);

      soapBody := xmldoc.CreateElement('soap:Body', 'http://schemas.xmlsoap.org/soap/envelope/');
      soapEnvelope.AppendChild(soapBody);

      soapBody2 := xmldoc.CreateElement('cs:GetDataBySecure', 'https://webservice.creditsafe.se/getdata/');
      soapBody.AppendChild(soapBody2);

      soapEnvelope2 := xmldoc.CreateElement('cs:GetData_Request', 'https://webservice.creditsafe.se/getdata/');
      soapBody2.AppendChild(soapEnvelope2);

      soapBody3 := xmldoc.CreateElement('cs:account', 'https://webservice.creditsafe.se/getdata/');
      soapEnvelope2.AppendChild(soapBody3);

      XmlElement := xmldoc.CreateElement('cs:UserName', 'https://webservice.creditsafe.se/getdata/');
      xmlTextNode := xmldoc.CreateTextNode(CreditDataSetup."User ID");
      XmlElement.AppendChild(xmlTextNode);
      soapBody3.AppendChild(XmlElement);

      XmlElement := xmldoc.CreateElement('cs:Password', 'https://webservice.creditsafe.se/getdata/');
      xmlTextNode := xmldoc.CreateTextNode(CreditDataSetup.Password);
      XmlElement.AppendChild(xmlTextNode);
      soapBody3.AppendChild(XmlElement);

      //XmlElement := xmldoc.CreateElement('TransactionId'); //ej obl.
      //xmlTextNode := xmldoc.CreateTextNode('');
      //XmlElement.AppendChild(xmlTextNode);
      //soapBody3.AppendChild(XmlElement);

      IF GLOBALLANGUAGE = 1053 THEN
        Language:='SWE'
      ELSE Language:= 'EN';

      XmlElement := xmldoc.CreateElement('cs:Language', 'https://webservice.creditsafe.se/getdata/');
      xmlTextNode := xmldoc.CreateTextNode(Language);
      XmlElement.AppendChild(xmlTextNode);
      soapBody3.AppendChild(XmlElement);

      XmlElement := xmldoc.CreateElement('cs:Block_Name', 'https://webservice.creditsafe.se/getdata/');
      IF (CreditSafeInfo."Legal Type" = CreditSafeInfo."Legal Type"::Natural) THEN
        xmlTextNode := xmldoc.CreateTextNode('DECISION_P_BASIC') //Person eller fîretag avgîr om DECISION_C_BASIC eller DECISION_P_BASIC skall skickas med
      ELSE
        xmlTextNode := xmldoc.CreateTextNode('DECISION_C_BASIC'); //Person eller fîretag avgîr om DECISION_C_BASIC eller DECISION_P_BASIC skall skickas med
      XmlElement.AppendChild(xmlTextNode);
      soapEnvelope2.AppendChild(XmlElement);

      XmlElement := xmldoc.CreateElement('cs:SearchNumber', 'https://webservice.creditsafe.se/getdata/');
      xmlTextNode := xmldoc.CreateTextNode(CreditSafeInfo."COC Registration No."); //Org el. persnr.
      XmlElement.AppendChild(xmlTextNode);
      soapEnvelope2.AppendChild(XmlElement);

      XmlElement := xmldoc.CreateElement('cs:FormattedOutput', 'https://webservice.creditsafe.se/getdata/');
      xmlTextNode := xmldoc.CreateTextNode('1'); //Ange 1 om datan skall returneras formaterad (fîr person endast)  ej obl.
      XmlElement.AppendChild(xmlTextNode);
      soapEnvelope2.AppendChild(XmlElement);

      //XmlElement := xmldoc.CreateElement('LODCustFreeText');  //ej obl.
      //xmlTextNode := xmldoc.CreateTextNode('');
      //XmlElement.AppendChild(xmlTextNode);
      //soapEnvelope2.AppendChild(XmlElement);

      //XmlElement := xmldoc.CreateElement('Mobile');  //ej obl.
      //xmlTextNode := xmldoc.CreateTextNode('');
      //XmlElement.AppendChild(xmlTextNode);
      //soapEnvelope2.AppendChild(XmlElement);

      //XmlElement := xmldoc.CreateElement('Email');  //ej obl.
      //xmlTextNode := xmldoc.CreateTextNode('');
      //XmlElement.AppendChild(xmlTextNode);
      //soapEnvelope2.AppendChild(XmlElement);

      IF (CreditDataSetup."Log XML-communication") THEN
        xmldoc.Save(CreditDataSetup."Path For XML-logs" + '\GetDataRequest_' + FORMAT(TODAY, 0, 9) + '_' + FORMAT(TIME, 0, '<Hours24><Minutes,2><Seconds,2>') + '.xml');

      //IF NOT ISCLEAR(xmlhttp) THEN CLEAR(xmlhttp);
      //CREATE(xmlhttp, TRUE, TRUE);

      //xmlhttp.open('POST',CreditDataSetup."URL WS GetData", FALSE, '','');
      //xmlhttp.setRequestHeader('Content-type', 'text/xml; charset=utf-8;');
      //xmlhttp.setRequestHeader('SOAPAction', 'https://webservice.creditsafe.se/getdata/GetDataBySecure');
      //xmlhttp.send(xmldoc);
      // If status is OK - Get Result XML

      //xmldoc := xmlhttp.responseXML;

      // ITERO.MH New Call via DotNet Web Service 141027
      xmldoc.LoadXml(DotNetCall(xmldoc.InnerXml(), CreditDataSetup."URL WS GetData", 'https://webservice.creditsafe.se/getdata/GetDataBySecure'));


      IF (CreditDataSetup."Log XML-communication") THEN
        xmldoc.Save(CreditDataSetup."Path For XML-logs" + '\GetDataResponse_' + FORMAT(TODAY, 0, 9) + '_' + FORMAT(TIME, 0, '<Hours24><Minutes,2><Seconds,2>') + '.xml');

      //IF NOT (xmlhttp.status = 200) THEN EXIT(FALSE);

      xmlNode := xmldoc.SelectSingleNode('//GETDATA_RESPONSE');

      IF NOT (ISNULL(xmlNode)) THEN BEGIN
        int := 0;
        TagName := '';

        CreditSafeInfo.MODIFY(TRUE);
        UpdateCreditInfo(xmlNode);
        CreditSafeInfo."Update Needed" := FALSE;
        CreditSafeInfo."Date for update" := TODAY;
        IF (CustomerType = 'AB') THEN CreditSafeInfo."Company Type" := CreditSafeInfo."Company Type"::Inc;
        CreditSafeInfo.MODIFY(TRUE);

        result := TRUE;
      END;

      // IF (nodeList.length = 1) THEN result := TRUE;

      CLEAR(xmldoc);

      result := TRUE;
    END;

    PROCEDURE WSDecisionDirectReq@1100285011() result : Boolean;
    VAR
      Language@1100285000 : Code[10];
      lvSteeringParameters@1100285001 : Text[50];
    BEGIN
      IF (NOT CreditDataSetup."Enable Creditcheck Private" ) //AND (IsAB(CreditSafeInfo."COC Registration No.") = FALSE) THEN
        AND (IsPerson(CreditSafeInfo."COC Registration No.")) THEN
        EXIT(FALSE); // DO NOT DO CREDIT CHECK ON NON-AB

      result := FALSE;
      // Create XML Document
      IF NOT ISNULL(xmldoc) THEN CLEAR(xmldoc);
      xmldoc := xmldoc.XmlDocument();

      XmlProcessingInstruction := xmldoc.CreateProcessingInstruction('xml','version="1.0" encoding="UTF-8"');
      xmldoc.AppendChild(XmlProcessingInstruction);

      soapEnvelope := xmldoc.CreateElement('soap:Envelope', 'http://schemas.xmlsoap.org/soap/envelope/');
      soapEnvelope.SetAttribute('xmlns:xsi', 'http://www.w3.org/2001/XMLSchema-instance');
      soapEnvelope.SetAttribute('xmlns:xsd', 'http://www.w3.org/2001/XMLSchema');
      soapEnvelope.SetAttribute('xmlns:soap', 'http://schemas.xmlsoap.org/soap/envelope/');
      soapEnvelope.SetAttribute('xmlns:cs', 'https://webservice.creditsafe.se/DecisionDirect/');
      xmldoc.AppendChild(soapEnvelope);

      soapBody := xmldoc.CreateElement('soap:Body', 'http://schemas.xmlsoap.org/soap/envelope/');
      soapEnvelope.AppendChild(soapBody);

      soapEnvelope2 := xmldoc.CreateElement('cs:MakeDecision', 'https://webservice.creditsafe.se/DecisionDirect/');
      soapBody.AppendChild(soapEnvelope2);

      soapBody2 := xmldoc.CreateElement('cs:request', 'https://webservice.creditsafe.se/DecisionDirect/');
      soapEnvelope2.AppendChild(soapBody2);

      soapBody3 := xmldoc.CreateElement('cs:account', 'https://webservice.creditsafe.se/DecisionDirect/');
      soapBody2.AppendChild(soapBody3);

      XmlElement := xmldoc.CreateElement('cs:UserName', 'https://webservice.creditsafe.se/DecisionDirect/');
      xmlTextNode := xmldoc.CreateTextNode(CreditDataSetup."User ID");  //IMTECH_test');
      XmlElement.AppendChild(xmlTextNode);
      soapBody3.AppendChild(XmlElement);

      XmlElement := xmldoc.CreateElement('cs:Password', 'https://webservice.creditsafe.se/DecisionDirect/');
      xmlTextNode := xmldoc.CreateTextNode(CreditDataSetup.Password);
      XmlElement.AppendChild(xmlTextNode);
      soapBody3.AppendChild(XmlElement);

      //XmlElement := xmldoc.CreateElement('cs:TransactionId');  //ej obl.
      //xmlTextNode := xmldoc.CreateTextNode('g');
      //XmlElement.AppendChild(xmlTextNode);
      //soapBody3.AppendChild(XmlElement);

      IF GLOBALLANGUAGE = 1053 THEN
        Language:='SWE'
      ELSE Language:= 'EN';

      XmlElement := xmldoc.CreateElement('cs:Language', 'https://webservice.creditsafe.se/DecisionDirect/');
      xmlTextNode := xmldoc.CreateTextNode(Language);
      XmlElement.AppendChild(xmlTextNode);
      soapBody3.AppendChild(XmlElement);

      XmlElement := xmldoc.CreateElement('cs:ReportType', 'https://webservice.creditsafe.se/DecisionDirect/');  //Company or Consumer
      IF (CreditSafeInfo."Legal Type" = CreditSafeInfo."Legal Type"::Natural) THEN
         xmlTextNode := xmldoc.CreateTextNode('Consumer')
      ELSE
         xmlTextNode := xmldoc.CreateTextNode('Company');

      XmlElement.AppendChild(xmlTextNode);
      soapBody2.AppendChild(XmlElement);

      XmlElement := xmldoc.CreateElement('cs:SearchNumber', 'https://webservice.creditsafe.se/DecisionDirect/'); //persnr. eller orgnr.
      xmlTextNode := xmldoc.CreateTextNode(CreditSafeInfo."COC Registration No.");
      XmlElement.AppendChild(xmlTextNode);
      soapBody2.AppendChild(XmlElement);

      XmlElement := xmldoc.CreateElement('cs:SteeringParameters', 'https://webservice.creditsafe.se/DecisionDirect/'); // 1 = company 2= consumer
      IF (CreditSafeInfo."Legal Type" = CreditSafeInfo."Legal Type"::Natural) THEN
         lvSteeringParameters := '2;' + FORMAT(CreditSafeInfo."Credit Amount", 0, 9)
      ELSE
         lvSteeringParameters := '1;' + FORMAT(CreditSafeInfo."Credit Amount", 0, 9);

      xmlTextNode := xmldoc.CreateTextNode(lvSteeringParameters);
      XmlElement.AppendChild(xmlTextNode);
      soapBody2.AppendChild(XmlElement);
      XmlElement := xmldoc.CreateElement('cs:DecisionSchemaName', 'https://webservice.creditsafe.se/DecisionDirect/');
      xmlTextNode := xmldoc.CreateTextNode(CreditDataSetup."Decision Schema Name");
      XmlElement.AppendChild(xmlTextNode);
      soapBody2.AppendChild(XmlElement);

      //XmlElement := xmldoc.CreateElement('cs:LODCustFreeText');
      //xmlTextNode := xmldoc.CreateTextNode('g');
      //XmlElement.AppendChild(xmlTextNode);
      //soapBody2.AppendChild(XmlElement);

      //XmlElement := xmldoc.CreateElement('cs:Mobile');
      //xmlTextNode := xmldoc.CreateTextNode('g');
      //XmlElement.AppendChild(xmlTextNode);
      //soapBody2.AppendChild(XmlElement);

      //XmlElement := xmldoc.CreateElement('cs:Email');
      //xmlTextNode := xmldoc.CreateTextNode('g');
      //XmlElement.AppendChild(xmlTextNode);
      //soapBody2.AppendChild(XmlElement);

      IF CreditDataSetup."Log XML-communication" THEN
         xmldoc.Save(CreditDataSetup."Path For XML-logs" + '\DecisionDirectRequest ' + FORMAT(TODAY, 0, 9) + ' ' + FORMAT(TIME, 0, '<Hours24><Minutes,2><Seconds,2>') + '.xml');

      xmldoc.LoadXml(DotNetCall(xmldoc.InnerXml(), CreditDataSetup."URL WS DecisionDirect", 'https://webservice.creditsafe.se/DecisionDirect/MakeDecision'));

      //xmlhttp.open('POST',CreditDataSetup."URL WS DecisionDirect",FALSE, '','');//'http://testwebservice.creditsafe.se/DecisionDirect/General/DecisionDirectService.asmx',FALSE);
      //xmlhttp.setRequestHeader('Content-type', 'text/xml; charset=utf-8;');

      //xmlhttp.setRequestHeader('SOAPAction', '"https://webservice.creditsafe.se/DecisionDirect/MakeDecision"');
      //xmlhttp.send(xmldoc);

      //xmldoc := xmlhttp.responseXML;

      IF (CreditDataSetup."Log XML-communication") THEN
         xmldoc.Save(CreditDataSetup."Path For XML-logs" + '\DecisionDirectResponse ' + FORMAT(TODAY, 0, 9) + ' ' + FORMAT(TIME, 0, '<Hours24><Minutes,2><Seconds,2>') + '.xml');

      IF NOT ISNULL(xmldoc) THEN BEGIN

         xmlNode := xmldoc.FirstChild();
         xmlNode := xmlNode.NextSibling();
         xmlNode := xmlNode.FirstChild();
         xmlNode := xmlNode.FirstChild();
         xmlNode := xmlNode.FirstChild();
         int := 0;
         TagName := '';
         CreditSafeInfo.MAX_LIMIT := 0; // RFC-055

         IF (GetXMLChild(xmlNode, TagName, Value,  int,haschild, xmlNode2)) THEN REPEAT
            IF ((haschild) AND (TagName = 'Error')) THEN BEGIN
               int2 := 0;
               TagName2 := '';

               IF (GetXMLChild(xmlNode2, TagName2, Value,  int2, haschild2, xmlNode3)) THEN REPEAT
                  IF (TagName2 = 'Cause_of_Reject') THEN
                     CreditSafeInfo."Not Approved Code" := Value;
                  IF (TagName2 = 'Reject_text') THEN
                     CreditSafeInfo."Not Approved Text" := Value;
                  IF (TagName2 = 'Reject_comment') THEN
                     CreditSafeInfo."Not Approved Comment" := Value;
               UNTIL GetXMLChild(xmlNode2, TagName2, Value, int2, haschild2, xmlNode3) = FALSE;
            END ELSE IF ((haschild) AND (TagName = 'RawData')) THEN BEGIN
               xmlNode2 := xmlNode2.FirstChild;
               xmlNode2 := xmlNode2.NextSibling;
               xmlNode2 := xmlNode2.FirstChild;
               xmlNode2 := xmlNode2.FirstChild;
               CreditSafeInfo.MODIFY(TRUE);
               UpdateCreditInfo(xmlNode2);   // insert newcoming data to the general fields 100-199
               CreditSafeInfo.GET(CreditSafeInfo."Customer No.");

            END ELSE BEGIN
               IF (TagName = 'Result_Text') THEN BEGIN
                  CreditSafeInfo."DecisionDirect Resulttext" := Value;
                  CreditSafeInfo.MODIFY(TRUE);
               END;
               IF (TagName = 'Result') THEN BEGIN
                  CreditSafeInfo."DecisionDirect Result" := Value;
                  IF ((Value = '1')) THEN
                     CreditSafeInfo."Approved Credit" := TRUE
                  ELSE
                     CreditSafeInfo."Approved Credit" := FALSE;
                  CreditSafeInfo.MODIFY(TRUE);
               END;
            END;

         UNTIL GetXMLChild(xmlNode, TagName, Value, int, haschild, xmlNode2) = FALSE;
         CreditSafeInfo."Date for update" := TODAY;
         CreditSafeInfo.MODIFY(TRUE);

         AddLogEntry(CreditSafeInfo."Customer No.", STRSUBSTNO(txtCreditCheckDone, FORMAT(CreditSafeInfo."Credit Amount"), FORMAT(CreditSafeInfo."Approved Credit")), TODAY);


         result := TRUE;
      END;

      CLEAR(xmldoc);
    END;

    PROCEDURE WSMonitoringReq@1100285006(RequestType@1100285000 : 'Add,Remove,Changed,Portfolios';OrgNo@1100285001 : Code[12];RunningTwice@1100285500 : Boolean) result : Boolean;
    VAR
      Language@1100285002 : Code[10];
      WSText@1100285003 : Text[30];
    BEGIN
      result := FALSE;
      // Create XML Document
      IF NOT ISNULL(xmldoc) THEN CLEAR(xmldoc);
      xmldoc := xmldoc.XmlDocument();

      CASE RequestType OF
         RequestType::Add: BEGIN
            WSText := 'MonitorCompany';
            IF (CreditSafeInfo."Reactivation Required") THEN WSText := 'ReactivateCompany';
         END;
         RequestType::Remove:
            WSText := 'RemoveCompany';
         RequestType::Changed:
            WSText := 'GetChangedCompanies';
         RequestType::Portfolios:
            WSText := 'GetPortfolios';
      END;

      // Create SOAP Envelope

      XmlProcessingInstruction := xmldoc.CreateProcessingInstruction('xml','version="1.0" encoding="UTF-8"');
      xmldoc.AppendChild(XmlProcessingInstruction);

      soapEnvelope := xmldoc.CreateElement('soap:Envelope', 'http://schemas.xmlsoap.org/soap/envelope/');
      soapEnvelope.SetAttribute('xmlns:soap', 'http://schemas.xmlsoap.org/soap/envelope/');
      soapEnvelope.SetAttribute('xmlns:xsi', 'http://www.w3.org/2001/XMLSchema-instance');
      soapEnvelope.SetAttribute('xmlns:xsd', 'http://www.w3.org/2001/XMLSchema');
      soapEnvelope.SetAttribute('xmlns:cs', 'https://webservice.creditsafe.se/CompanyMonitoring/');

      xmldoc.AppendChild(soapEnvelope);
      // Create SOAP Body
      soapBody := xmldoc.CreateElement('soap:Body', 'http://schemas.xmlsoap.org/soap/envelope/');
      soapEnvelope.AppendChild(soapBody);

      soapBody2 := xmldoc.CreateElement('cs:' + WSText, 'https://webservice.creditsafe.se/CompanyMonitoring/');
      soapBody.AppendChild(soapBody2);


      soapBody3 := xmldoc.CreateElement('cs:mon_req', 'https://webservice.creditsafe.se/CompanyMonitoring/');
      soapBody2.AppendChild(soapBody3);

      xmlAccount := xmldoc.CreateElement('cs:Account', 'https://webservice.creditsafe.se/CompanyMonitoring/');
      soapBody3.AppendChild(xmlAccount);

      XmlElement := xmldoc.CreateElement('cs:UserID', 'https://webservice.creditsafe.se/CompanyMonitoring/');
      xmlTextNode := xmldoc.CreateTextNode(CreditDataSetup."User ID");
      XmlElement.AppendChild(xmlTextNode);
      xmlAccount.AppendChild(XmlElement);


      XmlElement := xmldoc.CreateElement('cs:Password', 'https://webservice.creditsafe.se/CompanyMonitoring/');
      xmlTextNode := xmldoc.CreateTextNode(CreditDataSetup.Password);
      XmlElement.AppendChild(xmlTextNode);
      xmlAccount.AppendChild(XmlElement);

      //XmlElement := xmldoc.CreateElement('cs:Kundenr');
      //xmlTextNode := xmldoc.CreateTextNode('Not used');
      //XmlElement.AppendChild(xmlTextNode);
      //xmlAccount.AppendChild(XmlElement);

      //XmlElement := xmldoc.CreateElement('cs:OrgNummer');
      //xmlTextNode := xmldoc.CreateTextNode('d');
      //XmlElement.AppendChild(xmlTextNode);
      //xmlAccount.AppendChild(XmlElement);

      IF GLOBALLANGUAGE = 1053 THEN
        Language:='SWE'
      ELSE Language:= 'EN';


      XmlElement := xmldoc.CreateElement('cs:Language', 'https://webservice.creditsafe.se/CompanyMonitoring/');
      xmlTextNode := xmldoc.CreateTextNode(Language);
      XmlElement.AppendChild(xmlTextNode);
      soapBody3.AppendChild(XmlElement);

      XmlElement := xmldoc.CreateElement('cs:PortfolioName', 'https://webservice.creditsafe.se/CompanyMonitoring/');
      xmlTextNode := xmldoc.CreateTextNode(CreditDataSetup."Portfolio Name");
      XmlElement.AppendChild(xmlTextNode);
      soapBody3.AppendChild(XmlElement);

      IF (RequestType = RequestType::Add) THEN BEGIN
         IF (CreditSafeInfo."Reactivation Required") THEN BEGIN
            XmlElement := xmldoc.CreateElement('cs:OrgNumberToReactivate', 'https://webservice.creditsafe.se/CompanyMonitoring/');
         END ELSE BEGIN
            XmlElement := xmldoc.CreateElement('cs:OrgNumberToAdd', 'https://webservice.creditsafe.se/CompanyMonitoring/');
         END;
         xmlTextNode := xmldoc.CreateTextNode(OrgNo);
         XmlElement.AppendChild(xmlTextNode);
         soapBody3.AppendChild(XmlElement);
      END;
      //XmlElement := xmldoc.CreateElement('cs:Kundnr');
      //xmlTextNode := xmldoc.CreateTextNode('g');
      //XmlElement.AppendChild(xmlTextNode);
      //soapBody3.AppendChild(XmlElement);

      //XmlElement := xmldoc.CreateElement('cs:FreeText');
      //xmlTextNode := xmldoc.CreateTextNode('h');
      //XmlElement.AppendChild(xmlTextNode);
      //soapBody3.AppendChild(XmlElement);

      IF (RequestType = RequestType::Remove) THEN BEGIN
         XmlElement := xmldoc.CreateElement('cs:OrgNumberToRemove', 'https://webservice.creditsafe.se/CompanyMonitoring/');
         xmlTextNode := xmldoc.CreateTextNode(OrgNo);
         XmlElement.AppendChild(xmlTextNode);
         soapBody3.AppendChild(XmlElement);
      END;

      //XmlElement := xmldoc.CreateElement('cs:OrgNumberToReactivate');
      //xmlTextNode := xmldoc.CreateTextNode('');
      //XmlElement.AppendChild(xmlTextNode);
      //soapBody3.AppendChild(XmlElement);

      //XmlElement := xmldoc.CreateElement('cs:ReactivateAllinPortfolio');
      //xmlTextNode := xmldoc.CreateTextNode('false');
      //XmlElement.AppendChild(xmlTextNode);
      //soapBody3.AppendChild(XmlElement);

      XmlElement := xmldoc.CreateElement('cs:NumberOfDays', 'https://webservice.creditsafe.se/CompanyMonitoring/');
      xmlTextNode := xmldoc.CreateTextNode(FORMAT(CreditDataSetup."No. of Days"));
      XmlElement.AppendChild(xmlTextNode);
      soapBody3.AppendChild(XmlElement);

      //XmlElement := xmldoc.CreateElement('cs:ignoreFilter');
      //xmlTextNode := xmldoc.CreateTextNode('false');
      //XmlElement.AppendChild(xmlTextNode);
      //soapBody3.AppendChild(XmlElement);

      //XmlElement := xmldoc.CreateElement('cs:TransactionId');
      //xmlTextNode := xmldoc.CreateTextNode('123');
      //XmlElement.AppendChild(xmlTextNode);
      //soapBody3.AppendChild(XmlElement);

      IF (CreditDataSetup."Log XML-communication") THEN

         xmldoc.Save(CreditDataSetup."Path For XML-logs" + '\MonitorCompanyRequest_' + FORMAT(TODAY, 0, 9) + '_' + FORMAT(TIME, 0, '<Hours24><Minutes,2><Seconds,2>') + '.xml');

      //IF NOT ISCLEAR(xmlhttp) THEN CLEAR(xmlhttp);
      //CREATE(xmlhttp, TRUE, TRUE);

      //xmlhttp.open('POST', CreditDataSetup."URL WS MonitorCompany", FALSE, '', '');
      //xmlhttp.setRequestHeader('Content-type', 'text/xml; charset=utf-8;');
      //xmlhttp.setRequestHeader('SOAPAction', '"https://webservice.creditsafe.se/CompanyMonitoring/' + WSText + '"');
      //xmlhttp.send(xmldoc);
      //xmldoc := xmlhttp.responseXML;
      xmldoc.LoadXml(DotNetCall(xmldoc.InnerXml(), CreditDataSetup."URL WS MonitorCompany", 'https://webservice.creditsafe.se/CompanyMonitoring/' + WSText));


      IF (CreditDataSetup."Log XML-communication") THEN
         xmldoc.Save(CreditDataSetup."Path For XML-logs" + '\MonitorDataResponse_' + FORMAT(TODAY, 0, 9) + '_' + FORMAT(TIME, 0, '<Hours24><Minutes,2><Seconds,2>') + '.xml');


      // If status is OK - Get Result XML
      IF NOT ISNULL(xmldoc) THEN BEGIN

       // nodeList := xmldoc.selectNodes('//PingResponse');
         xmlNode := xmldoc.FirstChild();
         xmlNode := xmlNode.NextSibling();
         xmlNode := xmlNode.FirstChild();
         xmlNode := xmlNode.FirstChild();
         xmlNode := xmlNode.FirstChild();
         int := 0;
         TagName := '';

         IF (GetXMLChild(xmlNode, TagName, Value,  int,haschild, xmlNode2)) THEN REPEAT
            IF ((haschild) AND (TagName = 'Error')) THEN BEGIN
               int2 := 0;
               TagName2 := '';
               // IME415 Commented old code
               //IF (RequestType = RequestType::Add) THEN BEGIN
               //   IF NOT (CreditSafeInfo."Reactivation Required") THEN BEGIN
               //   // The most common error when monitoring is due to a company has been removed and cannot be added, intead needs to be reactivated. Test this first by
               //   // calling this function again but with Reactivate set to TRUE.
               //      CreditSafeInfo."Reactivation Required" := TRUE;
               //      CreditSafeInfo.MODIFY();
               //      IF NOT (RunningTwice) THEN
               //         // Call this function from itself one time (RunningTwice stops eternal function call)
               //         IF (WSMonitoringReq(RequestType, OrgNo, TRUE)) THEN EXIT(TRUE);
               //   END




               IF (GetXMLChild(xmlNode2, TagName2, Value,  int2, haschild2, xmlNode3)) THEN REPEAT
                  // IME-415 ITERO.MH 150915 <<
                  IF (TagName2 = 'Reject_Code') THEN BEGIN
                     IF Value = '32' THEN BEGIN
                        // The most common error when monitoring is due to a company has been removed and cannot be added, intead needs to be reactivated. Test this first by
                        // calling this function again but with Reactivate set to TRUE.
                        IF (RequestType = RequestType::Add) THEN BEGIN
                           CreditSafeInfo."Reactivation Required" := TRUE;
                           CreditSafeInfo.MODIFY;
                           IF NOT (RunningTwice) THEN
                              // Call this function from itself one time (RunningTwice stops eternal function call)
                              IF (WSMonitoringReq(RequestType, OrgNo, TRUE)) THEN EXIT(TRUE);

                        END;
                     END;
                  END;
                  // IME-415 ITERO.MH 150915 >>
                  IF (TagName2 = 'Reject_Text') THEN BEGIN
                     IF (GUIALLOWED) THEN
                        MESSAGE(txtCanNotChange, Value); // IME-415: Changed to Message from error.
                     EXIT(FALSE);
                  END;
               UNTIL GetXMLChild(xmlNode2, TagName2, Value, int2, haschild2, xmlNode3) = FALSE;
            END ELSE IF ((haschild) AND (TagName = 'CompanyInfo')) THEN BEGIN
               // Get Changed companies
               int2 := 0;
               TagName2 := '';
               IF (GetXMLChild(xmlNode2, TagName2, Value,  int2, haschild2, xmlNode3)) THEN REPEAT
                  TagName3 := '';
                  int3 := 0;
                  IF (GetXMLChild(xmlNode3, TagName3, Value,  int3, haschild3, xmlNode4)) THEN REPEAT
                     IF (TagName3 = 'ChangesList') AND (haschild3) THEN BEGIN
                        SaveCompMonChanges;
                     END;
                  UNTIL GetXMLChild(xmlNode3, TagName3, Value,  int3, haschild3, xmlNode4) = FALSE;

               UNTIL GetXMLChild(xmlNode2, TagName2, Value, int2, haschild2, xmlNode3) = FALSE;
            END;

         UNTIL GetXMLChild(xmlNode, TagName, Value, int, haschild, xmlNode2) = FALSE;
         //CreditSafeInfo.MODIFY(TRUE);


       // IF (nodeList.length = 1) THEN result := TRUE;
         result := TRUE;
         IF (RequestType = RequestType::Add) THEN
            AddLogEntry(CreditSafeInfo."Customer No.", txtCompanyAdded, TODAY);
         IF (RequestType = RequestType::Remove) THEN
            AddLogEntry(CreditSafeInfo."Customer No.", txtCompanyRemoved, TODAY);

      END;
      CLEAR(xmldoc);
    END;

    PROCEDURE UpdateCreditInfo@1100285004(VAR lvXmlNode@1100285000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      FieldRef@1100285005 : FieldRef;
      RecRef@1100285004 : RecordRef;
      KeyIndex@1100285003 : Integer;
      FieldType@1100285002 : Text;
      DateVar@1100285001 : Date;
      lvInt@1100285006 : Integer;
      lvText@1100285500 : Text;
      lvCustomerVATNo@1100285100 : Text;
      TestFieldRef@1100285101 : Text;
      TestInnerText@1100285102 : Text;
    BEGIN
      RecRef.GETTABLE(CreditSafeInfo); // Gets CreditSafeInfo as RecRef


      xmlNodeList := lvXmlNode.ChildNodes(); // Childnodes of <GETDATA_RESPONSE>
      FOR KeyIndex := 100 TO 199 DO BEGIN
        // Loops through all fields in the table numbered 100 to 199
        IF (RecRef.FIELDEXIST(KeyIndex)) THEN BEGIN // The field exists in the table
          FieldRef := RecRef.FIELD(KeyIndex);
          lvInt := 0;
          // Selects the node in the document which has the SAME name as
          // the Field Name in the specific index.
          IF (SelectNode(FieldRef.NAME, lvXmlNode, xmlNodeList, lvInt)) THEN BEGIN
            // This fieldname exists in the xml-file. Validate it!
            FieldType := FORMAT(FieldRef.TYPE); // FieldType is VARIANT
            // Different validation depending on the type (integer, decimal, text, code, etc)

            IF (FieldType = 'Integer') OR (FieldType = 'Decimal') THEN BEGIN
              IF (STRLEN(DELCHR(lvXmlNode.InnerText, '=', DELCHR(lvXmlNode.InnerText, '=', '0123456789'))) = 0) THEN
                FieldRef.VALIDATE(0) // There is no decimals in this text, validate 0
              ELSE
                FieldRef.VALIDATE(Str2Dec(lvXmlNode.InnerText));
            END;

            IF (FieldType = 'Code') OR (FieldType = 'Text') THEN BEGIN
              IF (LOWERCASE(lvXmlNode.InnerText)  <> 'via momsgrupp')  THEN BEGIN //200113
                FieldRef.VALIDATE(COPYSTR(lvXmlNode.InnerText, 1, FieldRef.LENGTH));
                IF (FieldRef.NAME = 'NAME') THEN CustomerName := lvXmlNode.InnerText;
                IF (FieldRef.NAME = 'FIRST_NAME') THEN CustomerName := lvXmlNode.InnerText;     //140205
                IF (FieldRef.NAME = 'LAST_NAME') THEN CustomerName += ' ' + lvXmlNode.InnerText;//140205
                IF (FieldRef.NAME = 'ADDRESS') THEN CustomerAddress := lvXmlNode.InnerText;
                IF (FieldRef.NAME = 'ZIPCODE') THEN CustomerPostCode := lvXmlNode.InnerText;
                IF (FieldRef.NAME = 'TOWN') THEN CustomerCity := lvXmlNode.InnerText;
                IF (FieldRef.NAME = 'COMPANY_TYPE') THEN CustomerType := lvXmlNode.InnerText;
                IF (FieldRef.NAME = 'MOMS_NR') THEN CustomerVATNo := lvXmlNode.InnerText; // 150327
              END ELSE BEGIN
                //>>200113
                IF CreditSafeInfo.MOMS_NR = 'via momsgrupp' THEN BEGIN
                  FieldRef.VALIDATE('');
                  IF (FieldRef.NAME = 'MOMS_NR') THEN CustomerVATNo := '';
                END;
              END; //<<200113
            END;

            IF (FieldType = 'Date') THEN BEGIN
              EVALUATE(DateVar, lvXmlNode.InnerText);
              FieldRef.VALIDATE(DateVar);
            END;

            RecRef.MODIFY(TRUE);
          END;
        END;
      END;
    END;

    PROCEDURE SaveCompMonChanges@1100285014();
    VAR
      ChangeCode@1100285000 : Code[20];
      EngText@1100285001 : Text[100];
      SweText@1100285002 : Text[100];
      OrgNo@1100285003 : Code[12];
      LocDate@1100285004 : Date;
      LocTextDate@1100285005 : Text[20];
    BEGIN
      TagName4 := '';
      int4 := 0;
      IF (GetXMLChild(xmlNode4, TagName4, Value,  int4, haschild4, xmlNode5)) THEN REPEAT
         IF (haschild4) THEN BEGIN
            TagName5 := '';
            int5 := 0;
            IF (GetXMLChild(xmlNode5, TagName5, Value,  int5, haschild5, xmlNode6)) THEN REPEAT
               IF (TagName5 = 'ChangesCode') THEN ChangeCode := Value;
               IF (TagName5 = 'EngText') THEN   EngText := Value;
               IF (TagName5 = 'SweText') THEN   SweText := Value;
               IF (TagName5 = 'ChangedDate') THEN BEGIN
                  LocTextDate := COPYSTR(Value, 1, 10);
                  EVALUATE(LocDate, LocTextDate);
               END;
               IF (TagName5 = 'OrgNummer') THEN OrgNo := Value;;
            UNTIL GetXMLChild(xmlNode5, TagName5, Value,  int5, haschild5, xmlNode6) = FALSE;
            CreditSafeInfo.SETRANGE("COC Registration No.", OrgNo);
            IF CreditSafeInfo.FINDFIRST THEN BEGIN
               IF GLOBALLANGUAGE = 1053 THEN
                  AddLogEntry(CreditSafeInfo."Customer No.", EngText, LocDate)
               ELSE
                  AddLogEntry(CreditSafeInfo."Customer No.", SweText, LocDate);
               IF NOT (CreditSafeInfo."Update Needed") THEN BEGIN
                  CreditSafeInfo."Update Needed" := TRUE;
                  CreditSafeInfo.MODIFY(TRUE);
               END;
            END;
         END;
      UNTIL GetXMLChild(xmlNode4, TagName4, Value,  int4, haschild4, xmlNode5) = FALSE;
    END;

    PROCEDURE SyncCreditSafe4PS@1100285500(VAR CreditSafeRec@11012000 : Record 11128106;Operation@11012001 : Integer;CreditSafeOldRec@11012002 : Record 11128106);
    VAR
      CreditSafeRec2@11012003 : Record 11128106;
      OldRecRef@1100525001 : RecordRef;
      NewRecRef@1100525000 : RecordRef;
      MarketingSetup@1100285500 : Record 5079;
      CompRelationRec@1100285501 : Record 11012059;
      LeadingCompany@1100285502 : Text[50];
    BEGIN
      // 4PS SPECIFIC CODE *****************

      MarketingSetup.GET;
      IF NOT MarketingSetup."Central Management" OR NOT MarketingSetup.Customers THEN
        EXIT;

      LeadingCompany := CompRelationRec.GetLeadingCompany(DATABASE::"Marketing Setup",TRUE);
      IF COMPANYNAME = LeadingCompany THEN
         CompRelationRec.SETFILTER(Company, '<>%1', LeadingCompany) //filter all decentral companies
      ELSE
         CompRelationRec.SETRANGE(Company, '-o-'); //filter no companies at all

      CompRelationRec.SETRANGE("Company Contact Data", LeadingCompany); // WRK0003537 ITERO.MH 150303


      IF CompRelationRec.FINDSET THEN
        REPEAT
          CreditSafeRec2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:BEGIN
                CreditSafeRec2.COPY(CreditSafeOldRec);
                CreditSafeRec2.RESET;
                IF CreditSafeRec2.FIND THEN
                  CreditSafeRec2.RENAME(CreditSafeRec."Customer No.");
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                CreditSafeRec2.COPY(CreditSafeRec);
                CreditSafeRec2.RESET;
                IF NOT CreditSafeRec2.FIND THEN BEGIN
                  CreditSafeRec2.INSERT;
                END ELSE BEGIN
                  OldRecRef.GETTABLE(CreditSafeRec2);
                  CreditSafeRec2.TRANSFERFIELDS(CreditSafeRec,FALSE);
                  NewRecRef.GETTABLE(CreditSafeRec2);
                  NewRecRef.MODIFY;
                END;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    PROCEDURE Ansi2Ascii@1000000016(pText@1000 : Text[1024]) : Text[1024];
    VAR
      gAnsiTxt@1100285001 : Text[250];
      gAsciiTxt@1100285000 : Text[250];
    BEGIN

      gAsciiTxt[1] := 8364;
      gAsciiTxt[2] := 8218;
      gAsciiTxt[3] := 402;
      gAsciiTxt[4] := 8222;
      gAsciiTxt[5] := 8230;
      gAsciiTxt[6] := 8224;
      gAsciiTxt[7] := 8225;
      gAsciiTxt[8] := 710;
      gAsciiTxt[9] := 8240;
      gAsciiTxt[10] := 352;
      gAsciiTxt[11] := 8249;
      gAsciiTxt[12] := 338;
      gAsciiTxt[13] := 381;
      gAsciiTxt[14] := 8216;
      gAsciiTxt[15] := 8217;
      gAsciiTxt[16] := 8220;
      gAsciiTxt[17] := 8221;
      gAsciiTxt[18] := 8226;
      gAsciiTxt[19] := 8211;
      gAsciiTxt[20] := 8212;
      gAsciiTxt[21] := 732;
      gAsciiTxt[22] := 8482;
      gAsciiTxt[23] := 353;
      gAsciiTxt[24] := 8250;
      gAsciiTxt[25] := 339;
      gAsciiTxt[26] := 382;
      gAsciiTxt[27] := 376;
      gAsciiTxt[28] := 161;
      gAsciiTxt[29] := 162;
      gAsciiTxt[30] := 163;
      gAsciiTxt[31] := 164;
      gAsciiTxt[32] := 165;
      gAsciiTxt[33] := 166;
      gAsciiTxt[34] := 167;
      gAsciiTxt[35] := 168;
      gAsciiTxt[36] := 169;
      gAsciiTxt[37] := 170;
      gAsciiTxt[38] := 171;
      gAsciiTxt[39] := 172;
      gAsciiTxt[40] := 173;
      gAsciiTxt[41] := 174;
      gAsciiTxt[42] := 175;
      gAsciiTxt[43] := 176;
      gAsciiTxt[44] := 177;
      gAsciiTxt[45] := 178;
      gAsciiTxt[46] := 179;
      gAsciiTxt[47] := 180;
      gAsciiTxt[48] := 181;
      gAsciiTxt[49] := 182;
      gAsciiTxt[50] := 183;
      gAsciiTxt[51] := 184;
      gAsciiTxt[52] := 185;
      gAsciiTxt[53] := 186;
      gAsciiTxt[54] := 187;
      gAsciiTxt[55] := 188;
      gAsciiTxt[56] := 189;
      gAsciiTxt[57] := 190;
      gAsciiTxt[58] := 191;
      gAsciiTxt[59] := 192;
      gAsciiTxt[60] := 193;
      gAsciiTxt[61] := 194;
      gAsciiTxt[62] := 195;
      gAsciiTxt[63] := 196;
      gAsciiTxt[64] := 197;
      gAsciiTxt[65] := 198;
      gAsciiTxt[66] := 199;
      gAsciiTxt[67] := 200;
      gAsciiTxt[68] := 201;
      gAsciiTxt[69] := 202;
      gAsciiTxt[70] := 203;
      gAsciiTxt[71] := 204;
      gAsciiTxt[72] := 205;
      gAsciiTxt[73] := 206;
      gAsciiTxt[74] := 207;
      gAsciiTxt[75] := 208;
      gAsciiTxt[76] := 209;
      gAsciiTxt[77] := 210;
      gAsciiTxt[78] := 211;
      gAsciiTxt[79] := 212;
      gAsciiTxt[80] := 213;
      gAsciiTxt[81] := 214;
      gAsciiTxt[82] := 215;
      gAsciiTxt[83] := 216;
      gAsciiTxt[84] := 217;
      gAsciiTxt[85] := 218;
      gAsciiTxt[86] := 219;
      gAsciiTxt[87] := 220;
      gAsciiTxt[88] := 221;
      gAsciiTxt[89] := 222;
      gAsciiTxt[90] := 223;
      gAsciiTxt[91] := 224;
      gAsciiTxt[92] := 225;
      gAsciiTxt[93] := 226;
      gAsciiTxt[94] := 227;
      gAsciiTxt[95] := 228;
      gAsciiTxt[96] := 229;
      gAsciiTxt[97] := 230;
      gAsciiTxt[98] := 231;
      gAsciiTxt[99] := 232;
      gAsciiTxt[100] := 233;
      gAsciiTxt[101] := 234;
      gAsciiTxt[102] := 235;
      gAsciiTxt[103] := 236;
      gAsciiTxt[104] := 237;
      gAsciiTxt[105] := 238;
      gAsciiTxt[106] := 239;
      gAsciiTxt[107] := 240;
      gAsciiTxt[108] := 242;
      gAsciiTxt[109] := 243;
      gAsciiTxt[110] := 244;
      gAsciiTxt[111] := 245;
      gAsciiTxt[112] := 246;
      gAsciiTxt[113] := 247;
      gAsciiTxt[114] := 248;
      gAsciiTxt[115] := 249;
      gAsciiTxt[116] := 250;
      gAsciiTxt[117] := 251;
      gAsciiTxt[118] := 252;
      gAsciiTxt[119] := 253;
      gAsciiTxt[120] := 254;
      gAsciiTxt[121] := 255;

      gAnsiTxt[1] := 199;
      gAnsiTxt[2] := 233;
      gAnsiTxt[3] := 226;
      gAnsiTxt[4] := 228;
      gAnsiTxt[5] := 224;
      gAnsiTxt[6] := 229;
      gAnsiTxt[7] := 231;
      gAnsiTxt[8] := 234;
      gAnsiTxt[9] := 235;
      gAnsiTxt[10] := 232;
      gAnsiTxt[11] := 239;
      gAnsiTxt[12] := 238;
      gAnsiTxt[13] := 196;
      gAnsiTxt[14] := 230;
      gAnsiTxt[15] := 198;
      gAnsiTxt[16] := 244;
      gAnsiTxt[17] := 246;
      gAnsiTxt[18] := 242;
      gAnsiTxt[19] := 251;
      gAnsiTxt[20] := 249;
      gAnsiTxt[21] := 255;
      gAnsiTxt[22] := 214;
      gAnsiTxt[23] := 220;
      gAnsiTxt[24] := 248;
      gAnsiTxt[25] := 163;
      gAnsiTxt[26] := 215;
      gAnsiTxt[27] := 402;
      gAnsiTxt[28] := 237;
      gAnsiTxt[29] := 243;
      gAnsiTxt[30] := 250;
      gAnsiTxt[31] := 241;
      gAnsiTxt[32] := 209;
      gAnsiTxt[33] := 170;
      gAnsiTxt[34] := 186;
      gAnsiTxt[35] := 191;
      gAnsiTxt[36] := 174;
      gAnsiTxt[37] := 172;
      gAnsiTxt[38] := 189;
      gAnsiTxt[39] := 188;
      gAnsiTxt[40] := 161;
      gAnsiTxt[41] := 171;
      gAnsiTxt[42] := 187;
      gAnsiTxt[43] := 8364;
      gAnsiTxt[44] := 129;
      gAnsiTxt[45] := 8218;
      gAnsiTxt[46] := 8222;
      gAnsiTxt[47] := 8230;
      gAnsiTxt[48] := 193;
      gAnsiTxt[49] := 194;
      gAnsiTxt[50] := 192;
      gAnsiTxt[51] := 169;
      gAnsiTxt[52] := 8224;
      gAnsiTxt[53] := 8225;
      gAnsiTxt[54] := 710;
      gAnsiTxt[55] := 8240;
      gAnsiTxt[56] := 162;
      gAnsiTxt[57] := 165;
      gAnsiTxt[58] := 352;
      gAnsiTxt[59] := 8249;
      gAnsiTxt[60] := 338;
      gAnsiTxt[61] := 141;
      gAnsiTxt[62] := 381;
      gAnsiTxt[63] := 143;
      gAnsiTxt[64] := 144;
      gAnsiTxt[65] := 227;
      gAnsiTxt[66] := 195;
      gAnsiTxt[67] := 8216;
      gAnsiTxt[68] := 8217;
      gAnsiTxt[69] := 8220;
      gAnsiTxt[70] := 8221;
      gAnsiTxt[71] := 8226;
      gAnsiTxt[72] := 8211;
      gAnsiTxt[73] := 8212;
      gAnsiTxt[74] := 164;
      gAnsiTxt[75] := 240;
      gAnsiTxt[76] := 208;
      gAnsiTxt[77] := 202;
      gAnsiTxt[78] := 203;
      gAnsiTxt[79] := 200;
      gAnsiTxt[80] := 732;
      gAnsiTxt[81] := 205;
      gAnsiTxt[82] := 206;
      gAnsiTxt[83] := 207;
      gAnsiTxt[84] := 8482;
      gAnsiTxt[85] := 353;
      gAnsiTxt[86] := 8250;
      gAnsiTxt[87] := 339;
      gAnsiTxt[88] := 166;
      gAnsiTxt[89] := 204;
      gAnsiTxt[90] := 157;
      gAnsiTxt[91] := 211;
      gAnsiTxt[92] := 223;
      gAnsiTxt[93] := 212;
      gAnsiTxt[94] := 210;
      gAnsiTxt[95] := 245;
      gAnsiTxt[96] := 213;
      gAnsiTxt[97] := 181;
      gAnsiTxt[98] := 254;
      gAnsiTxt[99] := 222;
      gAnsiTxt[100] := 218;
      gAnsiTxt[101] := 219;
      gAnsiTxt[102] := 217;
      gAnsiTxt[103] := 253;
      gAnsiTxt[104] := 221;
      gAnsiTxt[105] := 175;
      gAnsiTxt[106] := 180;
      gAnsiTxt[107] := 173;
      gAnsiTxt[108] := 382;
      gAnsiTxt[109] := 190;
      gAnsiTxt[110] := 182;
      gAnsiTxt[111] := 167;
      gAnsiTxt[112] := 247;
      gAnsiTxt[113] := 184;
      gAnsiTxt[114] := 176;
      gAnsiTxt[115] := 168;
      gAnsiTxt[116] := 183;
      gAnsiTxt[117] := 185;
      gAnsiTxt[118] := 179;
      gAnsiTxt[119] := 178;
      gAnsiTxt[120] := 376;
      gAnsiTxt[121] := 160;
      EXIT(CONVERTSTR(pText,gAnsiTxt,gAsciiTxt));
    END;

    PROCEDURE Ascii2Ansi@1000000017(pText@1000 : Text[1024]) : Text[1024];
    VAR
      gAnsiTxt@1100285001 : Text[250];
      gAsciiTxt@1100285000 : Text[250];
    BEGIN
      gAsciiTxt[1] := 8364;
      gAsciiTxt[2] := 8218;
      gAsciiTxt[3] := 402;
      gAsciiTxt[4] := 8222;
      gAsciiTxt[5] := 8230;
      gAsciiTxt[6] := 8224;
      gAsciiTxt[7] := 8225;
      gAsciiTxt[8] := 710;
      gAsciiTxt[9] := 8240;
      gAsciiTxt[10] := 352;
      gAsciiTxt[11] := 8249;
      gAsciiTxt[12] := 338;
      gAsciiTxt[13] := 381;
      gAsciiTxt[14] := 8216;
      gAsciiTxt[15] := 8217;
      gAsciiTxt[16] := 8220;
      gAsciiTxt[17] := 8221;
      gAsciiTxt[18] := 8226;
      gAsciiTxt[19] := 8211;
      gAsciiTxt[20] := 8212;
      gAsciiTxt[21] := 732;
      gAsciiTxt[22] := 8482;
      gAsciiTxt[23] := 353;
      gAsciiTxt[24] := 8250;
      gAsciiTxt[25] := 339;
      gAsciiTxt[26] := 382;
      gAsciiTxt[27] := 376;
      gAsciiTxt[28] := 161;
      gAsciiTxt[29] := 162;
      gAsciiTxt[30] := 163;
      gAsciiTxt[31] := 164;
      gAsciiTxt[32] := 165;
      gAsciiTxt[33] := 166;
      gAsciiTxt[34] := 167;
      gAsciiTxt[35] := 168;
      gAsciiTxt[36] := 169;
      gAsciiTxt[37] := 170;
      gAsciiTxt[38] := 171;
      gAsciiTxt[39] := 172;
      gAsciiTxt[40] := 173;
      gAsciiTxt[41] := 174;
      gAsciiTxt[42] := 175;
      gAsciiTxt[43] := 176;
      gAsciiTxt[44] := 177;
      gAsciiTxt[45] := 178;
      gAsciiTxt[46] := 179;
      gAsciiTxt[47] := 180;
      gAsciiTxt[48] := 181;
      gAsciiTxt[49] := 182;
      gAsciiTxt[50] := 183;
      gAsciiTxt[51] := 184;
      gAsciiTxt[52] := 185;
      gAsciiTxt[53] := 186;
      gAsciiTxt[54] := 187;
      gAsciiTxt[55] := 188;
      gAsciiTxt[56] := 189;
      gAsciiTxt[57] := 190;
      gAsciiTxt[58] := 191;
      gAsciiTxt[59] := 192;
      gAsciiTxt[60] := 193;
      gAsciiTxt[61] := 194;
      gAsciiTxt[62] := 195;
      gAsciiTxt[63] := 196;
      gAsciiTxt[64] := 197;
      gAsciiTxt[65] := 198;
      gAsciiTxt[66] := 199;
      gAsciiTxt[67] := 200;
      gAsciiTxt[68] := 201;
      gAsciiTxt[69] := 202;
      gAsciiTxt[70] := 203;
      gAsciiTxt[71] := 204;
      gAsciiTxt[72] := 205;
      gAsciiTxt[73] := 206;
      gAsciiTxt[74] := 207;
      gAsciiTxt[75] := 208;
      gAsciiTxt[76] := 209;
      gAsciiTxt[77] := 210;
      gAsciiTxt[78] := 211;
      gAsciiTxt[79] := 212;
      gAsciiTxt[80] := 213;
      gAsciiTxt[81] := 214;
      gAsciiTxt[82] := 215;
      gAsciiTxt[83] := 216;
      gAsciiTxt[84] := 217;
      gAsciiTxt[85] := 218;
      gAsciiTxt[86] := 219;
      gAsciiTxt[87] := 220;
      gAsciiTxt[88] := 221;
      gAsciiTxt[89] := 222;
      gAsciiTxt[90] := 223;
      gAsciiTxt[91] := 224;
      gAsciiTxt[92] := 225;
      gAsciiTxt[93] := 226;
      gAsciiTxt[94] := 227;
      gAsciiTxt[95] := 228;
      gAsciiTxt[96] := 229;
      gAsciiTxt[97] := 230;
      gAsciiTxt[98] := 231;
      gAsciiTxt[99] := 232;
      gAsciiTxt[100] := 233;
      gAsciiTxt[101] := 234;
      gAsciiTxt[102] := 235;
      gAsciiTxt[103] := 236;
      gAsciiTxt[104] := 237;
      gAsciiTxt[105] := 238;
      gAsciiTxt[106] := 239;
      gAsciiTxt[107] := 240;
      gAsciiTxt[108] := 242;
      gAsciiTxt[109] := 243;
      gAsciiTxt[110] := 244;
      gAsciiTxt[111] := 245;
      gAsciiTxt[112] := 246;
      gAsciiTxt[113] := 247;
      gAsciiTxt[114] := 248;
      gAsciiTxt[115] := 249;
      gAsciiTxt[116] := 250;
      gAsciiTxt[117] := 251;
      gAsciiTxt[118] := 252;
      gAsciiTxt[119] := 253;
      gAsciiTxt[120] := 254;
      gAsciiTxt[121] := 255;

      gAnsiTxt[1] := 199;
      gAnsiTxt[2] := 233;
      gAnsiTxt[3] := 226;
      gAnsiTxt[4] := 228;
      gAnsiTxt[5] := 224;
      gAnsiTxt[6] := 229;
      gAnsiTxt[7] := 231;
      gAnsiTxt[8] := 234;
      gAnsiTxt[9] := 235;
      gAnsiTxt[10] := 232;
      gAnsiTxt[11] := 239;
      gAnsiTxt[12] := 238;
      gAnsiTxt[13] := 196;
      gAnsiTxt[14] := 230;
      gAnsiTxt[15] := 198;
      gAnsiTxt[16] := 244;
      gAnsiTxt[17] := 246;
      gAnsiTxt[18] := 242;
      gAnsiTxt[19] := 251;
      gAnsiTxt[20] := 249;
      gAnsiTxt[21] := 255;
      gAnsiTxt[22] := 214;
      gAnsiTxt[23] := 220;
      gAnsiTxt[24] := 248;
      gAnsiTxt[25] := 163;
      gAnsiTxt[26] := 215;
      gAnsiTxt[27] := 402;
      gAnsiTxt[28] := 237;
      gAnsiTxt[29] := 243;
      gAnsiTxt[30] := 250;
      gAnsiTxt[31] := 241;
      gAnsiTxt[32] := 209;
      gAnsiTxt[33] := 170;
      gAnsiTxt[34] := 186;
      gAnsiTxt[35] := 191;
      gAnsiTxt[36] := 174;
      gAnsiTxt[37] := 172;
      gAnsiTxt[38] := 189;
      gAnsiTxt[39] := 188;
      gAnsiTxt[40] := 161;
      gAnsiTxt[41] := 171;
      gAnsiTxt[42] := 187;
      gAnsiTxt[43] := 8364;
      gAnsiTxt[44] := 129;
      gAnsiTxt[45] := 8218;
      gAnsiTxt[46] := 8222;
      gAnsiTxt[47] := 8230;
      gAnsiTxt[48] := 193;
      gAnsiTxt[49] := 194;
      gAnsiTxt[50] := 192;
      gAnsiTxt[51] := 169;
      gAnsiTxt[52] := 8224;
      gAnsiTxt[53] := 8225;
      gAnsiTxt[54] := 710;
      gAnsiTxt[55] := 8240;
      gAnsiTxt[56] := 162;
      gAnsiTxt[57] := 165;
      gAnsiTxt[58] := 352;
      gAnsiTxt[59] := 8249;
      gAnsiTxt[60] := 338;
      gAnsiTxt[61] := 141;
      gAnsiTxt[62] := 381;
      gAnsiTxt[63] := 143;
      gAnsiTxt[64] := 144;
      gAnsiTxt[65] := 227;
      gAnsiTxt[66] := 195;
      gAnsiTxt[67] := 8216;
      gAnsiTxt[68] := 8217;
      gAnsiTxt[69] := 8220;
      gAnsiTxt[70] := 8221;
      gAnsiTxt[71] := 8226;
      gAnsiTxt[72] := 8211;
      gAnsiTxt[73] := 8212;
      gAnsiTxt[74] := 164;
      gAnsiTxt[75] := 240;
      gAnsiTxt[76] := 208;
      gAnsiTxt[77] := 202;
      gAnsiTxt[78] := 203;
      gAnsiTxt[79] := 200;
      gAnsiTxt[80] := 732;
      gAnsiTxt[81] := 205;
      gAnsiTxt[82] := 206;
      gAnsiTxt[83] := 207;
      gAnsiTxt[84] := 8482;
      gAnsiTxt[85] := 353;
      gAnsiTxt[86] := 8250;
      gAnsiTxt[87] := 339;
      gAnsiTxt[88] := 166;
      gAnsiTxt[89] := 204;
      gAnsiTxt[90] := 157;
      gAnsiTxt[91] := 211;
      gAnsiTxt[92] := 223;
      gAnsiTxt[93] := 212;
      gAnsiTxt[94] := 210;
      gAnsiTxt[95] := 245;
      gAnsiTxt[96] := 213;
      gAnsiTxt[97] := 181;
      gAnsiTxt[98] := 254;
      gAnsiTxt[99] := 222;
      gAnsiTxt[100] := 218;
      gAnsiTxt[101] := 219;
      gAnsiTxt[102] := 217;
      gAnsiTxt[103] := 253;
      gAnsiTxt[104] := 221;
      gAnsiTxt[105] := 175;
      gAnsiTxt[106] := 180;
      gAnsiTxt[107] := 173;
      gAnsiTxt[108] := 382;
      gAnsiTxt[109] := 190;
      gAnsiTxt[110] := 182;
      gAnsiTxt[111] := 167;
      gAnsiTxt[112] := 247;
      gAnsiTxt[113] := 184;
      gAnsiTxt[114] := 176;
      gAnsiTxt[115] := 168;
      gAnsiTxt[116] := 183;
      gAnsiTxt[117] := 185;
      gAnsiTxt[118] := 179;
      gAnsiTxt[119] := 178;
      gAnsiTxt[120] := 376;
      gAnsiTxt[121] := 160;

      EXIT(CONVERTSTR(pText,gAsciiTxt,gAnsiTxt));
    END;

    PROCEDURE GetXMLChild@1100285001(VAR Node@1100285000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR NodeName@1100285001 : Text[50];VAR NodeValue@1100285002 : Text[1024];VAR Count@1100285008 : Integer;VAR HasChildren@1100285006 : Boolean;VAR ChildNode@1100285010 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") FoundNext : Boolean;
    VAR
      LocalElement@1100285005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      LocalNodeList@1100285004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      LocalNode@1100285003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      LocalNodeUnder@1100285007 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN


      HasChildren := FALSE;
      IF ISNULL(Node) THEN EXIT(FALSE);
      IF NOT (Node.HasChildNodes) THEN EXIT(FALSE);
      LocalNode := Node.LastChild;

      IF (NodeName <> '') THEN BEGIN

         LocalNodeList := Node.ChildNodes;
         IF (Count >= LocalNodeList.Count) THEN EXIT(FALSE);

         IF (SelectNode(NodeName, LocalNode, LocalNodeList, Count)) THEN
            LocalNode := LocalNode.NextSibling;
         IF ISNULL(LocalNode) THEN EXIT(FALSE);
      END ELSE BEGIN
         LocalNode := Node.FirstChild;
      END;
      NodeName := LocalNode.Name;
      LocalNodeUnder := LocalNode.FirstChild;
      IF (ISNULL(LocalNodeUnder)) THEN BEGIN
         NodeValue := '';
         HasChildren := FALSE;
      END ELSE IF ((LocalNodeUnder.Name = '#text')) THEN BEGIN
         NodeValue := LocalNode.InnerText;
         HasChildren := FALSE;
      END ELSE BEGIN
         NodeValue := '';
         HasChildren := TRUE;
         ChildNode := LocalNode;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE SelectNode@1100285002(NodeName@1100285000 : Text[250];VAR xmlNode@1100285001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR xmlNodeList@1100285004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";VAR int@1100285003 : Integer) Return : Boolean;
    BEGIN
      // Function to select the node named in NodeName from the node list xmlNodeList.
      // Returns TRUE if found and sets xmlNode to this node, if not found returns FALSE.
      Return := FALSE;

      //xmlNodeList.Reset;

      IF (xmlNodeList.Count > 0) THEN REPEAT
         xmlNode := xmlNodeList.Item(int);
         int+= 1; // int := int + 1;
      UNTIL (xmlNode.Name = NodeName) OR (int = xmlNodeList.Count);
      IF (xmlNode.Name = NodeName) THEN Return := TRUE;
    END;

    PROCEDURE Str2Dec@1100285009(StrNumber@1100285000 : Text[250]) Return : Decimal;
    VAR
      pos@1100285001 : Integer;
      Before@1100285002 : Integer;
      After@1100285003 : Integer;
      BeforeStr@1100285004 : Text[250];
      AfterStr@1100285005 : Text[250];
      i@1100285006 : Integer;
      exp@1100285007 : Integer;
    BEGIN
      // Function to generate a decimal out of a text which contains either no decimal sign or the decimal sign . or ,
      StrNumber := DELCHR(StrNumber,'=',DELCHR(StrNumber,'=','-.,0123456789'));  // 140603

      pos := STRLEN(StrNumber);
      IF (pos = 0) THEN EXIT(0);
      IF (pos > 1) THEN REPEAT
         pos -= 1;
      UNTIL (pos = 1) OR (StrNumber[pos] = '.') OR (StrNumber[pos] = ',');
      IF (pos = 1) THEN
         EVALUATE(Return, StrNumber)
      ELSE BEGIN
         BeforeStr := COPYSTR(StrNumber, 1, pos - 1);
         AfterStr := COPYSTR(StrNumber, pos + 1);
         EVALUATE(Before, BeforeStr);
         EVALUATE(After, AfterStr);
         exp := 10;

         FOR i := 1 TO (STRLEN(StrNumber) - pos - 1) DO BEGIN
            exp := exp * 10;
         END;
         IF Before >= 0 THEN
            Return := Before + After / exp
         ELSE
            Return := Before - After / exp;
      END;
      IF (StrNumber[1] = '-') AND (Return > 0) THEN Return := -Return; // 140603
    END;

    PROCEDURE UpdateContactForCustomer@1100285504(VAR Customer@1100285500 : Record 18);
    VAR
      Contact@1100285501 : Record 5050;
      xRecContact@1100285000 : Record 5050;
      ContactBusinessRelation@1100285502 : Record 5054;
      CentralDataMgt@1100285001 : Codeunit 11012010;
    BEGIN
      // ITERO.MH 150428
      ContactBusinessRelation.SETRANGE("Link to Table", ContactBusinessRelation."Link to Table"::Customer);
      ContactBusinessRelation.SETRANGE("No.", Customer."No.");
      IF (ContactBusinessRelation.FINDSET(FALSE)) THEN REPEAT
         IF (Contact.GET(ContactBusinessRelation."Contact No.") AND (Contact.Type = Contact.Type::Company)) THEN BEGIN
            xRecContact.GET(ContactBusinessRelation."Contact No."); // IME326
            Contact.Name := Customer.Name;
            Contact.Address := Customer.Address;
            Contact."Address 2" := Customer."Address 2";
            Contact."Post Code" := Customer."Post Code";
            Contact."COC Registration No." := Customer."COC Registration No.";
            Contact.City := Customer.City; // IME386 150709
            Contact.MODIFY(FALSE);
            CentralDataMgt.EditContact(Contact,2,xRecContact); // IME326
         END;
      UNTIL ContactBusinessRelation.NEXT = 0;
    END;

    PROCEDURE AddNewCustomersOnMonitorAndDecisionDirect@1100285100() : Boolean;
    VAR
      CreditsafeCreditInformation@1100285100 : Record 11128106;
      Customer@1100285101 : Record 18;
    BEGIN
      // 170313 Startup function to add customers on monitor
      CreditsafeCreditInformation.SETRANGE("Apply New Customer Check", TRUE);
      IF CreditsafeCreditInformation.ISEMPTY THEN
         EXIT(FALSE);

      IF CreditsafeCreditInformation.FINDSET THEN REPEAT

         Customer.GET(CreditsafeCreditInformation."Customer No.");
         GetBasicData(Customer);
         IF (CreditSafeInfo."Legal Type" <> CreditSafeInfo."Legal Type"::Natural) OR (CreditDataSetup."Enable Creditcheck Private" = TRUE) THEN
           IF (COPYSTR(Customer."COC Registration No.", 1, 1) = '5') THEN // Only do on Real INC-companies
              GetDecisionDirect(Customer);

         IF NOT (CreditDataSetup."Autmatic Monitoring") THEN BEGIN
            IF (CreditSafeInfo.Monitoring = CreditSafeInfo.Monitoring::"No monitoring") THEN
              AddCompanyToMonitor(Customer, FALSE);
         END;

      UNTIL CreditsafeCreditInformation.NEXT = 0;

      CreditsafeCreditInformation.MODIFYALL("Apply New Customer Check", FALSE);

      EXIT(TRUE);
    END;

    BEGIN
    {
      131212 ITERO.SB IMSE023 CreditSafe
      140116 ITERO.SB IMSE023 CreditSafe ** Bug fixes and synchronization addition between companies
      140205 ITERO.MH IMSE023 Creditsafe Deleted monitoring of persons, changed AutoLogin UserID and Password and added function AutoLogin
      140219 ITERO.MH IME-115 fix blanked Customer if CreditSafe offline
      140318 ITERO.MH exclude natural persons from GetDecisionDirect()
      140415 ITERO.MH IMSE023 Enabled private checking based on setting
      140603 ITERO.MH Corrected bug in Str2Dec function
      141001 ITERO.MH IME193 Added control of COC registration No. based on Country
      141210 ITERO.MH IME236 *** MAJOR UPDATE ***
                             * Changed ALL Automation objects to DotNet
                             * Added Control of AB/Person based on COC Registration No. New Functions: IsAB() IsPerson()
                             * Stopped natural person to get decision direct based on CreditSafe Setup
                             * Added control of length of strings from CreditSafe which caused error
                             * Made it possible to run from NAS without client-calls to start Monitoring companies
      150303 ITERO.MH WRK0003537 Changed bug of Leading Company Synchronization
      150327 ITERO.MH Added VAT No. from response in CreditSafe in BasicData
      150331 ITERO.MH Changed rewrite of Address from basic data
      150428 ITERO.MH Added synchronization of Contact card from customer
      150529 ITERO.MH Cleared variables between BasicData requests.
      150624 ITERO.MH IME326 Added Contact Central Mgmt Sync
      150709 ITERO.MH IME386 Added City sync for Contact
      150915 ITERO.MH IME415 Added SetRange-problem on monitor companies
                             Changed MonitorCompany-function not to display error/message and try again only
                             if correct message has been received from CreditSafe.
                      RFC-055
      151203 ITERO.DL IME-432 IsAB() & IsPerson() fîljer inte skatteverkets riktlinjer fîr person- & orgnummer.
      170313 ITERO.MH Added new feature to set decision direct and monitor on new customers
      171128 ITERO.MH Changed .net-variable to be used on WSCall - added function WSCALL
      171130 ITERO.MH Major change of addition of Customer - new code for checks
                      - Removed CheckCOCNo
                      - Added addition of coc-no when inserted
                      - Moved checks of COC No to "GetAll()"
                      - Added ErrorIf-Functions to improve readability
      171204 ITERO.MH Only add Credit Info when Custome No. is not blank - added paramter to set Credit Information
      180219 ITERO.DL pure286886 made ErrorIfCocNoAlreadyExistsOnAnotherCustomer global
      180315 ORANGO.FH pure292495 Changes in function ErrorIfCocNoRemovedIsUnderMonitor so lines in table
                                  'Creditsafe Credit Information' is deleted properly
      180412 ORANGO.FH IME1032 Changed so if a faulty "COC Registration No." is given, status in field "Monitoring" is not changed.
      200113 ORANGO.FH RFC1231 If MOMS_NR is 'via momsgrupp' then do not update field MOMS_NR
    }
    END.
  }
}

