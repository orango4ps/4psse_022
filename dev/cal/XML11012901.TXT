OBJECT XMLport 11012901 Import Investm. Proposal STIKO
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Import Investment Proposal STIKO;
    Direction=Import;
    TextEncoding=WINDOWS;
    OnPostXMLport=BEGIN
                    UpdateProjectDevelopment;
                  END;

    Format=Variable Text;
    FieldSeparator=[;];
  }
  ELEMENTS
  {
    { [{A1B517BD-3A8E-4413-8050-1D3E07BF754D}];  ;Root                ;Element ;Text     }

    { [{5B4D37FB-D180-47AD-B033-42EC67ABEF63}];1 ;Integer             ;Element ;Table   ;
                                                  SourceTable=Table2000000026;
                                                  SourceTableView=SORTING(Field1);
                                                  Import::OnBeforeInsertRecord=BEGIN
                                                                                 ImportLine;
                                                                                 currXMLport.SKIP;
                                                                               END;
                                                                                }

    { [{02523D8C-1668-47B8-9C01-E88CC85BE7F2}];2 ;ImportCostObject    ;Element ;Text     }

    { [{E3FB2FC8-90FB-4E60-8A65-3B73DB955098}];2 ;ImportDescription   ;Element ;Text     }

    { [{1745EC1F-7C2B-4BF5-A25B-A380160CE1FA}];2 ;ImportType          ;Element ;Text     }

    { [{AB1A2A92-2CFC-42D2-8EE4-17FD3738AB00}];2 ;ImportAmount        ;Element ;Text     }

  }
  EVENTS
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1100525000;;Container;
                  ContainerType=ContentArea }

      { 1100525003;1;Group  ;
                  CaptionML=[ENU=Options;
                             SVE=Alternativ];
                  GroupType=Group }

      { 1100525001;2;Field  ;
                  CaptionML=[ENU=Phase;
                             SVE=Fas];
                  SourceExpr=PhaseCode;
                  OnValidate=BEGIN
                               ValidatePhaseCode;
                             END;

                  OnLookup=BEGIN
                             LookupPhaseCode;
                           END;
                            }

      { 1100525002;2;Field  ;
                  CaptionML=[ENU=Reference Date;
                             SVE=Referensdatum];
                  SourceExpr=ReferenceDate }

    }
  }
  CODE
  {
    VAR
      ImportSTIKO@1100525000 : TextConst 'ENU=Import STIKO';
      ProjectNo@1100525001 : Code[20];
      PhaseCode@1100525002 : Code[10];
      ReferenceDate@1100525003 : Date;
      VersionCode@1100525004 : Code[10];
      Text001@1100525005 : TextConst 'ENU=Actual phase is %1. Continue?';

    PROCEDURE SetProjectNo@1100525007(CurrentProjectNo@1100525000 : Code[20]);
    BEGIN
      ProjectNo := CurrentProjectNo;
    END;

    PROCEDURE SetPhaseCode@1100525010(Phase@1100525000 : Code[10]);
    BEGIN
      PhaseCode := Phase;
    END;

    LOCAL PROCEDURE ValidatePhaseCode@1100525008();
    VAR
      ProjectDevelopmentPhase@1100525000 : Record 11012911;
      ActualPhase@1100525001 : Code[10];
    BEGIN
      IF PhaseCode = '' THEN
        EXIT;
      IF ProjectDevelopmentPhase.GET(ProjectNo, PhaseCode) THEN BEGIN
        ActualPhase := ProjectDevelopmentPhase.GetActualPhase(ProjectNo);
        IF NOT ProjectDevelopmentPhase."Actual Phase" THEN
          IF ActualPhase <> '' THEN
            IF NOT CONFIRM(STRSUBSTNO(Text001, ActualPhase)) THEN
              ERROR('');
      END;
    END;

    LOCAL PROCEDURE LookupPhaseCode@1100525009();
    VAR
      ProjectDevelopmentPhase@1100525000 : Record 11012911;
    BEGIN
      ProjectDevelopmentPhase.SETRANGE("Project No.",ProjectNo);
      IF PAGE.RUNMODAL(0,ProjectDevelopmentPhase) = ACTION::LookupOK THEN BEGIN
        PhaseCode := ProjectDevelopmentPhase.Phase;
        ValidatePhaseCode;
      END;
    END;

    LOCAL PROCEDURE ImportLine@1100525001();
    BEGIN
      IF VersionCode = '' THEN BEGIN
        GetNewVersionCode;
        InsertInvestmentProposal;
      END;
      InsertInvestmentProposalRubricLine;
      InsertRubricBudgetToDistribute;
    END;

    LOCAL PROCEDURE GetNewVersionCode@1100525000();
    BEGIN
      VersionCode := GetProjectDevelopmentVersionCode;
      IF VersionCode = '' THEN
        VersionCode := 'STIKO-01'
      ELSE
        VersionCode := INCSTR(VersionCode);
    END;

    LOCAL PROCEDURE GetProjectDevelopmentVersionCode@1100525006() : Code[10];
    VAR
      ProjectDevelopment@1100525000 : Record 11012915;
    BEGIN
      ProjectDevelopment.GET(ProjectNo);
      EXIT(ProjectDevelopment."Last Imported STIKO");
    END;

    LOCAL PROCEDURE InsertInvestmentProposal@1100525002();
    VAR
      InvestmentProposal@1100525000 : Record 11012912;
    BEGIN
      InvestmentProposal.VALIDATE("Project No.",ProjectNo);
      InvestmentProposal.VALIDATE(Version,VersionCode);
      InvestmentProposal.VALIDATE(Description,ImportSTIKO + ' ' + FORMAT(TODAY));
      InvestmentProposal.VALIDATE("Version Date",TODAY);
      InvestmentProposal.VALIDATE(Phase,PhaseCode);
      InvestmentProposal.VALIDATE("Reference Date",ReferenceDate);
      InvestmentProposal.INSERT(TRUE);
    END;

    LOCAL PROCEDURE InsertInvestmentProposalRubricLine@1100525003();
    VAR
      InvestmProposalRubricLine@1100525000 : Record 11012913;
    BEGIN
      InvestmProposalRubricLine.VALIDATE("Project No.",ProjectNo);
      InvestmProposalRubricLine.VALIDATE(Version,VersionCode);
      InvestmProposalRubricLine.VALIDATE("Rubric Code",ImportCostObject);
      InvestmProposalRubricLine.VALIDATE(Description,ImportDescription);
      IF ImportType = 'Cost' THEN
        InvestmProposalRubricLine.VALIDATE(Type,InvestmProposalRubricLine.Type::Costs)
      ELSE
        InvestmProposalRubricLine.VALIDATE(Type,InvestmProposalRubricLine.Type::Revenues);
      InvestmProposalRubricLine.VALIDATE("Cost Object Filter",ImportCostObject);
      InvestmProposalRubricLine.INSERT(TRUE);
    END;

    LOCAL PROCEDURE InsertRubricBudgetToDistribute@1100525004();
    VAR
      RubricBudgettoDistribute@1100525000 : Record 11012909;
      AmountDec@1100525002 : Decimal;
    BEGIN
      RubricBudgettoDistribute.VALIDATE("Project No.",ProjectNo);
      RubricBudgettoDistribute.VALIDATE(Version,VersionCode);
      RubricBudgettoDistribute.VALIDATE("Rubric Code",ImportCostObject);
      RubricBudgettoDistribute.VALIDATE(Description,ImportDescription);
      EVALUATE(AmountDec,ImportAmount);
      RubricBudgettoDistribute.VALIDATE(Amount,AmountDec);
      RubricBudgettoDistribute.INSERT(TRUE);
    END;

    LOCAL PROCEDURE UpdateProjectDevelopment@1100525005();
    VAR
      ProjectDevelopment@1100525002 : Record 11012915;
    BEGIN
      IF VersionCode = '' THEN
        EXIT;
      ProjectDevelopment.GET(ProjectNo);
      ProjectDevelopment.VALIDATE("Last Imported STIKO",VersionCode);
      ProjectDevelopment.MODIFY(TRUE);
    END;

    PROCEDURE InitXMLport@1100529500(iPhaseCode@1100529501 : Code[10];iReferenceDate@1100529500 : Date);
    BEGIN
      PhaseCode := iPhaseCode;
      ReferenceDate := iReferenceDate;
    END;

    BEGIN
    END.
  }
}

