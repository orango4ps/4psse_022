OBJECT Table 11072030 Attachment
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.04,4PS14.00 (5062);
  }
  PROPERTIES
  {
    OnInsert=VAR
               Attachment2@1000 : Record 11072030;
               NextAttachmentNo@1001 : Integer;
             BEGIN
               "Last Date Modified" := TODAY;
               "Last Time Modified" := TIME;

               Attachment2.LOCKTABLE;
               IF Attachment2.FINDLAST THEN
                 NextAttachmentNo := Attachment2."No." + 1
               ELSE
                 NextAttachmentNo := 1;

               "No." := NextAttachmentNo;

               //**4PS.so
               //RMSetup.GET;
               //"Storage Type" := RMSetup."Attachment Storage Type";
               //IF "Storage Type" = "Storage Type"::"Disk File" THEN BEGIN
               //  RMSetup.TESTFIELD("Attachment Storage Location");
               //  "Storage Pointer" := RMSetup."Attachment Storage Location";
               //END
               //**4PS.eo
               "Storage Pointer" := FillStoragePointer; //**4PS.n
             END;

    OnModify=BEGIN
               "Last Date Modified" := TODAY;
               "Last Time Modified" := TIME;
             END;

    CaptionML=[DEU=Dateianhang;
               ENU=Attachment;
               NLD=Bijlage;
               NOR=Vedlegg;
               SVE=Bilaga];
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Integer       ;CaptionML=[DEU=Nr.;
                                                              ENU=No.;
                                                              NLD=Nr.;
                                                              NOR=Nr.;
                                                              SVE=Nr];
                                                   NotBlank=Yes }
    { 2   ;   ;Attachment File     ;BLOB          ;CaptionML=[DEU=Dateianhang;
                                                              ENU=Attachment File;
                                                              NLD=Bijlagebestand;
                                                              NOR=Vedleggsfil;
                                                              SVE=Bifogad fil] }
    { 3   ;   ;Storage Type        ;Option        ;CaptionML=[DEU=Speicherungsart;
                                                              ENU=Storage Type;
                                                              NLD=Bestandslocatie;
                                                              NOR=Lagringstype;
                                                              SVE=Lagringstyp];
                                                   OptionCaptionML=[DEU=Eingebettet,Extern,Speicherort Ñndern;
                                                                    ENU=Embedded,Disk File,Exchange Storage;
                                                                    NLD=Ingesloten,Schijf,Exchange;
                                                                    NOR=Innbeddet,Diskfil,Exchange lagring;
                                                                    SVE=InbÑddad,Fil,Exchange lagring];
                                                   OptionString=Embedded,Disk File,Exchange Storage }
    { 4   ;   ;Storage Pointer     ;Text250       ;CaptionML=[DEU=Speicherverweis;
                                                              ENU=Storage Pointer;
                                                              NLD=Exacte bestandslocatie;
                                                              NOR=Lagringspeker;
                                                              SVE=Lagringspekare] }
    { 5   ;   ;File Extension      ;Text250       ;CaptionML=[DEU=Dateierweiterung;
                                                              ENU=File Extension;
                                                              NLD=Bestandsextensie;
                                                              NOR=Filtype;
                                                              SVE=FilÑndelse] }
    { 6   ;   ;Read Only           ;Boolean       ;CaptionML=[DEU=SchreibgeschÅtzt;
                                                              ENU=Read Only;
                                                              NLD=Alleen lezen;
                                                              NOR=Kun lese;
                                                              SVE=Read Only] }
    { 7   ;   ;Last Date Modified  ;Date          ;CaptionML=[DEU=Korrigiert am;
                                                              ENU=Last Date Modified;
                                                              NLD=Gewijzigd op;
                                                              NOR=Endret den;
                                                              SVE=Uppdateringsdatum] }
    { 8   ;   ;Last Time Modified  ;Time          ;CaptionML=[DEU=Korrigiert um;
                                                              ENU=Last Time Modified;
                                                              NLD=Gewijzigd om;
                                                              NOR=Sist endret;
                                                              SVE=Uppdateringstid] }
    { 13  ;   ;Merge Source        ;BLOB          ;CaptionML=[DEU=Datenquelle fÅr Seriendruck;
                                                              ENU=Merge Source;
                                                              NLD=Samenvoegbron;
                                                              NOR=Flett kilde;
                                                              SVE=Koppla kÑlla] }
    { 14  ;   ;Email Message ID    ;BLOB          ;CaptionML=[DEU=E-Mail-ID;
                                                              ENU=Email Message ID;
                                                              NLD=Id e-mailbericht;
                                                              NOR=ID for E-postmelding;
                                                              SVE=ID fîr e-postmeddelande] }
    { 15  ;   ;Email Entry ID      ;BLOB          ;CaptionML=[DEU=E-Mail-Posten-ID;
                                                              ENU=Email Entry ID;
                                                              NLD=Id E-mailitem;
                                                              NOR=ID for E-Mailpost;
                                                              SVE=ID fîr e-postmeddelandepost] }
    { 16  ;   ;Email Message Checksum;Integer     ;CaptionML=[DEU=E-Mail-PrÅfsumme;
                                                              ENU=Email Message Checksum;
                                                              NLD=Controlesom e-mailbericht;
                                                              NOR=Kontrollsum for E-postmelding;
                                                              SVE=Kontrollsumma fîr e-postmeddelande] }
    { 17  ;   ;Email Message Url   ;BLOB          ;CaptionML=[DEU=E-Mail-URL;
                                                              ENU=Email Message Url;
                                                              NLD=URL van e-mailbericht;
                                                              NOR=URL-adresse for e-postmelding;
                                                              SVE=URL fîr e-postmeddelande] }
    { 11012000;;Interaction Template Code;Code10  ;TableRelation="Interaction Template";
                                                   CaptionML=[DEU=AktivitÑtenvorlagencode;
                                                              ENU=Interaction Template Code;
                                                              NLD=Interactiesjablooncode;
                                                              NOR=Interaksjonsmalkode;
                                                              SVE=Interaktionsmallkod];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Email Message Checksum                   }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text002@1002 : TextConst 'DEU=Der Dateianhang ist leer.;ENU=The attachment is empty.;NLD=De bijlage is leeg.;NOR=Vedlegget er tomt;SVE=Inget har bifogats.';
      Text003@1003 : TextConst 'DEU=Der Dateianhang wird auf diesem Computer bereits verwendet.;ENU=Attachment is already in use on this machine.;NLD=Bijlage wordt reeds op deze machine gebruikt.;NOR=Vedlegg er allerede i bruk pÜ denne maskinen.;SVE=Bilaga anvÑnds redan pÜ denna maskin.';
      Text004@1012 : TextConst 'DEU=Die Anhangsdatei muss auf dem DatentrÑger gespeichert werden, bevor Sie sie importieren kînnen.\\Mîchten Sie die Datei speichern?;ENU=The attachment file must be saved to disk before you can import it.\\Do you want to save the file?;NLD=Het bijlagebestand moet op schijf worden opgeslagen voordat u het kunt importeren.\\Wilt u het bestand opslaan?;NOR=Vedleggsfilen mÜ lagres til disken fõr du kan importere den.\\Vil du lagre filen?;SVE=Den bifogade filen mÜste sparas pÜ disk innan du kan importera den.\\Vill du spara filen?';
      Text005@1005 : TextConst 'DEU=Dateianhang exportieren;ENU=Export Attachment;NLD=Bijlage exporteren;NOR=Eksporter Vedlegg;SVE=Exportera bilaga';
      Text006@1006 : TextConst 'DEU=Dateianhang importieren;ENU=Import Attachment;NLD=Bijlage importeren;NOR=Importer vedlegg;SVE=Importera bilaga';
      Text007@1007 : TextConst 'DEU=Alle Dateien (*.*)|*.*;ENU=All Files (*.*)|*.*;NLD=Alle bestanden (*.*)|*.*;NOR=Alle filer (*.*)|*.*;SVE=Alla filer (*.*)|*.*';
      Text008@1008 : TextConst 'DEU=Fehler beim Kopieren der Datei: %1.;ENU=Error during copying file: %1.;NLD=Fout tijdens kopiâren van bestand: %1.;NOR=Feil ved kopiering av fil: %1;SVE=Fel vid kopiering av fil: %1.';
      Text009@1009 : TextConst 'DEU=Mîchten Sie %1 entfernen?;ENU=Do you want to remove %1?;NLD=Wilt u %1 verwijderen?;NOR=Vil du fjerne %1?;SVE=Vill du ta bort %1?';
      Text010@1010 : TextConst 'DEU=Externe Datei konnte nicht entfernt werden.;ENU=External file could not be removed.;NLD=Extern bestand kon niet verwijderd worden.;NOR=Den eksterne filen kunne ikke fjernes.;SVE=Den externa filen kunde inte tas bort.';
      Text013@1013 : TextConst 'DEU=Nur Microsoft Word-Dokumente kînnen gedruckt werden.;ENU=You can only print Microsoft Word documents.;NLD=U kunt alleen Microsoft Word-documenten afdrukken.;NOR=Du kan kun skrive ut Microsoft Word-dokumenter.;SVE=Du kan endast skriva ut Microsoft Word-dokument.';
      Text014@1014 : TextConst 'DEU=Nur Microsoft Word-Dokumente kînnen gefaxt werden.;ENU=You can only fax Microsoft Word documents.;NLD=U kunt alleen Microsoft Word-documenten faxen.;NOR=Du kan kun fakse Microsoft Word-dokumenter.;SVE=Du kan endast faxa Microsoft Word-dokument.';
      Text015@1001 : TextConst 'DEU=Die E-Mail kann nicht angezeigt werden oder wurde gelîscht.;ENU=The email cannot be displayed or has been deleted.;NLD=De e-mail kan niet worden weergegeven of is verwijderd.;NOR=E-postmeldingen kan ikke vises eller er slettet.;SVE=E-postmeddelandet kan inte visas eller har tagits bort.';
      Text016@1011 : TextConst 'DEU=Wenn Sie die Arbeit an einem Dokument beendet haben, sollten Sie die zugehîrige temporÑre Datei lîschen. Beachten Sie, dass das Dokument dabei nicht gelîscht wird.\\Mîchten Sie die temporÑre Datei lîschen?;ENU=When you have finished working with a document, you should delete the associated temporary file. Please note that this will not delete the document.\\Do you want to delete the temporary file?;NLD=Als u klaar bent met een document, kunt u beter het gekoppelde tijdelijke bestand verwijderen. Merk op dat het document niet wordt verwijderd.\\Wilt u het tijdelijke bestand verwijderen?;NOR=NÜr du har arbeidet ferdig med et dokument skal du fjerne den tilknyttede midlertidige filen. Merk at dette ikke vil fjerne dokumentet.\\Vil du fjerne den midlertidige filen?;SVE=NÑr du har arbetat klart med ett dokument ska du ta bort den temporÑra filen. Observera att det kommer inte att ta bort dokumentet.\\Vill du ta bort den temporÑra filen?';
      Text020@1022 : TextConst 'DEU=Ein Outlook-Dialogfeld ist geîffnet. Schlie·en Sie es, und wiederholen Sie anschlie·end den Vorgang.;ENU=An Outlook dialog box is open. Close it and try again.;NLD=Er is een Outlook-dialoogvenster geopend. Sluit het dialoogvenster en probeer het opnieuw.;NOR=En Outlook-dialogboks er Üpen. Lukk den og prõv igjen.;SVE=En Outlook-dialogruta Ñr îppen. StÑng den och fîrsîk igen.';
      CouldNotActivateOutlookErr@1023 : TextConst
        '@@@=%1 - product name',
        'DEU=Verbindung zu Microsoft Outlook nicht mîglich. Falls Microsoft Outlook bereits ausgefÅhrt wird, muss sichergestellt werden, dass entweder %1 oder Microsoft Outlook nicht als Administrator ausgefÅhrt wird. Schlie·en Sie alle Instanzen von Microsoft Outlook, und versuchen Sie es noch einmal.',
        'ENU=Cannot connect to Microsoft Outlook. If Microsoft Outlook is already running, make sure that you are not running either %1 or Microsoft Outlook as administrator. Close all instances of Microsoft Outlook and try again.',
        'NLD=Kan geen verbinding maken met Microsoft Outlook. Als Microsoft Outlook al actief is, moet u zorgen dat u %1 of Microsoft Outlook niet als beheerder uitvoert. Sluit alle instanties van Microsoft Outlook en probeer het opnieuw.',
        'NOR=Kan ikke koble til Microsoft Outlook. Hvis Microsoft Outlook allerede kjõrer, mÜ du kontrollere at du ikke kjõrer %1 eller Microsoft Outlook som administrator. Lukk alle forekomster av Microsoft Outlook, og prõv pÜ nytt.',
        'SVE=Det gÜr inte att ansluta till Microsoft Outlook. Om Microsoft Outlook redan kîrs ska du kontrollera att du inte kîr %1 eller Microsoft Outlook som administratîr. StÑng alla instanser av Microsoft Outlook och fîrsîk igen.';
      UnspecifiedOutlookErr@1024 : TextConst 'DEU=" Microsoft Outlook kann die Nachricht nicht anzeigen. In Microsoft Outlook muss der Zugriff auf die Nachricht konfiguriert sein, die Sie îffnen mîchten.";ENU=" Microsoft Outlook cannot display the message. Make sure that Microsoft Outlook is configured with access to the message that you are trying to open.";NLD=" Microsoft Outlook kan het bericht niet weergeven. Zorg dat Microsoft Outlook is geconfigureerd met toegang tot het bericht dat u probeert te openen.";NOR=" Microsoft Outlook kan ikke vise meldingen. Kontroller at Microsoft Outlook er konfigurert med tilgang til meldingen du prõver Ü Üpne.";SVE=" Microsoft Outlook kan inte visa meddelandet. Se till att Microsoft Outlook har konfigurerats med Ütkomst till det meddelande som du fîrsîker îppna."';
      TempBlob@1020 : Record 99008535;
      RMSetup@1015 : Record 5079;
      FileMgt@1000 : Codeunit 419;
      AttachmentMgt@1021 : Codeunit 11072021;
      ClientTypeManagement@1077 : Codeunit 4030;
      AttachmentImportQst@1004 : TextConst 'DEU=Mîchten Sie den Anhang importieren?;ENU=Do you want to import attachment?;NLD=Wilt u de bijlage importeren?;NOR=Vil du importere vedlegget?;SVE=Vill du importera bilagan?';
      AttachmentExportQst@1016 : TextConst 'DEU=Mîchten Sie den Anhang exportieren, um ihn anzuzeigen oder extern zu bearbeiten?;ENU=Do you want to export attachment to view or edit it externaly?;NLD=Wilt u de bijlage exporteren om deze extern weer te geven of te bewerken?;NOR=Vil du eksportere vedlegg for Ü vise eller redigere det eksternt?;SVE=Vill du exportera bilagan fîr visning eller redigera den externt?';
      TemplateCode@1210190000 : Code[10];
      InteractionTemplateCode@1100528500 : Code[20];
      InteractionLogEntryNo@1100528800 : Integer;

    [Internal]
    PROCEDURE OpenAttachment@1(Caption@1000 : Text[260];IsTemporary@1001 : Boolean;LanguageCode@1100 : Code[10]);
    VAR
      SegmentLine@1003 : Record 11072040;
      WordManagement@1002 : Codeunit 11072023;
      FileName@1004 : Text;
    BEGIN
      IF IsHTML THEN BEGIN
        SegmentLine.INIT;
        SegmentLine."Language Code" := LanguageCode;
        SegmentLine.Date := WORKDATE;
        PreviewHTMLContent(SegmentLine);
        EXIT;
      END;

      IF "Storage Type" = "Storage Type"::Embedded THEN BEGIN
        CALCFIELDS("Attachment File");
        IF NOT "Attachment File".HASVALUE THEN
          ERROR(Text002);
      END;

      IF ClientTypeManagement.GetCurrentClientType IN [CLIENTTYPE::Web,CLIENTTYPE::Tablet,CLIENTTYPE::Phone] THEN
        ProcessWebAttachment(Caption + '.' + "File Extension")
      ELSE BEGIN
        FileName := ConstFilename;
        IF NOT DeleteFile(FileName) THEN
          ERROR(Text003);
        ExportAttachmentToClientFile(FileName);
        WordManagement.SetTemplateCode(TemplateCode); //**4PS.n
        IF WordManagement.IsWordDocumentExtension("File Extension") THEN
          WordManagement.OpenWordAttachment(Rec,FileName,Caption,IsTemporary,LanguageCode)
        ELSE BEGIN
          HYPERLINK(FileName);
          IF NOT "Read Only" THEN BEGIN
            IF CONFIRM(Text004,TRUE) THEN
              ImportAttachmentFromClientFile(FileName,IsTemporary,FALSE);
            DeleteFile(FileName);
          END ELSE
            IF CONFIRM(Text016,TRUE) THEN
              DeleteFile(FileName);
        END;
      END;
    END;

    [Internal]
    PROCEDURE ShowAttachment@6(VAR SegLine@1000 : Record 11072040;WordCaption@1001 : Text[260];IsTemporary@1002 : Boolean;Handler@1003 : Boolean);
    BEGIN
      RunAttachment(SegLine,WordCaption,IsTemporary,TRUE,Handler);
    END;

    [Internal]
    PROCEDURE RunAttachment@26(VAR SegLine@1000 : Record 11072040;WordCaption@1001 : Text[260];IsTemporary@1002 : Boolean;IsVisible@1004 : Boolean;Handler@1006 : Boolean);
    VAR
      WordManagement@1003 : Codeunit 11072023;
      WordApplicationHandler@1007 : Codeunit 5068;
      FileName@1005 : Text[260];
      IsHandled@1008 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeRunAttachment(SegLine,WordCaption,IsTemporary,IsVisible,Handler,IsHandled);
      IF IsHandled THEN
        EXIT;

      IF IsHTML THEN BEGIN
        PreviewHTMLContent(SegLine);
        EXIT;
      END;

      IF "Storage Type" = "Storage Type"::Embedded THEN
        CALCFIELDS("Attachment File");

      WordManagement.Activate(WordApplicationHandler,5062);
      IF ClientTypeManagement.GetCurrentClientType IN [CLIENTTYPE::Web,CLIENTTYPE::Tablet,CLIENTTYPE::Phone] THEN
        ProcessWebAttachment(WordCaption + '.' + "File Extension")
      ELSE
        IF NOT WordManagement.CanRunWordApp THEN
          ProcessWebAttachment(WordCaption + '.' + "File Extension")
        ELSE
          IF WordManagement.IsWordDocumentExtension("File Extension") THEN
          //**4PS.sn
          BEGIN
            WordManagement.SetTemplateCode(TemplateCode);
            WordManagement.SetInteractionLogEntryNo(InteractionLogEntryNo);
          //**4PS.en
            WordManagement.RunMergedDocument(SegLine,Rec,WordCaption,IsTemporary,IsVisible,Handler);
          END //**4PS.n
          ELSE BEGIN
            FileName := ConstFilename;
            ExportAttachmentToClientFile(FileName);
            HYPERLINK(FileName);
            IF NOT "Read Only" THEN BEGIN
              IF CONFIRM(Text004,TRUE) THEN
                ImportAttachmentFromClientFile(FileName,IsTemporary,FALSE);
              DeleteFile(FileName);
            END ELSE
              IF CONFIRM(Text016,TRUE) THEN
                DeleteFile(FileName);
          END;
      WordManagement.Deactivate(5062);
    END;

    LOCAL PROCEDURE PreviewHTMLContent@30(SegmentLine@1000 : Record 11072040);
    VAR
      ContentPreview@1002 : Page 5084;
    BEGIN
      ContentPreview.SetContent(AttachmentMgt.LoadHTMLContent(Rec,SegmentLine));
      ContentPreview.RUNMODAL;
    END;

    [Internal]
    PROCEDURE ExportAttachmentToClientFile@2(VAR ExportToFile@1000 : Text) : Boolean;
    VAR
      FileFilter@1003 : Text;
      ServerFileName@1001 : Text;
      Path@1002 : Text;
      Success@1004 : Boolean;
    BEGIN
      RMSetup.GET;
      IF RMSetup."Attachment Storage Type" = RMSetup."Attachment Storage Type"::"Disk File" THEN
        RMSetup.TESTFIELD("Attachment Storage Location");

      ServerFileName := FileMgt.ServerTempFileName("File Extension");
      ExportAttachmentToServerFile(ServerFileName);

      Path := FileMgt.Magicpath;
      IF ExportToFile = '' THEN BEGIN
        ExportToFile := FileMgt.GetFileName(FileMgt.ClientTempFileName("File Extension"));
        Path := '';
      END;

      FileFilter := UPPERCASE("File Extension") + ' (*.' + "File Extension" + ')|*.' + "File Extension";
      Success := DOWNLOAD(ServerFileName,Text005,Path,FileFilter,ExportToFile);
      FileMgt.DeleteServerFile(ServerFileName);
      EXIT(Success);
    END;

    [Internal]
    PROCEDURE ImportAttachmentFromClientFile@5(ImportFromFile@1000 : Text;IsTemporary@1001 : Boolean;IsInherited@1002 : Boolean) : Boolean;
    VAR
      FileName@1005 : Text;
      ServerFileName@1010 : Text;
      NewAttachmentNo@1003 : Integer;
    BEGIN
      CLEARLASTERROR;
      IF IsTemporary THEN
        EXIT(ImportTemporaryAttachmentFromClientFile(ImportFromFile));

      TESTFIELD("Read Only",FALSE);
      RMSetup.GET;
      IF RMSetup."Attachment Storage Type" = RMSetup."Attachment Storage Type"::"Disk File" THEN
        RMSetup.TESTFIELD("Attachment Storage Location");

      IF IsInherited THEN BEGIN
        NewAttachmentNo := AttachmentMgt.InsertAttachment("No.");
        GET(NewAttachmentNo);
      END ELSE
        IF "No." = 0 THEN
          NewAttachmentNo := AttachmentMgt.InsertAttachment(0)
        ELSE
          NewAttachmentNo := "No.";
      GET(NewAttachmentNo);

      // passing to UPLOAD function when only server path is specified, not ALSO the file name,
      // then function updates the server file path with the actual client name
      //**4PS.sn
      InteractionTemplateCode := "Interaction Template Code";
      //**4PS.en
      ServerFileName := TEMPORARYPATH;
      FileName := ImportFromFile;
      IF NOT UPLOAD(Text006,'',Text007,FileName,ServerFileName) THEN BEGIN
        IF GETLASTERRORTEXT <> '' THEN
          ERROR(Text008,GETLASTERRORTEXT);
        EXIT(FALSE);
      END;

      EXIT(ImportAttachmentFromServerFile(ServerFileName,FALSE,TRUE));
    END;

    LOCAL PROCEDURE ImportTemporaryAttachmentFromClientFile@21(ImportFromFile@1000 : Text) : Boolean;
    VAR
      FileName@1001 : Text;
    BEGIN
      FileName := FileMgt.BLOBImport(TempBlob,ImportFromFile);

      IF FileName <> '' THEN BEGIN
        "Attachment File" := TempBlob.Blob;
        "Storage Type" := "Storage Type"::Embedded;
        "Storage Pointer" := '';
        "File Extension" := COPYSTR(UPPERCASE(FileMgt.GetExtension(FileName)),1,250);
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    [Internal]
    PROCEDURE ExportAttachmentToServerFile@20(VAR ExportToFile@1000 : Text) : Boolean;
    BEGIN
      // This function assumes that CALCFIELDS on the attachment field has been called before
      RMSetup.GET;
      IF RMSetup."Attachment Storage Type" = RMSetup."Attachment Storage Type"::"Disk File" THEN
        RMSetup.TESTFIELD("Attachment Storage Location");

      CASE "Storage Type" OF
        "Storage Type"::Embedded:
          BEGIN
            IF "Attachment File".HASVALUE THEN BEGIN
              TempBlob.Blob := "Attachment File";
              IF ExportToFile = '' THEN
                ExportToFile := FileMgt.ServerTempFileName("File Extension");
              FileMgt.BLOBExportToServerFile(TempBlob,ExportToFile); // export BLOB to file on server (UNC location also)
              EXIT(TRUE);
            END;
            EXIT(FALSE);
          END;
        "Storage Type"::"Disk File":
          BEGIN
            IF ExportToFile = '' THEN
              ExportToFile := TEMPORARYPATH + FileMgt.GetFileName(ConstDiskFileName);
            FileMgt.CopyServerFile(GetServerFileName(ConstDiskFileName),ExportToFile,FALSE); // Copy from server location to another location (UNC location also)
            EXIT(TRUE);
          END;
      END;

      EXIT(FALSE);
    END;

    [Internal]
    PROCEDURE ImportAttachmentFromServerFile@19(ImportFromFile@1000 : Text;IsTemporary@1002 : Boolean;Overwrite@1001 : Boolean) : Boolean;
    VAR
      FileExt@1003 : Text[250];
    BEGIN
      IF IsTemporary THEN BEGIN
        ImportTemporaryAttachmentFromServerFile(ImportFromFile);
        EXIT(TRUE);
      END;

      IF NOT Overwrite THEN
        TESTFIELD("Read Only",FALSE);

      RMSetup.GET;
      IF RMSetup."Attachment Storage Type" = RMSetup."Attachment Storage Type"::"Disk File" THEN
        RMSetup.TESTFIELD("Attachment Storage Location");

      CASE RMSetup."Attachment Storage Type" OF
        RMSetup."Attachment Storage Type"::Embedded:
          BEGIN
            CLEAR(TempBlob);
            FileMgt.BLOBImportFromServerFile(TempBlob,ImportFromFile); // Copy from file on server (UNC location also)

            "Attachment File" := TempBlob.Blob;
            "Storage Type" := "Storage Type"::Embedded;
            "Storage Pointer" := '';
            FileExt := COPYSTR(FileMgt.GetExtension(ImportFromFile),1,250);
            IF FileExt <> '' THEN
              "File Extension" := FileExt;
            MODIFY(TRUE);
            EXIT(TRUE);
          END;
        "Storage Type"::"Disk File":
          BEGIN
            "Storage Type" := "Storage Type"::"Disk File";
          //"Storage Pointer" := RMSetup."Attachment Storage Location";  //**4PS.o
            //**4PS.sn
            "Storage Pointer" := FillStoragePointer;
            InteractionTemplateCode := "Interaction Template Code";
            //**4PS.en
            FileExt := COPYSTR(FileMgt.GetExtension(ImportFromFile),1,250);
            IF FileExt <> '' THEN
              "File Extension" := FileExt;
            FileMgt.CopyServerFile(ImportFromFile,ConstDiskFileName,Overwrite); // Copy from UNC location to another UNC location
            MODIFY(TRUE);
            EXIT(TRUE);
          END;
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE ImportTemporaryAttachmentFromServerFile@22(ImportFromFile@1000 : Text);
    BEGIN
      FileMgt.BLOBImportFromServerFile(TempBlob,ImportFromFile);
      "Attachment File" := TempBlob.Blob;
      "Storage Type" := "Storage Type"::Embedded;
      "Storage Pointer" := '';
      "File Extension" := COPYSTR(UPPERCASE(FileMgt.GetExtension(ImportFromFile)),1,250);
    END;

    [Internal]
    PROCEDURE RemoveAttachment@7(Prompt@1001 : Boolean) DeleteOK@1000 : Boolean;
    VAR
      DeleteYesNo@1002 : Boolean;
    BEGIN
      DeleteOK := FALSE;
      DeleteYesNo := TRUE;
      IF Prompt THEN
        IF NOT CONFIRM(
             Text009,FALSE,TABLECAPTION)
        THEN
          DeleteYesNo := FALSE;

      IF DeleteYesNo THEN BEGIN
        IF "Storage Type" = "Storage Type"::"Disk File" THEN
          IF NOT FileMgt.DeleteServerFile(ConstDiskFileName) THEN
            MESSAGE(Text010);
        DELETE(TRUE);
        DeleteOK := TRUE;
      END;
    END;

    [Internal]
    PROCEDURE WizEmbeddAttachment@4(FromAttachment@1000 : Record 11072030);
    BEGIN
      Rec := FromAttachment;
      "No." := 0;
      "Storage Type" := "Storage Type"::Embedded;
      FromAttachment.TESTFIELD("No.");
      CASE FromAttachment."Storage Type" OF
        FromAttachment."Storage Type"::"Disk File":
          ImportAttachmentFromServerFile(FromAttachment.ConstDiskFileName,TRUE,FALSE);
        FromAttachment."Storage Type"::Embedded:
          BEGIN
            FromAttachment.CALCFIELDS("Attachment File");
            IF FromAttachment."Attachment File".HASVALUE THEN
              "Attachment File" := FromAttachment."Attachment File";
          END;
      END;
    END;

    [External]
    PROCEDURE WizSaveAttachment@8();
    VAR
      Attachment2@1000 : Record 11072030;
    BEGIN
      WITH RMSetup DO BEGIN
        GET;
        IF "Attachment Storage Type" = "Attachment Storage Type"::Embedded THEN BEGIN
          "Storage Pointer" := '';
          EXIT;
        END;
      END;

      //"Storage Pointer" := RMSetup."Attachment Storage Location"; //**4PS.o
      "Storage Pointer" := FillStoragePointer;   //**4PS.n

      WITH Attachment2 DO BEGIN
        "No." := Rec."No.";
        "Storage Type" := "Storage Type"::"Disk File";
      //"Storage Pointer" := RMSetup."Attachment Storage Location";  //**4PS.o
        "Storage Pointer" := FillStoragePointer; //**4PS.n
        "File Extension" := Rec."File Extension";
        "Read Only" := Rec."Read Only";
        "Last Date Modified" := Rec."Last Date Modified";
        "Last Time Modified" := Rec."Last Time Modified";
      END;
      CLEAR(Rec);
      Rec := Attachment2;
    END;

    LOCAL PROCEDURE DeleteFile@10(FileName@1001 : Text) : Boolean;
    VAR
      I@1002 : Integer;
    BEGIN
      IF FileName = '' THEN
        EXIT(FALSE);

      IF NOT FileMgt.ClientFileExists(FileName) THEN
        EXIT(TRUE);

      REPEAT
        SLEEP(250);
        I := I + 1;
      UNTIL FileMgt.DeleteClientFile(FileName) OR (I = 25);
      EXIT(NOT FileMgt.ClientFileExists(FileName));
    END;

    [Internal]
    PROCEDURE ConstFilename@9() FileName@1000 : Text;
    BEGIN
      FileName := FileMgt.ClientTempFileName("File Extension");
    END;

    [External]
    PROCEDURE ConstDiskFileName@3() DiskFileName@1000 : Text;
    BEGIN
      DiskFileName := "Storage Pointer" + '\' + FORMAT("No.") + '.' + "File Extension";
    END;

    [External]
    PROCEDURE CheckCorrespondenceType@11(CorrespondenceType@1001 : ' ,Hard Copy,Email,Fax') : Text[80];
    BEGIN
      CASE CorrespondenceType OF
        CorrespondenceType::"Hard Copy":
          IF (UPPERCASE("File Extension") <> 'DOC') AND (UPPERCASE("File Extension") <> 'DOCX') THEN
            EXIT(Text013);
        CorrespondenceType::Fax:
          IF (UPPERCASE("File Extension") <> 'DOC') AND (UPPERCASE("File Extension") <> 'DOCX') THEN
            EXIT(Text014);
      END;
    END;

    [External]
    PROCEDURE LinkToMessage@12(MessageID@1006 : Text;EntryID@1000 : Text;RunTrigger@1001 : Boolean);
    BEGIN
      "Storage Type" := "Storage Type"::"Exchange Storage";
      "Read Only" := TRUE;

      SetMessageID(MessageID);
      SetEntryID(EntryID);

      MODIFY(RunTrigger);
    END;

    [Internal]
    PROCEDURE DisplayInOutlook@13();
    VAR
      OutlookHelper@1000 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Outlook.OutlookHelper" RUNONCLIENT;
      Status@1002 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Outlook.OutlookStatusCode" RUNONCLIENT;
    BEGIN
      Status := OutlookHelper.DisplayMailFromPublicFolder(GetEntryID);

      IF Status.Equals(Status.CouldNotActivateOutlook) THEN
        ERROR(CouldNotActivateOutlookErr,PRODUCTNAME.FULL);

      IF Status.Equals(Status.ModalDialogOpened) THEN
        ERROR(Text020);

      IF Status.Equals(Status.ItemNotFound) THEN
        ERROR(Text015);

      // If the Exchange Entry Id requires patching to be used in Outlook
      // then we update the entry id.
      IF Status.Equals(Status.OkAfterExchange2013Patch) THEN BEGIN
        SetMessageID(OutlookHelper.PatchExchange2013WebServicesPublicFolderItemEntryId(GetEntryID));
        MODIFY(TRUE);
      END ELSE
        IF NOT Status.Equals(Status.Ok) THEN
          ERROR(UnspecifiedOutlookErr);
    END;

    [External]
    PROCEDURE Checksum@14(MessageID@1000 : Text) ChecksumValue : Integer;
    VAR
      CharNo@1002 : Integer;
      DecValue@1003 : Decimal;
      MaxInteger@1004 : Integer;
    BEGIN
      RANDOMIZE(1);
      MaxInteger := 2147483647;

      FOR CharNo := 1 TO STRLEN(MessageID) DO
        DecValue := (DecValue + (((MessageID[CharNo] MOD 43) + 1) * RANDOM((MaxInteger DIV 44)))) MOD MaxInteger;
      ChecksumValue := DecValue;
    END;

    [External]
    PROCEDURE GetMessageID@15() Return : Text;
    VAR
      Stream@1000 : InStream;
    BEGIN
      CALCFIELDS("Email Message ID");
      "Email Message ID".CREATEINSTREAM(Stream);
      Stream.READTEXT(Return);
    END;

    [External]
    PROCEDURE SetMessageID@16(MessageID@1000 : Text);
    VAR
      Stream@1001 : OutStream;
    BEGIN
      CLEAR("Email Message ID");
      "Email Message ID".CREATEOUTSTREAM(Stream);
      Stream.WRITETEXT(MessageID);
      "Email Message Checksum" := Checksum(MessageID);
    END;

    LOCAL PROCEDURE GetEntryID@17() Return : Text;
    VAR
      Stream@1000 : InStream;
    BEGIN
      CALCFIELDS("Email Entry ID");
      "Email Entry ID".CREATEINSTREAM(Stream);
      Stream.READTEXT(Return);
    END;

    [External]
    PROCEDURE SetEntryID@18(EntryID@1000 : Text);
    VAR
      Stream@1001 : OutStream;
    BEGIN
      CLEAR("Email Entry ID");
      "Email Entry ID".CREATEOUTSTREAM(Stream);
      Stream.WRITETEXT(EntryID);
    END;

    [External]
    PROCEDURE Read@28() Result : Text;
    VAR
      DataStream@1000 : InStream;
    BEGIN
      Result := '';
      CALCFIELDS("Attachment File");
      IF NOT "Attachment File".HASVALUE THEN
        EXIT;

      "Attachment File".CREATEINSTREAM(DataStream,TEXTENCODING::UTF8);
      DataStream.READ(Result);
    END;

    [External]
    PROCEDURE Write@29(SourceText@1000 : Text);
    VAR
      DataStream@1001 : OutStream;
    BEGIN
      "Attachment File".CREATEOUTSTREAM(DataStream,TEXTENCODING::UTF8);
      DataStream.WRITE(SourceText);
    END;

    [External]
    PROCEDURE ReadHTMLCustomLayoutAttachment@37(VAR ContentBodyText@1002 : Text;VAR CustomLayoutCode@1003 : Code[20]) : Boolean;
    VAR
      DataText@1001 : Text;
    BEGIN
      DataText := Read;
      EXIT(ParseHTMLCustomLayoutAttachment(DataText,ContentBodyText,CustomLayoutCode));
    END;

    [External]
    PROCEDURE WriteHTMLCustomLayoutAttachment@32(ContentBodyText@1001 : Text;CustomLayoutCode@1000 : Code[20]);
    VAR
      DataText@1002 : Text;
    BEGIN
      DataText := PADSTR('',GetCustomLayoutCodeLength - STRLEN(CustomLayoutCode),'0') + CustomLayoutCode;
      DataText += ContentBodyText;
      Write(DataText);
      MODIFY;
    END;

    LOCAL PROCEDURE ParseHTMLCustomLayoutAttachment@31(DataText@1000 : Text;VAR ContentBodyText@1002 : Text;VAR CustomLayoutCode@1001 : Code[20]) : Boolean;
    VAR
      TotalLength@1003 : Integer;
      LayoutIDLength@1004 : Integer;
    BEGIN
      LayoutIDLength := GetCustomLayoutCodeLength;
      TotalLength := STRLEN(DataText);
      IF TotalLength < LayoutIDLength THEN
        EXIT(FALSE);

      IF DataText = '' THEN
        EXIT;

      CustomLayoutCode := DELCHR(COPYSTR(DataText,1,LayoutIDLength),'<','0');
      IF CustomLayoutCode = '' THEN
        EXIT;

      IF TotalLength = LayoutIDLength THEN
        ContentBodyText := ''
      ELSE
        ContentBodyText := COPYSTR(DataText,LayoutIDLength + 1,TotalLength - LayoutIDLength);

      EXIT(TRUE);
    END;

    [External]
    PROCEDURE IsHTML@23() : Boolean;
    BEGIN
      EXIT(LOWERCASE("File Extension") = 'html');
    END;

    [External]
    PROCEDURE IsHTMLReady@25() : Boolean;
    VAR
      DataText@1000 : Text;
      DataLength@1002 : Integer;
      HTMLMask@1001 : Text;
      HTMLMaskLength@1003 : Integer;
    BEGIN
      IF NOT IsHTML THEN
        EXIT(FALSE);

      HTMLMask := '<html>';
      HTMLMaskLength := STRLEN(HTMLMask);
      DataText := Read;
      DataLength := STRLEN(DataText);

      IF DataLength < HTMLMaskLength THEN
        EXIT(FALSE);

      EXIT(LOWERCASE(COPYSTR(DataText,1,HTMLMaskLength)) = HTMLMask);
    END;

    [External]
    PROCEDURE IsHTMLCustomLayout@24() : Boolean;
    VAR
      DataText@1002 : Text;
      DataLength@1001 : Integer;
      CustomLayoutIDLength@1000 : Integer;
      CustomLayoutCode@1003 : Code[20];
    BEGIN
      CustomLayoutIDLength := GetCustomLayoutCodeLength;
      IF NOT IsHTML THEN
        EXIT(FALSE);

      DataText := Read;
      DataLength := STRLEN(DataText);

      IF DataLength < CustomLayoutIDLength THEN
        EXIT(FALSE);

      CustomLayoutCode := DELCHR(DataText,'<','0');
      EXIT(CustomLayoutCode <> '');
    END;

    LOCAL PROCEDURE GetCustomLayoutCodeLength@42() : Integer;
    VAR
      DummyCustomReportLayout@1000 : Record 9650;
    BEGIN
      EXIT(MAXSTRLEN(DummyCustomReportLayout.Code));
    END;

    LOCAL PROCEDURE ProcessWebAttachment@27(FileName@1000 : Text);
    BEGIN
      IF CONFIRM(AttachmentExportQst,TRUE) THEN BEGIN
        TempBlob.Blob := "Attachment File";
        FileMgt.BLOBExport(TempBlob,FileName,TRUE);
        IF NOT "Read Only" THEN
          IF CONFIRM(AttachmentImportQst,TRUE) THEN
            ImportAttachmentFromClientFile('',ISTEMPORARY,FALSE);
      END
    END;

    [External]
    PROCEDURE GetServerFileName@33(DiskFileName@1000 : Text) : Text;
    BEGIN
      IF NOT EXISTS(DiskFileName) THEN
        DiskFileName := DELCHR(DiskFileName,'>','.' + "File Extension");
      EXIT(DiskFileName);
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeRunAttachment@34(VAR SegLine@1004 : Record 11072040;WordCaption@1003 : Text[260];IsTemporary@1002 : Boolean;IsVisible@1001 : Boolean;Handler@1000 : Boolean;VAR iSHandled@1005 : Boolean);
    BEGIN
    END;

    PROCEDURE SetTemplateCode@1210190000(lTemplateCode@1210190001 : Code[10]);
    BEGIN
      //**4PS
      TemplateCode := lTemplateCode;
    END;

    PROCEDURE FillStoragePointer@1100485000() StoragePointer : Text[250];
    VAR
      InteractionTemplateRec@1100485001 : Record 11072032;
      SecureDirectory@1100485000 : Text[250];
    BEGIN
      //**4PS
      StoragePointer := '';
      RMSetup.GET;
      IF RMSetup."Attachment Storage Type" = "Storage Type"::"Disk File" THEN BEGIN
        RMSetup.TESTFIELD("Attachment Storage Location");
        StoragePointer := RMSetup."Attachment Storage Location";

        SecureDirectory := '';
        IF "Interaction Template Code" <> '' THEN BEGIN
          InteractionTemplateRec.GET("Interaction Template Code");
          IF (InteractionTemplateRec."Secured Document" = InteractionTemplateRec."Secured Document"::Always) AND
             (InteractionTemplateRec."Secured Document Directory" <> '' ) THEN BEGIN
            SecureDirectory := InteractionTemplateRec."Secured Document Directory"
          END;
        END;

        IF SecureDirectory <> '' THEN
          StoragePointer := SecureDirectory;
      END;
    END;

    PROCEDURE SetInteractionLogEntryNo@1100528800(IInteractionLogEntryNo@1100528800 : Integer);
    BEGIN
      //**4PS
      InteractionLogEntryNo := IInteractionLogEntryNo;
    END;

    BEGIN
    END.
  }
}

