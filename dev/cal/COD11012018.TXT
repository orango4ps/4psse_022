OBJECT Codeunit 11012018 Import IBIS-Trad/Infra TXT
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1210190001 : TextConst 'DEU=Datei mit Budgetzeilen besteht nicht: %1;ENU=File with Budget Lines does not exist: %1;NLD=File met begrotingsregels bestaat niet: %1;NOR=Fil med Budsjettrader finnes ikke: %1;SVE=Fil med budgetrader finns inte: %1';
      Text001@1210190002 : TextConst 'DEU=Datei mit Stunden/Faktoren besteht nicht: %1;ENU=File with Hours/Factor does not exist: %1;NLD=File met uren/factoren bestaat niet: %1;NOR=Fil med timer/Faktor finnes ikke: %1;SVE=Fil med timmar/faktor finns inte: %1';
      Text002@1210190003 : TextConst 'DEU=Datei mit allgemeinen Daten besteht nicht: %1;ENU=File with General Data does not exist: %1;NLD=File met algemene gegevens bestaat niet: %1;NOR=Fil med generelle data finnes ikke: %1;SVE=Fil med allmÑnna data finns inte: %1';
      GenLedgSetup@1210190033 : Record 98;
      ProjBudgetRec@1210190020 : Record 11012001;
      OptBudgetRec@1210190035 : Record 11012503;
      InStreamStrm@1210190005 : InStream;
      BudgetType@1100485007 : Code[3];
      gProjectCde@1100525000 : Code[20];
      IbisVersion@1100485004 : Text[10];
      Txt@1210190006 : Text[1024];
      RecordCode1Txt@1210190008 : Text[8];
      Text003@1210190009 : TextConst 'DEU=Gelieferte Daten wurden nicht mit Trad-Version 5.00 erstellt.;ENU=Data to be imported is not created with Trad-Version 5.00;NLD=Aangeleverde gegevens zijn niet aangemaakt met Trad-versie 5.00;NOR=Data som skal importeres har ikke blitt laget med Trad-Version 5.00;SVE=Data som ska importeras har inte skapats med Trad-Version 5.00';
      Text004@1210190011 : TextConst 'DEU=Art Budget %1 ist keine traditionelle Trad-Kalkulation;ENU=Budget Type is not of traditional Trad Estimate;NLD=Type begroting %1 is geen traditionele Trad calculatie;NOR=Budsjettypeer ikke av tradisjonell Katalogkalkyle;SVE=Budgettyp Ñr inte traditionell skaffningskalkyl';
      AmntTxt@1210190013 : Text[80];
      NetTotDec@1210190014 : Decimal;
      BrutoTotDec@1100485003 : Decimal;
      HoursDec@1210190015 : Decimal;
      LaborDec@1210190016 : Decimal;
      MaterialDec@1210190017 : Decimal;
      PlantDec@1210190018 : Decimal;
      SubcDec@1210190019 : Decimal;
      Text005@1210190021 : TextConst 'DEU=Summe Arbeit;ENU=Total Labor;NLD=Totaal Arbeid;NOR=Total arbeidskraft;SVE=Total arbetskraft';
      Text006@1210190022 : TextConst 'DEU=Summe Arbeit %1 stimmt nicht mit importiertem Betrag %2 Åberein;ENU=Total Labor %1 does not match imported amount for labor %2;NLD=Totaal arbeid %1 komt niet overeen met ingelezen bedrag %2;NOR=Total arbeidskraft %1 stemmer  ikke overens med importert antall for arbeidskraft %2;SVE=Total arbetskraft %1 stÑmmer inte îverens med importerat belopp fîr arbetskraften %2';
      Text007@1210190023 : TextConst 'DEU=Summe Material;ENU=Total Material;NLD=Totaal Materiaal;NOR=Totalt materiale;SVE=Totalt material';
      Text008@1210190024 : TextConst 'DEU=Summe Material %1 stimmt nicht mit importiertem Betrag %2 Åberein;ENU=Total material %1 does not match imported amount for material %2;NLD=Totaal materiaal %1 komt niet overeen met ingelezen bedrag %2;NOR=Totalt Materiale %1 stemmer ikke overens med importert belõp for Materiale %2.;SVE=Totalt material %1 stÑmmer inte îverens med importerat belopp fîr material %2';
      Text009@1210190025 : TextConst 'DEU=Summe Subunternehmen;ENU=Total Subcontracting;NLD=Totaal Onderaanneming;NOR=Underleverandõr Total;SVE=Underentreprenad totalt';
      Text010@1210190026 : TextConst 'DEU=Summe Subunternehmen %1 stimmt nicht mit importiertem Betrag %2 Åberein;ENU=Total Subcontracting %1 does not match imported amount for subcontracting %2;NLD=Totaal onderaanneming %1 komt niet overeen met ingelezen bedrag %2;NOR=Underlevereandõr Total %1 stemmer ikke overens med importert antall for Underleverandõr %2;SVE=Underentreprenad totalt %1 stÑmmer inte îverens med importerat belopp fîr underentreprenad %2';
      Text011@1210190027 : TextConst 'DEU=Summe Stunden;ENU=Total Hours;NLD=Totaal Uren;NOR=Timer totalt;SVE=Timmar totalt';
      Text012@1210190028 : TextConst 'DEU=Summe Stunden %1 stimmt nicht mit importierter Anzahl %2 Åberein;ENU=Total Hours %1 does not match imported amount for hours %2;NLD=Totaal uren %1 komt niet overeen met ingelezen aantal %2;NOR=Timer totalt %1 stemmer ikke overens med Importert antall for timer %1;SVE=Timmar totalt %1 stÑmmer inte îverens med importerat belopp fîr timmar %2';
      Text013@1210190029 : TextConst 'DEU=Gesamtbudget;ENU=Total Budget;NLD=Totaal Begroting;NOR=Budsjett Total;SVE=Total budget';
      Text014@1210190030 : TextConst 'DEU=Summe Budget %1 stimmt nicht mit importiertem Betrag %2 Åberein;ENU=Total Amount %1 does not match imported amount  %2;NLD=Totaal begroting %1 komt niet overeen met ingelezen bedrag %2;NOR=Totalt belõp %1 stemmer ikke overens med Importert belõp %2;SVE=Totalbeloppet %1 stÑmmer inte îverens med det importerade beloppet %2';
      Text015@1210190031 : TextConst 'DEU=Summe Werkzeug;ENU=Total Plant;NLD=Totaal Materieel;NOR=Maskin total;SVE=Maskin totalt';
      Text016@1210190032 : TextConst 'DEU=Summe Werkzeug %1 stimmt nicht mit importiertem Betrag %2 Åberein;ENU=Total Plant %1 does not match imported amount for plant %2;NLD=Totaal materieel %1 komt niet overeen met ingelezen bedrag %2;NOR=Maskin total stemmer ikke overens med importert belõp for maskin %2;SVE=Maskin totalt %1 stÑmmer inte îverens med importerat belopp fîr Maskinen %2';
      Text017@1210190034 : TextConst 'DEU=WÑhrung des Budgets weicht von der lokalen WÑhrung ab;ENU=Currceny Budget differs from Local Currency;NLD=Valuta begroting wijkt af van locale valuta;NOR=Valutabudsjettet stemmer ikke med Lokal Valuta;SVE=Valutabudgeten skiljer sig frÜn lokal valuta';
      Text018@1100485001 : TextConst 'DEU=Gelieferte Daten wurden nicht mit Ibis Infra erstellt.;ENU=Data to be imported is not created with Ibis Infra;NLD=Aangeleverde gegevens zijn niet aangemaakt met Ibis Infra;NOR=Data som skal importeres har ikke blitt laget med Ibis Infra;SVE=Data som ska importeras har inte skapats med Ibis Infra';
      Text019@1100485000 : TextConst 'DEU=Art Budget %1 ist keine traditionelle Trad-Kalkulation;ENU=Budget Type is not of traditional Trad Estimate;NLD=Type begroting is geen traditionele Ibis Infra calculatie;NOR=Budsjettypeer ikke av tradisjonell Katalogkalkyle;SVE=Budgettyp Ñr inte traditionell skaffningskalkyl';
      Text020@1100485002 : TextConst 'DEU=Die Kalkulation wurde nicht weiter berechnet;ENU=The Estimate is not calculated;NLD=De calculatie is niet doorgerekend;NOR=Kalkylen er ikke beregnet;SVE=Kalkylen har inte berÑknats';
      Text021@1100485005 : TextConst 'DEU=Version unbekannt, Datei kann nicht gelesen werden.;ENU=Version unknown, file can not be read.;NLD=Versie onbekend, bestand kan niet ingelezen worden.;NOR=Ukjent versjon, filen kan ikke leses;SVE=OkÑnd version, filen kan inte lÑsas.';
      Text022@1100485006 : TextConst 'DEU=Gelieferte Daten wurden nicht mit Trad Version 6, Update 20 (oder hîher) erstellt.;ENU=Data to be imported is not created with Trad-Version 6.20;NLD=Aangeleverde gegevens zijn niet aangemaakt met Trad versie 6, update 20 (of hoger);NOR=Data som skal importeres har ikke blitt laget med Trad-Version 6.20;SVE=Data som ska importeras har inte skapats med Trad-Version 6.20';
      SettlementQuantityCde@1100528201 : Code[20];
      FromSettlementQuantity@1100528200 : Boolean;
      SettlementQuantityBudget@1100528202 : Record 11072244;
      Text023@1100528500 : TextConst 'DEU=Selektiere die Datei mit den allgemeinen Daten...;ENU=Select the file with the general information;NLD=Selecteer het bestand met de algemene gegevens...';
      Text024@1100528501 : TextConst 'DEU=Selektiere die Datei mit den Budgetzeilen...;ENU=Select the file with the budget lines;NLD=Selecteer het bestand met de begrotingsregels...';

    [External]
    PROCEDURE ImportTradTxtBudget@1210190001(lProjectCde@1210190004 : Code[20];lAdjustmentCde@1210190003 : Code[10];lExtensionCde@1210190002 : Code[10];lHouseModelCde@1210190009 : Code[20];lMainGroupCde@1210190008 : Code[20];lGroupCde@1210190007 : Code[20];lSubGroupCde@1210190006 : Code[20];lOptionCde@1210190001 : Code[20];lFolder@1100485002 : Text[250];lFileName@1210190000 : Text[100];lPlotCde@1100485000 : Code[20];lElementOptout@1100485003 : Boolean);
    VAR
      TempBlob@1100525001 : Record 99008535;
      FileMgt@1100525000 : Codeunit 419;
      ClientTypeManagement@1100528500 : Codeunit 4;
      ImportTradTxt500@1100525003 : XMLport 11012393;
      ImportTradTxt620@1100525004 : XMLport 11012396;
      IStream@1100525002 : InStream;
      FromFile@1100528501 : Text;
    BEGIN
      gProjectCde := lProjectCde;
      TestFilesExist(lFolder,lFileName);
      ImportGeneralData(lFolder,lFileName,0);
      IbisVersion := INSSTR(IbisVersion, '.', 2);
      CASE IbisVersion OF
        '5.00':
          BEGIN
            IF FromSettlementQuantity THEN
              ImportTradTxt500.SetDefaultsSettlQuantity(SettlementQuantityCde);
            ImportTradTxt500.DetermineSelection(
              lProjectCde,lAdjustmentCde,lExtensionCde,lHouseModelCde,lMainGroupCde,lGroupCde,
              lSubGroupCde,lOptionCde,lFolder,lFileName,lPlotCde,IbisVersion,lElementOptout);
            IF NOT ClientTypeManagement.IsCommonWebClientType THEN BEGIN
              FileMgt.BLOBImport4PS(TempBlob, lFolder + 'b' + lFileName + '.txt', FALSE);
              TempBlob.Blob.CREATEINSTREAM(IStream);
            END ELSE
              IF NOT UPLOADINTOSTREAM(Text024, '', '', FromFile, IStream) THEN
                ERROR('');
            ImportTradTxt500.SETSOURCE(IStream);
            ImportTradTxt500.IMPORT;
          END;
        '6.20'..'6.99':          //* So now the whole version-6 series from 6.20
          BEGIN
            IF FromSettlementQuantity THEN
              ImportTradTxt620.SetDefaultsSettlQuantity(SettlementQuantityCde);
            ImportTradTxt620.DetermineSelection(
              lProjectCde,lAdjustmentCde,lExtensionCde,lHouseModelCde,lMainGroupCde,lGroupCde,
              lSubGroupCde,lOptionCde,lFolder,lFileName,lPlotCde,IbisVersion,BudgetType,lElementOptout);
            IF NOT ClientTypeManagement.IsCommonWebClientType THEN BEGIN
              FileMgt.BLOBImport4PS(TempBlob, lFolder + 'b' + lFileName + '.txt', FALSE);
              TempBlob.Blob.CREATEINSTREAM(IStream);
            END ELSE
              IF NOT UPLOADINTOSTREAM(Text024, '', '', FromFile, IStream) THEN
                ERROR('');
            ImportTradTxt620.SETSOURCE(IStream);
            ImportTradTxt620.IMPORT;
          END;
      END;

      IF (lOptionCde = '') AND (SettlementQuantityCde = '') THEN BEGIN
        ProjBudgetRec.SETRANGE("Project No.",lProjectCde);
        ProjBudgetRec.SETRANGE("Adjustment Filter",lAdjustmentCde);
        ProjBudgetRec.SETRANGE("Extension Filter",lExtensionCde);
        ProjBudgetRec.SETRANGE("Option Filter",lOptionCde);
        IF ProjBudgetRec.FINDFIRST THEN BEGIN
          ProjBudgetRec.CALCFIELDS("Total Labor","Total material","Total Subcontracting","Total Plant",
            "Total Hours","Total Amount");
          IF ROUND(ABS(ProjBudgetRec."Total Labor" - LaborDec), 1) > 0 THEN
            StoreMessage(Text005,STRSUBSTNO(Text006,LaborDec,ProjBudgetRec."Total Labor"));
          IF ROUND(ABS(ProjBudgetRec."Total material" - MaterialDec), 1) > 0 THEN
            StoreMessage(Text007,STRSUBSTNO(Text008,MaterialDec,ProjBudgetRec."Total material"));
          IF ROUND(ABS(ProjBudgetRec."Total Subcontracting" - SubcDec), 1) > 0 THEN
            StoreMessage(Text009,STRSUBSTNO(Text010,SubcDec,ProjBudgetRec."Total Subcontracting"));
          IF ROUND(ABS(ProjBudgetRec."Total Plant" - PlantDec), 1) > 0 THEN
            StoreMessage(Text015,STRSUBSTNO(Text016,PlantDec,ProjBudgetRec."Total Plant"));
          IF ROUND(ABS(ProjBudgetRec."Total Hours" - HoursDec), 1) > 0 THEN
            StoreMessage(Text011,STRSUBSTNO(Text012,HoursDec,ProjBudgetRec."Total Hours"));
          IF ROUND(ABS(ProjBudgetRec."Total Amount" - NetTotDec), 1) > 0 THEN
            StoreMessage(Text013,STRSUBSTNO(Text014,NetTotDec,ProjBudgetRec."Total Amount"));
        END;
      END;//  ELSE BEGIN
      IF (lOptionCde <> '') AND (SettlementQuantityCde = '') THEN BEGIN
        OptBudgetRec.SETRANGE("Project No.",lProjectCde);
        IF lPlotCde <> '' THEN
          OptBudgetRec.SETRANGE("Plot No.",lPlotCde)
        ELSE
          OptBudgetRec.SETFILTER("Plot No.",'%1','');
        OptBudgetRec.SETRANGE("House Model",lHouseModelCde);
        OptBudgetRec.SETRANGE("Main Group",lMainGroupCde);
        OptBudgetRec.SETRANGE(Group,lGroupCde);
        OptBudgetRec.SETRANGE("Sub Group",lSubGroupCde);
        OptBudgetRec.SETRANGE(Option,lOptionCde);
        IF OptBudgetRec.FINDSET(FALSE, FALSE) THEN BEGIN
          OptBudgetRec.CALCFIELDS("Total Labor","Total Material","Total Subcontracting","Total Plant",
            "Total Hours","Total Amount");
                  IF OptBudgetRec."Total Labor" <> LaborDec THEN
          IF ROUND(ABS(OptBudgetRec."Total Labor" - LaborDec), 1) > 0 THEN
            StoreMessage(Text005,STRSUBSTNO(Text006,LaborDec,OptBudgetRec."Total Labor"));
          IF ROUND(ABS(OptBudgetRec."Total Material" - MaterialDec), 1) > 0 THEN
            StoreMessage(Text007,STRSUBSTNO(Text008,MaterialDec,OptBudgetRec."Total Material"));
          IF ROUND(ABS(OptBudgetRec."Total Subcontracting" - SubcDec), 1) > 0 THEN
            StoreMessage(Text009,STRSUBSTNO(Text010,SubcDec,OptBudgetRec."Total Subcontracting"));
          IF ROUND(ABS(OptBudgetRec."Total Plant" - PlantDec), 1) > 0 THEN
            StoreMessage(Text015,STRSUBSTNO(Text016,PlantDec,OptBudgetRec."Total Plant"));
          IF ROUND(ABS(OptBudgetRec."Total Hours" - HoursDec), 1) > 0 THEN
            StoreMessage(Text011,STRSUBSTNO(Text012,HoursDec,OptBudgetRec."Total Hours"));
          IF ROUND(ABS(OptBudgetRec."Total Amount" - NetTotDec), 1) > 0 THEN
            StoreMessage(Text013,STRSUBSTNO(Text014,NetTotDec,OptBudgetRec."Total Amount"));
        END;
      END;

      IF (lOptionCde = '') AND (SettlementQuantityCde <> '') THEN BEGIN
        SettlementQuantityBudget.SETRANGE("Project No.",lProjectCde);
        SettlementQuantityBudget.SETRANGE("Settlement Quantity Code",SettlementQuantityCde);
        IF SettlementQuantityBudget.FINDSET(FALSE, FALSE) THEN BEGIN
          SettlementQuantityBudget.CALCFIELDS("Total Labor","Total Material","Total Subcontracting","Total Plant",
            "Total Hours","Total Amount");
          IF ROUND(ABS(SettlementQuantityBudget."Total Labor" - LaborDec), 1) > 0 THEN
              StoreMessage(Text005,STRSUBSTNO(Text006,LaborDec,SettlementQuantityBudget."Total Labor"));
          IF ROUND(ABS(SettlementQuantityBudget."Total Material" - MaterialDec), 1) > 0 THEN
            StoreMessage(Text007,STRSUBSTNO(Text008,MaterialDec,SettlementQuantityBudget."Total Material"));
          IF ROUND(ABS(SettlementQuantityBudget."Total Subcontracting" - SubcDec), 1) > 0 THEN
            StoreMessage(Text009,STRSUBSTNO(Text010,SubcDec,SettlementQuantityBudget."Total Subcontracting"));
          IF ROUND(ABS(SettlementQuantityBudget."Total Plant" - PlantDec), 1) > 0 THEN
            StoreMessage(Text015,STRSUBSTNO(Text016,PlantDec,SettlementQuantityBudget."Total Plant"));
          IF ROUND(ABS(SettlementQuantityBudget."Total Hours" - HoursDec), 1) > 0 THEN
            StoreMessage(Text011,STRSUBSTNO(Text012,HoursDec,SettlementQuantityBudget."Total Hours"));
          IF ROUND(ABS(SettlementQuantityBudget."Total Amount" - NetTotDec), 1) > 0 THEN
            StoreMessage(Text013,STRSUBSTNO(Text014,NetTotDec,SettlementQuantityBudget."Total Amount"));
        END;
      END;
    END;

    [External]
    PROCEDURE ImportIbisInfraBudget@1100485000(lProjectCde@1210190004 : Code[20];lAdjustmentCde@1210190003 : Code[10];lExtensionCde@1210190002 : Code[10];lOnlyBudgetLines@1100485000 : Boolean;lFolder@1100485001 : Text[250];lFileName@1210190000 : Text[100]);
    VAR
      TempBlob@1100525500 : Record 99008535;
      FileMgt@1100525501 : Codeunit 419;
      ClientTypeManagement@1100528500 : Codeunit 4;
      ImportIBISInfraBudget@1100525502 : XMLport 11012275;
      IStream@1100525503 : InStream;
      FromFile@1100528501 : Text;
    BEGIN
      gProjectCde := lProjectCde;
      TestFilesExist(lFolder,lFileName);
      ImportGeneralData(lFolder,lFileName,1);
      ImportIBISInfraBudget.SetSelections(
        lProjectCde,lAdjustmentCde,lExtensionCde,lOnlyBudgetLines,lFolder,lFileName);
      IF NOT ClientTypeManagement.IsCommonWebClientType THEN BEGIN
        FileMgt.BLOBImport4PS(TempBlob, lFolder + 'b' + lFileName + '.txt', FALSE);
        TempBlob.Blob.CREATEINSTREAM(IStream);
      END ELSE
        IF NOT UPLOADINTOSTREAM(Text024, '', '', FromFile, IStream) THEN
          ERROR('');
      ImportIBISInfraBudget.SETSOURCE(IStream);
      ImportIBISInfraBudget.IMPORT;

      ProjBudgetRec.SETRANGE("Project No.",lProjectCde);
      ProjBudgetRec.SETRANGE("Adjustment Filter",lAdjustmentCde);
      ProjBudgetRec.SETRANGE("Extension Filter",lExtensionCde);
      ProjBudgetRec.SETRANGE("Option Filter",'');
      IF ProjBudgetRec.FINDSET(FALSE,FALSE) THEN BEGIN
        //Only Check total amount. Amounts per cost type can be exchanged during import.
        ProjBudgetRec.CALCFIELDS("Total Amount");
        IF ROUND(ABS(ProjBudgetRec."Total Amount" - BrutoTotDec), 1) > 0 THEN
          StoreMessage(Text013,STRSUBSTNO(Text014,BrutoTotDec,ProjBudgetRec."Total Amount"));
      END;
    END;

    [External]
    PROCEDURE TestFilesExist@1210190002(lFolder@1100485003 : Text[250];lFileName@1210190000 : Text[100]);
    VAR
      FileMgt@1100525000 : Codeunit 419;
      ClientTypeManagement@1100528500 : Codeunit 4;
      lvFileName1@1100485000 : Text[250];
      lvFileName3@1100485002 : Text[250];
    BEGIN
      IF ClientTypeManagement.IsCommonWebClientType THEN
        EXIT;
      lvFileName1 := lFolder + 'b' + lFileName + '.txt';
      lvFileName3 := lFolder + 'g' + lFileName + '.txt';
      IF NOT FileMgt.ClientFileExists(lvFileName1) THEN BEGIN
        lvFileName1 := CONVERTSTR(lvFileName1, '\', '/');
        ERROR(STRSUBSTNO(Text000, lvFileName1));
      END;
      IF NOT FileMgt.ClientFileExists(lvFileName3) THEN BEGIN
        lvFileName3 := CONVERTSTR(lvFileName3, '\', '/');
        ERROR(STRSUBSTNO(Text002, lvFileName3));
      END;
    END;

    [External]
    PROCEDURE ImportGeneralData@1210190000(lFolder@1100485001 : Text[250];lFileName@1210190000 : Text[100];lFileType@1100485000 : 'TradTxt,IbisInfra');
    VAR
      TempBlob@1100525001 : Record 99008535;
      FileMgt@1100525000 : Codeunit 419;
      ClientTypeManagement@1100528500 : Codeunit 4;
      lvEOS@1100485002 : Boolean;
      FromFile@1100528501 : Text;
    BEGIN
      GenLedgSetup.GET;
      GenLedgSetup.TESTFIELD("LCY Code");

      lvEOS := FALSE;
      IbisVersion := '';
      BudgetType := '';

      IF NOT ClientTypeManagement.IsCommonWebClientType THEN BEGIN
        FileMgt.BLOBImport4PS(TempBlob, lFolder + 'g' + lFileName + '.txt', FALSE);
        TempBlob.Blob.CREATEINSTREAM(InStreamStrm);
      END ELSE
        IF NOT UPLOADINTOSTREAM(Text023, '', '', FromFile, InStreamStrm) THEN
          ERROR('');
      WHILE (NOT InStreamStrm.EOS()) AND (NOT lvEOS) DO BEGIN
        InStreamStrm.READTEXT(Txt);
        IF (lFileType = lFileType::TradTxt) AND (STRLEN(Txt) > 200) THEN BEGIN
          //* Trad5.00 heeft record-lengte van 126, Trad6.20 heeft lengte van 251 (>200 moet dan wel 6.20 zijn).
          //* Verschil in Trad6.20 is dat er maar 1 regel is die alle informatie bevat (dus niet meer per item een regel).
          lvEOS := TRUE;
          IbisVersion := COPYSTR(Txt,2,3);
          IF (COPYSTR(IbisVersion,1,1) <> '6') OR (COPYSTR(IbisVersion,2,2) < '20') THEN
            ERROR(Text022);  // Versie 6, update 20 (of hoger)
          //* Controle op doorgerekend is vervallen, zijn nu altijd doorgerekend
          IF NOT (COPYSTR(Txt,5,3) IN ['EUR', '', GenLedgSetup."LCY Code"]) THEN  //* Valuta
            ERROR(Text017);
          BudgetType := COPYSTR(Txt,8,3);
          IF NOT (BudgetType IN ['TRA', 'TRU']) THEN  //* Begrotingstype
            ERROR(Text004, BudgetType);
          EVALUATE(HoursDec,ConvertAmnt(COPYSTR(Txt,11,17)));     //* Totaal uren
          EVALUATE(LaborDec,ConvertAmnt(COPYSTR(Txt,48,17)));     //* Totaal arbeid
          EVALUATE(MaterialDec,ConvertAmnt(COPYSTR(Txt,65,17)));  //* Totaal materiaal
          EVALUATE(PlantDec,ConvertAmnt(COPYSTR(Txt,82,17)));     //* Totaal materieel
          EVALUATE(SubcDec,ConvertAmnt(COPYSTR(Txt,99,17)));      //* Totaal onderaanneming
          EVALUATE(NetTotDec,ConvertAmnt(COPYSTR(Txt,133,17))); //* Netto totaal
        END ELSE BEGIN
          RecordCode1Txt := COPYSTR(Txt,2,8);
          RecordCode1Txt := DELCHR(RecordCode1Txt,'=',' ');
          CASE RecordCode1Txt OF
            'VERSIE':      BEGIN
                             IbisVersion := CopyTextString;
                             IF (lFileType = lFileType::TradTxt) AND (CopyTextString <> '500') THEN
                               ERROR(Text003);
                             IF (lFileType = lFileType::IbisInfra) AND (CopyTextString <> '300') THEN
                               ERROR(Text018);
                           END;
            'BEGRTYPE':    BEGIN
                             IF (lFileType = lFileType::TradTxt) AND (CopyTextString <> '1') THEN
                               ERROR(Text004, CopyTextString);
                             IF (lFileType = lFileType::IbisInfra) AND NOT (CopyTextString IN ['1','8']) THEN
                               ERROR(Text019);
                           END;
            'CALC':        IF CopyTextString <> 'J' THEN
                             ERROR(Text020);
            'NETTOTOT':    EVALUATE(NetTotDec,ConvertAmnt(COPYSTR(Txt,46,80)));
            'BRUTOTOT':    EVALUATE(BrutoTotDec,ConvertAmnt(COPYSTR(Txt,46,80)));
            'TUREN':       EVALUATE(HoursDec,ConvertAmnt(COPYSTR(Txt,46,80)));
            'TARBE':       EVALUATE(LaborDec,ConvertAmnt(COPYSTR(Txt,46,80)));
            'TMATA':       EVALUATE(MaterialDec,ConvertAmnt(COPYSTR(Txt,46,80)));
            'TMATE':       EVALUATE(PlantDec,ConvertAmnt(COPYSTR(Txt,46,80)));
            'TONDE':       EVALUATE(SubcDec,ConvertAmnt(COPYSTR(Txt,46,80)));
            'CVALUTA':     IF NOT (CopyTextString IN ['EUR', '', GenLedgSetup."LCY Code"]) THEN
                             ERROR(Text017);
          END;
        END;
      END;

      IF IbisVersion = '' THEN
        ERROR(Text021);
    END;

    [External]
    PROCEDURE ConvertAmnt@1210190013(IAmtTxt@1100485000 : Text[80]) @1210190000 : Text[80];
    BEGIN
      AmntTxt := IAmtTxt;
      IF AmntTxt <> '' THEN BEGIN
        AmntTxt := DELCHR(AmntTxt,'=',' ');
        AmntTxt := CONVERTSTR(AmntTxt,'.',',');
        EXIT(AmntTxt);
      END ELSE
        EXIT('0');
    END;

    [External]
    PROCEDURE CopyTextString@1210190003() CopyTxt@1210190000 : Text[80];
    BEGIN
      CopyTxt := COPYSTR(Txt,46,80);
      CopyTxt := DELCHR(CopyTxt,'=',' ');
      EXIT(CopyTxt);
    END;

    PROCEDURE StoreMessage@5(lvDesc@11012000 : Text[50];lvMess@11012001 : Text[250]);
    VAR
      ErrorRec@1210190000 : Record 11012051;
      lvError@11012002 : Integer;
    BEGIN
      WITH ErrorRec DO BEGIN
        SETRANGE("User ID", USERID);
        SETRANGE("Source Type", "Source Type"::"Import Budget");
        IF FINDLAST THEN
          lvError := "Line No." + 1
        ELSE
          lvError := 1;

        INIT;
        "User ID" := USERID;
        "Source Type" := "Source Type"::"Import Budget";
        "Project No." := gProjectCde;
        "Line No." := lvError;
        "Error message" := lvMess;
        Description := lvDesc;
        INSERT;
      END;
    END;

    [External]
    PROCEDURE SetDefaultsSettlQuantity@1100528203(ISettlementQuantityCde@11012000 : Code[20]);
    BEGIN
      FromSettlementQuantity := TRUE;
      SettlementQuantityCde := ISettlementQuantityCde;
    END;

    BEGIN
    END.
  }
}

