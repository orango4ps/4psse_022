OBJECT Table 11229884 Plant Inspection Certificate
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Plant Inspection Certificate;
  }
  FIELDS
  {
    { 10  ;   ;Entry No.           ;Integer       ;CaptionML=[ENU=Entry No.;
                                                              NOR=Transaksjonsnr.;
                                                              SVE=L”pnr];
                                                   Editable=No }
    { 20  ;   ;File                ;Text100       ;CaptionML=[ENU=File;
                                                              NOR=Fil;
                                                              SVE=Fil];
                                                   Editable=No }
    { 30  ;   ;Status              ;Option        ;CaptionML=[ENU=Status;
                                                              NOR=Status;
                                                              SVE=Status];
                                                   OptionCaptionML=ENU=" ,,,Definite,,,,,,,,,,Delete";
                                                   OptionString=[ ,,,Definite,,,,,,,,,,Delete] }
    { 40  ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                CASE Type OF
                                                                  Type::Plant:
                                                                    TESTFIELD("Item No.", '');
                                                                  Type::Item:
                                                                    BEGIN
                                                                      PlantInspCertificateSetup.GET;
                                                                      PlantInspCertificateSetup.TESTFIELD("Item Certificate Allowed", TRUE);
                                                                      TESTFIELD("Plant Type", '');
                                                                    END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              NOR=Radtype;
                                                              SVE=Typ];
                                                   OptionCaptionML=[ENU=Plant,Item;
                                                                    NOR=Maskin,Artikkel;
                                                                    SVE=Maskin,Artikel];
                                                   OptionString=Plant,Item }
    { 50  ;   ;Plant Type          ;Code20        ;TableRelation="Plant Type";
                                                   OnValidate=BEGIN
                                                                IF "Plant Type" <> '' THEN
                                                                  TESTFIELD(Type, Type::Plant);
                                                                IF "Plant Type" <> xRec."Plant Type" THEN
                                                                  "Plant No." := '';
                                                                FillDefaultInspectionType();
                                                                CALCFIELDS(Bulk);
                                                              END;

                                                   CaptionML=[ENU=Plant Type;
                                                              NOR=Maskintype;
                                                              SVE=Maskintyp] }
    { 51  ;   ;Bulk                ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Type".Bulk WHERE (Code=FIELD(Plant Type)));
                                                   CaptionML=[ENU=Bulk;
                                                              NOR=Bulk;
                                                              SVE=Bulk];
                                                   Editable=No }
    { 55  ;   ;Plant No.           ;Code10        ;TableRelation="Plant Number".No. WHERE (Plant Type=FIELD(Plant Type));
                                                   CaptionML=[ENU=Plant No.;
                                                              NOR=Maskinnr.;
                                                              SVE=Maskinnr] }
    { 60  ;   ;Item No.            ;Code20        ;TableRelation=Item.No.;
                                                   OnValidate=VAR
                                                                ItemInspectionType@1100529000 : Record 11229885;
                                                              BEGIN
                                                                IF "Item No." <> '' THEN BEGIN
                                                                  TESTFIELD(Type, Type::Item);
                                                                  ItemInspectionType.SETRANGE("Item No.", "Item No.");
                                                                  ItemInspectionType.FINDFIRST;  // Only item allowed with a linked inspection type
                                                                END;
                                                                FillDefaultInspectionType();
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupItemNo();
                                                            END;

                                                   CaptionML=[ENU=Item No.;
                                                              NOR=Artikkelnr;
                                                              SVE=Artikelnr] }
    { 70  ;   ;Inspection Type     ;Code20        ;TableRelation=IF (Type=CONST(Plant)) "Plant Type Inspection Type"."Inspection Type" WHERE (Plant Type=FIELD(Plant Type))
                                                                 ELSE IF (Type=CONST(Item)) "Item Inspection Type"."Inspection Type" WHERE (Item No.=FIELD(Item No.));
                                                   OnValidate=VAR
                                                                InspectionType@1100529000 : Record 11012562;
                                                              BEGIN
                                                                IF "Inspection Type" <> xRec."Inspection Type" THEN BEGIN
                                                                  IF "Inspection Type" <> '' THEN BEGIN
                                                                    InspectionType.GET("Inspection Type");
                                                                    IF InspectionType."Inspection Vendor" <> '' THEN
                                                                      "Inspection Vendor" := InspectionType."Inspection Vendor";
                                                                    IF "Inspected on" <> 0D THEN
                                                                      CalculateDueDate();
                                                                  END;
                                                                END;
                                                                CALCFIELDS("Inspection Type Description");
                                                              END;

                                                   CaptionML=[ENU=Inspection Type;
                                                              NOR=Inspeksjonstype;
                                                              SVE=Inspektionstyp] }
    { 71  ;   ;Inspection Type Description;Text50 ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Inspection Type".Description WHERE (Code=FIELD(Inspection Type)));
                                                   CaptionML=[ENU=Inspection Type Description;
                                                              NOR=Beskrivelse av Inspeksjonstype];
                                                   Editable=No }
    { 80  ;   ;Inspected on        ;Date          ;OnValidate=BEGIN
                                                                IF "Inspected on" <> 0D THEN
                                                                  CalculateDueDate();
                                                              END;

                                                   CaptionML=[ENU=Inspected on;
                                                              NOR=Inspisert den;
                                                              SVE=Inspekterad den] }
    { 90  ;   ;Inspection Result   ;Option        ;CaptionML=[ENU=Inspection Result;
                                                              NOR=Inspeksjonsresultat;
                                                              SVE=Inspektionsresultat];
                                                   OptionCaptionML=[ENU=" ,Approved,Disapproved";
                                                                    SVE=" ,Godk„nd,Nekad"];
                                                   OptionString=[ ,Approved,Disapproved] }
    { 100 ;   ;Inspection Vendor   ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=[ENU=Inspection Vendor;
                                                              NOR=Inspeksjonsleverand›r;
                                                              SVE=Inspektionsleverant”r] }
    { 110 ;   ;Document Type       ;Code10        ;TableRelation="Document Type";
                                                   CaptionML=[ENU=Document Type;
                                                              NOR=Dokumenttype;
                                                              SVE=Dokumenttyp] }
    { 120 ;   ;Document Category   ;Code10        ;TableRelation="Document Category";
                                                   CaptionML=[ENU=Document Category;
                                                              NOR=Dokumentkategori;
                                                              SVE=Dokumentkategori] }
    { 130 ;   ;Document Date       ;Date          ;CaptionML=[ENU=Document Date;
                                                              NOR=Dokumentdato;
                                                              SVE=Dokumentdatum] }
    { 140 ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 150 ;   ;Reference           ;Text80        ;CaptionML=[ENU=Reference;
                                                              NOR=Referanse;
                                                              SVE=Referens] }
    { 160 ;   ;Contact No.         ;Code20        ;TableRelation=Contact.No. WHERE (Type=CONST(Company));
                                                   CaptionML=[ENU=Contact No.;
                                                              NOR=Kontaktnr;
                                                              SVE=Kontaktnr] }
    { 170 ;   ;Due Date            ;Date          ;CaptionML=[ENU=Due Date;
                                                              NOR=Forfallsdato;
                                                              SVE=F”rfallodatum] }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      PlantInspCertificateSetup@1100529000 : Record 11229883;
      Text001@1100529001 : TextConst 'ENU=%1 certificates read';
      Text002@1100529005 : TextConst 'ENU=%1 certificates registered';
      Text003@1100529008 : TextConst 'ENU=%1 certificates deleted';
      Text004@1100529002 : TextConst 'ENU=''%1'' not present';
      Text005@1100529003 : TextConst 'ENU=at %1 ''%2''';
      Text006@1100529006 : TextConst 'ENU=''%1'' has no stock';
      Text007@1100529007 : TextConst 'ENU=''%1'' must be greater than %2 ''%3';
      Text008@1100528400 : TextConst 'ENU=The file %1 already exists.;SVE=Filen %1 finns redan.';

    LOCAL PROCEDURE FillDefaultInspectionType@1100529003();
    VAR
      PlantTypeInspectionType@1100529001 : Record 11012563;
      ItemInspectionType@1100529000 : Record 11229885;
    BEGIN
      CASE Type OF
        Type::Plant:
          BEGIN
            IF "Plant Type" = '' THEN BEGIN
              IF "Inspection Type" <> '' THEN
                VALIDATE("Inspection Type", '');
              EXIT;
            END;
             PlantTypeInspectionType.SETRANGE("Plant Type", "Plant Type");
             IF PlantTypeInspectionType.COUNT = 1 THEN BEGIN
               PlantTypeInspectionType.FINDFIRST;
               VALIDATE("Inspection Type", PlantTypeInspectionType."Inspection Type");
             END ELSE BEGIN
               IF "Inspection Type" <> '' THEN BEGIN
                 IF NOT PlantTypeInspectionType.GET("Plant Type", "Inspection Type") THEN
                   VALIDATE("Inspection Type", '');
               END;
             END;
          END;
        Type::Item:
          BEGIN
            IF "Item No." = '' THEN BEGIN
              IF "Inspection Type" <> '' THEN
                VALIDATE("Inspection Type", '');
              EXIT;
            END;
             ItemInspectionType.SETRANGE("Item No.", "Item No.");
             IF ItemInspectionType.COUNT = 1 THEN BEGIN
               ItemInspectionType.FINDFIRST;
               VALIDATE("Inspection Type", ItemInspectionType."Inspection Type");
             END ELSE BEGIN
               IF "Inspection Type" <> '' THEN BEGIN
                 IF NOT ItemInspectionType.GET("Item No.", "Inspection Type") THEN
                   VALIDATE("Inspection Type", '');
               END;
             END;
          END;
      END;
    END;

    LOCAL PROCEDURE CalculateDueDate@1100529000();
    VAR
      InspectionType@1100529000 : Record 11012562;
      Inspection@1100529001 : Record 11012564;
      NewDueDate@1100529002 : Date;
    BEGIN
      IF ("Inspection Type" <> '') AND ("Inspected on" <> 0D) THEN BEGIN
        IF InspectionType.GET("Inspection Type") THEN BEGIN
          Inspection."Inspection Type" := "Inspection Type";
          Inspection."Inspected on" := "Inspected on";
          NewDueDate := Inspection.NewCallDate();
          IF NewDueDate > "Inspected on" THEN
            "Due Date" := NewDueDate;
        END;
      END;
    END;

    LOCAL PROCEDURE LookupItemNo@1100529007();
    VAR
      ItemInspectionType@1100529000 : Record 11229885;
      Item@1100529002 : Record 27;
      TmpItem@1100529001 : TEMPORARY Record 27;
    BEGIN
      IF Type <> Type::Item THEN
        EXIT;
      IF ItemInspectionType.FINDSET THEN BEGIN
        REPEAT
          IF ItemInspectionType."Item No." <> Item."No." THEN BEGIN
            IF Item.GET(ItemInspectionType."Item No.") THEN BEGIN
              TmpItem := Item;
              TmpItem.INSERT;
            END;
          END;
        UNTIL ItemInspectionType.NEXT = 0;
        TmpItem."No." := "Item No.";
        IF PAGE.RUNMODAL(0, TmpItem) = ACTION::LookupOK THEN
          VALIDATE("Item No.", TmpItem."No.");
      END;
    END;

    PROCEDURE GetPlantOrItemDescription@1100529001() : Text;
    VAR
      PlantNumber@1100529001 : Record 11012552;
      Item@1100529002 : Record 27;
      PlantDescription@1100529003 : Text;
    BEGIN
      CASE Type OF
        Type::Plant:
          BEGIN
            IF "Plant Type" <> '' THEN BEGIN
              PlantNumber.GetPlantDescription("Plant Type", "Plant No.", PlantDescription);
              EXIT(PlantDescription);
            END;
          END;
        Type::Item:
          BEGIN
            IF "Item No." <> '' THEN BEGIN
              IF Item.GET("Item No.") THEN
                EXIT(Item.Description);
            END;
          END;
      END;
      EXIT('');
    END;

    PROCEDURE ImportCertificateFiles@1100409001();
    VAR
      PlantInspectionCertificate@1100409001 : Record 11229884;
      FileMgt@1100529001 : Codeunit 419;
      Folder@1100529000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Directory" RUNONCLIENT;
      ObjectFiles@1100409009 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object" RUNONCLIENT;
      FileList@1100409010 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1" RUNONCLIENT;
      DummyTime@1100409006 : Time;
      NoOfFiles@1100529004 : Integer;
      Counter@1100529002 : Integer;
      NextEntryNo@1100529003 : Integer;
      Path@1100529005 : Text;
    BEGIN
      PlantInspCertificateSetup.GET;
      PlantInspCertificateSetup.TESTFIELD("Path New Certificates");
      PlantInspCertificateSetup.TESTFIELD("Path Imported Certificates");

      ObjectFiles := Folder.GetFiles(PlantInspCertificateSetup."Path New Certificates");
      FileList := FileList.List;
      FileList.AddRange(ObjectFiles);
      NoOfFiles := FileList.Count;
      IF NoOfFiles > 0 THEN BEGIN
        IF PlantInspectionCertificate.FINDLAST THEN
          NextEntryNo := PlantInspectionCertificate."Entry No.";
        FOR Counter := 0 TO (FileList.Count - 1) DO BEGIN
          NextEntryNo := NextEntryNo + 1;
          PlantInspectionCertificate.INIT;
          PlantInspectionCertificate."Entry No." := NextEntryNo;
          FileMgt.SplitFileAbsPathName(FORMAT(FileList.Item(Counter)), Path, PlantInspectionCertificate.File);
          IF PlantInspCertificateSetup.Status = PlantInspCertificateSetup.Status::Definite THEN
            PlantInspectionCertificate.Status := PlantInspectionCertificate.Status::Definite;
          PlantInspectionCertificate."Inspection Result" := PlantInspCertificateSetup."Inspection Result";
          PlantInspectionCertificate."Document Type" := PlantInspCertificateSetup."Document Type";
          PlantInspectionCertificate."Document Category" := PlantInspCertificateSetup."Document Category";
          IF PlantInspCertificateSetup."Document Date Based on" = PlantInspCertificateSetup."Document Date Based on"::FromFile THEN
            FileMgt.ClientFileLastWriteTime(Path+PlantInspectionCertificate.File, PlantInspectionCertificate."Document Date", DummyTime);
          PlantInspectionCertificate.Description := PlantInspCertificateSetup.Description;
          PlantInspectionCertificate.INSERT;
          IF LOWERCASE(PlantInspCertificateSetup."Path Imported Certificates") <>
             LOWERCASE(PlantInspCertificateSetup."Path New Certificates")
          THEN BEGIN
            IF NOT FileMgt.ClientDirectoryExists(PlantInspCertificateSetup."Path Imported Certificates") THEN
              FileMgt.CreateClientFolderRecursively(PlantInspCertificateSetup."Path Imported Certificates");
            IF FileMgt.ClientFileExists(PlantInspCertificateSetup."Path Imported Certificates" + PlantInspectionCertificate.File) THEN
              ERROR(Text008,PlantInspCertificateSetup."Path Imported Certificates" + PlantInspectionCertificate.File);
            FileMgt.RenameClientFile(
              PlantInspCertificateSetup."Path New Certificates" + PlantInspectionCertificate.File,
              PlantInspCertificateSetup."Path Imported Certificates" + PlantInspectionCertificate.File,
              TRUE);
          END;
          COMMIT;  // Commit after each line, needed because no rollback of move file is/can be done on an error
        END;
      END;
      MESSAGE(Text001, NoOfFiles);
    END;

    PROCEDURE RegisterCertificates@1100409003(VAR PlantInspectionCertificate@1100529004 : Record 11229884);
    VAR
      CounterRegistered@1100529000 : Integer;
    BEGIN
      PlantInspCertificateSetup.GET;
      PlantInspCertificateSetup.TESTFIELD("Path Imported Certificates");

      RegisterCertificatesCheck(PlantInspectionCertificate);
      CounterRegistered := PlantInspectionCertificate.COUNT;
      RegisterCertificatesProcess(PlantInspectionCertificate);

      MESSAGE(Text002, CounterRegistered);
    END;

    LOCAL PROCEDURE RegisterCertificatesCheck@1100529002(VAR PlantInspectionCertificate@1100529000 : Record 11229884);
    VAR
      PlantType@1100529001 : Record 11012551;
      PlantNumber@1100529002 : Record 11012552;
      Item@1100529003 : Record 27;
      PlantTypeInspectionType@1100529004 : Record 11012563;
      ItemInspectionType@1100529005 : Record 11229885;
      InspectionType@1100529008 : Record 11012562;
      DocumentType@1100529006 : Record 11012405;
      FileMgt@1100529007 : Codeunit 419;
    BEGIN
      WITH PlantInspectionCertificate DO BEGIN
        IF FINDSET THEN BEGIN
          REPEAT
            TESTFIELD(Status, Status::Definite);
            TESTFIELD(File);
            IF NOT FileMgt.ClientFileExists(PlantInspCertificateSetup."Path Imported Certificates" + File) THEN
              FIELDERROR(File, STRSUBSTNO(Text004, File));
            CASE Type OF
              Type::Plant:
                BEGIN
                  TESTFIELD("Plant Type");
                  IF NOT PlantType.GET("Plant Type") THEN
                    FIELDERROR("Plant Type", STRSUBSTNO(Text004, "Plant Type"));
                  IF NOT PlantType.Bulk THEN
                    TESTFIELD("Plant No.");
                  IF "Plant No." <> '' THEN BEGIN
                    IF NOT PlantNumber.GET("Plant Type", "Plant No.") THEN
                      FIELDERROR("Plant No.", STRSUBSTNO(Text004, "Plant Type" + '-' + "Plant No."));
                    IF PlantInspCertificateSetup."Update Inspections" AND (NOT PlantType.Bulk) THEN BEGIN
                      PlantNumber.CALCFIELDS("Quantity in Stock");
                      IF PlantNumber."Quantity in Stock" <= 0 THEN
                        FIELDERROR("Plant No.", STRSUBSTNO(Text006, "Plant Type" + '-' + "Plant No."));
                    END;
                  END;
                  IF "Inspection Type" <> '' THEN BEGIN
                    IF NOT PlantTypeInspectionType.GET("Plant Type", "Inspection Type") THEN
                      FIELDERROR("Inspection Type",
                        STRSUBSTNO(Text004, "Inspection Type") + ' ' + STRSUBSTNO(Text005, FIELDCAPTION("Plant Type"), "Plant Type"));
                  END;
                END;
              Type::Item:
                BEGIN
                  IF NOT PlantInspCertificateSetup."Item Certificate Allowed" THEN
                    FIELDERROR(Type);
                  TESTFIELD("Item No.");
                  IF NOT Item.GET("Item No.") THEN
                    FIELDERROR("Item No.", STRSUBSTNO(Text004, "Item No."));
                  IF "Inspection Type" <> '' THEN BEGIN
                    IF NOT ItemInspectionType.GET("Item No.", "Inspection Type") THEN
                      FIELDERROR("Inspection Type",
                        STRSUBSTNO(Text004, "Inspection Type") + ' ' + STRSUBSTNO(Text005, FIELDCAPTION("Item No."), "Item No."));
                  END;
                END;
            END;
            TESTFIELD("Inspection Type");
            IF NOT InspectionType.GET("Inspection Type") THEN
              FIELDERROR("Inspection Type", STRSUBSTNO(Text004, "Inspection Type"));
            TESTFIELD("Inspected on");
            TESTFIELD("Inspection Result");
            TESTFIELD("Document Type");
            IF NOT DocumentType.GET("Document Type") THEN
              FIELDERROR("Document Type", STRSUBSTNO(Text004, "Document Type"));
            TESTFIELD(Description);
            TESTFIELD("Document Date");
            IF "Inspection Result" <> "Inspection Result"::Disapproved THEN
              TESTFIELD("Due Date");
            IF ("Due Date" <> 0D) AND ("Due Date" <= "Inspected on") THEN
              FIELDERROR("Due Date", STRSUBSTNO(Text007, "Due Date", FIELDCAPTION("Inspected on"), "Inspected on"));
          UNTIL NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE RegisterCertificatesProcess@1100529004(VAR PlantInspectionCertificate@1100529000 : Record 11229884);
    VAR
      DocumentProperties@1100529001 : Record 11012746;
      PlantInspCertificateSetup@1100528600 : Record 11229883;
      ProcessImportInspections@1100529002 : Codeunit 11012580;
      UpdatedInspectionLineNo@1100529003 : Integer;
    BEGIN
      PlantInspCertificateSetup.GET;
      WITH PlantInspectionCertificate DO BEGIN
        IF FINDFIRST THEN BEGIN
          REPEAT
            LOCKTABLE;
            CALCFIELDS("Inspection Type Description", Bulk);
            DocumentProperties.INIT;
            DocumentProperties."External Document" := TRUE;
            DocumentProperties."No." := '';
            IF "Contact No." <> '' THEN
              DocumentProperties.VALIDATE("Contact No.", "Contact No.");
            DocumentProperties.VALIDATE("Document Type", "Document Type");
            IF "Document Category" <> '' THEN
              DocumentProperties.VALIDATE("Document Category", "Document Category");
            DocumentProperties.Subject := "Inspection Type Description" + ' - ' + FORMAT("Inspection Result") + ' ' + FORMAT("Inspected on");
            IF "Inspection Vendor" <> '' THEN
              DocumentProperties.Subject := DocumentProperties.Subject + ' ' + "Inspection Vendor";
            DocumentProperties."Document Date" := "Document Date";
            DocumentProperties.Description := Description;
            DocumentProperties.Reference := Reference;
            CASE Status OF
              Status::Definite:
                DocumentProperties.Status := DocumentProperties.Status::Definite;
            END;
            DocumentProperties."Expired On" := "Due Date";
            DocumentProperties.File := PlantInspCertificateSetup."Path Imported Certificates" + File;
            DocumentProperties.INSERT(TRUE);

            // Follow order of execution is important for proper processing
            UpdatedInspectionLineNo := 0;
            IF PlantInspCertificateSetup."Update Inspections" AND (Type = Type::Plant) AND (NOT Bulk) AND ("Plant No." <> '') THEN
              UpdatedInspectionLineNo :=
                ProcessImportInspections.CertificateRegistration_Process(PlantInspectionCertificate, DocumentProperties."No.");
            CreateDocumentLinks(DocumentProperties, PlantInspectionCertificate, UpdatedInspectionLineNo);

            DELETE(FALSE);
            MoveFileToDocumentMgt(DocumentProperties);  // Must be done last, no errors may occur afterwards
            DocumentProperties.MODIFY(FALSE);  // False! (no errors may occur)
            COMMIT;  // Commit after each line, needed because no rollback of move file is/can be done on an error
          UNTIL NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE CreateDocumentLinks@1100528001(DocumentProperties@1100529000 : Record 11012746;PlantInspectionCertificate@1100529002 : Record 11229884;UpdatedInspectionLineNo@1100529009 : Integer);
    VAR
      PlantType@1100529005 : Record 11012551;
      PlantNumber@1100529004 : Record 11012552;
      Item@1100529003 : Record 27;
      Inspection@1100529010 : Record 11012564;
      RecRef@1100529006 : RecordRef;
      DocLinkRID@1100529001 : ARRAY [5] OF RecordID;
      DocumentLinkMgt@1100529007 : Codeunit 11012401;
      ArrayNo@1100529008 : Integer;
    BEGIN
      ArrayNo := 0;
      CASE PlantInspectionCertificate.Type OF
        Type::Plant:
          BEGIN
            IF UpdatedInspectionLineNo > 0 THEN BEGIN
              IF Inspection.GET(PlantInspectionCertificate."Plant Type", PlantInspectionCertificate."Plant No.", UpdatedInspectionLineNo) THEN BEGIN
                RecRef.GETTABLE(Inspection);
                ArrayNo := ArrayNo + 1;
                DocLinkRID[ArrayNo] := RecRef.RECORDID;
              END;
            END;
            IF PlantInspectionCertificate."Plant No." <> '' THEN BEGIN
              PlantNumber.GET(PlantInspectionCertificate."Plant Type", PlantInspectionCertificate."Plant No.");
              RecRef.GETTABLE(PlantNumber);
              ArrayNo := ArrayNo + 1;
              DocLinkRID[ArrayNo] := RecRef.RECORDID;
            END;
            PlantType.GET(PlantInspectionCertificate."Plant Type");
            RecRef.GETTABLE(PlantType);
            ArrayNo := ArrayNo + 1;
            DocLinkRID[ArrayNo] := RecRef.RECORDID;
          END;
        Type::Item:
          BEGIN
            Item.GET(PlantInspectionCertificate."Item No.");
            RecRef.GETTABLE(Item);
            ArrayNo := ArrayNo + 1;
            DocLinkRID[ArrayNo] := RecRef.RECORDID;
          END;
      END;
      DocumentLinkMgt.CreateDocumentLink(DocumentProperties, DocLinkRID);
    END;

    LOCAL PROCEDURE MoveFileToDocumentMgt@1100529011(VAR DocumentProperties@1100529000 : Record 11012746);
    VAR
      ExternalDocumentMgt@1100529001 : Codeunit 11012403;
      FileManagement@1100528703 : Codeunit 419;
      SourceDirectory@1100528705 : Text;
      ShortFileName@1100528704 : Text;
      SourceClientFileName@1100528702 : Text;
      TargetFileURI@1100528701 : Text;
      StorageType@1100525000 : Option;
    BEGIN
      SourceClientFileName := DocumentProperties.File;
      FileManagement.SplitFileAbsPathName(DocumentProperties.File, SourceDirectory, ShortFileName);
      ExternalDocumentMgt.RegisterFile(
        SourceClientFileName,DocumentProperties."Document Type",DocumentProperties."Creation Date",
        TargetFileURI,StorageType);
      DocumentProperties.ValidateStorageURI(StorageType,TargetFileURI);
      IF FileManagement.ClientFileExists(SourceClientFileName) THEN
        FileManagement.DeleteClientFile(SourceClientFileName);
    END;

    PROCEDURE DeleteCertificates@1100529005(VAR PlantInspectionCertificate@1100529004 : Record 11229884);
    VAR
      FileMgt@1100529001 : Codeunit 419;
      CounterDeleted@1100529000 : Integer;
    BEGIN
      PlantInspCertificateSetup.GET;
      PlantInspCertificateSetup.TESTFIELD("Path Imported Certificates");

      WITH PlantInspectionCertificate DO BEGIN
        IF FINDSET THEN BEGIN
          REPEAT
            TESTFIELD(Status, Status::Delete);
          UNTIL NEXT = 0;
        END;

        IF FINDFIRST THEN BEGIN
          CounterDeleted := PlantInspectionCertificate.COUNT;
          REPEAT
            LOCKTABLE;
            DELETE(FALSE);
            // Delete file must be done last, no errors may occur afterwards
            FileMgt.DeleteClientFile4PS(PlantInspCertificateSetup."Path Imported Certificates" + File, TRUE);  // Only done if file exists
            COMMIT;  // Commit after each line, needed because no rollback of delete file is/can be done on an error
          UNTIL NEXT = 0;
        END;
      END;
      MESSAGE(Text003, CounterDeleted);
    END;

    BEGIN
    END.
  }
}

