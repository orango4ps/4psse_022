OBJECT Codeunit 11012045 Purch. Route Ref. Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      PurchRouteRefRec@1210190000 : Record 11012079;
      EstRec@1100525001 : Record 11012151;
      EstimateLine@1100528901 : Record 11072072;
      EstimateRecipeLine@1100528902 : Record 11072075;
      EstimateLineRAW@1100525000 : Record 11125698;
      EstimateElementRAW@1100525002 : Record 11125679;
      PurchHeadRec@1210190007 : Record 38;
      PurchLineRec@1210190003 : Record 39;
      BudgetRec@1210190005 : Record 11012001;
      AdviceOrderRec@1210190006 : Record 11012055;
      ProjRec@1210190008 : Record 11072003;
      JobLedgerEntry@1100528900 : Record 11072005;
      BudgetAdjRec@1210190009 : Record 11012003;
      ApprovalLineRec@1210190020 : Record 11012032;
      PostedPurchRcptHeadRec@1210190015 : Record 120;
      PostedPurchRcptLineRec@1210190014 : Record 121;
      PostedPurchInvHeadRec@1210190019 : Record 122;
      PostedPurchInvLineRec@1210190016 : Record 123;
      PostedPurchCrMemoHeadRec@1210190018 : Record 124;
      PostedPurchCrMemoLineRec@1210190017 : Record 125;
      AssemblyYardNumberObject@1100528400 : Record 11020596;
      ServiceOrderCostPlusEntry@1100529400 : Record 11012825;
      PurchaseRequisitionLine@1100528903 : Record 11229331;
      ProjectInventoryEntry@1100528904 : Record 11012670;
      ShippingOrderHeader@1100527300 : Record 11020623;
      ShippingOrderLine@1100527301 : Record 11071885;
      ProjectMaterialReqLine@1100528500 : Record 11012526;
      NextEntryNo@1210190004 : Integer;
      SelectedQuoteEntry@1210190010 : Integer;
      Text001@1210190013 : TextConst 'DEU=Von %1 ''%2'' gibt es noch Auftr„ge: %3.;ENU=Of %1 ''%2'' still quote(s) present.;NLD=Van %1 ''%2'' nog offerte(s) aanwezig: %3.;NOR=Av %1 finnes ''%2'' tilbud fortsatt.;SVE=Av %1 finns ''%2'' offerter fortfarande.';
      Text002@1210190012 : TextConst 'DEU=Zeile l”schen?;ENU=Delete line?;NLD=Regel verwijderen?;NOR=Slette rad?;SVE=Ta bort rad?';

    [External]
    PROCEDURE GetLastRefNo@1210190001() : Code[20];
    BEGIN
      PurchRouteRefRec.LOCKTABLE;
      PurchRouteRefRec.RESET;
      IF NOT PurchRouteRefRec.GET(PurchRouteRefRec.Type::"Last No. Used", '', 0) THEN
        EXIT( PADSTR('', MAXSTRLEN(PurchRouteRefRec."No."), '0'));

      EXIT(PurchRouteRefRec."No.");
    END;

    [External]
    PROCEDURE WriteLastRefNo@1210190003(IRefNo@1210190000 : Code[20]);
    BEGIN
      IF (IRefNo = '') THEN
        EXIT;

      PurchRouteRefRec.RESET;
      IF PurchRouteRefRec.GET(PurchRouteRefRec.Type::"Last No. Used", '', 0) THEN BEGIN
        IF (IRefNo > PurchRouteRefRec."No.") THEN BEGIN
          PurchRouteRefRec."No." := IRefNo;
          PurchRouteRefRec.MODIFY;
        END;
      END ELSE BEGIN
        PurchRouteRefRec.INIT;
        PurchRouteRefRec.Type := PurchRouteRefRec.Type::"Last No. Used";
        PurchRouteRefRec."Reference No." := '';
        PurchRouteRefRec."Entry No." := 0;
        PurchRouteRefRec."No." := IRefNo;
        PurchRouteRefRec.INSERT;
      END;
    END;

    [External]
    PROCEDURE ShowReferenceList@1210190002(IRefNoFilter@1210190000 : Code[1024]);
    BEGIN
      WITH PurchRouteRefRec DO BEGIN
        UpdateReferenceLines(IRefNoFilter);
        COMMIT;

        RESET;
        SETRANGE(Type, Type::Reference);
        SETFILTER("Reference No.", IRefNoFilter);
        PAGE.RUNMODAL(PAGE::"Purchase Route Reference List", PurchRouteRefRec);

        RESET;
        SETRANGE(Type, Type::Reference);
        SETFILTER("Reference No.", IRefNoFilter);
        DELETEALL;
        COMMIT;
      END;
    END;

    [External]
    PROCEDURE ShowReferenceQuoteList@1210190010(IRefNoFilter@1210190000 : Code[1024]);
    BEGIN
      WITH PurchRouteRefRec DO BEGIN
        UpdateReferenceLines(IRefNoFilter);  // Fill for all
        COMMIT;

        RESET;
        SETRANGE(Type, Type::Reference);
        SETFILTER("Reference No.", IRefNoFilter);
        SETRANGE("Line Type", "Line Type"::"Quote Line");  // Show (default) only quotes
        IF (SelectedQuoteEntry <> 0) THEN
          "Entry No." := SelectedQuoteEntry;
        PAGE.RUNMODAL(PAGE::"Purchase Route Reference List", PurchRouteRefRec);

        RESET;
        SETRANGE(Type, Type::Reference);
        SETFILTER("Reference No.", IRefNoFilter);
        DELETEALL;
        COMMIT;
      END;
    END;

    [External]
    PROCEDURE ShowReferencePurchOrderList@1210190011(IRefNo@1210190000 : Code[20]);
    BEGIN
      WITH PurchRouteRefRec DO BEGIN
        UpdateReferenceLines(IRefNo);  // Fill for all
        COMMIT;

        RESET;
        SETRANGE(Type, Type::Reference);
        SETRANGE("Reference No.", IRefNo);
        SETRANGE("Line Type", "Line Type"::"Purchase Order Line");  // Show (default) only purch. orders
        PAGE.RUNMODAL(PAGE::"Purchase Route Reference List", PurchRouteRefRec);

        RESET;
        SETRANGE(Type, Type::Reference);
        SETRANGE("Reference No.", IRefNo);
        DELETEALL;
        COMMIT;
      END;
    END;

    [External]
    PROCEDURE UpdateReferenceLines@1210190000(IRefNoFilter@1210190000 : Code[1024]);
    VAR
      FPSLicenseManagement@1100527400 : Codeunit 11229289;
    BEGIN
      WITH PurchRouteRefRec DO BEGIN
        SelectedQuoteEntry := 0;

        RESET;
        SETRANGE(Type, Type::Reference);
        SETFILTER("Reference No.", IRefNoFilter);
        DELETEALL;

        IF (IRefNoFilter = '') THEN
          EXIT;

        NextEntryNo := 1;

        IF FPSLicenseManagement.LicenseAndReadPermissionForTable(EstimateLineRAW) THEN BEGIN
          EstimateLineRAW.RESET;
          EstimateLineRAW.SETCURRENTKEY("Purchase Route Reference");
          EstimateLineRAW.SETFILTER("Purchase Route Reference", IRefNoFilter);
          IF EstimateLineRAW.FINDSET(FALSE, FALSE) THEN BEGIN
            REPEAT
              INIT;
              Type := Type::Reference;
              "Reference No." := EstimateLineRAW."Purchase Route Reference";
              "Entry No." := NextEntryNo;
              "Line Type" := "Line Type"::"Estimate Line";
              "No." := EstimateLineRAW."Estimate No.";
              "Line No." := EstimateLineRAW."Line No.";
              "Tender Paragraph" := EstimateLineRAW."Tender Paragraph No.";
              "Estimate Line" := EstimateLineRAW."Line No.";
              Vendor := EstimateLineRAW.Vendor;
              INSERT;
              NextEntryNo := NextEntryNo + 1;
            UNTIL EstimateLineRAW.NEXT = 0;
          END;
        END;

        EstimateLine.RESET;  //DP00381
        EstimateLine.SETCURRENTKEY("Purchase Route Reference");
        EstimateLine.SETFILTER("Purchase Route Reference", IRefNoFilter);
        IF EstimateLine.FINDSET(FALSE, FALSE) THEN BEGIN
          REPEAT
            INIT;
            Type := Type::Reference;
            "Reference No." := EstimateLine."Purchase Route Reference";
            "Entry No." := NextEntryNo;
            "Line Type" := "Line Type"::"Estimate Line";
            "No." := EstimateLine."Estimate No.";
            "Line No." := EstimateLine."Line No.";
            "Sub-Estimate No." := EstimateLine."Sub-Estimate No.";
            "Part Group" := EstimateLine."Part Group";
            Part := EstimateLine.Part;
            "Estimate Line" := EstimateLine."Line No.";
            Vendor := EstimateLine.Vendor;
            INSERT;
            NextEntryNo := NextEntryNo + 1;
          UNTIL EstimateLine.NEXT = 0;
        END;

        EstimateRecipeLine.RESET;  //DP00381
        EstimateRecipeLine.SETCURRENTKEY("Purchase Route Reference");
        EstimateRecipeLine.SETFILTER("Purchase Route Reference", IRefNoFilter);
        IF EstimateRecipeLine.FINDSET(FALSE, FALSE) THEN BEGIN
          REPEAT
            INIT;
            Type := Type::Reference;
            "Reference No." := EstimateRecipeLine."Purchase Route Reference";
            "Entry No." := NextEntryNo;
            "Line Type" := "Line Type"::"Recipe Line";
            "No." := EstimateRecipeLine."Estimate No.";
            "Line No." := EstimateRecipeLine."Line No.";
            "Sub-Estimate No." := EstimateRecipeLine."Sub-Estimate No.";
            "Part Group" := EstimateRecipeLine."Part Group";
            Part := EstimateRecipeLine.Part;
            "Estimate Line" := EstimateRecipeLine."Estimate Line";
            "Recipe Group" := EstimateRecipeLine."Recipe Group";
            Recipe := EstimateRecipeLine.Recipe;
            Vendor := EstimateRecipeLine.Vendor;
            INSERT;
            NextEntryNo := NextEntryNo + 1;
          UNTIL EstimateRecipeLine.NEXT = 0;
        END;

        PurchLineRec.RESET;
        PurchLineRec.SETCURRENTKEY("Document Type","Purchase Route Reference");
        PurchLineRec.SETRANGE("Document Type", PurchLineRec."Document Type"::Quote);
        PurchLineRec.SETFILTER("Purchase Route Reference", IRefNoFilter);
        IF PurchLineRec.FINDSET(FALSE, FALSE) THEN BEGIN
          REPEAT
            INIT;
            Type := Type::Reference;
            "Reference No." := PurchLineRec."Purchase Route Reference";
            "Entry No." := NextEntryNo;
            "Line Type" := "Line Type"::"Quote Line";
            "No." := PurchLineRec."Document No.";
            "Line No." := PurchLineRec."Line No.";
            "Quote Selected" := PurchLineRec."Quote Selected";
            IF (SelectedQuoteEntry = 0) AND ("Quote Selected") THEN
              SelectedQuoteEntry := "Entry No.";
            Vendor := PurchLineRec."Buy-from Vendor No.";
            IF Vendor = '' THEN BEGIN
              PurchLineRec.CALCFIELDS("Buy-from Contact No.");
              IF PurchLineRec."Buy-from Contact No." <> '' THEN BEGIN
                Vendor := PurchLineRec."Buy-from Contact No.";
                "Vendor/Contact" := "Vendor/Contact"::Contact;
              END;
            END;
            INSERT;
            NextEntryNo := NextEntryNo + 1;
          UNTIL PurchLineRec.NEXT = 0;
        END;

        //DP01137.sn
        PurchaseRequisitionLine.RESET;
        PurchaseRequisitionLine.SETCURRENTKEY("Purchase Route Reference");
        PurchaseRequisitionLine.SETFILTER("Purchase Route Reference", IRefNoFilter);
        IF PurchaseRequisitionLine.FINDSET(FALSE, FALSE) THEN BEGIN
          REPEAT
            INIT;
            Type := Type::Reference;
            "Reference No." := PurchaseRequisitionLine."Purchase Route Reference";
            "Entry No." := NextEntryNo;
            "Line Type" := "Line Type"::"Purchase Requisition";
            "No." := PurchaseRequisitionLine."Purchase Requisition No.";
            "Line No." := PurchaseRequisitionLine."Line No.";
            INSERT;
            NextEntryNo := NextEntryNo + 1;
          UNTIL PurchaseRequisitionLine.NEXT = 0;
        END;

        ProjectInventoryEntry.RESET;
        ProjectInventoryEntry.SETCURRENTKEY("Purchase Route Reference");
        ProjectInventoryEntry.SETFILTER("Purchase Route Reference", IRefNoFilter);
        IF ProjectInventoryEntry.FINDSET(FALSE, FALSE) THEN BEGIN
          REPEAT
            INIT;
            Type := Type::Reference;
            "Reference No." := ProjectInventoryEntry."Purchase Route Reference";
            "Entry No." := NextEntryNo;
            "Line Type" := "Line Type"::"Project Inventory Entry";
            "No." := ProjectInventoryEntry."Document No.";
            "Line No." := ProjectInventoryEntry."Entry No.";
            INSERT;
            NextEntryNo := NextEntryNo + 1;
          UNTIL ProjectInventoryEntry.NEXT = 0;
        END;
        //DP01137.en

        //DP01727.sn
        JobLedgerEntry.RESET;
        JobLedgerEntry.SETCURRENTKEY("Purchase Route Reference");
        JobLedgerEntry.SETFILTER("Purchase Route Reference", IRefNoFilter);
        IF JobLedgerEntry.FINDSET(FALSE, FALSE) THEN BEGIN
          REPEAT
            INIT;
            Type := Type::Reference;
            "Reference No." := JobLedgerEntry."Purchase Route Reference";
            "Entry No." := NextEntryNo;
            "Line Type" := "Line Type"::JobLedgerEntry;
            "No." := JobLedgerEntry."Job No.";
            "Line No." := JobLedgerEntry."Entry No.";
            INSERT;
            NextEntryNo := NextEntryNo + 1;
          UNTIL JobLedgerEntry.NEXT = 0;
        END;
        //DP01727.en

        BudgetRec.RESET;
        BudgetRec.SETCURRENTKEY("Purchase Route Reference");
        BudgetRec.SETFILTER("Purchase Route Reference", IRefNoFilter);
        IF BudgetRec.FINDSET(FALSE, FALSE) THEN BEGIN
          REPEAT
            INIT;
            Type := Type::Reference;
            "Reference No." := BudgetRec."Purchase Route Reference";
            "Entry No." := NextEntryNo;
            "Line Type" := "Line Type"::"Budget Line";
            "No." := BudgetRec."Project No.";
            "Line No." := BudgetRec."Line No.";
            Adjustment := BudgetRec.Adjustment;
            "Extension Contract" := BudgetRec."Extension Contract";
            Option := BudgetRec.Option;
            Vendor := BudgetRec.Vendor;
            INSERT;
            NextEntryNo := NextEntryNo + 1;
          UNTIL BudgetRec.NEXT = 0;
        END;

        //C046460.sn
        ProjectMaterialReqLine.RESET;
        ProjectMaterialReqLine.SETCURRENTKEY("Purchase Route Reference");
        ProjectMaterialReqLine.SETFILTER("Purchase Route Reference", IRefNoFilter);
        IF ProjectMaterialReqLine.FINDSET(FALSE, FALSE) THEN BEGIN
          REPEAT
            INIT;
            Type := Type::Reference;
            "Reference No." := ProjectMaterialReqLine."Purchase Route Reference";
            "Entry No." := NextEntryNo;
            "Line Type" := "Line Type"::ProjMatReqLine;
            "No." := ProjectMaterialReqLine."Project No.";
            "Line No." := ProjectMaterialReqLine."Line No.";
            INSERT;
            NextEntryNo := NextEntryNo + 1;
          UNTIL ProjectMaterialReqLine.NEXT = 0;
        END;
        //C046460.en

        AdviceOrderRec.RESET;
        AdviceOrderRec.SETCURRENTKEY("Purchase Route Reference");
        AdviceOrderRec.SETFILTER("Purchase Route Reference", IRefNoFilter);
        IF AdviceOrderRec.FINDSET(FALSE, FALSE) THEN BEGIN
          REPEAT
            INIT;
            Type := Type::Reference;
            "Reference No." := AdviceOrderRec."Purchase Route Reference";
            "Entry No." := NextEntryNo;
            "Line Type" := "Line Type"::"Advice Order";
            IF AdviceOrderRec."Record Type" = AdviceOrderRec."Record Type"::ServOrder THEN  //DP01379
              "No." := AdviceOrderRec."Service Order No."
            ELSE
              "No." := AdviceOrderRec."Project No.";
            "Line No." := AdviceOrderRec."Line No.";
            Vendor := AdviceOrderRec.Vendor;
            INSERT;
            NextEntryNo := NextEntryNo + 1;
          UNTIL AdviceOrderRec.NEXT = 0;
        END;

        PurchLineRec.RESET;
        PurchLineRec.SETCURRENTKEY("Document Type","Purchase Route Reference");
        PurchLineRec.SETRANGE("Document Type", PurchLineRec."Document Type"::Order);
        PurchLineRec.SETFILTER("Purchase Route Reference", IRefNoFilter);
        IF PurchLineRec.FINDSET(FALSE, FALSE) THEN BEGIN
          REPEAT
            INIT;
            Type := Type::Reference;
            "Reference No." := PurchLineRec."Purchase Route Reference";
            "Entry No." := NextEntryNo;
            "Line Type" := "Line Type"::"Purchase Order Line";
            "No." := PurchLineRec."Document No.";
            "Line No." := PurchLineRec."Line No.";
            Vendor := PurchLineRec."Buy-from Vendor No.";
            INSERT;
            NextEntryNo := NextEntryNo + 1;
          UNTIL PurchLineRec.NEXT = 0;
        END;

        PostedPurchRcptLineRec.RESET;
        PostedPurchRcptLineRec.SETCURRENTKEY("Purchase Route Reference");
        PostedPurchRcptLineRec.SETFILTER("Purchase Route Reference", IRefNoFilter);
        IF PostedPurchRcptLineRec.FINDSET(FALSE, FALSE) THEN BEGIN
          REPEAT
            INIT;
            Type := Type::Reference;
            "Reference No." := PostedPurchRcptLineRec."Purchase Route Reference";
            "Entry No." := NextEntryNo;
            "Line Type" := "Line Type"::"Posted Receipt Line";
            "No." := PostedPurchRcptLineRec."Document No.";
            "Line No." := PostedPurchRcptLineRec."Line No.";
            Vendor := PostedPurchRcptLineRec."Buy-from Vendor No.";
            INSERT;
            NextEntryNo := NextEntryNo + 1;
          UNTIL PostedPurchRcptLineRec.NEXT = 0;
        END;

        PurchLineRec.RESET;
        PurchLineRec.SETCURRENTKEY("Document Type","Purchase Route Reference");
        PurchLineRec.SETRANGE("Document Type", PurchLineRec."Document Type"::Invoice);
        PurchLineRec.SETFILTER("Purchase Route Reference", IRefNoFilter);
        IF PurchLineRec.FINDSET(FALSE, FALSE) THEN BEGIN
          REPEAT
            INIT;
            Type := Type::Reference;
            "Reference No." := PurchLineRec."Purchase Route Reference";
            "Entry No." := NextEntryNo;
            "Line Type" := "Line Type"::"Invoice Line";
            "No." := PurchLineRec."Document No.";
            "Line No." := PurchLineRec."Line No.";
            Vendor := PurchLineRec."Buy-from Vendor No.";
            INSERT;
            NextEntryNo := NextEntryNo + 1;
          UNTIL PurchLineRec.NEXT = 0;
        END;

        PurchLineRec.RESET;
        PurchLineRec.SETCURRENTKEY("Document Type","Purchase Route Reference");
        PurchLineRec.SETRANGE("Document Type", PurchLineRec."Document Type"::"Credit Memo");
        PurchLineRec.SETFILTER("Purchase Route Reference", IRefNoFilter);
        IF PurchLineRec.FINDSET(FALSE, FALSE) THEN BEGIN
          REPEAT
            INIT;
            Type := Type::Reference;
            "Reference No." := PurchLineRec."Purchase Route Reference";
            "Entry No." := NextEntryNo;
            "Line Type" := "Line Type"::"Credit Memo Line";
            "No." := PurchLineRec."Document No.";
            "Line No." := PurchLineRec."Line No.";
            Vendor := PurchLineRec."Buy-from Vendor No.";
            INSERT;
            NextEntryNo := NextEntryNo + 1;
          UNTIL PurchLineRec.NEXT = 0;
        END;

        ApprovalLineRec.RESET;
        ApprovalLineRec.SETCURRENTKEY("Purchase Route Reference");
        ApprovalLineRec.SETFILTER("Purchase Route Reference", IRefNoFilter);
        IF ApprovalLineRec.FINDSET(FALSE, FALSE) THEN BEGIN
          REPEAT
            INIT;
            Type := Type::Reference;
            "Reference No." := ApprovalLineRec."Purchase Route Reference";
            "Entry No." := NextEntryNo;
            IF ApprovalLineRec."Document Type" <> ApprovalLineRec."Document Type"::"Credit Memo" THEN
              "Line Type" := "Line Type"::"Inv. Approval Line"
            ELSE
              "Line Type" := "Line Type"::"Cr. Memo Approval Line";
            "No." := ApprovalLineRec."Document No.";
            "Line No." := ApprovalLineRec."Line No.";
            Vendor := ApprovalLineRec.Vendor;
            INSERT;
            NextEntryNo := NextEntryNo + 1;
          UNTIL ApprovalLineRec.NEXT = 0;
        END;

        PostedPurchInvLineRec.RESET;
        PostedPurchInvLineRec.SETCURRENTKEY("Purchase Route Reference");
        PostedPurchInvLineRec.SETFILTER("Purchase Route Reference", IRefNoFilter);
        IF PostedPurchInvLineRec.FINDSET(FALSE, FALSE) THEN BEGIN
          REPEAT
            INIT;
            Type := Type::Reference;
            "Reference No." := PostedPurchInvLineRec."Purchase Route Reference";
            "Entry No." := NextEntryNo;
            "Line Type" := "Line Type"::"Posted Invoice Line";
            "No." := PostedPurchInvLineRec."Document No.";
            "Line No." := PostedPurchInvLineRec."Line No.";
            Vendor := PostedPurchInvLineRec."Buy-from Vendor No.";
            INSERT;
            NextEntryNo := NextEntryNo + 1;
          UNTIL PostedPurchInvLineRec.NEXT = 0;
        END;

        PostedPurchCrMemoLineRec.RESET;
        PostedPurchCrMemoLineRec.SETCURRENTKEY("Purchase Route Reference");
        PostedPurchCrMemoLineRec.SETFILTER("Purchase Route Reference", IRefNoFilter);
        IF PostedPurchCrMemoLineRec.FINDSET(FALSE, FALSE) THEN BEGIN
          REPEAT
            INIT;
            Type := Type::Reference;
            "Reference No." := PostedPurchCrMemoLineRec."Purchase Route Reference";
            "Entry No." := NextEntryNo;
            "Line Type" := "Line Type"::"Posted Cr. Memo Line";
            "No." := PostedPurchCrMemoLineRec."Document No.";
            "Line No." := PostedPurchCrMemoLineRec."Line No.";
            Vendor := PostedPurchCrMemoLineRec."Buy-from Vendor No.";
            INSERT;
            NextEntryNo := NextEntryNo + 1;
          UNTIL PostedPurchCrMemoLineRec.NEXT = 0;
        END;

        PurchLineRec.RESET;
        PurchLineRec.SETCURRENTKEY("Document Type","Purchase Route Reference");
        PurchLineRec.SETRANGE("Document Type", PurchLineRec."Document Type"::"Blanket Order");
        PurchLineRec.SETFILTER("Purchase Route Reference", IRefNoFilter);
        IF PurchLineRec.FINDSET(FALSE, FALSE) THEN BEGIN
          REPEAT
            INIT;
            Type := Type::Reference;
            "Reference No." := PurchLineRec."Purchase Route Reference";
            "Entry No." := NextEntryNo;
            "Line Type" := "Line Type"::"Blanket Order Line";
            "No." := PurchLineRec."Document No.";
            "Line No." := PurchLineRec."Line No.";
            Vendor := PurchLineRec."Buy-from Vendor No.";
            INSERT;
            NextEntryNo := NextEntryNo + 1;
          UNTIL PurchLineRec.NEXT = 0;
        END;

        AssemblyYardNumberObject.RESET;
        AssemblyYardNumberObject.SETCURRENTKEY("Purchase Route Reference");
        AssemblyYardNumberObject.SETFILTER("Purchase Route Reference", IRefNoFilter);
        IF AssemblyYardNumberObject.FINDSET THEN BEGIN
          REPEAT
            INIT;
            Type := Type::Reference;
            "Reference No." := AssemblyYardNumberObject."Purchase Route Reference";
            "Entry No." := NextEntryNo;
            "Line Type" := "Line Type"::"Assembly Yard Number Object";
            "No." := AssemblyYardNumberObject."Project No.";
            "Yard No." := AssemblyYardNumberObject."Yard No.";
            "Entity Type" := AssemblyYardNumberObject."Entity Type";
            "System No." := AssemblyYardNumberObject."System No.";
            "Entity No." := AssemblyYardNumberObject."Entity No.";
            INSERT;
            NextEntryNo := NextEntryNo + 1;
          UNTIL AssemblyYardNumberObject.NEXT = 0;
        END;

        //DP01183.sn
        ServiceOrderCostPlusEntry.RESET;
        ServiceOrderCostPlusEntry.SETCURRENTKEY("Purchase Route Reference");
        ServiceOrderCostPlusEntry.SETFILTER("Purchase Route Reference", IRefNoFilter);
        IF ServiceOrderCostPlusEntry.FINDSET(FALSE, FALSE) THEN BEGIN
          REPEAT
            INIT;
            Type := Type::Reference;
            "Reference No." := ServiceOrderCostPlusEntry."Purchase Route Reference";
            "Entry No." := NextEntryNo;
            "Line Type" := "Line Type"::"Service Order Cost Plus Entry";
            "No." := ServiceOrderCostPlusEntry."Service Order No.";
            "Line No." := ServiceOrderCostPlusEntry."Line No.";
            INSERT;
            NextEntryNo := NextEntryNo + 1;
          UNTIL ServiceOrderCostPlusEntry.NEXT = 0;
        END;

        ShippingOrderLine.RESET;
        ShippingOrderLine.SETCURRENTKEY("Purchase Route Reference");
        ShippingOrderLine.SETFILTER("Purchase Route Reference", IRefNoFilter);
        IF ShippingOrderLine.FINDSET(FALSE, FALSE) THEN BEGIN
          REPEAT
            INIT;
            Type := Type::Reference;
            "Reference No." := ShippingOrderLine."Purchase Route Reference";
            "Entry No." := NextEntryNo;
            "Line Type" := "Line Type"::"Shipping Order Line";
            "No." := ShippingOrderLine."Document No.";
            "Line No." := ShippingOrderLine."Line No.";
            INSERT;
            NextEntryNo := NextEntryNo + 1;
          UNTIL ShippingOrderLine.NEXT = 0;
        END;
      END;
    END;

    [External]
    PROCEDURE ShowDataOfReferenceLine@1210190007(IPurchRouteRefRec@1210190000 : Record 11012079);
    VAR
      lvAdviceOrderFrm@1210190001 : Page 11012122;
      EstimateLinesCost@1100528900 : Page 11125316;
      RecipeLinesCost@1100528901 : Page 11125323;
      lvPurQuoteFrm@1210190004 : Page 49;
      lvPurOrderFrm@1210190005 : Page 50;
      lvPrjBudgetFrm@1210190006 : Page 11012003;
      lvAdjBudgetFrm@1210190007 : Page 11012011;
      lvPostedPurRcptFrm@1210190008 : Page 136;
      lvPurInvoiceFrm@1210190009 : Page 51;
      lvPurCreditMemoFrm@1210190010 : Page 52;
      lvApprInvoiceFrm@1210190013 : Page 11012066;
      lvApprCreditMemoFrm@1210190014 : Page 11012068;
      lvPostedPurInvoiceFrm@1210190011 : Page 138;
      lvPostedPurCreditMemoFrm@1210190012 : Page 140;
      lvBlnktOrderFrm@1210190015 : Page 509;
      AssemblyProjectPage@1100528400 : Page 11124890;
      EstimateParagraphsRAW@1100528600 : Page 11126875;
      ServiceOrderCostPlusPage@1100529400 : Page 11126280;
      ShippingOrderPage@1100527303 : Page 11124930;
      PurchaseRequisitionPage@1100528903 : Page 11126654;
      ProjectInventoryEntryPage@1100528904 : Page 11012670;
      JobLedgerEntryPage@1100528902 : Page 11072005;
      ProjectMatReqLineList@1100528500 : Page 11072352;
    BEGIN
      WITH IPurchRouteRefRec DO BEGIN
        CASE "Line Type" OF
          "Line Type"::"Estimate Line":
            BEGIN
              EstRec.GET("No.");
              IF EstRec."RAW Estimate" THEN BEGIN
                EstimateElementRAW.SETRANGE("Estimate No.", "No.");
                EstimateElementRAW.SETRANGE("Tender Paragraph No.", "Tender Paragraph");
                IF EstimateElementRAW.FINDFIRST THEN;
                EstimateElementRAW.SETRANGE("Tender Paragraph No.");
                EstimateParagraphsRAW.SETTABLEVIEW(EstimateElementRAW);
                EstimateParagraphsRAW.RUNMODAL;
              END ELSE BEGIN
                EstimateLine.RESET;
                EstimateLine.SETRANGE("Estimate No.", "No.");
                EstimateLine.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
                EstimateLine.SETRANGE("Part Group", "Part Group");
                EstimateLine.SETRANGE(Part, Part);
                EstimateLinesCost.SETTABLEVIEW(EstimateLine);
                EstimateLinesCost.InitSelectionFromReference("Estimate Line");
                EstimateLinesCost.RUNMODAL;
              END;
            END;
          "Line Type"::"Recipe Line":
            BEGIN
              EstimateRecipeLine.RESET;
              EstimateRecipeLine.SETRANGE("Estimate No.", "No.");
              EstimateRecipeLine.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
              EstimateRecipeLine.SETRANGE("Part Group", "Part Group");
              EstimateRecipeLine.SETRANGE(Part, Part);
              EstimateRecipeLine.SETRANGE("Line No.", "Estimate Line");
              RecipeLinesCost.SETTABLEVIEW(EstimateRecipeLine);
              RecipeLinesCost.InitSelectionFromReference("Line No.");
              RecipeLinesCost.RUNMODAL;
            END;
          "Line Type"::"Quote Line":
            BEGIN
              PurchHeadRec.RESET;
              PurchHeadRec.SETRANGE("Document Type", PurchLineRec."Document Type"::Quote);
              PurchHeadRec.SETRANGE("No.", "No.");
              lvPurQuoteFrm.SETTABLEVIEW(PurchHeadRec);
              lvPurQuoteFrm.InitSelectionFromReference("Line No.");
              lvPurQuoteFrm.RUNMODAL;
            END;
          "Line Type"::"Budget Line":
            BEGIN
              IF Adjustment = '' THEN BEGIN
                ProjRec.RESET;
                ProjRec.FILTERGROUP(4);  //DP01183
                ProjRec.SETRANGE("No.", "No.");
                ProjRec.FILTERGROUP(0);  //DP01183
                lvPrjBudgetFrm.SETTABLEVIEW(ProjRec);
                lvPrjBudgetFrm.InitSelectionFromReference("Line No.");
                lvPrjBudgetFrm.RUNMODAL;
              END ELSE BEGIN
                BudgetAdjRec.RESET;
                BudgetAdjRec.SETRANGE("Project No.", "No.");
                BudgetAdjRec.SETRANGE("No.", Adjustment);
                lvAdjBudgetFrm.SETTABLEVIEW(BudgetAdjRec);
                lvAdjBudgetFrm.InitSelectionFromReference("Line No.");
                lvAdjBudgetFrm.RUNMODAL;
              END;
            END;
          "Line Type"::ProjMatReqLine:  //C046460
            BEGIN
              ProjectMaterialReqLine.RESET;
              ProjectMaterialReqLine.SETRANGE("Project No.", "No.");
              ProjectMatReqLineList.SETTABLEVIEW(ProjectMaterialReqLine);
              ProjectMaterialReqLine."Purchase Route Reference" := "Reference No.";
              ProjectMaterialReqLine."Line No." := "Line No.";
              ProjectMatReqLineList.SETRECORD(ProjectMaterialReqLine);
              ProjectMatReqLineList.RUNMODAL;
            END;
          "Line Type"::"Advice Order":
            BEGIN
              lvAdviceOrderFrm.SetSelection(0, "Reference No.");
              lvAdviceOrderFrm.RUNMODAL;
            END;
          "Line Type"::"Purchase Order Line":
            BEGIN
              PurchHeadRec.RESET;
              PurchHeadRec.SETRANGE("Document Type", PurchLineRec."Document Type"::Order);
              PurchHeadRec.SETRANGE("No.", "No.");
              lvPurOrderFrm.SETTABLEVIEW(PurchHeadRec);
              lvPurOrderFrm.InitSelectionFromReference("Line No.");
              lvPurOrderFrm.RUNMODAL;
            END;
          "Line Type"::"Posted Receipt Line":
            BEGIN
              PostedPurchRcptHeadRec.RESET;
              PostedPurchRcptHeadRec.SETRANGE("No.", "No.");
              lvPostedPurRcptFrm.SETTABLEVIEW(PostedPurchRcptHeadRec);
              lvPostedPurRcptFrm.InitSelectionFromReference("Line No.");
              lvPostedPurRcptFrm.RUNMODAL;
            END;
          "Line Type"::"Invoice Line":
            BEGIN
              PurchHeadRec.RESET;
              PurchHeadRec.SETRANGE("Document Type", PurchLineRec."Document Type"::Invoice);
              PurchHeadRec.SETRANGE("No.", "No.");
              lvPurInvoiceFrm.SETTABLEVIEW(PurchHeadRec);
              lvPurInvoiceFrm.InitSelectionFromReference("Line No.");
              lvPurInvoiceFrm.RUNMODAL;
            END;
          "Line Type"::"Credit Memo Line":
            BEGIN
              PurchHeadRec.RESET;
              PurchHeadRec.SETRANGE("Document Type", PurchLineRec."Document Type"::"Credit Memo");
              PurchHeadRec.SETRANGE("No.", "No.");
              lvPurCreditMemoFrm.SETTABLEVIEW(PurchHeadRec);
              lvPurCreditMemoFrm.InitSelectionFromReference("Line No.");
              lvPurCreditMemoFrm.RUNMODAL;
            END;
          "Line Type"::"Inv. Approval Line":
            BEGIN
              PostedPurchInvHeadRec.RESET;
              PostedPurchInvHeadRec.SETRANGE("No.", "No.");
              lvApprInvoiceFrm.SETTABLEVIEW(PostedPurchInvHeadRec);
              lvApprInvoiceFrm.InitSelectionFromReference("Line No.");
              lvApprInvoiceFrm.RUNMODAL;
            END;
          "Line Type"::"Cr. Memo Approval Line":
            BEGIN
              PostedPurchCrMemoHeadRec.RESET;
              PostedPurchCrMemoHeadRec.SETRANGE("No.", "No.");
              lvApprCreditMemoFrm.SETTABLEVIEW(PostedPurchCrMemoHeadRec);
              lvApprCreditMemoFrm.InitSelectionFromReference("Line No.");
              lvApprCreditMemoFrm.RUNMODAL;
            END;
          "Line Type"::"Posted Invoice Line":
            BEGIN
              PostedPurchInvHeadRec.RESET;
              PostedPurchInvHeadRec.SETRANGE("No.", "No.");
              lvPostedPurInvoiceFrm.SETTABLEVIEW(PostedPurchInvHeadRec);
              lvPostedPurInvoiceFrm.InitSelectionFromReference("Line No.");
              lvPostedPurInvoiceFrm.RUNMODAL;
            END;
          "Line Type"::"Posted Cr. Memo Line":
            BEGIN
              PostedPurchCrMemoHeadRec.RESET;
              PostedPurchCrMemoHeadRec.SETRANGE("No.", "No.");
              lvPostedPurCreditMemoFrm.SETTABLEVIEW(PostedPurchCrMemoHeadRec);
              lvPostedPurCreditMemoFrm.InitSelectionFromReference("Line No.");
              lvPostedPurCreditMemoFrm.RUNMODAL;
            END;
          "Line Type"::"Blanket Order Line":
            BEGIN
              PurchHeadRec.RESET;
              PurchHeadRec.SETRANGE("Document Type", PurchLineRec."Document Type"::"Blanket Order");
              PurchHeadRec.SETRANGE("No.", "No.");
              lvBlnktOrderFrm.SETTABLEVIEW(PurchHeadRec);
              lvBlnktOrderFrm.InitSelectionFromReference("Line No.");
              lvBlnktOrderFrm.RUNMODAL;
            END;
          "Line Type"::"Assembly Yard Number Object":
            BEGIN
              ProjRec.RESET;
              ProjRec.SETRANGE("No.", "No.");
              AssemblyProjectPage.SETTABLEVIEW(ProjRec);
              AssemblyProjectPage.InitSelectionFromReference(
                "Yard No.", "Entity Type", "System No.", "Entity No.");
              AssemblyProjectPage.RUNMODAL;
            END;
          "Line Type"::"Service Order Cost Plus Entry":  //DP01183
            BEGIN
              ServiceOrderCostPlusEntry.RESET;
              ServiceOrderCostPlusEntry.SETRANGE("Service Order No.", "No.");
              ServiceOrderCostPlusPage.SETTABLEVIEW(ServiceOrderCostPlusEntry);
              ServiceOrderCostPlusEntry."Service Order No." := "No.";
              ServiceOrderCostPlusEntry. "Line No." := "Line No.";
              ServiceOrderCostPlusPage.SETRECORD(ServiceOrderCostPlusEntry);
              ServiceOrderCostPlusPage.RUNMODAL;
            END;
          "Line Type"::"Shipping Order Line":
            BEGIN
              ShippingOrderHeader.RESET;
              ShippingOrderHeader.SETRANGE("No.", "No.");
              ShippingOrderPage.SETTABLEVIEW(ShippingOrderHeader);
              ShippingOrderPage.RUNMODAL;
            END;
          "Line Type"::"Purchase Requisition":  //DP01137
            BEGIN
              PurchaseRequisitionLine.RESET;
              PurchaseRequisitionLine.SETRANGE("Purchase Requisition No.", "No.");
              PurchaseRequisitionPage.SETTABLEVIEW(PurchaseRequisitionLine);
              PurchaseRequisitionLine."Purchase Requisition No." := "No.";
              PurchaseRequisitionLine."Line No." := "Line No.";
              PurchaseRequisitionPage.SETRECORD(PurchaseRequisitionLine);
              PurchaseRequisitionPage.RUNMODAL;
            END;
          "Line Type"::"Project Inventory Entry":  //DP01137
            BEGIN
              ProjectInventoryEntry.RESET;
              ProjectInventoryEntry.SETRANGE("Document No.", "No.");
              ProjectInventoryEntry.SETRANGE("Entry No.", "Line No.");
              ProjectInventoryEntryPage.SETTABLEVIEW(ProjectInventoryEntry);
              ProjectInventoryEntryPage.RUNMODAL;
            END;
          "Line Type"::JobLedgerEntry:  //DP01727
            BEGIN
              JobLedgerEntry.RESET;
              JobLedgerEntry.SETRANGE("Job No.", "No.");
              JobLedgerEntry.SETRANGE("Entry No.", "Line No.");
              JobLedgerEntryPage.SETTABLEVIEW(JobLedgerEntry);
              JobLedgerEntryPage.RUNMODAL;
            END;
        END;
      END;
    END;

    [External]
    PROCEDURE GetQuoteOfReference@1210190009(IRefNo@1210190000 : Code[20]) : Code[20];
    VAR
      lvCounter@1210190001 : Integer;
      lvQuote@1210190002 : Code[20];
    BEGIN
      WITH PurchLineRec DO BEGIN
        IF (IRefNo = '') THEN
          EXIT('');
        lvCounter := 0;
        lvQuote := '';
        RESET;
        SETCURRENTKEY("Document Type","Purchase Route Reference");
        SETRANGE("Document Type", "Document Type"::Quote);
        SETRANGE("Purchase Route Reference", IRefNo);
        IF FINDSET(FALSE, FALSE) THEN BEGIN
          REPEAT
            lvCounter := lvCounter + 1;
            lvQuote := "Document No.";
          UNTIL NEXT = 0;
        END;

        IF lvCounter > 1 THEN
          lvQuote := STRSUBSTNO('<%1>', lvCounter);

        EXIT(lvQuote);
      END;
    END;

    [External]
    PROCEDURE GetQuoteOfReferenceCompressed@1210190012(IRefNoFilter@1210190000 : Code[1024]) : Code[20];
    VAR
      lvTmpPurchHeadRec@1210190003 : TEMPORARY Record 38;
      lvCounter@1210190001 : Integer;
      lvQuote@1210190002 : Code[20];
    BEGIN
      WITH PurchLineRec DO BEGIN
        IF (IRefNoFilter = '') THEN
          EXIT('');
        lvCounter := 0;
        lvQuote := '';
        RESET;
        SETCURRENTKEY("Document Type","Purchase Route Reference");
        SETRANGE("Document Type", "Document Type"::Quote);
        SETFILTER("Purchase Route Reference", IRefNoFilter);
        IF FINDSET(FALSE, FALSE) THEN BEGIN
          REPEAT
            lvTmpPurchHeadRec.SETRANGE("Document Type", "Document Type"::Quote);
            lvTmpPurchHeadRec.SETRANGE("No.", "Document No.");
            IF NOT lvTmpPurchHeadRec.FIND('-') THEN BEGIN
              lvTmpPurchHeadRec."Document Type" := "Document Type"::Quote;
              lvTmpPurchHeadRec."No." := "Document No.";
              lvTmpPurchHeadRec.INSERT;
            END;
          UNTIL NEXT = 0;
        END;

        lvTmpPurchHeadRec.RESET;
        lvTmpPurchHeadRec.SETRANGE("Document Type", "Document Type"::Quote);
        IF lvTmpPurchHeadRec.FIND('-') THEN BEGIN
          REPEAT
            lvCounter := lvCounter + 1;
            lvQuote := "Document No.";
          UNTIL lvTmpPurchHeadRec.NEXT = 0;
        END;

        IF lvCounter > 1 THEN
          lvQuote := STRSUBSTNO('<%1>', lvCounter);

        EXIT(lvQuote);
      END;
    END;

    [External]
    PROCEDURE GetPurchOrderOfReference@1210190013(IRefNo@1210190000 : Code[20]) : Code[20];
    VAR
      lvCounter@1210190001 : Integer;
      lvDocNo@1210190002 : Code[20];
    BEGIN
      WITH PurchLineRec DO BEGIN
        IF (IRefNo = '') THEN
          EXIT('');
        lvCounter := 0;
        lvDocNo := '';
        RESET;
        SETCURRENTKEY("Document Type","Purchase Route Reference");
        SETRANGE("Document Type", PurchLineRec."Document Type"::Order);
        SETRANGE("Purchase Route Reference", IRefNo);
        IF FINDSET(FALSE, FALSE) THEN BEGIN
          REPEAT
            lvCounter := lvCounter + 1;
            lvDocNo := "Document No.";
          UNTIL NEXT = 0;
        END;

        IF lvCounter > 1 THEN
          lvDocNo := STRSUBSTNO('<%1>', lvCounter);

        EXIT(lvDocNo);
      END;
    END;

    [External]
    PROCEDURE SetQuoteToOrderAllowed@1210190004(IRefNo@1210190000 : Code[20];IQuote@1210190001 : Code[20];VAR ODocument@1210190002 : Code[20];VAR OLineNo@1210190003 : Integer) : Boolean;
    BEGIN
      ODocument := '';
      OLineNo := 0;

      IF (IRefNo = '') THEN
        EXIT(TRUE);

      PurchLineRec.RESET;
      PurchLineRec.SETCURRENTKEY("Document Type","Purchase Route Reference");
      PurchLineRec.SETRANGE("Document Type", PurchLineRec."Document Type"::Quote);
      PurchLineRec.SETRANGE("Purchase Route Reference", IRefNo);
      PurchLineRec.SETFILTER("Document No.", '<>%1', IQuote);
      PurchLineRec.SETRANGE("Quote Selected", TRUE);
      IF NOT PurchLineRec.FINDFIRST THEN
        EXIT(TRUE);

      ODocument := PurchLineRec."Document No.";
      OLineNo := PurchLineRec."Line No.";

      EXIT(FALSE);
    END;

    [External]
    PROCEDURE CheckReferenceHasSelectedQuote@1210190008(IRefNo@1210190000 : Code[20];VAR OPurchLineRec@1210190001 : Record 39) : Boolean;
    BEGIN
      CLEAR(OPurchLineRec);
      IF (IRefNo = '') THEN
        EXIT(FALSE);

      PurchLineRec.RESET;
      PurchLineRec.SETCURRENTKEY("Document Type","Purchase Route Reference");
      PurchLineRec.SETRANGE("Document Type", PurchLineRec."Document Type"::Quote);
      PurchLineRec.SETRANGE("Purchase Route Reference", IRefNo);
      PurchLineRec.SETRANGE("Quote Selected", TRUE);
      IF NOT PurchLineRec.FINDFIRST THEN
        EXIT(FALSE);

      OPurchLineRec := PurchLineRec;
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE CheckDeleteEstLineHasQuoteNEW@1100528902(IEstLineRec@1210190004 : Record 11072072;IConfirm@1210190001 : Boolean);
    VAR
      lvRcpLineRec@1210190005 : Record 11072075;
      lvRefNo@1210190000 : Code[20];
      lvQuoteStr@1210190003 : Text[200];
    BEGIN
      WITH IEstLineRec DO BEGIN
        lvRefNo := '';
        IF ("Purchase Route Reference" <> '') THEN
          lvRefNo := "Purchase Route Reference"
        ELSE BEGIN
          lvRcpLineRec.SETRANGE("Estimate No.", "Estimate No.");
          lvRcpLineRec.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
          lvRcpLineRec.SETRANGE("Part Group", "Part Group");
          lvRcpLineRec.SETRANGE(Part, Part);
          lvRcpLineRec.SETRANGE("Estimate Line", "Line No.");
          lvRcpLineRec.SETFILTER("Purchase Route Reference", '<>%1', '');
          IF lvRcpLineRec.FINDFIRST THEN
            lvRefNo := lvRcpLineRec."Purchase Route Reference"
        END;
        IF (lvRefNo = '') THEN
          EXIT;

        lvQuoteStr := lvFillQuoteString(lvRefNo);
        IF lvQuoteStr = '' THEN
          EXIT;

        IF IConfirm THEN BEGIN
          IF CONFIRM(Text001 + '\\' + Text002, FALSE, TABLECAPTION, "Estimate No." + ' - ' +
                     "Sub-Estimate No." + ' - ' + Part + ' - ' + FORMAT("Line No."), lvQuoteStr)
          THEN
            EXIT
          ELSE
            ERROR('');
        END;
        ERROR(Text001);
      END;
    END;

    [External]
    PROCEDURE CheckDeleteRcpLineHasQuoteNEW@1100528901(IRcpLineRec@1210190004 : Record 11072075;IConfirm@1210190001 : Boolean);
    VAR
      lvQuoteStr@1210190003 : Text[200];
    BEGIN
      WITH IRcpLineRec DO BEGIN
        IF ("Purchase Route Reference" = '') THEN
          EXIT;

        lvQuoteStr := lvFillQuoteString("Purchase Route Reference");
        IF lvQuoteStr = '' THEN
          EXIT;

        IF IConfirm THEN BEGIN
          IF CONFIRM(Text001 + '\\' + Text002, FALSE, TABLECAPTION, "Estimate No." + ' - ' + "Sub-Estimate No." + ' - ' +
                     Part + ' - ' + FORMAT("Estimate Line") + ' - ' + Recipe + ' - ' + FORMAT("Line No."), lvQuoteStr)
          THEN
            EXIT
          ELSE
            ERROR('');
        END;
        ERROR(Text001);
      END;
    END;

    LOCAL PROCEDURE lvFillQuoteString@1210190020(IRefNo@1210190000 : Code[20]) : Text[200];
    VAR
      lvPurchLineRec@1210190002 : Record 39;
      lvQuoteStr@1210190001 : Text[200];
    BEGIN
      WITH lvPurchLineRec DO BEGIN
        lvQuoteStr := '';

        RESET;
        SETCURRENTKEY("Document Type","Purchase Route Reference");
        SETRANGE("Document Type", "Document Type"::Quote);
        SETRANGE("Purchase Route Reference", IRefNo);
        IF NOT FINDSET(FALSE, FALSE) THEN
          EXIT('');

        REPEAT
          IF PurchHeadRec.GET("Document Type", "Document No.") THEN BEGIN
            IF PurchHeadRec."Quote Status" <> PurchHeadRec."Quote Status"::Thanks THEN BEGIN
              IF (STRLEN(lvQuoteStr) + STRLEN("Document No.") + 2) <= MAXSTRLEN(lvQuoteStr) THEN BEGIN
                IF lvQuoteStr = '' THEN
                  lvQuoteStr := "Document No."
                ELSE
                  lvQuoteStr := lvQuoteStr + ', ' + "Document No.";
              END;
            END;
          END;
        UNTIL NEXT = 0;

        EXIT(lvQuoteStr);
      END;
    END;

    [External]
    PROCEDURE UpdateQuoteLinesFromBudget@1210190005(IBudgetRec@1210190000 : Record 11012001);
    BEGIN
      WITH IBudgetRec DO BEGIN
        IF ("Purchase Route Reference" = '') THEN
          EXIT;

        PurchLineRec.RESET;
        PurchLineRec.SETCURRENTKEY("Document Type","Purchase Route Reference");
        PurchLineRec.SETRANGE("Document Type", PurchLineRec."Document Type"::Quote);
        PurchLineRec.SETRANGE("Purchase Route Reference", "Purchase Route Reference");
        IF PurchLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
          REPEAT
            PurchLineRec.VALIDATE("Job No.", "Project No.");
            PurchLineRec.Element := Element;
            PurchLineRec."Extension Contract" := "Extension Contract";
            PurchLineRec."Modified by" := USERID; //DP00469
            PurchLineRec."Last Date Modified" := TODAY;//DP00469
            PurchLineRec.MODIFY;
          UNTIL PurchLineRec.NEXT = 0;
        END;
      END;
    END;

    [External]
    PROCEDURE CloseAdvOrderFromPurchOrderLin@1210190006(IPurchOrderLineRec@1210190000 : Record 39);
    BEGIN
      WITH IPurchOrderLineRec DO BEGIN
        IF ("Purchase Route Reference" = '') THEN
          EXIT;

        AdviceOrderRec.RESET;
        AdviceOrderRec.SETCURRENTKEY("Purchase Route Reference");
        AdviceOrderRec.SETRANGE("Purchase Route Reference", "Purchase Route Reference");
        IF AdviceOrderRec.FINDSET(TRUE, FALSE) THEN BEGIN
          REPEAT
            IF (NOT AdviceOrderRec.Processed) OR
               (AdviceOrderRec."Process Status" <> AdviceOrderRec."Process Status"::Processed)
            THEN BEGIN
              AdviceOrderRec.VALIDATE(Processed, TRUE);
              AdviceOrderRec."Process Status" := AdviceOrderRec."Process Status"::Processed;
              AdviceOrderRec.MODIFY(TRUE);
            END;
          UNTIL AdviceOrderRec.NEXT = 0;
        END;
      END;
    END;

    BEGIN
    END.
  }
}

