OBJECT Report 11128021 Report back from Plus Giro
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVSE6.00.01 (11211),4PSSE;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Report back from Plus Giro;
               NOR=Rapporter tilbake fra Plussgiro;
               SVE=èterrapportering frÜn plusgiro];
    ShowPrintStatus=No;
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  IF FileName = '' THEN
                    ERROR(BA001);
                  IF ISSERVICETIER THEN
                      UploadFile(FileName);
                  CLEAR(TxtFile);
                  TxtFile.TEXTMODE := TRUE;
                  TxtFile.OPEN(FileName);
                END;

    OnPostReport=BEGIN
                   Window.OPEN('@1@@@@@@@@@@@@@@@@@@@@@@@@@');
                   WHILE TxtFile.LEN <> TxtFile.POS DO BEGIN
                     Window.UPDATE(1,ROUND((TxtFile.POS/TxtFile.LEN*10000),1.0));
                     TxtFile.READ(TxtLine);
                     LineType := COPYSTR(TxtLine,1,1);
                     CASE LineType OF
                       '0':
                         BEGIN // Opening Line
                           PostingDate := Txt2Date(TxtLine,49,6);
                           CurrIsEUR :=  COPYSTR(TxtLine,55,3) = 'EUR';
                           IF CurrIsEUR THEN BEGIN
                             IF BankAccountNoEUR = '' THEN
                               ERROR(BA007);
                           END ELSE BEGIN
                             IF BankAccountNoSEK = '' THEN
                               ERROR(BA006);
                           END;
                         END;
                       '4': DocumentNo := COPYSTR(TxtLine,9,23);
                       '5','6':
                         BEGIN // Transaction
                           xGenJournalLine := GenJournalLine;
                           CLEAR(VendorLedgerEntry);
                           GenJournalLine.INIT;
                           GenJournalLine."Line No." += 10000;
                           GenJournalLine.SetUpNewLine(xGenJournalLine,0,TRUE);
                           GenJournalLine.VALIDATE("Posting Date",Txt2Date(TxtLine,53,6));
                           GenJournalLine.VALIDATE("Account Type",GenJournalLine."Account Type"::Vendor);
                           GenJournalLine."Document Type" := GenJournalLine."Document Type"::Payment;
                           IF LineType = '5' THEN BEGIN
                             IF InvioceExists(DocumentNo) THEN BEGIN
                               GenJournalLine.VALIDATE("Account No.",VendorLedgerEntry."Vendor No.");
                               GenJournalLine.VALIDATE("Applies-to Doc. No.",VendorLedgerEntry."Document No.");
                             END ELSE BEGIN
                               GenJournalLine.VALIDATE("Account No.", ''); //DL130925
                               GenJournalLine.VALIDATE("Applies-to Doc. No.", '');
                             END;
                             GenJournalLine.VALIDATE(Amount,Txt2Dec(TxtLine,42,11));
                             GenJournalLine.VALIDATE(Description,GenJournalLine."Applies-to Doc. No." + ' ' + BA002);
                           END ELSE BEGIN
                             IF CreditMemoExists(DocumentNo) THEN BEGIN
                               GenJournalLine.VALIDATE("Account No.",VendorLedgerEntry."Vendor No.");
                               GenJournalLine.VALIDATE("Applies-to Doc. No.",VendorLedgerEntry."Document No.");
                             END ELSE BEGIN
                               GenJournalLine.VALIDATE("Account No.", ''); //DL130925
                               GenJournalLine.VALIDATE("Applies-to Doc. No.", '');
                               GenJournalLine."Applies-to Doc. Type" := GenJournalLine."Applies-to Doc. Type"::"Credit Memo"; //130925
                             END;
                             GenJournalLine.VALIDATE(Amount,-Txt2Dec(TxtLine,42,11));
                             GenJournalLine.VALIDATE(Description,GenJournalLine."Applies-to Doc. No." + ' ' + BA003);
                           END;
                           IF GenJournalLine."Applies-to Doc. No." = '' THEN
                             GenJournalLine.VALIDATE(Description, BA004 + ' ' + DocumentNo);
                           GenJournalLine.INSERT;
                         END;
                       '8':
                         BEGIN // End line
                           xGenJournalLine := GenJournalLine;
                           GenJournalLine.INIT;
                           GenJournalLine."Line No." += 10000;
                           GenJournalLine.SetUpNewLine(xGenJournalLine,0,TRUE);
                           GenJournalLine.VALIDATE("Posting Date",PostingDate);
                           GenJournalLine.VALIDATE("Account Type",GenJournalLine."Account Type"::"G/L Account");
                           IF CurrIsEUR THEN
                             GenJournalLine.VALIDATE("Account No.",BankAccountNoEUR)
                           ELSE
                             GenJournalLine.VALIDATE("Account No.",BankAccountNoSEK);
                           GenJournalLine.VALIDATE(Amount,-Txt2DecSign(TxtLine,19,13));
                           GenJournalLine.INSERT;
                         END;
                     END;
                   END;
                   TxtFile.CLOSE;
                 END;

  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 1070003;2;Group     ;
                  CaptionML=[ENU=SEK;
                             NOR=SEK;
                             SVE=SEK] }

      { 1070004;3;Field     ;
                  CaptionML=[ENU=Account Type;
                             NOR=Kontotype;
                             SVE=Kontotyp];
                  OptionCaptionML=[ENU=G/L Account,,,Bank Account;
                                   NOR=Hovedbokskonto,,,Bankkonto;
                                   SVE=Redov.konto,,,Bankkonto];
                  SourceExpr=AccountTypeSEK;
                  OnValidate=BEGIN
                               CLEAR(BankAccountNoSEK);
                             END;
                              }

      { 1070000;3;Field     ;
                  CaptionML=[ENU=Account No;
                             NOR=Nr;
                             SVE=Kontonr];
                  SourceExpr=BankAccountNoSEK;
                  OnValidate=BEGIN
                               IF BankAccountNoSEK = '' THEN
                                 EXIT;
                               CASE AccountTypeSEK OF
                                 AccountTypeSEK::"G/L Account":
                                   BEGIN
                                     GLAccountSEK.GET(BankAccountNoSEK);
                                   END;
                                 AccountTypeSEK::"Bank Account":
                                   BEGIN
                                     BankAccountSEK.GET(BankAccountNoSEK);
                                   END;
                               END;
                             END;

                  OnLookup=BEGIN
                             CASE AccountTypeSEK OF
                               AccountTypeSEK::"G/L Account":
                                 BEGIN
                                   IF PAGE.RUNMODAL(0,GLAccountSEK) = ACTION::LookupOK THEN
                                     BankAccountNoSEK := GLAccountSEK."No.";
                                 END;
                               AccountTypeSEK::"Bank Account":
                                 BEGIN
                                   IF PAGE.RUNMODAL(0,BankAccountSEK) = ACTION::LookupOK THEN
                                     BankAccountNoSEK := BankAccountSEK."No.";
                                 END;
                             END;
                           END;
                            }

      { 1070008;2;Group     ;
                  CaptionML=[ENU=EUR;
                             NOR=EUR;
                             SVE=EUR] }

      { 1070009;3;Field     ;
                  CaptionML=[ENU=Account Type;
                             NOR=Kontotype;
                             SVE=Kontotyp];
                  OptionCaptionML=[ENU=G/L Account,,,Bank Account;
                                   NOR=Hovedbokskonto,,,Bankkonto;
                                   SVE=Redov.konto,,,Bankkonto];
                  SourceExpr=AccountTypeEUR;
                  OnValidate=BEGIN
                               CLEAR(BankAccountNoEUR);
                             END;
                              }

      { 1070006;3;Field     ;
                  CaptionML=[ENU=Account No;
                             NOR=Nr;
                             SVE=Kontonr];
                  SourceExpr=BankAccountNoEUR;
                  OnValidate=BEGIN
                               IF BankAccountNoEUR = '' THEN
                                 EXIT;
                               CASE AccountTypeEUR OF
                                 AccountTypeEUR::"G/L Account":
                                   BEGIN
                                     GLAccountEUR.GET(BankAccountNoEUR);
                                   END;
                                 AccountTypeEUR::"Bank Account":
                                   BEGIN
                                     BankAccountEUR.GET(BankAccountNoEUR);
                                   END;
                               END;
                             END;

                  OnLookup=BEGIN
                             CASE AccountTypeEUR OF
                               AccountTypeEUR::"G/L Account":
                                 BEGIN
                                   IF PAGE.RUNMODAL(0,GLAccountEUR) = ACTION::LookupOK THEN
                                     BankAccountNoEUR := GLAccountEUR."No.";
                                 END;
                               AccountTypeEUR::"Bank Account":
                                 BEGIN
                                   IF PAGE.RUNMODAL(0,BankAccountEUR) = ACTION::LookupOK THEN
                                     BankAccountNoEUR := BankAccountEUR."No.";
                                 END;
                             END;
                           END;
                            }

      { 1070032;2;Field     ;
                  AssistEdit=Yes;
                  CaptionML=[ENU=Filename;
                             NOR=Filnavn;
                             SVE=Filnamn];
                  SourceExpr=FileName;
                  OnAssistEdit=BEGIN
                                 UploadFile(FileName);
                               END;
                                }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      FileName@1070018 : Text[250];
      TxtFile@1070017 : File;
      TxtLine@1070016 : Text[1000];
      GenJournalLine@1070015 : Record 81;
      xGenJournalLine@1070014 : Record 81;
      VendorLedgerEntry@1070013 : Record 25;
      DocumentNo@1070012 : Code[10];
      PostingDate@1070011 : Date;
      LineType@1070010 : Code[10];
      CurrIsEUR@1070009 : Boolean;
      Window@1070008 : Dialog;
      AccountTypeSEK@1070007 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset';
      BankAccountNoSEK@1070006 : Code[20];
      GLAccountSEK@1070005 : Record 15;
      BankAccountSEK@1070004 : Record 270;
      AccountTypeEUR@1070003 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset';
      BankAccountNoEUR@1070002 : Code[20];
      GLAccountEUR@1070001 : Record 15;
      BankAccountEUR@1070000 : Record 270;
      BA001@1070025 : TextConst 'ENU=File Name must not be blank;NOR=Filnavnet kan ikke vëre tomt;SVE=Filnamnet fÜr inte vara tomt';
      BA002@1070024 : TextConst 'ENU=Inv. Payment Vendor;NOR=Betalingsleverandõr;SVE=Betalningsleverantîr';
      BA003@1070023 : TextConst 'ENU=Cr. Memo Reduction Vendor;NOR=Betalingsleverandõr for kreditnota;SVE=Betalningsleverantîr fîr kreditnota';
      BA004@1070022 : TextConst 'ENU="Wrong reference. Doc. No.: ";NOR=Feilaktig referanse. Dokumentnr:;SVE="Felaktig referens. Dokumentnr: "';
      BA005@1070021 : TextConst 'ENU=The Decimal Value "%1" is wrong.;NOR=Desimalverdien "%1" er feilaktig.;SVE=DecimalvÑrdet "%1" Ñr felaktigt.';
      BA006@1070020 : TextConst 'ENU=You must enter SEK Bank Account No.;NOR=Du mÜ angi bankkontonr for SEK.;SVE=Du mÜste ange bankkontonr fîr SEK.';
      BA007@1070019 : TextConst 'ENU=You must enter EUR Bank Account No.;NOR=Du mÜ angi bankkontonr for EUR.;SVE=Du mÜste ange bankkontonr fîr EUR.';
      BA09@1070027 : TextConst 'ENU=Import File Name;NOR=Importer filnavn;SVE=Importera filnamn';
      BA10@1070026 : TextConst 'ENU=Text Files|*.txt|All Files|*.*;NOR=Tekstfiler|*.txt|Alle filer|*.*;SVE=Textfiler|*.txt|Alla filer|*.*';

    PROCEDURE SetGenJournal@1070011(InGenJournalLine@1070000 : Record 81);
    BEGIN
      GenJournalLine := InGenJournalLine;
    END;

    PROCEDURE InvioceExists@1070012(InDocumentNo@1070001 : Code[20]) : Boolean;
    BEGIN
      VendorLedgerEntry.SETCURRENTKEY("Document No.");
      VendorLedgerEntry.SETRANGE(Open,TRUE);
      VendorLedgerEntry.SETRANGE("Document No.",InDocumentNo);
      EXIT(VendorLedgerEntry.FIND('-'));
    END;

    PROCEDURE CreditMemoExists@1070015(InDocumentNo@1070001 : Code[20]) : Boolean;
    BEGIN
      VendorLedgerEntry.SETCURRENTKEY("Document No.");
      VendorLedgerEntry.SETRANGE(Open,TRUE);
      VendorLedgerEntry.SETRANGE("Document No.",InDocumentNo);
      EXIT(VendorLedgerEntry.FIND('-'));
    END;

    PROCEDURE Txt2Date@1070010(InText@1070000 : Text[250];StartPos@1070005 : Integer;Length@1070004 : Integer) : Date;
    BEGIN
      InText := COPYSTR(InText,StartPos,Length);
      EXIT(DMY2DATE(Txt2Int(InText,5,2),Txt2Int(InText,3,2),2000 + Txt2Int(InText,1,2)));
    END;

    PROCEDURE Txt2Int@1070001(InText@1070000 : Text[250];StartPos@1070001 : Integer;Length@1070002 : Integer) OutInt : Integer;
    BEGIN
      IF NOT EVALUATE(OutInt,COPYSTR(InText,StartPos,Length)) THEN
        EXIT(0);
    END;

    PROCEDURE Txt2Dec@1070003(InText@1070002 : Text[250];StartPos@1070001 : Integer;Length@1070000 : Integer) OutDec : Decimal;
    BEGIN
      IF NOT EVALUATE(OutDec,COPYSTR(InText,StartPos,Length)) THEN
        ERROR(BA005,COPYSTR(InText,StartPos,Length));
      OutDec := OutDec/100;
    END;

    PROCEDURE Txt2DecSign@1070009(InText@1070000 : Text[250];StartPos@1070005 : Integer;Length@1070004 : Integer) OutDec : Decimal;
    VAR
      DecText@1070003 : Text[30];
      Negative@1070006 : Boolean;
      ConvStr@1070007 : Text[30];
    BEGIN
      InText := COPYSTR(InText,StartPos,Length);

      Negative := (COPYSTR(InText,STRLEN(InText),1) IN ['J','K','L','M','N','O','P','Q','R']) OR
                  (COPYSTR(InText,STRLEN(InText),1) = GetChar(229));

      ConvStr := 'ABCDEFGHI'+GetChar(228)+'JKLMNOPQR'+GetChar(229);
      IF NOT (COPYSTR(InText,STRLEN(InText), 1) IN ['0'..'9']) THEN
        DecText := COPYSTR(InText,1,STRLEN(InText) - 1) +
             CONVERTSTR(COPYSTR(InText,STRLEN(InText),1),ConvStr,'12345678901234567890')
      ELSE
        DecText := InText;

      IF NOT EVALUATE(OutDec,DecText) THEN
        ERROR(BA005,DecText);
      IF Negative THEN
        OutDec := -(OutDec/100)
      ELSE
        OutDec := OutDec/100;
    END;

    PROCEDURE GetChar@1070002(InInteger@1070001 : Integer) OutChar : Text[1];
    VAR
      Chr@1070002 : Char;
    BEGIN
      Chr := InInteger;
      OutChar := FORMAT(Chr);
    END;

    PROCEDURE UploadFile@1070000(VAR PFileName@1070001 : Text[1024]);
    VAR
      RBMgt@1070002 : Codeunit 419;
      NewFileName@1070000 : Text[1024];
    BEGIN
      IF NOT ISSERVICETIER THEN
        NewFileName := RBMgt.OpenFileDialog(BA09,PFileName,BA10)
      ELSE
        IF NOT(UPLOAD(BA09,'',BA10,PFileName,NewFileName)) THEN
          NewFileName := '';

      IF NewFileName <> '' THEN
        PFileName := NewFileName;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

