OBJECT Codeunit 400 SMTP Mail
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.04,4PS14.00;
  }
  PROPERTIES
  {
    Permissions=TableData 409=r;
    OnRun=BEGIN
            Send; //**4PS.n
          END;

  }
  CODE
  {
    VAR
      SMTPMailSetup@1003 : Record 409;
      Mail@1000 : DotNet "'Microsoft.Dynamics.Nav.SMTP, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.SMTP.SmtpMessage";
      Text002@1002 : TextConst '@@@="%1=file name";ENU=Attachment %1 does not exist or can not be accessed from the program.;NOR=Vedlegg %1 finnes ikke eller kan ikke †pnes fra programmet.;SVE=Bilagan %1 finns inte eller s† g†r det inte att komma †t den fr†n programmet.';
      SendResult@1004 : Text;
      Text003@1005 : TextConst '@@@="%1=an error message";ENU=The mail system returned the following error: "%1".;NOR=Postsystemet returnerte f›lgende feil: %1.;SVE=F”ljande fel returnerades fr†n mailsystemet: "%1".';
      SendErr@1001 : TextConst 'ENU=The email couldn''t be sent.;NOR=Kan ikke sende e-posten.';
      RecipientErr@1006 : TextConst '@@@="%1 = email address";ENU=Could not add recipient %1.;NOR=Kan ikke legge til mottakeren %1.';
      BodyErr@1007 : TextConst 'ENU=Could not add text to email body.;NOR=Kan ikke legge til tekst i br›dtekst i e-posten.';
      AttachErr@1008 : TextConst 'ENU=Could not add an attachment to the email.;NOR=Kan ikke legge til et vedlegg i e-posten.';
      FileMgt@1100525002 : Codeunit 419;
      Text11012001@1100525001 : TextConst 'ENU=Please specify a sender address.;NOR=Spesifiser en avsenderadresse.;SVE=Ange en avs„ndaradress.';
      FileNameArrayList@1100525004 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.ArrayList";
      AttachmentsUploaded@1100525003 : Boolean;

    [External]
    PROCEDURE CreateMessage@1(SenderName@1008 : Text;SenderAddress@1000 : Text;Recipients@1001 : Text;Subject@1004 : Text;Body@1005 : Text;HtmlFormatted@1006 : Boolean);
    VAR
      Mail2@1100528400 : Codeunit 397;
    BEGIN
      OnBeforeCreateMessage(SenderName,SenderAddress,Recipients,Subject,Body,HtmlFormatted);

      IF Recipients <> '' THEN
        CheckValidEmailAddresses(Recipients);
      IF SenderAddress = '' THEN  //**4PS01.n
        ERROR(Text11012001);            //**4PS01.n
      CheckValidEmailAddresses(SenderAddress);
      SMTPMailSetup.GetSetup;
      SMTPMailSetup.TESTFIELD("SMTP Server");
      IF NOT ISNULL(Mail) THEN BEGIN
        Mail.Dispose;
        CLEAR(Mail);
      END;
      SendResult := '';
      Mail := Mail.SmtpMessage;
      Mail.FromName := SenderName;
      Mail.FromAddress := SenderAddress;
      Mail."To" := Recipients;
      Mail.Subject := Subject;
      //Mail.Body := Body; //**4PS.o
      //**4PS.sn
      IF HtmlFormatted THEN
        Mail.Body := Mail2.FormatTextForHtml(Body)
      ELSE
        Mail.Body := Body;
      //**4PS.en
      Mail.HtmlFormatted := HtmlFormatted;

      IF HtmlFormatted THEN
        Mail.ConvertBase64ImagesToContentId;
    END;

    [External]
    PROCEDURE TrySend@10() : Boolean;
    VAR
      Password@1000 : Text;
    BEGIN
      OnBeforeTrySend(SMTPMailSetup);
      SendResult := '';
      Password := SMTPMailSetup.GetPassword;
      WITH SMTPMailSetup DO
        SendResult :=
          Mail.Send(
            "SMTP Server",
            "SMTP Server Port",
            Authentication <> Authentication::Anonymous,
            "User ID",
            Password,
            "Secure Connection");
      Mail.Dispose;
      CLEAR(Mail);
      OnAfterTrySend(SendResult);

      //**4PS.sn
      IF AttachmentsUploaded THEN
        DeleteUploadedAttachments;
      //**4PS.en

      EXIT(SendResult = '');
    END;

    [External]
    PROCEDURE Send@3();
    BEGIN
      IF NOT TrySend THEN
        ShowErrorNotification(SendErr,SendResult);
    END;

    [External]
    PROCEDURE AddRecipients@4(Recipients@1000 : Text);
    VAR
      Result@1001 : Text;
    BEGIN
      OnBeforeAddRecipients(Recipients);

      CheckValidEmailAddresses(Recipients);
      Result := Mail.AddRecipients(Recipients);
      IF Result <> '' THEN
        ShowErrorNotification(STRSUBSTNO(RecipientErr,Recipients),Result);
    END;

    [External]
    PROCEDURE AddCC@5(Recipients@1000 : Text);
    VAR
      Result@1001 : Text;
    BEGIN
      OnBeforeAddCC(Recipients);

      CheckValidEmailAddresses(Recipients);
      Result := Mail.AddCC(Recipients);
      IF Result <> '' THEN
        ShowErrorNotification(STRSUBSTNO(RecipientErr,Recipients),Result);
    END;

    [External]
    PROCEDURE AddBCC@6(Recipients@1000 : Text);
    VAR
      Result@1001 : Text;
    BEGIN
      OnBeforeAddBCC(Recipients);

      CheckValidEmailAddresses(Recipients);
      Result := Mail.AddBCC(Recipients);
      IF Result <> '' THEN
        ShowErrorNotification(STRSUBSTNO(RecipientErr,Recipients),Result);
    END;

    [External]
    PROCEDURE AppendBody@7(BodyPart@1000 : Text);
    VAR
      Result@1001 : Text;
    BEGIN
      Result := Mail.AppendBody(BodyPart);
      IF Result <> '' THEN
        ShowErrorNotification(BodyErr,Result);
    END;

    [Internal]
    PROCEDURE AddAttachment@2(Attachment@1000 : Text;FileName@1002 : Text);
    VAR
      FileManagement@1003 : Codeunit 419;
      Result@1001 : Text;
    BEGIN
      IF Attachment = '' THEN
        EXIT;
      IF NOT EXISTS(Attachment) THEN
        ERROR(Text002,Attachment);

      FileName := FileManagement.StripNotsupportChrInFileName(FileName);
      FileName := DELCHR(FileName,'=',';'); // Used for splitting multiple file names in Mail .NET component

      FileManagement.IsAllowedPath(Attachment,FALSE);
      Result := Mail.AddAttachmentWithName(Attachment,FileName);

      IF Result <> '' THEN
        ShowErrorNotification(AttachErr,Result);
    END;

    [External]
    PROCEDURE AddAttachmentStream@15(AttachmentStream@1000 : InStream;AttachmentName@1001 : Text);
    VAR
      FileManagement@1002 : Codeunit 419;
    BEGIN
      AttachmentName := FileManagement.StripNotsupportChrInFileName(AttachmentName);

      Mail.AddAttachment(AttachmentStream,AttachmentName);
    END;

    [External]
    PROCEDURE CheckValidEmailAddresses@8(Recipients@1000 : Text);
    VAR
      MailManagement@1002 : Codeunit 9520;
    BEGIN
      MailManagement.CheckValidEmailAddresses(Recipients);
    END;

    [External]
    PROCEDURE GetLastSendMailErrorText@9() : Text;
    BEGIN
      EXIT(SendResult);
    END;

    PROCEDURE GetSMTPMessage@35(VAR SMTPMessage@1000 : DotNet "'Microsoft.Dynamics.Nav.SMTP, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.SMTP.SmtpMessage");
    BEGIN
      SMTPMessage := Mail;
    END;

    [External]
    PROCEDURE IsEnabled@11() : Boolean;
    BEGIN
      SMTPMailSetup.GetSetup;
      EXIT(NOT (SMTPMailSetup."SMTP Server" = ''));
    END;

    [EventSubscriber(Table,1400,OnRegisterServiceConnection)]
    [External]
    PROCEDURE HandleSMTPRegisterServiceConnection@14(VAR ServiceConnection@1000 : Record 1400);
    VAR
      RecRef@1002 : RecordRef;
    BEGIN
      SMTPMailSetup.GetSetup;
      RecRef.GETTABLE(SMTPMailSetup);

      ServiceConnection.Status := ServiceConnection.Status::Enabled;
      IF SMTPMailSetup."SMTP Server" = '' THEN
        ServiceConnection.Status := ServiceConnection.Status::Disabled;

      WITH SMTPMailSetup DO
        ServiceConnection.InsertServiceConnection(
          ServiceConnection,RecRef.RECORDID,TABLECAPTION,'',PAGE::"SMTP Mail Setup");
    END;

    [External]
    PROCEDURE GetBody@13() : Text;
    BEGIN
      EXIT(Mail.Body);
    END;

    [Integration(TRUE)]
    LOCAL PROCEDURE OnBeforeTrySend@32(VAR SMTPMailSetup@1000 : Record 409);
    BEGIN
    END;

    LOCAL PROCEDURE ShowErrorNotification@20(ErrorMessage@1000 : Text;SmtpResult@1002 : Text);
    VAR
      NotificationLifecycleMgt@1009 : Codeunit 1511;
      Notification@1001 : Notification;
    BEGIN
      IF GUIALLOWED THEN BEGIN
        Notification.MESSAGE := ErrorMessage;
        Notification.SCOPE := NOTIFICATIONSCOPE::LocalScope;
        Notification.ADDACTION('Details',CODEUNIT::"SMTP Mail",'ShowNotificationDetail');
        Notification.SETDATA('Details',STRSUBSTNO(Text003,SmtpResult));
        NotificationLifecycleMgt.SendNotification(Notification,SMTPMailSetup.RECORDID);
        ERROR('');
      END;
      ERROR(Text003,SmtpResult);
    END;

    [External]
    PROCEDURE ShowNotificationDetail@22(Notification@1000 : Notification);
    BEGIN
      MESSAGE(Notification.GETDATA('Details'));
    END;

    [External]
    PROCEDURE GetO365SmtpServer@17() : Text[250];
    BEGIN
      EXIT('smtp.office365.com')
    END;

    [External]
    PROCEDURE GetOutlookSmtpServer@21() : Text[250];
    BEGIN
      EXIT('smtp-mail.outlook.com')
    END;

    [External]
    PROCEDURE GetGmailSmtpServer@23() : Text[250];
    BEGIN
      EXIT('smtp.gmail.com')
    END;

    [External]
    PROCEDURE GetYahooSmtpServer@24() : Text[250];
    BEGIN
      EXIT('smtp.mail.yahoo.com')
    END;

    [External]
    PROCEDURE GetDefaultSmtpPort@18() : Integer;
    BEGIN
      EXIT(587);
    END;

    [External]
    PROCEDURE GetYahooSmtpPort@36() : Integer;
    BEGIN
      EXIT(465);
    END;

    [External]
    PROCEDURE GetDefaultSmtpAuthType@19() : Integer;
    VAR
      SMTPMailSetup@1000 : Record 409;
    BEGIN
      EXIT(SMTPMailSetup.Authentication::Basic);
    END;

    LOCAL PROCEDURE ApplyDefaultSmtpConnectionSettings@25(VAR SMTPMailSetupConfig@1000 : Record 409);
    BEGIN
      SMTPMailSetupConfig.Authentication := GetDefaultSmtpAuthType;
      SMTPMailSetupConfig."Secure Connection" := TRUE;
    END;

    [External]
    PROCEDURE ApplyOffice365Smtp@12(VAR SMTPMailSetupConfig@1000 : Record 409);
    BEGIN
      // This might be changed by the Microsoft Office 365 team.
      // Current source: http://technet.microsoft.com/library/dn554323.aspx
      SMTPMailSetupConfig."SMTP Server" := GetO365SmtpServer;
      SMTPMailSetupConfig."SMTP Server Port" := GetDefaultSmtpPort;
      ApplyDefaultSmtpConnectionSettings(SMTPMailSetupConfig);
    END;

    [External]
    PROCEDURE ApplyOutlookSmtp@34(VAR SMTPMailSetupConfig@1000 : Record 409);
    BEGIN
      // This might be changed.
      SMTPMailSetupConfig."SMTP Server" := GetOutlookSmtpServer;
      SMTPMailSetupConfig."SMTP Server Port" := GetDefaultSmtpPort;
      ApplyDefaultSmtpConnectionSettings(SMTPMailSetupConfig);
    END;

    [External]
    PROCEDURE ApplyGmailSmtp@33(VAR SMTPMailSetupConfig@1000 : Record 409);
    BEGIN
      // This might be changed.
      SMTPMailSetupConfig."SMTP Server" := GetGmailSmtpServer;
      SMTPMailSetupConfig."SMTP Server Port" := GetDefaultSmtpPort;
      ApplyDefaultSmtpConnectionSettings(SMTPMailSetupConfig);
    END;

    [External]
    PROCEDURE ApplyYahooSmtp@31(VAR SMTPMailSetupConfig@1000 : Record 409);
    BEGIN
      // This might be changed.
      SMTPMailSetupConfig."SMTP Server" := GetYahooSmtpServer;
      SMTPMailSetupConfig."SMTP Server Port" := GetYahooSmtpPort;
      ApplyDefaultSmtpConnectionSettings(SMTPMailSetupConfig);
    END;

    [External]
    PROCEDURE IsOffice365Setup@16(VAR SMTPMailSetupConfig@1000 : Record 409) : Boolean;
    BEGIN
      IF SMTPMailSetupConfig."SMTP Server" <> GetO365SmtpServer THEN
        EXIT(FALSE);

      IF SMTPMailSetupConfig."SMTP Server Port" <> GetDefaultSmtpPort THEN
        EXIT(FALSE);

      EXIT(IsSmtpConnectionSetup(SMTPMailSetupConfig));
    END;

    [External]
    PROCEDURE IsOutlookSetup@38(VAR SMTPMailSetupConfig@1000 : Record 409) : Boolean;
    BEGIN
      IF SMTPMailSetupConfig."SMTP Server" <> GetOutlookSmtpServer THEN
        EXIT(FALSE);

      IF SMTPMailSetupConfig."SMTP Server Port" <> GetDefaultSmtpPort THEN
        EXIT(FALSE);

      EXIT(IsSmtpConnectionSetup(SMTPMailSetupConfig));
    END;

    [External]
    PROCEDURE IsGmailSetup@39(VAR SMTPMailSetupConfig@1000 : Record 409) : Boolean;
    BEGIN
      IF SMTPMailSetupConfig."SMTP Server" <> GetGmailSmtpServer THEN
        EXIT(FALSE);

      IF SMTPMailSetupConfig."SMTP Server Port" <> GetDefaultSmtpPort THEN
        EXIT(FALSE);

      EXIT(IsSmtpConnectionSetup(SMTPMailSetupConfig));
    END;

    [External]
    PROCEDURE IsYahooSetup@40(VAR SMTPMailSetupConfig@1000 : Record 409) : Boolean;
    BEGIN
      IF SMTPMailSetupConfig."SMTP Server" <> GetYahooSmtpServer THEN
        EXIT(FALSE);

      IF SMTPMailSetupConfig."SMTP Server Port" <> GetYahooSmtpPort THEN
        EXIT(FALSE);

      EXIT(IsSmtpConnectionSetup(SMTPMailSetupConfig));
    END;

    LOCAL PROCEDURE IsSmtpConnectionSetup@26(VAR SMTPMailSetupConfig@1000 : Record 409) : Boolean;
    BEGIN
      IF SMTPMailSetupConfig.Authentication <> GetDefaultSmtpAuthType THEN
        EXIT(FALSE);

      IF SMTPMailSetupConfig."Secure Connection" <> TRUE THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterTrySend@28(VAR SendResult@1001 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCreateMessage@27(VAR SenderName@1005 : Text;VAR SenderAddress@1004 : Text;VAR Recipients@1003 : Text;VAR Subject@1002 : Text;VAR Body@1001 : Text;HtmlFormatted@1000 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeAddRecipients@29(VAR Recipients@1000 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeAddCC@30(VAR Recipients@1000 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeAddBCC@37(VAR Recipients@1000 : Text);
    BEGIN
    END;

    PROCEDURE AddAttachmentFromClient@1100525500(Attachment@1000 : Text;FileName@1100528400 : Text);
    VAR
      FileMgt@1100525500 : Codeunit 419;
      ClientDirectory@1100525502 : Text[260];
      ShortFileName@1100525503 : Text[260];
      ServerFileName@1100525504 : Text[260];
      ServerTempFileName@1100525000 : Text[260];
    BEGIN
      //**4PS
      IF NOT FileMgt.ClientAvailable THEN BEGIN
        AddAttachment(Attachment, FileName);
        EXIT;
      END;

      IF Attachment = '' THEN
        EXIT;
      IF NOT FileMgt.ClientFileExists(Attachment) THEN
        ERROR(Text002, Attachment);

      FileMgt.SplitFileAbsPathName(Attachment, ClientDirectory, ShortFileName);
      ShortFileName := DELCHR(ShortFileName, '=', ',');
      ServerFileName := FileMgt.ServerTempFolderName + ShortFileName;
      ServerTempFileName := FileMgt.UploadFileSilent(Attachment);
      IF FILE.EXISTS(ServerFileName) THEN
        FILE.ERASE(ServerFileName);
      FILE.RENAME(ServerTempFileName, ServerFileName);
      AddAttachment(ServerFileName, FileName);

      IF NOT AttachmentsUploaded THEN BEGIN
        AttachmentsUploaded := TRUE;
        CLEAR(FileNameArrayList);
        FileNameArrayList := FileNameArrayList.ArrayList;
      END;
      FileNameArrayList.Add(ServerFileName);
    END;

    LOCAL PROCEDURE DeleteUploadedAttachments@1100525001();
    VAR
      FileNameArray@1100525000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      I@1100525001 : Integer;
    BEGIN
      FileNameArray := FileNameArrayList.ToArray;
      FOR I := 1 TO FileNameArray.Length DO BEGIN
        FILE.ERASE(FileNameArray.GetValue(I-1));
        AttachmentsUploaded := FALSE;
      END;
    END;

    BEGIN
    {
      This Codeunit is (together with T409 and F409) copied from Navision 5. This adds the possibility to send mail through SMTP.
      To actually use this CU, it is necessary that objects Microsoft.Navision.Mail.dll and ...tlb are installed and registered.
      Please check the manual for the correct installation

      Changes in the CU:
      25-nov-2008 WWB - In CheckValidEMailAddress only Capital letter 'A's where validated, changed it in A..Z
      28-nov-2008 WWB - Function SMTPAvailable, returns a value which indicates if SMTP object is available.
      29-apr-2009 JD 4PS01 Give clear message if sender address is empty
    }
    END.
  }
}

