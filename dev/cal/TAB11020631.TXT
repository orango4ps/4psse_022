OBJECT Table 11020631 Project Forecast Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               CheckForecastFixed(TRUE);
               UpdateLog;
             END;

    OnModify=BEGIN
               CheckForecastFixed(TRUE);
               UpdateLog;
             END;

    OnDelete=VAR
               ProjectForecastInPeriod@1100525000 : Record 11020632;
             BEGIN
               CheckForecastFixed(TRUE);
               UpdateLog;

               ProjectForecastInPeriod.SETRANGE("Project No.", "Project No.");
               ProjectForecastInPeriod.SETRANGE("Forecast Date", "Forecast Date");
               ProjectForecastInPeriod.SETRANGE("Cost Type", "Cost Type");
               ProjectForecastInPeriod.SETRANGE(Element, Element);
               ProjectForecastInPeriod.SETRANGE("Cost Object", "Cost Object");
               ProjectForecastInPeriod.SETRANGE("Currency Code","Currency Code"); //**4PS.n BI042 KD 22-09-16
               ProjectForecastInPeriod.DELETEALL(TRUE);
             END;

    OnRename=BEGIN
               ERROR(Text002);
             END;

    CaptionML=[ENU=Project Forecast Line;
               NOR=Rad for prosjektprognose;
               SVE=Projektprognosrad];
  }
  FIELDS
  {
    { 10  ;   ;Project No.         ;Code20        ;TableRelation=Job.No.;
                                                   CaptionML=[ENU=Project No.;
                                                              NOR=Prosjektnr;
                                                              SVE=Projektnr];
                                                   NotBlank=Yes }
    { 20  ;   ;Forecast Date       ;Date          ;CaptionML=[ENU=Forecast Date;
                                                              NOR=Prognosedato;
                                                              SVE=Prognosdatum] }
    { 30  ;   ;Cost Type           ;Option        ;CaptionML=[ENU=Cost Type;
                                                              NOR=Kosttype;
                                                              SVE=Kostnadstyp];
                                                   OptionCaptionML=[ENU=Labor,Material,Subcontracting,Plant,Sundry,Revenue;
                                                                    NOR=Arbeidskraft,Materiale,Underentrepenõr,Maskin,Diverse,Inntekt;
                                                                    SVE=Arbetskraft,Material,Underentreprenad,Maskin,Diverse,IntÑkt];
                                                   OptionString=Labor,Material,Subcontracting,Plant,Sundry,Revenue;
                                                   Editable=No }
    { 40  ;   ;Cost Object         ;Code20        ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2),
                                                                                               Project Filter=FIELD(Project No.),
                                                                                               Cost Type=FIELD(Cost Type));
                                                   OnValidate=VAR
                                                                DimVal@1100525001 : Record 349;
                                                                DimMgt@1100525000 : Codeunit 408;
                                                              BEGIN
                                                                IF ("Cost Object" <> '') AND ("Cost Object" <> xRec."Cost Object") THEN BEGIN
                                                                  DimMgt.GetDimValueRec(2, "Cost Object", DimVal, TRUE, '');
                                                                  "Cost Type" := DimVal."Cost Type";
                                                                  IF "Cost Type" = "Cost Type"::Labor THEN
                                                                    //**4PS.sn BI042 KD 23-11-16
                                                                    IF DimVal."Rate Code" = '' THEN
                                                                      GetRateFromBudget
                                                                    ELSE
                                                                    //**4PS.en BI042 KD 23-11-16
                                                                      VALIDATE("Rate Code", DimVal."Rate Code");
                                                                END;

                                                                IF CurrFieldNo > 0 THEN
                                                                  GetCostObjectDescription;
                                                              END;

                                                   CaptionML=[ENU=Global Dimension 2 Code;
                                                              NOR=Kostnadsobjekt;
                                                              SVE=Kostnadsobjekt];
                                                   CaptionClass='1,1,2' }
    { 50  ;   ;Cost Object Description;Text50     ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Dimension Value".Name WHERE (Code=FIELD(Cost Object),
                                                                                                    Global Dimension No.=CONST(2)));
                                                   CaptionML=[ENU=Cost Object Description;
                                                              NOR=Kostnadsobjekt, Beskrivelse;
                                                              SVE=Kostnadsobjekt, beskrivning];
                                                   Editable=No;
                                                   CaptionClass='1,11012000,2, , ' + Text000 }
    { 60  ;   ;Project Cost Object Name;Text50    ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project - Cost Object".Name WHERE (Project No.=FIELD(Project No.),
                                                                                                          Cost Object=FIELD(Cost Object)));
                                                   CaptionML=[ENU=Project Cost Object Name;
                                                              NOR=Navn pÜ kostnadsobjekt for prosjekt;
                                                              SVE=Projektkostnadsobjektnamn];
                                                   Editable=No }
    { 80  ;   ;Element             ;Code20        ;TableRelation="Project Element".Element WHERE (Project No.=FIELD(Project No.));
                                                   OnValidate=VAR
                                                                ProjElem@1100525001 : Record 11012010;
                                                                ElementFormat@1100525000 : Codeunit 11012022;
                                                              BEGIN
                                                                ElementFormat.FormatElem(Element,2,'');
                                                                IF Element <> '' THEN
                                                                  ProjElem.GET("Project No.",Element);

                                                                IF CurrFieldNo > 0 THEN
                                                                  CALCFIELDS("Element Description");
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Element;
                                                              NOR=Element;
                                                              SVE=Element] }
    { 85  ;   ;Element Description ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project Element".Description WHERE (Project No.=FIELD(Project No.),
                                                                                                           Element=FIELD(Element)));
                                                   CaptionML=[ENU=Element Description;
                                                              NOR=Elementbeskrivelse;
                                                              SVE=Elementbeskrivning];
                                                   Editable=No }
    { 100 ;   ;Period Type Filter  ;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Period Type;
                                                              NOR=Periodetype;
                                                              SVE=Periodtyp];
                                                   OptionCaptionML=[ENU=Day,Week,Month,Quarter,Year,Accounting Period;
                                                                    NOR=Dag,Uke,MÜned,Kvartal,èr,bokfõringsperiode;
                                                                    SVE=Dag,Vecka,MÜnad,Kvartal,èr,Bokfîringsperiod];
                                                   OptionString=Day,Week,Month,Quarter,Year,Accounting Period }
    { 200 ;   ;Budget              ;Decimal       ;CaptionML=[ENU=Budget;
                                                              NOR=Budsjett;
                                                              SVE=Budget];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 210 ;   ;Budget Hours        ;Decimal       ;CaptionML=[ENU=Budget Hours;
                                                              NOR=Budsjett (Timer);
                                                              SVE=Budget (timmar)];
                                                   Editable=No }
    { 220 ;   ;Actual Costs        ;Decimal       ;CaptionML=[ENU=Actual Costs;
                                                              NOR=Faktiske koster;
                                                              SVE=Verkliga kostnader];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 230 ;   ;Actual Hours        ;Decimal       ;CaptionML=[ENU=Actual Hours;
                                                              NOR=Reelle timer;
                                                              SVE=Verkliga timmar];
                                                   Editable=No }
    { 240 ;   ;Open (Purchase)     ;Decimal       ;CaptionML=[ENU=Open (Purchase);
                                                              NOR=èpne innkjõp;
                                                              SVE=ôppna inkîp];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 250 ;   ;Received/Not Invoiced;Decimal      ;CaptionML=[ENU=Received/Not Invoiced;
                                                              NOR=Mottatt/ikke fakturert;
                                                              SVE=Mottaget/inte fakturerat];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 260 ;   ;Open Ovh. Surch. (Purchase);Decimal;CaptionML=[ENU=Open Ovh. Surch. (Purchase);
                                                              NOR=èpne Overheadkost (innkjõp);
                                                              SVE=ôppen overheadkostnad (inkîp)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 262 ;   ;Open (Inventory)    ;Decimal       ;CaptionML=[ENU=Open (Inventory);
                                                              NOR=èpne (lager);
                                                              SVE=ôppna (lager)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 263 ;   ;Open Ovh. Surch. (Inventory);Decimal;
                                                   CaptionML=[ENU=Open Ovh. Surch. (Inventory);
                                                              NOR=èpen overheadkost (lager);
                                                              SVE=ôppen overheadkostnad (lager)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 270 ;   ;Total Open Purchase ;Decimal       ;OnValidate=BEGIN
                                                                CalcOpenPurchPlusForecast;
                                                              END;

                                                   CaptionML=[ENU=Total Open Purchase;
                                                              NOR=Total for Üpne innkjõp;
                                                              SVE=Summa fîr îppna inkîp];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 275 ;   ;Open Hours          ;Decimal       ;CaptionML=[ENU=Open Hours;
                                                              NOR=èpne timer;
                                                              SVE=ôppna timmar];
                                                   Editable=No }
    { 280 ;   ;Total Cost          ;Decimal       ;OnValidate=BEGIN
                                                                CalcForecastTotalCost;
                                                              END;

                                                   CaptionML=[ENU=Total Cost;
                                                              NOR=Total kost;
                                                              SVE=Total kostnad];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 290 ;   ;Total Hours         ;Decimal       ;CaptionML=[ENU=Total Hours;
                                                              NOR=Timer totalt;
                                                              SVE=Timmar totalt];
                                                   Editable=No }
    { 300 ;   ;Allowed             ;Decimal       ;CaptionML=[ENU=Allowed;
                                                              NOR=Tillatt;
                                                              SVE=TillÜten];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 310 ;   ;Allowed Hours       ;Decimal       ;CaptionML=[ENU=Allowed Hours;
                                                              NOR=Tillatte timer;
                                                              SVE=TillÜtna timmar];
                                                   Editable=No }
    { 320 ;   ;Prognosis           ;Decimal       ;CaptionML=[ENU=Prognosis;
                                                              NOR=Prognose;
                                                              SVE=Prognos];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 330 ;   ;Prognosis Hours     ;Decimal       ;CaptionML=[ENU=Prognosis Hours;
                                                              NOR="Timer ";
                                                              SVE=Prognostimmar];
                                                   Editable=No }
    { 340 ;   ;Invoiced            ;Decimal       ;CaptionML=[ENU=Invoiced;
                                                              NOR=Fakturert;
                                                              SVE=Fakturerat];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1000;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                CalcAmount;
                                                                CheckSurchargesCalculated;
                                                              END;

                                                   CaptionML=[ENU=Quantity;
                                                              NOR=Antall;
                                                              SVE=Antal];
                                                   DecimalPlaces=0:5 }
    { 1005;   ;Amount incl. Surcharge;Decimal     ;OnValidate=BEGIN
                                                                Amount := "Amount incl. Surcharge" - "Overhead Surcharge Forecast";

                                                                CalcForecastTotalCost;
                                                                CalcOpenPurchPlusForecast;
                                                              END;

                                                   CaptionML=[ENU=Amount incl. Surcharge;
                                                              NOR=Belõp inkl. tilleggsgebyr;
                                                              SVE=Belopp inkl. tillÑggsavgift];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1010;   ;Amount              ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Amount incl. Surcharge", Amount + "Overhead Surcharge Forecast");
                                                                CheckSurchargesCalculated;
                                                                CalculatePriceRateOrQuantity; //DP01426.n
                                                              END;

                                                   CaptionML=ENU=Cost to complete;
                                                   AutoFormatType=1 }
    { 1015;   ;Overhead Surcharge Forecast;Decimal;CaptionML=[ENU=Overhead Surcharge Forecast;
                                                              NOR=Overheadkostprognose;
                                                              SVE=Overheadkostnadsprognos];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1020;   ;Best Case           ;Decimal       ;OnValidate=BEGIN
                                                                //*30275.o   Property: MaxValue = 0
                                                                //*30275.sn
                                                                IF "Cost Type" <> "Cost Type"::Revenue THEN BEGIN
                                                                  IF "Best Case" > 0 THEN
                                                                    FIELDERROR("Best Case", Text004);
                                                                END ELSE BEGIN
                                                                  IF "Best Case" < 0 THEN
                                                                    FIELDERROR("Best Case", Text005);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Best Case;
                                                              NOR=I beste fall;
                                                              SVE=BÑsta fall];
                                                   AutoFormatType=1 }
    { 1030;   ;Worst Case          ;Decimal       ;OnValidate=BEGIN
                                                                //*30275.o   Property: MinValue = 0
                                                                //*30275.sn
                                                                IF "Cost Type" <> "Cost Type"::Revenue THEN BEGIN
                                                                  IF "Worst Case" < 0 THEN
                                                                    FIELDERROR("Worst Case", Text005);
                                                                END ELSE BEGIN
                                                                  IF "Worst Case" > 0 THEN
                                                                    FIELDERROR("Worst Case", Text004);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Worst Case;
                                                              NOR=I verste fall;
                                                              SVE=SÑmsta fall];
                                                   AutoFormatType=1 }
    { 1040;   ;Rate Code           ;Code10        ;TableRelation="Budget Rate".Code WHERE (Project Filter=FIELD(Project No.));
                                                   OnValidate=BEGIN
                                                                ValidateRateCode("Rate Code", FALSE);
                                                              END;

                                                   CaptionML=[ENU=Rate Code;
                                                              NOR=Avgiftskode;
                                                              SVE=Avgiftskod] }
    { 1050;   ;Rate                ;Decimal       ;OnValidate=BEGIN
                                                                ValidateRate(Rate, FALSE);
                                                              END;

                                                   CaptionML=[ENU=Rate;
                                                              NOR=Avgift;
                                                              SVE=Avgift];
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 1060;   ;Price               ;Decimal       ;OnValidate=BEGIN
                                                                CalcAmount;
                                                                UpdateRateInForecastPeriod(FIELDNO(Price));
                                                                CheckSurchargesCalculated;
                                                              END;

                                                   CaptionML=[ENU=Price;
                                                              NOR=Pris;
                                                              SVE=Pris];
                                                   Description=DP01426;
                                                   AutoFormatType=2 }
    { 2000;   ;Forecast Total Cost ;Decimal       ;CaptionML=[ENU=Forecast Total Cost;
                                                              NOR=Prognose for totalkost;
                                                              SVE=Prognos fîr totalkostnad];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 2010;   ;Total Open Purch.plus Forecast;Decimal;
                                                   CaptionML=[ENU=Total Open Purchase Plus Forecast;
                                                              NOR=Total for Üpne innkjõp pluss prognose;
                                                              SVE=Summa fîr îppna inkîp plus prognos];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 2020;   ;Total Distributed Forecast Amt;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Project Forecast in Period".Amount WHERE (Project No.=FIELD(Project No.),
                                                                                                              Forecast Date=FIELD(Forecast Date),
                                                                                                              Cost Type=FIELD(Cost Type),
                                                                                                              Cost Object=FIELD(Cost Object),
                                                                                                              Element=FIELD(Element),
                                                                                                              Currency Code=FIELD(Currency Code)));
                                                   CaptionML=[ENU=Total Distributed Forecast Amount;
                                                              NOR=Total for distribuert prognosebelõp;
                                                              SVE=Summa fîr distribuerat prognosbelopp];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 2030;   ;S-Curve             ;Code10        ;TableRelation="Forecast S-Curve Header".Code;
                                                   CaptionML=ENU=S-Curve }
    { 2040;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=[ENU=Currency Code;
                                                              NOR=Valutakode;
                                                              SVE=Valutakod];
                                                   Description=BI042 }
    { 2050;   ;Comment             ;Text50        ;CaptionML=[ENU=Comment;
                                                              NOR=Kommentar;
                                                              SVE=Kommentar];
                                                   Description=BI042 }
    { 2060;   ;Forecast by Currency;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project Forecast Header"."Forecast by Currency" WHERE (Project No.=FIELD(Project No.),
                                                                                                                              Forecast Date=FIELD(Forecast Date)));
                                                   CaptionML=ENU=Forecast by Currency;
                                                   Description=BI042;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Project No.,Forecast Date,Cost Type,Element,Cost Object,Currency Code;
                                                   SumIndexFields=Budget,Budget Hours,Actual Costs,Actual Hours,Open (Purchase),Received/Not Invoiced,Open Ovh. Surch. (Purchase),Total Open Purchase,Total Cost,Total Hours;
                                                   MaintainSIFTIndex=No;
                                                   Clustered=Yes }
    {    ;Project No.,Cost Type,Forecast Date     ;SumIndexFields=Allowed,Allowed Hours,Prognosis,Prognosis Hours,Quantity,Amount incl. Surcharge,Amount,Overhead Surcharge Forecast,Best Case,Worst Case,Forecast Total Cost,Total Open Purch.plus Forecast }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1100525000 : TextConst 'ENU=Forecast is frozen, Changes not allowed.;NOR=Prognosen er fryst, endringer er ikke tillatte.;SVE=Prognosen Ñr fryst, Ñndringar Ñr inte tillÜtna.';
      ProjectSetup@1100529601 : Record 315;
      Project@1100529600 : Record 11072003;
      SkipFixedCheck@1100525001 : Boolean;
      Text002@1100525002 : TextConst 'ENU=Renaming is not allowed.;NOR=Ikke tillatt Ü gi nytt navn.;SVE=Att ge nytt namn Ñr inte tillÜtet.';
      Text003@1100525003 : TextConst 'ENU=Date must be after %1;NOR=Datoen mÜ vëre etter %1;SVE=Datumet mÜste vara efter %1';
      Text004@1210190000 : TextConst 'ENU=must be negative (or zero);NOR=mÜ vëre negativt (eller null);SVE=mÜste vara negativt (eller noll)';
      Text005@1210190001 : TextConst 'ENU=must be positive (or zero);NOR=mÜ vëre positivt (eller null);SVE=mÜste vara positivt (eller noll)';
      Text006@1100527300 : TextConst 'ENU=Update rate on all detail lines?';
      UpdateRateInForecast@1100528100 : Boolean;
      UpdateRateInForecastActivated@1100528101 : Boolean;
      UseDialogOnce@1100528102 : Boolean;
      Text000@1100527350 : TextConst 'ENU=Description;SVE=Beskrivning';
      HasGotProjectSetup@1100529602 : Boolean;
      ForceCalcQty@1100529603 : Boolean;

    PROCEDURE CalcAmount@1100525001();
    BEGIN
      IF "Cost Type" = "Cost Type"::Labor THEN BEGIN
        IF (Quantity * Rate = 0) AND
           ((Quantity <> 0) OR (Rate <> 0)) AND
           (xRec.Quantity * xRec.Rate = 0)
        THEN
          IF CalculatePriceRateOrQuantity THEN
            EXIT;

        VALIDATE(Amount, Quantity * Rate);
        Price := 0;
      //DP01426.sn
      END ELSE BEGIN
        Rate := 0;

        IF (Quantity * Price = 0) AND
           ((Quantity <> 0) OR (Price <> 0)) AND
           (xRec.Quantity * xRec.Price = 0)
        THEN
          IF CalculatePriceRateOrQuantity THEN
            EXIT;

        VALIDATE(Amount, Quantity * Price);
      END;
      //DP01426.en
    END;

    LOCAL PROCEDURE CalculatePriceRateOrQuantity@1100529606() : Boolean;
    BEGIN
      //DP01426.sn
      GetProjectSetup;
      IF "Cost Type" = "Cost Type"::Labor THEN
        IF NOT ProjectSetup."Forecast Labour in Amounts" THEN
          EXIT(FALSE);

      CASE CurrFieldNo OF
        FIELDNO(Quantity):
          IF Quantity <> 0 THEN BEGIN
            IF "Cost Type" = "Cost Type"::Labor THEN
              Rate := ROUND(Amount / Quantity, 0.00001)
            ELSE
              Price := ROUND(Amount / Quantity, 0.00001);
            EXIT(TRUE);
          END;
        FIELDNO(Price):
          IF Price <> 0 THEN BEGIN
            Quantity := ROUND(Amount / Price, 0.00001);
            EXIT(TRUE);
          END;
        FIELDNO(Rate), FIELDNO("Rate Code"):
          IF Rate <> 0 THEN BEGIN
            Quantity := ROUND(Amount / Rate, 0.00001);
            EXIT(TRUE);
          END;
        FIELDNO(Amount), 0:
          IF ProjectSetup."Recalc Rate or Hours Prognosis" = ProjectSetup."Recalc Rate or Hours Prognosis"::Rate THEN BEGIN
            IF Quantity <> 0 THEN BEGIN
              IF "Cost Type" = "Cost Type"::Labor THEN
                Rate := ROUND(Amount / Quantity, 0.00001)
              ELSE
                Price := ROUND(Amount / Quantity, 0.00001);
              EXIT(TRUE);
            END;
          END ELSE
            IF "Cost Type" = "Cost Type"::Labor THEN BEGIN
              IF Rate <> 0 THEN BEGIN
                Quantity := ROUND(Amount / Rate, 0.00001);
                EXIT(TRUE);
              END;
            END ELSE
              IF Price <> 0 THEN BEGIN
                Quantity := ROUND(Amount / Price, 0.00001);
                EXIT(TRUE);
              END;
      END;

      EXIT(FALSE);
      //DP01426.en
    END;

    PROCEDURE CalcForecastTotalCost@1100525000();
    BEGIN
      IF "Cost Type" < "Cost Type"::Revenue THEN
        "Forecast Total Cost" := "Total Cost" + "Amount incl. Surcharge";
    END;

    PROCEDURE CalcTotalOpenPurch@1100528500();
    BEGIN
      //C003394
      VALIDATE("Total Open Purchase",  //C003389 VALIDATE
        "Open (Purchase)" + "Received/Not Invoiced" + "Open Ovh. Surch. (Purchase)" +
        "Open (Inventory)" + "Open Ovh. Surch. (Inventory)");
    END;

    PROCEDURE CalcOpenPurchPlusForecast@1100525006();
    BEGIN
      "Total Open Purch.plus Forecast" := "Total Open Purchase" + "Amount incl. Surcharge";
    END;

    PROCEDURE CalcForecastInPeriod@1100525004(StartDate@1100525003 : Date;EndDate@1100525004 : Date) ForecastInPeriod : Decimal;
    VAR
      ProjectForecastInPeriod@1100525000 : Record 11020632;
    BEGIN
      ProjectForecastInPeriod.SETRANGE("Project No.", "Project No.");
      ProjectForecastInPeriod.SETRANGE("Forecast Date", "Forecast Date");
      ProjectForecastInPeriod.SETRANGE("Cost Type", "Cost Type");
      ProjectForecastInPeriod.SETRANGE(Element, Element);
      ProjectForecastInPeriod.SETRANGE("Cost Object", "Cost Object");
      ProjectForecastInPeriod.SETRANGE(Date, StartDate, EndDate);
      ProjectForecastInPeriod.SETRANGE("Currency Code", "Currency Code"); //**4PS.n BI042 KD 26-08-16
      IF CalceForecastBasedOnQuantity THEN BEGIN
        ProjectForecastInPeriod.CALCSUMS(Quantity);
        ForecastInPeriod := ProjectForecastInPeriod.Quantity;
      END ELSE BEGIN
        ProjectForecastInPeriod.CALCSUMS(Amount);
        ForecastInPeriod := ProjectForecastInPeriod.Amount;
      END;
    END;

    PROCEDURE OnAfterValidateForecastInPerio@1100525003(StartDate@1100525004 : Date;EndDate@1100525005 : Date;NewForecast@1100525002 : Decimal;OldForecast@1100525003 : Decimal);
    VAR
      ProjectForecastMgt@1100525000 : Codeunit 11012256;
      ForecastToApply@1100525001 : Decimal;
    BEGIN
      IF (StartDate <= "Forecast Date") AND (EndDate > "Forecast Date") THEN
        StartDate := CALCDATE('<1D>', "Forecast Date");

      IF StartDate <= "Forecast Date" THEN BEGIN
        MESSAGE(Text003, FIELDCAPTION("Forecast Date"));
        EXIT;
      END;

      ForecastToApply := NewForecast - OldForecast;
      ProjectForecastMgt.CreateForecastInPeriod(
        Rec,
        StartDate,
        ForecastToApply);
    END;

    PROCEDURE OnDrillDownForecastInPeriod@1100525002(StartDate@1100525005 : Date;EndDate@1100525004 : Date);
    VAR
      ProjectForecastInPeriod@1100525002 : Record 11020632;
      ProjectForecastInPeriodPage@1100528700 : Page 11124950;
    BEGIN
      ProjectForecastInPeriod.SETRANGE("Project No.", "Project No.");
      ProjectForecastInPeriod.SETRANGE("Forecast Date", "Forecast Date", "Forecast Date"); // set from - to otherwise NAV will crash
      ProjectForecastInPeriod.SETRANGE("Cost Type", "Cost Type");
      ProjectForecastInPeriod.SETRANGE(Element, Element);
      ProjectForecastInPeriod.SETRANGE("Cost Object", "Cost Object");
      ProjectForecastInPeriod.SETRANGE(Date, StartDate, EndDate);
      ProjectForecastInPeriod.SETRANGE("Currency Code", "Currency Code"); //**4PS.n BI042 KD 26-08-16
      ProjectForecastInPeriodPage.EDITABLE(NOT CheckForecastFixed(FALSE));
      ProjectForecastInPeriodPage.SETTABLEVIEW(ProjectForecastInPeriod);
      ProjectForecastInPeriodPage.RUNMODAL;
    END;

    PROCEDURE CommentIsPresent@1100525005(StartDate@1100525001 : Date;EndDate@1100525000 : Date) : Boolean;
    VAR
      ProjectForecastInPeriod@1100525002 : Record 11020632;
    BEGIN
      ProjectForecastInPeriod.SETRANGE("Project No.", "Project No.");
      ProjectForecastInPeriod.SETRANGE("Forecast Date", "Forecast Date");
      ProjectForecastInPeriod.SETRANGE("Cost Type", "Cost Type");
      ProjectForecastInPeriod.SETRANGE(Element, Element);
      ProjectForecastInPeriod.SETRANGE("Cost Object", "Cost Object");
      ProjectForecastInPeriod.SETRANGE(Date, StartDate, EndDate);
      ProjectForecastInPeriod.SETRANGE("Currency Code", "Currency Code"); //**4PS.n BI042 KD 26-08-16
      ProjectForecastInPeriod.SETFILTER(Comment, '<>%1', '');
      EXIT(NOT ProjectForecastInPeriod.ISEMPTY);
    END;

    PROCEDURE TotalDistributedForecast@1100525008() : Decimal;
    VAR
      ProjectForecastInPeriod@1100525000 : Record 11020632;
    BEGIN
      ProjectForecastInPeriod.SETRANGE("Project No.", "Project No.");
      ProjectForecastInPeriod.SETRANGE("Forecast Date", "Forecast Date");
      ProjectForecastInPeriod.SETRANGE("Cost Type", "Cost Type");
      ProjectForecastInPeriod.SETRANGE(Element, Element);
      ProjectForecastInPeriod.SETRANGE("Cost Object", "Cost Object");
      ProjectForecastInPeriod.SETRANGE("Currency Code", "Currency Code"); //**4PS.n BI042 KD 26-08-16
      IF CalceForecastBasedOnQuantity OR ForceCalcQty THEN BEGIN
        ProjectForecastInPeriod.CALCSUMS(Quantity);
        EXIT(ROUND(ProjectForecastInPeriod.Quantity,0.00001)); //C028238
      END ELSE BEGIN
        ProjectForecastInPeriod.CALCSUMS(Amount);
        EXIT(ProjectForecastInPeriod.Amount);
      END;
    END;

    PROCEDURE Deviation@1100525009() : Decimal;
    BEGIN
      IF CalceForecastBasedOnQuantity THEN
        EXIT(Quantity + "Open Hours" - TotalDistributedForecast) //C042532
      ELSE
        EXIT("Total Open Purch.plus Forecast" - TotalDistributedForecast);
    END;

    PROCEDURE CheckForecastFixed@1100525007(ShowErrorMessage@1100525001 : Boolean) : Boolean;
    VAR
      ProjectForecastHeader@1100525000 : Record 11020630;
    BEGIN
      IF SkipFixedCheck THEN
        EXIT(FALSE);

      IF NOT ProjectForecastHeader.GET("Project No.", "Forecast Date") THEN
        EXIT(FALSE);

      IF ProjectForecastHeader.Fixed THEN
        IF ShowErrorMessage THEN
          ERROR(Text001)
        ELSE
          EXIT(TRUE);
    END;

    PROCEDURE SetSkipFixedCheck@1100525013();
    BEGIN
      SkipFixedCheck := TRUE;
    END;

    PROCEDURE UpdateRateInForecastPeriod@1100525010(FromFieldNo@1100525000 : Integer);
    VAR
      ProjectForecastInPeriod@1100525001 : Record 11020632;
    BEGIN
      ProjectForecastInPeriod.SETRANGE("Project No.", "Project No.");
      ProjectForecastInPeriod.SETRANGE("Forecast Date", "Forecast Date");
      ProjectForecastInPeriod.SETRANGE("Cost Type", "Cost Type");
      ProjectForecastInPeriod.SETRANGE(Element, Element);
      ProjectForecastInPeriod.SETRANGE("Cost Object", "Cost Object");
      ProjectForecastInPeriod.SETRANGE("Currency Code", "Currency Code"); //**4PS.n BI042 KD 26-08-16
      IF FromFieldNo = FIELDNO(Price) THEN
        ProjectForecastInPeriod.SETFILTER(Source, '<>%1&<>%2', ProjectForecastInPeriod.Source::"Outstanding Purchase", ProjectForecastInPeriod.Source::"Received Not Invoiced");
      IF ProjectForecastInPeriod.FINDSET(TRUE) THEN
        REPEAT
          CASE FromFieldNo OF
            FIELDNO("Rate Code"):
              ProjectForecastInPeriod.VALIDATE("Rate Code", "Rate Code");
            FIELDNO(Rate):
              BEGIN
                ProjectForecastInPeriod.VALIDATE("Rate Code", "Rate Code"); //should be empty
                ProjectForecastInPeriod.VALIDATE(Rate, Rate);
              END;
            FIELDNO(Price):
              ProjectForecastInPeriod.VALIDATE(Price, Price); //DP01426.n
          END;
          ProjectForecastInPeriod.MODIFY(TRUE);
        UNTIL ProjectForecastInPeriod.NEXT = 0;
    END;

    PROCEDURE GetCostObjectDescription@1100525011();
    BEGIN
      CALCFIELDS("Cost Object Description", "Project Cost Object Name");
      IF "Project Cost Object Name" <> '' THEN
        "Cost Object Description" := "Project Cost Object Name";
    END;

    PROCEDURE UpdateLog@1100525012();
    VAR
      ProjectForecastHeader@1100525000 : Record 11020630;
    BEGIN
      ProjectForecastHeader.UpdateLog("Project No.", "Forecast Date");
    END;

    PROCEDURE CheckSurchargesCalculated@1210190000() : Boolean;
    VAR
      ProjectForecastHeader@1210190000 : Record 11020630;
    BEGIN
      ProjectForecastHeader.INIT;
      ProjectForecastHeader.SETRANGE("Project No.", "Project No.");
      ProjectForecastHeader.SETRANGE("Forecast Date", "Forecast Date");
      IF ProjectForecastHeader.FINDFIRST THEN BEGIN
        IF ProjectForecastHeader."Ovh. Surcharges Calculated" THEN
          IF NOT ProjectForecastHeader."Altered After Calculation" THEN BEGIN
            ProjectForecastHeader."Altered After Calculation" := TRUE;
            ProjectForecastHeader.MODIFY;
          END;
      END;
    END;

    PROCEDURE ActualInPeriod@1100525014(ActualType@1100525002 : Integer) : Decimal;
    VAR
      ProjectForecastHeader@1100525000 : Record 11020630;
      ProjectForecastLine@1100525001 : Record 11020631;
    BEGIN
      // Actual Type: 1=Costs, 2=Hours
      IF ("Project No." <> '') AND ("Forecast Date" <> 0D) THEN BEGIN
        ProjectForecastHeader.SETRANGE("Project No.", "Project No.");
        ProjectForecastHeader.SETRANGE("Forecast Date", 0D, "Forecast Date" - 1);
        IF ProjectForecastHeader.FINDLAST THEN BEGIN
          IF NOT ProjectForecastLine.GET(
            "Project No.", ProjectForecastHeader."Forecast Date", "Cost Type", Element, "Cost Object", "Currency Code") //**4PS.n BI042 KD 26-08-16 - "Currency Code" added to key
          THEN
            ProjectForecastLine.INIT;
        END;
        CASE ActualType OF
          1: EXIT("Actual Costs" - ProjectForecastLine."Actual Costs");
          2: EXIT("Actual Hours" - ProjectForecastLine."Actual Hours");
        END;
      END;
      EXIT(0);
    END;

    LOCAL PROCEDURE GetRateFromBudget@1100529400();
    VAR
      BudgetLine@1100529400 : Record 11012001;
    BEGIN
      //**4PS.sn BI042 KD 23-11-16
      IF "Cost Type" <> "Cost Type"::Labor THEN
        EXIT;

      IF Project."No." <> "Project No." THEN
        Project.GET("Project No.");

      BudgetLine.SETRANGE("Main Project No.", Project."Main Project");
      BudgetLine.SETRANGE("Project No.", Project."No.");
      CASE Project."Forecast Level" OF
        Project."Forecast Level"::"Element - Cost Object":
          BEGIN
            BudgetLine.SETRANGE(Element, Element);
            BudgetLine.SETRANGE("Cost Type", "Cost Type");
            BudgetLine.SETRANGE("Cost Object", "Cost Object");
          END;
        Project."Forecast Level"::"Element - Cost Type":
          BEGIN
            BudgetLine.SETRANGE(Element, Element);
            BudgetLine.SETRANGE("Cost Type", "Cost Type");
          END;
        Project."Forecast Level"::"Cost Object":
          BEGIN
            BudgetLine.SETRANGE("Cost Type", "Cost Type");
            BudgetLine.SETRANGE("Cost Object", "Cost Object");
          END;
        Project."Forecast Level"::"Cost Type":
          BEGIN
            BudgetLine.SETRANGE("Cost Type", "Cost Type");
          END;
      END;

      IF BudgetLine.ISEMPTY THEN
        EXIT;

      CALCFIELDS("Forecast by Currency");

      IF "Forecast by Currency" THEN BEGIN
        BudgetLine.SETRANGE("Currency Code", "Currency Code");
        IF BudgetLine.ISEMPTY THEN BEGIN
          IF "Currency Code" <> '' THEN
            EXIT;
          BudgetLine.SETRANGE("Currency Code");
        END;
      END;

      IF BudgetLine.COUNT = 1 THEN BEGIN
        BudgetLine.FINDFIRST;
        IF (NOT "Forecast by Currency") OR ("Currency Code" = '') THEN
          VALIDATE(Rate, BudgetLine."Rate (LCY)")
        ELSE
          VALIDATE(Rate, BudgetLine."Rate (FCY)");
        EXIT;
      END;

      IF (NOT "Forecast by Currency") OR ("Currency Code" = '') THEN
        BudgetLine.CALCSUMS("Amount (LCY)",Hours)
      ELSE
        BudgetLine.CALCSUMS("Amount (FCY)",Hours);
      IF BudgetLine.Hours = 0 THEN
        EXIT;
      IF (NOT "Forecast by Currency") OR ("Currency Code" = '') THEN
        VALIDATE(Rate, BudgetLine."Amount (LCY)" / BudgetLine.Hours)
      ELSE
        VALIDATE(Rate, BudgetLine."Amount (FCY)" / BudgetLine.Hours);
      //**4PS.en BI042 KD 23-11-16
    END;

    PROCEDURE AddTotalLineCurrency@1100529700();
    VAR
      ProjectForecastTotalLine@1100529700 : Record 11020633;
      TotalLineNo@1100529701 : Integer;
    BEGIN
      //**4PS.sn BI042 KD 28-12-16
      IF "Cost Type" = "Cost Type"::Revenue THEN
        TotalLineNo := 7
      ELSE
        TotalLineNo := "Cost Type" + 1;

      IF ProjectForecastTotalLine.GET("Project No.", "Forecast Date", TotalLineNo, "Cost Type", "Currency Code") THEN
        EXIT;

      ProjectForecastTotalLine.INIT;
      ProjectForecastTotalLine."Project No." := "Project No.";
      ProjectForecastTotalLine."Forecast Date" := "Forecast Date";
      ProjectForecastTotalLine."Line No." := TotalLineNo;
      ProjectForecastTotalLine."Cost Type" := "Cost Type";
      IF "Cost Type" = "Cost Type"::Revenue THEN
        ProjectForecastTotalLine."Cost Type Filter" := '5'
      ELSE
        ProjectForecastTotalLine."Cost Type Filter" := FORMAT(TotalLineNo - 1);
      ProjectForecastTotalLine."Currency Code" := "Currency Code";
      ProjectForecastTotalLine.INSERT;

      IF "Cost Type" = "Cost Type"::Revenue THEN
        EXIT;

      IF ProjectForecastTotalLine.GET("Project No.", "Forecast Date", 6, ProjectForecastTotalLine."Cost Type"::"Total Cost", "Currency Code") THEN
        EXIT;

      ProjectForecastTotalLine.INIT;
      ProjectForecastTotalLine."Project No." := "Project No.";
      ProjectForecastTotalLine."Forecast Date" := "Forecast Date";
      ProjectForecastTotalLine."Line No." := 6;
      ProjectForecastTotalLine."Cost Type" := ProjectForecastTotalLine."Cost Type"::"Total Cost";
      ProjectForecastTotalLine."Cost Type Filter" := '0..4';
      ProjectForecastTotalLine."Currency Code" := "Currency Code";
      ProjectForecastTotalLine.INSERT;
      //**4PS.en BI042 KD 28-12-16
    END;

    PROCEDURE ValidateRateCode@1100528100(RateCode@1100528104 : Code[10];UpdateRateInForecastPeriodSilent@1100528100 : Boolean);
    VAR
      BudgetRateManagement@1100528103 : Codeunit 11012358;
      Job@1100528102 : Record 11072003;
      BudgetRateFoundAt@1100528101 : Text[250];
    BEGIN
      "Rate Code" := RateCode;
      TESTFIELD("Cost Type", "Cost Type"::Labor);
      Job.GET("Project No.");
      Rate := BudgetRateManagement.GetBudgetRate(0, "Project No.", '', '', Job."Global Dimension 1 Code", "Rate Code", "Forecast Date", BudgetRateFoundAt);
      CalcAmount;
      CheckUpdateRateInForecastPeriod(FIELDNO("Rate Code"), UpdateRateInForecastPeriodSilent);

      CheckSurchargesCalculated;
    END;

    PROCEDURE ValidateRate@1100528101(NewRate@1100528100 : Decimal;UpdateRateInForecastPeriodSilent@1100528101 : Boolean);
    BEGIN
      Rate := NewRate;
      IF CurrFieldNo = FIELDNO(Rate) THEN
        TESTFIELD("Rate Code", '');

      CalcAmount;
      CheckUpdateRateInForecastPeriod(FIELDNO(Rate), UpdateRateInForecastPeriodSilent);

      CheckSurchargesCalculated;
    END;

    LOCAL PROCEDURE CheckUpdateRateInForecastPeriod@1100528103(FromFieldNo@1100528100 : Integer;UpdateRateInForecastPeriodSilent@1100528101 : Boolean);
    BEGIN
      IF NOT RelatedProjectForecastInPeriodExists THEN
        EXIT;

      IF (NOT UpdateRateInForecastPeriodSilent) AND (NOT UpdateRateInForecastActivated) THEN BEGIN
        IF CONFIRM(Text006) THEN
          UpdateRateInForecast := TRUE;
        IF UseDialogOnce THEN
          UpdateRateInForecastActivated := TRUE;
      END;

      IF UpdateRateInForecastPeriodSilent OR UpdateRateInForecast THEN
        UpdateRateInForecastPeriod(FromFieldNo);
    END;

    LOCAL PROCEDURE RelatedProjectForecastInPeriodExists@1100528102() : Boolean;
    VAR
      ProjectForecastinPeriod@1100528100 : Record 11020632;
    BEGIN
      ProjectForecastinPeriod.SETRANGE("Project No.", "Project No.");
      ProjectForecastinPeriod.SETRANGE("Forecast Date", "Forecast Date");
      ProjectForecastinPeriod.SETRANGE("Cost Type", "Cost Type");
      ProjectForecastinPeriod.SETRANGE(Element, Element);
      ProjectForecastinPeriod.SETRANGE("Cost Object", "Cost Object");
      ProjectForecastinPeriod.SETRANGE("Currency Code", "Currency Code");
      EXIT(NOT ProjectForecastinPeriod.ISEMPTY);
    END;

    PROCEDURE SetUseDialogOnce@1100528104(UseDialog@1100528100 : Boolean) : Boolean;
    BEGIN
      UseDialogOnce := UseDialog;
    END;

    PROCEDURE CalceForecastBasedOnQuantity@1100529601() : Boolean;
    BEGIN
      IF "Cost Type" <> "Cost Type"::Labor THEN
        EXIT(FALSE);
      GetProjectSetup;
      EXIT(NOT ProjectSetup."Forecast Labour in Amounts");
    END;

    LOCAL PROCEDURE GetProjectSetup@1100529600();
    BEGIN
      IF HasGotProjectSetup THEN
        EXIT;
      ProjectSetup.GET;
      HasGotProjectSetup := TRUE;
    END;

    PROCEDURE SetForceCalcQty@1100529602(NewForceCalcQty@1100529600 : Boolean);
    BEGIN
      ForceCalcQty := NewForceCalcQty;
    END;

    BEGIN
    {
      4PS 27-07-2016 UKR-C21180 OTRO: added distribution by S-Curve (BI019)
      4PS 19-08-16 UKR-C26352 KD: Foreign currency in the forecast (BI042) - Added field "Currency Code"; field "Currency Code" added to Primary Key; added sorting by "Currency Code" added to triggers; added trigger GetRateFromBudget
    }
    END.
  }
}

