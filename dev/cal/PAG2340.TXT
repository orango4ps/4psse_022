OBJECT Page 2340 BC O365 No. Series Card
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW113.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Numbers;
               NOR=Tall;
               SVE=Nummer];
    SourceTable=Table308;
    DataCaptionExpr=GetNoSeriesDescription;
    PageType=StandardDialog;
    OnInit=BEGIN
             Initialize;
           END;

    OnQueryClosePage=BEGIN
                       IF CloseAction <> ACTION::OK THEN
                         EXIT;

                       UpdateLineForNewSeries;
                     END;

  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Visible=IsPostedInvoiceNoSeries;
                GroupType=Group;
                InstructionalTextML=[ENU=Specify how you want your invoices to be numbered, such as 0001, INV0001, or INV-0001. This number will then be applied to your next invoice.;
                                     NOR=Angi hvordan du vil at fakturaene skal nummereres, for eksempel 0001, INV0001 eller FAK-0001. Dette nummeret blir da brukt p† din neste faktura.;
                                     SVE=Ange hur du vill att fakturorna ska numreras, till exempel 0001, FAK0001 eller FAK-0001. Det h„r numret anv„nds sedan p† din n„sta faktura.] }

    { 5   ;1   ;Group     ;
                Visible=NOT IsPostedInvoiceNoSeries;
                GroupType=Group;
                InstructionalTextML=[ENU=Specify how you want your estimates to be numbered, such as 0001, EST0001, or EST-0001. This number will then be applied to your next estimate.;
                                     NOR=Angi hvordan du vil atÿestimatene skal nummereres, for eksempel 0001, INV0001 eller FAK-0001. Dette nummeret blir da brukt p† ditt neste estimat.;
                                     SVE=Ange hur du vill att uppskattningarna ska numreras, till exempel 0001, UPP0001 eller UPP-0001. Det h„r numret anv„nds sedan p† din n„sta uppskattning.] }

    { 3   ;1   ;Field     ;
                Name=NextNo;
                CaptionML=[ENU=Next number;
                           NOR=Neste nummer;
                           SVE=N„sta nummer];
                ApplicationArea=#Basic,#Suite,#Invoicing;
                NotBlank=Yes;
                SourceExpr=NextNoSeries;
                ShowCaption=No }

  }
  CODE
  {
    VAR
      SalesReceivablesSetup@1004 : Record 311;
      TextManagement@1001 : Codeunit 41;
      NoSeriesManagement@1005 : Codeunit 396;
      NextNoSeries@1000 : Code[15];
      IsPostedInvoiceNoSeries@1002 : Boolean;
      ConfirmNewInvoiceNoSeriesQst@1006 : TextConst 'ENU=If you have already sent invoices, please consult your accountant before you change the number sequence.\ \Do you want to continue?;NOR=Hvis du allerede har sendt fakturaer, kontakter du regnskapsf›reren din f›r du endrer nummerserien.\ \Vil du fortsette?;SVE=Om du redan har skickat fakturor ska du kontakta din revisor innan du „ndrar nummerserien.\ \Vill du forts„tta?';
      InvoiceDocTypeTxt@1007 : TextConst 'ENU=Invoice;NOR=Faktura;SVE=Faktura';
      NextNumberTxt@1003 : TextConst 'ENU=Next number;NOR=Neste nummer;SVE=N„sta nummer';
      Confirmed@1009 : Boolean;

    LOCAL PROCEDURE Initialize@1();
    VAR
      LocalNoSeries@1000 : Code[20];
    BEGIN
      IF SalesReceivablesSetup.GET THEN;
      IF Code = SalesReceivablesSetup."Posted Invoice Nos." THEN
        IsPostedInvoiceNoSeries := TRUE;
      LocalNoSeries := NoSeriesManagement.ClearStateAndGetNextNo(Code);
      Confirmed := TRUE;
      IF STRLEN(LocalNoSeries) <= MAXSTRLEN(NextNoSeries) THEN
        NextNoSeries := COPYSTR(LocalNoSeries,1,MAXSTRLEN(NextNoSeries));
    END;

    LOCAL PROCEDURE UpdateLineForNewSeries@6();
    VAR
      NoSeriesLine@1001 : Record 309;
    BEGIN
      IF NextNoSeries = '' THEN
        EXIT;

      IF NextNoSeries = NoSeriesManagement.ClearStateAndGetNextNo(Code) THEN
        EXIT;

      TextManagement.EvaluateIncStr(NextNoSeries,NextNumberTxt);

      IF IsPostedInvoiceNoSeries THEN
        Confirmed := CONFIRM(ConfirmNewInvoiceNoSeriesQst);

      IF Confirmed THEN BEGIN
        NoSeriesLine.RESET;
        NoSeriesLine.SETCURRENTKEY("Series Code","Starting Date");
        NoSeriesLine.SETRANGE("Series Code",Code);
        NoSeriesLine.SETRANGE("Starting Date",0D,WORKDATE);
        IF NoSeriesLine.FINDLAST THEN BEGIN
          NoSeriesLine.INIT;
          NoSeriesLine.VALIDATE("Starting No.",NextNoSeries);
          NoSeriesLine.MODIFY(TRUE);
        END ELSE BEGIN
          NoSeriesLine.INIT;
          NoSeriesLine.VALIDATE("Series Code",Code);
          NoSeriesLine.VALIDATE("Line No.",GetNextLineNo(Code));
          NoSeriesLine.VALIDATE("Starting No.",NextNoSeries);
          NoSeriesLine.INSERT(TRUE);
        END;
        OnAfterNoSeriesModified;
      END;
    END;

    LOCAL PROCEDURE GetNoSeriesDescription@2() NoSeriesDescription : Text;
    VAR
      SalesReceivablesSetup@1000 : Record 311;
    BEGIN
      IF SalesReceivablesSetup.GET THEN;

      IF Code = SalesReceivablesSetup."Quote Nos." THEN
        NoSeriesDescription := Description
      ELSE
        NoSeriesDescription := InvoiceDocTypeTxt;
    END;

    LOCAL PROCEDURE GetNextLineNo@5(SeriesCode@1000 : Code[20]) : Integer;
    VAR
      NoSeriesLine@1001 : Record 309;
    BEGIN
      NoSeriesLine.SETRANGE("Series Code",SeriesCode);
      IF NoSeriesLine.FINDLAST THEN;

      EXIT(NoSeriesLine."Line No." + 10000);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterNoSeriesModified@18();
    BEGIN
    END;

    BEGIN
    END.
  }
}

