OBJECT Table 11020555 Plant Loc. Item Invent. (Temp)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               ERROR('');  //* May only be used as tmp-tabel
             END;

    CaptionML=[ENU=Plant Location Item Inventoty (Temporary);
               NOR=Artikkellager for maskinlokasjon (midlertidig);
               SVE=Artikelrader f”r Maskinsplats (tillf„lligt)];
  }
  FIELDS
  {
    { 10  ;   ;Plant Location Code ;Code20        ;TableRelation="Plant Location";
                                                   CaptionML=[ENU=Plant Location Code;
                                                              NOR=Maskinplasseringskode;
                                                              SVE=Maskinutplaceringkod];
                                                   Editable=No }
    { 20  ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   CaptionML=[ENU=Item No.;
                                                              NOR=Artikkelnr;
                                                              SVE=Artikelnr];
                                                   Editable=No }
    { 30  ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Item No.));
                                                   CaptionML=[ENU=Variant Code;
                                                              NOR=Variantkode;
                                                              SVE=Variantkod];
                                                   Editable=No }
    { 40  ;   ;Item Description    ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Item.Description WHERE (No.=FIELD(Item No.)));
                                                   CaptionML=[ENU=Item Description;
                                                              NOR=Artikkelbeskrivelse;
                                                              SVE=Artikelbeskrivning];
                                                   Editable=No }
    { 41  ;   ;Sales/Buy-Back Item ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Item."Sales/Buy-Back Item (Plant)" WHERE (No.=FIELD(Item No.)));
                                                   CaptionML=[ENU=Sales/Buy-Back;
                                                              NOR=Salg/Tilbakekj›p;
                                                              SVE=F”rs„ljning/†terk”p];
                                                   Editable=No }
    { 45  ;   ;Variant Description ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Item Variant".Description WHERE (Item No.=FIELD(Item No.),
                                                                                                        Code=FIELD(Variant Code)));
                                                   CaptionML=[ENU=Variant Description;
                                                              NOR=Variantbeskrivelse;
                                                              SVE=Variantbeskrivning];
                                                   Editable=No }
    { 50  ;   ;Quantity            ;Decimal       ;CaptionML=[ENU=Quantity;
                                                              NOR=Antall;
                                                              SVE=Antal];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 60  ;   ;Unit of Measure     ;Code10        ;TableRelation="Unit of Measure";
                                                   CaptionML=[ENU=Unit of Measure;
                                                              NOR=Enhet;
                                                              SVE=M†ttenhet];
                                                   Editable=No }
    { 800 ;   ;Plant Group         ;Code20        ;TableRelation="Plant Group";
                                                   CaptionML=ENU=Plant Group }
  }
  KEYS
  {
    {    ;Plant Location Code,Item No.,Variant Code,Plant Group;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      UnitOfMeasMgt@1100525000 : Codeunit 5402;
      Text000@1100525001 : TextConst 'ENU=Build Item Inventory #1##################;NOR=Bygningsartikkellager #1##################;SVE=Byggnadsartikellager #1##################';

    PROCEDURE BuildPlantLocInventory@1100525000(PlantLocCode@1100525006 : Code[20];ReferenceDate@1100525007 : Date);
    VAR
      POItemLine@1100525000 : Record 11012557;
      Item@1100525001 : Record 27;
      ItemVariant@1100525002 : Record 5401;
      PlantLoc@1100525008 : Record 11012554;
      Window@1100525005 : Dialog;
      ItemFound@1100525004 : Boolean;
    BEGIN
      Window.OPEN(Text000);
      RESET;
      DELETEALL;

      IF NOT PlantLoc.GET(PlantLocCode) THEN
        EXIT;
      IF PlantLoc.Depot THEN
        EXIT;

      //* Common filters
      POItemLine.SETCURRENTKEY("Plant Location (Posted Item)", "Item No.");
      POItemLine.SETRANGE("Plant Location (Posted Item)", PlantLocCode);
      POItemLine.SETRANGE(Type, POItemLine.Type::Item);
      POItemLine.SETRANGE(Posted, TRUE);

      //* Arrival
      POItemLine.SETRANGE("Plant Order Type", POItemLine."Plant Order Type"::Arrival);
      IF ReferenceDate <> 0D THEN
        POItemLine.SETRANGE("Transfer Date", 0D, ReferenceDate);
      IF POItemLine.FINDSET THEN BEGIN
        REPEAT
          IF POItemLine."Item No." <> Item."No." THEN BEGIN
            Window.UPDATE(1, POItemLine."Item No.");
            ItemFound := Item.GET(POItemLine."Item No.");
          END;
          IF ItemFound THEN BEGIN
            IF POItemLine."Variant Code" <> '' THEN BEGIN
              IF NOT ItemVariant.GET(POItemLine."Item No.", POItemLine."Variant Code") THEN
                POItemLine."Variant Code" := '';
            END;
            IF NOT GET(POItemLine."Plant Location (Posted Item)", POItemLine."Item No.", POItemLine."Variant Code", POItemLine."To Plant Group")  THEN BEGIN
              INIT;
              "Plant Location Code" := POItemLine."Plant Location (Posted Item)";
              "Item No." := POItemLine."Item No.";
              "Variant Code" := POItemLine."Variant Code";
              Quantity := POItemLine.Quantity;
              "Unit of Measure" := POItemLine."Unit of Measure";
              "Plant Group" := POItemLine."To Plant Group";
              INSERT;
            END ELSE BEGIN
              IF (POItemLine."Unit of Measure" <> "Unit of Measure") AND
                 ("Unit of Measure" <> Item."Sales Unit of Measure")
              THEN BEGIN
                //* If Unit of PO-Item Line unequal to Unit of already in tmprec (item with more than 1 unit on plant location)
                //* and the unit of tmprec in not the Sales Unit of the item (this is the default unit of PO-Item Line) than
                //* than show quantity in the Sales Unit.
                Quantity := Quantity * UnitConvFactor(Item,"Unit of Measure",Item."Sales Unit of Measure");
                "Unit of Measure" := Item."Sales Unit of Measure";
              END;
              IF (POItemLine."Unit of Measure" <> "Unit of Measure") THEN
                POItemLine.Quantity := POItemLine.Quantity * UnitConvFactor(Item,POItemLine."Unit of Measure","Unit of Measure");
              Quantity := ROUND((Quantity + POItemLine.Quantity), 0.00001);
              MODIFY;
            END;
          END;
        UNTIL POItemLine.NEXT = 0;
      END;

      //* Removal
      POItemLine.SETRANGE("Plant Order Type", POItemLine."Plant Order Type"::Removal);
      POItemLine.SETRANGE("Transfer Date");  //* Reset filter on date, also minus removal after reference date
      IF POItemLine.FINDSET THEN BEGIN
        REPEAT
          IF POItemLine."Item No." <> Item."No." THEN BEGIN
            Window.UPDATE(1, POItemLine."Item No.");
            ItemFound := Item.GET(POItemLine."Item No.");
          END;
          IF ItemFound THEN BEGIN
            IF POItemLine."Variant Code" <> '' THEN BEGIN
              IF NOT ItemVariant.GET(POItemLine."Item No.", POItemLine."Variant Code") THEN
                POItemLine."Variant Code" := '';
            END;
            IF GET(POItemLine."Plant Location (Posted Item)", POItemLine."Item No.", POItemLine."Variant Code", POItemLine."From Plant Group")  THEN BEGIN
              IF (POItemLine."Unit of Measure" <> "Unit of Measure") THEN
                POItemLine.Quantity := POItemLine.Quantity * UnitConvFactor(Item,POItemLine."Unit of Measure","Unit of Measure");
              Quantity := ROUND((Quantity - POItemLine.Quantity), 0.00001);  //* Minus
              MODIFY;
            END;
          END;
        UNTIL POItemLine.NEXT = 0;
      END;

      RESET;
      SETFILTER(Quantity, '<=%1', 0);
      DELETEALL;
      RESET;
      IF FINDFIRST THEN;
      Window.CLOSE;
    END;

    PROCEDURE UnitConvFactor@1100525001(Item@1100525000 : Record 27;UnitFrom@1100525001 : Code[10];UnitTo@1100525002 : Code[10]) : Decimal;
    BEGIN
      EXIT(UnitOfMeasMgt.GetQtyPerUnitOfMeasure(Item, UnitFrom) / UnitOfMeasMgt.GetQtyPerUnitOfMeasure(Item, UnitTo));
    END;

    BEGIN
    END.
  }
}

