OBJECT Codeunit 11012867 Consumption Invoice Mgt
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00,4PSSE;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TempSalesLineRec@1100526202 : TEMPORARY Record 37;
      LineNoInt@1100525001 : Integer;
      Text001@1100528807 : TextConst 'ENU=Service Contract %1 is already invoiced until %2';
      Text003@1100528600 : TextConst 'ENU=Invoice Proposal %1 not processed;NOR=Fakturaforslag %1 er ikke prosessert;SVE=Fakturaf”rslag %1 inte behandlat';
      Text004@1100528601 : TextConst 'ENU=Customer %1 is blocked for Invoicing;NOR=Kunde %1 er blokkert for fakturering;SVE=Kund %1 har blockerats f”r fakturering.';
      Text005@1210190000 : TextConst 'ENU=Sales Invoice %1 not processed;NOR=Salgsfaktura %1 er ikke prosessert;SVE=F”rs„ljningsfakturan %1 har inte behandlats';
      Text006@1210190001 : TextConst 'ENU=Credit Memo %1 not processed;NOR=Kreditnota %1 er ikke prosessert;SVE=Kreditnotan %1 har inte behandlats.';
      Text010@1100525003 : TextConst 'ENU=No Starting Date set for Service Contract %1';
      GenericTempTable@1100525000 : Record 11020579;
      InvoiceStartDate@1100525004 : Date;
      InvoiceEndDate@1100525005 : Date;
      Text011@1100529400 : TextConst 'ENU=No Rate available for Consumption Component %1 for Contract Object %2 in Service Contract %3.';
      FirstFinalInvoice@1100528800 : Boolean;
      Text014@1100528801 : TextConst 'ENU=Amount Advanced Payments';
      Text015@1100528802 : TextConst 'ENU=until;SVE=Till';
      Text016@1100528803 : TextConst 'ENU=Advance Payment Invoice';
      Text018@1100529401 : TextConst 'ENU=Contract Object %1: No Meter Reading is found for Meter Reading Date: %2  and Inter- and Extrapolation is not allowed in Service and Maintenance Setup.';
      Text019@1100528806 : TextConst 'ENU=Start Reading - End Reading';
      Text020@1100528808 : TextConst 'ENU=Inter- or Extrapolation not possible. A minimum of 2 Meter Reading are necessary for Consumption Component %1 with Object %2';
      LastFinalInvoice@1100528809 : Boolean;

    PROCEDURE CreateInvoiceProposal@1100526223(IServiceContract@1100525000 : Record 11012812;IPostingDate@1100525011 : Date;IDocumentDate@1100525012 : Date;EndDate@1100525002 : Date;AdvPaymentsInDetail@1100528802 : Boolean;ISingleContract@1100528601 : Boolean) : Code[20];
    VAR
      Customer@1100526201 : Record 18;
      SalesLine@1210190001 : Record 37;
      ProposalCde@1100525007 : Code[20];
      FoundInvoiceProposalCode@1100528602 : Code[20];
      DocumentType@1210190000 : Option;
      SumStandingChargeAndConsumption@1100528803 : Decimal;
    BEGIN
      IF ISingleContract THEN BEGIN
        IServiceContract.TESTFIELD(Status, IServiceContract.Status::"Invoicing Allowed");
        IServiceContract.TESTFIELD("Installment Type", IServiceContract."Installment Type"::Consumption);
        IServiceContract.TESTFIELD("Invoice Type", IServiceContract."Invoice Type"::Installments);
        IF IServiceContract."Invoiced Until" >= EndDate THEN
          ERROR(Text001, IServiceContract."No.", IServiceContract."Invoiced Until");
      END ELSE BEGIN
        IF IServiceContract.Status <> IServiceContract.Status::"Invoicing Allowed" THEN
          EXIT;
        IF IServiceContract."Installment Type" <> IServiceContract."Installment Type"::Consumption THEN
          EXIT;
        IF IServiceContract."Invoice Type" <> IServiceContract."Invoice Type"::Installments THEN
          EXIT;
        IF IServiceContract."Invoiced Until" >= EndDate THEN
          EXIT;
      END;

      FoundInvoiceProposalCode := ProposalInvoiceExists(IServiceContract."No.", DocumentType);
      IF FoundInvoiceProposalCode <> '' THEN
        IF ISingleContract THEN BEGIN
          CASE DocumentType OF
            SalesLine."Document Type"::"Invoice Proposal":
              ERROR(Text003, FoundInvoiceProposalCode);
            SalesLine."Document Type"::Invoice:
              ERROR(Text005, FoundInvoiceProposalCode);
            SalesLine."Document Type"::"Credit Memo":
              ERROR(Text006, FoundInvoiceProposalCode);
          END;
        END ELSE
          EXIT;

      IF Customer.GET(IServiceContract."Bill-to Customer No. (Contr.)") THEN
        IF Customer.Blocked >= Customer.Blocked::Invoice THEN
          IF ISingleContract THEN
            ERROR(Text004, Customer."No.")
          ELSE
            EXIT;

      WITH IServiceContract DO BEGIN
        TESTFIELD("Customer No.");
        TESTFIELD("Starting Date");
      END;

      SetInvoiceStartEndDate(IServiceContract, EndDate);
      FindConsumptionComponents(IServiceContract);
      FindConsumptionComponentRates(IServiceContract);
      FindStandingCharges(IServiceContract);
      FindPayments(IServiceContract, AdvPaymentsInDetail);
      CreateConsumptionInvLine(IServiceContract, SumStandingChargeAndConsumption);
      CreateStandingChargeInvLine(IServiceContract, SumStandingChargeAndConsumption);
      CreateAdvPaymentInvLine(IServiceContract, AdvPaymentsInDetail);
      SetNewInstallmentAmount(IServiceContract, AdvPaymentsInDetail, SumStandingChargeAndConsumption);
      SetNewSrvContractInvoicedUntil(IServiceContract);

      GenericTempTable.RESET;
      GenericTempTable.DELETEALL;
      SumStandingChargeAndConsumption := 0;


      WITH TempSalesLineRec DO BEGIN
        LineNoInt := 0;
        IF FINDSET THEN
          ProposalCde := CreateInvProposalHeader(IServiceContract,IServiceContract."No.",IPostingDate,IDocumentDate);
          REPEAT
            CreateInvProposalLine(ProposalCde);
            TempSalesLineRec.DELETE;
          UNTIL TempSalesLineRec.NEXT = 0;
      END;

      EXIT(ProposalCde);
    END;

    PROCEDURE GetContractCurrency@1100528805(ServiceContractNo@1100528800 : Code[20]) CurrencyCode : Code[10];
    VAR
      ServiceContract@1100526200 : Record 11012812;
    BEGIN
      IF ServiceContract.GET(ServiceContractNo) THEN
        EXIT(ServiceContract."Currency Code")
      ELSE
        EXIT('');
    END;

    PROCEDURE CreateInvProposalHeader@1100526204(ServContractRec@1100525001 : Record 11012812;ServContrCde@1100525002 : Code[20];PostingDate@1100525003 : Date;DocumentDate@1100525006 : Date) ProposalCde : Code[20];
    VAR
      SalesHeader@1100525000 : Record 36;
      Customer@1100526200 : Record 18;
      ServiceSetup@1100525008 : Record 11012800;
      RevenueCostObject@1100525007 : Code[20];
    BEGIN
      WITH SalesHeader DO BEGIN
        INIT;
        "Document Type" := "Document Type"::"Invoice Proposal";
        "Service Invoice" := TRUE;
        "Consumption Invoice" := TRUE;
        VALIDATE("No.");
        INSERT(TRUE);
        ServContractRec.CALCFIELDS(Name,"Name 2",Address,"Address 2","Post Code",City,"Bill-to Name (Contract)","Bill-to Address (Contract)",
                                     "Bill-to Address 2 (Contract)","Bill-to Post Code (Contract)","Bill-to City (Contract)");
        IF ServContractRec."Use Bill-to as Sell-to (Contr)" THEN
          VALIDATE("Sell-to Customer No.", ServContractRec."Bill-to Customer No. (Contr.)")
        ELSE
          VALIDATE("Sell-to Customer No.", ServContractRec."Customer No.");
        "Service Contract No." := ServContrCde;
        "Posting Date" := PostingDate;
        "Document Date" := DocumentDate;
        SetHideValidationDialog(TRUE);
        VALIDATE("Bill-to Customer No.", ServContractRec."Bill-to Customer No. (Contr.)");
        VALIDATE("Alternative Bill-to Address", ServContractRec."Alt. Bill-to Address (Contr.)");
        IF ServContractRec."Contract Manager" <> '' THEN
          VALIDATE("Salesperson Code", ServContractRec."Contract Manager");
        Customer.GET(ServContractRec."Bill-to Customer No. (Contr.)");
        RevenueCostObject := Customer."Cost Object";
        IF RevenueCostObject = '' THEN BEGIN
          ServiceSetup.GET;
          ServiceSetup.TESTFIELD("Cost Object Revenues");
          RevenueCostObject := ServiceSetup."Cost Object Revenues";
        END;
        VALIDATE("Shortcut Dimension 1 Code", ServContractRec."Global Dimension 1 Code");
        VALIDATE("Shortcut Dimension 2 Code", RevenueCostObject);
        "Currency Code" := GetContractCurrency(ServContrCde);
        "Principal Reference" := ServContractRec."Your Reference";
        SalesHeader.UpdateCurrencyFactor;
        MODIFY(TRUE);
        EXIT("No.");
      END;
    END;

    PROCEDURE FindExistingProposalHeader@1100526219(ServContrRec@1100525000 : Record 11012812;PostingDate@1100525002 : Date;ForehandDate@1100525005 : Date;AfterwardsDate@1100525004 : Date;DocumentDate@1100525003 : Date) ProposalCde : Code[20];
    VAR
      SalesHeader@1100525001 : Record 36;
      SalesLine@1100526200 : Record 37;
    BEGIN
      WITH SalesHeader DO BEGIN
        SETRANGE("Document Type", "Document Type"::"Invoice Proposal");
        SETRANGE("Service Invoice", TRUE);
        SETRANGE("Consumption Invoice", TRUE);
        SETRANGE("Sell-to Customer No.", ServContrRec."Customer No.");
        IF FINDFIRST THEN BEGIN
          SalesLine.SETRANGE("Document Type", "Document Type");
          SalesLine.SETRANGE("Document No.", "No.");
          IF SalesLine.FINDLAST THEN
            LineNoInt := SalesLine."Line No.";
          EXIT("No.")
        END ELSE
          EXIT(CreateInvProposalHeader(ServContrRec,'',PostingDate,DocumentDate));
      END;
    END;

    PROCEDURE CreateInvProposalLine@1100526207(IProposalCode@1100526201 : Code[20]);
    VAR
      SalesHeader@1100526202 : Record 36;
      SalesLine@1100526200 : Record 37;
    BEGIN
      SalesHeader.GET(SalesHeader."Document Type"::"Invoice Proposal", IProposalCode);
      WITH SalesLine DO BEGIN
        COPY(TempSalesLineRec);
        "Document Type" := "Document Type"::"Invoice Proposal";
        "Document No." := IProposalCode;
        "Line No." := LineCounter;
        VALIDATE(Quantity);
        VALIDATE("Service Contract No.");
        VALIDATE("VAT Prod. Posting Group", TempSalesLineRec."VAT Prod. Posting Group");
        IF TempSalesLineRec."Shortcut Dimension 2 Code" = '' THEN
          VALIDATE("Shortcut Dimension 2 Code", SalesHeader."Shortcut Dimension 2 Code");
        VALIDATE("Shortcut Dimension 2 Code", TempSalesLineRec."Shortcut Dimension 2 Code");
        Description := TempSalesLineRec.Description;
        "Unit of Measure" := TempSalesLineRec."Unit of Measure";
        VALIDATE("Gen. Bus. Posting Group", SalesHeader."Gen. Bus. Posting Group");
        "Currency Code" := GetContractCurrency("Service Contract No.");
        "Service Control Period Date" := InvoiceEndDate;
        "FA Posting Date" := 0D;
        INSERT;
      END;
    END;

    PROCEDURE LineCounter@1100525032() LineNo : Integer;
    BEGIN
      LineNoInt += 10000;
      EXIT(LineNoInt);
    END;

    PROCEDURE GetContractObjectEndingDate@1100526215(IContractObject@1100526200 : Record 11071702) : Date;
    VAR
      ServiceContract@1100526201 : Record 11012812;
    BEGIN
      IF IContractObject."Ending Date" <> 0D THEN
        EXIT(IContractObject."Ending Date");

      ServiceContract.GET(IContractObject."Service Contract No.");
      EXIT(ServiceContract."Ending Date");
    END;

    PROCEDURE ProposalInvoiceExists@1100526202(IServiceContractNo@1100526201 : Code[20];VAR ODocumentType@1210190000 : Option) : Code[20];
    VAR
      SalesLine@1100526200 : Record 37;
      ServiceOrder@1100525000 : Record 11012823;
      CollectiveListSCInvLine@1100525001 : Record 11071931;
    BEGIN
      SalesLine.SETFILTER("Document Type", '%1|%2|%3',
      SalesLine."Document Type"::"Invoice Proposal",
      SalesLine."Document Type"::Invoice,
      SalesLine."Document Type"::"Credit Memo");
      SalesLine.SETRANGE("Service Invoice", TRUE);
      SalesLine.SETRANGE("Service Order No.", '');
      SalesLine.SETRANGE("Service Contract No.", IServiceContractNo);
      IF SalesLine.FINDFIRST THEN BEGIN
        ODocumentType := SalesLine."Document Type";
        EXIT(SalesLine."Document No.");
      END;

      SalesLine.SETFILTER("Service Order No.", '<>%1', '');
      IF SalesLine.FINDSET THEN
        REPEAT
          ServiceOrder.GET(SalesLine."Service Order No.");
          IF ServiceOrder."Collective List No." <> '' THEN BEGIN
            CollectiveListSCInvLine.SETRANGE("Collective List No.", ServiceOrder."Collective List No.");
            CollectiveListSCInvLine.SETRANGE("Service Contract No.", IServiceContractNo);
            CollectiveListSCInvLine.SETRANGE(Invoiced, FALSE);
            IF NOT CollectiveListSCInvLine.ISEMPTY THEN BEGIN
              ODocumentType := SalesLine."Document Type";
              EXIT(SalesLine."Document No.");
            END;
          END;
        UNTIL SalesLine.NEXT = 0;
    END;

    PROCEDURE SetInvoiceStartEndDate@1100525003(IServiceContract@1100525000 : Record 11012812;EndDate@1100525001 : Date);
    BEGIN
      FirstFinalInvoice := FALSE;
      LastFinalInvoice := FALSE;

      IF IServiceContract."Starting Date" = 0D THEN
        ERROR(Text010, IServiceContract."No.");

      IF IServiceContract."Invoiced Until" <> 0D THEN
        InvoiceStartDate := IServiceContract."Invoiced Until" +1;

      IF IServiceContract."Invoiced Until" = 0D THEN BEGIN
        InvoiceStartDate := IServiceContract."Starting Date";
        FirstFinalInvoice := TRUE;
      END;

      IF (IServiceContract."Ending Date" = 0D) OR (IServiceContract."Ending Date" > EndDate) THEN
        InvoiceEndDate := EndDate
      ELSE
        InvoiceEndDate := IServiceContract."Ending Date";

      IF (IServiceContract."Ending Date" <> 0D) AND (IServiceContract."Ending Date" <= EndDate) THEN
        LastFinalInvoice := TRUE;
    END;

    PROCEDURE FindConsumptionComponents@1100525009(IServiceContract@1100525000 : Record 11012812);
    VAR
      ContractObject@1100525001 : Record 11071702;
      ConsumptionComponent@1100528800 : Record 11071962;
      ConsumptionComponentSingle@1100528801 : Record 11071962;
    BEGIN
      ContractObject.SETRANGE("Service Contract No.",IServiceContract."No.");
      IF ContractObject.FINDSET THEN BEGIN
        REPEAT
          ConsumptionComponent.RESET;
          IF (ContractObject."Invoice From" < InvoiceEndDate) AND
             ((ContractObject."Ending Date" > InvoiceStartDate) OR (ContractObject."Ending Date" = 0D)) THEN
          BEGIN
            GetConsumptionComponentsByObject(ContractObject."Service Object No.", ConsumptionComponent);
            IF ConsumptionComponent.FINDSET THEN
              REPEAT
                ConsumptionComponentSingle.SETRANGE(Code, ConsumptionComponent.Code);
                ConsumptionComponentSingle.FINDFIRST;
                SaveConsumptionCompToTempTable(IServiceContract, ContractObject,ConsumptionComponentSingle);
              UNTIL ConsumptionComponent.NEXT = 0;
          END;

        UNTIL ContractObject.NEXT = 0;
      END;
    END;

    PROCEDURE FindConsumptionComponentRates@1100525006(IServiceContract@1100525002 : Record 11012812);
    VAR
      GenericTempTable2@1100528802 : Record 11020579;
      ConsumptionRate@1100525001 : Record 11071970;
      ConsumptionComponent@1100528800 : Record 11071962;
      ContractObject@1100528803 : Record 11071702;
      RecordsFound@1100525003 : Boolean;
      StartDate@1100528808 : Date;
      EndDate@1100528809 : Date;
      StartMeterReading@1100525006 : Decimal;
      EndMeterReading@1100525007 : Decimal;
      Consumption@1100525008 : Decimal;
      FirstRecordInSet@1100525000 : Boolean;
      NumberOfRecords@1100525011 : Integer;
      RecordCounter@1100525012 : Integer;
      StartDateMeterReading@1100525009 : Date;
      EndDateMeterReading@1100525010 : Date;
      StartDateMeterReadingToPrint@1100528801 : Date;
      ObjectNo@1100528804 : Code[20];
      ConsumptionComponentCode@1100528805 : Code[20];
      ContractObjectStartDate@1100528807 : Date;
      ContractObjectEndDate@1100528806 : Date;
    BEGIN
      GenericTempTable.RESET;
      GenericTempTable.SETRANGE("Key Code1", IServiceContract."No.");
      GenericTempTable.SETRANGE(Text1, 'objectcomponents');
      IF GenericTempTable.FINDSET THEN
        REPEAT
          ConsumptionRate.SETRANGE("Component Type", ConsumptionRate."Component Type"::Consumption);
          ConsumptionRate.SETRANGE("Consumption Component Code", GenericTempTable."Key Code3");
          ConsumptionRate.SETFILTER("Start Date", '<%1', InvoiceEndDate);
          ConsumptionRate.SETFILTER("End Date", '>%1|%2', InvoiceStartDate, 0D);
          //Service Contract level
          ConsumptionRate.SETRANGE("Service Contract", IServiceContract."No.");
          RecordsFound := NOT ConsumptionRate.ISEMPTY;
          //Service Group level
          IF NOT RecordsFound THEN BEGIN
            ConsumptionRate.SETRANGE("Service Contract");
            ConsumptionRate.SETRANGE("Service Contract Group", IServiceContract."Contract Group");
            RecordsFound := NOT ConsumptionRate.ISEMPTY;
          END;
          //default level
          IF NOT RecordsFound THEN BEGIN
            ConsumptionRate.SETRANGE("Service Contract", '');
            ConsumptionRate.SETRANGE("Service Contract Group", '');
          END;

          IF NOT RecordsFound THEN
            ERROR(Text011,GenericTempTable."Key Code3", GenericTempTable."Key Code2", IServiceContract."No.");
          ContractObject.GET(GenericTempTable."Key Code1", GenericTempTable."Key Code2");
          IF ContractObject."Invoice From" = 0D THEN
            ContractObjectStartDate := ContractObject."Starting Date"
          ELSE
            ContractObjectStartDate := ContractObject."Invoice From";
          IF ContractObject."Ending Date" = 0D THEN
            ContractObjectEndDate := InvoiceEndDate
          ELSE
            ContractObjectEndDate := ContractObject."Ending Date";
          IF ContractObjectStartDate > InvoiceStartDate THEN
            StartDate := ContractObjectStartDate
          ELSE
            StartDate := InvoiceStartDate;
          IF ContractObjectEndDate < InvoiceEndDate THEN
            EndDate := ContractObjectEndDate
          ELSE
            EndDate := InvoiceEndDate;

          IF ConsumptionRate.FINDSET THEN BEGIN
            FirstRecordInSet := TRUE;
            NumberOfRecords := ConsumptionRate.COUNT;
            RecordCounter := 0;
            REPEAT
              RecordCounter += 1;
              IF NumberOfRecords = 1 THEN BEGIN
                IF FirstFinalInvoice THEN BEGIN
                  StartDateMeterReading := StartDate;
                  StartDateMeterReadingToPrint := StartDateMeterReading;
                END ELSE BEGIN
                  StartDateMeterReading := StartDate-1;
                  StartDateMeterReadingToPrint := StartDateMeterReading+1;
                END;
                EndDateMeterReading := EndDate;
              END;

              IF NumberOfRecords > 1 THEN
                IF FirstRecordInSet THEN BEGIN
                  IF FirstFinalInvoice THEN BEGIN
                    StartDateMeterReading := StartDate;
                    StartDateMeterReadingToPrint := StartDateMeterReading;
                  END ELSE BEGIN
                    StartDateMeterReading := StartDate-1;
                    StartDateMeterReadingToPrint := StartDate;
                  END;
                  EndDateMeterReading := ConsumptionRate."End Date";
                END;
                IF NOT FirstRecordInSet THEN BEGIN
                  IF (RecordCounter = NumberOfRecords) THEN
                    EndDateMeterReading := EndDate
                  ELSE
                    EndDateMeterReading := ConsumptionRate."End Date";
                  StartDateMeterReading := ConsumptionRate."Start Date"-1;
                  StartDateMeterReadingToPrint := ConsumptionRate."Start Date";
                END;

              ObjectNo := GenericTempTable."Key Code2";
              ConsumptionComponentCode := GenericTempTable."Key Code3";

              StartMeterReading := GetMeterReading(StartDateMeterReading, ObjectNo, ConsumptionComponentCode);
              EndMeterReading := GetMeterReading(EndDateMeterReading, ObjectNo, ConsumptionComponentCode);

              Consumption := EndMeterReading - StartMeterReading;
              GenericTempTable2.INIT;
              GenericTempTable2."Key Code1" := IServiceContract."No.";
              GenericTempTable2."Key Code2" := GenericTempTable."Key Code2";
              GenericTempTable2."Key Code3" := GenericTempTable."Key Code3";
              GenericTempTable2."Key Code4" := FORMAT(StartDateMeterReadingToPrint);
              GenericTempTable2.Code1 := ConsumptionRate."VAT Product Posting Group";
              GenericTempTable2.Text1 := 'consumption';
              GenericTempTable2.Text2 := FORMAT(StartDateMeterReadingToPrint);
              GenericTempTable2.Dec1 := StartMeterReading;
              GenericTempTable2.Text3 := FORMAT(EndDateMeterReading);
              GenericTempTable2.Text4 := FORMAT(ConsumptionRate."Dimension Value");
              ConsumptionComponent.GET(ConsumptionRate."Consumption Component Code");
              GenericTempTable2.Text5 := ConsumptionComponent.Description;
              GenericTempTable2.Dec2 := EndMeterReading;
              GenericTempTable2.Dec3 := Consumption;
              GenericTempTable2.Dec4 := ConsumptionRate.Rate;
              GenericTempTable2.Dec5 := Consumption * ConsumptionRate.Rate;
              GenericTempTable2.INSERT;
              FirstRecordInSet := FALSE;
            UNTIL ConsumptionRate.NEXT = 0;
          END;
        UNTIL GenericTempTable.NEXT = 0;
    END;

    PROCEDURE FindStandingCharges@1100525004(IServiceContract@1100525000 : Record 11012812);
    VAR
      ConsumptionRate@1100525001 : Record 11071970;
    BEGIN
      ConsumptionRate.SETRANGE("Component Type", ConsumptionRate."Component Type"::"Standing Charge");
      ConsumptionRate.SETFILTER("Start Date", '<%1', InvoiceEndDate);
      ConsumptionRate.SETFILTER("End Date", '>%1|%2', InvoiceStartDate,0D);
      ConsumptionRate.SETRANGE("Service Contract", IServiceContract."No.");
      IF ConsumptionRate.FINDSET THEN
        REPEAT
          SaveStandingChargeToTempTable(IServiceContract, ConsumptionRate);
        UNTIL ConsumptionRate.NEXT = 0;

      ConsumptionRate.SETRANGE("Service Contract");
      ConsumptionRate.SETRANGE("Service Contract Group", IServiceContract."Contract Group");
      IF ConsumptionRate.FINDSET THEN
        REPEAT
          SaveStandingChargeToTempTable(IServiceContract, ConsumptionRate);
        UNTIL ConsumptionRate.NEXT = 0;

      ConsumptionRate.SETRANGE("Service Contract", '');
      ConsumptionRate.SETRANGE("Service Contract Group", '');
      IF ConsumptionRate.FINDSET THEN
        REPEAT
          SaveStandingChargeToTempTable(IServiceContract, ConsumptionRate);
        UNTIL ConsumptionRate.NEXT = 0;
    END;

    PROCEDURE SaveStandingChargeToTempTable@1100525011(IServiceContract@1100525000 : Record 11012812;ConsumptionRate@1100525001 : Record 11071970);
    VAR
      ConsumptionComponent@1100528800 : Record 11071962;
      ServiceSetup@1100528801 : Record 11012800;
      DoNotInvoiceFirstPeriodSC@1100528802 : Boolean;
      InvoiceEntireLastPeriodSC@1100528803 : Boolean;
      RateStartDate@1100525002 : Date;
      RateEndDate@1100525003 : Date;
    BEGIN
      IF ServiceSetup.FINDFIRST THEN BEGIN
        DoNotInvoiceFirstPeriodSC := ServiceSetup."Do not Invoice First Prd SC";
        InvoiceEntireLastPeriodSC := ServiceSetup."Invoice Entire Last Prd SC";
      END;

      IF ConsumptionRate."Start Date" < InvoiceStartDate THEN
        RateStartDate := InvoiceStartDate
      ELSE
        RateStartDate := ConsumptionRate."Start Date";

      IF (ConsumptionRate."End Date" > InvoiceEndDate) OR (ConsumptionRate."End Date" = 0D) THEN
        RateEndDate := InvoiceEndDate
      ELSE
        RateEndDate := ConsumptionRate."End Date";


      IF NOT GenericTempTable.GET
        (IServiceContract."No.",
        '',
        ConsumptionRate."Consumption Component Code",
        FORMAT(RateStartDate),
        FORMAT(ConsumptionComponent."Unit of Measure"),
        '') THEN BEGIN
        GenericTempTable.INIT;
        GenericTempTable."Key Code1" := IServiceContract."No.";
        GenericTempTable."Key Code2" := '';
        GenericTempTable."Key Code3" := ConsumptionRate."Consumption Component Code";
        GenericTempTable."Key Code4" := FORMAT(RateStartDate);
        GenericTempTable."Key Code5" := ConsumptionComponent."Unit of Measure";
        GenericTempTable.Code1 := ConsumptionRate."VAT Product Posting Group";
        ConsumptionComponent.GET(ConsumptionRate."Consumption Component Code");
        GenericTempTable.Text1 := 'standingcharge';
        GenericTempTable.Dec5 := GetNoOfPeriods(
          RateStartDate,
          RateEndDate,
          ConsumptionRate."Standing Charge Period",
          FirstFinalInvoice,
          LastFinalInvoice,
          DoNotInvoiceFirstPeriodSC,
          InvoiceEntireLastPeriodSC);
        GenericTempTable.Text2 := FORMAT(RateStartDate);
        GenericTempTable.Text3 := FORMAT(RateEndDate);
        GenericTempTable.Text4 := FORMAT(ConsumptionRate."Dimension Value");
        GenericTempTable.Text5 := FORMAT(ConsumptionComponent.Description);
        GenericTempTable.Dec4 := ConsumptionRate.Rate;
        GenericTempTable.INSERT;
      END;
    END;

    PROCEDURE SaveConsumptionCompToTempTable@1100528800(IServiceContract@1100528800 : Record 11012812;ContractObject@1100528801 : Record 11071702;ConsumptionComponent@1100528802 : Record 11071962);
    BEGIN
      IF NOT GenericTempTable.GET(IServiceContract."No.", ContractObject."Service Object No.", ConsumptionComponent.Code) THEN BEGIN
        GenericTempTable.INIT;
        GenericTempTable."Key Code1" := IServiceContract."No.";
        GenericTempTable."Key Code2" := ContractObject."Service Object No.";
        GenericTempTable."Key Code3" := ConsumptionComponent.Code;
        GenericTempTable."Key Code4" := 'objectcomponents';
        GenericTempTable.Text1       := 'objectcomponents';
        GenericTempTable.Text5       := ConsumptionComponent.Description;
        GenericTempTable.INSERT;
      END;
    END;

    PROCEDURE GetNoOfPeriods@1100525034(VAR IRateStartDate@1100525002 : Date;VAR IRateEndDate@1100525003 : Date;IDateFormula@1100528800 : DateFormula;FirstInvoice@1100525001 : Boolean;LastInvoice@1100528803 : Boolean;DoNotInvoiceFirstPeriod@1100528804 : Boolean;InvoiceEntireLastPeriod@1100528805 : Boolean) : Decimal;
    VAR
      Date@1100525006 : Record 2000000007;
      ChargePeriod@1100525009 : Text[10];
      NumberOfPeriods@1100525010 : Decimal;
      MinCurrentPeriod@1100528802 : Text;
      PlusCurrentPeriod@1100528806 : Text;
      PeriodType@1100528807 : Option;
    BEGIN
      ChargePeriod := FindPeriodType(IDateFormula);

      IF (ChargePeriod = 'D') THEN
        NumberOfPeriods := CalcNoOfDays(IRateStartDate, IRateEndDate);

      IF (ChargePeriod = 'W') THEN BEGIN
        MinCurrentPeriod := '<-CW>' ;
        PlusCurrentPeriod := '<CW>' ;
        PeriodType := Date."Period Type"::Week;
        NumberOfPeriods := CalcNoOfPeriods(
                             IRateStartDate,
                             IRateEndDate,
                             FirstInvoice,
                             LastInvoice,
                             DoNotInvoiceFirstPeriod,
                             InvoiceEntireLastPeriod,
                             MinCurrentPeriod,
                             PlusCurrentPeriod,
                             PeriodType);
      END;

      IF (ChargePeriod = 'M') THEN BEGIN
        MinCurrentPeriod := '<-CM>' ;
        PlusCurrentPeriod := '<CM>' ;
        PeriodType := Date."Period Type"::Month;
        NumberOfPeriods := CalcNoOfPeriods(
                             IRateStartDate,
                             IRateEndDate,
                             FirstInvoice,
                             LastInvoice,
                             DoNotInvoiceFirstPeriod,
                             InvoiceEntireLastPeriod,
                             MinCurrentPeriod,
                             PlusCurrentPeriod,
                             PeriodType);
      END;

      IF (ChargePeriod = 'Q') THEN BEGIN
        MinCurrentPeriod := '<-CQ>' ;
        PlusCurrentPeriod := '<CQ>' ;
        PeriodType := Date."Period Type"::Quarter;
        NumberOfPeriods := CalcNoOfPeriods(
                             IRateStartDate,
                             IRateEndDate,
                             FirstInvoice,
                             LastInvoice,
                             DoNotInvoiceFirstPeriod,
                             InvoiceEntireLastPeriod,
                             MinCurrentPeriod,
                             PlusCurrentPeriod,
                             PeriodType);
      END;

      IF (ChargePeriod = 'Y')THEN BEGIN
        MinCurrentPeriod := '<-CY>' ;
        PlusCurrentPeriod := '<CY>' ;
        PeriodType := Date."Period Type"::Year;
        NumberOfPeriods := CalcNoOfPeriods(
                             IRateStartDate,
                             IRateEndDate,
                             FirstInvoice,
                             LastInvoice,
                             DoNotInvoiceFirstPeriod,
                             InvoiceEntireLastPeriod,
                             MinCurrentPeriod,
                             PlusCurrentPeriod,
                             PeriodType);
      END;

      EXIT(NumberOfPeriods);
    END;

    PROCEDURE CalcNoOfDays@1100528813(StartDate@1100528800 : Date;EndDate@1100528801 : Date) : Decimal;
    VAR
      Date@1100528802 : Record 2000000007;
    BEGIN
      Date.RESET;
      Date.SETRANGE("Period Type", Date."Period Type"::Date);
      Date.SETRANGE("Period Start", StartDate, EndDate);
      EXIT(Date.COUNT);
    END;

    PROCEDURE CalcNoOfPeriods@1100528814(VAR CountPeriodsStartDate@1100528805 : Date;VAR CountPeriodsEndDate@1100528804 : Date;FirstInvoice@1100528803 : Boolean;LastInvoice@1100528802 : Boolean;DoNotInvoiceFirstPeriod@1100528801 : Boolean;InvoiceEntireLastPeriod@1100528800 : Boolean;MinCurrentPeriod@1100528820 : Text;PlusCurrentPeriod@1100528821 : Text;PeriodType@1100528822 : Option) : Decimal;
    VAR
      Date@1100528819 : Record 2000000007;
      NumberOfPeriods@1100528818 : Integer;
      FirstPeriod@1100528817 : Decimal;
      MiddlePeriod@1100528816 : Integer;
      LastPeriod@1100528815 : Decimal;
      StartDateFirstPeriod@1100528814 : Date;
      EndDateFirstPeriod@1100528813 : Date;
      StartDateMiddlePeriod@1100528812 : Date;
      EndDateMiddlePeriod@1100528811 : Date;
      StartDateLastPeriod@1100528810 : Date;
      EndDateLastPeriod@1100528809 : Date;
      FirstDateFirstPeriod@1100528808 : Date;
      ShiftInvoiceStartDateBecauseFirstPeriodFree@1100528807 : Boolean;
      ShiftInvoiceEndDateBecauseLastPeriodFull@1100528806 : Boolean;
    BEGIN
      StartDateFirstPeriod := CountPeriodsStartDate;
      EndDateFirstPeriod := CALCDATE(PlusCurrentPeriod, StartDateFirstPeriod);
      EndDateLastPeriod := CountPeriodsEndDate;
      StartDateLastPeriod :=  CALCDATE(MinCurrentPeriod, CountPeriodsEndDate);
      // StartDateMiddlePeriod := CALCDATE('+1D', EndDateFirstPeriod);
      StartDateMiddlePeriod := CALCDATE('<+1D>', EndDateFirstPeriod);
      // EndDateMiddlePeriod :=  CALCDATE('-1D', StartDateLastPeriod);
      EndDateMiddlePeriod :=  CALCDATE('<-1D>', StartDateLastPeriod);
      FirstDateFirstPeriod := CALCDATE(MinCurrentPeriod, StartDateFirstPeriod);

      Date.RESET;
      Date.SETRANGE("Period Type", PeriodType);
      Date.SETRANGE("Period Start", CountPeriodsStartDate, CountPeriodsEndDate);
      NumberOfPeriods := Date.COUNT;
      IF StartDateFirstPeriod = FirstDateFirstPeriod THEN
        NumberOfPeriods := NumberOfPeriods -1;

      CASE NumberOfPeriods OF
        0: BEGIN
             EndDateFirstPeriod := CountPeriodsEndDate;
             FirstPeriod := CalcFirstPeriod(
                              StartDateFirstPeriod,
                              EndDateFirstPeriod,
                              FirstInvoice,
                              DoNotInvoiceFirstPeriod,
                              ShiftInvoiceStartDateBecauseFirstPeriodFree,
                              MinCurrentPeriod,
                              PlusCurrentPeriod);
           END;
        1: BEGIN
             FirstPeriod := CalcFirstPeriod(
                              StartDateFirstPeriod,
                              EndDateFirstPeriod,
                              FirstInvoice,
                              DoNotInvoiceFirstPeriod,
                              ShiftInvoiceStartDateBecauseFirstPeriodFree,
                              MinCurrentPeriod,
                              PlusCurrentPeriod);
             LastPeriod := CalcLastPeriod(
                              StartDateLastPeriod,
                              EndDateLastPeriod,
                              LastInvoice,
                              InvoiceEntireLastPeriod,
                              ShiftInvoiceEndDateBecauseLastPeriodFull,
                              MinCurrentPeriod,
                              PlusCurrentPeriod);
           END;
      ELSE
        FirstPeriod := CalcFirstPeriod(
                         StartDateFirstPeriod,
                         EndDateFirstPeriod,
                         FirstInvoice,
                         DoNotInvoiceFirstPeriod,
                         ShiftInvoiceStartDateBecauseFirstPeriodFree,
                         MinCurrentPeriod,
                         PlusCurrentPeriod);
        LastPeriod := CalcLastPeriod(
                        StartDateLastPeriod,
                        EndDateLastPeriod,
                        LastInvoice,
                        InvoiceEntireLastPeriod,
                        ShiftInvoiceEndDateBecauseLastPeriodFull,
                        MinCurrentPeriod,
                        PlusCurrentPeriod);
        MiddlePeriod := CalcMiddlePeriod(StartDateMiddlePeriod, EndDateMiddlePeriod, PeriodType);
      END;

      IF ShiftInvoiceStartDateBecauseFirstPeriodFree THEN
        CountPeriodsStartDate := StartDateMiddlePeriod;

      IF ShiftInvoiceEndDateBecauseLastPeriodFull THEN
        CountPeriodsEndDate := CALCDATE(PlusCurrentPeriod, CountPeriodsEndDate);

      EXIT(FirstPeriod + MiddlePeriod + LastPeriod);
    END;

    PROCEDURE CalcFirstPeriod@1100528812(StartDateFirstPeriod@1100528800 : Date;EndDateFirstPeriod@1100528801 : Date;FirstInvoice@1100528802 : Boolean;DoNotInvoiceFirstPeriod@1100528803 : Boolean;VAR ShiftInvoiceStartDateBecauseFirstPeriodFree@1100528807 : Boolean;MinCurrentPeriod@1100528808 : Text;PlusCurrentPeriod@1100528809 : Text) : Decimal;
    VAR
      Date@1100528805 : Record 2000000007;
      NumberOfDaysInPeriod@1100528804 : Integer;
      NumberOfDaysInFirstPeriod@1100528806 : Integer;
    BEGIN
      IF FirstInvoice AND DoNotInvoiceFirstPeriod THEN BEGIN
        ShiftInvoiceStartDateBecauseFirstPeriodFree := TRUE;
        EXIT(0);
      END;
      NumberOfDaysInPeriod := CountNumberOfDaysInPeriod(StartDateFirstPeriod, MinCurrentPeriod, PlusCurrentPeriod);

      Date.SETRANGE("Period Type", Date."Period Type"::Date);
      Date.SETRANGE("Period Start", StartDateFirstPeriod, EndDateFirstPeriod);
      NumberOfDaysInFirstPeriod := Date.COUNT;

      EXIT(NumberOfDaysInFirstPeriod/NumberOfDaysInPeriod);
    END;

    PROCEDURE CalcMiddlePeriod@1100528819(StartDateMiddlePeriod@1100528803 : Date;EndDateMiddlePeriod@1100528802 : Date;PeriodType@1100528804 : Option) : Integer;
    VAR
      Date@1100528800 : Record 2000000007;
      NumberOfPeriods@1100528801 : Integer;
    BEGIN
      Date.SETRANGE("Period Type", PeriodType);
      Date.SETRANGE("Period Start", StartDateMiddlePeriod, EndDateMiddlePeriod);
      NumberOfPeriods := Date.COUNT;

      EXIT(NumberOfPeriods);
    END;

    PROCEDURE CalcLastPeriod@1100528820(StartDateLastPeriod@1100528801 : Date;EndDateLastPeriod@1100528800 : Date;LastInvoice@1100528802 : Boolean;InvoiceEntireLastPeriod@1100528803 : Boolean;VAR ShiftInvoiceEndDateBecauseLastPeriodFull@1100528807 : Boolean;MinCurrentPeriod@1100528808 : Text;PlusCurrentPeriod@1100528809 : Text) : Decimal;
    VAR
      Date@1100528806 : Record 2000000007;
      NumberOfDaysInPeriod@1100528805 : Integer;
      NumberOfDaysInLastPeriod@1100528804 : Integer;
    BEGIN
      IF LastInvoice AND InvoiceEntireLastPeriod THEN BEGIN
        ShiftInvoiceEndDateBecauseLastPeriodFull := TRUE;
        EXIT(1);
      END;

      NumberOfDaysInPeriod := CountNumberOfDaysInPeriod(EndDateLastPeriod, MinCurrentPeriod, PlusCurrentPeriod);

      Date.SETRANGE("Period Type", Date."Period Type"::Date);
      Date.SETRANGE("Period Start", StartDateLastPeriod, EndDateLastPeriod);
      NumberOfDaysInLastPeriod := Date.COUNT;

      EXIT(NumberOfDaysInLastPeriod/NumberOfDaysInPeriod);
    END;

    PROCEDURE CountNumberOfDaysInPeriod@1100525010(IDate@1100525000 : Date;MinCurrentPeriod@1100528800 : Text;PlusCurrentPeriod@1100528801 : Text) : Integer;
    VAR
      Date@1100525003 : Record 2000000007;
      FirstDateOfPeriod@1100525002 : Date;
      LastDateOfPeriod@1100525001 : Date;
    BEGIN
      FirstDateOfPeriod := CALCDATE (MinCurrentPeriod, IDate);
      LastDateOfPeriod := CALCDATE(PlusCurrentPeriod, IDate);

      Date.RESET;
      Date.SETRANGE("Period Type", Date."Period Type"::Date);
      Date.SETRANGE("Period Start", FirstDateOfPeriod, LastDateOfPeriod);
      EXIT(Date.COUNT);
    END;

    PROCEDURE FindPayments@1100525002(IServiceContract@1100525000 : Record 11012812;AdvPaymentsInDetail@1100528801 : Boolean);
    VAR
      SalesInvoiceLine@1100525002 : Record 113;
    BEGIN
      SalesInvoiceLine.SETCURRENTKEY("Service Contract No.","Service Order No.");
      SalesInvoiceLine.SETRANGE("Service Contract No.", IServiceContract."No.");
      SalesInvoiceLine.SETRANGE("Posting Date", InvoiceStartDate, InvoiceEndDate);
      SalesInvoiceLine.SETFILTER("Installment Line No.", '<>%1', 0);
      IF SalesInvoiceLine.FINDSET THEN BEGIN
        REPEAT
          GenericTempTable.INIT;
          GenericTempTable."Key Code1" := IServiceContract."No.";
          GenericTempTable."Key Code2" := SalesInvoiceLine."VAT Prod. Posting Group";
          GenericTempTable."Key Code3" := 'advpayment';
          GenericTempTable."Key Code4" := FORMAT(SalesInvoiceLine."Posting Date");
          GenericTempTable."Key Code5" := FORMAT(SalesInvoiceLine."Line No.");
          GenericTempTable."Key Code6" := SalesInvoiceLine."Document No.";
          GenericTempTable.Code1 := SalesInvoiceLine."VAT Prod. Posting Group";
          GenericTempTable.Text5 := Text016 + ' ' + SalesInvoiceLine."Document No.";
          GenericTempTable.Text1 := 'advpayment';
          GenericTempTable.Text2 := SalesInvoiceLine."Description 2";
          GenericTempTable.Text4 := SalesInvoiceLine."Shortcut Dimension 2 Code";
          GenericTempTable.Dec5 := -SalesInvoiceLine.Amount;
          GenericTempTable.Dec6 := -SalesInvoiceLine."Amount Including VAT";
          GenericTempTable.Dec7 := SalesInvoiceLine."VAT %";
          GenericTempTable.INSERT;
        UNTIL SalesInvoiceLine.NEXT = 0;
      END;
      GenericTempTable.RESET;

      IF NOT AdvPaymentsInDetail THEN
        CalcTotalAdvPayments(IServiceContract, TRUE);
    END;

    PROCEDURE CalcTotalAdvPayments@1100528821(iServiceContract@1100528800 : Record 11012812;DeleteDetailsAndSaveTotal@1100528803 : Boolean) : Decimal;
    VAR
      ServiceSetup@1100528809 : Record 11012800;
      SalesReceivablesSetup@1100528810 : Record 311;
      NumberOfPayments@1100528801 : Integer;
      TotalAmtAdvPayments@1100528802 : Decimal;
      TempVatCode@1100528804 : TEMPORARY Record 11020579;
      TotalAmtPerVatCode@1100528805 : Decimal;
      TotalAmtInclVATPerVatCode@1100528808 : Decimal;
      Dimension2Code@1100528807 : Code[20];
    BEGIN
      ServiceSetup.GET;
      SalesReceivablesSetup.GET;

      GenericTempTable.SETRANGE("Key Code1", iServiceContract."No.");
      GenericTempTable.SETRANGE(Text1, 'advpayment');
      IF GenericTempTable.FINDSET THEN
        REPEAT
          IF NOT TempVatCode.GET(GenericTempTable."Key Code2", 'vatcode','','','','') THEN BEGIN
            TempVatCode.INIT;
            TempVatCode."Key Code1" := GenericTempTable."Key Code2";
            TempVatCode."Key Code2" := 'vatcode';
            TempVatCode.Dec1 := GenericTempTable.Dec7;
            TempVatCode.INSERT;
          END;
        UNTIL GenericTempTable.NEXT=0;

      GenericTempTable.RESET;

      TempVatCode.SETRANGE("Key Code2", 'vatcode');
      IF TempVatCode.FINDSET THEN
        REPEAT
          GenericTempTable.SETRANGE("Key Code1", iServiceContract."No.");
          GenericTempTable.SETRANGE(Text1, 'advpayment');
          GenericTempTable.SETRANGE("Key Code2", TempVatCode."Key Code1");
          NumberOfPayments := GenericTempTable.COUNT;
          IF GenericTempTable.FINDSET THEN
            REPEAT
              IF ServiceSetup."Recalculate Advance Payments" AND SalesReceivablesSetup."Allow VAT Difference" THEN
                TotalAmtInclVATPerVatCode := TotalAmtInclVATPerVatCode + GenericTempTable.Dec6
              ELSE
                TotalAmtPerVatCode := TotalAmtPerVatCode + GenericTempTable.Dec5;
              Dimension2Code := GenericTempTable.Text4;
              IF DeleteDetailsAndSaveTotal THEN
                GenericTempTable.DELETE;
            UNTIL GenericTempTable.NEXT = 0;
          IF DeleteDetailsAndSaveTotal THEN BEGIN
            GenericTempTable.INIT;
            GenericTempTable."Key Code1" := iServiceContract."No.";
            GenericTempTable."Key Code3" := 'advpayment';
            GenericTempTable.Text5 := Text014 + ' ' + FORMAT(InvoiceStartDate) + ' ' + Text015 + ' ' + FORMAT(InvoiceEndDate);
            GenericTempTable.Text1 := 'advpayment';
            GenericTempTable.Text4 := Dimension2Code;
            GenericTempTable.Code1 := TempVatCode."Key Code1";
            GenericTempTable.Dec3 := NumberOfPayments;

            IF ServiceSetup."Recalculate Advance Payments" AND SalesReceivablesSetup."Allow VAT Difference" THEN
              GenericTempTable.Dec5 := CalcTotalAmtExclVATPerVatCodeBasedOnInclVAT(TotalAmtInclVATPerVatCode, TempVatCode.Dec1)
            ELSE
              GenericTempTable.Dec5 := TotalAmtPerVatCode;

            GenericTempTable.INSERT;
            TotalAmtPerVatCode := 0;
          END;
        UNTIL TempVatCode.NEXT = 0;

      GenericTempTable.RESET;

      IF NOT DeleteDetailsAndSaveTotal THEN
        EXIT(TotalAmtAdvPayments);
    END;

    PROCEDURE CalcTotalAmtExclVATPerVatCodeBasedOnInclVAT@1100528818(TotalAmtInclVATPerVatCode@1100528800 : Decimal;VATPercentage@1100528801 : Decimal) : Decimal;
    VAR
      DivideValue@1100528802 : Decimal;
    BEGIN
      DivideValue := 100 + VATPercentage;
      EXIT(ROUND((TotalAmtInclVATPerVatCode - ((TotalAmtInclVATPerVatCode / DivideValue) * VATPercentage)),0.01,'='));
    END;

    PROCEDURE CreateConsumptionInvLine@1100528804(IServiceContract@1100528800 : Record 11012812;VAR SumStandingChargeAndConsumption@1100528802 : Decimal);
    VAR
      ConsumptionComponent@1100528801 : Record 11071962;
    BEGIN
      GenericTempTable.SETRANGE("Key Code1", IServiceContract."No.");
      GenericTempTable.SETRANGE(Text1, 'consumption');
      IF GenericTempTable.FINDSET THEN BEGIN
        REPEAT
          WITH TempSalesLineRec DO BEGIN
            ConsumptionComponent.GET(GenericTempTable."Key Code3");
            "Document No." := '9999999999';
            "Line No." := LineCounter;
            "Service Invoice" := TRUE;
            "Installment Invoice" := FALSE;
            Type := Type::"G/L Account";
            "Service Contract No." := IServiceContract."No.";
            "Object No." := GenericTempTable."Key Code2";
            Description := GenericTempTable.Text5;
            "Description 2" := GenericTempTable.Text2 + ' ' + Text015 + ' ' + GenericTempTable.Text3;
            Text := Text019 + ' ' + '(' + GenericTempTable."Key Code2" + ')' + ' ' + FORMAT(GenericTempTable.Dec1) + ' ' + '-' + ' ' + FORMAT(GenericTempTable.Dec2);
            "Text Block" := TRUE;
            "Unit Price" := GenericTempTable.Dec4;
            Quantity := GenericTempTable.Dec3;
            "Currency Code" := GetContractCurrency(IServiceContract."No."); // dp00116.n
            "Unit of Measure Code" := ConsumptionComponent."Unit of Measure";
            "Unit of Measure" := ConsumptionComponent."Unit of Measure";
            "Line Amount" := "Unit Price" * Quantity;
            "VAT Prod. Posting Group" := GenericTempTable.Code1;
            "Shortcut Dimension 2 Code" := GenericTempTable.Text4;
            INSERT;

            SumStandingChargeAndConsumption := SumStandingChargeAndConsumption + "Line Amount";

          END;
        UNTIL GenericTempTable.NEXT = 0;
      END;

      GenericTempTable.RESET;
      TempSalesLineRec.RESET;
    END;

    PROCEDURE CreateStandingChargeInvLine@1100528803(IServiceContract@1100528800 : Record 11012812;VAR SumStandingChargeAndConsumption@1100528802 : Decimal);
    VAR
      ConsumptionComponent@1100528803 : Record 11071962;
    BEGIN
      GenericTempTable.SETRANGE("Key Code1", IServiceContract."No.");
      GenericTempTable.SETRANGE(Text1, 'standingcharge');
      IF GenericTempTable.FINDSET THEN BEGIN
        REPEAT
          WITH TempSalesLineRec DO BEGIN
            ConsumptionComponent.GET(GenericTempTable."Key Code3");
            "Document No." := '9999999999';
            "Line No." := LineCounter;
            "Service Invoice" := TRUE;
            "Installment Invoice" := FALSE;
            Type := Type::"G/L Account";
            "Service Contract No." := IServiceContract."No.";
            "Object No." := GenericTempTable."Key Code2";
            Description := GenericTempTable.Text5;
            "Description 2" := GenericTempTable.Text2 + ' ' + Text015 + ' ' + GenericTempTable.Text3;
            "Unit Price" := GenericTempTable.Dec4;
            Text := '';
            "Text Block" := FALSE;
            Quantity := ROUND(GenericTempTable.Dec5, ConsumptionComponent."Quantity Rounding Precision" ,'=');
            "Currency Code" := GetContractCurrency(IServiceContract."No."); // dp00116.n
            "Unit of Measure Code" := ConsumptionComponent."Unit of Measure";
            "Unit of Measure" := ConsumptionComponent."Unit of Measure";
            "Line Amount" := "Unit Price" * Quantity;
            "VAT Prod. Posting Group" := GenericTempTable.Code1;
            "Shortcut Dimension 2 Code" := GenericTempTable.Text4;
            INSERT;

            SumStandingChargeAndConsumption := SumStandingChargeAndConsumption + "Line Amount";

          END;
        UNTIL GenericTempTable.NEXT = 0;
      END;

      GenericTempTable.RESET;
      TempSalesLineRec.RESET;
    END;

    PROCEDURE CreateAdvPaymentInvLine@1100528806(IServiceContract@1100528800 : Record 11012812;AdvPaymentsInDetail@1100528801 : Boolean);
    BEGIN
      GenericTempTable.SETRANGE("Key Code1", IServiceContract."No.");
      GenericTempTable.SETRANGE(Text1, 'advpayment');
      IF GenericTempTable.FINDSET THEN BEGIN
        REPEAT
          WITH TempSalesLineRec DO BEGIN
            "Document No." := '9999999999';
            "Line No." := LineCounter;
            "Service Invoice" := TRUE;
            "Installment Invoice" := FALSE;
            Type := Type::"G/L Account";
            "Service Contract No." := IServiceContract."No.";
            "Unit of Measure" := '';
            Description := GenericTempTable.Text5;
            "Description 2" := GenericTempTable.Text2;
            Text := '';
            "Text Block" := FALSE;
            "Unit Price" := GenericTempTable.Dec5;
            Quantity := 1;
            "Currency Code" := GetContractCurrency(IServiceContract."No."); // dp00116.n
            "Line Amount" := "Unit Price" * Quantity;
            "VAT Prod. Posting Group" := GenericTempTable.Code1;
            "Shortcut Dimension 2 Code" := GenericTempTable.Text4;
            INSERT;
          END;
        UNTIL GenericTempTable.NEXT = 0;
      END;

      GenericTempTable.RESET;
      TempSalesLineRec.RESET;
    END;

    PROCEDURE SetNewInstallmentAmount@1100528801(IServiceContract@1100528800 : Record 11012812;AdvPaymentsInDetail@1100528811 : Boolean;SumStandingChargeAndConsumption@1100528806 : Decimal);
    VAR
      Date@1100528808 : Record 2000000007;
      ContractAmountsByDate@1100528809 : Record 11071708;
      ContractInstallment@1100528803 : Record 11071707;
      ConsumpAndStandChargePerDay@1100528810 : Decimal;
      NoOfDaysInvoice@1100528807 : Integer;
      NewInstallmentAmount@1100528814 : Decimal;
      MaintenanceManagement@1100528816 : Codeunit 11012829;
      InstallmentInterval@1100528817 : Decimal;
    BEGIN
      //TotalAmtAdvPayments := CalcTotalAdvPayments(IServiceContract, FALSE);
      //IsCreditMemo := TotalConsumptionAndStandingCharge + TotalAmtAdvPayments < 0;
      Date.RESET;
      Date.SETRANGE("Period Type", Date."Period Type"::Date);
      Date.SETRANGE("Period Start", InvoiceStartDate, InvoiceEndDate);
      NoOfDaysInvoice := Date.COUNT;

      ContractInstallment.SETRANGE("Service Contract No.", IServiceContract."No.");
      ContractInstallment.SETFILTER("Invoice From", '<=%1', InvoiceEndDate+1);
      ContractInstallment.SETFILTER("Ending Date", '>=%1|%2', InvoiceEndDate+1, 0D);
      IF ContractInstallment.FINDFIRST THEN
        InstallmentInterval :=MaintenanceManagement.ConvPeriodToTimesPerYear(ContractInstallment."Invoice Interval");
      IF InstallmentInterval = 0 THEN
        EXIT;

      ConsumpAndStandChargePerDay := SumStandingChargeAndConsumption / NoOfDaysInvoice;
      NewInstallmentAmount := (ConsumpAndStandChargePerDay * 365) / InstallmentInterval;

      ContractInstallment.SETRANGE("Service Contract No.", IServiceContract."No.");
      ContractInstallment.SETFILTER("Invoice From", '<=%1',InvoiceEndDate+1);
      ContractInstallment.SETFILTER("Ending Date", '>=%1|%2', InvoiceEndDate+1, 0D);

      IF ContractInstallment.FINDFIRST THEN BEGIN
        ContractAmountsByDate.INIT;
        ContractAmountsByDate.Type := ContractAmountsByDate.Type::Installment;
        ContractAmountsByDate."Service Contract No." := ContractInstallment."Service Contract No.";
        ContractAmountsByDate."Installment Line No." := ContractInstallment."Line No.";
        ContractAmountsByDate."Index Date" := InvoiceEndDate+1;
        ContractAmountsByDate.VALIDATE("Amount (LCY)", ROUND(NewInstallmentAmount,1,'='));
        ContractAmountsByDate.INSERT(TRUE);
      END;
    END;

    PROCEDURE CalcTotalAmtConsumptionAndStandingCharge@1100528831(IServiceContract@1100528800 : Record 11012812) : Decimal;
    VAR
      TotalAmtConsumptionAndStandingCharge@1100528801 : Decimal;
    BEGIN
      GenericTempTable.SETRANGE("Key Code1", IServiceContract."No.");
      GenericTempTable.SETFILTER(Text1,'%1|%2','consumption','standingcharge');
      IF GenericTempTable.FINDSET THEN BEGIN
        REPEAT
          TotalAmtConsumptionAndStandingCharge := TotalAmtConsumptionAndStandingCharge + GenericTempTable.Dec5;
        UNTIL GenericTempTable.NEXT = 0;
        EXIT(TotalAmtConsumptionAndStandingCharge);
      END;

      GenericTempTable.RESET;
    END;

    PROCEDURE SetNewSrvContractInvoicedUntil@1100528802(IServiceContract@1100528800 : Record 11012812);
    BEGIN
      IServiceContract."Last Invoiced Until" := IServiceContract."Invoiced Until";
      IServiceContract."Invoiced Until" := InvoiceEndDate;
      IServiceContract.MODIFY;
    END;

    PROCEDURE GetConsumptionComponentsByObject@1100528807(IObjectNo@1100528800 : Code[20];VAR ConsumptionComponent@1100528801 : Record 11071962);
    VAR
      ServiceObject@1100528803 : Record 11071691;
      StandardObject@1100528804 : Record 11020334;
      ObjectConsumptionComp@1100528802 : Record 11071969;
    BEGIN
      ObjectConsumptionComp.SETRANGE("Object No.", IObjectNo);
      IF ObjectConsumptionComp.FINDSET THEN
        REPEAT
          ConsumptionComponent.GET(ObjectConsumptionComp."Consumption Component Code");
          ConsumptionComponent.MARK(TRUE);
        UNTIL ObjectConsumptionComp.NEXT = 0;
      //components for standard object
      ObjectConsumptionComp.SETRANGE("Object No.");
      ServiceObject.GET(IObjectNo);
      ObjectConsumptionComp.SETRANGE("Standard Object",ServiceObject."Standard Object No.");
      IF ObjectConsumptionComp.FINDSET THEN
        REPEAT
          ConsumptionComponent.GET(ObjectConsumptionComp."Consumption Component Code");
          ConsumptionComponent.MARK(TRUE);
        UNTIL ObjectConsumptionComp.NEXT = 0;

      //components for standard object group
      ObjectConsumptionComp.SETRANGE("Standard Object");
      IF StandardObject.GET(ServiceObject."Standard Object No.") THEN BEGIN
        ObjectConsumptionComp.SETRANGE("Service Object Group", StandardObject."Object Group");
        IF ObjectConsumptionComp.FINDSET THEN
          REPEAT
            ConsumptionComponent.GET(ObjectConsumptionComp."Consumption Component Code");
            ConsumptionComponent.MARK(TRUE);
          UNTIL ObjectConsumptionComp.NEXT = 0;
      END;

      //components for default
      ObjectConsumptionComp.SETRANGE("Service Object Group");
      ObjectConsumptionComp.SETRANGE("Service Object Group", '');
      ObjectConsumptionComp.SETRANGE("Object No.", '');
      ObjectConsumptionComp.SETRANGE("Standard Object", '');
      IF ObjectConsumptionComp.FINDSET THEN
        REPEAT
         ConsumptionComponent.GET(ObjectConsumptionComp."Consumption Component Code");
         ConsumptionComponent.MARK(TRUE);
        UNTIL ObjectConsumptionComp.NEXT = 0;

         ConsumptionComponent.MARKEDONLY(TRUE);
    END;

    PROCEDURE GetMeterReading@1100528809(MeterReadingDate@1100528800 : Date;ObjectNo@1100528801 : Code[20];ConsumptionComponentCode@1100528802 : Code[20]) : Decimal;
    VAR
      MeterReading@1100528803 : Record 11071971;
      ServiceSetup@1100528804 : Record 11012800;
    BEGIN
      IF MeterReading.GET(ObjectNo, ConsumptionComponentCode, MeterReadingDate) THEN
        EXIT(MeterReading."Meter Reading")
      ELSE
        ServiceSetup.FINDFIRST;
        IF ServiceSetup."Allow Inter- and Extrapolation" THEN BEGIN
          MeterReading.RESET;
          MeterReading.SETRANGE("Object No.", ObjectNo);
          MeterReading.SETRANGE("Consumption Component Code", ConsumptionComponentCode);
          MeterReading.SETFILTER("Reading Date", '>%1', MeterReadingDate);
          IF MeterReading.ISEMPTY THEN
            EXIT(GetMeterReadingByExtrapolation(MeterReadingDate, ObjectNo, ConsumptionComponentCode))
          ELSE
            EXIT(GetMeterReadingByInterpolation(MeterReadingDate, ObjectNo, ConsumptionComponentCode));
        END ELSE
          ERROR(Text018, ObjectNo, MeterReadingDate);
    END;

    PROCEDURE GetMeterReadingByInterpolation@1100528810(InterpolationDate@1100528800 : Date;ObjectNo@1100528801 : Code[20];ConsumptionComponentCode@1100528802 : Code[20]) : Decimal;
    VAR
      Date@1100528808 : Record 2000000007;
      MeterReading@1100528803 : Record 11071971;
      ConsumptionComponent@1100528814 : Record 11071962;
      DateBefore@1100528804 : Date;
      MeterReadingBefore@1100528805 : Decimal;
      DateAfter@1100528806 : Date;
      MeterReadingAfter@1100528807 : Decimal;
      NoOfDaysInPeriod@1100528809 : Integer;
      NoOfDaysToInterpolationDate@1100528810 : Integer;
      ConsumptionInPeriod@1100528811 : Decimal;
      ConsumptionPerDayInPeriod@1100528812 : Decimal;
      InterpolatedConsumption@1100528813 : Decimal;
      ConsumptionComponentRounding@1100528815 : Decimal;
    BEGIN
      MeterReading.SETRANGE("Object No.", ObjectNo);
      MeterReading.SETRANGE("Consumption Component Code", ConsumptionComponentCode);
      MeterReading.SETFILTER("Reading Date", '<%1', InterpolationDate);
      IF MeterReading.FINDLAST THEN BEGIN
        DateBefore := MeterReading."Reading Date";
        MeterReadingBefore := MeterReading."Meter Reading";
      END ELSE
        ERROR(Text020, ConsumptionComponentCode, ObjectNo);

      MeterReading.SETFILTER("Reading Date", '>%1', InterpolationDate);
      IF MeterReading.FINDFIRST THEN BEGIN
        DateAfter := MeterReading."Reading Date";
        MeterReadingAfter := MeterReading."Meter Reading";
      END ELSE
        ERROR(Text020, ConsumptionComponentCode, ObjectNo);

      Date.RESET;
      Date.SETRANGE("Period Type", Date."Period Type"::Date);
      Date.SETRANGE("Period Start", DateBefore, DateAfter);
      NoOfDaysInPeriod := Date.COUNT-1;

      Date.RESET;
      Date.SETRANGE("Period Type", Date."Period Type"::Date);
      Date.SETRANGE("Period Start", DateBefore, InterpolationDate);
      NoOfDaysToInterpolationDate := Date.COUNT-1;

      ConsumptionComponent.GET(ConsumptionComponentCode);
      ConsumptionComponentRounding := ConsumptionComponent."Quantity Rounding Precision";

      ConsumptionInPeriod := MeterReadingAfter - MeterReadingBefore;
      ConsumptionPerDayInPeriod := ConsumptionInPeriod / NoOfDaysInPeriod;
      InterpolatedConsumption := ROUND(MeterReadingBefore + (ConsumptionPerDayInPeriod * NoOfDaysToInterpolationDate),ConsumptionComponentRounding,'=');
      EXIT(InterpolatedConsumption);
    END;

    PROCEDURE GetMeterReadingByExtrapolation@1100528811(ExtrapolationDate@1100528800 : Date;ObjectNo@1100528801 : Code[20];ConsumptionComponentCode@1100528802 : Code[20]) : Decimal;
    VAR
      Date@1100528813 : Record 2000000007;
      MeterReading@1100528812 : Record 11071971;
      ConsumptionComponent@1100528814 : Record 11071962;
      FirstDateBefore@1100528811 : Date;
      FirstMeterReadingBefore@1100528810 : Decimal;
      SecondDateBefore@1100528809 : Date;
      SecondMeterReadingBefore@1100528808 : Decimal;
      NoOfDaysInPeriod@1100528807 : Integer;
      NoOfDaysToExtrapolationDate@1100528806 : Integer;
      ConsumptionInPeriod@1100528805 : Decimal;
      ConsumptionPerDayInPeriod@1100528804 : Decimal;
      ExtrapolatedConsumption@1100528803 : Decimal;
      ConsumptionComponentRounding@1100528815 : Decimal;
    BEGIN
      MeterReading.SETRANGE("Object No.", ObjectNo);
      MeterReading.SETRANGE("Consumption Component Code", ConsumptionComponentCode);
      MeterReading.SETFILTER("Reading Date", '<%1', ExtrapolationDate);
      IF MeterReading.FINDLAST THEN BEGIN
        FirstDateBefore := MeterReading."Reading Date";
        FirstMeterReadingBefore := MeterReading."Meter Reading";
      END ELSE
        ERROR(Text020, ConsumptionComponentCode, ObjectNo);

      MeterReading.SETFILTER("Reading Date", '<%1', FirstDateBefore);
      IF MeterReading.FINDLAST THEN BEGIN
        SecondDateBefore := MeterReading."Reading Date";
        SecondMeterReadingBefore := MeterReading."Meter Reading";
      END ELSE
        ERROR(Text020, ConsumptionComponentCode, ObjectNo);

      Date.RESET;
      Date.SETRANGE("Period Type", Date."Period Type"::Date);
      Date.SETRANGE("Period Start", SecondDateBefore, FirstDateBefore);
      NoOfDaysInPeriod := Date.COUNT-1;

      Date.RESET;
      Date.SETRANGE("Period Type", Date."Period Type"::Date);
      Date.SETRANGE("Period Start", FirstDateBefore, ExtrapolationDate);
      NoOfDaysToExtrapolationDate := Date.COUNT-1;

      ConsumptionComponent.GET(ConsumptionComponentCode);
      ConsumptionComponentRounding := ConsumptionComponent."Quantity Rounding Precision";

      ConsumptionInPeriod := FirstMeterReadingBefore - SecondMeterReadingBefore;
      ConsumptionPerDayInPeriod := ConsumptionInPeriod / NoOfDaysInPeriod;
      ExtrapolatedConsumption := ROUND(FirstMeterReadingBefore + (ConsumptionPerDayInPeriod * NoOfDaysToExtrapolationDate),ConsumptionComponentRounding,'=');
      EXIT(ExtrapolatedConsumption);
    END;

    PROCEDURE FindPeriodType@1100525000(IDateFormula@1100525012 : DateFormula) : Text[1];
    VAR
      DateFormulaDay@1100525000 : DateFormula;
      DateFormulaDayText@1100525001 : Text;
      DateFormulaWeek@1100525003 : DateFormula;
      DateFormulaWeekText@1100525002 : Text;
      DateFormulaMonth@1100525005 : DateFormula;
      DateFormulaMonthText@1100525004 : Text;
      DateFormulaQuarter@1100525007 : DateFormula;
      DateFormulaQuarterText@1100525006 : Text;
      DateFormulaYear@1100525009 : DateFormula;
      DateFormulaYearText@1100525008 : Text;
      NormalizedDateFormulaText@1100525011 : Text;
    BEGIN
      EVALUATE(DateFormulaDay,'<1D>');
      EVALUATE(DateFormulaWeek,'<1W>');
      EVALUATE(DateFormulaMonth,'<1M>');
      EVALUATE(DateFormulaQuarter,'<1Q>');
      EVALUATE(DateFormulaYear,'<1Y>');

      DateFormulaDayText := FORMAT(DateFormulaDay);
      DateFormulaWeekText := FORMAT(DateFormulaWeek);
      DateFormulaMonthText := FORMAT(DateFormulaMonth);
      DateFormulaQuarterText := FORMAT(DateFormulaQuarter);
      DateFormulaYearText := FORMAT(DateFormulaYear);

      NormalizedDateFormulaText := '1' + COPYSTR(FORMAT(IDateFormula), STRLEN(FORMAT(IDateFormula)), 1);

      IF NormalizedDateFormulaText = DateFormulaDayText THEN
        EXIT('D');

      IF NormalizedDateFormulaText = DateFormulaWeekText THEN
        EXIT('W');

      IF NormalizedDateFormulaText = DateFormulaMonthText THEN
        EXIT('M');

      IF NormalizedDateFormulaText = DateFormulaQuarterText THEN
        EXIT('Q');

      IF NormalizedDateFormulaText = DateFormulaYearText THEN
        EXIT('Y');
    END;

    BEGIN
    {
      190722 ORANGO.DL #25132 wrong in calcdate, expexted ENU
    }
    END.
  }
}

