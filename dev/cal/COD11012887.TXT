OBJECT Codeunit 11012887 Installment Overview Mgt. (PB)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1100528600 : TextConst 'DEU=Fortschritt:\Erste Elemente: @1@@@@@\Nicht codierte Elemente: @2@@@@@\ZusÑtzliche Angaben: @3@@@@@\Administrative Elemente: @4@@@@@\Zuschlagszeilen: @5@@@@@;ENU=Progress:\Initial Elements: @1@@@@@\Uncoded Elements: @2@@@@@\Additional Declarations: @3@@@@@\Administrative Elements: @4@@@@@\Surcharge Lines: @5@@@@@;NLD=Voortgang:\Initiâle posten: @1@@@@@\Ongecodeerde posten: @2@@@@@\Extra declaraties: @3@@@@@\Administratieve posten: @4@@@@@\Toeslagen: @5@@@@@';
      TmpSUPProductionLine@1100528605 : TEMPORARY Record 11071774;
      TmpServiceOrderCostPlusEntry@1100528606 : TEMPORARY Record 11012825;
      ProgressDialog@1100528601 : Dialog;
      Text001@1100528602 : TextConst 'DEU=Rechnung %1 erstellt;ENU=Invoice %1 created;NLD=Factuur %1 aangemaakt';
      Text002@1100528603 : TextConst 'DEU=Gesamtbetrag der RatenzahlungsÅbersicht ist %1, nichts zu fakturieren;ENU=Total Amount of Installment Overview is %1, nothing to invoice;NLD=Totaal van de termijnstaten is %1, niets te factureren';
      Text003@1100528604 : TextConst 'DEU=%1 %2 des Serviceauftrags %3 wird bereits unter Serviceauftrag %4 verwendet, verwenden Sie einen anderen %1.;ENU=%1 %2 of Service Order %3 already used at Service Order %4, use another %1.;NLD=%1 %2 van serviceorder %3 reeds eerder gebruikt bij serviceorder %4, gebruik een ander %1.';

    PROCEDURE CreateInstallmentCollectionOverview@1100528621(IPriceBookCode@1100528600 : Code[20];IPriceBookIndexDate@1100528601 : Date;IServiceContractNo@1100528602 : Code[20];IServiceOrderNo@1100528603 : Code[20]) : Code[20];
    VAR
      PBInstallCollectOverview@1100528604 : Record 11072319;
    BEGIN
      PBInstallCollectOverview.INSERT(TRUE);
      CASE TRUE OF
        (IServiceOrderNo <> '') AND (IServiceOrderNo <> ''''''):
          BEGIN
            PBInstallCollectOverview.VALIDATE("Service Order No.", IServiceOrderNo);
            PBInstallCollectOverview.MODIFY(TRUE);
          END;
        IServiceContractNo <> '':
          BEGIN
            PBInstallCollectOverview.VALIDATE("Service Contract No.", IServiceContractNo);
            PBInstallCollectOverview.MODIFY(TRUE);
          END;
        (IPriceBookCode <> '') AND (IPriceBookIndexDate <> 0D):
          BEGIN
            PBInstallCollectOverview.VALIDATE("Price Book Code", IPriceBookCode);
            PBInstallCollectOverview.VALIDATE("Price Book Index Date", IPriceBookIndexDate);
            PBInstallCollectOverview.MODIFY(TRUE);
          END;
      END;
      EXIT(PBInstallCollectOverview."No.");
    END;

    PROCEDURE CreateInstallmentOverview@1100528617(IPriceBookCode@1100528600 : Code[20];IPriceBookIndexDate@1100528601 : Date;IServiceContractNo@1100528602 : Code[20];IServiceOrderNo@1100528603 : Code[20];VAR OPBInstallmentOverview@1100528605 : Record 11072317) : Code[20];
    BEGIN
      OPBInstallmentOverview.INSERT(TRUE);
      CASE TRUE OF
        (IServiceOrderNo <> '') AND (IServiceOrderNo <> ''''''):
          BEGIN
            OPBInstallmentOverview.VALIDATE("Service Order No.", IServiceOrderNo);
            OPBInstallmentOverview.MODIFY(TRUE);
          END;
        IServiceContractNo <> '':
          BEGIN
            OPBInstallmentOverview.VALIDATE("Service Contract No.", IServiceContractNo);
            OPBInstallmentOverview.MODIFY(TRUE);
          END;
        (IPriceBookCode <> '') AND (IPriceBookIndexDate <> 0D):
          BEGIN
            OPBInstallmentOverview.VALIDATE("Price Book Code", IPriceBookCode);
            OPBInstallmentOverview.VALIDATE("Price Book Index Date", IPriceBookIndexDate);
            OPBInstallmentOverview.MODIFY(TRUE);
          END;
      END;
      EXIT(OPBInstallmentOverview."No.");
    END;

    PROCEDURE CreateInstallmentOverviews@1100528616(IServiceContractNo@1100528600 : Code[20];IUntilDate@1100528601 : Date;ISuppressNullLines@1100528606 : Boolean;IInitStartingDate@1100528605 : Date;IInitPeriod@1100528608 : DateFormula) : Integer;
    VAR
      PBInstallmentOverview@1100528602 : Record 11072317;
      ServiceOrder@1100528604 : Record 11012823;
      PBInstallmentOverviewNo@1100528603 : Code[20];
      NoOfOverviewsCreated@1100528607 : Integer;
    BEGIN
      PBInstallmentOverview.VALIDATE("Service Contract No.", IServiceContractNo);
      IF PBInstallmentOverview."Starting Date" = 0D THEN
        PBInstallmentOverview.VALIDATE("Starting Date", IInitStartingDate);
      IF FORMAT(PBInstallmentOverview.Period) = '' THEN
        PBInstallmentOverview.VALIDATE(Period, IInitPeriod);
      REPEAT
        IF PBInstallmentOverview."Starting Date" < IUntilDate THEN BEGIN
          PBInstallmentOverviewNo := CreateInstallmentOverview('', 0D, IServiceContractNo, '', PBInstallmentOverview);
          NoOfOverviewsCreated += 1;
          IF PBInstallmentOverview.GET(PBInstallmentOverviewNo) THEN
            IF (PBInstallmentOverview."Starting Date" <> 0D) AND (FORMAT(PBInstallmentOverview.Period) <> '') AND (PBInstallmentOverview."Ending Date" <> 0D) THEN
              CreateInstallmentOverviewLines(PBInstallmentOverview, ISuppressNullLines);
          CLEAR(PBInstallmentOverview);
          PBInstallmentOverview.VALIDATE("Service Contract No.", IServiceContractNo);
        END;
      UNTIL (PBInstallmentOverview."Starting Date" = 0D) OR (PBInstallmentOverview."Starting Date" > IUntilDate);

      ServiceOrder.SETCURRENTKEY("Service Contract No.");
      ServiceOrder.SETRANGE("Service Contract No.", IServiceContractNo);
      ServiceOrder.SETFILTER(Status, '<%1', ServiceOrder.Status::"Administrative Finished");
      ServiceOrder.SETRANGE("Settlement Method", ServiceOrder."Settlement Method"::"Installment Overview by Service Order");
      ServiceOrder.SETRANGE("Base Service Order", TRUE);
      IF ServiceOrder.FINDSET THEN
        REPEAT
          CLEAR(PBInstallmentOverview);
          PBInstallmentOverview.VALIDATE("Service Order No.", ServiceOrder."No.");
          REPEAT
            IF PBInstallmentOverview."Starting Date" < IUntilDate THEN BEGIN
              PBInstallmentOverviewNo := CreateInstallmentOverview('', 0D, '', ServiceOrder."No.", PBInstallmentOverview);
              NoOfOverviewsCreated += 1;
              IF PBInstallmentOverview.GET(PBInstallmentOverviewNo) THEN
                IF (PBInstallmentOverview."Starting Date" <> 0D) AND (FORMAT(PBInstallmentOverview.Period) <> '') AND (PBInstallmentOverview."Ending Date" <> 0D) THEN
                  CreateInstallmentOverviewLines(PBInstallmentOverview, ISuppressNullLines);
              CLEAR(PBInstallmentOverview);
              PBInstallmentOverview.VALIDATE("Service Order No.", ServiceOrder."No.");
            END;
          UNTIL (PBInstallmentOverview."Starting Date" = 0D) OR (PBInstallmentOverview."Starting Date" > IUntilDate);
        UNTIL ServiceOrder.NEXT = 0;
      EXIT(NoOfOverviewsCreated);
    END;

    PROCEDURE CreateInstallmentOverviewLines@1100528600(VAR IPBInstallmentOverview@1100528600 : Record 11072317;ISuppressNullLines@1100528601 : Boolean);
    BEGIN
      ClearTmpLines;
      IPBInstallmentOverview.TestIfNoLinesExist;
      IF GUIALLOWED THEN
        ProgressDialog.OPEN(Text000);
      TestInstallmentOverviewFields(IPBInstallmentOverview);
      GenerateInitialLines(IPBInstallmentOverview, ISuppressNullLines);
      GenerateUncodedLines(IPBInstallmentOverview, ISuppressNullLines);
      GenerateAdditionalDeclarations(IPBInstallmentOverview, ISuppressNullLines);
      GenerateAdministrativeLines(IPBInstallmentOverview);
      GenerateSurchargeLines(IPBInstallmentOverview, TRUE);
      ProcessTmpLines;
      IF GUIALLOWED THEN
        ProgressDialog.CLOSE;
    END;

    LOCAL PROCEDURE GenerateInitialLines@1100528601(VAR IPBInstallmentOverview@1100528600 : Record 11072317;ISuppressNullLines@1100528601 : Boolean);
    BEGIN
      GenerateFromUnitPrices(IPBInstallmentOverview, FALSE, ISuppressNullLines);
    END;

    LOCAL PROCEDURE GenerateUncodedLines@1100528614(VAR IPBInstallmentOverview@1100528600 : Record 11072317;ISuppressNullLines@1100528607 : Boolean);
    VAR
      SUPRecordingLine@1100528601 : Record 11071772;
      SUPProductionLine@1100528609 : Record 11071774;
      ServiceOrderExtension@1100528602 : Record 11071727;
      ServiceOrder@1100528608 : Record 11012823;
      PBInstallmentOverviewLine@1100528605 : Record 11072318;
      NoOfRecordingLines@1100528603 : Integer;
      LineNo@1100528604 : Integer;
      NoOfLinesCreated@1100528606 : Integer;
      TmpSUPProductionLine2@1100528200 : TEMPORARY Record 11071774;
      SUPProductionLine2@1100528201 : Record 11071774;
    BEGIN
      IF IPBInstallmentOverview."Service Order No." <> '' THEN
        ServiceOrderExtension.SETRANGE("Service Order No.", IPBInstallmentOverview."Service Order No.")
      ELSE
        ServiceOrderExtension.SETCURRENTKEY("Price Book Code");
      ServiceOrderExtension.SETRANGE("Price Book Code", IPBInstallmentOverview."Price Book Code");
      ServiceOrderExtension.SETRANGE("Price Book Index Date", IPBInstallmentOverview."Price Book Index Date");
      IF ServiceOrderExtension.FINDSET THEN
        REPEAT
          IF IPBInstallmentOverview."Service Order No." <> '' THEN
            GetServiceOrdersByBaseServiceOrder(IPBInstallmentOverview."Service Order No.", ServiceOrder)
          ELSE
            ServiceOrder.SETRANGE("No.", ServiceOrderExtension."Service Order No.");
          IF ServiceOrder.FINDSET THEN
            REPEAT
              IF (ServiceOrder.Status <> ServiceOrder.Status::Cancelled) AND
                 (ServiceOrder."Service Contract No." = IPBInstallmentOverview."Service Contract No.") AND
                 (ServiceOrder."Customer No." = IPBInstallmentOverview."Customer No.") AND
                 (ServiceOrder."Bill-to Customer No." = IPBInstallmentOverview."Bill-to Customer No.") AND
                 (((IPBInstallmentOverview."Service Order No." <> '') AND (ServiceOrder."Settlement Method" = ServiceOrder."Settlement Method"::"Installment Overview by Service Order")) OR
                  ((IPBInstallmentOverview."Service Order No." = '') AND (ServiceOrder."Settlement Method" = ServiceOrder."Settlement Method"::"Collective Installment Overview")))
              THEN BEGIN
                SUPRecordingLine.SETRANGE("Service Order No.", ServiceOrder."No.");
                SUPRecordingLine.SETRANGE("Unit Price Code", '');
                IF SUPRecordingLine.FINDSET THEN BEGIN
                  NoOfRecordingLines := SUPRecordingLine.COUNT;
                  LineNo := GetLastLineNo(IPBInstallmentOverview);
                  REPEAT
                    SUPRecordingLine.TESTFIELD("Alternative Unit Price Code");
                    //
                    SUPProductionLine.SETCURRENTKEY("Service Order No.");
                    SUPProductionLine2.SETRANGE("Service Order No.", SUPRecordingLine."Service Order No.");
                    SUPProductionLine2.SETRANGE("Unit Price Code", '');
                    SUPProductionLine2.SETRANGE("Alternative Unit Price Code",SUPRecordingLine."Alternative Unit Price Code");
                    SUPProductionLine2.SETFILTER("SUP Production Status", '%1|%2', SUPProductionLine."SUP Production Status"::Offered, SUPProductionLine."SUP Production Status"::Approved);
                    SUPProductionLine2.SETRANGE("Production Date", 0D, IPBInstallmentOverview."Ending Date");
                    SUPProductionLine2.SETFILTER("Installment Overview No.", '%1|%2', '', IPBInstallmentOverview."No.");
                    IF NOT SUPProductionLine2.ISEMPTY THEN BEGIN
                    //
                      LineNo += 10000;
                      IF PBInstallmentOverviewLine.GET(IPBInstallmentOverview."No.", SUPRecordingLine."Alternative Unit Price Code") THEN BEGIN
                        IF PBInstallmentOverviewLine.FindTmpSUPProductionLine(TmpSUPProductionLine2, PBInstallmentOverviewLine,ServiceOrder."No.") THEN
                          ERROR(Text003,
                            SUPRecordingLine.FIELDCAPTION("Alternative Unit Price Code"), SUPRecordingLine."Alternative Unit Price Code",
                            ServiceOrder."No.", TmpSUPProductionLine2."Service Order No.");
                        SUPProductionLine.SETCURRENTKEY("Installment Overview No.");
                        SUPProductionLine.SETRANGE("Installment Overview No.", IPBInstallmentOverview."No.");
                        SUPProductionLine.SETRANGE("Installment Overview Line No.", PBInstallmentOverviewLine."Line No.");
                        IF SUPProductionLine.FINDFIRST THEN;
                        ERROR(Text003,
                          SUPRecordingLine.FIELDCAPTION("Alternative Unit Price Code"), SUPRecordingLine."Alternative Unit Price Code",
                          ServiceOrder."No.", SUPProductionLine."Service Order No.");
                      END;
                      CLEAR(PBInstallmentOverviewLine);
                      PBInstallmentOverviewLine.VALIDATE("Installment Overview No.", IPBInstallmentOverview."No.");
                      PBInstallmentOverviewLine."Line No." := LineNo;
                      PBInstallmentOverviewLine."Line Type" := PBInstallmentOverviewLine."Line Type"::Uncoded;
                      PBInstallmentOverviewLine.VALIDATE("Unit Price Code", SUPRecordingLine."Alternative Unit Price Code");
                      PBInstallmentOverviewLine.VALIDATE(Description, SUPRecordingLine.Description);
                      PBInstallmentOverviewLine.VALIDATE("Description 2", SUPRecordingLine."Description 2");
                      PBInstallmentOverviewLine.VALIDATE("Description 3", SUPRecordingLine."Description 3");
                      PBInstallmentOverviewLine.VALIDATE("Unit Price", SUPRecordingLine."Unit Price");
                      PBInstallmentOverviewLine.VALIDATE("Unit of Measure", SUPRecordingLine."Unit of Measure");
                      PBInstallmentOverviewLine.VALIDATE("Surcharge Set Code", SUPRecordingLine."Surcharge Set Code");
                      PBInstallmentOverviewLine.CALCFIELDS("Previous Processed Quantity");
                      IF NOT ISuppressNullLines OR (PBInstallmentOverviewLine."Previous Processed Quantity" <> 0) OR (PBInstallmentOverviewLine."Processed Quantity" <> 0) THEN
                        PBInstallmentOverviewLine.INSERT(TRUE);
                      NoOfLinesCreated += 1;
                      IF GUIALLOWED THEN
                        ProgressDialog.UPDATE(2, ROUND(NoOfLinesCreated / NoOfRecordingLines * 10000, 1));
                    //
                    END;
                    //
                  UNTIL SUPRecordingLine.NEXT = 0;
                END;
              END;
            UNTIL ServiceOrder.NEXT = 0;
        UNTIL ServiceOrderExtension.NEXT = 0;
      PBInstallmentOverviewLine.GetTmpSUPProductionLines(TmpSUPProductionLine);
    END;

    LOCAL PROCEDURE GenerateAdditionalDeclarations@1100528607(VAR IPBInstallmentOverview@1100528600 : Record 11072317;ISuppressNullLines@1100528602 : Boolean);
    VAR
      ServiceOrderExtension@1100528608 : Record 11071727;
      ServiceOrder@1100528609 : Record 11012823;
      NoOfServiceOrders@1100528601 : Integer;
      NoOfServiceOrdersProcessed@1100528603 : Integer;
    BEGIN
      IF IPBInstallmentOverview."Service Order No." <> '' THEN
        ServiceOrderExtension.SETRANGE("Service Order No.", IPBInstallmentOverview."Service Order No.")
      ELSE
        ServiceOrderExtension.SETCURRENTKEY("Price Book Code");
      ServiceOrderExtension.SETRANGE("Price Book Code", IPBInstallmentOverview."Price Book Code");
      ServiceOrderExtension.SETRANGE("Price Book Index Date", IPBInstallmentOverview."Price Book Index Date");
      IF ServiceOrderExtension.FINDSET THEN BEGIN
        NoOfServiceOrders := ServiceOrderExtension.COUNT;
        REPEAT
          ServiceOrder.GET(ServiceOrderExtension."Service Order No.");
          IF (ServiceOrder.Status <> ServiceOrder.Status::Cancelled) AND
             (ServiceOrder."Service Contract No." = IPBInstallmentOverview."Service Contract No.") AND
             (ServiceOrder."Customer No." = IPBInstallmentOverview."Customer No.") AND
             (ServiceOrder."Bill-to Customer No." = IPBInstallmentOverview."Bill-to Customer No.") AND
             (((IPBInstallmentOverview."Service Order No." <> '') AND (ServiceOrder."Settlement Method" = ServiceOrder."Settlement Method"::"Installment Overview by Service Order")) OR
              ((IPBInstallmentOverview."Service Order No." = '') AND (ServiceOrder."Settlement Method" = ServiceOrder."Settlement Method"::"Collective Installment Overview")))
          THEN BEGIN
            GenerateAdditionalDeclarationsPerServiceOrder(IPBInstallmentOverview, ServiceOrder."No.", ISuppressNullLines);
            IF ServiceOrder."Base Service Order" AND (ServiceOrder."Settlement Method" = ServiceOrder."Settlement Method"::"Installment Overview by Service Order") THEN BEGIN
              ServiceOrder.SETCURRENTKEY("Base Service Order No.");
              ServiceOrder.SETRANGE("Base Service Order No.", ServiceOrder."No.");
              ServiceOrder.SETRANGE("Base Service Order", FALSE);
              IF ServiceOrder.FINDSET THEN
                REPEAT
                  IF HasBaseServiceOrderSameRequirements(ServiceOrder."No.") THEN
                    GenerateAdditionalDeclarationsPerServiceOrder(IPBInstallmentOverview, ServiceOrder."No.", ISuppressNullLines);
                UNTIL ServiceOrder.NEXT = 0;
              ServiceOrder.RESET;
            END;
          END;
          NoOfServiceOrdersProcessed += 1;
          IF GUIALLOWED THEN
            ProgressDialog.UPDATE(3, ROUND(NoOfServiceOrdersProcessed / NoOfServiceOrders * 10000, 1));
        UNTIL ServiceOrderExtension.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE GenerateAdditionalDeclarationsPerServiceOrder@1100528622(VAR IPBInstallmentOverview@1100528600 : Record 11072317;IServiceOrderNo@1100528604 : Code[20];ISuppressNullLines@1100528602 : Boolean);
    VAR
      ServiceOrderCostPlusEntry@1100528601 : Record 11012825;
      PBInstallmentOverviewLine@1100528603 : Record 11072318;
      ServiceOrder@1100528609 : Record 11012823;
      LineNo@1100528605 : Integer;
    BEGIN
      ServiceOrder.GET(IServiceOrderNo);
      IF (ServiceOrder.Status <> ServiceOrder.Status::Cancelled) AND
         (ServiceOrder."Customer No." = IPBInstallmentOverview."Customer No.") AND
         (ServiceOrder."Bill-to Customer No." = IPBInstallmentOverview."Bill-to Customer No.") AND
         (ServiceOrder."Service Contract No." = IPBInstallmentOverview."Service Contract No.")
      THEN BEGIN
        ServiceOrderCostPlusEntry.SETRANGE("Service Order No.", ServiceOrder."No.");
        ServiceOrderCostPlusEntry.SETRANGE("Customer No.", IPBInstallmentOverview."Customer No.");
        ServiceOrderCostPlusEntry.SETRANGE("Bill-to Customer No.", IPBInstallmentOverview."Bill-to Customer No.");
        ServiceOrderCostPlusEntry.SETRANGE("Posting Date", 0D, IPBInstallmentOverview."Ending Date");
        ServiceOrderCostPlusEntry.SETRANGE(Chargeable, TRUE);
        ServiceOrderCostPlusEntry.SETRANGE("Installment Overview No.", '');
        IF ServiceOrderCostPlusEntry.FINDSET THEN BEGIN
          LineNo := GetLastLineNo(IPBInstallmentOverview);
          REPEAT
            LineNo += 10000;
            CLEAR(PBInstallmentOverviewLine);
            PBInstallmentOverviewLine.VALIDATE("Installment Overview No.", IPBInstallmentOverview."No.");
            PBInstallmentOverviewLine."Line No." := LineNo;
            PBInstallmentOverviewLine."Line Type" := PBInstallmentOverviewLine."Line Type"::"Extra Declarations";
            PBInstallmentOverviewLine."Original Service Order No." := ServiceOrderCostPlusEntry."Service Order No.";
            PBInstallmentOverviewLine."Cost Plus Entry Line No." := ServiceOrderCostPlusEntry."Line No.";
            PBInstallmentOverviewLine.VALIDATE("Unit Price Code", STRSUBSTNO('%1-%2', ServiceOrderCostPlusEntry."Service Order No.", ServiceOrderCostPlusEntry."Line No."));
            PBInstallmentOverviewLine.VALIDATE(Description, ServiceOrderCostPlusEntry.Description);
            PBInstallmentOverviewLine.VALIDATE("Description 2", ServiceOrderCostPlusEntry."Description 2");
            PBInstallmentOverviewLine.VALIDATE("Price Book Quantity", ServiceOrderCostPlusEntry.Quantity);
            PBInstallmentOverviewLine.VALIDATE("Processed Quantity", PBInstallmentOverviewLine."Price Book Quantity");
            PBInstallmentOverviewLine.VALIDATE("Unit Price", ServiceOrderCostPlusEntry."Sales Price");
            PBInstallmentOverviewLine.VALIDATE("Unit of Measure", ServiceOrderCostPlusEntry."Unit of Measure");
            PBInstallmentOverviewLine.VALIDATE(Text, ServiceOrderCostPlusEntry.Text);
            PBInstallmentOverviewLine.VALIDATE("Surcharge Set Code", ServiceOrderCostPlusEntry."Surcharge Set Code (PriceBook)");
            PBInstallmentOverviewLine.CALCFIELDS("Previous Processed Quantity");
            IF NOT ISuppressNullLines OR (PBInstallmentOverviewLine."Previous Processed Quantity" <> 0) OR (PBInstallmentOverviewLine."Processed Quantity" <> 0) THEN
              PBInstallmentOverviewLine.INSERT(TRUE);
            //These temporary lines will be processed in procedure ProcessTmpLines
            TmpServiceOrderCostPlusEntry := ServiceOrderCostPlusEntry;
            TmpServiceOrderCostPlusEntry."Installment Overview No." := PBInstallmentOverviewLine."Installment Overview No.";
            TmpServiceOrderCostPlusEntry."Installment Overview Line No." := PBInstallmentOverviewLine."Line No.";
            TmpServiceOrderCostPlusEntry.INSERT;
          UNTIL ServiceOrderCostPlusEntry.NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE GenerateFromUnitPrices@1100528606(VAR IPBInstallmentOverview@1100528600 : Record 11072317;IAdministrative@1100528601 : Boolean;ISuppressNullLines@1100528607 : Boolean);
    VAR
      ServiceUnitPrice@1100528604 : Record 11071769;
      PBInstallmentOverviewLine@1100528603 : Record 11072318;
      LineNo@1100528602 : Integer;
      NoOfUnitPriceLines@1100528605 : Integer;
      NoOfLinesCreated@1100528606 : Integer;
    BEGIN
      ServiceUnitPrice.SETRANGE("Price Book Code", IPBInstallmentOverview."Price Book Code");
      ServiceUnitPrice.SETRANGE("Index Date", IPBInstallmentOverview."Price Book Index Date");
      IF IAdministrative THEN
        ServiceUnitPrice.SETRANGE("Unit Price Type", ServiceUnitPrice."Unit Price Type"::Administrative)
      ELSE
        ServiceUnitPrice.SETFILTER("Unit Price Type", '%1|%2', ServiceUnitPrice."Unit Price Type"::" ", ServiceUnitPrice."Unit Price Type"::"Summary Element");
      IF ServiceUnitPrice.FINDSET THEN BEGIN
        NoOfUnitPriceLines := ServiceUnitPrice.COUNT;
        LineNo := GetLastLineNo(IPBInstallmentOverview);
        REPEAT
          LineNo += 10000;
          CLEAR(PBInstallmentOverviewLine);
          PBInstallmentOverviewLine.VALIDATE("Installment Overview No.", IPBInstallmentOverview."No.");
          PBInstallmentOverviewLine."Line No." := LineNo;
          IF ServiceUnitPrice."Unit Price Type" = ServiceUnitPrice."Unit Price Type"::Administrative THEN
            PBInstallmentOverviewLine."Line Type" := PBInstallmentOverviewLine."Line Type"::Administrative
          ELSE
            PBInstallmentOverviewLine."Line Type" := PBInstallmentOverviewLine."Line Type"::Initial;
          PBInstallmentOverviewLine.VALIDATE("Unit Price Code", ServiceUnitPrice.Code);
          PBInstallmentOverviewLine.VALIDATE(Description, ServiceUnitPrice.Description);
          PBInstallmentOverviewLine.VALIDATE("Description 2", ServiceUnitPrice."Description 2");
          PBInstallmentOverviewLine.VALIDATE("Description 3", ServiceUnitPrice."Description 3");
          PBInstallmentOverviewLine.VALIDATE("Price Book Quantity", ServiceUnitPrice.Quantity);
          PBInstallmentOverviewLine.VALIDATE("Unit Price", ServiceUnitPrice."Unit Price");
          PBInstallmentOverviewLine.VALIDATE("Unit of Measure", ServiceUnitPrice."Unit of Measure");
          PBInstallmentOverviewLine.VALIDATE("Surcharge Set Code", ServiceUnitPrice."Surcharge Set Code");
          PBInstallmentOverviewLine.CALCFIELDS("Previous Processed Quantity");
          IF NOT ISuppressNullLines OR (PBInstallmentOverviewLine."Previous Processed Quantity" <> 0) OR (PBInstallmentOverviewLine."Processed Quantity" <> 0) THEN
            PBInstallmentOverviewLine.INSERT(TRUE);
          NoOfLinesCreated += 1;
          IF GUIALLOWED THEN
            IF NOT IAdministrative THEN
              ProgressDialog.UPDATE(1, ROUND(NoOfLinesCreated / NoOfUnitPriceLines * 10000, 1))
            ELSE
              ProgressDialog.UPDATE(4, ROUND(NoOfLinesCreated / NoOfUnitPriceLines * 10000, 1));
        UNTIL ServiceUnitPrice.NEXT = 0;
      END;
      PBInstallmentOverviewLine.GetTmpSUPProductionLines(TmpSUPProductionLine);
    END;

    LOCAL PROCEDURE GenerateAdministrativeLines@1100528608(VAR IPBInstallmentOverview@1100528600 : Record 11072317);
    BEGIN
      GenerateFromUnitPrices(IPBInstallmentOverview, TRUE, FALSE);
    END;

    LOCAL PROCEDURE GenerateSurchargeLines@1100528609(VAR IPBInstallmentOverview@1100528600 : Record 11072317;IShowProgress@1100528602 : Boolean);
    VAR
      PBInstallmentOverviewLine@1100528603 : Record 11072318;
      PriceBookSurchargeSetLine@1100528601 : Record 11072316;
      TmpGenericTempTable@1100528607 : TEMPORARY Record 11020579;
      LineNo@1100528604 : Integer;
      NoOfSurchargeLines@1100528606 : Integer;
      NoOfLinesCreated@1100528605 : Integer;
    BEGIN
      PBInstallmentOverviewLine.SETRANGE("Installment Overview No.", IPBInstallmentOverview."No.");
      PBInstallmentOverviewLine.SETFILTER("Line Type", '<>%1', PBInstallmentOverviewLine."Line Type"::Surcharge);
      IF PBInstallmentOverviewLine.FINDSET THEN
        REPEAT
          PriceBookSurchargeSetLine.SETRANGE("Price Book Code", IPBInstallmentOverview."Price Book Code");
          PriceBookSurchargeSetLine.SETRANGE("Price Book Index Date", IPBInstallmentOverview."Price Book Index Date");
          PriceBookSurchargeSetLine.SETRANGE("Surcharge Set Code", PBInstallmentOverviewLine."Surcharge Set Code");
          IF PriceBookSurchargeSetLine.FINDSET THEN
            REPEAT
              IF NOT TmpGenericTempTable.GET(PriceBookSurchargeSetLine.Code, '', '', '', '', '') THEN BEGIN
                TmpGenericTempTable."Key Code1" := PriceBookSurchargeSetLine.Code;
                TmpGenericTempTable.Text1 := PriceBookSurchargeSetLine.Description;
                TmpGenericTempTable.Dec1 := PBInstallmentOverviewLine."Overview Amount";
                TmpGenericTempTable.Dec2 := PBInstallmentOverviewLine."Overview Amount" * PriceBookSurchargeSetLine."Surcharge Percentage" / 100;
                TmpGenericTempTable.INSERT;
              END ELSE BEGIN
                TmpGenericTempTable.Dec1 += PBInstallmentOverviewLine."Overview Amount";
                TmpGenericTempTable.Dec2 += PBInstallmentOverviewLine."Overview Amount" * PriceBookSurchargeSetLine."Surcharge Percentage" / 100;
                TmpGenericTempTable.MODIFY;
              END;
            UNTIL PriceBookSurchargeSetLine.NEXT = 0;
        UNTIL PBInstallmentOverviewLine.NEXT = 0;
      IF TmpGenericTempTable.FINDSET THEN BEGIN
        LineNo := GetLastLineNo(IPBInstallmentOverview);
        NoOfSurchargeLines := TmpGenericTempTable.COUNT;
        REPEAT
          LineNo += 10000;
          CLEAR(PBInstallmentOverviewLine);
          PBInstallmentOverviewLine.VALIDATE("Installment Overview No.", IPBInstallmentOverview."No.");
          PBInstallmentOverviewLine."Line No." := LineNo;
          PBInstallmentOverviewLine."Line Type" := PBInstallmentOverviewLine."Line Type"::Surcharge;
          PBInstallmentOverviewLine.VALIDATE("Unit Price Code", TmpGenericTempTable."Key Code1");
          PBInstallmentOverviewLine.VALIDATE(Description, TmpGenericTempTable.Text1);
          IF TmpGenericTempTable.Dec1 <> 0 THEN
            PBInstallmentOverviewLine.VALIDATE("Processed Quantity", TmpGenericTempTable.Dec2 / TmpGenericTempTable.Dec1 * 100);
          PBInstallmentOverviewLine.VALIDATE("Unit Price", TmpGenericTempTable.Dec1 / 100);
          PBInstallmentOverviewLine.INSERT(TRUE);
          NoOfLinesCreated += 1;
          IF GUIALLOWED AND IShowProgress THEN
            ProgressDialog.UPDATE(5, ROUND(NoOfLinesCreated / NoOfSurchargeLines * 10000, 1))
        UNTIL TmpGenericTempTable.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE GetLastLineNo@1100528602(VAR IPBInstallmentOverview@1100528600 : Record 11072317) : Integer;
    VAR
      PBInstallmentOverviewLine@1100528601 : Record 11072318;
    BEGIN
      PBInstallmentOverviewLine.SETCURRENTKEY("Installment Overview No.", "Line No.");
      PBInstallmentOverviewLine.SETRANGE("Installment Overview No.", IPBInstallmentOverview."No.");
      IF PBInstallmentOverviewLine.FINDLAST THEN
        EXIT(PBInstallmentOverviewLine."Line No.");
    END;

    LOCAL PROCEDURE TestInstallmentOverviewFields@1100528605(VAR IPBInstallmentOverview@1100528600 : Record 11072317);
    BEGIN
      IPBInstallmentOverview.TESTFIELD("Service Contract No.");
      IPBInstallmentOverview.TESTFIELD("Starting Date");
      IPBInstallmentOverview.TESTFIELD("Ending Date");
      IPBInstallmentOverview.TESTFIELD(Status, IPBInstallmentOverview.Status::Open);
    END;

    PROCEDURE IsUnitPriceInvoicingPerServiceOrder@1100528612(IServiceOrderNo@1100528600 : Code[20]) : Boolean;
    VAR
      ServiceOrder@1100528601 : Record 11012823;
    BEGIN
      ServiceOrder.GET(IServiceOrderNo);
      EXIT(ServiceOrder."Settlement Method" = ServiceOrder."Settlement Method"::"Installment Overview by Service Order");
    END;

    PROCEDURE IsUnitPriceInvoicingPerCostPlus@1100528613(IServiceOrderNo@1100528600 : Code[20]) : Boolean;
    VAR
      ServiceOrder@1100528601 : Record 11012823;
    BEGIN
      ServiceOrder.GET(IServiceOrderNo);
      EXIT(ServiceOrder."Settlement Method" = ServiceOrder."Settlement Method"::"Cost Plus");
    END;

    PROCEDURE RemoveNullLines@1100528618(IPBInstallmentOverview@1100528600 : Record 11072317);
    VAR
      PBInstallmentOverviewLine@1100528601 : Record 11072318;
    BEGIN
      IPBInstallmentOverview.TESTFIELD(Status, IPBInstallmentOverview.Status::Open);
      PBInstallmentOverviewLine.SETRANGE("Installment Overview No.", IPBInstallmentOverview."No.");
      PBInstallmentOverviewLine.SETFILTER("Installm. Over. Seq.No. Filter", '<%1', IPBInstallmentOverview."Seq. No.");
      PBInstallmentOverviewLine.SETRANGE("Previous Processed Quantity", 0);
      PBInstallmentOverviewLine.SETRANGE("Processed Quantity", 0);
      PBInstallmentOverviewLine.SETFILTER("Line Type", '%1|%2',
        PBInstallmentOverviewLine."Line Type"::Initial, PBInstallmentOverviewLine."Line Type"::Administrative);
      PBInstallmentOverviewLine.DELETEALL(TRUE);
    END;

    PROCEDURE HasBaseServiceOrderSameRequirements@1100528628(INextServiceOrderNo@1100528600 : Code[20]) : Boolean;
    VAR
      ServiceOrder@1100528601 : Record 11012823;
      ServiceOrderExtension@1100528602 : Record 11071727;
      BaseServiceOrder@1100528604 : Record 11012823;
      BaseServiceOrderExtension@1100528603 : Record 11071727;
    BEGIN
      ServiceOrder.GET(INextServiceOrderNo);
      IF ServiceOrder."Base Service Order" THEN
        EXIT;
      ServiceOrderExtension.GetServOrderExtension(ServiceOrder."No.");
      BaseServiceOrder.GET(ServiceOrder."Base Service Order No.");
      BaseServiceOrderExtension.GetServOrderExtension(BaseServiceOrder."No.");
      IF (ServiceOrder."Customer No." = BaseServiceOrder."Customer No.") AND
         (ServiceOrder."Bill-to Customer No." = BaseServiceOrder."Bill-to Customer No.") AND
         (ServiceOrder."Price Book Type" = BaseServiceOrder."Price Book Type") AND
         (ServiceOrderExtension."Price Book Code" = BaseServiceOrderExtension."Price Book Code") AND
         (ServiceOrderExtension."Price Book Index Date" = BaseServiceOrderExtension."Price Book Index Date") AND
         (ServiceOrder."Settlement Method" = BaseServiceOrder."Settlement Method")
      THEN
        EXIT(TRUE);
    END;

    PROCEDURE GetServiceOrdersByBaseServiceOrder@1100528629(IServiceOrderNo@1100528601 : Code[20];VAR OServiceOrder@1100528600 : Record 11012823);
    VAR
      ServiceOrder@1100528605 : Record 11012823;
      BaseServiceOrder@1100528602 : Record 11012823;
      BaseServiceOrderExtension@1100528603 : Record 11071727;
      ServiceOrderExtension@1100528604 : Record 11071727;
    BEGIN
      OServiceOrder.RESET;
      IF IServiceOrderNo <> '' THEN BEGIN
        OServiceOrder.GET(IServiceOrderNo);
        OServiceOrder.MARK(TRUE);
        IF OServiceOrder."Base Service Order" THEN BEGIN
          BaseServiceOrder := OServiceOrder;
          BaseServiceOrderExtension.GetServOrderExtension(BaseServiceOrder."No.");
          ServiceOrder.SETCURRENTKEY("Base Service Order No.");
          ServiceOrder.SETRANGE("Base Service Order No.", BaseServiceOrder."No.");
          ServiceOrder.SETRANGE("Settlement Method", BaseServiceOrder."Settlement Method");
          ServiceOrder.SETRANGE("Price Book Type", BaseServiceOrder."Price Book Type");
          ServiceOrder.SETRANGE("Customer No.", BaseServiceOrder."Customer No.");
          ServiceOrder.SETRANGE("Bill-to Customer No.", BaseServiceOrder."Bill-to Customer No.");
          IF ServiceOrder.FINDSET THEN
            REPEAT
              ServiceOrderExtension.SETRANGE("Service Order No.", BaseServiceOrderExtension."Service Order No.");
              ServiceOrderExtension.SETRANGE("Price Book Code", BaseServiceOrderExtension."Price Book Code");
              ServiceOrderExtension.SETRANGE("Price Book Index Date", BaseServiceOrderExtension."Price Book Index Date");
              IF NOT ServiceOrderExtension.ISEMPTY THEN BEGIN
                OServiceOrder."No." := ServiceOrder."No.";
                OServiceOrder.MARK(TRUE);
              END;
            UNTIL ServiceOrder.NEXT = 0;
        END;
      END;
      OServiceOrder.MARKEDONLY(TRUE);
    END;

    LOCAL PROCEDURE ClearTmpLines@1100528635();
    BEGIN
      TmpSUPProductionLine.RESET;
      TmpSUPProductionLine.DELETEALL;
      TmpServiceOrderCostPlusEntry.RESET;
      TmpServiceOrderCostPlusEntry.DELETEALL;
    END;

    LOCAL PROCEDURE ProcessTmpLines@1100528630();
    VAR
      SUPProductionLine@1100528601 : Record 11071774;
      ServiceOrderCostPlusEntry@1100528600 : Record 11012825;
    BEGIN
      IF TmpSUPProductionLine.FINDSET THEN
        REPEAT
          IF SUPProductionLine.GET(TmpSUPProductionLine."Service Order No.", TmpSUPProductionLine."Production Seq. No.", TmpSUPProductionLine."Line No.") THEN BEGIN
            SUPProductionLine."Installment Overview No." := TmpSUPProductionLine."Installment Overview No.";
            SUPProductionLine."Installment Overview Line No." := TmpSUPProductionLine."Installment Overview Line No.";
            SUPProductionLine.MODIFY;
          END;
        UNTIL TmpSUPProductionLine.NEXT = 0;
      IF TmpServiceOrderCostPlusEntry.FINDSET THEN
        REPEAT
          IF ServiceOrderCostPlusEntry.GET(TmpServiceOrderCostPlusEntry."Service Order No.", TmpServiceOrderCostPlusEntry."Line No.") THEN BEGIN
            ServiceOrderCostPlusEntry."Installment Overview No." := TmpServiceOrderCostPlusEntry."Installment Overview No.";
            ServiceOrderCostPlusEntry."Installment Overview Line No." := TmpServiceOrderCostPlusEntry."Installment Overview Line No.";
            ServiceOrderCostPlusEntry.Chargeable := FALSE;
            ServiceOrderCostPlusEntry.MODIFY;
          END;
        UNTIL TmpServiceOrderCostPlusEntry.NEXT = 0;
      TmpSUPProductionLine.DELETEALL;
      TmpServiceOrderCostPlusEntry.DELETEALL;
    END;

    LOCAL PROCEDURE "----"@1100528603();
    BEGIN
    END;

    PROCEDURE CreateInvoice@1100528610(VAR IPBCollectInstallOverview@1100528600 : Record 11072319);
    VAR
      ServiceSetup@1100528604 : Record 11012800;
      SalesHeader@1100528601 : Record 36;
      SalesLine@1100528602 : Record 37;
      TotalSalesAmount@1100528603 : Decimal;
    BEGIN
      IPBCollectInstallOverview.TESTFIELD(Status, IPBCollectInstallOverview.Status::Approved);

      TotalSalesAmount := IPBCollectInstallOverview.GetTotalSalesAmount();
      IF TotalSalesAmount = 0 THEN
        ERROR(Text002, TotalSalesAmount);
      ServiceSetup.GET;

      SalesHeader.INIT;
      IF TotalSalesAmount >= 0 THEN
        SalesHeader."Document Type" := SalesHeader."Document Type"::Invoice
      ELSE
        SalesHeader."Document Type" := SalesHeader."Document Type"::"Credit Memo";
      SalesHeader."Service Invoice" := TRUE;
      SalesHeader.INSERT(TRUE);
      SalesHeader.SetHideValidationDialog(TRUE);
      SalesHeader.VALIDATE("Sell-to Customer No.", IPBCollectInstallOverview."Customer No.");
      SalesHeader.VALIDATE("Bill-to Customer No.", IPBCollectInstallOverview."Bill-to Customer No.");
      SalesHeader.VALIDATE("Service Contract No.", IPBCollectInstallOverview."Service Contract No.");
      IF IPBCollectInstallOverview."Service Order No." <> '' THEN
        SalesHeader.VALIDATE("Service Order No.", IPBCollectInstallOverview."Service Order No.");
      SalesHeader.MODIFY(TRUE);

      SalesLine.INIT;
      SalesLine."Document Type" := SalesHeader."Document Type";
      SalesLine."Document No." := SalesHeader."No.";
      SalesLine."Line No." := 10000;
      SalesLine."System-Created Entry" := TRUE;
      SalesLine."Service Invoice" := TRUE;
      SalesLine.VALIDATE("Service Contract No.", IPBCollectInstallOverview."Service Contract No.");
      SalesLine.VALIDATE("Shortcut Dimension 2 Code", ServiceSetup."Cost Object Revenues");
      SalesLine.VALIDATE("Sell-to Customer No.", IPBCollectInstallOverview."Customer No.");
      SalesLine.VALIDATE("Bill-to Customer No.", IPBCollectInstallOverview."Bill-to Customer No.");
      //SalesLine.VALIDATE("Service Contract No.", IPBCollectInstallOverview."Service Contract No.");
      IF IPBCollectInstallOverview."Service Order No." <> '' THEN
        SalesLine.VALIDATE("Service Order No.", IPBCollectInstallOverview."Service Order No.");
      SalesLine.VALIDATE("PB Install. Collect. Over. No.", IPBCollectInstallOverview."No.");
      SalesLine.VALIDATE(Description, IPBCollectInstallOverview.Description);
      SalesLine.VALIDATE("Description 2", STRSUBSTNO('%1-%2', IPBCollectInstallOverview."Starting Date", IPBCollectInstallOverview."Ending Date"));
      SalesLine.VALIDATE("Unit Price", TotalSalesAmount);
      SalesLine.VALIDATE(Quantity, 1);
      SalesLine.INSERT(TRUE);

      IPBCollectInstallOverview.VALIDATE(Status, IPBCollectInstallOverview.Status::Processed);
      IPBCollectInstallOverview.MODIFY;

      IF GUIALLOWED THEN
        MESSAGE(Text001, SalesHeader."No.");
    END;

    LOCAL PROCEDURE "-----"@1100528611();
    BEGIN
    END;

    PROCEDURE RecalculateQuantities@1100528615(VAR IPBInstallmentOverview@1100528600 : Record 11072317;ISuppressNullLines@1100528602 : Boolean);
    VAR
      PBInstallmentOverviewLine@1100528601 : Record 11072318;
    BEGIN
      IF GUIALLOWED THEN
        ProgressDialog.OPEN(Text000);

      ClearTmpLines;
      IPBInstallmentOverview.TESTFIELD(Status, IPBInstallmentOverview.Status::Open);
      PBInstallmentOverviewLine.SETRANGE("Installment Overview No.", IPBInstallmentOverview."No.");
      PBInstallmentOverviewLine.SETFILTER("Line Type", '%1|%2',
        PBInstallmentOverviewLine."Line Type"::Uncoded,
        PBInstallmentOverviewLine."Line Type"::"Extra Declarations");
      PBInstallmentOverviewLine.DELETEALL(TRUE);

      PBInstallmentOverviewLine.SETRANGE("Line Type", PBInstallmentOverviewLine."Line Type"::Initial);
      IF PBInstallmentOverviewLine.FINDSET THEN
        REPEAT
          PBInstallmentOverviewLine.UnlinkDetailLines();
        UNTIL PBInstallmentOverviewLine.NEXT = 0;
      COMMIT;
      IF PBInstallmentOverviewLine.FINDSET(TRUE) THEN
        REPEAT
          PBInstallmentOverviewLine.VALIDATE("Unit Price Code");
          PBInstallmentOverviewLine.MODIFY;
        UNTIL PBInstallmentOverviewLine.NEXT = 0;
      PBInstallmentOverviewLine.GetTmpSUPProductionLines(TmpSUPProductionLine);
      GenerateUncodedLines(IPBInstallmentOverview, ISuppressNullLines);
      GenerateAdditionalDeclarations(IPBInstallmentOverview, ISuppressNullLines);
      RecalculateSurcharges(IPBInstallmentOverview, FALSE, FALSE);
      ProcessTmpLines;

      IF GUIALLOWED THEN
        ProgressDialog.CLOSE;
    END;

    PROCEDURE RecalculateSurcharges@1100528619(VAR IPBInstallmentOverview@1100528600 : Record 11072317;IShowProgress@1100528601 : Boolean;INoStatusCheck@1100528603 : Boolean);
    VAR
      PBInstallmentOverviewLine@1100528602 : Record 11072318;
    BEGIN
      IF NOT INoStatusCheck THEN
        IPBInstallmentOverview.TESTFIELD(Status, IPBInstallmentOverview.Status::Open);
      PBInstallmentOverviewLine.SETRANGE("Installment Overview No.", IPBInstallmentOverview."No.");
      PBInstallmentOverviewLine.SETRANGE("Line Type", PBInstallmentOverviewLine."Line Type"::Surcharge);
      PBInstallmentOverviewLine.DELETEALL(TRUE);
      IF GUIALLOWED AND IShowProgress THEN
        ProgressDialog.OPEN(Text000);
      GenerateSurchargeLines(IPBInstallmentOverview, IShowProgress);
      IF GUIALLOWED AND IShowProgress THEN
        ProgressDialog.CLOSE;
    END;

    PROCEDURE RevertProcessedStatusInstallmentCollectionOverview@1100528620(VAR IPBCollectInstallOverview@1100528600 : Record 11072319);
    VAR
      PBInstallmentOverview@1100528601 : Record 11072317;
    BEGIN
      IPBCollectInstallOverview.TESTFIELD(Status, IPBCollectInstallOverview.Status::Processed);
      IPBCollectInstallOverview.Status := IPBCollectInstallOverview.Status::Approved;
      IPBCollectInstallOverview.MODIFY;

      PBInstallmentOverview.SETRANGE("Install. Collect. Overview No.", IPBCollectInstallOverview."No.");
      PBInstallmentOverview.MODIFYALL(Status, PBInstallmentOverview.Status::Approved);
    END;

    PROCEDURE GetInstallmentOverviewLinesByCollectionOverview@1100528623(IInstallmentCollectionOverviewNo@1100528600 : Code[20];ISuppressNullLines@1100528609 : Boolean;VAR OTmpPBInstallmentOverviewLine@1100528601 : TEMPORARY Record 11072318);
    VAR
      ServiceUnitPrice@1100528606 : Record 11071769;
      PBInstallCollectOverview@1100528607 : Record 11072319;
      PBInstallmentOverview@1100528602 : Record 11072317;
      PBInstallmentOverviewLine@1100528603 : Record 11072318;
      TmpPBInstallmentOverviewLine@1100528604 : TEMPORARY Record 11072318;
      TotalOverviewAmountExclSurchage@1100528605 : Decimal;
      LineNo@1100528608 : Integer;
    BEGIN
      TmpPBInstallmentOverviewLine.COPY(OTmpPBInstallmentOverviewLine, TRUE); //just for testing
      OTmpPBInstallmentOverviewLine.RESET;
      OTmpPBInstallmentOverviewLine.DELETEALL;

      IF NOT ISuppressNullLines THEN BEGIN
        PBInstallCollectOverview.GET(IInstallmentCollectionOverviewNo);
        ServiceUnitPrice.SETRANGE("Price Book Code", PBInstallCollectOverview."Price Book Code");
        ServiceUnitPrice.SETRANGE("Index Date", PBInstallCollectOverview."Price Book Index Date");
        IF ServiceUnitPrice.FINDSET THEN
          REPEAT
            LineNo += 10000;
            OTmpPBInstallmentOverviewLine."Installment Overview No." := IInstallmentCollectionOverviewNo;
            OTmpPBInstallmentOverviewLine."Price Book Code" := ServiceUnitPrice."Price Book Code";
            OTmpPBInstallmentOverviewLine."Price Book Index Date" := ServiceUnitPrice."Index Date";
            OTmpPBInstallmentOverviewLine."Service Contract No." := PBInstallCollectOverview."Service Contract No.";
            OTmpPBInstallmentOverviewLine."Service Order No." := PBInstallCollectOverview."Service Order No.";
            OTmpPBInstallmentOverviewLine."Customer No." := PBInstallCollectOverview."Customer No.";
            OTmpPBInstallmentOverviewLine."Bill-to Customer No." := PBInstallCollectOverview."Bill-to Customer No.";
            IF ServiceUnitPrice."Unit Price Type" = ServiceUnitPrice."Unit Price Type"::Administrative THEN
              OTmpPBInstallmentOverviewLine."Line Type" := OTmpPBInstallmentOverviewLine."Line Type"::Administrative
            ELSE
              OTmpPBInstallmentOverviewLine."Line Type" := OTmpPBInstallmentOverviewLine."Line Type"::Initial;
            OTmpPBInstallmentOverviewLine."Line No." := LineNo;
            OTmpPBInstallmentOverviewLine."Unit Price Code" := ServiceUnitPrice.Code;
            OTmpPBInstallmentOverviewLine.Description := ServiceUnitPrice.Description;
            OTmpPBInstallmentOverviewLine."Description 2" := ServiceUnitPrice."Description 2";
            OTmpPBInstallmentOverviewLine."Description 3" := ServiceUnitPrice."Description 3";
            OTmpPBInstallmentOverviewLine."Unit of Measure" := ServiceUnitPrice."Unit of Measure";
            OTmpPBInstallmentOverviewLine."Unit Price" := ServiceUnitPrice."Unit Price";
            OTmpPBInstallmentOverviewLine."Surcharge Set Code" := ServiceUnitPrice."Surcharge Set Code";
            OTmpPBInstallmentOverviewLine.INSERT;
          UNTIL ServiceUnitPrice.NEXT = 0;
      END;

      PBInstallmentOverview.SETRANGE("Install. Collect. Overview No.", IInstallmentCollectionOverviewNo);
      IF PBInstallmentOverview.FINDSET THEN
        REPEAT
          PBInstallmentOverviewLine.SETRANGE("Installment Overview No.", PBInstallmentOverview."No.");
          IF PBInstallmentOverviewLine.FINDSET THEN
            REPEAT
              OTmpPBInstallmentOverviewLine.SETRANGE("Price Book Code", PBInstallmentOverviewLine."Price Book Code");
              OTmpPBInstallmentOverviewLine.SETRANGE("Price Book Index Date", PBInstallmentOverviewLine."Price Book Index Date");
              OTmpPBInstallmentOverviewLine.SETRANGE("Service Contract No.", PBInstallmentOverviewLine."Service Contract No.");
              OTmpPBInstallmentOverviewLine.SETRANGE("Service Order No.", PBInstallmentOverviewLine."Service Order No.");
              OTmpPBInstallmentOverviewLine.SETRANGE("Customer No.", PBInstallmentOverviewLine."Customer No.");
              OTmpPBInstallmentOverviewLine.SETRANGE("Bill-to Customer No.", PBInstallmentOverviewLine."Bill-to Customer No.");
              OTmpPBInstallmentOverviewLine.SETRANGE("Unit Price Code", PBInstallmentOverviewLine."Unit Price Code");
              IF NOT OTmpPBInstallmentOverviewLine.FINDFIRST THEN BEGIN
                OTmpPBInstallmentOverviewLine.INIT;
                OTmpPBInstallmentOverviewLine := PBInstallmentOverviewLine;
                OTmpPBInstallmentOverviewLine.INSERT;
              END ELSE BEGIN
                IF PBInstallmentOverviewLine."Line Type" <> PBInstallmentOverviewLine."Line Type"::Surcharge THEN
                  OTmpPBInstallmentOverviewLine."Processed Quantity" += PBInstallmentOverviewLine."Processed Quantity";
                OTmpPBInstallmentOverviewLine."Overview Amount" += PBInstallmentOverviewLine."Overview Amount";
                IF OTmpPBInstallmentOverviewLine.Comment <> '' THEN
                  OTmpPBInstallmentOverviewLine.Comment := COPYSTR(STRSUBSTNO('%1 %2', OTmpPBInstallmentOverviewLine.Comment, PBInstallmentOverviewLine.Comment), 1, MAXSTRLEN(OTmpPBInstallmentOverviewLine.Comment))
                ELSE
                  OTmpPBInstallmentOverviewLine.Comment := PBInstallmentOverviewLine.Comment;
                IF OTmpPBInstallmentOverviewLine.Text <> '' THEN
                  OTmpPBInstallmentOverviewLine.Text := COPYSTR(STRSUBSTNO('%1 %2', OTmpPBInstallmentOverviewLine.Text, PBInstallmentOverviewLine.Text), 1, MAXSTRLEN(OTmpPBInstallmentOverviewLine.Text))
                ELSE
                  OTmpPBInstallmentOverviewLine.Text := PBInstallmentOverviewLine.Text;
                OTmpPBInstallmentOverviewLine.MODIFY;
              END;
            UNTIL PBInstallmentOverviewLine.NEXT = 0;
        UNTIL PBInstallmentOverview.NEXT = 0;
      OTmpPBInstallmentOverviewLine.RESET;
      OTmpPBInstallmentOverviewLine.SETFILTER("Line Type", '<>%1', OTmpPBInstallmentOverviewLine."Line Type"::Surcharge);
      OTmpPBInstallmentOverviewLine.SETFILTER("Surcharge Set Code", '<>%1', '');
      OTmpPBInstallmentOverviewLine.CALCSUMS("Overview Amount");
      TotalOverviewAmountExclSurchage := OTmpPBInstallmentOverviewLine."Overview Amount";
      OTmpPBInstallmentOverviewLine.SETRANGE("Line Type", OTmpPBInstallmentOverviewLine."Line Type"::Surcharge);
      OTmpPBInstallmentOverviewLine.SETRANGE("Surcharge Set Code");
      IF OTmpPBInstallmentOverviewLine.FINDSET THEN
        REPEAT
          IF TotalOverviewAmountExclSurchage <> 0 THEN
            OTmpPBInstallmentOverviewLine."Processed Quantity" := OTmpPBInstallmentOverviewLine."Overview Amount" / TotalOverviewAmountExclSurchage * 100
          ELSE
            OTmpPBInstallmentOverviewLine."Processed Quantity" := 0;
          OTmpPBInstallmentOverviewLine."Unit Price" := TotalOverviewAmountExclSurchage / 100;
          OTmpPBInstallmentOverviewLine.MODIFY;
        UNTIL OTmpPBInstallmentOverviewLine.NEXT = 0;
      OTmpPBInstallmentOverviewLine.RESET;
    END;

    PROCEDURE GetInstallmentOverviewLinesByOverview@1100528624(IInstallmentOverviewNo@1100528600 : Code[20];ISuppressHeaders@1100528609 : Boolean;ISuppressAdministrativeElements@1100528605 : Boolean;ISuppressSurchargeElements@1100528610 : Boolean;VAR OTmpPBInstallmentOverviewLine@1100528601 : TEMPORARY Record 11072318);
    VAR
      ServiceUnitPrice@1100528606 : Record 11071769;
      PBInstallmentOverview@1100528602 : Record 11072317;
      PBInstallmentOverviewLine@1100528603 : Record 11072318;
      TmpPBInstallmentOverviewLine@1100528604 : TEMPORARY Record 11072318;
      LineNo@1100528608 : Integer;
      FoundUnitPriceLinesNotNull@1100528607 : Boolean;
    BEGIN
      TmpPBInstallmentOverviewLine.COPY(OTmpPBInstallmentOverviewLine, TRUE); //just for testing
      OTmpPBInstallmentOverviewLine.RESET;
      OTmpPBInstallmentOverviewLine.DELETEALL;

      PBInstallmentOverview.GET(IInstallmentOverviewNo);
      IF NOT ISuppressHeaders THEN BEGIN
        ServiceUnitPrice.SETRANGE("Price Book Code", PBInstallmentOverview."Price Book Code");
        ServiceUnitPrice.SETRANGE("Index Date", PBInstallmentOverview."Price Book Index Date");
        ServiceUnitPrice.SETRANGE("Unit Price Type", ServiceUnitPrice."Unit Price Type"::Header);
        IF ServiceUnitPrice.FINDSET THEN
          REPEAT
            LineNo += 10000;
            OTmpPBInstallmentOverviewLine."Installment Overview No." := IInstallmentOverviewNo;
            OTmpPBInstallmentOverviewLine."Price Book Code" := ServiceUnitPrice."Price Book Code";
            OTmpPBInstallmentOverviewLine."Price Book Index Date" := ServiceUnitPrice."Index Date";
            OTmpPBInstallmentOverviewLine."Service Contract No." := PBInstallmentOverview."Service Contract No.";
            OTmpPBInstallmentOverviewLine."Service Order No." := PBInstallmentOverview."Service Order No.";
            OTmpPBInstallmentOverviewLine."Customer No." := PBInstallmentOverview."Customer No.";
            OTmpPBInstallmentOverviewLine."Bill-to Customer No." := PBInstallmentOverview."Bill-to Customer No.";
            IF ServiceUnitPrice."Unit Price Type" = ServiceUnitPrice."Unit Price Type"::Administrative THEN
              OTmpPBInstallmentOverviewLine."Line Type" := OTmpPBInstallmentOverviewLine."Line Type"::Administrative
            ELSE
              OTmpPBInstallmentOverviewLine."Line Type" := OTmpPBInstallmentOverviewLine."Line Type"::Initial;
            OTmpPBInstallmentOverviewLine."Line No." := LineNo;
            OTmpPBInstallmentOverviewLine."Unit Price Code" := ServiceUnitPrice.Code;
            OTmpPBInstallmentOverviewLine.Description := ServiceUnitPrice.Description;
            OTmpPBInstallmentOverviewLine."Description 2" := ServiceUnitPrice."Description 2";
            OTmpPBInstallmentOverviewLine."Description 3" := ServiceUnitPrice."Description 3";
            OTmpPBInstallmentOverviewLine."Unit of Measure" := ServiceUnitPrice."Unit of Measure";
            OTmpPBInstallmentOverviewLine."Unit Price" := ServiceUnitPrice."Unit Price";
            OTmpPBInstallmentOverviewLine."Surcharge Set Code" := ServiceUnitPrice."Surcharge Set Code";
            OTmpPBInstallmentOverviewLine.INSERT;
          UNTIL ServiceUnitPrice.NEXT = 0;
      END;

      PBInstallmentOverviewLine.SETRANGE("Installment Overview No.", PBInstallmentOverview."No.");
      IF ISuppressAdministrativeElements THEN
        PBInstallmentOverviewLine.SETFILTER("Line Type", '<>%1', PBInstallmentOverviewLine."Line Type"::Administrative);
      IF ISuppressSurchargeElements THEN BEGIN
        PBInstallmentOverviewLine.FILTERGROUP(2);
        PBInstallmentOverviewLine.SETFILTER("Line Type", '<>%1', PBInstallmentOverviewLine."Line Type"::Surcharge);
        PBInstallmentOverviewLine.FILTERGROUP(0);
      END;
      IF PBInstallmentOverviewLine.FINDSET THEN
        REPEAT
          PBInstallmentOverviewLine.CALCFIELDS("Previous Processed Quantity");
          IF NOT ISuppressHeaders OR (PBInstallmentOverviewLine."Previous Processed Quantity" <> 0) OR (PBInstallmentOverviewLine."Processed Quantity" <> 0) THEN BEGIN
            OTmpPBInstallmentOverviewLine.SETRANGE("Price Book Code", PBInstallmentOverviewLine."Price Book Code");
            OTmpPBInstallmentOverviewLine.SETRANGE("Price Book Index Date", PBInstallmentOverviewLine."Price Book Index Date");
            OTmpPBInstallmentOverviewLine.SETRANGE("Service Contract No.", PBInstallmentOverviewLine."Service Contract No.");
            OTmpPBInstallmentOverviewLine.SETRANGE("Service Order No.", PBInstallmentOverviewLine."Service Order No.");
            OTmpPBInstallmentOverviewLine.SETRANGE("Customer No.", PBInstallmentOverviewLine."Customer No.");
            OTmpPBInstallmentOverviewLine.SETRANGE("Bill-to Customer No.", PBInstallmentOverviewLine."Bill-to Customer No.");
            OTmpPBInstallmentOverviewLine.SETRANGE("Unit Price Code", PBInstallmentOverviewLine."Unit Price Code");
            IF NOT OTmpPBInstallmentOverviewLine.FINDFIRST THEN BEGIN
              OTmpPBInstallmentOverviewLine.INIT;
              OTmpPBInstallmentOverviewLine := PBInstallmentOverviewLine;
              OTmpPBInstallmentOverviewLine.INSERT;
            END ELSE BEGIN
              IF PBInstallmentOverviewLine."Line Type" <> PBInstallmentOverviewLine."Line Type"::Surcharge THEN
                OTmpPBInstallmentOverviewLine."Processed Quantity" += PBInstallmentOverviewLine."Processed Quantity";
              OTmpPBInstallmentOverviewLine."Overview Amount" += PBInstallmentOverviewLine."Overview Amount";
              IF OTmpPBInstallmentOverviewLine.Comment <> '' THEN
                OTmpPBInstallmentOverviewLine.Comment := COPYSTR(STRSUBSTNO('%1 %2', OTmpPBInstallmentOverviewLine.Comment, PBInstallmentOverviewLine.Comment), 1, MAXSTRLEN(OTmpPBInstallmentOverviewLine.Comment))
              ELSE
                OTmpPBInstallmentOverviewLine.Comment := PBInstallmentOverviewLine.Comment;
              IF OTmpPBInstallmentOverviewLine.Text <> '' THEN
                OTmpPBInstallmentOverviewLine.Text := COPYSTR(STRSUBSTNO('%1 %2', OTmpPBInstallmentOverviewLine.Text, PBInstallmentOverviewLine.Text), 1, MAXSTRLEN(OTmpPBInstallmentOverviewLine.Text))
              ELSE
                OTmpPBInstallmentOverviewLine.Text := PBInstallmentOverviewLine.Text;
              OTmpPBInstallmentOverviewLine.MODIFY;
            END;
          END;
        UNTIL PBInstallmentOverviewLine.NEXT = 0;

      OTmpPBInstallmentOverviewLine.RESET;

      //Remove all unused header lines
      IF NOT ISuppressHeaders THEN BEGIN
        OTmpPBInstallmentOverviewLine.SETRANGE("Installm. Over. Seq.No. Filter", 0, PBInstallmentOverview."Seq. No." -1);
        OTmpPBInstallmentOverviewLine.SETRANGE("Unit Price Type", OTmpPBInstallmentOverviewLine."Unit Price Type"::Header);
        IF OTmpPBInstallmentOverviewLine.FINDSET THEN
          REPEAT
            FoundUnitPriceLinesNotNull := FALSE;
            TmpPBInstallmentOverviewLine.COPY(OTmpPBInstallmentOverviewLine, TRUE);
            TmpPBInstallmentOverviewLine.SETRANGE("Unit Price Type");
            TmpPBInstallmentOverviewLine.SETFILTER("Unit Price Code", '%1', OTmpPBInstallmentOverviewLine."Unit Price Code" + '*');
            TmpPBInstallmentOverviewLine.SETFILTER("Processed Quantity", '<>%1', 0);
            IF NOT TmpPBInstallmentOverviewLine.ISEMPTY THEN
              FoundUnitPriceLinesNotNull := TRUE;
            TmpPBInstallmentOverviewLine.SETRANGE("Processed Quantity");
            IF NOT FoundUnitPriceLinesNotNull THEN BEGIN
              TmpPBInstallmentOverviewLine.SETFILTER("Previous Processed Quantity", '<>%1', 0);
              IF NOT TmpPBInstallmentOverviewLine.ISEMPTY THEN
                FoundUnitPriceLinesNotNull := TRUE;
            END;
            TmpPBInstallmentOverviewLine.SETRANGE("Previous Processed Quantity");
            IF NOT FoundUnitPriceLinesNotNull THEN
              TmpPBInstallmentOverviewLine.DELETEALL;
          UNTIL OTmpPBInstallmentOverviewLine.NEXT = 0;
        OTmpPBInstallmentOverviewLine.RESET;
      END;
    END;

    LOCAL PROCEDURE "------"@1100528625();
    BEGIN
    END;

    PROCEDURE GetWeekCode@1100528626(IPBInstallmentOverview@1100528600 : Record 11072317) : Integer;
    VAR
      ServiceContract@1100528601 : Record 11012812;
    BEGIN
      IF IPBInstallmentOverview."Service Contract No." = '' THEN
        EXIT;
      IF NOT ServiceContract.GET(IPBInstallmentOverview."Service Contract No.") THEN
        EXIT;
      IF ServiceContract."Starting Date" = 0D THEN
        EXIT;
      IF IPBInstallmentOverview."Starting Date" = 0D THEN
        EXIT;
      EXIT(ROUND((IPBInstallmentOverview."Starting Date" - ServiceContract."Starting Date") / 7, 1, '<') +1);
    END;

    PROCEDURE GetWeekNumber@1100528627(IPBInstallmentOverview@1100528600 : Record 11072317) : Integer;
    BEGIN
      IF IPBInstallmentOverview."Starting Date" = 0D THEN
        EXIT;
      EXIT(DATE2DWY(IPBInstallmentOverview."Starting Date", 2));
    END;

    BEGIN
    END.
  }
}

