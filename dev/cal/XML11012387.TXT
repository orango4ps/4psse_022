OBJECT XMLport 11012387 Export Paymaster 6.0
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Export to Paymaster;
               SVE=Export till Paymaster];
    Direction=Export;
    DefaultFieldsValidation=No;
    OnInitXMLport=VAR
                    PaymasterRecordExtensionRec@1100528400 : Record 11012384;
                  BEGIN
                    sep := '#';
                    HumanResourcesSetup.GET;
                    HumanResourcesSetup.TESTFIELD("Salary Application",HumanResourcesSetup."Salary Application"::Paymaster);

                    UseExtension := PaymasterRecordExtensionRec.UseExtension;
                  END;

    OnPreXMLport=VAR
                   Job@1100529904 : Record 11072003;
                   ClientTypeManagement@1100529500 : Codeunit 4030;
                   PathName@1100529900 : Text;
                 BEGIN
                   PathName := HumanResourcesSetup."Pathname Files to Salary";
                   IF ExportPRJ THEN
                     FileName := Job.TABLECAPTION + '.txt';

                   IF ExportHRS THEN
                     FileName := DocumentNo + '.txt';

                   currXMLport.FILENAME(PathName + FileName);

                   LastDocNo := '';

                   IF NOT ClientTypeManagement.IsCommonWebClientType THEN
                     IF FileMgt.ClientFileExists(currXMLport.FILENAME) THEN
                       IF NOT FileMgt.ExistingFileMustBeReplaced(currXMLport.FILENAME, TRUE) THEN
                         ERROR('');


                   IF ExportPRJ THEN
                     FillBufferProjectExport;

                   IF ExportHRS THEN
                     FillBufferHourExport;
                 END;

    OnPostXMLport=BEGIN
                    BufferHourExport.DELETEALL;
                    TempPostedHourLineRec.RESET;
                    TempPostedHourLineRec.DELETEALL;

                    XMLportStatusDialogMgt.CloseStatus;
                  END;

    Format=Fixed Text;
  }
  ELEMENTS
  {
    { [{9DEAF15E-5041-40BE-AAFA-FF087113939E}];  ;Root                ;Element ;Text     }

    { [{06F92C4F-5067-4F65-A433-7E3E38A01D1D}];1 ;BufferHourExport    ;Element ;Table   ;
                                                  SourceTable=Table11012042;
                                                  SourceTableView=SORTING(Field10);
                                                  Export::OnAfterGetRecord=VAR
                                                                             RecRef@1100528400 : RecordRef;
                                                                           BEGIN
                                                                             RecRef.GETTABLE("Buffer Hour Export");
                                                                             XMLportStatusDialogMgt.ShowExportStatus(RecRef);
                                                                           END;
                                                                            }

    { [{7D380421-9741-44C2-81D7-F00907EC7C83}];2 ;Text                ;Element ;Field   ;
                                                  DataType=Text;
                                                  SourceField=Buffer Hour Export::Text;
                                                  Width=250 }

  }
  EVENTS
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      CaptionML=[ENU=Export Hour Accounting;
                 SVE=Exportera timbokf”ring];
    }
    CONTROLS
    {
    }
  }
  CODE
  {
    VAR
      HumanResourcesSetup@1100528426 : Record 5218;
      BufferHourExport@1100529901 : Record 11012042;
      PostedHourLine@1100529902 : Record 11012085;
      PaymasterCompany@1100528425 : Record 11012375;
      CostCodeRec@1100528424 : Record 11012083;
      PaymasterRecordExtensionRec@1100528423 : Record 11012384;
      WageComponentRec@1100528422 : Record 11012014;
      TempPostedHourLineRec@1100528421 : TEMPORARY Record 11012085;
      FileMgt@1100528432 : Codeunit 419;
      XMLportStatusDialogMgt@1100528431 : Codeunit 11130006;
      FileName@1100528419 : Text;
      ElementTxt@1100528416 : Text[30];
      sep@1100528415 : Text[1];
      DocumentNo@1100528413 : Text[250];
      gvEmployer@1100528412 : Text[250];
      ExportPRJ@1100528411 : Boolean;
      ExportHRS@1100528410 : Boolean;
      UseExtension@1100528408 : Boolean;
      SalaryPeriod@1100528406 : Integer;
      CostTypePlant@1100525000 : Boolean;
      NotExportedLinesOnly@1100528405 : Boolean;
      LastDocNo@1100528404 : Code[20];
      SalPerVar@1100528403 : Code[10];
      ExportDateTime@1100528402 : DateTime;
      EmplRec@1100528401 : Record 5200;
      TradeAssRec@1100528400 : Record 11012015;
      Text002@1100528427 : TextConst 'ENU=Only < and > are allowed as parameter in function outline;SVE=Endast < och > till†ts som parametrar i funktionsutkastet';
      Text003@1100528417 : TextConst 'ENU=No %1 found for %2 %3.;SVE=Ingen %1 hittad f”r %2 %3.';
      Text004@1100525001 : TextConst 'ENU=No Site Mngmnt. Hours Employee existing.';
      LineNo@1100529900 : Integer;

    PROCEDURE SetSelectionProjectOnly@1210190000();
    BEGIN
      ExportPRJ := TRUE;
      ExportHRS := FALSE;
    END;

    PROCEDURE SetSelection@1100528400(ExportPRJ2@1100528400 : Boolean;ExportHRS2@1100528401 : Boolean;Document2@1100528402 : Text[250];Employer2@1100528403 : Text[250];SalaryPeriod2@1100528404 : Integer;CostTypePlant2@1100525000 : Boolean;NotExportedLinesOnly2@1100528405 : Boolean;SalPerVar2@1100528406 : Code[10]);
    BEGIN
      ExportPRJ := ExportPRJ2;
      ExportHRS := ExportHRS2;
      DocumentNo := Document2;
      gvEmployer := Employer2;
      SalaryPeriod := SalaryPeriod2;
      CostTypePlant := CostTypePlant2;
      NotExportedLinesOnly := NotExportedLinesOnly2;
      SalPerVar := SalPerVar2;
    END;

    PROCEDURE Alphanumeric@6(Text@11012001 : Text[250]) Res@11012000 : Boolean;
    BEGIN
      EXIT(DELCHR(Text,'=',' 0123456789')<>'');
    END;

    PROCEDURE Sign@3(Value@11012001 : Decimal) Text@11012000 : Text[1];
    BEGIN
      IF Value >= 0 THEN
        EXIT('+')
      ELSE
        EXIT('-');
    END;

    PROCEDURE FillSeqLine@4(String@11012001 : Text[80];TotLength@11012002 : Integer;WithCharacter@11012003 : Text[1];TrueBool@11012004 : Char) Text@11012000 : Text[80];
    VAR
      Length@11012005 : Integer;
    BEGIN
      Length:=STRLEN(String);
      IF TotLength>Length THEN BEGIN
        CASE TrueBool OF
          '<': String:=PADSTR('',TotLength-Length,WithCharacter)+String;
          '>': String:=String+PADSTR('',TotLength-Length,WithCharacter);
          ELSE ThrowError(Text002);
        END;
      END;

      EXIT(String);
    END;

    PROCEDURE FillBufferProjectExport@1100529903();
    VAR
      Job@1100529900 : Record 11072003;
      BuffTxt@1100529901 : Text;
      lvType1@1100529904 : Text[30];
      lvType2@1100529903 : Text[30];
      lvPostCode@1100529902 : Text[30];
    BEGIN
      BufferHourExport.LOCKTABLE;
      BufferHourExport.DELETEALL;
      LineNo := 0;

      WITH Job DO BEGIN
        SETRANGE("Project Status","Project Status"::Production);

        IF FINDSET THEN
          REPEAT
            IF "Location Type 1" = "Location Type 1"::Inside THEN
              lvType1 := 'BI'
            ELSE
              lvType1 := 'BU';
            IF "Location Type 2" = "Location Type 2"::Home THEN
              lvType2 := '0'
            ELSE
              lvType2 := '1';
            lvPostCode := "Post Code";
            lvPostCode := DELCHR(lvPostCode, '<>=', ' ABCDEFGHIJKLMNOPQRSTUVWXYZ');

            BuffTxt := '';
            BuffTxt := BuffTxt + '056' + PaymasterCompany."Company Salary Application" + PaymasterCompany.Administration + sep;
            BuffTxt := BuffTxt + '3603' + COPYSTR("No.",1,10) + sep;
            BuffTxt := BuffTxt + '3604' + COPYSTR("No.",11,10) + sep;
            BuffTxt := BuffTxt + '3605' + sep;
            BuffTxt := BuffTxt + '3611' + Address + sep;
            BuffTxt := BuffTxt + '3612' + lvPostCode + sep;
            BuffTxt := BuffTxt + '3613' + City + sep;
            BuffTxt := BuffTxt + '3614' + "SFB Code" + sep;
            BuffTxt := BuffTxt + '3615' + lvType1 + sep;
            BuffTxt := BuffTxt + '3616' + "Affiliation No." + sep;
            BuffTxt := BuffTxt + '3617' + FORMAT("Starting Date",0,'<Year4><Month,2><Day,2>') + sep;
            BuffTxt := BuffTxt + '3618' + FORMAT("Ending Date",0,'<Year4><Month,2><Day,2>') + sep;
            BuffTxt := BuffTxt + '3619' + lvType2 + sep;

            WriteBufferHourExport(BuffTxt);
          UNTIL NEXT = 0;

      END;
    END;

    PROCEDURE FillBufferHourExport@12();
    VAR
      RecRef@1100529900 : RecordRef;
    BEGIN
      BufferHourExport.LOCKTABLE;
      BufferHourExport.DELETEALL;
      LineNo := 0;
      ExportDateTime := CURRENTDATETIME;

      WITH PostedHourLine DO BEGIN
        SETCURRENTKEY("Document No.", "Employee No.");
        IF DocumentNo <> '' THEN
          SETFILTER("Document No.", DocumentNo);
        IF gvEmployer <> '' THEN
          SETFILTER(Employer, gvEmployer);
        IF NotExportedLinesOnly THEN
          SETRANGE(Exported, FALSE);
        SETRANGE(External, FALSE);
        SETFILTER("Supplying Company", '%1', '');
        IF CostTypePlant THEN
          SETFILTER("Cost Type",'%1|%2|%3',"Cost Type"::Labor,"Cost Type"::Sundry,"Cost Type"::Plant)
        ELSE
          SETFILTER("Cost Type",'%1|%2',"Cost Type"::Labor,"Cost Type"::Sundry);

        IF FINDSET(TRUE,FALSE) THEN
          REPEAT
            RecRef.GETTABLE(PostedHourLine);
            XMLportStatusDialogMgt.ShowExportStatus(RecRef);

            TestHourLine;
            IF HumanResourcesSetup."Compress Hours Paymaster" THEN
              CompressAndFillTempHourLine
            ELSE BEGIN
              IF "Component Type" = "Component Type"::Hours THEN BEGIN
                IF Monday <> 0 THEN AddHourLine(Monday,1);
                IF Tuesday <> 0 THEN AddHourLine(Tuesday,2);
                IF Wednesday <> 0 THEN AddHourLine(Wednesday,3);
                IF Thursday <> 0 THEN AddHourLine(Thursday,4);
                IF Friday <> 0 THEN AddHourLine(Friday,5);
                IF Saturday <> 0 THEN AddHourLine(Saturday,6);
                IF Sunday <> 0 THEN AddHourLine(Sunday,7);
              END ELSE BEGIN
                AddHourLine(0,0);
              END;
            END;
            Status := Status::Export;
            Exported := TRUE;
            "Exported on" := ExportDateTime;
            MODIFY;
          UNTIL NEXT = 0;
      END;

      HandleCompressedHours;
    END;

    PROCEDURE TestHourLine@8();
    VAR
      lvText001@1210190003 : TextConst 'ENU=%1 %2 is to long for Paymaster. Maximum length is set to %3.;SVE=%1 %2 „r f”r l†ng f”r Paymaster. Maximal l„ngd „r angiven som %3.';
      lvText002@1210190002 : TextConst 'ENU=%1 %2 has an alphanumeric code. Paymaster allowes only numeric codes.;SVE=%1 %2 har en alfanumerisk kod. Paymaster till†ter endast numeriska koder.';
    BEGIN
      WITH PostedHourLine DO BEGIN
        TESTFIELD("Wage Component");
        ElementTxt := DELCHR(Element, '<>=', '.');

        IF STRLEN("Project No.") > 10 THEN
          ThrowError(STRSUBSTNO(lvText001, FIELDCAPTION("Project No."), "Project No.", 10));

        IF STRLEN(ElementTxt) > 10 THEN
          ThrowError(STRSUBSTNO(lvText001, FIELDCAPTION(Element), ElementTxt, 10));

        IF STRLEN("Cost Object") > 10 THEN
          ThrowError(STRSUBSTNO(lvText001, FIELDCAPTION("Cost Object"), "Cost Object", 10));

        IF STRLEN("Wage Component") > 4 THEN
          ThrowError(STRSUBSTNO(lvText001, FIELDCAPTION("Wage Component"), "Wage Component", 4));

        IF STRLEN("Employee No.") > 10 THEN
          ThrowError(STRSUBSTNO(lvText001, FIELDCAPTION("Employee No."), "Employee No.", 10));

        IF Alphanumeric("Wage Component") THEN
          ThrowError(STRSUBSTNO(lvText002, FIELDCAPTION("Wage Component"), "Wage Component"));

        IF Alphanumeric("Employee No.") THEN
          ThrowError(STRSUBSTNO(lvText002, FIELDCAPTION("Employee No."), "Employee No."));
      END;
    END;

    PROCEDURE CompressAndFillTempHourLine@1100485008();
    VAR
      LastLineNo@1100485000 : Integer;
    BEGIN
      WITH TempPostedHourLineRec DO BEGIN

        RESET;
        SETRANGE(Year, PostedHourLine.Year);
        SETRANGE(Week, PostedHourLine.Week);
        SETRANGE("Employee No.", PostedHourLine."Employee No.");
        IF FINDLAST THEN
          LastLineNo := "Line No."
        ELSE
          LastLineNo := 0;

        RESET;
        SETRANGE(Year, PostedHourLine.Year);
        SETRANGE(Week, PostedHourLine.Week);
        SETRANGE(Employer, PostedHourLine.Employer);
        SETRANGE("Employee No.", PostedHourLine."Employee No.");
        SETRANGE("Document No.", PostedHourLine."Document No.");
        SETRANGE("Receiving Company", PostedHourLine."Receiving Company");
        SETRANGE("Component Type", PostedHourLine."Component Type");
        SETRANGE("Wage Component", PostedHourLine."Wage Component");
        SETRANGE(Type, PostedHourLine.Type);
        SETRANGE("Cost Code", PostedHourLine."Cost Code");
        SETRANGE("Posting Date", PostedHourLine."Posting Date");
        IF NOT FINDLAST THEN BEGIN
          "Line No." := LastLineNo + 1;
          Year := PostedHourLine.Year;
          Week := PostedHourLine.Week;
          "Employee No." := PostedHourLine."Employee No.";

          INIT;
          Employer := PostedHourLine.Employer;
          "Document No." := PostedHourLine."Document No.";
          "Receiving Company" := PostedHourLine."Receiving Company";
          "Component Type" := PostedHourLine."Component Type";
          "Wage Component" := PostedHourLine."Wage Component";
          Type := PostedHourLine.Type;
          "Cost Code" := PostedHourLine."Cost Code";
          "Posting Date" := PostedHourLine."Posting Date";
          INSERT;
        END;
        IF "Component Type" = "Component Type"::Hours THEN BEGIN
          Monday := Monday + PostedHourLine.Monday;
          Tuesday := Tuesday + PostedHourLine.Tuesday;
          Wednesday := Wednesday + PostedHourLine.Wednesday;
          Thursday := Thursday + PostedHourLine.Thursday;
          Friday := Friday + PostedHourLine.Friday;
          Saturday := Saturday + PostedHourLine.Saturday;
          Sunday := Sunday + PostedHourLine.Sunday;
        END;
        Quantity := Quantity + PostedHourLine.Quantity;
        "Amount (LCY)" := "Amount (LCY)" + PostedHourLine."Amount (LCY)";
        "Precalc. Surcharge Expenses" := "Precalc. Surcharge Expenses" + PostedHourLine."Precalc. Surcharge Expenses";
        MODIFY;
      END;
    END;

    PROCEDURE HandleCompressedHours@1100485013();
    BEGIN
      WITH TempPostedHourLineRec DO BEGIN
        RESET;
        IF FINDSET(FALSE, FALSE) THEN BEGIN
          REPEAT
            PostedHourLine := TempPostedHourLineRec;
            IF "Component Type" = "Component Type"::Hours THEN BEGIN
              IF Monday <> 0 THEN AddHourLine(Monday,1);
              IF Tuesday <> 0 THEN AddHourLine(Tuesday,2);
              IF Wednesday <> 0 THEN AddHourLine(Wednesday,3);
              IF Thursday <> 0 THEN AddHourLine(Thursday,4);
              IF Friday <> 0 THEN AddHourLine(Friday,5);
              IF Saturday <> 0 THEN AddHourLine(Saturday,6);
              IF Sunday <> 0 THEN AddHourLine(Sunday,7);
            END ELSE BEGIN
              AddHourLine(0,0);
            END;
          UNTIL NEXT = 0;
        END;

      END;
    END;

    PROCEDURE AddHourLine@1210190002(HoursPerDay@1210190005 : Decimal;DayNo@1210190004 : Integer);
    VAR
      lvType@1210190000 : Text[30];
      lvSign@1210190002 : Text[30];
      lvPostDate@1210190007 : Text[30];
      lvOrigDate@1210190006 : Text[30];
      lvQuanTxt@1210190003 : Text[30];
      lvQuanDec@1210190001 : ARRAY [8] OF Decimal;
      lvProjectNo@1100485000 : Code[20];
      LvDriverType@1100525000 : Integer;
      lvQuanKMDec@1100525002 : Decimal;
      BuffTxt@1100529900 : Text;
    BEGIN
      WITH PostedHourLine DO BEGIN
        DetermineCompany(Employer, "Employee No.");
        FillLogBook("Document No.");
        CASE "Component Type" OF
          "Component Type"::Hours:
            BEGIN
              WageComponentRec.GET("Wage Component");
              IF WageComponentRec."Travel Hours" THEN BEGIN
                IF NOT HumanResourcesSetup."Export KM (Paymaster)" THEN
                  lvQuanDec[1] := HoursPerDay
                ELSE
                  GetSiteMngmtHourLines(PostedHourLine,WageComponentRec,DayNo,lvQuanKMDec,LvDriverType);
              END ELSE BEGIN
                lvQuanDec[1] := HoursPerDay;
              END;
            END;
          "Component Type"::Expenses:
            BEGIN
              WageComponentRec.GET("Wage Component");
              IF WageComponentRec."Export Quantity i.s.o. Amount" THEN
                lvQuanDec[1] := Quantity
              ELSE
                lvQuanDec[1] := "Amount (LCY)" - "Precalc. Surcharge Expenses";
            END;
          "Component Type"::Days:
            lvQuanDec[1] := Quantity;
        END;
        IF lvQuanDec[1] < 0 THEN
          lvSign := '-'
        ELSE
          lvSign := '+';
        lvQuanTxt := FORMAT(ABS(lvQuanDec[1]),0,'<Precision,2:><Standard format,0>');
        IF (STRPOS(lvQuanTxt, '.') > 0) AND (STRPOS(lvQuanTxt, ',') > 0) THEN BEGIN
          IF STRPOS(lvQuanTxt, '.') < STRPOS(lvQuanTxt, ',') THEN
            lvQuanTxt := DELCHR(lvQuanTxt, '=', '.')
          ELSE
            lvQuanTxt := DELCHR(lvQuanTxt, '=', ',');
        END;
        lvPostDate := FORMAT("Posting Date",0,'<Year4><Month,2><Day,2>');
        IF DayNo = 0 THEN
          lvOrigDate := lvPostDate
        ELSE
          lvOrigDate := FORMAT(DWY2DATE(DayNo, Week, Year),0,'<Year4><Month,2><Day,2>');

        lvType := '';
        IF Type = Type::Project THEN lvType := 'P';
        IF Type = Type::Service THEN lvType := 'S';
        IF Type = Type::Indirect THEN BEGIN
          lvType := 'G';
          CostCodeRec.GET(PostedHourLine."Cost Code");
          IF NOT CostCodeRec."No Ledger Entry" THEN
            CostCodeRec.TESTFIELD("Account No.");
        END;

        BuffTxt := BuffTxt + '059' + PaymasterCompany."Company Salary Application" + PaymasterCompany.Administration +
          FillSeqLine("Employee No.",12,'0','<') + sep + '01' + sep;
        BuffTxt := BuffTxt + '2704' + DeterminePeriod(PostedHourLine, DayNo) + sep;
        IF SalPerVar ='' THEN
          BuffTxt := BuffTxt + '2705' + '00' + sep
        ELSE BEGIN
          IF STRLEN(SalPerVar) = 1 THEN
            SalPerVar := '0' + SalPerVar;
          BuffTxt := BuffTxt + '2705' + SalPerVar + sep
        END;
        BuffTxt := BuffTxt + '2634' + lvPostDate+ sep;
        BuffTxt := BuffTxt + '260700000000' + sep;
        BuffTxt := BuffTxt + '2621' + FillSeqLine("Wage Component",4,'0','<') + sep;
        BuffTxt := BuffTxt + '2622' + lvSign + FillSeqLine(lvQuanTxt,10,'0','<') + sep;
        BuffTxt := BuffTxt + '2635' + lvOrigDate+ sep;
        BuffTxt := BuffTxt + '2631' + lvType + sep;
        BuffTxt := BuffTxt + '2636' + '4PS' + sep;
        BuffTxt := BuffTxt + '3233' + DetermineDiffCompAndAdmin("Receiving Company") + sep;
        CASE Type OF
          Type::Indirect:
            BEGIN
              BuffTxt := BuffTxt + '2637' + CostCodeRec."Account No." + sep ;
              IF NOT CostCodeRec."No Ledger Entry" THEN BEGIN
                CASE CostCodeRec."Source Global Dim 1 Code" OF
                  CostCodeRec."Source Global Dim 1 Code"::Fixed:
                    BuffTxt := BuffTxt + '2638' + CostCodeRec."Global Dimension 1 Code" + sep;
                  CostCodeRec."Source Global Dim 1 Code"::"Trade Association":
                    BEGIN
                      IF EmplRec.GET ( "Employee No.") THEN
                        IF EmplRec."Trade Association"<>'' THEN
                          IF TradeAssRec.GET(EmplRec."Trade Association") THEN
                            IF TradeAssRec."Source Department Code"=  TradeAssRec."Source Department Code":: "Trade Association" THEN
                              BuffTxt := BuffTxt + '2638' + TradeAssRec."Department Code" + sep
                            ELSE
                              BuffTxt := BuffTxt + '2638' + EmplRec."Global Dimension 1 Code" + sep;
                    END;
                  CostCodeRec."Source Global Dim 1 Code"::Employee:
                    BEGIN
                      IF EmplRec.GET ( "Employee No.") THEN
                        BuffTxt := BuffTxt + '2638' + EmplRec."Global Dimension 1 Code" + sep;
                    END;
                END;
              END;
            END;
          Type::Project:
            BEGIN
              BuffTxt := BuffTxt + '2637' + "Project No." + sep;
              IF HumanResourcesSetup."Length Element (Extern)" > 0 THEN BEGIN
                BuffTxt := BuffTxt + '2638' + ElementTxt + sep;
                BuffTxt := BuffTxt + '2639' + "Cost Object" + sep;
              END ELSE
                BuffTxt := BuffTxt + '2638' + "Cost Object" + sep;
            END;
          Type::Service:
            BEGIN
              BuffTxt := BuffTxt + '2637' + "Service Order No." + sep;
              BuffTxt := BuffTxt + '2638' + "Cost Object" + sep;
              IF (PostedHourLine."Additional Cost (Service)") THEN
                BuffTxt := BuffTxt + '2639' + '1' + sep
              ELSE
                BuffTxt := BuffTxt + '2639' + '0' + sep
            END;
          ELSE
            BuffTxt := BuffTxt + '2637' + "Project No." + sep;
        END;

        IF HumanResourcesSetup."Export KM (Paymaster)" THEN BEGIN
          IF lvQuanDec[1] = 0 THEN BEGIN
            CASE LvDriverType OF
              1:BuffTxt := BuffTxt + FORMAT(Week)+'031'+FORMAT(Week)+'04'+FORMAT(lvQuanKMDec)+sep;
              2:BuffTxt := BuffTxt + FORMAT(Week)+'030'+FORMAT(Week)+'04'+FORMAT(lvQuanKMDec)+sep;
              3:BuffTxt := BuffTxt + FORMAT(Week)+'08'+FORMAT(Week)+'04'+FORMAT(lvQuanKMDec)+sep;
            END;
          END;
        END;
      END;

      WriteBufferHourExport(BuffTxt);

      IF UseExtension THEN BEGIN
        IF PostedHourLine.Type = PostedHourLine.Type::Indirect THEN
          lvProjectNo := CostCodeRec."Account No."
        ELSE
          lvProjectNo := PostedHourLine."Project No.";
        WriteCompRelRec(PaymasterCompany."Company Salary Application",
                        PaymasterCompany.Administration,
                        PostedHourLine."Employee No.",
                        lvType,
                        lvProjectNo,
                        ElementTxt,
                        PostedHourLine."Cost Object",
                        PostedHourLine."Wage Component",
                        DeterminePeriodEndingDate(PostedHourLine),
                        COMPANYNAME,
                        PostedHourLine."Receiving Company");
      END;
    END;

    PROCEDURE FillLogBook@33(CurrDocNo@1100485000 : Code[20]);
    VAR
      ExportRec@1210190000 : Record 11012041;
      LineNo@1210190001 : Integer;
    BEGIN
      IF CurrDocNo = LastDocNo THEN EXIT;

      IF ExportRec.FIND('+') THEN
        LineNo := ExportRec."Line No." + 1
      ELSE
        LineNo := 1;

      ExportRec.INIT;
      ExportRec."Line No." := LineNo;
      ExportRec."Document No." := CurrDocNo;
      ExportRec."User ID" := USERID;
      ExportRec.Date := TODAY;
      ExportRec.Time := TIME;
      ExportRec.INSERT;

      LastDocNo := ExportRec."Document No.";
    END;

    PROCEDURE DetermineCompany@1210190004(lvEmployer@1210190000 : Code[20];lvEmployee@1210190001 : Code[20]);
    VAR
      lvText000@1210190002 : TextConst 'ENU=Company %1 with %2 %3 not present for hour accounting export in table %4.';
      EmplRec@1210190003 : Record 5200;
    BEGIN
      IF lvEmployer = '' THEN BEGIN
        EmplRec.GET(lvEmployee);
        lvEmployer := EmplRec.Employer;
      END;

      PaymasterCompany.RESET;
      PaymasterCompany.SETCURRENTKEY("Navision Company", Employer);
      PaymasterCompany.SETRANGE("Navision Company", COMPANYNAME);
      PaymasterCompany.SETRANGE(Employer, lvEmployer);
      IF NOT PaymasterCompany.FIND('-') THEN
        ThrowError(
          STRSUBSTNO(
            lvText000,COMPANYNAME, PaymasterCompany.FIELDCAPTION(Employer), lvEmployer, PaymasterCompany.TABLECAPTION));
    END;

    PROCEDURE DeterminePeriod@1100485000(PostedHourLine@1100485004 : Record 11012085;DayNo@1100485000 : Integer) lvPeriod : Text[30];
    VAR
      EmplRec@1100485001 : Record 5200;
      EmployerRec@1100485002 : Record 11012013;
      lvDate@1100485003 : Date;
    BEGIN
      IF SalaryPeriod > 0 THEN
        EXIT(FORMAT(SalaryPeriod));

      WITH PostedHourLine DO BEGIN
        EmplRec.GET("Employee No.");
        IF NOT EmployerRec.GET(EmplRec.Employer) THEN
          EmployerRec."Period Type" := HumanResourcesSetup."Hour Document No.";

        CASE EmployerRec."Period Type" OF
          EmployerRec."Period Type"::Week:
            lvPeriod := FORMAT(Week);
          EmployerRec."Period Type"::"4-Weeks":
            lvPeriod := FORMAT(((Week-1) DIV 4) + 1);
          EmployerRec."Period Type"::Month:
            BEGIN
              IF DayNo = 0 THEN
                lvDate := "Posting Date"
              ELSE
                lvDate := DWY2DATE(DayNo, Week, Year);
              lvPeriod := FORMAT(DATE2DMY(lvDate,2));
            END;
        END;
      END;

      EXIT(lvPeriod);
    END;

    PROCEDURE DeterminePeriodEndingDate@1000000001(PostedHourLine@1100485004 : Record 11012085) rPeriodEndDate : Date;
    VAR
      EmplRec@1100485001 : Record 5200;
      EmployerRec@1100485002 : Record 11012013;
      DayNo@1000000000 : Integer;
      WeekNo@1000000001 : Integer;
      YearNo@1000000002 : Integer;
    BEGIN
      WITH PostedHourLine DO BEGIN
        EmplRec.GET("Employee No.");
        IF NOT EmployerRec.GET(EmplRec.Employer) THEN
          EmployerRec."Period Type" := HumanResourcesSetup."Hour Document No.";

        CASE EmployerRec."Period Type" OF
          EmployerRec."Period Type"::Week:
            rPeriodEndDate := CALCDATE('<CW>',"Posting Date")-2;
          EmployerRec."Period Type"::"4-Weeks":
            BEGIN
              DayNo := DATE2DWY("Posting Date",1);
              WeekNo := DATE2DWY("Posting Date",2);
              YearNo := DATE2DWY("Posting Date",3);
              rPeriodEndDate := DWY2DATE(7,4 * (((WeekNo-1) DIV 4) + 1),YearNo)-2;
            END;
          EmployerRec."Period Type"::Month:
            rPeriodEndDate := CALCDATE('<CM>',"Posting Date");
        END;
      END;
    END;

    PROCEDURE WriteCompRelRec@1100485001(PaymCompany@1100485000 : Code[10];PaymAdministration@1100485001 : Code[10];Employee@1100485002 : Code[20];RecType@1100485003 : Code[1];ProjectNo@1100485004 : Code[20];ElementCode@1100485005 : Text[30];CostObjectCode@1100485006 : Code[20];WageCode@1100485007 : Code[10];HourDate@1100485008 : Date;OrgCompany@1100485009 : Text[30];RecCompany@1100485010 : Text[30]);
    BEGIN
      PaymasterRecordExtensionRec.Company := PaymCompany;
      PaymasterRecordExtensionRec.Administration := PaymAdministration;
      PaymasterRecordExtensionRec.Employee := Employee;
      PaymasterRecordExtensionRec."Record Type" := RecType;
      PaymasterRecordExtensionRec."Project/ GL AccountNo" := ProjectNo;
      PaymasterRecordExtensionRec."Element Code" := ElementCode;
      PaymasterRecordExtensionRec."Cost Object Code" := CostObjectCode;
      PaymasterRecordExtensionRec."Wage Code" := WageCode;
      PaymasterRecordExtensionRec."Hour Date" := HourDate;
      PaymasterRecordExtensionRec."Org Company" := OrgCompany;
      PaymasterRecordExtensionRec."Receiving Company" := RecCompany;
      IF PaymasterRecordExtensionRec.INSERT THEN;
    END;

    LOCAL PROCEDURE DetermineDiffCompAndAdmin@1210190008(ReceivingCompany@1210190000 : Text[30]) : Text[30];
    VAR
      PaymasterCompany@1210190001 : Record 11012375;
    BEGIN
      IF ReceivingCompany = '' THEN
        EXIT('');

      PaymasterCompany.SETRANGE("Navision Company", ReceivingCompany);
      IF NOT PaymasterCompany.FINDFIRST THEN
        ThrowError(STRSUBSTNO(
          Text003,
          PaymasterCompany.TABLECAPTION,
          PaymasterCompany.FIELDCAPTION("Navision Company"),
          ReceivingCompany))
      ELSE
        EXIT(PaymasterCompany."Company Salary Application" + PaymasterCompany.Administration);
    END;

    LOCAL PROCEDURE ThrowError@1100528403(ErrorMessage@1100528400 : Text[1024]);
    BEGIN
      // When statement "Error(ErrorMessage);" is executed during export,
      // only error message "Could not process node Root." is given.
      MESSAGE(ErrorMessage);
      ERROR('');
    END;

    LOCAL PROCEDURE GetSiteMngmtHourLines@1100525002(PostedHourLine@1100525003 : Record 11012085;WageComponent@1100525004 : Record 11012014;Dayno@1100525006 : Integer;VAR QuanDec@1100525000 : Decimal;VAR DriverType@1100525001 : Integer);
    VAR
      SiteMngmntHoursLine@1100525002 : Record 11012361;
      SiteMngmntHoursEmployee@1100525005 : Record 11012357;
    BEGIN
      SiteMngmntHoursEmployee.SETRANGE("No.",PostedHourLine."Employee No.");
      IF NOT SiteMngmntHoursEmployee.FINDFIRST THEN
        ThrowError(Text004);
      SiteMngmntHoursLine.SETRANGE(Year,PostedHourLine.Year);
      SiteMngmntHoursLine.SETRANGE(Week,PostedHourLine.Week);
      SiteMngmntHoursLine.SETRANGE("Supplying Company",SiteMngmntHoursEmployee.Company);
      SiteMngmntHoursLine.SETRANGE("Employee No.",PostedHourLine."Employee No.");
      SiteMngmntHoursLine.SETRANGE(SiteMngmntHoursLine.Status,SiteMngmntHoursLine.Status::Posted);
      SiteMngmntHoursLine.SETRANGE(SiteMngmntHoursLine."Component Type",SiteMngmntHoursLine."Component Type"::Kilometers);
      SiteMngmntHoursLine.SETRANGE(Type,SiteMngmntHoursLine.Type::Project);
      IF SiteMngmntHoursLine.FINDFIRST THEN
        SetSiteMngmtHourVars(SiteMngmntHoursLine,PostedHourLine,Dayno,QuanDec,DriverType);
    END;

    LOCAL PROCEDURE WageComponentIsKilometerExpense@1100525039(Code@1100525002 : Code[20]) : Boolean;
    VAR
      WageComponent@1100525001 : Record 11012014;
    BEGIN
      IF WageComponent.GET(Code) THEN
        EXIT(WageComponentRec."Kilometer Expense");
    END;

    LOCAL PROCEDURE DateCheck@1100525040(dayno@1100525000 : Integer;PostedHourLine@1100525004 : Record 11012085) : Boolean;
    VAR
      WorkDate@1100525003 : Date;
    BEGIN
      WorkDate := CALCDATE(STRSUBSTNO('<+%1W-WD%2>',PostedHourLine.Week,dayno),DMY2DATE(1,1,PostedHourLine.Year));
      IF WorkDate = PostedHourLine."Posting Date" THEN
        EXIT(TRUE);
    END;

    LOCAL PROCEDURE SetSiteMngmtHourVars@1100525001(SiteMngmntHoursLine@1100525004 : Record 11012361;PostedHourLine@1100525003 : Record 11012085;Dayno@1100525002 : Integer;VAR QuanDec@1100525001 : Decimal;VAR DriverType@1100525000 : Integer);
    BEGIN
      CASE Dayno OF
        1:BEGIN
            IF DateCheck(Dayno,PostedHourLine) THEN BEGIN
              QuanDec := SiteMngmntHoursLine.Monday;
              DriverType := SiteMngmntHoursLine."Travel Hours Monday";
            END;
          END;
        2:BEGIN
            IF DateCheck(Dayno,PostedHourLine) THEN BEGIN
              QuanDec := SiteMngmntHoursLine.Tuesday;
              DriverType := SiteMngmntHoursLine."Travel Hours Tuesday";
            END;
          END;
        3:BEGIN
            IF DateCheck(Dayno,PostedHourLine) THEN BEGIN
              QuanDec := SiteMngmntHoursLine.Wednesday;
              DriverType := SiteMngmntHoursLine."Travel Hours Wednesday";
            END;
          END;
        4:BEGIN
            IF DateCheck(Dayno,PostedHourLine) THEN BEGIN
              QuanDec := SiteMngmntHoursLine.Thursday;
              DriverType := SiteMngmntHoursLine."Travel Hours Thursday";
            END;
          END;
        5:BEGIN
            IF DateCheck(Dayno,PostedHourLine) THEN BEGIN
              QuanDec := SiteMngmntHoursLine.Friday;
              DriverType := SiteMngmntHoursLine."Travel Hours Friday";
            END;
          END;
        6:BEGIN
            IF DateCheck(Dayno,PostedHourLine) THEN BEGIN
              QuanDec := SiteMngmntHoursLine.Saturday;
              DriverType := SiteMngmntHoursLine."Travel Hours Saturday";
            END;
          END;
        7:BEGIN
            IF DateCheck(Dayno,PostedHourLine) THEN BEGIN
              QuanDec := SiteMngmntHoursLine.Sunday;
              DriverType := SiteMngmntHoursLine."Travel Hours Sunday";
            END;
          END;
      END;
    END;

    PROCEDURE WriteBufferHourExport@1100529901(BuffTxt@1100529900 : Text);
    BEGIN
      WITH BufferHourExport DO BEGIN
        INIT;
        "Line No." := LineNo;
        Text := BuffTxt;
        INSERT;
      END;

      LineNo += 1;
    END;

    BEGIN
    END.
  }
}

