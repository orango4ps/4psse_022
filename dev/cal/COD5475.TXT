OBJECT Codeunit 5475 Graph Mgt - Sales Invoice
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    Permissions=TableData 112=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {

    [External]
    PROCEDURE ProcessComplexTypes@1(VAR SalesInvoiceEntityAggregate@1000 : Record 5475;SellToAddressJSON@1001 : Text);
    BEGIN
      ParseSellToCustomerAddressFromJSON(SellToAddressJSON,SalesInvoiceEntityAggregate);
    END;

    [External]
    PROCEDURE ParseSellToCustomerAddressFromJSON@6(SellToAddressJSON@1000 : Text;VAR SalesInvoiceEntityAggregate@1002 : Record 5475);
    VAR
      GraphMgtComplexTypes@1003 : Codeunit 5468;
      RecRef@1001 : RecordRef;
    BEGIN
      IF SellToAddressJSON <> '' THEN
        WITH SalesInvoiceEntityAggregate DO BEGIN
          RecRef.GETTABLE(SalesInvoiceEntityAggregate);
          GraphMgtComplexTypes.ApplyPostalAddressFromJSON(SellToAddressJSON,RecRef,
            FIELDNO("Sell-to Address"),FIELDNO("Sell-to Address 2"),FIELDNO("Sell-to City"),FIELDNO("Sell-to County"),
            FIELDNO("Sell-to Country/Region Code"),FIELDNO("Sell-to Post Code"));
          RecRef.SETTABLE(SalesInvoiceEntityAggregate);
        END;
    END;

    [External]
    PROCEDURE ParseBillToCustomerAddressFromJSON@10(BillToAddressJSON@1000 : Text;VAR SalesInvoiceEntityAggregate@1002 : Record 5475);
    VAR
      GraphMgtComplexTypes@1003 : Codeunit 5468;
      RecRef@1001 : RecordRef;
    BEGIN
      IF BillToAddressJSON <> '' THEN
        WITH SalesInvoiceEntityAggregate DO BEGIN
          RecRef.GETTABLE(SalesInvoiceEntityAggregate);
          GraphMgtComplexTypes.ApplyPostalAddressFromJSON(BillToAddressJSON,RecRef,
            FIELDNO("Bill-to Address"),FIELDNO("Bill-to Address 2"),FIELDNO("Bill-to City"),FIELDNO("Bill-to County"),
            FIELDNO("Bill-to Country/Region Code"),FIELDNO("Bill-to Post Code"));
          RecRef.SETTABLE(SalesInvoiceEntityAggregate);
        END;
    END;

    [External]
    PROCEDURE ParseShipToCustomerAddressFromJSON@7(ShipToAddressJSON@1000 : Text;VAR SalesInvoiceEntityAggregate@1002 : Record 5475);
    VAR
      GraphMgtComplexTypes@1003 : Codeunit 5468;
      RecRef@1001 : RecordRef;
    BEGIN
      IF ShipToAddressJSON <> '' THEN
        WITH SalesInvoiceEntityAggregate DO BEGIN
          RecRef.GETTABLE(SalesInvoiceEntityAggregate);
          GraphMgtComplexTypes.ApplyPostalAddressFromJSON(ShipToAddressJSON,RecRef,
            FIELDNO("Ship-to Address"),FIELDNO("Ship-to Address 2"),FIELDNO("Ship-to City"),FIELDNO("Ship-to County"),
            FIELDNO("Ship-to Country/Region Code"),FIELDNO("Ship-to Post Code"));
          RecRef.SETTABLE(SalesInvoiceEntityAggregate);
        END;
    END;

    [External]
    PROCEDURE SellToCustomerAddressToJSON@5(SalesInvoiceEntityAggregate@1000 : Record 5475) JSON : Text;
    VAR
      GraphMgtComplexTypes@1001 : Codeunit 5468;
    BEGIN
      WITH SalesInvoiceEntityAggregate DO
        GraphMgtComplexTypes.GetPostalAddressJSON("Sell-to Address","Sell-to Address 2",
          "Sell-to City","Sell-to County","Sell-to Country/Region Code","Sell-to Post Code",JSON);
    END;

    [External]
    PROCEDURE BillToCustomerAddressToJSON@4(SalesInvoiceEntityAggregate@1000 : Record 5475) JSON : Text;
    VAR
      GraphMgtComplexTypes@1001 : Codeunit 5468;
    BEGIN
      WITH SalesInvoiceEntityAggregate DO
        GraphMgtComplexTypes.GetPostalAddressJSON("Bill-to Address","Bill-to Address 2",
          "Bill-to City","Bill-to County","Bill-to Country/Region Code","Bill-to Post Code",JSON);
    END;

    [External]
    PROCEDURE ShipToCustomerAddressToJSON@3(SalesInvoiceEntityAggregate@1000 : Record 5475) JSON : Text;
    VAR
      GraphMgtComplexTypes@1001 : Codeunit 5468;
    BEGIN
      WITH SalesInvoiceEntityAggregate DO
        GraphMgtComplexTypes.GetPostalAddressJSON("Ship-to Address","Ship-to Address 2",
          "Ship-to City","Ship-to County","Ship-to Country/Region Code","Ship-to Post Code",JSON);
    END;

    [External]
    PROCEDURE UpdateIntegrationRecordIds@34(OnlyRecordsWithoutID@1007 : Boolean);
    VAR
      DummySalesInvoiceEntityAggregate@1001 : Record 5475;
      DummyCustomer@1005 : Record 18;
      GraphMgtGeneralTools@1008 : Codeunit 5465;
      SalesInvoiceHeaderRecordRef@1002 : RecordRef;
      SalesHeaderRecordRef@1000 : RecordRef;
      CustomerRecordRef@1004 : RecordRef;
    BEGIN
      CustomerRecordRef.OPEN(DATABASE::Customer);
      GraphMgtGeneralTools.UpdateIntegrationRecords(
        CustomerRecordRef,DummyCustomer.FIELDNO(Id),TRUE);

      SalesHeaderRecordRef.OPEN(DATABASE::"Sales Header");
      GraphMgtGeneralTools.UpdateIntegrationRecords(
        SalesHeaderRecordRef,DummySalesInvoiceEntityAggregate.FIELDNO(Id),OnlyRecordsWithoutID);

      SalesInvoiceHeaderRecordRef.OPEN(DATABASE::"Sales Invoice Header");
      GraphMgtGeneralTools.UpdateIntegrationRecords(
        SalesInvoiceHeaderRecordRef,DummySalesInvoiceEntityAggregate.FIELDNO(Id),OnlyRecordsWithoutID);
    END;

    [EventSubscriber(Codeunit,5465,ApiSetup)]
    PROCEDURE HandleApiSetup@2();
    VAR
      SalesInvoiceAggregator@1000 : Codeunit 5477;
    BEGIN
      UpdateIntegrationRecordIds(FALSE);
      SalesInvoiceAggregator.UpdateAggregateTableRecords;
    END;

    BEGIN
    END.
  }
}

