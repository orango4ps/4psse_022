OBJECT Codeunit 11012516 4PS Office Handler
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    TableNo=1600;
    OnRun=BEGIN
            IF Rec.Command <> '' THEN
              HandleCommand(Rec)
            ELSE
              HandleHyperlink(Rec);
          END;

  }
  CODE
  {
    VAR
      FPSOfficeDocumentSelection@1100527600 : TEMPORARY Record 11229424;

    LOCAL PROCEDURE HandleCommand@1100527603(OfficeAddinContext@1100527601 : Record 1600);
    VAR
      CustomOutlookActions@1100527600 : Record 11229437;
    BEGIN
      CASE OfficeAddinContext.Command OF
        'New-ServiceOrder': NewServiceOrder(OfficeAddinContext);
        'New-ServiceCall': NewServiceCall(OfficeAddinContext);
        'New-ResourceRequest': NewResourceRequest(OfficeAddinContext);
      END;
      IF CustomOutlookActions.FINDSET THEN
        REPEAT
          IF OfficeAddinContext.Command = CustomOutlookActions.GetCommand THEN
            OpenPage(CustomOutlookActions);
        UNTIL CustomOutlookActions.NEXT = 0;
    END;

    LOCAL PROCEDURE HandleHyperlink@1100527602(OfficeAddinContext@1100527600 : Record 1600);
    BEGIN
      FindAllDocumentMatches(OfficeAddinContext);

      CASE FPSOfficeDocumentSelection.COUNT OF
        0: PAGE.RUN(PAGE::"Office Doc Selection Dlg");
        1: OpenIndividualDocument(FPSOfficeDocumentSelection);
        ELSE
          PAGE.RUN(PAGE::"4PS Office Document Selection", FPSOfficeDocumentSelection);
      END;
    END;

    LOCAL PROCEDURE FindAllDocumentMatches@12(TempOfficeAddinContext@1100527600 : Record 1600);
    VAR
      DocMatch@1000 : Text;
      DocNo@1001 : Code[20];
    BEGIN
      DocMatch := TempOfficeAddinContext."Regular Expression Match" + '|';
      REPEAT
        TempOfficeAddinContext."Regular Expression Match" := COPYSTR(DocMatch,1,STRPOS(DocMatch,'|') - 1);
        DocMatch := COPYSTR(DocMatch,STRPOS(DocMatch,'|') + 1);
        CollectDocumentMatches(DocNo,TempOfficeAddinContext);
      UNTIL STRPOS(DocMatch,'|') = 0;
    END;

    LOCAL PROCEDURE CollectDocumentMatches@18(VAR DocNo@1010 : Code[20];TempOfficeAddinContext@1001 : TEMPORARY Record 1600);
    VAR
      DocNos@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
      Separator@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
    BEGIN
      IF (TempOfficeAddinContext."Document No." = '') AND (TempOfficeAddinContext."Regular Expression Match" <> '') THEN BEGIN
        IF NOT ExpressionContainsSeriesTitle(TempOfficeAddinContext."Regular Expression Match",DocNo) THEN
          ExpressionContainsKeyWords(TempOfficeAddinContext."Regular Expression Match",DocNo)
      END ELSE
        IF TempOfficeAddinContext."Document No." <> '' THEN BEGIN
          DocNos := TempOfficeAddinContext."Document No.";
          Separator := '|';
          FOREACH DocNo IN DocNos.Split(Separator.ToCharArray) DO
            WITH FPSOfficeDocumentSelection DO BEGIN
              SetSalesDocumentMatchRecord(DocNo,"Document Type"::Order);
              SetSalesDocumentMatchRecord(DocNo,"Document Type"::Quote);
              SetSalesDocumentMatchRecord(DocNo,"Document Type"::Invoice);
              SetSalesDocumentMatchRecord(DocNo,"Document Type"::"Credit Memo");

              SetPurchDocumentMatchRecord(DocNo,"Document Type"::Invoice);
              SetPurchDocumentMatchRecord(DocNo,"Document Type"::"Credit Memo");
              SetPurchDocumentMatchRecord(DocNo,"Document Type"::Order);

              SetServiceDocumentMatchRecord(DocNo,"Document Type"::"Service Order");
              SetServiceDocumentMatchRecord(DocNo,"Document Type"::"Service Call");
              SetServiceDocumentMatchRecord(DocNo,"Document Type"::"Service Object");
              SetServiceDocumentMatchRecord(DocNo,"Document Type"::"Resource Request");
            END;
        END;
    END;

    PROCEDURE OpenIndividualDocument@26(TempFPSOfficeDocumentSelection@1100527600 : TEMPORARY Record 11229424);
    BEGIN
      CASE TempFPSOfficeDocumentSelection.Series OF
        TempFPSOfficeDocumentSelection.Series::Sales:
          OpenIndividualSalesDocument(TempFPSOfficeDocumentSelection);
        TempFPSOfficeDocumentSelection.Series::Purchase:
          OpenIndividualPurchaseDocument(TempFPSOfficeDocumentSelection);
        TempFPSOfficeDocumentSelection.Series::Service:
          OpenIndividualServiceDocument(TempFPSOfficeDocumentSelection);
      END;
    END;

    LOCAL PROCEDURE CreateDocumentMatchRecord@22(Series@1001 : Option;DocType@1002 : Option;DocNo@1003 : Code[20];Posted@1004 : Boolean;DocDate@1005 : Date);
    BEGIN
      FPSOfficeDocumentSelection.INIT;
      FPSOfficeDocumentSelection.VALIDATE("Document No.",DocNo);
      FPSOfficeDocumentSelection.VALIDATE("Document Date",DocDate);
      FPSOfficeDocumentSelection.VALIDATE("Document Type",DocType);
      FPSOfficeDocumentSelection.VALIDATE(Series,Series);
      FPSOfficeDocumentSelection.VALIDATE(Posted,Posted);
      IF NOT FPSOfficeDocumentSelection.INSERT THEN;
    END;

    LOCAL PROCEDURE ExpressionContainsKeyWords@25(Expression@1000 : Text[250];VAR DocNo@1001 : Code[20]) : Boolean;
    VAR
      DummySalesHeader@1005 : Record 36;
      HyperlinkManifest@1002 : Codeunit 1643;
    BEGIN
      WITH DummySalesHeader DO
        CASE TRUE OF
          GetDocumentNumber(Expression,FORMAT("Document Type"::Quote),DocNo):
            SetSalesDocumentMatchRecord(DocNo,"Document Type"::Quote);
          GetDocumentNumber(Expression,FORMAT("Document Type"::Order),DocNo):
            BEGIN
              SetSalesDocumentMatchRecord(DocNo,"Document Type"::Order);
              SetPurchDocumentMatchRecord(DocNo,"Document Type"::Order);
            END;
          GetDocumentNumber(Expression,FORMAT("Document Type"::Invoice),DocNo):
            BEGIN
              SetSalesDocumentMatchRecord(DocNo,"Document Type"::Invoice);
              SetPurchDocumentMatchRecord(DocNo,"Document Type"::Invoice);
            END;
          GetDocumentNumber(Expression,FORMAT("Document Type"::"Credit Memo"),DocNo):
            BEGIN
              SetSalesDocumentMatchRecord(DocNo,"Document Type"::"Credit Memo");
              SetPurchDocumentMatchRecord(DocNo,"Document Type"::"Credit Memo");
            END;
          GetDocumentNumber(Expression,HyperlinkManifest.GetAcronymForPurchaseOrder,DocNo):
            SetPurchDocumentMatchRecord(DocNo,FPSOfficeDocumentSelection."Document Type"::Order);
          ELSE
            EXIT(FALSE);
        END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ExpressionContainsSeriesTitle@23(Expression@1000 : Text[250];VAR DocNo@1001 : Code[20]) : Boolean;
    VAR
      HyperlinkManifest@1002 : Codeunit 1643;
    BEGIN
      WITH HyperlinkManifest DO
        CASE TRUE OF
          GetDocumentNumber(Expression,GetNameForPurchaseCrMemo,DocNo):
            SetPurchDocumentMatchRecord(DocNo,FPSOfficeDocumentSelection."Document Type"::"Credit Memo");
          GetDocumentNumber(Expression,GetNameForPurchaseInvoice,DocNo):
            SetPurchDocumentMatchRecord(DocNo,FPSOfficeDocumentSelection."Document Type"::Invoice);
          GetDocumentNumber(Expression,GetNameForPurchaseOrder,DocNo):
            SetPurchDocumentMatchRecord(DocNo,FPSOfficeDocumentSelection."Document Type"::Order);
          GetDocumentNumber(Expression,GetNameForSalesCrMemo,DocNo):
            SetSalesDocumentMatchRecord(DocNo,FPSOfficeDocumentSelection."Document Type"::"Credit Memo");
          GetDocumentNumber(Expression,GetNameForSalesInvoice,DocNo):
            SetSalesDocumentMatchRecord(DocNo,FPSOfficeDocumentSelection."Document Type"::Invoice);
          GetDocumentNumber(Expression,GetNameForSalesOrder,DocNo):
            SetSalesDocumentMatchRecord(DocNo,FPSOfficeDocumentSelection."Document Type"::Order);
          GetDocumentNumber(Expression,GetNameForSalesQuote,DocNo):
            SetSalesDocumentMatchRecord(DocNo,FPSOfficeDocumentSelection."Document Type"::Quote);
          ELSE
            EXIT(FALSE);
        END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetDocumentNumber@28(Expression@1001 : Text[250];Keyword@1002 : Text;VAR DocNo@1009 : Code[20]) IsMatch : Boolean;
    VAR
      HyperlinkManifest@1003 : Codeunit 1643;
      DocNoRegEx@1010 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Regex";
    BEGIN
      DocNoRegEx := DocNoRegEx.Regex(STRSUBSTNO('(?i)(%1)[\#:\s]*(%2)',Keyword,HyperlinkManifest.GetNumberSeriesRegex));
      IsMatch := DocNoRegEx.IsMatch(Expression);
      IF IsMatch THEN
        DocNo := DocNoRegEx.Replace(Expression,'$2');
    END;

    LOCAL PROCEDURE GetSalesDocuments@8(VAR TempOfficeDocumentSelection@1000 : TEMPORARY Record 1620;Series@1001 : Integer;DocType@1002 : Integer);
    VAR
      SalesHeader@1005 : Record 36;
      SalesInvoiceHeader@1004 : Record 112;
      SalesCrMemoHeader@1003 : Record 114;
    BEGIN
      // Unposted
      SalesHeader.SETRANGE("Document Type",DocType);
      IF SalesHeader.FINDSET THEN
        REPEAT
          CreateDocumentMatchRecord(Series,DocType,
            SalesHeader."No.",FALSE,SalesHeader."Document Date");
        UNTIL SalesHeader.NEXT = 0;

      // Posted Invoices
      IF DocType = TempOfficeDocumentSelection."Document Type"::Invoice THEN
        IF SalesInvoiceHeader.FINDSET THEN
          REPEAT
            CreateDocumentMatchRecord(Series,DocType,
              SalesInvoiceHeader."No.",TRUE,SalesInvoiceHeader."Document Date");
          UNTIL SalesInvoiceHeader.NEXT = 0;

      // Posted Credit Memos
      IF DocType = TempOfficeDocumentSelection."Document Type"::"Credit Memo" THEN
        IF SalesCrMemoHeader.FINDSET THEN
          REPEAT
            CreateDocumentMatchRecord(Series,DocType,
              SalesCrMemoHeader."No.",TRUE,SalesCrMemoHeader."Document Date");
          UNTIL SalesCrMemoHeader.NEXT = 0;
    END;

    LOCAL PROCEDURE GetPurchaseDocuments@9(Series@1001 : Integer;DocType@1000 : Integer);
    VAR
      PurchaseHeader@1005 : Record 38;
      PurchInvHeader@1004 : Record 122;
      PurchCrMemoHdr@1003 : Record 124;
    BEGIN
      // Unposted
      PurchaseHeader.SETRANGE("Document Type",DocType);
      IF PurchaseHeader.FINDSET THEN
        REPEAT
          CreateDocumentMatchRecord(Series,DocType,
            PurchaseHeader."No.",FALSE,PurchaseHeader."Document Date");
        UNTIL PurchaseHeader.NEXT = 0;

      // Posted Invoices
      IF DocType = FPSOfficeDocumentSelection."Document Type"::Invoice THEN
        IF PurchInvHeader.FINDSET THEN
          REPEAT
            CreateDocumentMatchRecord(Series,DocType,
              PurchInvHeader."No.",TRUE,PurchInvHeader."Document Date");
          UNTIL PurchInvHeader.NEXT = 0;

      // Posted Credit Memos
      IF DocType = FPSOfficeDocumentSelection."Document Type"::"Credit Memo" THEN
        IF PurchCrMemoHdr.FINDSET THEN
          REPEAT
            CreateDocumentMatchRecord(Series,DocType,
              PurchCrMemoHdr."No.",TRUE,PurchCrMemoHdr."Document Date");
          UNTIL PurchCrMemoHdr.NEXT = 0;
    END;

    LOCAL PROCEDURE OpenIndividualSalesDocument@13(varFPSOfficeDocumentSelection@1100527600 : TEMPORARY Record 11229424);
    VAR
      SalesHeader@1008 : Record 36;
      SalesInvoiceHeader@1007 : Record 112;
      SalesCrMemoHeader@1006 : Record 114;
    BEGIN
      WITH varFPSOfficeDocumentSelection DO
        IF NOT Posted THEN
          IF SalesHeader.GET("Document Type","Document No.") THEN BEGIN
            CASE SalesHeader."Document Type" OF
              SalesHeader."Document Type"::Quote:
                PAGE.RUN(PAGE::"Sales Quote",SalesHeader);
              SalesHeader."Document Type"::Order:
                PAGE.RUN(PAGE::"Sales Order",SalesHeader);
              SalesHeader."Document Type"::Invoice:
                PAGE.RUN(PAGE::"Sales Invoice",SalesHeader);
              SalesHeader."Document Type"::"Credit Memo":
                PAGE.RUN(PAGE::"Sales Credit Memo",SalesHeader);
            END;
        END ELSE BEGIN
          IF "Document Type" = "Document Type"::Invoice THEN
            IF SalesInvoiceHeader.GET("Document No.") THEN
              PAGE.RUN(PAGE::"Posted Sales Invoice",SalesInvoiceHeader);
          IF "Document Type" = "Document Type"::"Credit Memo" THEN
            IF SalesCrMemoHeader.GET("Document No.") THEN
              PAGE.RUN(PAGE::"Posted Sales Credit Memo",SalesCrMemoHeader);
        END;
    END;

    LOCAL PROCEDURE OpenIndividualPurchaseDocument@21(varFPSOfficeDocumentSelection@1100527600 : TEMPORARY Record 11229424);
    VAR
      PurchaseHeader@1005 : Record 38;
      PurchInvHeader@1004 : Record 122;
      PurchCrMemoHdr@1003 : Record 124;
    BEGIN
      WITH varFPSOfficeDocumentSelection DO
        IF NOT Posted THEN
          IF PurchaseHeader.GET("Document Type","Document No.") THEN
            CASE PurchaseHeader."Document Type" OF
              PurchaseHeader."Document Type"::Invoice:
                PAGE.RUN(PAGE::"Purchase Invoice",PurchaseHeader);
              PurchaseHeader."Document Type"::"Credit Memo":
                PAGE.RUN(PAGE::"Purchase Credit Memo",PurchaseHeader);
              PurchaseHeader."Document Type"::Order:
                PAGE.RUN(PAGE::"Purchase Order",PurchaseHeader);
            END
        ELSE BEGIN
          IF "Document Type" = "Document Type"::Invoice THEN
            IF PurchInvHeader.GET("Document No.") THEN
              PAGE.RUN(PAGE::"Posted Purchase Invoice",PurchInvHeader);
          IF "Document Type" = "Document Type"::"Credit Memo" THEN
            IF PurchCrMemoHdr.GET("Document No.") THEN
              PAGE.RUN(PAGE::"Posted Purchase Credit Memo",PurchCrMemoHdr);
        END;
    END;

    LOCAL PROCEDURE OpenIndividualServiceDocument@1100527604(varFPSOfficeDocumentSelection@1100527604 : TEMPORARY Record 11229424);
    VAR
      ServiceObject@1100527600 : Record 11071691;
      ServiceOrder@1100527601 : Record 11012823;
      ServiceCall@1100527602 : Record 11012822;
      ResourceRequest@1100527603 : Record 11124901;
    BEGIN
      WITH varFPSOfficeDocumentSelection DO BEGIN
        CASE "Document Type" OF
          "Document Type"::"Service Order":
            BEGIN
              ServiceOrder.GET("Document No.");
              PAGE.RUN(PAGE::"Service Order (General)", ServiceOrder);
            END;
          "Document Type"::"Service Call":
            BEGIN
              ServiceCall.GET("Document No.");
              PAGE.RUN(PAGE::"Service Call", ServiceCall);
            END;
          "Document Type"::"Service Object":
            BEGIN
              ServiceObject.GET("Document No.");
              PAGE.RUN(PAGE::"Service Object", ServiceObject);
            END;
          "Document Type"::"Resource Request":
            BEGIN
              ResourceRequest.GET("Document No.");
              PAGE.RUN(PAGE::"Resource Request", ResourceRequest);
            END;
        END;
      END;
    END;

    LOCAL PROCEDURE SetSalesDocumentMatchRecord@29(DocNo@1000 : Code[20];DocType@1003 : Integer);
    VAR
      SalesHeader@1002 : Record 36;
      SalesInvoiceHeader@1004 : Record 112;
      SalesCrMemoHeader@1005 : Record 114;
    BEGIN
      WITH FPSOfficeDocumentSelection DO BEGIN
        IF SalesHeader.GET(DocType,DocNo) THEN
          CreateDocumentMatchRecord(Series::Sales,DocType,DocNo,FALSE,SalesHeader."Document Date");
        IF SalesInvoiceHeader.GET(DocNo) AND (DocType = "Document Type"::Invoice) THEN
          CreateDocumentMatchRecord(Series::Sales,DocType,DocNo,TRUE,SalesInvoiceHeader."Document Date");
        IF SalesCrMemoHeader.GET(DocNo) AND (DocType = "Document Type"::"Credit Memo") THEN
          CreateDocumentMatchRecord(Series::Sales,DocType,DocNo,TRUE,SalesCrMemoHeader."Document Date");
      END;
    END;

    LOCAL PROCEDURE SetPurchDocumentMatchRecord@6(DocNo@1001 : Code[20];DocType@1003 : Integer);
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchInvHeader@1004 : Record 122;
      PurchCrMemoHdr@1005 : Record 124;
    BEGIN
      WITH FPSOfficeDocumentSelection DO BEGIN
        IF PurchaseHeader.GET(DocType,DocNo) THEN
          CreateDocumentMatchRecord(Series::Purchase,DocType,DocNo,FALSE,PurchaseHeader."Document Date");
        IF PurchInvHeader.GET(DocNo) AND (DocType = "Document Type"::Invoice) THEN
          CreateDocumentMatchRecord(Series::Purchase,DocType,DocNo,TRUE,PurchInvHeader."Document Date");
        IF PurchCrMemoHdr.GET(DocNo) AND (DocType = "Document Type"::"Credit Memo") THEN
          CreateDocumentMatchRecord(Series::Purchase,DocType,DocNo,TRUE,PurchCrMemoHdr."Document Date");
      END;
    END;

    LOCAL PROCEDURE SetServiceDocumentMatchRecord@1100527618(DocNo@1001 : Code[20];DocType@1003 : Integer);
    VAR
      ServiceOrder@1100527600 : Record 11012823;
      ResourceRequest@1100527601 : Record 11124901;
      ServiceObject@1100527602 : Record 11071691;
      ServiceCall@1100527603 : Record 11012822;
    BEGIN
      WITH FPSOfficeDocumentSelection DO BEGIN
        CASE DocType OF
          FPSOfficeDocumentSelection."Document Type"::"Service Order":
            IF ServiceOrder.GET(DocNo) THEN
              CreateDocumentMatchRecord(Series::Service,FPSOfficeDocumentSelection."Document Type"::"Service Order",DocNo,FALSE,ServiceOrder."Starting Date");
          FPSOfficeDocumentSelection."Document Type"::"Service Call":
            IF ServiceCall.GET(DocNo) THEN
              CreateDocumentMatchRecord(Series::Service,FPSOfficeDocumentSelection."Document Type"::"Service Call",DocNo,FALSE,ServiceCall."Receiving Date");
          FPSOfficeDocumentSelection."Document Type"::"Service Object":
            IF ServiceObject.GET(DocNo) THEN
              CreateDocumentMatchRecord(Series::Service,FPSOfficeDocumentSelection."Document Type"::"Service Object",DocNo,FALSE,ServiceObject."Ending Date");
          FPSOfficeDocumentSelection."Document Type"::"Resource Request":
            IF ResourceRequest.GET(DocNo) THEN
              CreateDocumentMatchRecord(Series::Service,FPSOfficeDocumentSelection."Document Type"::"Resource Request",DocNo,FALSE,DT2DATE(CURRENTDATETIME));
        END;
      END;
    END;

    [EventSubscriber(Table,36,OnAfterInsertEvent,"",Skip)]
    LOCAL PROCEDURE OnNewInvoice@7(VAR Rec@1000 : Record 36;RunTrigger@1001 : Boolean);
    VAR
      TempOfficeAddinContext@1002 : TEMPORARY Record 1600;
      OfficeMgt@1004 : Codeunit 1630;
    BEGIN
      IF Rec.ISTEMPORARY OR NOT RunTrigger THEN
        EXIT;

      IF OfficeMgt.IsAvailable AND (Rec."Document Type" = Rec."Document Type"::Invoice) THEN BEGIN
        OfficeMgt.GetContext(TempOfficeAddinContext);
        IF TempOfficeAddinContext.IsAppointment THEN
          CreateOfficeInvoiceRecord(TempOfficeAddinContext."Item ID",Rec."No.",FALSE);
      END;
    END;

    [EventSubscriber(Table,112,OnAfterInsertEvent,"",Skip)]
    LOCAL PROCEDURE OnPostInvoice@11(VAR Rec@1000 : Record 112;RunTrigger@1001 : Boolean);
    VAR
      TempOfficeAddinContext@1002 : TEMPORARY Record 1600;
      OfficeMgt@1004 : Codeunit 1630;
    BEGIN
      IF Rec.ISTEMPORARY OR NOT RunTrigger THEN
        EXIT;

      IF OfficeMgt.IsAvailable THEN BEGIN
        OfficeMgt.GetContext(TempOfficeAddinContext);
        IF TempOfficeAddinContext.IsAppointment THEN
          CreateOfficeInvoiceRecord(TempOfficeAddinContext."Item ID",Rec."No.",TRUE);
      END;
    END;

    [EventSubscriber(Table,36,OnAfterDeleteEvent,"",Skip)]
    LOCAL PROCEDURE OnDeleteInvoice@2(VAR Rec@1000 : Record 36;RunTrigger@1001 : Boolean);
    VAR
      TempOfficeAddinContext@1002 : TEMPORARY Record 1600;
      OfficeInvoice@1003 : Record 1606;
      OfficeMgt@1004 : Codeunit 1630;
    BEGIN
      IF Rec.ISTEMPORARY OR NOT RunTrigger THEN
        EXIT;

      IF OfficeMgt.IsAvailable AND (Rec."Document Type" = Rec."Document Type"::Invoice) THEN BEGIN
        OfficeMgt.GetContext(TempOfficeAddinContext);
        IF TempOfficeAddinContext.IsAppointment THEN BEGIN
          IF OfficeInvoice.GET(TempOfficeAddinContext."Item ID",Rec."No.",FALSE) THEN
            OfficeInvoice.DELETE;
        END;
      END;
    END;

    LOCAL PROCEDURE NewServiceOrder@1100527608(OfficeAddinContext@1100527601 : Record 1600);
    VAR
      ServiceOrder@1100527600 : Record 11012823;
    BEGIN
      ServiceOrder.CreateAndDisplayServiceOrder(OfficeAddinContext);
    END;

    LOCAL PROCEDURE NewServiceCall@1100527609(OfficeAddinContext@1100527601 : Record 1600);
    VAR
      ServiceCall@1100527600 : Record 11012822;
    BEGIN
      ServiceCall.CreateAndDisplayServiceCall(OfficeAddinContext);
    END;

    LOCAL PROCEDURE NewResourceRequest@1100527600(OfficeAddinContext@1100527601 : Record 1600);
    VAR
      ResourceRequest@1100527600 : Record 11124901;
    BEGIN
      ResourceRequest.CreateAndDisplayResourceRequest(OfficeAddinContext);
    END;

    LOCAL PROCEDURE CreateOfficeInvoiceRecord@5(ItemID@1003 : Text[250];DocNo@1001 : Code[20];Posted@1002 : Boolean);
    VAR
      OfficeInvoice@1000 : Record 1606;
    BEGIN
      OfficeInvoice.INIT;
      OfficeInvoice."Item ID" := ItemID;
      OfficeInvoice."Document No." := DocNo;
      OfficeInvoice.Posted := Posted;
      IF NOT OfficeInvoice.INSERT THEN
        OfficeInvoice.MODIFY;
    END;

    LOCAL PROCEDURE OpenPage@1100527605(CustomOutlookActions@1100527600 : Record 11229437);
    BEGIN
      PAGE.RUN(CustomOutlookActions."Page ID");
    END;

    [EventSubscriber(Codeunit,1630,OnGetExternalHandlerCodeunit,"",Skip)]
    LOCAL PROCEDURE RegisterExternalHandler@1100527601(OfficeAddinContext@1100527600 : Record 1600;HostType@1100527601 : Text;VAR HandlerCodeunit@1100527602 : Integer);
    VAR
      CustomOutlookNewActions@1100527603 : Record 11229437;
    BEGIN
      IF HostType = 'Outlook-Hyperlink' THEN
        HandlerCodeunit := 11012516;

      IF OfficeAddinContext.Command = 'New-ServiceOrder' THEN
        HandlerCodeunit := 11012516;

      IF OfficeAddinContext.Command = 'New-ServiceCall' THEN
        HandlerCodeunit := 11012516;

      IF OfficeAddinContext.Command = 'New-ResourceRequest' THEN
        HandlerCodeunit := 11012516;

      IF CustomOutlookNewActions.FINDSET THEN
        REPEAT
          IF OfficeAddinContext.Command = CustomOutlookNewActions.GetCommand THEN
            HandlerCodeunit := 11012516;
        UNTIL CustomOutlookNewActions.NEXT = 0;
    END;

    BEGIN
    {
      23-04-2018 Copied from codeunit 1637 Office Document Handler
    }
    END.
  }
}

