OBJECT Table 11229921 Plant Meter Type
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnDelete=VAR
               PlantMeterType@1100529000 : Record 11229921;
               PlantMeterReading@1100529001 : Record 11072671;
               PlantMRDeviatingExpectQty@1100529002 : Record 11229938;
             BEGIN
               IF "Plant No." = '' THEN BEGIN
                 PlantMeterType.CHANGECOMPANY(CURRENTCOMPANY);
                 PlantMeterType.SETRANGE("Plant Type", "Plant Type");
                 PlantMeterType.SETFILTER("Plant No.", '<>%1', '');
                 PlantMeterType.SETRANGE("Plant Meter", "Plant Meter");
                 PlantMeterType.SETRANGE("Plant Meter Type", "Plant Meter Type");
                 IF NOT PlantMeterType.ISEMPTY THEN
                   ERROR(Text001, "Plant Type", "Plant Meter", "Plant Meter Type");
               END ELSE BEGIN
                 PlantMeterReading.CHANGECOMPANY(CURRENTCOMPANY);
                 PlantMeterReading.SETRANGE("Plant Type", "Plant Type");
                 PlantMeterReading.SETRANGE("Plant No.", "Plant No.");
                 PlantMeterReading.SETRANGE(Meter, "Plant Meter");
                 PlantMeterReading.SETRANGE("Meter Reading Type", "Plant Meter Type");
                 IF NOT PlantMeterReading.ISEMPTY THEN
                   ERROR(Text002, "Plant Type", "Plant No.", "Plant Meter", "Plant Meter Type");
               END;

               PlantMRDeviatingExpectQty.CHANGECOMPANY(CURRENTCOMPANY);
               PlantMRDeviatingExpectQty.SETRANGE("Plant Type", "Plant Type");
               PlantMRDeviatingExpectQty.SETRANGE("Plant No.", "Plant No.");
               PlantMRDeviatingExpectQty.SETRANGE("Plant Meter", "Plant Meter");
               PlantMRDeviatingExpectQty.SETRANGE("Plant Meter Type", "Plant Meter Type");
               PlantMRDeviatingExpectQty.DELETEALL;
             END;

    CaptionML=ENU=Plant Meter Type;
    LookupPageID=Page11229875;
    DrillDownPageID=Page11229875;
  }
  FIELDS
  {
    { 10  ;   ;Plant Type          ;Code20        ;TableRelation="Plant Type";
                                                   OnValidate=VAR
                                                                PlantType@1100529000 : Record 11012551;
                                                              BEGIN
                                                                IF "Plant Type" <> '' THEN BEGIN
                                                                  PlantType.CHANGECOMPANY(CURRENTCOMPANY);
                                                                  PlantType.GET("Plant Type");
                                                                  PlantType.TESTFIELD("Meter Reading", TRUE);
                                                                  PlantType.TESTFIELD(Bulk, FALSE);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Plant Type;
                                                              NOR=Maskintype;
                                                              SVE=Maskintyp];
                                                   NotBlank=Yes }
    { 20  ;   ;Plant No.           ;Code10        ;TableRelation="Plant Number".No. WHERE (Plant Type=FIELD(Plant Type));
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Plant Description", "Inspection No.");
                                                              END;

                                                   CaptionML=[ENU=Plant No.;
                                                              NOR=Maskinnr.;
                                                              SVE=Maskinnr] }
    { 21  ;   ;Plant Description   ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Number".Description WHERE (Plant Type=FIELD(Plant Type),
                                                                                                        No.=FIELD(Plant No.)));
                                                   CaptionML=[ENU=Plant Description;
                                                              NOR=Maskinbeskrivelse;
                                                              SVE=Maskinbeskrivning];
                                                   Editable=No }
    { 22  ;   ;Inspection No.      ;Code30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Number"."Inspection No." WHERE (Plant Type=FIELD(Plant Type),
                                                                                                             No.=FIELD(Plant No.)));
                                                   CaptionML=[ENU=Inspection No.;
                                                              NOR=Inspeksjonnr.;
                                                              SVE=Inspektionsnr];
                                                   Editable=No }
    { 30  ;   ;Plant Meter         ;Code10        ;OnValidate=VAR
                                                                PlantMeterType@1100529400 : Record 11229921;
                                                              BEGIN
                                                                IF ("Plant Type" <> '') AND ("Plant No." <> '') AND ("Plant Meter" <> '') THEN BEGIN
                                                                  PlantMeterType.CHANGECOMPANY(CURRENTCOMPANY);
                                                                  IF "Plant Meter Type" <> '' THEN
                                                                    PlantMeterType.GET("Plant Type",'',"Plant Meter","Plant Meter Type")
                                                                  ELSE BEGIN
                                                                    PlantMeterType.SETRANGE("Plant Type","Plant Type");
                                                                    PlantMeterType.SETRANGE("Plant No.",'');
                                                                    PlantMeterType.SETRANGE("Plant Meter","Plant Meter");
                                                                    PlantMeterType.FINDFIRST;
                                                                    IF PlantMeterType.COUNT = 1 THEN
                                                                      VALIDATE("Plant Meter Type", PlantMeterType."Plant Meter Type");
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Plant Meter;
                                                              SVE=Maskinr„knare];
                                                   NotBlank=Yes }
    { 40  ;   ;Plant Meter Type    ;Code10        ;TableRelation="Plant Meter Reading Type";
                                                   OnValidate=VAR
                                                                PlantMeterType@1100529000 : Record 11229921;
                                                              BEGIN
                                                                IF ("Plant Type" <> '') AND ("Plant No." <> '') AND ("Plant Meter" <> '') AND ("Plant Meter Type" <> '') AND
                                                                   (("Plant Meter" <> xRec."Plant Meter") OR ("Plant Meter Type" <> xRec."Plant Meter Type"))
                                                                THEN BEGIN
                                                                  PlantMeterType.CHANGECOMPANY(CURRENTCOMPANY);
                                                                  IF PlantMeterType.GET("Plant Type", '', "Plant Meter", "Plant Meter Type") THEN BEGIN
                                                                    "Period (Expectation)" := PlantMeterType."Period (Expectation)";
                                                                    "Expected Quantity in Period" := PlantMeterType."Expected Quantity in Period";
                                                                    Comment := PlantMeterType.Comment;
                                                                  END;
                                                                END;
                                                                CALCFIELDS("Unit of Measure");
                                                              END;

                                                   CaptionML=ENU=Plant Meter Type;
                                                   NotBlank=Yes }
    { 41  ;   ;Unit of Measure     ;Code10        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Meter Reading Type"."Unit of Measure" WHERE (Code=FIELD(Plant Meter Type)));
                                                   CaptionML=[ENU=Unit of Measure;
                                                              NOR=M†leenhet;
                                                              SVE=Enhet];
                                                   Editable=No }
    { 50  ;   ;Comment             ;Text50        ;CaptionML=[ENU=Comment;
                                                              NOR=Merknad;
                                                              SVE=Kommentar] }
    { 60  ;   ;Order Type Filter   ;Integer       ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Order Type Filter;
                                                              NOR=Ordretypefilter;
                                                              SVE=Ordertypfilter];
                                                   Description=0=None ,1=Plant Order, 2=ServiceOrder;
                                                   Editable=No }
    { 65  ;   ;Order No. Filter    ;Code20        ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Order No. Filter;
                                                   Editable=No }
    { 70  ;   ;Period (Expectation);DateFormula   ;OnValidate=BEGIN
                                                                IF FORMAT("Period (Expectation)") = '' THEN
                                                                  TESTFIELD("Expected Quantity in Period", 0);
                                                              END;

                                                   CaptionML=ENU=Period (Expectation) }
    { 75  ;   ;Expected Quantity in Period;Decimal;OnValidate=BEGIN
                                                                IF "Expected Quantity in Period" <> 0 THEN
                                                                  TESTFIELD("Period (Expectation)");
                                                              END;

                                                   CaptionML=ENU=Expected Quantity in Period;
                                                   DecimalPlaces=2:2;
                                                   MinValue=0 }
  }
  KEYS
  {
    {    ;Plant Type,Plant No.,Plant Meter,Plant Meter Type;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1100529000 : TextConst 'ENU=Delete not allowed. Of plant type (%1), meter (%2), meter type (%3) still meter reading types present on plant number level.';
      Text002@1100529001 : TextConst 'ENU=Delete not allowed. Of plant number (%1-%2), meter (%3), meter type (%4) still meter readings present.';

    PROCEDURE LookupPlantMeter@1100529400();
    VAR
      PlantMeterType@1100529400 : Record 11229921;
    BEGIN
      IF "Plant No." = '' THEN
        EXIT;

      PlantMeterType.CHANGECOMPANY(CURRENTCOMPANY);
      PlantMeterType.SETRANGE("Plant Type","Plant Type");
      PlantMeterType.SETRANGE("Plant No.",'');
      IF PAGE.RUNMODAL(0,PlantMeterType) = ACTION::LookupOK THEN
        VALIDATE("Plant Meter",PlantMeterType."Plant Meter");
    END;

    PROCEDURE ShowDeviatingExpectedQuantity@1100529006();
    VAR
      PlantMRDeviatingExpectQty@1100529000 : Record 11229938;
    BEGIN
      TESTFIELD("Plant Type");
      TESTFIELD("Plant No.");
      TESTFIELD("Plant Meter");
      TESTFIELD("Plant Meter Type");
      TESTFIELD("Period (Expectation)");
      PlantMRDeviatingExpectQty.CHANGECOMPANY(CURRENTCOMPANY);
      PlantMRDeviatingExpectQty.FILTERGROUP(2);
      PlantMRDeviatingExpectQty.SETRANGE("Plant Type", "Plant Type");
      PlantMRDeviatingExpectQty.SETRANGE("Plant No.","Plant No.");
      PlantMRDeviatingExpectQty.SETRANGE("Plant Meter", "Plant Meter");
      PlantMRDeviatingExpectQty.SETRANGE("Plant Meter Type", "Plant Meter Type");
      PlantMRDeviatingExpectQty.FILTERGROUP(2);
      IF PlantMRDeviatingExpectQty.FINDLAST THEN;
      PAGE.RUNMODAL(PAGE::"Plant MR Deviating Expect. Qty", PlantMRDeviatingExpectQty);
    END;

    PROCEDURE ActualMeterReading@1100529005(PlantType@1100529001 : Code[20];PlantNo@1100529002 : Code[10];PlantMeter@1100529003 : Code[10];MeterType@1100529004 : Code[10]) : Decimal;
    VAR
      PlantMeterReading@1100529005 : Record 11072671;
    BEGIN
      DetermineMeterAndMeterType_PlantNo(PlantType, PlantNo, PlantMeter, MeterType);
      IF (PlantType = '') OR (PlantNo = '') OR (PlantNo = '0') OR (PlantMeter = '') OR (MeterType = '') THEN
        EXIT(0);
      PlantMeterReading.CHANGECOMPANY(CURRENTCOMPANY);
      PlantMeterReading.SETRANGE("Plant Type", PlantType);
      PlantMeterReading.SETRANGE("Plant No.", PlantNo);
      PlantMeterReading.SETRANGE(Meter, PlantMeter);
      PlantMeterReading.SETRANGE("Meter Reading Type", MeterType);
      IF PlantMeterReading.FINDLAST THEN
        EXIT(PlantMeterReading."Meter Reading");
      EXIT(0);
    END;

    PROCEDURE ActualMeterReadingDateTime@1100529009(PlantType@1100529001 : Code[20];PlantNo@1100529002 : Code[10];PlantMeter@1100529003 : Code[10];MeterType@1100529004 : Code[10]) : DateTime;
    VAR
      PlantMeterReading@1100529005 : Record 11072671;
    BEGIN
      DetermineMeterAndMeterType_PlantNo(PlantType, PlantNo, PlantMeter, MeterType);
      IF (PlantType = '') OR (PlantNo = '') OR (PlantNo = '0') OR (PlantMeter = '') OR (MeterType = '') THEN
        EXIT(0DT);
      PlantMeterReading.CHANGECOMPANY(CURRENTCOMPANY);
      PlantMeterReading.SETRANGE("Plant Type", PlantType);
      PlantMeterReading.SETRANGE("Plant No.", PlantNo);
      PlantMeterReading.SETRANGE(Meter, PlantMeter);
      PlantMeterReading.SETRANGE("Meter Reading Type", MeterType);
      IF PlantMeterReading.FINDLAST THEN BEGIN
        IF PlantMeterReading.Date <> 0D THEN
          EXIT(CREATEDATETIME(PlantMeterReading.Date, PlantMeterReading."Meter Time"));
      END;
      EXIT(0DT);
    END;

    PROCEDURE TotalMeterReading@1100529004(PlantType@1100529003 : Code[20];PlantNo@1100529002 : Code[10];PlantMeter@1100529001 : Code[10];MeterType@1100529000 : Code[10];StartingDate@1100529007 : Date;EndingDate@1100529009 : Date) TotalMeter : Decimal;
    VAR
      PlantMeterReading@1100529006 : Record 11072671;
      PlantMeterReading2@1100529005 : Record 11072671;
      StartMeterReading@1100529004 : Decimal;
      StartValueFound@1100529008 : Boolean;
    BEGIN
      IF (PlantType = '') OR (PlantNo = '') OR (PlantNo = '0') OR (PlantMeter = '') OR (MeterType = '') THEN
        EXIT(0);
      IF (StartingDate <> 0D) AND (EndingDate <> 0D) AND (EndingDate < StartingDate) THEN
        EXIT(0);
      PlantMeterReading.CHANGECOMPANY(CURRENTCOMPANY);
      IF EndingDate <> 0D THEN BEGIN
        PlantMeterReading.FILTERGROUP(4);
        PlantMeterReading.SETFILTER(Date, '<=%1', EndingDate);
        PlantMeterReading.FILTERGROUP(0);
      END;
      PlantMeterReading.SETRANGE("Plant Type", PlantType);
      PlantMeterReading.SETRANGE("Plant No.", PlantNo);
      PlantMeterReading.SETRANGE(Meter, PlantMeter);
      PlantMeterReading.SETRANGE("Meter Reading Type", MeterType);
      IF StartingDate <> 0D THEN BEGIN
        PlantMeterReading.SETFILTER(Date, '<=%1', StartingDate);
        StartValueFound := PlantMeterReading.FINDLAST;
        PlantMeterReading.SETFILTER(Date, '>%1', StartingDate);
      END;
      IF NOT StartValueFound THEN
        StartValueFound := PlantMeterReading.FINDFIRST;
      IF StartValueFound THEN BEGIN
        StartMeterReading := PlantMeterReading."Meter Reading";

        PlantMeterReading2.CHANGECOMPANY(CURRENTCOMPANY);
        PlantMeterReading2.COPY(PlantMeterReading);
        PlantMeterReading2.SETFILTER("New Starting Value Type", '>%1', PlantMeterReading."New Starting Value Type"::" ");
        PlantMeterReading2.SETRANGE(Date, PlantMeterReading.Date);
        PlantMeterReading2.SETFILTER("Meter Time", '>%1', PlantMeterReading."Meter Time");
        IF NOT PlantMeterReading2.FINDFIRST THEN BEGIN
          PlantMeterReading2.SETFILTER(Date, '>%1', PlantMeterReading.Date);
          PlantMeterReading2.SETRANGE("Meter Time");
        END;
        IF PlantMeterReading2.FINDSET THEN BEGIN
          PlantMeterReading2.SETRANGE(Date);
          PlantMeterReading2.SETRANGE("Meter Time");
          REPEAT
            TotalMeter := TotalMeter + PlantMeterReading2."End Meter Reading" - StartMeterReading;
            StartMeterReading := PlantMeterReading2."Meter Reading"; // New start value
          UNTIL PlantMeterReading2.NEXT = 0;
        END;

        PlantMeterReading2.COPY(PlantMeterReading);
        IF PlantMeterReading2.FINDLAST THEN BEGIN
          IF (PlantMeterReading2."New Starting Value Type" = PlantMeterReading."New Starting Value Type"::" ") AND
             ((PlantMeterReading2.Date <> PlantMeterReading.Date) OR (PlantMeterReading2."Meter Time" <> PlantMeterReading."Meter Time"))
          THEN
            TotalMeter := TotalMeter + PlantMeterReading2."Meter Reading" - StartMeterReading;
        END;
      END;
    END;

    PROCEDURE AvailableMeterReadingUntilNextInspection@1100529007(PlantType@1100529000 : Code[20];PlantNo@1100529001 : Code[10];PlantMeter@1100529009 : Code[10];MeterType@1100529751 : Code[10];VAR InspectionBasedOnQuantity@1100529002 : Boolean) : Decimal;
    VAR
      InspectionTypes@1100529003 : Record 11012562;
      Inspection@1100529004 : Record 11012564;
      LastInspectionDate@1100529007 : Date;
      TotalMeterReadingSinceLastInspection@1100529010 : Decimal;
    BEGIN
      InspectionBasedOnQuantity := FALSE;
      IF (PlantType = '') OR (PlantNo = '') OR (PlantNo = '0') OR (PlantMeter = '') OR (MeterType = '') THEN
        EXIT(0);
      Inspection.CHANGECOMPANY(CURRENTCOMPANY);
      Inspection.SETRANGE("Plant Type", PlantType);
      Inspection.SETRANGE("Plant No.", PlantNo);
      Inspection.SETRANGE("Plant Meter", PlantMeter);
      Inspection.SETRANGE("Meter Reading Type", MeterType);
      Inspection.SETRANGE("Inspection Result", Inspection."Inspection Result"::" ");
      IF Inspection.FINDLAST THEN BEGIN
        InspectionTypes.CHANGECOMPANY(CURRENTCOMPANY);
        IF NOT InspectionTypes.GET(Inspection."Inspection Type") THEN
          EXIT(0);
        IF (InspectionTypes."Inspection Based on" = InspectionTypes."Inspection Based on"::Time) THEN
          EXIT(0);
        Inspection.SETRANGE("Inspection Result", Inspection."Inspection Result"::Approved);

        LastInspectionDate := 0D;
        IF Inspection.FINDLAST THEN
          LastInspectionDate := Inspection."Inspected on";
        TotalMeterReadingSinceLastInspection := TotalMeterReading(PlantType, PlantNo, PlantMeter, MeterType, LastInspectionDate, 0D);
        InspectionBasedOnQuantity := TRUE;
        EXIT(InspectionTypes."Inspection Interval" - TotalMeterReadingSinceLastInspection);
      END;
      EXIT(0);
    END;

    PROCEDURE DetermineMeterAndMeterType_PlantNo@1100529003(PlantType@1100529000 : Code[20];PlantNo@1100529001 : Code[10];VAR PlantMeter@1100529002 : Code[10];VAR MeterType@1100529003 : Code[10]);
    VAR
      PlantMeterType@1100529004 : Record 11229921;
    BEGIN
      IF (PlantType = '') OR (PlantNo = '') OR (PlantNo = '0') OR ((PlantMeter <> '') AND (MeterType <> '')) THEN
        EXIT;
      PlantMeterType.CHANGECOMPANY(CURRENTCOMPANY);
      PlantMeterType.SETRANGE("Plant Type", PlantType);
      PlantMeterType.SETRANGE("Plant No.", PlantNo);
      IF (PlantMeter = '') THEN BEGIN
        //If Meter and Meter Type are empty then it can be determined if there is only one Meter Type of the Plant No.
        IF GetNumberOfMeterTypes_PlantNo(PlantType, PlantNo) = 1 THEN BEGIN
          IF PlantMeterType.FINDFIRST THEN BEGIN
            PlantMeter := PlantMeterType."Plant Meter";
            MeterType := PlantMeterType."Plant Meter Type";
          END;
        END;
      END ELSE BEGIN
        IF (MeterType = '') THEN BEGIN
          //If Meter Type is empty then it can be determined if there is only one Meter Type of the Plant No./Meter
          IF GetNumberOfMeterTypes_PlantNoMeter(PlantType, PlantNo, PlantMeter) = 1 THEN BEGIN
            PlantMeterType.SETRANGE("Plant Meter", PlantMeter);
            IF PlantMeterType.FINDFIRST THEN
              MeterType := PlantMeterType."Plant Meter Type";
          END;
        END;
      END;
    END;

    PROCEDURE GetNumberOfMeterTypes_PlantNo@1100529000(PlantType@1100529000 : Code[20];PlantNo@1100529001 : Code[10]) : Integer;
    VAR
      PlantMeterType@1100529002 : Record 11229921;
    BEGIN
      IF (PlantType = '') OR (PlantNo = '') OR (PlantNo = '0') THEN
        EXIT(0);
      PlantMeterType.CHANGECOMPANY(CURRENTCOMPANY);
      PlantMeterType.SETRANGE("Plant Type", PlantType);
      PlantMeterType.SETRANGE("Plant No.", PlantNo);
      EXIT(PlantMeterType.COUNT);
    END;

    PROCEDURE GetNumberOfMeterTypes_PlantNoMeter@1100529001(PlantType@1100529000 : Code[20];PlantNo@1100529001 : Code[10];PlantMeter@1100529002 : Code[10]) : Integer;
    VAR
      PlantMeterType@1100529003 : Record 11229921;
    BEGIN
      IF (PlantType = '') OR (PlantNo = '') OR (PlantNo = '0') OR (PlantMeter = '') THEN
        EXIT(0);
      PlantMeterType.CHANGECOMPANY(CURRENTCOMPANY);
      PlantMeterType.SETRANGE("Plant Type", PlantType);
      PlantMeterType.SETRANGE("Plant No.", PlantNo);
      PlantMeterType.SETRANGE("Plant Meter", PlantMeter);
      EXIT(PlantMeterType.COUNT);
    END;

    PROCEDURE ShowMeterReading_FromCurrentTable@1100529011(OrderType@1100529003 : Integer;OrderNo@1100529002 : Code[20]);
    BEGIN
      TESTFIELD("Plant Type");
      TESTFIELD("Plant No.");
      TESTFIELD("Plant Meter");
      TESTFIELD("Plant Meter Type");
      ShowMeterReadings_General("Plant Type", "Plant No.", "Plant Meter", "Plant Meter Type", OrderType, OrderNo);
    END;

    PROCEDURE ShowMeterReadings_General@1100529008(PlantType@1100529007 : Code[20];PlantNo@1100529006 : Code[10];PlantMeter@1100529005 : Code[10];MeterType@1100529004 : Code[10];OrderType@1100529003 : Integer;OrderNo@1100529002 : Code[20]);
    VAR
      PlantMeterReading@1100529000 : Record 11072671;
      PlantTypes@1100529008 : Record 11012551;
      PlantMeterReadingList@1100529001 : Page 11125948;
    BEGIN
      // OrderType: 0=<None>, 1=PlantOrder, 2=ServiceOrder
      IF (PlantType = '') OR (PlantNo = '') OR (PlantNo = '0') THEN
        EXIT;
      DetermineMeterAndMeterType_PlantNo(PlantType, PlantNo, PlantMeter, MeterType);
      IF (PlantMeter = '') OR (MeterType = '') THEN BEGIN
        IF (PlantMeter <> '') THEN BEGIN
          IF GetNumberOfMeterTypes_PlantNoMeter(PlantType, PlantNo, PlantMeter) = 0 THEN
            EXIT;
        END ELSE BEGIN
          IF GetNumberOfMeterTypes_PlantNo(PlantType, PlantNo) = 0 THEN
            EXIT;
        END;
      END;
      PlantTypes.CHANGECOMPANY(CURRENTCOMPANY);
      PlantTypes.GET(PlantType);
      PlantTypes.TESTFIELD("Meter Reading", TRUE);

      PlantMeterReading.CHANGECOMPANY(CURRENTCOMPANY);
      PlantMeterReading.FILTERGROUP(4);
      PlantMeterReading.SETRANGE("Plant Type", PlantType);
      PlantMeterReading.SETRANGE("Plant No.", PlantNo);
      PlantMeterReading.FILTERGROUP(0);
      IF PlantMeter <> '' THEN BEGIN
        PlantMeterReading.SETRANGE(Meter, PlantMeter);
        IF MeterType <> '' THEN
          PlantMeterReading.SETRANGE("Meter Reading Type", MeterType);
      END;
      PlantMeterReadingList.SetCompany(CURRENTCOMPANY);
      IF PlantMeterReading.FINDLAST THEN
        PlantMeterReadingList.SETRECORD(PlantMeterReading);
      PlantMeterReadingList.SETTABLEVIEW(PlantMeterReading);
      PlantMeterReadingList.SetCurrentOrderNo(OrderType, OrderNo);
      PlantMeterReadingList.RUNMODAL;
    END;

    PROCEDURE ShowPlantNoMeterReadingsPerMeterAndType@1100529002(PlantType@1100529002 : Code[20];PlantNo@1100529001 : Code[10]);
    VAR
      PlantMeterType@1100529000 : Record 11229921;
    BEGIN
      IF (PlantType = '') OR (PlantNo = '') OR (PlantNo = '0') THEN
        EXIT;
      PlantMeterType.CHANGECOMPANY(CURRENTCOMPANY);
      PlantMeterType.FILTERGROUP(4);
      PlantMeterType.SETRANGE("Plant Type", PlantType);
      PlantMeterType.SETRANGE("Plant No.", PlantNo);
      PlantMeterType.FILTERGROUP(0);
      IF PlantMeterType.ISEMPTY THEN
        EXIT;
      PlantMeterType := Rec;
      PAGE.RUNMODAL(PAGE::"Plant Meter Read. p.Meter/Type", PlantMeterType);
    END;

    PROCEDURE ExpectedMeterReading@1100529010(PlantType@1100529003 : Code[20];PlantNo@1100529002 : Code[10];PlantMeter@1100529001 : Code[10];MeterType@1100529000 : Code[10]) : Decimal;
    VAR
      PlantMeterType@1100529004 : Record 11229921;
      PlantMeterReading@1100529005 : Record 11072671;
      PlantMRDeviatingExpectQty@1100529013 : Record 11229938;
      StartingDate@1100529006 : Date;
      EndingDate@1100529007 : Date;
      RefDate@1100529010 : Date;
      NoOfDaysInPeriod@1100529008 : Integer;
      ExpectedIncrease@1100529011 : Decimal;
      ExpectedQuantityInPeriod@1100529012 : Decimal;
    BEGIN
      IF (PlantType = '') OR (PlantNo = '') OR (PlantNo = '0') OR (PlantMeter = '') OR (MeterType = '') THEN
        EXIT(0);
      PlantMeterType.CHANGECOMPANY(CURRENTCOMPANY);
      IF NOT PlantMeterType.GET(PlantType, PlantNo, PlantMeter, MeterType) THEN
        EXIT(0);
      IF FORMAT(PlantMeterType."Period (Expectation)") = '' THEN
        EXIT(0);

      PlantMeterReading.CHANGECOMPANY(CURRENTCOMPANY);
      PlantMeterReading.SETRANGE("Plant Type", PlantType);
      PlantMeterReading.SETRANGE("Plant No.", PlantNo);
      PlantMeterReading.SETRANGE(Meter, PlantMeter);
      PlantMeterReading.SETRANGE("Meter Reading Type", MeterType);
      IF NOT PlantMeterReading.FINDLAST THEN
        EXIT(0);
      IF (PlantMeterReading.Date >= TODAY) OR (PlantMeterReading.Date = 0D) THEN
        EXIT(PlantMeterReading."Meter Reading");
      EndingDate := PlantMeterReading.Date;
      ReadNextDeviationExpected(PlantType, PlantNo, PlantMeter, MeterType, EndingDate+1, PlantMRDeviatingExpectQty);
      REPEAT
        StartingDate := EndingDate + 1;
        EndingDate := CALCDATE(PlantMeterType."Period (Expectation)", EndingDate);
        NoOfDaysInPeriod := EndingDate - StartingDate + 1;
        IF EndingDate > TODAY THEN
          EndingDate := TODAY;
        IF EndingDate < StartingDate THEN
          EXIT(0);
        FOR RefDate := StartingDate TO EndingDate DO BEGIN
          ExpectedQuantityInPeriod := PlantMeterType."Expected Quantity in Period";
          IF (RefDate > PlantMRDeviatingExpectQty."Ending Date") AND (PlantMRDeviatingExpectQty."Ending Date" <> 0D) THEN
            ReadNextDeviationExpected(PlantType, PlantNo, PlantMeter, MeterType, RefDate, PlantMRDeviatingExpectQty);
          IF (RefDate >= PlantMRDeviatingExpectQty."Starting Date") AND (RefDate <= PlantMRDeviatingExpectQty."Ending Date") THEN
            ExpectedQuantityInPeriod := PlantMRDeviatingExpectQty."Expected Quantity in Period";
          IF ExpectedQuantityInPeriod > 0 THEN BEGIN
            IF PlantNoOnLocationOnReferenceDate(PlantType, PlantNo, RefDate) THEN
              ExpectedIncrease := ExpectedIncrease + (ExpectedQuantityInPeriod / NoOfDaysInPeriod);
          END;
        END;
      UNTIL EndingDate >= TODAY;
      EXIT(ROUND((PlantMeterReading."Meter Reading" + ExpectedIncrease), 1));
    END;

    LOCAL PROCEDURE PlantNoOnLocationOnReferenceDate@1100529015(PlantType@1100529001 : Code[20];PlantNo@1100529000 : Code[10];RefDate@1100529002 : Date) : Boolean;
    VAR
      PlantInventory@1100529003 : Record 11012555;
      PlantLocation@1100529004 : Record 11012554;
    BEGIN
      PlantInventory.CHANGECOMPANY(CURRENTCOMPANY);
      PlantInventory.SETCURRENTKEY("Plant Type","Plant No.","Present from");
      PlantInventory.SETRANGE("Plant Type", PlantType);
      PlantInventory.SETRANGE("Plant No.", PlantNo);
      PlantInventory.SETRANGE(Depot, FALSE);
      PlantInventory.SETFILTER("Present from", '<=%1', RefDate);
      PlantInventory.SETFILTER("Removed on", '>=%1|%2', RefDate, 0D);
      PlantInventory.SETFILTER("Rental Start Date", '<=%1|%2', RefDate, 0D);
      PlantInventory.SETFILTER("Rental End Date", '>=%1|%2', RefDate, 0D);
      IF RefDate <= TODAY THEN
        EXIT(NOT PlantInventory.ISEMPTY)
      ELSE BEGIN
        IF PlantInventory.ISEMPTY THEN
          EXIT(FALSE);
        PlantInventory.SETRANGE(Removed, TRUE);
        IF NOT PlantInventory.ISEMPTY THEN
          EXIT(TRUE);
        PlantInventory.SETCURRENTKEY(Removed, "Plant Type", "Plant No.", "Rate Code", Location);
        PlantInventory.SETRANGE(Removed, FALSE);
        IF PlantInventory.FINDFIRST THEN BEGIN
          IF PlantInventory."Expected return on" <> 0D THEN BEGIN
            IF (PlantInventory."Expected return on" >= TODAY) AND (RefDate <= PlantInventory."Expected return on") THEN
              EXIT(TRUE);
          END ELSE BEGIN
            IF PlantLocation.GET(PlantInventory.Location) THEN BEGIN
              IF (PlantLocation."Ending Date" <> 0D) AND (PlantLocation."Ending Date" >= TODAY) AND (RefDate <= PlantLocation."Ending Date") THEN
                EXIT(TRUE);
            END;
          END;
        END;
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE ReadNextDeviationExpected@1100529012(PlantType@1100529003 : Code[20];PlantNo@1100529002 : Code[10];PlantMeter@1100529001 : Code[10];MeterType@1100529000 : Code[10];RefDate@1100529006 : Date;VAR PlantMRDeviatingExpectQty@1100529005 : Record 11229938);
    VAR
      PlantMRDeviatingExpectQty2@1100529004 : Record 11229938;
    BEGIN
      PlantMRDeviatingExpectQty.CHANGECOMPANY(CURRENTCOMPANY);
      PlantMRDeviatingExpectQty2.CHANGECOMPANY(CURRENTCOMPANY);
      PlantMRDeviatingExpectQty.SETRANGE("Plant Type", PlantType);
      PlantMRDeviatingExpectQty.SETRANGE("Plant No.", PlantNo);
      PlantMRDeviatingExpectQty.SETRANGE("Plant Meter", PlantMeter);
      PlantMRDeviatingExpectQty.SETRANGE("Plant Meter Type", MeterType);
      PlantMRDeviatingExpectQty.SETFILTER("Starting Date", '>=%1', RefDate);
      IF NOT PlantMRDeviatingExpectQty.FINDFIRST THEN BEGIN
        PlantMRDeviatingExpectQty."Starting Date" := 0D;
        PlantMRDeviatingExpectQty."Ending Date" := 0D;
      END ELSE BEGIN
        IF PlantMRDeviatingExpectQty."Ending Date" = 0D THEN BEGIN
          PlantMRDeviatingExpectQty2.SETRANGE("Plant Type", PlantType);
          PlantMRDeviatingExpectQty2.SETRANGE("Plant No.", PlantNo);
          PlantMRDeviatingExpectQty2.SETRANGE("Plant Meter", PlantMeter);
          PlantMRDeviatingExpectQty2.SETRANGE("Plant Meter Type", MeterType);
          PlantMRDeviatingExpectQty2.SETFILTER("Starting Date", '>%1', PlantMRDeviatingExpectQty."Starting Date");
          IF PlantMRDeviatingExpectQty2.FINDFIRST THEN
            PlantMRDeviatingExpectQty."Ending Date" := PlantMRDeviatingExpectQty2."Starting Date" - 1
          ELSE
            PlantMRDeviatingExpectQty."Ending Date" := DMY2DATE(31,12,DATE2DMY(TODAY,3)+100);
        END;
      END;
    END;

    PROCEDURE GetExpectedEndingDateMeterReadingInterval@1100529013(PlantType@1100529006 : Code[20];PlantNo@1100529005 : Code[10];PlantMeter@1100529004 : Code[10];MeterType@1100529003 : Code[10];StartingDate@1100529000 : Date;PrevTotalMeterReading@1100529018 : Decimal;IntervalMeterReading@1100529001 : Decimal;MaxEndingDate@1100529002 : Date;FirstInFuture@1100529020 : Boolean;VAR TotalQuantity@1100529009 : Decimal) : Date;
    VAR
      PlantMeterType@1100529010 : Record 11229921;
      PlantNumber@1100529015 : Record 11012552;
      PlantMRDeviatingExpectQty@1100529008 : Record 11229938;
      StartDate@1100529014 : Date;
      EndDate@1100529011 : Date;
      RefDate@1100529007 : Date;
      NoOfDaysInPeriod@1100529012 : Integer;
      NextTotalMeterReading@1100529019 : Decimal;
      ExpectedQuantityInPeriod@1100529013 : Decimal;
      ExpectedOccupationPercPlant@1100529016 : Decimal;
      ExpectedOccupationPercDate@1100529017 : Decimal;
    BEGIN
      IF (PlantType = '') OR (PlantNo = '') OR (PlantMeter = '') OR (MeterType = '') OR (StartingDate > MaxEndingDate) OR (MaxEndingDate < TODAY) THEN
        EXIT(0D);
      IF NOT PlantNumber.GET(PlantType, PlantNo) THEN
        EXIT;
      IF NOT PlantMeterType.GET(PlantType, PlantNo, PlantMeter, MeterType) THEN
        EXIT(0D);
      IF FORMAT(PlantMeterType."Period (Expectation)") = '' THEN
        EXIT(0D);

      RefDate := StartingDate;
      NextTotalMeterReading := PrevTotalMeterReading + IntervalMeterReading;
      //TotalQuantity := PrevTotalMeterReading;  //Now by Var
      CheckAdjustTotalMeterReading(PlantType, PlantNo, PlantMeter, MeterType, FirstInFuture, RefDate, TotalQuantity);
      IF ROUND(TotalQuantity,1) >= NextTotalMeterReading THEN BEGIN
        IF RefDate < StartingDate THEN
          RefDate := StartingDate;
        EXIT(RefDate);
      END;
      EndDate := RefDate - 1;
      ReadNextDeviationExpected(PlantType, PlantNo, PlantMeter, MeterType, EndDate+1, PlantMRDeviatingExpectQty);
      ExpectedOccupationPercPlant := PlantNumber.ExpectedOccupationPercentage(PlantType, PlantNo);
      REPEAT
        StartDate := EndDate + 1;
        EndDate := CALCDATE(PlantMeterType."Period (Expectation)", EndDate);
        NoOfDaysInPeriod := EndDate - StartDate + 1;
        IF EndDate > MaxEndingDate THEN
          EndDate := MaxEndingDate;
        IF EndDate < StartDate THEN
          EXIT(0D);
        FOR RefDate := StartDate TO EndDate DO BEGIN
          ExpectedOccupationPercDate := 100;
          ExpectedQuantityInPeriod := PlantMeterType."Expected Quantity in Period";
          IF (RefDate > PlantMRDeviatingExpectQty."Ending Date") AND (PlantMRDeviatingExpectQty."Ending Date" <> 0D) THEN
            ReadNextDeviationExpected(PlantType, PlantNo, PlantMeter, MeterType, RefDate, PlantMRDeviatingExpectQty);
          IF (RefDate >= PlantMRDeviatingExpectQty."Starting Date") AND (RefDate <= PlantMRDeviatingExpectQty."Ending Date") THEN
            ExpectedQuantityInPeriod := PlantMRDeviatingExpectQty."Expected Quantity in Period";
          IF RefDate <= TODAY THEN BEGIN
            IF NOT PlantNoOnLocationOnReferenceDate(PlantType, PlantNo, RefDate) THEN
              ExpectedQuantityInPeriod := 0;
          END ELSE BEGIN
            IF NOT PlantNoOnLocationOnReferenceDate(PlantType, PlantNo, RefDate) THEN
              ExpectedOccupationPercDate := ExpectedOccupationPercPlant;
          END;
          IF (ExpectedQuantityInPeriod > 0) AND (RefDate >= PlantNumber."Receipt Date") THEN BEGIN
            TotalQuantity := TotalQuantity + (ExpectedQuantityInPeriod * (ExpectedOccupationPercDate/100) / NoOfDaysInPeriod);
            IF ROUND(TotalQuantity,1) >= NextTotalMeterReading THEN BEGIN
              IF RefDate < StartingDate THEN
                RefDate := StartingDate;
              EXIT(RefDate);
            END;
          END;
        END;
      UNTIL EndDate >= MaxEndingDate;
      EXIT(0D);
    END;

    LOCAL PROCEDURE CheckAdjustTotalMeterReading@1100529014(PlantType@1100529003 : Code[20];PlantNo@1100529002 : Code[10];PlantMeter@1100529001 : Code[10];MeterType@1100529000 : Code[10];FirstInFuture@1100529006 : Boolean;VAR RefDate@1100529004 : Date;VAR TotalQuantity@1100529007 : Decimal);
    VAR
      PlantMeterReading@1100529005 : Record 11072671;
    BEGIN
      IF (RefDate <= TODAY) OR FirstInFuture THEN BEGIN
        PlantMeterReading.SETRANGE("Plant Type", PlantType);
        PlantMeterReading.SETRANGE("Plant No.", PlantNo);
        PlantMeterReading.SETRANGE(Meter, PlantMeter);
        PlantMeterReading.SETRANGE("Meter Reading Type", MeterType);
        PlantMeterReading.SETRANGE(Date, 0D, TODAY);
        IF PlantMeterReading.FINDLAST THEN BEGIN
          RefDate := PlantMeterReading.Date + 1;
          TotalQuantity:= TotalMeterReading(PlantType, PlantNo, PlantMeter, MeterType, 0D, TODAY);
        END;
      END;
    END;

    BEGIN
    {
      4PS 10-08-16 UKR-C25593 KD: Multiple meter readings (BI049) - Object created
    }
    END.
  }
}

