OBJECT Table 5896 Inventory Adjmt. Entry (Order)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.04,4PS14.00;
  }
  PROPERTIES
  {
    Permissions=TableData 5896=i;
    CaptionML=[ENU=Inventory Adjmt. Entry (Order);
               NOR=Lagerjusteringspost (ordre)];
  }
  FIELDS
  {
    { 1   ;   ;Order Type          ;Option        ;CaptionML=[ENU=Order Type;
                                                              NOR=Ordretype;
                                                              SVE=Ordertyp];
                                                   OptionCaptionML=[ENU=" ,Production,Transfer,Service,Assembly";
                                                                    NOR=" ,Produksjon,Overf›ring,Service,Montering";
                                                                    SVE=" ,Produktion,™verf”ring,Service,Montering"];
                                                   OptionString=[ ,Production,Transfer,Service,Assembly] }
    { 2   ;   ;Order No.           ;Code20        ;CaptionML=[ENU=Order No.;
                                                              NOR=Ordrenr.;
                                                              SVE=Ordernr] }
    { 3   ;   ;Order Line No.      ;Integer       ;CaptionML=[ENU=Order Line No.;
                                                              NOR=Ordrelinjenr.;
                                                              SVE=Orderradnr] }
    { 4   ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   CaptionML=[ENU=Item No.;
                                                              NOR=Varenr.;
                                                              SVE=Artikelnr] }
    { 7   ;   ;Routing No.         ;Code20        ;TableRelation="Routing Header".No.;
                                                   CaptionML=[ENU=Routing No.;
                                                              NOR=Rutenr.;
                                                              SVE=Operationsf”ljdsnr] }
    { 8   ;   ;Routing Reference No.;Integer      ;CaptionML=[ENU=Routing Reference No.;
                                                              NOR=Rutereferansenr.;
                                                              SVE=Oper.f”ljd referensnr] }
    { 21  ;   ;Indirect Cost %     ;Decimal       ;CaptionML=[ENU=Indirect Cost %;
                                                              NOR=Indirekte kost-%;
                                                              SVE=Indirekt kostnad %];
                                                   DecimalPlaces=0:5 }
    { 22  ;   ;Overhead Rate       ;Decimal       ;CaptionML=[ENU=Overhead Rate;
                                                              NOR=Sats for indirekte kostnader;
                                                              SVE=Omkostnad];
                                                   AutoFormatType=2 }
    { 29  ;   ;Cost is Adjusted    ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Cost is Adjusted;
                                                              NOR=Kost er justert;
                                                              SVE=Kostnaden „r justerad] }
    { 30  ;   ;Allow Online Adjustment;Boolean    ;InitValue=Yes;
                                                   CaptionML=[ENU=Allow Online Adjustment;
                                                              NOR=Tillat webjustering;
                                                              SVE=Till†t onlinejustering] }
    { 41  ;   ;Unit Cost           ;Decimal       ;CaptionML=[ENU=Unit Cost;
                                                              NOR=Enhetskost;
                                                              SVE=Styckkostnad];
                                                   AutoFormatType=2 }
    { 42  ;   ;Direct Cost         ;Decimal       ;CaptionML=[ENU=Direct Cost;
                                                              NOR=Kj›pspris/prod.kost;
                                                              SVE=Direkt kostnad];
                                                   AutoFormatType=2 }
    { 43  ;   ;Indirect Cost       ;Decimal       ;CaptionML=[ENU=Indirect Cost;
                                                              NOR=Indirekte kost;
                                                              SVE=Indirekt kostnad];
                                                   AutoFormatType=2 }
    { 44  ;   ;Single-Level Material Cost;Decimal ;CaptionML=[ENU=Single-Level Material Cost;
                                                              NOR=Materialkostn. - enkeltniv†;
                                                              SVE=En-niv† materialkostnad];
                                                   AutoFormatType=2 }
    { 45  ;   ;Single-Level Capacity Cost;Decimal ;CaptionML=[ENU=Single-Level Capacity Cost;
                                                              NOR=Kapasitetskostn. - enkeltniv†;
                                                              SVE=En-niv† kapacitetskostnad];
                                                   AutoFormatType=2 }
    { 46  ;   ;Single-Level Subcontrd. Cost;Decimal;
                                                   CaptionML=[ENU=Single-Level Subcontrd. Cost;
                                                              NOR=Underlevrd.kostn - enkeltniv†;
                                                              SVE=En-niv† underleverant”rkost.];
                                                   AutoFormatType=2 }
    { 47  ;   ;Single-Level Cap. Ovhd Cost;Decimal;CaptionML=[ENU=Single-Level Cap. Ovhd Cost;
                                                              NOR=Indir. kap.kostn - enkeltniv†;
                                                              SVE=En-niv† kap.overheadkost.];
                                                   AutoFormatType=2 }
    { 48  ;   ;Single-Level Mfg. Ovhd Cost;Decimal;CaptionML=[ENU=Single-Level Mfg. Ovhd Cost;
                                                              NOR=Indir. prod.kostn - enkeltniv†;
                                                              SVE=En-niv† mat.overheadkost.];
                                                   AutoFormatType=2 }
    { 52  ;   ;Direct Cost (ACY)   ;Decimal       ;CaptionML=[ENU=Direct Cost (ACY);
                                                              NOR=Kj›pspris/prod.kost (t.val)] }
    { 53  ;   ;Indirect Cost (ACY) ;Decimal       ;CaptionML=[ENU=Indirect Cost (ACY);
                                                              NOR=Indirekte kostnad (t.val.)] }
    { 54  ;   ;Single-Lvl Material Cost (ACY);Decimal;
                                                   CaptionML=[ENU=Single-Lvl Material Cost (ACY);
                                                              NOR=Materialkostnad - enkeltniv† (t.val.)];
                                                   AutoFormatType=2 }
    { 55  ;   ;Single-Lvl Capacity Cost (ACY);Decimal;
                                                   CaptionML=[ENU=Single-Lvl Capacity Cost (ACY);
                                                              NOR=Kapasitetskostn. - enkeltniv† (t.val.)];
                                                   AutoFormatType=2 }
    { 56  ;   ;Single-Lvl Subcontrd Cost(ACY);Decimal;
                                                   CaptionML=[ENU=Single-Lvl Subcontrd Cost(ACY);
                                                              NOR=Underlevrd.kostn - enkeltniv† (t.val.)];
                                                   AutoFormatType=2 }
    { 57  ;   ;Single-Lvl Cap. Ovhd Cost(ACY);Decimal;
                                                   CaptionML=[ENU=Single-Lvl Cap. Ovhd Cost(ACY);
                                                              NOR=Indir. kap.kostn. - enkeltniv† (t.val.)];
                                                   AutoFormatType=2 }
    { 58  ;   ;Single-Lvl Mfg. Ovhd Cost(ACY);Decimal;
                                                   CaptionML=[ENU=Single-Lvl Mfg. Ovhd Cost(ACY);
                                                              NOR=Indir. prod.kostn. - enkeltniv† (t.val.)];
                                                   AutoFormatType=2 }
    { 61  ;   ;Completely Invoiced ;Boolean       ;CaptionML=[ENU=Completely Invoiced;
                                                              NOR=Fullstendig fakturert;
                                                              SVE=F„rdigt fakturerat] }
    { 62  ;   ;Is Finished         ;Boolean       ;CaptionML=[ENU=Is Finished;
                                                              NOR=Er ferdig] }
  }
  KEYS
  {
    {    ;Order Type,Order No.,Order Line No.     ;Clustered=Yes }
    {    ;Cost is Adjusted,Allow Online Adjustment }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      GLSetup@1002 : Record 98;
      GLSetupRead@1003 : Boolean;
      AmtRndgPrec@1001 : Decimal;
      AmtRndgPrecACY@1000 : Decimal;
      UnitAmtRndgPrec@1006 : Decimal;
      UnitAmtRndgPrecACY@1007 : Decimal;

    [External]
    PROCEDURE RoundCosts@77(ShareOfTotalCost@1003 : Decimal);
    BEGIN
      GetRoundingPrecision(AmtRndgPrec,AmtRndgPrecACY);
      RoundAmounts(AmtRndgPrec,AmtRndgPrecACY,ShareOfTotalCost);
    END;

    LOCAL PROCEDURE RoundUnitCosts@19();
    BEGIN
      GetUnitAmtRoundingPrecision(UnitAmtRndgPrec,UnitAmtRndgPrecACY);
      RoundAmounts(UnitAmtRndgPrec,UnitAmtRndgPrecACY,1);
    END;

    LOCAL PROCEDURE RoundAmounts@20(RndPrecLCY@1000 : Decimal;RndPrecACY@1001 : Decimal;ShareOfTotalCost@1002 : Decimal);
    VAR
      RndResLCY@1003 : Decimal;
      RndResACY@1004 : Decimal;
    BEGIN
      "Direct Cost" := RoundCost("Direct Cost",ShareOfTotalCost,RndResLCY,RndPrecLCY);
      "Indirect Cost" := RoundCost("Indirect Cost",ShareOfTotalCost,RndResLCY,RndPrecLCY);
      "Single-Level Material Cost" := RoundCost("Single-Level Material Cost",ShareOfTotalCost,RndResLCY,RndPrecLCY);
      "Single-Level Capacity Cost" := RoundCost("Single-Level Capacity Cost",ShareOfTotalCost,RndResLCY,RndPrecLCY);
      "Single-Level Subcontrd. Cost" := RoundCost("Single-Level Subcontrd. Cost",ShareOfTotalCost,RndResLCY,RndPrecLCY);
      "Single-Level Cap. Ovhd Cost" := RoundCost("Single-Level Cap. Ovhd Cost",ShareOfTotalCost,RndResLCY,RndPrecLCY);
      "Single-Level Mfg. Ovhd Cost" := RoundCost("Single-Level Mfg. Ovhd Cost",ShareOfTotalCost,RndResLCY,RndPrecLCY);

      "Direct Cost (ACY)" := RoundCost("Direct Cost (ACY)",ShareOfTotalCost,RndResACY,RndPrecACY);
      "Indirect Cost (ACY)" := RoundCost("Indirect Cost (ACY)",ShareOfTotalCost,RndResACY,RndPrecACY);
      "Single-Lvl Material Cost (ACY)" := RoundCost("Single-Lvl Material Cost (ACY)",ShareOfTotalCost,RndResACY,RndPrecACY);
      "Single-Lvl Capacity Cost (ACY)" := RoundCost("Single-Lvl Capacity Cost (ACY)",ShareOfTotalCost,RndResACY,RndPrecACY);
      "Single-Lvl Subcontrd Cost(ACY)" := RoundCost("Single-Lvl Subcontrd Cost(ACY)",ShareOfTotalCost,RndResACY,RndPrecACY);
      "Single-Lvl Cap. Ovhd Cost(ACY)" := RoundCost("Single-Lvl Cap. Ovhd Cost(ACY)",ShareOfTotalCost,RndResACY,RndPrecACY);
      "Single-Lvl Mfg. Ovhd Cost(ACY)" := RoundCost("Single-Lvl Mfg. Ovhd Cost(ACY)",ShareOfTotalCost,RndResACY,RndPrecACY);
    END;

    [External]
    PROCEDURE CalcOvhdCost@1(OutputQty@1001 : Decimal);
    BEGIN
      GetRoundingPrecision(AmtRndgPrec,AmtRndgPrecACY);

      "Single-Level Mfg. Ovhd Cost" :=
        (("Single-Level Material Cost" + "Single-Level Capacity Cost" +
          "Single-Level Subcontrd. Cost" + "Single-Level Cap. Ovhd Cost") *
         "Indirect Cost %" / 100) +
        ("Overhead Rate" * OutputQty);
      "Single-Level Mfg. Ovhd Cost" := ROUND("Single-Level Mfg. Ovhd Cost",AmtRndgPrec);

      "Single-Lvl Mfg. Ovhd Cost(ACY)" :=
        (("Single-Lvl Material Cost (ACY)" + "Single-Lvl Capacity Cost (ACY)" +
          "Single-Lvl Subcontrd Cost(ACY)" + "Single-Lvl Cap. Ovhd Cost(ACY)") *
         "Indirect Cost %" / 100) +
        ("Overhead Rate" * OutputQty * CalcCurrencyFactor);
      "Single-Lvl Mfg. Ovhd Cost(ACY)" := ROUND("Single-Lvl Mfg. Ovhd Cost(ACY)",AmtRndgPrecACY);

      OnAfterCalcOvhdCost(xRec,Rec,GLSetup,OutputQty,AmtRndgPrec,AmtRndgPrecACY,CalcCurrencyFactor);
    END;

    [External]
    PROCEDURE GetCostsFromItem@2(OutputQty@1000 : Decimal);
    BEGIN
      GetUnroundedCostsFromItem;
      RoundCosts(OutputQty);
      CalcCostFromCostShares;
    END;

    [External]
    PROCEDURE GetUnitCostsFromItem@26();
    BEGIN
      GetUnroundedCostsFromItem;
      RoundUnitCosts;
      CalcCostFromCostShares;
    END;

    [External]
    PROCEDURE GetUnitCostsFromProdOrderLine@28();
    BEGIN
      GetSingleLevelCosts;
      RoundUnitCosts;
      CalcCostFromCostShares;
    END;

    LOCAL PROCEDURE GetUnroundedCostsFromItem@21();
    VAR
      Item@1001 : Record 27;
    BEGIN
      Item.GET("Item No.");

      "Indirect Cost %" := Item."Indirect Cost %";
      "Overhead Rate" := Item."Overhead Rate";

      GetSingleLevelCosts;
    END;

    LOCAL PROCEDURE GetSingleLevelCosts@27();
    VAR
      Item@1000 : Record 27;
      CurrExchRate@1001 : Decimal;
    BEGIN
      Item.GET("Item No.");

      "Single-Level Material Cost" := Item."Single-Level Material Cost";
      "Single-Level Capacity Cost" := Item."Single-Level Capacity Cost";
      "Single-Level Subcontrd. Cost" := Item."Single-Level Subcontrd. Cost";
      "Single-Level Cap. Ovhd Cost" := Item."Single-Level Cap. Ovhd Cost";
      "Single-Level Mfg. Ovhd Cost" := Item."Single-Level Mfg. Ovhd Cost";

      CurrExchRate := CalcCurrencyFactor;
      "Direct Cost (ACY)" := "Direct Cost" * CurrExchRate;
      "Indirect Cost (ACY)" := "Indirect Cost" * CurrExchRate;
      "Single-Lvl Material Cost (ACY)" := "Single-Level Material Cost" * CurrExchRate;
      "Single-Lvl Capacity Cost (ACY)" := "Single-Level Capacity Cost" * CurrExchRate;
      "Single-Lvl Subcontrd Cost(ACY)" := "Single-Level Subcontrd. Cost" * CurrExchRate;
      "Single-Lvl Cap. Ovhd Cost(ACY)" := "Single-Level Cap. Ovhd Cost" * CurrExchRate;
      "Single-Lvl Mfg. Ovhd Cost(ACY)" := "Single-Level Mfg. Ovhd Cost" * CurrExchRate;

      OnAfterGetSingleLevelCosts(Rec,Item);
    END;

    LOCAL PROCEDURE CalcCostFromCostShares@29();
    BEGIN
      CalcDirectCostFromCostShares;
      CalcIndirectCostFromCostShares;
      CalcUnitCost;
    END;

    LOCAL PROCEDURE CalcCurrencyFactor@24() : Decimal;
    VAR
      OutputItemLedgEntry@1001 : Record 32;
      CurrExchRate@1002 : Record 330;
    BEGIN
      GetRoundingPrecision(AmtRndgPrec,AmtRndgPrecACY);
      IF GLSetup."Additional Reporting Currency" <> '' THEN BEGIN
        OutputItemLedgEntry.SETCURRENTKEY("Order Type","Order No.","Order Line No.","Entry Type");
        OutputItemLedgEntry.SETRANGE("Order Type","Order Type");
        OutputItemLedgEntry.SETRANGE("Order No.","Order No.");
        IF "Order Type" = "Order Type"::Production THEN BEGIN
          OutputItemLedgEntry.SETRANGE("Order Line No.","Order Line No.");
          OutputItemLedgEntry.SETRANGE("Entry Type",OutputItemLedgEntry."Entry Type"::Output);
        END ELSE
          OutputItemLedgEntry.SETRANGE("Entry Type",OutputItemLedgEntry."Entry Type"::"Assembly Output");

        IF OutputItemLedgEntry.FINDLAST THEN
      //  EXIT(CurrExchRate.ExchangeRate(OutputItemLedgEntry."Posting Date",GLSetup."Additional Reporting Currency")); //**4PS.o
          EXIT(CurrExchRate.ExchangeRate(0,'',OutputItemLedgEntry."Posting Date",GLSetup."Additional Reporting Currency",TRUE)); //**4PS.o
      END;
    END;

    [External]
    PROCEDURE SetProdOrderLine@3(ProdOrderLine@1000 : Record 5406);
    BEGIN
      INIT;
      "Order Type" := "Order Type"::Production;
      "Order No." := ProdOrderLine."Prod. Order No.";
      "Order Line No." := ProdOrderLine."Line No.";
      "Item No." := ProdOrderLine."Item No.";
      "Routing No." := ProdOrderLine."Routing No.";
      "Routing Reference No." := ProdOrderLine."Routing Reference No.";
      "Cost is Adjusted" := FALSE;
      "Is Finished" := ProdOrderLine.Status = ProdOrderLine.Status::Finished;
      "Indirect Cost %" := ProdOrderLine."Indirect Cost %";
      "Overhead Rate" := ProdOrderLine."Overhead Rate";
      OnAfterSetProdOrderLineTransferFields(Rec,ProdOrderLine);

      GetUnitCostsFromProdOrderLine;
      IF NOT INSERT THEN;
    END;

    [External]
    PROCEDURE SetAsmOrder@13(AssemblyHeader@1000 : Record 900);
    BEGIN
      SetAssemblyDoc(AssemblyHeader."No.",AssemblyHeader."Item No.");
    END;

    [External]
    PROCEDURE SetPostedAsmOrder@16(PostedAssemblyHeader@1000 : Record 910);
    BEGIN
      SetAssemblyDoc(PostedAssemblyHeader."Order No.",PostedAssemblyHeader."Item No.");
    END;

    LOCAL PROCEDURE SetAssemblyDoc@17(OrderNo@1000 : Code[20];ItemNo@1001 : Code[20]);
    BEGIN
      INIT;
      "Order Type" := "Order Type"::Assembly;
      "Order No." := OrderNo;
      "Item No." := ItemNo;
      "Cost is Adjusted" := FALSE;
      "Is Finished" := TRUE;
      GetCostsFromItem(1);
      IF NOT INSERT THEN;
    END;

    [External]
    PROCEDURE CalcDirectCostFromCostShares@14();
    BEGIN
      "Direct Cost" :=
        "Single-Level Material Cost" +
        "Single-Level Capacity Cost" +
        "Single-Level Subcontrd. Cost" +
        "Single-Level Cap. Ovhd Cost";
      "Direct Cost (ACY)" :=
        "Single-Lvl Material Cost (ACY)" +
        "Single-Lvl Capacity Cost (ACY)" +
        "Single-Lvl Subcontrd Cost(ACY)" +
        "Single-Lvl Cap. Ovhd Cost(ACY)";
    END;

    [External]
    PROCEDURE CalcIndirectCostFromCostShares@15();
    BEGIN
      "Indirect Cost" := "Single-Level Mfg. Ovhd Cost";
      "Indirect Cost (ACY)" := "Single-Lvl Mfg. Ovhd Cost(ACY)";
    END;

    [External]
    PROCEDURE CalcUnitCost@4();
    BEGIN
      "Unit Cost" := "Direct Cost" + "Indirect Cost";
    END;

    [External]
    PROCEDURE CalcDiff@7(VAR InvtAdjmtEntryOrder@1000 : Record 5896;OnlyCostShares@1001 : Boolean);
    BEGIN
      IF NOT OnlyCostShares THEN BEGIN
        "Direct Cost" := InvtAdjmtEntryOrder."Direct Cost" - "Direct Cost";
        "Indirect Cost" := InvtAdjmtEntryOrder."Indirect Cost" - "Indirect Cost";
      END;
      "Single-Level Material Cost" := InvtAdjmtEntryOrder."Single-Level Material Cost" - "Single-Level Material Cost";
      "Single-Level Capacity Cost" := InvtAdjmtEntryOrder."Single-Level Capacity Cost" - "Single-Level Capacity Cost";
      "Single-Level Subcontrd. Cost" := InvtAdjmtEntryOrder."Single-Level Subcontrd. Cost" - "Single-Level Subcontrd. Cost";
      "Single-Level Cap. Ovhd Cost" := InvtAdjmtEntryOrder."Single-Level Cap. Ovhd Cost" - "Single-Level Cap. Ovhd Cost";
      "Single-Level Mfg. Ovhd Cost" := InvtAdjmtEntryOrder."Single-Level Mfg. Ovhd Cost" - "Single-Level Mfg. Ovhd Cost";

      IF NOT OnlyCostShares THEN BEGIN
        "Direct Cost (ACY)" := InvtAdjmtEntryOrder."Direct Cost (ACY)" - "Direct Cost (ACY)";
        "Indirect Cost (ACY)" := InvtAdjmtEntryOrder."Indirect Cost (ACY)" - "Indirect Cost (ACY)";
      END;
      "Single-Lvl Material Cost (ACY)" := InvtAdjmtEntryOrder."Single-Lvl Material Cost (ACY)" - "Single-Lvl Material Cost (ACY)";
      "Single-Lvl Capacity Cost (ACY)" := InvtAdjmtEntryOrder."Single-Lvl Capacity Cost (ACY)" - "Single-Lvl Capacity Cost (ACY)";
      "Single-Lvl Subcontrd Cost(ACY)" := InvtAdjmtEntryOrder."Single-Lvl Subcontrd Cost(ACY)" - "Single-Lvl Subcontrd Cost(ACY)";
      "Single-Lvl Cap. Ovhd Cost(ACY)" := InvtAdjmtEntryOrder."Single-Lvl Cap. Ovhd Cost(ACY)" - "Single-Lvl Cap. Ovhd Cost(ACY)";
      "Single-Lvl Mfg. Ovhd Cost(ACY)" := InvtAdjmtEntryOrder."Single-Lvl Mfg. Ovhd Cost(ACY)" - "Single-Lvl Mfg. Ovhd Cost(ACY)";
    END;

    [External]
    PROCEDURE AddDirectCost@5(CostAmtLCY@1000 : Decimal;CostAmtACY@1001 : Decimal);
    BEGIN
      "Direct Cost" += CostAmtLCY;
      "Direct Cost (ACY)" += CostAmtACY;
    END;

    [External]
    PROCEDURE AddIndirectCost@6(CostAmtLCY@1001 : Decimal;CostAmtACY@1000 : Decimal);
    BEGIN
      "Indirect Cost" += CostAmtLCY;
      "Indirect Cost (ACY)" += CostAmtACY;
    END;

    [External]
    PROCEDURE AddSingleLvlMaterialCost@8(CostAmtLCY@1001 : Decimal;CostAmtACY@1000 : Decimal);
    BEGIN
      "Single-Level Material Cost" += CostAmtLCY;
      "Single-Lvl Material Cost (ACY)" += CostAmtACY;
    END;

    [External]
    PROCEDURE AddSingleLvlCapacityCost@9(CostAmtLCY@1001 : Decimal;CostAmtACY@1000 : Decimal);
    BEGIN
      "Single-Level Capacity Cost" += CostAmtLCY;
      "Single-Lvl Capacity Cost (ACY)" += CostAmtACY;
    END;

    [External]
    PROCEDURE AddSingleLvlSubcontrdCost@10(CostAmtLCY@1001 : Decimal;CostAmtACY@1000 : Decimal);
    BEGIN
      "Single-Level Subcontrd. Cost" += CostAmtLCY;
      "Single-Lvl Subcontrd Cost(ACY)" += CostAmtACY;
    END;

    [External]
    PROCEDURE AddSingleLvlCapOvhdCost@11(CostAmtLCY@1001 : Decimal;CostAmtACY@1000 : Decimal);
    BEGIN
      "Single-Level Cap. Ovhd Cost" += CostAmtLCY;
      "Single-Lvl Cap. Ovhd Cost(ACY)" += CostAmtACY;
    END;

    [External]
    PROCEDURE AddSingleLvlMfgOvhdCost@12(CostAmtLCY@1001 : Decimal;CostAmtACY@1000 : Decimal);
    BEGIN
      "Single-Level Mfg. Ovhd Cost" += CostAmtLCY;
      "Single-Lvl Mfg. Ovhd Cost(ACY)" += CostAmtACY;
    END;

    LOCAL PROCEDURE GetRoundingPrecision@30(VAR AmtRndingPrecLCY@1001 : Decimal;VAR AmtRndingPrecACY@1000 : Decimal);
    VAR
      Currency@1003 : Record 4;
    BEGIN
      IF NOT GLSetupRead THEN
        GLSetup.GET;
      AmtRndingPrecLCY := GLSetup."Amount Rounding Precision";
      AmtRndingPrecACY := Currency."Amount Rounding Precision";
      IF GLSetup."Additional Reporting Currency" <> '' THEN BEGIN
        Currency.GET(GLSetup."Additional Reporting Currency");
        Currency.CheckAmountRoundingPrecision;
        AmtRndingPrecACY := Currency."Amount Rounding Precision"
      END;
      GLSetupRead := TRUE;
    END;

    LOCAL PROCEDURE GetUnitAmtRoundingPrecision@18(VAR UnitAmtRndingPrecLCY@1001 : Decimal;VAR UnitAmtRndingPrecACY@1000 : Decimal);
    VAR
      Currency@1003 : Record 4;
    BEGIN
      IF NOT GLSetupRead THEN
        GLSetup.GET;
      UnitAmtRndingPrecLCY := GLSetup."Unit-Amount Rounding Precision";
      UnitAmtRndingPrecACY := Currency."Unit-Amount Rounding Precision";
      IF GLSetup."Additional Reporting Currency" <> '' THEN BEGIN
        Currency.GET(GLSetup."Additional Reporting Currency");
        Currency.CheckAmountRoundingPrecision;
        UnitAmtRndingPrecACY := Currency."Unit-Amount Rounding Precision"
      END;
      GLSetupRead := TRUE;
    END;

    LOCAL PROCEDURE RoundCost@25(Cost@1000 : Decimal;ShareOfTotal@1002 : Decimal;VAR RndRes@1005 : Decimal;AmtRndgPrec@1003 : Decimal) : Decimal;
    VAR
      UnRoundedCost@1001 : Decimal;
    BEGIN
      IF Cost <> 0 THEN BEGIN
        UnRoundedCost := Cost * ShareOfTotal + RndRes;
        Cost := ROUND(UnRoundedCost,AmtRndgPrec);
        RndRes := UnRoundedCost - Cost;
        EXIT(Cost);
      END;
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCalcOvhdCost@23(xInventoryAdjmtEntryOrder@1000 : Record 5896;VAR InventoryAdjmtEntryOrder@1001 : Record 5896;GeneralLedgerSetup@1002 : Record 98;OutputQty@1006 : Decimal;AmtRndgPrec@1003 : Decimal;AmtRndgPrecACY@1004 : Decimal;CurrencyFactor@1005 : Decimal);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterGetSingleLevelCosts@31(VAR InventoryAdjmtEntryOrder@1000 : Record 5896;Item@1001 : Record 27);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSetProdOrderLineTransferFields@22(VAR InventoryAdjmtEntryOrder@1000 : Record 5896;ProdOrderLine@1001 : Record 5406);
    BEGIN
    END;

    BEGIN
    END.
  }
}

