OBJECT Report 7131 Import Item Budget from Excel
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW113.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Artikelbudget aus Excel imp.;
               ENU=Import Item Budget from Excel;
               NLD=Artikelbudget uit Excel imp.;
               NOR=Importer varebudsj. fra Excel];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  IF ToItemBudgetName = '' THEN
                    ERROR(Text000);

                  IF NOT ItemBudgetName.GET(AnalysisArea,ToItemBudgetName) THEN BEGIN
                    IF NOT CONFIRM(Text001,FALSE,ToItemBudgetName) THEN
                      CurrReport.BREAK;
                    ItemBudgetName."Analysis Area" := AnalysisArea;
                    ItemBudgetName.Name := ToItemBudgetName;
                    ItemBudgetName.INSERT;
                  END ELSE BEGIN
                    IF ItemBudgetName.Blocked THEN
                      ERROR(Text002,ItemBudgetEntry.FIELDCAPTION("Budget Name"),ToItemBudgetName);
                    IF NOT CONFIRM(
                         Text003,FALSE,
                         LOWERCASE(FORMAT(SELECTSTR(ImportOption + 1,Text010))),
                         ToItemBudgetName)
                    THEN
                      CurrReport.BREAK;
                  END;

                  ExcelBuf.LOCKTABLE;
                  ItemBudgetBuf.LOCKTABLE;

                  ExcelBuf.OpenBook(ServerFileName,SheetName);
                  ExcelBuf.ReadSheet;

                  AnalyseData;
                END;

    OnPostReport=BEGIN
                   ExcelBuf.DELETEALL;
                   ItemBudgetBuf.DELETEALL;
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;ItemBudgetBuf       ;
               DataItemTable=Table7136;
               DataItemTableView=SORTING(Item No.,Source Type,Source No.,Location Code,Global Dimension 1 Code,Global Dimension 2 Code,Budget Dimension 1 Code,Budget Dimension 2 Code,Budget Dimension 3 Code,Date);
               OnPreDataItem=BEGIN
                               RecNo := 0;

                               IF ImportOption = ImportOption::"Replace entries" THEN BEGIN
                                 ItemBudgetEntry.SETRANGE("Analysis Area",AnalysisArea);
                                 ItemBudgetEntry.SETRANGE("Budget Name",ToItemBudgetName);
                                 ItemBudgetEntry.DELETEALL(TRUE);
                               END;

                               ItemBudgetEntry.RESET;
                               IF ItemBudgetEntry.FINDLAST THEN
                                 EntryNo := ItemBudgetEntry."Entry No." + 1
                               ELSE
                                 EntryNo := 1;
                             END;

               OnAfterGetRecord=BEGIN
                                  RecNo := RecNo + 1;
                                  ItemBudgetEntry.INIT;
                                  ItemBudgetEntry.VALIDATE("Entry No.",EntryNo);
                                  ItemBudgetEntry.VALIDATE("Analysis Area",AnalysisArea);
                                  ItemBudgetEntry.VALIDATE("Budget Name",ToItemBudgetName);
                                  ItemBudgetEntry.VALIDATE("Item No.","Item No.");
                                  ItemBudgetEntry.VALIDATE("Location Code","Location Code");
                                  ItemBudgetEntry.VALIDATE(Date,Date);
                                  ItemBudgetEntry.VALIDATE(Description,Description);
                                  ItemBudgetEntry.VALIDATE("Source Type","Source Type");
                                  ItemBudgetEntry.VALIDATE("Source No.","Source No.");
                                  ItemBudgetEntry.VALIDATE("Sales Amount","Sales Amount");
                                  ItemBudgetEntry.VALIDATE(Quantity,Quantity);
                                  ItemBudgetEntry.VALIDATE("Cost Amount","Cost Amount");
                                  ItemBudgetEntry.VALIDATE("Global Dimension 1 Code","Global Dimension 1 Code");
                                  ItemBudgetEntry.VALIDATE("Global Dimension 2 Code","Global Dimension 2 Code");
                                  ItemBudgetEntry.VALIDATE("Budget Dimension 1 Code","Budget Dimension 1 Code");
                                  ItemBudgetEntry.VALIDATE("Budget Dimension 2 Code","Budget Dimension 2 Code");
                                  ItemBudgetEntry.VALIDATE("Budget Dimension 3 Code","Budget Dimension 3 Code");
                                  ItemBudgetEntry.VALIDATE("User ID",USERID);
                                  ItemBudgetEntry.INSERT(TRUE);
                                  EntryNo := EntryNo + 1;
                                END;

               OnPostDataItem=BEGIN
                                IF RecNo > 0 THEN
                                  MESSAGE(Text004,ItemBudgetEntry.TABLECAPTION,RecNo);
                              END;
                               }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnInit=BEGIN
               PurchValueTypeVisible := TRUE;
               SalesValueTypeVisible := TRUE;
             END;

      OnOpenPage=VAR
                   ItemBudgetName@1000 : Record 7132;
                 BEGIN
                   Description := Text005 + FORMAT(WORKDATE);
                   IF NOT ItemBudgetName.GET(AnalysisArea,ToItemBudgetName) THEN
                     ToItemBudgetName := '';

                   ValueType := ValueTypeHidden;
                   SalesValueTypeVisible := AnalysisArea = AnalysisArea::Sales;
                   PurchValueTypeVisible := AnalysisArea = AnalysisArea::Purchase;
                 END;

      OnQueryClosePage=VAR
                         FileMgt@1001 : Codeunit 419;
                       BEGIN
                         IF CloseAction = ACTION::OK THEN BEGIN
                           ServerFileName := FileMgt.UploadFile(Text006,ExcelExtensionTok);
                           IF ServerFileName = '' THEN
                             EXIT(FALSE);

                           SheetName := ExcelBuf.SelectSheetsName(ServerFileName);
                           IF SheetName = '' THEN
                             EXIT(FALSE);
                         END;
                       END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DEU=Optionen;
                             ENU=Options;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 9   ;2   ;Field     ;
                  CaptionML=[DEU=Budgetname;
                             ENU=Budget Name;
                             NLD=Budget;
                             NOR=Budsjettnavn;
                             SVE=Budgetnamn];
                  ToolTipML=[DEU=Gibt den Namen des Budgets an.;
                             ENU=Specifies the name of the budget.;
                             NLD=Hiermee wordt de naam van het budget opgegeven.;
                             NOR=Angir navnet pÜ budsjettet.;
                             SVE=Anger budgetens namn.];
                  ApplicationArea=#ItemBudget;
                  SourceExpr=ToItemBudgetName;
                  OnLookup=VAR
                             ItemBudgetName@1002 : Record 7132;
                           BEGIN
                             ItemBudgetName.FILTERGROUP := 2;
                             ItemBudgetName.SETRANGE("Analysis Area",AnalysisArea);
                             ItemBudgetName.FILTERGROUP := 0;
                             IF PAGE.RUNMODAL(PAGE::"Item Budget Names",ItemBudgetName) = ACTION::LookupOK THEN BEGIN
                               Text := ItemBudgetName.Name;
                               EXIT(TRUE);
                             END;
                           END;
                            }

      { 7   ;2   ;Field     ;
                  CaptionML=[DEU=Option;
                             ENU=Option;
                             NLD=Optie;
                             NOR=Alternativ;
                             SVE=Alternativ];
                  ToolTipML=[DEU=Gibt an, ob die Budgetposten aus Excel zu den bereits im Programm vorhandenen Budgetposten hinzugefÅgt werden sollen, oder ob die Posten in Business Central durch die Budgetposten aus Excel ersetzt werden sollen.;
                             ENU=Specifies whether you want the program to add the budget entries from Excel to budget entries currently in the program, or you want the program to replace entries in Business Central with the budget entries from Excel.;
                             NLD=Hiermee wordt opgegeven of de budgetposten uit Excel automatisch moeten worden toegevoegd aan bestaande budgetposten in het programma of dat de posten in Business Central moeten worden vervangen door de budgetposten uit Excel.;
                             NOR=Angir om du vil at budsjettposter fra Excel skal legges til i budsjettposter som finnes i programmet, eller om du vil at poster i Business Central skal erstattes med budsjettpostene fra Excel.];
                  OptionCaptionML=[DEU=Posten ersetzen,Posten hinzufÅgen;
                                   ENU=Replace entries,Add entries;
                                   NLD=Posten vervangen,Posten toevoegen;
                                   NOR=Erstatt poster,Legg til poster];
                  ApplicationArea=#ItemBudget;
                  SourceExpr=ImportOption }

      { 5   ;2   ;Field     ;
                  CaptionML=[DEU=Beschreibung;
                             ENU=Description;
                             NLD=Omschrijving;
                             NOR=Beskrivelse;
                             SVE=Beskrivning];
                  ToolTipML=[DEU=Gibt die Beschreibung des Imports aus Excel an.;
                             ENU=Specifies the description of what you are importing from Excel.;
                             NLD=Hiermee wordt de beschrijving opgegeven van wat u uit Excel importeert.;
                             NOR=Angir beskrivelsen av hva du importerer fra Excel.];
                  ApplicationArea=#ItemBudget;
                  SourceExpr=Description }

      { 15  ;2   ;Field     ;
                  Name=PurchValueType;
                  CaptionML=[DEU=Wert importieren als;
                             ENU=Import Value as;
                             NLD=Waarde importeren als;
                             NOR=Importer verdi som];
                  ToolTipML=[DEU=Gibt den Typ des Werts an, die das aus Excel importierte Budget enthÑlt.;
                             ENU=Specifies the type of value that the imported Excel budget contains.;
                             NLD=Hiermee wordt het soort waarde opgegeven dat het geãmporteerde Excel-budget bevat.;
                             NOR=Angir verditypen som det importerte Excel-budsjettet inneholder.];
                  OptionCaptionML=[DEU=,Einstandsbetrag,Menge;
                                   ENU=,Cost Amount,Quantity;
                                   NLD=,Totale kosten,Aantal;
                                   NOR=,Kostbelõp,Antall;
                                   SVE=,Kostnadsbelopp,Antal];
                  ApplicationArea=#ItemBudget;
                  SourceExpr=ValueType;
                  Visible=PurchValueTypeVisible }

      { 13  ;2   ;Field     ;
                  Name=SalesValueType;
                  CaptionML=[DEU=Wert importieren als;
                             ENU=Import Value as;
                             NLD=Waarde importeren als;
                             NOR=Importer verdi som];
                  ToolTipML=[DEU=Gibt den Typ des Werts an, die das aus Excel importierte Budget enthÑlt.;
                             ENU=Specifies the type of value that the imported Excel budget contains.;
                             NLD=Hiermee wordt het soort waarde opgegeven dat het geãmporteerde Excel-budget bevat.;
                             NOR=Angir verditypen som det importerte Excel-budsjettet inneholder.];
                  OptionCaptionML=[DEU=Verkaufsbetrag,Lagerverbrauchsbetrag,Menge;
                                   ENU=Sales Amount,COGS Amount,Quantity;
                                   NLD=Totale omzet,KPV-bedrag,Aantal;
                                   NOR=Salgsbelõp,Vareforbruksbelõp,Antall;
                                   SVE=FîrsÑljningsbelopp,KSV-belopp,Antal];
                  ApplicationArea=#ItemBudget;
                  SourceExpr=ValueType;
                  Visible=SalesValueTypeVisible }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'DEU=Sie mÅssen einen Budgetnamen als Ziel fÅr den Import angeben.;ENU=You must specify a budget name to import to.;NLD=U moet de naam van het budget opgeven waarin u wilt importeren.;NOR=Du mÜ angi et budsjettnavn som det skal importeres til.';
      Text001@1001 : TextConst 'DEU=Mîchten Sie den Artikelbudgetnamen %1 erstellen?;ENU=Do you want to create Item Budget Name %1?;NLD=Wilt u artikelbudgetnaam %1 maken?;NOR=Vil du opprette varebudsjettnavnet %1?';
      Text002@1002 : TextConst 'DEU=%1 %2 ist gesperrt. Sie kînnen keine Posten importieren.;ENU=%1 %2 is blocked. You cannot import entries.;NLD=%1 %2 is geblokkeerd. U kunt geen posten importeren.;NOR=%1 %2 er sperret. Du kan ikke importere poster.';
      Text003@1003 : TextConst 'DEU=Mîchten Sie fÅr den Budgetnamen "%2" wirklich die folgende Aktion ausfÅhren: %1?;ENU=Are you sure you want to %1 for Budget Name %2?;NLD=Weet u zeker dat u %1 wilt uitvoeren voor budgetnaam %2?;NOR=Er du sikker pÜ at du vil %1 for budsjettnavnet %2?';
      Text004@1004 : TextConst 'DEU=Die Tabelle %1 wurde erfolgreich mit %2 Posten aktualisiert.;ENU=%1 table has been successfully updated with %2 entries.;NLD=%1 tabel is bijgewerkt met %2 posten.;NOR=Tabell %1 er oppdatert med %2 poster.';
      Text005@1005 : TextConst 'DEU="Aus Excel importiert ";ENU="Imported from Excel ";NLD="Geãmporteerd vanuit Excel ";NOR="Importert fra Excel "';
      Text006@1006 : TextConst 'DEU=Exceldatei importieren;ENU=Import Excel File;NLD=Excel-bestand importeren;NOR=Importer Excel-fil;SVE=Importera Excel-fil';
      Text007@1023 : TextConst 'DEU=Tabellendaten;ENU=Table Data;NLD=Tabelgegevens;NOR=Tabelldata';
      Text008@1022 : TextConst 'DEU=Zeilenansicht;ENU=Show as Lines;NLD=Als regels weergeven;NOR=Vis som linjer;SVE=Visa som rader';
      Text009@1009 : TextConst 'DEU=Spaltenansicht;ENU=Show as Columns;NLD=Als kolommen weergeven;NOR=Vis som kolonner;SVE=Visa som kolumner';
      Text010@1010 : TextConst 'DEU=Posten ersetzen,Posten hinzufÅgen;ENU=Replace Entries,Add Entries;NLD=Posten vervangen,Posten toevoegen;NOR=Erstatt poster,Legg til poster';
      Text011@1011 : TextConst 'DEU=Der Text %1 kann in der Exceltabelle nur ein Mal angegeben werden.;ENU=The text %1 can only be specified once in the Excel worksheet.;NLD=De tekst %1 kan slechts eenmaal in het Excel-werkblad opgegeven worden.;NOR=Teksten %1 kan bare angis Çn gang i Excel-regnearket.';
      Text012@1017 : TextConst 'DEU=Die von der Tabelle angegebenen Filter mÅssen in die Zeilen vor der Tabelle eingefÅgt werden.;ENU=The filters specified by worksheet must be placed in the lines before the table.;NLD=U moet de filters die per werkblad zijn opgegeven in de regels voor de tabel plaatsen.;NOR=Filtrene som er angitt i regnearket, mÜ plasseres i linjene fõr tabellen.';
      Text013@1015 : TextConst 'DEU=Datumsfilter;ENU=Date Filter;NLD=Datumfilter;NOR=Datofilter;SVE=Datumfilter';
      ExcelBuf@1027 : Record 370;
      GLSetup@1034 : Record 98;
      ItemBudgetName@1053 : Record 7132;
      ItemBudgetEntry@1013 : Record 7134;
      ItemBudgetManagement@1024 : Codeunit 7130;
      Window@1040 : Dialog;
      ServerFileName@1028 : Text;
      SheetName@1038 : Text[250];
      Description@1041 : Text[50];
      ToItemBudgetName@1039 : Code[10];
      RecNo@1016 : Integer;
      EntryNo@1012 : Integer;
      ImportOption@1054 : 'Replace entries,Add entries';
      AnalysisArea@1048 : 'Sales,Purchase,Inventory';
      ValueType@1057 : 'Sales Amount,COGS / Cost Amount,Quantity';
      ValueTypeHidden@1026 : 'Sales Amount,COGS / Cost Amount,Quantity';
      GlSetupRead@1029 : Boolean;
      Text014@1014 : TextConst 'DEU=Debitorenfilter;ENU=Customer Filter;NLD=Klantfilter;NOR=Kundefilter;SVE=Kundfilter';
      Text015@1021 : TextConst 'DEU=Kreditorenfilter;ENU=Vendor Filter;NLD=Leverancierfilter;NOR=Leverandõrfilter;SVE=Leverantîrsfilter';
      Text016@1008 : TextConst 'DEU=Daten werden analysiert ...\\;ENU=Analyzing Data...\\;NLD=Analyseren gegevens...\\;NOR=Analyserer data...\\;SVE=Analyserar data...\\';
      Text017@1007 : TextConst 'DEU=Artikelfilter;ENU=Item Filter;NLD=Artikelfilter;NOR=Varefilter;SVE=Artikelfilter';
      Text018@1018 : TextConst 'DEU=%1 ist kein gÅltiger Dimensionswert.;ENU=%1 is not a valid dimension value.;NLD=%1 is geen geldige dimensiewaarde.;NOR=%1 er ikke en gyldig dimensjonsverdi.';
      Text019@1020 : TextConst 'DEU=%1 ist keine gÅltige Zeilendefinition.;ENU=%1 is not a valid line definition.;NLD=%1 is geen geldige regeldefinitie.;NOR=%1 er ikke en gyldig linjedefinisjon.;SVE=%1 Ñr inte en giltig raddefinition.';
      Text020@1019 : TextConst 'DEU=%1 ist keine gÅltige Spaltendefinition.;ENU=%1 is not a valid column definition.;NLD=%1 is geen geldige kolomdefinitie.;NOR=%1 er ikke en gyldig kolonnedefinisjon.;SVE=%1 Ñr inte en giltig kolumndefinition.';
      Text021@1025 : TextConst 'DEU=Sie mÅssen einen Dimensionswert in Zeile %1, Spalte %2 festlegen.;ENU=You must specify a dimension value in row %1, column %2.;NLD=U moet een dimensiewaarde opgeven in rij %1, kolom %2.;NOR=Du mÜ angi en dimensjonsverdi i rad %1, kolonne %2.';
      SalesValueTypeVisible@19059405 : Boolean INDATASET;
      PurchValueTypeVisible@19069465 : Boolean INDATASET;
      ExcelExtensionTok@1030 : TextConst '@@@={Locked};DEU=.xlsx;ENU=.xlsx;NLD=.xlsx;NOR=.xlsx';

    LOCAL PROCEDURE AnalyseData@2();
    VAR
      DateFilter@1003 : Text[30];
      LineDimCode@1014 : Text[30];
      ColumnDimCode@1013 : Text[30];
      ItemFilter@1004 : Code[20];
      LocationFilter@1017 : Code[10];
      GlobalDim1Filter@1009 : Code[20];
      GlobalDim2Filter@1008 : Code[20];
      BudgetDim1Filter@1007 : Code[20];
      BudgetDim2Filter@1006 : Code[20];
      BudgetDim3Filter@1005 : Code[20];
      SourceNoFilter@1010 : Code[20];
      CurrLineDimValue@1000 : Code[20];
      CurrColumnDimValue@1001 : Code[20];
      TotalRecNo@1002 : Integer;
      HeaderRowNo@1011 : Integer;
      SourceTypeFilter@1012 : ' ,Customer,Vendor,Item';
      LineDimOption@1016 : 'Item,Customer,Vendor,Period,Location,Global Dimension 1,Global Dimension 2,Budget Dimension 1,Budget Dimension 2,Budget Dimension 3';
      ColumnDimOption@1015 : 'Item,Customer,Vendor,Period,Location,Global Dimension 1,Global Dimension 2,Budget Dimension 1,Budget Dimension 2,Budget Dimension 3';
    BEGIN
      Window.OPEN(Text016 + '@1@@@@@@@@@@@@@@@@@@@@@@@@@\');
      TotalRecNo := ExcelBuf.COUNT;

      ItemBudgetBuf.DELETEALL;

      IF ExcelBuf.FIND('-') THEN
        REPEAT
          RecNo := RecNo + 1;
          Window.UPDATE(1,ROUND(RecNo / TotalRecNo * 10000,1));
          CASE TRUE OF
            STRPOS(ExcelBuf."Cell Value as Text",Text007) <> 0:
              BEGIN
                IF HeaderRowNo = 0 THEN
                  HeaderRowNo := ExcelBuf."Row No."
                ELSE
                  ERROR(Text011,Text007);

                ConvertFiltersToValue(
                  DateFilter,
                  ItemFilter,
                  GlobalDim1Filter,
                  GlobalDim2Filter,
                  BudgetDim1Filter,
                  BudgetDim2Filter,
                  BudgetDim3Filter,
                  SourceNoFilter,
                  SourceTypeFilter);

                IF ItemBudgetManagement.DimCodeNotAllowed(LineDimCode,ItemBudgetName) THEN
                  ERROR(Text019,LineDimCode);

                IF ItemBudgetManagement.DimCodeNotAllowed(ColumnDimCode,ItemBudgetName) THEN
                  ERROR(Text020,ColumnDimCode);

                ItemBudgetManagement.SetLineAndColDim(
                  ItemBudgetName,
                  LineDimCode,
                  LineDimOption,
                  ColumnDimCode,
                  ColumnDimOption);
              END;
            STRPOS(ExcelBuf."Cell Value as Text",IsGlobalDimFilter(1)) <> 0:
              BEGIN
                CheckFilterRowNo(HeaderRowNo);
                ExcelBuf.SETRANGE("Row No.",ExcelBuf."Row No.");
                IF ExcelBuf.NEXT <> 0 THEN
                  GlobalDim1Filter := COPYSTR(ExcelBuf."Cell Value as Text",1,MAXSTRLEN(GlobalDim1Filter));
                ExcelBuf.SETRANGE("Row No.");
              END;
            STRPOS(ExcelBuf."Cell Value as Text",IsGlobalDimFilter(2)) <> 0:
              BEGIN
                CheckFilterRowNo(HeaderRowNo);
                ExcelBuf.SETRANGE("Row No.",ExcelBuf."Row No.");
                IF ExcelBuf.NEXT <> 0 THEN
                  GlobalDim2Filter := COPYSTR(ExcelBuf."Cell Value as Text",1,MAXSTRLEN(GlobalDim2Filter));
                ExcelBuf.SETRANGE("Row No.");
              END;
            STRPOS(ExcelBuf."Cell Value as Text",IsBudgetDimFilter(1)) <> 0:
              BEGIN
                CheckFilterRowNo(HeaderRowNo);
                ExcelBuf.SETRANGE("Row No.",ExcelBuf."Row No.");
                IF ExcelBuf.NEXT <> 0 THEN
                  BudgetDim1Filter := COPYSTR(ExcelBuf."Cell Value as Text",1,MAXSTRLEN(BudgetDim1Filter));
                ExcelBuf.SETRANGE("Row No.");
              END;
            STRPOS(ExcelBuf."Cell Value as Text",IsBudgetDimFilter(2)) <> 0:
              BEGIN
                CheckFilterRowNo(HeaderRowNo);
                ExcelBuf.SETRANGE("Row No.",ExcelBuf."Row No.");
                IF ExcelBuf.NEXT <> 0 THEN
                  BudgetDim2Filter := COPYSTR(ExcelBuf."Cell Value as Text",1,MAXSTRLEN(BudgetDim2Filter));
                ExcelBuf.SETRANGE("Row No.");
              END;
            STRPOS(ExcelBuf."Cell Value as Text",IsBudgetDimFilter(3)) <> 0:
              BEGIN
                CheckFilterRowNo(HeaderRowNo);
                ExcelBuf.SETRANGE("Row No.",ExcelBuf."Row No.");
                IF ExcelBuf.NEXT <> 0 THEN
                  BudgetDim3Filter := COPYSTR(ExcelBuf."Cell Value as Text",1,MAXSTRLEN(BudgetDim3Filter));
                ExcelBuf.SETRANGE("Row No.");
              END;
            STRPOS(ExcelBuf."Cell Value as Text",Text017) <> 0:
              BEGIN
                CheckFilterRowNo(HeaderRowNo);
                ExcelBuf.SETRANGE("Row No.",ExcelBuf."Row No.");
                IF ExcelBuf.NEXT <> 0 THEN
                  ItemFilter := COPYSTR(ExcelBuf."Cell Value as Text",1,MAXSTRLEN(ItemFilter));
                ExcelBuf.SETRANGE("Row No.");
              END;
            STRPOS(ExcelBuf."Cell Value as Text",Text013) <> 0:
              BEGIN
                CheckFilterRowNo(HeaderRowNo);
                ExcelBuf.SETRANGE("Row No.",ExcelBuf."Row No.");
                IF ExcelBuf.NEXT <> 0 THEN
                  DateFilter := COPYSTR(ExcelBuf."Cell Value as Text",1,MAXSTRLEN(DateFilter));
                ExcelBuf.SETRANGE("Row No.");
              END;
            STRPOS(ExcelBuf."Cell Value as Text",Text014) <> 0:
              BEGIN
                CheckFilterRowNo(HeaderRowNo);
                ExcelBuf.SETRANGE("Row No.",ExcelBuf."Row No.");
                IF ExcelBuf.NEXT <> 0 THEN BEGIN
                  SourceTypeFilter := SourceTypeFilter::Customer;
                  SourceNoFilter := COPYSTR(ExcelBuf."Cell Value as Text",1,MAXSTRLEN(SourceNoFilter));
                END;
                ExcelBuf.SETRANGE("Row No.");
              END;
            STRPOS(ExcelBuf."Cell Value as Text",Text015) <> 0:
              BEGIN
                CheckFilterRowNo(HeaderRowNo);
                ExcelBuf.SETRANGE("Row No.",ExcelBuf."Row No.");
                IF ExcelBuf.NEXT <> 0 THEN BEGIN
                  SourceTypeFilter := SourceTypeFilter::Vendor;
                  SourceNoFilter := COPYSTR(ExcelBuf."Cell Value as Text",1,MAXSTRLEN(SourceNoFilter));
                END;
                ExcelBuf.SETRANGE("Row No.");
              END;
            STRPOS(ExcelBuf."Cell Value as Text",Text008) <> 0:
              BEGIN
                CheckFilterRowNo(HeaderRowNo);
                ExcelBuf.SETRANGE("Row No.",ExcelBuf."Row No.");
                IF ExcelBuf.NEXT <> 0 THEN
                  LineDimCode := COPYSTR(ExcelBuf."Cell Value as Text",1,MAXSTRLEN(LineDimCode));
                ExcelBuf.SETRANGE("Row No.");
              END;
            STRPOS(ExcelBuf."Cell Value as Text",Text009) <> 0:
              BEGIN
                CheckFilterRowNo(HeaderRowNo);
                ExcelBuf.SETRANGE("Row No.",ExcelBuf."Row No.");
                IF ExcelBuf.NEXT <> 0 THEN
                  ColumnDimCode := COPYSTR(ExcelBuf."Cell Value as Text",1,MAXSTRLEN(ColumnDimCode));
                ExcelBuf.SETRANGE("Row No.");
              END;
            (ExcelBuf."Row No." > HeaderRowNo) AND (HeaderRowNo <> 0):
              BEGIN
                CurrLineDimValue := COPYSTR(ExcelBuf."Cell Value as Text",1,MAXSTRLEN(CurrLineDimValue));
                ExcelBuf.SETRANGE("Row No.",ExcelBuf."Row No.");
                WHILE ExcelBuf.NEXT <> 0 DO BEGIN
                  CurrColumnDimValue := GetCurrColumnDimValue(ExcelBuf."Column No.",HeaderRowNo);
                  ExchangeFiltersWithDimValue(
                    CurrLineDimValue,
                    CurrColumnDimValue,
                    LineDimOption,
                    ColumnDimOption,
                    DateFilter,
                    ItemFilter,
                    LocationFilter,
                    GlobalDim1Filter,
                    GlobalDim2Filter,
                    BudgetDim1Filter,
                    BudgetDim2Filter,
                    BudgetDim3Filter,
                    SourceNoFilter,
                    SourceTypeFilter);

                  ItemBudgetBuf.INIT;
                  ItemBudgetBuf."Item No." := ItemFilter;
                  IF SourceTypeFilter <> 0 THEN
                    ItemBudgetBuf."Source Type" := SourceTypeFilter
                  ELSE
                    ItemBudgetBuf."Source Type" := LineDimOption;
                  ItemBudgetBuf."Source No." := SourceNoFilter;
                  ItemBudgetBuf."Location Code" := LocationFilter;
                  ItemBudgetBuf."Global Dimension 1 Code" := GlobalDim1Filter;
                  ItemBudgetBuf."Global Dimension 2 Code" := GlobalDim2Filter;
                  ItemBudgetBuf."Budget Dimension 1 Code" := BudgetDim1Filter;
                  ItemBudgetBuf."Budget Dimension 2 Code" := BudgetDim2Filter;
                  ItemBudgetBuf."Budget Dimension 3 Code" := BudgetDim3Filter;
                  EVALUATE(ItemBudgetBuf.Date,DateFilter);
                  CASE ValueType OF
                    ValueType::"Sales Amount":
                      EVALUATE(ItemBudgetBuf."Sales Amount",ExcelBuf."Cell Value as Text");
                    ValueType::"COGS / Cost Amount":
                      EVALUATE(ItemBudgetBuf."Cost Amount",ExcelBuf."Cell Value as Text");
                    ValueType::Quantity:
                      EVALUATE(ItemBudgetBuf.Quantity,ExcelBuf."Cell Value as Text");
                  END;
                  ItemBudgetBuf.INSERT;
                END;
                ExcelBuf.SETRANGE("Row No.");
              END;
          END;
        UNTIL ExcelBuf.NEXT = 0;

      Window.CLOSE;
    END;

    LOCAL PROCEDURE ExchangeFiltersWithDimValue@10(CurrLineDimValue@1000 : Code[20];CurrColumnDimValue@1001 : Code[20];LineDimOption@1003 : 'Item,Customer,Vendor,Period,Location,Global Dimension 1,Global Dimension 2,Budget Dimension 1,Budget Dimension 2,Budget Dimension 3';ColumnDimOption@1002 : 'Item,Customer,Vendor,Period,Location,Global Dimension 1,Global Dimension 2,Budget Dimension 1,Budget Dimension 2,Budget Dimension 3';VAR DateFilter@1012 : Text[30];VAR ItemFilter@1011 : Code[20];VAR LocationFilter@1013 : Code[10];VAR GlobalDim1Filter@1010 : Code[20];VAR GlobalDim2Filter@1009 : Code[20];VAR BudgetDim1Filter@1008 : Code[20];VAR BudgetDim2Filter@1007 : Code[20];VAR BudgetDim3Filter@1006 : Code[20];VAR SourceNoFilter@1005 : Code[20];VAR SourceTypeFilter@1004 : ' ,Customer,Vendor,Item');
    BEGIN
      CASE LineDimOption OF
        LineDimOption::Item:
          ItemFilter := CurrLineDimValue;
        LineDimOption::Customer:
          BEGIN
            SourceNoFilter := CurrLineDimValue;
            IF SourceTypeFilter = SourceTypeFilter::" " THEN
              SourceTypeFilter := SourceTypeFilter::Customer;
          END;
        LineDimOption::Vendor:
          BEGIN
            SourceNoFilter := CurrLineDimValue;
            IF SourceTypeFilter = SourceTypeFilter::" " THEN
              SourceTypeFilter := SourceTypeFilter::Vendor;
          END;
        LineDimOption::Period:
          DateFilter := CurrLineDimValue;
        LineDimOption::Location:
          LocationFilter := COPYSTR(CurrLineDimValue,1,MAXSTRLEN(LocationFilter));
        LineDimOption::"Global Dimension 1":
          GlobalDim1Filter := CurrLineDimValue;
        LineDimOption::"Global Dimension 2":
          GlobalDim2Filter := CurrLineDimValue;
        LineDimOption::"Budget Dimension 1":
          BudgetDim1Filter := CurrLineDimValue;
        LineDimOption::"Budget Dimension 2":
          BudgetDim2Filter := CurrLineDimValue;
        LineDimOption::"Budget Dimension 3":
          BudgetDim3Filter := CurrLineDimValue;
        ELSE
          ERROR(Text018,CurrLineDimValue);
      END;

      CASE ColumnDimOption OF
        ColumnDimOption::Item:
          ItemFilter := CurrColumnDimValue;
        ColumnDimOption::Customer:
          BEGIN
            SourceNoFilter := CurrColumnDimValue;
            IF SourceTypeFilter = SourceTypeFilter::" " THEN
              SourceTypeFilter := SourceTypeFilter::Customer;
          END;
        ColumnDimOption::Vendor:
          BEGIN
            SourceNoFilter := CurrColumnDimValue;
            IF SourceTypeFilter = SourceTypeFilter::" " THEN
              SourceTypeFilter := SourceTypeFilter::Vendor;
          END;
        ColumnDimOption::Period:
          DateFilter := CurrColumnDimValue;
        ColumnDimOption::Location:
          LocationFilter := COPYSTR(CurrColumnDimValue,1,MAXSTRLEN(LocationFilter));
        ColumnDimOption::"Global Dimension 1":
          GlobalDim1Filter := CurrColumnDimValue;
        ColumnDimOption::"Global Dimension 2":
          GlobalDim2Filter := CurrColumnDimValue;
        ColumnDimOption::"Budget Dimension 1":
          BudgetDim1Filter := CurrColumnDimValue;
        ColumnDimOption::"Budget Dimension 2":
          BudgetDim2Filter := CurrColumnDimValue;
        ColumnDimOption::"Budget Dimension 3":
          BudgetDim3Filter := CurrColumnDimValue;
        ELSE
          ERROR(Text018,CurrColumnDimValue);
      END;
    END;

    LOCAL PROCEDURE GetCurrColumnDimValue@7(ColNo@1000 : Integer;HeaderRowNo@1002 : Integer) : Code[20];
    VAR
      ExcelBuf2@1001 : Record 370;
    BEGIN
      IF NOT ExcelBuf2.GET(HeaderRowNo,ColNo) THEN
        ERROR(Text021,HeaderRowNo,ColNo);
      EXIT(ExcelBuf2."Cell Value as Text");
    END;

    LOCAL PROCEDURE ConvertFiltersToValue@13(VAR DateFilter@1005 : Text[30];VAR ItemFilter@1006 : Code[20];VAR GlobalDim1Filter@1011 : Code[20];VAR GlobalDim2Filter@1010 : Code[20];VAR BudgetDim1Filter@1009 : Code[20];VAR BudgetDim2Filter@1008 : Code[20];VAR BudgetDim3Filter@1007 : Code[20];VAR SourceNoFilter@1012 : Code[20];SourceTypeFilter@1013 : ' ,Customer,Vendor,Item');
    VAR
      Item@1000 : Record 27;
      Calendar@1001 : Record 2000000007;
      Cust@1002 : Record 18;
      Vend@1003 : Record 23;
      DimValue@1004 : Record 349;
      CurrDate@1014 : Date;
    BEGIN
      IF ItemFilter <> '' THEN BEGIN
        Item.SETFILTER("No.",ItemFilter);
        ItemFilter := Item.GETRANGEMIN("No.");
        Item.GET(ItemFilter);
      END;

      IF DateFilter <> '' THEN BEGIN
        Calendar.SETFILTER("Period Start",DateFilter);
        DateFilter := FORMAT(Calendar.GETRANGEMIN("Period Start"));
        EVALUATE(CurrDate,DateFilter);
        Calendar.GET(Calendar."Period Type"::Date,CurrDate);
      END;

      IF SourceNoFilter <> '' THEN
        CASE SourceTypeFilter OF
          SourceTypeFilter::Customer:
            BEGIN
              Cust.SETFILTER("No.",SourceNoFilter);
              SourceNoFilter := Cust.GETRANGEMIN("No.");
              Cust.GET(SourceNoFilter);
            END;
          SourceTypeFilter::Vendor:
            BEGIN
              Vend.SETFILTER("No.",SourceNoFilter);
              SourceNoFilter := Vend.GETRANGEMIN("No.");
              Vend.GET(SourceNoFilter);
            END;
        END;

      GetGLSetup;
      IF GlobalDim1Filter <> '' THEN BEGIN
        DimValue.SETFILTER(Code,GlobalDim1Filter);
        GlobalDim1Filter := DimValue.GETRANGEMIN(Code);
        DimValue.GET(GLSetup."Global Dimension 1 Code",GlobalDim1Filter);
      END;

      IF GlobalDim2Filter <> '' THEN BEGIN
        DimValue.SETFILTER(Code,GlobalDim2Filter);
        GlobalDim2Filter := DimValue.GETRANGEMIN(Code);
        DimValue.GET(GLSetup."Global Dimension 2 Code",GlobalDim2Filter);
      END;

      IF BudgetDim1Filter <> '' THEN BEGIN
        DimValue.SETFILTER(Code,BudgetDim1Filter);
        BudgetDim1Filter := DimValue.GETRANGEMIN(Code);
        DimValue.GET(ItemBudgetName."Budget Dimension 1 Code",BudgetDim1Filter);
      END;

      IF BudgetDim2Filter <> '' THEN BEGIN
        DimValue.SETFILTER(Code,BudgetDim2Filter);
        BudgetDim2Filter := DimValue.GETRANGEMIN(Code);
        DimValue.GET(ItemBudgetName."Budget Dimension 2 Code",BudgetDim2Filter);
      END;

      IF BudgetDim3Filter <> '' THEN BEGIN
        DimValue.SETFILTER(Code,BudgetDim3Filter);
        BudgetDim3Filter := DimValue.GETRANGEMIN(Code);
        DimValue.GET(ItemBudgetName."Budget Dimension 3 Code",BudgetDim3Filter);
      END;
    END;

    LOCAL PROCEDURE CheckFilterRowNo@12(HeaderRowNo@1000 : Integer);
    BEGIN
      IF (HeaderRowNo <> 0) AND (ExcelBuf."Row No." > HeaderRowNo) THEN
        ERROR(Text012);
    END;

    LOCAL PROCEDURE IsGlobalDimFilter@3(DimNo@1000 : Integer) : Text[30];
    VAR
      Dim@1001 : Record 348;
    BEGIN
      GetGLSetup;
      CASE DimNo OF
        1:
          IF Dim.GET(GLSetup."Global Dimension 1 Code") THEN;
        2:
          IF Dim.GET(GLSetup."Global Dimension 2 Code") THEN;
      END;
      EXIT(Dim."Filter Caption");
    END;

    LOCAL PROCEDURE IsBudgetDimFilter@11(DimNo@1000 : Integer) : Text[30];
    VAR
      Dim@1001 : Record 348;
    BEGIN
      CASE DimNo OF
        1:
          IF Dim.GET(ItemBudgetName."Budget Dimension 1 Code") THEN;
        2:
          IF Dim.GET(ItemBudgetName."Budget Dimension 2 Code") THEN;
        3:
          IF Dim.GET(ItemBudgetName."Budget Dimension 3 Code") THEN;
      END;
      EXIT(Dim."Filter Caption");
    END;

    LOCAL PROCEDURE GetGLSetup@5();
    BEGIN
      IF NOT GlSetupRead THEN
        GLSetup.GET;
      GlSetupRead := TRUE;
    END;

    [External]
    PROCEDURE SetParameters@6(NewToItemBudgetName@1000 : Code[10];NewAnalysisArea@1001 : Integer;NewValueType@1002 : Integer);
    BEGIN
      ToItemBudgetName := NewToItemBudgetName;
      AnalysisArea := NewAnalysisArea;
      ValueTypeHidden := NewValueType;
    END;

    [External]
    PROCEDURE SetFileNameSilent@1(NewFileName@1000 : Text);
    BEGIN
      ServerFileName := NewFileName;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

