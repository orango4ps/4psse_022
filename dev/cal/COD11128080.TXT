OBJECT Codeunit 11128080 BaseTables
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=PE7.02 (12047958);
  }
  PROPERTIES
  {
    Permissions=TableData 21=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      gGLSetup@1100570000 : Record 98;
      gSetupOK@1100570001 : Boolean;

    PROCEDURE GetSourceName@1100570005(pGLEntry@1100570000 : Record 17) : Text;
    VAR
      Vendor@1100570001 : Record 23;
      Customer@1100570002 : Record 18;
      BankAccount@1100570003 : Record 270;
      FixedAsset@1100570004 : Record 5600;
    BEGIN

      WITH pGLEntry DO BEGIN
        CASE "Source Type" OF
          "Source Type"::Vendor:
          IF Vendor.GET("Source No.") THEN
              EXIT(Vendor.Name);
          "Source Type"::Customer:
            IF Customer.GET("Source No.") THEN
              EXIT(Customer.Name);
          "Source Type"::"Bank Account":
            IF BankAccount.GET("Source No.") THEN
              EXIT(BankAccount.Name);
          "Source Type"::"Fixed Asset":
            IF FixedAsset.GET("Source No.") THEN
              EXIT(FixedAsset.Description);
        END;
      END;

      EXIT('');
    END;

    PROCEDURE DefaultCustomerFromTemplate@12047992(VAR pvCustomer@1100570004 : Record 18;pTemplateCustomer@12047958 : Record 18);
    BEGIN
    END;

    PROCEDURE DefaultVendorFromTemplate@12044965(VAR pvVendor@1100570005 : Record 23;pTemplateVendor@12044958 : Record 23);
    BEGIN
    END;

    PROCEDURE DefaultItemFromTemplate@12044958(VAR pvItem@1100570000 : Record 27;pTemplateItem@12044958 : Record 27);
    BEGIN
    END;

    PROCEDURE DefaultResourceFromTemplate@12047963(VAR pvResource@1100570005 : Record 156;pTemplateResource@12047958 : Record 156);
    BEGIN
    END;

    PROCEDURE DefaultJobFromTemplate@12047964(VAR pvJob@1100570000 : Record 11072003;pTemplateJob@12047958 : Record 11072003);
    BEGIN
    END;

    LOCAL PROCEDURE SetDefaultValuesForRecord@12047965(VAR pCurRecVar@12047960 : Variant;pTemplateRecVar@12047966 : Variant);
    BEGIN
    END;

    LOCAL PROCEDURE GetCust@2(pCustNo@1000 : Code[20];VAR pvSalesHeader@1100570001 : Record 36;VAR pvCustomer@1100570000 : Record 18);
    BEGIN
      WITH pvSalesHeader DO BEGIN
        IF NOT (("Document Type" = "Document Type"::Quote) AND (pCustNo = '')) THEN BEGIN
          IF pCustNo <> pvCustomer."No." THEN
            pvCustomer.GET(pCustNo);
        END ELSE
          CLEAR(pvCustomer);
      END;
    END;

    LOCAL PROCEDURE GetCurrentFieldNo@12047977(CurrentFieldNo@12047960 : Integer) rCurrentFieldNo : Integer;
    BEGIN
    END;

    LOCAL PROCEDURE CopyDefaultDim@12047958(pTableID@12047959 : Integer;pFromNo@12047960 : Code[20];pToNo@12047962 : Code[20]);
    VAR
      DefaultDim@12047958 : Record 352;
      DefaultDim2@12047961 : Record 352;
    BEGIN
      DefaultDim.RESET;
      DefaultDim.SETRANGE("Table ID",pTableID);
      DefaultDim.SETRANGE("No.",pFromNo);
      IF  DefaultDim.FINDSET THEN REPEAT
          DefaultDim2 := DefaultDim;
          DefaultDim2."No." := pToNo;
          IF DefaultDim2.INSERT THEN;
      UNTIL DefaultDim.NEXT = 0;
    END;

    PROCEDURE BankGiroAutoGiro@1100570029(VAR pvCustomer@1100570000 : Record 18;VAR pvxCustomer@1100570001 : Record 18);
    BEGIN
    END;

    PROCEDURE SetSearchName@1100570004() : Boolean;
    BEGIN
      // T23
      GetSetup;
      EXIT(gGLSetup."Vendor Search Name" = gGLSetup."Vendor Search Name"::Name);
    END;

    PROCEDURE GetMisCustInfo@1100570008(VAR pvSalesHeader@1100570000 : Record 36;pCust@1100570002 : Record 18);
    BEGIN
    END;

    PROCEDURE GetShipToCode@1100570010(VAR pvSalesHeader@1100570000 : Record 36);
    VAR
      Cust@1100570001 : Record 18;
    BEGIN
    END;

    PROCEDURE SetTextLineInfo@1100570009(VAR pvSalesLine@1100570000 : Record 37;VAR pvSalesLineTmp@1100570001 : TEMPORARY Record 37);
    BEGIN
    END;

    PROCEDURE SetShipping@1100570000(VAR pSalesHeader@1100570000 : Record 36;VAR pShipToAddr@1100570001 : Record 222);
    BEGIN
    END;

    PROCEDURE SetSalesLineMisc@1100570012(VAR pvSalesHeader@1100570003 : Record 36;VAR pvSalesLine@1100570000 : Record 37;VAR pvxSalesLine@1100570005 : Record 37);
    BEGIN
    END;

    PROCEDURE ValidateDescSalesLine@1100570013(VAR pvSalesLine@1100570001 : Record 37;pCurrFieldNo@1100570002 : Integer);
    VAR
      SalesLine@1100570000 : Record 37;
    BEGIN
      // T37
      WITH pvSalesLine DO BEGIN
        IF (pCurrFieldNo <> 0) AND ("No." = '') AND (Type <> Type::" ") THEN BEGIN
          SalesLine := pvSalesLine;
          VALIDATE(Type,Type::" ");
          Description := SalesLine.Description;
        END;
      END;
    END;

    PROCEDURE ConnectTxtToItemLine@1100570014(VAR pvSalesLine@1100570000 : Record 37);
    BEGIN
    END;

    PROCEDURE SetPurchLineMisc@1100570015(VAR pvPurchaseHeader@1100570003 : Record 38;VAR pvPurchaseLine@1100570000 : Record 39;VAR pvxPurchaseLine@1100570005 : Record 39);
    BEGIN
    END;

    LOCAL PROCEDURE ValidateDescPurchLine@1100570017(VAR pvPurchaseLine@1100570001 : Record 39;pCurrFieldNo@1100570002 : Integer);
    VAR
      PurchaseLine@1100570000 : Record 39;
    BEGIN
      // T39
      WITH pvPurchaseLine DO BEGIN
        IF (pCurrFieldNo <> 0) AND ("No." = '') THEN BEGIN
          PurchaseLine := pvPurchaseLine;
          VALIDATE(Type,Type::" ");
          Description := PurchaseLine.Description;
        END;
      END;
    END;

    PROCEDURE T81_GetDescription@1100570019(VAR pvGenJournalLine@1100570000 : Record 81);
    VAR
      VPMgt@12047958 : Codeunit 11128061;
    BEGIN
      // T81
      VPMgt.T81_GetDescription(pvGenJournalLine);
    END;

    PROCEDURE T81_AppliesCustomerCredit@12047962(VAR pvGenJournalLine@1100570000 : Record 81;VAR pvCustLedgEntry@12047958 : Record 21);
    VAR
      CustLedgEntry@1100570001 : Record 21;
      InfoText@12047959 : Text;
      PEB001@12047960 : TextConst 'ENU=There are more than one record with No. %1.\Choose one of the following %2 %3 in the Journal and try again;SVE=Det finns fler poster som har nummer %1.\V„lj en av f”ljande %2: %3 i journalen och f”rs”k ingen';
    BEGIN
      WITH pvGenJournalLine DO BEGIN
        CASE "Account Type" OF
          "Account Type"::Customer:
            BEGIN

              IF "Applies-to Doc. Type" <> "Applies-to Doc. Type"::" " THEN
                pvCustLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type")
              ELSE
                pvCustLedgEntry.SETRANGE("Document Type");

              CustLedgEntry.COPY(pvCustLedgEntry);
              CustLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
              CustLedgEntry.SETRANGE(Open,TRUE);
              IF CustLedgEntry.ISEMPTY THEN
                EXIT;

              IF CustLedgEntry.COUNT = 1 THEN
                EXIT;

              // Found more then one rec.
              InfoText := '';
              IF CustLedgEntry.FINDFIRST THEN REPEAT
                InfoText += FORMAT(CustLedgEntry."Document Type",0,'<Text>') + ', ';
              UNTIL CustLedgEntry.NEXT = 0;
              InfoText := DELCHR(InfoText,'>',', ');
              ERROR(PEB001,"Applies-to Doc. No.",FIELDCAPTION("Document Type"),InfoText);
            END;
        END;
      END;
    END;

    PROCEDURE T81_AppliesVendorCredit@12047968(VAR pvGenJournalLine@1100570000 : Record 81;VAR pvVendLedgEntry@12047958 : Record 25);
    VAR
      VendLedgEntry@1100570014 : Record 25;
      InfoText@12047959 : Text;
      PEB001@12047960 : TextConst 'ENU=There are more than one record with No. %1.\Choose one of the following %2 %3 in the Journal and try again;SVE=Det finns fler poster som har nummer %1.\V„lj en av f”ljande %2: %3 i journalen och f”rs”k ingen';
    BEGIN
      WITH pvGenJournalLine DO BEGIN
        CASE "Account Type" OF
          "Account Type"::Vendor:
            BEGIN

              IF "Applies-to Doc. Type" <> "Applies-to Doc. Type"::" " THEN
                pvVendLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type")
              ELSE
                pvVendLedgEntry.SETRANGE("Document Type");

              VendLedgEntry.COPY(pvVendLedgEntry);
              VendLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
              VendLedgEntry.SETRANGE(Open,TRUE);
              IF VendLedgEntry.ISEMPTY THEN
                EXIT;

              IF VendLedgEntry.COUNT = 1 THEN
                EXIT;

              // Found more then one rec.
              InfoText := '';
              IF VendLedgEntry.FINDFIRST THEN REPEAT
                InfoText += FORMAT(VendLedgEntry."Document Type",0,'<Text>') + ', ';
              UNTIL VendLedgEntry.NEXT = 0;
              InfoText := DELCHR(InfoText,'>',', ');
              ERROR(PEB001,"Applies-to Doc. No.",FIELDCAPTION("Document Type"),InfoText);
            END;
        END;
      END;
    END;

    PROCEDURE ValidateExternalDocumentNo@1100570023(VAR pvGenJournalLine@1100570000 : Record 81);
    VAR
      VendLedgEntry@1100570001 : Record 25;
      PEB015@1100570005 : TextConst 'ENU=%1 %2 allowance customer;NOR=%1 %2 avdrag kunde;SVE=%1 %2 avdrag kund';
      PEB016@1100570004 : TextConst 'ENU=%1 %2 payment vendor;SVE=%1 %2 betalning lev.';
      PEB017@1100570002 : TextConst 'ENU=Invoice No. %1 is not for Vendor No. %2;SVE=Fakturanr %1 tillh”r inte leverant”rsnr %2';
      PEB018@1100570003 : TextConst 'ENU=Invoice No. %1 does not exist, or is paid;SVE=Fakturanr %1 finns inte, eller „r betald';
    BEGIN
      // T81
      WITH pvGenJournalLine DO BEGIN
        IF ("Account No." <> '') THEN
          EXIT;
        IF ("Account Type" <> "Account Type"::Vendor) THEN
          EXIT;
        IF "External Document No." = '' THEN BEGIN
          VALIDATE(Amount,0);
          "Applies-to Doc. Type" := 0;
        END ELSE BEGIN
          VendLedgEntry.SETCURRENTKEY("External Document No.");
          VendLedgEntry.SETRANGE("External Document No.","External Document No.");
          VendLedgEntry.SETRANGE(Open,TRUE);
          VendLedgEntry.SETFILTER("Vendor No.", "Account No.");
          IF VendLedgEntry.FIND('-') THEN BEGIN
            VendLedgEntry.CALCFIELDS("Remaining Amount");
            IF VendLedgEntry.COUNT > 1 THEN
              IF PAGE.RUNMODAL(29, VendLedgEntry) = ACTION::LookupCancel THEN BEGIN
                CLEAR("External Document No.");
                EXIT;
              END;
            IF "Account No." = '' THEN
              VALIDATE("Account No.",VendLedgEntry."Vendor No.")
            ELSE
              IF VendLedgEntry."Vendor No." <> "Account No." THEN
                ERROR(PEB017,"Applies-to Doc. No.","Account No.");
            IF ("Document Type" = 1) AND
               (VendLedgEntry."Document Type" = 2) AND
               ("Posting Date" <= VendLedgEntry."Pmt. Discount Date")
            THEN
              Amount := -(VendLedgEntry."Remaining Amount" - VendLedgEntry."Original Pmt. Disc. Possible")
            ELSE
              Amount := -VendLedgEntry."Remaining Amount";
            VALIDATE(Amount);
            "Applies-to Doc. Type" := VendLedgEntry."Document Type";
            "Applies-to Doc. No." := VendLedgEntry."Document No.";
            "Applies-to ID" := '';
            "External Document No." := VendLedgEntry."External Document No.";
            "Document Type" := "Document Type"::Payment;
          END ELSE
            ERROR(PEB018,"Applies-to Doc. No.");
          VALIDATE("Payment Terms Code");
          "Due Date" := VendLedgEntry."Due Date";
        END;
        IF Amount > 0 THEN
            Description := STRSUBSTNO(PEB016,"Applies-to Doc. No.",VendLedgEntry."Document Type")
        ELSE
            Description := STRSUBSTNO(PEB015,"Applies-to Doc. No.",
            VendLedgEntry."Document Type");
      END;
    END;

    PROCEDURE DeleteTexLineEntrys@1070002(VAR pvGenJournalLine@1100570000 : Record 81);
    VAR
      TextLineEntry@1070000 : Record 11128080;
    BEGIN
      // T81
      WITH pvGenJournalLine DO BEGIN
        TextLineEntry.RESET;
        TextLineEntry.SETRANGE("Journal Template Name","Journal Template Name");
        TextLineEntry.SETRANGE("Journal Batch Name","Journal Batch Name");
        TextLineEntry.SETRANGE("Journal Line No.","Line No.");
        TextLineEntry.DELETEALL;
      END;
    END;

    PROCEDURE UpdateLineNoTextLine@1000000002(VAR pvSalesLine@1100570000 : Record 37);
    BEGIN
    END;

    LOCAL PROCEDURE DeleteItemAppl@1000000000(VAR pvSalesLine@1100570000 : Record 37;VAR pvCurrentSalesLine@1100570001 : Record 37);
    BEGIN
    END;

    PROCEDURE GetSetup@1100570001();
    BEGIN
      IF gSetupOK THEN
        EXIT;
      gGLSetup.GET;
      gSetupOK := TRUE;
    END;

    PROCEDURE DoRoundingForReminder@12047959(pReminderHeader@12047959 : Record 295) : Boolean;
    VAR
      ReminderTerms@12047958 : Record 292;
    BEGIN
      // 295
      IF NOT ReminderTerms.GET(pReminderHeader."Reminder Terms Code") THEN
        EXIT(TRUE);

      EXIT(ReminderTerms."Post Interest" OR ReminderTerms."Post Additional Fee");
    END;

    BEGIN
    {
      PEB *** Begin ***
      PEB0003 Make translations of G/L Accounts and Resources
      PEB0005 Default Delivery Customer
      PEB0006 Autogiro
      PEB0007 Default Customer, Vendor, Item, Resource and Job
      PEB0009 "Search Name" is Bankgiro No. or Postal Giro No.
      PEB0017 Price Calculation from Sell-to Customer No. or Bill-to Customer No.
      PEB0019 Charge Type to all Documents
      PEB0020 Textline applied to Itemline
      PEB0021 Quantity = 1 when Account and Charge (Item)
      PEB0022 "Gen. Posting Type", "Gen. Bus. Posting Group" and "Gen. Prod. Posting Group" is not Copied from the G/L Account
      PEB0024 When entering a Textline the Type is always blank
      PEB0065 BG-Max
        Permissions:
         - TableData Cust. Ledger Entry=rimd
        Global Variable CheckMark is Temporary Record

      PEB0037 If Delete <F4>, question if you want to mark the Customer Ledger Entries
        Permissions:
         - TableData Cust. Ledger Entry=rimd
      PEB
      PEB *** End ***
      190212 ORANGO.DL upgrade to PE8.08
    }
    END.
  }
}

