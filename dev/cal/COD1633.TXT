OBJECT Codeunit 1633 Office Host Provider
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    SingleInstance=Yes;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TempOfficeAddinContextInternal@1001 : TEMPORARY Record 1600;
      TempExchangeObjectInternal@1003 : TEMPORARY Record 1602;
      OfficeHost@1002 : DotNet "'Microsoft.Dynamics.Nav.ClientExtensions, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.Hosts.OfficeHost" RUNONCLIENT;
      IsHostInitialized@1000 : Boolean;

    LOCAL PROCEDURE CanHandle@2() : Boolean;
    VAR
      OfficeAddinSetup@1000 : Record 1601;
    BEGIN
      IF OfficeAddinSetup.GET THEN
        EXIT(OfficeAddinSetup."Office Host Codeunit ID" = CODEUNIT::"Office Host Provider");

      EXIT(FALSE);
    END;

    [EventSubscriber(Codeunit,1631,OnInitializeHost)]
    LOCAL PROCEDURE OnInitializeHost@3(NewOfficeHost@1000 : DotNet "'Microsoft.Dynamics.Nav.ClientExtensions, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.Hosts.OfficeHost" RUNONCLIENT;NewHostType@1001 : Text);
    BEGIN
      IF NOT CanHandle THEN
        EXIT;

      OfficeHost := NewOfficeHost;
      IsHostInitialized := NOT ISNULL(OfficeHost);
    END;

    [EventSubscriber(Codeunit,1631,OnInitializeContext)]
    LOCAL PROCEDURE OnInitializeContext@1(TempNewOfficeAddinContext@1000 : TEMPORARY Record 1600);
    BEGIN
      IF NOT CanHandle THEN
        EXIT;

      TempOfficeAddinContextInternal := TempNewOfficeAddinContext;
    END;

    [EventSubscriber(Codeunit,1631,OnInitializeExchangeObject)]
    LOCAL PROCEDURE OnInitializeExchangeObject@16();
    BEGIN
      IF NOT CanHandle THEN
        EXIT;

      TempExchangeObjectInternal.DELETEALL;
    END;

    [EventSubscriber(Codeunit,1631,OnGetHostType)]
    LOCAL PROCEDURE OnGetHostType@10(VAR HostType@1000 : Text);
    BEGIN
      IF NOT CanHandle THEN
        EXIT;
      IF NOT IsHostInitialized THEN
        EXIT;

      HostType := OfficeHost.HostType;
    END;

    [EventSubscriber(Codeunit,1631,OnCloseCurrentPage)]
    LOCAL PROCEDURE OnCloseCurrentPage@7();
    BEGIN
      IF NOT CanHandle THEN
        EXIT;

      ERROR('');
    END;

    [EventSubscriber(Codeunit,1631,OnInvokeExtension)]
    LOCAL PROCEDURE OnInvokeExtension@13(FunctionName@1000 : Text;Parameter1@1001 : Variant;Parameter2@1002 : Variant;Parameter3@1003 : Variant;Parameter4@1004 : Variant);
    BEGIN
      IF NOT CanHandle THEN
        EXIT;

      OfficeHost := OfficeHost.Create;
      OfficeHost.InvokeExtensionAsync(FunctionName,Parameter1,Parameter2,Parameter3,Parameter4);
    END;

    [EventSubscriber(Codeunit,1631,OnIsHostInitialized)]
    LOCAL PROCEDURE OnIsHostInitialized@4(VAR Result@1000 : Boolean);
    BEGIN
      IF NOT CanHandle THEN
        EXIT;

      Result := IsHostInitialized;
    END;

    [EventSubscriber(Codeunit,1631,OnIsAvailable)]
    LOCAL PROCEDURE OnIsAvailable@12(VAR Result@1000 : Boolean);
    BEGIN
      IF NOT CanHandle THEN
        EXIT;

      OnIsHostInitialized(Result);
      IF Result THEN
        Result := OfficeHost.IsAvailable;
    END;

    [EventSubscriber(Codeunit,1631,OnGetTempOfficeAddinContext)]
    LOCAL PROCEDURE OnGetTempOfficeAddinContext@14(VAR TempOfficeAddinContext@1000 : TEMPORARY Record 1600);
    BEGIN
      IF NOT CanHandle THEN
        EXIT;

      CLEAR(TempOfficeAddinContext);
      TempOfficeAddinContext.COPY(TempOfficeAddinContextInternal);
    END;

    [EventSubscriber(Codeunit,1631,OnSendToOCR)]
    LOCAL PROCEDURE OnSendToOCR@8(IncomingDocument@1000 : Record 130);
    BEGIN
      IF NOT CanHandle THEN
        EXIT;

      IncomingDocument.SendToOCR(TRUE);
    END;

    [EventSubscriber(Codeunit,1631,OnEmailHasAttachments)]
    LOCAL PROCEDURE OnEmailHasAttachments@9(VAR Result@1000 : Boolean);
    VAR
      ExchangeWebServicesServer@1001 : Codeunit 5321;
    BEGIN
      IF NOT CanHandle THEN
        EXIT;

      IF NOT (OfficeHost.CallbackToken IN ['',' ']) THEN
        WITH ExchangeWebServicesServer DO BEGIN
          InitializeWithOAuthToken(OfficeHost.CallbackToken,GetEndpoint);
          Result := EmailHasAttachments(TempOfficeAddinContextInternal."Item ID");
        END;
    END;

    [EventSubscriber(Codeunit,1631,OnGetEmailAndAttachments)]
    LOCAL PROCEDURE OnGetEmailAndAttachments@15(VAR TempExchangeObject@1000 : TEMPORARY Record 1602;Action@1002 : 'InitiateSendToOCR,InitiateSendToIncomingDocuments,InitiateSendToWorkFlow';VendorNumber@1003 : Code[20]);
    VAR
      ExchangeWebServicesServer@1001 : Codeunit 5321;
    BEGIN
      IF NOT CanHandle THEN
        EXIT;

      IF NOT TempExchangeObjectInternal.ISEMPTY THEN BEGIN
        CLEAR(TempExchangeObject);
        TempExchangeObjectInternal.MODIFYALL(InitiatedAction,Action);
        TempExchangeObjectInternal.MODIFYALL(VendorNo,VendorNumber);
        TempExchangeObject.COPY(TempExchangeObjectInternal,TRUE)
      END ELSE
        IF NOT (OfficeHost.CallbackToken IN ['',' ']) THEN
          WITH ExchangeWebServicesServer DO BEGIN
            InitializeWithOAuthToken(OfficeHost.CallbackToken,GetEndpoint);
            GetEmailAndAttachments(TempOfficeAddinContextInternal."Item ID",TempExchangeObject,Action,VendorNumber);
            TempExchangeObjectInternal.COPY(TempExchangeObject,TRUE);
          END;
    END;

    [EventSubscriber(Codeunit,1631,OnGetEmailBody)]
    LOCAL PROCEDURE OnGetEmailBody@5(ItemID@1000 : Text[250];VAR EmailBody@1001 : Text);
    VAR
      ExchangeWebServicesServer@1002 : Codeunit 5321;
    BEGIN
      IF NOT CanHandle THEN
        EXIT;

      IF NOT (OfficeHost.CallbackToken IN ['',' ']) THEN
        WITH ExchangeWebServicesServer DO BEGIN
          InitializeWithOAuthToken(OfficeHost.CallbackToken,GetEndpoint);
          EmailBody := GetEmailBody(ItemID);
        END;
    END;

    BEGIN
    END.
  }
}

