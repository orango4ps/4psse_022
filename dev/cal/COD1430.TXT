OBJECT Codeunit 1430 Role Center Notification Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.04;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      EvaluationNotificationIdTxt@1013 : TextConst '@@@={Locked};ENU=cb28c63d-4daf-453a-b41b-a8de9963d563;NOR=cb28c63d-4daf-453a-b41b-a8de9963d563;SVE=cb28c63d-4daf-453a-b41b-a8de9963d563';
      TrialNotificationIdTxt@1012 : TextConst '@@@={Locked};ENU=9e359b60-3d2e-40c7-8680-3365d51937f7;NOR=9e359b60-3d2e-40c7-8680-3365d51937f7;SVE=2751b488-ca52-42ef-b6d7-d7b4ba841e80';
      TrialSuspendedNotificationIdTxt@1022 : TextConst '@@@={Locked};ENU=9e359b60-3d2e-40c7-8680-3365d51937f7;NOR=9e359b60-3d2e-40c7-8680-3365d51937f7;SVE=2751b488-ca52-42ef-b6d7-d7b4ba841e80';
      TrialExtendedNotificationIdTxt@1025 : TextConst 'ENU=9e359b60-3d2e-40c7-8680-3365d51937f7;NOR=9e359b60-3d2e-40c7-8680-3365d51937f7';
      TrialExtendedSuspendedNotificationIdTxt@1035 : TextConst 'ENU=9e359b60-3d2e-40c7-8680-3365d51937f7;NOR=9e359b60-3d2e-40c7-8680-3365d51937f7';
      PaidWarningNotificationIdTxt@1011 : TextConst '@@@={Locked};ENU=2751b488-ca52-42ef-b6d7-d7b4ba841e80;NOR=2751b488-ca52-42ef-b6d7-d7b4ba841e80;SVE=2751b488-ca52-42ef-b6d7-d7b4ba841e80';
      PaidSuspendedNotificationIdTxt@1009 : TextConst '@@@={Locked};ENU=2751b488-ca52-42ef-b6d7-d7b4ba841e80;NOR=2751b488-ca52-42ef-b6d7-d7b4ba841e80;SVE=2751b488-ca52-42ef-b6d7-d7b4ba841e80';
      SandboxNotificationIdTxt@1015 : TextConst '@@@={Locked};ENU=d82835d9-a005-451a-972b-0d6532de2071;NOR=d82835d9-a005-451a-972b-0d6532de2071';
      ChangeToPremiumExpNotificationIdTxt@1029 : TextConst '@@@={Locked};ENU=58982418-e1d1-4879-bda2-6033ca151b83;NOR=58982418-e1d1-4879-bda2-6033ca151b83';
      TrialNotificationDaysSinceStartTxt@1014 : TextConst '@@@={Locked};ENU=15;NOR=15;SVE=1';
      EvaluationNotificationLinkTxt@1007 : TextConst 'ENU=Start trial...;NOR=Start pr›veperiode...;SVE=Starta test...';
      TrialNotificationLinkTxt@1003 : TextConst 'ENU=Subscribe now...;NOR=Abonner n†.;SVE=K”p prenumeration...';
      TrialNotificationExtendLinkTxt@1023 : TextConst 'ENU=Extend trial...;NOR=Forleng pr›veperiode.';
      TrialSuspendedNotificationLinkTxt@1020 : TextConst 'ENU=Subscribe now...;NOR=Abonner n†...;SVE=Prenumerera nu...';
      TrialSuspendedNotificationExtendLinkTxt@1031 : TextConst 'ENU=Extend trial...;NOR=Forleng pr›veperiode.';
      TrialExtendedNotificationSubscribeLinkTxt@1027 : TextConst 'ENU=Subscribe now...;NOR=Abonner n†.;SVE=K”p prenumeration...';
      TrialExtendedNotificationPartnerLinkTxt@1030 : TextConst 'ENU=Contact a partner...;NOR=Kontakt en partner.';
      TrialExtendedSuspendedNotificationSubscribeLinkTxt@1037 : TextConst 'ENU=Subscribe now...;NOR=Abonner n†.;SVE=Prenumerera nu...';
      TrialExtendedSuspendedNotificationPartnerLinkTxt@1038 : TextConst 'ENU=Contact a partner...;NOR=Kontakt en partner.';
      PaidWarningNotificationLinkTxt@1008 : TextConst 'ENU=Renew subscription...;NOR=Forny abonnement...;SVE=F”rnya prenumeration...';
      PaidSuspendedNotificationLinkTxt@1005 : TextConst 'ENU=Renew subscription...;NOR=Forny abonnement...;SVE=F”rnya prenumeration...';
      EvaluationNotificationMsg@1000 : TextConst '@@@="%1=Trial duration in days";ENU=Want more? Start a free, %1-day trial to unlock advanced features and use your own company data.;NOR=Vil du ha mer? Start en %1-dagers pr›veperiode uten ekstra kostnad for † l†se opp avanserte funksjoner og bruke dine egne selskapsdata.;SVE=Vill du ha mer? Skaffa en kostnadsfri %1-dagars utv„rderingsversion om du vill testa avancerade funktioner och anv„nda dem p† ditt f”retags data.';
      TrialNotificationMsg@1001 : TextConst '@@@="%1=Count of days until trial expires";ENU=Your trial period expires in %1 days. Ready to subscribe, or do you need more time?;NOR=Pr›veperioden utl›per om %1 dager. Er du klar til † abonnere, eller trenger du mer tid?;SVE=Testperiod upph”r om %1 dagar. Vill du skaffa en prenumeration?';
      TrialSuspendedNotificationMsg@1019 : TextConst 'ENU=Your trial period has expired. You can subscribe or extend the period to get more time.;NOR=Pr›veperioden har utl›pt. Du kan abonnere eller forlenge perioden for † f† mer tid.;SVE=Testperioden har upph”rt. Prenumerera inom %1 dagar f”r att beh†lla aff„rsdata.';
      TrialExtendedNotificationMsg@1026 : TextConst '@@@="%1=Count of days until trial expires";ENU=Your extended trial period will expire in %1 days. If it expires you can subscribe or contact a partner to get more time.;NOR=Den forlengede pr›veperioden utl›per om %1 dager. Hvis den utl›per, kan du abonnere eller kontakte en partner for † f† mer tid.';
      TrialExtendedSuspendedNotificationMsg@1033 : TextConst 'ENU=Your extended trial period has expired. You can subscribe or contact a partner to get more time.;NOR=Den forlengede pr›veperioden har utl›pt. Du kan abonnere eller kontakte en partner for † f† mer tid.';
      PaidWarningNotificationMsg@1004 : TextConst '@@@="%1=Count of days until block of access";ENU=Your subscription expires in %1 days. Renew soon to keep your work.;NOR=Abonnementet utl›per om %1 dager. Du m† fornye snart slik at du kan beholde arbeidet.;SVE=Prenumerationen upph”r om %1 dagar. Du m†ste snart f”rnya den om du vill beh†lla ditt arbete.';
      PaidSuspendedNotificationMsg@1017 : TextConst '@@@="%1=Count of days until data deletion";ENU=Your subscription has expired. Unless you renew, we will delete your data in %1 days.;NOR=Abonnementet har utl›pt. Hvis ikke du fornyer, slettes dataene dine om %1 dager.;SVE=Prenumerationen har upph”rt. S†vida du inte f”rnyar den kommer dina data att tas bort om %1 dagar.';
      ChooseCompanyMsg@1002 : TextConst 'ENU=Choose a non-evaluation company to start your trial.;NOR=Velg et ikke-evalueringsselskap for † starte pr›veperioden.;SVE=V„lj ett f”retag (ej utv„rdering) f”r att starta testversionen.';
      SandboxNotificationMsg@1006 : TextConst 'ENU=This is a sandbox environment (preview) for test, demo, or development purposes only.;NOR=Dette er et sandkassemilj› (forh†ndsvisning) bare for testing, demonstrasjon eller utvikling.';
      SandboxNotificationNameTok@1016 : TextConst 'ENU=Notify user of sandbox environment (preview).;NOR=Varsle bruker om sandkassemilj› (forh†ndsvisning).';
      DontShowThisAgainMsg@1018 : TextConst 'ENU=Don''t show this again.;NOR=Ikke vis dette igjen.';
      SandboxNotificationDescTok@1021 : TextConst 'ENU=Show a notification informing the user that they are working in a sandbox environment (preview).;NOR=Vis en varsling for brukeren om at han/hun arbeider i et sandkassemilj› (forh†ndsvisning).';
      ChangeToPremiumExpNotificationMsg@1036 : TextConst 'ENU=This Role Center contains functionality that may not be visible because of your experience setting or assigned plan. For more information, see Changing Which Features are Displayed;NOR=Dette rollesenteret inneholder funksjonalitet som kanskje ikke vises, p† grunn av opplevelsesinnstillingen eller den tilordnede planen din. For mer informasjon kan du se Endre hvilke funksjoner som vises';
      ChangeToPremiumExpURLTxt@1039 : TextConst '@@@=Locked;ENU="https://go.microsoft.com/fwlink/?linkid=873395";NOR="https://go.microsoft.com/fwlink/?linkid=873395"';
      ChangeToPremiumExpNotificationDescTok@1028 : TextConst 'ENU=Show a notification suggesting the user to change to Premium experience.;NOR=Vis et varsel som foresl†r at brukeren endrer til Premium-opplevelsen.';
      ChangeToPremiumExpNotificationNameTok@1046 : TextConst 'ENU=Suggest to change the Experience setting.;NOR=Foresl† † endre Opplevelse-innstillingen.';
      NoAccessToCompanyErr@1010 : TextConst '@@@="%1 = Company name";ENU=Cannot start trial company %1 because you do not have access to the company.;NOR=Kan ikke starte pr›veversjonsselskapet %1 fordi du ikke har tilgang til selskapet.;SVE=Tack f”r att du har valt att testa %1!\\Logga in igen om du vill komma ig†ng.';
      ContactAPartnerURLTxt@1034 : TextConst '@@@=Locked;ENU="https://go.microsoft.com/fwlink/?linkid=2038439";NOR="https://go.microsoft.com/fwlink/?linkid=2038439"';

    LOCAL PROCEDURE CreateAndSendEvaluationNotification@10();
    VAR
      EvaluationNotification@1001 : Notification;
      TrialTotalDays@1000 : Integer;
    BEGIN
      TrialTotalDays := GetTrialTotalDays;
      EvaluationNotification.ID := GetEvaluationNotificationId;
      EvaluationNotification.MESSAGE := STRSUBSTNO(EvaluationNotificationMsg,TrialTotalDays);
      EvaluationNotification.SCOPE := NOTIFICATIONSCOPE::LocalScope;
      EvaluationNotification.ADDACTION(
        EvaluationNotificationLinkTxt,CODEUNIT::"Role Center Notification Mgt.",'EvaluationNotificationAction');
      EvaluationNotification.SEND;
    END;

    LOCAL PROCEDURE CreateAndSendTrialNotification@21();
    VAR
      TrialNotification@1001 : Notification;
      RemainingDays@1000 : Integer;
    BEGIN
      RemainingDays := GetLicenseRemainingDays;
      TrialNotification.ID := GetTrialNotificationId;
      TrialNotification.MESSAGE := STRSUBSTNO(TrialNotificationMsg,RemainingDays);
      TrialNotification.SCOPE := NOTIFICATIONSCOPE::LocalScope;
      TrialNotification.ADDACTION(
        TrialNotificationLinkTxt,CODEUNIT::"Role Center Notification Mgt.",'TrialNotificationAction');
      TrialNotification.ADDACTION(
        TrialNotificationExtendLinkTxt,CODEUNIT::"Role Center Notification Mgt.",'TrialNotificationExtendAction');
      TrialNotification.SEND;
    END;

    LOCAL PROCEDURE CreateAndSendTrialSuspendedNotification@70();
    VAR
      TrialSuspendedNotification@1001 : Notification;
    BEGIN
      TrialSuspendedNotification.ID := GetTrialSuspendedNotificationId;
      TrialSuspendedNotification.MESSAGE := TrialSuspendedNotificationMsg;
      TrialSuspendedNotification.SCOPE := NOTIFICATIONSCOPE::LocalScope;
      TrialSuspendedNotification.ADDACTION(
        TrialSuspendedNotificationLinkTxt,
        CODEUNIT::"Role Center Notification Mgt.",
        'TrialSuspendedNotificationAction');
      TrialSuspendedNotification.ADDACTION(
        TrialSuspendedNotificationExtendLinkTxt,
        CODEUNIT::"Role Center Notification Mgt.",
        'TrialSuspendedNotificationExtendAction');
      TrialSuspendedNotification.SEND;
    END;

    LOCAL PROCEDURE CreateAndSendTrialExtendedNotification@81();
    VAR
      TrialExtendedNotification@1000 : Notification;
      RemainingDays@1001 : Integer;
    BEGIN
      RemainingDays := GetLicenseRemainingDays;
      TrialExtendedNotification.ID := GetTrialExtendedNotificationId;
      TrialExtendedNotification.MESSAGE := STRSUBSTNO(TrialExtendedNotificationMsg,RemainingDays);
      TrialExtendedNotification.SCOPE := NOTIFICATIONSCOPE::LocalScope;
      TrialExtendedNotification.ADDACTION(
        TrialExtendedNotificationSubscribeLinkTxt,
        CODEUNIT::"Role Center Notification Mgt.",
        'TrialExtendedNotificationSubscribeAction');
      TrialExtendedNotification.ADDACTION(
        TrialExtendedNotificationPartnerLinkTxt,
        CODEUNIT::"Role Center Notification Mgt.",
        'TrialExtendedNotificationPartnerAction');
      TrialExtendedNotification.SEND;
    END;

    LOCAL PROCEDURE CreateAndSendTrialExtendedSuspendedNotification@55();
    VAR
      TrialExtendedSuspendedNotification@1001 : Notification;
    BEGIN
      TrialExtendedSuspendedNotification.ID := GetTrialExtendedSuspendedNotificationId;
      TrialExtendedSuspendedNotification.MESSAGE := TrialExtendedSuspendedNotificationMsg;
      TrialExtendedSuspendedNotification.SCOPE := NOTIFICATIONSCOPE::LocalScope;
      TrialExtendedSuspendedNotification.ADDACTION(
        TrialExtendedSuspendedNotificationSubscribeLinkTxt,
        CODEUNIT::"Role Center Notification Mgt.",
        'TrialExtendedNotificationSubscribeAction');
      TrialExtendedSuspendedNotification.ADDACTION(
        TrialExtendedSuspendedNotificationPartnerLinkTxt,
        CODEUNIT::"Role Center Notification Mgt.",
        'TrialExtendedNotificationPartnerAction');
      TrialExtendedSuspendedNotification.SEND;
    END;

    LOCAL PROCEDURE CreateAndSendPaidWarningNotification@26();
    VAR
      PaidWarningNotification@1001 : Notification;
      RemainingDays@1000 : Integer;
    BEGIN
      RemainingDays := GetLicenseRemainingDays;
      PaidWarningNotification.ID := GetPaidWarningNotificationId;
      PaidWarningNotification.MESSAGE := STRSUBSTNO(PaidWarningNotificationMsg,RemainingDays);
      PaidWarningNotification.SCOPE := NOTIFICATIONSCOPE::LocalScope;
      PaidWarningNotification.ADDACTION(
        PaidWarningNotificationLinkTxt,CODEUNIT::"Role Center Notification Mgt.",'PaidWarningNotificationAction');
      PaidWarningNotification.SEND;
    END;

    LOCAL PROCEDURE CreateAndSendPaidSuspendedNotification@25();
    VAR
      PaidSuspendedNotification@1001 : Notification;
      RemainingDays@1000 : Integer;
    BEGIN
      RemainingDays := GetLicenseRemainingDays;
      PaidSuspendedNotification.ID := GetPaidSuspendedNotificationId;
      PaidSuspendedNotification.MESSAGE := STRSUBSTNO(PaidSuspendedNotificationMsg,RemainingDays);
      PaidSuspendedNotification.SCOPE := NOTIFICATIONSCOPE::LocalScope;
      PaidSuspendedNotification.ADDACTION(
        PaidSuspendedNotificationLinkTxt,CODEUNIT::"Role Center Notification Mgt.",'PaidSuspendedNotificationAction');
      PaidSuspendedNotification.SEND;
    END;

    LOCAL PROCEDURE CreateAndSendSandboxNotification@32();
    VAR
      SandboxNotification@1001 : Notification;
    BEGIN
      SandboxNotification.ID := GetSandboxNotificationId;
      SandboxNotification.MESSAGE := SandboxNotificationMsg;
      SandboxNotification.SCOPE := NOTIFICATIONSCOPE::LocalScope;
      SandboxNotification.ADDACTION(DontShowThisAgainMsg,CODEUNIT::"Role Center Notification Mgt.",'DisableSandboxNotification');
      SandboxNotification.SEND;
    END;

    LOCAL PROCEDURE CreateAndSendChangeToPremiumExpNotification@52();
    VAR
      ChangeToPremiumExpNotification@1001 : Notification;
    BEGIN
      ChangeToPremiumExpNotification.ID := GetChangeToPremiumExpNotificationId;
      ChangeToPremiumExpNotification.MESSAGE := ChangeToPremiumExpNotificationMsg;
      ChangeToPremiumExpNotification.SCOPE := NOTIFICATIONSCOPE::LocalScope;
      ChangeToPremiumExpNotification.ADDACTION(
        ChangeToPremiumExpURLTxt,CODEUNIT::"Role Center Notification Mgt.",'ChangeToPremiumExpURL');
      ChangeToPremiumExpNotification.ADDACTION(
        DontShowThisAgainMsg,CODEUNIT::"Role Center Notification Mgt.",'DisableChangeToPremiumExpNotification');
      ChangeToPremiumExpNotification.SEND;
    END;

    [External]
    PROCEDURE HideEvaluationNotificationAfterStartingTrial@13();
    VAR
      TenantLicenseState@1000 : Codeunit 2300;
      EvaluationNotification@1001 : Notification;
    BEGIN
      IF NOT TenantLicenseState.IsTrialMode THEN
        EXIT;
      IF NOT AreNotificationsSupported THEN
        EXIT;
      EvaluationNotification.ID := GetEvaluationNotificationId;
      EvaluationNotification.RECALL;
    END;

    [External]
    PROCEDURE GetEvaluationNotificationId@8() : GUID;
    VAR
      EvaluationNotificationId@1000 : GUID;
    BEGIN
      EVALUATE(EvaluationNotificationId,EvaluationNotificationIdTxt);
      EXIT(EvaluationNotificationId);
    END;

    [External]
    PROCEDURE GetTrialNotificationId@19() : GUID;
    VAR
      TrialNotificationId@1000 : GUID;
    BEGIN
      EVALUATE(TrialNotificationId,TrialNotificationIdTxt);
      EXIT(TrialNotificationId);
    END;

    [External]
    PROCEDURE GetTrialSuspendedNotificationId@63() : GUID;
    VAR
      TrialSuspendedNotificationId@1000 : GUID;
    BEGIN
      EVALUATE(TrialSuspendedNotificationId,TrialSuspendedNotificationIdTxt);
      EXIT(TrialSuspendedNotificationId);
    END;

    [External]
    PROCEDURE GetTrialExtendedNotificationId@82() : GUID;
    VAR
      TrialExtendedNotificationId@1000 : GUID;
    BEGIN
      EVALUATE(TrialExtendedNotificationId,TrialExtendedNotificationIdTxt);
      EXIT(TrialExtendedNotificationId);
    END;

    [External]
    PROCEDURE GetTrialExtendedSuspendedNotificationId@48() : GUID;
    VAR
      TrialExtendedSuspendedNotificationId@1000 : GUID;
    BEGIN
      EVALUATE(TrialExtendedSuspendedNotificationId,TrialExtendedSuspendedNotificationIdTxt);
      EXIT(TrialExtendedSuspendedNotificationId);
    END;

    [External]
    PROCEDURE GetPaidWarningNotificationId@31() : GUID;
    VAR
      PaidWarningNotificationId@1000 : GUID;
    BEGIN
      EVALUATE(PaidWarningNotificationId,PaidWarningNotificationIdTxt);
      EXIT(PaidWarningNotificationId);
    END;

    [External]
    PROCEDURE GetPaidSuspendedNotificationId@28() : GUID;
    VAR
      PaidSuspendedNotificationId@1000 : GUID;
    BEGIN
      EVALUATE(PaidSuspendedNotificationId,PaidSuspendedNotificationIdTxt);
      EXIT(PaidSuspendedNotificationId);
    END;

    [External]
    PROCEDURE GetSandboxNotificationId@36() : GUID;
    VAR
      SandboxNotificationId@1000 : GUID;
    BEGIN
      EVALUATE(SandboxNotificationId,SandboxNotificationIdTxt);
      EXIT(SandboxNotificationId);
    END;

    [External]
    PROCEDURE GetChangeToPremiumExpNotificationId@76() : GUID;
    VAR
      ChangeToPremiumExpNotificationId@1000 : GUID;
    BEGIN
      EVALUATE(ChangeToPremiumExpNotificationId,ChangeToPremiumExpNotificationIdTxt);
      EXIT(ChangeToPremiumExpNotificationId);
    END;

    LOCAL PROCEDURE AreNotificationsSupported@22() : Boolean;
    VAR
      PermissionManager@1001 : Codeunit 9002;
      IdentityManagement@1000 : Codeunit 9801;
    BEGIN
      IF NOT GUIALLOWED THEN
        EXIT(FALSE);

      IF IdentityManagement.IsInvAppId THEN
        EXIT(FALSE);

      IF NOT PermissionManager.SoftwareAsAService THEN
        EXIT(FALSE);

      IF PermissionManager.IsSandboxConfiguration THEN
        EXIT(FALSE);

      IF PermissionManager.IsPreview THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE AreSandboxNotificationsSupported@41() : Boolean;
    VAR
      PermissionManager@1001 : Codeunit 9002;
      IdentityManagement@1000 : Codeunit 9801;
    BEGIN
      IF NOT GUIALLOWED THEN
        EXIT(FALSE);

      IF IdentityManagement.IsInvAppId THEN
        EXIT(FALSE);

      IF NOT PermissionManager.SoftwareAsAService THEN
        EXIT(FALSE);

      IF NOT PermissionManager.IsSandboxConfiguration THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE IsEvaluationNotificationEnabled@24() : Boolean;
    VAR
      RoleCenterNotifications@1000 : Record 1430;
      ClientTypeManagement@1001 : Codeunit 4030;
      TenantLicenseState@1002 : Codeunit 2300;
    BEGIN
      IF NOT TenantLicenseState.IsEvaluationMode THEN
        EXIT(FALSE);

      IF NOT AreNotificationsSupported THEN
        EXIT(FALSE);

      IF ClientTypeManagement.GetCurrentClientType IN [CLIENTTYPE::Tablet,CLIENTTYPE::Phone] THEN
        EXIT(FALSE);

      RoleCenterNotifications.Initialize;

      IF RoleCenterNotifications.GetEvaluationNotificationState =
         RoleCenterNotifications."Evaluation Notification State"::Disabled
      THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE IsTrialNotificationEnabled@12() : Boolean;
    VAR
      ClientTypeManagement@1001 : Codeunit 4030;
      TenantLicenseState@1002 : Codeunit 2300;
    BEGIN
      IF NOT TenantLicenseState.IsTrialMode THEN
        EXIT(FALSE);

      IF NOT AreNotificationsSupported THEN
        EXIT(FALSE);

      IF ClientTypeManagement.GetCurrentClientType IN [CLIENTTYPE::Tablet,CLIENTTYPE::Phone] THEN
        EXIT(FALSE);

      IF GetLicenseFullyUsedDays < GetTrialNotificationDaysSinceStart THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE IsTrialSuspendedNotificationEnabled@65() : Boolean;
    VAR
      ClientTypeManagement@1001 : Codeunit 4030;
      TenantLicenseState@1002 : Codeunit 2300;
    BEGIN
      IF NOT TenantLicenseState.IsTrialSuspendedMode THEN
        EXIT(FALSE);

      IF TenantLicenseState.IsTrialExtendedSuspendedMode THEN
        EXIT(FALSE);

      IF NOT AreNotificationsSupported THEN
        EXIT(FALSE);

      IF ClientTypeManagement.GetCurrentClientType IN [CLIENTTYPE::Tablet,CLIENTTYPE::Phone] THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE IsTrialExtendedNotificationEnabled@54() : Boolean;
    VAR
      ClientTypeManagement@1001 : Codeunit 4030;
      TenantLicenseState@1000 : Codeunit 2300;
    BEGIN
      IF NOT TenantLicenseState.IsTrialExtendedMode THEN
        EXIT(FALSE);

      IF NOT AreNotificationsSupported THEN
        EXIT(FALSE);

      IF ClientTypeManagement.GetCurrentClientType IN [CLIENTTYPE::Tablet,CLIENTTYPE::Phone] THEN
        EXIT(FALSE);

      IF GetLicenseFullyUsedDays < GetTrialNotificationDaysSinceStart THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE IsTrialExtendedSuspendedNotificationEnabled@47() : Boolean;
    VAR
      TenantLicenseState@1000 : Codeunit 2300;
      ClientTypeManagement@1001 : Codeunit 4030;
    BEGIN
      IF NOT TenantLicenseState.IsTrialExtendedSuspendedMode THEN
        EXIT(FALSE);

      IF NOT AreNotificationsSupported THEN
        EXIT(FALSE);

      IF ClientTypeManagement.GetCurrentClientType IN [CLIENTTYPE::Tablet,CLIENTTYPE::Phone] THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE IsPaidWarningNotificationEnabled@35() : Boolean;
    VAR
      RoleCenterNotifications@1000 : Record 1430;
      TenantLicenseState@1001 : Codeunit 2300;
    BEGIN
      IF NOT TenantLicenseState.IsPaidWarningMode THEN
        EXIT(FALSE);

      IF NOT AreNotificationsSupported THEN
        EXIT(FALSE);

      IF RoleCenterNotifications.IsFirstLogon THEN
        EXIT(FALSE);

      EXIT(IsBuyNotificationEnabled);
    END;

    LOCAL PROCEDURE IsPaidSuspendedNotificationEnabled@33() : Boolean;
    VAR
      RoleCenterNotifications@1000 : Record 1430;
      TenantLicenseState@1001 : Codeunit 2300;
    BEGIN
      IF NOT TenantLicenseState.IsPaidSuspendedMode THEN
        EXIT(FALSE);

      IF NOT AreNotificationsSupported THEN
        EXIT(FALSE);

      IF RoleCenterNotifications.IsFirstLogon THEN
        EXIT(FALSE);

      EXIT(IsBuyNotificationEnabled);
    END;

    [External]
    PROCEDURE ShowNotifications@34() : Boolean;
    VAR
      DataMigrationMgt@1006 : Codeunit 1798;
      DataClassificationMgt@1007 : Codeunit 1750;
      ResultEvaluation@1001 : Boolean;
      ResultTrial@1000 : Boolean;
      ResultTrialSuspended@1003 : Boolean;
      ResultTrialExtended@1008 : Boolean;
      ResultTrialExtendedSuspended@1009 : Boolean;
      ResultPaidWarning@1005 : Boolean;
      ResultPaidSuspended@1004 : Boolean;
      ResultSandbox@1002 : Boolean;
    BEGIN
      OnBeforeShowNotifications;

      ResultEvaluation := ShowEvaluationNotification;
      ResultTrial := ShowTrialNotification;
      ResultTrialSuspended := ShowTrialSuspendedNotification;
      ResultTrialExtended := ShowTrialExtendedNotification;
      ResultTrialExtendedSuspended := ShowTrialExtendedSuspendedNotification;
      ResultPaidWarning := ShowPaidWarningNotification;
      ResultPaidSuspended := ShowPaidSuspendedNotification;
      ResultSandbox := ShowSandboxNotification;

      DataMigrationMgt.ShowDataMigrationRelatedGlobalNotifications;
      DataClassificationMgt.ShowNotifications;

      COMMIT;
      EXIT(
        ResultEvaluation OR
        ResultTrial OR ResultTrialSuspended OR
        ResultTrialExtended OR ResultTrialExtendedSuspended OR
        ResultPaidWarning OR ResultPaidSuspended OR
        ResultSandbox);
    END;

    [External]
    PROCEDURE ShowEvaluationNotification@7() : Boolean;
    VAR
      Company@1000 : Record 2000000006;
    BEGIN
      IF NOT IsEvaluationNotificationEnabled THEN
        EXIT(FALSE);

      // Verify, that the user has company setup rights
      IF NOT Company.WRITEPERMISSION THEN
        EXIT(FALSE);

      CreateAndSendEvaluationNotification;
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE ShowTrialNotification@18() : Boolean;
    BEGIN
      IF NOT IsTrialNotificationEnabled THEN
        EXIT(FALSE);

      CreateAndSendTrialNotification;
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE ShowTrialSuspendedNotification@67() : Boolean;
    BEGIN
      IF NOT IsTrialSuspendedNotificationEnabled THEN
        EXIT(FALSE);

      CreateAndSendTrialSuspendedNotification;
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE ShowTrialExtendedNotification@53() : Boolean;
    BEGIN
      IF NOT IsTrialExtendedNotificationEnabled THEN
        EXIT(FALSE);

      CreateAndSendTrialExtendedNotification;
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE ShowTrialExtendedSuspendedNotification@51() : Boolean;
    BEGIN
      IF NOT IsTrialExtendedSuspendedNotificationEnabled THEN
        EXIT(FALSE);

      CreateAndSendTrialExtendedSuspendedNotification;
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE ShowPaidWarningNotification@40() : Boolean;
    BEGIN
      IF NOT IsPaidWarningNotificationEnabled THEN
        EXIT(FALSE);

      CreateAndSendPaidWarningNotification;
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE ShowPaidSuspendedNotification@39() : Boolean;
    BEGIN
      IF NOT IsPaidSuspendedNotificationEnabled THEN
        EXIT(FALSE);

      CreateAndSendPaidSuspendedNotification;
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE ShowSandboxNotification@16() : Boolean;
    VAR
      MyNotifications@1000 : Record 1518;
    BEGIN
      IF NOT AreSandboxNotificationsSupported THEN
        EXIT(FALSE);

      IF NOT MyNotifications.IsEnabled(GetSandboxNotificationId) THEN
        EXIT(FALSE);

      CreateAndSendSandboxNotification;
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE ShowChangeToPremiumExpNotification@56() : Boolean;
    VAR
      MyNotifications@1000 : Record 1518;
      ApplicationAreaMgmtFacade@1002 : Codeunit 9179;
      PermissionManager@1001 : Codeunit 9002;
    BEGIN
      IF ApplicationAreaMgmtFacade.IsPremiumExperienceEnabled OR NOT PermissionManager.SoftwareAsAService THEN
        EXIT(FALSE);

      IF NOT MyNotifications.IsEnabled(GetChangeToPremiumExpNotificationId) THEN
        EXIT(FALSE);

      CreateAndSendChangeToPremiumExpNotification;
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE EvaluationNotificationAction@4(EvaluationNotification@1000 : Notification);
    BEGIN
      StartTrial;
    END;

    [External]
    PROCEDURE TrialNotificationAction@2(TrialNotification@1001 : Notification);
    BEGIN
      BuySubscription;
    END;

    [External]
    PROCEDURE TrialNotificationExtendAction@6(TrialNotification@1000 : Notification);
    BEGIN
      ExtendTrial;
    END;

    [External]
    PROCEDURE TrialSuspendedNotificationAction@38(TrialSuspendedNotification@1001 : Notification);
    BEGIN
      BuySubscription;
    END;

    [External]
    PROCEDURE TrialSuspendedNotificationExtendAction@57(TrialSuspendedNotification@1000 : Notification);
    BEGIN
      ExtendTrial;
    END;

    [External]
    PROCEDURE TrialSuspendedNotificationPartnerAction@5(TrialSuspendedNotification@1000 : Notification);
    BEGIN
      ContactAPartner;
    END;

    [External]
    PROCEDURE TrialExtendedNotificationSubscribeAction@86(TrialExtendedNotification@1000 : Notification);
    BEGIN
      BuySubscription;
    END;

    [External]
    PROCEDURE TrialExtendedNotificationPartnerAction@88(TrialExtendedNotification@1001 : Notification);
    BEGIN
      ContactAPartner;
    END;

    [External]
    PROCEDURE PaidWarningNotificationAction@45(PaidWarningNotification@1001 : Notification);
    BEGIN
      BuySubscription;
    END;

    [External]
    PROCEDURE PaidSuspendedNotificationAction@42(PaidSuspendedNotification@1001 : Notification);
    BEGIN
      BuySubscription;
    END;

    [External]
    PROCEDURE GetLicenseRemainingDays@11() : Integer;
    VAR
      DotNet_DateTimeOffset@1002 : Codeunit 3006;
      TenantLicenseState@1007 : Codeunit 2300;
      Now@1001 : DateTime;
      EndDate@1006 : DateTime;
      TimeDuration@1003 : Decimal;
      MillisecondsPerDay@1005 : BigInteger;
      RemainingDays@1004 : Integer;
    BEGIN
      Now := DotNet_DateTimeOffset.ConvertToUtcDateTime(CURRENTDATETIME);
      TenantLicenseState.GetEndDate(EndDate);
      IF EndDate > Now THEN BEGIN
        TimeDuration := EndDate - Now;
        MillisecondsPerDay := 86400000;
        RemainingDays := ROUND(TimeDuration / MillisecondsPerDay,1,'=');
        EXIT(RemainingDays);
      END;
      EXIT(0);
    END;

    LOCAL PROCEDURE GetLicenseFullyUsedDays@37() : Integer;
    VAR
      TenantLicenseState@1000 : Codeunit 2300;
      DotNet_DateTimeOffset@1002 : Codeunit 3006;
      StartDate@1006 : DateTime;
      Now@1001 : DateTime;
      TimeDuration@1003 : Decimal;
      MillisecondsPerDay@1005 : BigInteger;
      FullyUsedDays@1004 : Integer;
    BEGIN
      Now := DotNet_DateTimeOffset.ConvertToUtcDateTime(CURRENTDATETIME);
      TenantLicenseState.GetStartDate(StartDate);
      IF StartDate <> 0DT THEN
        IF Now > StartDate THEN BEGIN
          TimeDuration := Now - StartDate;
          MillisecondsPerDay := 86400000;
          FullyUsedDays := ROUND(TimeDuration / MillisecondsPerDay,1,'<');
          EXIT(FullyUsedDays);
        END;
      EXIT(0);
    END;

    [External]
    PROCEDURE GetTrialTotalDays@9() : Integer;
    VAR
      TenantLicenseState@1002 : Record 2000000189;
      TenantLicenseStateMgt@1000 : Codeunit 2300;
      TrialTotalDays@1001 : Integer;
    BEGIN
      TrialTotalDays := TenantLicenseStateMgt.GetPeriod(TenantLicenseState.State::Trial);
      EXIT(TrialTotalDays);
    END;

    LOCAL PROCEDURE GetTrialNotificationDaysSinceStart@27() : Integer;
    VAR
      DaysSinceStart@1001 : Integer;
    BEGIN
      EVALUATE(DaysSinceStart,TrialNotificationDaysSinceStartTxt);
      EXIT(DaysSinceStart);
    END;

    LOCAL PROCEDURE StartTrial@43();
    VAR
      AssistedCompanySetup@1001 : Codeunit 1800;
      SessionSetting@1004 : SessionSettings;
      NewCompany@1000 : Text[30];
    BEGIN
      IF NOT GetMyCompany(NewCompany) THEN BEGIN
        MESSAGE(ChooseCompanyMsg);
        CreateAndSendEvaluationNotification;
        EXIT;
      END;

      IF NOT AssistedCompanySetup.HasCurrentUserAccessToCompany(NewCompany) THEN
        ERROR(NoAccessToCompanyErr,NewCompany);

      ClickEvaluationNotification;
      COMMIT;

      DisableEvaluationNotification;

      SessionSetting.INIT;
      SessionSetting.COMPANY(NewCompany);
      SessionSetting.REQUESTSESSIONUPDATE(TRUE)
    END;

    LOCAL PROCEDURE ExtendTrial@60();
    BEGIN
      DisableBuyNotification;
      PAGE.RUN(PAGE::"Extend Trial Wizard");
    END;

    LOCAL PROCEDURE BuySubscription@44();
    BEGIN
      DisableBuyNotification;
      PAGE.RUN(PAGE::"Buy Subscription");
    END;

    LOCAL PROCEDURE ContactAPartner@64();
    BEGIN
      DisableBuyNotification;
      HYPERLINK(ContactAPartnerURLTxt);
    END;

    LOCAL PROCEDURE ClickEvaluationNotification@1();
    VAR
      RoleCenterNotifications@1000 : Record 1430;
    BEGIN
      RoleCenterNotifications.SetEvaluationNotificationState(RoleCenterNotifications."Evaluation Notification State"::Clicked);
    END;

    [External]
    PROCEDURE DisableEvaluationNotification@29();
    VAR
      RoleCenterNotifications@1000 : Record 1430;
    BEGIN
      RoleCenterNotifications.SetEvaluationNotificationState(RoleCenterNotifications."Evaluation Notification State"::Disabled);
    END;

    [External]
    PROCEDURE EnableEvaluationNotification@80();
    VAR
      RoleCenterNotifications@1000 : Record 1430;
    BEGIN
      RoleCenterNotifications.SetEvaluationNotificationState(RoleCenterNotifications."Evaluation Notification State"::Enabled);
    END;

    [External]
    PROCEDURE IsEvaluationNotificationClicked@30() : Boolean;
    VAR
      RoleCenterNotifications@1000 : Record 1430;
    BEGIN
      EXIT(RoleCenterNotifications.GetEvaluationNotificationState = RoleCenterNotifications."Evaluation Notification State"::Clicked);
    END;

    [External]
    PROCEDURE DisableBuyNotification@20();
    VAR
      RoleCenterNotifications@1000 : Record 1430;
    BEGIN
      RoleCenterNotifications.SetBuyNotificationState(RoleCenterNotifications."Buy Notification State"::Disabled);
    END;

    [External]
    PROCEDURE EnableBuyNotification@79();
    VAR
      RoleCenterNotifications@1000 : Record 1430;
    BEGIN
      RoleCenterNotifications.SetBuyNotificationState(RoleCenterNotifications."Buy Notification State"::Enabled);
    END;

    LOCAL PROCEDURE IsBuyNotificationEnabled@17() : Boolean;
    VAR
      RoleCenterNotifications@1000 : Record 1430;
    BEGIN
      EXIT(RoleCenterNotifications.GetBuyNotificationState <> RoleCenterNotifications."Buy Notification State"::Disabled);
    END;

    [External]
    PROCEDURE DisableSandboxNotification@46(Notification@1000 : Notification);
    VAR
      MyNotifications@1001 : Record 1518;
    BEGIN
      IF NOT MyNotifications.Disable(GetSandboxNotificationId) THEN
        MyNotifications.InsertDefault(GetSandboxNotificationId,SandboxNotificationNameTok,SandboxNotificationDescTok,FALSE);
    END;

    [External]
    PROCEDURE DisableChangeToPremiumExpNotification@66(Notification@1000 : Notification);
    VAR
      MyNotifications@1001 : Record 1518;
    BEGIN
      IF NOT MyNotifications.Disable(GetChangeToPremiumExpNotificationId) THEN
        MyNotifications.InsertDefault(
          GetChangeToPremiumExpNotificationId,ChangeToPremiumExpNotificationNameTok,ChangeToPremiumExpNotificationDescTok,FALSE);
    END;

    [External]
    PROCEDURE CompanyNotSelectedMessage@14() : Text;
    BEGIN
      EXIT('');
    END;

    [External]
    PROCEDURE EvaluationNotificationMessage@61() : Text;
    BEGIN
      EXIT(EvaluationNotificationMsg);
    END;

    [External]
    PROCEDURE TrialNotificationMessage@68() : Text;
    BEGIN
      EXIT(TrialNotificationMsg);
    END;

    [External]
    PROCEDURE TrialSuspendedNotificationMessage@71() : Text;
    BEGIN
      EXIT(TrialSuspendedNotificationMsg);
    END;

    [External]
    PROCEDURE TrialExtendedNotificationMessage@78() : Text;
    BEGIN
      EXIT(TrialExtendedNotificationMsg);
    END;

    [External]
    PROCEDURE TrialExtendedSuspendedNotificationMessage@69() : Text;
    BEGIN
      EXIT(TrialExtendedSuspendedNotificationMsg);
    END;

    [External]
    PROCEDURE PaidWarningNotificationMessage@74() : Text;
    BEGIN
      EXIT(PaidWarningNotificationMsg);
    END;

    [External]
    PROCEDURE PaidSuspendedNotificationMessage@75() : Text;
    BEGIN
      EXIT(PaidSuspendedNotificationMsg);
    END;

    [External]
    PROCEDURE SandboxNotificationMessage@15() : Text;
    BEGIN
      EXIT(SandboxNotificationMsg);
    END;

    [External]
    PROCEDURE ChangeToPremiumExpNotificationMessage@49() : Text;
    BEGIN
      EXIT(ChangeToPremiumExpNotificationMsg);
    END;

    [External]
    PROCEDURE ChangeToPremiumExpURL@59(Notification@1000 : Notification);
    BEGIN
      HYPERLINK(ChangeToPremiumExpURLTxt);
    END;

    LOCAL PROCEDURE GetMyCompany@62(VAR MyCompany@1000 : Text[30]) : Boolean;
    VAR
      SelectedCompany@1002 : Record 2000000006;
      AllowedCompanies@1001 : Page 9177;
    BEGIN
      SelectedCompany.SETRANGE("Evaluation Company",FALSE);
      SelectedCompany.FINDFIRST;
      IF SelectedCompany.COUNT = 1 THEN BEGIN
        MyCompany := SelectedCompany.Name;
        EXIT(TRUE);
      END;

      AllowedCompanies.Initialize;

      IF SelectedCompany.GET(COMPANYNAME) THEN
        AllowedCompanies.SETRECORD(SelectedCompany);

      AllowedCompanies.LOOKUPMODE(TRUE);

      IF AllowedCompanies.RUNMODAL = ACTION::LookupOK THEN BEGIN
        AllowedCompanies.GETRECORD(SelectedCompany);
        IF SelectedCompany."Evaluation Company" THEN
          EXIT(FALSE);
        MyCompany := SelectedCompany.Name;
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    [EventSubscriber(Page,1518,OnInitializingNotificationWithDefaultState)]
    PROCEDURE OnInitializingNotificationWithDefaultState@23();
    VAR
      MyNotifications@1000 : Record 1518;
    BEGIN
      IF AreSandboxNotificationsSupported THEN
        MyNotifications.InsertDefault(GetSandboxNotificationId,SandboxNotificationNameTok,SandboxNotificationDescTok,TRUE);
      IF AreNotificationsSupported THEN
        MyNotifications.InsertDefault(
          GetChangeToPremiumExpNotificationId,ChangeToPremiumExpNotificationNameTok,ChangeToPremiumExpNotificationDescTok,TRUE);
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeShowNotifications@50();
    BEGIN
    END;

    BEGIN
    END.
  }
}

