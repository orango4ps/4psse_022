OBJECT Codeunit 5473 Graph Mgt - Company Info.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    [External]
    PROCEDURE ProcessComplexTypes@8(VAR CompanyInformation@1000 : Record 79;PostalAddressJSON@1002 : Text);
    BEGIN
      UpdatePostalAddress(PostalAddressJSON,CompanyInformation);
    END;

    [External]
    PROCEDURE PostalAddressToJSON@5(CompanyInformation@1000 : Record 79) JSON : Text;
    VAR
      GraphMgtComplexTypes@1001 : Codeunit 5468;
    BEGIN
      WITH CompanyInformation DO
        GraphMgtComplexTypes.GetPostalAddressJSON(Address,"Address 2",City,County,"Country/Region Code","Post Code",JSON);
    END;

    [External]
    PROCEDURE UpdateIntegrationRecords@11(IsCompanyIdFound@1000 : Boolean);
    VAR
      DummyCompanyInfo@1002 : Record 79;
      GraphMgtGeneralTools@1001 : Codeunit 5465;
      CompanyRecRef@1019 : RecordRef;
    BEGIN
      CompanyRecRef.OPEN(DATABASE::"Company Information");
      GraphMgtGeneralTools.UpdateIntegrationRecords(CompanyRecRef,DummyCompanyInfo.FIELDNO(Id),IsCompanyIdFound);
    END;

    LOCAL PROCEDURE UpdatePostalAddress@4(PostalAddressJSON@1000 : Text;VAR CompanyInformation@1001 : Record 79);
    VAR
      GraphMgtComplexTypes@1002 : Codeunit 5468;
      RecRef@1004 : RecordRef;
    BEGIN
      IF PostalAddressJSON = '' THEN
        EXIT;

      WITH CompanyInformation DO BEGIN
        RecRef.GETTABLE(CompanyInformation);
        GraphMgtComplexTypes.ApplyPostalAddressFromJSON(PostalAddressJSON,RecRef,
          FIELDNO(Address),FIELDNO("Address 2"),FIELDNO(City),FIELDNO(County),FIELDNO("Country/Region Code"),FIELDNO("Post Code"));
        RecRef.SETTABLE(CompanyInformation);
      END;
    END;

    [External]
    PROCEDURE AddEmailAddress@1(VAR JSONManagement@1004 : Codeunit 5459;Name@1000 : Text;Type@1003 : Text;Address@1001 : Text);
    VAR
      JObject@1002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      IF Address = '' THEN
        EXIT;

      JObject := JObject.JObject;
      JSONManagement.AddJPropertyToJObject(JObject,'name',Name);
      JSONManagement.AddJPropertyToJObject(JObject,'type',Type);
      JSONManagement.AddJPropertyToJObject(JObject,'address',Address);
      JSONManagement.AddJObjectToCollection(JObject);
    END;

    [External]
    PROCEDURE GetPostalAddress@39(PostalAddressesString@1005 : Text;AddressType@1011 : Text;VAR Address@1007 : Text[100];VAR Address2@1004 : Text[50];VAR City@1003 : Text[30];VAR County@1002 : Text[30];VAR CountryRegionCode@1001 : Code[10];VAR PostCode@1000 : Code[20]);
    VAR
      JSONManagement@1008 : Codeunit 5459;
      GraphCollectionMgtContact@1010 : Codeunit 5458;
      JObject@1006 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      Value@1009 : Text;
    BEGIN
      JSONManagement.InitializeCollection(PostalAddressesString);
      IF NOT JSONManagement.GetJObjectFromCollectionByPropertyValue(JObject,'type',AddressType) THEN
        EXIT;

      JSONManagement.GetStringPropertyValueFromJObjectByName(JObject,'street',Value);
      GraphCollectionMgtContact.SplitStreet(Value,Address,Address2);
      JSONManagement.GetStringPropertyValueFromJObjectByName(JObject,'city',Value);
      City := COPYSTR(Value,1,MAXSTRLEN(Value));
      JSONManagement.GetStringPropertyValueFromJObjectByName(JObject,'state',Value);
      County := COPYSTR(Value,1,MAXSTRLEN(Value));
      JSONManagement.GetStringPropertyValueFromJObjectByName(JObject,'countryOrRegion',Value);
      CountryRegionCode := GraphCollectionMgtContact.FindCountryRegionCode(Value);
      JSONManagement.GetStringPropertyValueFromJObjectByName(JObject,'postalCode',Value);
      PostCode := COPYSTR(Value,1,MAXSTRLEN(PostCode));
    END;

    [External]
    PROCEDURE GetEmailAddress@14(EmailAddressesString@1002 : Text;AddressType@1001 : Text;VAR Address@1003 : Text);
    VAR
      JSONManagement@1000 : Codeunit 5459;
      JObject@1007 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      JSONManagement.InitializeCollection(EmailAddressesString);
      IF NOT JSONManagement.GetJObjectFromCollectionByPropertyValue(JObject,'type',AddressType) THEN
        EXIT;

      JSONManagement.GetStringPropertyValueFromJObjectByName(JObject,'address',Address);
    END;

    [External]
    PROCEDURE GetPhone@73(PhonesString@1001 : Text;PhoneType@1004 : Text;VAR Number@1000 : Text);
    VAR
      JSONManagement@1002 : Codeunit 5459;
      JObject@1003 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      JSONManagement.InitializeCollection(PhonesString);
      IF NOT JSONManagement.GetJObjectFromCollectionByPropertyValue(JObject,'type',PhoneType) THEN
        EXIT;

      JSONManagement.GetStringPropertyValueFromJObjectByName(JObject,'number',Number);
    END;

    [External]
    PROCEDURE GetWebsite@10(WebsiteString@1000 : Text;VAR Website@1001 : Text);
    VAR
      JSONManagement@1002 : Codeunit 5459;
      JObject@1003 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      JSONManagement.InitializeObject(WebsiteString);
      JSONManagement.GetJSONObject(JObject);
      JSONManagement.GetStringPropertyValueFromJObjectByName(JObject,'address',Website);
    END;

    [External]
    PROCEDURE GetSocialNetworksJSON@7(VAR O365SocialNetwork@1000 : Record 2122;VAR SocialNetworks@1001 : Text);
    VAR
      JSONMgt@1002 : Codeunit 5459;
      JObject@1003 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      IF O365SocialNetwork.FINDSET THEN BEGIN
        JSONMgt.InitializeEmptyCollection;
        REPEAT
          JSONMgt.InitializeEmptyObject;
          JSONMgt.GetJSONObject(JObject);
          JSONMgt.AddJPropertyToJObject(JObject,'address',O365SocialNetwork.URL);
          JSONMgt.AddJPropertyToJObject(JObject,'displayName',O365SocialNetwork.Name);
          JSONMgt.AddJObjectToCollection(JObject);
        UNTIL O365SocialNetwork.NEXT = 0;
        SocialNetworks := JSONMgt.WriteCollectionToString;
      END;
    END;

    [External]
    PROCEDURE HasPostalAddress@2(AddressString@1000 : Text;AddressType@1003 : Text) : Boolean;
    VAR
      JSONManagement@1001 : Codeunit 5459;
      JObject@1002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      JSONManagement.InitializeCollection(AddressString);
      EXIT(JSONManagement.GetJObjectFromCollectionByPropertyValue(JObject,'type',AddressType));
    END;

    [External]
    PROCEDURE HasEmailAddress@6(EmailAddressString@1000 : Text;AddressType@1003 : Text) : Boolean;
    VAR
      JSONManagement@1002 : Codeunit 5459;
      JObject@1001 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      JSONManagement.InitializeCollection(EmailAddressString);
      EXIT(JSONManagement.GetJObjectFromCollectionByPropertyValue(JObject,'type',AddressType));
    END;

    [External]
    PROCEDURE HasPhoneNumber@3(PhoneNumberString@1000 : Text;PhoneType@1003 : Text) : Boolean;
    VAR
      JSONManagement@1002 : Codeunit 5459;
      JObject@1001 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      JSONManagement.InitializeCollection(PhoneNumberString);
      EXIT(JSONManagement.GetJObjectFromCollectionByPropertyValue(JObject,'type',PhoneType));
    END;

    [External]
    PROCEDURE UpdateEmailAddressJson@76(EmailAddressesString@1003 : Text;AddressType@1002 : Text;Address@1000 : Text) : Text;
    VAR
      JSONManagement@1004 : Codeunit 5459;
      JObject@1001 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      JSONManagement.InitializeCollection(EmailAddressesString);
      IF JSONManagement.GetJObjectFromCollectionByPropertyValue(JObject,'type',AddressType) THEN BEGIN
        JSONManagement.ReplaceOrAddJPropertyInJObject(JObject,'name','');
        JSONManagement.ReplaceOrAddJPropertyInJObject(JObject,'address',Address)
      END ELSE
        AddEmailAddress(JSONManagement,AddressType,AddressType,Address);

      EXIT(JSONManagement.WriteCollectionToString);
    END;

    [External]
    PROCEDURE UpdatePhoneJson@48(PhonesString@1001 : Text;PhoneType@1004 : Text;Number@1000 : Text) : Text;
    VAR
      JSONManagement@1003 : Codeunit 5459;
      JObject@1002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      JSONManagement.InitializeCollection(PhonesString);
      IF NOT JSONManagement.GetJObjectFromCollectionByPropertyValue(JObject,'type',PhoneType) THEN BEGIN
        IF Number = '' THEN
          EXIT;
        JObject := JObject.JObject;
        JSONManagement.AddJPropertyToJObject(JObject,'type',PhoneType);
        JSONManagement.AddJObjectToCollection(JObject);
        JSONManagement.GetJObjectFromCollectionByPropertyValue(JObject,'type',PhoneType)
      END;
      JSONManagement.ReplaceOrAddJPropertyInJObject(JObject,'number',Number);
      EXIT(JSONManagement.WriteCollectionToString);
    END;

    [External]
    PROCEDURE UpdatePostalAddressJson@61(PostalAddressesString@1000 : Text;AddressType@1010 : Text;Address@1007 : Text[100];Address2@1005 : Text[50];City@1004 : Text[30];County@1003 : Text[30];CountryRegionCode@1002 : Code[10];PostCode@1001 : Code[20]) : Text;
    VAR
      JSONManagement@1006 : Codeunit 5459;
      GraphCollectionMgtContact@1009 : Codeunit 5458;
      JObject@1008 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      JSONManagement.InitializeCollection(PostalAddressesString);
      IF (Address = '') AND (Address2 = '') AND (City = '') AND (County = '') AND (PostCode = '') THEN BEGIN
        IF JSONManagement.GetJObjectFromCollectionByPropertyValue(JObject,'type',AddressType) THEN
          JObject.Remove;
        EXIT(JSONManagement.WriteCollectionToString);
      END;

      IF NOT JSONManagement.GetJObjectFromCollectionByPropertyValue(JObject,'type',AddressType) THEN BEGIN
        JObject := JObject.JObject;
        JSONManagement.AddJPropertyToJObject(JObject,'type',AddressType);
        JSONManagement.AddJObjectToCollection(JObject);
        JSONManagement.GetJObjectFromCollectionByPropertyValue(JObject,'type',AddressType);
      END;
      JSONManagement.ReplaceOrAddJPropertyInJObject(JObject,'street',GraphCollectionMgtContact.ConcatenateStreet(Address,Address2));
      JSONManagement.ReplaceOrAddJPropertyInJObject(JObject,'city',City);
      JSONManagement.ReplaceOrAddJPropertyInJObject(JObject,'state',County);
      JSONManagement.ReplaceOrAddJPropertyInJObject(JObject,'countryOrRegion',CountryRegionCode);
      JSONManagement.ReplaceOrAddJPropertyInJObject(JObject,'postalCode',PostCode);
      EXIT(JSONManagement.WriteCollectionToString);
    END;

    [External]
    PROCEDURE UpdateSocialNetworks@9(SocialLinksString@1000 : Text);
    VAR
      O365SocialNetwork@1001 : Record 2122;
      TempO365SocialNetwork@1008 : TEMPORARY Record 2122;
      JSONMgt@1002 : Codeunit 5459;
      JArray@1003 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      JObject@1004 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      FieldVariant@1007 : Variant;
      Address@1005 : Text;
      DisplayName@1006 : Text;
    BEGIN
      IF SocialLinksString <> '' THEN BEGIN
        JSONMgt.InitializeCollection(SocialLinksString);
        JSONMgt.GetJsonArray(JArray);
        FOREACH JObject IN JArray DO BEGIN
          JSONMgt.GetPropertyValueFromJObjectByName(JObject,'displayName',FieldVariant);
          DisplayName := FORMAT(FieldVariant);
          IF DisplayName <> '' THEN BEGIN
            JSONMgt.GetPropertyValueFromJObjectByName(JObject,'address',FieldVariant);
            Address := FORMAT(FieldVariant);
            O365SocialNetwork.FILTERGROUP(-1);
            O365SocialNetwork.SETRANGE(Code,DisplayName);
            O365SocialNetwork.SETRANGE(Name,DisplayName);
            IF O365SocialNetwork.FINDFIRST THEN BEGIN
              O365SocialNetwork.VALIDATE(URL,COPYSTR(Address,1,MAXSTRLEN(O365SocialNetwork.URL)));
              O365SocialNetwork.MODIFY(TRUE);
            END ELSE BEGIN
              O365SocialNetwork.INIT;
              O365SocialNetwork.Code := COPYSTR(DisplayName,1,MAXSTRLEN(O365SocialNetwork.Code));
              O365SocialNetwork.Name := COPYSTR(DisplayName,1,MAXSTRLEN(O365SocialNetwork.Name));
              O365SocialNetwork.VALIDATE(URL,COPYSTR(Address,1,MAXSTRLEN(O365SocialNetwork.URL)));
              O365SocialNetwork.INSERT(TRUE);
            END;
            IF NOT TempO365SocialNetwork.GET(DisplayName) THEN BEGIN
              TempO365SocialNetwork.INIT;
              TempO365SocialNetwork.Code := COPYSTR(DisplayName,1,MAXSTRLEN(TempO365SocialNetwork.Code));
              TempO365SocialNetwork.INSERT;
            END;
          END;
        END;
      END;
      O365SocialNetwork.RESET;
      IF O365SocialNetwork.FINDSET THEN
        REPEAT
          IF NOT TempO365SocialNetwork.GET(O365SocialNetwork.Code) THEN
            IF O365SocialNetwork."Media Resources Ref" <> '' THEN BEGIN
              O365SocialNetwork.VALIDATE(URL,'');
              O365SocialNetwork.MODIFY(TRUE);
            END ELSE
              O365SocialNetwork.DELETE(TRUE);
        UNTIL O365SocialNetwork.NEXT = 0;
    END;

    [External]
    PROCEDURE UpdateWorkWebsiteJson@80(WebsitesString@1001 : Text;WebsiteType@1005 : Text;Address@1000 : Text[80]) : Text;
    VAR
      JSONManagement@1004 : Codeunit 5459;
      JObject@1003 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      Type@1002 : Variant;
    BEGIN
      JSONManagement.InitializeObject(WebsitesString);
      JSONManagement.GetJSONObject(JObject);
      JSONManagement.ReplaceOrAddJPropertyInJObject(JObject,'address',Address);
      IF NOT JSONManagement.GetPropertyValueFromJObjectByName(JObject,'type',Type) THEN
        JSONManagement.ReplaceOrAddJPropertyInJObject(JObject,'type',WebsiteType);
      EXIT(JSONManagement.WriteObjectToString);
    END;

    [EventSubscriber(Codeunit,5465,ApiSetup)]
    LOCAL PROCEDURE HandleApiSetup@16();
    BEGIN
      UpdateIntegrationRecords(FALSE);
    END;

    BEGIN
    END.
  }
}

