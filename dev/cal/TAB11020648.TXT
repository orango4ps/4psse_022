OBJECT Table 11020648 Assembly Feature Type
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               FillModificationData;
               CheckEntityNo;
             END;

    OnModify=BEGIN
               FillModificationData;
               CheckEntityNo;
             END;

    OnDelete=VAR
               AssemblyFeatureGroup@1100528400 : Record 11020646;
               AssemblyFeatureType@1100528401 : Record 11020648;
             BEGIN
               IF "Feature Group Code" <> '' THEN
                 IF AssemblyFeatureGroup.GET("Feature Group Code") THEN BEGIN
                   AssemblyFeatureType.SETRANGE("Project No.", "Project No.");
                   AssemblyFeatureType.SETRANGE("Yard No.", "Yard No.");
                   AssemblyFeatureType.SETRANGE("Entity Type", "Entity Type");
                   AssemblyFeatureType.SETRANGE("System No.", "System No.");
                   AssemblyFeatureType.SETRANGE("Entity No.", "Entity No.");
                   AssemblyFeatureType.SETRANGE("Feature Group Code", "Feature Group Code");
                   AssemblyFeatureType.SETFILTER("Line No.", '<>%1', "Line No.");
                   IF NOT AssemblyFeatureType.FINDFIRST THEN
                     CASE "Entity Type" OF
                       "Entity Type"::Cable: AssemblyFeatureGroup.TESTFIELD("Obligatory for Cables", FALSE);
                       "Entity Type"::Device: AssemblyFeatureGroup.TESTFIELD("Obligatory for Devices", FALSE);
                       "Entity Type"::"Extra Need": AssemblyFeatureGroup.TESTFIELD("Obligatory for Extra Needs", FALSE);
                       "Entity Type"::Position: AssemblyFeatureGroup.TESTFIELD("Obligatory for Positions", FALSE);
                     END;
                 END;
             END;

    OnRename=BEGIN
               ERROR(Text999);
             END;

    CaptionML=[ENU=Assembly Feature Type;
               NOR=Monteringsfunksjonstype;
               SVE=Monteringsfunktionstyp];
    LookupPageID=Page11124973;
    DrillDownPageID=Page11124973;
  }
  FIELDS
  {
    { 10  ;   ;Project No.         ;Code20        ;TableRelation=Job;
                                                   CaptionML=[ENU=Project No.;
                                                              NOR=Prosjektnr;
                                                              SVE=Projektnr];
                                                   NotBlank=Yes }
    { 20  ;   ;Yard No.            ;Code20        ;CaptionML=[ENU=Yard No.;
                                                              NOR=Plassnr;
                                                              SVE=Platsnr] }
    { 30  ;   ;Entity Type         ;Option        ;CaptionML=[ENU=Entity Type;
                                                              NOR=Enhetstype;
                                                              SVE=Enhetstyp];
                                                   OptionCaptionML=[ENU=None,Cable,Device,Extra Need,,,,,,Position;
                                                                    SVE=Ingen,Kabel,Anordning,Extra behov,,,,,,Position];
                                                   OptionString=None,Cable,Device,Extra Need,,,,,,Position }
    { 40  ;   ;System No.          ;Code20        ;CaptionML=[ENU=System No.;
                                                              NOR=Systemnr;
                                                              SVE=Systemnr] }
    { 50  ;   ;Entity No.          ;Code20        ;CaptionML=[ENU=Entity No.;
                                                              NOR=Enhetsnr;
                                                              SVE=Enhetsnr] }
    { 60  ;   ;Feature Group Code  ;Code10        ;TableRelation="Assembly Feature Group";
                                                   OnValidate=VAR
                                                                AssemblyFeature@1100528400 : Record 11020647;
                                                              BEGIN
                                                                IF ("Feature Group Code" <> xRec."Feature Group Code") THEN BEGIN
                                                                  IF NOT AssemblyFeature.GET("Feature Group Code", "Feature Code") THEN
                                                                    "Feature Code" := '';
                                                                  CheckFeatureOnOtherLine;
                                                                END;
                                                                CALCFIELDS("Feature Group Description");
                                                              END;

                                                   CaptionML=[ENU=Feature Group Code;
                                                              NOR=Funksjonsgruppekode;
                                                              SVE=Funktionsgruppskod] }
    { 65  ;   ;Feature Group Description;Text50   ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Assembly Feature Group".Description WHERE (Code=FIELD(Feature Group Code)));
                                                   CaptionML=[ENU=Feature Group Description;
                                                              NOR=Beskrivelse av funksjonsgruppe;
                                                              SVE=Beskrivning av funktionsgrupp];
                                                   Editable=No }
    { 70  ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              NOR=Linjenr.;
                                                              SVE=Radnr] }
    { 80  ;   ;Feature Code        ;Code10        ;TableRelation="Assembly Feature".Code WHERE (Feature Group Code=FIELD(Feature Group Code));
                                                   OnValidate=BEGIN
                                                                IF ("Feature Code" <> xRec."Feature Code") THEN BEGIN
                                                                  CheckFeatureOnOtherLine;
                                                                END;
                                                                CALCFIELDS("Feature Description");
                                                              END;

                                                   CaptionML=[ENU=Feature Code;
                                                              NOR=Funksjonskode;
                                                              SVE=Funktionskod] }
    { 90  ;   ;Feature Description ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Assembly Feature".Description WHERE (Feature Group Code=FIELD(Feature Group Code),
                                                                                                            Code=FIELD(Feature Code)));
                                                   CaptionML=[ENU=Feature Description;
                                                              NOR=Funksjonsbeskrivelse;
                                                              SVE=Funktionsbeskrivning];
                                                   Editable=No }
    { 100 ;   ;Value               ;Decimal       ;CaptionML=[ENU=Value;
                                                              NOR=Verdi;
                                                              SVE=V„rde] }
    { 110 ;   ;Remarks             ;Text50        ;CaptionML=[ENU=Remarks;
                                                              NOR=Merknader;
                                                              SVE=Anm„rkningar] }
    { 120 ;   ;Modified by         ;Code50        ;TableRelation=User."User Name";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Modified By;
                                                              NOR=Modified By;
                                                              SVE=Modified By] }
    { 130 ;   ;Last Date-Time Modified;DateTime   ;CaptionML=[ENU=Last Date-Time Modified;
                                                              NOR=Dato/klokkeslett for siste endring;
                                                              SVE=Žndrades senast (datum/tid)] }
  }
  KEYS
  {
    {    ;Project No.,Yard No.,Entity Type,System No.,Entity No.,Line No.;
                                                   Clustered=Yes }
    {    ;Feature Group Code,Feature Code          }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1100528400 : TextConst 'ENU=Attention, ''%1-%2'' is already present.;NOR=Obs! ''%1-%2'' finnes allerede.;SVE=Obs! ''%1-%2'' finns redan.';
      Text001@1100528300 : TextConst 'ENU=Not all of the obligatory Features are filled.;NOR=Alle obligatoriske funksjoner er ikke fylt ut.;SVE=Alla obligatoriska funktioner har inte fyllts i.';
      Text002@1100528301 : TextConst 'ENU=Not all of the obligatory Values are filled.;NOR=Alle obligatoriske verdier er ikke fylt ut.;SVE=Alla obligatoriska v„rden har inte fyllts i.';
      Text999@1100528401 : TextConst 'ENU=Rename is not allowed.;NOR=Gi nytt navn ikke tillatt;SVE=Att ge nytt namn „r inte till†tet.';

    LOCAL PROCEDURE FillModificationData@1100485006();
    BEGIN
      "Modified by" := USERID;
      "Last Date-Time Modified" := CURRENTDATETIME;
    END;

    PROCEDURE CheckFeatureOnOtherLine@1100485005();
    VAR
      AssemblyFeatureType@1100485000 : Record 11020648;
    BEGIN
      IF ("Feature Group Code" = '') OR ("Feature Code" = '') THEN
        EXIT;

      AssemblyFeatureType.SETRANGE("Project No.", "Project No.");
      AssemblyFeatureType.SETRANGE("Yard No.", "Yard No.");
      AssemblyFeatureType.SETRANGE("Entity Type", "Entity Type");
      AssemblyFeatureType.SETRANGE("System No.", "System No.");
      AssemblyFeatureType.SETRANGE("Entity No.", "Entity No.");
      AssemblyFeatureType.SETFILTER("Line No.", '<>%1', "Line No.");
      AssemblyFeatureType.SETRANGE("Feature Group Code", "Feature Group Code");
      AssemblyFeatureType.SETRANGE("Feature Code", "Feature Code");
      IF AssemblyFeatureType.FINDFIRST THEN
        MESSAGE(Text000, "Feature Group Code", "Feature Code");
    END;

    PROCEDURE CreateFeatureTypes@1210190000();
    VAR
      AssemblyFeatureType@1100485000 : Record 11020648;
      AssemblyFeatureGroup@1210190000 : Record 11020646;
      LineNo@1210190001 : Integer;
    BEGIN
      TESTFIELD("Project No.");
      AssemblyFeatureType.COPY(Rec);
      WITH AssemblyFeatureType DO BEGIN
        CASE "Entity Type" OF
          "Entity Type"::Cable: AssemblyFeatureGroup.SETRANGE(Cables, TRUE);
          "Entity Type"::Device: AssemblyFeatureGroup.SETRANGE(Devices, TRUE);
          "Entity Type"::"Extra Need": AssemblyFeatureGroup.SETRANGE("Extra Needs", TRUE);
          "Entity Type"::Position: AssemblyFeatureGroup.SETRANGE(Positions, TRUE);
        END;

        IF FIND('-') THEN BEGIN
          //IF lines already exist then only add obligatory feature groups
          CASE "Entity Type" OF
            "Entity Type"::Cable: AssemblyFeatureGroup.SETRANGE("Obligatory for Cables", TRUE);
            "Entity Type"::Device: AssemblyFeatureGroup.SETRANGE("Obligatory for Devices", TRUE);
            "Entity Type"::"Extra Need": AssemblyFeatureGroup.SETRANGE("Obligatory for Extra Needs", TRUE);
            "Entity Type"::Position: AssemblyFeatureGroup.SETRANGE("Obligatory for Positions", TRUE);
          END;
          FIND('+');
          LineNo := "Line No." + 10000;
        END ELSE BEGIN
          LineNo := 10000;
        END;

        IF AssemblyFeatureGroup.FIND('-') THEN BEGIN
          REPEAT
            SETRANGE("Feature Group Code", AssemblyFeatureGroup.Code);
            IF NOT FIND('-') THEN BEGIN
              INIT;
              "Line No.":= LineNo;
              LineNo := LineNo + 10000;
              "Feature Group Code" := AssemblyFeatureGroup.Code;
              INSERT(TRUE);
            END;
          UNTIL AssemblyFeatureGroup.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE CheckMandatoryValues@1100528300(AssemblyYardNumberObject@1100528300 : Record 11020596);
    VAR
      AssemblyFeatureType@1100528301 : Record 11020648;
      AssemblyFeatureGroup@1100528302 : Record 11020646;
      AssemblyFeature@1100528303 : Record 11020647;
      ErrorFound@1100528304 : Boolean;
    BEGIN
      CASE AssemblyYardNumberObject."Entity Type" OF
        AssemblyYardNumberObject."Entity Type"::Device:
          AssemblyFeatureGroup.SETRANGE(Devices, TRUE);
        AssemblyYardNumberObject."Entity Type"::Cable:
          AssemblyFeatureGroup.SETRANGE(Cables, TRUE);
        AssemblyYardNumberObject."Entity Type"::ExtraNeed:
          AssemblyFeatureGroup.SETRANGE("Extra Needs", TRUE);
        AssemblyYardNumberObject."Entity Type"::Position:
          AssemblyFeatureGroup.SETRANGE(Positions, TRUE);
        ELSE
          EXIT;
      END;

      IF (NOT AssemblyFeatureGroup.FINDSET) THEN
        EXIT;

      REPEAT
        AssemblyFeature.SETRANGE("Feature Group Code", AssemblyFeatureGroup.Code);
        IF (AssemblyFeature.FINDSET) THEN BEGIN
          REPEAT
            ErrorFound := FALSE;
            AssemblyFeatureType.SETRANGE("Project No.", AssemblyYardNumberObject."Project No.");
            AssemblyFeatureType.SETRANGE("Yard No.", AssemblyYardNumberObject."Yard No.");
            AssemblyFeatureType.SETRANGE("Entity Type", AssemblyYardNumberObject."Entity Type");
            AssemblyFeatureType.SETRANGE("System No.", AssemblyYardNumberObject."System No.");
            AssemblyFeatureType.SETRANGE("Entity No.", AssemblyYardNumberObject."Entity No.");
            AssemblyFeatureType.SETRANGE("Feature Group Code", AssemblyFeature."Feature Group Code");
            AssemblyFeatureType.SETFILTER("Feature Code", '%1', '');
            IF (AssemblyFeatureType.FINDFIRST) THEN BEGIN
              CASE AssemblyYardNumberObject."Entity Type" OF
                AssemblyYardNumberObject."Entity Type"::Device: BEGIN
                  IF (AssemblyFeatureGroup."Obligatory for Devices") THEN
                    ErrorFound := TRUE;
                END;
                AssemblyYardNumberObject."Entity Type"::Cable: BEGIN
                  IF (AssemblyFeatureGroup."Obligatory for Cables") THEN
                    ErrorFound := TRUE;
                END;
                AssemblyYardNumberObject."Entity Type"::ExtraNeed: BEGIN
                  IF (AssemblyFeatureGroup."Obligatory for Extra Needs") THEN
                    ErrorFound := TRUE;
                END;
                AssemblyYardNumberObject."Entity Type"::Position: BEGIN
                  IF (AssemblyFeatureGroup."Obligatory for Positions") THEN
                    ErrorFound := TRUE;
                END;
              END;
              IF (ErrorFound) THEN BEGIN
                MESSAGE(Text001);
                EXIT;
              END;
            END;

            AssemblyFeatureType.SETRANGE("Feature Code", AssemblyFeature.Code);
            IF (AssemblyFeatureType.FINDFIRST) THEN BEGIN
              IF (AssemblyFeatureType.Value = 0) THEN BEGIN
                CASE AssemblyYardNumberObject."Entity Type" OF
                  AssemblyYardNumberObject."Entity Type"::Device: BEGIN
                    IF (AssemblyFeatureGroup."Value Obligatory for Devices") THEN
                      ErrorFound := TRUE;
                  END;
                  AssemblyYardNumberObject."Entity Type"::Cable: BEGIN
                    IF (AssemblyFeatureGroup."Value Obligatory for Cables") THEN
                      ErrorFound := TRUE;
                  END;
                  AssemblyYardNumberObject."Entity Type"::ExtraNeed: BEGIN
                    IF (AssemblyFeatureGroup."Value Oblig. for Extra Needs") THEN
                      ErrorFound := TRUE;
                  END;
                  AssemblyYardNumberObject."Entity Type"::Position: BEGIN
                    IF (AssemblyFeatureGroup."Value Obligatory for Positions") THEN
                      ErrorFound := TRUE;
                  END;
                END;
                IF (ErrorFound) THEN BEGIN
                  MESSAGE(Text002);
                  EXIT;
                END;
              END;
            END;
          UNTIL (AssemblyFeature.NEXT = 0);
        END;
      UNTIL (AssemblyFeatureGroup.NEXT = 0);
    END;

    LOCAL PROCEDURE CheckEntityNo@1100528401();
    VAR
      JobsSetup@1100528400 : Record 315;
    BEGIN
      IF "Entity Type" = "Entity Type"::None THEN
        EXIT;

      IF JobsSetup.GET AND
         JobsSetup."Entity No. Mandatory"
      THEN
        TESTFIELD("Entity No.");
    END;

    BEGIN
    END.
  }
}

