OBJECT Page 2801 Native - Customer Entity
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW113.00;
  }
  PROPERTIES
  {
    CaptionML=[@@@={Locked};
               ENU=invoicingCustomers;
               NOR=invoicingCustomers;
               SVE=invoicingCustomers];
    SourceTable=Table18;
    DelayedInsert=Yes;
    PageType=List;
    OnOpenPage=VAR
                 EmptyIDPaymentTerms@1001 : Record 3;
                 EmptyIDPaymentMethod@1003 : Record 289;
                 GraphMgtGeneralTools@1000 : Codeunit 5465;
                 EmptyGuid@1002 : GUID;
               BEGIN
                 EmptyIDPaymentTerms.SETRANGE(Id,EmptyGuid);
                 EmptyIDPaymentMethod.SETRANGE(Id,EmptyGuid);
                 IF EmptyIDPaymentTerms.FINDFIRST OR EmptyIDPaymentMethod.FINDFIRST THEN
                   GraphMgtGeneralTools.ApiSetup;
                 BINDSUBSCRIPTION(NativeAPILanguageHandler);
                 TranslateContactIdFilterToCustomerNoFilter;
                 SELECTLATESTVERSION;
               END;

    OnAfterGetRecord=BEGIN
                       SetCalculatedFields;
                     END;

    OnNewRecord=BEGIN
                  ClearCalculatedFields;
                END;

    OnInsertRecord=VAR
                     Customer@1002 : Record 18;
                     GraphMgtGeneralTools@1004 : Codeunit 5465;
                     RecRef@1005 : RecordRef;
                   BEGIN
                     IF Name = '' THEN
                       ERROR(NotProvidedCustomerNameErr);

                     IF NOT CustomerCreatedFromGraph THEN BEGIN
                       Customer.SETRANGE("No.","No.");
                       IF NOT Customer.ISEMPTY THEN
                         INSERT;

                       INSERT(TRUE);
                     END;

                     ProcessPostalAddress;
                     RecRef.GETTABLE(Rec);
                     GraphMgtGeneralTools.ProcessNewRecordFromAPI(RecRef,TempFieldSet,CURRENTDATETIME);
                     RecRef.SETTABLE(Rec);

                     UpdatePricesIncludingTax;

                     MODIFY(TRUE);

                     SetCalculatedFields;
                     EXIT(FALSE);
                   END;

    OnModifyRecord=VAR
                     Customer@1001 : Record 18;
                     GraphMgtGeneralTools@1000 : Codeunit 5465;
                   BEGIN
                     IF NOT CustomerCreatedFromGraph AND (xRec.Id <> Id) THEN
                       GraphMgtGeneralTools.ErrorIdImmutable;

                     Customer.SETRANGE(Id,Id);
                     Customer.FINDFIRST;
                     ProcessPostalAddress;

                     UpdatePricesIncludingTax;

                     IF "No." = Customer."No." THEN
                       MODIFY(TRUE)
                     ELSE BEGIN
                       Customer.TRANSFERFIELDS(Rec,FALSE);
                       Customer.RENAME("No.");
                       TRANSFERFIELDS(Customer);
                     END;

                     SetCalculatedFields;
                   END;

    OnDeleteRecord=VAR
                     O365SalesManagement@1000 : Codeunit 2107;
                   BEGIN
                     O365SalesManagement.BlockOrDeleteCustomerAndDeleteContact(Rec);
                     EXIT(FALSE);
                   END;

    ODataKeyFields=Id;
  }
  CONTROLS
  {
    { 23  ;0   ;Container ;
                ContainerType=ContentArea }

    { 22  ;1   ;Group     ;
                Name=Group;
                GroupType=Repeater }

    { 21  ;2   ;Field     ;
                Name=id;
                CaptionML=[@@@={Locked};
                           ENU=Id;
                           NOR=Id;
                           SVE=Id];
                ApplicationArea=#All;
                SourceExpr=Id }

    { 20  ;2   ;Field     ;
                Name=number;
                CaptionML=[@@@={Locked};
                           ENU=Number;
                           NOR=Number;
                           SVE=Number];
                ApplicationArea=#All;
                SourceExpr="No." }

    { 10  ;2   ;Field     ;
                Name=graphContactId;
                CaptionML=[ENU=graphContactId;
                           NOR=graphContactId;
                           SVE=graphContactId];
                ApplicationArea=#All;
                SourceExpr="Contact Graph Id";
                OnValidate=BEGIN
                             FindOrCreateCustomer("Contact Graph Id");
                           END;
                            }

    { 27  ;2   ;Field     ;
                Name=contactId;
                CaptionML=[@@@={Locked};
                           ENU=contactId;
                           NOR=contactId;
                           SVE=contactId];
                ToolTipML=[ENU=Specifies the contact Id from exchange.;
                           NOR=Angir kontakt-ID fra Exchange.;
                           SVE=Anger kontakt-ID fr†n Exchange.];
                ApplicationArea=#All;
                SourceExpr="Contact ID";
                Editable=FALSE;
                OnValidate=BEGIN
                             FindOrCreateCustomer("Contact ID");
                           END;
                            }

    { 19  ;2   ;Field     ;
                Name=displayName;
                CaptionML=[@@@={Locked};
                           ENU=DisplayName;
                           NOR=DisplayName;
                           SVE=DisplayName];
                ApplicationArea=#All;
                SourceExpr=Name;
                OnValidate=BEGIN
                             IF Name = '' THEN
                               ERROR(BlankCustomerNameErr);
                             RegisterFieldSet(FIELDNO(Name));
                           END;
                            }

    { 18  ;2   ;Field     ;
                Name=type;
                CaptionML=[@@@={Locked};
                           ENU=type;
                           NOR=type;
                           SVE=type];
                ApplicationArea=#All;
                SourceExpr="Contact Type";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Contact Type"));
                           END;
                            }

    { 29  ;2   ;Field     ;
                Name=isBlocked;
                CaptionML=[@@@={Locked};
                           ENU=isBlocked;
                           NOR=isBlocked;
                           SVE=isBlocked];
                ToolTipML=[ENU=Specifies if the customer is blocked.;
                           NOR=Angir omÿkunden er sperret.;
                           SVE=Anger om kunden „r sp„rrad.];
                ApplicationArea=#All;
                SourceExpr=IsCustomerBlocked;
                Editable=FALSE }

    { 17  ;2   ;Field     ;
                Name=address;
                CaptionML=[@@@={Locked};
                           ENU=address;
                           NOR=address;
                           SVE=address];
                ToolTipML=[ENU=Specifies the address for the customer.;
                           NOR=Angir kundeadressen.;
                           SVE=Anger adressen till kunden.];
                ApplicationArea=#All;
                SourceExpr=PostalAddressJSON;
                OnValidate=BEGIN
                             PostalAddressSet := TRUE;
                           END;

                ODataEDMType=POSTALADDRESS }

    { 16  ;2   ;Field     ;
                Name=phoneNumber;
                CaptionML=[@@@={Locked};
                           ENU=PhoneNumber;
                           NOR=PhoneNumber;
                           SVE=PhoneNumber];
                ApplicationArea=#All;
                SourceExpr="Phone No.";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Phone No."));
                           END;
                            }

    { 15  ;2   ;Field     ;
                Name=email;
                CaptionML=[@@@={Locked};
                           ENU=Email;
                           NOR=Email;
                           SVE=Email];
                ApplicationArea=#All;
                SourceExpr="E-Mail";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("E-Mail"));
                           END;
                            }

    { 14  ;2   ;Field     ;
                Name=website;
                CaptionML=[@@@={Locked};
                           ENU=Website;
                           NOR=Website;
                           SVE=Website];
                ApplicationArea=#All;
                SourceExpr="Home Page";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Home Page"));
                           END;
                            }

    { 28  ;2   ;Field     ;
                Name=pricesIncludeTax;
                CaptionML=[@@@={Locked};
                           ENU=pricesIncludeTax;
                           NOR=pricesIncludeTax;
                           SVE=pricesIncludeTax];
                ApplicationArea=#All;
                SourceExpr="Prices Including VAT";
                Editable=FALSE }

    { 13  ;2   ;Field     ;
                Name=taxLiable;
                CaptionML=[@@@={Locked};
                           ENU=TaxLiable;
                           NOR=TaxLiable;
                           SVE=TaxLiable];
                ApplicationArea=#All;
                SourceExpr="Tax Liable";
                OnValidate=BEGIN
                             IF IsUsingVAT THEN
                               EXIT;

                             RegisterFieldSet(FIELDNO("Tax Liable"));
                           END;
                            }

    { 12  ;2   ;Field     ;
                Name=taxAreaId;
                CaptionML=[@@@={Locked};
                           ENU=taxAreaId;
                           NOR=taxAreaId;
                           SVE=taxAreaId];
                ApplicationArea=#All;
                SourceExpr="Tax Area ID";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Tax Area ID"));
                             IF IsUsingVAT THEN
                               RegisterFieldSet(FIELDNO("VAT Bus. Posting Group"))
                             ELSE
                               RegisterFieldSet(FIELDNO("Tax Area Code"));
                           END;
                            }

    { 11  ;2   ;Field     ;
                Name=taxAreaDisplayName;
                CaptionML=[@@@={Locked};
                           ENU=taxAreaDisplayName;
                           NOR=taxAreaDisplayName;
                           SVE=taxAreaDisplayName];
                ToolTipML=[ENU=Specifies the display name of the tax area.;
                           NOR=Angir visningsnavnet for mva-omr†det.;
                           SVE=Anger skatteomr†de visningsnamn.];
                ApplicationArea=#All;
                SourceExpr=TaxAreaDisplayName;
                Editable=FALSE }

    { 26  ;2   ;Field     ;
                Name=taxRegistrationNumber;
                CaptionML=[@@@={Locked};
                           ENU=taxRegistrationNumber;
                           NOR=taxRegistrationNumber;
                           SVE=taxRegistrationNumber];
                ApplicationArea=#All;
                SourceExpr="VAT Registration No.";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("VAT Registration No."));
                           END;
                            }

    { 25  ;2   ;Field     ;
                Name=paymentTermsId;
                CaptionML=[@@@={Locked};
                           ENU=PaymentTermsId;
                           NOR=PaymentTermsId;
                           SVE=PaymentTermsId];
                ApplicationArea=#All;
                SourceExpr="Payment Terms Id";
                OnValidate=BEGIN
                             IF "Payment Terms Id" = BlankGUID THEN
                               "Payment Terms Code" := ''
                             ELSE BEGIN
                               PaymentTerms.SETRANGE(Id,"Payment Terms Id");
                               IF NOT PaymentTerms.FINDFIRST THEN
                                 ERROR(PaymentTermsIdDoesNotMatchAPaymentTermsErr);

                               "Payment Terms Code" := PaymentTerms.Code;
                             END;

                             RegisterFieldSet(FIELDNO("Payment Terms Id"));
                             RegisterFieldSet(FIELDNO("Payment Terms Code"));
                           END;
                            }

    { 9   ;2   ;Field     ;
                Name=shipmentMethodId;
                CaptionML=[@@@={Locked};
                           ENU=ShipmentMethodId;
                           NOR=ShipmentMethodId;
                           SVE=ShipmentMethodId];
                ApplicationArea=#All;
                SourceExpr="Shipment Method Id";
                OnValidate=BEGIN
                             IF "Shipment Method Id" = BlankGUID THEN
                               "Shipment Method Code" := ''
                             ELSE BEGIN
                               ShipmentMethod.SETRANGE(Id,"Shipment Method Id");
                               IF NOT ShipmentMethod.FINDFIRST THEN
                                 ERROR(ShipmentMethodIdDoesNotMatchAShipmentMethodErr);

                               "Shipment Method Code" := ShipmentMethod.Code;
                             END;

                             RegisterFieldSet(FIELDNO("Shipment Method Id"));
                             RegisterFieldSet(FIELDNO("Shipment Method Code"));
                           END;
                            }

    { 7   ;2   ;Field     ;
                Name=paymentMethodId;
                CaptionML=[@@@={Locked};
                           ENU=PaymentMethodId;
                           NOR=PaymentMethodId;
                           SVE=PaymentMethodId];
                ApplicationArea=#All;
                SourceExpr="Payment Method Id";
                OnValidate=BEGIN
                             IF "Payment Method Id" = BlankGUID THEN
                               "Payment Method Code" := ''
                             ELSE BEGIN
                               PaymentMethod.SETRANGE(Id,"Payment Method Id");
                               IF NOT PaymentMethod.FINDFIRST THEN
                                 ERROR(PaymentMethodIdDoesNotMatchAPaymentMethodErr);

                               "Payment Method Code" := PaymentMethod.Code;
                             END;

                             RegisterFieldSet(FIELDNO("Payment Method Id"));
                             RegisterFieldSet(FIELDNO("Payment Method Code"));
                           END;
                            }

    { 5   ;2   ;Field     ;
                Name=balance;
                CaptionML=[@@@={Locked};
                           ENU=Balance;
                           NOR=Balance;
                           SVE=Balance];
                ToolTipML=[ENU=Specifies the customer's balance.;
                           NOR=Angir kundens saldo.;
                           SVE=Anger kundens saldo.];
                ApplicationArea=#All;
                SourceExpr=BalanceVar;
                Editable=FALSE }

    { 2   ;2   ;Field     ;
                Name=overdueAmount;
                CaptionML=[@@@={Locked};
                           ENU=overdueAmount;
                           NOR=overdueAmount;
                           SVE=overdueAmount];
                ToolTipML=[ENU=Specifies the amount that is overdue.;
                           NOR=Angir bel›pet som er forfalt.;
                           SVE=Anger att beloppet har f”rfallit.];
                ApplicationArea=#All;
                SourceExpr=OverdueAmount;
                Editable=FALSE }

    { 3   ;2   ;Field     ;
                Name=totalSalesExcludingTax;
                CaptionML=[@@@={Locked};
                           ENU=totalSalesExcludingTax;
                           NOR=totalSalesExcludingTax;
                           SVE=totalSalesExcludingTax];
                ToolTipML=[ENU=Specifies the total sales excluding tax.;
                           NOR=Angir det totale salget eks. mva.;
                           SVE=Anger den totala f”rs„ljningen exklusive moms.];
                ApplicationArea=#All;
                SourceExpr=SalesVar;
                Editable=FALSE }

    { 1   ;2   ;Field     ;
                Name=lastModifiedDateTime;
                CaptionML=[@@@={Locked};
                           ENU=LastModifiedDateTime;
                           NOR=LastModifiedDateTime;
                           SVE=LastModifiedDateTime];
                ApplicationArea=#All;
                SourceExpr="Last Modified Date Time" }

    { 4   ;2   ;Part      ;
                Name=Coupons;
                CaptionML=[@@@={Locked};
                           ENU=Coupons;
                           NOR=Coupons;
                           SVE=Coupons];
                ApplicationArea=#All;
                SubPageLink=Customer Id=FIELD(Id);
                PagePartID=Page2815;
                PartType=Page }

  }
  CODE
  {
    VAR
      TempFieldSet@1003 : TEMPORARY Record 2000000041;
      PaymentTerms@1009 : Record 3;
      ShipmentMethod@1008 : Record 10;
      PaymentMethod@1007 : Record 289;
      NativeAPILanguageHandler@1022 : Codeunit 2850;
      PostalAddressJSON@1004 : Text;
      TaxAreaDisplayName@1026 : Text;
      OverdueAmount@1005 : Decimal;
      BalanceVar@1020 : Decimal;
      SalesVar@1021 : Decimal;
      BlankGUID@1006 : GUID;
      PaymentTermsIdDoesNotMatchAPaymentTermsErr@1017 : TextConst '@@@={Locked};ENU=The "paymentTermsId" does not match to a Payment Terms.;NOR=The "paymentTermsId" does not match to a Payment Terms.;SVE=The "paymentTermsId" does not match to a Payment Terms.';
      ShipmentMethodIdDoesNotMatchAShipmentMethodErr@1014 : TextConst '@@@={Locked};ENU=The "shipmentMethodId" does not match to a Shipment Method.;NOR=The "shipmentMethodId" does not match to a Shipment Method.;SVE=The "shipmentMethodId" does not match to a Shipment Method.';
      PaymentMethodIdDoesNotMatchAPaymentMethodErr@1011 : TextConst '@@@={Locked};ENU=The "paymentMethodId" does not match to a Payment Method.;NOR=The "paymentMethodId" does not match to a Payment Method.;SVE=The "paymentMethodId" does not match to a Payment Method.';
      CannotFindContactErr@1023 : TextConst '@@@={Locked};ENU=Cannot find the contact for the given ID.;NOR=Cannot find the contact for the given ID.;SVE=Cannot find the contact for the given ID.';
      CustomerCreatedFromGraph@1024 : Boolean;
      CannotFindCustomerErr@1025 : TextConst '@@@={Locked};ENU=Cannot find the customer for the given ID.;NOR=Cannot find the customer for the given ID.;SVE=Cannot find the customer for the given ID.';
      NotProvidedCustomerNameErr@1027 : TextConst '@@@={Locked};ENU=A "displayName" must be provided.;NOR=A "displayName" must be provided.;SVE=A "displayName" must be provided.';
      BlankCustomerNameErr@1028 : TextConst '@@@={Locked};ENU=The blank "displayName" is not allowed.;NOR=The blank "displayName" is not allowed.;SVE=The blank "displayName" is not allowed.';
      PostalAddressSet@1029 : Boolean;
      IsCustomerBlocked@1030 : Boolean;

    LOCAL PROCEDURE SetCalculatedFields@6();
    VAR
      TaxAreaBuffer@1001 : Record 5504;
      GraphMgtCustomer@1000 : Codeunit 5471;
    BEGIN
      PostalAddressJSON := GraphMgtCustomer.PostalAddressToJSON(Rec);

      OverdueAmount := CalcOverdueBalance;
      IsCustomerBlocked := IsBlocked;

      SETRANGE("Date Filter",0D,WORKDATE);
      CALCFIELDS("Sales (LCY)","Balance (LCY)");
      BalanceVar := "Balance (LCY)";
      SalesVar := "Sales (LCY)";

      SetContactId;
      TaxAreaDisplayName := TaxAreaBuffer.GetTaxAreaDisplayName("Tax Area ID");
    END;

    LOCAL PROCEDURE ClearCalculatedFields@10();
    BEGIN
      CLEAR(Id);
      CLEAR(TaxAreaDisplayName);
      CLEAR(PostalAddressJSON);
      CLEAR(OverdueAmount);
      CLEAR("Balance (LCY)");
      CLEAR("Sales (LCY)");
      CLEAR("Contact ID");
      CLEAR(PostalAddressSet);
      TempFieldSet.DELETEALL;
    END;

    LOCAL PROCEDURE RegisterFieldSet@11(FieldNo@1000 : Integer);
    BEGIN
      IF IsFieldSet(FieldNo) THEN
        EXIT;

      TempFieldSet.INIT;
      TempFieldSet.TableNo := DATABASE::Customer;
      TempFieldSet.VALIDATE("No.",FieldNo);
      TempFieldSet.INSERT(TRUE);
    END;

    LOCAL PROCEDURE IsFieldSet@7(FieldNo@1000 : Integer) : Boolean;
    BEGIN
      EXIT(TempFieldSet.GET(DATABASE::Customer,FieldNo));
    END;

    LOCAL PROCEDURE SetContactId@1() : Boolean;
    VAR
      NewContact@1003 : Record 5050;
      GraphIntegrationRecord@1004 : Record 5451;
      IntegrationRecord@1005 : Record 5151;
      GraphIntContact@1000 : Codeunit 5461;
      GraphContactId@1001 : Text[250];
    BEGIN
      IF NOT GraphIntContact.FindGraphContactIdFromCustomer(GraphContactId,Rec,NewContact) THEN
        EXIT(FALSE);

      IntegrationRecord.SETRANGE("Record ID",NewContact.RECORDID);
      IF NOT IntegrationRecord.FINDFIRST THEN
        EXIT;

      IF NOT GraphIntegrationRecord.GET(GraphContactId,IntegrationRecord."Integration ID") THEN
        EXIT(FALSE);

      "Contact Graph Id" := GraphIntegrationRecord."Graph ID";
      EXIT(EVALUATE("Contact ID",GraphIntegrationRecord.XRMId));
    END;

    LOCAL PROCEDURE TranslateContactIdFilterToCustomerNoFilter@13();
    VAR
      GraphIntegrationRecord@1001 : Record 5451;
      NewContact@1002 : Record 5050;
      IntegrationRecord@1003 : Record 5151;
      ContactBusinessRelation@1005 : Record 5054;
      MarketingSetup@1006 : Record 5079;
      ContactIDFilter@1000 : Text;
    BEGIN
      ContactIDFilter := GETFILTER("Contact ID");
      IF ContactIDFilter <> '' THEN BEGIN
        SETFILTER("Contact ID",'');
        GraphIntegrationRecord.SETFILTER(XRMId,ContactIDFilter);
        GraphIntegrationRecord.FINDFIRST;
      END ELSE BEGIN
        ContactIDFilter := GETFILTER("Contact Graph Id");
        IF ContactIDFilter = '' THEN
          EXIT;

        SETFILTER("Contact Graph Id",'');
        GraphIntegrationRecord.SETFILTER("Graph ID",ContactIDFilter);
        GraphIntegrationRecord.FINDFIRST;
      END;

      IF NOT IntegrationRecord.GET(GraphIntegrationRecord."Integration ID") THEN
        EXIT;

      IF NOT NewContact.GET(IntegrationRecord."Record ID") THEN
        EXIT;

      ContactBusinessRelation.SETRANGE("Link to Table",ContactBusinessRelation."Link to Table"::Customer);
      ContactBusinessRelation.SETRANGE("Contact No.",NewContact."No.");
      IF MarketingSetup.GET THEN
        ContactBusinessRelation.SETRANGE("Business Relation Code",MarketingSetup."Bus. Rel. Code for Customers");

      IF ContactBusinessRelation.FINDFIRST THEN
        SETRANGE("No.",ContactBusinessRelation."No.")
      ELSE
        ERROR(CannotFindCustomerErr);
    END;

    LOCAL PROCEDURE IsUsingVAT@3() : Boolean;
    VAR
      GeneralLedgerSetup@1000 : Record 98;
    BEGIN
      EXIT(GeneralLedgerSetup.UseVat);
    END;

    LOCAL PROCEDURE FindOrCreateCustomer@39(GraphContactID@1003 : Text[250]);
    VAR
      Customer@1001 : Record 18;
      NewContact@1002 : Record 5050;
      GraphIntContact@1000 : Codeunit 5461;
    BEGIN
      IF NOT GraphIntContact.FindOrCreateCustomerFromGraphContactSafe(GraphContactID,Customer,NewContact) THEN
        ERROR(CannotFindContactErr);

      TRANSFERFIELDS(Customer,TRUE);
      CustomerCreatedFromGraph := TRUE;
    END;

    LOCAL PROCEDURE ProcessPostalAddress@5();
    VAR
      GraphMgtCustomer@1001 : Codeunit 5471;
    BEGIN
      IF NOT PostalAddressSet THEN
        EXIT;

      GraphMgtCustomer.UpdatePostalAddress(PostalAddressJSON,Rec);

      IF xRec.Address <> Address THEN
        RegisterFieldSet(FIELDNO(Address));

      IF xRec."Address 2" <> "Address 2" THEN
        RegisterFieldSet(FIELDNO("Address 2"));

      IF xRec.City <> City THEN
        RegisterFieldSet(FIELDNO(City));

      IF xRec."Country/Region Code" <> "Country/Region Code" THEN
        RegisterFieldSet(FIELDNO("Country/Region Code"));

      IF xRec."Post Code" <> "Post Code" THEN
        RegisterFieldSet(FIELDNO("Post Code"));

      IF xRec.County <> County THEN
        RegisterFieldSet(FIELDNO(County));
    END;

    LOCAL PROCEDURE UpdatePricesIncludingTax@9();
    VAR
      GeneralLedgerSetup@1000 : Record 98;
    BEGIN
      IF NOT GeneralLedgerSetup.UseVat THEN
        EXIT;

      VALIDATE("Prices Including VAT","Contact Type" = "Contact Type"::Person);
    END;

    BEGIN
    END.
  }
}

