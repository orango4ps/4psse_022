OBJECT Codeunit 1328 Top Customers By Sales Job
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    TableNo=472;
    OnRun=BEGIN
            UpdateCustomerTopList;
          END;

  }
  CODE
  {
    VAR
      AllOtherCustomersTxt@1000 : TextConst 'ENU=All Other Customers;NOR=Alle andre kunder;SVE=Alla andra kunder';

    [EventSubscriber(Table,472,OnFindingIfJobNeedsToBeRun)]
    LOCAL PROCEDURE OnFindingIfJobNeedsToBeRun@65(VAR Sender@1000 : Record 472;VAR Result@1001 : Boolean);
    VAR
      TopCustomersBySalesBuffer@1002 : Record 1328;
      LastCustLedgerEntry@1003 : Record 21;
    BEGIN
      IF Sender."Object Type to Run" <> Sender."Object Type to Run"::Codeunit THEN
        EXIT;

      IF Sender."Object ID to Run" <> CODEUNIT::"Top Customers By Sales Job" THEN
        EXIT;

      IF NOT LastCustLedgerEntry.FINDLAST THEN
        EXIT;

      IF TopCustomersBySalesBuffer.FINDFIRST THEN
        IF TopCustomersBySalesBuffer.LastCustLedgerEntryNo = LastCustLedgerEntry."Entry No." THEN
          EXIT;

      Result := TRUE;
    END;

    PROCEDURE UpdateCustomerTopList@1();
    VAR
      LastCustLedgerEntry@1000 : Record 21;
      CustLedgerEntry@1002 : Record 21;
      TopCustomersBySalesBuffer@1001 : Record 1328;
      TempTopCustomersBySalesBuffer@1007 : TEMPORARY Record 1328;
      Customer@1003 : Record 18;
      ChartManagement@1008 : Codeunit 1315;
      CustomerCounter@1004 : Integer;
      OtherCustomersSalesLCY@1005 : Decimal;
      DTUpdated@1006 : DateTime;
      LastCustomerLedgerEntryNo@1009 : Integer;
    BEGIN
      IF ChartManagement.TopCustomerListUpdatedRecently(LastCustomerLedgerEntryNo) THEN
        EXIT;

      IF NOT LastCustLedgerEntry.FINDLAST THEN
        EXIT;

      IF LastCustLedgerEntry."Entry No." = LastCustomerLedgerEntryNo THEN
        EXIT;

      Customer.SETCURRENTKEY("Sales (LCY)");
      Customer.ASCENDING(FALSE);
      DTUpdated := CURRENTDATETIME;
      IF Customer.FINDSET THEN
        REPEAT
          CustomerCounter += 1;
          InsertRow(TempTopCustomersBySalesBuffer,
            CustomerCounter,Customer."No.",Customer.Name,Customer."Sales (LCY)",LastCustLedgerEntry."Entry No.",DTUpdated);
          OtherCustomersSalesLCY -= Customer."Sales (LCY)";
        UNTIL (Customer.NEXT = 0) OR (CustomerCounter = 10);

      IF Customer.COUNT > 10 THEN BEGIN
        CustLedgerEntry.CALCSUMS("Sales (LCY)");
        OtherCustomersSalesLCY += CustLedgerEntry."Sales (LCY)";
        CustomerCounter += 1;
        InsertRow(TempTopCustomersBySalesBuffer,
          CustomerCounter,'',AllOtherCustomersTxt,OtherCustomersSalesLCY,LastCustLedgerEntry."Entry No.",DTUpdated);
      END;

      IF TempTopCustomersBySalesBuffer.FINDSET THEN BEGIN
        TopCustomersBySalesBuffer.LOCKTABLE;
        TopCustomersBySalesBuffer.DELETEALL;
        REPEAT
          TopCustomersBySalesBuffer.TRANSFERFIELDS(TempTopCustomersBySalesBuffer);
          TopCustomersBySalesBuffer.INSERT;
        UNTIL TempTopCustomersBySalesBuffer.NEXT = 0
      END;
    END;

    LOCAL PROCEDURE InsertRow@2(VAR TempTopCustomersBySalesBuffer@1000 : TEMPORARY Record 1328;Ranking@1001 : Integer;CustomerNo@1005 : Code[20];CustomerName@1002 : Text[100];SalesLCY@1003 : Decimal;LastCustLedgEntryNo@1004 : Integer;DTUpdated@1006 : DateTime);
    BEGIN
      TempTopCustomersBySalesBuffer.Ranking := Ranking;
      TempTopCustomersBySalesBuffer.CustomerNo := CustomerNo;
      TempTopCustomersBySalesBuffer.CustomerName := CustomerName;
      TempTopCustomersBySalesBuffer.SalesLCY := SalesLCY;
      TempTopCustomersBySalesBuffer.LastCustLedgerEntryNo := LastCustLedgEntryNo;
      TempTopCustomersBySalesBuffer.DateTimeUpdated := DTUpdated;
      TempTopCustomersBySalesBuffer.INSERT;
    END;

    BEGIN
    END.
  }
}

