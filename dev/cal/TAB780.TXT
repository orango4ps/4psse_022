OBJECT Table 780 Certificate of Supply
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00,4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Certificate of Supply;
               NOR=Mottaksdeklarasjon;
               SVE=Leveransintyg];
  }
  FIELDS
  {
    { 1   ;   ;Document Type       ;Option        ;CaptionML=[ENU=Document Type;
                                                              NOR=Bilagstype;
                                                              SVE=Dokumenttyp];
                                                   OptionCaptionML=[ENU=Sales Shipment,Service Shipment,Return Shipment;
                                                                    NOR=F›lgeseddel,Servicef›lgeseddel,Returforsendelse;
                                                                    SVE=F”rs„ljningsutleverans,Tj„nsteutleverans,Returutleverans];
                                                   OptionString=Sales Shipment,Service Shipment,Return Shipment }
    { 2   ;   ;Document No.        ;Code20        ;TableRelation=IF (Document Type=FILTER(Sales Shipment)) "Sales Shipment Header".No.
                                                                 ELSE IF (Document Type=FILTER(Service Shipment)) "Service Shipment Header".No.
                                                                 ELSE IF (Document Type=FILTER(Return Shipment)) "Return Shipment Header".No.;
                                                   CaptionML=[ENU=Document No.;
                                                              NOR=Bilagsnr.;
                                                              SVE=Dokumentnr] }
    { 3   ;   ;Status              ;Option        ;OnValidate=BEGIN
                                                                IF xRec.Status = Status THEN
                                                                  EXIT;

                                                                IF  "No." = '' THEN
                                                                  "No." := "Document No.";

                                                                IF Status = Status::Received THEN
                                                                  "Receipt Date" := WORKDATE
                                                                ELSE
                                                                  "Receipt Date" := 0D;

                                                                IF Status = Status::"Not Applicable" THEN
                                                                  "No." := ''
                                                              END;

                                                   CaptionML=[ENU=Status;
                                                              NOR=Status;
                                                              SVE=Status];
                                                   OptionCaptionML=[ENU=Not Applicable,Required,Received,Not Received;
                                                                    NOR=Ikke i bruk,P†krevd,Mottatt,Ikke mottatt;
                                                                    SVE=Ej till„mpligt,Obligatoriskt,Inlevererad,Ej inlevererad];
                                                   OptionString=Not Applicable,Required,Received,Not Received }
    { 4   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                IF Status = Status::"Not Applicable" THEN BEGIN
                                                                  IF "No." <> '' THEN
                                                                    ERROR(NoCannotBeEnteredErr);
                                                                END ELSE
                                                                  IF "No." = '' THEN
                                                                    ERROR(NoCannotBeEmptyErr)
                                                              END;

                                                   CaptionML=[ENU=No.;
                                                              NOR=Nr.;
                                                              SVE=Nr] }
    { 5   ;   ;Receipt Date        ;Date          ;OnValidate=BEGIN
                                                                CheckRcptDate
                                                              END;

                                                   CaptionML=[ENU=Receipt Date;
                                                              NOR=Mottaksdato;
                                                              SVE=Inleveransdatum] }
    { 6   ;   ;Printed             ;Boolean       ;CaptionML=[ENU=Printed;
                                                              NOR=Skrevet ut;
                                                              SVE=Utskrivet] }
    { 7   ;   ;Customer/Vendor Name;Text100       ;CaptionML=[ENU=Customer/Vendor Name;
                                                              NOR=Kunde-/leverand›rnavn;
                                                              SVE=Kund-/leverant”rsnamn];
                                                   Editable=No }
    { 8   ;   ;Shipment Method Code;Code10        ;CaptionML=[ENU=Shipment Method/Incoterm Code;
                                                              NOR=Leveringsm†tekode;
                                                              SVE=Utleveransvillkorskod];
                                                   Editable=No }
    { 9   ;   ;Shipment/Posting Date;Date         ;CaptionML=[ENU=Shipment/Posting Date;
                                                              NOR=Forsendelses-/bokf›ringsdato;
                                                              SVE=Utleverans-/bokf”ringsdatum];
                                                   Editable=No }
    { 10  ;   ;Ship-to Country/Region Code;Code10 ;CaptionML=[ENU=Ship-to Country/Region Code;
                                                              NOR=Lands-/omr†dekode for Lever til;
                                                              SVE=Kod f”r leveransland/-region];
                                                   Editable=No }
    { 11  ;   ;Customer/Vendor No. ;Code20        ;CaptionML=[ENU=Customer/Vendor No.;
                                                              NOR=Kunde-/leverand›rnr.;
                                                              SVE=Kund-/leverant”rsnr] }
    { 12  ;   ;Vehicle Registration No.;Text20    ;OnValidate=BEGIN
                                                                IF (Status = Status::Received) AND ("Vehicle Registration No." <> xRec."Vehicle Registration No.") THEN
                                                                  ERROR(VehicleRegNoCannotBeChangedErr,FIELDCAPTION("Vehicle Registration No."),Status::Received)
                                                              END;

                                                   CaptionML=[ENU=Vehicle Registration No.;
                                                              NOR=Registreringsnummer;
                                                              SVE=Registreringsnr f”r fordon] }
  }
  KEYS
  {
    {    ;Document Type,Document No.              ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      RecDateCannotBeEmptyErr@1000 : TextConst 'ENU=The Receipt Date cannot be empty when Status is Received.;NOR=Feltet for mottaksdato kan ikke v‘re tomt n†r statusen er Mottatt.;SVE=Inleveransdatum f†r inte vara tomt n„r status „r Inlevererad.';
      RecDateCannotBeEnteredErr@1001 : TextConst 'ENU=You can enter the Receipt Date only if the status of the Certificate of Supply is Received.;NOR=Du kan bare fylle ut mottaksdato hvis statusen for mottaksdeklarasjonen er Mottatt.;SVE=Du f†r bara ange Inleveransdatum om statusen f”r leveransintyget „r Inlevererad.';
      CertRecDateBeforeShipmPostDateErr@1003 : TextConst 'ENU=The Receipt Date of the certificate cannot be earlier than the Shipment/Posting Date.;NOR=Mottaksdatoen for bekreftelsen kan ikke v‘re tidligere enn forsendelses-/bokf›ringsdatoen.;SVE=Inleveransdatum f”r intyget f†r inte vara tidigare „n Utleverans-/bokf”ringsdatum.';
      NoCannotBeEnteredErr@1002 : TextConst 'ENU=The No. field cannot be filled in when the status of the Certificate of Supply is set to Not Applicable.;NOR=Feltet Nr. kan ikke fylles ut n†r status for mottaksdeklarasjonen er satt til Ikke i bruk.;SVE=F„ltet Nr f†r inte vara ifyllt n„r statusen f”r leveransintyget „r Ej till„mpligt.';
      NoCannotBeEmptyErr@1004 : TextConst 'ENU=The No. field cannot be empty when the status of the Certificate of Supply is set to Required, Received, or Not Received.;NOR=Feltet Nr. kan ikke v‘re tomt n†r status for mottaksdeklarasjonen er P†krevd, Mottatt eller Ikke mottatt.;SVE=F„ltet Nr f†r inte vara tomt n„r statusen f”r leveransintyget „r Obligatoriskt, Inlevererad eller Ej inlevererad.';
      VehicleRegNoCannotBeChangedErr@1005 : TextConst 'ENU=The %1 field cannot be changed when the status of the Certificate of Supply is set to %2.;NOR=Feltet %1 kan ikke endres n†r status for mottaksdeklarasjonen er satt til %2.;SVE=F„ltet %1 f†r inte „ndras n„r statusen f”r leveransintyget „r %2.';

    [External]
    PROCEDURE Print@1();
    BEGIN
      REPORT.RUNMODAL(REPORT::"Certificate of Supply",TRUE,FALSE,Rec);
    END;

    [External]
    PROCEDURE SetPrintedTrue@2();
    BEGIN
      IF Status = Status::"Not Applicable" THEN
        SetRequired("Document No.");
      Printed := TRUE;

      MODIFY;
    END;

    [External]
    PROCEDURE SetRequired@3(CertificateNo@1000 : Code[20]);
    BEGIN
      Status := Status::Required;
      "No." := CertificateNo;
      "Receipt Date" := 0D;
      MODIFY
    END;

    LOCAL PROCEDURE CheckRcptDate@37();
    BEGIN
      IF Status = Status::Received THEN BEGIN
        IF "Receipt Date" = 0D THEN
          ERROR(RecDateCannotBeEmptyErr);
        IF "Shipment/Posting Date" > "Receipt Date" THEN
          ERROR(CertRecDateBeforeShipmPostDateErr);
      END ELSE
        IF "Receipt Date" <> 0D THEN
          ERROR(RecDateCannotBeEnteredErr);
    END;

    [External]
    PROCEDURE InitFromSales@11(VAR SalesShipmentHeader@1000 : Record 110);
    BEGIN
      IF NOT GET("Document Type"::"Sales Shipment",SalesShipmentHeader."No.") THEN BEGIN
        INIT;
        "Document Type" := "Document Type"::"Sales Shipment";
        "Document No." := SalesShipmentHeader."No.";
        "Customer/Vendor Name" := SalesShipmentHeader."Ship-to Name";
        "Shipment Method Code" := SalesShipmentHeader."Shipment Method Code";
        "Shipment/Posting Date" := SalesShipmentHeader."Shipment Date";
        "Ship-to Country/Region Code" := SalesShipmentHeader."Ship-to Country/Region Code";
        "Customer/Vendor No." := SalesShipmentHeader."Bill-to Customer No.";
        OnAfterInitFromSales(Rec,SalesShipmentHeader);
        INSERT(TRUE);
      END
    END;

    [External]
    PROCEDURE InitFromPurchase@10(VAR ReturnShipmentHeader@1000 : Record 6650);
    BEGIN
      IF NOT GET("Document Type"::"Return Shipment",ReturnShipmentHeader."No.") THEN BEGIN
        INIT;
        "Document Type" := "Document Type"::"Return Shipment";
        "Document No." := ReturnShipmentHeader."No.";
        "Customer/Vendor Name" := ReturnShipmentHeader."Ship-to Name";
        "Shipment Method Code" := ReturnShipmentHeader."Shipment Method Code";
        "Shipment/Posting Date" := ReturnShipmentHeader."Posting Date";
        "Ship-to Country/Region Code" := ReturnShipmentHeader."Ship-to Country/Region Code";
        "Customer/Vendor No." := ReturnShipmentHeader."Pay-to Vendor No.";
        OnAfterInitFromPurchase(Rec,ReturnShipmentHeader);
        INSERT(TRUE);
      END
    END;

    [External]
    PROCEDURE InitFromService@5(VAR ServiceShipmentHeader@1000 : Record 5990);
    BEGIN
      IF NOT GET("Document Type"::"Service Shipment",ServiceShipmentHeader."No.") THEN BEGIN
        INIT;
        "Document Type" := "Document Type"::"Service Shipment";
        "Document No." := ServiceShipmentHeader."No.";
        "Customer/Vendor Name" := ServiceShipmentHeader."Ship-to Name";
        "Shipment Method Code" := '';
        "Shipment/Posting Date" := ServiceShipmentHeader."Posting Date";
        "Ship-to Country/Region Code" := ServiceShipmentHeader."Ship-to Country/Region Code";
        "Customer/Vendor No." := ServiceShipmentHeader."Bill-to Customer No.";
        OnAfterInitFromService(Rec,ServiceShipmentHeader);
        INSERT(TRUE);
      END
    END;

    [External]
    PROCEDURE InitRecord@4(DocumentType@1000 : Option;DocumentNo@1001 : Code[20]);
    VAR
      SalesShipmentHeader@1004 : Record 110;
      ServiceShipmentHeader@1003 : Record 5990;
      ReturnShipmentHeader@1002 : Record 6650;
    BEGIN
      CASE DocumentType OF
        "Document Type"::"Sales Shipment":
          BEGIN
            SalesShipmentHeader.GET(DocumentNo);
            InitFromSales(SalesShipmentHeader);
          END;
        "Document Type"::"Service Shipment":
          BEGIN
            ServiceShipmentHeader.GET(DocumentNo);
            InitFromService(ServiceShipmentHeader);
          END;
        "Document Type"::"Return Shipment":
          BEGIN
            ReturnShipmentHeader.GET(DocumentNo);
            InitFromPurchase(ReturnShipmentHeader);
          END;
      END
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInitFromSales@6(VAR CertificateOfSupply@1000 : Record 780;SalesShipmentHeader@1001 : Record 110);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInitFromPurchase@7(VAR CertificateOfSupply@1000 : Record 780;ReturnShipmentHeader@1001 : Record 6650);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInitFromService@8(VAR CertificateOfSupply@1000 : Record 780;ServiceShipmentHeader@1001 : Record 5990);
    BEGIN
    END;

    BEGIN
    END.
  }
}

