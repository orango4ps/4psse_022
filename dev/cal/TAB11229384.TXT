OBJECT Table 11229384 Resource Group (WOP)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    DataCaptionFields=No.,Name;
    OnInsert=VAR
               NoSeries@1100525000 : Code[10];
             BEGIN
               TESTFIELD(Company, COMPANYNAME);
               NoSeries := GetNoSeries();
               IF "No." = '' THEN
                 NoSeriesMgt.InitSeries(NoSeries,xRec."No. Series",0D,"No.","No. Series");
             END;

    OnModify=BEGIN
               TESTFIELD(Company, COMPANYNAME);
               TESTFIELD("Source No.");
             END;

    OnDelete=VAR
               Companies@1100409000 : Record 2000000006;
               VisibleResourceGroup@1100529000 : Record 11229385;
             BEGIN
               IF Companies.GET(Company) THEN
                 TESTFIELD(Company, COMPANYNAME);
               VisibleResourceGroup.SETCURRENTKEY("Resource Group No.");
               VisibleResourceGroup.SETRANGE("Resource Group No.", "No.");
               VisibleResourceGroup.DELETEALL;
             END;

    OnRename=BEGIN
               TESTFIELD(Company, COMPANYNAME);
             END;

    CaptionML=[ENU=Resource Group;
               NOR=Ressursgruppe;
               SVE=Resursgrupp];
    LookupPageID=Page11129831;
    DrillDownPageID=Page11129831;
  }
  FIELDS
  {
    { 10  ;   ;No.                 ;Code20        ;AltSearchField=Search Name;
                                                   OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  NoSeriesMgt.TestManual(GetNoSeries());
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=No.;
                                                              NOR=Nr.;
                                                              SVE=Nr];
                                                   NotBlank=No }
    { 20  ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                IF (xRec.Type <> Type) THEN
                                                                  "Source No." := '';
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              NOR=Type;
                                                              SVE=Typ];
                                                   OptionCaptionML=[ENU=Discipline,Plant;
                                                                    NOR=Disiplin,Maskin;
                                                                    SVE=Disciplin,Maskin];
                                                   OptionString=Discipline,Plant }
    { 30  ;   ;Company             ;Text30        ;TableRelation=Company;
                                                   CaptionML=[ENU=Company;
                                                              NOR=Selskap;
                                                              SVE=F”retag];
                                                   Editable=No }
    { 40  ;   ;Source No.          ;Code20        ;OnValidate=BEGIN
                                                                ValidateSourceNo();
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupSourceNo();
                                                            END;

                                                   CaptionML=[ENU=Source No.;
                                                              NOR=Kildenr.;
                                                              SVE=Ursprungsnr];
                                                   NotBlank=Yes }
    { 50  ;   ;Name                ;Text50        ;CaptionML=[ENU=Name;
                                                              NOR=Navn;
                                                              SVE=Namn];
                                                   Description=Field not editable is update from source;
                                                   Editable=No }
    { 60  ;   ;Search Name         ;Code50        ;CaptionML=[ENU=Search Name;
                                                              NOR=S›kenavn;
                                                              SVE=S”knamn];
                                                   Description=Field not editable is update from source;
                                                   Editable=No }
    { 80  ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              NOR=Nr.serie;
                                                              SVE=Nr-serie];
                                                   Editable=No }
    { 100 ;   ;Company Filter      ;Text30        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Company Filter;
                                                              NOR=Selskapsfilter;
                                                              SVE=F”retagsfilter] }
    { 110 ;   ;User ID Filter      ;Code50        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=User ID Filter;
                                                              NOR=Filter for bruker-ID;
                                                              SVE=Anv„ndar-ID-filter] }
    { 120 ;   ;Visible in 4PS Construct;Boolean   ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Visible Resource Group (WOP)" WHERE (Company=FIELD(Company Filter),
                                                                                                           User ID=FIELD(User ID Filter),
                                                                                                           Resource Group No.=FIELD(No.),
                                                                                                           Visible in 4PS Construct=CONST(Yes)));
                                                   CaptionML=[ENU=Visible in 4PS Construct;
                                                              SVE=Synlig i 4PS Construct] }
    { 130 ;   ;Visible in GRP      ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Visible Resource Group (WOP)" WHERE (Company=FIELD(Company Filter),
                                                                                                           User ID=FIELD(User ID Filter),
                                                                                                           Resource Group No.=FIELD(No.),
                                                                                                           Visible in GRP=CONST(Yes)));
                                                   CaptionML=[ENU=Visible in GRP;
                                                              SVE=Synlig i GRP];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Type,Company,No.                         }
    {    ;Type,Company,Source No.                  }
    {    ;Type,Company,Search Name                 }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      NoSeriesMgt@1100525001 : Codeunit 396;
      Text001@1100525000 : TextConst 'ENU=(%1) %2 is already present';
      Text002@1100528600 : TextConst 'ENU=Resource Group %1 is not part of Company Plan Group %2';

    [External]
    PROCEDURE InitRecord@1100525004(ResourceGroupType@1100525001 : Option);
    BEGIN
      Type := ResourceGroupType;
      Company := COMPANYNAME;  //Insert always in the own Company!
    END;

    [External]
    PROCEDURE AssistEdit@2(OldResourceGroup@11012000 : Record 11229384) : Boolean;
    VAR
      ResourceGroup@1100525000 : Record 11229384;
    BEGIN
      WITH ResourceGroup DO BEGIN
        ResourceGroup := Rec;
        IF NoSeriesMgt.SelectSeries(GetNoSeries(), ResourceGroup."No. Series","No. Series") THEN BEGIN
          NoSeriesMgt.SetSeries("No.");
          Rec := ResourceGroup;
          EXIT(TRUE);
        END;
      END;
    END;

    [External]
    PROCEDURE GetNoSeries@1100525002() : Code[10];
    VAR
      WorkOrderPlanningSetup@1100525000 : Record 11229277;
    BEGIN
      TESTFIELD(Company, COMPANYNAME);  //Insert resources only allowed for the own Company!
      WorkOrderPlanningSetup.GET;
      CASE Type OF
        Type::Discipline:
          BEGIN
            WorkOrderPlanningSetup.TESTFIELD("Discipline Resource Group Nos.");
            EXIT(WorkOrderPlanningSetup."Discipline Resource Group Nos.");
          END;
        Type::Plant:
          BEGIN
            WorkOrderPlanningSetup.TESTFIELD("Plant Resource Group Nos.");
            EXIT(WorkOrderPlanningSetup."Plant Resource Group Nos.");
          END;
        ELSE
          FIELDERROR(Type);
      END;
    END;

    [External]
    PROCEDURE ValidateSourceNo@1100525000();
    VAR
      Discipline@1100525000 : Record 11020204;
      PlantType@1100529000 : Record 11012551;
    BEGIN
      TESTFIELD(Company, COMPANYNAME);
      CASE Type OF
        Type::Discipline:
          BEGIN
            Discipline.GET("Source No.");
            Name := COPYSTR(Discipline.Description, 1, MAXSTRLEN(Name));
            "Search Name" := Name;
          END;
        Type::Plant:
          BEGIN
            PlantType.GET("Source No.");
            PlantType.TESTFIELD(Blocked, FALSE);
            Name := COPYSTR(PlantType.Description, 1, MAXSTRLEN(Name));
            "Search Name" := COPYSTR(PlantType."Search Name", 1, MAXSTRLEN("Search Name"));
          END;
        ELSE
          FIELDERROR(Type);
      END;
      CheckResourceGroupAlreadyPresent;
    END;

    LOCAL PROCEDURE CheckResourceGroupAlreadyPresent@1100529002();
    VAR
      ResourceGroup@1100529000 : Record 11229384;
    BEGIN
      ResourceGroup.SETCURRENTKEY(Type, Company, "Source No.");
      ResourceGroup.SETRANGE(Type, Type);
      ResourceGroup.SETRANGE(Company, Company);
      ResourceGroup.SETRANGE("Source No.", "Source No.");
      ResourceGroup.SETFILTER("No.", '<>%1', "No.");
      IF ResourceGroup.FINDFIRST THEN
        ResourceGroup.FIELDERROR("Source No.", STRSUBSTNO(Text001, Type, "Source No."))
    END;

    [External]
    PROCEDURE LookupSourceNo@1100525003();
    VAR
      Discipline@1100525000 : Record 11020204;
      PlantType@1100529000 : Record 11012551;
    BEGIN
      CASE Type OF
        Type::Discipline:
          BEGIN
            Discipline.CHANGECOMPANY(Company);
            Discipline.Code := "Source No.";
            IF (Company <> COMPANYNAME) THEN
              PAGE.RUNMODAL(0, Discipline)
            ELSE BEGIN
              IF PAGE.RUNMODAL(0, Discipline) = ACTION::LookupOK THEN
                VALIDATE("Source No.", Discipline.Code);
            END;
          END;
        Type::Plant:
          BEGIN
            PlantType.CHANGECOMPANY(Company);
            PlantType.Code := "Source No.";
            IF (Company <> COMPANYNAME) THEN
              PAGE.RUNMODAL(0, PlantType)
            ELSE BEGIN
              IF PAGE.RUNMODAL(0, PlantType) = ACTION::LookupOK THEN
                VALIDATE("Source No.", PlantType.Code);
            END;
          END;
      END;
    END;

    [External]
    PROCEDURE SetCompanyPlanGroupFilters@1100528606();
    VAR
      CompanyPlanGroup@1100528603 : Record 11229300;
      CompanyPlanGroupLine@1100528601 : Record 11229301;
      CurrentCompanyPlanGroup@1100528600 : Code[10];
      CompanyFilter@1100528602 : Text;
    BEGIN
      CurrentCompanyPlanGroup := CompanyPlanGroup.GetCurrentCompanyPlanGroupCode;
      CompanyPlanGroupLine.SETRANGE("Group Code", CurrentCompanyPlanGroup);
      IF CompanyPlanGroupLine.ISEMPTY THEN
        CompanyFilter := COMPANYNAME;
      IF CompanyPlanGroupLine.FINDSET THEN BEGIN
        REPEAT
          IF CompanyFilter <> '' THEN
            CompanyFilter += '|';
          CompanyFilter += CompanyPlanGroupLine."Company Name";
        UNTIL CompanyPlanGroupLine.NEXT = 0;
      END;
      FILTERGROUP(7);
      SETFILTER(Company, CompanyFilter);
      FILTERGROUP(0);

      FILTERGROUP(8);
      SETRANGE(Company);
      IF FilterOnSpecificResoureGroupType(Rec, Type::Discipline) THEN
        SETRANGE(Company, COMPANYNAME)
      ELSE
        SETRANGE(Company);
      FILTERGROUP(0);
    END;

    [External]
    PROCEDURE IsResourceGroupWithinCompanyPlanGroup@1100528607() : Boolean;
    VAR
      CompanyPlanGroup@1100528600 : Record 11229300;
      CompanyPlanGroupLine@1100528602 : Record 11229301;
      CompanyPlanGroupCode@1100528603 : Code[20];
    BEGIN
      CompanyPlanGroupCode := CompanyPlanGroup.GetCurrentCompanyPlanGroupCode;
      IF CompanyPlanGroupCode = '' THEN
        EXIT(TRUE);
      CompanyPlanGroupLine.SETRANGE("Group Code", CompanyPlanGroupCode);
      IF CompanyPlanGroupLine.ISEMPTY THEN
        EXIT(TRUE);
      CompanyPlanGroupLine.SETRANGE("Company Name", Company);
      EXIT(NOT CompanyPlanGroupLine.ISEMPTY);
    END;

    [External]
    PROCEDURE TestResourceGroupWithinCompanyPlanGroup@1100528609();
    VAR
      CompanyPlanGroup@1100528600 : Record 11229300;
    BEGIN
      IF NOT IsResourceGroupWithinCompanyPlanGroup THEN
        ERROR(Text002, "No.", CompanyPlanGroup.GetCurrentCompanyPlanGroupCode);
    END;

    [External]
    PROCEDURE FilterOnSpecificResoureGroupType@1100529000(VAR ResourceGroup@1100529000 : Record 11229384;SpecType@1100529001 : Option) : Boolean;
    VAR
      ResourceGroup2@1100529002 : Record 11229384;
      FilterGroupNo@1100529003 : Integer;
    BEGIN
      ResourceGroup2.SETRANGE(Type, SpecType);
      FOR FilterGroupNo := 0 TO 10 DO BEGIN
        ResourceGroup.FILTERGROUP(FilterGroupNo);
        IF ResourceGroup.GETFILTER(Type) = ResourceGroup2.GETFILTER(Type) THEN BEGIN
          ResourceGroup.FILTERGROUP(0);
          EXIT(TRUE);
        END;
      END;
      ResourceGroup.FILTERGROUP(0);
      EXIT(FALSE);
    END;

    [External]
    PROCEDURE SetVisible@1100525010(VisibleFieldNo@1100409000 : Integer;VisibleValueNew@1100528600 : Boolean);
    BEGIN
      SetVisibleByUserID(VisibleFieldNo, VisibleValueNew, COMPANYNAME, USERID);
    END;

    [External]
    PROCEDURE SetVisibleByUserID@1100528608(VisibleFieldNo@1100409000 : Integer;VisibleValueNew@1100528600 : Boolean;VisibleInCompany@1100529000 : Text[30];VisibleForUserID@1100528602 : Code[50]);
    VAR
      VisibleResourceGroup@1100528601 : Record 11229385;
    BEGIN
      IF VisibleValueNew THEN BEGIN
        IF NOT VisibleResourceGroup.GET(VisibleInCompany, VisibleForUserID, "No.") THEN BEGIN
          VisibleResourceGroup.INIT;
          VisibleResourceGroup.Company := VisibleInCompany;
          VisibleResourceGroup."User ID" := VisibleForUserID;
          VisibleResourceGroup."Resource Group No." := "No.";
          VisibleResourceGroup.INSERT(TRUE);
        END;
        VisibleResourceGroup.CALCFIELDS("Resource Group Type", "Resource Group Company");
        IF VisibleResourceGroup."Resource Group Type" = VisibleResourceGroup."Resource Group Type"::Disicipline THEN
          VisibleResourceGroup.TESTFIELD("Resource Group Company", VisibleInCompany);
        CASE VisibleFieldNo OF
          FIELDNO("Visible in 4PS Construct"):
            VisibleResourceGroup."Visible in 4PS Construct" := TRUE;
          FIELDNO("Visible in GRP"):
            VisibleResourceGroup."Visible in GRP" := TRUE;
        END;
        VisibleResourceGroup.MODIFY(TRUE);
      END ELSE BEGIN
        IF VisibleResourceGroup.GET(VisibleInCompany, VisibleForUserID, "No.") THEN BEGIN
          CASE VisibleFieldNo OF
            FIELDNO("Visible in 4PS Construct"):
              VisibleResourceGroup."Visible in 4PS Construct" := FALSE;
          FIELDNO("Visible in GRP"):
            VisibleResourceGroup."Visible in GRP" := FALSE;
          END;
          IF (NOT VisibleResourceGroup."Visible in 4PS Construct") AND (NOT VisibleResourceGroup."Visible in GRP") THEN
            VisibleResourceGroup.DELETE(TRUE)
          ELSE
            VisibleResourceGroup.MODIFY(TRUE);
        END;
      END;
    END;

    [External]
    PROCEDURE UseVisibleResourceGroupsNAV@1100528602() : Boolean;
    VAR
      VisibleResourceGroup@1100528600 : Record 11229385;
    BEGIN
      VisibleResourceGroup.SETRANGE(Company, COMPANYNAME);
      VisibleResourceGroup.SETRANGE("User ID", USERID);
      VisibleResourceGroup.SETRANGE("Visible in 4PS Construct", TRUE);
      EXIT(NOT VisibleResourceGroup.ISEMPTY);
    END;

    BEGIN
    {
      Only maintain (insert/modify/delete/rename) resourcegroupss of the own company allowed!
    }
    END.
  }
}

