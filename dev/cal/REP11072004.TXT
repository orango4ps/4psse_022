OBJECT Report 11072004 Liquidity Prognosis Long Term
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00 FIXME;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Liquidit„tsprognose langfristig;
               ENU=Liquidity Prognosis Long Term;
               NLD=Liquiditeitsprognose lange termijn;
               NOR=Likviditetsprognose Lang Sikt;
               SVE=Likviditetsprognos l†ng period];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  IF StartDate = 0D THEN
                    ERROR(Text011);

                  ExcelBuffer.DELETEALL;
                  LiqPrognosisSetup.GET();
                  LiqPrognosisSetup.CALCFIELDS("Description Section Projects","Description Section Contracts","Desc Section Projects Specific",
                    "Desc Section Contract Specific","Description Section Try-Out","Description Section Extension","Desc Section Opening Amount",
                    "Desc Prognosis Section Parcels","Desc Prognosis Section Loans","Desc Section Rental Package");

                  Counter := 0;

                  AccountingPeriod.SETFILTER("Starting Date",'%1..',StartDate);

                  IF AccountingPeriod.FINDSET THEN BEGIN
                    REPEAT
                      Counter := Counter + 1;
                      PeriodArray[Counter] := AccountingPeriod."Starting Date";
                      PeriodDescArray[Counter] := AccountingPeriod.Name;
                    UNTIL (AccountingPeriod.NEXT = 0) OR (Counter = 13);
                  END;
                  EnterCellHead();
                END;

    OnPostReport=VAR
                   FileManagement@1100525000 : Codeunit 419;
                   ServerFileName@1100525001 : Text;
                 BEGIN
                   LiquidityPrognosisManually();

                   SheetName := 'Data';

                   ServerFileName := FileManagement.UploadFileSilent(FileName);
                   ExcelBuffer.UpdateBook(ServerFileName, SheetName);
                   ExcelBuffer.WriteSheet('', COMPANYNAME, USERID);
                   ExcelBuffer.CloseBook;
                   ExcelBuffer.DELETEALL;

                   SheetName := 'Rubrieken';
                   AllRubrics();
                   ExcelBuffer.UpdateBook(ServerFileName, SheetName);
                   ExcelBuffer.WriteSheet('', COMPANYNAME, USERID);
                   ExcelBuffer.CloseBook;
                   ExcelBuffer.OpenExcelWithName(FileName);
                   ExcelBuffer.DELETEALL;
                 END;

  }
  DATASET
  {
    { 8019;    ;DataItem;                    ;
               DataItemTable=Table11072003;
               DataItemTableView=WHERE(Liquidity Prognosis=FILTER(Equable Division..));
               OnAfterGetRecord=BEGIN
                                  CASE "Liquidity Prognosis" OF
                                    "Liquidity Prognosis"::"Equable Division":
                                      LiquidityPrognosisProjEquable();
                                    "Liquidity Prognosis"::"Specific Division":
                                      LiquidityPrognosisProjSpecific();
                                  END;
                                END;

               ReqFilterFields=No. }

    { 4178;    ;DataItem;                    ;
               DataItemTable=Table11012812;
               DataItemTableView=WHERE(Liquidity Prognosis=FILTER(Equable Division..));
               OnAfterGetRecord=BEGIN
                                  CASE "Liquidity Prognosis" OF
                                    "Liquidity Prognosis"::"Equable Division":
                                      LiquidityPrognosisContEquable();
                                    "Liquidity Prognosis"::"Specific Division":
                                      LiquidityPrognosisContSpecific();
                                  END;
                                END;
                                 }

    { 3949;    ;DataItem;                    ;
               DataItemTable=Table11012750;
               DataItemTableView=WHERE(Order=FILTER(No),
                                       Expected Starting Date=FILTER(<>''),
                                       Expected End Date=FILTER(<>''));
               OnAfterGetRecord=BEGIN
                                  ExpectedOrdersInTryOut;
                                END;

               ReqFilterFields=Code }

    { 8266;    ;DataItem;                    ;
               DataItemTable=Table11020602;
               OnAfterGetRecord=BEGIN
                                  LiquidityGeneralLedger();
                                END;

               ReqFilterFields=G/L Account No. }

    { 7098;    ;DataItem;                    ;
               DataItemTable=Table11012240;
               OnAfterGetRecord=BEGIN
                                  LiquidityParcel();
                                END;
                                 }

    { 9266;    ;DataItem;                    ;
               DataItemTable=Table11020587;
               OnAfterGetRecord=BEGIN
                                  LiquidityLoans();
                                END;

               ReqFilterFields=Code }

    { 6200;    ;DataItem;                    ;
               DataItemTable=Table11012941;
               OnAfterGetRecord=BEGIN
                                  LiquidityRentalPackage();
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1100525000;;Container;
                  ContainerType=ContentArea }

      { 1100525001;1;Group  ;
                  CaptionML=[DEU=Optionen;
                             ENU=Options;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ];
                  GroupType=Group }

      { 1100525002;2;Field  ;
                  CaptionML=[DEU=Dateispeicherort Excel-Datei;
                             ENU=File Location Excel File;
                             NLD=File locatie excel bestand;
                             NOR=Filplassering for Excel-fil;
                             SVE=Filplats f”r Excel-fil];
                  SourceExpr=FileName;
                  OnAssistEdit=VAR
                                 FileManagementMgt@1100525000 : Codeunit 419;
                                 FilterString@1100525001 : Text;
                               BEGIN
                                 FilterString := FileManagementMgt.GetToFilterText('','.xlt');
                                 FileName := FileManagementMgt.OpenFileDialog(Text010,FileName,FilterString);
                               END;
                                }

      { 1100525003;2;Field  ;
                  CaptionML=[DEU=Startdatum;
                             ENU=Start Date;
                             NLD=Startdatum;
                             NOR=Startdato;
                             SVE=Startdatum];
                  SourceExpr=StartDate;
                  TableRelation="Accounting Period" }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      FileName@1100525001 : Text[250];
      SheetName@1100525000 : Text[250];
      Text001@1100525006 : TextConst 'DEU=Rubrikennr.;ENU=Rubric;NLD=Rubriek;NOR=Rubrikk;SVE=Rubrik';
      RowNo@1100525034 : Integer;
      ExcelBuffer@1100525009 : TEMPORARY Record 370;
      LiqPrognosisProjectHead@1100525010 : Record 11020603;
      LiqPrognosisProjectLine@1100525002 : Record 11020604;
      LiqPrognosisContractHead@1100525003 : Record 11020605;
      LiqPrognosisContractLine@1100525022 : Record 11020606;
      LiqPrognosisManually@1100525023 : Record 11020607;
      LiqPrognosisManuallyLine@1100525004 : Record 11020608;
      AccountingPeriod@1100525024 : Record 50;
      PrognosisRubric@1100525025 : Record 11020601;
      LiqPrognosisSetup@1100525026 : Record 11020600;
      ExtensionContract@1100525039 : Record 11012004;
      GeneralLedgerEntries@1100525040 : Record 17;
      Counter@1100525011 : Integer;
      Column@1210190004 : Integer;
      StartDate@1100525012 : Date;
      PeriodArray@1100525013 : ARRAY [13] OF Date;
      PeriodDescArray@1100525014 : ARRAY [13] OF Text[20];
      Text002@1100525015 : TextConst 'DEU=Beschreibung;ENU=Description;NLD=Omschrijving;NOR=Beskrivelse;SVE=Beskrivning';
      Text003@1100525016 : TextConst 'DEU=Code;ENU=Code;NLD=Code;NOR=Kode;SVE=Kod';
      Text005@1100525018 : TextConst 'DEU=Ein-Aus;ENU=In-Out;NLD=In-Uit;NOR=In-ut;SVE=In-ut';
      Text006@1100525019 : TextConst 'DEU=Gesamtbetrag;ENU=Total Amount;NLD=Totaal bedrag;NOR=Totalt bel›p;SVE=Totalt belopp';
      PeriodCounter@1100525028 : Integer;
      PeriodAmountIn@1100525029 : Decimal;
      PeriodAmountOut@1100525030 : Decimal;
      TotalPeriodAmountIn@1100525031 : Decimal;
      TotalPeriodAmountOut@1100525032 : Decimal;
      ExpOrderAmountIn@1100525037 : Decimal;
      ExpOrderAmountOut@1100525038 : Decimal;
      LiquidityPrognosisPeriodAmount@1100525042 : Codeunit 11012240;
      Text008@1100525027 : TextConst 'DEU=Ein;ENU=In;NLD=In;NOR=Inn;SVE=I';
      Text009@1100525033 : TextConst 'DEU=Aus;ENU=Out;NLD=Uit;NOR=Ut;SVE=Ut';
      Text010@1100525035 : TextConst 'DEU=W„heln Sie eine Excel-Vorlage aus;ENU=Select an Excel Template;NLD=Selecteer een Excel template;NOR=Velg en Excel-mal;SVE=V„lj en Excel-mall';
      InPeriod@1100525017 : Boolean;
      AmountArrayIn@1210190001 : ARRAY [13] OF Decimal;
      AmountArrayOut@1210190000 : ARRAY [13] OF Decimal;
      InPresent@1210190003 : Boolean;
      OutPresent@1210190002 : Boolean;
      Text011@1210190005 : TextConst 'DEU=Startdatum muss eingegeben worden sein;ENU=Start Date has to be filled;NLD=Startdatum moet worden gevuld;NOR=Startdato m† fylles ut;SVE=Startdatum m†ste fyllas i';
      InvoiceDate@1210190009 : Date;
      CalcDateFiller@1210190006 : Text[30];
      DurationInMonth@1210190007 : Integer;

    PROCEDURE LiquidityPrognosisProjSpecific@1100525001();
    BEGIN
      LiqPrognosisProjectHead.SETRANGE("Project No.",Job."No.");
      IF LiqPrognosisProjectHead.FINDLAST THEN BEGIN
        LiqPrognosisProjectHead.CALCFIELDS(Revenues);
        LiqPrognosisProjectHead.CALCFIELDS(Expenses);
        LiqPrognosisProjectLine.SETRANGE("Project No.",Job."No.");
        LiqPrognosisProjectLine.SETRANGE("Prognosis Date",LiqPrognosisProjectHead."Prognosis Date");
        FOR Counter := 1 TO 12 DO BEGIN
          IF Counter = 1 THEN BEGIN
            EnterCell(RowNo,1,LiqPrognosisSetup."PrognosisSection Proj Specific", ExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,2,LiqPrognosisSetup."Desc Section Projects Specific", ExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,3,Job."No.", ExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,4,Job.Description, ExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,5,Text008, ExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,6,FORMAT(LiqPrognosisProjectHead.Revenues), ExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo+1,1,LiqPrognosisSetup."PrognosisSection Proj Specific", ExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo+1,2,LiqPrognosisSetup."Desc Section Projects Specific", ExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo+1,3,Job."No.", ExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo+1,4,Job.Description, ExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo+1,5,Text009, ExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo+1,6,FORMAT(-1*LiqPrognosisProjectHead.Expenses), ExcelBuffer."Cell Type"::Number);
          END;
          LiqPrognosisProjectLine.SETRANGE("Start Date", PeriodArray[Counter]);
          IF LiqPrognosisProjectLine.FINDSET THEN
          REPEAT
            EnterCell(RowNo,Counter+6,FORMAT(LiqPrognosisProjectLine.Revenues), ExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo+1,Counter+6,FORMAT(-1*LiqPrognosisProjectLine.Expenses), ExcelBuffer."Cell Type"::Number);
          UNTIL LiqPrognosisProjectLine.NEXT = 0;
        END;
        RowNo := RowNo + 2;
      END;
    END;

    PROCEDURE LiquidityPrognosisContSpecific@1100525002();
    BEGIN
      LiqPrognosisContractHead.SETRANGE("Contract No.","Service-Contract"."No.");
      IF LiqPrognosisContractHead.FINDLAST THEN BEGIN
        LiqPrognosisContractHead.CALCFIELDS(Revenues);
        LiqPrognosisContractHead.CALCFIELDS(Expenses);
        LiqPrognosisContractLine.SETRANGE("Contract No.","Service-Contract"."No.");
        LiqPrognosisContractLine.SETRANGE("Prognosis Date",LiqPrognosisContractHead."Prognosis Date");
        FOR Counter := 1 TO 12 DO BEGIN
          IF Counter = 1 THEN BEGIN
            EnterCell(RowNo,1,LiqPrognosisSetup."PrognosisSection Cont Specific", ExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,2,LiqPrognosisSetup."Desc Section Contract Specific", ExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,3,"Service-Contract"."No.", ExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,4,"Service-Contract".Description, ExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,5,Text008, ExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,6,FORMAT(LiqPrognosisContractHead.Revenues), ExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo+1,1,LiqPrognosisSetup."PrognosisSection Cont Specific", ExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo+1,2,LiqPrognosisSetup."Desc Section Contract Specific", ExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo+1,3,"Service-Contract"."No.", ExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo+1,4,"Service-Contract".Description, ExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo+1,5,Text009, ExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo+1,6,FORMAT(-1*LiqPrognosisContractHead.Expenses), ExcelBuffer."Cell Type"::Number);
          END;
          LiqPrognosisContractLine.SETRANGE("Start Date", PeriodArray[Counter]);
          IF LiqPrognosisContractLine.FINDSET THEN
            REPEAT
              EnterCell(RowNo,Counter+6,FORMAT(LiqPrognosisContractLine.Revenues), ExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo+1,Counter+6,FORMAT(-1*LiqPrognosisContractLine.Expenses), ExcelBuffer."Cell Type"::Number);
            UNTIL LiqPrognosisContractLine.NEXT = 0;
        END;
        RowNo := RowNo + 2;
      END;
    END;

    PROCEDURE LiquidityPrognosisProjEquable@1100525005();
    BEGIN
      LiquidityPrognosisPeriodAmount.CreatePeriodPrognosisProject(Job."No.",StartDate,
                                                                  PeriodAmountIn,PeriodAmountOut,
                                                                  TotalPeriodAmountIn,TotalPeriodAmountOut);
      FOR Counter := 1 TO 12 DO BEGIN
        IF Counter = 1 THEN BEGIN
          EnterCell(RowNo,1,LiqPrognosisSetup."Prognosis Section Projects", ExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,2,LiqPrognosisSetup."Description Section Projects", ExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,3,Job."No.", ExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,4,Job.Description, ExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,5,Text008, ExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,6,FORMAT(TotalPeriodAmountIn), ExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo+1,1,LiqPrognosisSetup."Prognosis Section Projects", ExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo+1,2,LiqPrognosisSetup."Description Section Projects", ExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo+1,3,Job."No.", ExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo+1,4,Job.Description, ExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo+1,5,Text009, ExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo+1,6,FORMAT(-1*TotalPeriodAmountOut), ExcelBuffer."Cell Type"::Number);
        END;
        IF (PeriodArray[Counter] >= Job."Starting Date") AND (PeriodArray[Counter] <= Job."Ending Date") THEN BEGIN
          EnterCell(RowNo,Counter+6,FORMAT(PeriodAmountIn), ExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo+1,Counter+6,FORMAT(-1*PeriodAmountOut), ExcelBuffer."Cell Type"::Number);
        END;
      END;
      RowNo := RowNo + 2;
    END;

    PROCEDURE LiquidityPrognosisContEquable@1100525006();
    BEGIN
      {FIXME
      LiquidityPrognosisPeriodAmount.CreatePeriodPrognosisContract(
        "Service-Contract"."No.",StartDate,
        PeriodAmountIn,PeriodAmountOut,
        TotalPeriodAmountIn,TotalPeriodAmountOut);
      }
      FOR Counter := 1 TO 12 DO BEGIN
        IF Counter = 1 THEN BEGIN
          EnterCell(RowNo,1,LiqPrognosisSetup."Prognosis Section Contracts", ExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,2,LiqPrognosisSetup."Description Section Contracts", ExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,3,"Service-Contract"."No.", ExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,4,"Service-Contract".Description, ExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,5,Text008, ExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,6,FORMAT(TotalPeriodAmountIn), ExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo+1,1,LiqPrognosisSetup."Prognosis Section Contracts", ExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo+1,2,LiqPrognosisSetup."Description Section Contracts", ExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo+1,3,"Service-Contract"."No.", ExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo+1,4,"Service-Contract".Description, ExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo+1,5,Text009, ExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo+1,6,FORMAT(-1*TotalPeriodAmountOut), ExcelBuffer."Cell Type"::Number);
        END;
        IF (PeriodArray[Counter] >= "Service-Contract"."Starting Date") AND
           (PeriodArray[Counter] <= "Service-Contract"."Ending Date") THEN BEGIN
          EnterCell(RowNo,Counter+6,FORMAT(PeriodAmountIn), ExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo+1,Counter+6,FORMAT(-1*PeriodAmountOut), ExcelBuffer."Cell Type"::Number);
        END;
      END;
      RowNo := RowNo + 2;
    END;

    PROCEDURE LiquidityPrognosisManually@1100525012();
    BEGIN
      IF LiqPrognosisManually.FINDLAST THEN BEGIN
        LiqPrognosisManuallyLine.SETRANGE("Prognosis Date",LiqPrognosisManually."Prognosis Date");

        IF PrognosisRubric.FINDFIRST THEN
          REPEAT
            TotalPeriodAmountIn  := 0;
            TotalPeriodAmountOut := 0;
            LiqPrognosisManuallyLine.SETRANGE("Prognosis Rubric",PrognosisRubric."Prognosis Rubric");
            IF LiqPrognosisManuallyLine.FINDSET THEN
              REPEAT
                TotalPeriodAmountIn  := TotalPeriodAmountIn + LiqPrognosisManuallyLine.Revenues;
                TotalPeriodAmountOut := TotalPeriodAmountOut + LiqPrognosisManuallyLine.Expenses;
                Counter := 0;
                InPeriod := FALSE;
                REPEAT
                  Counter := Counter + 1;
                  IF PeriodArray[Counter] = LiqPrognosisManuallyLine."Start Date" THEN BEGIN
                    EnterCell(RowNo,Counter+6,FORMAT(LiqPrognosisManuallyLine.Revenues), ExcelBuffer."Cell Type"::Number);
                    EnterCell(RowNo+1,Counter+6,FORMAT(-1*LiqPrognosisManuallyLine.Expenses), ExcelBuffer."Cell Type"::Number);
                    InPeriod := TRUE;
                  END;
                UNTIL (Counter = 12) OR (InPeriod = TRUE);
              UNTIL LiqPrognosisManuallyLine.NEXT = 0;

            IF (TotalPeriodAmountIn <> 0) OR (TotalPeriodAmountOut <> 0) THEN BEGIN
              EnterCell(RowNo,1,PrognosisRubric."Prognosis Rubric", ExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,2,PrognosisRubric.Description, ExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,5,Text008, ExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,6,FORMAT(TotalPeriodAmountIn), ExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo+1,1,PrognosisRubric."Prognosis Rubric", ExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo+1,2,PrognosisRubric.Description, ExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo+1,5,Text009, ExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo+1,6,FORMAT(-1*TotalPeriodAmountOut), ExcelBuffer."Cell Type"::Number);
              RowNo := RowNo + 2;
            END;
          UNTIL PrognosisRubric.NEXT = 0;
        END;
    END;

    PROCEDURE ExpectedOrdersInTryOut@1100525011();
    BEGIN
      AccountingPeriod.SETFILTER("Starting Date",'%1..%2',"Try-out"."Expected Starting Date","Try-out"."Expected End Date");

      TotalPeriodAmountIn  := "Try-out"."Scoring Percentage" * "Try-out"."Order Amount (LCY)" / 100;
      TotalPeriodAmountOut := "Try-out"."Scoring Percentage" * "Try-out"."Cost Estimate" / 100;

      PeriodCounter := AccountingPeriod.COUNT;
      IF PeriodCounter <> 0 THEN BEGIN
        ExpOrderAmountIn  := "Try-out"."Scoring Percentage" * "Try-out"."Order Amount (LCY)" / (PeriodCounter * 100);
        ExpOrderAmountOut := "Try-out"."Scoring Percentage" * "Try-out"."Cost Estimate" / (PeriodCounter * 100);
      END ELSE BEGIN
        ExpOrderAmountIn := 0;
        ExpOrderAmountOut := 0;
      END;

      FOR Counter := 1 TO 12 DO BEGIN
        IF Counter = 1 THEN BEGIN
          EnterCell(RowNo,1,LiqPrognosisSetup."Prognosis Section Try-Out", ExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,2,LiqPrognosisSetup."Description Section Try-Out", ExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,3,"Try-out".Code, ExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,4,"Try-out".Description, ExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,5,Text008, ExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,6,FORMAT(TotalPeriodAmountIn), ExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo+1,1,LiqPrognosisSetup."Prognosis Section Try-Out", ExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo+1,2,LiqPrognosisSetup."Description Section Try-Out", ExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo+1,3,"Try-out".Code, ExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo+1,4,"Try-out".Description, ExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo+1,5,Text009, ExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo+1,6,FORMAT(-1*TotalPeriodAmountOut), ExcelBuffer."Cell Type"::Number);
        END;
        IF (PeriodArray[Counter] >= "Try-out"."Expected Starting Date") AND
           (PeriodArray[Counter] <= "Try-out"."Expected End Date") THEN BEGIN
          EnterCell(RowNo,Counter+6,FORMAT(ExpOrderAmountIn), ExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo+1,Counter+6,FORMAT(-1*ExpOrderAmountOut), ExcelBuffer."Cell Type"::Number);
        END;
      END;
      RowNo := RowNo + 2;
    END;

    PROCEDURE ExpectedOrdersInExtension@1100525009();
    BEGIN
      //Option work swith off again
      {
      ExtensionContract.SETFILTER(ExtensionContract."Project No.",Job."No.");
      ExtensionContract.SETFILTER(Status,'<=%1',ExtensionContract.Status::Offered);
      ExtensionContract.SETFILTER("Expected Order Date",'<> %1',0D);

      IF Job."Ending Date" = 0D THEN
        EXIT;

      IF ExtensionContract.FINDSET THEN
        REPEAT
          AccountingPeriod.SETFILTER("Starting Date",'%1..%2',ExtensionContract."Expected Order Date",Job."Ending Date");

          TotalPeriodAmountIn := ExtensionContract."Offered Amount";
          TotalPeriodAmountOut := ExtensionContract."Estimated Amount";

          PeriodCounter := AccountingPeriod.COUNT;
          IF PeriodCounter <> 0 THEN BEGIN
            ExpOrderAmountIn := ExtensionContract."Offered Amount" / PeriodCounter;
            ExpOrderAmountOut := ExtensionContract."Estimated Amount" / PeriodCounter;
          END ELSE BEGIN
            ExpOrderAmountIn := 0;
            ExpOrderAmountOut := 0;
          END;

          FOR Counter := 1 TO 12 DO BEGIN
            IF Counter = 1 THEN BEGIN
              EnterCell(RowNo,1,LiqPrognosisSetup."Prognosis Section Extension");
              EnterCell(RowNo,2,LiqPrognosisSetup."Description Section Extension");
              EnterCell(RowNo,3,STRSUBSTNO('%1-%2',ExtensionContract."Project No.",ExtensionContract."Contract No."));
              EnterCell(RowNo,4,ExtensionContract.Description);
              EnterCell(RowNo,5,Text008);
              EnterCell(RowNo,6,FORMAT(TotalPeriodAmountIn));
              EnterCell(RowNo+1,1,LiqPrognosisSetup."Prognosis Section Extension");
              EnterCell(RowNo+1,2,LiqPrognosisSetup."Description Section Extension");
              EnterCell(RowNo+1,3,STRSUBSTNO('%1-%2',ExtensionContract."Project No.",ExtensionContract."Contract No."));
              EnterCell(RowNo+1,4,ExtensionContract.Description);
              EnterCell(RowNo+1,5,Text009);
              EnterCell(RowNo+1,6,FORMAT(-1*TotalPeriodAmountOut));
            END;
            IF (PeriodArray[Counter] >= ExtensionContract."Expected Order Date") AND
               (PeriodArray[Counter] <= Job."Ending Date") THEN BEGIN
              EnterCell(RowNo,Counter+6,FORMAT(ExpOrderAmountIn));
              EnterCell(RowNo+1,Counter+6,FORMAT(-1*ExpOrderAmountOut));
            END;
          END;
          RowNo := RowNo + 2;
        UNTIL ExtensionContract.NEXT = 0;
      }
    END;

    PROCEDURE LiquidityGeneralLedger@1100525007();
    BEGIN
      GeneralLedgerEntries.SETCURRENTKEY("G/L Account No.","Posting Date");
      GeneralLedgerEntries.SETRANGE("G/L Account No.","General Ledger Liquidity"."G/L Account No.");
      GeneralLedgerEntries.SETFILTER("Posting Date",'<%1',StartDate);
      GeneralLedgerEntries.CALCSUMS(Amount);
      "General Ledger Liquidity".CALCFIELDS(Description);

      EnterCell(RowNo,1,LiqPrognosisSetup."Prognosis Section Opening Amnt", ExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,2,LiqPrognosisSetup."Desc Section Opening Amount", ExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,3,"General Ledger Liquidity"."G/L Account No.", ExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,4,"General Ledger Liquidity".Description, ExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,5,Text008, ExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,6,FORMAT(GeneralLedgerEntries.Amount), ExcelBuffer."Cell Type"::Number);
      RowNo := RowNo + 1;
    END;

    PROCEDURE LiquidityParcel@1210190000();
    BEGIN
      // Addition with Parcels to Liquidity Prognosis. Call 32037
      ExportParcelPurchasePrice;
      ExportParcelCommitment;
      ExportParcelCostPrognosis;
      ExportParcelValue;
    END;

    PROCEDURE ExportParcelPurchasePrice@1210190001();
    VAR
      ParcelPurchasePrice@1210190000 : Record 11012247;
    BEGIN
      CLEAR(AmountArrayIn);
      CLEAR(AmountArrayOut);
      OutPresent := FALSE;
      InPresent := FALSE;

      ParcelPurchasePrice.SETRANGE("Parcel No.",Parcel."No.");
      ParcelPurchasePrice.SETFILTER("Purchase Date",'>=%1',StartDate);
      IF ParcelPurchasePrice.FINDSET THEN BEGIN
        REPEAT
          IF ParcelPurchasePrice.Amount >= 0 THEN BEGIN
            OutPresent := TRUE;
            AmountArrayOut[13] := AmountArrayOut[13] + ParcelPurchasePrice.Amount;
          END ELSE BEGIN
            InPresent := TRUE;
            AmountArrayIn[13] := AmountArrayIn[13] - ParcelPurchasePrice.Amount;
          END;

          FOR Counter := 1 TO 12 DO BEGIN
            IF (ParcelPurchasePrice."Purchase Date" >= PeriodArray[Counter]) AND
               (ParcelPurchasePrice."Purchase Date" < PeriodArray[Counter+1]) THEN BEGIN
              IF ParcelPurchasePrice.Amount > 0 THEN
                AmountArrayOut[Counter] := AmountArrayOut[Counter] + ParcelPurchasePrice.Amount;
              IF ParcelPurchasePrice.Amount < 0 THEN
                  AmountArrayIn[Counter] := AmountArrayIn[Counter] - ParcelPurchasePrice.Amount;
              Counter := 12;
            END;
          END;
        UNTIL ParcelPurchasePrice.NEXT = 0;
      END;

      ExportParcelAmountsToExcel;
    END;

    PROCEDURE ExportParcelCommitment@1210190003();
    VAR
      ParcelCommitment@1210190000 : Record 11012248;
    BEGIN
      CLEAR(AmountArrayIn);
      CLEAR(AmountArrayOut);
      OutPresent := FALSE;
      InPresent := FALSE;

      ParcelCommitment.SETRANGE("Parcel No.",Parcel."No.");
      ParcelCommitment.SETFILTER("Payment Date",'>=%1',StartDate);
      IF ParcelCommitment.FINDSET THEN BEGIN
        REPEAT
          IF ParcelCommitment.Amount >= 0 THEN BEGIN
            OutPresent := TRUE;
            AmountArrayOut[13] := AmountArrayOut[13] + ParcelCommitment.Amount;
          END ELSE BEGIN
            InPresent := TRUE;
            AmountArrayIn[13] := AmountArrayIn[13] - ParcelCommitment.Amount;
          END;

          FOR Counter := 1 TO 12 DO BEGIN
            IF (ParcelCommitment."Payment Date" >= PeriodArray[Counter]) AND
               (ParcelCommitment."Payment Date" < PeriodArray[Counter+1]) THEN BEGIN
              IF ParcelCommitment.Amount > 0 THEN
                AmountArrayOut[Counter] := AmountArrayOut[Counter] + ParcelCommitment.Amount;
              IF ParcelCommitment.Amount < 0 THEN
                  AmountArrayIn[Counter] := AmountArrayIn[Counter] - ParcelCommitment.Amount;
              Counter := 12;
            END;
          END;
        UNTIL ParcelCommitment.NEXT = 0;
      END;

      ExportParcelAmountsToExcel;
    END;

    PROCEDURE ExportParcelCostPrognosis@1210190004();
    VAR
      ParcelCostPrognosis@1210190001 : Record 11012252;
      PeriodAmount@1210190000 : Decimal;
    BEGIN
      CLEAR(AmountArrayIn);
      CLEAR(AmountArrayOut);
      OutPresent := FALSE;
      InPresent := FALSE;

      ParcelCostPrognosis.SETRANGE("Parcel No.",Parcel."No.");
      ParcelCostPrognosis.SETFILTER("Prognosis Date",'<=%1',StartDate);
      IF ParcelCostPrognosis.FINDLAST THEN BEGIN
        IF ParcelCostPrognosis.Prognosis >= 0 THEN BEGIN
          OutPresent := TRUE;
          AmountArrayOut[13] := ParcelCostPrognosis.Prognosis;
        END ELSE BEGIN
          InPresent := TRUE;
          AmountArrayIn[13] := -1 * ParcelCostPrognosis.Prognosis;
        END;
      END;

      CreatePeriodPrognosisParcel(Parcel.Date,Parcel."Expected Realisation Date",
                                  ParcelCostPrognosis.Prognosis, PeriodAmount);

      FOR Counter := 1 TO 12 DO BEGIN
        IF (PeriodArray[Counter] >= Parcel.Date) AND (PeriodArray[Counter] <= Parcel."Expected Realisation Date") THEN BEGIN
          IF OutPresent THEN
            AmountArrayOut[Counter] := PeriodAmount;
          IF InPresent THEN
            AmountArrayIn[Counter] := -1 * PeriodAmount;
        END;
      END;

      ExportParcelAmountsToExcel;
    END;

    PROCEDURE ExportParcelValue@1210190002();
    VAR
      ParcelValue@1210190001 : Decimal;
    BEGIN
      CLEAR(AmountArrayIn);
      CLEAR(AmountArrayOut);
      OutPresent := FALSE;
      InPresent := TRUE;

      ParcelValue := Parcel.GetValue(WORKDATE);
      AmountArrayIn[13] := ParcelValue;

      FOR Counter := 1 TO 12 DO BEGIN
        IF (Parcel."Expected Realisation Date" >= PeriodArray[Counter]) AND
           (Parcel."Expected Realisation Date" < PeriodArray[Counter+1]) THEN
        BEGIN
          AmountArrayIn[Counter] := AmountArrayIn[Counter] + ParcelValue;
          Counter := 12;
        END;
      END;

      ExportParcelAmountsToExcel;
    END;

    PROCEDURE CreatePeriodPrognosisParcel@1210190007(PurchaseDate@1100525001 : Date;RealisationDate@1210190000 : Date;TotalPeriodAmount@1100525004 : Decimal;VAR PeriodAmount@1210190001 : Decimal);
    BEGIN
      AccountingPeriod.SETFILTER("Starting Date",'%1..%2',PurchaseDate,RealisationDate);
      PeriodCounter := AccountingPeriod.COUNT;
      IF PeriodCounter <> 0 THEN BEGIN
        PeriodAmount := ROUND(TotalPeriodAmount / PeriodCounter,1);
      END ELSE BEGIN
        PeriodAmount := 0;
      END;
    END;

    PROCEDURE ExportParcelAmountsToExcel@1210190009();
    BEGIN
      IF OutPresent THEN BEGIN
        EnterCell(RowNo,1,LiqPrognosisSetup."Prognosis Section Parcels", ExcelBuffer."Cell Type"::Text);
        EnterCell(RowNo,2,LiqPrognosisSetup."Desc Prognosis Section Parcels", ExcelBuffer."Cell Type"::Text);
        EnterCell(RowNo,3,Parcel."No.", ExcelBuffer."Cell Type"::Text);
        EnterCell(RowNo,4,Parcel.Description, ExcelBuffer."Cell Type"::Text);
        EnterCell(RowNo,5,Text009, ExcelBuffer."Cell Type"::Text);
        EnterCell(RowNo,6,FORMAT(AmountArrayOut[13]), ExcelBuffer."Cell Type"::Number);
        FOR Counter := 1 TO 12 DO BEGIN
          IF AmountArrayOut[Counter] <> 0 THEN
            EnterCell(RowNo,Counter+6,FORMAT(AmountArrayOut[Counter]), ExcelBuffer."Cell Type"::Number);
        END;
        RowNo := RowNo + 1;
      END;

      IF InPresent THEN BEGIN
        EnterCell(RowNo,1,LiqPrognosisSetup."Prognosis Section Parcels", ExcelBuffer."Cell Type"::Text);
        EnterCell(RowNo,2,LiqPrognosisSetup."Desc Prognosis Section Parcels", ExcelBuffer."Cell Type"::Text);
        EnterCell(RowNo,3,Parcel."No.", ExcelBuffer."Cell Type"::Text);
        EnterCell(RowNo,4,Parcel.Description, ExcelBuffer."Cell Type"::Text);
        EnterCell(RowNo,5,Text008, ExcelBuffer."Cell Type"::Text);
        EnterCell(RowNo,6,FORMAT(AmountArrayIn[13]), ExcelBuffer."Cell Type"::Number);
        FOR Counter := 1 TO 12 DO BEGIN
          IF AmountArrayIn[Counter] <> 0 THEN
            EnterCell(RowNo,Counter+6,FORMAT(AmountArrayIn[Counter]), ExcelBuffer."Cell Type"::Number);
        END;
        RowNo := RowNo + 1;
      END;
    END;

    PROCEDURE LiquidityLoans@1210190005();
    VAR
      LoanLine@1210190000 : Record 11020588;
    BEGIN
      // Addition with Loans to Liquidity Prognosis. Call 33307
      CLEAR(AmountArrayIn);
      CLEAR(AmountArrayOut);
      OutPresent := FALSE;
      InPresent := FALSE;

      LoanLine.SETRANGE("Loan Header Code", "Loan Header".Code);
      LoanLine.SETFILTER(Date,'>=%1',StartDate);
      IF LoanLine.FINDSET THEN BEGIN
        REPEAT
          IF "Loan Header".Type = "Loan Header".Type::Borrowed THEN BEGIN
            OutPresent := TRUE;
            AmountArrayOut[13] := AmountArrayOut[13] + LoanLine.Amount;
          END ELSE BEGIN
            InPresent := TRUE;
            AmountArrayIn[13] := AmountArrayIn[13] - LoanLine.Amount;
          END;

          FOR Counter := 1 TO 12 DO BEGIN
            IF (LoanLine.Date >= PeriodArray[Counter]) AND
               (LoanLine.Date < PeriodArray[Counter+1]) THEN BEGIN
              IF "Loan Header".Type = "Loan Header".Type::Borrowed THEN
                AmountArrayOut[Counter] := AmountArrayOut[Counter] + LoanLine.Amount
              ELSE
                AmountArrayIn[Counter] := AmountArrayIn[Counter] - LoanLine.Amount;
              Counter := 12;
            END;
          END;
        UNTIL LoanLine.NEXT = 0;
      END;

      ExportLoanAmountsToExcel;
    END;

    PROCEDURE ExportLoanAmountsToExcel@1210190006();
    BEGIN
      IF OutPresent THEN BEGIN
        EnterCell(RowNo,1,LiqPrognosisSetup."Prognosis Section Loans", ExcelBuffer."Cell Type"::Text);
        EnterCell(RowNo,2,LiqPrognosisSetup."Desc Prognosis Section Loans", ExcelBuffer."Cell Type"::Text);
        EnterCell(RowNo,3,"Loan Header".Code, ExcelBuffer."Cell Type"::Text);
        EnterCell(RowNo,4,"Loan Header".Description, ExcelBuffer."Cell Type"::Text);
        EnterCell(RowNo,5,Text009, ExcelBuffer."Cell Type"::Text);
        EnterCell(RowNo,6,FORMAT(AmountArrayOut[13]), ExcelBuffer."Cell Type"::Number);
        FOR Counter := 1 TO 12 DO BEGIN
          IF AmountArrayOut[Counter] <> 0 THEN
            EnterCell(RowNo,Counter+6,FORMAT(AmountArrayOut[Counter]), ExcelBuffer."Cell Type"::Number);
        END;
        RowNo := RowNo + 1;
      END;

      IF InPresent THEN BEGIN
        EnterCell(RowNo,1,LiqPrognosisSetup."Prognosis Section Loans", ExcelBuffer."Cell Type"::Text);
        EnterCell(RowNo,2,LiqPrognosisSetup."Desc Prognosis Section Loans", ExcelBuffer."Cell Type"::Text);
        EnterCell(RowNo,3,"Loan Header".Code, ExcelBuffer."Cell Type"::Text);
        EnterCell(RowNo,4,"Loan Header".Description, ExcelBuffer."Cell Type"::Text);
        EnterCell(RowNo,5,Text008, ExcelBuffer."Cell Type"::Text);
        EnterCell(RowNo,6,FORMAT(AmountArrayIn[13]), ExcelBuffer."Cell Type"::Number);
        FOR Counter := 1 TO 12 DO BEGIN
          IF AmountArrayIn[Counter] <> 0 THEN
            EnterCell(RowNo,Counter+6,FORMAT(AmountArrayIn[Counter]), ExcelBuffer."Cell Type"::Number);
        END;
        RowNo := RowNo + 1;
      END;
    END;

    PROCEDURE LiquidityRentalPackage@1210190010();
    VAR
      RentalRateLine@1100529000 : Record 11012942;
      PeriodTotal@1100529001 : Decimal;
      YearTotal@1100529002 : Decimal;
    BEGIN
      // Addition with Rental Package to Liquidity Prognosis. Call 33307
      IF "Rental Package"."Ending Date" <> 0D THEN
        IF "Rental Package"."Ending Date" < StartDate THEN
          CurrReport.SKIP;

      CLEAR(AmountArrayIn);
      CLEAR(AmountArrayOut);
      OutPresent := FALSE;
      InPresent := TRUE;

      //"Rental Package".CALCFIELDS("Period Amount");
      RentalRateLine.CalculatePackageTotals(
        "Rental Package"."Project No.", "Rental Package"."Rental Unit", "Rental Package"."Starting Date", '', PeriodTotal, YearTotal);

      InvoiceDate := StartDate;
      IF "Rental Package"."Invoice Frequency" = "Rental Package"."Invoice Frequency"::Month THEN BEGIN
        FOR Column := 1 TO 12 DO BEGIN
          InvoiceDate := CalcPeriodDate;
          IF "Rental Package"."Ending Date" <> 0D THEN
            IF InvoiceDate > "Rental Package"."Ending Date" THEN
              Column := 99;

          IF Column <= 12 THEN
            FillAmountArrayIn(PeriodTotal);
        END;
      END;

      IF "Rental Package"."Invoice Frequency" = "Rental Package"."Invoice Frequency"::Quarter THEN BEGIN
        FOR Column := 1 TO 4 DO BEGIN
          InvoiceDate := CalcPeriodDate;
          IF "Rental Package"."Ending Date" <> 0D THEN
            IF InvoiceDate > "Rental Package"."Ending Date" THEN
              Column := 99;

          IF Column <= 4 THEN
            FillAmountArrayIn(PeriodTotal);
        END;
      END;

      IF "Rental Package"."Invoice Frequency" = "Rental Package"."Invoice Frequency"::HalfYear THEN BEGIN
        FOR Column := 1 TO 2 DO BEGIN
          InvoiceDate := CalcPeriodDate;
          IF "Rental Package"."Ending Date" <> 0D THEN
            IF InvoiceDate > "Rental Package"."Ending Date" THEN
              Column := 99;

          IF Column <= 2 THEN
            FillAmountArrayIn(PeriodTotal);
        END;
      END;

      IF "Rental Package"."Invoice Frequency" = "Rental Package"."Invoice Frequency"::Year THEN BEGIN
        FOR Column := 1 TO 1 DO BEGIN
          InvoiceDate := CalcPeriodDate;
          IF "Rental Package"."Ending Date" <> 0D THEN
            IF InvoiceDate > "Rental Package"."Ending Date" THEN
              Column := 99;

          IF Column <= 1 THEN
            FillAmountArrayIn(PeriodTotal);
        END;
      END;

      IF "Rental Package"."Ending Date" = 0D THEN BEGIN
        FOR Counter := 1 TO 12 DO BEGIN
          AmountArrayIn[13] := AmountArrayIn[13] + AmountArrayIn[Counter];
        END;
      END ELSE BEGIN
        CalcDuration;
        AmountArrayIn[13] := DurationInMonth * PeriodTotal;
      END;

      ExpRentalPackageAmountsToExcel;
    END;

    PROCEDURE FillAmountArrayIn@1210190013(PeriodTotal@1100529000 : Decimal);
    BEGIN
      FOR Counter := 1 TO 12 DO BEGIN
        IF (InvoiceDate >= PeriodArray[Counter]) AND
           (InvoiceDate < PeriodArray[Counter+1]) THEN
        BEGIN
          AmountArrayIn[Counter] := AmountArrayIn[Counter] + PeriodTotal;
          EXIT;
        END;
      END;
    END;

    PROCEDURE CalcDuration@1210190008();
    VAR
      Date@1210190000 : Record 2000000007;
    BEGIN
      IF (StartDate > 0D) AND ("Rental Package"."Ending Date" >= StartDate) THEN BEGIN
        Date.SETRANGE("Period Type",Date."Period Type"::Month);
        Date.SETRANGE("Period Start", StartDate, "Rental Package"."Ending Date");
        DurationInMonth := Date.COUNT;

        IF "Rental Package"."Invoice Frequency" = "Rental Package"."Invoice Frequency"::Quarter THEN
          DurationInMonth := ROUND(DurationInMonth / 3, 1,'<');
        IF "Rental Package"."Invoice Frequency" = "Rental Package"."Invoice Frequency"::HalfYear THEN
          DurationInMonth := ROUND(DurationInMonth / 6, 1,'<');
        IF "Rental Package"."Invoice Frequency" = "Rental Package"."Invoice Frequency"::Year THEN
          DurationInMonth := ROUND(DurationInMonth / 12,1,'<');
      END ELSE
        DurationInMonth := 0;
    END;

    PROCEDURE CalcPeriodDate@1210190015() NewDate : Date;
    BEGIN
      IF Column = 1 THEN BEGIN
        NewDate := StartDate;
      END ELSE BEGIN
        IF "Rental Package"."Invoice Frequency" = "Rental Package"."Invoice Frequency"::Month THEN
          CalcDateFiller := '<CM+' + FORMAT(Column - 1) + 'M>';

        IF "Rental Package"."Invoice Frequency" = "Rental Package"."Invoice Frequency"::Quarter THEN
          CalcDateFiller := '<CM+' + FORMAT(Column - 1) + 'Q>';

        IF "Rental Package"."Invoice Frequency" = "Rental Package"."Invoice Frequency"::HalfYear THEN
          CalcDateFiller := '<CM+' + FORMAT((Column - 1)*6) + 'M>';

        IF "Rental Package"."Invoice Frequency" = "Rental Package"."Invoice Frequency"::Year THEN
          CalcDateFiller := '<CM+' + FORMAT(Column - 1) + 'Y>';

        NewDate := CALCDATE(CalcDateFiller, StartDate);
      END;

      IF "Rental Package"."Invoice Moment" = "Rental Package"."Invoice Moment"::Afterwards THEN BEGIN
        IF "Rental Package"."Invoice Frequency" = "Rental Package"."Invoice Frequency"::Quarter THEN
          NewDate := CALCDATE('<CM+2M>', NewDate);
        IF "Rental Package"."Invoice Frequency" = "Rental Package"."Invoice Frequency"::HalfYear THEN
          NewDate := CALCDATE('<CM+5M>', NewDate);
        IF "Rental Package"."Invoice Frequency" = "Rental Package"."Invoice Frequency"::Year THEN
          NewDate := CALCDATE('<CM+11M>', NewDate);
      END
    END;

    PROCEDURE ExpRentalPackageAmountsToExcel@1210190011();
    BEGIN
      IF OutPresent THEN BEGIN
        EnterCell(RowNo,1,LiqPrognosisSetup."Prognosis Section Rent Package", ExcelBuffer."Cell Type"::Text);
        EnterCell(RowNo,2,LiqPrognosisSetup."Desc Section Rental Package", ExcelBuffer."Cell Type"::Text);
        EnterCell(RowNo,3,"Rental Package"."Project No.", ExcelBuffer."Cell Type"::Text);
        EnterCell(RowNo,4,"Rental Package"."Rental Unit", ExcelBuffer."Cell Type"::Text);
        EnterCell(RowNo,5,Text009, ExcelBuffer."Cell Type"::Text);
        EnterCell(RowNo,6,FORMAT(AmountArrayOut[13]), ExcelBuffer."Cell Type"::Number);
        FOR Counter := 1 TO 12 DO BEGIN
          IF AmountArrayOut[Counter] <> 0 THEN
            EnterCell(RowNo,Counter+6,FORMAT(AmountArrayOut[Counter]), ExcelBuffer."Cell Type"::Number);
        END;
        RowNo := RowNo + 1;
      END;

      IF InPresent THEN BEGIN
        EnterCell(RowNo,1,LiqPrognosisSetup."Prognosis Section Rent Package", ExcelBuffer."Cell Type"::Text);
        EnterCell(RowNo,2,LiqPrognosisSetup."Desc Section Rental Package", ExcelBuffer."Cell Type"::Text);
        EnterCell(RowNo,3,"Rental Package"."Project No.", ExcelBuffer."Cell Type"::Text);
        EnterCell(RowNo,4,"Rental Package"."Rental Unit", ExcelBuffer."Cell Type"::Text);
        EnterCell(RowNo,5,Text008, ExcelBuffer."Cell Type"::Text);
        EnterCell(RowNo,6,FORMAT(AmountArrayIn[13]), ExcelBuffer."Cell Type"::Number);
        FOR Counter := 1 TO 12 DO BEGIN
          IF AmountArrayIn[Counter] <> 0 THEN
            EnterCell(RowNo,Counter+6,FORMAT(AmountArrayIn[Counter]), ExcelBuffer."Cell Type"::Number);
        END;
        RowNo := RowNo + 1;
      END;
    END;

    PROCEDURE AllRubrics@1100525010();
    BEGIN
      RowNo := 1;
      IF PrognosisRubric.FINDFIRST THEN BEGIN
        REPEAT
          EnterCell(RowNo,1, PrognosisRubric."Prognosis Rubric", ExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,2, PrognosisRubric.Description, ExcelBuffer."Cell Type"::Text);
          RowNo := RowNo + 1;
        UNTIL PrognosisRubric.NEXT = 0;
      END;
    END;

    PROCEDURE EnterCellHead@1100525000();
    BEGIN
      EnterCell(1,1,Text001, ExcelBuffer."Cell Type"::Text);     // Rubric
      EnterCell(1,2,Text002, ExcelBuffer."Cell Type"::Text);     // Description
      EnterCell(1,3,Text003, ExcelBuffer."Cell Type"::Text);     // Code
      EnterCell(1,4,Text002, ExcelBuffer."Cell Type"::Text);     // Description
      EnterCell(1,5,Text005, ExcelBuffer."Cell Type"::Text);     // In-Out
      EnterCell(1,6,Text006, ExcelBuffer."Cell Type"::Text);     // Total Amount

      FOR Counter := 1 TO 12 DO
        EnterCell(1,6+Counter,PeriodDescArray[Counter], ExcelBuffer."Cell Type"::Text);    // Period Description

      RowNo := 2;
    END;

    PROCEDURE EnterCell@1100525003(Row@1100525000 : Integer;Column@1100525001 : Integer;Value@1100525002 : Text[250];CellType@1100525003 : Option);
    BEGIN
      ExcelBuffer.INIT;
      ExcelBuffer.VALIDATE("Row No.",Row);
      ExcelBuffer.VALIDATE("Column No.",Column);
      ExcelBuffer."Cell Value as Text" := Value;
      ExcelBuffer."Cell Type" := CellType;
      ExcelBuffer.INSERT;
    END;

    BEGIN
    {
      RequiredFilterFields for data-item Service-Contract contains now <Undefined> and should NOT be changed.
      This is related to license-problems for customers who do not have Service.
      Customers with Service can set this once only to 'No.'
      Call C001174: Same for data-items 'Parcel' en 'Rental Package'.
    }
    END.
  }
  RDLDATA
  {
  }
}

