OBJECT Codeunit 11012008 Copy Budget Lines
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    TableNo=39;
    Permissions=TableData 11020579=rimd;
    OnRun=VAR
            ProjPurchaseActionRec@11012000 : Record 11012026;
          BEGIN
            PurchHeaderRec.GET("Document Type","Document No.");

            IF PurchHeaderRec."Job No." <> '' THEN
              ProjPurchaseActionRec.SETRANGE("Project No.", PurchHeaderRec."Job No.");
            IF PurchHeaderRec."Ship-to Project" <> '' THEN
              ProjPurchaseActionRec.SETRANGE("Project No.", PurchHeaderRec."Ship-to Project");
            ProjPurchaseActionRec.SETFILTER(Status,'>=%1',ProjPurchaseActionRec.Status::Approved);
            IF PurchHeaderRec."Document Type" = PurchHeaderRec."Document Type"::Quote THEN
              ProjPurchaseActionRec.SETFILTER("Activate for", '%1|%2',
              ProjPurchaseActionRec."Activate for"::" ", ProjPurchaseActionRec."Activate for"::Quote);
            IF PurchHeaderRec."Document Type" = PurchHeaderRec."Document Type"::Order THEN
              ProjPurchaseActionRec.SETFILTER("Activate for", '%1|%2',
              ProjPurchaseActionRec."Activate for"::" ", ProjPurchaseActionRec."Activate for"::Purchase);
            IF PAGE.RUNMODAL(PAGE::"Project Purchase Action List",ProjPurchaseActionRec) = ACTION::LookupOK THEN
              IF PurchHeaderRec."Document Type" = PurchHeaderRec."Document Type"::Quote THEN
                CopyLines(ProjPurchaseActionRec,Rec,FALSE,FALSE,'',PurchHeaderRec."Currency Code")  //DP00885
              ELSE
                CopyLines(ProjPurchaseActionRec,Rec,TRUE,FALSE,'',PurchHeaderRec."Currency Code");  //DP00885
          END;

  }
  CODE
  {
    VAR
      BudgetLineRec@11012000 : Record 11012001;
      ItemRec@1100485000 : Record 27;
      DimValRec@11012001 : Record 349;
      PurchLineRec@1210190002 : Record 39;
      PurchHeaderRec@1210190001 : Record 38;
      OptionRec@1100525000 : Record 11012502;
      OptionBudgetRec@1100525001 : Record 11012503;
      ProjElemRec@1210190004 : Record 11012010;
      DimMgt@1210190003 : Codeunit 408;
      UOMMgt@1210190000 : Codeunit 5402;
      NextLineNo@1210190005 : Integer;
      TmpBudgetLineRec@1210190006 : TEMPORARY Record 11012001;
      Text000@1100485002 : TextConst 'ENU=No Vendors selected for this Purchase Action;NOR=Ingen leverandr›rer er valgt for denne innkj›pshandlingen;SVE=Inga leverant”rer har valts f”r den h„r ink”ps†tg„rden';
      Text001@1100485003 : TextConst 'ENU=Status of this Purchase Action must be Approve or Definitive.;NOR=Statud for denne innkj›pshandlingen m† v‘re Godkjenn eller Definitiv;SVE=Status f”r denna ink”ps†tg„rd m†ste vara Godk„nna eller Definitiv.';
      Text002@1100485004 : TextConst 'ENU=Purchase Order %1 is created.;NOR=Innkj›psordre %1 kunne er opprettet;SVE=Ink”psorder %1 „r skapad.';
      PurchLineCounter@1100485001 : Integer;
      Text003@1100485005 : TextConst 'ENU=There is no Purchase Order created.;NOR=Ingen innkj›psordre er opprettet;SVE=Ingen ink”psorder skapad.';
      Text004@1100525002 : TextConst 'ENU=Making Order Lines         @1@@@@@@@@@@@@@;SVE=Skapar orderrader          @1@@@@@@@@@@@@@';
      GenericTempTable@1100525003 : TEMPORARY Record 11020579;
      Text005@1100528600 : TextConst 'ENU=%1 Lines created.;SVE=%1 rader skapade.';
      Text006@1100528601 : TextConst 'ENU=There are %1s present, only new lines will be added, continue?';
      Text007@1100525005 : TextConst 'ENU=Cost object is not filled in on every line.';

    [External]
    PROCEDURE CopyLines@1210190000(IProjPurchActionRec@1210190002 : Record 11012026;IPurchLineRec@1210190001 : Record 39;ICloseBudgetLine@1210190000 : Boolean;CheckCurrency@1100528902 : Boolean;OrigCurrency@1100528900 : Code[10];DestCurrency@1100528901 : Code[10]);
    BEGIN
      BudgetLineRec.SETRANGE("Project No.",IProjPurchActionRec."Project No.");
      BudgetLineRec.SETRANGE("Purchase Action",IProjPurchActionRec.Code);
      BudgetLineRec.SETRANGE(Advised, FALSE);
      //DP00885.sn
      IF CheckCurrency THEN BEGIN
        IF OrigCurrency <> DestCurrency THEN
          BudgetLineRec.SETFILTER("Currency Code", '%1', OrigCurrency)
        ELSE
          BudgetLineRec.SETRANGE("Currency Code", DestCurrency);
      END;
      //DP00885.en

      InsertPurchLines(IPurchLineRec, ICloseBudgetLine);

      IF ICloseBudgetLine THEN BEGIN
        IProjPurchActionRec.FIND;
        IF PurchHeaderRec."Document Type" = PurchHeaderRec."Document Type"::Quote THEN
          IF IProjPurchActionRec."Activate for" < IProjPurchActionRec."Activate for"::Quote THEN
            IProjPurchActionRec."Activate for" := IProjPurchActionRec."Activate for"::Quote;
        IF PurchHeaderRec."Document Type" = PurchHeaderRec."Document Type"::Order THEN
          IF IProjPurchActionRec."Activate for" < IProjPurchActionRec."Activate for"::Purchase THEN
            IProjPurchActionRec."Activate for" := IProjPurchActionRec."Activate for"::Purchase;
        IProjPurchActionRec.MODIFY;
      END;
    END;

    [External]
    PROCEDURE CopyMarkedBudgetLines@1210190001(VAR IBudgetRec@1210190002 : Record 11012001;IPurchLineRec@1210190001 : Record 39;ICloseBudgetLine@1210190000 : Boolean);
    BEGIN
      BudgetLineRec.COPY(IBudgetRec);

      InsertPurchLines(IPurchLineRec, ICloseBudgetLine);
    END;

    [External]
    PROCEDURE CopyMarkedBudgetLinesOption@1100525000(VAR IBudgetRec@1210190002 : Record 11012001;IOptionBudgetRec@1210190001 : Record 11012503);
    BEGIN
      BudgetLineRec.COPY(IBudgetRec);

      InsertOptionBudget(IOptionBudgetRec);
    END;

    [External]
    PROCEDURE CopyMarkedBudgetLinesPlantReq@1210190002(VAR IBudgetRec@1210190001 : Record 11012001;IPlantRequestLine@1210190000 : Record 11020521);
    BEGIN
      BudgetLineRec.COPY(IBudgetRec);

      InsertPlantRequest(IPlantRequestLine);
    END;

    [External]
    PROCEDURE CopyMarkedBudgetLinesPlantOrd@1210190004(VAR IBudgetRec@1210190001 : Record 11012001;IPlantOrder@1210190000 : Record 11012556);
    BEGIN
      BudgetLineRec.COPY(IBudgetRec);

      InsertPlantOrder(IPlantOrder);
    END;

    [External]
    PROCEDURE InsertPurchLines@1210190005(IPurchLineRec@1210190000 : Record 39;ICloseBudgetLine@1210190001 : Boolean);
    VAR
      BudgetLineWithSamePropertyFilters@1100528400 : Record 11012001;
      RouteRefMgt@1100525003 : Codeunit 11012045;
      CompressedTotal@1210190002 : Decimal;
      NoOfRecords@1100525002 : Integer;
      BudgetLineCounter@1100525001 : Integer;
      Window@1100525000 : Dialog;
      LastRefNo@1100525004 : Code[20];
      PurchaseOrderNo@1100528401 : Code[20];
      PurchaseOrderLineNo@1100528402 : Integer;
      LineIsText@1100528900 : Boolean;
      IsEmptyCostObject@1100528500 : Boolean;
      "-"@1100528901 : Integer;
      BudgetLineRec2@1100528909 : Record 11012001;
      TradeItemRec@1100528902 : Record 11012317;
      ItemRec@1100528904 : Record 27;
      ItemUnitRec@1100528903 : Record 5404;
      UnitFactor@1100528906 : Decimal;
      BaseUnit@1100528905 : Code[20];
      BudgetQuantity@1100528907 : Decimal;
      VendorPrice@1100528910 : Decimal;
    BEGIN
      PurchLineCounter := 0;
      PurchHeaderRec.GET(IPurchLineRec."Document Type",IPurchLineRec."Document No.");

      PurchLineRec.LOCKTABLE;
      PurchLineRec.SETRANGE("Document Type",IPurchLineRec."Document Type");
      PurchLineRec.SETRANGE("Document No.",IPurchLineRec."Document No.");
      IF PurchLineRec.FINDLAST THEN
        NextLineNo := PurchLineRec."Line No."
      ELSE
        NextLineNo := 0;

      IF BudgetLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
        NoOfRecords := BudgetLineRec.COUNT;
        IF GUIALLOWED THEN
          Window.OPEN(Text004);
        //
        REPEAT
          BudgetLineCounter := BudgetLineCounter + 1;
          IF GUIALLOWED THEN
            Window.UPDATE(1, 100 * ROUND(BudgetLineCounter/NoOfRecords * 100));
          //
          TmpBudgetLineRec := BudgetLineRec;
          IF NOT TmpBudgetLineRec.FIND('=') THEN BEGIN
            CompressedTotal := CheckSameProperty(BudgetLineWithSamePropertyFilters);
            LineIsText := CheckTextLine(BudgetLineRec);  //DP01267
            IF (CompressedTotal <> 0) OR (LineIsText = TRUE) THEN BEGIN  //DP01267
              PurchLineRec.INIT;
              NextLineNo := NextLineNo + 10000;
              PurchLineRec."Document Type"  := IPurchLineRec."Document Type";
              PurchLineRec."Document No." := IPurchLineRec."Document No.";
              PurchLineRec."Line No." := NextLineNo;
              PurchLineRec."Input by" := USERID;
              PurchLineRec."Input Date" := TODAY;
              PurchLineRec.INSERT;
              PurchLineCounter := PurchLineCounter + 1;

              PurchLineRec.SuspendUpdateAmounts(TRUE); //C011532
              PurchLineRec.VALIDATE("Currency Code", IPurchLineRec."Currency Code");
              PurchLineRec.VALIDATE("Job No.", BudgetLineRec."Project No.");
              PurchLineRec.VALIDATE(Element, BudgetLineRec.Element);
              PurchLineRec."Extension Contract" := BudgetLineRec."Extension Contract";
              PurchLineRec."Plot No." := BudgetLineRec."Plot No.";
              PurchLineRec."Budget Adjustment" := BudgetLineRec.Adjustment;
              PurchLineRec."Tender Paragraph" := BudgetLineRec."Tender Paragraph";
              PurchLineRec."Tender Paragraph Part" := BudgetLineRec."Tender Paragraph Part";
              PurchLineRec."Subcontracting Activity" := BudgetLineRec."Subcontracting Activity";
              PurchLineRec.VALIDATE("Purchase Action", BudgetLineRec."Purchase Action");
              PurchLineRec."Purchase Phase" := BudgetLineRec."Purchase Phase";
              PurchLineRec."Cost Type" := BudgetLineRec."Cost Type" + 1;
              PurchLineRec."Shortcut Dimension 2 Code" := BudgetLineRec."Cost Object";
              IF BudgetLineRec."Cost Object" <> '' THEN
                DimMgt.GetDimValueRec(2, BudgetLineRec."Cost Object", DimValRec, TRUE, BudgetLineRec."Project No.")
              ELSE
                IsEmptyCostObject := TRUE;

              //C055996.sn: synchronised with function CreatePurchaseLine from AdviceOrder (codeunit 11012041)
              UnitFactor := 1;
              BudgetLineRec2 := BudgetLineRec;
              IF PurchHeaderRec."Amounts only" THEN BEGIN
                BudgetLineRec2.TESTFIELD("Item No.", '');
                BudgetLineRec2.TESTFIELD("Basic Item", '');
                BudgetLineRec2.TESTFIELD("Trade Item", '');
                BudgetLineRec2."Price Agreement" := TRUE;
                BudgetLineRec2.Quantity := 0;
                IF BudgetLineRec2."Currency Code" <> '' THEN
                  BudgetLineRec2."Price (FCY)" := CompressedTotal
                ELSE
                  BudgetLineRec2."Price (LCY)" := CompressedTotal;
              END ELSE BEGIN
                BudgetLineRec2.Quantity := CompressedTotal;
                IF (BudgetLineRec."Cost Type" = BudgetLineRec."Cost Type"::Subcontracting) OR
                   (BudgetLineRec."Cost Type" = BudgetLineRec."Cost Type"::Plant) THEN BEGIN
                  IF BudgetLineRec.Norm <> 0 THEN BEGIN
                    BudgetLineRec2."Price Agreement" := TRUE;
                    BudgetLineRec2."Price (LCY)" := BudgetLineRec."Price (LCY)" * BudgetLineRec.Norm;
                    BudgetLineRec2."Price (FCY)" := BudgetLineRec."Price (FCY)" * BudgetLineRec.Norm;
                    BudgetLineRec2.Norm := 0;
                  END;
                END;
              END;
              IF BudgetLineRec."Trade Item" <> '' THEN BEGIN
                TradeItemRec.GET(BudgetLineRec."Vendor (Trade Item)", BudgetLineRec."Trade Item");
                IF BudgetLineRec."Unit of Measure" = UPPERCASE(TradeItemRec."Packaging Unit") THEN BEGIN
                  UnitFactor := TradeItemRec."Qty. per Unit of Measure";
                  BaseUnit := TradeItemRec."Application Unit";
                END;
              END ELSE BEGIN
                IF BudgetLineRec."Item No." <> '' THEN BEGIN
                  ItemRec.GET(BudgetLineRec."Item No.");
                  ItemUnitRec.GET(BudgetLineRec."Item No.", BudgetLineRec."Unit of Measure");
                  UnitFactor := ItemUnitRec."Qty. per Unit of Measure";
                  BaseUnit := ItemRec."Base Unit of Measure";
                END ELSE BEGIN
                  BudgetLineRec2."Price Agreement" := TRUE;  //C061298
                END;
              END;
              IF (UnitFactor <> 0) AND (UnitFactor <> 1) THEN BEGIN
                BudgetQuantity := BudgetLineRec.Quantity * UnitFactor;
                BudgetLineRec2.Quantity := BudgetQuantity;
                BudgetLineRec2."Unit of Measure" := BaseUnit;
                BudgetLineRec2."Price (LCY)" := BudgetLineRec."Price (LCY)" / UnitFactor;
                BudgetLineRec2."Price (FCY)" := BudgetLineRec."Price (FCY)" / UnitFactor;
              END;
              //assign Vendor+TradeItem (dirty solution copied from codeunit 333: required for check at validate quantity)
              PurchLineRec."Vendor (Trade Item)" := BudgetLineRec2."Vendor (Trade Item)";
              PurchLineRec."Trade Item" := BudgetLineRec2."Trade Item";
              PurchLineRec.VALIDATE("Unit of Measure Code", BudgetLineRec2."Unit of Measure");
              PurchLineRec.VALIDATE(Quantity, BudgetLineRec2.Quantity);
              PurchLineRec."Price Agreement" := BudgetLineRec2."Price Agreement";
              //C055996.en

              IF BudgetLineRec."Cost Type" = BudgetLineRec."Cost Type"::Material THEN BEGIN
                PurchLineRec."Item No." := BudgetLineRec."Item No.";
                PurchLineRec.Manufacturer := BudgetLineRec.Manufacturer;
                PurchLineRec."Basic Item" := BudgetLineRec."Basic Item";
                PurchLineRec."Vendor (Trade Item)" := BudgetLineRec."Vendor (Trade Item)";
                PurchLineRec."Trade Item" := BudgetLineRec."Trade Item";
                //C054852.sn: change validate-sequence
                IF BudgetLineRec."Trade Item" <> '' THEN BEGIN
                  PurchLineRec."Trade Item" := '';
                  PurchLineRec.VALIDATE("Trade Item", BudgetLineRec."Trade Item");
                END ELSE BEGIN
                  IF BudgetLineRec."Basic Item" <> '' THEN BEGIN
                    PurchLineRec."Basic Item" := '';
                    PurchLineRec.VALIDATE("Basic Item", BudgetLineRec."Basic Item");
                  END ELSE BEGIN
                    IF BudgetLineRec."Item No." <> '' THEN BEGIN
                      PurchLineRec."Item No." := '';  //check on xRec in validate itemdata
                      PurchLineRec.VALIDATE("Item No.", BudgetLineRec."Item No.");
                    END;
                  END;
                END;
                //C054852.en
              END;
              PurchLineRec.VALIDATE("Shortcut Dimension 2 Code", BudgetLineRec."Cost Object");

              //C055996.sn: synchronised with function CreatePurchaseLine from AdviceOrder (codeunit 11012041)
              IF BudgetLineRec2."Price Agreement" THEN BEGIN
                //evaluate price agreement (from quote or manual) reset by validate item-data
                IF BudgetLineRec2."Currency Code" <> '' THEN BEGIN
                  VendorPrice :=  BudgetLineRec2."Price (FCY)" *  PurchLineRec."Qty. per Unit of Measure";
                END ELSE BEGIN
                  BudgetLineRec2."Price (LCY)" :=  BudgetLineRec2."Price (LCY)" *  PurchLineRec."Qty. per Unit of Measure";
                  VendorPrice := BudgetLineRec2.GetVendorPrice(BudgetLineRec2.Vendor, BudgetLineRec2."Price (LCY)", BudgetLineRec2."Currency Code");
                END;
                IF PurchHeaderRec."Prices Including VAT" THEN
                  PurchLineRec.VALIDATE("Direct Unit Cost", VendorPrice * (1 + PurchLineRec."VAT %" / 100))
                ELSE
                  PurchLineRec.VALIDATE("Direct Unit Cost", VendorPrice);
                PurchLineRec."Discount % (Item)" := BudgetLineRec2."Discount %";
                IF (1 - BudgetLineRec2."Discount %" / 100) <> 0 THEN
                  PurchLineRec."Unit Price (LCY)" := PurchLineRec."Unit Cost (LCY)" / (1 - BudgetLineRec2."Discount %" / 100);
                IF PurchLineRec."Unit Price (LCY)" = 0 THEN
                  PurchLineRec."Unit Price (LCY)" := PurchLineRec."Unit Cost (LCY)";
              END;
              //C055996.en

              IF BudgetLineRec."Trade Item" + BudgetLineRec."Basic Item" + BudgetLineRec."Item No." = '' THEN
                PurchLineRec."Unit of Measure Code" := BudgetLineRec."Unit of Measure";  //C005537
              PurchLineRec."Posting Date" := PurchHeaderRec."Posting Date";

              IF NOT ProjElemRec.GET(PurchLineRec."Job No.", PurchLineRec.Element) THEN ProjElemRec.INIT;
              IF ProjElemRec."Starting Date" <= TODAY THEN
                PurchLineRec.VALIDATE("Expected Receipt Date", TODAY)
              ELSE
                PurchLineRec.VALIDATE("Expected Receipt Date", ProjElemRec."Starting Date"-1);

              PurchLineRec."Cost Component" := BudgetLineRec."Cost Component";
              PurchLineRec."Variant Code" := BudgetLineRec."Variant Code";
              PurchLineRec."FSC Type Code" := BudgetLineRec."FSC Type Code";

              PurchLineRec.Description := BudgetLineRec.Description;
              PurchLineRec."Description 2" := BudgetLineRec."Description 2";
              PurchLineRec.VALIDATE(Text, BudgetLineRec."External Text");

              PurchLineRec.SuspendUpdateAmounts(FALSE);  //C011532
              PurchLineRec.UpdateAmounts;
              //
              IF PurchHeaderRec."Amounts only" THEN
                PurchLineRec.InitAmntToReceive;

              IF BudgetLineRec."Purchase Route Reference" = '' THEN BEGIN
                IF LastRefNo = '' THEN
                  LastRefNo := RouteRefMgt.GetLastRefNo();
                LastRefNo := INCSTR(LastRefNo);
                BudgetLineRec."Purchase Route Reference" := LastRefNo;
                BudgetLineRec.MODIFY;
              END;
              PurchLineRec."Purchase Route Reference" := BudgetLineRec."Purchase Route Reference";
              UpdateTmpBudgetLines(BudgetLineWithSamePropertyFilters, PurchLineRec);

              PurchLineRec."Modified by" := USERID;
              PurchLineRec."Last Date Modified" := TODAY;
              PurchLineRec."Comments for Logistics" := BudgetLineRec."Comments for Logistics";
              PurchLineRec.MODIFY;
              PurchLineRec.CreatePurchOrderControl(FALSE);
              CopyPurchaseLineDetail;
              IF PurchLineRec."Document Type" = PurchLineRec."Document Type"::Order THEN BEGIN
                PurchaseOrderNo := PurchLineRec."Document No.";
                PurchaseOrderLineNo := PurchLineRec."Line No.";
              END ELSE BEGIN
                PurchaseOrderNo := '';
                PurchaseOrderLineNo := 0;
              END;
            END;
          END ELSE BEGIN
            BudgetLineRec."Purchase Route Reference" := TmpBudgetLineRec."Purchase Route Reference";
            BudgetLineRec.MODIFY;
            PurchaseOrderNo := TmpBudgetLineRec."Purchase Order No.";
            PurchaseOrderLineNo := TmpBudgetLineRec."Purchase Order Line No.";
          END;

          IF ICloseBudgetLine THEN BEGIN
            BudgetLineRec.Advised := TRUE;
            BudgetLineRec."Purchase Order No." := PurchaseOrderNo;
            BudgetLineRec."Purchase Order Line No." := PurchaseOrderLineNo;
            BudgetLineRec.MODIFY;
          END;
          CopyCommentLines(BudgetLineRec, PurchLineRec);  //DP01337
        UNTIL BudgetLineRec.NEXT = 0;
        IF IsEmptyCostObject AND GUIALLOWED THEN
          MESSAGE(Text007);
        IF (LastRefNo <> '') THEN
          RouteRefMgt.WriteLastRefNo(LastRefNo);
      END;
    END;

    [External]
    PROCEDURE InsertOptionBudget@1100525001(IOptionBudgetRec@1210190000 : Record 11012503);
    BEGIN
      OptionRec.GET(IOptionBudgetRec."Project No.",IOptionBudgetRec."Plot No.",IOptionBudgetRec."House Model",
       IOptionBudgetRec."Main Group",IOptionBudgetRec.Group,IOptionBudgetRec."Sub Group", IOptionBudgetRec.Option);

      OptionBudgetRec.LOCKTABLE;
      OptionBudgetRec.SETRANGE("Project No.",IOptionBudgetRec."Project No.");
      OptionBudgetRec.SETRANGE("Plot No.",IOptionBudgetRec."Plot No.");
      OptionBudgetRec.SETRANGE("House Model",IOptionBudgetRec."House Model");
      OptionBudgetRec.SETRANGE("Main Group",IOptionBudgetRec."Main Group");
      OptionBudgetRec.SETRANGE(Group,IOptionBudgetRec.Group);
      OptionBudgetRec.SETRANGE("Sub Group",IOptionBudgetRec."Sub Group");
      OptionBudgetRec.SETRANGE(Option,IOptionBudgetRec.Option);

      IF OptionBudgetRec.FINDLAST THEN
        NextLineNo := OptionBudgetRec."Line No."
      ELSE
        NextLineNo := 0;

      IF BudgetLineRec.FINDSET(FALSE, FALSE) THEN BEGIN
        REPEAT

          OptionBudgetRec.INIT;
          NextLineNo := NextLineNo + 10000;
          OptionBudgetRec."Project No." := IOptionBudgetRec."Project No.";
          OptionBudgetRec."Plot No." := IOptionBudgetRec."Plot No.";
          OptionBudgetRec."House Model" := IOptionBudgetRec."House Model";
          OptionBudgetRec."Main Group" := IOptionBudgetRec."Main Group";
          OptionBudgetRec.Group := IOptionBudgetRec.Group;
          OptionBudgetRec."Sub Group" := IOptionBudgetRec."Sub Group";
          OptionBudgetRec.Option := IOptionBudgetRec.Option;
          OptionBudgetRec."Line No." := NextLineNo;
          OptionBudgetRec.INSERT;

          WITH BudgetLineRec DO BEGIN
            OptionBudgetRec."Source Type" := "Option Line Type";
            OptionBudgetRec."Cost Type" := "Cost Type";
            OptionBudgetRec."Cost Object" := "Cost Object";
            OptionBudgetRec."Cost Component" := "Cost Component";
            OptionBudgetRec.Element := Element;
            OptionBudgetRec.Chapter := Chapter;
            OptionBudgetRec.Paragraph := Paragraph;
            OptionBudgetRec."Item No." := "Item No.";
            OptionBudgetRec."Basic Item" := "Basic Item";
            OptionBudgetRec.Manufacturer := Manufacturer;
            OptionBudgetRec."Trade Item" := "Trade Item";
            OptionBudgetRec."Vendor (Trade Item)" := "Vendor (Trade Item)";
            OptionBudgetRec.Description := Description;
            OptionBudgetRec."Description 2" := "Description 2";
            OptionBudgetRec."Unit of Measure" := "Unit of Measure";
            OptionBudgetRec."Unit of Time" := "Unit of Time";
            OptionBudgetRec.Quantity := Quantity;
            OptionBudgetRec."Time Quantity" := "Time Quantity";
            OptionBudgetRec.Amount := "Amount (LCY)";
            OptionBudgetRec.Norm := Norm;
            OptionBudgetRec."Rate Code" := "Rate Code";
            OptionBudgetRec.Rate := "Rate (LCY)";
            OptionBudgetRec.Hours := Hours;
            OptionBudgetRec.Price := "Price (LCY)";
            OptionBudgetRec."Gross Price" := "Gross Price (LCY)";
            OptionBudgetRec."Discount %" := "Discount %";
            OptionBudgetRec."Recipe Group" := "Recipe Group";
            OptionBudgetRec.Recipe := Recipe;
            OptionBudgetRec."Location Code (CUF)" := "Location Code (CUF)";  //C054894
          END;

          OptionBudgetRec.MODIFY;
        UNTIL BudgetLineRec.NEXT = 0;
      END;
    END;

    [External]
    PROCEDURE InsertPlantRequest@1210190006(IPlantRequestLine@1210190000 : Record 11020521);
    VAR
      PlantRequestLine@1210190002 : Record 11020521;
      NextLineNo@1210190003 : Integer;
    BEGIN
      PlantRequestLine.LOCKTABLE;
      PlantRequestLine.SETRANGE("Plant Request No.", IPlantRequestLine."Plant Request No.");

      IF PlantRequestLine.FINDLAST THEN
        NextLineNo := PlantRequestLine."Line No."
      ELSE
        NextLineNo := 0;

      IF BudgetLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          IF ((BudgetLineRec."Cost Type" = BudgetLineRec."Cost Type"::Material) AND (BudgetLineRec."Item No." <> '')) OR
             ((BudgetLineRec."Cost Type" = BudgetLineRec."Cost Type"::Plant) AND (BudgetLineRec."Plant Type" <> '') AND (BudgetLineRec."Plant Company" = ''))
          THEN BEGIN
            PlantRequestLine.INIT;
            NextLineNo += 10000;
            PlantRequestLine."Plant Request No." := IPlantRequestLine."Plant Request No.";
            PlantRequestLine.InitRecord;
            PlantRequestLine."Line No." := NextLineNo;
            CASE BudgetLineRec."Cost Type" OF
              BudgetLineRec."Cost Type"::Material:
                BEGIN
                  PlantRequestLine.VALIDATE(Type, PlantRequestLine.Type::Item);
                  PlantRequestLine.VALIDATE("Item No.", BudgetLineRec."Item No.");
                END;
              BudgetLineRec."Cost Type"::Plant:
                BEGIN
                  PlantRequestLine.VALIDATE(Type, PlantRequestLine.Type::Plant);
                  PlantRequestLine.VALIDATE("Plant Type", BudgetLineRec."Plant Type");
                END;
            END;
            PlantRequestLine.VALIDATE(Quantity, BudgetLineRec.Quantity);
            PlantRequestLine.VALIDATE(Element, BudgetLineRec.Element);
            PlantRequestLine.INSERT(TRUE);

            BudgetLineRec.Advised := TRUE;
            BudgetLineRec.MODIFY;
          END;
        UNTIL BudgetLineRec.NEXT = 0;
      END;
    END;

    [External]
    PROCEDURE InsertPlantOrder@1210190007(IPlantOrder@1210190000 : Record 11012556);
    VAR
      PlantOrderLine@1210190001 : Record 11012557;
    BEGIN
      PlantOrderLine.LOCKTABLE;
      PlantOrderLine.SETRANGE("Plant Order No.", IPlantOrder."No.");
      IF PlantOrderLine.FINDLAST THEN
        NextLineNo := PlantOrderLine."Line No."
      ELSE
        NextLineNo := 0;

      BudgetLineRec.SETFILTER("Cost Type", '%1|%2', BudgetLineRec."Cost Type"::Plant, BudgetLineRec."Cost Type"::Material);
      IF BudgetLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          CASE BudgetLineRec."Cost Type" OF
            BudgetLineRec."Cost Type"::Plant:
              BEGIN
                IF (BudgetLineRec."Plant Type" <> '') AND (BudgetLineRec."Plant Company" = '') THEN BEGIN
                  PlantOrderLine.INIT;
                  NextLineNo += 10000;
                  PlantOrderLine."Plant Order No." := IPlantOrder."No.";
                  PlantOrderLine."Line No." := NextLineNo;
                  PlantOrderLine.VALIDATE(Type, PlantOrderLine.Type::Plant);
                  PlantOrderLine.VALIDATE("Plant Type", BudgetLineRec."Plant Type");
                  PlantOrderLine.VALIDATE("Asked Quantity", BudgetLineRec.Quantity);
                  PlantOrderLine.VALIDATE("From Location", IPlantOrder."From Location");
                  PlantOrderLine.VALIDATE(Element, BudgetLineRec.Element);
                  PlantOrderLine.INSERT(TRUE);
                END;
              END;
            BudgetLineRec."Cost Type"::Material:
              BEGIN
                IF BudgetLineRec."Item No." <> '' THEN BEGIN
                  PlantOrderLine.INIT;
                  NextLineNo += 10000;
                  PlantOrderLine."Plant Order No." := IPlantOrder."No.";
                  PlantOrderLine."Line No." := NextLineNo;
                  PlantOrderLine.VALIDATE(Type, PlantOrderLine.Type::Item);
                  PlantOrderLine.SetNoInventoryWarning(TRUE);
                  PlantOrderLine.VALIDATE("Item No.", BudgetLineRec."Item No.");
                  PlantOrderLine.VALIDATE("Asked Quantity", BudgetLineRec.Quantity);
                  PlantOrderLine.VALIDATE(Element, BudgetLineRec.Element);
                  PlantOrderLine.INSERT(TRUE);
                END;
              END;
          END;
          BudgetLineRec.Advised := TRUE;
          BudgetLineRec.MODIFY;
        UNTIL BudgetLineRec.NEXT = 0;
      END;
    END;

    [External]
    PROCEDURE CheckSameProperty@1100485002(VAR lvBudgetLine@1100528400 : Record 11012001) SubTotal : Decimal;
    BEGIN
      IF PurchHeaderRec."Amounts only" THEN
        SubTotal := BudgetLineRec."Amount (LCY)"
      ELSE
        SubTotal := BudgetLineRec.Quantity * BudgetLineRec."Time Quantity";

      lvBudgetLine.RESET;
      lvBudgetLine.COPY(BudgetLineRec);

      lvBudgetLine.SETRANGE("Project No.", BudgetLineRec."Project No.");
      lvBudgetLine.SETRANGE(Element, BudgetLineRec.Element);
      lvBudgetLine.SETRANGE("Extension Contract", BudgetLineRec."Extension Contract");
      lvBudgetLine.SETRANGE("Plot No.", BudgetLineRec."Plot No.");
      //lvBudgetLine.SETRANGE(Adjustment, BudgetLineRec.Adjustment); //melding 7743 (april/mei 2007)
      lvBudgetLine.SETRANGE("Item No.", BudgetLineRec."Item No.");
      lvBudgetLine.SETRANGE("Basic Item", BudgetLineRec."Basic Item");
      lvBudgetLine.SETRANGE(Manufacturer, BudgetLineRec.Manufacturer);
      lvBudgetLine.SETRANGE("Trade Item", BudgetLineRec."Trade Item");
      lvBudgetLine.SETRANGE("Vendor (Trade Item)", BudgetLineRec."Vendor (Trade Item)");
      lvBudgetLine.SETRANGE("Cost Object", BudgetLineRec."Cost Object");
      lvBudgetLine.SETRANGE("Cost Component", BudgetLineRec."Cost Component");

      lvBudgetLine.SETRANGE(Description, BudgetLineRec.Description);
      lvBudgetLine.SETRANGE("Description 2", BudgetLineRec."Description 2");
      lvBudgetLine.SETRANGE("Unit of Measure", BudgetLineRec."Unit of Measure");
      lvBudgetLine.SETRANGE("Purchase Action", BudgetLineRec."Purchase Action");
      lvBudgetLine.SETRANGE("Purchase Route Reference", BudgetLineRec."Purchase Route Reference");
      lvBudgetLine.SETRANGE("Price Agreement", BudgetLineRec."Price Agreement");
      IF BudgetLineRec.Vendor <> '' THEN
        lvBudgetLine.SETRANGE(Vendor, BudgetLineRec.Vendor);
      lvBudgetLine.SETRANGE("External Text", BudgetLineRec."External Text");
      lvBudgetLine.SETRANGE("Tender Paragraph",BudgetLineRec."Tender Paragraph");
      lvBudgetLine.SETRANGE("Purchase Route Reference", BudgetLineRec."Purchase Route Reference");
      lvBudgetLine.SETRANGE("FSC Type Code", BudgetLineRec."FSC Type Code");
      lvBudgetLine.SETRANGE("Currency Code", BudgetLineRec."Currency Code");
      //C055996.sn
      IF BudgetLineRec."Currency Code" <> '' THEN
        lvBudgetLine.SETRANGE("Price (FCY)", BudgetLineRec."Price (FCY)")
      ELSE
        lvBudgetLine.SETRANGE("Price (LCY)", BudgetLineRec."Price (LCY)");
      lvBudgetLine.SETRANGE("Subcontracting in Hours", BudgetLineRec."Subcontracting in Hours");
      lvBudgetLine.SETRANGE("Plant Rates in Hours", BudgetLineRec."Plant Rates in Hours");
      //C055996.en
      //lvBudgetLine.SETFILTER("Line No.", '<>%1', BudgetLineRec."Line No.");
      //* 21-06-2007: Voor melding 7743 (18-04-2006) is al eens een aanpassing gedaan dat er geen filter meer
      //* wordt gezet op de correctiecode (Adjustment), zie hierboven. Maar het zetten van een filter op "Line No."
      //* kan ook niet want de correctiecode zit in de index, zodat deze hetzelfde regelnummer kan hebben.
      //* Index 1 bestaat uit de velden "Project No.", Adjustment, Extension Contract, Option en "Line No.".
      //* Dus geen filter op regelnummer maar testen of niet gelijk aan huidig record, hierbij hoeft dan alleen
      //* nog getest te worden of de keyvelden waarop geen filter is gezet, dus Adjustment, Option en "Line No."
      IF lvBudgetLine.FINDSET(FALSE, FALSE) THEN BEGIN
        REPEAT
          IF (lvBudgetLine.Adjustment <> BudgetLineRec.Adjustment) OR
             (lvBudgetLine.Option <> BudgetLineRec.Option) OR
             (lvBudgetLine."Line No." <> BudgetLineRec."Line No.")
          THEN BEGIN
            TmpBudgetLineRec := lvBudgetLine;
            IF TmpBudgetLineRec.INSERT THEN;

            IF PurchHeaderRec."Amounts only" THEN BEGIN
              IF BudgetLineRec."Currency Code" <> '' THEN  //DP00885
                SubTotal := SubTotal + lvBudgetLine."Amount (FCY)"
              ELSE
                SubTotal := SubTotal + lvBudgetLine."Amount (LCY)";
            END ELSE BEGIN
              SubTotal := SubTotal + lvBudgetLine.Quantity * lvBudgetLine."Time Quantity";
            END;
          END;
        UNTIL lvBudgetLine.NEXT = 0;
      END;

      EXIT(SubTotal);
    END;

    [External]
    PROCEDURE CopyLinesToNewOrder@1100485000(iProjPurchActionRec@1100485000 : Record 11012026);
    VAR
      lvNoSeries@1100485001 : Code[10];
      lvPurchHeadRec@1100485002 : Record 38;
      lvPurchLineRec@1100485003 : Record 39;
      lvPurchActVendRec@1100485005 : Record 11012068;
      lvContRec@1100485006 : Record 5050;
      lvPurchaserRec@1100485007 : Record 13;
      PurchActDocRec@1100525001 : Record 11012071;
      DocRelRec@1100525000 : Record 11012407;
      TenderParagraphRec@1100525002 : Record 11012072;
      TenderParagraphRec2@1100525003 : Record 11012072;
      DocumentProperties@1100528400 : Record 11012746;
      FirstOrder@1100525004 : Code[20];
      LastOrder@1100525005 : Code[20];
    BEGIN
      IF iProjPurchActionRec.Status < iProjPurchActionRec.Status::Approved THEN
        ERROR(Text001);

      iProjPurchActionRec.CheckIfNoConsentLinesAvailable;

      //DP00885.sn
      FillGenericTempTable(iProjPurchActionRec);
      IF GenericTempTable.FINDSET THEN BEGIN
        REPEAT
      //DP00885.en
          //first insert the new order header
          lvPurchHeadRec.INIT;
          lvPurchHeadRec."Document Type" := lvPurchHeadRec."Document Type"::Order;
          lvPurchHeadRec.CheckAskForNoSeries(lvPurchHeadRec."Document Type"::Order, lvNoSeries);
          lvPurchHeadRec."No. Series" := lvNoSeries;
          lvPurchHeadRec."No." := '';  //DP00885
          lvPurchHeadRec.GetNoForSelectedNoSeries(lvPurchHeadRec);
          lvPurchHeadRec."Input by" := USERID;
          lvPurchHeadRec."Input Date" := TODAY;
          lvPurchHeadRec.INSERT(TRUE);
          //
          lvPurchHeadRec."Job No." := iProjPurchActionRec."Project No.";
          lvPurchHeadRec."Purchase Action" := iProjPurchActionRec.Code;
          IF NOT lvPurchActVendRec.PreferredVendorPresent(iProjPurchActionRec."Project No.", iProjPurchActionRec.Code) THEN  //DP00885
            ERROR(Text000);
          IF (lvPurchActVendRec.Type <> lvPurchActVendRec.Type::Contact) THEN
            lvPurchHeadRec.VALIDATE("Buy-from Vendor No.",lvPurchActVendRec."Vendor No.")
          ELSE
            lvPurchHeadRec.VALIDATE("Buy-from Contact No.",lvPurchActVendRec."Vendor No.");
          IF lvPurchActVendRec.Contact <> '' THEN BEGIN
            lvPurchHeadRec."Buy-from Contact" := lvPurchActVendRec.Contact;
            IF lvPurchActVendRec."Contact Person No." <> '' THEN BEGIN
              IF lvContRec.GET(lvPurchActVendRec."Contact Person No.") THEN BEGIN
                IF (lvContRec.Name = lvPurchActVendRec.Contact) THEN
                  lvPurchHeadRec."Buy-from Contact Person No." := lvPurchActVendRec."Contact Person No.";
              END;
            END;
          END;
          //DP00885.sn
          IF (GenericTempTable."Key Code3" <> '') AND (GenericTempTable."Key Code3" <> lvPurchHeadRec."Currency Code") THEN
            lvPurchHeadRec.VALIDATE("Currency Code", GenericTempTable."Key Code3");
          //DP00885.en
          lvPurchHeadRec."Amounts only" := iProjPurchActionRec."Amounts Only";  //C020772.n
          lvPurchHeadRec."Requested Receipt Date" := iProjPurchActionRec."Requested Quote Receipt Date";
          lvPurchHeadRec."Vendors react before" := iProjPurchActionRec."Vendors react before";
          IF iProjPurchActionRec."Responsible Employee" <> '' THEN
            IF lvPurchaserRec.GET(iProjPurchActionRec."Responsible Employee") THEN
              lvPurchHeadRec."Purchaser Code" := iProjPurchActionRec."Responsible Employee";
          lvPurchHeadRec.VALIDATE("Ship-to Project", lvPurchHeadRec."Job No.");
          lvPurchHeadRec."Modified by" := USERID;
          lvPurchHeadRec."Last Date Modified" := TODAY;
          lvPurchHeadRec.MODIFY(TRUE);
          CopyTextLines(iProjPurchActionRec,lvPurchHeadRec."No.");
          //
          //secondly create the lines
          lvPurchLineRec.INIT;
          lvPurchLineRec."Document Type" := lvPurchHeadRec."Document Type"::Order;
          lvPurchLineRec."Document No." := lvPurchHeadRec."No.";
          CopyLines(iProjPurchActionRec, lvPurchLineRec, TRUE, TRUE, GenericTempTable."Key Code3", lvPurchHeadRec."Currency Code");  //DP00885
          //
          //Copy Document Relations & Tender Paragraphs
          PurchActDocRec.SETRANGE(Source, PurchActDocRec.Source::Project);
          PurchActDocRec.SETRANGE("Project No.", iProjPurchActionRec."Project No.");
          PurchActDocRec.SETRANGE("Purchase Action", iProjPurchActionRec.Code);
          IF PurchActDocRec.FINDSET THEN BEGIN
            REPEAT
              DocRelRec.INIT;
              DocRelRec."Document Type" := DocRelRec."Document Type"::"Purchase Order";
              DocRelRec."No." := lvPurchHeadRec."No.";
              DocRelRec.Description := PurchActDocRec.Description;
              DocRelRec."Description 2" := PurchActDocRec."Description 2";
              DocRelRec.Quantity := PurchActDocRec.Quantity;
              DocRelRec."Related Document No." := PurchActDocRec."Related Document No.";
              PurchActDocRec.CALCFIELDS("Document No.");
              DocRelRec."Document No." := PurchActDocRec."Document No.";
              DocRelRec."Send by E-Mail" := TRUE;
              IF DocumentProperties.GET(DocRelRec."Related Document No.") THEN
                IF DocumentProperties.FileCanBeConvertedToPDF THEN
                  DocRelRec.Print := TRUE;
              DocRelRec.INSERT(TRUE);
              //
              TenderParagraphRec.SETRANGE(Type, TenderParagraphRec.Type::PurchAction);
              TenderParagraphRec.SETRANGE("No.", iProjPurchActionRec."Project No.");
              TenderParagraphRec.SETRANGE("Purchase Action",iProjPurchActionRec.Code);
              TenderParagraphRec.SETRANGE("Document No.", PurchActDocRec."Related Document No.");
              IF TenderParagraphRec.FINDSET THEN BEGIN
                REPEAT
                  TenderParagraphRec2.COPY(TenderParagraphRec);
                  TenderParagraphRec2.Type := TenderParagraphRec2.Type::Order;
                  TenderParagraphRec2."No." := lvPurchHeadRec."No.";
                  TenderParagraphRec2."Document No." := PurchActDocRec."Related Document No.";
                  TenderParagraphRec2."Purchase Action" := '';
                  TenderParagraphRec2.INSERT;
                UNTIL TenderParagraphRec.NEXT = 0;
              END;
            UNTIL PurchActDocRec.NEXT = 0;
          END;
          IF FirstOrder = '' THEN
            FirstOrder := lvPurchHeadRec."No.";
          LastOrder := lvPurchHeadRec."No.";
        UNTIL GenericTempTable.NEXT = 0;
      END;

      IF PurchLineCounter > 0 THEN BEGIN
        IF LastOrder <> FirstOrder THEN
          MESSAGE(Text002, FirstOrder + '..' + LastOrder)
        ELSE
          MESSAGE(Text002, lvPurchHeadRec."No.")
      END ELSE BEGIN
        ERROR(Text003);
      END;
    END;

    [External]
    PROCEDURE CopyTextLines@1210190003(iProjPurchActionRec@1100525000 : Record 11012026;PurchHeaderNo@1100525001 : Code[20]);
    VAR
      PurchActTextRec@1210190001 : Record 11012067;
      PurchActText1Rec@1210190002 : Record 11012067;
    BEGIN
      PurchActTextRec.SETRANGE("Line Type",PurchActTextRec."Line Type"::"Project Purchase Action");
      PurchActTextRec.SETRANGE("No.",iProjPurchActionRec."Project No.");
      PurchActTextRec.SETRANGE("Purchase Action",iProjPurchActionRec.Code);
      IF PurchActTextRec.FINDSET THEN BEGIN
        REPEAT
          PurchActText1Rec.COPY(PurchActTextRec);
          PurchActText1Rec."Line Type" := PurchActText1Rec."Line Type"::"Purchase Order";
          PurchActText1Rec."Purchase Action" := '';
          PurchActText1Rec."No." := PurchHeaderNo;
          PurchActText1Rec.INSERT;
        UNTIL PurchActTextRec.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE UpdateTmpBudgetLines@1100528402(VAR BudgetLineWithSamePropertyFilters@1100528400 : Record 11012001;PurchaseLine@1100528402 : Record 39);
    BEGIN
      IF BudgetLineWithSamePropertyFilters.FINDSET THEN
        REPEAT
          IF TmpBudgetLineRec.GET(
            BudgetLineWithSamePropertyFilters."Project No.",
            BudgetLineWithSamePropertyFilters.Adjustment,
            BudgetLineWithSamePropertyFilters."Extension Contract",
            BudgetLineWithSamePropertyFilters.Option,
            BudgetLineWithSamePropertyFilters."Line No.")
          THEN BEGIN
            IF PurchaseLine."Document Type" = PurchLineRec."Document Type"::Order THEN BEGIN
              TmpBudgetLineRec."Purchase Order No." := PurchaseLine."Document No.";
              TmpBudgetLineRec."Purchase Order Line No." := PurchaseLine."Line No.";
              TmpBudgetLineRec.MODIFY;
            END;
            IF PurchaseLine."Purchase Route Reference" <> '' THEN BEGIN
              TmpBudgetLineRec."Purchase Route Reference" := PurchaseLine."Purchase Route Reference";
              TmpBudgetLineRec.MODIFY;
            END;
          END;
        UNTIL BudgetLineWithSamePropertyFilters.NEXT = 0;
    END;

    LOCAL PROCEDURE FillGenericTempTable@1100525002(ProjectPurchaseAction@1100525000 : Record 11012026);
    VAR
      BudgetLine@1100525001 : Record 11012001;
    BEGIN
      //DP00885
      BudgetLine.SETCURRENTKEY("Project No.", "Purchase Action");
      BudgetLine.SETRANGE("Project No.", ProjectPurchaseAction."Project No.");
      BudgetLine.SETRANGE("Purchase Action", ProjectPurchaseAction.Code);
      BudgetLine.SETRANGE(Advised, FALSE);  //db, 06-02-20
      IF BudgetLine.FINDSET THEN BEGIN
        REPEAT
          IF BudgetLine."Cost Type" = BudgetLine."Cost Type"::Labor THEN BEGIN
            BudgetLine.FIELDERROR("Cost Type");  //db, 07-02-20
            //due to removed filter on CostType when selecting BudgetLines for Purchase Action
            //CostType Labor can be adjusted to Subcontracting in PurchaseAction, but not processed for Purchase while this procedure is based on Price
          END;
          GenericTempTable.INIT;
          GenericTempTable."Key Code1" := BudgetLine."Project No.";
          GenericTempTable."Key Code2" := BudgetLine."Purchase Action";
          GenericTempTable."Key Code3" := BudgetLine."Currency Code";
          IF GenericTempTable.INSERT THEN;
        UNTIL BudgetLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CheckTextLine@1100528901(BudgetLine@1100528900 : Record 11012001) : Boolean;
    BEGIN
      //DP01267
      WITH BudgetLine DO BEGIN
        IF (Quantity <> 0) OR ("Amount (LCY)" <> 0) OR ("Amount (FCY)" <> 0) THEN
          EXIT(FALSE);
        IF ("Item No." <> '') OR ("Basic Item" <> '') OR ("Trade Item" <> '') THEN
          EXIT(FALSE);
        IF ("Plant Type" <> '') THEN
          EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CopyCommentLines@1100528909(BudgetLine@1100528900 : Record 11012001;PurchaseLine@1100528901 : Record 39);
    VAR
      CommentLineFrom@1100529803 : Record 11020634;
      PurchCommentLine@1100529804 : Record 43;
      RecRef@1100529806 : RecordRef;
      LineNo@1100529805 : Integer;
    BEGIN
      //DP01267
      RecRef.GETTABLE(BudgetLine);

      CommentLineFrom.SETRANGE("Table Name", CommentLineFrom."Table Name"::Budget);
      CommentLineFrom.SETFILTER("Record ID", FORMAT(RecRef.RECORDID()));
      IF CommentLineFrom.FINDSET THEN BEGIN
        PurchCommentLine.RESET;
        PurchCommentLine.SETRANGE("Document Type", PurchaseLine."Document Type");
        PurchCommentLine.SETRANGE("No.", PurchaseLine."Document No.");
        PurchCommentLine.SETRANGE("Document Line No.", PurchaseLine."Line No.");
        IF PurchCommentLine.FINDLAST THEN
          LineNo := PurchCommentLine."Line No." + 10000
        ELSE
          LineNo := 10000;

        REPEAT
          PurchCommentLine.INIT;
          PurchCommentLine."Document Type" := PurchaseLine."Document Type";
          PurchCommentLine."No." := PurchaseLine."Document No.";
          PurchCommentLine."Document Line No." := PurchaseLine."Line No.";
          PurchCommentLine."Line No." := LineNo;
          PurchCommentLine.Date := CommentLineFrom.Date;
          PurchCommentLine.Code := CommentLineFrom.Code;
          PurchCommentLine.Comment := CommentLineFrom.Comment;
          PurchCommentLine."Line Break" := CommentLineFrom."Line Break";
          PurchCommentLine."Created by" := CommentLineFrom."Created by";
          PurchCommentLine.INSERT(TRUE);
          LineNo += 10000
        UNTIL CommentLineFrom.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CopyPurchaseLineDetail@1100529600();
    VAR
      PurchaseLineDetail@1100529600 : Record 11020660;
      PurchaseLineDetail2@1100529601 : Record 11020660;
      PurchaseLineExtension@1100529602 : Record 11020644;
    BEGIN
      IF PurchLineRec."Job No." = '' THEN
        EXIT;
      IF PurchaseLineDetail.GET(PurchaseLineDetail."Line Type"::"Budget Line", PurchaseLineDetail."Record Type"::Project,
                                BudgetLineRec."Project No.", BudgetLineRec.Adjustment, BudgetLineRec."Extension Contract",
                                0, '', '', BudgetLineRec.Option, BudgetLineRec."Line No.")
      THEN BEGIN
        PurchaseLineExtension.GetPurchLineExtension(PurchLineRec."Document Type", PurchLineRec."Document No.", PurchLineRec."Line No.");
        PurchaseLineDetail.Length := BudgetLineRec.Length;
        PurchaseLineDetail.Height := BudgetLineRec.Height;
        PurchaseLineDetail.Width := BudgetLineRec.Width;
        IF NOT PurchaseLineDetail2.GET(PurchaseLineDetail2."Line Type"::"Purchase Order", PurchaseLineDetail2."Record Type"::Project,
                                       PurchLineRec."Job No.", PurchaseLineExtension."Yard No.", PurchaseLineExtension."System No.", PurchLineRec."Entity Type",
                                       PurchaseLineExtension."Entity No.", '', PurchLineRec."Document No.", PurchLineRec."Line No.")
        THEN BEGIN
          PurchaseLineDetail2.INIT;
          PurchaseLineDetail2."Line Type" := PurchaseLineDetail2."Line Type"::"Purchase Order";
          PurchaseLineDetail2."Record Type" := PurchaseLineDetail2."Record Type"::Project;
          PurchaseLineDetail2."Project No." := PurchLineRec."Job No.";
          PurchaseLineDetail2."Yard No." := PurchaseLineExtension."Yard No.";
          PurchaseLineDetail2."System No." := PurchaseLineExtension."System No.";
          PurchaseLineDetail2."Entity Type" := PurchLineRec."Entity Type";
          PurchaseLineDetail2."Entity No." := PurchaseLineExtension."Entity No.";
          PurchaseLineDetail2."Document No." := PurchLineRec."Document No.";
          PurchaseLineDetail2."Line No." := PurchLineRec."Line No.";
          PurchaseLineDetail2.INSERT(TRUE);
        END;
        PurchaseLineDetail2.Length := PurchaseLineDetail.Length;
        PurchaseLineDetail2.Height := PurchaseLineDetail.Height;
        PurchaseLineDetail2.Width := PurchaseLineDetail.Width;
        PurchaseLineDetail2."Base Quantity" := PurchaseLineDetail."Base Quantity";
        PurchaseLineDetail2."Scaling Factor" := PurchaseLineDetail."Scaling Factor";
        PurchaseLineDetail2.MODIFY;
      END;
    END;

    [External]
    PROCEDURE CopyServiceBudgetToBudgetLines@1100528600(IServiceOrderNo@1100528600 : Code[20]);
    VAR
      ServiceOrder@1100528601 : Record 11012823;
      ServiceOrderExtension@1100528603 : Record 11071727;
      ServiceOrderBudgetLine@1100528602 : Record 11012875;
      BudgetLine@1100528604 : Record 11012001;
      Job@1100528607 : Record 11072003;
      ProjectElement@1100528608 : Record 11012010;
      LineNo@1100528605 : Integer;
      NoOfLinesCopied@1100528606 : Integer;
    BEGIN
      ServiceOrder.GET(IServiceOrderNo);
      ServiceOrderExtension.GetServOrderExtension(IServiceOrderNo);
      ServiceOrderExtension.TESTFIELD("Master Company", '');
      ServiceOrderExtension.TESTFIELD("Master Project");

      ServiceOrderBudgetLine.SETRANGE("Service Order No.", IServiceOrderNo);
      IF ServiceOrderBudgetLine.ISEMPTY THEN
        EXIT;

      Job.GET(ServiceOrderExtension."Master Project");
      Job.TESTFIELD("Budget Fixed", FALSE);
      IF Job."Project Status" >= Job."Project Status"::"Administrative Finished" THEN
        Job.FIELDERROR("Project Status");

      IF ServiceOrderExtension."Master Element" <> '' THEN BEGIN
        ProjectElement.GET(ServiceOrderExtension."Master Project", ServiceOrderExtension."Master Element");
        ProjectElement.TESTFIELD(Blocked, FALSE);
      END;

      BudgetLine.SETRANGE("Project No.", ServiceOrderExtension."Master Project");
      BudgetLine.SETRANGE(Adjustment, '');
      BudgetLine.SETRANGE("Extension Contract", '');
      BudgetLine.SETRANGE(Option,'');
      BudgetLine.SETRANGE("Service Company", '');
      BudgetLine.SETRANGE("Service Order No.", IServiceOrderNo);
      IF NOT BudgetLine.ISEMPTY THEN
        IF GUIALLOWED THEN
          IF NOT CONFIRM(Text006, TRUE, BudgetLine.TABLECAPTION) THEN
            ERROR('');

      BudgetLine.RESET;
      BudgetLine.LOCKTABLE;
      BudgetLine.SETRANGE("Project No.", ServiceOrderExtension."Master Project");
      BudgetLine.SETRANGE(Adjustment, '');
      BudgetLine.SETRANGE("Extension Contract", '');
      BudgetLine.SETRANGE(Option,'');
      IF BudgetLine.FINDLAST THEN
        LineNo := BudgetLine."Line No.";
      LineNo += 10000;

      IF ServiceOrderBudgetLine.FINDSET THEN
        REPEAT
          BudgetLine.SETRANGE("Service Company", '');
          BudgetLine.SETRANGE("Service Order No.", ServiceOrderBudgetLine."Service Order No.");
          BudgetLine.SETRANGE("Service Recording Line No.", ServiceOrderBudgetLine."Recording Line No.");
          BudgetLine.SETRANGE("Service Order Budget Line No.", ServiceOrderBudgetLine."Line No.");
          IF BudgetLine.ISEMPTY THEN BEGIN
            BudgetLine.INIT;
            BudgetLine."Project No." := ServiceOrderExtension."Master Project";
            BudgetLine."Line No." := LineNo;
            BudgetLine.INSERT(TRUE);
            BudgetLine.VALIDATE(Element, ServiceOrderExtension."Master Element");
            BudgetLine."Extension Contract" := ServiceOrderExtension."Master Extension Contract";
            BudgetLine.Description := ServiceOrderBudgetLine.Description;
            BudgetLine."Description 2" := ServiceOrderBudgetLine."Description 2";
            BudgetLine.Quantity := ServiceOrderBudgetLine.Quantity;
            BudgetLine."Unit of Measure" := ServiceOrderBudgetLine."Unit of Measure";
            BudgetLine."Time Quantity" := ServiceOrderBudgetLine."Time Quantity";
            BudgetLine."Unit of Time" := ServiceOrderBudgetLine."Unit of Time";
            BudgetLine."Cost Type" := ServiceOrderBudgetLine."Cost Type";
            BudgetLine."Cost Object" := ServiceOrderBudgetLine."Cost Object";
            IF ServiceOrderBudgetLine."Cost Type" = ServiceOrderBudgetLine."Cost Type"::Labor THEN BEGIN
              BudgetLine.Norm := ServiceOrderBudgetLine.Norm;
              BudgetLine.VALIDATE("Rate Code", ServiceOrderBudgetLine."Rate Code");
              BudgetLine.VALIDATE("Rate (LCY)", ServiceOrderBudgetLine.Rate);
            END ELSE BEGIN
              IF ServiceOrderBudgetLine."Gross Price" <> 0 THEN BEGIN
                BudgetLine.VALIDATE("Gross Price (LCY)", ServiceOrderBudgetLine."Gross Price");
                BudgetLine.VALIDATE("Discount %", ServiceOrderBudgetLine."Discount %");
              END ELSE
                BudgetLine.VALIDATE("Price (LCY)", ServiceOrderBudgetLine.Price);
              BudgetLine.VALIDATE("Amount (LCY)", ServiceOrderBudgetLine.Amount);
              BudgetLine."Item No." := ServiceOrderBudgetLine."Item No.";
              BudgetLine."Basic Item" := ServiceOrderBudgetLine."Basic Item";
              BudgetLine."Trade Item" := ServiceOrderBudgetLine."Trade Item";
              BudgetLine."Vendor (Trade Item)" := ServiceOrderBudgetLine."Vendor (Trade Item)";
              BudgetLine.Manufacturer := ServiceOrderBudgetLine.Manufacturer;
            END;
            BudgetLine."Cost Component" := ServiceOrderBudgetLine."Cost Component";
            BudgetLine."Price Agreement" := ServiceOrderBudgetLine."Price Agreement";
            BudgetLine.Vendor := ServiceOrderBudgetLine.Vendor;
            BudgetLine."External Text" := ServiceOrderBudgetLine."External Text";
            BudgetLine."External Text Block" := ServiceOrderBudgetLine."External Text Block";
            BudgetLine."Surcharge Amnt from Summary" := ServiceOrderBudgetLine."Overhead Surcharge";
            BudgetLine."Wage Component" := ServiceOrderBudgetLine."Wage Component";
            BudgetLine.Comments := ServiceOrderBudgetLine.Comments;
            BudgetLine."Comments for Logistics" := ServiceOrderBudgetLine."Comments for Logistics";
            BudgetLine."Recipe Group" := ServiceOrderBudgetLine."Recipe Group";
            BudgetLine.Recipe := ServiceOrderBudgetLine.Recipe;
            BudgetLine."Service Company" := '';
            BudgetLine."Service Order No." := IServiceOrderNo;
            BudgetLine."Service Recording Line No." := ServiceOrderBudgetLine."Recording Line No.";
            BudgetLine."Service Order Budget Line No." := ServiceOrderBudgetLine."Line No.";
            BudgetLine."Subcontracting Activity" := ServiceOrderBudgetLine."Subcontracting Activity";
            BudgetLine."Plant Company" := ServiceOrderBudgetLine."Plant Company";
            BudgetLine."Plant Type" := ServiceOrderBudgetLine."Plant Type";
            BudgetLine.CalcTotals;
            BudgetLine.MODIFY(TRUE);
            NoOfLinesCopied += 1;
            LineNo += 10000;
          END;
        UNTIL ServiceOrderBudgetLine.NEXT = 0;

      IF GUIALLOWED THEN
        MESSAGE(Text005, NoOfLinesCopied);
    END;

    BEGIN
    END.
  }
}

