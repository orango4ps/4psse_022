OBJECT Codeunit 1207 Pmt Export Mgt Vend Ledg Entry
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00,NAVDK,4PSSE;
  }
  PROPERTIES
  {
    Permissions=TableData 25=rm;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ExportAgainQst@1002 : TextConst 'ENU=One or more of the selected lines has already been exported. Do you want to export it again?;NOR=ên eller flere av de valgte linjene er allerede eksportert. Vil du eksportere den pÜ nytt?;SVE=Minst en av de valda raderna har redan exporterats. Vill du exportera den igen?';
      ProgressMsg@1001 : TextConst 'ENU=Processing line no. #1######.;NOR=Behandler linje nr. #1######.;SVE=Behandlar rad nr #1######.';
      PaymentExportMgt@1003 : Codeunit 1210;
      GLSetup@1100285500 : Record 98;
      gotGLSetup@1100285501 : Boolean;

    [Internal]
    PROCEDURE ExportVendorPaymentFileYN@23(VAR VendorLedgerEntry@1000 : Record 25);
    BEGIN
      IF IsVendorLedgerEntryExported(VendorLedgerEntry) OR IsAppliedToVendorPaymentExported(VendorLedgerEntry) THEN
        IF NOT CONFIRM(ExportAgainQst) THEN
          EXIT;
      ExportVendorPaymentFile(VendorLedgerEntry);
    END;

    LOCAL PROCEDURE IsVendorLedgerEntryExported@26(VAR VendorLedgerEntry@1000 : Record 25) : Boolean;
    VAR
      VendorLedgerEntry2@1001 : Record 25;
    BEGIN
      // In case of selecting more than one line on the page.
      IF VendorLedgerEntry.MARKEDONLY THEN
        WITH VendorLedgerEntry2 DO BEGIN
          MARKEDONLY(TRUE);
          SETRANGE("Exported to Payment File",TRUE);
          EXIT(NOT ISEMPTY);
        END;

      // In case of selecting one line on the page or passing a variable directly.
      IF VendorLedgerEntry.HASFILTER THEN
        WITH VendorLedgerEntry2 DO BEGIN
          COPYFILTERS(VendorLedgerEntry);
          SETRANGE("Exported to Payment File",TRUE);
          EXIT(NOT ISEMPTY);
        END;

      // The case of a record not being passed via the user interface is not supported.
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE IsAppliedToVendorPaymentExported@32(VAR VendorLedgerEntry@1000 : Record 25) : Boolean;
    VAR
      AppliedToVendLedgerEntry@1002 : Record 25;
      ExportVendLedgerEntry@1001 : Record 25;
    BEGIN
      CASE TRUE OF
        VendorLedgerEntry.MARKEDONLY:
          ExportVendLedgerEntry.MARKEDONLY(TRUE);
        VendorLedgerEntry.HASFILTER:
          BEGIN
            ExportVendLedgerEntry.COPYFILTERS(VendorLedgerEntry);
            ExportVendLedgerEntry.FINDSET;
          END;
        ELSE
          ExportVendLedgerEntry.COPY(VendorLedgerEntry);
      END;

      AppliedToVendLedgerEntry.SETRANGE("Exported to Payment File",TRUE);
      REPEAT
        AppliedToVendLedgerEntry.SETRANGE("Closed by Entry No.",ExportVendLedgerEntry."Entry No.");
        IF NOT AppliedToVendLedgerEntry.ISEMPTY THEN
          EXIT(TRUE);
      UNTIL ExportVendLedgerEntry.NEXT = 0;

      EXIT(FALSE);
    END;

    [Internal]
    PROCEDURE ExportVendorPaymentFile@115(VAR VendorLedgerEntry@1000 : Record 25);
    BEGIN
      CODEUNIT.RUN(CODEUNIT::"Pmt. Export Vend. Ledger Check",VendorLedgerEntry);
      ExportVendLedgerEntry(VendorLedgerEntry);
      SetExportFlagOnVendorLedgerEntries(VendorLedgerEntry);
    END;

    [Internal]
    PROCEDURE ExportVendLedgerEntry@17(VAR VendorLedgerEntry@1000 : Record 25);
    VAR
      VendorLedgerEntry2@1004 : Record 25;
      DataExch@1001 : Record 1220;
      Window@1003 : Dialog;
      LineNo@1002 : Integer;
      LineAmount@1219 : Decimal;
      TransferDate@1218 : Date;
      TotalAmount@1217 : Decimal;
      HandledGenJnlDataExchLine@1213 : Boolean;
      HandledPaymentExportVendLedgerEntry@1214 : Boolean;
    BEGIN
      VendorLedgerEntry2.COPY(VendorLedgerEntry);
      PaymentExportMgt.CreateDataExch(DataExch,VendorLedgerEntry2."Bal. Account No.");
      Window.OPEN(ProgressMsg);
      REPEAT
        LineNo += 1;
        Window.UPDATE(1,LineNo);
        OnBeforeCreateVendLedgerDataExchLine(DataExch,VendorLedgerEntry2,LineNo,LineAmount,
          TotalAmount,TransferDate,HandledGenJnlDataExchLine);
        IF NOT HandledGenJnlDataExchLine THEN
        CreateVendLedgerDataExchLine(DataExch."Entry No.",VendorLedgerEntry2,LineNo,LineAmount,TransferDate);
        TotalAmount += LineAmount;
      UNTIL VendorLedgerEntry2.NEXT = 0;
      Window.CLOSE;
      OnBeforePaymentExportVendorLedgerEntry(VendorLedgerEntry."Bal. Account No.",DataExch."Entry No.",
        LineNo,TotalAmount,TransferDate,HandledPaymentExportVendLedgerEntry);
      GetGLSetup;  //4PSSE.DK
      IF GLSetup."Danish Localization Active" THEN
        ExportDataFromBuffer(VendorLedgerEntry."Bal. Account No.",DataExch."Entry No.",LineNo,TotalAmount,TransferDate)  //NAVDK
      ELSE
      IF NOT HandledPaymentExportVendLedgerEntry THEN
        PaymentExportMgt.ExportToFile(DataExch."Entry No.")
    END;

    LOCAL PROCEDURE CreateVendLedgerDataExchLine@18(DataExchEntryNo@1000 : Integer;VendorLedgerEntry@1001 : Record 25;LineNo@1002 : Integer;VAR PmtExportLineAmount@1060001 : Decimal;VAR PmtExportTransferDate@1060000 : Date);
    VAR
      PaymentExportData@1003 : Record 1226;
    BEGIN
      WITH VendorLedgerEntry DO BEGIN
        PreparePaymentExportDataVLE(PaymentExportData,VendorLedgerEntry,DataExchEntryNo,LineNo);
        PmtExportLineAmount := PaymentExportData.Amount;
        PmtExportTransferDate := PaymentExportData."Transfer Date";
        PaymentExportMgt.CreatePaymentLines(PaymentExportData);
      END;
    END;

    [External]
    PROCEDURE PreparePaymentExportDataVLE@13(VAR TempPaymentExportData@1000 : TEMPORARY Record 1226;VendorLedgerEntry@1001 : Record 25;DataExchEntryNo@1003 : Integer;LineNo@1007 : Integer);
    VAR
      GeneralLedgerSetup@1002 : Record 98;
      Vendor@1006 : Record 23;
      VendorBankAccount@1008 : Record 288;
      PaymentMethod@1009 : Record 289;
      BankAccount@1010 : Record 270;
      BankExportImportSetup@1004 : Record 1200;
    BEGIN
      GeneralLedgerSetup.GET;
      Vendor.GET(VendorLedgerEntry."Vendor No.");

      WITH TempPaymentExportData DO BEGIN
        BankAccount.GET(VendorLedgerEntry."Bal. Account No.");
        BankAccount.GetBankExportImportSetup(BankExportImportSetup);
        SetPreserveNonLatinCharacters(BankExportImportSetup."Preserve Non-Latin Characters");

        INIT;
        "Data Exch Entry No." := DataExchEntryNo;
        "Sender Bank Account Code" := VendorLedgerEntry."Bal. Account No.";

        IF VendorBankAccount.GET(VendorLedgerEntry."Vendor No.",VendorLedgerEntry."Recipient Bank Account") THEN BEGIN
          IF BankAccount."Country/Region Code" = VendorBankAccount."Country/Region Code" THEN BEGIN
            VendorLedgerEntry.CALCFIELDS("Amount (LCY)");
            Amount := VendorLedgerEntry."Amount (LCY)";
            "Currency Code" := GeneralLedgerSetup."LCY Code";
          END ELSE BEGIN
            VendorLedgerEntry.CALCFIELDS(Amount);
            Amount := VendorLedgerEntry.Amount;
            "Currency Code" := GeneralLedgerSetup.GetCurrencyCode(VendorLedgerEntry."Currency Code");
          END;

          "Recipient Bank Acc. No." :=
            COPYSTR(VendorBankAccount.GetBankAccountNo,1,MAXSTRLEN("Recipient Bank Acc. No."));
          "Recipient Reg. No." := VendorBankAccount."Bank Branch No.";
          "Recipient Acc. No." := VendorBankAccount."Bank Account No.";
          "Recipient Bank Country/Region" := VendorBankAccount."Country/Region Code";
          "Recipient Bank Name" := COPYSTR(VendorBankAccount.Name,1,35);
          "Recipient Bank Address" := COPYSTR(VendorBankAccount.Address,1,35);
          "Recipient Bank City" := COPYSTR(VendorBankAccount."Post Code" + VendorBankAccount.City,1,35);
          "Recipient Bank BIC" := VendorBankAccount."SWIFT Code";
        END ELSE
          IF (VendorLedgerEntry."Creditor No." <> '') OR (VendorLedgerEntry."Giro Acc. No." <> '') THEN BEGIN
            VendorLedgerEntry.CALCFIELDS("Amount (LCY)");
            Amount := VendorLedgerEntry."Amount (LCY)";
            "Currency Code" := GeneralLedgerSetup."LCY Code";
          END;

        "Recipient Name" := COPYSTR(Vendor.Name,1,35);
        "Recipient Address" := COPYSTR(Vendor.Address,1,35);
        "Recipient City" := COPYSTR(Vendor."Post Code" + ' ' + Vendor.City,1,35);
        "Transfer Date" := VendorLedgerEntry."Posting Date";
        "Message to Recipient 1" := COPYSTR(VendorLedgerEntry."Message to Recipient",1,35);
        "Message to Recipient 2" := COPYSTR(VendorLedgerEntry."Message to Recipient",36,70);
        "Document No." := VendorLedgerEntry."Document No.";
        "Applies-to Ext. Doc. No." := VendorLedgerEntry."Applies-to Ext. Doc. No.";
        "Short Advice" := VendorLedgerEntry."Applies-to Ext. Doc. No.";
        "Line No." := LineNo;
        "Payment Reference" := VendorLedgerEntry."Payment Reference";
        IF PaymentMethod.GET(VendorLedgerEntry."Payment Method Code") THEN
          "Data Exch. Line Def Code" := PaymentMethod."Pmt. Export Line Definition";
        "Recipient Creditor No." := VendorLedgerEntry."Creditor No.";
        "Recipient Giro Acc. No." := VendorLedgerEntry."Giro Acc. No.";
        OnBeforeInsertPmtExportDataJnlFromVendorLedgerEntry(TempPaymentExportData,VendorLedgerEntry,GeneralLedgerSetup);
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE ExportDataFromBuffer@1060002(BalAccountNo@1060001 : Code[20];DataExchEntryNo@1060004 : Integer;LineCount@1060006 : Integer;TotalAmount@1060007 : Decimal;TransferDate@1060008 : Date);
    VAR
      BankAccount@1060000 : Record 270;
      BankExportImportSetup@1060002 : Record 1200;
      DataExchDef@1060003 : Record 1222;
      TempPaymentExportData@1060005 : TEMPORARY Record 1226;
      DataExch@1060009 : Record 1220;
    BEGIN
      GetGLSetup;  //4PSSE.DK
      IF NOT GLSetup."Danish Localization Active" THEN EXIT;
      BankAccount.GET(BalAccountNo);
      BankExportImportSetup.GET(BankAccount."Payment Export Format");
      DataExchDef.GET(BankExportImportSetup."Data Exch. Def. Code");
      IF DataExchDef."Reading/Writing Codeunit" = CODEUNIT::"Export BankData Fixed Width" THEN BEGIN
        TempPaymentExportData.INIT;
        TempPaymentExportData."Data Exch Entry No." := DataExchEntryNo;
        TempPaymentExportData."Line No." := LineCount;
        TempPaymentExportData.Amount := TotalAmount;
        TempPaymentExportData."Transfer Date" := TransferDate;
        TempPaymentExportData.INSERT;
        CODEUNIT.RUN(DataExchDef."Reading/Writing Codeunit",TempPaymentExportData);
        DataExch.GET(DataExchEntryNo);
        CODEUNIT.RUN(DataExchDef."Ext. Data Handling Codeunit",DataExch);
      END ELSE
        PaymentExportMgt.ExportToFile(DataExchEntryNo);
    END;

    [External]
    PROCEDURE EnableExportToServerTempFile@27(SilentServerMode@1000 : Boolean;ServerFileExtension@1001 : Text[3]);
    BEGIN
      PaymentExportMgt.EnableExportToServerTempFile(SilentServerMode,ServerFileExtension);
    END;

    [External]
    PROCEDURE GetServerTempFileName@29() : Text[1024];
    BEGIN
      EXIT(PaymentExportMgt.GetServerTempFileName);
    END;

    LOCAL PROCEDURE SetExportFlagOnVendorLedgerEntries@41(VAR VendorLedgerEntry@1000 : Record 25);
    VAR
      VendorLedgerEntry2@1001 : Record 25;
    BEGIN
      WITH VendorLedgerEntry2 DO BEGIN
        COPY(VendorLedgerEntry);
        REPEAT
          VALIDATE("Exported to Payment File",TRUE);
          CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",VendorLedgerEntry2);
        UNTIL NEXT = 0;
      END;
    END;

    [Integration]
    PROCEDURE OnBeforeInsertPmtExportDataJnlFromVendorLedgerEntry@67(VAR PaymentExportData@1000 : Record 1226;VendorLedgerEntry@1001 : Record 25;GeneralLedgerSetup@1002 : Record 98);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnBeforePaymentExportVendorLedgerEntry@1214(BalAccountNo@1213 : Code[20];DataExchEntryNo@1214 : Integer;LineCount@1215 : Integer;TotalAmount@1216 : Decimal;TransferDate@1217 : Date;VAR Handled@1218 : Boolean);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnBeforeCreateVendLedgerDataExchLine@1213(DataExch@1219 : Record 1220;VendorLedgerEntry@1218 : Record 25;LineNo@1217 : Integer;VAR LineAmount@1216 : Decimal;VAR TotalAmount@1215 : Decimal;VAR TransferDate@1214 : Date;VAR Handled@1213 : Boolean);
    BEGIN
    END;

    LOCAL PROCEDURE GetGLSetup@1100285500();
    BEGIN
      //4PSSE.DK
      IF NOT gotGLSetup THEN
        GLSetup.GET;
      gotGLSetup := TRUE;
    END;

    BEGIN
    END.
  }
}

