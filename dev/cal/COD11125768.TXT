OBJECT Codeunit 11125768 Glazing Svc. Call - Create WO
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    TableNo=11125777;
    OnRun=VAR
            Modified@1100527401 : Boolean;
            AppointmentNo@1100527402 : Integer;
            Dialog@1100527403 : Dialog;
            CreatedWorkOrders@1100527400 : Text;
            FirstWorkOrderCreated@1100527404 : Code[20];
            LastWorkOrderCreated@1100527405 : Code[20];
          BEGIN
            OnBeforeRun(Rec);
            IF NOT (Status IN [Status::Released, Status::"Plan during Clock Time"]) THEN
             FIELDERROR(Status);
            TESTFIELD(Date);

            IF "Service Order No." = '' THEN
              GlazingSvcCallCreateSO.RUN(Rec);

            Modified := FALSE;
            Dialog.OPEN(Text003);
            FOR AppointmentNo := 1 TO 6 DO BEGIN
              Dialog.UPDATE(1, ROUND(AppointmentNo / 6 * 10000, 1));
              Modified := Modified OR CreateWorkOrder(Rec, AppointmentNo, LastWorkOrderCreated);
              IF FirstWorkOrderCreated = '' THEN
                FirstWorkOrderCreated := LastWorkOrderCreated;
            END;
            Dialog.CLOSE;

            IF FirstWorkOrderCreated = LastWorkOrderCreated THEN
              CreatedWorkOrders := FirstWorkOrderCreated
            ELSE
              CreatedWorkOrders := STRSUBSTNO('%1..%2', FirstWorkOrderCreated, LastWorkOrderCreated);

            IF Modified THEN
              MESSAGE(Text100, CreatedWorkOrders)
            ELSE
              MESSAGE(Text101);
            OnAfterRun(Rec);
          END;

  }
  CODE
  {
    VAR
      Text100@1100527403 : TextConst 'ENU=Work Order(s) %1 is/are created/updated.';
      Text101@1100527402 : TextConst 'ENU=No Work Orders were created/updated';
      Text002@1100527401 : TextConst 'ENU=At least one cost object code must be filled in each of the activity lines for line %1 of %2 %3.';
      Text003@1100527400 : TextConst 'ENU=Progress @1@@@@@@@@@@@@@@@';
      GlazingServiceCallLine2@1100527404 : Record 11125778;
      GlazingSvcCallCreateSO@1100527405 : Codeunit 11125764;
      GlazingServiceCallNo@1100527406 : Code[20];
      GlazingServiceCallLineNo@1100527407 : Integer;

    PROCEDURE CreateWorkOrder@1100527400(VAR IGlazingServiceCall@1100527400 : Record 11125777;AppointmentNo@1100527401 : Integer;VAR WorkOrderNo@1100527406 : Code[20]) : Boolean;
    VAR
      WorkOrder@1100527403 : Record 11229279;
      GlazingServiceCallActivity@1100527404 : Record 11125781;
      GlazingServiceCallLine@1100527405 : Record 11125778;
      GlazingSvcCallItemLine@1100527402 : Record 11125778;
      GlazingSvcCallActivityBuffer@1100527407 : TEMPORARY Record 11125781;
      GlazingServiceCallAssembly@1100527408 : Record 11125779;
      GlazingSvcCallAssemblyBuffer@1100527409 : TEMPORARY Record 11125779;
      NewWorkOrderCreated@1100527410 : Boolean;
      GlazingServiceCall@1100527413 : Record 11125777;
      ServiceOrder@1100527414 : Record 11012823;
      Item@1100527432 : Record 27;
      AdviceOrderLine@1100527431 : Record 11012055;
      ServiceOrderBudgetLine@1100527415 : Record 11012875;
      GlazingCallMgtSetup@1100527433 : Record 11125762;
      TempGlazingServCallLine@1100527435 : TEMPORARY Record 11125778;
      lvGlazingServCallLine2@1100527434 : Record 11125778;
      AssemblyCode@1100527430 : Code[50];
      ServiceOrderBudgetLineNo@1100527429 : Integer;
      AdviceOrderLineNo@1100527428 : Integer;
      CostPlusEntryLineNo@1100527427 : Integer;
      lvTotalSalesAmount@1100527426 : Decimal;
      lvTotalCostAmount@1100527425 : Decimal;
      lvTotalSalesPrice@1100527424 : Decimal;
      lvTotalCostPrice@1100527423 : Decimal;
      lvDescription@1100527421 : Text[100];
      lvDescription2@1100527420 : Text[50];
      CostPlusType@1100527419 : ' ,Removal,Mounting,Item,Assembly';
      lvQuantity@1100527418 : Decimal;
      lvItemNo@1100527417 : Code[20];
      lvCostObject@1100527416 : Code[20];
    BEGIN
      IF IGlazingServiceCall.GetAppointmentDate(AppointmentNo) = 0D THEN EXIT;

      GlazingServiceCallLine.SETCURRENTKEY("Glazing Service Call No.", "Service Order No.");
      GlazingServiceCallLine.SETRANGE("Glazing Service Call No.", IGlazingServiceCall."No.");
      GlazingServiceCallLine.SETRANGE("Service Order No.", '');
      GlazingServiceCallLine.SETRANGE("Appointment No.", AppointmentNo);

      GlazingSvcCallItemLine.COPY(GlazingServiceCallLine);
      GlazingSvcCallItemLine.SETFILTER("Item No.", '<>%1', '');

      IF GlazingServiceCallLine.FINDSET THEN
        REPEAT
          GlazingServiceCallActivity.SETRANGE("Glazing Service Call No.", GlazingServiceCallLine."Glazing Service Call No.");
          GlazingServiceCallActivity.SETRANGE("Glazing Service Call Line No.", GlazingServiceCallLine."Line No.");
          IF GlazingServiceCallActivity.FINDSET THEN
            REPEAT
              GlazingSvcCallActivityBuffer := GlazingServiceCallActivity;
              GlazingSvcCallActivityBuffer.INSERT;
            UNTIL GlazingServiceCallActivity.NEXT = 0;
        UNTIL GlazingServiceCallLine.NEXT = 0;

      IF GlazingServiceCallLine.FINDSET THEN
        REPEAT
          GlazingServiceCallAssembly.SETRANGE("Glazing Service Call No.", GlazingServiceCallLine."Glazing Service Call No.");
          GlazingServiceCallAssembly.SETRANGE("Glazing Service Call Line No.", GlazingServiceCallLine."Line No.");
          GlazingServiceCallAssembly.SETFILTER(Quantity, '<>%1', 0);
          IF GlazingServiceCallAssembly.FINDSET THEN
            REPEAT
              GlazingSvcCallAssemblyBuffer := GlazingServiceCallAssembly;
              GlazingSvcCallAssemblyBuffer.INSERT;
            UNTIL GlazingServiceCallAssembly.NEXT = 0;
        UNTIL GlazingServiceCallLine.NEXT = 0;

      IF IGlazingServiceCall.GetAppointmentWorkOrderNo(AppointmentNo) = '' THEN BEGIN
        IGlazingServiceCall.CALCFIELDS("Planned Hours (Calculated)");

        WorkOrder."Source Type" := WorkOrder."Source Type"::ServiceOrder;
        WorkOrder.VALIDATE("Source Company", COMPANYNAME);
        WorkOrder.INSERT(TRUE);

        WorkOrder.VALIDATE("Source No.", IGlazingServiceCall."Service Order No.");
        WorkOrder."Resource Type" := WorkOrder."Resource Type"::Employee;
        WorkOrder."Ending Date/Time" := 0DT;
        WorkOrder.VALIDATE("Starting Date/Time", CREATEDATETIME(IGlazingServiceCall.GetAppointmentDate(AppointmentNo), IGlazingServiceCall.GetAppointmentStartingTime(AppointmentNo)));
        WorkOrder.VALIDATE("Ending Date/Time", CREATEDATETIME(IGlazingServiceCall.GetAppointmentDate(AppointmentNo), IGlazingServiceCall.GetAppointmentEndingTime(AppointmentNo)));
        WorkOrder."Expected Hours" := IGlazingServiceCall.GetTotalHoursByAppointmentNo(AppointmentNo);
        WorkOrder."Duration Time" := WorkOrder."Expected Hours";
        WorkOrder.MODIFY(TRUE);
        NewWorkOrderCreated := TRUE;

        IGlazingServiceCall.FIND('=');
        IGlazingServiceCall.SetAppointmentWorkOrderNo(AppointmentNo, WorkOrder."No.");
      END ELSE
        WorkOrder.GET(IGlazingServiceCall.GetAppointmentWorkOrderNo(AppointmentNo));

      WorkOrderNo := WorkOrder."No.";

      IF GlazingSvcCallActivityBuffer.FINDSET THEN
        REPEAT
          IF (GlazingSvcCallActivityBuffer."Cost Object Code Labor" = '') AND
             (GlazingSvcCallActivityBuffer."Cost Object Code Material" = '') AND
             (GlazingSvcCallActivityBuffer."Cost Object Code Subcontr." = '') AND
             (GlazingSvcCallActivityBuffer."Cost Object Code Plant" = '')
          THEN
            ERROR(
              Text002,
              GlazingSvcCallActivityBuffer."Glazing Service Call Line No.",
              GlazingServiceCall.TABLECAPTION,
              GlazingSvcCallActivityBuffer."Glazing Service Call No.");

          IF GlazingSvcCallActivityBuffer."Cost Object Code Labor" <> '' THEN BEGIN
            GlazingSvcCallActivityBuffer.CALCFIELDS("Cost Object Name Labor");
            GlazingServiceCallNo := GlazingSvcCallActivityBuffer."Glazing Service Call No.";
            GlazingServiceCallLineNo := GlazingSvcCallActivityBuffer."Glazing Service Call Line No.";

            InsertServiceOrderBudgetLine(
              WorkOrder."Source No.",
              IGlazingServiceCall."Service Contract No.",
              ServiceOrderBudgetLineNo,
              GlazingSvcCallActivityBuffer.Description,
              '',
              GlazingSvcCallActivityBuffer.Quantity * GlazingSvcCallActivityBuffer.CallLineQtyForBudget,
              GlazingSvcCallActivityBuffer."Unit of Measure Code",
              '',
              GlazingSvcCallActivityBuffer."Cost Object Code Labor",
              ServiceOrderBudgetLine."Cost Type"::Labor,
              0,
              GlazingSvcCallActivityBuffer.Norm,
              GlazingSvcCallActivityBuffer."Rate Code",
              GlazingSvcCallActivityBuffer.Rate * GlazingSvcCallActivityBuffer."Correction Factor (Cost)",
              GlazingSvcCallActivityBuffer.Hours,
              GlazingSvcCallActivityBuffer."Labor Amount",
              IGlazingServiceCall."Service Location No.",
              FALSE);
          END;

          IF GlazingSvcCallActivityBuffer."Cost Object Code Material" <> '' THEN BEGIN
            GlazingSvcCallActivityBuffer.CALCFIELDS("Cost Object Name Material");
            GlazingServiceCallNo := GlazingSvcCallActivityBuffer."Glazing Service Call No.";
            GlazingServiceCallLineNo := GlazingSvcCallActivityBuffer."Glazing Service Call Line No.";

            InsertServiceOrderBudgetLine(
              WorkOrder."Source No.",
              IGlazingServiceCall."Service Contract No.",
              ServiceOrderBudgetLineNo,
              GlazingSvcCallActivityBuffer.Description,
              '',
              GlazingSvcCallActivityBuffer.Quantity * GlazingSvcCallActivityBuffer.CallLineQtyForBudget,
              GlazingSvcCallActivityBuffer."Unit of Measure Code",
              GlazingSvcCallActivityBuffer."Item No.",
              GlazingSvcCallActivityBuffer."Cost Object Code Material",
              ServiceOrderBudgetLine."Cost Type"::Material,
              GlazingSvcCallActivityBuffer."Material Price" * GlazingSvcCallActivityBuffer."Correction Factor (Cost)",
              0,
              '',
              0,
            0,
              GlazingSvcCallActivityBuffer."Material Amount",
              IGlazingServiceCall."Service Location No.",
              FALSE);
          END;

          IF GlazingSvcCallActivityBuffer."Cost Object Code Subcontr." <> '' THEN BEGIN
            GlazingSvcCallActivityBuffer.CALCFIELDS("Cost Object Name Subcontr.");
            GlazingServiceCallNo := GlazingSvcCallActivityBuffer."Glazing Service Call No.";
            GlazingServiceCallLineNo := GlazingSvcCallActivityBuffer."Glazing Service Call Line No.";
            InsertServiceOrderBudgetLine(
              WorkOrder."Source No.",
              IGlazingServiceCall."Service Contract No.",
              ServiceOrderBudgetLineNo,
              GlazingSvcCallActivityBuffer.Description,
              '',
              GlazingSvcCallActivityBuffer.Quantity * GlazingSvcCallActivityBuffer.CallLineQtyForBudget,
              GlazingSvcCallActivityBuffer."Unit of Measure Code",
              '',
              GlazingSvcCallActivityBuffer."Cost Object Code Subcontr.",
              ServiceOrderBudgetLine."Cost Type"::Subcontracting,
              GlazingSvcCallActivityBuffer."Subcontracting Price" * GlazingSvcCallActivityBuffer."Correction Factor (Cost)",
              0,
              '',
              0,
            0,
              GlazingSvcCallActivityBuffer."Subcontracting Amount",
              IGlazingServiceCall."Service Location No.",
              FALSE);
          END;

          IF GlazingSvcCallActivityBuffer."Cost Object Code Plant" <> '' THEN BEGIN
            GlazingSvcCallActivityBuffer.CALCFIELDS("Cost Object Name Plant");
            GlazingServiceCallNo := GlazingSvcCallActivityBuffer."Glazing Service Call No.";
            GlazingServiceCallLineNo := GlazingSvcCallActivityBuffer."Glazing Service Call Line No.";
            InsertServiceOrderBudgetLine(
              WorkOrder."Source No.",
              IGlazingServiceCall."Service Contract No.",
              ServiceOrderBudgetLineNo,
              GlazingSvcCallActivityBuffer.Description,
              '',
              GlazingSvcCallActivityBuffer.Quantity * GlazingSvcCallActivityBuffer.CallLineQtyForBudget,
              GlazingSvcCallActivityBuffer."Unit of Measure Code",
              '',
              GlazingSvcCallActivityBuffer."Cost Object Code Plant",
              ServiceOrderBudgetLine."Cost Type"::Plant,
              GlazingSvcCallActivityBuffer."Plant Price" * GlazingSvcCallActivityBuffer."Correction Factor (Cost)",
              0,
              '',
              0,
              0,
              GlazingSvcCallActivityBuffer."Plant Amount",
              IGlazingServiceCall."Service Location No.",
              FALSE);
          END;
        UNTIL GlazingSvcCallActivityBuffer.NEXT = 0;

      IF GlazingSvcCallAssemblyBuffer.FINDSET THEN
        REPEAT
          GlazingServiceCallNo := GlazingSvcCallAssemblyBuffer."Glazing Service Call No.";
          GlazingServiceCallLineNo := GlazingSvcCallAssemblyBuffer."Glazing Service Call Line No.";

          InsertServiceOrderBudgetLine(
            WorkOrder."Source No.",
            IGlazingServiceCall."Service Contract No.",
            ServiceOrderBudgetLineNo,
            GlazingSvcCallAssemblyBuffer.Description,
            GlazingSvcCallAssemblyBuffer."Description 2",
            GlazingSvcCallAssemblyBuffer."Quantity (Glazing Call Line)" * GlazingSvcCallAssemblyBuffer.Quantity,
            '',
            GlazingSvcCallAssemblyBuffer."Item No.",
            GlazingSvcCallAssemblyBuffer."Global Dimension 2 Code",
            ServiceOrderBudgetLine."Cost Type"::Material,
            GlazingSvcCallAssemblyBuffer."Standard Cost Amount" / GlazingSvcCallAssemblyBuffer.Quantity,
            0,
            '',
            0,
            0,
            GlazingSvcCallAssemblyBuffer."Total Cost Amount",
            IGlazingServiceCall."Service Location No.",
            TRUE);
        UNTIL GlazingSvcCallAssemblyBuffer.NEXT = 0;

      IF GlazingServiceCallLine.FINDSET THEN
        REPEAT
          GlazingServiceCallLine.TESTFIELD(Quantity);
          GlazingServiceCallNo := GlazingServiceCallLine."Glazing Service Call No.";
          GlazingServiceCallLineNo := GlazingServiceCallLine."Line No.";

          IF GlazingServiceCallLine."Item No." <> '' THEN BEGIN
            Item.GET(GlazingServiceCallLine."Item No.");
            InsertAdviceOrderLine(
              WorkOrder."Source No.",
              AdviceOrderLineNo,
              GlazingServiceCallLine."Item No.",
              GlazingServiceCallLine.Quantity,
              '',
              GlazingServiceCallLine."Item Description",
              GlazingServiceCallLine."Item Description 2",
              GlazingServiceCallLine."Item Standard Cost",
              Item."Global Dimension 2 Code",
              AdviceOrderLine."Cost Type"::Material,
              GlazingServiceCallLine."Item Sales Price",
              IGlazingServiceCall."Service Contract No.",
              Item."Vendor No.");

            InsertServiceOrderBudgetLine(
              WorkOrder."Source No.",
              IGlazingServiceCall."Service Contract No.",
              ServiceOrderBudgetLineNo,
              GlazingServiceCallLine."Item Description",
              GlazingServiceCallLine."Item Description 2",
              GlazingServiceCallLine.Quantity,
              Item."Base Unit of Measure",
              GlazingServiceCallLine."Item No.",
              Item."Global Dimension 2 Code",
              ServiceOrderBudgetLine."Cost Type"::Material,
              GlazingServiceCallLine."Item Standard Cost",
              0,
              '',
              0,
              0,
              GlazingServiceCallLine."Item Standard Cost Amount",
              '',
              TRUE);
          END;

          AssemblyCode := GlazingServiceCallLine.GlazingAssemblyCode(0);
          IF AssemblyCode <> '' THEN BEGIN
            GlazingServiceCallLine.CALCFIELDS("Standard Cost Assembly");

            GlazingServiceCallAssembly.SETRANGE("Glazing Service Call No.", GlazingServiceCallLine."Glazing Service Call No.");
            GlazingServiceCallAssembly.SETRANGE("Glazing Service Call Line No.", GlazingServiceCallLine."Line No.");
            IF NOT GlazingServiceCallAssembly.FINDFIRST THEN
              GlazingServiceCallAssembly.INIT;

            IF NOT Item.GET(GlazingServiceCallAssembly."Item No.") THEN
              Item.INIT;

            InsertAdviceOrderLine(
              WorkOrder."Source No.",
              AdviceOrderLineNo,
              '',
              GlazingServiceCallLine.Quantity,
              '',
              AssemblyCode,
              GlazingServiceCallLine.GetVentDescription2,
              GlazingServiceCallLine."Standard Cost Assembly",
              GlazingServiceCallAssembly."Global Dimension 2 Code",
              AdviceOrderLine."Cost Type"::Material,
              GlazingServiceCallLine."Sales Price Assembly",
              IGlazingServiceCall."Service Contract No.",
              Item."Vendor No.");
          END;

          GlazingCallMgtSetup.GET;
          lvGlazingServCallLine2.SETRANGE("Glazing Service Call No.", GlazingServiceCallLine."Glazing Service Call No.");
          lvGlazingServCallLine2.SETRANGE("Line No.", GlazingServiceCallLine."Line No.");
          FOR CostPlusType := CostPlusType::Removal TO CostPlusType::Assembly DO BEGIN
            SplitGlazServCallLineToVAT(TempGlazingServCallLine,lvGlazingServCallLine2, CostPlusType);
            IF TempGlazingServCallLine.FINDSET THEN BEGIN
              REPEAT
                IF IGlazingServiceCall."Contract Amount" = 0 THEN BEGIN
                  lvTotalSalesAmount := GlazingServiceCallLine.TotalSalesAmtByVATPrdGrp(
                                        TempGlazingServCallLine."Active VAT Prod. Posting Group", CostPlusType);
                  lvTotalCostAmount := GlazingServiceCallLine.TotalCostByVATPrdGrp(
                                        TempGlazingServCallLine."Active VAT Prod. Posting Group", CostPlusType);
                END;

                lvItemNo := '';
                lvQuantity := GlazingServiceCallLine.Quantity;
                IF (lvQuantity <> 0) AND (IGlazingServiceCall."Contract Amount" = 0) THEN BEGIN
                  lvTotalSalesPrice := lvTotalSalesAmount / lvQuantity;
                  lvTotalCostPrice := lvTotalCostAmount / lvQuantity;
                END ELSE BEGIN
                  lvTotalSalesPrice := 0;
                  lvTotalCostPrice := 0;
                END;

                CASE CostPlusType OF
                  CostPlusType::Removal:
                    BEGIN
                      GlazingCallMgtSetup.TESTFIELD(GlazingCallMgtSetup."Cost Object Removal");
                      lvCostObject := GlazingCallMgtSetup."Cost Object Removal";
                      lvDescription := GetGlazingActivityDescription(GlazingServiceCallLine."Glazing Activity Removal");
                      lvDescription2 := '';
                    END;
                  CostPlusType::Mounting:
                    BEGIN
                      GlazingCallMgtSetup.TESTFIELD(GlazingCallMgtSetup."Cost Object Mounting");
                      lvCostObject := GlazingCallMgtSetup."Cost Object Mounting";
                      lvDescription := GetGlazingActivityDescription(GlazingServiceCallLine."Glazing Activity Mounting");
                      lvDescription2 := '';
                    END;
                  CostPlusType::Item:
                    BEGIN
                      IF NOT Item.GET(TempGlazingServCallLine."Item No.") THEN
                        Item.INIT
                      ELSE
                        Item.TESTFIELD("Global Dimension 2 Code");
                      lvCostObject := Item."Global Dimension 2 Code";
                      lvDescription := GlazingServiceCallLine."Item Description";
                      lvDescription2 := GlazingServiceCallLine."Item Description 2";
                      lvItemNo := TempGlazingServCallLine."Item No.";
                    END;
                  CostPlusType::Assembly:
                    BEGIN
                      GlazingCallMgtSetup.TESTFIELD(GlazingCallMgtSetup."Cost Object Assembly");
                      lvCostObject := GlazingCallMgtSetup."Cost Object Assembly";
                      lvDescription := GlazingServiceCallLine.GlazingAssemblyCode(0);
                      lvDescription2 := GlazingServiceCallLine.GetVentDescription2;
                    END;
                END;

                IF (lvTotalSalesAmount <> 0) OR (IGlazingServiceCall."Contract Amount" <> 0) THEN
                  InsertSvcOrderCostPlusEntry(
                    WorkOrder."Source No.",
                    CostPlusEntryLineNo,
                    lvDescription,
                    lvDescription2,
                    lvQuantity,
                    lvTotalSalesPrice,
                    lvTotalCostPrice,
                    lvTotalSalesPrice,
                    lvItemNo,
                    IGlazingServiceCall."Service Contract No.",
                    TempGlazingServCallLine."Active VAT Prod. Posting Group",
                    lvCostObject);
              UNTIL TempGlazingServCallLine.NEXT = 0;
            END;
          END;
      UNTIL GlazingServiceCallLine.NEXT = 0;

      GlazingServiceCallLine.MODIFYALL("Service Order No.", WorkOrder."Source No.");

      IGlazingServiceCall.Status := CalculateStatus(IGlazingServiceCall."No.");
      IGlazingServiceCall.MODIFY(TRUE);

      GlazingSvcCallActivityBuffer.RESET;
      IF GlazingSvcCallActivityBuffer.FINDSET THEN
        REPEAT
          IF GlazingServiceCallActivity.GET(
            GlazingSvcCallActivityBuffer."Glazing Service Call No.",
            GlazingSvcCallActivityBuffer."Glazing Service Call Line No.",
            GlazingSvcCallActivityBuffer.Type,
            GlazingSvcCallActivityBuffer."Line No.")
          THEN BEGIN
            GlazingServiceCallActivity."Service Order No." := WorkOrder."Source No.";
            GlazingServiceCallActivity.MODIFY(TRUE);
          END;
        UNTIL GlazingSvcCallActivityBuffer.NEXT = 0;

      EXIT(TRUE);
    END;

    PROCEDURE SetGlazingServiceCallLine@1100527401(VAR GlazingServiceCallLine3@1100527400 : Record 11125778);
    BEGIN
      GlazingServiceCallLine2.COPY(GlazingServiceCallLine3);
    END;

    LOCAL PROCEDURE InsertServiceOrderBudgetLine@1100525002(ServiceOrderNo@1100525001 : Code[20];ServiceContractNo@1100525003 : Code[20];VAR LineNo@1100525002 : Integer;Description@1100525005 : Text[100];Description2@1100525019 : Text[50];Quantity@1100525006 : Decimal;UnitOfMeasureCode@1100525007 : Code[10];ItemNo@1100525018 : Code[20];CostObject@1100525008 : Code[20];CostType@1100525017 : Integer;Price@1100525016 : Decimal;Norm@1100525009 : Decimal;RateCode@1100525010 : Code[10];Rate@1100525011 : Decimal;Hours@1100525012 : Decimal;Amount@1100525013 : Decimal;ServiceLocationNo@1100525014 : Code[20];Advised@1100525020 : Boolean);
    VAR
      ServiceOrderBudgetLine@1100525000 : Record 11012875;
      ServiceOrderBudgetLine2@1100525015 : Record 11012875;
    BEGIN
      IF LineNo = 0 THEN BEGIN
        ServiceOrderBudgetLine2.SETRANGE("Budget Type", ServiceOrderBudgetLine2."Budget Type"::Order);
        ServiceOrderBudgetLine2.SETRANGE("Service Order No.", ServiceOrderNo);
        ServiceOrderBudgetLine2.SETRANGE("Service Contract No.", ServiceContractNo);
        IF ServiceOrderBudgetLine2.FINDLAST THEN
          LineNo := ServiceOrderBudgetLine2."Line No.";
      END;

      LineNo := LineNo + 10000;

      ServiceOrderBudgetLine."Budget Type" := ServiceOrderBudgetLine."Budget Type"::Order;
      ServiceOrderBudgetLine."Service Order No." := ServiceOrderNo;
      ServiceOrderBudgetLine."Service Contract No." := ServiceContractNo;
      ServiceOrderBudgetLine."Line No." := LineNo;
      ServiceOrderBudgetLine.Description := Description;
      ServiceOrderBudgetLine."Description 2" := Description2;
      ServiceOrderBudgetLine."Cost Type" := CostType;
      ServiceOrderBudgetLine.VALIDATE("Item No.", ItemNo);
      ServiceOrderBudgetLine.Quantity := Quantity;
      ServiceOrderBudgetLine."Unit of Measure" := UnitOfMeasureCode;
      ServiceOrderBudgetLine."Time Quantity" := 1;
      ServiceOrderBudgetLine."Unit of Time" := '';
      ServiceOrderBudgetLine."Cost Object" := CostObject;
      ServiceOrderBudgetLine.Norm := Norm;
      ServiceOrderBudgetLine."Rate Code" := RateCode;
      ServiceOrderBudgetLine.Rate := Rate;
      ServiceOrderBudgetLine.Price := Price;
      ServiceOrderBudgetLine.Hours := Hours;
      ServiceOrderBudgetLine.Amount := Amount;
      ServiceOrderBudgetLine."Service Location No." := ServiceLocationNo;
      ServiceOrderBudgetLine."Source Type" := ServiceOrderBudgetLine."Source Type"::Call;
      ServiceOrderBudgetLine."Glazing Service Call No." := GlazingServiceCallNo;
      ServiceOrderBudgetLine."Glazing Service Call Line No." := GlazingServiceCallLineNo;
      ServiceOrderBudgetLine.CalcTotals;
      ServiceOrderBudgetLine.INSERT(TRUE);

      ServiceOrderBudgetLine.Advised := Advised;
      ServiceOrderBudgetLine.MODIFY;
    END;

    LOCAL PROCEDURE InsertAdviceOrderLine@1100525007(ServiceOrderNo@1100525002 : Code[20];VAR LineNo@1100525001 : Integer;ItemNo@1100525003 : Code[20];Quantity@1100525004 : Decimal;UnitOfMeasureCode@1100525005 : Code[10];Description@1100525006 : Text[100];Description2@1100525012 : Text[50];Price@1100525007 : Decimal;CostObjectCode@1100525008 : Code[20];CostType@1100525009 : Integer;SalesPrice@1100525010 : Decimal;ServiceContractNo@1100525011 : Code[20];VendorNo@1100525014 : Code[20]);
    VAR
      AdviceOrderLine@1100525000 : Record 11012055;
      AdviceOrderLine2@1100525013 : Record 11012055;
    BEGIN
      IF LineNo = 0 THEN BEGIN
        AdviceOrderLine2.SETRANGE("Record Type", AdviceOrderLine2."Record Type"::ServOrder);
        AdviceOrderLine2.SETRANGE("Project No.", '');
        AdviceOrderLine2.SETRANGE("Service Order No.", ServiceOrderNo);
        IF AdviceOrderLine2.FINDLAST THEN
          LineNo := AdviceOrderLine2."Line No.";
      END;

      LineNo := LineNo + 10000;

      AdviceOrderLine."Record Type" := AdviceOrderLine."Record Type"::ServOrder;
      AdviceOrderLine."Service Order No." := ServiceOrderNo;
      AdviceOrderLine."Line No." := LineNo;
      AdviceOrderLine."Item No." := ItemNo;
      AdviceOrderLine."Quantity (Advice)" := Quantity;
      AdviceOrderLine."Unit of Measure" := UnitOfMeasureCode;
      AdviceOrderLine.Description := Description;
      AdviceOrderLine."Description 2" := Description2;
      AdviceOrderLine.VALIDATE("Price (LCY)", Price);
      AdviceOrderLine."Cost Object" := CostObjectCode;
      AdviceOrderLine."Cost Type" := CostType;
      AdviceOrderLine."Sales Price (LCY)" := SalesPrice;
      AdviceOrderLine."Service Contract No." := ServiceContractNo;
      AdviceOrderLine.VALIDATE("Receipt Date", TODAY);
      AdviceOrderLine.VALIDATE("Order Date", TODAY);
      AdviceOrderLine.VALIDATE(Vendor, VendorNo);
      AdviceOrderLine.VALIDATE("Amount (LCY)");
      AdviceOrderLine."Glazing Service Call No." := GlazingServiceCallNo;
      AdviceOrderLine."Glazing Service Call Line No." := GlazingServiceCallLineNo;
      AdviceOrderLine.INSERT(TRUE);
    END;

    LOCAL PROCEDURE InsertSvcOrderCostPlusEntry@1100525000(ServiceOrderNo@1100525001 : Code[20];VAR LineNo@1100525003 : Integer;Description@1100525006 : Text[100];Description2@1100525007 : Text[50];Quantity@1100525008 : Decimal;BasicPrice@1100525010 : Decimal;CostPrice@1100525011 : Decimal;SalesPrice@1100525002 : Decimal;ItemNo@1100525012 : Code[20];ServiceContractNo@1100525013 : Code[20];VATProdPostingGrp@1100525004 : Code[10];CostObject@1210190001 : Code[20]);
    VAR
      ServiceOrderCostPlusEntry@1100525000 : Record 11012825;
      ServiceOrderCostPlusEntry2@1100525005 : Record 11012825;
    BEGIN
      IF LineNo = 0 THEN BEGIN
        ServiceOrderCostPlusEntry2.SETRANGE("Service Order No.", ServiceOrderNo);
        IF ServiceOrderCostPlusEntry2.FINDLAST THEN
          LineNo := ServiceOrderCostPlusEntry2."Line No.";
      END;

      LineNo := LineNo + 10000;

      ServiceOrderCostPlusEntry.VALIDATE("Service Order No.", ServiceOrderNo);
      ServiceOrderCostPlusEntry."Line No." := LineNo;
      ServiceOrderCostPlusEntry.VALIDATE("Item No.", ItemNo);
      ServiceOrderCostPlusEntry.VALIDATE("Cost Object", CostObject);
      ServiceOrderCostPlusEntry.Description := Description;
      ServiceOrderCostPlusEntry."Description 2" := Description2;
      ServiceOrderCostPlusEntry.VALIDATE(Quantity, Quantity);
      ServiceOrderCostPlusEntry.VALIDATE("Basic Price (LCY)", BasicPrice);
      ServiceOrderCostPlusEntry.VALIDATE("Cost Price (LCY)", CostPrice);
      ServiceOrderCostPlusEntry.VALIDATE("Sales Price (LCY)", SalesPrice);
      ServiceOrderCostPlusEntry."Service Contract No." := ServiceContractNo;
      ServiceOrderCostPlusEntry."Glazing Service Call No." := GlazingServiceCallNo;
      ServiceOrderCostPlusEntry."Glazing Service Call Line No." := GlazingServiceCallLineNo;
      ServiceOrderCostPlusEntry.INSERT(TRUE);

      ServiceOrderCostPlusEntry.VALIDATE("VAT Prod. Posting Group", VATProdPostingGrp);
      ServiceOrderCostPlusEntry.VALIDATE("Surcharge %", ServiceOrderCostPlusEntry.GetSurcharge);
      ServiceOrderCostPlusEntry.GetDiscountPerc;
      ServiceOrderCostPlusEntry.MODIFY;
    END;

    PROCEDURE SplitGlazServCallLineToVAT@1100525003(VAR TempGlazingServCallLine@1100525000 : TEMPORARY Record 11125778;VAR IGlazingServCallLine@1100525001 : Record 11125778;ICostPlusType@1210190000 : ' ,Removal,Mounting,Item,Assembly');
    VAR
      lvGlazingServCallLine@1100525002 : Record 11125778;
      TempVatProdPostingGroup@1100525003 : TEMPORARY Record 324;
      GlazingServiceCallActivity@1100525005 : Record 11125781;
      GlazingServiceCallAssembly@1100525004 : Record 11125779;
      GlazingServiceCall@1100525007 : Record 11125777;
      VATPostingSetup@1100525008 : Record 325;
      LineNo@1100525006 : Integer;
    BEGIN
      lvGlazingServCallLine.COPYFILTERS(IGlazingServCallLine);
      TempGlazingServCallLine.RESET;
      TempGlazingServCallLine.DELETEALL;

      LineNo := 10000;
      IF lvGlazingServCallLine.FINDSET THEN BEGIN
        GlazingServiceCall.GET(lvGlazingServCallLine."Glazing Service Call No.");
        REPEAT
          TempVatProdPostingGroup.DELETEALL;
          IF ICostPlusType IN [ICostPlusType::" ", ICostPlusType::Item] THEN BEGIN
            TempVatProdPostingGroup.Code := lvGlazingServCallLine."VAT Prod. Posting Group Item";
            TempVatProdPostingGroup.INSERT;
          END;

          IF ICostPlusType IN [ICostPlusType::" ", ICostPlusType::Removal, ICostPlusType::Mounting] THEN BEGIN
            GlazingServiceCallActivity.SETRANGE("Glazing Service Call No.", lvGlazingServCallLine."Glazing Service Call No.");
            GlazingServiceCallActivity.SETRANGE("Glazing Service Call Line No.", lvGlazingServCallLine."Line No.");
            IF ICostPlusType <> ICostPlusType::" " THEN
              GlazingServiceCallActivity.SETRANGE(Type, ICostPlusType);
            IF GlazingServiceCallActivity.FINDSET THEN BEGIN
              REPEAT
                TempVatProdPostingGroup.Code := GlazingServiceCallActivity."Labor VAT Prod. Post. Grp";
                IF TempVatProdPostingGroup.INSERT THEN;
                TempVatProdPostingGroup.Code := GlazingServiceCallActivity."Material VAT Prod. Post. Grp";
                IF TempVatProdPostingGroup.INSERT THEN;
                TempVatProdPostingGroup.Code := GlazingServiceCallActivity."Subcontr. VAT Prod. Post. Grp";
                IF TempVatProdPostingGroup.INSERT THEN;
                TempVatProdPostingGroup.Code := GlazingServiceCallActivity."Plant VAT Prod. Post. Grp";
                IF TempVatProdPostingGroup.INSERT THEN;
              UNTIL GlazingServiceCallActivity.NEXT = 0;
            END;
          END;

          IF ICostPlusType IN [ICostPlusType::" ", ICostPlusType::Assembly] THEN BEGIN
            GlazingServiceCallAssembly.SETRANGE("Glazing Service Call No.", lvGlazingServCallLine."Glazing Service Call No.");
            GlazingServiceCallAssembly.SETRANGE("Glazing Service Call Line No.", lvGlazingServCallLine."Line No.");
            IF GlazingServiceCallAssembly.FINDSET THEN BEGIN
              REPEAT
                TempVatProdPostingGroup.Code := GlazingServiceCallAssembly."VAT Prod. Posting Group";
                IF TempVatProdPostingGroup.INSERT THEN;
              UNTIL GlazingServiceCallAssembly.NEXT = 0;
            END;
          END;

          IF TempVatProdPostingGroup.FINDSET THEN BEGIN
            REPEAT
              IF NOT VATPostingSetup.GET(GlazingServiceCall."VAT Bus. Posting Group", TempVatProdPostingGroup.Code) THEN
                VATPostingSetup.INIT;

              TempGlazingServCallLine.TRANSFERFIELDS(lvGlazingServCallLine);

              TempGlazingServCallLine."Line No." := LineNo;
              LineNo += 10000;

              IF TempGlazingServCallLine."VAT Prod. Posting Group Item" <> TempVatProdPostingGroup.Code THEN BEGIN
                TempGlazingServCallLine."Item Sales Amount" := 0;
                TempGlazingServCallLine."Item Sales VAT Amount" := 0;
                TempGlazingServCallLine."Item Sales Amount incl. VAT" := 0;
                TempGlazingServCallLine."Item Sales Price" := 0;
                TempGlazingServCallLine."Item No." := '';
              END;

              TempGlazingServCallLine."Active VAT Prod. Posting Group" := TempVatProdPostingGroup.Code;
              TempGlazingServCallLine."Original Line No." :=  lvGlazingServCallLine."Line No.";
              TempGlazingServCallLine."VAT % Item" := VATPostingSetup."VAT %";
              TempGlazingServCallLine.INSERT;

            UNTIL TempVatProdPostingGroup.NEXT =0 ;
          END;
        UNTIL lvGlazingServCallLine.NEXT = 0;
      END;
    END;

    PROCEDURE GetGlazingActivityDescription@1100527405(IGlazingActivityCode@1100527400 : Code[10]) : Text[50];
    VAR
      GlazingActivity@1100527401 : Record 11125768;
    BEGIN
      IF GlazingActivity.GET(IGlazingActivityCode) THEN
        EXIT(GlazingActivity.Description);
    END;

    LOCAL PROCEDURE CalculateStatus@1100525006(GlazingServiceCallNo@1100525000 : Code[20]) : Integer;
    VAR
      GlazingServiceCall@1100525002 : Record 11125777;
      GlazingServiceCallLine@1100525001 : Record 11125778;
      GlazingServiceCallStatus@1100528601 : Integer;
      IsHandled@1100528600 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeCalculateStatus(GlazingServiceCallNo, GlazingServiceCallStatus, IsHandled);
      IF IsHandled THEN
        EXIT(GlazingServiceCallStatus);
      GlazingServiceCallLine.SETCURRENTKEY("Glazing Service Call No.", "Service Order No.");
      GlazingServiceCallLine.SETRANGE("Glazing Service Call No.", GlazingServiceCallNo);
      GlazingServiceCallLine.SETRANGE("Service Order No.", '');

      CASE GlazingServiceCallLine.ISEMPTY OF
        TRUE: EXIT(GlazingServiceCall.Status::"In Progress");
        FALSE: EXIT(GlazingServiceCall.Status::Released);
      END;
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeRun@1100528600(VAR GlazingServiceCall@1100528600 : Record 11125777);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterRun@1100528601(VAR GlazingServiceCall@1100528600 : Record 11125777);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCalculateStatus@1100528602(GlazingServiceCallNo@1100528600 : Code[20];VAR GlazingServiceCallStatus@1100528601 : Integer;VAR IsHandled@1100528602 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

