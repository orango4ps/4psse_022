OBJECT Codeunit 11012641 Entities OSA WS
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      OSAUserSetupGAP@1100528702 : Record 11124993;
      ProductsGAP@1100528701 : Record 11124990;
      UserByAppSetupGroupGAP@1100528700 : Record 11124980;

    LOCAL PROCEDURE GetGlobalSettings@1100528719(Username@1100528700 : Code[100]);
    BEGIN
      UserByAppSetupGroupGAP.GET(Username, ProductsGAP.GetProductCodeOSA);
      OSAUserSetupGAP.GET(UserByAppSetupGroupGAP."Group Name", Username);
    END;

    [External]
    PROCEDURE GetProjectComposite@1100528723(Username@1100528701 : Code[100];ProjectNo@1100528702 : Code[20];VAR Base64String@1100528700 : BigText);
    BEGIN
      GetProjectComposites2(Username, ProjectNo, ProjectNo, Base64String);
    END;

    [External]
    PROCEDURE GetProjectComposites@1100528727(Username@1100528701 : Code[100];VAR Base64String@1100528700 : BigText);
    BEGIN
      GetProjectComposites2(Username, '', '', Base64String);
    END;

    LOCAL PROCEDURE GetProjectComposites2@1100528701(Username@1100528708 : Code[100];FromProjectNo@1100528722 : Code[20];ToProjectNo@1100528723 : Code[20];VAR Base64String@1100528714 : BigText);
    VAR
      JSONManagement@1100528710 : Codeunit 5459;
      JsonConvert@1100528720 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.JsonConvert";
      TextEncodingUTF8@1100528716 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.UTF8Encoding";
      SystemConvert@1100528715 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      JObject@1100528721 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      ProjectComposite@1100528709 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      ProjectComposites@1100528705 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      Documents@1100528706 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      ElementComposites@1100528700 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      PlotComposites@1100528701 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      Checklists@1100528717 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      ChecklistCopyComposites@1100528702 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      IssueComposites@1100528703 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      RegistrationDrawings@1100528713 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      ResponsiblePersons@1100528718 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      DocumentPortalSubsites@1100528719 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      AppUserSetupGAP@1100528704 : Record 11124976;
      ProjectResponsiblePerson@1100528712 : Record 11012040;
      Job@1100528711 : Record 11072003;
      DocumentUsage@1100528707 : Record 11072450;
    BEGIN
      GetGlobalSettings(Username);

      JSONManagement.InitializeEmptyCollection();
      AppUserSetupGAP.GET(Username);
      ProjectResponsiblePerson.SETRANGE("Employee No.", AppUserSetupGAP."Employee No.");
      IF (FromProjectNo <> '') AND (ToProjectNo <> '') THEN
        ProjectResponsiblePerson.SETRANGE("Project No.", FromProjectNo, ToProjectNo);
      IF ProjectResponsiblePerson.FINDSET THEN BEGIN
        REPEAT
          Job.SETRANGE("No.", ProjectResponsiblePerson."Project No.");
          Job.SETRANGE(Status, Job.Status::Open);
          IF Job.FINDFIRST THEN BEGIN
            JSONManagement.InitializeEmptyObject();
            JSONManagement.GetJSONObject(ProjectComposite);

            ProjectToJSON(Job, JObject);
            JSONManagement.AddJObjectToJObject(ProjectComposite, 'Project', JObject);

            GetDocuments(Job.RECORDID, TRUE, Documents);
            JSONManagement.AddJArrayToJObject(ProjectComposite, 'Documents', Documents);

            GetPlotComposites(Job."No.", PlotComposites);
            JSONManagement.AddJArrayToJObject(ProjectComposite, 'Plots', PlotComposites);

            GetElementComposites(Job."No.", ElementComposites);
            JSONManagement.AddJArrayToJObject(ProjectComposite, 'Elements', ElementComposites);

            GetChecklists(Job.RECORDID, Checklists);
            JSONManagement.AddJArrayToJObject(ProjectComposite, 'Checklists', Checklists);

            GetChecklistCopyComposites(Job.RECORDID, ChecklistCopyComposites);
            JSONManagement.AddJArrayToJObject(ProjectComposite, 'ChecklistCopies', ChecklistCopyComposites);

            GetIssueComposites(Job.RECORDID, IssueComposites);
            JSONManagement.AddJArrayToJObject(ProjectComposite, 'Issues', IssueComposites);

            GetDocumentUsages(Job.RECORDID, DocumentUsage.Usage::Registration, RegistrationDrawings);
            JSONManagement.AddJArrayToJObject(ProjectComposite, 'RegistrationDrawings', RegistrationDrawings);

            GetResponsiblePersons(Job."No.", ResponsiblePersons);
            JSONManagement.AddJArrayToJObject(ProjectComposite, 'ResponsiblePersons', ResponsiblePersons);

            GetDocumentPortalSubsites(Job."No.", DocumentPortalSubsites);
            JSONManagement.AddJArrayToJObject(ProjectComposite, 'AppPageDocumentPortalSubsites', DocumentPortalSubsites);

            JSONManagement.AddJObjectToCollection(ProjectComposite);
          END;
        UNTIL ProjectResponsiblePerson.NEXT = 0;
      END;
      JSONManagement.GetJsonArray(ProjectComposites);
      TextEncodingUTF8 := TextEncodingUTF8.UTF8Encoding;
      Base64String.ADDTEXT(SystemConvert.ToBase64String(TextEncodingUTF8.GetBytes(JsonConvert.SerializeObject(ProjectComposites))));
    END;

    LOCAL PROCEDURE GetDocuments@1100528710(LinkedTo@1100528700 : RecordID;CheckDocumentTypeGroup@1100528706 : Boolean;VAR Documents@1100528704 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray");
    VAR
      JSONManagement@1100528703 : Codeunit 5459;
      JObject@1100528702 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      DocumentTypeGroupLine@1100528710 : Record 11128549;
      DocumentLink@1100528705 : Record 11012747;
      DocumentProperties@1100528701 : Record 11012746;
      UserDocumentTypeGroup@1100528707 : Code[10];
    BEGIN
      JSONManagement.InitializeEmptyCollection();
      DocumentLink.SETRANGE("Internal Company", COMPANYNAME);
      DocumentLink.SETRANGE("Record ID", LinkedTo);
      IF DocumentLink.FINDSET THEN BEGIN
        REPEAT
          IF DocumentProperties.GET(DocumentLink."Document No.") THEN BEGIN
            IF DocumentProperties."Available for Field Service" THEN BEGIN
              UserDocumentTypeGroup := OSAUserSetupGAP.GetDocumentTypeGroup;
              DocumentTypeGroupLine.SETRANGE("Document Type Group", UserDocumentTypeGroup);
              DocumentTypeGroupLine.SETRANGE("Document Type", DocumentProperties."Document Type");
              IF (NOT CheckDocumentTypeGroup) OR
                 (UserDocumentTypeGroup = '') OR
                 (NOT DocumentTypeGroupLine.ISEMPTY) THEN BEGIN
                DocumentToJSON(DocumentProperties, JObject);

                JSONManagement.AddJObjectToCollection(JObject);
              END;
            END;
          END;
        UNTIL DocumentLink.NEXT = 0;
      END;
      JSONManagement.GetJsonArray(Documents);
    END;

    LOCAL PROCEDURE GetPlotComposites@1100528707(ProjectNo@1100528700 : Code[20];VAR PlotComposites@1100528704 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray");
    VAR
      JSONManagement@1100528703 : Codeunit 5459;
      JObject@1100528702 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      PlotComposite@1100528710 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      Documents@1100528707 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      ChecklistCopyComposites@1100528706 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      IssueComposites@1100528705 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      RegistrationDrawings@1100528709 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      Plot@1100528701 : Record 11012500;
      DocumentUsage@1100528708 : Record 11072450;
    BEGIN
      JSONManagement.InitializeEmptyCollection();
      Plot.SETRANGE("Project No.", ProjectNo);
      IF Plot.FINDSET THEN BEGIN
        REPEAT
          JSONManagement.InitializeEmptyObject();
          JSONManagement.GetJSONObject(PlotComposite);

          PlotToJSON(Plot, JObject);
          JSONManagement.AddJObjectToJObject(PlotComposite, 'Plot', JObject);

          GetDocuments(Plot.RECORDID, TRUE, Documents);
          JSONManagement.AddJArrayToJObject(PlotComposite, 'Documents', Documents);

          GetChecklistCopyComposites(Plot.RECORDID, ChecklistCopyComposites);
          JSONManagement.AddJArrayToJObject(PlotComposite, 'ChecklistCopies', ChecklistCopyComposites);

          GetIssueComposites(Plot.RECORDID, IssueComposites);
          JSONManagement.AddJArrayToJObject(PlotComposite, 'Issues', IssueComposites);

          GetDocumentUsages(Plot.RECORDID, DocumentUsage.Usage::Registration, RegistrationDrawings);
          JSONManagement.AddJArrayToJObject(PlotComposite, 'RegistrationDrawings', RegistrationDrawings);

          JSONManagement.AddJObjectToCollection(PlotComposite);
        UNTIL Plot.NEXT = 0;
      END;
      JSONManagement.GetJsonArray(PlotComposites);
    END;

    LOCAL PROCEDURE GetElementComposites@1100528708(ProjectNo@1100528700 : Code[20];VAR ElementComposites@1100528704 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray");
    VAR
      JSONManagement@1100528703 : Codeunit 5459;
      JObject@1100528705 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      ElementComposite@1100528710 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      Documents@1100528707 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      ChecklistCopyComposites@1100528702 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      IssueComposites@1100528706 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      RegistrationDrawings@1100528709 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      ProjectElement@1100528701 : Record 11012010;
      DocumentUsage@1100528708 : Record 11072450;
    BEGIN
      JSONManagement.InitializeEmptyCollection();
      ProjectElement.SETRANGE("Project No.", ProjectNo);
      IF ProjectElement.FINDSET THEN BEGIN
        REPEAT
          JSONManagement.InitializeEmptyObject();
          JSONManagement.GetJSONObject(ElementComposite);

          ProjectElementToJSON(ProjectElement, JObject);
          JSONManagement.AddJObjectToJObject(ElementComposite, 'Element', JObject);

          GetDocuments(ProjectElement.RECORDID, TRUE, Documents);
          JSONManagement.AddJArrayToJObject(ElementComposite, 'Documents', Documents);

          GetChecklistCopyComposites(ProjectElement.RECORDID, ChecklistCopyComposites);
          JSONManagement.AddJArrayToJObject(ElementComposite, 'ChecklistCopies', ChecklistCopyComposites);

          GetIssueComposites(ProjectElement.RECORDID, IssueComposites);
          JSONManagement.AddJArrayToJObject(ElementComposite, 'Issues', IssueComposites);

          GetDocumentUsages(ProjectElement.RECORDID, DocumentUsage.Usage::Registration, RegistrationDrawings);
          JSONManagement.AddJArrayToJObject(ElementComposite, 'RegistrationDrawings', RegistrationDrawings);

          JSONManagement.AddJObjectToCollection(ElementComposite);
        UNTIL ProjectElement.NEXT = 0;
      END;
      JSONManagement.GetJsonArray(ElementComposites);
    END;

    LOCAL PROCEDURE GetChecklists@1100528711(LinkedTo@1100528700 : RecordID;VAR Checklists@1100528704 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray");
    VAR
      JSONManagement@1100528703 : Codeunit 5459;
      JObject@1100528702 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      GenChecklistLink@1100528705 : Record 11125901;
      GenChecklist@1100528701 : Record 11125900;
    BEGIN
      JSONManagement.InitializeEmptyCollection();
      GenChecklistLink.SETRANGE("Linked To", LinkedTo);
      IF GenChecklistLink.FINDSET THEN BEGIN
        REPEAT
          IF GenChecklist.GET(GenChecklistLink."Checklist Code") THEN BEGIN
            ChecklistToJSON(GenChecklist, JObject);

            JSONManagement.AddJObjectToCollection(JObject);
          END;
        UNTIL GenChecklistLink.NEXT = 0;
      END;
      JSONManagement.GetJsonArray(Checklists);
    END;

    PROCEDURE GetChecklistCopyComposite@1100528728(GenChecklistCopy@1100528704 : Record 11125902;VAR ChecklistCopyComposite@1100528701 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject");
    VAR
      JSONManagement@1100528707 : Codeunit 5459;
      JObject@1100528706 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      ChecklistCopyLineComposites@1100528703 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
    BEGIN
      JSONManagement.InitializeEmptyObject();
      JSONManagement.GetJSONObject(ChecklistCopyComposite);

      ChecklistCopyToJSON(GenChecklistCopy, JObject);
      JSONManagement.AddJObjectToJObject(ChecklistCopyComposite, 'ChecklistCopy', JObject);

      GetChecklistCopyLineComposites(GenChecklistCopy."No.", ChecklistCopyLineComposites);
      JSONManagement.AddJArrayToJObject(ChecklistCopyComposite, 'ChecklistCopyLines', ChecklistCopyLineComposites);
    END;

    LOCAL PROCEDURE GetChecklistCopyComposites@1100528706(LinkedTo@1100528700 : RecordID;VAR ChecklistCopyComposites@1100528704 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray");
    VAR
      JSONManagement@1100528703 : Codeunit 5459;
      ChecklistCopyComposite@1100528707 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      GenChecklistCopyLink@1100528705 : Record 11125904;
      GenChecklistCopy@1100528701 : Record 11125902;
    BEGIN
      JSONManagement.InitializeEmptyCollection();
      GenChecklistCopyLink.SETRANGE("Linked To", LinkedTo);
      IF GenChecklistCopyLink.FINDSET THEN BEGIN
        REPEAT
          IF GenChecklistCopy.GET(GenChecklistCopyLink."Checklist Copy No.") THEN BEGIN
            GetChecklistCopyComposite(GenChecklistCopy, ChecklistCopyComposite);
            JSONManagement.AddJObjectToCollection(ChecklistCopyComposite);
          END;
        UNTIL GenChecklistCopyLink.NEXT = 0;
      END;
      JSONManagement.GetJsonArray(ChecklistCopyComposites);
    END;

    LOCAL PROCEDURE GetChecklistCopyLineComposites@1100528713(ChecklistCopyNo@1100528700 : Code[20];VAR ChecklistCopyLineComposites@1100528704 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray");
    VAR
      JSONManagement@1100528703 : Codeunit 5459;
      JObject@1100528702 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      ChecklistCopyLineComposite@1100528707 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      Documents@1100528705 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      Comments@1100528708 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      IssueComposites@1100528706 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      GenChecklistCopyLine@1100528701 : Record 11125903;
      GeneralText@1100528709 : Record 11020260;
    BEGIN
      JSONManagement.InitializeEmptyCollection();
      GenChecklistCopyLine.SETRANGE("Checklist Copy No.", ChecklistCopyNo);
      IF GenChecklistCopyLine.FINDSET THEN BEGIN
        REPEAT
          JSONManagement.InitializeEmptyObject();
          JSONManagement.GetJSONObject(ChecklistCopyLineComposite);

          ChecklistCopyLineToJSON(GenChecklistCopyLine, JObject);
          JSONManagement.AddJObjectToJObject(ChecklistCopyLineComposite, 'ChecklistCopyLine', JObject);

          GetDocuments(GenChecklistCopyLine.RECORDID, TRUE, Documents);
          JSONManagement.AddJArrayToJObject(ChecklistCopyLineComposite, 'Documents', Documents);

          GetComments(GeneralText.Table::GenCheckListCopyLine, GenChecklistCopyLine."Checklist Copy No.", GenChecklistCopyLine."Line No.", Comments);
          JSONManagement.AddJArrayToJObject(ChecklistCopyLineComposite, 'Comments', Comments);

          GetIssueComposites(GenChecklistCopyLine.RECORDID, IssueComposites);
          JSONManagement.AddJArrayToJObject(ChecklistCopyLineComposite, 'Issues', IssueComposites);

          JSONManagement.AddJObjectToCollection(ChecklistCopyLineComposite);
        UNTIL GenChecklistCopyLine.NEXT = 0;
      END;
      JSONManagement.GetJsonArray(ChecklistCopyLineComposites);
    END;

    PROCEDURE GetIssueComposite@1100528729(GenIssue@1100528701 : Record 11125907;VAR IssueComposite@1100528700 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject");
    VAR
      JSONManagement@1100528714 : Codeunit 5459;
      JObject@1100528713 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      Documents@1100528711 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      Comments@1100528710 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      Points@1100528709 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      BeforePhotos@1100528708 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      AfterPhotos@1100528707 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      ChecklistCopyComposites@1100528706 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      DocumentUsage@1100528703 : Record 11072450;
      GeneralText@1100528702 : Record 11020260;
    BEGIN
      JSONManagement.InitializeEmptyObject();
      JSONManagement.GetJSONObject(IssueComposite);

      IssueToJSON(GenIssue, JObject);
      JSONManagement.AddJObjectToJObject(IssueComposite, 'Issue', JObject);

      GetDocuments(GenIssue.RECORDID, FALSE, Documents);
      JSONManagement.AddJArrayToJObject(IssueComposite, 'Documents', Documents);

      GetComments(GeneralText.Table::GenIssue, GenIssue."No.", GenIssue.GetCommentsID, Comments);
      JSONManagement.AddJArrayToJObject(IssueComposite, 'Comments', Comments);

      GetDocumentUsages(GenIssue.RECORDID, DocumentUsage.Usage::Point, Points);
      JSONManagement.AddJArrayToJObject(IssueComposite, 'Points', Points);

      GetDocumentUsages(GenIssue.RECORDID, DocumentUsage.Usage::BeforePhoto, BeforePhotos);
      JSONManagement.AddJArrayToJObject(IssueComposite, 'BeforePhotos', BeforePhotos);

      GetDocumentUsages(GenIssue.RECORDID, DocumentUsage.Usage::AfterPhoto, AfterPhotos);
      JSONManagement.AddJArrayToJObject(IssueComposite, 'AfterPhotos', AfterPhotos);

      GetChecklistCopyComposites(GenIssue.RECORDID, ChecklistCopyComposites);
      JSONManagement.AddJArrayToJObject(IssueComposite, 'ChecklistCopies', ChecklistCopyComposites);
    END;

    LOCAL PROCEDURE GetIssueComposites@1100528709(LinkedTo@1100528700 : RecordID;VAR IssueComposites@1100528704 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray");
    VAR
      JSONManagement@1100528703 : Codeunit 5459;
      IssueComposite@1100528712 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      GenIssueLink@1100528705 : Record 11125908;
      GenIssue@1100528701 : Record 11125907;
    BEGIN
      JSONManagement.InitializeEmptyCollection();
      GenIssueLink.SETRANGE("Linked To", LinkedTo);
      IF GenIssueLink.FINDSET THEN BEGIN
        REPEAT
          IF GenIssue.GET(GenIssueLink."Issue No.") THEN BEGIN
            GetIssueComposite(GenIssue, IssueComposite);
            JSONManagement.AddJObjectToCollection(IssueComposite);
          END;
        UNTIL GenIssueLink.NEXT = 0;
      END;
      JSONManagement.GetJsonArray(IssueComposites);
    END;

    LOCAL PROCEDURE GetDocumentUsages@1100528720(LinkedTo@1100528700 : RecordID;Usage@1100528701 : Integer;VAR DocumentUsages@1100528704 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray");
    VAR
      JSONManagement@1100528703 : Codeunit 5459;
      JObject@1100528702 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      DocumentUsage@1100528705 : Record 11072450;
    BEGIN
      JSONManagement.InitializeEmptyCollection();
      DocumentUsage.SETRANGE("Linked To", LinkedTo);
      DocumentUsage.SETRANGE(Usage, Usage);
      IF DocumentUsage.FINDSET THEN BEGIN
        REPEAT
          DocumentUsageToJSON(DocumentUsage, JObject);

          JSONManagement.AddJObjectToCollection(JObject);
        UNTIL DocumentUsage.NEXT = 0;
      END;
      JSONManagement.GetJsonArray(DocumentUsages);
    END;

    LOCAL PROCEDURE GetResponsiblePersons@1100528721(ProjectNo@1100528700 : Code[20];VAR ResponsiblePersons@1100528704 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray");
    VAR
      JSONManagement@1100528703 : Codeunit 5459;
      JObject@1100528702 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      Issue@1100528701 : Record 11125907;
      Resource@1100528706 : Record 11229278;
    BEGIN
      JSONManagement.InitializeEmptyCollection();
      Issue.GetFilteredResources(ProjectNo, Resource);
      IF Resource.FINDSET THEN BEGIN
        REPEAT
          ResponsiblePersonToJSON(Resource, JObject);

          JSONManagement.AddJObjectToCollection(JObject);
        UNTIL Resource.NEXT = 0;
      END;
      JSONManagement.GetJsonArray(ResponsiblePersons);
    END;

    LOCAL PROCEDURE GetDocumentPortalSubsites@1100528724(ProjectNo@1100528702 : Code[20];VAR DocumentPortalSubsites@1100528701 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray");
    VAR
      JSONManagement@1100528704 : Codeunit 5459;
      JObject@1100528703 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      OSADocumentPortalSubsite@1100528700 : Record 11229952;
    BEGIN
      JSONManagement.InitializeEmptyCollection();
      OSADocumentPortalSubsite.SETRANGE("Project No.", ProjectNo);
      IF OSADocumentPortalSubsite.FINDSET THEN BEGIN
        REPEAT
          DocumentPortalSubsiteToJSON(OSADocumentPortalSubsite, JObject);

          JSONManagement.AddJObjectToCollection(JObject);
        UNTIL OSADocumentPortalSubsite.NEXT = 0;
      END;
      JSONManagement.GetJsonArray(DocumentPortalSubsites);
    END;

    LOCAL PROCEDURE GetComments@1100528717(Table@1100528704 : Integer;Code@1100528705 : Code[20];TableLineNo@1100528706 : Integer;VAR Comments@1100528700 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray");
    VAR
      JSONManagement@1100528703 : Codeunit 5459;
      JObject@1100528702 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      GeneralText@1100528701 : Record 11020260;
      GroupSeqNo@1100528707 : Integer;
      GroupDate@1100528708 : DateTime;
      GroupComment@1100528709 : Text;
      PrevEndsWithLineBreak@1100528710 : Boolean;
    BEGIN
      JSONManagement.InitializeEmptyCollection();
      GeneralText.SETRANGE(Table, Table);
      GeneralText.SETRANGE(Code, Code);
      GeneralText.SETRANGE("Table Line No.", TableLineNo);
      IF GeneralText.FINDSET THEN BEGIN
        REPEAT
          GroupSeqNo := GroupSeqNo + 1;
          GroupDate := CREATEDATETIME(GeneralText.Date, GeneralText."Time Created");
          GroupComment := GeneralText.Text;

          WHILE GeneralText.IsNextLineSameGroup DO BEGIN
            IF GeneralText."Line Break" THEN
              GroupComment := GroupComment + GeneralText.CRLF;
            PrevEndsWithLineBreak := GeneralText."Line Break";

            GeneralText.NEXT;

            IF NOT PrevEndsWithLineBreak THEN
              GroupComment := GroupComment + ' ';
            GroupComment := GroupComment + GeneralText.Text;
          END;

          CommentsToJSON(GroupSeqNo, GroupComment, GroupDate, GeneralText."Created by", GeneralText.GetCreatedByName, JObject);

          JSONManagement.AddJObjectToCollection(JObject);
        UNTIL GeneralText.NEXT = 0;
      END;
      JSONManagement.GetJsonArray(Comments);
    END;

    LOCAL PROCEDURE "---"@1100528712();
    BEGIN
    END;

    LOCAL PROCEDURE ProjectToJSON@1100528702(Job@1100528700 : Record 11072003;VAR JObject@1100528705 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject");
    VAR
      JSONManagement@1100528701 : Codeunit 5459;
      GeneralText@1100528703 : Record 11020260;
    BEGIN
      JSONManagement.InitializeEmptyObject();
      JSONManagement.GetJSONObject(JObject);
      JSONManagement.AddJPropertyToJObject(JObject, 'No', Job."No.");
      JSONManagement.AddJPropertyToJObject(JObject, 'Description', Job.Description);
      JSONManagement.AddJPropertyToJObject(JObject, 'Address', Job.Address);
      JSONManagement.AddJPropertyToJObject(JObject, 'PostCode', Job."Post Code");
      JSONManagement.AddJPropertyToJObject(JObject, 'City', Job.City);
    END;

    LOCAL PROCEDURE DocumentToJSON@1100528716(DocumentProperties@1100528700 : Record 11012746;VAR JObject@1100528705 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject");
    VAR
      JSONManagement@1100528701 : Codeunit 5459;
      DPTDocumentVersion@1100528702 : Record 11229944;
      DptMinor@1100528704 : Integer;
      DptMajor@1100528703 : Integer;
      SplitArray@1100528710 : ARRAY [10] OF Text;
      FileSize@1100528706 : Integer;
      ErrorMessage@1100528707 : Text;
      StringFunctions@1100528709 : Codeunit 11012273;
      DocumentManagementWebservice@1100528708 : Codeunit 11012405;
    BEGIN
      DptMajor := 0;
      DptMinor := 0;
      DPTDocumentVersion.SETRANGE("Source Type", DocumentProperties."Document Portal Source Type");
      DPTDocumentVersion.SETRANGE("Source Code", DocumentProperties."Document Portal Source No.");
      DPTDocumentVersion.SETRANGE("Document No.", DocumentProperties."No.");
      IF DPTDocumentVersion.FINDLAST THEN BEGIN
        StringFunctions.SplitString(DPTDocumentVersion.Version, '.', SplitArray);
        IF SplitArray[1] <> '' THEN
          EVALUATE(DptMajor, SplitArray[1]);
        IF SplitArray[2] <> '' THEN
          EVALUATE(DptMinor, SplitArray[2]);
      END;

      //IF DocumentProperties."Document Service URL" <> '' THEN
      //  FileSize := -1 // If the file is stored in the cloud, calculating the size is a huge performance hit.
      //ELSE
      //  FileSize := DocumentManagementWebservice.GetDocumentSizeInBytes(DocumentProperties."No.", ErrorMessage);
      FileSize := -1;

      JSONManagement.InitializeEmptyObject();
      JSONManagement.GetJSONObject(JObject);
      JSONManagement.AddJPropertyToJObject(JObject, 'DocumentNo', DocumentProperties."No.");
      JSONManagement.AddJPropertyToJObject(JObject, 'Description', DocumentProperties.Description);
      JSONManagement.AddJPropertyToJObject(JObject, 'FileName', DocumentProperties.FileNameShort);
      JSONManagement.AddJPropertyToJObject(JObject, 'DocumentType', DocumentProperties."Document Type");
      JSONManagement.AddJPropertyToJObject(JObject, 'CreationDate', DocumentProperties."Creation Date");
      JSONManagement.AddJPropertyToJObject(JObject, 'MajorVersion', DptMajor);
      JSONManagement.AddJPropertyToJObject(JObject, 'MinorVersion', DptMinor);
      JSONManagement.AddJPropertyToJObject(JObject, 'FileSizeInBytes', FileSize);
    END;

    LOCAL PROCEDURE PlotToJSON@1100528703(Plot@1100528700 : Record 11012500;VAR JObject@1100528705 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject");
    VAR
      JSONManagement@1100528701 : Codeunit 5459;
    BEGIN
      JSONManagement.InitializeEmptyObject();
      JSONManagement.GetJSONObject(JObject);
      JSONManagement.AddJPropertyToJObject(JObject, 'ProjectNo', Plot."Project No.");
      JSONManagement.AddJPropertyToJObject(JObject, 'No', Plot."Plot No.");
    END;

    LOCAL PROCEDURE ProjectElementToJSON@1100528704(ProjectElement@1100528700 : Record 11012010;VAR JObject@1100528705 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject");
    VAR
      JSONManagement@1100528701 : Codeunit 5459;
    BEGIN
      JSONManagement.InitializeEmptyObject();
      JSONManagement.GetJSONObject(JObject);
      JSONManagement.AddJPropertyToJObject(JObject, 'ProjectNo', ProjectElement."Project No.");
      JSONManagement.AddJPropertyToJObject(JObject, 'Code', ProjectElement.Element);
      JSONManagement.AddJPropertyToJObject(JObject, 'Description', ProjectElement.Description);
    END;

    LOCAL PROCEDURE ChecklistToJSON@1100528705(GenChecklist@1100528700 : Record 11125900;VAR JObject@1100528705 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject");
    VAR
      JSONManagement@1100528701 : Codeunit 5459;
    BEGIN
      JSONManagement.InitializeEmptyObject();
      JSONManagement.GetJSONObject(JObject);
      JSONManagement.AddJPropertyToJObject(JObject, 'Code', GenChecklist.Code);
      JSONManagement.AddJPropertyToJObject(JObject, 'Description', GenChecklist.Description);
    END;

    LOCAL PROCEDURE ChecklistCopyToJSON@1100528714(GenChecklistCopy@1100528700 : Record 11125902;VAR JObject@1100528705 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject");
    VAR
      JSONManagement@1100528701 : Codeunit 5459;
      GeneralText@1100528703 : Record 11020260;
    BEGIN
      JSONManagement.InitializeEmptyObject();
      JSONManagement.GetJSONObject(JObject);
      JSONManagement.AddJPropertyToJObject(JObject, 'No', GenChecklistCopy."No.");
      JSONManagement.AddJPropertyToJObject(JObject, 'ChecklistCode', GenChecklistCopy."Checklist Code");
      JSONManagement.AddJPropertyToJObject(JObject, 'Description', GenChecklistCopy.Description);
      JSONManagement.AddJPropertyToJObject(JObject, 'Date', GenChecklistCopy.Date);
    END;

    LOCAL PROCEDURE ChecklistCopyLineToJSON@1100528715(GenChecklistCopyLine@1100528700 : Record 11125903;VAR JObject@1100528705 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject");
    VAR
      JSONManagement@1100528701 : Codeunit 5459;
      GeneralText@1100528703 : Record 11020260;
    BEGIN
      JSONManagement.InitializeEmptyObject();
      JSONManagement.GetJSONObject(JObject);
      JSONManagement.AddJPropertyToJObject(JObject, 'ChecklistCopyNo', GenChecklistCopyLine."Checklist Copy No.");
      JSONManagement.AddJPropertyToJObject(JObject, 'LineNo', GenChecklistCopyLine."Line No.");
      JSONManagement.AddJPropertyToJObject(JObject, 'LineType', GenChecklistCopyLine."Line Type");
      JSONManagement.AddJPropertyToJObject(JObject, 'Description', GenChecklistCopyLine.Description);
      JSONManagement.AddJPropertyToJObject(JObject, 'FieldType', GenChecklistCopyLine."Field Type");
      JSONManagement.AddJPropertyToJObject(JObject, 'OptionSetCode', GenChecklistCopyLine."Option Set Code");
      JSONManagement.AddJPropertyToJObject(JObject, 'Value', GenChecklistCopyLine.Value);
      JSONManagement.AddJPropertyToJObject(JObject, 'NumericValue', GenChecklistCopyLine."Numeric Value");
      JSONManagement.AddJPropertyToJObject(JObject, 'DateValue', GenChecklistCopyLine."Date Value");
      JSONManagement.AddJPropertyToJObject(JObject, 'OptionValueCode', GenChecklistCopyLine."Option Value Code");
      JSONManagement.AddJPropertyToJObject(JObject, 'DesiredValue', GenChecklistCopyLine."Desired Value");
    END;

    LOCAL PROCEDURE IssueToJSON@1100528700(GenIssue@1100528700 : Record 11125907;VAR JObject@1100528705 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject");
    VAR
      JSONManagement@1100528701 : Codeunit 5459;
      GeneralText@1100528703 : Record 11020260;
    BEGIN
      JSONManagement.InitializeEmptyObject();
      JSONManagement.GetJSONObject(JObject);
      JSONManagement.AddJPropertyToJObject(JObject, 'No', GenIssue."No.");
      JSONManagement.AddJPropertyToJObject(JObject, 'Description', GenIssue.Description);
      JSONManagement.AddJPropertyToJObject(JObject, 'Status', GenIssue.Status);
      JSONManagement.AddJPropertyToJObject(JObject, 'SolutionDeadline', GenIssue."Solution Deadline");
      JSONManagement.AddJPropertyToJObject(JObject, 'IssueType', GenIssue."Issue Type");
      JSONManagement.AddJPropertyToJObject(JObject, 'ResponsiblePerson', GenIssue."Responsible Person");
      JSONManagement.AddJPropertyToJObject(JObject, 'CreatedOn', GenIssue."Created On");
      JSONManagement.AddJPropertyToJObject(JObject, 'CreatedBy', GenIssue."Created By");
      JSONManagement.AddJPropertyToJObject(JObject, 'DetailedDescription', GeneralText.GetIssueText(GenIssue."No.", GenIssue.GetDetailedDescriptionID));
      JSONManagement.AddJPropertyToJObject(JObject, 'Solution', GeneralText.GetIssueText(GenIssue."No.", GenIssue.GetSolutionDescriptionID));
    END;

    LOCAL PROCEDURE DocumentUsageToJSON@1100528718(DocumentUsage@1100528700 : Record 11072450;VAR JObject@1100528705 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject");
    VAR
      JSONManagement@1100528701 : Codeunit 5459;
    BEGIN
      DocumentUsage.CALCFIELDS("Document Description");

      JSONManagement.InitializeEmptyObject();
      JSONManagement.GetJSONObject(JObject);
      JSONManagement.AddJPropertyToJObject(JObject, 'Usage', DocumentUsage.Usage);
      JSONManagement.AddJPropertyToJObject(JObject, 'DocumentNo', DocumentUsage."Document No.");
      JSONManagement.AddJPropertyToJObject(JObject, 'DocumentDescription', DocumentUsage."Document Description");
      JSONManagement.AddJPropertyToJObject(JObject, 'PointX', DocumentUsage."Point-X");
      JSONManagement.AddJPropertyToJObject(JObject, 'PointY', DocumentUsage."Point-Y");
    END;

    LOCAL PROCEDURE ResponsiblePersonToJSON@1100528722(Resource@1100528700 : Record 11229278;VAR JObject@1100528705 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject");
    VAR
      JSONManagement@1100528701 : Codeunit 5459;
    BEGIN
      JSONManagement.InitializeEmptyObject();
      JSONManagement.GetJSONObject(JObject);
      JSONManagement.AddJPropertyToJObject(JObject, 'No', Resource."No.");
      JSONManagement.AddJPropertyToJObject(JObject, 'Name', Resource.Name);
    END;

    LOCAL PROCEDURE DocumentPortalSubsiteToJSON@1100528725(OSADocumentPortalSubsite@1100528700 : Record 11229952;VAR JObject@1100528705 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject");
    VAR
      JSONManagement@1100528701 : Codeunit 5459;
    BEGIN
      JSONManagement.InitializeEmptyObject();
      JSONManagement.GetJSONObject(JObject);
      JSONManagement.AddJPropertyToJObject(JObject, 'AppPage', OSADocumentPortalSubsite."App Page");
      JSONManagement.AddJPropertyToJObject(JObject, 'DocumentPortalSubsite', OSADocumentPortalSubsite."Document Portal Subsite");
      JSONManagement.AddJPropertyToJObject(JObject, 'DocumentType', OSADocumentPortalSubsite."Document Type");
    END;

    LOCAL PROCEDURE CommentsToJSON@1100528726(SeqNo@1100528702 : Integer;Comment@1100528703 : Text;CreationDate@1100528704 : DateTime;CreatedBy@1100528706 : Code[50];CreatedByName@1100528707 : Text;VAR JObject@1100528705 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject");
    VAR
      JSONManagement@1100528701 : Codeunit 5459;
    BEGIN
      JSONManagement.InitializeEmptyObject();
      JSONManagement.GetJSONObject(JObject);
      JSONManagement.AddJPropertyToJObject(JObject, 'SeqNo', SeqNo);
      JSONManagement.AddJPropertyToJObject(JObject, 'Comment', Comment);
      JSONManagement.AddJPropertyToJObject(JObject, 'CreationDate', CreationDate);
      JSONManagement.AddJPropertyToJObject(JObject, 'CreatedBy', CreatedBy);
      JSONManagement.AddJPropertyToJObject(JObject, 'CreatedByName', CreatedByName);
    END;

    BEGIN
    END.
  }
}

