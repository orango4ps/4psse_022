OBJECT Table 12013615 EX Proposal
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EXF510000;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Import Journal Approvers;
               SVE=Importjournal attestanter];
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;CaptionML=[ENU=Entry No.;
                                                              SVE=L”pnr] }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              SVE=Radnr] }
    { 3   ;   ;Approver Order      ;Integer       ;CaptionML=[ENU=Approver Order;
                                                              SVE=Attestordning] }
    { 10  ;   ;Approver            ;Code50        ;TableRelation="EX User Group".Code WHERE (Blocked=CONST(No));
                                                   OnValidate=VAR
                                                                ExPurchDocLine@1100285000 : Record 12013588;
                                                                ProposalLine@1100285003 : Record 12013615;
                                                                ExFlowWorkFlowMgt@1100285001 : Codeunit 12013593;
                                                                ExFlow@1100285002 : Codeunit 12013601;
                                                              BEGIN
                                                                Approver := ExFlow.FindUserGroup(Approver,"Group Name",FALSE);

                                                                IF CurrFieldNo = FIELDNO(Approver) THEN BEGIN
                                                                  IF ExPurchDocLine.GET("Entry No.","Line No.") THEN BEGIN
                                                                    IF ExPurchDocLine."Applied Template Rule" <> '' THEN BEGIN
                                                                      ExPurchDocLine."Applied Template Rule" := '';
                                                                      ExPurchDocLine.MODIFY;
                                                                    END;
                                                                    IF Approver <> '' THEN
                                                                      IF NOT ExPurchDocLine.Approval THEN BEGIN
                                                                        ExPurchDocLine.Approval := TRUE;
                                                                        ExPurchDocLine.MODIFY;
                                                                      END;
                                                                  END;

                                                                  ProposalLine.RESET;
                                                                  ProposalLine.SETRANGE("Entry No.", "Entry No.");
                                                                  ProposalLine.SETRANGE("Line No.", "Line No.");
                                                                  ProposalLine.SETFILTER("Approver Order",'<%1', "Approver Order");
                                                                  IF ProposalLine.ISEMPTY THEN BEGIN // this line is the first approver
                                                                    ExPurchDocLine.RESET;
                                                                    ExPurchDocLine.SETRANGE("Inbound Document No.", "Entry No.");
                                                                    ExPurchDocLine.FIND('-');
                                                                    ExFlowWorkFlowMgt.InsertDimFromUser(Approver,ExPurchDocLine,FALSE,FALSE);
                                                                    ExPurchDocLine.MODIFY;
                                                                  END;

                                                                  Changed := TRUE;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Approver;
                                                              SVE=Attestgrupp];
                                                   NotBlank=Yes }
    { 11  ;   ;Group Name          ;Text50        ;CaptionML=[ENU=Group Name;
                                                              SVE=Gruppnamn] }
    { 15  ;   ;Changed             ;Boolean       ;CaptionML=[ENU=Manually changed;
                                                              SVE=Manuellt „ndrad];
                                                   Editable=No }
    { 50  ;   ;Copied from Purchase Order;Boolean ;CaptionML=[ENU=Copied from Purchase Order;
                                                              SVE=Kopierad fr†n ink”psorder];
                                                   Editable=No }
    { 100 ;   ;Parallell Approval  ;Boolean       ;OnValidate=BEGIN
                                                                Changed := TRUE;
                                                              END;

                                                   CaptionML=[ENU=Parallell Approval;
                                                              SVE=Parallell attestering] }
    { 652 ;   ;Source              ;Option        ;CaptionML=[ENU=Created in;
                                                              SVE=Skapad i];
                                                   OptionCaptionML=[ENU=Manually in NAV,Manually in Web,From template rule NAV,From template rule Web,Copied from First Approver;
                                                                    SVE=Manuellt i NAV,Manuellt i Webb,Fr†n attestregel NAV,Fr†n attestregel Webb,Kopierad fr†n F”rste Attestant];
                                                   OptionString=Manually in NAV,Manually in Web,From template rule NAV,From template rule Web,Copied from First Approver;
                                                   Editable=No }
    { 653 ;   ;Added from Template Rule;Code20    ;TableRelation="Template Rule".Code;
                                                   CaptionML=[ENU=Added from Template Rule;
                                                              SVE=Tillagd fr†n attestregel];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Entry No.,Line No.,Approver Order       ;Clustered=Yes }
    {    ;Changed                                  }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      EXF02@1100285000 : TextConst 'ENU="Copy approvers to all lines,Copy only to lines below current line ";SVE=Kopiera attestanterna till alla rader,Kopiera enbart till raderna nedanf”r denna rad';
      EXF04@1100285003 : TextConst 'ENU=Copied to %1 other lines.;SVE=Kopierat till %1 andra rader.';

    PROCEDURE NewLineNo@1100285000(CurrProposalLine@1100285000 : Record 12013615;BelowxRec@1100285001 : Boolean);
    VAR
      ProposalLine@1100285002 : Record 12013615;
    BEGIN
      IF ("Entry No." <> 0) AND ("Line No." <> 0) THEN BEGIN
        CASE TRUE OF
          BelowxRec:
            BEGIN
              ProposalLine.SETRANGE("Entry No.","Entry No.");
              ProposalLine.SETRANGE("Line No.","Line No.");
              IF ProposalLine.FINDLAST THEN
                "Approver Order" := ProposalLine."Approver Order" + 10000
            END;
          ELSE
            BEGIN
              ProposalLine.SETRANGE("Entry No.",CurrProposalLine."Entry No.");
              ProposalLine.SETRANGE("Line No.",CurrProposalLine."Line No.");
              ProposalLine.SETFILTER("Approver Order",'<%1',CurrProposalLine."Approver Order");
              IF ProposalLine.FINDLAST THEN
                "Approver Order" := ProposalLine."Approver Order" +
                                    ROUND((CurrProposalLine."Approver Order" - ProposalLine."Approver Order") / 2,1);
            END;
        END;
      END;
    END;

    PROCEDURE SendEmail@1100285001();
    VAR
      ImportHeader@1100285001 : Record 12013587;
      ExUserGroup@1100285000 : Record 12013606;
      ExMailMgt@1100285002 : Codeunit 12013627;
    BEGIN
      ImportHeader.SETRANGE("Inbound Document No.", "Entry No.");
      ImportHeader.FINDFIRST;
      ExUserGroup.GET(Approver);
      ExMailMgt.SendEmailFromUserGroup(ExUserGroup,ImportHeader."Image File Name",ImportHeader."Image Buffer ID");
    END;

    PROCEDURE CopyApprovers@1100285002(ExProp@1100285003 : Record 12013615);
    VAR
      NewExProp@1100285001 : Record 12013615;
      ExImpJnlLine@1100285004 : Record 12013588;
      Selection@1100285002 : Integer;
    BEGIN
      Selection := STRMENU(EXF02,1);

      NewExProp.RESET;
      NewExProp.SETRANGE("Entry No.", ExProp."Entry No.");
      IF Selection = 1 THEN BEGIN
        NewExProp.SETFILTER("Line No.", '<>%1', ExProp."Line No.");
        ExImpJnlLine.SETFILTER("Line No.", '<>%1', ExProp."Line No.");
      END
      ELSE BEGIN
        NewExProp.SETFILTER("Line No.", '>%1', ExProp."Line No.");
        ExImpJnlLine.SETFILTER("Line No.", '>%1', ExProp."Line No.");
      END;

      NewExProp.DELETEALL;

      ExImpJnlLine.SETRANGE("Inbound Document No.", ExProp."Entry No.");
      ExImpJnlLine.SETRANGE(Approval, TRUE);

      IF NOT ExImpJnlLine.FINDSET THEN
        EXIT;

      ExProp.RESET;
      ExProp.SETCURRENTKEY(Changed);
      ExProp.SETRANGE("Entry No.", ExProp."Entry No.");
      ExProp.SETRANGE("Line No.", ExProp."Line No.");
      IF NOT ExProp.FINDSET THEN
        EXIT;

      REPEAT
        ExImpJnlLine.FINDSET;
        REPEAT
          NewExProp.INIT;
          NewExProp."Entry No." := ExImpJnlLine."Inbound Document No.";
          NewExProp."Line No." := ExImpJnlLine."Line No.";
          NewExProp."Approver Order" := ExProp."Approver Order";
          NewExProp.VALIDATE(Approver, ExProp.Approver);
          NewExProp.Changed := TRUE;
          NewExProp.INSERT;
        UNTIL ExImpJnlLine.NEXT = 0;
      UNTIL ExProp.NEXT = 0;

      MESSAGE(STRSUBSTNO(EXF04,ExImpJnlLine.COUNT));
    END;

    BEGIN
    END.
  }
}

