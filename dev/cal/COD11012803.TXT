OBJECT Codeunit 11012803 Service Jnl. Post Batch
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    TableNo=11072008;
    Permissions=TableData 11072011=imd;
    OnRun=BEGIN
            JobJnlLine.COPY(Rec);
            Code;
            Rec := JobJnlLine;
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'DEU=kann nicht %1 Zeichen Åberschreiten;ENU=cannot exceed %1 characters;NLD=kan maximaal %1 karakters bevatten.;NOR=kan ikke overstige %1 tegn;SVE=kan inte vara mer Ñn %1 tecken';
      Text001@1001 : TextConst 'DEU=Buch.-Blattname       #1##########\\;ENU=Journal Batch Name    #1##########\\;NLD=Dagboekbatch          #1##########\\;NOR=Kladdenavn            #1##########\\;SVE=Journalnamn           #1##########\\';
      Text002@1002 : TextConst 'DEU=Zeilen prÅfen         #2######\;ENU=Checking lines        #2######\;NLD=Controleren regels    #2######\;NOR=Kontrollerer linjer   #2######\;SVE=Kontrollerar rader    #2######\';
      Text003@1003 : TextConst 'DEU=Zeilen buchen         #3###### @4@@@@@@@@@@@@@\;ENU=Posting lines         #3###### @4@@@@@@@@@@@@@\;NLD=Boeken regels         #3###### @4@@@@@@@@@@@@@\;NOR=Bokfõrer linjer       #3###### @4@@@@@@@@@@@@@\;SVE=Bokfîring rader       #3###### @4@@@@@@@@@@@@@\';
      Text004@1004 : TextConst 'DEU=Zeilen aktualisieren  #5###### @6@@@@@@@@@@@@@;ENU=Updating lines        #5###### @6@@@@@@@@@@@@@;NLD=Bijwerken regels      #5###### @6@@@@@@@@@@@@@;NOR=Oppdaterer linjer     #5###### @6@@@@@@@@@@@@@;SVE=Uppdatering rader     #5###### @6@@@@@@@@@@@@@';
      Text005@1005 : TextConst 'DEU=Zeilen buchen         #3###### @4@@@@@@@@@@@@@;ENU=Posting lines         #3###### @4@@@@@@@@@@@@@;NLD=Boeken regels         #3###### @4@@@@@@@@@@@@@;NOR=Bokfõrer linjer       #3###### @4@@@@@@@@@@@@@;SVE=Bokfîring rader       #3###### @4@@@@@@@@@@@@@';
      Text006@1006 : TextConst 'DEU=Ein Maximum von %1 Buchungsnr.-Serien;ENU=A maximum of %1 posting number series can be used in each journal.;NLD=U kunt in elk dagboek maximaal %1 documentnummerreeksen gebruiken.;NOR=Opptil %1 bokfõringsnummerserier kan brukes i hver kladd.;SVE=Maximalt kan %1 nr-serier fîr bokfîring anvÑndas i varje journal.';
      Text007@1007 : TextConst 'DEU=<Month Text>;ENU=<Month Text>;NLD=<Month Text>;NOR=<Month Text>;SVE=<Month Text>';
      AccountingPeriod@1008 : Record 50;
      JobJnlTemplate@1009 : Record 11072007;
      JobJnlBatch@1010 : Record 11072011;
      JobJnlLine@1011 : Record 11072008;
      JobJnlLine2@1012 : Record 11072008;
      JobJnlLine3@1013 : Record 11072008;
      JobLedgEntry@1015 : Record 11072005;
      JobReg@1016 : Record 11072012;
      NoSeries@1017 : TEMPORARY Record 308;
      JobJnlCheckLine@1018 : Codeunit 11072002;
      JobJnlPostLine@1019 : Codeunit 11072003;
      NoSeriesMgt@1020 : Codeunit 396;
      NoSeriesMgt2@1021 : ARRAY [10] OF Codeunit 396;
      Window@1023 : Dialog;
      JobRegNo@1024 : Integer;
      StartLineNo@1025 : Integer;
      Day@1026 : Integer;
      Week@1027 : Integer;
      Month@1028 : Integer;
      MonthText@1029 : Text[30];
      LineCount@1030 : Integer;
      NoOfRecords@1031 : Integer;
      LastDocNo@1032 : Code[20];
      LastDocNo2@1033 : Code[20];
      LastPostedDocNo@1034 : Code[20];
      NoOfPostingNoSeries@1035 : Integer;
      PostingNoSeriesNo@1036 : Integer;
      "0DF"@1037 : DateFormula;

    LOCAL PROCEDURE Code@1();
    VAR
      UpdateAnalysisView@1002 : Codeunit 410;
    BEGIN
      WITH JobJnlLine DO BEGIN
        SETRANGE("Journal Template Name","Journal Template Name");
        SETRANGE("Journal Batch Name","Journal Batch Name");
        LOCKTABLE;

        JobJnlTemplate.GET("Journal Template Name");
        JobJnlBatch.GET("Journal Template Name","Journal Batch Name");
        IF STRLEN(INCSTR(JobJnlBatch.Name)) > MAXSTRLEN(JobJnlBatch.Name) THEN
          JobJnlBatch.FIELDERROR(
            Name,
            STRSUBSTNO(
              Text000,
              MAXSTRLEN(JobJnlBatch.Name)));

        IF JobJnlTemplate.Recurring THEN BEGIN
          SETRANGE("Posting Date",0D,WORKDATE);
          SETFILTER("Expiration Date",'%1 | %2..',0D,WORKDATE);
        END;

        IF NOT FIND('=><') THEN BEGIN
          "Line No." := 0;
          COMMIT;
          EXIT;
        END;

        IF JobJnlTemplate.Recurring THEN
          Window.OPEN(
            Text001 +
            Text002 +
            Text003 +
            Text004)
        ELSE
          Window.OPEN(
            Text001 +
            Text002 +
            Text005);
        Window.UPDATE(1,"Journal Batch Name");

        // Check lines
        LineCount := 0;
        StartLineNo := "Line No.";
        REPEAT
          LineCount := LineCount + 1;
          Window.UPDATE(2,LineCount);
          CheckRecurringLine(JobJnlLine);
          JobJnlCheckLine.RunCheck(JobJnlLine);
          IF NEXT = 0 THEN
            FINDSET;
        UNTIL "Line No." = StartLineNo;
        NoOfRecords := LineCount;

        // Find next register no.
        JobLedgEntry.LOCKTABLE;
        IF JobLedgEntry.FINDLAST THEN;
        JobReg.LOCKTABLE;
        IF JobReg.FINDLAST AND (JobReg."To Entry No." = 0) THEN
          JobRegNo := JobReg."No."
        ELSE
          JobRegNo := JobReg."No." + 1;

        // Post lines
        LineCount := 0;
        LastDocNo := '';
        LastDocNo2 := '';
        LastPostedDocNo := '';
        FINDSET;
        REPEAT
          LineCount := LineCount + 1;
          Window.UPDATE(3,LineCount);
          Window.UPDATE(4,ROUND(LineCount / NoOfRecords * 10000,1));
          IF NOT EmptyLine AND
             (JobJnlBatch."No. Series" <> '') AND
             ("Document No." <> LastDocNo2)
          THEN
            TESTFIELD("Document No.",NoSeriesMgt.GetNextNo(JobJnlBatch."No. Series","Posting Date",FALSE));
          LastDocNo2 := "Document No.";
          MakeRecurringTexts(JobJnlLine);
          IF "Posting No. Series" = '' THEN
            "Posting No. Series" := JobJnlBatch."No. Series"
          ELSE
            IF NOT EmptyLine THEN
              IF "Document No." = LastDocNo THEN
                "Document No." := LastPostedDocNo
              ELSE BEGIN
                IF NOT NoSeries.GET("Posting No. Series") THEN BEGIN
                  NoOfPostingNoSeries := NoOfPostingNoSeries + 1;
                  IF NoOfPostingNoSeries > ARRAYLEN(NoSeriesMgt2) THEN
                    ERROR(
                      Text006,
                      ARRAYLEN(NoSeriesMgt2));
                  NoSeries.Code := "Posting No. Series";
                  NoSeries.Description := FORMAT(NoOfPostingNoSeries);
                  NoSeries.INSERT;
                END;
                LastDocNo := "Document No.";
                EVALUATE(PostingNoSeriesNo,NoSeries.Description);
                "Document No." := NoSeriesMgt2[PostingNoSeriesNo].GetNextNo("Posting No. Series","Posting Date",FALSE);
                LastPostedDocNo := "Document No.";
              END;
          JobJnlPostLine.RunWithCheck(JobJnlLine);
        UNTIL NEXT = 0;

        // Copy register no. and current journal batch name to the job journal
        IF NOT JobReg.FINDLAST OR (JobReg."No." <> JobRegNo) THEN
          JobRegNo := 0;

        INIT;
        "Line No." := JobRegNo;

        // Update/delete lines
        IF JobRegNo <> 0 THEN BEGIN

          IF JobJnlTemplate.Recurring THEN BEGIN
            // Recurring journal
            LineCount := 0;
            JobJnlLine2.COPYFILTERS(JobJnlLine);
            JobJnlLine2.FINDSET(TRUE, FALSE);
            REPEAT
              LineCount := LineCount + 1;
              Window.UPDATE(5,LineCount);
              Window.UPDATE(6,ROUND(LineCount / NoOfRecords * 10000,1));
              IF JobJnlLine2."Posting Date" <> 0D THEN
                JobJnlLine2.VALIDATE("Posting Date",CALCDATE(JobJnlLine2."Recurring Frequency",JobJnlLine2."Posting Date"));
              IF (JobJnlLine2."Recurring Method" = JobJnlLine2."Recurring Method"::Variable) AND
                 (JobJnlLine2."No." <> '')
              THEN BEGIN
                JobJnlLine2.Quantity := 0;
                JobJnlLine2."Total Cost (LCY)" := 0;
                JobJnlLine2."Total Price (LCY)" := 0;
              END;
              JobJnlLine2.MODIFY;
            UNTIL JobJnlLine2.NEXT = 0;
          END ELSE BEGIN
            // Not a recurring journal
            JobJnlLine2.COPYFILTERS(JobJnlLine);
            JobJnlLine2.SETFILTER("No.",'<>%1','');
            IF JobJnlLine2.FIND THEN; // Remember the last line

            JobJnlLine3.SETRANGE("Journal Template Name","Journal Template Name");
            JobJnlLine3.SETRANGE("Journal Batch Name","Journal Batch Name");
            IF NOT JobJnlLine3.FINDLAST THEN
              IF INCSTR("Journal Batch Name") <> '' THEN BEGIN
                JobJnlBatch.DELETE;
                JobJnlBatch.Name := INCSTR("Journal Batch Name");
                IF JobJnlBatch.INSERT THEN;
                "Journal Batch Name" := JobJnlBatch.Name;
              END;

            JobJnlLine3.SETRANGE("Journal Batch Name","Journal Batch Name");
            IF (JobJnlBatch."No. Series" = '') AND NOT JobJnlLine3.FINDLAST THEN BEGIN
              JobJnlLine3.INIT;
              JobJnlLine3."Journal Template Name" := "Journal Template Name";
              JobJnlLine3."Journal Batch Name" := "Journal Batch Name";
              JobJnlLine3."Line No." := 10000;
              JobJnlLine3.INSERT;
              JobJnlLine3.SetUpNewLine(JobJnlLine2);
              JobJnlLine3.MODIFY;
            END;
          END;
        END;
        IF JobJnlBatch."No. Series" <> '' THEN
          NoSeriesMgt.SaveNoSeries;
        IF NoSeries.FIND('-') THEN
          REPEAT
            EVALUATE(PostingNoSeriesNo,NoSeries.Description);
            NoSeriesMgt2[PostingNoSeriesNo].SaveNoSeries;
          UNTIL NoSeries.NEXT = 0;

        COMMIT;
      END;
      UpdateAnalysisView.UpdateAll(0,TRUE);
    END;

    LOCAL PROCEDURE CheckRecurringLine@2(VAR JobJnlLine2@1000 : Record 11072008);
    BEGIN
      WITH JobJnlLine2 DO BEGIN
        IF "No." <> '' THEN
          IF JobJnlTemplate.Recurring THEN BEGIN
            TESTFIELD("Recurring Method");
            TESTFIELD("Recurring Frequency");
            IF "Recurring Method" = "Recurring Method"::Variable THEN
              TESTFIELD(Quantity);
          END ELSE BEGIN
            TESTFIELD("Recurring Method",0);
            TESTFIELD("Recurring Frequency","0DF");
          END;
      END;
    END;

    LOCAL PROCEDURE MakeRecurringTexts@3(VAR JobJnlLine2@1000 : Record 11072008);
    BEGIN
      WITH JobJnlLine2 DO BEGIN
        IF ("No." <> '') AND ("Recurring Method" <> 0) THEN BEGIN // Not recurring
          Day := DATE2DMY("Posting Date",1);
          Week := DATE2DWY("Posting Date",2);
          Month := DATE2DMY("Posting Date",2);
          MonthText := FORMAT("Posting Date",0,Text007);
          AccountingPeriod.SETRANGE("Starting Date",0D,"Posting Date");
          IF NOT AccountingPeriod.FINDLAST THEN
            AccountingPeriod.Name := '';
          "Document No." :=
            DELCHR(
              PADSTR(
                STRSUBSTNO("Document No.",Day,Week,Month,MonthText,AccountingPeriod.Name),
                MAXSTRLEN("Document No.")),
              '>');
          Description :=
            DELCHR(
              PADSTR(
                STRSUBSTNO(Description,Day,Week,Month,MonthText,AccountingPeriod.Name),
                MAXSTRLEN(Description)),
              '>');
        END;
      END;
    END;

    BEGIN
    END.
  }
}

