OBJECT Report 11229280 Post Exch. Rate Diff. Cost Pl.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Wechselkursunterschiede buchen fÅr RegieeintrÑge;
               ENU=Post Exchange Rate Difference Cost Plus;
               NLD=Wisselkoersen verschillen boeken voor regiemutaties];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  JobsSetup.GET;
                  JobsSetup.TESTFIELD("Cost Obj. Exch. Rate Diff.");

                  IF DocumentNo = '' THEN
                    ERROR(Text001);
                  IF PostingDate = 0D THEN
                    PostingDate := WORKDATE;

                  TmpProjectLedgerEntry.RESET;
                  TmpProjectLedgerEntry.DELETEALL;
                END;

    OnPostReport=BEGIN
                   ProcessTmpProjectLedgerEntry;
                 END;

  }
  DATASET
  {
    { 1100527700;;DataItem;                  ;
               DataItemTable=Table11072003;
               DataItemTableView=SORTING(No.);
               ReqFilterFields=No. }

    { 1100527701;1;DataItem;                 ;
               DataItemTable=Table11072005;
               DataItemTableView=SORTING(Entry No.)
                                 WHERE(Currency Code=FILTER(<>''),
                                       Cost Entry No. Project Ledger=CONST(0),
                                       Exchange Rate Diff. Posted=CONST(No));
               OnAfterGetRecord=BEGIN
                                  ProcessProjectLedgerEntry("Job Ledger Entry");
                                END;

               CalcFields=Amount Invoiced (LCY);
               DataItemLink=Job No.=FIELD(No.) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnOpenPage=BEGIN
                   IF PostingDate = 0D THEN
                     PostingDate := WORKDATE;
                 END;

    }
    CONTROLS
    {
      { 1100527700;;Container;
                  ContainerType=ContentArea }

      { 1100527701;1;Group  ;
                  CaptionML=[DEU=Optionen;
                             ENU=Options;
                             NLD=Opties;
                             SVE=Alternativ];
                  GroupType=Group }

      { 1100527702;2;Field  ;
                  Name=DocumentNo;
                  CaptionML=[DEU=Belegnr.;
                             ENU=Document No.;
                             NLD=Documentnr.;
                             SVE=Dokumentnr];
                  SourceExpr=DocumentNo }

      { 1100527703;2;Field  ;
                  Name=PostingDate;
                  CaptionML=[DEU=Buchungsdatum;
                             ENU=Posting Date;
                             NLD=Boekingsdatum;
                             SVE=Bokfîringsdatum];
                  SourceExpr=PostingDate }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      JobsSetup@1100527704 : Record 315;
      TmpProjectLedgerEntry@1100527706 : TEMPORARY Record 11072005;
      DocumentNo@1100527701 : Code[20];
      PostingDate@1100527702 : Date;
      Text001@1100527703 : TextConst 'DEU=Belegnr. muss eingegeben sein.;ENU=Document No. must be filled.;NLD=Documentnr. moet gevuld zijn.';
      Text002@1100527705 : TextConst 'DEU=Wechselkursunterschied-Posten;ENU=Exchange rate difference entries;NLD=Wisselkoers verschillen posten';

    LOCAL PROCEDURE ProcessProjectLedgerEntry@1100527701(CheckProjectLedgerEntry@1100527700 : Record 11072005);
    VAR
      ProjectLedgerEntry@1100527701 : Record 11072005;
      CheckAmount@1100529600 : Decimal;
      CheckAmountLCY@1100529601 : Decimal;
    BEGIN
      IF CheckProjectLedgerEntry."Amount Invoiced (LCY)" = 0 THEN
        EXIT;

      IF CheckProjectLedgerEntry."Entry Type" = CheckProjectLedgerEntry."Entry Type"::Sale THEN BEGIN
        CheckAmount := CheckProjectLedgerEntry."Total Price";
        CheckAmountLCY := CheckProjectLedgerEntry."Total Price (LCY)";
      END ELSE BEGIN
        CheckAmount := CheckProjectLedgerEntry."Total Cost";
        CheckAmountLCY := CheckProjectLedgerEntry."Total Cost (LCY)";
      END;

      TmpProjectLedgerEntry := CheckProjectLedgerEntry;
      IF CheckProjectLedgerEntry."Amount Invoiced (LCY)" = CheckAmountLCY THEN BEGIN
        TmpProjectLedgerEntry."Total Cost (LCY)" := 0;
        TmpProjectLedgerEntry.INSERT;
        EXIT;
      END;

      ProjectLedgerEntry.SETRANGE("Job No.", CheckProjectLedgerEntry."Job No.");
      ProjectLedgerEntry.SETRANGE("Cost Entry No. Project Ledger", CheckProjectLedgerEntry."Entry No.");
      ProjectLedgerEntry.SETRANGE("Currency Code", CheckProjectLedgerEntry."Currency Code");
      IF ProjectLedgerEntry.ISEMPTY THEN
        EXIT;

      ProjectLedgerEntry.CALCSUMS("Total Price (LCY)", "Total Price");
      IF ProjectLedgerEntry."Total Price (LCY)" <> - CheckProjectLedgerEntry."Amount Invoiced (LCY)" THEN
        EXIT;
      IF ProjectLedgerEntry."Total Price" <> - CheckAmount THEN
        EXIT;

      TmpProjectLedgerEntry."Total Cost (LCY)" := CheckAmountLCY - CheckProjectLedgerEntry."Amount Invoiced (LCY)";
      TmpProjectLedgerEntry.INSERT;
    END;

    LOCAL PROCEDURE ProcessTmpProjectLedgerEntry@1100527714();
    VAR
      Project@1100527705 : Record 11072003;
      GenJournalLine@1100527700 : Record 81;
      ProjectLedgerEntry@1100527702 : Record 11072005;
      ProjectType@1100527703 : Record 11012009;
      Currency@1100527706 : Record 4;
      SourceCodeSetup@1100527707 : Record 242;
      ProjectJournalLine@1100527709 : Record 11072008;
      GenJnlPostLine@1100527701 : Codeunit 12;
      JobJnlPostLine@1100527708 : Codeunit 11072003;
    BEGIN
      TmpProjectLedgerEntry.RESET;
      IF TmpProjectLedgerEntry.ISEMPTY THEN
        EXIT;

      SourceCodeSetup.GET;
      CLEAR(Project);
      CLEAR(Currency);
      CLEAR(GenJnlPostLine);
      CLEAR(JobJnlPostLine);

      TmpProjectLedgerEntry.SETCURRENTKEY("Job No.");
      TmpProjectLedgerEntry.FINDSET;
      REPEAT
        IF TmpProjectLedgerEntry."Total Cost (LCY)" <> 0 THEN BEGIN
          IF Project."No." <> TmpProjectLedgerEntry."Job No." THEN BEGIN
            Project.GET(TmpProjectLedgerEntry."Job No.");
            Project.TESTFIELD("Project Type");
            ProjectType.GET(Project."Project Type");
            ProjectType.TESTFIELD("WIP Account Revenue");
          END;

          IF Currency.Code <> TmpProjectLedgerEntry."Currency Code" THEN
            Currency.GET(TmpProjectLedgerEntry."Currency Code");
          IF TmpProjectLedgerEntry."Total Cost (LCY)" > 0 THEN
            Currency.TESTFIELD("Realized Losses Acc.")
          ELSE
            Currency.TESTFIELD("Realized Gains Acc.");

          CLEAR(GenJournalLine);
          GenJournalLine."Document No." := DocumentNo;
          GenJournalLine."Posting Date" := PostingDate;
          GenJournalLine."Document Date" := PostingDate;
          GenJournalLine.VALIDATE("Job No.", TmpProjectLedgerEntry."Job No.");
          IF GenJournalLine."Currency Code" <> '' THEN
            GenJournalLine.VALIDATE("Currency Code", '');
          IF GenJournalLine."Shortcut Dimension 1 Code" <> TmpProjectLedgerEntry."Global Dimension 1 Code" THEN
            GenJournalLine.VALIDATE("Shortcut Dimension 1 Code", TmpProjectLedgerEntry."Global Dimension 1 Code");
          IF GenJournalLine."Shortcut Dimension 2 Code" <> JobsSetup."Cost Obj. Exch. Rate Diff." THEN
            GenJournalLine.VALIDATE("Shortcut Dimension 2 Code", JobsSetup."Cost Obj. Exch. Rate Diff.");

          GenJournalLine.Amount := - TmpProjectLedgerEntry."Total Cost (LCY)";
          GenJournalLine."Account No." := ProjectType."WIP Account Revenue";
          IF GenJournalLine.Amount > 0 THEN
            GenJournalLine."Bal. Account No." := Currency."Realized Gains Acc."
          ELSE
            GenJournalLine."Bal. Account No." := Currency."Realized Losses Acc.";
          GenJournalLine.Description := Text002;

          GenJournalLine."System-Created Entry" := TRUE;
          GenJournalLine."Source Code" := SourceCodeSetup."Exchange Rate Adjmt.";
          GenJournalLine."Gen. Bus. Posting Group" := '';
          GenJournalLine."Gen. Prod. Posting Group" := '';
          GenJournalLine."VAT Bus. Posting Group" := '';
          GenJournalLine."VAT Prod. Posting Group" := '';

          ProjectJournalLine.INIT;
          ProjectJournalLine."Document No." := GenJournalLine."Document No.";
          ProjectJournalLine."Posting Date" := GenJournalLine."Posting Date";
          ProjectJournalLine."Document Date" := GenJournalLine."Document Date";
          ProjectJournalLine."Job No.":= GenJournalLine."Job No.";
          ProjectJournalLine.Principal := TmpProjectLedgerEntry.Principal;
          ProjectJournalLine.Type := ProjectJournalLine.Type::"G/L Account";
          ProjectJournalLine."No." := GenJournalLine."Account No.";
          ProjectJournalLine."Source Code" := GenJournalLine."Source Code";
          ProjectJournalLine."Shortcut Dimension 1 Code" := GenJournalLine."Shortcut Dimension 1 Code";
          ProjectJournalLine."Shortcut Dimension 2 Code" := GenJournalLine."Shortcut Dimension 2 Code";
          ProjectJournalLine."Dimension Set ID" := GenJournalLine."Dimension Set ID";
          ProjectJournalLine.Description := GenJournalLine.Description;
          ProjectJournalLine.Chargeable := FALSE;
          ProjectJournalLine."Cost Entry No. Project Ledger":= TmpProjectLedgerEntry."Entry No.";
          ProjectJournalLine."Entry Type" := ProjectJournalLine."Entry Type"::Sale;
          ProjectJournalLine."Total Price (LCY)" := TmpProjectLedgerEntry."Total Cost (LCY)";
          ProjectJournalLine."Exchange Rate Difference" := TRUE;

          GenJnlPostLine.RUN(GenJournalLine);
          JobJnlPostLine.RUN(ProjectJournalLine);
        END;
      UNTIL TmpProjectLedgerEntry.NEXT = 0;

      TmpProjectLedgerEntry.FINDSET;
      REPEAT
        ProjectLedgerEntry.GET(TmpProjectLedgerEntry."Entry No.");
        ProjectLedgerEntry."Exchange Rate Diff. Posted" := TRUE;
        ProjectLedgerEntry.MODIFY;
      UNTIL TmpProjectLedgerEntry.NEXT = 0;

      COMMIT;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

