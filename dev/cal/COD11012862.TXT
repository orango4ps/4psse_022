OBJECT Codeunit 11012862 Service Signal Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1100528600 : TextConst 'DEU=Regel;ENU=Rule;NLD=regel';
      OverruleServiceContractNo@1100528602 : Code[20];
      OverruleServiceObjectNo@1100528603 : Code[20];

    PROCEDURE GetSignalRulesDS@1100528600(ISignalType@1100528604 : 'Service Call,Service Location,Service Order';ICode@1100528600 : Code[20];VAR OTmpServiceSignalBuffer@1100528601 : TEMPORARY Record 11071939);
    VAR
      TmpServiceSignalBuffer@1100528602 : TEMPORARY Record 11071939;
      ServiceSignalRule@1100528603 : Record 11071938;
      TableRef@1100528605 : RecordRef;
      FieldRef@1100528608 : FieldRef;
      LineNo@1100528606 : Integer;
    BEGIN
      TmpServiceSignalBuffer.COPY(OTmpServiceSignalBuffer, TRUE); // Check temporary buffer given

      OTmpServiceSignalBuffer.RESET;
      OTmpServiceSignalBuffer.DELETEALL;
      ServiceSignalRule.SETRANGE(Type, ISignalType);
      IF ServiceSignalRule.ISEMPTY THEN
        EXIT;
      ServiceSignalRule.FINDSET;
      REPEAT
        IF AppliesToFilter(ISignalType, ICode, ServiceSignalRule, TableRef, FALSE) THEN BEGIN
          REPEAT
            LineNo += 10000;
            GetFieldRef(ServiceSignalRule, TableRef, FieldRef);
            OTmpServiceSignalBuffer.Type := ServiceSignalRule.Type;
            OTmpServiceSignalBuffer."Line No." := LineNo;
            OTmpServiceSignalBuffer."Table Type" := ServiceSignalRule."Table Type";
            OTmpServiceSignalBuffer.Priority := ServiceSignalRule.Priority;
            OTmpServiceSignalBuffer.Signal := CreateMessage(ISignalType, ICode, ServiceSignalRule, TableRef, FieldRef);
            OTmpServiceSignalBuffer.Code := ICode;
            OTmpServiceSignalBuffer."Value Filter" := ServiceSignalRule."Value Filter";
            OTmpServiceSignalBuffer."Record ID" := TableRef.RECORDID;
            OTmpServiceSignalBuffer.INSERT;
          UNTIL TableRef.NEXT = 0;
        END;
      UNTIL ServiceSignalRule.NEXT = 0;

      IF NOT ShowBillToCustomerSignals(ISignalType, ICode) THEN
        EXIT;
      ServiceSignalRule.SETFILTER("Table Type", '%1|%2', ServiceSignalRule."Table Type"::Customer, ServiceSignalRule."Table Type"::"Customer Terms");
      IF ServiceSignalRule.ISEMPTY THEN
        EXIT;
      ServiceSignalRule.FINDSET;
      REPEAT
        IF AppliesToFilter(ISignalType, ICode, ServiceSignalRule, TableRef, TRUE) THEN BEGIN
          REPEAT
            LineNo += 10000;
            GetFieldRef(ServiceSignalRule, TableRef, FieldRef);
            OTmpServiceSignalBuffer.Type := ServiceSignalRule.Type;
            OTmpServiceSignalBuffer."Line No." := LineNo;
            CASE ServiceSignalRule."Table Type" OF
              ServiceSignalRule."Table Type"::Customer:
                OTmpServiceSignalBuffer."Table Type" := OTmpServiceSignalBuffer."Table Type"::"Bill-To Customer";
              ServiceSignalRule."Table Type"::"Customer Terms":
                OTmpServiceSignalBuffer."Table Type" := OTmpServiceSignalBuffer."Table Type"::"Bill-to Customer Terms";
            END;
            OTmpServiceSignalBuffer.Priority := ServiceSignalRule.Priority;
            OTmpServiceSignalBuffer.Signal := CreateMessage(ISignalType, ICode, ServiceSignalRule, TableRef, FieldRef);
            OTmpServiceSignalBuffer.Code := ICode;
            OTmpServiceSignalBuffer."Value Filter" := ServiceSignalRule."Value Filter";
            OTmpServiceSignalBuffer."Record ID" := TableRef.RECORDID;
            OTmpServiceSignalBuffer.INSERT;
          UNTIL TableRef.NEXT = 0;
        END;
      UNTIL ServiceSignalRule.NEXT = 0;
    END;

    PROCEDURE ShowTableOfSignalRule@1100528601(ITmpServiceSignalBuffer@1100528600 : Record 11071939);
    VAR
      Customer@1100528601 : Record 18;
      ServiceContract@1100528602 : Record 11012812;
      ServiceLocation@1100528603 : Record 11012801;
      ServiceObject@1100528604 : Record 11071691;
      StandardObject@1100528605 : Record 11020334;
      ServiceText@1100528610 : Record 11012882;
      ServiceContractArrangement@1100528611 : Record 11071705;
      ObjectSpecificationLine@1100528618 : Record 11071781;
      ContractObject@1100528619 : Record 11071702;
      LocationSpecificationLine@1100528620 : Record 11071961;
      GeneralText@1100528606 : Record 11020260;
      CommentLine@1100527000 : Record 97;
      TableRef@1100528614 : RecordRef;
    BEGIN
      IF TableRef.GET(ITmpServiceSignalBuffer."Record ID") THEN BEGIN
        CASE ITmpServiceSignalBuffer."Table Type" OF
          ITmpServiceSignalBuffer."Table Type"::Customer:
            BEGIN
              TableRef.SETTABLE(Customer);
              PAGE.RUNMODAL(PAGE::"Customer Card", Customer);
            END;
          ITmpServiceSignalBuffer."Table Type"::"Service Contract":
            BEGIN
              TableRef.SETTABLE(ServiceContract);
              PAGE.RUNMODAL(PAGE::"Service Contract Card", ServiceContract);
            END;
          ITmpServiceSignalBuffer."Table Type"::"Contract Object":
            BEGIN
              TableRef.SETTABLE(ContractObject);
              IF ServiceContract.GET(ContractObject."Service Contract No.") THEN
                PAGE.RUNMODAL(PAGE::"Service Contract Card", ServiceContract);
            END;
          ITmpServiceSignalBuffer."Table Type"::"Service Location":
            BEGIN
              TableRef.SETTABLE(ServiceLocation);
              PAGE.RUNMODAL(PAGE::"Service Location", ServiceLocation);
            END;
          ITmpServiceSignalBuffer."Table Type"::"Location Specification":
            BEGIN
              TableRef.SETTABLE(LocationSpecificationLine);
              IF ServiceLocation.GET(LocationSpecificationLine."Service Location No.") THEN
                PAGE.RUNMODAL(PAGE::"Service Location", ServiceLocation);
            END;
          ITmpServiceSignalBuffer."Table Type"::"Service Object":
            BEGIN
              TableRef.SETTABLE(ServiceObject);
              PAGE.RUNMODAL(PAGE::"Service Object", ServiceObject);
            END;
          ITmpServiceSignalBuffer."Table Type"::"Object Specification":
            BEGIN
              TableRef.SETTABLE(ObjectSpecificationLine);
              CASE ObjectSpecificationLine."Specification Type" OF
                ObjectSpecificationLine."Specification Type"::"Standard Object":
                  IF StandardObject.GET(ObjectSpecificationLine.Code) THEN
                    PAGE.RUNMODAL(PAGE::"Standard Object", StandardObject);
                ObjectSpecificationLine."Specification Type"::Object:
                  IF ServiceObject.GET(ObjectSpecificationLine.Code) THEN
                    PAGE.RUNMODAL(PAGE::"Service Object", ServiceObject)
              END;
            END;
          ITmpServiceSignalBuffer."Table Type"::"Contract Terms":
            BEGIN
              TableRef.SETTABLE(ServiceText);
              ServiceText.SETRANGE("Table Name", ServiceText."Table Name"::"Service Contract");
              ServiceText.SETRANGE("No.", ServiceText."No.");
              ServiceText.SETRANGE("Table Field", 0);
              IF NOT ServiceText.ISEMPTY THEN
                PAGE.RUNMODAL(PAGE::"Service Text", ServiceText);
            END;
          ITmpServiceSignalBuffer."Table Type"::"Report Procedure":
            BEGIN
              TableRef.SETTABLE(ServiceText);
              ServiceText.SETRANGE("Table Name", ServiceText."Table Name"::"Service Location");
              ServiceText.SETRANGE("No.", ServiceText."No.");
              ServiceText.SETRANGE("Table Field", 0);
              IF NOT ServiceText.ISEMPTY THEN
                PAGE.RUNMODAL(PAGE::"Service Text", ServiceText);
            END;
          ITmpServiceSignalBuffer."Table Type"::"Service Contract Arrangement":
            BEGIN
              TableRef.SETTABLE(ServiceContractArrangement);
              ServiceContractArrangement.SETRANGE("Service Contract No.", ServiceContractArrangement."Service Contract No.");
              ServiceContractArrangement.SETRANGE("Object No.", ServiceContractArrangement."Object No.");
              IF NOT ServiceContractArrangement.ISEMPTY THEN
                PAGE.RUNMODAL(0, ServiceContractArrangement);
            END;
          ITmpServiceSignalBuffer."Table Type"::"Standard Object":
            BEGIN
              TableRef.SETTABLE(StandardObject);
              PAGE.RUNMODAL(PAGE::"Standard Object", StandardObject);
            END;
          ITmpServiceSignalBuffer."Table Type"::"Customer Terms":
            BEGIN
              TableRef.SETTABLE(GeneralText);
              GeneralText.SETRANGE(Table, GeneralText.Table);
              GeneralText.SETRANGE(Code, GeneralText.Code);
              GeneralText.SETRANGE("Table Line No.", 0);
              IF NOT GeneralText.ISEMPTY THEN
                PAGE.RUNMODAL(0, GeneralText);
            END;
          ITmpServiceSignalBuffer."Table Type"::"Comment Line":
            BEGIN
              TableRef.SETTABLE(CommentLine);
              CommentLine.SETRANGE("Table Name", CommentLine."Table Name");
              CommentLine.SETRANGE("No.", CommentLine."No.");
              IF NOT CommentLine.ISEMPTY THEN
                PAGE.RUNMODAL(0, CommentLine);
            END;
        END;
      END;
    END;

    LOCAL PROCEDURE AppliesToFilter@1100528602(ISignalType@1100528605 : 'Service Call,Service Location';ICode@1100528601 : Code[20];IServiceSignalRule@1100528600 : Record 11071938;VAR OTableRef@1100528606 : RecordRef;UseBillToCustomer@1100529600 : Boolean) : Boolean;
    VAR
      Field@1100528602 : Record 2000000041;
      FieldRef@1100528608 : FieldRef;
      ValueFilter@1100528603 : Text[250];
    BEGIN
      IF NOT GetTableRef(ISignalType, ICode, IServiceSignalRule, OTableRef, UseBillToCustomer) THEN
        EXIT;
      GetFieldRef(IServiceSignalRule, OTableRef, FieldRef);
      SetFlowFilters(IServiceSignalRule, OTableRef);
      Field.GET(OTableRef.NUMBER, FieldRef.NUMBER);
      IF Field.Class = Field.Class::FlowField THEN
        FieldRef.CALCFIELD;
      ValueFilter := IServiceSignalRule.GetValueFilter(0);
      FieldRef.SETFILTER(ValueFilter);
      EXIT(OTableRef.FINDSET);
    END;

    LOCAL PROCEDURE CreateMessage@1100528613(ISignalType@1100528610 : Option;ICode@1100528601 : Code[20];IServiceSignalRule@1100528600 : Record 11071938;ITableRef@1100528603 : RecordRef;IFieldRef@1100528609 : FieldRef) Signal : Text[250];
    VAR
      Field@1100528606 : Record 2000000041;
      Value@1100528604 : Text[250];
      FieldCaption@1100528607 : Text[80];
      ValueFilter@1100528608 : Text[250];
      FullMessage@1100528605 : Text[1024];
    BEGIN
      Field.GET(ITableRef.NUMBER, IFieldRef.NUMBER);
      IF Field.Class = Field.Class::FlowField THEN
        IFieldRef.CALCFIELD;
      IF Field.Type IN [Field.Type::Decimal, Field.Type::Integer] THEN
        Value := FORMAT(IFieldRef.VALUE, 0, 1)
      ELSE
        Value := FORMAT(IFieldRef.VALUE);
      IServiceSignalRule.CALCFIELDS("Field Caption");
      IF NOT (IServiceSignalRule."Table Type" IN
        [IServiceSignalRule."Table Type"::"Object Specification", IServiceSignalRule."Table Type"::"Location Specification"])
      THEN
        FieldCaption := COPYSTR(IServiceSignalRule."Field Caption", 1, MAXSTRLEN(FieldCaption))
      ELSE
        FieldCaption := COPYSTR(IServiceSignalRule.GetSpecificationDescription, 1, MAXSTRLEN(FieldCaption));
      ValueFilter := IFieldRef.GETFILTER;
      IF (Field.Type = Field.Type::Text) AND (Field.FieldName = 'Comment') THEN
        FullMessage := Value
      ELSE
        FullMessage := FieldCaption + '=' + Value;
      IF (ValueFilter <> '') AND (IServiceSignalRule."Display Rule") THEN
        FullMessage := FullMessage + ' - ' + Text000 + ' ' + ValueFilter;
      IF IServiceSignalRule.Comment <> '' THEN
        FullMessage := FullMessage + ' - ' + IServiceSignalRule.Comment;
      Signal := COPYSTR(FullMessage, 1, MAXSTRLEN(Signal));
    END;

    LOCAL PROCEDURE GetTableRef@1100528615(ISignalType@1100528612 : Option;ICode@1100528602 : Code[20];IServiceSignalRule@1100528601 : Record 11071938;VAR OTableRef@1100528600 : RecordRef;UseBillToCustomer@1100529600 : Boolean) : Boolean;
    VAR
      ServiceCall@1100528607 : Record 11012822;
      ServiceOrder@1100528618 : Record 11012823;
      Customer@1100528606 : Record 18;
      ServiceContract@1100528605 : Record 11012812;
      ServiceLocation@1100528604 : Record 11012801;
      ServiceObject@1100528603 : Record 11071691;
      StandardObject@1100525000 : Record 11020334;
      ObjectSpecificationLine@1100528609 : Record 11071781;
      ContractObject@1100528611 : Record 11071702;
      LocationSpecificationLine@1100528610 : Record 11071961;
      ServiceText@1100528617 : Record 11012882;
      ServiceContractArrangement@1100528608 : Record 11071705;
      GeneralText@1100528621 : Record 11020260;
      CommentLine@1100527000 : Record 97;
      CustomerNo@1100528613 : Code[20];
      ServiceContractNo@1100528614 : Code[20];
      ServiceObjectNo@1100528615 : Code[20];
      ServiceObjectNoFilter@1100528619 : Text;
      ServiceLocationNo@1100528616 : Code[20];
      StandardObjectNo@1100525001 : Code[20];
      StandardObjectNoFilter@1100528620 : Text;
    BEGIN
      CASE ISignalType OF
        IServiceSignalRule.Type::"Service Call":
          BEGIN
            IF NOT ServiceCall.GET(ICode) THEN
              EXIT;
            IF UseBillToCustomer THEN
              CustomerNo := ServiceCall."Bill-to Customer No."
            ELSE
              CustomerNo := ServiceCall."Customer No.";
            ServiceContractNo := ServiceCall."Service Contract No.";
            ServiceObjectNo := ServiceCall."Object No.";
            ServiceLocationNo := ServiceCall."Service Location No.";
            IF ServiceObject.GET(ServiceObjectNo) THEN
              StandardObjectNo := ServiceObject."Standard Object No.";
          END;
        IServiceSignalRule.Type::"Service Location":
          BEGIN
            IF NOT ServiceLocation.GET(ICode) THEN
              EXIT;
            IF UseBillToCustomer THEN
              CustomerNo := ServiceLocation."Bill-to Customer No."
            ELSE
              CustomerNo := ServiceLocation."Customer No.";
            ServiceContractNo := OverruleServiceContractNo;
            ServiceObjectNo := OverruleServiceObjectNo;
            ServiceLocationNo := ServiceLocation."No.";
            IF ServiceObject.GET(ServiceObjectNo) THEN
              StandardObjectNo := ServiceObject."Standard Object No.";
          END;
        IServiceSignalRule.Type::"Service Order":
          BEGIN
            IF NOT ServiceOrder.GET(ICode) THEN
              EXIT;
            IF UseBillToCustomer THEN
              CustomerNo := ServiceOrder."Bill-to Customer No."
            ELSE
              CustomerNo := ServiceOrder."Customer No.";
            ServiceContractNo := ServiceOrder."Service Contract No.";
            ServiceLocationNo := ServiceOrder."Service Location No.";
          END;
      END;

      IF IServiceSignalRule."Field No." = 0 THEN
        IF NOT (IServiceSignalRule."Table Type" IN
          [IServiceSignalRule."Table Type"::"Object Specification", IServiceSignalRule."Table Type"::"Location Specification"])
        THEN
          EXIT;

      CASE IServiceSignalRule."Table Type" OF
        IServiceSignalRule."Table Type"::Customer:
          BEGIN
            Customer.FILTERGROUP(2);
            Customer.SETRANGE("No.", CustomerNo);
            Customer.FILTERGROUP(0);
            IF NOT Customer.FINDFIRST THEN
              EXIT;
            OTableRef.GETTABLE(Customer);
          END;
        IServiceSignalRule."Table Type"::"Service Contract":
          BEGIN
            ServiceContract.FILTERGROUP(2);
            ServiceContract.SETRANGE("No.", ServiceContractNo);
            ServiceContract.FILTERGROUP(0);
            IF NOT ServiceContract.FINDFIRST THEN
              EXIT;
            OTableRef.GETTABLE(ServiceContract);
          END;
        IServiceSignalRule."Table Type"::"Service Location":
          BEGIN
            ServiceLocation.FILTERGROUP(2);
            ServiceLocation.SETRANGE("No.", ServiceLocationNo);
            ServiceLocation.FILTERGROUP(0);
            IF NOT ServiceLocation.FINDFIRST THEN
              EXIT;
            OTableRef.GETTABLE(ServiceLocation);
          END;
        IServiceSignalRule."Table Type"::"Service Object":
          BEGIN
            ServiceObjectNoFilter := GetServiceObjectNoFilter(ISignalType, ICode, ServiceObjectNo);
            ServiceObject.FILTERGROUP(2);
            IF ServiceObjectNoFilter <> '' THEN
              ServiceObject.SETFILTER("No.", ServiceObjectNoFilter)
            ELSE
              ServiceObject.SETRANGE("No.", '');
            ServiceObject.FILTERGROUP(0);
            IF NOT ServiceObject.FINDFIRST THEN
              EXIT;
            OTableRef.GETTABLE(ServiceObject);
          END;
        IServiceSignalRule."Table Type"::"Object Specification":
          BEGIN
            ServiceObjectNoFilter := GetServiceObjectNoFilter(ISignalType, ICode, ServiceObjectNo);
            StandardObjectNoFilter := GetStandardObjectNoFilter(ISignalType, ICode, StandardObjectNo);
            IF (ServiceObjectNoFilter = '') OR (StandardObjectNoFilter = '') THEN
              EXIT;
            ObjectSpecificationLine.FILTERGROUP(2);
            ObjectSpecificationLine.SETRANGE("Specification Type", ObjectSpecificationLine."Specification Type"::"Standard Object");
            ObjectSpecificationLine.SETFILTER(Code, StandardObjectNoFilter);
            ObjectSpecificationLine.SETRANGE(Type, ObjectSpecificationLine.Type::Line);
            ObjectSpecificationLine.SETRANGE("Specification Code", IServiceSignalRule."Specification Code");
            ObjectSpecificationLine.SETRANGE("Object Level", FALSE);
            IF NOT ObjectSpecificationLine.FINDFIRST THEN BEGIN
              ObjectSpecificationLine.SETRANGE("Specification Type", ObjectSpecificationLine."Specification Type"::Object);
              ObjectSpecificationLine.SETFILTER(Code, ServiceObjectNoFilter);
              ObjectSpecificationLine.SETRANGE(Type, ObjectSpecificationLine.Type::Line);
              ObjectSpecificationLine.SETRANGE("Specification Code", IServiceSignalRule."Specification Code");
              ObjectSpecificationLine.SETRANGE("Object Level", TRUE);
            END;
            ObjectSpecificationLine.FILTERGROUP(0);
            IF NOT ObjectSpecificationLine.FINDFIRST THEN
              EXIT;
            OTableRef.GETTABLE(ObjectSpecificationLine);
          END;
        IServiceSignalRule."Table Type"::"Contract Object":
          BEGIN
            ServiceObjectNoFilter := GetServiceObjectNoFilter(ISignalType, ICode, ServiceObjectNo);
            ContractObject.FILTERGROUP(2);
            ContractObject.SETRANGE("Service Contract No.", ServiceContractNo);
            IF ServiceObjectNoFilter <> '' THEN
              ContractObject.SETFILTER("Service Object No.", ServiceObjectNoFilter)
            ELSE
              ContractObject.SETRANGE("Service Object No.", '');
            ContractObject.FILTERGROUP(0);
            IF NOT ContractObject.FINDFIRST THEN
              EXIT;
            OTableRef.GETTABLE(ContractObject);
          END;
        IServiceSignalRule."Table Type"::"Location Specification":
          BEGIN
            IF NOT ServiceLocation.GET(ServiceLocationNo) THEN
              EXIT;
            LocationSpecificationLine.FILTERGROUP(2);
            LocationSpecificationLine.SETRANGE("Service Location No.", ServiceLocationNo);
            LocationSpecificationLine.SETRANGE(Type, LocationSpecificationLine.Type::Line);
            LocationSpecificationLine.SETRANGE("Specification Code", IServiceSignalRule."Specification Code");
            LocationSpecificationLine.FILTERGROUP(0);
            IF NOT LocationSpecificationLine.FINDFIRST THEN
              EXIT;
            OTableRef.GETTABLE(LocationSpecificationLine);
          END;
        IServiceSignalRule."Table Type"::"Contract Terms":
          BEGIN
            ServiceText.FILTERGROUP(2);
            ServiceText.SETRANGE("Table Name", ServiceText."Table Name"::"Service Contract");
            ServiceText.SETRANGE("No.", ServiceContractNo);
            ServiceText.SETRANGE("Table Field", 0);
            ServiceText.FILTERGROUP(0);
            IF NOT ServiceText.FINDFIRST THEN
             EXIT;
            OTableRef.GETTABLE(ServiceText);
          END;
        IServiceSignalRule."Table Type"::"Report Procedure":
          BEGIN
            ServiceText.FILTERGROUP(2);
            ServiceText.SETRANGE("Table Name", ServiceText."Table Name"::"Service Location");
            ServiceText.SETRANGE("No.", ServiceLocationNo);
            ServiceText.SETRANGE("Table Field", 0);
            ServiceText.FILTERGROUP(0);
            IF NOT ServiceText.FINDFIRST THEN
              EXIT;
            OTableRef.GETTABLE(ServiceText);
          END;
        IServiceSignalRule."Table Type"::"Service Contract Arrangement":
          BEGIN
            ServiceObjectNoFilter := GetServiceObjectNoFilter(ISignalType, ICode, ServiceObjectNo);
            ServiceContractArrangement.FILTERGROUP(2);
            ServiceContractArrangement.SETRANGE("Service Contract No.", ServiceContractNo);
            IF ServiceObjectNoFilter <> '' THEN
              ServiceContractArrangement.SETFILTER("Object No.", ServiceObjectNoFilter)
            ELSE
              ServiceContractArrangement.SETRANGE("Object No.", '');
            ServiceContractArrangement.SETRANGE("Object No.", ServiceObjectNo);
            ServiceContractArrangement.SETRANGE(Finished, FALSE);
            ServiceContractArrangement.SETRANGE(Cancelled, FALSE);
            ServiceContractArrangement.FILTERGROUP(0);
            IF NOT ServiceContractArrangement.FINDFIRST THEN
              EXIT;
            OTableRef.GETTABLE(ServiceContractArrangement);
          END;
        IServiceSignalRule."Table Type"::"Standard Object":
          BEGIN
            StandardObjectNoFilter := GetStandardObjectNoFilter(ISignalType, ICode, StandardObjectNo);
            StandardObject.FILTERGROUP(2);
            IF StandardObjectNoFilter <> '' THEN
              StandardObject.SETFILTER("No.", StandardObjectNoFilter)
            ELSE
              StandardObject.SETRANGE("No.", '');
            StandardObject.FILTERGROUP(0);
            IF NOT StandardObject.FINDFIRST THEN
              EXIT;
            OTableRef.GETTABLE(StandardObject);
          END;
        IServiceSignalRule."Table Type"::"Customer Terms":
          BEGIN
            GeneralText.FILTERGROUP(2);
            GeneralText.SETRANGE(Table, GeneralText.Table::Customer);
            GeneralText.SETRANGE(Code, CustomerNo);
            GeneralText.SETRANGE("Table Line No.", 0);
            GeneralText.FILTERGROUP(0);
            IF NOT GeneralText.FINDFIRST THEN
              EXIT;
            OTableRef.GETTABLE(GeneralText);
          END;
        IServiceSignalRule."Table Type"::"Comment Line":
          BEGIN
            CommentLine.FILTERGROUP(2);
            CommentLine.SETRANGE("Table Name", CommentLine."Table Name"::Customer);
            CommentLine.SETRANGE("No.", CustomerNo);
            CommentLine.FILTERGROUP(0);
            IF NOT CommentLine.FINDFIRST THEN
              EXIT;
            OTableRef.GETTABLE(CommentLine);
          END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE GetFieldRef@1100528604(IServiceSignalRule@1100528602 : Record 11071938;ITableRef@1100528601 : RecordRef;VAR OFieldRef@1100528600 : FieldRef);
    VAR
      ObjectSpecificationLine@1100528604 : Record 11071781;
      LocationSpecificationLine@1100528603 : Record 11071961;
    BEGIN
      CASE IServiceSignalRule."Table Type" OF
        IServiceSignalRule."Table Type"::"Object Specification":
          BEGIN
            ITableRef.SETTABLE(ObjectSpecificationLine);
            CASE ObjectSpecificationLine."Field Type" OF
              ObjectSpecificationLine."Field Type"::Date:
                OFieldRef := ITableRef.FIELD(ObjectSpecificationLine.FIELDNO("Value (Date)"));
              ObjectSpecificationLine."Field Type"::Value:
                OFieldRef := ITableRef.FIELD(ObjectSpecificationLine.FIELDNO("Value (Value)"));
            ELSE
              OFieldRef := ITableRef.FIELD(ObjectSpecificationLine.FIELDNO(Value));
            END;
          END;
        IServiceSignalRule."Table Type"::"Location Specification":
          BEGIN
            ITableRef.SETTABLE(LocationSpecificationLine);
            CASE LocationSpecificationLine."Field Type" OF
              LocationSpecificationLine."Field Type"::Date:
                OFieldRef := ITableRef.FIELD(LocationSpecificationLine.FIELDNO("Value (Date)"));
              LocationSpecificationLine."Field Type"::Value:
                OFieldRef := ITableRef.FIELD(LocationSpecificationLine.FIELDNO("Value (Value)"));
            ELSE
              OFieldRef := ITableRef.FIELD(LocationSpecificationLine.FIELDNO(Value));
            END;
          END;
      ELSE
        OFieldRef := ITableRef.FIELD(IServiceSignalRule."Field No.");
      END;
    END;

    PROCEDURE SetOverruleFields@1100528603(IServiceContractNo@1100528600 : Code[20];IServiceObjectNo@1100528601 : Code[20]);
    BEGIN
      OverruleServiceContractNo := IServiceContractNo;
      OverruleServiceObjectNo := IServiceObjectNo;
    END;

    PROCEDURE SetFlowFilters@1100528608(IServiceSignalRule@1100528602 : Record 11071938;ITableRef@1100528601 : RecordRef);
    VAR
      ServiceLocation@1100528600 : Record 11012801;
      ServiceContractArrangement@1100528605 : Record 11071705;
      FlowFilterDate@1100528603 : Date;
      FlowFilterRef@1100528604 : FieldRef;
    BEGIN
      ITableRef.FILTERGROUP(2);
      CASE IServiceSignalRule."Table Type" OF
        IServiceSignalRule."Table Type"::"Service Location":
          CASE IServiceSignalRule."Field No." OF
            ServiceLocation.FIELDNO("Total Cost Amount"),
            ServiceLocation.FIELDNO("No. of Service Calls"):
              IF FORMAT(IServiceSignalRule.Period) <> '' THEN BEGIN
                FlowFilterDate := CALCDATE(IServiceSignalRule.Period, WORKDATE);
                FlowFilterRef := ITableRef.FIELD(ServiceLocation.FIELDNO("Period Filter"));
                IF FlowFilterDate > WORKDATE THEN
                  FlowFilterRef.SETFILTER('%1..%2', WORKDATE, FlowFilterDate)
                ELSE
                  FlowFilterRef.SETFILTER('%1..%2', FlowFilterDate, WORKDATE);
              END;
          END;
        IServiceSignalRule."Table Type"::"Service Contract Arrangement":
          CASE IServiceSignalRule."Field No." OF
            ServiceContractArrangement.FIELDNO("Theoretical Maintenance Date"):
              IF FORMAT(IServiceSignalRule.Period) <> '' THEN BEGIN
                FlowFilterDate := CALCDATE(IServiceSignalRule.Period, WORKDATE);
                FlowFilterRef := ITableRef.FIELD(IServiceSignalRule."Field No.");
                IF FlowFilterDate > WORKDATE THEN
                  FlowFilterRef.SETFILTER('%1..%2', WORKDATE, FlowFilterDate)
                ELSE
                  FlowFilterRef.SETFILTER('%1..%2', FlowFilterDate, WORKDATE);
              END;
          END;
      END;
      ITableRef.FILTERGROUP(0);
    END;

    LOCAL PROCEDURE GetServiceObjectNoFilter@1100528605(ISignalType@1100528604 : 'Service Call,Service Location,Service Order';ICode@1100528603 : Code[20];IServiceObjectNo@1100528600 : Code[20]) ServiceObjectNoFilter : Text;
    VAR
      ServiceOrderObject@1100528601 : Record 11071724;
      TmpServiceObject@1100528602 : TEMPORARY Record 11071691;
    BEGIN
      CASE ISignalType OF
        ISignalType::"Service Call",
        ISignalType::"Service Location":
          ServiceObjectNoFilter := IServiceObjectNo;
        ISignalType::"Service Order":
          BEGIN
            ServiceOrderObject.SETRANGE("Service Order No.", ICode);
            IF ServiceOrderObject.FINDSET THEN
              REPEAT
                TmpServiceObject."No." := ServiceOrderObject."Object No.";
                IF TmpServiceObject.INSERT THEN;
              UNTIL ServiceOrderObject.NEXT = 0;
            IF TmpServiceObject.FINDSET THEN
              REPEAT
                IF ServiceObjectNoFilter <> '' THEN
                  ServiceObjectNoFilter += '|';
                ServiceObjectNoFilter += TmpServiceObject."No.";
              UNTIL TmpServiceObject.NEXT = 0;
          END;
      END;
    END;

    LOCAL PROCEDURE GetStandardObjectNoFilter@1100528610(ISignalType@1100528602 : 'Service Call,Service Location,Service Order';ICode@1100528601 : Code[20];IStandardObjectNo@1100528600 : Code[20]) StandardObjectNoFilter : Text;
    VAR
      ServiceOrderObject@1100528604 : Record 11071724;
      TmpStandardObject@1100528603 : TEMPORARY Record 11020334;
    BEGIN
      CASE ISignalType OF
        ISignalType::"Service Call",
        ISignalType::"Service Location":
          StandardObjectNoFilter := IStandardObjectNo;
        ISignalType::"Service Order":
          BEGIN
            ServiceOrderObject.SETRANGE("Service Order No.", ICode);
            IF ServiceOrderObject.FINDSET THEN
              REPEAT
                TmpStandardObject."No." := ServiceOrderObject."Standard Object No.";
                IF TmpStandardObject.INSERT THEN;
              UNTIL ServiceOrderObject.NEXT = 0;
            IF TmpStandardObject.FINDSET THEN
              REPEAT
                IF StandardObjectNoFilter <> '' THEN
                  StandardObjectNoFilter += '|';
                StandardObjectNoFilter += TmpStandardObject."No.";
              UNTIL TmpStandardObject.NEXT = 0;
          END;
      END;
    END;

    LOCAL PROCEDURE ShowBillToCustomerSignals@1100529600(SignalType@1100528612 : Option;Code@1100528602 : Code[20]) : Boolean;
    VAR
      ServiceCall@1100528607 : Record 11012822;
      ServiceOrder@1100528618 : Record 11012823;
      ServiceLocation@1100528604 : Record 11012801;
      ServiceSignalRule@1100529600 : Record 11071938;
    BEGIN
      CASE SignalType OF
        ServiceSignalRule.Type::"Service Call":
          BEGIN
            IF NOT ServiceCall.GET(Code) THEN
              EXIT(FALSE);
            IF ServiceCall."Bill-to Customer No." = '' THEN
              EXIT(FALSE);
            EXIT(ServiceCall."Customer No." <> ServiceCall."Bill-to Customer No.");
          END;
        ServiceSignalRule.Type::"Service Location":
          BEGIN
            IF NOT ServiceLocation.GET(Code) THEN
              EXIT(FALSE);
            IF ServiceLocation."Bill-to Customer No." = '' THEN
              EXIT(FALSE);
            EXIT(ServiceLocation."Customer No." <> ServiceLocation."Bill-to Customer No.");
          END;
        ServiceSignalRule.Type::"Service Order":
          BEGIN
            IF NOT ServiceOrder.GET(Code) THEN
              EXIT(FALSE);
            IF ServiceOrder."Bill-to Customer No." = '' THEN
              EXIT(FALSE);
            EXIT(ServiceOrder."Customer No." <> ServiceOrder."Bill-to Customer No.");
          END;
      END;
    END;

    BEGIN
    END.
  }
}

