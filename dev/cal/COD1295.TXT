OBJECT Codeunit 1295 Get Bank Stmt. Line Candidates
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW111.00,NAVDK;
  }
  PROPERTIES
  {
    TableNo=1293;
    OnRun=VAR
            BankAccReconLine@1001 : Record 274;
          BEGIN
            BankAccReconLine.GET("Statement Type","Bank Account No.","Statement No.","Statement Line No.");

            TransferExistingAppliedPmtEntries(Rec,BankAccReconLine);

            TransferCandidatestoAppliedPmtEntries(Rec,BankAccReconLine);
          END;

  }
  CODE
  {

    LOCAL PROCEDURE CreatePaymentApplicationProposalFromAppliedPmtEntry@3(VAR AppliedPmtEntry@1000 : Record 1294;VAR PaymentApplicationProposal@1001 : Record 1293);
    BEGIN
      IF AppliedPmtEntry.FINDSET THEN
        REPEAT
          PaymentApplicationProposal.CreateFromAppliedPaymentEntry(AppliedPmtEntry);
        UNTIL AppliedPmtEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE GetCandidateRanking@1(BankAccReconLine@1001 : Record 274;VAR TempBankStmtMatchingBuffer@1000 : TEMPORARY Record 1250);
    VAR
      MatchBankPayments@1002 : Codeunit 1255;
      MatchFIKBankRecLines@1060001 : Codeunit 11128593;
    BEGIN
      BankAccReconLine.SETRECFILTER;
      IF BankAccReconLine."Payment Reference" = '' THEN BEGIN  //NAVDK
        MatchBankPayments.SetApplyEntries(FALSE);
        MatchBankPayments.RUN(BankAccReconLine);
        MatchBankPayments.GetBankStatementMatchingBuffer(TempBankStmtMatchingBuffer);
      END ELSE
        MatchFIKBankRecLines.GetBankStatementMatchingBuffer(TempBankStmtMatchingBuffer,BankAccReconLine."Statement Line No.");  //NAVDK
    END;

    LOCAL PROCEDURE TransferExistingAppliedPmtEntries@5(VAR PaymentApplicationProposal@1000 : Record 1293;BankAccReconLine@1002 : Record 274);
    VAR
      ExistingAppliedPmtEntry@1001 : Record 1294;
    BEGIN
      ExistingAppliedPmtEntry.FilterAppliedPmtEntry(BankAccReconLine);
      CreatePaymentApplicationProposalFromAppliedPmtEntry(ExistingAppliedPmtEntry,PaymentApplicationProposal);
    END;

    LOCAL PROCEDURE TransferCandidatestoAppliedPmtEntries@6(VAR PaymentApplicationProposal@1000 : Record 1293;BankAccReconLine@1003 : Record 274);
    VAR
      BankPmtApplRule@1002 : Record 1252;
      TempBankStmtMatchingBuffer@1001 : TEMPORARY Record 1250;
      BankAccount@1004 : Record 270;
      Handled@1213 : Boolean;
    BEGIN
      OnBeforeTransferCandidatestoAppliedPmtEntries(BankAccReconLine,TempBankStmtMatchingBuffer,Handled);
      IF NOT Handled THEN
        GetCandidateRanking(BankAccReconLine,TempBankStmtMatchingBuffer);
      BankAccount.GET(BankAccReconLine."Bank Account No.");

      PaymentApplicationProposal.RESET;
      TempBankStmtMatchingBuffer.RESET;
      TempBankStmtMatchingBuffer.SETRANGE("One to Many Match",FALSE);
      IF TempBankStmtMatchingBuffer.FINDSET THEN
        REPEAT
          PaymentApplicationProposal.CreateFromBankStmtMacthingBuffer(TempBankStmtMatchingBuffer,BankAccReconLine,BankAccount);
          IF NOT PaymentApplicationProposal.INSERT(TRUE) THEN BEGIN
            PaymentApplicationProposal.FIND;
            PaymentApplicationProposal."Match Confidence" := BankPmtApplRule.GetMatchConfidence(PaymentApplicationProposal.Quality);
            PaymentApplicationProposal.MODIFY(TRUE);
          END;
        UNTIL TempBankStmtMatchingBuffer.NEXT = 0;
    END;

    [Integration]
    PROCEDURE OnBeforeTransferCandidatestoAppliedPmtEntries@1213(BankAccReconLine@1214 : Record 274;VAR TempBankStmtMatchingBuffer@1213 : TEMPORARY Record 1250;VAR Handled@1215 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

