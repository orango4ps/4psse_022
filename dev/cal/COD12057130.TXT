OBJECT Codeunit 12057130 ExFlow Assisted Rapid Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EXF500000,NAV2017+;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      PackageCodeTxt@1000 : TextConst 'ENU=ExFlow Data;SVE=ExFlow Data';
      PackageNameTxt@1001 : TextConst 'ENU=ExFlow Data Migration;SVE=Migrera Excel-data';
      ConfigPackageManagement@1002 : Codeunit 8611;
      ConfigExcelExchange@1003 : Codeunit 8618;
      DataMigratorDescriptionTxt@1004 : TextConst 'ENU=Import from Excel;SVE=Importera fr†n Excel';
      Instruction1Txt@1008 : TextConst 'ENU=1) Download the Excel template.;SVE=1) Ladda ned Excel-mallen.';
      Instruction2Txt@1005 : TextConst 'ENU=2) Fill in the template with your data.;SVE=2) Fyll i mallen med dina data.';
      ImportingMsg@1007 : TextConst 'ENU=Importing Data...;SVE=Importerar data...';
      ApplyingMsg@1006 : TextConst 'ENU=Applying Data...;SVE=Kopplar data...';
      ImportFromExcelTxt@1009 : TextConst 'ENU=Import from Excel;SVE=Importera fr†n Excel';
      ExcelFileExtensionTok@1010 : TextConst 'ENU=*.xlsx;SVE=*.xlsx';
      ExcelValidationErr@1013 : TextConst 'ENU=The file that you imported is corrupted. It contains columns that cannot be mapped to Dynamics 365 for Financials.;SVE=Filen som du har importerat „r skadad. Den inneh†ller kolumner som inte kan mappas till Dynamics 365 for Financials.';
      OpenAdvancedQst@1011 : TextConst 'ENU=The advanced setup experience requires you to specify how database tables are configured. We recommend that you only access the advanced setup if you are familiar with RapidStart Services.\\Do you want to continue?;SVE=I den avancerade konfigurationsmilj”n m†ste du ange hur databastabeller ska konfigureras. Det rekommenderas att du bara anv„nder den avancerade konfigurationen om du beh„rskar RapidStart Services.\\Vill du forts„tta?';
      ExcelFileNameTok@1012 : TextConst '@@@="%1 = String generated from current datetime to make sure file names are unique ";ENU=DataImport_Dynamics365%1.xlsx;SVE=DataImport_Dynamics365%1.xlsx';
      SettingsMissingQst@1014 : TextConst 'ENU=You have not specified import settings for this data source.\\Are you sure you want to continue?;SVE=Du har inte angett importinst„llningar f”r den h„r datak„llan.\\Vill du forts„tta?';
      TransactionExistsMsg@1020 : TextConst 'ENU=Transactions have already been entered. In order to use the wizard, you will need to create a new company to migrate your data.;SVE=Transaktioner har redan angetts. F”r att kunna anv„nda guiden m†ste du skapa ett nytt f”retag och migrera dina data.';
      TransactionforGLExistsMsg@1019 : TextConst 'ENU=Transactions have already been entered for "G/L Account". In order to use the wizard, unmark "G/L Account".;SVE=Transaktioner har redan angetts f”r "Redovisningskonto". F”r att kunna anv„nda guiden, avmarkera "Redovisningskonto".';
      TransactionforCustExistsMsg@1018 : TextConst 'ENU=Transactions have already been entered for "Customer". In order to use the wizard, unmark "Customer".;SVE=Transaktioner har redan angetts f”r "Kund". F”r att kunna anv„nda guiden, avmarkera "Kund".';
      TransactionforVendExistsMsg@1017 : TextConst 'ENU=Transactions have already been entered for "Vendor". In order to use the wizard, unmark "Vendor".;SVE=Transaktioner har redan angetts f”r "Leverant”r". F”r att kunna anv„nda guiden, avmarkera "Leverant”r".';
      TransactionforItemExistsMsg@1016 : TextConst 'ENU=Transactions have already been entered for "Item". In order to use the wizard, unmark "Item".;SVE=Transaktioner har redan angetts f”r "Artikel". F”r att kunna anv„nda guiden, avmarkera "Artikel".';
      SavedJrnlLinesFoundMsg@1015 : TextConst 'ENU=Saved journal lines are found. In order to use the wizard, you will need to delete the journal lines before you migrate your data.;SVE=Sparade journalrader hittades. F”r att kunna anv„nda guiden m†ste du radera journalraderna innan du migrerar dina data.';

    PROCEDURE ApplyExFlowUserPackage@1100285031(CodingRuleName2@1100285005 : Text);
    VAR
      ConfigPackageTable@1100285001 : Record 8613;
      ConfigPackageMgt@1100285000 : Codeunit 8611;
      ConfigPackage@1100285002 : Record 8623;
      EXUserCompany@1100285003 : Record 12013641;
      ExCodingRule@1100285004 : Record 12013660;
    BEGIN
      IF ConfigPackage.GET(GetPackageCode) THEN BEGIN
        ConfigPackageTable.SETRANGE("Package Code",GetPackageCode);
        ConfigPackageMgt.ApplyPackage(ConfigPackage,ConfigPackageTable,TRUE);
      END;

      EXUserCompany.CreateApprovalGroups('');
    END;

    PROCEDURE ImportExcelData@2() : Boolean;
    VAR
      FileManagement@1000 : Codeunit 419;
      ServerFile@1005 : Text[250];
    BEGIN
      ServerFile := COPYSTR(FileManagement.UploadFile(ImportFromExcelTxt,ExcelFileExtensionTok),1,MAXSTRLEN(ServerFile));

      IF ServerFile <> '' THEN BEGIN
        ImportExcelDataByFileName(ServerFile);
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE ImportExcelDataByFileName@56(FileName@1000 : Text[250]);
    VAR
      FileManagement@1002 : Codeunit 419;
      Window@1001 : Dialog;
    BEGIN
      Window.OPEN(ImportingMsg);

      FileManagement.ValidateFileExtension(FileName,ExcelFileExtensionTok);
      CreatePackageMetadata(FALSE);
      ValidateTemplateAndImportData(FileName);

      Window.CLOSE;
    END;

    PROCEDURE ExportExcelTemplate@4() : Boolean;
    VAR
      FileName@1001 : Text;
      HideDialog@1002 : Boolean;
    BEGIN
      EXIT(ExportExcelTemplateByFileName(FileName,HideDialog));
    END;

    PROCEDURE ExportExcelTemplateByFileName@35(VAR FileName@1000 : Text;HideDialog@1001 : Boolean) : Boolean;
    VAR
      ConfigPackageTable@1002 : Record 8613;
    BEGIN
      IF FileName = '' THEN
        FileName :=
          STRSUBSTNO(ExcelFileNameTok,FORMAT(CURRENTDATETIME,0,'<Day,2>_<Month,2>_<Year4>_<Hours24>_<Minutes,2>_<Seconds,2>'));

      CreatePackageMetadata(TRUE);
      ConfigPackageTable.SETRANGE("Package Code",PackageCodeTxt);
      ConfigExcelExchange.SetHideDialog(HideDialog);
      EXIT(ConfigExcelExchange.ExportExcel(FileName,ConfigPackageTable,FALSE,TRUE));
    END;

    PROCEDURE GetPackageCode@5() : Code[20];
    BEGIN
      EXIT(PackageCodeTxt);
    END;

    PROCEDURE CreatePackageMetadata@12(InsertConfigPackageFields@1004 : Boolean);
    VAR
      ConfigPackage@1000 : Record 8623;
      ConfigPackageManagement@1009 : Codeunit 8611;
      LanguageManagement@1100583000 : Codeunit 43;
      ApplicationSystemConstants@1100583001 : Codeunit 9015;
    BEGIN
      ConfigPackage.SETRANGE(Code,PackageCodeTxt);
      ConfigPackage.DELETEALL(TRUE);

      ConfigPackageManagement.InsertPackage(ConfigPackage,PackageCodeTxt,PackageNameTxt,FALSE);
      ConfigPackage."Language ID" := LanguageManagement.ApplicationLanguage;
      ConfigPackage."Product Version" := ApplicationSystemConstants.ApplicationVersion;
      ConfigPackage.MODIFY;

      InsertPackageTables;

      IF InsertConfigPackageFields THEN
        InsertPackageFieldsExFlowUsersSetup;
    END;

    LOCAL PROCEDURE InsertPackageTables@32();
    VAR
      ConfigPackageField@1001 : Record 8616;
      DataMigrationSetup@1005 : TEMPORARY Record 1806;
    BEGIN
      InsertPackageTableExFlowUsersSetup();

      ConfigPackageField.SETRANGE("Package Code",PackageCodeTxt);
      ConfigPackageField.MODIFYALL("Include Field",FALSE);
    END;

    LOCAL PROCEDURE InsertPackageTableExFlowUsersSetup@1100285003();
    VAR
      ConfigPackageTable@1100285001 : Record 8613;
      ConfigTableProcessingRule@1100285000 : Record 8631;
    BEGIN
      ConfigPackageManagement.InsertPackageTable(ConfigPackageTable,PackageCodeTxt,DATABASE::"EX User Company");
      ConfigPackageTable.MODIFY;
      ConfigPackageManagement.InsertProcessingRuleCustom(
        ConfigTableProcessingRule,ConfigPackageTable,100000,CODEUNIT::"Excel Post Processor");
    END;

    LOCAL PROCEDURE InsertPackageFieldsExFlowUsersSetup@1100285006();
    VAR
      ConfigPackageField@1100285000 : Record 8616;
    BEGIN
      ConfigPackageField.SETRANGE("Package Code",PackageCodeTxt);
      ConfigPackageField.SETRANGE("Table ID",DATABASE::"EX User Company"); //mt
      ConfigPackageField.DELETEALL(TRUE);

      InsertPackageField(DATABASE::"EX User Company",2,1);     // User ID
      InsertPackageField(DATABASE::"EX User Company",17,2);    // User Name
      InsertPackageField(DATABASE::"EX User Company",22,3);    // Superior
      InsertPackageField(DATABASE::"EX User Company",10,4);    // Email
      InsertPackageField(DATABASE::"EX User Company",12,5);    // User Level
      InsertPackageField(DATABASE::"EX User Company",16,6);    // Coding Rule ID
    END;

    LOCAL PROCEDURE InsertPackageField@33(TableNo@1000 : Integer;FieldNo@1001 : Integer;ProcessingOrderNo@1002 : Integer);
    VAR
      ConfigPackageField@1004 : Record 8616;
      RecordRef@1003 : RecordRef;
      FieldRef@1005 : FieldRef;
    BEGIN
      RecordRef.OPEN(TableNo);
      FieldRef := RecordRef.FIELD(FieldNo);

      ConfigPackageManagement.InsertPackageField(ConfigPackageField,PackageCodeTxt,TableNo,
        FieldRef.NUMBER,FieldRef.NAME,FieldRef.CAPTION,TRUE,TRUE,FALSE,FALSE);
      ConfigPackageField.VALIDATE("Processing Order",ProcessingOrderNo);
      ConfigPackageField.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ValidateTemplateAndImportData@29(FileName@1000 : Text);
    VAR
      TempExcelBuffer@1001 : TEMPORARY Record 370;
      ConfigPackage@1002 : Record 8623;
      ConfigPackageTable@1003 : Record 8613;
      ConfigPackageRecord@1005 : Record 8614;
      ConfigPackageField@1004 : Record 8616;
      ColumnHeaderRow@1006 : Integer;
      ColumnCount@1007 : Integer;
      RecordNo@1008 : Integer;
      FieldID@1009 : ARRAY [250] OF Integer;
      I@1010 : Integer;
    BEGIN
      ConfigPackage.GET(PackageCodeTxt);
      ConfigPackageTable.SETRANGE("Package Code",ConfigPackage.Code);

      ColumnHeaderRow := 3; // Data is stored in the Excel sheets starting from row 3

      IF ConfigPackageTable.FINDSET THEN
        REPEAT
          ConfigPackageField.RESET;

          // Check if Excel file contains data sheets with the supported master tables (Customer, Vendor, Item)
          IF IsTableInExcel(TempExcelBuffer,FileName,ConfigPackageTable) THEN BEGIN
            TempExcelBuffer.ReadSheet;
            // Jump to the Columns' header row
            TempExcelBuffer.SETFILTER("Row No.",'%1..',ColumnHeaderRow);

            ConfigPackageField.SETRANGE("Package Code",PackageCodeTxt);
            ConfigPackageField.SETRANGE("Table ID",ConfigPackageTable."Table ID");

            ColumnCount := 0;

            IF TempExcelBuffer.FINDSET THEN
              REPEAT
                IF TempExcelBuffer."Row No." = ColumnHeaderRow THEN BEGIN // Columns' header row
                  ConfigPackageField.SETRANGE("Field Caption",TempExcelBuffer."Cell Value as Text");

                  // Column can be mapped to a field, data will be imported to NAV
                  IF ConfigPackageField.FINDFIRST THEN BEGIN
                    FieldID[TempExcelBuffer."Column No."] := ConfigPackageField."Field ID";
                    ConfigPackageField."Include Field" := TRUE;
                    ConfigPackageField.MODIFY;
                    ColumnCount += 1;
                  END ELSE // Error is thrown when the template is corrupted (i.e., there are columns in Excel file that cannot be mapped to NAV)
                    ERROR(ExcelValidationErr);
                END ELSE BEGIN // Read data row by row
                  // A record is created with every new row
                  ConfigPackageManagement.InitPackageRecord(ConfigPackageRecord,PackageCodeTxt,
                    ConfigPackageTable."Table ID");
                  RecordNo := ConfigPackageRecord."No.";
                  FOR I := 1 TO ColumnCount DO
                    IF TempExcelBuffer.GET(TempExcelBuffer."Row No.",I) THEN
                      // Fields are populated in the record created
                      InsertFieldData(
                        ConfigPackageTable."Table ID",RecordNo,FieldID[I],TempExcelBuffer."Cell Value as Text")
                    ELSE
                      InsertFieldData(
                        ConfigPackageTable."Table ID",RecordNo,FieldID[I],'');

                  // Go to next line
                  TempExcelBuffer.SETFILTER("Row No.",'%1..',TempExcelBuffer."Row No." + 1);
                END;
              UNTIL TempExcelBuffer.NEXT = 0;

            TempExcelBuffer.RESET;
            TempExcelBuffer.DELETEALL;
            TempExcelBuffer.CloseBook;
          END ELSE BEGIN
            // Table is removed from the configuration package because it doen't exist in the Excel file
            TempExcelBuffer.QuitExcel;
            ConfigPackageTable.DELETE(TRUE);
          END;
        UNTIL ConfigPackageTable.NEXT = 0;
    END;

    [TryFunction]
    LOCAL PROCEDURE IsTableInExcel@40(VAR TempExcelBuffer@1004 : TEMPORARY Record 370;FileName@1003 : Text;ConfigPackageTable@1001 : Record 8613);
    BEGIN
      ConfigPackageTable.CALCFIELDS("Table Name","Table Caption");

      IF NOT TryOpenExcel(TempExcelBuffer,FileName,ConfigPackageTable."Table Name") THEN
        TryOpenExcel(TempExcelBuffer,FileName,ConfigPackageTable."Table Caption");
    END;

    [TryFunction]
    LOCAL PROCEDURE TryOpenExcel@34(VAR TempExcelBuffer@1004 : TEMPORARY Record 370;FileName@1003 : Text;SheetName@1000 : Text[250]);
    BEGIN
      TempExcelBuffer.OpenBook(FileName,SheetName);
    END;

    LOCAL PROCEDURE InsertFieldData@69(TableNo@1000 : Integer;RecordNo@1001 : Integer;FieldNo@1002 : Integer;Value@1003 : Text[250]);
    VAR
      ConfigPackageData@1004 : Record 8615;
    BEGIN
      ConfigPackageManagement.InsertPackageData(ConfigPackageData,PackageCodeTxt,
        TableNo,RecordNo,FieldNo,Value,FALSE);
    END;

    BEGIN
    {
      This codeunit requires NAV2017 or newer
      In earlier versions the CU is blank
    }
    END.
  }
}

