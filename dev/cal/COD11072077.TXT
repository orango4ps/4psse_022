OBJECT Codeunit 11072077 INSBOU Process Invoice
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    TableNo=11072656;
    OnRun=BEGIN
            ConvertINSBOUToSiB(Rec);
          END;

  }
  CODE
  {

    LOCAL PROCEDURE ConvertINSBOUToSiB@1100409002(VAR INSBOUInvoice@1100525006 : Record 11072656);
    VAR
      InvoiceSiB@1100528300 : Record 11072653;
    BEGIN
      IF (NOT INSBOUInvoice.FINDSET(TRUE)) THEN
        EXIT;

      REPEAT
        IF (INSBOUInvoice."Process Status" > INSBOUInvoice."Process Status"::Processing) THEN
          INSBOUInvoice.FIELDERROR("Process Status");

        INSBOUInvoice."Process Status" := INSBOUInvoice."Process Status"::Processing;
        INSBOUInvoice."Error Message" := '';
        INSBOUInvoice.MODIFY(TRUE);
        COMMIT;

        IF (NOT InvoiceSiB.GET(INSBOUInvoice.InvoiceNumber)) THEN BEGIN
          CreateInvoiceSiB(INSBOUInvoice);
          COMMIT;
        END;

        ProcessInvoiceLines(INSBOUInvoice);
      UNTIL (INSBOUInvoice.NEXT = 0);
    END;

    LOCAL PROCEDURE ProcessInvoiceLines@1100528305(INSBOUInvoice@1100528300 : Record 11072656);
    VAR
      InvoiceSiB@1100528302 : Record 11072653;
      INSBOUInvoiceLine@1100528309 : Record 11072657;
      InvoiceLineSiB@1100528301 : Record 11072654;
    BEGIN
      INSBOUInvoiceLine.SETRANGE(INSBOUInvoiceLine.InvoiceNumber, INSBOUInvoice.InvoiceNumber);
      INSBOUInvoiceLine.SETFILTER("Process Status", '<%1', INSBOUInvoiceLine."Process Status"::Processed);
      IF (INSBOUInvoiceLine.FINDSET(TRUE)) THEN BEGIN
        InvoiceSiB.GET(INSBOUInvoice.InvoiceNumber);
        REPEAT
          IF (NOT InvoiceLineSiB.GET(INSBOUInvoiceLine.InvoiceNumber, INSBOUInvoiceLine.LineNumber)) THEN BEGIN
            INSBOUInvoiceLine.VALIDATE("Process Status", INSBOUInvoiceLine."Process Status"::Processing);
            INSBOUInvoiceLine.MODIFY(TRUE);
            COMMIT;
            CreateInvoiceLineSiB(INSBOUInvoiceLine, InvoiceSiB, INSBOUInvoice);
          END;
          INSBOUInvoiceLine.VALIDATE("Process Status", INSBOUInvoiceLine."Process Status"::Processed);
          INSBOUInvoiceLine.MODIFY(TRUE);
          COMMIT;
        UNTIL (INSBOUInvoiceLine.NEXT = 0);
      END;
    END;

    LOCAL PROCEDURE CreateInvoiceSiB@1100528302(INSBOUInvoice@1100528300 : Record 11072656);
    VAR
      InvoiceSiB@1100528301 : Record 11072653;
    BEGIN
      InvoiceSiB.INIT;
      InvoiceSiB."No." := INSBOUInvoice.InvoiceNumber;
      InvoiceSiB.Source := InvoiceSiB.Source::INSBOU;
      InvoiceSiB."GS1 Invoice" := TRUE;
      CASE INSBOUInvoice.InvoiceType OF
        '380' : InvoiceSiB."Purch. Invoice Type" := InvoiceSiB."Purch. Invoice Type"::Invoice;
        '384' : InvoiceSiB."Purch. Invoice Type" := InvoiceSiB."Purch. Invoice Type"::CreditMemo;
      END;
      InvoiceSiB."Invoice Date" := INSBOUInvoice.InvoiceDate;
      InvoiceSiB."Related Purch. Order No." := INSBOUInvoice.GetRelatedPurchaseOrderNo;
      InvoiceSiB."Order Response Number" := INSBOUInvoice."Order Response Number";
      InvoiceSiB."Currency Code" := INSBOUInvoice.Currency;
      InvoiceSiB."Despatch Advice Number" := INSBOUInvoice.DespatchAdviceNumber;

      //Buyer
      InvoiceSiB."GLN Buyer" := INSBOUInvoice.BuyerGLN;
      InvoiceSiB."Name Buyer" := INSBOUInvoice.BuyerName;
      InvoiceSiB."Address Buyer" := INSBOUInvoice.BuyerStreetAndNumber;
      InvoiceSiB."Post Code Buyer" := INSBOUInvoice.BuyerPostalCode;
      InvoiceSiB."City Buyer" := INSBOUInvoice.BuyerCity;
      InvoiceSiB."Country Buyer" := INSBOUInvoice.BuyerCountry;
      InvoiceSiB."VAT Identification Buyer" := INSBOUInvoice.VATRegistrationNumber;

      //Supplier
      InvoiceSiB."GLN Vendor" := INSBOUInvoice.SupplierGLN;
      InvoiceSiB."Name Vendor" := INSBOUInvoice.SupplierName;
      InvoiceSiB."Address Vendor" := INSBOUInvoice.SupplierStreetAndNumber;
      InvoiceSiB."Post Code Vendor" := INSBOUInvoice.SupplierPostalCode;
      InvoiceSiB."City Vendor" := INSBOUInvoice.SupplierCity;
      InvoiceSiB."Country Vendor" := INSBOUInvoice.SupplierCountry;
      InvoiceSiB."VAT Identification Vendor" := INSBOUInvoice.SupplierVATRegistrationNumber;
      InvoiceSiB.IBAN := INSBOUInvoice.AccountInformationIBAN;
      InvoiceSiB."SWIFT Code" := INSBOUInvoice.AccountInformationBIC;

      //Invoicer
      InvoiceSiB."GLN Shipping" := INSBOUInvoice.InvoicerGLN;
      InvoiceSiB."Name Shipping" := INSBOUInvoice.InvoicerName;
      InvoiceSiB."Address Shipping" := INSBOUInvoice.InvoicerStreetAndNumber;
      InvoiceSiB."Post Code Shipping" := INSBOUInvoice.InvoicerPostalCode;
      InvoiceSiB."City Shipping" := INSBOUInvoice.InvoicerCity;
      InvoiceSiB."Country Shipping" := INSBOUInvoice.InvoicerCountry;

      //DeliveryParty
      InvoiceSiB."Name Delivery" := INSBOUInvoice.DeliveryPartyName;
      InvoiceSiB."Address Delivery" := INSBOUInvoice.DeliveryPartyStreetAndNumber;
      InvoiceSiB."Post Code Delivery" := INSBOUInvoice.DeliveryPartyPostalCode;
      InvoiceSiB."City Delivery" := INSBOUInvoice.DeliveryPartyCity;
      InvoiceSiB."Country Delivery" := INSBOUInvoice.DeliveryPartyCountry;

      //PaymentDiscount
      InvoiceSiB."Payment Discount %" := INSBOUInvoice.PaymentDiscountDiscountPercent;
      InvoiceSiB."Due Days Payment Discount" := INSBOUInvoice.PaymentDiscountNumberOfDaysAft;

      //InvoiceTotals
      InvoiceSiB."Total Invoice Amount" := ABS(INSBOUInvoice.TotalInvoiceAmount);
      InvoiceSiB."Total Net Amount Lines" := ABS(INSBOUInvoice.TotalNetLineAmount);
      InvoiceSiB."Total VAT amount" := ABS(INSBOUInvoice.TotalVATAmount);
      InvoiceSiB."Total Discounts/Surcharges" := ABS(INSBOUInvoice.TotalAmountInvoiceChargeAllowa);

      //get related info
      InvoiceSiB.DetermineVendor(FALSE);
      IF (InvoiceSiB."Vendor No." <> '') THEN
        InvoiceSiB.FillVATPostingGroupsHeader();
      InvoiceSiB.GetOnHold;

      InvoiceSiB.INSERT(TRUE);
      LinkInvoiceDocument(INSBOUInvoice, InvoiceSiB);
    END;

    LOCAL PROCEDURE CreateInvoiceLineSiB@1100528301(INSBOUInvoiceLine@1100528306 : Record 11072657;InvoiceSiB@1100528307 : Record 11072653;INSBOUInvoice@1100529400 : Record 11072656);
    VAR
      InvoiceLineSiB@1100528305 : Record 11072654;
      PurchaseHeader@1100528308 : Record 38;
      TradeItem@1100528303 : Record 11012317;
      Job@1100528402 : Record 11072003;
      ServiceOrder@1100528401 : Record 11012823;
      ItemCode@1100528301 : Code[20];
      VendorCode@1100528300 : Code[20];
      RelatedPurchaseOrderNo@1100528400 : Code[20];
    BEGIN
      InvoiceLineSiB.INIT;
      InvoiceLineSiB."Invoice No." := INSBOUInvoiceLine.InvoiceNumber;
      InvoiceLineSiB."Line No." := INSBOUInvoiceLine.LineNumber;
      InvoiceLineSiB."Order No. Buyer" := InvoiceSiB."Related Purch. Order No.";
      InvoiceLineSiB."Order Line No. Buyer" := INSBOUInvoiceLine.OrderLineIdentification;
      InvoiceLineSiB."External Line No." := INSBOUInvoiceLine.LineNumber;
      RelatedPurchaseOrderNo := InvoiceSiB.GetRelatedPurchaseOrderNo;
      IF INSBOUInvoice."Project No." <> '' THEN BEGIN
        IF Job.GET(INSBOUInvoice."Project No.") THEN
          InvoiceLineSiB."Project No." := INSBOUInvoice."Project No."
        ELSE
          IF ServiceOrder.GET(INSBOUInvoice."Project No.") THEN
            InvoiceLineSiB."Service Order No." := INSBOUInvoice."Project No.";
      END ELSE
        IF PurchaseHeader.GET(PurchaseHeader."Document Type"::Order, RelatedPurchaseOrderNo) THEN BEGIN
          InvoiceLineSiB."Project No." := PurchaseHeader."Job No.";
          InvoiceLineSiB."Service Order No." := PurchaseHeader."Service Order No.";
        END;

      //TradeItemIdentification
      VendorCode := GetVendorTradeItemByGLN(INSBOUInvoice.SupplierGLN);
      InvoiceLineSiB."Item No. Vendor" := INSBOUInvoiceLine.TradeItemIdentifaction;
      InvoiceLineSiB."GTIN Item" := INSBOUInvoiceLine.TradeItemGTIN;
      IF InvoiceLineSiB."Item No. Vendor" <> '' THEN
        ItemCode := InvoiceLineSiB."Item No. Vendor"
      ELSE
        ItemCode := InvoiceLineSiB."GTIN Item";
      IF TradeItem.GET(VendorCode, ItemCode) THEN BEGIN
        InvoiceLineSiB."Vendor (Trade Item)" := TradeItem.Vendor;
        InvoiceLineSiB.VALIDATE("Trade Item", TradeItem."Item Code");
        InvoiceLineSiB."Cost Object" := TradeItem."Cost Object";
      END ELSE BEGIN
         IF InvoiceLineSiB."GTIN Item" <> '' THEN BEGIN
           TradeItem.RESET;
           TradeItem.SETCURRENTKEY("GTIN Code (Item)");
           TradeItem.SETRANGE("GTIN Code (Item)", InvoiceLineSiB."GTIN Item");
           TradeItem.SETRANGE(Vendor, VendorCode);
           IF TradeItem.FINDFIRST THEN BEGIN
             InvoiceLineSiB."Vendor (Trade Item)" := TradeItem.Vendor;
             InvoiceLineSiB.VALIDATE("Trade Item", TradeItem."Item Code");
             InvoiceLineSiB."Cost Object" := TradeItem."Cost Object";
           END;
        END;
      END;

      //Plant
      FillInvoceLineSiB_PlantNumber(INSBOUInvoiceLine, InvoiceSiB, InvoiceLineSiB);
      InvoiceLineSiB."Time Quantity" := INSBOUInvoiceLine."Time Quantity";
      InvoiceLineSiB."Time Unit" := INSBOUInvoiceLine."Time Unit";
      InvoiceLineSiB."Starting Date" := INSBOUInvoiceLine."Starting Date";
      InvoiceLineSiB."Ending Date" := INSBOUInvoiceLine."Ending Date";

      //AdditionalItemIdentification
      InvoiceLineSiB.Description := INSBOUInvoiceLine.TradeItemDescription;

      //PriceInformation
      InvoiceLineSiB."Delivered Quantity" := ABS(INSBOUInvoiceLine.DeliveredQuantity);
      InvoiceLineSiB."Unit Code Delivered Quantity" := INSBOUInvoiceLine.DeliveredQuantityUnitCode;
      InvoiceLineSiB."Invoiced Quantity" := InvoiceLineSiB."Delivered Quantity";  //checked on approval
      InvoiceLineSiB."Net Line Amount" := ABS(INSBOUInvoiceLine.NetLineAmount);
      InvoiceLineSiB.Price := ABS(INSBOUInvoiceLine.PIPrice);
      InvoiceLineSiB."Price Base Quantity" := INSBOUInvoiceLine.PINumberOfUnitsInPriceBasis;
      InvoiceLineSiB."Price Base Unit Code" := INSBOUInvoiceLine.PIMesureUnitPriceBasis;
      IF InvoiceLineSiB."Unit of Measure Code" = '' THEN //default filled by validate item code
        InvoiceLineSiB."Unit of Measure Code" := InvoiceLineSiB."Unit Code Delivered Quantity";
      //external unit code (PCE) will be converted to Navision unit (ST) when SiB-invoice will be processed to Nav-purchase document.

      //VATInformation
      InvoiceLineSiB."VAT Rate Type" := INSBOUInvoiceLine.VATRate;
      InvoiceLineSiB.VALIDATE("VAT %", INSBOUInvoiceLine.VATPercentage);
      InvoiceLineSiB.INSERT(TRUE);
    END;

    PROCEDURE LinkInvoiceDocument@1100528300(INSBOUInvoice@1100528300 : Record 11072656;InvoiceSiB@1100528301 : Record 11072653);
    VAR
      DocumentProperties@1100528304 : Record 11012746;
      DocumentLinkManagement@1100528302 : Codeunit 11012401;
      RecRef@1100528303 : RecordRef;
    BEGIN
      RecRef.GETTABLE(INSBOUInvoice);
      DocumentLinkManagement.GetDocumentsComp(DocumentProperties, RecRef, COMPANYNAME);
      DocumentProperties.MARKEDONLY(TRUE);
      IF (NOT DocumentProperties.FINDSET) THEN
        EXIT;

      RecRef.GETTABLE(InvoiceSiB);
      REPEAT
        DocumentLinkManagement.CreateOneDocumentLink(DocumentProperties, RecRef.RECORDID);
      UNTIL (DocumentProperties.NEXT = 0);
    END;

    LOCAL PROCEDURE GetVendorTradeItemByGLN@1100528502(GLN@1100528500 : Code[13]) VendorTradeItem : Code[15];
    VAR
      Vendor@1100528501 : Record 23;
      ETIMVendorCentralMgt@1100528502 : Record 11012304;
    BEGIN
      Vendor.RESET;
      Vendor.SETRANGE(GLN, GLN);
      IF Vendor.COUNT = 1 THEN
        IF Vendor.FINDFIRST THEN
          IF Vendor."Vendor (Trade Item)" <> '' THEN
            EXIT(Vendor."Vendor (Trade Item)");

      EXIT(ETIMVendorCentralMgt.GetVendorFromGLN(GLN));
    END;

    LOCAL PROCEDURE FillInvoceLineSiB_PlantNumber@1100529001(INSBOUInvoiceLine@1100529000 : Record 11072657;InvoiceSiB@1100529005 : Record 11072653;VAR InvoiceLineSiB@1100529001 : Record 11072654);
    VAR
      PlantSetup@1100529002 : Record 11012550;
      PlantNumber@1100529004 : Record 11012552;
      PlantVendor@1100529003 : Record 11012596;
    BEGIN
      IF (INSBOUInvoiceLine.TradeItemIdentifaction = '') OR
         (STRLEN(INSBOUInvoiceLine.TradeItemIdentifaction) > MAXSTRLEN(PlantNumber."Inspection No."))
      THEN
        EXIT;
      PlantSetup.SETRANGE("Primary Key", '');
      IF NOT PlantSetup.FINDFIRST THEN
        EXIT;
      PlantNumber.SETCURRENTKEY("Inspection No.");
      PlantNumber.SETRANGE("Inspection No.", INSBOUInvoiceLine.TradeItemIdentifaction);
      IF InvoiceSiB."Related Purch. Order No." <> '' THEN BEGIN
        PlantNumber.SETRANGE("Purchase Order No.", InvoiceSiB."Related Purch. Order No.");
        IF PlantNumber.ISEMPTY THEN
          PlantNumber.SETRANGE("Purchase Order No.");
      END;
      IF PlantNumber.FINDFIRST THEN BEGIN
        InvoiceLineSiB.VALIDATE("Plant Type", PlantNumber."Plant Type");
        InvoiceLineSiB.VALIDATE("Plant No.", PlantNumber."No.");
      END ELSE BEGIN
        IF (InvoiceSiB."Vendor No." = '') OR (STRLEN(INSBOUInvoiceLine.TradeItemIdentifaction) > MAXSTRLEN(PlantVendor."Vendor Plant No.")) THEN
          EXIT;
        PlantVendor.SETCURRENTKEY("Vendor No.", "Vendor Plant No.", "Plant Type");
        PlantVendor.SETRANGE("Vendor No.", InvoiceSiB."Vendor No.");
        PlantVendor.SETRANGE("Vendor Plant No.", INSBOUInvoiceLine.TradeItemIdentifaction);
        PlantVendor.SETFILTER("Plant Type", '<>%1', '');
        PlantVendor.SETRANGE(Type, PlantVendor.Type::Rent);
        IF PlantVendor.ISEMPTY THEN
          PlantVendor.SETRANGE(Type);
        IF PlantVendor.FINDFIRST THEN BEGIN
          InvoiceLineSiB.VALIDATE("Plant Type", PlantVendor."Plant Type");
          PlantNumber.RESET;
          PlantNumber.SETRANGE("Plant Type", PlantVendor."Plant Type");
          PlantNumber.SETRANGE(Vendor, PlantVendor."Vendor No.");
          IF InvoiceSiB."Related Purch. Order No." <> '' THEN
            PlantNumber.SETRANGE("Purchase Order No.", InvoiceSiB."Related Purch. Order No.");
          IF PlantNumber.FINDFIRST THEN BEGIN
            IF PlantNumber.NEXT = 0 THEN
              InvoiceLineSiB.VALIDATE("Plant No.", PlantNumber."No.");
          END;
        END;
      END;
      IF InvoiceLineSiB."Plant Type" <> '' THEN
        InvoiceLineSiB."Item No. Vendor" := '';
    END;

    BEGIN
    END.
  }
}

