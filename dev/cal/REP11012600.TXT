OBJECT Report 11012600 Export UAR Hour Accounting
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Exportieren Stundenerfassung (UAR);
               ENU=Export Hour Accounting (UAR);
               NLD=Exporteren urenverantwoording (UAR);
               SVE=Export tidrapportering (UAR)];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  ExportBufferRec.LOCKTABLE;

                  HrsSetupRec.GET;
                  HrsSetupRec.TESTFIELD("Hour Acc. Rail CLA", TRUE);
                  HrsSetupRec.TESTFIELD("UAR Task Pause");
                  HrsSetupRec.TESTFIELD("UAR Task Worked Hours");

                  IF gRunMode = '' THEN
                    InitSelections('');

                  SaveYear := 0;
                  SaveWeek := 0;
                  SaveCompNo := '';
                  SaveAdminNo := '';

                  SkipSaveAdminNo := TRUE;
                END;

  }
  DATASET
  {
    { 3272;    ;DataItem;                    ;
               DataItemTable=Table11012613;
               DataItemTableView=SORTING(Year,Week,Company No. Paymaster,Administration No. Paymaster)
                                 WHERE(External=CONST(No));
               OnAfterGetRecord=BEGIN
                                  IF (Year <> SaveYear) OR (Week <> SaveWeek) OR
                                     (SaveCompNo <> "Company No. Paymaster") OR
                                     (SaveAdminNo <> "Administration No. Paymaster")
                                  THEN BEGIN
                                    ExportToUarFile();
                                    ExportBufferRec.DELETEALL;
                                    COMMIT;
                                    ExportBufferRec.LOCKTABLE;

                                    SaveYear := Year;
                                    SaveWeek := Week;
                                    SaveCompNo := "Company No. Paymaster";
                                    SaveAdminNo := "Administration No. Paymaster";

                                    SkipSaveAdminNo := CheckSkipAdminNo();

                                    WeekRec.GET(Year, Week);
                                    DayNoFirstDay := DATE2DWY(WeekRec."Starting Date", 1);

                                    FillYearTxt(Year);
                                    FillWeekTxt(Week);
                                    FillCompNoTxt("Company No. Paymaster");
                                    FillAdminNoTxt("Administration No. Paymaster");

                                    NextLineNo := 1;
                                  END;

                                  IF SkipSaveAdminNo THEN
                                    CurrReport.SKIP;

                                  FillEmplNoTxt("Employee No.");
                                END;

               OnPostDataItem=BEGIN
                                ExportToUarFile();
                                ExportBufferRec.DELETEALL;
                                COMMIT;
                              END;

               ReqFilterFields=Year,Week,Company No. Paymaster,Administration No. Paymaster,Employee No. }

    { 5441;1   ;DataItem;                    ;
               DataItemTable=Table11012614;
               DataItemTableView=SORTING(Year,Week,Employee No.,Line No.);
               OnAfterGetRecord=VAR
                                  ExpLProjRec@1100525000 : Record 11012624;
                                  StartExpenseTime@1100528500 : Time;
                                  EndExpenseTime@1100528501 : Time;
                                BEGIN
                                  IF (Type <> Type::Service) OR ((Type = Type::Service) AND ("Project No." <> '')) THEN BEGIN
                                    IF "Receiving Company" <> '' THEN
                                      ProjRec.CHANGECOMPANY("Receiving Company")
                                    ELSE
                                      ProjRec.CHANGECOMPANY(COMPANYNAME);
                                  //Start new
                                    IF SpecProj THEN
                                      IF NOT ExpLProjRec.GET("Project No.", SaveCompNo, SaveAdminNo) THEN
                                        CurrReport.SKIP;
                                  //End new
                                    ProjRec.GET("Project No.");
                                    ProjRec.TESTFIELD("UAR Task");

                                    FillProjNoTxt("Project No.");
                                    FillUarTaskTxt(ProjRec."UAR Task");
                                  END;

                                  IF (Type = Type::Service) THEN BEGIN
                                    FillProjNoTxt("Service Order No."); //* Bij Service-uren altijd vullen met servceorder (9/1/06 WtH in overleg met Strukton)
                                    IF ("Project No." = '') THEN
                                      FillUarTaskTxt(HrsSetupRec."UAR Task Worked Hours");
                                  END;

                                  IF CallOutResponseOccursInHourAccLine THEN
                                    HrsSetupRec.TESTFIELD("UAR Task Call-Out Response");
                                  FillUarTaskCallOutResponseTxt(HrsSetupRec."UAR Task Call-Out Response");

                                  FOR Counter := DayNoFirstDay TO (DayNoFirstDay + 6) DO BEGIN
                                    IF Counter > 7 THEN
                                      DayNo := Counter - 7
                                    ELSE
                                      DayNo := Counter;

                                    IF ( (DayNo = 1) AND ("Monday From" <> 0T) AND ("Monday To" <> 0T) ) OR
                                       ( (DayNo = 2) AND ("Tuesday From" <> 0T) AND ("Tuesday To" <> 0T) ) OR
                                       ( (DayNo = 3) AND ("Wednesday From" <> 0T) AND ("Wednesday To" <> 0T) ) OR
                                       ( (DayNo = 4) AND ("Thursday From" <> 0T) AND ("Thursday To" <> 0T) ) OR
                                       ( (DayNo = 5) AND ("Friday From" <> 0T) AND ("Friday To" <> 0T) ) OR
                                       ( (DayNo = 6) AND ("Saterday From" <> 0T) AND ("Saterday To" <> 0T) ) OR
                                       ( (DayNo = 7) AND ("Sunday From" <> 0T) AND ("Sunday To" <> 0T) )
                                    THEN BEGIN
                                      DateOfHours := FillDateOfHours(DayNo);
                                      FillDateTxt(DateOfHours);
                                      FillDayTxt(DayNo);
                                      FillStartTimeTxt(DayNo);
                                      FillEndTimeTxt(DayNo);
                                      FillTravelToTxt(DayNo);
                                      FillTravelBackTxt(DayNo);
                                      FillDriverHrsTxt(DayNo);
                                      FillStandByTxt(DayNo);
                                      FillTwelveHrShiftTxt(DayNo);

                                      LineText := '';
                                      LineText := LineText + CompNoTxt;
                                      LineText := LineText + AdminNoTxt;
                                      LineText := LineText + ' ';  // Filler
                                      LineText := LineText + 'R';  // Realization
                                      LineText := LineText + 'X';  // Will be filled in the dataport New/Correction (N/C)
                                      LineText := LineText + WeekTxt;
                                      LineText := LineText + EmplNoTxt;
                                      LineText := LineText + ProjNoTxt;
                                      IF IsCallOutResponse(DayNo) THEN
                                        LineText := LineText + UarTaskCallOutResponseTxt
                                      ELSE
                                        LineText := LineText + UarTaskTxt;
                                      LineText := LineText + '01';  // Fixed Entry No.
                                      LineText := LineText + DateTxt;
                                      LineText := LineText + DayTxt;
                                      LineText := LineText + StartTimeTxt;
                                      LineText := LineText + EndTimeTxt;
                                      LineText := LineText + TravelToTxt;
                                      LineText := LineText + TravelBackTxt;
                                      LineText := LineText + DriverHrsTxt;
                                      LineText := LineText + StandByTxt;
                                      LineText := LineText + TwelveHrShiftTxt;

                                      ExportBufferRec.INIT;
                                      ExportBufferRec.Year := Year;
                                      ExportBufferRec.Week := Week;
                                      ExportBufferRec."Company No. Paymaster" := "Posted UAR Hour Accounting"."Company No. Paymaster";
                                      ExportBufferRec."Administration No. Paymaster" := "Posted UAR Hour Accounting"."Administration No. Paymaster";
                                      ExportBufferRec."Line No." := NextLineNo;
                                      ExportBufferRec."Export Text" := LineText;
                                      ExportBufferRec.INSERT;
                                      NextLineNo := NextLineNo + 1;
                                    END;

                                    //Handle Expenses
                                    IF (DayNo = 6) AND (Quantity <> 0) AND ("UAR Task Expense" <> '') THEN BEGIN
                                      DateOfHours := FillDateOfHours(DayNo);
                                      FillDateTxt(DateOfHours);
                                      FillDayTxt(DayNo);
                                      FillUarTaskExpenseTxt("UAR Task Expense");
                                      StartExpenseTime := 120000T;
                                      EndExpenseTime := StartExpenseTime + Quantity * 3600000;

                                      LineText := '';
                                      LineText := LineText + CompNoTxt;
                                      LineText := LineText + AdminNoTxt;
                                      LineText := LineText + ' ';  // Filler
                                      LineText := LineText + 'R';  // Realization
                                      LineText := LineText + 'X';  // Will be filled in the dataport New/Correction (N/C)
                                      LineText := LineText + WeekTxt;
                                      LineText := LineText + EmplNoTxt;
                                      LineText := LineText + ProjNoTxt;
                                      LineText := LineText + UarTaskExpenseTxt;
                                      LineText := LineText + '01';  // Fixed Entry No.
                                      LineText := LineText + DateTxt;
                                      LineText := LineText + DayTxt;
                                      LineText := LineText + FillTimeTxt(StartExpenseTime);;
                                      LineText := LineText + FillTimeTxt(EndExpenseTime);
                                      LineText := LineText + '00000000NNN';

                                      ExportBufferRec.INIT;
                                      ExportBufferRec.Year := Year;
                                      ExportBufferRec.Week := Week;
                                      ExportBufferRec."Company No. Paymaster" := "Posted UAR Hour Accounting"."Company No. Paymaster";
                                      ExportBufferRec."Administration No. Paymaster" := "Posted UAR Hour Accounting"."Administration No. Paymaster";
                                      ExportBufferRec."Line No." := NextLineNo;
                                      ExportBufferRec."Export Text" := LineText;
                                      ExportBufferRec.INSERT;
                                      NextLineNo := NextLineNo + 1;
                                    END;

                                  END;
                                END;

               DataItemLink=Year=FIELD(Year),
                            Week=FIELD(Week),
                            Employee No.=FIELD(Employee No.) }

    { 8456;2   ;DataItem;                    ;
               DataItemTable=Table11012615;
               DataItemTableView=SORTING(Year,Week,Employee No.,Hour Acc. Line No.,Line No.);
               OnAfterGetRecord=VAR
                                  lvDayNoPause@1210190000 : Integer;
                                BEGIN
                                  FillUarTaskTxt(HrsSetupRec."UAR Task Pause");
                                  TravelToTxt := FillTravelTxt(0);
                                  TravelBackTxt := FillTravelTxt(0);

                                  FOR Counter := DayNoFirstDay TO (DayNoFirstDay + 6) DO BEGIN
                                    IF Counter > 7 THEN
                                      DayNo := Counter - 7
                                    ELSE
                                      DayNo := Counter;

                                    IF ( (DayNo = 1) AND ("Monday From" <> 0T) AND ("Monday To" <> 0T) ) OR
                                       ( (DayNo = 2) AND ("Tuesday From" <> 0T) AND ("Tuesday To" <> 0T) ) OR
                                       ( (DayNo = 3) AND ("Wednesday From" <> 0T) AND ("Wednesday To" <> 0T) ) OR
                                       ( (DayNo = 4) AND ("Thursday From" <> 0T) AND ("Thursday To" <> 0T) ) OR
                                       ( (DayNo = 5) AND ("Friday From" <> 0T) AND ("Friday To" <> 0T) ) OR
                                       ( (DayNo = 6) AND ("Saterday From" <> 0T) AND ("Saterday To" <> 0T) ) OR
                                       ( (DayNo = 7) AND ("Sunday From" <> 0T) AND ("Sunday To" <> 0T) )
                                    THEN BEGIN
                                      // Pause is registered on the day of the start time of the hour acc. line. If the pause is after midnight then
                                      // in the export file the date must be the date of the start time of the pause (also day text of this date).
                                      DateOfHours := FillDateOfHours(DayNo);
                                      lvDayNoPause := DayNo;
                                      IF ((DayNo = 1) AND ("Monday From" < "Posted UAR Hour Acc. Line"."Monday From")) OR
                                         ((DayNo = 2) AND ("Tuesday From" < "Posted UAR Hour Acc. Line"."Tuesday From")) OR
                                         ((DayNo = 3) AND ("Wednesday From" < "Posted UAR Hour Acc. Line"."Wednesday From")) OR
                                         ((DayNo = 4) AND ("Thursday From" < "Posted UAR Hour Acc. Line"."Thursday From")) OR
                                         ((DayNo = 5) AND ("Friday From" < "Posted UAR Hour Acc. Line"."Friday From")) OR
                                         ((DayNo = 6) AND ("Saterday From" < "Posted UAR Hour Acc. Line"."Saterday From")) OR
                                         ((DayNo = 7) AND ("Sunday From" < "Posted UAR Hour Acc. Line"."Sunday From"))
                                      THEN BEGIN
                                        DateOfHours := DateOfHours + 1;
                                        lvDayNoPause := lvDayNoPause + 1;
                                      END;

                                      FillDateTxt(DateOfHours);
                                      IF lvDayNoPause > 7 THEN
                                        lvDayNoPause := lvDayNoPause - 7;
                                      FillDayTxt(lvDayNoPause);

                                      FillPauseStartTimeTxt(DayNo);  // Dayno !
                                      FillPauseEndTimeTxt(DayNo);

                                      LineText := '';
                                      LineText := LineText + CompNoTxt;
                                      LineText := LineText + AdminNoTxt;
                                      LineText := LineText + ' ';  // Filler
                                      LineText := LineText + 'R';  // Realization
                                      LineText := LineText + 'X';  // Will be filled in the dataport New/Correction (N/C)
                                      LineText := LineText + WeekTxt;
                                      LineText := LineText + EmplNoTxt;
                                      LineText := LineText + ProjNoTxt;
                                      LineText := LineText + UarTaskTxt;
                                      LineText := LineText + '01';  // Fixed Entry No.
                                      LineText := LineText + DateTxt;
                                      LineText := LineText + DayTxt;
                                      LineText := LineText + StartTimeTxt;
                                      LineText := LineText + EndTimeTxt;
                                      LineText := LineText + TravelToTxt;
                                      LineText := LineText + TravelBackTxt;
                                      LineText := LineText + 'N';  // Driver (J/N), always 'N' for Pause
                                      LineText := LineText + 'N';  // Stand By (J/N), always 'N' for Pause
                                      LineText := LineText + 'N';  // Scheduled 12 Hour Shift (J/N), always 'N' for Pause

                                      ExportBufferRec.INIT;
                                      ExportBufferRec.Year := Year;
                                      ExportBufferRec.Week := Week;
                                      ExportBufferRec."Company No. Paymaster" := "Posted UAR Hour Accounting"."Company No. Paymaster";
                                      ExportBufferRec."Administration No. Paymaster" := "Posted UAR Hour Accounting"."Administration No. Paymaster";
                                      ExportBufferRec."Line No." := NextLineNo;
                                      ExportBufferRec."Export Text" := LineText;
                                      ExportBufferRec.INSERT;
                                      NextLineNo := NextLineNo + 1;
                                    END;
                                  END;
                                END;

               DataItemLink=Year=FIELD(Year),
                            Week=FIELD(Week),
                            Employee No.=FIELD(Employee No.),
                            Hour Acc. Line No.=FIELD(Line No.) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      HrsSetupRec@1210190013 : Record 11012600;
      ExportBufferRec@1210190005 : Record 11012618;
      ExportLogbookRec@1210190029 : Record 11012617;
      WeekRec@1210190016 : Record 11012601;
      PaymAdminRec@1210190030 : Record 11012604;
      ProjRec@1210190014 : Record 11072003;
      DateOfHours@1210190031 : Date;
      SkipSaveAdminNo@1210190028 : Boolean;
      Counter@1210190025 : Integer;
      DayNo@1210190007 : Integer;
      NextLineNo@1210190004 : Integer;
      DayNoFirstDay@1210190017 : Integer;
      SaveYear@1210190000 : Integer;
      SaveWeek@1210190001 : Integer;
      SaveCompNo@1210190002 : Code[10];
      SaveAdminNo@1210190003 : Code[10];
      gRunMode@1210190026 : Code[10];
      LineText@1210190006 : Text[100];
      YearTxt@1210190024 : Text[10];
      WeekTxt@1210190009 : Text[10];
      CompNoTxt@1210190010 : Text[10];
      AdminNoTxt@1210190011 : Text[10];
      EmplNoTxt@1210190008 : Text[20];
      ProjNoTxt@1210190012 : Text[20];
      UarTaskTxt@1210190015 : Text[10];
      UarTaskCallOutResponseTxt@1100528400 : Text[10];
      UarTaskExpenseTxt@1100528500 : Text[10];
      DateTxt@1210190018 : Text[10];
      DayTxt@1210190019 : Text[10];
      StartTimeTxt@1210190020 : Text[10];
      EndTimeTxt@1210190021 : Text[10];
      TravelToTxt@1210190022 : Text[10];
      TravelBackTxt@1210190023 : Text[10];
      Text000@1210190027 : TextConst 'DEU=Exportieren Korrekturen?;ENU=Export corrections?;NLD=Exporteren correcties?;SVE=Exportera korrigeringar?';
      DriverHrsTxt@1100528200 : Text[10];
      StandByTxt@1100528201 : Text[10];
      TwelveHrShiftTxt@1100528202 : Text[10];
      SpecProj@1100525000 : Boolean;
      Text001@1100529500 : TextConst 'DEU=Export Datei...;ENU=Export File...;NLD=Exporteer bestand...';

    PROCEDURE InitSelections@1210190016(IRunMode@1210190000 : Code[10]);
    BEGIN
      // Run Mode: NEW/CORRECTION/''
      IF IRunMode <> '' THEN
        gRunMode := IRunMode
      ELSE BEGIN
        IF CONFIRM(Text000) THEN
          gRunMode := 'CORRECTION'
        ELSE
          gRunMode := 'NEW';
      END;
    END;

    PROCEDURE CheckSkipAdminNo@1210190022() : Boolean;
    VAR
      ExpLProjectsRec@1100525002 : Record 11012624;
      PUARHourAccLine@1100525001 : Record 11012614;
      FoundLeaveProj@1100525000 : Boolean;
    BEGIN
      SpecProj := FALSE;

      IF NOT PaymAdminRec.GET(SaveCompNo, SaveAdminNo) THEN
        EXIT(TRUE);

      //IF NOT PaymAdminRec."Export to UAR" THEN //old
      //  EXIT(TRUE);                            //old
      //Start new
      //Bypass for new defined Leave Projects
      IF NOT PaymAdminRec."Export to UAR" THEN BEGIN
        PUARHourAccLine.RESET;
        PUARHourAccLine.SETRANGE(Year, "Posted UAR Hour Accounting".Year);
        PUARHourAccLine.SETRANGE(Week, "Posted UAR Hour Accounting".Week);
        PUARHourAccLine.SETRANGE("Employee No.", "Posted UAR Hour Accounting"."Employee No.");
        IF PUARHourAccLine.FINDSET THEN BEGIN
          REPEAT
            IF ExpLProjectsRec.GET(PUARHourAccLine."Project No.", SaveCompNo, SaveAdminNo) THEN BEGIN
              FoundLeaveProj := TRUE;
              SpecProj := TRUE;
            END;
          UNTIL (PUARHourAccLine.NEXT = 0) OR (FoundLeaveProj = TRUE);
        END;
        IF NOT SpecProj THEN
          EXIT(TRUE);
      END;
      //End new

      ExportLogbookRec.SETRANGE(Year, SaveYear);
      ExportLogbookRec.SETRANGE(Week, SaveWeek);
      ExportLogbookRec.SETRANGE("Company No. Paymaster", SaveCompNo);
      ExportLogbookRec.SETRANGE("Administration No. Paymaster", SaveAdminNo);
      IF NOT ExportLogbookRec.FIND('-') THEN BEGIN
        IF gRunMode <> 'NEW' THEN
          EXIT(TRUE);
      END ELSE BEGIN
        IF gRunMode <> 'CORRECTION' THEN
          EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE ExportToUarFile@1210190010();
    VAR
      lvExportBufferRec@1210190001 : Record 11012618;
      TempBlob@1100409001 : Record 99008535;
      ExportUARHourAccounting@1100409000 : XMLport 11012600;
      FileManagement@1100409003 : Codeunit 419;
      OStream@1100409002 : OutStream;
      ClientTypeManagement@1100529500 : Codeunit 4030;
      ToFile@1100529501 : Text;
      InStream@1100529502 : InStream;
    BEGIN
      IF SkipSaveAdminNo THEN
        EXIT;

      lvExportBufferRec.SETRANGE(Year, SaveYear);
      lvExportBufferRec.SETRANGE(Week, SaveWeek);
      lvExportBufferRec.SETRANGE("Company No. Paymaster", SaveCompNo);
      lvExportBufferRec.SETRANGE("Administration No. Paymaster", SaveAdminNo);

      TempBlob.Blob.CREATEOUTSTREAM(OStream);
      ExportUARHourAccounting.InitSelections(SaveYear, SaveWeek, SaveCompNo, SaveAdminNo, YearTxt, WeekTxt, CompNoTxt, AdminNoTxt);
      ExportUARHourAccounting.SETTABLEVIEW(lvExportBufferRec);
      ExportUARHourAccounting.SETDESTINATION(OStream);
      ExportUARHourAccounting.EXPORT;

      IF NOT ClientTypeManagement.IsCommonWebClientType THEN
        FileManagement.BLOBExport4PS(TempBlob, ExportUARHourAccounting.FILENAME, FALSE, TRUE)
      ELSE BEGIN
        TempBlob.Blob.CREATEINSTREAM(InStream);
        ToFile := 'uar_hour_acc.txt';
        DOWNLOADFROMSTREAM(InStream, Text001, '', '', ToFile);
      END;
    END;

    PROCEDURE FillYearTxt@1210190014(IYear@1210190000 : Integer);
    BEGIN
      YearTxt := STRSUBSTNO('%1', IYear);
      FormatTxtToLengthWithPostChar(YearTxt, ' ', 4);
    END;

    PROCEDURE FillWeekTxt@1210190001(IWeek@1210190000 : Integer);
    BEGIN
      WeekTxt := STRSUBSTNO('%1', IWeek);
      FormatTxtToLengthWithPreChar(WeekTxt, '0', 2);
    END;

    PROCEDURE FillCompNoTxt@1210190000(ICompNo@1210190000 : Code[10]);
    BEGIN
      CompNoTxt := ICompNo;
      FormatTxtToLengthWithPostChar(CompNoTxt, ' ', 4);
    END;

    PROCEDURE FillAdminNoTxt@1210190002(IAdminNo@1210190000 : Code[10]);
    BEGIN
      AdminNoTxt := IAdminNo;
      FormatTxtToLengthWithPostChar(AdminNoTxt, ' ', 3);
    END;

    PROCEDURE FillEmplNoTxt@1210190006(IEmplNo@1210190000 : Code[20]) : Text[9];
    BEGIN
      EmplNoTxt := IEmplNo;
      FormatTxtToLengthWithPostChar(EmplNoTxt, ' ', 9);
    END;

    PROCEDURE FillProjNoTxt@1210190007(IProjNo@1210190000 : Code[20]) : Text[9];
    BEGIN
      ProjNoTxt := IProjNo;
      FormatTxtToLengthWithPostChar(ProjNoTxt, ' ', 16);
    END;

    PROCEDURE FillUarTaskTxt@1210190008(IUarTask@1210190000 : Code[10]) : Text[9];
    BEGIN
      UarTaskTxt := IUarTask;
      FormatTxtToLengthWithPostChar(UarTaskTxt, ' ', 4);
    END;

    PROCEDURE FillUarTaskCallOutResponseTxt@1100528400(IUarTask@1210190000 : Code[10]) : Text[9];
    BEGIN
      UarTaskCallOutResponseTxt := IUarTask;
      FormatTxtToLengthWithPostChar(UarTaskCallOutResponseTxt, ' ', 4);
    END;

    PROCEDURE FillUarTaskExpenseTxt@1100528500(IUarTask@1210190000 : Code[10]) : Text[9];
    BEGIN
      UarTaskExpenseTxt := IUarTask;
      FormatTxtToLengthWithPostChar(UarTaskExpenseTxt, ' ', 4);
    END;

    PROCEDURE FillDateOfHours@1210190024(IDayNo@1210190000 : Integer) : Date;
    VAR
      lvDate@1210190001 : Date;
    BEGIN
      IF (IDayNo < DayNoFirstDay) THEN
        lvDate := WeekRec."Starting Date" + (7 - (DayNoFirstDay - IDayNo))
      ELSE
        lvDate := WeekRec."Starting Date" + (IDayNo - DayNoFirstDay);

      EXIT(lvDate);
    END;

    PROCEDURE FillDateTxt@1210190005(IDate@1210190000 : Date);
    BEGIN
      DateTxt := FORMAT(IDate, 10, '<Day,2>-<Month,2>-<Year4>');
    END;

    PROCEDURE FillDayTxt@1210190011(IDayNo@1210190000 : Integer);
    BEGIN
      CASE IDayNo OF
        1: DayTxt := 'ma';
        2: DayTxt := 'di';
        3: DayTxt := 'wo';
        4: DayTxt := 'do';
        5: DayTxt := 'vr';
        6: DayTxt := 'za';
        7: DayTxt := 'zo';
      END;
    END;

    PROCEDURE FillStartTimeTxt@1210190015(IDayNo@1210190000 : Integer);
    BEGIN
      CASE IDayNo OF
        1: StartTimeTxt := FillTimeTxt("Posted UAR Hour Acc. Line"."Monday From");
        2: StartTimeTxt := FillTimeTxt("Posted UAR Hour Acc. Line"."Tuesday From");
        3: StartTimeTxt := FillTimeTxt("Posted UAR Hour Acc. Line"."Wednesday From");
        4: StartTimeTxt := FillTimeTxt("Posted UAR Hour Acc. Line"."Thursday From");
        5: StartTimeTxt := FillTimeTxt("Posted UAR Hour Acc. Line"."Friday From");
        6: StartTimeTxt := FillTimeTxt("Posted UAR Hour Acc. Line"."Saterday From");
        7: StartTimeTxt := FillTimeTxt("Posted UAR Hour Acc. Line"."Sunday From");
      END;
    END;

    PROCEDURE FillEndTimeTxt@1210190020(IDayNo@1210190000 : Integer);
    BEGIN
      CASE IDayNo OF
        1: EndTimeTxt := FillTimeTxt("Posted UAR Hour Acc. Line"."Monday To");
        2: EndTimeTxt := FillTimeTxt("Posted UAR Hour Acc. Line"."Tuesday To");
        3: EndTimeTxt := FillTimeTxt("Posted UAR Hour Acc. Line"."Wednesday To");
        4: EndTimeTxt := FillTimeTxt("Posted UAR Hour Acc. Line"."Thursday To");
        5: EndTimeTxt := FillTimeTxt("Posted UAR Hour Acc. Line"."Friday To");
        6: EndTimeTxt := FillTimeTxt("Posted UAR Hour Acc. Line"."Saterday To");
        7: EndTimeTxt := FillTimeTxt("Posted UAR Hour Acc. Line"."Sunday To");
      END;
    END;

    PROCEDURE FillPauseStartTimeTxt@1210190019(IDayNo@1210190000 : Integer);
    BEGIN
      CASE IDayNo OF
        1: StartTimeTxt := FillTimeTxt("Posted UAR Hour Acc. Pause"."Monday From");
        2: StartTimeTxt := FillTimeTxt("Posted UAR Hour Acc. Pause"."Tuesday From");
        3: StartTimeTxt := FillTimeTxt("Posted UAR Hour Acc. Pause"."Wednesday From");
        4: StartTimeTxt := FillTimeTxt("Posted UAR Hour Acc. Pause"."Thursday From");
        5: StartTimeTxt := FillTimeTxt("Posted UAR Hour Acc. Pause"."Friday From");
        6: StartTimeTxt := FillTimeTxt("Posted UAR Hour Acc. Pause"."Saterday From");
        7: StartTimeTxt := FillTimeTxt("Posted UAR Hour Acc. Pause"."Sunday From");
      END;
    END;

    PROCEDURE FillPauseEndTimeTxt@1210190018(IDayNo@1210190000 : Integer);
    BEGIN
      CASE IDayNo OF
        1: EndTimeTxt := FillTimeTxt("Posted UAR Hour Acc. Pause"."Monday To");
        2: EndTimeTxt := FillTimeTxt("Posted UAR Hour Acc. Pause"."Tuesday To");
        3: EndTimeTxt := FillTimeTxt("Posted UAR Hour Acc. Pause"."Wednesday To");
        4: EndTimeTxt := FillTimeTxt("Posted UAR Hour Acc. Pause"."Thursday To");
        5: EndTimeTxt := FillTimeTxt("Posted UAR Hour Acc. Pause"."Friday To");
        6: EndTimeTxt := FillTimeTxt("Posted UAR Hour Acc. Pause"."Saterday To");
        7: EndTimeTxt := FillTimeTxt("Posted UAR Hour Acc. Pause"."Sunday To");
      END;
    END;

    PROCEDURE FillTimeTxt@1210190017(ITime@1210190000 : Time) : Text[10];
    VAR
      lvHourTxt@1210190001 : Text[10];
      lvMinuteTxt@1210190002 : Text[10];
    BEGIN
      lvHourTxt := FORMAT(ITime,0,'<Hours24>');
      lvMinuteTxt := FORMAT(ITime,0,'<Minutes>');

      FormatTxtToLengthWithPreChar(lvHourTxt, '0', 2);
      FormatTxtToLengthWithPreChar(lvMinuteTxt, '0', 2);

      EXIT(lvHourTxt + lvMinuteTxt);
    END;

    PROCEDURE FillTravelToTxt@1210190012(IDayNo@1210190000 : Integer);
    BEGIN
      CASE IDayNo OF
        1: TravelToTxt := FillTravelTxt("Posted UAR Hour Acc. Line"."Monday Travel To");
        2: TravelToTxt := FillTravelTxt("Posted UAR Hour Acc. Line"."Tuesday Travel To");
        3: TravelToTxt := FillTravelTxt("Posted UAR Hour Acc. Line"."Wednesday Travel To");
        4: TravelToTxt := FillTravelTxt("Posted UAR Hour Acc. Line"."Thursday Travel To");
        5: TravelToTxt := FillTravelTxt("Posted UAR Hour Acc. Line"."Friday Travel To");
        6: TravelToTxt := FillTravelTxt("Posted UAR Hour Acc. Line"."Saterday Travel To");
        7: TravelToTxt := FillTravelTxt("Posted UAR Hour Acc. Line"."Sunday Travel To");
      END;
    END;

    PROCEDURE FillTravelBackTxt@1210190009(IDayNo@1210190000 : Integer);
    BEGIN
      CASE IDayNo OF
        1: TravelBackTxt := FillTravelTxt("Posted UAR Hour Acc. Line"."Monday Travel Back");
        2: TravelBackTxt := FillTravelTxt("Posted UAR Hour Acc. Line"."Tuesday Travel Back");
        3: TravelBackTxt := FillTravelTxt("Posted UAR Hour Acc. Line"."Wednesday Travel Back");
        4: TravelBackTxt := FillTravelTxt("Posted UAR Hour Acc. Line"."Thursday Travel Back");
        5: TravelBackTxt := FillTravelTxt("Posted UAR Hour Acc. Line"."Friday Travel Back");
        6: TravelBackTxt := FillTravelTxt("Posted UAR Hour Acc. Line"."Saterday Travel Back");
        7: TravelBackTxt := FillTravelTxt("Posted UAR Hour Acc. Line"."Sunday Travel Back");
      END;
    END;

    PROCEDURE FillTravelTxt@1210190013(ITravel@1210190000 : Decimal) : Text[10];
    VAR
      lvTravelHours@1210190003 : Integer;
      lvTravelMinutes@1210190004 : Integer;
      lvHourTxt@1210190001 : Text[10];
      lvMinuteTxt@1210190002 : Text[10];
    BEGIN
      IF ITravel = 0 THEN BEGIN
        EXIT('   0');
      END;

      lvTravelHours :=  ROUND(ITravel, 1, '<');
      lvTravelMinutes := ROUND(((ITravel-lvTravelHours) * 60), 1);

      lvHourTxt := FORMAT(lvTravelHours);
      lvMinuteTxt := FORMAT(lvTravelMinutes);

      FormatTxtToLengthWithPreChar(lvHourTxt, ' ', 2);
      FormatTxtToLengthWithPreChar(lvMinuteTxt, '0', 2);

      EXIT(lvHourTxt + lvMinuteTxt);
    END;

    LOCAL PROCEDURE FillDriverHrsTxt@1100528200(IDayNo@1100528201 : Integer);
    VAR
      DriverHrs@1100528200 : Boolean;
    BEGIN
      CASE IDayNo OF
        1: DriverHrs := "Posted UAR Hour Acc. Line"."Monday Driver Hours";
        2: DriverHrs := "Posted UAR Hour Acc. Line"."Tuesday Driver Hours";
        3: DriverHrs := "Posted UAR Hour Acc. Line"."Wednesday Driver Hours";
        4: DriverHrs := "Posted UAR Hour Acc. Line"."Thursday Driver Hours";
        5: DriverHrs := "Posted UAR Hour Acc. Line"."Friday Driver Hours";
        6: DriverHrs := "Posted UAR Hour Acc. Line"."Saturday Driver Hours";
        7: DriverHrs := "Posted UAR Hour Acc. Line"."Sunday Driver Hours";
      END;
      IF DriverHrs THEN
        DriverHrsTxt := 'J'
      ELSE
        DriverHrsTxt := 'N';
    END;

    LOCAL PROCEDURE FillStandByTxt@1100528201(IDayNo@1100528201 : Integer);
    VAR
      StandBy@1100528200 : Boolean;
    BEGIN
      CASE IDayNo OF
        1: StandBy := "Posted UAR Hour Acc. Line"."Monday Stand By Hours";
        2: StandBy := "Posted UAR Hour Acc. Line"."Tuesday Stand By Hours";
        3: StandBy := "Posted UAR Hour Acc. Line"."Wednesday Stand By Hours";
        4: StandBy := "Posted UAR Hour Acc. Line"."Thursday Stand By Hours";
        5: StandBy := "Posted UAR Hour Acc. Line"."Friday Stand By Hours";
        6: StandBy := "Posted UAR Hour Acc. Line"."Saturday Stand By Hours";
        7: StandBy := "Posted UAR Hour Acc. Line"."Sunday Stand By Hours";
      END;
      IF StandBy THEN
        StandByTxt := 'J'
      ELSE
        StandByTxt := 'N';
    END;

    LOCAL PROCEDURE FillTwelveHrShiftTxt@1100528202(IDayNo@1100528200 : Integer);
    VAR
      TwelveHrShift@1100528201 : Boolean;
    BEGIN
      CASE IDayNo OF
        1: TwelveHrShift := "Posted UAR Hour Acc. Line"."Monday Scheduled 12 Hr Shift";
        2: TwelveHrShift := "Posted UAR Hour Acc. Line"."Tuesday Scheduled 12 Hr Shift";
        3: TwelveHrShift := "Posted UAR Hour Acc. Line"."Wednesday Scheduled 12 H Shift";
        4: TwelveHrShift := "Posted UAR Hour Acc. Line"."Thursday Scheduled 12 Hr Shift";
        5: TwelveHrShift := "Posted UAR Hour Acc. Line"."Friday Scheduled 12 Hr Shift";
        6: TwelveHrShift := "Posted UAR Hour Acc. Line"."Saturday Scheduled 12 Hr Shift";
        7: TwelveHrShift := "Posted UAR Hour Acc. Line"."Sunday Scheduled 12 Hr Shift";
      END;
      IF TwelveHrShift THEN
        TwelveHrShiftTxt := 'J'
      ELSE
        TwelveHrShiftTxt := 'N';
    END;

    LOCAL PROCEDURE IsCallOutResponse@1100528403(IDayNo@1100528200 : Integer) : Boolean;
    BEGIN
      CASE IDayNo OF
        1: EXIT("Posted UAR Hour Acc. Line"."Monday Call-Out Response");
        2: EXIT("Posted UAR Hour Acc. Line"."Tuesday Call-Out Response");
        3: EXIT("Posted UAR Hour Acc. Line"."Wednesday Call-Out Response");
        4: EXIT("Posted UAR Hour Acc. Line"."Thursday Call-Out Response");
        5: EXIT("Posted UAR Hour Acc. Line"."Friday Call-Out Response");
        6: EXIT("Posted UAR Hour Acc. Line"."Saturday Call-Out Response");
        7: EXIT("Posted UAR Hour Acc. Line"."Sunday Call-Out Response");
      END;
    END;

    LOCAL PROCEDURE CallOutResponseOccursInHourAccLine@1100528401() : Boolean;
    BEGIN
      IF "Posted UAR Hour Acc. Line"."Monday Call-Out Response" OR
         "Posted UAR Hour Acc. Line"."Tuesday Call-Out Response" OR
         "Posted UAR Hour Acc. Line"."Wednesday Call-Out Response" OR
         "Posted UAR Hour Acc. Line"."Thursday Call-Out Response" OR
         "Posted UAR Hour Acc. Line"."Friday Call-Out Response" OR
         "Posted UAR Hour Acc. Line"."Saturday Call-Out Response" OR
         "Posted UAR Hour Acc. Line"."Sunday Call-Out Response"
      THEN
        EXIT(TRUE);
    END;

    PROCEDURE FormatTxtToLengthWithPreChar@1210190003(VAR IOTextStr@1210190000 : Text[30];IPreChar@1210190001 : Text[1];ILength@1210190002 : Integer);
    BEGIN
      WHILE STRLEN(IOTextStr) < ILength DO
        IOTextStr := IPreChar + IOTextStr;
    END;

    PROCEDURE FormatTxtToLengthWithPostChar@1210190004(VAR IOTextStr@1210190000 : Text[30];IPostChar@1210190001 : Text[1];ILength@1210190002 : Integer);
    BEGIN
      IOTextStr := PADSTR(IOTextStr, ILength, IPostChar);
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

