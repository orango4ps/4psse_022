OBJECT Table 11012186 Estimate Quantity Sheet
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnModify=BEGIN
               //db, 02-09-14
               IF Type = Type::Subtotal THEN BEGIN
                 Result := 0;
                 TESTFIELD(Quantity, 0);
                 TESTFIELD(Length, 0);
                 TESTFIELD(Width, 0);
                 TESTFIELD(Height, 0);
                 TESTFIELD(Weight, 0);
                 TESTFIELD("Quantity Length", 0);
                 TESTFIELD("Quantity Height", 0);
               END;
             END;

    CaptionML=[ENU=Estimate Quantity Sheet;
               NOR=Kalkyle Í antallsspesifikasjon;
               SVE=Kalkyl Í antalsspecifikation];
  }
  FIELDS
  {
    { 10  ;   ;Estimate No.        ;Code20        ;TableRelation=Estimate.No.;
                                                   CaptionML=[ENU=Estimate No.;
                                                              NOR=Kalkylenr;
                                                              SVE=Kalkylnr] }
    { 20  ;   ;Sub-Estimate No.    ;Code20        ;TableRelation=Sub-Estimate."Sub-Estimate No." WHERE (Estimate No.=FIELD(Estimate No.));
                                                   CaptionML=[ENU=Sub-Estimate No.;
                                                              NOR=Delkalkylenummer;
                                                              SVE=Delkalkylnr] }
    { 25  ;   ;Part Group          ;Code10        ;TableRelation="Estimate Part"."Part Group" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                     Sub-Estimate No.=FIELD(Sub-Estimate No.));
                                                   CaptionML=[ENU=Part Group;
                                                              NOR=Del gruppe;
                                                              SVE=Delgrupp] }
    { 30  ;   ;Part                ;Code20        ;TableRelation="Estimate Part".Part WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                             Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                             Part Group=FIELD(Part Group));
                                                   CaptionML=[ENU=Part;
                                                              NOR=Del;
                                                              SVE=Del] }
    { 40  ;   ;Estimate Line       ;Integer       ;TableRelation="Estimate Line"."Line No." WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                   Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                   Part=FIELD(Part));
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Estimate Line;
                                                              NOR=Kalkylerad;
                                                              SVE=Uppskattningsrad] }
    { 41  ;   ;Recipe              ;Code20        ;TableRelation="Base Recipe".No. WHERE (Recipe Group=FIELD(Recipe Group));
                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Recipe;
                                                              NOR=Mal;
                                                              SVE=Mall] }
    { 42  ;   ;Recipe Group        ;Code10        ;TableRelation="Recipe Group".No.;
                                                   CaptionML=[ENU=Recipe Group;
                                                              NOR=Maltype;
                                                              SVE=Malltyp] }
    { 50  ;   ;Recipe Line         ;Integer       ;CaptionML=[ENU=Recipe Line;
                                                              NOR=Malrad;
                                                              SVE=Mallrad] }
    { 60  ;   ;Row No.             ;Integer       ;CaptionML=[ENU=Row No.(R);
                                                              SVE=Rad-nr] }
    { 65  ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                //db, 02-09-14
                                                                Quantity := 0;
                                                                Length := 0;
                                                                Width := 0;
                                                                Height := 0;
                                                                Weight := 0;
                                                                "Quantity Length" := 0;
                                                                "Quantity Height" := 0;
                                                                Result := 0;
                                                              END;

                                                   CaptionML=ENU=Typel;
                                                   OptionCaptionML=[ENU=" ,Subtotal";
                                                                    NOR=" ,Subtotal";
                                                                    SVE=" ,Subtotal"];
                                                   OptionString=[ ,Subtotal] }
    { 70  ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                CalculateResultLine;
                                                              END;

                                                   CaptionML=[ENU=Quantity (Q);
                                                              SVE=Antal];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 80  ;   ;Length              ;Decimal       ;OnValidate=BEGIN
                                                                CalculateResultLine;
                                                              END;

                                                   CaptionML=[ENU=Length (L);
                                                              SVE=L„ngd];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 90  ;   ;Width               ;Decimal       ;OnValidate=BEGIN
                                                                CalculateResultLine;
                                                              END;

                                                   CaptionML=[ENU=Width (B);
                                                              SVE=Bredd];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 100 ;   ;Height              ;Decimal       ;OnValidate=BEGIN
                                                                CalculateResultLine;
                                                              END;

                                                   CaptionML=[ENU=Height (H);
                                                              SVE=H”jd];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 110 ;   ;Result              ;Decimal       ;CaptionML=[ENU=Result;
                                                              NOR=Resultat;
                                                              SVE=Resultat];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 120 ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 130 ;   ;Weight              ;Decimal       ;OnValidate=BEGIN
                                                                CalculateResultLine;
                                                              END;

                                                   CaptionML=[ENU=Weight (W);
                                                              SVE=Vikt];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 140 ;   ;Quantity Length     ;Decimal       ;OnValidate=BEGIN
                                                                CalculateResultLine;
                                                              END;

                                                   CaptionML=ENU=Quantity Length (X);
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 150 ;   ;Quantity Height     ;Decimal       ;OnValidate=BEGIN
                                                                CalculateResultLine;
                                                              END;

                                                   CaptionML=ENU=Quantity Height (Y);
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 300 ;   ;Sum Result          ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Quantity Sheet".Result WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                           Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                           Part Group=FIELD(Part Group),
                                                                                                           Part=FIELD(Part),
                                                                                                           Estimate Line=FIELD(Estimate Line),
                                                                                                           Recipe Group=FIELD(Recipe Group),
                                                                                                           Recipe=FIELD(Recipe),
                                                                                                           Recipe Line=FIELD(Recipe Line),
                                                                                                           Row No.=FIELD(FILTER(Totaling))));
                                                   CaptionML=[ENU=Sum Result;
                                                              NOR=Sum Resultat;
                                                              SVE=Summa resultat];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 320 ;   ;Formula             ;Text250       ;OnValidate=BEGIN
                                                                CalculateResultLine;
                                                              END;

                                                   CaptionML=[ENU=Formula;
                                                              NOR=Formel;
                                                              SVE=Formel] }
    { 330 ;   ;Totaling            ;Text250       ;CaptionML=[ENU=Totaling;
                                                              NOR=Summering;
                                                              SVE=Summeringsintervall] }
  }
  KEYS
  {
    {    ;Estimate No.,Sub-Estimate No.,Part Group,Part,Estimate Line,Recipe Group,Recipe,Recipe Line,Row No.;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1210190000 : TextConst 'ENU=Total Quantity Sheet;NOR=Total antallspesifikasjon;SVE=Total antalsspecifikation';
      FormulaLevel@1100485000 : Integer;
      Text001@1100485001 : TextConst 'ENU=Not allowed to calculate with results from lower rows;NOR=Det er ikke tillatt † beregne med resultat fra lavere rader;SVE=Det „r inte till†tet att ber„kna med resultat fr†n l„gre rader';
      Text002@1100528900 : TextConst 'ENU=Simplify the formula.';

    PROCEDURE CalculateResultLine@1100485000();
    BEGIN
      //db, 02-09-14
      Result := 0;
      IF Formula <> '' THEN
        Result := EvaluateExpression(Formula)
      ELSE
        IF Type <> Type::Subtotal THEN
          CalculateResult;
    END;

    PROCEDURE CalculateResult@11012000();
    VAR
      lv1@1210190000 : Decimal;
      lv2@1210190001 : Decimal;
      lv3@1210190002 : Decimal;
      lv4@1210190003 : Decimal;
      lv5@1100525000 : Decimal;
      lv6@1100409000 : Decimal;
      lv7@1100409001 : Decimal;
    BEGIN
      //db, 17-11-14: C019160
      lv1 := Length;
      lv2 := Width;
      lv3 := Height;
      lv4 := Quantity;
      lv5 := Weight;
      lv6 := "Quantity Length";
      lv7 := "Quantity Height";

      IF Length = 0 THEN lv1 := 1;
      IF Width = 0 THEN lv2 := 1;
      IF Height = 0 THEN lv3 := 1;
      //IF Quantity = 0 THEN lv4 := 1;  //other fields are optional for result
      IF Weight = 0 THEN lv5 := 1;

      IF ("Quantity Length" <> 0) OR ("Quantity Height" <> 0) THEN BEGIN
        TESTFIELD(Weight, 0);
        //db.sn, 09-07-15: C024028
        IF ("Quantity Length" = 0) AND (Length<>0) THEN lv6 := 1;
        IF ("Quantity Height" = 0) AND (Height<>0) THEN lv7 := 1;
        //db.en, 09-07-15: C024028
        //VALIDATE(Result, Quantity * (("Quantity Length" * Length) + ("Quantity Height" * Height)) + Width);
        VALIDATE(Result, lv4 * ((lv6 * lv1) + (lv7 * lv3)) * lv2);  //db, 17-11-14: C019160
      END ELSE BEGIN
        VALIDATE(Result, lv1 * lv2 * lv3 * lv4 * lv5);
      END;
    END;

    PROCEDURE CalculateResultSheet@1210190000();
    VAR
      QuanRec@1210190000 : Record 11012186;
      QuanRec2@1210190001 : Record 11012186;
      SheetQuan@1210190002 : Decimal;
    BEGIN
      QuanRec.RESET;
      QuanRec.SETRANGE("Estimate No.", "Estimate No.");
      QuanRec.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
      QuanRec.SETRANGE("Part Group", "Part Group");
      QuanRec.SETRANGE(Part, Part);
      QuanRec.SETRANGE("Estimate Line", "Estimate Line");
      IF Recipe = '' THEN BEGIN
        QuanRec.SETFILTER("Recipe Group", '%1', '');
        QuanRec.SETFILTER(Recipe, '%1', '');
        QuanRec.SETRANGE("Recipe Line", 0);
      END ELSE BEGIN
        QuanRec.SETRANGE("Recipe Group", "Recipe Group");
        QuanRec.SETRANGE(Recipe, Recipe);
        QuanRec.SETRANGE("Recipe Line", "Recipe Line");
      END;
      QuanRec.SETRANGE("Row No.", 0);
      QuanRec.DELETEALL;

      SheetQuan := 0;
      QuanRec.SETFILTER("Row No.", '<>%1', 0);
      IF QuanRec.FIND('-') THEN BEGIN
        REPEAT
          QuanRec.CalculateResultLine;
          QuanRec.MODIFY;
          SheetQuan := SheetQuan + QuanRec.Result;
        UNTIL QuanRec.NEXT = 0;
      END;

      IF SheetQuan <> 0 THEN BEGIN
        QuanRec2."Estimate No." := "Estimate No.";
        QuanRec2."Sub-Estimate No." := "Sub-Estimate No.";
        QuanRec2."Part Group" := "Part Group";
        QuanRec2.Part := Part;
        QuanRec2."Estimate Line" := "Estimate Line";
        QuanRec2."Recipe Group" := "Recipe Group";
        QuanRec2.Recipe := Recipe;
        QuanRec2."Recipe Line" := "Recipe Line";
        QuanRec2."Row No." := 0;
        QuanRec2.Description := Text000;
        QuanRec2.Result := SheetQuan;
        QuanRec2.INSERT;
      END;
    END;

    LOCAL PROCEDURE EvaluateExpression@9(Expression@1001 : Text[80]) : Decimal;
    VAR
      lvRow@1100485000 : Record 11012186;
      ExprResult@1005 : Decimal;
      Parantheses@1006 : Integer;
      Operator@1007 : Char;
      LeftOperand@1008 : Text[80];
      RightOperand@1009 : Text[80];
      LeftResult@1010 : Decimal;
      RightResult@1011 : Decimal;
      i@1012 : Integer;
      IsExpression@1013 : Boolean;
      Operators@1015 : Text[8];
      OperatorNo@1016 : Integer;
      ExpressionInt@1100485001 : Integer;
      FieldCde@1100525000 : Code[1];
    BEGIN
      //db, 02-09-14
      //customized copy of table 11012171 summary sheet line
      ExprResult := 0;

      FormulaLevel := FormulaLevel + 1;
      IF FormulaLevel > 25 THEN
        ERROR(Text002);

      Expression := DELCHR(Expression,'<>',' ');
      IF STRLEN(Expression) > 0 THEN BEGIN
        Parantheses := 0;
        IsExpression := FALSE;
        Operators := '+-*/^DM';
        OperatorNo := 1;
        REPEAT
          i := STRLEN(Expression);
          REPEAT
            IF Expression[i] = '(' THEN
              Parantheses := Parantheses + 1
            ELSE
              IF Expression[i] = ')' THEN
                Parantheses := Parantheses - 1;
            IF (Parantheses = 0) AND (Expression[i] = Operators[OperatorNo]) THEN
              IsExpression := TRUE
            ELSE
              i := i - 1;
          UNTIL IsExpression OR (i <= 0);
          IF NOT IsExpression THEN
            OperatorNo := OperatorNo + 1;
        UNTIL (OperatorNo > STRLEN(Operators)) OR IsExpression;
        IF IsExpression THEN BEGIN
          IF i > 1 THEN
            LeftOperand := COPYSTR(Expression,1,i - 1)
          ELSE
            LeftOperand := '';
          IF i < STRLEN(Expression) THEN
            RightOperand := COPYSTR(Expression,i + 1)
          ELSE
            RightOperand := '';
          Operator := Expression[i];
          LeftResult :=
            EvaluateExpression(LeftOperand);
          RightResult :=
            EvaluateExpression(RightOperand);
          CASE Operator OF
            '^':
              ExprResult := POWER(LeftResult,RightResult);
            '*':
              ExprResult := LeftResult * RightResult;
            '/':
              IF RightResult = 0 THEN
                ExprResult := 0
              ELSE
                ExprResult := LeftResult / RightResult;
            'D':
              IF RightResult = 0 THEN
                ExprResult := 0
              ELSE
                ExprResult := LeftResult DIV RightResult;
            'M':
              IF RightResult = 0 THEN
                ExprResult := 0
              ELSE
                ExprResult := LeftResult MOD RightResult;
            '+':
              ExprResult := LeftResult + RightResult;
            '-':
              ExprResult := LeftResult - RightResult;
          END;
        END ELSE BEGIN
          IF (Expression[1] = '(') AND (Expression[STRLEN(Expression)] = ')') THEN
            ExprResult := EvaluateExpression(COPYSTR(Expression,2,STRLEN(Expression) - 2))
          ELSE BEGIN
            ExprResult := 0;
            CASE Expression[1] OF
            'R':
              BEGIN
                FieldCde := COPYSTR(Expression, STRLEN(Expression),1);
                IF NOT TestFieldCode(FieldCde) THEN
                  Expression := COPYSTR(Expression, 2, STRLEN(Expression) - 1)
                ELSE
                  Expression := COPYSTR(Expression, 2, STRLEN(Expression) - 2);
                EVALUATE(ExpressionInt, Expression);
                IF "Row No." <= ExpressionInt THEN
                  ERROR(Text001);
                IF lvRow.GET("Estimate No.", "Sub-Estimate No.", "Part Group", Part,
                             "Estimate Line", "Recipe Group", Recipe, "Recipe Line",
                             ExpressionInt)
                THEN BEGIN
                  IF lvRow.Type = lvRow.Type::Subtotal THEN BEGIN
                    lvRow.CALCFIELDS("Sum Result");
                    ExprResult := lvRow."Sum Result";
                  END ELSE BEGIN
                    CASE FieldCde OF
                      'L':ExprResult := lvRow.Length;
                      'B':ExprResult := lvRow.Width;
                      'H':ExprResult := lvRow.Height;
                      'Q':ExprResult := lvRow.Quantity;
                      'W':ExprResult := lvRow.Weight;
                      'X':ExprResult := lvRow."Quantity Length";
                      'Y':ExprResult := lvRow."Quantity Height";
                    ELSE
                      ExprResult := lvRow.Result;
                    END;
                  END;
                END;
              END;
            'L':
              ExprResult := Length;
            'B':
              ExprResult := Width;
            'H':
              ExprResult := Height;
            'Q':
              ExprResult := Quantity;
            'W':
              ExprResult := Weight;
            'X':
              ExprResult := "Quantity Length";
            'Y':
              ExprResult := "Quantity Height";
            'F':
              BEGIN
                Expression := COPYSTR(Expression, 2, STRLEN(Expression) - 1);
                EVALUATE(ExprResult, Expression);
              END;
            END;
          END;
        END;
      END;
      FormulaLevel := FormulaLevel - 1;
      EXIT(ExprResult);
    END;

    PROCEDURE TestFieldCode@1100525002(VAR lvFieldCde@1100525000 : Code[1]) : Boolean;
    BEGIN
      //db, 02-09-14
      CASE lvFieldCde OF
        'L','B','H','Q','W','X','Y':
          EXIT(TRUE);
        ELSE BEGIN
          lvFieldCde := '';
          EXIT(FALSE);
        END;
      END;
    END;

    BEGIN
    END.
  }
}

