OBJECT Codeunit 11072076 XML Exchange Mgt (SiB)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ProjSetup@1100529500 : Record 315;
      SiBSetup@1100525002 : Record 11072650;
      XMLDOMMgt@1100525004 : Codeunit 11020220;
      FormatMgt@1100525007 : Codeunit 11020221;
      FileMgt@100525100 : Codeunit 419;
      TagName@1100525005 : Text[100];
      Text001@1100525006 : TextConst 'ENU=Tag ''%1'' expexted in XML file ''%2''.;NOR=Taggen ''%1'' forventes i XML-filen ''%2''.;SVE=Taggen ''%1'' f”rv„ntades i XML-filen ''%2''.';
      NewDocNo@1100525003 : Code[20];
      Window@1210190004 : Dialog;
      Progress@1210190003 : Integer;
      NoOfRecords@1210190002 : Integer;
      Counter@1210190001 : Integer;
      LastUpdateTime@1210190000 : Time;
      Text002@1210190005 : TextConst 'ENU=Processing file @1@@@@@@@@@@@@@;NOR=Behandler filen @1@@@@@@@@@@@@@;SVE=Behandlar filen @1@@@@@@@@@@@@@';
      Text019@1210190010 : TextConst 'ENU=Import Trade Items;NOR=Importer katalogartikler;SVE=Importera skaffningsartiklar';
      StartDateLog@1100525008 : DateTime;
      LogRec@1100525009 : Record 11012335;
      ExternalDocument@1100525000 : Text[250];
      DCSetupRead@1100525001 : Boolean;
      DocumentCaptureSetup@1100525010 : Record 6085573;
      FPSLicenseManagement@1100527400 : Codeunit 11229289;

    PROCEDURE ProcessCSVFileTradeItems@1100525008(FileName@1100525001 : Text) : Code[50];
    VAR
      GLNVendor@1100525002 : Code[20];
      ImportTradeItem@1100525000 : XMLport 11072001;
      IStream@1100525003 : InStream;
      TempBlob@1100525004 : Record 99008535;
      FileMgt@1100525005 : Codeunit 419;
    BEGIN
      //db, 15-06-15: C023991
      FileMgt.BLOBImport4PS(TempBlob, FileName, FALSE);
      TempBlob.Blob.CREATEINSTREAM(IStream);

      ImportTradeItem.SetFileNameNew(FileName);
      ImportTradeItem.SETSOURCE(IStream);
      ImportTradeItem.IMPORT;
      GLNVendor := ImportTradeItem.GetGLNVendor();
      CLEAR(ImportTradeItem);

      EXIT(GLNVendor);
    END;

    PROCEDURE ProcessXMLFileTradeItems@1100525005(FileName@1100525000 : Text) : Code[50];
    VAR
      lvXMLDoc@1100525001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      lvXMLNode0@1100525005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      lvXMLNode1@1100525003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      lvXMLNode2@1100525004 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      lvXMLNode3@1100525007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      lvXMLNode4@1100525016 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      lvXMLNodeReturn@1100525002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      lvXMLNodeList1@1100525009 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      lvXMLNodeList2@1100525011 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      lvDocNo@1100525018 : Code[20];
      lvGLNVendor@1100525010 : Code[20];
      lvGLNCustomer@1100525012 : Code[20];
      lvVendorName@1100525013 : Text[100];
      lvCustomerName@1100525014 : Text[100];
      i@1210190000 : Integer;
      ImportSetup@1210190001 : Record 11012301;
      ImportTradeItemRec@1210190013 : Record 11012333;
      ImportTradeItemChargeRec@1210190011 : Record 11012740;
      LastLine@1210190003 : Integer;
      LinesRead@1210190006 : Integer;
      LinesProcessed@1210190005 : Integer;
      ItemMgt@1210190009 : Codeunit 11012300;
      SizeID@1210190010 : ARRAY [3] OF Code[10];
      FirstItemCharge@1100528900 : Boolean;
      lvStartDate@1100528304 : Date;
      Counter2@1100525015 : Integer;
      SkipImport@1100525006 : Boolean;
      ItemCode@1100525017 : Text[250];
      GtinCode@1100525008 : Text[250];
    BEGIN
      //DP00065: table 11072656 -> 11012333 (TradeItem); table 11072657 -> 11012332 (Charge)

      //DP00065.sn
      ImportSetup.GET;
      ImportSetup."Import Date-Time" := ImportSetup.Datetime(TODAY, TIME);
      ImportSetup.MODIFY;

      IF ImportTradeItemRec.FINDLAST THEN
        LastLine := ImportTradeItemRec."Line No.";

      StartLog;  //DP00065
      //DP00065.en

      LastUpdateTime := TIME;
      IF ISNULL(lvXMLDoc) THEN
        lvXMLDoc := lvXMLDoc.XmlDocument;

      XMLDOMMgt.LoadXMLFromClientFile(lvXMLDoc, FileName, TRUE);

      //* For more info open file with Internet Explorer (missing tags / unvalid char.)

      WITH ImportTradeItemRec DO BEGIN
        SiBSetup.GET;  //*C-018789.n
        lvXMLNode0 := lvXMLDoc.DocumentElement;

        TagName := 'PricatHeader';
        IF NOT XMLDOMMgt.FindNode(lvXMLNode0,TagName,lvXMLNode1) THEN
          ERROR(Text001, TagName, FileMgt.GetFileName(FileName));

        IF XMLDOMMgt.FindNode(lvXMLNode1,'Document/DocumentNumber',lvXMLNodeReturn) THEN
          lvDocNo := lvXMLNodeReturn.InnerText;

        lvStartDate := TODAY;
        IF XMLDOMMgt.FindNode(lvXMLNode1,'Document/Date',lvXMLNodeReturn) THEN
          FormatMgt.EvaluateDate(lvXMLNodeReturn.InnerText, lvStartDate);

        TagName := 'Supplier/GLN';
        IF NOT XMLDOMMgt.FindNode(lvXMLNode1,TagName,lvXMLNodeReturn) THEN
          ERROR(Text001, TagName, FileMgt.GetFileName(FileName));
        lvGLNVendor := CheckMakeEmpty_GLN_GTIN(lvXMLNodeReturn.InnerText);
        IF XMLDOMMgt.FindNode(lvXMLNode1,'Supplier/PartyName',lvXMLNodeReturn) THEN
          lvVendorName := lvXMLNodeReturn.InnerText;

        IF XMLDOMMgt.FindNode(lvXMLNode1,'Buyer/GLN',lvXMLNodeReturn) THEN
          lvGLNCustomer := CheckMakeEmpty_GLN_GTIN(lvXMLNodeReturn.InnerText);
        IF XMLDOMMgt.FindNode(lvXMLNode1,'Buyer/PartyName',lvXMLNodeReturn) THEN
          lvCustomerName := lvXMLNodeReturn.InnerText;

        TagName := 'Bilateral';
        IF NOT XMLDOMMgt.FindNode(lvXMLNode0,TagName,lvXMLNode1) THEN
          ERROR(Text001, TagName, FileMgt.GetFileName(FileName));

        //* Item Lines
        XMLDOMMgt.FindNodes(lvXMLNode1,'PricatLine',lvXMLNodeList1);
        Window.OPEN(STRSUBSTNO(Text002));
        NoOfRecords := lvXMLNodeList1.Count;

        FOR Counter := 0 TO (lvXMLNodeList1.Count - 1) DO BEGIN
          lvXMLNode2 := lvXMLNodeList1.Item(Counter);
          UpdateProgressWindow(Counter);
          SkipImport := FALSE;  //db, 27-01-14: T004213

          INIT;
          "Line No." := LastLine + 1;
          LastLine := "Line No.";
          "Item Code" := '';
          Vendor := lvGLNVendor;

          //db.sn, 25-03-14
          TagName := 'TradeItemId/TradeItemNumber';
          IF XMLDOMMgt.FindNode(lvXMLNode2,TagName,lvXMLNodeReturn) THEN BEGIN
            ItemCode := lvXMLNodeReturn.InnerText;
            IF STRLEN(ItemCode) <= MAXSTRLEN("Item Code") THEN  //db, 25-03-14
              "Item Code" := ItemCode;
          END;
          IF XMLDOMMgt.FindNode(lvXMLNode2,'GTIN',lvXMLNodeReturn) THEN BEGIN
            GtinCode := CheckMakeEmpty_GLN_GTIN(lvXMLNodeReturn.InnerText);
            IF STRLEN(GtinCode) <= MAXSTRLEN("GTIN Code (Item)") THEN  //db, 25-03-14
              "GTIN Code (Item)" := GtinCode;
            IF ("Item Code" = '') AND ("GTIN Code (Item)" <> '') AND SiBSetup."Fill Item No. With GTIN Item" THEN
              "Item Code" := "GTIN Code (Item)";
          END;
          IF "Item Code" = '' THEN  //db, 25-03-14: skip (item/gtin)-code > fieldlength
            SkipImport := TRUE;
          //db.en, 25-03-14

          IF XMLDOMMgt.FindNode(lvXMLNode2,'ArticleData',lvXMLNode3) THEN BEGIN
            IF XMLDOMMgt.FindNode(lvXMLNode3,'SuppliersDescription/Description',lvXMLNodeReturn) THEN BEGIN
              "Item Description" := COPYSTR(lvXMLNodeReturn.InnerText, 1, MAXSTRLEN("Item Description"));
              "Item Description 2" :=
                COPYSTR(lvXMLNodeReturn.InnerText, MAXSTRLEN("Item Description")+1, MAXSTRLEN("Item Description 2"));
            END;
            IF XMLDOMMgt.FindNode(lvXMLNode3,'SmallestUnitQuantity/Quantity',lvXMLNodeReturn) THEN
              FormatMgt.EvaluateDecimal(lvXMLNodeReturn.InnerText, "Application Unit Quantity");
            IF XMLDOMMgt.FindNode(lvXMLNode3,'SmallestUnitQuantity/MeasureUnitQualifier',lvXMLNodeReturn) THEN
              "Application ID" := lvXMLNodeReturn.InnerText;
          END;

          IF XMLDOMMgt.FindNode(lvXMLNode2,'AvailabilityCode',lvXMLNodeReturn) THEN
            "Status Code" := lvXMLNodeReturn.InnerText;
          IF XMLDOMMgt.FindNode(lvXMLNode2,'ActionRequestInformation/StartDate/Date',lvXMLNodeReturn) THEN
            FormatMgt.EvaluateDate(lvXMLNodeReturn.InnerText, "Starting Date Item")
          ELSE
            "Starting Date Item" := lvStartDate;

          IF XMLDOMMgt.FindNode(lvXMLNode2,'AdditionalDescriptions/SupplierProductGroupDescription',lvXMLNodeReturn) THEN
            "Delivery Group Code" := COPYSTR(lvXMLNodeReturn.InnerText, 1, MAXSTRLEN("Delivery Group Code"));
          //mg.so, 19-11-10: M23995
          //IF XMLDOMMgt.FindNode(lvXMLNode2,'OrderingUnit',lvXMLNodeReturn) THEN
          //  "Order ID" := lvXMLNodeReturn.text;
          //mg.eo, 19-11-10: M23995

          IF XMLDOMMgt.FindNode(lvXMLNode2,'Orderinginfo',lvXMLNode3) THEN BEGIN
            IF XMLDOMMgt.FindNode(lvXMLNode3,'MinimumQuantity/Quantity',lvXMLNodeReturn) THEN BEGIN
              FormatMgt.EvaluateDecimal(lvXMLNodeReturn.InnerText, "Minimum Order Quantity");
              IF XMLDOMMgt.FindNode(lvXMLNode3,'MinimumQuantity/MeasureUnitQualifier',lvXMLNodeReturn) THEN
                "Order ID" := lvXMLNodeReturn.InnerText;
            END;
            IF XMLDOMMgt.FindNode(lvXMLNode3,'IncrementalOrderQuantity/Quantity',lvXMLNodeReturn) THEN BEGIN
              FormatMgt.EvaluateDecimal(lvXMLNodeReturn.InnerText, "Lot Size Quantity");
              IF XMLDOMMgt.FindNode(lvXMLNode3,'IncrementalOrderQuantity/MeasureUnitQualifier',lvXMLNodeReturn) THEN
                "Order ID" := lvXMLNodeReturn.InnerText;
            END;
            IF XMLDOMMgt.FindNode(lvXMLNode3,'LeadTime',lvXMLNodeReturn) THEN
              FormatMgt.EvaluateDecimal(lvXMLNodeReturn.InnerText, "Delivery Period");
            IF XMLDOMMgt.FindNode(lvXMLNode3,'PeriodQualifier',lvXMLNodeReturn) THEN
              "Delivery Time ID" := lvXMLNodeReturn.InnerText;
          END;

          IF XMLDOMMgt.FindNode(lvXMLNode2,'Packaging',lvXMLNode3) THEN BEGIN
            IF XMLDOMMgt.FindNode(lvXMLNode3,'TypeOfPackage',lvXMLNodeReturn) THEN
              "Packaging Code" := lvXMLNodeReturn.InnerText;
            IF XMLDOMMgt.FindNode(lvXMLNode3,'Weight/Quantity',lvXMLNodeReturn) THEN
              FormatMgt.EvaluateDecimal(lvXMLNodeReturn.InnerText, "Gross Weight");
            IF XMLDOMMgt.FindNode(lvXMLNode3,'Weight/MeasureUnitQualifier',lvXMLNodeReturn) THEN
              "Weight ID" := lvXMLNodeReturn.InnerText;
            IF XMLDOMMgt.FindNode(lvXMLNode3,'Length/Quantity',lvXMLNodeReturn) THEN
              FormatMgt.EvaluateDecimal(lvXMLNodeReturn.InnerText, Length);
            IF XMLDOMMgt.FindNode(lvXMLNode3,'Width/Quantity',lvXMLNodeReturn) THEN
              FormatMgt.EvaluateDecimal(lvXMLNodeReturn.InnerText, Width);
            IF XMLDOMMgt.FindNode(lvXMLNode3,'Height/Quantity',lvXMLNodeReturn) THEN
              FormatMgt.EvaluateDecimal(lvXMLNodeReturn.InnerText, Height);
            //DP00065.sn
            IF XMLDOMMgt.FindNode(lvXMLNode3,'Length/MeasureUnitQualifier',lvXMLNodeReturn) THEN
              SizeID[1] := lvXMLNodeReturn.InnerText;
            IF XMLDOMMgt.FindNode(lvXMLNode3,'Width/MeasureUnitQualifier',lvXMLNodeReturn) THEN
              SizeID[2] := lvXMLNodeReturn.InnerText;
            IF XMLDOMMgt.FindNode(lvXMLNode3,'Height/MeasureUnitQualifier',lvXMLNodeReturn) THEN
              SizeID[3] := lvXMLNodeReturn.InnerText;
            IF ((SizeID[1] <> '') AND
                 ((SizeID[1] = SizeID[2]) OR (SizeID[2] = '')) AND
                 ((SizeID[1] = SizeID[3]) OR (SizeID[3] = ''))) OR
               ((SizeID[2] <> '') AND
                 ((SizeID[2] = SizeID[1]) OR (SizeID[1] = '')) AND
                 ((SizeID[2] = SizeID[3]) OR (SizeID[3] = ''))) OR
               ((SizeID[3] <> '') AND
                 ((SizeID[3] = SizeID[1]) OR (SizeID[1] = '')) AND
                 ((SizeID[3] = SizeID[2]) OR (SizeID[2] = '')))
            THEN BEGIN
              IF SizeID[1] <> '' THEN
                "Size ID" := SizeID[1]
              ELSE BEGIN
                IF SizeID[2] <> '' THEN
                  "Size ID" := SizeID[2]
                ELSE
                  "Size ID" := SizeID[3];
              END;
            END;
            CLEAR(SizeID);
            //DP00065.sn
          END;

          IF XMLDOMMgt.FindNode(lvXMLNode2,'PriceInformation',lvXMLNode3) THEN BEGIN
            IF XMLDOMMgt.FindNode(lvXMLNode3,'StartDate/Date',lvXMLNodeReturn) THEN
              FormatMgt.EvaluateDate(lvXMLNodeReturn.InnerText, "Starting Date Price")
            ELSE
              "Starting Date Price" := lvStartDate;

            //mg.sn, 19-11-10: M23987
            IF "Starting Date Price" = 0D THEN
              "Starting Date Price" := "Starting Date Item";
            //mg.en, 19-11-10: M23987

            IF XMLDOMMgt.FindNode(lvXMLNode3,'Tax/TaxCategoryCode',lvXMLNodeReturn) THEN
              "VAT Code" := lvXMLNodeReturn.InnerText;
            IF XMLDOMMgt.FindNode(lvXMLNode3,'Tax/TaxRate',lvXMLNodeReturn) THEN
              FormatMgt.EvaluateDecimal(lvXMLNodeReturn.InnerText, "VAT %");

            IF XMLDOMMgt.FindNode(lvXMLNode3,'GrossUnitPrice/Price',lvXMLNodeReturn) THEN
              FormatMgt.EvaluateDecimal(lvXMLNodeReturn.InnerText, "Gross Price");
            //IF XMLDOMMgt.FindNode(lvXMLNode3,'NetUnitPrice/Price',lvXMLNodeReturn) THEN  //DP00065.o (33790)
            //  FormatMgt.EvaluateDecimal(lvXMLNodeReturn.text, "Net Price");
            IF XMLDOMMgt.FindNode(lvXMLNode3,'GrossPriceHandlingCharge/Price',lvXMLNodeReturn) THEN
              FormatMgt.EvaluateDecimal(lvXMLNodeReturn.InnerText, "Gross Price Operation Surch.");

            //* In the XML-file these tags are also present for 'Net'. In the 'Trade Item' table is only 1 (for Gross and Net).
            //* Only 'Gross' is read, assumed for 'Net' the quantity and unit are the same (this is a condition, and is not checked)
            IF XMLDOMMgt.FindNode(lvXMLNode3,'GrossUnitPrice/UnitPriceBasis',lvXMLNodeReturn) THEN
              FormatMgt.EvaluateDecimal(lvXMLNodeReturn.InnerText, "Quantity Per Price");
            IF XMLDOMMgt.FindNode(lvXMLNode3,'GrossUnitPrice/MeasureUnitQualifier',lvXMLNodeReturn) THEN
              "Price ID" := lvXMLNodeReturn.InnerText;

            //DP00065.sn (33790)
            IF XMLDOMMgt.FindNode(lvXMLNode3,'NetUnitPrice/Price',lvXMLNodeReturn) THEN BEGIN
              FormatMgt.EvaluateDecimal(lvXMLNodeReturn.InnerText, "Net Price");
              IF NOT XMLDOMMgt.FindNode(lvXMLNode3,'GrossUnitPrice/Price',lvXMLNodeReturn) THEN BEGIN
                IF XMLDOMMgt.FindNode(lvXMLNode3,'NetUnitPrice/UnitPriceBasis',lvXMLNodeReturn) THEN
                  FormatMgt.EvaluateDecimal(lvXMLNodeReturn.InnerText, "Quantity Per Price");
                IF XMLDOMMgt.FindNode(lvXMLNode3,'NetUnitPrice/MeasureUnitQualifier',lvXMLNodeReturn) THEN
                  "Price ID" := lvXMLNodeReturn.InnerText;
              END;
            END;
            //DP00065.en

            IF XMLDOMMgt.FindNode(lvXMLNode3,'PriceMultiplierRate',lvXMLNodeReturn) THEN
              FormatMgt.EvaluateDecimal(lvXMLNodeReturn.InnerText, "Factor Price-Purchase Unit")
            //DP00065.sn (33790)
            ELSE BEGIN
              IF ("Application ID" = "Order ID") OR (("Application ID" <> '') AND ("Order ID" = '')) THEN
                "Factor Price-Purchase Unit" := "Application Unit Quantity";
            END;
            //DP00065.en
            IF XMLDOMMgt.FindNode(lvXMLNode3,'CurrencyCode',lvXMLNodeReturn) THEN
              "Currency Code" := lvXMLNodeReturn.InnerText;

            XMLDOMMgt.FindNodes(lvXMLNode3,'AllowanceCharge',lvXMLNodeList2);  //* List: Discount/Charge
            FirstItemCharge := TRUE;  //db, 30-01-12
            FOR Counter2 := 0 TO (lvXMLNodeList2.Count - 1) DO BEGIN
              lvXMLNode4 := lvXMLNodeList2.Item(Counter2);
              //db.sn, 30-01-12
              IF FirstItemCharge THEN BEGIN
                FirstItemCharge := FALSE;
                ImportTradeItemChargeRec.RESET;
                ImportTradeItemChargeRec.SETRANGE(Vendor, Vendor);
                ImportTradeItemChargeRec.SETRANGE("Item Code", "Item Code");
                ImportTradeItemChargeRec.SETRANGE("Starting Date", "Starting Date Price");
                ImportTradeItemChargeRec.DELETEALL;
              END;
              //db.en, 30-01-12
              ImportTradeItemChargeRec.INIT;
              ImportTradeItemChargeRec.Vendor := Vendor;
              ImportTradeItemChargeRec."Item Code" := "Item Code";
              ImportTradeItemChargeRec."Starting Date" := "Starting Date Price";
              ImportTradeItemChargeRec."Line No." := 0;  //db, 30-01-12

              IF XMLDOMMgt.FindNode(lvXMLNode4,'SpecialServiceCode',lvXMLNodeReturn) THEN
                ImportTradeItemChargeRec."Discount/Charge Code" := lvXMLNodeReturn.InnerText;
              IF XMLDOMMgt.FindNode(lvXMLNode4,'DescriptionSpecialService/Description',lvXMLNodeReturn) THEN
                ImportTradeItemChargeRec.Description :=
                  COPYSTR(lvXMLNodeReturn.InnerText, 1, MAXSTRLEN(ImportTradeItemChargeRec.Description));
              IF XMLDOMMgt.FindNode(lvXMLNode4,'AllowanceChargeQualifier',lvXMLNodeReturn) THEN
                ImportTradeItemChargeRec."Discount/Charge Type" := COPYSTR(lvXMLNodeReturn.InnerText,1,1);

              IF XMLDOMMgt.FindNode(lvXMLNode4,'RangeMinimum',lvXMLNodeReturn) THEN
                FormatMgt.EvaluateDecimal(lvXMLNodeReturn.InnerText, ImportTradeItemChargeRec."Lower Limit Order Quantity");
              IF XMLDOMMgt.FindNode(lvXMLNode4,'Percentage',lvXMLNodeReturn) THEN
                FormatMgt.EvaluateDecimal(lvXMLNodeReturn.InnerText, ImportTradeItemChargeRec.Percentage);
              IF XMLDOMMgt.FindNode(lvXMLNode4,'Amount',lvXMLNodeReturn) THEN
                FormatMgt.EvaluateDecimal(lvXMLNodeReturn.InnerText, ImportTradeItemChargeRec.Amount);

              IF (ImportTradeItemChargeRec.Vendor <> '') AND (ImportTradeItemChargeRec."Item Code" <> '') THEN BEGIN
                //db.sn, 30-01-12
                //IF ImportTradeItemChargeRec.INSERT THEN;  //* Use 'IF'!
                REPEAT
                  ImportTradeItemChargeRec."Line No." := ImportTradeItemChargeRec."Line No." + 1;
                UNTIL ImportTradeItemChargeRec.INSERT;
                //db.sn, 30-01-12
              END;

            END;
          END;

          //DP00065.sn
          //33790.sn
          IF "Order ID" = '' THEN
            "Order ID" := "Application ID";
          IF "Minimum Order Quantity" = 0 THEN
            "Minimum Order Quantity" := 1;
          IF "Lot Size Quantity" = 0 THEN
            "Lot Size Quantity" := 1;
          //33790.en
          LinesRead := LinesRead + 1;
          "Import Date-Time" := ImportSetup."Import Date-Time";
          "Source Type" := "Source Type"::sib;
          IF ("Status Code" = '91E') OR ("Status Code" = '92E') THEN
             Expired := TRUE;
          ItemMgt.CheckAlternativeVendor(Vendor,"Alternative Vendor");
          //DP00065.en

          IF NOT SkipImport THEN  //db, 27-01-14: T004213
            INSERT;

          IF i = 1000 THEN
            i := 0;
        END;
        Window.CLOSE;
      END;

      EndLog(LinesRead,LinesProcessed);  //DP00065

      IF lvDocNo = '' THEN
        lvDocNo := '0';
      EXIT(lvGLNVendor + '-' + lvDocNo);
    END;

    PROCEDURE ProcessXMLFileDispatchNote@1100525000(FileName@1100525000 : Text) : Code[50];
    VAR
      lvDispatchNoteRec@1100525006 : Record 11072651;
      lvDispatchNoteLineRec@1100525010 : Record 11072652;
      lvPurchHeaderRec@1100528901 : Record 38;
      lvTradeItemRec@1100528903 : Record 11012317;
      lvXMLDoc@1100525001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      lvXMLNode0@1100525005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      lvXMLNode1@1100525003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      lvXMLNode2@1100525004 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      lvXMLNode3@1100525007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      lvXMLNodeReturn@1100525002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      lvXMLNodeList1@1100525009 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      lvXMLNodeList2@1100525011 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      lvNodeList1Missing@1100525008 : Boolean;
      lvOwner@1100528900 : Text[30];
      lvVendor@1100528902 : Code[20];
      lvItem@1100528904 : Code[20];
      Counter1@1100525013 : Integer;
      Counter2@1100525014 : Integer;
      ServSetup@1100409001 : Record 11012800;
      ServOrder@1100409000 : Record 11012823;
    BEGIN
      IF ISNULL(lvXMLDoc) THEN
        lvXMLDoc := lvXMLDoc.XmlDocument;

      XMLDOMMgt.LoadXMLFromClientFile(lvXMLDoc, FileName, TRUE);

      WITH lvDispatchNoteRec DO BEGIN
        INIT;

        lvXMLNode0 := lvXMLDoc.DocumentElement;
        FormatMgt.EvaluateDate(COPYSTR(XMLDOMMgt.GetAttributeValue(lvXMLNode0,'creationDateTime'),1,8), Date);

        TagName := 'despatchAdviceIdentification';
        IF NOT XMLDOMMgt.FindNode(lvXMLNode0,TagName,lvXMLNode1) THEN
          ERROR(Text001, TagName, FileMgt.GetFileName(FileName));
        TagName := 'uniqueCreatorIdentification';
        IF NOT XMLDOMMgt.FindNode(lvXMLNode1,TagName,lvXMLNodeReturn) THEN
          ERROR(Text001, TagName, FileMgt.GetFileName(FileName));
        "No." := lvXMLNodeReturn.InnerText;

        IF XMLDOMMgt.FindNode(lvXMLNode1,'contentOwner/gln',lvXMLNodeReturn) THEN  //DP00065
          lvOwner := lvXMLNodeReturn.InnerText;

        IF XMLDOMMgt.FindNode(lvXMLNode0,'contract/referenceIdentification',lvXMLNodeReturn) THEN BEGIN
          IF FPSLicenseManagement.LicenseAndReadPermissionForTable(ServSetup) THEN BEGIN  //db, 17-10-14
            IF ServOrder.GET(lvXMLNodeReturn.InnerText) THEN
              "Service Order No." := lvXMLNodeReturn.InnerText
            ELSE
              "Project No." := lvXMLNodeReturn.InnerText;
          END ELSE BEGIN
            "Project No." := lvXMLNodeReturn.InnerText;
          END;
        END;

        IF XMLDOMMgt.FindNode(lvXMLNode0,'purchaseOrder/uniqueCreatorIdentification',lvXMLNodeReturn) THEN BEGIN
          "Order No. Buyer" := lvXMLNodeReturn.InnerText;
          IF STRLEN("Order No. Buyer") <= MAXSTRLEN(lvPurchHeaderRec."No.") THEN
            IF lvPurchHeaderRec.GET(lvPurchHeaderRec."Document Type"::Order, "Order No. Buyer") THEN
              "Related Purch. Order No." := lvPurchHeaderRec."No.";   //DP00065
        END;

        IF XMLDOMMgt.FindNode(lvXMLNode0,'customerOrderNL/uniqueCreatorIdentification',lvXMLNodeReturn) THEN
          "Reference Buyer" := lvXMLNodeReturn.InnerText;

        IF XMLDOMMgt.FindNode(lvXMLNode0,'orderResponseNL/uniqueCreatorIdentification',lvXMLNodeReturn) THEN
          "Order Confirmation No." := lvXMLNodeReturn.InnerText;

        IF XMLDOMMgt.FindNode(lvXMLNode0,'despatchInformation/estimatedDelivery/estimatedDeliveryDateTime',lvXMLNodeReturn) THEN
          FormatMgt.EvaluateDateTime(lvXMLNodeReturn.InnerText, "Planned Delivery Date/Time");

        IF XMLDOMMgt.FindNode(lvXMLNode0,'shipFrom',lvXMLNode1) THEN BEGIN
          IF XMLDOMMgt.FindNode(lvXMLNode1,'gln',lvXMLNodeReturn) THEN
            "GLN Shipping" := CheckMakeEmpty_GLN_GTIN(lvXMLNodeReturn.InnerText);
          GetNameAndAddress(lvXMLNode1,"Name Shipping","Address Shipping","Post Code Shipping","City Shipping","Country Shipping");
        END;

        IF XMLDOMMgt.FindNode(lvXMLNode0,'shipTo',lvXMLNode1) THEN BEGIN
          IF XMLDOMMgt.FindNode(lvXMLNode1,'gln',lvXMLNodeReturn) THEN
            "GLN Delivery" := CheckMakeEmpty_GLN_GTIN(lvXMLNodeReturn.InnerText);
          GetNameAndAddress(lvXMLNode1,"Name Delivery","Address Delivery","Post Code Delivery","City Delivery","Country Delivery");
        END;

        IF XMLDOMMgt.FindNode(lvXMLNode0,'receiver',lvXMLNode1) THEN BEGIN
          IF XMLDOMMgt.FindNode(lvXMLNode1,'gln',lvXMLNodeReturn) THEN
            "GLN Buyer" := CheckMakeEmpty_GLN_GTIN(lvXMLNodeReturn.InnerText);
          GetNameAndAddress(lvXMLNode1,"Name Buyer","Address Buyer","Post Code Buyer","City Buyer","Country Buyer");
        END;

        IF XMLDOMMgt.FindNode(lvXMLNode0,'shipper',lvXMLNode1) THEN BEGIN
          IF XMLDOMMgt.FindNode(lvXMLNode1,'gln',lvXMLNodeReturn) THEN
            "GLN Vendor" := CheckMakeEmpty_GLN_GTIN(lvXMLNodeReturn.InnerText);
          IF "GLN Vendor" = '' THEN
            "GLN Vendor" := lvOwner;  //DP00065
          GetNameAndAddress(lvXMLNode1,"Name Vendor","Address Vendor","Post Code Vendor","City Vendor","Country Vendor");
          GetContactPerson(lvXMLNode1,"Contact Person Vendor","Phone No. Contact Vendor");
        END;

        INSERT;
      END;

      WITH lvDispatchNoteLineRec DO BEGIN
        XMLDOMMgt.FindNodes(lvXMLNode0,'despatchAdviceLogisticUnitLineItem',lvXMLNodeList1);
        Counter1 := 0;
        lvXMLNode1 := lvXMLNodeList1.Item(Counter1);
        IF ISNULL(lvXMLNode1) THEN BEGIN
          //* Tag (list) 'despatchAdviceLogisticUnitLineItem' is not always present, depending on the structure.
          lvNodeList1Missing := TRUE;
          lvXMLNode1 := lvXMLNode0;
        END;
        WHILE NOT ISNULL(lvXMLNode1) DO BEGIN
          XMLDOMMgt.FindNodes(lvXMLNode1,'despatchAdviceItemContainmentLineItem',lvXMLNodeList2);
          FOR Counter2 := 0 TO (lvXMLNodeList2.Count - 1) DO BEGIN
            lvXMLNode2 := lvXMLNodeList2.Item(Counter2);
            INIT;
            "Dispatch Note No." := lvDispatchNoteRec."No.";
            //DP00065.sn
            "Project No." := lvDispatchNoteRec."Project No.";
            "Service Order No." := lvDispatchNoteRec."Service Order No.";  //db, 16-09-14
            //DP00065.en

            FormatMgt.EvaluateInteger(XMLDOMMgt.GetAttributeValue(lvXMLNode2, 'number'), "Line No.");

            IF XMLDOMMgt.FindNode(lvXMLNode2,'containedItemIdentification',lvXMLNode3) THEN BEGIN
              IF XMLDOMMgt.FindNode(lvXMLNode3,'gtin',lvXMLNodeReturn) THEN
                "GTIN Item" := CheckMakeEmpty_GLN_GTIN(lvXMLNodeReturn.InnerText);
              IF XMLDOMMgt.FindNode(
                lvXMLNode3,'additionalTradeItemIdentification/additionalTradeItemIdentificationValue',lvXMLNodeReturn)
              THEN
                "Item No. Vendor" := lvXMLNodeReturn.InnerText;
              IF XMLDOMMgt.FindNode(lvXMLNode3,'tradeItemDescriptionNL/text',lvXMLNodeReturn) THEN
                Description := lvXMLNodeReturn.InnerText;
            END;

            IF XMLDOMMgt.FindNode(lvXMLNode2,'quantityContained',lvXMLNode3) THEN
              GetQuantityAndUnit(lvXMLNode3,"Delivered Quantity","Unit of Measure Code");

            //DP00065.sn
            lvDispatchNoteRec.CALCFIELDS("GLN Alternative Vendor");
            IF lvDispatchNoteRec."GLN Alternative Vendor" <> '' THEN
              lvVendor := lvDispatchNoteRec."GLN Alternative Vendor"
            ELSE
              lvVendor := lvDispatchNoteRec."GLN Vendor";
            IF "Item No. Vendor" <> '' THEN
              lvItem := "Item No. Vendor"
            ELSE
              lvItem := "GTIN Item";
            IF lvTradeItemRec.GET(lvVendor, lvItem) THEN BEGIN  //db, 02-02-12
              "Vendor (Trade Item)" := lvTradeItemRec.Vendor;
              VALIDATE("Trade Item", lvTradeItemRec."Item Code");  //includes check item relation and cost object
            END ELSE BEGIN
              IF "GTIN Item" <> '' THEN BEGIN  //db, 16-09-14
                lvTradeItemRec.RESET;
                lvTradeItemRec.SETCURRENTKEY("GTIN Code (Item)");
                lvTradeItemRec.SETRANGE("GTIN Code (Item)", "GTIN Item");
                lvTradeItemRec.SETRANGE(Vendor, lvVendor);
                IF lvTradeItemRec.FINDFIRST THEN BEGIN
                  "Vendor (Trade Item)" := lvTradeItemRec.Vendor;
                  VALIDATE("Trade Item", lvTradeItemRec."Item Code");  //includes check item relation and cost object
                END;
              END;
            END;
            //DP00065.en

            INSERT;

          END;
          IF lvNodeList1Missing THEN
            CLEAR(lvXMLNode1)
          ELSE BEGIN
            Counter1 := Counter1 + 1;
            lvXMLNode1 := lvXMLNodeList1.Item(Counter1);
          END;
        END;
      END;

      EXIT(lvDispatchNoteRec."GLN Vendor" + '-' + lvDispatchNoteRec."No.");
    END;

    PROCEDURE ProcessXMLFileInvoice@1100525001(FileName@1100525000 : Text) : Code[50];
    BEGIN
      ExternalDocument := COPYSTR(FileName, 1, STRLEN(FileName)-4);  //db, 28-01-14: T004213 (disable extension .xml)
      EXIT(ProcessXMLFileInvoice2(FileName));
    END;

    PROCEDURE ProcessXMLFileInvoice2@1100528300(iFileName@1100525000 : Text[250]) : Code[50];
    VAR
      lvInvoiceRec@1100525011 : Record 11072653;
      lvInvoiceLineRec@1100525010 : Record 11072654;
      lvTradeItemRec@1100525014 : Record 11012317;
      MappingXMLInvoices@1100525004 : Record 11020563;
      MappingXMLInvoices2@1100525015 : Record 11020563;
      MappingXMLInvElem@1100525012 : Record 11020564;
      lvXMLDoc@1100525009 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      lvXMLNode0@1100525008 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      lvXMLNode1@1100525007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      lvXMLNode2@1100525006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      lvXMLNode3@1100525005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      lvXMLNodeReturn@1100525003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      lvXMLNodeList1@1100525002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      lvNextLineNo@1100525001 : Integer;
      MappingFound@1100525013 : Boolean;
      CostObjectCostPlusLine@1100528400 : Code[20];
      lvVendor@1100528900 : Code[20];
      lvItem@1100528901 : Code[20];
      Counter1@1100525017 : Integer;
      ServSetup@1100409001 : Record 11012800;
      ServOrder@1100409000 : Record 11012823;
      AttachmentContent@1100525016 : BigText;
    BEGIN
      IF ISNULL(lvXMLDoc) THEN
        lvXMLDoc := lvXMLDoc.XmlDocument;

      XMLDOMMgt.LoadXMLFromClientFile(lvXMLDoc, iFileName, TRUE);

      WITH lvInvoiceRec DO BEGIN
        INIT;

        lvXMLNode0 := lvXMLDoc.DocumentElement;
        FormatMgt.EvaluateDate(COPYSTR(XMLDOMMgt.GetAttributeValue(lvXMLNode0,'creationDateTime'),1,8), "Invoice Date");

        TagName := 'invoiceIdentification';
        IF NOT XMLDOMMgt.FindNode(lvXMLNode0,TagName,lvXMLNode1) THEN;
        //  ERROR(Text001, TagName, FileMgt.GetFileName(iFileName));  //db, 06-03-15: C021797 (empty in versionIdentification 002, expired in 003)
        TagName := 'uniqueCreatorIdentification';
        IF NOT XMLDOMMgt.FindNode(lvXMLNode1,TagName,lvXMLNodeReturn) THEN
          ERROR(Text001, TagName, FileMgt.GetFileName(iFileName));
        "No." := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(lvXMLNode0, 'fpsReference4PS', lvXMLNodeReturn) THEN
          "Our Reference" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(lvXMLNode0, 'fpsPostingDate4PS', lvXMLNodeReturn) THEN
          FormatMgt.EvaluateDate(lvXMLNodeReturn.InnerText, "Posting Date");
        IF XMLDOMMgt.FindNode(lvXMLNode0,'invoiceCurrency/currencyISOCode',lvXMLNodeReturn) THEN
          "Currency Code" := lvXMLNodeReturn.InnerText;
        IF XMLDOMMgt.FindNode(lvXMLNode0, 'invoiceType', lvXMLNodeReturn) THEN
          FormatMgt.EvaluateOption(lvXMLNodeReturn.InnerText, "Purch. Invoice Type");

        //* The 'Payment Terms' and 'Credit Restriction' fields will are imported but these are not use when a
        //* 'Purchase Invoice' is create in codeunit 11072079 (T38/39), because setups in Navision are leading (AO).
        //* used/shown. AO: Keep it simple, does not occur in current situation. Besides setups in Navision are leading.
        IF XMLDOMMgt.FindNode(lvXMLNode0,'paymentTerms',lvXMLNode1) THEN BEGIN
          IF XMLDOMMgt.FindNode(lvXMLNode1,'paymentMethod/paymentMethodType',lvXMLNodeReturn) THEN
            "Payment Method" := lvXMLNodeReturn.InnerText;
          IF XMLDOMMgt.FindNode(lvXMLNode1,'discountPayment',lvXMLNode2) THEN BEGIN
            IF XMLDOMMgt.FindNode(lvXMLNode2,'discountPercent',lvXMLNodeReturn) THEN
              FormatMgt.EvaluateDecimal(lvXMLNodeReturn.InnerText,"Payment Discount %");
            IF XMLDOMMgt.FindNode(lvXMLNode2,'paymentTimePeriod/timePeriodDue/value',lvXMLNodeReturn) THEN
              FormatMgt.EvaluateInteger(lvXMLNodeReturn.InnerText,"Due Days Payment Discount");
          END;
          IF XMLDOMMgt.FindNode(lvXMLNode1,'creditRestrictionNL',lvXMLNode2) THEN BEGIN
            IF XMLDOMMgt.FindNode(lvXMLNode2,'creditRestrictionPercent',lvXMLNodeReturn) THEN
              FormatMgt.EvaluateDecimal(lvXMLNodeReturn.InnerText,"Credit Restriction Surcharge %");
            IF XMLDOMMgt.FindNode(lvXMLNode2,'creditRestrictionTimePeriod/timePeriodDue/value',lvXMLNodeReturn) THEN
              FormatMgt.EvaluateInteger(lvXMLNodeReturn.InnerText,"Due Days Credit Restriction");
          END;
        END;

        //* The 'Supply Chain Responsibility' and 'Reverse VAT' fields will be imported but these fields are not
        //* used/shown. AO: Keep it simple, does not occur in current situation. Besides setups in Navision are leading.
        IF XMLDOMMgt.FindNode(lvXMLNode0,'isSupplyChainResponsibilityLawNL',lvXMLNodeReturn) THEN
          FormatMgt.EvaluateBoolean(lvXMLNodeReturn.InnerText,"Supply Chain Responsibility");
        IF XMLDOMMgt.FindNode(lvXMLNode0,'depositOnGAccountNL',lvXMLNode1) THEN BEGIN
          IF XMLDOMMgt.FindNode(lvXMLNode1,'accountNumber',lvXMLNodeReturn) THEN
            "Blocked Account" := lvXMLNodeReturn.InnerText;
          IF XMLDOMMgt.FindNode(lvXMLNode1,'amount/monetaryAmount',lvXMLNodeReturn) THEN
            FormatMgt.EvaluateDecimal(lvXMLNodeReturn.InnerText,"Amount B-Account");
        END;
        IF XMLDOMMgt.FindNode(lvXMLNode0,'isReverseChargeProcedureNL',lvXMLNodeReturn) THEN
          FormatMgt.EvaluateBoolean(lvXMLNodeReturn.InnerText,"Reverse Charge VAT");

        IF XMLDOMMgt.FindNode(lvXMLNode0,'invoiceTotals',lvXMLNode1) THEN BEGIN
          IF XMLDOMMgt.FindNode(lvXMLNode1,'totalInvoiceAmount',lvXMLNodeReturn) THEN
            FormatMgt.EvaluateDecimal(lvXMLNodeReturn.InnerText,"Total Invoice Amount");
          IF XMLDOMMgt.FindNode(lvXMLNode1,'totalLineAmountInclusiveAllowancesCharges',lvXMLNodeReturn) THEN
            FormatMgt.EvaluateDecimal(lvXMLNodeReturn.InnerText,"Total Net Amount Lines");
          IF XMLDOMMgt.FindNode(lvXMLNode1,'totalTaxAmount',lvXMLNodeReturn) THEN
            FormatMgt.EvaluateDecimal(lvXMLNodeReturn.InnerText,"Total VAT amount");
          IF XMLDOMMgt.FindNode(lvXMLNode1,'totalAmountInvoiceAllowancesCharges',lvXMLNodeReturn) THEN
            FormatMgt.EvaluateDecimal(lvXMLNodeReturn.InnerText,"Total Discounts/Surcharges");
          IF XMLDOMMgt.FindNode(lvXMLNode1,'basisAmountForDiscountPaymentAndCreditRestrictionNL',lvXMLNodeReturn) THEN
            FormatMgt.EvaluateDecimal(lvXMLNodeReturn.InnerText,"Base Amt. Paym.Disc./Cr.Restr.");
        END;

        IF XMLDOMMgt.FindNode(lvXMLNode0,'shipFromNL',lvXMLNode1) THEN BEGIN
          IF XMLDOMMgt.FindNode(lvXMLNode1,'gln',lvXMLNodeReturn) THEN
            "GLN Shipping" := CheckMakeEmpty_GLN_GTIN(lvXMLNodeReturn.InnerText);
          GetNameAndAddress(lvXMLNode1,"Name Shipping","Address Shipping","Post Code Shipping","City Shipping","Country Shipping");
        END;

        IF XMLDOMMgt.FindNode(lvXMLNode0,'shipTo',lvXMLNode1) THEN BEGIN
          IF XMLDOMMgt.FindNode(lvXMLNode1,'gln',lvXMLNodeReturn) THEN
            "GLN Delivery" := CheckMakeEmpty_GLN_GTIN(lvXMLNodeReturn.InnerText);
          GetNameAndAddress(lvXMLNode1,"Name Delivery","Address Delivery","Post Code Delivery","City Delivery","Country Delivery");
        END;

        IF XMLDOMMgt.FindNode(lvXMLNode0,'buyer',lvXMLNode1) THEN BEGIN
          IF XMLDOMMgt.FindNode(lvXMLNode1,'partyIdentification/gln',lvXMLNodeReturn) THEN
            "GLN Buyer" := CheckMakeEmpty_GLN_GTIN(lvXMLNodeReturn.InnerText);
          GetNameAndAddress(lvXMLNode1,"Name Buyer","Address Buyer","Post Code Buyer","City Buyer","Country Buyer");
          IF XMLDOMMgt.FindNode(lvXMLNode1,'companyRegistrationNumber',lvXMLNodeReturn) THEN
            "VAT Identification Buyer" := lvXMLNodeReturn.InnerText;
        END;

        IF XMLDOMMgt.FindNode(lvXMLNode0,'seller',lvXMLNode1) THEN BEGIN
          IF XMLDOMMgt.FindNode(lvXMLNode1,'partyIdentification',lvXMLNode2) THEN BEGIN
            IF XMLDOMMgt.FindNode(lvXMLNode2,'gln',lvXMLNodeReturn) THEN
              "GLN Vendor" := CheckMakeEmpty_GLN_GTIN(lvXMLNodeReturn.InnerText);
            GetContactPerson(lvXMLNode2,"Contact Person Vendor","Phone No. Contact Vendor");
          END;
          GetNameAndAddress(lvXMLNode1,"Name Vendor","Address Vendor","Post Code Vendor","City Vendor","Country Vendor");
          IF XMLDOMMgt.FindNode(lvXMLNode1,'companyRegistrationNumber',lvXMLNodeReturn) THEN
            "VAT Identification Vendor" := lvXMLNodeReturn.InnerText;
        END;

        IF XMLDOMMgt.FindNode(lvXMLNode0,'payer',lvXMLNode1) THEN BEGIN
          IF XMLDOMMgt.FindNode(lvXMLNode1,'partyIdentification/gln',lvXMLNodeReturn) THEN
            "GLN Payer" := CheckMakeEmpty_GLN_GTIN(lvXMLNodeReturn.InnerText);
          GetNameAndAddress(lvXMLNode1,"Name Payer","Address Payer","Post Code Payer","City Payer","Country Payer");
        END;

        lvInvoiceRec.DetermineVendor(FALSE);
        IF "Vendor No." <> '' THEN
          lvInvoiceRec.FillVATPostingGroupsHeader();

        lvInvoiceRec.GetOnHold;  //DP00065
        ExternalDocument := "GLN Vendor" + '-' + "No.";
        "Ext. Document ID" := COPYSTR(ExternalDocument, 1, MAXSTRLEN("Ext. Document ID"));  //db, 30-03-15: C022235
        INSERT;
      END;

      //C036222.sn
      IF XMLDOMMgt.FindNode(lvXMLNode0, 'fpsAttachment4PS', lvXMLNodeReturn) THEN
        IF lvXMLNodeReturn.InnerText <> '' THEN BEGIN
          AttachmentContent.ADDTEXT(lvXMLNodeReturn.InnerText);
          SaveAttachmentToFolder(AttachmentContent, lvInvoiceRec."Ext. Document ID" + '.pdf', lvInvoiceRec);
        END;
      //C036222.en

      WITH lvInvoiceLineRec DO BEGIN
        lvNextLineNo := 10000;
        XMLDOMMgt.FindNodes(lvXMLNode0,'invoiceLineItem',lvXMLNodeList1);
        FOR Counter1 := 0 TO (lvXMLNodeList1.Count - 1) DO BEGIN
          lvXMLNode1 := lvXMLNodeList1.Item(Counter1);
          INIT;
          "Invoice No." := lvInvoiceRec."No.";
          "Line No." := lvNextLineNo;  //* External line no. is not always unique, on a collect invoice can be more than one
                                       //* dispatch notes. It can occur that for each note the line no starts with number '1'.
          lvNextLineNo := lvNextLineNo + 10000;
          FormatMgt.EvaluateInteger(XMLDOMMgt.GetAttributeValue(lvXMLNode1, 'number'), "External Line No.");

          IF XMLDOMMgt.FindNode(lvXMLNode1,'projectNumberNL/referenceIdentification',lvXMLNodeReturn) THEN BEGIN
            IF FPSLicenseManagement.LicenseAndReadPermissionForTable(ServSetup) THEN BEGIN  //db, 17-10-14
              IF ServOrder.GET(lvXMLNodeReturn.InnerText) THEN
                "Service Order No." := lvXMLNodeReturn.InnerText
              ELSE
                "Project No." := lvXMLNodeReturn.InnerText;
            END ELSE BEGIN
              "Project No." := lvXMLNodeReturn.InnerText;
            END;
          END;

          IF XMLDOMMgt.FindNode(lvXMLNode1,'orderIdentification',lvXMLNode2) THEN BEGIN
            IF XMLDOMMgt.FindNode(lvXMLNode2,'documentLineReference',lvXMLNode3) THEN BEGIN
              FormatMgt.EvaluateInteger(XMLDOMMgt.GetAttributeValue(lvXMLNode3, 'number'), "Order Line No. Buyer");
              IF XMLDOMMgt.FindNode(lvXMLNode3,'documentReference/uniqueCreatorIdentification',lvXMLNodeReturn) THEN
                "Order No. Buyer" := lvXMLNodeReturn.InnerText;
            END;
          END;

          IF XMLDOMMgt.FindNode(lvXMLNode1,'customerOrderNL/uniqueCreatorIdentification',lvXMLNodeReturn) THEN
            "Reference Buyer" := lvXMLNodeReturn.InnerText;

          IF XMLDOMMgt.FindNode(lvXMLNode1,'invoice',lvXMLNode2) THEN BEGIN
            IF XMLDOMMgt.FindNode(lvXMLNode2,'documentLineReference',lvXMLNode3) THEN BEGIN
              FormatMgt.EvaluateInteger(XMLDOMMgt.GetAttributeValue(lvXMLNode3, 'number'), "Corr. on Invoice Line No.");
              IF XMLDOMMgt.FindNode(lvXMLNode3,'documentReference/uniqueCreatorIdentification',lvXMLNodeReturn) THEN
                "Correction on Invoice" := lvXMLNodeReturn.InnerText;
            END;
          END;

          IF XMLDOMMgt.FindNode(lvXMLNode1,'despatchAdvice',lvXMLNode2) THEN BEGIN
            IF XMLDOMMgt.FindNode(lvXMLNode2,'documentLineReference',lvXMLNode3) THEN BEGIN
              FormatMgt.EvaluateInteger(XMLDOMMgt.GetAttributeValue(lvXMLNode3, 'number'), "Dispatch Note Line No.");
              IF XMLDOMMgt.FindNode(lvXMLNode3,'documentReference/uniqueCreatorIdentification',lvXMLNodeReturn) THEN
                "Dispatch Note No." := lvXMLNodeReturn.InnerText;
            END;
          END;

          IF XMLDOMMgt.FindNode(lvXMLNode1,'transferOfOwnershipDate',lvXMLNodeReturn) THEN
            FormatMgt.EvaluateDate(lvXMLNodeReturn.InnerText, "Delivery Date");

          IF XMLDOMMgt.FindNode(lvXMLNode1,'deliveredQuantityNL',lvXMLNode2) THEN
            GetQuantityAndUnit(lvXMLNode2,"Delivered Quantity","Unit Code Delivered Quantity");

          IF XMLDOMMgt.FindNode(lvXMLNode1,'fpsElement4PS',lvXMLNodeReturn) THEN
            Element := lvXMLNodeReturn.InnerText //Not sure if this node can exist. For safety this code has not been removed.
          ELSE
            IF XMLDOMMgt.FindNode(lvXMLNode1,'projectNumberNL/fpsElement4PS',lvXMLNodeReturn) THEN
              Element := lvXMLNodeReturn.InnerText;

          IF XMLDOMMgt.FindNode(lvXMLNode1,'fpsItemNo4PS', lvXMLNodeReturn) THEN
            "Item No." := lvXMLNodeReturn.InnerText;

          IF XMLDOMMgt.FindNode(lvXMLNode1,'tradeItemIdentification',lvXMLNode2) THEN BEGIN
            IF XMLDOMMgt.FindNode(lvXMLNode2,'gtin',lvXMLNodeReturn) THEN
              "GTIN Item" := CheckMakeEmpty_GLN_GTIN(lvXMLNodeReturn.InnerText);
            IF XMLDOMMgt.FindNode(lvXMLNode2,'additionalTradeItemIdentification',lvXMLNode3) THEN BEGIN
              IF XMLDOMMgt.FindNode(lvXMLNode3,'additionalTradeItemIdentificationValue',lvXMLNodeReturn) THEN
                "Item No. Vendor" := lvXMLNodeReturn.InnerText;
            END;
          END;
          IF XMLDOMMgt.FindNode(lvXMLNode1,'itemDescription/text',lvXMLNodeReturn) THEN
            Description := lvXMLNodeReturn.InnerText;

          IF XMLDOMMgt.FindNode(lvXMLNode1,'invoicedQuantity',lvXMLNode2) THEN
            GetQuantityAndUnit(lvXMLNode2,"Invoiced Quantity","Unit of Measure Code");

          IF XMLDOMMgt.FindNode(lvXMLNode1,'itemPriceBaseQuantity',lvXMLNode2) THEN
            GetQuantityAndUnit(lvXMLNode2,"Price Base Quantity","Price Base Unit Code");

          IF XMLDOMMgt.FindNode(lvXMLNode1,'itemPriceInclusiveAllowancesCharges',lvXMLNodeReturn) THEN
            FormatMgt.EvaluateDecimal(lvXMLNodeReturn.InnerText, Price);

          IF XMLDOMMgt.FindNode(lvXMLNode1,'invoiceLineAllowanceCharge',lvXMLNode2) THEN BEGIN
            //* In XML-file can be more than 1 discount/surcharge. AO: Keep it simple (temporary) only 1 is used,
            //* else a new table is needed with disc./surch. per invoice line.
            IF XMLDOMMgt.FindNode(lvXMLNode2,'invoiceAllowanceChargePercentageNL',lvXMLNodeReturn) THEN
              FormatMgt.EvaluateDecimal(lvXMLNodeReturn.InnerText, "Discount/Surcharge %");
            IF XMLDOMMgt.FindNode(lvXMLNode2,'invoiceAllowanceChargeAmount',lvXMLNodeReturn) THEN
              FormatMgt.EvaluateDecimal(lvXMLNodeReturn.InnerText, "Discount/Surcharge Amount");
            IF XMLDOMMgt.FindNode(lvXMLNode2,'invoiceAllowanceChargeType',lvXMLNodeReturn) THEN
              "Discount/Surcharge Code" := lvXMLNodeReturn.InnerText;
            IF XMLDOMMgt.FindNode(lvXMLNode2,'invoiceAllowanceOrChargeType',lvXMLNodeReturn) THEN BEGIN
              IF UPPERCASE(COPYSTR(lvXMLNodeReturn.InnerText,1,1)) = 'C' THEN  //* ALLOWANCE(Discount) / CHARGE(Surcharge)
                "Discount/Surcharge Type" := "Discount/Surcharge Type"::Surcharge;
            END;
          END;

          IF XMLDOMMgt.FindNode(lvXMLNode1,'amountInclusiveAllowancesCharges',lvXMLNodeReturn) THEN
            FormatMgt.EvaluateDecimal(lvXMLNodeReturn.InnerText, "Net Line Amount");

          IF XMLDOMMgt.FindNode(lvXMLNode1,'invoiceLineTaxInformation/vATInformationNL',lvXMLNode2) THEN BEGIN
            IF XMLDOMMgt.FindNode(lvXMLNode2,'vATCategory',lvXMLNodeReturn) THEN
              "VAT Rate Type" := lvXMLNodeReturn.InnerText;
            IF XMLDOMMgt.FindNode(lvXMLNode2,'rate',lvXMLNodeReturn) THEN
              FormatMgt.EvaluateDecimal(lvXMLNodeReturn.InnerText, "VAT %");
          END;

          IF XMLDOMMgt.FindNode(lvXMLNode1, 'fpsvatBusPostGroup4PS', lvXMLNodeReturn) THEN
            "VAT Bus. Posting Group" := lvXMLNodeReturn.InnerText;
          IF XMLDOMMgt.FindNode(lvXMLNode1, 'fpsvatProdPostGroup4PS', lvXMLNodeReturn) THEN
            "VAT Prod. Posting Group" := lvXMLNodeReturn.InnerText;

          IF lvInvoiceRec."Reverse Charge VAT" = FALSE THEN
            IF CheckVatCalculationType("VAT Bus. Posting Group", "VAT Prod. Posting Group") THEN BEGIN
              lvInvoiceRec."Reverse Charge VAT" := TRUE;
              lvInvoiceRec."VAT Bus. Posting Group" := "VAT Bus. Posting Group";
              lvInvoiceRec."VAT Prod. Posting Group" := "VAT Prod. Posting Group";
              lvInvoiceRec.MODIFY;
            END;

          IF XMLDOMMgt.FindNode(lvXMLNode1,'fpsServiceOrder4PS',lvXMLNodeReturn) THEN
            "Service Order No." := lvXMLNodeReturn.InnerText;
          IF XMLDOMMgt.FindNode(lvXMLNode1,'fpsGLAccount4PS',lvXMLNodeReturn) THEN
            "G/L Account" := lvXMLNodeReturn.InnerText;
          IF XMLDOMMgt.FindNode(lvXMLNode1,'fpsDepartment4PS',lvXMLNodeReturn) THEN
            Department := lvXMLNodeReturn.InnerText;
          IF XMLDOMMgt.FindNode(lvXMLNode1,'fpsManufacturer4PS',lvXMLNodeReturn) THEN
            Manufacturer := lvXMLNodeReturn.InnerText;
          IF XMLDOMMgt.FindNode(lvXMLNode1,'fpsBasicItem4PS',lvXMLNodeReturn) THEN
            "Basic Item" := lvXMLNodeReturn.InnerText;
          IF XMLDOMMgt.FindNode(lvXMLNode1,'fpsVendorTradeItem4PS',lvXMLNodeReturn) THEN
            "Vendor (Trade Item)" := lvXMLNodeReturn.InnerText;
          IF XMLDOMMgt.FindNode(lvXMLNode1,'fpsTradeItem4PS',lvXMLNodeReturn) THEN
            "Trade Item" := lvXMLNodeReturn.InnerText;
          IF XMLDOMMgt.FindNode(lvXMLNode1,'fpsCostObject4PS',lvXMLNodeReturn) THEN
            "Cost Object" := lvXMLNodeReturn.InnerText;
          IF XMLDOMMgt.FindNode(lvXMLNode1,'fpsnoDispatchRequired4PS', lvXMLNodeReturn) THEN
            "No Dispatch Required" := lvXMLNodeReturn.InnerText;
          IF XMLDOMMgt.FindNode(lvXMLNode1,'fpsUnitOfMeasureCode4PS', lvXMLNodeReturn) THEN
            IF lvXMLNodeReturn.InnerText <> '' THEN
              "Unit of Measure Code" := lvXMLNodeReturn.InnerText;
          CostObjectCostPlusLine := '';
          IF XMLDOMMgt.FindNode(lvXMLNode1,'fpsCostObjectCostPlusLine4PS',lvXMLNodeReturn) THEN
            CostObjectCostPlusLine := lvXMLNodeReturn.InnerText;

          //Mapping Project
          MappingXMLInvoices.RESET;
          MappingXMLInvoices.SETRANGE("Supplying GLN", lvInvoiceRec."GLN Vendor");
          MappingXMLInvoices.SETRANGE("Data Type", MappingXMLInvoices."Data Type"::Project);
          MappingXMLInvoices.SETRANGE("Supplying No.", "Project No.");
          IF MappingXMLInvoices.FINDFIRST THEN BEGIN
            IF MappingXMLInvoices.Convert THEN
              ConvertAccordingMappingXMLInv(
                MappingXMLInvoices, lvInvoiceLineRec, FALSE, FALSE, FALSE, "Project No.");
          END ELSE BEGIN
            MappingXMLInvoices.SETRANGE("Data Type", MappingXMLInvoices."Data Type"::"Project Filter");
            MappingXMLInvoices.SETRANGE("Supplying No.", '');
            IF MappingXMLInvoices.FINDSET THEN BEGIN
              REPEAT
                MappingFound := ProjSetup.CodeInFilter("Project No.", MappingXMLInvoices."Supplying No. Filter");
                MappingXMLInvoices2 := MappingXMLInvoices;
              UNTIL MappingFound OR (MappingXMLInvoices.NEXT = 0);
              IF MappingFound AND MappingXMLInvoices2.Convert THEN
                ConvertAccordingMappingXMLInv
                  (MappingXMLInvoices2, lvInvoiceLineRec, FALSE, FALSE, FALSE, "Project No.");
            END;
          END;

          //Mapping Service Order
          MappingXMLInvoices.SETRANGE("Data Type", MappingXMLInvoices."Data Type"::"Service Order");
          MappingXMLInvoices.SETRANGE("Supplying No.", "Service Order No.");
          IF MappingXMLInvoices.FINDFIRST THEN BEGIN
            IF MappingXMLInvoices.Convert THEN
              ConvertAccordingMappingXMLInv(
                MappingXMLInvoices, lvInvoiceLineRec, FALSE, FALSE, FALSE, "Service Order No.");
          END ELSE BEGIN
            MappingXMLInvoices.SETRANGE("Data Type", MappingXMLInvoices."Data Type"::"Service Order Filter");
            MappingXMLInvoices.SETRANGE("Supplying No.", '');
            IF MappingXMLInvoices.FINDSET THEN BEGIN
              REPEAT
                MappingFound := ProjSetup.CodeInFilter("Service Order No.", MappingXMLInvoices."Supplying No. Filter");
                MappingXMLInvoices2 := MappingXMLInvoices;
              UNTIL MappingFound OR (MappingXMLInvoices.NEXT = 0);
              IF MappingFound AND MappingXMLInvoices2.Convert THEN
                ConvertAccordingMappingXMLInv(
                  MappingXMLInvoices2, lvInvoiceLineRec, FALSE, FALSE, FALSE, "Service Order No.");
            END;
          END;

          //Mapping G/L Account
          MappingXMLInvoices.SETRANGE("Data Type", MappingXMLInvoices."Data Type"::"G/L Account");
          MappingXMLInvoices.SETRANGE("Supplying No.", "G/L Account");
          IF MappingXMLInvoices.FINDFIRST THEN BEGIN
            IF MappingXMLInvoices.Convert THEN
              ConvertAccordingMappingXMLInv(
                MappingXMLInvoices, lvInvoiceLineRec, TRUE, FALSE, FALSE, "G/L Account");
          END ELSE BEGIN
            MappingXMLInvoices.SETRANGE("Data Type", MappingXMLInvoices."Data Type"::"G/L Account Filter");
            MappingXMLInvoices.SETRANGE("Supplying No.", '');
            IF MappingXMLInvoices.FINDSET THEN BEGIN
              REPEAT
                MappingFound := ProjSetup.CodeInFilter("G/L Account", MappingXMLInvoices."Supplying No. Filter");
                MappingXMLInvoices2 := MappingXMLInvoices;
              UNTIL MappingFound OR (MappingXMLInvoices.NEXT = 0);
              IF MappingFound AND MappingXMLInvoices2.Convert THEN
                ConvertAccordingMappingXMLInv(
                  MappingXMLInvoices2, lvInvoiceLineRec, TRUE, FALSE, FALSE, "G/L Account");
            END;
          END;

          //Mapping Cost Object
          MappingXMLInvoices.SETRANGE("Data Type", MappingXMLInvoices."Data Type"::"Cost Object");
          MappingXMLInvoices.SETRANGE("Supplying No.", "Cost Object");
          IF MappingXMLInvoices.FINDFIRST THEN BEGIN
            IF MappingXMLInvoices.Convert THEN
              ConvertAccordingMappingXMLInv(
                MappingXMLInvoices, lvInvoiceLineRec, FALSE, TRUE, FALSE, "Cost Object")
          END ELSE BEGIN
            MappingXMLInvoices.SETRANGE("Data Type", MappingXMLInvoices."Data Type"::"Cost Object Filter");
            MappingXMLInvoices.SETRANGE("Supplying No.", '');
            IF MappingXMLInvoices.FINDSET THEN BEGIN
              REPEAT
                MappingFound := ProjSetup.CodeInFilter("Cost Object", MappingXMLInvoices."Supplying No. Filter");
                MappingXMLInvoices2 := MappingXMLInvoices;
              UNTIL MappingFound OR (MappingXMLInvoices.NEXT = 0);
              IF MappingFound AND MappingXMLInvoices2.Convert THEN
                ConvertAccordingMappingXMLInv(
                  MappingXMLInvoices2, lvInvoiceLineRec, FALSE, TRUE, FALSE, "Cost Object");
            END;
          END;

          //Mapping Department
          MappingXMLInvoices.SETRANGE("Data Type", MappingXMLInvoices."Data Type"::Department);
          MappingXMLInvoices.SETRANGE("Supplying No.", Department);
          IF MappingXMLInvoices.FINDFIRST THEN BEGIN
            IF MappingXMLInvoices.Convert THEN
              ConvertAccordingMappingXMLInv(
                MappingXMLInvoices, lvInvoiceLineRec, FALSE, FALSE, TRUE, Department);
          END ELSE BEGIN
            MappingXMLInvoices.SETRANGE("Data Type", MappingXMLInvoices."Data Type"::"Department Filter");
            MappingXMLInvoices.SETRANGE("Supplying No.", '');
            IF MappingXMLInvoices.FINDSET THEN BEGIN
              REPEAT
                MappingFound := ProjSetup.CodeInFilter(Department, MappingXMLInvoices."Supplying No. Filter");
                MappingXMLInvoices2 := MappingXMLInvoices;
              UNTIL MappingFound OR (MappingXMLInvoices.NEXT = 0);
              IF MappingFound AND MappingXMLInvoices2.Convert THEN
                ConvertAccordingMappingXMLInv(
                  MappingXMLInvoices2, lvInvoiceLineRec, FALSE, FALSE, TRUE, Department);
            END;
          END;

          //Mapping Unit of Measure
          MappingXMLInvoices.SETRANGE("Data Type", MappingXMLInvoices."Data Type"::Unit);
          MappingXMLInvoices.SETRANGE("Supplying No.", "Unit of Measure Code");
          IF MappingXMLInvoices.FINDFIRST THEN
            IF MappingXMLInvoices.Convert THEN
              "Unit of Measure Code" :=
                DetermineReceivingNo(MappingXMLInvoices, "Unit of Measure Code");

          //Mapping Cost Object Cost Plus Line
          MappingXMLInvoices.SETRANGE(
            "Data Type", MappingXMLInvoices."Data Type"::"Cost Object Cost Plus Line");
          MappingXMLInvoices.SETRANGE("Supplying No.", CostObjectCostPlusLine);
          IF MappingXMLInvoices.FINDFIRST THEN BEGIN
            IF MappingXMLInvoices.Convert THEN
              ConvertAccordingMappingXMLInv(
                MappingXMLInvoices, lvInvoiceLineRec, FALSE, FALSE, FALSE, CostObjectCostPlusLine)
          END ELSE BEGIN
            MappingXMLInvoices.SETRANGE(
              "Data Type", MappingXMLInvoices."Data Type"::"Cost Object Cost Plus Line Filter");
            MappingXMLInvoices.SETRANGE("Supplying No.", '');
            IF MappingXMLInvoices.FINDSET THEN BEGIN
              REPEAT
                MappingFound := ProjSetup.CodeInFilter(
                  CostObjectCostPlusLine, MappingXMLInvoices."Supplying No. Filter");
                MappingXMLInvoices2 := MappingXMLInvoices;
              UNTIL MappingFound OR (MappingXMLInvoices.NEXT = 0);
              IF MappingFound AND MappingXMLInvoices2.Convert THEN
                ConvertAccordingMappingXMLInv(
                  MappingXMLInvoices2, lvInvoiceLineRec, FALSE, FALSE, FALSE, CostObjectCostPlusLine);
            END;
          END;

          //Mapping Element
          MappingXMLInvElem.RESET;
          MappingXMLInvElem.SETRANGE("Supplying GLN", lvInvoiceRec."GLN Vendor");
          MappingXMLInvElem.SETRANGE("Data Type", MappingXMLInvElem."Data Type"::"Project Element");
          MappingXMLInvElem.SETRANGE("Project No.", "Project No.");
          MappingXMLInvElem.SETRANGE(Element, Element);
          MappingXMLInvElem.SETRANGE("Sequence No.", 0);
          IF MappingXMLInvElem.FINDFIRST THEN BEGIN
            IF MappingXMLInvElem.Convert THEN
              VALIDATE(Element, MappingXMLInvElem."Receiving Element")
          END ELSE BEGIN
            MappingXMLInvElem.SETRANGE("Data Type", MappingXMLInvElem."Data Type"::"Project Element Filter");
            MappingXMLInvElem.SETRANGE("Project No.", "Project No.");
            MappingXMLInvElem.SETRANGE(Element);
            IF MappingXMLInvElem.FINDFIRST THEN BEGIN
              IF MappingXMLInvElem.Convert THEN
                IF ProjSetup.CodeInFilter(Element, MappingXMLInvElem."Element Filter") THEN
                  VALIDATE(Element, MappingXMLInvElem."Receiving Element")
            END ELSE BEGIN
              MappingXMLInvElem.SETRANGE("Data Type", MappingXMLInvElem."Data Type"::"Project Filter Element");
              MappingXMLInvElem.SETRANGE("Project No.");
              MappingXMLInvElem.SETRANGE(Element, Element);
              IF MappingXMLInvElem.FINDFIRST THEN BEGIN
                IF MappingXMLInvElem.Convert THEN
                  IF ProjSetup.CodeInFilter("Project No.", MappingXMLInvElem."Project Filter") THEN
                    VALIDATE(Element, MappingXMLInvElem."Receiving Element")
              END ELSE BEGIN
                MappingXMLInvElem.SETRANGE("Data Type", MappingXMLInvElem."Data Type"::"Project Filter Element Filter");
                MappingXMLInvElem.SETRANGE(Element);
                IF MappingXMLInvElem.FINDSET THEN BEGIN
                  IF MappingXMLInvElem.Convert THEN
                    IF ProjSetup.CodeInFilter("Project No.", MappingXMLInvElem."Project Filter") AND
                       ProjSetup.CodeInFilter(Element, MappingXMLInvElem."Element Filter") THEN
                      VALIDATE(Element, MappingXMLInvElem."Receiving Element")
                END;
              END;
            END;
          END;

          FillProjectNoWithDispNoteProj();
          IF ("Dispatch Note No." <> '') AND ("Dispatch Note Line No." = 0) THEN
            "Dispatch Note Line No." := SearchForDispatchNoteLineNo();

          //DP00065.sn
          lvInvoiceRec.CALCFIELDS("GLN Alternative Vendor");
          IF lvInvoiceRec."GLN Alternative Vendor" <> '' THEN
            lvVendor := lvInvoiceRec."GLN Alternative Vendor"
          ELSE
            lvVendor := lvInvoiceRec."GLN Vendor";
          IF "Item No. Vendor" <> '' THEN
            lvItem := "Item No. Vendor"
          ELSE
            lvItem := "GTIN Item";
          IF lvTradeItemRec.GET(lvVendor, lvItem) THEN BEGIN  //db, 02-02-12
            "Vendor (Trade Item)" := lvTradeItemRec.Vendor;
            VALIDATE("Trade Item", lvTradeItemRec."Item Code");
            "Cost Object" := lvTradeItemRec."Cost Object";
          END ELSE BEGIN
            IF "GTIN Item" <> '' THEN BEGIN  //db, 16-09-14
              lvTradeItemRec.RESET;
              lvTradeItemRec.SETCURRENTKEY("GTIN Code (Item)");
              lvTradeItemRec.SETRANGE("GTIN Code (Item)", "GTIN Item");
              lvTradeItemRec.SETRANGE(Vendor, lvVendor);
              IF lvTradeItemRec.FINDFIRST THEN BEGIN
                "Vendor (Trade Item)" := lvTradeItemRec.Vendor;
                VALIDATE("Trade Item", lvTradeItemRec."Item Code");
                "Cost Object" := lvTradeItemRec."Cost Object";
              END;
            END;
          END;
          //DP00065.en

          INSERT;

        END;
      END;

      NewDocNo := lvInvoiceRec."No.";
      EXIT(lvInvoiceRec."GLN Vendor" + '-' + lvInvoiceRec."No.");
    END;

    PROCEDURE ProcessGetInfoFromFile@1100525006(FileName@1100525001 : Text;iProcessType@1100525000 : Integer;VAR oDocNo@1100525002 : Code[20];VAR oGLNVendor@1100525003 : Code[20];VAR oVendorName@1100525004 : Text[100]);
    VAR
      TempBlob@1100525013 : Record 99008535;
      lvXMLDoc@1100525007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      lvXMLNode0@1100525006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      lvXMLNodeReturn@1100525005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      lvInStream@1100525012 : InStream;
      lvLen@1100525008 : Integer;
      lvPos@1100525009 : Integer;
      lvTextLine@1100525011 : Text[100];
    BEGIN
      oDocNo := '';
      oGLNVendor := '';
      oVendorName := '';
      IF FileName = '' THEN
        EXIT;
      IF NOT FileMgt.ClientFileExists(FileName) THEN
        EXIT;

      IF iProcessType = DATABASE::"Import Trade Item" THEN BEGIN  //DP00065
        lvLen := STRLEN(FileName);
        IF lvLen > 4 THEN BEGIN
          IF LOWERCASE(FileMgt.GetExtension(FileName)) = 'csv' THEN BEGIN
            FileMgt.BLOBImport4PS(TempBlob, FileName, FALSE);
            TempBlob.Blob.CREATEINSTREAM(lvInStream);
            lvInStream.READTEXT(lvTextLine, 100);
            lvPos := STRPOS(lvTextLine, ';');
            IF lvPos <> 0 THEN BEGIN
              IF lvPos > 1 THEN
                oGLNVendor := COPYSTR(lvTextLine, 1, lvPos-1);
              lvTextLine := COPYSTR(lvTextLine, lvPos+1);
              lvPos := STRPOS(lvTextLine, ';');
              IF lvPos > 1 THEN
                oVendorName := COPYSTR(lvTextLine, 1, lvPos-1);
            END;
            EXIT;
          END;
        END;
      END;

      IF ISNULL(lvXMLDoc) THEN
        lvXMLDoc := lvXMLDoc.XmlDocument;
      XMLDOMMgt.LoadXMLFromClientFile(lvXMLDoc, FileName, TRUE);

      lvXMLNode0 := lvXMLDoc.DocumentElement;

      CASE iProcessType OF
        DATABASE::"Import Trade Item":  //DP00065
          BEGIN
            IF XMLDOMMgt.FindNode(lvXMLNode0,'PricatHeader/Document/DocumentNumber',lvXMLNodeReturn) THEN
              oDocNo := lvXMLNodeReturn.InnerText;
            IF XMLDOMMgt.FindNode(lvXMLNode0,'PricatHeader/Supplier/GLN',lvXMLNodeReturn) THEN
              oGLNVendor := lvXMLNodeReturn.InnerText;
            IF XMLDOMMgt.FindNode(lvXMLNode0,'PricatHeader/Supplier/PartyName',lvXMLNodeReturn) THEN
              oVendorName := lvXMLNodeReturn.InnerText;
          END;
        DATABASE::"Dispatch Note SiB":
          BEGIN
            IF XMLDOMMgt.FindNode(lvXMLNode0,'despatchAdviceIdentification/uniqueCreatorIdentification',lvXMLNodeReturn) THEN
              oDocNo := lvXMLNodeReturn.InnerText;
            IF XMLDOMMgt.FindNode(lvXMLNode0,'shipper/gln',lvXMLNodeReturn) THEN
              oGLNVendor := lvXMLNodeReturn.InnerText;
            IF XMLDOMMgt.FindNode(lvXMLNode0,'shipper/nameAndAddressNL/name',lvXMLNodeReturn) THEN
              oVendorName := lvXMLNodeReturn.InnerText;
          END;
        DATABASE::"Invoice SiB":
          BEGIN
            IF XMLDOMMgt.FindNode(lvXMLNode0,'invoiceIdentification/uniqueCreatorIdentification',lvXMLNodeReturn) THEN
              oDocNo := lvXMLNodeReturn.InnerText;
            IF XMLDOMMgt.FindNode(lvXMLNode0,'seller/partyIdentification/gln',lvXMLNodeReturn) THEN
              oGLNVendor := lvXMLNodeReturn.InnerText;
            IF XMLDOMMgt.FindNode(lvXMLNode0,'seller/nameAndAddressNL/name',lvXMLNodeReturn) THEN
              oVendorName := lvXMLNodeReturn.InnerText;
          END;
      END;
    END;

    LOCAL PROCEDURE GetNameAndAddress@1100525002(iXMLNode@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR ioName@1100525001 : Text[50];VAR ioAddress@1100525002 : Text[50];VAR ioPostCode@1100525003 : Code[20];VAR ioCity@1100525005 : Text[50];VAR ioCountry@1100525004 : Code[10]);
    VAR
      lvXMLNode1@1100525007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      lvXMLNodeReturn@1100525008 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      IF NOT XMLDOMMgt.FindNode(iXMLNode,'nameAndAddressNL',lvXMLNode1) THEN BEGIN
        IF NOT XMLDOMMgt.FindNode(iXMLNode,'nameAndAddress',lvXMLNode1) THEN
          EXIT;
      END;
      IF XMLDOMMgt.FindNode(lvXMLNode1,'name',lvXMLNodeReturn) THEN
        ioName := COPYSTR(lvXMLNodeReturn.InnerText, 1, 50);
      IF XMLDOMMgt.FindNode(lvXMLNode1,'streetAddressOne',lvXMLNodeReturn) THEN
        ioAddress := COPYSTR(lvXMLNodeReturn.InnerText, 1, 50);
      IF XMLDOMMgt.FindNode(lvXMLNode1,'postalCode',lvXMLNodeReturn) THEN
        ioPostCode := COPYSTR(lvXMLNodeReturn.InnerText, 1, 20);
      IF XMLDOMMgt.FindNode(lvXMLNode1,'city',lvXMLNodeReturn) THEN
        ioCity := COPYSTR(lvXMLNodeReturn.InnerText, 1, 50);
      IF XMLDOMMgt.FindNode(lvXMLNode1,'countryCode/countryISOCode',lvXMLNodeReturn) THEN
        ioCountry := lvXMLNodeReturn.InnerText;
    END;

    LOCAL PROCEDURE GetContactPerson@1100525003(iXMLNode@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR ioContact@1100525001 : Text[50];VAR ioPhoneNo@1100525002 : Text[30]);
    VAR
      lvXMLNode1@1100525007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      lvXMLNode2@1100525006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      lvXMLNodeReturn@1100525008 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      IF XMLDOMMgt.FindNode(iXMLNode,'contactNL',lvXMLNode1) THEN BEGIN
        IF XMLDOMMgt.FindNode(lvXMLNode1,'personOrDepartmentName/description/text',lvXMLNodeReturn) THEN
          ioContact := COPYSTR(lvXMLNodeReturn.InnerText, 1, 50);
        IF XMLDOMMgt.FindNode(lvXMLNode1,'communicationChannel',lvXMLNode2) THEN BEGIN
          IF XMLDOMMgt.GetAttributeValue(lvXMLNode2, 'communicationChannelCode') = 'TELEPHONE' THEN
            ioPhoneNo := COPYSTR(XMLDOMMgt.GetAttributeValue(lvXMLNode2, 'communicationNumber'), 1, 30);
        END;
      END;
    END;

    LOCAL PROCEDURE GetQuantityAndUnit@1100525004(iXMLNode@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR ioQuantity@1100525001 : Decimal;VAR ioUnit@1100525002 : Code[10]);
    VAR
      lvXMLNodeReturn@1100525008 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      IF XMLDOMMgt.FindNode(iXMLNode,'value',lvXMLNodeReturn) THEN
        FormatMgt.EvaluateDecimal(lvXMLNodeReturn.InnerText,ioQuantity);
      IF XMLDOMMgt.FindNode(iXMLNode,'unitOfMeasure/measurementUnitCodeValue',lvXMLNodeReturn) THEN
        ioUnit := lvXMLNodeReturn.InnerText;
    END;

    PROCEDURE CheckMakeEmpty_GLN_GTIN@1100525007(iCode@1100525000 : Code[20]) : Code[20];
    VAR
      lvCode@1100525001 : Code[20];
    BEGIN
      //* If the GLN/GTIN code is filled with one or more zeros then make the field empty
      lvCode := iCode;
      lvCode := DELCHR(lvCode);
      lvCode := DELCHR(lvCode, '=', '0');
      IF lvCode = '' THEN
        EXIT('')
      ELSE
        EXIT(iCode);
    END;

    LOCAL PROCEDURE ConvertAccordingMappingXMLInv@1100525009(MappingXMLInvoices@1100525001 : Record 11020563;VAR lvInvoiceLineRec@1100525000 : Record 11072654;MappingGLAccount@1100525002 : Boolean;MappingCostObject@1100525003 : Boolean;MappingDepartment@1100525004 : Boolean;SupplyingNo@1100528401 : Code[20]);
    VAR
      ReceivingNo@1100528400 : Code[20];
      DimVal@1100530700 : Record 349;
      GLSetup@1100530701 : Record 98;
    BEGIN
      ReceivingNo := DetermineReceivingNo(MappingXMLInvoices, SupplyingNo);
      CASE MappingXMLInvoices."Receiving Type" OF
        MappingXMLInvoices."Receiving Type"::Project:
          BEGIN
            IF MappingXMLInvoices."Data Type" <> MappingXMLInvoices."Receiving Type" THEN
              lvInvoiceLineRec."Service Order No." := '';
            lvInvoiceLineRec.VALIDATE("Project No.", ReceivingNo);
          END;
        MappingXMLInvoices."Receiving Type" ::"Service Order":
          BEGIN
            IF MappingXMLInvoices."Data Type" <> MappingXMLInvoices."Receiving Type" THEN
              lvInvoiceLineRec."Project No." := '';
            lvInvoiceLineRec.VALIDATE("Service Order No.", ReceivingNo);
          END;
        MappingXMLInvoices."Receiving Type" ::"Not Appl": BEGIN
          IF MappingGLAccount THEN
            lvInvoiceLineRec.VALIDATE("G/L Account", ReceivingNo);
          IF MappingCostObject THEN BEGIN
            GLSetup.GET;
            IF DimVal.GET(GLSetup."Global Dimension 2 Code", ReceivingNo) THEN
              IF DimVal."Cost Type" <> DimVal."Cost Type"::Material THEN BEGIN
                lvInvoiceLineRec.VALIDATE("Item No. Vendor", '');
                lvInvoiceLineRec.VALIDATE("GTIN Item", '');
              END;
            lvInvoiceLineRec.VALIDATE("Cost Object", ReceivingNo);
          END;
          IF MappingDepartment THEN
            lvInvoiceLineRec.VALIDATE(Department, ReceivingNo)
        END;
        MappingXMLInvoices."Receiving Type"::"Cost Object":
          lvInvoiceLineRec.VALIDATE("Cost Object", ReceivingNo);
      END;
    END;

    LOCAL PROCEDURE DetermineReceivingNo@1100528400(MappingXMLInvoices@1100528400 : Record 11020563;SupplyingNo@1100528401 : Code[20]) : Code[20];
    BEGIN
      IF MappingXMLInvoices."Inherit Supplying No." THEN
        EXIT(SupplyingNo);
      EXIT(MappingXMLInvoices."Receiving No.");
    END;

    PROCEDURE CheckVatCalculationType@1100525010(VatBusPostGr@1100525000 : Code[10];VatProdPostGr@1100525001 : Code[10]) : Boolean;
    VAR
      VatPostingSetup@1100525002 : Record 325;
    BEGIN
      IF (VatBusPostGr + VatProdPostGr) = '' THEN //This skips text lines
        EXIT;

      VatPostingSetup.SETRANGE("VAT Bus. Posting Group", VatBusPostGr);
      VatPostingSetup.SETRANGE("VAT Prod. Posting Group", VatProdPostGr);
      VatPostingSetup.FINDFIRST;
      EXIT(VatPostingSetup."VAT Calculation Type" = VatPostingSetup."VAT Calculation Type"::"Reverse Charge VAT");
    END;

    PROCEDURE GetNewDocNo@1100525011() : Code[20];
    BEGIN
      EXIT(NewDocNo);
    END;

    PROCEDURE UpdateProgressWindow@9(NewProgress@11012000 : Integer);
    BEGIN
      IF NoOfRecords > 0 THEN BEGIN
        NewProgress := ROUND(NewProgress / NoOfRecords * 100,1);
        IF (NewProgress <> Progress) OR (TIME > LastUpdateTime + 5000) THEN BEGIN
          Window.UPDATE(1,100 * NewProgress);
          LastUpdateTime := TIME;
        END;
        Progress := NewProgress;
      END;
    END;

    PROCEDURE StartLog@1210190000();
    BEGIN
      //DP00065
      StartDateLog := CURRENTDATETIME;  //db, 11-03-13: C006329
    END;

    PROCEDURE EndLog@1210190001(LinesRead@1210190001 : Integer;LinesProcessed@1210190002 : Integer);
    VAR
      LogRec@1210190003 : Record 11012335;
    BEGIN
      //DP00065
      LogRec.UpdateLogbook(Text019, LinesRead, LinesProcessed, 0, StartDateLog);  //db, 11-03-13: C006329
    END;

    LOCAL PROCEDURE IsDocumentCaptureActive@1100528203() : Boolean;
    BEGIN
      //Call C022235
      IF NOT DCSetupRead THEN BEGIN
        IF NOT FPSLicenseManagement.LicenseAndReadPermissionForTable(DocumentCaptureSetup) THEN
          EXIT(FALSE);
        IF DocumentCaptureSetup.GET THEN;
          DCSetupRead := TRUE;
      END;
      EXIT(DocumentCaptureSetup."Document Nos." <> '');
    END;

    LOCAL PROCEDURE SaveAttachmentToFolder@1100528811(AttachmentContent@1100528800 : BigText;IFilename@1100528814 : Text;LocInvoiceSiB@1100529602 : Record 11072653);
    VAR
      TempBlob@1100529606 : TEMPORARY Record 99008535;
      DocumentMgtSetup@1100529604 : Record 11071831;
      DocumentProperties@1100529603 : Record 11012746;
      DocumentLinkManagement@1100529601 : Codeunit 11012401;
      FileManagement@1100528811 : Codeunit 419;
      ExternalDocumentManagement@1100528403 : Codeunit 11012403;
      Bytes@1100528810 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      MemoryStream@1100528812 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
      Convert@1100528813 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      OStream@1100529607 : OutStream;
      TargetStorageType@1100528404 : Option;
      TargetFileURI@1100528402 : Text;
      ProcessedFullFileName@1100528405 : Text;
    BEGIN
      IF AttachmentContent.LENGTH = 0 THEN
        EXIT;

      //Convert Base64String To Blob (temp)
      TempBlob.INIT;
      TempBlob.Blob.CREATEOUTSTREAM(OStream);
      Bytes := Convert.FromBase64String(AttachmentContent);
      MemoryStream := MemoryStream.MemoryStream(Bytes);
      MemoryStream.WriteTo(OStream);

      IF NOT TempBlob.Blob.HASVALUE THEN
        EXIT;

      SiBSetup.GET;
      ProcessedFullFileName := STRSUBSTNO('%1%2', SiBSetup."Folder Processed Purch.Inv.", IFilename);
      FileManagement.BLOBExport4PS(TempBlob, ProcessedFullFileName, FALSE, FALSE);

      IF SiBSetup."XML Invoice Document Type" = '' THEN
        EXIT;

      DocumentMgtSetup.GET;
      DocumentProperties.INIT;
      DocumentProperties."Document Group" := DocumentMgtSetup."Document Group";
      DocumentProperties."Document Type" := SiBSetup."XML Invoice Document Type";
      DocumentProperties.Description := COPYSTR(IFilename, 1, MAXSTRLEN(DocumentProperties.Description));
      DocumentProperties."External Document" := TRUE;
      DocumentProperties.INSERT(TRUE);
      ExternalDocumentManagement.RegisterFile(
        ProcessedFullFileName, DocumentProperties."Document Type", DocumentProperties."Creation Date",
        TargetFileURI, TargetStorageType);
      DocumentProperties.ValidateStorageURI(TargetStorageType, TargetFileURI);
      DocumentProperties.MODIFY;

      DocumentLinkManagement.CreateOneDocumentLink(DocumentProperties, LocInvoiceSiB.RECORDID);
    END;

    BEGIN
    {
      db, 18-09-14: rename additional fields (fps:xx), exported by xmlport 11012001/002

      db, 15-06-15: C023991
      - rename of table 'Import Trade Item' (11012333) to 'Trade Item Import Log' resulted in check on table 'Import Trade Item Charge'
    }
    END.
  }
}

