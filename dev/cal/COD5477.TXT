OBJECT Codeunit 5477 Sales Invoice Aggregator
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.04;
  }
  PROPERTIES
  {
    Permissions=TableData 112=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      DocumentIDNotSpecifiedForLinesErr@1000 : TextConst '@@@={Locked};ENU=You must specify a document id to get the lines.;NOR=You must specify a document id to get the lines.';
      DocumentDoesNotExistErr@1001 : TextConst '@@@={Locked};ENU=No document with the specified ID exists.;NOR=No document with the specified ID exists.';
      MultipleDocumentsFoundForIdErr@1006 : TextConst '@@@={Locked};ENU=Multiple documents have been found for the specified criteria.;NOR=Multiple documents have been found for the specified criteria.';
      CannotModifyPostedInvioceErr@1002 : TextConst '@@@={Locked};ENU=The invoice has been posted and can no longer be modified.;NOR=The invoice has been posted and can no longer be modified.';
      CannotInsertALineThatAlreadyExistsErr@1003 : TextConst '@@@={Locked};ENU=You cannot insert a line because a line already exists.;NOR=You cannot insert a line because a line already exists.';
      CannotModifyALineThatDoesntExistErr@1004 : TextConst '@@@={Locked};ENU=You cannot modify a line that does not exist.;NOR=You cannot modify a line that does not exist.';
      CannotInsertPostedInvoiceErr@1005 : TextConst '@@@={Locked};ENU=Invoices created through the API must be in Draft state.;NOR=Invoices created through the API must be in Draft state.';
      GraphMgtGeneralTools@1007 : Codeunit 5465;
      CanOnlySetUOMForTypeItemErr@1008 : TextConst '@@@={Locked};ENU=Unit of Measure can be set only for lines with type Item.;NOR=Unit of Measure can be set only for lines with type Item.';
      SkipUpdateDiscounts@1014 : Boolean;
      InvoiceIdIsNotSpecifiedErr@1009 : TextConst '@@@={Locked};ENU=Invoice ID is not specified.;NOR=Invoice ID is not specified.';
      IntegrationRecordDoesNotExistErr@1010 : TextConst '@@@={Locked};ENU=No Integration Record with the specified ID exists.;NOR=No Integration Record with the specified ID exists.';
      EntityIsNotFoundErr@1012 : TextConst '@@@={Locked};ENU=Sales Invoice Entity is not found.;NOR=Sales Invoice Entity is not found.';
      AggregatorCategoryLbl@1011 : TextConst '@@@={Locked};ENU=Sales Invoice Aggregator;NOR=Sales Invoice Aggregator';

    [EventSubscriber(Table,36,OnAfterInsertEvent)]
    LOCAL PROCEDURE OnAfterInsertSalesHeader@2(VAR Rec@1000 : Record 36;RunTrigger@1001 : Boolean);
    BEGIN
      IF NOT CheckValidRecord(Rec) OR (NOT GraphMgtGeneralTools.IsApiEnabled) THEN
        EXIT;

      InsertOrModifyFromSalesHeader(Rec);
    END;

    [EventSubscriber(Table,36,OnAfterModifyEvent)]
    LOCAL PROCEDURE OnAfterModifySalesHeader@3(VAR Rec@1000 : Record 36;VAR xRec@1001 : Record 36;RunTrigger@1002 : Boolean);
    BEGIN
      IF NOT CheckValidRecord(Rec) OR (NOT GraphMgtGeneralTools.IsApiEnabled) THEN
        EXIT;

      InsertOrModifyFromSalesHeader(Rec);
    END;

    [EventSubscriber(Table,36,OnAfterDeleteEvent)]
    LOCAL PROCEDURE OnAfterDeleteSalesHeader@5(VAR Rec@1000 : Record 36;RunTrigger@1001 : Boolean);
    VAR
      SalesInvoiceEntityAggregate@1002 : Record 5475;
    BEGIN
      IF NOT CheckValidRecord(Rec) OR (NOT GraphMgtGeneralTools.IsApiEnabled) THEN
        EXIT;

      TransferIntegrationRecordID(Rec);

      IF NOT SalesInvoiceEntityAggregate.GET(Rec."No.",FALSE) THEN
        EXIT;

      SalesInvoiceEntityAggregate.DELETE;
    END;

    [EventSubscriber(Codeunit,56,OnAfterResetRecalculateInvoiceDisc)]
    LOCAL PROCEDURE OnAfterResetRecalculateInvoiceDisc@34(VAR SalesHeader@1000 : Record 36);
    BEGIN
      IF NOT CheckValidRecord(SalesHeader) OR (NOT GraphMgtGeneralTools.IsApiEnabled) THEN
        EXIT;

      InsertOrModifyFromSalesHeader(SalesHeader);
    END;

    [EventSubscriber(Table,37,OnAfterInsertEvent)]
    LOCAL PROCEDURE OnAfterInsertSalesLine@71(VAR Rec@1000 : Record 37;RunTrigger@1001 : Boolean);
    BEGIN
      IF NOT CheckValidLineRecord(Rec) THEN
        EXIT;

      ModifyTotalsSalesLine(Rec,TRUE);
    END;

    [EventSubscriber(Table,37,OnAfterModifyEvent)]
    LOCAL PROCEDURE OnAfterModifySalesLine@72(VAR Rec@1000 : Record 37;VAR xRec@1001 : Record 37;RunTrigger@1002 : Boolean);
    BEGIN
      IF NOT CheckValidLineRecord(Rec) THEN
        EXIT;

      ModifyTotalsSalesLine(Rec,Rec."Recalculate Invoice Disc.");
    END;

    [EventSubscriber(Table,37,OnAfterDeleteEvent)]
    LOCAL PROCEDURE OnAfterDeleteSalesLine@73(VAR Rec@1000 : Record 37;RunTrigger@1001 : Boolean);
    VAR
      SalesLine@1003 : Record 37;
    BEGIN
      IF NOT CheckValidLineRecord(Rec) THEN
        EXIT;

      SalesLine.SETRANGE("Document No.",Rec."Document No.");
      SalesLine.SETRANGE("Document Type",Rec."Document Type");
      SalesLine.SETRANGE("Recalculate Invoice Disc.",TRUE);

      IF SalesLine.FINDFIRST THEN BEGIN
        ModifyTotalsSalesLine(SalesLine,TRUE);
        EXIT;
      END;

      SalesLine.SETRANGE("Recalculate Invoice Disc.");

      IF NOT SalesLine.FINDFIRST THEN
        BlankTotals(Rec."Document No.",FALSE);
    END;

    [EventSubscriber(Table,112,OnAfterInsertEvent)]
    LOCAL PROCEDURE OnAfterInsertSalesInvoiceHeader@20(VAR Rec@1000 : Record 112;RunTrigger@1001 : Boolean);
    BEGIN
      IF Rec.ISTEMPORARY OR (NOT GraphMgtGeneralTools.IsApiEnabled) THEN
        EXIT;

      InsertOrModifyFromSalesInvoiceHeader(Rec);
    END;

    [EventSubscriber(Table,112,OnAfterModifyEvent)]
    LOCAL PROCEDURE OnAfterModifySalesInvoiceHeader@21(VAR Rec@1000 : Record 112;VAR xRec@1001 : Record 112;RunTrigger@1002 : Boolean);
    BEGIN
      IF Rec.ISTEMPORARY OR (NOT GraphMgtGeneralTools.IsApiEnabled) THEN
        EXIT;

      InsertOrModifyFromSalesInvoiceHeader(Rec);
    END;

    [EventSubscriber(Table,112,OnAfterRenameEvent)]
    LOCAL PROCEDURE OnAfterRenameSalesInvoiceHeader@22(VAR Rec@1000 : Record 112;VAR xRec@1001 : Record 112;RunTrigger@1002 : Boolean);
    VAR
      SalesInvoiceEntityAggregate@1003 : Record 5475;
    BEGIN
      IF Rec.ISTEMPORARY OR (NOT GraphMgtGeneralTools.IsApiEnabled) THEN
        EXIT;

      IF NOT SalesInvoiceEntityAggregate.GET(xRec."No.",TRUE) THEN
        EXIT;

      SalesInvoiceEntityAggregate.SetIsRenameAllowed(TRUE);
      SalesInvoiceEntityAggregate.RENAME(Rec."No.",TRUE);
    END;

    [EventSubscriber(Table,112,OnAfterDeleteEvent)]
    LOCAL PROCEDURE OnAfterDeleteSalesInvoiceHeader@23(VAR Rec@1000 : Record 112;RunTrigger@1001 : Boolean);
    VAR
      SalesInvoiceEntityAggregate@1002 : Record 5475;
    BEGIN
      IF Rec.ISTEMPORARY OR (NOT GraphMgtGeneralTools.IsApiEnabled) THEN
        EXIT;

      IF NOT SalesInvoiceEntityAggregate.GET(Rec."No.",TRUE) THEN
        EXIT;

      SalesInvoiceEntityAggregate.DELETE;
    END;

    [EventSubscriber(Codeunit,60,OnAfterCalcSalesDiscount)]
    LOCAL PROCEDURE OnAfterCalculateSalesDiscountOnSalesHeader@36(VAR SalesHeader@1000 : Record 36);
    BEGIN
      IF NOT CheckValidRecord(SalesHeader) OR (NOT GraphMgtGeneralTools.IsApiEnabled) THEN
        EXIT;

      InsertOrModifyFromSalesHeader(SalesHeader);
    END;

    [EventSubscriber(Table,21,OnAfterInsertEvent)]
    LOCAL PROCEDURE OnAfterInsertCustomerLedgerEntry@11(VAR Rec@1000 : Record 21;RunTrigger@1001 : Boolean);
    BEGIN
      IF Rec.ISTEMPORARY OR (NOT GraphMgtGeneralTools.IsApiEnabled) THEN
        EXIT;

      SetStatusOptionFromCustLedgerEntry(Rec);
    END;

    [EventSubscriber(Table,21,OnAfterModifyEvent)]
    LOCAL PROCEDURE OnAfterModifyCustomerLedgerEntry@13(VAR Rec@1000 : Record 21;VAR xRec@1001 : Record 21;RunTrigger@1002 : Boolean);
    BEGIN
      IF Rec.ISTEMPORARY OR (NOT GraphMgtGeneralTools.IsApiEnabled) THEN
        EXIT;

      SetStatusOptionFromCustLedgerEntry(Rec);
    END;

    [EventSubscriber(Table,21,OnAfterRenameEvent)]
    LOCAL PROCEDURE OnAfterRenameCustomerLedgerEntry@14(VAR Rec@1000 : Record 21;VAR xRec@1001 : Record 21;RunTrigger@1002 : Boolean);
    BEGIN
      IF Rec.ISTEMPORARY OR (NOT GraphMgtGeneralTools.IsApiEnabled) THEN
        EXIT;

      SetStatusOptionFromCustLedgerEntry(Rec);
    END;

    [EventSubscriber(Table,21,OnAfterDeleteEvent)]
    LOCAL PROCEDURE OnAfterDeleteCustomerLedgerEntry@18(VAR Rec@1000 : Record 21;RunTrigger@1001 : Boolean);
    BEGIN
      IF Rec.ISTEMPORARY OR (NOT GraphMgtGeneralTools.IsApiEnabled) THEN
        EXIT;

      SetStatusOptionFromCustLedgerEntry(Rec);
    END;

    [EventSubscriber(Table,1900,OnAfterInsertEvent)]
    LOCAL PROCEDURE OnAfterInsertCancelledDocument@29(VAR Rec@1000 : Record 1900;RunTrigger@1001 : Boolean);
    BEGIN
      IF Rec.ISTEMPORARY OR (NOT GraphMgtGeneralTools.IsApiEnabled) THEN
        EXIT;

      SetStatusOptionFromCancelledDocument(Rec);
    END;

    [EventSubscriber(Table,1900,OnAfterModifyEvent)]
    LOCAL PROCEDURE OnAfterModifyCancelledDocument@28(VAR Rec@1000 : Record 1900;VAR xRec@1001 : Record 1900;RunTrigger@1002 : Boolean);
    BEGIN
      IF Rec.ISTEMPORARY OR (NOT GraphMgtGeneralTools.IsApiEnabled) THEN
        EXIT;

      SetStatusOptionFromCancelledDocument(Rec);
    END;

    [EventSubscriber(Table,1900,OnAfterRenameEvent)]
    LOCAL PROCEDURE OnAfterRenameCancelledDocument@27(VAR Rec@1000 : Record 1900;VAR xRec@1001 : Record 1900;RunTrigger@1002 : Boolean);
    BEGIN
      IF Rec.ISTEMPORARY OR (NOT GraphMgtGeneralTools.IsApiEnabled) THEN
        EXIT;

      SetStatusOptionFromCancelledDocument(xRec);
      SetStatusOptionFromCancelledDocument(Rec);
    END;

    [EventSubscriber(Table,1900,OnAfterDeleteEvent)]
    LOCAL PROCEDURE OnAfterDeleteCancelledDocument@26(VAR Rec@1000 : Record 1900;RunTrigger@1001 : Boolean);
    BEGIN
      IF Rec.ISTEMPORARY OR (NOT GraphMgtGeneralTools.IsApiEnabled) THEN
        EXIT;

      SetStatusOptionFromCancelledDocument(Rec);
    END;

    [EventSubscriber(Codeunit,80,OnBeforeSalesInvHeaderInsert)]
    LOCAL PROCEDURE OnBeforeSalesInvHeaderInsert@81(VAR SalesInvHeader@1000 : Record 112;SalesHeader@1001 : Record 36;CommitIsSuppressed@1002 : Boolean);
    VAR
      IntegrationRecord@1003 : Record 5151;
      SalesInvoiceEntityAggregate@1004 : Record 5475;
      IsRenameAllowed@1005 : Boolean;
    BEGIN
      IF SalesInvHeader.ISTEMPORARY OR (NOT GraphMgtGeneralTools.IsApiEnabled) THEN
        EXIT;

      IF ISNULLGUID(SalesHeader.Id) THEN BEGIN
        SENDTRACETAG('00006TK',AggregatorCategoryLbl,VERBOSITY::Error,InvoiceIdIsNotSpecifiedErr,
          DATACLASSIFICATION::SystemMetadata);
        EXIT;
      END;

      IF SalesInvHeader."Pre-Assigned No." <> SalesHeader."No." THEN
        EXIT;

      IF SalesInvHeader.Id <> SalesHeader.Id THEN
        EXIT;

      IF NOT SalesInvoiceEntityAggregate.GET(SalesHeader."No.",FALSE) THEN BEGIN
        SENDTRACETAG('00006TL',AggregatorCategoryLbl,VERBOSITY::Error,EntityIsNotFoundErr,
          DATACLASSIFICATION::SystemMetadata);
        EXIT;
      END;

      IF SalesInvoiceEntityAggregate.Id <> SalesHeader.Id THEN
        EXIT;

      IF NOT IntegrationRecord.GET(SalesHeader.Id) THEN BEGIN
        SENDTRACETAG('00006TM',AggregatorCategoryLbl,VERBOSITY::Error,IntegrationRecordDoesNotExistErr,
          DATACLASSIFICATION::SystemMetadata);
        EXIT;
      END;

      // Posting will insert it again
      IntegrationRecord.DELETE;

      IsRenameAllowed := SalesInvoiceEntityAggregate.GetIsRenameAllowed;
      SalesInvoiceEntityAggregate.SetIsRenameAllowed(TRUE);
      SalesInvoiceEntityAggregate.RENAME(SalesInvHeader."No.",TRUE);
      SalesInvoiceEntityAggregate.SetIsRenameAllowed(IsRenameAllowed);
    END;

    [External]
    PROCEDURE PropagateOnInsert@15(VAR SalesInvoiceEntityAggregate@1000 : Record 5475;VAR TempFieldBuffer@1003 : TEMPORARY Record 8450);
    VAR
      SalesHeader@1001 : Record 36;
      TypeHelper@1002 : Codeunit 10;
      TargetRecordRef@1004 : RecordRef;
      DocTypeFieldRef@1006 : FieldRef;
    BEGIN
      IF SalesInvoiceEntityAggregate.ISTEMPORARY OR (NOT GraphMgtGeneralTools.IsApiEnabled) THEN
        EXIT;

      IF SalesInvoiceEntityAggregate.Posted THEN
        ERROR(CannotInsertPostedInvoiceErr);

      TargetRecordRef.OPEN(DATABASE::"Sales Header");

      DocTypeFieldRef := TargetRecordRef.FIELD(SalesHeader.FIELDNO("Document Type"));
      DocTypeFieldRef.VALUE(SalesHeader."Document Type"::Invoice);

      TypeHelper.TransferFieldsWithValidate(TempFieldBuffer,SalesInvoiceEntityAggregate,TargetRecordRef);

      // SetTable does not transfer globals, which will affect the logic in OnInsert trigger. We have to insert here and modify latter.
      TargetRecordRef.INSERT(TRUE);

      SalesHeader.GET(TargetRecordRef.RECORDID);
      SalesHeader.CopySellToAddressToBillToAddress;
      SalesHeader.SetDefaultPaymentServices;
      SalesHeader.MODIFY(TRUE);

      SalesInvoiceEntityAggregate."No." := SalesHeader."No.";
      SalesInvoiceEntityAggregate.FIND;
    END;

    [External]
    PROCEDURE PropagateOnModify@16(VAR SalesInvoiceEntityAggregate@1000 : Record 5475;VAR TempFieldBuffer@1004 : TEMPORARY Record 8450);
    VAR
      SalesHeader@1001 : Record 36;
      TypeHelper@1002 : Codeunit 10;
      TargetRecordRef@1005 : RecordRef;
      Exists@1003 : Boolean;
    BEGIN
      IF SalesInvoiceEntityAggregate.ISTEMPORARY OR (NOT GraphMgtGeneralTools.IsApiEnabled) THEN
        EXIT;

      IF SalesInvoiceEntityAggregate.Posted THEN
        ERROR(CannotModifyPostedInvioceErr);

      Exists := SalesHeader.GET(SalesHeader."Document Type"::Invoice,SalesInvoiceEntityAggregate."No.");
      IF Exists THEN
        TargetRecordRef.GETTABLE(SalesHeader)
      ELSE
        TargetRecordRef.OPEN(DATABASE::"Sales Header");

      TypeHelper.TransferFieldsWithValidate(TempFieldBuffer,SalesInvoiceEntityAggregate,TargetRecordRef);

      TargetRecordRef.SETTABLE(SalesHeader);
      SalesHeader.CopySellToAddressToBillToAddress;

      IF Exists THEN
        SalesHeader.MODIFY(TRUE)
      ELSE BEGIN
        SalesHeader.SetDefaultPaymentServices;
        SalesHeader.INSERT(TRUE);
      END;
    END;

    [External]
    PROCEDURE PropagateOnDelete@17(VAR SalesInvoiceEntityAggregate@1000 : Record 5475);
    VAR
      SalesInvoiceHeader@1001 : Record 112;
      SalesHeader@1002 : Record 36;
      GraphMgtGeneralTools@1003 : Codeunit 5465;
    BEGIN
      IF SalesInvoiceEntityAggregate.ISTEMPORARY OR (NOT GraphMgtGeneralTools.IsApiEnabled) THEN
        EXIT;

      IF SalesInvoiceEntityAggregate.Posted THEN BEGIN
        IF NOT SalesInvoiceHeader.GET(SalesInvoiceEntityAggregate."No.") THEN BEGIN
          GraphMgtGeneralTools.CleanAggregateWithoutParent(SalesInvoiceEntityAggregate);
          EXIT;
        END;

        IF SalesInvoiceHeader."No. Printed" = 0 THEN
          SalesInvoiceHeader."No. Printed" := 1;
        SalesInvoiceHeader.DELETE(TRUE);
      END ELSE BEGIN
        IF NOT SalesHeader.GET(SalesHeader."Document Type"::Invoice,SalesInvoiceEntityAggregate."No.") THEN BEGIN
          GraphMgtGeneralTools.CleanAggregateWithoutParent(SalesInvoiceEntityAggregate);
          EXIT;
        END;

        SalesHeader.DELETE(TRUE);
      END;
    END;

    [External]
    PROCEDURE UpdateAggregateTableRecords@35();
    VAR
      SalesHeader@1000 : Record 36;
      SalesInvoiceHeader@1001 : Record 112;
      SalesInvoiceEntityAggregate@1002 : Record 5475;
    BEGIN
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Invoice);
      IF SalesHeader.FINDSET THEN
        REPEAT
          InsertOrModifyFromSalesHeader(SalesHeader);
        UNTIL SalesHeader.NEXT = 0;

      IF SalesInvoiceHeader.FINDSET THEN
        REPEAT
          InsertOrModifyFromSalesInvoiceHeader(SalesInvoiceHeader);
        UNTIL SalesInvoiceHeader.NEXT = 0;

      SalesInvoiceEntityAggregate.SETRANGE(Posted,FALSE);
      IF SalesInvoiceEntityAggregate.FINDSET(TRUE,FALSE) THEN
        REPEAT
          IF NOT SalesHeader.GET(SalesHeader."Document Type"::Invoice,SalesInvoiceEntityAggregate."No.") THEN
            SalesInvoiceEntityAggregate.DELETE(TRUE);
        UNTIL SalesInvoiceEntityAggregate.NEXT = 0;

      SalesInvoiceEntityAggregate.SETRANGE(Posted,TRUE);
      IF SalesInvoiceEntityAggregate.FINDSET(TRUE,FALSE) THEN
        REPEAT
          IF NOT SalesInvoiceHeader.GET(SalesInvoiceEntityAggregate."No.") THEN
            SalesInvoiceEntityAggregate.DELETE(TRUE);
        UNTIL SalesInvoiceEntityAggregate.NEXT = 0;
    END;

    LOCAL PROCEDURE InsertOrModifyFromSalesHeader@39(VAR SalesHeader@1000 : Record 36);
    VAR
      SalesInvoiceEntityAggregate@1002 : Record 5475;
      RecordExists@1001 : Boolean;
    BEGIN
      SalesInvoiceEntityAggregate.LOCKTABLE;
      RecordExists := SalesInvoiceEntityAggregate.GET(SalesHeader."No.",FALSE);

      SalesInvoiceEntityAggregate.TRANSFERFIELDS(SalesHeader,TRUE);
      SalesInvoiceEntityAggregate.Posted := FALSE;

      CASE SalesHeader.Status OF
        SalesHeader.Status::"Pending Approval":
          SalesInvoiceEntityAggregate.Status := SalesInvoiceEntityAggregate.Status::"In Review";
        SalesHeader.Status::Released,SalesHeader.Status::"Pending Prepayment":
          SalesInvoiceEntityAggregate.Status := SalesInvoiceEntityAggregate.Status::Open;
        ELSE
          SalesInvoiceEntityAggregate.Status := SalesInvoiceEntityAggregate.Status::Draft;
      END;

      AssignTotalsFromSalesHeader(SalesHeader,SalesInvoiceEntityAggregate);
      SalesInvoiceEntityAggregate.UpdateReferencedRecordIds;

      IF RecordExists THEN
        SalesInvoiceEntityAggregate.MODIFY(TRUE)
      ELSE
        SalesInvoiceEntityAggregate.INSERT(TRUE);
    END;

    LOCAL PROCEDURE InsertOrModifyFromSalesInvoiceHeader@42(VAR SalesInvoiceHeader@1000 : Record 112);
    VAR
      SalesInvoiceEntityAggregate@1002 : Record 5475;
      RecordExists@1001 : Boolean;
    BEGIN
      SalesInvoiceEntityAggregate.LOCKTABLE;
      RecordExists := SalesInvoiceEntityAggregate.GET(SalesInvoiceHeader."No.",TRUE);
      SalesInvoiceEntityAggregate.TRANSFERFIELDS(SalesInvoiceHeader,TRUE);
      SalesInvoiceEntityAggregate.Posted := TRUE;
      SetStatusOptionFromSalesInvoiceHeader(SalesInvoiceHeader,SalesInvoiceEntityAggregate);
      AssignTotalsFromSalesInvoiceHeader(SalesInvoiceHeader,SalesInvoiceEntityAggregate);
      SalesInvoiceEntityAggregate.UpdateReferencedRecordIds;

      IF RecordExists THEN
        SalesInvoiceEntityAggregate.MODIFY(TRUE)
      ELSE
        SalesInvoiceEntityAggregate.INSERT(TRUE);
    END;

    LOCAL PROCEDURE SetStatusOptionFromSalesInvoiceHeader@9(VAR SalesInvoiceHeader@1000 : Record 112;VAR SalesInvoiceEntityAggregate@1001 : Record 5475);
    BEGIN
      SalesInvoiceHeader.CALCFIELDS(Cancelled,Closed,Corrective);
      IF SalesInvoiceHeader.Cancelled THEN BEGIN
        SalesInvoiceEntityAggregate.Status := SalesInvoiceEntityAggregate.Status::Canceled;
        EXIT;
      END;

      IF SalesInvoiceHeader.Corrective THEN BEGIN
        SalesInvoiceEntityAggregate.Status := SalesInvoiceEntityAggregate.Status::Corrective;
        EXIT;
      END;

      IF SalesInvoiceHeader.Closed THEN BEGIN
        SalesInvoiceEntityAggregate.Status := SalesInvoiceEntityAggregate.Status::Paid;
        EXIT;
      END;

      SalesInvoiceEntityAggregate.Status := SalesInvoiceEntityAggregate.Status::Open;
    END;

    LOCAL PROCEDURE SetStatusOptionFromCustLedgerEntry@19(VAR CustLedgerEntry@1000 : Record 21);
    VAR
      SalesInvoiceEntityAggregate@1001 : Record 5475;
    BEGIN
      IF NOT GraphMgtGeneralTools.IsApiEnabled THEN
        EXIT;

      SalesInvoiceEntityAggregate.SETRANGE("Cust. Ledger Entry No.",CustLedgerEntry."Entry No.");
      SalesInvoiceEntityAggregate.SETRANGE(Posted,TRUE);

      IF NOT SalesInvoiceEntityAggregate.FINDSET(TRUE) THEN
        EXIT;

      REPEAT
        UpdateStatusIfChanged(SalesInvoiceEntityAggregate);
      UNTIL SalesInvoiceEntityAggregate.NEXT = 0;
    END;

    LOCAL PROCEDURE SetStatusOptionFromCancelledDocument@30(VAR CancelledDocument@1000 : Record 1900);
    VAR
      SalesInvoiceEntityAggregate@1001 : Record 5475;
    BEGIN
      IF NOT GraphMgtGeneralTools.IsApiEnabled THEN
        EXIT;

      CASE CancelledDocument."Source ID" OF
        DATABASE::"Sales Invoice Header":
          IF NOT SalesInvoiceEntityAggregate.GET(CancelledDocument."Cancelled Doc. No.",TRUE) THEN
            EXIT;
        DATABASE::"Sales Cr.Memo Header":
          IF NOT SalesInvoiceEntityAggregate.GET(CancelledDocument."Cancelled By Doc. No.",TRUE) THEN
            EXIT;
        ELSE
          EXIT;
      END;

      UpdateStatusIfChanged(SalesInvoiceEntityAggregate);
    END;

    [External]
    PROCEDURE SetTaxGroupIdAndCode@32(VAR SalesInvoiceLineAggregate@1000 : Record 5476;TaxGroupCode@1001 : Code[20];VATProductPostingGroupCode@1005 : Code[20];VATIdentifier@1006 : Code[20]);
    VAR
      TaxGroup@1004 : Record 321;
      VATProductPostingGroup@1003 : Record 324;
      GeneralLedgerSetup@1002 : Record 98;
    BEGIN
      IF GeneralLedgerSetup.UseVat THEN BEGIN
        SalesInvoiceLineAggregate."Tax Code" := VATIdentifier;
        IF VATProductPostingGroup.GET(VATProductPostingGroupCode) THEN
          SalesInvoiceLineAggregate."Tax Id" := VATProductPostingGroup.Id;
      END ELSE BEGIN
        SalesInvoiceLineAggregate."Tax Code" := TaxGroupCode;
        IF TaxGroup.GET(TaxGroupCode) THEN
          SalesInvoiceLineAggregate."Tax Id" := TaxGroup.Id;
      END;
    END;

    [External]
    PROCEDURE UpdateUnitOfMeasure@43(VAR Item@1004 : Record 27;JSONUnitOfMeasureTxt@1001 : Text);
    VAR
      TempFieldSet@1000 : TEMPORARY Record 2000000041;
      GraphCollectionMgtItem@1003 : Codeunit 5470;
      ItemModified@1005 : Boolean;
    BEGIN
      GraphCollectionMgtItem.UpdateOrCreateItemUnitOfMeasureFromSalesDocument(JSONUnitOfMeasureTxt,Item,TempFieldSet,ItemModified);

      IF ItemModified THEN
        Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateStatusIfChanged@33(VAR SalesInvoiceEntityAggregate@1000 : Record 5475);
    VAR
      SalesInvoiceHeader@1001 : Record 112;
      CurrentStatus@1002 : Option;
    BEGIN
      SalesInvoiceHeader.GET(SalesInvoiceEntityAggregate."No.");
      CurrentStatus := SalesInvoiceEntityAggregate.Status;

      SetStatusOptionFromSalesInvoiceHeader(SalesInvoiceHeader,SalesInvoiceEntityAggregate);
      IF CurrentStatus <> SalesInvoiceEntityAggregate.Status THEN
        SalesInvoiceEntityAggregate.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE AssignTotalsFromSalesHeader@58(VAR SalesHeader@1000 : Record 36;VAR SalesInvoiceEntityAggregate@1001 : Record 5475);
    VAR
      SalesLine@1006 : Record 37;
    BEGIN
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");

      IF NOT SalesLine.FINDFIRST THEN BEGIN
        BlankTotals(SalesLine."Document No.",FALSE);
        EXIT;
      END;

      AssignTotalsFromSalesLine(SalesLine,SalesInvoiceEntityAggregate,SalesHeader);
    END;

    LOCAL PROCEDURE AssignTotalsFromSalesInvoiceHeader@69(VAR SalesInvoiceHeader@1000 : Record 112;VAR SalesInvoiceEntityAggregate@1001 : Record 5475);
    VAR
      SalesInvoiceLine@1006 : Record 113;
    BEGIN
      SalesInvoiceLine.SETRANGE("Document No.",SalesInvoiceHeader."No.");

      IF NOT SalesInvoiceLine.FINDFIRST THEN BEGIN
        BlankTotals(SalesInvoiceLine."Document No.",TRUE);
        EXIT;
      END;

      AssignTotalsFromSalesInvoiceLine(SalesInvoiceLine,SalesInvoiceEntityAggregate);
    END;

    LOCAL PROCEDURE AssignTotalsFromSalesLine@76(VAR SalesLine@1000 : Record 37;VAR SalesInvoiceEntityAggregate@1001 : Record 5475;VAR SalesHeader@1002 : Record 36);
    VAR
      TotalSalesLine@1003 : Record 37;
      DocumentTotals@1004 : Codeunit 57;
      VATAmount@1005 : Decimal;
    BEGIN
      IF SalesLine."VAT Calculation Type" = SalesLine."VAT Calculation Type"::"Sales Tax" THEN BEGIN
        SalesInvoiceEntityAggregate."Discount Applied Before Tax" := TRUE;
        SalesInvoiceEntityAggregate."Prices Including VAT" := FALSE;
      END ELSE
        SalesInvoiceEntityAggregate."Discount Applied Before Tax" := NOT SalesHeader."Prices Including VAT";

      DocumentTotals.CalculateSalesTotals(TotalSalesLine,VATAmount,SalesLine);

      SalesInvoiceEntityAggregate."Invoice Discount Amount" := TotalSalesLine."Inv. Discount Amount";
      SalesInvoiceEntityAggregate.Amount := TotalSalesLine.Amount;
      SalesInvoiceEntityAggregate."Total Tax Amount" := VATAmount;
      SalesInvoiceEntityAggregate."Subtotal Amount" := TotalSalesLine."Line Amount";
      SalesInvoiceEntityAggregate."Amount Including VAT" := TotalSalesLine."Amount Including VAT";
    END;

    LOCAL PROCEDURE AssignTotalsFromSalesInvoiceLine@75(VAR SalesInvoiceLine@1000 : Record 113;VAR SalesInvoiceEntityAggregate@1001 : Record 5475);
    VAR
      SalesInvoiceHeader@1003 : Record 112;
      TotalSalesInvoiceHeader@1006 : Record 112;
      TotalSalesInvoiceLine@1005 : Record 113;
      DocumentTotals@1004 : Codeunit 57;
      VATAmount@1002 : Decimal;
    BEGIN
      IF SalesInvoiceLine."VAT Calculation Type" = SalesInvoiceLine."VAT Calculation Type"::"Sales Tax" THEN
        SalesInvoiceEntityAggregate."Discount Applied Before Tax" := TRUE
      ELSE BEGIN
        SalesInvoiceHeader.GET(SalesInvoiceLine."Document No.");
        SalesInvoiceEntityAggregate."Discount Applied Before Tax" := NOT SalesInvoiceHeader."Prices Including VAT";
      END;

      DocumentTotals.CalculatePostedSalesInvoiceTotals(TotalSalesInvoiceHeader,VATAmount,SalesInvoiceLine);

      SalesInvoiceEntityAggregate."Invoice Discount Amount" := TotalSalesInvoiceHeader."Invoice Discount Amount";
      SalesInvoiceEntityAggregate.Amount := TotalSalesInvoiceHeader.Amount;
      SalesInvoiceEntityAggregate."Total Tax Amount" := VATAmount;

      TotalSalesInvoiceLine.SETRANGE("Document No.",SalesInvoiceLine."Document No.");
      TotalSalesInvoiceLine.CALCSUMS("Line Amount");
      SalesInvoiceEntityAggregate."Subtotal Amount" := TotalSalesInvoiceLine."Line Amount";
      SalesInvoiceEntityAggregate."Amount Including VAT" := TotalSalesInvoiceHeader."Amount Including VAT";
    END;

    LOCAL PROCEDURE BlankTotals@25(DocumentNo@1000 : Code[20];Posted@1001 : Boolean);
    VAR
      SalesInvoiceEntityAggregate@1002 : Record 5475;
    BEGIN
      IF NOT SalesInvoiceEntityAggregate.GET(DocumentNo,Posted) THEN
        EXIT;

      SalesInvoiceEntityAggregate."Invoice Discount Amount" := 0;
      SalesInvoiceEntityAggregate."Total Tax Amount" := 0;
      SalesInvoiceEntityAggregate."Subtotal Amount" := 0;
      SalesInvoiceEntityAggregate.Amount := 0;
      SalesInvoiceEntityAggregate."Amount Including VAT" := 0;
      SalesInvoiceEntityAggregate.MODIFY;
    END;

    LOCAL PROCEDURE CheckValidRecord@8(VAR SalesHeader@1000 : Record 36) : Boolean;
    BEGIN
      IF SalesHeader.ISTEMPORARY THEN
        EXIT(FALSE);

      IF SalesHeader."Document Type" <> SalesHeader."Document Type"::Invoice THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ModifyTotalsSalesLine@12(VAR SalesLine@1000 : Record 37;RecalculateInvoiceDisc@1002 : Boolean);
    VAR
      SalesInvoiceEntityAggregate@1001 : Record 5475;
      SalesHeader@1003 : Record 36;
    BEGIN
      IF NOT RecalculateInvoiceDisc THEN
        EXIT;

      IF NOT SalesInvoiceEntityAggregate.GET(SalesLine."Document No.",FALSE) THEN
        EXIT;

      IF NOT SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.") THEN
        EXIT;

      AssignTotalsFromSalesLine(SalesLine,SalesInvoiceEntityAggregate,SalesHeader);
      SalesInvoiceEntityAggregate.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE TransferSalesInvoiceLineAggregateToSalesLine@37(VAR SalesInvoiceLineAggregate@1000 : Record 5476;VAR SalesLine@1001 : Record 37;VAR TempFieldBuffer@1002 : TEMPORARY Record 8450);
    VAR
      TypeHelper@1004 : Codeunit 10;
      SalesLineRecordRef@1003 : RecordRef;
    BEGIN
      SalesLine."Document Type" := SalesLine."Document Type"::Invoice;

      SalesLineRecordRef.GETTABLE(SalesLine);

      TypeHelper.TransferFieldsWithValidate(TempFieldBuffer,SalesInvoiceLineAggregate,SalesLineRecordRef);
      SalesLineRecordRef.SETTABLE(SalesLine);
    END;

    LOCAL PROCEDURE TransferIntegrationRecordID@10(VAR SalesHeader@1000 : Record 36);
    VAR
      SalesInvoiceEntityAggregate@1006 : Record 5475;
      SalesInvoiceHeader@1001 : Record 112;
      NewIntegrationRecord@1002 : Record 5151;
      OldIntegrationRecord@1003 : Record 5151;
      IntegrationManagement@1004 : Codeunit 5150;
      SalesInvoiceHeaderRecordRef@1005 : RecordRef;
      IsRenameAllowed@1007 : Boolean;
    BEGIN
      IF ISNULLGUID(SalesHeader.Id) THEN
        EXIT;

      SalesInvoiceHeader.SETRANGE("Pre-Assigned No.",SalesHeader."No.");
      IF NOT SalesInvoiceHeader.FINDFIRST THEN
        EXIT;

      IF SalesInvoiceHeader.Id = SalesHeader.Id THEN
        EXIT;

      IF OldIntegrationRecord.GET(SalesHeader.Id) THEN
        OldIntegrationRecord.DELETE;

      IF NewIntegrationRecord.GET(SalesInvoiceHeader.Id) THEN
        NewIntegrationRecord.DELETE;

      IF SalesInvoiceEntityAggregate.GET(SalesInvoiceHeader."No.",TRUE) THEN
        SalesInvoiceEntityAggregate.DELETE(TRUE);

      IF SalesInvoiceEntityAggregate.GET(SalesHeader."No.",FALSE) THEN BEGIN
        IsRenameAllowed := SalesInvoiceEntityAggregate.GetIsRenameAllowed;
        SalesInvoiceEntityAggregate.SetIsRenameAllowed(TRUE);
        SalesInvoiceEntityAggregate.RENAME(SalesInvoiceHeader."No.",TRUE);
        SalesInvoiceEntityAggregate.SetIsRenameAllowed(IsRenameAllowed);
      END;

      SalesInvoiceHeader.Id := SalesHeader.Id;
      SalesInvoiceHeader.MODIFY(TRUE);
      SalesInvoiceHeaderRecordRef.GETTABLE(SalesInvoiceHeader);

      IntegrationManagement.InsertUpdateIntegrationRecord(SalesInvoiceHeaderRecordRef,CURRENTDATETIME);
    END;

    [External]
    PROCEDURE RedistributeInvoiceDiscounts@31(VAR SalesInvoiceEntityAggregate@1002 : Record 5475);
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      IF SalesInvoiceEntityAggregate.Posted THEN
        EXIT;

      SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Invoice);
      SalesLine.SETRANGE("Document No.",SalesInvoiceEntityAggregate."No.");
      SalesLine.SETRANGE("Recalculate Invoice Disc.",TRUE);
      IF SalesLine.FINDFIRST THEN
        CODEUNIT.RUN(CODEUNIT::"Sales - Calc Discount By Type",SalesLine);

      SalesInvoiceEntityAggregate.FIND;
    END;

    [External]
    PROCEDURE LoadLines@1(VAR SalesInvoiceLineAggregate@1000 : Record 5476;DocumentIdFilter@1007 : Text);
    VAR
      SalesInvoiceEntityAggregate@1004 : Record 5475;
    BEGIN
      IF DocumentIdFilter = '' THEN
        ERROR(DocumentIDNotSpecifiedForLinesErr);

      SalesInvoiceEntityAggregate.SETFILTER(Id,DocumentIdFilter);
      IF NOT SalesInvoiceEntityAggregate.FINDFIRST THEN
        EXIT;

      IF SalesInvoiceEntityAggregate.Posted THEN
        LoadSalesInvoiceLines(SalesInvoiceLineAggregate,SalesInvoiceEntityAggregate)
      ELSE
        LoadSalesLines(SalesInvoiceLineAggregate,SalesInvoiceEntityAggregate);
    END;

    LOCAL PROCEDURE LoadSalesInvoiceLines@4(VAR SalesInvoiceLineAggregate@1001 : Record 5476;VAR SalesInvoiceEntityAggregate@1000 : Record 5475);
    VAR
      SalesInvoiceLine@1002 : Record 113;
    BEGIN
      SalesInvoiceLine.SETRANGE("Document No.",SalesInvoiceEntityAggregate."No.");

      IF SalesInvoiceLine.FINDSET(FALSE,FALSE) THEN
        REPEAT
          CLEAR(SalesInvoiceLineAggregate);
          SalesInvoiceLineAggregate.TRANSFERFIELDS(SalesInvoiceLine,TRUE);
          SalesInvoiceLineAggregate."Document Id" := SalesInvoiceEntityAggregate.Id;
          SalesInvoiceLineAggregate.Id := GetIdFromDocumentIdAndSequence(SalesInvoiceEntityAggregate.Id,SalesInvoiceLine."Line No.");
          SetTaxGroupIdAndCode(
            SalesInvoiceLineAggregate,
            SalesInvoiceLine."Tax Group Code",
            SalesInvoiceLine."VAT Prod. Posting Group",
            SalesInvoiceLine."VAT Identifier");
          SalesInvoiceLineAggregate."VAT %" := SalesInvoiceLine."VAT %";
          SalesInvoiceLineAggregate."Tax Amount" := SalesInvoiceLine."Amount Including VAT" - SalesInvoiceLine."VAT Base Amount";
          SalesInvoiceLineAggregate."Currency Code" := SalesInvoiceLine.GetCurrencyCode;
          SalesInvoiceLineAggregate."Prices Including Tax" := SalesInvoiceEntityAggregate."Prices Including VAT";
          SalesInvoiceLineAggregate.SetDiscountValue;
          SalesInvoiceLineAggregate.UpdateReferencedRecordIds;
          UpdateLineAmountsFromSalesInvoiceLine(SalesInvoiceLineAggregate,SalesInvoiceLine);
          SalesInvoiceLineAggregate.INSERT(TRUE);
        UNTIL SalesInvoiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE LoadSalesLines@38(VAR SalesInvoiceLineAggregate@1002 : Record 5476;VAR SalesInvoiceEntityAggregate@1000 : Record 5475);
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Invoice);
      SalesLine.SETRANGE("Document No.",SalesInvoiceEntityAggregate."No.");

      IF SalesLine.FINDSET(FALSE,FALSE) THEN
        REPEAT
          TransferFromSalesLine(SalesInvoiceLineAggregate,SalesInvoiceEntityAggregate,SalesLine);
          SalesInvoiceLineAggregate.INSERT(TRUE);
        UNTIL SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE TransferFromSalesLine@40(VAR SalesInvoiceLineAggregate@1002 : Record 5476;VAR SalesInvoiceEntityAggregate@1000 : Record 5475;VAR SalesLine@1001 : Record 37);
    BEGIN
      TransferFromSalesLineToAggregateLine(
        SalesInvoiceLineAggregate,SalesLine,SalesInvoiceEntityAggregate.Id,SalesInvoiceEntityAggregate."Prices Including VAT");
    END;

    [External]
    PROCEDURE TransferFromSalesLineToAggregateLine@101(VAR SalesInvoiceLineAggregate@1002 : Record 5476;VAR SalesLine@1001 : Record 37;DocumentId@1000 : GUID;PricesIncludingVAT@1003 : Boolean);
    BEGIN
      CLEAR(SalesInvoiceLineAggregate);
      SalesInvoiceLineAggregate.TRANSFERFIELDS(SalesLine,TRUE);
      SalesInvoiceLineAggregate.Id := GetIdFromDocumentIdAndSequence(DocumentId,SalesLine."Line No.");
      SalesInvoiceLineAggregate."Document Id" := DocumentId;
      SetTaxGroupIdAndCode(
        SalesInvoiceLineAggregate,
        SalesLine."Tax Group Code",
        SalesLine."VAT Prod. Posting Group",
        SalesLine."VAT Identifier");
      SalesInvoiceLineAggregate."VAT %" := SalesLine."VAT %";
      SalesInvoiceLineAggregate."Tax Amount" := SalesLine."Amount Including VAT" - SalesLine."VAT Base Amount";
      SalesInvoiceLineAggregate."Prices Including Tax" := PricesIncludingVAT;
      SalesInvoiceLineAggregate.SetDiscountValue;
      SalesInvoiceLineAggregate.UpdateReferencedRecordIds;
      UpdateLineAmountsFromSalesLine(SalesInvoiceLineAggregate,SalesLine);
    END;

    [External]
    PROCEDURE PropagateInsertLine@7(VAR SalesInvoiceLineAggregate@1000 : Record 5476;VAR TempFieldBuffer@1005 : TEMPORARY Record 8450);
    VAR
      SalesInvoiceEntityAggregate@1001 : Record 5475;
      SalesLine@1002 : Record 37;
      LastUsedSalesLine@1004 : Record 37;
    BEGIN
      VerifyCRUDIsPossibleForLine(SalesInvoiceLineAggregate,SalesInvoiceEntityAggregate);

      SalesLine."Document Type" := SalesLine."Document Type"::Invoice;
      SalesLine."Document No." := SalesInvoiceEntityAggregate."No.";

      IF SalesInvoiceLineAggregate."Line No." = 0 THEN BEGIN
        LastUsedSalesLine.SETRANGE("Document No.",SalesInvoiceEntityAggregate."No.");
        LastUsedSalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Invoice);
        IF LastUsedSalesLine.FINDLAST THEN
          SalesInvoiceLineAggregate."Line No." := LastUsedSalesLine."Line No." + 10000
        ELSE
          SalesInvoiceLineAggregate."Line No." := 10000;

        SalesLine."Line No." := SalesInvoiceLineAggregate."Line No.";
      END ELSE
        IF SalesLine.GET(SalesLine."Document Type"::Invoice,SalesInvoiceEntityAggregate."No.",SalesInvoiceLineAggregate."Line No.") THEN
          ERROR(CannotInsertALineThatAlreadyExistsErr);

      TransferSalesInvoiceLineAggregateToSalesLine(SalesInvoiceLineAggregate,SalesLine,TempFieldBuffer);
      SalesLine.INSERT(TRUE);

      IF NOT SkipUpdateDiscounts THEN
        RedistributeInvoiceDiscounts(SalesInvoiceEntityAggregate);

      SalesLine.FIND;
      TransferFromSalesLine(SalesInvoiceLineAggregate,SalesInvoiceEntityAggregate,SalesLine);
    END;

    [External]
    PROCEDURE PropagateModifyLine@24(VAR SalesInvoiceLineAggregate@1000 : Record 5476;VAR TempFieldBuffer@1004 : TEMPORARY Record 8450);
    VAR
      SalesInvoiceEntityAggregate@1001 : Record 5475;
      SalesLine@1002 : Record 37;
    BEGIN
      VerifyCRUDIsPossibleForLine(SalesInvoiceLineAggregate,SalesInvoiceEntityAggregate);

      IF NOT SalesLine.GET(SalesLine."Document Type"::Invoice,SalesInvoiceEntityAggregate."No.",SalesInvoiceLineAggregate."Line No.") THEN
        ERROR(CannotModifyALineThatDoesntExistErr);

      TransferSalesInvoiceLineAggregateToSalesLine(SalesInvoiceLineAggregate,SalesLine,TempFieldBuffer);

      SalesLine.MODIFY(TRUE);

      IF NOT SkipUpdateDiscounts THEN
        RedistributeInvoiceDiscounts(SalesInvoiceEntityAggregate);

      SalesLine.FIND;
      TransferFromSalesLine(SalesInvoiceLineAggregate,SalesInvoiceEntityAggregate,SalesLine);
    END;

    [External]
    PROCEDURE PropagateDeleteLine@6(VAR SalesInvoiceLineAggregate@1000 : Record 5476);
    VAR
      SalesInvoiceEntityAggregate@1003 : Record 5475;
      SalesLine@1002 : Record 37;
    BEGIN
      VerifyCRUDIsPossibleForLine(SalesInvoiceLineAggregate,SalesInvoiceEntityAggregate);

      IF SalesLine.GET(SalesLine."Document Type"::Invoice,SalesInvoiceEntityAggregate."No.",SalesInvoiceLineAggregate."Line No.") THEN BEGIN
        SalesLine.DELETE(TRUE);
        IF NOT SkipUpdateDiscounts THEN
          RedistributeInvoiceDiscounts(SalesInvoiceEntityAggregate);
      END;
    END;

    [External]
    PROCEDURE PropagateMultipleLinesUpdate@65(VAR TempNewSalesInvoiceLineAggregate@1000 : TEMPORARY Record 5476);
    VAR
      TempCurrentSalesInvoiceLineAggregate@1005 : TEMPORARY Record 5476;
      SalesInvoiceEntityAggregate@1001 : Record 5475;
      SalesLine@1002 : Record 37;
      TempAllFieldBuffer@1003 : TEMPORARY Record 8450;
      NativeEDMTypes@1004 : Codeunit 2801;
    BEGIN
      VerifyCRUDIsPossibleForLine(TempNewSalesInvoiceLineAggregate,SalesInvoiceEntityAggregate);
      NativeEDMTypes.GetFieldSetBufferWithAllFieldsSet(TempAllFieldBuffer);

      IF NOT TempNewSalesInvoiceLineAggregate.FINDFIRST THEN BEGIN
        SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Invoice);
        SalesLine.SETRANGE("Document No.",SalesInvoiceEntityAggregate."No.");
        SalesLine.DELETEALL(TRUE);
        EXIT;
      END;

      LoadLines(TempCurrentSalesInvoiceLineAggregate,SalesInvoiceEntityAggregate.Id);

      SkipUpdateDiscounts := TRUE;

      // Remove deleted lines
      IF TempCurrentSalesInvoiceLineAggregate.FINDSET(TRUE,FALSE) THEN
        REPEAT
          IF NOT TempNewSalesInvoiceLineAggregate.GET(SalesInvoiceEntityAggregate.Id,TempCurrentSalesInvoiceLineAggregate."Line No.") THEN
            PropagateDeleteLine(TempCurrentSalesInvoiceLineAggregate);
        UNTIL TempCurrentSalesInvoiceLineAggregate.NEXT = 0;

      // Update Lines
      TempNewSalesInvoiceLineAggregate.FINDFIRST;

      REPEAT
        IF NOT TempCurrentSalesInvoiceLineAggregate.GET(
             TempNewSalesInvoiceLineAggregate."Document Id",TempNewSalesInvoiceLineAggregate."Line No.")
        THEN
          PropagateInsertLine(TempNewSalesInvoiceLineAggregate,TempAllFieldBuffer)
        ELSE
          PropagateModifyLine(TempNewSalesInvoiceLineAggregate,TempAllFieldBuffer);
      UNTIL TempNewSalesInvoiceLineAggregate.NEXT = 0;

      SalesInvoiceEntityAggregate.FIND;
    END;

    LOCAL PROCEDURE VerifyCRUDIsPossibleForLine@60(VAR SalesInvoiceLineAggregate@1001 : Record 5476;VAR SalesInvoiceEntityAggregate@1000 : Record 5475);
    VAR
      SearchSalesInvoiceEntityAggregate@1002 : Record 5475;
      DocumentIDFilter@1003 : Text;
    BEGIN
      IF ISNULLGUID(SalesInvoiceLineAggregate."Document Id") THEN BEGIN
        DocumentIDFilter := SalesInvoiceLineAggregate.GETFILTER("Document Id");
        IF DocumentIDFilter = '' THEN
          ERROR(DocumentIDNotSpecifiedForLinesErr);
        SalesInvoiceEntityAggregate.SETFILTER(Id,DocumentIDFilter);
      END ELSE
        SalesInvoiceEntityAggregate.SETRANGE(Id,SalesInvoiceLineAggregate."Document Id");

      IF NOT SalesInvoiceEntityAggregate.FINDFIRST THEN
        ERROR(DocumentDoesNotExistErr);

      SearchSalesInvoiceEntityAggregate.COPY(SalesInvoiceEntityAggregate);
      IF SearchSalesInvoiceEntityAggregate.NEXT <> 0 THEN
        ERROR(MultipleDocumentsFoundForIdErr);

      IF SalesInvoiceEntityAggregate.Posted THEN
        ERROR(CannotModifyPostedInvioceErr);
    END;

    LOCAL PROCEDURE UpdateLineAmountsFromSalesLine@44(VAR SalesInvoiceLineAggregate@1000 : Record 5476;VAR SalesLine@1001 : Record 37);
    BEGIN
      SalesInvoiceLineAggregate."Line Amount Excluding Tax" := SalesLine.GetLineAmountExclVAT;
      SalesInvoiceLineAggregate."Line Amount Including Tax" := SalesLine.GetLineAmountInclVAT;
      SalesInvoiceLineAggregate."Line Tax Amount" :=
        SalesInvoiceLineAggregate."Line Amount Including Tax" - SalesInvoiceLineAggregate."Line Amount Excluding Tax";
      UpdateInvoiceDiscountAmount(SalesInvoiceLineAggregate);
    END;

    LOCAL PROCEDURE UpdateLineAmountsFromSalesInvoiceLine@49(VAR SalesInvoiceLineAggregate@1000 : Record 5476;VAR SalesInvoiceLine@1001 : Record 113);
    BEGIN
      SalesInvoiceLineAggregate."Line Amount Excluding Tax" := SalesInvoiceLine.GetLineAmountExclVAT;
      SalesInvoiceLineAggregate."Line Amount Including Tax" := SalesInvoiceLine.GetLineAmountInclVAT;
      SalesInvoiceLineAggregate."Line Tax Amount" :=
        SalesInvoiceLineAggregate."Line Amount Including Tax" - SalesInvoiceLineAggregate."Line Amount Excluding Tax";
      UpdateInvoiceDiscountAmount(SalesInvoiceLineAggregate);
    END;

    [External]
    PROCEDURE UpdateInvoiceDiscountAmount@48(VAR SalesInvoiceLineAggregate@1000 : Record 5476);
    BEGIN
      IF SalesInvoiceLineAggregate."Prices Including Tax" THEN
        SalesInvoiceLineAggregate."Inv. Discount Amount Excl. VAT" :=
          SalesInvoiceLineAggregate."Line Amount Excluding Tax" - SalesInvoiceLineAggregate.Amount
      ELSE
        SalesInvoiceLineAggregate."Inv. Discount Amount Excl. VAT" := SalesInvoiceLineAggregate."Inv. Discount Amount";
    END;

    [External]
    PROCEDURE VerifyCanUpdateUOM@45(VAR SalesInvoiceLineAggregate@1000 : Record 5476);
    BEGIN
      IF SalesInvoiceLineAggregate."API Type" <> SalesInvoiceLineAggregate."API Type"::Item THEN
        ERROR(CanOnlySetUOMForTypeItemErr);
    END;

    LOCAL PROCEDURE CheckValidLineRecord@41(VAR SalesLine@1000 : Record 37) : Boolean;
    BEGIN
      IF SalesLine.ISTEMPORARY THEN
        EXIT(FALSE);

      IF NOT GraphMgtGeneralTools.IsApiEnabled THEN
        EXIT(FALSE);

      IF SalesLine."Document Type" <> SalesLine."Document Type"::Invoice THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE GetIdFromDocumentIdAndSequence@46(DocumentId@1000 : GUID;Sequence@1001 : Integer) : Text[50];
    VAR
      GraphMgtGeneralTools@1002 : Codeunit 5465;
    BEGIN
      EXIT(LOWERCASE(GraphMgtGeneralTools.StripBrackets(FORMAT(DocumentId))) + '-' + FORMAT(Sequence));
    END;

    BEGIN
    END.
  }
}

