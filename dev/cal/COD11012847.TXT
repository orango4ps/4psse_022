OBJECT Codeunit 11012847 Service Preclosure Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ProgressDialog@1100528600 : Dialog;
      Text000@1100528601 : TextConst 'DEU=Fortsetzung: @1@@@@@@@@@@@@@@@;ENU=Progress: @1@@@@@@@@@@@@@@@;NLD=Voortgang: @1@@@@@@@@@@@@@@@;NOR=Fremdrift: @1@@@@@@@@@@@@@@@;SVE=F”rlopp: @1@@@@@@@@@@@@@@@';

    PROCEDURE CreatePreclosureControl@1100528610(IServiceContractPreclosure@1100528605 : Record 11071776;ICreateServiceControl@1100525000 : Boolean;VAR IServiceContract@1100525001 : Record 11012812);
    VAR
      ServiceContract@1100528601 : Record 11012812;
      ServiceContractPreclLine@1100525002 : Record 11071777;
      CreateServiceControl@1100528603 : Codeunit 11012845;
      ServiceContractCount@1100528600 : Integer;
      ServiceContractCounter@1100528602 : Integer;
    BEGIN
      IServiceContractPreclosure.TESTFIELD(Posted, FALSE);
      IServiceContractPreclosure.TESTFIELD("Prognosis Fixed", FALSE);
      IServiceContractPreclosure.TESTFIELD("Period Ending Date");

      ServiceContract.COPY(IServiceContract);
      ServiceContract.SETRANGE(Status, ServiceContract.Status::Order, ServiceContract.Status::"Invoicing Allowed");
      ServiceContract.SETFILTER("Starting Date", '<>%1', 0D);
      ServiceContract.SETFILTER("Contract Form", '<>%1', ServiceContract."Contract Form"::"Framework Contract");
      IF NOT ServiceContract.FINDSET THEN
        EXIT;

      ServiceContractCount := ServiceContract.COUNT;
      ProgressDialog.OPEN(Text000);
      REPEAT
        ProgressDialog.UPDATE(1, ROUND(ServiceContractCounter / ServiceContractCount * 10000, 1));
        IF NOT IsSCUsedOnOtherSeqn(IServiceContractPreclosure."Reporting Date", ServiceContract."No.", IServiceContractPreclosure."Seq. No.") AND ICreateServiceControl THEN
          CreateServiceControl.CreateControlWithLog(
            ServiceContract, IServiceContractPreclosure."Reporting Date", IServiceContractPreclosure."Reporting Time", TRUE);
        ServiceContract.CALCFIELDS("No. of Control Messages");
        IF ServiceContract."No. of Control Messages" = 0 THEN BEGIN
          DeleteSCPreclosureLines(IServiceContractPreclosure, ServiceContract."No.");
          IF CreateSCPreclosureLine(
            IServiceContractPreclosure."Reporting Date",
            IServiceContractPreclosure."Seq. No.",
            IServiceContractPreclosure."Period Ending Date",
            IServiceContractPreclosure.GetControlPeriodFilterText, ServiceContract."No.",
            ServiceContractPreclLine)
          THEN BEGIN
            IF NOT CreateSCPreclosureCtrlDetail(IServiceContractPreclosure."Reporting Date",
              IServiceContractPreclosure."Seq. No.", ServiceContract."No.",
              IServiceContractPreclosure."Period Ending Date")
            THEN
              ServiceContractPreclLine.DELETE(TRUE);
          END;
        END;
        ServiceContractCounter += 1;
      UNTIL ServiceContract.NEXT = 0;
      ProgressDialog.CLOSE;
    END;

    PROCEDURE CreateSCPreclosureLine@1100528605(IReportingDate@1100528602 : Date;ISeqNo@1100525000 : Integer;IPeriodEndingDate@1100528601 : Date;IControlPeriodFilter@1100528600 : Text[250];IServiceContractNo@1100528604 : Code[20];VAR OServiceContractPreclLine@1100525001 : Record 11071777) : Boolean;
    VAR
      ServiceContractPreclLine@1100528603 : Record 11071777;
      ServiceContract@1100528605 : Record 11012812;
    BEGIN
      ServiceContract.GET(IServiceContractNo);

      ServiceContractPreclLine."Reporting Date" := IReportingDate;
      ServiceContractPreclLine."Seq. No." := ISeqNo;
      ServiceContractPreclLine."Period Ending Date" := IPeriodEndingDate;
      ServiceContractPreclLine."Service Contract No." := IServiceContractNo;
      ServiceContractPreclLine."Contract Manager" := ServiceContract."Contract Manager";
      ServiceContractPreclLine."Contract Group" := ServiceContract."Contract Group";
      ServiceContractPreclLine."Customer No." := ServiceContract."Customer No.";
      ServiceContractPreclLine."Global Dimension 1 Code" := ServiceContract."Global Dimension 1 Code";
      OServiceContractPreclLine := ServiceContractPreclLine;
      EXIT(ServiceContractPreclLine.INSERT(TRUE));
    END;

    PROCEDURE CreateSCPreclosureCtrlDetail@1100528600(IReportingDate@1100528606 : Date;ISeqNo@1100525000 : Integer;IServiceContractNo@1100528601 : Code[20];IPeriodEndingDate@1100528607 : Date) : Boolean;
    VAR
      ServiceContractCtrlPeriod@1100528602 : Record 11071746;
      ServiceContrPreclDetail@1100528605 : Record 11071767;
      PrevServiceContrPreclDetail@1210190001 : Record 11071767;
      ServiceContractControl@1100528609 : Record 11071762;
      ServiceContract@1100528610 : Record 11012812;
      ServiceSetup@1210190000 : Record 11012800;
      CreateServiceControl@1100528600 : Codeunit 11012845;
      ControlPeriodEndingDate@1100528604 : Date;
      DetailLinesCreated@1100525001 : Boolean;
      ClosedRevenue@1100528611 : Decimal;
    BEGIN
      ServiceContractCtrlPeriod.SETRANGE("Service Contract No.", IServiceContractNo);
      ServiceContractCtrlPeriod.SETRANGE("Date Finished", 0D);
      ServiceContractCtrlPeriod.SETFILTER("Starting Date", '..%1', IPeriodEndingDate);
      ControlPeriodEndingDate := ServiceContractCtrlPeriod.GETRANGEMAX("Starting Date");
      IF NOT ServiceContractCtrlPeriod.FINDSET THEN
        EXIT;

      ServiceContract.GET(IServiceContractNo);
      REPEAT
        IF NOT IsUsedOnOtherSeqNo(IReportingDate, ServiceContract."No.", ServiceContractCtrlPeriod.Code, ISeqNo) THEN BEGIN
          ServiceContrPreclDetail."Reporting Date" := IReportingDate;
          ServiceContrPreclDetail."Seq. No." := ISeqNo;
          ServiceContrPreclDetail."Period Ending Date" := IPeriodEndingDate;
          ServiceContrPreclDetail."Service Contract No." := IServiceContractNo;
          ServiceContrPreclDetail."Contract Manager" := ServiceContract."Contract Manager";
          ServiceContrPreclDetail."Contract Group" := ServiceContract."Contract Group";
          ServiceContrPreclDetail."Customer No." := ServiceContract."Customer No.";
          ServiceContrPreclDetail."Global Dimension 1 Code" := ServiceContract."Global Dimension 1 Code";
          ServiceContrPreclDetail."Contract Control Period Code" := ServiceContractCtrlPeriod.Code;
          IF ControlPeriodEndingDate < ServiceContractCtrlPeriod."Ending Date" THEN
            ServiceContrPreclDetail."Effective Period Ending Date" := ControlPeriodEndingDate
          ELSE
            ServiceContrPreclDetail."Effective Period Ending Date" := ServiceContractCtrlPeriod."Ending Date";
          ServiceContractControl.SETRANGE("Service Contract No.", IServiceContractNo);
          ServiceContractControl.SETRANGE("Control Period Code", ServiceContractCtrlPeriod.Code);
          ServiceContractControl.SETFILTER("Reporting Date", '<=%1', IReportingDate);
          IF NOT ServiceContractControl.FINDLAST THEN
            EXIT;
          ServiceContrPreclDetail."SC Control Reporting Date" := ServiceContractControl."Reporting Date";

          ServiceContractControl."Save Contract Control" := TRUE;
          ServiceContractControl.MODIFY;

          ServiceContrPreclDetail."Invoiced Revenue" :=
            CreateServiceControl.CalculateRevenueContract(
              ServiceContract."No.", ServiceContractCtrlPeriod."Starting Date", ServiceContrPreclDetail."Effective Period Ending Date", ClosedRevenue);
          ServiceContrPreclDetail."Invoiced Revenue (Calls)" :=
            ROUND(
              ServiceContrPreclDetail."Invoiced Revenue" *
              ServiceContract.GetPercentageShareCalls(ServiceContrPreclDetail."Effective Period Ending Date") / 100);
          ServiceContrPreclDetail."Invoiced Revenue (Maint.)" :=
            ServiceContrPreclDetail."Invoiced Revenue" - ServiceContrPreclDetail."Invoiced Revenue (Calls)";

          ServiceContrPreclDetail.SetAllPeriodFilters;
          ServiceContrPreclDetail.CALCFIELDS("Budget Revenue (Maintenance)", "Budget Revenue (Calls)", "Budget Revenue (Add.)",
            "Budget Cost (Maintenance)", "Budget Cost (Calls)", "Budget Cost (Add.)");

          GetSCPrognosis(ServiceContrPreclDetail);

          ServiceContrPreclDetail."Posting Date" := IPeriodEndingDate; //mg.c, 05-01-12: M32017

          ServiceSetup.GET;
          CASE ServiceSetup."Prognosis Method" OF
            ServiceSetup."Prognosis Method"::"Calculated Value":
              BEGIN
                ServiceContrPreclDetail."Progn. Total Revenue (Maint.)" := ServiceContrPreclDetail."Calc. Progn. Tot. Rev. (Maint)";
                ServiceContrPreclDetail."Progn. Total Revenue (Calls)" := ServiceContrPreclDetail."Calc. Progn. Tot. Rev. (Calls)";
                ServiceContrPreclDetail."Progn. Total Revenue (Add.)" := ServiceContrPreclDetail."Calc. Progn. Tot. Rev. (Add.)";
                ServiceContrPreclDetail."Progn. Total Revenue" := ServiceContrPreclDetail."Calc. Prognosis Total Revenue";

                ServiceContrPreclDetail."Progn. Total Cost (Maint.)" := ServiceContrPreclDetail."Calc. Progn. Tot. Cost (Maint)";
                ServiceContrPreclDetail."Progn. Total Cost (Calls)" := ServiceContrPreclDetail."Calc. Progn. Tot. Cost (Calls)";
                ServiceContrPreclDetail."Progn. Total Cost (Add.)" := ServiceContrPreclDetail."Calc. Progn. Tot. Cost (Add.)";
                ServiceContrPreclDetail."Progn. Total Cost" := ServiceContrPreclDetail."Calc. Prognosis Total Cost";
              END;
            ServiceSetup."Prognosis Method"::"Previous Value":
              BEGIN
                PrevServiceContrPreclDetail := ServiceContrPreclDetail;
                PrevServiceContrPreclDetail.SETRECFILTER;
                PrevServiceContrPreclDetail.SETRANGE("Period Ending Date");
                PrevServiceContrPreclDetail.SETFILTER("Reporting Date", '<%1', ServiceContrPreclDetail."Reporting Date");
                IF PrevServiceContrPreclDetail.FINDLAST THEN BEGIN
                  ServiceContrPreclDetail."Progn. Total Revenue (Maint.)" := PrevServiceContrPreclDetail."Progn. Total Revenue (Maint.)";
                  ServiceContrPreclDetail."Progn. Total Revenue (Calls)" := PrevServiceContrPreclDetail."Progn. Total Revenue (Calls)";
                  ServiceContrPreclDetail."Progn. Total Revenue (Add.)" := PrevServiceContrPreclDetail."Progn. Total Revenue (Add.)";
                  ServiceContrPreclDetail."Progn. Total Revenue" := PrevServiceContrPreclDetail."Progn. Total Revenue";

                  ServiceContrPreclDetail."Progn. Total Cost (Maint.)" := PrevServiceContrPreclDetail."Progn. Total Cost (Maint.)";
                  ServiceContrPreclDetail."Progn. Total Cost (Calls)" := PrevServiceContrPreclDetail."Progn. Total Cost (Calls)";
                  ServiceContrPreclDetail."Progn. Total Cost (Add.)" := PrevServiceContrPreclDetail."Progn. Total Cost (Add.)";
                  ServiceContrPreclDetail."Progn. Total Cost" := PrevServiceContrPreclDetail."Progn. Total Cost";
                END;
              END;
          END;

          ServiceContrPreclDetail.VALIDATE("Calculated Progress % (Maint.)", GetProgressByEffFilter(ServiceContrPreclDetail, 0));
          ServiceContrPreclDetail.VALIDATE("Calculated Progress % (Calls)", GetProgressByEffFilter(ServiceContrPreclDetail, 1));
          ServiceContrPreclDetail.VALIDATE("Calculated Progress % (Add.)", GetProgressByEffFilter(ServiceContrPreclDetail, 2));
          ServiceContrPreclDetail.INSERT(TRUE);
          DetailLinesCreated := TRUE;
        END;
      UNTIL ServiceContractCtrlPeriod.NEXT = 0;
      EXIT(DetailLinesCreated);
    END;

    LOCAL PROCEDURE GetSCPrognosis@1100528602(VAR IOServiceContrPreclDetail@1100528602 : Record 11071767);
    VAR
      ServiceContract@1100528600 : Record 11012812;
      CreateServControl@1100528601 : Codeunit 11012845;
      HoursPrognosis@1100528605 : Decimal;
      PrognosisEndDec@1100528606 : Decimal;
      BudgetRate@1100528607 : Decimal;
      AverageRateDec@1100528608 : Decimal;
      HoursPrognosisEndResult@1100528609 : Decimal;
      PrognosisEndResult@1100528610 : Decimal;
      HoursPrognosisCallsDec@1100528611 : Decimal;
      PrognosisEndCallsDec@1100528612 : Decimal;
      BudgetRateCalls@1100528613 : Decimal;
      AverageRateDecCalls@1100528614 : Decimal;
      HoursPrognosisEndResultCalls@1100528615 : Decimal;
      PrognosisEndResultCalls@1100528616 : Decimal;
      PrognosisEndAddDec@1100528624 : Decimal;
      BudgetRateAdd@1100528623 : Decimal;
      AverageRateDecAdd@1100528622 : Decimal;
      HoursPrognosisAddDec@1100528603 : Decimal;
      HoursPrognosisEndResultAdd@1100528621 : Decimal;
      PrognosisEndResultAdd@1100528620 : Decimal;
    BEGIN
      IOServiceContrPreclDetail.SetAllPeriodFilters;
      ServiceContract.GET(IOServiceContrPreclDetail."Service Contract No.");
      IF ServiceContract."Budget Based on" = ServiceContract."Budget Based on"::"Maintenance Scheme" THEN BEGIN
        IOServiceContrPreclDetail.CALCFIELDS(
          "Budget Hours (Maintenance)", "Allowed Hours (Maintenance)", "Actual Hours (Maintenance)",
          "Actual Labor Cost (Maint.)", "Actual Cost (Maintenance)",
          "Budget Cost (Maintenance)","Budget Labor (Maintenance)");

        IOServiceContrPreclDetail.CALCFIELDS(
          "Budget Hours (Calls)","Allowed Hours (Calls)","Actual Hours (Calls)",
          "Actual Labor Cost (Calls)","Actual Cost (Calls)",
          "Budget Cost (Calls)","Budget Labor (Calls)");

        IOServiceContrPreclDetail.CALCFIELDS(
          "Budget Hours (Add.)", "Allowed Hours (Add.)","Actual Hours (Add.)",
          "Actual Labor Cost (Add.)", "Actual Cost (Add.)",
          "Budget Cost (Add.)","Budget Labor (Add.)");

        CreateServControl.CalcPrognosisAndAverageRate(
          IOServiceContrPreclDetail."Budget Hours (Maintenance)", IOServiceContrPreclDetail."Allowed Hours (Maintenance)",
          IOServiceContrPreclDetail."Actual Hours (Maintenance)", IOServiceContrPreclDetail."Actual Labor Cost (Maint.)",
          IOServiceContrPreclDetail."Actual Cost (Maintenance)", IOServiceContrPreclDetail."Budget Cost (Maintenance)",
          IOServiceContrPreclDetail."Budget Labor (Maintenance)", HoursPrognosis, PrognosisEndDec,
          BudgetRate, AverageRateDec, HoursPrognosisEndResult, PrognosisEndResult);
        IOServiceContrPreclDetail."Calc. Progn. Tot. Cost (Maint)" := PrognosisEndDec;

        CreateServControl.CalcPrognosisAndAverageRate(
          IOServiceContrPreclDetail."Budget Hours (Calls)", IOServiceContrPreclDetail."Allowed Hours (Calls)",
          IOServiceContrPreclDetail."Actual Hours (Calls)", IOServiceContrPreclDetail."Actual Labor Cost (Calls)",
          IOServiceContrPreclDetail."Actual Cost (Calls)", IOServiceContrPreclDetail."Budget Cost (Calls)",
          IOServiceContrPreclDetail."Budget Labor (Calls)", HoursPrognosisCallsDec, PrognosisEndCallsDec,
          BudgetRateCalls, AverageRateDecCalls, HoursPrognosisEndResultCalls, PrognosisEndResultCalls);
        IOServiceContrPreclDetail."Calc. Progn. Tot. Cost (Calls)" := PrognosisEndCallsDec;

        CreateServControl.CalcPrognosisAndAverageRate(
          IOServiceContrPreclDetail."Budget Hours (Add.)", IOServiceContrPreclDetail."Allowed Hours (Add.)",
          IOServiceContrPreclDetail."Actual Hours (Add.)", IOServiceContrPreclDetail."Actual Labor Cost (Add.)",
          IOServiceContrPreclDetail."Actual Cost (Add.)", IOServiceContrPreclDetail."Budget Cost (Add.)",
          IOServiceContrPreclDetail."Budget Labor (Add.)", HoursPrognosisAddDec, PrognosisEndAddDec,
          BudgetRateAdd, AverageRateDecAdd, HoursPrognosisEndResultAdd, PrognosisEndResultAdd);
        IOServiceContrPreclDetail."Calc. Progn. Tot. Cost (Add.)" := PrognosisEndAddDec;

        IOServiceContrPreclDetail.VALIDATE("Calc. Progn. Tot. Rev. (Maint)", IOServiceContrPreclDetail."Budget Revenue (Maintenance)");
        IOServiceContrPreclDetail.VALIDATE("Calc. Progn. Tot. Rev. (Calls)", IOServiceContrPreclDetail."Budget Revenue (Calls)");
        IOServiceContrPreclDetail.VALIDATE("Calc. Progn. Tot. Rev. (Add.)", IOServiceContrPreclDetail."Budget Revenue (Add.)");
      END ELSE BEGIN
        IOServiceContrPreclDetail.CALCFIELDS(
          "Actual Cost (Maintenance)", "Actual Cost (Calls)", "Actual Cost (Add.)", "Revenue (Additional)");
        IOServiceContrPreclDetail.CALCFIELDS(
          "Prognosis Labor (Maint.)", "Prognosis Other (Maint.)", "Prognosis Revenue (Maint.)",
          "Prognosis Labor (Calls)", "Prognosis Other (Calls)", "Prognosis Revenue (Calls)",
          "Prognosis Labor (Add.)", "Prognosis Other (Add.)", "Prognosis Revenue (Add.)");

        IOServiceContrPreclDetail.VALIDATE("Calc. Progn. Tot. Cost (Maint)",
          IOServiceContrPreclDetail."Actual Cost (Maintenance)" +
          IOServiceContrPreclDetail."Prognosis Labor (Maint.)" + IOServiceContrPreclDetail."Prognosis Other (Maint.)");
        IOServiceContrPreclDetail.VALIDATE("Calc. Progn. Tot. Cost (Calls)",
          IOServiceContrPreclDetail."Actual Cost (Calls)" +
          IOServiceContrPreclDetail."Prognosis Labor (Calls)" + IOServiceContrPreclDetail."Prognosis Other (Calls)");
        IOServiceContrPreclDetail.VALIDATE("Calc. Progn. Tot. Cost (Add.)",
          IOServiceContrPreclDetail."Actual Cost (Add.)" +
          IOServiceContrPreclDetail."Prognosis Labor (Add.)" + IOServiceContrPreclDetail."Prognosis Other (Add.)");

        IOServiceContrPreclDetail.VALIDATE("Calc. Progn. Tot. Rev. (Maint)",
          IOServiceContrPreclDetail."Invoiced Revenue (Maint.)" + IOServiceContrPreclDetail."Prognosis Revenue (Maint.)");
        IOServiceContrPreclDetail.VALIDATE("Calc. Progn. Tot. Rev. (Calls)",
          IOServiceContrPreclDetail."Invoiced Revenue (Calls)" + IOServiceContrPreclDetail."Prognosis Revenue (Calls)");
        IOServiceContrPreclDetail.VALIDATE("Calc. Progn. Tot. Rev. (Add.)",
          IOServiceContrPreclDetail."Revenue (Additional)" + IOServiceContrPreclDetail."Prognosis Revenue (Add.)");
      END;
    END;

    PROCEDURE GetProgressByEffFilter@1100528604(IServiceContrPreclDetail@1100528600 : Record 11071767;IType@1100525000 : 'Maintenance,Calls,Additional,,,,Overall') OProgress : Decimal;
    VAR
      ServiceContract@1100528601 : Record 11012812;
      Date@1100528602 : Record 2000000007;
      NoOfDaysPast@1100528603 : Integer;
    BEGIN
      IServiceContrPreclDetail.SetAllPeriodFilters;
      ServiceContract.GET(IServiceContrPreclDetail."Service Contract No.");
      CASE ServiceContract."Calc. Progress Perc. Progn/Res" OF
        ServiceContract."Calc. Progress Perc. Progn/Res"::"Allowed Hours":
          CASE IType OF
            IType::Maintenance:
              BEGIN
                IServiceContrPreclDetail.CALCFIELDS("Budget Hours (Maintenance)", "Allowed Hours (Maintenance)");
                IF IServiceContrPreclDetail."Budget Hours (Maintenance)" <> 0 THEN
                  OProgress :=
                    IServiceContrPreclDetail."Allowed Hours (Maintenance)" / IServiceContrPreclDetail."Budget Hours (Maintenance)" * 100;
              END;
            IType::Calls:
              BEGIN
                IServiceContrPreclDetail.CALCFIELDS("Budget Hours (Calls)", "Allowed Hours (Calls)");
                IF IServiceContrPreclDetail."Budget Hours (Calls)" <> 0 THEN
                  OProgress :=
                    IServiceContrPreclDetail."Allowed Hours (Calls)" / IServiceContrPreclDetail."Budget Hours (Calls)" * 100;
              END;
            IType::Additional:
              OProgress := 100;
            IType::Overall:
              BEGIN
                IServiceContrPreclDetail.CALCFIELDS(
                  "Budget Hours (Maintenance)", "Allowed Hours (Maintenance)", "Budget Hours (Calls)", "Allowed Hours (Calls)", "Budget Hours (Add.)");
                IF (IServiceContrPreclDetail."Budget Hours (Maintenance)" + IServiceContrPreclDetail."Budget Hours (Calls)" + IServiceContrPreclDetail."Budget Hours (Add.)") <> 0 THEN
                  OProgress :=
                    (IServiceContrPreclDetail."Allowed Hours (Maintenance)" + IServiceContrPreclDetail."Allowed Hours (Calls)" + IServiceContrPreclDetail."Budget Hours (Add.)") /
                    (IServiceContrPreclDetail."Budget Hours (Maintenance)" + IServiceContrPreclDetail."Budget Hours (Calls)" + IServiceContrPreclDetail."Budget Hours (Add.)") * 100;
              END;
          END;
        ServiceContract."Calc. Progress Perc. Progn/Res"::"Actual Cost":
          BEGIN
            IF ServiceContract."Budget Based on" IN
              [ServiceContract."Budget Based on"::Category, ServiceContract."Budget Based on"::"Category + Maintenance Scheme"]
            THEN
              IServiceContrPreclDetail.SETRANGE("Type Cost Filter", IServiceContrPreclDetail."Type Cost Filter"::Cost);
            CASE IType OF
              IType::Maintenance:
                BEGIN
                  IServiceContrPreclDetail.CALCFIELDS("Actual Cost (Maintenance)");
                  IF IServiceContrPreclDetail."Progn. Total Cost (Maint.)" <> 0 THEN
                    OProgress :=
                      IServiceContrPreclDetail."Actual Cost (Maintenance)" /
                      IServiceContrPreclDetail."Progn. Total Cost (Maint.)" * 100;
                END;
              IType::Calls:
                BEGIN
                  IServiceContrPreclDetail.CALCFIELDS("Actual Cost (Calls)");
                  IF IServiceContrPreclDetail."Progn. Total Cost (Calls)" <> 0 THEN
                    OProgress :=
                      IServiceContrPreclDetail."Actual Cost (Calls)" /
                      IServiceContrPreclDetail."Progn. Total Cost (Calls)" * 100;
                END;
              IType::Additional:
                BEGIN
                  IServiceContrPreclDetail.CALCFIELDS("Actual Cost (Add.)");
                  IF IServiceContrPreclDetail."Progn. Total Cost (Add.)" <> 0 THEN
                    OProgress :=
                      IServiceContrPreclDetail."Actual Cost (Add.)" /
                      IServiceContrPreclDetail."Progn. Total Cost (Add.)" * 100;
                END;
              IType::Overall:
                BEGIN
                  IServiceContrPreclDetail.CALCFIELDS("Actual Cost (Maintenance)", "Actual Cost (Calls)", "Actual Cost (Add.)");
                  IF IServiceContrPreclDetail."Progn. Total Cost" <> 0 THEN
                    OProgress :=
                      (IServiceContrPreclDetail."Progn. Total Cost (Maint.)" * IServiceContrPreclDetail."Calculated Progress % (Maint.)" / 100 +
                       IServiceContrPreclDetail."Progn. Total Cost (Calls)" * IServiceContrPreclDetail."Calculated Progress % (Calls)" / 100 +
                       IServiceContrPreclDetail."Progn. Total Cost (Add.)" * IServiceContrPreclDetail."Calculated Progress % (Add.)" / 100) /
                      (IServiceContrPreclDetail."Progn. Total Cost (Maint.)" + IServiceContrPreclDetail."Progn. Total Cost (Calls)" + IServiceContrPreclDetail."Progn. Total Cost (Add.)") * 100;
                END;
            END;
            IServiceContrPreclDetail.SETRANGE("Type Cost Filter");
          END;
        ServiceContract."Calc. Progress Perc. Progn/Res"::"Elapsed Time":
          BEGIN
            OProgress := 0;
            IF IType = IType::Overall THEN BEGIN
              Date.SETRANGE("Period Type", Date."Period Type"::Date);
              Date.SETFILTER("Period Start", IServiceContrPreclDetail.GetEffContractControlPeriodFilterText);
              IF TODAY < IServiceContrPreclDetail."Period Ending Date" THEN
                Date.SETRANGE("Period Start", Date.GETRANGEMIN("Period Start"), TODAY);
              NoOfDaysPast := Date.COUNT;
              Date.SETFILTER("Period Start", IServiceContrPreclDetail.GetContractControlPeriodFilterText);
              OProgress := NoOfDaysPast / Date.COUNT * 100;
            END;
          END;
      END;
      IF OProgress > 100 THEN
        OProgress := 100;
    END;

    PROCEDURE GetProgressPercByGivenProgressPercs@1100528607(IServiceContrPreclDetail@1100528600 : Record 11071767) OProgress : Decimal;
    VAR
      ServiceContract@1100528601 : Record 11012812;
    BEGIN
      IServiceContrPreclDetail.SetAllPeriodFilters;
      ServiceContract.GET(IServiceContrPreclDetail."Service Contract No.");
      CASE ServiceContract."Calc. Progress Perc. Progn/Res" OF
        ServiceContract."Calc. Progress Perc. Progn/Res"::"Allowed Hours":
          BEGIN
            IServiceContrPreclDetail.CALCFIELDS(
              "Budget Hours (Maintenance)", "Budget Hours (Calls)", "Budget Hours (Add.)", "Allowed Hours (Maintenance)", "Allowed Hours (Calls)");
            IF IServiceContrPreclDetail."Budget Hours (Maintenance)" + IServiceContrPreclDetail."Budget Hours (Calls)" + IServiceContrPreclDetail."Budget Hours (Add.)" <> 0 THEN
              OProgress :=
                (IServiceContrPreclDetail."Budget Hours (Maintenance)" * IServiceContrPreclDetail."Progress % (Maint.)" / 100 +
                 IServiceContrPreclDetail."Budget Hours (Calls)" * IServiceContrPreclDetail."Progress % (Calls)" / 100 +
                 IServiceContrPreclDetail."Budget Hours (Add.)" * IServiceContrPreclDetail."Progress % (Add.)" / 100) /
                (IServiceContrPreclDetail."Budget Hours (Maintenance)" + IServiceContrPreclDetail."Budget Hours (Calls)" + IServiceContrPreclDetail."Budget Hours (Add.)") * 100;
          END;
        ServiceContract."Calc. Progress Perc. Progn/Res"::"Actual Cost":
          BEGIN
            IF IServiceContrPreclDetail."Progn. Total Cost (Maint.)" + IServiceContrPreclDetail."Progn. Total Cost (Calls)" + IServiceContrPreclDetail."Progn. Total Cost (Add.)" <> 0 THEN
              OProgress :=
                (IServiceContrPreclDetail."Progn. Total Cost (Maint.)" * IServiceContrPreclDetail."Progress % (Maint.)" / 100 +
                 IServiceContrPreclDetail."Progn. Total Cost (Calls)" * IServiceContrPreclDetail."Progress % (Calls)" / 100 +
                 IServiceContrPreclDetail."Progn. Total Cost (Add.)" * IServiceContrPreclDetail."Progress % (Add.)" / 100) /
                (IServiceContrPreclDetail."Progn. Total Cost (Maint.)" + IServiceContrPreclDetail."Progn. Total Cost (Calls)" + IServiceContrPreclDetail."Progn. Total Cost (Add.)") * 100;
          END;
        ServiceContract."Calc. Progress Perc. Progn/Res"::"Elapsed Time":
          BEGIN
            OProgress := IServiceContrPreclDetail."Calculated Progress %";
          END;
      END;
      IF OProgress > 100 THEN
        OProgress := 100;
    END;

    PROCEDURE DeleteSCPreclosureLines@1100528603(IServiceContractPreclosure@1100528600 : Record 11071776;IServiceContractNo@1100525000 : Code[20]);
    VAR
      ServiceContractPreclLine@1100528601 : Record 11071777;
    BEGIN
      ServiceContractPreclLine.SETRANGE("Reporting Date", IServiceContractPreclosure."Reporting Date");
      ServiceContractPreclLine.SETRANGE("Seq. No.", IServiceContractPreclosure."Seq. No.");
      ServiceContractPreclLine.SETRANGE("Service Contract No.", IServiceContractNo);
      ServiceContractPreclLine.DELETEALL(TRUE);
    END;

    PROCEDURE CopyCalcPrognosisTotals@1100409001(VAR IServiceContrPreclDetail@1100409000 : Record 11071767);
    VAR
      ServiceContrPreclDetail@1100528600 : Record 11071767;
    BEGIN
      ServiceContrPreclDetail.COPY(IServiceContrPreclDetail);
      ServiceContrPreclDetail.SETRANGE(Posted, FALSE);
      IF ServiceContrPreclDetail.FINDFIRST THEN
        REPEAT
          ServiceContrPreclDetail."Progn. Total Revenue (Maint.)" := ServiceContrPreclDetail."Calc. Progn. Tot. Rev. (Maint)";
          ServiceContrPreclDetail."Progn. Total Revenue (Calls)" := ServiceContrPreclDetail."Calc. Progn. Tot. Rev. (Calls)";
          ServiceContrPreclDetail."Progn. Total Revenue (Add.)" := ServiceContrPreclDetail."Calc. Progn. Tot. Rev. (Add.)";
          ServiceContrPreclDetail."Progn. Total Revenue" := ServiceContrPreclDetail."Calc. Prognosis Total Revenue";

          ServiceContrPreclDetail.VALIDATE("Progn. Total Cost (Maint.)", ServiceContrPreclDetail."Calc. Progn. Tot. Cost (Maint)");
          ServiceContrPreclDetail.VALIDATE("Progn. Total Cost (Calls)", ServiceContrPreclDetail."Calc. Progn. Tot. Cost (Calls)");
          ServiceContrPreclDetail.VALIDATE("Progn. Total Cost (Add.)", ServiceContrPreclDetail."Calc. Progn. Tot. Cost (Add.)");
          ServiceContrPreclDetail."Progn. Total Cost" := ServiceContrPreclDetail."Calc. Prognosis Total Cost";

          ServiceContrPreclDetail.UpdateResults;
          ServiceContrPreclDetail.MODIFY(TRUE);
        UNTIL ServiceContrPreclDetail.NEXT = 0;
    END;

    PROCEDURE CopyPrevPrognosisTotals@1210190000(VAR IServiceContrPreclDetail@1100409000 : Record 11071767);
    VAR
      ServiceContrPreclDetail@1100528600 : Record 11071767;
      PrevServiceContrPreclDetail@1210190000 : Record 11071767;
    BEGIN
      ServiceContrPreclDetail.COPY(IServiceContrPreclDetail);
      ServiceContrPreclDetail.SETRANGE(Posted, FALSE);
      IF ServiceContrPreclDetail.FINDFIRST THEN
        REPEAT
          PrevServiceContrPreclDetail := ServiceContrPreclDetail;
          PrevServiceContrPreclDetail.SETRECFILTER;
          PrevServiceContrPreclDetail.SETRANGE("Period Ending Date");
          PrevServiceContrPreclDetail.SETFILTER("Reporting Date", '<%1', ServiceContrPreclDetail."Reporting Date");
          IF PrevServiceContrPreclDetail.FINDLAST THEN BEGIN
            ServiceContrPreclDetail."Progn. Total Revenue (Maint.)" := PrevServiceContrPreclDetail."Progn. Total Revenue (Maint.)";
            ServiceContrPreclDetail."Progn. Total Revenue (Calls)" := PrevServiceContrPreclDetail."Progn. Total Revenue (Calls)";
            ServiceContrPreclDetail."Progn. Total Revenue (Add.)" := PrevServiceContrPreclDetail."Progn. Total Revenue (Add.)";
            ServiceContrPreclDetail."Progn. Total Revenue" := PrevServiceContrPreclDetail."Progn. Total Revenue";

            ServiceContrPreclDetail.VALIDATE("Progn. Total Cost (Maint.)", PrevServiceContrPreclDetail."Progn. Total Cost (Maint.)");
            ServiceContrPreclDetail.VALIDATE("Progn. Total Cost (Calls)", PrevServiceContrPreclDetail."Progn. Total Cost (Calls)");
            ServiceContrPreclDetail.VALIDATE("Progn. Total Cost (Add.)", PrevServiceContrPreclDetail."Progn. Total Cost (Add.)");
            ServiceContrPreclDetail."Progn. Total Cost" := PrevServiceContrPreclDetail."Progn. Total Cost";

            ServiceContrPreclDetail.UpdateResults;
            ServiceContrPreclDetail.MODIFY(TRUE);
          END;
        UNTIL ServiceContrPreclDetail.NEXT = 0;
    END;

    PROCEDURE CopyCalcPreclosureTotals@1100409000(VAR IServiceContrPreclDetail@1100409000 : Record 11071767);
    VAR
      ServiceContrPreclDetail@1100528600 : Record 11071767;
    BEGIN
      ServiceContrPreclDetail.COPY(IServiceContrPreclDetail);
      ServiceContrPreclDetail.SETRANGE(Posted, FALSE);
      IF ServiceContrPreclDetail.FINDFIRST THEN
        REPEAT
          ServiceContrPreclDetail."Preclosure Revenue" := ServiceContrPreclDetail."Calculated Preclosure Revenue";
          ServiceContrPreclDetail."Preclosure Cost" := ServiceContrPreclDetail."Calculated Preclosure Cost";
          ServiceContrPreclDetail."Preclosure Result" := ServiceContrPreclDetail."Calculated Preclosure Result";

          ServiceContrPreclDetail.UpdateResults;
          ServiceContrPreclDetail.MODIFY(TRUE);
        UNTIL ServiceContrPreclDetail.NEXT = 0;
    END;

    LOCAL PROCEDURE IsSCUsedOnOtherSeqn@1100528606(IReportingDate@1100528601 : Date;IServiceContractNo@1100528600 : Code[20];ISeqNo@1100528603 : Integer) : Boolean;
    VAR
      ServiceContractPreclLine@1100528602 : Record 11071777;
    BEGIN
      ServiceContractPreclLine.SETRANGE("Reporting Date", IReportingDate);
      ServiceContractPreclLine.SETRANGE("Service Contract No.", IServiceContractNo);
      ServiceContractPreclLine.SETFILTER("Seq. No.", '<>%1', ISeqNo);
      EXIT(NOT ServiceContractPreclLine.ISEMPTY);
    END;

    LOCAL PROCEDURE IsUsedOnOtherSeqNo@1100528601(IReportingDate@1100528601 : Date;IServiceContractNo@1100528600 : Code[20];ISCCtrlPeriodCode@1100528603 : Code[10];ISeqNo@1100528604 : Integer) : Boolean;
    VAR
      ServiceContrPreclDetail@1100528602 : Record 11071767;
    BEGIN
      ServiceContrPreclDetail.SETRANGE("Reporting Date", IReportingDate);
      ServiceContrPreclDetail.SETRANGE("Service Contract No.", IServiceContractNo);
      ServiceContrPreclDetail.SETRANGE("Contract Control Period Code", ISCCtrlPeriodCode);
      ServiceContrPreclDetail.SETFILTER("Seq. No.", '<>%1', ISeqNo);
      EXIT(NOT ServiceContrPreclDetail.ISEMPTY);
    END;

    BEGIN
    END.
  }
}

