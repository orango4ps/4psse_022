OBJECT Report 11229288 Split Sales Invoice Amount
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    Permissions=TableData 21=rm;
    CaptionML=[DEU=Verteilen Verkaufsrechnungsbetrag;
               ENU=Split Sales Invoice Amount;
               NLD=Verdelen verkoopfactuurbedrag];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  GLSetup.GET;
                  CheckDates;
                  CheckCustLedgerEntry;
                  IF SplitBy = SplitBy::NoOfInstallments THEN BEGIN
                    CheckNoOfInstallments(TRUE);
                    CalcAmountPerInstallment(TRUE);
                    CheckAmountPerInstallment(TRUE);
                  END ELSE BEGIN
                    CheckAmountPerInstallment(TRUE);
                    CalcAmountPerInstallment(FALSE);
                    CheckNoOfInstallments(TRUE);
                  END;
                  ProcessCustLedgerEntry;
                END;

  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnOpenPage=BEGIN
                   CheckCustLedgerEntry;
                   PostingDate := CustLedgerEntry."Posting Date";
                   FirstDueDate := CustLedgerEntry."Due Date";
                   NoOfInstallments := 1;
                   OldNoOfInstallments := NoOfInstallments;
                   CalcAmountPerInstallment(TRUE);
                   NoOfInstallmentsEditable := TRUE;
                   AmountPerInstallmentEditable := TRUE;
                   SplitBy := SplitBy::NoOfInstallments;
                 END;

    }
    CONTROLS
    {
      { 1100529600;;Container;
                  ContainerType=ContentArea }

      { 1100529601;1;Group  ;
                  CaptionML=[DEU=Optionen;
                             ENU=Options;
                             NLD=Opties;
                             SVE=Alternativ];
                  GroupType=Group }

      { 1100529602;2;Field  ;
                  Name=NoOfInstallments;
                  CaptionML=[DEU=Anzahl Raten;
                             ENU=Number of installments;
                             NLD=Aantal termijnen];
                  SourceExpr=NoOfInstallments;
                  Editable=NoOfInstallmentsEditable;
                  OnValidate=BEGIN
                               CheckNoOfInstallments(FALSE);
                               CalcAmountPerInstallment(TRUE);
                               CheckAmountPerInstallment(FALSE);
                               AmountPerInstallmentEditable := NoOfInstallments = 1;
                               SplitBy := SplitBy::NoOfInstallments;
                               OldNoOfInstallments := NoOfInstallments;
                             END;
                              }

      { 1100529603;2;Field  ;
                  Name=AmountPerInstallment;
                  CaptionML=[DEU=Betrag pro Rate;
                             ENU=Amount per installment;
                             NLD=Bedrag per termijnen];
                  SourceExpr=AmountPerInstallment;
                  Editable=AmountPerInstallmentEditable;
                  OnValidate=BEGIN
                               CheckAmountPerInstallment(FALSE);
                               CalcAmountPerInstallment(FALSE);
                               CheckNoOfInstallments(FALSE);
                               IF NoOfInstallments = 1 THEN BEGIN
                                 NoOfInstallmentsEditable := TRUE;
                                 SplitBy := SplitBy::NoOfInstallments;
                               END ELSE BEGIN
                                 NoOfInstallmentsEditable := FALSE;
                                 SplitBy := SplitBy::AmountPerInstallment;
                               END;
                               OldNoOfInstallments := NoOfInstallments;
                             END;
                              }

      { 1100529606;2;Field  ;
                  Name=PostingDate;
                  CaptionML=[DEU=Buchungsdatum;
                             ENU=Posting Date;
                             NLD=Boekingsdatum;
                             SVE=Bokfîringsdatum];
                  SourceExpr=PostingDate;
                  OnValidate=BEGIN
                               CheckDates;
                             END;
                              }

      { 1100529604;2;Field  ;
                  Name=FirstDueDate;
                  CaptionML=[DEU=FÑlligkeitsdatum erster Rate;
                             ENU=Due date of the first installment;
                             NLD=Vervaldatum eerste termijn];
                  SourceExpr=FirstDueDate;
                  OnValidate=BEGIN
                               CheckDates;
                             END;
                              }

      { 1100529605;2;Field  ;
                  Name=DueDateInterval;
                  CaptionML=[DEU=FÑlligkeitsdatum Intervall Raten;
                             ENU=Due date interval of the installments;
                             NLD=Vervaldatum interval termijnen];
                  OptionCaptionML=[DEU=1 Woche,1 Monat,1 Quartal,1 Jahr;
                                   ENU=1 Week,1 Month,1 Quarter,1 Year;
                                   NLD=1 Week,1 Maand,1 Kwartaal,1 Jaar];
                  SourceExpr=DueDateInterval }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      GLSetup@1100529623 : Record 98;
      CustLedgerEntry@1100529604 : Record 21;
      Currency@1100529610 : Record 4;
      GenJnlPostLine@1100529607 : Codeunit 12;
      CustLedgerEntryNo@1100529609 : Integer;
      OldNoOfInstallments@1100529622 : Integer;
      NoOfInstallments@1100529600 : Integer;
      AmountPerInstallment@1100529601 : Decimal;
      PostingDate@1100529605 : Date;
      FirstDueDate@1100529602 : Date;
      DueDateInterval@1100529603 : 'Week,Month,Quarter,Year';
      Text001@1100529612 : TextConst 'DEU=Sie mÅssen die %1 angeben.;ENU=You must specify %1.;NLD=U moet %1 opgeven.;SVE=Du mÜste specificera %1.';
      Text002@1100529608 : TextConst 'DEU=FÑlligkeitsdatum;ENU=Due Date;NLD=Vervaldatum;SVE=Fîrfallodatum';
      Text003@1100529611 : TextConst 'DEU=Buchungsdatum;ENU=Posting Date;NLD=Boekingsdatum;SVE=Bokfîringsdatum';
      Text004@1100529606 : TextConst 'DEU=%1 muss spÑter als %2 sein.;ENU=%1 must be later than %2.;NLD=%1 moet later dan %2 zijn.;SVE=%1 mÜste vara senare Ñn %2.';
      NoOfInstallmentsEditable@1100529613 : Boolean INDATASET;
      AmountPerInstallmentEditable@1100529614 : Boolean INDATASET;
      Text005@1100529615 : TextConst 'DEU=Mîchten Sie den Posten in %1 Posten aufteilen?;ENU=Do you want to split up the entry into %1 entries?;NLD=Wilt u de post opsplitsen in %1 posten?';
      Text006@1100529616 : TextConst 'DEU=%1 muss kleiner/gleich %2 sein.;ENU=%1 must be less than/equal to %2.;NLD=%1 moet kleiner/gelijk zijn aan %2.;SVE=%1 mÜste vara mindre Ñn eller lika med %2.';
      Text007@1100529617 : TextConst 'DEU=Anzahl Raten;ENU=Number of installments;NLD=Aantal termijnen';
      Text008@1100529618 : TextConst 'DEU=%1 muss positiv sein.;ENU=%1 must be positive.;NLD=%1 moet positief zijn.;SVE=%1 mÜste vara positivt.';
      Text009@1100529619 : TextConst 'DEU=%1 muss ein negatives Vorzeichen haben.;ENU=%1 must be negative.;NLD=%1 moet negatief zijn.;SVE=%1 mÜste vara negativt.';
      Text010@1100529620 : TextConst 'DEU=Betrag pro Rate;ENU=Amount per installment;NLD=Bedrag per termijnen';
      SplitBy@1100529621 : 'NoOfInstallments,AmountPerInstallment';

    PROCEDURE SetCustLedgerEntryNo@1100529600(NewCustLedgerEntryNo@1100529600 : Integer);
    BEGIN
      CustLedgerEntryNo := NewCustLedgerEntryNo;
      CheckCustLedgerEntry;
    END;

    LOCAL PROCEDURE CheckCustLedgerEntry@1100529601();
    BEGIN
      CustLedgerEntry.GET(CustLedgerEntryNo);
      CustLedgerEntry.TESTFIELD("Document Type", CustLedgerEntry."Document Type"::Invoice);
      CustLedgerEntry.TESTFIELD("Document No.");
      CustLedgerEntry.CALCFIELDS("Remaining Amount");
      CustLedgerEntry.TESTFIELD("Remaining Amount");

      Currency.Initialize(CustLedgerEntry."Currency Code");
    END;

    LOCAL PROCEDURE CheckDates@1100529606();
    BEGIN
      IF FirstDueDate = 0D THEN
        ERROR(Text001, Text002);
      IF PostingDate = 0D THEN
        ERROR(Text001, Text003);
      IF FirstDueDate < PostingDate THEN
        ERROR(Text004, Text002, Text003);
    END;

    LOCAL PROCEDURE CalcAmountPerInstallment@1100529604(CalcAmount@1100529600 : Boolean);
    BEGIN
      CustLedgerEntry.CALCFIELDS("Remaining Amount");
      IF CalcAmount THEN BEGIN
        IF NoOfInstallments <= 0 THEN BEGIN
          NoOfInstallments := 1;
          AmountPerInstallment := CustLedgerEntry."Remaining Amount";
          EXIT;
        END;
        AmountPerInstallment := ROUND(CustLedgerEntry."Remaining Amount" / NoOfInstallments, Currency."Amount Rounding Precision");
      END ELSE BEGIN
        IF AmountPerInstallment = 0 THEN BEGIN
          NoOfInstallments := 1;
          AmountPerInstallment := CustLedgerEntry."Remaining Amount";
          EXIT;
        END;
        IF AmountPerInstallment = CustLedgerEntry."Remaining Amount" THEN BEGIN
          NoOfInstallments := 1;
          EXIT;
        END;
        NoOfInstallments := (CustLedgerEntry."Remaining Amount" DIV AmountPerInstallment) + 1;
      END;
    END;

    LOCAL PROCEDURE ProcessCustLedgerEntry@1100529602();
    VAR
      TotalRemainingAmount@1100529604 : Decimal;
      CheckRemainingAmount@1100529602 : Decimal;
      RoundRemainingAmount@1100529607 : Decimal;
      LocRemainingAmount@1100529608 : Decimal;
      LocDec@1100529610 : Decimal;
      TotalRemainingAmountLCY@1100529609 : Decimal;
      CheckRemainingAmountLCY@1100529606 : Decimal;
      RoundRemainingAmountLCY@1100529605 : Decimal;
      LocRemainingAmountLCY@1100529603 : Decimal;
      i@1100529600 : Integer;
      DueDate@1100529601 : Date;
    BEGIN
      CustLedgerEntry.CALCFIELDS("Remaining Amt. (LCY)");
      CreateAndPostGenJournalLine(0, CustLedgerEntry."Due Date", -CustLedgerEntry."Remaining Amount", -CustLedgerEntry."Remaining Amt. (LCY)");

      TotalRemainingAmount := CustLedgerEntry."Remaining Amount";
      TotalRemainingAmountLCY := CustLedgerEntry."Remaining Amt. (LCY)";
      IF SplitBy = SplitBy::AmountPerInstallment THEN BEGIN
        LocRemainingAmount := AmountPerInstallment;
        IF CustLedgerEntry."Currency Code" = '' THEN
          LocRemainingAmountLCY := LocRemainingAmount
        ELSE
          LocRemainingAmountLCY := ROUND(AmountPerInstallment / CustLedgerEntry."Adjusted Currency Factor", GLSetup."Amount Rounding Precision");
      END;

      FOR i := 1 TO NoOfInstallments DO BEGIN
        IF i = 1 THEN
          DueDate := FirstDueDate
        ELSE
          GetNextDueDate(DueDate);

        IF i = NoOfInstallments THEN BEGIN
          LocRemainingAmount := TotalRemainingAmount - CheckRemainingAmount;
          LocRemainingAmountLCY := TotalRemainingAmountLCY - CheckRemainingAmountLCY;
        END ELSE BEGIN
          IF SplitBy = SplitBy::NoOfInstallments THEN BEGIN
            LocDec := TotalRemainingAmount / NoOfInstallments - RoundRemainingAmount;
            LocRemainingAmount := ROUND(LocDec, Currency."Amount Rounding Precision");
            RoundRemainingAmount := LocRemainingAmount - LocDec;
            IF CustLedgerEntry."Currency Code" = '' THEN
              LocRemainingAmountLCY := LocRemainingAmount
            ELSE BEGIN
              LocDec := TotalRemainingAmountLCY / NoOfInstallments - RoundRemainingAmountLCY;
              LocRemainingAmountLCY := ROUND(LocDec, GLSetup."Amount Rounding Precision");
              RoundRemainingAmountLCY := LocRemainingAmountLCY - LocDec;
            END;
          END;
          CheckRemainingAmount += LocRemainingAmount;
          CheckRemainingAmountLCY += LocRemainingAmountLCY;
        END;

        CreateAndPostGenJournalLine(1, DueDate, LocRemainingAmount, LocRemainingAmountLCY);
      END;

      COMMIT;
    END;

    LOCAL PROCEDURE CreateAndPostGenJournalLine@1100529607(DocumentType@1100529601 : 'Payment,Invoice';DueDate@1100529602 : Date;LocAmount@1100529603 : Decimal;LocAmountLCY@1100529604 : Decimal);
    VAR
      GenJournalLine@1100529600 : Record 81;
    BEGIN
      CLEAR(GenJournalLine);
      GenJournalLine."Document Type" := DocumentType + 1;
      GenJournalLine."Document No." := CustLedgerEntry."Document No.";
      GenJournalLine."Posting Date" := PostingDate;
      GenJournalLine.Description := CustLedgerEntry.Description;
      GenJournalLine."Posting Group" := CustLedgerEntry."Customer Posting Group";
      GenJournalLine."Source Type" := GenJournalLine."Source Type"::Customer;
      GenJournalLine."Source No." := CustLedgerEntry."Customer No.";
      GenJournalLine."Account Type" := GenJournalLine."Account Type"::Customer;
      GenJournalLine.VALIDATE("Account No.", CustLedgerEntry."Customer No.");
      GenJournalLine."Shortcut Dimension 1 Code" := CustLedgerEntry."Global Dimension 1 Code";
      GenJournalLine."Shortcut Dimension 2 Code" := CustLedgerEntry."Global Dimension 2 Code";
      GenJournalLine."Dimension Set ID" := CustLedgerEntry."Dimension Set ID";

      GenJournalLine."Currency Code" := CustLedgerEntry."Currency Code";
      GenJournalLine.Amount := LocAmount;
      GenJournalLine."Amount (LCY)" := LocAmountLCY;

      IF DocumentType = DocumentType::Payment THEN BEGIN
        GenJournalLine."Currency Factor" := CustLedgerEntry."Adjusted Currency Factor";
        GenJournalLine."Applies-to ID" := CurrReport.OBJECTID(FALSE);
        CustLedgerEntry.LOCKTABLE;
        CustLedgerEntry."Remaining Pmt. Disc. Possible" := 0;
        CustLedgerEntry."Remain. Pmt. Disc. Possible 2" := 0;
        CustLedgerEntry."Remain. Pmt. Disc. Possible 3" := 0;
        CustLedgerEntry."Applies-to ID" := GenJournalLine."Applies-to ID";
        CustLedgerEntry."Amount to Apply" := CustLedgerEntry."Remaining Amount";
        CustLedgerEntry.MODIFY;
      END ELSE
        GenJournalLine."Currency Factor" := LocAmount / LocAmountLCY;

      GenJournalLine."Due Date" := DueDate;

      GenJnlPostLine.SetSkipCheckSalesInvoiceNo(TRUE);
      GenJnlPostLine.RUN(GenJournalLine);
    END;

    LOCAL PROCEDURE GetNextDueDate@1100529612(VAR DueDate@1100529600 : Date);
    BEGIN
      CASE DueDateInterval OF
        DueDateInterval::Week:
          DueDate := CALCDATE('<+1W>', DueDate);
        DueDateInterval::Month:
          DueDate := CALCDATE('<+1M>', DueDate);
        DueDateInterval::Quarter:
          DueDate := CALCDATE('<+1Q>', DueDate);
        DueDateInterval::Year:
          DueDate := CALCDATE('<+1Y>', DueDate);
      END;
    END;

    LOCAL PROCEDURE CheckNoOfInstallments@1100529609(ShowError@1100529600 : Boolean);
    BEGIN
      IF NoOfInstallments < 1 THEN
        NoOfInstallments := 1;
      IF NoOfInstallments <= 10 THEN
        EXIT;
      IF NoOfInstallments > 100 THEN
        IF ShowError THEN
          ERROR(Text006, Text007, 100)
        ELSE BEGIN
          MESSAGE(Text006, Text007, 100);
          ERROR('');
        END;
      IF NoOfInstallments <> OldNoOfInstallments THEN
        IF NOT CONFIRM(Text005, TRUE, NoOfInstallments) THEN
          ERROR('');
    END;

    LOCAL PROCEDURE CheckAmountPerInstallment@1100529611(ShowError@1100529600 : Boolean);
    BEGIN
      CustLedgerEntry.CALCFIELDS("Remaining Amount");
      IF AmountPerInstallment = 0 THEN BEGIN
        AmountPerInstallment := CustLedgerEntry."Remaining Amount";
        EXIT;
      END;
      AmountPerInstallment := ROUND(AmountPerInstallment, Currency."Amount Rounding Precision");
      IF (AmountPerInstallment < 0) AND (CustLedgerEntry."Remaining Amount" > 0) THEN
        IF ShowError THEN
          ERROR(Text008, Text010)
        ELSE BEGIN
          MESSAGE(Text008, Text010);
          ERROR('');
        END;
      IF (AmountPerInstallment > 0) AND (CustLedgerEntry."Remaining Amount" < 0) THEN
        IF ShowError THEN
          ERROR(Text009, Text010)
        ELSE BEGIN
          MESSAGE(Text009, Text010);
          ERROR('');
        END;
      IF ABS(AmountPerInstallment) > ABS(CustLedgerEntry."Remaining Amount") THEN
        IF ShowError THEN
          ERROR(Text006, Text010, CustLedgerEntry.FIELDCAPTION("Remaining Amount"))
        ELSE BEGIN
          MESSAGE(Text006, Text010, CustLedgerEntry.FIELDCAPTION("Remaining Amount"));
          ERROR('');
        END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

