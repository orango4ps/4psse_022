OBJECT Codeunit 11012010 Central Data Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00,4PSSE;
  }
  PROPERTIES
  {
    Permissions=TableData 18=rimd,
                TableData 21=rm,
                TableData 23=rimd,
                TableData 25=rm,
                TableData 30=rimd,
                TableData 32=rm,
                TableData 90=rimd,
                TableData 99=rimd,
                TableData 287=rimd,
                TableData 288=rimd,
                TableData 300=rm,
                TableData 5050=rimd,
                TableData 5079=r,
                TableData 5401=rimd,
                TableData 5404=rimd,
                TableData 5700=rimd,
                TableData 11012753=rd,
                TableData 11071743=rimd,
                TableData 11071744=rimd,
                TableData 2000000183=rm,
                TableData 2000000184=rm;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@11012004 : TextConst 'ENU=There are activities planned for this prospect. %1 %2 cannot be removed for company %3.;NOR=Det finnes planlagte aktiviteter for dette prospektet. %1 %2 kan ikke fjernes for selskap %3.;SVE=Det finns planerade aktiviteter f”r detta prospekt. %1 %2 kan inte tas bort f”r f”retag %3.';
      Text001@11012005 : TextConst 'ENU=Removing %1 %2 not possible. There are one or more open Sales Orders for this customer in company %3.;NOR=Kan ikke fjerne %1 %2. Det finnes et eller flere †pne Salgsordre for denne kunden i selskap %3.;SVE=Det g†r inte att ta bort %1 %2. Det finns en eller flera ”ppna s„ljorder f”r denna kund i f”retaget %3.';
      Text002@11012006 : TextConst 'ENU=This Item occurs on one or more Purchase Orders. Removing %1 %2 not possible for Company %3.;NOR=Denne artikkelen forekommer p† en eller flere innkj›psordre. Kan ikke fjerne %1 %2 for selskap %3.;SVE=Den h„r artikeln f”rekommer p† en eller flera ink”psorder. Det g†r inte att ta bort %1 %2 f”r f”retaget %3.';
      Text003@11012007 : TextConst 'ENU=There are entries for a accounting year wich is still open. %1 %2 cannot be removed for company %3.;NOR=Det finnes transaksjoner for et regnskaps†r som fortsatt er †pent. %1 %2 kan ikke fjernes for selskap %3;SVE=Det finns transaktioner f”r ett r„kenskaps†r som fortfarande „r ”ppet. %1 %2 kan inte tas bort f”r f”retag %3.';
      Text004@11012008 : TextConst 'ENU=There are one or more open entries. Removing %1 %2 not possible for company %3.;NOR=Det finnes en eller flere †pne transaksjoner. Kan ikke fjerne %1 %2 for selskap %3.;SVE=Det finns en eller flera ”ppna transaktioner. Det g†r inte att ta bort %1 %2 f”r f”retaget %3.';
      Text005@11012009 : TextConst 'ENU=There are entries for a not closed accounting year. Removing %1 %2 not possible for company %3.;NOR=Det finnes transaksjoner for et regnskaps†r som ikke er avslutningtet. Fjerning av %1 %2 ikke mulig for selskap %3.;SVE=Det finns transaktioner f”r ett r„kenskaps†r som inte har st„ngts. Det g†r inte att ta bort %1 %2 f”r f”retaget %3.';
      Text006@11012010 : TextConst 'ENU=You cannot delete %1 %2 because it has ledger entries in a fiscal year that has not been closed yet.;NOR=Du kan ikke slette %1 %2 fordi det finnes poster i et regnskaps†r som enda ikke er lukket.;SVE=Du kan inte ta bort %1 %2 d„rf”r att det har transaktioner i ett r„kenskaps†r som „nnu inte avslutats.';
      Text007@11012011 : TextConst 'ENU=You cannot delete %1 %2 because there are one or more open ledger entries.;NOR=Du kan ikke fjerne%1 %2 siden det finnes †pne transaksjoner;SVE=Du kan inte ta bort %1 %2 d„rf”r att det finns ”ppna transaktioner.';
      Text008@11012012 : TextConst 'ENU="There are item entries that have not been adjusted for item %1. ";NOR="Det finnes vareposter som ikke er justert for vare %1. ";SVE="Det finns artikeltransaktioner som inte har justerats f”r artikel %1. "';
      Text009@11012013 : TextConst 'ENU="If you delete this item the inventory valuation will be incorrect. ";NOR=Hvis du fjerner denne artikkelen vil lagerverdien bli feilaktig.;SVE="Om du tar bort denna artikel kommer lagerv„rderingen bli felaktig. "';
      Text010@11012014 : TextConst 'ENU=Use the %2 batch job before deleting the item.;NOR=Bruk batch-jobb %2 f›r du fjerner artikkelen.;SVE=Anv„nd batch-jobbet %2 f”re borttag av artikeln.';
      Text011@11012015 : TextConst 'ENU=Adjust Cost - Item Entries;NOR=Juster kostverdi - vareposter;SVE=Justera kost. - artikeltrans.';
      Text013@11012017 : TextConst 'ENU=Item %1 is still on one or more open Purchase Orders and can not de deleted.;NOR=Artikkel %1 inng†r fortsatt i en eller flere †pne innkj›psordre og kan ikke fjernes;SVE=Artikel %1 ing†r fortfarande i en eller flera ”ppna ink”psorder och kan inte tas bort.';
      Text014@11012018 : TextConst 'ENU=Item %1 is still on one or more open Sales Orders and can not de deleted.;NOR=Artikkel %1 inng†r fortsatt i en eller flere †pne salgsordre og kan ikke fjernes;SVE=Artikel %1 ing†r fortfarande i en eller flera ”ppna f”rs„ljningsorder och kan inte tas bort.';
      Text015@11012019 : TextConst 'ENU=Item %1 is still on one or more open Production Orders and can not de deleted.;NOR=Artikkel %1 inng†r fortsatt i en eller flere †pne produksjonsordre og kan ikke fjernes;SVE=Artikel %1 ing†r fortfarande i en eller flera ”ppna produktionsorder och kan inte tas bort.';
      Text016@11012020 : TextConst 'ENU=Item %1 is used on one or more Production Order with a rest quantity unequal to 0.;NOR=Artikkel %1 inng†r fortsatt i en eller flere produksjonsordre med en restbeholdning som ikke er lik 0;SVE=Artikel %1 anv„nds fortfarande i en eller flera produktionsorder med ett restantal som inte „r lika med 0.';
      Text017@11012021 : TextConst 'ENU=and can not be deleted.;NOR=og kan ikke fjernes;SVE=och kan inte raderas/tas bort.';
      CompRelationRec@11012000 : Record 11012059;
      MarketingSetup@11012001 : Record 5079;
      InventorySetup@11012002 : Record 313;
      ServiceSetup@1100528600 : Record 11012800;
      GenLedgerSetup@1210190000 : Record 98;
      Window@11012003 : Dialog;
      Text11012001@1100485001 : TextConst 'ENU=You cannot delete %1 %2 because data is present in %3 Company %4;NOR=Du kan ikke fjerne %1 %2 fordi det fortsatt finnes data i %3 selskap %4;SVE=Du kan inte ta bort %1 %2 eftersom det fortfarande finns data i %3 f”retag %4';
      Text11012002@1100485000 : TextConst 'ENU=You cannot delete %1 %2 because data is present in %3 %4 Company %5;NOR=Du kan ikke fjerne %1 %2 fordi det fortsatt finnes data i %3 %4 selskap %5;SVE=Du kan inte ta bort %1 %2 eftersom det fortfarande finns data i %3 %4 f”retag %5';
      Text11012009@1210190003 : TextConst 'ENU=You cannot delete %1 %2 because the contact is assigned to unlogged segment %3, line no. %4 in company %5.;NOR=Du kan ikke fjerne%1 %2 siden kontakten er tilordnet det uregistrerte segmentet %3, radnr %4 i selskap %5.;SVE=Du kan inte ta bort %1 %2 eftersom kontakten tilldelats det ej loggade segmentet %3, radnr %4 i f”retag %5.';
      LeadingCompany@1210190006 : Text[50];
      CompRec@1210190007 : Record 2000000006;
      Initializing@1100409000 : Boolean;
      Text057@1100409001 : TextConst 'ENU=Initiate %1 for all decentralized companies ?;NOR=Initier %1 for alle desentraliserte selskaper ?';
      Text058@1100409002 : TextConst 'ENU=Initiate %1 for company %2 ?;NOR=Initier %1 for selskap %2 ?;SVE=Initiera %1 f”r f”retag %2?';
      Text059@1100409003 : TextConst 'ENU=Central Contact Management;NOR=Sentral kontrakth†ndtering;SVE=Central kontaktshantering';
      Text060@1100409004 : TextConst 'ENU=Central Item Management;NOR=Sentral artikkelh†ndtering;SVE=Central artikelhantering';
      Text061@1100409005 : TextConst 'ENU=Central Finance Management;NOR=Sentral finansh†ndtering;SVE=Central finanshantering';
      Text062@1100409006 : TextConst 'ENU=Central Service Management;NOR=Sentral serviceh†ndtering;SVE=Central servicehantering';
      Text063@1100409007 : TextConst 'ENU=Initiating %1...\\#2#############################  @3@@@@@@@@@@@@@;NOR=Initiere %1...\\#2#############################  @3@@@@@@@@@@@@@;SVE=Initierar %1...\\#2#############################  @3@@@@@@@@@@@@@';
      FPSLicenseManagement@1100527400 : Codeunit 11229289;
      BlockAction@1100528200 : ARRAY [5] OF Boolean;

    [External]
    PROCEDURE CentralActive@1210190007() : Boolean;
    BEGIN
      MarketingSetup.GET;
      EXIT(MarketingSetup."Central Management");
    END;

    [External]
    PROCEDURE CentralActiveLocalInput@1210190006(TableNo@1100525000 : Integer) : Boolean;
    BEGIN
      IF NOT CentralActive THEN
        EXIT(FALSE);

      //X016.sn
      //LeadingCompany := CompRelationRec.GetLeadingCompany(DATABASE::"Marketing Setup",TRUE); //C016112.o
      LeadingCompany := CompRelationRec.GetLeadingCompany(TableNoSetup(TableNo),TRUE); //C016112.n
      EXIT(COMPANYNAME <> LeadingCompany);
      //X016.en
    END;

    [External]
    PROCEDURE CentralCompany@1210190008() : Text[30];
    BEGIN
      //X016.sn
      IF CentralActive THEN BEGIN
        LeadingCompany := CompRelationRec.GetLeadingCompany(DATABASE::"Marketing Setup",TRUE);
        EXIT(LeadingCompany);
      END;
      //X016.en
    END;

    [External]
    PROCEDURE DataInputAllowed@1210190005(RecordRef@1210190000 : RecordRef) : Boolean;
    VAR
      ContRec@1210190001 : Record 5050;
    BEGIN
      IF NOT CentralActive THEN
        EXIT(TRUE);

      //X016.sn
      LeadingCompany := CompRelationRec.GetLeadingCompany(DATABASE::"Marketing Setup",TRUE);
      IF COMPANYNAME = LeadingCompany THEN
        EXIT(TRUE);
      //X016.en

      MarketingSetup.GET;

      CASE RecordRef.NUMBER OF
        DATABASE::Contact:
          BEGIN
            RecordRef.SETTABLE(ContRec);
            IF ContRec.Type = ContRec.Type::Company THEN
              IF NOT MarketingSetup.Companies THEN
                EXIT(TRUE)
              ELSE
                EXIT(NOT ContactExistsCentral(RecordRef))
            ELSE
              IF NOT MarketingSetup.Persons THEN
                EXIT(TRUE)
              ELSE
                EXIT(NOT ContactExistsCentral(RecordRef));
          END;
        DATABASE::Customer:
          BEGIN
            IF NOT MarketingSetup.Customers THEN
              EXIT(TRUE);

            IF MarketingSetup."Allow Decentral Customers" THEN
              EXIT(NOT CustomerExistsCentral(RecordRef));

            EXIT(NOT (CustomerExistsCentral(RecordRef) OR
                      ContactExistsCentral(RecordRef)));
          END;
        DATABASE::Vendor:
          BEGIN
            IF NOT MarketingSetup.Vendors THEN
              EXIT(TRUE);

            IF MarketingSetup."Allow Decentral Vendors" THEN
              EXIT(NOT VendorExistsCentral(RecordRef));

            EXIT(NOT (VendorExistsCentral(RecordRef) OR
                      ContactExistsCentral(RecordRef)));
          END
      END;
    END;

    [External]
    PROCEDURE ContactExistsCentral@1210190002(RecordRef@1210190000 : RecordRef) : Boolean;
    VAR
      ContRec@1210190002 : Record 5050;
      ContBusRel@1210190003 : Record 5054;
      CustRec@1210190004 : Record 18;
      VendorRec@1210190005 : Record 23;
    BEGIN
      IF NOT CentralActive THEN
        EXIT(TRUE);

      //X016.sn
      LeadingCompany := CompRelationRec.GetLeadingCompany(DATABASE::"Marketing Setup",TRUE);
      IF COMPANYNAME = LeadingCompany THEN
        EXIT(TRUE);
      //X016.en

      ContBusRel.SETCURRENTKEY("Link to Table","No.");
      CASE RecordRef.NUMBER OF
        DATABASE::Customer:
          BEGIN
            RecordRef.SETTABLE(CustRec);
            ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
            ContBusRel.SETRANGE("No.",CustRec."No.");
            IF ContBusRel.FINDFIRST THEN BEGIN
              //X016.sn
              IF CompRec.GET(LeadingCompany) THEN
                IF NOT ContRec.CHANGECOMPANY(LeadingCompany) THEN
                  EXIT(TRUE);
              //X016.en
              IF NOT FPSLicenseManagement.LicenseAndReadPermissionForTable(ContRec) THEN
                EXIT(TRUE); //assume contact exists
              EXIT(ContRec.GET(ContBusRel."Contact No."));
            END;
          END;
        DATABASE::Vendor:
          BEGIN
            RecordRef.SETTABLE(VendorRec);
            ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Vendor);
            ContBusRel.SETRANGE("No.",VendorRec."No.");
            IF ContBusRel.FINDFIRST THEN BEGIN
              //X016.sn
              IF CompRec.GET(LeadingCompany) THEN
                IF NOT ContRec.CHANGECOMPANY(LeadingCompany) THEN
                  EXIT(TRUE);
              //X016.en
              IF NOT FPSLicenseManagement.LicenseAndReadPermissionForTable(ContRec) THEN
                EXIT(TRUE); //assume contact exists
              EXIT(ContRec.GET(ContBusRel."Contact No."));
            END;
          END;
        DATABASE::Contact:
          BEGIN
            RecordRef.SETTABLE(ContRec);
            //X016.sn
            IF CompRec.GET(LeadingCompany) THEN
              IF NOT ContRec.CHANGECOMPANY(LeadingCompany) THEN
                EXIT(TRUE);
            //X016.en
            IF NOT FPSLicenseManagement.LicenseAndReadPermissionForTable(ContRec) THEN
              EXIT(TRUE); //assume contact exists
            EXIT(ContRec.FIND('='));
          END;
      END;
    END;

    [External]
    PROCEDURE VendorExistsCentral@1100485023(RecordRef@1210190000 : RecordRef) : Boolean;
    VAR
      VendorRec@1210190005 : Record 23;
    BEGIN
      IF NOT CentralActive THEN
        EXIT(TRUE);

      //X016.sn
      LeadingCompany := CompRelationRec.GetLeadingCompany(DATABASE::"Marketing Setup",TRUE);
      IF COMPANYNAME = LeadingCompany THEN
        EXIT(TRUE);
      //X016.en

      RecordRef.SETTABLE(VendorRec);
      IF NOT VendorRec.CHANGECOMPANY(LeadingCompany) THEN  //X016
        EXIT(TRUE);
      IF NOT FPSLicenseManagement.LicenseAndReadPermissionForTable(VendorRec) THEN
        EXIT(TRUE); //assume contact exists
      EXIT(VendorRec.FIND('='));
    END;

    LOCAL PROCEDURE CustomerExistsCentral@1100528408(RecordRef@1210190000 : RecordRef) : Boolean;
    VAR
      Customer@1210190005 : Record 18;
    BEGIN
      IF NOT CentralActive THEN
        EXIT(TRUE);

      //X016.sn
      LeadingCompany := CompRelationRec.GetLeadingCompany(DATABASE::"Marketing Setup",TRUE);
      IF COMPANYNAME = LeadingCompany THEN
        EXIT(TRUE);
      //X016.en

      RecordRef.SETTABLE(Customer);
      IF NOT Customer.CHANGECOMPANY(LeadingCompany) THEN  //X016
        EXIT(TRUE); //assume customer exists
      IF NOT FPSLicenseManagement.LicenseAndReadPermissionForTable(Customer) THEN
        EXIT(TRUE); //assume customer exists
      EXIT(Customer.FIND('='));
    END;

    PROCEDURE SetCompRelRecFilter@3(ExchType@1210190000 : Integer);
    BEGIN
      //X016
      //C002428 several changes
      CompRelationRec.RESET;

      IF LeadingCompany = '' THEN
        CASE ExchType OF
          1: LeadingCompany := CompRelationRec.GetLeadingCompany(DATABASE::"Marketing Setup",TRUE);
          2: LeadingCompany := CompRelationRec.GetLeadingCompany(DATABASE::"Inventory Setup",TRUE);
          3: LeadingCompany := CompRelationRec.GetLeadingCompany(DATABASE::"General Ledger Setup",TRUE);
          4: LeadingCompany := CompRelationRec.GetLeadingCompany(DATABASE::"Service Setup",TRUE);
        END;

      IF Initializing THEN
        IF COMPANYNAME = LeadingCompany THEN
          CompRelationRec.SETFILTER(Company, '<>%1', LeadingCompany) //filter all decentral companies
        ELSE
          CompRelationRec.SETRANGE(Company, COMPANYNAME) //filter current decentral company only
      ELSE
        IF COMPANYNAME = LeadingCompany THEN
          CompRelationRec.SETFILTER(Company, '<>%1', LeadingCompany) //filter all decentral companies
        ELSE
          CompRelationRec.SETRANGE(Company, '-o-'); //filter no companies at all

      CASE ExchType OF
        1: CompRelationRec.SETRANGE("Company Contact Data", LeadingCompany);
        2: CompRelationRec.SETRANGE("Company Item Data", LeadingCompany);
        3: CompRelationRec.SETRANGE("Company Finance Data", LeadingCompany);
        4: CompRelationRec.SETRANGE("Company Service Data", LeadingCompany);
      END;
    END;

    PROCEDURE EditContact@1(VAR ContRec@11012000 : Record 5050;Operation@11012001 : Integer;OldContRec@11012002 : Record 5050);
    VAR
      ContRec2@11012003 : Record 5050;
      xContact@1100525002 : Record 5050;
      OldRecRef@1100525001 : RecordRef;
      NewRecRef@1100525000 : RecordRef;
    BEGIN
      MarketingSetup.GET;

      IF NOT MarketingSetup."Central Management" OR
         (NOT MarketingSetup.Companies AND (ContRec.Type = ContRec.Type::Company)) THEN
        EXIT;

      IF NOT MarketingSetup."Central Management" OR
         (NOT MarketingSetup.Persons AND (ContRec.Type = ContRec.Type::Person)) THEN
        EXIT;

      //**4PS.sn #C011151, #C013740 Central Data Management (rename)
      //IF (MarketingSetup."Central Management") AND (Operation = 3) THEN
      //  ERROR(Text099, ContRec.TABLECAPTION,
      //    MarketingSetup.FIELDCAPTION("Central Management"), MarketingSetup."Central Management");
      //**4PS.sn #C011151, #C013740 Central Data Management (rename)

      SetCompRelRecFilter(1);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          ContRec2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:BEGIN
                ContRec2.COPY(OldContRec);
                ContRec2.RESET;
                IF ContRec2.FIND THEN BEGIN
                  ContRec2.SetGlobalCompanyName(CompRelationRec.Company);
                  ContRec2.SetSkipCentralDataMgtInOnRename;
                  ContRec2.RENAME(ContRec."No.");
                END;
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                ContRec2.COPY(ContRec);
                ContRec2.RESET;
                IF NOT ContRec2.FIND THEN BEGIN
                  ContRec2.InitRecord(CompRelationRec.Company);
                  ContRec2.INSERT;
                  xContact := ContRec2;
                END ELSE BEGIN
                  xContact := ContRec2;
                  OldRecRef.GETTABLE(ContRec2);
                  ContRec2.TRANSFERFIELDS(ContRec,FALSE);
                  // Table relation from Contact."Company No." to Contact."No."
                  // does not work when CHANGECOMPANY has been called.
                  IF (ContRec2.Type = ContRec2.Type::Company) AND
                     (ContRec2."No." <> '')
                  THEN
                    ContRec2."Company No." := ContRec2."No.";
                  NewRecRef.GETTABLE(ContRec2);
                  ExcludeFieldsFromExchange(OldRecRef, NewRecRef, TRUE);
                  NewRecRef.MODIFY;
                  NewRecRef.SETTABLE(ContRec2);
                END;

                ContRec2.SetGlobalCompanyName(CompRelationRec.Company);
                ContRec2.SetBlockAction(BlockAction);
                ContRec2.OnModifyFunc(xContact,FALSE);
                ContRec2.MODIFY;

                EditCommentLineRelation(ContRec."No.");  //db, 03-01-07
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    PROCEDURE RemoveContact@13(ContRec@11012000 : Record 5050);
    VAR
      Text000@11012004 : TextConst 'ENU=You cannot delete %1 %2 because there are one or more open To-dos.;NOR=Du kan ikke fjerne %1 %2 fordi det finnes en eller flere †pne oppgaver.;SVE=Du kan inte ta bort %1 %2 eftersom det finns en eller flera ”ppna uppgifter.';
      Text002@11012001 : TextConst 'ENU=You cannot delete %1 %2 because there are one or more opportunities in progress or not started.;NOR=Du kan ikke fjerne %1 %2 siden det finnes en eller flere salgsmuligheter som p†g†r eller ikke er startet.;SVE=Du kan inte ta bort %1 %2 eftersom det finns en eller flera aff„rsm”jligheter som „r p†g†ende eller „nnu ej startade.';
      Cont@11012018 : Record 5050;
      Todo@11012016 : Record 5080;
      SegLine@11012015 : Record 11072040;
      ContIndustGrp@11012014 : Record 5058;
      ContactWebSource@11012013 : Record 5060;
      ContJobResp@11012012 : Record 5067;
      ContMailingGrp@11012011 : Record 5056;
      ContProfileAnswer@11012010 : Record 5089;
      RMCommentLine@11012009 : Record 5061;
      ContAltAddr@11012008 : Record 5051;
      ContAltAddrDateRange@11012007 : Record 5052;
      InteractLogEntry@11012006 : Record 11072027;
      Opp@11012005 : Record 5092;
      BusRel@11012003 : Record 5054;
      ContactFeatureTypeRec@1210190000 : Record 11012753;
      TryOutRec@1100485003 : Record 11012750;
      TryOutLineRec@1100485002 : Record 11012755;
      TryOutQuoteRec@1100485001 : Record 11012758;
      TryOutQuoteLineRec@1210190001 : Record 11125864;
      TryOutQuoteCompetitorRec@1100485000 : Record 11012762;
      DocumentProperties@1100525000 : Record 11012746;
      DuplContSearchString@1100485007 : Record 5086;
      DuplCont@1100485006 : Record 5085;
      DuplCont2@1100485008 : Record 5085;
      SalesPerson@1100485005 : Record 11012760;
      LinkedInProfile@1100525001 : Record 11071908;
    BEGIN
      MarketingSetup.GET;

      WITH ContRec DO BEGIN
        IF NOT MarketingSetup."Central Management" OR
           (NOT MarketingSetup.Companies AND (Type = Type::Company)) THEN
          EXIT;
        IF NOT MarketingSetup."Central Management" OR (NOT MarketingSetup.Persons AND (Type = Type::Person)) THEN
          EXIT;

        SetCompRelRecFilter(1);
        IF CompRelationRec.FINDSET THEN
          REPEAT

            Todo.CHANGECOMPANY(CompRelationRec.Company);
            Todo.SETCURRENTKEY("Contact Company No.","Contact No.",Closed,Date);
            Todo.SETRANGE("Contact Company No.", "Company No.");
            IF Type = Type::Company THEN
              Todo.SETRANGE("Contact No.")
            ELSE
              Todo.SETRANGE("Contact No.", "No.");
            Todo.SETRANGE(Closed, FALSE);
            IF Todo.FINDFIRST THEN
              ERROR(Text000, TABLECAPTION, "No.");

            SegLine.CHANGECOMPANY(CompRelationRec.Company);
            SegLine.SETCURRENTKEY("Contact No.");
            SegLine.SETRANGE("Contact No.", "No.");
            IF SegLine.FINDFIRST THEN
              //ERROR(Text001, TABLECAPTION, "No.");  //**4PS.o
              ERROR(Text11012009, TABLECAPTION, "No.", SegLine."Segment No.", SegLine."Line No.", CompRelationRec.Company);  //**4PS.n

            Opp.CHANGECOMPANY(CompRelationRec.Company);
            Opp.SETCURRENTKEY("Contact Company No.","Contact No.");
            Opp.SETRANGE("Contact Company No.", "Company No.");
            Opp.SETRANGE("Contact No.", "No.");
            Opp.SETRANGE(Status,Opp.Status::"Not Started",Opp.Status::"In Progress");
            IF Opp.FINDFIRST THEN
              ERROR(Text002, TABLECAPTION, "No.");

            TryOutLineRec.CHANGECOMPANY(CompRelationRec.Company);
            TryOutLineRec.SETCURRENTKEY("Contact No.","Contact Person No.");
            IF Type = Type::Person THEN BEGIN
              TryOutLineRec.SETRANGE("Contact No.","Company No.");
              TryOutLineRec.SETRANGE("Contact Person No.","No.");
            END ELSE BEGIN
              TryOutLineRec.SETRANGE("Contact No.","No.");
              TryOutLineRec.SETRANGE("Contact Person No.");
            END;
            IF TryOutLineRec.FINDFIRST THEN
              ERROR(Text11012002,TABLECAPTION,"No.",TryOutRec.TABLECAPTION,TryOutLineRec."Try-out No.",CompRelationRec.Company);

            TryOutQuoteRec.CHANGECOMPANY(CompRelationRec.Company);
            TryOutQuoteRec.SETCURRENTKEY("Contact No.","Contact Person No.");
            IF Type = Type::Person THEN BEGIN
              TryOutQuoteRec.SETRANGE("Contact No.","Company No.");
              TryOutQuoteRec.SETRANGE("Contact Person No.","No.");
            END ELSE BEGIN
              TryOutQuoteRec.SETRANGE("Contact No.","No.");
              TryOutQuoteRec.SETRANGE("Contact Person No.");
            END;
            IF TryOutQuoteRec.FINDFIRST THEN
              ERROR(Text11012002,TABLECAPTION,"No.",TryOutQuoteRec.TABLECAPTION,TryOutQuoteRec.Code,CompRelationRec.Company);

            TryOutQuoteLineRec.CHANGECOMPANY(CompRelationRec.Company);
            TryOutQuoteLineRec.SETCURRENTKEY("Contact No.","Contact Person No.");
            IF Type = Type::Person THEN BEGIN
              TryOutQuoteLineRec.SETRANGE("Contact No.","Company No.");
              TryOutQuoteLineRec.SETRANGE("Contact Person No.","No.");
            END ELSE BEGIN
              TryOutQuoteLineRec.SETRANGE("Contact No.","No.");
              TryOutQuoteLineRec.SETRANGE("Contact Person No.");
            END;
            IF TryOutQuoteLineRec.FINDFIRST THEN
              ERROR(Text11012002,TABLECAPTION,"No.",TryOutQuoteLineRec.TABLECAPTION,TryOutQuoteLineRec."Try-out Quote",
                CompRelationRec.Company);

            DocumentProperties.CHANGECOMPANY(CompRelationRec.Company);
            DocumentProperties.SETCURRENTKEY("Contact No.", "Contact Person No.");
            DocumentProperties.SETRANGE("Contact No.", "No.");
            DocumentProperties.SETRANGE("Internal Company", CompRelationRec.Company); // 28-11-2006 new
            IF DocumentProperties.FINDFIRST THEN
              ERROR(Text11012002, TABLECAPTION, "No.", DocumentProperties.TABLECAPTION, DocumentProperties."No.",CompRelationRec.Company
      );

            IF Type = Type::Company THEN BEGIN
              TryOutQuoteCompetitorRec.CHANGECOMPANY(CompRelationRec.Company);
              TryOutQuoteCompetitorRec.SETRANGE("Contact No.","No.");
              IF TryOutQuoteCompetitorRec.FINDFIRST THEN
                ERROR(Text11012001,TABLECAPTION,"No.",TryOutQuoteCompetitorRec.TABLECAPTION,CompRelationRec.Company);
            END;

            CASE Type OF
              Type::Company: BEGIN
                BusRel.CHANGECOMPANY(CompRelationRec.Company);
                BusRel.SETRANGE("Contact No.", "No.");
                BusRel.DELETEALL;

                ContIndustGrp.CHANGECOMPANY(CompRelationRec.Company);
                ContIndustGrp.SETRANGE("Contact No.", "No.");
                ContIndustGrp.DELETEALL;

                ContactWebSource.CHANGECOMPANY(CompRelationRec.Company);
                ContactWebSource.SETRANGE("Contact No.", "No.");
                ContactWebSource.DELETEALL;

                //DuplMgt.RemoveContIndex(ContRec,FALSE);
                DuplContSearchString.CHANGECOMPANY(CompRelationRec.Company);
                DuplContSearchString.SETRANGE("Contact Company No.", "No.");
                DuplContSearchString.DELETEALL;

                DuplCont.CHANGECOMPANY(CompRelationRec.Company);
                DuplCont2.CHANGECOMPANY(CompRelationRec.Company);
                DuplCont.SETRANGE("Contact No.", "No.");
                IF DuplCont.FINDSET THEN
                  REPEAT
                    DuplCont2.GET(DuplCont."Duplicate Contact No.",DuplCont."Contact No.");
                    DuplCont2.DELETE;
                    DuplCont.DELETE;
                  UNTIL DuplCont.NEXT = 0;

                InteractLogEntry.CHANGECOMPANY(CompRelationRec.Company);
                InteractLogEntry.SETCURRENTKEY("Contact Company No.");
                InteractLogEntry.SETRANGE("Contact Company No.", "No.");
                IF InteractLogEntry.FINDSET(TRUE, FALSE) THEN
                  REPEAT
                    CLEAR(InteractLogEntry."Contact Company No.");
                    CLEAR(InteractLogEntry."Contact No.");
                    InteractLogEntry.MODIFY;
                  UNTIL InteractLogEntry.NEXT = 0;

                Cont.CHANGECOMPANY(CompRelationRec.Company);
                Cont.RESET;
                Cont.SETCURRENTKEY("Company No.");
                Cont.SETRANGE("Company No.", "No.");
                Cont.SETRANGE(Type,Type::Person);
                Cont.DELETEALL;

                Opp.CHANGECOMPANY(CompRelationRec.Company);
                Opp.RESET;
                Opp.SETCURRENTKEY("Contact Company No.","Contact No.");
                Opp.SETRANGE("Contact Company No.", "Company No.");
                Opp.SETRANGE("Contact No.", "No.");
                IF Opp.FINDSET(TRUE, FALSE) THEN
                  REPEAT
                    CLEAR(Opp."Contact No.");
                    CLEAR(Opp."Contact Company No.");
                    Opp.MODIFY;
                  UNTIL Opp.NEXT = 0;

                Todo.CHANGECOMPANY(CompRelationRec.Company);
                Todo.RESET;
                Todo.SETCURRENTKEY("Contact Company No.");
                Todo.SETRANGE("Contact Company No.", "Company No.");
                IF Todo.FINDSET(TRUE, FALSE) THEN
                  REPEAT
                    CLEAR(Todo."Contact No.");
                    CLEAR(Todo."Contact Company No.");
                    Todo.MODIFY;
                  UNTIL Todo.NEXT = 0;

                ContactFeatureTypeRec.CHANGECOMPANY(CompRelationRec.Company);
                ContactFeatureTypeRec.SETRANGE("Relation Type", ContactFeatureTypeRec."Relation Type"::Company);
                ContactFeatureTypeRec.SETRANGE(Code, "No.");
                ContactFeatureTypeRec.DELETEALL;
              END;

              Type::Person: BEGIN
                ContJobResp.CHANGECOMPANY(CompRelationRec.Company);
                ContJobResp.SETRANGE("Contact No.", "No.");
                ContJobResp.DELETEALL;

                InteractLogEntry.CHANGECOMPANY(CompRelationRec.Company);
                InteractLogEntry.SETCURRENTKEY("Contact Company No.","Contact No.");
                InteractLogEntry.SETRANGE("Contact Company No.", "Company No.");
                InteractLogEntry.SETRANGE("Contact No.", "No.");
                InteractLogEntry.MODIFYALL("Contact No.","Company No.");

                Opp.CHANGECOMPANY(CompRelationRec.Company);
                Opp.RESET;
                Opp.SETCURRENTKEY("Contact Company No.","Contact No.");
                Opp.SETRANGE("Contact Company No.", "Company No.");
                Opp.SETRANGE("Contact No.", "No.");
                Opp.MODIFYALL("Contact No.", "Company No.");

                Todo.CHANGECOMPANY(CompRelationRec.Company);
                Todo.RESET;
                Todo.SETCURRENTKEY("Contact Company No.","Contact No.");
                Todo.SETRANGE("Contact Company No.", "Company No.");
                Todo.SETRANGE("Contact No.", "No.");
                Todo.MODIFYALL("Contact No.","Company No.");

                ContactFeatureTypeRec.CHANGECOMPANY(CompRelationRec.Company);
                ContactFeatureTypeRec.SETFILTER("Relation Type", '%1|%2',
                  ContactFeatureTypeRec."Relation Type"::Contact,
                  ContactFeatureTypeRec."Relation Type"::Person);
                ContactFeatureTypeRec.SETRANGE(Code, "No.");
                ContactFeatureTypeRec.DELETEALL;
              END;
            END;

            ContMailingGrp.CHANGECOMPANY(CompRelationRec.Company);
            ContMailingGrp.SETRANGE("Contact No.", "No.");
            ContMailingGrp.DELETEALL;

            ContProfileAnswer.CHANGECOMPANY(CompRelationRec.Company);
            ContProfileAnswer.SETRANGE("Contact No.", "No.");
            ContProfileAnswer.DELETEALL;

            RMCommentLine.CHANGECOMPANY(CompRelationRec.Company);
            RMCommentLine.SETRANGE("Table Name", RMCommentLine."Table Name"::Contact);
            RMCommentLine.SETRANGE("No.", "No.");
            RMCommentLine.SETRANGE("Sub No.",0);
            RMCommentLine.DELETEALL;

            ContAltAddr.CHANGECOMPANY(CompRelationRec.Company);
            ContAltAddr.SETRANGE("Contact No.", "No.");
            ContAltAddr.DELETEALL;

            ContAltAddrDateRange.CHANGECOMPANY(CompRelationRec.Company);
            ContAltAddrDateRange.SETRANGE("Contact No.", "No.");
            ContAltAddrDateRange.DELETEALL;

            //**4PS02.sn
            SalesPerson.CHANGECOMPANY(CompRelationRec.Company);
            SalesPerson.SETRANGE("Contact No.", "No.");
            SalesPerson.DELETEALL;
            //**4PS02.en

            LinkedInProfile.CHANGECOMPANY(CompRelationRec.Company);
            LinkedInProfile.SETRANGE("Contact No.", "No.");
            LinkedInProfile.DELETEALL;

            CHANGECOMPANY(CompRelationRec.Company);
            IF FIND THEN
              DELETE;

          UNTIL CompRelationRec.NEXT = 0;

      END;
    END;

    [External]
    PROCEDURE UpdateBusinessRelation@1210190001(VAR BusRelRec@11012000 : Record 5054;Operation@11012001 : Integer;BusRelOldRec@11012002 : Record 5054);
    VAR
      BusRelRec2@11012003 : Record 5054;
    BEGIN
      MarketingSetup.GET;
      IF NOT MarketingSetup."Central Management" THEN
        EXIT;

      //**4PS.sn #C011151, #C013740 Central Data Management (rename)
      //IF (MarketingSetup."Central Management") AND (Operation = 3) THEN
      //  ERROR(Text099, BusRelRec.TABLECAPTION,
      //    MarketingSetup.FIELDCAPTION("Central Management"), MarketingSetup."Central Management");
      //**4PS.sn #C011151, #C013740 Central Data Management (rename)

      SetCompRelRecFilter(1);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          BusRelRec2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:BEGIN
                BusRelRec2.COPY(BusRelOldRec);
                BusRelRec2.RESET;
                IF ((BusRelRec2."Link to Table" = BusRelRec2."Link to Table"::Customer) AND MarketingSetup.Customers) OR
                   ((BusRelRec2."Link to Table" = BusRelRec2."Link to Table"::Vendor) AND MarketingSetup.Vendors) THEN
                  IF BusRelRec2.FIND THEN
                    BusRelRec2.RENAME(BusRelRec."No.");
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                BusRelRec2.COPY(BusRelRec);
                BusRelRec2.RESET;
                IF ((BusRelRec2."Link to Table" = BusRelRec2."Link to Table"::Customer) AND MarketingSetup.Customers) OR
                   ((BusRelRec2."Link to Table" = BusRelRec2."Link to Table"::Vendor) AND MarketingSetup.Vendors) THEN
                  IF BusRelRec2.FIND THEN BEGIN
                    BusRelRec2.TRANSFERFIELDS(BusRelRec, FALSE);
                    BusRelRec2.MODIFY;
                  END ELSE
                    BusRelRec2.INSERT;
              END;
            4:BEGIN
                BusRelRec2.COPY(BusRelRec);
                BusRelRec2.RESET;
                IF ((BusRelRec2."Link to Table" = BusRelRec2."Link to Table"::Customer) AND MarketingSetup.Customers) OR
                   ((BusRelRec2."Link to Table" = BusRelRec2."Link to Table"::Vendor) AND MarketingSetup.Vendors) THEN
                  IF BusRelRec2.FIND THEN
                    IF BusRelRec2."No." = BusRelRec."No." THEN
                      BusRelRec2.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    PROCEDURE UpdateCustomer@4(VAR CustomerRec@11012000 : Record 18;Operation@11012001 : Integer;CustOldRec@11012002 : Record 18);
    VAR
      CustRec2@11012003 : Record 18;
      OldRecRef@1100525001 : RecordRef;
      NewRecRef@1100525000 : RecordRef;
    BEGIN
      MarketingSetup.GET;
      IF NOT MarketingSetup."Central Management" OR NOT MarketingSetup.Customers THEN
        EXIT;

      //**4PS.sn #C011151, #C013740 Central Data Management (rename)
      //IF (MarketingSetup."Central Management") AND (Operation = 3) THEN
      //  ERROR(Text099, CustomerRec.TABLECAPTION,
      //    MarketingSetup.FIELDCAPTION("Central Management"), MarketingSetup."Central Management");
      //**4PS.sn #C011151, #C013740 Central Data Management (rename)

      SetCompRelRecFilter(1);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          CustRec2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:BEGIN
                CustRec2.COPY(CustOldRec);
                CustRec2.RESET;
                IF CustRec2.FIND THEN
                  CustRec2.RENAME(CustomerRec."No.");
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                CustRec2.COPY(CustomerRec);
                CustRec2.RESET;
                IF NOT CustRec2.FIND THEN BEGIN
                  CustRec2.InitRecord(CompRelationRec.Company, FALSE);
                  CustRec2.INSERT;
                  OldRecRef.GETTABLE(CustomerRec);
                  NewRecRef.GETTABLE(CustRec2);
                  ExcludeFieldsFromExchange(OldRecRef, NewRecRef, FALSE);
                  NewRecRef.MODIFY;
                END ELSE BEGIN
                  OldRecRef.GETTABLE(CustRec2);
                  CustRec2.TRANSFERFIELDS(CustomerRec,FALSE);
                  NewRecRef.GETTABLE(CustRec2);
                  ExcludeFieldsFromExchange(OldRecRef, NewRecRef, TRUE);
                  NewRecRef.MODIFY;
                END;
                EditCommentLine(18, CustomerRec."No.");  //db, 03-01-07
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    PROCEDURE RemoveCustomer@9(CustomerRec@11012000 : Record 18);
    BEGIN
      MarketingSetup.GET;
      IF NOT MarketingSetup."Central Management" OR NOT MarketingSetup.Customers THEN
        EXIT;

      SetCompRelRecFilter(1);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          CustomerRec.CHANGECOMPANY(CompRelationRec.Company);
          CustomerRec.CheckAndRemoveRelatedRecordsStandard;
          CustomerRec.CheckAndRemoveRelatedRecords4PS;

          RemoveCustUpdateProspect(CustomerRec);

          IF CustomerRec.FIND THEN
            CustomerRec.DELETE;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    PROCEDURE RemoveCustUpdateProspect@10(CustomerRec@11012000 : Record 18);
    VAR
      BusRelRec@11012001 : Record 5054;
    BEGIN
      MarketingSetup.GET;
      IF NOT MarketingSetup."Central Management" OR NOT MarketingSetup.Customers THEN
        EXIT;

      //X016.sn
      LeadingCompany := CompRelationRec.GetLeadingCompany(DATABASE::"Marketing Setup",MarketingSetup."Central Management");
      IF COMPANYNAME <> LeadingCompany THEN
        EXIT;
      //X016.en

      SetCompRelRecFilter(1);
      BusRelRec.CHANGECOMPANY(CompRelationRec.Company);
      BusRelRec.SETCURRENTKEY("Link to Table", "No.");
      BusRelRec.SETRANGE("No.",CustomerRec."No.");
      BusRelRec.SETRANGE("Link to Table", BusRelRec."Link to Table"::Customer);
      BusRelRec.DELETEALL;
    END;

    PROCEDURE EditCustomerBank@19(VAR CustBank@11012000 : Record 287;Operation@11012001 : Integer;OldCustomerBank@11012002 : Record 287);
    VAR
      CustomerBank2@11012003 : Record 287;
      OldRecRef@1100525001 : RecordRef;
      NewRecRef@1100525000 : RecordRef;
    BEGIN
      MarketingSetup.GET;
      IF NOT MarketingSetup."Central Management" OR NOT MarketingSetup.Customers THEN
        EXIT;

      //**4PS.sn #C011151, #C013740 Central Data Management (rename)
      //IF (MarketingSetup."Central Management") AND (Operation = 3) THEN
      //  ERROR(Text099, CustBank.TABLECAPTION,
      //    MarketingSetup.FIELDCAPTION("Central Management"), MarketingSetup."Central Management");
      //**4PS.sn #C011151, #C013740 Central Data Management (rename)

      SetCompRelRecFilter(1);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          CustomerBank2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:BEGIN
                CustomerBank2.COPY(OldCustomerBank);
                CustomerBank2.RESET;
                IF CustomerBank2.FIND THEN
                  CustomerBank2.RENAME(CustBank."Customer No.",CustBank.Code);
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                CustomerBank2.COPY(CustBank);
                CustomerBank2.RESET;

                //C011471
                IF NOT CustomerBank2.FIND THEN
                  CustomerBank2.INSERT
                ELSE BEGIN
                  OldRecRef.GETTABLE(CustomerBank2);
                  CustomerBank2.TRANSFERFIELDS(CustBank,FALSE);
                  NewRecRef.GETTABLE(CustomerBank2);
                  ExcludeFieldsFromExchange(OldRecRef, NewRecRef, TRUE);
                  NewRecRef.MODIFY;
                END;

              END;
            4:BEGIN
                CustomerBank2.COPY(CustBank);
                CustomerBank2.RESET;
                IF CustomerBank2.FIND THEN
                  CustomerBank2.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    [External]
    PROCEDURE EditShipToAddr@1210190012(VAR ShipToAddr@11012000 : Record 222;Operation@11012001 : Integer;OldShipToAddr@11012002 : Record 222);
    VAR
      ShipToAddr2@11012003 : Record 222;
    BEGIN
      MarketingSetup.GET;
      IF NOT MarketingSetup."Central Management" OR NOT MarketingSetup.Customers OR
         NOT MarketingSetup."Customer Addresses"
      THEN
        EXIT;

      //**4PS.sn #C011151, #C013740 Central Data Management (rename)
      //IF (MarketingSetup."Central Management") AND (Operation = 3) THEN
      //  ERROR(Text099, ShipToAddr.TABLECAPTION,
      //    MarketingSetup.FIELDCAPTION("Central Management"), MarketingSetup."Central Management");
      //**4PS.sn #C011151, #C013740 Central Data Management (rename)

      SetCompRelRecFilter(1);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          ShipToAddr2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:BEGIN
                ShipToAddr2.COPY(OldShipToAddr);
                ShipToAddr2.RESET;
                IF ShipToAddr2.FIND THEN
                  ShipToAddr2.RENAME(ShipToAddr."Customer No.",ShipToAddr.Code);
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                ShipToAddr2.COPY(ShipToAddr);
                ShipToAddr2.RESET;
                IF ShipToAddr2.FIND THEN BEGIN
                  ShipToAddr2.TRANSFERFIELDS(ShipToAddr, FALSE);
                  ShipToAddr2.MODIFY;
                END ELSE
                  ShipToAddr2.INSERT;
              END;
            4:BEGIN
                ShipToAddr2.COPY(ShipToAddr);
                ShipToAddr2.RESET;
                IF ShipToAddr2.FIND THEN
                  ShipToAddr2.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    [External]
    PROCEDURE EditCreditLimitByDate@1100528302(VAR CreditLimitByDate@11012000 : Record 11071869;Operation@11012001 : Integer;OldCreditLimitByDate@11012002 : Record 11071869);
    VAR
      CreditLimitByDate2@11012003 : Record 11071869;
    BEGIN
      MarketingSetup.GET;
      IF NOT MarketingSetup."Central Management" OR NOT MarketingSetup.Customers OR
         NOT MarketingSetup."Credit Limit by Date"
      THEN
        EXIT;

      //**4PS.sn #C011151, #C013740 Central Data Management (rename)
      //IF (MarketingSetup."Central Management") AND (Operation = 3) THEN
      //  ERROR(Text099, CreditLimitByDate.TABLECAPTION,
      //    MarketingSetup.FIELDCAPTION("Central Management"), MarketingSetup."Central Management");
      //**4PS.sn #C011151, #C013740 Central Data Management (rename)

      SetCompRelRecFilter(1);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          CreditLimitByDate2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:BEGIN
                CreditLimitByDate2.COPY(OldCreditLimitByDate);
                CreditLimitByDate2.RESET;
                IF CreditLimitByDate2.FIND THEN
                  CreditLimitByDate2.RENAME(CreditLimitByDate."Customer No.", CreditLimitByDate."Start Date");
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                CreditLimitByDate2.COPY(CreditLimitByDate);
                CreditLimitByDate2.RESET;
                IF CreditLimitByDate2.FIND THEN BEGIN
                  CreditLimitByDate2.TRANSFERFIELDS(CreditLimitByDate, FALSE);
                  CreditLimitByDate2.MODIFY;
                END ELSE
                  CreditLimitByDate2.INSERT;
              END;
            4:BEGIN
                CreditLimitByDate2.COPY(CreditLimitByDate);
                CreditLimitByDate2.RESET;
                IF CreditLimitByDate2.FIND THEN
                  CreditLimitByDate2.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    PROCEDURE EditVendor@5(VAR VendorRec@11012000 : Record 23;Operation@11012001 : Integer;OldVendorRec@11012002 : Record 23);
    VAR
      VendorRec2@11012003 : Record 23;
      OldRecRef@1100525001 : RecordRef;
      NewRecRef@1100525000 : RecordRef;
      lvBackup@1100525008 : Text[30];
    BEGIN
      MarketingSetup.GET;
      IF NOT MarketingSetup."Central Management" OR NOT MarketingSetup.Vendors THEN
        EXIT;

      //**4PS.sn #C011151, #C013740 Central Data Management (rename)
      //IF (MarketingSetup."Central Management") AND (Operation = 3) THEN
      //  ERROR(Text099, VendorRec.TABLECAPTION,
      //    MarketingSetup.FIELDCAPTION("Central Management"), MarketingSetup."Central Management");
      //**4PS.sn #C011151, #C013740 Central Data Management (rename)

      SetCompRelRecFilter(1);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          VendorRec2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:BEGIN
                VendorRec2.COPY(OldVendorRec);
                VendorRec2.RESET;
                IF VendorRec2.FIND THEN BEGIN
                  VendorRec2.SetSkipCentralDataMgtInOnRename(TRUE);
                  VendorRec2.ExchangeMOB('R', CompRelationRec.Company);
                  VendorRec2.RENAME(VendorRec."No.");
                END;
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                VendorRec2.COPY(VendorRec);
                VendorRec2.RESET;
                IF NOT VendorRec2.FIND THEN BEGIN
                  VendorRec2.InitRecord(CompRelationRec.Company, FALSE);
                  VendorRec2.INSERT;
                  OldRecRef.GETTABLE(VendorRec);
                  NewRecRef.GETTABLE(VendorRec2);
                  ExcludeFieldsFromExchange(OldRecRef, NewRecRef, FALSE);
                  NewRecRef.MODIFY;
                END ELSE BEGIN
                  OldRecRef.GETTABLE(VendorRec2);
                  VendorRec2.TRANSFERFIELDS(VendorRec,FALSE);
                  NewRecRef.GETTABLE(VendorRec2);
                  ExcludeFieldsFromExchange(OldRecRef, NewRecRef, TRUE);
                  NewRecRef.MODIFY;
                  NewRecRef.SETTABLE(VendorRec2);
                END;
                IF VendorRec2."Pathname Purchase Exchange" <> '' THEN BEGIN
                  VendorRec2.SetFoldersPurchaseExchange(lvBackup); //db, 05-04-13: C006669
                  VendorRec2.MODIFY;
                END;
                EditCommentLine(23, VendorRec."No.");
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    PROCEDURE RemoveVendor@11(VendorRec@11012000 : Record 23);
    VAR
      CommentLine@11012001 : Record 97;
      VendBankAcc@11012002 : Record 288;
      SellToAddr@11012003 : Record 224;
      PurchOrderLine@11012004 : Record 39;
      VendorWKACheck@1100485000 : Record 11020276;
      VendorCertificate@1100525000 : Record 11020413;
      EmployeePerVendor@1100409000 : Record 11020693;
    BEGIN
      MarketingSetup.GET;
      IF NOT MarketingSetup."Central Management" OR NOT MarketingSetup.Vendors THEN
        EXIT;

      SetCompRelRecFilter(1);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          MoveVendorEntry(VendorRec);

          CommentLine.CHANGECOMPANY(CompRelationRec.Company);
          CommentLine.SETRANGE("Table Name",CommentLine."Table Name"::Vendor);
          CommentLine.SETRANGE("No.",VendorRec."No.");
          CommentLine.DELETEALL;

          VendBankAcc.CHANGECOMPANY(CompRelationRec.Company);
          VendBankAcc.SETRANGE("Vendor No.",VendorRec."No.");
          VendBankAcc.DELETEALL;

          SellToAddr.CHANGECOMPANY(CompRelationRec.Company);
          SellToAddr.SETRANGE("Vendor No.",VendorRec."No.");
          SellToAddr.DELETEALL;

          PurchOrderLine.CHANGECOMPANY(CompRelationRec.Company);
          PurchOrderLine.SETCURRENTKEY("Document Type","Pay-to Vendor No.");
          PurchOrderLine.SETRANGE("Document Type",PurchOrderLine."Document Type"::Order);
          PurchOrderLine.SETRANGE("Pay-to Vendor No.",VendorRec."No.");
          IF PurchOrderLine.FINDFIRST THEN
            ERROR(
              Text002,
              PurchOrderLine.TABLECAPTION,VendorRec."No.",CompRelationRec.Company);

          VendorWKACheck.CHANGECOMPANY(CompRelationRec.Company);
          VendorWKACheck.SETRANGE("Vendor No.", VendorRec."No.");
          VendorWKACheck.DELETEALL;

          VendorCertificate.CHANGECOMPANY(CompRelationRec.Company);
          VendorCertificate.SETRANGE("Vendor No.", VendorRec."No.");
          VendorCertificate.DELETEALL;

          EmployeePerVendor.CHANGECOMPANY(CompRelationRec.Company);
          EmployeePerVendor.SETRANGE("Vendor No.", VendorRec."No.");
          EmployeePerVendor.DELETEALL;

          RemoveVendorUpdateProspect(VendorRec);

          VendorRec.CHANGECOMPANY(CompRelationRec.Company);
          IF VendorRec.FIND THEN BEGIN
            VendorRec.ExchangeMOB('D', CompRelationRec.Company);
            VendorRec.DELETE;
          END;

        UNTIL CompRelationRec.NEXT = 0;
    END;

    PROCEDURE RemoveVendorUpdateProspect@12(VendorRec@11012000 : Record 23);
    VAR
      BusRelRec@11012001 : Record 5054;
    BEGIN
      MarketingSetup.GET;
      IF NOT MarketingSetup."Central Management" OR NOT MarketingSetup.Vendors THEN
        EXIT;

      //X016.sn
      LeadingCompany := CompRelationRec.GetLeadingCompany(DATABASE::"Marketing Setup",MarketingSetup."Central Management");
      IF COMPANYNAME <> LeadingCompany THEN
        EXIT;
      //X016.en

      SetCompRelRecFilter(1);
      BusRelRec.CHANGECOMPANY(CompRelationRec.Company);
      BusRelRec.SETCURRENTKEY("Link to Table", "No.");
      BusRelRec.SETRANGE("No.",VendorRec."No.");
      BusRelRec.SETRANGE("Link to Table", BusRelRec."Link to Table"::Vendor);
      BusRelRec.DELETEALL;
    END;

    PROCEDURE UpdateVendorBank@22(VAR VendorBank@11012000 : Record 288;Operation@11012001 : Integer;VendBankOld@11012002 : Record 288);
    VAR
      VendBank2@11012003 : Record 288;
    BEGIN
      MarketingSetup.GET;
      IF NOT MarketingSetup."Central Management" OR NOT MarketingSetup.Vendors THEN
        EXIT;

      //**4PS.sn #C011151, #C013740 Central Data Management (rename)
      //IF (MarketingSetup."Central Management") AND (Operation = 3) THEN
      //  ERROR(Text099, VendorBank.TABLECAPTION,
      //    MarketingSetup.FIELDCAPTION("Central Management"), MarketingSetup."Central Management");
      //**4PS.sn #C011151, #C013740 Central Data Management (rename)

      SetCompRelRecFilter(1);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          VendBank2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:BEGIN
                VendBank2.COPY(VendBankOld);
                VendBank2.RESET;
                IF VendBank2.FIND THEN
                  VendBank2.RENAME(VendorBank."Vendor No.",VendorBank.Code);
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                VendBank2.COPY(VendorBank);
                VendBank2.RESET;
                IF VendBank2.FIND THEN BEGIN
                  VendBank2.TRANSFERFIELDS(VendorBank, FALSE);
                  VendBank2.MODIFY;
                END ELSE
                  VendBank2.INSERT;
              END;
            4:BEGIN
                VendBank2.COPY(VendorBank);
                VendBank2.RESET;
                IF VendBank2.FIND THEN
                  VendBank2.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    [External]
    PROCEDURE UpdateVendorWKACheck@1100485003(VAR VendorWKACheck@11012000 : Record 11020276;Operation@11012001 : Integer;VendorWKACheckOld@11012002 : Record 11020276);
    VAR
      VendorWKACheck2@11012003 : Record 11020276;
    BEGIN
      MarketingSetup.GET;
      IF NOT MarketingSetup."Central Management" OR NOT MarketingSetup.Vendors THEN
        EXIT;

      //**4PS.sn #C011151, #C013740 Central Data Management (rename)
      //IF (MarketingSetup."Central Management") AND (Operation = 3) THEN
      //  ERROR(Text099, VendorWKACheck.TABLECAPTION,
      //    MarketingSetup.FIELDCAPTION("Central Management"), MarketingSetup."Central Management");
      //**4PS.sn #C011151, #C013740 Central Data Management (rename)

      SetCompRelRecFilter(1);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          VendorWKACheck2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:BEGIN
                VendorWKACheck2.COPY(VendorWKACheckOld);
                VendorWKACheck2.RESET;
                IF VendorWKACheck2.FIND THEN
                  VendorWKACheck2.RENAME(VendorWKACheck."Vendor No.",VendorWKACheck.Code);
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                VendorWKACheck2.COPY(VendorWKACheck);
                VendorWKACheck2.RESET;
                IF VendorWKACheck2.FIND THEN BEGIN
                  VendorWKACheck2.TRANSFERFIELDS(VendorWKACheck, FALSE);
                  VendorWKACheck2.MODIFY;
                END ELSE
                  VendorWKACheck2.INSERT;
              END;
            4:BEGIN
                VendorWKACheck2.COPY(VendorWKACheck);
                VendorWKACheck2.RESET;
                IF VendorWKACheck2.FIND THEN
                  VendorWKACheck2.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    [External]
    PROCEDURE UpdateVendorCertificate@1100525002(VAR VendorCertificate@11012000 : Record 11020413;Operation@11012001 : Integer;VendorCertificateOld@11012002 : Record 11020413);
    VAR
      VendorCertificate2@11012003 : Record 11020413;
    BEGIN
      MarketingSetup.GET;
      IF NOT MarketingSetup."Central Management" OR NOT MarketingSetup.Vendors THEN
        EXIT;

      //**4PS.sn #C011151, #C013740 Central Data Management (rename)
      //IF (MarketingSetup."Central Management") AND (Operation = 3) THEN
      //  ERROR(Text099, VendorCertificate.TABLECAPTION,
      //    MarketingSetup.FIELDCAPTION("Central Management"), MarketingSetup."Central Management");
      //**4PS.sn #C011151, #C013740 Central Data Management (rename)

      SetCompRelRecFilter(1);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          VendorCertificate2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:BEGIN
                VendorCertificate2.COPY(VendorCertificateOld);
                VendorCertificate2.RESET;
                IF VendorCertificate2.FIND THEN
                  VendorCertificate2.RENAME(VendorCertificate."Vendor No.", VendorCertificate."Line No.");
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                VendorCertificate2.COPY(VendorCertificate);
                VendorCertificate2.RESET;
                IF VendorCertificate2.FIND THEN BEGIN
                  VendorCertificate2.TRANSFERFIELDS(VendorCertificate, FALSE);
                  VendorCertificate2.MODIFY;
                END ELSE
                  VendorCertificate2.INSERT;
              END;
            4:BEGIN
                VendorCertificate2.COPY(VendorCertificate);
                VendorCertificate2.RESET;
                IF VendorCertificate2.FIND THEN
                  VendorCertificate2.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    [External]
    PROCEDURE EditPaymentAgreement@1100485004(VAR PaymentAgreement@1100485000 : Record 11012028;Operation@1100485001 : Integer;OldPaymentAgreement@1100485002 : Record 11012028);
    VAR
      PaymentAgreement2@1100485003 : Record 11012028;
    BEGIN
      MarketingSetup.GET;
      IF NOT MarketingSetup."Central Management" OR NOT MarketingSetup."Payment Agreements" THEN
        EXIT;

      //**4PS.sn #C011151, #C013740 Central Data Management (rename)
      //IF (MarketingSetup."Central Management") AND (Operation = 3) THEN
      //  ERROR(Text099, PaymentAgreement.TABLECAPTION,
      //    MarketingSetup.FIELDCAPTION("Central Management"), MarketingSetup."Central Management");
      //**4PS.sn #C011151, #C013740 Central Data Management (rename)

      SetCompRelRecFilter(1);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          PaymentAgreement2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:BEGIN
                PaymentAgreement2.COPY(OldPaymentAgreement);
                PaymentAgreement2.RESET;
                IF PaymentAgreement2.FIND THEN
                  PaymentAgreement2.RENAME(PaymentAgreement.Code);
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                PaymentAgreement2.COPY(PaymentAgreement);
                PaymentAgreement2.RESET;
                IF PaymentAgreement2.FIND THEN BEGIN
                  PaymentAgreement2.TRANSFERFIELDS(PaymentAgreement, FALSE);
                  PaymentAgreement2.MODIFY;
                END ELSE
                  PaymentAgreement2.INSERT;
              END;
            4:BEGIN
                PaymentAgreement2.COPY(PaymentAgreement);
                PaymentAgreement2.RESET;
                IF PaymentAgreement2.FIND THEN
                  PaymentAgreement2.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    [External]
    PROCEDURE EditEmployeePerVendor@1100528702(VAR EmployeePerVendor@1100485000 : Record 11020693;Operation@1100485001 : Integer;OldEmployeePerVendor@1100485002 : Record 11020693);
    VAR
      EmployeePerVendor2@1100485003 : Record 11020693;
    BEGIN
      MarketingSetup.GET;
      IF NOT MarketingSetup."Central Management" OR NOT MarketingSetup."Vendor Employees" THEN
        EXIT;

      //**4PS.sn #C011151, #C013740 Central Data Management (rename)
      //IF (MarketingSetup."Central Management") AND (Operation = 3) THEN
      //  ERROR(Text099, EmployeePerVendor.TABLECAPTION,
      //    MarketingSetup.FIELDCAPTION("Central Management"), MarketingSetup."Central Management");
      //**4PS.sn #C011151, #C013740 Central Data Management (rename)

      SetCompRelRecFilter(1);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          EmployeePerVendor2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:BEGIN
                EmployeePerVendor2.COPY(OldEmployeePerVendor);
                EmployeePerVendor2.RESET;
                IF EmployeePerVendor2.FIND THEN
                  EmployeePerVendor2.RENAME(EmployeePerVendor."Vendor No.",EmployeePerVendor."Employee No.");
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                EmployeePerVendor2.COPY(EmployeePerVendor);
                EmployeePerVendor2.RESET;
                IF EmployeePerVendor2.FIND THEN BEGIN
                  EmployeePerVendor2.TRANSFERFIELDS(EmployeePerVendor, FALSE);
                  EmployeePerVendor2.MODIFY;
                END ELSE
                  EmployeePerVendor2.INSERT;
              END;
            4:BEGIN
                EmployeePerVendor2.COPY(EmployeePerVendor);
                EmployeePerVendor2.RESET;
                IF EmployeePerVendor2.FIND THEN
                  EmployeePerVendor2.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    [External]
    PROCEDURE EditOrderAddress@1100485018(VAR OrderAddress@1100485000 : Record 224;Operation@1100485001 : Integer;OldOrderAddress@1100485002 : Record 224);
    VAR
      OrderAddress2@1100485003 : Record 224;
    BEGIN
      //**4PS02.n
      MarketingSetup.GET;
      IF NOT MarketingSetup."Central Management" OR NOT MarketingSetup."Order Addresses" THEN
        EXIT;

      //**4PS.sn #C011151, #C013740 Central Data Management (rename)
      //IF (MarketingSetup."Central Management") AND (Operation = 3) THEN
      //  ERROR(Text099, OrderAddress.TABLECAPTION,
      //    MarketingSetup.FIELDCAPTION("Central Management"), MarketingSetup."Central Management");
      //**4PS.sn #C011151, #C013740 Central Data Management (rename)

      SetCompRelRecFilter(1);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          OrderAddress2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:BEGIN
                OrderAddress2.COPY(OldOrderAddress);
                OrderAddress2.RESET;
                IF OrderAddress2.FIND THEN
                  OrderAddress2.RENAME(OrderAddress."Vendor No." ,OrderAddress.Code);
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                OrderAddress2.COPY(OrderAddress);
                OrderAddress2.RESET;
                IF OrderAddress2.FIND THEN BEGIN
                  OrderAddress2.TRANSFERFIELDS(OrderAddress, FALSE);
                  OrderAddress2.MODIFY;
                END ELSE
                  OrderAddress2.INSERT;
              END;
            4:BEGIN
                OrderAddress2.COPY(OrderAddress);
                OrderAddress2.RESET;
                IF OrderAddress2.FIND THEN
                  OrderAddress2.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    [External]
    PROCEDURE EditVendorCategory@1100528900(VAR VendorCategory@1100485000 : Record 11071892;Operation@1100485001 : Integer;OldVendorCategory@1100485002 : Record 11071892);
    VAR
      VendorCategory2@1100485003 : Record 11071892;
      RecType@1100529601 : ' ,Vendor,Contact';
      GetValue@1100529600 : Boolean;
    BEGIN
      //DP00268
      MarketingSetup.GET;
      IF NOT MarketingSetup."Central Management" OR
         NOT (MarketingSetup."Vendor Categories" OR MarketingSetup."Vendor Categories (Contact)")
      THEN
        EXIT;

      IF MarketingSetup."Vendor Categories" AND NOT MarketingSetup."Vendor Categories (Contact)" THEN BEGIN
        IF (VendorCategory."Vendor No." = '') AND
           ((Operation <> 3) OR
           ((Operation = 3) AND (OldVendorCategory."Vendor No." = '')))
        THEN
          EXIT;
        RecType := RecType::Contact;
        GetValue := MarketingSetup.Companies;
      END;

      IF NOT MarketingSetup."Vendor Categories" AND MarketingSetup."Vendor Categories (Contact)" THEN BEGIN
        IF (VendorCategory."Contact No." = '') AND
           ((Operation <> 3) OR
           ((Operation = 3) AND (OldVendorCategory."Contact No." = '')))
        THEN
          EXIT;
        RecType := RecType::Vendor;
        GetValue := MarketingSetup.Vendors;
      END;

      //**4PS.sn #C011151, #C013740 Central Data Management (rename)
      //IF (MarketingSetup."Central Management") AND (Operation = 3) THEN
      //  ERROR(Text099, VendorCategory.TABLECAPTION,
      //    MarketingSetup.FIELDCAPTION("Central Management"), MarketingSetup."Central Management");
      //**4PS.sn #C011151, #C013740 Central Data Management (rename)

      SetCompRelRecFilter(1);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          VendorCategory2.CHANGECOMPANY(CompRelationRec.Company);
          IF Operation = 3 THEN BEGIN
            VendorCategory2.COPY(OldVendorCategory);
            VendorCategory2.SetContactOrVendor(RecType, GetValue);
            VendorCategory2.RESET;
            IF VendorCategory2.FIND THEN
              VendorCategory2.DELETE;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                VendorCategory2.COPY(VendorCategory);
                VendorCategory2.SetContactOrVendor(RecType, GetValue);
                VendorCategory2.RESET;
                IF VendorCategory2.FIND THEN BEGIN
                  VendorCategory2.TRANSFERFIELDS(VendorCategory, FALSE);
                  VendorCategory2.MODIFY;
                END ELSE
                  VendorCategory2.INSERT;
              END;
            4:BEGIN
                VendorCategory2.COPY(VendorCategory);
                VendorCategory2.SetContactOrVendor(RecType, GetValue);
                VendorCategory2.RESET;
                IF VendorCategory2.FIND THEN
                  VendorCategory2.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    PROCEDURE MoveVendorEntry@18(Vendor@11012000 : Record 23);
    VAR
      VendLedgerEntry@11012001 : Record 25;
      AccountingPeriod@11012002 : Record 50;
    BEGIN
      VendLedgerEntry.CHANGECOMPANY(CompRelationRec.Company);
      AccountingPeriod.CHANGECOMPANY(CompRelationRec.Company);

      VendLedgerEntry.LOCKTABLE;

      VendLedgerEntry.RESET;
      VendLedgerEntry.SETCURRENTKEY("Vendor No.","Posting Date");
      VendLedgerEntry.SETRANGE("Vendor No.",Vendor."No.");
      AccountingPeriod.SETRANGE(Closed,FALSE);
      IF AccountingPeriod.FINDFIRST THEN
        VendLedgerEntry.SETFILTER("Posting Date",'>=%1',AccountingPeriod."Starting Date");
      IF VendLedgerEntry.FINDFIRST THEN
        ERROR(
          Text005,
          Vendor.TABLECAPTION,Vendor."No.",CompRelationRec.Company);

      VendLedgerEntry.RESET;
      IF NOT VendLedgerEntry.SETCURRENTKEY("Vendor No.",Open) THEN
        VendLedgerEntry.SETCURRENTKEY("Vendor No.");
      VendLedgerEntry.SETRANGE("Vendor No.",Vendor."No.");
      VendLedgerEntry.SETRANGE(Open,TRUE);
      IF VendLedgerEntry.FINDLAST THEN
        ERROR(
          Text004,
          Vendor.TABLECAPTION,Vendor."No.",CompRelationRec.Company);

      VendLedgerEntry.SETRANGE(Open);
      VendLedgerEntry.MODIFYALL("Vendor No.",'');
    END;

    PROCEDURE MoveItemEntry@41(Item@11012000 : Record 27);
    VAR
      ItemLedgEntry@11012001 : Record 32;
      AccountingPeriod@11012002 : Record 50;
    BEGIN
      ItemLedgEntry.CHANGECOMPANY(CompRelationRec.Company);
      AccountingPeriod.CHANGECOMPANY(CompRelationRec.Company);

      ItemLedgEntry.LOCKTABLE;

      ItemLedgEntry.RESET;
      ItemLedgEntry.SETCURRENTKEY("Item No.");
      ItemLedgEntry.SETRANGE("Item No.",Item."No.");
      AccountingPeriod.SETRANGE(Closed,FALSE);
      IF AccountingPeriod.FINDFIRST THEN
        ItemLedgEntry.SETFILTER("Posting Date",'>=%1',AccountingPeriod."Starting Date");
      IF ItemLedgEntry.FINDFIRST THEN
        ERROR(
          Text006,
          Item.TABLECAPTION,Item."No.");

      ItemLedgEntry.RESET;
      IF NOT ItemLedgEntry.SETCURRENTKEY("Item No.","Variant Code",Open) THEN
        ItemLedgEntry.SETCURRENTKEY("Item No.");
      ItemLedgEntry.SETRANGE("Item No.",Item."No.");
      ItemLedgEntry.SETRANGE(Open,TRUE);
      IF ItemLedgEntry.FINDLAST THEN
        ERROR(
          Text007,
          Item.TABLECAPTION,Item."No.");

      IF Item."Costing Method" = Item."Costing Method"::Average THEN BEGIN
        ItemLedgEntry.SETRANGE(Open,FALSE);
        IF ItemLedgEntry.FINDFIRST THEN
          ERROR(
            Text008 +
            Text009 +
            Text010,
            Item."No.",Text011);
      END;

      ItemLedgEntry.SETRANGE(Open);
      ItemLedgEntry.MODIFYALL("Item No.",'');
    END;

    PROCEDURE EditItem@38(VAR ItemRec@11012000 : Record 27;Operation@11012001 : Integer;ItemOldRec@11012002 : Record 27);
    VAR
      ItemRec2@11012003 : Record 27;
      OldRecRef@1100528801 : RecordRef;
      NewRecRef@1100528800 : RecordRef;
      ItemOldDecentral@1100525000 : Record 27;
      TenantMedia@1100528205 : Record 2000000184;
      TenantMediaSet@1100528206 : Record 2000000183;
      ImportID@1100528204 : Variant;
    BEGIN
      InventorySetup.GET;
      IF NOT InventorySetup."Central Management" OR NOT InventorySetup."Navision-Items" THEN
        EXIT;

      //**4PS.sn #C011151, #C013740 Central Data Management (rename)
      //IF (InventorySetup."Central Management") AND (Operation = 3) THEN
      //  ERROR(Text099, ItemRec.TABLECAPTION,
      //    InventorySetup.FIELDCAPTION("Central Management"), InventorySetup."Central Management");
      //**4PS.sn #C011151, #C013740 Central Data Management (rename)

      SetCompRelRecFilter(2);
      IF CompRelationRec.FINDSET THEN BEGIN
        REPEAT
          ItemRec2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:BEGIN
                ItemRec2.COPY(ItemOldRec);
                ItemRec2.RESET;
                IF ItemRec2.FIND THEN BEGIN
                  ItemRec2.SetSkipCentralDataMgtInOnRename(TRUE);
                  ItemRec2.StoreDeletedData('R', CompRelationRec.Company);
                  ItemRec2.RENAME(ItemRec."No.");
                END;
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                //db.sn, 04-03-13: C010118
                ItemRec2.COPY(ItemRec);
                ItemRec2.RESET;
                IF NOT ItemRec2.FIND THEN
                  ItemRec2.INSERT;
                OldRecRef.GETTABLE(ItemRec2);
                ItemOldDecentral := ItemRec2; //T004616
                ItemRec2.TRANSFERFIELDS(ItemRec, FALSE); //kzwerver.c, #T004548
                NewRecRef.GETTABLE(ItemRec2);
                ExcludeFieldsFromExchange(OldRecRef, NewRecRef, TRUE);
                NewRecRef.SETTABLE(ItemRec2);
                ItemRec2.CALCFIELDS(Inventory);
                IF ItemRec2.Inventory <> 0 THEN BEGIN  //db, 30-01-14: C009371
                  //ItemRec2."Unit Cost" := ItemOldRec."Unit Cost";
                  //ItemRec2."Standard Cost" := ItemOldRec."Standard Cost";
                  ItemRec2."Unit Cost" := ItemOldDecentral."Unit Cost"; //T004616
                  ItemRec2."Standard Cost" := ItemOldDecentral."Standard Cost"; //T004616
                END;
                ItemRec2.MODIFY;
                //db.en, 04-03-13: C010118
                ItemRec2.CALCFIELDS("Vendor (Trade Item)","Item Vendor");
                IF (ItemRec2."Vendor (Trade Item)" <> '') AND (ItemRec2."Item Vendor" <> '') THEN BEGIN
                  IF ProcessItemRelation(ItemRec2."No.",ItemRec2."Vendor No.",ItemRec2."Vendor Item No.") THEN
                    ItemRec2.MODIFY;
                END;

                //handle media datafield Picture sn
                IF ItemRec.Picture.COUNT > 0 THEN BEGIN
                  ImportID := ItemRec2.Picture.MEDIAID;
                  TenantMediaSet.SETRANGE(ID, ImportID);
                  IF TenantMediaSet.FINDSET THEN BEGIN
                     TenantMediaSet."Company Name" := '';
                     TenantMediaSet.MODIFY;
                     ImportID := TenantMediaSet."Media ID".MEDIAID;
                     IF TenantMedia.GET(ImportID) THEN BEGIN
                       TenantMedia."Company Name" := '';
                       TenantMedia.MODIFY;
                     END;
                  END;
                END ELSE BEGIN
                //**no new picture present
                    CLEAR(ItemRec2.Picture);
                END;
                //handle media field Picture en

                EditSubItem(ItemRec,Operation);  //db, 25-03-14: C010118+T004548
                UpdateSKUFromItem(ItemRec2, CompRelationRec.Company);  //db, 30-10-07
              END;
            4:BEGIN
                MoveItemEntry(ItemRec);
                EditSubItem(ItemRec,Operation);  //db, 06-07-05 (call 6921)
                ItemRec2.COPY(ItemRec);
                ItemRec2.RESET;
                IF ItemRec2.FIND THEN
                  ItemRec2.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
      END;
    END;

    [External]
    PROCEDURE ProcessItemRelation@1100525012(NAVItem@1210190011 : Code[20];VAR ETIMVendorNo@1100525001 : Code[20];VAR ETIMVendorItemNo@1210190016 : Text) ItemRelationFound : Boolean;
    VAR
      ItemRelation@1100525003 : Record 11012319;
      ETIMVendorLocalMgt@11012005 : Record 11012313;
    BEGIN
      ItemRelation.CHANGECOMPANY(CompRelationRec.Company);
      ETIMVendorLocalMgt.CHANGECOMPANY(CompRelationRec.Company);
      IF ItemRelation.GET(NAVItem) THEN
        IF ItemRelation."Source Type" = ItemRelation."Source Type"::"Trade Item" THEN BEGIN
          IF ETIMVendorLocalMgt.GET(ItemRelation.Vendor) THEN BEGIN
              ETIMVendorNo := ETIMVendorLocalMgt."Vendor (Purchase)";
              ETIMVendorItemNo := ItemRelation."Trade Item";
              ItemRelationFound := TRUE;
          END;
        END;
    END;

    PROCEDURE EditSubItem@39(ItemRec@11012000 : Record 27;Operation@11012001 : Integer);
    VAR
      CommentLine@11012003 : Record 97;
      CommentLine2@11012004 : Record 97;
      ItemVend@11012005 : Record 99;
      ItemVendor2@11012006 : Record 99;
      ItemTranslation@11012009 : Record 30;
      ItemTranslation2@11012010 : Record 30;
      ItemUnit@11012011 : Record 5404;
      ItemUnit2@11012012 : Record 5404;
      ItemVariant@11012013 : Record 5401;
      ItemVariant2@11012014 : Record 5401;
      BOMComp@11012015 : Record 90;
      BOMComp2@11012016 : Record 90;
      TextHeader@11012017 : Record 279;
      TextHeader2@11012018 : Record 279;
      TextLine@11012019 : Record 280;
      TextLine2@11012020 : Record 280;
      PurchOrderLine@11012025 : Record 39;
      SalesOrderLine@11012026 : Record 37;
      ProdOrderLine@11012027 : Record 5406;
      ProdOrderComponent@11012028 : Record 5407;
      ItemRelation@11012029 : Record 11012319;
      SalesPrice@1210190000 : Record 7002;
      SalesLineDisc@1210190001 : Record 7004;
      PurchasePrice@1210190002 : Record 7012;
      PurchaseLineDiscount@1210190003 : Record 7014;
    BEGIN
      //db, 06-07-05 (call 6921): deleting not on the basis of ItemOldRec

      IF Operation = 4 THEN BEGIN   //**delete
        PurchOrderLine.CHANGECOMPANY(CompRelationRec.Company);
        PurchOrderLine.SETCURRENTKEY(Type,"No.");
        PurchOrderLine.SETRANGE(Type, PurchOrderLine.Type::Item);
        PurchOrderLine.SETRANGE("No.", ItemRec."No.");
        IF PurchOrderLine.FINDFIRST THEN
          ERROR(Text013, ItemRec."No.");

        SalesOrderLine.CHANGECOMPANY(CompRelationRec.Company);
        SalesOrderLine.SETCURRENTKEY(Type,"No.");
        SalesOrderLine.SETRANGE(Type, SalesOrderLine.Type::Item);
        SalesOrderLine.SETRANGE("No.", ItemRec."No.");
        IF SalesOrderLine.FINDFIRST THEN
          ERROR(Text014, ItemRec."No.");

        ProdOrderLine.CHANGECOMPANY(CompRelationRec.Company);
        ProdOrderLine.SETCURRENTKEY("Item No.");
        ProdOrderLine.SETRANGE("Item No.", ItemRec."No.");
        IF ProdOrderLine.FINDFIRST THEN
          ERROR(Text015, ItemRec."No.");

        ProdOrderComponent.CHANGECOMPANY(CompRelationRec.Company);
        ProdOrderComponent.SETCURRENTKEY("Item No.");
        ProdOrderComponent.SETRANGE("Item No.", ItemRec."No.");
        IF ProdOrderComponent.FINDFIRST THEN
          ERROR(
            Text016,
            Text017, ItemRec."No.");

        ItemRelation.CHANGECOMPANY(CompRelationRec.Company);
        ItemRelation.SETRANGE("Navision Item", ItemRec."No.");
        ItemRelation.DELETEALL;

        SalesPrice.CHANGECOMPANY(CompRelationRec.Company);
        SalesPrice.SETRANGE("Item No.", ItemRec."No.");
        SalesPrice.DELETEALL;

        SalesLineDisc.CHANGECOMPANY(CompRelationRec.Company);
        SalesLineDisc.SETRANGE(Type, SalesLineDisc.Type::Item);
        SalesLineDisc.SETRANGE(Code, ItemRec."No.");
        SalesLineDisc.DELETEALL;

        PurchasePrice.CHANGECOMPANY(CompRelationRec.Company);
        PurchasePrice.SETRANGE("Item No.", ItemRec."No.");
        PurchasePrice.DELETEALL;

        PurchaseLineDiscount.CHANGECOMPANY(CompRelationRec.Company);
        PurchaseLineDiscount.SETRANGE("Item No.", ItemRec."No.");
        PurchaseLineDiscount.DELETEALL;
      END;

      CommentLine2.CHANGECOMPANY(CompRelationRec.Company);
      CommentLine2.SETRANGE("Table Name", CommentLine2."Table Name"::Item);
      CommentLine2.SETRANGE("No.", ItemRec."No.");
      CommentLine2.DELETEALL;

      ItemVendor2.CHANGECOMPANY(CompRelationRec.Company);
      ItemVendor2.SETRANGE("Item No.", ItemRec."No.");
      ItemVendor2.SETRANGE("Local Vendor", FALSE);  //db, 08-01-07
      ItemVendor2.DELETEALL;

      ItemTranslation2.CHANGECOMPANY(CompRelationRec.Company);
      ItemTranslation2.SETRANGE("Item No.", ItemRec."No.");
      ItemTranslation2.DELETEALL;

      ItemUnit2.CHANGECOMPANY(CompRelationRec.Company);
      ItemUnit2.SETRANGE("Item No.", ItemRec."No.");
      ItemUnit2.DELETEALL;

      ItemVariant2.CHANGECOMPANY(CompRelationRec.Company);
      ItemVariant2.SETRANGE("Item No.", ItemRec."No.");
      ItemVariant2.DELETEALL;

      BOMComp2.CHANGECOMPANY(CompRelationRec.Company);
      BOMComp2.SETRANGE("Parent Item No.", ItemRec."No.");
      BOMComp2.DELETEALL;

      IF InventorySetup."Extended Text" THEN BEGIN  //C036683
        TextHeader2.CHANGECOMPANY(CompRelationRec.Company);
        TextHeader2.SETRANGE("Table Name", TextHeader2."Table Name"::Item);
        TextHeader2.SETRANGE("No.", ItemRec."No.");
        TextHeader2.DELETEALL;

        TextLine2.CHANGECOMPANY(CompRelationRec.Company);
        TextLine2.SETRANGE("Table Name", TextLine."Table Name"::Item);
        TextLine2.SETRANGE("No.", ItemRec."No.");
        TextLine2.DELETEALL;
      END;

      IF Operation = 4 THEN EXIT;   //**delete

      CommentLine.CHANGECOMPANY(LeadingCompany);  //C051046
      CommentLine.SETRANGE("Table Name", CommentLine."Table Name"::Item);
      CommentLine.SETRANGE("No.", ItemRec."No.");
      IF CommentLine.FINDSET THEN BEGIN
        REPEAT
          CommentLine2.COPY(CommentLine);
          CommentLine2."No." := ItemRec."No.";
          CommentLine2.INSERT;
        UNTIL CommentLine.NEXT = 0;
      END;

      ItemVend.CHANGECOMPANY(LeadingCompany);  //C051046
      ItemVend.SETRANGE("Item No.", ItemRec."No.");
      IF ItemVend.FINDSET THEN BEGIN
        REPEAT
          ItemVendor2.COPY(ItemVend);
          ItemVendor2."Item No." := ItemRec."No.";
          IF NOT ItemVendor2.INSERT THEN BEGIN
            ItemVendor2."Local Vendor" := FALSE;  //db, 08-01-07
            ItemVendor2.MODIFY;
          END;
        UNTIL ItemVend.NEXT = 0;
      END;

      ItemTranslation.CHANGECOMPANY(LeadingCompany);  //C051046
      ItemTranslation.SETRANGE("Item No.", ItemRec."No.");
      IF ItemTranslation.FINDSET THEN BEGIN
        REPEAT
          ItemTranslation2.COPY(ItemTranslation);
          ItemTranslation2."Item No." := ItemRec."No.";
          ItemTranslation2.INSERT;
        UNTIL ItemTranslation.NEXT = 0;
      END;

      ItemUnit.CHANGECOMPANY(LeadingCompany);  //C051046
      ItemUnit.SETRANGE("Item No.", ItemRec."No.");
      IF ItemUnit.FINDSET THEN BEGIN
        REPEAT
          ItemUnit2.COPY(ItemUnit);
          ItemUnit2."Item No." := ItemRec."No.";
          ItemUnit2.INSERT;
        UNTIL ItemUnit.NEXT = 0;
      END;

      ItemVariant.CHANGECOMPANY(LeadingCompany);  //C051046
      ItemVariant.SETRANGE("Item No.", ItemRec."No.");
      IF ItemVariant.FINDSET THEN BEGIN
        REPEAT
          ItemVariant2.COPY(ItemVariant);
          ItemVariant2."Item No." := ItemRec."No.";
          ItemVariant2.INSERT;
        UNTIL ItemVariant.NEXT = 0;
      END;

      BOMComp.CHANGECOMPANY(LeadingCompany);  //C051046
      BOMComp.SETRANGE("Parent Item No.", ItemRec."No.");
      IF BOMComp.FINDSET THEN BEGIN
        REPEAT
          BOMComp2.COPY(BOMComp);
          BOMComp2."Parent Item No." := ItemRec."No.";
          BOMComp2.INSERT;
        UNTIL BOMComp.NEXT = 0;
      END;

      IF InventorySetup."Extended Text" THEN BEGIN  //C036683
        TextHeader.CHANGECOMPANY(LeadingCompany);  //C051046
        TextHeader.SETRANGE("Table Name", TextHeader."Table Name"::Item);
        TextHeader.SETRANGE("No.", ItemRec."No.");
        IF TextHeader.FINDSET THEN BEGIN
          REPEAT
            TextHeader2.COPY(TextHeader);
            TextHeader2."No." := ItemRec."No.";
            TextHeader2.INSERT;
          UNTIL TextHeader.NEXT = 0;
        END;

        TextLine.CHANGECOMPANY(LeadingCompany);  //C051046
        TextLine.SETRANGE("Table Name", TextLine."Table Name"::Item);
        TextLine.SETRANGE("No.", ItemRec."No.");
        IF TextLine.FINDSET THEN BEGIN
          REPEAT
            TextLine2.COPY(TextLine);
            TextLine2."No." := ItemRec."No.";
            TextLine2.INSERT;
          UNTIL TextLine.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE EditItemRelation@37(VAR ItemRelRec@11012000 : Record 11012319;Operation@11012001 : Integer;ItemRelOldRec@11012002 : Record 11012319);
    VAR
      ItemRelRec2@11012003 : Record 11012319;
    BEGIN
      InventorySetup.GET;
      IF NOT InventorySetup."Central Management" OR NOT InventorySetup."Navision-Items" THEN
        EXIT;

      //**4PS.sn #C011151, #C013740 Central Data Management (rename)
      //IF (InventorySetup."Central Management") AND (Operation = 3) THEN
      //  ERROR(Text099, ItemRelRec.TABLECAPTION,
      //    InventorySetup.FIELDCAPTION("Central Management"), InventorySetup."Central Management");
      //**4PS.sn #C011151, #C013740 Central Data Management (rename)

      SetCompRelRecFilter(2);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          ItemRelRec2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:BEGIN
                ItemRelRec2.COPY(ItemRelOldRec);
                ItemRelRec2.RESET;
                IF ItemRelRec2.FIND THEN
                  ItemRelRec2.RENAME(ItemRelRec."Navision Item");
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                ItemRelRec2.COPY(ItemRelRec);
                ItemRelRec2.RESET;
                IF ItemRelRec2.FIND THEN BEGIN
                  ItemRelRec2.TRANSFERFIELDS(ItemRelRec, FALSE);
                  ItemRelRec2.MODIFY;
                END ELSE
                  ItemRelRec2.INSERT;
              END;
            4:BEGIN
                ItemRelRec2.COPY(ItemRelRec);
                ItemRelRec2.RESET;
                IF ItemRelRec2.FIND THEN
                   ItemRelRec2.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    [External]
    PROCEDURE EditReplaceItem@1100485012(VAR ReplaceItemRec@11012000 : Record 11012322;Operation@11012001 : Integer;ReplaceItemOldRec@11012002 : Record 11012322);
    VAR
      ReplaceItemRec2@11012003 : Record 11012322;
      LocalItem@1100485000 : Code[20];
      LocalBasicItem@1100485003 : Code[20];
      LocalTradeItem@1100485004 : Code[20];
      LocalManufacturer@1100485001 : Code[20];
      LocalVendor@1100485002 : Code[20];
    BEGIN
      InventorySetup.GET;
      IF NOT InventorySetup."Central Management" THEN
        EXIT;

      //**4PS.sn #C011151, #C013740 Central Data Management (rename)
      //IF (InventorySetup."Central Management") AND (Operation = 3) THEN
      //  ERROR(Text099, ReplaceItemRec.TABLECAPTION,
      //    InventorySetup.FIELDCAPTION("Central Management"), InventorySetup."Central Management");
      //**4PS.sn #C011151, #C013740 Central Data Management (rename)

      SetCompRelRecFilter(2);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          ReplaceItemRec2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:BEGIN
                ReplaceItemRec2.COPY(ReplaceItemOldRec);
                ReplaceItemRec2.RESET;
                IF ReplaceItemRec2.FIND THEN
                  ReplaceItemRec2.RENAME(ReplaceItemRec.Manual,
                    ReplaceItemRec."Item No. (Old)",
                    ReplaceItemRec."Basic Item (Old)", ReplaceItemRec."Manufacturer (Old)",
                    ReplaceItemRec."Trade Item (Old)", ReplaceItemRec."Vendor (Old)",
                    ReplaceItemRec."Cost Object (Old)");
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                ReplaceItemRec2.COPY(ReplaceItemRec);
                ReplaceItemRec2.RESET;
                IF ReplaceItemRec2.FIND THEN BEGIN
                  LocalItem := ReplaceItemRec2."Item No. (New)";
                  LocalManufacturer := ReplaceItemRec2."Manufacturer (New)";
                  LocalBasicItem := ReplaceItemRec2."Basic Item (New)";
                  LocalVendor := ReplaceItemRec2."Vendor (New)";
                  LocalTradeItem := ReplaceItemRec2."Trade Item (New)";
                  ReplaceItemRec2.TRANSFERFIELDS(ReplaceItemRec, FALSE);
                  IF (LocalItem <> ReplaceItemOldRec."Item No. (New)") OR
                    (LocalManufacturer <> ReplaceItemOldRec."Manufacturer (New)") OR
                    (LocalBasicItem <> ReplaceItemOldRec."Basic Item (New)") OR
                    (LocalVendor <> ReplaceItemOldRec."Vendor (New)") OR
                    (LocalTradeItem <> ReplaceItemOldRec."Trade Item (New)") THEN BEGIN
                    ReplaceItemRec2."Item No. (New)" := LocalItem;
                    ReplaceItemRec2."Manufacturer (New)" := LocalManufacturer;
                    ReplaceItemRec2."Basic Item (New)" := LocalBasicItem;
                    ReplaceItemRec2."Vendor (New)" := LocalVendor;
                    ReplaceItemRec2."Trade Item (New)" := LocalTradeItem;
                  END;
                  ReplaceItemRec2.MODIFY;
                END ELSE
                  ReplaceItemRec2.INSERT;
              END;
            4:BEGIN
                ReplaceItemRec2.COPY(ReplaceItemRec);
                ReplaceItemRec2.RESET;
                IF ReplaceItemRec2.FIND THEN
                   ReplaceItemRec2.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    [External]
    PROCEDURE EditExtendedText@1100528704(VAR ExtendedTextHeader@1100528704 : Record 279;Operation@1100528703 : Integer;ExtendedTextHeaderOld@1100528702 : Record 279);
    VAR
      ExtendedTextHeader2@1100528701 : Record 279;
    BEGIN
      InventorySetup.GET;
      IF NOT InventorySetup."Central Management" OR NOT InventorySetup."Extended Text" THEN
        EXIT;

      SetCompRelRecFilter(2);
      IF CompRelationRec.FINDSET THEN BEGIN
        REPEAT
          ExtendedTextHeader2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            1,2:
              BEGIN
                ExtendedTextHeader2.COPY(ExtendedTextHeader);
                ExtendedTextHeader2.RESET;
                IF ExtendedTextHeader2.FIND THEN BEGIN
                  ExtendedTextHeader2.TRANSFERFIELDS(ExtendedTextHeader, FALSE);
                  ExtendedTextHeader2.MODIFY;
                END ELSE
                  ExtendedTextHeader2.INSERT;
              END;
            4:BEGIN
                ExtendedTextHeader2.COPY(ExtendedTextHeader);
                ExtendedTextHeader2.RESET;
                IF ExtendedTextHeader2.FIND THEN
                  ExtendedTextHeader2.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
      END;
    END;

    [External]
    PROCEDURE EditExtendedTextLine@1100528705(VAR ExtendedTextLine@1100528704 : Record 280;Operation@1100528703 : Integer;ExtendedTextLineOld@1100528702 : Record 280);
    VAR
      ExtendedTextLine2@1100528700 : Record 280;
    BEGIN
      InventorySetup.GET;
      IF NOT InventorySetup."Central Management" OR NOT InventorySetup."Extended Text" THEN
        EXIT;

      SetCompRelRecFilter(2);
      IF CompRelationRec.FINDSET THEN BEGIN
        REPEAT
          ExtendedTextLine2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            1,2:
              BEGIN
                ExtendedTextLine2.COPY(ExtendedTextLine);
                ExtendedTextLine2.RESET;
                IF ExtendedTextLine2.FIND THEN BEGIN
                  ExtendedTextLine2.TRANSFERFIELDS(ExtendedTextLine, FALSE);
                  ExtendedTextLine2.MODIFY;
                END ELSE
                  ExtendedTextLine2.INSERT;
              END;
            4:BEGIN
                ExtendedTextLine2.COPY(ExtendedTextLine);
                ExtendedTextLine2.RESET;
                IF ExtendedTextLine2.FIND THEN
                  ExtendedTextLine2.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
      END;
    END;

    [External]
    PROCEDURE EditBaseRecipe@1100528905(VAR RecipeRec@11012000 : Record 11020581;Operation@11012001 : Integer;RecipeOldRec@11012002 : Record 11020581);
    VAR
      RecipeRec2@11012003 : Record 11020581;
      RecipeLineRec@11012004 : Record 11020582;
      RecipeLineRec2@11012005 : Record 11020582;
      ChrgRec@1210190003 : Record 11229771;
      ChrgRec2@1210190002 : Record 11229771;
    BEGIN
      //DP00381
      InventorySetup.GET;
      IF NOT InventorySetup."Central Management" OR NOT InventorySetup.Recipes THEN
        EXIT;

      SetCompRelRecFilter(2);
      IF CompRelationRec.FINDSET THEN BEGIN
        REPEAT
          RecipeRec2.CHANGECOMPANY(CompRelationRec.Company);
          RecipeLineRec2.CHANGECOMPANY(CompRelationRec.Company);
          //db.sn, 18-08-11: M28184
          ChrgRec2.CHANGECOMPANY(CompRelationRec.Company);
          //db.en, 18-08-11: M28184
          CASE Operation OF
            1,2:
              BEGIN
                RecipeRec2.COPY(RecipeRec);
                RecipeRec2.RESET;
                IF RecipeRec2.FIND THEN BEGIN
                  RecipeRec2.TRANSFERFIELDS(RecipeRec, FALSE);
                  RecipeRec2.MODIFY;
                END ELSE
                  RecipeRec2.INSERT;
              END;
            3:BEGIN
                RecipeRec2.COPY(RecipeOldRec);
                RecipeRec2."Recipe Group" := RecipeRec."Recipe Group";
                RecipeRec2."No." := RecipeRec."No.";
                RecipeRec2.INSERT;

                RecipeLineRec.SETRANGE("Recipe Group",RecipeOldRec."Recipe Group");
                RecipeLineRec.SETRANGE(Recipe,RecipeOldRec."No.");
                IF RecipeLineRec.FINDSET THEN BEGIN
                  REPEAT
                    RecipeLineRec2.COPY(RecipeLineRec);
                    RecipeLineRec2."Recipe Group" := RecipeRec."Recipe Group";
                    RecipeLineRec2.Recipe := RecipeRec."No.";
                    RecipeLineRec2.INSERT;
                  UNTIL RecipeLineRec.NEXT = 0;
                END;

                RecipeLineRec2.SETRANGE("Recipe Group",RecipeOldRec."Recipe Group");
                RecipeLineRec2.SETRANGE(Recipe,RecipeOldRec."No.");
                RecipeLineRec2.DELETEALL;

                //db.sn, 18-08-11: M28184
                ChrgRec.SETFILTER("Estimate No.", '%1', '');
                ChrgRec.SETRANGE("Recipe Group", RecipeOldRec."Recipe Group");
                ChrgRec.SETRANGE(Recipe, RecipeOldRec."No.");
                IF ChrgRec.FINDSET THEN BEGIN
                  REPEAT
                    ChrgRec2.COPY(ChrgRec);
                    ChrgRec2."Recipe Group" := RecipeRec."Recipe Group";
                    ChrgRec2.Recipe := RecipeRec."No.";
                    ChrgRec2.INSERT;
                  UNTIL ChrgRec.NEXT = 0;
                END;

                ChrgRec2.SETFILTER("Estimate No.", '%1', '');
                ChrgRec2.SETRANGE("Recipe Group",RecipeOldRec."Recipe Group");
                ChrgRec2.SETRANGE(Recipe,RecipeOldRec."No.");
                ChrgRec2.DELETEALL;

                RecipeRec2.COPY(RecipeOldRec);
                RecipeRec2.RESET;
                IF RecipeRec2.FIND THEN  //db, 18-08-11: M28184
                  RecipeRec2.DELETE;
              END;
            4:BEGIN
                RecipeRec2.COPY(RecipeRec);

                //db.sn, 18-08-11: M28184
                ChrgRec.CHANGECOMPANY(CompRelationRec.Company);
                ChrgRec.SETFILTER("Estimate No.", '%1', '');
                ChrgRec.SETRANGE("Recipe Group", RecipeRec."Recipe Group");
                ChrgRec.SETRANGE(Recipe, RecipeRec."No.");
                ChrgRec.DELETEALL;
                //db.en, 18-08-11: M28184

                RecipeLineRec2.CHANGECOMPANY(CompRelationRec.Company);
                RecipeLineRec2.SETRANGE("Recipe Group", RecipeRec."Recipe Group");
                RecipeLineRec2.SETRANGE(Recipe, RecipeRec."No.");
                RecipeLineRec2.DELETEALL;

                RecipeRec2.RESET;
                IF RecipeRec2.FIND THEN
                  RecipeRec2.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
      END;
    END;

    [External]
    PROCEDURE EditBaseRecipeLine@1100528907(VAR RecipeLineRec@11012000 : Record 11020582;Operation@11012001 : Integer;RecipeLineOldRec@11012002 : Record 11020582);
    VAR
      RecipeLineRec2@11012003 : Record 11020582;
    BEGIN
      //DP00381
      InventorySetup.GET;
      IF NOT InventorySetup."Central Management" OR NOT InventorySetup.Recipes THEN
        EXIT;

      SetCompRelRecFilter(2);
      IF CompRelationRec.FINDSET THEN BEGIN
        REPEAT
          RecipeLineRec2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            1,2:
              BEGIN
                RecipeLineRec2.COPY(RecipeLineRec);
                RecipeLineRec2.RESET;
                IF RecipeLineRec2.FIND THEN BEGIN
                  RecipeLineRec2.TRANSFERFIELDS(RecipeLineRec, FALSE);
                  RecipeLineRec2.MODIFY;
                END ELSE
                  RecipeLineRec2.INSERT;
              END;
            4:BEGIN
                RecipeLineRec2.COPY(RecipeLineRec);
                RecipeLineRec2.RESET;
                IF RecipeLineRec2.FIND THEN
                  RecipeLineRec2.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
      END;
    END;

    [External]
    PROCEDURE EditRecipeGroup@1100528902(VAR RecipeGroupRec@11012000 : Record 11020580;Operation@11012001 : Integer;RecipeGroupOldRec@11012002 : Record 11020580);
    VAR
      RecipeGroupRec2@11012003 : Record 11020580;
      RecipeRec2@1100528900 : Record 11020581;
      RecipeLineRec2@1100528901 : Record 11020582;
    BEGIN
      //DP00381
      InventorySetup.GET;
      IF NOT InventorySetup."Central Management" OR NOT InventorySetup.Recipes THEN
        EXIT;

      //**4PS.sn #C011151, #C013740 Central Data Management (rename)
      //IF (InventorySetup."Central Management") AND (Operation = 3) THEN
      //  ERROR(Text099, RecipeGroupRec.TABLECAPTION,
      //    InventorySetup.FIELDCAPTION("Central Management"), InventorySetup."Central Management");
      //**4PS.sn #C011151, #C013740 Central Data Management (rename)

      SetCompRelRecFilter(2);
      IF CompRelationRec.FINDSET THEN BEGIN
        REPEAT
          RecipeGroupRec2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:BEGIN
                RecipeGroupRec2.COPY(RecipeGroupOldRec);
                RecipeGroupRec2.RESET;
                IF RecipeGroupRec2.FIND THEN
                  RecipeGroupRec2.RENAME(RecipeGroupRec."No.");
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                RecipeGroupRec2.COPY(RecipeGroupRec);
                RecipeGroupRec2.RESET;
                IF RecipeGroupRec2.FIND THEN BEGIN
                  RecipeGroupRec2.TRANSFERFIELDS(RecipeGroupRec, FALSE);
                  RecipeGroupRec2.MODIFY;
                END ELSE
                  RecipeGroupRec2.INSERT;
              END;
            4:BEGIN
                RecipeGroupRec2.COPY(RecipeGroupRec);

                RecipeRec2.CHANGECOMPANY(CompRelationRec.Company);
                RecipeRec2.SETRANGE("Recipe Group", RecipeGroupRec."No.");

                RecipeLineRec2.CHANGECOMPANY(CompRelationRec.Company);
                RecipeLineRec2.SETRANGE("Recipe Group", RecipeGroupRec."No.");

                //ChrgRec.DELETEALL;
                //SpecRec.DELETEALL;

                RecipeGroupRec2.RESET;
                IF RecipeGroupRec2.FIND THEN
                  RecipeGroupRec2.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
      END;
    END;

    [External]
    PROCEDURE EditRecipeSurchargeNEW@1100528000(VAR SurchargeRec@11012000 : Record 11229771;Operation@11012001 : Integer;SurchargeOldRec@11012002 : Record 11229771);
    VAR
      SurchargeRec2@11012003 : Record 11229771;
    BEGIN
      //db, 16-04-15: C014713
      InventorySetup.GET;
      IF NOT InventorySetup."Central Management" OR NOT InventorySetup.Recipes THEN
        EXIT;

      SetCompRelRecFilter(2);
      IF CompRelationRec.FINDSET THEN BEGIN
        REPEAT
          SurchargeRec2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            1,2:
              BEGIN
                SurchargeRec2.COPY(SurchargeRec);
                SurchargeRec2.RESET;
                IF SurchargeRec2.FIND THEN BEGIN
                  SurchargeRec2.TRANSFERFIELDS(SurchargeRec, FALSE);
                  SurchargeRec2.MODIFY;
                END ELSE
                  SurchargeRec2.INSERT;
              END;
            4:BEGIN
                SurchargeRec2.COPY(SurchargeRec);
                SurchargeRec2.RESET;
                IF SurchargeRec2.FIND THEN
                  SurchargeRec2.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
      END;
    END;

    [External]
    PROCEDURE EditRecipeCodeNEW@1100529501(VAR CodeRec@11012000 : Record 11229772;Operation@11012001 : Integer;CodeOldRec@11012002 : Record 11229772);
    VAR
      CodeRec2@11012003 : Record 11229772;
    BEGIN
      //C033987
      InventorySetup.GET;
      IF NOT InventorySetup."Central Management" OR NOT InventorySetup.Recipes THEN
        EXIT;

      SetCompRelRecFilter(2);
      IF CompRelationRec.FINDSET THEN BEGIN
        REPEAT
          CodeRec2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            1,2:
              BEGIN
                CodeRec2.COPY(CodeRec);
                CodeRec2.RESET;
                IF CodeRec2.FIND THEN BEGIN
                  CodeRec2.TRANSFERFIELDS(CodeRec, FALSE);
                  CodeRec2.MODIFY;
                END ELSE
                  CodeRec2.INSERT;
              END;
            4:BEGIN
                CodeRec2.COPY(CodeRec);
                CodeRec2.RESET;
                IF CodeRec2.FIND THEN
                  CodeRec2.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
      END;
    END;

    [External]
    PROCEDURE EditRecipeText@1210190015(VAR CommentLineRec@11012000 : Record 11020595;Operation@11012001 : Integer;CommentLineOldRec@11012002 : Record 11020595);
    VAR
      CommentLineRec2@11012003 : Record 11020595;
    BEGIN
      //db, 28-11-11: M29282
      InventorySetup.GET;
      IF NOT InventorySetup."Central Management" OR NOT InventorySetup.Recipes THEN
        EXIT;

      SetCompRelRecFilter(2);
      IF CompRelationRec.FINDSET THEN BEGIN
        REPEAT
          CommentLineRec2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            1,2:
              BEGIN
                CommentLineRec2.COPY(CommentLineRec);
                CommentLineRec2.RESET;
                IF CommentLineRec2.FIND THEN BEGIN
                  CommentLineRec2.TRANSFERFIELDS(CommentLineRec, FALSE);
                  CommentLineRec2.MODIFY;
                END ELSE
                  CommentLineRec2.INSERT;
              END;
            4:BEGIN
                CommentLineRec2.COPY(CommentLineRec);
                CommentLineRec2.RESET;
                IF CommentLineRec2.FIND THEN
                  CommentLineRec2.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
      END;
    END;

    [External]
    PROCEDURE EditDiscHist@1100485014(VAR DiscHistRec@11012000 : Record 11012312;Operation@11012001 : Integer;DiscHistOldRec@11012002 : Record 11012312);
    VAR
      DiscHistRec2@11012003 : Record 11012312;
    BEGIN
      InventorySetup.GET;
      IF NOT InventorySetup."Central Management" THEN
        EXIT;

      SetCompRelRecFilter(2);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          DiscHistRec2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            1,2:
              BEGIN
                DiscHistRec2.COPY(DiscHistRec);
                DiscHistRec2.RESET;
                IF DiscHistRec2.FIND THEN BEGIN
                  DiscHistRec2.TRANSFERFIELDS(DiscHistRec, FALSE);
                  DiscHistRec2.MODIFY;
                END ELSE
                  DiscHistRec2.INSERT;
              END;
            3:BEGIN
                DiscHistRec2.COPY(DiscHistOldRec);
      // Renaming complex prim key tables results in error.
      //        DiscHistRec2.RENAME(
      //          DiscHistRec.Vendor, DiscHistRec."Discount Group", DiscHistRec."Item Code",
      //          DiscHistRec."Discount Level", DiscHistRec."Discount Reference", DiscHistRec."Starting Date");
              END;
            4:BEGIN
                DiscHistRec2.COPY(DiscHistRec);
                DiscHistRec2.RESET;
                IF DiscHistRec2.FIND THEN
                  DiscHistRec2.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    [External]
    PROCEDURE EditDiscTermGroup@1100485001(VAR DiscTermGrpRec@11012000 : Record 11012338;Operation@11012001 : Integer;DiscTermGrpOldRec@11012002 : Record 11012338);
    VAR
      DiscTermGrpRec2@11012003 : Record 11012338;
    BEGIN
      InventorySetup.GET;
      IF NOT InventorySetup."Central Management" THEN
        EXIT;

      //**4PS.sn #C011151, #C013740 Central Data Management (rename)
      //IF (InventorySetup."Central Management") AND (Operation = 3) THEN
      //  ERROR(Text099, DiscTermGrpRec.TABLECAPTION,
      //    InventorySetup.FIELDCAPTION("Central Management"), InventorySetup."Central Management");
      //**4PS.sn #C011151, #C013740 Central Data Management (rename)

      SetCompRelRecFilter(2);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          DiscTermGrpRec2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:BEGIN
                DiscTermGrpRec2.COPY(DiscTermGrpOldRec);
                DiscTermGrpRec2.RESET;
                IF DiscTermGrpRec2.FIND THEN
                  DiscTermGrpRec2.RENAME(DiscTermGrpRec.Level, DiscTermGrpRec.Code);
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                DiscTermGrpRec2.COPY(DiscTermGrpRec);
                DiscTermGrpRec2.RESET;
                IF DiscTermGrpRec2.FIND THEN BEGIN
                  DiscTermGrpRec2.TRANSFERFIELDS(DiscTermGrpRec, FALSE);
                  DiscTermGrpRec2.MODIFY;
                END ELSE
                  DiscTermGrpRec2.INSERT;
              END;
            4:BEGIN
                DiscTermGrpRec2.COPY(DiscTermGrpRec);
                DiscTermGrpRec2.RESET;
                IF DiscTermGrpRec2.FIND THEN
                  DiscTermGrpRec2.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    [External]
    PROCEDURE EditDeliveryGroup@1100409000(VAR DeliveryGrpRec@11012000 : Record 11012320;Operation@11012001 : Integer;DeliveryGrpOldRec@11012002 : Record 11012320);
    VAR
      DeliveryGrpRec2@11012003 : Record 11012320;
    BEGIN
      //db, 28-01-13: C005024
      InventorySetup.GET;
      IF NOT InventorySetup."Central Management" THEN
        EXIT;

      //**4PS.sn #C011151, #C013740 Central Data Management (rename)
      //IF (InventorySetup."Central Management") AND (Operation = 3) THEN
      //  ERROR(Text099, DeliveryGrpRec.TABLECAPTION,
      //    InventorySetup.FIELDCAPTION("Central Management"), InventorySetup."Central Management");
      //**4PS.sn #C011151, #C013740 Central Data Management (rename)

      SetCompRelRecFilter(2);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          DeliveryGrpRec2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:BEGIN
                DeliveryGrpRec2.COPY(DeliveryGrpOldRec);
                DeliveryGrpRec2.RESET;
                IF DeliveryGrpRec2.FIND THEN
                  DeliveryGrpRec2.RENAME(DeliveryGrpRec.Code);
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                DeliveryGrpRec2.COPY(DeliveryGrpRec);
                DeliveryGrpRec2.RESET;
                IF DeliveryGrpRec2.FIND THEN BEGIN
                  DeliveryGrpRec2.TRANSFERFIELDS(DeliveryGrpRec, FALSE);
                  DeliveryGrpRec2.MODIFY;
                END ELSE
                  DeliveryGrpRec2.INSERT;
              END;
            4:BEGIN
                DeliveryGrpRec2.COPY(DeliveryGrpRec);
                DeliveryGrpRec2.RESET;
                IF DeliveryGrpRec2.FIND THEN
                  DeliveryGrpRec2.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    [External]
    PROCEDURE EditContactFeatureType@1210190003(VAR ContactFeatureTypeRec@11012000 : Record 11012753;Operation@11012001 : Integer;OldContactFeatureTypeRec@11012002 : Record 11012753);
    VAR
      ContactFeatureTypeRec2@11012003 : Record 11012753;
    BEGIN
      IF NOT (ContactFeatureTypeRec."Relation Type" IN
        [ContactFeatureTypeRec."Relation Type"::Company,
         ContactFeatureTypeRec."Relation Type"::Contact,
         ContactFeatureTypeRec."Relation Type"::Person]) THEN
        EXIT;

      MarketingSetup.GET;

      IF NOT MarketingSetup."Central Management" THEN
        EXIT;

      IF (ContactFeatureTypeRec."Relation Type" = ContactFeatureTypeRec."Relation Type"::Company) AND
         (NOT MarketingSetup."Company Features")
      THEN
        EXIT;

      IF (ContactFeatureTypeRec."Relation Type" = ContactFeatureTypeRec."Relation Type"::Contact) AND
         (NOT MarketingSetup."Contactperson Features")
      THEN
        EXIT;

      IF (ContactFeatureTypeRec."Relation Type" = ContactFeatureTypeRec."Relation Type"::Person) AND
         (NOT MarketingSetup."Person Features")
      THEN
        EXIT;

      //**4PS.sn #C011151, #C013740 Central Data Management (rename)
      //IF (MarketingSetup."Central Management") AND (Operation = 3) THEN
      //  ERROR(Text099, ContactFeatureTypeRec.TABLECAPTION,
      //    MarketingSetup.FIELDCAPTION("Central Management"), MarketingSetup."Central Management");
      //**4PS.sn #C011151, #C013740 Central Data Management (rename)

      SetCompRelRecFilter(1);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          ContactFeatureTypeRec2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:BEGIN
                ContactFeatureTypeRec2.COPY(OldContactFeatureTypeRec);
                ContactFeatureTypeRec2.RESET;
                IF ContactFeatureTypeRec2.FIND THEN
                  ContactFeatureTypeRec2.RENAME(
                    ContactFeatureTypeRec."Relation Type",
                    ContactFeatureTypeRec.Code,
                    ContactFeatureTypeRec."Line No.");
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                ContactFeatureTypeRec2.COPY(ContactFeatureTypeRec);
                ContactFeatureTypeRec2.RESET;
                IF ContactFeatureTypeRec2.FIND THEN BEGIN
                  ContactFeatureTypeRec2.TRANSFERFIELDS(ContactFeatureTypeRec, FALSE);
                  ContactFeatureTypeRec2.MODIFY;
                END ELSE BEGIN
                  ContactFeatureTypeRec2.INSERT;
                END;
              END;
            4:BEGIN
                ContactFeatureTypeRec2.COPY(ContactFeatureTypeRec);
                ContactFeatureTypeRec2.RESET;
                IF ContactFeatureTypeRec2.FIND THEN
                  ContactFeatureTypeRec2.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    [External]
    PROCEDURE EditLinkedInProfile@1100525011(VAR LinkedInProfile@11012000 : Record 11071908;Operation@11012001 : Integer;OldLinkedInProfile@11012002 : Record 11071908);
    VAR
      LinkedInProfile2@11012003 : Record 11071908;
      Contact@1100525000 : Record 5050;
    BEGIN
      MarketingSetup.GET;

      IF NOT MarketingSetup."Central Management" THEN
        EXIT;

      IF NOT MarketingSetup.Persons THEN
        EXIT;

      IF NOT Contact.GET(OldLinkedInProfile."Contact No.") THEN //skip data-inconsistency
        EXIT;

      IF Contact.Type <> Contact.Type::Person THEN
        EXIT;

      //**4PS.sn #C011151, #C013740 Central Data Management (rename)
      //IF (MarketingSetup."Central Management") AND (Operation = 3) THEN
      //  ERROR(Text099, LinkedInProfile.TABLECAPTION,
      //    MarketingSetup.FIELDCAPTION("Central Management"), MarketingSetup."Central Management");
      //**4PS.sn #C011151, #C013740 Central Data Management (rename)

      SetCompRelRecFilter(1);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          LinkedInProfile2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:BEGIN
                LinkedInProfile2.COPY(OldLinkedInProfile);
                LinkedInProfile2.RESET;
                IF LinkedInProfile2.FIND THEN
                  LinkedInProfile2.RENAME(
                    LinkedInProfile."Contact No.",
                    LinkedInProfile."Sort Order");
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                LinkedInProfile2.COPY(LinkedInProfile);
                LinkedInProfile2.RESET;
                IF LinkedInProfile2.FIND THEN BEGIN
                  LinkedInProfile2.TRANSFERFIELDS(LinkedInProfile, FALSE);
                  LinkedInProfile2.MODIFY;
                END ELSE BEGIN
                  LinkedInProfile2.INSERT;
                END;
              END;
            4:BEGIN
                LinkedInProfile2.COPY(LinkedInProfile);
                LinkedInProfile2.RESET;
                IF LinkedInProfile2.FIND THEN
                  LinkedInProfile2.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    [External]
    PROCEDURE EditHoldingStructure@1100485000(VAR HoldingStructureRec@11012000 : Record 11020206;Operation@11012001 : Integer;OldHoldingStructureRec@11012002 : Record 11020206);
    VAR
      HoldingStructureRec2@11012003 : Record 11020206;
    BEGIN
      //function: EditHoldingStructure
      MarketingSetup.GET;

      IF NOT MarketingSetup."Central Management" THEN
        EXIT;

      IF NOT MarketingSetup.Companies THEN
        EXIT;

      //**4PS.sn #C011151, #C013740 Central Data Management (rename)
      //IF (MarketingSetup."Central Management") AND (Operation = 3) THEN
      //  ERROR(Text099, HoldingStructureRec.TABLECAPTION,
      //    MarketingSetup.FIELDCAPTION("Central Management"), MarketingSetup."Central Management");
      //**4PS.sn #C011151, #C013740 Central Data Management (rename)

      SetCompRelRecFilter(1);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          HoldingStructureRec2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:BEGIN
                HoldingStructureRec2.COPY(OldHoldingStructureRec);
                HoldingStructureRec2.RESET;
                IF HoldingStructureRec2.FIND THEN
                  HoldingStructureRec2.RENAME(
                    HoldingStructureRec.Contact,
                    HoldingStructureRec."Line No.");
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                HoldingStructureRec2.COPY(HoldingStructureRec);
                HoldingStructureRec2.RESET;
                IF HoldingStructureRec2.FIND THEN BEGIN
                  HoldingStructureRec2.TRANSFERFIELDS(HoldingStructureRec, FALSE);
                  HoldingStructureRec2.MODIFY;
                END ELSE BEGIN
                  HoldingStructureRec2.INSERT;
                END;
              END;
            4:BEGIN
                HoldingStructureRec2.COPY(HoldingStructureRec);
                HoldingStructureRec2.RESET;
                IF HoldingStructureRec2.FIND THEN
                  HoldingStructureRec2.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    [External]
    PROCEDURE EditWebSource@1100485020(VAR WebSourceRec@11012000 : Record 5060;Operation@11012001 : Integer;OldWebSourceRec@11012002 : Record 5060);
    VAR
      WebSourceRec2@11012003 : Record 5060;
    BEGIN
      //**4PS02.n
      MarketingSetup.GET;

      IF NOT MarketingSetup."Central Management" THEN
        EXIT;

      IF NOT MarketingSetup.Companies THEN
        EXIT;

      //**4PS.sn #C011151, #C013740 Central Data Management (rename)
      //IF (MarketingSetup."Central Management") AND (Operation = 3) THEN
      //  ERROR(Text099, WebSourceRec.TABLECAPTION,
      //    MarketingSetup.FIELDCAPTION("Central Management"), MarketingSetup."Central Management");
      //**4PS.sn #C011151, #C013740 Central Data Management (rename)

      SetCompRelRecFilter(1);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          WebSourceRec2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:BEGIN
                WebSourceRec2.COPY(OldWebSourceRec);
                WebSourceRec2.RESET;
                IF WebSourceRec2.FIND THEN
                  WebSourceRec2.RENAME(
                    WebSourceRec."Contact No.",
                    WebSourceRec."Web Source Code");
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                WebSourceRec2.COPY(WebSourceRec);
                WebSourceRec2.RESET;
                IF WebSourceRec2.FIND THEN BEGIN
                  WebSourceRec2.TRANSFERFIELDS(WebSourceRec, FALSE);
                  WebSourceRec2.MODIFY;
                END ELSE BEGIN
                  WebSourceRec2.INSERT;
                END;
              END;
            4:BEGIN
                WebSourceRec2.COPY(WebSourceRec);
                WebSourceRec2.RESET;
                IF WebSourceRec2.FIND THEN
                  WebSourceRec2.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    [External]
    PROCEDURE EditStandardObject@1100528600(VAR StandardObject@1100528602 : Record 11020334;Operation@1100528601 : Integer;OldStandardObject@1100528600 : Record 11020334);
    VAR
      StandardObject2@1100528604 : Record 11020334;
    BEGIN
      ServiceSetup.GET;

      IF NOT ServiceSetup."Central Management" OR NOT ServiceSetup."Standard Objects" THEN
        EXIT;

      IF FORMAT(StandardObject2) = FORMAT(StandardObject) THEN
        EXIT;

      //**4PS.sn #C011151, #C013740 Central Data Management (rename)
      //IF (ServiceSetup."Central Management") AND (Operation = 3) THEN
      //  ERROR(Text099, StandardObject.TABLECAPTION,
      //    ServiceSetup.FIELDCAPTION("Central Management"), ServiceSetup."Central Management");
      //**4PS.sn #C011151, #C013740 Central Data Management (rename)

      SetCompRelRecFilter(4);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          StandardObject2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:BEGIN
                StandardObject2.COPY(OldStandardObject);
                StandardObject2.RESET;
                IF StandardObject2.FIND THEN
                  StandardObject2.RENAME(StandardObject."No.");
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                EditSubStandardObject(StandardObject, Operation);
                StandardObject2.COPY(StandardObject);
                StandardObject2.RESET;
                IF StandardObject2.FIND THEN BEGIN
                  StandardObject2.TRANSFERFIELDS(StandardObject, FALSE);
                  StandardObject2.MODIFY;
                END ELSE BEGIN
                  StandardObject2.INSERT;
                END;
              END;
            4:BEGIN
                EditSubStandardObject(StandardObject, Operation);
                StandardObject2.COPY(StandardObject);
                StandardObject2.RESET;
                IF StandardObject2.FIND THEN
                  StandardObject2.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    [External]
    PROCEDURE EditSubStandardObject@1100528603(StandardObject@1100528601 : Record 11020334;Operation@1100528600 : Integer);
    VAR
      CommentLine@1100528602 : Record 97;
      CommentLine2@1100528603 : Record 97;
      ServiceObject@1100528604 : Record 11071691;
      ServiceSetup@1100528605 : Record 11012800;
    BEGIN
      CommentLine2.CHANGECOMPANY(CompRelationRec.Company);
      CommentLine2.SETRANGE("Table Name", CommentLine2."Table Name"::"Standard Object");
      CommentLine2.SETRANGE("No.", StandardObject."No.");
      CommentLine2.DELETEALL;

      ServiceSetup.CHANGECOMPANY(CompRelationRec.Company);
      ServiceSetup.GET;
      IF ServiceSetup."Sync. Object Brand/Model/Type" THEN BEGIN
        ServiceObject.CHANGECOMPANY(CompRelationRec.Company);
        ServiceObject.SETCURRENTKEY("Standard Object No.");
        ServiceObject.SETRANGE("Standard Object No.", StandardObject."No.");
        IF ServiceObject.FINDSET(TRUE) THEN
          REPEAT
            IF (ServiceObject."Brand Code" <> StandardObject."Brand Code") OR
               (ServiceObject."Model Code" <> StandardObject."Model Code") OR
               (ServiceObject."Type Code" <> StandardObject."Type Code")
            THEN BEGIN
              ServiceObject."Brand Code" := StandardObject."Brand Code";
              ServiceObject."Model Code" := StandardObject."Model Code";
              ServiceObject."Type Code" := StandardObject."Type Code";
              ServiceObject.MODIFY;
            END;
          UNTIL ServiceObject.NEXT = 0;
      END;

      IF Operation = 4 THEN EXIT;

      CommentLine.CHANGECOMPANY(LeadingCompany); //C002428
      CommentLine.SETRANGE("Table Name", CommentLine."Table Name"::"Standard Object");
      CommentLine.SETRANGE("No.", StandardObject."No.");
      IF CommentLine.FINDSET THEN
        REPEAT
          CommentLine2.COPY(CommentLine);
          CommentLine2.INSERT;
        UNTIL CommentLine.NEXT = 0;
    END;

    [External]
    PROCEDURE EditStdObjMaintScheme@1100528604(VAR StdObjectMaintenanceScheme@1100528600 : Record 11071703;Operation@1100528602 : Integer;OldStdObjectMaintenanceScheme@1100528601 : Record 11071703);
    VAR
      StdObjectMaintenanceScheme2@1100528603 : Record 11071703;
    BEGIN
      ServiceSetup.GET;

      IF NOT ServiceSetup."Central Management" OR NOT ServiceSetup."Standard Objects" THEN
        EXIT;

      IF FORMAT(StdObjectMaintenanceScheme2) = FORMAT(StdObjectMaintenanceScheme) THEN
        EXIT;

      //**4PS.sn #C011151, #C013740 Central Data Management (rename)
      //IF (ServiceSetup."Central Management") AND (Operation = 3) THEN
      //  ERROR(Text099, StdObjectMaintenanceScheme.TABLECAPTION,
      //    ServiceSetup.FIELDCAPTION("Central Management"), ServiceSetup."Central Management");
      //**4PS.sn #C011151, #C013740 Central Data Management (rename)

      SetCompRelRecFilter(4);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          StdObjectMaintenanceScheme2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:BEGIN
                StdObjectMaintenanceScheme2.COPY(OldStdObjectMaintenanceScheme);
                StdObjectMaintenanceScheme2.RESET;
                IF StdObjectMaintenanceScheme2.FIND THEN
                  StdObjectMaintenanceScheme2.RENAME(
                    StdObjectMaintenanceScheme."Object No.", StdObjectMaintenanceScheme."Service Package",
                    StdObjectMaintenanceScheme."Maintenance Scheme");
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                StdObjectMaintenanceScheme2.COPY(StdObjectMaintenanceScheme);
                StdObjectMaintenanceScheme2.RESET;
                IF StdObjectMaintenanceScheme2.FIND THEN BEGIN
                  StdObjectMaintenanceScheme2.TRANSFERFIELDS(StdObjectMaintenanceScheme, FALSE);
                  StdObjectMaintenanceScheme2.MODIFY;
                END ELSE BEGIN
                 StdObjectMaintenanceScheme2.INSERT;
                END;
              END;
            4:BEGIN
                StdObjectMaintenanceScheme2.COPY(StdObjectMaintenanceScheme);
                StdObjectMaintenanceScheme2.RESET;
                IF StdObjectMaintenanceScheme2.FIND THEN
                  StdObjectMaintenanceScheme2.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    [External]
    PROCEDURE EditMaintenanceScheme@1100528607(VAR MaintenanceScheme@1100528602 : Record 11071745;Operation@1100528601 : Integer;OldMaintenanceScheme@1100528600 : Record 11071745);
    VAR
      MaintenanceScheme2@1100528604 : Record 11071745;
    BEGIN
      ServiceSetup.GET;

      IF NOT ServiceSetup."Central Management" OR NOT ServiceSetup."Maintenance Schemes" THEN
        EXIT;

      IF FORMAT(MaintenanceScheme2) = FORMAT(MaintenanceScheme) THEN
        EXIT;

      //**4PS.sn #C011151, #C013740 Central Data Management (rename)
      //IF (ServiceSetup."Central Management") AND (Operation = 3) THEN
      //  ERROR(Text099, MaintenanceScheme.TABLECAPTION,
      //    ServiceSetup.FIELDCAPTION("Central Management"), ServiceSetup."Central Management");
      //**4PS.sn #C011151, #C013740 Central Data Management (rename)

      SetCompRelRecFilter(4);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          MaintenanceScheme2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:BEGIN
                MaintenanceScheme2.COPY(OldMaintenanceScheme);
                MaintenanceScheme2.RESET;
                IF MaintenanceScheme2.FIND THEN
                  MaintenanceScheme2.RENAME(MaintenanceScheme.Code);
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                MaintenanceScheme2.COPY(MaintenanceScheme);
                MaintenanceScheme2.RESET;
                IF MaintenanceScheme2.FIND THEN BEGIN
                  MaintenanceScheme2.TRANSFERFIELDS(MaintenanceScheme, FALSE);
                  MaintenanceScheme2.MODIFY;
                END ELSE BEGIN
                  MaintenanceScheme2.INSERT;
                END;
              END;
            4:BEGIN
                MaintenanceScheme2.COPY(MaintenanceScheme);
                MaintenanceScheme2.RESET;
                IF MaintenanceScheme2.FIND THEN
                  MaintenanceScheme2.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    [External]
    PROCEDURE EditMaintenanceSchemeVersion@1100528606(VAR MaintenanceSchemeVersion@1100528602 : Record 11071743;Operation@1100528601 : Integer;OldMaintenanceSchemeVersion@1100528600 : Record 11071743);
    VAR
      MaintenanceSchemeVersion2@1100528604 : Record 11071743;
    BEGIN
      ServiceSetup.GET;

      IF NOT ServiceSetup."Central Management" OR (NOT ServiceSetup."Maintenance Schemes" AND NOT ServiceSetup."Standard Objects") THEN
        EXIT;

      IF
        (ServiceSetup."Maintenance Schemes" AND
        (MaintenanceSchemeVersion."Line Type" IN [
          MaintenanceSchemeVersion."Line Type"::"Maintenance Scheme",
          MaintenanceSchemeVersion."Line Type"::"Standard Object"])) OR
        (ServiceSetup."Standard Objects" AND
        (MaintenanceSchemeVersion."Line Type" IN [
          MaintenanceSchemeVersion."Line Type"::"Standard Object Installation",
          MaintenanceSchemeVersion."Line Type"::"Standard Object Deinstallation"]))
      THEN BEGIN
       // go go go
      END ELSE
        EXIT;

      IF FORMAT(MaintenanceSchemeVersion2) = FORMAT(MaintenanceSchemeVersion) THEN
        EXIT;

      //**4PS.sn #C011151, #C013740 Central Data Management (rename)
      //IF (ServiceSetup."Central Management") AND (Operation = 3) THEN
      //  ERROR(Text099, MaintenanceSchemeVersion.TABLECAPTION,
      //    ServiceSetup.FIELDCAPTION("Central Management"), ServiceSetup."Central Management");
      //**4PS.sn #C011151, #C013740 Central Data Management (rename)

      SetCompRelRecFilter(4);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          MaintenanceSchemeVersion2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:BEGIN
                MaintenanceSchemeVersion2.COPY(OldMaintenanceSchemeVersion);
                MaintenanceSchemeVersion2.RESET;
                IF MaintenanceSchemeVersion2.FIND THEN
                  MaintenanceSchemeVersion2.RENAME(
                    MaintenanceSchemeVersion."Line Type", MaintenanceSchemeVersion.Code,
                    MaintenanceSchemeVersion."Belongs to Scheme", MaintenanceSchemeVersion."Index Date");
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                MaintenanceSchemeVersion2.COPY(MaintenanceSchemeVersion);
                MaintenanceSchemeVersion2.RESET;
                IF MaintenanceSchemeVersion2.FIND THEN BEGIN
                  MaintenanceSchemeVersion2.TRANSFERFIELDS(MaintenanceSchemeVersion, FALSE);
                  MaintenanceSchemeVersion2.MODIFY;
                END ELSE BEGIN
                  MaintenanceSchemeVersion2.INSERT;
                END;
              END;
            4:BEGIN
                MaintenanceSchemeVersion2.COPY(MaintenanceSchemeVersion);
                MaintenanceSchemeVersion2.RESET;
                IF MaintenanceSchemeVersion2.FIND THEN
                  MaintenanceSchemeVersion2.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    [External]
    PROCEDURE EditMaintenanceSchemeLine@1100528608(VAR MaintSchemeVersionLine@1100528602 : Record 11071744;Operation@1100528601 : Integer;OldMaintSchemeVersionLine@1100528600 : Record 11071744);
    VAR
      MaintSchemeVersionLine2@1100528604 : Record 11071744;
    BEGIN
      ServiceSetup.GET;

      IF NOT ServiceSetup."Central Management" OR (NOT ServiceSetup."Maintenance Schemes" AND NOT ServiceSetup."Standard Objects") THEN
        EXIT;

      IF
        (ServiceSetup."Maintenance Schemes" AND
        (MaintSchemeVersionLine."Line Type" IN [
          MaintSchemeVersionLine."Line Type"::"Maintenance Scheme",
          MaintSchemeVersionLine."Line Type"::"Standard Object"])) OR
        (ServiceSetup."Standard Objects" AND
        (MaintSchemeVersionLine."Line Type" IN [
          MaintSchemeVersionLine."Line Type"::"Standard Object Installation",
          MaintSchemeVersionLine."Line Type"::"Standard Object Deinstallation"]))
      THEN BEGIN
      //go go go
      END ELSE
        EXIT;

      IF FORMAT(MaintSchemeVersionLine2) = FORMAT(MaintSchemeVersionLine) THEN
        EXIT;

      //**4PS.sn #C011151, #C013740 Central Data Management (rename)
      //IF (ServiceSetup."Central Management") AND (Operation = 3) THEN
      //  ERROR(Text099, MaintSchemeVersionLine.TABLECAPTION,
      //    ServiceSetup.FIELDCAPTION("Central Management"), ServiceSetup."Central Management");
      //**4PS.sn #C011151, #C013740 Central Data Management (rename)

      SetCompRelRecFilter(4);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          MaintSchemeVersionLine2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:BEGIN
                MaintSchemeVersionLine2.COPY(OldMaintSchemeVersionLine);
                MaintSchemeVersionLine2.RESET;
                IF MaintSchemeVersionLine2.FIND THEN
                  MaintSchemeVersionLine2.RENAME(
                    MaintSchemeVersionLine."Line Type", MaintSchemeVersionLine."Type Code",
                    MaintSchemeVersionLine."Belongs to Scheme", MaintSchemeVersionLine."Index Date",
                    MaintSchemeVersionLine."Line No.");
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                MaintSchemeVersionLine2.COPY(MaintSchemeVersionLine);
                MaintSchemeVersionLine2.RESET;
                IF MaintSchemeVersionLine2.FIND THEN BEGIN
                  MaintSchemeVersionLine2.TRANSFERFIELDS(MaintSchemeVersionLine, FALSE);
                  //mg.sn, 10-10-12: C002968
                  IF MaintSchemeVersionLine2."Rate Code" <> '' THEN
                    MaintSchemeVersionLine2.ValidateRateCodeByCompany(CompRelationRec.Company);
                  //mg.en, 10-10-12: C002968
                  MaintSchemeVersionLine2.MODIFY;
                END ELSE BEGIN
                  MaintSchemeVersionLine2.INSERT;
                END;
              END;
            4:BEGIN
                MaintSchemeVersionLine2.COPY(MaintSchemeVersionLine);
                MaintSchemeVersionLine2.RESET;
                IF MaintSchemeVersionLine2.FIND THEN
                  MaintSchemeVersionLine2.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    [External]
    PROCEDURE EditMaintSchemeLineProperty@1100525009(VAR MaintSchemeLineProperty@1100525004 : Record 11071954;Operation@1100525003 : Integer;OldMaintSchemeLineProperty@1100525002 : Record 11071954);
    VAR
      MaintSchemeLineProperty2@1100525000 : Record 11071954;
    BEGIN
      ServiceSetup.GET;

      IF NOT ServiceSetup."Central Management" OR (NOT ServiceSetup."Maintenance Schemes" AND NOT ServiceSetup."Standard Objects") THEN
        EXIT;

      IF
        ServiceSetup."Standard Objects" AND
        (MaintSchemeLineProperty."Line Type" = MaintSchemeLineProperty."Line Type"::"Standard Object")
      THEN BEGIN
      //go go go
      END ELSE
        EXIT;

      IF FORMAT(MaintSchemeLineProperty2) = FORMAT(MaintSchemeLineProperty) THEN
        EXIT;

      //**4PS.sn #C011151, #C013740 Central Data Management (rename)
      //IF (ServiceSetup."Central Management") AND (Operation = 3) THEN
      //  ERROR(Text099, CancelledMaintSchemeLine.TABLECAPTION,
      //    ServiceSetup.FIELDCAPTION("Central Management"), ServiceSetup."Central Management");
      //**4PS.sn #C011151, #C013740 Central Data Management (rename)

      SetCompRelRecFilter(4);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          MaintSchemeLineProperty2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:BEGIN
                MaintSchemeLineProperty2.COPY(OldMaintSchemeLineProperty);
                MaintSchemeLineProperty2.RESET;
                IF MaintSchemeLineProperty2.FIND THEN
                  MaintSchemeLineProperty2.RENAME(
                    MaintSchemeLineProperty."Line Type", MaintSchemeLineProperty."Type Code",
                    MaintSchemeLineProperty."Belongs to Scheme", MaintSchemeLineProperty."Index Date",
                    MaintSchemeLineProperty."Line Type (Base)", MaintSchemeLineProperty."Type Code (Base)",
                    MaintSchemeLineProperty."Line No. (Base)", MaintSchemeLineProperty."Belongs to Scheme (Base)");
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                MaintSchemeLineProperty2.COPY(MaintSchemeLineProperty);
                MaintSchemeLineProperty2.RESET;
                IF MaintSchemeLineProperty2.FIND THEN BEGIN
                  MaintSchemeLineProperty2.TRANSFERFIELDS(MaintSchemeLineProperty, FALSE);
                  MaintSchemeLineProperty2.MODIFY;
                END ELSE BEGIN
                  MaintSchemeLineProperty2.INSERT;
                END;
              END;
            4:BEGIN
                MaintSchemeLineProperty2.COPY(MaintSchemeLineProperty);
                MaintSchemeLineProperty2.RESET;
                IF MaintSchemeLineProperty2.FIND THEN
                  MaintSchemeLineProperty2.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    [External]
    PROCEDURE EditObjectSpecificationLine@1100528609(VAR ObjectSpecificationLine@1100528602 : Record 11071781;Operation@1100528601 : Integer;OldObjectSpecificationLine@1100528600 : Record 11071781);
    VAR
      ObjectSpecificationLine2@1100528604 : Record 11071781;
    BEGIN
      ServiceSetup.GET;

      IF NOT ServiceSetup."Central Management" OR NOT ServiceSetup."Object Specifications" THEN
        EXIT;

      IF ObjectSpecificationLine."Specification Type" <> ObjectSpecificationLine."Specification Type"::"Standard Object" THEN
        EXIT;

      IF FORMAT(ObjectSpecificationLine2) = FORMAT(ObjectSpecificationLine) THEN
        EXIT;

      //**4PS.sn #C011151, #C013740 Central Data Management (rename)
      //IF (ServiceSetup."Central Management") AND (Operation = 3) THEN
      //  ERROR(Text099, ObjectSpecificationLine.TABLECAPTION,
      //    ServiceSetup.FIELDCAPTION("Central Management"), ServiceSetup."Central Management");
      //**4PS.sn #C011151, #C013740 Central Data Management (rename)

      SetCompRelRecFilter(4);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          ObjectSpecificationLine2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:BEGIN
                ObjectSpecificationLine2.COPY(OldObjectSpecificationLine);
                ObjectSpecificationLine2.RESET;
                IF ObjectSpecificationLine2.FIND THEN
                  ObjectSpecificationLine2.RENAME(
                    ObjectSpecificationLine."Specification Type", ObjectSpecificationLine.Code,
                    ObjectSpecificationLine."Line No.");
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                ObjectSpecificationLine2.COPY(ObjectSpecificationLine);
                ObjectSpecificationLine2.RESET;
                IF ObjectSpecificationLine2.FIND THEN BEGIN
                  ObjectSpecificationLine2.TRANSFERFIELDS(ObjectSpecificationLine, FALSE);
                  ObjectSpecificationLine2.MODIFY;
                END ELSE BEGIN
                  ObjectSpecificationLine2.INSERT;
                END;
              END;
            4:BEGIN
                ObjectSpecificationLine2.COPY(ObjectSpecificationLine);
                ObjectSpecificationLine2.RESET;
                IF ObjectSpecificationLine2.FIND THEN
                  ObjectSpecificationLine2.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    [External]
    PROCEDURE EditServiceInspectionGroup@1100528623(VAR ServiceInspectionGroup@1100528602 : Record 11071747;Operation@1100528601 : Integer;OldServiceInspectionGroup@1100528600 : Record 11071747);
    VAR
      ServiceInspectionGroup2@1100528603 : Record 11071747;
    BEGIN
      ServiceSetup.GET;

      IF NOT ServiceSetup."Central Management" OR NOT ServiceSetup.Inspections THEN
        EXIT;

      IF FORMAT(ServiceInspectionGroup2) = FORMAT(ServiceInspectionGroup) THEN
        EXIT;

      //**4PS.sn #C011151, #C013740 Central Data Management (rename)
      //IF (ServiceSetup."Central Management") AND (Operation = 3) THEN
      //  ERROR(Text099, ServiceInspectionGroup.TABLECAPTION,
      //    ServiceSetup.FIELDCAPTION("Central Management"), ServiceSetup."Central Management");
      //**4PS.sn #C011151, #C013740 Central Data Management (rename)

      SetCompRelRecFilter(4);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          ServiceInspectionGroup2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:BEGIN
                ServiceInspectionGroup2.COPY(ServiceInspectionGroup);
                ServiceInspectionGroup2.RESET;
                IF ServiceInspectionGroup2.FIND THEN
                  ServiceInspectionGroup2.RENAME(ServiceInspectionGroup.Code);
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                ServiceInspectionGroup2.COPY(ServiceInspectionGroup);
                ServiceInspectionGroup2.RESET;
                IF ServiceInspectionGroup2.FIND THEN BEGIN
                  ServiceInspectionGroup2.TRANSFERFIELDS(ServiceInspectionGroup, FALSE);
                  ServiceInspectionGroup2.MODIFY;
                END ELSE BEGIN
                  ServiceInspectionGroup2.INSERT;
                END;
              END;
            4:BEGIN
                ServiceInspectionGroup2.COPY(ServiceInspectionGroup);
                ServiceInspectionGroup2.RESET;
                IF ServiceInspectionGroup2.FIND THEN
                  ServiceInspectionGroup2.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    [External]
    PROCEDURE EditServiceInspectionList@1100528619(VAR BaseServiceInspectionList@1100528602 : Record 11071930;Operation@1100528601 : Integer;OldBaseServiceInspectionList@1100528600 : Record 11071930);
    VAR
      BaseServiceInspectionList2@1100528603 : Record 11071930;
    BEGIN
      ServiceSetup.GET;

      IF NOT ServiceSetup."Central Management" OR NOT ServiceSetup.Inspections THEN
        EXIT;

      IF FORMAT(BaseServiceInspectionList2) = FORMAT(BaseServiceInspectionList) THEN
        EXIT;

      //**4PS.sn #C011151, #C013740 Central Data Management (rename)
      //IF (ServiceSetup."Central Management") AND (Operation = 3) THEN
      //  ERROR(Text099, BaseServiceInspectionList.TABLECAPTION,
      //    ServiceSetup.FIELDCAPTION("Central Management"), ServiceSetup."Central Management");
      //**4PS.sn #C011151, #C013740 Central Data Management (rename)

      SetCompRelRecFilter(4);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          BaseServiceInspectionList2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:BEGIN
                BaseServiceInspectionList2.COPY(OldBaseServiceInspectionList);
                BaseServiceInspectionList2.RESET;
                IF BaseServiceInspectionList2.FIND THEN
                  BaseServiceInspectionList2.RENAME(BaseServiceInspectionList.Code);
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                BaseServiceInspectionList2.COPY(BaseServiceInspectionList);
                BaseServiceInspectionList2.RESET;
                IF BaseServiceInspectionList2.FIND THEN BEGIN
                  BaseServiceInspectionList2.TRANSFERFIELDS(BaseServiceInspectionList, FALSE);
                  BaseServiceInspectionList2.MODIFY;
                END ELSE BEGIN
                  BaseServiceInspectionList2.INSERT;
                END;
              END;
            4:BEGIN
                BaseServiceInspectionList2.COPY(BaseServiceInspectionList);
                BaseServiceInspectionList2.RESET;
                IF BaseServiceInspectionList2.FIND THEN
                  BaseServiceInspectionList2.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    [External]
    PROCEDURE EditServiceInspectionVersion@1100528613(VAR ServiceInspectionVersion@1100528602 : Record 11071750;Operation@1100528601 : Integer;OldServiceInspectionVersion@1100528600 : Record 11071750);
    VAR
      ServiceInspectionVersion2@1100528604 : Record 11071750;
    BEGIN
      ServiceSetup.GET;

      IF NOT ServiceSetup."Central Management" OR NOT ServiceSetup.Inspections THEN
        EXIT;

      IF NOT (ServiceInspectionVersion."Inspection Type" IN [
        ServiceInspectionVersion."Inspection Type"::"Base Inspection List",
        ServiceInspectionVersion."Inspection Type"::"Standard Object",
        ServiceInspectionVersion."Inspection Type"::"Standard Object (Calls)"]) THEN
        EXIT;

      IF FORMAT(ServiceInspectionVersion2) = FORMAT(ServiceInspectionVersion) THEN
        EXIT;

      //**4PS.sn #C011151, #C013740 Central Data Management (rename)
      //IF (ServiceSetup."Central Management") AND (Operation = 3) THEN
      //  ERROR(Text099, ServiceInspectionVersion.TABLECAPTION,
      //    ServiceSetup.FIELDCAPTION("Central Management"), ServiceSetup."Central Management");
      //**4PS.sn #C011151, #C013740 Central Data Management (rename)

      SetCompRelRecFilter(4);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          ServiceInspectionVersion2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:BEGIN
                ServiceInspectionVersion2.COPY(OldServiceInspectionVersion);
                ServiceInspectionVersion2.RESET;
                IF ServiceInspectionVersion2.FIND THEN
                  ServiceInspectionVersion2.RENAME(
                    ServiceInspectionVersion."Inspection Type", ServiceInspectionVersion."Service Contract No.",
                    ServiceInspectionVersion.Code, ServiceInspectionVersion."Belongs to Scheme",
                    ServiceInspectionVersion."Belongs to Base Insp. List", ServiceInspectionVersion."Index Date");
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                ServiceInspectionVersion2.COPY(ServiceInspectionVersion);
                ServiceInspectionVersion2.RESET;
                IF ServiceInspectionVersion2.FIND THEN BEGIN
                  ServiceInspectionVersion2.TRANSFERFIELDS(ServiceInspectionVersion, FALSE);
                  ServiceInspectionVersion2.MODIFY;
                END ELSE BEGIN
                  ServiceInspectionVersion2.INSERT;
                END;
              END;
            4:BEGIN
                ServiceInspectionVersion2.COPY(ServiceInspectionVersion);
                ServiceInspectionVersion2.RESET;
                IF ServiceInspectionVersion2.FIND THEN
                  ServiceInspectionVersion2.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    [External]
    PROCEDURE EditServiceInspectionLine@1100528615(VAR ServiceInspectionLine@1100528602 : Record 11071751;Operation@1100528601 : Integer;OldServiceInspectionLine@1100528600 : Record 11071751);
    VAR
      ServiceInspectionLine2@1100528604 : Record 11071751;
    BEGIN
      ServiceSetup.GET;

      IF NOT ServiceSetup."Central Management" OR NOT ServiceSetup.Inspections THEN
        EXIT;

      IF NOT (ServiceInspectionLine."Inspection Type" IN [
        ServiceInspectionLine."Inspection Type"::"Base Inspection List",
        ServiceInspectionLine."Inspection Type"::"Standard Object",
        ServiceInspectionLine."Inspection Type"::"Standard Object (Calls)"]) THEN
        EXIT;

      IF FORMAT(ServiceInspectionLine2) = FORMAT(ServiceInspectionLine) THEN
        EXIT;

      //**4PS.sn #C011151, #C013740 Central Data Management (rename)
      //IF (ServiceSetup."Central Management") AND (Operation = 3) THEN
      //  ERROR(Text099, ServiceInspectionLine.TABLECAPTION,
      //    ServiceSetup.FIELDCAPTION("Central Management"), ServiceSetup."Central Management");
      //**4PS.sn #C011151, #C013740 Central Data Management (rename)

      SetCompRelRecFilter(4);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          ServiceInspectionLine2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:BEGIN
                ServiceInspectionLine2.COPY(OldServiceInspectionLine);
                ServiceInspectionLine2.RESET;
                IF ServiceInspectionLine2.FIND THEN
                  ServiceInspectionLine2.RENAME(
                    ServiceInspectionLine."Inspection Type", ServiceInspectionLine."Service Contract No.",
                    ServiceInspectionLine.Code, ServiceInspectionLine."Belongs to Scheme",
                    ServiceInspectionLine."Belongs to Base Insp. List", ServiceInspectionLine."Index Date",
                    ServiceInspectionLine."Line No.");
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                ServiceInspectionLine2.COPY(ServiceInspectionLine);
                ServiceInspectionLine2.RESET;
                IF ServiceInspectionLine2.FIND THEN BEGIN
                  ServiceInspectionLine2.TRANSFERFIELDS(ServiceInspectionLine, FALSE);
                  ServiceInspectionLine2.MODIFY;
                END ELSE BEGIN
                  ServiceInspectionLine2.INSERT;
                END;
              END;
            4:BEGIN
                ServiceInspectionLine2.COPY(ServiceInspectionLine);
                ServiceInspectionLine2.RESET;
                IF ServiceInspectionLine2.FIND THEN
                  ServiceInspectionLine2.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    [External]
    PROCEDURE EditInspectionLineProperty@1100528624(VAR InspectionLineProperty@1100528602 : Record 11071978;Operation@1100528601 : Integer;OldInspectionLineProperty@1100528600 : Record 11071978);
    VAR
      InspectionLineProperty2@1100528604 : Record 11071978;
    BEGIN
      ServiceSetup.GET;

      IF NOT ServiceSetup."Central Management" OR NOT ServiceSetup.Inspections THEN
        EXIT;

      IF
        ServiceSetup."Standard Objects" AND
        (InspectionLineProperty."Inspection Type" = InspectionLineProperty."Inspection Type"::"Standard Object")
      THEN BEGIN
      //go go go
      END ELSE
        EXIT;

      IF FORMAT(InspectionLineProperty2) = FORMAT(InspectionLineProperty) THEN
        EXIT;

      //**4PS.sn #C011151, #C013740 Central Data Management (rename)
      //IF (ServiceSetup."Central Management") AND (Operation = 3) THEN
      //  ERROR(Text099, CancelledInspectionLine.TABLECAPTION,
      //    ServiceSetup.FIELDCAPTION("Central Management"), ServiceSetup."Central Management");
      //**4PS.sn #C011151, #C013740 Central Data Management (rename)

      SetCompRelRecFilter(4);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          InspectionLineProperty2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:BEGIN
                InspectionLineProperty2.COPY(OldInspectionLineProperty);
                InspectionLineProperty2.RESET;
                IF InspectionLineProperty2.FIND THEN
                  InspectionLineProperty2.RENAME(
                    InspectionLineProperty."Inspection Type", InspectionLineProperty."Service Contract No.",
                    InspectionLineProperty.Code, InspectionLineProperty."Belongs to Scheme",
                    InspectionLineProperty."Belongs to Base Insp. List", InspectionLineProperty."Index Date",
                    InspectionLineProperty."Inspection Type (Base)", InspectionLineProperty."Serv. Contract No. (Base)",
                    InspectionLineProperty."Code (Base)", InspectionLineProperty."Belongs to Scheme (Base)",
                    InspectionLineProperty."Belongs to Base Insp. List (Ba", InspectionLineProperty."Line No. (Base)");
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                InspectionLineProperty2.COPY(InspectionLineProperty);
                InspectionLineProperty2.RESET;
                IF InspectionLineProperty2.FIND THEN BEGIN
                  InspectionLineProperty2.TRANSFERFIELDS(InspectionLineProperty);
                  InspectionLineProperty2.MODIFY;
                END ELSE BEGIN
                  InspectionLineProperty2.INSERT;
                END;
              END;
            4:BEGIN
                InspectionLineProperty2.COPY(InspectionLineProperty);
                InspectionLineProperty2.RESET;
                IF InspectionLineProperty2.FIND THEN
                  InspectionLineProperty2.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    [External]
    PROCEDURE EditBaseServiceInspectionLine@1100528622(VAR BaseServiceInspectionLine@1100528602 : Record 11071748;Operation@1100528601 : Integer;OldBaseServiceInspectionLine@1100528600 : Record 11071748);
    VAR
      BaseServiceInspectionLine2@1100528603 : Record 11071748;
    BEGIN
      ServiceSetup.GET;

      IF NOT ServiceSetup."Central Management" OR NOT ServiceSetup.Inspections THEN
        EXIT;

      IF FORMAT(BaseServiceInspectionLine2) = FORMAT(BaseServiceInspectionLine) THEN
        EXIT;

      //**4PS.sn #C011151, #C013740 Central Data Management (rename)
      //IF (ServiceSetup."Central Management") AND (Operation = 3) THEN
      //  ERROR(Text099, BaseServiceInspectionLine.TABLECAPTION,
      //    ServiceSetup.FIELDCAPTION("Central Management"), ServiceSetup."Central Management");
      //**4PS.sn #C011151, #C013740 Central Data Management (rename)

      SetCompRelRecFilter(4);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          BaseServiceInspectionLine2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:BEGIN
                BaseServiceInspectionLine2.COPY(OldBaseServiceInspectionLine);
                BaseServiceInspectionLine2.RESET;
                IF BaseServiceInspectionLine2.FIND THEN
                  BaseServiceInspectionLine2.RENAME(BaseServiceInspectionLine.Code);
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                BaseServiceInspectionLine2.COPY(BaseServiceInspectionLine);
                BaseServiceInspectionLine2.RESET;
                IF BaseServiceInspectionLine2.FIND THEN BEGIN
                  BaseServiceInspectionLine2.TRANSFERFIELDS(BaseServiceInspectionLine, FALSE);
                  BaseServiceInspectionLine2.MODIFY;
                END ELSE BEGIN
                  BaseServiceInspectionLine2.INSERT;
                END;
              END;
            4:BEGIN
                BaseServiceInspectionLine2.COPY(BaseServiceInspectionLine);
                BaseServiceInspectionLine2.RESET;
                IF BaseServiceInspectionLine2.FIND THEN
                  BaseServiceInspectionLine2.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    [External]
    PROCEDURE EditBaseServiceInspOption@1100528621(VAR BaseServiceInspectionOption@1100528602 : Record 11071749;Operation@1100528601 : Integer;OldBaseServiceInspectionOption@1100528600 : Record 11071749);
    VAR
      BaseServiceInspectionOption2@1100528603 : Record 11071749;
    BEGIN
      ServiceSetup.GET;

      IF NOT ServiceSetup."Central Management" OR NOT ServiceSetup.Inspections THEN
        EXIT;

      IF FORMAT(BaseServiceInspectionOption2) = FORMAT(BaseServiceInspectionOption) THEN
        EXIT;

      //**4PS.sn #C011151, #C013740 Central Data Management (rename)
      //IF (ServiceSetup."Central Management") AND (Operation = 3) THEN
      //  ERROR(Text099, BaseServiceInspectionOption.TABLECAPTION,
      //    ServiceSetup.FIELDCAPTION("Central Management"), ServiceSetup."Central Management");
      //**4PS.sn #C011151, #C013740 Central Data Management (rename)

      SetCompRelRecFilter(4);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          BaseServiceInspectionOption2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:BEGIN
                BaseServiceInspectionOption2.COPY(OldBaseServiceInspectionOption);
                BaseServiceInspectionOption2.RESET;
                IF BaseServiceInspectionOption2.FIND THEN BEGIN
                  BaseServiceInspectionOption2.SetSkipCentralDataMgtInOnRename(TRUE);
                  BaseServiceInspectionOption2.ExchangeMOB('R', CompRelationRec.Company);
                  BaseServiceInspectionOption2.RENAME(
                    BaseServiceInspectionOption."Base Inspection Line Code", BaseServiceInspectionOption.Code
                  );
                END;
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                BaseServiceInspectionOption2.COPY(BaseServiceInspectionOption);
                BaseServiceInspectionOption2.RESET;
                IF BaseServiceInspectionOption2.FIND THEN BEGIN
                  BaseServiceInspectionOption2.TRANSFERFIELDS(BaseServiceInspectionOption, FALSE);
                  BaseServiceInspectionOption2.MODIFY;
                END ELSE BEGIN
                  BaseServiceInspectionOption2.INSERT;
                END;
              END;
            4:BEGIN
                BaseServiceInspectionOption2.COPY(BaseServiceInspectionOption);
                BaseServiceInspectionOption2.RESET;
                IF BaseServiceInspectionOption2.FIND THEN BEGIN
                  BaseServiceInspectionOption2.ExchangeMOB('D', CompRelationRec.Company);
                  BaseServiceInspectionOption2.DELETE;
                END;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    [External]
    PROCEDURE EditObjectMaterialInventory@1100528614(VAR ObjectMaterialInventory@1100528602 : Record 11071712;Operation@1100528601 : Integer;OldObjectMaterialInventory@1100528600 : Record 11071712);
    VAR
      ObjectMaterialInventory2@1100528604 : Record 11071712;
    BEGIN
      ServiceSetup.GET;

      IF NOT ServiceSetup."Central Management" OR NOT ServiceSetup."Material Inventories" THEN
        EXIT;

      IF ObjectMaterialInventory.Type <> ObjectMaterialInventory.Type::"Standard Object" THEN
        EXIT;

      IF FORMAT(ObjectMaterialInventory2) = FORMAT(ObjectMaterialInventory) THEN
        EXIT;

      //**4PS.sn #C011151, #C013740 Central Data Management (rename)
      //IF (ServiceSetup."Central Management") AND (Operation = 3) THEN
      //  ERROR(Text099, ObjectMaterialInventory.TABLECAPTION,
      //    ServiceSetup.FIELDCAPTION("Central Management"), ServiceSetup."Central Management");
      //**4PS.sn #C011151, #C013740 Central Data Management (rename)

      SetCompRelRecFilter(4);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          ObjectMaterialInventory2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:BEGIN
                ObjectMaterialInventory2.COPY(OldObjectMaterialInventory);
                ObjectMaterialInventory2.RESET;
                IF ObjectMaterialInventory2.FIND THEN
                  ObjectMaterialInventory2.RENAME(
                    ObjectMaterialInventory.Type, ObjectMaterialInventory.Code, ObjectMaterialInventory."Line No."
                  );
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                ObjectMaterialInventory2.COPY(ObjectMaterialInventory);
                ObjectMaterialInventory2.RESET;
                IF ObjectMaterialInventory2.FIND THEN BEGIN
                  ObjectMaterialInventory2.TRANSFERFIELDS(ObjectMaterialInventory, FALSE);
                  ObjectMaterialInventory2.MODIFY;
                END ELSE BEGIN
                  ObjectMaterialInventory2.INSERT;
                END;
              END;
            4:BEGIN
                ObjectMaterialInventory2.COPY(ObjectMaterialInventory);
                ObjectMaterialInventory2.RESET;
                IF ObjectMaterialInventory2.FIND THEN
                  ObjectMaterialInventory2.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    [External]
    PROCEDURE EditMaintenanceSalesRate@1100528616(VAR MaintenanceSalesRate@1100528602 : Record 11020341;Operation@1100528601 : Integer;OldMaintenanceSalesRate@1100528600 : Record 11020341);
    VAR
      MaintenanceSalesRate2@1100528604 : Record 11020341;
    BEGIN
      ServiceSetup.GET;

      IF NOT ServiceSetup."Central Management" OR NOT ServiceSetup."Standard Objects" THEN
        EXIT;

      IF FORMAT(MaintenanceSalesRate2) = FORMAT(MaintenanceSalesRate) THEN
        EXIT;

      //**4PS.sn #C011151, #C013740 Central Data Management (rename)
      //IF (ServiceSetup."Central Management") AND (Operation = 3) THEN
      //  ERROR(Text099, MaintenanceSalesRate.TABLECAPTION,
      //    ServiceSetup.FIELDCAPTION("Central Management"), ServiceSetup."Central Management");
      //**4PS.sn #C011151, #C013740 Central Data Management (rename)

      SetCompRelRecFilter(4);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          MaintenanceSalesRate2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:BEGIN
                MaintenanceSalesRate2.COPY(OldMaintenanceSalesRate);
                MaintenanceSalesRate2.RESET;
                IF MaintenanceSalesRate2.FIND THEN
                  MaintenanceSalesRate2.RENAME(
                    MaintenanceSalesRate."Service Package", MaintenanceSalesRate."Object Group",
                    MaintenanceSalesRate."Object Group Type", MaintenanceSalesRate."Customer No.",
                    MaintenanceSalesRate."Reference Date");
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                MaintenanceSalesRate2.COPY(MaintenanceSalesRate);
                MaintenanceSalesRate2.RESET;
                IF MaintenanceSalesRate2.FIND THEN BEGIN
                  MaintenanceSalesRate2.TRANSFERFIELDS(MaintenanceSalesRate, FALSE);
                  MaintenanceSalesRate2.MODIFY;
                END ELSE BEGIN
                  MaintenanceSalesRate2.INSERT;
                END;
              END;
            4:BEGIN
                MaintenanceSalesRate2.COPY(MaintenanceSalesRate);
                MaintenanceSalesRate2.RESET;
                IF MaintenanceSalesRate2.FIND THEN
                  MaintenanceSalesRate2.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    [External]
    PROCEDURE EditServiceObjectBrand@1100528626(VAR ServiceObjectBrand@1100528602 : Record 11072195;Operation@1100528601 : Integer;OldServiceObjectBrand@1100528600 : Record 11072195);
    VAR
      ServiceObjectBrand2@1100528604 : Record 11072195;
    BEGIN
      ServiceSetup.GET;

      IF NOT ServiceSetup."Central Management" OR NOT ServiceSetup."Standard Objects" THEN
        EXIT;

      IF FORMAT(ServiceObjectBrand2) = FORMAT(ServiceObjectBrand) THEN
        EXIT;

      SetCompRelRecFilter(4);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          ServiceObjectBrand2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:BEGIN
                ServiceObjectBrand2.COPY(OldServiceObjectBrand);
                ServiceObjectBrand2.RESET;
                IF ServiceObjectBrand2.FIND THEN
                  ServiceObjectBrand2.RENAME(ServiceObjectBrand.Code);
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                ServiceObjectBrand2.COPY(ServiceObjectBrand);
                ServiceObjectBrand2.RESET;
                IF ServiceObjectBrand2.FIND THEN BEGIN
                  ServiceObjectBrand2.TRANSFERFIELDS(ServiceObjectBrand, FALSE);
                  ServiceObjectBrand2.MODIFY;
                END ELSE BEGIN
                  ServiceObjectBrand2.INSERT;
                END;
              END;
            4:BEGIN
                ServiceObjectBrand2.COPY(ServiceObjectBrand);
                ServiceObjectBrand2.RESET;
                IF ServiceObjectBrand2.FIND THEN
                  ServiceObjectBrand2.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    [External]
    PROCEDURE EditServiceObjectModel@1100528629(VAR ServiceObjectModel@1100528602 : Record 11072196;Operation@1100528601 : Integer;OldServiceObjectModel@1100528600 : Record 11072196);
    VAR
      ServiceObjectModel2@1100528604 : Record 11072196;
    BEGIN
      ServiceSetup.GET;

      IF NOT ServiceSetup."Central Management" OR NOT ServiceSetup."Standard Objects" THEN
        EXIT;

      IF FORMAT(ServiceObjectModel2) = FORMAT(ServiceObjectModel) THEN
        EXIT;

      SetCompRelRecFilter(4);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          ServiceObjectModel2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:BEGIN
                ServiceObjectModel2.COPY(OldServiceObjectModel);
                ServiceObjectModel2.RESET;
                IF ServiceObjectModel2.FIND THEN
                  ServiceObjectModel2.RENAME(ServiceObjectModel."Brand Code", ServiceObjectModel.Code);
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                ServiceObjectModel2.COPY(ServiceObjectModel);
                ServiceObjectModel2.RESET;
                IF ServiceObjectModel2.FIND THEN BEGIN
                  ServiceObjectModel2.TRANSFERFIELDS(ServiceObjectModel, FALSE);
                  ServiceObjectModel2.MODIFY;
                END ELSE BEGIN
                  ServiceObjectModel2.INSERT;
                END;
              END;
            4:BEGIN
                ServiceObjectModel2.COPY(ServiceObjectModel);
                ServiceObjectModel2.RESET;
                IF ServiceObjectModel2.FIND THEN
                  ServiceObjectModel2.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    [External]
    PROCEDURE EditServiceObjectType@1100528630(VAR ServiceObjectType@1100528602 : Record 11072197;Operation@1100528601 : Integer;OldServiceObjectType@1100528600 : Record 11072197);
    VAR
      ServiceObjectType2@1100528604 : Record 11072197;
    BEGIN
      ServiceSetup.GET;

      IF NOT ServiceSetup."Central Management" OR NOT ServiceSetup."Standard Objects" THEN
        EXIT;

      IF FORMAT(ServiceObjectType2) = FORMAT(ServiceObjectType) THEN
        EXIT;

      SetCompRelRecFilter(4);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          ServiceObjectType2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:BEGIN
                ServiceObjectType2.COPY(OldServiceObjectType);
                ServiceObjectType2.RESET;
                IF ServiceObjectType2.FIND THEN
                  ServiceObjectType2.RENAME(ServiceObjectType."Brand Code", ServiceObjectType."Model Code", ServiceObjectType.Code);
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                ServiceObjectType2.COPY(ServiceObjectType);
                ServiceObjectType2.RESET;
                IF ServiceObjectType2.FIND THEN BEGIN
                  ServiceObjectType2.TRANSFERFIELDS(ServiceObjectType, FALSE);
                  ServiceObjectType2.MODIFY;
                END ELSE BEGIN
                  ServiceObjectType2.INSERT;
                END;
              END;
            4:BEGIN
                ServiceObjectType2.COPY(ServiceObjectType);
                ServiceObjectType2.RESET;
                IF ServiceObjectType2.FIND THEN
                  ServiceObjectType2.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    [External]
    PROCEDURE UpdateGLAccount@1210190010(VAR GLAccRec@11012000 : Record 15;Operation@11012001 : Integer;OldGLAccRec@11012002 : Record 15);
    VAR
      GLAccRec2@11012003 : Record 15;
      OldRecRef@1210190001 : RecordRef;
      NewRecRef@1210190000 : RecordRef;
    BEGIN
      GenLedgerSetup.GET;
      IF NOT GenLedgerSetup."Central Management" OR NOT GenLedgerSetup."Central Man. G/L Accounts" THEN
        EXIT;

      //X016.sn
      LeadingCompany := CompRelationRec.GetLeadingCompany(DATABASE::"General Ledger Setup",GenLedgerSetup."Central Management");
      IF COMPANYNAME <> LeadingCompany THEN BEGIN
      //X016.en
        OldRecRef.GETTABLE(OldGLAccRec);
        NewRecRef.GETTABLE(GLAccRec);
        ExcludeFieldsFromExchange(OldRecRef, NewRecRef, FALSE);
        NewRecRef.SETTABLE(GLAccRec);
        EXIT;
      END;

      //**4PS.sn #C011151, #C013740 Central Data Management (rename)
      //IF (GenLedgerSetup."Central Management") AND (Operation = 3) THEN
      //  ERROR(Text099, GLAccRec.TABLECAPTION,
      //    GenLedgerSetup.FIELDCAPTION("Central Management"), GenLedgerSetup."Central Management");
      //**4PS.sn #C011151, #C013740 Central Data Management (rename)

      SetCompRelRecFilter(3);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          GLAccRec2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:BEGIN
                GLAccRec2.COPY(OldGLAccRec);
                GLAccRec2.RESET;
                IF GLAccRec2.FIND THEN
                  GLAccRec2.SetSkipCentralDataMgtInOnRename(TRUE);
                  GLAccRec2.RENAME(GLAccRec."No.");
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                GLAccRec2 := GLAccRec;
                GLAccRec2.CHANGECOMPANY(CompRelationRec.Company);
                IF NOT GLAccRec2.GET(GLAccRec."No.") THEN //GET used instead of FIND T001478
                  GLAccRec2.INSERT
                ELSE BEGIN
                  OldRecRef.GETTABLE(GLAccRec2);
                  GLAccRec2.TRANSFERFIELDS(GLAccRec,FALSE);
                  NewRecRef.GETTABLE(GLAccRec2);
                  ExcludeFieldsFromExchange(OldRecRef, NewRecRef, TRUE);
                  NewRecRef.MODIFY;
                END;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    [External]
    PROCEDURE UpdateGLAccountCategory@1100529200(VAR GLAccountCategory@11012000 : Record 570;Operation@11012001 : Integer;GLAccountCategoryOLD@11012002 : Record 570);
    VAR
      GLAccountCategory2@11012003 : Record 570;
    BEGIN
      GenLedgerSetup.GET;
      IF NOT GenLedgerSetup."Central Management" OR NOT GenLedgerSetup."Central Man. G/L Accounts" THEN
        EXIT;

      SetCompRelRecFilter(3);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          GLAccountCategory2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:BEGIN
                GLAccountCategory2.COPY(GLAccountCategoryOLD);
                GLAccountCategory2.RESET;
                IF GLAccountCategory2.FIND THEN
                  GLAccountCategory.RENAME(GLAccountCategory."Entry No.");
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                GLAccountCategory2.COPY(GLAccountCategory);
                GLAccountCategory2.RESET;
                IF GLAccountCategory2.FIND THEN BEGIN
                  GLAccountCategory2.TRANSFERFIELDS(GLAccountCategory, FALSE);
                  GLAccountCategory2.MODIFY;
                END ELSE
                  GLAccountCategory2.INSERT;
              END;
            4:BEGIN
                GLAccountCategory2.COPY(GLAccountCategory);
                GLAccountCategory2.RESET;
                IF GLAccountCategory2.FIND THEN
                  GLAccountCategory2.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    [External]
    PROCEDURE RemoveGLAccount@1210190011(GLAccRec@1210190006 : Record 15);
    VAR
      GLAccRec2@1210190007 : Record 15;
      GLBudgetEntry@1210190005 : Record 96;
      CommentLine@1210190004 : Record 97;
      ExtTextHeader@1210190003 : Record 279;
      ExtTextLine@1210190011 : Record 280;
      AnalysisViewEntry@1210190002 : Record 365;
      AnalysisViewBudgetEntry@1210190001 : Record 366;
      GLBudgetName@1210190009 : Record 95;
      DefaultDim@1210190008 : Record 352;
      MoveEntries@1210190000 : Codeunit 361;
    BEGIN
      GenLedgerSetup.GET;
      IF NOT GenLedgerSetup."Central Management" OR NOT GenLedgerSetup."Central Man. G/L Accounts" THEN
        EXIT;

      SetCompRelRecFilter(3);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          CheckGLAccBalanceInRelatedComp(GLAccRec, CompRelationRec.Company); //kkleermaker.n, 110719, C-029093
          MoveEntries.SetCompanyCentralDataMgt(CompRelationRec.Company);
          MoveEntries.MoveGLEntries(GLAccRec);

          GLBudgetEntry.CHANGECOMPANY(CompRelationRec.Company);
          GLBudgetEntry.SETCURRENTKEY("Budget Name","G/L Account No.");
          GLBudgetEntry.SETRANGE("G/L Account No.",GLAccRec."No.");
          IF GLBudgetEntry.FINDSET THEN
            REPEAT
              GLBudgetName.CHANGECOMPANY(CompRelationRec.Company);
              GLBudgetName.GET(GLBudgetEntry."Budget Name");
              GLBudgetName.TESTFIELD(Blocked,FALSE);

              GLBudgetEntry.DELETE;
            UNTIL GLBudgetEntry.NEXT = 0;

          CommentLine.CHANGECOMPANY(CompRelationRec.Company);
          CommentLine.SETRANGE("Table Name",CommentLine."Table Name"::"G/L Account");
          CommentLine.SETRANGE("No.",GLAccRec."No.");
          CommentLine.DELETEALL;

          ExtTextHeader.CHANGECOMPANY(CompRelationRec.Company);
          ExtTextHeader.SETRANGE("Table Name",ExtTextHeader."Table Name"::"G/L Account");
          ExtTextHeader.SETRANGE("No.",GLAccRec."No.");
          ExtTextHeader.DELETEALL;

          ExtTextLine.CHANGECOMPANY(CompRelationRec.Company);
          ExtTextLine.SETRANGE("Table Name",ExtTextLine."Table Name"::"G/L Account");
          ExtTextLine.SETRANGE("No.",GLAccRec."No.");
          ExtTextLine.DELETEALL;

          AnalysisViewEntry.CHANGECOMPANY(CompRelationRec.Company);
          AnalysisViewEntry.SETRANGE("Account No.",GLAccRec."No.");
          AnalysisViewEntry.DELETEALL;

          AnalysisViewBudgetEntry.CHANGECOMPANY(CompRelationRec.Company);
          AnalysisViewBudgetEntry.SETRANGE("G/L Account No.",GLAccRec."No.");
          AnalysisViewBudgetEntry.DELETEALL;

          DefaultDim.CHANGECOMPANY(CompRelationRec.Company);
          DefaultDim.SETRANGE("Table ID",DATABASE::"G/L Account");
          DefaultDim.SETRANGE("No.",GLAccRec."No.");
          DefaultDim.DELETEALL;

          GLAccRec2.COPY(GLAccRec);
          GLAccRec2.RESET;
          GLAccRec2.CHANGECOMPANY(CompRelationRec.Company);
          IF GLAccRec2.FIND THEN
            GLAccRec2.DELETE;

        UNTIL CompRelationRec.NEXT = 0;
    END;

    [External]
    PROCEDURE RemoveGLAccountCategory@1100529201(GLAccountCategory@1210190006 : Record 570);
    VAR
      GLAccountCategory2@1210190007 : Record 570;
    BEGIN
      GenLedgerSetup.GET;
      IF NOT GenLedgerSetup."Central Management" OR NOT GenLedgerSetup."Central Man. G/L Accounts" THEN
        EXIT;

      SetCompRelRecFilter(3);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          GLAccountCategory2.COPY(GLAccountCategory);
          GLAccountCategory2.RESET;
          GLAccountCategory2.CHANGECOMPANY(CompRelationRec.Company);
          IF GLAccountCategory2.FIND THEN
            GLAccountCategory2.DELETE;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    [External]
    PROCEDURE UpdateInterestPercentageIC@1100528202(VAR InterestPercentageICAcc@11012000 : Record 11012119;Operation@11012001 : Integer;OLDInterestPercentageICAcc@11012002 : Record 11012119);
    VAR
      InterestPercentageICAcc2@11012003 : Record 11012119;
      OldRecRef@1210190001 : RecordRef;
      NewRecRef@1210190000 : RecordRef;
    BEGIN
      GenLedgerSetup.GET;
      IF NOT GenLedgerSetup."Central Management" OR NOT GenLedgerSetup."Central Man. IC Interest" THEN
        EXIT;

      LeadingCompany := CompRelationRec.GetLeadingCompany(DATABASE::"General Ledger Setup",GenLedgerSetup."Central Management");
      IF COMPANYNAME <> LeadingCompany THEN BEGIN
        OldRecRef.GETTABLE(OLDInterestPercentageICAcc);
        NewRecRef.GETTABLE(InterestPercentageICAcc);
        ExcludeFieldsFromExchange(OldRecRef, NewRecRef, FALSE);
        NewRecRef.SETTABLE(InterestPercentageICAcc);
        EXIT;
      END;

      SetCompRelRecFilter(3);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          InterestPercentageICAcc2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:BEGIN
                InterestPercentageICAcc2.COPY(OLDInterestPercentageICAcc);
                InterestPercentageICAcc2.RESET;
                IF InterestPercentageICAcc2.FIND THEN
                  InterestPercentageICAcc2.SetSkipCentralDataMgtInOnRename(TRUE);
                  InterestPercentageICAcc2.RENAME(InterestPercentageICAcc."Starting Date");
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                InterestPercentageICAcc2 := InterestPercentageICAcc;
                InterestPercentageICAcc2.CHANGECOMPANY(CompRelationRec.Company);
                IF NOT InterestPercentageICAcc2.GET(InterestPercentageICAcc."Starting Date") THEN
                  InterestPercentageICAcc2.INSERT
                ELSE BEGIN
                  OldRecRef.GETTABLE(InterestPercentageICAcc2);
                  InterestPercentageICAcc2.TRANSFERFIELDS(InterestPercentageICAcc,FALSE);
                  NewRecRef.GETTABLE(InterestPercentageICAcc2);
                  ExcludeFieldsFromExchange(OldRecRef, NewRecRef, TRUE);
                  NewRecRef.MODIFY;
                END;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    [External]
    PROCEDURE RemoveInterestPercentageIC@1100528201(InterestPercentageICAcc@1210190006 : Record 11012119);
    VAR
      InterestPercentageICAcc2@1210190007 : Record 11012119;
    BEGIN
      GenLedgerSetup.GET;
      IF NOT GenLedgerSetup."Central Management" OR NOT GenLedgerSetup."Central Man. IC Interest" THEN
        EXIT;
      SetCompRelRecFilter(3);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          InterestPercentageICAcc2.COPY(InterestPercentageICAcc);
          InterestPercentageICAcc2.RESET;
          InterestPercentageICAcc2.CHANGECOMPANY(CompRelationRec.Company);
          IF InterestPercentageICAcc2.FIND THEN
            InterestPercentageICAcc2.DELETE;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    PROCEDURE ItemFormEditable@7(VAR NavItemsNotEditable@11012000 : Boolean;VAR DiscountTermsNotEditable@1100485000 : Boolean;VAR DiscountGroupsNotEditable@1100528300 : Boolean;VAR RecipesNotEditable@11012003 : Boolean);
    BEGIN
      InventorySetup.GET;
      IF InventorySetup."Central Management" THEN BEGIN
        //X016.sn
        LeadingCompany := CompRelationRec.GetLeadingCompany(DATABASE::"Inventory Setup",InventorySetup."Central Management");
        IF COMPANYNAME <> LeadingCompany THEN BEGIN
        //X016.en
          NavItemsNotEditable := InventorySetup."Navision-Items";
          DiscountTermsNotEditable := InventorySetup."Discount Terms";
          DiscountGroupsNotEditable := InventorySetup."Discount Term Groups";
          RecipesNotEditable := InventorySetup.Recipes;
        END;
      END;
    END;

    [External]
    PROCEDURE ExtendedItemTextEditable@1100528703() : Boolean;
    BEGIN
      InventorySetup.GET;
      IF NOT InventorySetup."Central Management" THEN
        EXIT(TRUE);

      LeadingCompany := CompRelationRec.GetLeadingCompany(DATABASE::"Inventory Setup", InventorySetup."Central Management");
      IF COMPANYNAME = LeadingCompany THEN
        EXIT(TRUE);

      IF NOT InventorySetup."Extended Text" THEN
        EXIT(TRUE);
    END;

    [External]
    PROCEDURE DeliveryFormEditable@1100409001(VAR DeliveryNotEditable@11012003 : Boolean);
    BEGIN
      //db, 28-01-13: C005024
      InventorySetup.GET;
      IF InventorySetup."Central Management" THEN BEGIN
        //X016.sn
        LeadingCompany := CompRelationRec.GetLeadingCompany(DATABASE::"Inventory Setup",InventorySetup."Central Management");
        IF COMPANYNAME <> LeadingCompany THEN BEGIN
        //X016.en
          DeliveryNotEditable := InventorySetup."Delivery Groups";
        END;
      END;
    END;

    [External]
    PROCEDURE NAVItemFormEditable@1100528800() : Boolean;
    VAR
      NavBln@1100528803 : Boolean;
      DiscBln@1100528802 : Boolean;
      DiscGrpBln@1100528801 : Boolean;
      RcpBln@1100528800 : Boolean;
    BEGIN
      // dp00133.n
      ItemFormEditable(NavBln,DiscBln,DiscGrpBln,RcpBln);
      EXIT(NOT NavBln);
    END;

    [External]
    PROCEDURE FinanceFormEditable@1210190009() : Boolean;
    BEGIN
      GenLedgerSetup.GET;
      IF GenLedgerSetup."Central Management" THEN BEGIN
        //X016.sn
        LeadingCompany := CompRelationRec.GetLeadingCompany(DATABASE::"General Ledger Setup",GenLedgerSetup."Central Management");
        IF COMPANYNAME <> LeadingCompany THEN
          EXIT(NOT GenLedgerSetup."Central Man. G/L Accounts");
        //X016.en
      END;

      EXIT(TRUE);
    END;

    [External]
    PROCEDURE InterestICFormEditable@1100528200() : Boolean;
    BEGIN
      GenLedgerSetup.GET;
      IF GenLedgerSetup."Central Management" THEN BEGIN
        LeadingCompany := CompRelationRec.GetLeadingCompany(DATABASE::"General Ledger Setup",GenLedgerSetup."Central Management");
        IF COMPANYNAME <> LeadingCompany THEN
          EXIT(NOT GenLedgerSetup."Central Man. IC Interest");
      END;

      EXIT(TRUE);
    END;

    [External]
    PROCEDURE StandardObjectFormEditable@1100528602() : Boolean;
    BEGIN
      IF ServiceSetup.GET THEN
        IF ServiceSetup."Central Management" THEN BEGIN
          LeadingCompany := CompRelationRec.GetLeadingCompany(DATABASE::"Service Setup", ServiceSetup."Central Management");
          IF COMPANYNAME <> LeadingCompany THEN
            EXIT(NOT ServiceSetup."Standard Objects");
        END;

      EXIT(TRUE);
    END;

    [External]
    PROCEDURE MaintenanceSchemeFormEditable@1100528605() : Boolean;
    BEGIN
      IF ServiceSetup.GET THEN
        IF ServiceSetup."Central Management" THEN BEGIN
          LeadingCompany := CompRelationRec.GetLeadingCompany(DATABASE::"Service Setup", ServiceSetup."Central Management");
          IF COMPANYNAME <> LeadingCompany THEN
            EXIT(NOT ServiceSetup."Maintenance Schemes");
        END;

      EXIT(TRUE);
    END;

    [External]
    PROCEDURE ObjectSpecFormEditable@1100528610() : Boolean;
    BEGIN
      IF ServiceSetup.GET THEN
        IF ServiceSetup."Central Management" THEN BEGIN
          LeadingCompany := CompRelationRec.GetLeadingCompany(DATABASE::"Service Setup", ServiceSetup."Central Management");
          IF COMPANYNAME <> LeadingCompany THEN
            EXIT(NOT ServiceSetup."Object Specifications");
        END;

      EXIT(TRUE);
    END;

    [External]
    PROCEDURE ServiceInspectionFormEditable@1100528611() : Boolean;
    BEGIN
      IF ServiceSetup.GET THEN
        IF ServiceSetup."Central Management" THEN BEGIN
          LeadingCompany := CompRelationRec.GetLeadingCompany(DATABASE::"Service Setup", ServiceSetup."Central Management");
          IF COMPANYNAME <> LeadingCompany THEN
            EXIT(NOT ServiceSetup.Inspections);
        END;

      EXIT(TRUE);
    END;

    [External]
    PROCEDURE ObjectSalesRateFormEditable@1100528617() : Boolean;
    BEGIN
      IF ServiceSetup.GET THEN
        IF ServiceSetup."Central Management" THEN BEGIN
          LeadingCompany := CompRelationRec.GetLeadingCompany(DATABASE::"Service Setup", ServiceSetup."Central Management");
          IF COMPANYNAME <> LeadingCompany THEN
            EXIT(NOT ServiceSetup."Maintenance Sales Rates");
        END;

      EXIT(TRUE);
    END;

    [External]
    PROCEDURE ObjectMaterialInvFormEditable@1100528618() : Boolean;
    BEGIN
      IF ServiceSetup.GET THEN
        IF ServiceSetup."Central Management" THEN BEGIN
          LeadingCompany := CompRelationRec.GetLeadingCompany(DATABASE::"Service Setup", ServiceSetup."Central Management");
          IF COMPANYNAME <> LeadingCompany THEN
            EXIT(NOT ServiceSetup."Material Inventories");
        END;

      EXIT(TRUE);
    END;

    PROCEDURE InitContactManagement@6();
    VAR
      ContactRec@11012001 : Record 5050;
      CustomerRec@11012002 : Record 18;
      VendorRec@11012003 : Record 23;
      CustomerBankAccRec@11012004 : Record 287;
      VendorBankAccRec@11012005 : Record 288;
      ShipToAddrRec@1210190002 : Record 222;
      BusRelRec@1210190000 : Record 5054;
      ContactFeatureTypeRec@1210190001 : Record 11012753;
      HoldingStructureRec@1100485000 : Record 11020206;
      VendorWkaCheck@1100485001 : Record 11020276;
      VendorCertificate@1100525000 : Record 11020413;
      ContactMailingGroupRec@1100485003 : Record 5056;
      ContactSectorRec@1100485005 : Record 5058;
      ContactTradename@1100525002 : Record 11229299;
      NoOfRecords@11012006 : Integer;
      Counter@11012007 : Integer;
      ContactAltAddresRec@1100485002 : Record 5051;
      PaymentAgreementRec@1100485004 : Record 11012028;
      ContactAltAddrDateRangeRec@1100485006 : Record 5052;
      OrderAddressRec@1100485007 : Record 224;
      WebSourceRec@1100485008 : Record 5060;
      SalesPersonRec@1100485009 : Record 11012760;
      CreditLimitByDateRec@1100528300 : Record 11071869;
      EmployeePerVendor@1100409000 : Record 11020693;
      VendorCategory@1100528900 : Record 11071892;
      LinkedInProfile@1100525001 : Record 11071908;
      DefaultDimension@1100528600 : Record 352;
    BEGIN
      MarketingSetup.GET;
      MarketingSetup.TESTFIELD("Central Management",TRUE);

      //X016.sn
      LeadingCompany := CompRelationRec.GetLeadingCompany(DATABASE::"Marketing Setup",MarketingSetup."Central Management");
      //C002428 IF COMPANYNAME <> LeadingCompany THEN
      //C002428  ERROR(Text018);
      Initializing := TRUE; //C002428
      //X016.en

      IF COMPANYNAME = LeadingCompany THEN BEGIN
        IF NOT CONFIRM(STRSUBSTNO(Text057,Text059)) THEN
          EXIT;
      END ELSE
        IF NOT CONFIRM(STRSUBSTNO(Text058,Text059,COMPANYNAME)) THEN //C002428
          EXIT;

      Window.OPEN(STRSUBSTNO(Text063,Text059)); //C002428

      InitCentralMgtFieldsSetup;
      IF MarketingSetup.Companies THEN BEGIN
        ContactRec.CHANGECOMPANY(LeadingCompany); //C002428
        ContactRec.RESET;                                              //new as a result of call C-012104 29-01-2008
        ContactRec.SETFILTER(Type, '%1', ContactRec.Type::Company);    //new filter as a result of call C-012104 29-01-2008
        IF ContactRec.FINDSET THEN BEGIN
          Window.UPDATE(2, ContactRec.TABLECAPTION);
          NoOfRecords := ContactRec.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            EditContact(ContactRec,2,ContactRec);
          UNTIL ContactRec.NEXT = 0;
        END;
        HoldingStructureRec.CHANGECOMPANY(LeadingCompany); //C002428
        IF HoldingStructureRec.FINDSET THEN BEGIN
          Window.UPDATE(2, HoldingStructureRec.TABLECAPTION);
          NoOfRecords := HoldingStructureRec.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            EditHoldingStructure(HoldingStructureRec,2,HoldingStructureRec);
          UNTIL HoldingStructureRec.NEXT = 0;
        END;
        //**4PS02.sn
        WebSourceRec.CHANGECOMPANY(LeadingCompany); //C002428
        IF WebSourceRec.FINDSET THEN BEGIN
          Window.UPDATE(2, WebSourceRec.TABLECAPTION);
          NoOfRecords := WebSourceRec.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            EditWebSource(WebSourceRec,2,WebSourceRec);
          UNTIL WebSourceRec.NEXT = 0;
        END;
        //**4PS02.en
        IF MarketingSetup."Company Features" THEN BEGIN
          ContactFeatureTypeRec.CHANGECOMPANY(LeadingCompany); //C002428
          ContactFeatureTypeRec.SETFILTER("Relation Type", '%1|%2|%3',
            ContactFeatureTypeRec."Relation Type"::Company,
            ContactFeatureTypeRec."Relation Type"::Contact,
            ContactFeatureTypeRec."Relation Type"::Person);
          IF ContactFeatureTypeRec.FINDSET THEN BEGIN
            Window.UPDATE(2, ContactFeatureTypeRec.TABLECAPTION);
            NoOfRecords := ContactFeatureTypeRec.COUNT;
            Counter := 0;
            REPEAT
              Counter := Counter + 1;
              Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
              EditContactFeatureType(ContactFeatureTypeRec,2,ContactFeatureTypeRec);
            UNTIL ContactFeatureTypeRec.NEXT = 0;
          END;
        END;

        //20061009/4PS.s
        IF MarketingSetup."Company Alt. Addresses" THEN BEGIN
      //**4PS04 code added below to take care that only addresses of companies will be initialized (instead of all addresses)
          ContactRec.CHANGECOMPANY(LeadingCompany); //C002428
          ContactRec.RESET;
          ContactRec.SETFILTER(Type, '%1', ContactRec.Type::Company);
          IF ContactRec.FINDSET THEN BEGIN
            Window.UPDATE(2, ContactAltAddresRec.TABLECAPTION);
            NoOfRecords := ContactRec.COUNT;
            Counter := 0;
            REPEAT
              Counter := Counter + 1;
              Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
              ContactAltAddresRec.CHANGECOMPANY(LeadingCompany); //C002428
              ContactAltAddresRec.SETRANGE("Contact No.", ContactRec."No.");
              IF ContactAltAddresRec.FINDSET THEN BEGIN
                REPEAT
                  EditContactAltAddress(ContactAltAddresRec,2,ContactAltAddresRec);
                UNTIL ContactAltAddresRec.NEXT = 0;
              END;
              ContactAltAddrDateRangeRec.CHANGECOMPANY(LeadingCompany); //C002428
              ContactAltAddrDateRangeRec.SETRANGE("Contact No.", ContactRec."No.");
              //**4PS02.sn
              IF ContactAltAddrDateRangeRec.FINDSET THEN BEGIN
                REPEAT
                  EditContactAltAddrDateRange(ContactAltAddrDateRangeRec,2,ContactAltAddrDateRangeRec);
                UNTIL ContactAltAddrDateRangeRec.NEXT = 0;
              END;
              //**4PS02.en
            UNTIL ContactRec.NEXT = 0;
          END;
        END;
        //20061009/4PS.e

        IF MarketingSetup."Mailing Groups" THEN BEGIN
          ContactMailingGroupRec.CHANGECOMPANY(LeadingCompany); //C002428
          IF ContactMailingGroupRec.FINDSET THEN BEGIN
            Window.UPDATE(2, ContactMailingGroupRec.TABLECAPTION);
            NoOfRecords := ContactMailingGroupRec.COUNT;
            Counter := 0;
            REPEAT
              Counter := Counter + 1;
              Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
              EditContactMailingGroup(ContactMailingGroupRec,2,ContactMailingGroupRec);
            UNTIL ContactMailingGroupRec.NEXT = 0;
          END;
        END;

        IF MarketingSetup."Industry Groups" THEN BEGIN
          ContactSectorRec.CHANGECOMPANY(LeadingCompany); //C002428
          IF ContactSectorRec.FINDSET THEN BEGIN
            Window.UPDATE(2, ContactSectorRec.TABLECAPTION);
            NoOfRecords := ContactSectorRec.COUNT;
            Counter := 0;
            REPEAT
              Counter := Counter + 1;
              Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
              EditContactIndustryGroup(ContactSectorRec,2,ContactSectorRec);
            UNTIL ContactSectorRec.NEXT = 0;
          END;
        END;

        IF MarketingSetup.Tradenames THEN BEGIN
          ContactTradename.CHANGECOMPANY(LeadingCompany); //C002428
          IF ContactTradename.FINDSET THEN BEGIN
            Window.UPDATE(2, ContactTradename.TABLECAPTION);
            NoOfRecords := ContactTradename.COUNT;
            Counter := 0;
            REPEAT
              Counter := Counter + 1;
              Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
              EditContactTradename(ContactTradename,2,ContactTradename);
            UNTIL ContactTradename.NEXT = 0;
          END;
        END;

        IF MarketingSetup."Vendor Categories (Contact)" THEN BEGIN  //DP01725
          VendorCategory.CHANGECOMPANY(LeadingCompany);
          VendorCategory.SETFILTER("Contact No.", '<>%1', '');
          IF VendorCategory.FINDSET THEN BEGIN
            Window.UPDATE(2, VendorCategory.TABLECAPTION);
            NoOfRecords := VendorCategory.COUNT;
            Counter := 0;
            REPEAT
              Counter := Counter + 1;
              Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
              EditVendorCategory(VendorCategory,2,VendorCategory);
            UNTIL VendorCategory.NEXT = 0;
          END;
        END;
      END;

      //This section persons move after part companies; call C-012104 29-01-2008)
                                                                  //**4PS04.sn
      IF MarketingSetup.Persons THEN BEGIN
        ContactRec.CHANGECOMPANY(LeadingCompany); //C002428
        ContactRec.RESET;
        ContactRec.SETFILTER(Type, '%1', ContactRec.Type::Person);   //persons were not created; call C-012104 29-01-2008
        IF ContactRec.FINDSET THEN BEGIN
          Window.UPDATE(2, ContactRec.TABLECAPTION);
          NoOfRecords := ContactRec.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            EditContact(ContactRec,2,ContactRec);
          UNTIL ContactRec.NEXT = 0;
        END;
        LinkedInProfile.CHANGECOMPANY(LeadingCompany);
        IF LinkedInProfile.FINDSET THEN BEGIN
          Window.UPDATE(2, LinkedInProfile.TABLECAPTION);
          NoOfRecords := LinkedInProfile.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            EditLinkedInProfile(LinkedInProfile,2,LinkedInProfile);
          UNTIL LinkedInProfile.NEXT = 0;
        END;
        IF MarketingSetup."Person Alt. Addresses" THEN BEGIN
          ContactRec.CHANGECOMPANY(LeadingCompany); //C002428
          ContactRec.RESET;
          ContactRec.SETFILTER(Type, '%1', ContactRec.Type::Person);
          IF ContactRec.FINDSET THEN BEGIN
            Window.UPDATE(2, ContactAltAddresRec.TABLECAPTION);
            NoOfRecords := ContactRec.COUNT;
            Counter := 0;
            REPEAT
              Counter := Counter + 1;
              Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
              ContactAltAddresRec.CHANGECOMPANY(LeadingCompany); //C002428
              ContactAltAddresRec.SETRANGE("Contact No.", ContactRec."No.");
              IF ContactAltAddresRec.FINDSET THEN BEGIN
                REPEAT
                  EditContactAltAddress(ContactAltAddresRec,2,ContactAltAddresRec);
                UNTIL ContactAltAddresRec.NEXT = 0;
              END;
              ContactAltAddrDateRangeRec.CHANGECOMPANY(LeadingCompany); //C002428
              ContactAltAddrDateRangeRec.SETRANGE("Contact No.", ContactRec."No.");
              //**4PS02.sn
              IF ContactAltAddrDateRangeRec.FINDSET THEN BEGIN
                REPEAT
                  EditContactAltAddrDateRange(ContactAltAddrDateRangeRec,2,ContactAltAddrDateRangeRec);
                UNTIL ContactAltAddrDateRangeRec.NEXT = 0;
              END;
              //**4PS02.en
            UNTIL ContactRec.NEXT = 0;
          END;
        END;
      END;
                                                                  //**4PS04.en

      IF MarketingSetup.Customers THEN BEGIN
        CustomerRec.CHANGECOMPANY(LeadingCompany); //C002428
        IF CustomerRec.FINDSET THEN BEGIN
          Window.UPDATE(2, CustomerRec.TABLECAPTION);
          NoOfRecords := CustomerRec.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            UpdateCustomer(CustomerRec,2,CustomerRec);
          UNTIL CustomerRec.NEXT = 0;
        END;
        BusRelRec.CHANGECOMPANY(LeadingCompany); //C002428
        BusRelRec.SETRANGE("Link to Table", BusRelRec."Link to Table"::Customer);
        IF BusRelRec.FINDSET THEN BEGIN
          Window.UPDATE(2, BusRelRec.TABLECAPTION);
          NoOfRecords := BusRelRec.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            UpdateBusinessRelation(BusRelRec,2,BusRelRec);
          UNTIL BusRelRec.NEXT = 0;
        END;
        CustomerBankAccRec.CHANGECOMPANY(LeadingCompany); //C002428
        IF CustomerBankAccRec.FINDSET THEN BEGIN
          Window.UPDATE(2, CustomerBankAccRec.TABLECAPTION);
          NoOfRecords := CustomerBankAccRec.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            EditCustomerBank(CustomerBankAccRec,2,CustomerBankAccRec);
          UNTIL CustomerBankAccRec.NEXT = 0;
        END;
        ShipToAddrRec.CHANGECOMPANY(LeadingCompany); //C002428
        IF ShipToAddrRec.FINDSET THEN BEGIN
          Window.UPDATE(2, ShipToAddrRec.TABLECAPTION);
          NoOfRecords := ShipToAddrRec.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            EditShipToAddr(ShipToAddrRec,2,ShipToAddrRec);
          UNTIL ShipToAddrRec.NEXT = 0;
        END;
        CreditLimitByDateRec.CHANGECOMPANY(LeadingCompany); //C002428
        IF CreditLimitByDateRec.FINDSET THEN BEGIN
          Window.UPDATE(2, CreditLimitByDateRec.TABLECAPTION);
          NoOfRecords := CreditLimitByDateRec.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            EditCreditLimitByDate(CreditLimitByDateRec, 2, CreditLimitByDateRec);
          UNTIL CreditLimitByDateRec.NEXT = 0;
        END;
        DefaultDimension.CHANGECOMPANY(LeadingCompany);
        DefaultDimension.SETRANGE("Table ID", DATABASE::Customer);
        IF DefaultDimension.FINDSET THEN BEGIN
          Window.UPDATE(2, DefaultDimension.TABLECAPTION);
          NoOfRecords := DefaultDimension.COUNT;
          Counter := 0;
          REPEAT
            Counter += 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000, 1));
            UpdateDefaultDimension(DefaultDimension, 2, DefaultDimension);
          UNTIL DefaultDimension.NEXT = 0;
        END;
      END;
      IF MarketingSetup.Vendors THEN BEGIN
        VendorRec.CHANGECOMPANY(LeadingCompany); //C002428
        IF VendorRec.FINDSET THEN BEGIN
          Window.UPDATE(2, VendorRec.TABLECAPTION);
          NoOfRecords := VendorRec.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            EditVendor(VendorRec,2,VendorRec);
          UNTIL VendorRec.NEXT = 0;
        END;
        BusRelRec.CHANGECOMPANY(LeadingCompany); //C002428
        BusRelRec.SETRANGE("Link to Table", BusRelRec."Link to Table"::Vendor);
        IF BusRelRec.FINDSET THEN BEGIN
          Window.UPDATE(2, BusRelRec.TABLECAPTION);
          NoOfRecords := BusRelRec.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            UpdateBusinessRelation(BusRelRec,2,BusRelRec);
          UNTIL BusRelRec.NEXT = 0;
        END;
        VendorBankAccRec.CHANGECOMPANY(LeadingCompany); //C002428
        IF VendorBankAccRec.FINDSET THEN BEGIN
          Window.UPDATE(2, VendorBankAccRec.TABLECAPTION);
          NoOfRecords := VendorBankAccRec.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            UpdateVendorBank(VendorBankAccRec,2,VendorBankAccRec);
          UNTIL VendorBankAccRec.NEXT = 0;
        END;
        VendorWkaCheck.CHANGECOMPANY(LeadingCompany); //C002428
        IF VendorWkaCheck.FINDSET THEN BEGIN
          Window.UPDATE(2, VendorWkaCheck.TABLECAPTION);
          NoOfRecords := VendorWkaCheck.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            UpdateVendorWKACheck(VendorWkaCheck,2,VendorWkaCheck);
          UNTIL VendorWkaCheck.NEXT = 0;
        END;
        VendorCertificate.CHANGECOMPANY(LeadingCompany); //C002428
        IF VendorCertificate.FINDSET THEN BEGIN
          Window.UPDATE(2, VendorCertificate.TABLECAPTION);
          NoOfRecords := VendorCertificate.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            UpdateVendorCertificate(VendorCertificate,2,VendorCertificate);
          UNTIL VendorCertificate.NEXT = 0;
        END;
        //**4PS02.sn
        IF MarketingSetup."Order Addresses" THEN BEGIN
          OrderAddressRec.CHANGECOMPANY(LeadingCompany); //C002428
          IF OrderAddressRec.FINDSET THEN BEGIN
            Window.UPDATE(2, OrderAddressRec.TABLECAPTION);
            NoOfRecords := OrderAddressRec.COUNT;
            Counter := 0;
            REPEAT
              Counter := Counter + 1;
              Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
              EditOrderAddress(OrderAddressRec,2,OrderAddressRec);
            UNTIL OrderAddressRec.NEXT = 0;
          END;
        END;
        //**4PS02.en
        IF MarketingSetup."Vendor Employees" THEN BEGIN
          EmployeePerVendor.CHANGECOMPANY(LeadingCompany);
          IF EmployeePerVendor.FINDSET THEN BEGIN
            Window.UPDATE(2, EmployeePerVendor.TABLECAPTION);
            NoOfRecords := EmployeePerVendor.COUNT;
            Counter := 0;
            REPEAT
              Counter := Counter + 1;
              Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
              EditEmployeePerVendor(EmployeePerVendor,2,EmployeePerVendor);
            UNTIL EmployeePerVendor.NEXT = 0;
          END;
        END;
        IF MarketingSetup."Vendor Categories" THEN BEGIN  //DO00268
          VendorCategory.CHANGECOMPANY(LeadingCompany);
          VendorCategory.SETFILTER("Vendor No.", '<>%1', ''); //DP01725
          IF VendorCategory.FINDSET THEN BEGIN
            Window.UPDATE(2, VendorCategory.TABLECAPTION);
            NoOfRecords := VendorCategory.COUNT;
            Counter := 0;
            REPEAT
              Counter := Counter + 1;
              Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
              EditVendorCategory(VendorCategory,2,VendorCategory);
            UNTIL VendorCategory.NEXT = 0;
          END;
        END;
      END;

      IF MarketingSetup."Payment Agreements" THEN BEGIN
        PaymentAgreementRec.CHANGECOMPANY(LeadingCompany); //C002428
        IF PaymentAgreementRec.FINDSET THEN BEGIN
          Window.UPDATE(2, PaymentAgreementRec.TABLECAPTION);
          NoOfRecords := PaymentAgreementRec.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            EditPaymentAgreement(PaymentAgreementRec,2,PaymentAgreementRec);
          UNTIL PaymentAgreementRec.NEXT = 0;
        END;
      END;

      //**4PS02.sn
      IF MarketingSetup.Salespersons THEN BEGIN
        SalesPersonRec.CHANGECOMPANY(LeadingCompany); //C002428
        IF SalesPersonRec.FINDSET THEN BEGIN
          Window.UPDATE(2, SalesPersonRec.TABLECAPTION);
          NoOfRecords := SalesPersonRec.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            EditContactSalesPerson(SalesPersonRec,2,SalesPersonRec);
          UNTIL SalesPersonRec.NEXT = 0;
        END;
      END;
      //**4PS02.en

      Window.CLOSE;
    END;

    PROCEDURE InitItemManagement@40();
    VAR
      ItemRec@1100485000 : Record 27;
      ItemRelRec@1100485001 : Record 11012319;
      ExtendedTextHeader@1100525001 : Record 279;
      ExtendedTextLine@1100525002 : Record 280;
      SalesPrice@1100528400 : Record 7002;
      SalesLineDiscount@1100528401 : Record 7004;
      PurchasePrice@1100528402 : Record 7012;
      PurchaseLineDiscount@1100528403 : Record 7014;
      DiscHistRec@1100485002 : Record 11012312;
      DiscTermGrpRec@1100485003 : Record 11012338;
      DeliveryGrpRec@1100409000 : Record 11012320;
      ChrgRecNEW@1100528000 : Record 11229771;
      NoOfRecords@11012022 : Integer;
      Counter@11012023 : Integer;
      BaseRecipeRec@1100528900 : Record 11020581;
      BaseRecipeLineRec@1100528901 : Record 11020582;
      RecipeGroupRec@1100528902 : Record 11020580;
      CommentLineGroup@1100528700 : Record 11020595;
    BEGIN
      InventorySetup.GET;
      InventorySetup.TESTFIELD("Central Management",TRUE);

      //X016.sn
      LeadingCompany := CompRelationRec.GetLeadingCompany(DATABASE::"Inventory Setup",InventorySetup."Central Management");
      //C002428 IF COMPANYNAME <> LeadingCompany THEN
      //C002428  ERROR(Text018);
      Initializing := TRUE; //C002428
      //X016.en

      IF COMPANYNAME = LeadingCompany THEN BEGIN
        IF NOT CONFIRM(STRSUBSTNO(Text057,Text060)) THEN
          EXIT;
      END ELSE
        IF NOT CONFIRM(STRSUBSTNO(Text058,Text060,COMPANYNAME)) THEN //C002428
          EXIT;

      Window.OPEN(STRSUBSTNO(Text063,Text060)); //C002428

      InitCentralMgtFieldsSetup;  //C051040
      IF InventorySetup."Navision-Items" THEN BEGIN
        ItemRec.CHANGECOMPANY(LeadingCompany); //C002428
        IF ItemRec.FINDSET THEN BEGIN
          Window.UPDATE(2, ItemRec.TABLECAPTION);
          NoOfRecords := ItemRec.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            EditItem(ItemRec,2,ItemRec);
            ItemRelRec.CHANGECOMPANY(LeadingCompany); //C002428
            IF ItemRelRec.GET(ItemRec."No.") THEN
              EditItemRelation(ItemRelRec,2,ItemRelRec);
          UNTIL ItemRec.NEXT = 0;
        END;
      END;

      IF InventorySetup."Extended Text" THEN BEGIN
        ExtendedTextHeader.CHANGECOMPANY(LeadingCompany);
        ExtendedTextHeader.SETRANGE("Table Name", ExtendedTextHeader."Table Name"::Item);
        IF ExtendedTextHeader.FINDSET THEN BEGIN
          Window.UPDATE(2, ExtendedTextHeader.TABLECAPTION);
          NoOfRecords := ExtendedTextHeader.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            EditExtendedText(ExtendedTextHeader, 2, ExtendedTextHeader);
          UNTIL ExtendedTextHeader.NEXT = 0;
        END;

        ExtendedTextLine.CHANGECOMPANY(LeadingCompany);
        ExtendedTextLine.SETRANGE("Table Name", ExtendedTextLine."Table Name"::Item);
        IF ExtendedTextLine.FINDSET THEN BEGIN
          Window.UPDATE(2, ExtendedTextLine.TABLECAPTION);
          NoOfRecords := ExtendedTextLine.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            EditExtendedTextLine(ExtendedTextLine, 2, ExtendedTextLine);
          UNTIL ExtendedTextLine.NEXT = 0;
        END;
      END;

      IF InventorySetup."Sales Prices" THEN BEGIN
        SalesPrice.CHANGECOMPANY(LeadingCompany);
        IF SalesPrice.FINDSET THEN BEGIN
          Window.UPDATE(2, SalesPrice.TABLECAPTION);
          NoOfRecords := SalesPrice.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            UpdateSalesPrice(SalesPrice, 2, SalesPrice);
          UNTIL SalesPrice.NEXT = 0;
        END;

        SalesLineDiscount.CHANGECOMPANY(LeadingCompany);
        IF SalesLineDiscount.FINDSET THEN BEGIN
          Window.UPDATE(2, SalesLineDiscount.TABLECAPTION);
          NoOfRecords := SalesLineDiscount.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            UpdateSalesLineDiscount(SalesLineDiscount, 2, SalesLineDiscount);
          UNTIL SalesLineDiscount.NEXT = 0;
        END;
      END;

      IF InventorySetup."Purchase Prices" THEN BEGIN
        PurchasePrice.CHANGECOMPANY(LeadingCompany);
        IF PurchasePrice.FINDSET THEN BEGIN
          Window.UPDATE(2, PurchasePrice.TABLECAPTION);
          NoOfRecords := PurchasePrice.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            UpdatePurchasePrice(PurchasePrice, 2, PurchasePrice);
          UNTIL PurchasePrice.NEXT = 0;
        END;

        PurchaseLineDiscount.CHANGECOMPANY(LeadingCompany);
        IF PurchaseLineDiscount.FINDSET THEN BEGIN
          Window.UPDATE(2, PurchaseLineDiscount.TABLECAPTION);
          NoOfRecords := PurchaseLineDiscount.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            UpdatePurchaseLineDiscount(PurchaseLineDiscount, 2, PurchaseLineDiscount);
          UNTIL PurchaseLineDiscount.NEXT = 0;
        END;
      END;

      IF InventorySetup."Discount Terms" THEN BEGIN
        DiscHistRec.CHANGECOMPANY(LeadingCompany); //C002428
        IF InventorySetup."Discount Term Groups" THEN
          DiscHistRec.SETFILTER("Discount Level", '..%1' ,DiscHistRec."Discount Level"::Customer)
        ELSE
          DiscHistRec.SETRANGE("Discount Level", DiscHistRec."Discount Level"::Company);
        IF DiscHistRec.FINDSET THEN BEGIN
          Window.UPDATE(2, DiscHistRec.TABLECAPTION);
          NoOfRecords := DiscHistRec.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            EditDiscHist(DiscHistRec,2,DiscHistRec);
          UNTIL DiscHistRec.NEXT = 0;
        END;
      END;

      IF InventorySetup."Discount Term Groups" THEN BEGIN
        DiscTermGrpRec.CHANGECOMPANY(LeadingCompany); //C002428
        DiscTermGrpRec.SETFILTER(Level, '..%1', DiscTermGrpRec.Level::Customer);
        IF DiscTermGrpRec.FINDSET THEN BEGIN
          Window.UPDATE(2, DiscTermGrpRec.TABLECAPTION);
          NoOfRecords := DiscTermGrpRec.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            EditDiscTermGroup(DiscTermGrpRec,2,DiscTermGrpRec);
          UNTIL DiscTermGrpRec.NEXT = 0;
        END;
      END;

      IF InventorySetup."Delivery Groups" THEN BEGIN  //db, 28-01-13: C005024
        DeliveryGrpRec.CHANGECOMPANY(LeadingCompany); //C002428
        IF DeliveryGrpRec.FINDSET THEN BEGIN
          Window.UPDATE(2, DeliveryGrpRec.TABLECAPTION);
          NoOfRecords := DeliveryGrpRec.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            EditDeliveryGroup(DeliveryGrpRec,2,DeliveryGrpRec);
          UNTIL DeliveryGrpRec.NEXT = 0;
        END;
      END;

      IF InventorySetup.Recipes THEN BEGIN
        //DP00381.sn
        RecipeGroupRec.CHANGECOMPANY(LeadingCompany);
        IF RecipeGroupRec.FINDSET THEN BEGIN
          Window.UPDATE(2, RecipeGroupRec.TABLECAPTION);
          NoOfRecords := RecipeGroupRec.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            EditRecipeGroup(RecipeGroupRec,2,RecipeGroupRec);
          UNTIL RecipeGroupRec.NEXT = 0;
        END;

        BaseRecipeRec.CHANGECOMPANY(LeadingCompany);
        IF BaseRecipeRec.FINDSET THEN BEGIN
          Window.UPDATE(2, BaseRecipeRec.TABLECAPTION);
          NoOfRecords := BaseRecipeRec.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            EditBaseRecipe(BaseRecipeRec,2,BaseRecipeRec);
          UNTIL BaseRecipeRec.NEXT = 0;
        END;

        BaseRecipeLineRec.CHANGECOMPANY(LeadingCompany);
        IF BaseRecipeLineRec.FINDSET THEN BEGIN
          Window.UPDATE(2, BaseRecipeLineRec.TABLECAPTION);
          NoOfRecords := BaseRecipeLineRec.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            EditBaseRecipeLine(BaseRecipeLineRec,2,BaseRecipeLineRec);
          UNTIL BaseRecipeLineRec.NEXT = 0;
        END;
        //DP00381.en

        ChrgRecNEW.CHANGECOMPANY(LeadingCompany); //C002428
        ChrgRecNEW.SETRANGE("Estimate No.", '');
        ChrgRecNEW.SETRANGE("Sales Document No.", '');
        IF ChrgRecNEW.FINDSET THEN BEGIN
          Window.UPDATE(2, ChrgRecNEW.TABLECAPTION);
          NoOfRecords := ChrgRecNEW.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            EditRecipeSurchargeNEW(ChrgRecNEW,2,ChrgRecNEW);  //db, 16-04-15: C014713
          UNTIL ChrgRecNEW.NEXT = 0;
        END;

        CommentLineGroup.CHANGECOMPANY(LeadingCompany);
        CommentLineGroup.SETRANGE("Table Name", CommentLineGroup."Table Name"::Estimate);
        CommentLineGroup.SETFILTER(Group, '<>%1', '');
        CommentLineGroup.SETFILTER("No.", '<>%1', '');
        CommentLineGroup.SETRANGE("Estimate No.", '');
        IF CommentLineGroup.FINDSET THEN BEGIN
          Window.UPDATE(2, CommentLineGroup.TABLECAPTION);
          NoOfRecords := CommentLineGroup.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000, 1));
            EditRecipeText(CommentLineGroup, 2, CommentLineGroup);
          UNTIL CommentLineGroup.NEXT = 0;
        END;

      END;

      Window.CLOSE;
    END;

    [External]
    PROCEDURE InitFinanceManagement@1210190004();
    VAR
      GLAccRec@1210190000 : Record 15;
      GLAccountCategory@1100529200 : Record 570;
      NoOfRecords@1210190002 : Integer;
      Counter@1210190001 : Integer;
      InterestPercentageICAcc@1100528200 : Record 11012119;
    BEGIN
      GenLedgerSetup.GET;
      GenLedgerSetup.TESTFIELD("Central Management",TRUE);

      //X016.sn
      LeadingCompany := CompRelationRec.GetLeadingCompany(DATABASE::"General Ledger Setup",GenLedgerSetup."Central Management");
      //C002428 IF COMPANYNAME <> LeadingCompany THEN
      //C002428  ERROR(Text018);
      Initializing := TRUE; //C002428
      //X016.en

      IF COMPANYNAME = LeadingCompany THEN BEGIN
        IF NOT CONFIRM(STRSUBSTNO(Text057,Text061)) THEN
          EXIT;
      END ELSE
        IF NOT CONFIRM(STRSUBSTNO(Text058,Text061,COMPANYNAME)) THEN //C002428
          EXIT;

      Window.OPEN(STRSUBSTNO(Text063,Text061)); //C002428

      IF GenLedgerSetup."Central Man. G/L Accounts" THEN BEGIN
        GLAccRec.CHANGECOMPANY(LeadingCompany); //C002428
        IF GLAccRec.FINDSET THEN BEGIN
          Window.UPDATE(2, GLAccRec.TABLECAPTION);
          NoOfRecords := GLAccRec.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            UpdateGLAccount(GLAccRec,2,GLAccRec);
          UNTIL GLAccRec.NEXT = 0;
        END;

        GLAccountCategory.CHANGECOMPANY(LeadingCompany); //C002428
        IF GLAccountCategory.FINDSET THEN BEGIN
          Window.UPDATE(2, GLAccountCategory.TABLECAPTION);
          NoOfRecords := GLAccountCategory.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            UpdateGLAccountCategory(GLAccountCategory,2,GLAccountCategory);
          UNTIL GLAccountCategory.NEXT = 0;
        END;

      END;

      IF GenLedgerSetup."Central Man. IC Interest" THEN BEGIN
        InterestPercentageICAcc.CHANGECOMPANY(LeadingCompany);
        IF InterestPercentageICAcc.FINDSET THEN BEGIN
          Window.UPDATE(2, InterestPercentageICAcc.TABLECAPTION);
          NoOfRecords := InterestPercentageICAcc.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            UpdateInterestPercentageIC(InterestPercentageICAcc,2,InterestPercentageICAcc);
          UNTIL InterestPercentageICAcc.NEXT = 0;
        END;
      END;
    END;

    [External]
    PROCEDURE InitServiceManagement@1100528601();
    VAR
      StandardObject@1100528601 : Record 11020334;
      MaintenanceSchemeObjects@1100528600 : Record 11071745;
      MaintenanceSchemeVersion@1100528604 : Record 11071743;
      MaintSchemeVersionLine@1100528605 : Record 11071744;
      MaintSchemeLineProperty@1100525000 : Record 11071954;
      StdObjectMaintenanceScheme@1100528606 : Record 11071703;
      ObjectSpecificationLine@1100528607 : Record 11071781;
      BaseServiceInspectionList@1100528613 : Record 11071930;
      ServiceInspectionGroup@1100525001 : Record 11071747;
      BaseServiceInspectionLine@1100525002 : Record 11071748;
      BaseServiceInspectionOption@1100525003 : Record 11071749;
      ServiceInspectionVersion@1100528608 : Record 11071750;
      ServiceInspectionLine@1100528609 : Record 11071751;
      InspectionLineProperty@1100528610 : Record 11071978;
      ObjectMaterialInventory@1100528611 : Record 11071712;
      ServiceObjectBrand@1100528612 : Record 11072195;
      ServiceObjectModel@1100528614 : Record 11072196;
      ServiceObjectType@1100528615 : Record 11072197;
      NoOfRecords@1100528603 : Integer;
      Counter@1100528602 : Integer;
    BEGIN
      ServiceSetup.GET;
      ServiceSetup.TESTFIELD("Central Management", TRUE);

      LeadingCompany := CompRelationRec.GetLeadingCompany(DATABASE::"Service Setup", ServiceSetup."Central Management");
      //C002428 IF COMPANYNAME <> LeadingCompany THEN
      //C002428  ERROR(Text018);
      Initializing := TRUE; //C002428

      IF COMPANYNAME = LeadingCompany THEN BEGIN
        IF NOT CONFIRM(STRSUBSTNO(Text057,Text062)) THEN
          EXIT;
      END ELSE
        IF NOT CONFIRM(STRSUBSTNO(Text058,Text062,COMPANYNAME)) THEN //C002428
          EXIT;

      Window.OPEN(STRSUBSTNO(Text063,Text062)); //C002428

      IF ServiceSetup."Standard Objects" THEN BEGIN
        StandardObject.CHANGECOMPANY(LeadingCompany); //C002428
        IF StandardObject.FINDSET THEN BEGIN
          Window.UPDATE(2, StandardObject.TABLECAPTION);
          NoOfRecords := StandardObject.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            EditStandardObject(StandardObject, 2, StandardObject);
          UNTIL StandardObject.NEXT = 0;
        END;

        ServiceObjectBrand.CHANGECOMPANY(LeadingCompany);
        IF ServiceObjectBrand.FINDSET THEN BEGIN
          Window.UPDATE(2, ServiceObjectBrand.TABLECAPTION);
          NoOfRecords := ServiceObjectBrand.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            EditServiceObjectBrand(ServiceObjectBrand, 2, ServiceObjectBrand);
          UNTIL ServiceObjectBrand.NEXT = 0;
        END;

        ServiceObjectModel.CHANGECOMPANY(LeadingCompany);
        IF ServiceObjectModel.FINDSET THEN BEGIN
          Window.UPDATE(2, ServiceObjectModel.TABLECAPTION);
          NoOfRecords := ServiceObjectModel.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            EditServiceObjectModel(ServiceObjectModel, 2, ServiceObjectModel);
          UNTIL ServiceObjectModel.NEXT = 0;
        END;

        ServiceObjectType.CHANGECOMPANY(LeadingCompany);
        IF ServiceObjectType.FINDSET THEN BEGIN
          Window.UPDATE(2, ServiceObjectType.TABLECAPTION);
          NoOfRecords := ServiceObjectType.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            EditServiceObjectType(ServiceObjectType, 2, ServiceObjectType);
          UNTIL ServiceObjectType.NEXT = 0;
        END;

        StdObjectMaintenanceScheme.CHANGECOMPANY(LeadingCompany); //C002428
        IF StdObjectMaintenanceScheme.FINDSET THEN BEGIN
          Window.UPDATE(2, StdObjectMaintenanceScheme.TABLECAPTION);
          NoOfRecords := StdObjectMaintenanceScheme.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            EditStdObjMaintScheme(StdObjectMaintenanceScheme, 2, StdObjectMaintenanceScheme);
          UNTIL StdObjectMaintenanceScheme.NEXT = 0;
        END;

        MaintenanceSchemeVersion.CHANGECOMPANY(LeadingCompany); //C002428
        MaintenanceSchemeVersion.SETFILTER("Line Type", '%1|%2|%3',
          MaintenanceSchemeVersion."Line Type"::"Standard Object",
          MaintenanceSchemeVersion."Line Type"::"Standard Object Installation",
          MaintenanceSchemeVersion."Line Type"::"Standard Object Deinstallation");
        IF MaintenanceSchemeVersion.FINDSET THEN BEGIN
          Window.UPDATE(2, MaintenanceSchemeVersion.TABLECAPTION);
          NoOfRecords := MaintenanceSchemeVersion.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            EditMaintenanceSchemeVersion(MaintenanceSchemeVersion, 2, MaintenanceSchemeVersion);
          UNTIL MaintenanceSchemeVersion.NEXT = 0;
        END;

        MaintSchemeVersionLine.CHANGECOMPANY(LeadingCompany); //C002428
        MaintSchemeVersionLine.SETFILTER("Line Type", '%1|%2|%3',
          MaintSchemeVersionLine."Line Type"::"Standard Object",
          MaintSchemeVersionLine."Line Type"::"Standard Object Installation",
          MaintSchemeVersionLine."Line Type"::"Standard Object Deinstallation");
        IF MaintSchemeVersionLine.FINDSET THEN BEGIN
          Window.UPDATE(2, MaintSchemeVersionLine.TABLECAPTION);
          NoOfRecords := MaintSchemeVersionLine.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            EditMaintenanceSchemeLine(MaintSchemeVersionLine, 2, MaintSchemeVersionLine);
          UNTIL MaintSchemeVersionLine.NEXT = 0;
        END;

        MaintSchemeLineProperty.CHANGECOMPANY(LeadingCompany);
        MaintSchemeLineProperty.SETRANGE("Line Type", MaintSchemeLineProperty."Line Type"::"Standard Object");
        IF MaintSchemeLineProperty.FINDSET THEN BEGIN
          Window.UPDATE(2, MaintSchemeLineProperty.TABLECAPTION);
          NoOfRecords := MaintSchemeLineProperty.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            EditMaintSchemeLineProperty(MaintSchemeLineProperty, 2, MaintSchemeLineProperty);
          UNTIL MaintSchemeLineProperty.NEXT = 0;
        END;

        IF ServiceSetup."Material Inventories" THEN BEGIN
          ObjectMaterialInventory.CHANGECOMPANY(LeadingCompany); //C002428
          ObjectMaterialInventory.SETRANGE(Type, ObjectMaterialInventory.Type::"Standard Object");
          IF ObjectMaterialInventory.FINDSET THEN BEGIN
            Window.UPDATE(2, ObjectMaterialInventory.TABLECAPTION);
            NoOfRecords := ObjectMaterialInventory.COUNT;
            Counter := 0;
            REPEAT
              Counter := Counter + 1;
              Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
              EditObjectMaterialInventory(ObjectMaterialInventory, 2, ObjectMaterialInventory);
            UNTIL ObjectMaterialInventory.NEXT = 0;
          END;
        END;

        ServiceInspectionVersion.CHANGECOMPANY(LeadingCompany); //C002428
        ServiceInspectionVersion.SETFILTER("Inspection Type", '%1|%2',
          ServiceInspectionVersion."Inspection Type"::"Standard Object",
          ServiceInspectionVersion."Inspection Type"::"Standard Object (Calls)");
        IF ServiceInspectionVersion.FINDSET THEN BEGIN
          Window.UPDATE(2, ServiceInspectionVersion.TABLECAPTION);
          NoOfRecords := ServiceInspectionVersion.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            EditServiceInspectionVersion(ServiceInspectionVersion, 2, ServiceInspectionVersion);
          UNTIL ServiceInspectionVersion.NEXT = 0;
        END;

        ServiceInspectionLine.CHANGECOMPANY(LeadingCompany);
        ServiceInspectionLine.SETFILTER("Inspection Type", '%1|%2',
          ServiceInspectionLine."Inspection Type"::"Standard Object",
          ServiceInspectionLine."Inspection Type"::"Standard Object (Calls)");
        IF ServiceInspectionLine.FINDSET THEN BEGIN
          Window.UPDATE(2, ServiceInspectionLine.TABLECAPTION);
          NoOfRecords := ServiceInspectionLine.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            EditServiceInspectionLine(ServiceInspectionLine, 2, ServiceInspectionLine);
          UNTIL ServiceInspectionLine.NEXT = 0;
        END;

        InspectionLineProperty.CHANGECOMPANY(LeadingCompany);
        InspectionLineProperty.SETFILTER("Inspection Type", '%1|%2',
          InspectionLineProperty."Inspection Type"::"Standard Object",
          InspectionLineProperty."Inspection Type"::"Standard Object (Calls)");
        IF InspectionLineProperty.FINDSET THEN BEGIN
          Window.UPDATE(2, InspectionLineProperty.TABLECAPTION);
          NoOfRecords := InspectionLineProperty.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            EditInspectionLineProperty(InspectionLineProperty, 2, InspectionLineProperty);
          UNTIL InspectionLineProperty.NEXT = 0;
        END;
      END;

      IF ServiceSetup."Maintenance Schemes" THEN BEGIN
        MaintenanceSchemeObjects.CHANGECOMPANY(LeadingCompany); //C002428
        IF MaintenanceSchemeObjects.FINDSET THEN BEGIN
          Window.UPDATE(2, MaintenanceSchemeObjects.TABLECAPTION);
          NoOfRecords := MaintenanceSchemeObjects.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            EditMaintenanceScheme(MaintenanceSchemeObjects, 2, MaintenanceSchemeObjects);
          UNTIL MaintenanceSchemeObjects.NEXT = 0;
        END;

        MaintenanceSchemeVersion.CHANGECOMPANY(LeadingCompany); //C002428
        MaintenanceSchemeVersion.SETRANGE("Line Type", MaintenanceSchemeVersion."Line Type"::"Maintenance Scheme");
        IF MaintenanceSchemeVersion.FINDSET THEN BEGIN
          Window.UPDATE(2, MaintenanceSchemeVersion.TABLECAPTION);
          NoOfRecords := MaintenanceSchemeVersion.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            EditMaintenanceSchemeVersion(MaintenanceSchemeVersion, 2, MaintenanceSchemeVersion);
          UNTIL MaintenanceSchemeVersion.NEXT = 0;
        END;

        MaintSchemeVersionLine.CHANGECOMPANY(LeadingCompany); //C002428
        MaintSchemeVersionLine.SETRANGE("Line Type", MaintSchemeVersionLine."Line Type"::"Maintenance Scheme");
        IF MaintSchemeVersionLine.FINDSET THEN BEGIN
          Window.UPDATE(2, MaintSchemeVersionLine.TABLECAPTION);
          NoOfRecords := MaintSchemeVersionLine.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            EditMaintenanceSchemeLine(MaintSchemeVersionLine, 2, MaintSchemeVersionLine);
          UNTIL MaintSchemeVersionLine.NEXT = 0;
        END;
      END;

      IF ServiceSetup."Object Specifications" THEN BEGIN
        ObjectSpecificationLine.CHANGECOMPANY(LeadingCompany); //C002428
        ObjectSpecificationLine.SETRANGE("Specification Type", ObjectSpecificationLine."Specification Type"::"Standard Object");
        IF ObjectSpecificationLine.FINDSET THEN BEGIN
          Window.UPDATE(2, ObjectSpecificationLine.TABLECAPTION);
          NoOfRecords := ObjectSpecificationLine.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            EditObjectSpecificationLine(ObjectSpecificationLine, 2, ObjectSpecificationLine);
          UNTIL ObjectSpecificationLine.NEXT = 0;
        END;
      END;

      IF ServiceSetup.Inspections THEN BEGIN
        ServiceInspectionGroup.CHANGECOMPANY(LeadingCompany);
        IF ServiceInspectionGroup.FINDSET THEN BEGIN
          Window.UPDATE(2, ServiceInspectionGroup.TABLECAPTION);
          NoOfRecords := ServiceInspectionGroup.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            EditServiceInspectionGroup(ServiceInspectionGroup, 2, ServiceInspectionGroup);
          UNTIL ServiceInspectionGroup.NEXT = 0;
        END;

        BaseServiceInspectionLine.CHANGECOMPANY(LeadingCompany);
        IF BaseServiceInspectionLine.FINDSET THEN BEGIN
          Window.UPDATE(2, BaseServiceInspectionLine.TABLECAPTION);
          NoOfRecords := BaseServiceInspectionLine.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            EditBaseServiceInspectionLine(BaseServiceInspectionLine, 2, BaseServiceInspectionLine);
          UNTIL BaseServiceInspectionLine.NEXT = 0;
        END;

        BaseServiceInspectionOption.CHANGECOMPANY(LeadingCompany);
        IF BaseServiceInspectionOption.FINDSET THEN BEGIN
          Window.UPDATE(2, BaseServiceInspectionOption.TABLECAPTION);
          NoOfRecords := BaseServiceInspectionOption.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            EditBaseServiceInspOption(BaseServiceInspectionOption, 2, BaseServiceInspectionOption);
          UNTIL BaseServiceInspectionOption.NEXT = 0;
        END;

        BaseServiceInspectionList.CHANGECOMPANY(LeadingCompany); //C002428
        IF BaseServiceInspectionList.FINDSET THEN BEGIN
          Window.UPDATE(2, BaseServiceInspectionList.TABLECAPTION);
          NoOfRecords := BaseServiceInspectionList.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            EditServiceInspectionList(BaseServiceInspectionList, 2, BaseServiceInspectionList);
          UNTIL BaseServiceInspectionList.NEXT = 0;
        END;

        ServiceInspectionVersion.CHANGECOMPANY(LeadingCompany); //C002428
        ServiceInspectionVersion.SETRANGE("Inspection Type", ServiceInspectionVersion."Inspection Type"::"Base Inspection List");
        IF ServiceInspectionVersion.FINDSET THEN BEGIN
          Window.UPDATE(2, ServiceInspectionVersion.TABLECAPTION);
          NoOfRecords := ServiceInspectionVersion.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            EditServiceInspectionVersion(ServiceInspectionVersion, 2, ServiceInspectionVersion);
          UNTIL ServiceInspectionVersion.NEXT = 0;
        END;

        ServiceInspectionLine.CHANGECOMPANY(LeadingCompany); //C002428
        ServiceInspectionLine.SETRANGE("Inspection Type", ServiceInspectionLine."Inspection Type"::"Base Inspection List");
        IF ServiceInspectionLine.FINDSET THEN BEGIN
          Window.UPDATE(2, ServiceInspectionLine.TABLECAPTION);
          NoOfRecords := ServiceInspectionLine.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            Window.UPDATE(3, ROUND(Counter / NoOfRecords * 10000,1));
            EditServiceInspectionLine(ServiceInspectionLine, 2, ServiceInspectionLine);
          UNTIL ServiceInspectionLine.NEXT = 0;
        END;
      END;
    END;

    [External]
    PROCEDURE EditContactMailingGroup@1100485007(VAR NewRec@1100485002 : Record 5056;Operation@1100485001 : Integer;OldRec@1100485000 : Record 5056);
    VAR
      CurrRec@1100485004 : Record 5056;
      ContRec@1100485003 : Record 5050;
    BEGIN
      MarketingSetup.GET;

      IF NOT MarketingSetup."Central Management" THEN
        EXIT;

      IF NOT MarketingSetup."Mailing Groups" THEN
        EXIT;

      IF NOT ContRec.GET(OldRec."Contact No.") THEN //skip data-inconsistency
        EXIT;

      IF (NOT MarketingSetup.Companies) AND (ContRec.Type = ContRec.Type::Company) THEN
        EXIT;

      IF (NOT MarketingSetup.Persons) AND (ContRec.Type = ContRec.Type::Person) THEN
        EXIT;

      //**4PS.sn #C011151, #C013740 Central Data Management (rename)
      //IF (MarketingSetup."Central Management") AND (Operation = 3) THEN
      //  ERROR(Text099, NewRec.TABLECAPTION,
      //    MarketingSetup.FIELDCAPTION("Central Management"), MarketingSetup."Central Management");
      //**4PS.sn #C011151, #C013740 Central Data Management (rename)

      SetCompRelRecFilter(1);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          CurrRec.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:BEGIN
                CurrRec.COPY(OldRec);
                CurrRec.RESET;
                IF CurrRec.FIND THEN
                  CurrRec.RENAME(
                    NewRec."Contact No.",
                    NewRec."Mailing Group Code");
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                CurrRec.COPY(NewRec);
                CurrRec.RESET;
                IF CurrRec.FIND THEN BEGIN
                  CurrRec.TRANSFERFIELDS(NewRec, FALSE);
                  CurrRec.MODIFY;
                END ELSE BEGIN
                  CurrRec.INSERT;
                END;
              END;
            4:BEGIN
                CurrRec.COPY(NewRec);
                CurrRec.RESET;
                IF CurrRec.FIND THEN
                  CurrRec.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    [External]
    PROCEDURE EditContactSalesPerson@1100485021(VAR NewRec@1100485002 : Record 11012760;Operation@1100485001 : Integer;OldRec@1100485000 : Record 11012760);
    VAR
      CurrRec@1100485004 : Record 11012760;
      ContRec@1100485003 : Record 5050;
    BEGIN
      //**4PS02.n
      MarketingSetup.GET;

      IF NOT MarketingSetup."Central Management" THEN
        EXIT;

      IF NOT MarketingSetup.Salespersons THEN
        EXIT;

      IF NOT ContRec.GET(OldRec."Contact No.") THEN //skip data-inconsistency
        EXIT;

      IF (NOT MarketingSetup.Companies) AND (ContRec.Type = ContRec.Type::Company) THEN
        EXIT;

      IF (NOT MarketingSetup.Persons) AND (ContRec.Type = ContRec.Type::Person) THEN
        EXIT;

      //**4PS.sn #C011151, #C013740 Central Data Management (rename)
      //IF (MarketingSetup."Central Management") AND (Operation = 3) THEN
      //  ERROR(Text099, NewRec.TABLECAPTION,
      //    MarketingSetup.FIELDCAPTION("Central Management"), MarketingSetup."Central Management");
      //**4PS.sn #C011151, #C013740 Central Data Management (rename)

      SetCompRelRecFilter(1);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          CurrRec.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:BEGIN
                CurrRec.COPY(OldRec);
                CurrRec.RESET;
                IF CurrRec.FIND THEN
                  CurrRec.RENAME(
                    NewRec."Contact No.",
                    NewRec."Salesperson Code");
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                CurrRec.COPY(NewRec);
                CurrRec.RESET;
                IF CurrRec.FIND THEN BEGIN
                  CurrRec.TRANSFERFIELDS(NewRec, FALSE);
                  CurrRec.MODIFY;
                END ELSE BEGIN
                  CurrRec.INSERT;
                END;
              END;
            4:BEGIN
                CurrRec.COPY(NewRec);
                CurrRec.RESET;
                IF CurrRec.FIND THEN
                  CurrRec.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    [External]
    PROCEDURE EditContactIndustryGroup@1100485008(VAR NewRec@1100485002 : Record 5058;Operation@1100485001 : Integer;OldRec@1100485000 : Record 5058);
    VAR
      CurrRec@1100485004 : Record 5058;
      ContRec@1100485003 : Record 5050;
    BEGIN
      MarketingSetup.GET;

      IF NOT MarketingSetup."Central Management" THEN
        EXIT;

      IF NOT MarketingSetup."Industry Groups" THEN
        EXIT;

      IF NOT ContRec.GET(OldRec."Contact No.") THEN //skip data-inconsistency
        EXIT;

      IF ContRec.Type <> ContRec.Type::Company THEN
        EXIT;

      //**4PS.sn #C011151, #C013740 Central Data Management (rename)
      //IF (MarketingSetup."Central Management") AND (Operation = 3) THEN
      //  ERROR(Text099, NewRec.TABLECAPTION,
      //    MarketingSetup.FIELDCAPTION("Central Management"), MarketingSetup."Central Management");
      //**4PS.sn #C011151, #C013740 Central Data Management (rename)

      SetCompRelRecFilter(1);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          CurrRec.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:BEGIN
                CurrRec.COPY(OldRec);
                CurrRec.RESET;
                IF CurrRec.FIND THEN
                  CurrRec.RENAME(
                    NewRec."Contact No.",
                    NewRec."Industry Group Code");
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                CurrRec.COPY(NewRec);
                CurrRec.RESET;
                IF CurrRec.FIND THEN BEGIN
                  CurrRec.TRANSFERFIELDS(NewRec, FALSE);
                  CurrRec.MODIFY;
                END ELSE BEGIN
                  CurrRec.INSERT;
                END;
              END;
            4:BEGIN
                CurrRec.COPY(NewRec);
                CurrRec.RESET;
                IF CurrRec.FIND THEN
                  CurrRec.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    [External]
    PROCEDURE EditContactTradename@1100525010(VAR NewRec@1100485002 : Record 11229299;Operation@1100485001 : Integer;OldRec@1100485000 : Record 11229299);
    VAR
      CurrRec@1100485004 : Record 11229299;
      ContRec@1100485003 : Record 5050;
    BEGIN
      MarketingSetup.GET;

      IF NOT MarketingSetup."Central Management" THEN
        EXIT;

      IF NOT MarketingSetup.Tradenames THEN
        EXIT;

      IF NOT ContRec.GET(OldRec."Contact No.") THEN //skip data-inconsistency
        EXIT;

      IF ContRec.Type <> ContRec.Type::Company THEN
        EXIT;

      //**4PS.sn #C011151, #C013740 Central Data Management (rename)
      //IF (MarketingSetup."Central Management") AND (Operation = 3) THEN
      //  ERROR(Text099, NewRec.TABLECAPTION,
      //    MarketingSetup.FIELDCAPTION("Central Management"), MarketingSetup."Central Management");
      //**4PS.sn #C011151, #C013740 Central Data Management (rename)

      SetCompRelRecFilter(1);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          CurrRec.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:BEGIN
                CurrRec.COPY(OldRec);
                CurrRec.RESET;
                IF CurrRec.FIND THEN
                  CurrRec.RENAME(
                    NewRec."Contact No.",
                    NewRec."Line No.");
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                CurrRec.COPY(NewRec);
                CurrRec.RESET;
                IF CurrRec.FIND THEN BEGIN
                  CurrRec.TRANSFERFIELDS(NewRec, FALSE);
                  CurrRec.MODIFY;
                END ELSE BEGIN
                  CurrRec.INSERT;
                END;
              END;
            4:BEGIN
                CurrRec.COPY(NewRec);
                CurrRec.RESET;
                IF CurrRec.FIND THEN
                  CurrRec.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    [External]
    PROCEDURE EditContactFunctionGroup@1100485010(VAR NewRec@1100485002 : Record 5067;Operation@1100485001 : Integer;OldRec@1100485000 : Record 5067);
    VAR
      CurrRec@1100485004 : Record 5067;
      ContRec@1100485003 : Record 5050;
    BEGIN
      MarketingSetup.GET;

      IF NOT MarketingSetup."Central Management" THEN
        EXIT;

      IF NOT MarketingSetup."Function Groups" THEN
        EXIT;

      IF NOT ContRec.GET(OldRec."Contact No.") THEN //skip data-inconsistency
        EXIT;

      IF ContRec.Type <> ContRec.Type::Person THEN
        EXIT;

      //**4PS.sn #C011151, #C013740 Central Data Management (rename)
      //IF (MarketingSetup."Central Management") AND (Operation = 3) THEN
      //  ERROR(Text099, NewRec.TABLECAPTION,
      //    MarketingSetup.FIELDCAPTION("Central Management"), MarketingSetup."Central Management");
      //**4PS.sn #C011151, #C013740 Central Data Management (rename)

      SetCompRelRecFilter(1);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          CurrRec.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:BEGIN
                CurrRec.COPY(OldRec);
                CurrRec.RESET;
                IF CurrRec.FIND THEN
                  CurrRec.RENAME(
                    NewRec."Contact No.",
                    NewRec."Job Responsibility Code");
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                CurrRec.COPY(NewRec);
                CurrRec.RESET;
                IF CurrRec.FIND THEN BEGIN
                  CurrRec.TRANSFERFIELDS(NewRec, FALSE);
                  CurrRec.MODIFY;
                END ELSE BEGIN
                  CurrRec.INSERT;
                END;
              END;
            4:BEGIN
                CurrRec.COPY(NewRec);
                CurrRec.RESET;
                IF CurrRec.FIND THEN
                  CurrRec.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    [External]
    PROCEDURE EditContactAltAddress@1100485013(VAR ContactAltAddressRec@11012000 : Record 5051;Operation@11012001 : Integer;OldContactAltAddressRec@11012002 : Record 5051);
    VAR
      ContactAltAddressRec2@11012003 : Record 5051;
      ContRec@1210190000 : Record 5050;
    BEGIN
      MarketingSetup.GET;

      IF NOT MarketingSetup."Central Management" THEN
        EXIT;

      IF NOT ContRec.GET(OldContactAltAddressRec."Contact No.") THEN //db, 07-01-04: skip data-inconsistency
        EXIT;

      IF (NOT MarketingSetup."Company Alt. Addresses" AND (ContRec.Type = ContRec.Type::Company)) THEN
        EXIT;

      IF (NOT MarketingSetup."Person Alt. Addresses" AND (ContRec.Type = ContRec.Type::Person)) THEN
        EXIT;

      //**4PS.sn #C011151, #C013740 Central Data Management (rename)
      //IF (MarketingSetup."Central Management") AND (Operation = 3) THEN
      //  ERROR(Text099, ContactAltAddressRec.TABLECAPTION,
      //    MarketingSetup.FIELDCAPTION("Central Management"), MarketingSetup."Central Management");
      //**4PS.sn #C011151, #C013740 Central Data Management (rename)

      SetCompRelRecFilter(1);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          ContactAltAddressRec2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:BEGIN
                ContactAltAddressRec2.COPY(OldContactAltAddressRec);
                ContactAltAddressRec2.RESET;
                IF ContactAltAddressRec2.FIND THEN
                  ContactAltAddressRec2.RENAME(
                    ContactAltAddressRec."Contact No.",
                    ContactAltAddressRec.Code);
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                ContactAltAddressRec2.COPY(ContactAltAddressRec);
                ContactAltAddressRec2.RESET;
                IF ContactAltAddressRec2.FIND THEN BEGIN
                  ContactAltAddressRec2.TRANSFERFIELDS(ContactAltAddressRec, FALSE);
                  ContactAltAddressRec2.MODIFY;
                END ELSE BEGIN
                  ContactAltAddressRec2.INSERT;
                END;
              END;
            4:BEGIN
                ContactAltAddressRec2.COPY(ContactAltAddressRec);
                ContactAltAddressRec2.RESET;
                IF ContactAltAddressRec2.FIND THEN
                  ContactAltAddressRec2.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    [External]
    PROCEDURE EditContactAltAddrDateRange@1100485019(VAR ContactAltAddrDateRangeRec@11012000 : Record 5052;Operation@11012001 : Integer;OldContactAltAddrDateRangeRec@11012002 : Record 5052);
    VAR
      ContactAltAddrDateRangeRec2@11012003 : Record 5052;
      ContRec@1210190000 : Record 5050;
    BEGIN
      MarketingSetup.GET;

      IF NOT MarketingSetup."Central Management" THEN
        EXIT;

      IF NOT ContRec.GET(OldContactAltAddrDateRangeRec."Contact No.") THEN
        EXIT;

      IF (NOT MarketingSetup."Company Alt. Addresses" AND (ContRec.Type = ContRec.Type::Company)) THEN
        EXIT;

      IF (NOT MarketingSetup."Person Alt. Addresses" AND (ContRec.Type = ContRec.Type::Person)) THEN
        EXIT;

      //**4PS.sn #C011151, #C013740 Central Data Management (rename)
      //IF (MarketingSetup."Central Management") AND (Operation = 3) THEN
      //  ERROR(Text099, ContactAltAddrDateRangeRec.TABLECAPTION,
      //    MarketingSetup.FIELDCAPTION("Central Management"), MarketingSetup."Central Management");
      //**4PS.sn #C011151, #C013740 Central Data Management (rename)

      SetCompRelRecFilter(1);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          ContactAltAddrDateRangeRec2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:BEGIN
                ContactAltAddrDateRangeRec2.COPY(OldContactAltAddrDateRangeRec);
                ContactAltAddrDateRangeRec2.RESET;
                IF ContactAltAddrDateRangeRec2.FIND THEN
                  ContactAltAddrDateRangeRec2.RENAME(
                    ContactAltAddrDateRangeRec."Contact No.",
                    ContactAltAddrDateRangeRec."Starting Date");
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                ContactAltAddrDateRangeRec2.COPY(ContactAltAddrDateRangeRec);
                ContactAltAddrDateRangeRec2.RESET;
                IF ContactAltAddrDateRangeRec2.FIND THEN BEGIN
                  ContactAltAddrDateRangeRec2.TRANSFERFIELDS(ContactAltAddrDateRangeRec, FALSE);
                  ContactAltAddrDateRangeRec2.MODIFY;
                END ELSE BEGIN
                  ContactAltAddrDateRangeRec2.INSERT;
                END;
              END;
            4:BEGIN
                ContactAltAddrDateRangeRec2.COPY(ContactAltAddrDateRangeRec);
                ContactAltAddrDateRangeRec2.RESET;
                IF ContactAltAddrDateRangeRec2.FIND THEN
                  ContactAltAddrDateRangeRec2.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    [External]
    PROCEDURE EditCommentLine@1100485009(lvType@1100485003 : Integer;lvCode@1100485000 : Code[20]);
    VAR
      CommentLine@1100485001 : Record 97;
      CommentLine2@1100485002 : Record 97;
    BEGIN
      IF (lvType <> 18) AND (lvType <> 23) THEN
        EXIT;

      IF NOT MarketingSetup.Comments THEN
        EXIT;

      CommentLine2.CHANGECOMPANY(CompRelationRec.Company);
      IF lvType = 18 THEN
        CommentLine2.SETRANGE("Table Name", CommentLine."Table Name"::Customer);
      IF lvType = 23 THEN
        CommentLine2.SETRANGE("Table Name", CommentLine."Table Name"::Vendor);
      CommentLine2.SETRANGE("No.", lvCode);
      CommentLine2.DELETEALL;

      CommentLine.CHANGECOMPANY(LeadingCompany); //C002428
      IF lvType = 18 THEN
        CommentLine.SETRANGE("Table Name", CommentLine."Table Name"::Customer);
      IF lvType = 23 THEN
        CommentLine.SETRANGE("Table Name", CommentLine."Table Name"::Vendor);
      CommentLine.SETRANGE("No.", lvCode);
      IF CommentLine.FINDSET THEN BEGIN
        REPEAT
          CommentLine2.COPY(CommentLine);
          CommentLine2."No." := lvCode;
          CommentLine2.INSERT;
        UNTIL CommentLine.NEXT = 0;
      END;
    END;

    [External]
    PROCEDURE EditCommentLineRelation@1100485011(lvCode@1100485002 : Code[20]);
    VAR
      RMCommentLine@1100485000 : Record 5061;
      RMCommentLine2@1100485001 : Record 5061;
    BEGIN
      IF NOT MarketingSetup.Comments THEN
        EXIT;

      RMCommentLine2.CHANGECOMPANY(CompRelationRec.Company);
      RMCommentLine2.SETRANGE("Table Name", RMCommentLine."Table Name"::Contact);
      RMCommentLine2.SETRANGE("No.", lvCode);
      RMCommentLine2.SETRANGE("Sub No.",0);
      RMCommentLine2.DELETEALL;

      RMCommentLine.CHANGECOMPANY(LeadingCompany); //C002428
      RMCommentLine.SETRANGE("Table Name", RMCommentLine."Table Name"::Contact);
      RMCommentLine.SETRANGE("No.", lvCode);
      RMCommentLine.SETRANGE("Sub No.",0);
      IF RMCommentLine.FINDSET THEN BEGIN
        REPEAT
          RMCommentLine2.COPY(RMCommentLine);
          RMCommentLine2."No." := lvCode;
          RMCommentLine2.INSERT;
        UNTIL RMCommentLine.NEXT = 0;
      END;
    END;

    [External]
    PROCEDURE UpdateSKUFromItem@1100485022(ItemRec@1100485000 : Record 27;lvCompName@1100485002 : Text[50]);
    VAR
      SKU@1100485001 : Record 5700;
    BEGIN
      WITH ItemRec DO BEGIN
        SKU.CHANGECOMPANY(lvCompName);
        SKU.SETRANGE("Item No.", "No.");
        IF SKU.FINDSET(TRUE, FALSE) THEN BEGIN
          REPEAT
            SKU."Unit Cost" := "Unit Cost";
            SKU.VALIDATE("Standard Cost", "Standard Cost");
            SKU."Last Direct Cost" := "Last Direct Cost";
            //C046894.sn
            SKU."Vendor No." := "Vendor No.";
            SKU."Vendor Item No." := "Vendor Item No.";
            //C046894.en
            SKU.MODIFY;
          UNTIL SKU.NEXT = 0;
        END;
      END;
    END;

    [External]
    PROCEDURE ExcludeFieldsFromExchange@1100525000(OldRecRef@1100525000 : RecordRef;VAR NewRecRef@1100525001 : RecordRef;FromCentral@1210190000 : Boolean);
    VAR
      CentralMgtFieldSetup@1100525006 : Record 11020404;
      OldFieldRef@1100525002 : FieldRef;
      NewFieldRef@1100525003 : FieldRef;
      NumberOfFields@1100525004 : Integer;
      i@1100525005 : Integer;
    BEGIN
      CentralMgtFieldSetup.SETRANGE("Table ID", OldRecRef.NUMBER);
      CentralMgtFieldSetup.SETRANGE(Central, NOT FromCentral);
      IF CentralMgtFieldSetup.FINDSET THEN BEGIN
        NumberOfFields := OldRecRef.FIELDCOUNT;
        REPEAT
          FOR i := 1 TO NumberOfFields DO BEGIN
            OldFieldRef := OldRecRef.FIELDINDEX(i);
            IF OldFieldRef.NUMBER = CentralMgtFieldSetup."Field ID" THEN BEGIN
              NewFieldRef := NewRecRef.FIELDINDEX(i);
              NewFieldRef.VALUE := OldFieldRef.VALUE;
            END;
          END;
        UNTIL CentralMgtFieldSetup.NEXT = 0;
      END;
    END;

    [External]
    PROCEDURE InitCentralMgtFieldsSetup@1100525006();
    BEGIN
      //Customer
      InitCentralMgtFieldSetup(18, 14, TRUE);
      InitCentralMgtFieldSetup(18, 20, TRUE);
      InitCentralMgtFieldSetup(18, 21, TRUE); // 28219.n
      InitCentralMgtFieldSetup(18, 22, TRUE);
      InitCentralMgtFieldSetup(18, 23, TRUE);
      InitCentralMgtFieldSetup(18, 24, TRUE); //C016265
      InitCentralMgtFieldSetup(18, 27, TRUE);
      InitCentralMgtFieldSetup(18, 28, TRUE);
      InitCentralMgtFieldSetup(18, 29, TRUE);
      InitCentralMgtFieldSetup(18, 30, TRUE);
      InitCentralMgtFieldSetup(18, 31, TRUE);
      InitCentralMgtFieldSetup(18, 33, TRUE);
      InitCentralMgtFieldSetup(18, 34, TRUE);
      InitCentralMgtFieldSetup(18, 39, TRUE);
      InitCentralMgtFieldSetup(18, 40, TRUE);
      InitCentralMgtFieldSetup(18, 45, TRUE);
      InitCentralMgtFieldSetup(18, 47, TRUE);
      InitCentralMgtFieldSetup(18, 83, TRUE);
      InitCentralMgtFieldSetup(18, 87, TRUE);
      InitCentralMgtFieldSetup(18, 104, TRUE);
      InitCentralMgtFieldSetup(18, 110, TRUE); //call 33052
      InitCentralMgtFieldSetup(18, 115, TRUE);
      InitCentralMgtFieldSetup(18, 132, TRUE); //C010303
      InitCentralMgtFieldSetup(18, 288, TRUE); //C010303
      InitCentralMgtFieldSetup(18, 5750, TRUE);
      InitCentralMgtFieldSetup(18, 5790, TRUE);
      InitCentralMgtFieldSetup(18, 5792, TRUE);
      InitCentralMgtFieldSetup(18, 7001, TRUE);
      InitCentralMgtFieldSetup(18, 11000000, TRUE); //C010303
      InitCentralMgtFieldSetup(18, 11012000, TRUE);
      InitCentralMgtFieldSetup(18, 11012001, TRUE);
      InitCentralMgtFieldSetup(18, 11012002, TRUE);
      InitCentralMgtFieldSetup(18, 11012003, TRUE);
      InitCentralMgtFieldSetup(18, 11012004, TRUE);
      InitCentralMgtFieldSetup(18, 11012020, TRUE);
      InitCentralMgtFieldSetup(18, 11012050, TRUE);
      InitCentralMgtFieldSetup(18, 11012051, TRUE);
      InitCentralMgtFieldSetup(18, 11012052, TRUE);
      InitCentralMgtFieldSetup(18, 11012070, TRUE); //call 33052
      InitCentralMgtFieldSetup(18, 11012080, TRUE);
      InitCentralMgtFieldSetup(18, 11012090, TRUE);
      InitCentralMgtFieldSetup(18, 11012100, TRUE);
      InitCentralMgtFieldSetup(18, 11012101, TRUE);
      InitCentralMgtFieldSetup(18, 11012273, TRUE);
      InitCentralMgtFieldSetup(18, 11012274, TRUE);
      InitCentralMgtFieldSetup(18, 11012275, TRUE);
      InitCentralMgtFieldSetup(18, 11012280, TRUE);
      InitCentralMgtFieldSetup(18, 11012290, TRUE);
      InitCentralMgtFieldSetup(18, 11012331, TRUE);
      InitCentralMgtFieldSetup(18, 11012332, TRUE);
      InitCentralMgtFieldSetup(18, 11012340, TRUE);
      InitCentralMgtFieldSetup(18, 11012345, TRUE);
      InitCentralMgtFieldSetup(18, 11012350, TRUE);
      InitCentralMgtFieldSetup(18, 11012360, TRUE);
      InitCentralMgtFieldSetup(18, 11012390, FALSE);
      InitCentralMgtFieldSetup(18, 11012400, TRUE);
      InitCentralMgtFieldSetup(18, 11012510, TRUE);
      InitCentralMgtFieldSetup(18, 11012520, TRUE);
      InitCentralMgtFieldSetup(18, 11012620, TRUE);
      InitCentralMgtFieldSetup(18, 11012625, TRUE);
      InitCentralMgtFieldSetup(18, 11012630, TRUE);
      InitCentralMgtFieldSetup(18, 11012635, TRUE);
      InitCentralMgtFieldSetup(18, 11012750, TRUE);
      //InitCentralMgtFieldSetup(18, 11012755, TRUE); // Obsolete
      InitCentralMgtFieldSetup(18, 11012756, TRUE);
      InitCentralMgtFieldSetup(18, 11012759, TRUE);
      InitCentralMgtFieldSetup(18, 11012760, TRUE);
      InitCentralMgtFieldSetup(18, 11012761, TRUE);
      InitCentralMgtFieldSetup(18, 11012762, TRUE);
      InitCentralMgtFieldSetup(18, 11012763, TRUE);
      InitCentralMgtFieldSetup(18, 11012764, TRUE);
      InitCentralMgtFieldSetup(18, 11012770, TRUE);
      InitCentralMgtFieldSetup(18, 11012880, TRUE);
      InitCentralMgtFieldSetup(18, 11012881, TRUE);
      InitCentralMgtFieldSetup(18, 11012882, TRUE);
      InitCentralMgtFieldSetup(18, 11012892, TRUE);
      InitCentralMgtFieldSetup(18, 11012998, TRUE);
      InitCentralMgtFieldSetup(18, 11020254, TRUE);
      InitCentralMgtFieldSetup(18, 11125762, TRUE);
      //C023763.sn
      InitCentralMgtFieldSetup(18, 11125780, TRUE);
      InitCentralMgtFieldSetup(18, 11125790, TRUE);
      InitCentralMgtFieldSetup(18, 11125800, TRUE);
      InitCentralMgtFieldSetup(18, 11125850, TRUE);
      //C023763.en
      InitCentralMgtFieldSetup(18, 11125870, TRUE);
      InitCentralMgtFieldSetup(18, 11125920, TRUE);
      InitCentralMgtFieldSetup(18, 11125930, TRUE);
      InitCentralMgtFieldSetup(18, 11125940, TRUE);
      InitCentralMgtFieldSetup(18, 11125950, TRUE);
      InitCentralMgtFieldSetup(18, 11125960, TRUE);

      //Vendor
      InitCentralMgtFieldSetup(23, 3, FALSE);
      InitCentralMgtFieldSetup(23, 14, FALSE);
      InitCentralMgtFieldSetup(23, 21, TRUE); // 28219.n
      InitCentralMgtFieldSetup(23, 22, TRUE);
      InitCentralMgtFieldSetup(23, 24, TRUE); //C016265
      InitCentralMgtFieldSetup(23, 27, TRUE);
      InitCentralMgtFieldSetup(23, 29, TRUE);
      InitCentralMgtFieldSetup(23, 30, TRUE);
      InitCentralMgtFieldSetup(23, 39, TRUE);
      InitCentralMgtFieldSetup(23, 45, TRUE);
      InitCentralMgtFieldSetup(23, 47, TRUE); //C023933
      InitCentralMgtFieldSetup(23, 110, TRUE); // 28219.n
      InitCentralMgtFieldSetup(23, 5701, TRUE);
      InitCentralMgtFieldSetup(23, 5790, TRUE);
      InitCentralMgtFieldSetup(23, 11000000, TRUE); //C023933
      //InitCentralMgtFieldSetup(23, 11012020, TRUE); //Subcontractor
      InitCentralMgtFieldSetup(23, 11012000, TRUE); // 33140
      InitCentralMgtFieldSetup(23, 11012010, TRUE); // 33140
      InitCentralMgtFieldSetup(23, 11012028, TRUE); //call 29848
      InitCentralMgtFieldSetup(23, 11012040, TRUE); //call 29848
      InitCentralMgtFieldSetup(23, 11012050, TRUE); //call 29848
      InitCentralMgtFieldSetup(23, 11012120, TRUE); //call 29848
      InitCentralMgtFieldSetup(23, 11012130, TRUE); //C020510
      InitCentralMgtFieldSetup(23, 11012300, TRUE);
      InitCentralMgtFieldSetup(23, 11012310, TRUE);
      InitCentralMgtFieldSetup(23, 11012314, TRUE);
      InitCentralMgtFieldSetup(23, 11012321, TRUE);
      InitCentralMgtFieldSetup(23, 11012322, TRUE);
      InitCentralMgtFieldSetup(23, 11012323, TRUE);
      InitCentralMgtFieldSetup(23, 11012324, TRUE);
      InitCentralMgtFieldSetup(23, 11012325, TRUE);
      InitCentralMgtFieldSetup(23, 11012326, TRUE);
      InitCentralMgtFieldSetup(23, 11012327, TRUE);
      InitCentralMgtFieldSetup(23, 11012328, TRUE);
      InitCentralMgtFieldSetup(23, 11012334, TRUE);
      InitCentralMgtFieldSetup(23, 11012335, TRUE); //DP00733
      InitCentralMgtFieldSetup(23, 11012336, TRUE);
      InitCentralMgtFieldSetup(23, 11012340, TRUE);
      //InitCentralMgtFieldSetup(23, 11012350, TRUE); //DP01879.o
      InitCentralMgtFieldSetup(23, 11012352, TRUE); //DP01879.n
      InitCentralMgtFieldSetup(23, 11012353, TRUE); //DP01879.n
      InitCentralMgtFieldSetup(23, 11012354, TRUE); //DP01879.n
      InitCentralMgtFieldSetup(23, 11012355, TRUE); //DP01879.n
      InitCentralMgtFieldSetup(23, 11012390, FALSE);
      InitCentralMgtFieldSetup(23, 11012405, TRUE); //C017962
      InitCentralMgtFieldSetup(23, 11012410, TRUE); //C017962
      InitCentralMgtFieldSetup(23, 11012425, TRUE);
      InitCentralMgtFieldSetup(23, 11012430, TRUE);
      InitCentralMgtFieldSetup(23, 11012440, TRUE);
      InitCentralMgtFieldSetup(23, 11012441, TRUE);
      InitCentralMgtFieldSetup(23, 11012450, TRUE); //call 29848
      InitCentralMgtFieldSetup(23, 11012460, TRUE); //call 29848
      InitCentralMgtFieldSetup(23, 11012471, TRUE); //kzwerver, 110826, n, #28863
      InitCentralMgtFieldSetup(23, 11012480, TRUE); //kzwerver, 110826, n, #28863
      InitCentralMgtFieldSetup(23, 11012485, TRUE);
      InitCentralMgtFieldSetup(23, 11012490, TRUE); //call 29848
      InitCentralMgtFieldSetup(23, 11012500, TRUE); //call 29848
      InitCentralMgtFieldSetup(23, 11012560, TRUE);
      InitCentralMgtFieldSetup(23, 11012580, FALSE); //kzwerver, 110826, n, #28863
      InitCentralMgtFieldSetup(23, 11012581, FALSE); //kzwerver, 110826, n, #28863
      InitCentralMgtFieldSetup(23, 11012583, TRUE); //kzwerver, 110826, n, #28863
      InitCentralMgtFieldSetup(23, 11012690, FALSE); //DP00477
      InitCentralMgtFieldSetup(23, 11012770, TRUE); //DP00556
      InitCentralMgtFieldSetup(23, 11012780, TRUE); //DP00556
      InitCentralMgtFieldSetup(23, 11125860, TRUE);
      InitCentralMgtFieldSetup(23, 11012520, TRUE);
      InitCentralMgtFieldSetup(23, 11012525, TRUE);

      //Contact
      InitCentralMgtFieldSetup(5050, 29, TRUE);
      InitCentralMgtFieldSetup(5050, 11012906, TRUE);
      InitCentralMgtFieldSetup(5050, 11012908, TRUE);
      InitCentralMgtFieldSetup(5050, 11012998, TRUE);
      InitCentralMgtFieldSetup(5050, 11012985, TRUE);
      InitCentralMgtFieldSetup(5050, 11012995, TRUE); // 33140
      InitCentralMgtFieldSetup(5050, 11012996, TRUE); // 33140
      InitCentralMgtFieldSetup(5050, 11012480, TRUE);
      InitCentralMgtFieldSetup(5050, 11125862, FALSE);

      //G/L Account
      InitCentralMgtFieldSetup(15, 13, TRUE);
      InitCentralMgtFieldSetup(15, 14, TRUE);
      InitCentralMgtFieldSetup(15, 43, TRUE);
      InitCentralMgtFieldSetup(15, 44, TRUE);
      InitCentralMgtFieldSetup(15, 45, TRUE);
      InitCentralMgtFieldSetup(15, 57, TRUE);
      InitCentralMgtFieldSetup(15, 58, TRUE);
      InitCentralMgtFieldSetup(15, 11400, TRUE);
      InitCentralMgtFieldSetup(15, 11012000, TRUE);

      // dp00133.sn
      //Item
      InitCentralMgtFieldSetup(27, 3, TRUE); //C031004
      InitCentralMgtFieldSetup(27, 5, TRUE); //C031004
      InitCentralMgtFieldSetup(27, 11, TRUE);
      InitCentralMgtFieldSetup(27, 12, TRUE);
      InitCentralMgtFieldSetup(27, 14, TRUE);
      InitCentralMgtFieldSetup(27, 18, TRUE);  //C051040
      InitCentralMgtFieldSetup(27, 20, TRUE);  //C051040
      InitCentralMgtFieldSetup(27, 22, TRUE);  //C051040
      InitCentralMgtFieldSetup(27, 24, TRUE);  //C051040
      InitCentralMgtFieldSetup(27, 25, TRUE);
      InitCentralMgtFieldSetup(27, 31, TRUE);
      InitCentralMgtFieldSetup(27, 32, TRUE);
      InitCentralMgtFieldSetup(27, 33, TRUE);
      InitCentralMgtFieldSetup(27, 38, TRUE);  //C051040
      InitCentralMgtFieldSetup(27, 47, TRUE); // C036108
      InitCentralMgtFieldSetup(27, 91, TRUE);
      InitCentralMgtFieldSetup(27, 99, TRUE); // C036108
      InitCentralMgtFieldSetup(27, 106, TRUE);
      InitCentralMgtFieldSetup(27, 5419, TRUE);
      InitCentralMgtFieldSetup(27, 5426, TRUE);
      InitCentralMgtFieldSetup(27, 5702, TRUE);
      InitCentralMgtFieldSetup(27, 5704, TRUE);
      InitCentralMgtFieldSetup(27, 11012050, TRUE);
      InitCentralMgtFieldSetup(27, 11012210, TRUE);
      InitCentralMgtFieldSetup(27, 11012215, TRUE);
      InitCentralMgtFieldSetup(27, 11012216, TRUE);
      InitCentralMgtFieldSetup(27, 11012217, TRUE);
      InitCentralMgtFieldSetup(27, 11012223, TRUE);
      InitCentralMgtFieldSetup(27, 11012310, TRUE);
      InitCentralMgtFieldSetup(27, 11012992, TRUE);
      InitCentralMgtFieldSetup(27, 92, TRUE);
      // dp00133.en

      //C011471
      //Customer Bank Account
      InitCentralMgtFieldSetup(287, 11000008, TRUE);
      //

      //Sales Price
      InitCentralMgtFieldSetup(7002, 5, FALSE);
      InitCentralMgtFieldSetup(7002, 7, FALSE);
      InitCentralMgtFieldSetup(7002, 10, FALSE);
      InitCentralMgtFieldSetup(7002, 11, FALSE);
      InitCentralMgtFieldSetup(7002, 15, FALSE);
      InitCentralMgtFieldSetup(7002, 7001, FALSE);

      //Sales Line Discount
      InitCentralMgtFieldSetup(7004, 5, FALSE);
      InitCentralMgtFieldSetup(7004, 15, FALSE);

      //Purchase Price
      InitCentralMgtFieldSetup(7012, 5, FALSE);
      InitCentralMgtFieldSetup(7012, 15, FALSE);

      //Purchase Line Discount
      InitCentralMgtFieldSetup(7014, 5, FALSE);
      InitCentralMgtFieldSetup(7014, 15, FALSE);

      //4PSSE
      InitCentralMgtFieldSetup(18, 10601, TRUE); //Account Code NO
      InitCentralMgtFieldSetup(18, 10602, TRUE); //E-Invoice
      InitCentralMgtFieldSetup(18, 13600, TRUE); //EAN No.
      InitCentralMgtFieldSetup(18, 13601, TRUE); //Account Code DK
      InitCentralMgtFieldSetup(18, 13604, TRUE); //OIOUBL Profile Code
      InitCentralMgtFieldSetup(18, 13605, TRUE); //OIOUBL Profile Code Required
      InitCentralMgtFieldSetup(18, 11128000, TRUE); //VAT Prod. Posting Grp to lines
      InitCentralMgtFieldSetup(18, 11128270, TRUE); //Price List Code
      InitCentralMgtFieldSetup(18, 11128272, TRUE); //Time Last Modified
      InitCentralMgtFieldSetup(18, 11128273, TRUE); //Stripped E-Invoice
      InitCentralMgtFieldSetup(18, 11128290, TRUE); //Sales Discount Term Percent
      InitCentralMgtFieldSetup(18, 11128900, TRUE); //Retention Balance (LCY)
      InitCentralMgtFieldSetup(18, 11128910, TRUE); //Use Bill-To Cust. for Pr. Book
      InitCentralMgtFieldSetup(18, 11128920, TRUE); //Customer Relation 1 No.
      InitCentralMgtFieldSetup(18, 11128930, TRUE); //Customer Relation 1 Name
      InitCentralMgtFieldSetup(18, 11128940, TRUE); //Customer Relation 2 No.
      InitCentralMgtFieldSetup(18, 11128950, TRUE); //Customer Relation 2 Name
      InitCentralMgtFieldSetup(18, 11128960, TRUE); //E-Mail 2
      InitCentralMgtFieldSetup(18, 11250712, TRUE); //Finvoice Enabled
      InitCentralMgtFieldSetup(18, 11250713, TRUE); //Intermediator Code
      InitCentralMgtFieldSetup(18, 11250714, TRUE); //Party Identifier
      InitCentralMgtFieldSetup(18, 11250715, TRUE); //Account Type
      InitCentralMgtFieldSetup(18, 11250716, TRUE); //Business Identity Code
      InitCentralMgtFieldSetup(18, 11250717, TRUE); //EDI Code
      InitCentralMgtFieldSetup(18, 12047958, TRUE); //Ship-to Code
      InitCentralMgtFieldSetup(18, 12047959, TRUE); //Auto Giro Type
      InitCentralMgtFieldSetup(18, 12047960, TRUE); //Bank Giro No.
      InitCentralMgtFieldSetup(18, 12047961, TRUE); //Approval Status
      InitCentralMgtFieldSetup(18, 12047962, TRUE); //Plus Giro No.
      InitCentralMgtFieldSetup(18, 12047963, TRUE); //Registration No.
      InitCentralMgtFieldSetup(23, 11230, TRUE); //Inward Reg. Balance (LCY)
      InitCentralMgtFieldSetup(23, 13650, TRUE); //Giro Acc. No.
      InitCentralMgtFieldSetup(23, 11128000, TRUE); //VAT Prod. Posting Grp to lines
      InitCentralMgtFieldSetup(23, 11128060, TRUE); //No control of Ext. Doc. No.
      InitCentralMgtFieldSetup(23, 11128105, TRUE); //Not Check Bankgiro
      InitCentralMgtFieldSetup(23, 12013601, TRUE); //Factoring
      InitCentralMgtFieldSetup(23, 12013602, TRUE); //Predefined Account
      InitCentralMgtFieldSetup(23, 12013606, TRUE); //Vendor Type (Web Req.)
      InitCentralMgtFieldSetup(23, 12013610, TRUE); //Do not check Duplicate Invoice
      InitCentralMgtFieldSetup(23, 12013611, TRUE); //Vendor ID
      InitCentralMgtFieldSetup(23, 12013621, TRUE); //Predefined Purch. Code
      InitCentralMgtFieldSetup(23, 12013622, TRUE); //Ignore on Fraud List
      InitCentralMgtFieldSetup(23, 12013623, TRUE); //Latest Fraud Block
      InitCentralMgtFieldSetup(23, 12047959, TRUE); //External Document No.
      InitCentralMgtFieldSetup(23, 12047960, TRUE); //Inward Reg. Net Change (LCY)
      InitCentralMgtFieldSetup(23, 12047963, TRUE); //Registration No.
      InitCentralMgtFieldSetup(23, 32000000, TRUE); //Business Identity Code
      InitCentralMgtFieldSetup(287, 12047958, TRUE); //Plus Giro No.
      InitCentralMgtFieldSetup(287, 12047959, TRUE); //Payment Charge Paid by
      InitCentralMgtFieldSetup(287, 12047960, TRUE); //Payment Type
      InitCentralMgtFieldSetup(287, 12047961, TRUE); //Payment Method
      InitCentralMgtFieldSetup(287, 12047962, TRUE); //Currency Account
      InitCentralMgtFieldSetup(287, 12047963, TRUE); //Giro Type Code
      InitCentralMgtFieldSetup(287, 12047964, TRUE); //Bank Giro No.
      InitCentralMgtFieldSetup(287, 12047965, TRUE); //Code for Bank of Sweden
      InitCentralMgtFieldSetup(287, 12047966, TRUE); //Account Payment with Advising
      InitCentralMgtFieldSetup(287, 12047967, TRUE); //Country Code ISO + Account No.
      InitCentralMgtFieldSetup(287, 12047968, TRUE); //Payment Relation
      InitCentralMgtFieldSetup(287, 32000001, TRUE); //Clearing Code
      InitCentralMgtFieldSetup(288, 13400, TRUE); //SEPA Payment
      InitCentralMgtFieldSetup(288, 12047958, TRUE); //Plus Giro No.
      InitCentralMgtFieldSetup(288, 12047959, TRUE); //Payment Charge Paid by
      InitCentralMgtFieldSetup(288, 12047960, TRUE); //Payment Type
      InitCentralMgtFieldSetup(288, 12047961, TRUE); //Payment Method
      InitCentralMgtFieldSetup(288, 12047962, TRUE); //Currency Account
      InitCentralMgtFieldSetup(288, 12047963, TRUE); //Giro Type Code
      InitCentralMgtFieldSetup(288, 12047964, TRUE); //Bank Giro No.
      InitCentralMgtFieldSetup(288, 12047965, TRUE); //Code for Bank of Sweden
      InitCentralMgtFieldSetup(288, 12047966, TRUE); //Account Payment with Advising
      InitCentralMgtFieldSetup(288, 12047967, TRUE); //Country Code ISO + Account No.
      InitCentralMgtFieldSetup(288, 12047968, TRUE); //Payment Relation
      InitCentralMgtFieldSetup(288, 32000001, TRUE); //Clearing Code
      InitCentralMgtFieldSetup(11128090, 15000000, TRUE); //Remittance
      InitCentralMgtFieldSetup(11128090, 15000001, TRUE); //Remittance Account Code
      InitCentralMgtFieldSetup(11128090, 15000002, TRUE); //Recipient Bank Account No.
      InitCentralMgtFieldSetup(11128090, 15000003, TRUE); //Remittance Agreement Code
      InitCentralMgtFieldSetup(11128090, 15000004, TRUE); //BOLS Text Code
      InitCentralMgtFieldSetup(11128090, 15000005, TRUE); //Recipient ref. 1 - inv.
      InitCentralMgtFieldSetup(11128090, 15000006, TRUE); //Recipient ref. 2 - inv.
      InitCentralMgtFieldSetup(11128090, 15000007, TRUE); //Recipient ref. 3 - inv.
      InitCentralMgtFieldSetup(11128090, 15000008, TRUE); //Recipient ref. 1 - cred.
      InitCentralMgtFieldSetup(11128090, 15000009, TRUE); //Recipient ref. 2 - cred.
      InitCentralMgtFieldSetup(11128090, 15000010, TRUE); //Recipient ref. 3 - cred.
      InitCentralMgtFieldSetup(11128090, 15000011, TRUE); //Payment Type Code Domestic
      InitCentralMgtFieldSetup(11128090, 15000012, TRUE); //Charges Domestic
      InitCentralMgtFieldSetup(11128090, 15000013, TRUE); //Warning Notice
      InitCentralMgtFieldSetup(11128090, 15000014, TRUE); //Warning Text
      InitCentralMgtFieldSetup(11128090, 15000015, TRUE); //SWIFT
      InitCentralMgtFieldSetup(11128090, 15000016, TRUE); //Bank Name
      InitCentralMgtFieldSetup(11128090, 15000017, TRUE); //Bank Address 1
      InitCentralMgtFieldSetup(11128090, 15000018, TRUE); //Bank Address 2
      InitCentralMgtFieldSetup(11128090, 15000019, TRUE); //Bank Address 3
      InitCentralMgtFieldSetup(11128090, 15000020, TRUE); //SWIFT Remb. Bank
      InitCentralMgtFieldSetup(11128090, 15000021, TRUE); //Rcpt. Bank Country/Region Code
      InitCentralMgtFieldSetup(11128090, 15000022, TRUE); //Recipient Confirmation
      InitCentralMgtFieldSetup(11128090, 15000023, TRUE); //Telex Country/Region Code
      InitCentralMgtFieldSetup(11128090, 15000024, TRUE); //Telex/Fax No.
      InitCentralMgtFieldSetup(11128090, 15000025, TRUE); //Recipient Contact
      InitCentralMgtFieldSetup(11128090, 15000026, TRUE); //Recipient Ref. Abroad
      InitCentralMgtFieldSetup(11128090, 15000027, TRUE); //Payment Type Code Abroad
      InitCentralMgtFieldSetup(11128090, 15000028, TRUE); //Specification (Norges Bank)
      InitCentralMgtFieldSetup(11128090, 15000029, TRUE); //To Own Account
      InitCentralMgtFieldSetup(11128090, 15000030, TRUE); //Charges Abroad
      InitCentralMgtFieldSetup(11128090, 15000031, TRUE); //Own Vendor Recipient Ref.
    END;

    [External]
    PROCEDURE InitCentralMgtFieldSetup@1100525003(TableID@1100525001 : Integer;FieldID@1100525002 : Integer;Central@1100525003 : Boolean);
    VAR
      CentralMgtFieldSetup@1100525000 : Record 11020404;
    BEGIN
      CentralMgtFieldSetup."Table ID" := TableID;
      CentralMgtFieldSetup."Field ID" := FieldID;
      CentralMgtFieldSetup.Central := Central;
      IF CentralMgtFieldSetup.INSERT THEN;
    END;

    [External]
    PROCEDURE FieldInputAllowed@1100525001(TableID@1100525001 : Integer;FieldID@1100525000 : Integer) : Boolean;
    VAR
      CentralMgtFieldSetup@1100525002 : Record 11020404;
    BEGIN
      //This function can not be used stand-alone
      IF NOT CentralMgtFieldSetup.GET(TableID, FieldID) THEN
        EXIT(FALSE);
      EXIT(NOT CentralMgtFieldSetup.Central);
    END;

    [External]
    PROCEDURE InsertingCustomerIsAllowed@1100528400() : Boolean;
    BEGIN
      //IF NOT CentralActiveLocalInput THEN //C016112.o
      IF NOT CentralActiveLocalInput(DATABASE::"Marketing Setup") THEN //C016112.n
        EXIT(TRUE);
      IF NOT MarketingSetup.Customers THEN
        EXIT(TRUE);
      EXIT(MarketingSetup."Allow Decentral Customers");
    END;

    [External]
    PROCEDURE InsertingVendorIsAllowed@1100528402() : Boolean;
    BEGIN
      //IF NOT CentralActiveLocalInput THEN //C016112.o
      IF NOT CentralActiveLocalInput(DATABASE::"Marketing Setup") THEN //C016112.n
        EXIT(TRUE);
      IF NOT MarketingSetup.Vendors THEN
        EXIT(TRUE);
      EXIT(MarketingSetup."Allow Decentral Vendors");
    END;

    [External]
    PROCEDURE ChangingCustomerIsAllowed@1100528403(CustomerNo@1100528400 : Code[20]) : Boolean;
    VAR
      Customer@1100528401 : Record 18;
      RecRef@1100528402 : RecordRef;
    BEGIN
      IF Customer.GET(CustomerNo) THEN BEGIN
        RecRef.GETTABLE(Customer);
        EXIT(DataInputAllowed(RecRef));
      END;
    END;

    [External]
    PROCEDURE CustomerAddressIsEditable@1100528404(CustomerNo@1100528400 : Code[20]) : Boolean;
    BEGIN
      MarketingSetup.GET;
      EXIT(ChangingCustomerIsAllowed(CustomerNo) OR NOT MarketingSetup."Customer Addresses");
    END;

    [External]
    PROCEDURE CreditLimitByDateIsEditable@1100528300(CustomerNo@1100528400 : Code[20]) : Boolean;
    BEGIN
      MarketingSetup.GET;
      EXIT(ChangingCustomerIsAllowed(CustomerNo) OR NOT MarketingSetup."Credit Limit by Date");
    END;

    [External]
    PROCEDURE CustCommentIsEditable@1100528405(CustomerNo@1100528400 : Code[20]) : Boolean;
    BEGIN
      MarketingSetup.GET;
      EXIT(ChangingCustomerIsAllowed(CustomerNo) OR NOT MarketingSetup.Comments);
    END;

    [External]
    PROCEDURE ChangingVendorIsAllowed@1100528407(VendorNo@1100528400 : Code[20]) : Boolean;
    VAR
      Vendor@1100528401 : Record 23;
      RecRef@1100528402 : RecordRef;
    BEGIN
      IF Vendor.GET(VendorNo) THEN BEGIN
        RecRef.GETTABLE(Vendor);
        EXIT(DataInputAllowed(RecRef));
      END;
    END;

    [External]
    PROCEDURE VendorCommentIsEditable@1100528406(VendorNo@1100528400 : Code[20]) : Boolean;
    BEGIN
      MarketingSetup.GET;
      EXIT(ChangingVendorIsAllowed(VendorNo) OR NOT MarketingSetup.Comments);
    END;

    [External]
    PROCEDURE OrderAddressIsEditable@1100528409(VendorNo@1100528400 : Code[20]) : Boolean;
    BEGIN
      MarketingSetup.GET;
      EXIT(ChangingVendorIsAllowed(VendorNo) OR NOT MarketingSetup."Order Addresses");
    END;

    [External]
    PROCEDURE PaymentAgreementIsEditable@1100528410(VendorNo@1100528400 : Code[20]) : Boolean;
    BEGIN
      MarketingSetup.GET;
      EXIT(ChangingVendorIsAllowed(VendorNo) OR NOT MarketingSetup."Payment Agreements");
    END;

    [External]
    PROCEDURE EmployeePerVendorIsEditable@1100528701(VendorNo@1100528400 : Code[20]) : Boolean;
    BEGIN
      MarketingSetup.GET;
      EXIT(ChangingVendorIsAllowed(VendorNo) OR NOT MarketingSetup."Vendor Employees");
    END;

    [External]
    PROCEDURE VendorCategoryIsEditable@1100528901(VendorNo@1100528400 : Code[20]) : Boolean;
    BEGIN
      //DP00268
      MarketingSetup.GET;
      EXIT(ChangingVendorIsAllowed(VendorNo) OR NOT MarketingSetup."Vendor Categories");
    END;

    [External]
    PROCEDURE InsertingCompanyIsAllowed@1100528411() : Boolean;
    BEGIN
      //IF NOT CentralActiveLocalInput THEN //C016112.o
      IF NOT CentralActiveLocalInput(DATABASE::"Marketing Setup") THEN //C016112.n
        EXIT(TRUE);
      IF NOT MarketingSetup.Companies THEN
        EXIT(TRUE);
      EXIT(MarketingSetup."Allow Decentral Comp./Pers.");
    END;

    [External]
    PROCEDURE InsertingPersonIsAllowed@1100528412() : Boolean;
    BEGIN
      //IF NOT CentralActiveLocalInput THEN //C016112.o
      IF NOT CentralActiveLocalInput(DATABASE::"Marketing Setup") THEN //C016112.n
        EXIT(TRUE);
      IF NOT MarketingSetup.Persons THEN
        EXIT(TRUE);
      EXIT(MarketingSetup."Allow Decentral Comp./Pers.");
    END;

    [External]
    PROCEDURE InsertingContactIsAllowed@1100528401(Contact@1100528400 : Record 5050) : Boolean;
    BEGIN
      IF Contact.Type = Contact.Type::Company THEN
        EXIT(InsertingCompanyIsAllowed)
      ELSE
        EXIT(InsertingPersonIsAllowed);
    END;

    [External]
    PROCEDURE ChangingCompanyIsAllowed@1100528413(ContactNo@1100528400 : Code[20]) : Boolean;
    VAR
      Contact@1100528401 : Record 5050;
      RecRef@1100528402 : RecordRef;
    BEGIN
      IF Contact.GET(ContactNo) THEN BEGIN
        IF Contact.Type <> Contact.Type::Company THEN
          EXIT(FALSE);
        RecRef.GETTABLE(Contact);
        EXIT(DataInputAllowed(RecRef));
      END;
    END;

    [External]
    PROCEDURE ChangingPersonIsAllowed@1100528417(ContactNo@1100528400 : Code[20]) : Boolean;
    VAR
      Contact@1100528401 : Record 5050;
      RecRef@1100528402 : RecordRef;
    BEGIN
      IF Contact.GET(ContactNo) THEN BEGIN
        IF Contact.Type <> Contact.Type::Person THEN
          EXIT(FALSE);
        RecRef.GETTABLE(Contact);
        EXIT(DataInputAllowed(RecRef));
      END;
    END;

    [External]
    PROCEDURE ChangingContactIsAllowed@1100528414(ContactNo@1100528400 : Code[20]) : Boolean;
    VAR
      Contact@1100528401 : Record 5050;
    BEGIN
      IF Contact.GET(ContactNo) THEN BEGIN
        IF Contact.Type = Contact.Type::Company THEN
          EXIT(ChangingCompanyIsAllowed(ContactNo))
        ELSE
          EXIT(ChangingPersonIsAllowed(ContactNo))
      END;
    END;

    [External]
    PROCEDURE ContactFeatureTypeIsEditable@1100528415(ContactNo@1100528405 : Code[20];RelationType@1100528400 : Integer) : Boolean;
    VAR
      ContactFeatureType@1100528402 : Record 11012753;
    BEGIN
      MarketingSetup.GET;
      IF RelationType = ContactFeatureType."Relation Type"::Company THEN
        EXIT(ChangingCompanyIsAllowed(ContactNo) OR NOT MarketingSetup."Company Features");
      IF RelationType = ContactFeatureType."Relation Type"::Contact THEN
        EXIT(ChangingPersonIsAllowed(ContactNo) OR NOT MarketingSetup."Contactperson Features");
      IF RelationType = ContactFeatureType."Relation Type"::Person THEN
        EXIT(ChangingPersonIsAllowed(ContactNo) OR NOT MarketingSetup."Person Features");
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE ContactAltAddressIsEditable@1100528416(ContactNo@1100528405 : Code[20]) : Boolean;
    VAR
      Contact@1100528402 : Record 5050;
    BEGIN
      MarketingSetup.GET;
      IF Contact.GET(ContactNo) THEN BEGIN
        IF Contact.Type = Contact.Type::Company THEN
          EXIT(ChangingCompanyIsAllowed(ContactNo) OR NOT MarketingSetup."Company Alt. Addresses")
        ELSE
          EXIT(ChangingPersonIsAllowed(ContactNo) OR NOT MarketingSetup."Person Alt. Addresses");
      END;
    END;

    [External]
    PROCEDURE ContactIndustryGroupIsEditable@1100528418(ContactNo@1100528405 : Code[20]) : Boolean;
    VAR
      Contact@1100528402 : Record 5050;
    BEGIN
      MarketingSetup.GET;
      IF Contact.GET(ContactNo) THEN BEGIN
        IF Contact.Type = Contact.Type::Company THEN
          EXIT(ChangingCompanyIsAllowed(ContactNo) OR NOT MarketingSetup."Industry Groups")
        ELSE
          EXIT(ChangingPersonIsAllowed(ContactNo) OR NOT MarketingSetup."Industry Groups");
      END;
    END;

    [External]
    PROCEDURE ContactTradenameIsEditable@1100525014(ContactNo@1100528405 : Code[20]) : Boolean;
    VAR
      Contact@1100528402 : Record 5050;
    BEGIN
      MarketingSetup.GET;
      IF Contact.GET(ContactNo) THEN BEGIN
        IF Contact.Type = Contact.Type::Company THEN
          EXIT(ChangingCompanyIsAllowed(ContactNo) OR NOT MarketingSetup.Tradenames)
        ELSE
          EXIT(ChangingPersonIsAllowed(ContactNo) OR NOT MarketingSetup.Tradenames);
      END;
    END;

    [External]
    PROCEDURE ContactMailingGroupIsEditable@1100528419(ContactNo@1100528405 : Code[20]) : Boolean;
    VAR
      Contact@1100528402 : Record 5050;
    BEGIN
      MarketingSetup.GET;
      IF Contact.GET(ContactNo) THEN BEGIN
        IF Contact.Type = Contact.Type::Company THEN
          EXIT(ChangingCompanyIsAllowed(ContactNo) OR NOT MarketingSetup."Mailing Groups")
        ELSE
          EXIT(ChangingPersonIsAllowed(ContactNo) OR NOT MarketingSetup."Mailing Groups");
      END;
    END;

    [External]
    PROCEDURE ContactCommentIsEditable@1100528420(ContactNo@1100528400 : Code[20]) : Boolean;
    BEGIN
      MarketingSetup.GET;
      EXIT(ChangingContactIsAllowed(ContactNo) OR NOT MarketingSetup.Comments);
    END;

    [External]
    PROCEDURE PersonFunctionGroupIsEditable@1100528422(ContactNo@1100528400 : Code[20]) : Boolean;
    BEGIN
      MarketingSetup.GET;
      EXIT(ChangingPersonIsAllowed(ContactNo) OR NOT MarketingSetup."Function Groups");
    END;

    [External]
    PROCEDURE SalesPersonByContactIsEditable@1100528421(ContactNo@1100528400 : Code[20]) : Boolean;
    VAR
      ContactBusinessRelation@1100528401 : Record 5054;
    BEGIN
      MarketingSetup.GET;

      ContactBusinessRelation.SETCURRENTKEY("Link to Table", "Contact No.");
      ContactBusinessRelation.SETRANGE("Contact No.", ContactNo);

      ContactBusinessRelation.SETRANGE("Link to Table", ContactBusinessRelation."Link to Table"::Customer);
      IF ContactBusinessRelation.FINDSET THEN
        REPEAT
          IF NOT ChangingCustomerIsAllowed(ContactBusinessRelation."No.") AND
             MarketingSetup.Salespersons
          THEN
            EXIT(FALSE);
        UNTIL ContactBusinessRelation.NEXT = 0;

      ContactBusinessRelation.SETRANGE("Link to Table", ContactBusinessRelation."Link to Table"::Vendor);
      IF ContactBusinessRelation.FINDSET THEN
        REPEAT
          IF NOT ChangingVendorIsAllowed(ContactBusinessRelation."No.") AND
             MarketingSetup.Salespersons
          THEN
            EXIT(FALSE);
        UNTIL ContactBusinessRelation.NEXT = 0;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CheckGLAccBalanceInRelatedComp@1210190013(GLAccount@1210190002 : Record 15;CompanyName@1210190001 : Text[30]);
    VAR
      GLAccount2@1210190000 : Record 15;
    BEGIN
      GLAccount2.CHANGECOMPANY(CompanyName);
      IF NOT GLAccount2.GET(GLAccount."No.") THEN
        EXIT;

      IF GLAccount2."Account Type" = GLAccount2."Account Type"::Posting THEN BEGIN
        GLAccount2.CALCFIELDS(Balance);
        GLAccount2.TESTFIELD(Balance, 0);
      END;
    END;

    [External]
    PROCEDURE ChangeOfFieldsIsAllowed@1100528700(RecRef@1100528700 : RecordRef;OldRecRef@1100528701 : RecordRef;ExceptionFields@1210190000 : ARRAY [20] OF Integer) : Boolean;
    VAR
      NumberOfFields@1100528703 : Integer;
      FldRef@1100528704 : FieldRef;
      OldFldRef@1100528705 : FieldRef;
      I@1100528706 : Integer;
      J@1210190001 : Integer;
      Check@1210190002 : Boolean;
    BEGIN
      // Use for customers and vendors only. This check is additional to the check on the page/form.
      //IF NOT CentralActiveLocalInput THEN //C016112.o
      IF NOT CentralActiveLocalInput(DATABASE::"Marketing Setup") THEN //C016112.n
        EXIT(TRUE);

      IF ContactExistsCentral(RecRef) THEN BEGIN
        NumberOfFields := OldRecRef.FIELDCOUNT;
        FOR I := 1 TO NumberOfFields DO BEGIN
          FldRef := RecRef.FIELDINDEX(I);
          OldFldRef := OldRecRef.FIELDINDEX(I);
          IF FldRef.VALUE <> OldFldRef.VALUE THEN BEGIN
            Check := TRUE;
            FOR J := 1 TO ARRAYLEN(ExceptionFields) DO BEGIN
              IF FldRef.NUMBER = ExceptionFields[J] THEN
                Check := FALSE;
            END;
            IF Check THEN
              IF NOT FieldInputAllowed(RecRef.NUMBER, FldRef.NUMBER) THEN
                EXIT(FALSE);
          END;
        END;
      END;

      EXIT(TRUE);
    END;

    [External]
    PROCEDURE InsertingSalesPriceIsAllowed@1100528427() : Boolean;
    BEGIN
      IF NOT CentralActiveLocalInputOfItemData(InventorySetup, LeadingCompany) THEN
        EXIT(TRUE);
      IF NOT InventorySetup."Sales Prices" THEN
        EXIT(TRUE);
      EXIT(InventorySetup."Allow Decentral Sales Prices");
    END;

    [External]
    PROCEDURE ChangingSalesPriceIsAllowed@1100528425(SalesPrice@1100528400 : Record 7002) : Boolean;
    BEGIN
      IF NOT CentralActiveLocalInputOfItemData(InventorySetup, LeadingCompany) THEN
        EXIT(TRUE);
      IF NOT InventorySetup."Sales Prices" THEN
        EXIT(TRUE);

      IF SalesPrice.CHANGECOMPANY(LeadingCompany) THEN
        IF FPSLicenseManagement.LicenseAndReadPermissionForTable(SalesPrice) THEN
          IF NOT SalesPrice.FIND('=') THEN
            EXIT(TRUE);
    END;

    [External]
    PROCEDURE InsertingSalesLineDiscountIsAllowed@1100528430() : Boolean;
    BEGIN
      EXIT(InsertingSalesPriceIsAllowed);
    END;

    [External]
    PROCEDURE ChangingSalesLineDiscountIsAllowed@1100528429(SalesLineDiscount@1100528400 : Record 7004) : Boolean;
    BEGIN
      IF NOT CentralActiveLocalInputOfItemData(InventorySetup, LeadingCompany) THEN
        EXIT(TRUE);
      IF NOT InventorySetup."Sales Prices" THEN
        EXIT(TRUE);

      IF SalesLineDiscount.CHANGECOMPANY(LeadingCompany) THEN
        IF FPSLicenseManagement.LicenseAndReadPermissionForTable(SalesLineDiscount) THEN
          IF NOT SalesLineDiscount.FIND('=') THEN
            EXIT(TRUE);
    END;

    [External]
    PROCEDURE InsertingPurchasePriceIsAllowed@1100528431() : Boolean;
    BEGIN
      IF NOT CentralActiveLocalInputOfItemData(InventorySetup, LeadingCompany) THEN
        EXIT(TRUE);
      IF NOT InventorySetup."Purchase Prices" THEN
        EXIT(TRUE);
      EXIT(InventorySetup."Allow Decentral Purch. Prices");
    END;

    [External]
    PROCEDURE ChangingPurchasePriceIsAllowed@1100528428(PurchasePrice@1100528400 : Record 7012) : Boolean;
    BEGIN
      IF NOT CentralActiveLocalInputOfItemData(InventorySetup, LeadingCompany) THEN
        EXIT(TRUE);
      IF NOT InventorySetup."Purchase Prices" THEN
        EXIT(TRUE);

      IF PurchasePrice.CHANGECOMPANY(LeadingCompany) THEN
        IF FPSLicenseManagement.LicenseAndReadPermissionForTable(PurchasePrice) THEN
          IF NOT PurchasePrice.FIND('=') THEN
            EXIT(TRUE);
    END;

    [External]
    PROCEDURE InsertingPurchaseLineDiscountIsAllowed@1100528436() : Boolean;
    BEGIN
      EXIT(InsertingPurchasePriceIsAllowed);
    END;

    [External]
    PROCEDURE ChangingPurchaseLineDiscountIsAllowed@1100528435(PurchaseLineDiscount@1100528400 : Record 7014) : Boolean;
    BEGIN
      IF NOT CentralActiveLocalInputOfItemData(InventorySetup, LeadingCompany) THEN
        EXIT(TRUE);
      IF NOT InventorySetup."Purchase Prices" THEN
        EXIT(TRUE);

      IF PurchaseLineDiscount.CHANGECOMPANY(LeadingCompany) THEN
        IF FPSLicenseManagement.LicenseAndReadPermissionForTable(PurchaseLineDiscount) THEN
          IF NOT PurchaseLineDiscount.FIND('=') THEN
            EXIT(TRUE);
    END;

    LOCAL PROCEDURE CentralActiveLocalInputOfItemData@1100528432(VAR InventorySetup@1100528400 : Record 313;VAR LeadingCompany@1100528402 : Text[50]) : Boolean;
    BEGIN
      InventorySetup.GET;
      IF NOT InventorySetup."Central Management" THEN
        EXIT(FALSE);

      LeadingCompany := CompRelationRec.GetLeadingCompany(DATABASE::"Inventory Setup", InventorySetup."Central Management");
      EXIT(COMPANYNAME <> LeadingCompany);
    END;

    [External]
    PROCEDURE UpdateSalesPrice@1100525004(SalesPrice@1100528402 : Record 7002;Operation@1100525001 : Integer;OldSalesPrice@1100525000 : Record 7002);
    VAR
      InventorySetup@1100525002 : Record 313;
      SalesPrice2@1100525004 : Record 7002;
      OldRecRef@1100528400 : RecordRef;
      NewRecRef@1100528401 : RecordRef;
    BEGIN
      InventorySetup.GET;
      IF NOT InventorySetup."Central Management" OR
         NOT InventorySetup."Navision-Items" OR
         NOT InventorySetup."Sales Prices"
      THEN
        EXIT;

      SetCompRelRecFilter(2);
      IF CompRelationRec.FINDSET THEN BEGIN
        REPEAT
          SalesPrice2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:
              BEGIN
                SalesPrice2.COPY(OldSalesPrice);
                SalesPrice2.RESET;
                IF SalesPrice2.FIND THEN BEGIN
                  SalesPrice2.SetSkipCentralDataMgtInOnRename(TRUE);
                  SalesPrice2.RENAME(
                    SalesPrice."Item No.", SalesPrice."Sales Type", SalesPrice."Sales Code",
                    SalesPrice."Starting Date", SalesPrice."Currency Code", SalesPrice."Variant Code",
                    SalesPrice."Unit of Measure Code", SalesPrice."Minimum Quantity");
                END;
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                SalesPrice2.COPY(SalesPrice);
                SalesPrice2.RESET;
                IF SalesPrice2.FIND THEN BEGIN
                  OldRecRef.GETTABLE(SalesPrice2);
                  SalesPrice2.TRANSFERFIELDS(SalesPrice, FALSE);
                  NewRecRef.GETTABLE(SalesPrice2);
                  ExcludeFieldsFromExchange(OldRecRef, NewRecRef, TRUE);
                  NewRecRef.SETTABLE(SalesPrice2);
                  SalesPrice2.MODIFY(FALSE);
                END ELSE
                  SalesPrice2.INSERT;
              END;
            4:
              BEGIN
                SalesPrice2.COPY(SalesPrice);
                SalesPrice2.RESET;
                IF SalesPrice2.FIND THEN
                  SalesPrice2.DELETE;
              END;
          END;
        UNTIL (CompRelationRec.NEXT = 0);
      END;
    END;

    [External]
    PROCEDURE UpdateSalesLineDiscount@1100525005(SalesLineDiscount@1100528400 : Record 7004;Operation@1100525001 : Integer;OldSalesLineDiscount@1100525000 : Record 7004);
    VAR
      InventorySetup@1100525002 : Record 313;
      SalesLineDiscount2@1100525004 : Record 7004;
      OldRecRef@1100528401 : RecordRef;
      NewRecRef@1100528402 : RecordRef;
    BEGIN
      InventorySetup.GET;
      IF NOT InventorySetup."Central Management" OR
         NOT InventorySetup."Navision-Items" OR
         NOT InventorySetup."Sales Prices"
      THEN
        EXIT;

      SetCompRelRecFilter(2);
      IF CompRelationRec.FINDSET THEN BEGIN
        REPEAT
          SalesLineDiscount2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:
              BEGIN
                SalesLineDiscount2.COPY(OldSalesLineDiscount);
                SalesLineDiscount2.RESET;
                IF SalesLineDiscount2.FIND THEN BEGIN
                  SalesLineDiscount2.SetSkipCentralDataMgtInOnRename(TRUE);
                  SalesLineDiscount2.RENAME(
                    SalesLineDiscount.Type, SalesLineDiscount.Code, SalesLineDiscount."Sales Type",
                    SalesLineDiscount."Sales Code", SalesLineDiscount."Starting Date",
                    SalesLineDiscount."Currency Code", SalesLineDiscount."Variant Code",
                    SalesLineDiscount."Unit of Measure Code", SalesLineDiscount."Minimum Quantity");
                END;
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                SalesLineDiscount2.COPY(SalesLineDiscount);
                SalesLineDiscount2.RESET;
                IF SalesLineDiscount2.FIND THEN BEGIN
                  OldRecRef.GETTABLE(SalesLineDiscount2);
                  SalesLineDiscount2.TRANSFERFIELDS(SalesLineDiscount, FALSE);
                  NewRecRef.GETTABLE(SalesLineDiscount2);
                  ExcludeFieldsFromExchange(OldRecRef, NewRecRef, TRUE);
                  NewRecRef.SETTABLE(SalesLineDiscount2);
                  SalesLineDiscount2.MODIFY(FALSE);
                END ELSE
                  SalesLineDiscount2.INSERT;
              END;
            4:
              BEGIN
                SalesLineDiscount2.COPY(SalesLineDiscount);
                SalesLineDiscount2.RESET;
                IF SalesLineDiscount2.FIND THEN
                  SalesLineDiscount2.DELETE;
              END;
          END;
        UNTIL (CompRelationRec.NEXT = 0);
      END;
    END;

    [External]
    PROCEDURE UpdatePurchasePrice@1100525007(PurchasePrice@1100528400 : Record 7012;Operation@1100525001 : Integer;OldPurchasePrice@1100525000 : Record 7012);
    VAR
      InventorySetup@1100525002 : Record 313;
      PurchasePrice2@1100525004 : Record 7012;
      OldRecRef@1100528401 : RecordRef;
      NewRecRef@1100528402 : RecordRef;
    BEGIN
      InventorySetup.GET;
      IF NOT InventorySetup."Central Management" OR
         NOT InventorySetup."Navision-Items" OR
         NOT InventorySetup."Purchase Prices"
      THEN
        EXIT;

      SetCompRelRecFilter(2);
      IF CompRelationRec.FINDSET THEN BEGIN
        REPEAT
          PurchasePrice2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:
              BEGIN
                PurchasePrice2.COPY(OldPurchasePrice);
                PurchasePrice2.RESET;
                IF PurchasePrice2.FIND THEN BEGIN
                  PurchasePrice2.SetSkipCentralDataMgtInOnRename(TRUE);
                  PurchasePrice2.RENAME(
                    PurchasePrice."Item No.", PurchasePrice."Vendor No.", PurchasePrice."Starting Date",
                    PurchasePrice."Currency Code", PurchasePrice."Variant Code", PurchasePrice."Unit of Measure Code",
                    PurchasePrice."Minimum Quantity");
                END;
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                PurchasePrice2.COPY(PurchasePrice);
                PurchasePrice2.RESET;
                IF PurchasePrice2.FIND THEN BEGIN
                  OldRecRef.GETTABLE(PurchasePrice2);
                  PurchasePrice2.TRANSFERFIELDS(PurchasePrice, FALSE);
                  NewRecRef.GETTABLE(PurchasePrice2);
                  ExcludeFieldsFromExchange(OldRecRef, NewRecRef, TRUE);
                  NewRecRef.SETTABLE(PurchasePrice2);
                  PurchasePrice2.MODIFY(FALSE);
                END ELSE
                  PurchasePrice2.INSERT;
              END;
            4:
              BEGIN
                PurchasePrice2.COPY(PurchasePrice);
                PurchasePrice2.RESET;
                IF PurchasePrice2.FIND THEN
                  PurchasePrice2.DELETE;
              END;
          END;
        UNTIL (CompRelationRec.NEXT = 0);
      END;
    END;

    [External]
    PROCEDURE UpdatePurchaseLineDiscount@1100525008(PurchaseLineDiscount@1100528400 : Record 7014;Operation@1100525001 : Integer;OldPurchaseLineDiscount@1100525000 : Record 7014);
    VAR
      InventorySetup@1100525002 : Record 313;
      PurchaseLineDiscount2@1100525004 : Record 7014;
      OldRecRef@1100528401 : RecordRef;
      NewRecRef@1100528402 : RecordRef;
    BEGIN
      InventorySetup.GET;
      IF NOT InventorySetup."Central Management" OR
         NOT InventorySetup."Navision-Items" OR
         NOT InventorySetup."Purchase Prices"
      THEN
        EXIT;

      SetCompRelRecFilter(2);
      IF CompRelationRec.FINDSET THEN BEGIN
        REPEAT
          PurchaseLineDiscount2.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:
              BEGIN
                PurchaseLineDiscount2.COPY(OldPurchaseLineDiscount);
                PurchaseLineDiscount2.RESET;
                IF PurchaseLineDiscount2.FIND THEN BEGIN
                  PurchaseLineDiscount2.SetSkipCentralDataMgtInOnRename(TRUE);
                  PurchaseLineDiscount2.RENAME(
                    PurchaseLineDiscount."Item No.", PurchaseLineDiscount."Vendor No.", PurchaseLineDiscount."Starting Date",
                    PurchaseLineDiscount."Currency Code", PurchaseLineDiscount."Variant Code", PurchaseLineDiscount."Unit of Measure Code",
                    PurchaseLineDiscount."Minimum Quantity");
                END;
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                PurchaseLineDiscount2.COPY(PurchaseLineDiscount);
                PurchaseLineDiscount2.RESET;
                IF PurchaseLineDiscount2.FIND THEN BEGIN
                  OldRecRef.GETTABLE(PurchaseLineDiscount2);
                  PurchaseLineDiscount2.TRANSFERFIELDS(PurchaseLineDiscount, FALSE);
                  NewRecRef.GETTABLE(PurchaseLineDiscount2);
                  ExcludeFieldsFromExchange(OldRecRef, NewRecRef, TRUE);
                  NewRecRef.SETTABLE(PurchaseLineDiscount2);
                  PurchaseLineDiscount2.MODIFY(FALSE);
                END ELSE
                  PurchaseLineDiscount2.INSERT;
              END;
            4:
              BEGIN
                PurchaseLineDiscount2.COPY(PurchaseLineDiscount);
                PurchaseLineDiscount2.RESET;
                IF PurchaseLineDiscount2.FIND THEN
                  PurchaseLineDiscount2.DELETE;
              END;
          END;
        UNTIL (CompRelationRec.NEXT = 0);
      END;
    END;

    [External]
    PROCEDURE TableNoSetup@1100525019(TableNo@1100525000 : Integer) SetupTableNo : Integer;
    BEGIN
      //C016112
      CASE TableNo OF
        15:
          SetupTableNo := DATABASE::"General Ledger Setup";
        27:
          SetupTableNo := DATABASE::"Inventory Setup";
        ELSE
          SetupTableNo := DATABASE::"Marketing Setup";
      END;
    END;

    [External]
    PROCEDURE EditSubcontPortUser@1100528612(ICompanyName@1100528602 : Text[50];VAR IContact@1100528600 : Record 5050);
    VAR
      SubcontPortUser@1100528601 : Record 11126401;
    BEGIN
      IF ICompanyName <> '' THEN
        SubcontPortUser.CHANGECOMPANY(ICompanyName);
      IF NOT FPSLicenseManagement.LicenseAndReadPermissionForTable(SubcontPortUser) THEN
        EXIT;
      SubcontPortUser.SETRANGE("Primary Contact No.", IContact."No.");
      IF SubcontPortUser.FINDSET THEN
        REPEAT
          IF (SubcontPortUser.Name <> IContact.Name) OR (SubcontPortUser."E-Mail" <> IContact."E-Mail") THEN BEGIN
            SubcontPortUser.Name := IContact.Name;
            SubcontPortUser."E-Mail" := IContact."E-Mail";
            SubcontPortUser.MODIFY;
          END;
        UNTIL SubcontPortUser.NEXT = 0;
    END;

    [External]
    PROCEDURE EditServPortUser@1100528620(ICompanyName@1100528602 : Text[50];VAR IContact@1100528600 : Record 5050);
    VAR
      ServPortUser@1100528601 : Record 11126063;
    BEGIN
      IF ICompanyName <> '' THEN
        ServPortUser.CHANGECOMPANY(ICompanyName);
      IF NOT FPSLicenseManagement.LicenseAndReadPermissionForTable(ServPortUser) THEN
        EXIT;
      ServPortUser.SETRANGE("Primary Contact No.", IContact."No.");
      IF ServPortUser.FINDSET THEN
        REPEAT
          IF (ServPortUser.Name <> IContact.Name) OR
             (ServPortUser."E-Mail" <> IContact."E-Mail") OR
             (ServPortUser."Phone No." <> IContact."Phone No.")
          THEN BEGIN
            ServPortUser.Name := IContact.Name;
            ServPortUser."Phone No." := IContact."Phone No.";
            ServPortUser."E-Mail" := IContact."E-Mail";
            ServPortUser.MODIFY;
          END;
        UNTIL ServPortUser.NEXT = 0;
    END;

    [External]
    PROCEDURE UpdateDefaultDimension@1100528625(VAR DefaultDimension@1100528602 : Record 352;Operation@1100528601 : Integer;OldDefaultDimension@1100528600 : Record 352);
    VAR
      NewDefaultDimension@1100528603 : Record 352;
      Dimension@1100528604 : Record 348;
    BEGIN
      MarketingSetup.GET;
      IF (DefaultDimension."Table ID" <> DATABASE::Customer) OR
         NOT MarketingSetup."Central Management" OR
         NOT MarketingSetup."Customer Default Dimensions"
      THEN
        EXIT;

      SetCompRelRecFilter(1);
      IF CompRelationRec.FINDSET THEN
        REPEAT
          NewDefaultDimension.CHANGECOMPANY(CompRelationRec.Company);
          Dimension.CHANGECOMPANY(CompRelationRec.Company);
          CASE Operation OF
            3:
              BEGIN
                IF Dimension.GET(DefaultDimension."Dimension Code") THEN BEGIN
                  NewDefaultDimension.COPY(OldDefaultDimension);
                  NewDefaultDimension.RESET;
                  IF NewDefaultDimension.FIND THEN
                    NewDefaultDimension.RENAME(DefaultDimension."Table ID", DefaultDimension."No.", DefaultDimension."Dimension Code");
                END;
              END;
          END;
          CASE Operation OF
            1,2,3:
              BEGIN
                IF Dimension.GET(DefaultDimension."Dimension Code") THEN BEGIN
                  NewDefaultDimension.COPY(DefaultDimension);
                  NewDefaultDimension.RESET;
                  IF NOT NewDefaultDimension.FIND THEN BEGIN
                    NewDefaultDimension.INSERT;
                  END ELSE BEGIN
                    NewDefaultDimension.TRANSFERFIELDS(DefaultDimension, FALSE);
                    NewDefaultDimension.MODIFY;
                  END;
                END;
              END;
            4:
              BEGIN
                NewDefaultDimension.COPY(DefaultDimension);
                NewDefaultDimension.RESET;
                IF NewDefaultDimension.FIND THEN
                  NewDefaultDimension.DELETE;
              END;
          END;
        UNTIL CompRelationRec.NEXT = 0;
    END;

    [External]
    PROCEDURE DefaultDimensionIsEditable@1100528628(TableID@1100528600 : Integer) : Boolean;
    BEGIN
      //IF NOT CentralActiveLocalInput THEN //C016112.o
      IF NOT CentralActiveLocalInput(TableNoSetup(TableID)) THEN //C016112.n
        EXIT(TRUE);

      CASE TableID OF
        DATABASE::Customer:
          IF NOT MarketingSetup."Customer Default Dimensions" THEN
            EXIT(TRUE);
      ELSE
        EXIT(TRUE);
      END;
    END;

    [External]
    PROCEDURE VendorCategoryContactIsEditable@1100529600(ContactNo@1100528400 : Code[20]) : Boolean;
    VAR
      Contact@1100529600 : Record 5050;
    BEGIN
      //DP01725
      IF ContactNo = '' THEN
        EXIT(FALSE);
      IF NOT Contact.GET(ContactNo) THEN
        EXIT(FALSE);
      IF Contact.Type <> Contact.Type::Company THEN
        EXIT(FALSE);
      MarketingSetup.GET;
      EXIT(ChangingCompanyIsAllowed(ContactNo) OR NOT MarketingSetup."Vendor Categories (Contact)");
    END;

    [External]
    PROCEDURE SetBlockAction@1100528203(iBlockAction@1100528201 : ARRAY [5] OF Boolean) : Decimal;
    VAR
      LoopCount@1100528200 : Integer;
    BEGIN
      FOR LoopCount := 1 TO 5 DO
        BlockAction[LoopCount] := iBlockAction[LoopCount];
    END;

    [External]
    PROCEDURE CheckBeforeDeleteVendorBank@1100527550(VendorBankAccount@1100527550 : Record 288) : Boolean;
    VAR
      VendorLedgerEntry@1100527553 : Record 25;
    BEGIN
      MarketingSetup.GET;
      IF NOT MarketingSetup."Central Management" OR NOT MarketingSetup.Vendors THEN
        EXIT(TRUE);
      SetCompRelRecFilter(1);
      IF CompRelationRec.FINDSET THEN BEGIN
        VendorLedgerEntry.SETRANGE("Vendor No.", VendorBankAccount."Vendor No.");
        VendorLedgerEntry.SETRANGE("Recipient Bank Account", VendorBankAccount.Code);
        VendorLedgerEntry.SETRANGE(Open, TRUE);
        REPEAT
          VendorLedgerEntry.CHANGECOMPANY(CompRelationRec.Company);
          IF NOT VendorLedgerEntry.ISEMPTY THEN
            EXIT(FALSE);
        UNTIL CompRelationRec.NEXT = 0;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE OverwriteTemplateFieldsFromCentral@1100527551(VariantDecentral@1100527551 : Variant;VariantCentral@1100527555 : Variant;DecentralCompany@1100527556 : Text[80]) : Boolean;
    VAR
      FieldRef@1100527552 : FieldRef;
      FieldRefCentral@1100527558 : FieldRef;
      CentralManagementFieldSetup@1100527557 : Record 11020404;
      RecRefDecentral@1100527550 : RecordRef;
      RecRefCentral@1100527553 : RecordRef;
    BEGIN
      IF NOT VariantDecentral.ISRECORD OR NOT VariantCentral.ISRECORD THEN
        EXIT;
      RecRefDecentral.GETTABLE(VariantDecentral);
      RecRefDecentral.CHANGECOMPANY(DecentralCompany);
      RecRefCentral.GETTABLE(VariantCentral);
      IF RecRefDecentral.NUMBER <> RecRefCentral.NUMBER THEN
        EXIT;
      CentralManagementFieldSetup.SETRANGE("Table ID", RecRefDecentral.NUMBER);
      CentralManagementFieldSetup.SETRANGE(Central, TRUE);
      IF CentralManagementFieldSetup.FINDSET THEN
        REPEAT
          CentralManagementFieldSetup.CALCFIELDS("Field Caption");
          IF CentralManagementFieldSetup."Field Caption" <> '' THEN BEGIN
            FieldRefCentral := RecRefCentral.FIELD(CentralManagementFieldSetup."Field ID");
            FieldRef := RecRefDecentral.FIELD(CentralManagementFieldSetup."Field ID");
            FieldRef.VALUE := FieldRefCentral.VALUE;
          END;
        UNTIL CentralManagementFieldSetup.NEXT = 0;
      RecRefDecentral.MODIFY(TRUE);
    END;

    BEGIN
    {
      4PS, 29-04-10, Permissions added for table 18,23, 5050
      4PS, 30-10-2012, call C002428, initialization of a single decentral company now possible
           and lots of minor consistency changes
      4PS, 09-12-13, C011471, Excluding fields added for Customer Bank Account.
      FIXME: Permissions=...TableData 2000000006=r;
      LAHE 130508 Customer."Price List Code"
      141014 ITERO.DL IME196 Field in vendor card
    }
    END.
  }
}

