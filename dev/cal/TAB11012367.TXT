OBJECT Table 11012367 Estimate Purch Act Help Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnModify=BEGIN
               Changed := TRUE;
             END;

    CaptionML=[ENU=Estimate Purch. Action Help Line;
               NOR=Kalkyle Í innkj›p Hjelprad for handling;
               SVE=Kalkyl Í ink”p Hj„lprad f”r †tg„rd];
  }
  FIELDS
  {
    { 10  ;   ;Estimate No.        ;Code20        ;TableRelation=Estimate.No.;
                                                   CaptionML=[ENU=Estimate No.;
                                                              NOR=Kalkylenr;
                                                              SVE=Kalkylnr];
                                                   Editable=No }
    { 20  ;   ;Sub-Estimate No.    ;Code20        ;TableRelation=Sub-Estimate."Sub-Estimate No." WHERE (Estimate No.=FIELD(Estimate No.));
                                                   CaptionML=[ENU=Sub-Estimate No.;
                                                              NOR=Delkalkylenummer;
                                                              SVE=Delkalkylnr] }
    { 25  ;   ;Part Group          ;Code10        ;TableRelation="Estimate Part"."Part Group" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                     Sub-Estimate No.=FIELD(Sub-Estimate No.));
                                                   CaptionML=[ENU=Part Group;
                                                              NOR=Del gruppe;
                                                              SVE=Delgrupp] }
    { 30  ;   ;Part                ;Code20        ;TableRelation="Estimate Part".Part WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                             Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                             Part Group=FIELD(Part Group));
                                                   CaptionML=[ENU=Part;
                                                              NOR=Del;
                                                              SVE=Del] }
    { 40  ;   ;Estimate Line       ;Integer       ;CaptionML=[ENU=Estimate Line;
                                                              NOR=Kalkylerad;
                                                              SVE=Uppskattningsrad] }
    { 50  ;   ;Recipe Line         ;Integer       ;CaptionML=[ENU=Recipe Line;
                                                              NOR=Malrad;
                                                              SVE=Mallrad] }
    { 51  ;   ;Recipe              ;Code20        ;TableRelation="Base Recipe".No. WHERE (Recipe Group=FIELD(Recipe Group));
                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Recipe;
                                                              NOR=Mal;
                                                              SVE=Mall] }
    { 52  ;   ;Recipe Group        ;Code10        ;TableRelation="Recipe Group".No.;
                                                   CaptionML=[ENU=Recipe Group;
                                                              NOR=Maltype;
                                                              SVE=Malltyp] }
    { 55  ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              NOR=Linjenr.;
                                                              SVE=Radnummer] }
    { 60  ;   ;Description         ;Text100       ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 70  ;   ;Cost Object         ;Code20        ;TableRelation=IF (Cost Type=CONST(" ")) "Dimension Value".Code WHERE (Global Dimension No.=CONST(2),
                                                                                                                         Cost Type=FILTER(Labor..Plant))
                                                                                                                         ELSE IF (Cost Type=CONST(Labor)) "Dimension Value".Code WHERE (Global Dimension No.=CONST(2),
                                                                                                                                                                                        Cost Type=FILTER(Labor))
                                                                                                                                                                                        ELSE IF (Cost Type=CONST(Material)) "Dimension Value".Code WHERE (Global Dimension No.=CONST(2),
                                                                                                                                                                                                                                                          Cost Type=FILTER(Material))
                                                                                                                                                                                                                                                          ELSE IF (Cost Type=CONST(Subcontracting)) "Dimension Value".Code WHERE (Global Dimension No.=CONST(2),
                                                                                                                                                                                                                                                                                                                                  Cost Type=FILTER(Subcontracting))
                                                                                                                                                                                                                                                                                                                                  ELSE IF (Cost Type=CONST(Plant)) "Dimension Value".Code WHERE (Global Dimension No.=CONST(2),
                                                                                                                                                                                                                                                                                                                                                                                                 Cost Type=FILTER(Plant))
                                                                                                                                                                                                                                                                                                                                                                                                 ELSE IF (Cost Type=CONST(Sundry)) "Dimension Value".Code WHERE (Global Dimension No.=CONST(2),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Cost Type=FILTER(Sundry));
                                                   OnValidate=VAR
                                                                DimValRec@1210190000 : Record 349;
                                                                DimMgt@1210190001 : Codeunit 408;
                                                              BEGIN
                                                                IF "Cost Object" = '' THEN BEGIN
                                                                  IF CurrFieldNo <> 0 THEN
                                                                    "Cost Type" := "Cost Type"::" ";
                                                                END ELSE BEGIN
                                                                  DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, TRUE, '');
                                                                  "Cost Type" := DimValRec."Cost Type" + 1;
                                                                  "Cost Component" := DimValRec."Cost Component";
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Global Dimension 2 Code;
                                                              NOR=Kostnadsobjekt;
                                                              SVE=Kostnadsobjekt];
                                                   CaptionClass='1,1,2' }
    { 71  ;   ;Cost Type           ;Option        ;CaptionML=[ENU=Cost Type;
                                                              NOR=Kosttype;
                                                              SVE=Kostnadstyp];
                                                   OptionCaptionML=ENU=" ,Labor,Material,Subcontracting,Plant,Sundry,***";
                                                   OptionString=[ ,Labor,Material,Subcontracting,Plant,Sundry,More];
                                                   Editable=No }
    { 75  ;   ;Compressed          ;Boolean       ;CaptionML=[ENU=Compressed;
                                                              NOR=Komprimert;
                                                              SVE=Komprimerad] }
    { 80  ;   ;Quantity            ;Decimal       ;CaptionML=[ENU=Quantity;
                                                              NOR=Antall;
                                                              SVE=Antal];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 85  ;   ;Frequency           ;Decimal       ;CaptionML=[ENU=Frequency;
                                                              NOR=Forekomst;
                                                              SVE=Frekvens];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 86  ;   ;Cumulative Quantity ;Decimal       ;CaptionML=[ENU=Cumulative Quantity;
                                                              NOR=Akkumulert antall;
                                                              SVE=Ackumulerat antal];
                                                   DecimalPlaces=0:5 }
    { 90  ;   ;Unit of Measure     ;Code10        ;TableRelation="Unit of Measure".Code;
                                                   OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Unit of Measure") THEN
                                                                  IF "Unit of Measure" <>  xRec."Unit of Measure" THEN
                                                                    CheckItemUnitConversion(Rec, xRec);
                                                              END;

                                                   OnLookup=BEGIN
                                                              HandleLookupUnit;
                                                            END;

                                                   CaptionML=[ENU=Unit of Measure;
                                                              NOR=M†leenhet;
                                                              SVE=M†ttenhet] }
    { 91  ;   ;Unit Factor         ;Decimal       ;InitValue=1;
                                                   CaptionML=[ENU=Unit Factor;
                                                              NOR=Enhetsfaktor;
                                                              SVE=Enhetsfaktor];
                                                   Editable=No }
    { 95  ;   ;Norm Group          ;Code10        ;TableRelation="Norm Group".Code;
                                                   CaptionML=[ENU=Norm Group;
                                                              NOR=Normgruppe;
                                                              SVE=Normgrupp] }
    { 96  ;   ;Sub Operation Code  ;Code20        ;TableRelation="Sub Operation".Code;
                                                   CaptionML=[ENU=Sub Operation Code;
                                                              NOR=Underinnsatskode;
                                                              SVE=Underinsatskod] }
    { 100 ;   ;Norm                ;Decimal       ;OnValidate=BEGIN
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=[ENU=Norm;
                                                              NOR=Norm;
                                                              SVE=Norm];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 110 ;   ;Material Price      ;Decimal       ;OnValidate=BEGIN
                                                                CalculateDiscount;
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=[ENU=Material Price;
                                                              NOR=Materialepris;
                                                              SVE=Materialpris];
                                                   AutoFormatType=2 }
    { 115 ;   ;Discount %          ;Decimal       ;OnValidate=BEGIN
                                                                CalculateNetPrice;
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=[ENU=Discount %;
                                                              NOR=Rabatt-%;
                                                              SVE=Rabatt %];
                                                   DecimalPlaces=0:5 }
    { 120 ;   ;Gross Price         ;Decimal       ;OnValidate=BEGIN
                                                                CalculateNetPrice;
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=[ENU=Gross Price;
                                                              NOR=Bruttopris;
                                                              SVE=Bruttopris];
                                                   AutoFormatType=2 }
    { 130 ;   ;Subcontracting Price;Decimal       ;OnValidate=BEGIN
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=[ENU=Subcontracting Price;
                                                              NOR=Underentrepen›rpris;
                                                              SVE=Underentreprenadspris];
                                                   AutoFormatType=2 }
    { 140 ;   ;Plant Price         ;Decimal       ;OnValidate=BEGIN
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=[ENU=Plant Price;
                                                              NOR=Maskinpris;
                                                              SVE=Maskinpris];
                                                   AutoFormatType=2 }
    { 150 ;   ;Rate Code           ;Code10        ;TableRelation="Estimate Rate"."Rate Code" WHERE (Estimate No.=FIELD(Estimate No.));
                                                   OnValidate=VAR
                                                                RateRec@1210190000 : Record 11012160;
                                                              BEGIN
                                                                IF RateRec.GET("Estimate No.","Rate Code") THEN BEGIN
                                                                  Rate := RateRec."Cost Rate";
                                                                  "Rate Type" := RateRec."Rate Type";
                                                                  "Team Size" := RateRec."Team Size";
                                                                  IF ("Rate Type" <> xRec."Rate Type") THEN BEGIN
                                                                    IF "Rate Type" = "Rate Type"::Hours THEN
                                                                      Norm := Norm / 60
                                                                    ELSE
                                                                      Norm := Norm * 60;
                                                                  END;
                                                                  IF ("Team Size" <> xRec."Team Size") THEN BEGIN
                                                                    IF "Team Size" <> 0 THEN
                                                                      Norm := Norm / "Team Size";
                                                                    IF xRec."Team Size" <> 0 THEN
                                                                      Norm := Norm * xRec."Team Size";
                                                                  END;
                                                                END;
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=[ENU=Rate Code;
                                                              NOR=Avgiftskode;
                                                              SVE=Avgiftskod] }
    { 151 ;   ;Rate                ;Decimal       ;CaptionML=[ENU=Rate;
                                                              NOR=Avgift;
                                                              SVE=Avgift];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 152 ;   ;Rate Type           ;Option        ;CaptionML=[ENU=Rate Type;
                                                              NOR=Avgiftstype;
                                                              SVE=Avgiftstyp];
                                                   OptionCaptionML=[ENU=Hours,Minuts;
                                                                    NOR=Timer,Minutter;
                                                                    SVE=Timmar,Minuter];
                                                   OptionString=Hours,Minuts;
                                                   Editable=No }
    { 153 ;   ;Team Size           ;Decimal       ;CaptionML=[ENU=Team Size;
                                                              NOR=Teamst›rrelse;
                                                              SVE=Teamstorlek];
                                                   Editable=No }
    { 160 ;   ;Text Composition    ;Code140       ;CaptionML=[ENU=Text Composition;
                                                              NOR=Tekstsammensettning;
                                                              SVE=Textsammans„ttning];
                                                   Editable=No }
    { 200 ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   OnValidate=BEGIN
                                                                IF ("Item No." <> xRec."Item No.") AND ("Item No." <> '') THEN
                                                                  ValidateItem(ItemTypeOpt::Item);
                                                              END;

                                                   CaptionML=[ENU=Item No.;
                                                              NOR=Artikkelnr;
                                                              SVE=Artikelnr] }
    { 210 ;   ;Basic Item          ;Code20        ;TableRelation="Basic Item"."Product Code" WHERE (Manufacturer=FIELD(Manufacturer));
                                                   OnValidate=BEGIN
                                                                IF ("Basic Item" <> xRec."Basic Item") AND ("Basic Item" <> '') THEN
                                                                  ValidateItem(ItemTypeOpt::"Basic Item");
                                                              END;

                                                   CaptionML=[ENU=Basic Item;
                                                              NOR=Fabrikantartikkel;
                                                              SVE=Basartikel] }
    { 220 ;   ;Trade Item          ;Code20        ;TableRelation="Trade Item"."Item Code" WHERE (Vendor=FIELD("Vendor (Trade Item)"));
                                                   OnValidate=BEGIN
                                                                IF ("Trade Item" <> xRec."Trade Item") AND ("Trade Item" <> '') THEN
                                                                  ValidateItem(ItemTypeOpt::"Trade Item");
                                                              END;

                                                   CaptionML=[ENU=Trade Item;
                                                              NOR=Katalogartikkel;
                                                              SVE=Anskaffningsartikel] }
    { 240 ;   ;Vendor (Trade Item) ;Code15        ;TableRelation="ETIM Vendor - Central Mgt";
                                                   OnValidate=VAR
                                                                lvExecValidate@1100485000 : Boolean;
                                                              BEGIN
                                                                IF ("Vendor (Trade Item)" <> xRec."Vendor (Trade Item)") AND ("Vendor (Trade Item)" <> '') THEN BEGIN
                                                                  IF "Basic Item" <> '' THEN BEGIN
                                                                    "Trade Item" := '';
                                                                    lvExecValidate := TRUE;
                                                                  END;
                                                                  IF "Trade Item" <> '' THEN BEGIN
                                                                    VALIDATE("Trade Item");
                                                                    lvExecValidate := TRUE;
                                                                  END;
                                                                  IF lvExecValidate THEN BEGIN
                                                                    IF TradeItemRec.CheckReplaceVendor(
                                                                      xRec."Vendor (Trade Item)", xRec."Trade Item",
                                                                      "Vendor (Trade Item)", "Trade Item") THEN
                                                                      ValidateItem(ItemTypeOpt::"Trade Item")
                                                                    ELSE
                                                                      ValidateItem(ItemTypeOpt::"Trade Vendor");
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Vendor (Trade Item);
                                                              NOR=Leverand›r (katalogartikkel);
                                                              SVE=Leverant”r (skaffningsartikel)] }
    { 250 ;   ;Manufacturer        ;Code15        ;TableRelation="ETIM Vendor - Central Mgt";
                                                   CaptionML=[ENU=Manufacturer;
                                                              NOR=Produsent;
                                                              SVE=Tillverkare] }
    { 280 ;   ;Ask for Quote       ;Boolean       ;CaptionML=[ENU=Ask for Quote;
                                                              NOR=Be om tilbud;
                                                              SVE=Beg„r offert] }
    { 290 ;   ;Purchase Route Reference;Code20    ;CaptionML=[ENU=Purchase Route Reference;
                                                              NOR=Referanse for Innkj›psrute;
                                                              SVE=Referens f”r ink”psf”ljd];
                                                   Editable=No }
    { 300 ;   ;Compress No.        ;Integer       ;CaptionML=[ENU=Compress No.;
                                                              NOR=Komprimer nr.;
                                                              SVE=Komprimera nr];
                                                   Editable=No }
    { 310 ;   ;Zero Line           ;Boolean       ;CaptionML=[ENU=Zero Line;
                                                              NOR=Nullrad;
                                                              SVE=Nollrad] }
    { 320 ;   ;Document No.        ;Code20        ;TableRelation="Document Properties";
                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Document No.;
                                                              NOR=Dokumentnr.;
                                                              SVE=Dokumentnr] }
    { 330 ;   ;Code                ;Code20        ;CaptionML=[ENU=Code;
                                                              NOR=Kode;
                                                              SVE=Kod] }
    { 340 ;   ;Price Agreement     ;Boolean       ;CaptionML=[ENU=Price Agreement;
                                                              NOR=Prisavtale;
                                                              SVE=Prisavtal] }
    { 341 ;   ;Norm Agreement      ;Boolean       ;CaptionML=[ENU=Norm Agreement;
                                                              NOR=Normavtale;
                                                              SVE=Normavtal] }
    { 350 ;   ;Vendor              ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=[ENU=Vendor;
                                                              NOR=Leverand›r;
                                                              SVE=Leverant”r] }
    { 360 ;   ;Changed             ;Boolean       ;CaptionML=[ENU=Changed;
                                                              NOR=Endret;
                                                              SVE=Žndrad];
                                                   Editable=No }
    { 370 ;   ;Cost Component      ;Code20        ;TableRelation="Cost Component".Code;
                                                   CaptionML=[ENU=Cost Component;
                                                              NOR=Kostnadskomponent;
                                                              SVE=Kostnadskomponent] }
    { 380 ;   ;Time Quantity       ;Decimal       ;InitValue=1;
                                                   CaptionML=[ENU=Time Quantity;
                                                              NOR=Tidskvantitet;
                                                              SVE=Tidskvantitet];
                                                   BlankZero=Yes }
    { 390 ;   ;Unit of Time        ;Code10        ;TableRelation="Unit of Measure".Code;
                                                   CaptionML=[ENU=Unit of Time;
                                                              NOR=Tidsenhet;
                                                              SVE=Tidsenhet] }
    { 400 ;   ;Hours               ;Decimal       ;CaptionML=[ENU=Hours;
                                                              NOR="Timer ";
                                                              SVE=Timmar];
                                                   DecimalPlaces=2:;
                                                   Editable=No }
    { 410 ;   ;Labor Amount        ;Decimal       ;CaptionML=[ENU=Labor Amount;
                                                              NOR=Arbeidskraftsbel›p;
                                                              SVE=Arbetskraftsbelopp];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 420 ;   ;Material Amount     ;Decimal       ;CaptionML=[ENU=Material Amount;
                                                              NOR=Materialebel›p;
                                                              SVE=Materialbelopp];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 421 ;   ;Gross Amount        ;Decimal       ;CaptionML=[ENU=Gross Amount;
                                                              NOR=Bruttobel›p;
                                                              SVE=Bruttobelopp];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 430 ;   ;Subcontracting Amount;Decimal      ;CaptionML=[ENU=Subcontracting Amount;
                                                              NOR=Underentrepren›rbel›p;
                                                              SVE=Underentreprenadsbelopp];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 440 ;   ;Plant Amount        ;Decimal       ;CaptionML=[ENU=Plant Amount;
                                                              NOR=Maskinbel›p;
                                                              SVE=Maskin belopp];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 450 ;   ;Amount              ;Decimal       ;CaptionML=[ENU=Amount;
                                                              NOR=Bel›p;
                                                              SVE=Belopp];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 460 ;   ;Cum. Adj. Factor Hours;Decimal     ;CaptionML=[ENU=Hours Cum. Adj. Factor;
                                                              NOR=Timer Akkumulert Justeringsfaktor;
                                                              SVE=Timmar ackum., justeringsfaktor];
                                                   DecimalPlaces=0:6 }
    { 461 ;   ;Cum. Adj. Factor Material;Decimal  ;CaptionML=[ENU=Material Cum. Adj. Factor;
                                                              NOR=Akkumulert Justeringsfaktor for Materiale;
                                                              SVE=Ackum. justeringsfaktor f”r material];
                                                   DecimalPlaces=0:6 }
    { 462 ;   ;Cum. Adj. Factor Subcontr.;Decimal ;CaptionML=[ENU=Subcontr. Cum. Adj. Factor;
                                                              NOR=Akkumulert Justeringsfaktor for Underentrepren›r;
                                                              SVE=Ackum. justeringsfaktor f”r underentrepren”r];
                                                   DecimalPlaces=0:6 }
    { 463 ;   ;Cum. Adj. Factor Plant;Decimal     ;CaptionML=[ENU=Plant Cum. Adj. Factor;
                                                              NOR=Akkumulert Justeringsfaktor for maskin;
                                                              SVE=Ackum. justeringsfaktor f”r Maskin];
                                                   DecimalPlaces=0:6 }
    { 940 ;   ;Purchase Action     ;Code10        ;TableRelation="Estimate Purchase Action".Code WHERE (Estimate No.=FIELD(Estimate No.));
                                                   CaptionML=[ENU=Purchase Action;
                                                              NOR=Innkj›pshandling;
                                                              SVE=Ink”ps†tg„rd] }
    { 950 ;   ;Purchase Action Filter;Code10      ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Purchase Action Filter;
                                                              NOR=Innkj›pshandlingsfilter;
                                                              SVE=Ink”ps†tg„rdsfilter] }
    { 960 ;   ;Purchase Phase      ;Code10        ;CaptionML=[ENU=Purchase Phase;
                                                              NOR=Innkj›psfase;
                                                              SVE=Ink”psfas];
                                                   Numeric=Yes }
    { 970 ;   ;Purchase Action Status;Option      ;CaptionML=[ENU=Purchase Action Status;
                                                              NOR=Innkj›pshandlingsstatus;
                                                              SVE=Ink”ps†tg„rdsstatus];
                                                   OptionCaptionML=[ENU=Concept,Applied,Approved,Definitive;
                                                                    NOR=Konsept,Anvendt,Godkjent,Definitiv;
                                                                    SVE=Koncept,Till„mpat,Godk„nt,Definitiv];
                                                   OptionString=Concept,Applied,Approved,Definitive;
                                                   Editable=No }
    { 980 ;   ;Purch. Action Approval Date;Date   ;CaptionML=[ENU=Purch. Action Approval Date;
                                                              NOR=Innkj›p Godkjenningsdato for Handling;
                                                              SVE=Ink”p Godk„nnandedatum f”r †tg„rd];
                                                   Editable=No }
    { 990 ;   ;Advised             ;Boolean       ;CaptionML=[ENU=Advised;
                                                              NOR=Anbefalt;
                                                              SVE=F”reslaget] }
    { 1000;   ;Total Material      ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Purch Act Help Line".Amount WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                                Cost Type=CONST(Material),
                                                                                                                Purchase Action=FIELD(Purchase Action Filter)));
                                                   CaptionML=[ENU=Total Material;
                                                              NOR=Totalt materiale;
                                                              SVE=Totalt material];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1001;   ;Total Subcontracting;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Purch Act Help Line".Amount WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                                Cost Type=CONST(Subcontracting),
                                                                                                                Purchase Action=FIELD(Purchase Action Filter)));
                                                   CaptionML=[ENU=Total Subcontractingl;
                                                              NOR=Underentrepen›r totalt;
                                                              SVE=Underentreprenad totalt];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1002;   ;Total Plant         ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Purch Act Help Line".Amount WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                                Cost Type=CONST(Plant),
                                                                                                                Purchase Action=FIELD(Purchase Action Filter)));
                                                   CaptionML=[ENU=Total Plant;
                                                              NOR=Maskin total;
                                                              SVE=Maskin totalt];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1003;   ;Total Amount        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Purch Act Help Line".Amount WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                                Purchase Action=FIELD(Purchase Action Filter)));
                                                   CaptionML=[ENU=Total Amount;
                                                              NOR=Totalt bel›p;
                                                              SVE=Total Amount];
                                                   Editable=No;
                                                   AutoFormatType=1 }
  }
  KEYS
  {
    {    ;Estimate No.,Sub-Estimate No.,Part Group,Part,Estimate Line,Recipe Line,Cost Type;
                                                   Clustered=Yes }
    {    ;Estimate No.,Line No.,Compressed         }
    {    ;Estimate No.,Text Composition,Ask for Quote,Price Agreement,Zero Line }
    {    ;Estimate No.,Compress No.                }
    {    ;Estimate No.,Purchase Action,Cost Type  ;SumIndexFields=Amount }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      HelplineRec@1210190002 : Record 11012367;
      EstLineRec@1210190001 : Record 11072072;
      RcpLineRec@1210190000 : Record 11072075;
      EstRec@1210190003 : Record 11012151;
      ItemRec@1210190013 : Record 27;
      BasicItemRec@1210190012 : Record 11012316;
      TradeItemRec@1210190011 : Record 11012317;
      ItemUnitRec@1210190014 : Record 5404;
      EstPurchActRec@1100485000 : Record 11012366;
      Status@1210190008 : Dialog;
      maxrec@1210190007 : Integer;
      currec@1210190006 : Integer;
      Text000@1210190009 : TextConst 'ENU=Busy with      #1#################\;NOR=Opptatt med #1#################\;SVE=Upptagen med   #1#################\';
      Text001@1210190005 : TextConst 'ENU=Estimatepart  #2################# @3@@@@@@@@@@@@@;NOR=Kalkyledel  #2################# @3@@@@@@@@@@@@@;SVE=Kalkyldel  #2################# @3@@@@@@@@@@@@@';
      ItemTypeOpt@1210190010 : 'Item,Basic Item,Trade Item,Trade Vendor';
      Text008@1100485003 : TextConst 'ENU=Assign these Budget Lines to Purchase Action %1?;NOR=Tilordne disse budsjettradene til innkj›pshandlingen %1?;SVE=Tilldela dessa budgetrader till ink”ps†tg„rden %1?';
      Text009@1100485002 : TextConst 'ENU=Do you want to remove Budget Lines from attached Purchase Actions  ?;NOR=Vil du fjerne Budsjettrader fra vedlagte Innkj›pshandlinger?;SVE=Vill du ta bort budgetrader fr†n bifogade ink”ps†tg„rder?';
      Text011@1100525001 : TextConst 'ENU=First select records;NOR=Marker poster f›rst;SVE=Markera f”rst poster';

    PROCEDURE Reorganise@1210190000(ICurrEst@1210190005 : Code[20]);
    BEGIN
      IF NOT EstRec.GET(ICurrEst) THEN
        EXIT;

      HelplineRec.RESET;
      HelplineRec.SETRANGE("Estimate No.", ICurrEst);
      HelplineRec.DELETEALL;

      Status.OPEN(Text000 + Text001);
      //db.sn, 03-07-17
      EstRec.GET(ICurrEst);
      IF EstRec."RAW Estimate" THEN BEGIN
        FillBufferWithRawEstLines(ICurrEst);
      END ELSE BEGIN
        FillBufferWithEstLines(ICurrEst);
        FillBufferWithRcpLines(ICurrEst);
      END;
      //db.en, 03-07-17
      Compress(ICurrEst);
      Status.CLOSE;
      COMMIT;

      HelplineRec.RESET;
      HelplineRec.SETCURRENTKEY("Estimate No.", "Line No.", Compressed);
      HelplineRec.SETRANGE("Estimate No.", ICurrEst);
      HelplineRec.SETRANGE(Compressed, TRUE);
      PAGE.RUNMODAL(PAGE::"Estimate Composition", HelplineRec);

      HelplineRec.RESET;
      HelplineRec.SETRANGE("Estimate No.", ICurrEst);
      HelplineRec.DELETEALL;
      COMMIT;
    END;

    PROCEDURE FillBufferWithEstLines@1210190003(ICurrEst@1210190000 : Code[20]);
    VAR
      lvLoopCount@1100485000 : Integer;
      lvAdmiCodeRec@1100485001 : Record 11012390;
    BEGIN
      EstLineRec.RESET;
      EstLineRec.SETRANGE("Estimate No.", ICurrEst);
      EstLineRec.SETFILTER(Recipe, '%1', '');
      EstLineRec.SETRANGE("Surcharge Type", EstLineRec."Surcharge Type"::" ");
      IF EstLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := EstLineRec.COUNT;
        Status.UPDATE(1,EstLineRec.TABLECAPTION);
        REPEAT

          IF EstLineRec.Admicode <> '' THEN BEGIN
            IF lvAdmiCodeRec.GET(EstLineRec.Admicode) THEN BEGIN
              IF (lvAdmiCodeRec."Cost Object Material" <> '') AND (EstLineRec."Cost Object Price"  = '' ) THEN
                IF EstLineRec."Cost Type (Price)" = EstLineRec."Cost Type (Price)"::Material THEN
                  EstLineRec."Cost Object Price" := lvAdmiCodeRec."Cost Object Material";
              IF (lvAdmiCodeRec."Cost Object Subcontracting" <> '') AND (EstLineRec."Cost Object Price" = '') THEN
                IF EstLineRec."Cost Type (Price)" = EstLineRec."Cost Type (Price)"::Subcontracting THEN
                  EstLineRec."Cost Object Price" := lvAdmiCodeRec."Cost Object Subcontracting";
              IF (lvAdmiCodeRec."Cost Object Plant" <> '') AND (EstLineRec."Cost Object Price" = '') THEN
                IF EstLineRec."Cost Type (Price)" = EstLineRec."Cost Type (Price)"::Plant THEN
                  EstLineRec."Cost Object Price" := lvAdmiCodeRec."Cost Object Plant";
            END;
          END;

          FOR lvLoopCount := 1 TO 3 DO BEGIN
            IF ((lvLoopCount = 1) AND
                ((EstLineRec."Item No." + EstLineRec."Basic Item" + EstLineRec."Trade Item" <> '') OR
                 (EstLineRec."Cost Object Price"  <> '') AND (EstLineRec."Cost Type (Price)" = EstLineRec."Cost Type (Price)"::Material))) OR
               ((lvLoopCount = 2) AND (EstLineRec."Cost Object Price" <> '') AND (EstLineRec."Cost Type (Price)" = EstLineRec."Cost Type (Price)"::Subcontracting)) OR
               ((lvLoopCount = 3) AND (EstLineRec."Cost Object Price" <> '') AND (EstLineRec."Cost Type (Price)" = EstLineRec."Cost Type (Price)"::Plant)) THEN BEGIN

              currec := currec + 1;
              Status.UPDATE(2,EstLineRec.Part);
              Status.UPDATE(3,100* ROUND(currec / maxrec * 100,1));
              HelplineRec.INIT;
              HelplineRec."Estimate No." := EstLineRec."Estimate No.";
              HelplineRec."Sub-Estimate No." := EstLineRec."Sub-Estimate No.";
              HelplineRec."Part Group" := EstLineRec."Part Group";
              HelplineRec.Part := EstLineRec.Part;
              HelplineRec."Estimate Line" := EstLineRec."Line No.";
              HelplineRec."Recipe Group" := EstLineRec."Recipe Group";
              HelplineRec.Recipe := EstLineRec.Recipe;
              HelplineRec.Description := EstLineRec.Description;

              CASE lvLoopCount OF
              1:BEGIN
                  HelplineRec."Cost Type" := HelplineRec."Cost Type"::Material;
                  HelplineRec.VALIDATE("Cost Object", EstLineRec."Cost Object Price");

                  HelplineRec."Item No." := EstLineRec."Item No.";
                  HelplineRec."Basic Item" := EstLineRec."Basic Item";
                  HelplineRec."Trade Item" := EstLineRec."Trade Item";
                  HelplineRec."Vendor (Trade Item)" := EstLineRec."Vendor (Trade Item)";
                  HelplineRec.Manufacturer := EstLineRec.Manufacturer;

                  HelplineRec."Material Price" := EstLineRec."Net Cost Price";
                  HelplineRec."Discount %" := EstLineRec."Purchase Discount %";
                  HelplineRec."Gross Price" := EstLineRec."Gross Price";
                END;
              2:BEGIN
                  HelplineRec."Cost Type" := HelplineRec."Cost Type"::Subcontracting;
                  HelplineRec.VALIDATE("Cost Object", EstLineRec."Cost Object Price");
                  HelplineRec."Subcontracting Price" := EstLineRec."Net Cost Price";
                END;
              3:BEGIN
                  HelplineRec."Cost Type" := HelplineRec."Cost Type"::Plant;
                  HelplineRec.VALIDATE("Cost Object", EstLineRec."Cost Object Price");
                  HelplineRec."Plant Price" := EstLineRec."Net Cost Price";
                END;
              END;

              //DP01676.sn
              HelplineRec."Price Agreement" := EstLineRec."Price Agreement";
              HelplineRec."Purchase Action" :=  EstLineRec."Purchase Action";
              HelplineRec."Purchase Phase"  :=  EstLineRec."Purchase Phase";
              HelplineRec."Purchase Action Status"  :=  EstLineRec."Purchase Action Status";
              HelplineRec."Purch. Action Approval Date" :=  EstLineRec."Purch. Action Appr. Date";
              HelplineRec.Advised := EstLineRec.Advised;
              //DP01676.en

              HelplineRec."Cost Component" := EstLineRec."Cost Component";
              HelplineRec."Time Quantity" := EstLineRec."Time Quantity";
              HelplineRec."Unit of Time" := EstLineRec."Unit of Time";
              HelplineRec.Quantity := EstLineRec.Quantity;
              HelplineRec.Frequency := EstLineRec."Part Quantity";
              HelplineRec."Cumulative Quantity" := HelplineRec.Quantity * HelplineRec.Frequency;
              HelplineRec."Unit of Measure" := EstLineRec."Unit of Measure";
              //HelplineRec."Norm Group" := EstLineRec."Norm Group";
              //HelplineRec."Sub Operation Code" := EstLineRec."Sub Operation Code";
              //HelplineRec.Norm := EstLineRec.Norm;
              //HelplineRec.Rate := EstLineRec.Rate;
              //HelplineRec."Rate Code" := EstLineRec."Rate Code";
              //HelplineRec."Rate Type" := EstLineRec."Rate Type";
              //HelplineRec."Team Size" := EstLineRec."Team Size";
              HelplineRec."Text Composition" := ComposeText(HelplineRec);
              HelplineRec."Ask for Quote" := EstLineRec."Ask for Quote";
              HelplineRec."Purchase Route Reference" := EstLineRec."Purchase Route Reference";
              HelplineRec."Zero Line" := (HelplineRec."Cumulative Quantity" = 0);
              HelplineRec."Document No." := EstLineRec."Document No.";
              HelplineRec.Code := EstLineRec.Code;
              //HelpLineRec."Norm Agreement" := EstLineRec."Norm Agreement";
              HelplineRec.Vendor := EstLineRec.Vendor;
              HelplineRec."Unit Factor" := CheckUnitFactor;
              HelplineRec."Cum. Adj. Factor Hours" := EstLineRec."Cum. Adj. Factor Hours";
              IF lvLoopCount = 1 THEN
                HelplineRec."Cum. Adj. Factor Material" := EstLineRec."Cum. Adj. Factor Price";
              IF lvLoopCount = 2 THEN
                HelplineRec."Cum. Adj. Factor Subcontr." := EstLineRec."Cum. Adj. Factor Price";
              IF lvLoopCount = 3 THEN
                HelplineRec."Cum. Adj. Factor Plant" := EstLineRec."Cum. Adj. Factor Price";
              HelplineRec.CalculateTotals;
              HelplineRec.INSERT;
            END;
          END;
        UNTIL EstLineRec.NEXT = 0;
      END;
    END;

    PROCEDURE FillBufferWithRcpLines@1210190004(ICurrEst@1210190000 : Code[20]);
    VAR
      lvLoopCount@1100485000 : Integer;
      lvAdmiCodeRec@1100485001 : Record 11012390;
    BEGIN
      RcpLineRec.RESET;
      RcpLineRec.SETRANGE("Estimate No.", ICurrEst);
      RcpLineRec.SETFILTER("Recipe (Child)", '%1', '');
      RcpLineRec.SETRANGE("Surcharge Type", RcpLineRec."Surcharge Type"::" ");
      IF RcpLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := RcpLineRec.COUNT;
        Status.UPDATE(1,RcpLineRec.TABLECAPTION);
        REPEAT

          IF RcpLineRec.Admicode <> '' THEN BEGIN
            IF lvAdmiCodeRec.GET(RcpLineRec.Admicode) THEN BEGIN
              IF (lvAdmiCodeRec."Cost Object Material" <> '') AND (RcpLineRec."Cost Object Price"  = '' ) THEN
                IF RcpLineRec."Cost Type (Price)" = RcpLineRec."Cost Type (Price)"::Material THEN
                  RcpLineRec."Cost Object Price" := lvAdmiCodeRec."Cost Object Material";
              IF (lvAdmiCodeRec."Cost Object Subcontracting" <> '') AND (RcpLineRec."Cost Object Price" = '') THEN
                IF RcpLineRec."Cost Type (Price)" = RcpLineRec."Cost Type (Price)"::Subcontracting THEN
                  RcpLineRec."Cost Object Price" := lvAdmiCodeRec."Cost Object Subcontracting";
              IF (lvAdmiCodeRec."Cost Object Plant" <> '') AND (RcpLineRec."Cost Object Price" = '') THEN
                IF RcpLineRec."Cost Type (Price)" = RcpLineRec."Cost Type (Price)"::Plant THEN
                  RcpLineRec."Cost Object Price" := lvAdmiCodeRec."Cost Object Plant";
            END;
          END;

          FOR lvLoopCount := 1 TO 3 DO BEGIN
            IF ((lvLoopCount = 1) AND
                ((RcpLineRec."Item No." + RcpLineRec."Basic Item" + RcpLineRec."Trade Item" <> '') OR
                 (RcpLineRec."Cost Object Price"  <> '') AND (RcpLineRec."Cost Type (Price)" = RcpLineRec."Cost Type (Price)"::Material)) OR
               ((lvLoopCount = 2) AND (RcpLineRec."Cost Object Price" <> '') AND (RcpLineRec."Cost Type (Price)" = RcpLineRec."Cost Type (Price)"::Subcontracting)) OR
               ((lvLoopCount = 3) AND (RcpLineRec."Cost Object Price" <> '') AND (RcpLineRec."Cost Type (Price)" = RcpLineRec."Cost Type (Price)"::Plant))) THEN BEGIN
              currec := currec + 1;
              Status.UPDATE(1,RcpLineRec.Part);
              Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
              HelplineRec.INIT;
              HelplineRec."Estimate No." := RcpLineRec."Estimate No.";
              HelplineRec."Sub-Estimate No." := RcpLineRec."Sub-Estimate No.";
              HelplineRec."Part Group" := RcpLineRec."Part Group";
              HelplineRec.Part := RcpLineRec.Part;
              HelplineRec."Estimate Line" := RcpLineRec."Estimate Line";
              HelplineRec."Recipe Line" := RcpLineRec."Line No.";
              HelplineRec."Recipe Group" := RcpLineRec."Recipe Group";
              HelplineRec.Recipe := RcpLineRec.Recipe;
              HelplineRec.Description := RcpLineRec.Description;

              CASE lvLoopCount OF
              1:BEGIN
                  HelplineRec."Cost Type" := HelplineRec."Cost Type"::Material;
                  HelplineRec.VALIDATE("Cost Object", RcpLineRec."Cost Object Price");

                  HelplineRec."Item No." := RcpLineRec."Item No.";
                  HelplineRec."Basic Item" := RcpLineRec."Basic Item";
                  HelplineRec."Trade Item" := RcpLineRec."Trade Item";
                  HelplineRec."Vendor (Trade Item)" := RcpLineRec."Vendor (Trade Item)";
                  HelplineRec.Manufacturer := RcpLineRec.Manufacturer;

                  HelplineRec."Material Price" := RcpLineRec."Net Cost Price";
                  HelplineRec."Discount %" := RcpLineRec."Purchase Discount %";
                  HelplineRec."Gross Price" := RcpLineRec."Gross Price";
                END;
              2:BEGIN
                  HelplineRec."Cost Type" := HelplineRec."Cost Type"::Subcontracting;
                  HelplineRec.VALIDATE("Cost Object", RcpLineRec."Cost Object Price");
                  HelplineRec."Subcontracting Price" := RcpLineRec."Net Cost Price";
                END;
              3:BEGIN
                  HelplineRec."Cost Type" := HelplineRec."Cost Type"::Plant;
                  HelplineRec.VALIDATE("Cost Object", RcpLineRec."Cost Object Price");
                  HelplineRec."Plant Price" := RcpLineRec."Net Cost Price";
                END;
              END;

              //DP01676.sn
              HelplineRec."Price Agreement" := RcpLineRec."Price Agreement";
              HelplineRec."Purchase Action" :=  RcpLineRec."Purchase Action";
              HelplineRec."Purchase Phase"  :=  RcpLineRec."Purchase Phase";
              HelplineRec."Purchase Action Status"  :=  RcpLineRec."Purchase Action Status";
              HelplineRec."Purch. Action Approval Date" :=  RcpLineRec."Purch. Action Appr. Date";
              HelplineRec.Advised := RcpLineRec.Advised;
              //DP01676.en

              EstLineRec.GET(RcpLineRec."Estimate No.", RcpLineRec."Sub-Estimate No.", RcpLineRec."Part Group",
                             RcpLineRec.Part, RcpLineRec."Estimate Line");
              HelplineRec."Cost Component" := RcpLineRec."Cost Component";
              HelplineRec."Time Quantity" := RcpLineRec."Time Quantity";
              HelplineRec."Unit of Time" := RcpLineRec."Unit of Time";
              HelplineRec.Quantity := RcpLineRec.Quantity;
              HelplineRec.Frequency := EstLineRec.Quantity * EstLineRec."Part Quantity";
              HelplineRec."Cumulative Quantity" := HelplineRec.Quantity * HelplineRec.Frequency;
              HelplineRec."Unit of Measure" := RcpLineRec."Unit of Measure";
              //HelplineRec."Norm Group" := RcpLineRec."Norm Group";
              //HelplineRec."Sub Operation Code" := RcpLineRec."Sub Operation Code";
              //HelplineRec.Norm := RcpLineRec.Norm;
              //HelplineRec.Rate := RcpLineRec.Rate;
              //HelplineRec."Rate Code" := RcpLineRec."Rate Code";
              //HelplineRec."Rate Type" := RcpLineRec."Rate Type";
              //HelplineRec."Team Size" := RcpLineRec."Team Size";
              HelplineRec."Text Composition" := ComposeText(HelplineRec);
              HelplineRec."Ask for Quote" := RcpLineRec."Ask for Quote";
              HelplineRec."Purchase Route Reference" := RcpLineRec."Purchase Route Reference";
              HelplineRec."Zero Line" := (HelplineRec."Cumulative Quantity" = 0);
              HelplineRec."Document No." := RcpLineRec."Document No.";
              HelplineRec.Code := RcpLineRec.Code;
              //HelpLineRec."Norm Agreement" := RcpLineRec."Norm Agreement";
              HelplineRec.Vendor := RcpLineRec.Vendor;
              HelplineRec."Unit Factor" := CheckUnitFactor;
              HelplineRec."Cum. Adj. Factor Hours" := RcpLineRec."Cum. Adj. Factor Hours";
              IF lvLoopCount = 1 THEN
                HelplineRec."Cum. Adj. Factor Material" := RcpLineRec."Cum. Adj. Factor Price";
              IF lvLoopCount = 2 THEN
                HelplineRec."Cum. Adj. Factor Subcontr." := RcpLineRec."Cum. Adj. Factor Price";
              IF lvLoopCount = 3 THEN
                HelplineRec."Cum. Adj. Factor Plant" := RcpLineRec."Cum. Adj. Factor Price";
              HelplineRec.CalculateTotals;
              HelplineRec.INSERT;
            END;
          END;
        UNTIL RcpLineRec.NEXT = 0;
      END;
    END;

    PROCEDURE FillBufferWithRawEstLines@1100525003(ICurrEst@1210190000 : Code[20]);
    VAR
      EstLineRec@1100525000 : Record 11125698;
      lvLoopCount@1100485000 : Integer;
      lvAdmiCodeRec@1100485001 : Record 11012390;
    BEGIN
      EstLineRec.RESET;
      EstLineRec.SETRANGE("Estimate No.", ICurrEst);
      IF EstLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := EstLineRec.COUNT;
        Status.UPDATE(1,EstLineRec.TABLECAPTION);
        REPEAT

          IF EstLineRec.Admicode <> '' THEN BEGIN
            IF lvAdmiCodeRec.GET(EstLineRec.Admicode) THEN BEGIN
              //DP01676.sn
              IF (lvAdmiCodeRec."Cost Object Material" <> '') AND (EstLineRec."Material Amount" <> 0) THEN
                EstLineRec."Cost Object" := lvAdmiCodeRec."Cost Object Material";
              IF (lvAdmiCodeRec."Cost Object Subcontracting" <> '') AND (EstLineRec."Subcontracting Amount" <> 0) THEN
                EstLineRec."Cost Object" := lvAdmiCodeRec."Cost Object Subcontracting";
              IF (lvAdmiCodeRec."Cost Object Plant" <> '') AND (EstLineRec."Plant Amount" <> 0) THEN
                EstLineRec."Cost Object" := lvAdmiCodeRec."Cost Object Plant";
              //DP01676.en
            END;
          END;

          FOR lvLoopCount := 1 TO 3 DO BEGIN
            IF ((lvLoopCount = 1) AND
                ((EstLineRec."Item No." + EstLineRec."Basic Item" + EstLineRec."Trade Item" <> '') OR
                 (EstLineRec."Cost Object"  <> '') AND (EstLineRec."Material Amount" <> 0))) OR
               ((lvLoopCount = 2) AND (EstLineRec."Cost Object" <> '') AND (EstLineRec."Subcontracting Amount" <> 0)) OR
               ((lvLoopCount = 3) AND (EstLineRec."Cost Object" <> '') AND (EstLineRec."Plant Amount" <> 0)) THEN BEGIN

              currec := currec + 1;
              Status.UPDATE(2,EstLineRec."Tender Paragraph No.");
              Status.UPDATE(3,ROUND(currec / maxrec * 10000,1));
              HelplineRec.INIT;
              HelplineRec."Estimate No." := EstLineRec."Estimate No.";
              HelplineRec."Sub-Estimate No." := '';
              HelplineRec."Part Group" := '';
              HelplineRec.Part := EstLineRec."Tender Paragraph No.";
              HelplineRec."Estimate Line" := EstLineRec."Line No.";
              HelplineRec."Recipe Group" := '';
              HelplineRec.Recipe := '';
              HelplineRec.Description := EstLineRec.Description;

              CASE lvLoopCount OF
              1:BEGIN
                  HelplineRec."Cost Type" := HelplineRec."Cost Type"::Material;
                  HelplineRec.VALIDATE("Cost Object", EstLineRec."Cost Object");  //DP01676

                  HelplineRec."Item No." := EstLineRec."Item No.";
                  HelplineRec."Basic Item" := EstLineRec."Basic Item";
                  HelplineRec."Trade Item" := EstLineRec."Trade Item";
                  HelplineRec."Vendor (Trade Item)" := EstLineRec."Vendor (Trade Item)";
                  HelplineRec.Manufacturer := EstLineRec.Manufacturer;

                  //DP01676.sn
                  HelplineRec."Material Price" := EstLineRec."Net Cost Price";
                  HelplineRec."Discount %" := EstLineRec."Purchase Discount %";
                  HelplineRec."Gross Price" := EstLineRec."Gross Price";
                  //DP01676.en
                END;
              2:BEGIN
                  //DP01676.sn
                  HelplineRec."Cost Type" := HelplineRec."Cost Type"::Subcontracting;
                  HelplineRec.VALIDATE("Cost Object", EstLineRec."Cost Object");

                  HelplineRec."Subcontracting Price" := EstLineRec."Net Cost Price";
                  HelplineRec."Discount %" := EstLineRec."Purchase Discount %";
                  HelplineRec."Gross Price" := EstLineRec."Gross Price";
                  //DP01676.en
                END;
              3:BEGIN
                  //DP01676.sn
                  HelplineRec."Cost Type" := HelplineRec."Cost Type"::Plant;
                  HelplineRec.VALIDATE("Cost Object", EstLineRec."Cost Object");

                  HelplineRec."Plant Price" := EstLineRec."Net Cost Price";
                  HelplineRec."Discount %" := EstLineRec."Purchase Discount %";
                  HelplineRec."Gross Price" := EstLineRec."Gross Price";
                  //DP01676.en
                END;
              END;

              //DP01676.sn
              HelplineRec."Price Agreement" := EstLineRec."Price Agreement";
              HelplineRec."Purchase Action" :=  EstLineRec."Purchase Action";
              HelplineRec."Purchase Phase"  :=  EstLineRec."Purchase Phase";
              HelplineRec."Purchase Action Status"  :=  EstLineRec."Purchase Action Status";
              HelplineRec."Purch. Action Approval Date" :=  EstLineRec."Purch. Action Appr. Date";
              HelplineRec.Advised := EstLineRec.Advised;
              //DP01676.sn
              HelplineRec."Cost Component" := EstLineRec."Cost Component";
              HelplineRec."Time Quantity" := EstLineRec."Time Quantity";
              HelplineRec."Unit of Time" := EstLineRec."Unit of Time";
              HelplineRec.Quantity := EstLineRec.Quantity;
              HelplineRec.Frequency := EstLineRec."Part Quantity";
              HelplineRec."Cumulative Quantity" := HelplineRec.Quantity * HelplineRec.Frequency;
              HelplineRec."Unit of Measure" := EstLineRec."Unit of Measure";
              //HelplineRec."Norm Group" := EstLineRec."Norm Group";
              //HelplineRec."Sub Operation Code" := EstLineRec."Sub Operation Code";
              //HelplineRec.Norm := EstLineRec.Norm;
              //HelplineRec.Rate := EstLineRec.Rate;
              //HelplineRec."Rate Code" := EstLineRec."Rate Code";
              //HelplineRec."Rate Type" := EstLineRec."Rate Type";
              //HelplineRec."Team Size" := EstLineRec."Team Size";
              HelplineRec."Text Composition" := ComposeText(HelplineRec);
              HelplineRec."Ask for Quote" := EstLineRec."Ask for Quote";
              HelplineRec."Purchase Route Reference" := EstLineRec."Purchase Route Reference";
              HelplineRec."Zero Line" := (HelplineRec."Cumulative Quantity" = 0);
              HelplineRec."Document No." := EstLineRec."Document No.";
              //HelplineRec.Code := EstLineRec.Code;
              //HelpLineRec."Norm Agreement" := EstLineRec."Norm Agreement";
              HelplineRec.Vendor := EstLineRec.Vendor;
              HelplineRec."Unit Factor" := CheckUnitFactor;
              //DP01676.sn
              HelplineRec."Cum. Adj. Factor Hours" := EstLineRec."Cum. Adj. Factor";
              HelplineRec."Cum. Adj. Factor Material" := EstLineRec."Cum. Adj. Factor";
              HelplineRec."Cum. Adj. Factor Subcontr." := EstLineRec."Cum. Adj. Factor";
              HelplineRec."Cum. Adj. Factor Plant" := EstLineRec."Cum. Adj. Factor";
              //DP01676.en
              HelplineRec.CalculateTotals;
              HelplineRec.INSERT;
            END;
          END;
        UNTIL EstLineRec.NEXT = 0;
      END;
    END;

    PROCEDURE Compress@1210190005(ICurrEst@1210190000 : Code[20]);
    VAR
      LastLino@1210190006 : Integer;
      LastText@1210190004 : Text[250];
      LastAskQ@1210190007 : Boolean;
      LastAgrP@1210190009 : Boolean;
      LastAgrN@1100485005 : Boolean;
      LastComp@1210190008 : Integer;
      LastFact1@1100485000 : Decimal;
      LastFact2@1100485001 : Decimal;
      LastFact3@1100485002 : Decimal;
      LastFact4@1100485003 : Decimal;
      LastFact5@1100485004 : Decimal;
    BEGIN
      LastLino := 0;
      LastComp := 0;
      LastText := '~';
      LastAskQ := FALSE;
      LastAgrP := FALSE;
      LastAgrN := FALSE;

      HelplineRec.RESET;
      HelplineRec.SETCURRENTKEY("Estimate No.", "Text Composition", "Ask for Quote", "Price Agreement", "Zero Line");
      HelplineRec.SETRANGE("Estimate No.", ICurrEst);
      IF HelplineRec.FINDSET(TRUE, FALSE) THEN BEGIN
        currec := 0;
        maxrec := HelplineRec.COUNT;
        Status.UPDATE(1,HelplineRec.TABLECAPTION);
        REPEAT
          currec := currec + 1;
          Status.UPDATE(2,HelplineRec."Cost Object");

      //    Status.UPDATE(3,ROUND(currec / maxrec * 10000,1));    RTC not compatible

          HelplineRec."Line No." := LastLino + 1;

          LastLino := HelplineRec."Line No.";
          IF (LastText <> HelplineRec."Text Composition") OR
             (LastAskQ <> HelplineRec."Ask for Quote") OR
             (LastAgrP <> HelplineRec."Price Agreement") OR
             (LastAgrN <> HelplineRec."Norm Agreement")
          THEN BEGIN
            HelplineRec.Compressed := TRUE;
            LastText := HelplineRec."Text Composition";
            LastAskQ := HelplineRec."Ask for Quote";
            LastAgrP := HelplineRec."Price Agreement";
            LastAgrN := HelplineRec."Norm Agreement";
            LastFact1 := HelplineRec.Norm;
            LastFact2 := HelplineRec."Gross Price";
            LastFact3 := HelplineRec."Material Price";
            LastFact4 := HelplineRec."Subcontracting Price";
            LastFact5 := HelplineRec."Plant Price";
            LastComp := LastComp + 1;
          END ELSE BEGIN
            IF (LastFact1 <> HelplineRec.Norm) OR
               (LastFact2 <> HelplineRec."Gross Price") OR
               (LastFact3 <> HelplineRec."Material Price") OR
               (LastFact4 <> HelplineRec."Subcontracting Price") OR
               (LastFact5 <> HelplineRec."Plant Price") THEN
            BEGIN
              HelplineRec.Compressed := TRUE;
              LastFact1 := HelplineRec.Norm;
              LastFact2 := HelplineRec."Gross Price";
              LastFact3 := HelplineRec."Material Price";
              LastFact4 := HelplineRec."Subcontracting Price";
              LastFact5 := HelplineRec."Plant Price";
              LastComp := LastComp + 1;
            END;
          END;
          HelplineRec."Compress No." := LastComp;
          HelplineRec.MODIFY;
        UNTIL HelplineRec.NEXT = 0;
      END;
    END;

    PROCEDURE "-1-"@1210190013();
    BEGIN
    END;

    PROCEDURE UpdateIntern@1210190001();
    BEGIN
      TESTFIELD(Compressed, TRUE);

      HelplineRec.RESET;
      HelplineRec.SETCURRENTKEY("Estimate No.", "Compress No.");
      HelplineRec.SETRANGE("Estimate No.", "Estimate No.");
      HelplineRec.SETRANGE("Compress No.", "Compress No.");
      HelplineRec.SETFILTER("Line No.", '<>%1', "Line No.");
      IF HelplineRec.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          //HelplineRec.Norm := Norm;
          HelplineRec."Material Price" := "Material Price";
          HelplineRec."Discount %":= "Discount %";
          HelplineRec."Gross Price" := "Gross Price";
          HelplineRec."Subcontracting Price" := "Subcontracting Price";
          HelplineRec."Plant Price" := "Plant Price" ;

          HelplineRec.Description := Description;
          HelplineRec."Price Agreement" := "Price Agreement";
          //HelplineRec."Norm Agreement" := "Norm Agreement";
          //HelplineRec."Subcontracting Agreement" := "Subcontracting Agreement";
          //HelplineRec."Plant Agreement" := "Plant Agreement";
          HelplineRec."Item No." := "Item No.";
          HelplineRec."Basic Item" := "Basic Item";
          HelplineRec."Trade Item" := "Trade Item";
          HelplineRec.Manufacturer := Manufacturer;
          HelplineRec."Vendor (Trade Item)" := "Vendor (Trade Item)";
          HelplineRec."Cost Object" := "Cost Object";
          HelplineRec."Cost Component" := "Cost Component";
          HelplineRec."Cost Type" := "Cost Type";
          HelplineRec."Unit of Measure" := "Unit of Measure";
          IF (HelplineRec."Unit Factor" <> 0) AND ("Unit Factor" = 1) THEN
            IF HelplineRec."Unit Factor" <> 1 THEN
              HelplineRec.Quantity := ROUND(HelplineRec.Quantity * HelplineRec."Unit Factor", 1, '>');
          IF (HelplineRec."Unit Factor" = 1) AND ("Unit Factor" <> 0) THEN
            IF "Unit Factor" <> 1 THEN
              HelplineRec.Quantity := ROUND(HelplineRec.Quantity / "Unit Factor", 1, '>');
          HelplineRec."Unit Factor" := "Unit Factor";
          //HelplineRec."Norm Group" := "Norm Group";
          //HelplineRec."Sub Operation Code" := "Sub Operation Code";
          //HelplineRec."Rate Code" := "Rate Code";
          //HelplineRec."Rate Type" := "Rate Type";
          //HelplineRec.Rate := Rate;
          //HelplineRec."Team Size" := "Team Size";
          //HelpLineRec."Ask for Quote" := "Ask for Quote";  //is arranged by 2 extra functions
          HelplineRec.Changed := TRUE;
          HelplineRec.CalculateTotals;
          HelplineRec.MODIFY;
        UNTIL HelplineRec.NEXT = 0;
      END;
    END;

    PROCEDURE UpdateExtern@1210190002(CurrEst@1210190004 : Code[20]);
    VAR
      EstRec@1210190003 : Record 11012151;
      EstLineRec@1210190002 : Record 11072072;
      RcpLineRec@1210190001 : Record 11072075;
    BEGIN
      EstRec.GET(CurrEst);
      EstRec.TESTFIELD(Fixed, FALSE);

      Status.OPEN(Text000 + Text001);

      EstRec.LOCKTABLE;
      EstLineRec.LOCKTABLE;
      RcpLineRec.LOCKTABLE;

      HelplineRec.RESET;
      HelplineRec.SETRANGE("Estimate No.", CurrEst);
      HelplineRec.SETRANGE(Changed, TRUE);
      IF HelplineRec.FINDSET(TRUE, FALSE) THEN BEGIN
        currec := 0;
        maxrec := HelplineRec.COUNT;
        Status.UPDATE(1,HelplineRec.TABLECAPTION);
        REPEAT
          currec := currec + 1;
          Status.UPDATE(2,HelplineRec.Part);
          Status.UPDATE(3,ROUND(currec / maxrec * 10000,1));
          IF HelplineRec."Recipe Line" = 0 THEN BEGIN
            EstLineRec.GET(HelplineRec."Estimate No.", HelplineRec."Sub-Estimate No.", HelplineRec."Part Group",
                           HelplineRec.Part, HelplineRec."Estimate Line");
            //EstLineRec.Norm := HelplineRec.Norm;
            EstLineRec."Net Cost Price" := HelplineRec."Material Price";
            EstLineRec."Purchase Discount %":= HelplineRec."Discount %";
            EstLineRec."Gross Price" := HelplineRec."Gross Price" ;
            //EstLineRec."Subcontracting Price" := HelplineRec."Subcontracting Price";
            //EstLineRec."Plant Price" := HelplineRec."Plant Price" ;

            EstLineRec.Description := HelplineRec.Description;
            EstLineRec."Price Agreement" := HelplineRec."Price Agreement";
            //EstLineRec."Norm Agreement" := HelplineRec."Norm Agreement";
            //EstLineRec."Subcontracting Agreement" := HelplineRec."Subcontracting Agreement";
            //EstLineRec."Plant Agreement" := HelplineRec."Plant Agreement";
            EstLineRec."Item No." := HelplineRec."Item No.";
            EstLineRec."Basic Item" := HelplineRec."Basic Item";
            EstLineRec."Trade Item" := HelplineRec."Trade Item";
            EstLineRec.Manufacturer := HelplineRec.Manufacturer;
            EstLineRec."Vendor (Trade Item)" := HelplineRec."Vendor (Trade Item)";
            IF HelplineRec."Cost Type" = HelplineRec."Cost Type"::Labor THEN
              EstLineRec."Cost Object Labor" := HelplineRec."Cost Object";
            IF HelplineRec."Cost Type" = HelplineRec."Cost Type"::Material THEN
              EstLineRec."Cost Object Price" := HelplineRec."Cost Object";
            IF HelplineRec."Cost Type" = HelplineRec."Cost Type"::Subcontracting THEN
              EstLineRec."Cost Object Price" := HelplineRec."Cost Object";
            IF HelplineRec."Cost Type" = HelplineRec."Cost Type"::Plant THEN
              EstLineRec."Cost Object Price" := HelplineRec."Cost Object";
            EstLineRec."Cost Component" := HelplineRec."Cost Component";
            EstLineRec.Quantity := HelplineRec.Quantity;
            EstLineRec."Unit of Measure" := HelplineRec."Unit of Measure";
            //EstLineRec."Norm Group" := HelplineRec."Norm Group";
            //EstLineRec."Sub Operation Code" := HelplineRec."Sub Operation Code";
            //EstLineRec."Rate Code" := HelplineRec."Rate Code";
            //EstLineRec."Rate Type" := HelplineRec."Rate Type";
            //EstLineRec.Rate := HelplineRec.Rate;
            //EstLineRec."Team Size" := HelplineRec."Team Size";

            EstLineRec.CalculateTotals;
            EstLineRec.MODIFY;
            EstLineRec.CheckEstimateCharge;
          END ELSE BEGIN
            RcpLineRec.GET(HelplineRec."Estimate No.", HelplineRec."Sub-Estimate No.", HelplineRec."Part Group",
                           HelplineRec.Part, HelplineRec."Estimate Line", HelplineRec."Recipe Group",
                           HelplineRec.Recipe, HelplineRec."Recipe Line");
            //RcpLineRec.Norm := HelplineRec.Norm;
            RcpLineRec."Net Cost Price" := HelplineRec."Material Price";
            RcpLineRec."Purchase Discount %":= HelplineRec."Discount %";
            RcpLineRec."Gross Price" := HelplineRec."Gross Price" ;
            //RcpLineRec."Subcontracting Price" := HelplineRec."Subcontracting Price";
            //RcpLineRec."Plant Price" := HelplineRec."Plant Price" ;

            RcpLineRec.Description := HelplineRec.Description;
            RcpLineRec."Price Agreement" := HelplineRec."Price Agreement";
            //RcpLineRec."Norm Agreement" := HelplineRec."Norm Agreement";
            //RcpLineRec."Subcontracting Agreement" := HelplineRec."Subcontracting Agreement";
            //RcpLineRec."Plant Agreement" := HelplineRec."Plant Agreement";
            RcpLineRec."Item No." := HelplineRec."Item No.";
            RcpLineRec."Basic Item" := HelplineRec."Basic Item";
            RcpLineRec."Trade Item" := HelplineRec."Trade Item";
            RcpLineRec.Manufacturer := HelplineRec.Manufacturer;
            RcpLineRec."Vendor (Trade Item)" := HelplineRec."Vendor (Trade Item)";
            IF HelplineRec."Cost Type" = HelplineRec."Cost Type"::Labor THEN
              RcpLineRec."Cost Object Labor" := HelplineRec."Cost Object";
            IF HelplineRec."Cost Type" = HelplineRec."Cost Type"::Material THEN
              RcpLineRec."Cost Object Price" := HelplineRec."Cost Object";
            IF HelplineRec."Cost Type" = HelplineRec."Cost Type"::Subcontracting THEN
              RcpLineRec."Cost Object Price" := HelplineRec."Cost Object";
            IF HelplineRec."Cost Type" = HelplineRec."Cost Type"::Plant THEN
              RcpLineRec."Cost Object Price" := HelplineRec."Cost Object";
            RcpLineRec."Cost Component" := HelplineRec."Cost Component";
            RcpLineRec.Quantity := HelplineRec.Quantity;
            RcpLineRec."Unit of Measure" := HelplineRec."Unit of Measure";
            //RcpLineRec."Norm Group" := HelplineRec."Norm Group";
            //RcpLineRec."Sub Operation Code" := HelplineRec."Sub Operation Code";
            //RcpLineRec."Rate Code" := HelplineRec."Rate Code";
            //RcpLineRec."Rate Type" := HelplineRec."Rate Type";
            //RcpLineRec.Rate := HelplineRec.Rate;
            //RcpLineRec."Team Size" := HelplineRec."Team Size";

            RcpLineRec.CalculateTotals;
            RcpLineRec.MODIFY;
            RcpLineRec.CheckRecipeCharge;
            RcpLineRec.UpdateEstLines;
          END;
          HelplineRec.Changed := FALSE;
          HelplineRec.MODIFY;
        UNTIL HelplineRec.NEXT = 0;
      END;

      EstRec.UpdateLogbook(CurrEst);
      COMMIT;
      Status.CLOSE;
    END;

    PROCEDURE "-2-"@1210190014();
    BEGIN
    END;

    PROCEDURE UpdateAskForQuote@1210190008();
    VAR
      HelpLineRec2@1210190000 : Record 11012367;
    BEGIN
      TESTFIELD(Compressed, TRUE);

      IF ("Recipe Line" = 0) THEN BEGIN
        EstLineRec.GET("Estimate No.", "Sub-Estimate No.", "Part Group", Part, "Estimate Line");
        IF (EstLineRec."Ask for Quote" <> "Ask for Quote") THEN BEGIN
          EstLineRec.VALIDATE("Ask for Quote", "Ask for Quote");
          EstLineRec.MODIFY;
        END;
      END ELSE BEGIN
        RcpLineRec.GET("Estimate No.", "Sub-Estimate No.", "Part Group", Part,
          "Estimate Line", "Recipe Group", Recipe, "Recipe Line");
        IF (RcpLineRec."Ask for Quote" <> "Ask for Quote") THEN BEGIN
          RcpLineRec.VALIDATE("Ask for Quote", "Ask for Quote");
          RcpLineRec.MODIFY;
        END;
      END;

      HelplineRec.RESET;
      HelplineRec.SETCURRENTKEY("Estimate No.", "Text Composition", "Ask for Quote", "Price Agreement", "Zero Line");
      HelplineRec.SETRANGE("Estimate No.", "Estimate No.");
      HelplineRec.SETRANGE("Text Composition", "Text Composition");
      HelplineRec.SETRANGE("Price Agreement", "Price Agreement");
      HelplineRec.SETRANGE(Compressed, FALSE);  // Skip current record
      IF HelplineRec.FINDSET THEN BEGIN
        REPEAT
          IF (HelplineRec."Recipe Line" = 0) THEN BEGIN
            EstLineRec.GET(HelplineRec."Estimate No.", HelplineRec."Sub-Estimate No.",
              HelplineRec."Part Group", HelplineRec.Part, HelplineRec."Estimate Line");
            IF (EstLineRec."Ask for Quote" <> "Ask for Quote") THEN BEGIN
              EstLineRec.VALIDATE("Ask for Quote", "Ask for Quote");
              EstLineRec.MODIFY;
            END;
          END ELSE BEGIN
            RcpLineRec.GET(HelplineRec."Estimate No.", HelplineRec."Sub-Estimate No.",
              HelplineRec."Part Group", HelplineRec.Part, HelplineRec."Estimate Line",
              HelplineRec."Recipe Group", HelplineRec.Recipe, HelplineRec."Recipe Line");
            IF (RcpLineRec."Ask for Quote" <> "Ask for Quote") THEN BEGIN
              RcpLineRec.VALIDATE("Ask for Quote", "Ask for Quote");
              RcpLineRec.MODIFY;
            END;
          END;
          IF (HelplineRec."Ask for Quote" <> "Ask for Quote") THEN BEGIN
            HelpLineRec2 := HelplineRec;
            IF HelpLineRec2.FIND('=') THEN BEGIN
              HelpLineRec2."Ask for Quote" := "Ask for Quote";
              HelpLineRec2.MODIFY;
            END;
          END;
        UNTIL HelplineRec.NEXT = 0;
      END;
    END;

    PROCEDURE UpdCompressedOnChangeAskQuote@1210190010();
    BEGIN
      HelplineRec.RESET;
      HelplineRec.SETCURRENTKEY("Estimate No.", "Text Composition", "Ask for Quote", "Price Agreement", "Zero Line");
      HelplineRec.SETRANGE("Estimate No.", "Estimate No.");
      HelplineRec.SETRANGE("Text Composition", "Text Composition");
      HelplineRec.SETRANGE("Price Agreement", "Price Agreement");
      HelplineRec.SETRANGE("Ask for Quote", "Ask for Quote");
      HelplineRec.SETRANGE(Compressed, TRUE);
      IF HelplineRec.FINDFIRST THEN BEGIN
        IF NOT (HelplineRec.NEXT = 0) THEN BEGIN
          HelplineRec.Compressed := FALSE;
          HelplineRec.MODIFY;
        END;
      END;
    END;

    PROCEDURE FillPurchRouteRefFilterCompres@1210190006() : Code[1024];
    VAR
      lvTmpRouteRefRec@1210190000 : TEMPORARY Record 11012079;
      lvRefFilter@1210190001 : Code[1024];
    BEGIN
      lvRefFilter := '';

      HelplineRec.RESET;
      HelplineRec.SETCURRENTKEY("Estimate No.", "Text Composition", "Ask for Quote", "Price Agreement", "Zero Line");
      HelplineRec.SETRANGE("Estimate No.", "Estimate No.");
      HelplineRec.SETRANGE("Text Composition", "Text Composition");
      HelplineRec.SETRANGE("Ask for Quote", "Ask for Quote");
      HelplineRec.SETRANGE("Price Agreement", "Price Agreement");
      HelplineRec.SETFILTER("Purchase Route Reference", '<>%1', '');
      IF HelplineRec.FINDSET THEN BEGIN
        REPEAT
          lvTmpRouteRefRec.SETRANGE(Type, lvTmpRouteRefRec.Type::Reference);
          lvTmpRouteRefRec.SETRANGE("Reference No.", HelplineRec."Purchase Route Reference");
          IF NOT lvTmpRouteRefRec.FIND('-') THEN BEGIN
            lvTmpRouteRefRec.Type := lvTmpRouteRefRec.Type::Reference;
            lvTmpRouteRefRec."Reference No." := HelplineRec."Purchase Route Reference";
            lvTmpRouteRefRec."Entry No." := 1;
            lvTmpRouteRefRec.INSERT;
          END;
        UNTIL HelplineRec.NEXT = 0;
      END;

      lvTmpRouteRefRec.RESET;
      lvTmpRouteRefRec.SETRANGE(Type, lvTmpRouteRefRec.Type::Reference);
      IF lvTmpRouteRefRec.FIND('-') THEN BEGIN
        REPEAT
          IF (STRLEN(lvRefFilter) + STRLEN(lvTmpRouteRefRec."Reference No.")) <= MAXSTRLEN(lvRefFilter) THEN BEGIN
            IF lvRefFilter <> '' THEN
              lvRefFilter := lvRefFilter +'|';
            lvRefFilter := lvRefFilter + lvTmpRouteRefRec."Reference No.";
          END;
        UNTIL lvTmpRouteRefRec.NEXT = 0;
      END;

      EXIT(lvRefFilter);
    END;

    PROCEDURE "-3-"@1210190015();
    BEGIN
    END;

    PROCEDURE ComposeText@1210190016(MainRec@1210190000 : Record 11012367) TextComp : Code[250];
    VAR
      sep@1100485000 : Text[30];
    BEGIN
      sep := '~';
      TextComp := '';

      TextComp := TextComp + MainRec.Description + sep;
      TextComp := TextComp + MainRec."Unit of Measure" + sep;
      TextComp := TextComp + MainRec."Rate Code" + sep;
      IF MainRec."Trade Item" <> '' THEN
        TextComp := TextComp + MainRec."Trade Item" + sep
      ELSE
        IF MainRec."Basic Item" <> '' THEN
          TextComp := TextComp + MainRec."Basic Item" + sep
        ELSE
          IF MainRec."Item No." <> '' THEN
            TextComp := TextComp + MainRec."Item No." + sep
          ELSE
            TextComp := TextComp + MainRec."Cost Object" + sep;

      TextComp := COPYSTR(TextComp, 1, MAXSTRLEN(MainRec."Text Composition"));  //100+10+10+20
      EXIT(TextComp);
    END;

    PROCEDURE CalculateDiscount@1100485000();
    BEGIN
      IF "Gross Price" <> 0 THEN BEGIN
        "Discount %" := (("Gross Price" - "Material Price") / "Gross Price") * 100;
      END ELSE BEGIN
        IF "Discount %" <> 100 THEN BEGIN
          "Gross Price" := "Material Price" / ((100 - "Discount %") / 100);
        END ELSE BEGIN
          "Gross Price" := "Material Price";
          "Material Price" := 0;
        END;
      END;
    END;

    PROCEDURE CalculateNetPrice@13();
    BEGIN
      "Material Price" := "Gross Price" - (("Gross Price"/100) * "Discount %");
    END;

    PROCEDURE CalculateCompressedTotals@1210190009(VAR lvQuantity@1100485001 : Decimal;VAR lvHours@1100485002 : Decimal;VAR lvLabor@1100485003 : Decimal;VAR lvGross@1100485007 : Decimal;VAR lvMaterial@1100485004 : Decimal;VAR lvSubcon@1100485005 : Decimal;VAR lvPlant@1100485006 : Decimal;VAR lvAmount@1100485000 : Decimal);
    BEGIN
      lvQuantity := 0;
      lvHours := 0;
      lvLabor := 0;
      lvGross := 0;
      lvMaterial := 0;
      lvSubcon := 0;
      lvPlant := 0;
      lvAmount := 0;

      HelplineRec.RESET;
      HelplineRec.SETCURRENTKEY("Estimate No.", "Compress No.");
      HelplineRec.SETRANGE("Estimate No.", "Estimate No.");
      HelplineRec.SETRANGE("Compress No.", "Compress No.");
      IF HelplineRec.FINDSET THEN BEGIN
        REPEAT
          lvQuantity := lvQuantity + HelplineRec."Cumulative Quantity";
          lvHours := lvHours + HelplineRec.Hours;
          lvLabor := lvLabor + HelplineRec."Labor Amount";
          lvGross := lvGross + HelplineRec."Gross Amount";
          lvMaterial := lvMaterial + HelplineRec."Material Amount";
          lvSubcon := lvSubcon + HelplineRec."Subcontracting Amount";
          lvPlant := lvPlant + HelplineRec."Plant Amount";
          lvAmount := lvAmount + HelplineRec.Amount;
        UNTIL HelplineRec.NEXT = 0;
      END;
    END;

    PROCEDURE HandleLookupUnit@1210190011();
    VAR
      ItemUnitRec@1210190000 : Record 5404;
      lvUnit@1210190001 : Code[10];
    BEGIN
      lvUnit := ItemUnitRec.HandleLookupUnit("Item No.", "Basic Item", "Trade Item", Manufacturer, "Vendor (Trade Item)");
      IF (lvUnit <> '') AND (lvUnit <> "Unit of Measure") THEN BEGIN
        xRec."Unit of Measure" := "Unit of Measure";
        VALIDATE("Unit of Measure", lvUnit);
        IF CurrFieldNo = 0 THEN
          CheckItemUnitConversion(Rec, xRec);
      END;
    END;

    PROCEDURE CheckItemUnitConversion@1210190007(VAR MainNewRec@1210190006 : Record 11012367;MainOldRec@1210190007 : Record 11012367);
    VAR
      ItemRec@1210190004 : Record 27;
      UnitFactor@1210190005 : Decimal;
      UnitFactorOld@1210190003 : Decimal;
      UnitFactorNew@1210190002 : Decimal;
      UnitControl@1210190001 : Codeunit 5402;
      ValidateCu@1210190008 : Codeunit 11012033;
    BEGIN
      WITH MainNewRec DO BEGIN
        UnitFactorOld := 1;
        UnitFactorNew := 1;
        IF "Item No." <> '' THEN BEGIN
          ItemRec.GET("Item No.");
          UnitFactorOld := UnitControl.GetQtyPerUnitOfMeasure(ItemRec, MainOldRec."Unit of Measure");
          UnitFactorNew := UnitControl.GetQtyPerUnitOfMeasure(ItemRec, "Unit of Measure");
          UnitFactor := UnitFactorOld;
          ValidateCu.ValidateUnit(ItemTypeOpt::Item,
            "Item No.","Basic Item","Trade Item",Manufacturer,"Vendor (Trade Item)",
            Quantity,"Unit of Measure",UnitFactor);
        END ELSE BEGIN
          IF "Trade Item" <> '' THEN BEGIN
            ValidateCu.ValidateUnit(ItemTypeOpt::"Trade Item",
              "Item No.","Basic Item","Trade Item",Manufacturer,"Vendor (Trade Item)",
              Quantity,"Unit of Measure",UnitFactorNew);
          END ELSE BEGIN
            IF "Basic Item" <> '' THEN BEGIN
              ValidateCu.ValidateUnit(ItemTypeOpt::"Basic Item",
                "Item No.","Basic Item","Trade Item",Manufacturer,"Vendor (Trade Item)",
                Quantity,"Unit of Measure",UnitFactorNew);
            END;
          END;
        END;
        IF (UnitFactorNew * UnitFactorOld) <> 0 THEN BEGIN
          VALIDATE("Gross Price", ("Gross Price" * UnitFactorNew / UnitFactorOld));
          "Unit Factor" := UnitFactorNew;
        END;
      END;
    END;

    PROCEDURE CheckUnitFactor@1210190012() lvFactor : Decimal;
    BEGIN
      lvFactor := 1;

      WITH HelplineRec DO BEGIN
        IF TradeItemRec.GET("Vendor (Trade Item)", "Trade Item") THEN BEGIN
          IF "Unit of Measure" = UPPERCASE(TradeItemRec."Packaging Unit") THEN
            IF TradeItemRec."Qty. per Unit of Measure" <> 0 THEN
              lvFactor := TradeItemRec."Qty. per Unit of Measure";
          EXIT(lvFactor);
        END;
        IF BasicItemRec.GET(Manufacturer, "Basic Item") THEN BEGIN
          IF "Unit of Measure" = UPPERCASE(BasicItemRec."Packaging Unit") THEN
            IF BasicItemRec."Qty. per Unit of Measure" <> 0 THEN
              lvFactor := BasicItemRec."Qty. per Unit of Measure";
          EXIT(lvFactor);
        END;
        IF ItemUnitRec.GET("Item No.", "Unit of Measure") THEN BEGIN
          IF ItemUnitRec."Qty. per Unit of Measure" <> 0 THEN
            lvFactor := ItemUnitRec."Qty. per Unit of Measure";
          EXIT(lvFactor);
        END;
      END;

      EXIT(lvFactor);
    END;

    PROCEDURE ValidateItem@3(LTypeArtOpt@11012000 : 'Item,Basic Item,Trade Item');
    VAR
      Desc1Txt@1210190001 : Text[50];
      Desc2Txt@1210190003 : Text[50];
      dummyDate@1210190005 : Date;
      ValidateCu@1210190004 : Codeunit 11012033;
      lvRefDate@1100485000 : Date;
      lvDiscRef1@1100525001 : Code[20];
      lvDiscRef2@1100525002 : Code[20];
      lvRefPrio@1100525000 : Code[10];
      lvDiscType@1100525003 : 'Purchase,Sales';
    BEGIN
      IF ("Purchase Route Reference" = '') AND ("Price Agreement" = FALSE) THEN BEGIN
        EstRec.GET("Estimate No.");
        lvRefDate := ValidateCu.GetRefDateEstimate(EstRec);
        ValidateCu.GetRefDiscEstimate(EstRec, lvDiscRef1, lvDiscRef2, lvDiscType::Purchase);
        lvRefPrio := ValidateCu.GetRefPrioEstimate(EstRec, lvDiscType::Purchase);

        ValidateCu.ValidateItem(
          LTypeArtOpt, "Trade Item", "Item No.", Manufacturer, "Vendor (Trade Item)", "Basic Item",
          "Cost Object", Desc1Txt, "Unit of Measure", "Material Price",
          "Discount %", dummyDate, "Gross Price", Desc2Txt, "Cost Component",
          EstRec."Purch Discount Term Group 1", EstRec."Purch Discount Term Group 2", lvRefDate, lvRefPrio);

        "Text Composition" := ComposeText(Rec);
        IF Desc2Txt = '' THEN
          Description := Desc1Txt
        ELSE
          Description := COPYSTR((Desc1Txt + '\' + Desc2Txt), 1, MAXSTRLEN(Description));

        ValidateCu.GetRefDiscEstimate(EstRec, lvDiscRef1, lvDiscRef2, lvDiscType::Sales);
        lvRefPrio := ValidateCu.GetRefPrioEstimate(EstRec, lvDiscType::Sales);
        ValidateCu.GetSalesDiscount(
          EstRec."Customer No.", "Item No.", "Basic Item", "Trade Item", Manufacturer, "Vendor (Trade Item)",
          "Material Price", "Discount %", "Gross Price", lvRefDate, EstRec."Customer Disc. Group",
          lvDiscRef1,lvDiscRef2,lvRefPrio);
      END;

      CASE LTypeArtOpt OF
        LTypeArtOpt::Item:
          BEGIN
            IF NOT ItemRec.GET("Item No.") THEN ItemRec.INIT;
            IF ItemRec."Sub Operation Code" <> '' THEN
              VALIDATE("Sub Operation Code", ItemRec."Sub Operation Code");
          END;
        LTypeArtOpt::"Basic Item":
          BEGIN
            IF NOT BasicItemRec.GET(Manufacturer, "Basic Item") THEN BasicItemRec.INIT;
            IF BasicItemRec."Sub Operation Code" <> '' THEN
              VALIDATE("Sub Operation Code", BasicItemRec."Sub Operation Code");
          END;
        LTypeArtOpt::"Trade Item":
          BEGIN
            IF NOT TradeItemRec.GET("Vendor (Trade Item)", "Trade Item") THEN TradeItemRec.INIT;
            IF TradeItemRec."Sub Operation Code" <> '' THEN
              VALIDATE("Sub Operation Code", TradeItemRec."Sub Operation Code");
          END;
      END;
    END;

    PROCEDURE CalculateTotals@1();
    BEGIN
      Hours := "Time Quantity" * "Cumulative Quantity" * Norm;
      IF "Cum. Adj. Factor Hours" <> 0 THEN
        Hours := Hours * "Cum. Adj. Factor Hours";
      "Labor Amount"  := ROUND(Hours * Rate);
      IF "Rate Type" = "Rate Type"::Minuts THEN
        Hours := Hours * "Team Size" / 60;

      "Material Amount" := "Time Quantity" * "Cumulative Quantity" * "Material Price";
      "Gross Amount" := "Time Quantity" * "Cumulative Quantity" * "Gross Price";
      "Subcontracting Amount" := "Time Quantity" * "Cumulative Quantity" * "Subcontracting Price";
      "Plant Amount" := "Time Quantity" * "Cumulative Quantity" * "Plant Price";
      IF "Cum. Adj. Factor Material" <> 0 THEN BEGIN
        "Material Amount" := "Material Amount" * "Cum. Adj. Factor Material";
        "Gross Amount" := "Gross Amount" * "Cum. Adj. Factor Material";
      END;
      IF "Cum. Adj. Factor Subcontr." <> 0 THEN
        "Subcontracting Amount" := "Subcontracting Amount" * "Cum. Adj. Factor Subcontr.";
      IF "Cum. Adj. Factor Plant" <> 0 THEN
        "Plant Amount" := "Plant Amount" * "Cum. Adj. Factor Plant";
      "Material Amount" := ROUND("Material Amount");
      "Gross Amount" := ROUND("Gross Amount");
      "Subcontracting Amount" := ROUND("Subcontracting Amount");
      "Plant Amount" := ROUND("Plant Amount");
      Amount := "Labor Amount" + "Material Amount" + "Subcontracting Amount" + "Plant Amount";
    END;

    PROCEDURE "-4-"@1100485001();
    BEGIN
    END;

    PROCEDURE OrgPurchAction@1100525001(ICurrEst@1210190005 : Code[20];iPurchAction@1100528500 : Code[20]);
    BEGIN
      IF NOT EstRec.GET(ICurrEst) THEN
        EXIT;
      IF NOT EstPurchActRec.GET(ICurrEst, iPurchAction) THEN
        EXIT;  //db, 15-03-19

      OrgPurchAction2(ICurrEst);
      PAGE.RUNMODAL(PAGE::"Estimate Purchase Action", EstPurchActRec);
    END;

    PROCEDURE OrgPurchAction2@1100485002(ICurrEst@1210190005 : Code[20]);
    BEGIN
      HelplineRec.RESET;
      HelplineRec.SETRANGE("Estimate No.", ICurrEst);
      HelplineRec.DELETEALL;

      Status.OPEN(Text000 + Text001);
      //db.sn, 03-07-17
      EstRec.GET(ICurrEst);
      IF EstRec."RAW Estimate" THEN BEGIN
        FillBufferWithRawEstLines(ICurrEst);
      END ELSE BEGIN
        FillBufferWithEstLines(ICurrEst);
        FillBufferWithRcpLines(ICurrEst);
      END;
      //db.en, 03-07-17
      Compress(ICurrEst);
      Status.CLOSE;
      COMMIT;

      EstPurchActRec.FILTERGROUP(3);
      EstPurchActRec.SETRANGE("Estimate No.", ICurrEst);
      EstPurchActRec.FILTERGROUP(0);
    END;

    PROCEDURE OrgPurchAction3@1100525002(ICurrEst@1210190005 : Code[20]);
    BEGIN
      HelplineRec.RESET;
      HelplineRec.SETRANGE("Estimate No.", ICurrEst);
      HelplineRec.DELETEALL;
    END;

    PROCEDURE AssignToPurchaseAction@1100485004(PurchAction@11012000 : Code[20]);
    VAR
      lvEstHelpLineRec@1210190000 : Record 11012367;
    BEGIN
      lvEstHelpLineRec.COPY(Rec);
      WITH lvEstHelpLineRec DO BEGIN
        SETRANGE("Estimate No.", "Estimate No.");
        SETFILTER("Purchase Action", '%1', '');

        IF ISEMPTY THEN BEGIN
          MESSAGE(Text011)
        END ELSE BEGIN
          IF CONFIRM(Text008,TRUE,PurchAction) THEN BEGIN
            FINDSET(TRUE,FALSE);
            REPEAT;
              "Purchase Action" := PurchAction;
              MODIFY;
              UpdateExtPurchaseAction(lvEstHelpLineRec, TRUE)
            UNTIL NEXT = 0;
          END;
        END;
      END;
      CLEARMARKS;
    END;

    PROCEDURE DisconnectFromPurchAction@1100485003(PurchAction@1100485001 : Code[20]);
    VAR
      lvEstHelpLineRec@1100485002 : Record 11012367;
    BEGIN
      lvEstHelpLineRec.COPY(Rec);
      WITH lvEstHelpLineRec DO BEGIN
        SETRANGE("Estimate No.", "Estimate No.");
        SETRANGE("Purchase Action", PurchAction);

        IF ISEMPTY THEN
          MESSAGE(Text011)
        ELSE BEGIN
          IF CONFIRM(Text009,TRUE,PurchAction) THEN BEGIN
            FINDSET(TRUE,FALSE);
            REPEAT;
              "Purchase Action" := '';
              MODIFY(TRUE);
              UpdateExtPurchaseAction(lvEstHelpLineRec, FALSE)
            UNTIL NEXT = 0;
          END;
        END;
      END;
      CLEARMARKS;
    END;

    PROCEDURE UpdateExtPurchaseAction@1100485005(lvHelpLineRec@1100485000 : Record 11012367;lvAddTo@1100485001 : Boolean);
    BEGIN
      EstRec.GET(lvHelpLineRec."Estimate No.");
      IF EstRec."RAW Estimate" THEN BEGIN
        UpdatePurchActionRawEstLine(lvHelpLineRec, lvAddTo);
      END ELSE BEGIN
        IF lvHelpLineRec."Recipe Line" = 0 THEN BEGIN
          UpdatePurchActionEstLine(lvHelpLineRec, lvAddTo);
        END ELSE BEGIN
          UpdatePurchActionRcpLine(lvHelpLineRec, lvAddTo);
        END;
      END;
    END;

    PROCEDURE UpdatePurchActionRawEstLine@1100525009(lvHelpLineRec@1100485000 : Record 11012367;lvAddTo@1100485001 : Boolean);
    VAR
      lvRawEstLineRec@1100525000 : Record 11125698;
    BEGIN
      WITH lvRawEstLineRec DO BEGIN
        GET(lvHelpLineRec."Estimate No.", lvHelpLineRec.Part, lvHelpLineRec."Estimate Line");
        CASE lvHelpLineRec."Cost Type" OF
          //DP01676.sn
          lvHelpLineRec."Cost Type"::Material,
          lvHelpLineRec."Cost Type"::Subcontracting,
          lvHelpLineRec."Cost Type"::Plant:
          //DP01676.en
            BEGIN
              IF lvAddTo THEN BEGIN
                "Purchase Action" := lvHelpLineRec."Purchase Action";
                "Purchase Phase" := lvHelpLineRec."Purchase Phase";
                "Purchase Action Status" := lvHelpLineRec."Purchase Action Status";
              END ELSE BEGIN
                "Purchase Action" := '';
                "Purchase Phase" := '';
                "Purchase Action Status" := "Purchase Action Status"::Concept;
              END;
              "Purch. Action Appr. Date" := 0D;
              Advised := FALSE;
            END;
        END;
        MODIFY;
      END;
    END;

    PROCEDURE UpdatePurchActionEstLine@1100525014(lvHelpLineRec@1100485000 : Record 11012367;lvAddTo@1100485001 : Boolean);
    VAR
      lvEstLineRec@1210190002 : Record 11072072;
    BEGIN
      WITH lvEstLineRec DO BEGIN
        GET(lvHelpLineRec."Estimate No.", lvHelpLineRec."Sub-Estimate No.", lvHelpLineRec."Part Group",
            lvHelpLineRec.Part, lvHelpLineRec."Estimate Line");
        CASE lvHelpLineRec."Cost Type" OF
          //DP01676.sn
          lvHelpLineRec."Cost Type"::Material,
          lvHelpLineRec."Cost Type"::Subcontracting,
          lvHelpLineRec."Cost Type"::Plant:
          //DP01676.en
            BEGIN
              IF lvAddTo THEN BEGIN
                "Purchase Action" := lvHelpLineRec."Purchase Action";
                "Purchase Phase" := lvHelpLineRec."Purchase Phase";
                "Purchase Action Status" := lvHelpLineRec."Purchase Action Status";
              END ELSE BEGIN
                "Purchase Action" := '';
                "Purchase Phase" := '';
                "Purchase Action Status" := "Purchase Action Status"::Concept;
              END;
              "Purch. Action Appr. Date" := 0D;
              Advised := FALSE;
            END;
        END;
        MODIFY;
      END;
    END;

    PROCEDURE UpdatePurchActionRcpLine@1100525018(lvHelpLineRec@1100485000 : Record 11012367;lvAddTo@1100485001 : Boolean);
    VAR
      lvRcpLineRec@1210190002 : Record 11072075;
    BEGIN
      WITH lvRcpLineRec DO BEGIN
        GET(lvHelpLineRec."Estimate No.", lvHelpLineRec."Sub-Estimate No.", lvHelpLineRec."Part Group",
            lvHelpLineRec.Part, lvHelpLineRec."Estimate Line", lvHelpLineRec."Recipe Group",
            lvHelpLineRec.Recipe, lvHelpLineRec."Recipe Line");
        CASE lvHelpLineRec."Cost Type" OF
          //DP01676.sn
          lvHelpLineRec."Cost Type"::Material,
          lvHelpLineRec."Cost Type"::Subcontracting,
          lvHelpLineRec."Cost Type"::Plant:
          //DP01676.en
            BEGIN
              IF lvAddTo THEN BEGIN
                "Purchase Action" := lvHelpLineRec."Purchase Action";
                "Purchase Phase" := lvHelpLineRec."Purchase Phase";
                "Purchase Action Status" := lvHelpLineRec."Purchase Action Status";
              END ELSE BEGIN
                "Purchase Action" := '';
                "Purchase Phase" := '';
                "Purchase Action Status" := "Purchase Action Status"::Concept;
              END;
              "Purch. Action Appr. Date" := 0D;
              Advised := FALSE;
            END;
        END;
        MODIFY;
      END;
    END;

    BEGIN
    END.
  }
}

