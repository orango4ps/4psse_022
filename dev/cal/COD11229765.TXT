OBJECT Codeunit 11229765 eVerbinding Connection Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            //OnRun is only for testing
            //SendDocument('D:\EXPORT\eVerbinding\CRONUS Nederland BV - Creditnota 104001 nr11.XML','Test creditnota', 'NL:KVK:00006696','bverbeek@4ps.nl');
            //GetDocuments('D:\IMPORT\eVerbinding');
          END;

  }
  CODE
  {
    VAR
      DocExcheVerbindingSetup@1100528505 : Record 11229765;
      ConnectionSuccessfullMsg@1100528503 : TextConst 'DEU=Der Verbindungstest war erfolgreich. Die Einstellungen sind gÅltig.;ENU=The connection test was successful. The settings are valid.;NLD=De verbindingstest is geslaagd. De instellingen zijn geldig.;NOR=Tilkoblingstesten er fullfõrt. Innstillingene er gyldige.;SVE=Anslutningstestet har utfîrts. InstÑllningarna Ñr giltiga.';
      WindowMsg@1100528502 : TextConst 'DEU=Rechnung Nr. #1########## wird importiert;ENU=Importing Invoice No. #1##########;NLD=Importeren factuurnr.  #1##########';
      SecurityToken@1100530800 : Text;
      NoBodyInPayloadErr@1100530801 : TextConst 'DEU=Kein Body in payload.;ENU=No body in payload.;NLD=Geen body in payload.';
      EVerbindingAPIErr@1100530802 : TextConst 'DEU=eVerbinding zeigt den folgenden Fehler an: [%1] %2.;ENU=eVerbinding API returned error: [%1] %2.;NLD=eVerbdining geeft de volgende fout: [%1] %2.';
      CheckCredMsg@1100530803 : TextConst 'DEU=öberprÅfen Sie Ihre Anmeldedaten.;ENU=Please, check your credentials.;NLD=Check uw inloggegevens.';
      NoSecurityTokenErr@1100530804 : TextConst 'DEU=Kann keinen gesicherten Token vom Payload empfangen.;ENU=Could not get security token from payload.;NLD=Kan geen beveiligde token ontvangen van de payload.';

    PROCEDURE CheckConnection@1100528500();
    BEGIN
      MakeConnection;

      MESSAGE(ConnectionSuccessfullMsg);
    END;

    LOCAL PROCEDURE MakeConnection@1100528503();
    BEGIN
      DocExcheVerbindingSetup.GET;
      DocExcheVerbindingSetup.TESTFIELD("Consumer Key");
      DocExcheVerbindingSetup.TESTFIELD("Consumer Secret");
      DocExcheVerbindingSetup.TESTFIELD("Created by E-mail");
      DocExcheVerbindingSetup.TESTFIELD("Company-ID eVerbinding");
      DocExcheVerbindingSetup.TESTFIELD("Subscription Key");
      DocExcheVerbindingSetup.TESTFIELD("API Endpoint URL");
      DocExcheVerbindingSetup.TESTFIELD("API Endpoint Namespace");

      GetSecurityToken;
    END;

    PROCEDURE SendDocument@1100528501(ServerFilePath@1100528501 : Text;Subject@1100528503 : Text;Recipient@1100528506 : Text;RecipientEmailId@1100528507 : Text);
    VAR
      XmlLinqElement@1100528504 : DotNet "'System.Xml.Linq, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.Linq.XElement";
      ServerFileHelper@1100528502 : DotNet "'mscorlib'.System.IO.File";
      XmlTxt@1100528500 : Text;
      XmlRequest@1100530807 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      MethodElement@1100530806 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      ViaSectionElement@1100530808 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      ToSectionElement@1100530809 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      XmlResponse@1100530805 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      RequestErrorText@1100530804 : Text;
      FaultCode@1100530803 : Text;
      FaultString@1100530802 : Text;
      ResponseBody@1100530801 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XmlNamespaceManager@1100530800 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
    BEGIN
      MakeConnection;

      XmlTxt := ServerFileHelper.ReadAllText(ServerFilePath);
      XmlLinqElement := XmlLinqElement.Parse(XmlTxt);

      DocExcheVerbindingSetup.GET;
      SetNameSpaceManager(XmlNamespaceManager);
      InitSOAPPayload(XmlRequest);

      InitMessageForMethod('SendDocument',XmlRequest,XmlNamespaceManager,MethodElement);

      AddMethodParameter('TemplateId','GLDT9223370666504283001RA000000006DTP2000001',XmlRequest,MethodElement);

      ViaSectionElement := XmlRequest.CreateElement('v3','Via',DocExcheVerbindingSetup."API Endpoint Namespace");
      AddMethodParameter('ReferenceId',DocExcheVerbindingSetup."Company-ID eVerbinding",XmlRequest,ViaSectionElement);
      MethodElement.AppendChild(ViaSectionElement);

      ToSectionElement := XmlRequest.CreateElement('v3','To',DocExcheVerbindingSetup."API Endpoint Namespace");
      AddMethodParameter('ReferenceId',Recipient,XmlRequest,ToSectionElement);
      AddMethodParameter('EmailAddress',RecipientEmailId,XmlRequest,ToSectionElement);
      MethodElement.AppendChild(ToSectionElement);

      AddMethodParameter('Subject',Subject,XmlRequest,MethodElement);
      AddMethodParameter('Payload',XmlLinqElement.ToString,XmlRequest,MethodElement);

      IF NOT SendRequestToWebService(XmlRequest,'SendDocument',XmlResponse,RequestErrorText) THEN
        ERROR(RequestErrorText);

      IF NOT GetSOAPBody(XmlResponse,ResponseBody,XmlNamespaceManager) THEN
        ERROR(NoBodyInPayloadErr);

      IF ProcessFault(ResponseBody,XmlNamespaceManager,FaultCode,FaultString) THEN
        ERROR(EVerbindingAPIErr,FaultCode,FaultString);
    END;

    PROCEDURE GetRecipient@1100528502(CustomerNo@1100528500 : Code[20]) RecipientCode : Text;
    VAR
      Customer@1100528501 : Record 18;
    BEGIN
      Customer.GET(CustomerNo);
      IF Customer."Government ID" <> '' THEN BEGIN
        RecipientCode := Customer."Government ID";
        WHILE STRLEN(RecipientCode) < MAXSTRLEN(Customer."Government ID") DO
          RecipientCode := '0' + RecipientCode;

        RecipientCode := 'NL:OIN:' + RecipientCode;
        EXIT;
      END;

      IF Customer.GLN <> '' THEN BEGIN
        RecipientCode := 'GLN:' + Customer.GLN;
        EXIT;
      END;

      IF Customer."VAT Registration No." <> '' THEN BEGIN
        RecipientCode := 'NL:VAT:' + Customer."VAT Registration No." ;
        EXIT;
      END;

      Customer.TESTFIELD("COC Registration No.");
      RecipientCode := Customer."COC Registration No.";
      WHILE STRLEN(RecipientCode) < 8 DO
        RecipientCode := '0' + RecipientCode;

      RecipientCode := 'NL:KVK:' + RecipientCode;
    END;

    PROCEDURE GetDocuments@1100528505(SaveToServerFilePath@1100528504 : Text;IncludeAlreadyDownloaded@1100528506 : Boolean);
    VAR
      DotNetDateTime@1100528508 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.DateTime";
      FromDate@1100528507 : Date;
      XmlRequest@1100530807 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      MethodElement@1100530806 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      PagingElement@1100530808 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      SearchElement@1100530809 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      CreatedOnElement@1100530811 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      TemplateElement@1100530810 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      XmlResponse@1100530805 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      RequestErrorText@1100530804 : Text;
      FaultCode@1100530803 : Text;
      FaultString@1100530802 : Text;
      ResponseBody@1100530801 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XmlNamespaceManager@1100530800 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
    BEGIN
      MakeConnection;

      DocExcheVerbindingSetup.GET;
      SetNameSpaceManager(XmlNamespaceManager);
      InitSOAPPayload(XmlRequest);

      InitMessageForMethod('GetInboxDocuments',XmlRequest,XmlNamespaceManager,MethodElement);

      PagingElement := XmlRequest.CreateElement('v3','Paging',DocExcheVerbindingSetup."API Endpoint Namespace");
      AddMethodParameter('Limit','50',XmlRequest,PagingElement);
      MethodElement.AppendChild(PagingElement);

      AddMethodParameter('EConnectPartyId',DocExcheVerbindingSetup."Company-ID eVerbinding",XmlRequest,MethodElement);

      SearchElement := XmlRequest.CreateElement('v3','Search',DocExcheVerbindingSetup."API Endpoint Namespace");

      CreatedOnElement := XmlRequest.CreateElement('v3','CreatedOn',DocExcheVerbindingSetup."API Endpoint Namespace");

      FromDate := CALCDATE('<-1M>',WORKDATE);
      DotNetDateTime := DotNetDateTime.DateTime(DATE2DMY(FromDate,3),DATE2DMY(FromDate,2),DATE2DMY(FromDate,1));

      AddMethodParameter('From',DotNetDateTime.ToString('yyyy-MM-ddTHH:mm:ssK'),XmlRequest,CreatedOnElement);
      SearchElement.AppendChild(CreatedOnElement);

      TemplateElement := XmlRequest.CreateElement('v3','Template',DocExcheVerbindingSetup."API Endpoint Namespace");
      AddMethodParameter('MasterId','GLDT9223370666504283001RA000000006DTP2000001',XmlRequest,TemplateElement);
      SearchElement.AppendChild(TemplateElement);

      MethodElement.AppendChild(SearchElement);

      IF NOT SendRequestToWebService(XmlRequest,'GetInboxDocuments',XmlResponse,RequestErrorText) THEN
        ERROR(RequestErrorText);

      IF NOT GetSOAPBody(XmlResponse,ResponseBody,XmlNamespaceManager) THEN
        ERROR(NoBodyInPayloadErr);

      IF ProcessFault(ResponseBody,XmlNamespaceManager,FaultCode,FaultString) THEN
        ERROR(EVerbindingAPIErr,FaultCode,FaultString);

      ProcessInboxDocuments(ResponseBody,XmlNamespaceManager,SaveToServerFilePath,IncludeAlreadyDownloaded);
    END;

    LOCAL PROCEDURE ProcessInboxDocuments@1100530834(VAR InboxDocumentsResponse@1100530800 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR XmlNamespaceManager@1100530803 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";SaveToServerFilePath@1100530805 : Text;IncludeAlreadyDownloaded@1100530804 : Boolean);
    VAR
      DocumentNodesList@1100530801 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      LatestStatusCode@1100530806 : Text;
      InboxDocumentResponse@1100530807 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLDOMManagement@1100530808 : Codeunit 6224;
      Window@1100530809 : Dialog;
      PayloadNode@1100530810 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      I@1100530811 : Integer;
    BEGIN
      DocumentNodesList := InboxDocumentsResponse.SelectNodes('/v3:GetInboxDocumentsResponse/v3:Results/v3:Document',XmlNamespaceManager);

      IF GUIALLOWED THEN
        Window.OPEN(WindowMsg);

      FOR I := 1 TO DocumentNodesList.Count DO BEGIN
        LatestStatusCode := XMLDOMManagement.FindNodeTextNs(InboxDocumentsResponse,'/v3:GetInboxDocumentsResponse/v3:Results/v3:Document['+ FORMAT(I) +']/v3:Status/v3:Code',XmlNamespaceManager);
        GetSingleInboxDocument(XMLDOMManagement.FindNodeTextNs(InboxDocumentsResponse,'/v3:GetInboxDocumentsResponse/v3:Results/v3:Document['+ FORMAT(I) +']/v3:ExternalId',XmlNamespaceManager),InboxDocumentResponse);

        IF IncludeAlreadyDownloaded OR (LatestStatusCode < '30') THEN BEGIN
          IF GUIALLOWED THEN
            Window.UPDATE(1,XMLDOMManagement.FindNodeTextNs(InboxDocumentResponse,'/v3:GetInboxDocumentResponse/v3:Details/v3:ExternalId',XmlNamespaceManager));

          IF XMLDOMManagement.FindNodeNs(InboxDocumentResponse,'/v3:GetInboxDocumentResponse/v3:Details/v3:Payload',XmlNamespaceManager,PayloadNode) THEN BEGIN
            WriteeVerbindingInvoice(
              PayloadNode.InnerXml,
              XMLDOMManagement.FindNodeTextNs(InboxDocumentResponse,'/v3:GetInboxDocumentResponse/v3:Details/v3:ExternalId',XmlNamespaceManager));

            IF SaveToServerFilePath <> '' THEN
              WriteXMLFile(
                SaveToServerFilePath + '\' + XMLDOMManagement.FindNodeTextNs(InboxDocumentResponse,'/v3:GetInboxDocumentResponse/v3:Details/v3:ExternalId',XmlNamespaceManager) + '.XML',
                PayloadNode.InnerText);
          END;
        END;
      END;

      IF GUIALLOWED THEN
        Window.CLOSE;
    END;

    LOCAL PROCEDURE GetSingleInboxDocument@1100530842(ExternalId@1100530800 : Text;VAR InboxDocumentResponse@1100530808 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      XmlRequest@1100530807 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      MethodElement@1100530806 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      XmlResponse@1100530805 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      FaultCode@1100530804 : Text;
      FaultString@1100530803 : Text;
      ResponseBody@1100530802 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XmlNamespaceManager@1100530801 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
      RequestErrorText@1100530809 : Text;
    BEGIN
      CLEAR(InboxDocumentResponse);
      DocExcheVerbindingSetup.GET;
      SetNameSpaceManager(XmlNamespaceManager);
      InitSOAPPayload(XmlRequest);

      InitMessageForMethod('GetInboxDocument',XmlRequest,XmlNamespaceManager,MethodElement);

      AddMethodParameter('ExternalId',ExternalId,XmlRequest,MethodElement);

      IF NOT SendRequestToWebService(XmlRequest,'GetInboxDocument',XmlResponse,RequestErrorText) THEN
        ERROR(RequestErrorText);

      IF NOT GetSOAPBody(XmlResponse,ResponseBody,XmlNamespaceManager) THEN
        ERROR(NoBodyInPayloadErr);

      IF ProcessFault(ResponseBody,XmlNamespaceManager,FaultCode,FaultString) THEN
        ERROR(EVerbindingAPIErr,FaultCode,FaultString);

      InboxDocumentResponse := InboxDocumentResponse.XmlDocument;
      InboxDocumentResponse.LoadXml(ResponseBody.InnerXml);
    END;

    LOCAL PROCEDURE WriteeVerbindingInvoice@1100528511(XMLText@1100528500 : Text;ExternalID@1100528507 : Text);
    VAR
      eVerbindingInvoice@1100528506 : Record 11229763;
      XmlNamespaceManager@1100528501 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
      XMLDocument@1100528502 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLDOMMgt@1100528503 : Codeunit 6224;
      NoOfLines@1100528504 : Integer;
      LineNo@1100528505 : Integer;
    BEGIN
      SetNameSpaceManager(XmlNamespaceManager);
      XMLDocument := XMLDocument.XmlDocument();
      XMLDocument.LoadXml(XMLText);

      IF WriteeVerbindingInvoiceHeader(XMLDocument,XmlNamespaceManager,XMLText,ExternalID,eVerbindingInvoice) THEN BEGIN
        NoOfLines := XMLDOMMgt.FindNodeCountNs(XMLDocument,'/inv:Invoice/cac:InvoiceLine',XmlNamespaceManager);
        IF NoOfLines > 0 THEN
          FOR LineNo := 1 TO NoOfLines DO
            WriteeVerbindingInvoiceLine(XMLDocument,XmlNamespaceManager,eVerbindingInvoice,LineNo);
      END;
    END;

    LOCAL PROCEDURE WriteeVerbindingInvoiceHeader@1100528513(VAR XMLDocument@1100528500 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR XmlNamespaceManager@1100528502 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";XMLText@1100528507 : Text;ExternalID@1100528505 : Text;VAR eVerbindingInvoice@1100528501 : Record 11229763) : Boolean;
    VAR
      XMLDOMMgt@1100528503 : Codeunit 6224;
      AttributesNode@1100528504 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      Outstream@1100528506 : OutStream;
      InvoiceNo@1100528508 : Code[30];
    BEGIN
      WITH eVerbindingInvoice DO BEGIN
        InvoiceNo := COPYSTR(XMLDOMMgt.FindNodeTextNs(XMLDocument,'/inv:Invoice/cbc:ID',XmlNamespaceManager),1,MAXSTRLEN("Invoice No."));
        IF GET(InvoiceNo) THEN
          EXIT(FALSE);

        INIT;
        "Invoice No." := InvoiceNo;
        "Invoice Type" := XMLDOMMgt.FindNodeTextNs(XMLDocument,'/inv:Invoice/cbc:InvoiceTypeCode',XmlNamespaceManager);
        "Related Purch. Order No." := XMLDOMMgt.FindNodeTextNs(XMLDocument,'/inv:Invoice/cac:OrderReference/cbc:ID',XmlNamespaceManager);
        IF EVALUATE("Invoice Date",XMLDOMMgt.FindNodeTextNs(XMLDocument,'/inv:Invoice/cbc:IssueDate',XmlNamespaceManager),9) THEN;
        IF EVALUATE("Due Date",XMLDOMMgt.FindNodeTextNs(XMLDocument,'/inv:Invoice/cbc:DueDate',XmlNamespaceManager),9) THEN;
        IF "Due Date" = 0D THEN
          IF EVALUATE("Due Date",XMLDOMMgt.FindNodeTextNs(XMLDocument,'/inv:Invoice/cac:PaymentMeans/cbc:PaymentDueDate',XmlNamespaceManager),9) THEN;

        //Find KVK or GLN Vendor
        IF XMLDOMMgt.FindNodeNs(XMLDocument,'/inv:Invoice/cac:AccountingSupplierParty/cac:Party/cbc:EndpointID',XmlNamespaceManager,AttributesNode) THEN
          CASE XMLDOMMgt.GetAttributeValue(AttributesNode,'schemeID') OF
            'GLN': "GLN Vendor" := FindValidGLN(XMLDOMMgt.FindNodeTextNs(XMLDocument,'/inv:Invoice/cac:AccountingSupplierParty/cac:Party/cbc:EndpointID',XmlNamespaceManager));
            'KVK','NL:KVK','0106': "COC Registration No. Vendor" := XMLDOMMgt.FindNodeTextNs(XMLDocument,'/inv:Invoice/cac:AccountingSupplierParty/cac:Party/cbc:EndpointID',XmlNamespaceManager);
          END;
        IF ("GLN Vendor" = '') OR ("COC Registration No. Vendor" = '') THEN
          IF XMLDOMMgt.FindNodeNs(XMLDocument,'/inv:Invoice/cac:AccountingSupplierParty/cac:Party/cac:PartyIdentification/cbc:ID',XmlNamespaceManager,AttributesNode) THEN
            CASE XMLDOMMgt.GetAttributeValue(AttributesNode,'schemeID') OF
              'GLN':
                IF "GLN Vendor" = '' THEN
                  "GLN Vendor" := FindValidGLN(XMLDOMMgt.FindNodeTextNs(XMLDocument,'/inv:Invoice/cac:AccountingSupplierParty/cac:Party/cac:PartyIdentification/cbc:ID',XmlNamespaceManager));
              'KVK','NL:KVK','0106':
                IF "COC Registration No. Vendor" = '' THEN
                  "COC Registration No. Vendor" := XMLDOMMgt.FindNodeTextNs(XMLDocument,'/inv:Invoice/cac:AccountingSupplierParty/cac:Party/cac:PartyIdentification/cbc:ID',XmlNamespaceManager);
            END;
        IF ("GLN Vendor" = '') OR ("COC Registration No. Vendor" = '') THEN
          IF XMLDOMMgt.FindNodeNs(XMLDocument,'/inv:Invoice/cac:AccountingSupplierParty/cac:Party/cac:PartyLegalEntity/cbc:CompanyID',XmlNamespaceManager,AttributesNode) THEN
            CASE XMLDOMMgt.GetAttributeValue(AttributesNode,'schemeID') OF
              'GLN':
                IF "GLN Vendor" = '' THEN
                  "GLN Vendor" := FindValidGLN(XMLDOMMgt.FindNodeTextNs(XMLDocument,'/inv:Invoice/cac:AccountingSupplierParty/cac:Party/cac:PartyLegalEntity/cbc:CompanyID',XmlNamespaceManager));
              'KVK','NL:KVK','0106':
                IF "COC Registration No. Vendor" = '' THEN
                  "COC Registration No. Vendor" := XMLDOMMgt.FindNodeTextNs(XMLDocument,'Invoice/cac:AccountingSupplierParty/cac:Party/cac:PartyLegalEntity/cbc:CompanyID',XmlNamespaceManager);
            END;
        IF ("GLN Vendor" = '') OR ("COC Registration No. Vendor" = '') THEN
          IF XMLDOMMgt.FindNodeNs(XMLDocument,'/inv:Invoice/cac:AccountingSupplierParty/cac:Party/cac:PartyLegalEntity/cbc:CompanyID',XmlNamespaceManager,AttributesNode) THEN
            CASE XMLDOMMgt.GetAttributeValue(AttributesNode,'schemeAgencyName') OF
              'GLN':
                IF "GLN Vendor" = '' THEN
                  "GLN Vendor" := FindValidGLN(XMLDOMMgt.FindNodeTextNs(XMLDocument,'/inv:Invoice/cac:AccountingSupplierParty/cac:Party/cac:PartyLegalEntity/cbc:CompanyID',XmlNamespaceManager));
              'KVK','NL:KVK','0106':
                IF "COC Registration No. Vendor" = '' THEN
                  "COC Registration No. Vendor" := XMLDOMMgt.FindNodeTextNs(XMLDocument,'/inv:Invoice/cac:AccountingSupplierParty/cac:Party/cac:PartyLegalEntity/cbc:CompanyID',XmlNamespaceManager);
            END;

        "Currency Code" := XMLDOMMgt.FindNodeTextNs(XMLDocument,'/inv:Invoice/cbc:DocumentCurrencyCode',XmlNamespaceManager);
        "Payment Method" := XMLDOMMgt.FindNodeTextNs(XMLDocument,'/inv:Invoice/cac:PaymentMeans/cbc:PaymentMeansCode',XmlNamespaceManager);
        IF XMLDOMMgt.FindNodeNs(XMLDocument,'/inv:Invoice/cac:PaymentMeans/cac:PayeeFinancialAccount/cbc:ID',XmlNamespaceManager,AttributesNode) THEN
          IF XMLDOMMgt.GetAttributeValue(AttributesNode,'schemeID') = 'IBAN' THEN BEGIN
            "IBAN Vendor" := XMLDOMMgt.FindNodeTextNs(XMLDocument,'/inv:Invoice/cac:PaymentMeans/cac:PayeeFinancialAccount/cbc:ID',XmlNamespaceManager);
            "SWIFT Code Vendor" := XMLDOMMgt.FindNodeTextNs(
              XMLDocument,'/inv:Invoice/cac:PaymentMeans/cac:PayeeFinancialAccount/cac:FinancialInstitutionBranch/cac:FinancialInstitution/cbc:ID',XmlNamespaceManager);
          END;
        IF EVALUATE("Total Invoice Amount",XMLDOMMgt.FindNodeTextNs(XMLDocument,'/inv:Invoice/cac:LegalMonetaryTotal/cbc:TaxInclusiveAmount',XmlNamespaceManager),9) THEN;
        IF EVALUATE("Total Net Amount Lines",XMLDOMMgt.FindNodeTextNs(XMLDocument,'/inv:Invoice/cac:LegalMonetaryTotal/cbc:TaxExclusiveAmount',XmlNamespaceManager),9) THEN;
        "Total VAT amount" := "Total Invoice Amount" - "Total Net Amount Lines";

        "Name Vendor" := XMLDOMMgt.FindNodeTextNs(XMLDocument,'/inv:Invoice/cac:AccountingSupplierParty/cac:Party/cac:PartyName/cbc:Name',XmlNamespaceManager);
        BuildAddress("Address Vendor",
          XMLDOMMgt.FindNodeTextNs(XMLDocument,'/inv:Invoice/cac:AccountingSupplierParty/cac:Party/cac:PostalAddress/cbc:StreetName',XmlNamespaceManager),
          XMLDOMMgt.FindNodeTextNs(XMLDocument,'/inv:Invoice/cac:AccountingSupplierParty/cac:Party/cac:PostalAddress/cbc:AdditionalStreetName',XmlNamespaceManager),
          XMLDOMMgt.FindNodeTextNs(XMLDocument,'/inv:Invoice/cac:AccountingSupplierParty/cac:Party/cac:PostalAddress/cbc:BuildingNumber',XmlNamespaceManager));
        "City Vendor" := XMLDOMMgt.FindNodeTextNs(XMLDocument,'/inv:Invoice/cac:AccountingSupplierParty/cac:Party/cac:PostalAddress/cbc:CityName',XmlNamespaceManager);
        "Post Code Vendor" := XMLDOMMgt.FindNodeTextNs(XMLDocument,'/inv:Invoice/cac:AccountingSupplierParty/cac:Party/cac:PostalAddress/cbc:PostalZone',XmlNamespaceManager);
        "Country Vendor" := XMLDOMMgt.FindNodeTextNs(XMLDocument,'/inv:Invoice/cac:AccountingSupplierParty/cac:Party/cac:PostalAddress/cac:Country/cbc:IdentificationCode',XmlNamespaceManager);
        "VAT Identification Vendor" := XMLDOMMgt.FindNodeTextNs(XMLDocument,'/inv:Invoice/cac:AccountingSupplierParty/cac:Party/cac:PartyTaxScheme/cbc:CompanyID',XmlNamespaceManager);

        "Contact Person Vendor" := XMLDOMMgt.FindNodeTextNs(XMLDocument,'/inv:Invoice/cac:AccountingSupplierParty/cac:Party/cac:Contact/cbc:Name',XmlNamespaceManager);
        "Phone No. Contact Vendor" := XMLDOMMgt.FindNodeTextNs(XMLDocument,'/inv:Invoice/cac:AccountingSupplierParty/cac:Party/cac:Contact/cbc:Telephone',XmlNamespaceManager);


        //Find GLN Customer
        IF XMLDOMMgt.FindNodeNs(XMLDocument,'/inv:Invoice/cac:AccountingCustomerParty/cac:Party/cbc:EndpointID',XmlNamespaceManager,AttributesNode) THEN
          IF XMLDOMMgt.GetAttributeValue(AttributesNode,'schemeID') = 'GLN' THEN
            "GLN Buyer" := FindValidGLN(XMLDOMMgt.FindNodeTextNs(XMLDocument,'/inv:Invoice/cac:AccountingCustomerParty/cac:Party/cbc:EndpointID',XmlNamespaceManager));
        IF "GLN Buyer" = ''THEN
          IF XMLDOMMgt.FindNodeNs(XMLDocument,'/inv:Invoice/cac:AccountingCustomerParty/cac:Party/cac:PartyIdentification/cbc:ID',XmlNamespaceManager,AttributesNode) THEN
            IF XMLDOMMgt.GetAttributeValue(AttributesNode,'schemeID') = 'GLN' THEN
              "GLN Buyer" := FindValidGLN(XMLDOMMgt.FindNodeTextNs(XMLDocument,'/inv:Invoice/cac:AccountingCustomerParty/cac:Party/cac:PartyIdentification/cbc:ID',XmlNamespaceManager));
        IF "GLN Buyer" = ''THEN
          IF XMLDOMMgt.FindNodeNs(XMLDocument,'/inv:Invoice/cac:AccountingCustomerParty/cac:Party/cac:PartyLegalEntity/cbc:CompanyID',XmlNamespaceManager,AttributesNode) THEN
            IF XMLDOMMgt.GetAttributeValue(AttributesNode,'schemeID') = 'GLN' THEN
              "GLN Buyer" := FindValidGLN(XMLDOMMgt.FindNodeTextNs(XMLDocument,'/inv:Invoice/cac:AccountingCustomerParty/cac:Party/cac:PartyLegalEntity/cbc:CompanyID',XmlNamespaceManager));
        IF "GLN Buyer" = ''THEN
          IF XMLDOMMgt.FindNodeNs(XMLDocument,'/inv:Invoice/cac:AccountingCustomerParty/cac:Party/cac:PartyLegalEntity/cbc:CompanyID',XmlNamespaceManager,AttributesNode) THEN
            IF XMLDOMMgt.GetAttributeValue(AttributesNode,'schemeAgencyName') = 'GLN' THEN
              "GLN Buyer" := FindValidGLN(XMLDOMMgt.FindNodeTextNs(XMLDocument,'/inv:Invoice/cac:AccountingCustomerParty/cac:Party/cac:PartyLegalEntity/cbc:CompanyID',XmlNamespaceManager));

        "Name Buyer" := XMLDOMMgt.FindNodeTextNs(XMLDocument,'/inv:Invoice/cac:AccountingCustomerParty/cac:Party/cac:PartyName/cbc:Name',XmlNamespaceManager);
        BuildAddress("Address Buyer",
          XMLDOMMgt.FindNodeTextNs(XMLDocument,'/inv:Invoice/cac:AccountingCustomerParty/cac:Party/cac:PostalAddress/cbc:StreetName',XmlNamespaceManager),
          XMLDOMMgt.FindNodeTextNs(XMLDocument,'/inv:Invoice/cac:AccountingCustomerParty/cac:Party/cac:PostalAddress/cbc:AdditionalStreetName',XmlNamespaceManager),
          XMLDOMMgt.FindNodeTextNs(XMLDocument,'/inv:Invoice/cac:AccountingCustomerParty/cac:Party/cac:PostalAddress/cbc:BuildingNumber',XmlNamespaceManager));
        "City Buyer" := XMLDOMMgt.FindNodeTextNs(XMLDocument,'/inv:Invoice/cac:AccountingCustomerParty/cac:Party/cac:PostalAddress/cbc:CityName',XmlNamespaceManager);
        "Post Code Buyer" := XMLDOMMgt.FindNodeTextNs(XMLDocument,'/inv:Invoice/cac:AccountingCustomerParty/cac:Party/cac:PostalAddress/cbc:PostalZone',XmlNamespaceManager);
        "Country Buyer" := XMLDOMMgt.FindNodeTextNs(XMLDocument,'/inv:Invoice/cac:AccountingCustomerParty/cac:Party/cac:PostalAddress/cac:Country/cbc:IdentificationCode',XmlNamespaceManager);
        "VAT Identification Buyer" := XMLDOMMgt.FindNodeTextNs(XMLDocument,'/inv:Invoice/cac:AccountingCustomerParty/cac:Party/cac:PartyTaxScheme/cbc:CompanyID',XmlNamespaceManager);

        IF XMLDOMMgt.FindNodeNs(XMLDocument,'/inv:Invoice/cac:Delivery/cac:DeliveryLocation/cbc:ID',XmlNamespaceManager,AttributesNode) THEN
          IF XMLDOMMgt.GetAttributeValue(AttributesNode,'schemeID') = 'GLN' THEN
            "GLN Delivery" := FindValidGLN(XMLDOMMgt.FindNodeTextNs(XMLDocument,'/inv:Invoice/cac:Delivery/cac:DeliveryLocation/cbc:ID',XmlNamespaceManager));
        BuildAddress("Address Delivery",
          XMLDOMMgt.FindNodeTextNs(XMLDocument,'/inv:Invoice/cac:Delivery/cac:DeliveryLocation/cac:Address/cbc:StreetName',XmlNamespaceManager),
          XMLDOMMgt.FindNodeTextNs(XMLDocument,'/inv:Invoice/cac:Delivery/cac:DeliveryLocation/cac:Address/cbc:AdditionalStreetName',XmlNamespaceManager),
          XMLDOMMgt.FindNodeTextNs(XMLDocument,'/inv:Invoice/cac:Delivery/cac:DeliveryLocation/cac:Address/cbc:BuildingNumber',XmlNamespaceManager));
        "City Delivery" := XMLDOMMgt.FindNodeTextNs(XMLDocument,'/inv:Invoice/cac:Delivery/cac:DeliveryLocation/cac:Address/cbc:CityName',XmlNamespaceManager);
        "Post Code Delivery" := XMLDOMMgt.FindNodeTextNs(XMLDocument,'/inv:Invoice/cac:Delivery/cac:DeliveryLocation/cac:Address/cbc:PostalZone',XmlNamespaceManager);
        "Country Delivery" := XMLDOMMgt.FindNodeTextNs(XMLDocument,'/inv:Invoice/cac:Delivery/cac:DeliveryLocation/cac:Address/cac:Country/cbc:IdentificationCode',XmlNamespaceManager);
        IF EVALUATE("Delivery Date",XMLDOMMgt.FindNodeTextNs(XMLDocument,'/inv:Invoice/cac:Delivery/cbc:ActualDeliveryDate',XmlNamespaceManager),9) THEN;

        "Xml Message".CREATEOUTSTREAM(Outstream,TEXTENCODING::UTF8);
        Outstream.WRITETEXT(XMLText);

        "External ID" := ExternalID;
        "Import Date Time" := CURRENTDATETIME;
        "Process Status" := "Process Status"::Received;

        INSERT;
      END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE WriteeVerbindingInvoiceLine@1100528514(VAR XMLDocument@1100528501 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR XmlNamespaceManager@1100528500 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";eVerbindingInvoice@1100528506 : Record 11229763;LineNo@1100528505 : Integer);
    VAR
      eVerbindingInvoiceLine@1100528504 : Record 11229764;
      XMLDOMMgt@1100528503 : Codeunit 6224;
      AttributesNode@1100528502 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      WITH eVerbindingInvoiceLine DO BEGIN

        "Invoice No." := eVerbindingInvoice."Invoice No.";
        "Line No." := LineNo;

        "Item No. Vendor" := XMLDOMMgt.FindNodeTextNs(
          XMLDocument,'/inv:Invoice/cac:InvoiceLine['+FORMAT(LineNo)+']/cac:Item/cac:SellersItemIdentification/cbc:ID',XmlNamespaceManager);

        IF XMLDOMMgt.FindNodeNs(XMLDocument,'/inv:Invoice/cac:InvoiceLine['+FORMAT(LineNo)+']/cac:Item/cac:StandardItemIdentification/cbc:ID',XmlNamespaceManager,AttributesNode) THEN
          IF XMLDOMMgt.GetAttributeValue(AttributesNode,'schemeID') = 'GTIN' THEN
            "GTIN Item" := XMLDOMMgt.FindNodeTextNs(
              XMLDocument,'/inv:Invoice/cac:InvoiceLine['+FORMAT(LineNo)+']/cac:Item/cac:StandardItemIdentification/cbc:ID',XmlNamespaceManager);

        IF EVALUATE("Invoiced Quantity",XMLDOMMgt.FindNodeTextNs(XMLDocument,'/inv:Invoice/cac:InvoiceLine['+FORMAT(LineNo)+']/cbc:InvoicedQuantity',XmlNamespaceManager),9) THEN;

        IF XMLDOMMgt.FindNodeNs(XMLDocument,'/inv:Invoice/cac:InvoiceLine['+FORMAT(LineNo)+']/cbc:InvoicedQuantity',XmlNamespaceManager,AttributesNode) THEN
          "Unit of Measure Code" := XMLDOMMgt.GetAttributeValue(AttributesNode,'unitCode');

        Description :=
          COPYSTR(
            XMLDOMMgt.FindNodeTextNs(
              XMLDocument,'/inv:Invoice/cac:InvoiceLine['+FORMAT(LineNo)+']/cac:Item/cbc:Description',XmlNamespaceManager) + ' ' +
            XMLDOMMgt.FindNodeTextNs(
              XMLDocument,'/inv:Invoice/cac:InvoiceLine['+FORMAT(LineNo)+']/cac:Item/cbc:Name',XmlNamespaceManager),
            1,MAXSTRLEN(Description));
        IF EVALUATE("Net Line Amount",XMLDOMMgt.FindNodeTextNs(XMLDocument,'/inv:Invoice/cac:InvoiceLine['+FORMAT(LineNo)+']/cbc:LineExtensionAmount',XmlNamespaceManager),9) THEN;
        IF EVALUATE(Price,XMLDOMMgt.FindNodeTextNs(
          XMLDocument,'/inv:Invoice/cac:InvoiceLine['+FORMAT(LineNo)+']/cac:Price/cbc:PriceAmount',XmlNamespaceManager),9) THEN;
        IF XMLDOMMgt.FindNodeNs(XMLDocument,'/inv:Invoice/cac:InvoiceLine['+FORMAT(LineNo)+']/cac:Price/cbc:BaseQuantity',XmlNamespaceManager,AttributesNode) THEN
          "Price Base Unit Code" := XMLDOMMgt.GetAttributeValue(AttributesNode,'unitCode');
        IF EVALUATE("Price Base Quantity",XMLDOMMgt.FindNodeTextNs(
          XMLDocument,'/inv:Invoice/cac:InvoiceLine['+FORMAT(LineNo)+']/cac:Price/cbc:BaseQuantity',XmlNamespaceManager),9) THEN;

        "VAT Rate Type" := XMLDOMMgt.FindNodeTextNs(
          XMLDocument,'/inv:Invoice/cac:InvoiceLine['+FORMAT(LineNo)+']/cac:Item/cac:ClassifiedTaxCategory/cbc:ID',XmlNamespaceManager);

        IF EVALUATE("VAT %",XMLDOMMgt.FindNodeTextNs(
          XMLDocument,'/inv:Invoice/cac:InvoiceLine['+FORMAT(LineNo)+']/cac:Item/cac:ClassifiedTaxCategory/cbc:Percent',XmlNamespaceManager),9) THEN;

        IF EVALUATE("Discount/Surcharge %",XMLDOMMgt.FindNodeTextNs(
          XMLDocument,'/inv:Invoice/cac:InvoiceLine['+FORMAT(LineNo)+']/cac:AllowanceCharge/cbc:MultiplierFactorNumeric',XmlNamespaceManager),9) THEN;
        "Discount/Surcharge %" := "Discount/Surcharge %" * 100;

        IF EVALUATE("Discount/Surcharge Amount",XMLDOMMgt.FindNodeTextNs(
          XMLDocument,'/inv:Invoice/cac:InvoiceLine['+FORMAT(LineNo)+']/cac:AllowanceCharge/cbc:Amount',XmlNamespaceManager),9) THEN;

        IF EVALUATE("Order Line No. Buyer",XMLDOMMgt.FindNodeTextNs(
          XMLDocument,'/inv:Invoice/cac:InvoiceLine['+FORMAT(LineNo)+']/cac:OrderLineReference/cbc:LineID',XmlNamespaceManager),9) THEN;

        INSERT;
      END;
    END;

    LOCAL PROCEDURE WriteXMLFile@1100528504(ServerFileDocumentPath@1100528500 : Text;XmlTxt@1100528502 : Text);
    VAR
      ServerFileHelper@1100528501 : DotNet "'mscorlib'.System.IO.File";
    BEGIN
      ServerFileHelper.WriteAllText(ServerFileDocumentPath,XmlTxt);
    END;

    LOCAL PROCEDURE SetNameSpaceManager@1100528508(VAR XmlNamespaceManager@1100528500 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager");
    VAR
      GenericWebServiceNamespace@1100528502 : Record 11229383;
      XmlDocument@1100528501 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      DocExcheVerbindingSetup.GET;

      XmlNamespaceManager := XmlNamespaceManager.XmlNamespaceManager(XmlDocument.XmlDocument.NameTable);
      GenericWebServiceNamespace.SETRANGE("Connector Type", '');
      IF (GenericWebServiceNamespace.FINDSET) THEN
        REPEAT
          XmlNamespaceManager.AddNamespace(GenericWebServiceNamespace.Prefix, GenericWebServiceNamespace.Namespace);
        UNTIL (GenericWebServiceNamespace.NEXT = 0);
      GenericWebServiceNamespace.SETRANGE("Connector Type", 'eVer');
      IF (GenericWebServiceNamespace.FINDSET) THEN
        REPEAT
          XmlNamespaceManager.AddNamespace(GenericWebServiceNamespace.Prefix, GenericWebServiceNamespace.Namespace);
        UNTIL (GenericWebServiceNamespace.NEXT = 0);

      XmlNamespaceManager.AddNamespace('inv','urn:oasis:names:specification:ubl:schema:xsd:Invoice-2');
      XmlNamespaceManager.AddNamespace('cac','urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2');
      XmlNamespaceManager.AddNamespace('cbc','urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2');

      XmlNamespaceManager.AddNamespace('v3',DocExcheVerbindingSetup."API Endpoint Namespace");
    END;

    LOCAL PROCEDURE BuildAddress@1100528512(VAR Address@1100528500 : Text;AddressPart1@1100528501 : Text;AddressPart2@1100528502 : Text;AddressPart3@1100528503 : Text);
    BEGIN
      Address := COPYSTR(AddressPart1,1,MAXSTRLEN(Address));
      IF AddressPart2 <> '' THEN BEGIN
        IF Address <> '' THEN
          Address := COPYSTR(Address + ' ',1,MAXSTRLEN(Address));
        Address := COPYSTR(Address + AddressPart2,1,MAXSTRLEN(Address));
      END;
      IF AddressPart3 <> '' THEN BEGIN
        IF Address <> '' THEN
          Address := COPYSTR(Address + ' ',1,MAXSTRLEN(Address));
        Address := COPYSTR(Address + AddressPart3,1,MAXSTRLEN(Address));
      END;
    END;

    LOCAL PROCEDURE FindValidGLN@1100528515(UnstructuredGLN@1100528500 : Text) ValidGLN : Text[13];
    BEGIN
      UnstructuredGLN := DELCHR(UnstructuredGLN,'=',DELCHR(UnstructuredGLN, '=', '0123456789'));
      IF STRLEN(UnstructuredGLN ) <= MAXSTRLEN(ValidGLN) THEN
        ValidGLN := UnstructuredGLN;
    END;

    LOCAL PROCEDURE GetSecurityToken@1100530802();
    VAR
      XmlRequest@1100530807 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      MethodElement@1100530801 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      XmlResponse@1100530800 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      RequestErrorText@1100530802 : Text;
      FaultCode@1100530805 : Text;
      FaultString@1100530806 : Text;
      ResponseBody@1100530803 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XmlNamespaceManager@1100530804 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
    BEGIN
      DocExcheVerbindingSetup.GET;
      SetNameSpaceManager(XmlNamespaceManager);

      InitSOAPPayload(XmlRequest);

      InitMessageForMethod('Login',XmlRequest,XmlNamespaceManager,MethodElement);

      AddMethodParameter('ConsumerKey',DocExcheVerbindingSetup."Consumer Key",XmlRequest,MethodElement);
      AddMethodParameter('ConsumerSecret',DocExcheVerbindingSetup."Consumer Secret",XmlRequest,MethodElement);

      IF NOT SendRequestToWebService(XmlRequest,'Login',XmlResponse,RequestErrorText) THEN
        ERROR(RequestErrorText);

      IF NOT GetSOAPBody(XmlResponse,ResponseBody,XmlNamespaceManager) THEN
        ERROR(NoBodyInPayloadErr);

      IF ProcessFault(ResponseBody,XmlNamespaceManager,FaultCode,FaultString) THEN
        ERROR(EVerbindingAPIErr + '\' + CheckCredMsg,FaultCode,FaultString);

      IF NOT SetSecurityTokenFromBody(ResponseBody,XmlNamespaceManager) THEN
        ERROR(NoSecurityTokenErr);
    END;

    LOCAL PROCEDURE BuildWebRequest@3(VAR HttpWebRequest@1002 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebRequest";ActionMethod@1100530800 : Text;VAR XMLDoc@21093550 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      WebStreamRequest@50002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";
      ArrayOfBytes@1100525001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      UTF8TextEncoding@1100530801 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.UTF8Encoding";
    BEGIN
      DocExcheVerbindingSetup.GET;
      HttpWebRequest := HttpWebRequest.Create(DocExcheVerbindingSetup."API Endpoint URL" + '?subscriptionKey=' + DocExcheVerbindingSetup."Subscription Key");
      HttpWebRequest.ContentType('text/xml;charset=utf-8');
      HttpWebRequest.Method('POST');
      HttpWebRequest.ContentLength(STRLEN(XMLDoc.InnerXml));
      HttpWebRequest.Headers.Add('SOAPAction',STRSUBSTNO('"%1%2"',DocExcheVerbindingSetup."API Endpoint Namespace",ActionMethod));

      UTF8TextEncoding := UTF8TextEncoding.UTF8Encoding;
      ArrayOfBytes := UTF8TextEncoding.GetBytes(XMLDoc.InnerXml);
      HttpWebRequest.ContentLength(ArrayOfBytes.Length);

      WebStreamRequest := HttpWebRequest.GetRequestStream();
      WebStreamRequest.Write(ArrayOfBytes,0,ArrayOfBytes.Length);

      WebStreamRequest.Close;
    END;

    LOCAL PROCEDURE InitXmlDoc@21093568(VAR XMLText@21093550 : BigText;VAR XMLDoc@21093551 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    BEGIN
      IF ISNULL(XMLDoc) THEN
        XMLDoc := XMLDoc.XmlDocument();
      XMLDoc.LoadXml(XMLText);
    END;

    LOCAL PROCEDURE SendRequestToWebService@17(XMLRequest@21093550 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";Action@1100530800 : Text;VAR XMLResponse@1100525001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR ErrorText@1100530801 : Text) : Boolean;
    VAR
      HttpWebRequest@50000 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebRequest";
    BEGIN
      IF ISNULL(XMLResponse) THEN
        XMLResponse := XMLResponse.XmlDocument;

      BuildWebRequest(HttpWebRequest,Action,XMLRequest);
      EXIT(GetWebResponse(HttpWebRequest,XMLResponse,ErrorText));
    END;

    LOCAL PROCEDURE GetWebResponse@6(VAR HttpWebRequest@1001 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebRequest";VAR XMLDoc@21093550 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR ErrorText@1100530807 : Text) : Boolean;
    VAR
      WebResponse@50001 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.WebResponse";
      StreamReader@50000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StreamReader";
      UTF8TextEncoding@1100530800 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.UTF8Encoding";
      WebRequestHelper@1100530801 : Codeunit 1299;
      TempBlob@1100530808 : TEMPORARY Record 99008535;
      IStream@1100530802 : InStream;
      HttpStatusCode@1100530804 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpStatusCode";
      HttpResponseHeaders@1100530803 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.NameValueCollection";
      WebException@1100530805 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.WebException";
      ServiceURL@1100530806 : Text;
    BEGIN
      UTF8TextEncoding := UTF8TextEncoding.UTF8Encoding;

      TempBlob.INIT;
      TempBlob.Blob.CREATEINSTREAM(IStream);

      IF NOT WebRequestHelper.GetWebResponse(HttpWebRequest,WebResponse,IStream,HttpStatusCode,HttpResponseHeaders,FALSE) THEN BEGIN
        ErrorText := WebRequestHelper.GetWebResponseError(WebException,ServiceURL);
        IF ErrorText <> '' THEN
          EXIT(FALSE);
        StreamReader := StreamReader.StreamReader(WebException.Response.GetResponseStream,UTF8TextEncoding);
      END ELSE BEGIN
        StreamReader := StreamReader.StreamReader(IStream,UTF8TextEncoding);
      END;

      XMLDoc.Load(StreamReader);
      IF NOT ISNULL(WebResponse) THEN
        WebResponse.Close;
      StreamReader.Close;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE InitSOAPPayload@1100530816(VAR Request@1100530800 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      RootElement@1100530803 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      HeaderElement@1100530807 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      AuthElement@1100530808 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      SecurityTokenElement@1100530809 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      BodyElement@1100530806 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
    BEGIN
      DocExcheVerbindingSetup.GET;

      Request := Request.XmlDocument;

      RootElement := Request.CreateElement('soapenv','Envelope','http://schemas.xmlsoap.org/soap/envelope/');
      RootElement.SetAttribute('xmlns:v3',DocExcheVerbindingSetup."API Endpoint Namespace");

      Request.AppendChild(RootElement);

      HeaderElement := Request.CreateElement('soapenv', 'Header', 'http://schemas.xmlsoap.org/soap/envelope/');

      IF SecurityToken <> '' THEN BEGIN
        AuthElement := Request.CreateElement('v3', 'Authentication', DocExcheVerbindingSetup."API Endpoint Namespace");
        SecurityTokenElement := Request.CreateElement('v3', 'SecurityToken', DocExcheVerbindingSetup."API Endpoint Namespace");
        SecurityTokenElement.InnerText := SecurityToken;

        AuthElement.AppendChild(SecurityTokenElement);
        HeaderElement.AppendChild(AuthElement);
      END;

      BodyElement := Request.CreateElement('soapenv', 'Body', 'http://schemas.xmlsoap.org/soap/envelope/');

      Request.DocumentElement.AppendChild(HeaderElement);
      Request.DocumentElement.AppendChild(BodyElement);
    END;

    LOCAL PROCEDURE InitMessageForMethod@1100530806(Action@1100530801 : Text;VAR XmlRequest@1100530800 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR XmlNamespaceManager@1100530803 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";VAR CreatedElement@1100530804 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement");
    VAR
      XMLDOMManagement@1100530802 : Codeunit 6224;
      BodyElement@1100530805 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
    BEGIN
      DocExcheVerbindingSetup.GET;

      IF XMLDOMManagement.FindNodeNs(XmlRequest.DocumentElement,'/soapenv:Envelope/soapenv:Body',XmlNamespaceManager,BodyElement) THEN BEGIN
        CreatedElement := XmlRequest.CreateElement('v3',Action,DocExcheVerbindingSetup."API Endpoint Namespace");
        BodyElement.AppendChild(CreatedElement);
      END;
    END;

    LOCAL PROCEDURE AddMethodParameter@1100530808(TagName@1100530801 : Text;InnerText@1100530802 : Text;VAR XMLRequest@1100530800 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR MethodElement@1100530805 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement");
    VAR
      NewElement@1100530803 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
    BEGIN
      DocExcheVerbindingSetup.GET;

      NewElement := XMLRequest.CreateElement('v3',TagName,DocExcheVerbindingSetup."API Endpoint Namespace");
      NewElement.InnerXml := InnerText;

      MethodElement.AppendChild(NewElement);
    END;

    LOCAL PROCEDURE ProcessFault@1100530810(VAR SOAPResponseBody@1100530800 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR XmlNamespaceManager@1100530802 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";VAR FaultCode@1100530805 : Text;VAR FaultString@1100530801 : Text) : Boolean;
    VAR
      XMLDOMManagement@1100530803 : Codeunit 6224;
    BEGIN
      FaultCode := '';
      FaultString := '';

      FaultString := XMLDOMManagement.FindNodeTextNs(SOAPResponseBody.DocumentElement,'/soapenv:Fault/faultstring',XmlNamespaceManager);
      FaultCode:= XMLDOMManagement.FindNodeTextNs(SOAPResponseBody.DocumentElement,'/soapenv:Fault/faultcode',XmlNamespaceManager);
      EXIT((FaultCode <> '') AND (FaultString <> ''));
    END;

    LOCAL PROCEDURE GetSOAPBody@1100530812(VAR XmlResponse@1100530802 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR SOAPBody@1100530801 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR XmlNamespaceManager@1100530800 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager") : Boolean;
    VAR
      XmlNode@1100530803 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLDOMManagement@1100530804 : Codeunit 6224;
    BEGIN
      IF XMLDOMManagement.FindNodeNs(XmlResponse.DocumentElement,'/soapenv:Envelope/soapenv:Body',XmlNamespaceManager,XmlNode) THEN BEGIN
        SOAPBody := SOAPBody.XmlDocument();
        SOAPBody.LoadXml(XmlNode.InnerXml);
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE SetSecurityTokenFromBody@1100530813(VAR SOAPBody@1100530800 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR XmlNamespaceManager@1100530803 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager") : Boolean;
    VAR
      XmlNode@1100530801 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLDOMManagement@1100530802 : Codeunit 6224;
    BEGIN
      IF XMLDOMManagement.FindNodeNs(SOAPBody.DocumentElement,'/v3:LoginResponse/v3:SecurityToken',XmlNamespaceManager,XmlNode) THEN BEGIN
        SecurityToken := XmlNode.InnerXml;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE CheckReferenceId@1100530801(ReferenceId@1100530808 : Text) : Boolean;
    VAR
      XmlRequest@1100530807 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      MethodElement@1100530801 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      ReferenceIdSetElement@1100530809 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      XmlResponse@1100530800 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      RequestErrorText@1100530802 : Text;
      FaultCode@1100530805 : Text;
      FaultString@1100530806 : Text;
      ResponseBody@1100530803 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XmlNamespaceManager@1100530804 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
      XMLDOMManagement@1100530810 : Codeunit 6224;
    BEGIN
      MakeConnection;
      DocExcheVerbindingSetup.GET;
      SetNameSpaceManager(XmlNamespaceManager);

      InitSOAPPayload(XmlRequest);

      InitMessageForMethod('GetAdvisedInvoiceRecipientId',XmlRequest,XmlNamespaceManager,MethodElement);

      ReferenceIdSetElement := XmlRequest.CreateElement('v3','ReferenceIdSet',DocExcheVerbindingSetup."API Endpoint Namespace");
      AddMethodParameter('string',ReferenceId,XmlRequest,ReferenceIdSetElement);
      MethodElement.AppendChild(ReferenceIdSetElement);

      IF NOT SendRequestToWebService(XmlRequest,'GetAdvisedInvoiceRecipientId',XmlResponse,RequestErrorText) THEN
        ERROR(RequestErrorText);

      IF NOT GetSOAPBody(XmlResponse,ResponseBody,XmlNamespaceManager) THEN
        ERROR(NoBodyInPayloadErr);

      IF ProcessFault(ResponseBody,XmlNamespaceManager,FaultCode,FaultString) THEN
        EXIT(FALSE);

      EXIT(1 = XMLDOMManagement.FindNodeCountNs(ResponseBody.DocumentElement,'/v3:GetAdvisedInvoiceRecipientIdResponse/v3:ReferenceId',XmlNamespaceManager));
    END;

    BEGIN
    END.
  }
}

