OBJECT Codeunit 6085573 Xml Library
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=DCW13.70.00.5.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE CreateXmlDOM@1000000001(VAR XmlDoc@161024012 : Codeunit 6192800;RootName@1000000002 : Text[30]);
    VAR
      XmlDeclNode@161024013 : Codeunit 6192801;
      XmlRootNode@161024014 : Codeunit 6192801;
    BEGIN
      XmlDoc.CreateXmlDeclaration(XmlDeclNode,'1.0','UTF-8','yes');

      XmlDoc.SetPreserveWhitespace := FALSE;
      XmlDoc.CreateElement(XmlRootNode,RootName);

      XmlDoc.AppendChild(XmlRootNode);
      XmlDoc.InsertBefore(XmlDeclNode,XmlRootNode);
    END;

    PROCEDURE CreateUTF8XmlDOM@1000000006(VAR XmlDoc@161024013 : Codeunit 6192800;RootName@161024012 : Text[30]);
    VAR
      XmlDeclNode@1000 : Codeunit 6192801;
      XmlRootNode@161024014 : Codeunit 6192801;
    BEGIN
      XmlDoc.CreateXmlDeclaration(XmlDeclNode,'1.0','UTF-8','yes');

      XmlDoc.SetPreserveWhitespace := FALSE;
      XmlDoc.CreateElement(XmlRootNode,RootName);

      XmlDoc.AppendChild(XmlRootNode);
      XmlDoc.InsertBefore(XmlDeclNode,XmlRootNode);
    END;

    PROCEDURE AppendXmlNode@1000000002(VAR ParentNode@161024012 : Codeunit 6192801;Name@1000000000 : Text[30];Value@1000000002 : Text[1024]);
    VAR
      Node@1000000004 : Codeunit 6192801;
    BEGIN
      CreateXmlNode(ParentNode,Name,Value,Node);
    END;

    PROCEDURE CreateXmlNode@1000000000(VAR ParentNode@1000000001 : Codeunit 6192801;Name@1000000000 : Text[30];Value@1000000002 : Text;VAR NewNode@1000000003 : Codeunit 6192801);
    VAR
      OwnerDocument@1000 : Codeunit 6192800;
    BEGIN
      CLEAR(NewNode);

      ParentNode.GetOwnerDocument(OwnerDocument);
      OwnerDocument.CreateNode(NewNode,'element',Name,'');

      NewNode.SetInnerText := Value;
      ParentNode.AppendChild(NewNode)
    END;

    PROCEDURE SetXmlNodeAttr@1000000007(VAR Node@1000000002 : Codeunit 6192801;AttrName@1000000001 : Text[30];AttrValue@1000000000 : Text[1024]);
    VAR
      OwnerDocument@1000 : Codeunit 6192800;
      XmlNode@1000000005 : Codeunit 6192801;
      XmlAttr@1000000004 : Codeunit 6192803;
      XmlAttrList@1001 : Codeunit 6192804;
    BEGIN
      IF AttrValue = '' THEN
        EXIT;

      Node.GetOwnerDocument(OwnerDocument);

      OwnerDocument.CreateAttribute(XmlAttr,AttrName);
      XmlAttr.SetValue := AttrValue;
      Node.GetAttributes(XmlAttrList);
      XmlAttrList.SetNamedItem(XmlAttr);
    END;

    PROCEDURE GetNodeText@1000000021(VAR ParentNode@1000000000 : Codeunit 6192801;Name@1000000001 : Text[1024]) : Text;
    VAR
      Node@1000000002 : Codeunit 6192801;
    BEGIN
      IF ParentNode.SelectSingleNode(Node,Name) THEN
        EXIT(Node.GetInnerText);

      IF ParentNode.SelectSingleNode(Node,LOWERCASE(Name)) THEN
        EXIT(Node.GetInnerText);
    END;

    PROCEDURE GetNodeAttrib@161024012(VAR ParentNode@1000000000 : Codeunit 6192801;NodeName@1000000001 : Text[1024];AttribName@161024012 : Text[30]) : Text[1024];
    VAR
      Node@1000000002 : Codeunit 6192801;
      Attr@1001 : Codeunit 6192803;
      XMLAttrList@1000 : Codeunit 6192804;
    BEGIN
      IF NOT ParentNode.SelectSingleNode(Node,NodeName) THEN
        EXIT;

      Node.GetAttributes(XMLAttrList);
      IF XMLAttrList.GetNamedItem(Node,AttribName) THEN
        EXIT(Node.GetInnerText);
    END;

    PROCEDURE GetNodeGuid@1160040001(VAR ParentNode@1000000000 : Codeunit 6192801;Name@1000000001 : Text[1024]) ReturnGuid : GUID;
    VAR
      GuidText@6085573 : Text[1024];
    BEGIN
      GuidText := GetNodeText(ParentNode,Name);
      IF GuidText = '' THEN
        EXIT;

      IF COPYSTR(GuidText,1,1) <> '{' THEN
        GuidText := '{' + GuidText;

      IF COPYSTR(GuidText,STRLEN(GuidText)-1,1) <> '}' THEN
        GuidText := GuidText + '}';

      EVALUATE(ReturnGuid,GuidText);
    END;

    PROCEDURE SaveBase64NodeToFile@161024013(VAR Node@161024014 : Codeunit 6192801;Filename@161024013 : Text[1024]) : Boolean;
    BEGIN
      EXIT(Node.SaveBase64NodeToFile(Filename));
    END;

    PROCEDURE Bool2Text@1000000037(bool@1000000000 : Boolean) : Text[30];
    BEGIN
      IF bool THEN
        EXIT('true')
      ELSE
        EXIT('false');
    END;

    PROCEDURE Date2Text@1000000003(date@1000000000 : Date) : Text[30];
    BEGIN
      IF date = 0D THEN
        EXIT;
      EXIT(FORMAT(date,0,'<Day,2>-<Month,2>-<Year4>'));
    END;

    PROCEDURE Dec2Text@1000000004(dec@1000000000 : Decimal) : Text[30];
    BEGIN
      EXIT(FORMAT(dec,0,'<Sign><Integer><Decimals><Comma,.>'));
    END;

    PROCEDURE Text2Bool@1000000005(Text@1000000000 : Text[30]) : Boolean;
    BEGIN
      CASE UPPERCASE(Text) OF
        '','FALSE','NO','0':
          EXIT(FALSE);
        ELSE
          EXIT(TRUE);
      END;
    END;

    PROCEDURE Text2Date@1000000023(Text@1000000000 : Text[30]) : Date;
    VAR
      Day@1000000001 : Integer;
      Month@1000000002 : Integer;
      Year@1000000003 : Integer;
    BEGIN
      IF Text = '' THEN
        EXIT(0D);

      EVALUATE(Day,COPYSTR(Text,1,2));
      EVALUATE(Month,COPYSTR(Text,4,2));
      EVALUATE(Year,COPYSTR(Text,7,4));
      EXIT(DMY2DATE(Day,Month,Year));
    END;

    PROCEDURE Text2Time@1000000031(Text@1000000000 : Text[30]) TheTime : Time;
    VAR
      Hours@1000000001 : Integer;
      Minutes@1000000002 : Integer;
      Seconds@1000000003 : Integer;
    BEGIN
      IF Text = '' THEN
        EXIT(0T);

      EVALUATE(TheTime,
        COPYSTR(Text,1,2) + ':' +
        COPYSTR(Text,4,2) + ':'  +
        COPYSTR(Text,7,2));
    END;

    PROCEDURE Text2DateTime@1000000030(Text@1000000000 : Text[30]) : DateTime;
    BEGIN
      IF Text = '' THEN
        EXIT(0DT);

      EXIT(CREATEDATETIME(Text2Date(Text),Text2Time(COPYSTR(Text,12))));
    END;

    PROCEDURE Text2Dec@1000000022(Text@1000000000 : Text[1024]) Dec : Decimal;
    BEGIN
      IF Text = '' THEN
        EXIT(0);

      Text := CONVERTSTR(Text,'.',GetDecSep);
      EVALUATE(Dec,Text);
    END;

    PROCEDURE Text2Int@1000000028(Text@1000000000 : Text[1024]) TheInt : Integer;
    BEGIN
      IF UPPERCASE(Text) IN ['','FALSE','NO','0'] THEN
        EXIT(0);
      EVALUATE(TheInt,Text);
    END;

    PROCEDURE GetDecSep@1() : Text[1];
    BEGIN
      EXIT(COPYSTR(FORMAT(1.1),2,1));
    END;

    BEGIN
    END.
  }
}

