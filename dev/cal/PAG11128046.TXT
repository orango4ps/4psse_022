OBJECT Page 11128046 Settlement Sheet Margin SO
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS7.00,4PSSE;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Project Cost;
               NOR=Prosjektkost;
               SVE=Aktuellt debiterbart];
    SourceTable=Table11012825;
    PageType=CardPart;
    OnOpenPage=BEGIN
                 CalcTotalsSheet;
               END;

    OnNextRecord=BEGIN
                   CalcTotalsSheet;
                 END;

    OnAfterGetRecord=BEGIN
                       CalcTotalsSheet;
                     END;

  }
  CONTROLS
  {
    { 1210190000;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Field     ;
                CaptionML=[ENU=Revenue;
                           NOR=Inntekter;
                           SVE=Int„kt];
                SourceExpr=Revenue }

    { 5   ;1   ;Field     ;
                CaptionML=[ENU=Labour;
                           NOR=Arbeid;
                           SVE=Arbetskraft];
                SourceExpr=Labour }

    { 6   ;1   ;Field     ;
                CaptionML=[ENU=Material;
                           NOR=Materialee;
                           SVE=Material];
                SourceExpr=Material }

    { 7   ;1   ;Field     ;
                CaptionML=[ENU=Subcontracting;
                           NOR=Underentrepen›r;
                           SVE=UE];
                SourceExpr=Subcontracting }

    { 8   ;1   ;Field     ;
                CaptionML=[ENU=Plant;
                           NOR=Maskin;
                           SVE=Maskin];
                SourceExpr=Plant }

    { 9   ;1   ;Field     ;
                CaptionML=[ENU=Sundry;
                           NOR=Diverse;
                           SVE=Diverse];
                SourceExpr=Sundry }

    { 2   ;1   ;Field     ;
                CaptionML=[ENU=Total Cost;
                           NOR=Total kost;
                           SVE=Total kostnad];
                SourceExpr=TotalCostsDec }

    { 1100285300;1;Field  ;
                Name=Hours;
                CaptionML=[ENU=Hours;
                           NOR="Timer ";
                           SVE=Timmar];
                SourceExpr=Hours }

    { 3   ;1   ;Field     ;
                CaptionML=[ENU=Margin;
                           NOR=Marginal;
                           SVE=TB];
                SourceExpr=Revenue-TotalCostsDec }

    { 1100285302;1;Field  ;
                CaptionML=[ENU=Margin/Hour;
                           SVE=TB/Tim];
                SourceExpr=TBTim }

    { 4   ;1   ;Field     ;
                CaptionML=[ENU=Margin %;
                           NOR=Marginal %;
                           SVE=TG];
                SourceExpr=FORMAT(TG,4)+'%' }

    { 1100285301;1;Field  ;
                CaptionML=[ENU=ROT;
                           NOR=ROT;
                           SVE=ROT];
                SourceExpr=HasRotInfo;
                Style=Strong;
                StyleExpr=TRUE;
                ShowCaption=No }

  }
  CODE
  {
    VAR
      TotalCostsProject@1210190000 : Decimal;
      TotalCostsDec@1210190001 : Decimal;
      MarginDec@1210190002 : Decimal;
      SettlSheetRec@1210190003 : Record 11012021;
      ChargeableHours@1100285000 : Decimal;
      Revenue@1000 : Decimal;
      TG@1002 : Decimal;
      Material@1003 : Decimal;
      Labour@1004 : Decimal;
      Subcontracting@1005 : Decimal;
      Plant@1006 : Decimal;
      Sundry@1007 : Decimal;
      Hours@1100285300 : Decimal;
      TBTim@1100285301 : Decimal;
      ShowROT@1100285302 : Boolean;

    PROCEDURE CalcTotalsSheet@1100485001();
    VAR
      DeterminePrognosisDate@1100525002 : Codeunit 11012029;
      CostContMgt@1100525001 : Codeunit 11012006;
      ProjFilter@1100525000 : Text[250];
      lvProjCostPlusEntry@1100285000 : Record 11012825;
      ServiceOrder@1100285300 : Record 11012823;
      ServiceLedgerEntry@1100285301 : Record 11012819;
    BEGIN

        TotalCostsDec := 0;
        Revenue:=0;
        TG:=0;
        Material:=0;
        Labour:=0;
        Subcontracting:=0;
        Plant:=0;
        Sundry:=0;
        Hours:=0;
        TBTim:=0;
      //  lvProjCostPlusEntry.RESET;
      //  lvProjCostPlusEntry.SETRANGE("Service Order No.","Service Order No.");
      //  lvProjCostPlusEntry.SETRANGE(Invoiced,FALSE);
      //  IF lvProjCostPlusEntry.FINDSET THEN REPEAT
      //    TotalCostsDec:=TotalCostsDec+(lvProjCostPlusEntry."Total Cost Price (LCY)");
      //    Revenue:=Revenue+(lvProjCostPlusEntry."Sales Price (LCY)"*lvProjCostPlusEntry.Quantity);
      //  UNTIL lvProjCostPlusEntry.NEXT=0;
      //  IF Revenue <> 0 THEN
      //    TG := ((Revenue-TotalCostsDec)/Revenue)*100
      //  ELSE
      //    TG := 0;
      //  //Itero.PR 151111

        //>> 160613 ITERO.SB New calculation of margin SO factbox

        //Calc total cost for cost plus lines
        lvProjCostPlusEntry.RESET;
        lvProjCostPlusEntry.SETRANGE("Service Order No.","Service Order No.");
        lvProjCostPlusEntry.CALCSUMS("Total Cost Price (LCY)");
        TotalCostsDec:=lvProjCostPlusEntry."Total Cost Price (LCY)";
        //Calc revenue on invoiced lines
        CLEAR(lvProjCostPlusEntry);
        lvProjCostPlusEntry.SETRANGE("Service Order No.","Service Order No.");
        lvProjCostPlusEntry.SETRANGE(Invoiced,TRUE);
        IF lvProjCostPlusEntry.FINDSET THEN REPEAT
          Revenue:=Revenue+(lvProjCostPlusEntry."Sales Price (LCY)"*lvProjCostPlusEntry.Quantity);
        UNTIL lvProjCostPlusEntry.NEXT=0;
        //Calc revenue on chargeable lines
        CLEAR(lvProjCostPlusEntry);
        lvProjCostPlusEntry.SETRANGE("Service Order No.","Service Order No.");
        lvProjCostPlusEntry.SETRANGE(Chargeable,TRUE);
        IF lvProjCostPlusEntry.FINDSET THEN REPEAT
          Revenue:=Revenue+(lvProjCostPlusEntry."Sales Price (LCY)"*lvProjCostPlusEntry.Quantity);
        UNTIL lvProjCostPlusEntry.NEXT=0;

        IF Revenue <> 0 THEN
          TG := ((Revenue-TotalCostsDec)/Revenue)*100
        ELSE
          TG := 0;

        //Calc cost for each cost type
        lvProjCostPlusEntry.RESET;
        lvProjCostPlusEntry.SETRANGE("Service Order No.","Service Order No.");
        //lvProjCostPlusEntry.SETRANGE(Invoiced,FALSE);

        lvProjCostPlusEntry.SETRANGE("Cost Type",lvProjCostPlusEntry."Cost Type"::Labor);

        IF lvProjCostPlusEntry.FINDSET THEN REPEAT
          Labour:=Labour+(lvProjCostPlusEntry."Total Cost Price (LCY)");
          //Hours:=Hours+lvProjCostPlusEntry.Quantity;
          IF ServiceLedgerEntry.GET(lvProjCostPlusEntry."Entry No. Service Ledger") THEN
            Hours:=Hours+ServiceLedgerEntry.Quantity;
        UNTIL lvProjCostPlusEntry.NEXT=0;

        lvProjCostPlusEntry.SETRANGE("Cost Type",lvProjCostPlusEntry."Cost Type"::Material);
        IF NOT lvProjCostPlusEntry.ISEMPTY THEN BEGIN
          lvProjCostPlusEntry.CALCSUMS("Total Cost Price (LCY)");
          Material:=lvProjCostPlusEntry."Total Cost Price (LCY)";
      //  IF lvProjCostPlusEntry.FINDSET THEN BEGIN REPEAT
      //    Material:=Material+(lvProjCostPlusEntry."Total Cost Price (LCY)");
      //  UNTIL lvProjCostPlusEntry.NEXT=0;
          //>>160408 ITERO.SB RAD-206 Added field "Tactics Agreement"
          IF ServiceOrder.GET("Service Order No.") THEN
            IF ServiceOrder."Tactics Agreement"<>0 THEN
              Material:=Material-(Material*(ServiceOrder."Tactics Agreement"/100));
        END;
        //<<

        lvProjCostPlusEntry.SETRANGE("Cost Type",lvProjCostPlusEntry."Cost Type"::Subcontracting);
        lvProjCostPlusEntry.CALCSUMS("Total Cost Price (LCY)");
        Subcontracting:=lvProjCostPlusEntry."Total Cost Price (LCY)";
      //  IF lvProjCostPlusEntry.FINDSET THEN REPEAT
      //    Subcontracting:=Subcontracting+(lvProjCostPlusEntry."Total Cost Price (LCY)");
      //  UNTIL lvProjCostPlusEntry.NEXT=0;

        lvProjCostPlusEntry.SETRANGE("Cost Type",lvProjCostPlusEntry."Cost Type"::Plant);
        lvProjCostPlusEntry.CALCSUMS("Total Cost Price (LCY)");
        Plant:=lvProjCostPlusEntry."Total Cost Price (LCY)";
      //  IF lvProjCostPlusEntry.FINDSET THEN REPEAT
      //    Plant:=Plant+(lvProjCostPlusEntry."Total Cost Price (LCY)");
      //  UNTIL lvProjCostPlusEntry.NEXT=0;

        lvProjCostPlusEntry.SETRANGE("Cost Type",lvProjCostPlusEntry."Cost Type"::Sundry);
        lvProjCostPlusEntry.CALCSUMS("Total Cost Price (LCY)");
        Sundry:=lvProjCostPlusEntry."Total Cost Price (LCY)";
      //  IF lvProjCostPlusEntry.FINDSET THEN REPEAT
      //    Sundry:=Sundry+(lvProjCostPlusEntry."Total Cost Price (LCY)");
      //  UNTIL lvProjCostPlusEntry.NEXT=0;

        //>> Get hours
        ServiceLedgerEntry.SETRANGE("Service Order No.","Service Order No.");
        ServiceLedgerEntry.SETRANGE("Cost Type",ServiceLedgerEntry."Cost Type"::Labor);
        ServiceLedgerEntry.CALCSUMS(Quantity);
        Hours:=ServiceLedgerEntry.Quantity;
        //<<
        IF Hours<>0 THEN
          TBTim:=(Revenue-TotalCostsDec)/Hours
        ELSE
          TBTim:=0;
    END;

    LOCAL PROCEDURE HasRotInfo@1100285300() : Code[10];
    VAR
      ROTInformation@1100285300 : Record 11128101;
      txtROT@1100285301 : TextConst 'ENU=ROT-WORK;SVE=ROT-ARBETE';
    BEGIN
      //>>160718 ITERO.SB RAD-022 Show if service order has ROT-information (added funcion HasROTInfo)
      ROTInformation.SETRANGE(Type,ROTInformation.Type::"Service Order");
      ROTInformation.SETRANGE("Document No.","Service Order No.");
      IF NOT ROTInformation.ISEMPTY THEN
        EXIT(txtROT)
      ELSE
        EXIT('');
      //<<
    END;

    BEGIN
    {
      IME-055 Itero GH 131113
      ITERO.PR 151111
      160408 ITERO.SB RAD-206 Added field "Tactics Agreement", add discount % on material calculation
      160613 ITERO.SB New calculation of margin SO factbox (totals)
      160628 ITERO.SB RAD-014 Add Hours and Margin/Hour fields
      160718 ITERO.SB RAD-022 Show if service order has ROT-information (added funcion HasROTInfo)
    }
    END.
  }
}

