OBJECT Codeunit 11128062 VP File BG Sweden
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=PE8.03 (12048859),4PSSE;
  }
  PROPERTIES
  {
    TableNo=11128079;
    OnRun=VAR
            GiroType@1100570003 : Record 11128061;
          BEGIN
            gFirstTime := TRUE;
            CLEAR(gTotalAmountLCY);
            CLEAR(gNoOfPayments);

            GiroType.GET(Rec."Giro Type Code");
            GiroType.TESTFIELD(Filename);
            gToFile := GiroType.Filename;
            OpenFile;

            gVPMnm.SetGiroType(GiroType);

            // Check LCY Code SEK or EUR
            gVPMnm.CheckSEKEURCurrency(Rec,'<>SEK&<>EUR');

            // Get all invoices for Currency SEK
            CreateFileBGSweden(Rec,'SEK');

            // Get all invoices for Currency EUR
            CreateFileBGSweden(Rec,'EUR');

            CloseFile(Rec);
          END;

  }
  CODE
  {
    VAR
      gFile@1100570021 : File;
      gFirstTime@1100570003 : Boolean;
      gVPMnm@1100570002 : Codeunit 11128061;
      PEB001@1100570020 : TextConst 'ENU=The length for %1 is %2 long, %3 characters are maximum;NOR=Lengden p† %1 er %2 tegn. Maksimumslengden er %3 tegn;SVE=L„ngden p† %1 „r %2 tecken. Maximil„ngden „r %3 tecken';
      PEB002@1100570005 : TextConst 'ENU=Due Date for information can not be\Blank or Before today''s date;NOR=Forfallsdato for informasjonen kan ikke v‘re\Tom eller f›r dagens dato;SVE=F”rfallodatumet f”r informationen kan inte vara\tomt eller f”re dagens datum';
      PEB003@1100570011 : TextConst 'ENU=%1 must be 16 digits when Payments by Account\%2,%3,%4;SVE=%1 m†ste vara 16 siffror vid betalning till konto\%2,%3,%4';
      PEB004@1100570010 : TextConst 'ENU=%1 is not correct for Vendor %2 %3.;NOR=%1 er feilaktig for leverand›ren %2 %3.;SVE=%1 „r felaktigt f”r %2 %3 %4.';
      PEB005@1100570007 : TextConst 'ENU=Only currency SEK or EUR is valid;NOR=Kun SEK eller EUR er gyldige valutaer;SVE=Endast SEK eller EUR „r giltiga valutor';
      PEB006@1100570001 : TextConst 'ENU=Bank Giro No. for the Company is not correct!;NOR=Selskapets Bankgironummer er feilaktig!;SVE=F”retagets bankgironummer „r felaktigt!';
      PEB007@1100570009 : TextConst 'ENU=Credit Memo is not allowed for Plus Giro;NOR=Kreditnota tillates ikke for plussgiro;SVE=Kreditnota till†ts inte f”r Plusgiro';
      PEB008@1100570015 : TextConst 'ENU=An Address field on %1 %2,%3 must be filled in;SVE=Ett adressf„lt m†ste fyllas i f”r %1 %2,%3';
      gTotalAmountLCY@1100570000 : Decimal;
      gFromFile@1100570004 : Text;
      gToFile@1100570006 : Text;
      gNoOfPayments@12047958 : Integer;
      PEB009@12047959 : TextConst 'ENU=All payments are not included in the file, check the currency;SVE=Alla betalningar kom inte med i filen, kontrollera valutorna';

    PROCEDURE CreateFileBGSweden@1070001(pPack@1070001 : Record 11128079;pCurrencyCode@1070005 : Code[10]);
    VAR
      PaymentNo@1070002 : Code[20];
      Customer@12047960 : Record 18;
      DueDate@1070003 : Date;
      PostalGiro@1070004 : Boolean;
      Vendor@1100570002 : Record 23;
      Currency@1100570001 : Record 4;
      PrintOutAddress@1100570006 : Boolean;
      Adr1@1100570005 : Text;
      Adr2@1100570004 : Text;
      TypeOfLine@1100570003 : Code[10];
      TotalAmount@1100570010 : Decimal;
      NoOfLines@1100570009 : Integer;
      GiroType@1100570011 : Record 11128061;
      VPSetup@1100570012 : Record 11128066;
      VPPackEntry@1100570013 : Record 11128063;
      VendBankAccount@1100570014 : Record 288;
      CustBankAccount@12047961 : Record 287;
      tBankAccount@12047963 : TEMPORARY Record 288;
      tLedgerEntryPayment@12047959 : TEMPORARY Record 11128074;
      tLedgerEntry@12047958 : TEMPORARY Record 11128074;
    BEGIN
      VPPackEntry.RESET;
      VPPackEntry.SETRANGE("Pack Entry No.",pPack."Entry No.");
      VPPackEntry.SETRANGE("Payment to Currency Code",pCurrencyCode);
      IF NOT gVPMnm.GetPaymentEntries(VPPackEntry,tLedgerEntryPayment,tLedgerEntry,FALSE,TRUE) THEN
        EXIT;

      GiroType.GET(pPack."Giro Type Code");
      GiroType.TESTFIELD("Bank Giro No.");
      IF NOT gVPMnm.SumCheck10Control(GiroType."Bank Giro No.") THEN
        ERROR(PEB006);

      VPSetup.GET;

      WITH tLedgerEntryPayment DO BEGIN
        FINDSET;

        CLEAR(NoOfLines);
        CLEAR(TotalAmount);


        WriteFile(80,'11' +
           gVPMnm.NFL(gVPMnm.ClearText(GiroType."Bank Giro No."),10) +
           gVPMnm.Date2Text(TODAY,6) +
           gVPMnm.TFR('LEVERANT™RSBETALNINGAR',41) +
           pCurrencyCode);

        IF gFirstTime THEN BEGIN
          IF VPSetup."Information Line BG Sweden" <> '' THEN BEGIN
            IF VPSetup."Due Date for Information Line" < TODAY THEN
              ERROR(PEB002);
            WriteFile(80,'12' +
               gVPMnm.TFR(VPSetup."Information Line BG Sweden",50) +
               gVPMnm.Date2Text(VPSetup."Due Date for Information Line",6));
          END;
          WriteFile(80,'13' +
             gVPMnm.TFR('FAKTURA',32) +
             'NETTO');
          gFirstTime := FALSE
        END;

        // Get all Entries for one Currency
        REPEAT
          gNoOfPayments += 1;

          TESTFIELD(Open,TRUE);
          CLEAR(tBankAccount);
          CASE Type OF
            Type::Vendor :
              BEGIN
                VendBankAccount.GET("No.","Bank Account Code");
                tBankAccount.TRANSFERFIELDS(VendBankAccount);
              END;
            Type::Customer :
              BEGIN
                CustBankAccount.GET("No.","Bank Account Code");
                tBankAccount.TRANSFERFIELDS(CustBankAccount);
              END;
          END;

          CLEAR(Currency);

          IF gVPMnm.IsEURCurr("Currency Code") THEN BEGIN
            CASE Type OF
              Type::Vendor : VendBankAccount.TESTFIELD("Bank Giro No.");
              Type::Customer : CustBankAccount.TESTFIELD("Bank Giro No.");
            END;

          END ELSE
            IF NOT gVPMnm.IsSEKCurr("Currency Code") THEN
              ERROR(PEB005);

          PostalGiro := FALSE;
          IF tBankAccount."Bank Giro No." <> '' THEN BEGIN
            PaymentNo := gVPMnm.ClearText(tBankAccount."Bank Giro No.");
            IF PaymentNo = '' THEN
              ERROR(PEB004,tBankAccount.FIELDCAPTION("Bank Giro No."), Type, "No.", Name);
            IF NOT gVPMnm.SumCheck10Control(PaymentNo) THEN
              ERROR(PEB004,tBankAccount.FIELDCAPTION("Bank Giro No."), Type, "No.", Name);
          END ELSE BEGIN
            IF tBankAccount."Plus Giro No." <> '' THEN BEGIN
              IF "Remaining Amount" > 0 THEN
                ERROR(PEB007);
              PaymentNo := gVPMnm.ClearText(tBankAccount."Plus Giro No.");
              IF PaymentNo = '' THEN
                ERROR(PEB004,tBankAccount.FIELDCAPTION("Plus Giro No."), Type, "No.", Name);
              IF NOT gVPMnm.SumCheck10Control(PaymentNo) THEN
                ERROR(PEB004,tBankAccount.FIELDCAPTION("Plus Giro No."), Type, "No.", Name);
              PostalGiro := TRUE;
            END ELSE BEGIN
              PaymentNo := gVPMnm.GetGiroNo(Type,"No.",Currency);

              IF tBankAccount."Bank Account No." = '' THEN
                PrintOutAddress := TRUE
              ELSE BEGIN
                IF STRLEN(gVPMnm.ClearText(tBankAccount."Bank Account No.")) <> 16  THEN
                  ERROR(PEB003,tBankAccount.FIELDCAPTION("Bank Account No."),
                              tBankAccount.TABLECAPTION,
                              tBankAccount."Vendor No.",
                              tBankAccount.Code);
                WriteFile(80,'40' +
                   gVPMnm.NFL(gVPMnm.ClearText(PaymentNo),10) +
                   gVPMnm.TFR(gVPMnm.ClearText(tBankAccount."Bank Account No."),16) +
                   gVPMnm.TFR("External Document No.",12));
                PrintOutAddress := tBankAccount."Account Payment with Advising";
              END;

              IF PrintOutAddress THEN BEGIN
                CASE Type OF
                  Type::Vendor:
                    BEGIN
                      Vendor.GET("No.");
                      Vendor.TESTFIELD(Name);
                      Vendor.TESTFIELD("Post Code");
                      Vendor.TESTFIELD(City);
                    END;
                  Type::Customer:
                    BEGIN
                      Customer.GET("No.");
                      Customer.TESTFIELD(Name);
                      Customer.TESTFIELD("Post Code");
                      Customer.TESTFIELD(City);
                    END;
                END;
                IF Address <> '' THEN BEGIN
                  IF "Address 2" <> '' THEN BEGIN
                    Adr1 := Address;
                    Adr2 := "Address 2";
                  END ELSE BEGIN
                    Adr1 := '';
                    Adr2 := Address;
                  END;
                END ELSE BEGIN
                  IF "Address 2" = '' THEN
                    ERROR(PEB008,FORMAT(Type,0,'<Text>'),"No.");
                  Adr1 := '';
                  Adr2 := "Address 2";
                END;

                WriteFile(80,'26' +
                   gVPMnm.NFL(gVPMnm.ClearText(PaymentNo),10) +
                   gVPMnm.TFR(Name,35) +
                   gVPMnm.TFR(Adr1,30));
                WriteFile(80,'27' +
                   gVPMnm.NFL(gVPMnm.ClearText(PaymentNo),10) +
                   gVPMnm.TFR(Adr2,35) +
                   gVPMnm.TFR(gVPMnm.ClearText("Post Code"),5) +
                   gVPMnm.TFR(City,25));
              END;
            END;
          END;
          IF "Remaining Amount" > 0  THEN // Credit Memo
            TypeOfLine := '16'
          ELSE                            // Invoice
            TypeOfLine := '14';

          IF "Due Date" < TODAY THEN BEGIN
            DueDate := TODAY;
            "Due Date" := TODAY;
          END ELSE
            DueDate := "Due Date";

          TotalAmount += "Remaining Amount";
          gTotalAmountLCY += "Remaining Amt. (LCY)";
          NoOfLines += 1;

          IF PostalGiro THEN BEGIN
            WriteFile(80,'54' +
               gVPMnm.NFL(gVPMnm.ClearText(PaymentNo),10) +
               gVPMnm.TFR("External Document No.",25) +
               gVPMnm.NFL(gVPMnm.Value100("Remaining Amount",12),12) +
               gVPMnm.Date2Text("Due Date",6) +
               gVPMnm.BLK(5) +
               gVPMnm.TFR(GetInternalRefText("Document No.",Type),20));
          END ELSE BEGIN
            WriteFile(80,TypeOfLine +
               gVPMnm.NFL(gVPMnm.ClearText(PaymentNo),10) +
               gVPMnm.TFR("External Document No.",25) +
               gVPMnm.NFL(gVPMnm.Value100("Remaining Amount",12),12) +
               gVPMnm.Date2Text(DueDate,6) +
               gVPMnm.BLK(5) +
               gVPMnm.TFR(GetInternalRefText("Document No.",Type),20));
          END;
        UNTIL tLedgerEntryPayment.NEXT = 0;

        WriteFile(80,'29' +
           gVPMnm.NFL(gVPMnm.ClearText(GiroType."Bank Giro No."),10) +
           gVPMnm.NFL(gVPMnm.Value1(NoOfLines,8),8) +
           gVPMnm.NFL(gVPMnm.Value100(TotalAmount,12),12) +
           gVPMnm.NegativeSign(-TotalAmount));
      END;
    END;

    PROCEDURE WriteFile@1070040(pLength@1070000 : Integer;pText@1070001 : Text[250]);
    VAR
      SEUtils@1100285100 : Codeunit 11128000;
    BEGIN
      IF STRLEN(pText) > pLength THEN
        ERROR(PEB001,pText,STRLEN(pText),pLength);

      pText := SEUtils.Ascii2Ansi(pText);
      gFile.WRITE(PADSTR(pText,pLength));
    END;

    PROCEDURE OpenFile@1070005();
    VAR
      FileMgt@1100570001 : Codeunit 419;
    BEGIN
      gFile.TEXTMODE(TRUE);
      gFile.WRITEMODE(TRUE);
      gFromFile := FileMgt.ServerTempFileName('.txt');
      gFile.CREATE(gFromFile);
    END;

    PROCEDURE CloseFile@1070009(pPack@1070000 : Record 11128079);
    VAR
      FileMgt@1100570000 : Codeunit 419;
      VPPackEntry@12047958 : Record 11128063;
      Handled@12047959 : Boolean;
    BEGIN
      VPPackEntry.RESET;
      VPPackEntry.SETRANGE("Pack Entry No.",pPack."Entry No.");
      IF VPPackEntry.COUNT <> gNoOfPayments THEN
        ERROR(PEB009);

      pPack.LOCKTABLE;
      pPack.FIND;
      pPack."Total Amount (LCY)" := -gTotalAmountLCY;
      pPack.MODIFY;
      gFile.CLOSE;

      OnBeforeSaveFile(pPack,gFromFile,Handled);

      IF NOT Handled THEN BEGIN
        IF NOT FileMgt.CanRunDotNetOnClient THEN
          FileMgt.DownloadHandler(gFromFile,'','','',gVPMnm.SetFileName(pPack,gToFile))
        ELSE
          FileMgt.DownloadToFile(gFromFile,gVPMnm.SetFileName(pPack,gToFile));
      END;

      IF EXISTS(gFromFile) THEN
        ERASE(gFromFile);
    END;

    PROCEDURE GetInternalRefText@12047958(pDocNo@12047958 : Text;pType@12047959 : 'Vendor,Customer') : Text;
    BEGIN
      CASE pType OF
        pType::Vendor : EXIT('L' + pDocNo);
        pType::Customer : EXIT('K' + pDocNo);
        ELSE
          ERROR('pType "%1" st”ds ej', pType);
      END;
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeSaveFile@12047959(Pack@12047961 : Record 11128079;ServerFilename@12047958 : Text;VAR Handled@12047960 : Boolean);
    BEGIN
    END;

    BEGIN
    {
      PEB *** Begin ***
      PEB0091 Banking
      PEB
      PEB *** End ***
      190212 ORANGO.DL upgrade to PE8.08
      171129 ITERO.DL export files as ASCII instead of defalut ANSI
    }
    END.
  }
}

