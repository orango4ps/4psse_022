OBJECT Codeunit 441 Prepayment Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      JobQueueEntryHasStartedTxt@1000 : TextConst '@@@=%1 - job queue frequency;ENU=A job for changing the status from Pending Prepayment to Release has started with the frequency %1.;NOR=En jobb for † endre statusen fra Venter p† forskudd til Frigi er startet med hyppigheten %1.';
      StatusOfSalesOrderIsChangedTxt@1002 : TextConst '@@@=%1 - sales order no.;ENU=The status of the sales order %1 is changed from Pending Prepayment to Release.;NOR=Statusen for ordren %1 endres fra Venter p† forskudd til Frigi.';
      StatusOfPurchaseOrderIsChangedTxt@1003 : TextConst '@@@=%1 - purchase order no.;ENU=The status of the purchase order %1 is changed from Pending Prepayment to Release.;NOR=Statusen for bestillingen %1 endres fra Venter p† forskudd til Frigi.';
      UpdateSalesOrderStatusTxt@1004 : TextConst 'ENU=Update sales order status.;NOR=Oppdater ordrestatus.';
      UpdatePurchaseOrderStatusTxt@1001 : TextConst 'ENU=Update purchase order status.;NOR=Oppdater bestillingsstatus.';

    [External]
    PROCEDURE SetSalesPrepaymentPct@1000000000(VAR SalesLine@1000000000 : Record 37;Date@1000000002 : Date);
    VAR
      Cust@1000 : Record 18;
      SalesPrepaymentPct@1000000001 : Record 459;
    BEGIN
      WITH SalesPrepaymentPct DO BEGIN
        IF (SalesLine.Type <> SalesLine.Type::Item) OR (SalesLine."No." = '') OR
           (SalesLine."Document Type" <> SalesLine."Document Type"::Order)
        THEN
          EXIT;
        SETFILTER("Starting Date",'..%1',Date);
        SETFILTER("Ending Date",'%1|>=%2',0D,Date);
        SETRANGE("Item No.",SalesLine."No.");
        FOR "Sales Type" := "Sales Type"::Customer TO "Sales Type"::"All Customers" DO BEGIN
          SETRANGE("Sales Type","Sales Type");
          CASE "Sales Type" OF
            "Sales Type"::Customer:
              BEGIN
                SETRANGE("Sales Code",SalesLine."Bill-to Customer No.");
                IF ApplySalesPrepaymentPct(SalesLine,SalesPrepaymentPct) THEN
                  EXIT;
              END;
            "Sales Type"::"Customer Price Group":
              BEGIN
                Cust.GET(SalesLine."Bill-to Customer No.");
                IF Cust."Customer Price Group" <> '' THEN
                  SETRANGE("Sales Code",Cust."Customer Price Group");
                IF ApplySalesPrepaymentPct(SalesLine,SalesPrepaymentPct) THEN
                  EXIT;
              END;
            "Sales Type"::"All Customers":
              BEGIN
                SETRANGE("Sales Code");
                IF ApplySalesPrepaymentPct(SalesLine,SalesPrepaymentPct) THEN
                  EXIT;
              END;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE ApplySalesPrepaymentPct@3(VAR SalesLine@1000 : Record 37;VAR SalesPrepaymentPct@1001 : Record 459) : Boolean;
    BEGIN
      WITH SalesPrepaymentPct DO
        IF FINDLAST THEN BEGIN
          SalesLine."Prepayment %" := "Prepayment %";
          EXIT(TRUE);
        END;
    END;

    [External]
    PROCEDURE SetPurchPrepaymentPct@1(VAR PurchLine@1000000000 : Record 39;Date@1000000002 : Date);
    VAR
      PurchPrepaymentPct@1000000001 : Record 460;
    BEGIN
      WITH PurchPrepaymentPct DO BEGIN
        IF (PurchLine.Type <> PurchLine.Type::Item) OR (PurchLine."No." = '') OR
           (PurchLine."Document Type" <> PurchLine."Document Type"::Order )
        THEN
          EXIT;
        SETFILTER("Starting Date",'..%1',Date);
        SETFILTER("Ending Date",'%1|>=%2',0D,Date);
        SETRANGE("Item No.",PurchLine."No.");
        SETRANGE("Vendor No.",PurchLine."Pay-to Vendor No.");
        IF ApplyPurchPrepaymentPct(PurchLine,PurchPrepaymentPct) THEN
          EXIT;

        // All Vendors
        SETRANGE("Vendor No.",'');
        IF ApplyPurchPrepaymentPct(PurchLine,PurchPrepaymentPct) THEN
          EXIT;
      END;
    END;

    LOCAL PROCEDURE ApplyPurchPrepaymentPct@2(VAR PurchLine@1000 : Record 39;VAR PurchPrepaymentPct@1001 : Record 460) : Boolean;
    BEGIN
      WITH PurchPrepaymentPct DO
        IF FINDLAST THEN BEGIN
          PurchLine."Prepayment %" := "Prepayment %";
          EXIT(TRUE);
        END;
    END;

    [External]
    PROCEDURE TestSalesPrepayment@37(SalesHeader@1000 : Record 36) : Boolean;
    VAR
      SalesLine@1001 : Record 37;
      IsHandled@1002 : Boolean;
      TestResult@1003 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeTestSalesPrepayment(SalesHeader,TestResult,IsHandled);
      IF IsHandled THEN
        EXIT(TestResult);

      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETFILTER("Prepmt. Line Amount",'<>%1',0);
      IF SalesLine.FINDSET THEN
        REPEAT
          IF SalesLine."Prepmt. Amt. Inv." <> SalesLine."Prepmt. Line Amount" THEN
            EXIT(TRUE);
        UNTIL SalesLine.NEXT = 0;
    END;

    [External]
    PROCEDURE TestPurchasePrepayment@36(PurchaseHeader@1000 : Record 38) : Boolean;
    VAR
      PurchaseLine@1001 : Record 39;
      IsHandled@1002 : Boolean;
      TestResult@1003 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeTestPurchPrepayment(PurchaseHeader,TestResult,IsHandled);
      IF IsHandled THEN
        EXIT(TestResult);

      PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.SETFILTER("Prepmt. Line Amount",'<>%1',0);
      IF PurchaseLine.FINDSET THEN
        REPEAT
          IF PurchaseLine."Prepmt. Amt. Inv." <> PurchaseLine."Prepmt. Line Amount" THEN
            EXIT(TRUE);
        UNTIL PurchaseLine.NEXT = 0;
    END;

    [External]
    PROCEDURE TestSalesPayment@30(SalesHeader@1000 : Record 36) : Boolean;
    VAR
      SalesSetup@1002 : Record 311;
      CustLedgerEntry@1004 : Record 21;
      SalesInvHeader@1005 : Record 112;
    BEGIN
      SalesSetup.GET;
      IF NOT SalesSetup."Check Prepmt. when Posting" THEN
        EXIT(FALSE);

      SalesInvHeader.SETCURRENTKEY("Prepayment Order No.","Prepayment Invoice");
      SalesInvHeader.SETRANGE("Prepayment Order No.",SalesHeader."No.");
      SalesInvHeader.SETRANGE("Prepayment Invoice",TRUE);
      IF SalesInvHeader.FINDSET THEN
        REPEAT
          CustLedgerEntry.SETCURRENTKEY("Document No.");
          CustLedgerEntry.SETRANGE("Document Type",CustLedgerEntry."Document Type"::Invoice);
          CustLedgerEntry.SETRANGE("Document No.",SalesInvHeader."No.");
          CustLedgerEntry.SETFILTER("Remaining Amt. (LCY)",'<>%1',0);
          IF NOT CustLedgerEntry.ISEMPTY THEN
            EXIT(TRUE);
        UNTIL SalesInvHeader.NEXT = 0;

      EXIT(FALSE);
    END;

    [External]
    PROCEDURE TestPurchasePayment@35(PurchaseHeader@1004 : Record 38) : Boolean;
    VAR
      PurchasesPayablesSetup@1003 : Record 312;
      VendLedgerEntry@1002 : Record 25;
      PurchInvHeader@1001 : Record 122;
    BEGIN
      PurchasesPayablesSetup.GET;
      IF NOT PurchasesPayablesSetup."Check Prepmt. when Posting" THEN
        EXIT(FALSE);

      PurchInvHeader.SETCURRENTKEY("Prepayment Order No.","Prepayment Invoice");
      PurchInvHeader.SETRANGE("Prepayment Order No.",PurchaseHeader."No.");
      PurchInvHeader.SETRANGE("Prepayment Invoice",TRUE);
      IF PurchInvHeader.FINDSET THEN
        REPEAT
          VendLedgerEntry.SETCURRENTKEY("Document No.");
          VendLedgerEntry.SETRANGE("Document Type",VendLedgerEntry."Document Type"::Invoice);
          VendLedgerEntry.SETRANGE("Document No.",PurchInvHeader."No.");
          VendLedgerEntry.SETFILTER("Remaining Amt. (LCY)",'<>%1',0);
          IF NOT VendLedgerEntry.ISEMPTY THEN
            EXIT(TRUE);
        UNTIL PurchInvHeader.NEXT = 0;

      EXIT(FALSE);
    END;

    [External]
    PROCEDURE UpdatePendingPrepaymentSales@4();
    VAR
      SalesHeader@1000 : Record 36;
      PrepaymentMgt@1002 : Codeunit 441;
    BEGIN
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Order);
      SalesHeader.SETRANGE(Status,SalesHeader.Status::"Pending Prepayment");
      IF SalesHeader.FINDSET(TRUE) THEN
        REPEAT
          IF NOT PrepaymentMgt.TestSalesPayment(SalesHeader) THEN BEGIN
            CODEUNIT.RUN(CODEUNIT::"Release Sales Document",SalesHeader);
            IF SalesHeader.Status = SalesHeader.Status::Released THEN
              SENDTRACETAG(
                '0000254',UpdateSalesOrderStatusTxt,VERBOSITY::Normal,
                STRSUBSTNO(StatusOfSalesOrderIsChangedTxt,FORMAT(SalesHeader."No.")),DATACLASSIFICATION::CustomerContent);
          END;
        UNTIL SalesHeader.NEXT = 0;
    END;

    [External]
    PROCEDURE UpdatePendingPrepaymentPurchase@10();
    VAR
      PurchaseHeader@1000 : Record 38;
      PrepaymentMgt@1001 : Codeunit 441;
    BEGIN
      PurchaseHeader.SETRANGE("Document Type",PurchaseHeader."Document Type"::Order);
      PurchaseHeader.SETRANGE(Status,PurchaseHeader.Status::"Pending Prepayment");
      IF PurchaseHeader.FINDSET(TRUE) THEN
        REPEAT
          IF NOT PrepaymentMgt.TestPurchasePayment(PurchaseHeader) THEN BEGIN
            CODEUNIT.RUN(CODEUNIT::"Release Purchase Document",PurchaseHeader);
            IF PurchaseHeader.Status = PurchaseHeader.Status::Released THEN
              SENDTRACETAG(
                '0000255',UpdatePurchaseOrderStatusTxt,VERBOSITY::Normal,
                STRSUBSTNO(StatusOfPurchaseOrderIsChangedTxt,FORMAT(PurchaseHeader."No.")),DATACLASSIFICATION::CustomerContent);
          END;
        UNTIL PurchaseHeader.NEXT = 0;
    END;

    [External]
    PROCEDURE CreateAndStartJobQueueEntrySales@11(UpdateFrequency@1002 : 'Never,Daily,Weekly');
    BEGIN
      CreateAndStartJobQueueEntry(
        CODEUNIT::"Upd. Pending Prepmt. Sales",UpdateFrequency,UpdateSalesOrderStatusTxt);
    END;

    [External]
    PROCEDURE CreateAndStartJobQueueEntryPurchase@12(UpdateFrequency@1002 : 'Never,Daily,Weekly');
    BEGIN
      CreateAndStartJobQueueEntry(
        CODEUNIT::"Upd. Pending Prepmt. Purchase",UpdateFrequency,UpdatePurchaseOrderStatusTxt);
    END;

    [External]
    PROCEDURE CreateAndStartJobQueueEntry@5(CodeunitID@1001 : Integer;UpdateFrequency@1002 : 'Never,Daily,Weekly';Category@1004 : Text);
    VAR
      JobQueueEntry@1000 : Record 472;
      JobQueueManagement@1003 : Codeunit 456;
    BEGIN
      JobQueueManagement.DeleteJobQueueEntries(JobQueueEntry."Object Type to Run"::Codeunit,CodeunitID);

      JobQueueEntry."No. of Minutes between Runs" := UpdateFrequencyToNoOfMinutes(UpdateFrequency);
      JobQueueEntry."Object Type to Run" := JobQueueEntry."Object Type to Run"::Codeunit;
      JobQueueEntry."Object ID to Run" := CodeunitID;
      JobQueueManagement.CreateJobQueueEntry(JobQueueEntry);

      CODEUNIT.RUN(CODEUNIT::"Job Queue - Enqueue",JobQueueEntry);
      SENDTRACETAG(
        '0000256',Category,VERBOSITY::Normal,
        STRSUBSTNO(JobQueueEntryHasStartedTxt,FORMAT(UpdateFrequency)),DATACLASSIFICATION::SystemMetadata);
    END;

    LOCAL PROCEDURE UpdateFrequencyToNoOfMinutes@46(UpdateFrequency@1000 : 'Never,Daily,Weekly') : Integer;
    BEGIN
      CASE UpdateFrequency OF
        UpdateFrequency::Never:
          EXIT(0);
        UpdateFrequency::Daily:
          EXIT(60 * 24);
        UpdateFrequency::Weekly:
          EXIT(60 * 24 * 7);
      END;
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeTestSalesPrepayment@6(SalesHeader@1000 : Record 36;VAR TestResult@1001 : Boolean;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeTestPurchPrepayment@8(PurchHeader@1000 : Record 38;VAR TestResult@1001 : Boolean;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

