OBJECT Codeunit 133 Send Incoming Document to OCR
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    TableNo=130;
    OnRun=BEGIN
            SendDocToOCR(Rec);
          END;

  }
  CODE
  {
    VAR
      OCRWhenApprovalIsCompleteErr@1000 : TextConst 'ENU=The document can only be sent to the OCR service when the approval process is complete.;NOR=Dokumentet kan f›rst sendes til OCR-tjenesten n†r godkjenningsprosessen er fullf›rt.;SVE=Dokumentet kan inte skickas till OCR-tj„nsten f”rr„n godk„nnandeprocessen har slutf”rts.';
      NoOcrAttachmentErr@1001 : TextConst 'ENU=There is no attachment of type PDF or Image.;NOR=Det er ingen vedlegg av typen PDF eller Bilde.;SVE=Bilaga av typen PDF eller bild saknas.';
      NoAttachmentMarkedForOcrErr@1002 : TextConst 'ENU=You must select an attachment for use for OCR.;NOR=Du m† velge et vedlegg for † bruke OCR.;SVE=Du m†ste v„lja en bilaga som ska anv„ndas f”r OCR.';
      ShowMessages@1003 : Boolean;
      CannotRemoveFromJobQueueTxt@1004 : TextConst 'ENU=The document cannot be removed from queue since it is already sent.;NOR=Dokumentet kan ikke fjernes fra k›en fordi det allerede er sendt.;SVE=Dokumentet kan inte tas bort fr†n k”n eftersom det redan „r skickat.';
      CannotSendDocumentTxt@1005 : TextConst '@@@=%1 Status of the document for example: New, Released, Posted, Created, Rejected...;ENU=The document cannot be sent to the OCR service because its status is %1.;NOR=Dokumentet kan ikke sendes til OCR-tjenesten fordi statusen er %1.;SVE=Dokumentet kan inte skickas till OCR-tj„nsten med statusen %1.';
      CannotScheduleDocumentTxt@1007 : TextConst '@@@=%1 Status of the document for example: New, Released, Posted, Created, Rejected...;ENU=The document cannot be scheduled for sending to the OCR service because its status is %1.;NOR=Sendingen av dokumentet til OCR-tjenesten kan ikke planlegges fordi statusen er %1.;SVE=Dokumentet kan inte schemal„ggas f”r att skickas till OCR-tj„nsten med statusen %1.';
      RemovedFromJobQueueTxt@1006 : TextConst 'ENU=The document was successfully removed from Job Queue.;NOR=Dokumentet ble fjernet fra jobbk›en.;SVE=Dokumentet har tagits bort fr†n jobbk”n.';
      DocumentHasBeenScheduledTxt@1008 : TextConst 'ENU=The document has been scheduled for sending to the OCR service.;NOR=Sendingen av dokumentet til OCR-tjenesten er planlagt.;SVE=Dokumentet „r schemalagt f”r att skickas till OCR-tj„nsten.';
      DoYouWantToSetupOCRQst@1009 : TextConst 'ENU=The OCR service is not enabled.\\Do you want to open the OCR Service Setup window?;NOR=OCR-tjenesten er ikke aktivert.\\Vil du †pne vinduet Oppsett for OCR-tjeneste?;SVE=OCR-tj„nsten „r inte aktiverad.\\Vill du ”ppna f”nstret f”r OCR-serviceinst„llningar?';
      OCRServiceNotEnabledErr@1010 : TextConst 'ENU=The OCR service is not enabled.;NOR=OCR-tjenesten er ikke aktivert.;SVE=OCR-tj„nsten har inte aktiverats.';

    [Internal]
    PROCEDURE SendToJobQueue@55(VAR IncomingDocument@1002 : Record 130);
    BEGIN
      IF NOT VerifySendToOCR(IncomingDocument,CannotScheduleDocumentTxt) THEN
        EXIT;

      IncomingDocument.TESTFIELD("OCR Status",IncomingDocument."OCR Status"::" ");
      IncomingDocument."OCR Status" := IncomingDocument."OCR Status"::Ready;
      IncomingDocument.MODIFY;

      CODEUNIT.RUN(CODEUNIT::"Release Incoming Document",IncomingDocument);
      ShowMessage(DocumentHasBeenScheduledTxt);
      OnAfterIncomingDocReadyForOCR(IncomingDocument);
    END;

    [External]
    PROCEDURE RemoveFromJobQueue@41(VAR IncomingDocument@1000 : Record 130);
    VAR
      ReleaseIncomingDocument@1001 : Codeunit 132;
    BEGIN
      WITH IncomingDocument DO BEGIN
        IF "OCR Status" <> "OCR Status"::Ready THEN BEGIN
          ShowMessage(CannotRemoveFromJobQueueTxt);
          EXIT;
        END;

        "OCR Status" := "OCR Status"::" ";
        ReleaseIncomingDocument.Reopen(IncomingDocument);
        MODIFY;
        ShowMessage(RemovedFromJobQueueTxt);
      END;
    END;

    [Internal]
    PROCEDURE SendDocToOCR@31(VAR IncomingDocument@1001 : Record 130);
    VAR
      IncomingDocumentAttachment@1000 : Record 133;
      OCRServiceSetup@1002 : Record 1270;
    BEGIN
      OCRServiceSetup.GET;
      IF NOT OCRServiceSetup.Enabled THEN BEGIN
        IF NOT CONFIRM(DoYouWantToSetupOCRQst) THEN
          EXIT;
        PAGE.RUNMODAL(PAGE::"OCR Service Setup",OCRServiceSetup);
        IF NOT OCRServiceSetup.Enabled THEN
          ERROR(OCRServiceNotEnabledErr);
      END;

      IF NOT VerifySendToOCR(IncomingDocument,CannotSendDocumentTxt) THEN
        EXIT;

      UpdateIncomingDocumentAttachmentForOCR(IncomingDocument);

      CASE IncomingDocument."OCR Status" OF
        IncomingDocument."OCR Status"::" ":
          IncomingDocument."OCR Status" := IncomingDocument."OCR Status"::Ready;
        IncomingDocument."OCR Status"::Ready:
          ;
        ELSE
          EXIT;
      END;

      CODEUNIT.RUN(CODEUNIT::"Release Incoming Document",IncomingDocument);

      IncomingDocument.LOCKTABLE;
      IncomingDocument.FIND;
      // Check OCR Status due to it could be changed by another user in the meantime
      IF IncomingDocument."OCR Status" = IncomingDocument."OCR Status"::Ready THEN BEGIN
        IncomingDocumentAttachment.SETRANGE("Incoming Document Entry No.",IncomingDocument."Entry No.");
        IncomingDocumentAttachment.SETRANGE("Use for OCR",TRUE);
        IF NOT IncomingDocumentAttachment.FINDFIRST THEN
          ERROR(NoAttachmentMarkedForOcrErr);
        IncomingDocumentAttachment.SendToOCR;
        IncomingDocument."OCR Status" := IncomingDocument."OCR Status"::Sent;
        IncomingDocument.MODIFY;
      END;
      COMMIT;
      OnAfterIncomingDocSentToOCR(IncomingDocument);
    END;

    [External]
    PROCEDURE ScheduleJobQueueReceive@12();
    VAR
      OCRServiceSetup@1002 : Record 1270;
    BEGIN
      OCRServiceSetup.ScheduleJobQueueReceive;
    END;

    [Internal]
    PROCEDURE RetrieveDocFromOCR@37(VAR IncomingDocument@1002 : Record 130);
    VAR
      IncomingDocumentAttachment@1001 : Record 133;
      OCRServiceMgt@1000 : Codeunit 1294;
      OCRStatus@1003 : Integer;
    BEGIN
      WITH IncomingDocument DO BEGIN
        IF NOT ("OCR Status" IN ["OCR Status"::Sent,"OCR Status"::"Awaiting Verification"]) THEN
          TESTFIELD("OCR Status","OCR Status"::Sent);

        CheckNotCreated;
        LOCKTABLE;
        FIND;
        IncomingDocumentAttachment.SETRANGE("Incoming Document Entry No.","Entry No.");
        IncomingDocumentAttachment.SETRANGE("Use for OCR",TRUE);
        IF IncomingDocumentAttachment.FINDFIRST THEN BEGIN
          OCRStatus := OCRServiceMgt.GetDocumentForAttachment(IncomingDocumentAttachment);
          IF NOT (OCRStatus IN ["OCR Status"::Success,"OCR Status"::Error,"OCR Status"::"Awaiting Verification"]) THEN
            ERROR('');
        END;

        FIND;

        CASE OCRStatus OF
          "OCR Status"::Success:
            SetStatusToReceived(IncomingDocument);
          "OCR Status"::"Awaiting Verification":
            SetStatusToVerify(IncomingDocument);
          "OCR Status"::Error:
            SetStatusToFailed(IncomingDocument);
        END;
      END;
    END;

    [External]
    PROCEDURE SetStatusToReceived@6(VAR IncomingDocument@1000 : Record 130);
    BEGIN
      WITH IncomingDocument DO BEGIN
        FIND;
        IF ("OCR Status" = "OCR Status"::Success) AND "OCR Process Finished" THEN
          EXIT;

        "OCR Status" := "OCR Status"::Success;
        "OCR Process Finished" := TRUE;
        MODIFY;
        COMMIT;

        OnAfterIncomingDocReceivedFromOCR(IncomingDocument);
      END;
    END;

    [External]
    PROCEDURE SetStatusToFailed@8(VAR IncomingDocument@1000 : Record 130);
    BEGIN
      WITH IncomingDocument DO BEGIN
        FIND;
        "OCR Status" := "OCR Status"::Error;
        "OCR Process Finished" := TRUE;
        MODIFY;
        COMMIT;

        OnAfterIncomingDocReceivedFromOCR(IncomingDocument);
      END;
    END;

    [External]
    PROCEDURE SetStatusToVerify@9(VAR IncomingDocument@1000 : Record 130);
    BEGIN
      WITH IncomingDocument DO BEGIN
        FIND;
        "OCR Status" := "OCR Status"::"Awaiting Verification";
        MODIFY;
        COMMIT;
      END;
    END;

    [External]
    PROCEDURE TrySendToOCR@10(VAR IncomingDocument@1000 : Record 130) : Boolean;
    BEGIN
      EXIT(CODEUNIT.RUN(CODEUNIT::"Send Incoming Document to OCR",IncomingDocument));
    END;

    [External]
    PROCEDURE TryRetrieveFromOCR@13(VAR IncomingDocument@1002 : Record 130) : Boolean;
    BEGIN
      EXIT(CODEUNIT.RUN(CODEUNIT::"Retrieve Document From OCR",IncomingDocument));
    END;

    LOCAL PROCEDURE VerifySendToOCR@11(VAR IncomingDocument@1000 : Record 130;ErrorMessage@1002 : Text) : Boolean;
    VAR
      ApprovalsMgmt@1001 : Codeunit 1535;
    BEGIN
      WITH IncomingDocument DO BEGIN
        TESTFIELD(Posted,FALSE);
        CheckNotCreated;

        IF NOT (Status IN [Status::New,Status::Released,Status::"Pending Approval"]) THEN BEGIN
          ShowMessage(STRSUBSTNO(ErrorMessage,FORMAT(Status)));
          EXIT(FALSE);
        END;

        IF "OCR Status" IN ["OCR Status"::Sent,"OCR Status"::Success,"OCR Status"::"Awaiting Verification"] THEN BEGIN
          ShowMessage(STRSUBSTNO(ErrorMessage,FORMAT("OCR Status")));
          EXIT(FALSE);
        END;

        OnCheckIncomingDocSetForOCRRestrictions;

        IF ApprovalsMgmt.IsIncomingDocApprovalsWorkflowEnabled(IncomingDocument) AND (Status = Status::New) THEN
          ERROR(OCRWhenApprovalIsCompleteErr);

        UpdateIncomingDocumentAttachmentForOCR(IncomingDocument);
      END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE UpdateIncomingDocumentAttachmentForOCR@7(VAR IncomingDocument@1001 : Record 130);
    VAR
      IncomingDocumentAttachment@1000 : Record 133;
    BEGIN
      WITH IncomingDocument DO BEGIN
        IncomingDocumentAttachment.SETRANGE("Incoming Document Entry No.","Entry No.");
        IncomingDocumentAttachment.SETFILTER(Type,'%1|%2',IncomingDocumentAttachment.Type::PDF,IncomingDocumentAttachment.Type::Image);
        IF IncomingDocumentAttachment.ISEMPTY THEN
          ERROR(NoOcrAttachmentErr);
        TESTFIELD("OCR Service Doc. Template Code");
        IncomingDocumentAttachment.SETRANGE("Use for OCR",TRUE);
        IF IncomingDocumentAttachment.ISEMPTY THEN BEGIN
          IncomingDocumentAttachment.SETRANGE("Use for OCR");
          IncomingDocumentAttachment.SETRANGE("Main Attachment",TRUE);
          IncomingDocumentAttachment.FINDFIRST;
          IncomingDocumentAttachment."Use for OCR" := TRUE;
          IncomingDocumentAttachment.MODIFY;
        END;
      END;
    END;

    [External]
    PROCEDURE SetShowMessages@3(NewShowMessages@1000 : Boolean);
    BEGIN
      ShowMessages := NewShowMessages;
    END;

    LOCAL PROCEDURE ShowMessage@5(MessageText@1000 : Text);
    BEGIN
      IF ShowMessages THEN
        MESSAGE(MessageText);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterIncomingDocReadyForOCR@4(VAR IncomingDocument@1000 : Record 130);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterIncomingDocSentToOCR@1(VAR IncomingDocument@1000 : Record 130);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterIncomingDocReceivedFromOCR@2(VAR IncomingDocument@1000 : Record 130);
    BEGIN
    END;

    BEGIN
    END.
  }
}

