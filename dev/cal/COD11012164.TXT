OBJECT Codeunit 11012164 RAW Calculations
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1100525001 : TextConst 'DEU=Achtung: Die totale Produktion auf Baubeschreibungsposten %1 (%2) ist weniger als 90 Prozent der Ergebnisverpflichtung. Dies wird nicht verrechnet.;ENU=Note: The total Production on Tender Paragraph %1 (%2) is less then 90 percent of the quantity on the Tender Paragraph. This will not be settled.;NLD=Let op: De totale productie op bestekspost %1 (%2) is minder dan 90 procent van de resultaatverplichting. Dit wordt niet verrekend.;NOR=Obs! Den totale produksjonen er mindre enn 90 prosent av kvantumet i tilbudsavsnitt %1 (%2). Dette blir ikke avregnet.;SVE=Obs! Den totala produktionen understiger 90 procent av uppgiften i anbudsstycket %1 (%2). Detta kommer inte att kvittas.';
      Text002@1210190000 : TextConst 'DEU=Achtung: Die totale Produktion auf Baubeschreibungsposten %1 (%2) ist weniger als 90 Prozent der Ergebnisverpflichtung. Dies wird nicht verrechnet.;ENU=Note: The total Production on Tender Paragraph %1 (%2) is less then 90 percent of the quantity on the Tender Paragraph. You may change the settlement price.;NLD=Let op: De totale productie op bestekspost %1 (%2) is minder dan 90 procent van de resultaatverplichting. Dit wordt niet verrekend.;NOR=Obs! Den totale produksjonen er mindre 90 prosent av kvantumet i tilbudsavsnitt %1 (%2). Du kan endre avregningspris.;SVE=Obs! Den totala produktionen understiger 90 procent av uppgiften i anbudsstycket %1 (%2). Du kan Ñndra avrÑkningspriset.';
      Text003@1100529600 : TextConst 'DEU=Mîchten Sie den Vertragspreis auf Basis des Baubeschreibungsparagraphen ausfÅllen?;ENU=Do you want to fill the contract price based on the tender paragraph?;NLD=Wilt u de aanneemsom vullen op basis van de besteksposten?';

    PROCEDURE CalculateProduction@1100485000(TenderParagraphbyPrincipal@1100485001 : Record 11012470;VAR ioInstallmentMotLineRec@1100485000 : Record 11012472);
    VAR
      ProjectPrincipal@1100485002 : Record 11012005;
      lvNormalProd@1100485004 : Decimal;
      lvExcessProd@1100485003 : Decimal;
      DummyProd@1210190000 : Decimal;
    BEGIN
      WITH ioInstallmentMotLineRec DO BEGIN
        //DP00886.sn
        CALCFIELDS("Settlement Price (LCY)", "Unit Price (LCY)");
        CALCFIELDS("Settlement Price (FCY)", "Unit Price (FCY)");
        //DP00886.en
        ProjectPrincipal.GET("Project No.",Principal);
        DetermineExcessProd(ioInstallmentMotLineRec, lvNormalProd,lvExcessProd,DummyProd);
        CASE ProjectPrincipal."Installm.Motivation Method" OF
          ProjectPrincipal."Installm.Motivation Method"::Points, ProjectPrincipal."Installm.Motivation Method"::Percentages:
            BEGIN
              IF ("Number of Points/Percentage" = 0) OR
                 (("Unit Price (LCY)" = 0) AND ("Currency Code" = '')) OR
                 (("Unit Price (FCY)" = 0) AND ("Currency Code" <> '')) THEN BEGIN  //DP00886
                "Production Value Cum. (LCY)" := 0;
                "Excess Prod. Value Cum. (LCY)" := 0;
                //DP00886.sn
                "Production Value Cum. (FCY)" := 0;
                "Excess Prod. Value Cum. (FCY)" := 0;
                //DP00886.en
              END ELSE BEGIN
                "Production Value Cum. (LCY)" := (lvNormalProd / "Number of Points/Percentage")
                                    * TenderParagraphbyPrincipal."Total Amount (LCY)";
                "Excess Prod. Value Cum. (LCY)" := (lvExcessProd / "Number of Points/Percentage")
                                    * ((TenderParagraphbyPrincipal."Total Amount (LCY)"/"Unit Price (LCY)")*"Settlement Price (LCY)");
                //DP00886.sn
                "Production Value Cum. (FCY)" := (lvNormalProd / "Number of Points/Percentage")
                                    * TenderParagraphbyPrincipal."Total Amount (FCY)";
                "Excess Prod. Value Cum. (FCY)" := (lvExcessProd / "Number of Points/Percentage")
                                    * ((TenderParagraphbyPrincipal."Total Amount (FCY)"/"Unit Price (FCY)")*"Settlement Price (FCY)");
                //DP00886.en
              END;
            END;
          ProjectPrincipal."Installm.Motivation Method"::"Element Quantity":
            BEGIN
              //C041137.sn
              IF "Extension Contract" <> '' THEN BEGIN
                "Production Value Cum. (LCY)" := lvNormalProd * "Settlement Price (LCY)";
                "Production Value Cum. (FCY)" := lvNormalProd * "Settlement Price (FCY)";
              END ELSE BEGIN
              //C041137.en
                "Production Value Cum. (LCY)" := lvNormalProd * "Unit Price (LCY)";
                "Production Value Cum. (FCY)" := lvNormalProd * "Unit Price (FCY)";
              END;
              "Excess Prod. Value Cum. (LCY)" := lvExcessProd * "Settlement Price (LCY)";
              //DP00886.sn
              "Excess Prod. Value Cum. (FCY)" := lvExcessProd * "Settlement Price (FCY)";
              //DP00886.sn
            END;
        END;
        //DP00886.sn
        IF ("Currency Code" <> '') THEN BEGIN
          VALIDATE("Production Value Cum. (FCY)", ROUND("Production Value Cum. (FCY)"));
          VALIDATE("Excess Prod. Value Cum. (FCY)", ROUND("Excess Prod. Value Cum. (FCY)"));
        END ELSE BEGIN
          VALIDATE("Production Value Cum. (LCY)", ROUND("Production Value Cum. (LCY)"));
          VALIDATE("Excess Prod. Value Cum. (LCY)", ROUND("Excess Prod. Value Cum. (LCY)"));
        END;
        //DP00886.en
      END;
    END;

    PROCEDURE DetermineExcessProd@1100485004(iInstallmentMotLineRec@1100485004 : Record 11012472;VAR oNormalProd@1100485002 : Decimal;VAR SettledExcessProd@1100485003 : Decimal;VAR TotalExcessProd@1210190000 : Decimal);
    VAR
      ProjectPrincipal@1100485001 : Record 11012005;
      lvTenderElemAmount@1100485006 : Decimal;
    BEGIN
      TotalExcessProd := 0;
      WITH iInstallmentMotLineRec DO BEGIN
        CALCFIELDS("Number of Points/Percentage", "Element Quantity", "Settle Excess", Finished);
        IF NOT ProjectPrincipal.GET("Project No.",Principal) THEN BEGIN
          //occurs when uninitialised iInstallmentMotLineRec is passed
          oNormalProd := 0;
          SettledExcessProd := 0;
        END;
        CASE ProjectPrincipal."Installm.Motivation Method" OF
          ProjectPrincipal."Installm.Motivation Method"::Points, ProjectPrincipal."Installm.Motivation Method"::Percentages:
            lvTenderElemAmount := "Number of Points/Percentage";
          ProjectPrincipal."Installm.Motivation Method"::"Element Quantity":
            lvTenderElemAmount := "Element Quantity";
        END;
        CASE "Settlement Type" OF
          "Settlement Type"::"Non Settling":
            BEGIN
              IF Finished THEN BEGIN
                oNormalProd := lvTenderElemAmount;
              END ELSE BEGIN
                IF "Production Cumulative" < lvTenderElemAmount THEN
                  oNormalProd := "Production Cumulative"
                ELSE
                  oNormalProd := lvTenderElemAmount;
              END;
              SettledExcessProd := 0;
              IF "Settle Excess" THEN BEGIN
                //niet-verrekenbare posten alleen boven de 110% verrekenen als "Settle Excess", en 100% als "Finished"
                IF ("Production Cumulative" > (1.1 * lvTenderElemAmount)) THEN
                  SettledExcessProd := "Production Cumulative" - (1.1 * lvTenderElemAmount);
                //C008144.sn
                //Now also for Non Settling. Only settle less than 90% if "Settle Excess" and 'Settl underrun direct'
                IF ("Production Cumulative" < (0.9 * lvTenderElemAmount)) AND ProjectPrincipal."Direct Settle Underrun" THEN BEGIN
                  SettledExcessProd := "Production Cumulative" - (0.9 * lvTenderElemAmount);
                  TotalExcessProd := "Production Cumulative" - lvTenderElemAmount;;
                END;
                //C008144.en
              END;

              IF "Production Cumulative" > lvTenderElemAmount THEN
                TotalExcessProd := "Production Cumulative" - lvTenderElemAmount;;
            END;
          "Settlement Type"::Settling:
            BEGIN
              //verrekenbare posten altijd verrekenen boven 100%
              oNormalProd := "Production Cumulative";
              SettledExcessProd := 0;
              IF "Production Cumulative" > lvTenderElemAmount THEN BEGIN
                oNormalProd := lvTenderElemAmount;
                SettledExcessProd := "Production Cumulative" - lvTenderElemAmount;
              END;
              IF ("Production Cumulative" < lvTenderElemAmount) AND ProjectPrincipal."Direct Settle Underrun Settlin" THEN
                SettledExcessProd := "Production Cumulative" - lvTenderElemAmount;
            END;
          "Settlement Type"::Approved:
            BEGIN
              //geaccordeerde posten nooit verrekenen boven 100%
              oNormalProd := "Production Cumulative";
              SettledExcessProd := 0;
              IF "Production Cumulative" > lvTenderElemAmount THEN
                oNormalProd := lvTenderElemAmount;
              IF ("Production Cumulative" < lvTenderElemAmount) AND Finished THEN
                oNormalProd := lvTenderElemAmount;
            END;
          ELSE  //" ","Reduction","Open"
            BEGIN
              oNormalProd := "Production Cumulative";
              SettledExcessProd := 0;
            END;
        END;
      END;
    END;

    PROCEDURE CalculateSubTotal@1100485001(iInstallmOvRec@1100485001 : Record 11012265;VAR oContractAmount@1100485000 : Decimal);
    VAR
      ProjectPrincipal@1100525000 : Record 11012005;
      TenderParagraphbyPrincipal@1100485002 : Record 11012470;
    BEGIN
      //calculates the subtotal like it is meant in RAW regulations 01.02.03 part 4
      ProjectPrincipal.GET(iInstallmOvRec."Project No.",iInstallmOvRec.Principal);  //DP00886

      oContractAmount := 0;
      TenderParagraphbyPrincipal.SETRANGE("Project No.", iInstallmOvRec."Project No.");
      TenderParagraphbyPrincipal.SETRANGE(Principal, iInstallmOvRec.Principal);
      TenderParagraphbyPrincipal.SETFILTER("Contract No.", '%1', '');  //DP01491a
      //DP01488.sn
      //IF iInstallmOvRec."Extension Contract" = '' THEN
      //  TenderParagraphbyPrincipal.SETFILTER("Contract No.", '%1', '')
      //ELSE
      //  TenderParagraphbyPrincipal.SETFILTER("Contract No.", iInstallmOvRec."Extension Contract");
      //DP01488.en
      TenderParagraphbyPrincipal.SETRANGE(Type, TenderParagraphbyPrincipal.Type::Normal); //only paragraphs 0..899999 get type Normal
      //TenderParagraphbyPrincipal.SETFILTER(Type, '<>%1&<>%2&<>%3',
      //  TenderParagraphbyPrincipal.Type::Surcharge,
      //  TenderParagraphbyPrincipal.Type::Contributions,
      //  TenderParagraphbyPrincipal.Type::"Extra-Contract");
      IF TenderParagraphbyPrincipal.FINDFIRST THEN
        REPEAT
          IF ProjectPrincipal."Currency Code" <> '' THEN  //DP00886
            oContractAmount += TenderParagraphbyPrincipal."Total Amount (FCY)"
          ELSE
            oContractAmount += TenderParagraphbyPrincipal."Total Amount (LCY)";
        UNTIL TenderParagraphbyPrincipal.NEXT = 0;

      IF ProjectPrincipal."Currency Code" <> '' THEN  //DP00886
        oContractAmount += ProjectPrincipal."Fictitious Amount Open (FCY)"
      ELSE
        oContractAmount += ProjectPrincipal."Fictitious Amount Open (LCY)";
    END;

    PROCEDURE CalculateAKPerc@1100525000(iProjNo@1100485001 : Code[20];iPrincipal@1100525000 : Code[20];VAR oPercentage@1100485000 : Decimal);
    VAR
      ProjectPrincipal@1100525003 : Record 11012005;
      TenderParagraphbyPrincipal@1100485002 : Record 11012470;
      lvContractAmount@1100525001 : Decimal;
      lvAKAmount@1100525002 : Decimal;
    BEGIN
      ProjectPrincipal.GET(iProjNo,iPrincipal);  //DP00886

      oPercentage := 0;
      TenderParagraphbyPrincipal.SETCURRENTKEY("Project No.", Principal, "Contract No.", Type);
      TenderParagraphbyPrincipal.SETRANGE("Project No.", iProjNo);
      TenderParagraphbyPrincipal.SETRANGE(Principal, iPrincipal);
      TenderParagraphbyPrincipal.SETFILTER(Type, '<>%1&<>%2&<>%3',
        TenderParagraphbyPrincipal.Type::Surcharge,
        TenderParagraphbyPrincipal.Type::Contributions,
        TenderParagraphbyPrincipal.Type::"Extra-Contract");
      IF ProjectPrincipal."Currency Code" <> '' THEN BEGIN  //DP00886
        TenderParagraphbyPrincipal.CALCSUMS("Total Amount (FCY)");
        lvContractAmount := TenderParagraphbyPrincipal."Total Amount (FCY)";
      END ELSE BEGIN
        TenderParagraphbyPrincipal.CALCSUMS("Total Amount (LCY)");
        lvContractAmount := TenderParagraphbyPrincipal."Total Amount (LCY)";
      END;

      TenderParagraphbyPrincipal.SETFILTER(Type, '=%1', TenderParagraphbyPrincipal.Type::Surcharge);
      IF ProjectPrincipal."Currency Code" <> '' THEN BEGIN  //DP00886
        TenderParagraphbyPrincipal.CALCSUMS("Total Amount (FCY)");
        lvAKAmount := TenderParagraphbyPrincipal."Total Amount (FCY)";
      END ELSE BEGIN
        TenderParagraphbyPrincipal.CALCSUMS("Total Amount (LCY)");
        lvAKAmount := TenderParagraphbyPrincipal."Total Amount (LCY)";
      END;

      IF lvContractAmount <> 0 THEN
        oPercentage := (lvAKAmount/lvContractAmount) * 100
      ELSE
        oPercentage := 0;
    END;

    PROCEDURE CalculatePrincipalContractAmount@1100529601(VAR ProjectPrincipal@1100529602 : Record 11012005);
    VAR
      TenderParagraphbyPrincipal@1100485002 : Record 11012470;
    BEGIN
      IF GUIALLOWED THEN
        IF NOT CONFIRM(Text003) THEN
          EXIT;

      TenderParagraphbyPrincipal.SETRANGE("Project No.", ProjectPrincipal."Project No.");
      TenderParagraphbyPrincipal.SETRANGE(Principal, ProjectPrincipal.Principal);
      TenderParagraphbyPrincipal.CALCSUMS("Total Amount (LCY)");
      ProjectPrincipal.VALIDATE("Contract Amount (LCY)", TenderParagraphbyPrincipal."Total Amount (LCY)");
    END;

    PROCEDURE FinalSettlement@1100485002(iInstallmOvLineRec@1100485000 : Record 11012266;VAR oQuantityDiff@1100485001 : Decimal;VAR oAmountMore@1100485002 : Decimal;VAR oAmountLess@1100485003 : Decimal);
    VAR
      ProjectPrincipal@1100485005 : Record 11012005;
      TenderParagraphbyPrincipal@1100485007 : Record 11012470;
      lvTenderElemAmount@1100485004 : Decimal;
      lvAmount@1100485006 : Decimal;
      SettlementPrice@1100525000 : Decimal;
      UnitPrice@1100525001 : Decimal;
      TotalAmount@1100525002 : Decimal;
    BEGIN
      //Deze functie wordt gebruikt bij de eindafrekening, berekent de het meer/minderwerk voor 1 post
      WITH iInstallmOvLineRec DO BEGIN
        IF ProjectPrincipal.GET("Project No.",Principal) THEN;
        IF TenderParagraphbyPrincipal.GET("Project No.",Principal, '', "Tender Paragraph No.") THEN;  //db, 11-07-16: old key-field removed
        CASE ProjectPrincipal."Installm.Motivation Method" OF
          ProjectPrincipal."Installm.Motivation Method"::Points, ProjectPrincipal."Installm.Motivation Method"::Percentages:
              lvTenderElemAmount := TenderParagraphbyPrincipal."Number of Points/Percentage";
          ProjectPrincipal."Installm.Motivation Method"::"Element Quantity":
              lvTenderElemAmount := TenderParagraphbyPrincipal.Quantity;
        END;
        //DP00886.sn
        CALCFIELDS("Settlement Type", "Settlement Price (LCY)", "Settlement Price (FCY)");
        IF "Currency Code" <> '' THEN BEGIN
          SettlementPrice := "Settlement Price (FCY)";
          UnitPrice := "Unit Price (FCY)";
          TotalAmount := TenderParagraphbyPrincipal."Total Amount (FCY)";
        END ELSE BEGIN
          SettlementPrice := "Settlement Price (LCY)";
          UnitPrice := "Unit Price (LCY)";
          TotalAmount := TenderParagraphbyPrincipal."Total Amount (LCY)";
        END;
        //DP00886.en
        CASE "Settlement Type" OF
          "Settlement Type"::"Non Settling":
            BEGIN
              oQuantityDiff := "Production Cumulative" - lvTenderElemAmount;
              IF "Production Cumulative" < (0.9 * lvTenderElemAmount) THEN BEGIN
                IF TenderParagraphbyPrincipal."Settle Excess" THEN BEGIN
                  IF NOT ProjectPrincipal."Direct Settle Underrun" THEN  //C008144.n
                    lvAmount := ("Production Cumulative" - (0.9 *  lvTenderElemAmount)) * SettlementPrice;  //DP00886
                END ELSE BEGIN
                  MESSAGE(Text001, "Tender Paragraph No.",Description);
                END;
              END ELSE BEGIN
                lvAmount := 0;
              END;
            END;
          "Settlement Type"::Settling:
            BEGIN
              oQuantityDiff := "Production Cumulative" - lvTenderElemAmount;
              lvAmount := 0;
              CASE ProjectPrincipal."Installm.Motivation Method" OF
                ProjectPrincipal."Installm.Motivation Method"::Points, ProjectPrincipal."Installm.Motivation Method"::Percentages:
                  //verrekenen tegen verrekenpr.
                  lvAmount := (oQuantityDiff / TenderParagraphbyPrincipal."Number of Points/Percentage")
                      * ((TotalAmount / UnitPrice) * SettlementPrice);  //DP00886
                ProjectPrincipal."Installm.Motivation Method"::"Element Quantity":
                  lvAmount := oQuantityDiff * SettlementPrice;  //DP00886
              END; //end case
              IF "Production Cumulative" < (0.9 * lvTenderElemAmount) THEN
                MESSAGE(Text002, "Tender Paragraph No.",Description);
            END;
          "Settlement Type"::Approved:
            BEGIN
              oQuantityDiff := "Production Cumulative" - lvTenderElemAmount;
              lvAmount := 0;
            END;
          ELSE  //" ","Reduction","Open"
            BEGIN
              oQuantityDiff := "Production Cumulative" - lvTenderElemAmount;
              lvAmount := 0;
            END;
        END; //END Case
        IF lvAmount < 0 THEN BEGIN
          oAmountMore := 0;
          oAmountLess := -1 * lvAmount
        END ELSE BEGIN
          oAmountMore := lvAmount;
          oAmountLess := 0;
        END;
      END;
    END;

    PROCEDURE CalculateSettlementPrices@1100485003(iJob@1100485000 : Code[20];iPrincipal@1100485001 : Code[20];iContract@1100485002 : Code[10];iRaisePerc@1100485005 : Decimal);
    VAR
      TenderParagraphbyPrincipal@1100485003 : Record 11012470;
    BEGIN
      WITH TenderParagraphbyPrincipal DO BEGIN
        SETRANGE("Project No.", iJob);
        SETRANGE(Principal, iPrincipal);
        SETRANGE("Contract No.", iContract);
        IF FINDFIRST THEN BEGIN
          REPEAT
            CalcSettlementPrice;  //DP01841
            MODIFY;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    BEGIN
    END.
  }
}

