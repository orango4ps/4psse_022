OBJECT Report 11128533 Remittance - Import (Bank)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVNO10.00.00.15140 (15000062),4PSSE.NO;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Remittance - Import (Bank);
               NOR=Remittering - les inn (bank)];
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   GenLedgSetup.GET;
                   GenLedgSetup.TESTFIELD("LCY Code");
                   DateNow := TODAY;
                   TimeNow := TIME;
                   NoOfLines := 0;
                   Betfor99IsRead := FALSE;
                   PaymentCurrency := '';
                   AccountCurrency := '';
                   CreateNewDocumentNo := TRUE;
                   Betfor03IsRead := FALSE;
                   MoreReturnJournals := FALSE;
                   FileImp := STRSUBSTNO(Text15000006,CurrentFileName);
                 END;

    OnPreReport=BEGIN
                  ServerTempFile := FileMgt.UploadFileSilent(CurrentFileName);
                  // Create work file.
                  // No changes are made directly to the OriginalFilename, since it is renamed
                  // at the end (the file can't be renamed while it's open).
                  TxtFile.TEXTMODE := TRUE;
                  TxtFile.OPEN(ServerTempFile);

                  CreatePaymOrder;
                  WHILE TxtFile.LEN <> TxtFile.POS DO BEGIN
                    TxtFile.READ(FileData);
                    PaymentOrderData2.INIT;
                    PaymentOrderData2."Payment Order No." := PaymOrder.ID;
                    PaymentOrderData2."Line No" += 1;
                    PaymentOrderData2.Data := PADSTR(FileData,80,' '); // Make sure the line is 80 chars long.;
                    PaymentOrderData2.INSERT;
                  END
                END;

    OnPostReport=BEGIN
                   TxtFile.CLOSE;
                   // BETFOR99 should be read by the end of the import:
                   IF NOT Betfor99IsRead THEN
                     ERROR(Text15000008,FileImp);

                   IF NOT CONFIRM(STRSUBSTNO(
                          Text15000000,
                          FileMgt.GetFileName(CurrentFileName),NumberApproved,NumberRejected,NumberSettled),
                        TRUE)
                   THEN
                     ERROR(Text15000005);

                   PaymentOrderData2.DELETEALL;
                 END;

    UseRequestPage=No;
  }
  DATASET
  {
    { 5444;    ;DataItem;                    ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number);
               OnPreDataItem=BEGIN
                               SETRANGE(Number,1,PaymentOrderData2.COUNT);
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Number = 1 THEN
                                    PaymentOrderData2.FINDSET
                                  ELSE
                                    PaymentOrderData2.NEXT;

                                  // Import line to a variable and process it later:
                                  NoOfLines := NoOfLines + 1;
                                  LineData[NoOfLines] := PaymentOrderData2.Data;
                                  IF NoOfLines = 4 THEN BEGIN // All 4 lines in transaction are read:
                                    NoOfLines := 0; // From the begining
                                    TransCode := COPYSTR(LineData[1],41,8); // Transaction code
                                    CASE TransCode OF
                                      'BETFOR00':
                                        ReadBETFOR00;
                                      'BETFOR01':
                                        ReadBETFOR01;
                                      'BETFOR02':
                                        ReadBETFOR02;
                                      'BETFOR03':
                                        ReadBETFOR03;
                                      'BETFOR04':
                                        ReadBETFOR04;
                                      'BETFOR21':
                                        ReadBETFOR21;
                                      'BETFOR22':
                                        ReadBETFOR22;
                                      'BETFOR23':
                                        ReadBETFOR23;
                                      'BETFOR99':
                                        ReadBETFOR99;
                                      ELSE
                                        ERROR(Text15000007,FileImp,TransCode);
                                    END;
                                  END;
                                  PaymentOrderData := PaymentOrderData2;
                                  PaymentOrderData.INSERT;
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      RemAccount@1080002 : Record 11128506;
      LatestRemAccount@1080003 : Record 11128506;
      PaymOrder@1080004 : Record 11128504;
      RemAgreement@1080005 : Record 11128503;
      LatestRemAgreement@1080006 : Record 11128503;
      WaitingJournal@1080007 : Record 11128507;
      CurrentJournal@1080009 : Record 81;
      GenLedgSetup@1080010 : Record 98;
      PaymentOrderData@1080011 : Record 11128505;
      PaymentOrderData2@1080012 : TEMPORARY Record 11128505;
      NoSeriesControl@1080014 : Codeunit 396;
      RemTools@1080015 : Codeunit 11128515;
      FileMgt@1080091 : Codeunit 419;
      TxtFile@1080093 : File;
      JournalNextLineNo@1080017 : Integer;
      NoOfLines@1080018 : Integer;
      NumberApproved@1080019 : Integer;
      NumberSettled@1080020 : Integer;
      NumberRejected@1080021 : Integer;
      OwnRef@1080022 : Integer;
      ErrorLevel@1080023 : Integer;
      CancellationCause@1080025 : Integer;
      PriceInfo@1080026 : Integer;
      BalanceEntryAmount@1080029 : Decimal;
      BalanceEntryAmountLCY@1080030 : Decimal;
      Commission@1080031 : Decimal;
      TransCommission@1080032 : Decimal;
      RealExchangeRate@1080033 : Decimal;
      ReturnCode@1080034 : Code[2];
      TransDocumentNo@1080035 : Code[20];
      PaymentCurrency@1080036 : Code[3];
      LatestVend@1080038 : Code[20];
      LatestCurrencyCode@1080039 : Code[3];
      AccountCurrency@1080040 : Code[10];
      TransCode@1080041 : Code[8];
      LineData@1080042 : ARRAY [4] OF Text[80];
      CurrentFileName@1080043 : Text[250];
      CurrentNote@1080045 : Text[80];
      EffRef@1080046 : Text[6];
      FileImp@1080047 : Text[250];
      ErrorMessage@1080048 : ARRAY [5] OF Text[250];
      ExecRef2@1080049 : Text[12];
      FileData@1080094 : Text[80];
      ServerTempFile@1080092 : Text[1024];
      First@1080050 : Boolean;
      Betfor99IsRead@1080051 : Boolean;
      Betfor03IsRead@1080052 : Boolean;
      CreateNewDocumentNo@1080053 : Boolean;
      MoreReturnJournals@1080055 : Boolean;
      ValueDate@1080056 : Date;
      LatestDate@1080057 : Date;
      DateNow@1080058 : Date;
      TimeNow@1080059 : Time;
      Text15000000@1080061 : TextConst '@@@=Parameter 1 - file name, 2, 3, 4 - integer numbers.;ENU=Return data for the file "%1" are imported correctly:\Approved: %2.\Rejected: %3.\Settled: %4.\\%4 settled payments are transferred to payment journal.;NOR=Returdata for filen %1 er riktig lest inn:\Godkjent: %2.\Avvist: %3.\Avregnet: %4.\\%4 avregnede betalinger overf›res til betalingskladd.';
      Text15000005@1080066 : TextConst 'ENU=Import is cancelled.;NOR=Innlesing avbrutt.';
      Text15000006@1080067 : TextConst 'ENU=Return file "%1":;NOR=Returfil "%1":';
      Text15000007@1080068 : TextConst 'ENU=%1\Error: Transaction code is not valid"%2".;NOR=%1\Feil: Ugyldig transaksjonskode "%2".';
      Text15000008@1080069 : TextConst 'ENU=%1\Return file is not complete. System cannot find closing transaction (PAYFOR99) in return file.\Import is cancelled.;NOR=%1\Returfilen er ikke komplett. Fant ikke avslutningstransaksjon (BETFOR99) i returfilen.\Innlesing avbrutt.';
      Text15000010@1080071 : TextConst 'ENU=%1\Error: Transaction type PAYFOR22 (batch transfer) is not valid.;NOR=%1\Feil: Transaksjonstype BETFOR22 (masseoverf›rsel) er ikke gyldig.';
      Text15000012@1080073 : TextConst 'ENU=cannot be %1 when settling;NOR=kan ikke v‘re %1 ved avregning';
      Text15000013@1080074 : TextConst 'ENU=cannot be %1. Receipt return must be imported before settling;NOR=kan ikke v‘re %1. Mottaksretur skal leses inn f›r avregning';
      Text15000014@1080075 : TextConst 'ENU=Due date changed from %1 to %2.;NOR=Forfallsdato endret fra %1 til %2.';
      Text15000015@1080076 : TextConst 'ENU=Internal error in remittance module:\Payment currency code in journal (%1) does not match paym. curr. code in return file (%2).;NOR=Intern feil i remitteringsmodulen:\Valutakode for betaling stemmer ikke i kladd (%1) og returfil (%2).';
      Text15000016@1080077 : TextConst 'ENU=%1\Real exchange rate is missing from return file.;NOR=%1\Realkurs mangler i returfilen.';
      Text15000017@1080078 : TextConst 'ENU=Internal error in remittance module:\Unknown return code (%1).;NOR=Intern feil i remitteringsmodulen:\Ukjent returkode (%1).';
      Text15000018@1080079 : TextConst '@@@=Parameter 1 - bank account number, 2 and 4 - currency code, 3 - account number.;ENU=Currency codes should be identical:\Bank account %1: currency code is identical to ''%2''.\Remittance account %3: currency code is identical to ''%4''.;NOR=Valutakoder m† v‘re identiske:\Bankkonto %1: valutakoden er lik  %2.\Remitteringskonto %3: valutakoden er lik %4.';
      Text15000021@1080082 : TextConst 'ENU=Remittance: Commission;NOR=Remittering: Provisjon';
      Text15000022@1080083 : TextConst 'ENU=Remittance: Vendors %1;NOR=Remittering: Leverand›rer %1';
      Text15000023@1080084 : TextConst 'ENU=Remittance: Vendors %1;NOR=Remittering: Leverand›rer %1';
      Text15000024@1080085 : TextConst 'ENU=Remittance: Round off/Divergence;NOR=Remittering: Avrunding/Avvik';
      Text15000025@1080086 : TextConst 'ENU=Round off/Divergence is too large.\Max. round off/divergence is %1 (LCY).;NOR=Avrunding/avvik er for stort.\Maks. avrunding/avvik er %1 (NOK).;SVE=Avrundning/Avvikelse „r f”r stor.\Max avrundning/avvikelse „r %1 (BVA)';
      Text15000026@1080087 : TextConst 'ENU=must be specified;NOR=m† angis';
      Text15000027@1080088 : TextConst 'ENU=%1\The Remittance Status must not be %2 for waiting journal line with Reference %3.;NOR=%1\Remitteringsstatusen kan ikke v‘re %2 for ventekladdlinjen med referanse %3.';
      Text15000028@1080089 : TextConst 'ENU=cannot be settled when payment is rejected;NOR=kan ikke v‘re avregnet n†r betaling avvises';
      GenJournalLineExt@111280000 : Record 11128091;

    LOCAL PROCEDURE ReadBETFOR00@1080001();
    BEGIN
      // Identification.
      NewTransaction;
      IF NOT ReturnErrorCheck(5,'BETFOR00') THEN
        EXIT;
    END;

    LOCAL PROCEDURE ReadBETFOR01@1080002();
    VAR
      RealExchRateText@1080001 : Text[9];
      RealExchRateDecFact@1080002 : Decimal;
    BEGIN
      // Transfer transaction.
      IF NOT ReturnErrorCheck(4,'BETFOR01') THEN
        EXIT;
      IF ReturnCode = '02' THEN BEGIN
        PaymentCurrency := COPYSTR(LineData[2],37,3);
        IF PaymentCurrency = '' THEN // No payment currency. Read invoice currency:
          PaymentCurrency := COPYSTR(LineData[2],40,3);
        IF PaymentCurrency = GenLedgSetup."LCY Code" THEN
          PaymentCurrency := ''; // Payment currency is LCY

        // Real exchange rate is copied and used later if the account
        // is charged in LCY and payment is made in currency
        RealExchRateText := COPYSTR(LineData[3],31,8);
        // Chekc if the fifth decimal is specified
        IF STRPOS('0123456789',COPYSTR(LineData[3],39,1)) > 0 THEN BEGIN
          RealExchRateText := RealExchRateText + COPYSTR(LineData[3],39,1);
          RealExchRateDecFact := 100000; // RealExchangeRate has 5 decimals
        END ELSE
          RealExchRateDecFact := 10000; // RealExchangeRate has 4 decimals
        IF EVALUATE(RealExchangeRate,RealExchRateText) THEN
          RealExchangeRate := RealExchangeRate / RealExchRateDecFact
        ELSE
          RealExchangeRate := 0;
        // importing execution ref. 2
        EVALUATE(ExecRef2,COPYSTR(LineData[3],43,12));

        // importing cancel. cause
        SetCancellationCause(COPYSTR(LineData[4],53,1));

        EVALUATE(Commission,COPYSTR(LineData[4],32,9));
        Commission := Commission / 100;

        ValueDate := DateFromText(COPYSTR(LineData[4],26,6));

        EffRef := COPYSTR(LineData[4],12,6); // Handling ref. is saved in waiting journal.
        EVALUATE(PriceInfo,COPYSTR(LineData[4],30,1));
      END;
    END;

    LOCAL PROCEDURE ReadBETFOR02@1080003();
    BEGIN
      // Bank link transaction
      IF NOT ReturnErrorCheck(3,'BETFOR02') THEN
        EXIT;
    END;

    LOCAL PROCEDURE ReadBETFOR03@1080004();
    BEGIN
      // Recipient transaction
      Betfor03IsRead := TRUE;
      IF NOT ReturnErrorCheck(2,'BETFOR03') THEN
        EXIT;
    END;

    LOCAL PROCEDURE ReadBETFOR04@1080005();
    BEGIN
      // Invoice transaction.
      EVALUATE(OwnRef,COPYSTR(LineData[2],36,35));
      SetCancellationCause(COPYSTR(LineData[3],74,1));

      IF NOT ReturnErrorCheck(1,'BETFOR04') THEN
        EXIT;
      ProcessBETFOR23and04;
    END;

    LOCAL PROCEDURE ReadBETFOR21@1080006();
    VAR
      ValDateStr@1080000 : Text[6];
    BEGIN
      // Transfer transaction
      IF NOT ReturnErrorCheck(2,'BETFOR21') THEN
        EXIT;
      IF ReturnCode = '02' THEN BEGIN
        ValDateStr := COPYSTR(LineData[4],49,6);
        ValueDate := DateFromText(ValDateStr);
        // import cancel. cause
        SetCancellationCause(COPYSTR(LineData[4],60,1));
      END;
    END;

    LOCAL PROCEDURE ReadBETFOR22@1080007();
    BEGIN
      // Batch transfer (for inst. payroll) is not implemented.
      ERROR(Text15000010,FileImp)
    END;

    PROCEDURE ReadBETFOR23@1080008();
    BEGIN
      // Invoice transaction.
      EVALUATE(OwnRef,COPYSTR(LineData[3],68,13) + COPYSTR(LineData[4],1,17));
      SetCancellationCause(COPYSTR(LineData[4],57,1));
      IF NOT ReturnErrorCheck(1,'BETFOR23') THEN
        EXIT;
      ProcessBETFOR23and04;
    END;

    LOCAL PROCEDURE ProcessBETFOR23and04@1080009();
    VAR
      GenJournalLine@1080000 : Record 81;
      Currency@1080001 : Record 4;
    BEGIN
      // Process invoice transaction - BETFOR04 and BETFOR23.
      // Own referance is read by the time this function is called.
      IF FALSE THEN;
      // Update waiting journal:
      WaitingJournal.GET(OwnRef);
      WaitingJournal."Return Code" := ReturnCode;
      WaitingJournal."Handling Ref." := EffRef;
      WaitingJournal."Execution Ref. 2" := ExecRef2;
      WaitingJournal."Price Info" := PriceInfo;

      RemAccount.GET(WaitingJournal."Remittance Account Code");
      RemAgreement.GET(RemAccount."Remittance Agreement Code");

      AccountCurrency := RemAccount."Currency Code";

      // If PostBanken is used, read the return code from invoice, since an invoice can be rejected:
      IF RemAgreement."Payment System" = RemAgreement."Payment System"::Postbanken THEN
        ReturnCode := COPYSTR(LineData[1],4,2);  // AH-Return Code.

      IF ReturnCode = '01' THEN BEGIN
        // Batch ok received (R1).
        NumberApproved := NumberApproved + 1;  // Count imported

        // 1. Postbanken: Receipt return is now received, after settlement/error return
        // Do NOT set the status to Approved since settlement/error return is received.
        // This is ok for PostBanken, but not the others!
        // 2. Check whether Waiting Journal already has status sent. If not, an error occured:
        // Set status to Approved (for Postbanken too).
        // 3. Error. Status had different value then expected.
        IF RemAgreement."Receipt Return Required" OR
           (WaitingJournal."Remittance Status" <= WaitingJournal."Remittance Status"::Sent)
        THEN BEGIN
          IF WaitingJournal."Remittance Status" = WaitingJournal."Remittance Status"::Sent THEN
            WaitingJournal.VALIDATE("Remittance Status",WaitingJournal."Remittance Status"::Approved)
          ELSE
            WaitingJournal.FIELDERROR("Remittance Status");
        END;
        WaitingJournal.VALIDATE("Payment Order ID - Approved",PaymOrder.ID);
        WaitingJournal.MODIFY;
      END ELSE
        IF ReturnCode = '02' THEN BEGIN
          // Chek whether balance entry is created by the time the next transaction is read:
          // ValueDate is already read in BETFOR21, and is valid for all the payments
          // until the next BETFOR21.
          // ValueDate: Settlement date for payments processed at the time.
          // WaitingJournal."Accountnr.": VendNo. for next Payment.
          // Batch ok. This batch contains processed payment orders (R2).

          IF Betfor03IsRead THEN
            CurrencyCheck;
          Betfor03IsRead := FALSE;

          // Check whether a balance entry should be created now:
          CreateBalanceEntry(ValueDate,AccountCurrency,WaitingJournal."Account No.",RemAccount,RemAgreement);

          NumberSettled := NumberSettled + 1;
          FindDocumentNo(ValueDate);

          // If the status is not sent or approved, it will not be changed to settled.
          IF (WaitingJournal."Remittance Status" <> WaitingJournal."Remittance Status"::Sent) AND
             (WaitingJournal."Remittance Status" <> WaitingJournal."Remittance Status"::Approved)
          THEN
            WaitingJournal.FIELDERROR(
              "Remittance Status",STRSUBSTNO(Text15000012,WaitingJournal."Remittance Status"));
          // If "Receipt return required"=Yes, the status has to be Approved first, to be changed to Settled.
          IF RemAgreement."Receipt Return Required" AND
             (WaitingJournal."Remittance Status" <> WaitingJournal."Remittance Status"::Approved)
          THEN BEGIN
            IF WaitingJournal."Remittance Status" = WaitingJournal."Remittance Status"::Sent THEN
              WaitingJournal.FIELDERROR(
                "Remittance Status",STRSUBSTNO(Text15000013,
                  WaitingJournal."Remittance Status"));

            WaitingJournal.FIELDERROR(
              "Remittance Status",STRSUBSTNO(Text15000012,WaitingJournal."Remittance Status"));
          END;
          // Prepare and insert the journal:
          GenJournalLine.INIT;
          //GenJournalLine.TRANSFERFIELDS(WaitingJournal);
          GenJournalLine.TRANSFERFIELDS(WaitingJournal,TRUE);
          GenJournalLineExt.TRANSFERFIELDS(WaitingJournal,TRUE); //4PSSE

          InitJournalLine(GenJournalLine,RemAccount);
          IF GenJournalLine."Posting Date" <> ValueDate THEN
            RemTools.InsertWarning(
              GenJournalLineExt,STRSUBSTNO(Text15000014,
                GenJournalLine."Posting Date",ValueDate));
          GenJournalLine.VALIDATE("Posting Date",ValueDate); // Read in BETFOR21.
          GenJournalLine.VALIDATE("Document No.",TransDocumentNo);
          // Calculate currency exchange rate if Account is in LCY, and payments in other currency
          IF (AccountCurrency = '') AND (PaymentCurrency <> '') THEN BEGIN
            Currency.GET(PaymentCurrency);
            Currency.TESTFIELD("Units to NOK");
            IF GenJournalLine."Currency Code" <> PaymentCurrency THEN
              ERROR(
                Text15000015,
                GenJournalLine."Currency Code",PaymentCurrency);
            IF RealExchangeRate = 0 THEN
              ERROR(Text15000016,FileImp);
            GenJournalLine.VALIDATE("Currency Factor",1 / RealExchangeRate * Currency."Units to NOK");
          END;
          GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"G/L Account");
          GenJournalLine.VALIDATE("Bal. Account No.",'');
          GenJournalLine.INSERT(TRUE);
          GenJournalLineExt.SaveUpdateLine(GenJournalLine);//4PSSE
          WaitingJournal.RecreateLineDimensions(GenJournalLine);

          // Update balance entry amount
          BalanceEntryAmountLCY := BalanceEntryAmountLCY + GenJournalLine."Amount (LCY)";
          TransCommission := TransCommission + Commission;
          // Commission for this transaction is reseted. I.e. it's not recalculated if there are more payments.
          Commission := 0;

          WaitingJournal.VALIDATE("Cancellation Cause",CancellationCause);

          // Update Waiting journal
          WaitingJournal.VALIDATE("Payment Order ID - Settled",PaymOrder.ID);
          WaitingJournal.VALIDATE("Journal, Settlement Template",GenJournalLine."Journal Template Name");
          WaitingJournal.VALIDATE("Journal - Settlement",GenJournalLine."Journal Batch Name");
          WaitingJournal.MODIFY(TRUE);

          // Update round off
        END ELSE // This error should not occur.
          ERROR(Text15000017,ReturnCode);
    END;

    PROCEDURE ReadBETFOR99@1080010();
    BEGIN
      // Closing transaction.
      IF NumberSettled > 0 THEN  // Check whether payments are created
        // Create balance entry for the last vendor transaction.
        // All the parameters are dummies. This is only to make sure that the balance entry is created:
        CreateBalanceEntry(010101D,AccountCurrency,'',RemAccount,RemAgreement);
      Betfor99IsRead := TRUE; // Check. En error occurs if this is not TRUE when the import is finished.
    END;

    LOCAL PROCEDURE CurrencyCheck@1080011();
    VAR
      BankAccount@1080001 : Record 270;
    BEGIN
      // Check if the setup is correct. Rem. account currency code should be the same as bank account curr. code
      IF RemAccount."Account Type" = RemAccount."Account Type"::"Bank account" THEN BEGIN
        BankAccount.GET(RemAccount."Account No.");
        IF BankAccount."Currency Code" <> RemAccount."Currency Code" THEN
          ERROR(
            Text15000018,
            BankAccount."No.",BankAccount."Currency Code",
            RemAccount.Code,RemAccount."Currency Code");
      END;
    END;

    LOCAL PROCEDURE CreatePaymOrder@1080012();
    VAR
      NextPaymOrderId@1080000 : Integer;
    BEGIN
      // Create import PaymOrder.
      // Select ID. Find the next one:
      PaymOrder.LOCKTABLE;
      IF PaymOrder.FINDLAST THEN
        NextPaymOrderId := PaymOrder.ID + 1
      ELSE
        NextPaymOrderId := 1;

      // Insert new PaymOrder. Remaining data are set later:
      PaymOrder.INIT;
      PaymOrder.VALIDATE(ID,NextPaymOrderId);
      PaymOrder.VALIDATE(Date,DateNow);
      PaymOrder.VALIDATE(Time,TimeNow);
      PaymOrder.VALIDATE(Type,PaymOrder.Type::Return);
      PaymOrder.VALIDATE(Comment,CurrentNote);
      PaymOrder.INSERT(TRUE);
    END;

    LOCAL PROCEDURE FindDocumentNo@1080013(PostDate@1080000 : Date);
    BEGIN
      IF CreateNewDocumentNo THEN BEGIN
        CLEAR(NoSeriesControl);
        TransDocumentNo := '';
        NoSeriesControl.InitSeries(
          RemAccount."Document No. Series",'',PostDate,TransDocumentNo,RemAccount."Document No. Series");
        CreateNewDocumentNo := FALSE;
      END;
      // Trans. document no. is now the current document no.
    END;

    LOCAL PROCEDURE CreateBalanceEntry@1080014(CurrentDate@1080000 : Date;CurrentCurrencyCode@1080001 : Code[3];CurrentVend@1080002 : Code[20];CurrentRemAccount@1080003 : Record 11128506;CurrentRemAgreement@1080004 : Record 11128503);
    VAR
      GenJournalLine@1080005 : Record 81;
      NewBalanceEntry@1080007 : Boolean;
      DivergenceLCY@1080008 : Decimal;
    BEGIN
      // Create balance entries for each vendor transaction.
      // General rules:
      // - variables Current... used for the payment processed at the moment
      // - variables Latest... used for payments that were just created.
      // - check if Current... and Latest... are different. If so, the new balance entry must be created.
      // - The balance entry is created with data from the payments that were just created (variables Latest...).

      // First chance to create balance entry. Don't create the entry yet, instead store date and vendor for later...
      IF First THEN BEGIN
        First := FALSE;
        LatestDate := CurrentDate;
        LatestVend := CurrentVend;
        LatestCurrencyCode := CurrentCurrencyCode;
        LatestRemAgreement := CurrentRemAgreement;
        LatestRemAccount := CurrentRemAccount;
      END;

      IF BalanceEntryAmountLCY = 0 THEN // The balance entry will not be created after all:
        EXIT;

      // Create balance entry? If the user setup is defined with balance entry per vendor
      // then a balance entry is created each time the vendor is changed. A balance entry is created each
      // time a date is changed, regardless of setup.
      IF LatestRemAgreement."New Document Per." = LatestRemAgreement."New Document Per."::"Specified for account" THEN BEGIN
        IF CurrentRemAccount."New Document Per." = CurrentRemAccount."New Document Per."::Vendor THEN
          NewBalanceEntry := (CurrentVend <> LatestVend);
      END ELSE
        IF LatestRemAgreement."New Document Per." = LatestRemAgreement."New Document Per."::Vendor THEN
          NewBalanceEntry := (CurrentVend <> LatestVend);
      IF CurrentDate <> LatestDate THEN // A change in date allways means creating new balance entry:
        NewBalanceEntry := TRUE;
      IF LatestCurrencyCode <> CurrentCurrencyCode THEN
        NewBalanceEntry := TRUE;
      IF LatestRemAccount.Code <> CurrentRemAccount.Code THEN
        NewBalanceEntry := TRUE;
      IF NOT NewBalanceEntry THEN // If not 'create new balance entry' - then exit
        EXIT;

      // Post commission:
      IF TransCommission <> 0 THEN BEGIN
        LatestRemAccount.TESTFIELD("Charge Account No.");
        GenJournalLine.INIT;
        InitJournalLine(GenJournalLine,LatestRemAccount);
        GenJournalLine.VALIDATE("Posting Date",LatestDate);
        GenJournalLine.VALIDATE("Account Type",GenJournalLine."Account Type"::"G/L Account");
        GenJournalLine.VALIDATE("Account No.",LatestRemAccount."Charge Account No.");
        GenJournalLine.VALIDATE("Currency Code",LatestCurrencyCode);
        GenJournalLine.VALIDATE(Amount,TransCommission);
        BalanceEntryAmountLCY := BalanceEntryAmountLCY + GenJournalLine."Amount (LCY)";

        GenJournalLine.VALIDATE("Document No.",TransDocumentNo);
        GenJournalLine.VALIDATE(Description,Text15000021);
        GenJournalLine.INSERT(TRUE);
      END;

      // Create balance entry:
      GenJournalLine.INIT;
      InitJournalLine(GenJournalLine,LatestRemAccount);
      GenJournalLine.VALIDATE("Posting Date",LatestDate);
      GenJournalLine.VALIDATE("Account Type",LatestRemAccount."Account Type");
      GenJournalLine.VALIDATE("Account No.",LatestRemAccount."Account No.");
      GenJournalLine.VALIDATE("Currency Code",LatestCurrencyCode);
      IF GenJournalLine."Currency Code" = '' THEN
        BalanceEntryAmount := BalanceEntryAmountLCY
      ELSE
        BalanceEntryAmount := ROUND(BalanceEntryAmountLCY * GenJournalLine."Currency Factor");
      GenJournalLine.VALIDATE(Amount,-BalanceEntryAmount);
      GenJournalLine.VALIDATE("Document No.",TransDocumentNo);
      CASE LatestRemAgreement."New Document Per." OF
        LatestRemAgreement."New Document Per."::Date:
          GenJournalLine.VALIDATE(
            Description,STRSUBSTNO(Text15000022,LatestDate));
        LatestRemAgreement."New Document Per."::Vendor:
          GenJournalLine.VALIDATE(
            Description,STRSUBSTNO(Text15000023,LatestVend));
      END;
      GenJournalLine.INSERT(TRUE);

      // Post round off/divergence:
      // Divergence is calculated as a differance betweens "Amount (NOK)" in the balance entry line and the sum of
      // "Amount (LCY)" in the current transaction lines
      DivergenceLCY := -(GenJournalLine."Amount (LCY)" + BalanceEntryAmountLCY);
      IF DivergenceLCY <> 0 THEN BEGIN
        LatestRemAccount.TESTFIELD("Round off/Divergence Acc. No.");
        GenJournalLine.INIT;
        InitJournalLine(GenJournalLine,LatestRemAccount);
        GenJournalLine.VALIDATE("Posting Date",LatestDate);
        GenJournalLine.VALIDATE("Account Type",GenJournalLine."Account Type"::"G/L Account");
        GenJournalLine.VALIDATE("Account No.",LatestRemAccount."Round off/Divergence Acc. No.");
        GenJournalLine.VALIDATE(Amount,DivergenceLCY);
        GenJournalLine.VALIDATE("Document No.",TransDocumentNo);
        GenJournalLine.VALIDATE(Description,Text15000024);
        IF ABS(DivergenceLCY) > LatestRemAccount."Max. Round off/Diverg. (LCY)" THEN
          RemTools.InsertWarning(
            GenJournalLineExt,
            STRSUBSTNO(Text15000025,
              LatestRemAccount."Max. Round off/Diverg. (LCY)"));
        GenJournalLine.INSERT(TRUE);
      END;

      // prepare for the next balance entry:
      CreateNewDocumentNo := TRUE;
      BalanceEntryAmount := 0;  // From the begining, with the balance entry amount
      BalanceEntryAmountLCY := 0;
      TransCommission := 0;
      LatestDate := CurrentDate; // Store current date, vend. etc.
      LatestVend := CurrentVend;
      LatestCurrencyCode := CurrentCurrencyCode;
      LatestRemAccount := CurrentRemAccount;
      LatestRemAgreement := CurrentRemAgreement;
    END;

    LOCAL PROCEDURE NewTransaction@1080015();
    BEGIN
      // Initialize transaction import.
      // Called before import starts, after a transaction from a file is closed (BETFOR99)
      // and before the next transaction from that file begins.
      First := TRUE; // Balance entry control:
      BalanceEntryAmount := 0;
      BalanceEntryAmountLCY := 0;
      TransCommission := 0;
      LatestDate := 0D;
      LatestVend := '';
      LatestCurrencyCode := '';
      CLEAR(LatestRemAccount);
      PaymentCurrency := '';
      AccountCurrency := '';
      RealExchangeRate := 0;
    END;

    PROCEDURE InitJournalLine@1080016(VAR GenJournalLine@1080000 : Record 81;RemAccount@1080001 : Record 11128506);
    VAR
      RegisterJournal@1080002 : Record 232;
      CheckGenJnlLine@1080003 : Record 81;
    BEGIN
      // Initialize JournalLine
      IF RemAccount."Return Journal Name" = '' THEN BEGIN
        // Def journal name is used (the journal user reads from)
        // Make sure the user imports in a journal.
        // Read from main meny if the journal is specified for the account:
        IF CurrentJournal."Journal Batch Name" = '' THEN
          RemAccount.FIELDERROR("Return Journal Name",Text15000026);
        GenJournalLine.VALIDATE("Journal Template Name",CurrentJournal."Journal Template Name");
        GenJournalLine.VALIDATE("Journal Batch Name",CurrentJournal."Journal Batch Name");
      END ELSE BEGIN
        // The journal specified for the account is used:
        RemAccount.TESTFIELD("Return Journal Name");
        GenJournalLine.VALIDATE("Journal Template Name",RemAccount."Return Journal Template Name");
        GenJournalLine.VALIDATE("Journal Batch Name",RemAccount."Return Journal Name");
        MoreReturnJournals := TRUE; // If TRUE, settlement status is last shown.
      END;

      // Find the next line no. for the journal in use
      CheckGenJnlLine := GenJournalLine;
      CheckGenJnlLine.SETRANGE("Journal Template Name",CheckGenJnlLine."Journal Template Name");
      CheckGenJnlLine.SETRANGE("Journal Batch Name",CheckGenJnlLine."Journal Batch Name");
      IF CheckGenJnlLine.FINDLAST THEN
        JournalNextLineNo := CheckGenJnlLine."Line No." + 10000
      ELSE
        JournalNextLineNo := 10000;

      GenJournalLine.VALIDATE("Line No.",JournalNextLineNo);
      RegisterJournal.GET(GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name");
      GenJournalLine."Posting No. Series" := RegisterJournal."Posting No. Series";
    END;

    PROCEDURE SetJournal@1080017(GenJournalLine@1000000000 : Record 81);
    BEGIN
      // Specifies journal for import (current).
      // Called from external function, which imports upon return.
      CurrentJournal := GenJournalLine;
    END;

    PROCEDURE Initialize@1080018(GenJournalLine@1000000000 : Record 81;fileName@1000000001 : Text[200];Note@1000000002 : Text[80]);
    BEGIN
      // Specifies variables used for import (current).
      // Called from external function, which imports upon return.
      CurrentJournal := GenJournalLine;
      CurrentFileName := fileName;
      CurrentNote := Note;
    END;

    PROCEDURE ReadStatus@1080019(VAR Approved@1080000 : Integer;VAR Rejected@1080001 : Integer;VAR Settled@1080002 : Integer;VAR ReturnMoreReturnJournals@1080003 : Boolean;VAR ReturnPaymOrder@1080004 : Record 11128504);
    BEGIN
      // Returns info on the current (terminated) import.
      // Counts parameters with new values.
      Approved := Approved + NumberApproved;
      Rejected := Rejected + NumberRejected;
      Settled := Settled + NumberSettled;
      ReturnMoreReturnJournals := MoreReturnJournals;
      ReturnPaymOrder := PaymOrder;
    END;

    PROCEDURE StatusError@1080020(CurrentWaitingJournal@1080000 : Record 11128507);
    BEGIN
      ERROR(
        Text15000027,
        FileImp,CurrentWaitingJournal."Remittance Status",CurrentWaitingJournal.Reference);
    END;

    PROCEDURE ReturnErrorCheck@1080021(BetForLevel@1080000 : Integer;BetForName@1080001 : Text[8]) : Boolean;
    VAR
      ReturnError@1080002 : Record 11128510;
      GenJournalLine@1080003 : Record 81;
      i@1080004 : Integer;
    BEGIN
      // Check return code.
      // Return value = False: Error. I.e. transaction is reseted. There is an error at this or higher level.
      // Return value = True: transaction will be completed.

      // Previous errors (if any) are reseted:
      IF BetForLevel >= ErrorLevel THEN
        ErrorLevel := 0;

      // Check for Error at this Level:
      ReturnCode := COPYSTR(LineData[1],4,2);
      ErrorMessage[BetForLevel] := RemTools.ReturnError(ReturnCode);
      IF (ErrorLevel = 0) AND (ErrorMessage[BetForLevel] <> '') THEN
        ErrorLevel := BetForLevel; // Error at this level (since there is no error at a higher level)

      IF (BetForLevel = 1) AND (ErrorLevel > 0) THEN BEGIN
        // Write error messages to database:
        NumberRejected := NumberRejected + 1;
        ReturnError.VALIDATE("Transaction Name",BetForName);
        ReturnError.VALIDATE(Date,TODAY);
        ReturnError.VALIDATE(Time,TIME);
        ReturnError.VALIDATE("Waiting Journal Reference",OwnRef);
        ReturnError.VALIDATE("Payment Order ID",PaymOrder.ID);
        FOR i := 1 TO 5 DO
          IF ErrorMessage[i] <> '' THEN BEGIN
            ReturnError.VALIDATE("Serial Number",0); // Finally specified in 'OnInsert'
            ReturnError.VALIDATE("Message Text",ErrorMessage[i]);
            ReturnError.INSERT(TRUE);
          END;

        WaitingJournal.GET(OwnRef);
        RemAccount.GET(WaitingJournal."Remittance Account Code");
        RemAgreement.GET(RemAccount."Remittance Agreement Code");

        IF WaitingJournal."Remittance Status" = WaitingJournal."Remittance Status"::Settled THEN
          WaitingJournal.FIELDERROR(
            "Remittance Status",STRSUBSTNO(Text15000028));

        // Release customer entry
        GenJournalLine.INIT; // A journal line with data is used to mark entry.
        GenJournalLine.TRANSFERFIELDS(WaitingJournal); // Copy Waiting journal to gen. journal.
        GenJournalLineExt.TRANSFERFIELDS(WaitingJournal); // Copy Waiting journal to gen. journal.
        RemTools.MarkEntry(GenJournalLine,RemAgreement."On Hold Rejection Code",0);

        WaitingJournal.VALIDATE("Remittance Status",WaitingJournal."Remittance Status"::Rejected);
        WaitingJournal.VALIDATE("Payment Order ID - Rejected",PaymOrder.ID);
        WaitingJournal.MODIFY(TRUE);
      END;

      EXIT(ErrorLevel = 0);
    END;

    PROCEDURE SetCancellationCause@1080022(CancelCode@1080000 : Text[1]);
    VAR
      TempCancCode@1080001 : Text[1];
    BEGIN
      EVALUATE(TempCancCode,CancelCode);
      CASE TempCancCode OF
        '':
          CancellationCause := 0;
        'B':
          CancellationCause := 1;
        'D':
          CancellationCause := 2;
        'F':
          CancellationCause := 3;
        'K':
          CancellationCause := 4;
        'O':
          CancellationCause := 5;
        'S':
          CancellationCause := 6;
      END;
    END;

    LOCAL PROCEDURE DateFromText@1080024(DateValue@1080000 : Text) : Date;
    VAR
      Day@1080005 : Integer;
      Month@1080004 : Integer;
      Year@1080003 : Integer;
      WorkDateYear@1080001 : Integer;
      WorkDateYearMin@1080002 : Integer;
      WorkDateCentury@1080006 : Integer;
      WorkDateCenturyMin@1080007 : Integer;
    BEGIN
      EVALUATE(Day,COPYSTR(DateValue,5,2));
      EVALUATE(Month,COPYSTR(DateValue,3,2));
      EVALUATE(Year,COPYSTR(DateValue,1,2));

      // Use WorkDate +-50 to determing correct century

      WorkDateYear := DATE2DMY(WORKDATE,3);
      WorkDateYearMin := WorkDateYear - 50;

      WorkDateCentury := ROUND(WorkDateYear / 100,1,'<') * 100;
      WorkDateCenturyMin := ROUND(WorkDateYearMin / 100,1,'<') * 100;

      IF WorkDateCenturyMin + Year < WorkDateYearMin THEN
        Year := WorkDateCentury + Year
      ELSE
        Year := WorkDateCenturyMin + Year;

      EXIT(DMY2DATE(Day,Month,Year));
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

