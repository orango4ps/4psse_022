OBJECT Table 11020528 Plant Scanned Material
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               ScannerSetup.GET;
               IF "Transaction No." = '' THEN BEGIN
                 ScannerSetup.TESTFIELD("Item Issue Transaction Nos.");
                 NoSeriesMgt.InitSeries(ScannerSetup."Item Issue Transaction Nos.",xRec."No. Series",TODAY,"Transaction No.","No. Series");
               END;
             END;

    CaptionML=[ENU=Plant Scanned Material;
               NOR=Materiale skannet i maskin;
               SVE=Material skannat i Maskin];
  }
  FIELDS
  {
    { 1   ;   ;Transaction No.     ;Code20        ;CaptionML=[ENU=Transaction No.;
                                                              NOR=Transaksjonsnr.;
                                                              SVE=Verifikationsl”pnr] }
    { 2   ;   ;Entry No.           ;Integer       ;CaptionML=[ENU=Entry No.;
                                                              NOR=L›penr.;
                                                              SVE=L”pnr] }
    { 3   ;   ;Employee            ;Code20        ;TableRelation=Employee;
                                                   CaptionML=[ENU=Employee;
                                                              NOR=Ansatt;
                                                              SVE=Personal] }
    { 4   ;   ;Department          ;Code20        ;CaptionML=[ENU=Department;
                                                              NOR=Avdeling;
                                                              SVE=Department] }
    { 5   ;   ;Plant Location      ;Code20        ;CaptionML=[ENU=Plant Location;
                                                              NOR=Maskinplassering;
                                                              SVE=Maskinutplacering] }
    { 6   ;   ;Cost Component Plant;Code20        ;TableRelation="Dimension Value".Code WHERE (Cost Type=FILTER(<Revenue),
                                                                                               Global Dimension No.=CONST(2));
                                                   CaptionML=[ENU=Cost Component Plant;
                                                              NOR=Kostdel, maskin;
                                                              SVE=Kostnadsdel, Maskin] }
    { 7   ;   ;Job No.             ;Code20        ;CaptionML=[ENU=Job;
                                                              NOR=Prosjekt;
                                                              SVE=Projekt] }
    { 8   ;   ;Cost Object         ;Code20        ;TableRelation="Dimension Value".Code WHERE (Cost Type=FILTER(<Revenue),
                                                                                               Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                IF "Cost Object" = '' THEN
                                                                  EXIT;

                                                                DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, TRUE, '');
                                                                DimValRec.TESTFIELD(Blocked, FALSE);
                                                              END;

                                                   CaptionML=[ENU=Global Dimension 2 Code;
                                                              NOR=Kostobjekt;
                                                              SVE=Kostnadsobjekt];
                                                   CaptionClass='1,1,2' }
    { 9   ;   ;Plant Type          ;Code20        ;CaptionML=[ENU=Plant Type;
                                                              NOR=Maskintype;
                                                              SVE=Maskintyp] }
    { 10  ;   ;Plant No.           ;Code10        ;CaptionML=[ENU=Plant No.;
                                                              NOR=Maskinnr.;
                                                              SVE=Maskinnr] }
    { 11  ;   ;Item No.            ;Code20        ;CaptionML=[ENU=Item No.;
                                                              NOR=Artikkelnr;
                                                              SVE=Artikelnr] }
    { 12  ;   ;Quantity            ;Decimal       ;CaptionML=[ENU=Quantity;
                                                              NOR=Antall;
                                                              SVE=Antal] }
    { 13  ;   ;Approved            ;Boolean       ;CaptionML=[ENU=Approved;
                                                              NOR=Godkjent;
                                                              SVE=Godk„nd] }
    { 14  ;   ;Posted              ;Boolean       ;CaptionML=[ENU=Posted;
                                                              NOR=Bokf›rt;
                                                              SVE=Bokf”rd] }
    { 100 ;   ;No. Series          ;Code10        ;CaptionML=[ENU=No. Series;
                                                              NOR=Nr-serie;
                                                              SVE=Nr-serie] }
    { 101 ;   ;Description         ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Item.Description WHERE (No.=FIELD(Item No.)));
                                                   CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 102 ;   ;Transaction Type    ;Option        ;CaptionML=[ENU=Transaction Type;
                                                              NOR=Transaksjonsart;
                                                              SVE=EU transaktionstyp];
                                                   OptionCaptionML=[ENU=Department,Plant,Job,Warehouse;
                                                                    NOR=Avdeling,Maskin,Jobb,Distribusjonslager;
                                                                    SVE=Avdelning,Maskin,Jobb,Lagerlokal];
                                                   OptionString=Department,Plant,Job,Warehouse }
    { 103 ;   ;Transaction Date    ;Date          ;CaptionML=[ENU=Transaction Date;
                                                              NOR=Transaksjonsdato;
                                                              SVE=Transaktionsdatum] }
    { 50042;  ;Delivery Account    ;Code20        ;TableRelation="G/L Account";
                                                   CaptionML=[ENU=Delivery Account;
                                                              NOR=Leveransekonto;
                                                              SVE=Leveranskonto] }
  }
  KEYS
  {
    {    ;Transaction No.,Entry No.               ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      DimMgt@1100485000 : Codeunit 408;
      NoSeriesMgt@1100485007 : Codeunit 396;
      ItemJnlPostBatch@1100485009 : Codeunit 23;
      DimValRec@1100485001 : Record 349;
      ScannerSetup@1100485002 : Record 11020527;
      GLSetup@1100485005 : Record 98;
      ItemJnlLine@1100485003 : Record 83;
      EmployeeRec@1000000000 : Record 5200;
      ItemRec@1000000001 : Record 27;
      Inventory@1100485024 : Decimal;
      Text000@1100485006 : TextConst 'ENU=cannot be filtered when posting recurring journals;NOR=kan ikke filtreres n†r du bokf›rer gjentakelseskladder;SVE=kan inte filtreras n„r †terkommande journaler bokf”rs';
      TempJnlBatchName@1100485008 : Code[10];

    PROCEDURE CheckStock@1100485000() : Boolean;
    VAR
      ItemCheckAvail@1100485000 : Codeunit 311;
      ItemJnlLine@1100485001 : Record 83;
    BEGIN
      ScannerSetup.GET;
      ItemJnlLine."Item No." := "Item No.";
      ItemJnlLine."Location Code" := ScannerSetup."Item Location Code";
      ItemJnlLine.Quantity := Quantity * -1;
      EXIT(ItemCheckAvail.CheckStockNoWarning(ItemJnlLine));
    END;

    PROCEDURE RegisterConsumption@1000000006(VAR ScannedMaterialRec@1000000000 : Record 11020528);
    VAR
      EmployeeRec@1100485001 : Record 5200;
      lvItemSalesBuyBackRateRec@1100525000 : Record 11020318;
      lvLineNo@1100485000 : Integer;
    BEGIN
      ScannerSetup.GET;
      GLSetup.GET;

      IF ScannedMaterialRec.FIND('-') THEN BEGIN

        ItemJnlLine.SETRANGE("Journal Template Name", ScannerSetup."Item Journal Template Name");
        ItemJnlLine.SETRANGE("Journal Batch Name",    ScannerSetup."Item Journal Batch Name");

        IF (ScannedMaterialRec."Transaction Type" = ScannedMaterialRec."Transaction Type"::Warehouse) THEN
          ItemJnlLine.SETRANGE("Journal Template Name", ScannerSetup."Transfer Journal Template Name");

        IF NOT ItemJnlLine.FIND('+') THEN
          ItemJnlLine."Line No." := 0;

        lvLineNo := ItemJnlLine."Line No." + 10000;


        REPEAT
          EmployeeRec.GET(ScannedMaterialRec.Employee);
          ItemRec.GET(ScannedMaterialRec."Item No.");
          ItemJnlLine.INIT;

          ItemJnlLine."Journal Template Name" := ScannerSetup."Item Journal Template Name";
          IF (ScannedMaterialRec."Transaction Type" = ScannedMaterialRec."Transaction Type"::Warehouse) THEN
            ItemJnlLine."Journal Template Name" := ScannerSetup."Transfer Journal Template Name";
          ItemJnlLine."Journal Batch Name" := ScannerSetup."Item Journal Batch Name";
          ItemJnlLine."Line No." := lvLineNo;
          ItemJnlLine."Source Code"  := ScannerSetup."Source Code Ledger";
          ItemJnlLine."Posting Date" := TODAY;
          ItemJnlLine."Document Date":= TODAY;

          CASE ScannedMaterialRec."Transaction Type" OF
            ScannedMaterialRec."Transaction Type"::Department,
            ScannedMaterialRec."Transaction Type"::Plant,
            ScannedMaterialRec."Transaction Type"::Job:
              ItemJnlLine."Entry Type"   := ItemJnlLine."Entry Type"::Sale;
            ScannedMaterialRec."Transaction Type"::Warehouse:
              ItemJnlLine."Entry Type"   := ItemJnlLine."Entry Type"::Transfer;
          END;


          ItemJnlLine.VALIDATE("Item No.",ScannedMaterialRec."Item No.");

          IF (ScannedMaterialRec."Transaction Type" = ScannedMaterialRec."Transaction Type"::Warehouse) THEN BEGIN
            IF ScannedMaterialRec.Quantity >= 0 THEN BEGIN
              ItemJnlLine.VALIDATE("Shortcut Dimension 1 Code", ItemRec."Global Dimension 1 Code");
              ItemJnlLine.VALIDATE("New Shortcut Dimension 1 Code", ItemRec."Global Dimension 1 Code");
              ItemJnlLine.VALIDATE("Location Code", ScannerSetup."Item Location Code");
              ItemJnlLine.VALIDATE("New Location Code", ScannedMaterialRec."Plant Location");
            END ELSE BEGIN
              ScannedMaterialRec.Quantity := ScannedMaterialRec.Quantity * -1;
              ItemJnlLine.VALIDATE("Shortcut Dimension 1 Code", ItemRec."Global Dimension 1 Code");
              ItemJnlLine.VALIDATE("New Shortcut Dimension 1 Code", ItemRec."Global Dimension 1 Code");
              ItemJnlLine.VALIDATE("Location Code", ScannedMaterialRec."Plant Location");
              ItemJnlLine.VALIDATE("New Location Code", ScannerSetup."Item Location Code");
            END;
          END ELSE BEGIN
            ItemJnlLine."Location Code" := ScannerSetup."Item Location Code";
          END;

          ItemJnlLine.VALIDATE(Quantity, ScannedMaterialRec.Quantity);

          ItemJnlLine."Document No." := ScannedMaterialRec.Employee;
          CASE ScannedMaterialRec."Transaction Type" OF
            ScannedMaterialRec."Transaction Type"::Department:
              BEGIN
                ItemJnlLine."Delivery Dimension 1 Code" := ScannedMaterialRec.Department;
                ItemJnlLine."Delivery Account No." := ScannerSetup."Delivery Account";
                IF ScannedMaterialRec."Delivery Account" <> '' THEN BEGIN
                  ItemJnlLine."Delivery Account No." := ScannedMaterialRec."Delivery Account";
                END;
              END;
            ScannedMaterialRec."Transaction Type"::Plant:
              BEGIN
                ItemJnlLine.VALIDATE("Plant Type", ScannedMaterialRec."Plant Type");
                ItemJnlLine.VALIDATE("Plant No.", ScannedMaterialRec."Plant No.");
                ItemJnlLine.VALIDATE("Cost Component Plant", ScannedMaterialRec."Cost Component Plant");
              END;
            ScannedMaterialRec."Transaction Type"::Job:
              BEGIN
                ItemJnlLine.VALIDATE("Job No.", ScannedMaterialRec."Job No.");
              END;
            ScannedMaterialRec."Transaction Type"::Warehouse:
              BEGIN
                 ItemJnlLine.VALIDATE("Shortcut Dimension 2 Code", ItemRec."Global Dimension 2 Code");
                 ItemJnlLine.VALIDATE("New Shortcut Dimension 2 Code", ItemRec."Global Dimension 2 Code");
              END;
          END;
          IF ItemRec."Sales/Buy-Back Item (Plant)" THEN BEGIN  //* 14019
            lvItemSalesBuyBackRateRec.SETRANGE("Item No.", ScannedMaterialRec."Item No.");
            lvItemSalesBuyBackRateRec.SETRANGE("Starting Date", 0D, ItemJnlLine."Posting Date");
            IF NOT lvItemSalesBuyBackRateRec.FINDLAST THEN BEGIN
              lvItemSalesBuyBackRateRec.SETRANGE("Starting Date");
              IF NOT lvItemSalesBuyBackRateRec.FINDLAST THEN
                lvItemSalesBuyBackRateRec.INIT;
            END;
            ItemJnlLine.VALIDATE("Unit Amount", lvItemSalesBuyBackRateRec."Sales Rate" * ItemJnlLine."Qty. per Unit of Measure");
          END;

          ItemJnlLine.INSERT(TRUE);
          CheckStatusAndPost;

          lvLineNo := lvLineNo + 10000;
          ScannedMaterialRec.Posted := TRUE;
          ScannedMaterialRec.MODIFY;
        UNTIL ScannedMaterialRec.NEXT = 0;
      END;
    END;

    PROCEDURE CheckStatusAndPost@1210190000();
    VAR
      ItemRec@1210190000 : Record 27;
      BatchRun@1210190001 : Record 83;
      ItemJnlTemplate@1100485001 : Record 233;
      NoSeriesMgt@1100485000 : Codeunit 396;
      BatchRunDocument@1100485002 : Code[20];
    BEGIN
      BatchRun.COPY(ItemJnlLine);

      BatchRun.SETRANGE("Journal Template Name", BatchRun."Journal Template Name");
      BatchRun.SETRANGE("Journal Batch Name", BatchRun."Journal Batch Name");
      BatchRun.SETRANGE("Line No.", BatchRun."Line No.");
      IF BatchRun.FIND('-') THEN BEGIN
        REPEAT
          ItemRec.GET(BatchRun."Item No.");
          IF ItemRec."Replenishment System" = ItemRec."Replenishment System"::"Prod. Order" THEN BEGIN
            IF BatchRun."Inventory Status" = BatchRun."Inventory Status"::free THEN BEGIN
              DetermineInventory;
              IF Inventory >= BatchRun.Quantity THEN
                BatchRun."Inventory Status" := BatchRun."Inventory Status"::"on stock";
            END;
            IF BatchRun."Inventory Status" = BatchRun."Inventory Status"::produced THEN
              BatchRun."Inventory Status" := BatchRun."Inventory Status"::"on stock";
          END ELSE BEGIN
            IF BatchRun."Inventory Status" < BatchRun."Inventory Status"::"on stock" THEN
              BatchRun."Inventory Status" := BatchRun."Inventory Status"::"on stock";
          END;
          IF BatchRun."Quantity (Released)" <> 0 THEN BEGIN
            IF BatchRun.Quantity = BatchRun."Quantity (Released)" THEN
              BatchRun."Inventory Status" := BatchRun."Inventory Status"::processed;
            IF BatchRun."Inventory Status" = BatchRun."Inventory Status"::"on stock" THEN BEGIN
              BatchRun.Quantity := BatchRun.Quantity - BatchRun."Quantity (Released)";
              BatchRun."Quantity (Released)" := 0;
              BatchRun.VALIDATE(Quantity);
            END;
          END;

          //when meanwhile new mutations with more recent document no., are added to item journal
          //then (standard) posting run complains that document no. doesn't match with last one in journal no. series.

          IF ItemJnlTemplate.GET(BatchRun."Journal Template Name", BatchRun."Journal Batch Name") THEN BEGIN
            IF ItemJnlTemplate."No. Series" <> '' THEN BEGIN
              IF BatchRunDocument = '' THEN BEGIN
                CLEAR(NoSeriesMgt);
                BatchRunDocument := NoSeriesMgt.GetNextNo(ItemJnlTemplate."No. Series", BatchRun."Posting Date", FALSE);
              END;
              BatchRun."Document No." := BatchRunDocument;
            END;
          END;
          BatchRun.MODIFY;
          IF BatchRun."Inventory Status" = BatchRun."Inventory Status"::processed THEN
            BatchRun.DELETE(TRUE);
        UNTIL BatchRun.NEXT = 0;
      END;

      BatchRun.SETRANGE("Inventory Status", BatchRun."Inventory Status"::"on stock");
      BatchRun.SETRANGE(Blocked, FALSE);
      COMMIT;


      PostItemJnlLine(BatchRun)
    END;

    PROCEDURE DetermineInventory@1();
    VAR
      lvItemRec@11012010 : Record 27;
    BEGIN
      //**4PS
      IF NOT lvItemRec.GET("Item No.") THEN BEGIN
        Inventory := 0;
        EXIT;
      END;

      lvItemRec.SETRANGE("Location Filter", ItemJnlLine."Location Code");
      lvItemRec.CALCFIELDS(Inventory);
      Inventory := lvItemRec.Inventory;
    END;

    LOCAL PROCEDURE PostItemJnlLine@1100485001(lvItemJnlLine@1100485000 : Record 83);
    VAR
      ItemJnlTemplate@1100485001 : Record 82;
    BEGIN
      WITH lvItemJnlLine DO BEGIN
        ItemJnlTemplate.GET("Journal Template Name");
        ItemJnlTemplate.TESTFIELD("Force Posting Report",FALSE);
        IF ItemJnlTemplate.Recurring AND (GETFILTER("Posting Date") <> '') THEN
          FIELDERROR("Posting Date",Text000);

        TempJnlBatchName := "Journal Batch Name";

        ItemJnlPostBatch.RUN(lvItemJnlLine);

      END;
    END;

    BEGIN
    END.
  }
}

