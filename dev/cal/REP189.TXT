OBJECT Report 189 Suggest Reminder Lines
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00,4PS14.00,4PSSE;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Suggest Reminder Lines;
               NOR=Foresl† purrelinjer;
               SVE=F”resl† bet.p†minnelserader];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  CustLedgEntry.COPY(CustLedgEntry2)
                END;

  }
  DATASET
  {
    { 4775;    ;DataItem;                    ;
               DataItemTable=Table295;
               DataItemTableView=SORTING(No.);
               ReqFilterHeadingML=[ENU=Reminder;
                                   NOR=Purring;
                                   SVE=Betalningsp†minnelse];
               OnPreDataItem=BEGIN
                               NoOfRecords := COUNT;
                               IF NoOfRecords = 1 THEN
                                 Window.OPEN(Text000)
                               ELSE BEGIN
                                 Window.OPEN(Text001);
                                 OldDateTime := CURRENTDATETIME;
                               END;
                             END;

               OnAfterGetRecord=BEGIN
                                  RecordNo := RecordNo + 1;
                                  CLEAR(MakeReminder);
                                  //MakeReminder.SuggestLines("Reminder Header",CustLedgEntry,OverdueEntriesOnly,IncludeEntriesOnHold,CustLedgEntryLineFeeOn); //**4PS.o
                                  MakeReminder.SuggestLines("Reminder Header",CustLedgEntry,IncludeEntriesOnHold,CustLedgEntryLineFeeOn,EntriesOption,ReminderPerAltAddress); //**4PS.n
                                  IF NoOfRecords = 1 THEN BEGIN
                                    MakeReminder.Code;
                                    MARK := FALSE;
                                  END ELSE BEGIN
                                    NewDateTime := CURRENTDATETIME;
                                    IF (NewDateTime - OldDateTime > 100) OR (NewDateTime < OldDateTime) THEN BEGIN
                                      NewProgress := ROUND(RecordNo / NoOfRecords * 100,1);
                                      IF NewProgress <> OldProgress THEN BEGIN
                                        Window.UPDATE(1,NewProgress * 100);
                                        OldProgress := NewProgress;
                                      END;
                                      OldDateTime := CURRENTDATETIME;
                                    END;
                                    MARK := NOT MakeReminder.RUN;
                                  END;
                                END;

               OnPostDataItem=VAR
                                ConfirmManagement@1000 : Codeunit 27;
                              BEGIN
                                COMMIT;
                                Window.CLOSE;
                                MARKEDONLY := TRUE;
                                IF FINDFIRST THEN
                                  IF ConfirmManagement.ConfirmProcessUI(Text002,TRUE) THEN
                                    PAGE.RUNMODAL(0,"Reminder Header");
                              END;

               ReqFilterFields=No. }

    { 9065;    ;DataItem;CustLedgEntry2      ;
               DataItemTable=Table21;
               DataItemTableView=SORTING(Customer No.)
                                 WHERE(Blocked for Reminder=FILTER(''));
               OnPreDataItem=BEGIN
                               CurrReport.BREAK;
                             END;

               ReqFilterFields=Document Type }

    { 1000;    ;DataItem;CustLedgEntryLineFeeOn;
               DataItemTable=Table21;
               DataItemTableView=SORTING(Entry No.)
                                 ORDER(Ascending);
               ReqFilterHeadingML=[ENU=Apply Fee per Line On;
                                   NOR=Bruk gebyr per linje p†;
                                   SVE=Koppla avgift per rad i];
               OnPreDataItem=BEGIN
                               CurrReport.BREAK;
                             END;

               ReqFilterFields=Document Type }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 1   ;2   ;Field     ;
                  CaptionML=[ENU=Only Entries with Overdue Amounts;
                             NOR=Bare poster med forfalte bel›p;
                             SVE=Endast transaktioner med f”rfallna belopp];
                  ToolTipML=[ENU=Specifies if the batch job will only insert open entries that are overdue, meaning they have a due date earlier than the document date on the reminder header.;
                             NOR=Angir om kj›rselen bare skal sette inn †pne poster som er forfalt, noe som betyr at de har en forfallsdato som er tidligere enn dokumentdatoen i purrehodet.;
                             SVE=Anger om batchjobbet bara infogar ”ppna transaktioner som har f”rfallit, vilket inneb„r att de har ett f”rfallodatum som infaller f”re dokumentdatumet i betalningsp†minnelsehuvudet.];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=OverdueEntriesOnly;
                  MultiLine=Yes }

      { 1102601000;2;Field  ;
                  CaptionML=[ENU=Include Entries On Hold;
                             NOR=Ta med avventende poster;
                             SVE=Inkludera stoppade transaktioner];
                  ToolTipML=[ENU=Specifies if the batch job will also insert overdue open entries that are on hold.;
                             NOR=Angir om kj›rselen ogs† skal sette inn forfalte †pne poster som er p† vent.;
                             SVE=Anger om batchjobbet ocks† infoga f”rfallna ”ppna transaktioner som har stoppats.];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=IncludeEntriesOnHold }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Suggesting lines...;NOR=Foresl†r linjer...;SVE=F”resl†r rader...';
      Text001@1001 : TextConst 'ENU=Suggesting lines @1@@@@@@@@@@@@@;NOR=Foresl†r linjer  @1@@@@@@@@@@@@@;SVE=F”resl†r rader   @1@@@@@@@@@@@@@';
      Text002@1002 : TextConst 'ENU=It was not possible to process some of the selected reminders.\Do you want to see these reminders?;NOR=Det var ikke mulig † behandle en del av de valgte purringene.\Vil du vise disse purringene?;SVE=Det gick inte att behandla n†gra av de valda betalningsp†minnelserna.\Vill du visa dem?';
      CustLedgEntry@1004 : Record 21;
      MakeReminder@1005 : Codeunit 392;
      Window@1006 : Dialog;
      NoOfRecords@1007 : Integer;
      RecordNo@1008 : Integer;
      NewProgress@1009 : Integer;
      OldProgress@1010 : Integer;
      NewDateTime@1011 : DateTime;
      OldDateTime@1012 : DateTime;
      OverdueEntriesOnly@1013 : Boolean;
      IncludeEntriesOnHold@1102601000 : Boolean;
      EntriesOption@1100525001 : 'New,Overdue,All';
      ReminderPerAltAddress@1100525000 : Boolean;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

