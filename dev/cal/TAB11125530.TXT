OBJECT Table 11125530 Plant Request Line (SMF)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               GetHeader();
               ReqRec.TESTFIELD("Plant Company");
               "Location Copied Need" := '';
               "Line No. Copied Need" := 0;
             END;

    CaptionML=[ENU=Plant Request Line (Site Manager Form);
               NOR=Rad for maskinforesp›rsel (prosjektlederskjema);
               SVE=Rad f”r Maskinsbeg„ran (byggledarformul„r)];
  }
  FIELDS
  {
    { 10  ;   ;Request No.         ;Code20        ;TableRelation="Plant Request (SMF)";
                                                   CaptionML=[ENU=Request No.;
                                                              NOR=Foresp›rselnr.;
                                                              SVE=Nr f”r f”rfr†gan] }
    { 20  ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              NOR=Linjenr.;
                                                              SVE=Radnr] }
    { 30  ;   ;Type                ;Option        ;OnValidate=VAR
                                                                lvReqLineRec@1100485000 : Record 11125530;
                                                              BEGIN
                                                                IF Type = Type::Item THEN BEGIN
                                                                  GetHeader();
                                                                  IF (ReqRec.Type = ReqRec.Type::OtherTransfers) THEN
                                                                    FIELDERROR(Type);
                                                                END;

                                                                IF Type <> xRec.Type THEN BEGIN
                                                                  TESTFIELD("Plant/Item", '');
                                                                  lvReqLineRec := Rec;
                                                                  INIT;
                                                                  Type := lvReqLineRec.Type;
                                                                  Element := lvReqLineRec.Element;
                                                                  FillProjectStock;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              NOR=Radtype;
                                                              SVE=Typ];
                                                   OptionCaptionML=[ENU=Plant,Set,Item,Text;
                                                                    NOR=Maskin,Sett,Artikkel,Tekst;
                                                                    SVE=Maskin,Lista,Artikel,Text];
                                                   OptionString=Plant,Set,Item,Text }
    { 40  ;   ;Plant/Item          ;Code20        ;OnValidate=BEGIN
                                                                GetHeader();
                                                                IF "Plant/Item" <> '' THEN
                                                                  ReqRec.TESTFIELD("Plant Company");
                                                                CASE Type OF
                                                                  Type::Plant:
                                                                    BEGIN
                                                                      IF "Plant/Item" = '' THEN BEGIN
                                                                        "Plant No." := '';
                                                                        Bulk := FALSE;
                                                                        Description := '';
                                                                      END ELSE BEGIN
                                                                        PlantTypeRec.CHANGECOMPANY(ReqRec."Plant Company");
                                                                        PlantTypeRec.GET("Plant/Item");
                                                                        IF ReqRec.Type = ReqRec.Type::Arrival THEN
                                                                          PlantTypeRec.TESTFIELD("Order via Plant Request", TRUE);
                                                                        Bulk := PlantTypeRec.Bulk;
                                                                        IF "Plant/Item" <> xRec."Plant/Item" THEN
                                                                          "Plant No." := '';
                                                                        IF "Plant/Item" <> xRec."Plant/Item" THEN
                                                                          "Description 2" := '';
                                                                        IF ("Plant/Item" <> xRec."Plant/Item") OR (Description = '') THEN
                                                                          FillPlantDescription();
                                                                      END;
                                                                    END;
                                                                  Type::Set:
                                                                    BEGIN
                                                                      IF "Plant/Item" = '' THEN BEGIN
                                                                        Bulk := FALSE;
                                                                        Description := '';
                                                                      END ELSE BEGIN
                                                                        PlantSetRec.CHANGECOMPANY(ReqRec."Plant Company");
                                                                        PlantSetRec.GET("Plant/Item");
                                                                        IF ReqRec.Type = ReqRec.Type::Arrival THEN
                                                                          PlantSetRec.TESTFIELD("Order via Plant Request", TRUE);
                                                                        Bulk := TRUE;
                                                                        PlantSetLineRec.CHANGECOMPANY(ReqRec."Plant Company");
                                                                        PlantSetLineRec.SETRANGE("Set Code", "Plant/Item");
                                                                        PlantSetLineRec.SETRANGE(Type, PlantSetLineRec.Type::Plant);
                                                                        PlantSetLineRec.SETFILTER("Plant Type", '<>%1', '');
                                                                        PlantSetLineRec.SETFILTER("Plant No.", '<>%1', '');
                                                                        IF PlantSetLineRec.FINDSET(FALSE,FALSE) THEN BEGIN
                                                                          PlantTypeRec.CHANGECOMPANY(ReqRec."Plant Company");
                                                                          REPEAT
                                                                            IF PlantTypeRec.GET(PlantSetLineRec."Plant Type") THEN BEGIN
                                                                              IF NOT PlantTypeRec.Bulk THEN
                                                                                Bulk := FALSE;  //* If unique plant with 'Plant No." filled in set then unique set (quantity must be 1)
                                                                            END;
                                                                          UNTIL (PlantSetLineRec.NEXT = 0) OR (NOT Bulk);
                                                                        END;
                                                                        IF ("Plant/Item" <> xRec."Plant/Item") OR (Description = '') THEN
                                                                          Description := PlantSetRec.Description;
                                                                      END;

                                                                    END;
                                                                  Type::Item:
                                                                    BEGIN
                                                                      IF "Plant/Item" = '' THEN
                                                                        Description := ''
                                                                      ELSE BEGIN
                                                                        ItemRec.CHANGECOMPANY(ReqRec."Plant Company");
                                                                        ItemRec.GET("Plant/Item");
                                                                        IF ReqRec.Type = ReqRec.Type::Arrival THEN
                                                                          ItemRec.TESTFIELD("Order via Plant Request", TRUE);
                                                                        IF ("Plant/Item" <> xRec."Plant/Item") OR (Description = '') THEN BEGIN
                                                                          Description := ItemRec.Description;
                                                                          "Description 2" := ItemRec."Description 2";
                                                                        END;
                                                                      END;
                                                                    END;
                                                                  ELSE
                                                                    BEGIN
                                                                      IF "Plant/Item" <> '' THEN
                                                                        "Plant/Item" := '';
                                                                    END;
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              PlantItemOnLookup;
                                                            END;

                                                   CaptionML=[ENU=Plant / Item;
                                                              NOR=Maskin,Artikkel;
                                                              SVE=Maskin,Artikel] }
    { 45  ;   ;Plant No.           ;Code10        ;OnValidate=BEGIN
                                                                IF "Plant No." = '' THEN
                                                                  EXIT;

                                                                TESTFIELD(Type, Type::Plant);
                                                                TESTFIELD("Plant/Item");

                                                                GetHeader();
                                                                PlantNoRec.CHANGECOMPANY(ReqRec."Plant Company");
                                                                PlantNoRec.GET("Plant/Item", "Plant No.");

                                                                IF NOT Bulk THEN BEGIN
                                                                  IF Quantity <> 1 THEN
                                                                    Quantity := 1;
                                                                END ELSE BEGIN
                                                                  //* If bulk then the PlantNo is only allowed for external plant with PlantNo in the inventory
                                                                  IF (NOT PlantNoRec.External) OR ("Plant No." <> PlantNoRec."Stock No.") THEN
                                                                    "Plant No." := '';
                                                                END;

                                                                IF ("Plant No." <> xRec."Plant No.") OR (Description = '') THEN
                                                                  FillPlantDescription();
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupPlantNo();
                                                            END;

                                                   CaptionML=[ENU=Plant No.;
                                                              NOR=Maskinnr.;
                                                              SVE=Maskinnr] }
    { 60  ;   ;Description         ;Text100       ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 61  ;   ;Description 2       ;Text50        ;OnValidate=BEGIN
                                                                IF "Description 2" <> '' THEN BEGIN
                                                                  IF NOT (Type IN [Type::Plant, Type::Item]) THEN
                                                                    FIELDERROR(Type);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Description 2;
                                                              NOR=Beskrivelse 2;
                                                              SVE=Beskrivning 2] }
    { 70  ;   ;Bulk                ;Boolean       ;FieldClass=Normal;
                                                   CaptionML=[ENU=Bulk;
                                                              NOR=Bulk;
                                                              SVE=Bulk];
                                                   Editable=No }
    { 90  ;   ;Expected return on  ;Date          ;OnValidate=BEGIN
                                                                IF "Expected return on" <> 0D THEN BEGIN
                                                                  IF NOT (Type IN [Type::Plant, Type::Set]) THEN
                                                                    FIELDERROR(Type);
                                                                  GetHeader();
                                                                  IF ("Expected return on" < ReqRec."Transfer Date") THEN
                                                                    "Expected return on" := ReqRec."Transfer Date";
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Expected return on;
                                                              NOR=Forventet retur den;
                                                              SVE=F”rv„ntad retur den] }
    { 100 ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                IF Quantity = 0 THEN
                                                                  EXIT;

                                                                CASE Type OF
                                                                  Type::Text:
                                                                    FIELDERROR(Type);
                                                                  Type::Plant:
                                                                    IF ("Plant/Item" <> '') AND ("Plant No." <> '') AND (NOT Bulk) THEN
                                                                      TESTFIELD(Quantity, 1);
                                                                  Type::Set:
                                                                    IF ("Plant/Item" <> '') AND (NOT Bulk) THEN
                                                                      TESTFIELD(Quantity, 1);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Quantity;
                                                              NOR=Antall;
                                                              SVE=Antal];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   BlankZero=Yes }
    { 110 ;   ;To Employee Company ;Text30        ;TableRelation=Company;
                                                   OnValidate=BEGIN
                                                                IF Type = Type::Text THEN BEGIN
                                                                  "To Employee Company" := '';
                                                                  EXIT;
                                                                END;
                                                                IF "To Employee Company" = COMPANYNAME THEN
                                                                  "To Employee Company" := '';
                                                                IF "To Employee Company" <> xRec."To Employee Company" THEN
                                                                  "To Employee No." := '';
                                                              END;

                                                   CaptionML=[ENU=To Employee Company;
                                                              NOR=Til Ansattes selskap;
                                                              SVE=Till anst„llds f”retag] }
    { 111 ;   ;To Employee No.     ;Code20        ;TableRelation=IF (To Employee Company=FILTER('')) Employee;
                                                   OnValidate=VAR
                                                                Employee@1100485000 : Record 5200;
                                                              BEGIN
                                                                IF Type = Type::Text THEN BEGIN
                                                                  "To Employee No." := '';
                                                                  EXIT;
                                                                END;
                                                                IF "To Employee No." = '' THEN
                                                                  EXIT;
                                                                IF "To Employee Company" <> '' THEN
                                                                  Employee.CHANGECOMPANY("To Employee Company");
                                                                Employee.GET("To Employee No.");
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupToEmployee;
                                                            END;

                                                   CaptionML=[ENU=To Employee No.;
                                                              NOR=Til Ansattnr.;
                                                              SVE=Till anst„llningsnr] }
    { 200 ;   ;Element             ;Code20        ;OnValidate=VAR
                                                                lvElementFormatCU@1100525000 : Codeunit 11012022;
                                                              BEGIN
                                                                IF Element = '' THEN
                                                                  EXIT;
                                                                IF (Type = Type::Text) THEN
                                                                  FIELDERROR(Type);
                                                                GetHeader();
                                                                IF NOT (ReqRec.Type IN [ReqRec.Type::Arrival, ReqRec.Type::OtherTransfers]) THEN
                                                                  ReqRec.FIELDERROR(Type);
                                                                ReqRec.TESTFIELD("Source Type", ReqRec."Source Type"::Project);
                                                                ReqRec.TESTFIELD("To Location");
                                                                ReqRec.TESTFIELD("Source No.");
                                                                lvElementFormatCU.FormatElem(Element, 2, '');
                                                                ProjElemRec.GET(ReqRec."Source No.", Element);
                                                              END;

                                                   OnLookup=VAR
                                                              lvEditable@1100525001 : Boolean;
                                                            BEGIN
                                                              GetHeader();
                                                              ReqRec.TESTFIELD("Source Type", ReqRec."Source Type"::Project);
                                                              IF (ReqRec.Type IN [ReqRec.Type::Arrival, ReqRec.Type::OtherTransfers]) AND
                                                                 (ReqRec.Status = ReqRec.Status::Open) AND (Type <> Type::Text) AND (ReqRec."Source No." <> '')
                                                              THEN
                                                                lvEditable := TRUE;
                                                              ProjElemRec.RESET;
                                                              ProjElemRec.FILTERGROUP(9);
                                                              ProjElemRec.SETRANGE("Project No.", ReqRec."Source No.");
                                                              ProjElemRec.FILTERGROUP(0);
                                                              ProjElemRec."Project No." := ReqRec."Source No.";
                                                              ProjElemRec.Element := Element;
                                                              IF NOT lvEditable THEN
                                                                PAGE.RUNMODAL(0, ProjElemRec)
                                                              ELSE BEGIN
                                                                IF PAGE.RUNMODAL(0, ProjElemRec) = ACTION::LookupOK THEN BEGIN
                                                                  IF (ProjElemRec.Element <> '') AND (ProjElemRec.Element <> Element) THEN
                                                                    VALIDATE(Element, ProjElemRec.Element);
                                                                END;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Element;
                                                              NOR=Element;
                                                              SVE=Element] }
    { 210 ;   ;Location Copied Need;Code20        ;TableRelation="Plant Location".Code;
                                                   CaptionML=[ENU=Location Copied Need;
                                                              NOR=Plassering kopiert, Behov;
                                                              SVE=Lagerst„lle kopierad, behov];
                                                   Editable=No }
    { 215 ;   ;Line No. Copied Need;Integer       ;CaptionML=[ENU=Line No. Copied Need;
                                                              NOR=Radnr kopiert, Behov;
                                                              SVE=Radnr kopierad, behov];
                                                   Editable=No }
    { 270 ;   ;Project No.         ;Code20        ;TableRelation=Job;
                                                   CaptionML=[ENU=Project No.;
                                                              NOR=Prosjektnr;
                                                              SVE=Projektnr];
                                                   Editable=No }
    { 280 ;   ;Project Stock       ;Boolean       ;OnValidate=BEGIN
                                                                IF "Project Stock" THEN BEGIN
                                                                  IF "Project No." = '' THEN
                                                                    "Project Stock" := FALSE
                                                                  ELSE BEGIN
                                                                    InventorySetup.GET;
                                                                    IF NOT InventorySetup.JobInventoryByStockRelease("Project No.") THEN
                                                                      "Project Stock" := FALSE;
                                                                  END;
                                                                END;
                                                                IF NOT "Project Stock" THEN BEGIN
                                                                  Deliver := Deliver::" ";
                                                                  "Ship To Location" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Project Stock;
                                                              NOR=Prosjektlager;
                                                              SVE=Projektlager] }
    { 290 ;   ;Deliver             ;Option        ;OnValidate=BEGIN
                                                                IF Deliver <> xRec.Deliver THEN
                                                                  "Ship To Location" := '';
                                                              END;

                                                   CaptionML=[ENU=Deliver;
                                                              NOR=Lever;
                                                              SVE=Leverera];
                                                   OptionCaptionML=[ENU=" ,Project Location,Location";
                                                                    NOR=" ,Prosjektplassering,Plassering";
                                                                    SVE=" ,Projektlagerst„lle,Lagerst„lle"];
                                                   OptionString=[ ,Project Location,Location] }
    { 300 ;   ;Ship To Location    ;Code10        ;TableRelation=IF (Deliver=CONST(Project Location)) "Project Location".Code WHERE (Project No.=FIELD(Project No.))
                                                                 ELSE IF (Deliver=CONST(Location)) Location.Code;
                                                   OnValidate=BEGIN
                                                                IF ("Ship To Location" <> '') AND (Deliver = Deliver::" ") THEN
                                                                  FIELDERROR(Deliver);
                                                              END;

                                                   CaptionML=[ENU=Ship To Location;
                                                              NOR=Lever til lokasjon;
                                                              SVE=Leverera till lagerst„lle] }
  }
  KEYS
  {
    {    ;Request No.,Line No.                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      PlantTypeRec@1100525000 : Record 11012551;
      PlantNoRec@1100485001 : Record 11012552;
      PlantSetRec@1100525002 : Record 11012587;
      PlantSetLineRec@1100525003 : Record 11012588;
      ItemRec@1100485002 : Record 27;
      ReqRec@1100485003 : Record 11125529;
      ProjElemRec@1100525001 : Record 11012010;
      Text001@1100529000 : TextConst 'ENU=Explode Set Line(s)?;NOR=Utfold satt(e) rad(er)?;SVE=Expandera inst„lld(a) rad(er)?';
      InventorySetup@1100529600 : Record 313;
      MultiCopy@1100527000 : Boolean;
      PlantListLastPlantType@1100529700 : Code[20];

    PROCEDURE InitRecord@1100525013();
    BEGIN
      FillDefaultElement;
      FillProjectStock;
    END;

    PROCEDURE GetHeader@1100525001();
    BEGIN
      IF "Request No." <> '' THEN
        ReqRec.GET("Request No.");
    END;

    PROCEDURE FillPlantDescription@4();
    BEGIN
      IF (Type <> Type::Plant) OR ("Plant/Item" = '') THEN
        EXIT;

      GetHeader();
      PlantTypeRec.CHANGECOMPANY(ReqRec."Plant Company");
      PlantNoRec.CHANGECOMPANY(ReqRec."Plant Company");
      IF ("Plant No." <> '') THEN BEGIN
        IF PlantNoRec.GET("Plant/Item", "Plant No.") THEN BEGIN
          IF (PlantNoRec.Description <> '') THEN BEGIN
            Description := PlantNoRec.Description;
            EXIT;
          END;
        END;
      END;
      IF PlantTypeRec.GET("Plant/Item") THEN BEGIN
        IF (PlantTypeRec.Description <> '') THEN
          Description := PlantTypeRec.Description;
      END;
    END;

    PROCEDURE LookupPlantType@1100525000();
    VAR
      lvPlantTypeRec@1100525000 : Record 11012551;
      TmpPlantTypeRec@1100529703 : TEMPORARY Record 11012551;
      MultiCopyMgt@1100529702 : Codeunit 11012068;
      PlantTypeList@1100529701 : Page 11012552;
      FormLookupOK@1100529700 : Boolean;
    BEGIN
      IF Type <> Type::Plant THEN
        EXIT;
      GetHeader();
      lvPlantTypeRec.CHANGECOMPANY(ReqRec."Plant Company");
      IF ReqRec.Type = ReqRec.Type::Arrival THEN BEGIN
        lvPlantTypeRec.FILTERGROUP(9);
        lvPlantTypeRec.SETRANGE("Order via Plant Request", TRUE);
        lvPlantTypeRec.FILTERGROUP(0);
      END;

      lvPlantTypeRec.Code := "Plant/Item";
      PlantTypeList.SETTABLEVIEW(lvPlantTypeRec);
      IF "Plant/Item" = '' THEN
        lvPlantTypeRec.Code := PlantListLastPlantType
      ELSE
        lvPlantTypeRec.Code := "Plant/Item";

      PlantTypeList.SETRECORD(lvPlantTypeRec);
      PlantTypeList.LOOKUPMODE(TRUE);
      PlantTypeList.SetMultiCopyAllowed(TRUE);
      PlantTypeList.SetCompany(ReqRec."Plant Company");

      FormLookupOK := (PlantTypeList.RUNMODAL = ACTION::LookupOK);
      PlantTypeList.GETRECORD(lvPlantTypeRec);
      PlantListLastPlantType := lvPlantTypeRec.Code;
      IF ReqRec.Status = ReqRec.Status::Open THEN
        IF FormLookupOK THEN
          VALIDATE("Plant/Item", lvPlantTypeRec.Code)
        ELSE BEGIN
          MultiCopy := PlantTypeList.GetMultiCopyRec(TmpPlantTypeRec);
          IF MultiCopy THEN
            MultiCopyMgt.CopyPlantTypeToPlantRequesLineSMF(TmpPlantTypeRec, ReqRec, "Line No.");
        END;
    END;

    PROCEDURE LookupPlantNo@1100525003();
    VAR
      lvPlantNoRec@1100525000 : Record 11012552;
    BEGIN
      IF Type <> Type::Plant THEN
        EXIT;
      GetHeader();
      lvPlantNoRec.CHANGECOMPANY(ReqRec."Plant Company");
      lvPlantNoRec.SETRANGE("Plant Type", "Plant/Item");
      lvPlantNoRec."Plant Type" := "Plant/Item";
      lvPlantNoRec."No." := "Plant No.";
      IF PAGE.RUNMODAL(0, lvPlantNoRec) = ACTION::LookupOK THEN BEGIN
        IF ReqRec.Status = ReqRec.Status::Open THEN
          VALIDATE("Plant No.", lvPlantNoRec."No.");
      END;
    END;

    PROCEDURE LookupPlantInventory@1100485000(Level@1100485003 : Integer);
    VAR
      PlantInventory@1100485001 : Record 11012555;
      InventoryPage@1100485000 : Page 11012559;
      Details@1100485002 : 'InventEntry,PlantType,PlantNo,RateCode';
    BEGIN
      //* Level: 1-Plant Type, 2-Plant No.
      IF (Type <> Type::Plant) THEN
        EXIT;
      IF NOT ReqRec.GET("Request No.") THEN
        EXIT;

      PlantInventory.CHANGECOMPANY(ReqRec."Plant Company");
      PlantInventory.FILTERGROUP(9);
      IF ReqRec.Type = ReqRec.Type::Arrival THEN
        PlantInventory.SETRANGE("Order via Plant Request",TRUE);
      PlantInventory.SETRANGE(Removed,FALSE);
      PlantInventory.SETRANGE(Location, ReqRec."From Location");
      IF (Level = 2) THEN
        PlantInventory.SETRANGE("Plant Type", "Plant/Item");
      PlantInventory.FILTERGROUP(0);
      PlantInventory.Removed := FALSE;
      PlantInventory.Location :=  ReqRec."From Location";
      PlantInventory."Plant Type" := "Plant/Item";
      PlantInventory."Plant No." := "Plant No.";
      InventoryPage.SetCompany(ReqRec."Plant Company");
      IF Level = 1 THEN
        InventoryPage.SetDetailSelection(Details::PlantType)
      ELSE
        InventoryPage.SetDetailSelection(Details::PlantNo);
      InventoryPage.SETTABLEVIEW(PlantInventory);
      InventoryPage.SETRECORD(PlantInventory);
      InventoryPage.LOOKUPMODE := TRUE;
      IF InventoryPage.RUNMODAL = ACTION::LookupOK THEN BEGIN
        InventoryPage.GETRECORD(PlantInventory);
        InventoryPage.GetDetailSelection(Details);
        IF (Level = 1) THEN
          VALIDATE("Plant/Item",PlantInventory."Plant Type");
        IF ((Level = 1) OR (Level = 2)) AND (Details <> Details::PlantType) THEN BEGIN
          IF PlantInventory."Plant No." = '0' THEN
            PlantInventory."Plant No." := '';  //* On Plant Request is '0' not allowed
          VALIDATE("Plant No.",PlantInventory."Plant No.");
        END;
      END;
    END;

    PROCEDURE LookupPlantSet@1100525006();
    VAR
      lvPlantSetRec@1100525000 : Record 11012587;
      PlantSetList@1210190000 : Page 11012622;
    BEGIN
      IF Type <> Type::Set THEN
        EXIT;
      GetHeader();
      //lvPlantSetRec.CHANGECOMPANY(ReqRec."Plant Company");
      IF ReqRec.Type = ReqRec.Type::Arrival THEN BEGIN
        lvPlantSetRec.FILTERGROUP(9);
        lvPlantSetRec.SETRANGE("Order via Plant Request", TRUE);
        lvPlantSetRec.FILTERGROUP(0);
      END;
      PlantSetList.SETTABLEVIEW(lvPlantSetRec);
      lvPlantSetRec.Code := "Plant/Item";
      //IF PAGE.RUNMODAL(0, lvPlantSetRec) = ACTION::LookupOK THEN BEGIN
      PlantSetList.SETRECORD(lvPlantSetRec);
      IF (ReqRec."Plant Company" <> '') AND (ReqRec."Plant Company" <> COMPANYNAME) THEN
        PlantSetList.SetPlantCompany(ReqRec."Plant Company");
      PlantSetList.LOOKUPMODE(TRUE);
      IF PlantSetList.RUNMODAL = ACTION::LookupOK THEN BEGIN
        PlantSetList.GETRECORD(lvPlantSetRec);
        IF ReqRec.Status = ReqRec.Status::Open THEN
          VALIDATE("Plant/Item", lvPlantSetRec.Code);
      END;
    END;

    PROCEDURE LookupItem@1100525005();
    VAR
      lvItemRec@1100525000 : Record 27;
      ItemList@1100527000 : Page 31;
    BEGIN
      IF Type <> Type::Item THEN
        EXIT;
      GetHeader();
      lvItemRec.CHANGECOMPANY(ReqRec."Plant Company");
      IF ReqRec.Type = ReqRec.Type::Arrival THEN BEGIN
        lvItemRec.FILTERGROUP(9);
        lvItemRec.SETRANGE("Order via Plant Request", TRUE);
        lvItemRec.FILTERGROUP(0);
      END;
      ItemList.SetCompany(ReqRec."Plant Company");
      ItemList.SETTABLEVIEW(lvItemRec);
      lvItemRec."No." := "Plant/Item";
      ItemList.SETRECORD(lvItemRec);
      IF (ReqRec.Status = ReqRec.Status::Open) THEN
        ItemList.DetermineInterface(DATABASE::"Plant Request Line (SMF)","Request No.",Element,'','',0,'','',"Line No.",'','');
      ItemList.LOOKUPMODE(ReqRec.Status = ReqRec.Status::Open);
      MultiCopy := FALSE;
      IF ItemList.RUNMODAL = ACTION::LookupOK THEN BEGIN
        ItemList.GETRECORD(lvItemRec);
        IF ReqRec.Status = ReqRec.Status::Open THEN
          VALIDATE("Plant/Item", lvItemRec."No.");
      END ELSE
        MultiCopy := ItemList.CheckMultiCopy;
    END;

    PROCEDURE FieldIsEditable@1100525002(lFieldNo@1100525000 : Integer) : Boolean;
    BEGIN
      //Future USE? Doesn't work yet.
      //The purpose of this was to add this to the editable property of a field in a page
      //but that doesn't work.

      CASE Type OF
        Type::Plant:
          EXIT(TRUE);
        Type::Item:
          EXIT(NOT (lFieldNo IN [FIELDNO("Plant No."),
                                 FIELDNO("Expected return on")]));
        Type::Set:
          EXIT(NOT (lFieldNo IN [FIELDNO("Plant No.")]));
        Type::Text:
          EXIT(NOT (lFieldNo IN [FIELDNO("Plant/Item"),
                                 FIELDNO(Element),
                                 FIELDNO("Plant No."),
                                 FIELDNO("Expected return on"),
                                 FIELDNO(Quantity)]));
      END;
    END;

    PROCEDURE GetRentalRate@1100525004() : Decimal;
    VAR
      PlantRequestSMF@1100525002 : Record 11125529;
      PlantType@1100525003 : Record 11012551;
      PlantLoc@1100525001 : Record 11012554;
      Loc@1100525000 : Code[20];
    BEGIN
      //DP00898 (Function copied from T11020521, but plant in other company so codeunit SearchRate can not be used. Also no RateCode here)
      IF ("Plant/Item" = '') OR (Type <> Type::Plant) THEN
        EXIT(0);
      IF NOT PlantRequestSMF.GET("Request No.") THEN
        EXIT(0);
      IF PlantRequestSMF."Plant Company" = '' THEN
        EXIT(0);
      PlantType.CHANGECOMPANY(PlantRequestSMF."Plant Company");
      IF NOT PlantType.GET("Plant/Item") THEN
        EXIT(0);
      IF PlantType."Rental Type" <> PlantType."Rental Type"::Rental THEN
        EXIT(0);

      CASE PlantRequestSMF.Type OF
        PlantRequestSMF.Type::Arrival:
          Loc := PlantRequestSMF."To Location";
        PlantRequestSMF.Type::Removal:
          Loc := PlantRequestSMF."From Location";
        PlantRequestSMF.Type::OtherTransfers:
          BEGIN
            PlantLoc.CHANGECOMPANY(PlantRequestSMF."Plant Company");
            IF PlantLoc.GET(PlantRequestSMF."To Location") THEN BEGIN
              IF NOT PlantLoc.Depot THEN
                Loc := PlantRequestSMF."To Location";
            END;
            IF Loc = '' THEN BEGIN
              IF PlantLoc.GET(PlantRequestSMF."From Location") THEN BEGIN
                IF NOT PlantLoc.Depot THEN BEGIN
                  Loc := PlantRequestSMF."From Location";
                END;
              END;
            END;
            IF Loc = '' THEN
              EXIT(0);
          END;
        ELSE
          EXIT(0);
      END;

      EXIT(SearchRentalRate(Loc,"Plant/Item","Plant No.",PlantRequestSMF."Transfer Date",PlantRequestSMF."Plant Company"));
    END;

    LOCAL PROCEDURE SearchRentalRate@1100485004(PlantLocation@1210190000 : Code[20];PlantType@11012000 : Code[20];PlantNo@1210190002 : Code[10];ReferenceDate@11012001 : Date;PlantCompany@1100525000 : Text[30]) : Decimal;
    VAR
      PlantLoc@1210190001 : Record 11012554;
      PlantRate@1100525001 : Record 11012567;
      LocationRate@1210190003 : Record 11012583;
      RateFound@1100485000 : Boolean;
      RentalRate@1100485008 : Decimal;
    BEGIN
      //Copied parts from Codeunit SearchRate (keep it simple for SMF)
      PlantLoc.CHANGECOMPANY(PlantCompany);
      IF (NOT PlantLoc.GET(PlantLocation)) OR (PlantLocation = '') THEN BEGIN
        PlantLoc."Rate Type" := PlantLoc."Rate Type"::Day;
        PlantLoc."Kind of Rate" := PlantLoc."Kind of Rate"::Extern;
      END ELSE BEGIN
        IF PlantLoc."Reference Date for Prices" <> 0D THEN
          ReferenceDate := PlantLoc."Reference Date for Prices";
      END;

      WITH LocationRate DO BEGIN
        IF (PlantLocation <> '') THEN BEGIN
          LocationRate.CHANGECOMPANY(PlantCompany);
          SETRANGE(Location,PlantLocation);
          SETRANGE("Rental Type","Rental Type"::Rental);
          SETRANGE("Plant Type",PlantType);
          SETRANGE("Starting Date",0D,ReferenceDate);
          SETFILTER("Ending Date",'%1|>=%2',0D, ReferenceDate);
          IF (PlantNo <> '') THEN BEGIN
            SETRANGE("Plant No.",PlantNo);
            RateFound := FINDLAST;
          END;
          IF NOT RateFound THEN BEGIN
            SETRANGE("Plant No.",'');
            RateFound := FINDLAST;
          END;
          IF RateFound THEN BEGIN
            CASE PlantLoc."Rate Type" OF
              PlantLoc."Rate Type"::Day: RentalRate := "Rental Rate (Day)";
              PlantLoc."Rate Type"::Week: RentalRate := "Rental Rate (Week)";
              PlantLoc."Rate Type"::Month: RentalRate := "Rental Rate (Month)";
            END;
            EXIT(RentalRate);
          END;
        END;
      END;

      WITH PlantRate DO BEGIN
        PlantRate.CHANGECOMPANY(PlantCompany);
        SETRANGE("Rental Type","Rental Type"::Rental);
        SETRANGE("Plant Type",PlantType);
        SETRANGE("Starting Date",0D,ReferenceDate);
        SETFILTER("Ending Date",'%1|>=%2',0D, ReferenceDate);
        IF (PlantNo <> '') THEN BEGIN
          SETRANGE("Plant No.",PlantNo);
          RateFound := FINDLAST;
        END;
        IF NOT RateFound THEN BEGIN
          SETRANGE("Plant No.",'');
          RateFound := FINDLAST;
        END;
        IF RateFound THEN BEGIN
          IF (PlantLoc."Kind of Rate" = PlantLoc."Kind of Rate"::Extern) THEN BEGIN
            CASE PlantLoc."Rate Type" OF
              PlantLoc."Rate Type"::Day: RentalRate := "Rental Rate External (Days)";
              PlantLoc."Rate Type"::Week: RentalRate := "Rental Rate External (Week)";
              PlantLoc."Rate Type"::Month: RentalRate := "Rental Rate External (Month)";
            END;
          END ELSE BEGIN
            CASE PlantLoc."Rate Type" OF
              PlantLoc."Rate Type"::Day: RentalRate := "Rental Rate (Days)";
              PlantLoc."Rate Type"::Week: RentalRate := "Rental Rate (Week)";
              PlantLoc."Rate Type"::Month: RentalRate := "Rental Rate (Month)";
            END;
          END;
          EXIT(RentalRate);
        END;
      END;
      EXIT(0);
    END;

    PROCEDURE GetPlantCategoryCode@1100525007() : Code[20];
    VAR
      PlantType@1100525000 : Record 11012551;
    BEGIN
      IF (Type = Type::Plant) AND ("Plant/Item" <> '') THEN BEGIN
        GetHeader();
        PlantType.CHANGECOMPANY(ReqRec."Plant Company");
        IF PlantType.GET("Plant/Item") THEN
          EXIT(PlantType."Plant Category");
      END;
      EXIT('');
    END;

    PROCEDURE GetPlantCategoryDescription@1100525008() : Text;
    VAR
      PlantCategory@1100525000 : Record 11072663;
      PlantCategoryCode@1100525001 : Code[20];
    BEGIN
      IF (Type = Type::Plant) AND ("Plant/Item" <> '') THEN BEGIN
        PlantCategoryCode := GetPlantCategoryCode;
        IF PlantCategoryCode <> '' THEN BEGIN
          PlantCategory.CHANGECOMPANY(ReqRec."Plant Company");
          IF PlantCategory.GET(PlantCategoryCode) THEN
            EXIT(PlantCategory.Description);
        END;
      END;
      EXIT('');
    END;

    PROCEDURE ExplodeSet@1100529000(VAR PlantRequestLineSMF@1100485005 : Record 11125530);
    VAR
      PlantSetLine@1100485002 : Record 11012588;
      PlantRequest@1100485008 : Record 11125529;
      PlantRequestLine@1100485009 : Record 11125530;
      OrgPlantRequestLine@1100485011 : Record 11125530;
      NewPlantRequestLine@1100485003 : Record 11125530;
      PlantType@1210190000 : Record 11012551;
      Item@1100529000 : Record 27;
      LineSpacing@1100485012 : Integer;
      NextLineNo@1100485013 : Integer;
      LineQuantity@1100485004 : Decimal;
    BEGIN
      PlantRequestLineSMF.TESTFIELD("Request No.");
      PlantRequest.GET(PlantRequestLineSMF."Request No.");
      PlantRequest.TESTFIELD(Status, PlantRequest.Status::Open);
      PlantRequest.TESTFIELD("Plant Company");
      IF NOT CONFIRM(Text001) THEN
        EXIT;

      PlantSetLine.CHANGECOMPANY(PlantRequest."Plant Company");
      PlantType.CHANGECOMPANY(PlantRequest."Plant Company");
      Item.CHANGECOMPANY(PlantRequest."Plant Company");

      PlantRequestLine.COPY(PlantRequestLineSMF);
      PlantRequestLine.SETCURRENTKEY("Request No.", "Line No.");
      PlantRequestLine.FILTERGROUP(9);
      PlantRequestLine.SETRANGE("Request No.", PlantRequestLineSMF."Request No.");
      PlantRequestLine.SETRANGE(Type, PlantRequestLine.Type::Set);
      PlantRequestLine.SETFILTER("Plant/Item", '<>%1', '');
      PlantRequestLine.SETFILTER(Quantity, '<>%1', 0);
      PlantRequestLine.FILTERGROUP(0);
      IF PlantRequestLine.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          OrgPlantRequestLine := PlantRequestLine;  //* Save field values
          PlantSetLine.RESET;
          PlantSetLine.SETRANGE("Set Code", PlantRequestLine."Plant/Item");
          PlantSetLine.SETFILTER(Quantity, '<>%1', 0);
          IF PlantSetLine.FINDSET THEN BEGIN
            IF DetermineLineSpacingAndNextLineNo(PlantRequestLine, PlantSetLine.COUNT, LineSpacing, NextLineNo) THEN BEGIN
              PlantRequestLine.DELETE;
              REPEAT
                IF PlantSetLine.Type = PlantSetLine.Type::Plant THEN
                  PlantType.GET(PlantSetLine."Plant Type");
                IF PlantSetLine.Type = PlantSetLine.Type::Item THEN
                  Item.GET(PlantSetLine."Item No.");
                IF ((PlantSetLine.Type = PlantSetLine.Type::Plant) AND PlantType.Bulk) OR (PlantSetLine.Type = PlantSetLine.Type::Item) THEN
                  LineQuantity := ROUND(PlantSetLine.Quantity * OrgPlantRequestLine.Quantity, 0.00001)
                ELSE BEGIN
                  IF (PlantSetLine."Plant No." <> '') THEN
                    LineQuantity := 1
                  ELSE
                    LineQuantity := ROUND(PlantSetLine.Quantity * OrgPlantRequestLine.Quantity, 1);
                END;

                NewPlantRequestLine.INIT;
                NewPlantRequestLine."Request No." := OrgPlantRequestLine."Request No.";
                NewPlantRequestLine."Line No." := NextLineNo;
                IF PlantSetLine.Type <> PlantSetLine.Type::Item THEN BEGIN
                  NewPlantRequestLine.Type := NewPlantRequestLine.Type::Plant;
                  NewPlantRequestLine."Plant/Item" := PlantSetLine."Plant Type";
                  NewPlantRequestLine."Plant No." := PlantSetLine."Plant No.";
                  NewPlantRequestLine.FillPlantDescription();
                  NewPlantRequestLine.Bulk := PlantType.Bulk;
                  NewPlantRequestLine."Expected return on" := OrgPlantRequestLine."Expected return on";
                END ELSE BEGIN
                  NewPlantRequestLine.Type := OrgPlantRequestLine.Type::Item;
                  NewPlantRequestLine."Plant/Item" := PlantSetLine."Item No.";
                  NewPlantRequestLine.Description := Item.Description;
                  NewPlantRequestLine."Description 2" := Item."Description 2";
                END;
                NewPlantRequestLine.Element := OrgPlantRequestLine.Element;
                NewPlantRequestLine.Quantity := LineQuantity;
                NewPlantRequestLine.INSERT;
                NextLineNo := NextLineNo + LineSpacing;
              UNTIL PlantSetLine.NEXT = 0;
            END;
          END;
          PlantRequestLine := OrgPlantRequestLine;
        UNTIL PlantRequestLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE DetermineLineSpacingAndNextLineNo@1100529001(PlantRequestLineSMF@1100529000 : Record 11125530;NoOfLinesNeeded@1100529001 : Integer;VAR LineSpacing@1100529002 : Integer;VAR NextLineNo@1100529003 : Integer) : Boolean;
    VAR
      PlantRequestLine@1100529004 : Record 11125530;
    BEGIN
      LineSpacing := 0;
      NextLineNo := 0;
      IF NoOfLinesNeeded > 0 THEN BEGIN
        PlantRequestLine.SETRANGE("Request No.", PlantRequestLineSMF."Request No.");
        PlantRequestLine.SETFILTER("Line No.", '>%1', PlantRequestLineSMF."Line No.");
        IF PlantRequestLine.FINDFIRST THEN
          LineSpacing := (PlantRequestLine."Line No." - PlantRequestLineSMF."Line No.") DIV (NoOfLinesNeeded)
        ELSE
          LineSpacing := 10000;
        IF LineSpacing <> 0 THEN
          NextLineNo := PlantRequestLineSMF."Line No."
        ELSE BEGIN
          LineSpacing := 10000;
          PlantRequestLine.SETRANGE("Line No.");  //* Reset filter
          PlantRequestLine.FINDLAST;
          NextLineNo := PlantRequestLine."Line No." + 10000;
        END;
      END;
      EXIT((LineSpacing <> 0) AND (NextLineNo <> 0));
    END;

    LOCAL PROCEDURE FillDefaultElement@1100525015();
    VAR
      PlantRequestSMF@1100525000 : Record 11125529;
      PlantLocation@1100525001 : Record 11012554;
    BEGIN
      IF NOT PlantRequestSMF.GET("Request No.") THEN
        EXIT;
      IF NOT (PlantRequestSMF.Type IN [PlantRequestSMF.Type::Arrival, PlantRequestSMF.Type::OtherTransfers]) THEN
        EXIT;
      IF (PlantRequestSMF."Source No." = '') OR (PlantRequestSMF."To Location" = '') THEN
        EXIT;
      IF NOT (PlantRequestSMF."Source Type" = PlantRequestSMF."Source Type"::Project) THEN
        EXIT;
      PlantLocation.CHANGECOMPANY(PlantRequestSMF."Plant Company");
      IF NOT PlantLocation.GET(PlantRequestSMF."To Location") THEN
        EXIT;
      IF (PlantLocation.Element <> '') AND (PlantLocation."Project No." = PlantRequestSMF."Source No.") THEN
        Element := PlantLocation.Element;
    END;

    PROCEDURE GetUnitOfMeasureCode@1100530000() : Code[10];
    VAR
      PlantRequestSMF@1100529903 : Record 11125529;
      PlantType@1100529900 : Record 11012551;
      PlantSet@1100529901 : Record 11012587;
      Item@1100529902 : Record 27;
    BEGIN
      IF "Plant/Item" <> '' THEN BEGIN
        IF PlantRequestSMF.GET("Request No.") THEN BEGIN

          CASE Type OF
            Type::Plant:
              BEGIN
                PlantType.CHANGECOMPANY(PlantRequestSMF."Plant Company");
                IF PlantType.GET("Plant/Item") THEN
                    EXIT(PlantType."Unit of Measure");
              END;
            Type::Set:
              BEGIN
                PlantSet.CHANGECOMPANY(PlantRequestSMF."Plant Company");
                IF PlantSet.GET("Plant/Item") THEN
                  EXIT(PlantSet."Unit of Measure");
              END;
            Type::Item:
              BEGIN
                Item.CHANGECOMPANY(PlantRequestSMF."Plant Company");
                IF Item.GET("Plant/Item") THEN
                  EXIT(Item."Sales Unit of Measure");
              END;
          END;
        END;
      END;
      EXIT('');
    END;

    PROCEDURE PlantItemOnLookup@1100527000();
    BEGIN
      CASE Type OF
        Type::Plant:
          LookupPlantType;
        Type::Set:
          LookupPlantSet;
        Type::Item:
          LookupItem;
      END;
    END;

    PROCEDURE CheckMultiCopy@1100527001() : Boolean;
    BEGIN
      EXIT(MultiCopy);
    END;

    LOCAL PROCEDURE FillProjectStock@1100529601();
    VAR
      PlantRequestSMF@1100529600 : Record 11125529;
      Project@1100529601 : Record 11072003;
    BEGIN
      "Project No." := '';
      "Project Stock" := FALSE;
      Deliver := Deliver::" ";
      "Ship To Location" := '';

      IF Type = Type::Item THEN
        IF PlantRequestSMF.GET("Request No.") THEN
          IF PlantRequestSMF."Source Type" = PlantRequestSMF."Source Type"::Project THEN
            "Project No." := PlantRequestSMF."Source No.";
      IF "Project No." <> '' THEN
        IF NOT Project.GET("Project No.") THEN
          "Project No." := '';
      IF "Project No." = '' THEN
        EXIT;

      InventorySetup.GET;
      "Project Stock" := InventorySetup.JobInventoryByStockRelease("Project No.");
      IF "Project Stock" AND (Project.Deliver <> Project.Deliver::" ") THEN BEGIN
        CASE Project.Deliver OF
          Project.Deliver::Location:
            Deliver := Deliver::Location;
          Project.Deliver::"Project Location":
            Deliver := Deliver::"Project Location";
        END;
        "Ship To Location" := Project."Ship To Location";
      END;
    END;

    PROCEDURE LookupToEmployee@1100485011();
    VAR
      Employee@1100485000 : Record 5200;
    BEGIN
      GetHeader;
      IF "To Employee Company" <> '' THEN
        Employee.CHANGECOMPANY("To Employee Company");
      Employee.SETRANGE(Status, Employee.Status::Active);
      Employee."No." := "To Employee No.";
      IF (ReqRec.Status <> ReqRec.Status::Open) OR (Type = Type::Text) THEN
        PAGE.RUNMODAL(0,Employee)
      ELSE BEGIN
        IF PAGE.RUNMODAL(0, Employee) = ACTION::LookupOK THEN
          VALIDATE("To Employee No.",Employee."No.");
      END;
    END;

    PROCEDURE GetEmployeeName@1210190000() : Text;
    VAR
      Employee@1100485000 : Record 5200;
    BEGIN
      IF "To Employee No." = '' THEN
        EXIT('');
      IF "To Employee Company" <> '' THEN
        Employee.CHANGECOMPANY("To Employee Company");
      IF Employee.GET("To Employee No.") THEN
        EXIT(Employee."Full Name");
    END;

    BEGIN
    END.
  }
}

