OBJECT Table 11020355 Cost Price Read Order Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Cost Price Read Order Line;
               NOR=Selvkostpris, Leseordrerad;
               SVE=Sj„lvkostnadspris f”r l„sorderrad];
  }
  FIELDS
  {
    { 10  ;   ;Price Type          ;Option        ;CaptionML=[ENU=Price Type;
                                                              NOR=Pristype;
                                                              SVE=Pristyp];
                                                   OptionCaptionML=[ENU=Project,Service,Indirect,Plant,,Project - External Employee,Service - External Employee,Indirect - External Employee,Plant - External Employee,,Rental - External Employee,Request,Request - External Employee;
                                                                    SVE=Projekt,Service,Indirekt,Maskin,,Projekt - extern personal,Service - extern personal,Indirekt - extern personal,Maskin - extern personal,,Uthyrning - extern personal,Krav,Krav - extern personal];
                                                   OptionString=Project,Service,Indirect,Plant,,Project - External Employee,Service - External Employee,Indirect - External Employee,Plant - External Employee,,Rental - External Employee,ResourceRequest,ResourceRequest - External Employee }
    { 20  ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              NOR=Linjenr.;
                                                              SVE=Radnr] }
    { 30  ;   ;Read Order          ;Integer       ;OnValidate=BEGIN
                                                                IF "Read Order" > 0 THEN BEGIN
                                                                  CostPriceReadOrderLine.RESET;
                                                                  CostPriceReadOrderLine.SETCURRENTKEY("Price Type", "Read Order");
                                                                  CostPriceReadOrderLine.SETRANGE("Price Type", "Price Type");
                                                                  CostPriceReadOrderLine.SETRANGE("Read Order", "Read Order");
                                                                  CostPriceReadOrderLine.SETFILTER("Line No.",'<>%1', "Line No.");
                                                                  IF CostPriceReadOrderLine.FINDFIRST THEN
                                                                    ERROR(Text001, FIELDCAPTION("Read Order"), "Read Order");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Read Order;
                                                              NOR=Les Ordre;
                                                              SVE=L„sorder];
                                                   BlankZero=Yes }
    { 40  ;   ;Table No.           ;Integer       ;CaptionML=[ENU=Table No.;
                                                              NOR=Tabellnr.;
                                                              SVE=Tabellnr] }
    { 50  ;   ;Cost Price Table    ;Text249       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObjWithCaption."Object Caption" WHERE (Object Type=CONST(Table),
                                                                                                                Object ID=FIELD(Table No.)));
                                                   CaptionML=[ENU=Cost Price Table;
                                                              NOR=Selvkostpris tabell;
                                                              SVE=Sj„lvkostnadspris tabell];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Price Type,Line No.                     ;Clustered=Yes }
    {    ;Price Type,Read Order                    }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      HumanResourcesSetup@1100485002 : Record 5218;
      ServSetup@1100485003 : Record 11012800;
      PlantSetup@1100485004 : Record 11012550;
      CostPriceReadOrderLine@1100485000 : Record 11020355;
      Text001@1100485001 : TextConst 'ENU=%1 %2 may only be used once.;NOR=%1 %2 kan kun brukes en g†ng.;SVE=%1 %2 kan endast anv„ndas en g†ng.';
      Text002@1100485005 : TextConst 'ENU=Table %1 is not involved in a Cost Price Read Order.;NOR=Tabell %1 er ikke innblandet i en leseordre med selvkost.;SVE=Tabell %1 „r inte inblandad i en l„sorder med sj„lvkostnadspris.';
      FPSLicenseManagement@1100527400 : Codeunit 11229289;

    PROCEDURE CreateReadOrderLines@1100485000(Initialize@1100485000 : Boolean);
    VAR
      ResourcePlanningSetup@1100529000 : Record 11124900;
      lReadOrderLine@1100485003 : Record 11020355;
      lPriceType@1100485001 : 'Project,Service,Indirect,Plant,,Project - External Employee,Service - External Employee,Indirect - External Employee,Plant - External Employee,,Rental - External Employee';
      lNewReadOrder@1100485002 : Integer;
    BEGIN
      HumanResourcesSetup.GET;

      IF Initialize THEN
        lReadOrderLine.DELETEALL
      ELSE
        Initialize := lReadOrderLine.ISEMPTY;

      //Project
      lPriceType := lPriceType::Project;
      CreateReadOrderLine(lPriceType,DATABASE::"Exceptional Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Proj - Empl - Wage Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Project - Employee Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Proj - Trade - Wage Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Project - Trade As. Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Proj - Cost Object Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Project Budget Rate");
      CreateReadOrderLine(lPriceType,DATABASE::"Dep. - Trade - Wage Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Dep. - Trade As. Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Dep. - Cost Object Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Department Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Empl. - Cost Obj. Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Employee - Wage C. Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Employee Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Trade As. - Wage C. Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Trade Association Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Cost Object Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Budget Rate");

      //Service
      IF FPSLicenseManagement.LicenseAndReadPermissionForTable(ServSetup) THEN BEGIN
        lPriceType := lPriceType::Service;
        CreateReadOrderLine(lPriceType,DATABASE::"Exceptional Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Serv. - Trade -Wage Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Serv. - Trade As. Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Serv. - Empl. Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Serv. - Cost Object Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Dep. - Trade - Wage Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Dep. - Trade As. Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Dep. - Cost Object Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Department Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Empl. - Cost Obj. Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Employee - Wage C. Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Employee Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Trade As. - Wage C. Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Trade Association Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Cost Object Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Budget Rate");
      END;

      //Indirect
      lPriceType := lPriceType::Indirect;
      CreateReadOrderLine(lPriceType,DATABASE::"Exceptional Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Dep. - Trade - Wage Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Dep. - Trade As. Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Dep. - Cost Object Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Department Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Empl. - Cost Obj. Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Employee - Wage C. Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Employee Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Trade As. - Wage C. Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Trade Association Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Cost Object Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Budget Rate");

      //Plant
      IF FPSLicenseManagement.LicenseAndReadPermissionForTable(PlantSetup) THEN BEGIN
        lPriceType := lPriceType::Plant;
        CreateReadOrderLine(lPriceType,DATABASE::"Exceptional Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Dep. - Trade - Wage Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Dep. - Trade As. Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Dep. - Cost Object Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Department Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Empl. - Cost Obj. Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Employee - Wage C. Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Employee Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Trade As. - Wage C. Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Trade Association Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Cost Object Cost Price");
      END;

      //Project - External Employee
      lPriceType := lPriceType::"Project - External Employee";
      CreateReadOrderLine(lPriceType,DATABASE::"Exceptional Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Proj - Trade - Wage Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Project - Trade As. Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Proj - Empl - Wage Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Project - Employee Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Proj - Cost Object Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Project Budget Rate");
      CreateReadOrderLine(lPriceType,DATABASE::"Dep. - Trade - Wage Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Dep. - Trade As. Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Dep. - Cost Object Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Department Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Empl. - Cost Obj. Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Employee - Wage C. Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Employee Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Trade As. - Wage C. Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Trade Association Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Budget Rate");
      CreateReadOrderLine(lPriceType,DATABASE::"Cost Object Cost Price");

      //Service - External Employee
      IF FPSLicenseManagement.LicenseAndReadPermissionForTable(ServSetup) THEN BEGIN
        lPriceType := lPriceType::"Service - External Employee";
        CreateReadOrderLine(lPriceType,DATABASE::"Exceptional Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Serv. - Trade -Wage Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Serv. - Trade As. Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Serv. - Empl. Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Serv. - Cost Object Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Dep. - Trade - Wage Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Dep. - Trade As. Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Dep. - Cost Object Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Department Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Empl. - Cost Obj. Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Employee - Wage C. Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Employee Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Trade As. - Wage C. Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Trade Association Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Budget Rate");
        CreateReadOrderLine(lPriceType,DATABASE::"Cost Object Cost Price");
      END;

      //Indirect - External Employee
      lPriceType := lPriceType::"Indirect - External Employee";
      CreateReadOrderLine(lPriceType,DATABASE::"Exceptional Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Dep. - Trade - Wage Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Dep. - Trade As. Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Dep. - Cost Object Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Department Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Empl. - Cost Obj. Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Employee - Wage C. Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Employee Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Trade As. - Wage C. Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Trade Association Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Budget Rate");
      CreateReadOrderLine(lPriceType,DATABASE::"Cost Object Cost Price");

      //Plant - External Employee
      IF FPSLicenseManagement.LicenseAndReadPermissionForTable(PlantSetup) THEN BEGIN
        lPriceType := lPriceType::"Plant - External Employee";
        CreateReadOrderLine(lPriceType,DATABASE::"Exceptional Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Dep. - Trade - Wage Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Dep. - Trade As. Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Dep. - Cost Object Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Department Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Empl. - Cost Obj. Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Employee - Wage C. Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Employee Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Trade As. - Wage C. Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Trade Association Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Cost Object Cost Price");
      END;

      //Rental - External Employee
      lPriceType := lPriceType::"Rental - External Employee";
      CreateReadOrderLine(lPriceType,DATABASE::"Dep. - Trade - Wage Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Dep. - Trade As. Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Dep. - Cost Object Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Department Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Empl. - Cost Obj. Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Employee - Wage C. Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Employee Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Trade As. - Wage C. Cost Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Trade Association Cost Price");

      IF FPSLicenseManagement.LicenseAndReadPermissionForTable(ResourcePlanningSetup) THEN BEGIN
        //Resource request
        lPriceType := "Price Type"::ResourceRequest;
        CreateReadOrderLine(lPriceType,DATABASE::"Exceptional Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Dep. - Trade - Wage Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Dep. - Trade As. Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Dep. - Cost Object Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Department Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Empl. - Cost Obj. Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Employee - Wage C. Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Employee Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Trade As. - Wage C. Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Trade Association Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Budget Rate");
        CreateReadOrderLine(lPriceType,DATABASE::"Cost Object Cost Price");
        //
        //Resource request - External Employee
        lPriceType := "Price Type"::"ResourceRequest - External Employee";
        CreateReadOrderLine(lPriceType,DATABASE::"Exceptional Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Dep. - Trade - Wage Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Dep. - Trade As. Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Dep. - Cost Object Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Department Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Empl. - Cost Obj. Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Employee - Wage C. Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Employee Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Trade As. - Wage C. Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Trade Association Cost Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Budget Rate");
        CreateReadOrderLine(lPriceType,DATABASE::"Cost Object Cost Price");
      END;

      IF NOT Initialize THEN
        EXIT;

      //Init Project
      lPriceType := lPriceType::Project;
      lNewReadOrder := 1;
      WriteInitialReadOrder(lPriceType,DATABASE::"Proj - Empl - Wage Cost Price", lNewReadOrder);
      WriteInitialReadOrder(lPriceType,DATABASE::"Project - Employee Cost Price", lNewReadOrder);
      WriteInitialReadOrder(lPriceType,DATABASE::"Trade As. - Wage C. Cost Price", lNewReadOrder);
      WriteInitialReadOrder(lPriceType,DATABASE::"Trade Association Cost Price", lNewReadOrder);

      //Init Service
      IF FPSLicenseManagement.LicenseAndReadPermissionForTable(ServSetup) THEN BEGIN
        lPriceType := lPriceType::Service;
        lNewReadOrder := 1;
        WriteInitialReadOrder(lPriceType,DATABASE::"Trade As. - Wage C. Cost Price", lNewReadOrder);
        WriteInitialReadOrder(lPriceType,DATABASE::"Trade Association Cost Price", lNewReadOrder);
      END;

      //Init Indirect
      lPriceType := lPriceType::Indirect;
      lNewReadOrder := 1;
      WriteInitialReadOrder(lPriceType,DATABASE::"Trade As. - Wage C. Cost Price", lNewReadOrder);
      WriteInitialReadOrder(lPriceType,DATABASE::"Trade Association Cost Price", lNewReadOrder);

      //Init Plant
      IF FPSLicenseManagement.LicenseAndReadPermissionForTable(PlantSetup) THEN BEGIN
        lPriceType := lPriceType::Plant;
        lNewReadOrder := 1;
        WriteInitialReadOrder(lPriceType,DATABASE::"Trade As. - Wage C. Cost Price", lNewReadOrder);
        WriteInitialReadOrder(lPriceType,DATABASE::"Trade Association Cost Price", lNewReadOrder);
      END;

      //Init Project - External Employee
      lPriceType := lPriceType::"Project - External Employee";
      lNewReadOrder := 1;
      IF HumanResourcesSetup."Internal Charge Rate Ext Hours" = HumanResourcesSetup."Internal Charge Rate Ext Hours"::"External Rental Hour Rate" THEN
      BEGIN
        WriteInitialReadOrder(lPriceType,DATABASE::"Proj - Empl - Wage Cost Price", lNewReadOrder);
        WriteInitialReadOrder(lPriceType,DATABASE::"Project - Employee Cost Price", lNewReadOrder);
        WriteInitialReadOrder(lPriceType,DATABASE::"Employee Cost Price", lNewReadOrder);
      END;
      WriteInitialReadOrder(lPriceType,DATABASE::"Trade As. - Wage C. Cost Price", lNewReadOrder);
      WriteInitialReadOrder(lPriceType,DATABASE::"Trade Association Cost Price", lNewReadOrder);


      //Init Service - External Employee
      IF FPSLicenseManagement.LicenseAndReadPermissionForTable(ServSetup) THEN BEGIN
        lPriceType := lPriceType::"Service - External Employee";
        lNewReadOrder := 1;
        IF HumanResourcesSetup."Internal Charge Rate Ext Hours" = HumanResourcesSetup."Internal Charge Rate Ext Hours"::"External Rental Hour Rate" THEN
          WriteInitialReadOrder(lPriceType,DATABASE::"Employee Cost Price", lNewReadOrder);
        WriteInitialReadOrder(lPriceType,DATABASE::"Trade As. - Wage C. Cost Price", lNewReadOrder);
        WriteInitialReadOrder(lPriceType,DATABASE::"Trade Association Cost Price", lNewReadOrder);
      END;

      //Init Indirect - External Employee
      lPriceType := lPriceType::"Indirect - External Employee";
      lNewReadOrder := 1;
      IF HumanResourcesSetup."Internal Charge Rate Ext Hours" = HumanResourcesSetup."Internal Charge Rate Ext Hours"::"External Rental Hour Rate" THEN
        WriteInitialReadOrder(lPriceType,DATABASE::"Employee Cost Price", lNewReadOrder);
      WriteInitialReadOrder(lPriceType,DATABASE::"Trade As. - Wage C. Cost Price", lNewReadOrder);
      WriteInitialReadOrder(lPriceType,DATABASE::"Trade Association Cost Price", lNewReadOrder);

      //Init Plant - External Employee
      IF FPSLicenseManagement.LicenseAndReadPermissionForTable(PlantSetup) THEN BEGIN
        lPriceType := lPriceType::"Plant - External Employee";
        lNewReadOrder := 1;
        IF HumanResourcesSetup."Internal Charge Rate Ext Hours" = HumanResourcesSetup."Internal Charge Rate Ext Hours"::"External Rental Hour Rate" THEN
          WriteInitialReadOrder(lPriceType,DATABASE::"Employee Cost Price", lNewReadOrder);
        WriteInitialReadOrder(lPriceType,DATABASE::"Trade As. - Wage C. Cost Price", lNewReadOrder);
        WriteInitialReadOrder(lPriceType,DATABASE::"Trade Association Cost Price", lNewReadOrder);
      END;

      //Rental - External Employee
      lPriceType := lPriceType::"Rental - External Employee";
      lNewReadOrder := 1;
      WriteInitialReadOrder(lPriceType,DATABASE::"Employee Cost Price", lNewReadOrder);

      IF FPSLicenseManagement.LicenseAndReadPermissionForTable(ResourcePlanningSetup) THEN BEGIN
        //Init Resource request
        lPriceType := "Price Type"::ResourceRequest;
        lNewReadOrder := 1;
        WriteInitialReadOrder(lPriceType,DATABASE::"Trade As. - Wage C. Cost Price", lNewReadOrder);
        WriteInitialReadOrder(lPriceType,DATABASE::"Trade Association Cost Price", lNewReadOrder);
        //
        //Init Resource request - External Employee
        lPriceType := "Price Type"::"ResourceRequest - External Employee";
        lNewReadOrder := 1;
        WriteInitialReadOrder(lPriceType,DATABASE::"Trade As. - Wage C. Cost Price", lNewReadOrder);
        WriteInitialReadOrder(lPriceType,DATABASE::"Trade Association Cost Price", lNewReadOrder);
      END;
    END;

    LOCAL PROCEDURE CreateReadOrderLine@1100485001(PriceType@1100485001 : Option;TableNo@1100485002 : Integer);
    VAR
      lReadOrderLine@1100485000 : Record 11020355;
      lLineNo@1100485004 : Integer;
    BEGIN
      WITH lReadOrderLine DO BEGIN
        SETRANGE("Price Type", PriceType);
        IF FINDLAST THEN
          lLineNo := "Line No." + 1
        ELSE
          lLineNo := 1;

        SETRANGE("Table No.", TableNo);
        IF FINDFIRST THEN
          EXIT;

        INIT;
        "Price Type" := PriceType;
        "Line No." := lLineNo;
        "Table No." := TableNo;
        INSERT;
      END;
    END;

    PROCEDURE WriteInitialReadOrder@1100485008(PriceType@1100485002 : Option;TableNo@1100485001 : Integer;VAR vNewReadOrder@1100485003 : Integer);
    VAR
      lReadOrderLine@1100485000 : Record 11020355;
    BEGIN
      WITH lReadOrderLine DO BEGIN
        SETRANGE("Price Type", PriceType);
        SETRANGE("Table No.", TableNo);
        FINDFIRST;
        IF "Read Order" = 0 THEN BEGIN
          "Read Order" := vNewReadOrder;
          MODIFY;
          vNewReadOrder := vNewReadOrder + 1;
        END;
      END;
    END;

    PROCEDURE EditCostPrices@1100485005();
    VAR
      lBudgetRateRec@1100485020 : Record 11012000;
      lProjBudgetRateRec@1100485019 : Record 11020231;
      lProjCostObjectCostPriceRec@1100485018 : Record 11020365;
      lProjEmplCostPriceRec@1100485017 : Record 11020253;
      lProjEmplWageCCostPriceRec@1100485016 : Record 11020366;
      lProjTradeAssCostPriceRec@1100485015 : Record 11020361;
      lProjTradeAssWageCostPriceRec@1100485014 : Record 11020362;
      lEmplCostPriceRec@1100485013 : Record 11020315;
      lEmplWageCCostPriceRec@1100525000 : Record 11020390;
      lEmplCostObjCostPriceRec@1100485012 : Record 11020259;
      lTradeAssCostPriceRec@1100485011 : Record 11020269;
      lTradeAssWageCCostPriceRec@1100485010 : Record 11020295;
      lServContEmplCostPriceRec@1100485009 : Record 11020322;
      lServTradeAssCostPriceRec@1100485008 : Record 11020323;
      lServCostObjCostPriceRec@1100485007 : Record 11020324;
      lServTradeWageCCostPriceRec@1100485006 : Record 11020325;
      lCostObjectCostPriceRec@1100485005 : Record 11020356;
      lDepartmentCostPriceRec@1100485004 : Record 11020357;
      lDepCostObjCostPriceRec@1100485003 : Record 11020358;
      lDepTradeAssCostPriceRec@1100485002 : Record 11020359;
      lDepTradeWageCostPriceRec@1100485001 : Record 11020360;
      lExceptionalCostPriceRec@1100485000 : Record 11020363;
    BEGIN
      CASE "Table No." OF
        DATABASE::"Budget Rate": PAGE.RUNMODAL(PAGE::"Budget Rates", lBudgetRateRec);
        DATABASE::"Project Budget Rate": PAGE.RUNMODAL(0, lProjBudgetRateRec);
        DATABASE::"Proj - Cost Object Cost Price": PAGE.RUNMODAL(0, lProjCostObjectCostPriceRec);
        DATABASE::"Project - Employee Cost Price": PAGE.RUNMODAL(0, lProjEmplCostPriceRec);
        DATABASE::"Proj - Empl - Wage Cost Price": PAGE.RUNMODAL(0, lProjEmplWageCCostPriceRec);
        DATABASE::"Project - Trade As. Cost Price": PAGE.RUNMODAL(0, lProjTradeAssCostPriceRec);
        DATABASE::"Proj - Trade - Wage Cost Price": PAGE.RUNMODAL(0, lProjTradeAssWageCostPriceRec);
        DATABASE::"Empl. - Cost Obj. Cost Price": PAGE.RUNMODAL(0, lEmplCostObjCostPriceRec);
        DATABASE::"Employee - Wage C. Cost Price": PAGE.RUNMODAL(0, lEmplWageCCostPriceRec);
        DATABASE::"Employee Cost Price": PAGE.RUNMODAL(0, lEmplCostPriceRec);
        DATABASE::"Trade Association Cost Price": PAGE.RUNMODAL(0, lTradeAssCostPriceRec);
        DATABASE::"Trade As. - Wage C. Cost Price": PAGE.RUNMODAL(0, lTradeAssWageCCostPriceRec);
        DATABASE::"Serv. - Empl. Cost Price": PAGE.RUNMODAL(0, lServContEmplCostPriceRec);
        DATABASE::"Serv. - Trade As. Cost Price": PAGE.RUNMODAL(0, lServTradeAssCostPriceRec);
        DATABASE::"Serv. - Cost Object Cost Price": PAGE.RUNMODAL(0, lServCostObjCostPriceRec);
        DATABASE::"Serv. - Trade -Wage Cost Price": PAGE.RUNMODAL(0, lServTradeWageCCostPriceRec);
        DATABASE::"Cost Object Cost Price": PAGE.RUNMODAL(0, lCostObjectCostPriceRec);
        DATABASE::"Department Cost Price": PAGE.RUNMODAL(0, lDepartmentCostPriceRec);
        DATABASE::"Dep. - Cost Object Cost Price": PAGE.RUNMODAL(0, lDepCostObjCostPriceRec);
        DATABASE::"Dep. - Trade As. Cost Price": PAGE.RUNMODAL(0, lDepTradeAssCostPriceRec);
        DATABASE::"Dep. - Trade - Wage Cost Price": PAGE.RUNMODAL(0, lDepTradeWageCostPriceRec);
        DATABASE::"Exceptional Cost Price": PAGE.RUNMODAL(0, lExceptionalCostPriceRec);
      END;
    END;

    PROCEDURE CheckCostPriceInReadOrder@1100485004(lTableNo@1100485000 : Integer);
    VAR
      lRecRef@1100485002 : RecordRef;
    BEGIN
      WITH CostPriceReadOrderLine DO BEGIN
        RESET;
        SETFILTER("Read Order", '1..');
        SETRANGE("Table No.", lTableNo);
        IF ISEMPTY THEN BEGIN
          lRecRef.OPEN(lTableNo);
          MESSAGE(Text002, lRecRef.CAPTION);
        END;
      END;
    END;

    BEGIN
    END.
  }
}

